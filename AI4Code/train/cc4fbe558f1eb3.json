{"cell_type":{"01aac1d8":"code","2c27f405":"code","f0c3d630":"code","0b9775ae":"code","64bf790f":"code","bd7475b0":"code","ea0191be":"code","369780da":"code","3cad3518":"code","49197db3":"code","4c0f276c":"code","b5d25b92":"code","29c7e5c2":"code","b6fbb6f9":"code","686e6f8a":"code","5dd5ec2d":"code","fb5f1679":"code","d3a340d4":"code","b29d066e":"code","d24c02e9":"code","ed670eb0":"code","d9fbecb3":"code","f8485b54":"code","3ef7001d":"code","d325c025":"code","fe62075b":"code","26a928e6":"code","cc641325":"code","a9df13ba":"code","24d53241":"code","620e1162":"code","680c5eee":"code","d350ed8e":"code","90d7f750":"code","d8e19464":"code","7dbb3084":"markdown","604224f8":"markdown","84001279":"markdown","1fdacb0e":"markdown","00a3b6b4":"markdown"},"source":{"01aac1d8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n%matplotlib inline","2c27f405":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ngender_submission = pd.read_csv('..\/input\/gender_submission.csv')","f0c3d630":"gender_submission.head()","0b9775ae":"combine = pd.concat([train,test], axis=0, ignore_index=True)\ncombine","64bf790f":"combine.info()","bd7475b0":"c = combine[combine.Cabin.notnull()]","ea0191be":"c.Cabin = c.Cabin.str.replace('\\d+', '')","369780da":"c.head()","3cad3518":"for i in c.Cabin:\n    if len(i) != 1:\n        d = c[(c.Cabin == i)].index\n        c = c.drop(d)\n   ","49197db3":"plt.subplots(figsize=(9,4))\nsns.countplot('Cabin',hue=\"Survived\", data=c,edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90)\nplt.title('Number Of Terrorist Activities Each Year')\nplt.show()","4c0f276c":"combine.drop('Cabin', axis=1, inplace=True)","b5d25b92":"a = combine[combine.Age.notnull()]","29c7e5c2":"a_s = a[(a.Survived == 1)]\na_d = a[(a.Survived == 0)]","b6fbb6f9":"a_d","686e6f8a":"plt.subplots(figsize=(15,6))\nsns.countplot('Age',hue=\"Survived\", data=a_d,edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90)\nplt.title('Number Of dead based on their age')\nplt.show()","5dd5ec2d":"plt.subplots(figsize=(15,6))\nsns.countplot('Age',hue=\"Survived\", data=a_s,edgecolor=sns.color_palette('dark',7))\nplt.xticks(rotation=90)\nplt.title('Number Of survived based on their age')\nplt.show()","fb5f1679":"combine.Age = combine.Age.fillna(combine.Age.mean())","d3a340d4":"combine.Embarked = combine.Embarked.fillna(combine.Embarked.value_counts().index[0])","b29d066e":"import re","d24c02e9":"train.Name","ed670eb0":"review = []\nfor i in range(0, len(combine.Name)):\n    sentence = re.sub('[^a-zA-Z]', ' ', combine['Name'][i])\n    sentence = sentence.lower()\n    sentence = sentence.split()\n    review.append(sentence)","d9fbecb3":"for i in range (0, len(review)):\n    for j in range(0, len(review[i])):\n        if review[i][j] == 'mr' or review[i][j] == 'miss' or review[i][j] == 'mrs':\n            review[i] = review[i][j]\n            break;","f8485b54":"combine.Name = review","3ef7001d":"combine.head()","d325c025":"combine.drop(['Ticket', 'PassengerId'], axis=1, inplace=True)","fe62075b":"combine.info()","26a928e6":"train = combine.iloc[0: 891, :]\ntest = combine.iloc[891:, :]","cc641325":"l = [test, train]\ndrop_rows = ''\nindexs = ''\nfor i in l:\n    drop_rows = i[(i.Name != 'miss') & (i.Name != 'mrs') & (i.Sex == 'female')].index.tolist()\n    i.drop(drop_rows, inplace=True)\n    \n    indexs = i[(i.Name != 'mr') & (i.Sex == 'male')].index.tolist()\n    i.loc[indexs, 'Name'] = 'mr'","a9df13ba":"X = train.iloc[:, :-1]\ny = train.iloc[:, 8]","24d53241":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder_X = LabelEncoder()","620e1162":"for i in ['Embarked', 'Pclass', 'Sex', 'Name']:\n    X[i] = labelencoder_X.fit_transform(X[i])","680c5eee":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","d350ed8e":"from sklearn.preprocessing import StandardScaler\n\nX_sc = StandardScaler()\nX_train = X_sc.fit_transform(X_train)\nX_test = X_sc.transform(X_test)","90d7f750":"from sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(kernel=\"rbf\", C=0.025, probability=True),\n    NuSVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]","d8e19464":"for clf in classifiers:\n    clf.fit(X_train, y_train)\n    \n    print(\"=\"*30)\n    \n    print('****Results****')\n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    print(\"Accuracy: {:.4%}\", acc)\n    \n    \nprint(\"=\"*30)","7dbb3084":"**Lets look at Cabin Feature and it's corolation with survived**","604224f8":"***Lets look at Age Feature***","84001279":"***Fill missing values***","1fdacb0e":"***Lets analys Name feature***","00a3b6b4":"**Drop Cabin Feature because it has numbers of missing values**"}}