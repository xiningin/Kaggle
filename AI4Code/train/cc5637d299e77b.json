{"cell_type":{"383f778a":"code","66cbb076":"code","1c62dcf0":"code","2c7ac01b":"code","8dc84f96":"code","6efae962":"code","b1548197":"code","04e45181":"code","34120684":"code","8b7b9c36":"code","99eb18ff":"code","9796e9a3":"code","b8cafff0":"code","1b942705":"code","b294532a":"code","a7180b06":"code","7f7f3182":"code","60d53ab8":"code","b10fa6ef":"code","a607cab5":"code","d4d101b3":"markdown","b44c6912":"markdown","740827d1":"markdown","7ddef79b":"markdown","1527a235":"markdown","7cbbe56a":"markdown","ba80b01d":"markdown","ff87dbc9":"markdown","335794e3":"markdown","2fd1ca7f":"markdown","97e40b71":"markdown","72ab33fe":"markdown","d488c20b":"markdown","4f709850":"markdown"},"source":{"383f778a":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom IPython.display import clear_output\n\n#Model\n\nfrom sklearn.model_selection import cross_validate\nimport lightgbm as lgbm\nfrom sklearn.model_selection import KFold","66cbb076":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ncombine = [train_df, test_df]\nprint(\"\u7279\u5fb4\u91cf\u306e\u6570\uff08\u76ee\u7684\u5909\u6570\u3082\u542b\u3080\uff09\",end=\"\")\nprint(len(train_df.T))\n\ncategory_columns=[\"MSZoning\",\"Street\",\"Alley\",\"LotShape\",\"LandContour\",\"Utilities\",\n                  \"LotConfig\",\"LandSlope\",\"Neighborhood\",\"Condition1\",\"Condition2\",\"BldgType\",\"HouseStyle\",\"RoofStyle\",\n                  \"RoofMatl\",\"Exterior1st\",\"Exterior2nd\",\"MasVnrType\",\"ExterQual\",\"ExterCond\",\"Foundation\",\"BsmtQual\",\n                  \"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"Heating\",\"HeatingQC\",\"CentralAir\",\"Electrical\",\n                  \"KitchenQual\",\"Functional\",\"FireplaceQu\",\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\"PavedDrive\",\n                  \"PoolQC\",\"Fence\",\"MiscFeature\",\"SaleType\",\"SaleCondition\"]\n\nfrom sklearn.preprocessing import LabelEncoder\nfor df in combine:\n    for col_name in category_columns:\n        #LabelEncoder\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\n        le = LabelEncoder()\n        #\u30e9\u30d9\u30eb\u3092\u899a\u3048\u3055\u305b\u308b\n        df[col_name]=df[col_name].fillna(\"nan\")\n        le = le.fit(df[col_name])\n        #\u30e9\u30d9\u30eb\u3092\u6574\u6570\u306b\u5909\u63db\n        df[col_name]=le.transform(df[col_name])\n\n#train\u30c7\u30fc\u30bf\uff1dtrain_df(feature), y(target)\n# Separate the label\ny = train_df.pop('SalePrice')","1c62dcf0":"#\u30d1\u30e9\u30e1\u30fc\u30bf\n#\u30d1\u30e9\u30e1\u30fc\u30bf\u306fGBDT\u306e\u6307\u5b9a\u306e\u307f\nlgbm_params = {\n    'boosting': 'gbdt',          # GBDT\u3092\u4f7f\u3046\n              }\n","2c7ac01b":"kf=KFold(n_splits=4,shuffle=True,random_state=2)\ninitial_model = lgbm.LGBMRegressor(**lgbm_params,random_state=2)\ncross_val=cross_validate(initial_model,train_df,y,cv=kf,return_estimator=True,scoring=\"neg_mean_squared_log_error\")\nclear_output()\nscore=np.mean(cross_val[\"test_score\"])\nprint(f\"\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u524d\u306e\u30b9\u30b3\u30a2\u306f{score}\")","8dc84f96":"#\u63a2\u7d22\u7a7a\u9593\u3092\u5b9a\u7fa9\n#initial model\u306f\u3001\u305d\u308c\u305e\u308c-1, 0.001\nparams_space = {\n    \"max_depth\" : [-1,3,5,7],\n    \"min_child_weight\" : [0.001,1,2,4]\n}\n#\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u4f5c\u6210\nimport itertools\nparam_combinations = itertools.product(params_space[\"max_depth\"],params_space[\"min_child_weight\"])","6efae962":"#\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u3064\u3044\u3066\u3001cross validation(\u6761\u4ef6\u306f\u5148\u307b\u3069\u3068\u540c\u69d8)\nscore_list=[]\nparams_list=[]\nfor max_depth,min_child_weight in param_combinations:\n    kf=KFold(n_splits=4,shuffle=True,random_state=2)\n    model = lgbm.LGBMRegressor(max_depth=max_depth,min_child_weight=min_child_weight,boosting_type=\"gbdt\",random_state=2)\n    cross_val=cross_validate(model,train_df,y,cv=kf,return_estimator=True,scoring=\"neg_mean_squared_log_error\")\n    score_list.append(np.mean(cross_val[\"test_score\"]))\n    params_list.append((max_depth,min_child_weight))","b1548197":"#best pararmeters\u53d6\u5f97\n#best parameter\u306f\u8907\u6570\u3042\u3063\u305f\nbest_params=np.array(params_list)[np.where(score_list==np.max(score_list))]\ninitial_max_depth=initial_model.get_params()[\"max_depth\"]\ninitial_min_child_weight=initial_model.get_params()[\"min_child_weight\"]\nprint(best_params)\nprint((initial_max_depth,initial_min_child_weight))","04e45181":"#\u63a2\u7d22\u7a7a\u9593\u306f\u5148\u307b\u3069\u3068\u540c\u69d8\n#initial model\u306f\u3001\u305d\u308c\u305e\u308c-1, 0.001\nparams_space = {\n    \"max_depth\" : [-1,3,5,7],\n    \"min_child_weight\" : [0.001,1,2,4]\n}","34120684":"from sklearn.model_selection import GridSearchCV\n#model\u5b9a\u7fa9\nmodel = lgbm.LGBMRegressor()\n#grid search\u306e\u6761\u4ef6\u3092\u8a18\u8ff0\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u7a7a\u9593\u3001cv,scoring\u306a\u3069\ngrid_search = GridSearchCV(model, param_grid=params_space, cv=kf,scoring=\"neg_mean_squared_log_error\")\n#grid search \u5b9f\u884c\ngrid_search.fit(train_df, y)\nprint(grid_search.best_params_)","8b7b9c36":"grid_search.best_score_","99eb18ff":"from scipy import stats\nparams_space = {\n    \"min_child_weight\" : stats.loguniform(1e-3, 1e+1),\n    \"max_depth\" : stats.randint(3,10)\n}","9796e9a3":"from sklearn.model_selection import RandomizedSearchCV\n#model\u5b9a\u7fa9\nmodel = lgbm.LGBMRegressor()\n#grid search\u306e\u6761\u4ef6\u3092\u8a18\u8ff0\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u7a7a\u9593\u3001cv,scoring\u306a\u3069\nrandom_grid_search = RandomizedSearchCV(model, param_distributions=params_space, cv=kf,scoring=\"neg_mean_squared_log_error\")\n#grid search \u5b9f\u884c\nrandom_grid_search.fit(train_df, y)\nprint(random_grid_search.best_params_)","b8cafff0":"print(f\"{random_grid_search.best_score_} : random search\")\nprint(f\"{grid_search.best_score_} : grid search\")\nprint(f\"0.019887099427856034 : initial model\")","1b942705":"import optuna\n#1. \u6700\u5927\u5316\u3057\u305f\u3044\u5024\u3092\u8fd4\u3059objective\u95a2\u6570\u3092\u5b9a\u7fa9\n\ndef objective(trial):\n    param_space = {\n        'boosting' : 'gbdt',\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n    }\n    \n    model = lgbm.LGBMRegressor(**param_space)\n    cross_val=cross_validate(model,train_df,y,cv=kf,scoring=[\"neg_mean_squared_log_error\"])\n    score=np.mean(cross_val[\"test_neg_mean_squared_log_error\"])\n    return score\n        ","b294532a":"#2. objective\u95a2\u6570\u3092\u6700\u5927\u5316\u3059\u308b\u65b9\u5411\u306b\u6700\u9069\u5316\u3059\u308b(100\u56de)\n#\u30d9\u30a4\u30ba\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3057\u305f\u826f\u3055\u305d\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u512a\u5148\u7684\u306b\u8a66\u3059\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)\nclear_output() #\u5b66\u7fd2\u904e\u7a0b\u304c\u8868\u793a\u3055\u308c\u308b\u304c\u3001\u90aa\u9b54\u306a\u306e\u3067\u4e00\u56de\u6d88\u3059","a7180b06":"#3. \u7d50\u679c\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)\nprint('Best Score', study.best_value)","7f7f3182":"#optuna\u306elightgbm\u3092import, \u57fa\u672c\u3053\u308c\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067OK\nimport optuna.integration.lightgbm as lgbm_opt","60d53ab8":"#\u30c7\u30fc\u30bf\u4f5c\u6210\n#model\u8a55\u4fa1\u306e\u305f\u3081\u306evalidation\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3002\uff08cross validation\u306f\u4f7f\u3048\u306a\u3044\u306e\u304b\uff1f\uff09\nfrom sklearn.model_selection import train_test_split\ntrain_x, test_x, train_y, test_y = train_test_split(train_df, y, test_size=0.25)\ndtrain=lgbm_opt.Dataset(train_x,train_y)\ndval=lgbm_opt.Dataset(test_x,test_y)","b10fa6ef":"#\u3053\u306emetric\u306flightgbm\u306e\u53d6\u308a\u3046\u308b\u3082\u306e\u306b\u9650\u308b\noptuna_params={\n    \"metric\" : \"rmse\"\n}\n\n#train\u3057\u3064\u3064\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3082\u3057\u3066\u304f\u308c\u308b\nopt_model=lgbm_opt.train(optuna_params, dtrain, valid_sets=dval,verbose_eval=0)\nclear_output()\n\n#Best parameter\u304c\u5f97\u3089\u308c\u308b\nopt_model.params","a607cab5":"#\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067model\u69cb\u7bc9\nmodel = lgbm.LGBMRegressor(**opt_model.params)\n\ncross_val=cross_validate(model,train_df,y,cv=kf,scoring=[\"neg_mean_squared_log_error\"])\nclear_output()\nprint(np.mean(cross_val[\"test_neg_mean_squared_log_error\"]))","d4d101b3":"**rmse\u3067\u6700\u9069\u5316\u3057\u3066\u3044\u308b\u306e\u3067mean squared log error\u306f\u3001\u3044\u307e\u3044\u3061**  \n**\u3053\u306e\u81ea\u7531\u5ea6\u306e\u4f4e\u3055\u306f\u5fae\u5999**","b44c6912":"## 1. \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u524d","740827d1":"**\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u524d\u306e\u30b9\u30b3\u30a2\u306f-0.019887099427856034**","7ddef79b":"## 2. \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3000\u305d\u306e\uff11","1527a235":"## 3. \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3000\u305d\u306e\uff12","7cbbe56a":"## 4. \u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\n\n    \u3042\u308b\u5206\u5e03\u306b\u5f93\u3063\u3066\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3001\u63a2\u7d22\u3059\u308b\u3002\u52b9\u7387\u304cUP\u3059\u308b\u5834\u5408\u304c\u3042\u308b","ba80b01d":"## 6. Optuna\u3000\u305d\u306e2\n\n      lightGBM\u5c02\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3068\u3001\u3055\u3089\u306b\u697d\u3067\u304d\u308b  \n      \u305f\u3060\u3001\u4f7f\u7528\u3067\u304d\u308bmetric\u304c\u9650\u3089\u308c\u3066\u3044\u308b\u3002mean_squared_log_error\u306f\u306a\u3044  \n      \u8272\u3005\u3001\u81ea\u7531\u5ea6\u304c\u4f4e\u3044\u6c17\u304c\u3059\u308b","ff87dbc9":"**\u5fae\u5999\u306b\u6539\u5584\u3057\u3066\u3044\u3063\u3066\u3044\u308b**  \n\u63a2\u7d22\u7a7a\u9593\u304c\u5e83\u3044\u306e\u3067\u3001\u5358\u7d14\u306a\u6bd4\u8f03\u306f\u3067\u304d\u306a\u3044","335794e3":"**\u63a2\u7d22\u7a7a\u9593\u304c\u5e83\u3044\u304b\u3089\u3060\u3068\u601d\u3046\u304c\u3001\u3081\u3061\u3083\u304f\u3061\u3083\u6539\u5584\u3057\u305f**  \n**\u7279\u7b46\u3059\u3079\u304d\u306f\u3001\u63a2\u7d22\u7a7a\u9593\u306f\u5e83\u304f\u306a\u3063\u305f\u306e\u306b\u3001\u304b\u304b\u308b\u6642\u9593\u306f\u305d\u3053\u307e\u3067\u5909\u308f\u3089\u306a\u3044**","2fd1ca7f":"## \u30c7\u30fc\u30bf\u53d6\u5f97\u3001\u52a0\u5de5","97e40b71":"### 1. \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u524d\n\u3000- \u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u6027\u80fd\u3092\u30c1\u30a7\u30c3\u30af\n### 2. \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3000\u305d\u306e1  \n\u3000- \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3092\u611a\u76f4\u306b\u5b9f\u88c5\n### 3. \u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3000\u305d\u306e2  \n\u3000- GridSearchCV\u3067\u3001\u7c21\u6f54\u306b\u8a18\u8ff0\n### 4. \u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1  \n\u3000- \u30e9\u30f3\u30c0\u30e0\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3059\u308b\n### 5. Optuna \u305d\u306e1  \n\u3000- \u4e00\u822c\u7684\u306a\u66f8\u304d\u65b9\u3067\u8a66\u3059\n### 6. Optuna \u305d\u306e2\n\u3000- LightGBM\u5c02\u7528Library\u3092\u8a66\u3059","72ab33fe":"### **\u7d50\u679c**\n\u521d\u671f\u30e2\u30c7\u30eb\u306f\u3001           \nmax_depth : -1, min_child_weight : 0.001, score:-0.019887099427856034  \n\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u5f8c  \nmax_depth : 5, min_child_weight : [0.001,1,2,4], score:-0.01976746653487394\n\n**\u5fae\u5999\u306b\u6539\u5584\u3057\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u3001\u305f\u3060\u8aa4\u5dee\u306e\u7bc4\u56f2\u5185**  \n\u63a2\u7d22\u7a7a\u9593\u3082\u72ed\u3044\u305f\u3081\u3001\u3053\u3093\u306a\u3082\u3093\u3060\u308d\u3046","d488c20b":"**\u540c\u69d8\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u305f\u3002\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u308b\u306e\u3067\u3001\u826f\u3044**","4f709850":"## 5. Optuna\u3000\u305d\u306e\uff11\n\n\u3000\u3000\u3000LightGBM tuner\u3092\u4f7f\u308f\u306a\u3044\u4e00\u822c\u7684\u306a\u65b9\u6cd5\u3002\u81ea\u7531\u5ea6\u304c\u5927\u304d\u3044"}}