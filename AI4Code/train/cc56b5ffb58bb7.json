{"cell_type":{"87d5f503":"code","b8be1a9e":"code","1a0cda70":"code","02da17e4":"code","05d18d32":"code","3f115882":"code","63fa676c":"code","c9d1de60":"code","378b150e":"code","049cd8b2":"code","f7717540":"code","5657cda2":"code","c3cd494f":"code","57c9ad6c":"code","8f387561":"code","9e1098cf":"code","a293b9f1":"code","dc556c83":"code","980dc445":"code","10dc1431":"code","bbbef4e9":"code","c098fe76":"code","8fd3c3a4":"code","d7466f85":"code","9ddd87b1":"code","013a83be":"code","b6bbedb0":"code","887cd1bc":"code","81a4b1c9":"code","1773fa44":"code","654ae63e":"code","4efe95b1":"code","af8610d0":"code","7dfaabf5":"code","d35e8be6":"code","d30bc067":"code","5042d325":"markdown","f1cfbf5b":"markdown","a2e084c2":"markdown"},"source":{"87d5f503":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8be1a9e":"column_names = ['user_id', 'item_id', 'rating','timestamp']\ndf = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.data', sep='\\t', names=column_names)","1a0cda70":"df.head(n=5)","02da17e4":"df.shape","05d18d32":"# To check the number of unique users\ndf['user_id'].nunique()","3f115882":"# Checking the number of unique movies\ndf['item_id'].nunique()","63fa676c":"# Retrievin the movie titles\nmovies_title = pd.read_csv('..\/input\/movielens-100k-dataset\/ml-100k\/u.item', sep='\\|', header=None)","c9d1de60":"movies_title.shape","378b150e":"movies_title = movies_title[[0,1]]","049cd8b2":"movies_title.columns = ['item_id', 'title']","f7717540":"movies_title.head(n=5)","5657cda2":"# Merging the earlier dataframe on the basis of item_id with the movies_title\ndf = pd.merge(df, movies_title, on='item_id')","c3cd494f":"# Validating the merge...\ndf.tail()","57c9ad6c":"# Finding the average rating of a movie\ndf.groupby('title').mean()['rating'].sort_values(ascending=False)","8f387561":"# How many times a movie has been watched (arranged in descending order)\ndf.groupby('title').count()['rating'].sort_values(ascending=False)","9e1098cf":"# Create a DF of the ratings for movies\nratings_df = pd.DataFrame(df.groupby('title').mean()['rating'])","a293b9f1":"# Adding the number of ratings column to the df created earlier\nratings_df['number of ratings'] = pd.DataFrame(df.groupby('title').count()['rating'])","dc556c83":"ratings_df.head()","980dc445":"ratings_df.sort_values(by='rating', ascending=False)","10dc1431":"# Checking the distribution of number of ratings vs appearances\nplt.figure(figsize=(10,6))\nplt.hist(ratings_df['number of ratings'], bins=70)\nplt.xlabel('No. of user ratings')\nplt.ylabel('The appearances for every rating')\nplt.title('Distribution of no. of ratings')\nplt.show()","bbbef4e9":"# Distribution of ratings\nplt.hist(ratings_df['rating'],bins=70)\nplt.xlabel('Avg. rating')\nplt.ylabel('No. of rating')\nplt.show()\n\n# Aha, a normal distribution spotted !!!","c098fe76":"sns.jointplot(x = ratings_df['rating'], y = ratings_df['number of ratings'], data = ratings_df, alpha = 0.5)","8fd3c3a4":"# Create a matrix as user vs movie matrix with each cell having the rating for the corresponding movie\nmovie_matrix = df.pivot_table(index='user_id',columns='title',values='rating')","d7466f85":"movie_matrix","9ddd87b1":"# Mostly \/ highly watched movies\nratings_df.sort_values('number of ratings', ascending=False).head()","013a83be":"# User-wise rating of a particular movie\nstarwars_usr_ratings = movie_matrix['Star Wars (1977)']\nstarwars_usr_ratings.head()","b6bbedb0":"# How much correlated is Star Wars with other movie\nsimilar_to_starwars = movie_matrix.corrwith(starwars_usr_ratings)","887cd1bc":"similar_to_starwars\n# NaN means the user didn't watch both the movies","81a4b1c9":"corr_of_starwars = pd.DataFrame(similar_to_starwars, columns=['Correlation'])","1773fa44":"# Dropping NaN values\ncorr_of_starwars.dropna(inplace=True)","654ae63e":"# A couple of other movies similar to Star wars\ncorr_of_starwars.sort_values('Correlation', ascending=False).head(10)","4efe95b1":"corr_of_starwars = corr_of_starwars.join(ratings_df['number of ratings'])","af8610d0":"corr_of_starwars[corr_of_starwars['number of ratings'] > 100].sort_values('Correlation', ascending=False)","7dfaabf5":"# Voila, we got recommended to watch the series of Star Wars... \n# Well, this was fun...","d35e8be6":"# Ok, let's create a function and check if we can implement the same thing\ndef recommend_movies(movie_name):\n    movie_usr_ratings = movie_matrix[movie_name]\n    similar_movie = movie_matrix.corrwith(movie_usr_ratings)\n    \n    corr_of_movie = pd.DataFrame(similar_movie, columns=['Correlation'])\n    corr_of_movie.dropna(inplace=True)\n    \n    corr_of_movie = corr_of_movie.join(ratings_df['number of ratings'])\n    \n    predictions = corr_of_movie[corr_of_movie['number of ratings'] > 100].sort_values('Correlation', ascending=False)\n    \n    return predictions","d30bc067":"predictions = recommend_movies('Crash (1996)')\npredictions.head()","5042d325":"### Performing some EDA","f1cfbf5b":"This is my first attempt towards analyzing a practical dataset. Please share your thoughts, valuable feedback on my approach. ","a2e084c2":"### Creating Movie Recommendation"}}