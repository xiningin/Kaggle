{"cell_type":{"d0dfa627":"code","1287b565":"code","1e00645d":"code","45a13686":"code","e0780e00":"code","58135425":"code","ce8bfaeb":"code","409f8047":"code","d2225386":"code","10fee2a8":"code","6e1c341d":"code","8249c8ee":"code","12e7fc6e":"code","1d9b7465":"code","a4a258f0":"code","e82064b3":"code","05a3861f":"code","5bf2c845":"code","927b1ae3":"code","117b8423":"code","a663add0":"code","254eb36e":"code","1e4e79d6":"code","1f5eefba":"code","6bddc0d5":"code","b2b2f159":"code","5eaa1849":"code","e12bacc0":"code","7915f4e6":"code","dd1cd258":"code","7e19fdf3":"code","56b4d617":"code","00c0a79c":"code","9707f8c8":"code","374467dc":"markdown","17afbe8d":"markdown"},"source":{"d0dfa627":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1287b565":"bank = pd.read_csv('\/kaggle\/input\/bank-marketing\/bank-additional-full.csv', sep = ';')\npd.set_option(\"display.max_columns\",50)\nbank.sample(2)","1e00645d":"char = bank.select_dtypes(include='object')\ndec = bank.select_dtypes(exclude = 'object')\npd.concat([char,dec],axis=1)\n\n\nfor cols in bank.columns:\n    if bank[cols].isnull().sum() > 0:\n        print(col , \"the null values\", bank[cols].isnull().sum())  #no missing values but unkwns available\n\nfor cols in char:\n    print(bank[cols].value_counts(),\"\\n\")\n    print(\"--------\")","45a13686":"import numpy as np\nbank.replace('unknown',np.NaN, inplace=True)\n\nbank.isnull().sum()\/len(bank)*100","e0780e00":"bank.nunique()","58135425":"import seaborn as sns\nsns.countplot(bank['y'])","ce8bfaeb":"import matplotlib.pyplot as plt\n\nfor column in char:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    sns.countplot(x = bank[column])\n    plt.show()","409f8047":"for columns in char:\n    plt.figure(figsize=(15,6))\n    print(columns.title())\n    sns.countplot(bank[columns],hue=bank['y'])\n    plt.show()","d2225386":"bank.drop(\"default\", axis=1,inplace=True)\nchar.drop(\"default\", axis=1)\nbank.dropna(inplace=True)","10fee2a8":"plt.figure(figsize=(15, 14))\nsns.heatmap(bank.corr(), annot=True, cmap='Spectral')\nplt.show()","6e1c341d":"sns.heatmap(bank[[\"emp.var.rate\", \"nr.employed\", \"euribor3m\"]].corr(), annot=True, cmap='Spectral')\nplt.show()","8249c8ee":"bank.drop(['emp.var.rate', 'nr.employed'], axis = 1, inplace=True)","12e7fc6e":"dec = list(set(dec) - set(['emp.var.rate', 'nr.employed']))\ndec","1d9b7465":"i = 1\nfor column in dec:\n    print(column.title())\n    plt.subplots(figsize=(16, 16))\n    plt.subplot(len(dec)+1, 3, i)\n    sns.boxplot(x = bank[column])\n    i += 1\n    plt.subplot(len(dec)+1, 3, i)\n    sns.distplot(x = bank[column])\n    i += 1\n    plt.subplot(len(dec)+1, 3, i)\n    sns.boxplot(x = bank[\"y\"], y = bank[column])\n    i += 1\n    plt.show()","a4a258f0":"bank[dec].describe()","e82064b3":"type(dec) , type(bank[dec]) ","05a3861f":"from sklearn.preprocessing import LabelEncoder\nl = LabelEncoder()\n\nfor cols in bank:\n    bank[cols] = l.fit_transform(bank[cols].astype(str).values)\n","5bf2c845":"bank","927b1ae3":"from sklearn.feature_selection import VarianceThreshold\nvar = VarianceThreshold(threshold=0.1)\nvar.fit(bank.astype(str).values)\nvar.get_support()\n","117b8423":"x = bank.drop(\"y\", axis=1)\ny = bank['y']\nx.sample()\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y, random_state=42)\n","a663add0":"#from sklearn.preprocessing import MinMaxScaler, StandardScaler\n#scaler = MinMaxScaler()\n\n#bank[dec] = scaler.fit_transform(bank[dec])","254eb36e":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import plot_tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import plot_confusion_matrix\n","1e4e79d6":"x_train['job'] = x_train['job'].replace(\"blue-collar\",\"bluecollar\")","1f5eefba":"clf_df = DecisionTreeClassifier(random_state=0)\ncld_df = clf_df.fit(x_train, y_train)","6bddc0d5":"##plotting a tree\nplt.figure(figsize=(15,7.5))\nplot_tree(clf_df, filled=True, rounded=True, class_names=['no',\"yes\"], feature_names=x.columns)","b2b2f159":"plot_confusion_matrix(clf_df, x_test, y_test, display_labels=[\"will no book\",\"will book\"])","5eaa1849":"##acuuracy score before prunning\nfrom sklearn.metrics import accuracy_score\ny_pred = cld_df.predict(x_test)\naccuracy_score(y_test,y_pred)","e12bacc0":"path = clf_df.cost_complexity_pruning_path(x_train, y_train)\nccp_alphas, impurities = path.ccp_alphas, path.impurities","7915f4e6":"ccp_alphas","dd1cd258":"clfs = []\nfor ccp_alpha in ccp_alphas:\n    clf = DecisionTreeClassifier(random_state=0, ccp_alpha=ccp_alpha)\n    clf.fit(x_train, y_train)\n    clfs.append(clf)\nprint(\"Number of nodes in the last tree is: {} with ccp_alpha: {}\".format(\n      clfs[-1].tree_.node_count, ccp_alphas[-1]))","7e19fdf3":"train_scores = [clf.score(x_train, y_train) for clf in clfs]\ntest_scores = [clf.score(x_test, y_test) for clf in clfs]\n\nfig, ax = plt.subplots()\nax.set_xlabel(\"alpha\")\nax.set_ylabel(\"accuracy\")\nax.set_title(\"Accuracy vs alpha for training and testing sets\")\nax.plot(ccp_alphas, train_scores, marker='o', label=\"train\",\n        drawstyle=\"steps-post\")\nax.plot(ccp_alphas, test_scores, marker='o', label=\"test\",\n        drawstyle=\"steps-post\")\nax.legend()\nplt.show()","56b4d617":"clf = DecisionTreeClassifier(random_state=0, ccp_alpha=0.004)\nclf.fit(x_train,y_train)","00c0a79c":"pred=clf.predict(x_test)\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, pred)","9707f8c8":"\nfrom sklearn import tree\nplt.figure(figsize=(15,10))\ntree.plot_tree(clf,filled=True)","374467dc":"Exploratory data analysis\n  Catogory Variable","17afbe8d":"Positive high correlation between:\n1. 'emp.var.rate' and 'nr.employed'\n2. 'emp.var.rate' and 'euribor3m'\n3. 'euribor3m' and 'nr.employed'"}}