{"cell_type":{"d407e49d":"code","698de562":"code","862ac7be":"code","4a9fab51":"code","eee119ba":"code","21485db2":"code","6b977066":"code","e31dd63b":"code","5d967b1a":"code","a5222b78":"code","c27ee982":"code","dba7bfa3":"markdown","e3c3243d":"markdown","5280ec19":"markdown","e65d38e9":"markdown","93ae5ca1":"markdown","3c6e7819":"markdown","3edbe220":"markdown","6a40f152":"markdown","fe9f757e":"markdown","5fc81f89":"markdown","db1c17a0":"markdown","901240d4":"markdown","b91cd4bd":"markdown","07ec1277":"markdown","83ece96d":"markdown"},"source":{"d407e49d":"import numpy  as np\nimport pandas as pd\n\nimport plotly\nimport plotly.express    as px\nimport plotly.graph_objs as go\n\nfrom plotly.subplots     import make_subplots","698de562":"x = np.arange(0, 5, 0.1)\ndef f(x):\n    return x**2\n\npx.scatter(x=x, y=f(x)).show()\n\n\n# More readable way:\n\n# fig = px.scatter(x=x, y=f(x))\n# fig.show()","862ac7be":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=f(x)))\nfig.add_trace(go.Scatter(x=x, y=x))\nfig.show()","4a9fab51":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=f(x),  name='f(x)=x<sup>2<\/sup>'))\nfig.add_trace(go.Scatter(x=x, y=x, name='$$g(x)=x$$'))\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  title=\"Line Plot\",\n                  xaxis_title=\"x Axis\",\n                  yaxis_title=\"y Axis\",\n                  margin=dict(l=0, r=0, t=30, b=0))\nfig.show()","eee119ba":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=f(x), mode='lines+markers',  name='f(x)=x<sup>2<\/sup>'))\nfig.add_trace(go.Scatter(x=x, y=x, mode='markers', name='$$g(x)=x$$'))\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  margin=dict(l=0, r=0, t=0, b=0))\nfig.update_traces(hoverinfo=\"x+y\")\nfig.show()","21485db2":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=f(x), mode='lines+markers',  name='f(x)=x<sup>2<\/sup>'))\nfig.add_trace(go.Scatter(x=x, y=x, mode='markers',name='g(x)=x',\n                         marker=dict(color='LightPink', size=7, line=dict(color='MediumPurple', width=2))))\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  hovermode=\"x\",\n                  margin=dict(l=0, r=0, t=0, b=0))\nfig.update_traces(hoverinfo=\"all\", hovertemplate=\"\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442: %{x}<br>\u0424\u0443\u043d\u043a\u0446\u0438\u044f: %{y}\")\nfig.show()","6b977066":"fig = go.Figure()\nfig.update_yaxes(range=[-0.5, 4], zeroline=True, zerolinewidth=2, zerolinecolor='Yellow')\nfig.update_xaxes(range=[-0.5, 4], zeroline=True, zerolinewidth=2, zerolinecolor='#008000')\nfig.add_trace(go.Scatter(visible='legendonly', x=x, y=f(x), mode='lines+markers',  name='f(x)=x<sup>2<\/sup>'))\nfig.add_trace(go.Scatter(x=x, y=x, mode='markers',name='g(x)=x',\n                         marker=dict(color='LightPink', size=7, line=dict(color='MediumPurple', width=2))))\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  hovermode=\"x\",\n                  margin=dict(l=0, r=0, t=0, b=0))\nfig.update_traces(hoverinfo=\"all\", hovertemplate=\"Arg: %{x}<br>Func: %{y}\")\nfig.show()","e31dd63b":"fig = make_subplots(rows=1, cols=2, column_widths=[2, 1])\n\nfig.update_yaxes(range=[-0.5, 4], zeroline=True, zerolinewidth=2, zerolinecolor='Yellow', col=1)\nfig.update_xaxes(range=[-0.5, 4], zeroline=True, zerolinewidth=2, zerolinecolor='#008000', col=2)\n\nfig.add_trace(go.Scatter(x=x, y=f(x), mode='lines+markers',  name='f(x)=x<sup>2<\/sup>'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=x, mode='markers',name='g(x)=x',\n                         marker=dict(color='LightPink', size=7, line=dict(color='MediumPurple', width=2))), 1, 2)\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  hovermode=\"x\",\n                  margin=dict(l=0, r=0, t=0, b=0))\nfig.update_traces(hoverinfo=\"all\", hovertemplate=\"Arg: %{x}<br>Func: %{y}\")\nfig.show()","5d967b1a":"fig = make_subplots(rows=2, cols=2,\n                    specs=[[{\"rowspan\": 2}, {}], [None, {}]])\n\n\nfig.update_yaxes(range=[-0.5, 10], zeroline=True, zerolinewidth=2, zerolinecolor='Yellow', col=1)\nfig.update_xaxes(range=[-0.5, 5], zeroline=True, zerolinewidth=2, zerolinecolor='#008000', col=2)\n\nfig.add_trace(go.Scatter(x=x, y=x**3,  name='h(x)=x<sup>3<\/sup>'), 1, 1)\nfig.add_trace(go.Scatter(x=x, y=f(x), mode='lines+markers',  name='f(x)=x<sup>2<\/sup>'), 1, 2)\nfig.add_trace(go.Scatter(x=x, y=x, mode='markers',name='g(x)=x',\n                         marker=dict(color='LightPink', size=7, line=dict(color='MediumPurple', width=2))), 2, 2)\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  hovermode=\"x\",\n                  margin=dict(l=0, r=0, t=0, b=0))\nfig.update_traces(hoverinfo=\"all\", hovertemplate=\"Arg: %{x}<br>Func: %{y}\")\nfig.show()","a5222b78":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=f(x), mode='lines+markers',  name='f(x)=x<sup>2<\/sup>', \n                         marker=dict(color=np.sin(x), \n                                     colorbar=dict(title=\"h(x)=sin(x)\"), \n                                     colorscale='Inferno',\n                                     size=50*abs(np.sin(x)))\n                        ))\n\nfig.update_layout(legend_orientation=\"h\",\n                  legend=dict(x=.5, xanchor=\"center\"),\n                  margin=dict(l=0, r=0, t=0, b=0))\n\nfig.update_traces(hoverinfo=\"all\", hovertemplate=\"Arg: %{x}<br>Func: %{y}\")\nfig.show()","c27ee982":"config = dict({'scrollZoom': True,\n               'displayModeBar': True,\n               'modeBarButtonsToAdd':['drawline',\n                                      'drawopenpath',\n                                      'drawclosedpath',\n                                      'drawcircle',\n                                      'drawrect',\n                                      'eraseshape'\n                                      ]})\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=f(x)))\nfig.show(config=config)","dba7bfa3":"# Config settings","e3c3243d":"There are several config options below.","5280ec19":"# Line Plots","e65d38e9":"This is a cheat sheet for Data Visualization with Plotly (Scatter(), fundamentals). In this notebooks I use information from [Oficial Plotly Documentation](https:\/\/plotly.com\/python\/) and [Habr Article (in Russian)](https:\/\/habr.com\/ru\/post\/502958\/).\n\n***Please feel free to leave comments and advices, up-votes are really appreciated!)***\n","93ae5ca1":"Lets change lines mode:\n\n* mode='lines+markers';\n* mode='markers'.\n\nAlso you can define info in InfoBox which you can see while hove over plot points.\n\n* fig.update_traces(hoverinfo=\"x+y\") - now you will see only x and y values.","3c6e7819":"* Enabling Scroll Zoom - This option allows users to zoom in and out of figures using the scroll wheel on their mouse and\/or a two-finger scroll.\n* Forcing The Modebar to Always Be Visible (by default, the modebar is only visible while the user is hovering over the chart).\n* Add optional shape-drawing buttons to modebar (see [the tutorial on shapes and shape drawing](https:\/\/plotly.com\/python\/configuration-options\/python\/shapes#drawing-shapes-on-cartesian-plots) for more details.","3edbe220":"# Subplots","6a40f152":"More useful and advanced tunings for your plot:\n\n* plot name -> 'name' attribute in Scatter(). You can use both LATEX and HTML format;\n* legend orientation -> fig.update_layout(legend_orientation=\"h\");\n* legend centering -> fig.update_layout(legend=dict(x=.5, xanchor=\"center\"));\n* plot margins -> fig.update_layout(margin=dict(l=0, r=0, t=0, b=0));\n* general plot title -> title=\"Plot Title\";\n* axis titles -> xaxis_title=\"x Axis\", yaxis_title=\"y Axis\".","fe9f757e":"Or you can even create your own template for hoveover box information:\n\n* hovertemplate=\"your_template_here\"\n\nOf course markers can be customized too, for example lets chage color and size of dots by adding dict() with this parameters (marker=dict(color='LightPink', size=7, line=dict(color='MediumPurple', width=2))).\n\nAnd the most interesting: we can add 'hovermode' parameter and now we will see infobox for both lines at the same time.","5fc81f89":"The first plot is very simple: lets plot scatters using **scatter()** function from plotly.express and then 'show' it using **show()** function.","db1c17a0":"More flexible and advanced way is to create a shape and draw objects on it.\n\nAnd now you can draw as many lines on your plot as you want.","901240d4":"You can specify axis parameters and add Ox and Oy lines. \n\nfig.update_yaxes has the following parameters:\n\n* 'range' -> the range of axis values;\n* 'zeroline' -> to show or not;\n* 'zerolinewidth' -> the width in pixels;\n* 'zerolinecolor' -> the color by name or by code.\n\nAlso lets put new parameter in Scatter() - visible='legenonly' - that means the line will be hide by default.","b91cd4bd":"> Please note that the graph is interactive, if you hover over it, you can zoom in and out, select areas, get detailed information on hovering over a point, return the picture to its original position, and, if necessary, save as a file.","07ec1277":"We can put several plots in the one picture, fro that you should use make_subplots() from plotly.subplots.\n\nThe code below contains the following changes:\n\n* make_subplots(rows=1, cols=2, column_widths=[2, 1]) -> split picture into 2 columns (and 1 row) and specify the column propprtions 2:1;\n* 'col' in update_xaxes -> for which column this axis parameters will be used (in our case yellow zeroline will be displayed on left plot, green zeroline will be displayed in right plot);\n* add_trace( ... , 1, 2) -> the figure will be displayed in the first row second column (right plot).","83ece96d":"You can define as many rows and columns as you wish, and even combine several cells to plot graph in them.\n\nFor example lets create table 2x2 and show three plots."}}