{"cell_type":{"52dc7795":"code","a63fb01c":"code","fc2fe7fb":"code","7f31e9b3":"code","17a91e57":"code","bbfc0c20":"code","f0ebdf91":"code","037ebe47":"code","fe84ad13":"code","66602ecb":"code","a1f950d1":"code","7397d208":"code","a628917b":"code","be1c78cf":"code","378f722e":"code","450b9e48":"code","f6b5c052":"code","257e5159":"code","85278ca6":"code","a35540f9":"code","2061cf45":"code","d3292570":"code","6699f9b0":"code","0b265ea2":"markdown","4b9f5a81":"markdown","65e0c0de":"markdown","09c61595":"markdown","3a2b6520":"markdown"},"source":{"52dc7795":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a63fb01c":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.head()","fc2fe7fb":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","7f31e9b3":"y = train['SalePrice']\ntrain.drop('SalePrice', axis=1, inplace=True)\n# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c train and test \ndata = pd.concat([train, test])\ndata.drop('Id', axis=1, inplace=True)\ndata.shape\ndata.info()","17a91e57":" data.isnull().sum().sort_values()","bbfc0c20":"nan_categorical = []\nnan_num = []\nmissing = {}\ntot = len(data)\n\nfor i in data.columns:\n    var = data[i].isnull().sum()\n    if (var!=0):\n        missing.update({i:var\/tot*100})\n        if (data[i].dtype=='object'):\n            nan_categorical.append(i)\n        else:\n            nan_num.append(i)","f0ebdf91":"print(\"Catorical Nan:\\n\",nan_categorical)\nprint(\"\\n Int\/float: \\n\",nan_num)\nprint(\"\\n NaN:\",len(nan_categorical)+len(nan_num) )","037ebe47":"#\u0421\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c None (\u0432 Nan)\nnone_columns = ['Alley', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'FireplaceQu', 'GarageType', \n                'GarageFinish', 'GarageQual', 'GarageCond',  'PoolQC',  'Fence', 'MiscFeature', 'MasVnrType']\n\n# \u0421\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438\nzero_columns = [ 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', \n                'GarageYrBlt', 'GarageCars', 'GarageArea']\n# \u0421\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u043e\u0434\u043e\u0439 (\u0432 Nan)\nmode_columns = ['Utilities', 'Exterior1st', 'Exterior2nd', 'Electrical', 'KitchenQual', 'Functional', 'SaleType']\n\nfor i in none_columns:\n    data[i].fillna('None', inplace=True)\n\nfor i in zero_columns:\n    data[i].fillna(0, inplace=True)\n\nfor i in mode_columns:\n    data[i].fillna(data[i].mode()[0], inplace=True)\n    \n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c MSZoning \u043f\u043e MSSubClass.\ndata['MSZoning'] = data.groupby('MSSubClass')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))\n    \n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c LotFrontage \u043f\u043e Neighborhood.\ndata['LotFrontage'] = data.groupby(['Neighborhood'])['LotFrontage'].transform(lambda x: x.fillna(x.median()))","fe84ad13":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u043d\u043e \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\ndata['MSSubClass'] = data['MSSubClass'].astype(object)\ndata['YrSold'] = data['YrSold'].astype(object)\ndata['MoSold'] = data['MoSold'].astype(object)","66602ecb":"data.isnull().sum().sum()","a1f950d1":"#\u0434\u0435\u043b\u0438\u043c \u043f\u043e \u0448\u043a\u0430\u043b\u0435 \u043e\u0442 0 \u0434\u043e 5 Excellent, Good, Typical, Fair, Poor, None \ncols_ExGd = ['ExterQual','ExterCond','BsmtQual','BsmtCond',\n             'HeatingQC','KitchenQual','FireplaceQu','GarageQual',\n             'GarageCond','PoolQC']\n\ndict_ExGd = {'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1,'None':0}\n\nfor col in cols_ExGd:\n    data[col].replace(dict_ExGd, inplace=True)\ndict_nigh = {'NridgHt': 8, 'NoRidge' : 8, 'StoneBr' : 8, \n             'Timber' : 7, 'Somerst' : 7, 'Veenker' : 7, 'Crawfor' : 7, \n             'ClearCr' : 7, 'CollgCr' : 7, 'Blmngtn' : 7,\n             'Gilbert' : 6, \n             'SawyerW' : 5, \n             'Mitchel' : 4, \n             'NPkVill' : 3, 'NAmes': 3, 'NWAmes' : 3, 'SWISU' : 3, 'Blueste' : 3, \n             'Sawyer' : 2, 'BrkSide' : 2, 'Edwards' : 2, 'OldTown' : 2,\n             'BrDale' : 1, 'IDOTRR' : 1, 'MeadowV' : 1,\n             }\n\ndata['Neighborhood'].replace(dict_nigh, inplace=True)\n\ndata['BsmtExposure'].replace({'Gd':4,'Av':3,'Mn':2,'No':1,'None':0}, inplace=True)\ndata['CentralAir'].replace({'Y':1,'N':0}, inplace=True)\ndata['Functional'].replace({'Typ':7,'Min1':6,'Min2':5,'Mod':4,'Maj1':3,'Maj2':2,'Sev':1,'Sal':0}, inplace=True)\ndata['GarageFinish'].replace({'Fin':3,'RFn':2,'Unf':1,'None':0}, inplace=True)\ndata['LotShape'].replace({'Reg':3,'IR1':2,'IR2':1,'IR3':0}, inplace=True)\ndata['Utilities'].replace({'AllPub':3,'NoSewr':2,'NoSeWa':1,'ELO':0}, inplace=True)\ndata['LandSlope'].replace({'Gtl':2,'Mod':1,'Sev':0}, inplace=True)\n\nbsm_dict = {'None': 0,\n            'Unf': 1,\n            'LwQ': 2,\n            'Rec': 3,\n            'BLQ': 4,\n            'ALQ': 5,\n            'GLQ': 6\n           }\ndata['BsmtFinType1'].replace(bsm_dict, inplace=True)\ndata['BsmtFinType2'].replace(bsm_dict, inplace=True)","7397d208":"data['HasAlley'] = data['Alley'].apply(lambda x: 1 if x!='None' else 0)\ndata['HasFence'] = data['Fence'].apply(lambda x: 1 if x!='None' else 0)\ndata['HasBsmt'] = data['BsmtQual'].apply(lambda x: 1 if x>0 else 0)\ndata['HasGarage'] = data['GarageType'].apply(lambda x: 1 if x!='None' else 0)\ndata['HasFirePlace'] = data['FireplaceQu'].apply(lambda x: 1 if x>0 else 0)\ndata['HasPool'] = data['PoolArea'].apply(lambda x: 1 if x>0 else 0)\ndata['Has2ndFloor'] = data['2ndFlrSF'].apply(lambda x: 1 if x>0 else 0)\n\ndata['TotalExtQual'] = (data['ExterQual'] + data['ExterCond'])\ndata['TotalBsmQual'] = (data['BsmtQual'] + data['BsmtCond'] + data['BsmtFinType1'] + data['BsmtFinType2'])\ndata['TotalGrgQual'] = (data['GarageQual'] + data['GarageCond'])\ndata['TotalQual'] = (data['OverallQual'] + data['TotalExtQual'] + data['TotalBsmQual'] + data['TotalGrgQual']+ \n                     data['KitchenQual'] + data['HeatingQC']\n                    )\n\ndata['QualGr'] = data['TotalQual'] * data['GrLivArea']\ndata['QualBsm'] = data['TotalBsmQual'] * (data['BsmtFinSF1'] + data['BsmtFinSF2'])\ndata['QualExt'] = data['TotalExtQual'] * data['MasVnrArea']\ndata['QualGrg'] = data['TotalGrgQual'] * data['GarageArea']\ndata['QualSFNg'] = data['QualGr'] * data['Neighborhood']\n\ndata['TotalSF'] = (data['BsmtFinSF1'] + data['BsmtFinSF2'] + data['1stFlrSF'] + data['2ndFlrSF'])\n\ndata['TotalBathrooms'] = (data['FullBath'] + (0.5 * data['HalfBath']) +\n                          data['BsmtFullBath'] + (0.5 * data['BsmtHalfBath'])\n                         )\ndata['TotalPorchSF'] = (data['OpenPorchSF'] + data['3SsnPorch'] + data['EnclosedPorch'] +\n                        data['ScreenPorch'] + data['WoodDeckSF']\n                       )\ndata['YearBlRm'] = (data['YearBuilt'] + data['YearRemodAdd'])","a628917b":"from scipy.stats import skew\nnumeric_feats = data.dtypes[data.dtypes != \"object\"].index\nskewed_feats = data[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewed_feats","be1c78cf":"def fixing_skewness(df):\n    from scipy.stats import skew\n    from scipy.special import boxcox1p\n    from scipy.stats import boxcox_normmax\n    \n    numeric_feats = df.dtypes[df.dtypes != \"object\"].index\n\n    skewed_feats = df[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\n    high_skew = skewed_feats[abs(skewed_feats) > 0.5]\n    skewed_features = high_skew.index\n\n    for feat in skewed_features:\n        df[feat] = boxcox1p(df[feat], boxcox_normmax(df[feat] + 1))\n\nfixing_skewness(data)","378f722e":"cols = []\nfor i in data.columns:\n    if data[i].dtype==object:\n        cols.append(i)\n\ndata = pd.get_dummies(data=data, columns=cols)\ndata.shape","450b9e48":"#\u0414\u0435\u043b\u0438\u043c \u043d\u0430 train \u0438 test\nX_train = data.iloc[:len(train), :]\nX_test = data.iloc[len(train):, :]","f6b5c052":"y_scaled = np.log(y)\n\nfrom sklearn.preprocessing import RobustScaler\nrobust_scaler = RobustScaler()\n\nX_train_scaled = robust_scaler.fit_transform(X_train)\nX_test_scaled = robust_scaler.transform(X_test)","257e5159":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.001)\n\nlasso.fit(X_train_scaled, y_scaled)\n\ny_pred_lasso = lasso.predict(X_test_scaled)\n\nlasso_coeff = pd.DataFrame({'Feature Importance':lasso.coef_}, index=data.columns)\nlasso_coeff.sort_values('Feature Importance', ascending=False)","85278ca6":"g = lasso_coeff[lasso_coeff['Feature Importance'] != 0].sort_values('Feature Importance')","a35540f9":"from catboost import CatBoostRegressor\n\ncbr = CatBoostRegressor(iterations=3500,\n                        learning_rate=0.03,\n                        od_type='Iter',\n                        od_wait=1500,\n                        depth=6,\n                        random_strength=1,\n                        l2_leaf_reg=10,\n                        sampling_frequency='PerTree',\n                        verbose=0\n                       )\ncbr.fit(X_train_scaled, y_scaled)","2061cf45":"cbr.fit(X_train_scaled, y_scaled)","d3292570":"def price_predict(X):\n    return (cbr.predict(X))","6699f9b0":"pred = np.exp(price_predict(X_test_scaled))\npred = pd.Series(pred, name='SalePrice')\nresults = pd.concat((test['Id'], pred), axis=1)\nresults.to_csv(\"mysubmission2.csv\", index=False)\nresults.head()","0b265ea2":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u041b\u0430\u0441\u0441\u043e, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0441\u043b\u0430\u0433\u0430\u0435\u043c\u043e\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u0447\u0442\u043e \u0447\u0430\u0441\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.","4b9f5a81":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432. \u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0443 PoolQC.","65e0c0de":"\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u043c \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u043c CatBoost","09c61595":"\u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","3a2b6520":"Skewness (\u041a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0438) \u2014 \u044d\u0442\u043e \u043c\u0435\u0440\u0430 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u043e\u0442 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u043e\u0433\u043e, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0430 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043e\u0431\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0447\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e, \u0442\u043e \u0430\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u044f \u0440\u0430\u0432\u043d\u0430 \u043d\u0443\u043b\u044e. "}}