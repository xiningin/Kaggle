{"cell_type":{"90783ddd":"code","8f75f9c5":"code","8d8fb786":"code","914f0e02":"code","5ffded74":"code","348855d8":"code","77846248":"code","2118caad":"code","2ba44668":"code","a5549ae8":"code","607d0dd5":"code","233d2baa":"code","26917bbe":"code","5442a6da":"code","6c78681f":"code","dcfc9225":"code","912be23f":"code","160fba69":"code","922e7de4":"code","1ab0bee1":"code","72b8e649":"code","0e07acd4":"code","7609faeb":"code","5b70a150":"code","17c10cd9":"code","967f7e99":"code","724834ef":"code","eab2e78e":"code","fb2ccad7":"code","4042635b":"code","22cb5d7c":"code","c459c4be":"code","47b27ae8":"code","cea826a2":"code","61145409":"code","0212186e":"code","62acbaae":"code","4e20a1fb":"code","da69f956":"code","c3701c36":"code","969a8ec6":"code","46b6fe78":"code","d4a06a19":"code","7465cd11":"code","b78123f3":"code","90b97f31":"code","34c41dea":"code","c416625e":"code","ea0cfe3a":"code","91e24a17":"code","8b9a1a00":"code","939e5328":"code","1017d70d":"code","1034818e":"code","4e687f02":"code","68e8b2ec":"code","ce8b62d1":"code","eb906412":"code","ed316219":"code","e2899447":"code","1d562f4c":"code","b6706e27":"code","cbd1d740":"markdown","fb6db877":"markdown","a8201e70":"markdown","4e5a370d":"markdown","a52cf090":"markdown","8afe6e58":"markdown","e44c7c9a":"markdown","ce5fe3c7":"markdown","d9796db8":"markdown","dc3cd939":"markdown","bd51b310":"markdown","8874ec90":"markdown","d10608c6":"markdown","bb35c333":"markdown","f1163eec":"markdown","0b4499ac":"markdown","a8275883":"markdown","10edab29":"markdown","4a4708ff":"markdown","feb0b929":"markdown","93e1162c":"markdown","fa98ec67":"markdown","3fb9b8e7":"markdown","13a8de8b":"markdown","604b7189":"markdown","67b477e1":"markdown","04ad344d":"markdown","2feefe17":"markdown","efcb7e47":"markdown","72bce8e0":"markdown","695ee4de":"markdown","38ad054a":"markdown","956b9e9c":"markdown","fcb68b27":"markdown","ae140263":"markdown","4af4fad9":"markdown"},"source":{"90783ddd":"# This is a code cell\na = 3","8f75f9c5":"b = 5\na   # The last variable is always printed","8d8fb786":"a += b","914f0e02":"list()","5ffded74":"# First we will import all the modules we will use\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression","348855d8":"# Use ! to execute a shell command from the notebook\n!ls \/kaggle\/input\/weather-postprocessing","77846248":"# We can just peek at the data from the command line\n!head \/kaggle\/input\/weather-postprocessing\/pp_train.csv","2118caad":"df_train = pd.read_csv('\/kaggle\/input\/weather-postprocessing\/pp_train.csv', index_col=0)\ndf_test = pd.read_csv('\/kaggle\/input\/weather-postprocessing\/pp_test.csv', index_col=0)","2ba44668":"df_train.head()","a5549ae8":"df_train.head().T    # Use .T for a transposed view","607d0dd5":"df_train.describe().T","233d2baa":"# How big is each dataset\nlen(df_train), len(df_test)","26917bbe":"# What are the columns\ndf_train.columns","5442a6da":"df_test.columns","6c78681f":"df_train.dtypes","dcfc9225":"df_train.station.nunique()","912be23f":"df_train.t2m_obs.hist(bins=50);","160fba69":"df_train[::1000].plot.scatter('t2m_obs', 't2m_fc_mean', alpha=0.5);","922e7de4":"def linear_model(x, a, b):\n    return a*x + b","1ab0bee1":"x = df_train.t2m_fc_mean\ny_pred = linear_model(x, a=1, b=0)\n# y_pred = linear_model(x, a=1, b=0.1)","72b8e649":"df_train[::1000].plot.scatter('t2m_obs', 't2m_fc_mean', alpha=0.5);\nplt.scatter(x, y_pred, c='r', alpha=0.5);","0e07acd4":"y_true = df_train.t2m_obs","7609faeb":"def mse(y_true, y_pred):\n    return ((y_true - y_pred)**2).mean()","5b70a150":"mse(y_true, y_pred)","17c10cd9":"df_train.isna().sum()","967f7e99":"df_test.isna().sum()","724834ef":"df_train = df_train.dropna(subset=['t2m_obs'])","eab2e78e":"# Replace missing soil moisture values with mean value\ndf_train.loc[:, 'sm_fc_mean'].replace(np.nan, df_train['sm_fc_mean'].mean(), inplace=True)\n# Same for test dataset, using the training values\ndf_test.loc[:, 'sm_fc_mean'].replace(np.nan, df_train['sm_fc_mean'].mean(), inplace=True)","fb2ccad7":"split_date = '2015-01-01'\nX_train = df_train[df_train.time < split_date][['t2m_fc_mean']]\ny_train = df_train[df_train.time < split_date]['t2m_obs']\nX_valid = df_train[df_train.time >= split_date][['t2m_fc_mean']]\ny_valid = df_train[df_train.time >= split_date]['t2m_obs']","4042635b":"X_train.shape, X_valid.shape","22cb5d7c":"lr = LinearRegression()","c459c4be":"lr.fit(X_train, y_train)","47b27ae8":"y_pred = lr.predict(X_valid)","cea826a2":"mse(y_pred, y_valid)","61145409":"a = lr.coef_\nb = lr.intercept_\na, b","0212186e":"plt.scatter(X_train[::1000], y_train[::1000], alpha=0.5)\nx = np.array([-15, 20])\nplt.plot(x, a*x+b, c='r');","62acbaae":"lr.score(X_valid, y_valid)","4e20a1fb":"def print_scores(model):\n    r2_train = model.score(X_train, y_train)\n    r2_valid = model.score(X_valid, y_valid)\n    mse_train = mse(y_train, model.predict(X_train))\n    mse_valid = mse(y_valid, model.predict(X_valid))\n    print(f'Train R2 = {r2_train}\\nValid R2 = {r2_valid}\\nTrain MSE = {mse_train}\\nValid MSE = {mse_valid}')","da69f956":"print_scores(lr)","c3701c36":"split_date = '2015-01-01'\nX_train = df_train[df_train.time < split_date].drop(['t2m_obs', 'station', 'time'], axis=1)\ny_train = df_train[df_train.time < split_date]['t2m_obs']\n\nX_valid = df_train[df_train.time >= split_date].drop(['t2m_obs', 'station', 'time'], axis=1)\ny_valid = df_train[df_train.time >= split_date]['t2m_obs']\n\nX_test  = df_test.drop(['station', 'time'], axis=1)","969a8ec6":"X_train.shape, X_test.shape","46b6fe78":"lr = LinearRegression()\nlr.fit(X_train, y_train)","d4a06a19":"print_scores(lr)","7465cd11":"preds = lr.predict(X_test)\npreds.shape","b78123f3":"sub =  pd.DataFrame({'id': range(len(preds)), 'Prediction': preds})\nsub.head()","90b97f31":"sub.to_csv('submission.csv', index=False)","34c41dea":"X_train.to_csv('X_train.csv')\ny_train.to_csv('y_train.csv')\nX_valid.to_csv('X_valid.csv')\ny_valid.to_csv('y_valid.csv')\nX_test.to_csv('X_test.csv')","c416625e":"y_clim = y_train.mean()\ny_clim","ea0cfe3a":"mse(y_valid, y_clim)","91e24a17":"stations_train = df_train.station[df_train.time < split_date]\nstations_valid = df_train.station[df_train.time >= split_date]\nstations_test = df_test.station","8b9a1a00":"preds = np.zeros(len(y_valid))\nfor s in stations_valid.unique():\n    s_idxs = stations_valid == s\n    if s in stations_train.unique():\n        preds[s_idxs] = y_train[stations_train == s].mean()\n    else:\n        preds[s_idxs] = y_train.mean()","939e5328":"mse(preds, y_valid)","1017d70d":"%%time\nmodels = {}\nfor s in stations_train.unique():\n    m = LinearRegression()\n    m.fit(X_train[stations_train == s], y_train[stations_train == s])\n    models[s] = m","1034818e":"preds = np.zeros(len(y_valid))\nfor s in stations_valid.unique():\n    s_idxs = stations_valid == s\n    if s in stations_train.unique():\n        preds[s_idxs] = models[s].predict(X_valid[s_idxs])\n    else:\n        preds[s_idxs] = lr.predict(X_valid[s_idxs])","4e687f02":"mse(preds, y_valid)","68e8b2ec":"test_preds = np.zeros(len(X_test))\nfor s in stations_test.unique():\n    s_idxs = stations_test == s\n    if s in stations_train.unique():\n        test_preds[s_idxs] = models[s].predict(X_test[s_idxs])\n    else:\n        test_preds[s_idxs] = lr.predict(X_test[s_idxs])","ce8b62d1":"sub =  pd.DataFrame({'id': range(len(test_preds)), 'Prediction': test_preds})\nsub.head()","eb906412":"sub.to_csv('submission_local.csv', index=False)","ed316219":"from sklearn.ensemble import RandomForestRegressor","e2899447":"%%time\nrf = RandomForestRegressor(n_jobs=-1, verbose=1, min_samples_leaf=100)\nrf.fit(X_train, y_train)","1d562f4c":"preds = rf.predict(X_valid)","b6706e27":"mse(y_valid, preds)","cbd1d740":"These are tabular datasets saved in CSV format, something you could also open in Excel. In Python, we use Pandas for this type of data. Pandas = Excel in Python.\n\nThe training file contains data from 2007 to 2015.\nThe testing file is from 2016.","fb6db877":"We will use `sklearn` to train our linear regression. All `sklearn` models (=estimators) use the same API.\n\nFirst, we create a model object.","a8201e70":"Two columns have missing values:\n\n1. `t2m_obs`: That is our target. If we don't have that we can't learn. So we should remove these rows.\n2. `sm_fc_mean`: Quite a lot of soil moisture values are missing. We can't just remove those because there are also missing values in the test set. Plus we would throw away quite a lot of training data. Here we will fill in the missing values.","4e5a370d":"Caution: The order of execution matters!\n\nA really useful trick:\nHold `shift + tab` for two seconds inside a function to bring up the docstring.","a52cf090":"Now we can try fiddling with the two parameters a and b to reduce the error.","8afe6e58":"### Split into train\/valid\/test\n\nWe have been given two datasets: train and test. `df_train` contains all the data that we are allowed to use to train our models. `df_test` contains only the features for the samples that we actually want to predict. So why do we need a third `validation` dataset?\n\nIn the real world the testing data would usually be in the future, so we cannot actually use it to verify how good our model is. We also shouldn't use the training data to evaluate our model since we could literally just build a lookup table and get a perfect score. So we want a third validation dataset to check model performance.\n\nIt is up to us which data from `df_train` to take for validation. Let's assess two options:\n\n1. Randomly pick samples\n2. Pick the last year 2015 from df_train (2007-2015)\n\nWhich one would be a better validation dataset?\n\n*More info:* https:\/\/www.fast.ai\/2017\/11\/13\/validation-sets\/","e44c7c9a":"We can see that the training scores are a little better than the validation score but let's not worry about this now (we will worry about this a lot very soon).","ce5fe3c7":"## Linear regression for each station","d9796db8":"Next, we fit the model using the training data. What this is doing internally is finding the line through the training data that has the lowest MSE.","dc3cd939":"Pandas also has some easy-to-use plotting functions.","bd51b310":"Finally, we want to save the pre-processed data so that we can reuse it in later notebooks.","8874ec90":"And that's it. We have trained a ML model. Now we just need to figure out how good it is.","d10608c6":"The data is stored in this directory:","bb35c333":"## Data preparation\n\nNow let's do machine learning!\n\nIn (supervised) machine learning, the task is to predict a quantity $y$ as a function of some inputs $X$ with a model $M$.\n\n$y = M(X)$\n\nIn our first example, we will do some NWP post-processing. We want to predict the temperature measured at some surface stations (our $y$) based on the NWP forecast of temperature plus a bunch of other variables, as well as some properties of the station like the altitude. All of these inputs are our $X$.\n\nSome terminology:\n- $X$ = inputs = features = predictors = independend variables\n- $y$ = outputs = targets = predictands = dependent variable\n\nHow do we find $M$? We learn it from some training data. Let's now actually look at the dataset","f1163eec":"For a list of kernel shortcuts see: https:\/\/www.kaggle.com\/naushads\/keyboard-shortcuts-for-kaggle-kernels\n\nThey are mostly the same as for regular Jupyter notebooks but some are different.\n\nThe basic commands are:\n- `Esc` to get into command mode\n- `Enter` to get into edit mode\n- `dd` in command mode to delete a cell\n- `z` to undo\n- `a`\/`b` to insert a cell above\/below","0b4499ac":"To submit this file, click \"Save Version\" and chose \"Save and Run All\". This will rerun the entire notebook and save the output. \n\nOnce done, click the back arrow on the top left (this will close the notebook though) or navigate to the notebook in another tab. After clicking on the notebook scroll down until you see the Outputs, select the right file and click submit.","a8275883":"Let's chose a and b and seen how well this fits the data.","10edab29":"The rest works exactly the same.","4a4708ff":"## Random Forest","feb0b929":"# Your turn\n\nNow comes the most important part in learning ML: doing ML!\n\nYour first task is to reproduce what I have done in this notebook. So open up a new, empty notebook and go through the basic steps\n\n1. Opening up the data\n2. Preprocess\/clean the data and create train\/valid\/test datasets (X\/y)\n3. Train a linear regression\n4. Submit your predictions to Kaggle\n\nTry to do as much as possible from memory and look at this notebook only when necessary (and if you do: no copy-paste!). It is also not necessary to do everything exactly the same way.\n\nWhen you are done with that, here are some tasks to explore:\n\n1. What is the MSE of the climatologt (mean over training dataset) for the validation dataset?\n2. Can you compute the climatology for each station and submit this as a prediction?\n3. Now let's try to get a better prediction: Why not try training a linear regression for each station separately?\n4. Or try using a better ML model. Try replacing LinearRegression with sklearn.ensemble.RandomForestRegressor. What do you find? (Be patient...)","93e1162c":"Here we can see that all columns are real numbers except `time` which is a time string and `station` which is an integer and represents the station ID. We can seehow many unique stations we have.","fa98ec67":"What are all these variables? --> https:\/\/journals.ametsoc.org\/view-large\/11181633\n\n`fc` indicates that these are NWP forecasts (specifically 2 day forecasts from the ECMWF ensemble). `mean` indicates that these values are the ensemble mean.","3fb9b8e7":"Let's now define a handy little function to print the R2 and MSE for the training and validation set.","13a8de8b":"We can now check what our line parameters `a` and `b` are.","604b7189":"The training and testing datasets have the same variables except for `t2m_obs`, our $y$, which is only available for the training dataset.\n\nWe also want to check what datatype each column has.","67b477e1":"### Clean the dataset\n\nLet's check for missing values.","04ad344d":"# Notebook 1 - Linear regression with scikit-learn\n\nHello, you are now in a Kaggle kernel. Kaggle kernels are basically the same as Jupyter notebooks but are running on Kaggle's servers.\n\nThere are two types of cells in notebooks:\n1. Code cells: Used for writing python code.\n2. Markdown cells: Used for text.\n\nCells can be executed (=run) by pressing the play button or, more conveniently by pressing `shift + Enter`.","2feefe17":"## Let the machine learn\n\nManually tweaking the parameters seems rather inefficient. Let's have an algorithm do this.\n\nBut wait! Before we do this, we need to do two things:\n\n1. Clean the dataset\n2. Split the data into training and validation set.","efcb7e47":"## The R2 score\n\nA common score to evaluate the skill of regression models is the R2 score: https:\/\/en.wikipedia.org\/wiki\/Coefficient_of_determination\n\nIt tell us (sort of) which fraction of the variance in the data is explained by our model. [Poll]","72bce8e0":"Let's plot the dependent variable `t2m_obs` against `t2m_fc_mean`, i.e. the ensemble mean forecast.","695ee4de":"This looks like a pretty straight line to me. So we could build a simple linear model by hand.\n\n$y = ax + b$","38ad054a":"So we improved a little bit compared to our simple model. Let's now actually submit this to Kaggle.","956b9e9c":"Can we quantitatively measure how good the fit is?\n\nLet's use the mean squared error\n\nMSE = $\\frac{1}{N} \\sum (y - y_{pred})^2$","fcb68b27":"## Climatology for each station","ae140263":"## Multiple linear regression\n\nSo far we have only used a single feature, but our dataset has many more. So let's use all of these in our linear model:\n\n$y = \\sum_i a_i X_i + b$\n\nFirst we need to prepare our datasets again. We will use all the columns except \n\n- `station`: This is a categorical variable where the value of the station id does not have any meaning. \n- `time`: Again, this is not a real valued variable, so we can't just throw it into our linear regression.","4af4fad9":"## MSE of climatology"}}