{"cell_type":{"60dd6839":"code","5906b0ff":"code","80491bc4":"code","e3574bdf":"code","244e03dc":"code","9a40ad8f":"code","b657d3fd":"code","5e1d7627":"code","2b620ddf":"code","f71916b9":"code","d6252995":"code","3c65d433":"code","75e5c931":"code","2a7d2cf5":"code","54cd2e78":"code","6b020c60":"code","63bfdee6":"code","b5aab930":"code","5b6e90cb":"code","410ec30b":"code","cca8e4d1":"code","9df8e106":"code","f857556f":"code","d9e0d6c7":"code","2a308fcb":"code","149c1b04":"code","c9d028e8":"code","21eb5376":"code","00af32aa":"code","c2e8e69d":"code","e547ceee":"code","60befb5e":"code","643103f1":"code","6e62c595":"code","3a8e03bd":"code","96b77b61":"code","7195b458":"code","bc3b0912":"code","5aa27bf0":"code","e6abb1cb":"code","35ba5bb0":"code","c6b3637f":"code","98bba21e":"code","27d3faba":"code","d18af29c":"code","d27e0a5d":"code","9a04f9fe":"code","f458a61d":"code","2de669c7":"code","aa65078d":"code","31c91e79":"code","2b49864a":"code","2c717a87":"code","74f75bf9":"code","f9fcc1f2":"code","74cea7c0":"code","22aa95e3":"code","ceda3cc5":"code","84903a43":"code","86abb146":"code","c340c4d9":"code","449524aa":"code","7743aecd":"code","c889e38f":"code","e156ad7e":"code","669f3ebb":"code","dd249cb5":"code","99761762":"code","2b75aabe":"code","2b80035e":"code","96954b05":"code","f89b2082":"code","2b80461c":"code","1acfb78d":"code","d73b3886":"code","bb85ea48":"code","b9adc710":"code","10c9d118":"code","31bb683e":"code","9290f8f9":"code","bbb56483":"code","c1834b67":"code","bcd5b06e":"code","63072409":"code","683886d7":"code","26df6643":"code","694abcfc":"code","04862555":"code","b7a0c5e1":"code","dc97db03":"code","a695db40":"code","d1303e04":"code","6534781c":"code","f107aa9c":"code","3f459cb5":"code","f58d869d":"code","663b2e0c":"code","a4e6edbc":"code","d426bcb2":"markdown","cc6bc71f":"markdown","e4a76849":"markdown","3e9188ef":"markdown","d6497e17":"markdown","948c89c6":"markdown","69534dca":"markdown","73b7f46f":"markdown","2b1d3930":"markdown","cf5a1415":"markdown","498a27c3":"markdown","832cbb59":"markdown","33151a25":"markdown","bc62fb3f":"markdown","1a4c03da":"markdown","fceffed0":"markdown","77538a40":"markdown","ed3da6ca":"markdown","761cf0be":"markdown","36518dc9":"markdown","68021892":"markdown","db081e58":"markdown","88def63c":"markdown","c2e87dd1":"markdown","ca6f3081":"markdown","8727e2de":"markdown","3d46c029":"markdown","2aea2942":"markdown","26a8495d":"markdown","63543bd4":"markdown","9d17d3d8":"markdown","5856d53b":"markdown","6be4fe6a":"markdown","f8639016":"markdown","68423f1c":"markdown"},"source":{"60dd6839":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom subprocess import check_output\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5906b0ff":"data=pd.read_csv('..\/input\/data.csv')","80491bc4":"data.info()","e3574bdf":"data.head()","244e03dc":"data.columns","9a40ad8f":"data.corr()","b657d3fd":"#correlation map\nf,ax=plt.subplots(figsize=(5,5))\nsns.heatmap(data.corr(),annot=True,linewidth=5,fmt='.2f',ax=ax)\nplt.show()","5e1d7627":"data.Position.plot(kind='line',color='g',label='Position',linewidth=5,alpha=1,grid=True,linestyle='-.')\ndata.Streams.plot(color='r',label='Streams',linewidth=0.5,alpha=1,grid=True,linestyle=':')\nplt.legend=('down right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","2b620ddf":"data.plot(kind='scatter',x='Position',y='Streams',alpha=1,color='r')\nplt.xlabel('Position')\nplt.ylabel('Streams')\nplt.title('Position')\nplt.show()","f71916b9":"data.Streams.plot(kind='hist',bins=40,figsize=(10,10))\nplt.show()","d6252995":"dic = {'statistics' :'f_test','math':'addition'}\nprint(dic.keys())\nprint(dic.values())","3c65d433":"dic['statistics']='t_test'\nprint(dic)\ndic['python']='artificial_intelligence'\nprint(dic)\ndel dic['math']\nprint(dic)\nprint('python' in dic)\ndic.clear()\nprint(dic)\n","75e5c931":"data=pd.read_csv('..\/input\/data.csv')","2a7d2cf5":"series=data['Streams']\nprint(type(series))\ndata_frame=data[['Streams']]\nprint(type(data_frame))","54cd2e78":"print(5==0)\nprint(5!=2)\nprint(4<4.0)\nprint(False or True)\nprint(False and True)","6b020c60":"x=data['Streams']>9022725\ndata[x]","63bfdee6":"data[np.logical_and(data['Streams']>9022725,data['Position']<3)]","b5aab930":"data[(data['Streams']>9022725) & (data['Position']<3)]","5b6e90cb":"i=0\nwhile i !=3:\n    print('i is:',i)\n    i+=1\nprint(i,' is equal to 3')\n    ","410ec30b":"lis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\nfor key,value in dic.items():\n    print(key,\" : \",value)\nprint('')\n\nfor index,value in data[['Streams']][0:1].iterrows():\n    print(index,\" : \",value)","cca8e4d1":"def tuple_ex():\n    t=(1,2,3)\n    return t\na,b,c=tuple_ex()\nprint(a,b,c)","9df8e106":"x=5\ndef f():\n    x=3\n    return x \nprint(x)\nprint(f())","f857556f":"z=3\ndef f():\n    t=z*3\n    return t \nprint(f())","d9e0d6c7":"import builtins\ndir(builtins)","2a308fcb":"def square():\n    def add():\n        a=2\n        b=2\n        c=a+b\n        return c\n    return add()**2\nprint(square())","149c1b04":"add=lambda x,y:x+y\nprint(add(3,4))\nmulti=lambda x,y,z:x*y*z\nprint(multi(3,4,5))","c9d028e8":"number=[3,9,4]\ny=map(lambda x:x**3,number)\nprint(list(y))","21eb5376":"name='messi'\nit=iter(name)\nprint(next(it))\nprint(*it)","00af32aa":"list1=[1,2,3,4]\nlist2=[9,8,6,0]\nz=zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","c2e8e69d":"un_zip=zip(*z_list)\nun_list1,un_list2=list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list1))","e547ceee":"num1=[1,2,3]\nnum2=[i+1 for i in num1]\nprint(num2)","60befb5e":"num1=[5,4,8]\nnum2=[i**2 if i==5 else i-7 if i<5 else i%2 for i in num1]\nprint(num2)","643103f1":"threshold=sum(data.Streams)\/len(data.Streams)\ndata['Streams_level']=['high'if i > threshold else 'low' for i in data.Streams]\ndata.loc[:20,['Streams_level','Streams']]","6e62c595":"data = pd.read_csv('..\/input\/data.csv')\ndata.head()  # head shows first 5 rows","3a8e03bd":"data.tail()","96b77b61":"data.shape","7195b458":"print(data['Artist'].value_counts(dropna=False))","bc3b0912":"data.describe()","5aa27bf0":"data.boxplot(column='Streams',by='Date')\nplt.show()","e6abb1cb":"data_new=data.head()\ndata_new","35ba5bb0":"melted=pd.melt(frame=data_new,id_vars='Artist',value_vars=['Track Name','Date'])\nmelted","c6b3637f":"melted.pivot(index='Artist',columns='variable',values='value')\n","98bba21e":"data1=data.head()\ndata2=data.tail()\nconc_data_row=pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","27d3faba":"data1=data['Track Name'].head()\ndata2=data['Streams'].head()\nconc_data_row=pd.concat([data1,data2],axis=1)\nconc_data_row","d18af29c":"data.dtypes","d27e0a5d":"data['Track Name']=data['Track Name'].astype('category')\ndata['Position']=data['Position'].astype('float')","9a04f9fe":"data.dtypes","f458a61d":"data.info()","2de669c7":"data['Streams'].value_counts(dropna=False)","aa65078d":"assert 1==1","31c91e79":"assert  data['Streams'].notnull().all()","2b49864a":"data[\"Streams\"].fillna('empty',inplace = True)","2c717a87":"team=['River Plate','Barcelona']\ncountry=['Argentina','Spain']\nlist_label=['team','country']\nlist_col=[team,country]\nzipped=list(zip(list_label,list_col))\ndata_dict=dict(zipped)\ndf=pd.DataFrame(data_dict)\ndf","74f75bf9":"df['establishment_year']=[1901,1899]\ndf","f9fcc1f2":"df['ranking']=1\ndf","74cea7c0":"data1=data.loc[:,['Position','Streams']]\ndata1.plot()","22aa95e3":"data1.plot(subplots=True)\nplt.show()","ceda3cc5":"data1.plot(kind='scatter',x='Streams',y='Position')\nplt.show()","84903a43":"data1.plot(kind='hist',y='Position',bins=50,range=(0,250),normed=True)","86abb146":"fig,axes=plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind='hist',y='Position',bins=50,range=(0,250),normed=True,ax=axes[0])\ndata.plot(kind='hist',y='Position',bins=50,range=(0,250),normed=True,ax=axes[1],cumulative=True)\nplt.savefig('grahp.png')\nplt","c340c4d9":"data.describe()","449524aa":"time_list=['1995-07-09','1996-01-11']\nprint(type(time_list[1]))\ndatetime_object=pd.to_datetime(time_list)\nprint(type(datetime_object))","7743aecd":"data2=data.head()\ndate_list=['1887-03-01','1887-04-02','1888-09-05','2012-05-10','2123-03-12']\ndatetime_object=pd.to_datetime(date_list)\ndata2['date']=datetime_object\ndata2=data2.set_index('date')\ndata2","c889e38f":"print(data2.loc['1887-03-01'])\nprint(data2.loc['1887-03-01':'1888-09-05'])","e156ad7e":"data2.resample('A').mean()","669f3ebb":"data2.resample('M').mean()","dd249cb5":"data2.resample('M').first().interpolate('linear')","99761762":"data2.resample('M').mean().interpolate('linear')","2b75aabe":"data=pd.read_csv('..\/input\/data.csv')\ndata.head()","2b80035e":"data['Date'][1]# indexing using square brackets","96954b05":"data.Date[1]# using column attribute and row label","f89b2082":"data.loc[1,[\"Date\"]]# using loc accessor","2b80461c":"data[['Streams','Track Name']]","1acfb78d":"print(type(data['Track Name']))\nprint(type([data['Track Name']]))","d73b3886":"data.loc[1:10,'Streams':'Date']","bb85ea48":"data.loc[1:10,'URL':]","b9adc710":"data.loc[10:1:-1,'URL':'Region']#reverse","10c9d118":"boolean=data.Streams>8022725\ndata[boolean]","31bb683e":"first_filter = data.Streams > 8022725\nsecond_filter = data.Date > '2017-03-10'\ndata[first_filter & second_filter]","9290f8f9":"data.Artist[data.Streams>8049063]","bbb56483":"def module(n): #Plain\n    return n%3\ndata.Streams.apply(module)","c1834b67":"module=lambda x:x%3 #lambda function\ndata.Streams.apply(module)","bcd5b06e":"threshold=sum(data.Streams)\/len(data.Streams)\ndata[\"Streams_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Streams]\ndata.head()","63072409":"print(data.index.name)\ndata.index.name='index_name'\ndata.head()","683886d7":"data = pd.read_csv('..\/input\/data.csv')\ndata.head()","26df6643":"data1=data.set_index(['Track Name','Artist'])\ndata1.head()","694abcfc":"dic = {\"team\":[\"A\",\"B\",\"C\",\"D\"],\"country\":[\"US\",\"CA\",\"CZ\",\"GB\"],\"ranking\":[5,10,1,2]}\ndf = pd.DataFrame(dic)\ndf","04862555":"df.pivot(index=\"team\",columns = \"country\",values=\"ranking\")","b7a0c5e1":"df1 = df.set_index([\"team\",\"country\"])\ndf1\n# lets unstack it","dc97db03":"df1.unstack(level=0)","a695db40":"df1.unstack(level=1)","d1303e04":"df2 = df1.swaplevel(0,1)\ndf2","6534781c":"df","f107aa9c":"melted=pd.melt(df,id_vars='team',value_vars=['country','ranking'])\nmelted","3f459cb5":"df","f58d869d":"df.groupby('team').mean()","663b2e0c":"df.groupby(\"team\").ranking.max() ","a4e6edbc":"df.info()","d426bcb2":"CONCATENATING DATA","cc6bc71f":"ANONYMOUS FUNCT\u0130ON\n\nmap(func,seq) : applies a function to all the items in a list\n","e4a76849":"\nVISUAL EXPLORATORY DATA ANALYSIS","3e9188ef":"MANIPULATING DATA FRAMES WITH PANDAS","d6497e17":"\nINDEXING PANDAS TIME SERIES\n\ndatetime = object\n\nparse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","948c89c6":"LIST COMPREHENS\u0130ON\n","69534dca":"zip(): zip lists","73b7f46f":"HIERARCHICAL INDEXING","2b1d3930":"RESAMPLING PANDAS TIME SERIES","cf5a1415":"PIVOTING DATA","498a27c3":"LAMBDA FUNCTION\n","832cbb59":"\nMELTING DATA FRAMES","33151a25":"CATEGORICALS AND GROUPBY","bc62fb3f":"\nFILTERING DATA FRAMES","1a4c03da":"VISUAL EXPLORATORY DATA ANALYSIS\n1. Plot \n\n2.Subplot\n\n3.Histogram:\n* .   bins: number of bins\n*    range(tuble): min and max values of bins\n*    normed(boolean): normalize or not\n*   cumulative(boolean): compute cumulative distribution","fceffed0":"EXPLORATORY DATA ANALYSIS\n\nLets say value at 75% is Q3 and value at 25% is Q1.\n\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR \n\nWe will use describe() method. Describe method includes:\n\ncount: number of entries\n\nmean: average of entries\n\nstd: standart deviation\n\nmin: minimum entry\n\n25%: first quantile\n\n50%: median or second quantile\n\n75%: third quantile\n\nmax: maximum entr","77538a40":"\nUSER DEFINED FUNCTION","ed3da6ca":"\nTRANSFORMING DATA\n\nPlain python functions\n\nLambda function: to apply arbitrary python function to every element\n\nDefining column using other columns","761cf0be":"ITERATORS","36518dc9":"TIDY DATA","68021892":"STATISTICAL EXPLORATORY DATA ANALYSIS\n\n\n\ncount: number of entries\n\nmean: average of entries\n\nstd: standart deviation\n\nmin: minimum entry\n\n25%: first quantile\n\n50%: median or second quantile\n\n75%: third quantile\n\nmax: maximum entry","db081e58":"CLEANING DATA\n\n\nDIAGNOSE DATA for CLEANING\n","88def63c":"\n1. INTRODUCTION TO PYTHON\n\nLine plot is better when x axis is time\n.\nScatter is better when there is correlation between two variables\n\nHistogram is better when we need to see distribution of numerical data.\n\nCustomization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle","c2e87dd1":"STACKING and UNSTACKING DATAFRAME","ca6f3081":"MISSING DATA and TESTING WITH ASSERT","8727e2de":"SCOPE","3d46c029":"PANDAS FOUNDATION\n\nsingle column = series\nNaN = not a number\ndataframe.values = numpy","2aea2942":"INDEX OBJECTS AND LABELED DATA","26a8495d":"\nNESTED FUNCTION\n\nfunction inside function.","63543bd4":"WHILE and FOR LOOPS","9d17d3d8":"PANDS","5856d53b":"DICTIONARY","6be4fe6a":"\nSLICING DATA FRAME","f8639016":"\nDATA TYPES","68423f1c":"PIVOTING DATA FRAMES"}}