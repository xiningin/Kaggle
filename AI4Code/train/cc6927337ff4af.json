{"cell_type":{"73ef135d":"code","a6c1b31d":"code","46cf912b":"code","9c93525a":"code","50f1b24c":"code","e77ccbac":"code","2b1e682c":"code","dc12d63c":"code","3a1b36c5":"code","80a36585":"code","c03e2859":"markdown","4d5c8a77":"markdown","fb8bcc91":"markdown","5b29b0ad":"markdown","8bd61f45":"markdown","8a9e66ca":"markdown","5b3d62b2":"markdown"},"source":{"73ef135d":"!pip install -U -t \/kaggle\/working\/ git+https:\/\/github.com\/Kaggle\/learntools.git\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.deep_learning.ex_tpu import *\nstep_1.check()","a6c1b31d":"## let's load the data from the utility script\nfrom petal_helper import *\n\nimport tensorflow as tf","46cf912b":"# Lets learn the distribution startegy for the TPU's. \n# Each TPU has 8 cores (each core is like a GPU in itself)\n# We need to tell tensorflow on how to make use of this TPU by a distribution strategy\n\n# Detect TPU, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() \n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() \n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n    \n","9c93525a":"## Loading the data from the competition\n\n# when using TPUs datasets are often serialized into TFRecords.\n# This is a convenient format to feed to e ach of the TPU cores\n# petal_helper utility script will load the TFRecords and create a data pipeline \n# to use with our model \n\n\nds_train = get_training_dataset()\nds_valid = get_validation_dataset()\nds_test = get_test_dataset()\n\nprint(\"Training : \", ds_train)\nprint(\"Validation : \", ds_valid)\nprint(\"Testing : \", ds_test)\n\nprint(\"type : \", type(ds_test))\n# These are tf.data.Dataset objects. You can think about the dataset in Tensorflow as a stream of data records\n","50f1b24c":"# We'll use Transfer learning where we use an already built pre-trained model\n# and we can retrain a part of the models neural network to get a head-start on our new dataset\n\n# The distribution strategy we created earlier contains a context manager, strategy.scope. \n# This context manager tells TensorFlow how to divide the work of training among the eight TPU cores. \n# When using TensorFlow with a TPU, it's important to define your model in a strategy.scope() context.\n\n\nwith strategy.scope():\n    pretrained_model = tf.keras.applications.VGG16(\n    weights = \"imagenet\",\n    input_shape = [*IMAGE_SIZE, 3],\n    include_top = False)\n    \n    \n    pretrained_model.trainable = False\n    \n    model = tf.keras.Sequential([\n    pretrained_model,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dense(len(CLASSES), activation='softmax')])\n    \n    model.compile(\n    optimizer = 'adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['sparse_categorical_accuracy'])\n    \n\nmodel.summary()\n","e77ccbac":"# Define the batch size. This will be 16 with TPU off and 128 (=16*8) with TPU on\nBATCH_SIZE = 16*strategy.num_replicas_in_sync\n\n# Defining the epochs\nEPOCHS = 10\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\n\nhistory = model.fit(\n    ds_train,\n    validation_data = ds_valid,\n    epochs = EPOCHS,\n    steps_per_epoch = STEPS_PER_EPOCH\n    \n)","2b1e682c":"display_training_curves(\n    history.history['loss'],\n    history.history['val_loss'],\n    'loss',\n    211,\n)\ndisplay_training_curves(\n    history.history['sparse_categorical_accuracy'],\n    history.history['val_sparse_categorical_accuracy'],\n    'accuracy',\n    212,\n)","dc12d63c":"test_ds = get_test_dataset(ordered=True)\n\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)","3a1b36c5":"## Let us generate submission.csv file.\n\nprint(\"generating submission.csv file \")\n\n\n# Get image ids from test set and convert to unicode\ntest_ids_ds =  test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U')\n\n\n# Write submission.csv file\nnp.savetxt(\n    'submission.csv',\n    np.rec.fromarrays([test_ids, predictions]),\n    fmt=['%s', '%d'],\n    delimiter=',',\n    header='id,label',\n    comments='',\n)","80a36585":"# Look at the first few predictions\n!head submission.csv\n","c03e2859":"### Loading helper functions","4d5c8a77":"### Training the model ","fb8bcc91":"### Loading the dataset ","5b29b0ad":"### Predictions","8bd61f45":"### This notebook is taken as a reference from [here](https:\/\/www.kaggle.com\/ryanholbrook\/create-your-first-submission)","8a9e66ca":"### Defining the model","5b3d62b2":"### Distribution strategy"}}