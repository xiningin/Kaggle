{"cell_type":{"a17a7e85":"code","26ea703f":"code","3b84cab4":"code","a99b03f4":"code","c2b194a1":"code","a54647b1":"code","62312419":"markdown","ede94d2d":"markdown","4b173ced":"markdown"},"source":{"a17a7e85":"import os\nfrom os import listdir, makedirs\nfrom os.path import join, exists, expanduser\n\nfrom keras import applications\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, MaxPooling2D, BatchNormalization, Conv2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nimport matplotlib.pyplot as plt","26ea703f":"train_data_dir = '..\/input\/fruits-360_dataset\/fruits-360\/Training'\ntest_data_dir = '..\/input\/fruits-360_dataset\/fruits-360\/Test'\ntrain_samples = 59328\ntest_samples = 20232\nimg_height = 100\nimg_width = 100\nbatch_size = 40","3b84cab4":"train_datagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.25)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(train_data_dir,\n                                                    target_size=(img_height, img_width),\n                                                    batch_size=batch_size,\n                                                    class_mode='categorical',\n                                                    subset='training')\n\nval_generator = train_datagen.flow_from_directory(train_data_dir,\n                                                  target_size=(img_height, img_width),\n                                                  batch_size=batch_size,\n                                                  class_mode='categorical',\n                                                  subset='validation')\n\ntest_generator = test_datagen.flow_from_directory(test_data_dir,\n                                                  target_size=(img_height, img_width),\n                                                  batch_size=batch_size,\n                                                  class_mode='categorical')","a99b03f4":"model = Sequential()\nmodel.add(BatchNormalization(input_shape=(100, 100, 3)))\nmodel.add(Conv2D(10, (4, 4), padding='same', activation='relu'))\nmodel.add(Conv2D(10, (4, 4), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(5, (4, 4), padding='same', activation='relu'))\nmodel.add(Conv2D(5, (4, 4), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(5, (4, 4), padding='same', activation='relu'))\nmodel.add(Conv2D(5, (4, 4), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(5, 5)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(118, activation='softmax'))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n\nhistory = model.fit_generator(train_generator,\n                              steps_per_epoch=2000,\n                              epochs=10,\n                              validation_data=val_generator,\n                              validation_steps=100)","c2b194a1":"x = model.evaluate_generator(generator=test_generator,\n                             steps=100)\nx","a54647b1":"plt.plot(history.history['acc'], \n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.plot(history.history['val_acc'],\n         label='\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435')\nplt.xlabel('\u042d\u043f\u043e\u0445\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f')\nplt.ylabel('\u0414\u043e\u043b\u044f \u0432\u0435\u0440\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432')\nplt.legend()\nplt.show()","62312419":"\u0414\u0430\u0442\u0430\u0441\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0444\u0440\u0443\u043a\u0442\u043e\u0432 \u0438 \u043e\u0432\u043e\u0449\u0435\u0439, \u043f\u043e\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 118 \u043a\u043b\u0430\u0441\u0441\u043e\u0432","ede94d2d":"\u0412\u044b\u0432\u043e\u0434\u044b \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n\n* ImageDataGenerator - \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438\n* \u0422\u043e\u0447\u043d\u043e\u0439 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 89%, \u0430 \u043d\u0430 validation \u043d\u0430\u0431\u043e\u0440\u0435 - 93%\n* \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u0431\u044b\u043b\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b-\u0432\u043e \u044d\u043f\u043e\u0445, \u0431\u0430\u0442\u0447-\u0441\u0430\u0439\u0437 ","4b173ced":"\u0414\u043e\u043c\u0430\u0448\u043a\u0430 \u043f\u043e 3 \u0437\u0430\u043d\u044f\u0442\u0438\u044e"}}