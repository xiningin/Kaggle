{"cell_type":{"aad574fb":"code","d9724d34":"code","6750a31d":"code","39c13d4f":"code","005e1c75":"code","41bb2091":"code","f173ccc0":"code","c774e027":"code","dbcd3bc5":"code","b71f140e":"code","bf345546":"code","086917b6":"code","8c204d55":"code","26dce014":"code","761994ae":"code","480aaed3":"code","8c42b1e8":"code","5b8f868f":"code","dd8e7ca1":"code","0e10afd6":"code","1d44ef4f":"code","a2f491ba":"code","bfa4cfe2":"code","b496b90e":"code","d160cc07":"code","4a7edbc1":"code","e36c2069":"code","01eed503":"code","7caa1a68":"code","f7bdaafb":"code","16643399":"code","8ef1e4d0":"code","4b7fdd09":"code","009a2650":"code","4f66a1b1":"code","fcea69eb":"code","bd7103fa":"code","fa9896c3":"code","1693dcf8":"code","d53f3bd6":"code","c807d603":"code","a3bdfcdb":"code","252b9226":"code","2315c4f1":"code","a1e6770d":"markdown","a87aab78":"markdown","2262469e":"markdown","2e07a706":"markdown","c4a7e28d":"markdown","b1b41eee":"markdown"},"source":{"aad574fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9724d34":"import pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport warnings\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing\nwarnings.filterwarnings(\"ignore\")\ndf = pd.read_csv('..\/input\/active-ratio-prediction-of-covid-data\/covid.csv', error_bad_lines=False, engine ='python')","6750a31d":"df.shape","39c13d4f":"df.duplicated().sum()\n\n","005e1c75":"df.head()","41bb2091":"df.skew()","f173ccc0":"df.corr()","c774e027":"# Global Declaraion of EDA functions\nglobal Head\nglobal Size\nglobal Column_names\nglobal Describe\nglobal Shape\nglobal Count\nglobal Value_count\nglobal ISNULL\nglobal Tail\nglobal Ndim\nglobal Nunique\nglobal Memory_usage\nglobal Duplicated\nglobal ISNA\nglobal DTYPES\nglobal CORR\nglobal Info\nglobal operations\n        \n\n        \n","dbcd3bc5":"def Column_names():\n    print('\\033[1m'+'Column Names in the Data set'+'\\033[0m')\n    c=df.columns\n    print(c,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nColumn_names()","b71f140e":"def Describe():\n    print('\\033[1m'+\"The Description of our dataset is:\"+'\\033[0m')\n    des=df.describe()\n    return(des)\n    print(\"--------------------------------------------------------------------------\")\nDescribe()","bf345546":"def Size():\n    print('\\033[1m'+\"The size of dataset is :\"+'\\033[0m')\n    siz=df.size\n    print(siz,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nSize()","086917b6":"def Count():\n    print('\\033[1m'+\"The count of non null values are:\"+'\\033[0m')\n    co=df.count()\n    print(co,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nCount()","8c204d55":"def ISNULL():\n    print('\\033[1m'+\"Detection of missing values\"+'\\033[0m')\n    co2=df.isnull().sum()\n    print(co2,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nISNULL()","26dce014":"def Ndim():\n    print('\\033[1m'+\"The dimensions of data set are:\"+'\\033[0m')\n    co4=df.ndim\n    print(co4,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nNdim()","761994ae":"def Nunique():\n    print('\\033[1m'+\"Total number of unique values are:\"+'\\033[0m')\n    co5=df.nunique()\n    print(co5,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nNunique()","480aaed3":"def Memory_usage():\n    print('\\033[1m'+\"The total memory used is :\"+'\\033[0m')\n    co6=df.memory_usage()\n    print(co6,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nMemory_usage()","8c42b1e8":"def Duplicated():\n    print('\\033[1m'+\"Total number of duplicate rows\"+'\\033[0m')\n    co7=df.duplicated().count()\n    return(co7)\n    print(\"--------------------------------------------------------------------------\")\nDuplicated()","5b8f868f":"def DTYPES():\n    print('\\033[1m'+\"The datatypes are :\"+'\\033[0m')\n    co9=df.dtypes\n    print(co9,'\\n')\n    print(\"--------------------------------------------------------------------------\")\nDTYPES()","dd8e7ca1":"def Info():\n    print('\\033[1m'+\"The info of data set is :\"+'\\033[0m')\n    co11=df.info()\n    print(\"--------------------------------------------------------------------------\")\nInfo()","0e10afd6":"def operations(df,x):\n    if df[x].dtype==\"float64\":\n        print('\\033[1m'+'', x, 'rows'+'\\033[0m')\n        print('\\033[1m'+\"It is a quantitaive data \\n\"+'\\033[0m')\n        print(\"The mean is :\\n\",df[x].mean())\n        print(\"The median is :\\n\",df[x].median())\n        print(\"The Standard Deviation is \\n\",df[x].std())\n        q1=df[x].quantile(0.25)\n        q2=df[x].quantile(0.5)\n        q3=df[x].quantile(0.75)\n        IQR=q3-q1\n        LLP=q1-1.5*IQR\n        ULP=q3+1.5*IQR\n        print(\"The quartiles are q1 : \\n\",q1)\n        print(\"The quartiles are q2 : \\n\",q2)\n        print(\"The quartiles are q3 :\\n \",q3)\n        print(\"The Uppler limit point of the data is \\n\",ULP)\n        print(\"The lower limit point of the data is \\n \",LLP)\n        if df[x].min()>LLP and df[x].max()<ULP:\n            print(\"The outliers are not present \\n\")\n            print(\"--------------------------------------------------------------------------\")\n\n        else:\n\n            print(\"The outliers are present \\n\")\n            print(\"The outliers are :\")\n            print(df[df[x].values>ULP][x])\n            print(df[df[x].values<LLP][x])\n\n            print(\"--------------------------------------------------------------------------\")\n\n\n    elif df[x].dtype==\"int64\":\n        print('\\033[1m'+'', x, 'rows'+'\\033[0m')\n        print('\\033[1m'+\"It is a quantitaive data \\n\"+'\\033[0m')\n        print(\"The mean is : \\n\",df[x].mean())\n        print(\"The median is : \\n\",df[x].median())\n        print(\"The Standard Deviation is \\n\",df[x].std())\n        q1=df[x].quantile(0.25)\n        q2=df[x].quantile(0.5)\n        q3=df[x].quantile(0.75)\n        IQR=q3-q1\n        LLP=q1-1.5*IQR\n        ULP=q3+1.5*IQR\n        print(\"The quartiles are q1 : \\n\",q1)\n        print(\"The quartiles are q2 : \\n\",q2)\n        print(\"The quartiles are q3 : \\n\",q3)\n        print(\"The Uppler limit point of the data is \\n\",ULP)\n        print(\"The lower limit point of the data is \\n\",LLP)\n        if df[x].min()>LLP and df[x].max()<ULP:\n            print(\"The outliers are not present \\n\")\n\n            print(\"--------------------------------------------------------------------------\")\n\n        else:\n\n            print(\"The outliers are present \\n\")\n            print(\"The outliers are :\")\n            print(df[df[x].values>ULP][x])\n            print(df[df[x].values<LLP][x])\n            print(\"--------------------------------------------------------------------------\")\n\n\n\n\n\n\n\n    else:\n\n        print('\\033[1m'+\"The data is Qualitative \\n\"+'\\033[0m')\n\n\n        if df[x].nunique()==1:\n            print('\\033[1m'+\"The data is singular \\n\"+'\\033[0m')\n            print(\"The mode is :\",df[x].mode())\n            print(\"The count of mode is \\n\",df[x].value_counts())\n        elif df[x].nunique()==2:\n            print('\\033[1m'+\"The data is Binary \\n\"+'\\033[0m')\n            print(\"The mode is :\",df[x].mode())\n            print(\"The count of mode is \\n\",df[x].value_counts())\n        elif df[x].nunique()>2:\n            print('\\033[1m'+\"The data is Multi \\n\"+'\\033[0m')\n            print(\"The mode is :\",df[x].mode())\n            print(\"The count of mode is \\n\",df[x].value_counts())\n\n        print(\"--------------------------------------------------------------------------\")\n\nc=df.columns\nfor i in c:\n    operations(df,i)\n    print(\"\\n\")\n\n\n","1d44ef4f":"def Summary():\n        print('\\033[1m'+\"The Summary of data is  \\n\"+'\\033[0m')\n        print(\"The shape of the datset is :\",df.shape)\n        print(\"The sixe o the data set is :\",df.size)\n        print(\"The dimensions of the dataset are:\",df.ndim)\n        print(\"The memory usage of the data set are\",df.memory_usage())\n        print(\"The data types of the dataset are:\",df.dtypes)\n        print(\"--------------------------------------------------------------------------\")\n\nSummary()     ","a2f491ba":" def Column_Summary():\n        print('\\033[1m'+\"The Column wise Summary of data is  \\n\"+'\\033[0m')\n        k=df.columns\n        for i in k:\n            print('\\033[1m'+'', i, 'rows'+'\\033[0m')\n            print(\"The Shape of the column \",i,\"is \",df[i].shape)\n            print(\"The Size of the column \",i,\"is \",df[i].size)\n            print(\"The Dimensions of the column \",i,\"is \",df[i].ndim)\n            print(\"The Memory used by the column \",i,\"is \",df[i].memory_usage())\n            print(\"The Data types  of the column \",i,\"is \",df[i].dtypes)\n            print(\"--------------------------------------------------------------------------\")\nColumn_Summary()","bfa4cfe2":"df.columns","b496b90e":"#taking only numerical columns in list x for plotting distribution plot\nm=df.drop('State\/UTs',axis=1)","d160cc07":"m.columns","4a7edbc1":"for i in m.columns:\n    sns.distplot(df[i],kde=True)\n    plt.show()","e36c2069":"\nsns.histplot(data=m)\nplt.show()","01eed503":"print(m.columns)\nfor i in m.columns:\n    sns.boxplot(data=m,x=i)\n    plt.show()","7caa1a68":"plt.figure(figsize=(10,16))\nax = sns.heatmap(df.corr(),annot = True, cmap = 'viridis')\nplt.show()","f7bdaafb":"for i in m.columns:\n    x= df['State\/UTs']\n    y= df[i]\n    \n    data = go.Bar(x= x,y= y)\n    layout = go.Layout(title = 'Simple Bar Chart')\n    fig = go.Figure(data=data,layout=layout)\n    fig.show()","16643399":"m=m.drop('Active Ratio (%)',axis=1)","8ef1e4d0":"for i in m.columns:\n    sns.scatterplot(x=df['Active Ratio (%)'],y=df[i])\n    plt.show()","4b7fdd09":"sns.pairplot(df)","009a2650":"df1 = df\ndf1 = pd.get_dummies(df1,prefix = 'State\/UTs' ,columns=['State\/UTs'],drop_first=False)\ndf1.insert(loc=2, column='State\/UTs', value=df['State\/UTs'].values)\n","4f66a1b1":"\n\ndf1","fcea69eb":"df1=df1.drop('State\/UTs',axis=1)","bd7103fa":"feature=df1\nfeature=feature.drop('Active Ratio (%)',axis=1)\n","fa9896c3":"feature.head()","1693dcf8":"label=df['Active Ratio (%)']","d53f3bd6":"X_train,X_test,y_train,y_test=train_test_split(feature,label,test_size=.3)","c807d603":"print(X_train.shape,y_train.shape)","a3bdfcdb":"print(X_test.shape,y_test.shape)","252b9226":"lr=LinearRegression()\nlr.fit(X_train,y_train)","2315c4f1":"lr.score(X_test,y_test)","a1e6770d":"# Relation Plots","a87aab78":"# Data Visualization","2262469e":"## Encoding","2e07a706":"# Data Preproccessing","c4a7e28d":"# Exploratory Data Analysis","b1b41eee":"* Maharashtra has more total cases than any other state\n* Kerala has more active cases than any other state\n* Maharashtra has more discharged people than any other state\n* Mahahrashtra has more deaths than any other states\n* Mizoram has more active ratio than any other states\n* Dadra Nagar and Haveli and Daman and Diu has more    Discharge ratio\n* Punjab has more Death Ratio than any other State\n"}}