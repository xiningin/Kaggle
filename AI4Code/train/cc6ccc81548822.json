{"cell_type":{"ec80226f":"code","88291c5a":"code","8461bef7":"code","6763a867":"code","39f87b41":"code","ff52f131":"code","4fce916b":"code","0197836d":"code","55f1a796":"code","3348ea5c":"code","cae3441f":"code","fa0b25cc":"code","639e3afd":"code","23294a91":"code","063f97fe":"markdown","084fd84e":"markdown","7130a993":"markdown","07222889":"markdown","73772ab8":"markdown","dfc51792":"markdown","19c86a56":"markdown","99b04185":"markdown","d24ef8b0":"markdown","f3671097":"markdown"},"source":{"ec80226f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler","88291c5a":"df = pd.read_csv('..\/input\/parkinsons-data-set\/parkinsons.data')\ndf.head()","8461bef7":"X = df.drop(columns = ['status', 'name'], axis = 1)\ny = df.status","6763a867":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2, random_state = 99, stratify=y)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","39f87b41":"y_train.value_counts()","ff52f131":"sc = StandardScaler()\nsc.fit(X_train)","4fce916b":"X_train = sc.transform(X_train)\nX_valid = sc.transform(X_valid)","0197836d":"kernel = ['linear', 'rbf', 'poly', 'sigmoid']\n\nfor i in kernel:\n    print('*'*20)\n    model = svm.SVC(kernel = i, C = 1.0)\n    model.fit(X_train, y_train)\n    \n#     print(f\"Score on Training Set   with Kernel {i} : {model.score(X_train, y_train)}\")\n#     print(f\"Score on Validation Set with Kernel {i} : {model.score(X_valid, y_valid)}\")\n#     print('\\n')\n    \n    pred_train = model.predict(X_train)\n    pred_valid = model.predict(X_valid)\n\n    print(f\"Accuracy Score on Training   Set with Kernel {i} : {metrics.accuracy_score(y_train, pred_train)}\")\n    print(f\"Accuracy Score on Validation Set with Kernel {i} : {metrics.accuracy_score(y_valid, pred_valid)}\")\n    print('\\n')","55f1a796":"for i in range(1,10):\n    print('*'*20)\n    model = svm.SVC(kernel = 'poly', C = 100, degree = i)\n    model.fit(X_train, y_train)\n    \n#     print(f\"Score on Training Set   with Kernel {i} : {model.score(X_train, y_train)}\")\n#     print(f\"Score on Validation Set with Kernel {i} : {model.score(X_valid, y_valid)}\")\n#     print('\\n')\n    \n    pred_train = model.predict(X_train)\n    pred_valid = model.predict(X_valid)\n\n    print(f\"Accuracy Score on Training   Set with Degree {i} : {metrics.accuracy_score(y_train, pred_train)}\")\n    print(f\"Accuracy Score on Validation Set with Degree {i} : {metrics.accuracy_score(y_valid, pred_valid)}\")\n    print('\\n')","3348ea5c":"reg_param = [0.1, 1, 100, 1000]\nfor i in reg_param:\n    print('*'*20)\n    model = svm.SVC(kernel = 'rbf', C = i)\n    model.fit(X_train, y_train)\n    \n#     print(f\"Score on Training Set   with Kernel {i} : {model.score(X_train, y_train)}\")\n#     print(f\"Score on Validation Set with Kernel {i} : {model.score(X_valid, y_valid)}\")\n#     print('\\n')\n    \n    pred_train = model.predict(X_train)\n    pred_valid = model.predict(X_valid)\n\n    print(f\"Accuracy Score on Training   Set with C as {i} : {metrics.accuracy_score(y_train, pred_train)}\")\n    print(f\"Accuracy Score on Validation Set with C as {i} : {metrics.accuracy_score(y_valid, pred_valid)}\")\n    print('\\n')","cae3441f":"from sklearn.model_selection import GridSearchCV","fa0b25cc":"param_grid = {\n    'C' : [0.1, 1, 100, 1000],\n    'kernel' : ['linear', 'rbf', 'poly', 'sigmoid'],\n    'degree' : [1,2,3,4,5,6]\n}","639e3afd":"grid = GridSearchCV(\n    svm.SVC(),\n    param_grid\n)\n\ngrid.fit(X_train, y_train)","23294a91":"print(grid.best_params_)\nprint(grid.score(X_valid, y_valid))","063f97fe":"## Tuning based on Kernel","084fd84e":"This notebook is my continuation of \"https:\/\/www.kaggle.com\/dskagglemt\/ml-in-healthcare\"\n\nHere I am going to tune the parameter for SVM Algorithm.","7130a993":"Lets use `GridSearchCV`, which will do the same loop, without much hussle.","07222889":"## Difference between score and accuracy_score in sklearn\nhttps:\/\/stackoverflow.com\/questions\/40726899\/difference-between-score-and-accuracy-score-in-sklearn\n\nAlso model.score is internally using sklearn.metrics.accuracy_score\nhttps:\/\/github.com\/scikit-learn\/scikit-learn\/blob\/2beed5584\/sklearn\/base.py#L475","73772ab8":"Sees with C `0.1` and `1` we did get good accuracy and with these two Regularization Parameter there is no overfitting or underfitting.","dfc51792":"Sees with kernel `rbf` and `sigmoid` we did get good accuracy and with these two kernel there is no overfitting or underfitting.","19c86a56":"# Model Building","99b04185":"## Tuning based on Degree\nDegree of the polynomial kernel function (\u2018poly\u2019). Ignored by all other kernels.","d24ef8b0":"## Tuning based on Regularization parameter (C)","f3671097":"With degree, Overfitting still exists."}}