{"cell_type":{"fd2887d3":"code","cf27c3e1":"code","040ea6a6":"code","a20b1ef6":"code","b91fd156":"code","447eeb77":"code","4aeea6c9":"code","630863b9":"code","f578a8da":"code","7f7cf972":"code","a51e31dc":"code","3f6fdf40":"code","abba4723":"code","5c8a6b83":"code","1b0f2e3d":"code","1c622eec":"code","cbed8289":"code","874c0631":"code","38ba3d12":"code","fa8b9efe":"code","16d0dd69":"code","1a14e9e6":"code","e1066261":"code","2acb4a7d":"code","4524bbd1":"code","8b4867fb":"code","b52dc7f2":"code","eb8bf4bb":"code","726422b3":"code","0a966cd7":"markdown","ea113cae":"markdown","338a24a4":"markdown","703e909b":"markdown","287d22b4":"markdown","cad0cb96":"markdown","8f790c50":"markdown","115bbe95":"markdown","6f47cef2":"markdown","8e777510":"markdown","baeddd12":"markdown","46d3a7fc":"markdown"},"source":{"fd2887d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf27c3e1":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","040ea6a6":"train_df.columns\n","a20b1ef6":"train_df.head()","b91fd156":"train_df.describe()","447eeb77":"train_df.info()","4aeea6c9":"def bar_plot(veriable):\n    \"\"\"\n    input: veriable exp: 'Sex'\n    output: bar plot and value count\n    \"\"\"\n    #get feature\n    var = train_df[veriable]\n    #count number of categorical variable(valuse\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    #plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(veriable)\n    plt.show()\n    print(\"{}: \/n {}\".format(veriable,varValue))\n    ","630863b9":"category1 = [\"Survived\",\"Pclass\",\"Sex\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor i in category1:\n    bar_plot(i)","f578a8da":"category2= [\"Cabin\",\"Name\",\"Ticket\"]\nfor i in category2:\n    print(\"{}: \/n\".format(train_df[i].value_counts()))\n","7f7cf972":"def plot_hist(veriable):\n    plt.hist(train_df[veriable],bins=50)\n    plt.xlabel(veriable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(veriable))\n    plt.show()\n    \n    ","a51e31dc":"numericVer = [\"Age\",\"Fare\",\"PassengerId\"]\nfor i in numericVer:\n    plot_hist(i)","3f6fdf40":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index= False).mean().sort_values(by=\"Survived\",ascending=False)\n","abba4723":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index= False).mean().sort_values(by=\"Survived\",ascending=False)\n","5c8a6b83":"# Sex vs Pclass\ntrain_df[[\"Sex\",\"Pclass\"]].groupby([\"Sex\"], as_index= False).mean().sort_values(by=\"Pclass\",ascending=False)\n","1b0f2e3d":"#\u00a0SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index= False).mean().sort_values(by=\"Survived\",ascending=False)\n","1c622eec":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index= False).mean().sort_values(by=\"Survived\",ascending=False)\n","cbed8289":"def detect_outliers(df,features):\n    outliers_indices=[]\n    \n    for i in features:\n        # 1st quartile\n        Q1 = np.percentile(df[i],25)\n        # 3st quartile\n        Q3 = np.percentile(df[i],75)\n        #\u00a0IQR\n        IQR = (Q3-Q1)\n        # outliers steps\n        outliers_steps = 1.5 * IQR\n        #\u00a0detect outlier and their indeces\n        outliers_list_col = df[ (df[i] < Q1 - outliers_steps) | (df[i] > Q3 + outliers_steps) ].index\n        # store indeces\n        outliers_indices.extend(outliers_list_col)\n        \n    outliers_indices = Counter(outliers_indices)\n    multiple_outliers = list(i for i, v in outliers_indices.items() if v>2 )\n    \n    return multiple_outliers","874c0631":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","38ba3d12":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop=True)","fa8b9efe":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop = True)\n","16d0dd69":"train_df.head()","1a14e9e6":"train_df.columns[train_df.isnull().any()]","e1066261":"train_df.isnull().sum()","2acb4a7d":"train_df[train_df[\"Embarked\"].isnull()]","4524bbd1":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","8b4867fb":"train_df[\"Embarked\"]= train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","b52dc7f2":"train_df[train_df[\"Fare\"].isnull()]","eb8bf4bb":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","726422b3":"train_df[train_df[\"Fare\"].isnull()]","0a966cd7":"# <a id=10><\/a><br>\n## Fill Missing Value\n\n* Embarked has 2 missing value\n* Fare has only 1","ea113cae":"<a id=7><\/a><br>\n# Outliers Detection","338a24a4":"<a id = 1>\n# 1.Load and Check Data","703e909b":"<a id = 3><\/a><br>\n# Univariate Variable Analysis\n\n* Categorical Variable: Survived, Pclass, Sex, Embarked, Cabin, Name, Ticket, Sibsp and Prach\n* Numerical Variable: Age, Fare and PassengerId","287d22b4":"<a id=8><\/a><br>\n\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","cad0cb96":"# INTRODUCTION\n\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the titanic sank after colliding with and iceberg, killing 1502 out of 2024 passergens and crew.\n\n<font color = 'Blue'>\nContent\n\n1. [Load and Check Data](#1)\n2. [Veriable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outliers Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","8f790c50":"<a id = 5><\/a><br>\n## Numerical Variable","115bbe95":"<a id = 4><\/a><br>\n## Categorical Variable","6f47cef2":"<a id = 6><\/a><br>\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Sursived\n","8e777510":"* float64(2): Fare and Age\n* int64(5): PassengerId, Survived, Pclass, SibSp and Parch\n* object(5): Name, Sex, Ticket, Cabin and Embarked","baeddd12":"<a id = 2><\/a><br>\n# Veriable Description\n1. PassengerId: unique id number to each passenger\n2. Survived: passenger survive(1) or died(0)\n3. Pclass: passenger class\n4. Name: name\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch: number of parent\/children\n9. Ticket: ticket number\n10. Fare: amount of monet spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked( C= Cherbourg, Q=Queenstown, S=Southampton)","46d3a7fc":"<a id=9><\/a><br>\n\n## Find Missing Value"}}