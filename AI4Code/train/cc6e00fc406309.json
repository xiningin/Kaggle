{"cell_type":{"ca0281aa":"code","304962bd":"code","d0171a82":"code","dbf7925d":"code","26171a98":"code","49a32d84":"code","0183fe10":"code","8e78cc9e":"code","15a7213c":"code","b37265f8":"code","0bedf201":"code","068af69f":"code","b8f9464f":"code","e6e4c814":"code","3882cea7":"code","ffc961d7":"code","d4aeba53":"code","0451d9b3":"code","d2a6ba4a":"code","117dd72f":"code","ebbddd1f":"code","66d26b7c":"code","f43f78da":"code","814ad846":"code","eb73656c":"code","77d44e99":"code","4c00f7cc":"code","2099b01f":"code","1d6cbe1a":"markdown","5a56055d":"markdown","e78ef929":"markdown","9d362a41":"markdown","6c9cb609":"markdown","d1a36d23":"markdown","b6acc089":"markdown","e8bc0a2d":"markdown","a824e46c":"markdown"},"source":{"ca0281aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","304962bd":"data = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","d0171a82":"data.head()","dbf7925d":"data.columns","26171a98":"data.shape","49a32d84":"data[data.isnull().any(axis = 1)]","0183fe10":"clean_data = data.copy()\nclean_data['Quality_label'] =(data['quality'] > 6) * 1 ","8e78cc9e":"clean_data.head()","15a7213c":"y = clean_data[['Quality_label']].copy()\ny.head()","b37265f8":"clean_data.columns","0bedf201":"del clean_data['quality']","068af69f":"clean_data.columns","b8f9464f":"features =  ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',\n       'pH', 'sulphates', 'alcohol']","e6e4c814":"x = clean_data[features].copy()","3882cea7":"x.columns","ffc961d7":"x.head()","d4aeba53":"y.columns","0451d9b3":"from sklearn.model_selection import train_test_split","d2a6ba4a":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=324)","117dd72f":"X_train.head()","ebbddd1f":"from sklearn.tree import DecisionTreeClassifier","66d26b7c":"Wine_Quality = DecisionTreeClassifier(max_leaf_nodes=10, random_state=0)\nWine_Quality.fit(X_train,y_train)","f43f78da":"type(Wine_Quality)","814ad846":"predictions = Wine_Quality.predict(X_test)","eb73656c":"predictions[:10]","77d44e99":"y_test['Quality_label'][:10]","4c00f7cc":"from sklearn.metrics import accuracy_score","2099b01f":"accuracy_score(y_true = y_test, y_pred = predictions)","1d6cbe1a":"Quality greater than 6 is good and quality less than 6 is bad\n1,2,3,4,5,6 - denoted by 0 which is bad\n7,8,9 - denoted by 1 which is good","5a56055d":"Extracting the features of wine","e78ef929":"checking the null values","9d362a41":"Accuracy of the predicition","6c9cb609":"**Applying Decision tree Classification**","d1a36d23":"Removing quality from clean_data","b6acc089":"applying train test split","e8bc0a2d":"\n**Upload file**","a824e46c":"**Saving Quality Label in y**"}}