{"cell_type":{"7be3ea09":"code","3ec2d4bb":"code","f46a46a8":"code","2c95aa8b":"code","d6ecf8b5":"code","302456a2":"code","461eff62":"code","4afa354d":"code","163a7142":"code","6b3dfd4f":"code","a384b8ca":"code","5f32bc18":"code","f95d9460":"code","ca9880b4":"code","2e4950bd":"code","9d004a92":"code","2d580952":"code","63f837de":"code","44e26318":"code","d0788da8":"code","ab18a8cd":"code","62c6b438":"code","93bfb0ae":"code","33a10c83":"code","29cbd9ec":"code","07ae48b0":"code","95965085":"code","32ba3b60":"code","e8d0a5c3":"code","f8158d0b":"code","3f822f29":"code","f2cf5f63":"code","e341ef94":"code","ee0e3f1f":"code","4f37e148":"code","d8b6068c":"code","7dcf1fa3":"code","c9c4b28b":"code","cac6c38b":"code","42800f6d":"code","0b2b811d":"code","490babb7":"code","b7cc7ddf":"code","81113b90":"code","b6deffda":"code","821510ad":"code","c7b042a8":"code","651f69a1":"code","0f5cd49e":"code","17822525":"code","ebc76a48":"code","9c9f2958":"code","1ef982f9":"code","7a3d989e":"code","21887463":"code","e4da743c":"code","fe1428da":"code","bbb107fa":"markdown","690f763e":"markdown","af6874ec":"markdown","a1b5cd4a":"markdown","4d52fa45":"markdown","4d1eaadd":"markdown","5b21a9d4":"markdown","dda5f6c2":"markdown","094d9d5b":"markdown","e125bd95":"markdown","71d68fd5":"markdown","7bed1635":"markdown","9a8a9798":"markdown","1efbdcc7":"markdown","d7183292":"markdown","422c9fbc":"markdown","9bcc1e05":"markdown","a92165dc":"markdown","d456ffca":"markdown","97b00bbd":"markdown","53494807":"markdown","8df636e3":"markdown","c28e54a9":"markdown","3af5ab93":"markdown","46161114":"markdown","62dd3fe7":"markdown","65143377":"markdown","7e4eb520":"markdown","e7785de6":"markdown","12f1ca96":"markdown","90aa2276":"markdown","1f72bc00":"markdown"},"source":{"7be3ea09":"import pandas as pd\ndf = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\")","3ec2d4bb":"df.head()","f46a46a8":"df.info()","2c95aa8b":"df.describe()","d6ecf8b5":"df[\"Global_Sales\"].sum()","302456a2":"df[df[\"Rank\"] <= 100][\"Global_Sales\"].mean()","461eff62":"df[df[\"Rank\"] >= 100][\"Global_Sales\"].mean()","4afa354d":"df[\"Genre\"].value_counts()","163a7142":"df[\"Platform\"].value_counts()","6b3dfd4f":"df[\"Publisher\"].nunique()","a384b8ca":"df[\"Publisher\"].unique()","5f32bc18":"def sort_platform_provider(platform):\n    if platform in [\"PSP\", \"PS2\", \"PS3\", \"PS\", \"PS4\", \"PSV\"]:\n        return \"Sony Playstation\"\n    elif platform in [\"DS\", \"Wii\", \"GBA\", \"3DS\", \"N64\",\"SNES\" \"WiiU\", \"NES\", \"GC\"]:\n        return \"Nintendo\"\n    elif platform in [\"XB\", \"XOne\", \"X360\"]:\n        return \"Microsoft XBOX\"\n    elif platform in [\"PC\"]:\n        return \"PC\"\n    else:\n        return \"Other\"","f95d9460":"df[\"Platform Provider\"] = df[\"Platform\"].map(lambda platform: sort_platform_provider(platform))","ca9880b4":"df.head()","2e4950bd":"def most_copies_sold_in(row):\n    col = row.idxmax()\n    if col == \"NA_Sales\":\n        return \"North America\"\n    elif col == \"EU_Sales\":\n        return \"Europe\"\n    elif col == \"JP_Sales\":\n        return \"Japan\"\n    else:\n        return \"Other\"","9d004a92":"df[\"Top Sales Region\"] = df[[\"NA_Sales\", \"EU_Sales\", \"JP_Sales\", \"Other_Sales\"]].apply(lambda row: most_copies_sold_in(row), axis=1)","2d580952":"df.head(20)","63f837de":"df[\"Platform Provider\"].value_counts()","44e26318":"df.groupby([\"Platform Provider\"])[\"Top Sales Region\"].value_counts()","d0788da8":"df.head()","ab18a8cd":"df[\"Top Sales Region\"].value_counts()","62c6b438":"df.groupby([\"Top Sales Region\"])[\"Top Sales Region\"]","93bfb0ae":"df.groupby([\"Top Sales Region\"])[\"Top Sales Region\"].count().sort_values(ascending=False)","33a10c83":"df.groupby([\"Genre\"])[\"Platform Provider\"].value_counts()","29cbd9ec":"df.groupby([\"Genre\"])[\"Platform Provider\"].value_counts()","07ae48b0":"df.groupby([\"Genre\"])","95965085":"df.groupby([\"Genre\"])[\"Global_Sales\"]","32ba3b60":"df.groupby([\"Genre\"])[\"Global_Sales\"].sum()","e8d0a5c3":"df.groupby([\"Genre\", \"Platform Provider\"])[\"Global_Sales\"].sum()","f8158d0b":"df.groupby([\"Year\", \"Platform Provider\", \"Genre\"])[\"Global_Sales\"].sum()","3f822f29":"best_seller =  df.drop([\"NA_Sales\", \"EU_Sales\", \"JP_Sales\", \"Other_Sales\"], axis=1)\nbest_seller = best_seller.groupby(['Year', 'Genre']).apply(lambda df: df.loc[df[\"Global_Sales\"].idxmax()].drop([\"Year\", \"Genre\"]))\nbest_seller.tail(30)","f2cf5f63":"? best_seller.sort_values","e341ef94":"best_seller.sort_values(\"Global_Sales\", ascending=False)","ee0e3f1f":"best_seller = best_seller.sort_values([\"Year\", \"Genre\", \"Global_Sales\"], ascending=[False, False, True])\nbest_seller.head(30)","4f37e148":"best_seller.head(20)","d8b6068c":"best_seller.index","7dcf1fa3":"best_seller.reset_index(inplace=True)","c9c4b28b":"best_seller.columns","cac6c38b":"best_seller_swedish_cols = [\"\u00c5r\", \"Kategori\", \"Ranking\", \"Namn\", \"Spelplattform\", \"Utgivare\", \"Global F\u00f6rs\u00e4ljning\", \"Spelplattformsleverant\u00f6r\", \"B\u00e4sta F\u00f6rs\u00e4ljningsregion\"]\nbest_seller.columns = best_seller_swedish_cols","42800f6d":"best_seller.head()","0b2b811d":"best_seller.head()","490babb7":"best_seller.head()","b7cc7ddf":"col_dict  ={\"Spelplattform\": \"Platform\", \n                            \"Utgivare\":\"Publisher\", \n                            \"Spelplattformsleverant\u00f6r\":\"Platform_Provider\", \n                            \"\u00c5r\": \"Year\", \n                            \"Kategori\": \"Genre\", \n                            \"Namn\": \"Name\", \n                            \"Global F\u00f6rs\u00e4ljning\": \"Global_Sales\", \n                            \"B\u00e4sta F\u00f6rs\u00e4ljningsregion\":\"Top_Sales_Region\"}","81113b90":"best_seller.rename(columns=col_dict, inplace=True)","b6deffda":"best_seller.rename(columns={\"Global_Sales\": \"Sales ($M)\"}, inplace=True)","821510ad":"best_seller.head(10)","c7b042a8":"best_seller_2019 = pd.DataFrame({\n    \"Genre\": [\"Battle Royale\", \"Adventure\", \"Sports\", \"Strategy\"],\n    \"Ranking\": [None, None, None, None],\n    \"Name\": [\"Fortnite\", \"Animal Crossing\", \"FIFA2020\", \"Tom Clancy's The Division 2\"],\n    \"Platform\": [\"PC\", \"WiiU\", \"PS4\", \"PS4\"],\n    \"Publisher\": [\"Epic Games\", \"Nintendo\", \"Electronic Arts\", \"Ubisoft\"],\n    \"Sales ($M)\": [\"58.54\", \"46.24\", \"51.32\", \"32.35\"],\n    \"Platform_Provider\": [\"PC\", \"Nintendon\", \"Sony Playstation\", \"Sony Playstation\"],\n    \"Top_Sales_Region\": [\"North America\", \"Japan\", \"Europe\", \"North America\"]\n    \n})","651f69a1":"best_seller_2019","0f5cd49e":"best_seller_2019[\"Year\"] = 2019","17822525":"best_seller = pd.concat([best_seller, best_seller_2019]).sort_values(\"Year\", ascending=False)","ebc76a48":"best_seller.head(10)","9c9f2958":"best_seller.Name","1ef982f9":"import numpy as np\navg_playtime_df = pd.DataFrame({\"Game_Name\": best_seller[\"Name\"].values,\n                               \"Average_Playtime (hours)\": np.around(np.random.exponential(scale=40, size=len(best_seller[\"Name\"])), 2)})","7a3d989e":"avg_playtime_df.head()","21887463":"? pd.merge","e4da743c":"best_seller = pd.merge(best_seller[[\"Name\", \"Sales ($M)\"]], avg_playtime_df, left_on=\"Name\", right_on=\"Game_Name\")","fe1428da":"best_seller.head()","bbb107fa":"<p style=\"text-align: left; font-size: 1.5rem; color: #38565c;\">\n    That's enough with insights - lets start manipulating the data!\n<\/p>","690f763e":"<p style=\"font-size: 1.25rem; color: #38565c;\">What do we need to do before we can concatenate this new data to our <code>best seller DataFrame<\/code>?<\/p>","af6874ec":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n    The <code>.unique()<\/code> and <code>.nunique()<\/code> functions gives me insights in the uniqueness of the data within the colum values\n<\/p>\n","a1b5cd4a":"<h1 style=\"font-size: 2rem; color: #38565c; font-weight: bold\">\n    Renaming and Combining\n<\/h1>\n\n<h2 style=\"font-size: 1.5rem; color: #38565c; font-weight: bold\">\n    Renaming\n<\/h2>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\nOftentimes data will come to us with column names, index names, or other naming conventions that we are not satisfied with. In that case, you'll learn how easy it is to rename the entries into some prefferable format<\/p>\n","4d52fa45":"<p style=\"font-size: 1.25rem; color: #38565c;\">We can also run the <code>.apply()<\/code> function on a groupby objecy.<\/p>\n<p style=\"font-size: 1.25rem; color: #38565c;\">This operation will return a DataFrame with the best seller for each year by genre<\/p>","4d1eaadd":"<h2 style=\"font-size: 1.5rem; color: #38565c; font-weight: bold\">\n    Combining\n<\/h2>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    When doing data analysis, it's quite common that information is separated accross multiple data sources. If we think of a general database, it's bad practice to copy data and to reserve space for null values, therefore the star-schema is popular in database design. For this reasion when performing operations on a dataset, we will sometimes need to combine different DataFrames and\/or Series in non-trivial ways. \n<\/p>    \n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">    \n    Pandas has three core methods for doing\n    this. In order of increasing complexity, these are <code>concat()<\/code>, <code>join()<\/code>, and <code>merge()<\/code>. Most of what <code>merge()<\/code> can do can also be done more simply with <code>join()<\/code>, with <code>.merge()<\/code> you have some more flexibilty. For example the possibility to join on column values.The <code>join()<\/code> function is preferrably used when the DataFrame share the same index.\n    The simplest combining method is <code>concat()<\/code>. Given a list of elements, this function will smush those elements together along an axis.\n<\/p>","5b21a9d4":"<h1 style=\"text-align: center; font-size: 2rem; color: #38565c; font-weight: bold\">\n    Welcome to the next part of your pandas training!\n<\/h1>\n\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    You will soon have all the tool that's requried to start working your data using Pandas!\n<\/p>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    Remeber that the community is very big. Hence if you ever end up in a situation where your problem can't be answered by you using the documentation, then in 99% of the situations, you'll find the answer on StackOverflow. \n<\/p>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n     The agenda for today:\n    <ul>\n        <li>Review of exercises<\/li> \n        <li>Grouping and Sorting<\/li> \n        <li>Data types and Missing data<\/li>\n        <li>Renaming and Combining data<\/li>\n    <\/ul>\n<\/p>\n\n","dda5f6c2":"<p style=\"font-size: 1.25rem; color: #38565c;\">\n    <code>groupby()<\/code> created a group of games which shared the same top sales region. Then, for each of these groups, we\n    grabbed the \"Top Sales Region\" column and counted how many times it appeared. value_counts() is just a shortcut to this groupby() operation.\n<\/p>\n\n<p style=\"font-size: 1.25rem; color: #38565c;\">To count the number of games per genre and platform provider, this would be the expression<\/p>\n","094d9d5b":"<p style=\"font-size: 1.25rem; color: #38565c;\">To apply a function to each value in a series you can use the <code>.map()<\/code> function<\/p>\n\n<p style=\"font-size: 1.25rem; color: #38565c;\">Let's see how we can use it on the <b>Platform<\/b> column<\/p>","e125bd95":"<p style=\"font-size: 1.25rem; color: #38565c;\">The output of the <code>.groupby()<\/code> function is a DataFrameGroupBy object and to display the results of the operation, we need to apply some aggregation function (just like we have to do in SQL)<\/p>","71d68fd5":"<p style=\"font-size: 1.25rem; color: #38565c;\">Do you notice any differences between the two methods?<\/p>\n<p style=\"font-size: 1.25rem; color: #38565c;\">When would it make sense to use the <code>.rename()<\/code> function?<\/p>","7bed1635":"<p style=\"font-size: 1.25rem; color: #38565c;\">Can we draw any new insights with these two newly created columns?<\/p>","9a8a9798":"<p style=\"font-size: 1.25rem; color: #38565c;\">As you can see, the grouping is lost. To preserve the grouping we need to add some parameters to our <code>.sort_values()<\/code> function<\/p>","1efbdcc7":"<h1 style=\"text-align: center; font-size: 2rem; color: #38565c; font-weight: bold\">\n    <a href=\"https:\/\/www.kaggle.com\/kernels\/fork\/595524\">Now its time for exercises!<\/a>\n<\/h1>","d7183292":"<p style=\"font-size: 1.25rem; color: #38565c;\">To merge the newly aquired information with our <code>best_seller<\/code> DataFram we use the <code>.merge()<\/code> function<\/p>","422c9fbc":"<p style=\"font-size: 1.25rem; color: #38565c;\">When we are using the <code>.groupby()<\/code> function, the colum values that we are using in the grouping becomes the index of the new DataFrame that's created. If we are grouping by more than one column value, we will get a DataFrame with multi-index. Dealing with mulit-label indices can be a little bit tricky. Therefore, it's common to reset the index to a single-label indices<\/p>","9bcc1e05":"<p style=\"font-size: 1.25rem; color: #38565c;\">Even more data has now been made available. Now we have recieved information on <code>Average_Playtime<\/code> for our games in the <code>best_seller<\/code> DataFrame<\/p>","a92165dc":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n    To learn more about the actual data, I then use the <code>.describe()<\/code> function.\n<\/p>\n\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    This function yields different summary statistics\n<\/p>\n<b style=\"color: #000\"> What conclusions can you draw from this output?<\/b>","d456ffca":"\n<h2 style=\"font-size: 1.5rem; color: #38565c; font-weight: bold\">\n    Sorting\n<\/h2>\n<p style=\"font-size: 1.25rem; color: #38565c;\">To re-arrange our dataframe and sort it according to the value we choose, we can use the <code>.sort_values()<\/code> function.<\/p>","97b00bbd":"<h1 style=\"font-size: 2rem; color: #38565c; font-weight: bold\">\n    Grouping and Sorting\n<\/h1>\n\n<h2 style=\"font-size: 1.5rem; color: #38565c; font-weight: bold\">\n    Grouping\n<\/h2>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    The group by function is applied to a DataFrame and involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups. It's similar to the SQL GROUP BY operation.\n        <ul>\n            <li style=\"font-size: 1rem; color: #38565c;\"><b>Splitting<\/b> the data into groups based on some criteria<\/li> \n        <li style=\"font-size: 1rem; color: #38565c;\"><b>Applying<\/b> a function to each group independently<\/li> \n        <li style=\"font-size: 1rem; color: #38565c;\"><b>Combining<\/b> the results into a data structure<\/li>\n    <\/ul>\n<\/p>\n\n<b style=\"color: #000\">Can you recall a function that we've been using recently that does this? <\/b>","53494807":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n   Import pandas and load data to a dataframe\n<\/p>","8df636e3":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n    The next action is to use the <code>.info()<\/code> function.\n<\/p>\n\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    Here we will learn many interesting things about the dataframe\n<\/p>\n<b style=\"color: #000\"> Do you see anything that might be of interest? <\/b>","c28e54a9":"<b style=\"color: #000\"> How would you interpret the below statements?<\/b>","3af5ab93":"<p style=\"font-size: 1.25rem; color: #38565c;\">We can extend the selection of colums to group by to narrow the scope of the aggregating function. Of course, we can also change the order of the columns for our analysis<\/p>","46161114":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n    With the <code>.value_counts()<\/code> function, we can learn how the data is distributed within and across the column values.\n<\/p>\n","62dd3fe7":"<hr style=\"border-top: 3px solid #bbb;\">","65143377":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n    I always start by looking at the data using the <code>.head()<\/code> function.\n<\/p>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    This is a nice way to learn about your data by displaying the column names and some of the values.\n<\/p>\n<b style=\"color: #000\"> What can you say about the data so far? <\/b>","7e4eb520":"<h1 style=\"text-align: center; font-size: 2rem; color: #38565c; font-weight: bold\">\n    Welcome to part 3 of your pandas training!\n<\/h1>\n\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    You have learned how to get a pandas dataframe in to your python environment by creating it, reading from file or from a database - Awesome!\n<\/p>\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    You have also learned how to select relevant data from DataFrame and Series objects, and then also manipulate the dataframe by assigning new values to it. Being able to select data and doing manipulations on the dataframe is critical knowledge if you want to start using python and pandas.\n<\/p>\n\n\n<p style=\"text-align: left; font-size: 1rem; color: #38565c;\">\n    Before you start to do any manipulations, you want to have a <b style=\"color: #000;\">better understanding of your data<\/b>. Because for the majority of situations, the data does not come in the format you want for your desired task. Therefore, we will now learn how to create a quick overview of your data and how you can apply specific logic for manipulating your dataframe.\n<\/p>\n","e7785de6":"<h1 style=\"text-align: center; font-size: 2rem; color: #38565c; font-weight: bold\">\n    <a href=\"https:\/\/www.kaggle.com\/kernels\/fork\/595524\">Exercises Review<\/a>\n<\/h1>","12f1ca96":"<p style=\"font-size: 1.25rem; color: #38565c;\">To apply a function to each column (or row) in a dataframe you can use the <code>.apply()<\/code> function<\/p>\n<p style=\"font-size: 1.25rem; color: #38565c;\">Lets say that we want to know where each game has sold most copies<\/p>","90aa2276":"<p style=\"font-size: 1.25rem; color: #38565c;\">We have received more data for video games in 2019 - the best selling game by genre<\/p>","1f72bc00":"<p style=\"text-align: left; font-size: 1.25rem; color: #38565c;\">\n    It's also possible to perform summary statistics on specific column using functions such as <code>.mean()<\/code>, <code>.sum()<\/code>, <code>.std()<\/code> to name a few.\n<\/p>\n\n<b style=\"color: #000\"> What column would be suitable to run the <code>.sum()<\/code> function on?<\/b>\n\n"}}