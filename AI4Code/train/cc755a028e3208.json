{"cell_type":{"b172992b":"code","1f83b742":"code","9fb73046":"code","881ea25e":"code","52b90e4b":"code","6ff4de10":"code","73db43ad":"code","89f4051c":"code","d89da1c1":"code","fc77f2cb":"code","6af0ff4d":"code","e4e23ae5":"code","710c9da5":"code","8f0802fc":"code","3dba106b":"code","7b29d3c1":"code","25645f42":"code","e42de4e3":"code","6d2158e3":"code","b08de65b":"code","1960e84b":"code","525d1021":"code","07de91d7":"code","f5ea1cbf":"code","e101fc6d":"code","f32c30fd":"code","dd790ac4":"code","c3c5cf55":"code","2e0d0a72":"code","4bac6950":"code","b4b9cc63":"markdown","3aaa6c83":"markdown","1125579a":"markdown","bd99cd8b":"markdown","dadcb066":"markdown","80ec0942":"markdown","e5a05e70":"markdown","160f78ac":"markdown","c5720c2b":"markdown","fd234337":"markdown","23485596":"markdown","1bda0e69":"markdown","85455863":"markdown","9d3e1ad8":"markdown","00cdff52":"markdown","1f4abe0a":"markdown","05e0f25b":"markdown","6084b334":"markdown"},"source":{"b172992b":"import numpy as np \n# Pandas is a good library for managing datasets\nimport pandas as pd \n\n# Matplotlib allows for additional customization\n# %matplotlib inline to display our plots inside your notebook.\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\n# Seaborn for plotting and styling\nimport seaborn as sns","1f83b742":"combats = pd.read_csv(\"..\/input\/pokemon\/combats.csv\")\npokemon = pd.read_csv(\"..\/input\/pokemon\/pokemon.csv\")\ntests = pd.read_csv(\"..\/input\/pokemon\/tests.csv\")\n","9fb73046":"# head function displays the first five rows. \npokemon.head()","881ea25e":"pokemon.columns","52b90e4b":"sns.lmplot(x=\"Attack\", y=\"Defense\", data=pokemon);\n \n# An Alternative way\n#sns.lmplot(x=df.Male_Pct, y=df.Female_Pct)","6ff4de10":"# Adding a bit more style and a legendary filter\nsns.set_style('whitegrid')\nsns.lmplot(\n    x=\"Attack\",\n    y=\"Defense\",\n    data=pokemon,\n    fit_reg=False,\n    hue='Legendary',\n    palette=\"Set1\")","73db43ad":"sns.set_style('darkgrid')  #changes the background of the plot\nplt.figure(figsize=(14, 6))\nsns.regplot(\n    x=\"Attack\", y=\"Defense\", data=pokemon,\n    fit_reg=True)  #fit_Reg fits a regression line","89f4051c":"# We can make faceted plots where we can segment plots based on another categorical variable: Generation in this case\n\nplt.figure(figsize=(20, 6))\nsns.set_style('whitegrid')\nsns.lmplot(\n    x=\"Attack\",\n    y=\"Defense\",\n    data=pokemon,\n    fit_reg=False,\n    hue='Legendary',\n    col=\"Generation\",\n    aspect=0.4,\n    height=10)","d89da1c1":"# We can also see plot a continous variable against a categorical column. \n# Below we're trying to see relationship between Speed and Legendary status\n\nplt.figure(figsize=(14, 6))\nsns.set_style('whitegrid')\nsns.regplot(x=\"Legendary\", y=\"Speed\", data=pokemon)","fc77f2cb":"# One issue with this plot is we cannot see the distribution at each value of speed as the points are overlapping. \n# This can be fixed by an option called jitter\n\nplt.figure(figsize=(14, 6))\nsns.set_style(\"ticks\")\nsns.regplot(x=\"Legendary\", y=\"Speed\", data=pokemon, x_jitter=0.3)","6af0ff4d":"plt.figure(figsize=(14, 6))\nsns.set_style(\"ticks\")\nsns.regplot(x=\"Attack\", y=\"Legendary\", data=pokemon, logistic=True)","e4e23ae5":"plt.figure(figsize=(12, 6))\nax = sns.distplot(\n    pokemon['Defense'], kde=True,\n    norm_hist=False)  #norm_hist normalizes the count\nax.set_title('Defense')\nplt.show()","710c9da5":"plt.figure(figsize=(12, 6))\nsns.jointplot(x='Attack', y='Defense', data=pokemon)","8f0802fc":"plt.figure(figsize=(12, 6))\nsns.jointplot(x='HP', y='Speed', data=pokemon, kind='kde')","3dba106b":"# Kind = hex is interesting\nplt.figure(figsize=(12, 6))\nsns.jointplot(x='HP', y='Speed', data=pokemon, kind='hex')","7b29d3c1":"sns.pairplot(\n    pokemon,\n    hue='Legendary',\n    vars=['Speed', 'HP', 'Attack', 'Defense', 'Generation'],\n    diag_kind='kde')","25645f42":"plt.figure(figsize=(20, 6))\nax = sns.countplot(x=\"Type 1\", data=pokemon, color='green')","e42de4e3":"plt.figure(figsize=(20, 6))\nsns.countplot(\n    x=\"Type 1\", data=pokemon, hue='Legendary',color='green',\n    dodge=False)  #dodge = False option is used to make stacked plots","6d2158e3":"sns.set_style('darkgrid')\nplt.figure(figsize=(20, 6))\nsns.barplot(x=\"Type 1\", y='Speed', data=pokemon, color='green')","b08de65b":"sns.set_style('darkgrid')\nplt.figure(figsize=(20, 6))\nsns.barplot(x=\"Type 1\", y='Speed', data=pokemon, hue='Legendary')","1960e84b":"plt.figure(figsize=(20, 6))\nsns.pointplot(x=\"Generation\", y='Speed', data=pokemon, hue='Legendary')","525d1021":"plt.figure(figsize=(12, 6))\nsns.stripplot(x=\"Generation\", y=\"Speed\", data=pokemon)","07de91d7":"plt.figure(figsize=(12, 6))\nsns.stripplot(x=\"Generation\", y=\"Speed\", data=pokemon, jitter=0.4)","f5ea1cbf":"sns.set_style('ticks')\nplt.figure(figsize=(12, 6))\nsns.swarmplot(x=\"Generation\", y=\"Speed\", data=pokemon, hue='Legendary')","e101fc6d":"sns.boxplot(data=pokemon)","f32c30fd":"# Pre-format\nstats_pokemon = pokemon.drop(['Generation', 'Legendary'], axis=1)\nsns.boxplot(data=stats_pokemon)","dd790ac4":"# Set theme\nsns.set_style('whitegrid')\n \n# Violin plot\nplt.figure(figsize=(15, 6))\nsns.violinplot(x='Type 1', y='Attack', data=pokemon)","c3c5cf55":"grid1 = sns.FacetGrid(data=pokemon, col='Generation', col_wrap=3)\n\ngrid1.map(plt.hist, \"Speed\")","2e0d0a72":"# Something a little more complex\ngrid2 = sns.FacetGrid(data=pokemon, col='Generation', col_wrap=3, hue=\"Legendary\")\n\ngrid2.map(sns.regplot, \"Speed\", \"HP\", fit_reg=False).add_legend()","4bac6950":"grid3 = sns.FacetGrid(\n    data=pokemon, col='Generation', row='Legendary', margin_titles=True)\n\ngrid3.map(sns.regplot, \"Speed\", \"HP\", fit_reg=False)","b4b9cc63":"Pairplots\n\nTo see relationships between all pairwise combination of variables, we can use pairplot","3aaa6c83":"Point Plot","1125579a":"Separating rows via filter","bd99cd8b":"Swarm Plot\n\nSwarmplot goes one step further by displaying all the points with no overlap at all","dadcb066":"**Step 1: Import libraries**\n\nFirst we import the libraries we'll need for our future datasets and visualization.","80ec0942":"Remember that we can use jitter to expand the scatter points","e5a05e70":"Facet Grids\n\nFacet grids allow us to display more than one graph in a plot.","160f78ac":"**Step 3: Run some Seaborn plots**\n\nI wanted to try references Seaborn more because of all its plotting possibilities. I'll run some here and keep adding as I see more.","c5720c2b":"Bar plots\n\nIn the first plot, the value is average Speed by Type of the pokemon and the black line indicates the confidence interval","fd234337":"Joint plots\n\nI love joint plots. They aren't always the best for actual data visualization but it is fun to mess around and they have the ability to visualize information in interesting ways.","23485596":"Striplot","1bda0e69":"Seaborn References and Tutorial\n\nThe purpose of this notebook is to keep a running list of examples of Seaborn for use in the future. Feel free to take anything for your own use.","85455863":"kde = True option tries to estimate the density based on gaussian kernel","9d3e1ad8":"Lets clean that up a bit","00cdff52":"Box Plots","1f4abe0a":"**Step 2: Import datasets**\n\nI've imported a simple Pokemon dataset to run tests on.","05e0f25b":"Count Plots","6084b334":"Fitting a logistic relationship"}}