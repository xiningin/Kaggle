{"cell_type":{"2a65c786":"code","4b8e67dc":"code","ba199c32":"code","75df8441":"code","f271cff5":"code","e1490653":"code","f191dd68":"code","4a014857":"code","a7cb8923":"code","88a2a01c":"code","825f5a53":"code","14510ac5":"code","22c30cfe":"code","d4539997":"code","eb5bccdb":"code","35ad7fb2":"code","e923cd68":"code","b2931ac0":"code","4198d993":"code","333bf52c":"code","8daaeeb1":"code","83d4b8e0":"code","7031ed9a":"code","b7581290":"code","90ae6456":"code","91ddf742":"code","a2613dbb":"code","ee82db2c":"code","25e39450":"code","cb155beb":"markdown","3a316f17":"markdown","c38360a8":"markdown","26ad210e":"markdown","f8148cc6":"markdown","6c428b42":"markdown","75e3529e":"markdown","67f7d2d0":"markdown","528f3321":"markdown","7b687e4f":"markdown","d5d73e79":"markdown","08d54001":"markdown","4c52fefb":"markdown"},"source":{"2a65c786":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b8e67dc":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","ba199c32":"train.head()","75df8441":"train.isnull().sum()","f271cff5":"train.describe()","e1490653":"train.info()","f191dd68":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","4a014857":"# Features - Sex\n# \uc131\ubcc4\uacfc \uc0dd\uc874\uc758 \uc5f0\uad00\uc131\nsns.set_style(\"whitegrid\")\nsns.set_context(\"poster\", font_scale = 0.7, rc={\"grid.linewidth\": 0.5})\nfeature = 'Sex'\nsurvived = train[train['Survived'] == 1][feature].value_counts()\ndead = train[train['Survived'] == 0][feature].value_counts()\ndf = pd.DataFrame([survived, dead])\ndf.index = ['Survived', 'Dead']\ndf.plot(kind='bar', stacked=True, figsize=(10,7))","a7cb8923":"# Features - Pclass\n# \ud2f0\ucf13\ud074\ub798\uc2a4\uacfc \uc0dd\uc874\uc758 \uc5f0\uad00\uc131\n# 1=1st, 2=2nd, 3=3rd\nsns.set_style(\"whitegrid\")\nsns.set_context(\"poster\", font_scale = 0.7, rc={\"grid.linewidth\": 0.5})\nfeature = 'Pclass'\nsurvived = train[train['Survived'] == 1][feature].value_counts()\ndead = train[train['Survived'] == 0][feature].value_counts()\ndf = pd.DataFrame([survived, dead])\ndf.index = ['Survived', 'Dead']\ndf.plot(kind='bar', stacked=True, figsize=(10,7))","88a2a01c":"# Features - parch\n# \ub3d9\uc2b9\ud55c \ubd80\ubaa8\/\uc790\ub140\uc758 \uc218\uc640 \uc0dd\uc874\uc758 \uc5f0\uad00\uc131\nsns.set_style(\"whitegrid\")\nsns.set_context(\"poster\", font_scale = 0.7, rc={\"grid.linewidth\": 0.5})\nfeature = 'Parch'\nsurvived = train[train['Survived'] == 1][feature].value_counts()\ndead = train[train['Survived'] == 0][feature].value_counts()\ndf = pd.DataFrame([survived, dead])\ndf.index = ['Survived', 'Dead']\ndf.plot(kind='bar', stacked=True, figsize=(10,7))","825f5a53":"# Features - sibsp\n# \ub3d9\uc2b9\ud55c \ud615\uc7ac\/\uc790\ub9e4\/\ubc30\uc6b0\uc790\uc758 \uc218\uc640 \uc0dd\uc874\uc758 \uc5f0\uad00\uc131\nsns.set_style(\"whitegrid\")\nsns.set_context(\"poster\", font_scale = 0.7, rc={\"grid.linewidth\": 0.5})\nfeature = 'SibSp'\nsurvived = train[train['Survived'] == 1][feature].value_counts()\ndead = train[train['Survived'] == 0][feature].value_counts()\ndf = pd.DataFrame([survived, dead])\ndf.index = ['Survived', 'Dead']\ndf.plot(kind='bar', stacked=True, figsize=(10,7))","14510ac5":"# Features - Age\n# \uc5f0\ub839\ub300\ubcc4 \uc0dd\uc874,\uc0ac\ub9dd \nsns.set_style(\"whitegrid\")\nsns.set_context(\"poster\", font_scale = 0.7, rc={\"grid.linewidth\": 0.5})\nfig, ax = plt.subplots(1, 1, figsize=(15, 6))\nsns.kdeplot(train[train['Survived'] == 1]['Age'], shade=True, ax=ax)\nsns.kdeplot(train[train['Survived'] == 0]['Age'], shade=True, ax=ax)\nplt.xlim(0, train['Age'].max())\nplt.legend(['Survived', 'Dead'])\nplt.show()","22c30cfe":"# Add Title from Name\n# ex) Braund, Mr. Owen Harris -> Mr\ntrain['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain['Title'].value_counts()","d4539997":"# Title\n# Mr: 0, Mrs: 1, Miss: 2, Others: 3\ntitle_map = {'Mr': 0, 'Mrs': 1, 'Miss': 2, 'Master': 3, 'Dr': 3, 'Rev': 3,\n            'Col': 3, 'Mlle': 3, 'Major': 3, 'Sir': 3, 'Jonkheer': 3,\n            'Mme': 3, 'Countess': 3, 'Don': 3, 'Lady': 3, \n            'Ms' : 3, 'Capt': 3}\ntrain['Title'] = train['Title'].map(title_map)","eb5bccdb":"# fill NaN of Age\n# Age\uac00 \uc5c6\uc73c\uba74 Title\uc774 \uac19\uc740 \uc0ac\ub78c\ub4e4\uc758 \uc911\uc704\uac12\uc73c\ub85c \ucc44\uc6c0\ntrain['Age'].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","35ad7fb2":"# Age - convert numeric value to category\n# 0 ~ 15: 0 (child)\n# 16 ~ 25: 1 (youth)\n# 26 ~ 35: 2 (adult)\n# 36 ~ 60: 3 (mid-age)\n# 61 ~ : 4 (old-age)\ntrain.loc[train[\"Age\"] <= 15, \"AgeCategory\"] = 0\ntrain.loc[(train[\"Age\"] > 15) & (train[\"Age\"] <= 25), \"AgeCategory\"] = 1\ntrain.loc[(train[\"Age\"] > 25) & (train[\"Age\"] <= 35), \"AgeCategory\"] = 2\ntrain.loc[(train[\"Age\"] > 35) & (train[\"Age\"] <= 60), \"AgeCategory\"] = 3\ntrain.loc[(train[\"Age\"] > 60), \"AgeCategory\"] = 4","e923cd68":"# Sex\n# 0: male, 1: female\nsex_map = {'male': 0, 'female': 1}\ntrain['Sex'] = train['Sex'].map(sex_map)","b2931ac0":"# Drop unused column\ntrain = train.drop(['Name','Age','Ticket','Fare','Cabin','Embarked'], axis=1)\ntrain","4198d993":"# Get test data\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n# Add Title from Name\ntest['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n# Title\ntitle_map = {'Mr': 0, 'Mrs': 1, 'Miss': 2, 'Master': 3, 'Dr': 3, 'Rev': 3,\n            'Col': 3, 'Mlle': 3, 'Major': 3, 'Sir': 3, 'Jonkheer': 3,\n            'Mme': 3, 'Countess': 3, 'Don': 3, 'Lady': 3, 'Dona': 3,\n            'Ms' : 3, 'Capt': 3}\ntest['Title'] = test['Title'].map(title_map)\n# fill NaN of Age\ntest['Age'].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\n# Age - convert numeric value to category\ntest.loc[test[\"Age\"] <= 15, \"AgeCategory\"] = 0\ntest.loc[(test[\"Age\"] > 15) & (test[\"Age\"] <= 25), \"AgeCategory\"] = 1\ntest.loc[(test[\"Age\"] > 25) & (test[\"Age\"] <= 35), \"AgeCategory\"] = 2\ntest.loc[(test[\"Age\"] > 35) & (test[\"Age\"] <= 60), \"AgeCategory\"] = 3\ntest.loc[(test[\"Age\"] > 60), \"AgeCategory\"] = 4\n# Sex\nsex_map = {'male': 0, 'female': 1}\ntest['Sex'] = test['Sex'].map(sex_map)\n# Drop unused column\ntest = test.drop(['Name','Age','Ticket','Fare','Cabin','Embarked'], axis=1)","333bf52c":"train = train.drop(['PassengerId'], axis=1)\ntraining = train.drop(['Survived'], axis=1)\ntarget = train['Survived']\ntraining","8daaeeb1":"# Import \nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold, cross_val_score","83d4b8e0":"# KFold \uad50\ucc28\uac80\uc99d \nkfold = KFold(n_splits=20, shuffle=True)","7031ed9a":"# SVM\nmodel = SVC()\nscore = cross_val_score(model, training, target, cv=kfold, scoring='accuracy')\nprint(score.mean())","b7581290":"# Random Forest\nmodel = RandomForestClassifier(n_estimators=5)\nscore = cross_val_score(model, training, target, cv=kfold, scoring='accuracy')\nprint(score.mean())","90ae6456":"testing = test.drop(['PassengerId'], axis=1).copy()\ntesting","91ddf742":"# Model\nmodel = SVC()\nmodel.fit(training, target)","a2613dbb":"# Predict\nprediction = model.predict(testing)\nprediction","ee82db2c":"submission = pd.DataFrame({\n  'PassengerId': test['PassengerId'],\n  'Survived': prediction\n})\nsubmission","25e39450":"# Result file\nsubmission.to_csv('\/kaggle\/working\/submission.csv', index=False)","cb155beb":"## Modeling","3a316f17":"### Drop","c38360a8":"### Sex","26ad210e":"## Feature Engineering","f8148cc6":"### Making Result","6c428b42":"### Training","75e3529e":"### visualization","67f7d2d0":"### Exploration","528f3321":"### Feature Engineering for test data","7b687e4f":"## Collecting data","d5d73e79":"### Testing","08d54001":"### Add Title from Name","4c52fefb":"### Age"}}