{"cell_type":{"681ac376":"code","e02dfe72":"code","0fe68e91":"code","e38de2a4":"code","a6521ee0":"code","27dda4c0":"code","2f499af1":"code","f867e012":"code","8b6313d6":"code","b8fc2f00":"code","df04866d":"code","f708653a":"code","3384adfe":"code","efe94079":"code","bc29b184":"code","a55b819d":"markdown","03c89cf6":"markdown","bb8245db":"markdown"},"source":{"681ac376":"import numpy as np\nimport pandas as pd\n# from catboost import Pool, CatBoostRegressor\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor","e02dfe72":"# Load the training data\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)\n\n# Preview the data\ntrain.head()","0fe68e91":"#Target \ny = train['target']\nfeatures = train.drop(['target'],axis = 1)","e38de2a4":"y.head()","a6521ee0":"features.head()","27dda4c0":"#Choosing categorical columns\n# cat_col = [c for c in features.columns if 'cat' in c]\ncat_col = [c for c in features.columns if features[c].dtype =='object']\nprint(cat_col)\n#numerical columns\nnum_col = [c for c in features.columns if features[c].dtype in ['int64','float64']]\nprint(num_col)\n\n#cmbined categoricals and numericals\nall_col = cat_col + num_col\nX = features[all_col].copy()\nX_test = test[all_col].copy()","2f499af1":"# Define column transfermer for standardizing num_col and encoding cat_col\npreprocessor = ColumnTransformer(\n    [\n        ('num',StandardScaler(),num_col),\n        ('cat',OrdinalEncoder(),cat_col)\n    ])\n# num_trans = SimpleImputer(strategy = 'constant')\n# cat_trans = Pipeline(steps = [\n#     ('imputer',SimpleImputer(strategy = 'most_frequent')),\n#     ('onehot',OneHotEncoder(handle_unknown='ignore'))\n# ])\n# preprocessor = ColumnTransformer(transformers=[('num',num_trans, num_col),\n#                                              ('cat',cat_trans,cat_col)])","f867e012":"#Define Model\nmodel = XGBRegressor(n_estimators = 500,max_debth = 6, learning_rate = 0.05,n_jobs = 8,random_state = 10,colsample_bytree = 0.7,subsample = 0.7)\n# from sklearn.ensemble import RandomForestRegressor\n# model = RandomForestRegressor(n_estimators=500,random_state = 10)","8b6313d6":"#Define Pipeline\npipe = Pipeline(steps = [('preprocessor',preprocessor),('model',model)])","b8fc2f00":"# #Train test split\n# from sklearn.model_selection import train_test_split\n# from sklearn.metrics import mean_squared_error\nX_t,X_v,y_t,y_v = train_test_split(X,y, train_size = 0.8,test_size = 0.2 ,random_state =10)\npipe.fit(X_t,y_t)\n","df04866d":"predict_value = pipe.predict(X_v)\nprint(\"Mean Square Error:\", mean_squared_error(predict_value,y_v))","f708653a":"predict_test = pipe.predict(X_test)\npredict_test","3384adfe":"# submission.target = predict_test\n# X_test\n# X_t\n# ,X_v,y_t,y_v","efe94079":"output = pd.DataFrame({'id': X_test.index,\n                       'target': predict_test})\noutput.to_csv('submission.csv', index=False)","bc29b184":"output","a55b819d":"### Choose categorical features.","03c89cf6":"## The Data","bb8245db":"# CatBoost Regressor"}}