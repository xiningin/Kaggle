{"cell_type":{"7a76613a":"code","1a0b1cff":"code","14bd2adb":"code","f69d4933":"code","3bd8eee8":"code","f1f8ae6b":"code","bab5d8c3":"code","bd829063":"code","4d26e51c":"code","51134923":"code","ed0e6b69":"code","f272fea9":"code","09a5d21b":"code","41e56927":"code","fb9d9cfe":"code","90130b96":"code","021e460b":"code","0f9d8566":"code","0d96b658":"code","a89adfc8":"code","a55ad708":"code","f0c01251":"code","572fcbbc":"code","01e26340":"code","7f236b97":"code","829a9a84":"code","d36f7ab4":"code","1ea25394":"code","4ac05095":"code","f326dbd0":"code","b5fc7881":"code","67abd86b":"code","492d1877":"code","efa9faa1":"code","0110eea6":"code","7ce3e3c0":"code","da8dbc26":"code","30a0adcc":"code","47f1eae1":"code","9cf616ae":"code","4e940c4d":"code","4623ad63":"code","5c74a44e":"code","a9fa13ba":"code","84acb099":"code","face8da7":"code","6fc7ea98":"code","7ec63363":"code","f2c99234":"code","ac7df57d":"code","8c459a68":"code","03f6ba05":"code","27006a09":"code","0ea3ece0":"code","ca3af6dc":"code","3463e12a":"code","0ac656e0":"code","f94331c6":"code","136d335f":"code","56183316":"code","09a7157a":"code","2ca7411a":"code","3402a963":"code","33e65f9c":"code","283e6ad1":"code","1665ad61":"code","5f643856":"code","fe67d67b":"code","ce33680d":"code","93067214":"code","e7cd6047":"code","c6c0cbf7":"code","6c4f70cd":"code","0a7b133b":"code","35901d65":"code","5649bd85":"code","db7c7491":"code","bc59f27a":"code","4f3f3b59":"code","60a48604":"code","04fbef0f":"code","ba147713":"code","d746520e":"code","bef2d82d":"code","d798cb79":"code","7165570b":"code","db7a8b53":"code","f330183c":"code","64c0f27a":"code","6a28e35b":"code","847bf35f":"code","6659a9eb":"code","ec1cd3a4":"code","57539a79":"code","6da93f3e":"code","2ce5930d":"code","b2428355":"code","39343be7":"code","df0b9505":"code","c3db108c":"code","88193521":"code","b9f5302a":"code","71f6c487":"code","be0258bd":"code","072d1f15":"code","d20f9496":"code","b59abce3":"code","eb8244dc":"code","f1242069":"code","71365795":"code","232f860f":"code","3501a235":"code","603362e4":"code","04efb404":"code","1ccb933a":"code","238a2835":"code","e6534fa6":"code","52435e75":"code","b7d5fe95":"code","01017153":"code","02ee8102":"code","9e13d269":"code","a73049be":"code","1f6287f6":"code","5de65be6":"code","cf181c5c":"code","cb5775e4":"code","81caeb5b":"code","cf207dd7":"code","c9b15b76":"code","0704063a":"code","fda61d19":"code","08712aa3":"code","b41e0bf7":"code","b34e129f":"code","dd149f9a":"code","0e4c2cad":"code","9afba2f2":"markdown","433d245a":"markdown","6db2e115":"markdown","47ed428d":"markdown","a90f933b":"markdown","e8e616f7":"markdown","987f017e":"markdown","9e421343":"markdown","dd56d7f6":"markdown","04e15d1e":"markdown","4218c529":"markdown","a321527f":"markdown","f2f55d72":"markdown","a8f7da58":"markdown","3294ec6d":"markdown","ac551d32":"markdown","66ad8e80":"markdown","e2982c4c":"markdown","201b95c0":"markdown","f02e7d5a":"markdown","a9726a21":"markdown","beafcf07":"markdown","c87f1807":"markdown","f72efaf8":"markdown","e92c2ad4":"markdown","4f84bfbf":"markdown","0305364f":"markdown","a60a8cd0":"markdown","a80b23ac":"markdown","deb5b873":"markdown","bbe0a9a4":"markdown","93316c5a":"markdown","c06a7209":"markdown","8dc95324":"markdown","fc2a13c6":"markdown","13a2a632":"markdown","c55577fd":"markdown"},"source":{"7a76613a":"%matplotlib inline\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('ticks')\nsns.set_palette('bright')\nsns.set_context('notebook', font_scale=1.2)\n\npd.options.plotting.backend = \"plotly\" # Setting Plotly as Backend in case I later want to generate an interactive plot. Seaborn will be default for static plots.","1a0b1cff":"animation = pd.read_csv('..\/input\/letterboxd-movies\/Animation.csv')\nhorror = pd.read_csv('..\/input\/letterboxd-movies\/Horror.csv')\nscifi = pd.read_csv('..\/input\/letterboxd-movies\/SciFi.csv')\nthriller = pd.read_csv('..\/input\/letterboxd-movies\/Thriller.csv')\n","14bd2adb":"animation.info()","f69d4933":"animation.describe(include='all')","3bd8eee8":"horror.info()","f1f8ae6b":"horror.describe(include='all')","bab5d8c3":"scifi.info()","bd829063":"scifi.describe(include='all')","4d26e51c":"thriller.info()","51134923":"thriller.describe(include='all')","ed0e6b69":"animation.dropna(axis=0, inplace=True)\nhorror.dropna(axis=0, inplace=True)\nscifi.dropna(axis=0, inplace=True)\nthriller.dropna(axis=0, inplace=True)","f272fea9":"animation = animation[(50 <= animation.running_time) & (animation.running_time <= 240)]","09a5d21b":"animation.describe(include='all')","41e56927":"# Remove Over the Garden Wall and FLCL cause they are series.\n\nanimation.drop([25, 90], axis=0, inplace=True)","fb9d9cfe":"horror = horror[(50 <= horror.running_time) & (horror.running_time <= 240)]","90130b96":"horror.describe(include='all')","021e460b":"scifi = scifi[(50 <= scifi.running_time) & (scifi.running_time <= 240)]","0f9d8566":"scifi.describe(include='all')","0d96b658":"thriller = thriller[(50 <= thriller.running_time) & (thriller.running_time <= 240) & (thriller.year < 2021)]\n\n#Removing 2021 (to be released) from thriller","a89adfc8":"thriller.describe(include='all')","a55ad708":"animation['year'] = animation['year'].astype(int)\nhorror['year'] = horror['year'].astype(int)\nscifi['year'] = scifi['year'].astype(int)\nthriller['year'] = thriller['year'].astype(int)","f0c01251":"#Extracting descriptive statistics for each genre's avg_rating distribution\nanimation_rating_mean = round(animation['avg_rating'].mean(), 2)\nanimation_rating_std = round(animation['avg_rating'].std(), 2)\nanimation_rating_skp = round(animation['avg_rating'].skew(), 2)\n\nhorror_rating_mean = round(horror['avg_rating'].mean(), 2)\nhorror_rating_std = round(horror['avg_rating'].std(), 2)\nhorror_rating_skp = round(horror['avg_rating'].skew(), 2)\n\nscifi_rating_mean = round(scifi['avg_rating'].mean(), 2)\nscifi_rating_std = round(scifi['avg_rating'].std(), 2)\nscifi_rating_skp = round(scifi['avg_rating'].skew(), 2)\n\nthriller_rating_mean = round(thriller['avg_rating'].mean(), 2)\nthriller_rating_std = round(thriller['avg_rating'].std(), 2)\nthriller_rating_skp = round(thriller['avg_rating'].skew(), 2)","572fcbbc":"#total movies\nanimation_n_movies = len(animation)\nhorror_n_movies = len(horror)\nscifi_n_movies = len(scifi)\nthriller_n_movies = len(thriller)","01e26340":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10), squeeze=True)\nfig.suptitle('Average Rating Distributions per Genre', fontsize=25)\n\nsns.distplot(animation.avg_rating, ax=axes[0,0], norm_hist=True,\n             color='y', axlabel=False, label=f'Total of {animation_n_movies} Movies')\naxes[0,0].set_title(f'Animation (\u03bc = {animation_rating_mean}, \u03c3 = {animation_rating_std}, Skp = {animation_rating_skp})',\n                    fontsize=20)\naxes[0,0].legend(loc='upper left')\n\nsns.distplot(horror.avg_rating, ax=axes[0,1], norm_hist=True,\n             color='r', axlabel=False, label=f'Total of {horror_n_movies} Movies')\naxes[0,1].set_title(f'Horror (\u03bc = {horror_rating_mean}, \u03c3 = {horror_rating_std}, Skp = {horror_rating_skp})',\n                    fontsize=20)\naxes[0,1].legend(loc='upper left')\n\nsns.distplot(scifi.avg_rating, ax=axes[1,0], norm_hist=True,\n             color='g', axlabel=False, label=f'Total of {scifi_n_movies} Movies')\naxes[1,0].set_title(f'SciFi (\u03bc = {scifi_rating_mean}, \u03c3 = {scifi_rating_std}, Skp = {scifi_rating_skp})',\n                    fontsize=20)\naxes[1,0].legend(loc='upper left')\n\nsns.distplot(thriller.avg_rating, ax=axes[1,1], norm_hist=True,\n             color='k', axlabel=False, label=f'Total of {thriller_n_movies} Movies')\naxes[1,1].set_title(f'Thriller (\u03bc = {thriller_rating_mean}, \u03c3 = {thriller_rating_std}, Skp = {thriller_rating_skp})', fontsize=20)\naxes[1,1].legend(loc='upper left')\n\n#plt.savefig('Figures\/Avg_Rating_Distplot.png')\nplt.show()","7f236b97":"#Visualizing Outliers\n\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10), squeeze=True)\nfig.suptitle('Average Rating Summary per Genre', fontsize=25)\n\nsns.boxplot(animation.avg_rating, ax=axes[0,0], color='m', orient='v')\naxes[0,0].set_title('Animation', fontsize=20)\n\nsns.boxplot(horror.avg_rating, ax=axes[0,1], color='r', orient='v')\naxes[0,1].set_title('Horror', fontsize=20)\n\nsns.boxplot(scifi.avg_rating, ax=axes[1,0], color='g', orient='v')\naxes[1,0].set_title('SciFi', fontsize=20)\n\nsns.boxplot(thriller.avg_rating, ax=axes[1,1], color='k', orient='v')\naxes[1,1].set_title('Thriller', fontsize=20)\n\nplt.show()","829a9a84":"def outlier_fences(df, col):\n    \"\"\"Calculates the fence values to determine Outliers\n    \n    df: is a dataframe\n    col: is the column header\n    \n    returns: List with upper and lower fence values\"\"\"\n    \n    q1 = df[col].quantile(0.25)\n    q3 = df[col].quantile(0.75)\n    \n    iqr = q3 - q1\n    \n    lower = q1 - 1.5*iqr\n    upper = q3 + 1.5*iqr\n    \n    return [lower, upper]","d36f7ab4":"anim_fences = outlier_fences(animation, 'avg_rating')","1ea25394":"worst_rated_anim = animation[animation.avg_rating < anim_fences[0]]\nworst_rated_anim.sort_values('avg_rating').head()","4ac05095":"best_rated_anim = animation[animation.avg_rating > anim_fences[1]]\nbest_rated_anim.sort_values('avg_rating').sort_values('avg_rating', ascending=False)","f326dbd0":"horror_fences = outlier_fences(horror, 'avg_rating')","b5fc7881":"worst_rated_horror = horror[horror.avg_rating < horror_fences[0]]\nworst_rated_horror.sort_values('avg_rating').sort_values('avg_rating').head()","67abd86b":"best_rated_horror = horror[horror.avg_rating > horror_fences[1]]\nbest_rated_horror.sort_values('avg_rating').sort_values('avg_rating', ascending=False)","492d1877":"scifi_fences = outlier_fences(scifi, 'avg_rating')","efa9faa1":"worst_rated_scifi = scifi[scifi.avg_rating < scifi_fences[0]]\nworst_rated_scifi.sort_values('avg_rating').sort_values('avg_rating').head()","0110eea6":"best_rated_scifi = scifi[scifi.avg_rating > scifi_fences[1]]\nbest_rated_scifi.sort_values('avg_rating').sort_values('avg_rating', ascending=False)","7ce3e3c0":"thriller_fences = outlier_fences(thriller, 'avg_rating')","da8dbc26":"worst_rated_thriller = thriller[thriller.avg_rating < thriller_fences[0]]\nworst_rated_thriller.sort_values('avg_rating').sort_values('avg_rating').head()","30a0adcc":"best_rated_thriller = thriller[thriller.avg_rating > thriller_fences[1]]\nbest_rated_thriller.sort_values('avg_rating').sort_values('avg_rating', ascending=False)","47f1eae1":"#Grouping all movies by their release year and calculating the mean value of each feature by year\nanimation_by_year = animation.groupby('year').mean()[['avg_rating', 'likes', 'views']]\nhorror_by_year = horror.groupby('year').mean()[['avg_rating', 'likes', 'views']]\nscifi_by_year = scifi.groupby('year').mean()[['avg_rating', 'likes', 'views']]\nthriller_by_year = thriller.groupby('year').mean()[['avg_rating', 'likes', 'views']]","9cf616ae":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10), squeeze=True)\nfig.suptitle('Average Rating per Year', fontsize=25)\n\n##Plots:\n\nsns.scatterplot(data = animation_by_year.avg_rating, ax=axes[0,0], color='m',\n               alpha=0.75)\naxes[0,0].set_title('Animation', fontsize=20)\naxes[0,0].set_ylabel('Average Rating')\naxes[0,0].set_ylim((2.4,4))\n\nsns.scatterplot(data = horror_by_year.avg_rating, ax=axes[0,1], color='r',\n               alpha=0.75)\naxes[0,1].set_title('Horror', fontsize=20)\naxes[0,1].set_ylim((2.4,4))\n\nsns.scatterplot(data = scifi_by_year.avg_rating, ax=axes[1,0], color='g',\n               alpha=0.75)\naxes[1,0].set_title('SciFi', fontsize=20)\naxes[1,0].set_ylabel('Average Rating')\naxes[1,0].set_xlabel('Year')\naxes[1,0].set_ylim((2.4,4))\n\nsns.scatterplot(data = thriller_by_year.avg_rating, ax=axes[1,1], color='k',\n               alpha=0.75)\naxes[1,1].set_title('Thriller', fontsize=20)\naxes[1,1].set_xlabel('Year')\naxes[1,1].set_ylim((2.4,4))\n\n# -----Annotations-----: Annotated movies are just to point out some classics or personal favorites \n\n# ------------Animation------------\naxes[0,0].annotate('Spirited \\n Away', \n                   xy=(2001, animation_by_year.loc[2001]['avg_rating']),\n                   xytext=(2001, animation_by_year.loc[2001]['avg_rating'] + 0.25),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='purple'),\n                   horizontalalignment='left',\n                   verticalalignment='bottom')\n\naxes[0,0].annotate('Toy Story', \n                   xy=(1995, animation_by_year.loc[1995]['avg_rating']),\n                   xytext=(1998, animation_by_year.loc[1995]['avg_rating'] - 0.4),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='purple'),\n                   horizontalalignment='right',\n                   verticalalignment='bottom')\n\naxes[0,0].annotate('Grave of \\n the Fireflies', \n                   xy=(1988, animation_by_year.loc[1988]['avg_rating']),\n                   xytext=(1988, animation_by_year.loc[1988]['avg_rating'] + 0.3),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='purple'),\n                   horizontalalignment='center',\n                   verticalalignment='bottom')\n\n\n\n\n# ---------- Horror ----------\naxes[0,1].annotate('The Thing', \n                   xy=(1982, horror_by_year.loc[1982]['avg_rating']),\n                   xytext=(1982, horror_by_year.loc[1982]['avg_rating'] + 0.35),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='red'),\n                   horizontalalignment='center',\n                   verticalalignment='top')\n\naxes[0,1].annotate('Psycho', \n                   xy=(1960, horror_by_year.loc[1960]['avg_rating']),\n                   xytext=(1960, horror_by_year.loc[1960]['avg_rating'] + 0.3),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='red'),\n                   horizontalalignment='center',\n                   verticalalignment='top')\n\naxes[0,1].annotate('The \\n VVitch', \n                   xy=(2015, horror_by_year.loc[2015]['avg_rating']),\n                   xytext=(2015, horror_by_year.loc[2015]['avg_rating'] + 0.4),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='red'),\n                   horizontalalignment='center',\n                   verticalalignment='top')\n\n# ---------- SciFi ----------\n\naxes[1,0].annotate('Empire Strikes \\n Back', \n                   xy=(1980, scifi_by_year.loc[1980]['avg_rating']),\n                   xytext=(1980, scifi_by_year.loc[1980]['avg_rating'] - 0.25),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='green'),\n                   horizontalalignment='center',\n                   verticalalignment='top')\n\naxes[1,0].annotate('2001: A \\n Space Odyssey', \n                   xy=(1968, scifi_by_year.loc[1968]['avg_rating']),\n                   xytext=(1968, scifi_by_year.loc[1968]['avg_rating'] + 0.5),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='green'),\n                   horizontalalignment='center',\n                   verticalalignment='top')\n\naxes[1,0].annotate('Into the \\n Spider-Verse', \n                   xy=(2018, scifi_by_year.loc[2018]['avg_rating']),\n                   xytext=(2018, scifi_by_year.loc[2018]['avg_rating'] + 0.5),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='green'),\n                   horizontalalignment='right',\n                   verticalalignment='top')\n\n# ---------Thriller-------------\naxes[1,1].annotate('Parasite', \n                   xy=(2019, thriller_by_year.loc[2019]['avg_rating']),\n                   xytext=(2019, thriller_by_year.loc[2019]['avg_rating'] + 0.3),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='black'),\n                   horizontalalignment='right',\n                   verticalalignment='top')\n\naxes[1,1].annotate('Hitchcock Classic \\n  Period', \n                   xy=(1955, thriller_by_year.loc[1955]['avg_rating'] ),\n                   xytext=(1954, thriller_by_year.loc[1955]['avg_rating'] + 0.5),\n                   arrowprops=dict(arrowstyle='-', facecolor='black'),\n                   horizontalalignment='center',\n                   verticalalignment='top')\n\naxes[1,1].annotate('', \n                   xy=(1950, thriller_by_year.loc[1950]['avg_rating'] + 0.07),\n                   xytext=(1950, thriller_by_year.loc[1950]['avg_rating'] + 0.34),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='black'),\n                   horizontalalignment='left',\n                   verticalalignment='top')\n\naxes[1,1].annotate('', \n                   xy=(1960, thriller_by_year.loc[1960]['avg_rating'] + 0.05),\n                   xytext=(1960, thriller_by_year.loc[1960]['avg_rating'] + 0.32),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='black'),\n                   horizontalalignment='right',\n                   verticalalignment='top')\n\naxes[1,1].annotate('Oldboy', \n                   xy=(2003, thriller_by_year.loc[2003]['avg_rating'] ),\n                   xytext=(2003, thriller_by_year.loc[2003]['avg_rating'] - 0.4),\n                   arrowprops=dict(arrowstyle='fancy', facecolor='black'),\n                   horizontalalignment='right',\n                   verticalalignment='bottom')\n\n\n\n#plt.savefig('Figures\/Avg_Rating_per_Year.png')\nplt.show()","4e940c4d":"top_animation = animation.nlargest(15, 'avg_rating')\ntop_animation","4623ad63":"miyazaki_films = animation[animation['director'] == 'Hayao Miyazaki'].sort_values('avg_rating', ascending=False)\n","5c74a44e":"miyazaki_films['avg_rating'].mean()","a9fa13ba":"animation.avg_rating.mean()","84acb099":"animation['avg_rating'].std()","face8da7":"horror.nlargest(15, 'avg_rating')","6fc7ea98":"horror[horror['title'] == 'The Witch']","7ec63363":"horror[horror['title'] == 'The Thing']","f2c99234":"horror.avg_rating.mean()","ac7df57d":"horror.avg_rating.std()","8c459a68":"scifi.nlargest(15, 'avg_rating')","03f6ba05":"scifi[scifi['title'] == 'The Empire Strikes Back']","27006a09":"scifi.avg_rating.mean()","0ea3ece0":"scifi.avg_rating.std()","ca3af6dc":"thriller.nlargest(15, 'avg_rating')","3463e12a":"hitchcock_films = thriller[thriller['director'] == 'Alfred Hitchcock'].sort_values('avg_rating', ascending=False)","0ac656e0":"thriller[(thriller.year >= 1950) & (thriller.year <= 1960)].nlargest(15, 'avg_rating')","f94331c6":"hitchcock_films[(hitchcock_films.year >= 1950) & (hitchcock_films.year <= 1960)]","136d335f":"thriller[(thriller.year >= 1950) & (thriller.year <= 1960)].avg_rating.mean()","56183316":"hitchcock_films[(hitchcock_films.year >= 1950) & (hitchcock_films.year <= 1960)].avg_rating.mean()","09a7157a":"thriller[(thriller.year >= 1910) & (thriller.year <= 1930)].shape","2ca7411a":"(4.6 - thriller_rating_mean)\/thriller_rating_std","3402a963":"(3.97 - thriller[(thriller.year >= 1950) & (thriller.year <= 1960)].avg_rating.mean())\/thriller[(thriller.year >= 1950) & (thriller.year <= 1960)].avg_rating.std()","33e65f9c":"# Obtaining total number of ratings for each movie and genre\nanimation['total_ratings'] = animation.half_star + animation.one_star + animation.one_half_star + animation.two_star + animation.two_half_star + animation.three_star + animation.three_half_star + animation.four_star + animation.four_half_star + animation.five_star\nhorror['total_ratings'] = horror.half_star + horror.one_star + horror.one_half_star + horror.two_star + horror.two_half_star + horror.three_star + horror.three_half_star + horror.four_star + horror.four_half_star + horror.five_star\nscifi['total_ratings'] = scifi.half_star + scifi.one_star + scifi.one_half_star + scifi.two_star + scifi.two_half_star + scifi.three_star + scifi.three_half_star + scifi.four_star + scifi.four_half_star + scifi.five_star\nthriller['total_ratings'] = thriller.half_star + thriller.one_star + thriller.one_half_star + thriller.two_star + thriller.two_half_star + thriller.three_star + thriller.three_half_star + thriller.four_star + thriller.four_half_star + thriller.five_star\n","283e6ad1":"# Like\/views ratio to get a relative measure\nanimation['like_to_views_ratio'] = animation.likes\/animation.views\nhorror['like_to_views_ratio'] = horror.likes\/horror.views\nscifi['like_to_views_ratio'] = scifi.likes\/scifi.views\nthriller['like_to_views_ratio'] = thriller.likes\/thriller.views","1665ad61":"print('Like\/Views Statistics: \\n',\n      f'Anim: \u03bc ={animation.like_to_views_ratio.mean()}, \\sigma ={animation.like_to_views_ratio.std()} \\n',\n      f'Horror: \u03bc = {horror.like_to_views_ratio.mean()}, \\sigma = {horror.like_to_views_ratio.std()} \\n',\n      f'Scifi: \u03bc = {scifi.like_to_views_ratio.mean()}, \\sigma = {scifi.like_to_views_ratio.std()} \\n',\n      f'Thriller: \u03bc = {thriller.like_to_views_ratio.mean()}, \\sigma = {thriller.like_to_views_ratio.std()}')","5f643856":"animation['total_ratings_to_views_ratio'] = animation.total_ratings\/animation.views\nhorror['total_ratings_to_views_ratio'] = horror.total_ratings\/horror.views\nscifi['total_ratings_to_views_ratio'] = scifi.total_ratings\/scifi.views\nthriller['total_ratings_to_views_ratio'] = thriller.total_ratings\/thriller.views","fe67d67b":"print('Total_Ratings\/Views Statistics: \\n',\n      f'Anim: \u03bc ={animation.total_ratings_to_views_ratio.mean()}, \\sigma ={animation.total_ratings_to_views_ratio.std()} \\n',\n      f'Horror: \u03bc = {horror.total_ratings_to_views_ratio.mean()}, \\sigma = {horror.total_ratings_to_views_ratio.std()} \\n',\n      f'Scifi: \u03bc = {scifi.total_ratings_to_views_ratio.mean()}, \\sigma = {scifi.total_ratings_to_views_ratio.std()} \\n',\n      f'Thriller: \u03bc = {thriller.total_ratings_to_views_ratio.mean()}, \\sigma = {thriller.total_ratings_to_views_ratio.std()}')","ce33680d":"#calculating Skewness\nanimation_skp = round(animation.like_to_views_ratio.skew(), 2)\nhorror_skp = round(horror.like_to_views_ratio.skew(), 2)\nscifi_skp = round(scifi.like_to_views_ratio.skew(), 2)\nthriller_skp = round(thriller.like_to_views_ratio.skew(), 2)","93067214":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10), squeeze=True)\nfig.suptitle('Like\/Views Distribution', fontsize=25)\n\nsns.distplot(animation.like_to_views_ratio, ax=axes[0,0], norm_hist=True,\n             color='y', axlabel=False, label=f'Total of {animation_n_movies} Movies')\naxes[0,0].set_title(f'Animation (\u03bc = {round(animation.like_to_views_ratio.mean(),2)}, \u03c3 = {round(animation.like_to_views_ratio.std(), 2)}, Skp = {animation_skp})',\n                    fontsize=20)\naxes[0,0].legend(loc='upper right')\n\nsns.distplot(horror.like_to_views_ratio, ax=axes[0,1], norm_hist=True,\n             color='r', axlabel=False, label=f'Total of {horror_n_movies} Movies')\naxes[0,1].set_title(f'Horror (\u03bc = {round(horror.like_to_views_ratio.mean(), 2)}, \u03c3 = {round(horror.like_to_views_ratio.std(), 2)}, Skp = {horror_skp})',\n                    fontsize=20)\naxes[0,1].legend(loc='upper right')\n\nsns.distplot(scifi.like_to_views_ratio, ax=axes[1,0], norm_hist=True,\n             color='g', axlabel=False, label=f'Total of {scifi_n_movies} Movies')\naxes[1,0].set_title(f'SciFi (\u03bc = {round(scifi.like_to_views_ratio.mean(), 2)}, \u03c3 = {round(scifi.like_to_views_ratio.std(), 2)}, Skp = {scifi_skp})',\n                    fontsize=20)\naxes[1,0].legend(loc='upper right')\n\nsns.distplot(thriller.like_to_views_ratio, ax=axes[1,1], norm_hist=True,\n             color='k', axlabel=False, label=f'Total of {thriller_n_movies} Movies')\naxes[1,1].set_title(f'Thriller (\u03bc = {round(thriller.like_to_views_ratio.mean(), 2)}, \u03c3 = {round(thriller.like_to_views_ratio.std(), 2)}, Skp = {thriller_skp})',\n                    fontsize=20)\naxes[1,1].legend(loc='upper right')\n\n#plt.savefig('Figures\/Like_Views_Ratio.png')\nplt.show()","e7cd6047":"animation_skp2 = round(animation.total_ratings_to_views_ratio.skew(), 2)\nhorror_skp2 = round(horror.total_ratings_to_views_ratio.skew(), 2)\nscifi_skp2 = round(scifi.total_ratings_to_views_ratio.skew(), 2)\nthriller_skp2 = round(thriller.total_ratings_to_views_ratio.skew(), 2)","c6c0cbf7":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10), squeeze=True)\nfig.suptitle('Ratings\/Views Distribution', fontsize=25)\n\nsns.distplot(animation.total_ratings_to_views_ratio, ax=axes[0,0], norm_hist=True,\n             color='y', axlabel=False, label=f'Total of {animation_n_movies} Movies')\naxes[0,0].set_title(f'Animation (\u03bc = {round(animation.total_ratings_to_views_ratio.mean(),2)}, \u03c3 = {round(animation.total_ratings_to_views_ratio.std(), 2)}, Skp = {animation_skp2})',\n                    fontsize=20)\naxes[0,0].legend(loc='upper right')\n\nsns.distplot(horror.total_ratings_to_views_ratio, ax=axes[0,1], norm_hist=True,\n             color='r', axlabel=False, label=f'Total of {horror_n_movies} Movies')\naxes[0,1].set_title(f'Horror (\u03bc = {round(horror.total_ratings_to_views_ratio.mean(), 2)}, \u03c3 = {round(horror.total_ratings_to_views_ratio.std(), 2)}, Skp = {horror_skp2})',\n                    fontsize=20)\naxes[0,1].legend(loc='upper left')\n\nsns.distplot(scifi.total_ratings_to_views_ratio, ax=axes[1,0], norm_hist=True,\n             color='g', axlabel=False, label=f'Total of {scifi_n_movies} Movies')\naxes[1,0].set_title(f'SciFi (\u03bc = {round(scifi.total_ratings_to_views_ratio.mean(), 2)}, \u03c3 = {round(scifi.total_ratings_to_views_ratio.std(), 2)}, Skp = {scifi_skp2})',\n                    fontsize=20)\naxes[1,0].legend(loc='upper left')\n\nsns.distplot(thriller.total_ratings_to_views_ratio, ax=axes[1,1], norm_hist=True,\n             color='k', axlabel=False, label=f'Total of {thriller_n_movies} Movies')\naxes[1,1].set_title(f'Thriller (\u03bc = {round(thriller.total_ratings_to_views_ratio.mean(), 2)}, \u03c3 = {round(thriller.total_ratings_to_views_ratio.std(), 2)}, Skp = {thriller_skp2})',\n                    fontsize=20)\naxes[1,1].legend(loc='upper left')\n\n#plt.savefig('Figures\/total_ratings_Views_Ratio.png')\nplt.show()","6c4f70cd":"# Visualizing relationships between data.\nfig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15,10), squeeze=True)\nfig.suptitle('Likes\/Views vs Average Rating', fontsize=25)\n\nsns.scatterplot(x='like_to_views_ratio', y='avg_rating', data = animation, ax=axes[0,0], color='m',\n               alpha=0.4)\naxes[0,0].set_title('Animation', fontsize=20)\naxes[0,0].set_ylabel('Average Rating')\naxes[0,0].set_xlabel('')\naxes[0,0].set_ylim(0,5)\naxes[0,0].set_xlim(0,0.6)\n\n\nsns.scatterplot(x='like_to_views_ratio', y='avg_rating', data = horror, ax=axes[0,1], color='r',\n               alpha=0.4)\naxes[0,1].set_title('Horror', fontsize=20)\naxes[0,1].set_xlabel('')\naxes[0,1].set_ylabel('')\naxes[0,1].set_ylim(0,5)\naxes[0,1].set_xlim(0,0.6)\n\n\nsns.scatterplot(x='like_to_views_ratio', y='avg_rating', data = scifi, ax=axes[1,0], color='g',\n               alpha=0.4)\naxes[1,0].set_title('SciFi', fontsize=20)\naxes[1,0].set_ylabel('Average Rating')\naxes[1,0].set_xlabel('Like to Views Ratio')\naxes[1,0].set_ylim(0,5)\naxes[1,0].set_xlim(0,0.6)\n\n\nsns.scatterplot(x='like_to_views_ratio', y='avg_rating', data = thriller, ax=axes[1,1], color='k',\n               alpha=0.4)\naxes[1,1].set_title('Thriller', fontsize=20)\naxes[1,1].set_xlabel('Like to Views Ratio')\naxes[1,1].set_ylabel('')\naxes[1,1].set_ylim(0,5)\naxes[1,1].set_xlim(0,0.6)\n\n#plt.savefig('Figures\/Corr_AvgRating_LikeViewRatio.png')","0a7b133b":"anim_grouped = animation.groupby('director')\nn_movies = anim_grouped.size()\n","35901d65":"anim_directors = anim_grouped.mean()","5649bd85":"anim_directors['n_movies'] = n_movies\n\n","db7c7491":"anim_directors.describe()","bc59f27a":"anim_top15_dirs = anim_directors[anim_directors.n_movies > anim_directors.n_movies.quantile(0.75)].nlargest(15, ['avg_rating', 'n_movies', 'like_to_views_ratio'])","4f3f3b59":"anim_top15_dirs = anim_top15_dirs[['avg_rating', 'n_movies', 'running_time', 'views', 'likes', 'like_to_views_ratio', 'total_ratings_to_views_ratio' ]].round(2)\nanim_top15_dirs ","60a48604":"horror_grouped = horror.groupby('director')\nhorror_n_movies = horror_grouped.size()","04fbef0f":"horror_directors = horror_grouped.mean()","ba147713":"horror_directors['n_movies'] = horror_n_movies","d746520e":"horror_directors.describe()","bef2d82d":"horror_top15_dirs = horror_directors[horror_directors.n_movies > horror_directors.n_movies.quantile(0.75)].nlargest(15, ['avg_rating', 'n_movies', 'like_to_views_ratio'])","d798cb79":"horror_top15_dirs = horror_top15_dirs[['avg_rating', 'n_movies', 'running_time', 'views', 'likes', 'like_to_views_ratio', 'total_ratings_to_views_ratio' ]].round(2)\nhorror_top15_dirs ","7165570b":"scifi_grouped = scifi.groupby('director')\nscifi_n_movies = scifi_grouped.size()","db7a8b53":"scifi_directors = scifi_grouped.mean()","f330183c":"scifi_directors['n_movies'] = scifi_n_movies\n","64c0f27a":"scifi_directors.describe()","6a28e35b":"scifi_top15_dirs = scifi_directors[scifi_directors.n_movies > scifi_directors.n_movies.quantile(0.75)].nlargest(15, ['avg_rating', 'n_movies', 'like_to_views_ratio'])","847bf35f":"scifi_top15_dirs = scifi_top15_dirs[['avg_rating', 'n_movies', 'running_time', 'views', 'likes', 'like_to_views_ratio', 'total_ratings_to_views_ratio' ]].round(2)\nscifi_top15_dirs ","6659a9eb":"thriller_grouped = thriller.groupby('director')\nthriller_n_movies = thriller_grouped.size()","ec1cd3a4":"thriller_directors = thriller_grouped.mean()","57539a79":"thriller_directors['n_movies'] = thriller_n_movies","6da93f3e":"thriller_directors.describe()","2ce5930d":"thriller_top15_dirs = thriller_directors[thriller_directors.n_movies > thriller_directors.n_movies.quantile(0.75)].nlargest(15, ['avg_rating', 'n_movies', 'like_to_views_ratio'])","b2428355":"thriller_top15_dirs = thriller_top15_dirs[['avg_rating', 'n_movies', 'running_time', 'views', 'likes', 'like_to_views_ratio', 'total_ratings_to_views_ratio' ]].round(2)\nthriller_top15_dirs ","39343be7":"from sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture","df0b9505":"#Setting a Pipeline for Standardizing and PCA\n\nanim_pipeline = Pipeline([('scaler', StandardScaler()),\n                         ('pca', PCA(n_components=0.94, random_state=69))], verbose=True)","c3db108c":"anim_features = animation[['avg_rating', 'running_time', 'like_to_views_ratio', 'total_ratings_to_views_ratio']]\n","88193521":"anim_pipeline.fit(anim_features)","b9f5302a":"anim_pipeline['pca'].explained_variance_ratio_ # 3 PCs were kept, enough to make cluster visualization possible preserving 94% of variance","71f6c487":"anim_coefs = pd.DataFrame(anim_pipeline['pca'].components_, columns=anim_features.columns, index=['PC1', 'PC2', 'PC3'])\nanim_coefs","be0258bd":"anim_features_3d = anim_pipeline.transform(anim_features) #Transformed features ready for clustering in PC space.","072d1f15":"anim_reduced = pd.DataFrame(anim_features_3d, columns=anim_coefs.index, index=anim_features.index)","d20f9496":"anim_reduced","b59abce3":"horror_pipeline = Pipeline([('scaler', StandardScaler()),\n                            ('pca', PCA(n_components=0.93, random_state=69))], verbose=True)","eb8244dc":"horror_features = horror[['avg_rating', 'running_time', 'like_to_views_ratio', 'total_ratings_to_views_ratio']]","f1242069":"horror_pipeline.fit(horror_features)","71365795":"horror_pipeline['pca'].explained_variance_ratio_ # 3 PCs were kept, enough to make cluster visualization possible preserving 93% of variance","232f860f":"horror_coefs = pd.DataFrame(horror_pipeline['pca'].components_, columns=horror_features.columns, index=['PC1', 'PC2', 'PC3'])\nhorror_coefs","3501a235":"horror_features_3d = horror_pipeline.transform(horror_features) #Transformed features ready for clustering in PC space.","603362e4":"horror_reduced = pd.DataFrame(horror_features_3d, columns=horror_coefs.index, index=horror_features.index)","04efb404":"horror_reduced","1ccb933a":"scifi_pipeline = Pipeline([('scaler', StandardScaler()),\n                            ('pca', PCA(n_components=0.93, random_state=69))], verbose=True)\n\nscifi_features = scifi[['avg_rating', 'running_time', 'like_to_views_ratio', 'total_ratings_to_views_ratio']]","238a2835":"scifi_pipeline.fit(scifi_features)","e6534fa6":"scifi_pipeline['pca'].explained_variance_ratio_ # 3 PCs were kept, enough to make cluster visualization possible preserving 93% of variance","52435e75":"scifi_coefs = pd.DataFrame(scifi_pipeline['pca'].components_, columns=scifi_features.columns, index=['PC1', 'PC2', 'PC3'])\nscifi_coefs","b7d5fe95":"scifi_features_3d = scifi_pipeline.transform(scifi_features) #Transformed features ready for clustering in PC space.\nscifi_reduced = pd.DataFrame(scifi_features_3d, columns=scifi_coefs.index, index=scifi_features.index)","01017153":"scifi_reduced","02ee8102":"thriller_pipeline = Pipeline([('scaler', StandardScaler()),\n                            ('pca', PCA(n_components=0.93, random_state=69))], verbose=True)\n\nthriller_features = thriller[['avg_rating', 'running_time', 'like_to_views_ratio', 'total_ratings_to_views_ratio']]","9e13d269":"thriller_pipeline.fit(thriller_features)","a73049be":"thriller_pipeline['pca'].explained_variance_ratio_ # 3 PCs were kept, enough to make cluster visualization possible preserving 93% of variance","1f6287f6":"thriller_coefs = pd.DataFrame(thriller_pipeline['pca'].components_, columns=thriller_features.columns, index=['PC1', 'PC2', 'PC3'])\nthriller_coefs","5de65be6":"thriller_features_3d = thriller_pipeline.transform(thriller_features) #Transformed features ready for clustering in PC space.\nthriller_reduced = pd.DataFrame(thriller_features_3d, columns=thriller_coefs.index, index=thriller_features.index)","cf181c5c":"thriller_reduced","cb5775e4":"from sklearn.metrics import silhouette_score","81caeb5b":"anim_kmeans_per_k = [KMeans(n_clusters=k, random_state=69).fit(anim_reduced) for k in range(1,11)]\n\nanim_inertias = [model.inertia_ for model in anim_kmeans_per_k]","cf207dd7":"plt.figure(figsize=(9,5))\nplt.plot(range(1, 11), anim_inertias, \"yo-\")\nplt.xlabel(\"$k$\", fontsize=14)\nplt.ylabel(\"Inertia\", fontsize=14)\n# plt.annotate('Elbow',\n#              xy=(4, inertias[3]),\n#              xytext=(0.55, 0.55),\n#              textcoords='figure fraction',\n#              fontsize=16,\n#              arrowprops=dict(facecolor='black', shrink=0.1)\n#             )\nplt.xlim([0, 11])\n#plt.savefig(\"Figures\/inertia_vs_k_plot_anim.png\")\nplt.show()","c9b15b76":"anim_silhouette_scores = [silhouette_score(anim_reduced, model.labels_) for model in anim_kmeans_per_k[1:]]\nanim_silhouette_scores","0704063a":"plt.figure(figsize=(9, 5))\nplt.plot(range(2, 11), anim_silhouette_scores, \"yo-\")\nplt.xlabel(\"$k$\", fontsize=14)\nplt.ylabel(\"Silhouette score\", fontsize=14)\n#plt.axis([1.8, 8.5, 0.55, 0.7])\n#plt.savefig(\"Figures\/silhouette_score_vs_k_plot.png\")\nplt.show()","fda61d19":"from sklearn.metrics import silhouette_samples\nfrom matplotlib.ticker import FixedLocator, FixedFormatter\nimport matplotlib as mpl","08712aa3":"plt.figure(figsize=(15, 10))\nn = 0\nfor k in (2, 3, 4, 7):\n    n +=1\n    plt.subplot(2, 2, n)\n    \n    y_pred = anim_kmeans_per_k[k - 1].labels_\n    silhouette_coefficients = silhouette_samples(anim_reduced, y_pred)\n\n    padding = len(anim_reduced) \/\/ 30\n    pos = padding\n    ticks = []\n    for i in range(k):\n        coeffs = silhouette_coefficients[y_pred == i]\n        coeffs.sort()\n\n        color = mpl.cm.Spectral(i \/ k)\n        plt.fill_betweenx(np.arange(pos, pos + len(coeffs)), 0, coeffs,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n        ticks.append(pos + len(coeffs) \/\/ 2)\n        pos += len(coeffs) + padding\n\n    plt.gca().yaxis.set_major_locator(FixedLocator(ticks))\n    plt.gca().yaxis.set_major_formatter(FixedFormatter(range(k)))\n    if k in (2, 4):\n        plt.ylabel(\"Cluster\")\n        plt.gca().set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n        \n    if k in (4, 7):\n        plt.gca().set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n        plt.xlabel(\"Silhouette Coefficient\")\n    else:\n        plt.tick_params(labelbottom=False)\n\n    plt.axvline(x=anim_silhouette_scores[k], color=\"red\", linestyle=\"--\")\n    plt.title(\"$k={}$\".format(k), fontsize=16)\n\n#plt.savefig(\"Figures\/silhouette_analysis_plot.png\")\nplt.show()","b41e0bf7":"anim_clusters = anim_kmeans_per_k[2]","b34e129f":"animation['cluster'] = anim_clusters.labels_","dd149f9a":"from mpl_toolkits.mplot3d import Axes3D","0e4c2cad":"\nfig = plt.figure(figsize=(10,7))\n\nax = Axes3D(fig)\n# Plotting Cluster 0\nx_0 = anim_reduced[animation.cluster == 0].PC1\ny_0 = anim_reduced[animation.cluster == 0].PC2\nz_0 = anim_reduced[animation.cluster == 0].PC3\nax.scatter(x_0, y_0, z_0, label='Cluster 0', marker='o', alpha=0.5)\n\n# Plotting Cluster 1\nx_1 = anim_reduced[animation.cluster == 1].PC1\ny_1 = anim_reduced[animation.cluster == 1].PC2\nz_1 = anim_reduced[animation.cluster == 1].PC3\nax.scatter(x_1, y_1, z_1, label='Cluster 1', marker='o', alpha=0.5)\n\n# Plotting Cluster 2\nx_2 = anim_reduced[animation.cluster == 2].PC1\ny_2 = anim_reduced[animation.cluster == 2].PC2\nz_2 = anim_reduced[animation.cluster == 2].PC3\nax.scatter(x_2, y_2, z_2, label='Cluster 2', marker='o', alpha=0.5)\n\n\n\n\nax.set_xlabel('PC1')\nax.set_ylabel('PC2')\nax.set_zlabel('PC3')\nax.set_title('Animation: Clusters')\n\nax.view_init(15, 25)\n\nplt.legend()\n\nplt.show()\n","9afba2f2":"# Data Cleanup\n\n## Data Descriptive Statistics and Check for NAs","433d245a":"### Sci-Fi","6db2e115":"### Animation\n\nAnimation has a near constant trend in rating over time. Pretty consistent!\n\nMention Into the spiderverse! Didnt annotate to avoid clutter\n\nRemoved Over the Garden Wall by Nate Cash because it is an animated series","47ed428d":"# Data Exploration and Analysis","a90f933b":"### Thriller\n","e8e616f7":"### Visualizing Clusters\n###### We are choosing  k = 3\n\nThe silhouette diagram above indicates that, for the animation genre, k = 3 provides the highest silhouette score and at the smae time all clusters have their silhouette coefficiente over the average score. While this is true for the rest, they all have lower silhouette scores.","987f017e":"#### Sci-Fi Outliers","9e421343":"## Animation Clustering","dd56d7f6":"#### Empire Strikes Back\n\n$3.1 \\sigma$ above genre avg","04e15d1e":"### Finding Optimal Number of Clusters: Inertia and Silhouette Score","4218c529":"### Thriller PCA","a321527f":"### Horror","f2f55d72":"### Thriller","a8f7da58":"### Sci-Fi PCA","3294ec6d":"## Data Wrangling\n\nDatasets contain short films and series. I only want to analyze feature films, so I'll cut running time to the 50 - 240 min interval","ac551d32":"## Dealing with Missing Values\n\nIn all 4 datasets, number of observations that contain missing values are minimal, so I'll delete them.","66ad8e80":"## Average Rating by Year","e2982c4c":"PC1 is primarily composed by avg_rating and like\/views (sort of expected)\n\nPC2 is more evenly spread with like\/Views playing a smaller part this time\n\nPC3 is Heavily dominated by running time and ratings\/views","201b95c0":"## Views, Likes, total Ratings","f02e7d5a":"## Highest Rated Directors per Genre\nCriteria for making the final list is, of course, a high rating and also having directed a number of movies that is larger than the 3rd quartile value for number of movies for each director\n### Animation","a9726a21":"#### The Thing\n\nHighest rated Horror film on platform. \n\n$3.4 \\sigma$ above genre mean!","beafcf07":"### Horror","c87f1807":"PC1: is primarily composed by avg_rating and like\/views (sort of expected, again)\n\nPC2: is more evenly spread with like\/Views and avg_rating playing a smaller part this time\n\nPC3: Heavily dominated by running time and ratings\/views","f72efaf8":"#### Thriller Outliers","e92c2ad4":" # Import Data","4f84bfbf":"## Average Rating Distribution\n","0305364f":"#### Miyazaki-San Analysis\n\nIn the top 15 feature length animation films, Miyazaki has 4 appearances.\n\nHis mean average rating over all his films is 4.06, while for the genre is 3.13, almost $2 \\sigma$ above the mean.","a60a8cd0":"PC1 is primarily composed by avg_rating and like\/views (sort of expected, again + 3)\n\nPC2 is highly composed by running time and ratings\/views\n\nPC3 is more evenly spread out, but running time again is predominant\n\nThriller genre has been pretty particular in PCA","a80b23ac":"#### Parasite Analysis\n\nMean average rating for the thriller genre started to trend down in the 60's, with an apparent potential change in trend in the last couple of years. Parasite (2019) is the highest rated movie on the platform. $3.7 \\sigma $ Above Genre mean!!\n\n#### Hitchcock Analysis\n\nIn Hitchcock's classic period (1950 - 1960) he put out 9 films. The mean average rating of the 9 films is 4.0, whereas the mean average rating for the full population on the decade is 3.28.\n\n5 of his movies appear in the top 15 movies of the decade: 1\/3\n\n$1.74 \\sigma$ Over Decade Average\n\n#### '10s to '30s\n\nFew movies with big enough number of ratings to make the cut, only 33 movies in the dataset belong to this time period","deb5b873":"### Animation PCA","bbe0a9a4":"#### Horror Outliers","93316c5a":"### Movies with Outlier Score per Each Genre\n\nNames and Stats for movies that can be considered outliers within their Genres","c06a7209":"#### Animation Outliers\n  \n","8dc95324":"PC1 is primarily composed by avg_rating and like\/views (sort of expected, again + 2)\n\nPC2 is more evenly spread with avg_rating playing a particularly small part this time\n\nPC3 Heavily dominated by running time and ratings\/views","fc2a13c6":"### Horror PCA","13a2a632":"### Sci-Fi","c55577fd":"# Cluster Analysis\n\nGoal is to Determine groups of movies with distinct characteristics given  a few features: Average Rating, Running Time, Like\/Views, Total-Ratings\/ Views\n\nIdeally keep 95% variance, but can be traded off with benefit of reducing an extra dimension.\n## PCA For Dimenstionality Reduction"}}