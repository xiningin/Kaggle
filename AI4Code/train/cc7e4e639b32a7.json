{"cell_type":{"91bab369":"code","6c808682":"code","4069c361":"code","8b7f1ce3":"code","081ac969":"code","a44db6a8":"code","496bfbf8":"code","a230a837":"code","fc14d3a3":"code","1faf56ea":"code","7d005bab":"code","f7fb63cd":"code","5f6e70b8":"code","9a26eab8":"code","6bbc5657":"code","146b1241":"code","a0c7d38c":"code","e30d622b":"code","daf0d25d":"code","3cc33cfd":"code","5bd79c09":"code","6049e04e":"markdown","467c1998":"markdown","a0aa3fa7":"markdown","98f4abd9":"markdown","175c2504":"markdown","5e11ec03":"markdown","fd0dd7f8":"markdown"},"source":{"91bab369":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c808682":"!pip install sklearn\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","4069c361":"df = pd.read_csv('\/kaggle\/input\/insurance-premium-prediction\/insurance.csv')","8b7f1ce3":"df","081ac969":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.subplot(1,1,1)\nsns.countplot(x='sex',data=df)\n#plt.subplot(1,2,2)\n#sns.scatterplot(data=df, x=\"expenses\", y=\"gender\")","a44db6a8":"f = plt.figure(figsize=(10,3))\nf.add_subplot(121)\nsns.countplot(x='children',data=df)\nf.add_subplot(122)\nsns.scatterplot(data=df, x=\"expenses\", y=\"children\")","496bfbf8":"f = plt.figure(figsize=(10,3))\nf.add_subplot(121)\nsns.countplot(x='smoker',data=df)\nf.add_subplot(122)\nsns.scatterplot(data=df, x=\"expenses\", y=\"smoker\")","a230a837":"sns.countplot(x='region',data=df)","fc14d3a3":"sns.scatterplot(data=df, x=\"expenses\", y=\"region\")","1faf56ea":"f = plt.figure(figsize=(10,3))\nf.add_subplot(121)\nsns.lineplot(x='age',y='expenses',data=df)\nf.add_subplot(122)\nsns.lineplot(x='bmi',y='expenses',data=df)","7d005bab":"sns.lineplot(x='bmi',y='expenses',data=df)","f7fb63cd":"from sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()\ndf.iloc[:,1] = label.fit_transform(df.iloc[:,1])\ndf.iloc[:,5] = label.fit_transform(df.iloc[:,5])\ndf.iloc[:,4] = label.fit_transform(df.iloc[:,4])","5f6e70b8":"import matplotlib.pyplot as plt\ncorr = df.corr()\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","9a26eab8":"sns.pairplot(df)","6bbc5657":"X = df[['bmi','age','smoker','children']]\nY = df['expenses']","146b1241":"\nX_train,X_test,y_train,y_test = sklearn.model_selection.train_test_split(X,Y,test_size=0.25)","a0c7d38c":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nregressor = DecisionTreeRegressor(random_state=0)\n#cross_val_score(regressor, X_train, y_train, cv=10)\nregressor.fit(X_train, y_train)\ny_predict = regressor.predict(X_test)\nmse_dt = mean_squared_error(y_test,y_predict,squared=False)\nprint(mse_dt)","e30d622b":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\n#cross_val_score(regressor, X_train, y_train, cv=10)\nregressor.fit(X_train, y_train)\ny_predict = regressor.predict(X_test)\nmse_dt = mean_squared_error(y_test,y_predict,squared=False)\nprint(mse_dt)","daf0d25d":"import pickle\npickle.dump(regressor, open('model.pkl','wb'))\n\nmodel = pickle.load(open('model.pkl','rb'))","3cc33cfd":"!pip install gradio\nimport gradio as gr\n\ndef greet(bmi,age,smoker,children):\n    if smoker:\n        is_smoker = 1\n    else: \n        is_smoker = 0\n    X_test = pd.DataFrame.from_dict({'bmi':[bmi],'age':[age],'smoker':[is_smoker],'children':[children]}) \n    print(X_test)\n    y_predict = regressor.predict(X_test)\n    print(y_predict)\n    return y_predict[0]     \n\niface = gr.Interface(\n  fn=greet, \n  inputs=['text','text','checkbox','text'], \n  outputs=\"number\")\niface.launch(share=True)","5bd79c09":"greet(23,23,1,4)","6049e04e":"No particular trend can be established between bmi and expenses","467c1998":"The highest correlation can be observed between expenses and age; smoker and age\nBMI and expenses display a good correlation too.\nLet us further use these to see how they perform to predict medical expenses.","a0aa3fa7":"The dataset has almost same number of people for each region, No trend can be established between different regions and expenses.","98f4abd9":"The trend above shows that medical expenses are lower with lesser age","175c2504":"Even though the data has way more number of non smokers than the number of smokers, it is observed that smokers have higher medical expenses, this feature would definitely be useful while predicting premium.","5e11ec03":"The number of persons having more than 3 children is comparatively lesser than those have less than 3 children, no trend is being observed that people with lesser children have lesser medical expense","fd0dd7f8":"We have almost similar counts of males and females in our dataset"}}