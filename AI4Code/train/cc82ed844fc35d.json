{"cell_type":{"23c10a07":"code","0bb716a7":"code","c3758cef":"code","532a0b40":"code","e5a5e358":"code","9cd984ed":"code","820f43ff":"code","c823be33":"code","4f5d135e":"code","6a1e8c22":"code","098dce09":"code","e70e63fc":"code","f8a0636a":"code","8a3b7b78":"code","1752e7e8":"code","a5df257a":"code","93741269":"code","6f669f51":"code","773fafdf":"code","c5503dc7":"code","1b3a4bd3":"markdown","c7ed0c1e":"markdown","e1202746":"markdown","28cdf284":"markdown","4c06089d":"markdown","541fb1d4":"markdown","933acb88":"markdown","ae58c6be":"markdown","80668490":"markdown","64881d47":"markdown","d35e6c3f":"markdown","ba920806":"markdown","9fe36fac":"markdown","52ed2080":"markdown","2f229b99":"markdown","1f5751a0":"markdown"},"source":{"23c10a07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bb716a7":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","c3758cef":"df.head(10)","532a0b40":"df.tail(10)","e5a5e358":"df.sample(10)","9cd984ed":"df.describe()","820f43ff":"df.info()","c823be33":"df[df['age'] > 50]","4f5d135e":"df[df['heart_disease'] ==1]","6a1e8c22":"df[df['hypertension'] == 0]","098dce09":"df[((df['age'] > 40) & (df['heart_disease'] == 1))]","e70e63fc":"df[((df['hypertension'] ==1) & (df['heart_disease'] == 0))]","f8a0636a":"null = df.isna().sum()\nprint(\"Number of null values in the dataset are: \", null)","8a3b7b78":"df.dropna()","1752e7e8":"df.fillna(0)","a5df257a":"df.fillna(method = \"ffill\")","93741269":"df.fillna(method = \"bfill\")","6f669f51":"df.fillna(df['bmi'].mean())","773fafdf":"df.fillna(df['bmi'].median())","c5503dc7":"df.fillna(df['bmi'].mode())","1b3a4bd3":"## Inspect the data frame with statistics","c7ed0c1e":"## Parse the row without NaN","e1202746":"#### 4. Displaying those rows that have heart disase and age greater than 40","28cdf284":"#### 4. Filling null value with mean of bmi column","4c06089d":"#### 2. Filling null values with forward fill","541fb1d4":"#### 5. Filling null value with median of bmi column","933acb88":"#### 5. Displaying those rows that have hypertension and no heart disease ","ae58c6be":"#### 6. Filling null value with mode of bmi column","80668490":"#### 2. Displaying those rows that have heart disease","64881d47":"## Parse the data frame or series using specific column and condition","d35e6c3f":"#### 3. Displaying the rows that do not have hypertension","ba920806":"#### 1. Displaying those rows that have age greater than 50","9fe36fac":"## Fill the missing data with default value, forward fill, backward fill, and with mean of the column","52ed2080":"#### 3. Filling null values with backward fill","2f229b99":"#### 1. Filling null values with default value 0","1f5751a0":"## Find Missing values from the dataset "}}