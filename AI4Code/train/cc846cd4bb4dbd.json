{"cell_type":{"cef21834":"code","fa2e735d":"code","4dee68f4":"code","e2b0a3cf":"code","29792916":"code","580f26b6":"code","b8ee6a5a":"code","70ea2ee4":"code","aa049b12":"code","f23e6c4f":"code","47146761":"code","00e1446c":"code","78107f2d":"code","7d462c6a":"code","36744b00":"code","177ea401":"code","85392b92":"code","e6897f93":"code","edb50624":"code","baad9ac5":"code","69410688":"code","360e6aff":"code","3329891f":"code","854441c8":"code","eb8ebf53":"code","7475e19c":"code","6f25bca9":"code","b2056df1":"code","0e363e60":"code","3c20f024":"code","df9ad9b1":"code","c1e40bee":"code","0d54c575":"code","838bb7de":"code","b4cf840e":"code","3471e56b":"code","3344a859":"code","a06b761d":"code","05d0ffc3":"code","46b64bb5":"code","cf8b5244":"code","ab7eafcd":"code","12e3e6a3":"code","0dda733e":"code","6b2589c5":"code","cd76f750":"code","4d32e107":"code","7d22f30f":"code","9f63b6b4":"code","2b723248":"code","b8e07571":"code","09eb59f2":"code","b5645228":"code","bf23a3b6":"code","4629e1f7":"code","67a20f50":"code","f5743197":"code","f6cfd1c5":"code","413d56e4":"code","b4ac2763":"code","847017eb":"code","42ab366b":"code","1a70e0d4":"code","153b61c5":"code","8270cd6b":"code","4dd3b783":"code","2e6c9abb":"code","307cdbda":"code","e943aafc":"code","71d2d3da":"code","9f3023fd":"code","347a170e":"code","8e7ae000":"code","6c19a32a":"code","0f6b43a8":"code","cf3105a9":"code","e0ca0100":"code","3859a791":"code","641d4493":"code","bff39677":"code","d0fc8a57":"code","b62caade":"code","0e5fa062":"code","911f9c42":"code","7d6f1941":"code","1a6c95ba":"code","48f53973":"code","1b197dc8":"code","e386c161":"code","0365a0ae":"code","0fceafc1":"code","053d1852":"code","c7bf766a":"code","d26c775f":"code","aa7afbdb":"code","a256219d":"code","381b1812":"code","fc806183":"code","457241d1":"code","4ae63555":"code","340037f1":"code","7c59ccba":"code","751e20c2":"code","63574ef1":"code","20aedbd6":"code","53f58736":"code","beae9db8":"code","f54b2e56":"markdown","6cd779c0":"markdown","8568311b":"markdown","f0d112c7":"markdown","d1a9e53c":"markdown","585c9a9b":"markdown","94b8694a":"markdown","4319b741":"markdown","863b003c":"markdown","2c24671c":"markdown","591531bc":"markdown","7405c0e5":"markdown","2f769138":"markdown","ec2c3ece":"markdown","7dcb6102":"markdown","53348dba":"markdown","0ca988d5":"markdown","7719b076":"markdown","664240eb":"markdown","a1d01b7e":"markdown","c799aedb":"markdown"},"source":{"cef21834":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom mpl_toolkits.mplot3d import Axes3D\nimport statsmodels.api as sm\nimport missingno as msno\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom scipy.stats import levene\nfrom scipy.stats import shapiro\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nimport xgboost as xgb\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nimport os\nimport os.path\nfrom pathlib import Path\nimport cv2\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils.np_utils import to_categorical ","fa2e735d":"filterwarnings(\"ignore\", category=DeprecationWarning) \nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","4dee68f4":"Mushroom = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")","e2b0a3cf":"data = Mushroom.copy()","29792916":"df = data.select_dtypes(include=[\"float64,int64,int32\"])","580f26b6":"data[\"stalk-root\"] = data[\"stalk-root\"].replace(\"?\",np.NaN)","b8ee6a5a":"data.rename(columns={\"cap-shape\":\"cap_shape\",\n                    \"cap-surface\":\"cap_surface\",\n                    \"cap-color\":\"cap_color\",\n                    \"gill-attachment\":\"gill_attachment\",\n                    \"gill-spacing\":\"gill_spacing\",\n                    \"gill-size\":\"gill_size\",\n                    \"gill-color\":\"gill_color\",\n                    \"stalk-shape\":\"stalk_shape\",\n                    \"stalk-root\":\"stalk_root\",\n                    \"stalk-surface-above-ring\":\"stalk_surface_above_ring\",\n                    \"stalk-surface-below-ring\":\"stalk_surface_below_ring\",\n                    \"stalk-color-below-ring\":\"stalk_color_below_ring\",\n                    \"stalk-color-above-ring\":\"stalk_color_above_ring\",\n                    \"veil-type\":\"veil_type\",\n                    \"veil-color\":\"veil_color\",\n                    \"veil-type\":\"veil_type\",\n                    \"ring-number\":\"ring_number\",\n                    \"ring-type\":\"ring_type\",\n                    \"spore-print-color\":\"spore_print_color\"},inplace=True)","70ea2ee4":"dataVisualization = data.copy()","aa049b12":"dataVisualization[\"class\"] = pd.Categorical(dataVisualization[\"class\"])\ndataVisualization[\"cap_shape\"] = pd.Categorical(dataVisualization[\"cap_shape\"])\ndataVisualization[\"cap_surface\"] = pd.Categorical(dataVisualization[\"cap_surface\"])\ndataVisualization[\"cap_color\"] = pd.Categorical(dataVisualization[\"cap_color\"])\ndataVisualization[\"bruises\"] = pd.Categorical(dataVisualization[\"bruises\"])\ndataVisualization[\"odor\"] = pd.Categorical(dataVisualization[\"odor\"])\ndataVisualization[\"gill_attachment\"] = pd.Categorical(dataVisualization[\"gill_attachment\"])\ndataVisualization[\"gill_spacing\"] = pd.Categorical(dataVisualization[\"gill_spacing\"])\ndataVisualization[\"gill_size\"] = pd.Categorical(dataVisualization[\"gill_size\"])\ndataVisualization[\"gill_color\"] = pd.Categorical(dataVisualization[\"gill_color\"])\ndataVisualization[\"stalk_shape\"] = pd.Categorical(dataVisualization[\"stalk_shape\"])\ndataVisualization[\"stalk_root\"] = pd.Categorical(dataVisualization[\"stalk_root\"])\ndataVisualization[\"stalk_surface_above_ring\"] = pd.Categorical(dataVisualization[\"stalk_surface_above_ring\"])\ndataVisualization[\"stalk_surface_below_ring\"] = pd.Categorical(dataVisualization[\"stalk_surface_below_ring\"])\ndataVisualization[\"stalk_color_above_ring\"] = pd.Categorical(dataVisualization[\"stalk_color_above_ring\"])\ndataVisualization[\"stalk_color_below_ring\"] = pd.Categorical(dataVisualization[\"stalk_color_below_ring\"])\ndataVisualization[\"veil_type\"] = pd.Categorical(dataVisualization[\"veil_type\"])\ndataVisualization[\"veil_color\"] = pd.Categorical(dataVisualization[\"veil_color\"])\ndataVisualization[\"ring_number\"] = pd.Categorical(dataVisualization[\"ring_number\"])\ndataVisualization[\"ring_type\"] = pd.Categorical(dataVisualization[\"ring_type\"])\ndataVisualization[\"spore_print_color\"] = pd.Categorical(dataVisualization[\"spore_print_color\"])\ndataVisualization[\"population\"] = pd.Categorical(dataVisualization[\"population\"])\ndataVisualization[\"habitat\"] = pd.Categorical(dataVisualization[\"habitat\"])","f23e6c4f":"print(data.head())","47146761":"print(data.shape)","00e1446c":"print(data.columns)","78107f2d":"print(data.info())","7d462c6a":"print(data.describe())","36744b00":"print(data[\"class\"].value_counts())","177ea401":"print(data[\"habitat\"].value_counts())","85392b92":"print(data[\"cap_surface\"].value_counts())","e6897f93":"print(data[\"population\"].value_counts())","edb50624":"print(data.where(data[\"population\"]==\"v\").count())","baad9ac5":"print(data.where(data[\"class\"]==\"e\").mode().value_counts())","69410688":"print(data.where(data[\"class\"]==\"p\").mode().value_counts())","360e6aff":"print(data.duplicated().sum())","3329891f":"print(data.isnull().all())","854441c8":"print(data.isnull().sum())","eb8ebf53":"msno.matrix(data,figsize=(10,8))\nplt.show()","7475e19c":"msno.bar(data,figsize=(10,8))\nplt.show()","6f25bca9":"data[\"stalk_root\"].fillna(data[\"stalk_root\"].mode()[0],inplace=True)","b2056df1":"print(data.isnull().sum())","0e363e60":"print(data.columns)","3c20f024":"encode = LabelEncoder()","df9ad9b1":"print(data[\"class\"].value_counts())\nprint(\"--\"*30)\ndata[\"class\"] = encode.fit_transform(data[\"class\"])\ndata[\"class\"] = data[\"class\"].astype(\"float32\")\nprint(data[\"class\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"cap_shape\"].value_counts())\nprint(\"--\"*30)\ndata[\"cap_shape\"] = encode.fit_transform(data[\"cap_shape\"])\ndata[\"cap_shape\"] = data[\"cap_shape\"].astype(\"float32\")\nprint(data[\"cap_shape\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"cap_surface\"].value_counts())\nprint(\"--\"*30)\ndata[\"cap_surface\"] = encode.fit_transform(data[\"cap_surface\"])\ndata[\"cap_surface\"] = data[\"cap_surface\"].astype(\"float32\")\nprint(data[\"cap_surface\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"cap_color\"].value_counts())\nprint(\"--\"*30)\ndata[\"cap_color\"] = encode.fit_transform(data[\"cap_color\"])\ndata[\"cap_color\"] = data[\"cap_color\"].astype(\"float32\")\nprint(data[\"cap_color\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"bruises\"].value_counts())\nprint(\"--\"*30)\ndata[\"bruises\"] = encode.fit_transform(data[\"bruises\"])\ndata[\"bruises\"] = data[\"bruises\"].astype(\"float32\")\nprint(data[\"bruises\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"odor\"].value_counts())\nprint(\"--\"*30)\ndata[\"odor\"] = encode.fit_transform(data[\"odor\"])\ndata[\"odor\"] = data[\"odor\"].astype(\"float32\")\nprint(data[\"odor\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"gill_attachment\"].value_counts())\nprint(\"--\"*30)\ndata[\"gill_attachment\"] = encode.fit_transform(data[\"gill_attachment\"])\ndata[\"gill_attachment\"] = data[\"gill_attachment\"].astype(\"float32\")\nprint(data[\"gill_attachment\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"gill_spacing\"].value_counts())\nprint(\"--\"*30)\ndata[\"gill_spacing\"] = encode.fit_transform(data[\"gill_spacing\"])\ndata[\"gill_spacing\"] = data[\"gill_spacing\"].astype(\"float32\")\nprint(data[\"gill_spacing\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"gill_size\"].value_counts())\nprint(\"--\"*30)\ndata[\"gill_size\"] = encode.fit_transform(data[\"gill_size\"])\ndata[\"gill_size\"] = data[\"gill_size\"].astype(\"float32\")\nprint(data[\"gill_size\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"gill_color\"].value_counts())\nprint(\"--\"*30)\ndata[\"gill_color\"] = encode.fit_transform(data[\"gill_color\"])\ndata[\"gill_color\"] = data[\"gill_color\"].astype(\"float32\")\nprint(data[\"gill_color\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"stalk_shape\"].value_counts())\nprint(\"--\"*30)\ndata[\"stalk_shape\"] = encode.fit_transform(data[\"stalk_shape\"])\ndata[\"stalk_shape\"] = data[\"stalk_shape\"].astype(\"float32\")\nprint(data[\"stalk_shape\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"stalk_root\"].value_counts())\nprint(\"--\"*30)\ndata[\"stalk_root\"] = encode.fit_transform(data[\"stalk_root\"])\ndata[\"stalk_root\"] = data[\"stalk_root\"].astype(\"float32\")\nprint(data[\"stalk_root\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"stalk_surface_above_ring\"].value_counts())\nprint(\"--\"*30)\ndata[\"stalk_surface_above_ring\"] = encode.fit_transform(data[\"stalk_surface_above_ring\"])\ndata[\"stalk_surface_above_ring\"] = data[\"stalk_surface_above_ring\"].astype(\"float32\")\nprint(data[\"stalk_surface_above_ring\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"stalk_surface_below_ring\"].value_counts())\nprint(\"--\"*30)\ndata[\"stalk_surface_below_ring\"] = encode.fit_transform(data[\"stalk_surface_below_ring\"])\ndata[\"stalk_surface_below_ring\"] = data[\"stalk_surface_below_ring\"].astype(\"float32\")\nprint(data[\"stalk_surface_below_ring\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"stalk_color_above_ring\"].value_counts())\nprint(\"--\"*30)\ndata[\"stalk_color_above_ring\"] = encode.fit_transform(data[\"stalk_color_above_ring\"])\ndata[\"stalk_color_above_ring\"] = data[\"stalk_color_above_ring\"].astype(\"float32\")\nprint(data[\"stalk_color_above_ring\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"stalk_color_below_ring\"].value_counts())\nprint(\"--\"*30)\ndata[\"stalk_color_below_ring\"] = encode.fit_transform(data[\"stalk_color_below_ring\"])\ndata[\"stalk_color_below_ring\"] = data[\"stalk_color_below_ring\"].astype(\"float32\")\nprint(data[\"stalk_color_below_ring\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"veil_type\"].value_counts())\nprint(\"--\"*30)\ndata[\"veil_type\"] = encode.fit_transform(data[\"veil_type\"])\ndata[\"veil_type\"] = data[\"veil_type\"].astype(\"float32\")\nprint(data[\"veil_type\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"veil_color\"].value_counts())\nprint(\"--\"*30)\ndata[\"veil_color\"] = encode.fit_transform(data[\"veil_color\"])\ndata[\"veil_color\"] = data[\"veil_color\"].astype(\"float32\")\nprint(data[\"veil_color\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"ring_number\"].value_counts())\nprint(\"--\"*30)\ndata[\"ring_number\"] = encode.fit_transform(data[\"ring_number\"])\ndata[\"ring_number\"] = data[\"ring_number\"].astype(\"float32\")\nprint(data[\"ring_number\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"ring_type\"].value_counts())\nprint(\"--\"*30)\ndata[\"ring_type\"] = encode.fit_transform(data[\"ring_type\"])\ndata[\"ring_type\"] = data[\"ring_type\"].astype(\"float32\")\nprint(data[\"ring_type\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"spore_print_color\"].value_counts())\nprint(\"--\"*30)\ndata[\"spore_print_color\"] = encode.fit_transform(data[\"spore_print_color\"])\ndata[\"spore_print_color\"] = data[\"spore_print_color\"].astype(\"float32\")\nprint(data[\"spore_print_color\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"population\"].value_counts())\nprint(\"--\"*30)\ndata[\"population\"] = encode.fit_transform(data[\"population\"])\ndata[\"population\"] = data[\"population\"].astype(\"float32\")\nprint(data[\"population\"].value_counts())\nprint(\"-----\"*30)\n#\nprint(data[\"habitat\"].value_counts())\nprint(\"--\"*30)\ndata[\"habitat\"] = encode.fit_transform(data[\"habitat\"])\ndata[\"habitat\"] = data[\"habitat\"].astype(\"float32\")\nprint(data[\"habitat\"].value_counts())\nprint(\"-----\"*30)\n#","c1e40bee":"print(data.info())","0d54c575":"DataForA = data.copy()","838bb7de":"clf = LocalOutlierFactor()","b4cf840e":"clf.fit_predict(DataForA)","3471e56b":"score = clf.negative_outlier_factor_","3344a859":"sortedscore = np.sort(score)\nprint(sortedscore[0:100])","a06b761d":"print(data.corr())","05d0ffc3":"corrPearson = data.corr(method=\"pearson\")\ncorrSpearman = data.corr(method=\"spearman\")","46b64bb5":"figure = plt.figure(figsize=(20,8))\nsns.heatmap(corrPearson,vmin=-1,center=0,vmax=1,annot=True)\nplt.title(\"PEARSON\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","cf8b5244":"figure = plt.figure(figsize=(20,8))\nsns.heatmap(corrSpearman,vmin=-1,center=0,vmax=1,annot=True)\nplt.title(\"SPEARMAN\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","ab7eafcd":"data.drop(\"veil_type\",inplace=True,axis=1)","12e3e6a3":"print(data.cov())","0dda733e":"covv = data.cov()","6b2589c5":"figure = plt.figure(figsize=(20,8))\nsns.heatmap(covv,vmin=-1,center=0,vmax=1,annot=True)\nplt.title(\"COVARIANCE\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()","cd76f750":"for i in data.columns:\n    print(i)\n    print(\"---\"*10)\n    print(\"%.4f-%.4f\" % shapiro(data[i]))\n    print(\"---\"*30)","4d32e107":"print(\"%.4f-%.4f\" % levene(data[\"class\"],data[\"population\"]))","7d22f30f":"print(\"%.4f-%.4f\" % levene(data[\"class\"],data[\"ring_type\"]))","9f63b6b4":"print(\"%.4f-%.4f\" % levene(data[\"class\"],data[\"habitat\"]))","2b723248":"print(\"%.4f-%.4f\" % levene(data[\"class\"],data[\"odor\"]))","b8e07571":"data.hist(figsize=(25,14))\nplt.show()","09eb59f2":"figure = plt.figure(figsize=(10,5))\nsns.countplot(dataVisualization[\"class\"])\nplt.show()","b5645228":"figure = plt.figure(figsize=(10,5))\nsns.countplot(dataVisualization[\"population\"])\nplt.show()","bf23a3b6":"figure = plt.figure(figsize=(10,5))\nsns.countplot(dataVisualization[\"habitat\"])\nplt.show()","4629e1f7":"figure = plt.figure(figsize=(10,5))\nsns.countplot(dataVisualization[\"odor\"])\nplt.show()","67a20f50":"figure = plt.figure(figsize=(15,8))\nsns.pairplot(data,hue=\"class\",vars=[\"habitat\",\"population\",\"ring_type\"])\nplt.show()","f5743197":"figure = plt.figure(figsize=(15,8))\nsns.lmplot(x=\"ring_type\",y=\"population\",hue=\"class\",data=data)\nplt.show()","f6cfd1c5":"figure = plt.figure(figsize=(15,8))\nsns.barplot(x=\"ring_type\",y=\"population\",hue=\"class\",data=data)\nplt.show()","413d56e4":"figure = plt.figure(figsize=(15,8))\nsns.barplot(x=\"ring_number\",y=\"cap_shape\",hue=\"class\",data=data)\nplt.show()","b4ac2763":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"habitat\",y=\"population\",hue=\"class\",data=dataVisualization)\nplt.show()","847017eb":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"cap_color\",y=\"population\",hue=\"class\",data=dataVisualization)\nplt.show()","42ab366b":"figure = plt.figure(figsize=(15,8))\nsns.lineplot(x=\"bruises\",y=\"population\",hue=\"class\",data=dataVisualization)\nplt.show()","1a70e0d4":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"class\",y=\"habitat\",data=data)\nplt.show()","153b61c5":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"class\",y=\"ring_type\",data=data)\nplt.show()","8270cd6b":"figure = plt.figure(figsize=(15,8))\nsns.boxplot(x=\"class\",y=\"veil_color\",data=data)\nplt.show()","4dd3b783":"plt.style.use('dark_background')\nfigure = plt.figure(figsize=(15,8))\nsns.histplot(\n    dataVisualization,\n    x=\"population\", hue=\"class\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n)\nplt.show()","2e6c9abb":"plt.style.use('dark_background')\nfigure = plt.figure(figsize=(15,8))\nsns.histplot(\n    dataVisualization,\n    x=\"habitat\", hue=\"class\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n)\nplt.show()","307cdbda":"plt.style.use('dark_background')\nfigure = plt.figure(figsize=(15,8))\nsns.histplot(\n    dataVisualization,\n    x=\"bruises\", hue=\"class\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n)\nplt.show()","e943aafc":"plt.style.use('grayscale')\ng = sns.JointGrid(data=data, x=\"gill_size\", y=\"habitat\", hue=\"class\",space=0)\ng.plot_joint(sns.kdeplot,cmap=\"rocket\")\nplt.show()","71d2d3da":"plt.style.use('seaborn-pastel')\ng = sns.JointGrid(data=data, x=\"ring_type\", y=\"population\", hue=\"class\",space=0)\ng.plot_joint(sns.kdeplot,cmap=\"rocket\")\nplt.show()","9f3023fd":"plt.style.use('default')\ndataVisualization['class'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(5,5))\nplt.show()","347a170e":"plt.style.use('default')\ndataVisualization['population'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(5,5))\nplt.show()","8e7ae000":"plt.style.use('default')\ndataVisualization['gill_size'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(5,5))\nplt.show()","6c19a32a":"plt.style.use('default')\ndataVisualization['stalk_root'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(5,5))\nplt.show()","0f6b43a8":"x = data.drop(\"class\",axis=1)\ny = data[\"class\"]","cf3105a9":"print(x.head())","e0ca0100":"print(y)","3859a791":"xTrain,xTest,yTrain,yTest = train_test_split(x,y,test_size=0.2,random_state=42,shuffle=True)","641d4493":"lj = LogisticRegression(solver=\"liblinear\").fit(xTrain,yTrain)\ngnb = GaussianNB().fit(xTrain,yTrain)\nknnc = KNeighborsClassifier().fit(xTrain,yTrain)\ncartc = DecisionTreeClassifier(random_state=42).fit(xTrain,yTrain)\nrfc = RandomForestClassifier(random_state=42,verbose=False).fit(xTrain,yTrain)\ngbmc = GradientBoostingClassifier(verbose=False).fit(xTrain,yTrain)\nxgbc = XGBClassifier().fit(xTrain,yTrain)\nlgbmc = LGBMClassifier().fit(xTrain,yTrain)\ncatbc = CatBoostClassifier(verbose=False).fit(xTrain,yTrain)","bff39677":"modelsc = [lj,gnb,knnc,cartc,rfc,gbmc,xgbc,lgbmc,catbc]","d0fc8a57":"for model in modelsc:\n    name = model.__class__.__name__\n    predict = model.predict(xTest)\n    R2CV = cross_val_score(model,xTest,yTest,cv=10,verbose=False).mean()\n    error = -cross_val_score(model,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\",verbose=False).mean()\n    print(name + \": \")\n    print(\"-\" * 10)\n    print(\"ACC-->\",accuracy_score(yTest,predict))\n    print(\"R2CV-->\",R2CV)\n    print(\"MEAN SQUARED ERROR-->\",np.sqrt(error))\n    print(\"-\" * 30)","b62caade":"r = pd.DataFrame(columns=[\"MODELS\",\"R2CV\"])\nfor model in modelsc:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,xTest,yTest,cv=10,verbose=False).mean()\n    result = pd.DataFrame([[name,R2CV*100]],columns=[\"MODELS\",\"R2CV\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"R2CV\",y=\"MODELS\",data=r,color=\"k\")\nplt.xlabel(\"R2CV\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,100)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","0e5fa062":"for model in modelsc:\n    name = model.__class__.__name__\n    error = -cross_val_score(model,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\n    result = pd.DataFrame([[name,np.sqrt(error)]],columns=[\"MODELS\",\"error\"])\n    r = r.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"error\",y=\"MODELS\",data=r,color=\"r\")\nplt.xlabel(\"ERROR\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,2)\nplt.title(\"MODEL ERROR COMPARISON\")\nplt.show()","911f9c42":"predictDesicionTree = cartc.predict(xTest)","7d6f1941":"figure = plt.figure(figsize=(18,10))\nsns.heatmap(confusion_matrix(yTest,predictDesicionTree), annot=True,cmap=\"PiYG\",linewidths=2, linecolor='black')\nplt.show()","1a6c95ba":"predictprobaDecision = cartc.predict_proba(xTest)","48f53973":"print(predictprobaDecision)","1b197dc8":"x = np.asarray(x)","e386c161":"print(x)","0365a0ae":"y = np.asarray(y)","0fceafc1":"print(y)","053d1852":"print(\"x SHAPE:\",x.shape)\nprint(\"y SHAPE:\",y.shape)","c7bf766a":"x = x.reshape(8124,7,3)","d26c775f":"xATrain,xATest,yATrain,yATest = train_test_split(x,y,train_size=0.9,shuffle=True,random_state=42)","aa7afbdb":"print(xATrain.shape)\nprint(xATest.shape)","a256219d":"ANNmodel = tf.keras.models.Sequential([\n  # inputs \n  tf.keras.layers.experimental.preprocessing.Rescaling(1.\/255),\n  tf.keras.layers.Flatten(input_shape=(7311,)),\n  # hiddens layers\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(32, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  # output layer\n  tf.keras.layers.Dense(2,activation=\"softmax\")\n])","381b1812":"lossfunc = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)","fc806183":"Callback = tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=3)","457241d1":"ANNmodel.compile(optimizer='rmsprop', loss=lossfunc, metrics=['accuracy'])","4ae63555":"MainModel = ANNmodel.fit(xTrain, yTrain,epochs=30, batch_size=5 ,callbacks=Callback ,validation_data=(xTest,yTest))","340037f1":"result_Model = ANNmodel.evaluate(xTest,yTest)","7c59ccba":"print(ANNmodel.summary())","751e20c2":"plt.plot(MainModel.history[\"accuracy\"])\nplt.plot(MainModel.history[\"val_accuracy\"])\nplt.ylabel(\"ACC\")\nplt.legend()\nplt.show()","63574ef1":"plt.plot(MainModel.history[\"loss\"])\nplt.plot(MainModel.history[\"val_loss\"])\nplt.ylabel(\"ACC\")\nplt.legend()\nplt.show()","20aedbd6":"HistoryDict = MainModel.history\n\nval_losses = HistoryDict[\"val_loss\"]\nval_acc = HistoryDict[\"val_accuracy\"]\nacc = HistoryDict[\"accuracy\"]\nlosses = HistoryDict[\"loss\"]\nepochs = range(1,len(val_losses)+1)","53f58736":"plt.plot(epochs,val_losses,\"bo\",label=\"LOSS\")\nplt.plot(epochs,val_acc,\"r\",label=\"ACCURACY\")\nplt.title(\"LOSS & ACCURACY\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"Loss & Acc\")\nplt.legend()\nplt.show()","beae9db8":"plt.plot(epochs,val_losses,\"bo\",label=\"LOSS VAL\")\nplt.plot(epochs,val_acc,\"r\",label=\"ACCURACY VAL\")\nplt.title(\"LOSS VAL & ACCURACY VAL\")\nplt.xlabel(\"EPOCH\")\nplt.ylabel(\"LOSS VAL & ACCURACY VAL\")\nplt.legend()\nplt.show()","f54b2e56":"# PACKAGES AND LIBRARIES","6cd779c0":"#### HOMOGENEITY","8568311b":"#### CORRELATION","f0d112c7":"#### NORMALITY","d1a9e53c":"# EXPLORATORY DATA ANALYSIS","585c9a9b":"# HISTORY","94b8694a":"#### IGNORING WARNINGS","4319b741":"#### COVARIANCE","863b003c":"# ANN ","2c24671c":"# DATA PROCESS","591531bc":"# SKLEARN MODELS","7405c0e5":"#### FILLING","2f769138":"* **class**: edible=e, poisonous=p\n* **cap-shape**: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n* **cap-surface**: fibrous=f,grooves=g,scaly=y,smooth=s\n* **cap-color**: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n* **bruises**: bruises=t,no=f\n* **odor**: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n* **gill-attachment**: attached=a,descending=d,free=f,notched=n\n* **gill-spacing**: close=c,crowded=w,distant=d\n* **gill-size**: broad=b,narrow=n\n* **gill-color**: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n* **stalk-shape**: enlarging=e,tapering=t\n* **stalk-root**: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n* **stalk-surface-above-ring**: fibrous=f,scaly=y,silky=k,smooth=s\n* **stalk-surface-below-ring**: fibrous=f,scaly=y,silky=k,smooth=s\n* **stalk-color-above-ring**: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* **stalk-color-below-ring**: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* **veil-type**: partial=p,universal=u\n* **veil-color**: brown=n,orange=o,white=w,yellow=y\n* **ring-number**: none=n,one=o,two=t\n* **ring-type**: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n* **spore-print-color**: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n* **population**: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n* **habitat**: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","ec2c3ece":"# VISUALIZATION","7dcb6102":"#### DEPENDENT AND INDEPENDENT VARIABLES","53348dba":"# MISSING VALUES","0ca988d5":"# CORRELATION - COVARIANCE - NORMALITY - HOMOGENEITY","7719b076":"# OUTLIER PROCESS","664240eb":"#### VISUALIZATION","a1d01b7e":"# TRANSFORMATION - ENCODING","c799aedb":"# DATA"}}