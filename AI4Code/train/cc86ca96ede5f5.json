{"cell_type":{"c409a1fa":"code","89f6fcb9":"code","bfb62d5b":"code","3cce6b81":"code","9bf01258":"code","c435c1fb":"code","a90f21c5":"code","afd9efe4":"code","2d9d0ac9":"code","8db7042e":"code","a41500eb":"code","c090249d":"code","b958d8d1":"code","1e7ece9e":"code","18035957":"code","e6ac31fd":"code","1ac88461":"code","3f693539":"code","733a9afb":"code","ffa62666":"code","b06e003d":"code","46f8d863":"code","624a89d6":"code","a5dfa19d":"code","2e3d1ace":"code","8dd563cc":"code","2ae9e9ca":"code","0f49148c":"code","bb82fccc":"code","fed225d4":"code","4f9cfd57":"code","129daede":"code","39805563":"code","04d7003e":"code","ee49396b":"code","4332f162":"code","feed7325":"code","33ec4283":"code","df52ffdf":"code","8881a7c6":"code","c305ddb1":"code","39c4d286":"code","b5e94341":"code","fed4855c":"code","40bf205e":"code","a64683dc":"code","5c4b4ea2":"code","e3eb45dd":"code","4349242d":"markdown","eba38d94":"markdown","954abfcd":"markdown","1c6b75a5":"markdown","22c6f8a0":"markdown","776b4953":"markdown","210563da":"markdown","711f5fde":"markdown","677e4467":"markdown","7a1caa26":"markdown","bfde84e9":"markdown","058e8bed":"markdown","10b08015":"markdown","4546ecb4":"markdown","85bf0df0":"markdown","f578966b":"markdown","087aa503":"markdown","7f43ae0a":"markdown","45605815":"markdown","d6d85abf":"markdown","bf9e47dc":"markdown","e1e6e9ac":"markdown","53fc79dd":"markdown","ad7a0dfc":"markdown","8d712c95":"markdown","0f15765b":"markdown","f936fa6d":"markdown","74fb1f0a":"markdown","d765cf69":"markdown","5305f779":"markdown","80592b38":"markdown","347cfa34":"markdown","c5fb103a":"markdown","76a913a2":"markdown","ebae6188":"markdown","71c80954":"markdown","e4de2849":"markdown","3c2dcc53":"markdown","1f997dea":"markdown","cd99f2da":"markdown","b0e778ad":"markdown","216f320d":"markdown","227d702f":"markdown","3340b200":"markdown","63da49de":"markdown","cf24db2f":"markdown","1698dde3":"markdown"},"source":{"c409a1fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport soundfile as sf\nimport librosa.feature\nimport librosa.display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport IPython.display as ipd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","89f6fcb9":"def imprime_rms_segundos(sound,sr):\n    segundos_musica=[]\n    for segundo in range(0,int(len(sound)\/sr)): #o tamanho de sound dividido pelo samplerate da a quantidade de segundos da musica\n        segundo_musica=sound[(segundo-1)*sr:segundo*sr]\n        segundos_musica.append(segundo_musica)\n    segundos_musica.pop(0)#tirar o segundo 0 que \u00e9 vazio\n    rms_de_cada_segundo=[]\n    for segundo_musica in segundos_musica:\n        rms_medio_do_segundo=librosa.feature.rms(segundo_musica).mean()\n        rms_de_cada_segundo.append(rms_medio_do_segundo)\n    plt.plot(rms_de_cada_segundo)\n    plt.xlabel('segundo')\n    plt.ylabel('RMS')\n    plt.show() \n","bfb62d5b":"#lendo a musica:\nvision,rate_vision=librosa.load(\"\/kaggle\/input\/vision-elektronomia\/Elektronomia - vision (Free Download) - from YouTube (2) (online-audio-converter.com).wav\")","3cce6b81":"#ouvindo a musica:\nipd.Audio(vision,rate=rate_vision)","9bf01258":"#imprimindo o vetor de rms_medio dos segundos:\nimprime_rms_segundos(vision,rate_vision)","c435c1fb":"#lendo a musica:\nfade,rate_fade=librosa.load(\"\/kaggle\/input\/vision-elektronomia\/Alan Walker - Fade NCS Release (online-audio-converter.com).wav\")","a90f21c5":"#ouvindo a musica:\nipd.Audio(fade,rate=rate_fade)","afd9efe4":"#imprimindo o vetor de rms_medio dos segundos:\nimprime_rms_segundos(fade,rate_fade)","2d9d0ac9":"#lendo a musica:\nanimals,rate_animals=librosa.load(\"\/kaggle\/input\/vision-elektronomia\/Martin Garrix - Animals (Official Video) (online-audio-converter.com).wav\")","8db7042e":"#ouvindo a musica:\nipd.Audio(animals,rate=rate_animals)","a41500eb":"#vou tirar os primeiros 5 segundos de musica q o cara fala \"spining tv\"\nanimals=animals[5*rate_animals:]\n#imprimindo o vetor de rms_medio dos segundos:\nimprime_rms_segundos(animals,rate_animals)","c090249d":"musicas=[(\"vision\",vision,rate_vision), (\"fade\",fade,rate_fade), (\"animals\",animals,rate_animals)]","b958d8d1":"def divide_musica(sound, samplerate):\n    \n    #dividir a musica em segundos e calcular as features de pra cada segundo\n    window=np.array_split(sound,np.shape(sound)[0]\/\/samplerate)\n    features = np.zeros(14)\n    for segundo in window:\n        flatness = librosa.feature.spectral_flatness(y=segundo)\n        rms = librosa.feature.rms(segundo)\n        roll = librosa.feature.spectral_rolloff(segundo)\n        mfcc = librosa.feature.mfcc(y=segundo,sr=samplerate,n_mfcc=5)\n        mfcc = mfcc[1:,:]\n        f = np.hstack([flatness.mean(axis=1), flatness.std(axis=1), rms.mean(axis=1), rms.std(axis=1), roll.mean(axis=1), roll.std(axis=1), mfcc.mean(axis=1), mfcc.std(axis=1)])\n        features = np.vstack([features,  f]) \n    features = features[1:,:]\n    \n    #normalizar as features\n    scl = StandardScaler()\n    scl.fit(features)\n    X = scl.transform(features)\n    \n    #aplicar o modelo\n    n_clusters=6\n    model = KMeans(n_clusters=n_clusters, random_state=42) # criando um modelo que vai gerar 4 clusters\n    model.fit(X) # Treinando o modelo \n    \n    #aplicar viterbi para corrigir trocas equivocadas\n    clusters = model.transform(X)\n    P = (1\/(10**-6 + clusters)) \/ np.sum(1\/(10**-6 + clusters), axis=1, keepdims=1)\n    def transition_matrix(ndim, p_stay):\n      T = np.ones ( (ndim, ndim)) * ((1-p_stay)\/(ndim-1))\n      T *= 1-np.eye(ndim)\n      T += np.eye(ndim)*p_stay\n      return T\n    T = transition_matrix(n_clusters, .9)\n    states = librosa.sequence.viterbi(P.T, T)\n    changes = np.where(states[:-1] != states[1:])[0] #matriz de segundos de transi\u00e7\u00e3o\n    \n    #montar lista de retorno\n    retorno=[(0,(states[-1],states[1]))]\n    for segundo in changes:\n        retorno.append((segundo,(states[segundo-1],states[segundo+1])))\n    return retorno\n","1e7ece9e":"for name,sound,samplerate in musicas:\n    print(name+':',divide_musica(sound, samplerate))\n","18035957":"#vamos repartir a musica e salvar num dicionario\nmusicas_partidas={}\nfor name,sound,samplerate in musicas:\n    mudancas=divide_musica(sound, samplerate)\n    for posicao in range(len(mudancas)-1):\n        musicas_partidas[name+str(mudancas[posicao][1][1])]=[]\n    for posicao in range(len(mudancas)-1):\n        musicas_partidas[name+str(mudancas[posicao][1][1])].append(sound[mudancas[posicao][0]*samplerate:mudancas[posicao+1][0]*samplerate])\n","e6ac31fd":"#vamos plotar as reparti\u00e7oes:    \nfor key in musicas_partidas:\n    for num in range(len(musicas_partidas[key])):\n        plt.plot(musicas_partidas[key][num])\n        plt.xlabel(key+\"_\"+str(num))\n        plt.ylabel(\"intensidade\")\n        plt.show()","1ac88461":"#salvar os rms medios em um dicionario com mesmos keys de musicas_partidas\n#fazer isso calculando rms.mean() de cada musica nos values do dicionario e depois calculando a media deles\nrms_means={}\nfor key in musicas_partidas:\n    rms_mean=0\n    contador=0\n    for musica in musicas_partidas[key]:\n        rms_mean+=librosa.feature.rms(musica).mean()\n        contador+=1\n    rms_mean=rms_mean\/contador\n    rms_means[key]=rms_mean\nprint(rms_means)\n    \n","3f693539":"keys=musicas_partidas.keys()\nrms_vision=[]\nrms_fade=[]\nrms_animals=[]\nfor key in keys:\n    if 'vision' in key:\n        rms_vision.append(rms_means[key])\n    if 'fade' in key:\n        rms_fade.append(rms_means[key])\n    if 'animals' in key:\n        rms_animals.append(rms_means[key])\nrms_vision.sort()\nrms_fade.sort()\nrms_animals.sort()\nprint(rms_vision,rms_fade,rms_animals)","733a9afb":"builds_fade=[]\nbuilds_animals=[]\n\nfor key in musicas_partidas:\n    if rms_means[key]==rms_vision[0]:\n        intros_vision=musicas_partidas[key]\n    if rms_means[key]==rms_fade[0]:\n        intros_fade=musicas_partidas[key]\n    if rms_means[key]==rms_animals[0]:\n        intros_animals=musicas_partidas[key]\n    if rms_means[key]==rms_vision[1]:\n        breakdowns_vision=musicas_partidas[key]\n    if rms_means[key]==rms_fade[1]:\n        breakdowns_fade=musicas_partidas[key]\n    if rms_means[key]==rms_animals[1]:\n        breakdowns_animals=musicas_partidas[key] \n    if rms_means[key]==rms_vision[2]:\n        builds_vision=musicas_partidas[key]\n    if rms_means[key]==rms_fade[2] or rms_means[key]==rms_fade[3]: #ALERTA DE GAMBIARRA\n        builds_fade+=musicas_partidas[key]\n    if rms_means[key]==rms_animals[2] or rms_means[key]==rms_animals[3]:\n        builds_animals+=musicas_partidas[key]\n    if rms_means[key]==rms_vision[3]:\n        drops_vision=musicas_partidas[key]\n    if rms_means[key]==rms_fade[4]:\n        drops_fade=musicas_partidas[key]\n    if rms_means[key]==rms_animals[4]:\n        drops_animals=musicas_partidas[key] \n","ffa62666":"print('vision:',len(intros_vision))\nprint('fade:',len(intros_fade))\nprint('animals:',len(intros_animals))\n","b06e003d":"ipd.Audio(intros_vision[0],rate=samplerate)","46f8d863":"ipd.Audio(intros_vision[1],rate=samplerate)","624a89d6":"ipd.Audio(intros_fade[0],rate=samplerate)","a5dfa19d":"ipd.Audio(intros_fade[1],rate=samplerate)","2e3d1ace":"ipd.Audio(intros_animals[0],rate=samplerate)","8dd563cc":"print('vision:',len(breakdowns_vision))\nprint('fade:',len(breakdowns_fade))\nprint('animals:',len(breakdowns_animals))","2ae9e9ca":"ipd.Audio(breakdowns_vision[0],rate=samplerate)","0f49148c":"ipd.Audio(breakdowns_vision[1],rate=samplerate)","bb82fccc":"ipd.Audio(breakdowns_fade[0],rate=samplerate)","fed225d4":"ipd.Audio(breakdowns_fade[1],rate=samplerate)","4f9cfd57":"ipd.Audio(breakdowns_animals[0],rate=samplerate)","129daede":"ipd.Audio(breakdowns_animals[1],rate=samplerate)","39805563":"print('vision:',len(builds_vision))\nprint('fade:',len(builds_fade))\nprint('animals:',len(builds_animals))","04d7003e":"ipd.Audio(builds_vision[0],rate=samplerate)","ee49396b":"ipd.Audio(builds_vision[1],rate=samplerate)","4332f162":"ipd.Audio(builds_fade[0],rate=samplerate)","feed7325":"ipd.Audio(builds_fade[1],rate=samplerate)","33ec4283":"ipd.Audio(builds_fade[2],rate=samplerate)","df52ffdf":"ipd.Audio(builds_animals[0],rate=samplerate)","8881a7c6":"ipd.Audio(builds_animals[1],rate=samplerate)","c305ddb1":"ipd.Audio(builds_animals[2],rate=samplerate)","39c4d286":"ipd.Audio(builds_animals[3],rate=samplerate)","b5e94341":"print('vision:',len(drops_vision))\nprint('fade:',len(drops_fade))\nprint('animals:',len(drops_animals))","fed4855c":"ipd.Audio(drops_vision[0],rate=samplerate)","40bf205e":"ipd.Audio(drops_vision[1],rate=samplerate)","a64683dc":"ipd.Audio(drops_fade[0],rate=samplerate)","5c4b4ea2":"ipd.Audio(drops_fade[1],rate=samplerate)","e3eb45dd":"ipd.Audio(drops_animals[0],rate=samplerate)","4349242d":"![image.png](attachment:image.png)","eba38d94":"Animals build 3","954abfcd":"Vision build 1","1c6b75a5":"Fade drop 1","22c6f8a0":"Animals intro 0","776b4953":"# VAMOS APLICAR O K-MEANS","210563da":"Fade Breakdown 0","711f5fde":"# BREAKDOWNS:","677e4467":"# Breve Teoria sobre EDM","7a1caa26":"# **INTROS**:","bfde84e9":"# HORA DE IDENTIFICAR O QUE CADA PARTE \u00c9","058e8bed":"Vision drop 0","10b08015":"Fade intro 1","4546ecb4":"Fade intro 0","85bf0df0":"Fade Breakdown 1","f578966b":"# Para as musicas que temos vamos perceber esse padr\u00e3o","087aa503":"Vision Breakdown 0","7f43ae0a":"Para essa an\u00e1lise vamos identificar padr\u00f5es na musica Vision do\/da artista Elektronomia, na m\u00fasica Fade do artista Alan Walker e na m\u00fasica Animals do artista Martin Garrix","45605815":"**Vamos ent\u00e3o dividir as musicas em partes conforme a classifica\u00e7\u00e3o em clusters do Kmeans e salvar as repartic\u00f5es da musica em um dicion\u00e1rio em que os keys s\u00e3o o nome da musica concatenado com o n\u00famero do est\u00e1gio dela.**","d6d85abf":"* Vision:","bf9e47dc":"Animals build 0","e1e6e9ac":"Fade drop 0","53fc79dd":"Animals build 2","ad7a0dfc":"# DROPS","8d712c95":"Fade build 0","0f15765b":"**Normalmente as m\u00fasicas s\u00e3o assim:**","f936fa6d":"Animals Breakdown 0","74fb1f0a":"A ideia \u00e9 divdir a musica em segundos e calcular o rms m\u00e9dio de cada segundo e ir concatenando os rms medios dos segundos em um array e por fim plot\u00e1-lo. Isso ser\u00e1 feito numa fun\u00e7\u00e3o: ","d765cf69":"![image.png](attachment:image.png)\n","5305f779":"Temos as partes das musicas separadas e salvas em um dicion\u00e1rio. Agora precisamos identificar o que \u00e9 intro, breakdown, build e drop em cada musica. Por simplifica\u00e7\u00e3o faremos isso com a feature rms que informa a intensidade da musica. A ideia \u00e9 que \n* RMS(intro)<RMS(breakdown)<RMS(build)<RMS(drop). ","80592b38":"Animals drop 0","347cfa34":"Vision drop 1","c5fb103a":"Vision Breakdown 1","76a913a2":"Vision build 0","ebae6188":"Vison intro 1","71c80954":"* Fade:\n","e4de2849":"Fade build 2","3c2dcc53":"Animals Breakdown 1","1f997dea":"Vision intro 0","cd99f2da":"Faremos uma fun\u00e7\u00e3o que recebe as musicas e os samplerates e retorna uma lista de tuplas com os segundos de transi\u00e7\u00e3o de est\u00e1gio da musica e uma tupla com os est\u00e1gios anterior e posterior respectivamente (ver se \u00e9 isso mesmo)","b0e778ad":"Utilizando oq foi feito no notebook 5 (k-means e viterbi) vamos dividir todas as musicas em 4 partes: \n* intro\n* breakdown\n* build\n* drop\n\nPara isso, ser\u00e1 conveniente colocar as musicas numa lista com seus respectivos samplerates.","216f320d":"Fade build 1","227d702f":"* Animals","3340b200":"**Existem 4 partes na musica**","63da49de":"Animals build 1","cf24db2f":"# BUILDS","1698dde3":"Visualia\u00e7\u00e3o r\u00e1pida do que a fun\u00e7\u00e3o divide_musica faz:\n"}}