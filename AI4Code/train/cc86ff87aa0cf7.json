{"cell_type":{"202c4958":"code","34e751b7":"code","5e517eb4":"code","e6fba0bc":"code","f9b3add4":"code","3d5f5e18":"code","0e66d2ac":"code","05e9b45a":"markdown","2877b852":"markdown","de8eeb33":"markdown","701c56be":"markdown","5fc10127":"markdown","4207e511":"markdown","f6d83c41":"markdown"},"source":{"202c4958":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns ; sns.set()\n\nimport os\nos.chdir(\"..\/input\/french-monopoly\")\n\ndf=pd.read_csv('French_Monopoly.csv')","34e751b7":"from random import randint\nfrom collections import Counter\n\njail_case_number = 30\ndef new_movement(initial_position):\n    new_position = initial_position + randint(1,6)\n    new_position = new_position % 40\n    if new_position == jail_case_number : \n        new_position = 10\n    return new_position\n    \ndef game(throw_number_of_dice):\n    historic_position = [0]\n    position = 0         #Start\n    for i in range(throw_number_of_dice+1):\n        position = new_movement(position)\n        historic_position.append(position)\n    dict_number_per_case = Counter(historic_position)\n    case = range(len(dict_number_per_case))\n    number_per_case = []\n    for index in range(len(dict_number_per_case)):\n        number_per_case.append(dict_number_per_case[index])\n    return case, number_per_case\n    \ndef study(number_of_games, throw_number_of_dice):\n    for games in range(number_of_games):\n        case, number_per_case = game(throw_number_of_dice)\n        plt.plot(case, number_per_case,'o')\n    plt.title(\"On which case do we fall in Monopoly ?\")\n    plt.show()\n    \nnumber_of_games = 5\nthrow_number_of_dice = 10000\nstudy(number_of_games, throw_number_of_dice)","5e517eb4":"study(number_of_games,50000)","e6fba0bc":"df.head(10)","f9b3add4":"b=df.loc[df.Property.isin([\"Lecourbe\",\"Republique\",\"Paradis\",\"Pigalle\",\"Henri_Martin\",\"La_Fayette\",\"Capucines\",\"Paix\"])]\nb.head()","3d5f5e18":"order=[\"House_0\",\"House_1\",\"House_2\",\"House_3\",\"House_4\",\"Hotel\"]\nplt.xticks(range(len(order)),order)\n\nfor i in range(b.shape[0]):\n    plt.plot(list(b.iloc[i,1:7]),c=b.Color.iloc[i])\n    plt.plot(list(b.iloc[i,1:7]),'o',label=b.iloc[i,0],c=b.Color.iloc[i])\nplt.title(\"Money earned in 1 passage in function of the number of houses\")\nplt.legend()\nplt.show()","0e66d2ac":"plt.xticks(range(len(order)),order)\n\nfor i in range(b.shape[0]):\n    z=list(b.iloc[i,1:7])\n    Y=[z[0]-b.Price.iloc[i],z[1]-b.House_Price.iloc[i]-b.Price.iloc[i],z[2]-2*b.House_Price.iloc[i]-b.Price.iloc[i], z[3]-3*b.House_Price.iloc[i]-b.Price.iloc[i],z[4]-4*b.House_Price.iloc[i]-b.Price.iloc[i],z[5]-5*b.House_Price.iloc[i]-b.Price.iloc[i]]\n    plt.plot(Y,c=b.Color.iloc[i])\n    plt.plot(Y,'o',label=b.iloc[i,0],c=b.Color.iloc[i])\n\nplt.title(\"Money earned\/lost in 1 passage in function of the number of houses\")\nplt.legend()\nplt.show()","05e9b45a":"For each group of properties, there is always one which is more expensive than the other. In order to make a more readable graph, we will only select these properties. The rest of the properties have very similar caracterics as their *representative*.","2877b852":"*Rue de la Paix* is the worst property to own before owning 3 houses (which will cost 1000\u20ac). Then it becomes the best to own. Since each game starts with 1600\u20ac, it is dangerous to first buy this property.\n\nThe orange and pink group seem to be the best groups to invests in. Indeed, they are both between the jail and the *go to jail* space and they have great profitability according to the last graph. \n\nThe yellow group is also between this two spaces and has a quite high profitability. But one should only develop 3 houses at first since there is not that much difference after.\n\nKeep in mind that all the result discussed here are only for the first player who goes in this property. We wanted to earn money from this property as soon as possible. It is obviously better to develop hotels for a long term profit.","de8eeb33":"The case 30 is the *go to jail* space and the case 10 is the jail. We can clearly see that we end up more on properties between those cases than on the ones outside.\nTherefore we should play for these properties. It is even clearer if we consider game with 50000 throws :","701c56be":"Let's say we own these properties. We would like to know how much we earn if someone ends up falling on these properties. ","5fc10127":"With this in mind, we should start looking at the properties themself.\n\n## Properties study","4207e511":"# Monopoly properties exploration\n\nIn this kernel we focus on finding the best properties to own in a Monopoly game. First, we will look at the game in itself : are there properties that are more likely to come up ? Then we will use the data set to look for information on the properties.\n\n## Game simulation\n\nWe consider that we use one dice,we do not consider the *community chest* and the *chance*. Then we simulate 10000 moves through 5 different games :","f6d83c41":"First of all, we see that the last properties make us the best amount of money. Therefore, we should focus on the last properties. Then, with the information that we should play for the properties between the jail and the *go to jail* space, we should look for the red and yellow groups. \nMoreover, we clearly see that there is a huge gap of rent between 2 houses and 3 houses owned. So when we develop houses on properties, we should buy 3 houses at once.\n\nBut buying the last properties also means that they are the most expensive, with the highest cost of development of houses. Maybe it is not that optimal ?\n\nWe are looking for fast profitability. Then, we plot the money we earn\/lost if a player falls on our property once, in function of the number of houses we have developed."}}