{"cell_type":{"dfa1c798":"code","cad36571":"code","0477e3b8":"code","a9e75bbd":"code","b1672e0a":"code","88a2652d":"code","3f78d4d7":"code","34a2722b":"code","6b44da8d":"code","d3466c00":"code","ad5317ac":"code","3e836bab":"code","c4d4c67a":"code","63a39771":"code","e9bd0d1d":"code","a2c5d476":"code","b5f3981f":"code","143c39e0":"code","933c3dde":"code","fdab0a58":"code","a858dc7d":"code","56eca764":"code","19950ffc":"code","c1d8b95f":"code","a8419852":"code","306f7d29":"code","5e7c2175":"code","a752a672":"code","5359b623":"code","0bf0f50b":"code","145e7bd2":"code","f0c32f66":"code","2e8b1a70":"code","b9690ce2":"code","8bbe7f58":"markdown","3572560d":"markdown","ceaab990":"markdown"},"source":{"dfa1c798":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","cad36571":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsubmission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","0477e3b8":"train.head()","a9e75bbd":"train[train['breath_id']==1]","b1672e0a":"train[train['breath_id']==1].nunique().to_frame()","88a2652d":"test.head()","3f78d4d7":"submission.head()","34a2722b":"train.isnull().sum()","6b44da8d":"test.isnull().sum()","d3466c00":"fig,ax = plt.subplots(figsize=(12,7),constrained_layout=True)\n\nplt.subplot(2,2,1)\nplt.title('count of R in train')\nsns.countplot(x='R',data=train)\nplt.subplot(2,2,2)\nplt.title('count of R in test')\nsns.countplot(x='R',data=test)\nplt.subplot(2,2,3)\nplt.title('count of C in train')\nsns.countplot(x='C',data=train)\nplt.subplot(2,2,4)\nplt.title('count of C in test')\nsns.countplot(x='C',data=test)  ","ad5317ac":"plt.figure(figsize=(12,7))\nplt.subplot(2,2,1)\nplt.title('u_in in train')\nplt.hist(train['u_in'],bins=100)\n\nplt.subplot(2,2,2)\nplt.title('u_in in test')\nplt.hist(test['u_in'],bins=100)\n\nplt.subplot(2,2,3)\nplt.title('u_out in train')\nplt.hist(train['u_out'],bins=100)\n\nplt.subplot(2,2,4)\nplt.title('u_out in test')\nplt.hist(test['u_out'],bins=100)\nplt.tight_layout()","3e836bab":"import warnings\nwarnings.filterwarnings('ignore')","c4d4c67a":"# rewritten from https:\/\/www.kaggle.com\/mst8823\/google-brain-lightgbm-baseline?scriptVersionId=75500028&cellId=14\nfig,ax = plt.subplots(figsize=(14,7))\n\nax = sns.distplot(train.loc[train[\"u_out\"] == 0, \"pressure\"], ax=ax, label=\"u_out=0\", bins=200)\nax = sns.distplot(train.loc[train[\"u_out\"] == 1, \"pressure\"], ax=ax, label=\"u_out=1\", bins=200)\nax.legend(loc='upper right')","63a39771":"fig,ax = plt.subplots(figsize=(12,7))\n\nax = sns.distplot(train.loc[train['R']==5,'pressure'],ax=ax, label='R=5',bins = 200)\nax = sns.distplot(train.loc[train['R']==20,'pressure'],ax=ax,label='R=20',bins=200)\nax= sns.distplot(train.loc[train['R']==50,'pressure'],ax=ax,label='R=50',bins=200)\nax.legend(loc='upper right')","e9bd0d1d":"fig,ax = plt.subplots(figsize=(12,7))\n\nax = sns.distplot(train.loc[train['C']==10,'pressure'],ax=ax, label='C=10',bins = 200)\nax = sns.distplot(train.loc[train['C']==20,'pressure'],ax=ax,label='C=20',bins=200)\nax= sns.distplot(train.loc[train['C']==50,'pressure'],ax=ax,label='C=50',bins=200)\nax.legend(loc='upper right')","a2c5d476":"# referred https:\/\/www.kaggle.com\/carlmcbrideellis\/ventilator-pressure-eda-and-simple-submission?scriptVersionId=76671996&cellId=32\npd.crosstab(train['R'],train['C'])\/80","b5f3981f":"train['R_C'] = train['R'].astype(str)+'_'+train['C'].astype(str)\ntrain['R_C'].unique()","143c39e0":"# referred https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models?scriptVersionId=75639741&cellId=13\nfor i in (train['R_C'].unique()):  \n    fig,ax1 = plt.subplots(figsize=(10,7))\n    bid=train.loc[train['R_C']==i].iloc[0,1]\n    data = train.loc[train['breath_id']==bid]               \n    ax2=ax1.twinx()     \n    ax1.set_title(f'breath_id= {bid} \/ R_C: {i}')\n    ax1.plot(data['time_step'],data['pressure'],'r-',label='pressure')\n    ax1.plot(data['time_step'],data['u_in'],'g-',label='u_in')\n    ax2.plot(data['time_step'],data['u_out'],'b-',label='u_out')\n    ax1.set_xlabel('Timestep')\n    ax1.title.set_size(20)\n    ax1.legend(loc='center right')\n    ax2.legend(loc='upper right')\n    plt.show()","933c3dde":"train[['R_C','pressure']].groupby(['R_C'],as_index=False).max().sort_values(by='R_C',ascending=False)","fdab0a58":"train[['R_C','pressure']].groupby(['R_C'],as_index=False).min().sort_values(by='R_C',ascending=False)","a858dc7d":"def fe (df):\n    df['R_C'] = df['R'].astype(str)+'_'+train['C'].astype(str)\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_in_lagN1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_in_lagN2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    \n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_out_lagN1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_out_lagN2'] = df.groupby('breath_id')['u_out'].shift(-2)\n\n    df = pd.get_dummies(df)\n    \n    #window\n    df['rolling_mean'] = df.groupby('breath_id')['u_in'].rolling(window=10,min_periods=1).mean().reset_index(level=0,drop=True)\n    df['rolling_std'] =df.groupby('breath_id')['u_in'].rolling(window=10,min_periods=1).std().reset_index(level=0,drop=True)\n    \n    df['expanding_mean'] = df.groupby('breath_id')['u_in'].expanding(2).mean().reset_index(level=0,drop=True)\n    df['expanding_std'] = df.groupby('breath_id')['u_in'].expanding(2).std().reset_index(level=0,drop=True)\n    \n    #https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/273974\n    df['u_in_cumsum']=(df['u_in']).groupby(df['breath_id']).cumsum()\n    return df","56eca764":"train = fe(train)","19950ffc":"test=fe(test)","c1d8b95f":"train.head()","a8419852":"list(train)","306f7d29":"train=train.fillna(0)\ntest=test.fillna(0)","5e7c2175":"train.isnull().sum()","a752a672":"test.isnull().sum()","5359b623":"import os\nimport time\nimport lightgbm as lgb\n\nfrom sklearn.model_selection import GroupKFold \nfrom sklearn.model_selection import  KFold\nfrom sklearn import metrics","0bf0f50b":"column = [col for col in train.columns if col not in ['id', 'breath_id', 'pressure']]","145e7bd2":"#referred https:\/\/www.kaggle.com\/shivansh002\/lgbm-lover-s?scriptVersionId=75633660&cellId=6\nscores = []\nfeature_importance = pd.DataFrame()\nmodels = []\ncolumns = [col for col in train.columns if col not in ['id', 'breath_id', 'pressure']]\nX = train[columns]\ny = train['pressure']\nparams = {'objective': 'regression',\n          'learning_rate': 0.2,\n          \"boosting_type\": \"gbdt\",\n          'max_bin': 196,\n          'feature_fraction':0.4,\n          'max_depth':16,\n          \"metric\": 'mae',\n          'n_jobs': -1\n         }\nfolds = GroupKFold(n_splits=5)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train, y, groups=train['breath_id'])):\n    print(f'Fold {fold_n} started at {time.ctime()}')\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    model = lgb.LGBMRegressor(**params, n_estimators=8000)\n    model.fit(X_train, y_train, \n            eval_set=[(X_train, y_train), (X_valid, y_valid)],\n            verbose=100, early_stopping_rounds=10)\n    score = metrics.mean_absolute_error(y_valid, model.predict(X_valid))\n    \n    models.append(model)\n    scores.append(score)\n\n    fold_importance = pd.DataFrame()\n    fold_importance[\"feature\"] = columns\n    fold_importance[\"importance\"] = model.feature_importances_\n    fold_importance[\"fold\"] = fold_n + 1\n    feature_importance = pd.concat([feature_importance, fold_importance], axis=0)\n    \nprint('CV mean score: {0:.4f}, std: {1:.4f}.'.format(np.mean(scores), np.std(scores)))","f0c32f66":"for model in models:\n    submission['pressure']+=model.predict(test[columns])\nsubmission['pressure']\/=5","2e8b1a70":"submission.head()","b9690ce2":"submission.to_csv('1submit.csv',index=False)","8bbe7f58":"## EDA","3572560d":"## Feature Engineering","ceaab990":"#### we can know that when u_out moves to 1 -> pressure goes down"}}