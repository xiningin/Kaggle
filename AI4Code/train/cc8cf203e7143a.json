{"cell_type":{"7dc47c8d":"code","60b694c7":"code","c41fc941":"code","153564bd":"code","3994f5b9":"code","16f04a19":"code","a6ca7770":"code","26ff3ab3":"code","387c3b84":"code","6b3517fb":"code","4e9a15d9":"code","4f0e07ea":"code","52b7c0c6":"code","1ee1b584":"code","824010c3":"code","b6577102":"code","4c0b3574":"code","c8cf7052":"code","e2e72f5b":"code","ba39de54":"code","c07545f6":"code","016533b4":"code","614562a3":"code","a7acd04d":"code","bb24317d":"code","ce59c200":"code","d9cd2dd2":"code","8a79e1a1":"code","63ab9e87":"code","adaec03d":"code","9bf08c68":"markdown","de3f0de7":"markdown","5d82625c":"markdown","99c339cb":"markdown","803ee2cf":"markdown","66a5abdc":"markdown","3762d316":"markdown","df6a9020":"markdown","d55cc143":"markdown","f1772d4a":"markdown","ea43539e":"markdown","1990a76c":"markdown","8b8685da":"markdown","8d161a34":"markdown","fd29466c":"markdown","beae2768":"markdown","bb8c335b":"markdown","c245cefe":"markdown","05317ec1":"markdown","7da63e11":"markdown","5b87488d":"markdown","921c5d9a":"markdown","01cc88e7":"markdown","7b401061":"markdown","4223691c":"markdown","ea6c16b2":"markdown","ffb72d65":"markdown","4cb46b37":"markdown","1f6ddb92":"markdown","1b8407ae":"markdown","53e88268":"markdown","c756399e":"markdown","64438e8b":"markdown","4419eb6d":"markdown","dc68c48f":"markdown","2c52b421":"markdown","e78e1946":"markdown","a4a2c365":"markdown","5be6a981":"markdown"},"source":{"7dc47c8d":"import numpy as np\nimport pandas as pd\nimport os\nimport datetime\nimport gc\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold,  cross_val_score\nimport xgboost as xgb\nimport seaborn as sns\nimport time\n# from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom catboost import CatBoostRegressor\n%matplotlib inline        \n\n","60b694c7":"def missing_value_of_data(data):\n    ''' \u0412\u044b\u044f\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438'''\n    total=data.isnull().sum().sort_values(ascending=False)\n    percentage=round(total\/data.shape[0]*100,2)\n    return pd.concat([total,percentage],axis=1,keys=['Total','Percentage'])\n\ndef unique_values_in_column(data,feature):\n    ''' \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f'''\n    unique_val=pd.Series(data.loc[:,feature].unique())\n    return pd.concat([unique_val],axis=1,keys=['Unique Values'])\n\ndef my_hist(x, figsize=(14, 3)):\n    ''' \u0413\u0438\u0441\u0442\u043e\u0440\u0433\u0440\u0430\u043c\u043c\u0430 + \u043c\u0435\u0434\u0438\u0430\u043d\u0430\/\u043c\u043e\u0434\u0430\/\u0441\u0440\u0435\u0434\u043d.\u0430\u0440\u0438\u0445\u0444\u043c. '''\n    target_mean = round(x.mean(), 2)\n    target_median = x.median()\n    target_mode = x.mode()[0]\n\n    plt.figure(figsize=figsize)\n\n    sns.distplot(x, bins=min(50,len(set(x.unique()))))\n\n    plt.axvline(x=[target_mean], label='mean',\n                linestyle=':', color=\"red\", linewidth=4)\n    plt.axvline(x=[target_median], label='median',\n                linestyle='--', color=\"green\", linewidth=4)\n    plt.axvline(x=[target_mode], label='mode',\n                linestyle='-.', color=\"brown\", linewidth=4)\n\n    plt.title(f'Distribution of {x.name}')\n    plt.xlabel(x.name)\n    plt.ylabel('Frequency')\n    plt.show()\n\ndef my_boxplot(x,y,ampX=1,ampY=1, f_e=(14, 3)):\n    \"\"\" \u0411\u043e\u043a\u0441\u043f\u043b\u043e\u0442 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0432\u044f\u0437\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \"\"\"\n    plt.figure(figsize = f_e)\n    x_s = (round(x\/ampX,0)*ampX).astype(np.int32)\n    y_s = (round(y\/ampY,0)*ampY).astype(np.int32)    \n    \n    sns.boxplot(x_s, y_s)\n    plt.xlabel(x.name)\n    plt.ylabel(y.name)\n    plt.title(f'Distribution of {x.name} by {y.name}')\n    plt.show()\n    \ndef plot_feature_importances(importances, X):\n\n    indices = np.argsort(importances)[::-1]\n    \"\"\" \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \"\"\"\n    plt.figure(figsize=(20, 6))\n    plt.title(\"Feature importances\", fontsize=16)\n    plt.bar(range(X.shape[1]), importances[indices] \/ importances.sum(),\n            color=\"darkblue\", align=\"center\")\n    plt.xticks(range(X.shape[1]), X.columns[indices], rotation=90, fontsize=14)\n    plt.xlim([-1, X.shape[1]])\n\n    plt.tight_layout()\n    plt.show()","c41fc941":"df = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/train.csv')\nX = df.drop('Price', axis=1)\ny = df[['Price']]\nX_final = pd.read_csv('\/kaggle\/input\/realestatepriceprediction\/test.csv')\n\nprint(f'\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u0439\u043d\u0430: {X.shape}, \u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u0430: {X_final.shape}')","153564bd":"df.describe().T","3994f5b9":"df.info()","16f04a19":"unique_values_in_column(df,'Ecology_2')","a6ca7770":"set(df.loc[:,'Ecology_2'].unique()) == set(df.loc[:,'Shops_2'].unique()) == set(df.loc[:,'Ecology_3'].unique())","26ff3ab3":"my_hist(X.Rooms,figsize=(14, 4))","387c3b84":"MAX_Rooms = 5","6b3517fb":"df[df.Rooms > MAX_Rooms]","4e9a15d9":"df.drop([\"Id\",'DistrictId','Floor','HouseFloor','HouseYear','KitchenSquare','Rooms','Square','LifeSquare','Price'],axis=1, inplace = False).hist(bins=50, figsize=(20,15))\nplt.show()","4f0e07ea":"df[['DistrictId','Floor','HouseFloor','HouseYear','KitchenSquare','Rooms','Square','LifeSquare','Price']].hist(bins=50, figsize=(20,15))\nplt.show()","52b7c0c6":"df[\"SqmPrice\"] = df[\"Price\"]\/df[\"Square\"]\nmy_hist(df.SqmPrice)","1ee1b584":"MULT10_Square_MAX_treshhold = 15 # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f Square\nDIV10_Square_MIN_treshhold = 280 # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f Square\n\nMIN_KitchenSquare = 2 # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f KitchenSquare\nSUSP_KitchenSquare = 5 # KitchenSquare \u043d\u0438\u0436\u0435 \u044d\u0442\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b - \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f - \u043a \u043d\u0435\u0439 \u043f\u0440\u0438\u043c\u0435\u043d\u044e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\nMAX_KitchenSquare = 32 # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f KitchenSquare\n\nMIN_LifeSquare = 10 # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f LifeSquare\nMAX_LifeSquare = 240# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430\u044f LifeSquare","824010c3":"condition1 = df.Square<MULT10_Square_MAX_treshhold\nfeatures_analysed = ['DistrictId','Rooms','Square','LifeSquare','KitchenSquare','Price','SqmPrice']\ndf[features_analysed][condition1].sample(4)","b6577102":"condition2 = df.Square>DIV10_Square_MIN_treshhold\ndf[features_analysed][condition2]","4c0b3574":"my_boxplot(df.Price,df.Healthcare_1[df.Healthcare_1.isna()==False],ampX=50000,ampY=1, f_e=(14, 5))\nmy_boxplot(df.Healthcare_1[df.Healthcare_1.isna()==False],df.DistrictId,ampX=1,ampY=1, f_e=(14, 5))","c8cf7052":"my_hist(df.Floor)\nmy_hist(df.HouseFloor)","e2e72f5b":"MAX_HouseFloor = 40\nMAX_Floor = 40","ba39de54":"condition1 = ((df.Rooms > 0) & (df.Rooms<6))\ncondition2 = ((df.Square > 15) & (df.Square<280))\ncondition3 = ((df.KitchenSquare > 2) & (df.KitchenSquare<32))\ncondition4 = ((df.LifeSquare > 10) & (df.LifeSquare<240))\n\nsuspected_corr = df[['Rooms','Square','KitchenSquare','LifeSquare']][condition1&condition2&condition3&condition4]\n\ncorr = suspected_corr.corr()\nplt.figure(figsize = (6, 5))\nsns.set(font_scale=1.4)\nsns.heatmap(suspected_corr.corr(), annot=True, fmt='.1f', cmap='GnBu')\nplt.title('Correlation matrix')\nplt.show()","c07545f6":"class WorkFllow:\n\n    def __init__(self):\n        self.regression_Sq_Ktchn = None\n        self.regression_Sq_Life = None\n        self.regression_Sq_Rooms = None\n        self.DistrictId_counts = None\n        self.Aver_HC1_by_D = None\n        self.Sqm_P_by_D = None\n        self.Rooms_in_D = None\n        self.Sqm_P_by_D_STD = None\n        self.binary_to_numbers = {'A': 0, 'B': 1}  # Binary features\n\n\n\n    def step_1_transform_before_regressions(self, X):\n\n        # Switch LS & S\n        condition = ((X.LifeSquare > X.Square) & (X.LifeSquare\/10 <= DIV10_Square_MIN_treshhold))\n        \n        X['Square_outlier'] = 0\n        X['LifeSquare_outlier'] = 0\n        X.loc[condition,'Square_outlier'] = 1\n        X.loc[condition,'LifeSquare_outlier'] = 1\n        \n        X.loc[condition, ['LifeSquare', 'Square']\n              ] = X.loc[condition, ['Square', 'LifeSquare']].values\n\n        # KS Minor adjust\n        condition = ((X.KitchenSquare > X.Square) & (\n            X.KitchenSquare <= MAX_KitchenSquare*10))\n        \n        X['KitchenSquare_outlier'] = 0\n        X.loc[condition,'KitchenSquare_outlier'] = 1\n        \n        X.loc[condition, \"KitchenSquare\"] = X.loc[condition, \"KitchenSquare\"]\/10\n        condition = ((X.KitchenSquare > X.Square) & (\n            X.KitchenSquare > MAX_KitchenSquare*10))\n        \n        X.loc[condition, 'KitchenSquare_outlier'] = 1\n        X.loc[condition, \"KitchenSquare\"] = 0\n\n        # S adjust where it is 10folds bigger\n        condition = (X.Square > DIV10_Square_MIN_treshhold) & (\n            X.LifeSquare < MAX_LifeSquare)\n        \n        \n        X.loc[condition,'LifeSquare_outlier'] = 1\n        X.loc[condition, \"Square\"] = X.loc[condition, \"Square\"]\/10\n\n        # S & LS adjust where it is 10folds bigger\n        condition = ((X.LifeSquare > X.Square) & (X.LifeSquare\/10 > DIV10_Square_MIN_treshhold))\n        X.loc[condition,'LifeSquare_outlier'] = 1\n        X.loc[condition, \"LifeSquare\"] = X.loc[condition, \"LifeSquare\"]\/100\n        \n        \n        # AGAIN Switch LS & S\n        condition = ((X.LifeSquare > X.Square) & (X.LifeSquare\/10 <= DIV10_Square_MIN_treshhold))\n        \n        X.loc[condition,'Square_outlier'] = 1\n        X.loc[condition,'LifeSquare_outlier'] = 1\n        \n        X.loc[condition, ['LifeSquare', 'Square']\n              ] = X.loc[condition, ['Square', 'LifeSquare']].values\n\n     \n        # S & LS adjust where it is 10folds bigger\n        condition = (X.Square > DIV10_Square_MIN_treshhold)\n        \n        X.loc[condition,'Square_outlier'] = 1\n        X.loc[condition,'LifeSquare_outlier'] = 1\n        X.loc[condition, \"Square\"] = X.loc[condition, \"Square\"]\/10\n        \n        condition = (X.LifeSquare > MAX_LifeSquare)\n        X.loc[condition, \"LifeSquare\"] = X.loc[condition, \"LifeSquare\"]\/10\n\n        condition = (X.Square < MULT10_Square_MAX_treshhold)\n        X.loc[condition, \"Square\"] = X.loc[condition, \"Square\"]*10\n        \n        condition = (X.LifeSquare < MIN_LifeSquare)\n        X.loc[condition, \"LifeSquare\"] = X.loc[condition, \"LifeSquare\"]*10\n\n        X.loc[condition,'Square_outlier'] = 1\n        X.loc[condition,'LifeSquare_outlier'] = 1\n        \n        # KS rough adjust - reset to 0 all suspicious KitchenSquare to fill it later with Linear regression\n        condition = (X.KitchenSquare > MAX_KitchenSquare) & (\n            X.KitchenSquare > X.Square\/2)\n        X.loc[condition,'KitchenSquare_outlier'] = 1\n        X.loc[condition, \"KitchenSquare\"] = 0\n\n        condition = (X.KitchenSquare < X.Square\/18)\n        X.loc[condition, \"KitchenSquare\"] = 0\n\n        condition = ((X.KitchenSquare < SUSP_KitchenSquare) & (X.KitchenSquare > 1) & (\n            (X.KitchenSquare == X.Rooms) | (X.KitchenSquare == X.Floor)))\n        X.loc[condition, \"KitchenSquare\"] = 0\n\n        condition = (X.KitchenSquare < MIN_KitchenSquare)\n        X.loc[condition, \"KitchenSquare\"] = 0\n\n        # HouseFloor \/ Floor\n        \n        # Switch HF & F\n        condition = (X.Floor > X.HouseFloor)\n        X.loc[condition,'HF_F_outlier'] = 1\n        X.loc[condition, ['HouseFloor', 'Floor']\n              ] = X.loc[condition, ['HouseFloor', 'Floor']].values\n\n        # Remove non existing floors\n        \n        condition = (X['HouseFloor'] > MAX_HouseFloor)\n        X['HF_F_outlier'] = 0\n        X.loc[condition,'HF_F_outlier'] = 1\n        X.loc[condition, 'HouseFloor'] = 0\n        \n        condition = (X['Floor'] > MAX_Floor)\n        X.loc[condition,'HF_F_outlier'] = 1\n        X.loc[condition, 'Floor'] = 0\n\n        condition = (X['HouseFloor'] == 0)\n        X.loc[condition,'HF_F_outlier'] = 1\n        X.loc[condition, 'HouseFloor'] = 1\n\n        condition = (X['Floor'] == 0)\n        X.loc[condition,'HF_F_outlier'] = 1\n        X.loc[condition, 'Floor'] = X.loc[condition, 'HouseFloor']\/\/2+1\n\n        # HouseYear\n        current_year = now = datetime.datetime.now().year\n        X['HouseYear_outlier'] = 0\n        condition = X['HouseYear'] > current_year\n        X.loc[condition,'HouseYear_outlier'] = 1\n        X.loc[condition, 'HouseYear'] = round(X['HouseYear'].median(), 0)\n\n        \n        # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        gc.collect()\n        return X\n    \n    \n    def step_2_fit_regressions(self, X_train, X_test):\n\n        Both = pd.concat([X_train, X_test,], axis=0)\n        # KS adjust\n        # \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432\u0441\u0435 \u043d\u0435\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0443\u0436\u0435 \u0441\u0431\u0440\u043e\u0448\u0435\u043d\u044b \u0434\u043e 0\n        condition = (Both.KitchenSquare > 0)\n        \n        # \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \/ \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0438\u0447 - \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0430\u043c\u043f\u043b\u0438\u0442\u0443\u0434\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.\n        Xc = Both[condition].drop(['KitchenSquare', 'LifeSquare', 'Rooms','Healthcare_1'], axis=1)\n        yc = Both[condition].KitchenSquare\n        \n        self.regression_Sq_Ktchn = CatBoostRegressor(\n            iterations=420,\n            depth=7,\n            learning_rate=.15,\n            loss_function='RMSE',\n            eval_metric=\"R2\",\n            silent=True,\n        )\n        \n                \n        self.regression_Sq_Ktchn.fit(Xc, yc)\n        c_validator = cross_val_score(self.regression_Sq_Ktchn, Xc, yc, cv=5, scoring='r2')\n        print(\n            'KitchenSquare R2: {:.4f} +- {:.4f}'.format(c_validator.mean(), c_validator.std()))\n        \n      \n        # LS adjust\n        condition = (Both.LifeSquare.isna() == False)\n        # \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \/ \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0438\u0447 - \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0430\u043c\u043f\u043b\u0438\u0442\u0443\u0434\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.\n        Xc = Both[condition].drop(\n            ['KitchenSquare', 'LifeSquare', 'Rooms','Healthcare_1'], axis=1)\n        yc = Both[condition].LifeSquare\n\n        self.regression_Sq_Life = CatBoostRegressor(\n            iterations=280,\n            depth=7,\n            learning_rate=.05,\n            loss_function='RMSE',\n            eval_metric=\"R2\",\n            silent=True,\n        )\n        \n        self.regression_Sq_Life.fit(Xc, yc)\n        c_validator=cross_val_score(self.regression_Sq_Life, Xc, yc, cv=5, scoring='r2')\n        print(\n            'LifeSquare R2: {:.4f} +- {:.4f}'.format(c_validator.mean(), c_validator.std()))\n\n        # Rooms adjust\n        condition = (Both['Rooms'] >= 1) & (Both['Rooms'] <= MAX_Rooms)\n        \n        # \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043d\u0435 \u0445\u043e\u0447\u0443 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043e\u0434\u043d\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \/ \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0438\u0447 - \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0430\u043c\u043f\u043b\u0438\u0442\u0443\u0434\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u0438.\n        Xc = Both[condition].drop(\n            ['KitchenSquare', 'LifeSquare', 'Rooms','Healthcare_1'], axis=1)\n        \n        yc = Both[condition].Rooms\n        \n        self.regression_Sq_Rooms=CatBoostRegressor(\n            iterations=460,\n            depth=7,\n            learning_rate=.08,\n            loss_function='RMSE',\n            eval_metric=\"R2\",\n            silent=True,\n        )\n        \n        self.regression_Sq_Rooms.fit(Xc, yc)\n\n        c_validator=cross_val_score(self.regression_Sq_Rooms, Xc, yc, cv=5, scoring='r2')\n        print(\n            'Rooms R2: {:.4f} +- {:.4f}'.format(c_validator.mean(), c_validator.std()))\n        \n       \n        \n        del Both\n\n        \n    def step_3_apply_regressions(self, X):\n\n        # KS regression adjust\n        condition = (X.KitchenSquare == 0)\n        \n        Xc = X[condition].drop(['KitchenSquare', 'LifeSquare', 'Rooms','Healthcare_1'], axis=1)\n        \n        X.loc[condition, 'KitchenSquare'] = self.regression_Sq_Ktchn.predict(Xc)\n\n        # Rooms regression adjust\n        condition = (X['Rooms'] < 1) | (X['Rooms'] > MAX_Rooms)\n        \n        Xc = X[condition].drop(['KitchenSquare', 'LifeSquare', 'Rooms','Healthcare_1'], axis=1)\n            \n        X['Rooms_outlier'] = 0\n        \n        X.loc[condition,'Rooms_outlier'] = 1\n        \n        X.loc[condition, 'Rooms'] = self.regression_Sq_Rooms.predict(Xc)\n        X.Rooms = (round(X.Rooms, 0)).astype(np.int16)\n\n        \n \n        # After KitchenSquare is adjusted -> LifeSquare may be adjusted as well\n        # Mark anomal items as NaN\n        condition = (X.LifeSquare < X.Square\/3) # \u043c\u043e\u0436\u043d\u043e \u0438\u0433\u0440\u0430\u0442\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n        X.loc[condition, \"LifeSquare\"] = np.nan\n       \n        condition = (X.LifeSquare < X.KitchenSquare*2)\n        X.loc[condition, \"LifeSquare\"] = np.nan\n        \n        condition = (X.LifeSquare + X.KitchenSquare > X.Square) & (X.LifeSquare.isna() == False)\n        X.loc[condition, \"LifeSquare\"] = np.nan\n\n        # LS regression adjust\n        condition = (X.LifeSquare.isna() == True)\n        \n        Xc = X[condition].drop(['KitchenSquare', 'LifeSquare', 'Rooms','Healthcare_1'], axis=1)\n                \n        \n        X.loc[condition,'LifeSquare_outlier'] = 1\n        X.loc[condition, 'LifeSquare'] = self.regression_Sq_Life.predict(Xc)\n        \n  \n        gc.collect()\n        return X\n\n    \n    def step_4_fit_features(self, X,X_final, y):\n        \n        All = pd.concat([X, y], axis=1)\n        Both = pd.concat([X, X_final,], axis=0)\n        \n        # DistrictID\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u044c \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0441\u0435\u0442\u0435!\n        district = Both['DistrictId'].value_counts()\n#         district = district[district >= 0]  # \u041c\u043e\u0436\u043d\u043e \u0438\u0433\u0440\u0430\u0442\u044c \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n        self.DistrictId_counts = dict(district)\n        \n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u043e \u0440\u0430\u0439\u043e\u043d\u0443 Healthcare_1 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u0442\u0430. \n        #av_HC_1 (median - worse)\n        condition = (Both.Healthcare_1.isna() == False)\n        self.Aver_HC1_by_D = Both[condition].groupby('DistrictId', as_index=False).agg(\n            {'Healthcare_1': 'mean'}).rename(columns={'Healthcare_1': 'Aver_HC1_by_D'})\n        \n        # Total_Rooms_in_Distr\n        self.Rooms_in_D = Both[condition].groupby('DistrictId', as_index=False).agg(\n            {'Rooms': 'sum'}).rename(columns={'Rooms': 'Total_Rooms_in_Distr'})\n                \n        # av_SQMprice\n        # \u0430 \u0432\u043e\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u0443\u044e \u0444\u0438\u0447\u0443 - \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e \u0442\u043e\u043b\u044c\u043e \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0441\u0435\u0442\u0435.\n        condition = (All.Square > MULT10_Square_MAX_treshhold) & (All.Square < DIV10_Square_MIN_treshhold)\n\n        All[\"SqmPrice\"] = All[\"Price\"]\/All[\"Square\"]\n \n        self.Sqm_P_by_D = All[condition].groupby('DistrictId', as_index=False).agg(\n            {'SqmPrice': 'mean'}).rename(columns={'SqmPrice': 'Av_SqmPrice_by_Distr'})\n\n\n    \n        self.Sqm_P_by_D_STD = All[condition].groupby('DistrictId', as_index=False).agg(\n            {'SqmPrice': 'std'}).rename(columns={'SqmPrice': 'Price_STD'})\n    \n    \n    \n        \n        del All\n        del Both\n    \n    def step_5_do_features(self, X):\n                \n        # DistrictId\n        X['DistrictId_count'] = X['DistrictId'].map(self.DistrictId_counts)\n\n\n        # Age\n        X[\"HouseAge\"] = np.int32(2021 - X[\"HouseYear\"])\n        X.drop(\"HouseYear\", axis=1, inplace=True)\n\n\n        # av_SQMprice\n        X = X.merge(self.Sqm_P_by_D, on=[\"DistrictId\"], how='left')\n        X.Av_SqmPrice_by_Distr.fillna(\n            self.Sqm_P_by_D.Av_SqmPrice_by_Distr.median(), inplace=True)\n        \n        \n        # av_SQMprice_STD\n        X = X.merge(self.Sqm_P_by_D_STD, on=[\"DistrictId\"], how='left')\n        X.Av_SqmPrice_by_Distr.fillna(\n            self.Sqm_P_by_D_STD.Price_STD.mean(), inplace=True)\n\n \n        # Aver_HC1_by_D\n        X = X.merge(self.Aver_HC1_by_D, on=[\"DistrictId\"], how='left')\n        \n        # Healthcare_1 adjust with mean value for region\n        condition = (X.Healthcare_1.isna() == True)\n        \n        X['Healthcare_1_outlier'] = 0\n        X.loc[condition,'Healthcare_1_outlier'] = 1\n        X.loc[condition, 'Healthcare_1'] = X.Aver_HC1_by_D\n\n        X.Healthcare_1.fillna(0, inplace=True)\n        X.Aver_HC1_by_D.fillna(0, inplace=True)\n        \n\n        # Total_Rooms_in_Distr_count * Total_Rooms_in_Distr\n        X = X.merge(self.Rooms_in_D, on=[\"DistrictId\"], how='left')\n\n        X['DistrictId_x_Rooms_count'] = X['Total_Rooms_in_Distr'] * X['DistrictId_count']\n\n\n        # F_Probable_Price\n        \n        X['F_Probable_Price'] = X.Square * X.Av_SqmPrice_by_Distr\n        \n \n        gc.collect()\n        return X","016533b4":"imputer = WorkFllow()\n\n# 1. \u041f\u0435\u0440\u0432\u044b\u0439 \u044d\u0442\u0430\u043f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0439, \u0414\u041e \u0444\u0438\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0435 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438 \u0431\u044b\u043b\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438\nX = imputer.step_1_transform_before_regressions(X)\nX_final = imputer.step_1_transform_before_regressions(X_final)\nprint ('1-ok')\n\n# 2. \u0424\u0438\u0442 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0439 - \u0440\u0430\u0441\u0447\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0442\u043e\u043c \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u043a\u0430\u043a \u0432 X \u0442\u0430\u043a \u0438 \u0432 X_final\nimputer.step_2_fit_regressions(X,X_final)\nprint ('2-ok')\n\n# 3. \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\u043c\u0438\nX = imputer.step_3_apply_regressions(X)\nX_final = imputer.step_3_apply_regressions(X_final)\nprint ('3-ok')\n\n# 4. \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0446\u0435\u043d\u043e\u0439 \u0444\u0438\u0447\nimputer.step_4_fit_features(X,X_final,y)\nprint ('4-ok')\n\n# 5.\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0447\nX = imputer.step_5_do_features(X)\nX_final = imputer.step_5_do_features(X_final)\nprint ('5-ok')","614562a3":"# \u0414\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0441\u043e\u0437\u0434\u0430\u044e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043a\u0443\u0434\u0430 \u0431\u0443\u0434\u0443\u0442 \u0432\u043d\u0435\u0441\u0435\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\npreds_final = pd.DataFrame()\npreds_final['Id'] = X_final['Id'].copy()\nX.set_index('Id', inplace=True)\nX_final.set_index('Id', inplace=True)","a7acd04d":"## ORDER MATTERS\n\nremain_features = ['DistrictId_count', 'Av_SqmPrice_by_Distr',\n       'Total_Rooms_in_Distr', 'DistrictId_x_Rooms_count', 'Ecology_3',\n       'Square', 'Rooms', 'KitchenSquare', 'Floor', 'HouseFloor', 'Ecology_1',\n       'Social_1', 'Social_2', 'Social_3', 'Healthcare_1', 'Helthcare_2',\n       'Shops_1', 'HouseAge', 'F_Probable_Price', 'Price_STD']\n\nX = X[remain_features]\n\nX_final = X_final[remain_features]","bb24317d":"%%time\nparameters = {'silent': True, \n              'learning_rate': 0.023, \n              'iterations': 1005, \n              'eval_metric': 'R2', \n              'depth': 10,\n              'allow_writing_files': False}\n\n\nmodel_CBR = CatBoostRegressor(**parameters)\n\nmodel_CBR.fit(X, y)\n\ncv_score = cross_val_score(model_CBR, X, y,\n                           scoring='r2',\n                           cv=KFold(n_splits=5,\n                                    shuffle=True,\n                                    random_state=2021,\n                                    ))\nprint('R2: {:.4f} +- {:.4f}'.format(cv_score.mean(), cv_score.std()))","ce59c200":"plot_feature_importances(importances=model_CBR.feature_importances_, X=X)","d9cd2dd2":"y_pred_final = model_CBR.predict(X_final)\npreds_final['Price'] = y_pred_final\n\npreds_final.to_csv('predictions.csv', index=False)\n\npreds_final.head()","8a79e1a1":"preds_final.shape","63ab9e87":"X_final.shape, X.shape","adaec03d":"# !kaggle competitions submit -c realestatepriceprediction -m \"CATboost x4 - final\" -f predictions.csv","9bf08c68":"### HouseYear","de3f0de7":"* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432","5d82625c":"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043c\u0435\u0442\u0440\u0430 - \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u043b\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043d\u0430\u0439\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0440\u0430\u0437\u0440\u044f\u0434\u043d\u043e\u0441\u0442\u0438 \u043f\u043e Square :)","99c339cb":"* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430","803ee2cf":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'Rooms','Square','KitchenSquare','LifeSquare' \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u043a\u0430\u043a-\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c.\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e Catboost \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430 \u043e\u0431\u043e\u0438\u0445 \u0441\u0435\u0442\u0430\u0445 (\u0431\u0435\u0437 \u0446\u0435\u043d\u044b) \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \/ \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041b\u043e\u0433\u0438\u043a\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u044d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u043e\u043c\u0438\u043c\u043e \u0446\u0435\u043d\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438,  \u043f\u043e\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u043e\u0431\u044a\u0435\u0434\u0435\u043d\u0438\u0442\u044c \u0425 \u0438 \u0425_final - \u043d\u0430 \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u044d\u0442\u0438\u0445 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0432\u043f\u043e\u043b\u043d\u0435 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f  R2 = .68 - .85 \u0434\u0430\u0436\u0435 \u043d\u0435 \"\u043f\u043e\u0434\u0433\u043b\u044f\u0434\u044b\u0432\u0430\u044f\" \u043d\u0430 \u0446\u0435\u043d\u0443. \u0422\u043e\u0447\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f R2 \u0431\u0443\u0434\u0443\u0442 \u0432\u0438\u0434\u043d\u044b \u043f\u0440\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.","66a5abdc":"\u0427\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0449\u0430\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0444\u0438\u0442\u0438\u043b\u0430\u0441\u044c \u043f\u043e \u043e\u0447\u0438\u0449\u0435\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e \u043e\u0447\u0438\u0441\u0442\u043a\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u0430\u043f\u043e\u0432:","3762d316":"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0443, \u0447\u0442\u043e Square \u043d\u0430\u0434 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u0432 10 \u0440\u0430\u0437 \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u043d\u0430\u0434\u043e - \u0442\u043e\u0436\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044e","df6a9020":"\u0427\u0442\u043e\u0431\u044b \u0441\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0435\u043d\u0443 \u044f \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b:\n\nXGB - \u043e\u043d \u0431\u044b\u0441\u0442\u0440\u044b\u0439 :) \u0438 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u0430\u043c\u044b\u043c \u043c\u043e\u0449\u043d\u044b\u043c, \u043d\u043e \u0432 \u043c\u043e\u0438\u0445 \u0440\u0443\u043a\u0430\u0445 \u043e\u043d \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0435\u0434\u043e\u0442\u044f\u043d\u0443\u043b \u0434\u043e CatBoostRegressor, \u0430 \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043c\u0430\u043a\u0440\u043e\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b - \u044d\u0442\u043e \u0432\u044b\u0448\u0435 \u0441\u0438\u043b \u043c\u043e\u0435\u0433\u043e \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0430. CATboost \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043f\u0440\u043e\u0449\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c. \n\nENSEMBLE(\u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - \u0441 GradientBoostingRegressor+RandomForestRegressor) ,\u0431\u044b\u043b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0441 CatBoost, \u043d\u043e \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 + \u043c\u043d\u043e\u0433\u043e \u043c\u0430\u043a\u0440\u043e\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 - \u0441 \u043d\u0438\u043c \u043d\u0435\u043a\u043e\u043c\u0444\u043e\u0440\u0442\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c.\n\nCatBoostRegressor - \u0432\u044b\u0434\u0430\u043b \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0441\u043a\u043e\u0440 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0442\u043e\u043c\u0443, \u0447\u0442\u043e 3 (\u0422\u0420\u0418) \u043c\u0430\u043a\u0440\u043e\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0434\u0430\u0436\u0435 \u043d\u0430 \u0441\u043b\u0430\u0431\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 :) .\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b CatBoostRegressor \u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b \u0447\u0435\u0440\u0435\u0437 RandomizedSearchCV \u0438 \u0447\u0435\u0440\u0435\u0437 GridSearchCV.","d55cc143":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \"\u0448\u0443\u043c\u043d\u043e\u0441\u0442\u044c\" \u0438 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 - \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u043a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043d\u0438\u0436\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0435\u0441\u0442\u044c - \u0431\u0443\u0434\u0443 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c :)","f1772d4a":"### Rooms","ea43539e":"\u0412 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0441\u043e\u0442\u043d\u044b\u0445 \u0434\u043e\u043c\u043e\u0432, \u0438 \u0441\u043b\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441 \u0430 \u0447\u0442\u043e \u043d\u0435\u0442 \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435.\n\u0411\u0443\u0434\u0443 \u043a\u043e\u043d\u0441\u0435\u0440\u0432\u0430\u0442\u0438\u0432\u0435\u043d - \u0432\u0441\u0435 \u0447\u0442\u043e \u0432\u044b\u0448\u0435 40 \u044d\u0442\u0430\u0436\u0435\u0439 - \u0432\u044b\u0431\u0440\u043e\u0441.\n\n\u041d\u0443\u043b\u0435\u0432\u044b\u0435 \/ \u043d\u0435\u0440\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u043d\u044e \n- \u043d\u0430 1\u0439 \u044d\u0442\u0430\u0436 \u0434\u043b\u044f HouseFloor\n- \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432 \u0434\u043e\u043c\u0435 \u044d\u0442\u0430\u0436 - \u0434\u043b\u044f Floor","1990a76c":"## 3. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0447","8b8685da":"\u0412\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u044e \u043b\u0438\u0448\u043d\u0438\u0435 \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0432\u043e\u0440\u043a\u0431\u0443\u043a\u0435 \u043f\u0440\u043e\u0433\u043d\u0430\u0432 \u0447\u0435\u0440\u0435\u0437 itertools.combinations \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u043d\u0435\u0435 \u043f\u0435\u0440\u043c\u0443\u0442\u0430\u0446\u0438\u044f\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043d\u043e \u0432\u043c\u0435\u0440\u043c\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0440\u043c\u0443\u0442\u0430\u0446\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u043e \u043c\u0438\u043d\u0443\u0442 5\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043e\u0442 \u0438\u0434\u0435\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443 :) \u0438 \u043f\u043e\u0434\u043e\u0448\u0435\u043b \u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0443 \u0441\u0443\u0431\u044a\u0435\u043a\u0442\u0438\u0432\u043d\u043e - \u043e\u0441\u0442\u0430\u0432\u0438\u043b \u0442\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0447\u0442\u043e \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u0432\u0430\u0436\u043d\u044b \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u043d\u0430 \u043e\u0446\u0435\u043d\u043a\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0433\u0440\u0430\u0444\u0438\u043a \u0432 \u043a\u043e\u043d\u0446\u0435).","8d161a34":"## 2. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","fd29466c":"### \u041f\u0440\u043e\u0447\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438","beae2768":"### 'Square', 'KitchenSquare', 'LifeSquare'","bb8c335b":"\u041f\u043e LifeSquare \u0438 KitchenSquare \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043f\u043e\u0445\u043e\u0436\u0438, \u043d\u043e - \u0435\u0441\u0442\u044c \u043f\u0430\u0440\u0430 \u043d\u044e\u0430\u043d\u0441\u043e\u0432: \n\n1) \u0445\u043e\u0442\u044f \u0432 \u0440\u044f\u0434\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043a\u0443\u0445\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u0435\u0435 5 \u043c\u0435\u0442\u0440\u043e\u0432, \u0432\u043f\u043b\u043e\u0442\u044c \u0434\u043e, \u0441\u043a\u0430\u0436\u0435\u043c, 2x \u044f \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0443, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0433\u0434\u0435 \u0442\u0430\u043a\u0430\u044f \u043c\u0430\u043b\u0430\u044f KitchenSquare \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u0442 \u0441 \u044d\u0442\u0430\u0436\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442.\n\n2) \u0435\u0441\u043b\u0438 KitchenSquare \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0432 18 \u0440\u0430\u0437 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u043e\u0431\u0449\u0430\u044f Square - \u0442\u043e \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0432\u044b\u0431\u0440\u043e\u0441 - \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0443, \u0447\u0442\u043e \u0442\u0430\u043a\u0438\u0445 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043a\u0443\u0445\u043e\u043d\u044c \u043d\u0435 \u0431\u044b\u0432\u0430\u0435\u0442. \u0427\u0438\u0441\u043b\u0430 \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b \u044d\u043c\u043f\u0438\u0440\u0438\u0447\u0435\u0441\u043a\u0438 :) - \u043f\u0440\u043e\u0433\u043d\u0430\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u043c\u0438","c245cefe":"\u042f \u043f\u043e\u0432\u043e\u0437\u0438\u043b\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u0441 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u043e\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u044f\u043c - \u044d\u0442\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043d\u0435 \u0441\u0442\u0430\u043d\u0443 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0440\u0438\u0448\u0435\u043b \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438.:\n\n","05317ec1":"### \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 - \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","7da63e11":"\u0411\u044b\u043b\u0430 \u0431\u044b \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043c\u0435\u0442\u043e\u0434\u0435 \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \/ \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0443\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432\u044b\u0448\u0435 (Healthcare_1 \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445), \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0432 \u043d\u0438\u0445 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043d\u043e \u0437\u0430 \u0435\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435\u043c - \u043f\u0440\u0438\u0439\u043c\u0443 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0441 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 - \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0445 NaN - \u0432\u0441\u0435 \u043e\u043a\u0435\u0439","5b87488d":"\u041e\u0431\u0449\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430","921c5d9a":"## 1. \u0427\u0442\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","01cc88e7":"## \u041d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","7b401061":"\u0413\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430 \u043e\u0441\u043e\u0431\u044b\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 - \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430\u043c\u0435\u043d\u044e \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442.\n\u0418 \u043f\u043e\u043c\u0435\u043d\u044f\u044e \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043e\u043c\u0430 - \u0434\u0443\u043c\u0430\u044e \u0442\u0430\u043a \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0430\u0440\u044b\u043c \u0438 \u043d\u043e\u0432\u044b\u043c \u0434\u043e\u043c\u043e\u043c \u0434\u043b\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u0435\u0435","4223691c":"### Healthcare_1","ea6c16b2":"## CatBoostRegressor","ffb72d65":"\u0412\u0441\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e \u043e\u0447\u0438\u0441\u0442\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u043f\u043b\u0438\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043b\u0430\u0441\u0441\u044b \u043d\u0438\u0436\u0435.\n\n\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0446\u0435\u043b\u0435\u0441\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043d\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u043a\u043b\u0430\u0441\u0441\u0435 WorkFlow \u0441\u043e\u0437\u0434\u0430\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044f \u0438\u0445 \u043f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0441\u0442\u0438 - \u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 -> \u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u043d\u0438\u0445 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e -> \u043e\u043f\u044f\u0442\u044c \u0447\u0438\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 --> \u043d\u0430 \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 -> \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u0447\u0438. \u0421\u0443\u0442\u044c  \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0437 \u0438\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f. \u041b\u043e\u0433\u0438\u043a\u0430 - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439. \u0424\u0438\u0447\u0438 - \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043f\u043e\u044f\u0441\u043d\u044f\u044e.\n\n#### \u0412\u0430\u0436\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \n\n\u0420\u044f\u0434 \u0444\u0438\u0447 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0446\u0435\u043d\u044b - \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u0440\u0430\u0439\u043e\u043d\u0430 \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0434\u043b\u044f \u0440\u0430\u0439\u043e\u043d\u0430 Healthcare_1. \u0422\u0430\u043a\u0438\u0435 \u0444\u0438\u0447\u0438 \u044f \u0431\u0443\u0434\u0443 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u0441\u0435\u0442\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u0435, \u0432\u044b\u043a\u0438\u043d\u0443\u0432 \u043e\u0442\u0442\u0443\u0434\u0430 \u0446\u0435\u043d\u0443 \u0432\u043e\u0432\u0441\u0435. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0435\u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0430, \u0438\u043c\u0435\u044e\u0449\u0443\u044e\u0441\u044f \u0432 X_final.","4cb46b37":"\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f, \u0440\u0430\u0432\u043d\u043e \u043a\u0430\u043a \u0438 \u043f\u0440\u0438\u0441\u0443\u0449\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u0440\u0430\u0439\u043e\u043d\u0430\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f. \n\u041d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0447\u0442\u043e \u044d\u0442\u043e \u0438 \u0447\u0435\u043c \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u044b \u0441\u0442\u043e\u043b\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u0435\u0431\u0430\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430.\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0438\u0445 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0439\u043e\u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438.\n\n\u041c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b (\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f) \u0435\u0433\u043e \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c.","1f6ddb92":"\u042d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0440\u0430\u0437\u0443 \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435.","1b8407ae":"### \u042d\u0442\u0430\u0436\u0438","53e88268":"\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u0439","c756399e":"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0443, \u0447\u0442\u043e Square \u043b\u0438\u0431\u043e \u0441\u043f\u0443\u0442\u0430\u043d\u0430 \u0441 LifeSquare, \u043b\u0438\u0431\u043e \u0432 10 \u0440\u0430\u0437 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u043d\u0430\u0434\u043e - \u0432 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u044d\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044e","64438e8b":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 10000 instances, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u043d \u0432\u0435\u0441\u044c\u043c\u0430 \u043c\u0430\u043b, \u043f\u043e \u043c\u0435\u0440\u043a\u0430\u043c Machine Learning. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u0440\u043e\u043d\u044b \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e :).\n\n* Healthcare_1 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e 5202 non-null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e 48% \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0435\u0442 \u0432 \u044d\u0442\u043e\u0439 feature.\n* LifeSquare \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 7887 non-null \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e 22% \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0435\u0442 \u0432 \u044d\u0442\u043e\u0439 feature.\n\u0412\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u043d\u0435 \u0445\u043e\u0447\u0435\u0442\u0441\u044f - \u0431\u0443\u0434\u0443 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u0434\u0430\u043b\u044c\u0448\u0435.\n\n\u0412\u0441\u0435 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c Shops_2, Ecology_2 & Ecology_3. \u0418\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f \u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0432\u0441\u0435\u043c\u0438features:\n\n\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u044e \u0438\u0445 \u0432 1 \u0438 0","4419eb6d":"\u041f\u043e\u043b\u0430\u0433\u0430\u044e \u043f\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c \u0432\u0441\u0435 - \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u0432 \u0433\u043b\u0430\u0437\u0430 \u043d\u0435 \u0431\u0440\u043e\u0441\u0438\u043b\u043e\u0441\u044c.","dc68c48f":"### Healthcare_1","2c52b421":"## \u041f\u043e\u043d\u044f\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","e78e1946":"0 - \u044d\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \n\u0412 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0432\u0435\u0440\u0445\u043d\u0435\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b - \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e \u0435\u0435 = 5 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e (\u0432\u0441\u0435\u0433\u043e 4 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \"\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442\" - \u0432\u0435\u0441\u044c\u043c\u0430 \u043d\u0435\u043f\u043b\u043e\u0445\u043e)","a4a2c365":"\u0412\u044b\u0433\u0440\u0443\u0436\u0430\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0444\u0430\u0439\u043b.","5be6a981":"\u041c\u043d\u043e\u0433\u0438\u0435 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u0432\u0440\u043e\u0434\u0435 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0441\u0432\u044b\u0448\u0435 3000 \u043c^2 \u0438\u043b\u0438 10000 \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430. \n\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u043c\u0438, \u043d\u043e \u044f \u0431\u0443\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0441 \u044d\u0442\u0438\u043c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c."}}