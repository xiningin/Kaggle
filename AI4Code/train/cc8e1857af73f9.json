{"cell_type":{"f8dd3447":"code","b494cdad":"code","80e35358":"code","c9bd6586":"code","400fee17":"code","5205cc18":"code","58faaec2":"code","c4047634":"code","7512570c":"code","937977fe":"code","135b2589":"code","a857e1e1":"code","5a0d1dad":"code","0f1da315":"code","0ca2e4fb":"markdown","1c674d7b":"markdown","be56a610":"markdown","16a67962":"markdown","bd973291":"markdown","72406611":"markdown","66815d43":"markdown"},"source":{"f8dd3447":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b494cdad":"data = pd.read_csv('\/kaggle\/input\/heart-failure-prediction\/heart.csv')\ndata.head()","80e35358":"X = data.iloc[:,:-1]\ny = data.iloc[:,-1]","c9bd6586":"categorical_cols = data.select_dtypes(include = ['object_'])\ncategorical_cols_names = categorical_cols.keys()\nnum_cols = X.select_dtypes(include = ['integer'])\nnum_cols_names = num_cols.keys()","400fee17":"from sklearn.preprocessing import LabelEncoder,StandardScaler,OneHotEncoder","5205cc18":"print(categorical_cols.describe())","58faaec2":"tobe_label_encoded = categorical_cols[['Sex','ExerciseAngina']]\nle = LabelEncoder()\ntobe_label_encoded.iloc[:,0] = le.fit_transform(tobe_label_encoded.iloc[:,0])\ntobe_label_encoded.iloc[:,1] = le.fit_transform(tobe_label_encoded.iloc[:,1])\nprint(tobe_label_encoded)","c4047634":"ohe = OneHotEncoder(sparse=False)\ntobe_oh_encoded = pd.DataFrame({'ChestPainType':X.iloc[:,2],'RestingECG':X.iloc[:,6],'ST_Slope' : X.iloc[:,10]})\noh_encoded = pd.get_dummies(tobe_oh_encoded,prefix='dummy')\nprint(oh_encoded)","7512570c":"scaler = StandardScaler()\nnum_cols_scaled = pd.DataFrame(scaler.fit_transform(num_cols),columns=num_cols_names)\nprint(num_cols_scaled)","937977fe":"data_prepared = pd.concat([tobe_label_encoded,oh_encoded,num_cols_scaled],axis = 1)","135b2589":"print(data_prepared)","a857e1e1":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(data_prepared,y,test_size=0.2,random_state = 0)","5a0d1dad":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\nclf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)\ndf = pd.DataFrame({\"y\":y_test,'y_pred':y_pred})\ndf","0f1da315":"from sklearn.metrics import r2_score,confusion_matrix,accuracy_score\nprint(r2_score(y_test,y_pred))\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))","0ca2e4fb":"Now lets check how many unique categories are present in categorical columns ","1c674d7b":"so sex and exerciseagina columns contain 2 categories (use labelencoder)\nand rest categorical columns contain more than 2 categories as you can see in the above table","be56a610":"To keep things simple we will label_encode onehot_encode and scale seperaely and then we will concatenate those columns  ","16a67962":"**One Hot Encoding**","bd973291":"**Label Encoding**","72406611":"**Standard scaling**","66815d43":"Now lets connect all the columns together "}}