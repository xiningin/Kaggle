{"cell_type":{"831e0f3b":"code","b5ff7803":"code","5e1580e2":"code","0d9b7d5c":"code","badf2d62":"code","7799f8cb":"code","5a67a5bf":"code","dd983f56":"code","7998d895":"code","8e2be98a":"code","59fd9aae":"code","77ba7d6b":"code","4f70166f":"code","aa39a546":"code","598d79c8":"code","3319eea1":"code","3bc05963":"code","22c6502d":"code","298d4f06":"markdown","80f4fd47":"markdown","20292401":"markdown","fcf11513":"markdown","2a93f108":"markdown","565b0d18":"markdown","db9697f7":"markdown","2ae861e5":"markdown","ea388f27":"markdown","b14f1e37":"markdown"},"source":{"831e0f3b":"\n!pip install livelossplot\nfrom livelossplot.tf_keras import PlotLossesCallback\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\n\nimport numpy as np\nnp.random.seed(42)\nimport warnings;warnings.simplefilter('ignore')\n%matplotlib inline\nprint('Tensorflow version:', tf.__version__)","b5ff7803":"train_images = pd.read_csv('..\/input\/seti2ddata\/train\/train\/images.csv', header=None)\n# There is an error in the training label csv file existing in seti2ddata available on Kaggle. So, uploaded the correct training label\ntrain_labels = pd.read_csv('..\/input\/seti2ddata-correct\/train_labels.csv', header=None) \n\nval_images = pd.read_csv('..\/input\/seti2ddata\/validation\/validation\/images.csv', header=None)\nval_labels = pd.read_csv('..\/input\/seti2ddata\/validation\/validation\/labels.csv', header=None)","5e1580e2":"train_images.head()","0d9b7d5c":"train_labels.head()","badf2d62":"val_images.head()","7799f8cb":"val_labels.head()","5a67a5bf":"print(\"Training set shape:\", train_images.shape, train_labels.shape)\nprint(\"Validation set shape:\", val_images.shape, val_labels.shape)","dd983f56":"# reshape the data into a shape that fits with CNN\n\nx_train = train_images.values.reshape(3200, 64, 128, 1)\nx_val = val_images.values.reshape(800, 64, 128, 1)\n\ny_train = train_labels.values\ny_val = val_labels.values","7998d895":"# Take 3 training images randomely and draw them \nplt.figure(0, figsize=(12,12))\nfor i in range(1,4):\n    plt.subplot(1,3,i)\n    img = np.squeeze(x_train[np.random.randint(0, x_train.shape[0])]) # np.squeeze is used to delete non  useful dimension in (64,128,1) and transform the shape into (64,128) in order to fit into plt.imshow\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(img,cmap=\"gray\")","8e2be98a":"# Data augmentation using ImageDataGenerator\n# An input batch of images is presented to the ImageDataGenerator.\n# The ImageDataGenerator transforms each image in the batch by a series of random translations, rotations, etc.\n# The randomly transformed batch is then returned to the calling function.\n#The ImageDataGenerator is not returning both the original data and the transformed data \u2014 the class only returns the randomly transformed data.\n# Ref:https:\/\/www.pyimagesearch.com\/2019\/07\/08\/keras-imagedatagenerator-and-data-augmentation\/\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator \n\ndatagen_train = ImageDataGenerator(horizontal_flip=True)\ndatagen_train.fit(x_train)\n\ndatagen_val = ImageDataGenerator(horizontal_flip=True)\ndatagen_val.fit(x_val)","59fd9aae":"from tensorflow.keras.layers import Dense, Input, Dropout,Flatten, Conv2D\nfrom tensorflow.keras.layers import BatchNormalization, Activation, MaxPooling2D\n\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.optimizers import Adam, SGD\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.utils import plot_model","77ba7d6b":"# Initialising the CNN\nmodel = Sequential()\n\n# 1st Convolution\nmodel.add(Conv2D(32,(5,5), padding='same', input_shape=(64, 128,1)))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# 2nd Convolution layer\nmodel.add(Conv2D(64,(5,5), padding='same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\n# Flattening\nmodel.add(Flatten())\n\n# Fully connected layer\nmodel.add(Dense(1024))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.4))\n\nmodel.add(Dense(4, activation='softmax'))","4f70166f":"# Here, we have a initial learning rate that is fixed during first 5 steps and decreases exponentially afterwards\ninitial_learning_rate = 0.005\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate,\n    decay_steps=5,\n    decay_rate=0.96,\n    staircase=True)   \n\noptimizer = Adam(learning_rate=lr_schedule)","aa39a546":"model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy']) # https:\/\/www.tutorialspoint.com\/keras\/keras_model_compilation.htm\nmodel.summary()","598d79c8":"# ModelCheckpoint callback is used in conjunction with training using model.fit() to save a model or weights (in a checkpoint file) at some interval, \n#so the model or weights can be loaded later to continue the training from the state saved.\n# Ref: https:\/\/keras.io\/api\/callbacks\/model_checkpoint\/\n# https:\/\/towardsdatascience.com\/checkpointing-deep-learning-models-in-keras-a652570b8de6\n\ncheckpoint = ModelCheckpoint(\"model_weights.h5\", monitor='val_loss',\n                             save_weights_only=True, mode='min', verbose=0)\n# PlotLossesCallback() is not supported by Tensorflow 2.2. \n# So, this is not used in the project. But still kept it as this can be useful when we will have tensorflow 2.1\ncallbacks = [PlotLossesCallback(), checkpoint]#, reduce_lr] \nbatch_size = 32\nhistory = model.fit(\n    datagen_train.flow(x_train, y_train, batch_size=batch_size, shuffle=True),\n    steps_per_epoch=len(x_train)\/\/batch_size,\n    validation_data = datagen_val.flow(x_val, y_val, batch_size=batch_size, shuffle=True),\n    validation_steps = len(x_val)\/\/batch_size,\n    epochs=12,\n    callbacks=checkpoint\n)","3319eea1":"model.evaluate(x_val, y_val)","3bc05963":"from sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nimport seaborn as sns\n\ny_true = np.argmax(y_val, 1)\ny_pred = np.argmax(model.predict(x_val), 1)\nprint(metrics.classification_report(y_true, y_pred))\nprint(\"Classification accuracy: %0.6f\" % metrics.accuracy_score(y_true, y_pred))","22c6502d":"# Values of Recall from above confusion table can be seen on the diagonal below\nlabels = [\"squiggle\", \"narrowband\", \"noise\", \"narrowbanddrd\"]\n\nax= plt.subplot()\nsns.heatmap(metrics.confusion_matrix(y_true, y_pred, normalize='true'), annot=True, ax = ax, cmap=plt.cm.Blues); #annot=True to annotate cells\n\n# labels, title and ticks\nax.set_title('Confusion Matrix'); \nax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels);","298d4f06":"## Task 8: Model Evaluation","80f4fd47":"## Task 5: Creating the CNN Model","20292401":"## Task 7: Training the Model","fcf11513":"## Task 6: Learning Rate Scheduling and Compile the Model","2a93f108":"> In this project, you will learn the basics of using Keras with TensorFlow as its backend and use it to solve an image classification problem. The data consists of 2D spectrograms of deep space radio signals collected by the Allen Telescope Array at the SETI Institute. The spectrograms will be treated as images to train an image classification model to classify the signals into one of four classes. By the end of the project, you will have built and trained a convolutional neural network from scratch using Keras to classify signals from space. \n\nThe model could be optimized using hyperparameter tuning. However, the goal of this notebook is not to build a high performing classifier, rather to show the basic steps to build an image classifier using convolutional neural network. The readers can also get the idea of \n* data augmentation using ImageDataGenerator, and \n* Way of saving the weights of a model at some interval which can later be used for transfer learning through 'callbacks' during fitting the model","565b0d18":"## Task 3: Plot 2D Spectrograms","db9697f7":"## Task 2: Load and Preprocess SETI Data","2ae861e5":"### Task 1: Import Libraries","ea388f27":"## Classify Radio Signals from Space with Keras","b14f1e37":"## Task 4: Create Training and Validation Data Generators"}}