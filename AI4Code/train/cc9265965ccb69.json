{"cell_type":{"a9ebf8c9":"code","4c81922e":"code","09d82f3c":"code","c88ea4aa":"code","995ca002":"code","57ed6367":"code","bf97a91f":"code","c6b93474":"code","1d7a4caa":"code","7199711d":"code","9b6df849":"code","a4b6b209":"code","1369abb2":"code","91d63b53":"code","8d45475b":"code","51882675":"code","46c05c67":"code","bf21d27b":"code","937282cf":"code","df37d2b4":"code","81495955":"code","70a702f5":"code","e56352f7":"code","8f97ce3a":"code","2cf549cc":"code","816cef54":"code","b338cbcb":"code","34d59c28":"markdown","862bb767":"markdown","dfd38b82":"markdown","641ea803":"markdown","846ba815":"markdown","9c19dc89":"markdown","a8b0e2a0":"markdown","a9f921ce":"markdown","5e9f87fb":"markdown","cc321f55":"markdown","2826d4b5":"markdown","601a2eaf":"markdown","4c421b11":"markdown","e0abc0b5":"markdown","c093bd24":"markdown","1a7a4891":"markdown","543920d5":"markdown","debaf789":"markdown","975e7ad6":"markdown","3b2a748b":"markdown"},"source":{"a9ebf8c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/signal-processing'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c81922e":"#Lets insert the necessary libraries to work with \nfrom scipy import signal\nimport matplotlib.pyplot as plt\nimport pandas as pd \nimport numpy as np \nimport matplotlib as mpl\n\nfrom scipy.stats import norm\nimport seaborn as sns\nfrom scipy import stats","09d82f3c":"file_1 = pd.read_table('..\/input\/signal-processing\/fmserp1901.txt', sep=\"\\t\", header=None)\nfile_1.head()","c88ea4aa":"file_1 = pd.read_table('..\/input\/signal-processing\/fmserp1901.txt', sep=\"\\t\", header=None)\nfile_2 = pd.read_table('..\/input\/signal-processing\/fmserp1902.txt', sep=\"\\t\", header=None)\nfile_3 = pd.read_table('..\/input\/signal-processing\/fmserp1903.txt', sep=\"\\t\", header=None)\nresult =pd.concat([file_1, file_2, file_3], ignore_index=True)\n# Replacing the comma values \n\nvol = result.iloc[:,0] =result.iloc[:,0].str.replace(',', '.').astype(float)\nvol=abs(vol)\npa = result.iloc[:,1] = result.iloc[:,1].str.replace(',', '.').astype(float)\npc = result.iloc[:,2] = result.iloc[:,2].str.replace(',', '.').astype(float)\ni  = result.iloc[:,3] = result.iloc[:,3].str.replace(',', '.').astype(float)","995ca002":"result.shape","57ed6367":"result.head()","bf97a91f":"result.describe()","c6b93474":"result.columns = ['voltage', 'pres_inlet', 'pres_outlet', 'elec']","1d7a4caa":"# result.plot(subplots = True )\nresult.plot(subplots = True , figsize=(12,8));","7199711d":"t= len(result)\ntest_list = [0 + (x * 0.00048828125) for x in range(0, t)]\nx = test_list[0:t]","9b6df849":"fig = plt.figure(figsize =  (12,5))\nplt.plot(x,vol, c='black', label = 'Voltage' )\nplt.xticks(rotation=90, fontsize = 16, fontname = 'Arial')\nplt.yticks(rotation=90,fontsize = 16, fontname = 'Arial')\nplt.xlabel('Time \/ [s]', fontsize = 16)\nplt.ylabel('Voltage \/ [Volt]', fontsize = 16)\nplt.legend(loc='upper right', fontsize = 16)\nplt.ticklabel_format(axis='y', style = 'sci', scilimits=(0,0))","a4b6b209":"vol.skew()\n","1369abb2":"vol.kurt()","91d63b53":"# Normal distribution for the voltage \n\nsns.distplot(vol, fit=norm, color=\"r\")\n","8d45475b":"# Normal distribution for the voltage \n\nsns.distplot(pa, fit=norm, color=\"g\")\n\n","51882675":"# Normal distribution for the voltage \n\nsns.distplot(pc, fit=norm, color=\"k\")","46c05c67":"import seaborn as sns\ncorrmat = result.corr()\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corrmat, vmax=0.7, square=True, cmap=\"cubehelix\", annot=True);\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\n","bf21d27b":"import seaborn as sns\ncorrmat = result.corr()\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corrmat, vmax=0.7, square=True, cmap=\"plasma\", annot=True);\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)\n","937282cf":"vol_80 = signal.detrend(vol, axis = -1,type = 'linear', bp =  np.arange(0,len(vol),80*2048))\nvol_5 = signal.detrend(vol, axis = -1,type = 'linear', bp =  np.arange(0,len(vol),5*2048))\n\nfig = plt.figure(figsize =  (12,5))\n\nplt.plot(x,vol, c='black', label = 'Voltage actual' )\nplt.plot(x,vol_80, c='blue', label = 'Voltage (80s window)' )\nplt.plot(x,vol_5, c='red', label = 'Voltage (5s window)' )\n\n\nplt.xticks(rotation=90, fontsize = 16, fontname = 'Arial')\nplt.yticks(rotation=90,fontsize = 16, fontname = 'Arial')\nplt.xlabel('Time \/ [s]', fontsize = 16)\nplt.ylabel('Voltage \/ [Volt]', fontsize = 16)\nplt.legend(loc='upper right', fontsize = 16)\nplt.ticklabel_format(axis='y', style = 'sci', scilimits=(0,0))","df37d2b4":"pa_80 = signal.detrend(pa, axis = -1,type = 'linear', bp =  np.arange(0,len(pa),80*2048))\npa_5 = signal.detrend(pa, axis = -1,type = 'linear', bp =  np.arange(0,len(pa),5*2048))\n\nfig = plt.figure(figsize =  (12,6))\n\nplt.plot(x,pa, c='black', label = 'Pres_anode actual' )\nplt.plot(x,pa_80, c='blue', label = 'Pres_anode (80s window)' )\nplt.plot(x,pa_5, c='red', label = 'Pres_anode (5s window)' )\n\n\nplt.xticks(rotation=90, fontsize = 16, fontname = 'Arial')\nplt.yticks(rotation=90,fontsize = 16, fontname = 'Arial')\nplt.xlabel('Time \/ [s]', fontsize = 16)\nplt.ylabel('Voltage \/ [Volt]', fontsize = 16)\nplt.legend(loc='upper right', fontsize = 16)\nplt.ticklabel_format(axis='y', style = 'sci', scilimits=(0,0))","81495955":"pc_80 = signal.detrend(pa, axis = -1,type = 'linear', bp =  np.arange(0,len(pc),80*2048))\npc_5  = signal.detrend(pa, axis = -1,type = 'linear', bp =  np.arange(0,len(pc),5*2048))\n\nfig = plt.figure(figsize =  (12,6))\n\nplt.plot(x,pc, c='black', label = 'Pres_cathode actual' )\nplt.plot(x,pc_80, c='blue', label = 'Pres_cathode (80s window)' )\nplt.plot(x,pc_5, c='red', label = 'Pres_cathode (5s window)' )\n\n\nplt.xticks(rotation=90, fontsize = 16, fontname = 'Arial')\nplt.yticks(rotation=90,fontsize = 16, fontname = 'Arial')\nplt.xlabel('Time \/ [s]', fontsize = 16)\nplt.ylabel('Voltage \/ [Volt]', fontsize = 16)\nplt.legend(loc='upper right', fontsize = 16)\nplt.ticklabel_format(axis='y', style = 'sci', scilimits=(0,0))","70a702f5":"sns.distplot(vol_5, fit=norm, color=\"r\")","e56352f7":"sns.distplot(pa_5, fit=norm, color=\"k\")","8f97ce3a":"sns.distplot(pc_5, fit=norm, color=\"g\")","2cf549cc":"parts = 200\ntwo_split = np.array_split(vol_5, parts)\n\nb3 = []\nfor array in two_split:\n    a =np.std(array)\n    b3.append(a)\nx1 = np.linspace(0, 1800, parts)\n\n\nmpl.rcParams['font.size']=16\nplt.rc('font', size=16)\nplt.rcParams[\"axes.edgecolor\"] = \"black\"\nplt.rcParams[\"axes.linewidth\"] = 4\n\n\nfig = plt.figure(figsize =  (12, 6))\n\n\nplt.plot(x1,b3, c='red', label = 'Voltage')\nplt.xlabel('Time \/ s',  fontname = 'Arial', weight = 'bold')\nplt.ylabel('STD \/ Bar',  fontname = 'Arial', weight = 'bold')\nplt.legend(loc='upper right', fontsize = 16)\n\nplt.xticks( fontname = 'Arial', weight = 'bold')\n\n\nplt.yticks( fontname = 'Arial', weight = 'bold')\nplt.ticklabel_format(axis='y', scilimits=(0,0))","816cef54":"parts = 200\ntwo_split = np.array_split(pa_5, parts)\n\nb3 = []\nfor array in two_split:\n    a =np.std(array)\n    b3.append(a)\nx1 = np.linspace(0, 1800, parts)\n\n\nmpl.rcParams['font.size']=16\nplt.rc('font', size=16)\nplt.rcParams[\"axes.edgecolor\"] = \"black\"\nplt.rcParams[\"axes.linewidth\"] = 4\n\n\nfig = plt.figure(figsize =  (12, 6))\n\n\nplt.plot(x1,b3, c='red', label = 'Pressure anode')\nplt.xlabel('Time \/ s',  fontname = 'Arial', weight = 'bold')\nplt.ylabel('STD \/ Bar',  fontname = 'Arial', weight = 'bold')\nplt.legend(loc='upper right', fontsize = 16)\n\nplt.xticks( fontname = 'Arial', weight = 'bold')\n\n\nplt.yticks( fontname = 'Arial', weight = 'bold')\nplt.ticklabel_format(axis='y', scilimits=(0,0))","b338cbcb":"parts = 200\ntwo_split = np.array_split(pc_5, parts)\n\nb3 = []\nfor array in two_split:\n    a =np.std(array)\n    b3.append(a)\nx1 = np.linspace(0, 1800, parts)\n\n\nmpl.rcParams['font.size']=16\nplt.rc('font', size=16)\nplt.rcParams[\"axes.edgecolor\"] = \"black\"\nplt.rcParams[\"axes.linewidth\"] = 4\n\n\nfig = plt.figure(figsize =  (12, 6))\n\n\nplt.plot(x1,b3, c='red', label = 'Pressure cathode')\nplt.xlabel('Time \/ s',  fontname = 'Arial', weight = 'bold')\nplt.ylabel('STD \/ Bar',  fontname = 'Arial', weight = 'bold')\nplt.legend(loc='upper right', fontsize = 16)\n\nplt.xticks( fontname = 'Arial', weight = 'bold')\n\n\nplt.yticks( fontname = 'Arial', weight = 'bold')\nplt.ticklabel_format(axis='y', scilimits=(0,0))","34d59c28":"[![pemfc.png](https:\/\/i.postimg.cc\/NGKczwry\/pemfc.png)](https:\/\/postimg.cc\/5jWTXTg1)","862bb767":"Colourful !! Signal processing is actually colourful !!! Decoding the information. Based on the plots , voltage is highly unevenly distributed which shows some issues with respect to the fluctuations. , pressure values again have fluctuations and current is dead .... Its good to keep it out. A very symmetrical distribution of current shows it has no effect by the system. ","dfd38b82":"Lets add column names and plot the data !!!!","641ea803":"**Let's change the cmap , always good to play and represent data in an interesting way !!! Remember the more interesting presentation , the better the results will be....**","846ba815":"Lets explore the data. The three files added are text file contains the voltage, pressure at inlet, pressure at outlet and current in the signal. The duration of file is 10 minute each so total 30 minute signal. Start by exploring the first file .... ","9c19dc89":"Let's check the voltage distribution plot !! ","a8b0e2a0":"Considering data above, current value can be excluded from the calculations as it is way too less and it implies a reading \/ recording error. ","a9f921ce":"The data collection is in frequency (1s = 2048 Hz) of 2048 points. It means lets convert this to seconds and analyse further. ","5e9f87fb":"After detrending the signals we can see that the the data is normalize , however again I will mention the aim is not to normalize data completely ? \n\n**Why?**\n\nBecause if a very small data window is chosen , normally we will loose high frequency components or other additional information. Moreover the more smaller the window , higher will be the computational times and more difficult it will be to anlyse signals. ","cc321f55":"Based on the normal plot distribution, the result of voltage are not good which shows a huge shift. We will not directly apply tools to make data stationary but apply further signal treatment technique and chek if the data is normalized or not.  \n\n\nNow let's apply statistical models on the signals. These signals are stochastic signals which can only be represented by probabilistic distribution. Nor they have a preferred outcome , nor they can be determined. In order to analyse the signal statistical tools can be used. They can be mean , standard deviation ,skewness or kurtosis, but here's a catch in order to apply this technique your signal needs to be stationary. \n\nHahaha , well the signal is nowhere near to stationarity ....There are many options to check this property.  \n**\nWhat next ?** \n\nDetrend signal. Detrend signal means to remove the trends in the signal but simply removing trends will not solve the case. So we need to divide this signal into small parts , break them into small interval of time and then apply detrend procedure. \n\nFor the moment I will use time window of 5s but in the later tutorials will explain the way to calculate efficient time window. \n\nLet's do it ","2826d4b5":"Based on the correlation plot, we don't see a strong correlation among different parameters !!! Moreover current shows the weakest. Hence we omit analysing relation between these parameters !!! How ever in future analysis , we will introduce data which has relations among each other. ","601a2eaf":"Ok let's plot the signal of voltage on time domain , with tick labels and other information . ","4c421b11":"Let's merge the files in order to analyse the 30 minute signal. We will use concat to merge the files in the signal.  ","e0abc0b5":"The data has no column names so columns names need to be added , The first column is **voltage**, second - **pressure at inlet** , third -**pressure at outlet** and finally current.As we can check,  Voltage values are negative , values are seperated by commas , current value is negative. Voltage value needs to be and same for current. Probably the probe is connected in opposite direction. ","c093bd24":"\nThis notebook is all about analysing stochiastic signals , in order to obtain some information hidden in them. This data is a sample data from fuel cell device. More information about fuel cell can be found here. (https:\/\/www.hydrogenics.com\/technology-resources\/hydrogen-technology\/fuel-cells\/), which works on hydrogen. Data science is slowly making a progress in this area in order to predict the parameters and analyse signals. \n\n**Why data science is helpful ?**\n\nThis is helpful because a fuel cell is highly complex device, it is not important to understand all parameters and to get a link between them. So we develop a black box model and then try to find relations using other algorithms such as neural network\/ logistics\/ SVM etc. \n\nHere we will be exploring the signals. In order to process the signal,lets explore the data first. Signal processing is important to understand the reality\/hidden information of the signals in specific domains. Not every signal are subjected to remove noise. In this tutorial, I will explore the signal in time domain and frequency domain and then to analyse the signals.","1a7a4891":"Let's check the relation among the variables , if the pressure and voltage are related to each other !!! ","543920d5":"Consider the above figure, the blue signal is detrended linear at a 80s window, and it shows sharp peaks at (500-750)s interval, however red signal shows a more or less uniform stationary signal with very less peaks because it is detrended at a 5s window. Now it is entirely choice of the user to use the time window. \n\n**How ?**\n\nIf the details needed are necessary to identify then do not use a very small window otherwise all the details will be lost. We keep up with small time windows.. Let's do it for other data too... ","debaf789":"Let's not check the normal distribution !!!! ","975e7ad6":"Here we come to end of this notebook of signal processing. Many things can be added , more filters can be used. More tools to anlyse stationary of the signals can be added and it entirely depends on the choice of the user. \n\nBased on the result there is no strong relation between parameters.\n\nWe see how breaking signals in to smaller parts can acheive staionarity, moreover how std values can be useful to anlyse signals.\n\nFor example comparing different voltage, what we can confirm ? \n1) If the std value is higher then the disturbances , there is mismanagement of electricity , losses in the membrane or other issues related to improper water management... \nSame theory can be extended to fuel cell approach.... ","3b2a748b":"We are approaching the end , signal is more or less static , we have chosen a window !!! Now its time to calcuate the std of the signals. SInce we have divided the signals into many small intervals of 5s window hence the standard deviation will be of these break points. Let's calculate the standard deviation of the of all the signals.... "}}