{"cell_type":{"e7089135":"code","7a05a7aa":"code","06e2160f":"code","76e1fa76":"code","ed809c18":"code","3b440cd0":"code","7bba2572":"code","12745df3":"code","46c78d52":"markdown","a6f1e891":"markdown","919946c7":"markdown"},"source":{"e7089135":"import numpy as np\nimport pandas as pd\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('fivethirtyeight')\n\nfrom scipy import stats\nfrom tqdm import tqdm_notebook as tqdm\nimport os","7a05a7aa":"# load submission files\n\nBASE_PATH = \"..\/input\/trends-assessment-prediction\"\nSUBMISSION_FILES_PATH = \"..\/input\/trends-ensemble-files\"\n\nsubmission = pd.read_csv(f\"{BASE_PATH}\/sample_submission.csv\")\n\n# high scoring public kernels\nENSEMBLES = [\n    {\"file0\": f\"{SUBMISSION_FILES_PATH}\/submission4.csv\", \"weight\": 1},\n    {\"file1\": f\"{SUBMISSION_FILES_PATH}\/submission6.csv\", \"weight\": 1},\n    {\"file2\": f\"{SUBMISSION_FILES_PATH}\/submission7.csv\", \"weight\": 1},\n    {\"file3\": f\"{SUBMISSION_FILES_PATH}\/submission8.csv\", \"weight\": 1},\n    {\"file4\": f\"{SUBMISSION_FILES_PATH}\/submission9.csv\", \"weight\": 1},\n]\n\n","06e2160f":"subs = submission.copy()\nfor i, ensemble in enumerate(ENSEMBLES):\n    print(ensemble)\n    tmp = pd.read_csv(ensemble[f'file{i}'])\n    tmp.sort_values('Id', inplace=True)\n    subs[f\"predicted_file{i}\"] = tmp[\"Predicted\"]\n\nsubs.drop(columns=[\"Id\", \"Predicted\"], inplace=True)","76e1fa76":"subs.head(10)","ed809c18":"# Compute the correlation matrix\ncorr = subs.corr()\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 12))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, annot=True, fmt=\"g\",\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, ax=ax)\nax.set_ylim(corr.shape[0], 0)\nplt.yticks(rotation=0)","3b440cd0":"def mean_ensemble(row):\n    return np.mean(row.values)","7bba2572":"submission[\"Predicted\"] = subs.apply(mean_ensemble, axis=1)\nsubmission.to_csv(\"submission.csv\", index=False)","12745df3":"submission.head()","46c78d52":"## Simple Mean Ensemble","a6f1e891":"## Reading all files","919946c7":"## Finding Correlation between submissions"}}