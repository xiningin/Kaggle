{"cell_type":{"b5729757":"code","a8d2076e":"code","a49a8c94":"code","d484c93b":"code","b6ac4ecc":"code","41508162":"code","5fc32070":"code","96c3270a":"code","a0423cb2":"code","7ad8f5a9":"code","a8facb3d":"markdown","b87e0723":"markdown","9ae6b400":"markdown","21980ee4":"markdown","436d50a0":"markdown","a34791db":"markdown","29241123":"markdown","d8018d2a":"markdown","91485c42":"markdown","919df577":"markdown","27bc409c":"markdown"},"source":{"b5729757":"import numpy as np\nimport os\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs","a8d2076e":"SEED = 42\nN_CLUSTERS = 5\nN_SAMPLES = 2000\nnp.random.seed(SEED)\n\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)\n\nROOT_DIR = \".\"\nFOLDER_NAME = \"kmeans\"\nIMAGES_PATH = os.path.join(ROOT_DIR, \"images\", FOLDER_NAME)\nos.makedirs(IMAGES_PATH, exist_ok=True)","a49a8c94":"def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n    print(\"Saving figure\", fig_id)\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)\n    \ndef plot_data(X):\n    plt.plot(X[:, 0], X[:, 1], 'k.', markersize=2)\n\ndef plot_centroids(centroids, weights=None, circle_color='w', cross_color='k'):\n    if weights is not None:\n        centroids = centroids[weights > weights.max() \/ 10]\n    plt.scatter(centroids[:, 0], centroids[:, 1],\n                marker='o', s=35, linewidths=8,\n                color=circle_color, zorder=10, alpha=0.9)\n    plt.scatter(centroids[:, 0], centroids[:, 1],\n                marker='x', s=2, linewidths=12,\n                color=cross_color, zorder=11, alpha=1)\n\ndef plot_decision_boundaries(clusterer, X, resolution=1000, show_centroids=True,\n                             show_xlabels=True, show_ylabels=True):\n    mins = X.min(axis=0) - 0.1\n    maxs = X.max(axis=0) + 0.1\n    xx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], resolution),\n                         np.linspace(mins[1], maxs[1], resolution))\n    Z = clusterer.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n\n    plt.contourf(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n                cmap=\"Pastel2\")\n    plt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n                linewidths=1, colors='k')\n    plot_data(X)\n    if show_centroids:\n        plot_centroids(clusterer.cluster_centers_)\n\n    if show_xlabels:\n        plt.xlabel(\"$x_1$\", fontsize=14)\n    else:\n        plt.tick_params(labelbottom=False)\n    if show_ylabels:\n        plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n    else:\n        plt.tick_params(labelleft=False)","d484c93b":"blob_centers = np.array(\n    [[ 0.2,  2.3],\n     [-1.5 ,  2.3],\n     [-2.8,  1.8],\n     [-2.8,  2.8],\n     [-2.8,  1.3]])\nblob_std = np.array([0.4, 0.3, 0.1, 0.1, 0.1])\n\nX, y = make_blobs(n_samples=N_SAMPLES, centers=blob_centers,\n                  cluster_std=blob_std, random_state=SEED)","b6ac4ecc":"\nkmeans = KMeans(n_clusters=N_CLUSTERS, random_state=SEED)\ny_pred = kmeans.fit_predict(X)\ny_pred","41508162":"y_pred is kmeans.labels_","5fc32070":"kmeans.cluster_centers_","96c3270a":"kmeans.labels_","a0423cb2":"X_new = np.array([[0, 2], [3, 2], [-3, 3], [-3, 2.5]])\nkmeans.predict(X_new)","7ad8f5a9":"plt.figure(figsize=(8, 4))\nplot_decision_boundaries(kmeans, X)\nsave_fig(\"voronoi_plot\")\nplt.show()","a8facb3d":"# Cluster using KMeans","b87e0723":"# import libraries","9ae6b400":"# predict new X","21980ee4":"# make data ","436d50a0":"## make labels","a34791db":"# Kmeans Centers","29241123":"# Voronoi plot","d8018d2a":"# KMeans Label == y_pred ","91485c42":"# common functions","919df577":"# Kmeans Label","27bc409c":"# global variables"}}