{"cell_type":{"0b56ad66":"code","bd0b91cd":"code","a11557c3":"code","fbcd2386":"code","64ec8dc1":"code","8117ddd8":"code","541aecf9":"code","dffd21df":"code","ca6a9368":"code","d1c7630c":"code","7676d9dc":"code","6ce0e0e1":"code","15d95e6d":"code","482a1887":"code","6d48ef62":"code","1754e054":"code","f2e4eb2a":"code","ae7e180d":"code","d9756e00":"markdown","77c61943":"markdown","afc65682":"markdown","ec606eb5":"markdown","1ed07bce":"markdown","dab087fe":"markdown","38fb44bb":"markdown","57764dee":"markdown","cf11eba0":"markdown","ba887bf7":"markdown"},"source":{"0b56ad66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd0b91cd":"!pip install yfinance\n!pip install finta\n!pip install chart_studio\n!pip install holidays","a11557c3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize']=20,7\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dropout,Dense\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport yfinance as yf\nimport datetime\nimport holidays\nfrom finta import TA\n\nimport chart_studio.plotly as py\nfrom plotly.graph_objs import * \nimport plotly.tools as tls\nimport plotly.graph_objects as go\nimport chart_studio.tools as ctls\n\nimport logging\n\nlogging.getLogger().setLevel(logging.ERROR)\n\nimport plotly.express as px","fbcd2386":"\"\"\"\nDefining some constants for data mining\n\"\"\"\n\nNUM_DAYS = 10000     # The number of days of historical data to retrieve\nINTERVAL = '1d'     # Sample rate of historical data\nsymbol = 'WMT'     # Symbol of the desired stock\n\n# List of symbols for technical indicators\nINDICATORS = ['RSI', 'MACD', 'STOCH','ADL', 'ATR', 'MOM', 'MFI', 'ROC', 'OBV', 'CCI', 'EMV', 'BASP', 'PIVOT_FIB', 'VORTEX']\n\n\"\"\"\nPull the historical data using yfinance\nRename the column names because finta uses the lowercase names\n\"\"\"\n\nstart = (datetime.date.today() - datetime.timedelta( NUM_DAYS ) )\nend = datetime.datetime.today()\n\ndf = yf.download(symbol, start=start, end=end, interval=INTERVAL)\ndf.rename(columns={\"Close\": 'close', \"High\": 'high', \"Low\": 'low', 'Volume': 'volume', 'Open': 'open'}, inplace=True)\ndf.tail()","64ec8dc1":"#preview last 60 days\nplt.figure(figsize=(20,7))\ndf_prev = df.iloc[-60:]\nfig = plt.figure()\ndf_prev['close'].plot(title = \"Price for last 60days of WMT\", ylabel = \"Price\", grid = True)\nfig.savefig('60daysprev.png')","8117ddd8":"data=df.sort_index(ascending=True,axis=0)\nnew_dataset=pd.DataFrame(index=range(0,len(df)),columns=['Close'])\nfor i in range(0,len(data)):\n   # new_dataset[\"Date\"][i]= data.index.values\n    #new_dataset[\"Date\"][i]= data.index.strftime(\"%m\/%d\/%Y\")[i]\n    new_dataset[\"Close\"][i]=data[\"close\"][i]\n    \nnew_dataset","541aecf9":"final_dataset=new_dataset.Close.values\ntrain_size = int(df.shape[0]*0.80)\ntrain_data=final_dataset[:train_size]\nvalid_data=final_dataset[train_size:]\n\nnew_dataset.index=data.index\n#new_dataset.drop(\"Date\",axis=1,inplace=True)","dffd21df":"scaler=MinMaxScaler(feature_range=(0,1))\nscaled_data=scaler.fit_transform(final_dataset.reshape(-1, 1))\n\nlook_back = 60\n\nx_train_data,y_train_data=[],[]\nfor i in range(look_back,len(train_data)):\n    x_train_data.append(scaled_data[i-look_back:i,0])\n    y_train_data.append(scaled_data[i,0])\n    \nx_train_data,y_train_data=np.array(x_train_data),np.array(y_train_data)\nx_train_data=np.reshape(x_train_data,(x_train_data.shape[0],x_train_data.shape[1],1))","ca6a9368":"\nlstm_model=Sequential()\nlstm_model.add(LSTM(units=50,return_sequences=True,input_shape=(x_train_data.shape[1],1)))\nlstm_model.add(LSTM(units=50))\nlstm_model.add(Dense(1))\n\nlstm_model.compile(loss='mean_squared_error',optimizer='adam')\nlstm_model.fit(x_train_data,y_train_data,epochs=1,batch_size=1,verbose=2)","d1c7630c":"inputs_data=new_dataset[len(new_dataset)-len(valid_data)-look_back:].values\ninputs_data=inputs_data.reshape(-1,1)\ninputs_data=scaler.transform(inputs_data)\n\n\nX_test=[]\nfor i in range(look_back,inputs_data.shape[0]):\n    X_test.append(inputs_data[i-look_back:i,0])\nX_test=np.array(X_test)\nX_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))\npredicted_closing_price=lstm_model.predict(X_test)\npredicted_closing_price=scaler.inverse_transform(predicted_closing_price)","7676d9dc":"predicted_closing_price","6ce0e0e1":"\ntrain_data=new_dataset[:train_size]\nvalid_data=new_dataset[train_size:]\nvalid_data['Predictions']=predicted_closing_price\nvalid_data.tail(20)","15d95e6d":"fig = plt.figure()\nplt.plot(train_data[\"Close\"])\nplt.plot(valid_data[['Close',\"Predictions\"]] )\nplt.ylabel('price')\nplt.xlabel('date')\nplt.title(f\"Prediction plot for {symbol}\")\n#plt.xticks([])\nplt.legend(['train', 'actual', 'prediction'], loc='upper left')\n\nfig.savefig('predplot.png')","482a1887":"sns.lineplot(data=valid_data)\n","6d48ef62":"#log in to plotly\n\nusername = \"***\"\napi_key = \"***\"\n\nctls.set_credentials_file(username = username, api_key = api_key)\n\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=valid_data.index, y=valid_data.Close,\n                    mode='lines',\n                    name='Close'))\nfig.add_trace(go.Scatter(x=valid_data.index, y=valid_data.Predictions,\n                    mode='lines',\n                    name='Predictionss'))\nfig.update_layout(title=f'Prediction plot of {symbol}',\n                   xaxis_title='Date',\n                   yaxis_title='Price')\n\nfig.show()\n#py.plot(fig, filename = f'Prediction Plot for {symbol}', auto_open = False)","1754e054":"from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error\n\n\nprint(f'MAE {mean_absolute_error(valid_data.Close, predicted_closing_price)}')\nprint(f'MSE {mean_squared_error(valid_data.Close, predicted_closing_price)}')\nprint(f'RMSE {np.sqrt(mean_squared_error(valid_data.Close, predicted_closing_price))}')\nprint(f'R2 {r2_score(valid_data.Close, predicted_closing_price)}')","f2e4eb2a":"x_input=valid_data.Close.values[valid_data.shape[0] - look_back:]\nx_input_scaled=scaler.fit_transform(x_input.reshape(-1, 1))\n\nx_input_data=np.reshape(x_input_scaled,(x_input_scaled.shape[0],x_input_scaled.shape[1],1))\n\n\nforecast_price=lstm_model.predict(x_input_data)\nforecast_price_s=scaler.inverse_transform(forecast_price)\n#forcast_price\n\n\nlast_tra = data.close[-1]\nlast_pred_tra = forecast_price_s[-2]\nnext_tra = forecast_price_s[-1]\nprint(f\"Last Trading day is {last_tra}\")\n\ndiff = last_tra - last_pred_tra\nnext_trading_day = next_tra + diff\n\nprint(f\"Prediction for the next Trading day is {next_trading_day}\")\n","ae7e180d":"\"\"\"\nDefining some constants for data mining\n\"\"\"\n\nNUM_DAYS = 10000     # The number of days of historical data to retrieve\nINTERVAL = '1d'     # Sample rate of historical data\nsymbol = \"AUDUSD=X\" #str(input(\"Please enter stock symbol: \"))     # Symbol of the desired stock\n\nprint(\"Pulling Data...\")\n# List of symbols for technical indicators\nINDICATORS = ['RSI', 'MACD', 'STOCH','ADL', 'ATR', 'MOM', 'MFI', 'ROC', 'OBV', 'CCI', 'EMV', 'BASP', 'PIVOT_FIB', 'VORTEX']\n\n\"\"\"\nPull the historical data using yfinance\nRename the column names because finta uses the lowercase names\n\"\"\"\n\nstart = (datetime.date.today() - datetime.timedelta( NUM_DAYS ) )\nend = datetime.datetime.today()\n\ndf = yf.download(symbol, start=start, end=end, interval=INTERVAL)\ndf.rename(columns={\"Close\": 'close', \"High\": 'high', \"Low\": 'low', 'Volume': 'volume', 'Open': 'open'}, inplace=True)\ndf.tail()\n\n\ndata=df.sort_index(ascending=True,axis=0)\nnew_dataset=pd.DataFrame(index=range(0,len(df)),columns=['Close'])\nfor i in range(0,len(data)):\n    new_dataset[\"Close\"][i]=data[\"close\"][i]\n    \nprint(\"Splitting Data...\")    \nfinal_dataset=new_dataset.Close.values\ntrain_size = int(df.shape[0]*0.80)\ntrain_data=final_dataset[:train_size]\nvalid_data=final_dataset[train_size:]\n\nnew_dataset.index=data.index\n\nprint(\"Pulling Data...\")\n#Scale\nscaler=MinMaxScaler(feature_range=(0,1))\nscaled_data=scaler.fit_transform(final_dataset.reshape(-1, 1))\n\nlook_back = 60\n\nx_train_data,y_train_data=[],[]\nfor i in range(look_back,len(train_data)):\n    x_train_data.append(scaled_data[i-look_back:i,0])\n    y_train_data.append(scaled_data[i,0])\n    \nx_train_data,y_train_data=np.array(x_train_data),np.array(y_train_data)\nx_train_data=np.reshape(x_train_data,(x_train_data.shape[0],x_train_data.shape[1],1))\nprint(\"Data Processed\")\n\n\nprint(\"Building Model...\")\n#bUILD MODEL\n\nlstm_model=Sequential()\nlstm_model.add(LSTM(units=50,return_sequences=True,input_shape=(x_train_data.shape[1],1)))\nlstm_model.add(LSTM(units=50))\nlstm_model.add(Dense(1))\n\n\ninputs_data=new_dataset[len(new_dataset)-len(valid_data)-look_back:].values\ninputs_data=inputs_data.reshape(-1,1)\ninputs_data=scaler.transform(inputs_data)\n\nlstm_model.compile(loss='mean_squared_error',optimizer='adam')\nlstm_model.fit(x_train_data,y_train_data,epochs=1,batch_size=1,verbose=2)\nprint(\"Data Trained\")\n#Predict\n\nX_test=[]\nfor i in range(look_back,inputs_data.shape[0]):\n    X_test.append(inputs_data[i-look_back:i,0])\nX_test=np.array(X_test)\nX_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))\npredicted_closing_price=lstm_model.predict(X_test)\npredicted_closing_price=scaler.inverse_transform(predicted_closing_price)\nprint(\"Data Predicted\")\n\n\n#Visualize\n\ntrain_data=new_dataset[:train_size]\nvalid_data=new_dataset[train_size:]\nvalid_data['Predictions']=predicted_closing_price\n\nplt.title(f\"Prediction Components plot for {symbol}\")\nplt.plot(train_data[\"Close\"])\nplt.plot(valid_data[['Close',\"Predictions\"]] )\nplt.ylabel('price')\nplt.xlabel('date')\n#plt.xticks([])\nplt.legend(['train', 'actual', 'prediction'], loc='upper left')\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=valid_data.index, y=valid_data.Close,\n                    mode='lines',\n                    name='Close'))\nfig.add_trace(go.Scatter(x=valid_data.index, y=valid_data.Predictions,\n                    mode='lines',\n                    name='Predictionss'))\nfig.update_layout(title=f'Prediction plot of {symbol}',\n                   xaxis_title='Date',\n                   yaxis_title='Price')\n\nfig.show()\n\n##Evaluate\n\nfrom sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error\n\nprint(\"Evaluating Results...\")\nprint(f'MAE {mean_absolute_error(valid_data.Close, predicted_closing_price)}')\nprint(f'MSE {mean_squared_error(valid_data.Close, predicted_closing_price)}')\nprint(f'RMSE {np.sqrt(mean_squared_error(valid_data.Close, predicted_closing_price))}')\nprint(f'R2 {r2_score(valid_data.Close, predicted_closing_price)}')\n\n\nprint(\"Forecasting Future Price...\")\n#Forecast\nx_input=valid_data.Close.values[valid_data.shape[0] - look_back:]\nx_input_scaled=scaler.fit_transform(x_input.reshape(-1, 1))\n\nx_input_data=np.reshape(x_input_scaled,(x_input_scaled.shape[0],x_input_scaled.shape[1],1))\n\n\nforecast_price=lstm_model.predict(x_input_data)\nforecast_price_s=scaler.inverse_transform(forecast_price)\n#forcast_price\n\nlast_tra = data.close[-1]\nlast_pred_tra = forecast_price_s[-2]\nnext_tra = forecast_price_s[-1]\nprint(f\"Last Trading day is {last_tra}\")\n\ndiff = last_tra - last_pred_tra\nnext_trading_day = next_tra + diff\n\nprint(f\"Prediction for the next Trading day is {next_trading_day}\")","d9756e00":"# Normalize & Filter Dataset","77c61943":"# Visualize","afc65682":"# Install & Import Modules","ec606eb5":"# Evaluation","1ed07bce":"# Create New Dataset","dab087fe":"# Import\/Download Data","38fb44bb":"# Predict","57764dee":"### That's a Beautiful R2","cf11eba0":"# Let's Try Forcast The Future","ba887bf7":"# Build & Train LSTM"}}