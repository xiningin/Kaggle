{"cell_type":{"19d10af6":"code","abb5c3fd":"code","c60c289a":"code","802f9f12":"code","18055275":"code","c09b880c":"code","6c7232c3":"code","ac02399a":"code","be539186":"code","f077de57":"code","65850e6f":"code","b42767e9":"code","f65cc655":"code","c2148d2a":"code","02fd91d0":"code","f0eb991f":"code","6bb321a5":"code","a2655a45":"code","105eda4d":"code","fc8bf5a1":"markdown","fddcdf54":"markdown","22a539df":"markdown","710caf10":"markdown","7b533919":"markdown","5645b144":"markdown","517f36e7":"markdown","b64e7702":"markdown","0129dd88":"markdown","b08ccb10":"markdown","95e9a8f1":"markdown"},"source":{"19d10af6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nfrom yellowbrick.regressor import residuals_plot\nimport matplotlib.pyplot as plt\nimport pandas_profiling\nimport folium\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","abb5c3fd":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/11-4-20 covid US case  deaths.csv')\nreport = pandas_profiling.ProfileReport(df)","c60c289a":"from IPython.display import display\ndisplay(report)","802f9f12":"df.info()","18055275":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\ndf.head()","c09b880c":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\n\nfig = go.Figure(go.Scatter(x = df['Total Cases'], y = df['Total Deaths'],\n                  name='Number of Cases & Deaths '))\n\nfig.update_layout(title='Number of Cases & Deaths (September)',\n                   plot_bgcolor='rgb(230, 230,230)',\n                   showlegend=True)\n\nfig.show()","6c7232c3":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\nfig = px.area(df, x=\"Total Deaths\", y=\"Total Cases\", color=\"State Region\",\n\t      line_group=\"State\/Territory\")\nfig.show()","ac02399a":"# create trace 1 that is 3d scatter\ndataframe = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\ntrace1 = go.Scatter3d(\n    x=dataframe['Total Cases'],\n    y=dataframe['State\/Territory'],\n    z=dataframe['State Region'],\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,17,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","be539186":"# this is a simplier and more detailed, colored than the one at top\ndf = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\nfig = px.scatter_3d(df, x='Total Cases', y='State\/Territory', z='State Region',\n                    color='Total Deaths')\nfig.show()","f077de57":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/10-2-20 covid19 cases and deaths.csv')\nfig = px.scatter_3d(df, x='Total Cases', y='State\/Territory', z='State Region',\n                    color='Total Deaths')\nfig.show()","65850e6f":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/11-4-20 covid US case  deaths.csv')\nfig = px.scatter_3d(df, x='Total Cases', y='State\/Territory', z='State Region',\n                    color='Total Deaths')\nfig.show()","b42767e9":"''''url = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\nstate_geo = f'{url}\/usa-states.json'\n\nbins = list(url['Total Deaths'].quantile([0, 0.5, 0.75, 0.90, 0.95, 1]))\n\nmap3 = folium.Map(location=[37, -102], zoom_start=4)\n\nchoropleth = folium.Choropleth(\n    geo_data=state_geo,\n    name='covid map',\n    data=url,\n    columns=['State\/Territory', 'Total Deaths'],\n    key_on='properties.name',\n    fill_color= 'YlOrRd',\n    fill_opacity=1.1,\n    line_opacity=0.2,\n    legend_name='Total Deaths',\n    bins = bins,\n    reset = True\n).add_to(map3)\n\nstyle_function = \"font-size: 15px; font-weight: bold\"\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(['name'],style=style_function, labels=False)\n)\n\nmap3'''","f65cc655":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/coffee-flavors.csv')\n\nfig = go.Figure()\n\nfig.add_trace(go.Sunburst(\n    ids=df.ids,\n    labels=df.labels,\n    parents=df.parents,\n    domain=dict(column=1),\n    maxdepth=2,\n    insidetextorientation='radial'\n))\n\nfig.update_layout(\n    margin = dict(t=10, l=10, r=10, b=10)\n)\n\nfig.show()","c2148d2a":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport pandas as pd\n\ndf1 = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/sunburst-coffee-flavors-complete.csv')\ndf2 = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/718417069ead87650b90472464c7565dc8c2cb1c\/coffee-flavors.csv')\n\nfig = make_subplots(\n    rows = 1, cols = 2,\n    column_widths = [0.4, 0.4],\n    specs = [[{'type': 'treemap', 'rowspan': 1}, {'type': 'treemap'}]]\n)\n\nfig.add_trace(\n    go.Treemap(\n        ids = df1.ids,\n        labels = df1.labels,\n        parents = df1.parents),\n    col = 1, row = 1)\n\nfig.add_trace(\n    go.Treemap(\n        ids = df2.ids,\n        labels = df2.labels,\n        parents = df2.parents,\n        maxdepth = 3),\n    col = 2, row = 1)\n\nfig.update_layout(\n    margin = {'t':0, 'l':0, 'r':0, 'b':0}\n)\n\nfig.show()","02fd91d0":"df = pd.read_csv('..\/input\/covid19-us-marchseptember\/11-4-20 covid US case  deaths.csv')\ndf.head()","f0eb991f":"import plotly.io as pio\npio.templates","6bb321a5":"df = pd.read_csv(\"..\/input\/covid19-us-marchseptember\/11-4-20 covid US case  deaths.csv\")\n\nfor template in ['ggplot2', 'seaborn', 'simple_white', 'plotly', 'plotly_white', 'plotly_dark', 'presentation', 'xgridoff',\n         'ygridoff', 'gridon', 'none']:\n    fig = px.scatter(df,\n                     x=\"Total Cases\", y=\"Total Deaths\", size=\"Total Cases\", color=\"State\/Territory\",\n                     log_x=True, size_max=60,\n                     template=template, title=\"Covid19 plotly Charts: '%s' theme\" % template)\n    fig.show()","a2655a45":"for template in [\"plotly_dark\"]:\n    fig = px.scatter(df,\n                     x=\"Total Cases\", y=\"Total Deaths\", size=\"Total Cases\", color=\"State\/Territory\",\n                     log_x=True, size_max=60,\n                     template=template, title=\"Covid19 plotly Charts: '%s' theme\" % template)\n    fig.show()","105eda4d":"'''df = pd.read_csv('..\/input\/covid19-us-marchseptember\/united_states_covid19_by_state.csv')\ndf[\"covid-19\"] = \"covid-19\" # in order to have a single root node\nfig = px.treemap(df, path=['State Region', 'State\/Territory'], values='Total Cases',\n                  color='Total Deaths', hover_data=['Case Rate per 100000'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint= int(np.average(df['Total Deaths'],weights = df['Total Cases'])))\n                                                       \nfig.show()'''","fc8bf5a1":"![image.png](attachment:image.png)","fddcdf54":"* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale: actually it is 4th dimension","22a539df":"# Dataset overview","710caf10":"![image.png](attachment:image.png)","7b533919":"# Line plotly","5645b144":"# If you like this notebook, please give an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Countries Life Expectancy Animation](https:\/\/www.kaggle.com\/brendan45774\/countries-life-expectancy-animation)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting Started with Manifold Learning - Isomap](https:\/\/www.kaggle.com\/brendan45774\/getting-started-with-manifold-learning-isomap)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [Guide to Matplotlib Image](https:\/\/www.kaggle.com\/brendan45774\/guide-to-matplotlib-image)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Topic Modeling (LDA)](https:\/\/www.kaggle.com\/brendan45774\/topic-modeling-lda)\n* [Wine quality - Regression prediction](https:\/\/www.kaggle.com\/brendan45774\/wine-quality-regression-prediction)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)","517f36e7":"# Changing colors","b64e7702":"This information is from October. This is the same, but different numbers. That way you can compare how much cases and death there are.","0129dd88":"Changing color for ploty you can use a template to help change color. Below shows you the different templates you can use. Use for template in to for the colors. If you have one you can delete the other choices. If you don't, you will have multiple plotly chart instead of one.","b08ccb10":"# Sun burst","95e9a8f1":"# Scatter plotly 3-d"}}