{"cell_type":{"131906c1":"code","dbef88a4":"code","3610a06c":"code","46f7a58b":"code","bbebce0f":"code","c1c4a6a3":"code","9c678065":"code","d4392f28":"code","9cf9712b":"code","6dc85278":"code","56f0e4b0":"code","02e9b210":"code","c46fdcf9":"code","d9addfb9":"code","d2fa76f2":"markdown","1be43f74":"markdown","d787044b":"markdown","e0f6d183":"markdown","c9923e76":"markdown","5521f262":"markdown"},"source":{"131906c1":"import datatable as dt\n\nimport pandas as pd\nimport numpy as np\nimport random\nimport time\nimport os\nimport gc\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import roc_auc_score\n\nimport lightgbm as lgb\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter('ignore')","dbef88a4":"N_SPLITS = 5\nN_ESTIMATORS = 20000\nEARLY_STOPPING_ROUNDS = 200\nVERBOSE = 1000\nSEED = 42","3610a06c":"def seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseed_everything(SEED)","46f7a58b":"train = dt.fread('..\/input\/tabular-playground-series-oct-2021\/train.csv').to_pandas()\ntest = dt.fread('..\/input\/tabular-playground-series-oct-2021\/test.csv').to_pandas()\ntrain = train[train.columns[1:]]\ntest = test[test.columns[1:]]\n\nTARGET = 'target'\ntrain[TARGET] = train[TARGET].astype('uint8')","bbebce0f":"features = [col for col in train.columns if 'f' in col]\n\ncont_features =[]\ndisc_features =[]\n\nfor col in features:\n    if train[col].dtype=='float64':\n        cont_features.append(col)\n    else:\n        disc_features.append(col)","c1c4a6a3":"train[cont_features] = train[cont_features].astype('float32')\ntrain[disc_features] = train[disc_features].astype('uint8')\n\ntest[cont_features] = test[cont_features].astype('float32')\ntest[disc_features] = test[disc_features].astype('uint8')","9c678065":"train['bin_count'] = train[disc_features].sum(axis=1)\ntest['bin_count'] = test[disc_features].sum(axis=1)\n\ndisc_features += ['bin_count']","d4392f28":"scaler = RobustScaler()\ntrain[cont_features] = scaler.fit_transform(train[cont_features])\ntest[cont_features] = scaler.transform(test[cont_features])","9cf9712b":"features = disc_features + cont_features","6dc85278":"display(train.info())\ndisplay(train[features].head())","56f0e4b0":"display(test.info())\ndisplay(test[features].head())","02e9b210":"lgb_params = {\n    'objective': 'binary',\n    'n_estimators': N_ESTIMATORS,\n    'random_state': SEED,\n    'learning_rate': 8e-3,\n    'subsample': 0.6,\n    'subsample_freq': 1,\n    'colsample_bytree': 0.4,\n    'reg_alpha': 10.0,\n    'reg_lambda': 1e-1,\n    'min_child_weight': 256,\n    'min_child_samples': 20,\n    'categorical_feature': len(disc_features),\n}","c46fdcf9":"lgb_oof = np.zeros(train.shape[0])\nlgb_pred = np.zeros(test.shape[0])\n\nskf = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X=train, y=train[TARGET])):\n    print(f\"===== fold {fold} =====\")\n    X_train, y_train = train[features].iloc[trn_idx], train[TARGET].iloc[trn_idx]\n    X_valid, y_valid = train[features].iloc[val_idx], train[TARGET].iloc[val_idx]\n    X_test = test[features]\n    \n    start = time.time()\n    model = lgb.LGBMClassifier(**lgb_params)\n    model.fit(\n        X_train, \n        y_train,\n        eval_set=[(X_valid, y_valid)],\n        eval_metric='auc',\n        early_stopping_rounds=EARLY_STOPPING_ROUNDS,\n        verbose=VERBOSE,\n    )\n\n    lgb_oof[val_idx] = model.predict_proba(X_valid)[:, -1]\n    lgb_pred += model.predict_proba(X_test)[:, -1] \/ N_SPLITS\n\n    elapsed = time.time() - start\n    auc = roc_auc_score(y_valid, lgb_oof[val_idx])\n    print(f\"fold {fold} - lgb auc: {auc:.6f}, elapsed time: {elapsed:.2f}sec\\n\")\n\nprint(f\"oof lgb roc = {roc_auc_score(train[TARGET], lgb_oof)}\")\n\nnp.save(\"lgb_oof.npy\", lgb_oof)\nnp.save(\"lgb_pred.npy\", lgb_pred)","d9addfb9":"submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\n\nsubmission[TARGET] = lgb_pred\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission","d2fa76f2":"# Libraries\n---","1be43f74":"# Submission\n---","d787044b":"# Parameters\n---","e0f6d183":"# LightGBM\n---","c9923e76":"# Datasets\n---","5521f262":"## Cross validation"}}