{"cell_type":{"db17652c":"code","8bddd525":"code","2d9fca71":"code","b85341ec":"code","58856641":"code","38351a42":"code","470dbffd":"code","b5d8438a":"code","b2473c28":"code","092607a8":"code","6367df0e":"code","ca75cd77":"code","cceeda9b":"code","c6c03b21":"code","d3c6ef62":"code","0f19cc31":"code","00a66a24":"code","83e7a1e1":"markdown","34d545a6":"markdown","78204b79":"markdown","09ff3683":"markdown","2dbc85f5":"markdown","ad975f5c":"markdown","d1a52f31":"markdown","e5202a1d":"markdown","cfb8a034":"markdown","c1b5bcb7":"markdown","489a5d55":"markdown","5b8b5366":"markdown","5f9aad92":"markdown","e66f36a0":"markdown","ce904078":"markdown","1884157b":"markdown","3223da48":"markdown","4cd4ea3e":"markdown","7a17c82e":"markdown","167c5f7d":"markdown","c0f9c11b":"markdown","2206b37b":"markdown","f98bae6e":"markdown","c76c91e3":"markdown","d9340450":"markdown","bc681514":"markdown","811e924e":"markdown","ef1d338a":"markdown"},"source":{"db17652c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn import metrics\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bddd525":"from IPython.display import HTML\nf = open(\"..\/input\/ocean2\/ocean.css\").read()\nHTML(f\"<style>{f}<\/style>\")","2d9fca71":"df = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\ndf.drop(['Unnamed: 32','id'] ,axis=1, inplace=True)\ndf","b85341ec":"missingno.matrix(df)\nplt.show()","58856641":"df.duplicated().sum()","38351a42":"df.describe().T","470dbffd":"plt.figure(figsize=(12, 8))\nsns.countplot(x=df['diagnosis'], palette='RdBu')\n\nbenign, malignant = df['diagnosis'].value_counts()\nprint('Number of cells labeled Benign : ', benign)\nprint('Number of cells labeled Malignant : ', malignant)\nprint('')\nprint('% of cells labeled Benign', round(benign \/ len(df) * 100, 2), '%')\nprint('% of cells labeled Malignant', round(malignant \/ len(df) * 100, 2), '%')\nplt.show()","b5d8438a":"fig, ax = plt.subplots(figsize=(20, 20))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","b2473c28":"sns.clustermap(df.corr())\nplt.show()","092607a8":"sns.jointplot(x=df.loc[:,'concavity_worst'], y=df.loc[:,'concave points_worst'], kind=\"reg\", color=\"#ce1414\")\nplt.show()","6367df0e":"df.columns","ca75cd77":"df['diagnosis']=df['diagnosis'].map({'M':1,'B':0})","cceeda9b":"X = df.drop([\"diagnosis\"], axis = 1)\ny = df.diagnosis.values","c6c03b21":"X = (X - np.min(X))\/(np.max(X) - np.min(X)).values\nX","d3c6ef62":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)\nlogistic = LogisticRegression()\nlogistic.fit(X_train,y_train)\ny_pred = logistic.predict(X_test)\nac = accuracy_score(y_test,y_pred)\nprint('Accuracy is: ',ac)\nconm = confusion_matrix(y_test,y_pred)\nsns.heatmap(conm,annot=True,fmt=\"d\")\nplt.show()","0f19cc31":"print(metrics.classification_report(y_test, y_pred))","00a66a24":"print(\"roc_auc_score: \", roc_auc_score(y_test, y_pred))\nprint(\"f1 score: \", f1_score(y_test, y_pred))","83e7a1e1":"### We got the accuracy of 0.98% on our this Logistic Regression model.","34d545a6":"## Let's check that, how the dataset is divided into two type of diagnosis.","78204b79":"## Checking the Classification Report for better understanding the accuracy and score of our model.","09ff3683":"### This correlation shows pretty much good relationship between dataset.","2dbc85f5":"# Predictive Modelling \ud83c\udfae","ad975f5c":"### This shows that the dataset having 0 missing values.","d1a52f31":"## Clustermapping the datasets correlation for better understanding the relationship of data.","e5202a1d":"### By mapping the Malignant diagnosis as 1 and Benign diagnosis as 0. We are making our dataset to be perfect fit for our model.","cfb8a034":"![Breast Cancer](https:\/\/images.newscientist.com\/wp-content\/uploads\/2019\/06\/06165424\/c0462719-cervical_cancer_cell_sem-spl.jpg?width=1200)","c1b5bcb7":"## Preprocessing the feature values for better accuracy of the model.","489a5d55":"# Loading the Dataset.","5b8b5366":"### This shows that the dataset having 0 duplicate values.","5f9aad92":"# Breast Cancer EDA\ud83d\udcca + Predictive Modelling\ud83c\udfae","e66f36a0":"### Clearing the useless columns.","ce904078":"### Here, we separating the data in two parts - Training & Testing. Then we calling the Logistic Regression and fitting the data in our model. We predict the predictions and then checking the accuracy of our model.","1884157b":"## Checking the duplicate values in the dataset.","3223da48":"## Let's check the correlation between the dataset.","4cd4ea3e":"Dataset Description\n\nThe Breast Cancer datasets is available UCI machine learning repository maintained by the University of California, Irvine. The dataset contains 569 samples of malignant and benign tumor cells.\n\nThe first two columns in the dataset store the unique ID numbers of the samples and the corresponding diagnosis (M=malignant, B=benign), respectively. The columns 3-32 contain 30 real-value features that have been computed from digitized images of the cell nuclei, which can be used to build a model to predict whether a tumor is benign or malignant.\n\n* 1= Malignant (Cancerous) - Present (M)\n* 0= Benign (Not Cancerous) - Absent (B)\n\n\nColumn names and meanings:\n\n* id: ID number\n* diagnosis: The diagnosis of breast tissues (M = malignant, B = benign)\n* radius_mean: mean of distances from center to points on the perimeter\n* texture_mean: standard deviation of gray-scale values\n* perimeter_mean: mean size of the core tumor\n* area_mean: area of the tumor\n* smoothness_mean: mean of local variation in radius lengths\n* compactness_mean: mean of perimeter^2 \/ area - 1.0\n* concavity_mean: mean of severity of concave portions of the contour\n* concave_points_mean: mean for number of concave portions of the contour\n* symmetry_mean\n* fractal_dimension_mean: mean for \"coastline approximation\" - 1\n* radius_se: standard error for the mean of distances from center to points on the perimeter\n* texture_se: standard error for standard deviation of gray-scale values\n* perimeter_se\n* area_se\n* smoothness_se: standard error for local variation in radius lengths\n* compactness_se: standard error for perimeter^2 \/ area - 1.0\n* concavity_se: standard error for severity of concave portions of the contour\n* concave_points_se: standard error for number of concave portions of the contour\n* symmetry_se\n* fractal_dimension_se: standard error for \"coastline approximation\" - 1\n* radius_worst: \"worst\" or largest mean value for mean of distances from center to points on the perimeter\n* texture_worst: \"worst\" or largest mean value for standard deviation of gray-scale values\n* perimeter_worst\n* area_worst\n* smoothness_worst: \"worst\" or largest mean value for local variation in radius lengths\n* compactness_worst: \"worst\" or largest mean value for perimeter^2 \/ area - 1.0\n* concavity_worst: \"worst\" or largest mean value for severity of concave portions of the contour\n* concave_points_worst: \"worst\" or largest mean value for number of concave portions of the contour\n* symmetry_worst\n* fractal_dimension_worst: \"worst\" or largest mean value for \"coastline approximation\" - 1","7a17c82e":"## Checking the relationship between the specific data for understanding the relationship.","167c5f7d":"### Let's get to know about the columns of the dataset. So, that we can know better about the features of our model.","c0f9c11b":"# EDA (Exploratory Data Analysis)\ud83d\udcca","2206b37b":"## We have categorical data, but our model needs something numerical. So, that our model works perfectly fine and predicts with best  accuracy.","f98bae6e":"### This plot shows that the Malignant (Cancerous) type result of diagnosis are 212. And This plot shows that the Benign (Not Cancerous) type result of diagnosis are 357.","c76c91e3":"## Checking the roc_aur_score and the f1 score of our model.","d9340450":"# Import Libraries \ud83d\udcda","bc681514":"## Separating the features and the target value for our model.","811e924e":"## Describing the dataset.","ef1d338a":"## Checking the missing values in the dataset."}}