{"cell_type":{"1cd9146f":"code","353f7021":"code","213b8659":"code","b52dbc7d":"code","6dd7e675":"code","6f2aa837":"code","7f095eb6":"code","97386750":"code","22285b16":"code","f437e0f7":"code","20c8cb56":"code","8b9f7cd1":"code","8964ccdc":"code","27c1e79f":"code","46b7c89f":"markdown","23875dcc":"markdown","086a4403":"markdown","248165c7":"markdown","14ca3a78":"markdown"},"source":{"1cd9146f":"import numpy as np\nimport random\nfrom scipy.stats import multivariate_normal\nimport math\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport time\n%matplotlib inline","353f7021":"def p(x):\n    x=np.array(x)\n    # y = 0.3*np.exp(-(x-0)**2\/5) + 0.7* np.exp(-(x-10)**2\/5)\n    y = 0.4*norm.pdf(x, loc=0, scale=3)+0.6*norm.pdf(x, loc=10, scale=1.5)\n    return y\ndef q(x):\n    y = norm.pdf(x,loc=5,scale=10)\n    return y","213b8659":"x=np.arange(-10,15,0.1)\ny=p(x)\nplt.plot(x,y)","b52dbc7d":"T = 5000          #\u91c7\u6837\u6b21\u6570   ","6dd7e675":"#\u72ec\u7acbMetropolis-Hastings\nRMSE=[]\nfor i in range(0,5):#\u72ec\u7acb\u8fd0\u884c\u5341\u6b21\n    t = 0  \n    pi = [0 for i in range(T)]      #\u91c7\u6837\u6837\u672c  \n    while t < T-1:\n        t = t + 1\n        pi_star = norm.rvs(loc=5, scale=10, size=1, random_state=None)\n        alpha = min(1, p(pi_star[0])*q(pi[t-1]) \/ (p(pi[t - 1])*q(pi_star[0])))\n        u = random.uniform(0, 1)\n        if u < alpha:\n            pi[t] = pi_star[0]\n        else:\n            pi[t] = pi[t - 1]\n    plt.figure(i)\n    plt.scatter(pi,p(pi))\n    num_bins = 50\n    n,bins,_=plt.hist(pi, num_bins, density=True, facecolor='red', alpha=0.7)\n    \n    MSE=0\n    b=[]\n    for i in range(0,50):\n        b.append((bins[i]+bins[i+1])\/2)\n    for i in range(0,50):\n        MSE+=(p(b[i])-n[i])**2\n    MSE=MSE\/50\n    RMSE.append(np.sqrt(MSE+1e-7))\nprint(\"RMSE:\",RMSE)\nprint(\"When independent sampler, mean of RMSE is {1}:\".format(1,np.mean(np.array(RMSE))))","6f2aa837":"#\u968f\u673a\u6e38\u8d70 Metropolis-Hastings  \nRMSE=[]\nfor i in range(0,5):#\u72ec\u7acb\u8fd0\u884c\u5341\u6b21\n    t = 0  \n    pi = [0 for i in range(T)]      #\u91c7\u6837\u6837\u672c  \n    while t < T-1:\n        t = t + 1\n        pi_star = pi[t - 1] + norm.rvs(loc=0, scale=1, size=1, random_state=None)\n        alpha = min(1, (p(pi_star[0]) \/ p(pi[t - 1])))\n        u = random.uniform(0, 1)\n        if u < alpha:\n            pi[t] = pi_star[0]\n        else:\n            pi[t] = pi[t - 1]\n    plt.figure(i)\n    plt.scatter(pi,p(pi))\n    num_bins = 50\n    n,bins,_=plt.hist(pi, num_bins, density=True, facecolor='red', alpha=0.7)\n    \n    MSE=0\n    b=[]\n    for i in range(0,50):\n        b.append((bins[i]+bins[i+1])\/2)\n    for i in range(0,50):\n        MSE+=(p(b[i])-n[i])**2\n    MSE=MSE\/50\n    RMSE.append(np.sqrt(MSE+1e-7))\nprint(\"RMSE:\",RMSE)\nprint(\"When MH with random walk, mean of RMSE is {1}:\".format(0,np.mean(np.array(RMSE))))","7f095eb6":"#\u6df7\u5408Metropolis-Hastings\nRMSE=[]\nv = 0.3  #\u6df7\u5408\u7cfb\u6570  \nfor i in range(0,5):#\u72ec\u7acb\u8fd0\u884c\u5341\u6b21\n    t = 0  \n    pi = [0 for i in range(T)]      #\u91c7\u6837\u6837\u672c  \n    while t < T-1:\n        t = t + 1\n        b_u=random.uniform(0, 1)\n    \n        if b_u<v:\n            #independence chain\n            pi_star = norm.rvs(loc=5, scale=10, size=1, random_state=None)\n            alpha = min(1, p(pi_star[0])*q(pi[t-1]) \/ (p(pi[t - 1])*q(pi_star[0])))\n        else:\n            #random walk\n            pi_star = pi[t - 1] + norm.rvs(loc=0, scale=1, size=1, random_state=None)\n            alpha = min(1, (p(pi_star[0]) \/ p(pi[t - 1])))\n    \n        u = random.uniform(0, 1)\n        if u < alpha:\n            pi[t] = pi_star[0]\n        else:\n            pi[t] = pi[t - 1]\n    plt.figure(i)\n    plt.scatter(pi,p(pi))\n    num_bins = 50\n    n,bins,_=plt.hist(pi, num_bins, density=True, facecolor='red', alpha=0.7)\n    \n    MSE=0\n    b=[]\n    for i in range(0,50):\n        b.append((bins[i]+bins[i+1])\/2)\n    for i in range(0,50):\n        MSE+=(p(b[i])-n[i])**2\n    MSE=MSE\/50\n    RMSE.append(np.sqrt(MSE+1e-7))\nprint(RMSE)\nprint(\"When mixing coefficient v = {0} , mean of RMSE is {1}:\".format(v,np.mean(np.array(RMSE))))","97386750":"#\u6df7\u5408Metropolis-Hastings\nRMSE=[]\nv = 0.5  #\u6df7\u5408\u7cfb\u6570  \nfor i in range(0,5):#\u72ec\u7acb\u8fd0\u884c\u5341\u6b21\n    t = 0  \n    pi = [0 for i in range(T)]      #\u91c7\u6837\u6837\u672c  \n    while t < T-1:\n        t = t + 1\n        b_u=random.uniform(0, 1)\n    \n        if b_u<v:\n            #independence chain\n            pi_star = norm.rvs(loc=5, scale=10, size=1, random_state=None)\n            alpha = min(1, p(pi_star[0])*q(pi[t-1]) \/ (p(pi[t - 1])*q(pi_star[0])))\n        else:\n            #random walk\n            pi_star = pi[t - 1] + norm.rvs(loc=0, scale=1, size=1, random_state=None)\n            alpha = min(1, (p(pi_star[0]) \/ p(pi[t - 1])))\n    \n        u = random.uniform(0, 1)\n        if u < alpha:\n            pi[t] = pi_star[0]\n        else:\n            pi[t] = pi[t - 1]\n    plt.figure(i)\n    plt.scatter(pi,p(pi))\n    num_bins = 50\n    plt.hist(pi, num_bins, density=True, facecolor='red', alpha=0.7)\n    \n    MSE=0\n    b=[]\n    for i in range(0,50):\n        b.append((bins[i]+bins[i+1])\/2)\n    for i in range(0,50):\n        MSE+=(p(b[i])-n[i])**2\n    MSE=MSE\/50\n    RMSE.append(np.sqrt(MSE+1e-7))\nprint(\"RMSE:\",RMSE)\nprint(\"When mixing coefficient v = {0} , mean of RMSE is {1}:\".format(v,np.mean(np.array(RMSE))))","22285b16":"#\u6df7\u5408Metropolis-Hastings\nRMSE=[]\nv = 0.7  #\u6df7\u5408\u7cfb\u6570  \nfor i in range(0,5):#\u72ec\u7acb\u8fd0\u884c\u5341\u6b21\n    t = 0  \n    pi = [0 for i in range(T)]      #\u91c7\u6837\u6837\u672c  \n    while t < T-1:\n        t = t + 1\n        b_u=random.uniform(0, 1)\n    \n        if b_u<v:\n            #independence chain\n            pi_star = norm.rvs(loc=5, scale=10, size=1, random_state=None)\n            alpha = min(1, p(pi_star[0])*q(pi[t-1]) \/ (p(pi[t - 1])*q(pi_star[0])))\n        else:\n            #random walk\n            pi_star = pi[t - 1] + norm.rvs(loc=0, scale=1, size=1, random_state=None)\n            alpha = min(1, (p(pi_star[0]) \/ p(pi[t - 1])))\n    \n        u = random.uniform(0, 1)\n        if u < alpha:\n            pi[t] = pi_star[0]\n        else:\n            pi[t] = pi[t - 1]\n    plt.figure(i)\n    plt.scatter(pi,p(pi))\n    num_bins = 50\n    n,bins,_=plt.hist(pi, num_bins, density=True, facecolor='red', alpha=0.7)\n    \n    MSE=0\n    b=[]\n    for i in range(0,50):\n        b.append((bins[i]+bins[i+1])\/2)\n    for i in range(0,50):\n        MSE+=(p(b[i])-n[i])**2\n    MSE=MSE\/50\n    RMSE.append(np.sqrt(MSE+1e-7))\nprint(\"RMSE:\",RMSE)\nprint(\"When mixing coefficient v = {0} , mean of RMSE is {1}:\".format(v,np.mean(np.array(RMSE))))","f437e0f7":"def getX2(pi,t,block=[]):\n    #\u8fd4\u56deP(x1|x2)\u4e2d\u7684x2\n    other=[]\n    for i in range(0,DIM):\n        if i not in block:\n            other.append(i)\n    ans=[]\n    if min(block)==0:\n        for i in range(max(block)+1,DIM):\n            ans.append(pi[t-1][i])\n    elif max(block)==DIM-1:\n        for i in range(0,min(block)):\n            ans.append(pi[t][i])\n    else:\n        for i in range(0,min(block)):\n            ans.append(pi[t][i])\n        for j in range(max(block)+1,DIM):\n            ans.append(pi[t-1][j])\n    ans=np.array(ans)\n    return ans","20c8cb56":"def p(x1,x2,block=[]):\n    #\u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(x1|x2)\n    #\u6b63\u6001\u5206\u5e03\u7684\u6761\u4ef6\u6982\u7387\u51fd\u6570\u8fd8\u662f\u6b63\u6001\u5206\u5e03\n    global DIM\n    global mu\n    global cov\n    other=[]\n    for i in range(0,DIM):\n        if i not in block:\n            other.append(i)\n    mu1=mu[block]\n    mu2=mu[other]\n    cov11=cov[block,:][:,block]\n    cov12=cov[block,:][:,other]\n    cov21=cov[other,:][:,block]\n    cov22=cov[other,:][:,other]\n    if len(block)==1:\n        cov11=cov11[0]\n        cov12=cov12[0]\n    if len(other)==1:\n        cov21=cov21[0]\n        cov22=cov22[0]\n    if len(block)==1 and len(other)==1:\n        tmpdot=cov12[0]\/cov22[0]\n        mu_cond=mu1+(x2-mu2)*tmpdot\n        cov_cond=cov11[0]-tmpdot*cov21[0]\n    else:\n        tmpdot=np.dot(cov12,np.linalg.inv(cov22))\n        mu_cond=mu1+np.dot((x2-mu2),tmpdot.T)\n        cov_cond=cov11-np.dot(tmpdot,cov21)\n    z= multivariate_normal(mean=mu_cond, cov=cov_cond).pdf(x1)\n    return z","8b9f7cd1":"def MH(pi,block,t):\n    #Metropolis-Hastings\n    #\u8fdb\u884c\u5355\u6b21MH\u91c7\u6837\uff08\u968f\u673a\u6e38\u8d70\uff09\n    accept_count=0\n    pi_star = pi[t-1][block]+multivariate_normal(mean=[0 for i in range(0,block_size)]).rvs(size=1, random_state=None)\n    # alpha = min(1, p(pi_star)*q(pi[t-1]) \/ (p(pi[t - 1])*q(pi_star)))\n    X2=getX2(pi,t,block)\n    alpha = min(1, p(pi_star,X2,block) \/ p(pi[t - 1][block],X2,block))\n    u = random.uniform(0, 1)\n    if u < alpha:\n        pi[t][block] = pi_star\n        accept_count+=1\n    else:\n        pi[t][block] = pi[t - 1][block]\n    return accept_count","8964ccdc":"DIM=100   #100\u7ef4\u6570\u636e\nmu=np.loadtxt('..\/input\/randommu100cov100\/mu100.txt',delimiter=',')\ncov=np.loadtxt('..\/input\/randommu100cov100\/cov100.txt',delimiter=',')\nN=5000   #\u91c7\u6837\u6837\u672c\u6570\u91cf\nblock_size_list,time_list,accept_rate_list=[],[],[]      #\u65f6\u95f4\u5217\u8868\u548c\u63a5\u53d7\u7387\u5217\u8868\nblock_size=50    #\u5206\u5757\u5927\u5c0f\nfor block_size in [1,2,4,5,10,20,25,50,100]:\n    print('block_size:',block_size)\n    pi = np.zeros((N+1,DIM))      #\u91c7\u6837\u6837\u672c\n    accept_count=0   #\u63a5\u53d7\u6b21\u6570\n    start=time.time()\n    for i in range(1,N+1):\n        block=[]    #\u5212\u5206\u5757\n        for j in range(0,DIM):\n            block.append(j)\n            if len(block)%block_size==0:\n                # print(block)\n                accept_count+=MH(pi,block,i)\n                block=[]\n    end=time.time()\n\n    cost_time=end-start\n    accept_rate=accept_count\/(N*DIM\/block_size)\n    block_size_list.append(block_size)\n    time_list.append(cost_time)\n    accept_rate_list.append(accept_rate)\n\n    print('When block_size={0}, cost time is: {1}s, accept_rate={2}'.format(block_size,cost_time,accept_rate))\n\nblock_size_list,time_list,accept_rate_list=np.array(block_size_list),np.array(time_list),np.array(accept_rate_list)\n\nall_data=np.array([block_size_list,time_list,accept_rate_list])\n\nnp.savetxt('cycle_2020.txt',all_data,delimiter=',')","27c1e79f":"#\u7ed8\u56fe\ndata=np.loadtxt('.\/cycle_2020.txt',delimiter=',')\nblock_size=data[0]\ntime=data[1]\naccept_rate=data[2]\n\nplt.figure(1)\nplt.plot(block_size,time,color='green',label='time(s)',marker='o')\nplt.legend()\nplt.xlabel('block_size')\nplt.figure(2)\nplt.plot(block_size,100-accept_rate*100,color='red',label='reject rate(%)',marker='o')\nplt.legend()\nplt.xlabel('block_size')\nplt.show()\n","46b7c89f":"![image.png](attachment:image.png)","23875dcc":"\u968f\u673a\u8bbe\u7f6e\u4e86\u4e00\u4e2a100\u7ef4\u7684\u6b63\u6001\u8054\u5408\u5206\u5e03\uff0c\u53c2\u6570\u5b58\u5728mu100.txt\u548ccov100.txt\u4e2d\u3002\n\u8bbe\u7f6e\u4e0d\u540c\u7684\u5206\u5757\u5927\u5c0f\uff0c\u8bb0\u5f55\u6bcf\u6b21\u5206\u5757\u91c7\u6837\u7684\u65f6\u95f4\u548c\u63a5\u53d7\u7387\u3002","086a4403":"![image.png](attachment:image.png)\n","248165c7":"# Mixtrue","14ca3a78":"# Cycle"}}