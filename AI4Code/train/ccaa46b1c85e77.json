{"cell_type":{"362ea54b":"code","07315ee0":"code","6b30f734":"code","a75ffc73":"code","f6ef4121":"code","d375df03":"code","3d85e7f4":"code","7257182d":"code","ec9ba216":"code","dfefd0b9":"code","667da5ff":"code","63e563bc":"code","5852b0ed":"code","807c0a3a":"code","7830952b":"code","7fddf9ab":"markdown","165c0f08":"markdown","954735dd":"markdown","17074f70":"markdown","0014b3f9":"markdown","aaae8f71":"markdown","75c564f5":"markdown","1c40f4c5":"markdown","b904a365":"markdown","924bad84":"markdown","4a8a2275":"markdown","a827c748":"markdown","39337564":"markdown","40fd206d":"markdown","6b713a5d":"markdown","4a0f9f70":"markdown","ec6ee93f":"markdown","f928c641":"markdown"},"source":{"362ea54b":"def plus(A,B):\n    \"\"\"Function that calculate sum of two same size matrixs\n    \n    Parameters\n    ----------\n    A : list\n        First matrix\n    B : list\n        Second matrix\n    \n    Returns\n    -------\n    list\n        Sum of two matrixs\n    \"\"\"\n    \n    result=[]\n    for row in range(len(A)):\n        result_row=[]\n        for column in range(len(A[0])):\n            result_row.append(A[row][column]+B[row][column])\n        result.append(result_row)\n    return result","07315ee0":"def multiply(A,c):\n    \"\"\"Function that calculate result of matrix multiply with scalar\n    \n    Parameters\n    ----------\n    A : list\n        Matrix to be multiply\n    c : float\n        Scalar to multiply\n    \n    Returns\n    -------\n    list\n        Result of multiply\n    \"\"\"\n    \n    result=[]\n    for row in range(len(A)):\n        result_row=[]\n        for column in range(len(A[0])):\n            result_row.append(c*A[row][column])\n        result.append(result_row)\n    return result","6b30f734":"def multi_plus(*args):\n    \"\"\"Function that calculate sum of all input matrixs. All matrix expected to be same size.\n    \n    Parameters\n    ----------\n    Args:\n        A1 (list): First matrix\n        A2 (list): Second matrix\n        A3 (list): Third matrix\n        ...\n    \n    Returns\n    -------\n    list\n        Sum of all input matrixs\"\"\"\n    \n    result=plus(args[0],multiply(args[0],-1))\n    for matrix in args:\n        result=plus(result,matrix)\n    return result","a75ffc73":"def rgb2gray(A):\n    \"\"\"Function that convert rgb to grayscale image using mean of itensity\n    \n    Parameters\n    ----------\n    A : list\n        Tensor of RGB image that we want to convert into grayscale\n        \n    Returns\n    -------\n    list\n        Matrix of grayscale image\n    \"\"\"\n    red_channel = A[:,:,0]\n    green_channel = A[:,:,1]\n    blue_channel = A[:,:,2]\n    \n    gray_image = multiply(multi_plus(red_channel,green_channel,blue_channel),1\/3)\n    return gray_image","f6ef4121":"def zero_pad(A):\n    \"\"\"Function that zero pad the input matrix\n    \n    Parameters\n    ----------\n    A: list\n        Matrix to be zero padded\n    \n    Returns\n    -------\n    list\n        Zero padded matrix\n    \"\"\"\n    \n    result=[]\n    for row in range(len(A)+2):\n        row_result=[]\n        for column in range(len(A[0])+2):\n            if row==0 or row==len(A)+1:\n                row_result.append(0)\n            else:\n                if column==0 or column==len(A[0])+1:\n                    row_result.append(0)\n                else:\n                    row_result.append(A[row-1][column-1])\n        result.append(row_result)\n    return result","d375df03":"def create_tuple(x,y):\n    \"\"\"Function that generate tuple from two numbers that start from (0,0) to (x-1,y-1)\n    \n    Parameters\n    ----------\n    x: int\n        First number\n        \n    y: int\n        Second number\n        \n    Returns\n    -------\n    list\n        list of tuple\"\"\"\n    result=[]\n    for i in range(x):\n        for j in range(y):\n            result.append(tuple([i,j]))\n    return result","3d85e7f4":"def convolve(A,filter):\n    \"\"\"Function that convolve matrix using input filter\n    \n    Parameters\n    ----------\n    A: list\n        Matrix to be convolve\n        \n    filter: list\n        Filter matrix, expected to be 3x3 matrix\n    \n    Returns\n    -------\n    list\n        Matrix after convolve\"\"\"\n    zeropad=zero_pad(A)\n    result=[]\n    for row in range(len(A)):\n        row_result=[]\n        for column in range(len(A[0])):\n            for_multiply_list=[zeropad[row+row_filter][column+column_filter]*filter[row_filter][column_filter] for (row_filter,column_filter) in create_tuple(3,3)]\n            row_result.append(sum(for_multiply_list))\n        result.append(row_result)\n    return result","7257182d":"def exponent(A,c):\n    \"\"\"Function that exponent each element of matrix with scalar\n    \n    Parameters\n    ----------\n    A : list\n        Matrix\n    c : float\n        Scalar\n    \n    Returns\n    -------\n    list\n        Result of exponent each element of matrix A with scalar c\n    \"\"\"\n    \n    result=[]\n    for row in range(len(A)):\n        result_row=[]\n        for column in range(len(A[0])):\n            result_row.append(A[row][column]**c)\n        result.append(result_row)\n    return result","ec9ba216":"def edge_detect(A):\n    \"\"\"Function that detect edge of input grayscale image\n    \n    Parameters\n    ----------\n    A: list\n        Matrix of grayscale image\n        \n    Returns\n    -------\n    list\n        Matrix of edge of grayscale image\"\"\"\n    filter_leftright=[[-1,0,1],[-1,0,1],[-1,0,1]] #filter to detect sudden change in left-right itensity (You can edit for better result)\n    filter_updown=[[-1,-1,-1],[0,0,0],[1,1,1]] #filter to detect sudden change in up-down itensity (You can edit for better result)\n    \n    A_leftright=convolve(A,filter_leftright)\n    A_updown=convolve(A,filter_updown)\n    \n    result= exponent(plus(exponent(A_leftright,2),exponent(A_updown,2)),1\/2)\n    \n    return result","dfefd0b9":"import matplotlib.pyplot as plt","667da5ff":"im=plt.imread('..\/input\/animal-image-dataset-90-different-animals\/animals\/animals\/cat\/31ae8d36b6.jpg')\nplt.imshow(im)","63e563bc":"im_gray=rgb2gray(im)\nplt.imshow(im_gray,cmap='gray')","5852b0ed":"edge=edge_detect(im_gray)\nplt.imshow(edge,cmap='gray')","807c0a3a":"from skimage.filters import sobel\nfrom skimage.filters import roberts","7830952b":"edge_roberts=roberts(im_gray)\nedge_sobel=sobel(im_gray)\n\nfig,ax=plt.subplots(1,3)\nfig.set_size_inches(16, 8)\nax[0].imshow(edge,cmap='gray')\nax[0].set_title('Scratch')\nax[1].imshow(edge_roberts,cmap='gray')\nax[1].set_title('Robert')\nax[2].imshow(edge_sobel,cmap='gray')\nax[2].set_title('Sobel')","7fddf9ab":"According to the picture, the author edge detector generate an outcome as similar as results from skimage edge detector. ","165c0f08":"In this notebook, i'm going to show you how to create edge detector from scatch. \n\nI assume that you have knowledge about image processing, so in this notebook i will write a code only.\n\nIf you like my work, please consider upvote for me.","954735dd":"Create plus operator for multiple matrix to make code cleaner","17074f70":"# 2. Detect edge","0014b3f9":"Create matrix plus operator","aaae8f71":"Create zero padding function.","75c564f5":"Create matrix-scalar multiply function","1c40f4c5":"# 1. Define essential functions","b904a365":"Convert RGB image to grayscale image","924bad84":"Create function that convert rgb image into grayscale image.","4a8a2275":"# 0. Introduction","a827c748":"Edge detector function","39337564":"Load image","40fd206d":"Create convolve function.","6b713a5d":"If I have two numbers 3 and 4, I want to create list of tuple (0,0),(0,1),(0,2),(0,3),(1,0),...,(2,2),(2,3) from these numbers. I have to create this function.","4a0f9f70":"I will use my edge detector to detect edge in one of image in Natural Images dataset and I will use matplotlib pyplot to help visualizing.","ec6ee93f":"# 3. Compare result to skimage","f928c641":"Create function that exponent each element in matrix."}}