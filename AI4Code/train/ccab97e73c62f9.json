{"cell_type":{"a95ac3f4":"code","0c71a44d":"code","525addd9":"code","9c2d0573":"code","324a3417":"code","83ee66ea":"code","7602c364":"code","4f94bb8a":"code","dce26b75":"code","4362742f":"code","2c476431":"code","14009950":"code","6d5be0bc":"code","e9e4e5e6":"code","4b9c2b41":"code","d91810af":"code","9e6f70d9":"code","66541173":"code","c1f564b4":"code","99fc15db":"code","f70ab4c1":"code","c3f52282":"code","584dd091":"code","0d2546e7":"code","856cb68f":"code","6e1a5747":"code","b26e9adf":"code","24d2b967":"code","6f9dddd5":"code","fed8a140":"code","29bb0701":"code","229b06b6":"code","5cdb454d":"code","c15caf25":"code","a2447e6b":"code","9b3ca1fc":"code","8a7313d4":"code","2d47e20b":"code","89598bc7":"code","1c31f3ba":"code","de8cfe0a":"code","bd37dcde":"code","af4508d9":"code","34632d7d":"code","6e7df47b":"code","27dbad2e":"code","d383ed16":"code","8d840765":"code","41290f6c":"code","f97ec4eb":"code","81605377":"code","d4055081":"code","6c6d34f5":"code","02f91dcf":"code","0f29ef19":"code","abfd24ab":"code","cbfcc106":"code","02083eca":"code","c01a7661":"code","f0d8a4db":"code","bdad6a8d":"code","83df7629":"code","f1badb8c":"code","72a0290f":"code","79fd5608":"code","38d2aceb":"code","452244cb":"code","3737e8cc":"code","0d348670":"code","07a36091":"code","248394a3":"code","9130ce7a":"code","c1494a87":"code","81ee0e57":"code","eb1cd0f7":"code","933318af":"code","8a292d5a":"code","3522f020":"code","7d245f4b":"code","6b9194e7":"code","df826619":"code","df405a94":"code","0d64c594":"code","d9b91af4":"code","67c4b027":"markdown","b636198a":"markdown","d1e11567":"markdown","24751d5e":"markdown","ffe17ca0":"markdown","e41a5aa4":"markdown","a8db8f45":"markdown","2e20f327":"markdown","d465b256":"markdown","bd2e1fd4":"markdown","ea166f5c":"markdown","d2185400":"markdown","70e9cab9":"markdown","9786afa3":"markdown"},"source":{"a95ac3f4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0c71a44d":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","525addd9":"train.shape,test.shape","9c2d0573":"numerical_features = train.select_dtypes(exclude = 'object')","324a3417":"num_corr = numerical_features.corr()","83ee66ea":"sns.heatmap(num_corr.sort_values(by = ['SalePrice'], ascending = False).head(1),cmap = 'Reds')\nplt.title('Correlation with Saleprice')\nplt.figure(figsize = (15,10))","7602c364":"num_corr['SalePrice'].sort_values(ascending = False).head(10).to_frame()","4f94bb8a":"plt.figure(figsize= (15,6))\nplt.scatter(train['GrLivArea'],train['SalePrice'],color = 'green', alpha = 0.5)\nplt.xticks(weight = 'bold')\nplt.yticks(weight = 'bold')\nplt.title('Saleprice Vs OverallQual', weight = 'bold', color = 'red', fontsize = 15)","dce26b75":"sns.heatmap(train.isnull())","4362742f":"import missingno as msno","2c476431":"msno.matrix(all_data)","14009950":"msno.bar(all_data)","6d5be0bc":"all_data = pd.concat((train.loc[:,:'SaleCondition'],test.loc[:,:'SaleCondition']))","e9e4e5e6":"all_data.drop(['Id'], axis=1, inplace=True)","4b9c2b41":"all_data.dropna(thresh = len(all_data)*0.9, inplace = True, axis = 1)","d91810af":"all_na =all_na.drop(all_na[all_na == 0].index).sort_values(ascending = False)","9e6f70d9":"plt.figure(figsize= (15,10))\nall_na.plot.barh(color = 'blue')","66541173":"all_data_na = all_data[all_na.index]","c1f564b4":"all_data_na.shape","99fc15db":"cat_na = all_data_na.select_dtypes(include = 'object')\nnum_na = all_data_na.select_dtypes(exclude = 'object')","f70ab4c1":"num_na","c3f52282":"all_data.GarageYrBlt=all_data.GarageYrBlt.fillna(1980)","584dd091":"num_na.drop(['GarageYrBlt'], axis = 1, inplace = True)","0d2546e7":"num_na.columns","856cb68f":"for nf in num_na.columns:\n    all_data[nf] = all_data[nf].fillna(0)","6e1a5747":"small_cat_na.index","b26e9adf":"for sf in small_cat_na.index:\n    all_data[sf] = all_data[sf].fillna(method = 'ffill')","24d2b967":"cat_na1 = all_data.select_dtypes(include = 'object')","6f9dddd5":"for cn in cat_na1.columns:\n    all_data[cn] = all_data[cn].fillna('None')","fed8a140":"msno.bar(all_data)","29bb0701":"all_data.head(3)","229b06b6":"all_data['TotalArea'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF'] + all_data['GrLivArea'] + all_data['GarageArea']","5cdb454d":"all_data['Bathrooms'] = all_data['FullBath'] + all_data['HalfBath']*0.5","c15caf25":"#all_data['Age'] = 2016 -all_data['YearBuilt']","a2447e6b":"all_data.select_dtypes(exclude = 'object').columns","9b3ca1fc":"all_data['MoSold'] = all_data['MoSold'].astype(str)","8a7313d4":"all_data= pd.get_dummies(all_data)","2d47e20b":"print(\"The shape of combinde data\",all_data.shape)","89598bc7":"from scipy.stats import skew","1c31f3ba":"numeric_features = all_data.select_dtypes(exclude = 'object').columns","de8cfe0a":"sk_f = all_data[numeric_features].apply(lambda x : skew(x.dropna()))","bd37dcde":"sk_f = sk_f[sk_f > 0.75]","af4508d9":"sk_features = sk_f.index","34632d7d":"all_data[sk_features] = np.log1p(all_data[sk_features])","6e7df47b":"plt.figure(figsize = (15,10))\nplt.subplot(221)\nsns.distplot(train['GrLivArea'])\nplt.title(\"befor trnasformation\")\n\nplt.subplot(222)\nsns.distplot(all_data['GrLivArea'], color = 'Red')\nplt.title(\"after trnasformation\")\n\nplt.subplot(223)\nsns.distplot(train['1stFlrSF'])\nplt.title(\"before trnasformation\")\n\nplt.subplot(224)\nsns.distplot(all_data['1stFlrSF'], color = 'Red')\nplt.title(\"after trnasformation\")","27dbad2e":"sns.boxplot(all_data['GrLivArea'],orient = 'v')","d383ed16":"#it's skewed let's apply log transformation\ntrain['SalePrice'] = np.log1p(train['SalePrice'])","8d840765":"sns.set_style('whitegrid')\nplt.figure(figsize = (15,10))\nplt.subplot(121)\nplt.hist(train['SalePrice'],color = 'red')\nplt.title(\"Before transformation\")\n\nplt.subplot(122)\nplt.hist(np.log1p(train['SalePrice']),color = 'green')\nplt.title(\"after transformation\")","41290f6c":"Train = all_data[:1460]\nTest = all_data[1460:]","f97ec4eb":"#pos = [1298,523, 297, 581, 1190, 1061, 635, 197,1328, 495, 583, 313, 335, 249, 706]\npos = [1298,523, 297]\n#y.drop(y.index[pos], inplace=True)\nTrain.drop(Train.index[pos], inplace = True)","81605377":"#pos = [1298,523, 297, 581, 1190, 1061, 635, 197,1328, 495, 583, 313, 335, 249, 706]\ny = train['SalePrice']\npos = [1298,523, 297]\ny.drop(y.index[pos], inplace=True)","d4055081":"X = test","6c6d34f5":"from sklearn.model_selection import train_test_split","02f91dcf":"x_train,x_test,y_train,y_test = train_test_split(Train,y,test_size = 0.33,random_state = 45)","0f29ef19":"#scaling the input data for better results\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.fit_transform(x_test)\n#X = scaler.fit_transform(X)","abfd24ab":"from sklearn.metrics import mean_squared_error\ndef build_model(model,X_train,X_test,Y_train,Y_test):\n    model = model.fit(X_train,Y_train)\n    y_predict_train = model.predict(X_train)\n    y_predict_test = model.predict(X_test)\n    rmse_test = np.sqrt(mean_squared_error(Y_test,y_predict_test))\n    rmse_train = np.sqrt(mean_squared_error(Y_train,y_predict_train))\n    print(\"Model RMSE on training set : {} \\nModel RMSE on test set : {}\".format(rmse_train,rmse_test))","cbfcc106":"#linear regression\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(Train,y)\nMSEs = cross_val_score(lr,Train,y,scoring = 'neg_mean_squared_error', cv = 5)\nnp.sqrt(-np.mean(MSEs))","02083eca":"#Our goal is to reduce the RMSE. let's try Lasso, Ridge, ElasticNet","c01a7661":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Ridge","f0d8a4db":"parameters ={'alpha': [i for i in range(0,101)]}\nrd = Ridge()","bdad6a8d":"rd = GridSearchCV(rd,param_grid = parameters, scoring = 'neg_mean_squared_error',cv = 5)","83df7629":"rd.fit(x_train,y_train)","f1badb8c":"print(rd.best_params_)\nprint(math.sqrt(-rd.best_score_))","72a0290f":"rd = Ridge(alpha = 4)","79fd5608":"rd = rd.fit(Train,y)","38d2aceb":"preds = np.expm1(rf.predict(Test))","452244cb":"preds","3737e8cc":"sln = pd.DataFrame({'Id':test.Id,'SalePrice':preds})","0d348670":"sln.to_csv(\"housing_price_pred_Jaikiran2.csv\", index = False)","07a36091":"from sklearn.ensemble import GradientBoostingRegressor","248394a3":"gb = GradientBoostingRegressor()","9130ce7a":"params = {'learning_rate':[0.01,0.1,0.5,0.8,1,2,3,5,8],\n         'n_estimators':[50,100,200,300],\n         }","c1494a87":"gb = GridSearchCV(gb, param_grid = params ,cv = 5)","81ee0e57":"gb.fit(Train,y)","eb1cd0f7":"gb.best_params_","933318af":"gb = GradientBoostingRegressor(learning_rate= 0.1,n_estimators=200)","8a292d5a":"gb.fit(Train,y)","3522f020":"from sklearn.ensemble import RandomForestRegressor","7d245f4b":"rf = RandomForestRegressor()\nparameters = {'n_estimators':[50,100,200,300,500,800],\n              'max_depth':[3,5,10,15,20],\n             }\nrf = GridSearchCV(rf,param_grid =parameters ,cv = 5)","6b9194e7":"rf.fit(Train,y)","df826619":"y_predict = rf.predict(Train)\nnp.sqrt(mean_squared_error(y,y_predict))","df405a94":"rf.best_params_","0d64c594":"rf = RandomForestRegressor(n_estimators = 800,max_depth=15)","d9b91af4":"rf.fit(Train,y)","67c4b027":"# Encoding","b636198a":"Showing the plot of strongly correlated features","d1e11567":"# Data Cleaning","24751d5e":" 1.Exploratory data analysis\n2.Data cleaning\n3.feature engineering\n4.detecting otliers\n5.encoding\n6.machine learning","ffe17ca0":"Outlier Detection","e41a5aa4":"Before data cleaning let's combine both train and test sets","a8db8f45":"Log transformation to handle skewness","2e20f327":"# 0.123","d465b256":"# EDA","bd2e1fd4":"# Feature Engineering ","ea166f5c":"# 0.113","d2185400":"onehotencoding","70e9cab9":"Let's figure out how many missing values are there","9786afa3":"# Model building "}}