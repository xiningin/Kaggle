{"cell_type":{"93ad5df9":"code","d472f104":"code","771258af":"code","5d4ce3f7":"code","41f65111":"code","b9bdb3e3":"code","13c33282":"code","78de2646":"code","1f957fd2":"code","19322369":"code","de7176b8":"code","111d2d91":"code","fed0075f":"code","b7108ca4":"code","1f13a281":"code","fd650287":"code","c3517d3c":"code","0ac88ff3":"code","8e2171e7":"code","7ad1b270":"code","4c1f7e15":"code","18f6b014":"code","aeb13596":"code","a5ab8833":"code","dc77ca4b":"code","fca0f583":"code","b26e5fde":"markdown","8ad306ef":"markdown","8a5cac86":"markdown","ea9916f5":"markdown","ffc8e991":"markdown","0a259d28":"markdown","b184c734":"markdown","da620b4c":"markdown","0708c08f":"markdown","8a06c13a":"markdown","9f3ca841":"markdown","a7c2f284":"markdown","62cd36cd":"markdown","246f392c":"markdown","a787b538":"markdown","286ed2c5":"markdown","83d888c2":"markdown","d640e8c5":"markdown","c7e0d3ae":"markdown","3f2e4e0b":"markdown","605a44f2":"markdown","3960867b":"markdown","1369744b":"markdown","9893fac3":"markdown","92d94187":"markdown","92db17c2":"markdown","afd6bc64":"markdown","2ad59b28":"markdown","485c202c":"markdown","870d666f":"markdown","c7f47a5a":"markdown","b42aabcd":"markdown","82ffa6a8":"markdown","d168e3c9":"markdown","8dc5abae":"markdown","083238a1":"markdown","3e698045":"markdown","f1602ca1":"markdown","896d0dca":"markdown","31cfaa73":"markdown","ce7b672e":"markdown","0c147261":"markdown","d30d465c":"markdown","7d7e35e5":"markdown","77dc7848":"markdown","db646dad":"markdown","e0f343bf":"markdown","666f6b5c":"markdown","852db545":"markdown","97e3c695":"markdown","8c766ebb":"markdown","f642fcc3":"markdown","18367624":"markdown","b4e1f801":"markdown","8bb57efc":"markdown","7637a2db":"markdown","d390d6cb":"markdown","9152fd8b":"markdown","3077ce92":"markdown","6e8034c3":"markdown","7f941ac4":"markdown","209eb668":"markdown","788fb76f":"markdown","1f9be517":"markdown","d6fea03d":"markdown","b83e3aba":"markdown","37f0ee2c":"markdown"},"source":{"93ad5df9":"pip install seaborn","d472f104":"import seaborn as sns\nsns.set(style=\"ticks\")\npenguins = sns.load_dataset(\"penguins\")\ng = sns.relplot(x=\"culmen_length_mm\", y=\"culmen_depth_mm\", hue=\"island\", data=penguins)","771258af":"g = sns.relplot(x=\"culmen_length_mm\", y=\"culmen_depth_mm\",\n                hue=\"island\", col=\"species\", data=penguins)","5d4ce3f7":"g = sns.relplot(x=\"culmen_length_mm\", y=\"culmen_depth_mm\", hue=\"island\",\n                col=\"species\", row=\"sex\", data=penguins)","41f65111":"g = sns.relplot(x=\"culmen_length_mm\", y=\"culmen_depth_mm\", hue=\"island\", size=\"island\",\n                palette=[\"b\", \"r\",\"g\"], sizes=(10, 100),\n                col=\"species\", data=penguins)","b9bdb3e3":"flights = sns.load_dataset(\"flights\")\ng = sns.relplot(x=\"year\", y=\"passengers\",hue = \"month\",\n                data=flights,kind = \"line\")","13c33282":"sns.set(style=\"ticks\")\nfmri = sns.load_dataset(\"fmri\")\ng = sns.catplot(x=\"timepoint\", y=\"signal\", hue=\"event\", data=fmri)","78de2646":"sns.set(style=\"ticks\")\nexercise = sns.load_dataset(\"exercise\")\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\",\n               data=exercise, kind=\"violin\")","1f957fd2":"exercise = sns.load_dataset(\"exercise\")\ng = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\",\n                col=\"diet\", data=exercise)","19322369":"tips = sns.load_dataset(\"tips\")\ng = sns.catplot(\"size\", col=\"sex\", col_wrap=4,\n                data=tips,\n                kind=\"count\")","de7176b8":"sns.set(style=\"ticks\")\ntitanic = sns.load_dataset(\"titanic\")\ntotal = float(len(titanic)) \nax = sns.countplot(x=\"class\", hue=\"who\", data=titanic) \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","111d2d91":"sns.catplot(x=\"kind\", y=\"pulse\", jitter=False, data=exercise);","fed0075f":"\nsns.catplot(x=\"day\", y=\"total_bill\", kind=\"swarm\", data=tips);","b7108ca4":"sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\", kind=\"swarm\", data=tips);","1f13a281":"fmri = sns.load_dataset(\"fmri\")\nsns.catplot(x=\"event\", y=\"signal\", kind=\"box\", data=fmri);","fd650287":"fmri = sns.load_dataset(\"fmri\")\nsns.catplot(x=\"event\", y=\"signal\", kind=\"box\",hue = \"region\", data=fmri);","c3517d3c":"sns.catplot(x=\"timepoint\", y=\"signal\", kind=\"boxen\",\n            data=fmri.sort_values(\"timepoint\"));","0ac88ff3":"\nsns.catplot(x=\"total_bill\", y=\"day\", hue=\"sex\",\n            kind=\"violin\", data=tips);","8e2171e7":"diamonds = sns.load_dataset(\"diamonds\")\nsns.catplot(x=\"color\", y=\"price\", hue=\"cut\", kind=\"bar\", data=diamonds);","7ad1b270":"sns.catplot(x=\"color\", kind=\"count\", palette=\"ch:.25\", data=diamonds);","4c1f7e15":"sns.catplot(x=\"sex\", y=\"survived\", hue=\"class\", kind=\"point\", data=titanic);","18f6b014":"sns.regplot(x=\"carat\", y=\"price\", data=diamonds);","aeb13596":"sns.lmplot(x=\"size\", y=\"tip\", data=tips);","a5ab8833":"sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips);","dc77ca4b":"import matplotlib.pyplot as plt\nfrom statsmodels.graphics.mosaicplot import mosaic\ndef my_mosaic(*args,**kwargs):\n    mosaic(kwargs['data'], list(args),\n           labelizer=lambda k: '',\n           ax=plt.gca())\n\ng = sns.FacetGrid(tips, col='size', col_wrap=4)\ng = g.map_dataframe(my_mosaic, 'time', 'sex')","fca0f583":"print(tips['total_bill'].skew())\nprint(tips['total_bill'].kurtosis())\nsns.distplot(tips['total_bill'])","b26e5fde":"**Example data sets**\n\nSeaborn itself have data sets preloaded with it, to see all the data sets \n\n> sns.get_dataset_names()\n\nThis will give you a list of data sets available and examples below are from those data sets\n","8ad306ef":"# Introduction\n\nIf variables have a categorical data type, the levels of the categorical variables and their order can be visualized. Otherwise you can use it by altering dataframe  by sorting or use the function parameters (orient, order, hue_order, etc.) to set up the plot correctly.\n\ncatplot(),helps us to plot\n\nDifferent type of catplot are \n\n# Categorical scatterplots:\n\n\uf0fc\tstripplot() (with kind=\"strip\"; the default)\n\n\uf0fc\tswarmplot() (with kind=\"swarm\")\n\n# Categorical distribution plots:\n\n\uf0fc\tboxplot() (with kind=\"box\")\n\n\uf0fc\tviolinplot() (with kind=\"violin\")\n\n\uf0fc\tboxenplot() (with kind=\"boxen\")\n\n# Categorical estimate plots:\n\n\uf0fc\tpointplot() (with kind=\"point\")\n\n\uf0fc\tbarplot() (with kind=\"bar\")\n\n\uf0fc\tcountplot() (with kind=\"count\")\n","8a5cac86":"**To choose the default seaborn theme, scaling and color, execute the below code**\n\n> sns.set()\n\n**What happens when we execute the code?**\n\nIt uses the matplotlib customizing system and will affect how all matplotlib plots look, even if you don\u2019t make them with seaborn library. Independent control of style and scaling of the plot is possible.\n","ea9916f5":"![image.png](attachment:image.png)","ffc8e991":"# Functionality that seaborn offers:\n\u2022\tA dataset-oriented API for examining relationships between features of data set. \n\n\u2022\tObservations or aggregate statistics for using categorical variables.\n\n\u2022\tUnivariate(one variate) or bivariate(two variate) distributions and to compare them between subsets of data\n\n\u2022\tPlotting of linear regression models for different kind\u2019s dependent variables.\n","0a259d28":"# Relational plots \u2013 \n\nThese plots help us to find relationship between two variables and their behavior. There are two types of relational plot, they are\n\uf076\tScatter plot ( when kind = \u201cscatter\u201d )\n\n\uf076\tLine plot ( when kind = \u201cline\u201d )\n\nRelationship between variables can be represented for different subsets of the data using the hue, size, and style parameters. 3rd dimensional parameter can be included by adding hue.\n\nNote - Unlike using plotting functions, data is provided in the form of data frame with columns specified by passing strings to x, y, and other parameters.\n","b184c734":"![image.png](attachment:image.png)","da620b4c":"# Example 11 - \n\n**Swarm Plot**\n\nThis approach adjusts the values along the categorical axis with an algorithm that prevents them from overlapping. It gives a better representation of distribution of observations, although it only works well for relatively small datasets. Also called a \u201cbeeswarm\u201d and is drawn in seaborn by swarmplot(), which is activated by setting kind=\"swarm\" in catplot():\n","0708c08f":"# **\u201cSometimes picture speaks louder than numbers\u201d**\n\nData visualization tools help us in understanding trends, outliers, and patterns in data. Graphs help us to make stories from data.\n\nThis tutorial will discuss how to create, visualize and get understanding of graphs generated using Python\u2019s seaborn package with help of examples.\n","8a06c13a":"# Example 22 - ","9f3ca841":"# Example 9 - \n\nExample for Count plot\n","a7c2f284":"It\u2019s possible to fit a linear regression when one of the variables takes discrete values, however, the simple scatterplot produced by this kind of dataset is often not optimal:","62cd36cd":"*You can change the orientation by changing the values I height and aspect values*","246f392c":"# Recommended dependencies\n\n\uf076\tstatsmodels (version >= 0.8.0)\n","a787b538":"seaborn.relplot(x=None, y=None, hue=None, size=None, style=None, data=None, row=None, col=None, col_wrap=None, row_order=None, col_order=None, palette=None, hue_order=None, hue_norm=None, sizes=None, size_order=None, size_norm=None, markers=None, dashes=None, style_order=None, legend='brief', kind='scatter', height=5, aspect=1, facet_kws=None, **kwargs)","286ed2c5":"# Example 8 - \n\nWith hue parameter \n","83d888c2":"This is an example of graph showing relationship between two numerical features on top of a categorical feature ","d640e8c5":"# Example 3 \u2013 \n\nFacet on the columns and rows:\n","c7e0d3ae":"Adding a hue semantic, the box for each level of the semantic variable is moved along the categorical axis so they don\u2019t overlap:","3f2e4e0b":"To install using conda:\n\n> conda install seaborn\n\nIf you wanted to install in Jupiter notebook or want to install in kaggle kernels,\n\n> !pip install seaborn \n","605a44f2":"*You can change the height and aspect ratio by specifying a numerical value*","3960867b":"Percentage added : ","1369744b":"# Example 12 - \n\n\nWe can add another dimension to a categorical plot by using a hue semantic. (The categorical plots do not currently support size or style semantics). Each different categorical plotting function handles the hue semantic differently. For the scatter plots, it is only necessary to change the color of the points:\n","9893fac3":"# Conditioning on other variables\n\n\nlmplot() combines regplot() with FacetGrid to provide an easy interface to show a linear regression on \u201cfaceted\u201d plots that allow you to explore interactions with up to three additional categorical variables.\n\nThe best way to separate out a relationship is to plot both levels on the same axes and to use color to distinguish them:\n\n# Example 23 -  \n","92d94187":"# Distplot\n\nSeaborn distplot lets you show a histogram with a line on it. This can be shown in all kinds of variations. We use seaborn in combination with matplotlib, the Python plotting module.\n\n\nA distplot plots a univariate distribution of observations. The distplot() function combines the matplotlib hist function with the seaborn kdeplot() and rugplot() functions.\n","92db17c2":"Note that the resulting plots are identical, except that the figure shapes are different. Main difference to know about is that regplot() accepts the x and y variables in a variety of formats including simple numpy arrays, pandas Series objects, or as references to variables in a pandas DataFrame object passed to data. In contrast, lmplot() has data as a required parameter and the x and y variables must be specified as strings. This data format is called \u201clong-form\u201d or \u201ctidy\u201d data. Other than this input flexibility, regplot() possesses a subset of lmplot()\u2019s features, so we will demonstrate them using the latter.","afd6bc64":"# Plotting with categorical data\n\nAbove we saw visual representations to show the relationship between multiple variables in a dataset having numerical values, so what about categorical variables, in seaborn, there are several different ways to visualize it. Let\u2019s jump into it\n","2ad59b28":"# Example 1 \u2013 ","485c202c":"*Note : The latest version of seaborn was released in April 2020 ( v0.10.1 )*","870d666f":"# Example 20 - ","c7f47a5a":"# Deep Inside\n\n**Step1 - Importing seaborn** \n\nimport seaborn as sns\n\nWhat happens when we import seaborn?\n\nIt contacts and seeks help from matplotlib to draw the graphs. Many functions can be done with seaborn itself but for customization purposes it approaches matplotlib. We have to use matplotlib.pyplot.show () to display the graph.\n","b42aabcd":"# Boxplots\n\n\nThis kind of plot shows the three quartile values of the distribution along with extreme values. The \u201cwhiskers\u201d extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed independently. This means that each value in the boxplot corresponds to an actual observation in the data.\n","82ffa6a8":"![image.png](attachment:image.png)","d168e3c9":"**Features of seaborn**\n\n\uf0d8\tRelational \n\n\uf0d8\tCategorical\n\n\uf0d8\tDistribution\n\n\uf0d8\tRegression\n\n\uf0d8\tMultiples\n\n\uf0d8\tStyle\n\n\uf0d8\tColor\n","8dc5abae":"# Mosaic Plot\n\n\n# Example 24 -  \n\n\n\nA mosaic plot (also known as a Marimekko diagram) is a graphical method for visualizing data from two or more qualitative variables. It is the multidimensional extension of spineplots, which graphically display the same information for only one variable.\n","083238a1":"![image.png](attachment:image.png)","3e698045":"# Functions to draw linear regression models\n\nTwo main functions in seaborn are used to visualize a linear relationship as determined through regression. \nThese functions, regplot() and lmplot() are closely related, and share much of their core functionality. In the simplest invocation, both functions draw a scatterplot of two variables, x and y, and then fit the regression model y ~ x and plot the resulting regression line and a 95% confidence interval for that regression:\n","f1602ca1":"# Example 18 - ","896d0dca":"# Example 2 \u2013 \n\nTo include other columns \n","31cfaa73":"# Violinplots\n\n\nIt combines a boxplot with the kernel density estimation \n\n# Example 16 - \n","ce7b672e":"This example shows how two numerical and two categorical variables are related","0c147261":"# Dependencies\n\n\uf076\tPython 3.6+\n","d30d465c":"![image.png](attachment:image.png)","7d7e35e5":"**Default representation in catplot() is scatterplot.**\n\nThere are two different categorical scatter plots in seaborn. They take different approaches to resolving the main challenge in representing categorical data with a scatter plot, which is that all of the points belonging to one category would fall on the same position along the axis corresponding to the categorical variable. \n\nThe approach used by stripplot(), which is the default \u201ckind\u201d in catplot() is to adjust the positions of points on the categorical axis with a small amount of random \u201cjitter\u201d\n","77dc7848":"**Load data sets**\n\nTo load one of the example datasets\n\n> sns.load_dataset(\u2018Dataset_name\u2019)    \n","db646dad":"# Baseline: Kurtosis value of 0\n\n\nData that follow a normal distribution perfectly have a kurtosis value of 0. Normally distributed data establishes the baseline for kurtosis. Sample kurtosis that significantly deviates from 0 may indicate that the data are not normally distributed.\n\n# Positive kurtosis:\n\nA distribution with a positive kurtosis value indicates that the distribution has heavier tails and a sharper peak than the normal distribution. For example, data that follow a t distribution have a positive kurtosis value.\n\n# Negative kurtosis:\n\nA distribution with a negative kurtosis value indicates that the distribution has lighter tails and a flatter peak than the normal distribution. For example, data that follow a beta distribution with first and second shape parameters equal to 2 have a negative kurtosis value.\n\nA negative kurtosis means that your distribution is flatter than a normal curve with the same mean and standard deviation.\nSo, when is the skewness too much?\n\n# The rule of thumb seems to be:\n\nIf the skewness is between -0.5 and 0.5, the data are fairly symmetrical.\n\nIf the skewness is between -1 and -0.5(negatively skewed) or between 0.5 and 1(positively skewed), the data are moderately skewed.\n\nIf the skewness is less than -1(negatively skewed) or greater than 1(positively skewed), the data are highly skewed.\n","e0f343bf":"# Example 19 - \n\nA special case for the bar plot is when you want to show the number of observations in each category rather than computing a statistic for a second variable. This is similar to a histogram over a categorical, rather than quantitative, variable. In seaborn, it\u2019s easy to do so with the countplot() function:\n","666f6b5c":"Unlike with numerical data, it is not always obvious how to order the levels of the categorical variable along its axis. \n\nIn general, the seaborn categorical plotting functions try to infer the order of categories from the data. If your data have a pandas Categorical datatype, then the default order of the categories can be set there.\n\nIf the variable passed to the categorical axis looks numerical, the levels will be sorted. But the data are still treated as categorical and drawn at ordinal positions on the categorical axes (specifically, at 0, 1, \u2026) even when numbers are used to label them","852db545":"# Relational\n\n**Visualizing statistical relationships**\n\nTo understand how features in a dataset relate to each other and how those relationships depend on other variables we use this type of graphs. \n","97e3c695":"seaborn.catplot(x=None, y=None, hue=None, data=None, row=None, col=None, col_wrap=None, estimator=<function mean at 0x105c7d9e0>, ci=95, n_boot=1000, units=None, seed=None, order=None, hue_order=None, row_order=None, col_order=None, kind='strip', height=5, aspect=1, orient=None, color=None, palette=None, legend=True, legend_out=True, sharex=True, sharey=True, margin_titles=False, facet_kws=None, **kwargs)","8c766ebb":"# Example 4 \u2013 \n\nUsing multiple semantic variables on each facet with specific features:\n","f642fcc3":"![image.png](attachment:image.png)","18367624":"# Example 6 \u2013 ","b4e1f801":"Returns:\n\tFacet Grid object with a plot \n","8bb57efc":"# Data visualization using seaborn python","7637a2db":"# Boxen Plot\n\nIt is more optimized for showing more information about the shape of the distribution. It is best suited for larger datasets:\n","d390d6cb":"# Installing and getting started\n\nTo install the latest release of seaborn, you can use pip:\n","9152fd8b":"# Statistical estimation within categories\n\n\nIn some cases, we have to show central tendency of the values. Seaborn has two main ways to show this information\n","3077ce92":"# Example 14 - ","6e8034c3":"# Distributions of observations within categories\n\n\nAs the size of the dataset grows, categorical scatter plots become limited in distribution of values. There are several approaches for summarizing the distributional information in ways that facilitate easy comparisons across the category levels\n","7f941ac4":"# Mandatory dependencies\n\n\uf076\tnumpy ( version >= 1.13.3)\n\n\uf076\tscipy ( version >= 1.0.1)\n\n\uf076\tpandas ( version >= 0.22.0)\n\n\uf076\tmatplotlib ( version >= 2.1.2)\n\n","209eb668":"# Example 5 \u2013 \n\nThis time series plot is obtained simply by changing the kind to line \n","788fb76f":"# Example 10 - ","1f9be517":"# Seaborn package \u2013 \n\nSeaborn package provides an application program interface on top of Matplotlib. It defines simple high-level functions for common statistical plot types, and integrates with functionality provided by Pandas.\n\nIt  provides high-level commands to create a variety of plot types useful for statistical data exploration, and even some statistical model fitting.\n","d6fea03d":"# Example 7 \u2013 \n\nTo visualize a violin plot\n","b83e3aba":"# Bar plots\n\n\n In seaborn, the barplot() function operates on a full dataset and applies a function to obtain the estimate (taking the mean by default). If multiple observations are there in each category, bootstrapping is used to compute a confidence interval around the estimate, which is plotted using error bars\n","37f0ee2c":"# Point plots\n\nAn alternative style for visualizing the same information is offered by the pointplot() function. This function also encodes the value of the estimate with height on the other axis, but rather than showing a full bar, it plots the point estimate and confidence interval. Additionally, pointplot() connects points from the same hue category. This makes it easy to see how the main relationship is changing as a function of the hue semantic, because your eyes are quite good at picking up on differences of slopes:\n"}}