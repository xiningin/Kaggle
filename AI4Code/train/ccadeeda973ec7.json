{"cell_type":{"a0e8d2b2":"code","8ee82020":"code","c2726af0":"code","811ce7b3":"code","210feecc":"code","e385b262":"code","cc21f2ba":"code","3ddebec5":"code","729e4e19":"code","15ce4812":"code","e9524d73":"code","16348856":"code","a843df2c":"code","bc563710":"code","78eaed19":"code","4a6407ca":"code","7e9d52bd":"code","37592cea":"code","07cf8bd2":"code","0c200af3":"code","05365fb8":"code","0a587f6d":"code","ad818d21":"code","b1fcc82c":"markdown","37c62e93":"markdown","f04901fd":"markdown","4f0a08fc":"markdown","d05c999c":"markdown","9a4803b2":"markdown","10f4ac5b":"markdown","e7df67fb":"markdown","08c4e98c":"markdown","34ac434d":"markdown","4302103e":"markdown","77881e96":"markdown","b73fb869":"markdown","e589dfdb":"markdown","364c27d3":"markdown","b86a97ee":"markdown","566827e1":"markdown","9b3f8a56":"markdown"},"source":{"a0e8d2b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import IFrame\nimport plotly\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom mpl_toolkits.basemap import Basemap\n!conda install basemap-data-hires --yes\n\nplt.style.use('ggplot')\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8ee82020":"df = pd.read_csv('..\/input\/AWS_Honeypot_marx-geo.csv', parse_dates=['datetime'])\ndf_orig = df\ndf.head()","c2726af0":"df.isnull().sum()","811ce7b3":"df = df.drop(['type', 'Unnamed: 15'], axis=1)","210feecc":"df = df.dropna(subset=['latitude'])\ndf = df.dropna(subset=['longitude'])\ndf.isnull().sum()","e385b262":"df = df.set_index(pd.DatetimeIndex(df['datetime']))","cc21f2ba":"df['num_attacks'] = 1\ngrouped_times = df.resample('1H').sum()\ngrouped_times.fillna(0, inplace=True)\ngrouped_times['num_attacks'].head(10)","3ddebec5":"# create the plot space upon which to plot the data\nfig, ax= plt.subplots()\n\n# add the x-axis and the y-axis to the plot\nax.bar(grouped_times.index.values, \n        grouped_times['num_attacks'], \n        color = 'red',\n        alpha=0.3)\n\n# rotate tick labels\nplt.setp(ax.get_xticklabels(), rotation=45)\n\n# set title and labels for axes\nax.set(xlabel=\"Date\",\n       ylabel=\"Attacks\",\n       title=\"Number of Attacks Per Hour by Date\");","729e4e19":"grouped_times['log_value'] = np.log(grouped_times['num_attacks']+1)\n\nbreak_ins = go.Scatter(\n                x=grouped_times.index,\n                y=grouped_times['log_value'],\n                name='Flagged Break-Ins'\n                )\n\nlayout = go.Layout(\n    title = 'Time Series of Break-In Attempts',\n    xaxis = go.layout.XAxis(\n        title=go.layout.xaxis.Title(text='Date'),\n        tickformat = '%d %B %Y'\n    ),\n    yaxis=go.layout.YAxis(\n        title=go.layout.yaxis.Title(text='Number of Break-Ins')\n    )\n)\n\ndata = [break_ins]\n\nfig = go.Figure(\n    data=data,\n    layout=layout\n)\n\npy.iplot(fig, filename = 'break-ins-over-time')","15ce4812":"top_countries = df['country'].value_counts()\nc_name = list(top_countries.index)\nc_count = list(top_countries.values)\ntop_countries.head(10)","e9524d73":"top_countries = pd.DataFrame({'name':c_name, 'num':c_count})\ntop_countries['tup'] = list(zip(top_countries.name, top_countries.num))\ntop_countries['log_value'] = np.log(top_countries['num'])","16348856":"#color ramp for chloropleth map\nscl = [[0.0, 'rgb(242,240,247)'],[0.2, 'rgb(218,218,235)'],[0.4, 'rgb(188,189,220)'], [0.6, 'rgb(158,154,200)'],[0.8, 'rgb(117,107,177)'],[1.0, 'rgb(84,39,143)']]\n\nfig = go.Figure(\ndata = [ dict(\n        type='choropleth',\n        colorscale = 'blues',\n        locations = top_countries['name'],\n        z = top_countries['log_value'],\n        locationmode = ('country names'),\n        text = ('country: '+top_countries['name'] + '<br>' +\\\n               'number of attacks: '+top_countries['num'].apply(str)),\n        marker = dict(\n            line = dict (\n                color = 'rgb(255,255,255)',\n                width = 0.5\n            )\n        ),\n        colorbar = dict(\n            title = \"Log of<br>Frequency\"\n        )\n    ) ],\n\nlayout = dict(\n        title = 'Honeypot Attacks by Country',\n        geo = dict(\n            scope='world',\n            projection=dict( type='natural earth' ),\n            showlakes = True,\n            landcolor = 'lightgray',\n            showland = True,\n            showcountries = True,\n            countrycolor = 'gray',\n            countrywidth = 0.5,\n            lakecolor = 'rgb(255, 255, 255)',\n        ),\n    )\n)\npy.iplot(fig, filename='IP-world-map')","a843df2c":"df.drop(df[df['latitude'] > 90].index, inplace=True)\ndf['latitude'].describe()","bc563710":"#Create basemap\nlat = df['latitude'].values\nlon = df['longitude'].values\n\n# buffer to add to the range\nmargin = 20 \nlat_min = min(lat) - margin\nlat_max = max(lat) + margin\nlon_min = min(lon) - margin\nlon_max = max(lon) + margin\n\nplt.figure(figsize=(30,15))\nm = Basemap(llcrnrlon=lon_min,\n            llcrnrlat=lat_min,\n            urcrnrlon=lon_max,\n            urcrnrlat=lat_max,\n            lat_0=(lat_max - lat_min)\/2,\n            lon_0=(lon_max-lon_min)\/2,\n            projection='merc',\n            resolution = 'h',\n            area_thresh=10000.,\n           )\nm.drawcoastlines()\nm.drawcountries()\nm.drawstates()\nm.drawmapboundary(fill_color='#46bcec')\nm.fillcontinents(color = 'white',lake_color='#46bcec')\n# convert lat and lon to map projection coordinates\nlons, lats = m(lon, lat)\n# plot points as red dots\nm.scatter(lons, lats, marker = '.', color='r', zorder=5, s=3)\nplt.show()","78eaed19":"df['srcstr'].value_counts().nlargest(10)","4a6407ca":"df_ip1 = df[df.srcstr == '175.146.199.252']\ndf_ip2 = df[df.srcstr == '2.186.189.218']\ndf_ip3 = df[df.srcstr == '203.178.148.19']\ndf_ip4 = df[df.srcstr == '128.9.168.98']\ndf_ip5 = df[df.srcstr == '129.82.138.44']\ndf_ip6 = df[df.srcstr == '183.91.14.60']\ndf_ip7 = df[df.srcstr == '96.254.171.2']\ndf_ip8 = df[df.srcstr == '68.145.164.27']\ndf_ip9 = df[df.srcstr == '123.151.42.61']\ndf_ip10 = df[df.srcstr == '220.225.17.46']","7e9d52bd":"def generate_timeline(df,ip):\n    grouped_times = df.resample('1H').sum()\n    grouped_times.fillna(0, inplace=True)\n    #grouped_times['log_value'] = np.log(grouped_times['num_attacks']+1)\n\n    break_ins = go.Scatter(\n                    x=grouped_times.index,\n                    y=grouped_times['num_attacks'],\n                    name='Attacks'\n                    )\n\n    layout = go.Layout(\n        title = 'Time Series of Break-In Attempts ('+ip+')',\n        xaxis = go.layout.XAxis(\n            title=go.layout.xaxis.Title(text='Date'),\n            tickformat = '%d %B %Y'\n        ),\n        yaxis=go.layout.YAxis(\n            title=go.layout.yaxis.Title(text='Number of Break-Ins')\n        )\n    )\n\n    data = [break_ins]\n\n    fig = go.Figure(\n        data=data,\n        layout=layout\n    )\n\n    py.iplot(fig, filename = 'break-ins-over-time')","37592cea":"generate_timeline(df_ip1,'175.146.199.252')\ngenerate_timeline(df_ip2,'2.186.189.218')\ngenerate_timeline(df_ip3,'203.178.148.19')\ngenerate_timeline(df_ip4,'128.9.168.98')\ngenerate_timeline(df_ip5,'129.82.138.44')\ngenerate_timeline(df_ip6,'183.91.14.60')\ngenerate_timeline(df_ip7,'96.254.171.2')\ngenerate_timeline(df_ip8,'68.145.164.27')\ngenerate_timeline(df_ip9,'123.151.42.61')\ngenerate_timeline(df_ip10,'220.225.17.46')","07cf8bd2":"df_orig['proto'].value_counts()","0c200af3":"df_orig.head()","05365fb8":"df_mapbox = df_orig.drop(['src','spt','dpt','cc','locale','localeabbr','postalcode'], axis=1)\ndf_mapbox = df_orig.dropna(subset=['latitude'])\ndf_mapbox = df_orig.dropna(subset=['longitude'])\ndf1 = df_orig[df_orig['proto']=='TCP']\ndf2 = df_orig[df_orig['proto']=='UDP']\ndf3 = df_orig[df_orig['proto']=='ICMP']","0a587f6d":"mapbox_access_token = 'pk.eyJ1IjoianNjZWFyY2UiLCJhIjoiY2p5azhidjh3MGJ1azNxbGlyeXJrNDA3ZCJ9.6UXtubZtsMny5_wlho0IaA'","ad818d21":"data = [\n    go.Scattermapbox(\n        name='TCP',\n        lat=df1['latitude'],\n        lon=df1['longitude'],\n        mode='markers',\n        text = df1['srcstr'],\n        marker=dict(\n            size=6,\n            color='orange',\n            opacity=0.5\n        )),\n    go.Scattermapbox(\n        name='UDP',\n        lat=df2['latitude'],\n        lon=df2['longitude'],\n        mode='markers',\n        text = df2['srcstr'],\n        marker=dict(\n            size=6,\n            color='blue',\n            opacity=0.5\n        )),\n    go.Scattermapbox(\n        name='ICMP',\n        lat=df3['latitude'],\n        lon=df3['longitude'],\n        mode='markers',\n        text = df3['srcstr'],\n        marker=dict(\n            size=6,\n            color='beige',\n            opacity=0.5\n        ))\n        ]\nlayout = go.Layout(\n    autosize=True,\n    hovermode='closest',\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=0,\n            lon=0\n        ),\n        pitch=20,\n        zoom=1,\n        style='satellite'\n    ),\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename='Attack Mapbox')","b1fcc82c":"Helper function to consolidate some code since we are just using our Plotly graph from earlier to plot these specific IP addresses","37c62e93":"Basemap with dots indicating where each attack originated","f04901fd":"Another time series analysis, but this time we take the log to smooth out some of the high spikes.","4f0a08fc":"Read data and examine first few lines","d05c999c":"We see some interesting trends here. Some of the top offenders only have one period of time they run their attacks. This may be an indicator of a DoS type attack. Some are very sporadic and some try to attack very consistently","9a4803b2":"##Plotting Location of Attacks\nThis is my first kernel, just wanted to explore some cyber data. Open to any suggestions for improving my analysis or ways to take this analysis further.","10f4ac5b":"Here we see the top 10 IP addresses in terms of attack volume","e7df67fb":"Examine the number of nulls in data. we see that type and unnamed are mostly null. They will not be important to our analysis anyway so we will drop them","08c4e98c":"Turn top countries series into a usable dataframe for plotting later","34ac434d":"List top countries where attacks originate","4302103e":"Set index of dataframe to the date column to do time series analysis","77881e96":"Generate a heatmap of attack origins","b73fb869":"Here we split the data into 1 hour chunks of time for our time series analysis. The way to count attacks is a bit messy as we just set a new column to 1 since each row represents one attack. This makes it easy to then count all '1's in an hour chunk of time to get the total number of attacks for that chunk.","e589dfdb":"Create different dataframes for each of the top 10 bad IP addresses","364c27d3":"Quick view of lat long coordinates for attacks colored by the protocol of attack","b86a97ee":"Plot number of attacks per hour across whole dataset. We see some very major spikes on a few days throught the span of data colection.","566827e1":"There is a value in the latitude column that is much higher than 90. Since latitudes above 90 do not exist, we drop this row so we can plot using the lat long coordinates","9b3f8a56":"Drop any NA values for lat and long columns since we will be using that column to do our geographic analysis"}}