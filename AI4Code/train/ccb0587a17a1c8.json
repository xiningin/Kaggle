{"cell_type":{"9defce3c":"code","d67a8c3a":"code","76ef301d":"code","1ef0601d":"code","351a5deb":"code","35dde6c0":"code","cb5bb48c":"code","2c547039":"code","8ee7c335":"markdown"},"source":{"9defce3c":"import pandas as pd\nimport numpy as np\nimport os\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import load_model\nfrom sklearn.model_selection import GridSearchCV\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nimport matplotlib.pyplot as plt","d67a8c3a":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain","76ef301d":"x_train = train.iloc[:, 1:]\nx_test = test.iloc[:, :]\ny_train = train.iloc[:, 0]\n# Normalization\nmn = MinMaxScaler()\nx_train \/= 255\ny_train = to_categorical(y_train)\nx_test \/= 255\n# reshape\nx_train = x_train.values.reshape(-1, 28, 28, 1)\nx_test = x_test.values.reshape(-1, 28, 28, 1)","1ef0601d":"imageGen = ImageDataGenerator(width_shift_range = 0.1, height_shift_range = 0.1, rotation_range = 20, \n                              zoom_range = 0.1)","351a5deb":"if(os.path.exists(\".\/pretrainedModels\")):\n    cnn = load_model(\".\/pretrainedModels\")\nelse:\n    reduce_lr = ReduceLROnPlateau(verbose = 1)\n    nets = 15\n    cnn = [0] * nets\n    for i in range(nets):\n        # split the training set\n        x_train2, x_val2, y_train2, y_val2 = train_test_split(x_train, y_train, test_size = 0.1)\n        \n        train_set = imageGen.flow(x_train2, y_train2, batch_size = 64)\n     \n        cnn[i] = Sequential()\n        cnn[i].add(Conv2D(filters = 64, kernel_size = 3, activation = \"relu\", input_shape = (28, 28, 1)))\n        cnn[i].add(MaxPool2D(pool_size = 2))\n        \n        cnn[i].add(Conv2D(filters = 64, kernel_size = 3, activation = \"relu\"))\n        cnn[i].add(MaxPool2D(pool_size = 2))\n\n        cnn[i].add(Conv2D(filters = 64, kernel_size = 3, activation = \"relu\"))\n        cnn[i].add(MaxPool2D(pool_size = 2))\n\n        cnn[i].add(Flatten())\n\n        cnn[i].add(Dense(units = 120, activation = \"relu\"))\n        cnn[i].add(Dense(units = 84, activation = \"relu\"))\n        cnn[i].add(Dense(units = 10, activation = \"softmax\"))\n        cnn[i].compile(optimizer = \"adam\", metrics = \"accuracy\", \n                    loss = \"categorical_crossentropy\")\n        print(\"Net: {0} \/ {1}\".format(i + 1, nets))\n        cnn[i].fit(x = train_set, batch_size = 32, epochs = 100, validation_data = (x_val2, y_val2), callbacks = [reduce_lr])\n        #cnn[i].save(\".\/pretrainedModels\")","35dde6c0":"y_pred = np.zeros((x_test.shape[0],10)) \nfor i in range(nets):\n    y_pred += cnn[i].predict(x_test)\ny_pred = np.argmax(y_pred, axis = 1)\ny_pred","cb5bb48c":"output = pd.DataFrame()\noutput[\"ImageId\"] = np.arange(1, test.shape[0] + 1)\noutput[\"Label\"] = y_pred\noutput","2c547039":"output.to_csv(\".\/submission.csv\", index = False)","8ee7c335":"os.remove(\".\/pretrainedModels\")"}}