{"cell_type":{"b1ae392b":"code","dea2efa8":"code","306ace5a":"code","5a027608":"code","efd68486":"code","39dd4363":"code","73d9bed0":"code","3e0b9d29":"code","ebb458cc":"code","37222073":"code","f1b94b0c":"code","2c7e3a09":"code","e1140440":"markdown","2f0fd6f4":"markdown"},"source":{"b1ae392b":"import numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n#!pip install matplotlib==3.3.2\n\nimport matplotlib.pyplot as plt\n\nurl = \"https:\/\/images.pexels.com\/photos\/1108099\/pexels-photo-1108099.jpeg\"\nresponse = requests.get(url)\nimg = Image.open(BytesIO(response.content))\nimgt = img.resize((img.size[0] \/\/ 4, img.size[1] \/\/ 4))\nimg_np = np.array(imgt)\nplt.imshow(img_np)","dea2efa8":"!pip install torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n!pip install -U fastai\nimport fastai\nprint(fastai.__version__)\n\n!pip install icevision\n!pip install icedata\n\nfrom icevision.all import *\nimport icedata\n\nimport torch\nprint(f'{torch.__version__} cuda is on: {torch.cuda.is_available()}')","306ace5a":"plt.imshow(img_np)","5a027608":"device = \"cpu\"\ndevice = \"cuda\"\n\nclass_map = icedata.datasets.pets.class_map()\n\nmodel = faster_rcnn.model(num_classes=len(class_map))\n\nurl = \"https:\/\/github.com\/airctic\/model_zoo\/releases\/download\/m3\/pets_faster_resnetfpn50.zip\"\nstate_dict = torch.hub.load_state_dict_from_url(url, map_location=torch.device(device))\nmodel.load_state_dict(state_dict)\n\n# good model inference\ninfer_tfms = tfms.A.Adapter([*tfms.A.resize_and_pad(size=384), tfms.A.Normalize()])\ninfer_ds = Dataset.from_images([img_np], infer_tfms)\n\nbatch, samples = faster_rcnn.build_infer_batch(infer_ds)\npreds = faster_rcnn.predict(model=model, batch=batch)\n\ninfer_dl = faster_rcnn.infer_dl(infer_ds, batch_size=1)\nsamples, preds = faster_rcnn.predict_dl(model=model, infer_dl=infer_dl)\n\nimgs = [sample[\"img\"] for sample in samples]\nshow_preds(\n    imgs=imgs,\n    preds=preds,\n    class_map=class_map,\n    denormalize_fn=denormalize_imagenet,\n    show=True,\n    display_label=False,\n)","efd68486":"# Load the PETS dataset\npath = icedata.pets.load_data()\n\n# Get the class_map, a utility that maps from number IDs to classs names\nclass_map = icedata.pets.class_map()\n\n# Randomly split our data into train\/valid\ndata_splitter = RandomSplitter([0.8, 0.2])\n\n# PETS parser: provided out-of-the-box\nparser = icedata.pets.parser(data_dir=path, class_map=class_map)\ntrain_records, valid_records = parser.parse(data_splitter)\n\n# shows images with corresponding labels and boxes\nshow_records(train_records[:6], ncols=3, class_map=class_map, show=True)\n\n# Define transforms - using Albumentations transforms out of the box\ntrain_tfms = tfms.A.Adapter(\n    [*tfms.A.aug_tfms(size=384, presize=512), tfms.A.Normalize()]\n)\nsize=384\nvalid_tfms = tfms.A.Adapter([*tfms.A.resize_and_pad(size), tfms.A.Normalize()])\n# Create both training and validation datasets\ntrain_ds = Dataset(train_records, train_tfms)\nvalid_ds = Dataset(valid_records, valid_tfms)\n\n# Create both training and validation dataloaders\ntrain_dl = faster_rcnn.train_dl(train_ds, batch_size=16, num_workers=4, shuffle=True)\nvalid_dl = faster_rcnn.valid_dl(valid_ds, batch_size=16, num_workers=4, shuffle=False)\n\n# Create model\nmodel = faster_rcnn.model(num_classes=len(class_map))\n\n# Define metrics\nmetrics = [COCOMetric(metric_type=COCOMetricType.bbox)]","39dd4363":"learn = faster_rcnn.fastai.learner(\n    dls=[train_dl, valid_dl], model=model, metrics=metrics\n)\n\nlearn.fine_tune(2, lr=1e-4)","73d9bed0":"plt.imshow(img_np)","3e0b9d29":"trained_model = learn.model","ebb458cc":"sd = trained_model.state_dict()","37222073":"PATH = 'pets1.pth'\ntorch.save(trained_model.state_dict(), PATH)","f1b94b0c":"type(trained_model)","2c7e3a09":"infer_tfms = tfms.A.Adapter([*tfms.A.resize_and_pad(size=384), tfms.A.Normalize()])\ninfer_ds = Dataset.from_images([img_np], infer_tfms)\ninfer_dl = faster_rcnn.infer_dl(infer_ds, batch_size=1)\n\nsamples, preds = faster_rcnn.predict_dl(model=trained_model, infer_dl=infer_dl)\n\nimgs = [sample[\"img\"] for sample in samples]\nshow_preds(\n    imgs=imgs,\n    preds=preds,\n    class_map=class_map,\n    denormalize_fn=denormalize_imagenet,\n    show=True,\n    display_label=False,\n)","e1140440":"## Do Inference","2f0fd6f4":"## Other Code"}}