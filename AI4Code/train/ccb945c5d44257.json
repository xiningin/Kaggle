{"cell_type":{"5c1820c6":"code","3ab6f9c5":"code","4175d2c1":"code","41376468":"code","842d8210":"code","3ba196eb":"code","bb977a60":"code","2d90e808":"code","4080a9a5":"code","99d13c3f":"code","654a29fa":"code","52e4a96a":"code","f8c5ede8":"code","58d3f1e0":"code","57e3b7f5":"code","06aaf842":"code","89356212":"code","82d5ff47":"code","d3045c1f":"code","6957078a":"code","8f5eec36":"code","48d8bdad":"markdown","0ac608b3":"markdown","b6bd4e66":"markdown","8acee2d5":"markdown","16c2911b":"markdown","50e5237d":"markdown","530f2885":"markdown","1acb0b2b":"markdown","46a9f969":"markdown","e12207f2":"markdown","9d80610d":"markdown","d4d43541":"markdown","7d84aa81":"markdown","975b7d57":"markdown","f4b14cd7":"markdown","ef146c8c":"markdown","63973d4f":"markdown","f4c65f57":"markdown","169fe368":"markdown"},"source":{"5c1820c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ab6f9c5":"import numpy as np\nimport pandas as pd\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))","4175d2c1":"df = pd.read_csv('..\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv')\ndf.info()","41376468":"df.head(10)","842d8210":"from sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nle = LabelEncoder()\ndf['loc_n'] = le.fit_transform(df['location'])\nsns.set(style = 'darkgrid')\nsns.countplot(df['loc_n'])","3ba196eb":"\ndf['variant_n'] = le.fit_transform(df['variant'])\n","bb977a60":"gk = df.groupby('variant')\ngk.first(5)","2d90e808":"# Finding values contained in Delta group\ngk.get_group('Delta')","4080a9a5":"# group by more than one category\n\ngkk = df.groupby(['variant','num_sequences_total'])\ngkk.first(5)","99d13c3f":"# group by , count \n\nv_by_seq = df.groupby('location')['variant'].count()\nv_by_seq.head(10)","654a29fa":"# using nlargest() function will get the \n# largest values of Variant sequences\ndf.groupby('variant')['perc_sequences'].nlargest().head(5)","52e4a96a":"# Distribution of different Variants \ndf.groupby('variant',sort=False).sum()","f8c5ede8":"df.groupby(['location','perc_sequences'])['variant'].count()","58d3f1e0":"\n\nimport plotly.graph_objs as g\nl = df.iloc[:200,:]\ns = g.Scatter(x = l.variant, y = l.perc_sequences,\n             mode = 'lines+markers',name = 'Variants',\n             text = l.variant,fillcolor = 'red')\n\n\ndata = [s]\nlayout = dict(title = 'Percentage of Variants')\nfig = dict(data = data, layout = layout)\niplot(fig)","57e3b7f5":"import matplotlib.pyplot as plt\ndf['year'] = pd.DatetimeIndex(df['date']).year\ndf['month'] = pd.DatetimeIndex(df['date']).month\ndf['day'] = pd.DatetimeIndex(df['date']).day\n\nprint('Years in dataset',np.unique(df['year']))\nsns.set()\ndf['year'].plot()\nplt.xlabel('Cases')\nplt.ylabel('Year')\nplt.title('Virus spread across the years')","06aaf842":"# Consider data from 2021\ndf2021 = df[df.year==2020].iloc[:100,:]\nb1 = g.Bar(x = df2021.variant, y = df.perc_sequences,\n          name = 'Variant Percentage Sequences',\n           marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n        line=dict(color='rgb(0,0,0)',width=1.5)))\nb2 = g.Bar(x = df2021.variant, y = df.num_sequences_total,\n          name = 'Variant total sequences',\n          marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\ndata = [b1,b2]\nlayout = g.Layout(barmode = 'group')\nfig = g.Figure(data = data, layout = layout)\niplot(fig)","89356212":"import plotly.express as px\n\n# Location wise cases spread\nfig = px.scatter_3d(df, x='location', y='perc_sequences', z = 'num_sequences_total' , \n                   color = 'location')\nfig.show()","82d5ff47":"fig = px.scatter_3d(df, x='variant', y='perc_sequences', z = 'variant_n' , \n                   color = 'variant',symbol = 'variant')\nfig.show()","d3045c1f":"v_data = df.groupby('variant',sort=False).sum()\n\nv_data.head(10)","6957078a":"fig = g.Figure(data = [g.Surface(z = v_data.values)])\nfig.update_traces(contours_z=dict(show=True, usecolormap=True,\n                                  highlightcolor=\"limegreen\", project_z=True))\nfig.update_layout(title = 'Variants 3D surface plot',autosize=True,\n                 width = 600, height = 800,\n                 margin = dict(l = 65, r=50, b=65, t=90))\nfig.show()","8f5eec36":"import plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\n\nrs = np.random.RandomState()\nrs.seed(0)\n\ndef brownian_motion(T = 1, N = 100, mu = 0.1, sigma = 0.01, S0 = 20):\n    dt = float(T)\/N\n    t = np.linspace(0, T, N)\n    W = rs.standard_normal(size = N)\n    W = np.cumsum(W)*np.sqrt(dt) # standard brownian motion\n    X = (mu-0.5*sigma**2)*t + sigma*W\n    S = S0*np.exp(X) # geometric brownian motion\n    return S\n\ndates = pd.date_range(l.date.min(), l.date.max())\nT = (dates.max()-dates.min()).days \/ 365\nN = dates.size\nstart_price = 100\ny = brownian_motion(T, N, sigma=0.1, S0=start_price)\nz = brownian_motion(T, N, sigma=0.1, S0=start_price)\n\nfig = go.Figure(data=go.Scatter3d(\n    x=dates, y=y, z=z,\n    marker=dict(\n        size=4,\n        color=z,\n        colorscale='Viridis',\n    ),\n    line=dict(\n        color='darkblue',\n        width=2\n    )\n))\n\nfig.update_layout(\n    width=800,\n    height=700,\n    autosize=False,\n    scene=dict(\n        camera=dict(\n            up=dict(\n                x=0,\n                y=0,\n                z=1\n            ),\n            eye=dict(\n                x=0,\n                y=1.0707,\n                z=1,\n            )\n        ),\n        aspectratio = dict( x=1, y=1, z=0.7 ),\n        aspectmode = 'manual'\n    ),\n)\n\nfig.show()","48d8bdad":"# 3D line plots","0ac608b3":"Spread of virus from 2020 to 2022","b6bd4e66":"Observation:\n\n1. The percentage of Delta and other viruses have sharp increase.\n2. The S pelican variant cases would be third highest virus variant, which would spread faster.\n","8acee2d5":"groupby() is a very powerful function with a lot of variations. It makes the task of splitting the dataframe over some criteria really easy and efficient.","16c2911b":"# Bar Charts","50e5237d":"# 3D Surface plots\n\nVirus spread","530f2885":"# Encoding categorical features\n\nFeatures that contain non numerical data like characters need to be encoded to represent data statistically. This step is performed during the data preprocessing stage.\n\n1. Label Encoding Features\n\n    * Labelling each data point in dataframe feature as number or alphabet manually using dictionaries \/ lists\/ arrrays or using sklearn encoder.\n    * Ex: Dictionary('A':1,'B':4,'Teddy': 300, 'Valentine':598)\n\n2. One hot encoding\n\n   *  A one hot encoding is a representation of categorical variables as binary vectors.This first requires that the categorical values be mapped to integer values.Then, each integer value is represented as a binary vector that is all zero values except the index of the integer, which is marked with a 1.\n\n   * In this example, we will assume the case where you have an output sequence of the following 3 labels:\n\n            \"cold\"\n            \"warm\"\n            \"hot\"\n\n    * An example sequence of 10 time steps may be:\n\n        [cold, cold, warm, cold, hot, hot, warm, cold, warm, hot]\n\n        This would first require an integer encoding, such as 1, 2, 3. This would be followed by a one hot encoding of integers to a binary vector with 3 values, such as [1, 0, 0].\n\n        The sequence provides at least one example of every possible value in the sequence. Therefore we can use automatic methods to define the mapping of labels to integers and integers to binary vectors.\n\nRef: https:\/\/www.analyticsvidhya.com\/blog\/2020\/08\/types-of-categorical-data-encoding\/\n   \n\n","1acb0b2b":"# Line Chart","46a9f969":"Observation:\n\n* The number of cases increases very fast across equal time periods during 2020, 2021. \n* In 2022 and 2021, the virus spreads rapidly only during certain time periods. The virus impact is not same in all months.","e12207f2":"\n\n<img src=\"https:\/\/media.giphy.com\/media\/kfR5iyQgmq7PoiFTAf\/giphy.gif\">","9d80610d":" \n<span style=\"color:blue;font-size:2em;\">*Let's create some 3D plots that allow us to view data in multi dimensional space..*; <\/span>\n\n<font size = \"4\"><br>\ud83e\ude84\ud83d\uded1 \ud83e\ude84 \ud83d\uded1 \ud83e\ude84\ud83d\uded1  *1, 2, 3, ...... Ta da Exploring Plotly * \ud83e\ude84\ud83d\uded1 \ud83e\ude84\ud83d\uded1 \ud83e\ude84\ud83d\uded1 <\/font>\n\n<img src = 'https:\/\/media.giphy.com\/media\/26FPAn6hPp6Fqx7qw\/giphy.gif'>","d4d43541":"## Tracking the progression of the new omicron COVID-19 variant\nThe data\nlocation- this is the country for which the variants information is provided;\n* date - date for the data entry;\n* variant - this is the variant corresponding to this data entry;\n* num_sequences - the number of sequences processed (for the country, variant and date);\n* perc_sequences - percentage of sequences from the total number of sequences (for the country, variant and date);\n* numsequencestotal - total number of sequences (for the country, variant and date);\n","7d84aa81":"# Feature engineering\n\nIn exploratory data analysis, we often would like to analyze data by some categories. In SQL, the GROUP BY statement groups row that has the same category values into summary rows. In Pandas, SQL\u2019s GROUP BY operation is performed using the similarly named groupby() method. Pandas\u2019 groupby() allows us to split data into separate groups to perform computations for better analysis.\n\nRead more about feature engineering here: [Grouping data using pandas](https:\/\/towardsdatascience.com\/all-pandas-groupby-you-should-know-for-grouping-data-and-performing-operations-2a8ec1327b5)","975b7d57":"You can pass multiple parameters into groupby. Just like below","f4b14cd7":"# Upvote\n\n<img src='https:\/\/media.giphy.com\/media\/wKzqKQt1Xhyv069mmY\/giphy.gif'>\n\nHey Kaggler !! If you liked my notebook. Please upvote. \n\n","ef146c8c":"# 3D Plots\n\nLocation wise cases spread","63973d4f":"# Distribution of different Variants \n","f4c65f57":"# What is the count of variants in different locations ?\n\nYou call .groupby() and pass the name of the column you want to group on, which is \"location\". Then, you use [\"variant\"] to specify the columns on which you want to perform the actual aggregation.\n\n","169fe368":"Virus spread across the years"}}