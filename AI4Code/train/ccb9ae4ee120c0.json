{"cell_type":{"a9d57e9b":"code","73a6db21":"code","a49bbfd1":"code","387957e3":"code","5fa1d465":"markdown"},"source":{"a9d57e9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics # Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import preprocessing # Import preprocessing for String-Int conversion\nfrom sklearn import tree\nimport graphviz\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","73a6db21":"#import dataset\nstars_dataset = pd.read_csv(\"\/kaggle\/input\/star-dataset\/6 class csv.csv\")\nstars_dataset.head()","a49bbfd1":"# select features\nfeatures = stars_dataset.drop('Star color', axis=1)\n# select target\ntarget = stars_dataset['Star color']\n\n# convert 'Star color' and 'Spectral Class' values from String to Int using LabelEncoder\nfeatures['Spectral Class'] = preprocessing.LabelEncoder().fit_transform(features['Spectral Class'])\n\n# split dataset into training set and test set\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=1) # 70% training and 30% test\n\n# Create Decision Tree classifer object with these parameters\nclf = DecisionTreeClassifier(criterion = 'entropy',max_depth = 3)\n# Train Decision Tree Classifer\nclf = clf.fit(x_train,y_train)\n# Predict the response for test dataset\ny_pred = clf.predict(x_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","387957e3":"# print the tree and see the result\ndot_data = tree.export_graphviz(clf, out_file=None, rounded=True, feature_names = features.columns, class_names = list(set(target)), filled = True) \ngraph = graphviz.Source(dot_data) \ngraph","5fa1d465":"# Dataset info\nThe dataset chosen for this first approach to decision trees is about stars and thier significant characteristics. In particular, for class *Star type* the classification is:\n* Brown Dwarf -> Star Type = 0\n* Red Dwarf -> Star Type = 1\n* White Dwarf-> Star Type = 2\n* Main Sequence -> Star Type = 3\n* Supergiant -> Star Type = 4\n* Hypergiant -> Star Type = 5"}}