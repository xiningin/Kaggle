{"cell_type":{"ff02f384":"code","4371eaaf":"code","314d1e08":"code","3a36eb17":"code","ad7d2430":"code","9f57c6d5":"code","137f3497":"code","06816426":"code","3a204407":"code","cba83dfb":"code","61ff7d89":"code","01930302":"code","b0a94864":"code","fb62c42a":"markdown","ea42e7ee":"markdown","5418caf4":"markdown","009a9519":"markdown","4629cd69":"markdown","2062a12b":"markdown","bcbf1e52":"markdown","652122d3":"markdown","d57dfa1d":"markdown"},"source":{"ff02f384":"import numpy as np\n\ndef kernel(X1, X2, l=1.0, sigma_f=1.0):\n    '''\n    Isotropic squared exponential kernel. Computes \n    a covariance matrix from points in X1 and X2.\n    \n    Args:\n        X1: Array of m points (m x d).\n        X2: Array of n points (n x d).\n\n    Returns:\n        Covariance matrix (m x n).\n    '''\n    sqdist = np.sum(X1**2, 1).reshape(-1, 1) + np.sum(X2**2, 1) - 2 * np.dot(X1, X2.T)\n    return sigma_f**2 * np.exp(-0.5 \/ l**2 * sqdist)","4371eaaf":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom matplotlib import cm\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndef plot_gp(mu, cov, X, X_train=None, Y_train=None, samples=[]):\n    X = X.ravel()\n    mu = mu.ravel()\n    uncertainty = 1.96 * np.sqrt(np.diag(cov))\n    \n    plt.fill_between(X, mu + uncertainty, mu - uncertainty, alpha=0.1)\n    plt.plot(X, mu, label='Mean')\n    for i, sample in enumerate(samples):\n        plt.plot(X, sample, lw=1, ls='--', label=f'Sample {i+1}')\n    if X_train is not None:\n        plt.plot(X_train, Y_train, 'rx')\n    plt.legend()\n\ndef plot_gp_2D(gx, gy, mu, X_train, Y_train, title, i):\n    ax = plt.gcf().add_subplot(1, 2, i, projection='3d')\n    ax.plot_surface(gx, gy, mu.reshape(gx.shape), cmap=cm.coolwarm, linewidth=0, alpha=0.2, antialiased=False)\n    ax.scatter(X_train[:,0], X_train[:,1], Y_train, c=Y_train, cmap=cm.coolwarm)\n    ax.set_title(title)","314d1e08":"%matplotlib inline\n\n\n# Finite number of points\nX = np.arange(-5, 5, 0.2).reshape(-1, 1)\n\n# Mean and covariance of the prior\nmu = np.zeros(X.shape)\ncov = kernel(X, X)\n\n# Draw three samples from the prior\nsamples = np.random.multivariate_normal(mu.ravel(), cov, 3)\n\n# Plot GP mean, confidence interval and samples \nplot_gp(mu, cov, X, samples=samples)","3a36eb17":"from numpy.linalg import inv\n\ndef posterior_predictive(X_s, X_train, Y_train, l=1.0, sigma_f=1.0, sigma_y=1e-8):\n    '''\n    Computes the suffifient statistics of the GP posterior predictive distribution \n    from m training data X_train and Y_train and n new inputs X_s.\n    \n    Args:\n        X_s: New input locations (n x d).\n        X_train: Training locations (m x d).\n        Y_train: Training targets (m x 1).\n        l: Kernel length parameter.\n        sigma_f: Kernel vertical variation parameter.\n        sigma_y: Noise parameter.\n    \n    Returns:\n        Posterior mean vector (n x d) and covariance matrix (n x n).\n    '''\n    K = kernel(X_train, X_train, l, sigma_f) + sigma_y**2 * np.eye(len(X_train))\n    K_s = kernel(X_train, X_s, l, sigma_f)\n    K_ss = kernel(X_s, X_s, l, sigma_f) + 1e-8 * np.eye(len(X_s))\n    K_inv = inv(K)\n    \n    # Equation (4)\n    mu_s = K_s.T.dot(K_inv).dot(Y_train)\n\n    # Equation (5)\n    cov_s = K_ss - K_s.T.dot(K_inv).dot(K_s)\n    \n    return mu_s, cov_s","ad7d2430":"# Noise free training data\nX_train = np.array([-4, -3, -2, -1, 1]).reshape(-1, 1)\nY_train = np.sin(X_train)\n\n# Compute mean and covariance of the posterior predictive distribution\nmu_s, cov_s = posterior_predictive(X, X_train, Y_train)\n\nsamples = np.random.multivariate_normal(mu_s.ravel(), cov_s, 3)\nplot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train, samples=samples)","9f57c6d5":"noise = 0.4\n\n# Noisy training data\nX_train = np.arange(-3, 4, 1).reshape(-1, 1)\nY_train = np.sin(X_train) + noise * np.random.randn(*X_train.shape)\n\n# Compute mean and covariance of the posterior predictive distribution\nmu_s, cov_s = posterior_predictive(X, X_train, Y_train, sigma_y=noise)\n\nsamples = np.random.multivariate_normal(mu_s.ravel(), cov_s, 3)\nplot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train, samples=samples)","137f3497":"import matplotlib.pyplot as plt\n\nparams = [\n    (0.3, 1.0, 0.2),\n    (3.0, 1.0, 0.2),\n    (1.0, 0.3, 0.2),\n    (1.0, 3.0, 0.2),\n    (1.0, 1.0, 0.05),\n    (1.0, 1.0, 1.5),\n]\n\nplt.figure(figsize=(12, 5))\n\nfor i, (l, sigma_f, sigma_y) in enumerate(params):\n    mu_s, cov_s = posterior_predictive(X, X_train, Y_train, l=l, \n                                       sigma_f=sigma_f, \n                                       sigma_y=sigma_y)\n    plt.subplot(3, 2, i + 1)\n    plt.subplots_adjust(top=2)\n    plt.title(f'l = {l}, sigma_f = {sigma_f}, sigma_y = {sigma_y}')\n    plot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train)","06816426":"from numpy.linalg import cholesky, det, lstsq\nfrom scipy.optimize import minimize\n\ndef nll_fn(X_train, Y_train, noise, naive=True):\n    '''\n    Returns a function that computes the negative log marginal\n    likelihood for training data X_train and Y_train and given \n    noise level.\n    \n    Args:\n        X_train: training locations (m x d).\n        Y_train: training targets (m x 1).\n        noise: known noise level of Y_train.\n        naive: if True use a naive implementation of Eq. (7), if \n               False use a numerically more stable implementation. \n        \n    Returns:\n        Minimization objective.\n    '''\n    def nll_naive(theta):\n        # Naive implementation of Eq. (7). Works well for the examples \n        # in this article but is numerically less stable compared to \n        # the implementation in nll_stable below.\n        K = kernel(X_train, X_train, l=theta[0], sigma_f=theta[1]) + \\\n            noise**2 * np.eye(len(X_train))\n        return 0.5 * np.log(det(K)) + \\\n               0.5 * Y_train.T.dot(inv(K).dot(Y_train)) + \\\n               0.5 * len(X_train) * np.log(2*np.pi)\n\n    def nll_stable(theta):\n        # Numerically more stable implementation of Eq. (7) as described\n        # in http:\/\/www.gaussianprocess.org\/gpml\/chapters\/RW2.pdf, Section\n        # 2.2, Algorithm 2.1.\n        K = kernel(X_train, X_train, l=theta[0], sigma_f=theta[1]) + \\\n            noise**2 * np.eye(len(X_train))\n        L = cholesky(K)\n        return np.sum(np.log(np.diagonal(L))) + \\\n               0.5 * Y_train.T.dot(lstsq(L.T, lstsq(L, Y_train)[0])[0]) + \\\n               0.5 * len(X_train) * np.log(2*np.pi)\n    \n    if naive:\n        return nll_naive\n    else:\n        return nll_stable\n\n# Minimize the negative log-likelihood w.r.t. parameters l and sigma_f.\n# We should actually run the minimization several times with different\n# initializations to avoid local minima but this is skipped here for\n# simplicity.\nres = minimize(nll_fn(X_train, Y_train, noise), [1, 1], \n               bounds=((1e-5, None), (1e-5, None)),\n               method='L-BFGS-B')\n\n# Store the optimization results in global variables so that we can\n# compare it later with the results from other implementations.\nl_opt, sigma_f_opt = res.x\nl_opt, sigma_f_opt\n\n# Compute the prosterior predictive statistics with optimized kernel parameters and plot the results\nmu_s, cov_s = posterior_predictive(X, X_train, Y_train, l=l_opt, sigma_f=sigma_f_opt, sigma_y=noise)\nplot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train)","3a204407":"noise_2D = 0.1\n\nrx, ry = np.arange(-5, 5, 0.3), np.arange(-5, 5, 0.3)\ngx, gy = np.meshgrid(rx, rx)\n\nX_2D = np.c_[gx.ravel(), gy.ravel()]\n\nX_2D_train = np.random.uniform(-4, 4, (100, 2))\nY_2D_train = np.sin(0.5 * np.linalg.norm(X_2D_train, axis=1)) + \\\n             noise_2D * np.random.randn(len(X_2D_train))\n\nplt.figure(figsize=(14,7))\n\nmu_s, _ = posterior_predictive(X_2D, X_2D_train, Y_2D_train, sigma_y=noise_2D)\nplot_gp_2D(gx, gy, mu_s, X_2D_train, Y_2D_train, \n           f'Before parameter optimization: l={1.00} sigma_f={1.00}', 1)\n\nres = minimize(nll_fn(X_2D_train, Y_2D_train, noise_2D), [1, 1], \n               bounds=((1e-5, None), (1e-5, None)),\n               method='L-BFGS-B')\n\nmu_s, _ = posterior_predictive(X_2D, X_2D_train, Y_2D_train, *res.x, sigma_y=noise_2D)\nplot_gp_2D(gx, gy, mu_s, X_2D_train, Y_2D_train,\n           f'After parameter optimization: l={res.x[0]:.2f} sigma_f={res.x[1]:.2f}', 2)","cba83dfb":"from sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import ConstantKernel, RBF\n\nrbf = ConstantKernel(1.0) * RBF(length_scale=1.0)\ngpr = GaussianProcessRegressor(kernel=rbf, alpha=noise**2)\n\n# Reuse training data from previous 1D example\ngpr.fit(X_train, Y_train)\n\n# Compute posterior predictive mean and covariance\nmu_s, cov_s = gpr.predict(X, return_cov=True)\n\n# Obtain optimized kernel parameters\nl = gpr.kernel_.k2.get_params()['length_scale']\nsigma_f = np.sqrt(gpr.kernel_.k1.get_params()['constant_value'])\n\n# Compare with previous results\nassert(np.isclose(l_opt, l))\nassert(np.isclose(sigma_f_opt, sigma_f))\n\n# Plot the results\nplot_gp(mu_s, cov_s, X, X_train=X_train, Y_train=Y_train)","61ff7d89":"!pip install Gpy","01930302":"import GPy\n\nrbf = GPy.kern.RBF(input_dim=1, variance=1.0, lengthscale=1.0)\ngpr = GPy.models.GPRegression(X_train, Y_train, rbf)\n\n# Fix the noise variance to known value \ngpr.Gaussian_noise.variance = noise**2\ngpr.Gaussian_noise.variance.fix()\n\n# Run optimization\ngpr.optimize();\n\n# Display optimized parameter values\ndisplay(gpr)","b0a94864":"# Obtain optimized kernel parameters\nl = gpr.rbf.lengthscale.values[0]\nsigma_f = np.sqrt(gpr.rbf.variance.values[0])\n\n# Compare with previous results\nassert(np.isclose(l_opt, l))\nassert(np.isclose(sigma_f_opt, sigma_f))\n\n# Plot the results with the built-in plot function\ngpr.plot();","fb62c42a":"The `plot_gp` function is defined [here](gaussian_processes_util.py).\n\n### Prediction from noise-free training data\n\nTo compute the sufficient statistics i.e. mean and covariance of the posterior predictive distribution we implement Equations $(4)$ and $(5)$","ea42e7ee":"## Implementation with NumPy\nHere, we will use the squared exponential kernel, also known as Gaussian kernel or RBF kernel:\n\n$$\n\\kappa(\\mathbf{x}_i,\\mathbf{x}_j) = \\sigma_f^2 \\exp(-\\frac{1}{2l^2}\n  (\\mathbf{x}_i - \\mathbf{x}_j)^T\n  (\\mathbf{x}_i - \\mathbf{x}_j))\\tag{6}\n$$\n\nThe length parameter $l$ controls the smoothness of the function and $\\sigma_f$ the vertical variation. For simplicity, we use the same length parameter $l$ for all input dimensions (isotropic kernel). ","5418caf4":"# Gaussian processes\n\n## Introduction\n\nIn supervised learning, we often use parametric models $p(\\mathbf{y} \\lvert \\mathbf{X},\\boldsymbol\\theta)$ to explain data and infer optimal values of parameter $\\boldsymbol\\theta$ via [maximum likelihood](https:\/\/en.wikipedia.org\/wiki\/Maximum_likelihood_estimation) or [maximum a posteriori](https:\/\/de.wikipedia.org\/wiki\/Maximum_a_posteriori) estimation. If needed we can also infer a full [posterior distribution](https:\/\/en.wikipedia.org\/wiki\/Posterior_probability) $p(\\boldsymbol\\theta \\lvert \\mathbf{X},\\mathbf{y})$ instead of a point estimate $\\boldsymbol{\\hat\\theta}$. With increasing data complexity, models with a higher number of parameters are usually needed to explain data reasonably well. Methods that use models with a fixed number of parameters are called parametric methods. \n\nIn non-parametric methods, on the other hand, the number of parameters depend on the dataset size. For example, in [Nadaraya-Watson kernel regression](https:\/\/en.wikipedia.org\/wiki\/Kernel_regression), a weight $w_i$ is assigned to each observed target $y_i$ and for predicting the target value at a new point $\\mathbf{x}$ a weighted average is computed: \n\n$$f(\\mathbf{x}) = \\sum_{i=1}^{N}w_i(\\mathbf{x})y_i$$\n\n$$w_i(\\mathbf{x}) = \\frac{\\kappa(\\mathbf{x}, \\mathbf{x}_{i})}{\\sum_{i'=1}^{N}\\kappa(\\mathbf{x}, \\mathbf{x}_{i'})}$$\n\nObservations that are closer to $\\mathbf{x}$ have a higher weight than observations that are further away. Weights are computed from $\\mathbf{x}$ and observed $\\mathbf{x}_i$ with a kernel $\\kappa$. A special case is k-nearest neighbors (KNN) where the $k$ closest observations have a weight $1\/k$, and all others have weight $0$. Non-parametric methods often need to process all training data for prediction and are therefore slower at inference time than parametric methods. On the other hand, training is usually faster as non-parametric models only need to remember training data. \n\nAnother example of non-parametric methods are [Gaussian processes](https:\/\/en.wikipedia.org\/wiki\/Gaussian_process) (GPs). Instead of inferring a distribution over the parameters of a parametric function Gaussian processes can be used to infer a distribution over functions directly. A Gaussian process defines a prior over functions. After having observed some function values it can be converted into a posterior over functions. Inference of continuous function values in this context is known as GP regression but GPs can also be used for classification. \n\nA Gaussian process is a [random process](https:\/\/en.wikipedia.org\/wiki\/Stochastic_process) where any point $\\mathbf{x} \\in \\mathbb{R}^d$ is assigned a random variable $f(\\mathbf{x})$ and where the joint distribution of a finite number of these variables $p(f(\\mathbf{x}_1),...,f(\\mathbf{x}_N))$ is itself Gaussian:\n\n$$p(\\mathbf{f} \\lvert \\mathbf{X}) = \\mathcal{N}(\\mathbf{f} \\lvert \\boldsymbol\\mu, \\mathbf{K})\\tag{1}\\label{eq1}$$\n\nIn Equation $(1)$, $\\mathbf{f} = (f(\\mathbf{x}_1),...,f(\\mathbf{x}_N))$, $\\boldsymbol\\mu = (m(\\mathbf{x}_1),...,m(\\mathbf{x}_N))$ and $K_{ij} = \\kappa(\\mathbf{x}_i,\\mathbf{x}_j)$. $m$ is the mean function and it is common to use $m(\\mathbf{x}) = 0$ as GPs are flexible enough to model the mean arbitrarily well. $\\kappa$ is a positive definite *kernel function* or *covariance function*. Thus, a Gaussian process is a distribution over functions whose shape (smoothness, ...) is defined by $\\mathbf{K}$. If points $\\mathbf{x}_i$ and $\\mathbf{x}_j$ are considered to be similar by the kernel the function values at these points, $f(\\mathbf{x}_i)$ and $f(\\mathbf{x}_j)$, can be expected to be similar too. \n\nA GP prior $p(\\mathbf{f} \\lvert \\mathbf{X})$ can be converted into a GP posterior $p(\\mathbf{f} \\lvert \\mathbf{X},\\mathbf{y})$ after having observed some data $\\mathbf{y}$. The posterior can then be used to make predictions $\\mathbf{f}_*$ given new input $\\mathbf{X}_*$:\n\n$$\n\\begin{align*}\np(\\mathbf{f}_* \\lvert \\mathbf{X}_*,\\mathbf{X},\\mathbf{y}) \n&= \\int{p(\\mathbf{f}_* \\lvert \\mathbf{X}_*,\\mathbf{f})p(\\mathbf{f} \\lvert \\mathbf{X},\\mathbf{y})}\\ d\\mathbf{f} \\\\ \n&= \\mathcal{N}(\\mathbf{f}_* \\lvert \\boldsymbol{\\mu}_*, \\boldsymbol{\\Sigma}_*)\\tag{2}\\label{eq2}\n\\end{align*}\n$$\n\nEquation $(2)$ is the posterior predictive distribution which is also a Gaussian with mean $\\boldsymbol{\\mu}_*$ and $\\boldsymbol{\\Sigma}_*$. By definition of the GP, the joint distribution of observed data $\\mathbf{y}$ and predictions $\\mathbf{f}_*$  is\n\n$$\n\\begin{pmatrix}\\mathbf{y} \\\\ \\mathbf{f}_*\\end{pmatrix} \\sim \\mathcal{N}\n\\left(\\boldsymbol{0},\n\\begin{pmatrix}\\mathbf{K}_y & \\mathbf{K}_* \\\\ \\mathbf{K}_*^T & \\mathbf{K}_{**}\\end{pmatrix}\n\\right)\\tag{3}\\label{eq3}\n$$\n\nWith $N$ training data and $N_*$ new input data, $\\mathbf{K}_y = \\kappa(\\mathbf{X},\\mathbf{X}) + \\sigma_y^2\\mathbf{I} = \\mathbf{K} + \\sigma_y^2\\mathbf{I}$ is $N \\times N$, $\\mathbf{K}_* = \\kappa(\\mathbf{X},\\mathbf{X}_*)$ is $N \\times N_*$ and $\\mathbf{K}_{**} = \\kappa(\\mathbf{X}_*,\\mathbf{X}_*)$ is $N_* \\times N_*$. $\\sigma_y^2$ is the noise term in the diagonal of $\\mathbf{K_y}$. It is set to zero if training targets are noise-free and to a value greater than zero if observations are noisy. The mean is set to $\\boldsymbol{0}$ for notational simplicity. The sufficient statistics of the posterior predictive distribution, $\\boldsymbol{\\mu}_*$ and $\\boldsymbol{\\Sigma}_*$, can be computed with<sup>[1][3]<\/sup>\n\n$$\n\\begin{align*}\n\\boldsymbol{\\mu_*} &= \\mathbf{K}_*^T \\mathbf{K}_y^{-1} \\mathbf{y}\\tag{4}\\label{eq4} \\\\\n\\boldsymbol{\\Sigma_*} &= \\mathbf{K}_{**} - \\mathbf{K}_*^T \\mathbf{K}_y^{-1} \\mathbf{K}_*\\tag{5}\\label{eq5}\n\\end{align*}\n$$\n\nThis is the minimum we need to know for implementing Gaussian processes and applying them to regression problems. For further details, please consult the literature in the [References](#References) section. The next section shows how to implement GPs with plain NumPy from scratch, later sections demonstrate how to use GP implementations from [scikit-learn](http:\/\/scikit-learn.org\/stable\/) and [GPy](http:\/\/sheffieldml.github.io\/GPy\/).","009a9519":"## Prior\n\nLet's first define a prior over functions with mean zero and a covariance matrix computed with kernel parameters $l=1$ and $\\sigma_f=1$. To draw random functions from that GP we draw random samples from the corresponding multivariate normal. The following example draws three random samples and plots it together with the zero mean and the 95% confidence interval (computed from the diagonal of the covariance matrix).","4629cd69":"### GPy\n\n[GPy](http:\/\/sheffieldml.github.io\/GPy\/) is a Gaussian processes framework from the Sheffield machine learning group. It provides a `GPRegression` class for implementing GP regression models. By default, `GPRegression` also estimates the noise parameter $\\sigma_y$ from data, so we have to `fix()` this parameter to be able to reproduce the above results.","2062a12b":"and apply them to noise-free training data `X_train` and `Y_train`. The following example draws three samples from the posterior predictive and plots them along with the mean, confidence interval and training data. In a noise-free model, variance at the training points is zero and all random functions drawn from the posterior go through the trainig points. ","bcbf1e52":"Optimal values for these parameters can be estimated by maximizing the log marginal likelihood which is given by<sup>[1][3]<\/sup>\n\n$$\n\\log p(\\mathbf{y} \\lvert \\mathbf{X}) = \n\\log \\mathcal{N}(\\mathbf{y} \\lvert \\boldsymbol{0},\\mathbf{K}_y) =\n-\\frac{1}{2} \\mathbf{y}^T \\mathbf{K}_y^{-1} \\mathbf{y} \n-\\frac{1}{2} \\log \\begin{vmatrix}\\mathbf{K}_y\\end{vmatrix} \n-\\frac{N}{2} \\log(2\\pi) \\tag{7}\n$$\n\nIn the following we will minimize the negative log marginal likelihood w.r.t. parameters $l$ and $\\sigma_f$, $\\sigma_y$ is set to the known noise level of the data. If the noise level is unknown, $\\sigma_y$ can be estimated as well along with the other parameters. ","652122d3":"Note how the true sine wave is approximated much better after parameter optimization.\n\n## Libraries that implement GPs\n\nThis section shows two examples of libraries that provide implementations of GPs. I'll provide only a minimal setup here, just enough for reproducing the above results. For further details please consult the documentation of these libraries.\n\n### Scikit-learn\n\nScikit-learn provides a `GaussianProcessRegressor` for implementing [GP regression models](http:\/\/scikit-learn.org\/stable\/modules\/gaussian_process.html#gaussian-process-regression-gpr). It can be configured with [pre-defined kernels and user-defined kernels](http:\/\/scikit-learn.org\/stable\/modules\/gaussian_process.html#gp-kernels). Kernels can also be composed. The squared exponential kernel is the `RBF` kernel in scikit-learn. The `RBF` kernel only has a `length_scale` parameter which corresponds to the $l$ parameter above. To have a $\\sigma_f$ parameter as well, we have to compose the `RBF` kernel with a `ConstantKernel`.","d57dfa1d":"### Effect of kernel parameters and noise parameter\n\nThe following example shows the effect of kernel parameters $l$ and $\\sigma_f$ as well as the noise parameter $\\sigma_y$. Higher $l$ values lead to smoother functions and therefore to coarser approximations of the training data. Lower $l$ values make functions more wiggly with wide confidence intervals between training data points. $\\sigma_f$ controls the vertical variation of functions drawn from the GP. This can be seen by the wide confidence intervals outside the training data region in the right figure of the second row. $\\sigma_y$ represents the amount of noise in the training data. Higher $\\sigma_y$ values make more coarse approximations which avoids overfitting to noisy data."}}