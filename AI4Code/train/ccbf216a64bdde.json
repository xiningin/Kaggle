{"cell_type":{"442116f9":"code","04a04238":"code","cc6bd14a":"code","5c35da7c":"code","4039b23f":"code","e4c7a66d":"code","a6a92dd8":"code","b040dedf":"code","e034c5c0":"code","ea6a50c0":"code","985020da":"code","7329b1ee":"code","02a501c7":"code","94e6eb85":"code","f25ee217":"code","c76c815b":"code","38293878":"code","97f10acd":"code","88080d1d":"code","5aaf88f5":"code","5e54296a":"code","e1c088c3":"code","7a09cfd4":"code","78d110ba":"code","7d3e05f7":"markdown"},"source":{"442116f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04a04238":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\nimport seaborn as sns\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\nfrom torchvision.utils import make_grid\n\nfrom PIL import Image\n\nimport os\nimport sys\nimport time\nimport math","cc6bd14a":"transform_train = transforms.Compose([\n    transforms.RandomCrop(32, padding=4),\n    transforms.RandomHorizontalFlip(),\n    transforms.RandomRotation(10),\n#     transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),\n#     transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),\n    transforms.ToTensor(),\n    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n])\n\ntransform_test = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),\n])","5c35da7c":"trainset = torchvision.datasets.CIFAR10(\n    root='.\/data', train=True, download=True, transform=transform_train)\n\ntestset = torchvision.datasets.CIFAR10(\n    root='.\/data', train=False, download=True, transform=transform_test)\n\nclasses = ('plane', 'car', 'bird', 'cat', 'deer',\n           'dog', 'frog', 'horse', 'ship', 'truck')","4039b23f":"trainloader = torch.utils.data.DataLoader(\n    trainset, batch_size=64, shuffle=True, num_workers=4)\ntestloader = torch.utils.data.DataLoader(\n    testset, batch_size=64, shuffle=False, num_workers=4)\n\n","e4c7a66d":"'''LeNet in PyTorch.'''\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass LeNet(nn.Module):\n    def __init__(self):\n        super(LeNet, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1   = nn.Linear(16*5*5, 120)\n        self.fc2   = nn.Linear(120, 84)\n        self.fc3   = nn.Linear(84, 10)\n\n    def forward(self, x):\n        out = F.relu(self.conv1(x))\n        out = F.max_pool2d(out, 2)\n        out = F.relu(self.conv2(out))\n        out = F.max_pool2d(out, 2)\n        out = out.view(out.size(0), -1)\n        out = F.relu(self.fc1(out))\n        out = F.relu(self.fc2(out))\n        out = self.fc3(out)\n        return out","a6a92dd8":"class VGG11(nn.Module):\n    def __init__(self):\n        super(VGG11, self).__init__()\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, padding=1)\n        self.bn1 = nn.BatchNorm2d(64)\n        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)\n        self.bn2 = nn.BatchNorm2d(128)\n        self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding=1)\n        self.bn3 = nn.BatchNorm2d(256)\n        self.conv4 = nn.Conv2d(256, 256, kernel_size=3, padding=1)\n        self.bn4 = nn.BatchNorm2d(256)\n        self.conv5 = nn.Conv2d(256, 512, kernel_size=3, padding=1)\n        self.bn5 = nn.BatchNorm2d(512)\n        self.conv6 = nn.Conv2d(512, 512, kernel_size=3, padding=1)\n        self.bn6 = nn.BatchNorm2d(512)\n        self.conv7 = nn.Conv2d(512, 512, kernel_size=3, padding=1)\n        self.bn7 = nn.BatchNorm2d(512)\n        self.conv8 = nn.Conv2d(512, 512, kernel_size=3, padding=1)\n        self.bn8 = nn.BatchNorm2d(512)\n        self.avgPool1 = nn.AvgPool2d(kernel_size=1, stride=1)\n        self.fc1 = nn.Linear(512, 10)\n\n    def forward(self, x):\n        out = F.relu(self.bn1(self.conv1(x)))\n        out = F.max_pool2d(out,2)\n        out = F.relu(self.bn2(self.conv2(out)))\n        out = F.max_pool2d(out,2)\n        out = F.relu(self.bn3(self.conv3(out)))\n        out = F.relu(self.bn4(self.conv4(out)))\n        out = F.max_pool2d(out,2)\n        out = F.relu(self.bn5(self.conv5(out)))\n        out = F.relu(self.bn6(self.conv6(out)))\n        out = F.max_pool2d(out,2)\n        out = F.relu(self.bn7(self.conv7(out)))\n        out = F.relu(self.bn8(self.conv8(out)))\n        out = F.max_pool2d(out,2)\n        out = self.avgPool1(out)\n        out = out.view(out.size(0), -1)\n        out = self.fc1(out)\n        return out","b040dedf":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\ndevice","e034c5c0":"best_acc = 0  # best test accuracy\nstart_epoch = 0  # start from epoch 0 or last checkpoint epoch","ea6a50c0":"# net = LeNet()\nnet = VGG11()\nnet = net.to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.1,\n                      momentum=0.9, weight_decay=5e-4)","985020da":"# get only one training image and pass it to the network\n# im = transforms.ToPILImage()(torch.squeeze(next(iter(trainloader))[0], 0))\n# im\n\nsample = next(iter(trainloader))\nsmoketest_image = sample[0]\nsmoketest_label = sample[1]\nprint(smoketest_label)\nnet.train()\nsmoketest_image = smoketest_image.to(device)\nsmoketest_label = smoketest_label.to(device)\noptimizer.zero_grad()\noutput = net(smoketest_image)\nloss = criterion(output, smoketest_label)\nloss.backward()\noptimizer.step()\n\n\nnet.eval()\nwith torch.no_grad():\n    output = net(smoketest_image)\n    loss = criterion(output, smoketest_label)\n    print(\"test loss\", loss.item())\n    _, predicted = output.max(1) # get the predicted label\n    print(\"Print predicted label\", predicted)\n    ","7329b1ee":"num_epochs = 30\ntrain_running_loss= []\ntrain_running_acc= []\ntest_running_loss=[]\ntest_running_acc=[]","02a501c7":"# Training\ndef train(epoch):\n    print('\\nEpoch: %d' % epoch)\n    net.train()\n    train_loss = 0.0\n    running_corrects = 0.0\n    total = 0\n    for batch_idx, (inputs, targets) in enumerate(trainloader):\n        inputs, targets = inputs.to(device), targets.to(device)\n        optimizer.zero_grad()\n        outputs = net(inputs)\n        loss = criterion(outputs, targets)\n        loss.backward()\n        optimizer.step()\n\n        train_loss += loss.item()\n        _, predicted = torch.max(outputs, 1)\n#         total += targets.size(0)\n#         correct += predicted.eq(targets).sum().item()\n        running_corrects += torch.sum(predicted == targets.data)\n    #plot train loss\n    train_running_loss.append(train_loss\/len(trainset))\n    train_running_acc.append(running_corrects.float()\/len(trainset))\n#     print(\"loss \", train_loss)","94e6eb85":"def test(epoch):\n    global best_acc\n    net.eval()\n    test_loss = 0.0\n    running_corrects = 0.0\n    total = 0\n    with torch.no_grad():\n        for batch_idx, (inputs, targets) in enumerate(testloader):\n            inputs, targets = inputs.to(device), targets.to(device)\n            outputs = net(inputs)\n            loss = criterion(outputs, targets)\n\n            test_loss += loss.item()\n            _, predicted = outputs.max(1)\n            total += targets.size(0)\n#             correct += predicted.eq(targets).sum().item()\n            running_corrects += torch.sum(predicted == targets.data)\n        # plot test loss\n#         test_loss_plot.append(test_loss\/len(testset))\n        test_running_loss.append(test_loss\/len(testset))\n        test_running_acc.append(running_corrects\/len(testset))\n#         print(\"test loss\", test_loss)","f25ee217":"for epoch in range(start_epoch, start_epoch+num_epochs):\n    train(epoch)\n    test(epoch)","c76c815b":"sns.set()\nfig = plt.figure(1, figsize = (25,8))\nax1 = plt.subplot(1,2,1)\nax1.plot(range(num_epochs), train_running_loss, label=\"train\")\nax1.plot(range(num_epochs), test_running_loss, label=\"test\")\nax1.set_title(\"Loss curve\")\nplt.legend()\nax2 = plt.subplot(1,2,2)\n\nax2.plot(range(num_epochs), train_running_acc, label=\"train\")\nax2.plot(range(num_epochs), test_running_acc, label=\"test\")\nax2.set_title(\"accuracy curve\")\nplt.legend()\nplt.show()\n\n# plt.plot(range(num_epochs), train_loss_plot, label=\"train\")\n# plt.plot(range(num_epochs), test_loss_plot, label=\"test\")\n","38293878":"correct_count, all_count = 0, 0\nfor images,labels in testloader:\n    for i in range(len(labels)):\n        img = images[i].view(1, 3, 32, 32).to(device)\n        with torch.no_grad():\n            logps = net(img)\n\n        ps = torch.exp(logps)\n        probab = list(ps.cpu().numpy()[0])\n        pred_label = probab.index(max(probab))\n        true_label = labels.numpy()[i]\n        if(true_label == pred_label):\n          correct_count += 1\n        all_count += 1\n\nprint(\"Number Of Images Tested =\", all_count)\nprint(\"\\nModel Accuracy =\", (correct_count\/all_count))","97f10acd":"raise ValueError (\"check the code before running the following cells\")","88080d1d":"fc1_output = []\ndef hook(module, input, output):\n    fc1_output.append(output)\nnet.fc1.register_forward_hook(hook)","5aaf88f5":"a = torch.ones(5)\nb = a.numpy()\ntype(b)","5e54296a":"features = fc1_output[0]\n# features = features.numpy()\nfeatures = features.cpu()\n\nimport numpy as np\nfrom sklearn.manifold import TSNE\ntsne = TSNE().fit_transform(features)\ntx, ty = tsne[:,0], tsne[:,1]\ntx = (tx-np.min(tx)) \/ (np.max(tx) - np.min(tx))\nty = (ty-np.min(ty)) \/ (np.max(ty) - np.min(ty))","e1c088c3":"import matplotlib.pyplot as plt\nfrom PIL import Image\nwidth = 4000\nheight = 3000\nmax_dim = 100\nfull_image = Image.new('RGB', (width, height))\nfor idx, x in enumerate(testloader):\n    tile = Image.fromarray(np.uint8(x * 255))\n    rs = max(1, tile.width \/ max_dim, tile.height \/ max_dim)\n    tile = tile.resize((int(tile.width \/ rs),\n                        int(tile.height \/ rs)),\n                       Image.ANTIALIAS)\n    full_image.paste(tile, (int((width-max_dim) * tx[idx]),\n                            int((height-max_dim) * ty[idx])))","7a09cfd4":"test = []\nt1 = [[2,5],[1,2,3,4,6]]\ntest.append(t1)\ntest","78d110ba":"test.","7d3e05f7":"# Development Area"}}