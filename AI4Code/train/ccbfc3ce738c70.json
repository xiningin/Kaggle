{"cell_type":{"c717fdc2":"code","957537a0":"code","30038573":"code","864a8846":"code","a3b77f37":"code","e08b4e67":"code","a49fc8b4":"code","44edc997":"code","1fc59a1b":"code","f19c7509":"code","2520dceb":"code","93636a1a":"code","95668f98":"code","33f4e053":"code","3ab24a21":"code","afc62651":"code","995a5aaa":"code","7059ffa1":"markdown","d589fb34":"markdown","55d16146":"markdown","8db4cd08":"markdown","98a5edf9":"markdown"},"source":{"c717fdc2":"import numpy as np \nimport pandas as pd\n# from sklearn.svm import SVR\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold","957537a0":"DATA_PATH = '\/kaggle\/input\/trends-assessment-prediction\/'","30038573":"loading = pd.read_csv(DATA_PATH + 'loading.csv')\nloading.head()","864a8846":"fnc = pd.read_csv(DATA_PATH + 'fnc.csv')\nfnc.head()","a3b77f37":"dataset = loading.merge(fnc, on='Id')\ndataset.head()","e08b4e67":"y_train = pd.read_csv(DATA_PATH + 'train_scores.csv')\nprint('Number of training samples: {}'.format(len(y_train)))\ny_train.head()","a49fc8b4":"y_train = y_train.fillna(y_train.mean()) #interpolate(method='nearest')\ny_train.head()","44edc997":"x_train = dataset.loc[dataset['Id'].isin(y_train['Id'])]\nx_train.head()","1fc59a1b":"x_test = dataset.loc[~dataset['Id'].isin(y_train['Id'])]\ntest_ids = x_test['Id'] # Needed for submission\nprint('Number of test samples: {}'.format(len(x_test)))\nx_test.head()","f19c7509":"x_train = x_train.drop('Id', axis=1).values\nx_test = x_test.drop('Id', axis=1).values\ny_train = y_train.drop('Id', axis=1).values","2520dceb":"model = MultiOutputRegressor(BayesianRidge(normalize=True), n_jobs=-1)","93636a1a":"def score(y_pred, y_true):\n     return sum(list(map(lambda w, s: w * s, [.3, .175, .175, .175, .175], np.sum(np.abs(y_true - y_pred), axis=0)\/np.sum(y_true, axis=0))))","95668f98":"n = 7\ny_test = np.zeros((len(x_test), 5, n))\nscores = np.zeros(n)\nfor i, (train_indexes, valid_indexes) in enumerate(KFold(n, shuffle=True, random_state=0).split(x_train)):\n    print('Fold {} of {} ...'.format(i + 1, n))\n    x_train_f, x_valid = x_train[train_indexes], x_train[valid_indexes]\n    y_train_f, y_valid = y_train[train_indexes], y_train[valid_indexes]\n    \n    model.fit(x_train_f, y_train_f)\n\n    y_pred = model.predict(x_valid)\n    scores[i] = score(y_pred, y_valid)\n    print('Score = {}'.format(scores[i]))\n    \n    y_test[:,:,i] = model.predict(x_test)","33f4e053":"print('Average score = {}'.format(scores.mean()))","3ab24a21":"y_test = y_test.mean(axis=2)\nprint(y_test)","afc62651":"outputs = ['age', 'domain1_var1', 'domain1_var2', 'domain2_var1', 'domain2_var2']\nids = ['{}_{}'.format(int(id_), output)  for id_ in test_ids for output in outputs]\npredicted = y_test.reshape(5 * len(y_test))\n\nassert len(predicted) == 29385\nsubmission = pd.DataFrame({'Id': ids, 'Predicted': predicted})\nsubmission.head(10)","995a5aaa":"submission.to_csv('submission.csv', index = False)\n!head submission.csv","7059ffa1":"# Prediction","d589fb34":"# Model","55d16146":"# Dataset","8db4cd08":"# Training and Evaluation","98a5edf9":"# Submission"}}