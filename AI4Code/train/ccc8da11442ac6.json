{"cell_type":{"5b68ac15":"code","90034960":"code","06872a0f":"code","ef1e5cb9":"code","5bbd8549":"code","bda3580a":"code","6834cd52":"code","d766e161":"code","b7a2473c":"code","eb7dc1d5":"code","71f24d70":"code","02ea92b2":"code","ed9c5aa2":"code","16375ce2":"code","4b8c8ebc":"code","2a0aacfa":"code","1ad58d12":"markdown","c83ce610":"markdown","edd93380":"markdown","2f180b57":"markdown","76055bf9":"markdown","0fe13cca":"markdown","0338d1bd":"markdown","96e6c026":"markdown","63fe4391":"markdown","1218a906":"markdown","60dd203c":"markdown","2d15e99d":"markdown","bdea9f2b":"markdown"},"source":{"5b68ac15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90034960":"import pandas as pd\n\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\nimport random\n\n# reformat target vector from categorical label to one-hot-encoding\nfrom tensorflow.keras import utils\n\nfrom sklearn.model_selection import train_test_split","06872a0f":"# Load the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nprint('Training set size', len(train))\nprint('Test set size', len(test))\n\ny_train = train[\"label\"].to_numpy()\n\n# Drop 'label' column\nx_train = train.drop(labels = [\"label\"],axis = 1).to_numpy()\nx_test = test.to_numpy()\nprint('Shape of the train data', x_train.shape)\nprint('Shape of the test data', x_test.shape)\n\n\n# free some space\ndel train","ef1e5cb9":"# Display how many of the training samples you have per digit\ng = sns.countplot(y_train)","5bbd8549":"# plot a sample point\nplt.imshow(x_train[random.randint(0, x_train.shape[-1]), :].reshape(28, 28), cmap='binary') # Note that you need to reshape the data before you can plot it.","bda3580a":"# plot first few numbers\nnrows, ncols = 8, 12\nfig, axs = plt.subplots(nrows, ncols, figsize=(ncols, nrows))\naxs = axs.ravel() \nfor i in range(nrows*ncols):\n    axs[i].imshow(x_train[i].reshape(28, 28), cmap='binary')\n    axs[i].set(xticks=[], yticks=[])","6834cd52":"# Check the data\n# x_train.isnull().any().describe()","d766e161":"test.isnull().any().describe()","b7a2473c":"# reformat labels to one-hot-encoded labels\nprint('Before y_train[0] = {}'.format(y_train[0]))\ny_train = utils.to_categorical(y_train, 10)\nprint('After y_train[0] = {}'.format(y_train[0]))","eb7dc1d5":"# Split the train and the validation set for the fitting\nx_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.1, random_state=2020)","71f24d70":"# scale data\nx_train, x_val = x_train \/ 255.0, x_val \/ 255.0\n\n# inspect shape and type\nx_train.shape, y_train.shape, x_val.shape, y_val.shape, x_val.dtype, y_train.dtype","02ea92b2":"from tensorflow.keras import models\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import optimizers\n\n# define model topology\nmodel = models.Sequential()\nmodel.add(layers.Dense(40, activation='relu', input_shape=(784,)))\nmodel.add(layers.Dense(20, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\n\n# define model optimization method\nmodel.compile(optimizer=optimizers.Adam(lr=0.001), \n              loss='categorical_crossentropy', \n              metrics=['categorical_accuracy'])","ed9c5aa2":"# train the model\nhistory = model.fit(x_train, y_train, epochs=20, batch_size=60, validation_data=(x_val, y_val))","16375ce2":"sns.lineplot(data=pd.DataFrame(history.history))","4b8c8ebc":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results, axis=1)\n\nresults = pd.Series(results, name=\"Label\")","2a0aacfa":"# In the submission example we start counting from 1.\nsubmission = pd.concat([pd.Series(range(1,28001), name=\"ImageId\"), results], axis=1)\n\nsubmission.to_csv(\"mlp_mnist_submission.csv\", index=False)","1ad58d12":"## Train\/Validation Split","c83ce610":"## Check number of samples","edd93380":"## Visualize a data point","2f180b57":"There are no missing values, therefore we can proceeed.","76055bf9":"# Make Predictions","0fe13cca":"# Load Libraries","0338d1bd":"In most of the task we are provided with the train and test data. Test data is used to make the submissions, therefore the labels are missing. But we need to evaluate our model on the validation set. Since we have more or less equal distribution of the classes in this dataset, we can just use random train\/validation split. Sometimes, however, some classes are overrepresented. To fix this you might add `stratify=True` option in `train_test_split()` function.","96e6c026":"Now you are ready to make a submission!","63fe4391":"# Load Data","1218a906":"## One-hot Encoding Labels","60dd203c":"## Check for null and missing values","2d15e99d":"# Define a model","bdea9f2b":"# Pre-processing\n## Normalization"}}