{"cell_type":{"6582bbcf":"code","f4dfcd67":"code","da434eca":"code","22fdc376":"code","528c50e3":"code","d42ab9fe":"code","e82c308e":"code","f47fb465":"code","49b5b475":"code","2331ac59":"code","0c414eb7":"code","1c489a24":"code","ee8ad77a":"code","fa47422b":"code","6b78ea7d":"code","c725deda":"code","b826d72b":"code","9b5dceab":"code","c677dc76":"code","435d8833":"code","182e6b70":"code","5a7c3253":"code","cbe3c5ad":"code","1d786775":"code","41934b35":"code","7aee905e":"code","3c0419c0":"code","8a237d5e":"code","dcbe1399":"code","f74d8c88":"code","ffd9a27e":"markdown","b755a814":"markdown","c6eeff8b":"markdown","182f4dbc":"markdown","8dabe058":"markdown","04c585da":"markdown","58b12f61":"markdown","acacf2eb":"markdown","04192af2":"markdown","1de7ef5f":"markdown","46f7c3f3":"markdown","ead834f1":"markdown"},"source":{"6582bbcf":"import pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","f4dfcd67":"rawData = pd.read_csv(\"..\/input\/movies\/movies.csv\")","da434eca":"rawData.head()","22fdc376":"rawData.tail()","528c50e3":"rawData.dtypes","d42ab9fe":"rawData.shape","e82c308e":"rawData.describe()","f47fb465":"MissingValues = round(rawData.isnull().sum()\/len(rawData)*100,4)\nMissingValues = MissingValues.astype(str)+\"%\"\nMissingValues","49b5b475":"rawData.dropna(inplace = True)\nrawData","2331ac59":"new = rawData[\"released\"].str.split(\"(\", n = 1, expand = True)\nrawData[\"Released_Date\"]= new[0].map(lambda x: x.rstrip(' '))\nrawData[\"Released_Country\"]= new[1].map(lambda x: x.rstrip(')'))\nrawData.drop(columns =[\"released\"], inplace = True)\nrawData","0c414eb7":"MissingValues = round(rawData.isnull().sum()\/len(rawData)*100,4)\nMissingValues = MissingValues.astype(str)+\"%\"\nMissingValues","1c489a24":"rawData.describe()","ee8ad77a":"fig = go.Figure()\nfig = make_subplots(rows=3, \n                    cols=2, \n                    subplot_titles=(\"Histogram Year\", \n                                    \"Histogram Score\", \n                                    \"Histogram Votes\",\n                                    \"Histogram Budget\",\n                                    \"Histogram Gross\",\n                                    \"Histogram Runtime\"))\n\nfig.add_trace(go.Histogram(x=rawData['year'].values), 1, 1)\nfig.add_trace(go.Histogram(x=rawData['score'].values), 1, 2)\nfig.add_trace(go.Histogram(x=rawData['votes'].values), 2, 1)\nfig.add_trace(go.Histogram(x=rawData['budget'].values), 2, 2)\nfig.add_trace(go.Histogram(x=rawData['gross'].values), 3, 1)\nfig.add_trace(go.Histogram(x=rawData['runtime'].values), 3, 2)\n\nfig.update_layout(showlegend=False, title_text=\"Movie Industry Numeric Data \")\nfig.show()","fa47422b":"fig = go.Figure()\nfig = make_subplots(rows=5, \n                    cols=2, \n                    subplot_titles=(\"Bar Rating\", \n                                    \"Bar Genre\", \n                                    \"Bar Director\",\n                                    \"Bar Writer\",\n                                    \"Bar Country\",\n                                    \"Bar Company\",\n                                    \"Bar Movie Name\",\n                                    \"Bar Release Country\",\n                                    \"Bar Release Date\",\n                                    \"Bar Star Actor\"))\n\n#Movies Rating\nratingCount = rawData[\"rating\"].value_counts().head(5)\nratingValues = ratingCount.index.unique()\nfig.add_trace(go.Bar(x=ratingValues, y = ratingCount, text=ratingCount), 1, 1)\n\n#Movies Genre\ngenreCount = rawData[\"genre\"].value_counts().head(5)\ngenreValues = genreCount.index.unique()\nfig.add_trace(go.Bar(x=genreValues, y=genreCount, text=genreCount), 1, 2)\n\n#Movies Director\ndirectorCount = rawData[\"director\"].value_counts().head()    \ndirectorValues = directorCount.index.unique()\nfig.add_trace(go.Bar(x=directorValues, y=directorCount, text=directorCount), 2, 1)\n\n#Movies Writer\nwriterCount = rawData[\"writer\"].value_counts().head()                  \nwriterValues = writerCount.index.unique()\nfig.add_trace(go.Bar(x=writerValues, y=writerCount, text=writerCount), 2,2)\n\n#Movies Country\ncountryCount = rawData[\"country\"].value_counts().head(5)                \ncountryValues = countryCount.index.unique()\nfig.add_trace(go.Bar(x=countryValues, y=countryCount, text=countryCount), 3,1)\n\n#Movies Company\ncompanyCount = rawData[\"company\"].value_counts().head(5)              \ncompanyValues = companyCount.index.unique()\nfig.add_trace(go.Bar(x=companyValues, y=companyCount, text=companyCount), 3,2)\n\n#Movies Name\nnameCount = rawData[\"name\"].value_counts().head(5)\nnameValues = nameCount.index.unique()\nfig.add_trace(go.Bar(x=nameValues, y = nameCount, text=nameCount), 4, 1)\n\n#Movies Release Country\nreleasedCountryCount = rawData[\"Released_Country\"].value_counts().head(3)\nreleasedCountryValues = releasedCountryCount.index.unique()\nfig.add_trace(go.Bar(x=releasedCountryValues, y = releasedCountryCount, text=releasedCountryCount), 4, 2)\n\n#Movies Release Date\nreleasedDateCount = rawData[\"Released_Date\"].value_counts().head(10)\nreleasedDateValues = releasedDateCount.index.unique()\nfig.add_trace(go.Bar(x=releasedDateValues, y = releasedDateCount, text=releasedDateCount), 5, 1)\n\n\n#Movies Star\nstarCount = rawData[\"star\"].value_counts().head()\nstarValues = starCount.index.unique()\nfig.add_trace(go.Bar(x=starValues, y = starCount, text=starCount), 5, 2)\n\n \nfig.update_traces(texttemplate='%{text}', \n                  textposition='auto')\nfig.update_yaxes(automargin=True)\nfig.update_layout(height=1660, \n                  width=1000,\n                  showlegend=False, \n                  uniformtext_minsize=2, \n                  uniformtext_mode='hide',\n                  title_text=\"Movie Industry Text Data \")\nfig.show()","6b78ea7d":"# Data is just what IMDB have on July 23, 2021\n# And also filtered with what this graph title says\n\nfreq = rawData\nfreq = freq.year.value_counts().reset_index().rename(columns={\"index\": \"x\"})\nfreq.sort_values(by = 'x')\nfig = go.Figure(data=go.Scatter(x=freq.x, y=freq.year, mode='markers'))\nfig.update_layout(showlegend=False, title_text=\"Feature Films, Released between 1980-2020, With US Box Office Gross at least $1\")\nfig.show()","c725deda":"from plotly.graph_objs import *\nfreq = rawData.groupby(['year','genre']).size().reset_index(name ='total')\n\ntrace1 = {\n  \"mode\": \"lines\", \n  \"type\": \"scatter\", \n  \"x\": freq.year.unique(), \n  \"y\": freq[freq['genre'] == 'Comedy']['total'],\n  \"name\": 'Comedy'\n}\ntrace2 = {\n  \"mode\": \"lines\", \n  \"type\": \"scatter\", \n  \"x\": freq.year.unique(), \n  \"y\": freq[freq['genre'] == 'Action']['total'],\n  \"name\": 'Action'\n}\ntrace3 = {\n  \"mode\": \"lines\", \n  \"type\": \"scatter\", \n  \"x\": freq.year.unique(), \n  \"y\": freq[freq['genre'] == 'Drama']['total'],\n  \"name\": 'Drama'\n}\ntrace4 = {\n  \"mode\": \"lines\", \n  \"type\": \"scatter\", \n  \"x\": freq.year.unique(), \n  \"y\": freq[freq['genre'] == 'Crime']['total'],\n  \"name\": 'Crime'\n}\ntrace5 = {\n  \"mode\": \"lines\", \n  \"type\": \"scatter\", \n  \"x\": freq.year.unique(), \n  \"y\": freq[freq['genre'] == 'Adventure']['total'],\n  \"name\": 'Adventure'\n}\n\nlayout = {\"title\": \"Tutorial: Multiple Traces Plot\"}\nfig = Figure(data=[trace1, trace2, trace3, trace4, trace5], layout=layout)\nfig.update_layout(showlegend=True, title_text=\"Movies per year for each Genre 1980 - 2020 \")\nfig.show()","b826d72b":"#MAX\nmostGrossing = rawData[['genre','name','gross']]\nmostGrossing = mostGrossing.groupby('genre').apply(lambda x: x.loc[x['gross'].idxmax(), ['name', 'gross']])\nmostGrossing","9b5dceab":"#MIN\nlessGrossing = rawData[['genre','name','gross']]\nlessGrossing = lessGrossing.groupby('genre').apply(lambda x: x.loc[x['gross'].idxmin(), ['name', 'gross']])\nlessGrossing","c677dc76":"averageProfit = rawData[['gross','budget']]\navg = averageProfit[\"gross\"] - averageProfit[\"budget\"]","435d8833":"avgWin = avg[avg>0]\nprint('Average Win  ' + \"{:,}\".format(avgWin.mean()))","182e6b70":"averageProfit = rawData[['gross','budget']]\navgLoss = avg[avg<0]\nprint('Average Loss ' + \"{:,}\".format(avgLoss.mean()))","5a7c3253":"fig = go.Figure()\nfig = make_subplots(rows=2, \n                    cols=2, \n                    subplot_titles=(\"Histogram Losses\", \n                                    \"Histogram Wins\",\n                                    \"Box Plot\",\n                                    \"Box Plot\"))\n\nfig.add_trace(go.Histogram(x=avgLoss), 1, 1)\nfig.add_trace(go.Histogram(x=avgWin), 1, 2)\nfig.add_trace(go.Box(y=avgLoss, name = 'Losses' ), 2, 1)\nfig.add_trace(go.Box(y=avgWin, name = 'Wins'), 2, 2)\n\n\nfig.update_layout(showlegend=False, title_text=\"Movie Industry Earnings\/Losses\")\nfig.show()","cbe3c5ad":"countrySCore = rawData[['country','score']]\ncountrySCore = countrySCore.groupby('country') \\\n                           .mean() \\\n                           .sort_values(by = 'score', ascending = False) \\\n                           .rename(columns={'score':'Mean_Score'}) \\\n                           .reset_index()\n\nfig = px.scatter_geo(countrySCore,\n                     locationmode = 'country names',\n                     locations=\"country\",\n                     color=\"country\",\n                     hover_name=\"country\", \n                     size = 'Mean_Score',\n                     projection=\"natural earth\")\n\nfig.show()","1d786775":"genreSCore = rawData[['genre','score']]\ngenreSCore = genreSCore.groupby('genre') \\\n                           .mean() \\\n                           .sort_values(by = 'score', ascending = False) \\\n                           .rename(columns={'score':'Mean_Score'}) \\\n                           .reset_index()\ngenreSCore","41934b35":"directorSCore = rawData[['director','score']]\ndirectorSCore = directorSCore.groupby('director') \\\n                           .mean() \\\n                           .sort_values(by = 'score', ascending = False) \\\n                           .rename(columns={'score':'Mean_Score'}) \\\n                           .reset_index().head(10)\n\ndirectorSCore","7aee905e":"starSCore = rawData[['star','score']]\nstarSCore = starSCore.groupby('star') \\\n                           .mean() \\\n                           .sort_values(by = 'score', ascending = False) \\\n                           .rename(columns={'score':'Mean_Score'}) \\\n                           .reset_index().head(10)\nstarSCore","3c0419c0":"#GROUP BY with  INTERVAL\n\nbudgetSCore = rawData[['budget','score']]\nbudgetSCore = budgetSCore.sort_values('budget')\nbins =  np.arange(0, 3000000000, 10000000)\nind = np.digitize(budgetSCore['budget'], bins)\nbudgetSCore = budgetSCore.groupby(ind).mean()\n\nfig = px.line(budgetSCore, x=\"budget\", y=\"score\", title='10,000,000 Budget Interval Average Score')\nfig.show()","8a237d5e":"# Works like a SQL 'LIKE Query'\nrawData[rawData.name.str.startswith('Avatar').fillna(False)]","dcbe1399":"# Works like a SQL == Query\nx = rawData.query(\"Released_Date == 'January 25, 2002'\")\nx","f74d8c88":"#Kmeans\n#Unsupervised","ffd9a27e":"### Understanding the Data","b755a814":"## Code Snippets to check specific rows","c6eeff8b":"### How much money on average does a movie makes above its budget?\n\n    * Average Loss\n    * Average Win","182f4dbc":"## Preguntas a Responder","8dabe058":"### What's the average score of a movie by  ____?\n\n    1) Country\n    2) Genre\n    3) Director\n    4) Star\n    5) Budget","04c585da":"## Dimensiones y Tipo De Datos","58b12f61":"### Dimensions - (rows, column)","acacf2eb":"## Valores Ausentes","04192af2":"### Data type of each column","1de7ef5f":"### What's the most grossing movie per genre?\n\n    * Most Grossing Movie of all genre\n    * Less Grossing Movie of all genre\n    ","46f7c3f3":"# Movie Industry Data Analysis","ead834f1":"## Load data"}}