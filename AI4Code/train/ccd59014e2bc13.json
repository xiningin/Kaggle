{"cell_type":{"83d5164e":"code","49f03b38":"code","1eac403e":"code","abd8b740":"code","f5d2e00e":"code","316eecaf":"code","b53092d0":"code","4e0c90be":"code","2b88ea60":"code","babb09da":"code","cef929a0":"code","a38def21":"code","04033fff":"code","34d36aec":"markdown"},"source":{"83d5164e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49f03b38":"!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle competitions download -c aiseaweather\n!unzip aiseaweather.zip","1eac403e":"import numpy as np\nimport torch\nimport torch.optim as optim\nimport pandas as pd\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import MinMaxScaler  # \ub370\uc774\ud130 \uc815\uaddc\ud654\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\nfrom torch.utils.data import  TensorDataset, DataLoader\nimport matplotlib.pyplot as plt","abd8b740":"device = torch.device('cuda') # \ub514\ubc14\uc774\uc2a4 GPU \uc124\uc815\ntorch.manual_seed(777)\nrandom.seed(777)\ntorch.cuda.manual_seed_all(777)\n\nlearning_rate = 0.0001\ntraining_epochs = 5000\nbatch_size = 83\ndrop_prob = 0.3","f5d2e00e":"xy_train = pd.read_csv('train_wave.csv', header = None, skiprows=1, usecols=range(2, 13))\nx_data = xy_train.loc[:1705, 1:11]\ny_data = xy_train.loc[:1705, [12]]\nx_data = np.array(x_data)\ny_data = np.array(y_data)\n\nscaler = MinMaxScaler()\nx_data = scaler.fit_transform(x_data)\n\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device) ","316eecaf":"train_dataset = TensorDataset(x_train, y_train)\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                           batch_size = batch_size, \n                                           shuffle = True, \n                                           drop_last = True)","b53092d0":"linear1 = torch.nn.Linear(10, 10,bias=True)\nlinear2 = torch.nn.Linear(10, 10,bias=True)\nlinear3 = torch.nn.Linear(10, 1,bias=True)\nrelu = torch.nn.ReLU()\n\ntorch.nn.init.xavier_normal_(linear1.weight)\ntorch.nn.init.xavier_normal_(linear2.weight)\ntorch.nn.init.xavier_normal_(linear3.weight)\n\nmodel = torch.nn.Sequential(linear1,relu,\n                            linear2,relu,\n                            linear3).to(device)","4e0c90be":"optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n\nlosses = []\nmodel_history = []\nerr_history = []\n\ntotal_batch = len(data_loader)\nmodel.train()\n\nfor epoch in range(training_epochs + 1):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = torch.mean((hypothesis - Y) ** 2)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n\n  model_history.append(model)\n  err_history.append(avg_cost)\n  \n  if epoch % 10 == 0:  \n    print('Epoch:', '%d' % (epoch + 1), 'Cost =', '{:.9f}'.format(avg_cost))\n  losses.append(cost.item())\nprint('Learning finished')","2b88ea60":"plt.plot(losses)\nplt.plot(err_history)\nplt.show()","babb09da":"best_model = model_history[np.argmin(err_history)]","cef929a0":"xy_test = pd.read_csv('test_wave.csv', header = None, skiprows=1, usecols = range(2, 12))\nx_data = xy_test.loc[:, 1:11]\nx_data = np.array(x_data)\nx_data = scaler.transform(x_data)\nx_test = torch.FloatTensor(x_data).to(device)\n\nwith torch.no_grad():\n    model.eval()  # \uc8fc\uc758\uc0ac\ud56d (dropout=False)\n    \n    predict = best_model(x_test)","a38def21":"submit = pd.read_csv('submit_sample.csv')\nsubmit['Expected'] = submit['Expected'].astype(float)\nfor i in range(len(predict)):\n  submit['Expected'][i] = predict[i]\nsubmit.to_csv('submit.csv', mode = 'w', index = False, header = True)","04033fff":"!kaggle competitions submit -c aiseaweather -f submit.csv -m \"18011876 \uc774\ubcd1\ucc2c\"","34d36aec":"# \ubc29\uc5b4 \uc131\uacf5 \ucf54\ub4dc\n\uacf5\uaca9 \ucf54\ub4dc\uc640 \ub2ec\ub77c\uc9c4 \uc810\n1. \ubc30\uce58 \uc0ac\uc774\uc988 \ubcc0\uacbd\n2. \ub808\uc774\uc5b4 \uac1c\uc218 \ubcc0\uacbd"}}