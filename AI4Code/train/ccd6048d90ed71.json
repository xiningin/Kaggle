{"cell_type":{"a78e732c":"code","39005358":"code","d6921dbb":"code","67d2e030":"code","41f29162":"code","5f3fc63a":"code","21515154":"code","31b51be5":"code","deb1ded3":"code","3783f96d":"code","f249197d":"code","ed40d195":"code","a40e8e21":"code","703b9490":"code","aadf04cf":"code","d449db6a":"code","2f89462c":"code","0d7acdab":"code","fd2108d9":"code","bb1b0504":"code","31633549":"code","bb84b61a":"code","9d1bee8e":"code","5e87f2eb":"markdown","cd284198":"markdown","6e59d87a":"markdown","f9ed606f":"markdown","915b3d00":"markdown","dd1e6374":"markdown","00fd512d":"markdown","ca3234bb":"markdown","199b1656":"markdown","614811c4":"markdown","ab0ffb5a":"markdown","443e5d41":"markdown","d7f95051":"markdown","63ca38c5":"markdown","c5e3a95e":"markdown","3eb95fd1":"markdown","623e4e99":"markdown","2eb12b7f":"markdown","5361ceb4":"markdown","0b06a753":"markdown","05195b63":"markdown","51b55bce":"markdown"},"source":{"a78e732c":"%%html\n<style> table { display: inline-block } <\/style>","39005358":"import numpy as np\nfrom numba import njit\nimport timeit\nfrom collections import namedtuple\nfrom typing import Tuple, List, Union","d6921dbb":"observation   = {'mark': 1, 'board': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}\nconfiguration = {'columns': 7, 'rows': 6, 'inarow': 4, 'steps': 1000, 'timeout': 8}","67d2e030":"Observation   = namedtuple('observation',   ['mark', 'board'])\nobservation   = Observation(**observation)\n\nConfiguration = namedtuple('configuration', ['rows', 'columns', 'inarow', 'steps', 'timeout'])\nconfiguration = Configuration(**configuration)","41f29162":"# Source: https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/envs\/connectx\/connectx.py\n\nEMPTY = 0\n\n# NOTE: kaggle_environments implements this as inline code rather than a standalone function\ndef is_draw_kaggle(board):\n    # Check for a tie.\n    return all(mark != EMPTY for mark in board)","5f3fc63a":"# Source: https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/envs\/connectx\/connectx.py\n\ndef is_win_kaggle(board, column, mark, config, has_played=True):\n    columns = config.columns\n    rows    = config.rows\n    inarow  = config.inarow - 1\n    row = (\n             min([ r for r in range(rows) if board[column + (r * columns)] == mark  ])\n        if has_played\n        else max([ r for r in range(rows) if board[column + (r * columns)] == EMPTY ])\n    )\n\n    def count(offset_row, offset_column):\n        for i in range(1, inarow + 1):\n            r = row    + offset_row    * i\n            c = column + offset_column * i\n            if (\n                   r <  0\n                or r >= rows\n                or c <  0\n                or c >= columns\n                or board[c + (r * columns)] != mark\n            ):\n                return i - 1\n        return inarow\n\n    return (\n            count( 1,  0)                 >= inarow  # vertical.\n        or (count( 0,  1) + count(0, -1)) >= inarow  # horizontal.\n        or (count(-1, -1) + count(1,  1)) >= inarow  # top left diagonal.\n        or (count(-1,  1) + count(1, -1)) >= inarow  # top right diagonal.\n    )","21515154":"# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/core\/ConnectXBBNN.py\n\n#@njit\ndef empty_bitboard() -> np.ndarray:\n    bitboard = np.array([0, 0], dtype=np.int64)\n    return bitboard","31b51be5":"mask_board       = (1 << configuration.columns * configuration.rows) - 1\nmask_legal_moves = (1 << configuration.columns) - 1\n\nprint(f'1                =  {1:042b}')\nprint(f'1 << 42          = {1 << 42 :042b}')\nprint(f'mask_board       =  {mask_board:042b}')\nprint(f'mask_legal_moves =  {mask_legal_moves:042b}')","deb1ded3":"#@njit\ndef list_to_bitboard(listboard: Union[np.ndarray,List[int]]) -> np.ndarray:\n    # bitboard[0] = played, is a square filled             | 0 = empty, 1 = filled\n    # bitboard[1] = player, who's token is this, if filled | 0 = empty, 1 = filled\n    bitboard_played = 0  # 42 bit number for if board square has been played\n    bitboard_player = 0  # 42 bit number for player 0=p1 1=p2\n    if isinstance(listboard, np.ndarray): listboard = listboard.flatten()\n    for n in range(len(listboard)):  # prange\n        if listboard[n] != 0:\n            bitboard_played |= (1 << n)        # is a square filled (0 = empty | 1 = filled)\n            if listboard[n] == 2:\n                bitboard_player |= (1 << n)    # mark as player 2 square, else assume p1=0 as default\n    bitboard = np.array([bitboard_played, bitboard_player], dtype=np.int64)\n    return bitboard","3783f96d":"listboard = [\n    0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,\n    0,0,2,0,0,0,0,\n    0,0,1,1,0,0,0,\n]\nbitboard  = list_to_bitboard(listboard)\np1_tokens = bitboard[0] & ~bitboard[1]\np2_tokens = bitboard[0] &  bitboard[1]\n\nprint( f'bitboard    = {bitboard}' )\nprint( f'bitboard[0] = {bitboard[0]:042b}' )\nprint( f'bitboard[1] = {bitboard[1]:042b}' )\nprint( f'p1_tokens   = {p1_tokens:042b}' )\nprint( f'p2_tokens   = {p2_tokens:042b}' )","f249197d":"# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/core\/ConnectXBBNN.py\n\n#@njit(int8[:,:](int64[:]))\ndef bitboard_to_numpy2d(bitboard: np.ndarray) -> np.ndarray:\n    global configuration\n    rows    = configuration.rows\n    columns = configuration.columns\n    size    = rows * columns\n    output  = np.zeros((size,), dtype=np.int8)\n    for i in range(size):  # prange\n        is_played = (bitboard[0] >> i) & 1\n        if is_played:\n            player = (bitboard[1] >> i) & 1\n            output[i] = 1 if player == 0 else 2\n    return output.reshape((rows, columns))","ed40d195":"bitboard_to_numpy2d(bitboard)","a40e8e21":"# Source: https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/core\/ConnectXBBNN.py\n#@njit\ndef has_no_more_moves(bitboard: np.ndarray) -> bool:\n    \"\"\"If all the squares on the top row have been played, then there are no more moves\"\"\"\n    return bitboard[0] & mask_legal_moves == mask_legal_moves \n\ndef has_no_empty_spaces(bitboard: np.ndarray) -> bool:\n    \"\"\"If all the squares on the top row have been played, then there are no more moves\"\"\"\n    return bitboard[0] == mask_board ","703b9490":"print(f'has_no_more_moves(bitboard) = {has_no_more_moves(bitboard)}')\nprint(f'mask_legal_moves = {mask_legal_moves:042b}')\nprint(f'bitboard[0]      = {bitboard[0]:042b}')","aadf04cf":"njit_has_no_more_moves   = njit(has_no_more_moves)\nnjit_has_no_empty_spaces = njit(has_no_empty_spaces)\n\ntuple_bitboard = tuple(bitboard)\nprint( f'has_no_more_moves(bitboard):         {timeit.timeit(lambda: has_no_more_moves(bitboard),         number=1000000):.4f} \u00b5s' )\nprint( f'has_no_more_moves(tuple_bitboard):   {timeit.timeit(lambda: has_no_more_moves(tuple_bitboard),   number=1000000):.4f} \u00b5s' )\nprint( f'is_draw_kaggle(listboard):           {timeit.timeit(lambda: is_draw_kaggle(listboard),           number=1000000):.4f} \u00b5s' )\nprint( f'has_no_empty_spaces(bitboard):       {timeit.timeit(lambda: has_no_empty_spaces(bitboard),       number=1000000):.4f} \u00b5s' )\nprint( f'has_no_empty_spaces(tuple_bitboard): {timeit.timeit(lambda: has_no_empty_spaces(tuple_bitboard), number=1000000):.4f} \u00b5s' )\nprint( f'-----')\nprint( f'njit_has_no_more_moves(tuple_bitboard):    {timeit.timeit(lambda: njit_has_no_more_moves(tuple_bitboard),   number=1)*1000000:.0f} \u00b5s -> {timeit.timeit(lambda: njit_has_no_more_moves(tuple_bitboard),   number=1000000):.4f} \u00b5s' )\nprint( f'njit_has_no_empty_spaces(tuple_bitboard):  {timeit.timeit(lambda: njit_has_no_empty_spaces(tuple_bitboard), number=1)*1000000:.0f} \u00b5s -> {timeit.timeit(lambda: njit_has_no_empty_spaces(tuple_bitboard), number=1000000):.4f} \u00b5s' )\nprint( f'njit_has_no_more_moves(bitboard):          {timeit.timeit(lambda: njit_has_no_more_moves(bitboard),         number=1)*1000000:.0f} \u00b5s -> {timeit.timeit(lambda: njit_has_no_more_moves(bitboard),   number=1000000):.4f} \u00b5s' )\nprint( f'njit_has_no_empty_spaces(bitboard):        {timeit.timeit(lambda: njit_has_no_empty_spaces(bitboard),       number=1)*1000000:.0f} \u00b5s -> {timeit.timeit(lambda: njit_has_no_empty_spaces(bitboard), number=1000000):.4f} \u00b5s' )\n","d449db6a":"#@njit(int64[:]())\ndef get_gameovers() -> np.ndarray:\n    \"\"\"Creates a list of all winning board positions, over 4 directions: horizontal, vertical and 2 diagonals\"\"\"\n    global configuration\n\n    rows    = configuration.rows\n    columns = configuration.columns\n    inarow  = configuration.inarow\n\n    gameovers = []\n\n    mask_horizontal  = 0\n    mask_vertical    = 0\n    mask_diagonal_dl = 0\n    mask_diagonal_ul = 0\n    for n in range(inarow):  # use prange() with numba(parallel=True)\n        mask_horizontal  |= 1 << n\n        mask_vertical    |= 1 << n * columns\n        mask_diagonal_dl |= 1 << n * columns + n\n        mask_diagonal_ul |= 1 << n * columns + (inarow - 1 - n)\n\n    print(f'mask_horizontal  = {mask_horizontal:042b}')\n    print(f'mask_vertical    = {mask_vertical:042b}')\n    print(f'mask_diagonal_dl = {mask_diagonal_dl:042b}')\n    print(f'mask_diagonal_ul = {mask_diagonal_ul:042b}')\n\n    row_inner = rows    - inarow\n    col_inner = columns - inarow\n    for row in range(rows):         # use prange() with numba(parallel=True)\n        for col in range(columns):  # use prange() with numba(parallel=True)\n            offset = col + row * columns\n            if col <= col_inner:\n                gameovers.append( mask_horizontal << offset )\n            if row <= row_inner:\n                gameovers.append( mask_vertical << offset )\n            if col <= col_inner and row <= row_inner:\n                gameovers.append( mask_diagonal_dl << offset )\n                gameovers.append( mask_diagonal_ul << offset )\n\n    print(f'gameovers = [ \\n' + '\\n'.join([ f'{gameover:042b}' for gameover in gameovers ]) + '\\n]')             \n    return gameovers\n\n\ngameovers = get_gameovers()","2f89462c":"#@njit\ndef get_winner(bitboard: np.ndarray) -> int:\n    \"\"\" Endgame get_winner: 0 for no get_winner, 1 = player 1, 2 = player 2\"\"\"\n    p2_wins = (bitboard[0] &  bitboard[1]) & gameovers[:] == gameovers[:]\n    if np.any(p2_wins): return 2\n    p1_wins = (bitboard[0] & ~bitboard[1]) & gameovers[:] == gameovers[:]\n    if np.any(p1_wins): return 1\n    return 0\n\n    # NOTE: above implementation is 2x faster than this original attempt\n    # gameovers_played = gameovers[ gameovers & bitboard[0] == gameovers ]  # exclude any unplayed squares\n    # if np.any(gameovers_played):                                          # have 4 tokens been played in a row yet\n    #     p1_wins = gameovers_played & ~bitboard[1] == gameovers_played\n    #     if np.any(p1_wins): return 1\n    #     p2_wins = gameovers_played &  bitboard[1] == gameovers_played\n    #     if np.any(p2_wins): return 2\n    # return 0","0d7acdab":"njit_get_winner = njit(has_no_more_moves)\n\ndef get_win_kaggle(listboard):\n    if   any(is_win_kaggle(listboard, column=column, mark=1, config=configuration, has_played=False) for column in range(configuration.columns)): return 1\n    elif any(is_win_kaggle(listboard, column=column, mark=2, config=configuration, has_played=False) for column in range(configuration.columns)): return 2\n    else: return 0\n    \n    \nprint( f'get_win_kaggle(listboard)):             {timeit.timeit(lambda: get_win_kaggle(listboard),   number=10000)*100:.4f} \u00b5s' )\nprint( f'is_win_kaggle(listboard, column, mark): {timeit.timeit(lambda: is_win_kaggle(listboard, column=2, mark=2, config=configuration), number=1000000):.4f} \u00b5s' )\nprint( f'get_winner(bitboard):                   {timeit.timeit(lambda: has_no_more_moves(bitboard), number=1000000):.4f} \u00b5s' )\nprint( f'njit_get_winner(bitboard):              {timeit.timeit(lambda: njit_get_winner(bitboard),   number=1)*1000000:.0f} \u00b5s -> {timeit.timeit(lambda: njit_get_winner(bitboard),   number=1000000):.4f} \u00b5s' )\nprint( bitboard_to_numpy2d(bitboard))","fd2108d9":"#@njit\ndef is_gameover(bitboard: np.ndarray) -> bool:\n    if has_no_more_moves(bitboard):  return True\n    if get_winner(bitboard) != 0:    return True\n    return False","bb1b0504":"#@njit(int64[:](int8))\ndef get_bitcount_mask(size: int = configuration.columns * configuration.rows) -> np.ndarray:\n    # return np.array([1 << index for index in range(0, size)], dtype=np.int64)\n    return 1 << np.arange(0, size, dtype=np.int64)\n\nbitcount_mask = get_bitcount_mask()\n\n\n#@njit(int8(int64[:]))\ndef get_move_number(bitboard: np.ndarray) -> int:\n    global configuration\n    if bitboard[0] == 0: return 0\n    size          = configuration.columns * configuration.rows\n    mask_bitcount = get_bitcount_mask(size)\n    move_number   = np.count_nonzero(bitboard[0] & mask_bitcount[:])\n    return move_number\n\nprint('bitboard = ')\nprint(bitboard_to_numpy2d(bitboard))\nprint(f'get_move_number(bitboard) = {get_move_number(bitboard)}' )\nprint(f'bitcount_mask = [\\n' + '\\n'.join(f'{bitmask:042b}' for bitmask in bitcount_mask) + '\\n]' )","31633549":"# Source: https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/envs\/connectx\/connectx.py\ndef play(board, column, mark, config):\n    columns = config.columns\n    rows = config.rows\n    row = max([r for r in range(rows) if board[column + (r * columns)] == EMPTY])\n    board[column + (row * columns)] = mark","bb84b61a":"_is_legal_move_mask  = ((1 << configuration.columns) - 1)\n_is_legal_move_cache = np.array([\n    [\n        int( (bits >> action) & 1 == 0 )\n        for action in range(configuration.columns)\n    ]\n    for bits in range(2**configuration.columns)\n], dtype=np.int8)\n\n#@njit\ndef is_legal_move(bitboard: np.ndarray, action: int) -> int:\n    bits = bitboard[0] & _is_legal_move_mask   # faster than: int( (bitboard[0] >> action) & 1 == 0 )\n    return _is_legal_move_cache[bits, action]  # NOTE: [bits,action] is faster than [bits][action]\n\n#@njit\ndef get_next_index(bitboard: np.ndarray, action: int) -> int:\n    assert is_legal_move(bitboard, action)\n\n    # Start at the ground, and return first row that contains a 0\n    for row in range(configuration.rows-1, -1, -1):\n        index = action + (row * configuration.columns)\n        value = (bitboard[0] >> index) & 1\n        if value == 0:\n            return index\n    return action  # this should never happen - implies not is_legal_move(action)\n\n#@njit\ndef result_action(bitboard: np.ndarray, action: int, player_id: int) -> np.ndarray:\n    assert is_legal_move(bitboard, action)\n    index    = get_next_index(bitboard, action)\n    mark     = 0 if player_id == 1 else 1\n    output = np.array([\n        bitboard[0] | 1    << index,\n        bitboard[1] | mark << index\n    ], dtype=bitboard.dtype)\n    return output\n","9d1bee8e":"print(f'bitboard = \\n', bitboard_to_numpy2d(bitboard))\nprint(f'is_legal_move(bitboard, 1) = {is_legal_move(bitboard, 1)}')\nprint(f'result_action(bitboard, 1, 1) = \\n{bitboard_to_numpy2d(result_action(bitboard, action=1, player_id=2))}')\nprint(f'_is_legal_move_mask = {_is_legal_move_mask:042b}')\nprint(f'_is_legal_move_cache.shape = {_is_legal_move_cache.shape}')\nprint(f'_is_legal_move_cache = \\n {_is_legal_move_cache}')","5e87f2eb":"# is_gameover()\n\nThis is a simple wrapper function, that combines the two edgecases for game termination.\n\nIt is important to note for the pytorch model later on that these two edgecases have different probability distributions. \n\nBased on a sample of 70,000 games played by random agent on both sides:\n\n- Average moves per game: 21.3\n- Average number of draws: 1 in 293 games","cd284198":"# CPU Performance\n\nWhen we looked at the performance of `has_no_more_moves()`, the static overhead of additional function calls outweighed the performance advantages of bitshifting.\n\nNotice here that the situation is reversed for this more expensive function.\n- `get_winner(bitboard)` has an almost identical runtime to `has_no_more_moves(bitboard)` showing that most of the cost is in function overhead\n- `get_winner(bitboard)` is 8x faster than `is_win(listboard, column, mark)` despite only needing to check a single column\n- `get_win_kaggle(listboard)` implements the same specs as `get_winner(bitboard)` but force it to check all columns - runtime is 100x slower than the bitboard version\n- `njit_get_winner(bitboard)` shows a 2x speedup over `get_winner(bitboard)` but @njit compile time costs the same as 30,000 executions","6e59d87a":"# Kaggle Datastructures\n\nThese are the datastructures passed into the `agent(observation: Struct, configuration: Struct)` function required for game submission.","f9ed606f":"# Bitshifting with Bitboards\n\nOne of the key challenges of implementing a competative ConnectX bot is writing performance optimized code. If you have written a Minimax, MCTS agent, then the depth of your search depends on how fast you can iterate over gamestates. \n\nBitboards are based on the idea that a integer is a really just a 64bit sequence of 1s and 0s, and that rather than treating it as a number, we can effectively treat it as an array of 64 boolean flags. The advantage is that this allows us to operate on this datastructure using bitshifting operations which implemented in the CPU as one-cycle instructions (which is as fast as adding two numbers together). \n\nThe catch is that we need to learn the language of bitshifting and think differently about the types of operations we can efficently do on this datatype.\n\nNOTE: bitshifting in python still comes with the overhead of the python runtime, so is still much slower than a compiled C implemention, however it much faster than asking python to loop over an array of 42 integers. Python speed can be increased using vectorized numpy bitshifting, and even possibly futher still using numba `@njit`, however I have technical issues with getting numba to reliably run inside the kaggle submissions environment.","915b3d00":"# Implementing Bitshiftng Functions in Pytorch\n\nAccording the the Universal Approximation Theorem a sufficently large neural network, with a sufficently large sample of input\/outputs should be capable of approximating any mathematical function.\n\nMany of the usecases presented as Kaggle Competitions involve using neural networks to model functions that would be impossible to code classically by hand.\n\nMy new notebook will cover the opposite usecase, that of trying to create a neural network implemention of the above bitshifting function `is_gameover()` that we already have the sourcecode to. The aim is to use reinforcement learning to (hopefully) achieve 100% accuracy, then to compare the performance of these two implementions.\n\n- https:\/\/www.kaggle.com\/jamesmcguigan\/connectx-implementing-functions-in-pytorch","dd1e6374":"# Further Bitshifting Code Examples\n\nI have a full bitshifting implemention of Connect4 on my github, including how examples of how to design heuristics with bitshifting:\n- https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/core\/ConnectXBBNN.py\n- https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/core\/ConnectXBBN_test.py\n- https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/heuristics\/BitsquaresHeuristic.py\n- https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/heuristics\/BitboardGameoversHeuristic.py\n- https:\/\/github.com\/JamesMcGuigan\/ai-games\/blob\/master\/games\/connectx\/heuristics\/OddEvenHeuristic.py","00fd512d":"# has_no_more_moves()\n\nHere we use a similar logic to the kaggle implemention `is_draw(board)`, but with the simplifying assumption that we only need to check the values in the top row.\n\nHere we use a combination of AND `&` and EQUALS `==`. The condition will only return True if ALL the bits in `mask_legal_moves` are also set in `bitboard[0]`.","ca3234bb":"# bitboard_to_numpy2d()\n\nWe can also do the reverse cast, which turns a bitboard array back into a 2d numpy array. This is useful for visualization and debugging.\n\nThe process works in reverse to `list_to_bitboard()`. We iterate over the size of the bitboard and use right shift `>>` to move the indexed bit into the 1 position, then use logical AND `&` with 1 to check if that specific bit is set. \n\n`(bitboard[0] >> i) & 1` will evaluate to `1 == True` if the bit at index `i` is set, else it will evaluate to `0 == False`.\n\nAn alterative method would be to use left shift. This would still evaluate `True` and `False` correctly, but the return value for `True` would be a large positive number instead of the much simpler 1. \n```\nbitboard[0] & (1 << i) \n```","199b1656":"Kaggle uses a `Struct` datatype internally, not a dict as shown. However numba doesn't like the `Struct` datatype, but we can cast to `namedtuple()` instead which preserves the same .dot notation as is compatable with numba.","614811c4":"# CPU Performance\n\nIn theory, from a CPU performance perspective, we have reduced the time complexity of this function from a loop with 42 integer comparisons (and 42 indices to be set) down to 2 one-cycle bit operations. ****\n\nAlso notice, that in the bitboard implemention we could equally check for all the bits using `mask_board` or only the top row using `mask_legal_moves` \n\nUnfortunatly, the bitboard implemention of this simple 1 microsecond function actually turns out to be 1.5x slower than the list comprehention example. \n> 1 second = 1,000 milliseconds = 1,000,000 microseconds \n\nThere are several possible explinations for this, \n- Bitshifting in python is much slower than in C\n- Python list comprehensions are optimized inside the python kernel  \n- There is static function overhead and argument checking involved numpy array lookup\n- Numpy has additional overhead in casting back from C `np.int64` to Python `int()`\n\nWe can gain some minor performance improvements:\n\n- Using Tuple[int,int] rather than np.ndarray to store out bitboard results in 0.3\u00b5s performance increase\n- `has_no_empty_spaces()` avoids the bitwise AND operation, which saves us another 0.6\u00b5s (Python bitshifting is much slower than C)\n\n\n# Numba\n\nNumba can also be used to improve performance:\n- Numba @njit compiles the function to C (technically the LLVM)\n- We get a 2x performance increase for this tiny function\n- The is a one-time performance hit of @njit compiling the function\n  - The compile time is in the order of 50 milliseconds for this small function\n  - This is equlivant to 40,000 function calls on first execution\n  - Kaggle does permit an additional 8 seconds on runtime on your first move to account for data loading and compile times\n- There is a static overhead of casting datatypes between C and Python\n    - Numpy arrays are already casted into C, so there is little overhead in passing a numpy array to a numba function  \n    - Numba works better for larger functions with nested loops\n    - The overhead of passing Tuple[int,int] into these numba functions almost completely offsets the performance advantage of Numba   \n- Bitshifting in C is much faster, thus the additional cost of logical AND has been reduced from 0.6\u00b5s to 0.005\u00b5s (120x performance increase)\n- I am still trying to figure out the technical constraints of using numba practically within the kaggle submission environment","ab0ffb5a":"# mask_board + mask_legal_moves\n\nThe first bitshifting operation to learn is the left shift `<<` operator.\n\nThe binary number 1 is represented as series of 0s and a single bit in the right-most bit. \n\n> This is called little-endian format, which is used in x86 processors, however some historical computers chose big-endian format which reverses the order the bits.\n\nTo set an bit by index, we can start with a binary `1` and left shift it into position `1 << index`.\n\nIf we wish to create a bitmask with X number of 1s, then we can we can left shift one bit too far and then subtract 1: `(1 << X+1) - 1`","443e5d41":"# empty_bitboard()\n\nThe integer list version of the board contains 42 integers, however, there are 3 possible values for each integer `{0,1,2}`. 3 in binary is `11` so we actually need 2 bits to represent each square. Thus we need 42 bits to represent which squares have been played (by either player) and another 42 bits to represent which player owns each square (assuming it has been played).\n\nThere are several possible ways of representing this as a bitboard:\n\nNative python supports arbitray sized integers, so we could use a single 84 bit integer, and use shifting and masking to extract out the required bits as and when we need them.\n\nHowever numpy and numba only support upto 64 bit integers (which get compiled down to C types), thus we would need an array of two 64 bit integers to store the full state information for the game. The first number represents the played tokens (0 = unplayed | 1 = played) and the second represents the player number (0 = p1 | 1 = p2)\n\nAt the start of the game, no tokens have been played so the value of the first bitboard is 0. For simplicity the value of the second bitboard also defaults to 0.","d7f95051":"# get_gameovers()\n\nThis is a more complicated function which will hopefully show the power of bitboards.\n\nIn the kaggle `is_win()` function, a nested loop is used to iterate, coordinate by coordinate, in all directions from each token in the last played column.\n\nIn the bitshifting version, we precompute `gameovers = get_gameovers()` to avoid repeating this calculation for every bitboard. It returns an np.array() of all possible bitmask locations that could result in a gameover Connect4 line.\n\nFirst we generate 4x4 bitmasks for each direction (horizontal + vertical + 2x diagonal), this is done by leftshifting `<< ` each bit into position and using bitwise OR `|` sum the results. Note that it is also possible to use `np.sum()` to quickly bitwise OR an array of bitmasks, but only if you can gaurentee there will be no overlapping bits.\n\nThen for each of these directional bitmaks, we iterate over the coordinates of the board (avoiding corners and edges) then leftshift `<<` the mask by the offset required to move the direction bitmask into position: \n```\nmask_diagonal_ul |= 1 << n * columns + (inarow - 1 - n) for n in range(inarow)\noffset = col + row * columns\nmask_diagonal_ul << offset\n```","63ca38c5":"# list_to_bitboard()\n\nThe first practical task is write a casting function to convert the kaggle listboard format into a bitboard array.\n\nTraditionally we are used to reading lists in left-to-right (big-endian) format, with the `list[0]` being the leftmost item, however the bitboard is little-endian and `list[0]` will be represented by the rightmost bit. \n\n`list_to_bitboard()` starts with 0 initalized bitboards, then loop over the flattened listbord array. If the list value is 0, then the bits have already been set and we don't need to do anything. If the list value indicates player 1, then we only need to set the corresponding bit in `bitboard_played` as `0 = p1` is the default in `bitboard_player`. If the list value indicates player 2, then we will need to set the same bit in both bitboards.\n\nTo create a bitmask for a single bit, we use leftshift `1 << n`, then perform a logical OR `|` with the bitboard `bitboard_played |= (1 << n)` and `bitboard_player |= (1 << n)`.\n\nWe can use logical OR `bitboard = bitboard | mask` to set specific bits to `1` without unsetting any of the bits previously added.\n\n---\n\n# Logical OR |\n\n| A | B | A|B | \n|---|---|---|\n| 0 | 0 | 0 |\n| 0 | 1 | 1 |\n| 1 | 0 | 1 |\n| 1 | 1 | 1 |\n\n","c5e3a95e":"## configuration\n- `configuration.columns` + `configuration.rows` defines the shape of the game board\n- `configuration.inarow` defines the number of pieces in a row needed for a win\n- `configuration.steps` I assume is the maximum number of turns the game can go on for, which is actually 42 (needs verifying)\n- `configuration.timeout` defines the maximum amount of time an agent has to think before kaggle_environments triggers a timeout \n\nThe configuration is currently set to be the same as those used in the physical boardgame. The competition, however, is called ConnectX rather than Connect4, which suggests that these configuration values might change in future iterations of the game. Code should be written to read values from the configuration rather than hardcoding numbers and assuming they always be constant.\n\n\n## observation\n- `observation.mark` is the player who's turn it is to move next\n- `observation.board` is a 1 dimentional representation of the board. \n\nobservation.board has `len()` == 42 representing a 7x6 board, starting from the sky in the top-left corner and decending row by row, with the last value representing the bottom-right hand corner. Values in the array will be in the set `{0,1,2}`, with 0 representing an empty square, and 1 or 2 representing a player token.\n\nThe first 7 values represent the top row of the board, which can also be used to check if a move is valid. A 0 in the top row of a given column means the sky is empty and column\/action is valid to play in. \n\nIf using numpy, then this can be resized using: \n```\nboard = np.array(observation.board, dtype=np.int8).reshape(configuration.rows, configuration.columns)\n```","3eb95fd1":"# get_move_number()\n\nAnother useful bitshifting technique is bitcounting. This is required to compute the move number and player turn directly from the bitboard. \n\nUsing an integer listboard, this could be done using:\n```\nnp.count_nonzero(listboard)\n```\n\nTo do this the bitshifting way, we compute an array of single-bit masks for each bit position. `np.arange(x)` is equlivant to `np.array(range(x))`. \n\nWe can place this numpy array on the right side of the `<<` of the left-shift operator to vectorized shift the 1 into all the required locations, \nthen use bitwise AND `&` to test which bits in the bitboard are set","623e4e99":"# ConnectX - Vectorized Bitshifting Tutorial\n\nThis notebook tutorial describes how to implement the core functions of the ConnectX game using vectorized bitshifting for performance optimized code.\n\nThe code was used to implement an performance optimized version Monty Carlo Tree Search combined with a Bitsquares Heuristic, resulting top 5% score on the leaderboard.\n- https:\/\/www.kaggle.com\/jamesmcguigan\/connectx-mcts-bitboard-bitsquares-heuristic\/\n\nThis code will outperform most python agents using integer list datastructures, with greater search depth leading to higher winrates. However it is worth noting that python as a language is very slow, and the secret of the top entires on the leaderboard is that their implementations are actually written in a compiled language such as C (or Rust, Go, NIM) and imported into python using ctypes or cffi.","2eb12b7f":"# List Implemention\n\nThe [kaggle_environments](https:\/\/github.com\/Kaggle\/kaggle-environments\/blob\/master\/kaggle_environments\/envs\/connectx\/connectx.py) source code \nprovides a classical implemention of these functions using lists.\n\n## is_draw_kaggle()\n\nThe `is_draw()` function is fairly simple. \n\nThe game is drawn if all squares have been played, this it loops over the board array and checks for the presence of any remaining zeros representing empty squares.\n\nAn eqlivant definition of a draw\/stalemate is when the next player has no more valid actions\/columns to play. This is true because tokens always fall to the lowest row in a column, and the top row can only be played after all the other squares in the column have been player.\n\nThis function could be optimized by simply checking the first `configuration.columns = 7` values, rather than the entire array.","5361ceb4":"# get_winner()\n\nOnce we have generated this carefully computed array of bitmasks, we can use numpy vectorization to perform bitwise operations over the entire array.\n\nGameover is declared if any of the `gameover` bitmasks matches all 4 bits when bitwise AND `&` compared to the player tokens.\n\n- `(bitboard[0] & ~bitboard[1])` computes the scalar value of `p1_tokens`. \n- `& gameovers[:]` computes the bitwise AND `&` against each value in the numpy array, returning a numpy array\n- `== gameovers[:]` checks for every result if any all 4 bits for any of the locations matching a gameover bitmask, returning an array of True or False\n- `np.any(p1_wins)` checks if any element of the numpy array are True - as we only need one Connect4 line to win","0b06a753":"# result_action()\n\nOne final useful function to show is `result_action(bitboard, action, player_id)`. is the bitboard equlivant to the kaggle `play()` function.\n\n`assert` can be used outside of unit tests to enforce pre- and post- conditions in the [Design By Contract](https:\/\/en.wikipedia.org\/wiki\/Design_by_contract) style of programming.\nassertions can be disabled for production using the `python3 -O` or `python3 -OO` [cli flags](https:\/\/docs.python.org\/3\/using\/cmdline.html). \nMy [kaggle_compile.py](https:\/\/www.kaggle.com\/jamesmcguigan\/kaggle-compile-py-python-ide-to-kaggle-compiler) comments them out via a regular expression.\n\nIn this case, we need to assert that a move is legal before we can make it. Rather than recompute the bitmasks each time, these can be statically computed once upon load.\nFirst we take and AND bitmask with the top row, then peform a numpy table lookup on `_is_legal_move_cache[bits, action]` which has been prepopulated with \nall possible `2**configuration.columns = 128` combinations of bits that could result from `bitboard[0] & _is_legal_move_mask`. This requires a negligable amount of memory.\n\n`get_next_index()` is called less often than `is_legal_move()` so simply uses a loop to test for indivdual bits. \nUsing a vectorized implemention here would require testing all bits in the column, but a for loop can short circuit once the first 0 bit is found. \nWe count upwards from the ground because a game is more likely to be half-empty than half-full (we start with an empty board which rarely gets filled completely).\n\n`result_action()` allows us to quickly run Connect4 agent simulations without needing to use the kaggle list implementions.","05195b63":"To get the true positions of player tokens, we must logical AND `&` on both sides of the bitboard. For player 2, the played bits are already set to `1` so we are good to go, however for player 1 represented by a `0` bit, so we need to flip the bits using logical NOT `~`.\n\n\n---\n\n# Logical NOT ~\n\n| A | ~A | \n|---|---|\n| 0 | 1 |\n| 1 | 0 |\n\n\nLogical NOT `~` is a unary operator and will flip all the 1s and 0s in the bitboard, but be careful as this will also flip all 64 bits, and not just the 42 bits we using for data. \n\n---\n\n\n# Logical AND &\n\n| A | B | A&B | \n|---|---|---|\n| 0 | 0 | 0 |\n| 0 | 1 | 0 |\n| 1 | 0 | 0 |\n| 1 | 1 | 1 |\n\n\nLogical AND `&` will only keep bits that set in both bitstrings, thus can be used with a bitmask to extract out specific bit ranges. \n\n---\n\n\n# Logical XOR ^\n\n| A | B | A^B | \n|---|---|---|\n| 0 | 0 | 1 |\n| 0 | 1 | 0 |\n| 1 | 0 | 0 |\n| 1 | 1 | 1 |\n\n\nFor completeness, there also the bitsize XOR `^` operator (exclusive or), which returns 1 if both inputs are the same, or 0 if both inputs are different.\n\nIt can be used to do clever things such as swapping the values of two integers without using a third variable, however I have not needed to use it my codebase.\n```\na ^= b; b ^= a; a ^= b\n```\n\n---\n\n# Example Bitboard\n\nThis is an example of player 1 setting up for a double attack.\n\nNotice how the little-endian bitboard renders the board from bottom-right to top-left. \n\n`bitboard[0]` represents the played tokens. Reading left-to-right, there are three 0s before the two 1s in the bottom row, then a single bit in the second row.\n\n`bitboard[1]` identifies player ownership, but only in squares that have already been played. Note that `0` represents both the default unset value and the indicator for player 1.\n\n`p1_tokens = bitboard[0] & ~bitboard[1]` uses logical AND `&` and logical NOT `~` to only indicate (with 1s) which squares player 1 has actually played.\n\n`p2_tokens = bitboard[0] &  bitboard[1]` is simpler because `bitboard[1]` already uses 1s to indicate the player 2. \n\nIn theory we could shortcircuit `p2_tokens == bitboard[1]`, but this is based on the assumption that `bitboard[1]` defaults to 0 and 1 bits are only set after a token has been played. Its slightly safer not to make this assumption if we are using logical NOT `~` elsewhere in the codebase (as this might set higher order bits to 1). ","51b55bce":"## is_win_kaggle()\n\n`is_win()` optimises itself by only checking for connect4 lines in the last column played, rather than validating the entire board.\n\nIt starts by figuring out the row height for the target column. Rows are counted downwards with `row=0` being the sky, thus `min()` will return the highest row number, and `max()` will return the lowest row number. If `has_played=True` the board is the old view of the board before the player moved, thus the row number is the position of the lowest EMPTY square rather than highest played square.\n\nThe inline `count()` function checks played token in the column. It given a direction vector `(+-1, +-1)` and iterates upto `configuration.inarow=4` squares until it either hits the edge of the board or encounters an EMPTY or opponent token. If the sum of any pair of directions is greater than `configuration.inarow`, then the function returns `True` as the win condition has been met."}}