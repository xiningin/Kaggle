{"cell_type":{"020a5d3c":"code","5cd6935e":"code","2f5b9e8b":"code","b4f7ebe8":"code","b25b3c88":"code","8eadfa03":"code","4d927898":"code","2f2e362a":"code","ce98ccfd":"code","888e5b98":"code","ed6cebc8":"code","b94a3dc0":"code","e0298bd6":"code","f479c591":"code","3d8382b8":"code","2a4dce22":"code","dce253e5":"code","1106306c":"code","0279bee0":"code","fc481916":"code","6eafcfa8":"code","c9f38838":"code","a0835c5e":"code","2dedb8f6":"code","fa2cfd9b":"code","33f815ab":"code","c2581b4c":"code","044a6118":"code","68137a6d":"code","a29dcc7d":"code","41b14306":"code","0f1dc289":"code","0db67d73":"code","91a98f15":"code","8e216232":"code","47e0ef1b":"code","92eef3cf":"code","5a5a297a":"code","cc1d6eda":"code","c7557481":"code","856d95e6":"code","d3c52753":"code","e831dde6":"code","ff92d711":"code","d49fc101":"code","12502287":"code","1a36dd58":"code","ca0098a8":"code","6ab838cb":"code","cc742dbc":"code","c32e71f7":"code","2765603e":"code","36612a16":"code","00116388":"code","191fd80f":"code","1e2b5f09":"code","99e09bfd":"code","595fd06b":"code","43637ee9":"code","a8c147ff":"code","8800790d":"markdown","3b0f6502":"markdown","347064d9":"markdown","299f9bb3":"markdown","66a94896":"markdown","78eaa206":"markdown","f11b22b7":"markdown","9bd3f860":"markdown","a3e0a8ca":"markdown","604ff92a":"markdown","8867d3b4":"markdown","78863e0b":"markdown","20a2de91":"markdown","752c2a0b":"markdown","fc63b114":"markdown","7b2af19d":"markdown","f2db8a7b":"markdown","06b7d5f0":"markdown","f9ef7ab8":"markdown","5c405422":"markdown","00d84fd7":"markdown","257c4240":"markdown","c5c0240c":"markdown","e17817a2":"markdown","b2d8771d":"markdown","bed01b57":"markdown","885697c5":"markdown","925e2c60":"markdown","1ad34f70":"markdown","74017daa":"markdown"},"source":{"020a5d3c":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport numpy as np","5cd6935e":"tips = sns.load_dataset('tips')\ntips.head()","2f5b9e8b":"sns.barplot(x='sex',y='total_bill',data=tips,estimator=np.mean)","b4f7ebe8":"import numpy as np","b25b3c88":"plt.figure(figsize=(10,8))\nsns.barplot(x='sex',y='total_bill',data=tips,estimator=np.std)","8eadfa03":"sns.countplot(x='sex',data=tips)","4d927898":"plt.figure(figsize=(10,8))\nsns.boxplot(x=\"day\", y=\"total_bill\", data=tips,palette='rainbow')","2f2e362a":"# Can do entire dataframe with orient='h'\nplt.figure(figsize=(12,8))\nsns.boxplot(data=tips,palette='rainbow',orient='h')","ce98ccfd":"plt.figure(figsize=(16,8))\nsns.boxplot(x=\"day\", y=\"total_bill\", hue=\"smoker\",data=tips, palette=\"coolwarm\")","888e5b98":"plt.figure(figsize=(16,8))\nsns.violinplot(x=\"day\", y=\"total_bill\", data=tips,palette='rainbow')","ed6cebc8":"plt.figure(figsize=(16,8))\nsns.violinplot(x=\"day\", y=\"total_bill\", data=tips,hue='sex',palette='Set1')","b94a3dc0":"plt.figure(figsize=(16,8))\nsns.violinplot(x=\"day\", y=\"total_bill\", data=tips,hue='sex',split=True,palette='Set1')","e0298bd6":"plt.figure(figsize=(9,6))\nsns.stripplot(x=\"day\", y=\"total_bill\", data=tips)","f479c591":"plt.figure(figsize=(11,8))\nsns.stripplot(x=\"day\", y=\"total_bill\", data=tips,jitter=True)","3d8382b8":"plt.figure(figsize=(10,8))\nsns.stripplot(x=\"day\", y=\"total_bill\", data=tips,jitter=True,hue='sex',palette='Set1')","2a4dce22":"\nplt.figure(figsize=(12,8))\nsns.stripplot(x=\"day\", y=\"total_bill\", data=tips,jitter=True,hue='sex',palette='Set1',split=True)","dce253e5":"plt.figure(figsize=(12,8))\nsns.swarmplot(x=\"day\", y=\"total_bill\", data=tips)","1106306c":"plt.figure(figsize=(12,8))\nsns.swarmplot(x=\"day\", y=\"total_bill\",hue='sex',data=tips, palette=\"Set1\", split=True)","0279bee0":"plt.figure(figsize=(12,8))\nsns.violinplot(x=\"tip\", y=\"day\", data=tips,palette='rainbow')\nsns.swarmplot(x=\"tip\", y=\"day\", data=tips,color='black',size=3)","fc481916":"sns.factorplot(x='sex',y='total_bill',data=tips,kind='bar')","6eafcfa8":"plt.figure(figsize=(12,8))\nsns.distplot(tips['total_bill'])\n# Safe to ignore warnings","c9f38838":"sns.distplot(tips['total_bill'],kde=False,bins=30)","a0835c5e":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')","2dedb8f6":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')","fa2cfd9b":"sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')","33f815ab":"sns.pairplot(tips)","c2581b4c":"sns.pairplot(tips,hue='sex',palette='coolwarm')","044a6118":"sns.rugplot(tips['total_bill'])","68137a6d":"# Don't worry about understanding this code!\n# It's just for the diagram below\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n#Create dataset\ndataset = np.random.randn(25)\n\n# Create another rugplot\nsns.rugplot(dataset);\n\n# Set up the x-axis for the plot\nx_min = dataset.min() - 2\nx_max = dataset.max() + 2\n\n# 100 equally spaced points from x_min to x_max\nx_axis = np.linspace(x_min,x_max,100)\n\n# Set up the bandwidth, for info on this:\nurl = 'http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth'\n\nbandwidth = ((4*dataset.std()**5)\/(3*len(dataset)))**.2\n\n\n# Create an empty kernel list\nkernel_list = []\n\n# Plot each basis function\nfor data_point in dataset:\n    \n    # Create a kernel for each point and append to list\n    kernel = stats.norm(data_point,bandwidth).pdf(x_axis)\n    kernel_list.append(kernel)\n    \n    #Scale for plotting\n    kernel = kernel \/ kernel.max()\n    kernel = kernel * .4\n    plt.plot(x_axis,kernel,color = 'grey',alpha=0.5)\n\nplt.ylim(0,1)","a29dcc7d":"#To get the kde plot we can sum these basis functions.\n\n# Plot the sum of the basis function\nsum_of_kde = np.sum(kernel_list,axis=0)\n\n# Plot figure\nfig = plt.plot(x_axis,sum_of_kde,color='indianred')\n\n# Add the initial rugplot\nsns.rugplot(dataset,c = 'indianred')\n\n# Get rid of y-tick marks\nplt.yticks([])\n\n# Set title\nplt.suptitle(\"Sum of the Basis Functions\")","41b14306":"sns.kdeplot(tips['total_bill'])\nsns.rugplot(tips['total_bill'])","0f1dc289":"sns.kdeplot(tips['tip'])\nsns.rugplot(tips['tip'])","0db67d73":"iris = sns.load_dataset('iris')\niris.head()","91a98f15":"# Just the Grid\nsns.PairGrid(iris)","8e216232":"# Then you map to the grid\ng = sns.PairGrid(iris)\ng.map(plt.scatter)","47e0ef1b":"# Map to upper,lower, and diagonal\ng = sns.PairGrid(iris)\ng.map_diag(plt.hist)\ng.map_upper(plt.scatter)\ng.map_lower(sns.kdeplot)","92eef3cf":"sns.pairplot(iris)","5a5a297a":"sns.pairplot(iris,hue='species',palette='rainbow')","cc1d6eda":"# Just the Grid\ng = sns.FacetGrid(tips, col=\"time\", row=\"smoker\")","c7557481":"g = sns.FacetGrid(tips, col=\"time\",  row=\"smoker\")\ng = g.map(plt.hist, \"total_bill\")","856d95e6":"g = sns.FacetGrid(tips, col=\"time\",  row=\"smoker\")\ng = g.map(plt.hist, \"total_bill\")","d3c52753":"g = sns.JointGrid(x=\"total_bill\", y=\"tip\", data=tips)","e831dde6":"g = sns.JointGrid(x=\"total_bill\", y=\"tip\", data=tips)\ng = g.plot(sns.regplot, sns.distplot)","ff92d711":"flights = sns.load_dataset('flights')\nflights.head()","d49fc101":"# Matrix form for correlation data\ntips.corr()","12502287":"sns.heatmap(tips.corr())","1a36dd58":"sns.heatmap(tips.corr(),cmap='coolwarm',annot=True)","ca0098a8":"flights.pivot_table(values='passengers',index='month',columns='year')","6ab838cb":"pvflights = flights.pivot_table(values='passengers',index='month',columns='year')\nsns.heatmap(pvflights)","cc742dbc":"sns.heatmap(pvflights,cmap='magma',linecolor='white',linewidths=1)","c32e71f7":"sns.clustermap(pvflights)","2765603e":"# More options to get the information a little clearer like normalization\nsns.clustermap(pvflights,cmap='coolwarm',standard_scale=1)","36612a16":"sns.lmplot(x='total_bill',y='tip',data=tips)","00116388":"sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex')","191fd80f":"sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='coolwarm')","1e2b5f09":"# http:\/\/matplotlib.org\/api\/markers_api.html\nsns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='coolwarm',\n           markers=['o','v'],scatter_kws={'s':100})","99e09bfd":"sns.lmplot(x='total_bill',y='tip',data=tips,col='sex')","595fd06b":"sns.lmplot(x=\"total_bill\", y=\"tip\", row=\"sex\", col=\"time\",data=tips)","43637ee9":"sns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm')","a8c147ff":"sns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm',\n          aspect=0.6,size=8)","8800790d":"So with our tips dataset:","3b0f6502":"# Regression Plots\n\nSeaborn has many built-in capabilities for regression plots, however we won't really discuss regression until the machine learning section of the course, so we will only cover the **lmplot()** function for now.\n\n**lmplot** allows you to display linear models, but it also conveniently allows you to split up those plots based off of features, as well as coloring the hue based off of features.\n\nLet's explore how this works:","347064d9":"## barplot and countplot\n\nThese very similar plots allow you to get aggregate data off a categorical feature in your data. **barplot** is a general plot that allows you to aggregate the categorical data based off some function, by default the mean:","299f9bb3":"## jointplot\n\njointplot() allows you to basically match up two distplots for bivariate data. With your choice of what **kind** parameter to compare with: \n* \u201cscatter\u201d \n* \u201creg\u201d \n* \u201cresid\u201d \n* \u201ckde\u201d \n* \u201chex\u201d","66a94896":"Or for the flights data:","78eaa206":"# Matrix Plots\n\nMatrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data (later in the machine learning section we will learn how to formally cluster data).\n\nLet's begin by exploring seaborn's heatmap and clutermap:","f11b22b7":"### Working with Markers\n\nlmplot kwargs get passed through to **regplot** which is a more general form of lmplot(). regplot has a scatter_kws parameter that gets passed to plt.scatter. So you want to set the s parameter in that dictionary, which corresponds (a bit confusingly) to the squared markersize. In other words you end up passing a dictionary with the base matplotlib arguments, in this case, s for size of a scatter plot. In general, you probably won't remember this off the top of your head, but instead reference the documentation.","9bd3f860":"# Grids\n\nGrids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features.","a3e0a8ca":"### violinplot\nA violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.","604ff92a":"## factorplot\n\nfactorplot is the most general form of a categorical plot. It can take in a **kind** parameter to adjust the plot type:","8867d3b4":"## JointGrid\n\nJointGrid is the general version for jointplot() type grids, for a quick example:","78863e0b":"Notice now how the years and months are no longer in order, instead they are grouped by similarity in value (passenger count). That means we can begin to infer things from this plot, such as August and July being similar (makes sense, since they are both summer travel months)","20a2de91":"## rugplot\n\nrugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:","752c2a0b":"## PairGrid\n\nPairgrid is a subplot grid for plotting pairwise relationships in a dataset.","fc63b114":"# Categorical Data Plots\n\nNow let's discuss using seaborn to plot categorical data! There are a few main plot types for this:\n\n* factorplot\n* boxplot\n* violinplot\n* stripplot\n* swarmplot\n* barplot\n* countplot\n\nLet's go through examples of each!","7b2af19d":"## pairplot\n\npairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns). ","f2db8a7b":"## stripplot and swarmplot\nThe stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.\n\nThe swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don\u2019t overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them).","06b7d5f0":"### Combining Categorical Plots","f9ef7ab8":"### countplot\n\nThis is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value:","5c405422":"## clustermap\n\nThe clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example:","00d84fd7":"You can change the estimator object to your own function, that converts a vector to a scalar:","257c4240":"If you like it, please vote :)","c5c0240c":"## Using a Grid\n\nWe can add more variable separation through columns and rows with the use of a grid. Just indicate this with the col or row arguments:","e17817a2":"## Heatmap\n\nIn order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example:","b2d8771d":"## kdeplot\n\nkdeplots are [Kernel Density Estimation plots](http:\/\/en.wikipedia.org\/wiki\/Kernel_density_estimation#Practical_estimation_of_the_bandwidth). These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:","bed01b57":"## distplot\n\nThe distplot shows the distribution of a univariate set of observations.","885697c5":"## Aspect and Size\n\nSeaborn figures can have their size and aspect ratio adjusted with the **size** and **aspect** parameters:","925e2c60":"## pairplot\n\npairplot is a simpler version of PairGrid (you'll use quite often)","1ad34f70":"## boxplot and violinplot\n\nboxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be \u201coutliers\u201d using a method that is a function of the inter-quartile range.","74017daa":"## Facet Grid\n\nFacetGrid is the general way to create grids of plots based off of a feature:"}}