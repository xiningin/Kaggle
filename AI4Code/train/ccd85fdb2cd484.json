{"cell_type":{"eabd2110":"code","5b4f5638":"code","c28872c3":"code","06b21999":"code","95fa991d":"code","55270965":"markdown","7fee2b14":"markdown","d89c2f90":"markdown","b3b21462":"markdown","fad7f1fa":"markdown","1f53697b":"markdown","9556709f":"markdown","45d1f180":"markdown","a41a12cc":"markdown","a5ba0a96":"markdown","480f7036":"markdown","c057a860":"markdown","b21041a9":"markdown","2aff8fd8":"markdown","40c87739":"markdown","5b98286e":"markdown","69c29b6a":"markdown"},"source":{"eabd2110":"#OOPR-Assgn-3\n#Start writing your code here\n\n\nclass Customer:\n    def __init__(self):\n        self.customer_name=\"ABHISHEK SHARMA\"\n        self.bill_amount=0 \n        \n    def pays_bill(self,amount):\n        print(self.customer_name+\" pays bill amount of Rs. \"+str(amount))\n        \n    def purchases(self):\n        self.bill_amount=500\n        bill=self.bill_amount-self.bill_amount*5\/100\n        self.pays_bill(bill)\n        \n        \nc1=Customer()\nc1.purchases()","5b4f5638":"#OOPR-Assgn-5\n#Start writing your code here\n\ndef check_type(type):\n    vehicle_type=['Two Wheeler', 'Four Wheeler']\n    if type not in vehicle_type:\n            return 0\n    return 1\nclass Vehicle:\n    def __init__(self):\n        self.__vehicle_cost=None\n        self.__vehicle_id=None\n        self.__vehicle_type=None\n        self.__premium_amount=None\n        \n    def set_vehicle_id(self,vehicle_id):\n        self.__vehicle_id=vehicle_id\n    def set_vehicle_type(self,vehicle_type):\n        if check_type(vehicle_type):\n            self.__vehicle_type=vehicle_type\n        else:\n            return \"invalid Vehicle DETAILS\"\n    def set_vehicle_cost(self,vehicle_cost):\n        self.__vehicle_cost=vehicle_cost\n    def get_vehicle_id(self):\n        return self.__vehicle_id\n    def get_vehicle_type(self):\n        return self.__vehicle_type\n    def get_vehicle_cost(self):\n        return self.__vehicle_cost\n    def set_premium_amount(self,premium_amount):\n        self.__premium_amount=premium_amount\n    def get_premium_amount(self):\n        return self.__premium_amount\n        \n    def calculate_premium(self):\n        if self.__vehicle_type==\"Two Wheeler\":\n            self.__premium_amount=self.__vehicle_cost*2\/100\n        elif self.__vehicle_type==\"Four Wheeler\":\n            self.__premium_amount=self.__vehicle_cost*6\/100\n        else:\n            print(\"Invalid Vehicle Type\")\n            \n    def display_vehicle_details(self):\n        print(self.__premium_amount)\n    \nv1 = Vehicle()\n#v1.set_vehicle_id=10\nv1.set_vehicle_type(\"Two Wheeler\")\nv1.set_vehicle_cost(105000)\nv1.calculate_premium()\nv1.display_vehicle_details()","c28872c3":"#OOPR-Assgn-7\n#Start writing your code here\nclass Instructor:\n    def __init__(self):\n        self.__instructor_name=None\n        self.__experience=None\n        self.__avg_feedback=None\n        self.__technology_skill=None\n        \n    def set_instructor_name(self,instructor_name):\n        self.__instructor_name=instructor_name\n        \n    def set_experience(self,experience):\n        self.__experience=experience\n        \n    def set_avg_feedback(self,avg_feedback):\n        self.__avg_feedback=avg_feedback\n        \n    def set_technology_skill(self,technology_skill):\n        self.__technology_skill=technology_skill\n        \n    def get_instructor_name(self):\n        return self.__instructor_name\n    \n    def get_experience(self):\n        return self.__experience\n        \n    def get_avg_feedback(self):\n        return self.__avg_feedback\n        \n    def get_technology_skill(self):\n        return self.__technology_skill\n        \n    def check_eligibility(self):\n        if self.__experience>3 and self.__avg_feedback>=4.5:\n            return True\n        elif self.__experience<=3 and self.__avg_feedback>=4:\n            return True\n        else:\n            return False\n            \n    def allocate_course(self,technology):\n        if((technology==self.__technology_skill) or (technology==\"C++\")):\n            return True\n        else:\n            return False","06b21999":"#OOPR-Assgn-8\n#Start writing your code here\nclass Student:\n    def __init__(self):\n        self.__student_id=None\n        self.__marks=None\n        self.__age=None\n    def set_marks(self,marks):\n        self.__marks=marks\n    def set_age(self,age):\n        self.__age=age\n    def set_student_id(self,student_id):\n        self.__student_id=student_id\n    \n    def get_student_id(self):\n        return self.__student_id\n    def get_marks(self):\n        return self.__marks\n    def get_age(self):\n        return self.__age\n\n    def validate_age(self):\n        return self.__age > 20\n    def validate_marks(self):\n        return 0<=self.__marks<=100\n    \n    def check_qualification(self):\n        return self.validate_marks() and self.validate_age() and self.__marks>=65 ","95fa991d":"#OOPR-Assgn-9\n#Implement Student class here\nclass Student:\n    dic={1001:25575.0,1002:15500.0}\n    def __init__(self):\n        self.__student_id=None\n        self.__marks=None\n        self.__age=None\n        self.__course_id=None\n        self.__fees=None\n        \n    def choose_course(self,course_id):\n        if course_id in self.dic.keys():\n            self.__course_id=course_id\n            self.__fees=self.dic[course_id]\n            if self.__marks>85:\n                self.__fees=self.dic[course_id]-self.dic[course_id]*25\/100    \n            return True\n        else:\n            return False\n        \n    def set_student_id(self,student_id):\n        self.__student_id=student_id    \n    def set_marks(self,marks):\n        self.__marks=marks\n    def set_age(self,age):\n        self.__age=age\n    \n    def get_student_id(self):\n        return self.__student_id\n    def get_marks(self):\n        return self.__marks\n    def get_age(self):\n        return self.__age\n    def get_course_id(self):\n        return self.__course_id\n    def get_fees(self):\n        return self.__fees\n\n    def validate_age(self):\n        return self.__age > 20\n    def validate_marks(self):\n        return 0<=self.__marks<=100\n    def check_qualification(self):\n        return self.validate_marks() and self.validate_age() and self.__marks>=65 \n\n\n\n\nmaddy=Student()\nmaddy.set_student_id(1001)\nmaddy.set_age(21)\nmaddy.set_marks(65)\nif(maddy.check_qualification()):\n    print(\"Student has qualified\")\n    if(maddy.choose_course(1002)):\n        print(\"Course allocated\")\n    else:\n        print(\"Invalid course id\")\nelse:\n    print(\"Student has not qualified\")\n\n\n#Solutions\n\nclass Student:\n    def __init__ (self):\n            self.__student_id=None\n            self.__age=None\n            self.__marks=0\n            self.__course_id=None\n            self.__fees=None\n            \n    def set_student_id(self, student_id):\n            self.__student_id = student_id\n    def get_student_id(self):\n        return self.__student_id\n    \n    def set_age(self, age):\n            self.__age = age\n    def get_age(self):\n        return self.__age   \n    \n    def set_marks(self, marks):\n            self.__marks =marks\n    def get_marks(self):\n        return self.__marks\n        \n    def get_course_id(self):\n        return self.__course_id\n    def get_fees(self):\n        return self.__fees\n        \n    def validate_marks(self):\n             if(self.__marks>=0 and self.__marks<=100):\n                 return True\n             else:\n                 return False   \n    \n    def validate_age(self):\n            if(self.__age>20):\n                 return True\n            else:\n                 return False\n                 \n    def check_qualification(self):\n            if(self.__age>20 and self.__marks>=65 and self.validate_marks()):\n                 return True\n            else:\n                 return False\n        \n    def choose_course(self,course_id):\n        if(self.check_qualification() and (course_id==1001 or course_id==1002)):\n            self.__course_id=course_id\n            if(course_id==1001):\n                self.__fees=25575.0\n            elif(course_id==1002):\n                self.__fees=15500.0\n            if(self.__marks>85):\n                self.__fees=self.__fees-(self.__fees*25\/100)\n            return True\n        return False\n    \nmaddy=Student()\nmaddy.set_student_id(1001)\nmaddy.set_age(21)\nmaddy.set_marks(84)\nif(maddy.check_qualification()):\n    print(\"Student has qualified\")\n    if(maddy.choose_course(1002)):\n        print(\"Course allocated\")\n    else:\n        print(\"Invalid course id\")\nelse:\n    print(\"Student has not qualified\")\n","55270965":"# Assignment 8 \nA university wants to automate their admission process. Students are admitted based on marks scored in a qualifying exam.\nA student is identified by student id, age and marks in qualifying exam. Data are valid, if:\n\n    Age is greater than 20\n    Marks is between 0 and 100 (both inclusive)\n\nA student qualifies for admission, if\n\n    Age and marks are valid and\n    Marks is 65 or more\n\nWrite a python program to represent the students seeking admission in the university.","7fee2b14":"# Assignment 4: \n\nWeCare insurance company wants to calculate premium of vehicles.\nVehicles are of two types \u2013 \"Two Wheeler\" and \"Four Wheeler\". Each vehicle is identified by vehicle id, type, cost and premium amount.\nPremium amount is 2% of the vehicle cost for two wheelers and 6% of the vehicle cost for four wheelers. Calculate the premium amount and display the vehicle details.\n\nIdentify the class name and attributes to represent vehicles. Drag and drop the chosen class name, attributes and methods into the appropriate section of the box shown below. ","d89c2f90":"Result Pane:\n\n7 out of 7 test cases passed.\n\n7 out of 7 structural test cases passed.\n\n0 out of 0 logical test cases passed. ","b3b21462":"    ClassName: Instructor\n\n    Attributes: technology_skills, avg_feedback, experience, instructor_name\n\n    Methods: __init__(), check_eligibility(), allocate_course(technology)","fad7f1fa":"# ABHISHEK SHARMA\n\n# 18SCSE1050009\n\n# 18021050114\n\n# Infytq OOP Day-1 Assignment ","1f53697b":"#  Assignment 7:\n\nWrite a Python program to implement the class chosen with its attributes and methods.\n\n\nNote:\n\n    Consider all instance variables to be private and methods to be public\n    An instructor may have multiple technology skills, so consider instance variable, technology_skill to be a list\n    check_eligibility(): Return true if eligibility criteria is satisfied by the instructor. Else, return false\n    allocate_course(technology): Return true if the course which requires the given technology can be allocated to the instructor. Else, return false\n    Perform case sensitive string comparison\n\nRepresent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.\n","9556709f":"# Assignment 1:\n\n\n    Analyze the scenario and identify minimum three different objects.\n\n    customer_name \n    customer <<\n    item_id \n    description\n    bill_amount\n    price_per_unit\n    item <<\n    pays_bill\n    purchases\n    employee <<\n    designation \n    \n> Congratulations !!! Your answer is right.","45d1f180":"Result Pane:\n\n28 out of 28 test cases passed.\n\n17 out of 17 structural test cases passed.\n\n11 out of 11 logical test cases passed. ","a41a12cc":"#  Assignment 5:\n\nWrite a Python program to implement the class chosen with its attributes and methods.\n\nNote:\n\n    Consider all instance variables to be private and methods to be public\n    Include getter and setter methods for all instance variables\n    Display appropriate error message, if the vehicle type is invalid\n    Perform case sensitive string comparison\n\nRepresent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.\n","a5ba0a96":"# Assignment 6: \n# \nTechWorld, a technology training center, wants to allocate courses for instructors.\nAn instructor is identified by name, technology skills, experience and average feedback.\nAn instructor is allocated a course, if he\/she satisfies the below two conditions:\n\n    eligibility criteria:\n        if experience is more than 3 years, average feedback should be 4.5 or more\n        if experience is 3 years or less, average feedback should be 4 or more\n    he\/she should posses the technology skill for the course\n\nIdentify the class name and attributes to represent instructors. Drag and drop the chosen class name, attributes and methods into the appropriate section of the box shown below.","480f7036":"\nResult Pane:\n\n23 out of 23 test cases passed.\n\n17 out of 17 structural test cases passed.\n\n6 out of 6 logical test cases passed. ","c057a860":"Result Pane:\n\n54 out of 54 test cases passed.\n\n20 out of 20 structural test cases passed.\n\n34 out of 34 logical test cases passed. ","b21041a9":"# Assignment 9\n\nContinuing with the previous scenario, a student eligible for admission has to choose a course and pay the fees for it. If they have scored more than 85 marks in qualifying exam, they get 25% discount on fees.\n\nValid course ids and fees are given below:\ncourse id \tfees\n1001 \t25575.0\n1002 \t15500.0\n\nExtend the program written in the previous assignment to include the above requirement. ","2aff8fd8":"    ClassName: Instructor\n\n    Attributes: technology_skills, avg_feedback, experience, instructor_name\n\n    Methods: __init__(), check_eligibility(), allocate_course(technology)","40c87739":"Result Pane:\n\n33 out of 33 test cases passed.\n\n15 out of 15 structural test cases passed.\n\n18 out of 18 logical test cases passed. ","5b98286e":"# Assignment 2:\n\n\n    Class Customer:\n      def __init__(self, customer_name, bill_amount):   #Attributes\n        self.customer_name = customer_name\n        self.bill_amount = bill_amount\n\n      def purchases():        # Methods\n      def pays_bill(amount): \n          \n    Class Item:\n      def __init__(self, item_id, description , price_per_unit):  #Attributes\n        self.item_id = item_id\n        self.description = description\n        self.price_per_unit = price_per_unit\n        \n    Class Employee:\n      def __init__(self, designation, emp_name ):   #Attributes\n        self.designation = designation\n        self.emp_name = emp_name\n\n\n     ","69c29b6a":"#  Assignment 3:\n\nImplement the Customer class based on the identified class structure and details given below:\n\n    1. Consider all instance variables and methods to be public\n    2. Assume that bill_amount is initialized with total bill amount of the customer\n    3. Customer is eligible for 5% discount on the bill amount\n    4. purchases(): Compute discounted bill amount and pay bill\n    5. pays_bill(amount): Display, <customer_name> pays bill amount of Rs. <amount>\n\nRepresent few customers, invoke purchases() method and display the details.\n\nNote: Verification is done only for the class structure.\n"}}