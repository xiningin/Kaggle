{"cell_type":{"102a5a36":"code","3d832616":"code","5ab4bc1f":"code","cb7b5ad6":"code","60fa2b5a":"code","cdfa3693":"code","bea3051f":"code","c9263cce":"code","2c5abac1":"code","119651a3":"code","521eb5a7":"code","f67a7075":"code","13e4e027":"code","5f4b2927":"code","563eab68":"code","f02b1eb4":"code","1d57d29d":"code","d3a81cfb":"code","9d514b92":"code","88781701":"code","99db4dd7":"code","7ce941f8":"code","78395aaf":"code","dd33175c":"code","42e496ea":"code","7b210e8d":"code","919e5428":"code","ab117fce":"code","9e388e21":"code","0f398f09":"code","b23a32ed":"code","4be53876":"code","d9f4e40b":"code","33718597":"code","1aa42485":"code","60b0eaa0":"code","af839d3d":"code","c8131860":"code","3fd25de2":"code","d237cfdd":"code","80436741":"code","f241b350":"code","28c1272c":"code","e54be51d":"code","2a4293fa":"code","e4d6a5b1":"code","bb9411d6":"code","11d82443":"code","e90875a2":"code","05045095":"code","1afd209c":"code","5dcabed4":"code","9451bf8d":"code","17f2fb38":"code","40848ed3":"code","2c85f619":"code","9d42dd64":"code","acf54803":"code","81471cd7":"code","92b8443c":"code","1f2f7cc0":"code","c591c4ec":"code","d5c6eb7e":"code","a88d23af":"code","720e620e":"code","332af510":"code","d8bf3c33":"code","6cb594ef":"code","f77876ce":"code","6ab4148d":"code","01017f17":"code","1564a77b":"code","55e9b594":"code","66e26667":"code","1b1c64ca":"code","486ac01f":"markdown","2ff9488c":"markdown","139dd353":"markdown","bb78efe6":"markdown","78c67e91":"markdown","99c3035e":"markdown","c3cd31df":"markdown","9deb364d":"markdown","d5fc207d":"markdown","ead8a858":"markdown","43bcc41c":"markdown","434d7b84":"markdown","13a6a38e":"markdown","80fc56d5":"markdown","66f5d4a1":"markdown","fd87d25d":"markdown","6c7efc86":"markdown","6de828b8":"markdown","b17ae397":"markdown","0638d1f3":"markdown","df3d8bca":"markdown","03fb54e6":"markdown","08ba292a":"markdown","3cd59ab8":"markdown","092a3731":"markdown","f416aee2":"markdown","c9a23cf4":"markdown","8a3607e8":"markdown","a796c5bb":"markdown","385174ab":"markdown","bae4057e":"markdown","5acbf249":"markdown"},"source":{"102a5a36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3d832616":"import warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn import svm\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nwarnings.filterwarnings('ignore')","5ab4bc1f":"train_data_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntest_data_path = '\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv'\ncured_train_data_path = 'cured_train.csv'\ncured_test_data_path = 'cured_test.csv'","cb7b5ad6":"dataA = pd.read_csv(train_data_path)\ndataB = pd.read_csv(test_data_path)\ndata = dataA.append(dataB)\ndataA.shape, dataB.shape, data.shape","60fa2b5a":"# Ensure there are no duplicates, by checking the uniquiness of Id field\ndata.Id.unique().size","cdfa3693":"data.head()","bea3051f":"data.describe()","c9263cce":"lencoder = LabelEncoder()\noencoder = OneHotEncoder(sparse=False)","2c5abac1":"#check feature data types\ndef print_dtypes(df):\n  for name, typ in df.dtypes.iteritems():\n    print(f'{name}\\t\\t{typ}')\nprint_dtypes(data)","119651a3":"# Check for missing Data\ndef get_features_with_missing_data(df):\n  features_with_missing_values = df.isnull().sum().sort_values(ascending=False)\n  for feature, number in features_with_missing_values.iteritems():\n    if number ==0: break\n    print(f'{feature}\\t\\t\\t{number}') \n\nget_features_with_missing_data(data)","521eb5a7":"mpqc_with_qa = data[(data.PoolQC.isna()) & (data.PoolArea >0)]\nprint(f'{mpqc_with_qa.shape}, this says that there are 3 missing PoolQC with PoolArea available')\nmpqc_with_qa[['PoolQC', 'PoolArea','LotArea','SalePrice']]","f67a7075":"# Lets find the count of records on each category of PoolQC\npqc_with_qa = data[(data.PoolQC.notna()) & (data.PoolArea >0)]\nprint(f'{pqc_with_qa.shape}, this says that there are only 10 records with pool quality and pool area')\nsns.catplot(data=data, x='PoolQC', kind='count')\nplt.show()","13e4e027":"record_ids = mpqc_with_qa.index\ndata.at[record_ids, 'PoolQC'] = 'TA'\nmpqc_with_qa = data[(data.PoolQC.isna()) & (data.PoolArea >0)]\n# replace Other Missing value for PoolQC with 'NA'\ndata.PoolQC.fillna('NA', inplace=True)","5f4b2927":"# check if any record has MiscVal and not MiscFeature\nmissing_mf = data[(data.MiscFeature.isna()) & (data.MiscVal>0)]\nmissing_mf[['MiscFeature', 'MiscVal', 'SalePrice']]","563eab68":"# Lets plot the MiscFeature Vs MiscVal box plot to find out the Val range of each Feature\nsns.catplot(data=data, x='MiscFeature', y='MiscVal', kind='box')","f02b1eb4":"data.at[1089, 'MiscFeature'] = 'Gar2'","1d57d29d":"missing_mf = data[(data.MiscFeature.isna()) & (data.MiscVal>0)]\nmissing_mf[['MiscFeature', 'MiscVal', 'SalePrice']]","d3a81cfb":"data.MiscFeature.fillna('NA', inplace=True)","9d514b92":"data.Alley.fillna('NA', inplace=True)","88781701":"data.Fence.fillna('NA', inplace=True)","99db4dd7":"data[(data.Fireplaces > 0) & (data.FireplaceQu.isna())].shape","7ce941f8":"# Lets replace All NaN with 'NA' for FireplaceQu\ndata.FireplaceQu.fillna('NA', inplace=True)","78395aaf":"lotData =  data[['LotArea', 'LotFrontage', 'LotConfig']]\nplt.figure(figsize=(2,3))\nsns.boxplot(data=lotData, x='LotFrontage', orient='v')\nlotData.LotFrontage.mean(), lotData.LotFrontage.median()","dd33175c":"data.LotFrontage.fillna(data.LotFrontage.median(), inplace=True)","42e496ea":"grg_data = data[['YearBuilt','GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond', 'MiscFeature', 'SalePrice']]\nfn_gr = grg_data[(grg_data.GarageQual.isna()) & (grg_data.GarageType.notna())] # return the records with GarageType available and GarageQual NotAvailable\nfn_gr","7b210e8d":"grg_features = ['GarageType','GarageYrBlt','GarageFinish','GarageCars','GarageArea','GarageQual','GarageCond']\ndata.at[fn_gr.index, grg_features] = 'NA'\n# fill other NaN with 'NA'\ndata.at[data[grg_data.GarageType.isna()].index, grg_features] = 'NA'","919e5428":"bsmt_fts = ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', \n 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath',]\nint_fts = bsmt_fts + ['SalePrice']\nbsmt_data = data[int_fts]","ab117fce":"# BsmtExposure\nMissing_BsmtExposure = bsmt_data[(bsmt_data.BsmtExposure.isna()) & (bsmt_data.BsmtFinType1.notna())]\nMissing_BsmtExposure","9e388e21":"# Search for similar records with BsmtExposure, find the category with max value and replace the missing value\nBsmtExposure_samples = bsmt_data[(bsmt_data.BsmtQual=='Gd') & (bsmt_data.BsmtCond=='TA') & \n          (bsmt_data.BsmtFinType1=='Unf') & (bsmt_data.BsmtFinType2=='Unf') &\n          (bsmt_data.BsmtFinSF1==0) & (bsmt_data.BsmtFinSF2==0) ]\nsns.catplot(data=BsmtExposure_samples, x='BsmtExposure', kind='count')","0f398f09":" # above plot shows that most of the other records of similar condition has No Exposure as value.\n data.at[Missing_BsmtExposure.index, 'BsmtExposure'] = 'No'","b23a32ed":"# BsmtCond\nMissing_BsmtCond = bsmt_data[(bsmt_data.BsmtCond.isna()) & (bsmt_data.BsmtExposure.notna())]\nMissing_BsmtCond","4be53876":"Missing_BsmtCond_rc1=bsmt_data[(bsmt_data.BsmtQual=='Gd') & (bsmt_data.BsmtExposure=='Mn') & (bsmt_data.BsmtFinType1=='GLQ') & (bsmt_data.BsmtFinType2=='Rec')]\nsns.catplot(data=Missing_BsmtCond_rc1, x='BsmtCond', kind='count')","d9f4e40b":"Missing_BsmtCond_rc2=bsmt_data[(bsmt_data.BsmtQual=='TA') & (bsmt_data.BsmtExposure=='No') & (bsmt_data.BsmtFinType1=='BLQ') & (bsmt_data.BsmtFinType2=='Unf')]\nsns.catplot(data=Missing_BsmtCond_rc2, x='BsmtCond', kind='count')","33718597":"Missing_BsmtCond_rc3=bsmt_data[(bsmt_data.BsmtQual=='TA') & (bsmt_data.BsmtExposure=='Av') & (bsmt_data.BsmtFinType1=='ALQ') & (bsmt_data.BsmtFinType2=='Unf')]\nsns.catplot(data=Missing_BsmtCond_rc3, x='BsmtCond', kind='count')","1aa42485":"# Replace NaN with TA, as per similar records\ndata.at[Missing_BsmtCond.index, 'BsmtCond'] = 'TA'","60b0eaa0":"Missing_BsmtQual = bsmt_data[(bsmt_data.BsmtQual.isna()) & (bsmt_data.BsmtCond.notna())]\nMissing_BsmtQual","af839d3d":"Missing_BsmtQual_rc1=bsmt_data[(bsmt_data.BsmtCond=='Fa') & (bsmt_data.BsmtExposure=='No') & (bsmt_data.BsmtFinType1=='Unf') & (bsmt_data.BsmtFinType2=='Unf')]\nMissing_BsmtQual_rc2=bsmt_data[(bsmt_data.BsmtCond=='TA') & (bsmt_data.BsmtExposure=='No') & (bsmt_data.BsmtFinType1=='Unf') & (bsmt_data.BsmtFinType2=='Unf')]\nsns.catplot(data=Missing_BsmtQual_rc1, x='BsmtQual', kind='count')\nsns.catplot(data=Missing_BsmtQual_rc2, x='BsmtQual', kind='count')","c8131860":"data.at[Missing_BsmtQual.index, 'BsmtQual'] = 'TA'","3fd25de2":"Misssing_BsmtFinType2 = bsmt_data[(bsmt_data.BsmtFinType2.isna()) & (bsmt_data.BsmtCond.notna())]\nMisssing_BsmtFinType2","d237cfdd":"Misssing_BsmtFinType2_rc1=bsmt_data[(bsmt_data.BsmtQual=='Gd') &(bsmt_data.BsmtCond=='TA') & \n              (bsmt_data.BsmtExposure=='No') & (bsmt_data.BsmtFinType1=='GLQ') \n              & (bsmt_data.BsmtUnfSF > 0) &(bsmt_data.BsmtFinSF2 > 0)&(bsmt_data.BsmtFinSF1 > 0)]\nsns.catplot(data=Misssing_BsmtFinType2_rc1, x='BsmtFinType2', kind='count')","80436741":"data.at[Misssing_BsmtFinType2.index, 'BsmtFinType2'] = 'ALQ'","f241b350":"Missing_BsmtFinSF1 = bsmt_data[bsmt_data.BsmtFinSF1.isna()]\nMissing_BsmtFinSF1","28c1272c":"Missing_BsmtFinSF2 = bsmt_data[bsmt_data.BsmtFinSF2.isna()]\nMissing_BsmtFinSF2","e54be51d":"Missing_BsmtFullBath = bsmt_data[bsmt_data.BsmtFullBath.isna()]\nMissing_BsmtFullBath","2a4293fa":"data.at[660, ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF','BsmtFullBath', 'BsmtHalfBath']] = 0.0\ndata.at[728, ['BsmtFullBath', 'BsmtHalfBath']] = 0.0","e4d6a5b1":"# Replace other missing values with 'NA'\nBsmtNA = bsmt_data[bsmt_data.BsmtQual.isna()]\ndata.at[BsmtNA.index, bsmt_fts] = 'NA'","bb9411d6":"masVnr_features = ['MasVnrType', 'MasVnrArea']\nmasVnr_intd_fets = masVnr_features + ['Exterior1st','Exterior2nd','Foundation', 'RoofMatl','SalePrice']\nmasVnr = data[masVnr_intd_fets]","11d82443":"missing_masVnr = masVnr[(masVnr.MasVnrType.isna()) & (masVnr.MasVnrArea.notna())]\nmissing_masVnr","e90875a2":"# Lets get records similar to our **missing_masVnr** record\nMasVnrType_samples = masVnr[(masVnr.Exterior1st=='Plywood') &  \n                            (masVnr.MasVnrArea > 0) & (masVnr.Foundation=='CBlock') \n                            & (masVnr.RoofMatl=='CompShg') & masVnr.MasVnrArea.between(190,220)]\nsns.catplot(data=MasVnrType_samples, x='MasVnrType', kind='count')","05045095":"data.at[1150, 'MasVnrType'] = 'BrkFace'","1afd209c":"# Lets replace other missing values with None\nact_missing_masvnr = masVnr[masVnr.MasVnrType.isna()]\ndata.at[act_missing_masvnr.index, masVnr_features] = ['None', 0.0]","5dcabed4":"ms_features = ['MSSubClass', 'MSZoning']\nms_intd_features = ms_features + ['Street','Neighborhood','BldgType','HouseStyle','YearBuilt','RoofStyle','BsmtQual','Foundation','SalePrice']\nms_data = data[ms_intd_features]","9451bf8d":"ms_data[ms_data.MSZoning.isna()]","17f2fb38":"ms_data[(ms_data.Street == 'Pave') & (ms_data.MSSubClass == 20) & (ms_data.HouseStyle.isin(['1Story', '2.5Unf'])) & (ms_data.Neighborhood=='Mitchel') \n      & (ms_data.BldgType=='1Fam')  & (ms_data.YearBuilt.between(1900, 1955, inclusive=True))]","40848ed3":"ms_data[(ms_data.YearBuilt==1900) & (ms_data.BldgType=='1Fam') & (ms_data.Neighborhood=='IDOTRR')]","2c85f619":"idx, val = [455, 756, 790, 1444], ['C (all)', 'C (all)', 'RM', 'RL']\nfor i, v in (zip(idx, val)):\n  data.at[i, 'MSZoning'] = v","9d42dd64":"func_features = ['Functional']\nfunc_intd_features = func_features + ['Utilities','Street','Neighborhood','BldgType','HouseStyle','YearBuilt','RoofStyle','BsmtQual','Foundation','SalePrice']\nfunc_data = data[func_intd_features]\nmissing_func = func_data[func_data.Functional.isna()]\nmissing_func","acf54803":"sns.catplot(data=func_data, x='Functional', kind='count')","81471cd7":"# replace missing values with Typ\ndata.at[missing_func.index, 'Functional'] = 'Typ'","92b8443c":"sns.catplot(data=data, x='Utilities', kind='count')","1f2f7cc0":"data[data.Utilities=='NoSeWa'].shape","c591c4ec":"data.at[data[data.Utilities.isna()].index,'Utilities'] = 'AllPub'","d5c6eb7e":"sns.catplot(data=data, x='SaleType', kind='count')","a88d23af":"data.at[data[data.SaleType.isna()].index, 'SaleType'] = 'WD'","720e620e":"sns.catplot(data=data, x='Electrical', kind='count')","332af510":"data.at[data[data.Electrical.isna()].index, 'Electrical'] = 'SBrkr'","d8bf3c33":"kit_fe = ['KitchenAbvGr', 'KitchenQual']\nmiss_kit = data[data.KitchenQual.isna()]\nmiss_kit[kit_fe]","6cb594ef":"# find out the max kitchnQual for kitchenAbvGr == 1 and replace the NaN with that value\nsns.catplot(data=data[data.KitchenAbvGr==1], x='KitchenQual', kind='count')","f77876ce":"data.at[miss_kit.index, 'KitchenQual'] = 'TA'","6ab4148d":"ext_feat = ['Exterior1st', 'Exterior2nd']\next_int_feat = ext_feat + ['ExterQual','MasVnrType','SalePrice']\next_data = data[ext_int_feat]","01017f17":"data[ext_data.Exterior1st.isna()]","1564a77b":"# Check other records with similar feature values and find out which Exterior is used most and replace the missing value\nrecs=data[(data.Neighborhood=='Edwards') & (data.BldgType=='1Fam') & \n          (data.HouseStyle=='1Story') & (data.MasVnrType=='None') &\n           (data.Foundation=='PConc')]\nsns.catplot(data=recs, x='Exterior1st', kind='count')\nsns.catplot(data=recs, x='Exterior2nd', kind='count')","55e9b594":"# replace the missing value with VinylSd\ndata.at[691, ['Exterior1st', 'Exterior2nd']] = 'VinylSd'","66e26667":"get_features_with_missing_data(data)","1b1c64ca":"cured_test_data = data[data.SalePrice.isna()]\ncured_test_data.to_csv(cured_test_data_path, index=False)\ncured_train_data = data[data.SalePrice.notna()]\ncured_train_data.to_csv(cured_train_data_path, index=False)\nf'Train Data: {cured_train_data.shape} | Test Data: {cured_test_data.shape}'","486ac01f":"We can see that PoolQC etries are distributed between Ex, Fa, Gd category but not on TA category. Since we dono the QC of the pool and TA category is missing, lets replace the missing PoolQC value for the records which has PoolArea with TA.","2ff9488c":"### SaleType","139dd353":"## Handle Missing Data\nAs seen in the above output, there are multiple fields which are missing values.\n\nSome fields are allowed to have NA \/ None as value. So any categorical field which has NaN should be checked with related features before replacing them with NA \/ None according to the description file.","bb78efe6":"### FireplaceQu\nThis feature can be 'NA' for house that does not have any Fireplace, Lets corss check this with Fireplaces feature, If Fireplaces is > 0 then FireplaceQA cannot be NaN. If so, have to anaylse and fix it else replace NaN with 'NA'.","78c67e91":"Records similar to #455 shows that it belongs to C (all)\n\nRecords similar to #756 shows that it belongs to C (all)\n\nRecords similar to #790 shows that it belongs to RM\n\nRecords similar to #1444 shows that it belongs to RL","99c3035e":"We have replaced the NaN with 'Gar2' for 1089 record. Now we can replace all other NaN with 'NA'","c3cd31df":"## Save Data","9deb364d":"## Libraries Required","d5fc207d":"Above plot shows that other similar records with MasVnrType avaialble has **BrkFace** as the only value. so lets replace our missing value with BrkFace","ead8a858":"### PoolQC\nLets Analyse PoolQC missing Values. Note that Pool may not be available for some houses in that case PoolQC value should be 'NA'. In data any NaN in PoolQC with PoolArea == 0 can be considered as house with No Pool and hence replace them with 'NA'","43bcc41c":"### Exterior","434d7b84":"Only one record has NoSeWa and all other have AllPub as value for utilities feature, so lets replace the missing value with AllPub","13a6a38e":"### LotFrontage\nLinear feet of street connected to property. Lets replace the missing value with median of LotFrontage.","80fc56d5":"## Features with Missing Data","66f5d4a1":"### Basemet\nFollowing are the list of features which have missing values in them. Some features have lesser missing values when compared to other feature.\n\nLets compare the missing features amoung them to find out the records which have missing fields and fix them first.\n\nLater we can replace all NaN with 'NA'\n\n1. BsmtExposure : 82\n2. BsmtCond : 82\n3. BsmtQual : 81\n4. BsmtFinType2 : 80\n5. BsmtFinType1 : 79\n6. BsmtFinSF1 : 1\n7. BsmtFinSF2 : 1\n","fd87d25d":"### Garage\nIn this Section lets analyse and understand the contribution of Garage features for SalePrice","6c7efc86":"All Missing values have been handled by now. Only field which has missing value is SalePrice which is expected as the belong test data.","6de828b8":"### MSZoning","b17ae397":"### Alley\nDiscription says that Alley can be 'NA' for house that does not have Alley, so lets simply replace NaN with 'NA'","0638d1f3":"### Fence\nDiscription says that Fence can be 'NA' for house that does not have Fence, so lets simply replace NaN with 'NA'.","df3d8bca":"Its clear that Gar2 Feature has value greater than 15000. So we can map Gar2 for the record with missing MiscFeature which has MiscVal.","03fb54e6":"### Electrical","08ba292a":"## Data Path","3cd59ab8":"### Utilities","092a3731":"From the plot we can see that 50% quartile falls around ~68. the same is verified by computing the mean and median. Lets replace the missing value with median.","f416aee2":"We have one record that has MiscVal but MiscFeature and SalePrice is missing. Since this is the only record, we can simply find out the MiscFeature that has MiscVal greater than 15000 and map that Feature to this record.","c9a23cf4":"Record 728 is the one which is missing both BsmtFullBath & BsmtHalfBath, simply replace it with 0","8a3607e8":"### MasVnr\n\nFollowing are the list of features with missing values.\n\n1. MasVnrType : 24\n2. MasVnrArea : 23","a796c5bb":"### Functional","385174ab":"Both Missing BsmtFinSF1 & BsmtFinSF2 belong to same record, simply replace it with 0","bae4057e":"### MiscFeature\nLets analyse MiscFeature Missing Values. Here, this feature is allowed to have NA. So if not MiscVal is > 0 and MiscFeature is NaN, then we can fill the NaN with 'NA'","5acbf249":"## Initializers\nLets read the data, do some initial level stuffs. Lets concat train and test data for preprocessing and analysis purpose"}}