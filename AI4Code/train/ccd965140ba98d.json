{"cell_type":{"4ae49d81":"code","2ff7ce09":"code","6b692e55":"code","fc6dbd5f":"code","89583477":"code","b20d3372":"code","1a8bfa02":"code","61a47e4b":"code","cfaf699f":"code","58877fde":"code","222ce52e":"markdown","ef5f1a34":"markdown","8cad3932":"markdown","6e6f5a7e":"markdown","543fcda4":"markdown","3cda06d0":"markdown"},"source":{"4ae49d81":"# WE do need opensmile obviously\n!pip install opensmile","2ff7ce09":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport opensmile\nimport IPython\nimport os\n# to import data, add it at the dropdown right hand side menu\n# and then find it at your input folder (or sync a github folder)\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n%matplotlib inline\nimport matplotlib.pyplot as plt","6b692e55":"# Example how to make a local file available for download\n!echo \"hello handsome\" > test.txt\n# make it available for download\nfrom IPython.display import FileLink\nFileLink(r'test.txt')","fc6dbd5f":"# Here is a test wave file that i recorded\ntestfp = '\/kaggle\/input\/testdata\/testsatz.wav'\nIPython.display.Audio(testfp)","89583477":"smile = opensmile.Smile(\n    feature_set=opensmile.FeatureSet.GeMAPSv01b,\n    feature_level=opensmile.FeatureLevel.LowLevelDescriptors,\n)","b20d3372":"# Extact this for our test sentence, out comes a pandas dataframe\nresult_df = smile.process_file(testfp)\nprint(result_df.shape)","1a8bfa02":"# Now us only the three center formant frequencies\ncenterformantfreqs = ['F1frequency_sma3nz', 'F2frequency_sma3nz', 'F3frequency_sma3nz']\nformant_df = result_df[centerformantfreqs]\nformant_df.head()","61a47e4b":"# An opensmile config is a text file:\nformant_conf_str = '''\n[componentInstances:cComponentManager]\ninstance[dataMemory].type=cDataMemory\n\n;;; default source\n[componentInstances:cComponentManager]\ninstance[dataMemory].type=cDataMemory\n\n;;; source\n\n\\{\\cm[source{?}:include external source]}\n\n;;; main section\n\n[componentInstances:cComponentManager]\ninstance[framer].type = cFramer\ninstance[win].type = cWindower\ninstance[fft].type = cTransformFFT\ninstance[resamp].type = cSpecResample\ninstance[lpc].type = cLpc\ninstance[formant].type = cFormantLpc\n\n[framer:cFramer]\nreader.dmLevel = wave\nwriter.dmLevel = frames\ncopyInputName = 1\nframeMode = fixed\nframeSize = 0.025000\nframeStep = 0.010000\nframeCenterSpecial = left\nnoPostEOIprocessing = 1\n\n[win:cWindower]\nreader.dmLevel=frames\nwriter.dmLevel=win\nwinFunc=gauss\ngain=1.0\n\n[fft:cTransformFFT]\nreader.dmLevel=win\nwriter.dmLevel=fft\n\n[resamp:cSpecResample]\nreader.dmLevel=fft\nwriter.dmLevel=outpR\ntargetFs = 11000\n\n[lpc:cLpc]\nreader.dmLevel=outpR\nwriter.dmLevel=lpc\np=11\nmethod=acf\nlpGain=1\nsaveLPCoeff=1\nresidual=0\nforwardFilter=0\nlpSpectrum=0\nlpSpecBins=128\n\n[formant:cFormantLpc]\nreader.dmLevel=lpc\nwriter.dmLevel=formant\nsaveIntensity=1\nsaveBandwidths=0\nmaxF=5500.0\nminF=50.0\nnFormants=3\nuseLpSpec=0\nmedianFilter=0\noctaveCorrection=0\n\n;;; sink\n\n\\{\\cm[sink{?}:include external sink]}\n'''\nwith open('formant.conf', 'w') as fp:\n    fp.write(formant_conf_str)","cfaf699f":"# Now we reinstatiate or smile object with the custom config\nsmile = opensmile.Smile(\n    feature_set='formant.conf',\n    feature_level='formant',\n)","58877fde":"# and extract again\nformant_df_2 = smile.process_file(testfp)\nformant_df_2.head()","222ce52e":"We start with instantiating the main extractor class, Smile, with a configuration that includes formants.\n\nThe GeMAPSv01b features set has been derived from the [GeMAPS feature set](https:\/\/ieeexplore.ieee.org\/document\/7160715)","ef5f1a34":"# Example how to extract acoustic features with opensmile","8cad3932":"### 1) Use an existing config file that includes the first threr formant frequencies**","6e6f5a7e":"### General procedure\nThere are two ways to extract a specific acoustic feature with opensmile:\n1. Use an existing config that contains you target feature and filter it from the results\n2. Write your own config file and extract only your target feature directly\n\nMethod 1 is easier but obviously not resource efficient, 2 is better but then to learn the opensmile config syntax and all the existing modules is not trivial.\n\nUsing one example for an acoustic feature: formants, we'll do both ways.\nThe [documentation for the python wrapper of opensmile is here](https:\/\/audeering.github.io\/opensmile-python\/index.html)","543fcda4":"### 2) Write your own config file\n* The documentation for [opensmile config files is actually here](https:\/\/audeering.github.io\/opensmile\/reference.html#configuration-files)\n* It's sometimes easier to look at an existing config file and copy\/paste the components","3cda06d0":"### set up"}}