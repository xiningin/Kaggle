{"cell_type":{"47ef31b8":"code","f170f3a5":"code","24b0cc8f":"code","2cbeddc8":"code","652e2456":"code","e8b2b7b8":"code","d7203563":"code","150ab929":"code","6c5abe41":"code","e637eee5":"code","d77be6c1":"code","ce2097a2":"code","3a3f2b49":"code","998cda25":"code","c1172a1f":"code","6e3da480":"code","cd7a1800":"code","0fb227d5":"code","3e00e156":"code","fa00325d":"code","bddb89a6":"code","7a401878":"code","3780b18d":"code","49660d61":"code","f9b2dc30":"code","d4f242a3":"code","ca1df787":"code","e8627f27":"code","f6480db5":"code","faf97b75":"code","c57c2427":"code","9a65b60a":"code","3fcee139":"code","0c8ebfd4":"code","c20fcd89":"code","3c65c608":"code","ea21c8d8":"code","3c990032":"code","849d9ce9":"code","58a31c13":"code","b1ec7878":"code","1cac0142":"markdown"},"source":{"47ef31b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom fastai.vision import *\nfrom sklearn.model_selection import StratifiedShuffleSplit\n# Any results you write to the current directory are saved as output.\nimport warnings\nwarnings.simplefilter(\"ignore\")\n","f170f3a5":"from pathlib import Path\npath=Path('..\/input')\ndf_trn=pd.read_csv(path\/'X_train.csv')\ndf_label=pd.read_csv(path\/'y_train.csv')\ndf_test=pd.read_csv(path\/'X_test.csv')\n","24b0cc8f":"df_all=pd.concat([df_trn,df_test])\ndf_all['train']=['train']*len(df_trn)+['test']*len(df_test)","2cbeddc8":"df_all.columns","652e2456":"import seaborn as sns","e8b2b7b8":"sns.pairplot(df_all.sample(frac=0.1),hue='train',vars=['orientation_X','orientation_Y','orientation_Z','orientation_W'])","d7203563":"sns.pairplot(df_all.sample(frac=0.1),hue='train',vars=['angular_velocity_X', 'angular_velocity_Y', 'angular_velocity_Z'])","150ab929":"sns.pairplot(df_all.sample(frac=0.1),hue='train',vars=['linear_acceleration_X', 'linear_acceleration_Y', 'linear_acceleration_Z'])","6c5abe41":"cols=['linear_acceleration_X','linear_acceleration_Y','linear_acceleration_Z']\nfor col in cols:\n\n    df_trn[col]=(df_trn[col])\/(85)\n    df_test[col]=(df_test[col])\/(85)\ncols=['orientation_X','orientation_Y','orientation_Z','orientation_W','angular_velocity_X', 'angular_velocity_Y', 'angular_velocity_Z','linear_acceleration_X','linear_acceleration_Y','linear_acceleration_Z']\n","e637eee5":"test_list=df_test.groupby('series_id')\ntrain_list=df_trn.groupby('series_id')","d77be6c1":"def open_image(self,i):\n    mn=(np.hstack([self.items[i][1]['measurement_number'][:,None] for j in range(8)])-64)\/256\n    #mn=np.zeros_like(mn)\n    feats=np.hstack([self.items[i][1][cols] for j in range(6)])\n    feats_mean=(feats-feats.mean())\/feats.std()\n    img= np.append(np.append(feats,mn,axis=1),feats_mean,axis=1)\n    img=np.stack([img,img.T,img[::-1,::-1]],axis=2)\n    return pil2tensor(img,np.float32)","ce2097a2":"def get(self,i):\n    return tensor(np.append((self.items[i][1]['measurement_number'][:,None].astype(np.float32)-64)\/512,self.items[i][1][cols].values.astype(np.float32),axis=1))","3a3f2b49":"ItemList.get=get","998cda25":"src=(ItemList(df_trn.groupby('series_id'),inner_df=df_label).split_by_rand_pct(0.2).label_from_df(cols='surface'))\nsrc.add_test(test_list,label='concrete');\ndata=src.databunch(bs=32)\n","c1172a1f":"x,y=data.one_batch()","6e3da480":"x.shape\n","cd7a1800":"plt.pcolor(to_np(x)[5,:,:])\nplt.colorbar()","0fb227d5":"class LSTMClassifier(nn.Module):\n\n    def __init__(self, in_dim, hidden_dim, num_layers, dropout, bidirectional, num_classes, batch_size):\n        super(LSTMClassifier, self).__init__()\n        self.in_dim = in_dim\n        self.hidden_dim = hidden_dim\n        self.batch_size = batch_size\n        self.bidirectional = bidirectional\n        self.num_dir = 2 if bidirectional else 1\n        self.num_layers = num_layers\n        self.dropout = dropout\n\n        self.lstm = nn.LSTM(input_size=self.in_dim, hidden_size=self.hidden_dim, num_layers=self.num_layers, dropout=self.dropout, bidirectional=self.bidirectional,\n                            batch_first=True)\n        self.gru = nn.GRU(self.hidden_dim * 2, self.hidden_dim, bidirectional=self.bidirectional, batch_first=True)\n\n        self.fc = nn.Sequential(\n            nn.Linear(2048, hidden_dim),\n            nn.ReLU(True),\n            nn.Dropout(p=dropout),\n            nn.Linear(hidden_dim, num_classes),\n        )\n\n    def forward(self, x):\n\n        lstm_out, _ = self.lstm(x)\n        gru_out, _ = self.gru(lstm_out)\n        avg_pool_l = torch.mean(lstm_out, 1)\n        max_pool_l, _ = torch.max(lstm_out, 1)\n        \n        avg_pool_g = torch.mean(gru_out, 1)\n        max_pool_g, _ = torch.max(gru_out, 1)\n        x = torch.cat((avg_pool_g, max_pool_g, avg_pool_l, max_pool_l), 1)\n        y = self.fc(x)\n        return y","3e00e156":"model = LSTMClassifier(11, 256, 2, 0.2, True, 9, 32)\n\nlearn=Learner(data,model,metrics=accuracy)\n\nlearn.lr_find(num_it=200)\n\nlearn.recorder.plot()\n\n","fa00325d":"df_sub=pd.read_csv(path\/'sample_submission.csv')","bddb89a6":"X=list(df_trn.groupby('series_id').indices.keys())\nlabel,group=df_label.set_index('series_id').loc[df_trn.groupby('series_id').indices.keys(),'surface'],df_label.set_index('series_id').loc[df_trn.groupby('series_id').indices.keys(),'group_id']\n","7a401878":"src_list=ItemList(df_trn.groupby('series_id'),inner_df=df_label)\n#for i,(idx_train,idx_val) in enumerate(sss.split(np.unique(df_trn.series_id), df_label.surface)):\nfrom sklearn.model_selection import StratifiedShuffleSplit\nsss = StratifiedShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\nsss.get_n_splits(X, label,group)","3780b18d":"idx_trn,idx_val=next(sss.split(X, label,group))","49660d61":"len(idx_trn),len(idx_val)","f9b2dc30":"def accuracy_mult(input:Tensor, targs:Tensor)->Rank0Tensor:\n    \"Compute accuracy with `targs` when `input` is bs * n_classes.\"\n    n = targs.shape[0]\n    input = input.argmax(dim=-1).view(n,-1)\n    targs = targs.argmax(dim=-1).view(n,-1).long()\n    return (input==targs).float().mean()","d4f242a3":"target_probs=[]","ca1df787":"for i,(idx_train,idx_val) in enumerate(sss.split(X, label,group)):\n    src=(src_list.split_by_idxs(idx_train,idx_val).label_from_df(cols='surface'))\n    src.add_test(test_list);\n    data=src.databunch(bs=32)\n    model = LSTMClassifier(11, 256, 2, 0.2, True, 9, 32)\n    learn=Learner(data,model,metrics=accuracy)\n\n    learn.fit_one_cycle(20,1e-3)\n    learn.recorder.plot_losses()\n    learn.recorder.plot_metrics()\n    x,y=learn.get_preds(ds_type=DatasetType.Test)\n    target_probs.append(x)\n    ","e8627f27":"preds,y,losses = learn.get_preds(with_loss=True)\ninterp = ClassificationInterpretation(learn, preds, y, losses)","f6480db5":"interp.plot_confusion_matrix(figsize=(16,9))","faf97b75":"np.unique(df_label.surface,return_counts=True)","c57c2427":"target_probs_stacked=np.stack(target_probs,axis=2)\ntarget_probs_stacked","9a65b60a":"x=(target_probs_stacked).mean(axis=2)\ndf_sub['mean']=[learn.data.classes[idx] for idx in np.argmax(x,axis=1)]","3fcee139":"x=np.median((target_probs_stacked),axis=2)\ndf_sub['median']=[learn.data.classes[idx] for idx in np.argmax(x,axis=1)]","0c8ebfd4":"x=(target_probs_stacked).max(axis=2)\ndf_sub['max']=[learn.data.classes[idx] for idx in np.argmax(x,axis=1)]","c20fcd89":"x=target_probs_stacked[(target_probs_stacked<target_probs_stacked.max(axis=2)[:,:,None])&(target_probs_stacked>target_probs_stacked.min(axis=2)[:,:,None])].reshape(list(target_probs_stacked.shape[0:2])+[3])","3c65c608":"x=x.mean(axis=2)","ea21c8d8":"df_sub['truncated']=[learn.data.classes[idx] for idx in np.argmax(x,axis=1)]","3c990032":"df_sub=df_sub.drop(columns='surface')","849d9ce9":"df_sub=df_sub.set_index('series_id')","58a31c13":"df_sub['mean'].to_csv('mean.csv',header=['surface'])\ndf_sub['median'].to_csv('median.csv',header=['surface'])\ndf_sub['max'].to_csv('max.csv',header=['surface'])\ndf_sub['truncated'].to_csv('truncated.csv',header=['surface'])","b1ec7878":"for i in range(5):\n    df_sub[f'sub_{i}']=[learn.data.classes[idx] for idx in np.argmax(target_probs_stacked[:,:,i],axis=1)]\n    df_sub[f'sub_{i}'].to_csv(f'sub{i}.csv',header=['surface'])\n","1cac0142":"# Mean"}}