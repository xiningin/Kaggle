{"cell_type":{"da1ab8c9":"code","ac9c1bfe":"code","89dcca8e":"code","d224882f":"code","9b2a4e7c":"code","8ed1eb47":"code","a48a3214":"code","6272ca3c":"code","a499c3a0":"code","7014958d":"code","f1bf9858":"code","20d21b55":"code","4287cda1":"code","065a4998":"code","434d03e9":"code","d4af59cf":"code","61d6b6dd":"code","16735a80":"code","e7a0d6ee":"code","230ceb88":"code","518e5246":"code","14e5b117":"code","bb59ae14":"code","b801d40e":"code","941ed160":"code","31d60f88":"code","d916c01d":"code","fe45a3b9":"code","104f3a38":"code","93f0fc72":"code","c0b43122":"code","1d6dd98f":"code","73ce569e":"code","924d748f":"code","d74d588b":"code","87d17842":"code","d0497211":"code","4b599a22":"code","2fae7bba":"code","384c1113":"code","19603ff0":"code","a47b9545":"code","00487951":"markdown","069cb1f4":"markdown","f6653014":"markdown","e6c98f8a":"markdown","1815e75e":"markdown","525808d4":"markdown","081ce8a7":"markdown","fd8b517b":"markdown","40854073":"markdown","18b8274f":"markdown","84056657":"markdown"},"source":{"da1ab8c9":"import pandas as pd\nimport numpy as np\nfrom wordcloud import WordCloud, STOPWORDS \nimport datetime\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport plotly.graph_objects as go\nfrom geopy.geocoders import Nominatim\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc\nfrom sklearn.ensemble import RandomForestClassifier\npd.set_option('display.max_columns',50)\npd.set_option('display.max_rows',1000)\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ac9c1bfe":"df=pd.read_csv('\/kaggle\/input\/us-accidents\/US_Accidents_June20.csv') #,nrows=10000)\nredunCol=['ID','Source','End_Lat','End_Lng','Number','Street','Zipcode','Country','Weather_Timestamp'\n            ,'Airport_Code','Astronomical_Twilight','Civil_Twilight','Nautical_Twilight']\ndf=df.drop(redunCol,axis=1)\ndf","89dcca8e":"words=''\nfor item in df['Description']:\n    words+=' ' +str(item)\nstopwords = set(STOPWORDS)\nwords=words.upper()","d224882f":"wordcloud = WordCloud(max_words=2000, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size =5).generate(words) ","9b2a4e7c":"# plot the WordCloud image                        \nplt.figure(figsize = (10, 10), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0)\nplt.show()","8ed1eb47":"stacked_data=[]\nfor i in range(4):\n    temp=[0,0,0,0]\n    stacked_data.append(temp)\n    \nfor i in df.index:\n    if df.loc[i,'Severity']>=1 and df.loc[i,'Severity']<=4:\n        if str(df.loc[i,'Traffic_Calming'])=='False' and str(df.loc[i,'Traffic_Signal'])=='True':\n            stacked_data[0][df.loc[i,'Severity']-1]+=1\n        elif str(df.loc[i,'Traffic_Calming'])=='True' and str(df.loc[i,'Traffic_Signal'])=='False':\n            stacked_data[1][df.loc[i,'Severity']-1]+=1\n        elif str(df.loc[i,'Traffic_Calming'])=='True' and str(df.loc[i,'Traffic_Signal'])=='True':\n            stacked_data[2][df.loc[i,'Severity']-1]+=1\n        else:\n            stacked_data[3][df.loc[i,'Severity']-1]+=1\n\nx=['1','2','3','4']\nplt.bar(x,stacked_data[0],0.4,label=\"traffic calming was not there but there was traffic signal\")\nplt.bar(x,stacked_data[1],0.4,bottom=stacked_data[0],label=\"traffic calming was there but no traffic signal\")\nbottom_1=list(np.add(stacked_data[0],stacked_data[1]))\nplt.bar(x,stacked_data[2],0.4,bottom=bottom_1,label=\"traffic calming was there and there was traffic signal\")\nbottom_2=list(np.add(bottom_1,stacked_data[2]))\nplt.bar(x,stacked_data[3],0.4,bottom=bottom_2,label=\"neither of them were present\")\nplt.rcParams[\"figure.figsize\"] = (15, 8)\nplt.title(\"Number of Accidents vs Severity number\")\nplt.xlabel(\"Severity number\")\nplt.ylabel(\"Number of accidents\")\nplt.legend()\nplt.show()","a48a3214":"state_count_acc = pd.value_counts(df['State'])\n\nfig = go.Figure(data=go.Choropleth(\n    locations=state_count_acc.index,\n    z = state_count_acc.values.astype(float),\n    locationmode = 'USA-states',\n    colorscale = 'Reds',\n    colorbar_title = \"Count Accidents\",\n))\n\nfig.update_layout(\n    title_text = '2016 - 2019 US Traffic Accident Dataset by State',\n    geo_scope='usa',\n)\n\nfig.show()","6272ca3c":"df1 = df.sample(n=10000)\nimport plotly.graph_objects as go\nfrom geopy.geocoders import Nominatim\ncities = {}\nstate = []\nlat_1 = []\nlon_1 = []\nfor ind in df1.index:\n    city = df1['City'][ind]\n    state_1 = df1['State'][ind]\n    if city in cities:\n        cities[city] +=1\n    else:\n        cities[city] = 1\n        state.append(state_1)\n        lat_1.append(df1['Start_Lat'][ind])\n        lon_1.append(df1['Start_Lng'][ind])\n","a499c3a0":"city_count = []\ncity_name = []\nfor city in cities:\n    city_count.append(cities[city])\n    city_name.append(city)\n \ndata1 = {'City':city_name}\ndata = pd.DataFrame(data1)  \ndata['State']= state\ndata['Accident_count'] = city_count\ndata['Longitude'] = lon_1\ndata['Latitude'] = lat_1\n# Observe the result  \ndata","7014958d":"root = []\nacc = []\nfor i in data.index:\n    root.append(math.sqrt(data['Accident_count'][i]))\n    acc.append(str(data['City'][i])+', Accidents: '+ str(data['Accident_count'][i]))\nprint(root,acc)","f1bf9858":"fig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data['Longitude'],\n        lat = data['Latitude'],\n        text = acc,\n        mode = 'markers',\n        marker = dict(\n            size = root,#data['Accident_count']\/sum(data['Accident_count']),\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = True,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(255,0,0)'\n            ),\n           \n        )))\n\nfig.update_layout(\n        title = 'Accidents in Cities',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(255,218,185)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()\n","20d21b55":"data_sever = df[['Start_Lng','Start_Lat','City','Visibility(mi)','Severity']].copy()\ndata_sever.dropna(inplace=True)\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data_sever['Start_Lng'],\n        lat = data_sever['Start_Lat'],\n        text = data_sever['City'],\n        mode = 'markers',\n        marker = dict(\n            size = data_sever['Visibility(mi)'],\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = data_sever['Severity'].max(),\n        color = data_sever['Severity'],\n        cmax = 1,\n            colorbar_title=\"Severity\"\n        )))\n\nfig.update_layout(\n        title = 'Severity & Visibility of accidents',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()","4287cda1":"data_sever = df.sample(n=10000)[['Start_Lng','Start_Lat','City','Visibility(mi)','Severity']]\ndata_sever.dropna(inplace=True)\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data_sever['Start_Lng'],\n        lat = data_sever['Start_Lat'],\n        text = data_sever['City'],\n        mode = 'markers',\n        marker = dict(\n            size = data_sever['Visibility(mi)'],\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Blues',\n            cmin = data_sever['Severity'].max(),\n        color = data_sever['Severity'],\n        cmax = 1,\n            colorbar_title=\"Severity\"\n        )))\n\nfig.update_layout(\n        title = 'Severity & Visibility of accidents',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(211,211,211)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()","065a4998":"df['Start_Time'] = pd.to_datetime(df['Start_Time'])\ndf['End_Time']=pd.to_datetime(df['End_Time'])\n#getting duration\ndf['Duration']=df['End_Time']-df['Start_Time']\n#adding duration in dataframe\n#df.insert(6,\"Duration\",df['duration'])\n#df.drop(['duration'],axis=1,inplace=True)\n#converting duration to seconds\ndf['Duration'] = df['Duration'].dt.total_seconds()\n\n#plotting scatter-plot\ndfs=df.sample(n=10000)\ndf1=dfs.loc[dfs['Severity']==1]\ndf2=dfs.loc[dfs['Severity']==2]\ndf3=dfs.loc[dfs['Severity']==3]\ndf4=dfs.loc[dfs['Severity']==4]\nx1=df1['Duration']\nx1=np.array(x1)\ny1=df1['Distance(mi)']\ny1=np.array(y1)\nx2=df2['Duration']\nx2=np.array(x2)\ny2=df2['Distance(mi)']\ny2=np.array(y2)\nx3=df3['Duration']\nx3=np.array(x3)\ny3=df3['Distance(mi)']\ny3=np.array(y3)\nx4=df4['Duration']\nx4=np.array(x4)\ny4=df4['Distance(mi)']\ny4=np.array(y4)\nplt.rcParams['figure.figsize'] = [20, 10]\nplt.rcParams.update({'font.size': 20})\np1=plt.scatter(x1, y1, c='cyan')\np2=plt.scatter(x2, y2, c='red')\np3=plt.scatter(x3,y3,c='green')\np4=plt.scatter(x4,y4,c='blue')\nplt.title('scatter plot of distance and severity vs duration')\nplt.xlabel('duration in seconds')\nplt.ylabel('distance')\nplt.legend((p1,p2,p3,p4),\n           ('severity 1','severity 2','severity 3','severity 4'),\n           scatterpoints=1,\n           loc='upper right',\n           ncol=1,\n           fontsize=10)\nplt.show()","434d03e9":"df['Start_Time']= pd.to_datetime(df['Start_Time'])\ndf['hour']= df['Start_Time'].dt.hour\ndf['year']= df['Start_Time'].dt.year\ndf['month']= df['Start_Time'].dt.month\ndf['week']= df['Start_Time'].dt.week\ndf['day']= df['Start_Time'].dt.day_name()\ndf['quarter']= df['Start_Time'].dt.quarter\ndf['time_zone']= df['Start_Time'].dt.tz\ndf['time']= df['Start_Time'].dt.time","d4af59cf":"plt.figure(figsize =(10,5))\ndf.groupby(['year']).size().sort_values(ascending=True).plot.bar()\n","61d6b6dd":"plt.figure(figsize =(15,5))\ndf.groupby(['month']).size().plot.bar()","16735a80":"plt.figure(figsize =(15,5))\ndf.groupby(['year', 'month']).size().plot.bar()\nplt.title('Number of accidents\/year')\nplt.ylabel('number of accidents')","e7a0d6ee":"plt.figure(figsize =(10,5))\ndf.groupby(['hour']).size().plot.bar()\nplt.title('At which hour of day accidents happen')\nplt.ylabel('count of accidents')","230ceb88":"df['day_zone'] = pd.cut((df['hour']),bins=(0,6,12,18,24), labels=[\"night\", \"morning\", \"afternoon\", \"evening\"])\nplt.figure(figsize =(10,5))\ndf.groupby(['day_zone']).size().plot.bar()","518e5246":"df.groupby(['day']).size().plot.bar()","14e5b117":"redunCol=['TMC','Start_Time','End_Time','Description','City','County','State','Timezone','Distance(mi)','Wind_Direction']\ndf=df.drop(redunCol,axis=1)","bb59ae14":"df.loc[df['Side']=='R','Side']=1 #Right side is 1\ndf.loc[df['Side']=='L','Side']=0 #Left side is \ndf.loc[df['Sunrise_Sunset']=='Day','Sunrise_Sunset']=0 #daytime is 0\ndf.loc[df['Sunrise_Sunset']=='Night','Sunrise_Sunset']=1 #nighttime is 1\ndf","b801d40e":"cols=df['Weather_Condition'].unique()\nfor col in cols:\n    df[col]=0\nfor col in cols:\n    for index,row_series in df.iterrows():\n        if(df.at[index,'Weather_Condition']==col):\n            df.at[index,col]=1","941ed160":"df","31d60f88":"del(df['Wind_Chill(F)'])\n","d916c01d":"df[\"Precipitation(in)\"].fillna(0, inplace = True)","fe45a3b9":"df['Wind_Speed(mph)'].fillna((df['Wind_Speed(mph)'].mean()), inplace = False)\ndf\n","104f3a38":"df = df.dropna()\n\n","93f0fc72":"del(df['Weather_Condition'])","c0b43122":"y = df['Severity'].copy()\ny","1d6dd98f":"x = df.drop(['Severity'], axis = 1)\nx","73ce569e":"x_train1, x_test, y_train1, y_test = train_test_split(x,y,test_size=0.1, random_state=42, shuffle=True)","924d748f":"x_train, x_validation, y_train, y_validation = train_test_split(x_train1,y_train1,test_size=0.167, random_state=42, shuffle=True)","d74d588b":"mask1 = (df['Severity'] == 1)\nmask2 = (df['Severity'] == 2)\nmask3 = (df['Severity'] == 3)\nmask4 = (df['Severity'] == 4)\n\nratio2 = len(df[mask2])\/(len(df[mask1])+len(df[mask2]))\nratio3 = len(df[mask3])\/(len(df[mask3])+len(df[mask4]))\n\nprint(ratio2,ratio3)","87d17842":"max = 0\nfor i in range(5,15):\n    severity_classifier = DecisionTreeClassifier(max_leaf_nodes=i, random_state=0)\n    severity_classifier.fit(x_train,y_train)\n    y_valid_pred = severity_classifier.predict(x_validation)\n    t = accuracy_score(y_valid_pred,y_validation)*100\n    if(t>max):\n        max = t\n        imax = i\n","d0497211":"severity_classifier = DecisionTreeClassifier(max_leaf_nodes=imax, random_state=0)\nseverity_classifier.fit(x_train,y_train)\ny_valid_pred = severity_classifier.predict(x_validation)\nt = accuracy_score(y_valid_pred,y_validation)*100\nt","4b599a22":"severity_classifier = DecisionTreeClassifier(max_leaf_nodes=imax, random_state=0)\nseverity_classifier.fit(x_train,y_train)\ny_pred = severity_classifier.predict(x_test)\nt = accuracy_score(y_pred,y_test)*100","2fae7bba":"t","384c1113":"imax","19603ff0":"rf = RandomForestClassifier(n_estimators=10)\nrf.fit(x_train,y_train)\ny_valid_pred = rf.predict(x_validation)\nrf.score(x_validation, y_validation)","a47b9545":"rf.score(x_test, y_test)","00487951":"# Data Cleaning for Modelling Data","069cb1f4":"## Word Cloud","f6653014":"# Importing Modules and configuring Notebook Settings","e6c98f8a":"4","1815e75e":"# Data Visualization","525808d4":"## Amber K Plots","081ce8a7":"3","fd8b517b":"# Loading Data","40854073":"1","18b8274f":"2","84056657":"Plot"}}