{"cell_type":{"e8b0f2e0":"code","dd2ae34c":"code","b8555fc9":"code","cc9262d1":"code","3f02762d":"code","0c5c824e":"code","f380627c":"code","1c646bdf":"code","30eb1780":"code","3e5d64c0":"code","c401cfc9":"code","f0d100c2":"code","2f88564e":"code","8f0622b4":"code","7880f72c":"code","120ebaf2":"code","bc44deb8":"code","860a9633":"code","9a942028":"code","04eae106":"code","75c7fe96":"code","1ce0031e":"code","0339e34a":"code","5dfc3fed":"code","8b8e274e":"code","d0e087bf":"code","d68a7305":"code","6cc037a4":"code","84c3a0be":"code","96084996":"code","9dbb7337":"code","9e6a3995":"markdown","4830a967":"markdown","b25a4f82":"markdown","cc8236cd":"markdown","8408c38e":"markdown","b9100f73":"markdown","3078dcee":"markdown","ac818c20":"markdown","eb59c100":"markdown","2de5286c":"markdown","82f2470d":"markdown","1ee20f56":"markdown","3f42237a":"markdown"},"source":{"e8b0f2e0":"# Install PyTorch Image Models package (TIMM)\n!pip install ..\/input\/timm031\/timm-0.3.1-py3-none-any.whl","dd2ae34c":"import numpy as np\nimport os\nimport pandas as pd\nimport time\n\nfrom fastai.vision.all import *","b8555fc9":"nb_start = time.time()","cc9262d1":"# Notebook variables\ndata_dir = Path('..\/input\/cassava-leaf-disease-classification')\nsample_fraction = 1\nseed = 999","3f02762d":"set_seed(seed)","0c5c824e":"# Read\ntrain_df = pd.read_csv(data_dir\/'train.csv')","f380627c":"# Process\ntrain_df = (train_df\n    .assign(path=train_df['image_id'].map(lambda x:data_dir\/'train_images'\/x))\n    .drop(columns=['image_id'])\n    .sample(frac=sample_fraction)\n    .reset_index(drop=True))","1c646bdf":"# Showcase\nprint(train_df.shape[0])\ntrain_df.head()","30eb1780":"from PIL import Image\n\nim = Image.open(train_df['path'][0])\nwidth, height = im.size\nprint(width,height)\nim","3e5d64c0":"# Create data loader\nitem_tfms = RandomResizedCrop(460, min_scale=0.75, ratio=(1.,1.))\nbatch_tfms = [*aug_transforms(size=224, max_warp=0), Normalize.from_stats(*imagenet_stats)]\nbs=32\n\ndls = ImageDataLoaders.from_df(\n    df=train_df,\n    valid_pct=0.2,\n    seed=seed,\n    label_col=0, # label is in the first column of the DataFrame\n    fn_col=1, # filename\/path is in the second column of the DataFrame\n    bs=bs, # pass in batch size\n    item_tfms=item_tfms, # pass in item_tfms\n    batch_tfms=batch_tfms) # pass in batch_tfms","c401cfc9":"# Showcase data loader\ndls.show_batch()","f0d100c2":"# Needed for making pretrained weights work without needing to find the default filename\n# EfficientNet-B3 model\nif not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n        os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n!cp '..\/input\/timmefficientnet\/tf_efficientnet_b3_ns-9d44bf68.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/tf_efficientnet_b3_ns-9d44bf68.pth'","2f88564e":"# Utilities\nfrom timm import create_model\nfrom fastai.vision.learner import _update_first_layer\n\n\ndef create_timm_body(arch:str, pretrained=True, cut=None, n_in=3):\n    \"Creates a body from any model in the `timm` library.\"\n    model = create_model(arch, pretrained=pretrained, num_classes=0, global_pool='')\n    _update_first_layer(model, n_in, pretrained)\n    if cut is None:\n        ll = list(enumerate(model.children()))\n        cut = next(i for i,o in reversed(ll) if has_pool_type(o))\n    if isinstance(cut, int): return nn.Sequential(*list(model.children())[:cut])\n    elif callable(cut): return cut(model)\n    else: raise NamedError(\"cut must be either integer or function\")\n\n        \ndef create_timm_model(arch:str, n_out, cut=None, pretrained=True, n_in=3, init=nn.init.kaiming_normal_, custom_head=None,\n                     concat_pool=True, **kwargs):\n    \"Create custom architecture using `arch`, `n_in` and `n_out` from the `timm` library\"\n    body = create_timm_body(arch, pretrained, None, n_in)\n    if custom_head is None:\n        nf = num_features_model(nn.Sequential(*body.children())) * (2 if concat_pool else 1)\n        head = create_head(nf, n_out, concat_pool=concat_pool, **kwargs)\n    else: head = custom_head\n    model = nn.Sequential(body, head)\n    if init is not None: apply_init(model[1], init)\n    return model\n\n\ndef timm_learner(dls, arch:str, loss_func=None, pretrained=True, cut=None, splitter=None,\n                y_range=None, config=None, n_out=None, normalize=True, **kwargs):\n    \"Build a convnet style learner from `dls` and `arch` using the `timm` library\"\n    if config is None: config = {}\n    if n_out is None: n_out = get_c(dls)\n    assert n_out, \"`n_out` is not defined, and could not be inferred from data, set `dls.c` or pass `n_out`\"\n    if y_range is None and 'y_range' in config: y_range = config.pop('y_range')\n    model = create_timm_model(arch, n_out, default_split, pretrained, y_range=y_range, **config)\n    learn = Learner(dls, model, loss_func=loss_func, splitter=default_split, **kwargs)\n    if pretrained: learn.freeze()\n    return learn","8f0622b4":"# Define learner\nlearn = timm_learner(\n    dls=dls, \n    arch='tf_efficientnet_b3_ns',\n    loss_func=LabelSmoothingCrossEntropy(),\n    opt_func=ranger,\n    metrics=[accuracy]\n).to_native_fp16()","7880f72c":"# # Find optimal learning rate for pre-trained model\n# start = time.time()\n# learn.lr_find()\n# print(\"{:.2f}min\".format(int(time.time() - start) \/ 60))","120ebaf2":"# Train frozen pretrained model for single epoch\nstart = time.time()\nlearn.freeze()\nlearn.fit_flat_cos(1, 10e-2, wd=0.5, cbs=[MixUp()])\nprint(\"{:.2f}min\".format(int(time.time() - start) \/ 60))","bc44deb8":"# Save stage-1 model\nlearn.save('stage-1')","860a9633":"# Read stage-1 model\nlearn = learn.load('stage-1')","9a942028":"# Validation loss \nlearn.recorder.plot_loss()","04eae106":"# # Find optimal learning rate for model\n# start = time.time()\n# learn.unfreeze()\n# learn.lr_find()\n# print(\"{:.2f}min\".format(int(time.time() - start) \/ 60))","75c7fe96":"start = time.time()\nlearn.unfreeze()\nlearn.fit_flat_cos(5, 2e-3,pct_start=0, cbs=[MixUp()])\nprint(\"{:.2f}min\".format(int(time.time() - start) \/ 60))","1ce0031e":"learn.recorder.plot_loss()","0339e34a":"learn.save('stage-2')","5dfc3fed":"# Plot confusion matrix\nlearn_32 = learn.to_native_fp32()\ninterp = ClassificationInterpretation.from_learner(learn_32)\ninterp.plot_confusion_matrix()","8b8e274e":"# Read sample dataset\nsample_df = pd.read_csv(data_dir\/'sample_submission.csv')\nsample_df.head()","d0e087bf":"# Create submission dataset\n_sample_df = sample_df.copy()\n_sample_df['path'] = _sample_df['image_id'].map(lambda x:data_dir\/'test_images'\/x)\n_sample_df = _sample_df.drop(columns=['image_id'])","d68a7305":"# Create test set data loader\ntest_dl = dls.test_dl(_sample_df)","6cc037a4":"# Showcase test set data loader\ntest_dl.show_batch()","84c3a0be":"# Create predictions\npreds, _ = learn.tta(dl=test_dl, n=8, beta=0)","96084996":"# Create and save submission file\nsample_df['label'] = preds.argmax(dim=-1).numpy()\nsample_df.to_csv('submission.csv',index=False)\nsample_df.head()","9dbb7337":"print(\"{:.2f}min\".format(int(time.time() - nb_start) \/ 60))","9e6a3995":"Based on [Notebook - Cassava classification - EDA & fastai starter](https:\/\/www.kaggle.com\/tanlikesmath\/cassava-classification-eda-fastai-starter)","4830a967":"# Data Loader","b25a4f82":"# Setup","cc8236cd":"# EDA","8408c38e":"## Train (Stage 2)\nTrain entire model for several epochs","b9100f73":"# Model Training","3078dcee":"# Preprocess","ac818c20":"# Submission","eb59c100":"# Analyze Model","2de5286c":"Functions from: [walkwithfastai - Utilizing the timm Library Inside of fastai](https:\/\/walkwithfastai.com\/vision.external.timm)","82f2470d":"## Setup","1ee20f56":"# Inference","3f42237a":"## Train (Stage 1)\nTrain frozen pre-trained model for single epoch "}}