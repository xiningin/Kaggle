{"cell_type":{"d8485bfa":"code","bbfdfb8d":"code","2eac53c6":"code","485b22b9":"code","1bdb86a9":"code","7856d69c":"code","aac68645":"code","75c03a75":"code","892b5948":"code","daf98ddb":"code","daa0e217":"code","361e88df":"code","a712cf08":"code","0257d4c0":"code","cd7ffe41":"code","c77c513b":"code","7efd763a":"code","56fcc2cc":"code","b29c3881":"code","8a59ab07":"code","af49881c":"code","4c833aac":"code","32a03eca":"code","2561d9d7":"code","5857fd02":"code","c68ad167":"code","25e2e689":"code","0f6fef40":"code","3175102c":"code","2c62085d":"markdown","f546d98f":"markdown","3fd70b9e":"markdown","a5698921":"markdown","4e4fa373":"markdown","64f55bda":"markdown","aa1a761c":"markdown"},"source":{"d8485bfa":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","bbfdfb8d":"#Modules for EDA\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n#Modules for ML\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom sklearn.metrics import classification_report,confusion_matrix\nplt.style.use('seaborn')\n%matplotlib inline","2eac53c6":"df = pd.read_csv('..\/input\/spotify-recommendation\/data.csv')\ndf.shape","485b22b9":"df.info()","1bdb86a9":"df.isna().sum()","7856d69c":"df.head()","aac68645":"df['liked'].value_counts().plot(kind='pie',autopct='%.2f',)\nplt.show()","75c03a75":"plt.figure(figsize=(15,15))\nsns.pairplot(data=df, hue='liked')\nplt.show()","892b5948":"std = StandardScaler()\nscalled = std.fit_transform(df.drop('liked',axis=1))","daf98ddb":"i = 0 \nfor column in df.columns[:-1]:\n    df[column] = scalled[:,i]\n    i += 1","daa0e217":"df.head()","361e88df":"x, y = df.drop('liked',axis=1),df['liked']\nx.shape, y.shape","a712cf08":"x_train,x_test,y_train,y_test = train_test_split(x, y, test_size=0.3, random_state=1)\nx_train.shape ,x_test.shape ,y_train.shape ,y_test.shape","0257d4c0":"y_train.value_counts()","cd7ffe41":"model = keras.Sequential([\n    keras.layers.Dense(13, input_shape=(13,), activation='relu'),\n    keras.layers.Dense(7, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid'),\n\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n    \n)","c77c513b":"model.fit(x_train, y_train, epochs=200) #Runned Twice","7efd763a":"model.evaluate(x_test, y_test)","56fcc2cc":"def predict(data):\n    pred = model.predict(data).flatten()\n    pred[pred >= 0.5] = 1\n    pred[pred < 0.5] = 0\n    return pred\n\ndef plot_cm(y_true,y_pred,title=None):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(10,10))\n    sns.heatmap(cm, annot=True, fmt='g',cmap='YlGnBu')\n    plt.title(title)\n    plt.show()","b29c3881":"y_pred_test = predict(x_test)\nplot_cm(y_test, y_pred_test)","8a59ab07":"print(classification_report(y_test, y_pred_test))","af49881c":"y_pred_train = predict(x_train)\nplot_cm(y_train, y_pred_train)","4c833aac":"print(classification_report(y_train, y_pred_train))","32a03eca":"!mkdir model\n!ls","2561d9d7":"model.save('model\/Spotify_model')","5857fd02":"!ls model\/\n!ls model\/Spotify_model","c68ad167":"df2 = pd.read_csv('..\/input\/spotify-recommendation\/data.csv')\n    \nstd2 = StandardScaler()\nstd2.fit(df2.drop('liked',axis=1))\nprint(std2.mean_)\nprint(std2.scale_)","25e2e689":"def new_predict(data):\n    #Data must be 2d Array\n    \n    model2 = keras.models.load_model('model\/Spotify_model')\n    #Make sure model is in same directory\n    \n    mean = np.array([ 6.36656410e-01,  6.38431487e-01,  5.49743590e+00, -9.48163077e+00,\n                      5.38461538e-01, 1.48957436e-01,  3.19093091e-01,  1.92337256e-01,\n                      1.48455385e-01,  4.93631795e-01,  1.21086174e+02,  2.13408933e+05,\n                      3.91282051e+00])\n    stddev =   np.array([2.16057827e-01, 2.59428046e-0, 3.40644090e+00, 6.0833346e+00,\n                         4.98518515e-01, 1.20104503e-01, 3.19958090e-01, 3.45337110e-01,\n                         1.05702467e-01, 2.67007774e-01, 2.80127239e+01, 7.19671489e+04,\n                         4.50173464e-01])\n    \n    scalled = (data - mean)\/stddev\n    predict_proba = model2.predict(scalled)[0][0]\n    predicted = predict_proba >= 0.5\n    if predicted:\n        print(\"You will Like this song\")\n        print(\"Probability to like this song:\",predict_proba)\n    else:\n        print(\"You will Dislike this song\")\n        print(\"Probability to like this song:\",predict_proba)","0f6fef40":"case1 = df2.loc[0][:-1]\nprint(\"data:\\n\",case1)\nprint('\\n')\nnew_predict([case1])","3175102c":"case2 = df2.loc[4][:-1]\nprint(\"data:\\n\",case2)\nprint('\\n')\nnew_predict([case2])","2c62085d":"# **Splitting and training data**","f546d98f":"# **Creating Predict Function to predict new data**","3fd70b9e":"# **Saving Model as file**","a5698921":"# **Feature Scaling**","4e4fa373":"# **Train Data Report**","64f55bda":"# **Test Data Report**","aa1a761c":"# **Model Building and predictions**"}}