{"cell_type":{"7223b0c2":"code","70f03f20":"code","634d1a29":"code","31b0bd99":"code","8966d097":"code","17107b76":"code","68bf3544":"code","5e2a6075":"code","f23d179d":"code","2ed57f8d":"code","e53f5a29":"code","adb6df7a":"code","2918eac4":"code","4ec3659c":"code","f10d5a50":"code","34ef1bb9":"markdown","ed992c59":"markdown","1565394d":"markdown"},"source":{"7223b0c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70f03f20":"import os\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport zipfile\nimport cv2\nimport tqdm\nimport matplotlib.pyplot as plt","634d1a29":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","31b0bd99":"TRAIN_ZIP = '..\/input\/recognizing-faces-in-the-wild\/train.zip'\nTEST_ZIP='..\/input\/recognizing-faces-in-the-wild\/test.zip'","8966d097":"print(\"unzipping train set\")\nwith zipfile.ZipFile(TRAIN_ZIP, 'r') as zip_ref:\n    zip_ref.extractall(\"..\/output\/kaggle\/working\/train\")\n\nprint(\"unzipping test set\")\nwith zipfile.ZipFile(TEST_ZIP, 'r') as zip_ref:\n    zip_ref.extractall(\"..\/output\/kaggle\/working\/test\")","17107b76":"train_rel_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/train_relationships.csv\")","68bf3544":"#F00002 is family 2\n#MID1 is individual 1 in a particular family\n#p1 and p2 are the family pairs to be compared to find a relationship\n\ntrain_rel_df.head()","5e2a6075":"train_rel_df.describe()","f23d179d":"train_rel_df.isnull().sum()","2ed57f8d":"train = !ls ..\/input\/train\/\nlen(train)","e53f5a29":"def findCustomImages(path):\n    images = []\n    for dirname, _, filenames in os.walk(path):\n        for filename in filenames:\n            images.append(os.path.join(dirname, filename))\n    \n    return images","adb6df7a":"root = \"..\/output\/kaggle\/working\/train\/\"\n\nsamples = []\nfor index, instance in train_rel_df.iterrows():\n    person1 = root+instance.p1\n    person2 = root+instance.p2\n    \n    person1_images = findCustomImages(person1)\n    person2_images = findCustomImages(person2)\n    \n    for i in person1_images:\n        for j in person2_images:\n            sample = []\n            sample.append(i)\n            sample.append(j)\n            samples.append(sample)","2918eac4":"train_rel_df = pd.DataFrame(samples, columns = [\"p1\", \"p2\"])","4ec3659c":"train_rel_df.head()","f10d5a50":"print(\"There are \",train_rel_df.shape[0],\" image pairs existing as a relative\")","34ef1bb9":"Train and Test data","ed992c59":"There are no null values.","1565394d":"Train data csv"}}