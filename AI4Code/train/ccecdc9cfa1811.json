{"cell_type":{"a245530a":"code","82b8dbcb":"code","e37d0470":"code","64656cbd":"code","1469d8ae":"code","599e7c22":"code","dc51f6b2":"code","f45431f1":"code","4b7adfe4":"code","d70625be":"code","fb204940":"code","a28159eb":"code","b923d03d":"code","f56bdc36":"code","72455cd6":"code","8d435078":"code","cdd65623":"code","b7f5dc26":"code","1f6f920f":"code","f06d0f27":"code","fbd8e6bb":"code","f592effe":"code","2baf68e2":"code","3e98b197":"code","54cd1ef7":"code","e9caa808":"code","fb16cd35":"code","4b8e41c7":"code","df75b9b0":"code","e05ade89":"code","2be41678":"code","543c68b0":"code","ddd69e24":"code","d4c9227e":"code","ab0f6cf8":"code","96b49cb2":"code","bbf80d7f":"code","bf2b587c":"code","d99092fe":"code","aeb061e8":"code","b6703bd7":"code","3b868214":"code","193ed456":"code","648c6a73":"code","89f1905e":"code","f68b63a6":"code","fddaf632":"code","6557fcc3":"code","7a27df33":"code","37c100d6":"code","220cc5b3":"code","cbbcb7ee":"code","035acc72":"code","39774ce9":"code","caf5f7a4":"code","02348d4a":"code","84564faf":"code","df19b64b":"code","a6cd5881":"code","74f4627a":"code","e1103db0":"code","373bad97":"code","a8824869":"code","56b958e9":"code","e49f09cd":"code","065ea9db":"code","8a7457f7":"code","7e5f5db0":"code","dbd2f216":"code","d83c5809":"code","b600b024":"code","65d5aa23":"code","edc5c9cc":"code","73b88cc8":"code","f276fb3b":"code","85bedac6":"code","4c69a833":"code","e813115e":"code","b4d3cc48":"code","80f9df13":"code","c8a479ab":"code","1cd01128":"code","b4c69f46":"code","defd282c":"code","c94c9a92":"code","993e9767":"code","18063b46":"code","f0aab82d":"code","8f95ff6d":"code","366b190b":"code","72d102f0":"code","8d293fe7":"code","49aa695a":"code","dd970474":"code","34dbcd17":"code","89cfa5c4":"code","94eabac0":"code","c81c2321":"code","41287c5f":"code","6eef1a38":"markdown","59df9a8a":"markdown","07884931":"markdown","a605304a":"markdown","847c4c72":"markdown","4690dc56":"markdown","8806f310":"markdown","b0629bac":"markdown","172d190b":"markdown","bb2d7927":"markdown","0e05f72c":"markdown","5a17b275":"markdown","bf0e9152":"markdown","0385aa82":"markdown","76ba3b62":"markdown","b212fc81":"markdown","51368bfb":"markdown","9ca21d91":"markdown","e9725ac8":"markdown","d7101a47":"markdown","a97b7e96":"markdown","28a5819d":"markdown","4dd2f988":"markdown","38d31ff3":"markdown","03fa191f":"markdown","5939c40b":"markdown","54892ddb":"markdown","bdadb565":"markdown","e765e4fc":"markdown","f925123e":"markdown","f1b77b1a":"markdown","88776662":"markdown","6bbcb98b":"markdown","61b5a4c8":"markdown","f0dae825":"markdown","1833a3a2":"markdown","ae9b23c4":"markdown","18e5a1ff":"markdown","0a3d7235":"markdown","e26c6ccc":"markdown","a53f07fc":"markdown"},"source":{"a245530a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","82b8dbcb":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px","e37d0470":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","64656cbd":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","1469d8ae":"test_df.shape","599e7c22":"train_df.shape","dc51f6b2":"train_df.describe(include = \"all\")","f45431f1":"test_df.describe(include = \"all\")","4b7adfe4":"train_df.info()","d70625be":"train_df.head()","fb204940":"train_df.isnull().sum()","a28159eb":"total = train_df.isnull().sum().sort_values(ascending = False)\npercent = (train_df.isnull().sum()\/train_df.isnull().count()).sort_values(ascending = False)\nmissing_train_data = pd.concat([total,percent], axis =1, keys = ['Total', 'Percent'])\nmissing_train_data.head()","b923d03d":"missing_train_data.plot.bar()","f56bdc36":"total = test_df.isnull().sum().sort_values(ascending = False)\npercent = (test_df.isnull().sum()\/test_df.isnull().count()).sort_values(ascending = False)\nmissing_test_data = pd.concat([total,percent], axis =1, keys = ['Total', 'Percent'])\nmissing_test_data.head()","72455cd6":"missing_test_data.plot.bar()","8d435078":"df_con = pd.DataFrame()\ndf_dis = pd.DataFrame()","cdd65623":"train_df.info()","b7f5dc26":"ax = sns.countplot(x = train_df[\"Survived\"])","1f6f920f":"df_dis['Survived'] = train_df['Survived']\ndf_con['Survived'] = train_df['Survived']","f06d0f27":"ax = sns.countplot(x = train_df[\"Pclass\"])","fbd8e6bb":"df_dis['Pclass'] = train_df['Pclass']\ndf_con['Pclass'] = train_df['Pclass']","f592effe":"train_df.Age.isnull().sum()","2baf68e2":"ax = sns.distplot(train_df[\"Age\"], bins = 10)","3e98b197":"df_dis[\"Age\"] = train_df[\"Age\"]\ndf_con[\"Age\"] = train_df[\"Age\"]","54cd1ef7":"ax = sns.countplot(x = train_df[\"Sex\"])","e9caa808":"df_dis['Sex'] = train_df['Sex']\ndf_dis['Sex'] = np.where(df_dis['Sex'] == 'female', 1, 0) # change sex to 0 for male and 1 for female\n\ndf_con['Sex'] = train_df['Sex']","fb16cd35":"df_dis[\"Survived\"] = train_df[\"Survived\"]","4b8e41c7":"df_dis.head()","df75b9b0":"ax = sns.barplot(y=\"Survived\", x = \"Sex\", data = df_dis)","e05ade89":"train_df[\"SibSp\"].value_counts()","2be41678":"df_dis[\"SibSp\"] = train_df[\"SibSp\"]\ndf_con[\"SibSp\"] = train_df[\"SibSp\"]","543c68b0":"ax = sns.barplot(y=\"Survived\", x = \"SibSp\", data = df_dis)","ddd69e24":"train_df[\"Parch\"].value_counts()","d4c9227e":"df_dis['Parch'] = train_df['Parch']\ndf_con['Parch'] = train_df['Parch']","ab0f6cf8":"ax = sns.barplot(y=\"Survived\", x = \"Parch\", data = df_dis)","96b49cb2":"df_con.head()","bbf80d7f":"df_dis.head()","bf2b587c":"train_df[\"Ticket\"].describe(include = \"all\")","d99092fe":"train_df[\"Fare\"].describe(include = \"all\")","aeb061e8":"print(\"Unique Values:\")\nprint(len(train_df[\"Fare\"].unique()))","b6703bd7":"df_con[\"Fare\"] = train_df[\"Fare\"]\ndf_dis[\"Fare\"] = pd.cut(train_df[\"Fare\"], bins = 5)\n","3b868214":"df_dis.Fare.value_counts()","193ed456":"ax = sns.countplot(x = df_dis[\"Fare\"])\nplt.xticks(rotation = \"90\")","648c6a73":"train_df[\"Cabin\"].isnull().sum()","89f1905e":"len(train_df[\"Cabin\"].unique())","f68b63a6":"train_df.Embarked.isnull().sum()","fddaf632":"train_df.Embarked.unique()","6557fcc3":"train_df.Embarked.value_counts()","7a27df33":"sns.countplot(x= train_df[\"Embarked\"])","37c100d6":"df_dis[\"Embarked\"] = train_df[\"Embarked\"]\ndf_con[\"Embarked\"] = train_df[\"Embarked\"]","220cc5b3":"df_con.Embarked.shape","cbbcb7ee":"df_con.head()","035acc72":"df_con = df_con.dropna(subset = [\"Embarked\"])\ndf_dis = df_dis.dropna(subset = [\"Embarked\"])\nprint(df_con.Embarked.shape)\nprint(df_dis.Embarked.shape)","39774ce9":"df_con[\"PassengerId\"] = train_df[\"PassengerId\"]","caf5f7a4":"df_dis.head()","02348d4a":"df_con.head()","84564faf":"onehot_cols = df_dis.columns.tolist()\nonehot_cols.remove(\"Survived\")\nenc_df_dis = pd.get_dummies(df_dis, columns = onehot_cols)\nenc_df_dis.head()","df19b64b":"df_embarked_onehot = pd.get_dummies(df_con['Embarked'], prefix='embarked')\ndf_sex_onehot = pd.get_dummies(df_con['Sex'], prefix='sex')\ndf_plcass_onehot = pd.get_dummies(df_con['Pclass'], prefix='pclass')","a6cd5881":"enc_df_con = pd.concat([df_con, df_embarked_onehot, df_sex_onehot, df_plcass_onehot], axis =1)\nenc_df_con = enc_df_con.drop([\"Pclass\", \"Sex\", \"Embarked\"], axis = 1)\nenc_df_con.head()","74f4627a":"enc_df_con.info()","e1103db0":"enc_df_con.shape","373bad97":"train_df.isnull().sum()","a8824869":"train_df['Age'].fillna((train_df['Age'].mean()), inplace=True)","56b958e9":"train_df.isnull().sum()","e49f09cd":"plt.figure(figsize = (20,10))\nsns.heatmap(train_df.corr(),annot = True)\nplt.show()","065ea9db":"plt.figure(figsize = (20,10))\nsns.heatmap(enc_df_con.corr(),annot = True)\nplt.show()","8a7457f7":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\n\nenc_df_con[['Fare','Age']] = min_max_scaler.fit_transform(enc_df_con[['Fare','Age']])\nenc_df_con.sample(5)","7e5f5db0":"enc_df_con.isnull().sum()","dbd2f216":"enc_df_con['Age'].fillna((enc_df_con['Age'].mean()), inplace=True)","d83c5809":"enc_df_con.isnull().sum()","b600b024":"#train_df = train_df[:train_df.shape[0]]\ntarget = enc_df_con['Survived']\nenc_df_con.drop(['Survived'], axis=1, inplace=True)\nenc_df_con.isnull().sum()","65d5aa23":"target.shape","edc5c9cc":"test_df.shape","73b88cc8":"test_df.isnull().sum()","f276fb3b":"test_df['Age'].fillna((test_df['Age'].mean()), inplace=True)","85bedac6":"test_df.isnull().sum()","4c69a833":"test_df['Fare'].fillna((test_df['Fare'].mean()), inplace=True)","e813115e":"test_df.isnull().sum()","b4d3cc48":"test_df = test_df.drop([\"Cabin\", \"Name\", \"Ticket\"], axis = 1)","80f9df13":"test_df.isnull().sum()","c8a479ab":"test_df.head()","1cd01128":"enc_df_con.head()","b4c69f46":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\n\ntest_df[['Fare','Age']] = min_max_scaler.fit_transform(test_df[['Fare','Age']])\ntest_df.sample(5)","defd282c":"df_con_test = pd.DataFrame()\ndf_dis_test = pd.DataFrame()\n\n\ndf_dis_test['Pclass'] = test_df['Pclass']\ndf_con_test['Pclass'] = test_df['Pclass']\n\ndf_dis_test[\"Age\"] = test_df[\"Age\"]\ndf_con_test[\"Age\"] = test_df[\"Age\"]\n\ndf_dis_test['Sex'] = test_df['Sex']\ndf_dis_test['Sex'] = np.where(df_dis_test['Sex'] == 'female', 1, 0) # change sex to 0 for male and 1 for female\ndf_con_test['Sex'] = test_df['Sex']\n\n\ndf_dis_test[\"SibSp\"] = test_df[\"SibSp\"]\ndf_con_test[\"SibSp\"] = test_df[\"SibSp\"]\n\n\ndf_dis_test['Parch'] = test_df['Parch']\ndf_con_test['Parch'] = test_df['Parch']\n\n\ndf_con_test['PassengerId'] = test_df['PassengerId']\npassenger_ID = df_con_test[\"PassengerId\"]\n\n\ndf_con_test[\"Fare\"] = test_df[\"Fare\"]\ndf_dis_test[\"Fare\"] = pd.cut(test_df[\"Fare\"], bins = 5)\n\n\n\ndf_dis_test[\"Embarked\"] = test_df[\"Embarked\"]\ndf_con_test[\"Embarked\"] = test_df[\"Embarked\"]\n\n\nonehot_cols_test = df_dis.columns.tolist()\nonehot_cols_test.remove(\"Survived\")\nenc_df_dis_test = pd.get_dummies(df_dis, columns = onehot_cols_test)\nenc_df_dis_test.head()\n\n\n\ndf_embarked_onehot_test = pd.get_dummies(df_con_test['Embarked'], prefix='embarked')\ndf_sex_onehot_test = pd.get_dummies(df_con_test['Sex'], prefix='sex')\ndf_plcass_onehot_test = pd.get_dummies(df_con_test['Pclass'], prefix='pclass')\n\n\n\n\nenc_df_con_test = pd.concat([df_con_test, df_embarked_onehot_test, df_sex_onehot_test, df_plcass_onehot_test], axis =1)\nenc_df_con_test = enc_df_con_test.drop([\"Pclass\", \"Sex\", \"Embarked\"], axis = 1)\nenc_df_con_test.head()","c94c9a92":"enc_df_con_test.shape","993e9767":"enc_df_con.head()","18063b46":"enc_df_con.shape","f0aab82d":"enc_df_con.isnull().sum()","8f95ff6d":"enc_df_con_test.isnull().sum()","366b190b":"import scipy\nfrom scipy import stats\nimport statsmodels.api as sm\nimport statsmodels.api as sm\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression","72d102f0":"X_train, X_validate, Y_train, Y_validate = train_test_split(enc_df_con, target, test_size=0.2, random_state=3)\nprint(X_train.shape, X_validate.shape)","8d293fe7":"model = LogisticRegression()\nmodel = model.fit(X_train, Y_train)\ny_pred = model.predict(X_validate)","49aa695a":"accuracy_score(Y_validate, y_pred)*100","dd970474":"from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix\n","34dbcd17":"print(classification_report(Y_validate, y_pred))","89cfa5c4":"model = LogisticRegression()\nmodel = model.fit(enc_df_con, target)\ny_pred_test = model.predict(enc_df_con_test)","94eabac0":"final_Submission_df = pd.DataFrame({\"PassengerId\": passenger_ID,\n                                   \"Survived\": y_pred_test})\nfinal_Submission_df.set_index(\"PassengerId\", inplace = True)","c81c2321":"final_Submission_df.head()","41287c5f":"final_Submission_df.to_csv(\"final_submission.csv\")","6eef1a38":"One-hot encoding:","59df9a8a":"Fare","07884931":"### Gaining Insights from the data","a605304a":"Creating two dataframe 1. discrete vars 2. continuous","847c4c72":"### Feature Encoding","4690dc56":"Null Value Treatment:\n","8806f310":"The Final prediction:","b0629bac":"Preparing the train data","172d190b":"It has 681 unique values.","bb2d7927":"ploting","0e05f72c":"### Nullvalue Treatment:","5a17b275":"Missing Data in the training set","bf0e9152":"Encoding discretized bin variable","0385aa82":"Parch","76ba3b62":"Normalization","b212fc81":"Missing data in the testing dataset","51368bfb":"Impelmenting Logistic regression","9ca21d91":"Train-Test split","e9725ac8":"### Mounting to Kaggle","d7101a47":"Min Max","a97b7e96":"Passenger Class:","28a5819d":"Combining all the columns:","4dd2f988":"Since Our target feature is survived:","38d31ff3":"Ticket","03fa191f":"### Importing libraries","5939c40b":"train-test split","54892ddb":"Since Gender is a Categorical variable we have to convert it into a binnary form:","bdadb565":"Importing libraries","e765e4fc":"Age:","f925123e":"Test data","f1b77b1a":"### Reading files","88776662":"Train data","6bbcb98b":"Cabin:","61b5a4c8":"Emabrked:","f0dae825":"### Model Building|","1833a3a2":"Gender:","ae9b23c4":"Training Data:","18e5a1ff":"One hot encoding on all the categorical columns","0a3d7235":" SibSp","e26c6ccc":"# Titanic Case Study","a53f07fc":"One hot"}}