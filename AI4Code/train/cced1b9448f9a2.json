{"cell_type":{"2e1bd698":"code","8d6140ce":"code","aefd6578":"code","94946ab5":"code","009fc548":"code","d77e06ff":"code","6d97c3ec":"code","6741380a":"code","66e8732a":"code","4656941d":"code","30d796e5":"code","0195d829":"code","193d7733":"code","ad14039f":"code","aa146c7e":"code","8e738492":"code","b5dbfb3e":"code","ff3585e1":"code","92c8a373":"code","d3180ac0":"code","cb1601ed":"code","f75a4609":"code","b70ed28e":"code","3d3a0ed1":"code","37e7de35":"code","2aaaff38":"code","9ce48dba":"code","d09f2619":"code","82075582":"code","8b1e3baf":"code","c6abb0a1":"code","c9bad22a":"code","f8383122":"code","c7225925":"code","d4f48875":"code","ea152094":"code","63b6a9eb":"code","c038fbeb":"code","e6d484bb":"code","62d25e83":"markdown","9446f9e1":"markdown","0e22b457":"markdown","0eb395f7":"markdown","a261a746":"markdown","633d6593":"markdown","eaa4fe15":"markdown","8e30b5ae":"markdown","23738a8c":"markdown","3138ed31":"markdown","da03178f":"markdown","00ea237b":"markdown","14a617ec":"markdown","75006f46":"markdown","188b5a99":"markdown","36be8098":"markdown","730296d4":"markdown","7b867d9c":"markdown","49be1be1":"markdown","df322199":"markdown"},"source":{"2e1bd698":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, confusion_matrix\n%matplotlib inline","8d6140ce":"df = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')","aefd6578":"df.info()","94946ab5":"df.drop('Id',axis=1,inplace=True)\ndf.shape","009fc548":"df.head()","d77e06ff":"plt.figure(figsize=(7,7))\ndf['Married\/Single'].value_counts().plot(kind='pie',autopct=\"%.2f%%\")\nplt.title(\"Marital Status Ratio\")\nplt.ylabel(\"\")\nplt.show()\ndf['Married\/Single'].value_counts()","6d97c3ec":"plt.figure(figsize=(20,30))\nsns.countplot(y=df['Profession'])\nplt.title(\"Frequency of each Profession.\")\nplt.ylabel(\"Profession\")\nplt.xlabel(\"Count\")\nplt.show()","6741380a":"professions = df.groupby('Profession')\nprofessions_list = df['Profession'].unique()\nprofessions_list","66e8732a":"avg_incomes = []\navg_age = []\navg_exp = []","4656941d":"for profession in professions_list:\n    p_age_mean = professions.get_group(profession)['Age'].mean()\n    p_income_mean = professions.get_group(profession)['Income'].mean()\n    p_exp_mean = professions.get_group(profession)['Experience'].mean()\n    \n    avg_incomes.append(p_income_mean)\n    avg_age.append(p_age_mean)\n    avg_exp.append(p_exp_mean)","30d796e5":"pdf = pd.DataFrame({\n    'Profession':professions_list,\n    'Average Age':avg_age,\n    'Average Income':avg_incomes,\n    'Average Experience':avg_exp\n})\n\npdf.head()","0195d829":"pdf.shape","193d7733":"for col in pdf.columns[1:]:\n    plt.figure(figsize=(20,20))\n    sns.barplot(y=pdf['Profession'], x=pdf[col])\n    plt.title(f\"{col} of each profession.\")\n    plt.show()\n","ad14039f":"plt.figure(figsize=(17,7))\ndf['STATE'].value_counts().plot(kind='barh')\nplt.xscale('log')\nplt.show()","aa146c7e":"df.drop(['CITY'],axis=1,inplace=True)\ndf.head()","8e738492":"cols_to_encode = ['Married\/Single','House_Ownership', 'Car_Ownership', 'Profession', 'STATE']\ndummies = pd.get_dummies(df[cols_to_encode], drop_first=True)\ndummies.shape","b5dbfb3e":"dummies.head()","ff3585e1":"df.drop(cols_to_encode, axis=1, inplace=True)\ndf.head()","92c8a373":"scale = MinMaxScaler()\nscalled = scale.fit_transform(df.drop('Risk_Flag',axis=1))","d3180ac0":"i = 0\nfor col in df.columns[:-1]:\n    df[col] = scalled[:,i]\n    i += 1","cb1601ed":"df.head()","f75a4609":"df.describe()","b70ed28e":"ndf = pd.concat([df,dummies], axis=1)\nndf.shape","3d3a0ed1":"ndf['Risk_Flag'].value_counts().plot(kind='pie', autopct=\"%.2f%%\")\nplt.show()","37e7de35":"ndf['Risk_Flag'].value_counts()","2aaaff38":"class0 = ndf[ndf['Risk_Flag'] == 0].sample(34589)\nclass0.shape","9ce48dba":"class1 = ndf[ndf['Risk_Flag'] == 1]\nclass1.shape","d09f2619":"ndf2 = pd.concat([class0,class1], axis=0) \nndf2.shape","82075582":"ndf2['Risk_Flag'].value_counts().plot(kind='pie', autopct=\"%.2f%%\")\nplt.show()","8b1e3baf":"x, y = ndf2.drop('Risk_Flag',axis=1),ndf2['Risk_Flag']\nx.shape, y.shape","c6abb0a1":"X_train, X_test, Y_train, Y_test = train_test_split(x,y,random_state=1)\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape","c9bad22a":"model = keras.Sequential([\n    keras.layers.Dense(174, input_shape=(87,), activation='relu'),\n    keras.layers.Dense(87, activation='relu'),\n    keras.layers.Dense(44, activation='relu'),\n    keras.layers.Dense(22, activation='relu'),\n    keras.layers.Dense(11, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","f8383122":"history=model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=20,batch_size=512)","c7225925":"model.summary()","d4f48875":"sns.set()\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\n\n# Accuracy plot\nplt.plot(epochs, acc, color='green', label='Training Accuracy')\nplt.plot(epochs, val_acc, color='blue', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\n\nplt.figure()\n# Loss plot\nplt.plot(epochs, loss, color='green', label='Training Loss')\nplt.plot(epochs, val_loss, color='red', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","ea152094":"def predict(model, X):\n    pred = model.predict(X).flatten()\n    pred[pred >= 0.6] = 1\n    pred[pred < 0.6] = 0\n    return pred\n\ndef plot_actual_vs_predicted(y_true,y_pred,title=None):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(7,7))\n    sns.heatmap(cm, annot=True, fmt='g')\n    \n    #Labelling\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(title)\n    plt.show()","63b6a9eb":"y_train_pred = predict(model, X_train)\nplot_actual_vs_predicted(Y_train, y_train_pred, 'Train Data Predictions')\nprint(classification_report(Y_train, y_train_pred))","c038fbeb":"y_test_pred = predict(model, X_test)\nplot_actual_vs_predicted(Y_test, y_test_pred, 'Test Data Predictions')\nprint(classification_report(Y_test, y_test_pred))","e6d484bb":"model.save('loan.h5')","62d25e83":"## Imbalanced Data","9446f9e1":"# **Combining the data**","0e22b457":"**Risk Flag Ratio**","0eb395f7":"### States count","a261a746":"### Different Professions","633d6593":"## Import dataset","eaa4fe15":"## Import required libraries ","8e30b5ae":"# **One Hot Encoding**","23738a8c":"## Splitting the dataset into the Training set and Test set","3138ed31":"## Combining class0 and class1","da03178f":"medium link:- https:\/\/medium.com\/@shyamalkrishnaagrawal1812\/loan-prediction-based-on-customer-behaviour-f75332d30784","00ea237b":"## Data Analysis","14a617ec":"Dataset link:- https:\/\/cainvas-static.s3.amazonaws.com\/media\/user_data\/shyamalkrish\/archive_9.zip","75006f46":"## Average Income, Age and Experience of each profession","188b5a99":"## Visualize the accuracy and loss to check whether our model is overfitting or not","36be8098":"# Model Building","730296d4":"### Under Sampling","7b867d9c":"## Prediction","49be1be1":"### Dropping CITY","df322199":"# **Feature Scaling**"}}