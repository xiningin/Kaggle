{"cell_type":{"fe15bf34":"code","4e855813":"code","b9eb3307":"code","82ecc0c5":"code","48772cc7":"code","997329b6":"code","0183e54a":"code","282ef134":"code","727a6f57":"code","ebc3e15a":"code","9eeed062":"code","ae2a0a53":"code","b572c038":"code","68960aad":"code","c09ae6a0":"code","1c0bf1b8":"code","113c6ccf":"code","3d072e23":"code","2e6cd8c5":"code","685ee903":"code","77e857e6":"code","a73d33bd":"code","2e919505":"code","a1dfc1cd":"code","8b8ccb31":"code","34657929":"code","dcf612c2":"code","c45d9657":"code","473ba823":"code","565623f9":"code","022afd22":"code","6bb68614":"code","b7fba114":"code","562ab4a4":"code","8f013d2c":"code","c53c4954":"code","dbe92b20":"code","3e3f23ac":"code","e9a137a7":"code","9ed1cb87":"code","d8f17eb3":"code","311a4f97":"code","074d32c6":"code","3a669178":"code","490f68aa":"code","fb90ded5":"code","9c7779c0":"code","b6cb2bd4":"code","01527909":"code","e807210c":"code","2588ab76":"code","51b03083":"code","f3ea1b7c":"code","e364299c":"code","54439916":"markdown","8ce75151":"markdown","2afc69af":"markdown","138e69ff":"markdown"},"source":{"fe15bf34":"from fastai.imports import *\nfrom fastai.structured import *","4e855813":"%load_ext autoreload\n%autoreload 2","b9eb3307":"from pandas_summary import DataFrameSummary","82ecc0c5":"from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier","48772cc7":"from IPython.display import display","997329b6":"from sklearn import metrics","0183e54a":"PATH = \"..\/input\/\"","282ef134":"df_raw = pd.read_csv(f'{PATH}train.csv', low_memory = False)","727a6f57":"df_test = pd.read_csv(f'{PATH}test.csv', low_memory = False)","ebc3e15a":"def display_all(df):\n    with pd.option_context(\"display.max_rows\", 1000, \"display.max_columns\", 1000):\n            display(df)","9eeed062":"display_all(df_raw.head().T)","ae2a0a53":"display_all(df_raw.tail().T)","b572c038":"for col in df_raw.columns.tolist(): \n    if df_raw[col].dtype =='object':\n        print (col, df_raw[col].dtype)","68960aad":"df_raw.edjefa.value_counts()","c09ae6a0":"df_raw.edjefe.value_counts()","1c0bf1b8":"df_raw.dependency.value_counts()","113c6ccf":"df_raw[df_raw['dependency'] == 'yes'].idhogar.value_counts()","3d072e23":"display_all(df_raw[df_raw['idhogar'] == 'ae6cf0558'])","2e6cd8c5":"df_raw.Target.value_counts()","685ee903":"display_all(df_raw[df_raw['idhogar'] == 'fd8a6d014'][df_raw['parentesco1'] == 1])","77e857e6":"df_raw['idhogar'].nunique()","a73d33bd":"df_raw['parentesco1'].sum()","2e919505":"df_raw['parentesco1'].unique()","a1dfc1cd":"df_raw.groupby(['idhogar'])[['parentesco1']].sum().sort_values(by = 'parentesco1')","8b8ccb31":"display_all(df_raw[df_raw['idhogar'].isin(['1bc617b23','03c6bdf85','61c10e099','ad687ad89','1367ab31d','f2bfa75c4','6b1b2405f','896fe6d3e','c0c8a5013','b1f4d89d7','374ca5a19','bfd5067c2','a0812ef17','d363d9183','09b195e7a'])].sort_values('idhogar'))","34657929":"df_raw.head()","dcf612c2":"df_raw.edjefe.unique()","c45d9657":"df_raw.edjefa.unique()","473ba823":"df_raw.edjefe.head()","565623f9":"df_raw.edjefe = np.where(df_raw.edjefe == 'yes', 1,\n        np.where(df_raw.edjefe == 'no', 0,\n                df_raw.edjefe))","022afd22":"df_raw.edjefa = np.where(df_raw.edjefa == 'yes', 1,\n        np.where(df_raw.edjefa == 'no', 0,\n                df_raw.edjefa))","6bb68614":"df_raw.dependency = np.where(df_raw.dependency == 'yes', 1,\n        np.where(df_raw.dependency == 'no', 0,\n                df_raw.dependency))","b7fba114":"df_test.edjefe = np.where(df_test.edjefe == 'yes', 1,\n        np.where(df_test.edjefe == 'no', 0,\n                df_test.edjefe))","562ab4a4":"df_test.edjefa = np.where(df_test.edjefa == 'yes', 1,\n        np.where(df_test.edjefa == 'no', 0,\n                df_test.edjefa))","8f013d2c":"df_test.dependency = np.where(df_test.dependency == 'yes', 1,\n        np.where(df_test.dependency == 'no', 0,\n                df_test.dependency))","c53c4954":"df_raw = df_raw.sort_values(by = 'idhogar')","dbe92b20":"df_raw = df_raw.reset_index (drop = True)","3e3f23ac":"train_cats(df_raw)","e9a137a7":"apply_cats(df_test, df_raw)","9ed1cb87":"df_train, label_train, nas = proc_df(df_raw.drop(['Id', 'idhogar'], axis = 1), 'Target')","d8f17eb3":"df_test, y_test, nas2 = proc_df(df_test.drop(['idhogar'], axis = 1), y_fld = None, na_dict = nas)","311a4f97":"X_train = df_train[0:7645]\ny_train = label_train[0:7645]\nprint (X_train.shape)\nprint (y_train.shape)","074d32c6":"X_valid = df_train[7645:]\ny_valid = label_train[7645:]\nprint (X_valid.shape)\nprint (y_valid.shape)","3a669178":"def print_score(m):\n    res = [m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'):res.append(m.oob_score_)\n    print (res)","490f68aa":"m = RandomForestClassifier(n_jobs = -1)\n%time m.fit(X_train, y_train)\nprint_score(m)","fb90ded5":"m = RandomForestClassifier(n_estimators = 3, n_jobs = -1)\n%time m.fit(X_train, y_train)\nprint_score(m)","9c7779c0":"m = RandomForestClassifier(n_estimators = 3, n_jobs = -1, min_samples_leaf=5)\n%time m.fit(X_train, y_train)\nprint_score(m)","b6cb2bd4":"m = RandomForestClassifier(n_estimators = 3, n_jobs = -1, min_samples_leaf=5, oob_score=True)\n%time m.fit(X_train, y_train)\nprint_score(m)","01527909":"m = RandomForestClassifier(n_jobs = -1, n_estimators = 40, min_samples_leaf = 3, oob_score = True, max_features = 0.5)\n%time m.fit(X_train, y_train)\nprint_score(m)","e807210c":"m = RandomForestClassifier(n_jobs = -1, n_estimators = 80, min_samples_leaf = 3, oob_score = True, max_features = 0.5)\n%time m.fit(X_train, y_train)\nprint_score(m)","2588ab76":"m = RandomForestClassifier(n_jobs = -1, n_estimators = 120, min_samples_leaf = 3, oob_score = True, max_features = 0.5)\n%time m.fit(X_train, y_train)\nprint_score(m)","51b03083":"m = RandomForestClassifier(n_jobs = -1, n_estimators = 120, min_samples_leaf = 4, oob_score = True, max_features = 0.5)\n%time m.fit(X_train, y_train)\nprint_score(m)","f3ea1b7c":"df_test['Target'] = m.predict(df_test.drop(['Id'], axis = 1))","e364299c":"df_test[['Id', 'Target']].to_csv('submission.csv', index=False)","54439916":"### predicting on test set","8ce75151":"### load_data","2afc69af":"### modifications to dataset","138e69ff":"### splitting train and valid sets"}}