{"cell_type":{"daeaa626":"code","d01c65d9":"code","8cff8053":"code","738d419d":"code","98e04aac":"code","7c0e0899":"code","6f83f1c4":"code","d8daddd2":"code","124e4b52":"code","eddb8482":"code","3301bdf1":"code","35cdabbd":"code","00494141":"code","818af862":"code","816bf8bf":"code","cfd444a2":"code","8986dc28":"code","065b93a7":"code","22463169":"code","6e378a42":"code","ba4b5881":"code","3593363c":"code","9c97d705":"code","7a9ffced":"code","9d59909c":"code","dccd46fb":"markdown","62861153":"markdown","a4b0e936":"markdown","69868498":"markdown","677a0c02":"markdown","a68d1c72":"markdown","d8d3e4b3":"markdown","58532873":"markdown","4146c8f6":"markdown","bc226ae1":"markdown","0c44de92":"markdown","af865ffb":"markdown","524ed75d":"markdown","2040a446":"markdown","90739c4a":"markdown","75f26e58":"markdown","e87c309c":"markdown","8f4cd07e":"markdown","def2dd3e":"markdown","00a85b87":"markdown","bfda1681":"markdown","8391ac3b":"markdown","1dcd6ee3":"markdown","157a7d5c":"markdown","349f686f":"markdown","0d8858a7":"markdown"},"source":{"daeaa626":"import numpy as np \nimport seaborn as sns\nimport matplotlib as plt\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","d01c65d9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\n\nDATADIR = r\"\/kaggle\/input\/brain-tumor-classification-mri\/Training\/\"\nCATEGORIES = [\"glioma_tumor\",\"meningioma_tumor\",\"no_tumor\",\"pituitary_tumor\"]\nfor category in CATEGORIES:\n    path = os.path.join(DATADIR,category)\n    for img in os.listdir(path):\n        img_array = cv2.imread(os.path.join(path,img))\n        plt.imshow(img_array)\n        plt.show()\n        plt.axis(\"off\")\n        break\n    break","8cff8053":"IMG_SIZE = 150\nnew_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))    \nplt.imshow(new_array,cmap = \"gray\")\nplt.axis(\"off\")","738d419d":"for i in range(len(CATEGORIES)):\n    print (CATEGORIES[i])","98e04aac":"gt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor\/gg (10).jpg')\nmt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor\/m (25).jpg')\nnt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/no_tumor\/1.jpg')\npt1 = cv2.imread('..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor\/p (151).jpg')","7c0e0899":"plt.rcParams[\"figure.figsize\"] = (5,5)\nplt.imshow(gt1)\nplt.axis('off')","6f83f1c4":"plt.imshow(pt1)\nplt.axis('off')","d8daddd2":"plt.imshow(nt1)\nplt.axis('off')","124e4b52":"plt.imshow(mt1)\nplt.axis('off')","eddb8482":"training_data = []\n\ndef create_training_data():\n    for category in CATEGORIES:\n        path = os.path.join(DATADIR,category)\n        class_num = CATEGORIES.index(category)\n        for img in os.listdir(path):\n            try:\n                img_array = cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)\n                new_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE)) \n                training_data.append([new_array,class_num])\n            except Exception as e:\n                pass\ncreate_training_data()","3301bdf1":"X = []\ny = []\nfor features,label in training_data:\n    X.append(features)\n    y.append(label)\nX = np.array(X).reshape(-1,IMG_SIZE,IMG_SIZE)\nprint(X.shape)\nX = X\/255.0  \nX = X.reshape(-1,150,150,1)","35cdabbd":"X.shape","00494141":"tumor_classifications = os.listdir(r\"\/kaggle\/input\/brain-tumor-classification-mri\/Training\/\")","818af862":"print(tumor_classifications)\nprint(len(tumor_classifications))","816bf8bf":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\ny = to_categorical(y, num_classes = 4)","cfd444a2":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X, y, test_size = 0.2, random_state=42)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","8986dc28":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (150,150,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n#\nmodel.add(Conv2D(filters = 128, kernel_size = (2,2),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\n#\nmodel.add(Conv2D(filters = 256, kernel_size = (2,2),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.3))\n\n# \n","065b93a7":"model.add(Flatten())\nmodel.add(Dense(1024, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4, activation = \"softmax\"))\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nepochs = 25\nbatch_size = 40\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=0,\n        zoom_range = 0,\n        width_shift_range=0,  \n        height_shift_range=0,  \n        horizontal_flip=True,  \n        vertical_flip=False)  \n","22463169":"datagen.fit(X_train)\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val),\n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size)    ","6e378a42":"plt.plot(history.history[\"loss\"],c = \"red\")\nplt.plot(history.history[\"val_loss\"],c = \"black\")\nplt.title(\"Loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.show()","ba4b5881":"plt.plot(history.history[\"accuracy\"],c = \"red\")\nplt.plot(history.history[\"val_accuracy\"],c = \"black\")\nplt.title(\"Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.show()","3593363c":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nmodel2 = Sequential()\n#\nmodel2.add(Conv2D(filters = 64, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (150,150,1)))\nmodel2.add(MaxPool2D(pool_size=(2,2)))\nmodel2.add(Dropout(0.25))\n#\nmodel2.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel2.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel2.add(Dropout(0.25))\n#\nmodel2.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel2.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel2.add(Dropout(0.3))\n#\nmodel2.add(Conv2D(filters = 128, kernel_size = (2,2),padding = 'Same', \n                 activation ='relu'))\nmodel2.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel2.add(Dropout(0.3))\n\n#\nmodel2.add(Conv2D(filters = 256, kernel_size = (2,2),padding = 'Same', \n                 activation ='relu'))\nmodel2.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel2.add(Dropout(0.3))\n\n# ","9c97d705":"model2.add(Flatten())\nmodel2.add(Dense(1024, activation = \"relu\"))\nmodel2.add(Dropout(0.25))\nmodel2.add(Dense(4, activation = \"softmax\"))\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)\nmodel2.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nepochs2 = 25\nbatch_size2 = 35\ndatagen2 = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=0,\n        zoom_range = 0,\n        width_shift_range=0,  \n        height_shift_range=0,  \n        horizontal_flip=True,  \n        vertical_flip=False)  \n","7a9ffced":"datagen2.fit(X_train)\nhistory2 = model2.fit_generator(datagen2.flow(X_train,Y_train, batch_size=batch_size2),\n                              epochs = epochs2, validation_data = (X_val,Y_val),\n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size2)    ","9d59909c":"plt.plot(history2.history[\"loss\"],c = \"red\")\nplt.plot(history2.history[\"val_loss\"],c = \"black\")\nplt.title(\"Loss\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend([\"train\", \"test\"])\nplt.show()","dccd46fb":"The features go into X, and the labels go into y.","62861153":"**We load the data into a data directory and a categories directory**","a4b0e936":"### PREDICTION USING CNN","69868498":"Meningioma tumors are tumors that grow in the meninges. The meninges are membranes that surround your brain and spinal cord. Meningioma tumors are the most common types of brain tumors.","677a0c02":"***We create a CNN using a standard setup of components that was used in the MNIST work. We have the following components for our CNN:*** \n* We have a sequential mode\n* We use relu as an activation function\n* We use 'same' padding\n* We also use a 2d layer and dropouts in the 20-30% range\n***","a68d1c72":"We now load the images into a greyscale image array and that forms our baseline training and test data.","d8d3e4b3":"**Note that augmentation of the data is needed to ensure that the sample is balanced and the model works on images that are flipped visually**","58532873":"***Now we flatter the model images, add a dense layer, and use dropouts***","4146c8f6":"Glioma tumors are tumors that start in the glial cells in the brain. Glial cells are non-neuronal cells. Glioma tumors represent 30% of all brain tumors. ","bc226ae1":"***We note above that the image sample was oriented correctly. Note that not all image samples are flipped correctly ***","0c44de92":"***Executive summary***\n* Our objective was to investigate the brain tumor MRI data set and build a deep learning model using some of the concepts learned from this module. \n* The nature of deep learning is such that there's no obvious way to configure a 'good model.' Trying different combinations of models is the only way to get to a good result\n* We tried a few different cost functions and optimisers, but using Adam and relu worked best\n***\nIn the United States, approximately 54,000 people will receive a brain tumor diagnosis this year. There are three major types of brain tumors \u2013 Glioma, Meningioma, and Pituitary tumors. The prognosis of a patient is very tied to the type of brain tumor.\nIn order to speed up diagnoses and limit human error it is beneficial to use machine learning to indentify the type of brain tumors that shows up when the brain is scanned via an MRI. Using a data source from Kaggle, our team focused on a dataset of images of the different types of brain tumors. \nWe explored the data and addressed issues related to not having enough images in the dataset. We tested several different models and eventually settle on a model using a Convolutional Neural Net (CNN) with a relu activation function. We tried different configurations, but it's not easy to calibrate a model. A much deeper understanding of CNN hyper-parameters is needed to build a good model. \nThis model achieved a 90% accuracy score on classify the tumorous and non-tumorous images in the dataset. \nOne thing to note is that our work has been model centric, and not data-centric i.e. why didn't manually investigate all the data to check for labeling errors. That would go beyond the scope of this study. ","af865ffb":"***Let us explore some sample images from all four categories***","524ed75d":"Pituitary tumors are tumors that begin in the pituitary gland of the brain. Most pituitary tumors are benign growths.","2040a446":"# Final project - Machine Learning\n\n**Project Completed by Prashant Khorana, Leonce Ogoussan, and Darshan Padmanabhan**\n\n\n","90739c4a":"***Note that the tumors are broken into four categories***","75f26e58":"***Importing libraries***","e87c309c":"***Creating the training data set***","8f4cd07e":"***Let us try another model with some other combinations***","def2dd3e":"In the no tumor case, it's easy to see that there's no presence of a 'blob' of any sort. ","00a85b87":"xx","bfda1681":"***Let us try a different optimiser for this version***","8391ac3b":"### MANIPULATING DATA","1dcd6ee3":"***I've used a smaller batch size for this version***","157a7d5c":"***We import the data that's stored online in the server itself. The data is broken down into a 'training' folder and a 'test folder' ***","349f686f":"***The training data has an image count of 2296***\n***The test data has an image count of 574 i.e. 25% test split***","0d8858a7":"**Let's see how many categories there are...**\n**\n #we will investigate if this needs to be a multi class classification problem  "}}