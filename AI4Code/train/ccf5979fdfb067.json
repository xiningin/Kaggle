{"cell_type":{"f608ffd4":"code","a0d9d127":"code","f63d2885":"code","9aefa310":"code","55f77fd9":"code","87f71356":"code","be87bb27":"code","54a728e3":"code","eef831ff":"code","a146261c":"code","fba095a3":"code","eb199ab7":"markdown","1c38be37":"markdown","2b39509d":"markdown","81d3f35f":"markdown","74874b18":"markdown","9fa26100":"markdown","66e22e6a":"markdown","74a4c9a5":"markdown","dbc32755":"markdown","cf4d13de":"markdown"},"source":{"f608ffd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a0d9d127":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport math\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\nimport time\nimport datetime\nfrom time import gmtime, strftime\nfrom pytz import timezone\nfrom bokeh.io import output_file, output_notebook, show\nfrom bokeh.models import (\n  GMapPlot, GMapOptions, ColumnDataSource, Circle, LogColorMapper, BasicTicker, ColorBar,\n    DataRange1d, PanTool, WheelZoomTool, BoxSelectTool\n)\nfrom bokeh.models.mappers import ColorMapper, LinearColorMapper\nfrom bokeh.palettes import Viridis5\nfrom bokeh.models import ColumnDataSource, HoverTool, CategoricalColorMapper\nfrom bokeh.plotting import figure, show, output_file\nfrom bokeh.tile_providers import CARTODBPOSITRON\nfrom ast import literal_eval","f63d2885":"patient = pd.read_csv('..\/input\/coronavirusdataset\/patient.csv',index_col=\"patient_id\")\ntime = pd.read_csv('..\/input\/coronavirusdataset\/time.csv')\nroute = pd.read_csv('..\/input\/coronavirusdataset\/route.csv',index_col=\"patient_id\")\n\n","9aefa310":"patient.head()","55f77fd9":"time.head()","87f71356":"route.head()","be87bb27":"acc_data_r_d = [time.loc[:,\"released\"], time.loc[:,\"deceased\"]]\nplt.figure(figsize=(20, 6))\n#sns.lineplot(data=time.loc[:,\"confirmed\"])\nplt.plot(time['date'],time['confirmed'])\nplt.title(\"Accumulated confirmed cases over time\", fontsize=16, size=30)\nplt.xlabel(\"Date\", fontsize=16, size=30)\nplt.ylabel(\"Number of cases\", fontsize=16, size=30)\n#plt.yscale(\"log\")\nplt.xticks(rotation=90,fontsize=10)\nplt.yticks(fontsize=10)\nplt.show()\n\nplt.figure(figsize=(20, 6))\n#sns.lineplot(data=acc_data_r_d)\nplt.plot(time['date'],time['released'])\nplt.plot(time['date'],time['deceased'])\nplt.title(\"Accumulated recovered and deceased cases over time\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=16, size=30)\nplt.ylabel(\"Number of cases\", fontsize=16, size=30)\nplt.xticks(rotation=90,fontsize=10)\nplt.yticks(fontsize=10)\n#plt.legend(loc=\"upper left\",fontsize=20)\nplt.legend(['Released Cases', 'Deceased cases'],loc=\"upper left\",fontsize=20)\nplt.show()\n\nplt.figure(figsize=(20, 6))\n#sns.lineplot(data=time.loc[:,\"acc_negative\"])\nplt.plot(time['date'],time['negative'])\nplt.title(\"Accumulated negative cases over time\", fontsize=16, size=30)\nplt.xlabel(\"Date\", fontsize=16, size=30)\nplt.ylabel(\"Number of cases\", fontsize=16, size=30)\n#plt.yscale(\"log\")\nplt.xticks(rotation=90,fontsize=10)\nplt.yticks(fontsize=10)\nplt.show()","54a728e3":"reason_order = list(patient[\"infection_reason\"].value_counts().index)\n\nplt.figure(figsize=(12, 8))\nsns.countplot(y = \"infection_reason\",\n              data=patient,\n              order=reason_order)\nplt.title(\"Known reasons of infection\", fontsize=16)\nplt.xlabel(\"Count\", fontsize=16)\nplt.ylabel(\"Reason of infection\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\nplt.figure(figsize=(12, 8))\nsns.countplot(x = \"sex\",\n            hue=\"state\",\n            hue_order=[\"isolated\", \"released\", \"deceased\"],\n            data=patient)\nplt.title(\"Patient state by gender\", fontsize=16)\nplt.xlabel(\"Gender\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()\npatient_status = pd.DataFrame(patient[\"state\"].value_counts())\npatient_status.rename(columns={\"state\": \"Count\"}, inplace=True)\npatient_status.index.name=\"State\"\nplt.figure(figsize=(12, 8))\nsns.barplot(x = patient_status.index,\n            y=\"Count\",\n            data=patient_status)\nplt.title(\"Current state of patients\", fontsize=16)\nplt.xlabel(\"State\", fontsize=16)\nplt.ylabel(\"Count (log scale)\", fontsize=16)\nplt.yscale(\"log\")\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","eef831ff":"# If you want to get the information of selected COVID-19 patients just move the hover tool","a146261c":"def merc(Coords):\n    Coordinates = literal_eval(Coords)\n    lat = Coordinates[0]\n    lon = Coordinates[1]\n    \n    r_major = 6378137.000\n    x = r_major * math.radians(lon)\n    scale = x\/lon\n    y = 180.0\/math.pi * math.log(math.tan(math.pi\/4.0 + \n        lat * (math.pi\/180.0)\/2.0)) * scale\n    return (x, y)\n\ndef make_tuple_str(x, y):\n    t = (x, y)\n    return str(t)\n    \nroute[\"cor\"] = route.latitude.astype(str).str.cat(route.longitude.astype(str), sep=',')\nroute['coords_x'] = route['cor'].apply(lambda x: merc(x)[0])\nroute['coords_y'] = route['cor'].apply(lambda x: merc(x)[1])\ncds = ColumnDataSource(route)\n\nhover = HoverTool(tooltips=[ ('id','@id'),('sex','@sex') ,('infection_reason','@infection_reason'),('state','state'),\n                            ('longitude', '@longitude'),\n                            ('latitude', '@latitude'),\n    ('city','@city'),('province','@province'),('visit','@visit')],\n                  mode='mouse')\np = figure(x_axis_type=\"mercator\", y_axis_type=\"mercator\",tools=['pan', 'wheel_zoom', 'tap', 'reset', 'crosshair',hover])\np.add_tile(CARTODBPOSITRON)\np.circle(x = route['coords_x'],\n         y = route['coords_y'])\n\nscatter = p.circle('coords_x', 'coords_y', source=cds,\n                    alpha=.10,\n                    selection_color='red',\n                    nonselection_fill_alpha=.1)\noutput_notebook()\nshow(p)","fba095a3":"def pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.6,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=1),\n                              )\n                  )\n    return trace\npy.iplot([pie_plot(patient['region'].value_counts(), ['cyan', 'gold'], 'region')])\npy.iplot([pie_plot(patient['infection_reason'].value_counts(), ['cyan', 'gold'], 'infection_reason')])\npy.iplot([pie_plot(patient['group'].value_counts(), ['cyan', 'gold'], 'group')])","eb199ab7":"### Accumulated confirmed case, negative case, recovered and deceased case over time","1c38be37":"### Infected cases - root cause analysis","2b39509d":"## Load the data","81d3f35f":"## Import libraries","74874b18":"#### Reference Links\n\n* https:\/\/medium.com\/@armanruet\/coronavirus-covid-19-data-visualization-and-prediction-in-south-korea-b897fadcdaa1\n* https:\/\/plot.ly\/python\/plotly-fundamentals\/\n* https:\/\/docs.bokeh.org\/en\/latest\/","9fa26100":"## Create a map with available information of each patient","66e22e6a":"## COVID-19 - Interactive Data Visualization with Bokeh and Plotly","74a4c9a5":"In this notebook, I'm going to explore and visualize data that contains information on patients infected with Covid-19 in South Korea. Visualizations are produced with Bokeh and Plotly.\n\n","dbc32755":"## Context","cf4d13de":"### Analysis of the most affected regions, infection reason and most affected religious group"}}