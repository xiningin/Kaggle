{"cell_type":{"a20f2bfd":"code","802bd5a5":"code","549807c2":"code","a313696e":"code","ad67a07f":"code","fa0eaafa":"code","864ea0f0":"code","184af1af":"code","102a317b":"code","5209ad36":"code","32cca21b":"code","5b7b4bc3":"code","fb49fc45":"code","08ceb265":"code","aff73519":"code","952dc30f":"code","a00fb877":"code","3a1f5c7a":"code","6f1a4d58":"code","5937a8b3":"code","a03cfed1":"code","0bcf3933":"code","3b45cf96":"code","470c72b7":"code","a27a16a1":"code","210ddbeb":"code","5f1af412":"code","59cde2af":"code","beb29979":"code","602a2137":"code","2637ca55":"code","dc16fce9":"code","2db2c0bd":"code","94d6a241":"code","d8ec8763":"code","511f3c61":"code","1cd2a4b4":"code","9bb53fa2":"code","d2baa535":"code","7bf1b707":"code","b671bc5f":"code","33c80052":"code","1a5fd767":"code","522e15df":"code","770c2ace":"code","24f89eb3":"code","686b088c":"code","92c47930":"code","c28a324a":"code","3f465d85":"code","f6e9f381":"code","4a0dbfcf":"code","76aa05e2":"code","931bc8f6":"code","eaecd069":"code","21bb936b":"code","b5531e36":"code","f7a100a1":"code","6ad74e96":"code","b7302e15":"code","ca50eecf":"code","eb4e1166":"code","11128203":"code","1afc29d8":"code","bf8a1aea":"code","1203e59a":"code","82c697aa":"code","534de00b":"code","6c97bf87":"code","23690ebc":"code","2f757f0a":"code","d9f80d3b":"code","faf61a32":"code","79d98c3f":"code","4478744d":"code","0f611294":"code","77fe4b01":"code","b1a2bfc8":"code","b1870232":"code","1e9cfe77":"code","8f480f8a":"code","a87a3965":"code","331d8ddd":"code","2d3f084d":"code","e41fd8fe":"code","97afc061":"code","c62f5631":"code","e5499457":"code","2700da43":"code","0e3d9ac2":"code","96832498":"code","8c45e91e":"code","9c79b33d":"code","4ea8f7f8":"code","694da682":"code","9ce18860":"code","229e3cae":"code","d13b5cef":"code","1040a5ff":"code","1f876bb4":"code","1c8097fa":"code","ff8994b7":"markdown","91115a44":"markdown","c878f188":"markdown","f8f780d6":"markdown","55885b48":"markdown","7692221b":"markdown","5e941823":"markdown","f0e04717":"markdown","bed713e7":"markdown","81fa4fe9":"markdown","580b938c":"markdown","37b38f02":"markdown","7f198e4a":"markdown","f9ef18d9":"markdown","fe369d78":"markdown","55f9dbf3":"markdown","5cc620f1":"markdown","0d4e270d":"markdown","ee237947":"markdown","f3e9bdcb":"markdown","d0c9663c":"markdown","e53b9e47":"markdown","df9af1bc":"markdown","bcc0df39":"markdown","3429fc44":"markdown","7f95cab2":"markdown","c690c2fd":"markdown","96ec26d5":"markdown","07e0c6fb":"markdown","aaf9386d":"markdown","b85ae1d0":"markdown","d02f139c":"markdown","e67c6053":"markdown","d6a30040":"markdown","e60e1342":"markdown","8d92d482":"markdown","1ddafbd5":"markdown","b47c3665":"markdown"},"source":{"a20f2bfd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","802bd5a5":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","549807c2":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/ford.csv')","a313696e":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","ad67a07f":"brand_data = brand_data_org.copy()","fa0eaafa":"brand_data.info()","864ea0f0":"# no nulls with appropriate data types","184af1af":"brand_data.describe(include='all')","102a317b":"# We have 23 unique models but most of the cars are Fiesta\n# 3 different transmission types but most of the cars are Manual transmission\n# 5 different fuel types but most of the cars are running on Petrol\n# It is strange to see min mileage is 1 for used cars!!\n# mpg max = 201.8!! It is not logic to have cars with more than 100 miles per gallon\n# It is also strange to see engine size equal to zero but may be this can be true for electric cars only\n# Let us explore the data in more details","5209ad36":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.distplot(brand_data['year'],ax=axes[0,0])\nsns.distplot(brand_data['mileage'],ax=axes[0,1])\nsns.distplot(brand_data['tax'],ax=axes[0,2])\nsns.distplot(brand_data['mpg'],ax=axes[1,0])\nsns.distplot(brand_data['engineSize'],ax=axes[1,1])\nsns.distplot(brand_data['price'],ax=axes[1,2])","32cca21b":"## year:       Right Skewed, most used cars are between 2015 to 2020. We have cars after 2021. Will be dropped.\n\n## mileage:    Right Skewed, since most cars are 5 years old. High correlation between mileage and year is clear.\n##             it is also not logic to have mileage of used cars with values very close to zero or even below 50 miles \n##             (as an assumption)\n\n## tax:        Nothing specific can be concluded, however no correlation with any other field can be noticed\n\n## mpg:        Right Skewed, as mentioned above it is strange to have cars with such extremely excessive fuel consumption \n##             (>100 mpg!!) normally, 80 mpg are the max acceptable consumption which can be achieved by Hybrid cars. \n##             Accordingly, anything above 80 will be considered as outliers\n\n## engineSize: Most used cars engine sizes at 1 \n\n## price:      Right Skewed, since most cars are 5 years old. ","5b7b4bc3":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","fb49fc45":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","08ceb265":"## -Year & Price are +vely correlated - Recent cars sold at higher prices. Logic \n##  (refer to below graphs year vs mean mileage & year vs mean price)\n\n## -Year & mileage are -vely correlated - As the cars gets older (Year decrease) the mileage driven by the car increases. Logic \n##  (refer to below graph mean price vs [mileage grouped by year])\n##  As year and mileage are highly correlated (High Multicollinearity Excpeted), accordingly year will be dropped after \n##  finishing the preprocessing of data\n\n## -Tax has no significant correlation with any of the other features except with mpg. Tax feature is likely to be dropped out.\n\n## -mpg has no significant correlation with any othe features. \n##  It makes sense that cars with bigger engine size has lower mpg. Surpisingly, low correlation with engine size.  \n##  This maybe due to the different fuel and transmission types.  \n\n## -mpg feature is likely to be dropped as well. \n\n## -Year, mileage, enginesize are the most relevant features affecting car price.","aff73519":"brand_data=brand_data[brand_data['year']<2022]","952dc30f":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","a00fb877":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","3a1f5c7a":"# Generally, as the the car gets older it is most likely to have been driven more mileages \n# and consequently th mean price get lower\n# Despite the heatmap above shows that years is a bit higher in relation with price than mileage but \n# it is most likely to drop year column instead, because same year includes wide range of mileages\n# however a specific mileage values covers a narrow range of years","6f1a4d58":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","5937a8b3":"## As shown above a large portion of the prices are considered as outliers\n## This could be due to several reasons:\n## 1. Wide range of models\n## 2. Wide range of engine sizes\n## 3. Wide range of years and mileage\n\n## Therefore, it is not wise to drop all these outliers at this stage","a03cfed1":"## Lets try to filter the data for prices above 25,000 and apply box plot again.","0bcf3933":"brand_data_above45=brand_data[brand_data['price']>25000]\nbrand_data_above45.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","3b45cf96":"len(brand_data_above45['price'])","470c72b7":"# now we have only 527 outliers (above 25,000). Dataset total len=17965","a27a16a1":"## Lets try to filter the data for prices above 40,000 and apply box plot again.","210ddbeb":"brand_data_above75=brand_data[brand_data['price']>40000]\nbrand_data_above75.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","5f1af412":"len(brand_data_above75['price'])","59cde2af":"# now we have only 13 outliers (above 40,000). Dataset total len=17965","beb29979":"## Since the number of outliers are very small compared to the total length of the main dataframe (17965)\n## It is also expected that this number may also reduce further after completing the preprocessing of data\n## The remaining outliers will be eliminated as it will not have much impact on the model.","602a2137":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","2637ca55":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","dc16fce9":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","2db2c0bd":"## it is very obvious that manual transmission provides more efficient performance\n## No great difference between automatic and semi automatic mpg profiles however semi auto is slightly better than automatic","94d6a241":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","d8ec8763":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","511f3c61":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=True, data=df, palette='bright')","1cd2a4b4":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=True, data=df, palette='bright')","9bb53fa2":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Hybrid']\ndf=df[df['fuelType']!='Electric']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=True, data=df, palette='bright')","d2baa535":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","7bf1b707":"## As shown the range of prices is higher for recent cars","b671bc5f":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","33c80052":"## it is clear that R8 is the most expensive car in audi, \n## it could have a great share of the overall price outliers indicated above along with other models","1a5fd767":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","522e15df":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","770c2ace":"brand_notax=brand_data.drop(['tax'], axis=1)","24f89eb3":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","686b088c":"brand_notaxmpg.head()","92c47930":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","c28a324a":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","3f465d85":"sns.distplot(brand_mile['mileage'])","f6e9f381":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","4a0dbfcf":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","76aa05e2":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","931bc8f6":"sns.distplot(brand_mile['mileage'])","eaecd069":"sns.distplot(brand_mile['year'])","21bb936b":"## we will try to remove the year outliers by keeping the records above 1% quartile","b5531e36":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","f7a100a1":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","6ad74e96":"sns.distplot(brand_year['year'])","b7302e15":"sns.distplot(brand_year['engineSize'])","ca50eecf":"# We can drop Zero enginesizes or any above 3.5","eb4e1166":"brand_engsZ=brand_year.copy()","11128203":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]\nbrand_engsZ.drop(brand_engsZ.index[brand_engsZ['engineSize'] > 3.5], inplace = True)","1afc29d8":"sns.distplot(brand_engsZ['engineSize'])","bf8a1aea":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Hybrid']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Electric']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']","1203e59a":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","82c697aa":"vis_ftyp.plot(kind='bar')\nplt.show()","534de00b":"brand_models=brand_fuel.copy()","6c97bf87":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","23690ebc":"vis_models.plot(kind='bar')\nplt.show()","2f757f0a":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","d9f80d3b":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","faf61a32":"sns.distplot(brand_models['price'])","79d98c3f":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","4478744d":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","0f611294":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","77fe4b01":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","b1a2bfc8":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","b1870232":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","1e9cfe77":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","8f480f8a":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","a87a3965":"# Skewness slightly decreased and as you can see only the oultiers of specific model and year has been cleaned.","331d8ddd":"# Let us calculate the percentage of records removed out of the original dataset","2d3f084d":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","e41fd8fe":"# Data removed is a bit high but accepted","97afc061":"Brand_preprocessed=models_prices.copy()","c62f5631":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","e5499457":"Brand_preprocessed.info()","2700da43":"Brand_preprocessed.columns.values","0e3d9ac2":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","96832498":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","8c45e91e":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","9c79b33d":"brand_arranged.describe(include='all')","4ea8f7f8":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","694da682":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","9ce18860":"## Generally, mileage is higher for older cars","229e3cae":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","d13b5cef":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","1040a5ff":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","1f876bb4":"brand_final=brand_arranged.drop(['year'], axis=1)","1c8097fa":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/mercedes-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","ff8994b7":"## Data Exploration","91115a44":"### Price","c878f188":"## Preprocessing","f8f780d6":"### Year-Model Vs Mean Mileage","55885b48":"### Year-Model vs Max Price","7692221b":"### price and year ","5e941823":"### Tax feature","f0e04717":"## Dropping Unwanted Fields","bed713e7":"# Packages","81fa4fe9":"### Correlogram for additional visulatization of the relation between each two features ","580b938c":"### Price","37b38f02":"### Engine Size feature","7f198e4a":"### Preocessing Checkpoint","f9ef18d9":"### Fuel Type","fe369d78":"### mpg and engine size","55f9dbf3":"### Data Fields Distribution Graphs","5cc620f1":"### Model","0d4e270d":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","ee237947":"## Additional Graphs after Processing Data","f3e9bdcb":"### Mileage feature","d0c9663c":"#### Observations","e53b9e47":"# Loading Data","df9af1bc":"### mpg, fuel type and transmission","bcc0df39":"## Brand","3429fc44":"### mpg and transmission","7f95cab2":"# Exploring Dataset","c690c2fd":"### Price and model","96ec26d5":"## Re-arranging Columns","07e0c6fb":"### Fuel Type and mpg","aaf9386d":"### Year-Model vs Mean Price","b85ae1d0":"### Year-Model vs Min Price","d02f139c":"### Year Feature","e67c6053":"### Fuel Type and Mileage","d6a30040":"### Count of Features","e60e1342":"## Finding Correlations","8d92d482":"### Mean Price vs Other Features","1ddafbd5":"## Copying Datasets","b47c3665":"### mileage vs mean price [grouped by year]"}}