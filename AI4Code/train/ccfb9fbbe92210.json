{"cell_type":{"fccdf7de":"code","c328b4e3":"code","95330576":"code","59a0ee9c":"code","be126fb2":"code","742bd7c5":"code","79135922":"code","08b15456":"code","92cbd794":"code","6f3f1a67":"code","2b3d212d":"code","d9b3e9e2":"code","3e95937b":"code","3a0dccba":"code","f1c155b8":"code","ecea7539":"code","eb4c1122":"code","aac43a2f":"code","10bdf0d3":"code","442964e9":"code","24604ad4":"code","14c0b2a5":"code","98a4c4cb":"markdown","279f3cd2":"markdown","841ef160":"markdown","297b6213":"markdown","c9085ae8":"markdown","7cb467cd":"markdown","4e45b919":"markdown","90abae48":"markdown","ce803643":"markdown","8eb59ac0":"markdown","3d583a1e":"markdown","3b520c7f":"markdown","727d78ac":"markdown","dabd5d10":"markdown","c814e378":"markdown","08cefe23":"markdown","236d5eac":"markdown","8e6f120a":"markdown","ed7ee07b":"markdown","08306db2":"markdown","8f34f374":"markdown","c8562dee":"markdown"},"source":{"fccdf7de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c328b4e3":"import numpy as np\nimport matplotlib.pyplot as plt","95330576":"x = np.linspace(0,5,11)","59a0ee9c":"x","be126fb2":"y = x**2","742bd7c5":"y","79135922":"plt.plot(x,y,'r')#r is the color\nplt.xlabel('X axis')\nplt.ylabel('Y axis')","08b15456":"# plt.subplot(nrows, ncols, plot_number)\nplt.subplot(1,2,1) #basically here we are indexing the plots \nplt.plot(x, y, 'r--') # More on color options later\nplt.subplot(1,2,2)\nplt.plot(y, x, 'g*-')","92cbd794":"# Create Figure (empty canvas)\nfig = plt.figure()\n\n# Add set of axes to figure\naxes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1)\n\n# Plot on that set of axes\naxes.plot(x, y, 'b')\naxes.set_xlabel('Set X Label') # Notice the use of set_ to begin methods\naxes.set_ylabel('Set y Label')\naxes.set_title('Set Title')","6f3f1a67":"# Creates blank canvas\nfig = plt.figure()\n\naxes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\naxes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes\n\n# Larger Figure Axes 1\naxes1.plot(x, y, 'b')\naxes1.set_xlabel('X_label_axes2')\naxes1.set_ylabel('Y_label_axes2')\naxes1.set_title('Axes 1 Title')\n\n# Insert Figure Axes 2\naxes2.plot(y, x, 'r')\naxes2.set_xlabel('X_label_axes2')\naxes2.set_ylabel('Y_label_axes2')\naxes2.set_title('Axes 2 Title');","2b3d212d":"# Empty canvas of 1 by 2 subplots\nfig, axes = plt.subplots(nrows=1, ncols=2)","d9b3e9e2":"axes","3e95937b":"for ax in axes:\n    ax.plot(x, y, 'b')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('title')\n\n# Display the figure object    \nfig","3a0dccba":"fig.savefig(\"filename.png\")","f1c155b8":"ax.set_title(\"title\");","ecea7539":"ax.set_xlabel(\"x\")\nax.set_ylabel(\"y\");","eb4c1122":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.plot(x,x**2,label = 'x**2')\nax.plot(x,x**3,label = 'x**3')\nax.legend()","aac43a2f":"fig,ax = plt.subplots()\nax.plot(x,x**2,'b.-')\nax.plot(x,x**3,'g--')","10bdf0d3":"fig, ax = plt.subplots()\n\nax.plot(x, x+1, color=\"blue\", alpha=0.5) # half-transparant\nax.plot(x, x+2, color=\"#8B008B\")        # RGB hex code\nax.plot(x, x+3, color=\"#FF8C00\");        # RGB hex code ","442964e9":"fig, ax = plt.subplots(figsize=(12,6))\nax.plot(x, x+5, color=\"blue\", lw=3, linestyle='-')\nax.plot(x, x+6, color=\"green\", lw=3, ls='-.')\nax.plot(x, x+7, color=\"red\", lw=3, ls=':');\n\n","24604ad4":"fig,axes = plt.subplots(1,2,figsize=(10,4))\naxes[0].plot(x,x**2,x,np.exp(x))\naxes[0].set_title('Normal Scale')\n\naxes[1].plot(x,x**2,x,np.exp(x))\naxes[1].set_yscale('log')\naxes[1].set_title('Logrithmic Scale');","14c0b2a5":"fig, ax = plt.subplots(figsize=(10, 4))\n\nax.plot(x, x**2, x, x**3, lw=2)\n\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels([r'$\\alpha$', r'$\\beta$', r'$\\gamma$', r'$\\delta$', r'$\\epsilon$'], fontsize=18)\n\nyticks = [0, 50, 100, 150]\nax.set_yticks(yticks);","98a4c4cb":"We can iterate through this array:","279f3cd2":"We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the `color` and `alpha` keyword arguments. Alpha indicates opacity.","841ef160":"# Subplots","297b6213":"### Colors with the color= parameter","c9085ae8":"**Axis labels**","7cb467cd":"**Figure titles**","4e45b919":"## Saving figures\nMatplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF. ","90abae48":"It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using `set_xscale` and `set_yscale` methods which accept one parameter (with the value \"log\" in this case):","ce803643":"## Setting colors, linewidths, linetypes\n\nMatplotlib gives you *a lot* of options for customizing colors, linewidths, and linetypes. \n\nThere is the basic MATLAB like syntax (which I would suggest you avoid using for more clairty sake:","8eb59ac0":"Let's walk through a very simple example using two numpy arrays. You can also use lists, but most likely you'll be passing numpy arrays or pandas columns (which essentially also behave like arrays).\n","3d583a1e":"### Placement of ticks and custom tick labels","3b520c7f":"# Kindly upvote if you found this notebook useful :)","727d78ac":"#### Logarithmic scale","dabd5d10":"# Creating Multiplots on the same canvas","c814e378":"![image.png](attachment:image.png)","08cefe23":"Matplotlib is the \"grandfather\" library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab's (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you.\n\nIt is an excellent 2D and 3D graphics library for generating scientific figures. \n\nSome of the major Pros of Matplotlib are:\n\n* Generally easy to get started for simple plots\n* Support for custom labels and texts\n* Great control of every element in a figure\n* High-quality output in many formats\n* Very customizable in general","236d5eac":"With matplotlib, we can define the colors of lines and other graphical elements in a number of ways. First of all, we can use the MATLAB-like syntax where `'b'` means blue, `'g'` means green, etc. The MATLAB API for selecting line styles are also supported: where, for example, 'b.-' means a blue line with dots:","8e6f120a":"____\n## Legends, labels and titles","ed7ee07b":"The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it. \n\nTo begin we create a figure instance. Then we can add axes to that figure:","08306db2":"To change the line width, we can use the `linewidth` or `lw` keyword argument. The line style can be selected using the `linestyle` or `ls` keyword arguments:","8f34f374":"We can explicitly determine where we want the axis ticks with `set_xticks` and `set_yticks`, which both take a list of values for where on the axis the ticks are to be placed. We can also use the `set_xticklabels` and `set_yticklabels` methods to provide a list of custom text labels for each tick location:","c8562dee":"### Line and marker styles"}}