{"cell_type":{"3b78a28b":"code","4a120668":"code","e03131df":"code","4744bd2f":"code","b4e63fb8":"code","3dca0c64":"code","855dff6d":"code","286fe356":"code","87a9e34b":"code","4afeaeb0":"code","2e83a39e":"code","7da7c89f":"code","d4e2ad6f":"code","8ddb60af":"code","b68ddc62":"code","8559b6cc":"code","780add6a":"code","dd0647bd":"code","23864d18":"code","19af1b3b":"code","c540cd90":"code","d53719c0":"markdown","1c638559":"markdown","e13c1632":"markdown"},"source":{"3b78a28b":"# import the required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","4a120668":"# let us load the dataset & explore the features\ndf = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")\ndf.head()","e03131df":"df.shape","4744bd2f":"# Create the X variables ( predictors ) & y ( target variable )\nX = df.iloc[:, 3:13]\ny = df.iloc[:, 13]","b4e63fb8":"# we have two categorical variables, let us create the dummies for them\ngeography=pd.get_dummies(X[\"Geography\"],drop_first=True)\ngender=pd.get_dummies(X['Gender'],drop_first=True)","3dca0c64":"# Concatenate these dummies to data frame\nX=pd.concat([X,geography,gender],axis=1)\n\n# and drop these columns\nX=X.drop(['Geography','Gender'],axis=1)","855dff6d":"X.head()","286fe356":"# Create Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 7)","87a9e34b":"# Apply the Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4afeaeb0":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout","2e83a39e":"# Initialising the ANN\nclassifier = Sequential()","7da7c89f":"# Add the input layer and the first hidden layer\nclassifier.add(Dense(units = 6, kernel_initializer = 'he_uniform',activation='relu',input_dim = 11))","d4e2ad6f":"# Add the second hidden layer\nclassifier.add(Dense(units = 6, kernel_initializer = 'he_uniform',activation='relu'))","8ddb60af":"# Add the output layer\nclassifier.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))","b68ddc62":"# Compile the ANN\nclassifier.compile(optimizer = 'Adamax', loss = 'binary_crossentropy', metrics = ['accuracy'])","8559b6cc":"# Fitting the ANN to the Training set\nmodel_history=classifier.fit(X_train, y_train,validation_split=0.33, batch_size = 10, epochs = 100)","780add6a":"print(model_history.history.keys())","dd0647bd":"# summarize history for accuracy\nplt.plot(model_history.history['accuracy'])\nplt.plot(model_history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","23864d18":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\ny_pred = (y_pred > 0.5)","19af1b3b":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","c540cd90":"# Calculate the Accuracy\nfrom sklearn.metrics import accuracy_score\nscore=accuracy_score(y_pred,y_test)\nprint(score)","d53719c0":"## Create the ANN","1c638559":"## Making the predictions and evaluating the model","e13c1632":"## Preprocessing the Data"}}