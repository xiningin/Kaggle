{"cell_type":{"6cf6cf58":"code","f59b24be":"code","f962b0a9":"code","cd9eee30":"code","8513c4d9":"code","eeb1b9b5":"code","de58d701":"code","0e1d0a25":"code","9fadaf6c":"code","dabced0c":"code","8c65da7f":"code","848d886f":"code","30ac7a55":"code","8a473936":"code","faf92ce4":"code","93893969":"code","450c2e50":"code","ba4e355f":"code","a7a44915":"code","7391a110":"code","9d6f6e01":"code","6f36fc51":"code","7ad50c83":"code","3ff1dafb":"code","5335dd4a":"code","cad6092c":"code","9187108b":"code","40a39f68":"code","2c229a49":"code","b5e7dd41":"code","e3b63ff8":"code","857a7ed7":"code","0288ed21":"markdown","712e9521":"markdown","384a04ec":"markdown","09c707a2":"markdown","a68582a8":"markdown"},"source":{"6cf6cf58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f59b24be":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f962b0a9":"df_train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ndf_train.head()","cd9eee30":"df_test = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\ndf_test.head()","8513c4d9":"df_testing = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\n#df_testing.head()","eeb1b9b5":"print(df_train.isnull().sum())\nprint(df_test.isnull().sum())","de58d701":"df_train.describe()","0e1d0a25":"df_train.drop(['id'],axis=1,inplace=True)\ndf_test.drop(['id'],axis=1,inplace=True)","9fadaf6c":"sns.set_style(\"dark\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(9, 8))\n\nsns.distplot(df_train['target'], color=\"b\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Values\")\nax.set(xlabel=\"Target\")\nax.set(title=\"Target distribution\")\nsns.despine(trim=True, left=True)\nplt.show()","dabced0c":"features = [f'cont{x}'for x in range(1,15)]","8c65da7f":"# we will look into the features distribution now, to get insight into the data, \n#that how train and test feature corelated with each other!\ni = 1\nplt.figure()\nfig, ax = plt.subplots(5, 3,figsize=(14, 24))\nfor feature in features:\n    plt.subplot(5, 3,i)\n    sns.distplot(df_train[feature],color=\"blue\", kde=True,bins=120, label='train')\n    sns.distplot(df_test[feature],color=\"green\", kde=True,bins=120, label='test')\n    plt.xlabel(feature, fontsize=9); plt.legend()\n    i += 1\nplt.show()","848d886f":"df_train.corr()","30ac7a55":"corr = df_train.corr()\nplt.subplots(figsize=(14,10))\nsns.heatmap(corr, vmax=0.9, cmap=\"viridis\", square=True)","8a473936":"# Plot boxplots for all features to find outliers\n\nfor col in df_train.columns[:-1]:\n    plt.boxplot([df_train[col], df_test[col]], labels=['train', 'test'])\n    plt.title(col)\n    plt.legend()\n    plt.show()","faf92ce4":"plt.boxplot(df_train['target'])","93893969":"Q1_train = df_train.quantile(0.25)\nQ3_train = df_train.quantile(0.75)\nIQR_train = Q3_train - Q1_train\n((df_train < Q1_train - 1.5*IQR_train) | (df_train > Q3_train + 1.5*IQR_train)).agg([sum, 'mean'])","450c2e50":"Q1_test = df_test.quantile(0.25)\nQ3_test = df_test.quantile(0.75)\nIQR_test = Q3_test - Q1_test\n((df_test < Q1_test - 1.5 * IQR_test) | (df_test > Q3_test + 1.5 * IQR_test)).agg([sum, 'mean'])","ba4e355f":"def replace_outliers(data):\n    for col in data.columns:\n        Q1 = data[col].quantile(0.25)\n        Q3 = data[col].quantile(0.75)\n        IQR = Q3 - Q1\n        median_ = data[col].median()\n#         data[col].mask(((data[col] < Q1 - 1.5*IQR) | (data[col] > Q3 + 1.5*IQR)), median_, inplace=True)\n        # data[col] = np.where(((data[col] < Q1 - 1.5*IQR) | (data[col] > Q3 + 1.5*IQR)),\n        #                     median_, data[col])\n        data.loc[((data[col] < Q1 - 1.5*IQR) | (data[col] > Q3 + 1.5*IQR)), col] = median_\n    return data","a7a44915":"df_train = replace_outliers(df_train)","7391a110":"sns.set_style(\"dark\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(9, 8))\n\nsns.distplot(df_train['target'], color=\"b\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Values\")\nax.set(xlabel=\"Target\")\nax.set(title=\"Target distribution\")\nsns.despine(trim=True, left=True)\nplt.show()","9d6f6e01":"# df_train['contS'] = df_train['cont2'] * df_train['cont9']\n# df_test['contS'] = df_test['cont2'] * df_test['cont9']\n\n# df_train['contR'] = df_train['cont3'] * df_train['cont11']\n# df_test['contR'] = df_test['cont3'] * df_test['cont11']\n\n# df_train['contG'] = df_train['cont1'] * df_train['cont7']\n# df_test['contG'] = df_test['cont1'] * df_test['cont7']","6f36fc51":"# df_train.drop(['cont11'],axis=1,inplace=True)\n# df_test.drop(['cont11'],axis=1,inplace=True)\n\n# df_train.drop(['cont9'],axis=1,inplace=True)\n# df_test.drop(['cont9'],axis=1,inplace=True)\n\n# df_train.drop(['cont7'],axis=1,inplace=True)\n# df_test.drop(['cont7'],axis=1,inplace=True)","7ad50c83":"df_train.head()","3ff1dafb":"X=df_train.drop(['target'],axis=1)\ny=df_train.target","5335dd4a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.18, random_state=33)","cad6092c":"# import lightgbm as lgb\n# from sklearn.model_selection import GridSearchCV\n# parameters = {'depth'         : [4,6,8,10,12,14,18,20],\n#                   'learning_rate' : [0.005, 0.01, 0.035, 0.05, 0.1, 0.15, 0.2],\n#                   'iterations'    : [300, 800, 1000, 1800, 3000, 4100, 5000]\n#                  }\n# LGB = lgb.LGBMRegressor()\n\n# grid = GridSearchCV(estimator=LGB, param_grid = parameters, cv = 3, n_jobs=-1)\n# grid.fit(X, y)\n# CBR\n# print(\" Results from Grid Search \" )\n# print(\"\\n The best estimator across ALL searched params:\\n\", grid.best_estimator_)\n# print(\"\\n The best score across ALL searched params:\\n\", grid.best_score_)\n# print(\"\\n The best parameters across ALL searched params:\\n\", grid.best_params_)","9187108b":"# LGB_Test = lgb.LGBMRegressor(depth=10, iterations=100, learning_rate=0.1)\n\n# LGB_Test.fit(X,y)","40a39f68":"import lightgbm as lgb\nLGB = lgb.LGBMRegressor(random_state=33, n_estimators=5000, min_data_per_group=5, boosting_type='gbdt',\n num_leaves=246, max_dept=-1, learning_rate=0.005, subsample_for_bin=200000,\n lambda_l1= 1.074622455507616e-05, lambda_l2= 2.0521330798729704e-06, n_jobs=-1, cat_smooth=1.0, \n importance_type='split', metric='rmse', min_child_samples=20, min_gain_to_split=0.0, feature_fraction=0.5, \n bagging_freq=6, min_sum_hessian_in_leaf=0.001, min_data_in_leaf=100, bagging_fraction=0.82063411)\n\nLGB.fit(X_train, y_train)","2c229a49":"pred_LGB = LGB.predict(X_test)","b5e7dd41":"from sklearn.metrics import mean_squared_error\nrmse_LGB = np.sqrt(mean_squared_error(y_test, pred_LGB))\nrmse_LGB","e3b63ff8":"pred_LGB = LGB.predict(df_test)\npred_LGB","857a7ed7":"# output = pd.DataFrame({'id': df_testing.id, 'target': pred_LGB})\n# output.to_csv('Kaggle_Playground_Submission.csv', index=False)","0288ed21":"We'll be plotting the heatmap to see the co-relations!","712e9521":"After setting up the quantile ranges, we can conclude that features cont7, cont9 and cont10(In train) also the target label are having the significant outliers present!\nWe'll try remove these outliers present!","384a04ec":"As, we can see the target distribution before and after removing the outlier!","09c707a2":"Derieved these hyperparameters after referring some other notebooks as well as executing the hyperparameter tuning, and selecting the best parameters for our model!","a68582a8":"### Do Up-Vote! If this was helpful!"}}