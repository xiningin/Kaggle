{"cell_type":{"56b1ac3d":"code","fd71908d":"code","71a0061f":"code","eef2c35c":"code","be2bec5c":"code","081df970":"code","212d7a94":"code","e1b2d6ff":"code","ffe01a4e":"code","d9f171da":"code","d7a75b87":"code","8cf61639":"code","7814408c":"code","86f91091":"code","98851a78":"code","d8839377":"code","652c4741":"code","3b995d92":"code","ed4b7a20":"code","b0c2885f":"code","cfa10f64":"code","b4371568":"code","d02ad0e0":"code","894cafb4":"code","2658e954":"code","995d7f7d":"code","80a7c91f":"code","9194ea5a":"code","3d70379f":"code","647fa934":"code","b9479692":"code","80477a72":"code","40ad634a":"code","094d720b":"code","4c0ad7d6":"code","d19cfdf4":"code","7667e64b":"code","b7de856d":"code","f66e18da":"code","1c2d75c1":"code","db329650":"code","a44df0bb":"markdown","c2813da0":"markdown","8e62a730":"markdown","1387d1c0":"markdown","2d6c4e27":"markdown","c2368d39":"markdown","3f5065da":"markdown","1c8b7bd9":"markdown","b56ad4e6":"markdown","02b71fa5":"markdown","1bbbee88":"markdown","09ec6957":"markdown","bae67195":"markdown","c64e0109":"markdown","aa1e2214":"markdown","e41cfbdb":"markdown","5fab9c91":"markdown","ac4d85fb":"markdown","79eb610b":"markdown","5fa8b925":"markdown","c34ea0e2":"markdown","b58507f0":"markdown","718dcbd8":"markdown","9a907af2":"markdown","6ab6e5c2":"markdown","1b0b4a17":"markdown","a1bde66b":"markdown","41a7f193":"markdown","3279d50f":"markdown","964ff2eb":"markdown"},"source":{"56b1ac3d":"import random\nfrom collections import defaultdict\nfrom pprint import pprint\nfrom scipy.interpolate import griddata\nfrom matplotlib.ticker import MaxNLocator\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport pandas as pd\nimport numpy as np\nimport io ","fd71908d":"# copied from https:\/\/pathfinderkingmaker.fandom.com\/wiki\/Weapons\n# alternatively, we could get from https:\/\/www.d20pfsrd.com\/equipment\/weapons\/\n# official source are paizo books. Ex: https:\/\/www.amazon.com\/gp\/product\/1601252463\n\npathfinder_weapons = \"\"\"\nWeapon \tMedium Base Damage \tLarge Base Damage \tSmall Base Damage \tCritical \tDamage type \tProficiency \tSize \tTraits \tWeight \tCost \nDagger \t1d4 \t? \t1d3 \t19-20\/x2 \tP \tSimple \tLight \t- \t1 \t1\nPunching Dagger \t1d4 \t? \t? \t20\/x3 \tP \tSimple \tLight \t- \t1 \t?\nLight Mace \t1d4 \t? \t? \t20\/x2 \tB \tSimple \tLight \t- \t4 \t?\nSickle \t1d6 \t? \t? \t20\/x2 \tS \tSimple \tLight \t- \t2 \t?\nClub \t1d6 \t? \t? \t20\/x2 \tB \tSimple \tOne-handed \t- \t3 \t1\nHeavy Mace \t1d8 \t? \t1d6 \t20\/x2 \tB \tSimple \tOne-handed \t- \t6 \t3\nShortspear \t1d6 \t? \t? \t20\/x2 \tP \tSimple \tOne-handed \t- \t3 \t?\nLongspear \t1d8 \t? \t? \t20\/x3 \tP \tSimple \tTwo-handed \t6 ft range \t9 \t?\nQuarterstaff \t1d6 \t? \t1d4 \t20\/x2 \tB \tSimple \tTwo-handed \t- \t4 \t?\nSpear \t1d8 \t? \t1d6 \t20\/x3 \tP \tSimple \tTwo-handed \t- \t6 \t1\nTrident \t1d8 \t? \t1d6 \t20\/x2 \tP \tSimple \tOne-handed \t- \t4 \t4\nDart \t1d4 \t? \t1d3 \t20\/x2 \tP \tSimple \tOne-handed \t20 ft range \t0.5 \t1\nJavelin \t1d6 \t? \t1d4 \t20\/x2 \tP \tSimple \tOne-handed \t30 ft range \t2 \t?\nLight Hammer \t1d4 \t? \t? \t20\/x2 \tB \tMartial \tLight \t- \t2 \t?\nHandaxe \t1d6 \t? \t? \t20\/x3 \tS \tMartial \tLight \t- \t3 \t?\nKukri \t1d4 \t? \t1d3 \t18-20\/x2 \tS \tMartial \tLight \t- \t2 \t?\nLight Pick \t1d4 \t? \t1d3 \t20\/x4 \tP \tMartial \tLight \t- \t3 \t?\nShortsword \t1d6 \t? \t1d4 \t19-20\/x2 \tS \tMartial \tLight \t- \t2 \t3\nStarknife \t1d4 \t? \t1d3 \t20\/x3 \tP \tMartial \tLight \t- \t3 \t24\nBattleaxe \t1d8 \t? \t? \t20\/x3 \tS \tMartial \tOne-handed \t- \t6 \t?\nFlail \t1d8 \t? \t? \t20\/x2 \tB \tMartial \tOne-handed \t- \t? \t?\nLongsword \t1d8 \t? \t1d6 \t19-20\/x2 \tS \tMartial \tOne-handed \t- \t4 \t4\nHeavy Pick \t1d6 \t? \t? \t20\/x4 \tP \tMartial \tOne-handed \t- \t6 \t?\nRapier \t1d6 \t? \t1d4 \t18-20\/x2 \tP \tMartial \tOne-handed \t- \t2 \t5\nScimitar \t1d6 \t? \t1d4 \t18-20\/x2 \tS \tMartial \tOne-handed \t- \t4 \t?\nWarhammer \t1d8 \t? \t? \t20\/x3 \tB \tMartial \tOne-handed \t- \t? \t?\nBardiche \t1d10 \t? \t? \t19-20\/x2 \tS \tMartial \tTwo-handed \t6 ft range \t? \t?\nEarth Breaker \t2d6 \t? \t1d10 \t20\/x3 \tB \tMartial \tTwo-handed \t- \t14 \t10\nFalchion \t2d4 \t? \t1d6 \t18-20\/x2 \tS \tMartial \tTwo-handed \t- \t8 \t19\nHeavy Flail \t1d10 \t? \t? \t19-20\/x2 \tB \tMartial \tTwo-handed \t- \t? \t?\nGlaive \t1d10 \t? \t1d8 \t20\/x3 \tS \tMartial \tTwo-handed \t6 ft range \t10 \t2\nGreataxe \t1d12 \t? \t1d10 \t20\/x3 \tS \tMartial \tTwo-handed \t- \t12 \t18\nGreatsword \t2d6 \t? \t? \t19-20\/x2 \tS \tMartial \tTwo-Handed \t- \t8 \t12\nGreatclub \t1d10 \t? \t? \t20\/x2 \tB \tSimple \tTwo-handed \t- \t8 \t?\nScythe \t2d4 \t? \t1d6 \t20\/x4 \tS \tMartial \tTwo-handed \t- \t10 \t?\nKama \t1d6 \t? \t? \t20\/x2 \tS \tExotic \tLight \t- \t2 \t?\nSai \t1d4 \t? \t? \t20\/x2 \tP \tExotic \tLight \t- \t1 \t?\nEstoc \t2d4 \t? \t? \t18-20\/x2 \tP \tExotic \tOne-handed \t- \t4 \t?\nFalcata \t1d8 \t? \t? \t19-20\/x3 \tS \tExotic \tOne-handed \t- \t4 \t?\nBastard Sword \t1d10 \t? \t? \t19-20\/x2 \tS \tExotic \tOne-handed \t- \t6 \t?\nDueling Sword \t1d8 \t? \t? \t19-20\/x2 \tS \tExotic \tOne-handed \t- \t3 \t?\nTongi \t1d6 \t? \t? \t19-20\/x3 \tP \tExotic \tOne-handed \t- \t4 \t?\nDwarven Waraxe \t1d10 \t? \t? \t20\/x3 \tS \tExotic \tOne-handed \t- \t8 \t?\nOrc Double Axe \t1d8 \t?\/? \t?\/? \t20\/x3 \tS \tExotic \tTwo-handed \tDouble \t15 \t15\nElven Curve Blade \t1d10 \t? \t? \t18-20\/x2 \tS \tExotic \tTwo-handed \t- \t7 \t?\nFauchard \t1d10 \t? \t1d8 \t18-20\/x2 \tS \tExotic \tTwo-handed \t6 ft range \t10 \t?\nGnome Hooked Hammer \t1d8\/1d6 \t?\/? \t1d6\/1d3 \t20\/x3, 20\/x4 \tP \tExotic \tTwo-handed \tDouble \t5 \t10\nTwo-bladed Sword \t1d8 \t?\/? \t?\/? \t19-20\/x2 \tS \tExotic \tLight \tDouble \t10 \t?\nDwarven Urgosh \t1d8\/1d6 \t?\/? \t?\/? \t20\/x3 \tS \tExotic \tTwo-handed \tDouble \t12 \t?\nEverburning Torch \t1d3+1 \t? \t? \t20\/x2 \tB\/F \tSimple \tLight \tSplash Fire Damage \t1 \t27\nNunchaku \t1d6 \t? \t? \t20\/x2 \tB \tExotic \tLight\n\"\"\"\nbasic_weapon_df = pd.read_csv(io.StringIO(pathfinder_weapons), sep=\" \\t\", engine='python')\nbasic_weapon_df","71a0061f":"enlarge_weapon = \"\"\"\nTiny Weapon Damage \tSmall Weapon Damage \tMedium Weapon Damage \tLarge Weapon Damage \tHuge Weapon Damage\n\u2014 \t1 \t1d2 \t1d3 \t1d4\n1 \t1d2 \t1d3 \t1d4 \t1d6\n1d2 \t1d3 \t1d4 \t1d6 \t1d8\n1d3 \t1d4 \t1d6 \t1d8 \t2d6\n1d4 \t1d6 \t1d8 \t2d6 \t3d6\n1d6 \t1d8 \t1d10 \t2d8 \t3d8\n1d8 \t1d10 \t1d12 \t3d6 \t4d6\n1d4 \t1d6 \t2d4 \t2d6 \t3d6\n1d8 \t1d10 \t2d6 \t3d6 \t4d6\n1d10 \t2d6 \t2d8 \t3d8 \t4d8\n2d6 \t2d8 \t2d10 \t4d8 \t6d8\n\"\"\"\nenlarge_weapon_df = pd.read_csv(io.StringIO(enlarge_weapon), sep=\" \\t\", engine='python')\nenlarge_weapon_df","eef2c35c":"def join_enlarge_effect_weapon_df(basic_weapon_df, enlarge_weapon_df):\n    df = basic_weapon_df.merge(enlarge_weapon_df, left_on='Medium Base Damage', right_on='Medium Weapon Damage', suffixes=('', '_comp'))\n    important_columns = \"Weapon \tMedium Base Damage \tLarge Weapon Damage \tHuge Weapon Damage \tSmall Weapon Damage \tCritical \tDamage type \tProficiency \tSize\".split(\" \\t\")\n    return df[important_columns].dropna().copy()\n   \nweapon_df = join_enlarge_effect_weapon_df(basic_weapon_df, enlarge_weapon_df)\nweapon_df\n","be2bec5c":"weapon_df[weapon_df.Size == 'One-handed']","081df970":"def average_damage(desc):\n    add_damage = desc.split(\"+\")\n    first_damage = add_damage[0].split(\"\/\")[0]\n    if len(add_damage)== 1:\n        add_damage = 0\n    else:\n        add_damage = int(add_damage[1])   \n    parts = first_damage.split(\"d\")\n    times = int(parts[0])\n    rng =  int(parts[1])\n    return times * ((1 + rng)\/ 2.0) + add_damage\n    \ndef critical(desc):\n    parts = desc.split('\/')\n    damage_range = parts[0]\n    crit_rolls = int(parts[1].split('x')[1]) - 1\n    crit_rng = (21 - int(parts[0].split('-')[0]))\n    return crit_rng, crit_rolls\n\ndef add_avg_critical_info(df1):\n    df1['avg_damage'] = df1['Medium Base Damage'].apply(average_damage)\n    df1['avg_large_damage'] = df1['Large Weapon Damage'].apply(average_damage)\n    df1['avg_small_damage'] = df1['Small Weapon Damage'].apply(average_damage)\n    df1['avg_huge_damage'] = df1['Huge Weapon Damage'].apply(average_damage)\n    crit_series = df1['Critical'].apply(critical)\n    df1['crit_rng'] = crit_series.apply(lambda x: x[0])\n    df1['crit_rolls'] = crit_series.apply(lambda x: x[1])\n\nadd_avg_critical_info(weapon_df)\nweapon_df","212d7a94":"bab_progression = \"\"\"\nClass \tGrowth Rate\nAlchemist \tMedium\nBarbarian \tHigh\nBard \tMedium\nCleric \tMedium\nDruid \tMedium\nFighter \tHigh\nInquisitor \tMedium\nKineticist \tMedium\nMagus \tMedium\nMonk \tMedium\nPaladin \tHigh\nRanger \tHigh\nKnife Master \tMedium\nRogue \tMedium\nSorcerer \tLow\nWizard \tLow\nAldori Swordlord \tHigh\nArcane Trickster \tLow\nDragon Disciple \tMedium\nDuelist \tHigh\nEldritch Knight \tHigh\nMystic Theurge \tLow\nStalwart Defender \tHigh\n\"\"\"\n\ndef high_bab_progression(level):\n    return level\n\ndef medium_bab_progression(level):\n    return level - (level + 3) \/\/ 4\n\ndef low_bab_progression(level):\n    return level \/\/ 2\n\nbab_progression_by_class = dict(\n    High=high_bab_progression,\n    Medium=medium_bab_progression,\n    Low=low_bab_progression\n)\n\nbab_progression_df = pd.read_csv(io.StringIO(bab_progression), sep=\" \\t\", engine='python')\nbab_progression_df = bab_progression_df.set_index('Class')\nbab_progression_df","e1b2d6ff":"saving_throws = \"\"\"\nLevel \tHigh Saving Throw Progression \tLow Saving Throw Progression\n1 \t+2 \t+0\n2 \t+3 \t+0\n3 \t+3 \t+1\n4 \t+4 \t+1\n5 \t+4 \t+1\n6 \t+5 \t+2\n7 \t+5 \t+2\n8 \t+6 \t+2\n9 \t+6 \t+3\n10 \t+7 \t+3\n11 \t+7 \t+3\n12 \t+8 \t+4\n13 \t+8 \t+4\n14 \t+9 \t+4\n15 \t+9 \t+5\n16 \t+10 \t+5\n17 \t+10 \t+5\n18 \t+11 \t+6\n19 \t+11 \t+6\n20 \t+12 \t+6\n\"\"\"\nsaving_throws_df = pd.read_csv(io.StringIO(saving_throws), sep=\" \\t\", engine='python')\nsaving_throws_df = saving_throws_df.set_index('Level')\nsaving_throws_df","ffe01a4e":"def good_saving_throws(level):\n    return level \/\/ 2\n\ndef poor_saving_throws(level):\n    return level \/\/ 3\n\nsaving_throws_dict = dict(\n    High=good_saving_throws,\n    Low=poor_saving_throws\n)\n\nsaving_throws_by_class = \"\"\"\nClass \tFortitude \tReflex \tWill\nAlchemist \tHigh \tHigh \tLow\nBarbarian \tHigh \tLow \tLow\nBard \tLow \tHigh \tHigh\nCleric \tHigh \tLow \tHigh\nDruid \tHigh \tLow \tHigh\nFighter \tHigh \tLow \tLow\nInquisitor \tHigh \tLow \tHigh\nMagus \tHigh \tLow \tHigh\nMonk \tHigh \tHigh \tLow\nPaladin \tHigh \tLow \tHigh\nRanger \tHigh \tHigh \tLow\nRogue \tLow \tHigh \tLow\nSorcerer \tLow \tLow \tHigh\nWizard \tLow \tLow \tHigh\n\"\"\"\nsaving_throws_by_class_df = pd.read_csv(io.StringIO(saving_throws_by_class), sep=\" \\t\", engine='python')\nsaving_throws_by_class_df = saving_throws_by_class_df.set_index('Class')\nsaving_throws_by_class_df","d9f171da":"def attack(bab, base_dmg, mod_att, mod_dmg, mod_not_crit, crit_rolls, crit_range, crit_bonus, ac, **kwargs):\n    att_dice = random.randint(0, 20) + 1\n    if att_dice == 20:\n        # automatic hit\n        return roll_damage(base_dmg, mod_dmg, mod_not_crit) + \\\n               roll_criticals(base_dmg, mod_dmg,\n                              crit_rolls)\n    if att_dice + mod_att >= ac and att_dice > 1:\n        if att_dice >= crit_range and confirm_critical(bab, mod_att, crit_bonus, ac):\n            return roll_damage(base_dmg, mod_dmg, mod_not_crit) \\\n                   + roll_criticals(base_dmg, mod_dmg, crit_rolls)\n        else:\n            return roll_damage(base_dmg, mod_dmg, mod_not_crit)\n    return 0\n\n\ndef roll_criticals(base_dmg, mod_dmg, crit_rolls):\n    return (base_dmg + mod_dmg) * crit_rolls\n\n\ndef roll_damage(base_dmg, mod_dmg, mod_not_crit):\n    return base_dmg + mod_dmg + mod_not_crit\n\n\ndef confirm_critical(bab, mod_att, crit_bonus, ac):\n    return bab + mod_att + crit_bonus >= ac\n\n\ndef multi_attack(bab, base_dmg, mod_att, mod_dmg, mod_not_crit, crit_rolls, crit_range, crit_bonus, initial_ac,\n                 current_ac, bewildering_injury=0, **kwargs):\n    \"\"\"Multiples attacks based on BAB.\n    On Pathfinder,Starting from 6 BAB, every 5 BAB adds an additional attack with X - 5 BAB for a Full Attack\n    round \"\"\"\n    temp_bab = bab\n    attack_sum = 0\n    while temp_bab > 0:\n        attack_result = attack(temp_bab, base_dmg, mod_att, mod_dmg, mod_not_crit, crit_rolls,\n                               crit_range, crit_bonus, current_ac)\n        if current_ac == initial_ac and bewildering_injury > 0 and attack_result > 0:\n            current_ac = current_ac - bewildering_injury\n        attack_sum = attack_sum + attack_result\n\n        temp_bab = temp_bab - 5\n    return attack_sum\n\n\ndef haste_multi_attack(bab, base_dmg, mod_att, mod_dmg, mod_not_crit, crit_rolls, crit_range,\n                       crit_bonus,\n                       initial_ac,\n                       current_ac,\n                       bewildering_injury=0, **kwargs):\n    \"\"\"Haste adds add one attack with biggest bonus on the full Attack round\"\"\"\n    attack_result = attack(bab, base_dmg, mod_att, mod_dmg, mod_not_crit, crit_rolls, crit_range, crit_bonus,\n                           current_ac)\n    if current_ac == initial_ac and bewildering_injury > 0 and attack_result > 0:\n        current_ac = current_ac - bewildering_injury\n    return attack_result + multi_attack(bab, base_dmg, mod_att, mod_dmg,\n                                        mod_not_crit, crit_rolls, crit_range, crit_bonus,\n                                        initial_ac, current_ac, bewildering_injury)\n","d7a75b87":"animal_fury = {\n   'Weapon': 'Bite',\n   'Medium Base Damage': '1d4',\n   'Large Weapon Damage': '1d6',\n   'Small Weapon Damage': '1d3',\n   'Critical': None,\n   'avg_damage': 2.5,\n   'avg_large_damage': 3.5,\n   'avg_small_damage': 2.0,\n   'crit_rng': 0,\n   'crit_rolls': 1\n}","8cf61639":"feats_set = set(\"\"\"Ability Focus \u2014 Bombs\nAccomplished Sneak Attacker\nAgile Maneuvers\nAldori Dueling Mastery\nAlertness\nAllied Spellcaster\nArcane Armor Training\nArcane Armor Mastery\nArcane Strike\nArmor Focus\nArmor Proficiency (Light)\nArmor Proficiency (Medium)\nArmor Proficiency (Heavy)\nAugment Summoning\nBack to Back\nBashing Finish\nBlind\nBlinding Critical\nBoon Companion\nBull Rush\nCautious Fighter\nCleave\nCleaving Finish\nClustered Shots\nCombat Casting\nCombat Expertise\nCombat Mobility\nCombat Reflexes\nCoordinated Defense\nCoordinated Maneuvers\nCornugon Smash\nCrane Riposte\nCrane Style\nCrane Wing\nCritical Focus\nCritical Mastery\nCrushing Blow\nDazzling Display\nDeadly Aim\nDeceitful\nDefensive Combat Training\nDeflect Arrows\nDeft Hands\nDiehard\nDirty Trick\nDisarm\nDodge\nDouble Slice\nDragon Ferocity\nDragon Roar\nDragon Style\nDreadful Carnage\nElemental Focus\nEndurance\nExhausting Critical\nExotic Weapon Proficiency\nExtra Arcane Pool\nExtra Bane Weapon\nExtra Bombs\nExtra Channel\nExtra Lay on Hands\nExtra Performance\nExtra Rage\nExtra Rage Power\nFencing Grace\nFury's Fall\nGreat Cleave\nGreat Fortitude\nGreater Blind Fight\nGreater Bull Rush\nGreater Dirty Trick\nGreater Disarm\nGreater Elemental Focus\nGreater Penetrating Strike\nGreater Shield Focus\nGreater Spell Focus\nGreater Spell Penetration\nGreater Sunder Armor\nGreater Trip\nGreater Two-Weapon Fighting\nGreater Vital Strike\nGreater Weapon Focus\nGreater Weapon Specialization\nHammer the Gap\nImproved Blind Fight\nImproved Cleaving Finish\nImproved Critical\nImproved Great Fortitude\nImproved Initiative\nImproved Iron Will\nImproved Lightning Reflexes\nImproved Precise Shot\nImproved Two-Weapon Fighting\nImproved Unarmed Strike\nImproved Vital Strike\nIntimidating Prowess\nIron Will\nLightning Reflexes\nLingering Performance\nManyshot\nMartial Weapons Proficiency\nMetamagic (Empower Spell)\nMetamagic (Extend Spell)\nMetamagic (Heighten Spell)\nMetamagic (Maximize Spell)\nMetamagic (Quicken Spell)\nMetamagic (Reach Spell)\nMissile Shield\nNatural Spell\nOutflank\nPenetrating Strike\nPersuasive\nPiranha Strike\nPoint-Blank Master\nPoint-Blank Shot\nPower Attack\nPrecise Shot\nPrecise Strike\nPummeling Bully\nPummeling Charge\nPummeling Style\nRapid Shot\nSeize the Moment\nShatter Defenses\nSelective Channel\nShake It Off\nShield Bash\nShield Focus\nShield Master\nShield Proficiency\nShield Wall\nShielded Caster\nSickening Critical\nSkill Focus\nSimple Weapon Proficiency\nSlashing Grace\nSpell Focus\nSpell Penetration\nSpell Specialization\nStaggering Critical\nStealthy\nSteel Soul\nStunning Fist\nSunder Armor\nSuperior Summoning\nTandem Trip\nThrow Anything\nTiring Critical\nTower Shield Proficiency\nToughness\nTrip\nTwo-Weapon Fighting\nVital Strike\nWeapon Finesse\nWeapon Focus\nWeapon Specialization\nWings\"\"\".split(\"\\n\"))\nfeats_set","7814408c":"class Character:\n\n    def __init__(self, **kwargs):\n        super().__init__()\n        self.strength = 10\n        self.dexterity = 10\n        self.constitution = 10\n        self.intelligence = 10\n        self.wisdom = 10\n        self.charisma = 10\n        self.weapons = {'main-hand': {}, 'off-hand': {}}\n        self.mod_att = defaultdict(list)\n        self.mod_dmg = defaultdict(list)\n        self.effects = set()\n        self.ac = 10\n        self.level = 0\n        self.Class = \"NO_CLASS\"\n        self.bab = 0\n        self.crit_bonus = 0  # bonus to confirm the critical\n        self.hold_two_handed = False\n        self.feats = set()\n        self.size_selector = 'avg_damage'\n        self.size = 'medium'\n        self.mod_att_off_hand = 0\n        self.mod_att_main_hand = 0\n        self.bite = None\n\n        for key in kwargs:\n            setattr(self, key, kwargs[key])\n        if 'level' in kwargs:\n            self.set_level(self.level)\n        else:\n            self.set_level(1)\n        if self.size == 'small':\n            self.ac = self.ac + 1\n            self.mod_att['untyped'].append(1)\n            self.size_selector = 'avg_small_damage'\n\n    def set_level(self, level):\n        growth_rate = bab_progression_df.loc[self.Class].to_dict()['Growth Rate']\n        self.bab = bab_progression_by_class[growth_rate](level)\n        self.level = level\n\n    def equip(self, weapon_name, main_hand=True):\n        \"\"\"Wielding a Weapon Two-Handed: When you deal damage with a weapon that you are wielding two-handed,\n        you add 1-1\/2 times your Strength bonus (Strength penalties are not multiplied). You don't get this higher Strength bonus,\n        however, when using a light weapon with two hands. \"\"\"\n        self.hold_two_handed = False  # remove previous two handed weapon\n        weapon_to_equip = weapon_df[weapon_df.Weapon == weapon_name].to_dict('records')[0]\n        if weapon_to_equip['Size'] == 'Two-handed':\n            self.weapons['off-hand'] = {}\n            self.hold_two_handed = True\n            main_hand = True\n        if main_hand:\n            self.weapons['main-hand'] = weapon_to_equip\n        else:\n            self.weapons['off-hand'] = weapon_to_equip\n        self.set_offhand_penalities()\n\n    def get_strength_mod(self):\n        return (self.strength - 10) \/\/ 2\n\n    def get_dexterity_mod(self):\n        return (self.dexterity - 10) \/\/ 2\n\n    def get_mod_att(self, part):\n        add_mod_att = 0\n        for bonus_type, bonus_list in self.mod_att.items():\n            if bonus_type == 'untyped':\n                add_mod_att = add_mod_att + sum(bonus_list)\n            else:\n                add_mod_att = add_mod_att + max(bonus_list)\n\n        if 'finesse' in self.feats:\n            # we should check if the weapon is finessable before apply finesse\n            return self.get_dexterity_mod() + add_mod_att\n        else:\n            if part == 'main-hand':\n                return self.get_strength_mod() + add_mod_att\n        return self.get_strength_mod() + add_mod_att\n\n    def get_mod_dmg(self, part):\n        add_mod_dmg = 0\n        for bonus_type, bonus_list in self.mod_dmg.items():\n            if bonus_type == 'untyped':\n                add_mod_dmg = add_mod_dmg + sum(bonus_list)\n            else:\n                add_mod_dmg = add_mod_dmg + max(bonus_list)\n\n        if 'finesse_training' in self.feats:  # TODO finesse training is not a feat.\n            # we should check if the weapon is finessable before apply finesse\n            return self.get_dexterity_mod() + add_mod_dmg\n        else:\n            if part == 'main-hand':\n                if self.hold_two_handed:\n                    return 3 * self.get_strength_mod() \/\/ 2 + add_mod_dmg                \n                return self.get_strength_mod() + add_mod_dmg\n            if part == 'bite':\n                return self.get_strength_mod() \/\/ 2 + add_mod_dmg\n            # Off-Hand Weapon: When you deal damage with a weapon in your off hand,\n            #  you add only 1\/2 your Strength bonus.\n            #  If you have a Strength Penalty, the entire Penalty applies.\n            return min(self.get_strength_mod() \/\/ 2, self.get_strength_mod()) + add_mod_dmg\n\n    def get_mod_not_crit(self, selected_weapon, sneak_attack):\n        precision_damage = 0\n        if sneak_attack:\n            precision_damage = self.sneak_attack(selected_weapon)\n        return precision_damage + selected_weapon['mod_not_crit'] if 'mod_not_crit' in selected_weapon else 0\n\n    def reduce_person(self):\n        \"\"\"This spell causes instant diminution of a humanoid creature, halving its height, length, and width\n         and dividing its weight by 8. This decrease changes the creature\u2019s size category to the next smaller one. \n         The target gains a +2 size bonus to Dexterity, a -2 size penalty to Strength (to a minimum of 1), and a \n         +1 bonus on attack rolls and AC due to its reduced size.\"\"\"\n        self.strength = max(self.strength - 2, 1)\n        self.dexterity = self.dexterity + 2\n        self.mod_att['untyped'].append(1)\n        self.ac = self.ac + 1  # TODO it is untyped\n        self.effects.add('reduced')\n        self.size_selector = 'avg_small_damage'\n\n    def enlarge(self):\n        \"\"\"This spell causes instant growth of a humanoid creature, doubling its height and multiplying\n        its weight by 8. This increase changes the creature\u2019s size category to the next larger one.\n        The target gains a +2 size bonus to Strength, a -2 size penalty to Dexterity (to a minimum of 1),\n        and a -1 penalty on attack rolls and AC due to its increased size.\"\"\"\n        self.strength = self.strength + 2\n        self.dexterity = max(self.dexterity - 2, 1)\n        self.mod_att['untyped'].append(-1)\n        self.ac = self.ac - 1  # TODO it is untyped\n        self.effects.add('enlarge')\n        self.size_selector = 'avg_large_damage'\n\n    def haste(self):\n        \"\"\"A hasted creature gains a +1 bonus on attack rolls and a +1 dodge bonus to AC and Reflex saves.\n        Any condition that makes you lose your Dexterity bonus to Armor Class (if any) also makes you lose dodge bonuses.\n        \"\"\"\n        self.mod_att['untyped'].append(1)\n        self.ac = self.ac + 1  # TODO it is dogde bonus.\n        self.effects.add('haste')\n        \n    def power_attack(self):\n        \"\"\" You can choose to take a -1 penalty on all melee attack rolls and combat maneuver checks to gain +2 \n        bonus on all melee damage rolls. This bonus to damage is increased by half (+50%) if you are \n        making an attack with a two-handed weapon, a one handed weapon using two hands, or a primary natural weapon\n        that adds 1-1\/2 times your Strength modifier on damage rolls. This bonus to damage is halved (\u201350%) if you \n        are making an attack with an off-hand weapon or secondary natural weapon. When your base attack bonus \n        reaches +4, and every 4 points thereafter, the penalty increases by \u20131 and the bonus to damage \n        increases by +2. You must choose to use this feat before making an attack roll, and its effects last until \n        your next turn.The bonus damage does not apply to touch attacks or effects that do not deal hit point\n        damage.\"\"\"\n        if not 'Power Attack' in self.feats:\n            return\n        power_att_modifier = (self.bab \/\/ 4)\n        self.mod_att['untyped'].append(-power_att_modifier)\n        damage_modifier = power_att_modifier\n        if self.hold_two_handed: \n            damage_modifier = damage_modifier * 3 \/\/ 2\n        # TODO bug power attack offhand \n        self.mod_dmg['untyped'].append(damage_modifier)\n        \n    def legendary_proportion(self):\n        \"\"\"Your target grows to legendary proportions, increasing in size by one category. The creature\u2019s height doubles and \n        its weight increases by a factor of 8. The target gains a +6 size bonus to its Strength score and a +4 size bonus to \n        its Constitution score. It gains a +6 size bonus to its natural armor, and DR 10\/adamantine.\"\"\" \n        if 'enlarge' in self.effects:\n            self.reduce_person()\n        self.strength = self.strength + 6\n        self.size_selector = 'avg_huge_damage'\n        \n\n    def rage(self):\n        \"\"\"        \n        While in a rage, a barbarian gains a +2 bonus on melee attack rolls, melee damage rolls, thrown weapon damage rolls,\n        and Will saving throws. In addition, she takes a \u20132 penalty to Armor Class. \"\"\"\n        if self.Class != 'Barbarian':\n            return\n        self.mod_att['untyped'].append(2)\n        self.mod_dmg['untyped'].append(2)        \n        self.ac = self.ac - 2  # TODO it is untyped\n        self.effects.add('rage')\n\n    def greater_rage(self):\n        if self.Class != 'Barbarian' or self.level < 11:\n            return \n        if 'rage' not in self.effects:\n            self.rage()\n        self.mod_att['untyped'].append(1)\n        self.mod_dmg['untyped'].append(1)         \n        \n        \n    def lethal_stance_bonus(self):\n        initial_level = 2\n        if self.level == 1:\n            return\n        return 1 + (self.level - initial_level) \/\/ 4\n\n    def lethal_stance(self):\n        \"\"\"The barbarian can focus her strikes. She gains a +1 competence bonus on melee attack rolls and thrown weapon\n         attack rolls. This bonus increases by 1 for every 4 levels the barbarian has. \"\"\"\n        total_bonus = self.lethal_stance_bonus()\n        self.mod_att['competence'].append(total_bonus)\n        \n    def lethal_accuracy(self):\n        \"\"\"While in the lethal stance, the barbarian's critical multiplier for damage increases by 1 (a \u00d72 multiplier \n        becomes \u00d73, a \u00d73 multiplier becomes \u00d74, and a \u00d74 multiplier becomes \u00d75).  \"\"\"\n        for weapon in self.weapons.values():\n             if 'crit_rolls' in weapon:\n                weapon['crit_rolls'] = weapon['crit_rolls'] + 1\n            \n    def critical_focus(self):\n        \"\"\" Prerequisites: Base attack bonus +9.\n        +4 bonus on attack rolls made to confirm critical hits\"\"\"\n        if self.bab >= 9 and 'Critical Focus' in self.feats:\n            self.crit_bonus = self.crit_bonus + 4\n\n    def improved_critical(self):\n        \"\"\"Prerequisite: Proficient with weapon, base attack bonus +8.\n        When using the weapon you selected, your threat range is doubled.\"\"\"\n        if self.bab >= 8 and 'Improved Critical' in self.feats:\n            for weapon in self.weapons.values():\n                if 'crit_rng' in weapon:\n                    weapon['crit_rng'] = weapon['crit_rng'] * 2        \n        \n    def finesse(self):\n        self.feats.add(\"finesse\")\n\n    def finesse_training(self):\n        self.feats.add(\"finesse-training\")\n\n    def sneak_attack(self, target_weapon):\n        if self.Class == 'Knife Master':\n            return self.sneak_stab(target_weapon)\n        if self.Class in ['Rogue']:\n            return (self.level + 1) \/\/ 2 * 3.5\n        return 0\n\n    def sneak_stab(self, target_weapon):\n        weapon_for_stab = \"dagger,kukri,punching,dagger,starknife,sai\".split(\",\")\n        if target_weapon['Weapon'] in weapon_for_stab:\n            return (self.level + 1) \/\/ 2 * 4.5\n        else:\n            return (self.level + 1) \/\/ 2 * 2.5\n\n    def full_attack(self, target_ac, sneak_attack=False, initial_target_ac=0, **kwargs):\n        self.set_offhand_penalities()\n        \"\"\"Here is an excellent problem for code design: Attack will become a 'god object' if we\n        allow it to check all the possible cases. Instead, we should allow Effects to decide how attacks would behave.\n        For simplicity, we will just keep attack with a case for finesse.\"\"\"\n        if not initial_target_ac:\n            initial_target_ac = target_ac\n        bewildering_injury = self.bewildering_injury() if sneak_attack else 0\n        selected_weapon = self.weapons['main-hand']\n        attack_params = dict(bab=self.bab,\n                             base_dmg=selected_weapon['avg_damage'],\n                             mod_att=self.get_mod_att('main_hand') + self.mod_att_main_hand,\n                             mod_dmg=self.get_mod_dmg('main_hand'),\n                             mod_not_crit=self.get_mod_not_crit(selected_weapon, sneak_attack),\n                             crit_rolls=selected_weapon['crit_rolls'],\n                             crit_range=21 - selected_weapon['crit_rng'],\n                             crit_bonus=self.crit_bonus,\n                             initial_ac=initial_target_ac,\n                             current_ac=target_ac,\n                             bewildering_injury=bewildering_injury)\n        if 'hasted' in self.effects:\n            result = haste_multi_attack(**attack_params)\n        else:\n            result = multi_attack(**attack_params)\n        current_target_ac = target_ac\n        if result > 0 and bewildering_injury and initial_target_ac == current_target_ac:\n            current_target_ac = current_target_ac - bewildering_injury\n        if self.weapons['off-hand'] and 'Weapon' in self.weapons['off-hand']:\n            selected_weapon = self.weapons['off-hand']\n            if 'Double Slice' in self.feats:\n                mod_dmg = self.get_mod_dmg('main_hand')\n            else:\n                mod_dmg = self.get_mod_dmg('off-hand')\n            initial_off_hand_attack = dict(bab=self.bab,\n                                           base_dmg=selected_weapon['avg_damage'],\n                                           mod_att=self.get_mod_att('off-hand') + self.mod_att_off_hand,\n                                           mod_dmg=mod_dmg,\n                                           mod_not_crit=self.get_mod_not_crit(selected_weapon, sneak_attack),\n                                           crit_rolls=selected_weapon['crit_rolls'],\n                                           crit_range=21 - selected_weapon['crit_rng'],\n                                           crit_bonus=self.crit_bonus,\n                                           ac=target_ac,\n                                           initial_ac=target_ac,\n                                           current_ac=current_target_ac,\n                                           bewildering_injury=bewildering_injury)            \n            if 'Improved Two-Weapon Fighting' in self.feats:                \n                result += multi_attack(**initial_off_hand_attack)\n            else:\n                result += attack(**initial_off_hand_attack)\n            if result > 0 and bewildering_injury and initial_target_ac == current_target_ac:\n                current_target_ac = current_target_ac - bewildering_injury            \n        if self.bite:\n            result += attack(bab=self.bab,\n                             base_dmg=self.bite['avg_damage'],\n                             mod_att=max(self.get_mod_att('bite') - 5, 1),\n                             mod_dmg=self.get_mod_dmg('bite'),\n                             mod_not_crit=self.get_mod_not_crit(selected_weapon, sneak_attack),\n                             crit_rolls=self.bite['crit_rolls'],\n                             crit_range=21 - self.bite['crit_rng'],\n                             crit_bonus=self.crit_bonus,\n                             ac=current_target_ac)            \n        return result\n\n    def set_offhand_penalities(self):\n        \"\"\"Normal penalties\t\u20136\t\u201310\n           Off-hand weapon is light\t\u20134\t\u20138\n           Two-Weapon Fighting feat\t\u20134\t\u20134\n           Off-hand weapon is light and Two-Weapon Fighting feat\t\u20132\t\u20132 \"\"\"\n        if not self.weapons['off-hand'] or 'Size' not in self.weapons['off-hand']:\n            self.mod_att_off_hand = 0\n            self.mod_att_main_hand = 0\n        else:\n            if 'Two-Weapon Fighting' in self.feats:\n                if self.weapons['off-hand']['Size'] == 'Light':\n                    self.mod_att_off_hand = -2\n                    self.mod_att_main_hand = -2\n                else:\n                    self.mod_att_off_hand = -4\n                    self.mod_att_main_hand = -4\n            else:\n                if self.weapons['off-hand']['Size'] == 'Light':\n                    self.mod_att_off_hand = -8\n                    self.mod_att_main_hand = -4\n                else:\n                    self.mod_att_off_hand = -10\n                    self.mod_att_main_hand = -6\n                    \n\n    def bewildering_injury(self):\n        if self.Class in ['Rogue', 'Knife Master']:\n            return max(4 + (self.level - 4) \/\/ 6 * 2, 8)\n        return 0\n    \n    def bull_strength(self):\n        self.strength = self.strength + 4\n        \n    def cat_grace(self):\n        self.strength = self.strength + 4\n        \n    def dead_accuracy(self):\n        \"\"\"If the barbarian scores a critical threat while in the lethal stance, she\n        applies double the lethal stance's bonus when rolling to confirm the critical. \"\"\"\n        self.crit_bonus = self.lethal_stance_bonus()\n        \n    def animal_fury(self):\n        self.bite = animal_fury.copy()\n\ncharacter_methods = [method_name for method_name in dir(Character) if callable(getattr(Character, method_name)) and '__' not in method_name]         ","86f91091":"def add_flaming(target_weapon):\n    target_weapon['mod_not_crit'] = 3.5\n    if 'trait' not in target_weapon:\n        target_weapon['effect'] = set()\n    target_weapon['effect'].add('flaming')","98851a78":"def process_character_description(character_description):\n    levels = character_description.split(\"\\n\")\n    filter_levels = filter(lambda line: line.strip(), levels)\n    feats_per_level = [line.split(\":\") for line in filter_levels]\n    return {int(level): [feat.strip() for feat in feats.split(\",\")] for level, feats in feats_per_level }\n\ndef apply_ability(character, ability):\n    get_character_method_name = lambda x: \"_\".join([y.lower() for y in x.split(\" \")])\n    if ability in feats_set:\n        character.feats.add(ability)\n    if get_character_method_name(ability) in character_methods:\n        getattr(character, get_character_method_name(ability))()\n\ndef get_damage_curve_by_ac(character, ac_range, reset_interval, repetitions, sneak_flag=False, bewildering_injury=False):\n    character_curve = []\n    for ac in ac_range:\n        character_dmg = 0\n        last_character_dmg = 0\n        current_ac = ac\n        for count in range(repetitions):\n            if count % reset_interval == 0:\n                current_ac = ac\n            else:\n                if last_character_dmg > 0 and current_ac == ac and sneak_flag and bewildering_injury:\n                    current_ac = ac - character.bewildering_injury()\n            last_character_dmg = character.full_attack(current_ac, sneak_attack=sneak_flag, initial_target_ac=ac)\n            character_dmg = last_character_dmg + character_dmg\n        character_curve.append(character_dmg \/ repetitions)\n    return character_curve \n\ndef general_simulation_level_by_level(char, feats_by_level, ac_range, level_range, stat_choice=\"strength\", sneak_flag=False, bewildering_injury=False):    \n    x_curve = []\n    y_curve = []\n    char_curves = []\n    diff_curves = []\n    for level in level_range:\n        char.set_level(level)\n        if level % 4 == 0:\n            if stat_choice == \"strength\":            \n                char.strength = char.strength + 1\n            if stat_choice == \"dexterity\":\n                char.dexterity = char.dexterity + 1\n        if level in feats_by_level:\n            for feat in feats_by_level[level]:                \n                apply_ability(char, feat) \n        y_curve.append([level] * len(ac_range))\n        x_curve.append(np.array(ac_range))\n        char_curves.append(get_damage_curve_by_ac(char, ac_range, 3, l, sneak_flag, bewildering_injury))\n    return x_curve, y_curve, char_curves","d8839377":"amiri = Character(\n    strength=16,\n    dexterity=13,\n    constitution=16,\n    intelligence=10,\n    wisdom=12,\n    charisma=10,\n    Class='Barbarian'\n)\namiri_description = \"\"\"\n1: haste, enlarge, rage, bull strength, Power Attack\n2: lethal stance\n4: dead accuracy\n6: animal fury\n8: Improved Critical\n10: Critical Focus\n\"\"\"\nbarbarian_feats_per_level =  process_character_description(amiri_description)\namiri.set_level(10)\namiri.equip('Greataxe')\nfor feats in barbarian_feats_per_level.values():\n    for feat in feats:\n        apply_ability(amiri, feat)\namiri.strength = amiri.strength + 2  # two level ups + bull_strength\nadd_flaming(amiri.weapons['main-hand'])\n\namiri.full_attack(15)\nvars(amiri)","652c4741":"noknok = Character(\n    strength=8,\n    dexterity=23,\n    constitution=12,\n    intelligence=12,\n    wisdom=9,\n    charisma=8,\n    Class='Knife Master',\n    size='small',\n    level=7\n)\nnoknok.set_level(10)\nnoknok.feats.add('Two-Weapon Fighting')\nnoknok.feats.add('finesse')\nnoknok.feats.add('finesse-training')\nnoknok.feats.add('Improved Two-Weapon Fighting')\nnoknok.dexterity = noknok.dexterity + 5  # level up + cat grace\nnoknok.equip('Kukri')\nnoknok.equip('Kukri', main_hand=False)\nfor weapon in noknok.weapons.values():\n    add_flaming(weapon)\nnoknok.haste()\nnoknok.full_attack(15)\nvars(noknok)","3b995d92":"l = 1000\nac_range = range (12, 35)\n\ndef plot_scatter_comparison(curve1, curve2, title):\n    my_dpi = 100    \n    fig = plt.figure(figsize=(400\/my_dpi, 400\/my_dpi), dpi=my_dpi)    \n    plt.scatter(ac_range,  curve1, alpha=0.5)\n    plt.scatter(ac_range, curve2, alpha=0.5, color='red')\n    ax = plt.gca()\n    ax.set_title(title)\n    ax.set_xlabel('AC')\n    ax.set_ylabel('Damage')    ","ed4b7a20":"noknok_curve = get_damage_curve_by_ac(noknok, ac_range, 3, l, True, True)\namiri_curve = get_damage_curve_by_ac(amiri, ac_range, 3, l)  \nplot_scatter_comparison(noknok_curve, amiri_curve, \"Amiri vs NokNok level 10 expected avg damage per round (3 rounds)\")","b0c2885f":"noknok_curve = get_damage_curve_by_ac(noknok, ac_range, 1, l, True, True)    \nplot_scatter_comparison(noknok_curve, amiri_curve, \"Amiri vs NokNok level 10 expected avg damage per round (no cummulative bewildering injury)\")","cfa10f64":"noknok_curve = get_damage_curve_by_ac(noknok, ac_range, 1, l, False)    \nplot_scatter_comparison(noknok_curve, amiri_curve, \"Amiri vs NokNok level 10 expected avg damage per round (no sneak attack)\")","b4371568":"better_barbarian = Character(\n    strength=18,\n    dexterity=12,\n    constitution=14,\n    intelligence=10,\n    wisdom=12,\n    charisma=10,\n    Class='Barbarian'\n)\n\nbetter_barbarian.set_level(10)\nbetter_barbarian.equip('Falchion')\nfor feats in barbarian_feats_per_level.values():\n    for feat in feats:\n        apply_ability(amiri, feat)\nadd_flaming(better_barbarian.weapons['main-hand'])","d02ad0e0":"noknok_curve = get_damage_curve_by_ac(noknok, ac_range, 3, l, True, True)    \nbetter_barbarian_curve =  get_damage_curve_by_ac(better_barbarian, ac_range, 3, l)    \nplot_scatter_comparison(noknok_curve, better_barbarian_curve, \"Barbarian vs NokNok level 10 expected avg damage per round (3 rounds)\")","894cafb4":"import matplotlib.colors as colors\ndef plot_3d_projection(xi, yi, zi, title):    \n    my_dpi = 100\n    fig = plt.figure(figsize=(800\/my_dpi, 800\/my_dpi), dpi=my_dpi)    \n    ax = plt.axes(projection='3d')\n    xig, yig = np.meshgrid(xi, yi)\n    surf = ax.plot_surface(xig, yig, zi, cmap='RdBu')\n    fig.colorbar(surf, shrink=0.5, aspect=5, ax=ax, pad=0.2)\n    ax.yaxis.set_major_locator(MaxNLocator(integer=True))\n    ax.xaxis.set_major_locator(MaxNLocator(integer=True))\n    ax.set_title(title)\n    ax.set_xlabel('AC')\n    ax.set_ylabel('Level')\n    ax.set_zlabel('Damage')\n\ndef plot_3d_projection_from_curves(x_curve, y_curve, z_curve, title):\n    xline = np.array(x_curve).flatten()\n    yline = np.array(y_curve).flatten()\n    zline = np.array(z_curve).flatten()\n    xi = np.linspace(xline.min(),xline.max(),(len(zline)\/\/3))\n    yi = np.linspace(yline.min(),yline.max(),(len(zline)\/\/3))\n    zlinei = griddata((xline, yline), zline, (xi[None,:], yi[:,None]), method='nearest')\n    plot_3d_projection(xi, yi, zlinei, title)\n\ndef plot_heat_map(xxline, yyline, zzline, z_min, z_max, title, norm=None):\n    fig, ax = plt.subplots()\n    if norm:        \n        c = ax.pcolormesh(xxline, yyline, zzline, cmap='RdBu',norm=norm,  shading='auto')\n    else:\n        c = ax.pcolormesh(xxline, yyline, zzline, cmap='RdBu', vmin=z_min, vmax=z_max, shading='auto')\n    ax.axis([xxline.min(), xxline.max(), yyline.min(), yyline.max()])\n    ax.yaxis.set_major_locator(MaxNLocator(integer=True))\n    ax.xaxis.set_major_locator(MaxNLocator(integer=True))    \n    ax.set_title(title)\n    ax.set_xlabel('AC')\n    ax.set_ylabel('Level')\n    fig.colorbar(c, ax=ax)\n    \ndef plot_heat_map_from_curves(xcurve, yline, zcurve, title, center_at_zero=False):\n    xline, yline, zline = np.array(xcurve), np.array(ycurve), np.array(zcurve)\n    zzline = zline.reshape(len(xline), len(yline))\n    if center_at_zero:\n        norm = colors.TwoSlopeNorm(vmin=zzline.min(), vcenter=0, vmax=zzline.max())\n        plot_heat_map(xline, yline, zzline, zzline.min(), zzline.max(), title, norm)\n    else:\n        plot_heat_map(xline, yline, zzline, zzline.min(), zzline.max(), title)\n    \ndef plot_heat_map_ratio(xcurve, ycurve, zcurve, zcurve2, title, vmin=0.5, vmax=2):\n    xline, yline, zline1, zline2 = np.array(xcurve), np.array(ycurve), np.array(zcurve), np.array(zcurve2)\n    zline3 = (1 + zline1) \/ (zline2 +1)\n    zzline3 = zline3.reshape(len(xline), len(yline))\n    plot_heat_map(xline, yline, zzline3, title, zzline3.min(), zzline3.max(), \n                  norm=colors.LogNorm(vmin=vmin, vmax=vmax))    \n    ","2658e954":"l = 1000\nbase_barbarian = dict(\n    strength=18,\n    dexterity=12,\n    constitution=14,\n    intelligence=10,\n    wisdom=12,\n    charisma=10,\n    Class='Barbarian'\n)\n\nbarbara2_description = \"\"\"\n1: haste, enlarge, rage, bull strength, Power Attack\n2: lethal stance\n4: dead accuracy\n6: animal fury\n8: Improved Critical\n10: Critical Focus\n11: greater rage\n13: legendary proportion\n16: lethal_accuracy         \n\"\"\"\nbarbara2 = Character(**base_barbarian)\nbarbara2.equip('Falchion')\nbarbarian2_feats_per_level =  process_character_description(barbara2_description)\nadd_flaming(barbara2.weapons['main-hand'])\n\ndef setup_rogue(rogue):\n    rogue.equip('Kukri')\n    rogue.equip('Kukri', main_hand=False)\n    for weapon in rogue.weapons.values():\n        add_flaming(weapon)\n\nunchained_rogue =  Character(\n    strength=8,\n    dexterity=18,\n    constitution=14,\n    intelligence=12,\n    wisdom=11,\n    charisma=12,\n    Class='Rogue'\n)\nsetup_rogue(unchained_rogue)\nrogue_description = \"\"\"\n1: haste, reduce person, Two-Weapon Fighting, finesse, cat_grace\n2: finesse-training\n9: Improved Two-Weapon Fighting\n11: Improved Critical\n13: Critical Focus\n\"\"\"\nrogue_feats_per_level =  process_character_description(rogue_description)\nac_range = range (15, 35)\nlevel_range = range(1, 21)","995d7f7d":"x_curve, y_curve, better_barbarian_curves = general_simulation_level_by_level(barbara2, barbarian2_feats_per_level, ac_range, level_range, stat_choice=\"strength\")","80a7c91f":"_, _, unchained_rogue_curves = general_simulation_level_by_level(unchained_rogue, rogue_feats_per_level, ac_range, level_range, stat_choice=\"dexterity\", sneak_flag=True, bewildering_injury=True)","9194ea5a":"xcurve, ycurve = x_curve, y_curve\nplot_3d_projection_from_curves(xcurve, ycurve, better_barbarian_curves, 'Barbarian Damage per level vs AC')","3d70379f":"plot_3d_projection_from_curves(xcurve, ycurve, unchained_rogue_curves, 'Rogue Damage per level vs AC')","647fa934":"bab_rogue_diff_curves =  np.array(unchained_rogue_curves) - np.array(better_barbarian_curves)\nplot_3d_projection_from_curves(xcurve, ycurve, bab_rogue_diff_curves, 'Damage diff: Rogue vs Barbarian per (Level, AC)')","b9479692":"plot_heat_map_from_curves(ac_range, level_range, better_barbarian_curves, 'Barbarian Damage per (Level, AC)')","80477a72":"plot_heat_map_from_curves(ac_range, level_range, unchained_rogue_curves, 'Rogue Damage per (Level, AC)')","40ad634a":"plot_heat_map_from_curves(ac_range, level_range, bab_rogue_diff_curves, 'Damage diff Barbarian vs Rogue per (Level, AC)', center_at_zero=True)","094d720b":"plot_heat_map_ratio(ac_range, level_range, unchained_rogue_curves, better_barbarian_curves, 'Ratio output Rogue\/Barbarian per (Level, AC)')","4c0ad7d6":"base_barbarian = dict(\n    strength=18,\n    dexterity=12,\n    constitution=14,\n    intelligence=10,\n    wisdom=12,\n    charisma=10,\n    Class='Barbarian'\n)\nbarbara_build = \"\"\"\n1: haste, enlarge, rage, bull strength, Power Attack\n2: lethal stance\n4: dead accuracy\n6: animal fury\n8: Improved Critical\n10: Critical Focus\n11: greater rage\n\"\"\"\nbarbara1 = Character(**base_barbarian)\nbarbara1.equip('Falchion')\nbarbara2 = Character(**base_barbarian)\nbarbara2.equip('Kukri')\nbarbara2.equip('Kukri', main_hand=False)\n# Double Slice\ntwf_barbara_build = \"\"\"\n1: haste, enlarge, rage, bull strength, Two-Weapon Fighting\n2: lethal stance\n3: Weapon Focus\n4: dead accuracy\n5: Double Slice\n6: animal fury\n7: Improved Two-Weapon Fighting\n9: Improved Critical\n11: Critical Focus, greater rage\n\"\"\"\nbarbara1_feats =  process_character_description(barbara_build)\nbarbara2_feats =  process_character_description(twf_barbara_build)\nac_range = range (15, 35)\nlevel_range = range(1, 21)\n\nx_curve, y_curve, barb1 = general_simulation_level_by_level(barbara1, barbara1_feats, ac_range, level_range, stat_choice=\"strength\")\n_, _, barb2  = general_simulation_level_by_level(barbara2, barbara2_feats, ac_range, level_range, stat_choice=\"strength\")","d19cfdf4":"plot_3d_projection_from_curves(xcurve, ycurve, barb1, 'Greataxe Barbarian per (Level, AC)')","7667e64b":"plot_3d_projection_from_curves(xcurve, ycurve, barb2, 'Falchion Barbarian per (Level, AC)')","b7de856d":"plot_3d_projection_from_curves(xcurve, ycurve, np.array(barb2) - np.array(barb1), 'diff (Level, AC)')","f66e18da":"base_barbarian = dict(\n    strength=18,\n    dexterity=12,\n    constitution=14,\n    intelligence=10,\n    wisdom=12,\n    charisma=10,\n    Class='Barbarian'\n)\nbarbara_build = \"\"\"\n1: haste, enlarge, rage, bull strength, Two-Weapon Fighting\n2: lethal stance\n3: Weapon Focus\n4: dead accuracy\n6: animal fury\n7: Improved Two-Weapon Fighting\n9: Improved Critical\n11: Critical Focus, greater rage\n13: legendary proportion\n16: lethal_accuracy\n\"\"\"\nbarbara1 = Character(**base_barbarian)\nbarbara1.equip('Falchion')\nfor weapon in barbara1.weapons.values():\n        add_flaming(weapon)\n        \nwtf_barbarian = dict(\n    strength=19,\n    dexterity=15,\n    constitution=14,\n    intelligence=10,\n    wisdom=10,\n    charisma=10,\n    Class='Barbarian'\n)\nbarbara2 = Character(**wtf_barbarian)\ntwf_barbara_build = \"\"\"\n1: haste, enlarge, rage, bull strength, Two-Weapon Fighting\n2: lethal stance\n3: Weapon Focus\n4: dead accuracy\n5: Double Slice\n6: animal fury, belt of dexterity2\n7: Improved Two-Weapon Fighting\n9: Improved Critical\n11: Critical Focus, greater rage\n13: legendary proportion\n16: lethal_accuracy  \n\"\"\"\nbarbara2.equip('Two-bladed Sword')\nbarbara2.equip('Two-bladed Sword', main_hand=False)\nfor weapon in barbara2.weapons.values():\n        add_flaming(weapon)\n\nbarbara1_feats =  process_character_description(barbara_build)\nbarbara2_feats =  process_character_description(twf_barbara_build)\nac_range = range (15, 35)\nlevel_range = range(1, 21)\n\nx_curve, y_curve, barb1 = general_simulation_level_by_level(barbara1, barbara1_feats, ac_range, level_range, stat_choice=\"strength\")\n_, _, barb2  = general_simulation_level_by_level(barbara2, barbara2_feats, ac_range, level_range, stat_choice=\"strength\")\n\nplot_3d_projection_from_curves(xcurve, ycurve, np.array(barb2) - np.array(barb1), 'Double Axe Barbarian vs Falchion Barbarian (Level, AC)')","1c2d75c1":"plot_3d_projection_from_curves(xcurve, ycurve, np.array(unchained_rogue_curves) - np.array(barb2), 'Kukris Rogue vs Double Axe Barbarian  (Level, AC)')\nplot_heat_map_from_curves(ac_range, level_range, np.array(unchained_rogue_curves) - np.array(barb2), 'Kukris Rogue vs Double Axe Barbarian per (Level, AC)', center_at_zero=True)","db329650":"plot_3d_projection_from_curves(xcurve, ycurve, np.array(barb2), 'Double Axe Barbarian Damage (Level, AC)')","a44df0bb":"### Reseting AC (no cummulative bewildering injury) \nWhat if we always reset the AC? For example, if we need to engange a new enemy at every round. ","c2813da0":"### Now, let us apply these effects on the Weapon list","8e62a730":"### Plot functions","1387d1c0":"The next section allows us to mix all the these document with a character specification and run attacks simulations against an specific AC.","2d6c4e27":"### Rogue curve - level by level against different ACs","c2368d39":"### Finally, just to make our tests easier, let us calculate the average damage for each one of these weapons","3f5065da":"## Combat Rules -  Attack","1c8b7bd9":"## HeatMap visualization\n\nLet us try to visualize the previous results with a HeatMap with x-axis for level, y-axis for AC.","b56ad4e6":"## Saving Throws\n\nSaving throws are determined by class and level. The progression of saving throws are only two type: good or poor. Below, the table shows the progression of saving according with these two types.","02b71fa5":"### Rogue Damage per Level, AC","1bbbee88":"### Proportional comparison between Barbarian and Rogue damage output","09ec6957":"# Deep Simulation","bae67195":"## Amiri vs NokNok\n\nLet us now run 10000 attacks and see the results. To make it little bit more realist, we are going to restart the AC each 3 rounds.","c64e0109":"### Disablig Sneak Attack - Barbarians Wins!\n\nLet us disable the sneak attack to see how bad NokNok can get","aa1e2214":"## Better Barbarian vs NokNok\n\nLet us say that Amiri is not ideal. Let us see some Barbarian build recomendation.","e41cfbdb":"# Martial: Character and Weapons\n\n## Basic Weapon Table\n\nLet us start with basic weapon table. It would be useful for character optimization. Pathfinder rules impose limitation regarding which weapon a character can use. Basically, without the proper weapon proficiency, a character cannot use a weapon. Fortunatelly, a character can get the proficiency by their class selection or choosen a proper feat.","5fab9c91":"### Barbarian Damage per Level, AC","ac4d85fb":"## Enlarge and Reduce effect\n\nEnlarge Person and Reduce Person will affect way more than the character itself. One of biggest effects on \"Enlarge Person\" is amplifying the item hold by the character. The table bellow shows that effect.","79eb610b":"### Barbarian curve - level by level against different ACs","5fa8b925":"### Diff Damage between Rogue and Barbarian per (Level, AC)","c34ea0e2":"## NokNok\n\nCompare to Amiri, NokNok is way more optimized character. His stats are focused on the areas that matter most. On top of that he is already a small character.","b58507f0":"\nLet us start with 3 rounds comparison with NokNok","718dcbd8":"## Basic Attack Bonus (BAB)\n\nFor the good or the bad, Pathfinder implements an incremental increase on attack bonus. There are 3 types of progression: High (increase one BAB per level), Medium (increase at 3\/4 per level) and Low (increase at 1\/2 per level)","9a907af2":"# Pathfinder D20 and simulation\n\nThe purpose of this notebook is to present an easy approach to compare different classes of Pathfinder Characters in terms of damage output for those that look for optimized characters.\n\nFor example, there are two general ways to optimize Damage in Pathfinder based on meele characters: Strength and Dexterity-based characters. Each way will branch in different feat options. For instance, Dexterity players can opt for Two-Weapon Fighting, Duel Sword style, or Flurry of flow. Strength can opt for Two-Handed Weapons, shield Wielding and different ways to get buffs.\n\nA recurrent discussion is regarding Rogue-class. At first glance, 1d6 for every 2 levels sounds like a big advantage compared to other classes. Some people would argue that an optimized strength character would surpass the supposed Rogue damage output even on Rogue ideal scenarios: access to Sneak Attack, full-round attack, etc.\n\nThis notebook should allow us to compare, for example, multiple builds of Rogue and Barbarian, or a Barbarian equipped with a Falchion vs a Barbarian equipped with GreatAxes and so on. It is still ongoing project and many feats and classes where not implemented yet. \n\nThe input ideally should be a text-based of character description with feat\/spells choices per level. Example:\n```\n(\n    strength=18,\n    dexterity=12,\n    constitution=14,\n    intelligence=10,\n    wisdom=12,\n    charisma=10,\n    Class='Barbarian'\n)\nfeat_options = \"\"\"\n1: haste, enlarge, rage, bull strength, Two-Weapon Fighting\n2: lethal stance\n3: Weapon Focus (Orc Double Axe)\n4: Dead Accuracy\n6: animal fury\n7: Improved Two-Weapon Fighting\n9: Improved Critical\n11: Critical Focus, greater rage\n13: legendary proportion\n16: lethal_accuracy\n20: Might Rage\n\"\"\"\nequip: Orc Double Axe\n```\n\n*Important Notes*:\nThe AC here does not translate directly to the AC in game. During the course of the game, many magic items, spells (viar party member, wands or scrolls), and  buffs will be available for the character. For example, a +5 Greataxe would not be available for the character at level 1. But, we can imagine that would happen at some point before the character reaches the level 20. To compensate these, the game system will bring enemies with even higher AC.\n\nThe assumption here is: if Build A with Greataxe deals more damage than Build B with Kukris then Build A with Greataxes + 5 will also deal more damage than Build B with Kukris +5.  \n\nNow, it would only make our comparison harder. So, for simplicity, we are comparing the character with their own feats and few key spells: Haste, Bull Strength\/Cat's Grace, Enlarge Person\/ Reduce Person and Legendary Proportion. The reason for that it would be not reasonable to compare a builds that relies on Strength modifier for attack and damage rolls, Weapon Size and Haste against builds (for example, Rogue builds) that use a stat (Dexterity) for attack rolls and Weapon Size is not important.\n\n*Some Results*: So far, Rogue with Sneak Attack and Kukris would give consistenly more damage than Barbarian with a Falchion until the target \"relative AC\" reaches  26 when the hit is very rare (the expected damage would be around 20). TWF Barbarian with Double Axe way more effective  than a 2H Falchion Barbarian and would almost double the damage output.","6ab6e5c2":"## Saving Throw Progression by Class\n\nNow, we can derive the information about the saving throw knowing the class and level with the help of the table bellow.","1b0b4a17":"Now, I will setup two characters... The Barbarian Amiri and the Knife Master NokNok.\n## Amiri\n\nFor otimization, we are giving Amiri a GreatAxe, Haste  and Enlarge. As we can see on Weapons dataframe, an Enlarged GreatAxe provides 3d6 damage. Now, I am adding an non-critical damage because it will be added to NokNok weapons too. For simplicity, Amiri will use only the rage and lethal stance.","a1bde66b":"# Power Attack on Barbarian","41a7f193":"## Simulation level by level","3279d50f":"# Final Thoughts\n\nAs we can see, a rogue until level 4 should be considered an elder citizen and should be carried by the other group members. From Level 4, Rogue is at least a par with Barbarian Character. At AC from 25 to 30, Rogue and Barbarian are very close. The sweet spot between 24-22 AC favors slightly Barbarians. Everything bellow that favors a Rogue Character and that difference would be accentuated at the highest levels.","964ff2eb":"##  The difference Graph - Rogue vs Barbarian\n\n(positive values favor Rogue)"}}