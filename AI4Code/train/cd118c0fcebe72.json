{"cell_type":{"b059191e":"code","ccba6388":"code","8f3af1a9":"code","d1313623":"code","b60cddbf":"code","b086a8aa":"code","381b08a0":"code","aceedd2d":"code","059f0f1d":"code","fd53b69c":"code","c173c747":"code","548988dd":"code","af90ffaa":"code","ea21e41b":"code","b91a2f54":"markdown","1927c6a2":"markdown","e621c62f":"markdown","f2df98b5":"markdown"},"source":{"b059191e":"import numpy as np\nimport matplotlib.pyplot as plt\n\nseed = 5       \nN  = 2.**8     # increments\n\ndef Brownian(seed, N):\n    \n    np.random.seed(seed)                         \n    dt = 1.\/N                                    # time step\n    b = np.random.normal(0., 1., int(N))*np.sqrt(dt)  # brownian increments\n    W = np.cumsum(b)                             # brownian path\n    return W, b\n\n\n# brownian increments\nb = Brownian(seed, N)[1]\n\n# brownian motion\nW = Brownian(seed, N)[0]\nW = np.insert(W, 0, 0.)  ","ccba6388":"# brownian increments\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (10,8)\nxb = np.linspace(1, len(b), len(b))\nplt.plot(xb, b)\nplt.title('Brownian Increments')","8f3af1a9":"# brownian motion\nxw = np.linspace(1, len(W), len(W))\nplt.plot(xw, W)\nplt.title('Brownian Motion')","d1313623":"# GBM Exact Solution\n\n# Parameters\n#\n# So:     initial stock price\n# mu:     returns (drift coefficient)\n# sigma:  volatility (diffusion coefficient)\n# W:      brownian motion\n# T:      time period\n# N:      number of increments\n\ndef GBM(So, mu, sigma, W, T, N):    \n    t = np.linspace(0.,1.,N+1)\n    S = []\n    S.append(So)\n    for i in range(1,int(N+1)):\n        drift = (mu - 0.5 * sigma**2) * t[i]\n        diffusion = sigma * W[i-1]\n        S_temp = So*np.exp(drift + diffusion)\n        S.append(S_temp)\n    return S, t\n\nSo = 55.25\nmu = 0.15\nsigma = 0.4\nW = Brownian(seed, N)[0]\nT = 1\n#N = 2.**6\n\nsoln = GBM(So, mu, sigma, W, T, N)[0]    # Exact solution\nt = GBM(So, mu, sigma, W, T, N)[1]       # time increments for  plotting\n\nplt.plot(t, soln)\nplt.ylabel('Stock Price, $')\nplt.title('Geometric Brownian Motion')","b60cddbf":"So = 55.25\nmu = 0.15\nsigma = 0.4\nseed = 22\nW = Brownian(seed, N)[0]\nT = 1.\n#N = 2.**6\n\nsoln = GBM(So, mu, sigma, W, T, N)[0]    # Exact solution\nt = GBM(So, mu, sigma, W, T, N)[1]       # time increments for  plotting\n\nplt.plot(t, soln)\nplt.ylabel('Stock Price, $')\nplt.title('Geometric Brownian Motion')","b086a8aa":"pip install quandl","381b08a0":"import quandl\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nstart = \"2016-01-01\"\nend = \"2016-12-31\"\n\ndf = quandl.get(\"WIKI\/AAPL\", start_date = start, end_date = end)\n\nprint (df.head())  # taking a look at the first 5 rows","aceedd2d":"adj_close = df['Adj. Close']\ntime = np.linspace(1, len(adj_close), len(adj_close))\n\nplt.plot(time, adj_close)","059f0f1d":"def daily_return(adj_close):\n    returns = []\n    for i in range(0, len(adj_close)-1):\n        today = adj_close[i+1]\n        yesterday = adj_close[i]\n        daily_return = (today - yesterday)\/yesterday\n        returns.append(daily_return)\n    return returns\n\nreturns = daily_return(adj_close)\n#252 is number of trading days\nmu = np.mean(returns)*252.           # drift coefficient\nsig = np.std(returns)*np.sqrt(252.)  # diffusion coefficient\n\nprint (mu, sig)","fd53b69c":"# GBM Exact Solution\n\n# Parameters\n#\n# So:     initial stock price\n# mu:     returns (drift coefficient)\n# sigma:  volatility (diffusion coefficient)\n# W:      brownian motion\n# T:      time period\n# N:      number of increments\n\ndef GBM(So, mu, sigma, W, T, N):    \n    t = np.linspace(0.,1.,N+1)\n    S = []\n    S.append(So)\n    for i in range(1,int(N+1)):\n        drift = (mu - 0.5 * sigma**2) * t[i]\n        diffusion = sigma * W[i-1]\n        S_temp = So*np.exp(drift + diffusion)\n        S.append(S_temp)\n    return S, t\n\nseed = 11\nSo = adj_close[0]            # Initial AAPL stock price (01\/01\/2016)\nW = Brownian(seed, N)[0]\nT = 1.\nN = 2.**8    # Discretization by 2^8 or 256\n\nsoln = GBM(So, mu, sig, W, T, N)[0]    # Exact solution\nt = GBM(So, mu, sig, W, T, N)[1]       # time increments for  plotting\nplt.plot(t, soln)\nplt.ylabel('AAPL Stock Price, $')\nplt.title('Geometric Brownian Motion - AAPL')","c173c747":"# adjusting the original time array from days to years\ntime = np.linspace(1, len(adj_close), len(adj_close))\ntime = [i\/252. for i in time]\n\nplt.plot(time, adj_close, label = 'Actual')\nplt.plot(t, soln, label = 'GBM (seed = 11)', ls='--')\n\nplt.ylabel('AAPL Stock Price, $')\nplt.title('Geometric Brownian Motion - AAPL')\n\nplt.legend(loc = 'upper left')","548988dd":"T = 1.\n#N = 2.**6\nSo = adj_close[0]\n\nseed = 7\nW = Brownian(seed, N)[0]\nsoln2 = GBM(So, mu, sig, W, T, N)[0]    \n\nseed = 18\nW = Brownian(seed, N)[0]\nsoln3 = GBM(So, mu, sig, W, T, N)[0]    \n\n# adjusting the original time array from days to years\ntime = np.linspace(1, len(adj_close), len(adj_close))\ntime = [i\/252. for i in time]\n\nplt.plot(time, adj_close, label = 'Actual')\nplt.plot(t, soln, label = 'GBM (seed = 11)', ls = '--')\nplt.plot(t, soln2, label = 'GBM (seed = 7)', ls = '--')\nplt.plot(t, soln3, label = 'GBM (seed = 18)', ls = '--')\n\nplt.ylabel('AAPL Stock Price, $')\nplt.title('Geometric Brownian Motion - AAPL')\n\nplt.legend(loc = 'upper left')","af90ffaa":"#N = 2.**6\nSo = adj_close[0]\n\nseed = 7\nW = Brownian(seed, N)[0]\nsoln2 = GBM(So, mu, sig, W, T, N)[0]    \n\nplt.plot(t, soln2, label = 'GBM (seed = 7)', ls = '--')\n\nplt.ylabel('AAPL Stock Price, $')\nplt.title('Geometric Brownian Motion - AAPL')\n\nplt.legend(loc = 'upper left')","ea21e41b":"# Exact solution - GBM Model\nseed = 7\nSo = adj_close[0]            # Initial AAPL stock price (01\/01\/2016)\nW = Brownian(seed, N)[0]\nT = 1.\n#N = 2.**6\n\nsoln = GBM(So, mu, sig, W, T, N)[0]    # Exact solution\nt = GBM(So, mu, sig, W, T, N)[1]       # time increments for  plotting\nplt.plot(t, soln, label ='GBM')\n\n\n# Euler Maruyama Approximation\ndef EM(So, mu, sigma, b, T, N, M):\n    dt = M * (1\/N)  # EM step size\n    L = N \/ M\n    wi = [So]\n    for i in range(0,int(L)):\n        Winc = np.sum(b[(M*(i-1)+M):(M*i + M)])\n        w_i_new = wi[i]+mu*wi[i]*dt+sigma*wi[i]*Winc\n        wi.append(w_i_new)\n    return wi, dt\n\n\n# Changing the time step sizes\n#\n# dt = 0.03125\nb = Brownian(7, N)[1]    # Brownian increments \nM = 1                    \nL = N\/M\nEM_approx_1 = EM(So, mu, sig, b, T, N, M)[0]\ntime_EM_1 = np.linspace(0.,1.,L+1)\n\n# dt = 0.0625\nb = Brownian(7, N)[1]    # Brownian increments \nM = 4                    \nL = N\/M\nEM_approx_2 = EM(So, mu, sig, b, T, N, M)[0]\ntime_EM_2 = np.linspace(0.,1.,L+1)\n\n\nplt.plot(time_EM_1, EM_approx_1, label = 'dt = 0.03125', ls ='--')\nplt.plot(time_EM_2, EM_approx_2, label = 'dt = 0.0625', ls ='--')\n\n\nplt.ylabel('AAPL Stock Price, $')\nplt.title('Geometric Brownian Motion - AAPL')\n\nplt.legend(loc = 'upper left')","b91a2f54":"** Reference : ** * John Sullivan on Stock Price Dynamics*","1927c6a2":"# Brownian Approximation on Stock Price of AAPL","e621c62f":"Since we have a simple case, a closed form solution exists\nS(t)=S0 * exp[(\u03bc\u2212(\u03c3^2)\/2)t+\u03c3Wt]\n","f2df98b5":"*A comparison between closed form solution and Euler-Maruyama Approximation*"}}