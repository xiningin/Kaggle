{"cell_type":{"7fd73c9c":"code","18ae1997":"code","99c27a4f":"code","35655560":"code","bd5ad661":"code","9efb1c92":"code","83438a4d":"code","d012a076":"code","d5de0f86":"code","03b1fdc1":"code","0966949c":"code","cf8ab892":"code","5132bea0":"code","31190e1e":"code","434aeaea":"code","2ecdb598":"code","58d7d62b":"code","e19787a7":"code","a27fe3ca":"code","a359bc8f":"code","bfcec047":"code","36ec30a4":"code","be609ce4":"code","9624b4a3":"code","bbe8fdc2":"code","b03235f6":"code","abbb69e8":"code","92b1af9b":"code","aabdbce3":"code","6f649cb1":"code","50030a25":"code","19e7ec15":"code","3003fcf0":"code","72a54bec":"code","19108115":"code","91d9fe9b":"code","a64facea":"code","f057c3c9":"markdown","71b697b6":"markdown","03613a07":"markdown","d1bd8de0":"markdown","b6a5c3e9":"markdown","0d786231":"markdown","d4508278":"markdown","e677f22a":"markdown","8ed5e792":"markdown","1b21a7ca":"markdown","1c685305":"markdown","958f0631":"markdown","2f65023b":"markdown","39ae42f4":"markdown","bf5b9252":"markdown"},"source":{"7fd73c9c":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# ML tools\nimport h2o\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator","18ae1997":"# import data\ndf = pd.read_csv('..\/input\/loan-data\/loan_data.csv')\ndf.head()","99c27a4f":"# data overview\ndf.info()","35655560":"# basic stats\ntarget = 'not.fully.paid'\nprint(df[target].value_counts())\ndf[target].value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","bd5ad661":"features_num = ['int.rate', 'installment', 'log.annual.inc',\n                'dti', 'fico', 'days.with.cr.line',\n                'revol.bal', 'revol.util',\n                'inq.last.6mths', 'delinq.2yrs']","9efb1c92":"# basic stats\ndf[features_num].describe()","83438a4d":"# plot distribution of numerical features\nfor f in features_num:\n    plt.figure(figsize=(8,4))\n    df[f].plot(kind='hist', bins=30)\n    plt.title(f)\n    plt.grid()\n    plt.show()","d012a076":"plt.figure(figsize=(8,2))\nplt.boxplot(df['revol.bal'], vert=False)\nplt.title('revol.bal - Boxplot')\nplt.grid()\nplt.show()","d5de0f86":"plt.figure(figsize=(8,2))\nplt.boxplot(np.log10(1+df['revol.bal']), vert=False)\nplt.title('revol.bal - Boxplot \/ log-transformed')\nplt.grid()\nplt.show()","03b1fdc1":"corr_pearson = df[features_num].corr(method='pearson')\ncorr_spearman = df[features_num].corr(method='spearman')\n\nfig = plt.figure(figsize = (9,7))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (9,7))\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","0966949c":"# example of scatter plot\nsns.jointplot(data=df, x='fico', y='int.rate', kind='hex')\nplt.show()","cf8ab892":"# example of scatter plot\nsns.jointplot(data=df, x='revol.util', y='int.rate', kind='hex')\nplt.show()","5132bea0":"features_cat = ['credit.policy', 'purpose', 'pub.rec']","31190e1e":"# plot distribution of categorical features\nfor f in features_cat:\n    plt.figure(figsize=(14,4))\n    df[f].value_counts().plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","434aeaea":"# plot target vs binned numerical features using mosaic plot\nplt_para_save = plt.rcParams['figure.figsize'] # remember plot settings\n\nfor f in features_num:\n    \n    # add binned version of each numerical feature first\n    new_var = f + '_bin'\n    df[new_var] = pd.qcut(df[f], 10, duplicates='drop')\n    \n    # then create mosaic plot\n    plt.rcParams['figure.figsize'] = (16,5) # increase plot size for mosaics\n    mosaic(df, [new_var, target], title='Target vs ' + f + ' [binned]')\n    plt.show()\n    \n# reset plot size again\nplt.rcParams['figure.figsize'] = plt_para_save","2ecdb598":"# plot target vs features using mosaic plot\nplt_para_save = plt.rcParams['figure.figsize'] # remember plot settings\n\nfor f in features_cat:\n    plt.rcParams['figure.figsize'] = (16,5) # increase plot size for mosaics\n    mosaic(df, [f, target], title='Target vs ' + f + ' [binned]',\n           label_rotation=90)\n    plt.show()\n    \n# reset plot size again\nplt.rcParams['figure.figsize'] = plt_para_save","58d7d62b":"# select predictors\npredictors = features_num + features_cat\nprint('Number of predictors: ', len(predictors))\nprint(predictors)","e19787a7":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","a27fe3ca":"# upload data frame in H2O environment\ndf_hex = h2o.H2OFrame(df)\n\n# force categorical target\ndf_hex[target] = df_hex[target].asfactor()\n\n# train \/ test split (70\/30)\ntrain_perc = 0.7\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","a359bc8f":"# define Linear Model\nfit_1 = H2OGeneralizedLinearEstimator(family = 'binomial',\n                                      nfolds = 5,\n                                      alpha = 0, # 0:Ridge (L2), 1:LASSO (L1)\n                                      lambda_search = True,\n                                      score_each_iteration = True,                                          \n                                      seed=12345)","bfcec047":"# train model\nt1 = time.time()\nfit_1.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","36ec30a4":"# show cross validation metrics\nfit_1.cross_validation_metrics_summary()","be609ce4":"# show coefficients\nfit_1.coef()","9624b4a3":"# variable importance plot\nfit_1.varimp_plot(-1)","bbe8fdc2":"# confusion matrix with manual threshold - here we try to achieve a symmetric outcome\ntt = 0.2419\nconf_train_man = fit_1.confusion_matrix(train=True, thresholds=tt)\nconf_train_man.show()","b03235f6":"# confusion matrix on cross validation\nconf_cv_man = fit_1.confusion_matrix(xval=True, thresholds=tt)\nconf_cv_man.show()","abbb69e8":"# training performance - AUC\nperf_train = fit_1.model_performance(train=True)\nperf_train.plot()","92b1af9b":"# cross validation performance - AUC\nperf_cv = fit_1.model_performance(xval=True)\nperf_cv.plot()","aabdbce3":"# calc performance on test test\nperf_test = fit_1.model_performance(test_hex)\n\n# ROC Curve - Test Set\nperf_test.plot()","6f649cb1":"# confusion matrix using our manual threshold\nconf_test_man = perf_test.confusion_matrix(thresholds=tt)\nconf_test_man.show()","50030a25":"# calc corresponding accuracy\nconf_list_temp = conf_test_man.to_list()\nn_matrix = sum(conf_list_temp[0]) + sum(conf_list_temp[1]) \nacc_t1_test = (conf_list_temp[0][0]+conf_list_temp[1][1]) \/ n_matrix\nprint('Accuracy:', np.round(acc_t1_test,6))","19e7ec15":"# predict on test set (extract probabilities only)\npred_test = fit_1.predict(test_hex)['p1']\npred_test = pred_test.as_data_frame().p1","3003fcf0":"# plot test set predictions (probabilities)\nplt.figure(figsize=(7,5))\nplt.hist(pred_test, bins=100)\nplt.title('Predictions on Test Set')\nplt.grid()\nplt.show()","72a54bec":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='credit.policy');","19108115":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='int.rate');","91d9fe9b":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='fico');","a64facea":"# partial dependence plot (on training data)\nfit_1.pd_plot(train_hex, column='purpose');","f057c3c9":"<a id='4'><\/a>\n# Target vs Features","71b697b6":"# Table of Contents\n* [Target Exploration](#1)\n* [Numerical Features](#2)\n* [Categorical Features](#3)\n* [Target vs Features](#4)\n* [Fit Model](#5)\n* [Partial Dependence Plots](#6)","03613a07":"<a id='6'><\/a>\n# Partial Dependence Plots","d1bd8de0":"### Scatter Plots:","b6a5c3e9":"<a id='3'><\/a>\n# Categorical Features","0d786231":"### Categorical Features","d4508278":"<a id='5'><\/a>\n# Fit Model","e677f22a":"<a id='1'><\/a>\n# Target Exploration","8ed5e792":"### Training\/CV - Performance","1b21a7ca":"### Test Set - Performance","1c685305":"<a id='2'><\/a>\n# Numerical Features","958f0631":"### Variable Importance","2f65023b":"### Correlations:","39ae42f4":"### Numerical Features","bf5b9252":"### More details:"}}