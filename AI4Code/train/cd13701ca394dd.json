{"cell_type":{"7b69b2fc":"code","ac196c04":"code","391027a9":"code","722c8f34":"code","d34811d2":"code","a843d4df":"code","30c7aaea":"code","0126586c":"code","103b783f":"code","09d0f198":"code","72dce394":"code","f1ffe89d":"markdown","77814bd8":"markdown","43d8fb9d":"markdown","97d52774":"markdown","eea99e32":"markdown","e3aa8ce9":"markdown","901075a0":"markdown","5aff350e":"markdown","ca67a0c3":"markdown","38727f8f":"markdown","f72f54b2":"markdown","21aa5b1a":"markdown","ca3859c1":"markdown","f55eb616":"markdown","34a3636e":"markdown","b363363f":"markdown","142e3d23":"markdown","8ace9cb9":"markdown","b676de10":"markdown","6d85fcfb":"markdown","d0b91dc3":"markdown","e2c62267":"markdown","f777621c":"markdown"},"source":{"7b69b2fc":"import pandas as pd \nimport numpy as np\nimport os\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nimport random\n\nfrom tqdm.notebook import tqdm\nfrom collections import defaultdict\n\n%matplotlib inline","ac196c04":"PATH = \"\/kaggle\/input\/alaska2-image-steganalysis\/\"\nIMAGE_IDS = os.listdir(os.path.join(PATH, 'Cover'))\nN_IMAGES = len(IMAGE_IDS)\nALGORITHMS = ['JMiPOD', 'JUNIWARD', 'UERD']","391027a9":"sample_submission = pd.read_csv(os.path.join(PATH, 'sample_submission.csv'))\n\nprint(f\"Number of training samples: {len(os.listdir(os.path.join(PATH, 'Cover')))} images\")\nprint(f\"Number of samples to predict: {sample_submission.shape[0]} images\")","722c8f34":"sample_submission.head()","d34811d2":"# Data Samples\nn_rows = 3\nsamples = np.random.randint(0, N_IMAGES, size=n_rows ** 2)\nf, ax = plt.subplots(n_rows, n_rows, figsize=(14, 10))\n\nfor j, sample_id in enumerate(samples):\n    img = mpimg.imread(os.path.join(PATH, 'Cover', IMAGE_IDS[sample_id]))\n    ax[j \/\/ n_rows, j % n_rows].imshow(img)\n\nplt.tight_layout()\n","a843d4df":"for img_id in tqdm(random.choices(IMAGE_IDS, k=1000)):\n    img = mpimg.imread(os.path.join(PATH, 'Cover', img_id))\n    assert img.shape == (512, 512, 3)\n","30c7aaea":"# Data Samples\nn_rows = 3\nsamples = np.random.randint(0, N_IMAGES, size=n_rows)\nsamples_r = np.repeat(samples, repeats=n_rows)\nf, ax = plt.subplots(n_rows, n_rows, figsize=(14, 10))\n\nfor j, sample_id in enumerate(samples_r):\n    for algo in ['Cover'] + ALGORITHMS:\n        img = mpimg.imread(os.path.join(PATH, algo, IMAGE_IDS[sample_id]))\n        ax[j \/\/ n_rows, j % n_rows].imshow(img)\n\nplt.tight_layout()\n","0126586c":"# Data Samples\nn_rows = 3\nsamples = np.random.randint(0, N_IMAGES, size=n_rows)\n\nimg = defaultdict(dict)\nfor sample_id in samples:\n    for algo in ['Cover'] + ALGORITHMS:\n        img[algo][sample_id] = mpimg.imread(os.path.join(PATH, algo, IMAGE_IDS[sample_id]))\n\nf, ax = plt.subplots(n_rows, n_rows, figsize=(14, 10))\n        \nimg_diff = defaultdict(dict)\nfor j, sample_id in enumerate(samples):\n    for k, algo in enumerate(ALGORITHMS):\n        diff_im = (img['Cover'][sample_id] - img[algo][sample_id]) % 255\n        \n        ax[(n_rows * j + k) \/\/ n_rows, (n_rows * j + k) % n_rows].imshow(diff_im)\n        ax[(n_rows * j + k) \/\/ n_rows, (n_rows * j + k) % n_rows].set_title(f'Mean Pixel difference = {diff_im.mean() :.2f}')\n        \n        img_diff[algo][sample_id] = diff_im\n        ","103b783f":"import os\nfrom time import time\nfrom PIL import Image\n\n\ndef lsb_filter(path, n=2):\n    image = Image.open(path)\n\n    mask = (1 << n) - 1  # sets first bytes to 0\n\n    color_data = [(255 * ((channel[0] & mask) + (channel[1] & mask) + (channel[2] & mask)) \/\/ (3 * mask),) * 3 for channel in image.getdata()]\n\n    image.putdata(color_data)\n    \n    return image","09d0f198":"# Data Samples\nn_rows = 4\nsamples = np.random.randint(0, N_IMAGES, size=n_rows)\nf, ax = plt.subplots(n_rows, n_rows, figsize=(14, 10))\n\nlsb_images = defaultdict(dict)\n\nfor j, sample_id in enumerate(samples):\n    for k, algo in enumerate(['Cover'] + ALGORITHMS):\n        img = lsb_filter(os.path.join(PATH, algo, IMAGE_IDS[sample_id]))\n        \n        lsb_images[algo][sample_id] = img\n        ax[(n_rows * j + k) \/\/ n_rows, (n_rows * j + k) % n_rows].imshow(img)\n        ax[(n_rows * j + k) \/\/ n_rows, (n_rows * j + k) % n_rows].set_title(algo)\n","72dce394":"# Data Samples\nn_rows = 4\n#samples = np.random.randint(0, N_IMAGES, size=n_rows)\nf, ax = plt.subplots(n_rows, n_rows - 1, figsize=(14, 10))\n        \n#img_diff = defaultdict(dict)\nfor j, sample_id in enumerate(samples):\n    for k, algo in enumerate(ALGORITHMS):\n        diff_im = (np.asarray(lsb_images['Cover'][sample_id]) - np.asarray(lsb_images[algo][sample_id])) % 255\n        \n        ax[(n_rows * j + k) \/\/ n_rows, (n_rows * j + k) % n_rows].imshow(diff_im)\n        ax[(n_rows * j + k) \/\/ n_rows, (n_rows * j + k) % n_rows].set_title(f'Mean Pixel difference = {diff_im.mean() :.2f}')\n        \n        img_diff[algo][sample_id] = diff_im\n        ","f1ffe89d":"## First Simple EDA","77814bd8":"# Introduction","43d8fb9d":"So we're now know that all images are **512 x 512 x 3**.","97d52774":"* Lets take a look at what the sample submission look like\n* Note here that the term \"Label\" can be misleading because for each image, we want to predict a score and not a Label!","eea99e32":"It would be a bit long to check that all 75k images are the same size, so we randomly sample 1000 of them. (If you know a faster way to load .jpg images, please ping me!)","e3aa8ce9":"Again, we don't see many any message... That's because the hidden message is stored in the least significant bytes!","901075a0":"Quite random pictures, isn't it?\nSeems like all photos are 512 x 512 x 3 : let's check that","5aff350e":"> [Credits](https:\/\/github.com\/ragibson\/Steganography)","ca67a0c3":"Seems like we don't see much difference. But that makes sense, since encrypted information should not be distinguishable just by seing the picture. We will know take a look at the difference in pixels. ","38727f8f":"### Definition of steganography","f72f54b2":"First of all I wanted to say that, as a French student, I'm very happy to find a competition hosted by a French University, it's not so frequent. Thanks to the organizers!","21aa5b1a":"The \"format\" of the competition is strange because we are asked to predict the probability that an image was modified using a steganography algorithm, but there is no clear label. We are provided 75k images and their respective transformation with 4 different algorithms, but we don't know which algorithm may have been applied to each image in the test set. ","ca3859c1":"Even on the LSBs we don't see significant differences. Let's continue digging!","f55eb616":"Someting natural now is to look at a picture in its different versions, e.g. with and without the different algorithms applied.","34a3636e":"This image explains the basic principle of steganography : you change the one or two least significant bytes (LSB). This way, the global modification of the picture is undetectable, but you can carry much information!\n<img align=\"right\" width=\"300\" height=\"300\" src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSWW1PzPeVFMp9F3IhRq4zCN5FP3DvZpI5DEmOsOgH0ud2OhLew&usqp=CAU\">","b363363f":"> The main difference with cryptography is that in cryptography you don't want the user to understand the message. In steganography, you don't want the user to even know that there is a message.","142e3d23":"## Inspect images from crypted folders","8ace9cb9":"### I will update this notebook continuously so stay tuned!","b676de10":"<iframe width=\"891\" height=\"501\" src=\"https:\/\/www.youtube.com\/embed\/TWEXCYQKyDc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","6d85fcfb":"## Analysing Least-Significant Bytes (LSBs)","d0b91dc3":"Here's a short video from Computerphile about Steganography in general and how you can hide information in the pixels of an image. Very instructive if you don't know much about the field!","e2c62267":"## Load Packages","f777621c":"**Definition** : steganography is usually referred to as the techniques and methods that allow to hide information within an innocuous-like cover\nobject. The resulting stego-object resembles, as much as possible,\nthe original cover objet. Therefore it can be sent over an unsecured\ncommunication channel that may be subject to wiretapping by an\neavesdropper. Nowadays, steganography has been mostly developed for digital images because of their massive presence over the\nInternet, the universally adopted JPEG compression scheme and\nits relative simplicity to be modified [[1]](https:\/\/hal-utt.archives-ouvertes.fr\/hal-02542075\/file\/J_MiPOD_vPub.pdf)"}}