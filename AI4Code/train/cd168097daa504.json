{"cell_type":{"67dbeef8":"code","dac8d5dc":"code","089c0aa1":"code","fab4fe0f":"code","128c7cb9":"code","67b4c9a5":"code","546d8fe1":"code","96534e35":"code","b37adefa":"code","e45a5e15":"code","f96a4479":"code","e13a740c":"code","a16db93e":"code","f311225f":"code","59da34c3":"code","f181d818":"code","97f1ae0f":"code","02a9f21c":"code","e22fa0ee":"code","1df1dd6d":"code","c2e6899c":"code","3989f8fe":"code","c2d42d11":"code","61630511":"code","acac951f":"code","f5c405a2":"code","a7cbc1c9":"code","b061324a":"code","bf25e7ab":"code","82314448":"code","d0d48f25":"code","5d33d892":"code","00250b05":"code","53b06436":"code","403f6885":"code","fcbcc529":"code","f76d347d":"code","14ae42ed":"code","552ba125":"code","a4b8567a":"code","ff930fc1":"code","76663184":"code","23646d2e":"code","d8fe067e":"code","e3d83486":"code","703ab47d":"code","1dde7993":"code","3c72ab2c":"code","ad2fa101":"code","6a137dd7":"code","c1078389":"code","88037e07":"code","2e2b4467":"code","9faa4811":"code","e56dfd99":"code","dd2911fc":"code","24b1762a":"code","5e30be58":"code","da746a84":"code","47a331bf":"code","923758ee":"code","025f2d00":"code","e976a66d":"code","c21436db":"code","b72e3058":"code","27477a24":"code","1d9d1ac2":"code","7ee90f64":"code","91900d69":"code","0f61063a":"code","f241320e":"code","22569eeb":"code","29b2a495":"code","a8ab482d":"code","9c8d4d36":"code","1a96b50c":"code","5556e188":"code","9d2738e4":"code","6dc3a5d6":"code","213300bc":"code","72dfdba3":"code","c79ecc4c":"code","d185bb5c":"code","62cf40bd":"code","a198466c":"code","c190f5df":"code","6c7f7dce":"code","40cda378":"code","98e3a0dd":"code","7375cb74":"code","fc2621dd":"code","12c26e60":"code","42bbd2eb":"code","69205a54":"markdown","beb00642":"markdown","60dec6c1":"markdown","f2565bfa":"markdown","0e87857b":"markdown","4e8695de":"markdown","200fd78f":"markdown","6a351247":"markdown","6ce2c840":"markdown","543b08c7":"markdown","151e97c7":"markdown"},"source":{"67dbeef8":"import numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt \r\nimport seaborn as sns\r\nfrom scipy.stats import jarque_bera\r\nfrom IPython.display import display","dac8d5dc":"df = pd.read_csv('..\/input\/placecom-challenge-btds\/train_data.csv')","089c0aa1":"df.head() #seeing the first 5 rows of the data ","fab4fe0f":"df.dtypes #seeing the data types of each column in the data ","128c7cb9":"#seeing the number of numeric and categorical columns in the data \r\ncategorical_columns = df.columns[df.dtypes == 'object']\r\nnumerical_columns = df.columns[df.dtypes != 'object']\r\nnum_char = len(categorical_columns)\r\nnum_numeric = len(numerical_columns)\r\nprint(f'Out of {df.shape[1]} columns, there are {num_char} string columns and {num_numeric} numeric columns')","67b4c9a5":"df.info() #seeing the basic information about the data ","546d8fe1":"df.describe() #seeing descriptive statistics of tthe numerical columns in the data ","96534e35":"#only these columns have null values greater than 0\r\nnull_vals = df.isnull().sum()[df.isnull().sum()>0]\r\nnull_cols = null_vals.index\r\nprint('These columns have null values in them')\r\ndisplay(null_vals)","b37adefa":"#seeing the data types of null columns in the dataset \r\nprint('The data types of these columns are:')\r\nprint(df[null_cols.values].dtypes)","e45a5e15":"#replacing the null values accordingly \r\nreplace_education_na = df['education'].value_counts().idxmax()\r\n#we will replace education with the most frequently occured word as it is a categorical variable\r\nreplace_previous_year_rating_na = df['previous_year_rating'].value_counts().idxmax()\r\n#we will replace the previous year rating with mode because even though the ratings look like they are numeric but they are categorical \r\n# as the employee can either get 1 or 2..... ratings that is why replacing with mode makes more sense ","f96a4479":"df['education'].fillna(replace_education_na, inplace=True)\r\ndf['previous_year_rating'].fillna(replace_previous_year_rating_na, inplace=True)","e13a740c":"def get_percentage(column):\r\n    \"\"\"\"\r\n    This function gets the percentages of all the categories covered in the column \r\n\r\n    usage\r\n\r\n    ```\r\n    percentages = get_percentage(column=column) #returns a pandas series of the percentage of values in each column\r\n    ```\r\n\r\n    Inputs: \r\n    column(string): The column of which you want to get the percentages of each value \r\n    Returns:\r\n    percentage: a pandas series of percentages of each unique category in the column of the dataframe\r\n    \"\"\"\r\n    percentage = df[column].value_counts().apply(lambda x: f'{np.round((x\/df.shape[0])*100)}%')\r\n    return percentage","a16db93e":"def ease_analysis(base_column, column, other_column=None, method='mean',proportion=False):\r\n    \"\"\"\"\r\n    Eases the data analysis for columns where we need to take sum or average of the column\r\n    Returns a dataframe with the appropriate arguments applied \r\n\r\n    Usage \r\n    \r\n    ```\r\n    # goal - we want to see the proportion of men and women in each department\r\n    analyzed_df = ease_analysis(base_column='gender', column='department',method='count',proprtion=True)\r\n    ```\r\n\r\n    Inputs:\r\n    base_column(string) - the column you would like to place first in the groupby clause\r\n    column(string) - the column you would like to place next in the groupby clause\r\n    other_column(string, default:None) - If you would like to perform calculations on another column apart from the above 2 columns\r\n    method(string: chose from [mean,sum,count]) - The calculation you would like to apply on your data \r\n    proportion(boolean, default:False) - If true, it calculates the percentages insetad of the above 3 methods \r\n    Returns:\r\n    a pandas dataframe\r\n    \"\"\"\r\n    method_dict = {'mean':np.mean, 'sum':np.sum, 'count':pd.Series.count}\r\n    if other_column is None:\r\n        grouped_by = df.groupby(by=[base_column, column])[column]\r\n        grouped_df = grouped_by.apply(method_dict[method])\r\n        grouped_df_list = [pd.DataFrame(grouped_df.xs(cat)).rename(columns={column:f'{method}_{cat}'}) for cat in df[base_column].unique()]\r\n    if other_column is not None:\r\n        grouped_by = df.groupby(by=[base_column, column])[other_column]\r\n        grouped_df = grouped_by.apply(method_dict[method])\r\n        grouped_df_list = [pd.DataFrame(grouped_df.xs(cat)).rename(columns={other_column:f'{method}_{cat}'}) for cat in df[base_column].unique()]\r\n    if proportion and other_column is not None:\r\n        grouped_df = pd.DataFrame((grouped_df\/df.groupby(by=[base_column])['employee_id'].count())*100,columns=[other_column])\r\n        method = 'percent'\r\n        grouped_df_list = [pd.DataFrame(grouped_df.xs(cat)).rename(columns={other_column:f'{method}_{cat}'}) for cat in df[base_column].unique()]\r\n    if proportion and other_column is None:\r\n        grouped_df = pd.DataFrame((grouped_df\/df.groupby(by=[base_column])['employee_id'].count())*100,columns=[column])\r\n        method = 'percent'\r\n        grouped_df_list = [pd.DataFrame(grouped_df.xs(cat)).rename(columns={column:f'{method}_{cat}'}) for cat in df[base_column].unique()]\r\n        \r\n    grouped_join = pd.concat(grouped_df_list,axis=1)\r\n    return grouped_join","f311225f":"def check_dominance_gender(data, male_col, female_col):\r\n    \"\"\"\"\r\n    This function checks for the categories in which males have more value and females have more value\r\n    \r\n    Usage\r\n\r\n    ```\r\n    #goal - to check for the departments in which males are more promoted and females are more promoted \r\n    male_dept, female_dept = chceck_dominance_gender(data=df, male_col='percent_m', female_col='percent_f')\r\n    ```\r\n\r\n    Inputs:\r\n    data(pandas dataframe) - the dataframe where the data for male and female is stored \r\n    male_col(string) - the column where the data for males is stored \r\n    female_col(string) - the column where the data for females is stored \r\n    Returns:\r\n    a tuple of numpy arrays \r\n    \"\"\"\r\n    male_more = data[data[male_col]>data[female_col]].index.values\r\n    female_more = data[data[female_col]>data[male_col]].index.values\r\n    return male_more,female_more","59da34c3":"def plot_hist_dist(column):\r\n    \"\"\"\"\r\n    Plots the histogram for each sub category of each gender of the sepcified column.\r\n    Plots the data in a single figure of n*2 where n is the number of unique values in the column\r\n    \r\n    Usage \r\n\r\n    ```\r\n    #goal- to plot the histogram of all the male and females working in each department \r\n    plot_hist_dist(column='department')\r\n    ```\r\n\r\n    Inputs:\r\n    column(str) - The column for which you want to plot the histogram \r\n    Returns:\r\n    None, but shows the plot for histogram of the data\r\n    \"\"\"\r\n    nrows = df[column].nunique()\r\n    ncols=2\r\n    gender_array = np.array(['m','f']*nrows).reshape(nrows, ncols)\r\n    col_list = df[column].unique()\r\n    fig, ax = plt.subplots(figsize=(ncols*6, nrows*6),nrows=nrows, ncols=ncols)\r\n    for i in range(nrows):\r\n        for j in range(ncols):\r\n            plot_df = df[(df[column] == col_list[i])&(df['gender'] == gender_array[i,j])]\r\n            sns.histplot(x=df[(df[column] == col_list[i])&(df['gender'] == gender_array[i,j])]['age'], ax=ax[i,j],kde=True)\r\n            ax[i,j].set_xlabel(column.upper())\r\n            ax[i,j].set_ylabel(f'NUMBER OF {gender_array[i,j].upper()}')\r\n            ax[i,j].set_title(f'DISTRIBUTION OF age of {column.upper()} of {gender_array[i,j].upper()}')\r\n    plt.show()","f181d818":"def plot_box(column):\r\n    \"\"\"\"\r\n    Plots the histogram for each sub category of each gender of the sepcified column.\r\n    Plots the data in a single figure of n*2 where n is the number of unique values in the column\r\n    \r\n    Usage \r\n\r\n    ```\r\n    #goal- to plot the histogram of all the male and females working in each department \r\n    plot_hist_dist(column='department')\r\n    ```\r\n\r\n    Inputs:\r\n    column(str) - The column for which you want to plot the histogram \r\n    Returns:\r\n    None, but shows the plot for histogram of the data\r\n    \"\"\"\r\n    nrows = df[column].nunique()\r\n    ncols=2\r\n    gender_array = np.array(['m','f']*nrows).reshape(nrows, ncols)\r\n    col_list = df[column].unique()\r\n    fig, ax = plt.subplots(figsize=(ncols*6, nrows*6),nrows=nrows, ncols=ncols)\r\n    for i in range(nrows):\r\n        for j in range(ncols):\r\n            plot_df = df[(df[column] == col_list[i])&(df['gender'] == gender_array[i,j])]\r\n            sns.boxplot(y=df[(df[column] == col_list[i])&(df['gender'] == gender_array[i,j])]['age'], ax=ax[i,j])\r\n            ax[i,j].set_title(f'BOXPLOT OF age of {column.upper()} of {gender_array[i,j].upper()}')\r\n    plt.show()","97f1ae0f":"def print_summary(column):\r\n    \"\"\"\r\n    Prints the summary of the data given to it\r\n    Summary includes:\r\n    jarque bera test statistic and the p value for it and the inference of the same\r\n\r\n    Usage \r\n    ```\r\n    #goal - to print the summary for the distribution of age of the employees of all the unique categories of recruitment_channel\r\n    print_summary(column='recruitment_channel')\r\n    ```\r\n\r\n    Inputs:\r\n    column: The column for which you would like to print the summary\r\n    Returns:\r\n    None\r\n    \"\"\"\r\n    n_iter = df[column].nunique()\r\n    col_list = df[column].unique()\r\n    gender_arr = np.array(['m','f']*n_iter).reshape(n_iter,2)\r\n    for i in range(n_iter):\r\n        for j in range(2):\r\n            obs = df[(df['gender'] == gender_arr[i,j])&(df[column] == col_list[i])]['age']\r\n            jb_col_gender, p_value_col_gender = jarque_bera(obs)\r\n            if p_value_col_gender < 0.05:\r\n                print(f'The Jarque Bera score for age of {gender_arr[i,j]} in channel {col_list[i]} is {jb_col_gender} and the p value for the same is {p_value_col_gender}')\r\n                print(f'Hence we can conclude that the age for {gender_arr[i,j]} and channel {col_list[i]} is not normally distributed')\r\n            else:\r\n                print(f'The Jarque Bera score for age of {gender_arr[i,j]} in channel {col_list[i]} is {jb_col_gender} and the p value for the same is {p_value_col_gender}')\r\n                print(f'Hence we can conclude that the age for {gender_arr[i,j]} and channel {col_list[i]} is normally distributed')\r\n        print('\\n')","02a9f21c":"def plot_countplot(col):\r\n    \"\"\"\"\r\n    Plots the countplot for the given column \r\n\r\n    Usage\r\n\r\n    ```\r\n    #goal - to plot countplot of the department column \r\n    plot_countplot('department')\r\n    plt.show()\r\n    ```\r\n\r\n    Inputs:\r\n    col(str) - The column on which you would like to plot a countplot on\r\n    Returns:\r\n    None\r\n    \"\"\"\r\n    fig, ax = plt.subplots(figsize=(16,6))\r\n    sns.countplot(x=df[col],ax=ax, order=df[col].value_counts().index)\r\n    if df[col].nunique()>10:\r\n        ax.tick_params(axis='x',labelrotation=90)\r\n    ax.set_xlabel(col.upper())\r\n    ax.set_ylabel('NUMBER OF EMPLOYEES')\r\n    ax.set_title(f'COUNTPLOT FOR {col.upper()}')","e22fa0ee":"def plot_pie(col):\r\n    \"\"\"\"\r\n    Plots a pie chart on of the given column:\r\n\r\n    Usage\r\n\r\n    ```\r\n    #goal - to plot a pie chart of the education level of employees\r\n    plot_pie('education')\r\n    plt.show()\r\n    ```\r\n\r\n    Inputs:\r\n    col(str) - the column on which you would like to plot a pie chart on\r\n    Returns: \r\n    None \r\n    \"\"\"\r\n    fig, ax = plt.subplots(figsize=(8,8))\r\n    ax.pie(x=df[col].value_counts(), labels=pd.Series(df[col].value_counts().index).apply(str.upper),autopct='%1.0f%%')\r\n    ax.set_title(f'PIE CHART FOR {col.upper()}')","1df1dd6d":"def plot_numeric(col,n_bins=25):\r\n    \"\"\"\"\r\n    Plots a histogram (25 bins by default and kde=True) and a boxplot side by side for a specified column\r\n\r\n    Usage\r\n\r\n    ```\r\n    #goal - plot a histogram with kde plot and boxplot side by side for age column\r\n    plot_numeric('age')\r\n    plt.show()\r\n    ```\r\n\r\n    Inputs:\r\n    col(str) - The column on which you would like to plot on \r\n    bins(integer, default=25) - the number of bins you would like in a histogram\r\n    Returns:\r\n    None\r\n    \"\"\"\r\n    fig, ax = plt.subplots(figsize=(16,6),nrows=1, ncols=2)\r\n    sns.histplot(x=df[col],ax=ax[0], kde=True,bins=n_bins)\r\n    ax[0].set_xlabel(col.upper())\r\n    ax[0].set_ylabel('NUMBER OF EMPLOYEES')\r\n    ax[0].set_title(f'HISTOGRAM FOR {col.upper()}')\r\n    sns.boxplot(y=df[col],ax=ax[1])\r\n    ax[1].set_title(f'BOXPLOT FOR {col.upper()}')","c2e6899c":"fig, ax = plt.subplots(figsize=(12,12))\nsns.heatmap(df.corr(), ax=ax, annot=True,cmap='coolwarm')\nplt.show()","3989f8fe":"countplot_columns = [col for col in categorical_columns if df[col].nunique()>3]\r\npie_chart_columns = [col for col in categorical_columns if col not in countplot_columns]\r\nbinary_columns = ['awards_won?','is_promoted']\r\nnumeric_col = [col for col in df.columns if df[col].dtypes != 'object' and col not in binary_columns and col != 'employee_id']","c2d42d11":"for col in df.columns:\r\n    if col in countplot_columns:\r\n        if df[col].nunique()>10:\r\n            print(f'Seeing the top 5percentage of employees in {col.upper()}')\r\n            display(get_percentage(col)[:5])\r\n        else:\r\n            print(f'Seeing the percentage of employees in {col.upper()}')            \r\n            display(get_percentage(col))\r\n        plot_countplot(col)\r\n        plt.show()\r\n    if col in pie_chart_columns:\r\n        print(f'Seeing the percentage of employees in {col.upper()}')\r\n        display(get_percentage(col))\r\n        plot_pie(col)\r\n        plt.show()\r\n    if col in binary_columns:\r\n        print(f'Seeing the percentage of employees for {col.upper()}')\r\n        display(get_percentage(col))\r\n    if col in numeric_col:\r\n        print(f'Descriptive statistics for {col.upper()} are:')\r\n        display(df[col].describe())\r\n        plot_numeric(col)\r\n        plt.show()\r\n        jb_score, p_value = jarque_bera(df[col])\r\n        print(f'The JB score for {col.upper()} is {jb_score} and the p-value is {p_value}')\r\n        print(f'This suggests that {col.upper()} is not normally distributed')","61630511":"#seeing number of employees in each department in a pie chart\r\nfig, ax = plt.subplots(figsize=(8,8))\r\nax.pie(x=df['department'].value_counts(), labels=[label.upper() for label in df['department'].value_counts().index], autopct='%1.0f%%')\r\nax.set_title('DEPARTMENT WISE DISTRIBUTION OF EMPLOYEES')\r\nplt.show()","acac951f":"median_duration = np.median(df['length_of_service'])\r\nn_less_than_median = df[df['length_of_service']<median_duration]['length_of_service'].count()\r\nn_more_than_median = df[df['length_of_service']>median_duration]['length_of_service'].count()","f5c405a2":"print(f'Since the median duration is {median_duration} and the number of employees who have worked for less than {median_duration} years is {n_less_than_median} and the employees who have worked for more than {median_duration} years is {n_more_than_median}')\r\nprint('We can conclude that the workforce is relatively young as the employees who have worked for less than median duration is more than the number of employees who have worked for more than median durationn')\r\nprint('From the boxplot, we can see that there are a few employees who have worked in the company for more than 15 years')","a7cbc1c9":"base_col_gender = ['department','region','education','recruitment_channel','no_of_trainings']\r\nfor col in base_col_gender:\r\n    analysis_df = ease_analysis(base_column='gender',column=col, method='count',proportion=True)\r\n    print(f'Proportion of male and female in each {col}')\r\n    display(analysis_df)\r\n    male_more, female_more = check_dominance_gender(analysis_df,male_col='percent_m',female_col='percent_f')\r\n    print(f'There are more percentage of men in {male_more} and more percentage of women in {female_more} of {col}')\r\n    analysis_df.plot(kind='bar',figsize=(16,6),xlabel=col.upper(), ylabel = 'PROPORTION OF EMPLOYEES',title=f'PROPORTION OF MEN AND WOMEN IN EACH {col.upper()}')\r\n    plt.show()","b061324a":"base_col_gender_col_dept = ['previous_year_rating','avg_training_score']\r\nfor col in base_col_gender_col_dept:\r\n    analysis_df_new = ease_analysis(base_column='gender',column='department',other_column=col)\r\n    print(f'Seeing the average {col} of men and women in each department')\r\n    display(analysis_df_new)\r\n    male_more_new, female_more_new = check_dominance_gender(data=analysis_df_new,male_col='mean_m',female_col='mean_f')\r\n    print(f'Men have more {col} than women in {male_more_new} departments and women have more {col} than men in {female_more_new} departments')\r\n    analysis_df_new.plot(kind='bar',figsize=(16,6),xlabel='DEPARTMENT',ylabel=f'AVERAGE {col.upper}',title=f'AVERAGE {col.upper()} FOR MEN AND WOMEN IN EACH DEPARTMENT')\r\n    plt.show()","bf25e7ab":"dept_award_df = pd.DataFrame((df.groupby(by=['department'])['awards_won?'].mean())*100)","82314448":"fig, ax = plt.subplots(figsize=(16,6))\r\nsns.barplot(x=dept_award_df.index, y=dept_award_df['awards_won?'], ax=ax, order=dept_award_df.sort_values(by='awards_won?',ascending=False).index)\r\nax.set_xlabel('DEPARTMENT')\r\nax.set_ylabel('PERCENTAGE OF EMPLOYEES')\r\nax.set_title('PERCENTAGE OF EMPLOYEES IN EACH DEPARTMENT WHO WON AWARDS')\r\nplt.show()","d0d48f25":"awards_gender_new = (df.groupby(by=['gender','department'])['awards_won?'].mean())*100\r\nawards_gender_dept = pd.concat([pd.DataFrame(awards_gender_new.xs(gender)).rename(columns={'awards_won?':f'awards_won_{gender}'}) for gender in ['m','f']],axis=1)","5d33d892":"#seeing the percentage of men and women winning awards in each department \r\nawards_gender_df = pd.DataFrame(df.groupby(by=['gender','department'])['awards_won?'].sum())\r\nawards_gender_df['awards_won?'] = (awards_gender_df['awards_won?']\/df.groupby(by=['gender','department'])['department'].count())*100\r\n#we take the percentage since there are different number of employees in each department so percentage brings it to a common scale\r\nawards_gender_dept = pd.concat([pd.DataFrame(awards_gender_df.xs(gender)).rename(columns={'awards_won?':f'percentage_{gender}'}) for gender in ['m','f']],axis=1)","00250b05":"awards_gender_dept.plot(kind='bar',figsize=(16,6),xlabel='DEPARTMENT',ylabel='PERCENTAGE OF EMPLOYEES',\r\ntitle='PERCENTAGE OF AWARD WINNING EMPLOYEES IN EACH DEPARTMENT')\r\nplt.show()","53b06436":"more_female_awards, more_male_awards = check_dominance_gender(data=awards_gender_dept, male_col='percentage_m',female_col='percentage_f')\r\nprint(f'More percentage of women have won awards in {more_female_awards} departments and more percentage of men have won awards in {more_male_awards} departments')","403f6885":"#seeing the average rating of employees in each department\r\nratings_dept = pd.DataFrame(df.groupby(by=['department'])['previous_year_rating'].mean()).rename(columns={'previous_year_rating':'average_previous_year_rating'})\r\nprint('The average rating of emplooyees in each department is:')\r\ndisplay(ratings_dept)","fcbcc529":"fig, ax = plt.subplots(figsize=(16,6))\r\nsns.barplot(x=ratings_dept.index, y=ratings_dept['average_previous_year_rating'],ax=ax, order=ratings_dept['average_previous_year_rating'].sort_values(ascending=False).index)\r\nax.set_xlabel('Department')\r\nax.set_ylabel('Average Rating')\r\nax.set_title('Average previous year ratings of the departments')\r\nplt.show()","f76d347d":"base_col_edu = ['recruitment_channel','region']\r\nfor col in base_col_edu:\r\n    analysis_df_edu = ease_analysis(base_column='education',column=col,method='count',proportion=True)\r\n    print(f'Seeing the {col} for employees of each education level')\r\n    display(analysis_df_edu)\r\n    analysis_df_edu.plot(kind='bar',figsize=(16,6),xlabel=col.upper(), ylabel='PERCENTAHE OF EMPLOYEES',title=f'{col.upper()} FOR EMPLOYEES OF EACH EDUCATION LEVEL')\r\n    plt.show()","14ae42ed":"#seeing the percentage of men and women promoted in each department\r\ngender_promoted_dept = pd.DataFrame((df.groupby(by=['gender','department'])['is_promoted'].sum() \/ df.groupby(by=['gender','department'])['department'].count())*100,columns=['gender_dept'])\r\n#we take percentage because there are different number of men and women in each department and percentage brings them to a common scale \r\ngender_promoted_departments = pd.concat([pd.DataFrame(gender_promoted_dept.xs(gender)).rename(columns={'gender_dept':f'gender_dept_{gender}'}) for gender in ['f','m']],axis=1)\r\nprint('Seeing the percentage of men and women promoted in each department')\r\ndisplay(gender_promoted_departments)","552ba125":"gender_promoted_departments.plot(kind='bar',xlabel='Department',ylabel='Percentage of men and women',title='Percentage of men and women promoted in each department',figsize=(16,6));","a4b8567a":"more_men_promoted, more_women_promoted = check_dominance_gender(data=gender_promoted_departments, male_col='gender_dept_m',female_col='gender_dept_f')","ff930fc1":"print(f'More percentage of women were promoted in {more_women_promoted} departments and more percentage of men were promoted in {more_men_promoted} departments')","76663184":"#seeing the percentage of employees promoted from each region\r\nregion_promoted = (df.groupby(by=['region'])['is_promoted'].sum()\/df.groupby(by=['region'])['region'].count())*100\r\nregion_promoted = region_promoted.sort_values(ascending=False)\r\nprint('Seeing the proportion of employees promoted from each region: (top 5)')\r\ndisplay(region_promoted[:5])","23646d2e":"region_promoted.plot(kind='bar',figsize=(16,6),xlabel='region',ylabel='Percentage of employees promoted',title='Percentage of employees promoted from each region');","d8fe067e":"#Seeing the percentage of men and women promoted from each region \r\nregion_promoted_gender = pd.DataFrame((df.groupby(by=['gender','region'])['is_promoted'].sum()\/df.groupby(by=['gender','region'])['region'].count())*100, columns=['region_promoted_gender'])\r\n#we take percentage since there are different number of men and women in each region and percentage brings it to a common scale\r\nregion_promoted_genderwise = pd.concat([pd.DataFrame(region_promoted_gender.xs(gender)).rename(columns={'region_promoted_gender':f'region_promoted_{gender}'}) for gender in ['f','m']],axis=1)","e3d83486":"region_promoted_genderwise.plot(kind='bar',figsize=(16,6),title='Percentage of male and female employees from each region being promoted',xlabel='Region',ylabel='Percentage of employees');","703ab47d":"more_men_promoted_region, more_women_promoted_region = check_dominance_gender(region_promoted_genderwise,male_col='region_promoted_m',female_col='region_promoted_f')","1dde7993":"print(f'More percentage of women were promoted than men in the regions of {more_men_promoted_region} and more percentage of women were promoted than men in the regions of {more_women_promoted_region}')","3c72ab2c":"#Does winning an award affect the chances of promotion?\r\naward_won_and_promoted = df[(df['is_promoted'] == 1)&(df['awards_won?'] == 1)]['employee_id'].count()\r\nn_promoted = df[df['is_promoted'] == 1]['employee_id'].count()","ad2fa101":"award_promoted_ratio = award_won_and_promoted\/n_promoted\r\nprint(f'Out of the {n_promoted} employees who were promoted, {award_won_and_promoted} had won awards')\r\nprint(f'Hence the percentage of employees who won an award and promoted are {award_promoted_ratio:.3%}')","6a137dd7":"print(f'Since we see that only {award_promoted_ratio:.3%} employees won awards, we can conclude that there is a slight chance of promotion')","c1078389":"#Seeing the average training score of the employees in each department\r\ntraining_score_dept = df.groupby(by=['department'])['avg_training_score'].mean()\r\ntraining_score_dept = training_score_dept.sort_values(ascending=False)\r\nprint('Seeing the average training score of employees in each department')\r\ndisplay(training_score_dept)","88037e07":"training_score_dept.plot(kind='bar',figsize=(16,6),title='AVERAGE TRAINING SCORE OF EACH DEPARTMENT',xlabel='DEPARTMENT',ylabel='AVERAGE TRAINING SCORE');","2e2b4467":"#Are more trained employees promoted more often?\r\ntraining_promotions = (df.groupby(by=['no_of_trainings'])['is_promoted'].sum()\/df.groupby(by=['no_of_trainings'])['employee_id'].count())*100\r\n#We are taking percentage as there are different number of employees in each department so percentage brings it to a common scale\r\ntraining_promotions.sort_values(ascending=False,inplace=True)\r\nprint('Seeing the perentage of employees promoted at each training level:')\r\ndisplay(training_promotions)","9faa4811":"training_promotions.plot(kind='bar',figsize=(16,6),xlabel='NUMBER OF TRAININGS',ylabel='PERCENTAGE OF EMPLOYEES PROMOTED',title='DOES NUMBER OF TRAININGS AFFECT CHANCES OF PROMOTIONS?');","e56dfd99":"print('Here we see that the more percentage of employees who have recieved one training were promoted than the employees who have recieved higher number of trainings and hence we can conculde that more number of trainings does not lead to more promotions')","dd2911fc":"#Seeing the education level of male and female employees of each department\r\nedu_gender_dept = pd.DataFrame(df.groupby(by=['gender','education','department'])['education'].count())\r\nedu_gender_dept_all = pd.concat([edu_gender_dept.xs(gender).rename(columns={'education':f'num_{gender}'}) for gender in ['f','m']],axis=1)\r\nprint('Seeing the education level of males and females of each department')\r\ndisplay(edu_gender_dept_all)","24b1762a":"fig, ax = plt.subplots(figsize=(16,6),nrows=1, ncols=3)\r\nedu_list = df['education'].unique()\r\nfor i in range(len(edu_list)):\r\n    edu_gender_dept_all.xs(edu_list[i]).plot(kind='bar',figsize=(16,6),xlabel='DEPARTMENT',ylabel='NUMBER OF EMPLOYEES',\r\n    title=f'EMPLOYEES WITH {edu_list[i].upper()}',ax=ax[i])\r\nplt.show()","5e30be58":"#Does recruitment channel affect the department you get into? \r\ndept_channel_df = ease_analysis(base_column='department',column='recruitment_channel',method='count',proportion=True).transpose()\r\n#We take proportion here since there are different numbers of male and female employees in each department\r\ndept_channel_df.index = dept_channel_df.index.str.split('_').str[1]\r\ndept_channel_df.sort_index(inplace=True)\r\ndept_channel_df = dept_channel_df[['other','sourcing','referred']]\r\nprint('Seeing the percentage of employees from each recruitment channel promoted in each department')\r\ndisplay(dept_channel_df)","da746a84":"dept_channel_df.plot(kind='bar',figsize=(16,6),xlabel='DEPARTMENT',ylabel='PERCENTAGE OF EMPLOYEES',title='DOES RECRUITMENT CHANNEL AFFECT THE DEPARTMENT?');","47a331bf":"print('The recruitment channel does not affect the deapartment an emplooyee gets into as all the departments have a similar pattern of recruitment channels')","923758ee":"#How many employees are recruited through various channels from all regions?\r\nemployee_channel_df = ease_analysis(base_column='recruitment_channel',column='region',method='count',proportion=True)\r\n#We take proportion here as there are different number of employees in each region so percentage brings them on a common scale ","025f2d00":"employee_channel_df.plot(kind='bar',figsize=(16,6),xlabel='REGION',ylabel='NUMBER OF EMPLOYEES',\r\ntitle='PERCENTAGE OF EMPLOYEES FROM VARIOUS REGIONS');","e976a66d":"#How many trainings does the employee from each recruitment channel go through?\r\nrecruitment_training_df = ease_analysis(base_column='recruitment_channel',column='no_of_trainings',method='count',proportion=True)\r\n#we take proportion here as there are different number of employees from each recruitment channel so percentage brings it to a common scale\r\nprint('Seeing the number of trainings employees from each recruitment channel go through')\r\ndisplay(recruitment_training_df)","c21436db":"recruitment_training_df.plot(kind='bar',figsize=(16,6),xlabel='NUMBER OF TRAININGS',ylabel='PERCENTAGE OF EMPLOYEES', title='HOW MANY TRAININGS DOES EMPLOYEE FROM EACH RECRUITMENT CHANNEL GO THROUGH?');","b72e3058":"print('We see that there are more percentage of referred employees than employees recruited through other chaannels who have to go through 1 and 2 trainings whereas the pattern is reversed in employees who have to undergo higher number of trainings')","27477a24":"#How many trainings do the male and female employees of each education go through?\r\ntraining_gender_edu = pd.DataFrame(((df.groupby(by=['education','gender','no_of_trainings'])['no_of_trainings'].count())\/df.groupby(by=['education','gender'])['employee_id'].count())*100,columns=['no_of_trainings'])\r\n#Since there are different number of male and female employees, percentage brings it to a common scale\r\ntraining_gender_list = [pd.DataFrame(training_gender_edu.xs(edu)).rename(columns={'no_of_trainings':edu}) for edu in edu_list]\r\ntraining_gender_edu_df = pd.concat(training_gender_list,axis=1)\r\nprint('Seeing the number of traiings men and women of each education level go through:')\r\ndisplay(training_gender_edu_df)","1d9d1ac2":"gender_list = df['gender'].unique()\r\nfig, ax = plt.subplots(figsize=(16,6),nrows=1, ncols=2)\r\nfor i in range(len(gender_list)):\r\n    training_gender_edu_df.xs(gender_list[i]).plot(kind='bar',ax=ax[i],xlabel='Number of trainings',ylabel='Percentage of employees',title=gender_list[i])\r\nplt.show()","7ee90f64":"#How many trainings do male and female employees of each recruitment channel go through?\r\nrecruitment_gender_training = pd.DataFrame(((df.groupby(by=['recruitment_channel','gender','no_of_trainings'])['no_of_trainings'].count())\/df.groupby(by=['recruitment_channel','gender'])['employee_id'].count())*100,columns=['no_of_trainings'])\r\n#Since there are different number of male and female employees, percentage brings it to a common scale\r\nrecruitment_gender_training_list = [pd.DataFrame(recruitment_gender_training.xs(channel)).rename(columns={'no_of_trainings':channel}) for channel in df['recruitment_channel'].unique()]\r\nrecruitment_gender_training_df =  pd.concat(recruitment_gender_training_list,axis=1)\r\nprint('Seeing the number of trainings men and women of each recruitment channel go through:')\r\ndisplay(recruitment_gender_training_df)","91900d69":"fig, ax = plt.subplots(figsize=(16,6),nrows=1, ncols=2)\r\nfor i in range(len(gender_list)):\r\n    recruitment_gender_training_df.xs(gender_list[i]).plot(kind='bar',ax=ax[i],title=gender_list[i].upper(),xlabel='NUMBER OF TRAININGS',ylabel='PERCENTAGE OF EMPLOYEES')\r\nplt.show()","0f61063a":"#What is the age distribution of male and female employees?\r\nfig, ax = plt.subplots(figsize=(16,6),nrows=2,ncols=2)\r\ngender_arr = np.array(['m','f','m','f']).reshape((2,2))\r\nfor i in range(2):\r\n    for j in range(2):\r\n        if i == 1:\r\n            sns.histplot(x=df[df['gender'] == gender_arr[i,j]]['age'],ax=ax[i,j],kde=True)\r\n            ax[i,j].set_xlabel('Age')\r\n            ax[i,j].set_ylabel(f'Number of {gender_arr[i,j]}')\r\n            ax[i,j].set_title(f'Distribution of age of {gender_arr[i,j]}')\r\n        else:\r\n            sns.boxplot(x=df[df['gender'] == gender_arr[i,j]]['age'],ax=ax[i,j])\r\n            ax[i,j].set_title(f'Boxplot for age of {gender_arr[i,j]}')\r\nplt.tight_layout()\r\nplt.show()","f241320e":"jb_male, p_value_male = jarque_bera(df[df['gender'] == 'm']['age'])\r\nprint(f'The Jarque Bera score for the age of males is {jb_male} and the p-value for it is {p_value_male}')\r\nprint('This shows that the age for males is not normally distributed')","22569eeb":"jb_female, p_value_female = jarque_bera(df[df['gender'] == 'f']['age'])\r\nprint(f'The Jarque Bera score for the age of males is {jb_female} and the p-value for it is {p_value_female}')\r\nprint('This shows that the age for females is not normally distributed')","29b2a495":"#What is the age distribution of male and female employees in each recruitment channel?\r\nplot_hist_dist(column='recruitment_channel')","a8ab482d":"plot_box(column='recruitment_channel')","9c8d4d36":"print_summary(column='recruitment_channel')","1a96b50c":"#What is the age distribution of male and female employees in each department?\r\ngender_dept_age_arr = np.array(['m','f']*9).reshape(9,2)\r\ndept_list = df['department'].unique()","5556e188":"plot_hist_dist(column='department')","9d2738e4":"plot_box(column='department')","6dc3a5d6":"print_summary(column='department')","213300bc":"#What is the average previous year ratings of male and female employees?\r\ndf.groupby(by=['gender'])['previous_year_rating'].mean()","72dfdba3":"#What is the previous year ratings of employees recruited through each channel?\r\ndf.groupby(by=['recruitment_channel'])['previous_year_rating'].mean()","c79ecc4c":"#Which gender serves longer?\r\ndf.groupby(by=['gender'])['length_of_service'].mean()","d185bb5c":"#Employees from which department serve longer?\r\ndept_service = df.groupby(by=['department'])['length_of_service'].mean()","62cf40bd":"fig, ax = plt.subplots(figsize=(16,6))\r\nsns.barplot(x=dept_service.index, y=dept_service.values,order=dept_service.sort_values(ascending=False).index)\r\nax.set_xlabel('Department')\r\nax.set_ylabel('Average length of service')\r\nax.set_title('Which department serves longer?')\r\nplt.show()","a198466c":"#male and female employees from which department serve longer?\r\ngender_dept_service = pd.DataFrame(df.groupby(by=['gender','department'])['length_of_service'].mean())\r\ngender_dept_service_list = [pd.DataFrame(gender_dept_service.xs(gender)).rename(columns={'length_of_service':f'avg_service_{gender}'}) for gender in ['m','f']]\r\ngender_dept_service_df = pd.concat(gender_dept_service_list,axis=1)","c190f5df":"gender_dept_service_df.plot(kind='bar',figsize=(16,6),xlabel='Department',ylabel='Avg service',title='Which gender serves longer in all departments')","6c7f7dce":"# Employees from which region serve longer?\r\nregion_service = df.groupby(by=['region'])['length_of_service'].mean()\r\nfig, ax = plt.subplots(figsize=(16,6))\r\nsns.barplot(x=region_service.index, y=region_service.values, order=region_service.sort_values(ascending=False).index, ax=ax)\r\nax.set_xlabel('Region')\r\nax.set_ylabel('Average duration of service')\r\nax.set_title('Employees from which region serve longer?')\r\nax.tick_params(axis='x',labelrotation=90)\r\nplt.show()","40cda378":"#male and female employees from which region serve longer?\r\ngender_region_service = pd.DataFrame(df.groupby(by=['gender','region'])['length_of_service'].mean())\r\ngender_region_service_list = [pd.DataFrame(gender_region_service.xs(gender)).rename(columns={'length_of_service':f'avg_duration_{gender}'}) for gender in ['m','f']]\r\ngender_region_service_df =  pd.concat(gender_region_service_list,axis=1)","98e3a0dd":"gender_region_service_df.plot(kind='bar',figsize=(32,10),xlabel='REGION',ylabel='AVERAGE DURATION OF SERVICE',title='MEN AND WOMEN OF WHICH REGION SERVE LONGER?');","7375cb74":"#Employees from which gender win the most awards\r\nawards_gender = (df.groupby(by=['gender'])['awards_won?'].sum() \/ df.groupby(by=['gender'])['employee_id'].count())*100\r\nprint('The percentage of employees winning awards from each gender are:')\r\ndisplay(awards_gender)","fc2621dd":"#How does the average training score vary in employees from each region\r\nregion_score = df.groupby(by=['region'])['avg_training_score'].mean()","12c26e60":"fig, ax = plt.subplots(figsize=(16,6))\r\nsns.barplot(x=region_score.index, y=region_score.values, order=region_score.sort_values(ascending=False).index, ax=ax)\r\nax.set_xlabel('Region')\r\nax.set_ylabel('Average score')\r\nax.set_title('Average score for employees from each region')\r\nax.tick_params(axis='x',labelrotation=90)\r\nplt.show()","42bbd2eb":"#How does the average training score vary in each gender?\r\nprint('The average training score for each gender is:')\r\ndisplay(df.groupby(by=['gender'])['avg_training_score'].mean())","69205a54":"# Checking the dataset for null values","beb00642":"# Performing exploratory data analysis","60dec6c1":"# Reading the dataset","f2565bfa":"# Level 0 Analysis","0e87857b":"### Defining functions for exploratory data analysis","4e8695de":"# Level 2 analysis","200fd78f":"# Level 1 analysis","6a351247":"# Imports","6ce2c840":"# Data Exploration","543b08c7":"Question answered - Does winning an award affect the chances of promotion?","151e97c7":"# Filling the null values "}}