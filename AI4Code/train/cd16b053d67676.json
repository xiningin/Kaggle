{"cell_type":{"a63d5865":"code","4fcb967c":"code","cf927c0c":"code","a3b634a4":"code","94584fe7":"code","c1dc9f6b":"code","3c339a8c":"code","3c287945":"code","1b7ae5c8":"code","8c825e61":"code","d5cedf6c":"code","af4baac1":"code","70e2a051":"code","b28a199f":"code","59853364":"code","f396a667":"code","fc5099a3":"code","3649a415":"code","c5a0f6c4":"code","ba3ee062":"markdown","043d9bb9":"markdown","e95b9782":"markdown","bd6d7086":"markdown","c31d860b":"markdown","7a09812d":"markdown","276c1022":"markdown"},"source":{"a63d5865":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4fcb967c":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression","cf927c0c":"df_train_original = pd.read_csv('..\/input\/train.csv')\ndf_test_original = pd.read_csv('..\/input\/test.csv')","a3b634a4":"df_train_original.columns","94584fe7":"df_train_original.head()","c1dc9f6b":"df_test_original.head()","3c339a8c":"cols = ['LotArea', 'YearBuilt', 'GarageArea', 'FullBath']\ncols_test = cols + ['Id']\ncols_train = cols + ['Id', 'SalePrice']","3c287945":"df_train = df_train_original[cols_train].copy()\ndf_test = df_test_original[cols_test].copy()\nprint(\"Nan of trains\", df_train[df_train.isnull().any(axis=1)])\nprint(\"Nan of tests\", df_test[df_test.isnull().any(axis=1)])","1b7ae5c8":"df_test = df_test.fillna(df_test.median())\nprint(\"Nan of tests\", df_test[df_test.isnull().any(axis=1)])","8c825e61":"df_test","d5cedf6c":"cols_with_dependent = ['SalePrice'] + cols\n\nnum_lines = len(cols_with_dependent)\nfig, ax = plt.subplots(nrows=num_lines, ncols=1, figsize=(20, num_lines*5))\n\nfor index, col in enumerate(cols_with_dependent):\n    ax[index].hist(df_train[col])\n    ax[index].title.set_text(f\"Histogram of {col}\")\n    ax[index].set_xlabel(f\"{col}\")\n    ax[index].set_ylabel(\"Frequency\")\n\nplt.show()","af4baac1":"boxplot = df_train.boxplot(column=['SalePrice'])","70e2a051":"df_train_without_outliers = df_train[df_train['SalePrice'] < 400000].copy()","b28a199f":"df_train['L_SalePrice'] = np.log(df_train['SalePrice'])\ndf_train_without_outliers['L_SalePrice'] = np.log(df_train_without_outliers['SalePrice'])\nplt.hist(df_train['L_SalePrice'])","59853364":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\nax[0].boxplot(df_train['L_SalePrice'])\nax[0].title.set_text(\"Histogram Log\")\nax[0].set_ylabel(\"Log Sale' Price\")\n\nax[1].boxplot(df_train_without_outliers['L_SalePrice'])\nax[1].title.set_text(\"Histogram Log Without outliers\")\nax[1].set_ylabel(\"Log Sale' Price\")\n","f396a667":"# plt.plot(df_train_original['YearBuilt'], df_train_original['SalePrice'],  'o')\n# plt.title(\"Year Build X Sale's Price\")\n# plt.xlabel('Year Build')\n# plt.ylabel(\"Sale's Price\")\n\nnum_lines = len(cols)\nfig, ax = plt.subplots(nrows=num_lines, ncols=2, figsize=(20, num_lines * num_lines))\n\nfor index, col in enumerate(cols):\n    ax[index, 0].scatter(df_train[col], df_train['SalePrice'])\n    ax[index, 0].title.set_text(f\"{col} X Sale's Price\")\n    ax[index, 0].set_xlabel(f\"{col}\")\n    ax[index, 0].set_ylabel(\"Sale's Price\")\n    \n    ax[index, 1].scatter(df_train[col], df_train['L_SalePrice'])\n    ax[index, 1].title.set_text(f\"{col} X Log Sale's Price\")\n    ax[index, 1].set_xlabel(f\"{col}\")\n    ax[index, 1].set_ylabel(\"Log Sale's Price\")\n\nplt.show()","fc5099a3":"y = df_train['SalePrice']\nX = df_train[cols]\nreg = LinearRegression().fit(X, y)\nX_test = df_test[cols].copy()\nprint(\"Score\", reg.score(X, y))\ny_hat = reg.predict(X_test)","3649a415":"# y = df_train_without_outliers['L_SalePrice']\n# X = df_train_without_outliers[cols]\n# reg = LinearRegression().fit(X, y)\n# X_test = df_test[cols]\n# print(\"Score\", reg.score(X, y))\n# reg.predict(X_test)","c5a0f6c4":"my_submission = pd.DataFrame({'Id': df_test.Id, 'SalePrice': y_hat})\nmy_submission.to_csv('submission.csv', index=False)","ba3ee062":"> ### Descriptive","043d9bb9":"#### Data Cleaning","e95b9782":"### Studing this Variables","bd6d7086":"Suggests that above $400.000,00 are outliers. Droping...","c31d860b":"### Data fields\nHere's a brief version of what you'll find in the data description file.\n\n* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: $Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale","7a09812d":"### Predictive Analisys","276c1022":"### Submitting"}}