{"cell_type":{"5920bf94":"code","892f56d4":"code","29abcf5e":"code","c72cc2ad":"code","8b7c19c4":"code","0e7dac4c":"code","acc0ff15":"code","7ec01303":"code","a6642550":"code","6b042431":"code","13c20fde":"code","41a7783d":"code","7fa586fd":"code","3eeae182":"code","acdb2888":"code","56001b35":"code","35abbb99":"code","fefa534e":"code","5182d8aa":"code","1f889e27":"code","5ddc1855":"code","644528bd":"code","7e9a4c26":"markdown","a6ead90c":"markdown","3e613d0e":"markdown","48e94e2c":"markdown","6f1935a5":"markdown","53689102":"markdown","46e07494":"markdown","8b45c7f3":"markdown"},"source":{"5920bf94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense,MaxPooling2D,Conv2D,Flatten,Dropout,LeakyReLU,BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","892f56d4":"df_train=pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ndf_test=pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")","29abcf5e":"x=df_train.drop(['label'],axis=1)","c72cc2ad":"def visualize_input(img, ax):\n    ax.imshow(img, cmap='summer')\n    width, height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(x.iloc[53,:].as_matrix().reshape(28,28), ax)\nplt.title('Shirt\\n',fontweight='bold',fontsize=20)\nplt.axis(\"off\")\nplt.show()","8b7c19c4":"def visualize_input(img, ax):\n    ax.imshow(img, cmap='ocean')\n    width, height = img.shape\n    thresh = img.max()\/2.5\n    for x in range(width):\n        for y in range(height):\n            ax.annotate(str(round(img[x][y],2)), xy=(y,x),\n                        horizontalalignment='center',\n                        verticalalignment='center',\n                        color='white' if img[x][y]<thresh else 'black')\n\nfig = plt.figure(figsize = (12,12)) \nax = fig.add_subplot(111)\nvisualize_input(x.iloc[10,:].as_matrix().reshape(28,28), ax)\nplt.title('T-shirt\\n',fontweight='bold',fontsize=20)\nplt.axis(\"off\")\nplt.show()","0e7dac4c":"train=np.array(df_train,dtype=\"float32\")\ntest=np.array(df_test,dtype=\"float32\")","acc0ff15":"print('to_categorical = ',len(df_train.label.unique()))","7ec01303":"x_train=train[:,1:]\ny_train=to_categorical(train[:,0])\nx_test=test[:,1:]\ny_test=to_categorical(test[:,0])","a6642550":"img_rows= 28\nimg_cols= 28\nx_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\nx_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\nimg_shape = (img_rows, img_cols, 1)","6b042431":"print(\"x_train shape: \",x_train.shape)\nprint(\"x_test shape: \",x_test.shape)","13c20fde":"x_train=x_train\/255\nx_test=x_test\/255","41a7783d":"cnn_model = Sequential()","7fa586fd":"cnn_model.add(Conv2D(256, kernel_size=(3, 3),input_shape=img_shape))\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(BatchNormalization())\ncnn_model.add(LeakyReLU(0.1))\ncnn_model.add(Dropout(0.1))\n\ncnn_model.add(Conv2D(128, (3, 3)))\ncnn_model.add(BatchNormalization())\ncnn_model.add(MaxPooling2D(pool_size=(2, 2)))\ncnn_model.add(Dropout(0.1))\ncnn_model.add(LeakyReLU(0.1))","3eeae182":"cnn_model.add(Flatten())\ncnn_model.add(Dense(256))\ncnn_model.add(LeakyReLU(0.1))\ncnn_model.add(BatchNormalization())\ncnn_model.add(Dropout(0.1))\ncnn_model.add(Dense(10, activation='softmax'))\ncnn_model.summary()","acdb2888":"cnn_model.compile(optimizer='adamax',loss='categorical_crossentropy', metrics=['accuracy'])","56001b35":"datagen = ImageDataGenerator()\ndatagen.get_random_transform(img_shape=(28,28,1),seed=3)\ndatagen.flow(x=x_train, y=y_train, batch_size=25, shuffle=True, sample_weight=None, seed=None, save_to_dir=None, save_prefix='', save_format='png', subset=None)\n\ndatagen.fit(x_train)","35abbb99":"information=cnn_model.fit(x_train, y_train, batch_size=25 ,epochs=20,verbose=1,validation_data=(x_test, y_test))","fefa534e":"plt.figure(figsize=(15,10))\nplt.style.use('dark_background')\nplt.plot(information.history[\"val_loss\"],linewidth=4, color='lightgreen',label=\"Validation Loss\")\nplt.plot(information.history[\"loss\"],linewidth=4, color='violet',label=\"Train Loss\")\nplt.title(\"Train - Test Loss\")\nplt.xlabel(\"Number Of Epochs\",fontsize=25)\nplt.ylabel(\"Loss\",fontsize=25)\nplt.grid(True)\nplt.legend()\nplt.show()","5182d8aa":"print(\"Model Score: \",cnn_model.evaluate(x_test, y_test, verbose=0))","1f889e27":"y_head=cnn_model.predict(x_test)\ny_predict=np.argmax(y_head, axis=1)\ny_true = np.argmax(y_test,axis=1)","5ddc1855":"import seaborn as sb\nfrom sklearn.metrics import confusion_matrix\ncon_mat=confusion_matrix(y_true,y_predict)\nplt.style.use('seaborn-deep')\nplt.figure(figsize=(15,15))\nsb.heatmap(con_mat,annot=True,annot_kws={'size': 25},linewidths=0.5,fmt=\"d\",cmap=\"rainbow\")\nplt.title('True or False predicted clothing\\n',fontweight='bold',fontsize=20)\nplt.show()","644528bd":"comparison=pd.DataFrame()\ncomparison[\"prediction\"]=y_predict\ncomparison[\"true\"]=y_true\ncomparison['correct'] = comparison.prediction == comparison.true \ncomparison[\"correct\"].value_counts()\ncomparison[comparison['correct']==False]","7e9a4c26":"![1_6YhvuUHE0LPHEsqU_Cis9w.png](attachment:1_6YhvuUHE0LPHEsqU_Cis9w.png)","a6ead90c":"Each training and test example is assigned to one of the following labels:\n\n0 - T-shirt\/top\n\n1 - Trouser      \n\n2 - Pullover      \n\n3 - Dress    \n\n4 - Coat      \n\n5 - Sandal      \n\n6 - Shirt      \n\n7 - Sneaker      \n\n8 - Bag   \n\n9 - Ankle boot   ","3e613d0e":"# Create Model","48e94e2c":"# Results","6f1935a5":"# Fashion MNIST","53689102":"# Sample fashion from data","46e07494":"# Read library and datasets","8b45c7f3":"# Preparation for the model"}}