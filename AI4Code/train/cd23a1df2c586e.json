{"cell_type":{"a3148d07":"code","08b1ea45":"code","aebf6777":"code","8df97767":"code","2e26a507":"code","23777887":"code","caad03ed":"code","9b3452c4":"code","4255bb4e":"code","05bf45bb":"code","e94faa55":"code","6d15c4a2":"code","5a73915d":"code","79676659":"code","989344eb":"code","5bf028ad":"code","18134dcf":"code","e91365e1":"code","32caac0c":"code","b3aa646c":"code","da7b0d7d":"code","fe375b8b":"code","42f7fd27":"code","7a1029f4":"code","5cd866dc":"code","f1b1ba63":"code","bcfa1cf4":"code","7e988009":"code","d13d844f":"code","b781ca3c":"code","d6460910":"code","3ce69e39":"code","c42d593a":"code","c60660eb":"code","12362c5f":"code","096097ce":"code","84265c09":"code","6290c818":"code","b36bf446":"code","94992cb5":"code","498ff493":"code","bfde0ff8":"code","8801aa76":"code","9292ad00":"code","aaeb2631":"code","94b2c5c1":"code","e8c45a7c":"code","a7a290bd":"code","7644b576":"code","8ee58241":"code","3c7dd170":"code","abbcad6e":"code","7c36c848":"code","8352f2c3":"code","162067ba":"code","3bc13cf6":"code","c6e74ca4":"code","558fafdd":"code","6be5e59f":"code","60b46f17":"code","d4885052":"code","93f97661":"code","422fed39":"code","c9db828d":"code","be7d3df4":"code","2fb3391e":"code","6daa1074":"code","3466a094":"code","05b246b2":"code","b7f7db4b":"markdown","d114a9f2":"markdown","1fd96879":"markdown","2e57f307":"markdown","21a2e847":"markdown","d10565e0":"markdown","e2337418":"markdown","4cdc14a2":"markdown","e5b925ca":"markdown","d5305a2f":"markdown","f0e2a09f":"markdown","38b5d805":"markdown","db2e3a17":"markdown"},"source":{"a3148d07":"!pip install scikit-plot\n!pip install catboost\n","08b1ea45":"## Bibliotecas que foram utilizadas\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport scikitplot as skplt\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom imblearn.over_sampling import RandomOverSampler\n","aebf6777":"# Kaggle\ndf_train = pd.read_csv(\"..\/input\/costa-rican-household-poverty-prediction\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/costa-rican-household-poverty-prediction\/test.csv\")\ndf_train.shape, df_test.shape","8df97767":"# ## Colab\n# from google.colab import drive\n# drive.mount('\/content\/drive')\n\n# df_train = pd.read_csv(\"\/content\/drive\/MyDrive\/00 - Dados\/05_MINER_II\/train.csv\")\n\n# df_train.shape","2e26a507":"df_train.info()","23777887":"print(\"O dataset original \u00e9\",df_train.shape, '\\n')\ndf_train.isnull().sum().sort_values(ascending = False)[df_train.isnull().sum().sort_values(ascending = False) >= 1] ","caad03ed":"faltantes = list(df_train.isnull().sum().sort_values(ascending = False)[df_train.isnull().sum().sort_values(ascending = False) >= 1].index) ","9b3452c4":"df_train[faltantes].info()","4255bb4e":"df_train[faltantes].hist(figsize = (20,7), grid = False)\nplt.show()","05bf45bb":"drop = [faltantes.pop(0) for i in range(3)]\n","e94faa55":"## Dropando colunas com muitos missings\ndf_train.drop(drop, axis =1, inplace = True)\ndf_train.shape","6d15c4a2":"for i in faltantes:\n    df_train[i] = df_train[i].fillna(df_train[i].mean())","5a73915d":"df_train.isnull().sum()[df_train.isna().sum() >= 1]","79676659":"df_train.select_dtypes('object').head()","989344eb":"mapeamento = {'yes': 0, 'no': -1}\n\ndf_train[\"dependency\"] = df_train[\"dependency\"].replace(mapeamento).astype(float)\ndf_train[\"edjefe\"] = df_train[\"edjefe\"].replace(mapeamento).astype(int)\ndf_train[\"edjefa\"] = df_train[\"edjefa\"].replace(mapeamento).astype(int)\n","5bf028ad":"variaveis = list(df_train.select_dtypes('int64').columns)\nvariaveis.pop(-1)","18134dcf":"variaveis = variaveis +list(df_train.select_dtypes('float64').columns)","e91365e1":"## Identificando vari\u00e1veis bin\u00e1rias\nbinarias = []\nfor i in variaveis:\n  u =df_train[i].unique()\n\n  if u.sum() == 1:\n    binarias.append(i)","32caac0c":"## Identificando vari\u00e1veis discretas\ndiscretas = [c for c in variaveis if c not in binarias]\n","b3aa646c":"df_train[discretas].shape, df_train[binarias].shape","da7b0d7d":"## Histograma de vari\u00e1veis discretas\nax = df_train[discretas].hist(bins=25, grid=False, figsize=(20,20), zorder=2, rwidth=0.9)\nplt.suptitle(\"Histogramas das vari\u00e1veis discretas\", fontsize = 30)","fe375b8b":"df_train[discretas].isnull().sum().sort_values()","42f7fd27":"fig, ax = plt.subplots(figsize = (25,20))\nsns.heatmap(df_train[discretas].corr(), annot=True, ax = ax, cmap=\"YlGnBu\")","7a1029f4":"valores = {i:df_train[i].value_counts().values for i in binarias}\ndf_binarios = pd.DataFrame(valores)","5cd866dc":"## Plotando vari\u00e1veis bin\u00e1rias\nfig, ax =plt.subplots(21,5, figsize=(20,90))\nax = ax.flatten()\n\nfor i,cat in enumerate(df_binarios.columns):\n df_binarios[cat].plot.pie(ax=ax[i]) \n ax[i].set_title(cat, fontweight='bold', fontsize= 15)\n ax[i].set_ylabel('')\n ","f1b1ba63":"df_train[binarias].isnull().sum().sort_values()","bcfa1cf4":"## Propor\u00e7\u00e3o original\nTarget = df_train['Target']\nTarget.value_counts(normalize = True)","7e988009":"\n\nros = RandomOverSampler(random_state = 42)\nX_ros, y_ros = ros.fit_resample(df_train[discretas + binarias], df_train[\"Target\"])\n","d13d844f":"df_balance = pd.DataFrame(X_ros, columns=[discretas + binarias][0])\n\n\ndf_balance[\"Target\"] = y_ros","b781ca3c":"df_balance[\"Target\"].value_counts()","d6460910":"## Data split\ntrain, test = train_test_split(df_balance, random_state =42)\n\ntrain.shape, test.shape","3ce69e39":"# Instanciando um objeto RandomForest\nrf = RandomForestClassifier(n_jobs=-1, n_estimators=200, random_state=42, oob_score= True)\n\n# Treinando o modelo\nrf.fit(train[binarias + discretas], train['Target'])","c42d593a":"# Prever o Target de teste usando o modelo treinado\npreds = rf.predict(test[binarias + discretas]).astype(int)\ntest['Pred'] = preds\n\naccuracy_score(test['Target'], preds)","c60660eb":"## Cross validation\nscores = cross_val_score(rf, train[binarias + discretas], train['Target'], cv=5, n_jobs=-1)\n\nscores.mean()","12362c5f":"(test['Target'] == test['Pred']).value_counts(normalize = True)*100","096097ce":"## Matriz de confus\u00e3o\npd.crosstab(test['Target'],test['Pred'])","84265c09":"# Matriz de Confus\u00e3o - Dados de valida\u00e7\u00e3o\n\nskplt.metrics.plot_confusion_matrix(test['Target'], preds, figsize=(15,7))","6290c818":"# Predi\u00e7\u00e3o do modelo\ntest['Pred'].value_counts(normalize = True)","b36bf446":"# Valores reais\ntest['Target'].value_counts(normalize = True)","94992cb5":"dt = DecisionTreeRegressor(random_state=42)\n\ndt.fit(train[binarias + discretas], train['Target'])","498ff493":"preds = dt.predict(test[binarias + discretas]).astype(int)\ntest['Pred'] = preds\n\naccuracy_score(test['Target'], preds)","bfde0ff8":"## Cross validation\nscores = cross_val_score(dt, train[binarias + discretas], train['Target'], cv=5, n_jobs=-1)\n\nscores.mean()","8801aa76":"## Matriz de confus\u00e3o\npd.crosstab(test['Target'],test['Pred'])","9292ad00":"# Matriz de Confus\u00e3o - Dados de valida\u00e7\u00e3o\n\nskplt.metrics.plot_confusion_matrix(test['Target'], preds, figsize=(15,7))","aaeb2631":"## Treinando modelo\ngbm = GradientBoostingClassifier(n_estimators=200, learning_rate=1.0, max_depth=1, random_state=42)\n\ngbm.fit(train[binarias + discretas], train['Target'])","94b2c5c1":"preds = gbm.predict(test[binarias + discretas])\ntest['Pred'] = preds\n\naccuracy_score(test['Target'], preds)","e8c45a7c":"## Cross validation\nscores = cross_val_score(gbm, train[binarias + discretas], train['Target'], cv=5, n_jobs=-1)\n\nscores.mean()","a7a290bd":"## Matriz de confus\u00e3o\npd.crosstab(test['Target'],test['Pred'])","7644b576":"# Matriz de Confus\u00e3o - Dados de valida\u00e7\u00e3o\n\nskplt.metrics.plot_confusion_matrix(test['Target'], preds, figsize=(15,7))","8ee58241":"xgb = XGBClassifier(n_estimators=200, learning_rate=0.09, random_state=42)\n\nxgb.fit(train[binarias + discretas], train['Target'])","3c7dd170":"preds = xgb.predict(test[binarias + discretas])\ntest['Pred'] = preds\n\naccuracy_score(test['Target'], preds)","abbcad6e":"## Cross validation\nscores = cross_val_score(xgb, train[binarias + discretas], train['Target'], cv=5, n_jobs=-1)\n\nscores.mean()","7c36c848":"## Matriz de confus\u00e3o\npd.crosstab(test['Target'],test['Pred'])","8352f2c3":"# Matriz de Confus\u00e3o - Dados de valida\u00e7\u00e3o\n\nskplt.metrics.plot_confusion_matrix(test['Target'], preds, figsize=(15,7))","162067ba":"abc = AdaBoostClassifier(n_estimators=200, learning_rate=1.0, random_state=42)\nabc.fit(train[binarias + discretas], train['Target'])","3bc13cf6":"preds = abc.predict(test[binarias + discretas])\ntest['Pred'] = preds\n\naccuracy_score(test['Target'], preds)","c6e74ca4":"## Cross validation\nscores = cross_val_score(abc, train[binarias + discretas], train['Target'], cv=5, n_jobs=-1)\n\nscores.mean()","558fafdd":"## Matriz de confus\u00e3o\npd.crosstab(test['Target'],test['Pred'])","6be5e59f":"# Matriz de Confus\u00e3o - Dados de valida\u00e7\u00e3o\n\nskplt.metrics.plot_confusion_matrix(test['Target'], preds, figsize=(15,7))","60b46f17":"cbc = CatBoostClassifier(random_state=42)\n\ncbc.fit(train[binarias + discretas], train['Target'])","d4885052":"preds = cbc.predict(test[binarias + discretas])\ntest['Pred'] = preds\n\naccuracy_score(test['Target'], preds)","93f97661":"## Cross validation\nscores = cross_val_score(cbc, train[binarias + discretas], train['Target'], cv=5, n_jobs=-1)\n\nscores.mean()","422fed39":"## Matriz de confus\u00e3o\npd.crosstab(test['Target'],test['Pred'])","c9db828d":"# Matriz de Confus\u00e3o - Dados de valida\u00e7\u00e3o\n\nskplt.metrics.plot_confusion_matrix(test['Target'], preds, figsize=(15,7))","be7d3df4":"mapeamento = {'yes': 0, 'no': -1}\n\ndf_test[\"dependency\"] = df_test[\"dependency\"].replace(mapeamento).astype(float)\ndf_test[\"edjefe\"] = df_test[\"edjefe\"].replace(mapeamento).astype(int)\ndf_test[\"edjefa\"] = df_test[\"edjefa\"].replace(mapeamento).astype(int)","2fb3391e":"## Dropando colunas com muitos missings\ndf_test.drop(drop, axis =1, inplace = True)\ndf_test.shape","6daa1074":"for i in faltantes:\n    df_test[i] = df_test[i].fillna(df_test[i].mean())","3466a094":"preds = rf.predict(df_test[binarias + discretas]).astype(int)\ndf_test['Target'] = preds\n\n","05b246b2":"df_test[['Id','Target']].to_csv('submission.csv', index = False)","b7f7db4b":"### Xgboost","d114a9f2":"## An\u00e1lise explorat\u00f3ria","1fd96879":"### Decision tree","2e57f307":"### Random Forest","21a2e847":"### Vari\u00e1beis Bin\u00e1rias","d10565e0":"## Tratando classes desbalanceadas","e2337418":"## Aplicando melhor modelo nos Dados de teste \u2192 Random Forest","4cdc14a2":"### AdaBoost","e5b925ca":"### Vari\u00e1veis Discretas","d5305a2f":"### Gradient Boosting","f0e2a09f":"### CatBoost","38b5d805":"## Tratando dados faltantes","db2e3a17":"## Treinando Modelos de \u00e1rvores"}}