{"cell_type":{"f0c449b9":"code","7c13b7f6":"code","e33da9cf":"code","c868cd90":"code","49a7a4eb":"code","880d6504":"code","14241dd0":"code","456dcf82":"code","78df9e4e":"code","43748022":"code","a0521179":"code","19759efe":"code","788cd061":"code","51627327":"code","c4a7575b":"code","87de618a":"code","8a2ae60a":"code","09660266":"code","f62e7e46":"code","729f3738":"code","bb8c830e":"code","e981d296":"code","c41f9bba":"code","84dfcb07":"code","1b23831f":"code","a80cb5e8":"code","230ba6b5":"code","88d5b87c":"code","d198cad3":"code","4bbbc469":"code","5e211c3b":"code","1e9533ed":"code","974bacce":"code","de8718f2":"code","d9649cfd":"code","8f69cd90":"code","96ab9c58":"code","d546d4e1":"code","611ce845":"code","5aff657a":"code","03a7f4d0":"code","ca082bfc":"code","54798b47":"code","0c42a9f1":"code","4564ad7a":"code","d316ed1d":"code","55f519fc":"code","37834788":"code","36621426":"code","4909dfd4":"code","3472713d":"markdown","98f6ca23":"markdown","a5c081f0":"markdown","bfbe0323":"markdown","0046ac43":"markdown","d60d8bd7":"markdown"},"source":{"f0c449b9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn import preprocessing","7c13b7f6":"df = pd.read_csv('..\/input\/solar-radiation\/Solar_Prediction.csv')\ndf","e33da9cf":"df.isnull().any() # to see number of missing elements, use df.isnull().sum()","c868cd90":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = df[['Temperature','Pressure','Humidity','Speed','WindDirection(Degrees)']]\nvif = pd.DataFrame()\nvif['VIF'] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif['Features'] = variables.columns","49a7a4eb":"vif\n# The VIF for Pressure is so high, that it influences Temperature's variance to swell, hence pressure is dropped and VIF\n# calculated again","880d6504":"df.drop('Pressure', axis=1)","14241dd0":"\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables_1 = df[['Temperature','Humidity','Speed','WindDirection(Degrees)']]\nvif_1 = pd.DataFrame()\nvif_1['VIF'] = [variance_inflation_factor(variables_1.values, i) for i in range(variables_1.shape[1])]\nvif_1['Features'] = variables_1.columns","456dcf82":"vif_1\n\n# Though the VIF of Temp is still high, this is mainly because of inclusion of humidity since both have atleast some amount\n# of correlation amongst each other. Also, dropping temp would lead to a deficit of a key factor used to check the radiation.\n# Hence, we proceed with these four features itself","78df9e4e":"df.columns.values","43748022":"cols = ['Radiation', 'Temperature', \n       'Humidity', 'WindDirection(Degrees)', 'Speed', 'Pressure','TimeSunRise',\n       'TimeSunSet', 'UNIXTime', 'Data', 'Time']","a0521179":"data_ready = df[cols]\ndata_ready","19759efe":"\ndata_ready = data_ready.drop(['Pressure','TimeSunRise','TimeSunSet','UNIXTime','Data','Time'], axis=1)\ndata_ready","788cd061":"\ndata = data_ready.values\nX, y = data[:,1:], data[:,0]  # splitting and getting the independent attributes, X and dependent attribute y\nX = preprocessing.StandardScaler().fit_transform(X)\nX[0:5]","51627327":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)  # splitting in the ratio 70:30","c4a7575b":"model = LinearRegression()","87de618a":"model.fit(X_train, y_train)","8a2ae60a":"y_hat = model.predict(X_train)","09660266":"sns.distplot(y_train-y_hat)\nplt.title('Residuals PDF')\nplt.show()\n# further on, when we create the training dataset's summary, we'll use y_train as target and y_hat(i.e., predicted X_train) \n# would be the Predictions\n\n# The residuals are normally distributed.","f62e7e46":"model.intercept_","729f3738":"model.coef_","bb8c830e":"y_pred = model.predict(X_test) # making predictions","e981d296":"type(X)","c41f9bba":"X_new = pd.DataFrame(X)","84dfcb07":"type(X_new)","1b23831f":"X_new_renamed = X_new.rename(columns={0:'Temparature',1:'Humidity',2:'WindDirection(Degrees)',3:'Speed'})","a80cb5e8":"X_new_renamed","230ba6b5":"reg_summary = pd.DataFrame(X_new_renamed.columns.values, columns=['Features'])\nreg_summary['Weights\/Coeffs'] = model.coef_","88d5b87c":"reg_summary","d198cad3":"new_row = {'Features':'Slope Intercept', 'Weights\/Coeffs':model.intercept_}","4bbbc469":"reg_summary.append(new_row, ignore_index=True)","5e211c3b":"reg_summary","1e9533ed":"r2_score(y_test, y_pred)","974bacce":"y_hat_test = model.predict(X_test)","de8718f2":"plt.scatter(y_test,y_hat_test, alpha=0.05)\nplt.xlabel('y_test',fontsize=15)\nplt.ylabel('Y_hat_test', fontsize=15)   #This is X_test predicted\nplt.title('Testing the Accuracy', fontsize=20)\nplt.show()\n\n# when we create the testing dataset summary, we will use y_test as target and y_hat_test(which actually is X_test predicted)\n# as predictions, and then compute further residuals and differences.\n\n# The alpha uses the blurring concept to show where the maximum points are concentrated and we see they are evenly spread\n# after being concentrated initially, and a straight line can be fit.","d9649cfd":"df_pf = pd.DataFrame(y_hat_test, columns=['Predictions'])","8f69cd90":"df_pf['Target'] = y_test","96ab9c58":"y_test","d546d4e1":"df_pf","611ce845":"df_pf['Residuals'] = df_pf['Predictions'] - df_pf['Target']","5aff657a":"df_pf['Difference%'] = np.absolute(df_pf['Residuals']\/df_pf['Target']*100)","03a7f4d0":"df_pf.sort_values(by='Difference%')","ca082bfc":"df_pf_better = df_pf[df_pf['Difference%']<100]","54798b47":"df_pf_better.sort_values(by='Difference%').head(10)","0c42a9f1":"df_tr = pd.DataFrame(y_hat, columns=['Predcitions'])\n# model.predict(X_train) is y_hat","4564ad7a":"X_train_new = pd.DataFrame(X_train)","d316ed1d":"df_tr['Target'] = y_train","55f519fc":"df_tr['Residuals'] = df_tr['Predcitions'] - df_tr['Target']","37834788":"df_tr['Difference%'] = np.absolute(df_tr['Residuals']\/df_tr['Target']*100)","36621426":"df_tr_better = df_tr[df_tr['Difference%']<100]","4909dfd4":"df_tr_better.sort_values(by='Difference%').head(10)","3472713d":"### R Squared","98f6ca23":"### Testing Dataset","a5c081f0":"### Final Testing Dataset... 3412 rows","bfbe0323":"### Training Dataset","0046ac43":"## The Table showing coefficients of the regression equation","d60d8bd7":"### Final Trainig Dataset...7905 rows"}}