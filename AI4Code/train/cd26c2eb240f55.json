{"cell_type":{"eaae8960":"code","1ca9d5d2":"code","40f1eabb":"code","f031a529":"code","b19582b8":"code","7df1c3ed":"code","01f01a76":"code","71ad0b0d":"code","20263429":"code","e43937c3":"code","4872c4dc":"code","bd2e3394":"code","07b2e48e":"code","40474dca":"code","80a50bfd":"code","a78e25fa":"code","bf9a4c71":"code","de156ea0":"code","a3b5bfd2":"code","47e31db7":"markdown","57366a11":"markdown","5449c6f3":"markdown","c3b5d006":"markdown","b15f4301":"markdown","31e47748":"markdown"},"source":{"eaae8960":"llist = [(1, 2, 3, 4, 5), (1, 2), (1, 2), (1, 2), (1, 2), (2, 3, 4), (3, 4)]\n\nnew_list = [str(item) for item in llist]\nnew_list = set(new_list)\n\nvocab = {}\nfor item in llist:\n    if not vocab.get(item):\n        vocab[item] = 0\n    vocab[item] += 1\nvocab","1ca9d5d2":"import random\n\nllist = [random.randint(0, 100) for i in range(10)]\nprint(f\"Randomly generated list : {llist}\")","40f1eabb":"class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n        \nclass BST:\n    def __init__(self, array: list) -> None:\n        self.array = array\n        self.n = len(self.array)\n        self.root = None\n        \n    def sort(self) -> None:\n        \"\"\"\n        Bubble Sort\n        \"\"\"\n        n = len(self.array)\n    \n        for i in range(n):\n            for j in range(n-i-1):\n                if self.array[j] > self.array[j+1]:\n                    self.array[j], self.array[j+1] = self.array[j+1], self.array[j]\n    \n    def build_bst(self, array: list) -> Node:\n        \"\"\"\n        Build the Balanced BST\n        \"\"\"\n        if not array:\n            return None\n\n        mid = (len(array))\/\/2\n        root = Node(array[mid])\n        root.left = self.build_bst(array[:mid])\n        root.right = self.build_bst(array[mid+1:])\n        \n        return root\n    \n    def print_bst(self, node: Node) -> None:\n        \"\"\"\n        Pre-Order\n        \"\"\"\n        if not node:\n#             print(\"~\")\n            return\n        \n        print(node.value, end='|') # \n        self.print_bst(node.left)\n        self.print_bst(node.right)\n        \n        return\n    \n    def flow(self) -> None:\n        self.sort()\n        self.root = self.build_bst(self.array)\n        self.print_bst(self.root)","f031a529":"obj = BST(llist)\nobj.flow()","b19582b8":"space_count = 8\n\ndef print_2d(root: Node, space: int):\n    if root == None:\n        return\n    space += space_count\n    \n    print_2d(root.right, space)\n    print()\n    print(\" \"*(space - space_count), end=\"\") # \n    print(root.value)  \n    print_2d(root.left, space)\n\nprint_2d(obj.root, 0)  ","7df1c3ed":"ldict = {\n    'black': 'r',\n    'hero': 'e',\n    'go': 'g',\n    'clue': 'i',\n    'mean': 'q',\n    'groan': 'o',\n    'sin': 'p',\n    'pint': 'u',\n    'tone': 'n',\n    'graze': 's',\n    'sea': 't',\n    'plant': 'a'\n}","01f01a76":"new_dict = {}\nwords_cant_be_made = []\nwords_can_be_made = set(ldict.keys())\n\nfor word in ldict.keys():\n    for letter in word:\n        if not new_dict.get(letter):\n            new_dict[letter] = []\n        new_dict[letter].append(word)\nprint(\"\\nFirst Step\")\nprint(new_dict)\nfor item in ldict.values():\n    if new_dict.get(item):\n        new_dict.pop(item)\nprint(\"\\nSecond Step\")\nprint(new_dict)\n        \nwords_cant_be_made = []\nfor val in new_dict.values():\n    words_cant_be_made.extend(val)\nwords_cant_be_made = set(words_cant_be_made)\nwords_can_be_made = list(words_can_be_made - words_cant_be_made)\nprint(f\"\\nWords that can be made : {words_can_be_made}\")","71ad0b0d":"def sort_tuple_asc(tup, choice=0):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][choice] > tup[j + 1][choice]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\ndef sort_tuple_desc(tup, choice=0):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][choice] < tup[j + 1][choice]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup","20263429":"tup = [(1, 24), (5, 10), (18, 28), (2, 5), (4, 20), (6, 15)]\n\nchoice = 0\nprint(f\"\\nAscending : {choice} element\")\nprint(sort_tuple_asc(tup, choice=0))\nprint(f\"\\nDescending : {choice} element\")\nprint(sort_tuple_desc(tup, choice=0))","e43937c3":"import pandas as pd\nimport numpy as np\n\npd.options.display.max_columns = 30","4872c4dc":"data = pd.read_csv(\"..\/input\/qprereq\/banking.csv\")\nprint(f\"Shape : {data.shape}\")\ndata.head()","bd2e3394":"# 1. Write the command to find unique values in education.\ndata['education'].unique()","07b2e48e":"# 2. Command to find the number of customers subscribed and not subscribed.\ndata['y'].value_counts()","40474dca":"# 3. Find the mean values of all the independent variables for every \u2018y\u2019 (outcome variable)\ndata.groupby(['y']).mean()","80a50bfd":"# 4. What is the mean age for every marital status\ndata.groupby(['marital'])['age'].mean()","a78e25fa":"# 5. Check for null values\ndata.isnull().sum()","bf9a4c71":"# 6. Find the descriptive statistics for each column\ndata.describe(include='all')","de156ea0":"# 7. Use pd.query(), iloc, loc and range subsetting to extract insights from the data. \n# You will be evaluated on the quality of your queries and the rationale behind selecting them. \n# You can extract upto five (5) separate insights from the data.","a3b5bfd2":"# correl plot\n# dist plot\n# cat feats relations\n# hue plot groupby target","47e31db7":"Question 3: Given the following dictionary:\n\n{ \u2018black :\u2019r\u2019, \n  \u2018hero\u2019:\u2018e\u2019, \n  \u2018go\u2019:\u2019g\u2019, \n  \u2018clue\u2019:\u2019i\u2019,\n  \u2019mean\u2019:\u2019q\u2019,\n  \u2019groan\u2019:\u2019o\u2019,\n  \u2019sin\u2019:\u2019p\u2019,\n  \u2019pint\u2019:\u2019u\u2019,\n  \u2019tone\u2019:\u2019n\u2019,\n  \u2019graze\u2019:\u2019s\u2019,\n  \u2018sea\u2019:\u2019t\u2019,\n  \u2018plant\u2019:\u2019a\u2019}\n\nCreate a list of all the keys of the dictionary, which can be formed from the values present in the dictionary.","57366a11":"Question 1: Given a list of tuples, find the number of occurrences of each tuple in the list.","5449c6f3":"Question 5: What do you mean by a mutable and immutable object. Are string, list, tuple, dictionary mutable type objects or immutable objects.\n\n\n**Answer :** \n\nMutable : object can be changed after it is created\nImmutable : object can't be changed after it is created\n\n- String : Immutable\n- List : Mutable\n- Tuple : Immutable\n- Dictionary : Mutable\n\nNOTE : https:\/\/medium.com\/@meghamohan\/mutable-and-immutable-side-of-python-c2145cf72747","c3b5d006":"Question 6: Learn The usage of Pandas and Numpy:\n\n1. Write the command to find unique values in education.\n1. Command to find the number of customers subscribed and not subscribed.\n1. Find the mean values of all the independent variables for every \u2018y\u2019 (outcome variable)\n1. What is the mean age for every marital status\n1. Check for null values\n1. Find the descriptive statistics for each column\n1. Use pd.query(), iloc, loc and range subsetting to extract insights from the data. You will be evaluated on the quality of your queries and the rationale behind selecting them. You can extract upto five (5) separate insights from the data.\n\n\nDataset :https:\/\/drive.google.com\/open?id=1iGFgAYNglygUp5JXOaZXwMgTB7xPPlk","b15f4301":"Question 2: Create a list of 10 random numbers between 1-100. Create a balanced BST (Binary search tree) from this array","31e47748":"Question 4: Given the following list of tuples,\n\n - sort the list by 1st item in the tuple in ascending order\n - Sort the list by 2nd item in the tuple in ascending order\n - Repeat a, b using descending order\n\nlistA = [(1,2), (4,3), (2,10), (12, 5), (6, 7), (9,11), (15, 4)]"}}