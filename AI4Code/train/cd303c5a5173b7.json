{"cell_type":{"bf9cc163":"code","d364ef44":"code","13e233b8":"code","70718950":"code","633a2fac":"code","a68edcc9":"code","d9799075":"code","0e4413c1":"code","0ef044f2":"code","08dbeaaf":"code","d889211a":"code","494afef5":"code","db8db322":"code","1100261a":"code","71a91a7a":"code","bd795f39":"code","25d9a163":"code","13814247":"code","23deb765":"code","ed54e13f":"code","10fb513c":"code","a17ab3aa":"code","34bea00c":"code","15515939":"code","a34f1289":"code","ec1e3a12":"code","f93a00f6":"code","10df3624":"code","440545e1":"code","75798a90":"code","3a2afd60":"code","7376eb16":"code","0c56d79d":"code","95f62f84":"code","094a015b":"code","14a31356":"code","f13c4269":"code","bdd52c20":"code","30d45d4c":"code","0cfc5320":"code","b91c8119":"markdown","30a0355b":"markdown","20ac2c20":"markdown","cb6c1e95":"markdown","4c4713f9":"markdown"},"source":{"bf9cc163":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d364ef44":"covid_df = pd.read_csv('..\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv')\ncovid_df.head()\n","13e233b8":"covid_df.columns","70718950":"covid_df.columns=['State', 'Total_Cases', 'Active', 'Discharged', 'Deaths',\n       'Active_ratio', 'Discharge_ratio', 'Death_ratio']\ncovid_df.head()","633a2fac":"import matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle","a68edcc9":"covid_df['Active_ratio'].plot(kind='hist',bins =10,title='active ratio ' ,color='black')\ncovid_df['Death_ratio'].plot(kind='hist',bins =10,title='Death_ratio' ,color='red')\ncovid_df['Discharge_ratio'].plot(kind='hist',bins =10,title='Discharge_ratio ' ,color='yellow')\ncolors = [\"black\", \"red\", \"yellow\"]\nhandles = [Rectangle((0,0),1,1,color=c,ec=\"k\") for c in colors]\nlabels= [\"Active_ratio\",\"Death_ratio\", \"Discharge_ratio\"]\nplt.legend(handles , labels)\nplt.xlabel('percentage')\nplt.show()","d9799075":"import seaborn as sns","0e4413c1":"total_cases_inc = covid_df.sort_values(by='Total_Cases' , ascending=False)\nplt.figure(figsize=(20,20))\nsns.barplot(data =  total_cases_inc , x='State', y='Total_Cases')\nplt.xticks(rotation=90)\nplt.show()","0ef044f2":"sns.catplot(data = covid_df, x='State' , y='Active', kind= \"bar\", height =4 ,aspect = 3) \nplt.xticks(rotation = 90)\nplt.show()","08dbeaaf":"high_low = []\nfor i in covid_df['Active']:\n    if i >12000:\n        high_low.append(1)\n    else:\n        high_low.append(0)","d889211a":"covid_df['Status'] = high_low\ncovid_df.head()","494afef5":"import plotly.express as px","db8db322":"figure = px.bar(covid_df, x ='State' , y='Total_Cases' , color='Status')\nfigure.show()","1100261a":"sns.heatmap(covid_df.corr(), annot = True)","71a91a7a":"fig = px.scatter(covid_df , x=\"Total_Cases\", y=\"Active\" , size=\"Deaths\", size_max=50 , color='State')\nfig.show()","bd795f39":"import geopandas\nfrom cartopy import crs as ccrs","25d9a163":"mapping = px.choropleth(\n    covid_df,\n    geojson=\"https:\/\/gist.githubusercontent.com\/jbrobst\/56c13bbbf9d97d187fea01ca62ea5112\/raw\/e388c4cae20aa53cb5090210a42ebb9b765c0a36\/india_states.geojson\",\n    featureidkey='properties.ST_NM',\n    locations='State',\n    color='Active',\n    color_continuous_scale='Blues'\n)\n\nmapping.update_geos(fitbounds=\"locations\")\n\nmapping.show()","13814247":"from pandas_profiling import ProfileReport","23deb765":"Covid_profile = ProfileReport(covid_df ,title = \"Pandas Profiling Report of Covid 19 State wise\")\nCovid_profile.to_notebook_iframe()","ed54e13f":"\nfig1 = px.bar(x= covid_df.Active.index , y= covid_df.Active.values ,labels = {'x': 'States', 'y' : 'Total Cases (in millions)'}, title = 'State Wise Active Cases' , text= covid_df.Active.values)\nfig1.update_traces(texttemplate='%{text:.2s}' , textposition = 'outside', marker_color ='black')\nfig1.update_layout(uniformtext_minsize = 2, uniformtext_mode='hide', width=1300, height=500)\nfig1.show()","10fb513c":"import plotly.graph_objects as go","a17ab3aa":"new_active_tot = covid_df.sort_values(by='Deaths', ascending=False).head(10)\nfigpie= go.Figure(data=[go.Pie(labels=covid_df['State'],values= new_active_tot['Deaths'])])\nfigpie.update_traces(hoverinfo = 'label+percent', textinfo='label+percent', hole=0.3)\nfigpie.update_layout( title_text=\"Top 10 States with Highest number of Death\")\nfigpie.show()","34bea00c":"vaccine_df = pd.read_csv('..\/input\/vaccine-dataset\/COVID-19 India Statewise Vaccine Data (1).xls')\nvaccine_df.head()","15515939":"print(\"The shape of the dataset is\",vaccine_df.shape)","a34f1289":"vaccine_df.describe(include = 'all')","ec1e3a12":"vaccine_df.isnull().sum()","f93a00f6":"profile_vaccine = ProfileReport(vaccine_df, title = \"Pandas Profiling Report\")\nprofile_vaccine.to_notebook_iframe()","10df3624":"vaccine_df.columns","440545e1":"vaccine_df_new = vaccine_df.sort_values(by=['Dose 1'] , ascending = False)\nfig_vacc = px.line(vaccine_df_new , x = 'State\/UTs', y='Dose 1', title = \"First Dose\", labels={'Dose 1': 'Number of First Dose Administered '})\nfig_vacc.update_layout(width =1300 , height = 600)\nfig_vacc.show()","75798a90":"vaccine_df_new2 = vaccine_df.sort_values(by=['Dose 2'] , ascending = False)\nfig_vacc = px.line(vaccine_df_new , x = 'State\/UTs', y='Dose 2', title = \"Second Dose\", labels={'Dose 2': 'Number of Second Dose Administered '})\nfig_vacc.update_layout(width =1300 , height = 700)\n\nfig_vacc.show()","3a2afd60":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=vaccine_df['State\/UTs'], y=vaccine_df['Dose 1'],\n                    mode='lines+markers',\n                    name='First Dose'))\nfig.add_trace(go.Scatter(x=vaccine_df['State\/UTs'], y=vaccine_df['Dose 2'],\n                    mode='lines+markers',\n                    name='Second Dose'))\nfig.update_layout(width=1300, height=700)\nfig.show()","7376eb16":"new_covid = covid_df.drop(['State'],axis=1)","0c56d79d":"new_covid.head()","95f62f84":"X = new_covid.iloc[:,:-1].values\ny = new_covid.iloc[:,-1].values","094a015b":"from sklearn.model_selection import train_test_split","14a31356":"X_train , X_test ,y_train , y_test = train_test_split(X , y , test_size=0.2, random_state=42)","f13c4269":"from sklearn.linear_model import LogisticRegression\nlogreg=LogisticRegression()\nlogreg.fit(X_train,y_train)\ny_pred=logreg.predict(X_test)","bdd52c20":"y_pred","30d45d4c":"import sklearn\nsklearn.metrics.accuracy_score(y_test,y_pred)","0cfc5320":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pred)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")","b91c8119":"> **Visualizing vaccination data**","30a0355b":"> **NO NULL VALUES**","20ac2c20":"> **In this ve will visualize covid 19 dataset and try to predict it for future**\n","cb6c1e95":"**as we can see the active percent are mainly between 0 to 2 percent**","4c4713f9":"> **Multilinear reg**"}}