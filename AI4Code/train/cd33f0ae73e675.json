{"cell_type":{"889fd4d7":"code","e92fbab4":"code","8013e1ef":"code","6c1bbf65":"code","cf089015":"code","c750c741":"code","cb429669":"code","765c78a3":"code","8821cf74":"code","4a50a38e":"code","9731ad45":"code","0c19f9ee":"code","682dddc9":"code","57402ea5":"code","b36df202":"code","2f0847cd":"code","0e2d29f1":"code","68c7285b":"code","abed82af":"code","c67c92fc":"code","2414a679":"code","a43a68cc":"code","14c9732d":"code","6335fdf5":"code","21ee6a64":"code","476ec905":"code","205599ec":"code","09ce7c68":"code","35ea1825":"code","9cff9133":"code","104cd43c":"code","e756357d":"code","40c749c5":"code","aece8be0":"markdown","c4066cb0":"markdown","dedcb2d2":"markdown","43300031":"markdown","a6fd6254":"markdown","b39c2c95":"markdown","21caa8ba":"markdown","c03ed284":"markdown","ef04b2ce":"markdown","39fab4b9":"markdown","21d2c8ff":"markdown","1e0ae457":"markdown","65722427":"markdown","a36771f5":"markdown","8d9302e6":"markdown","9257970c":"markdown","58eb0755":"markdown","b2ee317d":"markdown","8ba1d730":"markdown","75db9b5a":"markdown","a2b51e02":"markdown","85a8d759":"markdown","8f3f8a2d":"markdown","92d5acb7":"markdown","70b46d98":"markdown","eccfdf8b":"markdown","e175a945":"markdown","574c08e5":"markdown","6b08145d":"markdown"},"source":{"889fd4d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e92fbab4":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns","8013e1ef":"Acq_Petrigano = pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Petrignano.csv\")","6c1bbf65":"# percentages of null values\nAcq_Petrigano.isnull().sum()\/len(Acq_Petrigano)*100","cf089015":"#first row with not null values\nAcq_Petrigano.notnull().idxmax()","c750c741":"Acq_Petrigano.iloc[1024,:]","cb429669":"Acq_Petrigano['Date'] = pd.to_datetime(Acq_Petrigano['Date'], format = '%d\/%m\/%Y')\n","765c78a3":"# we can skip data before 2018-12-31\nAcq_Petrignano_post_2009 = Acq_Petrigano[Acq_Petrigano['Date']>= '2009-01-01']","8821cf74":"Acq_Petrignano_post_2009.isnull().sum()","4a50a38e":"Acq_Petrignano_post_2009.set_index('Date', inplace = True)","9731ad45":"Acq_Petrignano_post_2009['Hydrometry_Fiume_Chiascio_Petrignano'] = np.where(Acq_Petrignano_post_2009['Hydrometry_Fiume_Chiascio_Petrignano'] == 0,np.nan,Acq_Petrignano_post_2009['Hydrometry_Fiume_Chiascio_Petrignano'])\nAcq_Petrignano_post_2009['Volume_C10_Petrignano'] = np.where(Acq_Petrignano_post_2009['Volume_C10_Petrignano'] == 0, np.nan,Acq_Petrignano_post_2009['Volume_C10_Petrignano'] )\nAcq_Petrignano_post_2009['Temperature_Petrignano'] = np.where(Acq_Petrignano_post_2009['Temperature_Petrignano'] == 0, np.nan,Acq_Petrignano_post_2009['Temperature_Petrignano'])","0c19f9ee":"Acq_Petrignano_post_2009['Depth_to_Groundwater_P24'] = Acq_Petrignano_post_2009['Depth_to_Groundwater_P24'].interpolate() \nAcq_Petrignano_post_2009['Depth_to_Groundwater_P25'] = Acq_Petrignano_post_2009['Depth_to_Groundwater_P25'].interpolate()\nAcq_Petrignano_post_2009['Temperature_Petrignano'] = Acq_Petrignano_post_2009['Temperature_Petrignano'].interpolate()\nAcq_Petrignano_post_2009['Volume_C10_Petrignano'] = Acq_Petrignano_post_2009['Volume_C10_Petrignano'].interpolate()\nAcq_Petrignano_post_2009['Hydrometry_Fiume_Chiascio_Petrignano'] = Acq_Petrignano_post_2009['Hydrometry_Fiume_Chiascio_Petrignano'].interpolate()","682dddc9":"Acq_Petrignano_post_2009_res = Acq_Petrignano_post_2009.resample('W').mean()\nAcq_Petrignano_post_2009_res.isnull().sum()","57402ea5":"fig , ax = plt.subplots(nrows = 3 , ncols=2, figsize= (15,25))\n\nsns.lineplot(x = Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Rainfall_Bastia_Umbra'],ax = ax[0][0])\nax[0][0].set_title('Feature:Rainfall_Bastia_Umbra')\nax[0][0].set_ylabel('Rainfall_Bastia_Umbra')\n\nsns.lineplot(x =  Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Depth_to_Groundwater_P24'], ax = ax[0][1])\nax[0][1].set_title('Feature:Depth_to_Groundwater_P24')\nax[0][1].set_ylabel('Depth_to_Groundwater_P24')\n\nsns.lineplot(x =  Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Depth_to_Groundwater_P25'], ax = ax[1][0])\nax[1][0].set_title('Feature:Depth_to_Groundwater_P25')\nax[1][0].set_ylabel('Depth_to_Groundwater_P25')\n\nsns.lineplot(x =  Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Temperature_Bastia_Umbra'], ax = ax[1][1])\nax[1][1].set_title('Feature:Temperature_Bastia_Umbra')\nax[1][1].set_ylabel('Temperature_Bastia_Umbra')\n\nsns.lineplot(x =  Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Temperature_Petrignano'], ax = ax[1][1])\nax[1][1].set_title('Feature:Temperature_Petrignano')\nax[1][1].set_ylabel('Temperature_Petrignano')\n\nsns.lineplot(x =  Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Volume_C10_Petrignano'], ax = ax[2][0])\nax[2][0].set_title('Feature:Volume_C10_Petrignano')\nax[2][0].set_ylabel('Volume_C10_Petrignano')\n\nsns.lineplot(x =  Acq_Petrignano_post_2009_res.index, y = Acq_Petrignano_post_2009_res['Hydrometry_Fiume_Chiascio_Petrignano'], ax = ax[2][1])\nax[2][1].set_title('Feature:Hydrometry_Fiume_Chiascio_Petrignano')\nax[2][1].set_ylabel('Hydrometry_Fiume_Chiascio_Petrignano')\n\nplt.tight_layout() \nplt.show()","b36df202":"for i in range(1, 13):\n    Acq_Petrignano_post_2009_res[f'Rainfall_Bastia_Umbra_diff_{i}'] = Acq_Petrignano_post_2009_res['Rainfall_Bastia_Umbra'].diff(periods = i)\n    Acq_Petrignano_post_2009_res[f'Temperature_Bastia_Umbra_diff_{i}'] = Acq_Petrignano_post_2009_res['Temperature_Bastia_Umbra'].diff(periods = i)\n    Acq_Petrignano_post_2009_res[f'Temperature_Petrignano_diff_{i}'] = Acq_Petrignano_post_2009_res['Temperature_Petrignano'].diff(periods = i)\n    Acq_Petrignano_post_2009_res[f'Volume_C10_Petrignano_diff_{i}'] = Acq_Petrignano_post_2009_res['Volume_C10_Petrignano'].diff(periods = i)\n    Acq_Petrignano_post_2009_res[f'Hydrometry_Fiume_Chiascio_Petrignano_diff_{i}'] = Acq_Petrignano_post_2009_res['Hydrometry_Fiume_Chiascio_Petrignano'].diff(periods = i)\n    \n    ","2f0847cd":"Acq_Petrignano_post_2009_res['Depth_to_Groundwater_P24_shifted'] = Acq_Petrignano_post_2009_res['Depth_to_Groundwater_P24'].shift(-4)\nAcq_Petrignano_post_2009_res['Depth_to_Groundwater_P25_shifted'] = Acq_Petrignano_post_2009_res['Depth_to_Groundwater_P25'].shift(-4)\n","0e2d29f1":"Acq_Petrignano_post_2009_res[[col for col in Acq_Petrignano_post_2009_res.columns if col.startswith('Depth') ]].tail(8)","68c7285b":"Acq_Petrignano_post_2009_res.drop(['Depth_to_Groundwater_P25','Depth_to_Groundwater_P24'], axis = 1 , inplace = True)\nAcq_Petrignano_post_2009_res.dropna(inplace= True)\n","abed82af":"from sklearn.model_selection import TimeSeriesSplit, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","c67c92fc":"target = ['Depth_to_Groundwater_P24_shifted', 'Depth_to_Groundwater_P25_shifted']\nfeatures = [col for col in Acq_Petrignano_post_2009_res.columns if col not in target]","2414a679":"X = Acq_Petrignano_post_2009_res[features].values\ny = Acq_Petrignano_post_2009_res[target].values","a43a68cc":"print(\"X shape :\", X.shape)\nprint(\"y shape :\",y.shape)","14c9732d":"tscv = TimeSeriesSplit(n_splits = 2)","6335fdf5":"for train_index, test_index in tscv.split(X):\n    score = []\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    param_grid = { 'criterion': ['mse','mae'],'min_samples_split': [2,5], 'min_samples_leaf':[1,2]}\n    gs = GridSearchCV(RandomForestRegressor(), param_grid)\n    pipe = Pipeline([('scaler',StandardScaler()),('gs_rfr',gs)])\n    pipe.fit(X_train, y_train)\n","21ee6a64":"pipe.named_steps['gs_rfr'].best_params_","476ec905":"pipe.named_steps['gs_rfr'].best_estimator_.score(X_test, y_test)","205599ec":"# create training, testing and predicted dataframe\ntrain_index_array = np.array(Acq_Petrignano_post_2009_res.iloc[train_index].index)\ntrain_index_array=train_index_array.reshape(-1,1).astype('str')\ntrain_array = np.hstack((train_index_array, y_train))\ntrain_df = pd.DataFrame(train_array, columns= ['Date','Depth_to_Groundwater_P24','Depth_to_Groundwater_P25'])\ntrain_df['Type'] = 'train'\n\n\ntest_index_array = np.array(Acq_Petrignano_post_2009_res.iloc[test_index].index)\ntest_index_array =test_index_array.reshape(-1,1).astype('str')\ntest_array = np.hstack((test_index_array, y_test))\ntest_df = pd.DataFrame(test_array, columns= ['Date','Depth_to_Groundwater_P24','Depth_to_Groundwater_P25'])\ntest_df['Type'] = 'test'\n\n\npredict_test_index_array = np.array(Acq_Petrignano_post_2009_res.iloc[test_index].index)\npredict_test_index_array = predict_test_index_array.reshape(-1,1).astype('str')\npredict_test_array = np.hstack((test_index_array,pipe.named_steps['gs_rfr'].best_estimator_.predict(X_test)))\npredict_test_df = pd.DataFrame(test_array, columns= ['Date','Depth_to_Groundwater_P24','Depth_to_Groundwater_P25'])\npredict_test_df['Type'] = 'predicted'","09ce7c68":"print(\"Train dataframe: \")\nprint(train_df.head(2))\nprint(\"Test dataframe: \")\nprint(test_df.head(2))\nprint(\"Predicted dataframe: \")\nprint(predict_test_df.head(2))","35ea1825":"df = [train_df, test_df, predict_test_df]\n\nfor d in df:\n    d['Date'] = pd.to_datetime(d['Date'], format = '%Y-%m-%d')\n    d['Depth_to_Groundwater_P24'] = d['Depth_to_Groundwater_P24'].astype('float')\n    d['Depth_to_Groundwater_P25'] = d['Depth_to_Groundwater_P25'].astype('float')\n    d.set_index('Date', inplace = True)\n    ","9cff9133":"fig , ax = plt.subplots(nrows = 2, ncols = 1,  figsize = (10, 8))\n\nsns.lineplot(x =  train_df.index, y = train_df['Depth_to_Groundwater_P24'],color = 'blue', ax = ax[0], label = 'Depth_to_Groundwater_P24_training')\nsns.lineplot(x =  test_df.index, y = test_df['Depth_to_Groundwater_P24'],color = 'green', ax = ax[0], label = 'Depth_to_Groundwater_P24_testing')\nsns.lineplot(x =  predict_test_df.index, y = predict_test_df['Depth_to_Groundwater_P24'],color = 'red', ax = ax[0], label = 'Depth_to_Groundwater_P24_predicted')\nax[0].set_title('Predicted vs True values Depth_to_Groundwater_P24')\nax[0].set_ylabel('Depth_to_Groundwater_P24')\n\n\nsns.lineplot(x =  train_df.index, y = train_df['Depth_to_Groundwater_P25'],color = 'blue', ax = ax[1], label = 'Depth_to_Groundwater_P25_training')\nsns.lineplot(x =  test_df.index, y = test_df['Depth_to_Groundwater_P25'],color = 'green', ax = ax[1], label = 'Depth_to_Groundwater_P25_testing')\nsns.lineplot(x =  predict_test_df.index, y = predict_test_df['Depth_to_Groundwater_P25'],color = 'red', ax = ax[1], label = 'Depth_to_Groundwater_P25_predicted')\nax[1].set_title('Predicted vs True values Depth_to_Groundwater_P25')\nax[1].set_ylabel('Depth_to_Groundwater_P25')\n\nplt.tight_layout() \nplt.show()","104cd43c":"importances =pipe.named_steps['gs_rfr'].best_estimator_.feature_importances_","e756357d":"importances_df = pd.DataFrame(data = importances, index = features, columns = ['Importance']  )\nimportances_df.sort_values('Importance',ascending = False, inplace = True)\nimportances_df['Importance_cumulated'] = importances_df['Importance'].cumsum()  ","40c749c5":"sns.barplot(x =importances_df.index[:10] , y = importances_df['Importance'][:10] )\nplt.xticks(rotation = 90) \nplt.title(\"Features importance\")","aece8be0":"### Notebook is divided in three parts:\n*   Data exploration with the aim of eliminate null values and prepare data for features engineering and model development\n*  Features engineering\n*  Model development:  I will use RandomForestRegressor with GridSearch for hyperparameters tuning","c4066cb0":"### 1 - Data exploration","dedcb2d2":"# RandomForestRegressor for Acquifer forecast","43300031":"We can get most important features of best estimator and create a dataframe with that  features","a6fd6254":"Now there are only few fariables with null values; from the graphs below we cal also see that there are some values to zero for Hydrometry_Fiume_Chiascio_Petrignano, Volume_C10_Petrignano and Temperature_Petrignano. We can substitute this values with null values and then interpolate the missing values","b39c2c95":"We have a features matrix of n variables and m rows. We want to predict t period in advance the target variable so we shift it t period. In this case we use the first m -t rows to predict t periods in advance.","21caa8ba":"The most important feature is Volume_C10_Petrignao and Hydrometry_Fiume_Cascio_Petrignano: these two variables account for more than 44% of the variation of Depth to groundwater","c03ed284":"![Immagine.png](attachment:Immagine.png)","ef04b2ce":"There are some variables with a null percentage around 20%; we need to dig more in order to fix this; let's take a look at first not null indice of the dataframe","39fab4b9":"Scoring of best estimators is:","21d2c8ff":"![model.png](attachment:model.png)","1e0ae457":"Best parameters are:","65722427":"Null values:","a36771f5":"We use TimeSeriesSplit to split data between train and test. Before applying RandomForestRegressor we scale the data and then we apply GridSearch to find the best parameters for the model","8d9302e6":"Our model objective will be to predict Deph to Groundwater for the next four weeks, so we a month forecast. In order to do this we need to shift our target variable ","9257970c":"### 1 - Data exploration","58eb0755":"This is the model I want to build.","b2ee317d":"First row with values:","8ba1d730":"We can create three dataframes: first with training data, second with testing data and third with predicted data ","75db9b5a":"Defining target and features variable","a2b51e02":"We can create new variables simply by calculate the difference with previous values with different time periods ","85a8d759":"Fist 1024 rows of the dataframe have three variables (Rainfall_Bastia_Umbra, Temperature_Bastia_Umbra, Temperature_Petrignano) with null values. This correspond to data before 01\/01\/2009 so we can delete this data range","8f3f8a2d":"### Plotting variable importance:","92d5acb7":"In this filter I have maintained original Depht_to_Groundwater variables and the corresponded shifted values. Take for example row 2020-06-07: in this case we use features variables ( for example volumes, temperatures or hydrometry data) to predict Depth to groundwater at 2020-07-05.  For Depth to groundwater at 2020-06-28 we use target fetures observed at 2020-05-31","70b46d98":"Graphs with predicted values vs true values for the two target variables are the following:","eccfdf8b":"### The goal of this notebook is to develop a regression model for time series forecasting. I will use Acquifer Petrignano data but the same model can be used with other acquifer. ","e175a945":"Afer interpolation e resempling of the data with have a dataframe without null values","574c08e5":"Checking for null values:","6b08145d":"### 3 -  Model building"}}