{"cell_type":{"33e2cd9c":"code","c8ae252b":"code","3a36586b":"code","4fe8c99d":"code","b0815cdc":"code","02ef6359":"code","3e6c0a54":"code","95bf5345":"code","b9aa4d23":"code","45af7956":"code","ce4b3ae7":"code","a7d7d7d1":"code","3359f61b":"code","2a171e8f":"code","d0f9f697":"code","73bd84d3":"code","2d07940d":"code","1c040486":"code","44a55425":"code","ecaf51de":"code","4a1795a4":"code","c273b512":"code","546391eb":"code","bcf85b23":"code","54e84703":"code","ecc7c8a5":"code","e34d69c3":"code","c303d0a6":"code","999dfaa8":"code","9235ae68":"code","e58c89ca":"code","f489655a":"code","5e914424":"code","8142e233":"code","46f2a8a3":"code","b9cbfb67":"code","e0b4dbcc":"code","6387bdcb":"code","68ed3d10":"code","bc998f4b":"code","638eff06":"code","104eb50a":"code","da2930ca":"code","c9c71425":"code","0343e949":"code","05b091e0":"code","c8d2e49e":"code","050c206c":"code","65d3fedc":"code","62ceeeb1":"code","c03f206f":"code","cd0b28cc":"code","01835e13":"code","fa0e35a2":"code","7804839b":"code","70795d05":"code","f61ad744":"markdown","9037bb3d":"markdown"},"source":{"33e2cd9c":"!pip install wwf timm -qqq","c8ae252b":"#downgrade pytorch because 1.9.1 is causing conflicts\n!pip install --user torch==1.9.0","3a36586b":"from wwf.utils import *","4fe8c99d":"#state_versions(['fastai', 'fastcore'])","b0815cdc":"import numpy as np\nimport os\nimport pandas as pd\nfrom fastai.vision.all import *","02ef6359":"from timm import create_model\nfrom fastai.vision.learner import _update_first_layer","3e6c0a54":"\ndef create_timm_body(arch:str, pretrained=True, cut=None, n_in=3):\n    \"Creates a body from any model in the `timm` library.\"\n    model = create_model(arch, pretrained=pretrained, num_classes=0, global_pool='')\n    _update_first_layer(model, n_in, pretrained)\n    if cut is None:\n        ll = list(enumerate(model.children()))\n        cut = next(i for i,o in reversed(ll) if has_pool_type(o))\n    if isinstance(cut, int): return nn.Sequential(*list(model.children())[:cut])\n    elif callable(cut): return cut(model)\n    else: raise NamedError(\"cut must be either integer or function\")","95bf5345":"#body = create_timm_body('resnet18', pretrained=True)\nbody = create_timm_body('efficientnetv2_rw_m', pretrained=True)\n#resnetv2_50x1_bitm_in21k\n#efficientnetv2_rw_t","b9aa4d23":"path = Path('..\/input\/petfinder-pawpularity-score')","45af7956":"train = pd.read_csv(path\/'train.csv')","ce4b3ae7":"train.head()","a7d7d7d1":"train['image'] = train['Id'].apply(lambda x: 'train\/{}.jpg'.format(x))","3359f61b":"train = train.drop(columns=['Id'])\ntrain = train.sample(frac=1).reset_index(drop=True)\ntrain.head(10)","2a171e8f":"blocks = [ImageBlock, RegressionBlock()]","d0f9f697":"item_tfms = [Resize(460)];# size should be bigger","73bd84d3":"batch_tfms = [*aug_transforms(flip_vert=True,size=(224)), Normalize.from_stats(*imagenet_stats)]","2d07940d":"bs=8","1c040486":"splitter = RandomSplitter()","44a55425":"def get_x(row): return path\/row['image']","ecaf51de":"pets = DataBlock(blocks =blocks,\n                  get_x = get_x,\n                  get_y = ColReader('Pawpularity'),\n                  splitter =splitter,\n                  item_tfms=item_tfms,\n                  batch_tfms = batch_tfms,\n                  )","4a1795a4":"dls = pets.dataloaders(train, bs=bs)","c273b512":"dls.show_batch(nrows=2,ncols=1,figsize=(10,10))","546391eb":"nf = num_features_model(body); nf","bcf85b23":"head = create_head(nf, dls.c, concat_pool=True)","54e84703":"net = nn.Sequential(body, head)","ecc7c8a5":"learn = Learner(dls, net, splitter=default_split)","e34d69c3":"learn.freeze()\nfrozen = filter(lambda p: not p.requires_grad, learn.model.parameters())\nfrozen = sum([np.prod(p.size()) for p in frozen])\nmodel_parameters = filter(lambda p: p.requires_grad, learn.model.parameters())\nunfrozen = sum([np.prod(p.size()) for p in model_parameters])","c303d0a6":"frozen, unfrozen","999dfaa8":"def create_timm_model(arch:str, n_out, cut=None, pretrained=True, n_in=3, init=nn.init.kaiming_normal_, custom_head=None,\n                     concat_pool=True, **kwargs):\n    \"Create custom architecture using `arch`, `n_in` and `n_out` from the `timm` library\"\n    body = create_timm_body(arch, pretrained, None, n_in)\n    if custom_head is None:\n        nf = num_features_model(nn.Sequential(*body.children()))\n        head = create_head(nf, n_out, concat_pool=concat_pool, **kwargs)\n    else: head = custom_head\n    model = nn.Sequential(body, head)\n    if init is not None: apply_init(model[1], init)\n    return model\n\n# Cell\nfrom fastai.vision.learner import _add_norm\n\n#exports\ndef timm_learner(dls, arch:str, loss_func=None, pretrained=True, cut=None, splitter=None,\n                y_range=None, config=None, n_out=None, normalize=True, **kwargs):\n    \"Build a convnet style learner from `dls` and `arch` using the `timm` library\"\n    if config is None: config = {}\n    if n_out is None: n_out = get_c(dls)\n    assert n_out, \"`n_out` is not defined, and could not be inferred from data, set `dls.c` or pass `n_out`\"\n    if y_range is None and 'y_range' in config: y_range = config.pop('y_range')\n    model = create_timm_model(arch, n_out, default_split, pretrained, y_range=y_range, **config)\n    learn = Learner(dls, model, loss_func=loss_func, splitter=default_split, **kwargs)\n    if pretrained: learn.freeze()\n    return learn","9235ae68":"learn = timm_learner(dls, 'efficientnetv2_rw_m', metrics=[rmse])","e58c89ca":"frozen = filter(lambda p: not p.requires_grad, learn.model.parameters())\nfrozen = sum([np.prod(p.size()) for p in frozen])\nmodel_parameters = filter(lambda p: p.requires_grad, learn.model.parameters())\nunfrozen = sum([np.prod(p.size()) for p in model_parameters])","f489655a":"frozen, unfrozen","5e914424":"learn.fine_tune(4)","8142e233":"learn.save('stage_1')","46f2a8a3":"learn.load('stage_1')","b9cbfb67":"learn.unfreeze()","e0b4dbcc":"lrs = learn.lr_find(suggest_funcs=(minimum, steep, valley, slide))","6387bdcb":"lrs.slide","68ed3d10":"lrs.valley","bc998f4b":"\nlearn.fine_tune(5, base_lr=lrs.valley) ","638eff06":"learn.save('stage_2')","104eb50a":"learn.load('stage_2');","da2930ca":"sample_df = pd.read_csv(path\/'sample_submission.csv')\nsample_df.head()","c9c71425":"test_df = pd.read_csv(path\/'test.csv')\ntest_df.head()","0343e949":"test_imgs = '..\/input\/petfinder-pawpularity-score\/test'","05b091e0":"test_df['image'] = test_df['Id'].apply(lambda x: 'test\/{}.jpg'.format(x))","c8d2e49e":"test_df.head()","050c206c":"sample_copy = test_df.copy()","65d3fedc":"sample_copy.head()","62ceeeb1":"test_dl = learn.dls.test_dl(sample_copy)","c03f206f":"test_dl.show_batch()","cd0b28cc":"preds = learn.get_preds(dl=test_dl)","01835e13":"import os \ntest_data = pd.DataFrame()","fa0e35a2":"test_data['Id'] = [img[:-4]for img in os.listdir(test_imgs)]\ntest_data","7804839b":"# Now adding the pawpularity score to our dataframe \ntest_data['Pawpularity'] = preds[0].detach().numpy()\ntest_data","70795d05":"# Making the submission\ntest_data.to_csv('submission.csv' , index=False)","f61ad744":"Inference","9037bb3d":"Added the next two rows for new getx"}}