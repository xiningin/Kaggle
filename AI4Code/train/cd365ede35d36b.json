{"cell_type":{"fae503d9":"code","42cb5dcd":"code","d201198f":"code","b5a5ee53":"code","6806041d":"code","4ef9a925":"code","45d856ae":"code","5852afbe":"code","8a3fd37d":"code","09a3972b":"code","d88efd67":"code","2a0406aa":"code","43c6e182":"markdown","6d6a85f6":"markdown","f7988db1":"markdown","4d6c674b":"markdown","b4f15bb7":"markdown","93452f1e":"markdown"},"source":{"fae503d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","42cb5dcd":"class BassModel():\n\n          \n    def _add_cumulative(self):\n        self.df['cum_' + self.daily] = self.df[self.daily].cumsum()\n        \n    def _df_for_liner_reg(self):\n        self.df['N'] = self.df['cum_' + self.daily].shift(1)\n        self.df['N**2'] = self.df['cum_' + self.daily].shift(1)**2\n        return self.df.dropna()\n        \n    def fit(self, df):\n        \"\"\" models takes datase as indput with date index and a daily obesrvation \"\"\"\n        \"\"\" first we build the cumulative of the daily observation\"\"\"\n        self.df = pd.DataFrame(df)\n        self.daily=self.df.columns[0]\n        self._add_cumulative()\n        \"\"\" second  add columns fo cumulative T-1 and cumulative T-1 squared\"\"\"\n        df_for_lr = self._df_for_liner_reg()       \n        lm = linear_model.LinearRegression()\n        lm.fit(df_for_lr[['N', 'N**2']], df_for_lr[self.daily])\n   \n\n        \"\"\" then caluclate b0 b1 b2 and m\"\"\"\n        self.b0 = lm.intercept_\n        self.b1 =  lm.coef_[0]\n        self.b2 =  lm.coef_[1]\n        self.m = (-self.b1- np.sqrt(self.b1**2-(4*self.b0*self.b2))) \/( 2 * self.b2)\n        \n        print ('b0: {}, b1: {}, b2: {}, m: {}'.format(self.b0, self.b1, self.b2, self.m)) \n        \n    def predict(self, t):\n        \n        \"\"\" calculate p and q the parameter for innovator  and imitator\"\"\"\n        self.p2 = self.b0\/self.m\n        self.q2 = -self.b2*self.m\n\n        print (\"p:{}, q: {}\".format(self.p2, self.q2))\n        \n        predictionQt2 = [0,]\n        predictionN2 = [0,]\n\n        \"\"\" then for n dates calculate the predictions\"\"\"\n        for i in range(0,t):\n            N = predictionN2[i]\n#             adoptorenT = (self.p2*self.m)+(self.q2-self.p2)*N + (-self.q2\/self.m) * N**2\n            adoptorenT = (self.p2*self.m)+(self.q2-self.p2)*N+(-self.q2\/self.m)*(N**2)\n            adoptorenT = round(adoptorenT, 2)\n            predictionQt2.append(adoptorenT)\n            predictionN2.append((predictionN2[i]+adoptorenT))\n            \n        return predictionQt2, predictionN2\n\ndef daily(df):\n    return df- df.shift()\n","d201198f":"#  utility class for running bass model with different countries and region\n\nclass Build_Bass ():\n    \n    \"\"\" take the owrld dataset and \"\"\"\n    def __init__(self, df, country, province=None):\n        self.country = country\n        self.df =  df[df['Country\/Region'] == country]\n        if province:\n            self.df = self.df[self.df['Province\/State'] == province]\n        self.df.set_index('Date',inplace = True)\n        self.df['daily'] = daily(self.df['Confirmed'])\n    \n    \"\"\" run fit and predict using bass model\"\"\"\n    def bassdf(self, start_date='2020-01-22', period=61):\n        bm = BassModel()\n        bm.fit(self.df['daily'])\n        bassDF = pd.DataFrame(index=pd.date_range(start_date, periods=period, freq='d'))\n        pred_pos, pred_cum = bm.predict(period-1)\n        bassDF[\"Prediction_Positive\"]= pred_pos\n        bassDF[\"Prediction_Cumulatve\"]  = pred_cum\n        self.df = bassDF.join(self.df, how='outer')\n        \n    \"\"\" plot predticted and obeserved values\"\"\"    \n    def plot(self):\n        self.df['Prediction_Cumulatve'].plot(figsize=(12,8), title = self.country.upper(), legend=True)\n        self.df['Confirmed'].plot(legend=True)\n        self.df['Prediction_Positive'].plot(legend=True)\n        self.df['daily'].plot(legend=True)\n        \n        \n    def plot_daily(self):\n        self.df['Prediction_Positive'].plot(figsize=(12,8))\n        self.df['daily'].plot(figsize=(12,8))\n        \n","b5a5ee53":"import pandas as pd\nnCoV_19_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv\")\nCOVID19_line_list_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_line_list_data.csv\")\nCOVID19_open_line_list = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\")\ncovid_19_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ntime_series_covid_19_confirmed = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ntime_series_covid_19_deaths = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\ntime_series_covid_19_recovered = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")","6806041d":"world = covid_19_data\nworld['Date'] = world['ObservationDate']","4ef9a925":"bb = Build_Bass(world, 'Mainland China', 'Hubei')\nbb.bassdf(start_date='2020-01-23', period=59)\nbb.plot()","45d856ae":"bb = Build_Bass(world, 'South Korea')\nbb.bassdf(start_date='2020-02-12', period=37)\nbb.plot()","5852afbe":"bb = Build_Bass(world, 'Italy')\nbb.bassdf(start_date='2020-02-16', period=60)\nbb.plot()","8a3fd37d":"bb.plot_daily()","09a3972b":"it = world[world['Country\/Region'] == 'Italy']\nit['daily'] = daily(it['Confirmed'])","d88efd67":"bb = Build_Bass(world, 'Iran')\nbb.bassdf(start_date='2020-02-22', period=31)\nbb.plot()","2a0406aa":"bb = Build_Bass(world, 'Germany')\nbb.bassdf(start_date='2020-02-23', period=31)\nbb.plot()","43c6e182":"## VIRUS SPREAD IN HUBEI REGION ","6d6a85f6":"# APPLICATION OF BASS DIFFUSON MODEL ON COVID-19 SPREAD ","f7988db1":"### BASS MODEL WAS DEVELOPED BY FRANK BASS ADN IT IS USED MAINLY TO ANALYZE RATE OF ADOPTION FOR NEW PRODUCTS AND TO CALCULATE THE POTENTIAL MARKET \n### THE BASIC PREMISE IS ADOPTERS CAN BE CLASSIFIED AS INNOVATORS OR IMITATORS\n### THIS NOTEBOOK IS JUST AN EXCERCISE TO CHECK HOW WELL THIS MODEL CAN PREDICT SPREAD OF VIRUS EXTENDID THOSE ASSUMPTION ON TWO DIFFERENT RATE FOR PEOPLE TO CACTH THE VIRUS\n### if you want to learn more on bass model check wikipedia page https:\/\/en.wikipedia.org\/wiki\/Bass_diffusion_model","4d6c674b":"## VIRUS SPREAD IN ITALY ","b4f15bb7":"### ok it does seems the model does not well adapt to this situation, it seems to adapt when a situation is close to its peak but if there are few values and we are far to the peak it fail to predict the evolution of the virus or might need more tuning","93452f1e":"## VIRUS SPREAD IN SOUTH KOREA\n"}}