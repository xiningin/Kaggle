{"cell_type":{"f3aed4f2":"code","09e025da":"code","55d26c55":"code","2101fac8":"code","9a76c52d":"code","18c452b6":"code","d7e58d9c":"code","0905ff39":"code","27ae5150":"code","836879e7":"code","9e469ad9":"code","7ec9d046":"code","8ab82e3f":"code","ca8ef782":"code","3c74c8bc":"code","de6aea46":"code","257770bd":"code","b34833de":"code","08508523":"code","c6f7a0c4":"code","7c24e7c4":"code","6a51b9ce":"code","8798cd2c":"code","045c7847":"code","c6dbf24c":"code","6a431ddd":"code","616ab06b":"code","7fffc592":"code","157e9928":"code","7f1657ec":"code","4561a6f7":"markdown","1c8f3334":"markdown","4eb8cc8e":"markdown","aa7efa65":"markdown","cdec4e8c":"markdown","1c6c080e":"markdown","546f98a4":"markdown"},"source":{"f3aed4f2":"import numpy as np\nimport pandas as pd\n\ndataset = pd.read_csv(\"\/kaggle\/input\/league-of-legends-ranked-games\/challenger.csv\")\ndataset.drop(['vilemaw_kills_team_1', 'vilemaw_kills_team_2'], axis=1, inplace=True)\ndataset.head(10)","09e025da":"import seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt","55d26c55":"g = sns.distplot(dataset[\"win\"])","2101fac8":"g = sns.lmplot(x=\"tower_kills_team_2\", y=\"tower_kills_team_1\", col=\"first_tower\", height=4, data=dataset, hue=\"win\")","9a76c52d":"g = sns.lmplot(x=\"inhibitor_kills_team_2\", y=\"inhibitor_kills_team_1\", col=\"first_inhibitor\",data=dataset, height=4, hue=\"win\")","18c452b6":"g = sns.lmplot(x=\"dragon_kills_team_2\", y=\"dragon_kills_team_1\", col=\"first_dragon\", data=dataset, height=4, hue=\"win\")","d7e58d9c":"g = sns.lmplot(x=\"baron_kills_team_1\", y=\"baron_kills_team_2\", col=\"first_baron\", height=4, data=dataset, hue=\"win\",  markers=[\"o\", \"x\"])","0905ff39":"g = sns.lmplot(x=\"rift_herald_kills_team_2\", y=\"rift_herald_kills_team_1\", col=\"first_rift_herald\", data=dataset, height=4, hue=\"win\", markers=[\"o\", \"x\"])","27ae5150":"plt.figure(figsize=(15,8))\nplt.title(\"Relationship between objectives achievement factors and the team that won\")\nsns.heatmap(\n    dataset.iloc[:,0:17].corr(),\n    annot=False,\n    linewidths=.5,\n)","836879e7":"playersP = dataset.iloc[:,17:52]\nplayersP['win'] = dataset['win']\n\nplt.figure(figsize=(15,8))\nplt.title(\"Correlation between the performance of team 1 players\")\nsns.heatmap(\n    playersP.corr(),\n    annot=False,\n    linewidths=.5,\n)","9e469ad9":"playersP = dataset.iloc[:,52:88]\nplayersP['win'] = dataset['win']\n\nplt.figure(figsize=(15,8))\nplt.title(\"Correlation between the performance of team 2 players\")\nsns.heatmap(\n    playersP.corr(),\n    annot=False,\n    linewidths=.5,\n)","7ec9d046":"top=[\"gold_earned_20m_top_team_1\", \"cs_20m_top_team_1\", \"xp_20m_top_team_1\", \"damege_taken_20m_top_team_1\"]\ntop2=[\"gold_earned_20m_top_team_2\", \"cs_20m_top_team_2\", \"xp_20m_top_team_2\", \"damege_taken_20m_top_team_2\"]\nmiddle=[\"gold_earned_20m_middle_team_1\", \"cs_20m_middle_team_1\", \"xp_20m_middle_team_1\", \"damege_taken_20m_middle_team_1\"]\njungle=[\"gold_earned_20m_jungle_team_1\", \"cs_20m_jungle_team_1\", \"xp_20m_jungle_team_1\", \"damege_taken_20m_jungle_team_1\"]\nbottom_duo_carry=[\"gold_earned_20m_bottom_duo_carry_team_1\", \"cs_20m_bottom_duo_carry_team_1\", \"xp_20m_bottom_duo_carry_team_1\", \"damege_taken_20m_bottom_duo_carry_team_1\"]\nbottom_duo_support=[\"gold_earned_20m_bottom_duo_support_team_1\", \"cs_20m_bottom_duo_support_team_1\", \"xp_20m_bottom_duo_support_team_1\", \"damege_taken_20m_bottom_duo_support_team_1\"]","8ab82e3f":"g = sns.pairplot(dataset, vars=top, hue=\"win\", height=3)","ca8ef782":"g = sns.pairplot(dataset, vars=middle, hue=\"win\", height=3)","3c74c8bc":"g = sns.pairplot(dataset, vars=jungle, hue=\"win\", height=3)","de6aea46":"g = sns.pairplot(dataset, vars=bottom_duo_carry, hue=\"win\", height=4)","257770bd":"g = sns.pairplot(dataset, vars=bottom_duo_support, hue=\"win\", height=4)","b34833de":"x = dataset.drop('win', axis=1)\ny = dataset['win']","08508523":"print(x.shape)\nprint(y.shape)","c6f7a0c4":"from sklearn.model_selection import train_test_split\n\n#divides the training dataset into training and testing, separating 25% in testing\n#x = attributes e y = classes\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)","7c24e7c4":"print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)","6a51b9ce":"from sklearn.tree import DecisionTreeClassifier\n#create the tree\ntree = DecisionTreeClassifier(criterion='gini', splitter='random', max_depth=5, random_state=0)\n#create the model\nmodel = tree.fit(x_train, y_train)","8798cd2c":"from sklearn.metrics import accuracy_score\n# prediction of test data \npredict = model.predict(x_test)","045c7847":"acc = accuracy_score(y_test, predict)\nprint(\"Accuracy: \", format(acc))","c6dbf24c":"!pip install pydotplus","6a431ddd":"from sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nfrom sklearn.tree import export_graphviz\nimport pydotplus as pydot\n\ndot_data = StringIO()\nexport_graphviz(model, out_file=dot_data, filled=True, rounded=True,special_characters=True)\ngraph = pydot.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())","616ab06b":"test = pd.read_csv(\"\/kaggle\/input\/league-of-legends-ranked-games\/others_tiers.csv\")\ntest.drop(['vilemaw_kills_team_1', 'vilemaw_kills_team_2'], axis=1, inplace=True)\ntest.head(5)","7fffc592":"g = sns.distplot(test[\"win\"], kde=False)","157e9928":"x_test_random = test.drop('win', axis=1)\ny_test_random = test['win']\nprint(x_test_random.shape)\nprint(y_test_random.shape)","7f1657ec":"predict_test = model.predict(x_test_random)\nacc_test = accuracy_score(y_test_random, predict_test)\nprint(\"Accuracy: \", format(acc_test))","4561a6f7":"<h2>1. Data analysis(Challenger's Games)<\/h2>","1c8f3334":"<h3>1.3. Player's Performance<\/h3>","4eb8cc8e":"<h2>3. Comparing results with the random game dataset<\/h2>","aa7efa65":"<h1>Prediction Model for Win Classification in League of Legends Matches<\/h1>","cdec4e8c":"<h3>1.1. Win Distribution<\/h3>","1c6c080e":"<h2>2. Creating the model<\/h2>","546f98a4":"<h3>1.2. Objectives Achievement<\/h3>"}}