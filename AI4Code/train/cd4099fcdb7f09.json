{"cell_type":{"825875b5":"code","1607d499":"code","40201148":"code","3303a90c":"code","cb57f9c5":"code","14a41d65":"code","d23a6def":"code","25126a0b":"code","fe55bd5c":"code","81b0d569":"code","39143506":"code","ee08f9f7":"code","23849496":"code","7a8165d1":"markdown","a87cf12d":"markdown"},"source":{"825875b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1607d499":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.metrics.pairwise import pairwise_kernels","40201148":"df1= pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\ndf2= pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")","3303a90c":"df1.head()","cb57f9c5":"df2.head()","14a41d65":"df1['overview']","d23a6def":"tf=TfidfVectorizer(stop_words=\"english\")\ndf1['overview']= df1['overview'].fillna(\"\")\ntf_matrix= tf.fit_transform(df1['overview'])","25126a0b":"consine_sem= pairwise_kernels(tf_matrix,tf_matrix)","fe55bd5c":"indeces= pd.Series(df1.index, index=df1[\"original_title\"]).drop_duplicates()","81b0d569":"indeces","39143506":"indeces[\"The Dark Knight Rises\"]","ee08f9f7":"def get_recomendation(title, semilar= consine_sem):\n    idx= indeces[title]\n    sem_score= enumerate(consine_sem[idx])\n    sem_score= sorted (sem_score, key=lambda x: x[1], reverse= True)\n    sem_score[1:11]\n    sem_index=[i[0] for i in sem_score]\n    print(df1[\"original_title\"].iloc[sem_index])\n\nget_recomendation(\"The Dark Knight Rises\")","23849496":"get_recomendation(\"Batman Forever\")","7a8165d1":"function that use to take ","a87cf12d":"*Consine simlirty*"}}