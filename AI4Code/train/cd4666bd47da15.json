{"cell_type":{"9a4d8607":"code","5f0f92a6":"code","715fb962":"code","8bfa8962":"code","e7df8951":"code","b908bbb8":"code","0f42bf72":"code","dcb9f06f":"code","4e49d42e":"code","2a7d5cbb":"code","b194f580":"code","fb72eb15":"code","9f87cc9d":"code","e6f9032b":"code","3ba81ce2":"code","fe939f6c":"code","8be5aee8":"code","3102ef2d":"code","19f12703":"code","e2c5ec05":"code","de48bf38":"code","53c57425":"code","7a7e2070":"code","ed4898fa":"code","1d4b7df1":"code","0bd1020c":"code","12844373":"code","c856dd4f":"code","4f29d606":"code","aeb60755":"code","98e69631":"code","49fc303b":"code","ebb1fc30":"code","50255940":"code","f03ec90c":"code","181be5f0":"code","8cf73ae5":"code","85715345":"code","a8f80ce1":"code","d9537bd0":"code","d2dd9853":"code","901bc06d":"code","571cbe64":"code","4a260eb1":"code","007cd5d5":"code","37b298d5":"code","9ffd557e":"code","c6bfd49d":"code","be977a46":"code","2409661e":"code","03211686":"code","5a7db795":"code","5133fb34":"code","1259ed10":"code","6c0b04d5":"code","7d3e8df5":"code","7fc7d611":"code","246f30b9":"code","12eb90be":"code","85a56afb":"code","5e9e9168":"code","9b4a5425":"code","f564cb0b":"code","ff6b03d5":"code","c9901e60":"code","84c15f88":"code","632a424e":"code","17bb4c51":"code","d2d4d78d":"code","580afb1e":"code","9ae006c9":"code","e9526bf5":"code","0d8dd41e":"code","b05d4bec":"code","15caa382":"code","a2036906":"code","d097c611":"code","0001694e":"code","80b63dfd":"code","bd2692ca":"code","a598be5c":"code","ca0c677b":"code","f6239021":"code","ce1e39e0":"code","ab2ec5c5":"code","cea9e266":"code","b84e36bb":"code","0f631ad0":"code","d21d0fd4":"code","ec844695":"code","cb520f3e":"code","447295dc":"code","ccf377fd":"code","c4947462":"code","e39d27fc":"code","0dc30576":"code","db602d21":"code","659b9cf3":"code","042b5b7f":"code","3ecc54ea":"code","ff844232":"code","d1783e9a":"code","53c67013":"code","c7772d05":"code","121eb737":"markdown","dfdf2db9":"markdown","f90d5889":"markdown","2e5a36b3":"markdown","c6649929":"markdown","c08aa233":"markdown","96651f99":"markdown","7cb3e13f":"markdown","814bc96e":"markdown","9c762f32":"markdown","960067e1":"markdown","37c420b5":"markdown","281c99f1":"markdown","879ba590":"markdown","881e69fc":"markdown","8bb54287":"markdown","b6e43feb":"markdown","03bef5c2":"markdown","eba8798a":"markdown","0478d788":"markdown","3adedf5c":"markdown","cd890987":"markdown","6dded8c5":"markdown","2ee10941":"markdown","2d9e78e4":"markdown","1afa7197":"markdown","1a4a87ef":"markdown","b7fdc01d":"markdown","4cfe88f3":"markdown","deed2874":"markdown","eaf9fb32":"markdown","eb349a82":"markdown","a9878526":"markdown","9c32aed0":"markdown","a7fcafd2":"markdown","6ea2319b":"markdown","974d13c7":"markdown","d97f9f04":"markdown","ab27e8f1":"markdown","f92b25bc":"markdown","109c22a5":"markdown","c0e8fbbb":"markdown","504797b7":"markdown","0f8ba8ad":"markdown","59c8ba0c":"markdown","e50958a6":"markdown","9f0f5b4d":"markdown","0385133c":"markdown","45234742":"markdown","c19cc5ab":"markdown","bea8e24c":"markdown","6b0e46ad":"markdown","0a6da3b5":"markdown","98d14a51":"markdown","311cf2b9":"markdown","0a2ca46a":"markdown","fe98ffa8":"markdown","5c4ea567":"markdown","4bd4592d":"markdown","48a6cf72":"markdown"},"source":{"9a4d8607":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os","5f0f92a6":"import matplotlib.pyplot as plt\nimport seaborn as sns","715fb962":"! ls ..\/input\/optiver-realized-volatility-prediction\n\nprint('***')\nprint('book_test.parquet')\n! ls ..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\n\nprint('***')\nprint('book_train.parquet')\n! ls ..\/input\/optiver-realized-volatility-prediction\/book_train.parquet","8bfa8962":"book_testparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/stock_id=0\")\nbook_testparquet","e7df8951":"book_trainparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0\")\nbook_trainparquet","b908bbb8":"plt.plot( np.array( book_trainparquet['time_id'][:1000] ) )\nplt.show()\nplt.plot( np.array( book_trainparquet['seconds_in_bucket'][:1000] ) )\nplt.show()","0f42bf72":"print( book_trainparquet['time_id'].value_counts() )\nprint()\nprint( book_trainparquet['time_id'].value_counts().describe() )\n\nsns.countplot( book_trainparquet['time_id'] )\nax = plt.gca()\nax.axes.xaxis.set_ticks([])\nplt.show()","dcb9f06f":"book_trainparquet[ book_trainparquet['time_id']==5 ]","4e49d42e":"book_data = book_trainparquet[ book_trainparquet['time_id']==5 ]\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['bid_price1','ask_price1','bid_price2', 'ask_price2', ]):\n    plt.plot(book_data[\"seconds_in_bucket\"],book_data[col],'x-',label=col)\n\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['bid_size1','ask_size1','bid_size2', 'ask_size2', ]):\n    plt.plot(book_data[\"seconds_in_bucket\"],book_data[col],label=col)\n\nplt.legend()\nplt.show()","2a7d5cbb":"trade_testparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_test.parquet\/stock_id=0\")\ntrade_testparquet","b194f580":"trade_trainparquet = pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0\")\ntrade_trainparquet","fb72eb15":"plt.plot( np.array( trade_trainparquet['time_id'][:1000] ) )\nplt.show()\nplt.plot( np.array( trade_trainparquet['seconds_in_bucket'][:1000] ) )\nplt.show()","9f87cc9d":"print( trade_trainparquet['time_id'].value_counts() )\nprint()\nprint( trade_trainparquet['time_id'].value_counts().describe() )\n\nsns.countplot( trade_trainparquet['time_id'] )\nax = plt.gca()\nax.axes.xaxis.set_ticks([])\nplt.show()","e6f9032b":"trade_trainparquet[ trade_trainparquet['time_id']==5 ]","3ba81ce2":"trade_data = trade_trainparquet[ trade_trainparquet['time_id']==5 ]\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['price',]):\n    plt.plot(trade_data[\"seconds_in_bucket\"],trade_data[col],'x-',label=col)\n\nplt.legend()\nplt.show()\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['size','order_count',]):\n    plt.plot(trade_data[\"seconds_in_bucket\"],trade_data[col],label=col)\n\nplt.legend()\nplt.show()","fe939f6c":"plt.figure(figsize=(20,6))\nfor i, col in enumerate(['bid_price1','ask_price1','bid_price2', 'ask_price2', ]):\n    plt.plot(book_data[\"seconds_in_bucket\"],book_data[col],'x-',label=col)\n\nplt.plot(trade_data[\"seconds_in_bucket\"],trade_data['price'],'o--',lw=3,label=col)\n\nplt.legend()\nplt.show()","8be5aee8":"test = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/test.csv\")\ntest","3102ef2d":"book_testparquet","19f12703":"trade_testparquet","e2c5ec05":"train = pd.read_csv(\"..\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntrain","de48bf38":"print( train['target'].describe() )\n#\nsns.displot(train['target'])\nplt.show()","53c57425":"plt.plot( train[:10000]['stock_id'] )\nplt.show()\n#\nplt.plot( train[:10000]['time_id'] )\nplt.show()\n#\nplt.plot( train[:10000]['target'] )\nplt.show()","7a7e2070":"train[train['stock_id']==1]","ed4898fa":"for tt in ([ train[ train['stock_id']==0 ], \n             train[ train['stock_id']==1 ],\n             train[ train['stock_id']==2 ],]):\n    plt.plot( tt[:100]['time_id'],tt[:100]['target'] )\n    plt.xlabel('time_id')\n    plt.ylabel('target')\nplt.show()","1d4b7df1":"def calc_wap(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1'])\/(df['bid_size1'] + df['ask_size1'])\n    return wap","0bd1020c":"wap = calc_wap(book_data)\n\nplt.figure(figsize=(20,6))\nfor i, col in enumerate(['bid_price1','ask_price1','bid_price2', 'ask_price2', ]):\n    plt.plot(book_data[\"seconds_in_bucket\"],book_data[col],'x-',label=col)\n\nplt.plot(book_data[\"seconds_in_bucket\"],wap,'o--',lw=3,label='WAP')\nplt.legend()\nplt.show()","12844373":"sns.histplot( wap, kde=True, )","c856dd4f":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff()","4f29d606":"plt.figure(figsize=(10,6))\nplt.plot( book_data[\"seconds_in_bucket\"], wap )\nplt.show()\n\nplt.figure(figsize=(10,6))\nplt.plot( book_data[\"seconds_in_bucket\"], np.log(wap) )\nplt.show()\n\nplt.figure(figsize=(10,6))\nplt.plot( book_data[\"seconds_in_bucket\"], wap.diff() )\nplt.plot( book_data[\"seconds_in_bucket\"], log_return(wap), 'x' )","aeb60755":"log_return_wap = log_return(wap)[1:]\n#\nsns.histplot( log_return_wap, kde=True, stat = 'probability' )\nplt.show()\nsns.histplot( log_return_wap, kde=True, stat = 'probability', cumulative = True )\nplt.show()\n# \u7d76\u5bfe\u5024\nsns.histplot( np.abs(log_return_wap), kde=True, stat = 'probability' )","98e69631":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))","49fc303b":"realized_vol = realized_volatility(log_return(wap))\nrealized_vol","ebb1fc30":"train_list = [ 0,\n               31,\n               18, #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5927\u304d\u306a\u9298\u67c4\n               43, #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5c0f\u3055\u306a\u9298\u67c4\n             ]\n\nbook_trainparquet_list  = []\n\nfor i in train_list:\n    book_trainparquet_list.append(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=\"+str(i)))","50255940":"plt.figure(figsize=(10,20))\n\ntid = 5\n\nfor id, book in enumerate(book_trainparquet_list):\n    #\n    book_tid = book[ book['time_id'] == tid ]\n    wap = calc_wap( book_tid ) \n    #\n    plt.subplot(3,1,1)\n    plt.plot( book_tid['seconds_in_bucket'],wap, label='id='+str(train_list[id]) )\n    plt.legend()\n\n    logreturn = log_return(wap)\n    plt.subplot(3,1,2)\n    plt.plot(book_tid['seconds_in_bucket'], logreturn, 'x')\n\n    plt.subplot(3,1,3)\n    #sns.histplot(logreturn, stat = 'probability', kde=True,  )\n    sns.distplot(logreturn, )\n    \n    realized_vol = realized_volatility(logreturn)\n    print('id=', train_list[id])\n    print(realized_vol)\n\nplt.show()","f03ec90c":"wap = calc_wap(book_data)\nlog_return_wap = log_return(wap)[1:]\nlog_return_wap = log_return_wap[ log_return_wap!=0 ]\n\nfor ff in [wap,log_return_wap]:\n    plt.figure(figsize=(4,4))\n    plt.plot(ff[:-1],ff[1:],'o')\n    plt.show()","181be5f0":"from statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\n\n# \u81ea\u5df1\u76f8\u95a2\nfig = plot_acf(wap, lags=50)\nplt.show()\n\n# \u504f\u81ea\u5df1\u76f8\u95a2\nfig = plot_pacf(wap, lags=50)\nplt.show()","8cf73ae5":"import statsmodels.api as sm\nfrom statsmodels.tsa.arima_model import ARMA\n\nimport warnings\nwarnings.filterwarnings(\"ignore\") # warnings \u3092\u8868\u793a\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n\n# \u6b21\u6570\u306e\u63a8\u5b9a\nprint(sm.tsa.arma_order_select_ic(wap, max_ar=5, max_ma=5, ic='aic'))\nprint(sm.tsa.arma_order_select_ic(wap, max_ar=5, max_ma=5, ic='bic'))","85715345":"from statsmodels.tsa.stattools import adfuller\n\ndef analysis_adf(series):\n    results = adfuller(series)\n\n    print(f\"ADF Statistic: {results[0]}\")\n    print(f\"p-value: {results[1]}\")\n    print(\"Critical Values:\")\n    for key, value in results[4].items():\n        print(\"\\t%s: %.3f\" % (key, value))\n\nanalysis_adf(wap)","a8f80ce1":"for id, book in enumerate(book_trainparquet_list):\n    #\n    book_tid = book[ book['time_id'] == tid ]\n    tmp_wap  = calc_wap( book_tid )\n    analysis_adf( tmp_wap )\n    plt.plot(tmp_wap)\n    plt.show()\n    # \u81ea\u5df1\u76f8\u95a2\n    fig = plot_acf(tmp_wap, lags=50)\n    plt.show()\n    # \u504f\u81ea\u5df1\u76f8\u95a2\n    fig = plot_pacf(tmp_wap, lags=50)\n    plt.show()","d9537bd0":"from pandas.plotting import autocorrelation_plot\nautocorrelation_plot(wap)","d2dd9853":"for id, book in enumerate(book_trainparquet_list):\n    #\n    book_tid = book[ book['time_id'] == tid ]\n    wap = calc_wap( book_tid )\n    autocorrelation_plot(wap)","901bc06d":"from sklearn.preprocessing import PowerTransformer\n\nfor id in [1,2,10,30,100]:\n    #\n    xx = np.array(train[train['stock_id']==id]['target'])\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,4))\n    plt.xlim([0,0.04])\n    sns.distplot( xx,ax=ax1 )\n    #\n    plt.xlim([-3,3])\n    scaler = PowerTransformer()\n    sns.distplot( scaler.fit_transform(xx.reshape(-1,1)), ax=ax2)\n    #\n    plt.show()","571cbe64":"stock = train.groupby(\"stock_id\")[\"target\"].agg([\"mean\",\"median\",\"std\",\"count\",\"sum\"]).reset_index()\nstock","4a260eb1":"stock.describe()","007cd5d5":"for i in ['mean','median','std']:\n    sns.displot(stock[i])\n    plt.show()","37b298d5":"train_info = train.copy()\ntrain_info['mean']    = train['stock_id'].map(dict(zip(stock['stock_id'], stock['mean'])))\ntrain_info['median']  = train['stock_id'].map(dict(zip(stock['stock_id'], stock['median'])))\ntrain_info['std']     = train['stock_id'].map(dict(zip(stock['stock_id'], stock['std'])))\ntrain_info","9ffd557e":"from sklearn.metrics import r2_score\n#\nfor col in ['mean','median','std']:\n    #\n    xx = train_info[col]\n    yy = train_info['target']\n    #\n    print(col)\n    print('r2 score:',r2_score(xx,yy))\n    #\n    plt.plot(xx,yy,'x')\n    #\n    coef = np.polyfit(xx,yy,1)\n    y_pred = coef[0]*xx+ coef[1]\n    print('fit 1d:',coef[0],'x+',coef[1])\n    #\n    plt.plot(y_pred,xx,'k-')\n    #\n    plt.show()","c6bfd49d":"stock","be977a46":"plt.plot( np.sort( np.array( stock['mean'] ) ),'x' )\nplt.show()\nplt.plot( np.sort( np.array( stock['median'] ) ),'x' )\nplt.show()\nplt.plot( np.sort( np.array( stock['std'] ) ),'x' )\nplt.show()","2409661e":"plt.figure(figsize=(5,5))\nplt.plot(stock['mean'],stock['median'],'o')\nplt.show()\n\nplt.figure(figsize=(5,5))\nplt.plot(stock['mean'],stock['std'],'o')\nplt.show()\n\nplt.figure(figsize=(5,5))\nplt.plot(stock['median'],stock['std'],'o')\nplt.show()","03211686":"trade_trainparquet","5a7db795":"import glob\n\nld = glob.glob('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')\n\nlist_price        = []\nlist_size         = []\nlist_order_count  = []\n\nfor i in stock['stock_id']:\n    list_price.append( np.mean( pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i))['price'] ))\n    list_size.append( np.mean( pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i))['size'] ))\n    list_order_count.append( np.mean( pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i))['order_count'] ))","5133fb34":"#\nlabels=[ 'price', 'size', 'order_count']\nfor i, l in enumerate( [list_price, list_size, list_order_count] ):\n    #\n    plt.figure(figsize=(5,5))\n    plt.plot(stock['mean'],l,'o')\n    plt.ylabel(labels[i])\n    plt.xlabel('mean volatility')\n    plt.show()","1259ed10":"pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i))","6c0b04d5":"from sklearn.cluster import KMeans\n\nnc = 5\n\ncust_array = stock.iloc[:,1:4]\nlabels = KMeans(n_clusters=nc).fit_predict(cust_array)\n\nplt.figure(figsize=(5,5))\nfor i in range(nc):\n    xx = stock['mean'][labels==i]\n    yy = stock['std'][labels==i]\n    plt.plot(xx,yy,'o')\nplt.show()","7d3e8df5":"xcol = 'median'\ny = np.array( train_info['target'] )\nX = np.array( train_info[xcol] ).reshape(-1,1)","7fc7d611":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import r2_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\n\nscaler = StandardScaler()\n#scaler = PowerTransformer()\nscaler.fit(X)\n\nclf = LinearRegression()\n#clf = Lasso()\n#clf = SVR()\n\nclf.fit(scaler.transform(X),y)\n\ny_pred = clf.predict(scaler.transform(X))\n\nplt.figure(figsize=(4,4))\n\nplt.plot(y,y_pred,'x')\n\nmin = np.min( np.array( np.min(y), np.min(y_pred) ) )\nmax = np.max( np.array( np.max(y), np.max(y_pred) ) )\n#\nplt.plot( [0.9*min,1.1*max],[0.9*min,1.1*max], 'k-' )\n\nplt.xlabel('Actual')\nplt.ylabel('Estimated')\n\nprint(r2_score(y,y_pred))\n\nplt.show()","246f30b9":"test","12eb90be":"X_test = np.array( test['stock_id'].map(dict(zip(stock['stock_id'], stock[xcol]))) ).reshape(-1,1)\nX_test","85a56afb":"#y_pred = X_test\ny_pred = clf.predict(scaler.transform(X_test))\ny_pred","5e9e9168":"sub = test.copy()\nsub['target'] = y_pred\nsub = sub.drop(\"stock_id\",axis=1)\nsub = sub.drop(\"time_id\",axis=1)\nsub","9b4a5425":"sub.to_csv(\"submission.csv\", index=False)","f564cb0b":"#\ndef rmspe(y_true, y_pred):\n    #\n    yt = np.array(y_true)\n    yp = np.array(y_pred)\n    \n    res = np.square((yt-yp)\/yt)\n    res = np.mean(res)\n    res = np.sqrt(res)\n    \n    return res\n    \n    #return (np.sqrt(np.mean(np.square((y_true-y_pred)\/y_true))))\n#\n#print(rmspe(y,y_pred))","ff6b03d5":"train['time_id'].describe()","c9901e60":"fig, ax = plt.subplots(1,5,figsize=(20,4))\n\nfor i, id in enumerate([5,11,16,31,62]):\n    #\n    #plt.xlim([0,0.05])\n    sns.distplot( train[train['time_id']==id]['target'],ax=ax[i] )\n\nplt.show()","84c15f88":"time = train.groupby(\"time_id\")[\"target\"].agg([\"mean\",\"median\",\"std\",\"count\",\"sum\"]).reset_index()\ntime","632a424e":"time.describe()","17bb4c51":"for i in ['mean','median','std']:\n    sns.displot(time[i])\n    plt.show()","d2d4d78d":"train_info = train.copy()\ntrain_info['mean']    = train['time_id'].map(dict(zip(time['time_id'], time['mean'])))\ntrain_info['median']  = train['time_id'].map(dict(zip(time['time_id'], time['median'])))\ntrain_info['std']     = train['time_id'].map(dict(zip(time['time_id'], time['std'])))\ntrain_info","580afb1e":"from sklearn.metrics import r2_score\n#\nfor col in ['mean','median','std']:\n    #\n    xx = train_info[col]\n    yy = train_info['target']\n    #\n    print(col)\n    print('r2 score:',r2_score(xx,yy))\n    #\n    plt.plot(xx,yy,'x')\n    #\n    coef = np.polyfit(xx,yy,1)\n    y_pred = coef[0]*xx+ coef[1]\n    print('fit 1d:',coef[0],'x+',coef[1])\n    #\n    plt.plot(y_pred,xx,'k-')\n    #\n    plt.show()","9ae006c9":"train_list = [ 0,\n               31,\n               stock['stock_id'][stock['mean'].idxmax()], #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5927\u304d\u306a\u9298\u67c4\n               stock['stock_id'][stock['mean'].idxmin()], #\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5c0f\u3055\u306a\u9298\u67c4\n             ]\n\nbook_trainparquet_list  = []\ntrade_trainparquet_list = []\n\nfor i in train_list:\n    book_trainparquet_list.append(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=\"+str(i)))\n    trade_trainparquet_list.append(pd.read_parquet(\"..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=\"+str(i)))\n\ntrain_list","e9526bf5":"for t, tt in enumerate( [ 5, time['time_id'][time['mean'].idxmin()], time['time_id'][time['mean'].idxmax()] ] ):\n    #\n    plt.figure(figsize=(20,5))\n    #\n    print('time_id == ', tt )\n    #\n    for i, trade_t in enumerate(trade_trainparquet_list):\n        #\n        trade_data = trade_t[ trade_t['time_id']==tt ]\n        plt.plot(trade_data[\"seconds_in_bucket\"],trade_data['price'],'o--',label='stock_id='+str(train_list[i]))\n\n    plt.legend()\n    plt.show()","0d8dd41e":"from sklearn.preprocessing import StandardScaler\n\ni = 3\ntrade_data = trade_trainparquet_list[i][ trade_trainparquet_list[i]['time_id']==5 ]\nscaler = StandardScaler()\n\nscaler.fit( trade_data.iloc[:,2:] )","b05d4bec":"for i, trade_t in enumerate(trade_trainparquet_list):\n    #\n    print('stock_id='+str(train_list[i]))\n          \n    trade_data = trade_t[ trade_t['time_id']==5 ]\n    #\n    td = scaler.transform( trade_data.iloc[:,2:] )\n    #\n    heat = np.zeros([3,600])\n    heat[:,:] = np.nan\n    #\n    for i, sec in enumerate(trade_data['seconds_in_bucket']):\n        heat[0,sec] = td[i,0]\n        heat[1,sec] = td[i,1]\n        heat[2,sec] = td[i,2]\n    #\n    heat = pd.DataFrame(heat.T)\n    heat = heat.interpolate()\n    #\n    plt.figure(figsize=(20,3))\n    sns.heatmap(heat.T)\n    plt.show()","15caa382":"train_info = train.copy()\ntrain_info['stock_id_mean']     = train['stock_id'].map(dict(zip(stock['stock_id'], stock['mean'])))\ntrain_info['stock_id_median']   = train['stock_id'].map(dict(zip(stock['stock_id'], stock['median'])))\ntrain_info['stock_id_std']      = train['stock_id'].map(dict(zip(stock['stock_id'], stock['std'])))\ntrain_info['time_id_mean']      = train['time_id'].map(dict(zip(time['time_id'], time['mean'])))\ntrain_info['time_id_median']    = train['time_id'].map(dict(zip(time['time_id'], time['median'])))\ntrain_info['time_id_std']        = train['time_id'].map(dict(zip(time['time_id'], time['std'])))\ntrain_info","a2036906":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5, random_state=12345678, shuffle=True)","d097c611":"y = np.array( train['target'] )\nX = np.array( train_info.iloc[:,3:] )","0001694e":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.svm import SVR\nimport xgboost as xgb\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\n\nscaler = StandardScaler()\n#scaler = PowerTransformer()\nscaler.fit(X)\n\nmodels = [LinearRegression(),Lasso(),Ridge(),SVR(),xgb.XGBRegressor()]\nscores = []\n\nfor clf in models:\n\n    scores = []\n    \n    print(clf)\n\n    plt.figure(figsize=(4,4))    \n    \n    for train_index, test_index in kf.split(X, y):\n        #\n        X_train = scaler.transform( X[train_index] )\n        y_train = y[train_index]\n        #\n        X_test  = scaler.transform( X[test_index] )\n        y_test  = y[test_index]\n        #\n        clf.fit(X_train,y_train)\n        y_pred = clf.predict(X_test)\n        #\n        plt.plot(y_pred,y_test,'x')\n        #\n        scores.append((rmspe(y_test,y_pred)))\n    #\n    print(np.mean(np.array(scores)))\n    #\n    min = np.min( np.array( np.min(y_test), np.min(y_pred) ) )\n    max = np.max( np.array( np.max(y_test), np.max(y_pred) ) )\n    #\n    plt.plot( [0.9*min,1.1*max],[0.9*min,1.1*max], 'k-' )    \n    #\n    plt.show()","80b63dfd":"test_info = test.copy()\ntest_info['stock_id_mean']     = test['stock_id'].map(dict(zip(stock['stock_id'], stock['mean'])))\ntest_info['stock_id_median']   = test['stock_id'].map(dict(zip(stock['stock_id'], stock['median'])))\ntest_info['stock_id_std']      = test['stock_id'].map(dict(zip(stock['stock_id'], stock['std'])))\ntest_info['time_id_mean']      = test['time_id'].map(dict(zip(time['time_id'], time['mean'])))\ntest_info['time_id_median']    = test['time_id'].map(dict(zip(time['time_id'], time['median'])))\ntest_info['time_id_std']       = test['time_id'].map(dict(zip(time['time_id'], time['std'])))\ntest_info","bd2692ca":"clf  = models[4]\nprint(clf)","a598be5c":"X_test = np.array( test_info.iloc[:,3:] )\n\nclf.fit(scaler.transform(X),y)\n\ny_pred =clf.predict(scaler.transform(X_test))\ny_pred\n\nsub = test.copy()\nsub['target'] = y_pred\nsub = sub.drop(\"stock_id\",axis=1)\nsub = sub.drop(\"time_id\",axis=1)\nsub","ca0c677b":"sub.to_csv(\"submission.csv\", index=False)","f6239021":"import tensorflow as tf\nimport tensorflow.keras.layers as L\nimport tensorflow.keras.models as M\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping\n\nimport gc","ce1e39e0":"def make_model(n_in):\n    inp = L.Input(name=\"inputs\", shape=(n_in,))\n    nh = 50\n    x = L.Dense(nh, activation=\"relu\", name=\"d1\")(inp)\n    x = L.Dense(nh, activation=\"relu\", name=\"d2\")(x)\n    #x = L.Dense(nh, activation=\"relu\", name=\"d3\")(x)\n    #preds = L.Dense(4, activation=\"linear\", name=\"preds\")(x)\n    preds = L.Dense(1, activation=\"linear\", name=\"preds\")(x)\n    \n    model = M.Model(inp, preds, name=\"ANN\")\n    model.compile(loss=\"mean_absolute_error\", optimizer=\"adam\")\n    return model","ab2ec5c5":"net = make_model(X.shape[1])\nprint(net.summary())","cea9e266":"nets = []\nEPOCHS  = 10\n\ny_tests = []\ny_preds = []\n\nidx = 0\nfor tr_idx, val_idx in kf.split(X, y):\n    #\n    idx + 1\n    print(\"FOLD:\", idx)\n    #tr_idx, val_idx = folds[idx]\n    ckpt = ModelCheckpoint(f\"w{idx}.h5\", monitor='val_loss', verbose=1, save_best_only=True,mode='min')\n    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,patience=3, min_lr=0.0005)\n    es = EarlyStopping(monitor='val_loss', patience=6)\n    reg = make_model(X.shape[1])\n    reg.fit(X[tr_idx], y[tr_idx], epochs=EPOCHS, batch_size=30_000, \n            validation_data=(X[val_idx], y[val_idx]),\n            verbose=1, callbacks=[ckpt, reduce_lr, es])\n    reg.load_weights(f\"w{idx}.h5\")\n    \n    y_preds.append(reg.predict(X[val_idx]))\n    y_tests.append(y[val_idx]) \n    \n    nets.append(reg)\n    gc.collect()","b84e36bb":"plt.figure(figsize=(4,4)) \nfor y_test, y_pred in zip( y_tests, y_preds ):\n    plt.plot(y_test,y_pred,'x')\n\nmin = np.min( np.array( np.min(y_test), np.min(y_pred) ) )\nmax = np.max( np.array( np.max(y_test), np.max(y_pred) ) )\n#\nplt.plot( [0.9*min,1.1*max],[0.9*min,1.1*max], 'k-' )   \nplt.show()","0f631ad0":"import optuna","d21d0fd4":"y = np.array( train['target'] )\nX = np.array( train_info.iloc[:,3:] )","ec844695":"train_info","cb520f3e":"test_info","447295dc":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PowerTransformer\n\nscaler = StandardScaler()\n#scaler = PowerTransformer()\nscaler.fit(X)","ccf377fd":"import xgboost as xgb\n\ndef objective_xgb(trial):\n    #\n    if trial.number == 0 :\n        learning_rate = trial.suggest_loguniform('learning_rate', 0.3, 0.3)\n        gamma         = trial.suggest_loguniform('gamma', 1e-8, 1e-8)\n        max_depth     = trial.suggest_int('max_depth', 6, 6)\n        min_child_weight = trial.suggest_loguniform('min_child_weight', 1.0, 1.0)\n        #max_delta_step   = trial.suggest_uniform('max_delta_step', 1e-10, 1e-10)\n        subsample  = trial.suggest_uniform('subsample', 1.0, 1.0)\n        reg_lambda = trial.suggest_uniform('reg_lambda', 1.0, 1.0)\n        reg_alpha  = trial.suggest_uniform('reg_alpha', 0.0, 0.0)\n    else:\n        learning_rate = trial.suggest_loguniform('learning_rate', 1e-8, 1.0)\n        gamma         = trial.suggest_loguniform('gamma', 1e-15, 1e-5)\n        max_depth     = trial.suggest_int('max_depth', 1, 20)\n        min_child_weight = trial.suggest_loguniform('min_child_weight', 1e-8, 1e3)\n        #max_delta_step   = trial.suggest_uniform('max_delta_step', 0, 1.0)\n        subsample  = trial.suggest_uniform('subsample', 0.0, 1.0)\n        reg_lambda = trial.suggest_uniform('reg_lambda', 0.0, 1000.0)\n        reg_alpha  = trial.suggest_uniform('reg_alpha', 0.0, 1000.0)\n        #reg_alpha  = trial.suggest_loguniform('reg_alpha', 1e-15, 1e4)\n    #\n    \n    clf = xgb.XGBRegressor(\n                            learning_rate = learning_rate, \n                            subsample = subsample,\n                            max_depth = max_depth,\n                            min_child_weight = min_child_weight, \n                            max_delta_step = 0,  # 1e-10\u3067\u767a\u6563\u3057\u305f\u305f\u3081\u30010\u3067\u56fa\u5b9a\n                            reg_lambda = reg_lambda,\n                            gamma = gamma,                            \n                            reg_alpha = reg_alpha,\n                            #objective='reg:squarederror'\n                          )\n    \n    scores = []\n        \n    for train_index, test_index in kf.split(X, y):\n        #\n        X_train = scaler.transform( X[train_index] )\n        y_train = y[train_index]\n        #\n        X_test  = scaler.transform( X[test_index] )\n        y_test  = y[test_index]\n        #\n        clf.fit(X_train,y_train)\n        #\n        y_pred = clf.predict(X_test)\n        #\n        scores.append((rmspe(y_test,y_pred)))\n                \n    #\n    return np.mean(np.array(scores))","c4947462":"optuna.logging.disable_default_handler() # Optuna\u306e\u51fa\u529b\u3092\u6291\u5236\u3059\u308b\n#optuna.logging.enable_default_handler() # Optuna\u3067\u51fa\u529b\u3059\u308b\n#\nn_trials = 5\n#\n# optuna\nstudy = optuna.create_study()\n#\nstudy.optimize(objective_xgb, n_trials=n_trials)\n#study.optimize(objective_xgb, timeout=60*2)\n#study.optimize(objective_xgb, timeout=3600*5)","e39d27fc":"print('best_params')\nprint(study.best_params)\nprint('best_value')\nprint(study.best_value)\nprint('best_trial')\nprint(study.best_trial)","0dc30576":"study_score = np.array( [ x.value for x in study.trials[:] ] )\n\nplt.figure(figsize=(30,6))\nplt.plot( study_score, 'o' )\nplt.yscale('log')\nplt.plot([0,len(study_score)],[study_score[0],study_score[0]],'k-')\nplt.show()\n\nplt.figure(figsize=(30,6))\nplt.plot( np.sort(study_score), 'x-' )\nplt.yscale('log')\nplt.plot([0,len(study_score)],[study_score[0],study_score[0]],'k-')\nplt.show()","db602d21":"df_study = study.trials_dataframe()\ndf_study.to_csv(\"optuna.csv\")\ndf_study","659b9cf3":"sort = np.argsort( np.array( df_study['value'] ) )\ndf_study.sort_values('value')","042b5b7f":"for col in df_study.columns[5:-1]:\n    print(col)\n    plt.figure(figsize=(30,6))\n    plt.plot(df_study[col],'o')\n    plt.show()\n    plt.figure(figsize=(30,6))\n    plt.plot(np.array(df_study.sort_values('value')[col]),'o')\n    plt.show()","3ecc54ea":"import pickle\n\nclf = xgb.XGBRegressor(**study.best_params, \n                       #objective='reg:squarederror'\n                      )\n\nwith open('model.pickle', mode='wb') as fp:\n    pickle.dump(clf, fp)\nprint(clf)","ff844232":"clf.fit(scaler.transform(X),y)\ny_pred = clf.predict(scaler.transform(X))\n\nplt.figure(figsize=(4,4))    \nplt.plot(y_pred,y,'x')\n#\nprint(np.mean(np.array((rmspe(y,y_pred)))))\n#\nmin = np.min( np.array( np.min(y_test), np.min(y_pred) ) )\nmax = np.max( np.array( np.max(y_test), np.max(y_pred) ) )\n#\nplt.plot( [0.9*min,1.1*max],[0.9*min,1.1*max], 'k-' )    \n#\nplt.show()","d1783e9a":"plt.barh(train_info.columns[3:][::-1], clf.feature_importances_[::-1])","53c67013":"X_test = np.array( test_info.iloc[:,3:] )\n\ny_pred = clf.predict(scaler.transform(X_test))\ny_pred\n\nsub = test.copy()\nsub['target'] = y_pred\nsub = sub.drop(\"stock_id\",axis=1)\nsub = sub.drop(\"time_id\",axis=1)\nsub","c7772d05":"sub.to_csv(\"submission.csv\", index=False)","121eb737":"## \u30b9\u30b3\u30a2\n\n\u4eca\u56de\u306e\u30b9\u30b3\u30a2\u306frmspe\u3067\u3059\u3002\u306e\u3067\u3001\u6e96\u5099\u3002","dfdf2db9":"book\u306b\u7d9a\u3044\u3066trade\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3082\u78ba\u8a8d\u3057\u307e\u3059\u3002","f90d5889":"stock_id\u3054\u3068\u306btarget\u306e\u5206\u5e03\u306b\u5dee\u7570\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002 \u898f\u683c\u5316\u3059\u308c\u3070\u304a\u3088\u305d\u540c\u3058\u306b\u306f\u898b\u3048\u308b\u3001\u3001\u3001\uff1f\n","2e5a36b3":"## \u91d1\u878d\u306e\u57fa\u790e\u77e5\u8b58\uff1b\u30ad\u30fc\u30ef\u30fc\u30c9\u306a\u3069\n\nhttps:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data\n\n\u306a\u3069\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u3066\u3044\u307e\u3059","c6649929":"\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u3001Optiver Realized Volatility Prediction\u306b\u3064\u3044\u3066\u306eEDA\u30fb\u65e5\u672c\u8a9e\u3067\u306e\u5185\u5bb9\u7406\u89e3\u3092\u8a66\u307f\u307e\u3059\u3002\n\n\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff09\nhttps:\/\/www.kaggle.com\/chumajin\/optiver-realized-eda-for-starter-version\n\n\u57fa\u672c\u7684\u306b\u306f\u81ea\u5206\u306e\u30e1\u30e2\u3067\u3059\u304c\u3001\u30b3\u30e1\u30f3\u30c8\u30fb\u3054\u6307\u6458\u306a\u3069\u5927\u6b53\u8fce\u3067\u3059\uff01\n\nup vote\u304f\u3060\u3055\u3063\u305f\u65b9\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\n\u2192\u3000\u5185\u5bb9\u306f\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002","c08aa233":"\u59cb\u3081\u306e10000\u884c\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u3057\u305f\u3002train\u306e\u30c7\u30fc\u30bf\u306f\u304b\u306a\u308a\u5bc6\u306b\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","96651f99":"\u5404\u9298\u67c4\uff08stock_id\u306e\u63a8\u79fb\u3092\u6bd4\u8f03\u3057\u307e\u3059\uff09","7cb3e13f":"optuna\u306e\u8a66\u884c\u6570\u306ftimeout\u3067\u6642\u9593\u3067\u8a2d\u5b9a","814bc96e":"1000\u884c\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u3001\u305d\u308c\u305e\u308c\u306etime_id\uff08\u9298\u67c4\uff09\u3067seconds_in_bucket\uff08\u6642\u523b\uff09\u304c\u7d14\u5897\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u898b\u308c\u307e\u3059\u3002\n\ntime_id\u3054\u3068\u306b\u30c7\u30fc\u30bf\u6570\uff08\u884c\u6570\uff09\u306f\u9055\u3046\u3088\u3046\u3067\u3059\uff08min73-max549\uff09\u304c\u3001seconds_in_bucket\u306f0\u304b\u3089\u59cb\u307e\u3063\u3066600\u3067\u7d42\u4e86\u3059\u308b\u3088\u3046\u3067\u3059\uff081\u79d2\u30c7\u30fc\u30bf\u304c600\u306710\u5206\u9593\uff09\u3002\n\nbarplot\u3068\u7d71\u8a08\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3068\u3001time_id\u3054\u3068\u306e\u30c7\u30fc\u30bf\u6570\u306f\u5e73\u5747\u3067200\u304f\u3089\u3044\u306e\u3088\u3046\u3067\u3059\u3002","9c762f32":"https:\/\/pythondatascience.plavox.info\/seaborn\/%E6%95%A3%E5%B8%83%E5%9B%B3%E3%83%BB%E5%9B%9E%E5%B8%B0%E3%83%A2%E3%83%87%E3%83%AB","960067e1":"\u6a19\u6e96\u504f\u5dee\u3063\u307d\u3044\u3051\u3069\u3001\u5c11\u3057\u88fe\u304c\u5e83\u3044","37c420b5":"book\u3068\u540c\u3058\u304f1000\u884c\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u3001time_id,seconds_in_bucket\u306e\u63a8\u79fb\u306f\u4f3c\u3066\u306f\u3044\u307e\u3059\u304c\u3001trade\u306e\u30c7\u30fc\u30bf\u306f\u6025\u5cfb\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\ntime_id\u3054\u3068\u306e\u30c7\u30fc\u30bf\u6570\u306f\u5e73\u5747\u306730(min2-max120)\u304f\u3089\u3044\u306e\u3088\u3046\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001trade\u306e\u30c7\u30fc\u30bf\u306f\u975e\u5e38\u306b\u30b9\u30d1\u30fc\u30b9","281c99f1":"statsmodels\u3067\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210","879ba590":"Dickey-Fulluer(ADF)\u691c\u5b9a\u306f\u5b9a\u5e38\u6027\u306e\u691c\u5b9a\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3002\n\n\u5e30\u7121\u4eee\u8aac\u306f\u300c\u30c7\u30fc\u30bf\u7cfb\u5217\u306b\u5358\u4f4d\u6839\u304c\u5b58\u5728\u3059\u308b\u300d\n\np\u5024\u304c\u5927\u304d\u306a\u5834\u5408\u3001\u5358\u4f4d\u6839\u904e\u7a0b\u3067\u3042\u308b\u3068\u3044\u3046\u5e30\u7121\u4eee\u8aac\u3092\u68c4\u5374\u3067\u304d\u306a\u3044\u2192\u5358\u4f4d\u6839\u3092\u6709\u3059\u308b\u3002\n\np\u5024\u304c\u5c0f\u3055\u3044\u5834\u5408\u3001\u5358\u4f4d\u6839\u904e\u7a0b\u3067\u3042\u308b\u3068\u3044\u3046\u5e30\u7121\u4eee\u8aac\u3092\u68c4\u5374\u3067\u304d\u308b\u2192\u5358\u4f4d\u6839\u3092\u6709\u3057\u3066\u3044\u306a\u3044\uff1d\u5b9a\u5e38\u6027\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3002\n\nhttps:\/\/tkstock.site\/2021\/05\/15\/python-%E6%99%82%E7%B3%BB%E5%88%97-%E5%AE%9A%E5%B8%B8%E6%80%A7-%E5%8D%98%E4%BD%8D%E6%A0%B9%E6%A4%9C%E5%AE%9A-adf%E6%A4%9C%E5%AE%9A-%E5%AE%9F%E8%A3%85\/\n\n\n","881e69fc":"\u57fa\u672c\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f","8bb54287":"\u3056\u3063\u304f\u308a\u3068\u3057\u305f\u30b3\u30f3\u30da\u306e\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n* \u5404\u9298\u67c4\uff08stock_id\uff09\u3067\u3001\u7279\u5b9a\u306e\u6642\u9593\u533a\u5207\u308a\uff08time_id\uff09\u306e10\u5206\u9593\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\uff08seconds_in_bucket\uff09\u304c\u3042\u308a\u3001\u305d\u306e\u6642\u9593\u533a\u5207\u308a\u3067\u306e\u4fa1\u683c\u5909\u52d5\u306e\u5927\u5c0f\u306b\u3064\u3044\u3066\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3(\u4eca\u56de\u306etarget)\u3068\u3057\u3066\u8a55\u4fa1\u3057\u3066\u3044\u308b\u3002\n\n* ~~\u3042\u308b\u9298\u67c4\uff08stock_id=0\uff09\u306e\u3001\u3068\u3042\u308b\u6642\u9593\u533a\u5207\u308a\uff08time_id=4, 32, 34\uff09\u306e\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3002\u305f\u3060\u3057\u3001time_id=4\u306f\u521d\u3081\u306e\u5c11\u3057\u3060\u3051\u3057\u304b\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u304c\u306a\u3044\u3057\u3001time_id=32, 34\u306b\u306f\u30c7\u30fc\u30bf\u304c\u306a\u3044\u3088~~\n\n\u2192 \u4e0a\u8a02\u6b63\uff1a\u88cf\u306b\u30c7\u30fc\u30bf\u3092\u96a0\u3057\u3066\u3044\u3066\u3001\u4eca\u56de\u4f5c\u3063\u305f\u30e2\u30c7\u30eb\u3067\u3044\u308d\u3093\u306a\u30c7\u30fc\u30bf\u306e\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u6e2c\u5b9a\u3059\u308b\u3088\uff01","b6e43feb":"stock_id\u3054\u3068\u306bvoalitity\u3068price,size,order_count\u306e\u95a2\u4fc2\u306e\u78ba\u8a8d","03bef5c2":"## \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u5206\u6790\n\nhttps:\/\/www.kaggle.com\/bextuychiev\/how-to-detect-white-noise-and-random-walks-in-ts\n\n\u306b\u8a73\u3057\u304f\u8a18\u8f09\u3042\u308a\u3067\u3059\u3002\n\n\u65e5\u672c\u8a9e\u306f\u3053\u3061\u3089\u3082\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nhttps:\/\/dajiro.com\/entry\/2020\/05\/02\/191334","eba8798a":"\u4eca\u56de\u306e\u76ee\u7684\u5909\u6570\u3068\u306a\u308btarget\uff08\uff1d\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\uff09\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306f\u4fa1\u683c\u5909\u52d5\u306e\u5ea6\u5408\u3044\u306e\u3088\u3046\u3067\u3059\u3002\n\nhttps:\/\/www.smbcnikko.co.jp\/terms\/japan\/ho\/J0280.html","0478d788":"\u30a4\u30f3\u30d7\u30c3\u30c8\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n\/optiver-realized-volatility-prediction\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u8aad\u307f\u8fbc\u3080\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e6\u3064\u3002\n\n* book_test.parquet\n* book_train.parquet\n* trade_test.parquet\n* trade_train.parquet\n* test.csv\n* train.csv\n\ntrain\u3068\u306a\u308bbook_test.parquet(trade_test.paruet)\u306b\u306f'stock_id=0'\u306e\u30c7\u30fc\u30bf\u306e\u307f\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001test\u3068\u306a\u308bbook_train.parquet(trade_train.paruet)\u306b\u306f\u7a2e\u3005\u306estock_id\u306e\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u306a\u304a\u3001stock_id\u306f\u3042\u308b\u7279\u5b9a\u306e\u9298\u67c4\u306e\u3088\u3046\u3067\u3059\u3002","3adedf5c":"## \u91cd\u8981\u306a\u5909\u6570\u306e\u78ba\u8a8d","cd890987":"## \u4e00\u65e6\u3053\u3053\u3067\u63d0\u51fa(Score 0.98)\n\n\u63d0\u51fa\u6761\u4ef6\u306e\u78ba\u8a8d\u306e\u305f\u3081\u3001\u4e0a\u306e\u96d1\u306a\u30e2\u30c7\u30eb\u3067\u4e00\u65e6Submission\u3057\u3066\u307f\u307e\u3059\u3002test\u30c7\u30fc\u30bf\u304b\u3089\u4f5c\u6210\u3057\u307e\u3059\u3002stock_id\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5bfe\u5fdc\u3059\u308bstock_id\u306emean\u3092\u8aad\u307f\u53d6\u308a\u3001\u305d\u3053\u304b\u3089\u56de\u5e30\u5f0f\u3067\u4e88\u6e2c\u5024\u3092\u8fd4\u3059\u7c21\u6613\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u3082\u7121\u4e8b\u3001\u63d0\u51fa\u3055\u308c\u308b\u3088\u3046\u3067\u3059\uff1b\u30b9\u30b3\u30a2\u306f\u3055\u3093\u3056\u3093\uff080.98\uff09\u3067\u3059\u304c\u3001\u3001\u3001\n\n\u306a\u304a\u3001\u4e0b\u624b\u306b\u56de\u5e30\u3059\u308b\u3088\u308a\u3082'median'\u3092\u305d\u306e\u307e\u307e\u5165\u308c\u308b\u65b9\u304c\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u3088\u3046\uff080.68\uff09\u3067\u3059\u3002\u2192target\u3092\u5dee\u5206\u306b\u3057\u305f\u65b9\u304c\u6271\u3044\u3084\u3059\u3044\uff1f\uff1f\n\n\uff01\u6ce8\u610f \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\u306f\u5207\u308b\u3053\u3068","6dded8c5":"## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u78ba\u8a8d","2ee10941":"train\u306b\u95a2\u3057\u3066\u306f\u3001target\u306fstock_id\uff08\u9298\u67c4\uff09\u3054\u3068\u306btime_id, target\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002","2d9e78e4":"LinearRegression,Lasso,Ridge,SVR,XGBRegressor\u3092\u6bd4\u8f03\n\nXGBRegressor\u306e\u6210\u7e3e\u304c\u826f\u3044\uff08\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3057\u3066\u3044\u306a\u3044\uff09\u3002","1afa7197":"## \u30b3\u30f3\u30da\u6982\u8981\uff08Overview\u306e\u7ffb\u8a33\u306a\u3069\uff09\n\nYou will have hundreds of millions of rows of highly granular financial data at your fingertips, with which you'll design your model forecasting volatility over 10-minute periods.\n\n\u2192 \u30d3\u30c3\u30b0\u30c7\u30fc\u30bf\u304b\u308910\u5206\u9593\u306e\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u8a2d\u8a08\u3057\u307e\u3059\u3002\n\nIn this competition, you will be given 10 minutes of book data and we ask you to predict what the volatility will be in the following 10 minutes. Volatility will be measured as follows:\n\n\u2192 \"predict what the volatility will be in the following 10 minutes.\"\u306a\u306e\u3067\u76f4\u524d\uff0810 min\uff09\u306ebook\u306e\u30c7\u30fc\u30bf\u306f\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff08\u81ea\u4fe1\u304c\u306a\u3044\uff09\u3002\n\n\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u3063\u3066\uff1f\n\n\u2192 \u4fa1\u683c\u5909\u52d5\u306e\u3088\u3046\u3067\u3059\u3002\u4e00\u5e74\u9593\u306e\u4fa1\u683c\u306e\u5bfe\u6570\u5024\uff08log returns\uff1b\u5f8c\u8ff0\uff09\u306e\u6a19\u6e96\u504f\u5dee\u3089\u3057\u3044\u3002\u306a\u304a\u3001url\u306f\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u8aac\u660e\u3002\n\nhttps:\/\/www.smbcnikko.co.jp\/terms\/japan\/ho\/J0280.html\n\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u304c\u3042\u308b\u3088\n\n\u2192\u3000\u3053\u3061\u3089\n\nhttps:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data\n\n\u8a55\u4fa1\u65b9\u6cd5\u306f\uff1f\n\n\u2192 RMEPS:\u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u30d1\u30fc\u30bb\u30f3\u30c8\u8aa4\u5dee","1a4a87ef":"stock_id=0\u306b\u3064\u3044\u3066\u3001book\u306etest\u3068train\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n\u57fa\u672c\u7684\u306b\u306f\u540c\u3058\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304a\u308a\u3001\u9055\u3044\u306ftime_id\u306e\u307f\u306e\u3088\u3046\u3067\u3059\u3002\u3042\u3068\u3001test\u30c7\u30fc\u30bf\u306ftime_id=4\u306e\u30c7\u30fc\u30bf\u3067\uff13\u884c\u306eseconds_in_bucket\u306e\u307f\uff08\u88cf\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u96a0\u3055\u308c\u3066\u3044\u308b\uff09\u3002","b7fdc01d":"stock_id\u3054\u3068\u306btarget\u306e\u7d71\u8a08\u91cf\u3092\u7b97\u51fa\u3057\u307e\u3059\u3002","4cfe88f3":"#### Realized volatility\n\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u3001\u76f4\u524d\uff0810 min\uff09\u306ebook\u306e\u30c7\u30fc\u30bf\u306f\u4e0e\u3048\u3089\u308c\u3066\u304a\u308a\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u3044\u308bvolatility\u306b\u5bfe\u3057\u3066\u3001book\u306e\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3055\u308c\u308brealized vovatility\u3092\u91cd\u8981\u306a\u6307\u6a19\u3068\u3057\u3066\u4f7f\u3063\u3066\u304f\u308c\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002wap\u306elog return\u306e\u4e8c\u4e57\u5e73\u5747\u548c\u3092\u3068\u3063\u3066\u8a08\u7b97\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n```\nbook_example.loc[:,'log_return'] = log_return(book_example['wap'])\n\ndef realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\n```","deed2874":"stock\u3054\u3068\u306b\u7d71\u8a08\u91cf\u304c\u3069\u3046\u3044\u3063\u305f\u5f62\u3092\u3057\u3066\u3044\u308b\u304b\u3092\u6539\u3081\u3066\u78ba\u8a8d","eaf9fb32":"## EDA\uff08\u7c21\u6613\uff09; stock_id\u3067\u306e\u5206\u6790","eb349a82":"#### \u30b3\u30f3\u30da\u306e\u30b3\u30fc\u30c9\u8981\u4ef6\n\n* CPU Notebook <= 9 hours run-time\n* GPU Notebook <= 9 hours run-time\n* Internet \u63a5\u7d9a\u306f\u00d7\n* \u5916\u90e8\u30c7\u30fc\u30bf\u306e\u5229\u7528\u53ef\u3002\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3082\u4f7f\u3063\u3066\u3044\u3044\u3088\u3002\n* Submission file \u306f submission.csv\u3000\u306e\u540d\u524d\u3067\u63d0\u51fa","a9878526":"## EDA\uff08\u7c21\u6613\uff09; time_id\u3067\u306e\u5206\u6790\n\ntime_id\u3054\u3068\u306b\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u9055\u3044\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u306d\uff08\u3064\u307e\u308a\u3001\u76f8\u5834\u304c\u5927\u304d\u304f\u5909\u52d5\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u9298\u67c4\u5168\u4f53\u3067\u5909\u52d5\u304c\u5927\u304d\u3044\uff09\n\n\u2192 time_id\uff08\u306e\u7d71\u8a08\u91cf\uff09\u3092\u8aac\u660e\u5909\u6570\u306b\u5165\u308c\u308b\u610f\u5473\u306f\u3042\u308a\u305d\u3046\u3002","9c32aed0":"\u30b9\u30b3\u30a2\u306f\u30e1\u30e2\u30ea\u8db3\u308a\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u4fdd\u7559","a7fcafd2":"### WAP\n\u30d6\u30c3\u30af\u30c7\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\n\nwap\u3082book\u30c7\u30fc\u30bf\u306ebid,ask\u306e\u7bc4\u56f2\u5185\u3067\u5909\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","6ea2319b":"\u4e00\u5fdc\u3001\u9298\u67c4\u3054\u3068\u306b\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5927\u304d\u3055\u306b\u9055\u3044\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u9298\u67c4\u306e\u7d71\u8a08\u91cf\u60c5\u5831\u3060\u3051\u3067\u3082\u5c11\u3057\u3060\u3051\u4e88\u6e2c\u3067\u304d\u305d\u3046\u3002\n\n\u2192 \u9298\u67c4\u306e\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u306e\u5e73\u5747\u5024\uff08'mean'\uff09\u304c\u5927\u304d\u3044\u307b\u3069\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u304c\u5927\u304d\u3044\u50be\u5411\u306b\u3042\u308b\uff08\u307b\u3093\u306e\u5c11\u3057\uff09\u3002","974d13c7":"stock_id, time_id\u306e\u7d71\u8a08\u91cf\u3092\u4f7f\u3063\u3066target\u306e\u56de\u5e30\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001xgboost\u304c\u4e00\u756a\u6210\u7e3e\u304c\u826f\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u3044\u3064\u3067\u63d0\u51fa\u3057\u305f\u3089Public Score\u306f0.52071\u3067\u3057\u305f\u3002","d97f9f04":"https:\/\/qiita.com\/eg_i_eg\/items\/94ea41edc96cbb3dca6a","ab27e8f1":"## \u30e2\u30c7\u30ebANN(WIP)\n\nMLB\u30b3\u30f3\u30da\u3067ANN\u304c\u51fa\u3066\u304d\u3066\u3044\u305f\u306e\u3067\u3001\u52c9\u5f37\u304c\u3066\u3089\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps:\/\/www.kaggle.com\/ulrich07\/mlb-ann-with-lags-tf-keras","f92b25bc":"```\n<bound method XGBModel.get_params of XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.300000012, max_delta_step=0, max_depth=6,\n             min_child_weight=1, missing=nan, monotone_constraints='()',\n             n_estimators=100, n_jobs=4, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)>\n```","109c22a5":"pandas\u3067\u306e\u30b3\u30ec\u30ed\u30b0\u30e9\u30e0\u4f5c\u6210","c0e8fbbb":"train\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u5024\u3092\u5206\u6790\u3057\u307e\u3059\u3002\u7d71\u8a08\u91cf\u3001\u5206\u5e03\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3002","504797b7":"~~test\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\u3053\u3053\u306e\u5404\u884c\u306b\u3064\u3044\u3066target\u3092\u8a08\u7b97\u305b\u3088\u3068\u306e\u3053\u3068\uff08\u3064\u307e\u308a\u3001submission\u306e\u30c7\u30fc\u30bf\u306f\u4e09\u884c\uff09~~\n\n~~\u3053\u3053\u3067\u632f\u308a\u8fd4\u308b\u3068\u3001stock_id=0\u306b\u95a2\u3057\u3066\u306f\u3001time_id=4\u306e\u30c7\u30fc\u30bf\uff08book\u3082trade\u3082\uff09\u3057\u304b\u306a\u3044\u306e\u3067\u3001time_id=32, 34\u306e\u4e88\u6e2c\u306b\u306f\u5de5\u592b\u304c\u5fc5\u8981\u306a\u3088\u3046\u3067\u3059\u3002~~","0f8ba8ad":"time_id\u304c5\u306e\u30c7\u30fc\u30bf\uff08\u9298\u67c4\uff09\u306b\u3064\u3044\u3066\u3001\u63a8\u79fb\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002seconds_in_bucket\u3092\u6642\u523b\u3068\u3057\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002","59c8ba0c":"## \u30e2\u30c7\u30eb(\u7c21\u6613\uff1bXGBoost)\u306e\u69cb\u7bc9\u3068\u63d0\u51fa(Score 0.52)","e50958a6":"XGBRegressor\u3067Submission\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","9f0f5b4d":"## \u30b3\u30f3\u30c6\u30b9\u30c8 Q&A (\u629c\u7c8b)\n\nhttps:\/\/www.kaggle.com\/c\/optiver-realized-volatility-prediction\/discussion\/249752\n\n\u540c\u3058stock_id\u306f\u3001\u3059\u3079\u3066\u306e\u7af6\u5408\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u540c\u3058\u682a\u5f0f\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u304b\uff1f\n\n\u2192\u3000Yes\n\ntime_id\u306b\u3064\u3044\u3066\n\n\u2192\u3000time_id\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3055\u308c\u308b\u305f\u3081\u3001\u7570\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u9593\u306e\u30d6\u30ea\u30c3\u30b8\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308b\u4ee5\u5916\u306e\u60c5\u5831\u306f\u542b\u307e\u308c\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff1b\u3064\u307e\u308a\u3001time_id\u306f\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3068\u306f\u306a\u3089\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n3\u884c\u3057\u304b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\u306a\u3044\u3088\n\n\u2192\u3000\u30b3\u30fc\u30c9\u3092\u30b3\u30df\u30c3\u30c8\u3059\u308b\u3068\u3001\u30b3\u30fc\u30c9\u306f\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u8a2d\u5b9a\u3055\u308c\u305f\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3055\u308c\u3001\u30ea\u30fc\u30c0\u30fc\u30dc\u30fc\u30c9\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002\uff08\u88cf\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\uff09","0385133c":"## EDA; book\/trade\u30c7\u30fc\u30bf","45234742":"#### log_return\u306e\u5206\u6790","c19cc5ab":"## \u7c21\u6613\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\uff08\u7dda\u5f62\u56de\u5e30\uff09\n\n\n\u304a\u305f\u3081\u3057\u3067\u3001\u7d71\u8a08\u91cf\uff08median\uff09\u304b\u3089\u56de\u5e30\n\n\u2192\u306a\u304a\u3001\u30b9\u30b3\u30a2\u306f\u5168\u7136\u30c0\u30e1\u30c0\u30e1\u3067\u3059\u3002","bea8e24c":"## \u30e2\u30c7\u30eb\uff08\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\uff09\u306e\u69cb\u7bc9\u3068\u63d0\u51fa\n\noptuna\u3092\u4f7f\u3063\u3066\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002\u4e0b\u6577\u304d\u306f\u3053\u3061\u3089\n\nhttps:\/\/www.kaggle.com\/matsuosan\/japanese-xgb-lgbm-voting-optuna-boston\n\n\u3042\u3093\u307e\u308a\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u53c2\u8003\u306b\u306a\u3089\u306a\u3044\u3067\u3059\u3002","6b0e46ad":"#### realized_volatility","0a6da3b5":"## \u30c7\u30fc\u30bf\n\n**\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u6700\u521d\u306e\u6570\u884c\u306e\u307f\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u308b\u30b3\u30fc\u30c9\u7af6\u4e89\u3067\u3059\u3002**\n\n\u2192\u3000\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306f\u4e09\u884c\u3060\u3051\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u305f\u304f\u3055\u3093\u30c7\u30fc\u30bf\u304c\u3042\u308b\u3088\u3046\u3067\u3059\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6700\u521d\u306e\u4e09\u884c\u3060\u3051\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u308b\u3002\uff09\n\n\u4ee5\u4e0b\u306fgoogle\u7ffb\u8a33\u3079\u305f\u5f35\u308a\n\n### book_ [train \/ test] .parquet\n\u533a\u5207\u3089\u308c\u305f\u5bc4\u6728\u7d30\u5de5\u306e\u30d5\u30a1\u30a4\u30ebstock_id\u3002\u5e02\u5834\u306b\u6295\u5165\u3055\u308c\u305f\u6700\u3082\u7af6\u4e89\u529b\u306e\u3042\u308b\u58f2\u8cb7\u6ce8\u6587\u306b\u95a2\u3059\u308b\u30aa\u30fc\u30c0\u30fc\u30d6\u30c3\u30af\u30c7\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u672c\u306e\u4e0a\u4f4d2\u3064\u306e\u30ec\u30d9\u30eb\u304c\u5171\u6709\u3055\u308c\u307e\u3059\u3002\u672c\u306e\u7b2c1\u30ec\u30d9\u30eb\u306f\u4fa1\u683c\u9762\u3067\u3088\u308a\u7af6\u4e89\u529b\u304c\u3042\u308a\u3001\u7b2c2\u30ec\u30d9\u30eb\u3088\u308a\u3082\u5b9f\u884c\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n\n* ```stock_id``` -\u682a\u5f0f\u306eID\u30b3\u30fc\u30c9\u3002\u3059\u3079\u3066\u306e\u30b9\u30c8\u30c3\u30afID\u304c\u3059\u3079\u3066\u306e\u30bf\u30a4\u30e0\u30d0\u30b1\u30c3\u30c8\u306b\u5b58\u5728\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Parquet\u306f\u3001\u30ed\u30fc\u30c9\u6642\u306b\u3053\u306e\u5217\u3092\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u578b\u306b\u5f37\u5236\u3057\u307e\u3059\u3002\u3042\u306a\u305f\u306f\u305d\u308c\u3092int8\u306b\u5909\u63db\u3057\u305f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n* ```time_id``` -\u30bf\u30a4\u30e0\u30d0\u30b1\u30c3\u30c8\u306eID\u30b3\u30fc\u30c9\u3002\u6642\u9593ID\u306f\u5fc5\u305a\u3057\u3082\u9023\u7d9a\u3057\u3066\u3044\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3059\u3079\u3066\u306e\u5728\u5eab\u3067\u4e00\u8cab\u3057\u3066\u3044\u307e\u3059\u3002\n* ```seconds_in_bucket``` -\u30d0\u30b1\u30c3\u30c8\u306e\u958b\u59cb\u304b\u3089\u306e\u79d2\u6570\u3002\u5e38\u306b0\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002\n* ```bid_price[1\/2]``` -\u6700\u3082\u7af6\u4e89\u529b\u306e\u3042\u308b\u8cfc\u5165\u30ec\u30d9\u30eb\u306e\u6b63\u898f\u5316\u3055\u308c\u305f\u4fa1\u683c\u3002\n* ```ask_price[1\/2]``` -\u6700\u3082\u7af6\u4e89\u529b\u306e\u3042\u308b\u8ca9\u58f2\u30ec\u30d9\u30eb\u306e\u6b63\u898f\u5316\u3055\u308c\u305f\u4fa1\u683c\u3002\n* ```bid_size[1\/2]``` -\u6700\u3082\u7af6\u4e89\u529b\u306e\u3042\u308b\u8cfc\u5165\u30ec\u30d9\u30eb\u3067\u306e\u682a\u5f0f\u6570\u3002\n* ```ask_size[1\/2]``` -\u6700\u3082\u7af6\u4e89\u529b\u306e\u3042\u308b\/ 2\u756a\u76ee\u306b\u7af6\u4e89\u529b\u306e\u3042\u308b\u8ca9\u58f2\u30ec\u30d9\u30eb\u306e\u682a\u5f0f\u6570\u3002\n\n### trade_[train\/test].parquet\n\u533a\u5207\u3089\u308c\u305f\u5bc4\u6728\u7d30\u5de5\u306e\u30d5\u30a1\u30a4\u30ebstock_id\u3002\u5b9f\u969b\u306b\u5b9f\u884c\u3055\u308c\u305f\u53d6\u5f15\u306b\u95a2\u3059\u308b\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u3001\u5e02\u5834\u3067\u306f\u3001\u5b9f\u969b\u306e\u53d6\u5f15\u3088\u308a\u3082\u53d7\u52d5\u7684\u306a\u58f2\u8cb7\u610f\u56f3\u306e\u66f4\u65b0\uff08\u672c\u306e\u66f4\u65b0\uff09\u304c\u591a\u3044\u305f\u3081\u3001\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u6ce8\u6587\u66f8\u3088\u308a\u3082\u307e\u3070\u3089\u3067\u3042\u308b\u3068\u4e88\u60f3\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n* ```stock_id``` - \u540c\u4e0a\u3002\n* ```time_id``` - \u540c\u4e0a\u3002\n* ```seconds_in_bucket```- \u540c\u4e0a\u3002\u30c8\u30ec\u30fc\u30c9\u30c7\u30fc\u30bf\u3068\u30d6\u30c3\u30af\u30c7\u30fc\u30bf\u306f\u540c\u3058\u6642\u9593\u67a0\u304b\u3089\u53d6\u5f97\u3055\u308c\u3001\u30c8\u30ec\u30fc\u30c9\u30c7\u30fc\u30bf\u306f\u4e00\u822c\u306b\u307e\u3070\u3089\u3067\u3042\u308b\u305f\u3081\u3001\u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5fc5\u305a\u3057\u30820\u304b\u3089\u59cb\u307e\u308b\u3068\u306f\u9650\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n* ```price``` -1\u79d2\u9593\u306b\u767a\u751f\u3059\u308b\u5b9f\u884c\u6e08\u307f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u5e73\u5747\u4fa1\u683c\u3002\u4fa1\u683c\u306f\u6b63\u898f\u5316\u3055\u308c\u3066\u304a\u308a\u3001\u5e73\u5747\u306f\u5404\u53d6\u5f15\u3067\u53d6\u5f15\u3055\u308c\u305f\u682a\u5f0f\u6570\u306b\u3088\u3063\u3066\u52a0\u91cd\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n* ```size``` -\u53d6\u5f15\u3055\u308c\u305f\u682a\u5f0f\u306e\u7dcf\u6570\u3002\n* ```order_count``` -\u767a\u751f\u3057\u3066\u3044\u308b\u56fa\u6709\u306e\u53d6\u5f15\u6ce8\u6587\u306e\u6570\u3002\n\n### train.csv\n\n* ```stock_id``` -\u4e0a\u8a18\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u3053\u308c\u306fcsv\u3067\u3042\u308b\u305f\u3081\u3001\u5217\u306f\u30ab\u30c6\u30b4\u30ea\u3067\u306f\u306a\u304f\u6574\u6570\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\u3002\n* ```time_id``` - \u540c\u4e0a\u3002\n* ```target``` -\u540c\u3058stock \/ time_id\u3067\u306e\u7279\u5fb4\u30c7\u30fc\u30bf\u306b\u7d9a\u3044\u3066\u300110\u5206\u9593\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u8a08\u7b97\u3055\u308c\u305f\u5b9f\u73fe\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\u3002\u30d5\u30a3\u30fc\u30c1\u30e3\u30c7\u30fc\u30bf\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u306e\u9593\u306b\u91cd\u8907\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n### test.csv\n\n\u4ed6\u306e\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3068\u9001\u4fe1\u30d5\u30a1\u30a4\u30eb\u306e\u9593\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u4ed6\u306e\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u69d8\u306b\u3001\u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u306f\u3001\u9001\u4fe1\u6642\u306b\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306e\u307f\u5229\u7528\u53ef\u80fd\u3067\u3042\u308a\u3001\u6700\u521d\u306e\u6570\u884c\u306e\u307f\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u53ef\u80fd\u3067\u3059\u3002\n\n* ```stock_id``` - \u540c\u4e0a\u3002\n* ```time_id``` - \u540c\u4e0a\u3002\n* ```row_id``` -\u9001\u4fe1\u884c\u306e\u4e00\u610f\u306e\u8b58\u5225\u5b50\u3002\u65e2\u5b58\u306e\u6642\u9593ID \/\u5728\u5eabID\u306e\u30da\u30a2\u3054\u3068\u306b1\u3064\u306e\u884c\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u6642\u9593\u67a0\u306b\u306f\u3001\u5fc5\u305a\u3057\u3082\u3059\u3079\u3066\u306e\u500b\u5225\u306e\u682a\u5f0f\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n### sample_submission.csv\n\u6b63\u3057\u3044\u5f62\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u9001\u4fe1\u30d5\u30a1\u30a4\u30eb\u3002\n\n* ```row_id``` -test.csv\u3068\u540c\u3058\u3067\u3059\u3002\n* ```target``` -train.csv\u3068\u540c\u3058\u5b9a\u7fa9\u3002\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306f\u3001train.csv\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u5024\u306e\u4e2d\u592e\u5024\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002","98d14a51":"\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3068\u3057\u3066\u53ef\u8996\u5316\n\n\u66ab\u5b9a\u3067 stock_id=1, time_id=5\u3067\u898f\u683c\u5316","311cf2b9":"#### Log returns\n\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u76ee\u7684\u304c\u5909\u52d5\u306a\u306e\u3067\u6642\u9593\u306b\u3088\u308b\u5dee\u5206\uff08\u2252\u6642\u9593\u5fae\u5206\uff09\u3092\u3068\u308b\u3053\u3068\u304c\u30ea\u30fc\u30ba\u30ca\u30d6\u30eb\u306a\u8003\u3048\u65b9\u3067\u3059\u304c\u3001\u30d5\u30a1\u30a4\u30ca\u30f3\u30b7\u30e3\u30eb\u3067\u306f\u682a\u5f0f\u4fa1\u683c\u306e\u5dee\u3088\u308a\u3082\u6bd4\u7387\u304c\u91cd\u8981\u3068\u306a\u308b\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001**\u5dee\u5206**\u306e\u5bfe\u6570\u3092\u3068\u3063\u3066\u30ed\u30b0\u3067\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\u3092Log returns\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u2192 100\u30c9\u30eb\u3068102\u30c9\u30eb\u3068\u306e\u5dee\u304c2\u30c9\u30eb\u306810\u30c9\u30eb\u306812\u30c9\u30eb\u3068\u306e\u5dee2\u30c9\u30eb\u304c\u540c\u3058\u308f\u3051\u306a\u3044\u306e\u3067\u3001\u305d\u308c\u305e\u308c2%\u306820%\u3068\u306e\u5dee\u3060\u3063\u3066\u8868\u73fe\u3057\u305f\u3044\u3002log10\u3092\u3068\u308b\u3068log(100)=2\u3001log(102)=2.008\u3002log(10)=1\u3001log(12)=1.08\u306a\u306e\u3067\u3001\u5f8c\u8005\u306e\u65b9\u304c\u5dee\u304c\u5927\u304d\u304f\u3066\u3001\u4e8b\u8c61\u3092\u4e0a\u624b\u304f\u8868\u73fe\u3067\u304d\u305d\u3046\u3067\u3059\u306d\u3001\u3068\u306e\u3053\u3068\u3002\n\n```\ndef log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() \n\n df['log_return'] = df.groupby('time_id')['wap'].apply(log_return)\n```\n\n\u2192.diff()\u3092\u4f7f\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\uff01","0a2ca46a":"trade_data\u306b\u95a2\u3057\u3066time_id\u304c5\u306e\u30c7\u30fc\u30bf\uff08\u9298\u67c4\uff09\u306b\u3064\u3044\u3066\u3001\u63a8\u79fb\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002seconds_in_bucket\u3092\u6642\u523b\u3068\u3057\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5408\u308f\u305b\u3066\u3001book_data\u3068trade_data\u3092\u5408\u308f\u305b\u3066\u53ef\u8996\u5316\u3057\u307e\u3059\u3002trade_data\u306e'price'\u304cbook\u30c7\u30fc\u30bf\u306ebid,ask\u306e\u7bc4\u56f2\u5185\u3067\u5909\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002","fe98ffa8":"stock_id=0,1,2\u306e\u4e09\u9298\u67c4\u306b\u3064\u3044\u3066\u3001time_id\u3067\u306e\u63a8\u79fb\uff08\u4fbf\u5b9c\u7684\u306b\uff09\u3092\u898b\u307e\u3059\u3068\u3001\u306a\u3093\u3068\u306a\u304f\u95a2\u9023\u6027\u304c\u3042\u308a\u3001\u540c\u3058\u30bf\u30a4\u30df\u30f3\u30b0\uff08time_id\uff09\u3067target\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u3082\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\u3002\n\n~~\u3053\u306e\u3042\u305f\u308a\u306e\u95a2\u4fc2\u6027\u3092\u3082\u3063\u3066\u3001stock_id=0\u306etime_id=32, 34\u306etarget\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\u305f\u3060\u3057\u3001time_id=32, 34\u306e\u76f4\u63a5\u7684\u306a\u30c7\u30fc\u30bf\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\u8fd1\u3044\u3068\u3053\u308d\u3060\u3068\u3001time_id=31\u306862\u3002~~\n\n\u2192 \u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u306f\u9055\u3046\u305f\u3081\u3001\u3053\u306e\u8fba\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u3055\u305d\u3046\u3002","5c4ea567":"#### WAP; Weighted averaged price\n\n\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u898b\u3066\u3044\u308b\u3068\u3001\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3068\u3057\u3066\u3088\u304f\u51fa\u3066\u304d\u307e\u3059\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u5b9f\u88c5\u3055\u308c\u304c\u3061\n\n```\ndef calc_wap(df):\n    wap = (df['bid_price1'] * df['ask_size1'] + df['ask_price1'] * df['bid_size1'])\/(df['bid_size1'] + df['ask_size1'])\n```\n\n\u30aa\u30fc\u30c0\u30fc\u30d6\u30c3\u30af\u304b\u3089\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002\u65e5\u672c\u8a9e\u8a18\u4e8b(Volume Weighted Average Price)\u306f\u3053\u3061\u3089\n\nhttps:\/\/oneinvest.jp\/vwap\/\n\n```\n\u3064\u307e\u308a\u3001VWAP\uff08\u305d\u306e\u65e5\u306e\u5e73\u5747\u7d04\u5b9a\u4fa1\u683c\uff09\u3092\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u3001VWAP\u4fa1\u683c\u3067\u682a\u3092\u8cb7\u3048\u3070\u5c11\u306a\u304f\u3068\u3082\u305d\u306e\u65e5\u306b\u9ad8\u5024\u63b4\u307f\u3059\u308b\u3053\u3068\u306f\u306a\u304f\u306a\u308a\u3001\u5e73\u5747\u7684\u306a\u4fa1\u683c\u3067\u53d6\u5f15\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n\u3068\u306e\u3053\u3068\u3067\u3059\u3002","4bd4592d":"xgboost\u306e\u6700\u9069\u5316\u3092\u9078\u629e\u3057\u307e\u3059\u3002","48a6cf72":"#### log return\n\nwap\u2192wap\u306elog\u2192wap\u306ediff\u2192log return\uff08wap\u306elog\u306ediff\uff09\u306e\u9806\u3067\u53ef\u8996\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u2192np.log(wap).diff()\u3068wap.diff()\u304c\u5909\u308f\u3089\u306a\u3044\u3051\u3069\u3001\u305d\u3093\u306a\u3082\u3093\u304b\u306a\uff08\u653e\u7f6e\uff09\u3002"}}