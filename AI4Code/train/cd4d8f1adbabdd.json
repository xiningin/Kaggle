{"cell_type":{"1d347d54":"code","ad6db2ca":"code","2dfc052a":"code","077fed8c":"code","74740afc":"code","7353fc28":"code","46dab0ed":"code","bed6e655":"code","76f8b053":"code","5c7bc268":"code","7d0c075d":"code","44895686":"code","0294d7a9":"code","5d3a45d5":"code","42fd112d":"code","4e24d609":"code","c72d1709":"code","2e945c02":"code","509698ab":"code","043ef4b9":"code","d0bf6f21":"code","6e4b3cae":"code","4dfe2b85":"code","53bcc688":"code","f1af6a26":"code","09063dc8":"code","2583b721":"code","f5f7f219":"code","fb097e15":"code","7a722234":"code","b48804f2":"code","566f8a9d":"code","b4bdf8c5":"code","26db3ede":"code","e7f262b0":"code","2cc1b02d":"code","4f0dd788":"code","ce6b06da":"code","4742c1a0":"code","9904aa59":"code","ff0adbb7":"code","bd681f8d":"code","30766be1":"code","d9597a9f":"code","94899bfd":"code","6d930da0":"code","e863d3f2":"code","40b8602f":"code","2e6b4c43":"code","db2d0cf0":"code","21735f41":"code","09742e6d":"code","f2a94975":"code","ff37888d":"code","a4f9f162":"code","ddc4aadf":"code","3d492698":"code","b01c74e8":"code","a1d2b8fa":"code","39a91b62":"code","ccd0def4":"code","68059d0a":"code","02700c9c":"code","e26375fd":"code","cf0b8e33":"code","992c9127":"code","07cbb9da":"code","4722aebe":"code","31352c52":"code","989f5c40":"code","5a6c4251":"code","af21fd85":"code","d55d0f14":"code","9e09d5cd":"code","61d451f0":"code","9dbd7aa6":"code","4caaf176":"code","90a87520":"code","c14c86c7":"code","492ff304":"code","47f5a0e1":"code","ffeda7b0":"code","8c7dcead":"code","dffa51dc":"code","be591027":"code","556ef106":"code","fd0061f5":"code","3c5d2ce1":"code","ccb00e57":"code","5b76547f":"code","883f0b48":"code","e2e1e538":"code","ed7802d8":"code","9df81003":"code","452e1476":"code","6225a766":"code","7b2c7672":"code","4b6099b7":"code","afb4d54c":"code","ce4ef49a":"code","c9862271":"code","38285832":"code","749d213e":"code","25ba1c0a":"code","49b635b8":"code","e175d5e5":"code","497f7fdd":"code","efa05c04":"code","91334480":"code","1ae5f8e9":"code","4d39f958":"code","6861ff93":"code","98890e60":"code","e6e33200":"code","736f2099":"code","ac8190f7":"code","4a89e055":"code","09575df4":"code","4dd0504d":"code","99beccb7":"code","26a6abf0":"code","6ad657a0":"code","485c5293":"code","9558be44":"code","1493d1fb":"code","640bb6c0":"code","08c3050d":"code","d22f6478":"code","379ea0d5":"code","a8c6217a":"code","7e8193bb":"code","8de67747":"code","6547a72e":"code","fc3d438e":"code","013b9ce6":"code","333ca95f":"markdown","aa588fb5":"markdown","3a5e938a":"markdown","2b82d0f1":"markdown","d1bd6800":"markdown","7b65c778":"markdown","1e811987":"markdown","bd47df3f":"markdown","664a271f":"markdown","581e492c":"markdown","7f498ff6":"markdown","a451d212":"markdown","8d96fe0f":"markdown","2ca86889":"markdown","c530ab8c":"markdown","a388eea9":"markdown","8ea1d688":"markdown","2890cab8":"markdown","18efb993":"markdown","59251744":"markdown","5b39c664":"markdown","7bb22a0d":"markdown","a15a9218":"markdown","564ea626":"markdown","356d957c":"markdown","c933e382":"markdown","ffe1fc81":"markdown","9066fb22":"markdown","51d2c564":"markdown","45903227":"markdown","87c46669":"markdown","c734b591":"markdown","59b2acd4":"markdown","ab3469c5":"markdown","c030f1a1":"markdown","912b3fdf":"markdown","adb74d2b":"markdown","24b70def":"markdown","9bcccaee":"markdown","87325dec":"markdown","63664f90":"markdown","14be5067":"markdown","7e01b673":"markdown","48c85bd7":"markdown","19640b7c":"markdown","79327973":"markdown","c3ac0fdd":"markdown","7a545d52":"markdown","b619ec95":"markdown","58859baa":"markdown","1f5527d6":"markdown"},"source":{"1d347d54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\nimport statsmodels.api as sm\nimport scipy.stats as sst\nfrom collections import Counter\nimport re\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfilenames_list = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        filenames_list.append(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport os\nprint(os.listdir(\"\/kaggle\/working\"))","ad6db2ca":"cities_pop_filename = '\/kaggle\/input\/world-cities\/worldcities.csv'\ncities_pop_filename","2dfc052a":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","077fed8c":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","74740afc":"# \u0417\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0431\u044b\u043b\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\n\ndef model_func(df_preproc):\n    # \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\n    train_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\n    test_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\n    y = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\n    X = train_data.drop(['Rating'], axis=1)\n    \n    RANDOM_SEED = 42\n    \n    # \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    # \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n    # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\n    model = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n    \n    # \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n    model.fit(X_train, y_train)\n\n    # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n    # \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\n    y_pred = model.predict(X_test)\n    \n    result = metrics.mean_absolute_error(y_test, y_pred)\n    \n    # \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\n    plt.rcParams['figure.figsize'] = (10,10)\n    feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n    feat_importances.nlargest(15).plot(kind='barh')\n    \n    plt.show\n    \n    return result","7353fc28":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')\n\n# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\ndata.info()","46dab0ed":"sample_submission","bed6e655":"# \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Number of Reviews\nnumber_rew_nan = pd.isna(data['Number of Reviews']).astype('uint8')\n\nnumber_rew_nan.name = 'number_rew_nan'\nnumber_rew_nan.value_counts()","76f8b053":"# \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u043b\u0435\u043c\n\n#mean = data['Number of Reviews'].mean()\nnumber_rew = data['Number of Reviews'].fillna(0)\n\nnumber_rew.name = 'number_rew'\nnumber_rew.sample(5)","5c7bc268":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0431\u0435\u0437 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n\ndf_preproc = pd.concat([data.loc[:,['Rating', 'sample','Ranking']], number_rew, number_rew_nan], axis = 1)\nmodel_func(df_preproc)","7d0c075d":"data.isna().sum()","44895686":"data['Number of Reviews'].fillna(0, inplace = True)","0294d7a9":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (data['City'].value_counts())[0:10].index:\n    data['Ranking'][data['City'] == x].hist(bins=100)\nplt.show()","5d3a45d5":"data[data.City == 'London'].describe()","42fd112d":"data[(data.City == 'London') & (data.Rating == 5)].loc[:,['Number of Reviews', 'Ranking']].\\\nsort_values('Ranking', ascending = False).iloc[:10,]","4e24d609":"plt.figure(figsize = (5,5))\nsns.jointplot(data = data[(data.City == 'London') & (data.Rating > 0)], x = 'Ranking', y = 'Rating', kind = 'kde')","c72d1709":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Ranking \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 Rating. \u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f\n# f(1) = 5 \u0438 f(n) = 1 \u043f\u0440\u0438 f(x) = k*x + b\n\nmax_rank_by_city = data.groupby(['City']).max().Ranking\n\ndef true_rating(row):\n    return round(5 - 4*(1 - row['Ranking'])\/(1 - max_rank_by_city[row['City']]),1)\n\ndata['rating_by_rank'] = data.apply(true_rating, axis = 1)\ndata['rating_by_rank'].sort_values()","2e945c02":"fig, ax = plt.subplots(1,1, figsize = (10,5))\nax = sns.heatmap(data.loc[data.City == 'London',['Rating', 'rating_by_rank']].corr(),annot = True, cmap = 'coolwarm')","509698ab":"data['rating_by_rank'].hist()","043ef4b9":"data[(data.City == 'London') & (data.Rating == 5)].loc[:,['Number of Reviews', 'Ranking', 'rating_by_rank']].\\\nsort_values('Ranking', ascending = False).iloc[:20,]","d0bf6f21":"df_preproc = pd.concat([data.loc[:,['Number of Reviews','rating_by_rank']], data.loc[:,['Rating', 'sample']]], axis = 1)\nmodel_func(df_preproc)","6e4b3cae":"rating_by_rank = data['rating_by_rank']","4dfe2b85":"data[data.City == 'London'].loc[:,['Number of Reviews', 'Ranking', 'rating_by_rank','Rating']].\\\nsort_values('rating_by_rank', ascending = True).iloc[:20,]","53bcc688":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 Ranking, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0435\n# \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e\u0434\u0435\u043b\u0438\u043c Ranking \u043d\u0430 \u043c\u0430\u043a\u0441. \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n\ndef norm_rank_funk(row):\n    return round(row['Ranking']*100\/max_rank_by_city[row['City']],5)\n\nnorm_rank = data.apply(norm_rank_funk, axis = 1)\nnorm_rank.name = 'norm_rank'\nnorm_rank.sort_values()","f1af6a26":"norm_rank.hist()","09063dc8":"plt.figure(figsize = (5,5))\nplt.boxplot(norm_rank, vert = False)","2583b721":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample']], number_rew, number_rew_nan, norm_rank], axis = 1)\nmodel_func(df_preproc)","f5f7f219":"# \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\nmean_rews_by_city = round((data.groupby(['City']).sum()['Number of Reviews']\n                           \/data.groupby(['City']).max()['Ranking']),2)\n\nmean_rews = data.City.apply(lambda x: mean_rews_by_city[x])\nmean_rews.name = 'mean_rews'\nmean_rews.sample(5)","fb097e15":"# \u0434\u0432\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u043e\u0434\u0438\u043d \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u0430\u043a\u0441 Ranking, \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n\nmax_rank = data.City.apply(lambda x: max_rank_by_city[x])\nmax_rank.name = 'max_rank'\n\nplaces_counts_by_sity = data.groupby(['City']).count().Ranking\nplaces_counts = data.City.apply(lambda x: places_counts_by_sity[x])\nplaces_counts.name = 'places_counts'\n\npd.concat([max_rank, places_counts], axis = 1).sample(10)","7a722234":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample']], number_rew, number_rew_nan, norm_rank, mean_rews, places_counts], axis = 1)\nmodel_func(df_preproc)","b48804f2":"sns.countplot(data.Restaurant_id.value_counts()[:50])","566f8a9d":"nets = data.Restaurant_id.value_counts()\nrests_by_id = data.Restaurant_id.apply(lambda x: nets[x])\nrests_by_id.name = 'rests_by_id'","b4bdf8c5":"pd.concat([data.Restaurant_id,rests_by_id],axis = 1).sample(10)","26db3ede":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample']], number_rew, number_rew_nan, norm_rank, mean_rews, places_counts,\\\n                        max_rank, rests_by_id], axis = 1)\nmodel_func(df_preproc)","e7f262b0":"print(data[data.ID_TA == 'd3161682'].iloc[0].URL_TA)\nprint(data[data.ID_TA == 'd3161682'].iloc[1].URL_TA)","2cc1b02d":"data.ID_TA.duplicated().value_counts()","4f0dd788":"data[data.ID_TA.duplicated()]","ce6b06da":"ids = data[data.ID_TA.duplicated()].ID_TA.values\ndef is_dubl(item):\n    if item in ids:\n        return True\n    else:\n        return False\n\n# \u043f\u043e\u0441\u043c\u043e\u0442\u0438\u0440\u043c \u043d\u0430 \u043f\u0430\u0440\u044b \u044d\u0442\u0438\u0445 \u0434\u0443\u0431\u043b\u0435\u0439    \nfor id_ta in ids:\n    display(data[data.ID_TA == id_ta])","4742c1a0":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u043e\u043c\u0435\u0442\u043a\u0438 \u0434\u0443\u0431\u043b\u0435\u0439\ndef mark_dubl(row):\n    id_ta = row.ID_TA\n    ind = row.name\n    if id_ta in ids:\n        ind0 = data[data['ID_TA'] == id_ta].index.tolist()[0]\n        ind1 = data[data['ID_TA'] == id_ta].index.tolist()[1]\n        row0 = data[data['ID_TA'] == id_ta].iloc[0]\n        row1 = data[data['ID_TA'] == id_ta].iloc[1]\n        if (row0['sample'] == 0) and (row1['sample'] == 0):\n            if row0.Ranking >= row1.Ranking:\n                if ind0 == ind:\n                    return 0\n                else:\n                    return 1\n            else:\n                if ind0 == ind:\n                    return 1\n                else:\n                    return 0\n\n        elif (row0['sample'] == 1) and (row1['sample'] == 0):\n            if ind0 == ind:\n                return 1\n            else:\n                return 0\n            return 1\n        elif (row0['sample'] == 0) and (row1['sample'] == 1):\n            if ind0 == ind:\n                return 0\n            else:\n                return 1\n        elif (row0['sample'] == 1) and (row1['sample'] == 1):\n            if row0.Ranking >= row1.Ranking:\n                if ind0 == ind:\n                    return 0\n                else:\n                    return 1\n            else:\n                if ind0 == ind:\n                    return 1\n                else:\n                    return 0\n    else:\n        return 0\ndata['dubl'] = data.apply(mark_dubl, axis = 1)","9904aa59":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a \u043f\u0440\u043e\u043c\u0435\u0442\u0438\u043b\u0438\u0441\u044c \u0434\u0443\u0431\u043b\u0438\nfor id_ta in ids:\n    display(data[data.ID_TA == id_ta])","ff0adbb7":"data['dubl'].unique()","bd681f8d":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'dubl']], number_rew, number_rew_nan, norm_rank, mean_rews, places_counts,\\\n                        rests_by_id], axis = 1)\nmodel_func(df_preproc)","30766be1":"data.URL_TA.duplicated().value_counts()","d9597a9f":"data[4:10]","94899bfd":"data['url_g'] = data.URL_TA.str.extract(r'(g\\d+)')\ndata['url_g'] = data.url_g.apply(lambda x: int(x[1:]))\ndata['url_g'].sample(5)","6d930da0":"data['url_g'].value_counts()","e863d3f2":"data['City'].value_counts()","40b8602f":"data[data['url_g'] == 6919449]","2e6b4c43":"data[data['url_g'].duplicated()]","db2d0cf0":"len(data.url_g.unique())","21735f41":"len(data.City.unique())","09742e6d":"cities = data.groupby(['City'])\ncities['url_g'].value_counts()[:10]","f2a94975":"cities_gcnt = cities['url_g'].value_counts()\ncities_gcnt['Brussels'][188644]","ff37888d":"def g_cnt(row):\n    return cities_gcnt[row['City']][row['url_g']]\n\ndata['district_cnt'] = data.apply(g_cnt, axis = 1)\n","a4f9f162":"data['district_cnt'].sample(3)","ddc4aadf":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan, norm_rank, mean_rews, places_counts,\\\n                        rests_by_id], axis = 1)\nmodel_func(df_preproc)","3d492698":"fig, ax = plt.subplots(1,1, figsize = (10,5))\nax = sns.heatmap(df_preproc.corr(),annot = True, cmap = 'coolwarm')","b01c74e8":"data.info()","a1d2b8fa":"all_cities = data.City.value_counts().index\n\nfig, ax = plt.subplots(figsize = (15, 5))\n\nsns.boxplot(x='City', y='Rating',data=data[data.Rating > 0],ax=ax)\n\nplt.xticks(rotation=45)\nax.set_title('Boxplot for City')\n\nplt.show()","39a91b62":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438, \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445\nphen_cities = [ i for i in all_cities if data[data.City == i].quantile(q = 0.75).Rating - data[data.City == i].quantile(q = 0.25).Rating != 1.5]\nphen_cities  ","ccd0def4":"data.City.unique()","68059d0a":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u0433\u043e\u0440\u043e\u0434\u0430\u043c\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445\n\ndata['phen_cities'] = data.City.apply(lambda x: x if x in phen_cities else 'other')\ndata['phen_cities'].value_counts()","02700c9c":"# \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f get_dummies\n\ncities = pd.get_dummies(data.City, columns=[ 'City'])\ncities.sample(5)","e26375fd":"phen_cities_dummy = pd.get_dummies(data.phen_cities, columns=[ 'phen_cities'])\nphen_cities_dummy.sample(5)","cf0b8e33":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u043c\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438\n\ndf_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, \\\n                        rests_by_id, cities], axis = 1)\nmodel_func(df_preproc)","992c9127":"data['Price Range'].value_counts()","07cbb9da":"data['Price Range'].isna().sum()","4722aebe":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0446\u0435\u043d\u0435 \u043c\u043d\u043e\u0433\u043e. \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0446\u0435\u043d\u0435 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\nprice_isnan = pd.isna(data['Price Range']).astype('uint8')\nprice_isnan.name = 'price_isnan'","31352c52":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f Price Range\n\ndef price_ordinal(price):\n    if price == '$':\n        result = 1\n    elif price == '$$ - $$$':\n        result = 2\n    elif price == '$$$$':\n        result = 3\n    else:\n        result = 0\n    return result\n\nprices = data['Price Range'].apply(price_ordinal)\nprices.name = 'prices'\n\nprices.value_counts()","989f5c40":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043d\u043e\u0439\n\ndf_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, \\\n                        rests_by_id, cities,\\\n                        prices, price_isnan], axis = 1)\nmodel_func(df_preproc)","5a6c4251":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n\ncuisine_styles = Counter()\n\nfor i in data['Cuisine Style'].dropna():\n    l = re.sub('\\s\\'|\\'','', i)[1:-1].split(',')\n    cuisine_styles.update(l)\n\ncuisines = [x[0] for x in cuisine_styles.most_common()]\n\nlen(cuisines)\n","af21fd85":"cuisine_styles.most_common()","d55d0f14":"cuisines_groups = {\n    'healty': ['Vegetarian Friendly', 'Gluten Free Options', 'Healthy', 'Vegan Options'],\n    'taboo' : ['Halal', 'Kosher'],\n    'seafood' : ['Seafood'],\n    'alco' : ['Bar', 'Pub', 'Wine Bar', 'Gastropub', 'Brew Pub'],\n    'fast' : ['Cafe', 'Fast Food', 'Diner', 'Street Food'],\n    'other' : ['International', 'Fusion', 'Contemporary', 'Delicatessen'],\n    'italian' : ['Italian', 'Pizza'],\n    'eurapian' : ['European', 'Mediterranean', 'Italian', 'French', 'Spanish', 'British', 'Central European', 'Portuguese',\\\n           'German', 'Greek', 'Czech', 'Eastern European', 'Austrian', 'Polish', 'Scandinavian', 'Hungarian',\\\n           'Dutch', 'Irish', 'Belgian', 'Danish', 'Swiss', 'Swedish', 'Scottish', 'Norwegian',\\\n           'Slovenian', 'Russian', 'Croatian', 'Ukrainian', 'Romanian', 'Albanian', 'Welsh', 'Latvian'],\n    'asian' : ['Asian', 'Japanese', 'Sushi', 'Chinese', 'Indian',  'Thai', 'Vietnamese', 'Korean', 'Pakistani', 'Nepali'\\\n         , 'Balti', 'Bangladeshi', 'Indonesian', 'Malaysian', 'Sri Lankan', 'Taiwanese', 'Tibetan',\\\n         'Cambodian', 'Singaporean', 'Mongolian', 'Filipino', 'Minority Chinese', 'Central Asian', 'Yunnan', \\\n         'Xinjiang'],\n    'steak' : ['Steakhouse', 'Barbecue', 'Grill'],\n    'eastern' : ['Middle Eastern', 'Turkish', 'Lebanese', 'Israeli', 'Persian', 'Arabic', 'Afghani', 'Uzbek'],\n    'african' : ['African', 'Moroccan', 'Ethiopian', 'Egyptian', 'Tunisian'],\n    'australian' : ['Australian', 'New Zealand'],\n    'american' : ['American', 'Canadian'],\n    'latamerican' : ['Mexican', 'South American', 'Latin', 'Argentinean', 'Central American', 'Brazilian', 'Peruvian',\\\n               'Venezuelan', 'Jamaican', 'Cuban', 'Colombian', 'Cajun & Creole', 'Southwestern',\\\n               'Chilean', 'Ecuadorean', 'Native American', 'Salvadoran'],\n    'exotic' : ['Hawaiian', 'Polynesian', 'Jamaican', 'Cuban', 'Fujian', 'Burmese', 'Caribbean'],\n    '\u0441aucas' : ['Georgian', 'Armenian', 'Caucasian', 'Azerbaijani']\n}","9e09d5cd":"cuisines_groups['asian']","61d451f0":"cuisine_most_common = [x[0] for x in cuisine_styles.most_common()[:10]]\ncuisine_most_common","9dbd7aa6":"# \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043c Cuisine Style \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\ncuisine_style = data['Cuisine Style'].apply(lambda x: ['other_style'] if pd.isnull(x) else x[1:-1].split(',') )\ncuisine_style.sample(5)","4caaf176":"for i,k in enumerate(cuisine_style):\n    new_list = []\n    for j in k:\n        j = re.sub('\\s\\'|\\'','', j)\n        new_list.append(j)\n    cuisine_style.at[i] = new_list\ncuisine_style.sample(5)","90a87520":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\"\n\ncuisine_counts = cuisine_style.apply(lambda x: len(x))\ncuisine_counts.name = 'cuisine_counts'\n\ncuisine_counts.sample(5)","c14c86c7":"for col in cuisines_groups.keys():\n    s1 = set(cuisines_groups[col])\n    data[col] = cuisine_style.apply(lambda x: len(s1.intersection(set(x))))\n    ","492ff304":"cuisines_cols = data.loc[:,cuisines_groups.keys()]\ncuisines_cols.describe()","47f5a0e1":"for i,k in enumerate(cuisine_style):\n    new_list = []\n    for j in k:\n        if j in cuisine_most_common:\n            new_list.append(j)\n        else:\n            new_list.append('other_style')\n    cuisine_style.at[i] = new_list\ncuisine_style.sample(5)","ffeda7b0":"cuisine_style_df = pd.DataFrame(cuisine_style)\nfor i in cuisine_most_common + ['other_style']:\n    cuisine_style_df[i] = cuisine_style.apply(lambda x: 1 if i in x else 0).astype('uint8')\n\ncuisine_style_df.drop('Cuisine Style', axis = 1, inplace=True)\n\ncuisine_style_df.info()","8c7dcead":"cuisine_style_df.sample(5)","dffa51dc":"cuisines_cols.sample(5)","be591027":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, rests_by_id, \\\n                        cities,\n                        prices, price_isnan, \\\n                        cuisines_cols\n                       ], axis = 1)\nmodel_func(df_preproc)","556ef106":"data['Cuisine Style'].isna().sum()","fd0061f5":"data['Cuisine Style'].fillna('other_style', inplace = True)","3c5d2ce1":"data['rew_dates'] = data.Reviews.apply(lambda x : [0] if pd.isna(x) else x[2:-2].split('], [')[1][1:-1].split(\"', '\"))\ndata['max_rew_date'] = pd.to_datetime(data['rew_dates'].apply(lambda x: max(x)))\n\ndata['first_rew'] = pd.to_datetime(data['rew_dates'].apply(lambda x : x[0]))\ndata['second_rew'] = pd.to_datetime(data['rew_dates'].apply(lambda x: x[1] if len(x) == 2 else ''))\n\nrew_delta = np.abs(data['first_rew'] - data['second_rew'])\nrew_delta = rew_delta.apply(lambda x: x.days)\n\nrew_delta.name = 'rew_delta'\n\nrew_delta.sample(5)","ccb00e57":"rew_delta.isna().sum()","5b76547f":"# \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043c\u043d\u043e\u0433\u043e, \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f NAN\nrew_delta_isnan = pd.isna(rew_delta).astype('uint8')\n\nrew_delta_isnan.value_counts()","883f0b48":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\n\nmean = round(rew_delta.mean(), 2)\nrew_delta = rew_delta.fillna(mean)\nrew_delta.sample(5)","e2e1e538":"from datetime import datetime\n\nrew_delta_cur = (datetime.now() - data['max_rew_date'])\nrew_delta_cur = rew_delta_cur.fillna(rew_delta_cur.median())\n\nrew_delta_cur = rew_delta_cur.apply(lambda x : x.days)\n\nrew_delta_cur.name = 'rew_delta_cur'\n\nrew_delta_cur.sample(5)","ed7802d8":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, rests_by_id, \\\n                        cities,\n                        prices, price_isnan, \\\n                        cuisine_counts, cuisines_cols, \\\n                        rew_delta, rew_delta_cur,rew_delta_isnan\n                       ], axis = 1)\nmodel_func(df_preproc)","9df81003":"data_add = pd.read_csv(cities_pop_filename)\ndata_add.sample(3)","452e1476":"cities_info = pd.DataFrame(data.City.value_counts().index)\ncities_info.columns = ['city']\ncities_info.head(3)","6225a766":"data_europe = data_add[data_add.iso2.apply(lambda x: x not in ('US','CA','VE'))]\ndata_europe.head()","7b2c7672":"cities_country = cities_info.merge(data_europe, how = 'left', on = 'city').loc[:, ['city', 'iso2']]\ncities_country.info()","4b6099b7":"cities_country[cities_country.iso2.isna()]","afb4d54c":"cities_country.at[23,'iso2'] = 'PT'\ncities_country.at[25,'iso2'] = 'PL'\ncities_country.at[22,'iso2'] = 'CH'\ncities_country.at[19,'iso2'] = 'DK'\ncities_country.info()","ce4ef49a":"cities_info = cities_info.merge(data_europe.loc[:,['city','capital', 'population']], how = 'left', on = 'city')\ncities_info.sample(5)","c9862271":"cities_info.isna().sum()","38285832":"cities_info['capital'] = cities_info.capital.fillna('not_cap')","749d213e":"cities_info[cities_info.population.isna()]","25ba1c0a":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0438 \u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u0445\ncities_info.at[23,'population'] = 237591\ncities_info.at[25,'population'] = 769498\ncities_info.at[22,'population'] = 428737\ncities_info.at[19,'population'] = 615993","49b635b8":"cities_info.columns =  ['City', 'capital', 'population']\ncities_country.columns = ['City', 'country']","e175d5e5":"# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c\n\ncities_pop = data.loc[:,['City']].merge(cities_info, how = 'left', on = 'City')\n\ncities_pop.drop(['City'], axis = 1, inplace = True)\n\ncities_pop.info()","497f7fdd":"cities_capital = pd.get_dummies(cities_pop.capital)\ncities_pop.drop(['capital'], axis = 1, inplace = True)\n\ncities_capital.sample(5)","efa05c04":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u0430\u043c\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d\ncountries = data.loc[:,['City']].merge(cities_country, how = 'left', on = 'City')\n\ncountries.drop(['City'], axis = 1, inplace = True)\ncountries.info()","91334480":"countries = pd.get_dummies(countries)\ncountries.info()","1ae5f8e9":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, rests_by_id, \\\n                        cities,\n                        prices, price_isnan, \\\n                        cuisine_counts, cuisines_cols, \\\n                        rew_delta, rew_delta_cur,rew_delta_isnan,\n                        cities_pop, cities_capital, countries\n                       ], axis = 1)\nmodel_func(df_preproc)","4d39f958":"cities_info.info()","6861ff93":"cities_info['City']","98890e60":"# \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0433\u043e\u043e\u0440\u0434\u043e\u0432 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 [\u043a\u043e\u043b-\u0432\u043e \u043c\u043b\u043d. \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432, \u043c\u0435\u0441\u0442\u043e \u0432 \u0440\u0435\u0439\u0442\u0435\u043d\u0433\u0435 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f] \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 wiki\nth = {\n    'London' : [19233, 14],\n    'Paris' : [17560, 18],\n    'Madrid' : [5440, 19],\n    'Barcelona' : [6714, 19],\n    'Berlin' : [5959, 15],\n    'Milan' : [6481, 24],\n    'Rome' : [10065, 24],\n    'Prague' : [8949, 22],\n    'Lisbon' : [3539, 29],\n    'Vienna' : [6410, 2],\n    'Amsterdam' : [8354, 7],\n    'Brussels' : [3942, 13],\n    'Hamburg' : [1450, 15],\n    'Munich' : [4067, 15],\n    'Lyon' : [6000, 18],\n    'Stockholm' : [2605, 8],\n    'Budapest' : [3823, 31],\n    'Warsaw' : [2850, 27],\n    'Dublin' : [5213, 16],\n    'Copenhagen' : [3070, 5],\n    'Athens' : [5728, 36],\n    'Edinburgh' : [1660, 14],\n    'Zurich' : [2240, 6],\n    'Oporto' : [2341, 29],\n    'Geneva' : [1150, 6],\n    'Krakow' : [2732, 27],\n    'Oslo' : [1400, 1],\n    'Helsinki' : [1240, 9],\n    'Bratislava' : [126, 26],\n    'Luxembourg' : [1139, 11],\n    'Ljubljana' : [5900, 20]\n}","e6e33200":"tourists = data.City.apply(lambda x : th[x][0])\ntourists.name = 'tourists'\n\nhapiness = data.City.apply(lambda x : th[x][1])\nhapiness.name = 'hapiness'\n\ntourists\nhapiness","736f2099":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt']], number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, rests_by_id, \\\n                        cities,\n                        prices, price_isnan, \\\n                        cuisine_counts, cuisines_cols, \\\n                        rew_delta, rew_delta_cur,rew_delta_isnan,\n                        cities_pop, cities_capital, countries,\n                        tourists, hapiness\n                       ], axis = 1)\nmodel_func(df_preproc)","ac8190f7":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u043e\u0431\u0437\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.\ndata['rew_texts'] = data.Reviews.apply(lambda x : '' if pd.isna(x) else x[2:-2].split('], [')[0])\n\nrew_texts_list = data['rew_texts'].apply(lambda x : [''] if x == '' else x.split(\"', '\"))\n\ndata['first_text'] = rew_texts_list.apply(lambda x : x[0][1:-1] if len(x) == 1 else x[0][1:] if len(x) == 2 else '')\ndata['second_text'] = rew_texts_list.apply(lambda x: x[1][:-1] if len(x) == 2 else '')\n\ndata.loc[:,['Reviews', 'rew_texts', 'first_text', 'second_text']].sample(5)","4a89e055":"def rew_counts_func(row):\n    result = 0 if row['rew_texts'] == ''  else 1 if row['second_text'] == '' else 2\n    return result\n    \nrew_counts = data.apply(rew_counts_func, axis = 1)\nrew_counts.name = 'rew_counts'\n\npd.concat([rew_counts, data['rew_texts']], axis = 1)","09575df4":"rew_counts.value_counts()","4dd0504d":"# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445\n\nwords_count = data['rew_texts'].apply(lambda x : len(x.split()))\n\nwords_count.name = 'words_count'\npd.concat([rew_counts, data['rew_texts'], words_count], axis = 1)","99beccb7":"all_words = Counter()\n\nfor i in (data['first_text'].str.split() + data['second_text'].str.split()):\n    all_words.update(i)\n\nwords = [x[0] for x in all_words.most_common()]\n\nall_words.most_common()","26a6abf0":"positive = ['fine', 'better', 'great', 'good', 'nice', 'excellent', 'best', 'lovely', 'delicious',\\\n            'amazing', 'friendly', 'atmosphere', 'tasty',  'perfect', 'wonderful', 'super', 'top','cosy',\\\n            'beautiful', 'pleasant', 'brilliant', 'fantastic', 'cool', 'outstanding','favorite',\\\n            'enjoyable', 'welcome', 'incredible', 'awesome', 'charming', 'original'\n           ]\nnegative = ['worth','bad', 'poor', 'terrible', 'slow', 'worst','disappointing', 'overpriced', 'awful',\\\n            'rude','horrible', 'too'\n           ]","6ad657a0":"def format_rew(rew):\n    sent = rew.split()\n    new_sent = []\n    for word in sent:\n        if re.search('\\w+', word.lower()) is None:\n            continue\n        else:\n            new_word = re.search('\\w+', word.lower()).group(0)\n            new_sent.append(new_word)\n    return new_sent","485c5293":"data['rew_texts1'] = data.rew_texts.apply(format_rew)\ndata.loc[:,['rew_texts','rew_texts1']].sample(5)","9558be44":"def tone_pos(item):\n    cnt = 0\n    for word in positive:\n        if word in item:\n            cnt +=1\n    return cnt\n\ndef tone_neg(item):\n    cnt = 0\n    for word in negative:\n        if word in item:\n            cnt +=1\n    return cnt","1493d1fb":"data['rew_pos'] = data.rew_texts1.apply(tone_pos)\ndata['rew_neg'] = data.rew_texts1.apply(tone_neg)","640bb6c0":"data.loc[:,['rew_texts1', 'rew_pos', 'rew_neg']].sample(10)","08c3050d":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt','rew_pos', 'rew_neg']], \\\n                        number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, rests_by_id, \\\n                        cities,\n                        prices, price_isnan, \\\n                        cuisine_counts, , \\\n                        rew_delta, rew_delta_cur,rew_cuisines_colsdelta_isnan,\n                        cities_pop, cities_capital, countries,\n                        tourists, hapiness,\n                        rew_counts\n                       ], axis = 1)\nmodel_func(df_preproc)","d22f6478":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\nX = pd.concat([number_rew, cities_pop, tourists, data['Rating']], axis = 1)\n\nfig, ax = plt.subplots(1,1, figsize = (10,5))\nax = sns.heatmap(X.corr(),annot = True, cmap = 'coolwarm')","379ea0d5":"df_preproc = pd.concat([data.loc[:,['Rating', 'sample', 'district_cnt','rew_pos', 'rew_neg']], \\\n                        number_rew, number_rew_nan,\\\n                        norm_rank, mean_rews, rests_by_id, \\\n                        cities,\n                        prices, price_isnan, \\\n                        cuisine_counts, cuisines_cols, \\\n                        rew_delta, rew_delta_cur,rew_delta_isnan,\n                        cities_pop, cities_capital, countries,\n                        tourists, hapiness,\n                        rew_counts\n                       ], axis = 1)\nmodel_func(df_preproc)","a8c6217a":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values           # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)\n    \nRANDOM_SEED = 42\n    \n# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\n\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators= 200, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n    \n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)\n\ny_pred = np.round(y_pred * 2) \/ 2\nprint('MAE: ',metrics.mean_absolute_error(y_test, y_pred))\n    \n# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","7e8193bb":"test_data = test_data.drop(['Rating'], axis=1)\nsample_submission.Rating","8de67747":"predict_submission = model.predict(test_data)","6547a72e":"predict_submission = np.round(predict_submission * 2)\/2\n","fc3d438e":"predict_submission","013b9ce6":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission","333ca95f":"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e\u0441\u044c","aa588fb5":"\u041f\u0440\u043e\u043f\u0443\u0441\u043e\u043a\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e, \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043d\u0438\u0445","3a5e938a":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a City. \u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438?","2b82d0f1":"\u0412\u0441\u0435 \u044d\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0438\u0445 \u041c\u0430\u0434\u0440\u0438\u0434\u0430 \u0438 \u0412\u0430\u0440\u0448\u0430\u0432\u044b, \u0447\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e.","d1bd6800":"### 3.5. \u0421\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"\u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430\" \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","7b65c778":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0434\u0440\u0443\u0433\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0439\u0434\u0435\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0448\u0430\u0433\u0443.","1e811987":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432 \u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b.\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443 \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430.\n\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","bd47df3f":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 Restaurant_id","664a271f":"# import","581e492c":"\u0421 \u043d\u043e\u0432\u044b\u043c \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e\u0441\u044c","7f498ff6":"\u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0439 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432.\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043d\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435","a451d212":"# Submission\n\u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","8d96fe0f":"## 2. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","2ca86889":"\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043e\u043d\u044c","c530ab8c":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0437\u043d\u0430\u0447\u0438\u043c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f Rating","a388eea9":"# Final model test","8ea1d688":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430  URL_TA","2890cab8":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043d\u0430 \u0432\u0441\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 cities","18efb993":"\u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 Ranking \u043f\u0443\u0442\u0435\u043c \u043b\u0438\u043d. \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 = \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u0435\u043d \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0435\u043d.","59251744":"# DATA","5b39c664":"### 3.8. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 population, tourists \u0438 Number of Reviews \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","7bb22a0d":"\u0418\u0437\u043c\u0435\u043d\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Cuisine Style \u0442\u0430\u043a: \u0435\u0441\u043b\u0438 \u0441\u0442\u0438\u043b\u044c \u043a\u0443\u0445\u043d\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u0430\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 other_style","a15a9218":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n","564ea626":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 Ranking) \u0438\u043c\u0435\u044e\u0442 Rating \u0440\u0430\u0432\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 4 \u0431\u0430\u043b\u043b\u0430\u043c.\n\u041d\u043e \u0435\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c 5, \u043d\u043e \u043f\u043e \u0440\u0430\u043d\u043a\u0443 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043f\u043e\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0435. \u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0440\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0431\u0435\u0433\u0430\u043b\u043e\u0432\u043a\u0438 \u0434\u043b\u044f \u043c\u0435\u0441\u0442\u043d\u044b\u0445, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435 \u043c\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u043d\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0435 \u0441\u0442\u0430\u0432\u044f\u0442 \u0435\u0439 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e 5.\n","356d957c":"\u0421\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443, \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442 url_g \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u0434 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0443\u043d\u043a\u0442\u0430 \u043d\u0430 tadvisor","c933e382":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN ","ffe1fc81":"\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ***gNNNNNN*** \u0438\u0437 url","9066fb22":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0435\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 ID_TA, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0438\u0445","51d2c564":"\u041e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f - \u0431\u043e\u043b\u044c\u0448\u043e\u0435. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0443\u0442\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","45903227":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","87c46669":"### 3.4. \u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Reviews\n\u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u044b \u043e\u0431\u0437\u043e\u0440\u043e\u0432 \u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0448\u043b\u043e \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0431\u0437\u043e\u0440\u0430\u043c\u0438","c734b591":"\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 Ranking \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e\u0441\u044c.","59b2acd4":"\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 norm_rank \u0438 rating_by_rank \u0438\u043c\u0435\u044e\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e = -1, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043e\u0434\u0438\u043d \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u0443\u0442\u0435\u043c \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f.","ab3469c5":"## 3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","c030f1a1":"### 3.7. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043e\u0431\u0437\u043e\u0440\u043e\u0432 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","912b3fdf":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0434\u0430\u0442\u044b: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0435\u0435 \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0430\u0442\u043e\u0439 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c","adb74d2b":"\u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0430\u0440 \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u044d\u0442\u043e \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u0434\u0443\u0431\u043b\u0438. \u041f\u0440\u043e\u043c\u0435\u0442\u0438\u043c \u0438\u0445 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0432\u0435\u0434\u0435\u0442 \u0441\u0435\u0431\u044f \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043c\u043e\u0434\u0435\u043b\u044c","24b70def":"\u041e\u0431\u0440\u0430\u0442\u0438\u043b\u0430 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e Rating \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 - \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 1 \u0434\u043e 5 \u0441 \u0448\u0430\u0433\u043e\u043c 0.5. \u041f\u043e\u044d\u0442\u043e\u043c\u0443, \u0435\u0441\u043b\u0438 \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0434\u043e \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435\u0433\u043e x.5 \u0447\u0438\u0441\u043b\u0430, \u0442\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u0441\u044f.","9bcccaee":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 ID_TA","87325dec":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435. \n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u0444\u0430\u043a\u0442 \u0434\u043b\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 Ranking.","63664f90":"\u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u0432\u043b\u0438\u044f\u043b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a norm_rank.","14be5067":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","7e01b673":"### 3.2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price Range\".","48c85bd7":"\u041c\u043e\u0434\u0435\u043b\u044c \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430\u0441\u044c.","19640b7c":"### 3.3. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c Cuisine Style","79327973":"### 3.1. \u0421\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c dummy-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 City","c3ac0fdd":"\u0412 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 Restaurant_id. \u0421\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443, \u044d\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u043f\u0440\u0435\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","7a545d52":"\u0414\u0443\u0431\u043b\u0438 \u043c\u044b \u0443\u0436\u0435 \u043f\u0440\u043e\u043c\u0435\u0442\u0438\u043b\u0438, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0431\u043b\u0438\u0436\u0435 \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","b619ec95":"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0445\u0443\u0434\u0448\u0438\u043b\u043e. \u0410 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 - \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442. \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a rew_counts","58859baa":"### 3.6. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u043e\u0432","1f5527d6":"### \u0421\u043a\u043b\u0435\u0438\u043c \u0432\u0441\u0435 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0438\u0440\u043c \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438"}}