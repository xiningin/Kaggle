{"cell_type":{"5ce2ad9e":"code","0b01304e":"code","4dbe2c70":"code","eb477cf2":"code","741e5cf0":"code","4c29dc5b":"code","9b644b98":"code","cba0f5e4":"code","d40646e3":"code","bcddfe68":"code","230a0bdc":"code","50e389a6":"code","f0680c27":"code","4dcc3187":"code","125f2b2a":"code","010ff4a7":"code","e73021ac":"code","557b96ba":"code","ef644dd5":"code","7bc7ef26":"code","f2d8e2fa":"markdown","aa745738":"markdown","eba79bea":"markdown","10f0042c":"markdown","645a9093":"markdown","075bee07":"markdown","252a3d98":"markdown","11a2ba9e":"markdown","53bf16f7":"markdown","d951f7a1":"markdown"},"source":{"5ce2ad9e":"\n\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport sklearn \nimport keras\nimport tensorflow as tf\nimport seaborn as sns\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","0b01304e":"\n# get the data from its path \ndata =  pd.read_csv('..\/input\/cardiovascular-disease-dataset\/cardio_train.csv',sep=';', index_col = \"id\")\ndata['age']= data['age']\/365\ndata['age']= data['age'].astype(int)\n#name_group = ['<40', '40: 55' ,'>55']\n#data['gender'] = data['gender'].astype(str)\n#data['gluc'] = data['gluc'].astype(str)\n#data['cholesterol'] = data['cholesterol'].astype(str)\n#data['age_class'] = pd.qcut(data['age'],q=3 ,labels = name_group)\n#data = pd.get_dummies(data )#,drop_first = True)\ndata['BMI'] = data['weight']\/(np.power(data['height']\/100, 2))\ndata['BMI'] = data['BMI'].astype(int)\ndata['Cardio_disease'] = data['cardio']\ndata = data.drop(columns = ['height','cardio','weight'])\ndata.head()","4dbe2c70":"data.info()","eb477cf2":"data.describe()# get the statistical information of the data","741e5cf0":"# get the correlation of tbetween cardiovascular disease and each risk factor\nplt.figure(figsize=(16, 8))\nsns.heatmap(data.corr(), annot=True, fmt='.3f')\n\n","4c29dc5b":"\n#detect the outliers through box plots \n\ndf_melt = pd.melt(frame= data, id_vars='Cardio_disease',\n                  value_vars=[ 'ap_hi' , 'ap_lo' , 'BMI','age'],\n                  var_name='features',\n                  value_name='value', \n                  col_level=None)\n# Box plot\nplt.figure(figsize=(12, 10))\nsns.boxplot(x='features', y='value', hue='Cardio_disease', data=df_melt)\nplt.xticks(rotation=90)","9b644b98":"# Diciding upper and lower bound \nap_list = ['ap_hi', 'ap_lo','BMI', ]\ndf_ap = pd.DataFrame(index=['lower_bound', 'upper_bound'])\n\nfor i in ap_list:\n    Q1 = data[i].quantile(0.25)\n    Q3 = data[i].quantile(0.75)\n    IQR = Q3 - Q1\n    \n    lowr_bound = Q1 - 1.5*IQR\n    upper_bound = Q3 + 1.5*IQR\n    df_ap[i] = [lowr_bound, upper_bound]\n    \ndf_ap.head()\n","cba0f5e4":"# remove the outliers \noutlier_filter = ((data[\"ap_hi\"]>170) |(data[\"ap_hi\"]<90)| (data[\"ap_lo\"]>105)|(data[\"ap_lo\"]< 65) |(data[\"BMI\"]> 40)|(data[\"BMI\"]< 12) )\ndata = data[~outlier_filter]\ndata.shape","d40646e3":"# box plot after deleting the outliers \ndf_melt = pd.melt(frame= data, id_vars='Cardio_disease',\n                  value_vars=['ap_hi' , 'ap_lo' , 'BMI'],\n                  var_name='features',\n                  value_name='value', \n                  col_level=None)\n# Box plot\nplt.figure(figsize=(10 ,13))\nsns.boxplot(x='features', y='value', hue='Cardio_disease', data=df_melt)\nplt.xticks(rotation=90)","bcddfe68":"# data standarization\nstd_list = [\"age\" ,\"BMI\",\"ap_hi\", \"ap_lo\"] \n\ndef standartization(x):\n    x_std = x.copy(deep=True)\n    for column in std_list:\n        x_std[column] = (x_std[column] - x_std[column].mean()) \/ x_std[column].std() \n    return x_std\n\ndata= standartization(data)\ndata.head()\n","230a0bdc":"# get the correlation of tbetween cardiovascular disease and each risk factor after preprocessing\nplt.figure(figsize=(16, 8))\nsns.heatmap(data.corr(), annot=True, fmt='.3f')","50e389a6":"X = data.iloc[:, :-1]\nX.head()","f0680c27":"y = data.iloc[: ,-1]\ny.head()","4dcc3187":"from sklearn.model_selection import train_test_split\n\nX_train,X_test ,y_train, y_test = train_test_split(X,y,\n                                                   test_size=0.1,\n                                                   random_state=0,\n                                                  shuffle = True,\n                                                  stratify = y)\n\nprint('training data shape is :{}.'.format(X_train.shape))\nprint('training label shape is :{}.'.format(y_train.shape))\nprint('testing data shape is :{}.'.format(X_test.shape))\nprint('testing label shape is :{}.'.format(y_test.shape))\n","125f2b2a":"# dimensionality reduction to consider the most effective factors to the model \nfrom sklearn.decomposition  import PCA\npca =PCA(n_components = 5)# the same number you define as input_dim argument of first layer of ann\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\nexplained_variance= pca.explained_variance_ratio_\nprint(explained_variance)\n","010ff4a7":"\n# ANN model \n\nmodel = Sequential() \n\nmodel.add(Dense(32,  activation = 'relu' ,input_dim = 5))\nmodel.add(Dense(16,  activation = 'relu' ))\nmodel.add(Dense(7 , activation = 'relu' ))\n\nmodel.add(Dense(1  ,activation = 'sigmoid'))\n\nmodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy' ,metrics = ['accuracy'])\n\nnum_epochs = 20\nhistory = model.fit(X_train ,\n                    y_train ,\n                    epochs= num_epochs ,\n                    batch_size = 50,\n                    validation_data=(X_train ,y_train))\n\n# evaluate the model\nloss, acc = model.evaluate(X_test, y_test, verbose=0)\nprint('Test Accuracy: {:3.3f} and loss {:3.3f}'.format(acc ,loss))\n\ndef plot_graphs(history, string):\n    plt.plot(history.history[string])\n    plt.plot(history.history['val_'+string])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(string)\n    plt.legend([string, 'val_'+string])\n    plt.show()\n    \nplot_graphs(history, \"accuracy\")\nplot_graphs(history, \"loss\")","e73021ac":"y_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5) *1\nn = 10\nright = 0\nwrong = 0\nprediction = y_pred.tolist()\nprediction_sample = prediction[:n]\ny_true = [[i] for i in y_test]\ntrue_sample = y_true[:n]\nprint(f'\\n accuracy : {acc}\\n')\nprint(f' Actual values   : {true_sample}')\nprint(f'predicted values : {prediction_sample}\\n')\n\nfor i in range(n):\n\n    if true_sample[i] == prediction_sample[i]:\n        right = right +1\n    else :\n        wrong= wrong + 1\n        \nprint(f'{right} of {n} True Prediction')\nprint(f'{wrong} of {n} False Prediction')","557b96ba":"from sklearn.metrics import confusion_matrix ,ConfusionMatrixDisplay\ncm = confusion_matrix(y_true ,prediction)\ndisp = ConfusionMatrixDisplay(cm , display_labels=None)\ndisp.plot()","ef644dd5":"#save the model \n\n\"\"\"\ntf.keras.models.save_model(\n    model, filepath, overwrite=True, include_optimizer=True, save_format=None,\n    signatures=None, options=None, save_traces=True\n\"\"\"","7bc7ef26":"from sklearn.ensemble import  RandomForestClassifier\nfrom sklearn.model_selection import  GridSearchCV\n\n\nrandom_forest = GridSearchCV(estimator=RandomForestClassifier(),\n                             param_grid={'n_estimators': [100, 300]}, cv=5).fit(X_train, y_train)\n# fit the training data\nrandom_forest.fit(X_train, y_train)\n\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\n\nprint(acc_random_forest,random_forest.best_params_)\n\nacc_test_random_forest = round(random_forest.score(X_test, y_test) * 100, 2)\n\n\n# scores\nprint(f\"Training Score: {acc_random_forest}\")\nprint(f\"Testing Score: {acc_test_random_forest}\")\n\n","f2d8e2fa":"### detect outliers","aa745738":"###  remove the outliers","eba79bea":"### 1 - Artificial Neural Networks (ANN ) model","10f0042c":"## data preparation\n\n### load the data","645a9093":"### get the inter-quartile range ","075bee07":"### reduce the dimensions","252a3d98":"### specify the features ","11a2ba9e":"### 2- Ensemble Method (Rrandom Forest )\n","53bf16f7":"### splitting the data","d951f7a1":"### data standarization\n"}}