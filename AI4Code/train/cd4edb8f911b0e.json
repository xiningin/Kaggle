{"cell_type":{"f3ed5ab2":"code","0817c6f4":"code","994ab452":"code","e95ffa44":"code","86382993":"code","3d03c698":"code","63f5ac9d":"code","37e357f6":"code","739a993a":"code","8b4c82ef":"code","94386cfc":"code","a5b0b34b":"code","2386bc00":"code","dadeb4c2":"code","1abc37e8":"code","823a8492":"code","be549c59":"code","19fc57d5":"code","ecaba5f3":"code","29166e6e":"code","5a76cf88":"code","64a1f20c":"code","375d58af":"code","e8c92095":"code","817f093f":"code","144033b4":"code","6d10267b":"code","72e0a88a":"code","e55bcf7d":"code","23c9a0e6":"code","6930a139":"code","81aada05":"code","1593db47":"code","cd80a078":"code","56dea864":"code","96cf6b12":"code","8bc8873b":"code","17730b00":"code","1f2d0364":"code","b743ca23":"code","8d272bbb":"code","3381b4a5":"code","97b93569":"code","d8f70e0f":"code","178f054e":"code","de7c18b9":"code","8e3a1c12":"code","87164d52":"code","d98a7061":"code","00cd000e":"code","201f35d3":"code","6064623c":"code","26ca6537":"code","896202be":"code","6a47d20d":"code","a52f81ef":"code","3e05a784":"code","e2d1a65e":"code","800f6648":"code","e1900ef6":"code","c5131cfc":"code","7b33c2bf":"code","61bf53e2":"code","bda174ad":"code","3c33c446":"code","66a6577a":"markdown","b5771deb":"markdown","5943cecc":"markdown","9e1cea54":"markdown","86875700":"markdown","d79a08f1":"markdown","004f6f65":"markdown","f7ce3103":"markdown","c2f1e273":"markdown","6e161bd3":"markdown","57c19af6":"markdown","30266031":"markdown","8be16861":"markdown","b212356d":"markdown","f6459d33":"markdown","62413bf3":"markdown","cec881f6":"markdown","b39f4545":"markdown","cae2c6df":"markdown","8b7cb8ea":"markdown","a530194f":"markdown"},"source":{"f3ed5ab2":"import numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport lightgbm as lgb\n\nimport optuna\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import validation_curve\n\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0817c6f4":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv')\nsub = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')","994ab452":"train.shape","e95ffa44":"train.describe()","86382993":"# Checking features and target columns\ndisplay(train.columns)\n# Checking dtypes\ndisplay(train.info())","3d03c698":"features = ['cont1', 'cont2', 'cont3', 'cont4', 'cont5', 'cont6', 'cont7',\n       'cont8', 'cont9', 'cont10', 'cont11', 'cont12', 'cont13', 'cont14']","63f5ac9d":"train_01 = train.sample(frac=0.05, replace=False, random_state=1)","37e357f6":"X = train_01[features]\ny = train_01['target']","739a993a":"def learning_curves(estimator, title, X, y, cv= None, train_sizes=np.linspace(.3, 1.0, 5)):\n    \n    train_sizes, train_scores, validation_scores = \\\n        learning_curve(estimator, \n                       X,\n                       y,\n                       train_sizes = train_sizes,\n                       cv = cv, \n                       scoring = 'neg_mean_squared_error')\n\n    train_scores_mean = np.sqrt(-np.mean(train_scores, axis=1))\n    train_scores_std = np.sqrt(np.std(train_scores, axis=1))\/2\n    validation_scores_mean = np.sqrt(-np.mean(validation_scores, axis=1))\n    validation_scores_std = np.sqrt(np.std(validation_scores, axis=1))\/2\n    \n    plt.figure(figsize=[6.5,4])\n    plt.rcParams[\"font.size\"] = 12\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label = 'Training error')\n    plt.plot(train_sizes, validation_scores_mean, 'o-', color=\"g\",label = 'Validation error')\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, validation_scores_mean - validation_scores_std,\n                     validation_scores_mean + validation_scores_std, alpha=0.1,\n                     color=\"g\")\n    \n    plt.rcParams[\"font.size\"] = 10\n    plt.ylabel('RMSE', fontsize = 14)\n    plt.xlabel('Training set size', fontsize = 14)\n    title = title\n    plt.title(title, fontsize = 18, y = 1.03)\n    plt.legend()\n    plt.ylim(0.575,0.775)","8b4c82ef":"params_xgb = {'lambda': 1,\n 'alpha': 0,\n 'colsample_bytree': 1,\n 'subsample': 1,\n 'learning_rate': 0.05,\n 'max_depth': 6,\n 'min_child_weight': 3,\n 'random_state': 48}","94386cfc":"model_xgb = xgb.XGBRegressor(**params_xgb)","a5b0b34b":"title = 'Learning curve'\nlearning_curves(model_xgb, title, X, y, cv=5)","2386bc00":"def validation_curves(estimator, title, X, y,\n                      cv= None, param_name= None, param_range=None):\n    \n    train_scores, test_scores = \\\n        validation_curve(estimator, \n                         X, \n                         y, \n                         param_name=param_name, \n                         param_range=param_range,\n                         cv = cv,\n                         scoring='neg_mean_squared_error', #'roc_auc'\n                         n_jobs=4)\n    train_scores_mean = np.sqrt(-np.mean(train_scores, axis=1))\n    train_scores_std = np.sqrt(np.std(train_scores, axis=1))\n    test_scores_mean = np.sqrt(-np.mean(test_scores, axis=1))\n    test_scores_std = np.sqrt(np.std(test_scores, axis=1))\n\n    plt.rcParams[\"font.size\"] = 12\n    plt.title(title, fontsize = 20)\n    plt.xlabel(param_name, fontsize =14)\n    plt.ylabel(\"Score\", fontsize = 14)\n    plt.ylim(0.5, 0.9)\n    lw = 2\n    plt.plot(param_range, train_scores_mean, label=\"Training score\",\n             color=\"darkorange\", lw=lw)\n    plt.fill_between(param_range, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.2,\n                     color=\"darkorange\", lw=lw)\n    plt.plot(param_range, test_scores_mean, label=\"Cross-validation score\",\n             color=\"navy\", lw=lw)\n    plt.fill_between(param_range, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.2,\n                     color=\"navy\", lw=lw)\n    plt.rcParams[\"font.size\"] = 10\n    plt.legend(loc=\"best\")\n    plt.show()","dadeb4c2":"param_range = np.linspace(0, 1, 10)\nparam_range","1abc37e8":"param_name = \"alpha\"","823a8492":"title = \"Validation Curves for alpha\"\nvalidation_curves(model_xgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","be549c59":"param_name = \"lambda\"","19fc57d5":"title = \"Validation Curves for lambda\"\nvalidation_curves(model_xgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","ecaba5f3":"param_range = np.linspace(0.1, 1, 10)\nparam_range","29166e6e":"param_name = 'colsample_bytree'","5a76cf88":"title = \"Validation Curves for colsample\"\nvalidation_curves(model_xgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","64a1f20c":"param_name = 'subsample'","375d58af":"title = \"Validation Curves for subsample\"\nvalidation_curves(model_xgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","e8c92095":"param_name = 'n_estimators'","817f093f":"param_range = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]","144033b4":"title = \"Validation Curve for n_estimators\"\nvalidation_curves(model_xgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","6d10267b":"X = train[features]\ny = train['target']","72e0a88a":"def objective(trial,data=X,target=y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.15,random_state=42)\n    param = {\n        'tree_method':'gpu_hist',  # this parameter means using the GPU when training our model to speedup the training process\n        'lambda': trial.suggest_loguniform('lambda', 1e-3, 1),\n        'alpha': trial.suggest_loguniform('alpha', 1e-3, 1),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.1, 0.2, 0.3,0.5,0.7,0.9]),\n        'subsample': trial.suggest_categorical('subsample', [0.1, 0.2,0.3,0.4,0.5,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.0008, 0.01, 0.015, 0.02,0.03, 0.05,0.08,0.1]),\n        'n_estimators': 4000,\n        'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20,23,25]),\n        'random_state': 48,\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 400),\n    }\n    model = xgb.XGBRegressor(**param)  \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","e55bcf7d":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=50)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","23c9a0e6":"study.best_trial.params","6930a139":"Best_params_xgb = {'lambda': 0.001951466677835018,\n 'alpha': 0.7843235982110978,\n 'colsample_bytree': 0.5,\n 'subsample': 0.8,\n 'learning_rate': 0.01,\n 'max_depth': 11,\n 'min_child_weight': 205,\n 'n_estimators': 3000,\n 'random_state': 48,\n 'tree_method':'gpu_hist'}","81aada05":"X = train[features]\ny = train['target']","1593db47":"train_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.15,random_state=42)\nmodel_xgb = xgb.XGBRegressor(**Best_params_xgb)\nmodel_xgb.fit(train_x,train_y,eval_set=[(test_x,test_y)],\n              early_stopping_rounds=100,verbose=False)","cd80a078":"importances = pd.Series(model_xgb.feature_importances_, index = features)\nimportances = importances.sort_values()\nimportances.plot(kind = \"barh\")\nplt.title(\"imporance in the xgboost Model\", fontsize=18)\nplt.show()","56dea864":"preds = model_xgb.predict(test_x)\nrmse = mean_squared_error(test_y, preds,squared=False)\nrmse","96cf6b12":"test_X = test[features]","8bc8873b":"preds = model_xgb.predict(test_X)","17730b00":"sub['target']=preds\nsub.to_csv('submission_xgb.csv', index=False)","1f2d0364":"X = train_01[features]\ny = train_01['target']","b743ca23":"params_lgb = {'num_leaves': 31,\n 'min_data_in_leaf': 20,\n 'min_child_weight': 0.001,\n 'max_depth': -1,\n 'learning_rate': 0.005,\n 'bagging_fraction': 1,\n 'feature_fraction': 1,\n 'lambda_l1': 0,\n 'lambda_l2': 0,\n 'random_state': 48}","8d272bbb":"model_lgb = lgb.LGBMRegressor(**params_lgb)","3381b4a5":"title = 'Learning curve'\nlearning_curves(model_lgb, title, X, y, cv=5)","97b93569":"param_range = np.linspace(0, 1, 10)\nparam_range","d8f70e0f":"param_name = 'lambda_l1'","178f054e":"title = \"Validation Curves for lambda_l1\"\nvalidation_curves(model_lgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","de7c18b9":"param_name = 'lambda_l2'","8e3a1c12":"title = \"Validation Curves for lambda_l2\"\nvalidation_curves(model_lgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","87164d52":"param_name = 'feature_fraction'","d98a7061":"title = \"Validation Curves for feature_fraction\"\nvalidation_curves(model_lgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","00cd000e":"param_name = 'bagging_fraction'","201f35d3":"title = \"Validation Curves for bagging_fraction\"\nvalidation_curves(model_lgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","6064623c":"param_name = 'n_estimators'","26ca6537":"param_range = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]","896202be":"title = \"Validation Curves for n_estimators\"\nvalidation_curves(model_lgb, title, X, y, cv=5, \n                  param_name = param_name, param_range = param_range)","6a47d20d":"X = train[features]\ny = train['target']","a52f81ef":"def objective_lgb(trial,data=X,target=y):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.15,random_state=42)\n    param = {\n        'tree_method':'gpu_hist',  # this parameter means using the GPU when training our model to speedup the training process\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 1),\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-3, 1),\n        'feature_framcion': trial.suggest_categorical('feature_framcion', [0.1, 0.2, 0.3,0.5,0.7,0.9]),\n        'bagging_fraction': trial.suggest_categorical('bagging_framcion', [0.1, 0.2,0.3,0.4,0.5,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.0008, 0.01, 0.015, 0.02,0.03, 0.05,0.08,0.1]),\n        'n_estimators': 4000,\n        'num_leaves': trial.suggest_categorical('num_leaves', [31,50,150,200,250,300,350]),\n        'max_depth': trial.suggest_categorical('max_depth', [5,7,9,11,13,15,17,20,23,25]),\n        'min_data_in_leaf': trial.suggest_categorical('min_data_in_leaf', [10,20,30]),\n        'min_child_weight': trial.suggest_categorical('min_child_weight', [0.001,0.005, 0.01, 0.05, 0.1,0.5]),\n        'random_state': 48\n    }\n    model = lgb.LGBMRegressor(**param)  \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","3e05a784":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective_lgb, n_trials=50)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","e2d1a65e":"study.best_trial.params","800f6648":"Best_params_lgb = {'lambda_l2': 0.013616569506899653,\n 'lambda_l1': 0.006495842188985166,\n 'feature_framcion': 0.3,\n 'bagging_framcion': 0.3,\n 'learning_rate': 0.015,\n 'num_leaves': 200,\n 'max_depth': 25,\n 'min_data_in_leaf': 30,\n 'min_child_weight': 0.001,\n 'n_estimators': 3000,\n 'random_state': 48,\n 'tree_method':'gpu_hist'}","e1900ef6":"train_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.15,random_state=42)\nmodel_lgb = lgb.LGBMRegressor(**Best_params_lgb)\nmodel_lgb.fit(train_x,train_y,eval_set=[(test_x,test_y)],\n              early_stopping_rounds=100,verbose=False)","c5131cfc":"importances = pd.Series(model_lgb.feature_importances_, index = features)\nimportances = importances.sort_values()\nimportances.plot(kind = \"barh\")\nplt.title(\"imporance in the lightGBM Model\", fontsize=18)\nplt.show()","7b33c2bf":"preds = model_lgb.predict(test_x)\nrmse = mean_squared_error(test_y, preds,squared=False)\nrmse","61bf53e2":"test_X = test[features]","bda174ad":"preds = model_lgb.predict(test_X)","3c33c446":"sub['target']=preds\nsub.to_csv('submission_lgb.csv', index=False)","66a6577a":"feature importance","b5771deb":"\u660e\u78ba\u306b\u3069\u3053\u304c\u826f\u3044\u3068\u3044\u3046\u306e\u306f\u7121\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002","5943cecc":"# XGBoost and Learning\/Validation curves","9e1cea54":"## \u691c\u8a3c\u66f2\u7dda\n\u4e0a\u8a18\u3068\u540c\u69d8\u306blambda_l1 (=alpha), lambda_l2, feature_fraction, bagging_fraction, n_estimators\u306b\u3064\u3044\u3066\u691c\u8a3c\u66f2\u7dda\u3092\u63cf\u304d\u307e\u3059\u3002","86875700":"## \u5b66\u7fd2\u66f2\u7dda","d79a08f1":"# LightGBM and Learning\/Validation curves\n\u4e0a\u8a18\u540c\u69d8\u3001\u5b66\u7fd2\u66f2\u7dda\u3068\u691c\u8a3c\u66f2\u7dda\u306e\u4f5c\u6210\u3092\u307e\u305a\u884c\u3044\u307e\u3059\u3002  \n\u6b21\u306bOptuna\u3092\u7528\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3044\u307e\u3059\u3002","004f6f65":"colsample_bytree\u3082Validation\u30bb\u30c3\u30c8\u306b\u304a\u3044\u3066\u306f\u5909\u5316\u304c\u3042\u307e\u308a\u306a\u3055\u305d\u3046\u3067\u3059\u306d\u3002","f7ce3103":"## Optuna\u3092\u5229\u7528\u3057\u305f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u3055\u3066\u3001\u4e0a\u8a18\u306e\u69d8\u306b1\u30641\u3064\u307f\u3066\u3044\u304f\u306e\u3082\u5927\u4e8b\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u660e\u78ba\u306a\u7d50\u8ad6\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u3042\u308b\u7a0b\u5ea6\u81ea\u52d5\u7684\u306b\u6c7a\u3081\u3066\u3057\u307e\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \n\u3053\u3053\u3067\u306fOptuna\u3068\u3044\u3046\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u5229\u7528\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306eNotebook\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002  \nhttps:\/\/www.kaggle.com\/hamzaghanmi\/xgboost-hyperparameter-tuning-using-optuna  \n","c2f1e273":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u2015\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","6e161bd3":"# GBDTs\u306e\u5b66\u7fd2\u30fb\u691c\u8a3c\u66f2\u7dda\u3068Optuna\u3092\u4f7f\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\nKaggle\u5185\u3067\u5b66\u7fd2\u66f2\u7dda\u3084\u691c\u8a3c\u66f2\u7dda\u306b\u3064\u3044\u3066\u306e\u8a18\u8f09\u304c\u5c11\u306a\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u7b97\u51fa\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002\n\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u3089\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002  \n\n\u5b66\u7fd2\u66f2\u7dda\u30fb\u691c\u8a3c\u66f2\u7dda\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u53c2\u7167  \nhttps:\/\/scikit-learn.org\/stable\/modules\/learning_curve.html#validation-curve  \nhttps:\/\/www.dataquest.io\/blog\/learning-curves-machine-learning\/  \n\n\u307e\u305f\u3001XGBoost\u7b49\u306e\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306b\u304a\u3044\u3066\u3001\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6c7a\u3081\u308b\u4fbf\u5229\u306a\u30d1\u30c3\u30b1\u30fc\u30b8Optuna\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3057\u305f\u3002  \n","57c19af6":"## Optuna\u3092\u7528\u3044\u305f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u4e0a\u8a18\u540c\u69d8\u306bOptuna\u306b\u304a\u4efb\u305b\u3057\u307e\u3059\u3002","30266031":"Training\u30bb\u30c3\u30c8\u306b\u304a\u3044\u3066\u306f\u53f3\u80a9\u4e0a\u304c\u308a\u306e\u3001Validation\u30bb\u30c3\u30c8\u306b\u304a\u3044\u3066\u306f\u82e5\u5e72\u53f3\u80a9\u4e0b\u304c\u308a\u306e\u30b0\u30e9\u30d5\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u5178\u578b\u7684\u306a\u5b66\u7fd2\u66f2\u7dda\u306b\u306a\u308a\u307e\u3059\u3002  \n\u3053\u306e\u3088\u3046\u306b\u3001Training\u30bb\u30c3\u30c8\u3067\u306f\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3044\u3068\u304d\u306b\u306f\u591a\u304f\u306e\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u898b\u3064\u304b\u308b\u306e\u3067\u30a8\u30e9\u30fc\u304c\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3067\u3001\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306fTraining\u30bb\u30c3\u30c8\u306b\u306e\u307f\u8abf\u6574\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001Validation\u30bb\u30c3\u30c8\u306b\u304a\u3044\u3066\u306f\u30d5\u30a3\u30c3\u30c8\u304c\u60aa\u304f\u30a8\u30e9\u30fc\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\uff08\u56f3\u306e\u5de6\u5074\uff09\u3002  \n\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u308b\u306b\u3064\u308c\u3066\u3001\u30d5\u30a3\u30c3\u30c8\u304c\u5e73\u5747\u7684\u306b\u306a\u3063\u3066\u3044\u304f\u305f\u3081\u3001Training\u30bb\u30c3\u30c8\u306e\u30d5\u30a3\u30c3\u30c8\u306f\u8abf\u6574\u3055\u308c\u3001\u4e00\u898b\u60aa\u304f\u306a\u308b\u69d8\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u4e00\u65b9\u3067Validation\u30bb\u30c3\u30c8\u3067\u306f\u30d5\u30a3\u30c3\u30c8\u304c\u826f\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002  \n\u30b5\u30a4\u30ba\u3092\u5897\u3084\u3057\u3066\u3082\u4e21\u8005\u304c\u96e2\u308c\u305f\u307e\u307e\u3060\u3068\u904e\u5b66\u7fd2\u304c\u6b8b\u3063\u305f\u72b6\u614b\u3068\u3044\u3048\u307e\u3059\u3002\n\u4eca\u56de\u306e\u56f3\u3092\u898b\u308b\u3068\u3001\u5f90\u3005\u306b\u4e21\u8005\u304c\u8fd1\u3065\u3044\u3066\u3044\u308b\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u3092\u3082\u3063\u3068\u591a\u304f\u3059\u308c\u3070\u3088\u308a\u30d5\u30a3\u30c3\u30c8\u304c\u826f\u304f\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u306e5%\u3057\u304b\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3048\u3070\u3088\u308a\u826f\u3044\u30d5\u30a3\u30c3\u30c8\u304c\u671f\u5f85\u3067\u304d\u308b\u3068\u8a00\u3048\u305d\u3046\u3067\u3059\u3002","8be16861":"feature importance","b212356d":"alpha\u306b\u3064\u3044\u3066\u306f\u6539\u5584\u306e\u4f59\u5730\u304c\u306a\u3055\u305d\u3046\u3067\u3059\u306d\u3002","f6459d33":"### \u4ee5\u4e0b\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067GPU\u4f7f\u7528\u8a2d\u5b9a\u306b\u3057\u3066\u3044\u307e\u3059\u3002\uff08\u305d\u308c\u3067\u3082\u6642\u9593\u304c\u304b\u304b\u308b\uff09\n\u5b66\u7fd2\u66f2\u7dda\u306e\u7d50\u679c\u304b\u3089\u3001\u30c7\u30fc\u30bf\u6570\u304c\u4e0a\u6607\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u904e\u5b66\u7fd2\u304c\u7de9\u548c\u3055\u308c\u3001\u4e88\u6e2c\u6027\u80fd\u304c\u826f\u304f\u306a\u308b\u50be\u5411\u304c\u307f\u3089\u308c\u307e\u3057\u305f\u3002\u3053\u3053\u304b\u3089\u884c\u3046Optuna\u3092\u7528\u3044\u305f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u306f\u300130\u4e07\u30c7\u30fc\u30bf\u5168\u3066\u3092\u7528\u3044\u308b\u4e8b\u306b\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3092\u63d0\u51fa\u3057\u3066\u30b9\u30b3\u30a2\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002  \n\u304b\u306a\u308a\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067GPU\u3092\u4f7f\u7528\u3059\u308b\u8a2d\u5b9a\u306b\u3057\u3066\u304a\u308a\u307e\u3059\u3002","62413bf3":"## \u691c\u8a3c\u66f2\u7dda\uff08Validation curve\uff09\n\u691c\u8a3c\u66f2\u7dda\u3068\u306f\u3001\u6a2a\u8ef8\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\uff08\u4f8b\u3048\u3070\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3042\u308balpha\uff09\u3092\u53d6\u308a\u3001\u7e26\u8ef8\u306bRSME\u306a\u3069\u306e\u6307\u6a19\u3092\u53d6\u308a\u307e\u3059\u3002Training\u30bb\u30c3\u30c8\u3068Validation\u30bb\u30c3\u30c8\u6bce\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u304f\u306e\u306f\u540c\u69d8\u3067\u3059\u3002\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5909\u5316\u3055\u305b\u305f\u3068\u304d\u306bTraining\u30bb\u30c3\u30c8\u3068Validation\u30bb\u30c3\u30c8\u3067\u3069\u306e\u3088\u3046\u306a\u6319\u52d5\u3092\u53d6\u308b\u306e\u304b\u3092\u8996\u899a\u7684\u306b\u898b\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\u6700\u7d42\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u6c7a\u5b9a\u6839\u62e0\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002  \n\u6ce8\u610f\uff1a\u672c\u6765\u3001\u691c\u8a3c\u66f2\u7dda\u306f\u5229\u7528\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\uff0830\u4e07\uff09\u3067\u884c\u3046\u3079\u304d\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u7d50\u679c\u306f\u8a08\u7b97\u901f\u5ea6\u3092\u512a\u5148\u3057\u305f\u305f\u3081\u30015%\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u691c\u8a3c\u66f2\u7dda\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\u53c2\u8003\u5024\u3068\u3057\u3066\u6271\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5f8c\u8ff0\u3059\u308bOptuna\u306e\u3088\u3046\u306a\u534a\u81ea\u52d5\u8a2d\u5b9a\u306e\u5834\u5408\u306b\u306f\u3001\u5b66\u7fd2\u66f2\u7dda\u3084\u691c\u8a3c\u66f2\u7dda\u3092\u78ba\u8a8d\u3059\u308b\u4e8b\u306f\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\uff08\u306a\u306e\u3067Kaggle\u5185\u3067\u306f\u8a18\u8ff0\u304c\u5c11\u306a\u3044\u306e\u304b\u3082\u3068\u601d\u3044\u307e\u3057\u305f\uff09\u3002","cec881f6":"### \u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n","b39f4545":"## \u5b66\u7fd2\u66f2\u7dda\uff08Learning curve\uff09\n\u5b66\u7fd2\u66f2\u7dda\u3068\u306f\u3001\u6a2a\u8ef8\u306b\u30c7\u30fc\u30bf\u6570\u3001\u7e26\u8ef8\u306bRSME\u306a\u3069\u306e\u6307\u6a19\u3092\u53d6\u308a\u3001Training\u30bb\u30c3\u30c8\u3068Validation\u30bb\u30c3\u30c8\u3068\u3067\u5225\u3005\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u904e\u5b66\u7fd2\u3084\u672a\u5b66\u7fd2\u306e\u691c\u8a0e\u306b\u304a\u3051\u308b\u8996\u899a\u7684\u30c4\u30fc\u30eb\u3068\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u73fe\u30e2\u30c7\u30eb\u306b\u304a\u3044\u3066\u3001\u3053\u308c\u4ee5\u4e0a\u30b5\u30f3\u30d7\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u4fa1\u5024\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u3042\u308b\u7a0b\u5ea6\u691c\u8a0e\u3067\u304d\u308b\u306e\u3067\u3001\u30c7\u30fc\u30bf\u53ce\u96c6\u7d99\u7d9a\u306b\u95a2\u3057\u3066\u6709\u7528\u306a\u793a\u5506\u3092\u63d0\u4f9b\u3067\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4ee5\u4e0b\u306eUPL\u53c2\u7167\u3067\u3059\u3002  \nhttps:\/\/scikit-learn.org\/stable\/modules\/learning_curve.html#validation-curve  \nhttps:\/\/www.dataquest.io\/blog\/learning-curves-machine-learning\/","cae2c6df":"lambda\u3082\u6539\u5584\u306e\u4f59\u5730\u304c\u306a\u3055\u305d\u3046\u3067\u3059\u3002","8b7cb8ea":"### \u3053\u306e\u8a18\u4e8b\u304c\u304a\u5f79\u306b\u7acb\u3063\u305f\u306a\u3089\u3070\u5e78\u3044\u3067\u3059\uff01\n\u3088\u308d\u3057\u3051\u308c\u3070\u30a4\u30a4\u306d\u3000(\u30fb\u2200\u30fb)\uff72\uff72\uff88!!\u3000\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002","a530194f":"# \u6ce8\u610f\n\u672c\u8a18\u4e8b\u306f\u3001\u3069\u3061\u3089\u304b\u3068\u3044\u3046\u3068\u5b66\u7fd2\u66f2\u7dda\u3084\u691c\u8a3c\u66f2\u7dda\u306e\u4f5c\u6210\u306e\u305f\u3081\u306b\u66f8\u3044\u3066\u304a\u308a\u307e\u3059\u3002\u534a\u5206\u306f\u81ea\u5206\u306e\u5fd8\u5099\u9332\u3067\u3059\u3002  \n\u5b66\u7fd2\u66f2\u7dda\u3084\u691c\u8a3c\u66f2\u7dda\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u5168\u30c7\u30fc\u30bf\uff0830\u4e07\uff09\u3067\u306f\u306a\u304f\u30015%\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u304a\u308a\u307e\u3059\u3002\u3082\u3057\u30d5\u30eb\u3067\u884c\u3044\u305f\u3044\u4eba\u306f\u30e9\u30f3\u30c0\u30e0\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u306a\u3044\u3067\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002"}}