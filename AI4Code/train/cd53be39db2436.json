{"cell_type":{"73a7d23d":"code","555a1e8f":"code","3dbd597d":"code","1f37b437":"code","c19e0313":"code","e707d346":"code","2db87783":"code","4737d7fe":"code","a776d65c":"code","e67735bd":"code","0c51a4cf":"code","0f7cff75":"code","61d06cef":"code","6132eb38":"code","0af638d6":"code","dd671105":"code","8702ea77":"code","9b0eef8a":"code","a3234240":"code","af7d7bf1":"code","253aaab3":"code","72766413":"code","5570af4c":"code","8ba9865a":"code","5d143d1f":"code","11e17ab7":"code","2e7ec505":"code","1b980670":"code","8cf5bcd4":"code","f1b123db":"code","df493d5f":"code","b307137f":"code","9e433976":"code","39a2118d":"code","1c94c10d":"code","e0486c96":"code","66431c72":"code","4b4de33f":"code","c98c76c2":"code","2ee2ca72":"code","c53fab18":"code","9a2179af":"code","644d7c76":"code","6c33e8eb":"code","d320bd38":"code","689b34f1":"code","e1115a02":"code","6d4d1a33":"code","d5971ef9":"code","2c7148c6":"code","b0744dd4":"code","f528b396":"code","39c38dbc":"code","8a213ae4":"code","dd87db5f":"code","9a2a3d0c":"code","bf5ddca1":"code","dc34c2aa":"code","ae228eb9":"code","e2c29059":"code","491260e5":"code","9efda14e":"code","1c746ded":"code","7f972f11":"code","cb0065e3":"code","a58a09f7":"code","0b728373":"markdown","eaebf7d9":"markdown","1a188c33":"markdown","4b1dca20":"markdown","2cee6ecf":"markdown","e4784ec0":"markdown","2d462b51":"markdown","e9a684e3":"markdown","11951ae0":"markdown","f45ac1d1":"markdown","6d04b94a":"markdown"},"source":{"73a7d23d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","555a1e8f":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom shapely.geometry import  Point\nimport geopandas as gpd\nimport geoplot as gplt","3dbd597d":"# \uc5ec\ub7ec output \ucd9c\ub825\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","1f37b437":"train = pd.read_csv('\/kaggle\/input\/sf-crime\/train.csv.zip')\ntrain.head()","c19e0313":"test = pd.read_csv('\/kaggle\/input\/sf-crime\/test.csv.zip')\ntest.head()\n# train\uc5d0\uc11c Category, Descript, Resolution \ubcc0\uc218\uac00 \uc5c6\uc74c.","e707d346":"sub = pd.read_csv('\/kaggle\/input\/sf-crime\/sampleSubmission.csv.zip')\nsub.head()\n# class 39\uac1c","2db87783":"train.shape","4737d7fe":"test.shape","a776d65c":"sub.shape","e67735bd":"train.info() #.dtypes","0c51a4cf":"train[\"Dates\"] = pd.to_datetime(train[\"Dates\"])\ntrain[\"YEAR\"] = train[\"Dates\"].dt.year\ntrain[\"MONTH\"] = train[\"Dates\"].dt.month\ntrain[\"DAY\"] = train[\"Dates\"].dt.day\ntrain[\"HOUR\"] = train[\"Dates\"].dt.hour\n\ntest[\"Dates\"] = pd.to_datetime(test[\"Dates\"])\ntest[\"YEAR\"] = test[\"Dates\"].dt.year\ntest[\"MONTH\"] = test[\"Dates\"].dt.month\ntest[\"DAY\"] = test[\"Dates\"].dt.day\ntest[\"HOUR\"] = test[\"Dates\"].dt.hour","0f7cff75":"train.info()\n#train.dtypes\n# \ubcc0\uc218 \ud0c0\uc785\uc774 object\uc778 \uac83\uc740  \uc218\uce58\/\ubc94\uc8fc\ud615\uc73c\ub85c \ubcc0\uacbd","61d06cef":"train = train.astype({'Category' : 'category', \n                      'DayOfWeek' : 'string', \n                      'PdDistrict': 'string',\n                      'Resolution' : 'string',\n                      'Address' : 'string'})\ntrain.dtypes","6132eb38":"test = test.astype({'DayOfWeek' : 'string', \n                    'PdDistrict': 'string',\n                    'Address' : 'string'})\ntest.dtypes","0af638d6":"# target variable\nimport matplotlib.pyplot as plt\n# import seaborn as sns\n\nTARGET = train['Category']\nDF_ = TARGET.value_counts()\nlen_x = np.arange(len(DF_))\n\nplt.figure(figsize = (20, 12))\nplt.bar(len_x, DF_)\nplt.title(\"distribution of target variable(categorical)\")\nplt.ylabel('count')\nplt.xlabel('Category')\nplt.xticks(range(0, len(DF_.index)), DF_.index, rotation = \"vertical\")\n\n# TRIAN_SUM_BY_CATE = train.groupby('Category')\n# TRIAN_SUM_BY_CATE.count()\n# plt.bar(3, DF_)","dd671105":"DF_.values\nDF_","8702ea77":"train.isnull().sum()","9b0eef8a":"aa = train.groupby('Category').count().iloc[:, 0].sort_values(ascending = False) # same as DF_\naa","a3234240":"# aa.index\n# np.delete(aa.index, 1) # 'OTHER OFFENSES'\ub97c \uc81c\uac70.\n\n# np.append(np.delete(aa.index, 1), 'OTHER OFFENSES') # \ub05d\uc5d0 OTHER OFFENSES\ub97c \ubd99\uc784.\n# aa.reindex(np.append(np.delete(aa.index, 1), 'OTHER OFFENSES')) # \ub2e4\uc2dc \uc7ac\uc815\ub82c\ud55c index\ub85c aa\ub97c \ub2e4\uc2dc \uc815\ub82c. (\ud544\uc694\uc5c6\ub294 OTHER OFFENSES\ub97c \uc81c\uc77c \ub05d\uc5d0 \ubc30\uce58\ud558\uae30 \uc704\ud568\uc778 \ub4ef.)","af7d7bf1":"aa = train.groupby('Address').count().iloc[:, 0].sort_values(ascending = False) # same as DF_\n","253aaab3":"aa.head(50)","72766413":"np.delete(np.array([[1, 2, 3],[4, 5, 6]]), 2)\n\n# np.delete(1array, 1) : 1\ucc28\uc6d0 array\uc5d0\uc11c \ub450 \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uc81c\uac70 : 2\ucc28\uc6d0 array\ub97c \ub123\uc73c\uba74 1\ucc28\uc6d0 array\ub85c \ucd9c\ub825\ub428.\n# \ubc18\uba74, np.delete(2array, 1,axis = 0 or 1) : 2\ucc28\uc6d0 array\uc5d0\uc11c axis = 0\uc774\uba74 \ub450 \ubc88\uc9f8 \ud589\uc744 \uc81c\uac70, axis = 1\uc774\uba74 \ub450 \ubc88\uc9f8 \uc5f4\uc744 \uc81c\uac70","5570af4c":"# \uc704\ub3c4 \uacbd\ub3c4 plot\n# plt.figure(figsize = (20, 12))\n# plt.scatter(train['X'], train['Y'])","8ba9865a":"# \uc704\ub3c4\uacbd\ub3c4 outlier \ucc3e\uae30\ntrain.describe()","5d143d1f":"# train2 : outlier \uc81c\uac70\ud55c train set\nnon_outlier_index = train[train['Y'] != 90].index # \uc704\ub3c4,\uacbd\ub3c4\uac00 \ubd81\uadf9\ud574\uc778 \uac83\ub4e4.\n\ntrain2 = train.iloc[non_outlier_index, :]","11e17ab7":"train['PdDistrict'].value_counts()","2e7ec505":"# plt.figure(figsize = (20, 12))\n# # plt.scatter(train2['X'], train2['Y'], c = train2['X'])\n\n# sns.scatterplot(x = 'X', y = 'Y', data = train2, hue = 'PdDistrict')","1b980670":"# plt.figure(figsize = (20, 12))\n# sns.scatterplot(x = 'X', y = 'Y', data = train2,\n#                hue = 'Resolution')\n# \uc8fc\ud669\uc0c9 NONE\uc774 \ub9ce\uc74c.","8cf5bcd4":"train2['Resolution'].value_counts()","f1b123db":"resolution_not_none_index = train2[train2['Resolution'] != 'NONE'].index","df493d5f":"len(resolution_not_none_index)\nresolution_not_none_index","b307137f":"# none\uacfc \uadf8\ub807\uc9c0 \uc54a\uc740 \uac83\uc744 \ub530\ub85c \uadf8\ub9bc.\n# train2_tmp = train2.loc[resolution_not_none_index,:]\n\n# plt.figure(figsize = (20, 12))\n# sns.scatterplot(x = 'X', y = 'Y', data = train2_tmp,\n#                hue = 'Resolution')","9e433976":"# plt.figure(figsize = (20, 12))\n# g = sns.FacetGrid(train2_tmp, row = \"Resolution\", hue = \"PdDistrict\")\n# g.map(sns.scatterplot, 'X', 'Y')","39a2118d":"train.info()","1c94c10d":"train['Date'] = train.Dates.dt.date","e0486c96":"# pandas Series, DataFrame \ud074\ub798\uc2a4 \ud655\uc778\ud558\uae30. (\uc5b4\ub5bb\uac8c \ucd9c\ub825\ub418\ub294\uc9c0.)\n\na = pd.Series([1,2,3])\nb = {\"name\" : [\"min\", \"ho\"],\n     \"year\" : [2014, 2020]}\nbb = pd.DataFrame(b)\na\nbb\ntype(a)\ntype(bb)","66431c72":"train_x.info()","4b4de33f":"train_y.head()","c98c76c2":"# train_x.loc[:,'Address'].unique()\n# test_x.loc[:,'Address'].unique()\n\n# a = train_x.loc[:,'Address'].unique()\n# b = test_x.loc[:,'Address'].unique()\n\n# len(list(set(a).difference(b))) # A-B\n# len(list(set(b).difference(a))) # B-A\n\n# # train\uacfc test\uc5d0 Address\uac00 \uacb9\uce58\uc9c0 \uc54a\ub294 \uac83\uc774 \ub9ce\ub2e4. (train\uc5d0 \uc788\ub294\ub370 test\uc5d0 \uc5c6\ub294 Address. \ubc18\ub300\ub3c4 \ub9c8\ucc2c\uac00\uc9c0.)\n","2ee2ca72":"type(train_x['DayOfWeek'])\ntype(np.arange(12))","c53fab18":"# train_x[col].values.reshape(-1,1) \/\/\/ reshape\uc740 Series\uc5d0\ub294 \uc548\uba39\uc74c.\n# .reshape(-1,1) : 1\uc5f4\ub85c \ub9cc\ub4e4\uace0 \uc2f6\uc74c. \ubcc0\uacbd\ub41c \ubc30\uc5f4\uc758 '-1'\uc704\uce58\uc758 \ucc28\uc6d0\uc740 \uc6d0\ub798 \ubc30\uc5f4\uc758 \uae38\uc774\uc640 \ub0a8\uc740 \ucc28\uc6d0\uc73c\ub85c\ubd80\ud130 \ucd94\uc815.","9a2179af":"train_x = train2[['DayOfWeek', 'PdDistrict',  \n                 'X', 'Y', 'YEAR', 'MONTH', 'DAY', 'HOUR']]\ntrain_y = train2[['Category']]\n\ntest_x = test[['DayOfWeek', 'PdDistrict', \n                 'X', 'Y', 'YEAR', 'MONTH', 'DAY', 'HOUR']]\n\n\ntype(train_x)\ntrain_x.head()","644d7c76":"from sklearn import preprocessing\ncate_col = ['DayOfWeek', 'PdDistrict']\ncol = ['DayOfWeek']\n\n# 1. LabelEncoder\nfor col in cate_col:\n    le = preprocessing.LabelEncoder()\n    train_x.loc[:,col] = le.fit_transform(train_x.loc[:,col])\n    test_x.loc[:,col] = le.transform(test_x.loc[:,col])\n\n    \n    \n# 2. OneHotEncoder\ncol = 'DayOfWeek'\n\ntmp_tr = pd.DataFrame(train_x.loc[ 0:2000, col ].copy())\ntmp_ts = pd.DataFrame(train_x.loc[ 0:2000, col ].copy())\n\noh = preprocessing.OneHotEncoder()\n# oh.fit(tmp_tr)\ntr_oh = oh.fit_transform(tmp_tr).toarray()\nts_oh = oh.transform(tmp_ts).toarray()\n\n\ntr_oh2 = pd.DataFrame(tr_oh, columns = oh.get_feature_names())\n\ntmp_tr\ntr_oh2\n[tmp_tr,tr_oh2]\npd.concat([tmp_tr,tr_oh2], axis = 1)\npd.concat([tmp_tr,tr_oh2], axis = 1).drop([col], axis = 1)","6c33e8eb":"# one hot encoder \uc774 \ucf54\ub4dc \ubc29\uc2dd\uc73c\ub85c \uc885\uacb0.\ndata_dic = {'label' : ['Apple', 'Samsung', 'LG', 'Samsung']}\ndf = pd.DataFrame(data_dic)\n\noh = preprocessing.OneHotEncoder()\ndf_oh = oh.fit_transform(df)\ndf_oh2 = oh.fit_transform(df).toarray()\ndf_oh3 = oh.fit_transform(df.to_numpy().reshape(-1,1))\n\ndf\ndf.to_numpy()\ndf.to_numpy().reshape(-1,1)\ndf.to_numpy().reshape(-1,2)\nprint(df_oh)\nprint(df_oh2)\n\none_df = pd.DataFrame(df_oh2, columns = oh.get_feature_names())\ndata = pd.concat([df,one_df], axis = 1).drop(['label'], axis = 1)\n\none_df\ndata","d320bd38":"tr_oh.shape\nts_oh.shape\ntmp_tr\nprint(tr_oh)\ntmp_ts\nprint(ts_oh)","689b34f1":"pd.DataFrame(['A', 'B', 'A', 'C'])\ntmp_tr\ntmp_ts\n\ntr_oh.toarray()\nts_oh\nts_oh.shape","e1115a02":"col = ['DayOfWeek']\ntrain_x.loc[:,col]\ntype(train_x.loc[:,col])\n\n\ntmp = oh.fit_transform(train_x.loc[:,col].values.reshape(-1,1)).toarray()\ntype(tmp)","6d4d1a33":"train_x","d5971ef9":"tmp = train_x.copy()\ntmp.head()\n\ntmp_dum = pd.get_dummies(tmp, columns = cate_col)\ntmp_dum.head(10)","2c7148c6":"train_x.dtypes","b0744dd4":"train_x.head()","f528b396":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nclf = RandomForestClassifier(n_estimators = 20, \n                             max_depth = 5, random_state = 0)\nrf1 = clf.fit(train_x, train_y)\npredictions_rf1 = rf1.predict_proba(test_x)","39c38dbc":"predictions_rf1","8a213ae4":"predictions_rf1.shape","dd87db5f":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(n_estimators = 10, random_state = 0)\ncat.fit(train_x, train_y)\npredictions_cat1 = cat.predict_proba(test_x)","9a2a3d0c":"predictions_cat1.shape","bf5ddca1":"# np.linspace(0, 38, 39, dtype='int16')\n\nsub_length = le.inverse_transform(np.linspace(0, 38, 39, dtype='int16'))\nsub_length","dc34c2aa":"sub.head()","ae228eb9":"sub.iloc[:,1:]","e2c29059":"len(predictions_rf1[0])","491260e5":"sub.iloc[:,1:] = predictions_rf1 # iloc[1] : substracting 2nd row \/ iloc[1,2] : approaching one element.\n# .iloc[:, 1:]\ub294 \uccab \uc5f4\uc744 \uc81c\uc678\ud55c sub table.\nsub.head()","9efda14e":"# .iloc[position] \n# .loc[label]\n\n# https:\/\/kongdols-room.tistory.com\/112","1c746ded":"sub.to_csv('sub1.csv', index = False)","7f972f11":"len(predictions_cat1[0])","cb0065e3":"sub.iloc[:,1:] = predictions_cat1\nsub.head()","a58a09f7":"sub.to_csv('sub2.csv', index = False)","0b728373":"**2-2 X variables**","eaebf7d9":"**data split**","1a188c33":"# **3-2 catboost**","4b1dca20":"**3-1 rf sub**","2cee6ecf":"**3-2 cat sub**","e4784ec0":"# **4. submission**","2d462b51":"https:\/\/www.kaggle.com\/yannisp\/sf-crime-analysis-prediction","e9a684e3":"# **1. DATA LOAD**","11951ae0":"# **2. DATA EDA**","f45ac1d1":"**2-1 target variable**","6d04b94a":"# **3-1 randomforest**"}}