{"cell_type":{"a009b860":"code","3785d713":"code","7b6dc850":"code","ebabe0c7":"code","5a6ca678":"code","bb585f46":"code","683ef005":"code","1d5bc689":"code","fdb7440b":"code","1bf45551":"code","d5a5cc9c":"code","47ceded8":"code","a78e4d00":"code","109baba2":"code","893732be":"code","0e96be07":"code","59e0dc7b":"code","50282696":"code","35f48af1":"code","95c9142d":"code","f94faef3":"code","c707322c":"code","af2463db":"code","5a76ea4e":"code","2b91392d":"code","b09edfc0":"code","5fe4cc40":"code","7b84a243":"code","dd9f17dd":"code","02dc2d33":"code","edd154bc":"code","0111fb90":"code","42a81cec":"code","4a0eeef4":"code","82587525":"code","4b524d77":"code","2c00ca9a":"code","9b483560":"code","24a3066f":"code","80212fd3":"code","2a5b7e5e":"code","fb45014b":"code","797600e6":"code","60f0ddb3":"code","6f04a138":"code","ed3b3a80":"code","84cef333":"code","4ac89989":"code","f5a6c14a":"code","cb1b6865":"code","aa999bb0":"code","6ac19a3e":"code","41619227":"code","a97b6238":"code","23d9c574":"code","7d1b02d0":"code","9ff35098":"code","d18508c4":"code","6d0c3250":"code","22031284":"code","180f37f2":"code","e59c6d34":"code","55638f34":"code","185f5cdb":"code","8e728c56":"code","6267221d":"code","3fde614b":"code","eeeb4b7c":"code","fd2ef691":"code","a3d1250e":"code","3df6feca":"code","15592c1f":"code","830c1511":"code","e6845b02":"code","ee1345fd":"code","009c1fe4":"code","5ebcf282":"code","62f691c0":"code","0a9f2045":"code","ad640e76":"code","7f550927":"code","0f478649":"code","a0a9e999":"code","e2552387":"code","f52a6fdb":"code","138ffe66":"markdown","1d91893c":"markdown","e6d9bc89":"markdown","3c170932":"markdown","8194c4f6":"markdown","2d694d09":"markdown","25e9c909":"markdown","b84a28fb":"markdown","dcda4ae8":"markdown","7eac7c02":"markdown","0e49d7a6":"markdown","2d2fe2a6":"markdown","c0bb2663":"markdown","45a566e6":"markdown","9d64ef5f":"markdown","2fcd8efe":"markdown","01d650d6":"markdown","0915b3cf":"markdown","a1bd8895":"markdown","7e41a8de":"markdown","8fe31df8":"markdown","313c08f3":"markdown","f0c4eba4":"markdown","f2b97543":"markdown","7021cfd7":"markdown","7b3cbc77":"markdown","bbea9bab":"markdown","3a03ba8e":"markdown","6591ae9d":"markdown","9b57dc54":"markdown","0550370d":"markdown","9d4e4b16":"markdown","858b545e":"markdown","f2019ff3":"markdown","cf64b133":"markdown","69594905":"markdown","09e5ed98":"markdown","551e2400":"markdown","d0beddba":"markdown","5c83ed20":"markdown","4ea853f5":"markdown","51f5de1a":"markdown","6962726c":"markdown","4c8280f2":"markdown","c3657f40":"markdown","94e15748":"markdown","d1e12b08":"markdown","6ff5cd03":"markdown"},"source":{"a009b860":"##import necessary packages \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","3785d713":"import warnings\nimport itertools\nwarnings.filterwarnings(action='ignore')\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pylab import rcParams\nimport statsmodels.api as sm","7b6dc850":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ebabe0c7":"#uploading the data\nsales_data=pd.read_excel('..\/input\/superstore\/Sample - Superstore.xlsx')\nsales_data.head()","5a6ca678":"sales_data.tail() ## viewing last 4 records","bb585f46":"sales_data.shape # viewing the shape of the data","683ef005":"sales_data.info() # viewing the types of each feature in the dataset","1d5bc689":"sales_data.describe() # getting some basic overview","fdb7440b":"sales_data.columns #All Columns ","1bf45551":"sales_data.isnull().sum()","d5a5cc9c":"sales_data=sales_data.dropna(axis=0) # since only 11 records (that too of continuous variable) were missing so it is efficient to use dropna here.","47ceded8":"sales_data.isnull().sum()","a78e4d00":"sales_data.shape #new shape","109baba2":"corrmat=sales_data.corr()\ntop_corr=corrmat.index\nplt.figure(figsize=(15,15))\n#plot the heatmap\ng=sns.heatmap(sales_data[top_corr].corr(),annot=True,cmap='RdYlGn')","893732be":"sales_data.drop(['Row ID','Ship Date','Ship Mode','Customer ID','Postal Code','Order ID','Profit','Discount'],axis=1,inplace=True) ","0e96be07":"## Downloading this pre-processed data into train1.csv\nsales_data.to_csv('train1.csv')","59e0dc7b":"print(sales_data.shape)\nsales_data.head() #new shape","50282696":"## Determining the categories in the Country column of the dataframe\nsales_data['Country'].unique()","35f48af1":"## Determining the number of States in US\nstates=sales_data['State'].unique()\nnp.count_nonzero(states)","95c9142d":"## Determining the number of Cities in US\ncities=sales_data['City'].unique()\nnp.count_nonzero(cities)","f94faef3":"## the top 20 cities with high sales\ntop_cities= sales_data['City'].value_counts().nlargest(20)\ntop_cities","c707322c":"#Most frequent customers\ntop_customers= sales_data['Customer Name'].value_counts().nlargest(20)\ntop_customers","af2463db":"rslt_df = sales_data[sales_data['Customer Name'] == 'William Brown'] \nrslt_df.head()","5a76ea4e":"# determining the unique values of category column.\ncategory=sales_data['Category'].unique()\nprint(category)\nprint(np.count_nonzero(category))","2b91392d":"plt.rcParams['figure.figsize'] = (10, 8)\nsns.barplot(x = sales_data['Category'], y = sales_data['Sales'], palette ='dark')\nplt.title('The Distribution of Sales in each Category', fontsize = 10)\nplt.xlabel('Category', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","b09edfc0":"# determining the total count of sub-categories\/ products in the Supermarket Store\nsubcategory=sales_data['Sub-Category'].unique()\nprint(subcategory)\nprint(np.count_nonzero(subcategory))\n#There are 17 products\/ sub-categories.","5fe4cc40":"# visualizing sub-category wise distribution of sales\nplt.rcParams['figure.figsize'] = (19, 8)\nsns.barplot(x = sales_data['Sub-Category'], y = sales_data['Sales'], palette ='dark')\nplt.title('The Distribution of Sales in each Sub-Category', fontsize = 30)\nplt.xlabel('Sub-Category', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)","7b84a243":"#top 5 products highly in demand\ntop_products= sales_data['Sub-Category'].value_counts().nlargest(5)\ntop_products","dd9f17dd":"# determining segments of customers\nsegment=sales_data['Segment'].unique()\nprint(segment)\nprint(np.count_nonzero(segment))","02dc2d33":"# visualizing Segment wise distribution of sales\nplt.rcParams['figure.figsize'] = (19, 8)\nsns.barplot(x = sales_data['Segment'], y = sales_data['Sales'], palette ='dark')\nplt.title('The Distribution of Sales in each Segment', fontsize = 30)\nplt.xlabel('Segment', fontsize = 15)\nplt.ylabel('Count', fontsize = 15)\n","edd154bc":"#visualizing state-wise sales distribution\nsales_data.groupby(['State'])['Sales'].nunique().plot.bar(figsize = (19, 7), cmap= 'rainbow')\nplt.gcf().autofmt_xdate()\nplt.title('Comparing statewise sales frequency', fontsize = 30)\nplt.xlabel('States in US', fontsize = 10)\nplt.ylabel('Sales Frequency')\nplt.show()\n","0111fb90":"#top 10 states with high sales\ntop_states= sales_data['State'].value_counts().nlargest(10)\ntop_states","42a81cec":"print(sales_data['State'].max()) # california is with high frequency sales whereas Wyoming has the overall maximum sale price.","4a0eeef4":"plt.rcParams['figure.figsize'] = (15, 8)\nsns.distplot(sales_data['Sales'], color = 'red')\nplt.title('The Distribution of Sales', fontsize = 30)\nplt.xlabel('Range of Sales', fontsize = 15)\nplt.ylabel('No. of Sales count', fontsize = 15)\nplt.show()","82587525":"sales_data['Order Date'] = pd.to_datetime(sales_data['Order Date'], errors = 'coerce') # it was already datetime object before, not a necessary step","4b524d77":"#extracting Year out of the Date to do year-wise analysis\nsales_data['Year'] = sales_data['Order Date'].dt.year","2c00ca9a":"#extracting month out of the Date to do month-wise analysis\nsales_data['Month'] = sales_data['Order Date'].dt.month","9b483560":"#extracting Day out of the Date to do daywise analysis\nsales_data['Date'] = sales_data['Order Date'].dt.day","24a3066f":"sales_data.columns","80212fd3":"# separating dependent and independent featurea\nX=sales_data.copy()\nX.drop(['Sales'],axis=1,inplace=True)\nX.head() # independent features","2a5b7e5e":"y=sales_data.iloc[:,11] # target as well as dependent feature\ny.head()","fb45014b":"## visualizing through boxplot\nplt.rcParams['figure.figsize'] = (19, 8)\nsns.boxplot(x = sales_data['Year'], y = sales_data['Sales'], palette ='dark')\nplt.title('The Distribution of Sales in each Year', fontsize = 30)\nplt.xlabel('Year', fontsize = 15)\nplt.ylabel('Sales Price', fontsize = 15)\n","797600e6":"year_max=sales_data[sales_data['Sales'] == 22638.480000] \nyear_max","60f0ddb3":"# visualizing month-wise sales distribution\nplt.rcParams['figure.figsize'] = (19, 8)\nsns.barplot(x = sales_data['Month'], y = sales_data['Sales'], palette ='pastel')\nplt.title('The Distribution of Sales in each month', fontsize = 30)\nplt.xlabel('Months', fontsize = 15)\nplt.ylabel('Sales', fontsize = 15)","6f04a138":"#visualizing daywise sales distribution\nplt.rcParams['figure.figsize'] = (19, 8)\nsns.barplot(x = sales_data['Date'], y = sales_data['Sales'], palette ='colorblind')\nplt.title('The Distribution of Sales in each day', fontsize = 30)\nplt.xlabel('Days', fontsize = 15)\nplt.ylabel('Sales', fontsize = 15)","ed3b3a80":"# extracting them in separate dataframe\nfeatures=['Order Date','Sales']\nsalesplot=sales_data[features]\nsalesplot.head()\n","84cef333":"salesplot.sort_values(by='Order Date',inplace=True)\nsalesplot","4ac89989":"Order_date=salesplot['Order Date']\nSales=salesplot['Sales']","f5a6c14a":"##Simple Scatter Plot\nplt.plot_date(Order_date,Sales,xdate=True)\nplt.gcf().autofmt_xdate()\nplt.title('Sales Data')\nplt.xlabel('Order Date')\nplt.ylabel('Sales')","cb1b6865":"##interactive visualization using plotly\nimport plotly.express as px\n\nfig = px.line(salesplot, x=Order_date, y=Sales, title='Time Series with Rangeslider')\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","aa999bb0":"# loading the pre-processed data that we prepared in the EDA notebook- train1.csv\ndf1=pd.read_csv('train1.csv')\ndf1.head()","6ac19a3e":"df1.shape","41619227":"## for sales forecasting we only need Order Date and Sales coulmn of the train1.csv\nfeatures=['Order Date','Sales']\ndfs=df1[features]\ndfs.head()","a97b6238":"dfs.shape","23d9c574":"dfs.info()","7d1b02d0":"dfs.tail()","9ff35098":"#converting into datetime type\ndfs['Order Date'] = pd.to_datetime(dfs['Order Date'], errors = 'coerce')\ndfs.info()","d18508c4":"#setting index\ndfs=dfs.groupby('Order Date')['Sales'].sum().reset_index()","6d0c3250":"dfs","22031284":"dfs=dfs.set_index('Order Date')\ndfs.index","180f37f2":"#using start of each month as timestamp\ny=dfs['Sales'].resample('MS').mean()","e59c6d34":"y['2015':]","55638f34":"#visualising Sales Time Series Data\ny.plot(figsize=(15,6))\nplt.show()","185f5cdb":"rcParams['figure.figsize']=19,9","8e728c56":"decomp=sm.tsa.seasonal_decompose(y,model='additive')\nfig=decomp.plot()\nplt.show()","6267221d":"p=d=q=range(0,2)\npdq=list(itertools.product(p,d,q))\nseas_pdq=[(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]","3fde614b":"print('Some of the parameter combinations for Seasonal ARIMA:-')\nprint('SARIMAX: {} x {}'.format(pdq[1], seas_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seas_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seas_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seas_pdq[4]))","eeeb4b7c":"#using grid search to find the optimal set of parameters that yields the best performance for our model\n#parameter selection for our model\nfor param in pdq:\n    for param_seasonal in seas_pdq:\n        try:\n            mod=sm.tsa.statespace.SARIMAX(y,order=param, seasonal_order=param_seasonal, enforce_stationarity=False, enforce_invertibility=False)\n            results=mod.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param,param_seasonal,results.aic))\n        except:\n            continue","fd2ef691":"mod=sm.tsa.statespace.SARIMAX(y,order=(0,1,1),seasonal_order=(0,1,1,12), enforce_stationarity=False, enforce_invertibility=False)\nresults=mod.fit()\nprint(results.summary().tables[1])","a3d1250e":"results.plot_diagnostics(figsize=(16, 8))\nplt.show()","3df6feca":"pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = y['2014':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Product Sales')\nplt.legend()\nplt.show()\n","15592c1f":"y_forecasted = pred.predicted_mean\ny_truth = y['2017-01-01':]","830c1511":"# mse\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","e6845b02":"# rmse\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))","ee1345fd":"## This shows forecasts for next few years\npred_uc1 = results.get_forecast(steps=100)\npred_ci1 = pred_uc1.conf_int()\nax = y.plot(label='observed', figsize=(14, 7))\npred_uc1.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci1.index,\n                pred_ci1.iloc[:, 0],\n                pred_ci1.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","009c1fe4":"## This shows the forecasts for next 7 days\npred_uc = results.get_forecast(steps=7)\npred_ci = pred_uc.conf_int()\nax = y.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Product Sales')\nplt.title('Weekly sales forecast', fontsize=12)\nplt.legend()\nplt.show()","5ebcf282":"predicted_sale= pred_ci1[:7]","62f691c0":"predicted_sale","0a9f2045":"predicted_sale.to_csv('weeklyoutput_forecast.csv')","ad640e76":"y_truth.head()","7f550927":"y_forecasted.head()","0f478649":"output = pd.concat([y_truth, y_forecasted], axis=1)","a0a9e999":"output.head()","e2552387":"s1=pd.Series(output['Sales'],name='Confirmed Sales')\ns2=pd.Series(output[0],name='Forecasted Sales')\ndf_output = pd.concat([s1, s2], axis=1)\ndf_output","f52a6fdb":"df_output.to_csv('forecast_comparison_output2.csv')","138ffe66":"## Data Pre-Processing\n###### Handling missing values","1d91893c":"## Model Validation","e6d9bc89":"#### New York has the highest Sales all over the US","3c170932":"#### The above statistics suggests that our model residuals are approximately normally distributed.","8194c4f6":"#### The Sales distribution throughout the month keeps varying; It is observed that it is mostly highest in the mid of the month.","2d694d09":"#### Slide the above slider towards right or left to zoom in or zoom out the graph to view specific dates. Also at the top right corner hover the cursor to explore more options. You can also hover over the graph to view the SALES PRICE on specific date.","25e9c909":"### The Order Dates are not in sorted order, therefore sorting the dataframe according to date","b84a28fb":"## Calculating MSE and RMSE of our model","dcda4ae8":"#### Home Office has relatively higher sales","7eac7c02":"### Q. Who are the most frequent customers?","0e49d7a6":"##### This Exploratory Data Analysis of Supermarket Store data actually hepled in making some reasonable insights out of the data.","2d2fe2a6":"# Sales Forecasting- \n#### Time Series Forecasting using ARIMA","c0bb2663":"### Category-wise Sales analysis","45a566e6":"#### Correlation and heatmap","9d64ef5f":"### Q. What are the top products with high sales?","2fcd8efe":"### Q. Which days of the month yield higher sales?","01d650d6":"###### Analysis questions:-\n* which state of US has higher frequency of sales?\n* in which year we had max sales?\n* in which month we have max sales?\n* which days of the month yield higher sales?\n* what are the top 10 states with high sales?\n* what are the top 20 cities with high sales?\n* top products highly in demand?\n* Most frequent customers?","0915b3cf":"#### There are 3 segments of customers found- Consumer, Corporate and Home Office","a1bd8895":"#### Since the X-axis won't show all the dates, it is better to use some Interactive Graph plot- like Rangeslider","7e41a8de":"### Visualizing forecasts","8fe31df8":"### Building the confirmed and predicted Sales table from which we calculated MSE and RMSE\n### Y_truth and Y_forecasted table","313c08f3":"## Time Series Analysis of Sales and Order Date","f0c4eba4":"#### This is the final output table for next 7 days forecasted sales, and it shows that there will be moderate rise in the sales rate in next 7 days.","f2b97543":"### Visualizing the Sales Prices as per the Order Date in Detail using Plotly","7021cfd7":"#### The first graph is the OBSERVED one which is the plot we saw in the previous cell output. Second one, shows the trend of the sales data which grow from low to higher across 3 years. Seasonality and Residual plot shows that the sales are quite unstable and need to be scaled for further forecasting.","7b3cbc77":"#### The above output suggests that `ARIMA(0, 1, 1)x(0, 1, 1, 12)12` yields the lowest `AIC` value of 325.7254110963737\n","bbea9bab":"#### Segment-wise Distribution of Sales","3a03ba8e":"### Q. Which months of the year yield highest sale price?","6591ae9d":"## Final Table of 7 days Sales forecast","9b57dc54":"## Time Series Forecasting with ARIMA","0550370d":"#### There are 3 Categories of products in the SuperMarket- Furniture, Office Supplies and Technology\n#### Visualizing the distribution of Sales in each Category","9d4e4b16":"#### William Brown is the most frequent customer here. Let's explore more about William Brown!!","858b545e":"#### Removing noise data- the features which are not needed for sales analysis.","f2019ff3":"### The above plot compares the observed versus predicted forecasts in the grey area, and its comes out to be quite approximate.","cf64b133":"###### Analysis from heatmap:- Profit, Discount have least correlation.","69594905":"## Fitting the ARIMA model","09e5ed98":"### Q. What are top 10 states with high sales?","551e2400":"#### Highest sales were found to be in the month of March.\n#### Maximum products were sold in the year beginning and end of the year; whereas the sales were consistent during mid of the year.","d0beddba":"# EDA on Superstore Sales Data","5c83ed20":"### In 2015 we had our highest Sale Price for segment Home Office","4ea853f5":"### The pattern shows that overall sales goes down around beginning of the year. Also the growth rate of sale has eventually risen from 2015 to 2019. Sales were at peak near the end of 2018.\n\n#### Visualizing the Trends as well as seasonality in the time series data","51f5de1a":"#### We found that the records are entirely of United States.","6962726c":"### Q. which year had max sales?\n","4c8280f2":"### The mse and Rmse comes out to be not so good because here we are analyzing overall sales and not product category-wise. But from the overall analysis and validation, the model is working quite good.","c3657f40":"#### Overall sales distribution","94e15748":"##### Maximum sales is achieved in Technology category, and least in Office Supplies!","d1e12b08":"# Data Analysis","6ff5cd03":"### Q. What are the top 20 cities in US with high sales count"}}