{"cell_type":{"9f31d584":"code","827baf31":"code","58ae34dd":"code","1c24041f":"code","8d8d56b3":"code","91efc1be":"code","b6a27a35":"code","979092aa":"code","565c14d3":"code","a58280a5":"code","f2a199be":"code","7d0a6ff8":"code","ec9cf625":"code","1a4acc81":"code","27a8ff4c":"code","72db09f7":"code","0954d2d9":"code","3195b0cf":"code","e85b7fb2":"code","df4a4044":"code","8656bc6a":"code","8b66222e":"code","d2e7aac7":"code","5d22e291":"code","6f833663":"code","42059979":"code","b88606b7":"code","26dbea8e":"code","fec36f43":"code","9cf85eba":"code","c9d40d48":"code","22735c34":"code","ea78296a":"code","fde45142":"code","aa2661a0":"code","e943a66f":"code","8827003e":"code","9c924bc9":"code","699590b1":"code","ba6f8d86":"code","3cd6d74c":"code","f8e1b132":"code","85ffa1cd":"code","8f373627":"code","51744d04":"code","6103d076":"code","c44c5566":"code","a55a677e":"code","3570ac28":"code","741f8b82":"code","10316cf0":"code","d1599f61":"code","4071229c":"code","a3b2cdd3":"code","7f93ed3d":"code","0f765996":"code","718529aa":"code","bb3495a0":"code","144a3a5a":"code","34577a2d":"code","bc57809f":"code","2fee9e76":"code","53f5c5ac":"code","17ea5a32":"code","73788e54":"code","501249ce":"code","e30e0a5f":"code","1087ca84":"code","e58ada44":"code","10b797b1":"code","d5df5d4d":"code","c29c874d":"code","a6486a6e":"code","3cc17cc8":"code","faa4f538":"code","3d969d7e":"code","09ab675b":"code","29c4a9fc":"markdown","8e77858f":"markdown","ea003fd2":"markdown","a5c4ee12":"markdown","60cb5d2c":"markdown","1b4a3094":"markdown","2144e105":"markdown","dfcff653":"markdown","8c87a618":"markdown"},"source":{"9f31d584":"from pandas import Series,DataFrame\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nimport statistics\nfrom scipy import stats","827baf31":"from sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,mean_squared_error\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV","58ae34dd":"from statsmodels.formula.api import ols\nfrom sklearn.preprocessing import StandardScaler","1c24041f":"df=pd.read_csv(\"ahs-mort-odisha-sundargarh.csv\")","8d8d56b3":"df1=df[[\"rural\",\"stratum_code\",\"deceased_sex\",\n    \"age_of_death_above_one_year\",\"treatment_source\",\"place_of_death\",\"month_of_death\",\"year_of_death\",\"member_identity\",\n    \"social_group_code\",\"marital_status\",\"year_of_marriage\",\"highest_qualification\",\"occupation_status\",\"disability_status\",\n    \"chew\",\"smoke\",\"alcohol\",\"house_structure\",\"drinking_water_source\",\"household_have_electricity\",\"lighting_source\",\n    \"cooking_fuel\",\"no_of_dwelling_rooms\"]]","91efc1be":"df1[\"year_of_death\"].unique()","b6a27a35":"#df1.to_csv(\"anual_health_survey.csv\")\ndf1.head(2)","979092aa":"def cat(cl):\n    c=pd.get_dummies(df1[cl]).columns\n    n=(len(df1[cl].values))\n    ar=np.zeros(n)\n    for i in np.arange(len(c)):\n        for j in np.arange(n):\n            if c[i]==df1[cl][j]:\n                ar[j]=i\n    return(ar)","565c14d3":"def replacer_mean(dff):\n    dff1=dff\n    r0=np.mean(dff)\n    r1=r0.index\n    r2=r0.values\n    for i in np.arange(len(r1)):\n          ri=r1[i]\n          rv=r2[i]\n          dff1[ri].fillna(value=rv)\n          dff1[ri]=(nan_remover(dff[ri].values,rv))\n    return(dff1)\ndef nan_remover(v,vm):\n    vr=[]\n    for i in np.arange(len(v)):\n        if str(v[i])==\"nan\":\n            vr=np.append(vr,vm)\n        else:\n            vr=np.append(vr,v[i])\n    return(vr)\ndef numriser(a):\n    a1=[]\n    for i in np.arange(len(a)):\n        a1=np.append(a1,round(a[i]))\n    return(a1)\n\ndef substi(ar,s):\n    n=len(ar)\n    sum1=0\n    for i in np.arange(n):\n        j=ar[i]\n        df_c1[\"interval\"][j]=s\n        #sum1=sum1+ar[i]\n    return(df_c1)\ndef inret(y,m):\n    return(np.where((df_c1[\"year_of_death\"]==y) & (df_c1[\"month_of_death\"]==m))[0])","a58280a5":"(cat(\"rural\"))","f2a199be":"df1.columns","7d0a6ff8":"df1[\"cooking_fuel\"][0:1]","ec9cf625":"txt=[\"rural\",\"stratum_code\",\"deceased_sex\",\"treatment_source\",\"place_of_death\",\"social_group_code\",\"marital_status\",\n       \"highest_qualification\",\"occupation_status\",\"disability_status\", \"chew\",\"smoke\",\"alcohol\",\"house_structure\",\"drinking_water_source\",\n    \"household_have_electricity\",\"lighting_source\",\"cooking_fuel\"]","1a4acc81":"for j in (txt):\n    df1[j]=cat(j)","27a8ff4c":"r0=(np.mean(df1))\nr1=r0.index\nr2=r0.values\ndf2=df1\ndf1=replacer_mean(df2)","72db09f7":"y=df1[\"age_of_death_above_one_year\"].values\ndf1=df1.drop([\"age_of_death_above_one_year\",\"year_of_death\",\"month_of_death\"],axis=1)","0954d2d9":"for i in np.arange(len(df1.columns)):\n    sc=StandardScaler()\n    cl=df1.columns[i]\n    sc.fit(df1[cl].values.reshape(-1,1))\n    df2[cl]=sc.transform(df2[cl].values.reshape(-1,1))","3195b0cf":"x=df1.values","e85b7fb2":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=42)","df4a4044":"model_le=xgb.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bynode=1, colsample_bytree=.2, gamma=0.2,\n       importance_type='gain', learning_rate=0.3, max_delta_step=0,\n       max_depth=15, min_child_weight=3, missing=None, n_estimators=100,\n       n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=None, subsample=1, verbosity=1)\nmodel_le.fit(x_train,y_train)","8656bc6a":"y_pre=model_le.predict(x_train)","8b66222e":"accuracy_score(numriser(y_pre),numriser(y_train))","d2e7aac7":"y_pre1=model_le.predict(x_test)\naccuracy_score(numriser(y_pre1),numriser(y_test))","5d22e291":"df_pre=DataFrame([y_pre1,y_test],index=[\"predicted\",\"observed\"]).T\ndf_pre[\"predicted\"].plot(kind=\"kde\",label=True,figsize=(15,5),alpha=1)\ndf_pre[\"observed\"].plot(kind=\"kde\",label=True,figsize=(15,5),alpha=1)\nplt.title(\"predicted label of happiness\",fontsize=20)\nplt.xlabel(\"labels of happiness \",fontsize=20)\nplt.ylabel(\"frequency\",fontsize=20)\nplt.legend([\"predicted\",\"observed\"])","6f833663":"df_pre[\"predicted\"][1:100].plot(figsize=(20,5))\ndf_pre[\"observed\"][1:100].plot(figsize=(20,5))\nplt.title(\"predicted age and observerd age classification\",fontsize=20)\nplt.xlabel(\"people \",fontsize=20)\nplt.ylabel(\"age\",fontsize=20)\nplt.legend([\"predicted\",\"observed\"])","42059979":"(mean_squared_error(y_pre1,y_test))","b88606b7":"df_c=df2[[\"month_of_death\",\"year_of_death\",\"age_of_death_above_one_year\"]]","26dbea8e":"df_c[\"interval\"]=np.zeros(len(df_c[\"month_of_death\"]))","fec36f43":"df_c.head(2)","9cf85eba":"mon=np.unique(df_c[\"month_of_death\"])\nyear=np.unique(df_c[\"year_of_death\"])","c9d40d48":"df_c1=df_c","22735c34":"s1=1\nfor i in year:\n    for j in mon[1:]:\n        indx=inret(i,j)\n        df_c=substi(indx,s1)\n        s1=s1+1\n        #print(s1)","ea78296a":"sum1=[]\nfor i in np.arange(len(df_c[\"interval\"])):\n    if df_c[\"interval\"][i]==0:\n        sum1=np.append(sum1,i)","fde45142":"df_c=df_c.drop(sum1)","aa2661a0":"d=[]\nfor i in np.arange(1,len(np.unique(df_c[\"interval\"]))+1):\n                d=np.append(d,sum(pd.get_dummies(df_c[\"interval\"])[i]))","e943a66f":"s=len(df_c[\"interval\"].values)\ns","8827003e":"s=len(df_c[\"interval\"].values)\ncs=[s]\nfor i in np.arange(1,49):\n    cs1=s-d[i-1]\n    cs=np.append(cs,cs1)\n    s=cs1","9c924bc9":"clt=DataFrame([np.arange(1,49),cs,d],index=[\"age interval\",\"cum_sum\",\"deaths\"]).T","699590b1":"qt=clt[\"deaths\"]\/clt[\"cum_sum\"]\npt=(np.ones(len(qt))-qt)","ba6f8d86":"clt[\"qt\"]=qt\nclt[\"pt\"]=pt","3cd6d74c":"clt[\"Pt\"]=np.ones(len(qt))","f8e1b132":"for i in np.arange(0,47):\n    clt[\"Pt\"][i+1]=(clt[\"pt\"][i]*clt[\"Pt\"][i])","85ffa1cd":"clt=clt.drop(48)","8f373627":"clt[\"Pt\"].plot(figsize=(12,5))\nplt.title(\"survival_rate\",fontsize=20)\nplt.xlabel(\"months \",fontsize=20)\nplt.ylabel(\"prob_of_remission\",fontsize=20)\nplt.legend([\"survival_odisha\"])","51744d04":"df_p=pd.read_csv(\"ahs-mort-bihar-patna.csv\")","6103d076":"df_cb=df_p[[\"month_of_death\",\"year_of_death\",\"age_of_death_above_one_year\"]]","c44c5566":"r0=(np.mean(df1))\nr1=r0.index\nr2=r0.values\ndf2=df_cb\ndf_cb=replacer_mean(df2)","a55a677e":"mon1=np.unique(df_cb[\"month_of_death\"])\nyear1=np.unique(df_cb[\"year_of_death\"])","3570ac28":"def substi_b(ar,s):\n    n=len(ar)\n    sum1=0\n    for i in np.arange(n):\n        j=ar[i]\n        df_cb1[\"interval\"][j]=s\n        #sum1=sum1+ar[i]\n    return(df_c1)\ndef inret_b(y,m):\n    return(np.where((df_cb1[\"year_of_death\"]==y) & (df_cb1[\"month_of_death\"]==m))[0])","741f8b82":"df_cb[\"interval\"]=np.zeros(len(df_cb[\"month_of_death\"]))\n\nmon1=np.unique(df_cb[\"month_of_death\"])\nyear1=np.unique(df_cb[\"year_of_death\"])\n\ndf_cb1=df_cb\n\ns1=1\nfor i in year:\n    for j in mon[1:]:\n        indx=inret_b(i,j)\n        df_cb=substi_b(indx,s1)\n        s1=s1+1","10316cf0":"sum1=[]\nfor i in np.arange(len(df_c1[\"interval\"])):\n    if df_cb1[\"interval\"][i]==0:\n        sum1=np.append(sum1,i)","d1599f61":"df_cb1=df_cb1.drop(sum1)","4071229c":"d=[]\nfor i in np.arange(1,len(np.unique(df_cb1[\"interval\"]))):\n                d=np.append(d,sum(pd.get_dummies(df_cb1[\"interval\"])[i]))\ns=len(df_cb1[\"interval\"].values)\ncs=[s]\nfor i in np.arange(1,49):\n    cs1=s-d[i-1]\n    cs=np.append(cs,cs1)\n    s=cs1\n\nclt_b=DataFrame([np.arange(1,49),cs,d],index=[\"age interval\",\"cum_sum\",\"deaths\"]).T\n\nqt_b=clt_b[\"deaths\"]\/clt_b[\"cum_sum\"]\npt_b=(np.ones(len(qt_b))-qt_b)\n\nclt_b[\"qt\"]=qt_b\nclt_b[\"pt\"]=pt_b\n\nclt_b[\"Pt\"]=np.ones(len(qt_b))\n\nfor i in np.arange(0,47):\n    clt_b[\"Pt\"][i+1]=(clt_b[\"pt\"][i]*clt_b[\"Pt\"][i])\n\nclt_b=clt_b.drop(48)\n\nclt_b[\"Pt\"].plot(figsize=(12,5))\nclt[\"Pt\"].plot(figsize=(12,5))\nplt.title(\"survival_rate\",fontsize=20)\nplt.xlabel(\"months \",fontsize=20)\nplt.ylabel(\"prob._of_remission\",fontsize=20)\nplt.legend([\"survival_Bihar(patna)\",\"survival_odisha(sundargadh)\"])","a3b2cdd3":"clt_ob=clt_b\nclt_ob[\"o\"]=clt[\"Pt\"].values\nclt_ob.head(2)","7f93ed3d":"#univariate_analysis","0f765996":"df1.columns","718529aa":"df1[\"no_of_dwelling_rooms\"].plot(kind=\"hist\",figsize=(9,5),color=\"red\")","bb3495a0":"g=[sum(pd.get_dummies(df[\"smoke\"])[\"Ex - Smoker\"]),sum(pd.get_dummies(df[\"smoke\"])[\"Never smoked\"]),sum(pd.get_dummies(df[\"smoke\"])[\"Not known\"]),\n                                          sum(pd.get_dummies(df[\"smoke\"])[\"Occasional smoker\"]),\n                                          sum(pd.get_dummies(df[\"smoke\"])[\"Usual smoker\"])]\nlabels=[\"EX_smokers\",\"Never smoked\",\"not known\",\"Occasional smoker\",\"Occasional smoker\"]\npie=plt.pie(g,radius=1.5,shadow=True,autopct='%1.1f%%')\nplt.legend(pie[0], labels, loc=\"best\")","144a3a5a":"df1[\"chew\"].plot(kind=\"hist\",figsize=(9,5),color=\"brown\")","34577a2d":"df_anova=(pd.get_dummies(df[\"chew\"]))","bc57809f":"#anova","2fee9e76":"import statsmodels.api as sm\nfrom statsmodels.formula.api import ol","53f5c5ac":"from statsmodels.formula.api import ols","17ea5a32":"df2.columns","73788e54":"lm=ols(\" age_of_death_above_one_year ~ chew\",data=df).fit()","501249ce":"table=sm.stats.anova_lm(lm)","e30e0a5f":"print(table)","1087ca84":"lm=ols(\" age_of_death_above_one_year ~ smoke\",data=df).fit()\ntable=sm.stats.anova_lm(lm)\nprint(table)","e58ada44":"lm=ols(\" age_of_death_above_one_year ~ cooking_fuel\",data=df).fit()\ntable=sm.stats.anova_lm(lm)\nprint(table)","10b797b1":"lm=ols(\" age_of_death_above_one_year ~ alcohol\",data=df).fit()\ntable=sm.stats.anova_lm(lm)\nprint(table)","d5df5d4d":"lm=ols(\" age_of_death_above_one_year ~ social_group_code\",data=df).fit()\ntable=sm.stats.anova_lm(lm)\nprint(table)","c29c874d":"#df1[\"smoke\"]\ndf2=df1","a6486a6e":"ty=np.unique(df2[\"smoke\"])\n","3cc17cc8":"ty=np.unique(df2[\"smoke\"])\nex_smoker=[]\nnever_smoke=[]\nnot_known=[]\nocc_smoker=[]\nusual_smoker=[]\nfor j in np.arange(len(df1[\"smoke\"])):\n    if int(ty[0])==int(df2[\"smoke\"][j]):\n        ex_smoker=np.append(ex_smoker,y[j])\n    if int(ty[1])==int(df2[\"smoke\"][j]):\n        never_smoke=np.append(never_smoke,y[j])\n    if int(ty[2])==int(df2[\"smoke\"][j]):\n        not_known=np.append(not_known,y[j])\n    if int(ty[3])==int(df2[\"smoke\"][j]):\n        occ_smoker=np.append(occ_smoker,y[j])\n    if int(ty[4])==int(df2[\"smoke\"][j]):\n        usual_smoker=np.append(usual_smoker,y[j])","faa4f538":"stats.ttest_ind(usual_smoker,never_smoke,equal_var=False)","3d969d7e":"[np.mean(usual_smoker),np.mean(never_smoke)]","09ab675b":"stats.ttest_ind(ex_smoker,occ_smoker,equal_var=False)","29c4a9fc":"# EDA","8e77858f":"# importing_data","ea003fd2":"model_le=xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bynode=1, colsample_bytree=1, gamma=0, learning_rate=0.2,\n       max_delta_step=0, max_depth=15, min_child_weight=3, missing=None,\n       n_estimators=100, n_jobs=1, nthread=None,\n       objective='multi:softprob', random_state=0, reg_alpha=0,\n       reg_lambda=1, scale_pos_weight=1, seed=None, silent=None,\n       subsample=1, verbosity=1)\nmodel_le.fit(x_train,y_train)","a5c4ee12":"# data pre_processing","60cb5d2c":"so smoking effects the life expectency of human significantly\n#on an average it reduces the life time to two years","1b4a3094":"r1=[]\nfor i in np.arange(len(df1[\"rural\"].values)):\n    if df1[\"rural\"][i]==\"Rural\":\n        r1=np.append(r1,0)\n    else:\n        r1=np.append(r1,1)\nr2=[]\nfor i in np.arange(len(df1[\"rural\"].values)):\n    if df1[\"stratum_code\"][i]==\"200<population<2000\":\n        r2=np.append(r2,0)\n    elif df1[\"stratum_code\"][i]==\"population>=2000\":\n        r2=np.append(r2,2)\n    else:\n        r2=np.append(r2,1)\nr3=[]\nfor i in np.arange(len(df1[\"rural\"].values)):\n    if df1[\"deceased_sex\"][i]==\"Male\":\n        r3=np.append(r3,1)\n    else:\n        r3=np.append(r3,0)\nr4=[]\nfor i in np.arange(len(df1[\"treatment_source\"].values)):\n    if (df1[\"treatment_source\"][i]==\"At Home\") or (df1[\"treatment_source\"][i]==\"No Medical attention\") or (df1[\"treatment_source\"][i]==\"Others\"):\n        r4=np.append(r4,0)\n    elif (df1[\"treatment_source\"][i][0:9]==\"Governmen\") or (df1[\"treatment_source\"][i][0:9]==\"NGO or Trust Hosp\/Clinic\"):\n        r4=np.append(r4,1)\n    else:\n        r4=np.append(r4,2)\nr5=[]\nfor i in np.arange(len(df1[\"treatment_source\"].values)):\n    if (df1[\"treatment_source\"][i]==\"At home\"):\n        r5=np.append(r5,0)\n    elif (df1[\"treatment_source\"][i][0:9]==\"In health facility\"):\n        r5=np.append(r5,2)\n    elif (df1[\"treatment_source\"][i][0:9]==\"In-transit\"):\n        r5=np.append(r5,1)\n    else:\n        r5=np.append(r5,3)\nr6=[]\nfor i in np.arange(len(df1[\"social_group_code\"].values)):\n    if (df1[\"social_group_code\"][i]==\"SC\"):\n        r6=np.append(r6,0)\n    elif (df1[\"treatment_source\"][i]==\"ST\"):\n        r6=np.append(r6,1)\n    else:\n        r6=np.append(r6,2)\nr7=[]\nfor i in np.arange(len(df1[\"marital_status\"].values)):\n    if (df1[\"marital_status\"][i]==\"Divorced\"):\n        r7=np.append(r7,0)\n    elif (df1[\"marital_status\"][i]==\"Married and Gauna performed\") or (df1[\"marital_status\"][i]==\"Married but Gauna not performed\" ):\n        r7=np.append(r7,1)\n    elif (df1[\"marital_status\"][i]==\"Never married\"):\n        r7=np.append(r7,2)\n    elif (df1[\"marital_status\"][i]==\"Not stated\"):\n        r7=np.append(r7,3)\n    elif (df1[\"marital_status\"][i]==\"Remarried\"):\n        r7=np.append(r7,4)\n    elif (df1[\"marital_status\"][i]==\"Separated\"):\n        r7=np.append(r7,5)\n    else:\n        r7=np.append(r7,6)\nr8=[]\nfor i in np.arange(len(df1[\"rural\"].values)):\n    if (df1[\"highest_qualification\"][i]==\"Illiterate\") or (df1[\"highest_qualification\"][i]==\"Literate With formal education-Below primary\") or (df1[\"highest_qualification\"][i]==\"Literate Without formal education\"):\n        r8=np.append(r8,0)\n    else:\n        r8=np.append(r8,1)\nr9=[]\nfor i in np.arange(len(df1[\"rural\"].values)):\n    if (df1[\"occupation_status\"][i]==\"Agricultural Wage labourer\") or (df1[\"occupation_status\"][i]==\"Cultivator\") or (df1[\"occupation_status\"][i]==\"Attending routine domestic chores etc.\"):\n        r9=np.append(r9,0)\n    elif  (df1[\"occupation_status\"][i]==\"Too old to work\") or (df1[\"occupation_status\"][i]==\"Not able to work due to disability\"):\n        r9=np.append(r9,1)\n    else:\n        r9=np.append(r9,2)\nr10=[]\nfor i in np.arange(len(df1[\"rural\"].values)):\n    if (df1[\"disability_status\"][i]==\"Hearing\"):\n        r10=np.append(r10,1)\n    elif (df1[\"disability_status\"][i]==\"Locomotor\"):\n        r10=np.append(r10,2)\n    elif (df1[\"disability_status\"][i]==\"Mental\"):\n        r10=np.append(r10,3)\n    elif (df1[\"disability_status\"][i]==\"No Disability\"):\n        r10=np.append(r10,0)\n    elif (df1[\"disability_status\"][i]==\"Speech\"):\n        r10=np.append(r10,1)\n    else:\n        r10=np.append(r10,4)","2144e105":"# model_fitting","dfcff653":"# clinical_life_table","8c87a618":"# importing_libraries"}}