{"cell_type":{"2f77ac7a":"code","5eb42e3f":"code","5f9c4c83":"code","9b44b295":"code","ab793b3e":"code","956caea4":"code","5be92007":"code","d723c6a8":"code","5036fa0d":"code","36d07e11":"code","e2486572":"code","e49d477d":"code","786e8c73":"code","d12cc9fe":"code","f78b99dc":"code","31ac44e5":"code","563436c8":"code","301cbf17":"code","0d6681e1":"code","8ae9dbe9":"code","2a19b693":"markdown","e18a73b9":"markdown","0b381ce5":"markdown","b289080d":"markdown","d18e2823":"markdown","8af3f80d":"markdown","b40c8768":"markdown","ace75997":"markdown"},"source":{"2f77ac7a":"import pickle\nimport pandas as pd\nimport numpy as np\nimport os, sys, gc \nfrom plotnine import *\nimport plotnine\n\nfrom tqdm import tqdm_notebook\nimport seaborn as sns\nimport warnings\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nimport matplotlib as mpl\nfrom matplotlib import rc\nimport re\nfrom matplotlib.ticker import PercentFormatter\nimport datetime\nfrom math import log # IDF \uacc4\uc0b0\uc744 \uc704\ud574","5eb42e3f":"path = \"..\/input\/t-academy-recommendation\/\"","5f9c4c83":"# pd.read_json : json \ud615\ud0dc\uc758 \ud30c\uc77c\uc744 dataframe \ud615\ud0dc\ub85c \ubd88\ub7ec\uc624\ub294 \ucf54\ub4dc \nmagazine = pd.read_json(path + 'magazine.json', lines=True) # lines = True : Read the file as a json object per line.\nmetadata = pd.read_json(path + 'metadata.json', lines=True)\nusers = pd.read_json(path + 'users.json', lines=True)","9b44b295":"%%time \nimport itertools\nfrom itertools import chain\nimport glob\nimport os \n\ndef chainer(s):\n    return list(itertools.chain.from_iterable(s))\n\nread_rowwise = pd.read_csv(path + \"read_rowwise.csv\")","ab793b3e":"from datetime import datetime \n\nmetadata['reg_datetime'] = metadata['reg_ts'].apply(lambda x : datetime.fromtimestamp(x\/1000.0))\nmetadata.loc[metadata['reg_datetime'] == metadata['reg_datetime'].min(), 'reg_datetime'] = datetime(2090, 12, 31)\nmetadata['reg_dt'] = metadata['reg_datetime'].dt.date\nmetadata['type'] = metadata['magazine_id'].apply(lambda x : '\uac1c\uc778' if x == 0.0 else '\ub9e4\uac70\uc9c4')\nmetadata['reg_dt'] = pd.to_datetime(metadata['reg_dt'])","956caea4":"# 2019\ub144\ub3c4 \uc774\ud6c4\ub85c \uc791\uc131\ub41c \uae00\uc911\uc5d0\uc11c \uc0c1\uc704 100\uac74\uc758 \uae00\uc744 \ucd94\ucc9c \n# \ub2e8, \uc774\ubbf8 \uc77d\uc740 \uae00\uc758 \uacbd\uc6b0\ub294 \ucd94\ucc9c\uc5d0\uc11c \uc81c\uc678 \nread_rowwise = read_rowwise.merge(metadata[['id', 'reg_dt']], how='left', left_on='article_id', right_on='id')","5be92007":"read_rowwise.head()","d723c6a8":"# \uc0ac\uc6a9\uc790\uac00 \uc77d\uc740 \uae00\uc758 \ubaa9\ub85d\ub4e4\uc744 \uc800\uc7a5 \nread_total = pd.DataFrame(read_rowwise.groupby(['user_id'])['article_id'].unique()).reset_index()\nread_total.columns = ['user_id', 'article_list']","5036fa0d":"# 1. article_id\uac00 \uacb0\uce21\uce58\uc778 \uacbd\uc6b0\ub294 \uc0ad\uc81c (\uc791\uac00\uac00 \uc0ac\ub77c\uc9c4 \uacbd\uc6b0)\n# 2. reg_dt\uac00 \uacb0\uce21\uce58\uc778 \uacbd\uc6b0\ub294 \uc0ad\uc81c (\uba54\ud0c0\ub370\uc774\ud130\uc5d0 \uc790\ub8cc\uac00 \uc5c6\ub294 \uacbd\uc6b0)\nread_rowwise = read_rowwise[read_rowwise['article_id'] != '']\nread_rowwise = read_rowwise[(read_rowwise['id'].notnull()) & (read_rowwise['reg_dt'].notnull())]\nread_rowwise = read_rowwise[(read_rowwise['reg_dt'] >= '2019-01-01') & (read_rowwise['reg_dt'] < '2090-12-31')].reset_index(drop=True)\n\ndel read_rowwise['id']","36d07e11":"valid = pd.read_csv(path + '\/predict\/dev.users', header=None)","e2486572":"%%time \n\npopular_rec_model = read_rowwise['article_id'].value_counts().index[0:1000]\nwith open('recommend.txt', 'w') as f:\n    for user in tqdm_notebook(valid[0].values):\n        # \ucd94\ucc9c \ud6c4\ubcf4 \n        seen = chainer(read_total[read_total['user_id'] == user]['article_list'].values)\n        recs = []\n        for r in popular_rec_model:\n            if len(recs) == 100: \n                break \n            else: \n                if r not in seen: recs.append(r)\n        f.write('%s %s\\n' % (user, ' '.join(recs)))","e49d477d":"following_cnt_by_user = users['following_list'].map(len)\nfollowing_rowwise = pd.DataFrame({'user_id': np.repeat(users['id'], following_cnt_by_user),\n                             'author_id': chainer(users['following_list'])})\n\nfollowing_rowwise.reset_index(drop=True, inplace=True)","786e8c73":"following_rowwise = following_rowwise[following_rowwise['user_id'].isin(valid[0].values)]\nfollowing_rowwise.head()","d12cc9fe":"%%time \nmetadata_ = metadata[['user_id', 'id', 'reg_dt']]\nmetadata_.columns = ['author_id', 'article_id', 'reg_dt']\nfollowing_popular_model = pd.merge(following_rowwise, metadata_, how='left', on='author_id')","f78b99dc":"%%time \nread_rowwise['author_id'] = read_rowwise['article_id'].apply(lambda x: x.split('_')[0])\nauthor_favor = read_rowwise.groupby(['user_id', 'author_id'])['author_id'].agg({'count'}).reset_index()","31ac44e5":"popular_model = pd.DataFrame(read_rowwise['article_id'].value_counts()).reset_index()\npopular_model.columns = ['article_id', 'count']","563436c8":"following_popular_model = pd.merge(following_popular_model, author_favor, how='left', on=['user_id', 'author_id'])\nfollowing_popular_model = following_popular_model[following_popular_model['count'].notnull()].reset_index(drop=True)\nfollowing_popular_model = pd.merge(following_popular_model, popular_model, how='left', on='article_id')\nfollowing_popular_model.head()","301cbf17":"following_popular_model = following_popular_model.sort_values(by=['count_x', 'count_y', 'reg_dt'], ascending=[False, False, False])","0d6681e1":"following_popular_model[following_popular_model['user_id'] == '#a6f7a5ff90a19ec4d583f0db1836844d'].head()","8ae9dbe9":"%%time \n\nwith open('.\/recommend.txt', 'w') as f:\n    for user in tqdm_notebook(valid[0].values):\n        # \ucd94\ucc9c \ud6c4\ubcf4 \n        seen = chainer(read_total[read_total['user_id'] == user]['article_list'].values)\n        following_rec_model = following_popular_model[following_popular_model['user_id'] == user]['article_id'].values\n        recs = []\n        for r in following_rec_model:\n            if len(recs) == 100:\n                break \n            else: \n                if r not in seen + recs: recs.append(r)\n        \n        if len(recs) < 100: \n            for r in popular_rec_model:\n                if len(recs) == 100: \n                    break \n                else: \n                    if r not in seen + recs: recs.append(r)            \n        f.write('%s %s\\n' % (user, ' '.join(recs)))","2a19b693":"## \ubca0\uc774\uc2a4\ub77c\uc778 \ubaa8\ub378 \uc0dd\uc131\n- Popular Based Recommendation\n- Popular Based Recommendation with following arthor","e18a73b9":"- count_x : \uc791\uac00\uc5d0 \ub300\ud55c \uac1c\ubcc4 \uc0ac\uc6a9\uc790\uc758 \uc120\ud638\ub3c4 \n- count_y : \uae00\uc5d0 \ub300\ud55c \uc804\uccb4 \uc0ac\uc6a9\uc790\uc758 \uc120\ud638\ub3c4 ","0b381ce5":"![](https:\/\/github.com\/choco9966\/T-academy-Recommendation\/blob\/master\/figure\/Following_Popular_Based_score.PNG?raw=true)","b289080d":"![](https:\/\/github.com\/choco9966\/T-academy-Recommendation\/blob\/master\/figure\/Following_popular.PNG?raw=true)","d18e2823":"![](https:\/\/github.com\/choco9966\/T-academy-Recommendation\/blob\/master\/figure\/Popular_Based_score.PNG?raw=true)","8af3f80d":"## Popular Based Recommendation\n- 2019\ub144\ub3c4 \uc774\ud6c4\ub85c \uc791\uc131\ub41c \uae00\uc911\uc5d0\uc11c \uc0c1\uc704 100\uac74\uc758 \uae00\uc744 \ucd94\ucc9c \n- \uc0ac\uc6a9\uc790\uac00 \uc77d\uc740 \uae00\uc740 \ucd94\ucc9c\uc774 \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud6c4\ucc98\ub9ac","b40c8768":"\uc704\uc758 \ubaa8\ub378\uc744 \ud1b5\ud574\uc11c \ucd94\ucc9c\ud558\ub824\uace0 \ud588\ub354\ub2c8 \ubc1c\uc0dd\ud558\ub294 \ubb38\uc81c\uc810 \n1. \uad6c\ub3c5\ud558\ub294 \uc791\uac00\uac00 \uc5c6\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc5b4\ub5a4 \uc2dd\uc73c\ub85c \ucd94\ucc9c\ud574\uc57c\ud560 \uc9c0? \n2. \uad6c\ub3c5\ud558\ub294 \uc791\uac00\uac00 \uc5ec\ub7ec\uba85\uc774\uace0 \uc791\uac00\uc758 \uae00\ub3c4 \uc5ec\ub7ec\uac1c\uc778\ub370 \uc5b4\ub5a4 \uae00\uc744 \uc704\uc8fc\ub85c \ucd94\ucc9c\ud574\uc57c\ud560 \uc9c0? \n\n\ub2e8\uc21c\ud55c \ud574\uacb0\ucc45 \n1. Popular Based Model\uc5d0\uc11c \uc0c1\uc704 100\uac74\uc744 \ucd94\ucc9c \n2. \uc791\uac00\uc911\uc5d0\uc11c \uc120\ud638\ud558\ub294 \uc791\uac00\ub97c \uc120\uc815\ud558\uace0 \ud574\ub2f9 \uc791\uac00\uc758 \uc778\uae30\uae00\uc744 \ucd94\ucc9c \n    - \uc120\ud638 : \ud574\ub2f9 \uc791\uac00\uc758 \uae00\uc744 \uac00\uc7a5 \ub9ce\uc774 \uc77d\uc74c \n    - \uc704\uc758 \uc815\uc758 \ub9d0\uace0\ub3c4 \"\uc5bc\ub9c8\ub098 \ub9ce\uc740 \ub0a0\uc5d0 \ucc3e\uc544\uac00\uc11c \uc77d\uc5c8\ub294 \uc9c0\", \"\uc791\uac00\uc758 \uae00\uc911\uc5d0\uc11c \uba87\ud3b8\uc758 \uae00\uc744 \uc77d\uc5c8\ub294 \uc9c0\" \ub4f1\uc73c\ub85c \ub2e4\ub974\uac8c \uc815\uc758\ub3c4 \uac00\ub2a5","ace75997":"## Popular Based Recommendation with following arthor\n- 2019\ub144\ub3c4 \uc774\ud6c4\ub85c \uc791\uc131\ub41c \uae00\uc911\uc5d0\uc11c \uad6c\ub3c5\uc791\uac00\uc758 \uae00\uc744 \uc6b0\uc120\uc801\uc73c\ub85c \ucd94\ucc9c \n- \uc0ac\uc6a9\uc790\uac00 \uc77d\uc740 \uae00\uc740 \ucd94\ucc9c\uc774 \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud6c4\ucc98\ub9ac"}}