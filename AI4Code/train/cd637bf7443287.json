{"cell_type":{"43af1d7c":"code","7a9003c6":"code","6d25d52c":"code","ff14cce7":"code","ef430148":"code","ee3262c7":"code","523fb499":"code","f777766c":"code","1903ab3a":"code","190a5935":"code","09398d53":"code","3ff483da":"code","6693e9bb":"code","582f3261":"code","9061ffbc":"code","f881d357":"code","22bdb27c":"code","893de960":"code","1b2970d2":"markdown","ad5dc7bb":"markdown"},"source":{"43af1d7c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score, accuracy_score, f1_score,roc_curve,classification_report\n\nimport xgboost as xgb\nfrom xgboost import plot_importance\nfrom xgboost.sklearn import XGBClassifier\nimport riiideducation\n\nimport torch\nfrom pytorch_tabnet.tab_model import TabNetClassifier\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau","7a9003c6":"# pip install pytorch_tabnet","6d25d52c":"train = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                   usecols=[1, 2, 3, 4, 5, 7, 8, 9],\n                   dtype={'timestamp': 'int64',\n                          'user_id': 'int32',\n                          'content_id': 'int16',\n                          'content_type_id': 'int8',\n                          'task_container_id': 'int16',\n                          'answered_correctly':'int8',\n                          'prior_question_elapsed_time': 'float32',\n                          'prior_question_had_explanation': 'boolean'}\n                   )","ff14cce7":"# Remove lectures and additional processing\ntrain = train[train.content_type_id == False]\n\ntrain = train.sort_values(['timestamp'], ascending=True)\ntrain.drop(['timestamp','content_type_id'], axis=1, inplace=True)","ef430148":"# Read Questions and Lectures\nquestions = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')\nlectures = pd.read_csv('..\/input\/riiid-test-answer-prediction\/lectures.csv')","ee3262c7":"# Merge train with Questions\ntrain = pd.merge(train, questions, left_on = 'content_id', right_on = 'question_id', how = 'left')","523fb499":"#Indicator for first question in a batch\ntrain['firstQindicator'] = np.where(train['prior_question_elapsed_time'].isnull(),1,0)\ntrain['prior_question_elapsed_time'] = np.where(train['prior_question_elapsed_time'].isnull(),\n                                                0,train['prior_question_elapsed_time'])","f777766c":"train.head()","1903ab3a":"# Remove unused columns\ndel train['question_id']\ndel train['bundle_id']\ndel train['correct_answer']\ndel train['tags']","190a5935":"import gc\ngc.collect()","09398d53":"train.prior_question_had_explanation = np.where(train.prior_question_had_explanation=='True',1,0)","3ff483da":"# Sample 5M records\ntrain = train.sample(n=5000000)","6693e9bb":"# train test split\nxtrain, xvalid, ytrain, yvalid = train_test_split(train.drop(['answered_correctly'],axis=1), \n                                                  train['answered_correctly'],\n                                                  random_state=42, \n                                                  test_size=0.2, \n                                                  shuffle=True)","582f3261":"# Train XGB Classifier\nclf_xgb = xgb.XGBClassifier()\nclf_xgb.fit(xtrain, ytrain)","9061ffbc":"# Predict using XGB Classifier\npred_xgb = clf_xgb.predict(xvalid)\nprint('\\t\\t\\tCLASSIFICATIION METRICS: XGBOOST\\n')\nprint(metrics.classification_report(yvalid, pred_xgb))\nscore = roc_auc_score(yvalid, pred_xgb)\nprint('ROC value is: {}'.format(score))","f881d357":"# Tabnet object\nclf_tabnet = TabNetClassifier()","22bdb27c":"# Fit TabNet model\nclf_tabnet.fit(\n    X_train=xtrain.values, y_train=ytrain.values,\n    eval_set=[(xvalid.values, yvalid.values)]\n    \n)","893de960":"# Predict using TabNet\npred_tabnet = clf_tabnet.predict(xvalid.values)\nprint('\\t\\t\\tCLASSIFICATIION METRICS: TabNet\\n')\nprint(metrics.classification_report(yvalid, pred_tabnet))\nscore = roc_auc_score(yvalid, pred_tabnet)\nprint('ROC value is: {}'.format(score))","1b2970d2":"XGBoost has reigned the predictions on tabular data for quite sometime and the ML\/ AI community is itching to get past the baseline it sets. Recently, have been introduced to TabNet architecture. In this Notebook, i do a quick & plain vanilla comparison between the 2 algorithms on 5M sample. I have barely made much changes to default parameters and here, i just intend to see if both have comparable results and if eventually an ensemble could result into a better result.","ad5dc7bb":"I think XGBoost still has an edge. As the model is done on partial data, only minimal feature engineering is done, and no hyper-parameter tuning is done, we see the results much less than what the baselines from other Kernels are providing. As the next step, my focus is going to be along the lines and see how much each algo can stretch to. **Stay tuned...**"}}