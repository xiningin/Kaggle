{"cell_type":{"198cadd4":"code","d9151002":"code","5dd0b248":"code","b31eb757":"code","397e78d4":"code","d0e879dc":"code","833f541d":"code","306cc356":"code","6d2d16fb":"code","0e4cb2e6":"code","39943c7a":"code","7e931a8c":"code","554338a0":"code","aebc0f7a":"code","439e946c":"code","e0fde9d1":"code","acf8acf0":"code","72b173b3":"code","8e69a39b":"code","77d38cc2":"code","88182693":"code","2831005c":"code","f2fded42":"code","a85889d4":"markdown"},"source":{"198cadd4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9151002":"import matplotlib.pyplot as plt\nimport seaborn as sns\nhouse_df= pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv')\nhouse_df.head()","5dd0b248":"#checking for null values\nhouse_df.isnull().sum()","b31eb757":"#Information about the dataset\nhouse_df.info()","397e78d4":"#describing the dataset\nhouse_df.describe()","d0e879dc":"plt.figure(figsize=(12,10))\nsns.scatterplot(x=house_df['bedrooms'], y=house_df['price'], color='teal')\nplt.show()","833f541d":"#from the above plot we observe a house with more than 30 bedrooms. \n#Checking out the data of that particular row\nhouse_df[house_df['bedrooms']>30]","306cc356":"#we observe that sqft_lot =6000 with nearly 1620 sqft of living space and 33 bedrooms which is practically not possible.\n#so dropping this column\nhouse_df.drop(15870, inplace=True)","6d2d16fb":"#plotting houseprice vs bedrooms again gives\nplt.figure(figsize=(12,10))\nsns.barplot(x=house_df['bedrooms'], y=house_df['price'], color='teal')\nplt.show()","0e4cb2e6":"#plotting price and bathroom using histogram\nplt.figure(figsize=(12,10))\nplt.hist(x=house_df['floors'])\nplt.show()","39943c7a":"#we observe that most of the houses have 1 bathroom\n#plotting price and bathrooms\nplt.figure(figsize=(12,10))\nsns.barplot(x=house_df['bathrooms'], y=house_df['price'], color='olive')\nplt.show()\n#we see that output looks left skewed.","7e931a8c":"#plotting sqft_living with Price\nplt.figure(figsize=(12,10))\nplt.scatter(house_df['sqft_living'],house_df['price'],color='green')\nplt.show()\n#we see that maximum concentration of prices is situated at the lower end.","554338a0":"from sklearn.model_selection import train_test_split\ny=house_df['price']\nX=house_df[['bedrooms','bathrooms','sqft_living','sqft_lot','floors','waterfront',\n            'view','condition','grade','sqft_above','sqft_basement','yr_built',\n            'yr_renovated','zipcode','lat','long','sqft_living15','sqft_lot15']]\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size = 0.33, random_state = 42)\nprint(f'Total # of sample in whole dataset: {len(X)}')\nprint(\"*****\"*10)\nprint(f'Total # of sample in train dataset: {len(X_train)}')\nprint(f'Shape of X_train: {X_train.shape}')\nprint(\"*****\"*10)\nprint(f'Total # of sample in test dataset: {len(X_test)}')\nprint(f'Shape of X_test: {X_test.shape}')","aebc0f7a":"#Linear Regression\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression(fit_intercept = True)","439e946c":"lr.fit(X_train, y_train)","e0fde9d1":"#predicting\npred = lr.predict(X_test)","acf8acf0":"#Results\ntrain_score = lr.score(X_train, y_train)\nprint(f'Train score of trained model: {train_score*100}')\n\ntest_score = lr.score(X_test, y_test)\nprint(f'Test score of trained model: {test_score*100}')","72b173b3":"#Viewing outputs\nplt.figure(figsize=(21,15),dpi=96)\nsns.set_theme(style=\"white\")\nsns.jointplot(x=y_test, y=pred, kind='reg', line_kws={\"color\": \"red\"})\nplt.show()","8e69a39b":"## EVALUATION OF THE MODEL ##","77d38cc2":"#Mean Squared Error, root mean square error, Mean absolute error, Mean absolute Percentage Error\nimport sklearn.metrics\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error\nprint(\"Mean Squared Error:\",mean_squared_error(y_test, pred))\nprint()\nprint(\"Root Mean Squared Error:\",np.sqrt(mean_squared_error(y_test, pred)))\nprint()\nprint(\"Mean Absolute Error:\",mean_absolute_error(y_test, pred))\nprint()\nprint(\"Mean Absolute Percentage Error:\",np.mean(np.abs( (y_test-pred) \/ y_test))*100)\n#The values are high as prices are in billions","88182693":"#R2 value\nfrom sklearn.metrics import r2_score\nprint(\"R^2:\",r2_score(y_test, pred))","2831005c":"import sklearn.metrics as m\nn=X_test.shape[0]\np=X_test.shape[1] - 1\nR2 = m.r2_score(y_test, pred)\n\nadj_rsquared = 1 - (1 - R2) * ((n - 1)\/(n-p-1))\nprint('Adjusted R Squared: {}'.format(adj_rsquared))","f2fded42":"house_df.to_csv('submission.csv',index=False)","a85889d4":"**Exploratary Data Analysis**"}}