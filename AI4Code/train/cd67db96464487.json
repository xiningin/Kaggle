{"cell_type":{"4276cdaa":"code","e1b80cad":"code","d38a5dd6":"code","261abc47":"code","9c267355":"code","17728b09":"code","d2187776":"code","119d4199":"code","d38293b0":"code","b948786f":"code","c9ac2f93":"code","23ebe987":"markdown","0a69a2b1":"markdown","d70ec17f":"markdown","60427794":"markdown","21802b12":"markdown"},"source":{"4276cdaa":"!pip install ..\/input\/detectron-05\/whls\/pycocotools-2.0.2\/dist\/pycocotools-2.0.2.tar --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/fvcore-0.1.5.post20211019\/fvcore-0.1.5.post20211019 --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/antlr4-python3-runtime-4.8\/antlr4-python3-runtime-4.8 --no-index --find-links ..\/input\/detectron-05\/whls \n!pip install ..\/input\/detectron-05\/whls\/detectron2-0.5\/detectron2 --no-index --find-links ..\/input\/detectron-05\/whls ","e1b80cad":"import detectron2\nimport torch\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom PIL import Image\nimport numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2  # computer vision library\nimport matplotlib.pyplot as plt  # collection of command style functions creates a figure, creates a plotting area in\n# a figure, plots some lines in a plotting area\nfrom fastcore.all import *","d38a5dd6":"dataDir=Path('..\/input\/sartorius-cell-instance-segmentation')","261abc47":"def rle_decode(mask_rle, shape=(520, 704)):  # function to convert tabular mask data to image\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()  # Split an array into multiple sub-arrays as views into ary.\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]  # calculate the initial value and length of the mask in the line\n    starts -= 1\n    ends = starts + lengths  # calculate the final value\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)  # Return a new array of given shape and type, filled with zeros\n    for lo, hi in zip(starts, ends):  # the original image array filled with zeros is filled with ones at the locations of the mask\n        img[lo:hi] = 1\n    return img.reshape(shape)  # Needed to align to RLE direction\n\ndef rle_encode(img):\n    '''\n    img: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = img.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    return ' '.join(str(x) for x in runs)\n\ndef get_masks(fn, predictor):\n    im = cv2.imread(str(fn))\n    pred = predictor(im)\n    pred_class = torch.mode(pred['instances'].pred_classes)[0]\n    take = pred['instances'].scores >= THRESHOLDS[pred_class]\n    pred_masks = pred['instances'].pred_masks[take]\n    pred_masks = pred_masks.cpu().numpy()\n    res = []\n    used = np.zeros(im.shape[:2], dtype=int)\n    print(pred)\n    for mask in pred_masks:\n        mask = mask * (1-used)\n        if mask.sum() >= MIN_PIXELS[pred_class]: # skip predictions with small area\n            used += mask\n            res.append(rle_encode(mask))\n    return res\n","9c267355":"ids, masks=[],[]\ntest_names = (dataDir\/'test').ls()","17728b09":"cfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-InstanceSegmentation\/mask_rcnn_R_50_FPN_3x.yaml\"))\ncfg.INPUT.MASK_FORMAT='bitmask'\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 3 \ncfg.MODEL.WEIGHTS = os.path.join('..\/input\/sartorius-transfer-learning-model', \"model_0009679.pth\")  \ncfg.TEST.DETECTIONS_PER_IMAGE = 1000\npredictor = DefaultPredictor(cfg)\nTHRESHOLDS = [.15, .35, .55]\nMIN_PIXELS = [75, 150, 75]","d2187776":"encoded_masks = get_masks(test_names[0], predictor)","119d4199":"encoded_masks = get_masks(test_names[0], predictor)\n\n_, axs = plt.subplots(1,2, figsize=(40,15))\naxs[1].imshow(cv2.imread(str(test_names[0])))\nfor enc in encoded_masks:\n    dec = rle_decode(enc)\n    axs[0].imshow(np.ma.masked_where(dec==0, dec))","d38293b0":"encoded_masks","b948786f":"for fn in test_names:\n    encoded_masks = get_masks(fn, predictor)\n    for enc in encoded_masks:\n        ids.append(fn.stem)\n        masks.append(enc)","c9ac2f93":"pd.DataFrame({'id':ids, 'predicted':masks}).to_csv('submission.csv', index=False)\npd.read_csv('submission.csv').head()","23ebe987":"## Inference and submission","0a69a2b1":"### Look at the outputs on a sample test file to sanity check\nI'm encoding here in the competition format and decoding back to bit mask just to make sure everything is fine","d70ec17f":"Please UPVOTE !!","60427794":"### Looks good, so lets generate masks for all the files and create a submission","21802b12":"### Initiate a Predictor from our trained model"}}