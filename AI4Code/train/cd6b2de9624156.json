{"cell_type":{"881721dd":"code","4bc21220":"code","2cdeb94b":"code","2bb98bf6":"code","f43ebb46":"code","3c2cba2c":"code","0e3563fe":"code","37a2b723":"code","d1871364":"code","8386a717":"code","9e757977":"code","0000c9fa":"code","057df363":"code","2d7bc530":"code","19bc24bb":"code","7a577185":"code","ae9dfc15":"code","bcefc5b0":"code","102e4896":"code","01711081":"code","14bcb33b":"code","3d7312b4":"code","e7c99de5":"code","a89c05c8":"code","878ad071":"code","eb45f530":"code","bc0e267a":"code","0045a90c":"code","14433382":"code","ef85d06d":"code","afb3f468":"code","3f907587":"code","9d4d0438":"code","e2477ae7":"code","219e41b2":"code","650e51b2":"code","39851f8a":"code","f0f08661":"code","22223eb3":"code","01061e03":"code","0244d287":"code","0a0249a8":"code","65c90971":"markdown","48e71ce5":"markdown","1a3b16d8":"markdown","0ae06b32":"markdown","d11fc3a3":"markdown"},"source":{"881721dd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4bc21220":"covid19_train_df = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')","2cdeb94b":"covid19_train_df.describe()","2bb98bf6":"covid19_train_df.head()","f43ebb46":"covid19_train_df.sample()","3c2cba2c":"covid19_train_df.sample(n=10)","0e3563fe":"import seaborn as sns","37a2b723":"sns.countplot(y=\"Country_Region\", data=covid19_train_df,order=covid19_train_df[\"Country_Region\"].value_counts(ascending=False).iloc[:10].index)","d1871364":"sns.countplot(y=\"Province_State\", data=covid19_train_df,order=covid19_train_df[\"Province_State\"].value_counts(ascending=False).iloc[:20].index)","8386a717":"sns.regplot(x=covid19_train_df[\"ConfirmedCases\"], y=covid19_train_df[\"Fatalities\"], fit_reg=False)","9e757977":"sns.regplot(x=covid19_train_df[\"ConfirmedCases\"], y=covid19_train_df[\"Fatalities\"])","0000c9fa":"sns.jointplot(x=covid19_train_df[\"ConfirmedCases\"], y=covid19_train_df[\"Fatalities\"], kind='scatter')","057df363":"sns.set(style=\"darkgrid\")\nsns.lineplot(x=\"Date\",y=\"ConfirmedCases\",hue=\"Country_Region\", \n             data=covid19_train_df)","2d7bc530":"sns.set(style=\"darkgrid\")\nsns.lineplot(x=\"Date\",y=\"Fatalities\", hue=\"Country_Region\",\n             data=covid19_train_df)","19bc24bb":"sns.residplot(x=covid19_train_df[\"ConfirmedCases\"], y=covid19_train_df[\"Fatalities\"], lowess=True, color=\"g\")","7a577185":"#data_4.to_csv(\"submission.csv\", index=False)","ae9dfc15":"from sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder","bcefc5b0":"trainData = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntestData = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\n\nprint(trainData.shape)\nprint(testData.shape)\n","102e4896":"convertDict = {'Province_State': str,'Country_Region':str}\ntrainData = trainData.astype(convertDict)\ntestData = testData.astype(convertDict)","01711081":"\n\ntrainData['Date'] = pd.to_datetime(trainData['Date'], infer_datetime_format=True)\n\ntestData['Date'] = pd.to_datetime(testData['Date'], infer_datetime_format=True)","14bcb33b":"\ntrainData.loc[:, 'Date'] = trainData.Date.dt.strftime('%m%d')\ntrainData.loc[:, 'Date'] = trainData['Date'].astype(int)\n\n\ntestData.loc[:, 'Date'] = testData.Date.dt.strftime('%m%d')\ntestData.loc[:, 'Date'] = testData['Date'].astype(int)","3d7312b4":"trainData['Country_Region'] = np.where(trainData['Province_State'] == 'nan',\n                                       trainData['Country_Region'],trainData['Province_State']+\n                                       trainData['Country_Region'])\ntestData['Country_Region'] = np.where(testData['Province_State'] == 'nan',\n                                      testData['Country_Region'],testData['Province_State']+\n                                      testData['Country_Region'])","e7c99de5":"trainData = trainData.drop(columns=['Province_State'])\ntestData = testData.drop(columns=['Province_State'])\n\nprint(trainData.head(),testData.head())\nprint(trainData.shape,testData.shape)","a89c05c8":"#list of categorical variables\ncategoryObject = (trainData.dtypes == 'object')\nobjectData = list(categoryObject[categoryObject].index)","878ad071":"objectData","eb45f530":"labelEncoder = LabelEncoder()\ntrainData['Country_Region'] = labelEncoder.fit_transform(trainData['Country_Region'])\ntestData['Country_Region'] = labelEncoder.transform(testData['Country_Region'])","bc0e267a":"trainData.head()","0045a90c":"testData.head()","14433382":"testForecastId = testData.ForecastId","ef85d06d":"trainData.drop(['Id'], axis=1, inplace=True)\ntestData.drop('ForecastId', axis=1, inplace=True)","afb3f468":"trainData.head(), trainData.shape","3f907587":"testData.head(), testData.shape","9d4d0438":"#pip install pandas-profiling","e2477ae7":"import pandas_profiling","219e41b2":"trainData.profile_report()","650e51b2":"testData.profile_report()","39851f8a":"from xgboost import XGBRegressor","f0f08661":"X_train = trainData[['Country_Region','Date']]\ny_train = trainData[['ConfirmedCases', 'Fatalities']]","22223eb3":"x_train = X_train.iloc[:,:].values\nx_test = testData.iloc[:,:].values","01061e03":"model = MultiOutputRegressor(XGBRegressor(n_estimators=1500, max_depth=20, random_state=0))\nmodel.fit(x_train, y_train)\npredict = MultiOutputRegressor(model.predict(x_test))","0244d287":"submissionData = pd.DataFrame()\nsubmissionData['ForecastId'] = testForecastId\nsubmissionData['ConfirmedCases'] = np.round(predict.estimator[:,0],2)\nsubmissionData['Fatalities'] = np.round(predict.estimator[:,1],2)\n\nsubmissionData.to_csv('submission.csv', index=False)","0a0249a8":"submissionData.sample(5), submissionData.shape","65c90971":"### Simple Data Visualization","48e71ce5":"### XGB Boost ","1a3b16d8":"#### train data EDA using pandas profiling","0ae06b32":"#### test data profile report","d11fc3a3":"### Simple EDA"}}