{"cell_type":{"e42b8414":"code","75a3ca8d":"code","f66ec449":"code","a2652851":"code","eef985c3":"code","4e85fe17":"code","3d3cde88":"code","62c3c321":"code","b23350d4":"code","2e3882e7":"code","7cda0847":"code","73385192":"code","0bbebcfb":"code","8ef1285b":"code","206ab5d6":"code","5315ca3a":"code","cb55e513":"code","f176be06":"code","3a51e015":"code","09ff466d":"code","04d2427c":"code","385f778b":"code","6828924a":"code","9c821643":"code","ab9ee218":"code","2ca70fd6":"code","808043fd":"code","45432e9f":"code","baf747bc":"code","5e77dceb":"code","9a8937e6":"code","b8d0115c":"code","56812910":"code","83168297":"code","a1499a31":"code","33ff1f26":"code","af20eed2":"code","8851943a":"code","67ffc058":"code","370442da":"code","a17041c6":"code","dfdee4c8":"code","acbd7a02":"code","0b1c96dd":"code","b4a8f96b":"code","7f352384":"code","782ee71b":"code","1c41cd13":"code","c0cbb94b":"code","4ac8f2c9":"code","985bca49":"code","8528f7c9":"code","641d9749":"code","2ce91cb7":"code","eb9eafe7":"code","412dbbdb":"code","ddfa3a87":"code","7abe5725":"code","cfd3c59a":"code","748c39c6":"code","98a50622":"code","f89a4382":"code","f341014f":"code","1662ed87":"code","92e39204":"code","c4f1a912":"code","37e617ee":"code","3934d2df":"code","702ddc74":"code","c8df8a56":"code","377ba75d":"code","4356da3d":"code","0d67ee37":"code","bf32c65d":"code","00a8b7b3":"code","7e63c960":"code","295efc35":"code","4134ea35":"code","8a2c1653":"code","8eb3447d":"code","921a46d6":"code","88957397":"code","2849964c":"code","83b25937":"code","12b5085a":"code","cc7a7696":"code","e30cf7c9":"code","99b98f61":"code","5d1abff3":"code","4203ce10":"code","24373353":"code","8aeacd1b":"code","2153490b":"code","9b19ccb6":"code","55156b53":"code","32cb0207":"code","6da53352":"code","2539b97e":"code","dbc6cc5b":"code","b51891ef":"code","6212c121":"code","3633dd7f":"code","9775a6ba":"code","29e911f7":"code","36984b76":"code","dd3ffcc5":"markdown","d8e06e8e":"markdown","46ee751c":"markdown","ab326e9f":"markdown","0010fe9f":"markdown","677d1df5":"markdown","984f6a09":"markdown","b068d672":"markdown","ac0d31ca":"markdown","b5873c79":"markdown","991b2308":"markdown","139d9993":"markdown","9ec24cd4":"markdown"},"source":{"e42b8414":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\n\n%matplotlib inline","75a3ca8d":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","f66ec449":"train.SalePrice.min()","a2652851":"test['SalePrice'] = 0\nfull = train.append(test)","eef985c3":"ident_cols = ['Id', 'SalePrice']\nsale_prop_cols = ['Id', 'YrSold', 'MoSold', 'SaleType', 'SaleCondition']\ndates_cols = ['Id', 'YrSold', 'MoSold', 'GarageYrBlt', 'YearBuilt', 'YearRemodAdd']\nconstruction_cols = ['Id', 'MSSubClass', 'Utilities', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'BsmtExposure', 'Heating', 'CentralAir', 'Electrical', 'GarageType', 'PavedDrive', 'MiscFeature', 'MiscVal']\ndisposition_cols = ['Id', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars']\nmeasure_cols = ['Id', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea']\nlandscape_cols = ['Id', 'MSZoning', 'LotFrontage', 'LotArea', 'Street', 'Alley', 'LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2']\nqualities_cols = ['Id', 'OverallQual', 'OverallCond', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtFinType1', 'BsmtFinType2', 'HeatingQC', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence']","4e85fe17":"ident = full[ident_cols].copy()\nident.to_csv('ident.csv', index=False)","3d3cde88":"qualities = full[qualities_cols].copy()\nqualities.head()","62c3c321":"def combine_features(data, name1, name2, new_name = None):\n    col_name = new_name\n    if col_name == None:\n        col_name = name1 + '_' + name2\n    data[col_name] = data[name1].map(str) + \"_\" + data[name2].map(str)\n    data.drop([name1, name2], axis=1, inplace=True)\n    return data","b23350d4":"for c in qualities.columns[qualities.isna().any()].tolist():\n    print(c)","2e3882e7":"tmp = pd.merge(qualities[['BsmtQual', 'BsmtCond', 'Id']], full[['TotalBsmtSF', 'Id']], on=['Id'])\nta_rows = tmp[(tmp.isnull().any(axis=1)) & (tmp.TotalBsmtSF > 0.0)].Id\nprint(ta_rows.tolist())\nqualities['BsmtQual'] = qualities.apply(lambda x : 'TA' if ta_rows.isin([x['Id']]).any() and (pd.isnull(x['BsmtQual'])) else x['BsmtQual'], axis=1)\nqualities['BsmtCond'] = qualities.apply(lambda x : 'TA' if ta_rows.isin([x['Id']]).any() and (pd.isnull(x['BsmtCond'])) else x['BsmtCond'], axis=1)\n\ntmp = pd.merge(qualities[['BsmtFinType1', 'BsmtFinType2', 'Id']], full[['TotalBsmtSF', 'Id']], on=['Id'])\nta_rows = tmp[(tmp.isnull().any(axis=1)) & (tmp.TotalBsmtSF > 0.0)].Id\nprint(ta_rows.tolist())\nqualities['BsmtFinType1'] = qualities.apply(lambda x : 'Rec' if ta_rows.isin([x['Id']]).any() and (pd.isnull(x['BsmtFinType1'])) else x['BsmtFinType1'], axis=1)\nqualities['BsmtFinType2'] = qualities.apply(lambda x : 'Rec' if ta_rows.isin([x['Id']]).any() and (pd.isnull(x['BsmtFinType2'])) else x['BsmtFinType2'], axis=1)","7cda0847":"tmp = pd.merge(qualities[['GarageFinish', 'GarageQual', 'GarageCond', 'Id']], full[['GarageArea', 'GarageCars', 'Id']], on=['Id'])\nmiss_rows = tmp[(tmp.isnull().any(axis=1)) & (tmp.GarageArea > 0)].Id\nprint(tmp[(tmp.isnull().any(axis=1)) & (tmp.GarageArea > 0)])","73385192":"qualities.GarageFinish = qualities.apply(lambda x : 'RFn' if x['Id'] == 2127 else x['GarageFinish'], axis=1)\nqualities.GarageQual = qualities.apply(lambda x : 'TA' if x['Id'] == 2127 else x['GarageQual'], axis=1)\nqualities.GarageCond = qualities.apply(lambda x : 'TA' if x['Id'] == 2127 else x['GarageCond'], axis=1)","0bbebcfb":"tmp = pd.merge(qualities[['PoolQC', 'Id']], full[['PoolArea', 'Id']], on=['Id'])\nmiss_rows = tmp[(tmp.isnull().any(axis=1)) & (tmp.PoolArea > 0)].Id\nprint(miss_rows.tolist())\nqualities['PoolQC'] = qualities.apply(lambda x : 'TA' if miss_rows.isin([x['Id']]).any() and (pd.isnull(x['PoolQC'])) else x['PoolQC'], axis=1)","8ef1285b":"na_grades_cols = ['Fence','PoolQC','BsmtFinType1','BsmtFinType2','GarageFinish',\n                    'ExterQual','ExterCond','BsmtQual','BsmtCond','HeatingQC',\n                    'KitchenQual','FireplaceQu','GarageQual','GarageCond']\nfor c in na_grades_cols:\n    qualities[c] = qualities[c].map(lambda x : 'NA' if pd.isnull(x) else x)\n\nqualities.Functional = qualities.Functional.map(lambda x : 'Typ' if pd.isnull(x) else x)","206ab5d6":"qual_grades_cols = ['ExterQual','ExterCond','BsmtQual','BsmtCond','HeatingQC','KitchenQual','FireplaceQu','GarageQual','GarageCond']\nqual_grades = ['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex']\nfor c in qual_grades_cols:\n    qualities[c] = qualities[c].map(lambda x : 0 if pd.isnull(x) else qual_grades.index(x))","5315ca3a":"#PoolQC\npool_grades = ['NA', 'Fa', 'TA', 'Gd', 'Ex']\n#BsmtFinType1 BsmtFinType2\nfin_types = ['NA', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'] \n#Functional\nfunc_types = ['Sal', 'Sev', 'Maj2', 'Maj1', 'Mod', 'Min2', 'Min1', 'Typ']\n#Garage Finish\ngar_fin = ['NA', 'Unf', 'RFn', 'Fin']\n#Fence\nfence_qual = ['NA', 'MnWw', 'GdWo', 'MnPrv', 'GdPrv']","cb55e513":"qualities.PoolQC = qualities.PoolQC.map(lambda x : 0 if pd.isnull(x) else pool_grades.index(x))\nqualities.BsmtFinType1 = qualities.BsmtFinType1.map(lambda x : 0 if pd.isnull(x) else fin_types.index(x))\nqualities.BsmtFinType2 = qualities.BsmtFinType2.map(lambda x : 0 if pd.isnull(x) else fin_types.index(x))\nqualities.Functional = qualities.Functional.map(lambda x : 0 if pd.isnull(x) else func_types.index(x))\nqualities.GarageFinish = qualities.GarageFinish.map(lambda x : 0 if pd.isnull(x) else gar_fin.index(x))\nqualities.Fence = qualities.Fence.map(lambda x : 0 if pd.isnull(x) else fence_qual.index(x))","f176be06":"qualities['OverallCond_Qual'] = qualities.OverallQual + qualities.OverallCond\nqualities['BsmtCond_Qual'] = qualities.BsmtQual + qualities.BsmtCond\nqualities['ExterCond_Qual'] = qualities.ExterQual + qualities.ExterCond\nqualities.OverallCond_Qual = qualities.OverallCond_Qual + qualities.ExterCond_Qual\nqualities['GarageCond_Qual'] = qualities.GarageQual + qualities.GarageCond\nqualities['GarageCond_Qual'] = qualities.GarageCond_Qual + qualities.GarageFinish\nqualities.drop(['ExterCond_Qual','GarageFinish','OverallQual', 'OverallCond', 'ExterQual','ExterCond','BsmtQual','BsmtCond','GarageQual','GarageCond'], axis=1, inplace=True)","3a51e015":"qualities","09ff466d":"fin_types = qualities['BsmtFinType1'].value_counts().index.tolist()\nqualities.BsmtFinType1 = qualities.BsmtFinType1.map(lambda x : fin_types.index(x) + 1)\nqualities.BsmtFinType2 = qualities.BsmtFinType2.map(lambda x : fin_types.index(x) + 1)","04d2427c":"qualities","385f778b":"fig, axes = plt.subplots(ncols=2, nrows=6, figsize=(15,40))\nfor i, idx in zip(qualities.drop('Id', axis=1).columns, range(0,len(qualities.columns)-1)):\n    sns.countplot(qualities[i], label=i, ax=axes.flat[idx], )","6828924a":"qualities.describe()","9c821643":"qualities.info()","ab9ee218":"qualities.to_csv('qualities.csv', index=False)","2ca70fd6":"sale_prop = full[sale_prop_cols].copy()\nsale_prop.head()","808043fd":"print('first sale {}, last sale {}'.format(sale_prop.YrSold.min(),sale_prop.YrSold.max()))","45432e9f":"label_encoder = LabelEncoder()\nsale_prop.SaleType = sale_prop.SaleType.map(lambda x : str(x)) \nsale_prop.SaleType = label_encoder.fit_transform(sale_prop.SaleType)\nsale_prop.SaleCondition = sale_prop.SaleCondition.map(lambda x : str(x)) \nsale_prop.SaleCondition = label_encoder.fit_transform(sale_prop.SaleCondition)","baf747bc":"sale_prop['SoldAge'] = 2010 - sale_prop.YrSold\nsale_prop.drop('YrSold', axis=1, inplace=True)\nsale_prop.head()","5e77dceb":"fig, axes = plt.subplots(ncols=2, nrows=2, figsize=(15,10))\nfor i, idx in zip(sale_prop.drop('Id', axis=1).columns, range(0,len(sale_prop.columns)-1)):\n    sns.countplot(sale_prop[i], label=i, ax=axes.flat[idx])","9a8937e6":"sale_prop.describe()","b8d0115c":"sale_prop.info()","56812910":"sale_prop.to_csv('sale_prop.csv', index=False)","83168297":"dates = full[dates_cols].copy()\ndates.head()","a1499a31":"print('built {}-{}, garage {}-{}'.format(dates.YearBuilt.min(), dates.YearBuilt.max(), dates.GarageYrBlt.min(), dates.GarageYrBlt.max()))\nsns.heatmap(dates.isnull())","33ff1f26":"dates[dates.GarageYrBlt < dates.YearBuilt]","af20eed2":"dates[dates.GarageYrBlt > 2010]","8851943a":"dates.GarageYrBlt = dates.GarageYrBlt.map(lambda x : 2007 if x > 2010 else x)\ndates[dates.GarageYrBlt > 2010]","67ffc058":"full[full.YearRemodAdd == 1950][['YearRemodAdd', 'YearBuilt']]","370442da":"years_cols = ['YrSold', 'GarageYrBlt', 'YearBuilt', 'YearRemodAdd']\nfor c in years_cols:\n    col_name = c + 'Age'\n    dates[col_name] = 2010 - dates[c]\n    dates[col_name] = dates[col_name].map(lambda x : 200 if pd.isnull(x) else int(x))\n    dates.drop(c, axis=1, inplace=True)","a17041c6":"fig, axes = plt.subplots(ncols=2, nrows=3, figsize=(15,12))\nfor i, idx in zip(dates.drop('Id', axis=1).columns, range(0,len(dates.columns)-1)):\n    sns.countplot(dates[i], label=i, ax=axes.flat[idx])","dfdee4c8":"dates.describe()","acbd7a02":"dates.info()","0b1c96dd":"dates.to_csv('dates.csv', index=False)","b4a8f96b":"constructions = full[construction_cols].copy()\nconstructions.head()","7f352384":"constructions['HasDoubleExt'] = constructions.apply(lambda x : 0 if x['Exterior1st'] == x['Exterior2nd'] else 1, axis=1)","782ee71b":"constructions['IsUnfinished'] = constructions.HouseStyle.map(\n                lambda x : 1 if (x == '1.5Unf') | (x == '2.5Unf') else 0)","1c41cd13":"for c in constructions.columns:\n    if constructions[c].dtype == 'O':\n        print('{}'.format(constructions[c].value_counts()))","c0cbb94b":"constructions.drop('Utilities', axis=1, inplace=True)","4ac8f2c9":"constructions.CentralAir = pd.get_dummies(constructions.CentralAir, drop_first=True)","985bca49":"constructions = pd.concat([constructions, pd.get_dummies(constructions.PavedDrive, prefix='PavedDrive')], axis=1)\nconstructions.drop(['PavedDrive', 'PavedDrive_P'], axis=1, inplace=True)\nconstructions.head()","8528f7c9":"null_cols = constructions.columns[constructions.isna().any()].tolist()\nsns.heatmap(constructions[null_cols].isnull())","641d9749":"constructions.drop('MiscFeature', axis=1, inplace=True)","2ce91cb7":"constructions.Exterior2nd = constructions.apply(lambda x : 'None' if x['Exterior1st'] == x['Exterior2nd'] else x['Exterior2nd'], axis = 1)","eb9eafe7":"null_cols = constructions.columns[constructions.isna().any()].tolist()\nfor c in null_cols:\n    impute_val = constructions[c].value_counts().index[0]\n    constructions[c] = constructions[c].map(lambda x : impute_val if pd.isnull(x) else x)","412dbbdb":"constructions.head()","ddfa3a87":"constructions = combine_features(constructions, 'RoofStyle', 'RoofMatl')","7abe5725":"vals = constructions[constructions.MSSubClass == 90].HouseStyle.unique().tolist()\nconstructions.MSSubClass = constructions.apply(\n    lambda x : (x['MSSubClass'] + vals.index(x['HouseStyle'])) if (x['MSSubClass'] == 90) else x['MSSubClass'], axis=1)","cfd3c59a":"vals = constructions[constructions.MSSubClass == 190].HouseStyle.unique().tolist()\nconstructions.MSSubClass = constructions.apply(\n    lambda x : (x['MSSubClass'] + vals.index(x['HouseStyle'])) if (x['MSSubClass'] == 190) else x['MSSubClass'], axis=1)","748c39c6":"constructions.MSSubClass = constructions.apply(lambda x : \n                                               (x['MSSubClass'] + 2) if ((x['HouseStyle'] == '2.5Fin') & (x['MSSubClass'] == 75)) \n                                               else x['MSSubClass'], axis=1)","98a50622":"constructions[constructions.MSSubClass == 180].HouseStyle.value_counts()\nconstructions.MSSubClass = constructions.apply(lambda x : \n                                               (x['MSSubClass'] + 5) if ((x['HouseStyle'] == 'SLvl') & (x['MSSubClass'] == 180)) \n                                               else x['MSSubClass'], axis=1)","f89a4382":"constructions.drop('HouseStyle', axis=1, inplace=True)","f341014f":"obj_cols = []\nfor c in constructions.columns:\n    if constructions[c].dtype == 'O':\n        print('{}: {}'.format(c, constructions[c].unique()))\n        obj_cols.append(c)\nprint(obj_cols)","1662ed87":"for c in obj_cols:\n    constructions[c] = constructions[c].map(lambda x : str(x)) \n    constructions[c] = label_encoder.fit_transform(constructions[c])\nconstructions.head()","92e39204":"fig, axes = plt.subplots(ncols=2, nrows=9, figsize=(15,35))\nfor i, idx in zip(constructions.drop('Id', axis=1).columns, range(0,len(constructions.columns)-1)):\n    sns.countplot(constructions[i], label=i, ax=axes.flat[idx])","c4f1a912":"constructions.describe()","37e617ee":"constructions.info()","3934d2df":"constructions.to_csv('constructions.csv', index=False)","702ddc74":"disposition = full[disposition_cols].copy()\ndisposition.head()","c8df8a56":"null_cols = disposition.columns[disposition.isna().any()].tolist()\nsns.heatmap(disposition[null_cols].isnull())","377ba75d":"for c in null_cols:\n    disposition[c] = disposition[c].map(lambda x : 0 if np.isnan(x) else int(x))","4356da3d":"disposition['OverallHalfBath'] = disposition.HalfBath + disposition.BsmtHalfBath","0d67ee37":"disposition.describe()","bf32c65d":"disposition.info()","00a8b7b3":"disposition.to_csv('disposition.csv', index=False)","7e63c960":"measure = full[measure_cols].copy()\nmeasure.head()","295efc35":"measure['CarArea'] = measure.GarageArea \/ disposition.GarageCars","4134ea35":"measure['Has2ndFlr'] = measure.apply(lambda x : 0 if x['2ndFlrSF'] == 0 else 1, axis=1)","8a2c1653":"null_cols = measure.columns[measure.isna().any()].tolist()\nsns.heatmap(measure[null_cols].isnull())","8eb3447d":"for c in measure.columns:\n    if (c != 'Id') & (c != 'Has2ndFlr'):\n        measure[c] = measure[c].map(lambda x : 0 if np.isnan(x) else float(x))\nmeasure.describe()","921a46d6":"measure.info()","88957397":"measure.to_csv('measure.csv', index=False)","2849964c":"landscape = full[landscape_cols].copy()\nlandscape.head()","83b25937":"landscape['HasDoubleCond'] = landscape.apply(lambda x : 0 if x['Condition1'] == x['Condition2'] else 1, axis=1)","12b5085a":"landscape.info()","cc7a7696":"null_cols = landscape.columns[landscape.isna().any()].tolist()\nsns.heatmap(landscape[null_cols].isnull())","e30cf7c9":"landscape.drop('Alley', axis=1, inplace=True)\nimpute_val = landscape.MSZoning.value_counts().index[0]\nprint(impute_val)\nlandscape.MSZoning = landscape.MSZoning.map(lambda x : impute_val if pd.isnull(x) else x)\nlandscape.LotArea = landscape.LotArea.map(lambda x : float(x))\nlandscape.LotFrontage = landscape.LotFrontage.map(lambda x : 0 if pd.isnull(x) else x)","99b98f61":"landscape.info()","5d1abff3":"obj_cols = landscape.select_dtypes(include=[np.object]).columns.tolist()\nfor c in obj_cols:\n    print(landscape[c].value_counts())","4203ce10":"landscape.drop('Street', axis=1, inplace=True)","24373353":"landscape = pd.concat([landscape, pd.get_dummies(landscape.LandSlope, prefix='LandSlope')], axis=1)\nlandscape.drop(['LandSlope', 'LandSlope_Sev'], axis=1, inplace=True)\nlandscape.head()","8aeacd1b":"landscape[landscape.Condition1 != landscape.Condition2].shape","2153490b":"landscape.Condition2 = landscape.apply(lambda x : 'None' if x['Condition1'] == x['Condition2'] else x['Condition2'], axis = 1)","9b19ccb6":"for c in landscape.select_dtypes(include=[np.object]).columns.tolist():\n    landscape[c] = landscape[c].map(lambda x : str(x)) \n    landscape[c] = label_encoder.fit_transform(landscape[c])\nlandscape.head()","55156b53":"landscape.info()","32cb0207":"landscape.describe()","6da53352":"landscape.to_csv('landscape.csv', index=False)","2539b97e":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom lightgbm import LGBMRegressor\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.metrics import mean_absolute_error","dbc6cc5b":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint('train size: {}, test size {}'.format(train.shape[0], test.shape[0]))","b51891ef":"constructions = pd.read_csv('constructions.csv')\ndates = pd.read_csv('dates.csv')\ndisposition = pd.read_csv('disposition.csv')\nlandscape = pd.read_csv('landscape.csv')\nmeasure = pd.read_csv('measure.csv')\nqualities = pd.read_csv('qualities.csv')\nsale_prop = pd.read_csv('sale_prop.csv')","6212c121":"#train_sale = train[['Id', 'SalePrice']]\ntest['SalePrice'] = 0\nfull = train[['Id', 'SalePrice']].append(test[['Id', 'SalePrice']])\nfull = pd.merge(dates, full, on=['Id'])\nfull = pd.merge(constructions, full, on=['Id'])\nfull = pd.merge(disposition, full, on=['Id'])\nfull = pd.merge(landscape, full, on=['Id'])\nfull = pd.merge(measure, full, on=['Id'])\nfull = pd.merge(qualities, full, on=['Id'])\nfull = pd.merge(sale_prop, full, on=['Id'])","3633dd7f":"def rfr_pred(data, pred_name, est=0, learn_rate=0, boost_type='', leaves=0, depth=-1):\n    data_train = data[data.Id.isin(train.Id)].copy()\n    data_test = data[data.Id.isin(test.Id)].copy()\n    \n    mae = 0\n    lgbm = LGBMRegressor()\n    if est == 0:\n        print('grid search')\n        parameters = {\n            'num_leaves': [7, 14, 21, 28, 31, 50],\n            'max_depth': [-1, 3, 5, 10],\n            'learning_rate': [0.01, 0.015, 0.025],#, 0.05, 0.1, 0.15],\n            'n_estimators': [50, 100, 200],#, 500, 700],\n            'boosting_type' : ['dart']#['gbdt', 'dart', 'goss']\n        }\n        \n        grid_search = GridSearchCV(lgbm, parameters, scoring = 'neg_mean_absolute_error', n_jobs= -1, cv=3)\n        grid_search.fit(data.drop(['Id','SalePrice'], axis=1), data.SalePrice)\n        \n        mae = -1 * grid_search.best_score_\n\n        lgbm.num_leaves = grid_search.best_params_['num_leaves']\n        lgbm.max_depth = grid_search.best_params_['max_depth']\n        lgbm.n_estimators = grid_search.best_params_['n_estimators']\n        lgbm.learning_rate = grid_search.best_params_['learning_rate']\n        lgbm.boosting_type = grid_search.best_params_['boosting_type']\n        print(\"est {}, learn rate {}, boosting {}, leaves {}, depth {}, mae {}\".format(lgbm.n_estimators,\n                                                              lgbm.learning_rate,\n                                                              lgbm.boosting_type,\n                                                                lgbm.num_leaves,\n                                                                lgbm.max_depth,           \n                                                                 mae))\n    \n    else:\n        lgbm.n_estimators = est\n        lgbm.learning_rate = learn_rate\n        lgbm.boosting_type = boost_type\n        lgbm.num_leaves = leaves\n        lgbm.max_depth = depth\n        \n    scores = cross_val_score(lgbm, data.drop(['Id','SalePrice'], axis=1), data.SalePrice, cv=5, scoring='neg_mean_absolute_error')\n    mae = -1 * scores.mean()\n        \n    lgbm.fit(data_train.drop(['Id','SalePrice'], axis=1), data_train.SalePrice)\n    y_pred = lgbm.predict(data_test.drop(['Id','SalePrice'], axis=1))\n    \n    print('mae {}'.format(mae))\n    out = data_test[['Id']].copy()\n    out[pred_name] = y_pred\n    out[pred_name + '_err'] = mae\n    return out\n","9775a6ba":"full_est = rfr_pred(full, 'full_est', 100, 0.01, 'dart', 50, -1)\n#grid est 100, learn rate 0.01, boosting dart, leaves 50, depth -1, mae 117725.769026745\n#mae 108456.84375809731\nfull_est","29e911f7":"out = pd.DataFrame({'id': full_est.Id, 'SalePrice': full_est.full_est})","36984b76":"out.to_csv('housePrice.csv', index=False) \nout = pd.read_csv('housePrice.csv') \nout","dd3ffcc5":"Once I started converting years to ages I have to apply it everywhere to stay consistent","d8e06e8e":"From my observation it seems that MSSubClass and HouseStyle refers to the same characteristic. MSSubClass keeps more information, so i will use that one and just add informations about 'unfinished' half stories. \nIt's also obvious that values of those two columns doesn't allways correspond. For now i'll try to belive to MSSubClass as there is no way to find out truth","46ee751c":" * split data by categories and clean them","ab326e9f":" * landscape..","0010fe9f":"Find out if null values are because of missing features.\nIf not use mean to replace them otherwise use special value for missing features","677d1df5":"process data about lengths and areas","984f6a09":"Check range when were sales done. I will use it to determine its age and use it instead of years as it gets me more intuitive numbers","b068d672":"Walk trough dispositions values","ac0d31ca":"Some of grades works better together as they are tightly related. So I will transform them into single column. I dont use column combiner because simple arithmetic works well here","b5873c79":" * Transform sale properties into numerical representation. Years will by converted to age value from perspective of year last one was sold","991b2308":"Convert grade values to corresponding value representation. I don't use LabelEncoding to be sure it corresponds to grades logicaly","139d9993":"Next convert all dates into same form. We will find one typo and use ages instead of years. Null values will be filled by age 200 because there isn't any house of such a huge age","9ec24cd4":" * Take information about quality and condition of different house properties and fill\/convert them to numerical representation according to data documentation"}}