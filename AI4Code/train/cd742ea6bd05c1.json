{"cell_type":{"bb094c4f":"code","a5d84611":"code","e5909ee2":"code","ad1fc8ce":"code","bb64c386":"code","9bb88c33":"code","dd27fe32":"code","9da191be":"code","759d7663":"code","3bb931df":"code","9399d873":"code","64874b2e":"code","8fd65cb5":"code","63fa382a":"code","1ddf71e2":"code","ea043003":"code","98871c4c":"code","a8510e12":"code","625b45f7":"code","f51a5790":"code","26f89a16":"code","3fceb7b4":"code","7aa9952b":"code","5468366b":"code","0bc975bd":"code","1e1c4130":"code","5db6091e":"code","8d823aee":"code","eb896b90":"code","45b82caf":"code","b719c545":"code","405521b3":"code","bba8edcf":"code","9e15497f":"code","3572aeda":"code","43dee0b3":"code","601e834d":"code","6ebbdc82":"code","fdef5e5e":"code","09b98c6f":"code","cf607e25":"code","cd79de54":"code","94849153":"code","75dd2d86":"code","3d31aa15":"code","d261b31c":"code","84c22814":"code","401f4714":"markdown","0254b5f9":"markdown","ea9db116":"markdown","13c3592f":"markdown","9533bb8c":"markdown","9f972800":"markdown","a5276b04":"markdown","8536cc7e":"markdown","7826ea5e":"markdown","110416dd":"markdown","e8389b91":"markdown","24a7dec3":"markdown","8f58526b":"markdown","9a858bf7":"markdown","fa4bb889":"markdown","d6a5e390":"markdown","8b7c73e7":"markdown","4c13ea09":"markdown","cd20129d":"markdown","145ad789":"markdown","5ca9d983":"markdown","3b9ccd9f":"markdown","a9c305b4":"markdown","44f36597":"markdown","7108cdf2":"markdown","bfbe0ce6":"markdown","2a3724ed":"markdown","fe377be6":"markdown","18187574":"markdown","28ff792a":"markdown","91304502":"markdown","b6da75cc":"markdown","5c8537b1":"markdown","c4fdd160":"markdown","dfda4645":"markdown","2c2150dd":"markdown","b9c38f41":"markdown","b5bcf13a":"markdown","3b129441":"markdown","df57be4d":"markdown","1626966f":"markdown","75a1fb49":"markdown","2be38cdf":"markdown","09596f0a":"markdown","70f27ddd":"markdown","8d67b595":"markdown"},"source":{"bb094c4f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n% matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom matplotlib_venn import venn3","a5d84611":"df_train = pd.read_csv('..\/input\/application_train.csv')\ndf_train.shape","e5909ee2":"df_train.head()","ad1fc8ce":"df_test = pd.read_csv('..\/input\/application_test.csv')\ndf_test.shape","bb64c386":"df_bu_balance = pd.read_csv('..\/input\/bureau_balance.csv')\ndf_bu_balance.shape","9bb88c33":"df_bu_balance.head()","dd27fe32":"df_bureau = pd.read_csv('..\/input\/bureau.csv')\ndf_bureau.shape","9da191be":"df_bureau.head()","759d7663":"df_cre_balance = pd.read_csv('..\/input\/credit_card_balance.csv')\ndf_cre_balance.shape","3bb931df":"df_cre_balance.head()","9399d873":"df_installment = pd.read_csv('..\/input\/installments_payments.csv')\ndf_installment.shape","64874b2e":"df_installment.head()","8fd65cb5":"df_pos_cash = pd.read_csv('..\/input\/POS_CASH_balance.csv')\ndf_pos_cash.shape","63fa382a":"df_pos_cash.head()","1ddf71e2":"df_prev_app = pd.read_csv('..\/input\/previous_application.csv')\ndf_prev_app.shape","ea043003":"df_prev_app.head()","98871c4c":"def missing_values(df):\n    missing_value = df.isnull().sum()\n    missing_percent = (df.isnull().sum()\/len(df)*100).round(2)\n    table = pd.concat([missing_value, missing_percent], axis=1).rename(\n            columns={0:'Missing Values (Count)', 1: 'Missing Values (%)'})\n    table = table[table['Missing Values (Count)']>0].sort_values(by='Missing Values (Count)', ascending=False)\n    return table","a8510e12":"missing_values(df_train).head(30)","625b45f7":"missing_values(df_test).head(30)","f51a5790":"missing_values(df_bu_balance)","26f89a16":"missing_values(df_bureau)","3fceb7b4":"missing_values(df_cre_balance)","7aa9952b":"missing_values(df_installment)","5468366b":"missing_values(df_pos_cash)","0bc975bd":"missing_values(df_prev_app)","1e1c4130":"df_viz = df_train[\"TARGET\"].value_counts().rename(index={0: 'Not default', 1: 'Default'})\ntrace = go.Pie(labels=df_viz.index, values=df_viz.values)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Default', titlefont=dict(size=22))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","5db6091e":"df_viz = df_train['NAME_CONTRACT_TYPE'].value_counts()\ntrace = go.Pie(labels=df_viz.index, values=df_viz.values)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Loan Type', titlefont=dict(size=22))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","8d823aee":"both = round(len(df_train[(df_train['FLAG_OWN_REALTY']=='Y') & \n                          (df_train['FLAG_OWN_CAR']=='Y')]) \/ len(df_train) * 100, 2)\nrealty_only = round(len(df_train[(df_train['FLAG_OWN_REALTY']=='Y') & \n                                 (df_train['FLAG_OWN_CAR']=='N')]) \/ len(df_train) * 100, 2)\ncar_only = round(len(df_train[(df_train['FLAG_OWN_REALTY']=='N') & \n                              (df_train['FLAG_OWN_CAR']=='Y')]) \/ len(df_train) * 100, 2)","eb896b90":"plt.figure(figsize=(10, 10))\nvenn = venn2(subsets = (realty_only, car_only, both), set_labels = ('Real Estate', 'Car'))\nfor t in venn.set_labels: t.set_fontsize(16)\nfor t in venn.subset_labels: t.set_fontsize(16)\nplt.title('Real Estate\/ Car Ownership (%)', fontsize=22);","45b82caf":"plt.figure(figsize=(12, 5))\nsns.distplot(df_train['AMT_INCOME_TOTAL'])\nplt.title('Distribution of Applicant\\'s Total Income', fontsize=22)\nplt.xlabel('Income');","b719c545":"plt.figure(figsize=(12, 5))\nsns.distplot(df_train['AMT_CREDIT'])\nplt.title('Distribution of Applicant\\'s Credit Amount', fontsize=22)\nplt.xlabel('Credit Amount');","405521b3":"plt.figure(figsize=(12, 5))\nsns.distplot(df_train['AMT_GOODS_PRICE'].dropna())\nplt.title('Distribution of the Price of Goods for Consumer Loans', fontsize=22)\nplt.xlabel('Price of Goods');","bba8edcf":"temp = df_train['NAME_FAMILY_STATUS'].value_counts()\ntrace = go.Bar(x=temp.index, y=temp, \n               marker=dict(color='coral'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Applicant\\'s Marital Status', titlefont=dict(size=22),\n                   xaxis=dict(title='Marital Status',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='Count',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","9e15497f":"temp = df_train['NAME_HOUSING_TYPE'].value_counts()\ntrace = go.Bar(x=temp.index, y=temp, \n               marker=dict(color='plum'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Applicant\\'s Housing Type', titlefont=dict(size=22),\n                   xaxis=dict(title='Housing Type',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14),\n                              tickangle=20),\n                   yaxis=dict(title='Count',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","3572aeda":"temp = df_train['NAME_EDUCATION_TYPE'].value_counts()\ntrace = go.Bar(x=temp.index, y=temp, \n               marker=dict(color='yellow'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Applicant\\'s Education', titlefont=dict(size=22),\n                   xaxis=dict(title='Education',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=12),\n                              tickangle=0),\n                   yaxis=dict(title='Count',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","43dee0b3":"temp = df_train['NAME_INCOME_TYPE'].value_counts()\ntrace = go.Bar(x=temp.index, y=temp, \n               marker=dict(color='powderblue'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Applicant\\'s Income Source', titlefont=dict(size=22),\n                   xaxis=dict(title='Income Source',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=12),\n                              tickangle=0),\n                   yaxis=dict(title='Count',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","601e834d":"temp = df_train['OCCUPATION_TYPE'].value_counts()\ntrace = go.Bar(x=temp.index, y=temp, \n               marker=dict(color='powderblue'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Applicant\\'s Occupation', titlefont=dict(size=22),\n                   xaxis=dict(title='Occupation',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=12)),\n                   yaxis=dict(title='Count',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","6ebbdc82":"temp = df_train['ORGANIZATION_TYPE'].value_counts().sort_values().tail(20)\ntrace = go.Bar(x=temp, y=temp.index, orientation='h',\n               marker=dict(color='powderblue'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Distribution of Applicant\\'s Work Industry', width = 900, titlefont=dict(size=22),\n                   xaxis=dict(title='Count',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='Industry',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=12)),\n                   margin=dict(l=200))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","fdef5e5e":"df_train['AGE'] = -(df_train['DAYS_BIRTH'])\/365","09b98c6f":"plt.figure(figsize=(12, 5))\nsns.distplot(df_train['AGE'].dropna())\nplt.title('Distribution of Applicant\\'s Age', fontsize=20)\nplt.xlabel('Age');","cf607e25":"plt.figure(figsize=(12, 5))\nsns.distplot(-(df_train['DAYS_EMPLOYED'].dropna())\/365)\nplt.title('Distribution of Applicant\\'s Years of Employment', fontsize=20)\nplt.xlabel('Year');","cd79de54":"df_train['AGE_BIN'] = pd.cut(df_train['AGE'], np.linspace(20, 70, num = 11))","94849153":"temp = df_train.groupby('AGE_BIN')['TARGET'].mean()\ntrace = go.Bar(x=temp.index.astype(str), y=temp, \n               marker=dict(color='pink'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Default Rate by Applicant\\'s Age', titlefont=dict(size=22),\n                   xaxis=dict(title='Age Bin',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='Default Rate (%)',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","75dd2d86":"temp = df_train.groupby('NAME_CONTRACT_TYPE')['TARGET'].mean()\ntrace = go.Bar(x=temp.index, y=temp, \n               marker=dict(color='pink'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Default Rate by Loan Type', titlefont=dict(size=22),\n                   xaxis=dict(title='Loan Type',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='Default Rate (%)',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","3d31aa15":"temp = df_train.groupby('REGION_RATING_CLIENT_W_CITY')['TARGET'].mean()\ntrace = go.Bar(x=['Region1', 'Region2', 'Region3'], y=temp, \n               marker=dict(color='pink'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Default Rate by Region', titlefont=dict(size=22),\n                   xaxis=dict(title='Region',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='Default Rate (%)',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","d261b31c":"temp = df_train.groupby('TARGET')['DEF_30_CNT_SOCIAL_CIRCLE'].mean()\ntrace = go.Bar(x=['Non-Default', 'Default'], y=temp, \n               marker=dict(color='pink'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Mean No. of People in Applicant\\'s Social Surroundings Defaulted on 30 DPD', \n                   titlefont=dict(size=20),\n                   xaxis=dict(titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='No. of Default',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","84c22814":"temp = df_train.groupby('TARGET')['DEF_60_CNT_SOCIAL_CIRCLE'].mean()\ntrace = go.Bar(x=['Non-Default', 'Default'], y=temp, \n               marker=dict(color='pink'), opacity=0.6)\ndata = [trace]\nlayout = go.Layout(title='Mean No. of People in Applicant\\'s Social Surroundings Defaulted on 60 DPD',\n                   titlefont=dict(size=20),\n                   xaxis=dict(titlefont=dict(size=16),\n                              tickfont=dict(size=14)),\n                   yaxis=dict(title='No. of Default',\n                              titlefont=dict(size=16),\n                              tickfont=dict(size=14)))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","401f4714":"Applicants who are not able to repay tend to be surrounded by people who cannot repay too.","0254b5f9":"### 4.1.1 Distribution of Default","ea9db116":"Region 3 has the highest default rate.","13c3592f":"## 2.1 Datasets sizes and snapshots:","9533bb8c":"### 4.1.12 Applicant's Work Industry","9f972800":"Default rate is negatively correlated with applicant's age.","a5276b04":"# 3. Checking for missing data","8536cc7e":"45.84% applicants own real estate only while 10.48% own car only. 23.53% own both. ","7826ea5e":"### 4.2.1 Default Rate by Applicant's Age","110416dd":"The top 5 work industries are:\n- Business Entity Type 3\n- XNA\n- Self-employed\n- Other\n- Medicine","e8389b91":"## 4.1 Application_train dataset","24a7dec3":"### 4.2.3 Default Rate by Region","8f58526b":"<a id='introduction'><\/a>","9a858bf7":"The datasets we have are:\n- application_{train|test}.csv: loan application data\n- bureau.csv: loan applicant's previous credits provided by other financial institutions that were reported to Credit Bureau\n- bureau_balance.csv: monthly balances of previous credits in Credit Bureau\n- POS_CASH_balance.csv: monthly balance snapshots of previous POS (point of sales) and cash loans that the applicant has with Home Credit\n- credit_card_balance.csv: monthly balance snapshots of previous credit cards that the applicant has with Home Credit\n- previous_application.csv: previous applications for Home Credit loans\n- installments_payments.csv: repayment history for the previously disbursed credits in Home Credit","fa4bb889":"### 4.1.7 Applicant's Marital Status","d6a5e390":"## 4.2 Default Rate Analysis","8b7c73e7":"Cash loans have higher default rate.","4c13ea09":"### 4.1.8 Applicant's Housing Type","cd20129d":"The distribution of applicant's age makes sense.","145ad789":"# Home Credit Default Risk","5ca9d983":"<a id='Loading the data'><\/a>","3b9ccd9f":"# 2. Loading the data","a9c305b4":"Some observations have years of employment = -1000 and this doesn't make sense. We need to code these observations as missing values.","44f36597":"### 4.1.4 Distribution of Applicant's Total Income","7108cdf2":"### 4.2.2 Default Rate by Loan Type","bfbe0ce6":"1. [Introduction](#introduction)\n\n2. [Loading the data](#Loading the data)\n\n3. [Checking for missing data](#Checking for missing data)\n\n4. [Explanatory Data Analysis](#EDA)","2a3724ed":"# More to come!","fe377be6":"Only 8% of loans are default and so we have a highly imbalance data.","18187574":"### 4.1.14 Applicant's Years of Employment","28ff792a":"### 4.2.4 No. of Default in Social Surroundings","91304502":"### 4.1.10 Applicant's Income Source","b6da75cc":"### 4.1.3 Real Estate\/ Car Ownership","5c8537b1":"### 4.1.6 Distribution of the Price of Goods for Consumer Loans","c4fdd160":"# 4. Explanatory Data Analysis","dfda4645":"# 1. Introduction","2c2150dd":"### 4.1.13 Applicant's Age","b9c38f41":"Founded in 1997, Home Credit Group is an international consumer finance provider with operations in 11 countries. They focus on providing responsible lending primarily to people with little or no credit history. In order to make sure this underserved population has a positive loan experience, Home Credit makes use of a variety of alternative data, including telco and transactional information to predict their clients' repayment abilities. \n\nHome Credit is challenging Kagglers to help them unlock the full potential of their data through developing a good machine learning model that accurately predicts loan applicants' ability of repayment. Doing so will ensure that applicants capable of repayment are well served and that loans are given with a principal, maturity, and repayment calendar that will empower loan applicants to be successful.","b5bcf13a":"The top 3 occupations are:\n- laborer\n- sales staff\n- core staff","3b129441":"<a id='Checking for missing data'><\/a>","df57be4d":"### 4.1.5 Distribution of Applicant's Credit Amount","1626966f":"<a id='EDA'><\/a>","75a1fb49":"90.5% of the loans are cash loans.","2be38cdf":"### 4.1.9 Applicant's Education","09596f0a":"### 4.1.11 Applicant's Occupation","70f27ddd":"Can you predict how capable each applicant is of repaying a loan?","8d67b595":"### 4.1.2 Distribution of Loan Type"}}