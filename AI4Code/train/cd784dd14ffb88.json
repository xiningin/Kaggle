{"cell_type":{"df0e4c91":"code","8f9f1f4d":"code","0f0b6a55":"code","014f0adf":"code","d32ab865":"code","96c5b1cc":"code","207ccf4f":"code","fac97c7e":"code","631c0a48":"code","145d60f9":"code","cd72068b":"code","a742e0b2":"code","1648e468":"code","1d0e0130":"code","507b0c17":"code","ce9f2f14":"code","8cd7bafa":"code","72b4e484":"code","c749099f":"code","39abe1d4":"markdown","70887124":"markdown","a0d5298b":"markdown","3b65fd2a":"markdown","28ae88da":"markdown","371444f8":"markdown","d5a9db0d":"markdown","b0cb8fe2":"markdown","5a9ad0f6":"markdown","519d7414":"markdown"},"source":{"df0e4c91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f9f1f4d":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","0f0b6a55":"data.head()","014f0adf":"data.info()","d32ab865":"data.describe()","96c5b1cc":"sns.countplot(x=\"class\", data=data)\ndata.loc[:,'class'].value_counts()","207ccf4f":"A = data[data['class'] =='Abnormal']\nN = data[data['class'] == \"Normal\"]","fac97c7e":"#scatter plot\nplt.scatter(A.pelvic_radius,A.sacral_slope,color=\"red\",label=\"abnormal\")\nplt.scatter(N.pelvic_radius,N.sacral_slope,color=\"green\",label=\"normal\")\nplt.xlabel(\"pelvic_radius\")\nplt.ylabel(\"sacral_slope\")\nplt.legend()\nplt.show()","631c0a48":"plt.scatter(A.pelvic_radius,A.lumbar_lordosis_angle,color=\"red\",label=\"abnormal\")\nplt.scatter(N.pelvic_radius,N.lumbar_lordosis_angle,color=\"green\",label=\"normal\")\nplt.xlabel(\"pelvic_radius\")\nplt.ylabel(\"lumbar_lordosis_angle\")\nplt.legend()\nplt.show()","145d60f9":"data['class'] = [1 if each == \"Abnormal\" else 0 for each in data['class']]\ny = data['class'].values\nx_data = data.drop([\"class\"],axis=1)","cd72068b":"#normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data))","a742e0b2":"#train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state=1)","1648e468":"#knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)","1d0e0130":"prediction","507b0c17":"print(\" {} knn score: {}\".format(3,knn.score(x_test,y_test)))","ce9f2f14":"#find k value\nscore_list = []\nfor each in range(1,15):\n    knn2= KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n\nplt.plot(range(1,15),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","8cd7bafa":"#knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 13) # n_neighbors = k\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)","72b4e484":"prediction","c749099f":"print(\" {} knn score: {}\".format(13,knn.score(x_test,y_test)))","39abe1d4":"<a id=\"3\"><\/a> <br>\n# Normalization\n* Normalization is one of the most important thing in KNN algorihm.\n* KNN algorithm uses euclidean distance to calculate distance between points. And if we don't normalize the feature with great values, it dominates the feature with small values. ","70887124":"Ther is four steps for KNN Algorithm:\n* Selecting k value \n* Finding the nearest points\n* Answering the question \"How many of which class are among the closest neighbors?\"\n* Answering the question \"Which class does the point or data we tested belong to?\"","a0d5298b":"* as we can see if the k  value is 13. the result gives best value","3b65fd2a":"<a id=\"2\"><\/a> <br>\n# Determination of Class","28ae88da":"<a id=\"6\"><\/a> <br>\n# Selecting K Value","371444f8":"<a id=\"4\"><\/a> <br>\n# Train Test Split","d5a9db0d":"<a id=\"5\"><\/a> <br>\n# KNN Model","b0cb8fe2":"<a id=\"1\"><\/a> <br>\n# Reading Data    ","5a9ad0f6":"    in data\n* there are 7 features and for each of them 310 samples.\n* Six feature are in float type and one of them is object.","519d7414":"# K Nearest Neighbor Algorithm\n* [Reading Data](#1)\n* [Determination of class](#2)\n* [Normalization](#3)\n* [Train Test Split](#4)\n* [KNN Model](#5)\n* [Selecting k Value](#6)"}}