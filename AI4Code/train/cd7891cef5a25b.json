{"cell_type":{"5901dc1c":"code","f379d4f3":"code","c221967c":"code","ad02d0f2":"code","7ace951d":"code","7d868ff4":"code","b5321c9f":"code","f3dd1db5":"code","6e213496":"code","ae757ac2":"code","dd05c72c":"code","ca6cf101":"code","699aa88e":"code","21de4f96":"code","248f76d2":"code","e5e1e533":"code","0b93d582":"code","d6c10edb":"code","7669360e":"code","025eec26":"code","353f5bbf":"code","1bc78848":"code","29d4b4bb":"code","5c154775":"code","548d165e":"code","b1d6288d":"code","6d2b4bbf":"code","50a9c7b1":"code","cbd36579":"code","a90e3415":"code","9d3d979e":"code","3b88bd75":"markdown","0aec8181":"markdown","0d989f46":"markdown","26406bc6":"markdown","d1eed9c4":"markdown","f9ab9319":"markdown","f335b93d":"markdown","379d39d9":"markdown","0dc9236a":"markdown","a8772e60":"markdown","145156d4":"markdown","2503ea48":"markdown","9070ac7f":"markdown"},"source":{"5901dc1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport missingno as msno\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f379d4f3":"df = pd.read_csv('..\/input\/world-happiness-report-2019\/world-happiness-report-2019.csv')\ndf.head()","c221967c":"df.columns","ad02d0f2":"df.rename(columns={'Country (region)':'country',\n                   'Ladder':'ladder', 'SD of Ladder':'ladder_sd',\n                   'Positive affect':'positive_affect','Negative affect':'negative_affect',\n                   'Social support':'social_support', 'Freedom':'freedom', \n                   'Corruption':'corruption','Generosity':'generosity',\n                   'Log of GDP\\nper capita':'gdp_log', \n                   'Healthy life\\nexpectancy':'life_expectancy'}, inplace=True)","7ace951d":"df.head()","7d868ff4":"df.info()","b5321c9f":"df.describe()","f3dd1db5":"missing_sum = df.isnull().sum().sort_values()\nmissing_sum","6e213496":"df['positive_affect'].fillna(df['positive_affect'].mean(),inplace=True)\ndf['negative_affect'].fillna(df['negative_affect'].mean(),inplace=True)\ndf['social_support'].fillna(df['social_support'].mode(),inplace=True)\ndf['freedom'].fillna(df['freedom'].median(),inplace=True)\ndf['corruption'].fillna(df['corruption'].mean(),inplace=True)\ndf['generosity'].fillna(df['generosity'].median(),inplace=True)\ndf['gdp_log'].fillna(df['gdp_log'].mean(),inplace=True)\ndf['life_expectancy'].fillna(df['life_expectancy'].mean(),inplace=True)","ae757ac2":"asia = [\"Israel\", \"United Arab Emirates\", \"Singapore\", \"Thailand\", \"Taiwan Province of China\",\n                 \"Qatar\", \"Saudi Arabia\", \"Kuwait\", \"Bahrain\", \"Malaysia\", \"Uzbekistan\", \"Japan\",\n                 \"South Korea\", \"Turkmenistan\", \"Kazakhstan\", \"Turkey\", \"Hong Kong S.A.R., China\", \"Philippines\",\n                 \"Jordan\", \"China\", \"Pakistan\", \"Indonesia\", \"Azerbaijan\", \"Lebanon\", \"Vietnam\",\n                 \"Tajikistan\", \"Bhutan\", \"Kyrgyzstan\", \"Nepal\", \"Mongolia\", \"Palestinian Territories\",\n                 \"Iran\", \"Bangladesh\", \"Myanmar\", \"Iraq\", \"Sri Lanka\", \"Armenia\", \"India\", \"Georgia\",\n                 \"Cambodia\", \"Afghanistan\", \"Yemen\", \"Syria\"]\n\neurope = [\"Norway\", \"Denmark\", \"Iceland\", \"Switzerland\", \"Finland\",\n                 \"Netherlands\", \"Sweden\", \"Austria\", \"Ireland\", \"Germany\",\n                 \"Belgium\", \"Luxembourg\", \"United Kingdom\", \"Czech Republic\",\n                 \"Malta\", \"France\", \"Spain\", \"Slovakia\", \"Poland\", \"Italy\",\n                 \"Russia\", \"Lithuania\", \"Latvia\", \"Moldova\", \"Romania\",\n                 \"Slovenia\", \"North Cyprus\", \"Cyprus\", \"Estonia\", \"Belarus\",\n                 \"Serbia\", \"Hungary\", \"Croatia\", \"Kosovo\", \"Montenegro\",\n                 \"Greece\", \"Portugal\", \"Bosnia and Herzegovina\", \"Macedonia\",\n                 \"Bulgaria\", \"Albania\", \"Ukraine\"]\n\nnorth_america = [\"Canada\", \"Costa Rica\", \"United States\", \"Mexico\",  \n                 \"Panama\",\"Trinidad and Tobago\", \"El Salvador\", \"Belize\", \"Guatemala\",\n                 \"Jamaica\", \"Nicaragua\", \"Dominican Republic\", \"Honduras\",\n                 \"Haiti\"]\n\nsouth_america = [\"Chile\", \"Brazil\", \"Argentina\", \"Uruguay\",\n                 \"Colombia\", \"Ecuador\", \"Bolivia\", \"Peru\",\n                 \"Paraguay\", \"Venezuela\"]\n\naustralia = [\"New Zealand\", \"Australia\"]\n\ndf['continent'] = np.nan \n\n# FILL IN CONTINENTS BASED ON COUNTRIES\ndf.loc[(df['country'].isin(asia)), 'continent'] = 'Asia'\ndf.loc[(df['country'].isin(europe)), 'continent'] = 'Europe'\ndf.loc[(df['country'].isin(north_america)), 'continent'] = 'North America'\ndf.loc[(df['country'].isin(south_america)), 'continent'] = 'South America'\ndf.loc[(df['country'].isin(australia)), 'continent'] = 'Australia'\ndf.continent.fillna(\"Africa\", inplace=True)\n\n# REORDER COLUMNS\ncols = ['continent', 'country', 'ladder', 'ladder_sd', 'positive_affect', 'negative_affect',\n       'social_support', 'freedom', 'corruption', 'generosity', 'gdp_log',\n       'life_expectancy']\n\ndf = df[cols]","dd05c72c":"df.head()","ca6cf101":"plt.figure(figsize=(12,12))\nsns.heatmap(df.corr(), cbar = True,  square = True, annot=True, cmap= 'YlGnBu')\nplt.title('VARIABLE CORRELATION MATRIX')","699aa88e":"top_10_ladder = df[['country','ladder']].sort_values(by='ladder', ascending=True)[:10]\nbottom_10_ladder = df[['country','ladder']].sort_values(by='ladder', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10', 'Bottom 10'))\n\nfig.add_trace(go.Bar(x=top_10_ladder['country'], \n                     y=top_10_ladder['ladder'], \n                     name='Top 10 Ladder'), row=1, col=1)\n\n\nfig.add_trace(go.Bar(x=bottom_10_ladder['country'], \n                     y=bottom_10_ladder['ladder'], \n                     name='Bottom 10 Ladder'),row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES LIFE SATISFACTION RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","21de4f96":"top_10_pa = df[['country','positive_affect']].sort_values(by='positive_affect', ascending=True)[:10]\nbottom_10_pa = df[['country','positive_affect']].sort_values(by='positive_affect', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10', 'Bottom 10'))\n\nfig.add_trace(go.Bar(x=top_10_pa['country'], \n                     y=top_10_pa['positive_affect'], \n                     name='Top 10 Positive Affect'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_pa['country'], \n                     y=bottom_10_pa['positive_affect'], \n                     name='Bottom 10 Positive Affect'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES POSITIVE AFFECT RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","248f76d2":"top_10_na = df[['country','negative_affect']].sort_values(by='negative_affect', ascending=True)[:10]\nbottom_10_na = df[['country','negative_affect']].sort_values(by='negative_affect', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10', 'Bottom 10'))\n\nfig.add_trace(go.Bar(x=top_10_na['country'], \n                     y=top_10_na['negative_affect'], \n                     name='Top 10 Negative Affect'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_na['country'], \n                     y=bottom_10_na['negative_affect'], \n                     name='Bottom 10 Negative Affect'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES NEGATIVE AFFECT RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","e5e1e533":"top_10_ss = df[['country','social_support']].sort_values(by='social_support', ascending=True)[:10]\nbottom_10_ss = df[['country','social_support']].sort_values(by='social_support', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10', 'Bottom 10'))\n\nfig.add_trace(go.Bar(x=top_10_ss['country'], \n                     y=top_10_ss['social_support'], \n                     name='Top 10 Social Support'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_ss['country'], \n                     y=bottom_10_ss['social_support'], \n                     name='Bottom 10 Social Support'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES SOCIAL SUPPORT RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","0b93d582":"top_10_free = df[['country','freedom']].sort_values(by='freedom', ascending=True)[:10]\nbottom_10_free = df[['country','freedom']].sort_values(by='freedom', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10', 'Bottom 10'))\n\nfig.add_trace(go.Bar(x=top_10_free['country'], \n                     y=top_10_free['freedom'], \n                     name='Top 10 Freedom'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_free['country'], \n                     y=bottom_10_free['freedom'], \n                     name='Bottom 10 Freedom'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES FREEDOM RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","d6c10edb":"top_10_corruption = df[['country','corruption']].sort_values(by='corruption', ascending=True)[:10]\nbottom_10_corruption = df[['country','corruption']].sort_values(by='corruption', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('10 Highest Corruption Ranking', '10 Lowest Corruption Ranking'))\n\nfig.add_trace(go.Bar(x=top_10_corruption['country'], \n                     y=top_10_corruption['corruption'], \n                     name='10 Highest Corruption'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_corruption['country'], \n                     y=bottom_10_corruption['corruption'], \n                     name='10 Lowest Corruption'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES CORRUPTION RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","7669360e":"top_10_generosity = df[['country','generosity']].sort_values(by='generosity', ascending=True)[:10]\nbottom_10_generosity = df[['country','generosity']].sort_values(by='generosity', ascending=True)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10 Generosity', 'Bottom 10 Generosity'))\n\nfig.add_trace(go.Bar(x=top_10_generosity['country'], \n                     y=top_10_generosity['generosity'], \n                     name='Top 10 Generosity'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_generosity['country'], \n                     y=bottom_10_generosity['generosity'], \n                     name='Bottom 10 Generosity'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES GENEROSITY RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","025eec26":"top_10_le = df[['country','life_expectancy']].sort_values(by='life_expectancy', ascending=True)[:10]\nbottom_10_le = df[['country','life_expectancy']].sort_values(by='life_expectancy', ascending=False)[:10]\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n                    subplot_titles=('Top 10 Life Expectancy', 'Bottom 10 Life Expectancy'))\n\nfig.add_trace(go.Bar(x=top_10_le['country'], \n                     y=top_10_le['life_expectancy'], \n                     name='10 Highest Life Expectancy Ranking'), row=1, col=1)\n\nfig.add_trace(go.Bar(x=bottom_10_le['country'], \n                     y=bottom_10_le['life_expectancy'], \n                     name='10 Lowest Life Expectancy Ranking'), row=1, col=2)\n\nfig.update_layout(height=500, \n                  width=1000,\n                  title_text=(\"TOP & BOTTOM 10 COUTRIES LIFE EXPECTANCY RANKING\"),\n                  bargap=0.2, \n                  bargroupgap=0.1,\n                  yaxis={'categoryorder':'total descending'}\n                 )\nfig.show()","353f5bbf":"fig = px.scatter(df, x=\"ladder\", y=\"positive_affect\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='POSITIVE AFFECT vs LADDER'\n                 )\nfig.show()","1bc78848":"fig = px.scatter(df, x=\"positive_affect\", y=\"freedom\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='POSITIVE AFFECT vs FREEDOM'\n                 )\nfig.show()","29d4b4bb":"fig = px.scatter(df, x=\"ladder\", y=\"social_support\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='LADDER vs SOCIAL SUPPORT'\n                 )\nfig.show()","5c154775":"fig = px.scatter(df, x=\"ladder\", y=\"corruption\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='LADDER vs CORRUPTION'\n                 )\nfig.show()","548d165e":"fig = px.scatter(df, x=\"ladder\", y=\"gdp_log\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='LADDER vs GDP LOG'\n                 )\nfig.show()","b1d6288d":"fig = px.scatter(df, x=\"ladder\", y=\"life_expectancy\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='LIFE EXPECTANCY vs LADDER'\n                 )\nfig.show()","6d2b4bbf":"fig = px.scatter(df, x=\"life_expectancy\", y=\"social_support\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='LIFE EXPECTANCY vs SOCIAL SUPPORT'\n                 )\nfig.show()","50a9c7b1":"fig = px.scatter(df, x=\"life_expectancy\", y=\"gdp_log\")\n\nfig.update_layout(height=500, \n                  width=800, \n                  title_text='LIFE EXPECTANCY vs GDP LOG'\n                 )\nfig.show()","cbd36579":"df_cont_le = df.groupby(['continent'])[['life_expectancy']].mean()\ndf_cont_le.reset_index(inplace=True)\ndf_cont_le.sort_values(by='life_expectancy', ascending=False, inplace=True)\n\nfig = go.FigureWidget(data=[go.Bar(x=df_cont_le['life_expectancy'], y=df_cont_le['continent'], orientation='h',\n                                   marker={'color': df_cont_le['life_expectancy'], 'colorscale': 'Viridis'})]) \n\nfig.update_layout(height=500, width=800, \n                  title_text='AVERAGE LIFE EXPECTANCY BY CONTINENT')\nfig.show()","a90e3415":"df_cont_le = df.groupby(['continent'])[['positive_affect']].mean()\ndf_cont_le.reset_index(inplace=True)\ndf_cont_le.sort_values(by='positive_affect', ascending=False, inplace=True)\n\nfig = go.FigureWidget(data=[go.Bar(x=df_cont_le['positive_affect'], y=df_cont_le['continent'], orientation='h',\n                                   marker={'color': df_cont_le['positive_affect'], 'colorscale': 'Viridis'})]) \n\nfig.update_layout(height=500, width=800, \n                  title_text='AVERAGE POSITIVE AFFECT BY CONTINENT')\nfig.show()","9d3d979e":"df_cont_le = df.groupby(['continent'])[['negative_affect']].mean()\ndf_cont_le.reset_index(inplace=True)\ndf_cont_le.sort_values(by='negative_affect', ascending=False, inplace=True)\n\nfig = go.FigureWidget(data=[go.Bar(x=df_cont_le['negative_affect'], y=df_cont_le['continent'], orientation='h',\n                                   marker={'color': df_cont_le['negative_affect'], 'colorscale': 'Viridis'})]) \n\nfig.update_layout(height=500, width=800, \n                  title_text='AVERAGE NEGATIVE AFFECT BY CONTINENT')\nfig.show()","3b88bd75":"<p  style=\"text-align: center;\"><font size=\"12\"><b>WORLD HAPPINESS REPORT 2019<\/b><\/font><\/p>\n<p  style=\"text-align: center;\"><font size=\"4\"><b>AN EXPLORATORY ANALYSIS<\/b><\/font><\/p>","0aec8181":"### VISUALIZING CORRELATIONS\n\nUsing scatter plots we're able to visualize how certain variables are correlated. There is an obvious positive correlation between several pairs of variables, while others no correlation is evident. This is consistent with the correlation heatmap presented above. ","0d989f46":"# <a id='2'>II. DATA OVERVIEW & INSIGHTS<\/a>","26406bc6":"### CONTINENT ANALYSIS","d1eed9c4":"![](https:\/\/github.com\/miltonsuggs\/08_world_happiness_eda\/blob\/main\/happiness.jpg?raw=true)","f9ab9319":"### CORRELATION MATRIX","f335b93d":"## INTRODUCTION\n\nThe World Happiness Report is a survey of the state of global happiness that ranks 156 countries by how happy their citizens perceive themselves to be. The 2019 World Happiness Report focuses on happiness and the community: how happiness has evolved over the past dozen years, with a focus on the technologies, social norms, conflicts and government policies that have driven those changes.\n\nAn exploratory data analysis of the data will be performed in this notebook, with a predictive model to be built at a later date. \n\n## ABOUT THE DATA\n\nThe data includes the following variables:\n* **Country**\n* **Ladder:** measure of life satisfaction.\n* **Standard Deviation of Ladder**\n* **Positive affect:** Measure of positive emotion.\n* **Negative affect:** Measure of negative emotion.\n* **Social support:** The extent to which Social support contributed to the calculation of the Happiness Score.\n* **Freedom:** The extent to which Freedom contributed to the calculation of the Happiness Score.\n* **Corruption:** The extent to which Perception of Corruption contributes to Happiness Score.\n* **Generosity:** The extent to which Generosity contributed to the calculation of the Happiness Score.\n* **Log of GDP (number per capita):** The extent to which GDP contributes to the calculation of the Happiness Score.\n* **Healthy life expectancy:** The extent to which Life expectancy contributed to the calculation of the Happiness Score.\n\nThe data is not ideal for predictive analysis because instead of providing an actual measurement for each of the variables, it provides a ranking based on the measurements. ","379d39d9":"# <a id='1'>I. LIBRARIES AND PACKAGES<\/a>","0dc9236a":"## TOP 10 ANALYSIS\n\nLet's see how each country ranks according to each of the variables in the dataset. ","a8772e60":"# <a id='4'>IV. FEATURE ENGINEERING<\/a>","145156d4":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n\n* <a href='#1'>I. INSTALL LIBRARIES & PACKAGES<\/a>\n* <a href='#2'>II. DATA OVERVIEW & INSIGHTS<\/a>\n* <a href='#3'>III. MISSING VALUES<\/a>\n* <a href='#1'>I. INSTALL LIBRARIES & PACKAGES<\/a>\n* <a href='#1'>I. INSTALL LIBRARIES & PACKAGES<\/a>\n\n2. [Feature Engineering part 1](#preprocessing1)\n3. [Initial Insights](#insights)\n4. [Data Exploration & Visualization](#eda)  \n    A. [Univariate Exploration](#univariate)   \n      I. [Categorical Variables](#cat1)  \n      II. [Continuous Variables](#cont1)      \n    B. [Bivariate Exploration](#biivariate)  \n      I. [Categorical Variables](#cat2)  \n      II. [Continuous Variables](#cont2)   \n    C. [Multivariate Exploration](#multivariate) \n5. [Data Normalization](#norm) (coming soon) \n6. [Model Development](#modeling)  (coming soon)","2503ea48":"# <a id='3'>III. MISSING VALUES<\/a>","9070ac7f":"# <a id='5'>V. EXPLORATORY DATA ANALYSIS<\/a>"}}