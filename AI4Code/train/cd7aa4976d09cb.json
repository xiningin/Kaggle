{"cell_type":{"fee2cb82":"code","18a9e591":"code","0414fb2a":"code","6f2719de":"code","e12701f2":"code","f01259db":"code","0919c9dc":"code","c91ffd6e":"code","24987bd7":"code","0d4ac6a2":"code","b417e005":"code","8bb7f3ed":"code","df92bc12":"code","6cce38d0":"code","eeadf84f":"code","99eb6922":"code","dec58baf":"code","6dc44863":"code","588fab9b":"code","7c17654c":"code","b4885ab0":"code","2f195a9f":"code","a302c804":"code","768d17da":"code","496fb0c9":"code","aa327fb9":"code","c74cb107":"code","197f6157":"code","2833ed72":"code","75f69ff3":"code","26a7cc4c":"code","0380734d":"code","28e61e09":"code","a8701c0c":"code","9099176f":"code","7880fbac":"code","5c8a9198":"code","8106531e":"markdown"},"source":{"fee2cb82":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')","18a9e591":"train.head()","0414fb2a":"train.describe()","6f2719de":"train.dtypes","e12701f2":"train['date_time'] = pd.to_datetime(train['date_time'])","f01259db":"train.dtypes","0919c9dc":"import seaborn as sns\nsns.scatterplot(x = 'date_time', y = 'deg_C', data = train)","c91ffd6e":"sns.scatterplot(x = 'date_time', y = 'relative_humidity', data = train)","24987bd7":"sns.scatterplot(x = 'date_time', y = 'absolute_humidity', data = train)","0d4ac6a2":"sns.displot(x = 'target_carbon_monoxide', data = train, kind = 'kde')","b417e005":"sns.displot(x = 'target_benzene', data = train, kind = 'kde')","8bb7f3ed":"sns.displot(x = 'target_nitrogen_oxides', data = train, kind = 'kde')","df92bc12":"g = sns.pairplot(train, plot_kws=dict(alpha= 0.1))","6cce38d0":"X = train.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis = 1).copy()\ny = train[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']].copy()","eeadf84f":"X = X.drop('date_time', axis = 1)","99eb6922":"import numpy as np\nfrom sklearn.model_selection import train_test_split","dec58baf":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)","6dc44863":"y_train_co = y_train['target_carbon_monoxide']\ny_train_bz  = y_train['target_benzene']\ny_train_no = y_train['target_nitrogen_oxides']\n\ny_test_co = y_test['target_carbon_monoxide']\ny_test_bz  = y_test['target_benzene']\ny_test_no = y_test['target_nitrogen_oxides']","588fab9b":"from sklearn.linear_model import ElasticNet, Lasso, BayesianRidge, LassoLarsIC, LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor, StackingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n","7c17654c":"scaler = RobustScaler()\nX_train_scaled = scaler.fit_transform(X_train)","b4885ab0":"co_lm = LinearRegression()\nco_lm.fit(X = X_train_scaled, y = y_train_co)\nbz_lm = LinearRegression()\nbz_lm.fit(X = X_train_scaled, y = y_train_bz)\nno_lm = LinearRegression()\nno_lm.fit(X = X_train_scaled, y = y_train_no)","2f195a9f":"X_test_scaled = scaler.transform(X_test)\nprint('CO Model Score: ' + str(co_lm.score(X_test_scaled, y_test_co)))\nprint('BZ Model Score: ' + str(bz_lm.score(X_test_scaled, y_test_bz)))\nprint('NO Model Score: ' + str(no_lm.score(X_test_scaled, y_test_no)))","a302c804":"co_log_lm = LinearRegression()\nco_log_lm.fit(X = X_train_scaled, y = np.log(y_train_co))\nbz_log_lm = LinearRegression()\nbz_log_lm.fit(X = X_train_scaled, y = np.log(y_train_bz))\nno_log_lm = LinearRegression()\nno_log_lm.fit(X = X_train_scaled, y = np.log(y_train_no))","768d17da":"\nprint('CO Model Logged Score: ' + str(co_log_lm.score(X_test_scaled, np.log(y_test_co))))\nprint('BZ Model Logged Score: ' + str(bz_log_lm.score(X_test_scaled, np.log(y_test_bz))))\nprint('NO Model Logged Score: ' + str(no_log_lm.score(X_test_scaled, np.log(y_test_no))))","496fb0c9":"valid = test.drop('date_time', axis = 1)\nvalid_scaled = scaler.transform(valid)","aa327fb9":"target_carbon_monoxide = np.exp(co_log_lm.predict(valid_scaled))\ntarget_benzene = np.exp(bz_log_lm.predict(valid_scaled))\ntarget_nitrogen_oxides_logged = no_log_lm.predict(valid_scaled)\ntarget_nitrogen_oxides = np.exp(target_nitrogen_oxides_logged)","c74cb107":"n_folds = 5\n\ndef rmsle_cv(model, train, y_train):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)\n\n","197f6157":"lasso_co = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nlasso_co.fit(X_train, y_train_co)\nco_score = rmsle_cv(lasso_co, X_train, y_train_co)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(co_score.mean(), co_score.std()))","2833ed72":"rf = RandomForestRegressor(random_state = 42)\n\nparams_rf = {'n_estimators': [400,500],\n             'max_depth': [20,30],\n    'max_features':['log2', 'auto', 'sqrt'],\n    'min_samples_leaf':[2,5,10]\n}\n\ngrid_rf_co = GridSearchCV(estimator=rf,\n                       param_grid=params_rf,\n                       scoring='neg_mean_squared_error',\n                       cv=5,\n                       verbose=1,\n                       n_jobs=-1)\n\ngrid_rf_co.fit(X_train, y_train_co)\n\n","75f69ff3":"rf_bz = RandomForestRegressor(random_state = 42)\ngrid_rf_bz = GridSearchCV(estimator=rf_bz,\n                       param_grid=params_rf,\n                       scoring='neg_mean_squared_error',\n                       cv=5,\n                       verbose=1,\n                       n_jobs=-1)\n\ngrid_rf_bz.fit(X_train, y_train_bz)","26a7cc4c":"rf_no = RandomForestRegressor(random_state = 42)\ngrid_rf_no = GridSearchCV(estimator=rf_no,\n                       param_grid=params_rf,\n                       scoring='neg_mean_squared_error',\n                       cv=5,\n                       verbose=1,\n                       n_jobs=-1)\n\ngrid_rf_no.fit(X_train, y_train_no)","0380734d":"best_rf_co = grid_rf_co.best_estimator_\nbest_rf_bz = grid_rf_bz.best_estimator_\nbest_rf_no = grid_rf_no.best_estimator_\n","28e61e09":"best_rf_co.score(X_train, y_train_co)\nbest_rf_bz.score(X_train, y_train_bz)\nbest_rf_no.score(X_train, y_train_no)","a8701c0c":"y_predict_co = best_rf_co.predict(valid)\ny_predict_bz = best_rf_bz.predict(valid)\ny_predict_no = best_rf_no.predict(valid)","9099176f":"submission_df = test[['date_time']].copy()\nsubmission_df['target_carbon_monoxide'] = y_predict_co\nsubmission_df['target_benzene'] = y_predict_bz\nsubmission_df['target_nitrogen_oxides'] = y_predict_no","7880fbac":"submission_df","5c8a9198":"submission_df.to_csv('submission.csv', index = False)","8106531e":"Gets a score of 0.343... we can do better"}}