{"cell_type":{"7d0c54e3":"code","b404f0ef":"code","e18407c9":"code","fd8daaa5":"code","28aa40d1":"code","67cc481b":"code","685e5d34":"code","1dda50dd":"code","030e99d6":"code","0985a62d":"code","11bfd8f2":"code","8df7e3e9":"code","078b064b":"code","d05272df":"code","5b4ca13c":"code","6b4f14a8":"code","fe8198c5":"code","a6b0ba32":"code","29106159":"code","96a03474":"code","fbc78247":"code","787afdb3":"code","f89df487":"code","01adb122":"code","2fa14af5":"code","b3262451":"code","80e4a368":"code","57bb5038":"markdown","bed03ab7":"markdown","880129ff":"markdown","e51fcead":"markdown","5ead67ff":"markdown","f6169368":"markdown","96f5ef68":"markdown","685bbe60":"markdown","b83efb41":"markdown","405b531e":"markdown","4d5e724e":"markdown","b28a5286":"markdown","82d60005":"markdown","10664eb9":"markdown","59289f18":"markdown","1a6d86af":"markdown","8d18f742":"markdown","051dedab":"markdown","422cc01b":"markdown"},"source":{"7d0c54e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b404f0ef":"pip install python-highcharts","e18407c9":"from highcharts import Highchart","fd8daaa5":"df = pd.read_csv('\/kaggle\/input\/health-care-data-set-on-heart-attack-possibility\/heart.csv')","28aa40d1":"df.head(10)","67cc481b":"df.columns","685e5d34":"# print(df.hist())","1dda50dd":"df.dtypes","030e99d6":"df.isna().sum()","0985a62d":"df.describe().style.background_gradient()","11bfd8f2":"\nstatus= df['sex'].value_counts().to_frame()\nstatus = pd.DataFrame({'gender':status.index,'Count':status['sex']})\n\n\nstatus\n","8df7e3e9":"tg= df['target'].value_counts().to_frame()\ntg = pd.DataFrame({\"target\":status.index,'Count':tg['target']})\n\n\ntg\n","078b064b":"import seaborn as sns\nimport matplotlib.pyplot as plt\nf, axes = plt.subplots(2, 3, figsize=(15, 10))\n\nsns.countplot(x = df['target'], data = df, palette='rocket', ax=axes[0,0])\nsns.countplot(x = df['restecg'], data = df, palette='rocket', ax=axes[0,1])\nsns.countplot(x = df['cp'], data = df, palette='rocket', ax=axes[0,2])\n\n\nsns.countplot(x = df['exang'], data = df, palette='rocket', ax=axes[1,0])\nsns.countplot(x = df['restecg'], data = df, palette='rocket', ax=axes[1,1])\nsns.countplot(x = df['sex'], data = df, palette='rocket', ax=axes[1,2])\nplt.show()","d05272df":"plt.figure(figsize=(14, 4))\nsns.histplot(data=df, x='age', hue='target', bins=40, kde=True);\nplt.title(\"AGE EFFECT ON THE HEART-ATTACK\",fontsize=18)\nplt.ylabel(\"Count\",fontsize=14)\nplt.show();\n\nprint(\"**From above representation there is no strong Relationship with age and heart attack.**\")\n","5b4ca13c":"# creating features from given dataset; i:e by dropping \"target\" coloumn as we need to predict the target ,hence it will our label\n\nx = df.drop('target',axis=1)\nx\n","6b4f14a8":"# creating labels\ny = df.target","fe8198c5":"y","a6b0ba32":"from sklearn.preprocessing import MinMaxScaler\n\n\ntransformer = MinMaxScaler()\ntransformer.fit(x)\nx = transformer.transform(x)\nx","29106159":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=10)\n# random_state shuffles the dataset randomly into training and testing ","96a03474":"from sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\nfrom sklearn.metrics import confusion_matrix ,classification_report,accuracy_score","fbc78247":"clf_ada= AdaBoostClassifier()\n\nclf_ada.fit(x_train,y_train)\npred=clf_ada.predict(x_test)\nprint('accuracy score through AdaBoostClassifier is :',round((accuracy_score(y_test,pred)),3)*100)\nprint(\"-----------------------------------------------------------------------------------------------\")\nprint()\nprint('classification report is')\nprint(classification_report(y_test,pred))\nprint(\"-----------------------------------------------------------------------------------------------\")\nprint('confusion matrix is')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')","787afdb3":"print(classification_report(y_test,pred))","f89df487":"clf_rf = RandomForestClassifier()\n\nclf_rf.fit(x_train,y_train)\npred_r=clf_rf.predict(x_test)\nprint('Accuracy score through Random Forest is :',round((accuracy_score(y_test,pred_r)),3)*100)\nprint(\"-----------------------------------------------------------------------------------------------\")\n# print(round((accuracy_score(y_test,pred_r)),3))\nprint('Classification Report is')\n\nprint(classification_report(y_test,pred_r))\nprint('Confusion Matrix is')\nprint(\"-----------------------------------------------------------------------------------------------\")\nprint(confusion_matrix(y_test,pred_r))\nprint('\\n')\n","01adb122":"print(classification_report(y_test,pred_r))","2fa14af5":"clf_tree= tree.DecisionTreeClassifier()\n\nclf_tree.fit(x_train,y_train)\npred_tree=clf_tree.predict(x_test)\nprint(\"Accuracy score through DecisionTreeClassifier is :\",round((accuracy_score(y_test,pred_tree)),3)*100)\nprint(\"-----------------------------------------------------------------------------------------------\")\n\nprint('classification report is')\nprint(classification_report(y_test,pred_tree))\nprint(\"-----------------------------------------------------------------------------------------------\")\nprint('confusion matrix is')\nprint(confusion_matrix(y_test,pred))\nprint('\\n')","b3262451":"print(classification_report(y_test,pred_tree))","80e4a368":"\nprint(clf_rf.predict([[70,1,3,198,235,1,0,187,0,63,0,1,1]]))","57bb5038":"**RandomForestClassifier**","bed03ab7":"**DecisionTreeClassifier**","880129ff":"**scaling the features that we can input in classifier**","e51fcead":"**3.Making visualizations on basis of gender**","5ead67ff":"***Checking the datatype of each column***","f6169368":"**1-> male\n0-> female**","96f5ef68":"# MAKING VISUALIZATIONS FROM THE DATASET","685bbe60":"**sample prediction using best achieved model on random data**","b83efb41":"**2.Making visualizations on basis of AGE**","405b531e":"**---------------------------------------------------------------------------------------------------------------------------------------------------------------------**","4d5e724e":"**Columns in the data set**","b28a5286":"**1.Count of each feature and one label**","82d60005":"# BUILDING THE MODEL\n\n\n**We will be using three classifiers i;e Adaboost,RandomForest,Descision tree**\n\n","10664eb9":"# **Extracting features and labels from dataset**","59289f18":"**Ada boost classifier**","1a6d86af":"**splitting the data set into train and test:**\n\n**training dataset->80% of actual datset**\n\n**testing dataset ->20% of actual dataset**","8d18f742":"**-----------------------------------------------------------------------END--------------------------------------------------------------------------------------**","051dedab":"**in gender coloumn :**\n\n\n**1-> male**\n\n\n**0->female**","422cc01b":"**1 refers to person having heart attack**\n\n**0 refers to person not having or low chances of heart attack**"}}