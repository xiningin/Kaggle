{"cell_type":{"7ca06b2e":"code","063e5d42":"code","f73b8bd0":"code","d35bf327":"code","668cee1c":"code","44935485":"code","75d2e681":"code","d225611c":"code","31e06779":"code","df9fd026":"code","a2864c0c":"code","f146359e":"code","dc0752ea":"code","fe667282":"code","7e42bf91":"code","28da6890":"code","c226adb3":"code","25380f52":"code","28a244ef":"code","28832992":"code","f9493048":"code","5a061f98":"code","da52d034":"code","a598af5b":"code","07bd13ec":"code","953eebdc":"markdown","06b34e60":"markdown","4f0bc0cf":"markdown","d13dbbb1":"markdown","dad3aecb":"markdown","34492b15":"markdown","d2e04607":"markdown","541eeb92":"markdown","c1bccc34":"markdown","0e1909ba":"markdown","707373a9":"markdown","10a46a83":"markdown","dc6e3019":"markdown"},"source":{"7ca06b2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","063e5d42":"#Importation of usefull libraries.\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\nimport geopandas as gpd\n\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap","f73b8bd0":"def piechart(df, col1, col2, desc):\n    \"\"\"\n    Develops and displays a pie chart from a label \/ aggregate column pair within\n    a dataframe.\n    \n    Keyword arguments:\n    \n    df     Dataframe containing the label \/ aggregate column pair.\n                Pandas dataframe\n                \n    col1   aggregate column name.\n                String\n                \n    col2   label column name.\n                String\n                \n    desc   Title of the chart\n                String\n    \"\"\"\n    plt.figure(1, figsize=(40,20))\n    the_grid = GridSpec(2, 2)\n    cmap = plt.get_cmap('Spectral')\n    colors = [cmap(i) for i in np.linspace(0, 1, 8)]\n\n    plt.subplot(the_grid[0, 1], aspect=1, title=desc)\n    type_show_ids = plt.pie(df[col1], labels=df[col2], autopct='%1.1f%%', shadow=True, colors=colors)\n    return plt.show()\n\ndef barchart(df, col1, col2):\n    \"\"\"\n    Develops and displays a bar chart from a label \/ aggregate column pair within\n    a dataframe.\n    \n    Keyword arguments:\n    \n    df     Dataframe containing the from a label \/ aggregate column pair.\n                Pandas dataframe\n                \n    col1   label column name.\n                String\n                \n    col2   aggregate column name..\n                String\n                \n    \"\"\"\n    plt.figure(figsize=(16, 8))\n    g = sns.barplot(x=df[col1][:-1], y=df[col2])\n    g.set_xticklabels(g.get_xticklabels(), rotation=90)\n    return plt.show()\n\ndef stacked_barchart(df, col):\n    \"\"\"\n    Develops and displays a stacked bar chart from a column containing the stacks \n    within a dataframe.\n    \n    Keyword arguments:\n    \n    df     Dataframe containing the stack column .\n                Pandas dataframe\n                \n    col    stack column name.\n                String\n                \n    \"\"\"\n    return df.set_index(col).reindex(df.set_index(col).sum().sort_values().index, axis=1)\\\n            .T.plot(kind='bar', stacked=True,\n                    colormap=ListedColormap(sns.color_palette(\"GnBu\", 10)),\n                    figsize=(16,8))\n\ndef plot_choropleth(gdf, df, col, desc, m):\n    \"\"\"\n    Develops and displays a choropleth map illustrating quantities accross states.\n    \n    Keyword arguments:\n    \n    gdf     Geodataframe containing the state boundaries.\n                Geopandas dataframe\n    \n    df     Dataframe containing the column with the quatity.\n                Pandas dataframe\n                \n    col    quantity column name.\n                String\n                \n    desc   Title of the map\n                String\n    \n    m      The initial folium map\n    \"\"\"\n    Choropleth(geo_data=gdf.__geo_interface__,\n           data=df[col],\n           key_on='feature.id',\n           fill_color='YlGnBu',\n           legend_name=desc).add_to(m)\n    return m\n\ndef slice_dataframe(df, col, slice_param):\n    \"\"\"\n    creates a new dataframe which is a slice of an initial dataframe\n    \n    Keyword arguments:\n    \n    df             Dataframe containing the dependent \/ independent variable pair.\n                    Pandas dataframe\n                \n    col            Column where the condition operates.\n                    String\n    \n    slice_param    The equivalent of the condition\n                    String\n                \n    \"\"\"\n    name = df.loc[df[column_name] == slice_param]\n    return name","d35bf327":"\npip install openpyxl","668cee1c":"\nxls = pd.ExcelFile('..\/input\/highway-accidents-in-nigeria-q22020\/Road transport Q2 2020.xlsx')\ndf1 = pd.read_excel(xls, sheet_name='Causative factors of RTC')\ndf1.tail()","44935485":"causes_by_state = df1.loc[1:38, :]\nheader = df1.loc[0]\ncauses_by_state.columns = header\ncauses_by_state.reset_index(inplace=True, drop=True)\ncauses_by_state\n\nbarchart(causes_by_state, 'STATE', 'TOTAL')","75d2e681":"nigeria_roads = gpd.read_file('..\/input\/nigeria-roads\/roads_nga\/Roads_NGA.shp')\nnigeria_roads.head()","d225611c":"nigeria_states = gpd.read_file('..\/input\/nigeria-states-shp\/Nigeria_states\/Nigeria_Poly.shp')\nnigeria_states.head()","31e06779":"nigeria = gpd.sjoin(nigeria_roads, nigeria_states, op='intersects')\nnigeria.head()","df9fd026":"\nnigeria['geometry'] = nigeria['geometry'].to_crs(epsg=3857)\n\n\nnigeria['length'] = nigeria.geometry.map(lambda x: x.length\/1000)\nnigeria.head()","a2864c0c":"kilometers_per_state = pd.DataFrame()\nkilometers_per_state['kilometers'] = nigeria.groupby('name')['length'].sum()\nkilometers_per_state.reset_index(inplace=True, drop=True)\nnew_row = [kilometers_per_state.sum()]\nkilometers_per_state = kilometers_per_state.append(new_row, ignore_index=True)","f146359e":"kilometers_per_state.index = causes_by_state.index\nkilometers_per_state.tail()","dc0752ea":"accidents_per_km = pd.DataFrame()\naccidents_per_km = pd.concat([kilometers_per_state, causes_by_state], axis=1)\n\naccidents_per_km['acc_per_km'] = accidents_per_km.TOTAL\/accidents_per_km.kilometers\n\naccidents_per_km.tail()","fe667282":"accidents_per_km['normalized_acc_per_km'] = accidents_per_km['acc_per_km'].apply(lambda x: (x - 0.0007433265339199293) \/ (0.1704142172182282 - 0.0007433265339199293) *10)\n\naccidents_per_km.head()","7e42bf91":"stats = pd.DataFrame()\nfor col in ['kilometers', 'TOTAL', 'acc_per_km', 'normalized_acc_per_km']:\n    stats[col] = accidents_per_km[col]\nstats.index = accidents_per_km.STATE \nstats = stats.iloc[:-1, :]\nstats.tail()","28da6890":"state = gpd.GeoDataFrame()\n\n\nstate['geometry'] = nigeria_states.geometry\nstate.index = nigeria_states.name\nstate.head()","c226adb3":"m_1 = folium.Map(location=[7.72, 8.56], tiles='cartodbpositron', zoom_start=5)\n\na = plot_choropleth(state, stats, 'normalized_acc_per_km', 'relative state accidents per kilometer', m_1)\na","25380f52":"m_2 = folium.Map(location=[7.72, 8.56], tiles='cartodbpositron', zoom_start=5)\n\nb = plot_choropleth(state, stats, 'TOTAL', 'number of  accidents in states', m_2)\nb","28a244ef":"key = pd.DataFrame()\nkey = df1.iloc[41:61, :2]\n\n\nlegends = pd.DataFrame()\nheader = key.iloc[1]\nlegends = key.iloc[2:, :]\nlegends.columns = ['causative_factors', 'code']\nlegends.reset_index(inplace=True, drop=True)\n#legends.drop(['42'], axis=1)\nlegends['causative_factors'] = legends.causative_factors.map(lambda x: x.split('(')[0])\nlegends","28832992":"road_acc = pd.DataFrame()\nroad_acc = causes_by_state.transpose(copy=True)\n\n\nroad_acc = road_acc.iloc[:-1, :]\nheader = road_acc.iloc[0]\nroad_acc.columns = header\nroad_acc.reset_index(drop=False, inplace=True)\n\nroad_acc.rename(columns={0: 'key'}, inplace=True)\nroad_acc = road_acc.rename_axis(\"States\", axis=\"columns\")\ncauses = road_acc.iloc[1:, :]\nroad_acc = road_acc.iloc[1:, :-1]\n\n\n\nbarchart(causes, 'key', 'Total')","f9493048":"stacked_barchart(road_acc, 'key')","5a061f98":"b = np.array([1, 2, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 3, 14])\na = pd.Series(b)\naccidents_per_vehicles = pd.read_excel(xls, sheet_name='Vehicle Involved inRTC')\naccidents_per_vehicles = accidents_per_vehicles.transpose()\naccidents_per_vehicles = accidents_per_vehicles.iloc[1:-1, 1:]\naccidents_per_vehicles.columns = ['vehicles', 'total']\naccidents_per_vehicles.reset_index(drop=True, inplace=True)\naccidents_per_vehicles['number'] = a\naccidents_per_vehicles.sort_values(by=['number'], ascending=True, inplace=True)\naccidents_per_vehicles.tail()","da52d034":"piechart(accidents_per_vehicles, 'total', 'vehicles', 'accidents by vehicle type')\n\nbarchart(accidents_per_vehicles, 'vehicles', 'total')","a598af5b":"deaths_per_sex = pd.read_excel(xls, sheet_name='Sex dist. of person killed')\ndeaths_per_age = deaths_per_sex.iloc[-3:-1, :-1]\ndeaths_per_age.columns = ['groups', 'frequency']\ndeaths_per_age.head()\ndeaths_per_sex = deaths_per_sex.iloc[2:6, :-1]\ndeaths_per_sex.columns = ['groups', 'frequency']\ndeaths_per_sex.head()\n","07bd13ec":"a = [deaths_per_sex, deaths_per_age]\nb = ['deaths per sex', 'deaths per age']\nfor df, desc  in zip(a, b):\n    piechart(df, 'frequency', 'groups', desc)","953eebdc":"# **Visualization of accidents per vehicle type**","06b34e60":"# **Accident numbers in each state of the Nigerai**","4f0bc0cf":"# **Data sets**\n\nIn this work a total of 5 oringinal datasets were used, with two being geodataframes. However, other dataframes were developed majorly by slicing.\nAlso, a practice of dipicting the first 5 rows of each dataframe was adopted.\n\nPlease refer to the datasets' pages to obtain usefull information about them  ","d13dbbb1":"# Insights\n\nThe number of accidents per kilometer (acc\/km) appears to be uniform across the geopolitical zones (North Central (NC), North East (NE), North West (NW), South West (SW), South East (SE) and South (SS)). with the north generally showing low acc\/km apperently as a result of longer killometers of road since the number of accidents in the region are quite high.\nEvidently the SW geopolitical zone have the highest acc\/km.\n\nThe disparity in the these levels arise from many factors, ranging from cultural uniqueness of the area through wealth of the area and to condition of the road facilities.\n\n\nA look into the causes of the accident shows that speeding violation responsible for a majority of the accidents, about five time more than any other cause.\n\n\nFurthermore, most accidents occur in cars, with motocycle just trailing while trucks and minibusses are almost tied.\n\nFinally, it is worthy to note that this data was colleted during the Covid-19 Pandemic when partial lockdown was imposed in some areas and as such a few descrepancies with such periods of previous years may be observed.  ","dad3aecb":"# Conclusion\n\nCorrections and additions may be made to this notebook in the future.\nDiscussions and suggestions are welcome.\n\nFinally, kindly upvote if this was helpfull.","34492b15":"# **Accidents density in each state of the country**\n\nThe accident per kilometers was used as a means giving appropriate reference than plotting mere numbers.","d2e04607":"# **Stacked bar chart**","541eeb92":"# **Installation of neccessary dependencies**\n\nIn order to work on an xlsx file in python 3, the openpyxl must be installed.","c1bccc34":"# **Coodinate reference system conversion**\n\nThis was done in order to employ a more acceptable CRS for calculating the length of the roads.","0e1909ba":"  # **DEFINING FUNCTIONS**\n\nA few functions which will be used to plot maps and graphs were defined. Illustrations of the functions are outlined in their respective docstrings.","707373a9":"# **1st Bar chart**\n\nThis bar chart was plotted to show the number of accidents by state.","10a46a83":"# Introduction\n\nIn this notebook i have attempted to mine insigths about accidents in all 36 states of Nigeria during the second quarter of the year 2020. These Insigths can be helpfull to abate road accidents in the country, the analysis is done considering a few demography and segmentation which includes vehicles, agegdroups and sex.\n\nIt is imperative to state that the insigths that can be drawn are by no means exhaustive and as such i welcome ideas, suggestions and criticism of the code as code optimization may be lacking. The scope of this notebook is bassically exploratory data analysis.    \n","dc6e3019":"# **visualization of injuries from accidents across demography**"}}