{"cell_type":{"c7a6e394":"code","1933242a":"code","2032d192":"code","bc960a58":"code","51ab116a":"code","f92f03d0":"code","ac0e9050":"code","c0ddd61d":"code","fbbb4994":"code","95ddc417":"code","72281106":"code","a25301cb":"code","730cc6d7":"code","0bd35e35":"code","c2b4f52e":"code","ded6405d":"code","a9dad63b":"code","0132a94f":"code","58f54408":"code","1a63d471":"code","ba069934":"code","99ead665":"code","06a95991":"code","25621b96":"code","3662d865":"code","cdb0fa9e":"code","f8d63232":"code","29794bea":"code","5bf3df8c":"code","bc8557fa":"code","3111e22e":"code","54230b1e":"code","ecef0bcc":"code","f2f9a59c":"code","580685b9":"code","14708aad":"code","2febd6c9":"code","f6f5f0b6":"code","809003c4":"code","35a4a88a":"code","4a9312b7":"code","bd848a3d":"code","47c3d574":"code","1b3861d8":"code","4f69da4b":"code","77928f41":"code","6b04bca6":"code","3befa26c":"code","bbd3de15":"code","8128ebb1":"code","5dca6ba5":"code","34e602f0":"code","e6eea97e":"code","9396bdbf":"code","33f82943":"code","851b3438":"markdown","e84a260d":"markdown","75675b12":"markdown","ca53c9a4":"markdown","ebb50237":"markdown","404fdf05":"markdown","b903985c":"markdown","a62d9c23":"markdown","922689e6":"markdown","e752aed0":"markdown","5b40cd30":"markdown","47b81a6f":"markdown","f103ba9e":"markdown","f9be8571":"markdown","499080f5":"markdown","20847769":"markdown","386ecea3":"markdown","f15e7f48":"markdown","d2b0391f":"markdown","8e291e80":"markdown","ca598e8a":"markdown","dc473dba":"markdown"},"source":{"c7a6e394":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1933242a":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport imblearn\nimport sklearn as sk\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.feature_selection import f_classif, mutual_info_classif","2032d192":"import warnings\nwarnings.filterwarnings(\"ignore\")","bc960a58":"def get_boxplot(column):\n    \n    # plot boxplots for numerical features\n    \n    fig, ax = plt.subplots(figsize=(14, 4))\n    sns.boxplot(x='default', y=column,\n                data=data,\n                ax=ax, showmeans=True)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()\n    \ndef vis_importance(xcol, ycol):\n    \n    # plot histograms for categorical features to visualize\n    # dependence on target variable\n    # xcol - feature to explore, ycol - target variable\n    \n    pd.crosstab(data[xcol], data[ycol]).plot(kind='bar')\n    plt.title('Default frequency for {}'.format(xcol))\n    plt.xlabel(xcol)\n    plt.ylabel('Frequency of default')\n    plt.show()\n    \ndef outliers_detection(data, col):\n    \n    # detect outliers in data[col]\n    \n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    IQR = perc75 - perc25\n    left = perc25 - 1.5 * IQR\n    right = perc75 + 1.5 * IQR\n    print('min: {0}, max: {1}'.format(data[col].min(), data[col].max()))\n    print('outlier boundaries: [{0}, {1}]'.format(left, right))\n    if len(data[~data[col].between(left, right)]) > 0:\n        print('ratio of outliers: {}'.format(len(data[(~data[col].between(left, right))&(~data[col].isna())])\/len(data)))\n\ndef drop_outliers(data, col):\n    \n    # detect outliers in data[col]\n    \n    perc25 = data[col].quantile(0.25)\n    perc75 = data[col].quantile(0.75)\n    IQR = perc75 - perc25\n    return data[(data[col].between(perc25 - 1.5 * IQR, perc75 + 1.5 * IQR))|(data[col].isna())]","51ab116a":"data = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/sf-dst-scoring\/test.csv')","f92f03d0":"test.info()","ac0e9050":"data.info()","c0ddd61d":"data.isnull().sum()","fbbb4994":"# convert to datetime\ndata.app_date = pd.to_datetime(data.app_date)\ntest.app_date = pd.to_datetime(test.app_date)","95ddc417":"data","72281106":"test","a25301cb":"# fill nan with the most frequent class\nval_counts = data['education'].value_counts()\nmax_value = val_counts.max()\ndata['education'].fillna(val_counts[val_counts == max_value].index[0],\n                         inplace=True)\n\nval_counts = test['education'].value_counts()\nmax_value = val_counts.max()\ntest['education'].fillna(val_counts[val_counts == max_value].index[0],\n                         inplace=True)","730cc6d7":"data.shape, test.shape","0bd35e35":"# feature engeneering\ntoday = pd.to_datetime('27JULY2020')\ndata['days_passed'] = (today - data.app_date).dt.days\ndata['app_date_month'] = data['app_date'].dt.month\ndata['app_date_day'] = data['app_date'].dt.day\ndata['app_date_interval'] = data['app_date_day'].apply(lambda x: 1 if 8 < x < 22 else 0)\ndata['app_date_of_week'] = data['app_date'].dt.dayofweek\n\ntest['days_passed'] = (today - test.app_date).dt.days\ntest['app_date_month'] = test['app_date'].dt.month\ntest['app_date_day'] = test['app_date'].dt.day\ntest['app_date_interval'] = test['app_date_day'].apply(lambda x: 1 if 8 < x < 22 else 0)\ntest['app_date_of_week'] = test['app_date'].dt.dayofweek","c2b4f52e":"data.shape, test.shape","ded6405d":"data['app_date'].max()","a9dad63b":"data['app_date'].min()","0132a94f":"list_of_exchange_trends = pd.read_csv('..\/input\/list-of-exchange-2014\/list_of_exchange.csv', sep=';')\nlist_of_exchange_trends.app_date = pd.to_datetime(list_of_exchange_trends.app_date)\nlist_of_exchange_trends = list_of_exchange_trends.dropna()","58f54408":"list_of_exchange_trends.info()","1a63d471":"list_of_exchange_trends","ba069934":"data","99ead665":"data = data.merge(list_of_exchange_trends, how='left', left_on='app_date', right_on='app_date')\ntest = test.merge(list_of_exchange_trends, how='left', left_on='app_date', right_on='app_date')","06a95991":"inflation_rate = pd.read_csv('..\/input\/inflation-rate\/inflation_rate.csv', sep=';')\ninflation_rate","25621b96":"data = data.merge(inflation_rate, how='left', left_on='app_date_month', right_on='app_date_month')\ntest = test.merge(inflation_rate, how='left', left_on='app_date_month', right_on='app_date_month')","3662d865":"days_off = pd.read_csv('..\/input\/days-off-2014-russia-2\/days_off.csv', sep=';')\ndays_off.app_date = pd.to_datetime(days_off.app_date)\ndays_off","cdb0fa9e":"data = data.merge(days_off, how='left', left_on='app_date', right_on='app_date')\ntest = test.merge(days_off, how='left', left_on='app_date', right_on='app_date')","f8d63232":"data.shape, test.shape","29794bea":"data.isnull().sum()","5bf3df8c":"test.isnull().sum()","bc8557fa":"data.sample(2)","3111e22e":"# columns by types\nnum_col = ['days_passed', 'age', 'decline_app_cnt', 'score_bki',\n          'region_rating', 'income', 'exchange_trend', 'inflation_rate']\ncat_col = ['app_date_month', 'app_date_day', 'app_date_of_week', 'education', 'home_address', 'work_address', 'sna',\n          'first_time']\nbin_col = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport', 'day_off', 'app_date_interval']","54230b1e":"sns.countplot(data.default)\nplt.title('Histogram for default')","ecef0bcc":"fig, axes = plt.subplots(3, 3, figsize=(13,13))\nfor col, i in zip(num_col, range(9)):\n    sns.distplot(data[col], kde=False, ax=axes.flat[i])\nfig.suptitle('Histograms for numerical features');","f2f9a59c":"# normalization using log func\ncol_to_log = ['age', 'income']\nfig, axes = plt.subplots(3, 3, figsize=(15,15))\nfor col, i in zip(num_col, range(9)):\n    if col in col_to_log:\n        sns.distplot(data[col][data[col]>0].apply(lambda w: np.log(w)),\n                     kde=False, ax=axes.flat[i])\n    else: sns.distplot(data[col], kde=False, ax=axes.flat[i])\naxes[0][1].set_title('log(age)')\naxes[1][2].set_title('log(income)')\nfig.suptitle('Histograms for numerical features');","580685b9":"data[col_to_log] = data[col_to_log].apply(lambda w: np.log(w))\ntest[col_to_log] = test[col_to_log].apply(lambda w: np.log(w))","14708aad":"corrmat = data[num_col].corr()\nf, ax = plt.subplots(figsize=(12, 7))\nchart = sns.heatmap(corrmat, vmax=.8, square=True, annot=True)\nchart.set_xticklabels(chart.get_xticklabels(), rotation=45)\nbottom, top = chart.get_ylim()\nplt.title('Correlation matrix')\nax.set_ylim(bottom + 0.5, top - 0.5);","2febd6c9":"for col in cat_col + bin_col:\n    vis_importance(col, 'default')","f6f5f0b6":"for col in num_col:\n    get_boxplot(col)","809003c4":"# encoding categorical cols\nfor col in ['education', 'sex', 'car', 'car_type', 'foreign_passport', 'day_off', 'app_date_day']:\n    encoded_vals, _ = pd.factorize(data[col])\n    data[col] = encoded_vals\n    \nfor col in ['education', 'sex', 'car', 'car_type', 'foreign_passport', 'day_off', 'app_date_day']:\n    encoded_vals, _ = pd.factorize(test[col])\n    test[col] = encoded_vals","35a4a88a":"# check importance of categorical variables\nimp_cat = pd.Series(mutual_info_classif(data[bin_col + cat_col],\n                                        data['default'], discrete_features =True),\n                    index = bin_col + cat_col)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","4a9312b7":"# check importance of numerical variables\nimp_num = pd.Series(f_classif(data[num_col],\n                              data['default'])[0], index=num_col)\nimp_num.plot(kind='barh')\nplt.title('F-value for numerical variables')\nplt.xlabel('F-value')","bd848a3d":"data.shape","47c3d574":"test.shape","1b3861d8":"# categorical variables -> dummy-variables\nX_cat = sk.preprocessing.OneHotEncoder(sparse=\n                        False).fit_transform(data[cat_col].values)\n\ntest_cat = sk.preprocessing.OneHotEncoder(sparse=\n                        False).fit_transform(test[cat_col].values)","4f69da4b":"# polynomial feature engeneering\nX_num = PolynomialFeatures(2).fit_transform(data[num_col].values)[:,1:]\n\ntest_num = PolynomialFeatures(2).fit_transform(test[num_col].values)[:,1:]","77928f41":"X_num = sk.preprocessing.StandardScaler().fit_transform(X_num)\n\ntest_num = sk.preprocessing.StandardScaler().fit_transform(test_num)","6b04bca6":"X = np.hstack([X_num, X_cat, data[bin_col].values])\ny = data['default']\n\nX.shape, y.shape","3befa26c":"X_train, X_test, y_train, y_test = sk.model_selection.train_test_split(X, y, test_size=0.20, shuffle=True, random_state=45)","bbd3de15":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0431\u043e\u0440\u043e\u043a\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","8128ebb1":"client_id_test = test.client_id\ntest = np.hstack([test_num, test_cat, test[bin_col].values])","5dca6ba5":"C = np.logspace(0, 4, 10)\nmethods = ['liblinear', 'newton-cg', 'sag', 'saga', 'lbfgs']\nhyperparameters = dict(C=C, solver=methods)\nmodel = sk.linear_model.LogisticRegression(class_weight='balanced')\nmodel.fit(X_train, y_train)\n\nclf = sk.model_selection.GridSearchCV(model, hyperparameters, cv=5, verbose=0)\n\nbest_model = clf.fit(X_train, y_train)\n\nprint('\u041b\u0443\u0447\u0448\u0438\u0439 Solver:', best_model.best_estimator_.get_params()['solver'])\nprint('\u041b\u0443\u0447\u0448\u0435\u0435 C:', best_model.best_estimator_.get_params()['C'])","34e602f0":"log_reg = sk.linear_model.LogisticRegression(max_iter=500, class_weight='balanced')\nmodel_log_reg = log_reg.fit(X_train, y_train)\ny_pred_probs = model_log_reg.predict_proba(X_test)[:, 1]\n\nfpr, tpr, threshold = sk.metrics.roc_curve(y_test, y_pred_probs)\nroc_auc = sk.metrics.roc_auc_score(y_test, y_pred_probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","e6eea97e":"log_reg = sk.linear_model.LogisticRegression(C=464.16, solver='liblinear', max_iter=500)\nmodel_log_reg = log_reg.fit(X, y)\ny_pred_probs = model_log_reg.predict_proba(test)","9396bdbf":"my_submission = pd.DataFrame({'client_id': client_id_test, \n                              'default': y_pred_probs[:, 1]})\nmy_submission.to_csv('submission.csv', index=False)","33f82943":"my_submission.shape","851b3438":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432\u043b\u0438\u044f\u0435\u0442 \u043b\u0438 \u043a\u0430\u043a-\u0442\u043e \u0442\u043e\u0442 \u0444\u0430\u043a\u0442, \u0447\u0442\u043e \u0437\u0430\u044f\u0432\u043a\u0430 \u0431\u044b\u043b\u0430 \u043f\u043e\u0434\u0430\u043d\u0430 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0438\u043b\u0438 \u043f\u0440\u0430\u0437\u0434\u043d\u0438\u0447\u043d\u044b\u0439 \u0434\u0435\u043d\u044c, \u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u0432?","e84a260d":"# EDA & Data Preprocessing","75675b12":"## Distribution of numerical features","ca53c9a4":"### Statistical assessment of categorical variables","ebb50237":"\u0414\u043e\u0433\u0430\u0434\u043a\u0430 \u043e \u043c\u0430\u043b\u043e\u0439 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'sex' \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u043b\u0430\u0441\u044c + \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0442\u0443 \u0436\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'car' - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 'app_day_of_week' \u0438 \u043c\u0435\u0441\u044f\u0446 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 'app_date_month'.","404fdf05":"## Correlation matrix","b903985c":"\u041f\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044e \u0432\u0441\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430. \u0420\u0430\u0437\u0432\u0435 \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'sex' \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0441\u043b\u0430\u0431\u044b\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u043e\u0440\u043e\u043c. \u0425\u043e\u0442\u044f \u0441\u0440\u0435\u0434\u0438 \u0436\u0435\u043d\u0449\u0438\u043d ~ \u043d\u0430 10\u043a \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u0435\u0439 \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0436\u0435\u043d\u0449\u0438\u043d \u0432 \u0446\u0435\u043b\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e ~ \u043d\u0430 10\u043a \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d.","a62d9c23":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 'age', 'income' \u043a \u0431\u043e\u043b\u0435\u0435 \"\u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443\" \u0432\u0438\u0434\u0443.","922689e6":"# Data Preprocessing","e752aed0":"## Features' significance","5b40cd30":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0435\u0449\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0438\u043d\u0434\u0435\u043a\u0441 \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c","47b81a6f":"\u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439: \"\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435\" \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0432\u0441\u0435\u0433\u043e \u043e\u043a\u043e\u043b\u043e 12%. \u042f \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u043f\u043e\u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 over-\\undersampling, \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c SMOTE, \u0432\u043e\u0442 [\u0437\u0434\u0435\u0441\u044c](https:\/\/machinelearningmastery.com\/combine-oversampling-and-undersampling-for-imbalanced-classification\/) \u0445\u043e\u0440\u043e\u0448\u043e \u043e\u0431 \u044d\u0442\u043e\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e. \u041e\u0434\u043d\u0430\u043a\u043e, \u044d\u0442\u043e \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439.\n\n\u0412 \u0441\u0435\u0442\u0438 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0442\u043e\u0432 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0430\u0442 \u043d\u0430\u0441 \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f \u0441 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u043a\u043b\u0430\u0441\u0441\u043e\u0432 (class imbalance) \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u043e\u043d\u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0438\u0437 \u0440\u0435\u0434\u043a\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430, \u0438\u043b\u0438 \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0447\u0430\u0441\u0442\u044c \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u0438\u0437 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \u042d\u0442\u0438\u043c \u043f\u043e\u0441\u0442\u043e\u043c \u044f \u0445\u043e\u0447\u0443 \u043f\u0440\u043e\u044f\u0441\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u00ab\u043f\u0440\u043e\u043a\u043b\u044f\u0442\u0438\u0435\u00bb \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u2013 \u044d\u0442\u043e \u043c\u0438\u0444, \u0432\u0430\u0436\u043d\u044b\u0439 \u043b\u0438\u0448\u044c \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u0434\u0430\u0447. [\u0421\u0442\u0430\u0442\u044c\u044f \u043d\u0430 \u0425\u0430\u0431\u0440\u0435.](https:\/\/habr.com\/ru\/post\/349078\/)\n\n","f103ba9e":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u044b \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u0430 \u0440\u0443\u0431\u043b\u044f \u043d\u0430 \u043d\u0435\u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u0434\u043e\u043b\u0433\u0430. \u0411\u0435\u0440\u0443 \u043a\u0443\u0440\u0441 \u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438. \u0412 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435 \u0442\u0430\u043a\u043e\u0439 \u0444\u0430\u043a\u0442\u043e\u0440 \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0427\u0435\u0440\u0435\u0437 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432\u044b\u0439\u0434\u0443\u0442 \u0437\u0430 \u0440\u0430\u043c\u043a\u0438 \u043f\u043e\u043f\u0430\u0432\u0448\u0438\u0445 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0431\u0443\u0434\u0443\u0442 \u043d\u0435\u0432\u0435\u0440\u043d\u043e \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u044c\u044e. \u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0439, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0443\u0440\u0441 \u0440\u0443\u0431\u043b\u044f \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430(\u043d\u0430 \u043c\u043e\u043c\u0435\u043d\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u0437\u0430\u044f\u0432\u043a\u0438) \u043a \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0437\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 27 \u0434\u043d\u0435\u0439. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u0435\u0442 \u043d\u0435 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0443\u0440\u0441\u0430 \u0440\u0443\u0431\u043b\u044f, \u0430 \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u044e(\u0440\u043e\u0441\u0442, \u043f\u0430\u0434\u0435\u043d\u0438\u0435, \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435) \u0432 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434","f9be8571":"### Visual assessment of categorical variables","499080f5":"# Data loading","20847769":"### Visual assessment of numerical variables","386ecea3":"# Useful functions","f15e7f48":"### Statistical assessment of numerical variables","d2b0391f":"# Model fitting","8e291e80":"\u0418\u0437 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u0430\u043c\u044b\u043c \u0441\u0438\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0433\u043e \u0431\u044e\u0440\u043e, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435 \u044f\u0441\u043d\u043e, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0438 \u043a\u0430\u043a\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430), \u043e\u0442\u043a\u0430\u0437\u044b","ca598e8a":"\u0415\u0441\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0443\u0440\u043e\u0432\u043d\u0435\u043c \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438 \u0438 \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0448\u043b\u043e \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u043b\u0438 \u0437\u0430\u044f\u0432\u043a\u0443 \u043d\u0430 \u043a\u0440\u0435\u0434\u0438\u0442 \u0438 \u043c\u0435\u0436\u0434\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u0438 \u0438 \u0440\u043e\u0441\u0442\u043e\u043c \u043a\u0443\u0440\u0430 \u0432\u0430\u043b\u044e\u0442 \u0435\u0441\u0442\u044c \u0438\u043d\u0444\u043b\u044f\u0446\u0438\u044f. \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e.","dc473dba":"## Default - target variable"}}