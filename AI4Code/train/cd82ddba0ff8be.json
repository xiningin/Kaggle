{"cell_type":{"ea0df12a":"code","b613c5dc":"code","52b37d2a":"code","5c1b51e9":"code","45745dc4":"code","e451fb12":"code","2b5bb142":"code","c6881d9b":"code","e6b4c454":"code","713842c3":"code","588fcc6d":"code","bc25d6ac":"code","ae128fbc":"code","be67a4f0":"code","e2d04d5c":"code","0e23a0ec":"code","b966165f":"code","44585cae":"code","b5d27298":"code","70483ab9":"code","19bbd37a":"code","5c0b924a":"code","040a7185":"code","0a14cd09":"code","a005f1cc":"code","75204d86":"code","3d773b53":"code","1b67cb85":"code","c09dfb28":"code","efb200e8":"code","51e815fa":"code","8aae7510":"code","5169b977":"code","30d6b567":"code","a81d5f62":"code","462ed7f9":"code","3a000362":"code","2fb8f8bf":"code","99176072":"code","026145ec":"code","0ca13fa4":"code","01bb741e":"code","90e2da45":"code","b5f9e734":"code","d64cb2d6":"code","9024ac87":"code","cd7d3208":"code","0229f8a3":"code","7846b163":"code","d8f6c567":"code","b4e022e4":"code","93ca9e9f":"code","355bd313":"code","22aaa0de":"code","8b0c75a0":"code","fec2e935":"code","6b30214d":"code","0644789e":"code","c70d4402":"code","d58a978f":"code","c1ffcd17":"code","7799329f":"code","67dba077":"code","5b49c624":"code","ba69ffa3":"code","7417ef8b":"code","49a2479c":"code","fbe3e17a":"code","e9416cbd":"code","6dbc9c5f":"code","20ddd616":"code","41195bfe":"code","77483be1":"code","097f46f3":"code","fa5586f7":"code","18ee9c62":"code","5178cd5a":"markdown","b0364df4":"markdown","5a54add1":"markdown","881bc665":"markdown","1de6d697":"markdown","60a6a6f5":"markdown","080bba62":"markdown","1c9863e4":"markdown","3ed3df72":"markdown","cbfcd891":"markdown","3a367235":"markdown","1acd7b6e":"markdown","ff745fa5":"markdown","dc54b9e1":"markdown","8e8e5dc8":"markdown","c730456a":"markdown","5f2aa6d8":"markdown","6c15e3f0":"markdown","57ee2204":"markdown","05468016":"markdown","15dffbd4":"markdown","f4b44ab8":"markdown","c3431e7a":"markdown","3298c89f":"markdown","dafaf72f":"markdown","60c52ef6":"markdown","d626a5b8":"markdown","69e269b1":"markdown","24787386":"markdown","b11f2331":"markdown","34848568":"markdown","6b39ff26":"markdown","80f49353":"markdown","e88c03cd":"markdown"},"source":{"ea0df12a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\nimport plotly.express as px\nimport missingno\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom scipy import stats\nimport numpy as np\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b613c5dc":"dftrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf1=dftrain.copy()\ndf1temp=dftrain.copy()\ndisplay(df1)","52b37d2a":"df1.describe()","5c1b51e9":"df1.dtypes","45745dc4":"#num_cols = [\"Age\",\"Survived\",\"Pclass\",\"Fare\",\"Parch\",\"SibSp\"]\n#dftrain2 = pd.DataFrame(columns=num_cols)","e451fb12":"display(df1['Survived'].unique())","2b5bb142":"display(df1['Pclass'].unique())","c6881d9b":"display(df1['Sex'].unique())","e6b4c454":"display(df1['Age'].unique())","713842c3":"display(df1['SibSp'].unique())","588fcc6d":"display(df1['Parch'].unique())","bc25d6ac":"display(df1['Ticket'].unique())","ae128fbc":"display(df1['Fare'].unique())","be67a4f0":"display(df1['Cabin'].unique())","e2d04d5c":"display(df1['Embarked'].unique())","0e23a0ec":"display(df1.isnull().sum())","b966165f":"df1['Age']=df1['Age'].astype('str')\ndf1['Ticket']=df1['Ticket'].astype('str')\ndf1['Fare']=df1['Fare'].astype('float64')\ndf1['Cabin']=df1['Cabin'].astype('str')\ndf1['Embarked']=df1['Embarked'].astype('str')","44585cae":"display(df1[df1['Age']=='nan'])","b5d27298":"display(df1[df1['Fare']==0])","70483ab9":"display(df1[df1['Cabin']=='nan'])","19bbd37a":"display(df1[df1['Cabin']=='T'])","5c0b924a":"display(df1[df1['Ticket']=='LINE'])","040a7185":"display(df1[df1['Cabin']=='nan'])","0a14cd09":"display(df1[df1['Embarked']=='nan'])","a005f1cc":"df1=df1.dropna()","75204d86":"display(df1.isnull().sum())","3d773b53":"dfsurvived=dftrain[dftrain['Survived']==1]\ndf2=dfsurvived.copy()\ndf2temp=dfsurvived.copy()\ndisplay(df2)","1b67cb85":"df1['Age'] = df1['Age'].astype('float64')\ndf1['Cabin'] = df1['Cabin'].astype('str')\ndf1['Embarked'] = df1['Embarked'].astype('category')\ndf1['Name'] = df1['Name'].astype('str')\ndf1['Ticket'] = df1['Ticket'].astype('str')\ndf1['Sex'] = df1['Sex'].astype('category')\ndf1['Survived'] = df1['Survived'].astype('category')\ndf1['SibSp'] = df1['SibSp'].astype('int64')\ndf1['Parch'] = df1['Parch'].astype('int64')\ndf1['Pclass'] = df1['Pclass'].astype('category')\ndf1['PassengerId'] = df1['PassengerId'].astype('object')\ndf1['Fare'] = df1['Fare'].astype('float64')","c09dfb28":"df2['Age'] = df2['Age'].astype('float64')\ndf2['Cabin'] = df2['Cabin'].astype('str')\ndf2['Embarked'] = df2['Embarked'].astype('category')\ndf2['Name'] = df2['Name'].astype('str')\ndf2['Ticket'] = df2['Ticket'].astype('str')\ndf2['Sex'] = df2['Sex'].astype('category')\ndf2['Survived'] = df2['Survived'].astype('category')\ndf2['SibSp'] = df2['SibSp'].astype('int64')\ndf2['Parch'] = df2['Parch'].astype('int64')\ndf2['Pclass'] = df2['Pclass'].astype('category')\ndf2['PassengerId'] = df2['PassengerId'].astype('object')\ndf2['Fare'] = df2['Fare'].astype('float64')","efb200e8":"def categorical_eda(df1, hue=None):\n    print(df1.select_dtypes(include=['object', 'category']).nunique())\n    # Plot count distribution of categorical data\n    for col in df1.select_dtypes(include='category').columns:\n        fig = sns.catplot(x=col, kind=\"count\", data=df1, hue=hue)\n        fig.set_xticklabels(rotation=90)\n    plt.show()\n\ncategorical_eda(df1)","51e815fa":"def categorical_eda(df2, hue=None):\n    print(df2.select_dtypes(include=['object', 'category']).nunique())\n    # Plot count distribution of categorical data\n    for col in df2.select_dtypes(include='category').columns:\n        fig = sns.catplot(x=col, kind=\"count\", data=df2, hue=hue)\n        fig.set_xticklabels(rotation=90)\n    plt.show()\n\ncategorical_eda(df2)","8aae7510":"def numeric_eda(df1, hue=None):\n    display(df1.describe().T)\n    columns = df1.select_dtypes(include=np.number).columns\n    figure = plt.figure(figsize=(5, 5))\n    figure.add_subplot(1, len(columns), 1)\n    for index, col in enumerate(columns):\n        if index > 0:\n            figure.add_subplot(1, len(columns), index + 1)\n        sns.boxplot(y=col, data=df1, boxprops={'facecolor': 'None'})\n        figure.tight_layout()\n    plt.show()\n    \n    if len(df1.select_dtypes(include='category').columns) > 0:\n        for col_num in df1.select_dtypes(include=np.number).columns:\n            for col in df1.select_dtypes(include='category').columns:\n                fig = sns.catplot(x=col, y=col_num, kind='point', data=df1, height=5, aspect=1)\n                fig.set_xticklabels(rotation=90)\n    plt.show()\n        \nnumeric_eda(df1)","5169b977":"def numeric_eda(df2, hue=None):\n    display(df2.describe().T)\n    columns = df2.select_dtypes(include=np.number).columns\n    figure = plt.figure(figsize=(5, 5))\n    figure.add_subplot(1, len(columns), 1)\n    for index, col in enumerate(columns):\n        if index > 0:\n            figure.add_subplot(1, len(columns), index + 1)\n        sns.boxplot(y=col, data=df2, boxprops={'facecolor': 'None'})\n        figure.tight_layout()\n    plt.show()\n    \n    if len(df2.select_dtypes(include='category').columns) > 0:\n        for col_num in df2.select_dtypes(include=np.number).columns:\n            for col in df2.select_dtypes(include='category').columns:\n                fig = sns.catplot(x=col, y=col_num, kind='point', data=df2, height=5, aspect=1)\n                fig.set_xticklabels(rotation=90)\n    plt.show()\n        \nnumeric_eda(df2)","30d6b567":"df1temp=df1","a81d5f62":"df2temp=df2","462ed7f9":"df1 = pd.get_dummies(df1temp, columns = ['Sex'])\ndisplay(df1)","3a000362":"df2 = pd.get_dummies(df2temp, columns = ['Sex'])\ndisplay(df2)","2fb8f8bf":"df1['Age'] = df1['Age'].astype('float64')\ndf1['Sex_female'] = df1['Sex_female'].astype('int64')\ndf1['Sex_female'] = df1['Sex_male'].astype('int64')\ndf1['Survived'] = df1['Survived'].astype('int64')\ndf1['SibSp'] = df1['SibSp'].astype('int64')\ndf1['Parch'] = df1['Parch'].astype('int64')\ndf1['Pclass'] = df1['Pclass'].astype('int64')\ndf1['Fare'] = df1['Fare'].astype('float64')","99176072":"df2['Age'] = df2['Age'].astype('float64')\ndf2['Sex_female'] = df2['Sex_female'].astype('int64')\ndf2['Sex_female'] = df2['Sex_male'].astype('int64')\ndf2['Survived'] = df1['Survived'].astype('category')\ndf2['SibSp'] = df2['SibSp'].astype('int64')\ndf2['Parch'] = df2['Parch'].astype('int64')\ndf2['Pclass'] = df2['Pclass'].astype('int64')\ndf2['Fare'] = df2['Fare'].astype('float64')","026145ec":"corrmatrix=df1.corr()\nsns.heatmap(corrmatrix, annot= True)\nplt.show()","0ca13fa4":"corrmatrix2=df2.corr()\nsns.heatmap(corrmatrix2, annot= True)\nplt.show()","01bb741e":"dftrain=df1","90e2da45":"dfsurvived=df2","b5f9e734":"display(dftrain['Sex_male']) #all male passengers\ndisplay(dfsurvived['Sex_male']) #survived male passengers","d64cb2d6":"display(dftrain['Sex_female']) #all female passengers\ndisplay(dfsurvived['Sex_female']) #survived female passengers","9024ac87":"display(dftrain[dftrain['SibSp']==0]) #all passengers having 0 SibSp on board\ndisplay(dfsurvived[dfsurvived['SibSp']==0]) #all survived passengers having 0 SipSp on board","cd7d3208":"display(dftrain[dftrain['SibSp']==1])\ndisplay(dfsurvived[dfsurvived['SibSp']==1])","0229f8a3":"display(dftrain[dftrain['SibSp']==2])\ndisplay(dfsurvived[dfsurvived['SibSp']==2])","7846b163":"display(dftrain[dftrain['SibSp']==3])\ndisplay(dfsurvived[dfsurvived['SibSp']==3])","d8f6c567":"display(dftrain[dftrain['SibSp']==4])\ndisplay(dfsurvived[dfsurvived['SibSp']==4])","b4e022e4":"display(dftrain[dftrain['SibSp']==5])\ndisplay(dfsurvived[dfsurvived['SibSp']==5])","93ca9e9f":"display(dftrain[dftrain['Parch']==0]) #all passengers having 0 parch on board\ndisplay(dfsurvived[dfsurvived['Parch']==0]) #all survived passenger having 0 parch on board","355bd313":"display(dftrain[dftrain['Parch']==1])\ndisplay(dfsurvived[dfsurvived['Parch']==1])","22aaa0de":"display(dftrain[dftrain['Parch']==2])\ndisplay(dfsurvived[dfsurvived['Parch']==2])","8b0c75a0":"display(dftrain[dftrain['Parch']==3])\ndisplay(dfsurvived[dfsurvived['Parch']==3])","fec2e935":"display(dftrain[dftrain['Parch']==4])\ndisplay(dfsurvived[dfsurvived['Parch']==4])","6b30214d":"display(dftrain[dftrain['Parch']==5])\ndisplay(dfsurvived[dfsurvived['Parch']==5])","0644789e":"dftrain['Fare'].describe()","c70d4402":"display(dftrain[dftrain['Fare']==0]) #all passengers who paid 0 fare\ndisplay(dfsurvived[dfsurvived['Fare']==0]) #all survived passengers who paid 0 fare","d58a978f":"display(dftrain[dftrain['Ticket']=='LINE'])","c1ffcd17":"display(dftrain[dftrain['Fare']>100])\ndisplay(dfsurvived[dfsurvived['Fare']>100])","7799329f":"display(dftrain[dftrain['Fare']>200])\ndisplay(dfsurvived[dfsurvived['Fare']>200])","67dba077":"display(dftrain[dftrain['Fare']>300])\ndisplay(dfsurvived[dfsurvived['Fare']>300])","5b49c624":"display(dftrain[dftrain['Pclass']==1])","ba69ffa3":"display(dftrain[dftrain['Pclass']==2])","7417ef8b":"display(dftrain[dftrain['Pclass']==3])","49a2479c":"display(dftrain['Age'].describe())","fbe3e17a":"display(dftrain[dftrain['Age']<30])","e9416cbd":"display(dftrain[dftrain['Age']<10])","6dbc9c5f":"display(dftrain[dftrain['Age']==0])","20ddd616":"display(dftrain[dftrain['Age']>40])","41195bfe":"display(dftrain[dftrain['Age']>50])","77483be1":"#ignore this cell\n\n#dgenderm=dfsurvived[dfsurvived['Sex']=='male']\n#dgenderf=dfsurvived[dfsurvived['Sex']=='female']\n#dformat2=dgenderm[{'PassengerId','Name','Sex','Survived'}]\n#dformat3=dgenderf[{'PassengerId','Name','Sex','Survived'}]\n#dformat=dfsurvived[dfsurvived['Sex']=='male'].append(dfsurvived[dfsurvived['Sex']=='female'])\n#display(dformat)","097f46f3":"#ignore this cell\n\n#df2.to_csv('submission.csv' , index=False)","fa5586f7":"#ignore this cell\n\n#dftest=pd.read_csv('..\/input\/titanic\/test.csv')\n#dftest","18ee9c62":"#ignore this cell\n\n#Survived=False\n#dftest['Survived']=Survived\n#dftest","5178cd5a":"## Categorical EDA of All Passengers","b0364df4":"**The only noticeable entry in the above column is 'LINE'. We'll look further into it in a moment**","5a54add1":"**Passengers paying 0\/No fare will be looked into in a moment**","881bc665":"# Categorical EDA","1de6d697":"# Investigating Passenger Classes, 'Pclass' category","60a6a6f5":"# Storing Survivors in Seperate Dataset","080bba62":"# Numeric EDA of Survivors","1c9863e4":"# Investigating 'Age' category","3ed3df72":"## Setting Data Types of All Passengers' Dataset Labels","cbfcd891":"# Analyzing Null and Suspecious Entries","3a367235":"**Number of female surviors is greater than number of male survivors**","1acd7b6e":"# Analyzing Data","ff745fa5":"# Checking for Null Entries","dc54b9e1":"# Cleaning (Dropping Null Entry Rows)","8e8e5dc8":"# Correlation","c730456a":"# Investigating Parent\/Children, 'Parch' category","5f2aa6d8":"# Numeric EDA of All Passengers","6c15e3f0":"## Correlation between Survivors' Dataset Labels","57ee2204":"# Investigating 'Gender' category","05468016":"## Correlation between All Passengers' Dataset Labels","15dffbd4":"**There's only one passenger who's allocated Cabin 'T', could be useful**","f4b44ab8":"# Investigating Siblings and Spouse, 'SibSp' category","c3431e7a":"# Investigating 'Fare' category","3298c89f":"# Catagorical EDA of Survivors","dafaf72f":"**Along with the null entries, we'll also look into the single-letter entry, 'T'**","60c52ef6":"* **The frequency of survived passengers is significantly higher for passengers who paid high fares**","d626a5b8":"# Setting Data Types","69e269b1":"# Store Data Analysis in a CSV file","24787386":"*Not ceompleted yet*","b11f2331":"* **Even though the SibSp and Parch of all the above passengers are zeros, two of them seem to be blood-related going by their family name, 'Johnson' and Name Prefix, 'Mr'**\n* **All of the same Passenger-Class**\n* **All embarked under 'S'**","34848568":"# Loading Dataset","6b39ff26":"## One-Hot Encoding","80f49353":"## Setting Data Types of Survivors' Dataset Labels","e88c03cd":"* **These two passengers are not blood related but both of them are registered under the same Ticket, allocated the same Cabin, both are female by gender, have significant age gap and, most importantly, they both managed survived**\n* **Another point to notice is that they're both the only two null entries in 'Embarked' column**"}}