{"cell_type":{"f4a321f3":"code","4e874852":"code","d709c98a":"code","9aed39d6":"code","a832f88b":"code","757cc724":"code","f4da2d60":"code","11d83fce":"code","7251b50f":"code","02b5d3f2":"code","cfc9a30f":"code","e1936252":"code","0e830c39":"code","5799b461":"code","6ff0b977":"code","68a6a8f4":"code","36496c9a":"code","ea3428bc":"code","42054b5b":"code","f8ab2954":"code","7f28d91a":"code","00540eca":"code","a05449ce":"code","eac8fb34":"code","7b4a84d4":"code","e6b8de90":"code","ee993441":"code","7ede025d":"code","0acbbb67":"code","2daeabd2":"code","00b01d30":"code","0bdf1da6":"code","04a3a73b":"code","b299335d":"code","3d2d693f":"code","c57c8846":"code","3aca9848":"code","d14a65cc":"code","c3afdd6c":"code","d278ac62":"code","60044703":"code","1cbd804a":"code","84c63012":"code","17b05bbb":"code","9ed3b59f":"code","fe0307cf":"code","3c511b4f":"code","3c08b27d":"code","e97ec2aa":"code","43d5ed49":"code","d5f2b905":"code","dc49960a":"code","1af8834f":"code","a45a1796":"code","c1d13c1b":"code","cfc9ebd6":"code","12e2f5eb":"code","ddcc4e18":"code","81f7b8e1":"code","ccbc0e85":"code","703c1e2d":"code","46c4c5eb":"code","ec8933cb":"code","97a52df7":"code","48afcd61":"code","c502c5e0":"code","27f446f9":"code","4db65cf0":"code","8ef7432b":"code","9283ddf0":"code","65649059":"code","100e3fe2":"code","d8b68851":"code","e1d55bfc":"code","ccaa5908":"code","f787de68":"code","7fba7fc0":"code","10787121":"code","4003b79f":"code","87107a09":"code","f87bee14":"code","93bfa003":"code","7c02ef38":"code","328407cd":"code","aeef5fd7":"code","75670b30":"code","85b031d4":"code","d038a2d5":"code","89f946bf":"code","bdaa6397":"code","abcbc601":"code","c7a99e7c":"code","8a8b590e":"code","5e3fb3d2":"code","0c2dfb46":"code","0484c257":"markdown","8db58ea2":"markdown","6c6d5296":"markdown","00b2dae1":"markdown","c43ed098":"markdown","9385fd2d":"markdown","dfd21a6b":"markdown","8e345506":"markdown","d4d9429c":"markdown","efeac0d6":"markdown","f55ff958":"markdown","b9c5756f":"markdown","7ef71834":"markdown","abd19ec5":"markdown","bb569539":"markdown","87f7454c":"markdown","b0f381f0":"markdown","74622653":"markdown","899aabd1":"markdown","bf0e2d5e":"markdown","4b7a86b7":"markdown","d07dbb39":"markdown","a90a2c4b":"markdown","9709e7cb":"markdown","9fada013":"markdown","2916abdf":"markdown","20cce632":"markdown","11bfdd66":"markdown","75952bfc":"markdown","5bd3a6e0":"markdown","af7f728c":"markdown","996789ff":"markdown","877a007b":"markdown","822d571d":"markdown","22f6afe6":"markdown","809b19b5":"markdown","79adbe59":"markdown","5d309471":"markdown","831c01e2":"markdown","a5810b5d":"markdown","99be3424":"markdown","cb68bc81":"markdown","2de97a7e":"markdown","4cfc84eb":"markdown","b1bca1c2":"markdown","240d6746":"markdown","9f1b1dc1":"markdown","73308c0f":"markdown","162d8c4d":"markdown","3c0f808d":"markdown","c1f95b3a":"markdown","68a6a8fe":"markdown","6fbda01c":"markdown","66d07d9b":"markdown","efc07e62":"markdown","340bb282":"markdown","70d337ab":"markdown","68407cb5":"markdown"},"source":{"f4a321f3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n#ml algorithms\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.ensemble import VotingClassifier\n\n#ml performance measures\nfrom sklearn.metrics import accuracy_score\n\n#ml model selection \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nimport transformers","4e874852":"# What files are available in the input folder?\nfor root, directories, files in os.walk('\/kaggle\/input\/titanic'):\n    for file in files:\n        print(os.path.join(root, file))","d709c98a":"# Save the needed files in the dataframes.\n# The id can be used as index.\ntrain_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col='PassengerId')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col='PassengerId')\ntrain_test = [train_df, test_df]","9aed39d6":"print(train_df.shape)\nprint(test_df.shape)","a832f88b":"train_df.head(5)","757cc724":"test_df.head(5)","f4da2d60":"train_df.info(verbose=True)","11d83fce":"statistics = train_df.describe()\nstatistics","7251b50f":"# The column survived is binary. \n# 0 - not survived\n# 1 - survived\n\ntrain_df.loc[:, 'Survived'].unique()","02b5d3f2":"len(train_df[train_df['Survived']==1]) \/ len(train_df) * 100 \n# You can also use the statistics dataframe saved before with the describe method\nstatistics.loc['mean', 'Survived']","cfc9a30f":"sns.countplot('Survived', data=train_df).set_title(\"Survived Count\")\nplt.show()","e1936252":"# 1: First Class\n# 2: Second Class\n# 3: Third Class\nnp.sort(train_df.loc[:, 'Pclass'].unique())","0e830c39":"# Most people were travelling third class\nsns.countplot(x='Pclass', data=train_df).set_title(\"Class Distribution\")\nplt.show()","5799b461":"# This variable represents whether the passenger is male or female\ntrain_df.loc[:, 'Sex'].unique()","6ff0b977":"# there were more male passengers on board\nsns.countplot('Sex', data=train_df).set_title(\"Number of passengers by sex\")\nplt.show()","68a6a8f4":"# Most passengers in the training dataset are around 28 years old.\nstatistics.loc[:, 'Age']","36496c9a":"# Most passengers were between the ages of 20 and 40\n# But there seemed to be a lot of babies on board as well\nsns.distplot(train_df['Age']).set_title('Age distribution on board of the Titanic')\nplt.show()","ea3428bc":"# The variable shows the number of siblings\/spouses\nnp.sort(train_df['SibSp'].unique())","42054b5b":"# most people travelled withoud a spouse or child\nsns.countplot('SibSp', data=train_df).set_title('Spouces\/Siblings on board')\nplt.show()","f8ab2954":"#the parch variable shows the number of parents\/children on board\nnp.sort(train_df['Parch'].unique())","7f28d91a":"# very few people travelled with parents \/ children\nsns.countplot(x='Parch', data=train_df).set_title('Parents\/children on board')\nplt.show()","00540eca":"# Fare is the price that a passenger paid for the ticket\n# the mean and the median are very far apart\n# the mean is larger than the 75% percentile\nstatistics.loc[['mean', '50%', '75%', 'max'], 'Fare']","a05449ce":"# most people payed less than the average\nsns.distplot(train_df['Fare']).set_title('Fare Distribution on Titanic')\nplt.show()","eac8fb34":"# Unfortunately 687 entries are missing. \n# Not possible to use the variable.\ntrain_df['Cabin'].isnull().sum()","7b4a84d4":"# the variable shows where the passenger embarked\n# S: Southampton\n# C: Cherbourg\n# Q: Queenstown\ntrain_df['Embarked'].unique()","e6b8de90":"# most people left in Southampton in England. This was the starting point.\n# Cherbourg in France was the second stop\n# Queenstown in Ireland was the last stop before New York.\nsns.countplot('Embarked', data=train_df).set_title('Number of passengers departed per city')\nplt.show()","ee993441":"train_df.corr()","7ede025d":"plt.figure(figsize=(10,10))\nsns.heatmap(train_df.corr())\nplt.show()","0acbbb67":"#as expected ticket class is a proxy for wealth and influence and had a great impact on the survival rate\nsns.barplot(x='Pclass', y='Survived', data=train_df).set_title('Relationship between Pclass(Ticket Class) and Survived')\nplt.show()","2daeabd2":"# here we reverse the relationship\n# if we consider the fare price to be the proxy for wealth, then we might conclude that wealthier people had a higher chance of survival\nsns.barplot(x='Survived', y='Fare', data=train_df)\nplt.show()","00b01d30":"# lets also look at the relationship between Fare and Pclass\n# as expected the relationship is very strong\n# it is probably sufficient to use only one of the variables as a proxy for wealth\nsns.barplot(x='Pclass', y='Fare', data=train_df)\nplt.show()","0bdf1da6":"# the relationship between age and survival rate is not simply linear\nsns.regplot(x='Age', y='Survived', data=train_df)\nplt.show()","04a3a73b":"# the boxplot are very similar\nsns.boxplot(x='Survived', y='Age', data=train_df)\nplt.show()","b299335d":"# lets look at the relationship between sex and survived\n#wow, over 70% of women and less than 20% of men survived\nsns.barplot(x='Sex', y='Survived', data=train_df)","3d2d693f":"# what was more important wealth or sex?\n# especially in the second and third class men had a very low survival rate.''\ntrain_df.groupby(['Pclass', 'Sex'])['Survived'].agg(['mean', 'count'])","c57c8846":"#relatively speaking more women from the third class survived than men in the first clas\nsns.catplot(x='Sex', y='Survived', col='Pclass', data=train_df, kind='bar')\nplt.show()","3aca9848":"# lets look at embarked\n# it looks like more people from Cherbourg survived\n# is that a spurious relationship?\nsns.barplot(x='Embarked', y='Survived', data=train_df)\nplt.show()","d14a65cc":"_, (ax1, ax2) = plt.subplots(figsize=(24,6), nrows=1, ncols=2)\n\n# it looks like there is a strong relationship between embarked and wealth\nsns.barplot('Embarked', 'Pclass', data=train_df, ax=ax1).set_title('Ticket Class per city')\nsns.barplot('Embarked', 'Fare', data=train_df, ax=ax2).set_title('Fare per city')","c3afdd6c":"fig, (ax1, ax2) = plt.subplots(figsize=(24,6), nrows=1, ncols=2)\nsns.barplot(x=\"Survived\", y=\"SibSp\", data=train_df, ax=ax1)\nsns.barplot(x=\"Survived\", y=\"Parch\", data=train_df, ax=ax2)\nplt.show()","d278ac62":"# title is included in the name\n# the pattern seems to be always the same\n# e.g. Surname, Title. List of Names\ntrain_df['Name'].head(10)","60044703":"for df in train_test:\n    df['Title'] = df['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]","1cbd804a":"# What do these titles actually mean?\n# Mr: Adult Male\n# Miss: An unmarried (usually young) woman\n# Mrs: A married woman\n# Master: A boy\n# Dr: A Doctor title\n# Rev: Reverent (clergy title)\n# Col: Colonel (military title)\n# Mlle: Mademoiselle (similar to miss in France)\n# Major: (a military title)\n# Ms: (can be miss or mrs, but we will assume it is a mrs for simplicity)\n# Don: (similar to Mr in Spanish)\n# Dona: (similar to Mrs in Spanish)\n# Lady: (woman of a high social status)\n# Capt: (might have several meanings, but I assume it is a military title)\n# Jonkheer: (a low nobility rank)\n# Mme: Madam\n# the Countess: Nobility title\n# Sir: Titled knights\nprint(train_df['Title'].value_counts())\nprint('-'*30)\nprint(test_df['Title'].value_counts())","84c63012":"for df in train_test:\n    df['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Jonkheer', 'the Countess', 'Capt', 'Lady', 'Sir'], 'High Status', inplace=True)\n    df['Title'].replace(['Don'], 'Mr', inplace=True)\n    df['Title'].replace(['Dona', 'Mme'], 'Mrs', inplace=True)\n    df['Title'].replace(['Mlle', 'Ms'], 'Miss', inplace=True)","17b05bbb":"print(train_df['Title'].value_counts())\nprint('-'*30)\nprint(test_df['Title'].value_counts())","9ed3b59f":"# There is a correlation between the title and survival rate.\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","fe0307cf":"# Title and Sex are highly correlated. So the survival rate might be based on gender and not on title.\nsns.scatterplot(x='Title', y='Sex', data=train_df)\nplt.show()","3c511b4f":"# similar can be sayed about title and age\ntrain_df[['Title', 'Age']].groupby('Title', as_index=False).median()","3c08b27d":"# 177 age entries from the training dataset are missing\nprint(train_df['Age'].isnull().sum())\nprint('-'*30)\n# 86 age entries from the testing dataset are missing\nprint(test_df['Age'].isnull().sum())","e97ec2aa":"# the simplest approach is to impute mean(or median) values into missing values\nmean_adjusted_age = train_df['Age'].fillna(value=train_df['Age'].mean())\nmean_adjusted_age.isnull().sum()","43d5ed49":"# a more popular approach is to deduce the age of a person by using the title included in the name and using the mean\/median from that distribution\nage_distribution = train_df[['Title', 'Age']].groupby('Title').median()\nage_distribution.loc[:, :]","d5f2b905":"for df in train_test:\n    df.loc[(df['Title'] == 'High Status') & (pd.isna(df['Age'])), 'Age'] = age_distribution.loc['High Status', 'Age']\n    df.loc[(df['Title'] == 'Master') & (pd.isna(df['Age'])), 'Age'] = age_distribution.loc['Master', 'Age']\n    df.loc[(df['Title'] == 'Miss') & (pd.isna(df['Age'])), 'Age'] = age_distribution.loc['Miss', 'Age']\n    df.loc[(df['Title'] == 'Mr') & (pd.isna(df['Age'])), 'Age'] = age_distribution.loc['Mr', 'Age']\n    df.loc[(df['Title'] == 'Mrs') & (pd.isna(df['Age'])), 'Age'] = age_distribution.loc['Mrs', 'Age']","dc49960a":"# age is not missing anymore\nprint(train_df.info())\nprint('-'*50)\nprint(test_df.info())","1af8834f":"# create a binary family column for train and test data\nfor df in train_test:\n    df.loc[(df['SibSp'] > 0) | (df['Parch'] > 0), 'HasFamily'] = 1\n    df['HasFamily'].fillna(value=0, inplace=True)","a45a1796":"# is the column usefull?\n# it looks like the survival chance increases if a passenger was travelling with a family\nsns.barplot(x='HasFamily', y='Survived', data=train_df)\nplt.show()","c1d13c1b":"# Figure out if someone is a child\nfor df in train_test:\n    df['IsChild'] = df['Age'].apply(lambda x: 1 if x < 10 else 0 )","cfc9ebd6":"# now we create a new category: male, female and the new category child\nfor df in train_test:\n    df.loc[df['IsChild'] == 1, 'PassengerCategory'] = 'child'\n    df.loc[df['IsChild'] == 0, 'PassengerCategory'] = df['Sex']","12e2f5eb":"train_df.groupby('PassengerCategory').count()['Survived']","ddcc4e18":"# does the new category make sense visually\nsns.barplot(x='PassengerCategory', y='Survived', data=train_df)\nplt.show()","81f7b8e1":"# there were very few children in the first class, so it is not easy to make any predictions\n# all 17 children in the second class survived\n# less than 50% of children from the third class survived\n# the survival rate of men decreases even further when you subtracted the male children \ntrain_df.groupby(['Pclass', 'PassengerCategory'])['Survived'].agg(['mean', 'count'])","ccbc0e85":"# lets see how it looks like when we incorporate ticket class\nsns.catplot(x='PassengerCategory', y='Survived', col='Pclass', data=train_df, kind='bar')\nplt.show()","703c1e2d":"train_df.columns.values","46c4c5eb":"train_df['Survived']","ec8933cb":"# lets just keep 3 categorical variables and see how good the model performs\nkeep = ['Pclass', 'HasFamily', 'PassengerCategory']\nX_train = train_df[keep]\nX_test = test_df[keep]\ny_train = train_df['Survived']","97a52df7":"X_train","48afcd61":"ordinal_encoder = OrdinalEncoder()\n\nX_train = ordinal_encoder.fit_transform(X_train)\nX_test = ordinal_encoder.transform(X_test)\n\nprint(ordinal_encoder.categories_)","c502c5e0":"one_hot_encoder = OneHotEncoder()\n\nX_train = one_hot_encoder.fit_transform(X_train)\nX_test = one_hot_encoder.transform(X_test)\n\nprint(one_hot_encoder.categories_)","27f446f9":"X_train.toarray()","4db65cf0":"# TODOs\n# Cross Validation\n# Grid Search\n# Random Forests (Decision Trees)\n# Model Evaluation (accuracy, precision, recall, confusion matrix, roc, auc)\n# Ensemble","8ef7432b":"models={}","9283ddf0":"log_reg = LogisticRegression()\nlog_reg.fit(X_train, y_train)\ny_pred = log_reg.predict(X_train)","65649059":"# a simple logistic regression achieves over 79% accuracy on the train set\n# but as we do not have a test set with a survival rate, it is hard to say how good it is\naccuracy_score(y_train, y_pred)","100e3fe2":"# lets see how well the estimator performs when using cross validation\nscores = cross_val_score(log_reg, X_train, y_train, cv=10, n_jobs=-1, scoring='accuracy')\n\n# the cross-val score is slighly lower\n# the actual public score was actually 0.76315\nprint(scores.mean())","d8b68851":"models['Logistic'] = scores.mean()","e1d55bfc":"knn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_train)","ccaa5908":"# the model improved slightly\naccuracy_score(y_train, y_pred)","f787de68":"# lets see if the results are as good using cross valid\nscores = cross_val_score(knn, X_train, y_train, cv=10, scoring='accuracy')\nmodels['KNN'] = scores.mean()","7fba7fc0":"# using cross validation we can see that the KNN overfits\nprint(models)","10787121":"rf = RandomForestClassifier(n_estimators=1000, criterion='gini', max_depth=5, n_jobs=-1)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_train)","4003b79f":"# the accuracy score improved, but is there a problem with overfitting?\naccuracy_score(y_train, y_pred)","87107a09":"scores = cross_val_score(rf, X_train, y_train, cv=10, scoring='accuracy')\nmodels['RF'] = scores.mean()","f87bee14":"#random forest performs best so far\nmodels","93bfa003":"param_grid = [{'n_estimators': [10, 100], 'max_depth': [1, 2, 5], 'max_features': [2, 3]}]\n\ngrid_rf = RandomForestClassifier()\ngrid_search = GridSearchCV(grid_rf, param_grid, cv=10, return_train_score=True)","7c02ef38":"#Ths step takes some time\ngrid_search.fit(X_train, y_train)","328407cd":"grid_search.best_params_","aeef5fd7":"grid_search.best_estimator_","75670b30":"# lets refit our random forest\ngrid_rf = RandomForestClassifier(max_depth=5, max_features=2, n_estimators=10)\ngrid_rf.fit(X_train, y_train)\ny_pred = grid_rf.predict(X_train)","85b031d4":"accuracy_score(y_train, y_pred)","d038a2d5":"vot = VotingClassifier(\n    estimators=[('lr', log_reg), ('knn', knn), ('grid_rf', grid_rf)],\n    voting='soft'\n)\n\nvot.fit(X_train, y_train)","89f946bf":"y_pred = vot.predict(X_train)","bdaa6397":"# accuracy seems slightly lower than for the pure RandomFores\n# lets see how cross validation looks like\naccuracy_score(y_train, y_pred)","abcbc601":"scores = cross_val_score(vot, X_train, y_train, scoring='accuracy', n_jobs=-1, cv=10)","c7a99e7c":"# the voting classifier performs better than logistic regression and knn but not better than rf\nmodels['VOT'] = scores.mean()","8a8b590e":"models","5e3fb3d2":"scores = cross_val_score","0c2dfb46":"model = vot\n# predict and save the model\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_df.index, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n","0484c257":"<p>We save the statistics dataframe in a variable, as we can use it at a later time.<\/p>","8db58ea2":"<p>Cabin is a string variable showing the exact cabin number.<\/p>\n<strong>Expectation:<\/strong> <span>Cabin number should have an impact on survival rate.<\/span>\n<br \/>\n<strong>Reasoning: <\/strong> <span>If you knew the layout of the ship and all the cabin numbers then you could calculate the distance between the cabin and the rescue boats.<\/span>","6c6d5296":"<div style=\"background-color: #F4E8C1;\">\n    <h1 style=\"text-align: center; text-transform: uppercase; letter-spacing: 10px; font-size: 60px\"> Titanic <\/h1>\n    <h2>First kaggle notebook<\/h2>\n<\/div>","00b2dae1":"<p>The Survived variable (dependent variable) is missing in the testing dataset.<\/p>","c43ed098":"<h3>Grid Search for random forest<\/h3>","9385fd2d":"<h2>Libraries Imports<\/h2>","dfd21a6b":"<h4>Variable: Ticket Cost (Fare)<\/h4> ","8e345506":"<h3>Random Forest Classifier<\/h3>","d4d9429c":"<h4>Relationship between wealth and survival rate<\/h4>\n<strong>Result: <\/strong> <span>As expected passengers owning a better class ticket (or payed more) had a better chance of survival<\/span>","efeac0d6":"<p>Ticket is a string variable showing the city each passenger departed.<\/p>\n<ul>\n    <li>S: Southampton <\/li>\n    <li>C: Cherbourg <\/li>\n    <li>Q: Queenstown <\/li>\n<\/ul>\n<strong>Expectation:<\/strong> <span>The exact departure point should not have an impact on survival rate.<\/span>\n<br \/>\n<strong>Reasoning: <\/strong> <span>There should be no relationshipt between departure city and the ability to secure a rescue boat.<\/span>","f55ff958":"<p>Pclass is a categorical \"male\" vs \"female\" variable.<\/p>\n<strong>Expectation:<\/strong> <span>It is expected that more women survived than men.<\/span>\n<br \/>\n<strong>Reasoning:<\/strong> <span>Preferential treatment for women in life boats<\/span>","b9c5756f":"<h2>Missing values, feature engenireeng and final variable selection.<\/h2>","7ef71834":"<h2>One hot encoding<\/h2>","abd19ec5":"<h3>Pandas Exploration<\/h3>","bb569539":"<h4>Variable: Survived<\/h4>","87f7454c":"<h4>Variable: Sex<\/h4>","b0f381f0":"<p>Parch is a numerical variable. It is an integer showing how many Parents\/Children a person had on board.<\/p>\n<strong>Expectation:<\/strong> <span>It is expected that being in a family increased the chances of survival.<\/span>\n<br \/>\n<strong>Reasoning: <\/strong> <span>If a woman gets on a boat with a child it is expected that she would take all her children on board. Single men had probably a very low chance to get on board. While men with a young spouse or children might have had a chance. <\/span>","74622653":"What age is a person considered a child?\nThe smaller the child the higher the chance someone can carry the child on the lap without taking additional space.\nThe age of 10 seems like a good proxy for 'didn't take additional space'","899aabd1":"<h4>Variable: Sibling\/Spouse (SibSp)<\/h4>","bf0e2d5e":"<p>There are 891 rows in the training set and 418 in the testing set. According to wikipedia there were 2224 people on board. It seems most likely that only passengers and no crew members are contained in the dataset.<\/p>\n<p>The training data has 1 column more than the testing data.<\/p>","4b7a86b7":"<h4>Relationship between family members and survival rate<\/h4>\n<strong>Result: <\/strong> <span>The relationship seems to be ambiguous. We will deal with the problem with feature engenireeng.<\/span>","d07dbb39":"<p>Version History:<\/p>\n<ul> \n    <li>08 Sep 2020: Added grid search and voting classifiers.<\/li>\n    <li>07 Sep 2020: Finishing feature engineering and selection. Starting with ML Section<\/li>\n    <li>06 Sep 2020: Multivariate Analysis, dealing with null and feature engineering <\/li>\n    <li>05 Sep 2020: Initial Version: Simple EDA and univariate Analysis <\/li>\n<\/ul>","a90a2c4b":"<h3>Logistic Regression<\/h3>","9709e7cb":"<h4>Relationship between age and survival rate<\/h4>\n<strong>Result: <\/strong> <span>There doesn't seem to be a simple linear relationship between age and survival rate.<\/span>","9fada013":"<h4>Relationship between embarked and survival rate<\/h4>\n<strong>Result: <\/strong> <span>There is a relationship, but the relationship seems to be spurious<\/span>","2916abdf":"<h3> Multivariate Analysis <\/h3>","20cce632":"<p>The \"Survived\" variable is the label of the dataset we want to predict.<\/p>","11bfdd66":"<h2>Machine Learning: Estimation and model evaluation<\/h2>","75952bfc":"<h4>Variable: Ticket Number (Ticket)<\/h4> ","5bd3a6e0":"<h2>Machine Learning: Model Selection Submission<\/h2","af7f728c":"<p>The idea and approach for creating a Title column was taken from the following great notebooks<\/p>\n<p><a href='https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions'>Notebook by Manav Sehgal<\/a><\/p>\n<p><a href='https:\/\/www.kaggle.com\/ldfreeman3\/a-data-science-framework-to-achieve-99-accuracy'>Notebook byLD Freeman<\/a> <\/p>","996789ff":"<h4>Variable: Parents \/ Children (Parch)<\/h4>","877a007b":"<h3>Title feature engineering<\/h3>","822d571d":"<p>Ticket is a numeric variable showing the ticket price<\/p>\n<strong>Expectation:<\/strong> <span>Ticket price should have an impact similar to ticket class.<\/span>\n<br \/>\n<strong>Reasoning: <\/strong> <span>Ticket price is a proxy for wealth, meaning better access to life boats<\/span>","22f6afe6":"<h2>EDA (Explaratory Data Analysis)<\/h2>","809b19b5":"<h3>Univariate Analysis<\/h3>","79adbe59":"<p>According to <a href=\"https:\/\/titanicfacts.net\/titanic-survivors\/how-many-people-survived\/\"> Titanic Facts <\/a><\/p>\n\n<ul> \n    <li> \n        37% \u2013 the percentage of passengers who survived.\n    <\/li>\n    <li> \n        24% \u2013 the percentage of crew members who survived.\n    <\/li>\n<\/ul>\n\n<p>Our rate is very close to the official passenger survival rate.<\/p>","5d309471":"<h3>Dealing with missing age<\/h3>","831c01e2":"<h4> Correlation analysis <\/h4>\n\n<p>The below correlation analysis shows that out of numerical variables ticket class seems to have the strongest (and negative) impact on survival rate.<\/p>","a5810b5d":"<p>Age is a numerical variable. It is an integer in most cases, but represent a fraction for babies under a year<\/p>\n<strong>Expectation:<\/strong> <span>It is expected that more children that not children survived.<\/span>\n<br \/>\n<strong>Reasoning:<\/strong> <span>Preferential treatment for children in life boats<\/span>","99be3424":"<h2>Dataset Imports<\/h2>","cb68bc81":"<h3>Child category engineering<\/h3>","2de97a7e":"<p>Which of the features are we going to use in ML Models?<\/p>\n<ul> \n    <li>Name: remove as no relationship between survival rate and name is expected.<\/li>\n    <li>Sex and IsChild: remove as PassengerCategory is going to be used instead.<\/li>\n    <li>SibSp and Parch: remove as HasFamily is going to be used instead.<\/li>\n    <li>Ticket and Cabin: remove.<\/li>\n    <li>Fare and Embarked: remove and use Pclass as proxy for wealth instead<\/li>\n    <li>Title: remove as the variable is highly correlated with Age and Sex<\/li>\n<\/ul>","4cfc84eb":"<h4>Variable: Pclass<\/h4>","b1bca1c2":"<h4>Variable: Cabin number (Cabin)<\/h4> ","240d6746":"<h4>Variable: Age<\/h4>","9f1b1dc1":"<h4>Relationship between sex and survival rate<\/h4>\n<strong>Result: <\/strong> <span>Women had a higher chance of survival<\/span>","73308c0f":"<p>Pclass represents the price class categorical variable. We are going to use the variable as the proxy for wealth. <\/p>\n<strong>Expectation:<\/strong> <span>Wealth should have a positive impact on survival rate<\/span>\n<br \/>\n<strong>Reasoning:<\/strong> <span>The cabins of the first class were probably closer to the ship deck and probably bribes were used.<\/span>","162d8c4d":"<p>We should replace rare titles with the more common ones and create a category for high status titles.<\/p>","3c0f808d":"<h2>Feature Selection<\/h2>","c1f95b3a":"<p>SibSp is a numerical variable. It is an integer showing how many Siblings\/Spouces a person had on board.<\/p>\n<strong>Expectation:<\/strong> <span>It is expected that being in a family increased the chances of survival.<\/span>\n<br \/>\n<strong>Reasoning: <\/strong> <span>If a woman gets on a boat with a child it is expected that she would take all her children on board. Single men had probably a very low chance to get on board. While men with a young spouse or children might have had a chance. <\/span>","68a6a8fe":"<p>Ticket is a string variable showing the ticket number<\/p>\n<strong>Expectation:<\/strong> <span>Ticket number should not have had a great impact on the survival rate.<\/span>\n<br \/>\n<strong>Reasoning: <\/strong> <span>Maybe it is possible to derive the ticket class from the data, but as this information is already available \"Ticket\" is going to be ignored.<\/span>","6fbda01c":"<p>Less than 40% of passengers in the training dataset survived<\/p>","66d07d9b":"<h4>Variable: Starting point (Embarked)<\/h4> ","efc07e62":"<h3>K-Nearest Neighbors <\/h3>","340bb282":"<h3>Family variable enineering<\/h3>","70d337ab":"---\n<p>There seem to be some null values in the dataset. Especially age seems to be problematic, as it can be assumed that children would have preferential treatment in the lifeboats. We will have to deal with missing values at a later stage.<\/p>","68407cb5":"<h3>Voting Classifier<\/h3>"}}