{"cell_type":{"a4c45116":"code","a4fe1abe":"code","482e1a50":"code","71456c18":"code","209ae36b":"code","390af55e":"code","b5b8064c":"code","e05979e2":"code","b2c7112b":"code","10b77465":"code","e436c6dc":"code","d7a2cb0e":"code","7e2240d6":"code","82464fe6":"code","a98d96cf":"code","f1ab039e":"code","c09cdab6":"code","60498411":"code","42f8c94d":"code","5e26402c":"code","ee037e31":"code","c8efbe07":"code","5ef48829":"code","5a3da34d":"code","6c0fafba":"markdown","d1d7e7e0":"markdown","a20d9385":"markdown","d7364760":"markdown","61dcebff":"markdown","f0863fa0":"markdown","401b226a":"markdown","f82b7ef3":"markdown","0b835a4d":"markdown","8b97e0c7":"markdown","4312a8d1":"markdown","f8917035":"markdown","56cf859a":"markdown","64b82148":"markdown","0c6e428b":"markdown","b43be430":"markdown","86fe5f90":"markdown","f758fecd":"markdown","3e492a45":"markdown","c8c07efe":"markdown","ea6ae1b7":"markdown"},"source":{"a4c45116":"#Import Package\nimport pandas as pd","a4fe1abe":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","482e1a50":"#Import Dataset\ncustomers = pd.read_csv('\/kaggle\/input\/retail-data-customer-summary-learn-pandas-basics\/Retail_Data_Customers_Summary.csv')","71456c18":"#the Dataframe name \"customers\" returns first 5 and last 5 rows\ncustomers","209ae36b":"#If you use head(), it returns the top 5 rows\ncustomers.head()","390af55e":"#To find the top 5 customers, we need to sort by tran_amount_2015 in descending order\ncustomers.sort_values(by = ['tran_amount_2015'], ascending = False).head()","b5b8064c":"#To find the top 5 customers, we need to sort by tran_amount_2014 in descending order\n#Then look at the tran_amount_2015 colums to identify those who did not buy\ncustomers.sort_values(by = ['tran_amount_2014'], ascending = False).head()","e05979e2":"#We will store in a new dataframe name\ncustomers_2014 = customers.sort_values(by = ['tran_amount_2014'], ascending = False).head()","b2c7112b":"#Then we will select the relevent columns to answer the question\ncustomers_2014[['customer_id','tran_amount_2014','tran_amount_2015']]","10b77465":"#Then we ### Select Multiple Columnwill select the relevent columns to answer the question\ncustomers_2014[['customer_id','tran_amount_2014','tran_amount_2015']].sort_values(by = 'tran_amount_2015', na_position = 'first')","e436c6dc":"#Returns as error as this id is not present in any column name\ncustomers['CS4074']","d7a2cb0e":"#so we use .loc to slice\/select data by rows\n#Still gives an error, as it is unable to find this id in a row (but which row?)\ncustomers.loc['CS4074']","7e2240d6":"#The default index is 0,1,2,3,4,5 ...\ncustomers.head()","82464fe6":"#We can select one row by mentioning the index number\ncustomers.loc[0]","a98d96cf":"#We need to set index before we could easily select rows (just like setting a primary key in SQL)\ncustomers.set_index('customer_id') ","f1ab039e":"#When we see above the index is set. However, when we check its reset to default\ncustomers.head()","c09cdab6":"#If you want to make permanent change to the dataframe, we use the inplace argument\ncustomers.set_index('customer_id', inplace = True) ","60498411":"#Now the change is permanent\ncustomers.head()","42f8c94d":"#Now if look for details of a customer, we will be able to find it\ncustomers.loc['CS4074']","5e26402c":"#To get details of 5 customers, we use a list \ncustomers.loc[['CS4074', 'CS5057', 'CS2945', 'CS4798', 'CS4424']]","ee037e31":"#We can extend .loc to select both rows and columns (begin with list customers from rows then select columns)\ncustomers.loc[['CS4074', 'CS5057', 'CS2945', 'CS4798', 'CS4424'],['tran_amount_2015','transactions_2015']]","c8efbe07":"customers.reset_index(inplace = True)","5ef48829":"#We can no longer select customers using (.loc())\ncustomers.loc[['CS4074', 'CS5057', 'CS2945', 'CS4798', 'CS4424'],['tran_amount_2015','transactions_2015']]","5a3da34d":"customers.head()","6c0fafba":"### Understanding Basics","d1d7e7e0":"**Sample Customers:** (CS4074, CS5057, CS2945, CS4798, CS4424)","a20d9385":"## Select details(all columns) for a given set of customers\n**Concepts covered:**\n1. Indexing Column\n2. Slicing Dataframe \n3. Selecting Single Row\/Multiple Rows (.loc())\n4. Making Permanent change to existing dataframe (inplace = True argument)","d7364760":"### head()","61dcebff":"### Select Single Column","f0863fa0":"## Find top customers in 2014 that did not buy in 2015\n**Concepts covered: Slicing Dataframe**\n1. Selecting Single Columns\/Multiple Columns\n2. Sort when data contains NA (na_position argument)","401b226a":"# Pandas DataFrames Basics","f82b7ef3":"## Select 2015 transaction amount and number of transcactions for the same customers\n1. Selecting multiple columns and rows using (.loc())\n2. Erasing index for a DataFrame (reset_index())","0b835a4d":"**List of Customers:** (CS4074, CS5057, CS2945, CS4798, CS4424)","8b97e0c7":"### Erasing index for a DataFrame (reset_index())","4312a8d1":"### Select Multiple Column","f8917035":"### Sort when data contains \"NA\"","56cf859a":"### Indexing existing DataFrame","64b82148":"### Selecting multiple columns and rows using (.loc())","0c6e428b":"### Making change permanent (inplace = True)","b43be430":"### sort()","86fe5f90":"## Find top 5 customers in 2015\n**Concepts covered:**\n1. head() \n2. sort()","f758fecd":"# Questions\n1. Find top 5 customers in 2015\n2. Find top customers in 2014 that did not buy in 2015\n3. Select details(all columns) for a given set of customers\n4. Select 2015 transaction amount and number of transcactions for the same customers","3e492a45":"# END\n**Pandas Concepts Covered:**\n1. head()\n2. sort()\n3. Set Index\n4. Slicing\/Selecting DataFrames (columns, rows using .loc)\n5. Argument (inplace = True)\n6. Resetting index","c8c07efe":"### Multiple rows selection .loc","ea6ae1b7":"### Slicing Rows using (.loc())"}}