{"cell_type":{"2baa9d34":"code","6fb27688":"code","cfe9ea35":"code","653b0805":"code","7bfc63cf":"code","d202ca12":"code","9514a604":"code","c7151dc8":"code","2cd0c4a7":"code","b9d07545":"code","16dadf7f":"code","08e96bab":"markdown","2c89d8bc":"markdown"},"source":{"2baa9d34":"!pip install qwikidata\n!pip install \"tensorflow-gpu>=1.14.0,<2.0\" # ampligraph only works with tensorflow 1.\n!pip install ampligraph","6fb27688":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport pickle","cfe9ea35":"KG_companies = [\"Facebook\", \"Amazon\", \"Apple Inc.\", \"Netflix\", \"Google\"]","653b0805":"from qwikidata.entity import WikidataItem, WikidataLexeme, WikidataProperty\nfrom qwikidata.linked_data_interface import get_entity_dict_from_api\nfrom tqdm.notebook import tqdm","7bfc63cf":"def get_triples_from_wikidata(companies_list, predicate_list):\n    \"\"\"\n    Inputs: companies_list - a list of companies, identified by their Q id.\n            predicate_list - a list of predicates, identified by their P id.\n    Outputs: (company, predicate, object) triples.\n            E.g. (Tesla, CEO, Elon Musk)\n    \"\"\"\n    subjects, predicates, objects = [], [], []\n    for Q_id in tqdm(companies_list):\n        Q_company = WikidataItem(get_entity_dict_from_api(Q_id))\n        for predicate in predicate_list:\n            for claim in Q_company.get_claim_group(predicate):\n                object_id = claim.mainsnak.datavalue.value[\"id\"]\n                object_entity = WikidataItem(get_entity_dict_from_api(object_id))\n\n                subjects.append(Q_company.get_label())\n\n                predicate_property = WikidataProperty(get_entity_dict_from_api(predicate))\n                predicates.append(predicate_property.get_label()) \n\n                objects.append(object_entity.get_label())\n\n    return subjects, predicates, objects  ","d202ca12":"companies_list = [\"Q355\", \"Q3884\", \"Q312\", \"Q907311\", \"Q95\"]\npredicate_list = [\"P31\", \"P17\", \"P361\", \"P452\", \"P112\", \"P169\", \"P463\", \"P355\", \"P1830\", \"P1056\"]","9514a604":"subjects, predicates, objects = get_triples_from_wikidata(companies_list, predicate_list)\nwiki_triples_df = pd.DataFrame({\"subject\": subjects, \"predicate\": predicates, \"object\": objects})","c7151dc8":"wiki_triples_df.sample(10)","2cd0c4a7":"wiki_triples = []\nfor index, row in wiki_triples_df.iterrows():\n    wiki_triples.append((row.subject, row.predicate, row.object))","b9d07545":"import networkx as nx\ndef create_graph(col):\n    graph = nx.from_pandas_edgelist(wiki_triples_df[wiki_triples_df.subject == str(col)], \"subject\", \"object\", edge_attr=True, create_using=nx.MultiDiGraph())\n    plt.figure(figsize=(12,12))\n    pos = nx.spring_layout(graph)\n    nx.draw(graph, with_labels=True, node_color='skyblue', edge_cmap=plt.cm.Blues, pos = pos)\n    nx.draw_networkx_edge_labels(graph, pos=pos)\n    plt.show()","16dadf7f":"for comp in KG_companies:\n    create_graph(comp)","08e96bab":"**Sources:**\n\nhttps:\/\/medium.com\/auquan\/quantamental-how-to-create-a-google-style-news-recommender-for-your-stocks-d0982c080ea7\n\nhttps:\/\/colab.research.google.com\/drive\/15JsLw-JwXViKdNaWCrW24_vaBVjZ1ZTR","2c89d8bc":"More on the way :)"}}