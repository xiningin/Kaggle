{"cell_type":{"df798134":"code","0e73d2c0":"code","4271963f":"code","40358c5a":"code","6cd320c6":"code","266f061e":"code","52d5d9cf":"code","3aa202ab":"code","f53d0f6a":"code","83b0785b":"code","a506141b":"code","7401b168":"code","548e5114":"code","f9cfe198":"code","957219b4":"code","66f7d328":"code","923aebdf":"code","3542c7da":"code","3b9f2861":"code","a4c1c993":"code","e66f7748":"code","240ff405":"code","64de2472":"code","1a9c1bd6":"code","2a26cfd6":"code","ea916a00":"code","41b62f32":"code","f1a4b488":"code","c2caa9a7":"code","d72cc6ac":"code","6725ee1a":"code","eb924442":"code","b6b19d36":"code","ce9c4fee":"code","4ad632e6":"code","dd8f2273":"markdown","eba49ad9":"markdown","1f6fe2c6":"markdown","35310e1e":"markdown","4e640787":"markdown","52f6d2ff":"markdown","2961ef22":"markdown","c3298fae":"markdown"},"source":{"df798134":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e73d2c0":"filepath_train = \"..\/input\/30-days-of-ml\/train.csv\"\nfilepath_test = \"..\/input\/30-days-of-ml\/test.csv\"\n\ndf_train = pd.read_csv(filepath_train, index_col=0)\ndf_test = pd.read_csv(filepath_test, index_col=0)\n\n","4271963f":"#df_test.reset_index(drop=True, inplace=True)\ndf_test.head()","40358c5a":"df_train.info()","6cd320c6":"print(\"Shape of train data: \" , df_train.shape)\nprint(\"Shape of test data: \" , df_test.shape)","266f061e":"# seprating numerical and object columns from train and test data\n\ncols_train_numeric = df_train.select_dtypes('float64').columns\ncols_test_numeric = df_test.select_dtypes('float64').columns\n\ncols_train_object = df_train.select_dtypes('object').columns\ncols_test_object = df_test.select_dtypes('object').columns\n\n","52d5d9cf":"import seaborn as sns\nimport matplotlib.pyplot as plt","3aa202ab":"\n\n# visualizing any missimg value in train data\nplt.rcParams['figure.figsize'] = (12, 10)\nsns.heatmap(df_train.isnull(), yticklabels=False, cmap='viridis')\n\n# it is clear from graph that we have no missimg value","f53d0f6a":"# checking missimg values for test data\nsns.heatmap(df_test.isnull(), yticklabels=False, cmap='viridis')","83b0785b":"extra_cols = [col for col in df_test.columns if col not in df_train.columns ]\nprint(extra_cols)","a506141b":"df_train.skew()","7401b168":"df_test.skew()","548e5114":"df_train.kurt()","f9cfe198":"df_test.kurt()","957219b4":"plt.rcParams['figure.figsize'] = (14, 12)\nsns.heatmap(df_train.corr(), annot=True, cmap=\"Blues\")","66f7d328":"different_categories = [ col for col in df_train.select_dtypes('object').columns if df_train[col].nunique() > 15]\nprint(\"columns with high cardinality for train data are: \", different_categories)\n\ndifferent_categories = [ col for col in df_test.select_dtypes('object').columns if df_test[col].nunique() > 15]\nprint(\"columns with high cardinality for test data are: \", different_categories)","923aebdf":"result = []\nfor i in cols_test_object:\n    train = set(df_train[i].unique())\n    test = set(df_test[i].unique())\n    \n    result.append(test.issubset(train))\n    \nprint(result)","3542c7da":"X_train = df_train.drop('target', axis=1)\ny_train = df_train['target']","3b9f2861":"from sklearn.preprocessing import OneHotEncoder","a4c1c993":"encoder  = OneHotEncoder(handle_unknown='ignore', sparse=False)\n\nX_train_cat_encoded = pd.DataFrame(encoder.fit_transform(X_train[cols_train_object.to_list()]))\nX_train_cat_encoded.index = X_train.index\nX_train_cat_encoded.shape","e66f7748":"X_train.drop(cols_train_object.to_list(), axis=1, inplace=True)\nX_train","240ff405":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train_encoded_scaled = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\nX_train_encoded_scaled","64de2472":"X_test_cat_encoded = pd.DataFrame(encoder.transform(df_test[cols_test_object.to_list()]))\nX_test_cat_encoded.index = df_test.index\nX_test_cat_encoded.reset_index(drop=True, inplace=True)\nX_test_cat_encoded","1a9c1bd6":"df_test.drop(cols_test_object.to_list(), axis=1, inplace=True)\ndf_test\n\n","2a26cfd6":"\nscaler = StandardScaler()\n\nX_test_encoded_scaled = pd.DataFrame(scaler.fit_transform(df_test), columns=df_test.columns)\nX_test_encoded_scaled.shape","ea916a00":"X_test_encoded_scaled.reset_index(drop=True, inplace=True)\nX_test_cat_encoded.reset_index(drop=True, inplace=True)\nX_test = pd.concat([X_test_cat_encoded, X_test_encoded_scaled],join='inner', axis=1)\nX_test","41b62f32":"\nX_train_encoded_scaled.reset_index(drop=True, inplace=True)\nX_train_cat_encoded.reset_index(drop=True, inplace=True)\nX_train = pd.concat([X_train_cat_encoded, X_train_encoded_scaled],join='inner', axis=1)\nX_train","f1a4b488":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV","c2caa9a7":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","d72cc6ac":"lin_reg_model = LinearRegression()\nlin_reg_model.fit(X_train, y_train)\n\npredictions = lin_reg_model.predict(X_valid)\n\nmse = mean_squared_error(y_valid, predictions)\nprint(\"Error for linear Regression: \", np.sqrt(mse))\n","6725ee1a":"decision_tree_model = DecisionTreeRegressor()\ndecision_tree_model.fit(X_train, y_train)\n\npredictions = decision_tree_model.predict(X_valid)\n\nmse = mean_squared_error(y_valid, predictions)\nprint(\"Error for Decision Tree: \", np.sqrt(mse))\n","eb924442":"model_forest = RandomForestRegressor() \nmodel_forest.fit(X_train, y_train)\n\npredictions = model_forest.predict(X_valid)\n\nmse = mean_squared_error(y_valid, predictions)\nprint(\"Error for random forest : \", np.sqrt(mse))","b6b19d36":"test_predictions = model_forest.predict(X_test)\n","ce9c4fee":"\nX_test","4ad632e6":"# Save the predictions to a CSV file\noutput = pd.DataFrame({'id': df_test.index,\n                       'target': test_predictions})\noutput.to_csv('submission.csv', index=False)\n\n","dd8f2273":"**Correlation**","eba49ad9":"**Checking cardinality of data**","1f6fe2c6":"Removing the categorical columns and concating numerical columns","35310e1e":"splitting the data into training and testing","4e640787":"Now checking skewness and kurtosis of the test and train dataframe","52f6d2ff":"***Splitting the train and testing data***","2961ef22":"checking if columns of test data contains any category\/value that is not present in the columns of train data","c3298fae":"checking if the test data contains any columns other than  the columns of train data, the print statment is empty, so that means there are no such columns"}}