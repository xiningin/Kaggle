{"cell_type":{"6c32a44f":"code","4a7b0548":"code","7cfe69b9":"code","031587bd":"code","151492c5":"code","d145c7a9":"code","2e93f09a":"code","d4b41377":"code","638b9478":"code","21c24fcb":"code","e93d39a0":"code","f845c9ef":"code","5c467913":"code","d2f6f6c4":"code","5e2169be":"code","b294e0c2":"code","a81acbe4":"code","d40bc922":"code","c7715770":"code","c442f2f2":"code","d13af123":"code","b033039d":"code","43d97bec":"code","8c5c35f9":"code","fee62ae9":"code","bfd809f0":"code","646339cf":"code","e46197fa":"code","adb24027":"code","bf53a68f":"markdown","153270e1":"markdown"},"source":{"6c32a44f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import GroupKFold\n\nimport os\nprint(os.listdir(\"..\/input\"))","4a7b0548":"train = pd.read_csv('..\/input\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/test.csv', index_col='id')","7cfe69b9":"train.head()","031587bd":"train.describe()","151492c5":"train.shape","d145c7a9":"test.shape","2e93f09a":"structures = pd.read_csv('..\/input\/structures.csv')\ndisplay(structures.head())","d4b41377":"# molecule level EDA + stats\nprint(\"unique molecules\",structures[\"atom\"].nunique())","638b9478":"val = 1\nprint(f\"{val+1}\")","21c24fcb":"# Map the atom structure data into train and test files\n\ndef map_atom_info(df, atom_idx):\n    df = pd.merge(df, structures, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n    return df\n\ntrain = map_atom_info(train, 0)\ntrain = map_atom_info(train, 1)\n\ntest = map_atom_info(test, 0)\ntest = map_atom_info(test, 1)","e93d39a0":"train.head()","f845c9ef":"# %%time\n# # Engineer a single feature: distance vector between atoms\n# #  (there's ways to speed this up!)\n\n# def dist(row):\n#     return ( (row['x_1'] - row['x_0'])**2 +\n#              (row['y_1'] - row['y_0'])**2 +\n#              (row['z_1'] - row['z_0'])**2 ) ** 0.5\n\n# train['dist'] = train.apply(lambda x: dist(x), axis=1)\n# test['dist'] = test.apply(lambda x: dist(x), axis=1)","5c467913":"%%time\n# This block is SPPED UP\n\ntrain_p_0 = train[['x_0', 'y_0', 'z_0']].values\ntrain_p_1 = train[['x_1', 'y_1', 'z_1']].values\ntest_p_0 = test[['x_0', 'y_0', 'z_0']].values\ntest_p_1 = test[['x_1', 'y_1', 'z_1']].values\n\ntrain['dist_speedup'] = np.linalg.norm(train_p_0 - train_p_1, axis=1)\ntest['dist_speedup'] = np.linalg.norm(test_p_0 - test_p_1, axis=1)","d2f6f6c4":"train[\"index_diff\"] =( (train[\"atom_index_0\"]- train[\"atom_index_1\"]).abs()-1)\ntest[\"index_diff\"] =( (test[\"atom_index_0\"]- test[\"atom_index_1\"]).abs()-1)","5e2169be":"train.head()","b294e0c2":"train.to_csv(\"MolecularProperties_train_v1.csv.gz\",compression=\"gzip\")\ntest.to_csv(\"MolecularProperties_test_v1.csv.gz\",compression=\"gzip\")","a81acbe4":"molecules = train.pop('molecule_name')\ntest = test.drop('molecule_name', axis=1)","d40bc922":"train.head()","c7715770":"train['fold'] = 0","c442f2f2":"n_splits = 3\ngkf = GroupKFold(n_splits=n_splits) # we're going to split folds by molecules\n\n\nfor fold, (in_index, oof_index) in enumerate(gkf.split(train, groups=molecules)):\n    train.loc[oof_index, 'fold'] = fold","d13af123":"import h2o\nprint(h2o.__version__)\nfrom h2o.automl import H2OAutoML\n\nh2o.init(max_mem_size='14G')","b033039d":"train = h2o.H2OFrame(train)","43d97bec":"test = h2o.H2OFrame(test)","8c5c35f9":"train['type'] = train['type'].asfactor()\ntrain['atom_0'] = train['atom_0'].asfactor()\ntrain['atom_1'] = train['atom_1'].asfactor()\n\ntest['type'] = test['type'].asfactor()\ntest['atom_0'] = test['atom_0'].asfactor()\ntest['atom_1'] = test['atom_1'].asfactor()","fee62ae9":"x = test.columns\ny = 'scalar_coupling_constant'","bfd809f0":"aml = H2OAutoML(max_models=10, seed=47, max_runtime_secs=100) # 50 models,  max_runtime_secs=26000\naml.train(x=x, y=y, training_frame=train)","646339cf":"# View the AutoML Leaderboard\nlb = aml.leaderboard\nlb.head()  # Print all rows instead of default (10 rows)","e46197fa":"# The leader model is stored here\naml.leader","adb24027":"preds = aml.predict(test)\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv')\nsample_submission['scalar_coupling_constant'] = preds.as_data_frame().values.flatten()\nsample_submission.to_csv('h2o_submission_2.csv', index=False)","bf53a68f":"## prep data for model running","153270e1":"### export before model running"}}