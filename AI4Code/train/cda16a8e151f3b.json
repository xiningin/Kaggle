{"cell_type":{"c73c529b":"code","c600cb74":"code","a4bb0847":"code","7b98a38a":"code","2167f004":"code","b58a1a3c":"code","46ce816e":"code","b2fe8bf7":"code","ad4619b7":"code","0640e0bc":"code","90699163":"code","80abe4f6":"code","59b9d569":"code","55289aa4":"code","f96ea785":"code","11c86ece":"code","7f36c27b":"code","f63b8867":"code","602f5362":"code","b4ee7141":"code","a87b124e":"code","83883561":"code","3e6dc52b":"code","2987beb3":"code","b0120ce3":"code","73533625":"code","bfa16083":"code","85c99480":"code","ae3d5ead":"code","c5683553":"code","23fc08c0":"code","e9e520a6":"code","405d8a48":"code","92e94248":"code","ec55be82":"code","76e56306":"code","e57b55de":"code","fe1dbf58":"code","b5429e31":"code","0c767822":"code","f04755c7":"code","b28bddf5":"code","7375d86b":"code","42548597":"code","88811942":"code","b93192a3":"code","e4820c99":"code","973c9f3c":"code","a2d85fa2":"code","7c3478fa":"code","5f46880f":"code","c4ef578d":"code","800a020c":"code","7686cb71":"code","6eb942cb":"code","baeb2489":"code","bb4fb313":"code","c8f3c571":"code","77ea1dfa":"code","528b327a":"code","dcac410b":"code","1bf2047a":"code","0f481443":"code","6d8b2cad":"code","99267b14":"code","a8a0ee3d":"code","d14352ff":"code","77948380":"code","60abfaa2":"code","0d7660bf":"code","f8ce2672":"code","989b1d42":"code","aaa674f1":"code","e7b3987b":"code","b15fd6c7":"code","134fb3f3":"code","cc4e0e23":"code","f3cef7b3":"code","64654186":"code","5fab4213":"code","1e62d680":"code","459a81a9":"code","d5e0f478":"code","af9cc96b":"code","938dce9a":"code","d8264777":"code","445b0651":"code","14e85f3f":"markdown","955e90de":"markdown","43e02f52":"markdown","7dc201e2":"markdown","be3656cf":"markdown","8e931083":"markdown","45c92991":"markdown","010ead65":"markdown","5d349e21":"markdown","01314fc5":"markdown","7f9bdebe":"markdown","e6794557":"markdown","9a7dd4df":"markdown","02348628":"markdown","a7442b1e":"markdown","f68b9b2e":"markdown","764b83ee":"markdown"},"source":{"c73c529b":"import pandas as pd\nimport re\nimport numpy as np\nimport  matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost as xgb\nimport sklearn\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import Lasso\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBRegressor\nimport warnings\nwarnings.","c600cb74":"data= pd.read_csv('..\/input\/used-car-price\/used_cars_data.csv')","a4bb0847":"data = data.set_index('S.No.')","7b98a38a":"data.info()","2167f004":"data.drop_duplicates(['Name','Location','Owner_Type','Mileage','Engine'],inplace = True)","b58a1a3c":"data['New_Price'] = data['New_Price'].astype('object')","46ce816e":"numeric_price = []\n\nregex_Lakh = \"^\\d+(\\.\\d+)? Lakh$\"\n\nfor i in data['New_Price']:\n    if isinstance(i,str):\n        if re.match(regex_Lakh,i):\n            numeric_price.append(i.replace(' ','').replace('Lakh',''))\n        else:\n            print(i)\n    else:\n        numeric_price.append(np.nan)","b2fe8bf7":"regex_CR = \"^\\d+(\\.\\d+)? Cr$\"\n\nfor i in data['New_Price']:\n    if isinstance(i,str):\n        if re.match(regex_CR,i):\n            numeric_price.append(float(i.split(\" \")[0]) * 100)\n            print(float(i.split(' ')[0]) * 100)\n    else:\n        numeric_price.append(np.nan)","ad4619b7":"numeric_price = []\n\nfor i in data['New_Price']:\n    if isinstance(i,str):\n        if re.match(regex_Lakh,i):\n            numeric_price.append(float(i.replace(' ','').replace('Lakh','')))\n        else:\n            numeric_price.append(float(i.split(' ')[0]) * 100)\n    else:\n        numeric_price.append(np.nan)","0640e0bc":"data['New_Price'] = numeric_price","90699163":"data['New_Price']","80abe4f6":"sns.distplot(data['New_Price'])","59b9d569":"data['Model'] = data['Name'].apply(lambda x: x.split(' ')[1])\ndata['Company'] = data['Name'].apply(lambda x: x.split(' ')[0])","55289aa4":"data.loc[data.Company == 'ISUZU','Company']='Isuzu'\ndata.loc[data.Company =='Mini','Company']='Mini Cooper'\ndata.loc[data.Company =='Land','Company']='Land Rover'","f96ea785":"data['New_Price'] = data.groupby('Name')['New_Price'].apply(lambda x: x.fillna(x.median()))","11c86ece":"data['New_Price'] = data.groupby('Model')['New_Price'].apply(lambda x: x.fillna(x.median()))","7f36c27b":"data['New_Price'] = data.groupby(['Engine'])['New_Price'].apply(lambda x : x.fillna(x.median()))","f63b8867":"data['New_Price'] = data.groupby('Power')['New_Price'].apply(lambda x:x.fillna (x.median()))","602f5362":"data.info()","b4ee7141":"data = data[~data['New_Price'].isnull()]","a87b124e":"data['Seats'] = data['Seats'].fillna(data['Seats'].median())","83883561":"data['Mileage'] = data['Mileage'].apply(lambda x:str(x).rstrip('km\/kg'))\ndata['Mileage'] = data['Mileage'].apply(lambda x:str(x).rstrip('kmpl'))\ndata['Mileage'] = pd.to_numeric(data['Mileage'],errors = 'coerce')\n","3e6dc52b":"sns.distplot(data['Price'])","2987beb3":"data[data['Price'].isnull()]['Model'].value_counts()","b0120ce3":"data['Price'] = data.groupby('Model')['Price'].apply(lambda x:x.fillna(x.mean()))","73533625":"data = data[~data['Price'].isnull()]","bfa16083":"data = data[~data['Mileage'].isnull()]","85c99480":"data['Engine'] = data['Engine'].apply(lambda x:str(x).rstrip('CC'))\ndata['Engine'] = data['Engine'].astype('float64')","ae3d5ead":"sns.distplot(data['New_Price'])","c5683553":"data['New_Price'] = np.log(data['New_Price'])","23fc08c0":"sns.distplot(data['New_Price'])","e9e520a6":"data['Power'] = data['Power'].apply(lambda x:str(x).rstrip('bhp'))\ndata['Power'] = pd.to_numeric(data['Power'],errors='coerce')","405d8a48":"plt.figure(figsize=(10,10))\nfor  n,i in enumerate(data.select_dtypes(['int64','float64']).columns,start=1):\n    plt.subplot(6,20,n)\n    plt.figure(figsize=(10,10))\n    sns.distplot(data[i])\n    plt.show()","92e94248":"a = ['Engine','Price','Power','Kilometers_Driven']\n\nfor i in a:\n    data[i] = np.log(data[i])","ec55be82":"import  matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,10))\nfor  n,i in enumerate(a,start=1):\n    plt.subplot(6,20,n)\n    plt.figure(figsize=(10,10))\n    sns.distplot(data[i])\n    plt.show()","76e56306":"data.pivot_table(index='Company',columns=['Fuel_Type'],values = 'New_Price',aggfunc = 'mean')","e57b55de":"data['Power'] = data['Power'].fillna(data['Power'].median())","fe1dbf58":"data.info()","b5429e31":"data['Owner_Type'].value_counts()","0c767822":"data['Owner_Type'] = data['Owner_Type'].map({'First':1,'Second':2,'Third':3,'Fourth & Above':4})","f04755c7":"data['Manual'] = data.Transmission.map({'Manual':1,'Automatic':0})","b28bddf5":"data.drop('Transmission',inplace = True,axis=1)","7375d86b":"data.Fuel_Type.value_counts()","42548597":"a=pd.get_dummies(data['Fuel_Type'],drop_first = True)","88811942":"data=pd.concat([data,a],axis=1)","b93192a3":"data.drop('Fuel_Type',inplace= True,axis=1)","e4820c99":"data","973c9f3c":"data['age_of_car'] = 2021 - data['Year'] ","a2d85fa2":"data.drop('Year',inplace = True,axis=1)","7c3478fa":"data.info()","5f46880f":"data['Location'].value_counts()","c4ef578d":"b = pd.get_dummies(data['Location'],drop_first = True)","800a020c":"data = pd.concat([data,b],axis=1)","7686cb71":"pd.options.display.max_rows = 20\npd.options.display.max_columns = None","6eb942cb":"data","baeb2489":"data.drop(['Name','Location','Model','Company'],axis=1,inplace = True)","bb4fb313":"scaler = MinMaxScaler()","c8f3c571":"Linear = data","77ea1dfa":"a=['Mileage','Engine','Power','New_Price','Price']\n\nLinear[a] = scaler.fit_transform(Linear[a])","528b327a":"Linear","dcac410b":"y=Linear.pop('Price')\nx = Linear","1bf2047a":"x_train,X_test,y_train,y_test = train_test_split(x,y,train_size=0.8)","0f481443":"lr = LinearRegression() \n\nlr.fit(x_train,y_train)","6d8b2cad":"predicted = lr.predict(X_test)","99267b14":"sklearn.metrics.r2_score(y_test,predicted)","a8a0ee3d":"lr_rfe = LinearRegression()\n\nrfe = RFE(lr_rfe,14)","d14352ff":"rfe.fit(x_train,y_train)","77948380":"list(zip(x.columns,rfe.support_,rfe.ranking_))","60abfaa2":"selected_rfe = x.columns[rfe.support_]\nselected_rfe = list(selected_rfe)","0d7660bf":"lr.fit(x_train[selected_rfe],y_train)","f8ce2672":"predicted_RFE= lr.predict(X_test[selected_rfe])","989b1d42":"sklearn.metrics.r2_score(y_test,predicted_RFE)","aaa674f1":"las = Lasso(alpha = 0.00000001 )","e7b3987b":"las.fit(x_train[selected_rfe],y_train)","b15fd6c7":"predicted_LAS =las.predict(X_test[selected_rfe])","134fb3f3":"sklearn.metrics.r2_score(y_test,predicted_LAS)","cc4e0e23":"tx_train,tX_test,ty_train,ty_test = train_test_split(data,y,train_size = 0.8)","f3cef7b3":"rf = RandomForestRegressor()\n\nparam_ = {'n_estimators':[100,120,130,140],\n          'max_depth':[17,20,23],\n          'min_samples_split':[30,35,40,50],\n          'min_samples_leaf':[13,15,20,30,40],\n          'max_features':[6,7,8]}\n\ngrid = GridSearchCV(estimator=rf,\n                    param_grid=param_,\n                    cv=5,\n                    n_jobs =-1,\n                    scoring = 'r2',\n                    refit = True)\n\ngrid.fit(tx_train,ty_train)","64654186":"predicted_RF = grid.predict(tX_test)","5fab4213":"sklearn.metrics.r2_score(ty_test,predicted_RF)","1e62d680":"dtt = DecisionTreeRegressor()\n\nABC = AdaBoostRegressor(base_estimator= dtt , n_estimators = 48, random_state=101)","459a81a9":"ABC.fit(x_train,y_train)","d5e0f478":"predicted_DT = ABC.predict(X_test)","af9cc96b":"sklearn.metrics.r2_score(y_test,predicted_DT)","938dce9a":"xgb = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=1.0, max_delta_step=0, max_depth=8,\n             min_child_weight=60, monotone_constraints='()',\n             n_estimators=100, n_jobs=8, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)\n\nxgb.fit(tx_train, ty_train)","d8264777":"predicted_XG = xgb.predict(X_test)","445b0651":"sklearn.metrics.r2_score(y_test,predicted_XG)","14e85f3f":"## DROPPING THE CATEGORICAL VARIABLES WHICH WONT BE USEFUL","955e90de":"## DEALING WITH MISSING VALUES","43e02f52":"## REMOVING DUPLICATE DATA","7dc201e2":"## GETTING DUMMIES ","be3656cf":"## MAPPING THE CATEGORICAL VALUES","8e931083":"## LOG CONVERSION OF COLUMNS DUE TO RIGHT SKEWNESS","45c92991":"## STRIPING THE MEASURING UNIT","010ead65":"## XGRADIENT BOOSTING","5d349e21":"## DECISION TREE CLASSIFIER","01314fc5":"### IMPORTING LIBRARIES","7f9bdebe":"## SINCE THE RANDOMFOREST DOES NOT REQUIRE SCALING","e6794557":"## LASSO REGRESSION","9a7dd4df":"## PROCESSING NEW_PRICE COLUMN IN THE DATASET","02348628":"## VISUALIZATION OF DATA WITH RESPECT TO NEW_PRICE","a7442b1e":"## SIMPLE LINEAR REGRESSION","f68b9b2e":"## SELECTION IMPORTANT FEATURE","764b83ee":"## SPLITTING THE DATASET"}}