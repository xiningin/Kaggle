{"cell_type":{"c0d379bb":"code","88ebe1bd":"code","fc84be89":"code","9fb88c33":"code","207fe9e4":"code","a543c2bd":"code","f3dd0794":"code","acd3cd45":"code","79d201af":"code","11848dc8":"code","a84fd827":"code","470cf123":"code","e0e33f39":"code","3b592691":"code","32f3cfbc":"code","ac0e569a":"code","24a85ed2":"code","74f49fed":"code","ba491635":"code","6c7a4030":"code","4b9ecefd":"code","90e2846f":"code","1aa55d42":"code","f23ed6b3":"code","b54f3bb2":"code","876fb16b":"code","b1862440":"code","199e69e1":"code","897e108a":"code","76764b63":"markdown","37699c51":"markdown","19b86491":"markdown","a5e8fec2":"markdown","4eb9f8c6":"markdown","1d0e26ef":"markdown","aaf67656":"markdown","860de726":"markdown"},"source":{"c0d379bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88ebe1bd":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","fc84be89":"df.head()","9fb88c33":"df.describe()","207fe9e4":"df.isnull().sum()","a543c2bd":"df.loc[df['Sex'] == 'male', 'Sex'] = 0\ndf.loc[df['Sex'] == 'female', 'Sex'] = 1\ndf.head()","f3dd0794":"#setdata = set(df['Name'].values.tolist())\n#print(setdata)","acd3cd45":"mediana_male = df[df[\"Sex\"] == 0][\"Age\"].median()\nmediana_female = df[df[\"Sex\"] == 1][\"Age\"].median()\ndf.loc[(df[\"Sex\"] == 0) & (df[\"Age\"].isnull()), \"Age\"] = mediana_male\ndf.loc[(df[\"Sex\"] ==1 ) & (df[\"Age\"].isnull()), \"Age\"] = mediana_female\ndf.head()","79d201af":"df.isnull().sum()","11848dc8":"titles = set()\nfor names in df['Name']:\n    titles.add(names.split(\",\")[1].split(\".\")[0].strip(\" \"))\nprint(titles)","a84fd827":"Map = {'Mrs': 1, 'Miss': 2, 'Major': 3, 'Lady': 4, 'Sir': 5, 'Ms': 6, 'Mr': 7, 'Mlle': 8, 'Don': 9, 'Mme': 10, 'Capt': 11, 'Master': 12, 'the Countess': 13, 'Jonkheer': 14, 'Col': 15, 'Rev': 16, 'Dr': 17}\ndef func(row):\n    row['Name'] = row['Name'].split(\",\")[1].split(\".\")[0].strip(\" \")\n    return Map.get(row['Name'])\ndf.loc[df['Embarked'] == 'C', 'Embarked'] = 0\ndf.loc[df['Embarked'] == 'Q', 'Embarked'] = 1\ndf.loc[df['Embarked'] == 'S', 'Embarked'] = 2\ndf['Embarked'] = df['Embarked'].fillna(df['Embarked'].notnull().mean())\ndf['Title'] = df.apply(func,axis=1)\ndf.head()","470cf123":"scale = df[['Pclass','Sex','Age','SibSp','Parch','Fare','Title','Survived']].to_numpy()\nprint(scale.shape)","e0e33f39":"import matplotlib.pyplot as plt\ndf = df[['Age','Sex','Survived']]\nX = df.iloc[:, :-1]\n\ny = df.iloc[:, -1]\n\n# filter out the applicants that got admitted\nsurvival = df.loc[y == 1]\nsurvival.head()\n\n# filter out the applicants that din't get admission\nnot_survival = df.loc[y == 0]\n\n# plots\nplt.scatter(survival.iloc[:, 0], survival.iloc[:, 1], s=10, label='survival')\nplt.scatter(not_survival.iloc[:, 0], not_survival.iloc[:, 1], s=10, label='not_survival')\nplt.legend()\nplt.show()","3b592691":"t = int(0.8 * scale.shape[0])\ntrain = scale[:t]\ntest = scale[t:]\nprint(train.shape, test.shape)","32f3cfbc":"from sklearn import preprocessing\nmin_max_scaler = preprocessing.MinMaxScaler()\nX_train = min_max_scaler.fit_transform(train[:,:-1])\nX_test = min_max_scaler.transform(test[:,:-1])\nprint(X_train.shape, X_test.shape)","ac0e569a":"y_train = train[:,-1]\ny_test = test[:,-1]\nX_train = X_train\ny_train = y_train.astype('int')\nX_test = X_test\ny_test = y_test.astype('int')","24a85ed2":"print(X_train)","74f49fed":"%time\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(random_state=0)\nmodel.fit(X_train, y_train)\n","ba491635":"model.predict(X_test)","6c7a4030":"print(\"Train set: \", model.score(X_train, y_train))\nprint(\"Test set: \", model.score(X_test, y_test))","4b9ecefd":"csv = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","90e2846f":"csv.head()","1aa55d42":"csv.isnull().sum()","f23ed6b3":"csv.loc[csv['Sex'] == 'male', 'Sex'] = 0\ncsv.loc[csv['Sex'] == 'female', 'Sex'] = 1\nmediana_male = csv[csv[\"Sex\"] == 0][\"Age\"].median()\nmediana_female = csv[csv[\"Sex\"] == 1][\"Age\"].median()\ncsv.loc[(csv[\"Sex\"] == 0) & (csv[\"Age\"].isnull()), \"Age\"] = mediana_male\ncsv.loc[(csv[\"Sex\"] ==1 ) & (csv[\"Age\"].isnull()), \"Age\"] = mediana_female\ncsv['Fare'] = csv['Fare'].fillna(csv['Fare'].notnull().mean())\nMap = {'Mrs': 1, 'Miss': 2, 'Major': 3, 'Lady': 4, 'Sir': 5, 'Ms': 6, 'Mr': 7, 'Mlle': 8, 'Don': 9, 'Mme': 10, 'Capt': 11, 'Master': 12, 'the Countess': 13, 'Jonkheer': 14, 'Col': 15, 'Rev': 16, 'Dr': 17}\ndef func(row):\n    row['Name'] = row['Name'].split(\",\")[1].split(\".\")[0].strip(\" \")\n    return Map.get(row['Name'])\ncsv.loc[csv['Embarked'] == 'C', 'Embarked'] = 0\ncsv.loc[csv['Embarked'] == 'Q', 'Embarked'] = 1\ncsv.loc[csv['Embarked'] == 'S', 'Embarked'] = 2\ncsv['Embarked'] = csv['Embarked'].fillna(csv['Embarked'].notnull().mean())\ncsv['Title'] = csv.apply(func,axis=1)\ncsv['Title'] = csv['Title'].fillna(csv['Title'].notnull().mean())\ndf.head()\nX_test = min_max_scaler.transform(csv[['Pclass','Sex','Age','SibSp','Parch','Fare','Title']].to_numpy())","b54f3bb2":"csv.isnull().sum()","876fb16b":"print(np.any(np.isnan(X_test)), np.all(np.isfinite(X_test)))","b1862440":"np.argwhere(np.isnan(X_test))","199e69e1":"y_pred = model.predict(X_test)\nprint(y_pred)","897e108a":"output = pd.DataFrame({'PassengerId': csv.PassengerId, 'Survived': y_pred.astype(int)})\noutput.to_csv('submission.csv', index=False)","76764b63":"# Predict","37699c51":"# Scale Data","19b86491":"### Accuracy","a5e8fec2":"scale = df[['Sex','Age','Survived']].to_numpy()\nprint(scale.shape)","4eb9f8c6":"# Submit","1d0e26ef":"# Visualization","aaf67656":"### Accuracy with Age, Sex: \n![image.png](attachment:abde0e7b-5d55-4f6a-a476-d80681b90bd0.png)\n### Accuracy with PassengerId, Pclass, Sex, Age, Fare:\n![image.png](attachment:30f07161-147f-430e-a37f-df19f82b40b3.png)","860de726":"# Training"}}