{"cell_type":{"f48433c6":"code","65e1ba48":"code","ad8cae85":"code","6382f9e0":"code","74d6587d":"code","8229237b":"code","96be9854":"code","37a8e71b":"code","1a635a75":"code","a058688a":"code","781a6815":"code","5a2614b3":"code","0160ef54":"code","d840924e":"code","6709fe63":"code","1400b544":"code","13b17027":"code","396dacba":"code","8fa1ef90":"code","dbceef8b":"code","fa405ca1":"code","2faed099":"code","0d4cde44":"code","0ed3f9e3":"code","f4c25c4c":"code","c732f821":"code","a47597a6":"code","bdfe7208":"code","501e0a7a":"code","37dc7af7":"code","d3f0064d":"code","77cea651":"code","1610dffd":"markdown","6a1e8f1e":"markdown","3beb7383":"markdown","ba696d0d":"markdown","12a6eccd":"markdown"},"source":{"f48433c6":"#importing helping hands\nimport os\nimport time\nfrom collections import Counter\n\nimport pandas as pd\nimport numpy as np\n\npd.set_option('display.float_format', lambda x: '%.2f' % x)\n\nfrom sklearn.model_selection import train_test_split\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport category_encoders as ce\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import confusion_matrix, f1_score","65e1ba48":"train_path = '..\/input\/credit-risk-dataset\/loan\/loan.csv'\ndata = pd.read_csv(train_path)","ad8cae85":"data.head()","6382f9e0":"data['loan_status'].unique()","74d6587d":"#copying the dataframe\ndf = data.copy()","8229237b":"#removing columns havinf more than 97% NaNs \ncolumns = []\nfor column in df.columns:\n    if ((df[column].isna().sum()\/len(df))*100) >= 97:\n        columns.append(column)\ndf.drop(columns = columns, axis = 1, inplace = True)","96be9854":"df.info()","37a8e71b":"#fillna in dataframe\ndf.fillna(0, inplace = True)","1a635a75":"#dividing the loan_statuses into 3 categories\ndf.loc[df['loan_status'].isin(['Issued','Current','Does not meet the credit policy. Status:Fully Paid', 'Fully Paid']), 'loan_category'] = 1\ndf.loc[df['loan_status'].isin(['In Grace Period', 'Late (16-30 days)', 'Late (31-120 days)']), 'loan_category'] = 2\ndf.loc[df['loan_status'].isin(['Charged Off' , 'Does not meet the credit policy. Status:Charged Off', 'Default']), 'loan_category'] = 3\n\n#droping the loan_status column \ndf.drop(['loan_status'], axis = 1, inplace = True)\n\n#object type columns \nobject_columns = df.select_dtypes('object')\n\n#separating the features and labels\nfeatures = df.drop(columns = ['loan_category'], axis = 1)\nlabels = df['loan_category']\n\n#train-test spliting\nX_train, X_test, y_train, y_test =  train_test_split(features, labels, test_size = 0.25, random_state = 43, stratify = labels)","a058688a":"def category_encoding(columns, X_train, X_test):\n    #encoding the categorical data\n    encoder = ce.OrdinalEncoder(cols = columns)\n    encoder = encoder.fit(X_train)\n\n    X_train_encoded = encoder.transform(X_train)\n    X_test_encoded = encoder.transform(X_test)\n    \n    return X_train_encoded, X_test_encoded","781a6815":"def training_predicting(X_train, X_test, y_train, n, imp_features = False):\n    #selecting random forest for training\n    model = RandomForestClassifier(n_estimators = n, verbose = 1)\n\n    #training\n    model.fit(X_train, y_train)\n\n    #prediction and metrix score\n    y_predict = model.predict(X_test)\n    \n    if imp_features == True:\n        return y_predict, model.feature_importances_\n    \n    return y_predict","5a2614b3":"#categorical encoding\nX_train_encoded, X_test_encoded = category_encoding(object_columns, X_train, X_test)\n\n#training, predicting, feature importance  \ny_predict, imp_features = training_predicting(X_train_encoded, X_test_encoded, y_train, 20, imp_features = True)","0160ef54":"#confusion matrix\ncf_matrix = confusion_matrix(y_test, y_predict, labels = [1,2,3])\nsns.heatmap(cf_matrix, annot=True, fmt = 'g')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()","d840924e":"#10 important features\nimp_features = pd.DataFrame(imp_features, index = X_train.columns, columns = ['importance']).sort_values('importance', ascending = False)\nimp_features.head(10)","6709fe63":"#copying the dataframe\ndf = data.copy()","1400b544":"#removing columns havinf more than 97% NaNs \ncolumns = []\nfor column in df.columns:\n    if ((df[column].isna().sum()\/len(df))*100) >= 97:\n        columns.append(column)\ndf.drop(columns = columns, axis = 1, inplace = True)","13b17027":"#last payment date can be splitted into months and years as well\ndf['last_pymnt_d_month'] = df['last_pymnt_d'].map(lambda x: str(x).split(\"-\")[0])\ndf['last_pymnt_d_year'] = df['last_pymnt_d'].map(lambda x: str(x).split(\"-\")[-1])\ndf['last_pymnt_d_nan'] = df['last_pymnt_d'].map(lambda x: 0 if pd.isna(x) else 1)","396dacba":"#next payment date can be splitted into months and years as well\ndf['next_pymnt_d_month'] = df['next_pymnt_d'].map(lambda x: str(x).split(\"-\")[0])\ndf['next_pymnt_d_year'] = df['next_pymnt_d'].map(lambda x: str(x).split(\"-\")[-1])\ndf['next_pymnt_d_nan'] = df['next_pymnt_d'].map(lambda x: 0 if pd.isna(x) else 1)","8fa1ef90":"#loan issue date can be splitted into months and years as well\ndf['issue_d_month'] = df['issue_d'].map(lambda x: str(x).split(\"-\")[0])\ndf['issue_d_year'] = df['issue_d'].map(lambda x: str(x).split(\"-\")[-1])\ndf['issue_d_nan'] = df['issue_d'].map(lambda x: 0 if pd.isna(x) else 1)","dbceef8b":"#new percentage features created from existed ones\ndf['rec_prncp_per'] = (df['total_rec_prncp']\/df['funded_amnt'])*100\ndf['rem_prncp_per'] = (df['out_prncp']\/df['funded_amnt'])*100\ndf['installment _perc'] = (df['installment']\/df['funded_amnt'])*100\ndf['open_loc_perc'] = (df['open_acc']\/df['total_acc'])*100","fa405ca1":"le = LabelEncoder()\nle.fit(df['last_pymnt_d_month'].unique())\n\ndf['last_pymnt_d_month'] = le.transform(df['last_pymnt_d_month'])\ndf['next_pymnt_d_month'] = le.transform(df['next_pymnt_d_month'])\ndf['issue_d_month'] = le.transform(df['issue_d_month'])","2faed099":"#fillna in dataframe\ndf.fillna(0, inplace = True)","0d4cde44":"#dividing the loan_statuses into 3 categories\ndf.loc[df['loan_status'].isin(['Issued','Current','Does not meet the credit policy. Status:Fully Paid', 'Fully Paid']), 'loan_category'] = 1\ndf.loc[df['loan_status'].isin(['In Grace Period', 'Late (16-30 days)', 'Late (31-120 days)']), 'loan_category'] = 2\ndf.loc[df['loan_status'].isin(['Charged Off' , 'Does not meet the credit policy. Status:Charged Off', 'Default']), 'loan_category'] = 3\n\n#droping the loan_status column \ndf.drop(['loan_status'], axis = 1, inplace = True)\n\n#object type columns \nobject_columns = df.select_dtypes('object')\n\n#separating the features and labels\nfeatures = df.drop(columns = ['loan_category'], axis = 1)\nlabels = df['loan_category']","0ed3f9e3":"#train-test spliting\nX_train, X_test, y_train, y_test =  train_test_split(features, labels, test_size = 0.25, random_state = 43, stratify = labels)","f4c25c4c":"#categorical encoding\nX_train_encoded, X_test_encoded = category_encoding(object_columns, X_train, X_test)","c732f821":"#training, predicting, feature importance  \ny_predict, imp_features = training_predicting(X_train_encoded, X_test_encoded, y_train, 20, imp_features = True)","a47597a6":"#confusion matrix\ncf_matrix = confusion_matrix(y_test, y_predict, labels = [1,2,3])\nsns.heatmap(cf_matrix, annot=True, fmt = 'g')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()","bdfe7208":"#finding feature importance\nimp_features = pd.DataFrame(imp_features, index = X_train.columns, columns = ['importance']).sort_values('importance', ascending = False)\nimp_features.head(10)","501e0a7a":"Counter(y_train)","37dc7af7":"from imblearn.over_sampling import SMOTE\n\noversample = SMOTE()\nX_train, y_train = oversample.fit_resample(X_train_encoded, y_train)","d3f0064d":"#training, predicting, feature importance  \ny_predict, imp_features = training_predicting(X_train, X_test_encoded, y_train, 20, imp_features = True)","77cea651":"#confusion matrix\ncf_matrix = confusion_matrix(y_test, y_predict, labels = [1,2,3])\nsns.heatmap(cf_matrix, annot=True, fmt = 'g')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.show()","1610dffd":"#### Loan Status\nBefore Getting into feature engineering lets understand about the loan status. I have created 4 different categories for given statuses.\n\n1. **Issued**\n    * Recently issued a fresh loan to borrower\n2. **Issued, Current, Fully Paid, Does not meet the credit policy. Status:Fully Paid (Category 1)**\n    * Current - All outstanding payments are paid up to date \n    * Fully Paid - All outstanding payments are paid up and loan is finished\n3. **In Grace Period, Late (16-30 days), Late (31-120 days) (Category 2)**\n    * In Grace Period - 1-15 days passed after the due date\n    * Late (16-30 days) - 16-30 days passed after the due date\n    * Late (31-120 days) - 31-120 days passed after the due date\n4. **Charged Off , Does not meet the credit policy. Status:Charged Off, Default (Category 3)**\n    * Default - The borrower is not able to make outstanding payments for an extended period of time\n    * Charged Off - A charge-off usually occurs when the creditor has deemed an outstanding debt is uncollectible\n    \nInorder to get idea about the different loan status, please visit https:\/\/bit.ly\/35Vv3W3","6a1e8f1e":"## Feature Creation","3beb7383":"#### I would like your thoughts on how to improve this model's False Negative problem","ba696d0d":"## SMOTE for balancing the data","12a6eccd":"## Normal Random Forest"}}