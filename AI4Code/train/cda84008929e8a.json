{"cell_type":{"e6b92811":"code","70df6946":"code","0c3a618f":"code","524c6e70":"code","021193c3":"code","dbd90bae":"code","97b8c2df":"code","55b56acd":"code","5415f444":"code","9abc7354":"code","18fadfe0":"code","180274c5":"code","00724bea":"code","81d1e692":"code","ce39d944":"code","c72e7d5f":"code","5a4af5a1":"code","b539cd9f":"code","5f2863f2":"code","bc17b244":"code","938ac2aa":"code","c0bb7a5e":"code","431b1ef5":"code","a2214ec3":"code","9c2117e5":"code","4cc395fe":"code","99cdeb41":"code","9384388f":"code","beb55894":"code","0310c3f3":"markdown","14cff6d8":"markdown"},"source":{"e6b92811":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport cv2\nimport random\nfrom random import randint\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70df6946":"# importing all the required libraries\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport skimage.io as io\nfrom skimage.transform import rotate, AffineTransform, warp\nfrom skimage.util import random_noise\nfrom skimage.filters import gaussian\nimport matplotlib.pyplot as plt\nimport PIL.Image\nimport matplotlib.pyplot as plt\nimport torch\nfrom torchvision import transforms","0c3a618f":"from PIL import Image\n\nimage = Image.open(\"..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg\")\nimage","524c6e70":"#flip image up-to-down\nflipUD = np.flipud(image)\n\nplt.imshow(flipUD)\nplt.title('Up Down Flipped')","021193c3":"def imshow(img, transform):\n    \"\"\"helper function to show data augmentation\n    :param img: path of the image\n    :param transform: data augmentation technique to apply\"\"\"\n    \n    img = PIL.Image.open(img)\n    fig, ax = plt.subplots(1, 2, figsize=(15, 4))\n    ax[0].set_title(f'original image {img.size}')\n    ax[0].imshow(img)\n    img = transform(img)\n    ax[1].set_title(f'transformed image {img.size}')\n    ax[1].imshow(img)","dbd90bae":"loader_transform = transforms.Resize((140, 140))\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","97b8c2df":"loader_transform = transforms.CenterCrop(140)\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","55b56acd":"loader_transform = transforms.Grayscale(num_output_channels=1)\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","5415f444":"loader_transform = transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","9abc7354":"loader_transform = transforms.Pad(140, fill=0, padding_mode='constant')\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","18fadfe0":"# left, top, right, bottom\nloader_transform = transforms.Pad((2, 5, 0, 5))\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","180274c5":"loader_transform = transforms.RandomAffine(45, translate=None, scale=None, shear=None, resample=False, fillcolor=0)\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","00724bea":"loader_transform = transforms.RandomAffine(90, translate=None, scale=None, shear=None, resample=False, fillcolor=0)\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","81d1e692":"# random affine transformation of the image keeping center invariant\nloader_transform = transforms.RandomAffine(0, translate=(0.4, 0.5))\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","ce39d944":"#With a Little (Big) help from my friend Balraj Ashwath @balraj98\n\nloader_transform = transforms.RandomApply([transforms.Resize((140, 140))], p=0.5)\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","c72e7d5f":"#With a Little (Big) help from my friend Balraj Ashwath @balraj98\n\nloader_transform = transforms.RandomApply([transforms.Resize((140, 140)),transforms.Pad(140, fill=0), transforms.RandomHorizontalFlip()],p=0.5)\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","5a4af5a1":"loader_transform = transforms.RandomCrop(32, padding=4, padding_mode='reflect')\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","b539cd9f":"loader_transform = transforms.RandomHorizontalFlip(p=0.5)\n\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","5f2863f2":"#Hue can be described of as the shade of the colors in an image\n\nimg = PIL.Image.open('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg')\nfig, ax = plt.subplots(2, 2, figsize=(16, 10))\n\n# brightness\nloader_transform1 = transforms.ColorJitter(brightness=2)\nimg1 = loader_transform1(img)\nax[0, 0].set_title(f'brightness')\nax[0, 0].imshow(img1)\n\n# contrast\nloader_transform2 = transforms.ColorJitter(contrast=2)\nimg2 = loader_transform2(img)\nax[0, 1].set_title(f'contrast')\nax[0, 1].imshow(img2)\n\n# saturation\nloader_transform3 = transforms.ColorJitter(saturation=2)\nimg3 = loader_transform3(img)\nax[1, 0].set_title(f'saturation')\nax[1, 0].imshow(img3)\nfig.savefig('color augmentation', bbox_inches='tight')\n\n# hue\nloader_transform4 = transforms.ColorJitter(hue=0.2)\nimg4 = loader_transform4(img)\nax[1, 1].set_title(f'hue')\nax[1, 1].imshow(img4)\n\nfig.savefig('color augmentation', bbox_inches='tight')","bc17b244":"# horizontal flip with probability 1 (default is 0.5)\nloader_transform = transforms.RandomHorizontalFlip(p=1)\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","938ac2aa":"loader_transform = transforms.RandomRotation(30)\nimshow('..\/input\/sweet-spicy-north-or-south\/indian-cuisine-2020-map.jpg', loader_transform)","c0bb7a5e":"import fastai\nfrom fastai.tabular.all import *\nfrom fastai.text.all import *\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\nfrom fastai import *","431b1ef5":"def _add1(x): return x+1\ndumb_tfm = RandTransform(enc=_add1, p=0.5)\nstart,d1,d2 = 2,False,False\nfor _ in range(40):\n    t = dumb_tfm(start, split_idx=0)\n    if dumb_tfm.do: test_eq(t, start+1); d1=True\n    else:           test_eq(t, start)  ; d2=True\nassert d1 and d2\ndumb_tfm","a2214ec3":"_,axs = subplots(1,2)\nshow_image(img, ctx=axs[0], title='original')\nshow_image(img.flip_lr(), ctx=axs[1], title='flipped');","9c2117e5":"_,axs = plt.subplots(1,3,figsize=(12,4))\nfor ax,sz in zip(axs.flatten(), [300, 500, 700]):\n    show_image(img.crop_pad(sz), ctx=ax, title=f'Size {sz}');","4cc395fe":"_,axs = plt.subplots(1,3,figsize=(12,4))\nfor ax,mode in zip(axs.flatten(), [PadMode.Zeros, PadMode.Border, PadMode.Reflection]):\n    show_image(img.crop_pad((600,700), pad_mode=mode), ctx=ax, title=mode);","99cdeb41":"#flip image left-to-right\nflipLR = np.fliplr(image)\n\nplt.imshow(flipLR)\nplt.title('Left to Right Flipped')","9384388f":"#flip image up-to-down\nflipUD = np.flipud(image)\n\nplt.imshow(flipUD)\nplt.title('Up Down Flipped')","beb55894":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","0310c3f3":"#Below it's Pad too, but with a different result.","14cff6d8":"#Different RandomAffine"}}