{"cell_type":{"4db76f51":"code","60c2350a":"code","b42702f9":"code","07ddc73c":"code","18ca3504":"code","87f52848":"code","833ffdef":"code","e589cfb4":"code","ed5e0123":"code","55e2b072":"code","e0c84207":"code","ee310bad":"code","baeffb31":"code","5dad0926":"code","76a48ce6":"code","08f0060e":"code","0e15e4d2":"code","cd938f5c":"code","fcc39b63":"markdown","fb813de6":"markdown","65f7b118":"markdown","6b41cdc2":"markdown","353733b2":"markdown","9003c92b":"markdown","9930f471":"markdown","98916ccb":"markdown","677cb94f":"markdown","fc3257ca":"markdown","f3100d4c":"markdown","b9165f5f":"markdown","a8cbe826":"markdown","1459a9f7":"markdown","36bd17a5":"markdown","b312558e":"markdown","c5a63a34":"markdown","184ce8c6":"markdown","4d616ec4":"markdown","fcc290ce":"markdown","1bf26969":"markdown","3afaaea7":"markdown","c9d99a60":"markdown"},"source":{"4db76f51":"# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fastai.vision.all import *\nfrom fastai.vision.widgets import *\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","60c2350a":"# Import the dataset \nlabels = pd.read_csv('\/kaggle\/input\/clothing-dataset-full\/images.csv')","b42702f9":"labels.head()","07ddc73c":"# Classes and their counts within the dataset\nlabels['label'].value_counts()","18ca3504":"labels.loc[labels['label']=='Not sure','label'] = 'Not_sure'","87f52848":"labels['image'] = labels['image'] + '.jpg'","833ffdef":"labels['label_cat'] = labels['label'] + ' ' + labels['kids'].astype(str)","e589cfb4":"label_df = labels[['image', 'label_cat']]","ed5e0123":"path = '\/kaggle\/input\/clothing-dataset-full'\ndef get_x(r): return path+'\/images_original\/'+r['image'] # create path to open images in the original folder\ndef get_y(r): return r['label_cat'].split(' ') # split the labels using space as a delimitter","55e2b072":"# Create DataBlock\ndblock = DataBlock(blocks = (ImageBlock, MultiCategoryBlock),\n                  get_x = get_x, get_y = get_y,\n                  item_tfms = RandomResizedCrop(128, min_scale=0.35))  # ensure every item is of the same size\ndls = dblock.dataloaders(label_df) # collates items from dataset into minibatches","e0c84207":"dls.show_batch(nrows=3, ncols=3)","ee310bad":"learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.fine_tune(5, base_lr=3e-3)","baeffb31":"# Get Predictions and target variables\npreds,targs = learn.get_preds()","5dad0926":"xs = torch.linspace(0.01,0.99,50)\naccs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs] # get_preds applies sigmoid activation function\nplt.plot(xs,accs);","76a48ce6":"learn.export(Path(\"\/kaggle\/working\/export.pkl\"))","08f0060e":"upload = widgets.FileUpload()\nout_image = widgets.Output()\nprediction = widgets.Label()\nrun = widgets.Button(description='Classify')\n\n# btn_upload = widgets.FileUpload()\n# out_pl = widgets.Output()\n# lbl_pred = widgets.Label()\n# btn_run = widgets.Button(description='Classify')","0e15e4d2":"def on_click_classify(change):\n    img = PILImage.create(upload.data[-1])\n    out_image.clear_output()\n    with out_image: display(img.to_thumb(128,128))\n    pred,pred_idx,probs = learn.predict(img)\n    pred0 = pred[0]\n    pred1 = pred[1]\n    if pred0=='False':\n        prediction.value = f'This is a {pred1} for adults.'\n    else:\n        prediction.value = f'This is a {pred1} for kids.'\n\nrun.on_click(on_click_classify)","cd938f5c":"# Use Virtual Box to encapsulate the iPython widgets\nVBox([widgets.Label('Upload a picture of a pice of clothing!'), \n      upload, run, out_image, prediction])","fcc39b63":"Add suffix '.jpg' to all image files in the dataframe to open them within the model.","fb813de6":"Replace 'Not sure' with 'Not_sure'.","65f7b118":"## Preprocessing","6b41cdc2":"Merge the two lables 'label' and 'kids' into one column using space as a delimiter.","353733b2":"Using 5 epocs, we trained the last layer of the CNN with 18 layers and used the learning rate of 0.003. The 'fine_tune' function uses one epoch to train the final layer on the CNN and then unfreezes the entire model and trains all the 18 layers.  With 5 epochs, we have been able to gain a training accuracy of 96.48%. ","9003c92b":"This model will be stored in the home directory. To import it into you new application use 'load_learner(export.pkl)'","9930f471":"The 'image' column contains the names of the images. This will be mapped to the folder they are stored at to access them while creating the model. The 'label' column identifies the piece of clothing whereas the 'kids' column identifies if the clothing is for children or not.","98916ccb":"## Test The Model","677cb94f":"The dataset provided has 2 subsets - one with thee original images and 20 classes, and the other with resized images and only top 10 classes. This notebook uses the original dataset.","fc3257ca":"The learner can exported to deploy it on a server for an application. Run this notebook on JupyterNotebook server to use the following command to download the model as a .pkl file to the home directory.","f3100d4c":"Now that the dataframe is cleaned and ready to develop the model, it has to be transformed in a way that can be used to create the model. We are using FastAIs Convolusional Neural Network classifier 'resnet18'. This CNN has 18 layers with pretrained weights. \n\nThe input to create the learner is a dataloader and the model 'resnet18'. The learner uses 'accuracy_multi', which calculates the accuracy for a multi-category dataset using a specified threshold. The threshold by default is 0.5, but for this model, we can start at 0.2 and then test the outcome of other threshold values. \n\nTo create the dataloader, we need to have a DataBlock that will identify the dependent (labels) and the independent (images) variables using the MultiCategoryBlock and ImageBlock respectively. Using ImageBlock will help open the image and convert to a tensor, while MultiCategoryBlock will help with the multilabel classification.","b9165f5f":"Now that the learner has been created, we can test different threshold values on the validation set to find the right value to predict the labels.","a8cbe826":"## Data Cleaning","1459a9f7":"To make use of this application, upload this notebook and run it in its entirety to test it out. This is just one example amomg many to prove that the model works! A full-fleged application can be used idenitfy multiple kinds of clothing that can lead to further processes as required to fulfil the needs of the user.\n\nHuge thanks to Alexey Grigorev for this dataset and to Jeremy Howard for the FastAI course.","36bd17a5":"Now that the DataLoader is ready, we can now create the learner with the threshold 0.2.","b312558e":"## Create the Learner","c5a63a34":"As mentioned above, the model is ready to be imported to a server for an end-to-end application. Although the model can be tested using iPython widgets. We can create a mini interface to upload images and classify them accordingly.","184ce8c6":"The predictictions are high at the threshold value of 0.1 and above. The smoothness of the curve until what seems to be 0.9 shows that we wont be overfitting by picking a random value. Thus maintaining the threshold at 0.2 should result in non-biased predictions.","4d616ec4":"We can view the dataloader images and their subsequent labels.","fcc290ce":"Keep only the images and their labels for the model to process.","1bf26969":"This notebook explores FastAI and PyTorch to model an image recognition application. The dataset provided [here](https:\/\/www.kaggle.com\/agrigorev\/clothing-dataset-full) contains 5000 high resolution images of clothes. The model is designed based on this dataset to distinguish among various types of clothing. Unlike the other datasets, this has 2 different variables identifying the piece of clothing - the first variable determines if the image contains a children's clothing and the second variable names the item. After the model has been designed, iPython widgets are used to test the model which can then be deployed onto a server for full functioning end-to-end application.","3afaaea7":"# Multi-label Computer Vison Classification","c9d99a60":"Create functions that will be used to open the images and get the categories of the image for the DataBlock."}}