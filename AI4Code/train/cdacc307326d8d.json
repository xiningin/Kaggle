{"cell_type":{"44299e1b":"code","3a8d417b":"code","b3426d0f":"code","632b2982":"code","2b6ee538":"code","29b9e90e":"code","9b6a5375":"code","3542734b":"markdown"},"source":{"44299e1b":"import os.path as op\nimport numpy as np\nfrom pandas import read_csv\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.manifold import MDS\n\nimport mne\nfrom mne.io import read_raw_fif, concatenate_raws\nfrom mne.datasets import visual_92_categories\n\n\nprint(__doc__)\n\ndata_path = visual_92_categories.data_path()\n\n# Define stimulus - trigger mapping\nfname = op.join(data_path, 'visual_stimuli.csv')\nconds = read_csv(fname)\nprint(conds.head(5))","3a8d417b":"max_trigger = 24\nconds = conds[:max_trigger]  # take only the first 24 rows\n\nconditions = []\nfor c in conds.values:\n    cond_tags = list(c[:2])\n    cond_tags += [('not-' if i == 0 else '') + conds.columns[k]\n                  for k, i in enumerate(c[2:], 2)]\n    conditions.append('\/'.join(map(str, cond_tags)))\nprint(conditions[:10])\n\nevent_id = dict(zip(conditions, conds.trigger + 1))\nevent_id['0\/human bodypart\/human\/not-face\/animal\/natural']\n\nn_runs = 4  # 4 for full data (use less to speed up computations)\nfname = op.join(data_path, 'sample_subject_%i_tsss_mc.fif')\nraws = [read_raw_fif(fname % block, verbose='error')\n        for block in range(n_runs)]  # ignore filename warnings\nraw = concatenate_raws(raws)\n\nevents = mne.find_events(raw, min_duration=.002)\n\nevents = events[events[:, 2] <= max_trigger]","b3426d0f":"picks = mne.pick_types(raw.info, meg=True)\nepochs = mne.Epochs(raw, events=events, event_id=event_id, baseline=None,\n                    picks=picks, tmin=-.1, tmax=.500, preload=True)\n\nepochs['face'].average().plot()\nepochs['not-face'].average().plot()","632b2982":"# Classify using the average signal in the window 50ms to 300ms\n# to focus the classifier on the time interval with best SNR.\n\nclf = make_pipeline(StandardScaler(),\n                    LogisticRegression(C=1, solver='liblinear',\n                                       multi_class='auto'))\nX = epochs.copy().crop(0.05, 0.3).get_data().mean(axis=2)\ny = epochs.events[:, 2]\n\nclasses = set(y)\ncv = StratifiedKFold(n_splits=5, random_state=0, shuffle=True)\n\n# Compute confusion matrix for each cross-validation fold\ny_pred = np.zeros((len(y), len(classes)))\nfor train, test in cv.split(X, y):\n    # Fit\n    clf.fit(X[train], y[train])\n    # Probabilistic prediction (necessary for ROC-AUC scoring metric)\n    y_pred[test] = clf.predict_proba(X[test])","2b6ee538":"confusion = np.zeros((len(classes), len(classes)))\nfor ii, train_class in enumerate(classes):\n    for jj in range(ii, len(classes)):\n        confusion[ii, jj] = roc_auc_score(y == train_class, y_pred[:, jj])\n        confusion[jj, ii] = confusion[ii, jj]","29b9e90e":"labels = [''] * 5 + ['face'] + [''] * 11 + ['bodypart'] + [''] * 6\nfig, ax = plt.subplots(1)\nim = ax.matshow(confusion, cmap='RdBu_r', clim=[0.3, 0.7])\nax.set_yticks(range(len(classes)))\nax.set_yticklabels(labels)\nax.set_xticks(range(len(classes)))\nax.set_xticklabels(labels, rotation=40, ha='left')\nax.axhline(11.5, color='k')\nax.axvline(11.5, color='k')\nplt.colorbar(im)\nplt.tight_layout()\nplt.show()","9b6a5375":"fig, ax = plt.subplots(1)\nmds = MDS(2, random_state=0, dissimilarity='precomputed')\nchance = 0.5\nsummary = mds.fit_transform(chance - confusion)\ncmap = plt.get_cmap('rainbow')\ncolors = ['r', 'b']\nnames = list(conds['condition'].values)\nfor color, name in zip(colors, set(names)):\n    sel = np.where([this_name == name for this_name in names])[0]\n    size = 500 if name == 'human face' else 100\n    ax.scatter(summary[sel, 0], summary[sel, 1], s=size,\n               facecolors=color, label=name, edgecolors='k')\nax.axis('off')\nax.legend(loc='lower right', scatterpoints=1, ncol=2)\nplt.tight_layout()\nplt.show()","3542734b":"Refer to this link:\nhttps:\/\/mne.tools\/stable\/auto_examples\/decoding\/decoding_rsa.html#sphx-glr-auto-examples-decoding-decoding-rsa-py"}}