{"cell_type":{"7f93e694":"code","89e1a5f8":"code","64d2a5b1":"code","ad82aa2e":"code","88f06ff5":"code","72ed218c":"code","5195f030":"code","2f16e0d9":"code","0f4b8adf":"code","03dc37c1":"markdown","921cb87d":"markdown","29795fe5":"markdown","96570854":"markdown","b00c8fbf":"markdown","3db1fceb":"markdown"},"source":{"7f93e694":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","89e1a5f8":"features = pd.read_csv('..\/input\/customer-behaviour\/Customer_Behaviour.csv')\nfeatures.head(5)","64d2a5b1":"# Descriptive statistics for each column\nfeatures.describe()","ad82aa2e":"# Initialize figure with subplots\nfig = make_subplots(\n    rows=1, cols=2)\n\n# Add traces\nfig.add_trace(\n    go.Scatter(y=features['Age']),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(y=features['EstimatedSalary']),\n    row=1, col=2\n)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Age\", row=1, col=1)\nfig.update_yaxes(title_text=\"Estimated salary\", row=1, col=2)\n\n# Update title and height\nfig.update_layout(title_text=\"Basic plots for data verifying\", height=700)\n\nfig.show()","88f06ff5":"# One-hot encode the data using pandas get_dummies\nfeatures = pd.get_dummies(features)\nfeatures.head(5)","72ed218c":"# Use numpy to convert to arrays\nimport numpy as np\n\n# Labels are the values we want to predict\nlabels = np.array(features['Purchased'])\n\n# Remove the labels from the features\n# axis 1 refers to the columns\nfeatures= features.drop('Purchased', axis = 1)\n\n# Saving feature names for later use\nfeature_list = list(features.columns)\n\n# Convert to numpy array\nfeatures = np.array(features)\n\n# Using Skicit-learn to split data into training and testing sets\nfrom sklearn.model_selection import train_test_split\n# Split the data into training and testing sets\ntrain_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.25, random_state = 42)\n\nprint('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)","5195f030":"model = GaussianNB()\nmodel.fit(train_features, train_labels)","2f16e0d9":"y_pred = model.predict(test_features)","0f4b8adf":"accuracy = accuracy_score(test_labels, y_pred)*100\naccuracy","03dc37c1":"# Dataset source:\nDenisa Dutca : Customer Behaviour\n\n# Used resorces:\nDhiraj K : Naive Bayes Classifier in Python Using Scikit-learn\n\nAvinash Navlani: Naive Bayes Classification using Scikit-learn\n\nKislay Keshari: Naive Bayes Tutorial: Naive Bayes Classifier in Python\n","921cb87d":"# Identify Anomalies\/ Missing Data","29795fe5":"# Customer Behaviour\n## Classification dataset\n## We are using naive Bayes classifier algorithm to make predictions\nThe data represents details about 400 clients of a company including the unique ID, the gender, the age of the customer and the salary.\nAlso is collected information regarding the buying decision - weather the customer decided to buy specific products or not.","96570854":"# Model Evaluation","b00c8fbf":"# Data pre-processing","3db1fceb":"# Train the model"}}