{"cell_type":{"1defd58e":"code","b9b0e7dd":"code","4fe16c83":"code","61978967":"code","37d57ee6":"code","3c0194da":"code","c33b726d":"markdown"},"source":{"1defd58e":"%%capture\n%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\n\nimport matplotlib.colors as mcolors\n\nimport seaborn as sns","b9b0e7dd":"# subs = pd.read_csv('..\/input\/meta-kaggle\/Submissions.csv', low_memory=False)\n# teams = pd.read_csv('..\/input\/meta-kaggle\/Teams.csv', low_memory=False)\n# comps = pd.read_csv('..\/input\/meta-kaggle\/Competitions.csv', low_memory=False)\nmypal = plt.rcParams['axes.prop_cycle'].by_key()['color'] # Grab the color pal\ncm = plt.get_cmap('tab20')\n\nNUM_COLORS = 20\nmypal = [mcolors.to_hex(cm(1.*i\/NUM_COLORS)) for i in range(NUM_COLORS)]\n# mypal = [mcolors.CSS4_COLORS[val] for val in mcolors.CSS4_COLORS]","4fe16c83":"df = pd.read_csv('..\/input\/bengalileaderboard\/0316_bengaliai-cv19-publicleaderboard.csv')\ndf['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\ndf = df.set_index(['TeamName','SubmissionDate'])['Score'].unstack(-1).T\ndf.columns = [name for name in df.columns]\n\nFIFTEENTH_SCORE = df.max().sort_values(ascending=True)[15]\nFIFTYTH_SCORE = df.max().sort_values(ascending=True)[50]\nTOP_SCORE = df.max().sort_values(ascending=True)[0]\n\nALL_TEAMS = df.columns.values\ndf_ffill = df[ALL_TEAMS].ffill()\n\nmy_df = df.T\n\nmin_sub_dict = {}\nfor c in df.columns:\n    min_sub_dict[c] =  df[c].dropna().index.min()\n    \n\nmy_df['colors'] = [np.random.choice(mypal) for c in range(len(my_df))]\ncolor_map = my_df['colors'].to_dict()","61978967":"def draw_barchart(mydate):\n    mydate = pd.to_datetime(mydate)\n    dff = df_ffill.loc[df_ffill.index <= mydate] \\\n        .iloc[-1] \\\n        .sort_values(ascending=True) \\\n        .dropna() \\\n        .tail(25)\n\n    last_sub_date = {}\n    df2 = df.loc[df.index <= mydate]\n    for c in df2.columns:\n        last_sub_date[c] = df2[c].dropna().index.max()\n\n    ax.clear()\n    ax.barh(dff.index, dff.values, color=[color_map[x] for x in dff.index])\n    ax.set_xlim(dff.min()-0.002, dff.max()+0.001)\n    dx = dff.values.max() \/ 10000\n    for i, (value, name) in enumerate(zip(dff.values, dff.index)):\n        ax.text(value-dx,\n                i,\n                name,\n                size=14, weight=600, ha='right', va='bottom')\n        ax.text(value-dx,\n                i-.25,\n                f'first sub: {min_sub_dict[name]:%d-%b-%Y} \/ last sub {last_sub_date[name]:%d-%b-%Y}',\n                size=10,\n                color='#444444',\n                ha='right',\n                va='baseline')\n        ax.text(value+dx, i,     f'{value:,.4f}',  size=14, ha='left',  va='center')\n    # ... polished styles\n    ax.text(1, 0.4, mydate.strftime('%d-%b-%Y'), transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, 'Score', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.4f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.12, 'Bengali Kaggle Competition Top 25',\n            transform=ax.transAxes, size=24, weight=600, ha='left')\n    plt.box(False)\n\n# fig, ax = plt.subplots(figsize=(15, 13))\n# draw_barchart('2020-03-05')","37d57ee6":"dates = [pd.to_datetime(x) for x in pd.Series(df.index.date).unique() if x > pd.to_datetime('12-31-2019')]\ndates = dates + [dates[-1] + pd.Timedelta('1 day')]\nfig, ax = plt.subplots(figsize=(15, 20))\nanimator = animation.FuncAnimation(fig,\n                                   draw_barchart,\n                                   frames=dates,\n                                   interval=300)\nani = HTML(animator.to_jshtml())\n# _ = animator.to_html5_video()\n# or use animator.to_html5_video() or animator.save()","3c0194da":"ani","c33b726d":"# Top 25 Over Time Animation"}}