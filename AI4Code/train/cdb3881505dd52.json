{"cell_type":{"00f5e8d3":"code","775a6cbd":"code","8c6439e2":"code","93e5b84d":"code","26060c19":"code","96bb93d7":"code","6e270c31":"code","c7fcce51":"code","016ce0b9":"code","d378f64c":"code","826e84bf":"code","4fbc3220":"code","94685887":"code","57fc37e4":"code","fc8f9a20":"code","3972666b":"code","ca06583c":"code","c813965f":"code","4d6740bc":"code","e41d8d6a":"code","d837f110":"code","0684530b":"code","491b8dd9":"code","2480c41d":"code","b5e6677d":"code","40459369":"code","3b47e2f5":"code","cddc1e7d":"code","12cbb6d2":"code","4df3063b":"code","1388b36a":"code","a142c969":"code","17ad7a15":"code","c4c0c45b":"code","a0c7a337":"code","4b8ffeb0":"code","7f70a594":"code","ec634aff":"code","29bbc155":"code","39b08653":"code","023e8e73":"code","6a830c32":"code","edc0e4f2":"code","b04cad7a":"code","89bb0ce2":"code","49a118cb":"code","77b93865":"code","8e11a8fc":"code","322547fb":"code","b20185c0":"code","ba1cbefc":"code","d3c6d449":"code","4c0b1c27":"code","dcb1489d":"markdown","fb8b78d0":"markdown","cd8382c4":"markdown","b4a1d841":"markdown","2dd4bc7b":"markdown","9bd1f5dd":"markdown","33445dec":"markdown","f752b0cd":"markdown","5c26318f":"markdown","e581c3b6":"markdown","fd313fd3":"markdown","05e3f247":"markdown","fdb04a20":"markdown","8a5124bc":"markdown","7cddc5e7":"markdown","30d64554":"markdown","2edd4deb":"markdown","c03a4840":"markdown","c56afa17":"markdown","c86c785c":"markdown","8b40d4a0":"markdown","ef071422":"markdown","c2ed9e4d":"markdown","3a882139":"markdown","62082b92":"markdown","aa369e7c":"markdown","5e88c15d":"markdown","e2857c05":"markdown","5bea8bf6":"markdown","2767eb4d":"markdown","a428d464":"markdown","d9ad9c92":"markdown","2c9b15c7":"markdown","bc2bf80e":"markdown","e597fcef":"markdown","de90ae63":"markdown","5d7eeb82":"markdown","6cebe6fa":"markdown","f917cdff":"markdown","54c9875f":"markdown","7511c9db":"markdown","c5ce944e":"markdown","0d698cdd":"markdown","f4355f8b":"markdown","6887342b":"markdown","c0fd31aa":"markdown","f01ff890":"markdown","c826c090":"markdown"},"source":{"00f5e8d3":"import pandas as pd # data processing\nimport numpy as np  # linear algebra\n\n# Data visualization\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n# TensorFlow and libraries for preprocessing\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n# Preprocessing libraries\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords \n\nimport gensim\nimport string\n# Counter function\nfrom collections import Counter\n\n#WordCloud\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n# create text with Markdown from within code cells\u00b6\nfrom IPython.display import Markdown as md ","775a6cbd":"# Load the dataset\ntrain_df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")","8c6439e2":"# Head\ntrain_df.head(4)","93e5b84d":"# Datasets shape\nprint('Train dataset:\\n{} rows\\n{} columns'.format(train_df.shape[0], train_df.shape[1]))\nprint('\\nTest dataset:\\n{} rows\\n{} columns'.format(test_df.shape[0], test_df.shape[1]))","26060c19":"# Count target values by its factor\nx = train_df.target.value_counts()\nmd(\"The amount disaster tweets is {}. And the amount for not disaster is {}.\".\n     format(x[1], x[0]))","96bb93d7":"# Add title\nplt.title(\"Amount of tweets - Disaster(1) or not(0)\")\n# Bar chart showing amount of both target values\nsns.barplot(x.index, x)\n# Add label for vertical axis\nplt.ylabel(\"Count\")\n# Add label for hotizontal axis\nplt.xlabel(\"Target\")","6e270c31":"proportion = x\/train_df.shape[0] # Compute the tweets proportion by target\nmd(\"The percentual of disaster tweets is {}%, and {}% for not disaster.\".\n     format(round(proportion[1]*100,0),round(proportion[0]*100, 0)))","c7fcce51":"# Reference: https:\/\/matplotlib.org\/3.1.1\/gallery\/pie_and_polar_charts\/pie_features.html\n# Pie chart\n\nfig1, ax1 = plt.subplots()\nax1.pie(proportion, \n        explode = (0, 0.1), # only \"explode\" the 2nd slice\n        labels  = ['Not disaster', 'Disaster'], \n        autopct = '%1.1f%%',\n        shadow = True, \n        startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nplt.title(\"Percentual of tweets\")\nplt.show()","016ce0b9":"# Create a new feature with text lenght, or number of characters\ntrain_df['length'] = train_df['text'].str.len()\n# Create a new feature with number of words\ntrain_df['num_words'] = train_df['text'].str.split().map(lambda x: len(x))\ntrain_df.head(3)","d378f64c":"# Text length summary by target\ntrain_df.groupby(['target']).length.describe()","826e84bf":"# Facet a plot by target column\ng = sns.FacetGrid(train_df, col = 'target', height = 5, hue = 'target')\n# Plot a histogram chart\ng.map(plt.hist, \"length\")\n# Adjust title position\ng.fig.subplots_adjust(top=0.8)\n# Add general title\ng.fig.suptitle('Text lenght by target', fontsize=16)\n# Set title to each chart\naxes = g.axes.flatten()\naxes[0].set_title(\"Not disaster\")\naxes[1].set_title(\"Disaster\")","4fbc3220":"# number of words summary by target\ntrain_df.groupby(['target']).num_words.describe()","94685887":"# Facet a plot by target column\ng = sns.FacetGrid(train_df, col = 'target', height = 5, hue = 'target')\n# Plot a histogram chart\ng.map(sns.distplot, \"num_words\")\n# Adjust title position\ng.fig.subplots_adjust(top=0.8)\n# Add general title\ng.fig.suptitle('Distribution of number of words by target', fontsize=16)\n# Set title to each chart\naxes = g.axes.flatten()\naxes[0].set_title(\"Not disaster\")\naxes[1].set_title(\"Disaster\")","57fc37e4":"plt.figure(figsize=(9,5))\n# Add title\nplt.title(\"Boxplot - Comparing distribution of number of words by target\")\n# Boxplot\nsns.boxplot(x = \"target\", y = \"num_words\", hue=\"target\", data = train_df)\n# Add label for vertical axis\nplt.ylabel(\"Number of Words\")\n# Add label for hotizontal axis\nplt.xlabel(\"Target\")","fc8f9a20":"# Reference https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud#kln-160\n# Function to compute many unique words have this text\ndef counter_word (text):\n    count = Counter()\n    for i in text.values:\n        for word in i.split():\n            count[word] += 1\n    return count","3972666b":"# Unique words\ntext_values = train_df[\"text\"]\n\ncounter = counter_word(text_values)\nmd(\"The training dataset has {} unique words\".format(len(counter)))","ca06583c":"# Groups the top 20 keywords\nx = train_df.keyword.value_counts()[:20]\n# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n# Add title\nplt.title(\"20 hottest keyword in the text\")\n# Bar chart showing amount of both target values\nsns.barplot(x.index, x, color=\"c\")\n# Add label for vertical axis\nplt.ylabel(\"Count\")\n# Add label for hotizontal axis\nplt.xlabel(\"Keywords\")\n# Rotate the label text for hotizontal axis\nplt.xticks(rotation=90)","c813965f":"# Reference: https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud#6.-Train-Test-Split\n# Download a image to mask the wordcloud\n!wget --no-check-certificate \\\n  https:\/\/i.imgur.com\/tyCaXHH.jpg \\\n    -O \/tmp\/Twitter_Logo.jpg\n\nSTOPWORDS.add('NaN')  # remove NaN to the world Cloud\nSTOPWORDS.add('https') # remove https to the world Cloud\n\ndef create_word_cloud(text):\n    \n    comment_words = ' '\n    stopwords = set(STOPWORDS) \n    \n    for val in text: \n\n        # convert each val to string type \n        val = str(val)\n        # split the value \n        tokens = val.split() \n        # Converts each token to lowercase \n        for i in range(len(tokens)): \n            tokens[i] = tokens[i].lower() \n\n        for words in tokens: \n            comment_words = comment_words + words + ' '\n            \n    maskArray = np.array(Image.open(\"\/tmp\/Twitter_Logo.jpg\"))\n    wordcloud = WordCloud(width = 5000, height = 4000,\n                    background_color ='white',\n                    mask = maskArray,      \n                    stopwords = stopwords,\n                    min_font_size = 10)\n    wordcloud.generate(comment_words)   \n    \n    # plot the WordCloud image                        \n    plt.figure(figsize = (12, 12)) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    plt.show() ","4d6740bc":"# Create a WordCloud from keyword values\ntext = train_df.keyword.values\ncreate_word_cloud(text)","e41d8d6a":"# Groups the top 20 location\nx = train_df.location.value_counts()[:20]\n# Set the width and height of the figure\nplt.figure(figsize=(10,6))\n# Add title\nplt.title(\"Top 20 location\")\n# Bar chart showing amount of both target values\nsns.barplot(x.index, x, color = \"pink\")\n# Add label for vertical axis\nplt.ylabel(\"Count\")\n# Add label for hotizontal axis\nplt.xlabel(\"Location\")\n# Rotate the label text for hotizontal axis\nplt.xticks(rotation=90)","d837f110":"# Reference https:\/\/gist.github.com\/slowkow\/7a7f61f495e3dbb7e3d767f97bd7304b\nimport re\nimport sys\n\ndef remove_emoji(string):\n    emoji_pattern = re.compile(\"[\"\n                               u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                               u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                               u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                               u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                               u\"\\U00002500-\\U00002BEF\"  # chinese char\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U000024C2-\\U0001F251\"\n                               u\"\\U0001f926-\\U0001f937\"\n                               u\"\\U00010000-\\U0010ffff\"\n                               u\"\\u2640-\\u2642\"\n                               u\"\\u2600-\\u2B55\"\n                               u\"\\u200d\"\n                               u\"\\u23cf\"\n                               u\"\\u23e9\"\n                               u\"\\u231a\"\n                               u\"\\ufe0f\"  # dingbats\n                               u\"\\u3030\"\n                               \"]+\", flags=re.UNICODE)\n    return emoji_pattern.sub(r'', string)","0684530b":"# removing emoji test\nremove_emoji(\"Oh no, a hurricane is happening here \ud83c\udf2a\ufe0f\ud83d\udeab\ud83d\ude2b\")","491b8dd9":"# Apply removing emoji function to dataset\ntrain_df['text'] = train_df['text'].apply(lambda x: remove_emoji(x))\ntest_df['text'] = test_df['text'].apply(lambda x: remove_emoji(x))","2480c41d":"# Reference https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud#5.-Cleaning-the-text\npattern = re.compile('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\ndef remove_url(text):\n    no_url = pattern.sub(r'',text)\n    return no_url","b5e6677d":"# Removing URL example\nexample = \"Hey, look at this Data Science platform: https:\/\/www.kaggle.com\"\nremove_url(example)","40459369":"# Apply removing URL function to dataset\ntrain_df['text'] = train_df['text'].apply(lambda x: remove_url(x))\ntest_df['text'] = test_df['text'].apply(lambda x: remove_url(x))","3b47e2f5":"# Reference https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove#Data-Cleaning\npattern = re.compile('<.*?>')\ndef remove_html(text):\n    no_html = pattern.sub(r'',text)\n    return no_html","cddc1e7d":"# Removing HTML tags example\nexample = \"\"\"<div>\n<h1>NLP TensorFlow<\/h1>\n<p>Predicting sarcastic sentences by Wesley Galv\u00e3o <\/p>\n<a href=\"https:\/\/www.kaggle.com\/galvaowesley\/nlp-tensorflow-predicting-sarcastic-sentences\">Check it out<\/a>\n<\/div>\"\"\"\nremove_html(example)","12cbb6d2":"# Apply removing HTML tags function to dataset\ntrain_df['text'] = train_df['text'].apply(lambda x: remove_html(x))\ntest_df['text'] = test_df['text'].apply(lambda x: remove_html(x))","4df3063b":"# Dictionary of abbreviations\nabbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\", #\"que pasa\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}","1388b36a":"# reference: https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\ndef convert_abbrev(word):\n    return abbreviations[word.lower()] if word.lower() in abbreviations.keys() else word\n\ndef convert_abbrev_in_text(text):\n    tokens = word_tokenize(text)\n    tokens = [convert_abbrev(word) for word in tokens]\n    text = ' '.join(tokens)\n    return text","a142c969":"# Appy abbreviation to text\ntrain_df['text'] = train_df['text'].apply(lambda x: convert_abbrev_in_text(x))\ntest_df['text'] = test_df['text'].apply(lambda x: convert_abbrev_in_text(x))","17ad7a15":"# Reference https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud#kln-160\n# This function remove stopwords, turn text to lower and add a delimiter\ndef clean_text(text):\n \n    text = re.sub('[^a-zA-Z]', ' ', text)  \n    text = text.lower()  \n    # split to array(default delimiter is \" \") \n    text = text.split()      \n    text = [w for w in text if not w in set(stopwords.words('english'))]\n    text = ' '.join(text)    \n            \n    return text","c4c0c45b":"# Apply clean text\ntrain_df['text'] = train_df['text'].apply(lambda x : clean_text(x))\ntest_df['text'] = test_df['text'].apply(lambda x : clean_text(x))","a0c7a337":"# Initialize variables\nfrom math import ceil\n\nvocab_size = len(counter)\nembedding_dim = 16\nmax_length = 30\ntrunc_type = 'post'\npadding_type = 'post'\noov_tok = \"<OOV>\" # Generic token to words out of vocabulary\ntraining_size = ceil(train_df.shape[0]*0.8) # 80% of training data","4b8ffeb0":"# Create training subsets\ntraining_sentences = train_df.text[0:training_size]\ntraining_labels = train_df.target[0:training_size]\n# Create testing subsets\ntesting_sentences  = train_df.text[training_size:]\ntesting_labels = train_df.target[training_size:]","7f70a594":"# Initialize tokenizer\ntokenizer = Tokenizer(num_words = vocab_size, oov_token = oov_tok)\n# Fitting the training dataset\ntokenizer.fit_on_texts(training_sentences)\n# Create a words dictionary\nword_index = tokenizer.word_index","ec634aff":"# Create sequences of tokens that represent each sentence \ntraining_sequences = tokenizer.texts_to_sequences(training_sentences)\ntesting_sequences = tokenizer.texts_to_sequences(testing_sentences)\n","29bbc155":"# Create padding sequences for training sentences \ntraining_padded = pad_sequences(training_sequences, maxlen = max_length, padding = padding_type, truncating = trunc_type)\n# Create padding sequences for testing sentences \ntesting_padded = pad_sequences(testing_sequences, maxlen = max_length, padding = padding_type, truncating = trunc_type)","39b08653":"# Convert the sets to array to get it to work with TensorFlow 2\ntraining_padded = np.array(training_padded)\ntraining_labels = np.array(training_labels)\n\ntesting_padded = np.array(testing_padded)\ntesting_labels = np.array(testing_labels)","023e8e73":"\"\"\"\n# Reference https:\/\/www.kaggle.com\/galvaowesley\/nlp-tensorflow-predicting-sarcastic-sentences\n# Create a model\nmodel = tf.keras.Sequential([\n    # Embedding layer for NN                         \n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),    \n    # Global Average pooling is similar to adding up vectors\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(14, activation = 'relu'),\n    tf.keras.layers.Dense(1, activation = 'sigmoid')                             \n])\n# Modelo compile for binary classification\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy']) \"\"\"","6a830c32":"# Reference https:\/\/www.kaggle.com\/galvaowesley\/nlp-tensorflow-predicting-sarcastic-sentences\n# Create a model\nmodel = tf.keras.Sequential([\n    # Embedding layer for NN                         \n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),    \n    # Global Average pooling is similar to adding up vectors\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(1, activation = 'sigmoid')                             \n])\n# Modelo compile for binary classification\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])","edc0e4f2":"# Model summary\nfrom tensorflow.keras.utils import plot_model\nplot_model(model, to_file='model_plot4a.png', show_shapes=True, show_layer_names=True)","b04cad7a":"# Train the model\nepoch_num = 3\nhistory = model.fit(training_padded, \n                    training_labels, \n                    epochs = epoch_num, \n                    validation_data = (testing_padded, testing_labels), verbose = 2)","89bb0ce2":"def plot_graphs(history, string):\n  plt.plot(history.history[string])\n  plt.plot(history.history['val_'+string])\n  plt.xlabel(\"Epochs\")\n  plt.ylabel(string)\n  plt.legend([string, 'val_'+string])\n  plt.show()\n  \nplot_graphs(history, \"accuracy\")\nplot_graphs(history, \"loss\")","49a118cb":"# predict_ clases because is classification problem with the split test\npredictions = model.predict_classes(testing_padded)   ","77b93865":"# Reference [2]\nfrom sklearn.metrics import classification_report,confusion_matrix\n# Showing Confusion Matrix\ndef plot_cm(y_true, y_pred, title, figsize=(5,4)):\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    plt.title(title)\n    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax)","8e11a8fc":"# Showing Confusion Matrix\nplot_cm(testing_labels,predictions, 'Confution matrix of Tweets', figsize=(7,7))","322547fb":"# Sequencing\nsubmission_sequences = tokenizer.texts_to_sequences(test_df.text)\n# Padding\nsubmission_padded = pad_sequences(submission_sequences, maxlen = max_length, padding = padding_type, truncating = trunc_type)","b20185c0":"# Apply model prediction on submission sequences\npredictions = model.predict(submission_padded)","ba1cbefc":"# sample of submission\nsubmission.head()","d3c6d449":"# Add target column to submission file\nsubmission['target'] = (predictions > 0.5).astype(int)\nsubmission.head(10)","4c0b1c27":"submission.to_csv(\"submission.csv\", index=False, header=True)","dcb1489d":"## Dataset shape","fb8b78d0":"### Proportion\n\nWe can also calculate target values proportion and visualize them. ","cd8382c4":"#### Unique words","b4a1d841":"## Padding\n\nSo far, we have seen that the strings have different lengths. But what if we need to train a neural network, how to handle with sequences of different lengths?\n\nFor this, we will use the padding technique, that pads the sequence with zeros, if necessary.\n","2dd4bc7b":"### Loss and accuracy\n\n","9bd1f5dd":"### Removing Stopwords","33445dec":"### Number of words\n\nSimilarly, here are some statistics and graphs that show the distribution of number of words.","f752b0cd":"# About the Dataset","5c26318f":"#### Function to create a Word Cloud","e581c3b6":"### Removing URLs","fd313fd3":"Now, we plot the histogram to visualize the distribution. ","05e3f247":"## Keyword variable characteristics\n\nWhat are the top 20 keywords? ","fdb04a20":"## Location variable characteristics\n\nWhat are the top 20 location? ","8a5124bc":"### **If you like this notebook, please comment and upvote**","7cddc5e7":"We can also plot the NN workflow.","30d64554":"Below, we'll add the predicting outcomes to the submission file. ","2edd4deb":"## Target variable characteristics\n\nAnalyses of `target` column.","c03a4840":"### Removing emojis","c56afa17":"#### Confusion matrix","c86c785c":"# References\n\n1. [NLP Getting Started Tutorial - Phil Culliton](https:\/\/www.kaggle.com\/philculliton\/nlp-getting-started-tutorial)\n2. [Basic NLP with TensorFlow and WordCloud - Marco Vasquez E](https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud#6.-Train-Test-Split)\n3. [Basic EDA,Cleaning and GloVe -  Shahules](https:\/\/www.kaggle.com\/shahules\/basic-eda-cleaning-and-glove#GloVe-for-Vectorization)\n4. [NLP - EDA, Bag of Words, TF IDF, GloVe, BERT - Vitalii Mokin](https:\/\/www.kaggle.com\/vbmokin\/nlp-eda-bag-of-words-tf-idf-glove-bert)\n5. [NLP TensorFlow : Predicting sarcastic sentences - Wesley Galv\u00e3o](https:\/\/www.kaggle.com\/galvaowesley\/nlp-tensorflow-predicting-sarcastic-sentences?scriptVersionId=40488767)\n6. [Useful Plots to Diagnose your Neural Network - Medium Towards](https:\/\/towardsdatascience.com\/useful-plots-to-diagnose-your-neural-network-521907fa2f45)","8b40d4a0":"### Amount\n\nWe can get the amount of real disaster and not real disaster tweets. ","ef071422":"#### Accuracy curve\n\nIs one the most used curves to analyse the performance of Neural Networks. \n\n![Accuracy curve](https:\/\/cs231n.github.io\/assets\/nn3\/accuracies.jpeg)\n> Accuracy Plot (Source: [Useful Plots to Diagnose your Neural Network - Medium Towards](https:\/\/towardsdatascience.com\/useful-plots-to-diagnose-your-neural-network-521907fa2f45))","c2ed9e4d":"## Modeling","3a882139":"## Evaluation","62082b92":"# Predicting\n\nNow, it's time to classify the tweets from original test dataset, provided by Kaggle Competition. ","aa369e7c":"#### Loss Curve\n\n![image.png](attachment:image.png)\n> Accuracy Plot (Source: [Useful Plots to Diagnose your Neural Network - Medium Towards](https:\/\/towardsdatascience.com\/useful-plots-to-diagnose-your-neural-network-521907fa2f45))","5e88c15d":"## Spliting training dataset\n\nLet's split dataset in two subsets. One to train the model and other to test the trained model. The training subset is sliced in 80% of data. \n\nThe approach of this work is based on split orignal training dataset in two different datasets, one for training and other for validation.\n\n![](https:\/\/s3.shunyafoundation.com\/s3\/0e2ed1d5ccdb954de0df05bb79b7b2399fdfbe70\/img1.png)","e2857c05":"### Removing HTML tags","5bea8bf6":"# Exploratory Data Analysis\n\nIn this section we'll perform some EDA techiniques, like chart plotting and features summarising. ","2767eb4d":"## Data cleaning","a428d464":"## Text variable characteristics\n\nTo understand the distribution of tweets, it's necessary explore the `text` column. First, we create two new features to get some statistics.","d9ad9c92":"Lets test the `remove_emoji()` function","2c9b15c7":"Lets test the `remove_url()` function","bc2bf80e":"Basic NLP with TensorFlow - Prediction of real or fake disaster tweets\n===\n\nWesley Galv\u00e3o \n\nAug, 2020\n\n\n![Twitter image](https:\/\/tecnoblog.net\/wp-content\/uploads\/2019\/03\/twitter-700x394.jpg)\n   \nImage from [Tecnoblog](https:\/\/tecnoblog.net\/324200\/como-ver-todos-os-retweets-com-comentarios-do-twitter-quoted-replies\/)","e597fcef":"## Importing required libraries","de90ae63":"As the plot shows, **val_loss** starts decreasing, **val_accuracy** starts increasing. It's lso fine as that means model built is learning and working fine.","5d7eeb82":"### Word Cloud\n\nWe can explore the most used keywords through the word cloud graphic.","6cebe6fa":"## Loading dataset","f917cdff":"**Splitting**","54c9875f":"### Text lenght\n\nMain statistics","7511c9db":"### New features\n\nThe new features are number of characters (or text lenght) and number of words for each tweet.","c5ce944e":"## Tokenization\n\nThe tokenization is a technique to represent the words in a way that a computer can process them. Thus, a tokenized sentence, or list of sentences, can be train a Neural Network later.","0d698cdd":"# Preprocessing\n\nBefore we start training the machine learning model, it is important that the data is in an appropriate structure, properly treated and cleaned. Thus, prediction tends to have better results.","f4355f8b":"According the [competition description](https:\/\/www.kaggle.com\/c\/nlp-getting-started\/data), the data characteristics are:\n\nEach sample in the train and test set has the following information:\n\n* The text of a tweet\n* A keyword from that tweet (although this may be blank!)\n* he location the tweet was sent from (may also be blank)\n\nColumns\n\n* `id` - a unique identifier for each tweet\n* `text` - the text of the tweet\n* `location` - the location the tweet was sent from (may be blank)\n* `keyword` - a particular keyword from the tweet (may be blank)\n* `target` - in train.csv only, this denotes whether a tweet is about a real disaster (1) or not (0)\n","6887342b":"# Introduction\n\nThis notebook contains an introductory approach to Natural Language Processing techniques in order to model and build a machine model that predicts which Tweets are about real disasters and which one's aren't. \n\nFor this purpose, techniques of exploratory data analysis, cleaning and tensorflow library were used.\n\nThis work was based on others and was properly referenced in the references section.\n\nI hope you enjoy reading.  ","c0fd31aa":"### Convert abbreviation to text","f01ff890":"## Sequencing\n\nIn this step we'll sequence the setences. Once the words are properly indexed and tokenized, the setences can be represented by a sequence of numbers ordered by their respective words. In other words, we'll create sequences of tokens that represent each sentence.","c826c090":"# Modeling and Training\n\nWe are predicting whether a given tweet is about a real disaster or not. If so, predict a 1. If not, predict a 0."}}