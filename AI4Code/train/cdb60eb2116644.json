{"cell_type":{"58cb97ce":"code","46d507a5":"code","e7daa025":"code","332e66c6":"code","153bee72":"code","93dbbaeb":"code","011ea7ae":"code","828cdb4a":"code","286a87f4":"code","6056ec66":"code","3537c734":"code","0b496622":"code","3858ba3b":"code","5b601f63":"code","fd3a2bfc":"code","ebfa7e11":"code","89e89d6b":"code","da12f2f2":"code","ac520f16":"code","89baedb0":"code","bc9ada88":"code","b930d909":"code","b28bc0eb":"code","549ebdb6":"code","cc92bd62":"code","65872dc2":"code","bbfb7dd6":"markdown","604a5721":"markdown","8f4d1698":"markdown","640a8ec5":"markdown","ec23caef":"markdown","924a4d74":"markdown","5a5dd674":"markdown","bdf0ecd3":"markdown","5301ca2d":"markdown","79cf6655":"markdown","c9d7ba40":"markdown","76b8309d":"markdown"},"source":{"58cb97ce":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.layers import *\nfrom sklearn.model_selection import train_test_split\n\n!pip install -q git+https:\/\/github.com\/tensorflow\/examples.git\nfrom tensorflow_examples.models.pix2pix import pix2pix\n\nfrom IPython.display import clear_output\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\nfrom tqdm import tqdm","46d507a5":"path = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset'\nfish_dirs = [dir for dir in os.listdir(path) if os.path.isdir(os.path.join(path, dir))]\nfish_dirs","e7daa025":"def load_image(path, output=False):\n    img = cv2.imread(path)\n    return np.array(img)","332e66c6":"def load_mask(path, output=False):\n    img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n    return np.array(img).reshape(img.shape[0], img.shape[1], 1)","153bee72":"for dir in tqdm(fish_dirs):\n    p = os.path.join(path, dir, dir)\n    images = np.array([load_image(os.path.join(path, dir, dir, img)) for img in os.listdir(p)])\n    masks = np.array([load_mask(os.path.join(path, dir, dir + \" GT\", img), output=True) for img in os.listdir(p)])","93dbbaeb":"nr_tests = 300\nimages_train, images_test = images[:len(images)-nr_tests], images[len(images)-nr_tests:]\nmasks_train, masks_test = masks[:len(images)-nr_tests], masks[len(images)-nr_tests:]\n\ndataset = {}\ndataset['train'] = {'image':images_train, 'segmentation_mask':masks_train}\ndataset['test'] = {'image':images_test, 'segmentation_mask':masks_test}","011ea7ae":"def normalize(input_image, input_mask):\n    input_image = tf.cast(input_image, tf.float32) \/ 255.0\n    input_mask = tf.cast(input_mask, tf.float32) \/ 255.0\n    return input_image, input_mask","828cdb4a":"@tf.function\ndef load_image_train(datapoint):\n    input_image = tf.image.resize(datapoint['image'], (128, 128))\n    input_mask = tf.image.resize(datapoint['segmentation_mask'], (128, 128))\n\n    if tf.random.uniform(()) > 0.5:\n        input_image = tf.image.flip_left_right(input_image)\n        input_mask = tf.image.flip_left_right(input_mask)\n\n    input_image, input_mask = normalize(input_image, input_mask)\n\n    return input_image, input_mask","286a87f4":"def load_image_test(datapoint):\n    input_image = tf.image.resize(datapoint['image'], (128, 128))\n    input_mask = tf.image.resize(datapoint['segmentation_mask'], (128, 128))\n\n    input_image, input_mask = normalize(input_image, input_mask)\n\n    return input_image, input_mask","6056ec66":"train_ds = tf.data.Dataset.from_tensor_slices(dataset['train'])\ntest_ds = tf.data.Dataset.from_tensor_slices(dataset['test'])","3537c734":"train = train_ds.map(load_image_train, num_parallel_calls=tf.data.AUTOTUNE)\ntest = test_ds.map(load_image_test)","0b496622":"TRAIN_LENGTH = len(train)\nBATCH_SIZE = 64\nBUFFER_SIZE = 300\nSTEPS_PER_EPOCH = TRAIN_LENGTH \/\/ BATCH_SIZE","3858ba3b":"train_dataset = train.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()\ntrain_dataset = train_dataset.prefetch(buffer_size=tf.data.AUTOTUNE)\ntest_dataset = test.batch(BATCH_SIZE)","5b601f63":"def display(display_list):\n    plt.figure(figsize=(15, 15))\n\n    title = ['Input Image', 'True Mask', 'Predicted Mask']\n\n    for i in range(len(display_list)):\n        plt.subplot(1, len(display_list), i+1)\n        plt.title(title[i])\n        plt.imshow(tf.keras.preprocessing.image.array_to_img(display_list[i]))\n        plt.axis('off')\n    plt.show()","fd3a2bfc":"for image, mask in train.take(3):\n    sample_image, sample_mask = image, mask\ndisplay([sample_image, sample_mask])","ebfa7e11":"OUTPUT_CHANNELS = 3\n\nbase_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)\n\n# Use the activations of these layers\nlayer_names = [\n    'block_1_expand_relu',   # 64x64\n    'block_3_expand_relu',   # 32x32\n    'block_6_expand_relu',   # 16x16\n    'block_13_expand_relu',  # 8x8\n    'block_16_project',      # 4x4\n]\nbase_model_outputs = [base_model.get_layer(name).output for name in layer_names]\n\n# Create the feature extraction model\ndown_stack = tf.keras.Model(inputs=base_model.input, outputs=base_model_outputs)\ndown_stack.trainable = False","89e89d6b":"up_stack = [\n    pix2pix.upsample(512, 3),  # 4x4 -> 8x8\n    pix2pix.upsample(256, 3),  # 8x8 -> 16x16\n    pix2pix.upsample(128, 3),  # 16x16 -> 32x32\n    pix2pix.upsample(64, 3),   # 32x32 -> 64x64\n]","da12f2f2":"def unet_model(output_channels):\n    inputs = tf.keras.layers.Input(shape=[128, 128, 3])\n\n    # Downsampling through the model\n    skips = down_stack(inputs)\n    x = skips[-1]\n    skips = reversed(skips[:-1])\n\n    # Upsampling and establishing the skip connections\n    for up, skip in zip(up_stack, skips):\n        x = up(x)\n        concat = tf.keras.layers.Concatenate()\n        x = concat([x, skip])\n\n    # This is the last layer of the model\n    last = tf.keras.layers.Conv2DTranspose(\n        output_channels, 3, strides=2,\n        padding='same')  #64x64 -> 128x128\n\n    x = last(x)\n    return tf.keras.Model(inputs=inputs, outputs=x)","ac520f16":"model = unet_model(OUTPUT_CHANNELS)\nmodel.compile(optimizer='adam',\n             loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n             metrics=['accuracy'])","89baedb0":"def create_mask(pred_mask):\n    pred_mask = tf.argmax(pred_mask, axis=-1)\n    pred_mask = pred_mask[..., tf.newaxis]\n    return pred_mask[0]","bc9ada88":"def show_predictions(dataset=None, num=1):\n    if dataset:\n        for image, mask in dataset.take(num):\n            pred_mask = model.predict(image)\n            display([image[0], mask[0], create_mask(pred_mask)])\n    else:\n        display([sample_image, sample_mask,\n             create_mask(model.predict(sample_image[tf.newaxis, ...]))])","b930d909":"show_predictions(num=4)","b28bc0eb":"class DisplayCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs=None):\n        clear_output(wait=True)\n        show_predictions()\n        print ('\\nSample Prediction after epoch {}\\n'.format(epoch+1))","549ebdb6":"EPOCHS = 10\nVALIDATION_STEPS = 10\n\nmodel_history = model.fit(train_dataset, epochs=EPOCHS,\n                          steps_per_epoch=STEPS_PER_EPOCH,\n                          validation_steps=VALIDATION_STEPS,\n                          validation_data=test_dataset,\n                          callbacks=[DisplayCallback()])","cc92bd62":"loss = model_history.history['loss']\nacc = model_history.history['accuracy']\n\nepochs = range(EPOCHS)\n\nplt.figure(figsize=(14, 8))\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, acc, 'b', label='Training Accuracy')\nplt.title('Training Loss\/Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Acc\/Loss Value')\nplt.ylim([0, 1])\nplt.legend()\nplt.show()","65872dc2":"show_predictions(test_dataset, 3)","bbfb7dd6":"<h1 id=\"datasets\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Datasets\n        <a class=\"anchor-link\" href=\"#datasets\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","604a5721":"<h1 id=\"loading\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Load images\/masks\n        <a class=\"anchor-link\" href=\"#loading\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","8f4d1698":"<h1 id=\"model\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Model\n        <a class=\"anchor-link\" href=\"#model\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","640a8ec5":"## Normalize and Load Functions","ec23caef":"## Datasets","924a4d74":"## Load image and mask","5a5dd674":"<h1 id=\"results\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Results\n        <a class=\"anchor-link\" href=\"#results\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","bdf0ecd3":"## Parameters","5301ca2d":"<h1 id=\"training\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Training\n        <a class=\"anchor-link\" href=\"#training\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","79cf6655":"<h1 id=\"mask\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Show Mask\n        <a class=\"anchor-link\" href=\"#mask\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","c9d7ba40":"<h1 id=\"display\" style=\"color:#ed5107; background:#003152; border:0.5px dotted;\"> \n    <center>Display\n        <a class=\"anchor-link\" href=\"#display\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","76b8309d":"<div>\n    <img src=\"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/714913\/1245420\/b3e2d49f235266630bec3895ecb23a92\/dataset-cover.jpg\" \/>\n<\/div>"}}