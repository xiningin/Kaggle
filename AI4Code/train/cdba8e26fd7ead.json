{"cell_type":{"93b4fe61":"code","d5f4d8ef":"code","b0d12723":"code","aaa01edb":"code","0b2a1b0d":"code","587845bd":"code","bef2a5cd":"code","9a0c6e3d":"code","3e75369a":"code","5d3671ba":"code","f63b460c":"code","2c088953":"code","49c055ee":"code","ad7b138e":"code","4575e476":"code","586b13d3":"code","31171065":"markdown","359a87ab":"markdown","18a619c5":"markdown","7e293f12":"markdown","dda84447":"markdown","54b69b90":"markdown","c54f0e8a":"markdown","3d8e10a6":"markdown","76c93cac":"markdown","3f76b95c":"markdown","42b4d4ce":"markdown","6c57397f":"markdown","f95f11c8":"markdown","40af4eb5":"markdown","cecf8ed5":"markdown","90b73eaa":"markdown","6d1e0743":"markdown","a2817e06":"markdown","0103ccab":"markdown","1b8d48c9":"markdown","c6b8ec1e":"markdown","68342ae2":"markdown","cd3b08da":"markdown","db6da34c":"markdown","74e61fe8":"markdown"},"source":{"93b4fe61":"import pandas as pd\nimport plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import subplots\nimport plotly.graph_objects as go\nimport numpy as np\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split","d5f4d8ef":"def histogram(df, attribute, title = '', mean = True, max_value = True):\n    trace = go.Histogram(x = df[attribute], xbins = dict(start = 0, end = 300))\n    # Aggiungere linea della media\n    # Aggiungere valore massimo raggiunto\n\n    layout = layout_default(title)\n    fig = go.Figure(data = trace, layout = layout)\n\n    return trace, fig\n\ndef layout_default(title):\n    layout = go.Layout(title = title, font = {'size': 18})\n    \n    return layout\n\ndef class_characteristics(chart_title, class_df):\n    trace1 = go.Indicator(mode = 'number', value = round(class_df['age'].mean(), 2),\n                      title = {'text': 'Average Age', 'font': dict(size = 30)},\n                      number = {'suffix': ' years', 'font': dict(size = 50)})\n\n    trace2 = go.Indicator(mode = 'number', value = round(class_df['height_cm'].mean(), 2),\n                          title = {'text': 'Average Height', 'font': dict(size = 30)},\n                          number = {'suffix': ' cm', 'font': dict(size = 50)})\n\n    trace3 = go.Indicator(mode = 'number', value = round(class_df['weight_kg'].mean(), 2),\n                          title = {'text': 'Average Weight', 'font': dict(size = 30)},\n                          number = {'suffix': ' Kg', 'font': dict(size = 50)})\n\n    trace4 = go.Indicator(mode = 'number', value = round(class_df['body fat_%'].mean(), 2),\n                          title = {'text': 'Average Body Fat', 'font': dict(size = 30)},\n                          number = {'suffix': ' %', 'font': dict(size = 50)})\n\n    trace5 = histogram(df=class_df, attribute='gripForce')[0]\n    trace6 = histogram(df=class_df, attribute='sit and bend forward_cm')[0]\n    trace7 = histogram(df=class_df, attribute='sit-ups counts')[0]\n    trace8 = histogram(df=class_df, attribute='broad jump_cm')[0]\n\n    fig = subplots.make_subplots(rows = 4, cols = 2,\n                                specs = [[{'type': 'indicator'}, {'type': 'histogram'}], \n                                         [{'type': 'indicator'}, {'type': 'histogram'}],\n                                         [{'type': 'indicator'}, {'type': 'histogram'}],\n                                         [{'type': 'indicator'}, {'type': 'histogram'}]\n                                        ],\n                                subplot_titles=['', 'Grip Force', \n                                                '', 'Sit and Bend forward Cm',\n                                                '','Sit-ups Counts', \n                                                '','Broad Jumps cm'])\n\n    layout = go.Layout(title = {'text': chart_title, 'font': dict(size = 50)},\n                       height=800, width=1000)\n\n\n    fig.append_trace(trace1, 1, 1)\n    fig.append_trace(trace2, 2, 1)\n    fig.append_trace(trace3, 3, 1)\n    fig.append_trace(trace4, 4, 1)\n    fig.append_trace(trace5, 1, 2)\n    fig.append_trace(trace6, 2, 2)\n    fig.append_trace(trace7, 3, 2)\n    fig.append_trace(trace8, 4, 2)\n\n    fig.update_layout(layout)\n    \n    return fig","b0d12723":"dirname = '..\/input\/body-performance-data\/'","aaa01edb":"body_data = pd.read_csv(dirname + '\/bodyPerformance.csv')","0b2a1b0d":"body_data.head()","587845bd":"trace, fig = histogram(df=body_data, attribute='age', title='Age distribution')\n\n\niplot(fig)","bef2a5cd":"# take the counts of males and females\nmale_counts = body_data['gender'].value_counts().values[0]\nfemale_counts = body_data['gender'].value_counts().values[1]\n\ngender_counts = {\n    'Gender': ['Male', 'Female'],\n    'Counts': [male_counts, female_counts]\n    \n}\n\ntrace = go.Bar(x = gender_counts['Gender'], y = gender_counts['Counts'], texttemplate = '%{y}',\n               marker = dict(color = ['lightskyblue', 'hotpink']))\n\nlayout = layout_default('Gender')\n\nfig = go.Figure(data = trace, layout = layout)\n\niplot(fig)","9a0c6e3d":"fig = subplots.make_subplots(rows = 5, cols = 2,\n                            subplot_titles=['Height', 'Weight','Diastolic', 'Systolic', 'Grip force', 'Bend forward cm',\n                                           'Sit-ups counts', 'Broad jumps cm'])\n# Aumentare la dimensione\nfig.append_trace(histogram(df=body_data, attribute='height_cm', title='Height Distribution')[0], 1, 1)\nfig.append_trace(histogram(df=body_data, attribute='weight_kg', title='Weight Distribution')[0], 1, 2)\nfig.append_trace(histogram(df=body_data, attribute='body fat_%', title='Body fat Distribution')[0], 2, 1)\nfig.append_trace(histogram(df=body_data, attribute='diastolic', title='Diastolic Distribution')[0], 2, 2)\nfig.append_trace(histogram(df=body_data, attribute='systolic', title='Systolic Distribution')[0], 3, 1)\nfig.append_trace(histogram(df=body_data, attribute='gripForce', title='Grip Force Distribution')[0], 3, 2)\nfig.append_trace(histogram(df=body_data, attribute='sit and bend forward_cm', title='Sit&Bend Distribution')[0], 4, 1)\nfig.append_trace(histogram(df=body_data, attribute='sit-ups counts', title='Sit-Ups Distribution')[0], 4, 2)\nfig.append_trace(histogram(df=body_data, attribute='broad jump_cm', title='Broad Jumps Distribution')[0], 5, 1)\n\nfig.update_layout(height=1000, showlegend=False, title={'text':'Numeric Variables', 'font': {'size':25}})\n\niplot(fig)","3e75369a":"class_counts = body_data['class'].value_counts().sort_index().index\nvalues = body_data['class'].value_counts().sort_index().values\n\nclasses = {\n    'Class': class_counts,\n    'Counts': values\n}\n\ntrace = go.Bar(x = classes['Class'], y = classes['Counts'], texttemplate='%{y}')\n\nlayout = layout_default(title='Class Distribution')\n\nfig = go.Figure(data = trace, layout = layout)\n\niplot(fig)","5d3671ba":"grouped = body_data.groupby(['class', 'gender']).count().reset_index()\ngrouped.rename(columns = {'age': 'count'}, inplace=True)\n\nmales_count = grouped[grouped['gender'] == 'M']['count'].sum()\nfemales_count = grouped[grouped['gender'] == 'F']['count'].sum()\ngrouped['percentage'] = 0\ngrouped.loc[grouped['gender'] == 'M','percentage'] = grouped[grouped['gender'] == 'M']['count'] \/ males_count\ngrouped.loc[grouped['gender'] == 'F','percentage'] = grouped[grouped['gender'] == 'F']['count'] \/ females_count\n\nlabels = []\nfor i in range(grouped.shape[0]):\n    count = grouped.loc[i, 'count']\n    percentage = grouped.loc[i, 'percentage']\n    \n    text = str(count) + f'({round(percentage * 100, 2)}%)'\n    labels.append(text)\n\ntrace = go.Heatmap(x = grouped['class'], y = grouped['gender'], z = grouped['count'],\n                  text = labels, texttemplate='%{text}')\n\n\nfig = go.Figure(data = trace, layout = layout_default(title = 'Classes By Gender'))\n\niplot(fig)","f63b460c":"class_a = body_data[body_data['class'] == 'A']\nclass_b = body_data[body_data['class'] == 'B']\nclass_c = body_data[body_data['class'] == 'C']\nclass_d = body_data[body_data['class'] == 'D']","2c088953":"fig = class_characteristics(chart_title = 'Characteristics of class A', class_df = class_a)\nfig.update_layout(showlegend=False)\niplot(fig)\n\nfig = class_characteristics(chart_title = 'Characteristics of class B', class_df = class_b)\nfig.update_layout(showlegend=False)\niplot(fig)\n\nfig = class_characteristics(chart_title = 'Characteristics of class C', class_df = class_c)\nfig.update_layout(showlegend=False)\niplot(fig)\n\nfig = class_characteristics(chart_title = 'Characteristics of class D', class_df = class_d)\nfig.update_layout(showlegend=False)\niplot(fig)","49c055ee":"classes = {'class-a': class_a, 'class-b': class_b,\n           'class-c': class_c, 'class-d': class_d}\n\nrow_labels = ['Average Age', 'Average Height cm', 'Average Weight Kg', 'Average Body Fat %']\nmean_values = {}\nmean_values2 = {}\nfor class_label, class_df in classes.items():\n    age_mean = round(class_df['age'].mean(), 2)\n    height_mean = round(class_df['height_cm'].mean(), 2)\n    weight_mean = round(class_df['weight_kg'].mean(), 2)\n    body_fat_mean = round(class_df['body fat_%'].mean(), 2)\n    \n    grip_mean = round(class_df['gripForce'].mean(), 2)\n    sitbend_mean = round(class_df['sit and bend forward_cm'].mean(), 2)\n    situps_mean = round(class_df['sit-ups counts'].mean(), 2)\n    broadjump_mean = round(class_df['broad jump_cm'].mean(), 2)\n    \n    mean_values[class_label] = [age_mean, height_mean, weight_mean, body_fat_mean]\n    mean_values2[class_label] = [grip_mean, sitbend_mean, situps_mean, broadjump_mean]\n        \n\ntbl_header = ['<b>Attributes<\/b>', '<b>Class A<\/b>', '<b>Class B<\/b>', '<b>Class C<\/b>', '<b>Class D<\/b>']\nrow_labels1 = ['Average Age', 'Average Height cm', 'Average Weight Kg', 'Average Body Fat %']\nrow_labels2 = ['Avg. Grip Force', 'Avg. Sit&Bend cm', 'Avg. Sit-ups Counts', 'Avg. Broad Jumps']\ntrace1 = go.Table(header = dict(values = tbl_header),\n                cells = dict(height = 30, values = [row_labels1, mean_values['class-a'], \n                                       mean_values['class-b'], mean_values['class-c'], \n                                       mean_values['class-d']]))\n\ntrace2 = go.Table(header = dict(values = tbl_header),\n                cells = dict(height = 30, values = [row_labels2, mean_values2['class-a'], \n                                       mean_values2['class-b'], mean_values2['class-c'], \n                                       mean_values2['class-d']]))\n\nfig = subplots.make_subplots(rows = 2, cols = 1, specs = [[{'type': 'table'}], [{'type': 'table'}]])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\n\nfig.update_layout(layout_default('Class differences'))\nfig.update_layout(height = 700)\nfig.show()","ad7b138e":"to_normalize = body_data.columns.tolist()\nto_normalize.remove('class')\nto_normalize.remove('gender')\n\ndf = body_data.copy()\n\nscaler = MinMaxScaler()\ndf[to_normalize] = scaler.fit_transform(df[to_normalize])\n\ndf['gender'] = df['gender'].astype('category')\ndf['gender'] = df['gender'].cat.codes","4575e476":"%%time\n\nX = df.drop('class', axis=1)\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\nrf_model = RandomForestClassifier(max_depth=None, min_samples_split=4, n_estimators = 1000)\n\nrf_model.fit(X_train, y_train)\n\nscore = rf_model.score(X_test, y_test)\n\nprint('Score:', score)","586b13d3":"y_preds = rf_model.predict(X_test)\nprint(classification_report(y_test, y_preds))","31171065":"To conclude the model works well on class D and class A. It can be considered a good result due to we are more interested in forecasting the best and the worst one. So, this model can answer to the question: what is the best performance I can reach?\n\nThanks for reading. ","359a87ab":"Let's start to visualize the distribution of the attributes","18a619c5":"The population has an average age of 36 but the greatest part of the sample is accumulated around the age value of 25\/26.","7e293f12":"### Normalization","dda84447":"# Preparing the tools","54b69b90":"Is it possible to measure our body performance? Of course, yes! There are a lot of applications and devices that measure our activities and performance, daily, weekly, monthly and yearly. But is there something that tells us what are our limits? Everyone can have the same results? I don't think so.","c54f0e8a":"# Goals","3d8e10a6":"## Class exploration","76c93cac":"### Visualizing the Target Class","3f76b95c":"# Exploratory Analysis","42b4d4ce":"### Age distribution","6c57397f":"Who is the tipycal person belong to each class? let's discover it!","f95f11c8":"### Gender","40af4eb5":"The main objective of this analysis is to predict the performance class of a given sample. ","cecf8ed5":"To get the best model a grid search has been performed. The winner was the **Random Forest**.","90b73eaa":"### Numeric variables distribution","6d1e0743":"### The Model","a2817e06":"### Class and Gender","0103ccab":"Now, let's work on the dataset to properly pre-process the data to feed the model","1b8d48c9":"# Problem Definiton","c6b8ec1e":"The following chart shows us the distribution of the males and females across the class targets. In particular, it is possible to note that there is a greater percentage of males in class C than in other classes, on the other hand, females are more concentrated in class A. So, despite there being fewer females than males, there are more females classified as A (the best class) in percentage than males.","68342ae2":"In the last years, the interest in sport and fitness is growing more and more, thanks also to social media such as Instagram where personal trainer and influencers show their \"fantastic\" workout and results. Consequently, people, that quite often imitate their idols, feel more motivated to follow them in diets or in sports activities to emulate their idols' body.","cd3b08da":"I decided to show the differences between class samples in graphic and tabular form. These visualizations shed light on the great difference between class A and class D. In class A there are the youngest and thinnest, and also the performance (grip force, broad jumps etc.) of its samples are the best. ","db6da34c":"# Preparing dataset for modelling","74e61fe8":"# Conclusion"}}