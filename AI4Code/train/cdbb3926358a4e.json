{"cell_type":{"1f51a9ad":"code","6eeda364":"code","0d835c23":"code","8de80edc":"code","28fb18bd":"code","143fe2ef":"code","a210c658":"code","0a895fa0":"code","8d370183":"code","d0b40619":"code","661f47ec":"code","eaeeadb0":"code","51a5dd75":"code","1e83713b":"code","741ea4fb":"code","af9ab10e":"code","b2135203":"code","edbfbbfc":"code","f70ab4d7":"code","0374e457":"code","f159b925":"code","dba01b54":"code","180adbdb":"code","b957a687":"code","77eab296":"code","e468e9c2":"code","9f7ab9cd":"code","a8a4d295":"code","1d6173cd":"code","e08442fd":"code","539b983b":"code","67d18158":"code","93c919b2":"markdown","7cdef638":"markdown","fbe8c12a":"markdown","af35a033":"markdown","bf83ec92":"markdown","a9e03cfe":"markdown"},"source":{"1f51a9ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6eeda364":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom pandas.plotting import andrews_curves, parallel_coordinates, radviz\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')","0d835c23":"df0 = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","8de80edc":"df = df0.copy()","28fb18bd":"df.head()","143fe2ef":"df.drop(labels = \"Id\" , axis = 1, inplace = True)","a210c658":"m = np.random.uniform(1,7, size = (16,4))\ndf1 = pd.DataFrame(m, columns = [\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"])\nn = pd.DataFrame({'Species' : [\"Iris-setosa\",\"Iris-setosa\",\"Iris-setosa\",\"Iris-setosa\",\"Iris-setosa\",\"Iris-versicolor\",\"Iris-versicolor\",\"Iris-versicolor\",\"Iris-versicolor\",\"Iris-versicolor\",\"Iris-virginica\",\"Iris-virginica\",\"Iris-virginica\",\"Iris-virginica\",\"Iris-virginica\",\"Iris-virginica\"]}, columns = [\"Species\"])\n","0a895fa0":"df1 = pd.concat([df1,n], axis = 1)\ndf = pd.concat([df1,df], ignore_index = True)","8d370183":"df.groupby(\"Species\").describe().T","d0b40619":"df.groupby(\"Species\").quantile([.25,0.75])","661f47ec":"for i in df.columns[0:-1]:\n    sns.boxplot(x='Species', y = i , data = df)\n    plt.show()","eaeeadb0":"sns.pairplot(df, hue = 'Species', size = 3)","51a5dd75":"andrews_curves(df, \"Species\")","1e83713b":"parallel_coordinates(df, \"Species\")","741ea4fb":"radviz(df, \"Species\")","af9ab10e":"for column in df.columns[0:-1]:\n    for spec in df[\"Species\"].unique():\n        selected_spec = df[df[\"Species\"] == spec ]\n        selected_column = selected_spec[column]\n        \n        std = selected_column.std()\n        avg = selected_column.mean()\n        \n        three_sigma_plus = avg + (std * 3)\n        three_sigma_minus = avg - (std * 3)\n        \n        outliers = selected_column[((selected_spec[column] > three_sigma_plus) | (selected_spec[column] < three_sigma_minus))].index\n        df.drop(index = outliers, inplace = True)\n        \n        print(outliers)","b2135203":"for column in df.columns[0:-1]:\n    for spec in df[\"Species\"].unique():\n        selected_spec = df[df['Species'] == spec ]\n        selected_column = selected_spec[column]\n        \n        q1 = selected_column.quantile(.25)\n        q3 = selected_column.quantile(.75)\n        \n        iqr = q3 - q1\n        mini = q1 - (1.5 * iqr)\n        maxi = q3 + (1.5 * iqr)\n        \n        max_idxs = df[(df['Species'] == spec ) & (df[column] > maxi)].index\n        min_idxs = df[(df['Species'] == spec ) & (df[column] < mini)].index\n        \n        df.drop(index = max_idxs, inplace = True)\n        df.drop(index = min_idxs, inplace = True)\n\n        \n        print(max_idxs)\n        print(min_idxs)","edbfbbfc":"le = LabelEncoder()\ndf[\"Species\"] = le.fit_transform(df[\"Species\"])","f70ab4d7":"y = df[\"Species\"]\nX = df.drop([\"Species\"], axis = 1)","0374e457":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)","f159b925":"y_train.value_counts()","dba01b54":"y_test.value_counts()","180adbdb":"xgb_cls = xgb.XGBClassifier(objective = \"multiclass:softmax\", num_class = 3)\nxgb_cls.fit(X_train, y_train)","b957a687":"preds = xgb_cls.predict(X_test)","77eab296":"accuracy_score(y_test, preds)","e468e9c2":"xgb_params = {\n    'n_estimators' : [100, 500, 1000, 2000],\n    'subsample' : [0.6 , 0.8 , 1.0],\n    'max_depth' : [3, 4, 5, 6]}","9f7ab9cd":"xgb_cv_model = GridSearchCV(xgb_cls, xgb_params, cv = 10, n_jobs = -1, verbose = 2)\nxgb_cv_model.fit(X_train, y_train)","a8a4d295":"xgb_cv_model.best_params_","1d6173cd":"xgb_cls = xgb.XGBClassifier(max_depth = 3,\n                       n_estimators = 100,\n                       subsample = 0.8)","e08442fd":"xgb_tuned = xgb_cls.fit(X_train,y_train)","539b983b":"y_pred = xgb_tuned.predict(X_test)\naccuracy_score(y_test,y_pred)","67d18158":"confusion_matrix(y_test,y_pred)","93c919b2":"## Quantile","7cdef638":"## XGBoost","fbe8c12a":"## Model Tuning","af35a033":"## Data Visualization","bf83ec92":"## Label Encoding","a9e03cfe":"## 3 Sigma"}}