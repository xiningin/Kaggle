{"cell_type":{"89d24404":"code","26d8c808":"code","dfe11e3b":"code","7c57ca66":"code","1b84c551":"code","698bc18b":"code","e817ef61":"code","beec532a":"code","4778e9e1":"code","1f2c45f4":"code","c962f892":"code","61317eac":"code","d18f97e8":"code","a1302037":"code","b8480c9b":"code","ea5334cb":"code","edd5e538":"markdown","49f8183b":"markdown","a96310f5":"markdown","d20dc6fc":"markdown","83db58e5":"markdown","350f624a":"markdown","546c096d":"markdown","6e10339d":"markdown","df681562":"markdown","5dd344e5":"markdown","f76c274f":"markdown","f2f0dc65":"markdown","24f3b83e":"markdown"},"source":{"89d24404":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26d8c808":"sales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')","dfe11e3b":"sales_train.head()","7c57ca66":"df = sales_train[['date_block_num','shop_id','item_id','item_cnt_day']].groupby(['date_block_num','shop_id','item_id']).sum().reset_index()\ndf","1b84c551":"y = df.item_cnt_day.values\n\nx = df.drop([\"item_cnt_day\"], axis=1)","698bc18b":"x = (x - np.min(x)) \/ (np.max(x) - np.min(x))\n\nx","e817ef61":"y = y.reshape(-1,1)\n\ny.shape","beec532a":"x.shape","4778e9e1":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)","1f2c45f4":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x, y)","c962f892":"print(nb.score(x_test, y_test))","61317eac":"y_head = nb.predict(x_test)","d18f97e8":"tbl = x_test\ntbl['results'] = pd.Series(y_head)\ntbl.describe()","a1302037":"test = test [['ID', 'shop_id', 'item_id']]\ntest = (test - np.min(test)) \/ (np.max(test) - np.min(test))\ntest.ID = 1.0\ntest","b8480c9b":"test_head = nb.predict(test)","ea5334cb":"test_tbl = test\ntest_tbl['results'] = pd.Series(test_head)\ntest_tbl.describe()","edd5e538":"Naive Bayes Teoremi ile normalizasyon i\u015flemi","49f8183b":"X ve Y de\u011ferlerimizi al\u0131yoruz . X de\u011ferleri = Daha \u00f6nceden ay\u0131rd\u0131\u011f\u0131m\u0131z aylar , ma\u011fazalar, \u00fcr\u00fcnler .Y de\u011feri ise sat\u0131\u015f miktar\u0131 ","a96310f5":"Tahmin i\u015flemi","d20dc6fc":"Train verileri ile tahmin i\u015flemi","83db58e5":"Csv dosyas\u0131ndan -> dataframe ","350f624a":"Model do\u011fruluk kontrol\u00fc","546c096d":"Verileri g\u00f6r\u00fcnt\u00fcleme","6e10339d":"Naive Bayes uygulanmas\u0131","df681562":"Train ve Test verileri eldesi","5dd344e5":"(date_block_num','shop_id','item_id','item_cnt_day) verilerini (date_block_num','shop_id','item_id) verilerine g\u00f6re grupluyoruz ve ard\u0131ndan aylara g\u00f6re sat\u0131\u015f\u0131 bulmak i\u00e7in sum komutu ile topluyoruz","f76c274f":"TEST SONU\u00c7LARI","f2f0dc65":"Reshape i\u015flemi ile verilerimize tekrar \u015fekillendirerek model i\u00e7in uygun hale getiriyoruz.","24f3b83e":"Naive Bayes teoremi kullanarak test i\u015flemimizi ger\u00e7ekle\u015ftiriyoruz"}}