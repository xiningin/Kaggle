{"cell_type":{"fad58fc0":"code","fe142a8b":"code","6d28a925":"code","bd4a44be":"code","3cffc4ad":"code","68de7964":"code","3eacdd3a":"code","c12c1b90":"code","1e42feac":"code","3a2e6567":"code","e84362d5":"code","58072d26":"code","592e9ad0":"code","47f6b520":"code","bef25748":"code","ca6f41ee":"markdown","44d37fc9":"markdown","4eff44b8":"markdown","1d1c7d95":"markdown","b99c0d8b":"markdown","e96bd2c4":"markdown","4a0d68a4":"markdown","a7e7da10":"markdown","d30b2f78":"markdown","fd74bc61":"markdown","3d436ba2":"markdown","3021399a":"markdown","c8ad967f":"markdown","055e7490":"markdown","a1aab1e6":"markdown","b703fdf0":"markdown","2c8512db":"markdown"},"source":{"fad58fc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport json\nfrom pandas.io.json import json_normalize\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe142a8b":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntrain.T","6d28a925":"train_json = [json.loads(line) for line in open('..\/input\/stanford-covid-vaccine\/train.json', 'r')]","bd4a44be":"for json in train_json:\n    json['step'] = list(range(json['seq_scored']))\n    json['sequence'] = list(json['sequence'])\n    json['structure'] = list(json['structure'])\n    json['predicted_loop_type'] = list(json['predicted_loop_type'])\n    json['unpaired_probability'] = list(1-sum(np.load('..\/input\/stanford-covid-vaccine\/bpps\/'+json['id']+'.npy')))","3cffc4ad":"train = pd.json_normalize(data = train_json, \n                            record_path ='reactivity',  \n                            meta =['id','signal_to_noise',\n                                  'SN_filter','seq_length','seq_scored']) \ntrain.rename(columns={0:'reactivity'}, inplace=True)\ntrain['step'] = pd.json_normalize(data = train_json, \n                            record_path ='step'\n                                        )\ntrain['unpaired_probability'] = pd.json_normalize(data = train_json, \n                            record_path ='unpaired_probability'\n                                        )\ntrain['sequence'] = pd.json_normalize(data = train_json, \n                            record_path ='sequence'\n                                        )\ntrain['structure'] = pd.json_normalize(data = train_json, \n                            record_path ='structure'\n                                        )\ntrain['predicted_loop_type'] = pd.json_normalize(data = train_json, \n                            record_path ='predicted_loop_type'\n                                        )\ntrain['reactivity_error'] = pd.json_normalize(data = train_json, \n                            record_path ='reactivity_error'\n                                        )\ntrain['deg_Mg_pH10'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_Mg_pH10'\n                                        )\ntrain['deg_error_Mg_pH10'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_error_Mg_pH10'\n                                        )\ntrain['deg_pH10'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_pH10',\n                                        )\ntrain['deg_error_pH10'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_error_pH10',\n                                        )\ntrain['deg_Mg_50C'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_Mg_50C',\n                                        )\ntrain['deg_error_Mg_50C'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_error_Mg_50C',\n                                        )\ntrain['deg_50C'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_50C',\n                                        )\ntrain['deg_error_50C'] = pd.json_normalize(data = train_json, \n                            record_path ='deg_error_50C',\n                                        )\n\ntrain.set_index(['id','step'], inplace=True)\ntrain.T","68de7964":"train.describe()","3eacdd3a":"test = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)\ntest.T","c12c1b90":"test.describe()","1e42feac":"submission = pd.read_csv('..\/input\/stanford-covid-vaccine\/sample_submission.csv', index_col= 0)\nsubmission.to_csv('submission.csv')\nsubmission.T","3a2e6567":"# Dummy","e84362d5":"# Dummy","58072d26":"# Dummy","592e9ad0":"train.describe()","47f6b520":"n = submission.shape[0]\nreactivity_bar = 0.374922; reactivity_sd = 0.725652\ndeg_Mg_pH10_bar = 0.446303; deg_Mg_pH10_sd = 0.704172\ndeg_pH10_bar = 0.446911; deg_pH10_sd = 1.285747\ndeg_Mg_50C_bar = 0.407030; deg_Mg_50C_sd = 0.868013\ndeg_50C_bar = 0.425889; deg_50C_sd = 1.122356\nsubmission['reactivity']=np.random.normal(reactivity_bar, reactivity_sd, size=n)\nsubmission['deg_Mg_pH10']=np.random.normal(deg_Mg_pH10_bar, deg_Mg_pH10_sd, size=n)\nsubmission['deg_pH10']=np.random.normal(deg_pH10_bar, deg_pH10_sd, size=n)\nsubmission['deg_Mg_50C']=np.random.normal(deg_Mg_50C_bar, deg_Mg_50C_sd, size=n)\nsubmission['deg_50C']=np.random.normal(deg_50C_bar, deg_50C_sd, size=n)\nsubmission","bef25748":"submission.to_csv('submission.csv')","ca6f41ee":"You have to make 107 to 130 predictions per input for the 5 parameters (only 3 of these are used for scoring).","44d37fc9":"# OpenVaccine: COVID-19 mRNA Vaccine Degradation Prediction Getting Started Notebook","4eff44b8":"## Perform your prediction","1d1c7d95":"Seems you will need something like an LSTM that works on sequence data.","b99c0d8b":"Repeat the same with test set","e96bd2c4":"One thing to note is that for each parameter(5 nos) that is to be output by the model, two lists each of size seq_scored is provided for the parameter and the error in that parameter.","4a0d68a4":"Lets use values mean and std from train data as a dummy submission","a7e7da10":"## Filling dummy values","d30b2f78":"This will be overwritten if everything works fine.","fd74bc61":"## Submit","3d436ba2":"## Train your model","3021399a":"## Develop Your model","c8ad967f":"## Read train and test json","055e7490":"A starter notebook for those planning to build your submission from scratch. Will update with EDA as and when time permits.","a1aab1e6":"Not so intuitive, right. Lets see if we can flatten it.","b703fdf0":"# EOF","2c8512db":"### Make dummy submission File"}}