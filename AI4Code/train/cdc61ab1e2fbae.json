{"cell_type":{"9fb5e284":"code","6c8d7000":"code","f9f30925":"code","afc78783":"code","aec7c593":"code","bc988535":"code","0a42c136":"code","adb20da5":"code","cf366cef":"code","5634e8b0":"code","146b5469":"code","f41e1450":"code","8eca37e5":"code","e307cc46":"code","0885ef2e":"code","a5f3dbba":"code","8bd5f20f":"code","9538588b":"code","eb1eb81d":"code","3441168e":"code","e9f58aa7":"code","401bacff":"code","912444fa":"code","a28abbce":"code","dbeee8b3":"code","0a06eb04":"code","f100d400":"code","55ab09d5":"code","2c5b6686":"code","5d3beb37":"code","2be18aa7":"code","2ed1e5ee":"markdown","dc9878f9":"markdown","fb8b0d9a":"markdown","57a67c97":"markdown","516aa986":"markdown","2c2ac0c2":"markdown","0b022a30":"markdown","44318072":"markdown","7dccc75a":"markdown","f8d7df4d":"markdown","36a59dea":"markdown","35279675":"markdown"},"source":{"9fb5e284":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6c8d7000":"cd \/kaggle\/input\/rotten-tomato-movie-reviwe\/","f9f30925":"movie_reviews = pd.read_csv('rotten tomato movie reviwe.csv')\n#Lol a misspelling in the file name","afc78783":"movie_reviews.columns","aec7c593":"df = movie_reviews","bc988535":"df.columns\n#This notebook just started working very, very slowly...","0a42c136":"#movie_reviews.drop(columns={'Rating', 'Directed By', 'Studio' }, inplace=True)\nmovie_reviews.drop(columns={'Rating'}, inplace=True)\n","adb20da5":"df['audience count'] = df['AUDIENCE count'].str.replace('\\D', '').astype(int)\ndf['audience score'] = df['AUDIENCE score'].str.replace('\\D','').astype(int)\ndf['tomatometer score'] = df['TOMATOMETER score'].str.replace('\\D','').astype(int)\ndf['tomatometer count'] = df['TOMATOMETER Count'].astype(int, copy=True)","cf366cef":"df.columns(columns={'Rating','Runtime', 'TOMATOMETER score', 'TOMATOMETER Count', 'AUDIENCE score', 'AUDIENCE count'}, inplace=True)","5634e8b0":"df.rename(columns={'Directed By':'Director'}, inplace=True)","146b5469":"df.sort_values('audience count', ascending=True, inplace=True)","f41e1450":"df = df[226:]","8eca37e5":"df.sort_values('tomatometer count', ascending=True, inplace=True)","e307cc46":"df = df[1150:]","0885ef2e":"df.reset_index( inplace=True)","a5f3dbba":"df['score difference'] = (df['audience score'] - df['tomatometer score']).abs()\n","8bd5f20f":"df = df[df['score difference']> 10]","9538588b":"df.sort_values('score difference', ascending=True)\n#checking my work","eb1eb81d":"df['user input'] = 0","3441168e":"df.reset_index(inplace=True)","e9f58aa7":"print(np.asanyarray(df[['index', 'Name']]))\n#Noticing some confusion here - it seems like the index operator sometimes works and sometimes doesn't","401bacff":"print('Type the index of the movie you wish to review')\nindex= input(' ')","912444fa":"print('Type your percentage review, as an integer, of that movie')\nmy_review= int(input( ''))","a28abbce":"df.loc[index, 'user_input'] = my_review","dbeee8b3":"#Iterate this step 60 times to avoid a small sample size","0a06eb04":"df[df['user_input'] >= 0]\n#This cleans the data and partial shows you that the previous code was working","f100d400":"df['user tomatoe difference'] = (df['user input'] - df['tomatometer score']).abs()\ndf['user audience difference'] = (df['user input'] - df['audience score']).abs()","55ab09d5":"user_audience_difference = df['user audience difference'].sum()\nuser_tomatoe_difference = df['user tomatoe difference'].sum()","2c5b6686":"print('Your measure of disagreement with audience members is %s'% user_audience_difference)\nprint('Your measure of disagreement with professianl reviewers is %s'% user_tomatoe_difference) \nprint('Your lewst disagreement score predicts which rating category to look to when considering a movie')","5d3beb37":"#Check to see if the reviewer plausibly really likes a Director or a particular studio","2be18aa7":"# def get_user_choice()\n#Gets user choice\n#   \"\"\"\n#   nums = [val for val in range(len(df[column].unique()))]\n#   choices = list(zip(nums, df[column].unique()))\n#   print(\"What '%s' would you like?\\n\" % column)\n#   for v in choices:\n#       print(\"%s.  %s\" % (v))\n#   user_input = input(\"Answer: \")\n#   user_answer = [val[1] for val in choices if val[0]==int(user_input)][0]\n#   print(\"'%s' = %s\\n\" % (column, user_answer)) # Just tells the user what they answered\n#   return user_answer\n#get_choice(df, df['Name'])\n#rating_input = input(\"Enter your rating for the movie %s: \" ,%selected_movie)\n#test = data['Name']['User_Rating']\n#test = data[['CUM_GPA', input1_str, input2_str]]\n# error here! 'test' does not have attribute 'input1_str' or 'input1_col'\n#df_1 = test[(test.input1_str == 0) & (test.input2_str == 0)]\n#df_2 = test[(test.input1_col == 1) & (test.input2_col == 0)]\n#print(stats.ttest_ind(df_1.CUM_GPA, df_2.CUM_GPA, equal_var = False))\n#def choose(data, column)\n#       data = df\n#       column = inpuct(str(' '))\n#     print(list(data[column]))\n#def main():\n\n#   year_input = get_choice(data=df, column=\"Name\")\n#   zone_input = get_choice(data=df, column=\"TOMATOMETER_count\")\n#   newdf = df.loc[(df[\"Name\"]==year_input)&(df[\"TOMATOMETER_conte\"]==zone_input)]\n#   print(newdf)#\n\n#if __name__ == \"__main__\":#    main()\n#def get_choice(data, column):\n    \n    #Gets user choice\n    \n#   nums = [val for val in range(len(df[column].unique()))]\n#   choices = list(zip(nums, df[column].unique()))\n    \n    #This is the code that I stole from datascience.stackexchange.com\n    #What follows is my expansion on it\n    #   user_rating = float(input(\"Enter your score of the movie %.  It should be a number between 0 and 1:\"))                                                                                                                                              \n#Enter number of data rows:3\n\n#header = input(\"Enter header:\")                                                                                                                                                                    \n\n#data = [] \n\n#i = 1                                                                                                                                                                                              \n\n\n#while i <= total_rows: \n#   row = input(\"Enter data:\") \n#   data.append(row) \n#   i += 1 \n\n\n#   header = header.split(',')\n#data = [x.split(',') for x in data]                                                                                                                                                                \n#df = pd.DataFrame(data, columns=header)                   \n#df['tomatometer count'] = df['TOMATOMETER Count'].str.replace('\\D', '').astype(int)\n#df['audience count'] = df['audcount'].apply(lambda x: np.nan if x in ['-'] else x[:-1]).astype(float)\/100\n#select a cell in the column of 'user input' by its associated movie name column\n#tinker = np.insert(tinker, values=mli)\n#df.insert(loc=index, column=df['user input'], value=my_review )\n#This is the wrong code, \n##df.loc[mli, axis=0].insert(df['user input'], values=mr)\n#df.loc[df['Name']==mli].Index.insert(loc=df['user input'], column=df['user input'], value=mr)\n#Is loc typically for rows... ?\n#df.loc[mli, axis=0].insert(df['user input'], values=mr)\n#tinker = np.asarray(df2['Name','user input']\n#df.insert(loc=df['user input'], column=df['user input'], value=mr)\n# .all() operator - I thought this wouldv'e been easier\n#df = df[df['similarity'] >= 10]\n#df['score difference'].any(df['score difference']<=10)\n#df['keep'] = df(~df['Name'].apply(lambda row: sum(any([(x < int(60)) for x in row])), axis=1))\n#This is an inelegant solution but it works\n#UnexpectedArgument axis=1\n#df['keep'] = df(~df['Name'].apply(lambda row: sum(any([(x < str(60)) for x in row]))))\n#TypeError 'bool' object is not iterable\n#df = df.loc[((df<10) | (df>25)).any(1)]\n#Use Pandas Boolean indexing to know which rows to drop\n#df = pd.read_csv(io.StringIO(temp1), sep='\\s+',index_col=[0], converters={'col':p2f})\n#df = df.loc[(df['tomatometer count'] >= int(60)) | (df['audience count'] >= int(60))]\n#What does this code do?\n#df['keep'] = df.loc[df['tomatometer count']].apply(lambda x: x >= 60","2ed1e5ee":"**Return the Results**","dc9878f9":"**Remove Scores that are too Similar**","fb8b0d9a":"**Examine the Residuals**","57a67c97":"**User Inputs her Personal Score**","516aa986":"**Remove Scores from Small Sample Sizes**","2c2ac0c2":"**Create a Column for Personal Ratings**","0b022a30":"**Use Hamming Distance to Find Best Fit**","44318072":"**Clean the Data a Second Time**","7dccc75a":"**Scratch Code**","f8d7df4d":"What follows are some of the many lines of code that I wrote, or tried to dismantle\/steal, to try to get this notebook right.  I learned the math of data science first; and so, code is *extremely* difficult for me.","36a59dea":"**Clean the Data**","35279675":"It took me a very long time to finish this.  I had to spend considerable time looking up code on the internet.  I don't even *know* what I learned about code because it all felt very foreign. "}}