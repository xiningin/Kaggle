{"cell_type":{"365da666":"code","f96a21bb":"code","b7824913":"code","d734a638":"code","0df9d5db":"code","f819821b":"code","68085519":"code","c9cd1819":"code","6bf564aa":"code","73504289":"code","c95de80b":"code","e1e1792a":"code","a08107bc":"code","13c6d79b":"code","dcf95e2f":"code","d09199f9":"code","8f138bd8":"code","fe070221":"code","9661a88f":"code","b76f5867":"code","78c983c0":"code","9c8fd7f1":"code","5dc89da0":"code","cb846f38":"code","3ba45158":"code","d2901dd4":"code","a7d377ef":"code","e130bdb8":"code","eece1d25":"code","0d0f19f6":"code","636b8551":"code","b62fd439":"code","d29bdbb1":"code","3f739ac2":"code","1e2aa51a":"code","bcc3f75c":"code","c88d933b":"code","a1c279c5":"code","e1c9760d":"code","77c513e8":"code","f67ea0b9":"code","4db8cdf6":"code","70578f59":"code","28655454":"code","edd14287":"code","c04a136a":"code","1e799352":"code","e5745ea4":"code","fe6d467e":"code","9142cf70":"code","a246cac5":"code","9e032431":"code","e2a0f67e":"markdown"},"source":{"365da666":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","f96a21bb":"data = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')","b7824913":"data.head()","d734a638":"data.shape","0df9d5db":"data.isnull().sum()","f819821b":"data.dtypes","68085519":"data['sex'][data['sex'] == 0] = 'female'\ndata['sex'][data['sex'] == 1] = 'male'\n\ndata['cp'][data['cp'] == 1] = 'typical angina'\ndata['cp'][data['cp'] == 2] = 'atypical angina'\ndata['cp'][data['cp'] == 3] = 'non-anginal pain'\ndata['cp'][data['cp'] == 4] = 'asymptomatic'\n\ndata['fbs'][data['fbs'] == 0] = 'lower than 120mg\/ml'\ndata['fbs'][data['fbs'] == 1] = 'greater than 120mg\/ml'\n\ndata['restecg'][data['restecg'] == 0] = 'normal'\ndata['restecg'][data['restecg'] == 1] = 'ST-T wave abnormality'\ndata['restecg'][data['restecg'] == 2] = 'left ventricular hypertrophy'\n\ndata['exang'][data['exang'] == 0] = 'no'\ndata['exang'][data['exang'] == 1] = 'yes'\n\ndata['slope'][data['slope'] == 1] = 'upsloping'\ndata['slope'][data['slope'] == 2] = 'flat'\ndata['slope'][data['slope'] == 3] = 'downsloping'\n\ndata['thal'][data['thal'] == 1] = 'normal'\ndata['thal'][data['thal'] == 2] = 'fixed defect'\ndata['thal'][data['thal'] == 3] = 'reversable defect'","c9cd1819":"data['sex'] = data['sex'].astype('object')\ndata['cp'] = data['cp'].astype('object')\ndata['fbs'] = data['fbs'].astype('object')\ndata['restecg'] = data['restecg'].astype('object')\ndata['exang'] = data['exang'].astype('object')\ndata['slope'] = data['slope'].astype('object')\ndata['thal'] = data['thal'].astype('object')","6bf564aa":"data.head()","73504289":"data.dtypes","c95de80b":"sns.countplot('target', data=data)","e1e1792a":"sns.countplot('target', data=data, hue='sex', palette=\"Set1\")","a08107bc":"data[['target', 'sex']].groupby(['sex'], as_index=False).mean().sort_values(by='sex', ascending=False)","13c6d79b":"data['age'].hist()","dcf95e2f":"sns.distplot(data['age'], color = 'red')","d09199f9":"plt.figure(figsize=(20,10))\nsns.countplot('age', hue='target', data=data)","8f138bd8":"sns.swarmplot('target', 'age', data=data)","fe070221":"sns.swarmplot('target', 'chol', data=data)","9661a88f":"sns.countplot('target', hue='ca', data=data)","b76f5867":"data.groupby(['target','ca']).size().unstack().plot(kind='bar', stacked=True, figsize=(10,8))\nplt.show()","78c983c0":"sns.countplot('target', hue='thal', data=data)","9c8fd7f1":"plt.figure( figsize=(20,8))\nplt.scatter(x = data['target'], y = data['chol'], s = data['thalach']*100, color = 'red')","5dc89da0":"label = data['target']","cb846f38":"label.unique()","3ba45158":"label.value_counts()","d2901dd4":"data=data.drop(['target'], axis=1)","a7d377ef":"data.head()","e130bdb8":"label.shape","eece1d25":"data = pd.get_dummies(data, drop_first=True)","0d0f19f6":"data.head()","636b8551":"x = data","b62fd439":"from sklearn.model_selection import train_test_split","d29bdbb1":"x_train, x_test, y_train, y_test = train_test_split(x, label, test_size = 0.2)","3f739ac2":"x_train.shape","1e2aa51a":"x_test.shape","bcc3f75c":"y_train.shape","c88d933b":"y_test.shape","a1c279c5":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","e1c9760d":"mod1 = RandomForestClassifier()\nmod1.fit(x_train, y_train)","77c513e8":"mod2 = DecisionTreeClassifier()\nmod2.fit(x_train, y_train)","f67ea0b9":"pred_1 = mod1.predict(x_test)\npred_quant1 = mod1.predict_proba(x_test)[:, 1]\npred1 = mod1.predict(x_test)\n\npred_2 = mod2.predict(x_test)\npred_quant2 = mod2.predict_proba(x_test)[:, 1]\npred2 = mod2.predict(x_test)\n","4db8cdf6":"score1_train=mod1.score(x_train, y_train)\nprint(f'Training Random Forest: {round(score1_train*100,2)}%')\n\nscore1_test=mod1.score(x_test,y_test)\nprint(f'Testing Random Forest: {round(score1_test*100,2)}%')","70578f59":"score2_train=mod2.score(x_train, y_train)\nprint(f'Training Decision Tree: {round(score2_train*100,2)}%')\n\nscore2_test=mod2.score(x_test,y_test)\nprint(f'Testing Decision Tree: {round(score2_test*100,2)}%')","28655454":"from sklearn.metrics  import confusion_matrix","edd14287":"confusion_matrix(y_test, pred1)","c04a136a":"sns.heatmap(confusion_matrix(y_test, pred1), annot=True)","1e799352":"confusion_matrix(y_test, pred2)","e5745ea4":"sns.heatmap(confusion_matrix(y_test, pred2), annot=True)","fe6d467e":"y_pred_quant1 = mod1.predict_proba(x_test)[:, 1]","9142cf70":"from sklearn.metrics import roc_curve\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_quant1)\n\nfig, ax = plt.subplots()\nax.plot(fpr, tpr)\nax.plot([0, 1], [0, 1], transform=ax.transAxes, ls=\"-\", c=\".3\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.rcParams['figure.figsize'] = (15, 5)\nplt.title('ROC curve for diabetes classifier', fontweight = 30)\nplt.xlabel('False Positive Rate (1 - Specificity)')\nplt.ylabel('True Positive Rate (Sensitivity)')\nplt.show()","a246cac5":"import eli5 \nfrom eli5.sklearn import PermutationImportance\nperm1 = PermutationImportance(mod1, random_state = 0).fit(x_test, y_test)\neli5.show_weights(perm1, feature_names = x_test.columns.tolist())","9e032431":"perm2 = PermutationImportance(mod2, random_state = 0).fit(x_test, y_test)\neli5.show_weights(perm2, feature_names = x_test.columns.tolist())","e2a0f67e":"age: The person's age in years\nsex: The person's sex (1 = male, 0 = female)\ncp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\ntrestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\nchol: The person's cholesterol measurement in mg\/dl\nfbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\nrestecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\nthalach: The person's maximum heart rate achieved\nexang: Exercise induced angina (1 = yes; 0 = no)\noldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\nslope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\nca: The number of major vessels (0-3)\nthal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\ntarget: Heart disease (0 = no, 1 = yes)"}}