{"cell_type":{"a98ddf2a":"code","76c1bf8a":"code","5773120f":"code","eb1a3aa0":"code","a0d408e6":"code","ece872bd":"code","4e0360b4":"code","0a8cb2b8":"code","b1231f30":"code","22e1b585":"code","8499dce7":"code","a63a83e1":"code","84bec297":"code","2c6914d3":"code","748b43f2":"code","eab22436":"code","c4b04d06":"code","fd5a6dcf":"markdown","ed253afe":"markdown","5a114df4":"markdown","8e617859":"markdown","5f717b0a":"markdown","94075176":"markdown","7ab943b1":"markdown","3cb32ee1":"markdown","25f04d82":"markdown","a81a26cd":"markdown","fe798d6e":"markdown","c2f57680":"markdown"},"source":{"a98ddf2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76c1bf8a":"data = pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndata.head()\n","5773120f":"data.tail()","eb1a3aa0":"data.columns","a0d408e6":"data.describe","ece872bd":"data.info()","4e0360b4":"data['HDI for year'].value_counts(dropna=False)  # with dropna=False, we get NaN values data\n","0a8cb2b8":"data['HDI for year'].dropna(inplace=True)  # we updated data after drop values\n","b1231f30":"# We can check with assert statement\nassert data['HDI for year'].notnull().all()  # returns nothing because we drop nan values\n","22e1b585":"# We changed column names to lowercase\ndata.columns = [each.lower() for each in data.columns]\n# added missed _ to column names\ndata.columns = [each.split()[0] + '_' + each.split()[1] + '_' + each.split()[2] if (len(each.split()) > 2) else each for\n                each in data.columns]\ndata.columns\n","8499dce7":"data.plot(kind='line', x='year', y='suicides_no')\n# plt.xticks(rotation=90) # can change x axis's labels to vertical \nplt.title('Global suicide number')\nplt.show()\n","a63a83e1":"labels = 'Male', 'Female'\nsizes = data.sex.value_counts()\nprint(sizes)\nexplode = (0.05, 0)\ncolors = ['lightskyblue', 'pink']\nplt.pie(sizes, explode=explode, colors=colors, autopct='%1.1f%%', startangle=90)  # with startangle we turned chart 90\nplt.title('Suicides by Sex')\nplt.legend(labels, loc='upper right')\nplt.show()\n","84bec297":"fig, ax = plt.subplots(1, 2, figsize=(16, 9))\ndataFemale = data[(data.sex == 'female')]\ndataMale = data[(data.sex == 'male')]\n# with hue='age'; we grouped data by age\nsns.lineplot(x='year', y='suicides_no', hue='age', color='pink', data=dataFemale, ax=ax[0], marker=\"o\").set_title(\n    \"Female' s suicides by years\", fontsize=20)\nsns.lineplot(x='year', y='suicides_no', hue='age', color='lightskyblue', data=dataMale, ax=ax[1], marker=\"o\").set_title(\n    \"Male's suicides by years\", fontsize=20)\nfig.show()\n","2c6914d3":"# countplot, show the counts of observations in each categorical bin using bars.\nplt.figure(figsize=(10, 25))\nsns.countplot(y='country', data=data)\nplt.title('Data by country')\nplt.show()\n","748b43f2":"melted = pd.melt(frame=data, id_vars='country', value_vars=['suicides_no'])\nmelted\n","eab22436":"# lets create 2 data frame\ndata1 = data.head()\ndata2 = data.tail()\nconcatData = pd.concat([data1, data2], axis=0, ignore_index=True)  # axis=0, we add row to each other\nconcatData\n","c4b04d06":"# We can also add column to each other\ndata1 = data['year'].head()\ndata2 = data['suicides_no'].head()\nconcatData = pd.concat([data1, data2], axis=1)\nconcatData\n","fd5a6dcf":"As we saw in our dataset only one column -HDI for year- have null values and bad column name. Lets loook what we can do !","ed253afe":"# 3.Suicides in Female & Male by years","5a114df4":" We will use pie chart for showing suicides rate by sex.","8e617859":"# 5.Tidy Data","5f717b0a":"Now we change the column names","94075176":"# 1. Global suicide ","7ab943b1":"# 2. Suicide by Sex","3cb32ee1":"# 6.Concatenating Data","25f04d82":"We can see that suicides number of **Female's** max suicide number got reach in **2015** and age-range was **35-54 years** wile **Male's** max suicide number gow reach in **1994-1995** and age-range was **35-54** years. ","a81a26cd":"# 4.Suicide number in countries","fe798d6e":"We can see that suicides number got max reach in 1994-1995.","c2f57680":"In this column we have 19456 NaN data. What we can do:\n\n* leave as is\n* drop them with dropna()\n* fill missing value with fillna()\n* fill missing values with test statistics like mean\n\nCause of too much data is empty we will drop this values with dropna()."}}