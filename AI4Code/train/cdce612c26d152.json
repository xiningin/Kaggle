{"cell_type":{"2b72e848":"code","6d149a11":"code","fb1fe0c2":"code","b54164c0":"code","a49152ec":"code","381320f1":"code","ab4b3434":"code","1b33d46a":"code","ec7d7307":"code","150df4ba":"code","5712ab71":"code","6cc558a1":"code","9493a154":"code","b9972efa":"code","d6134fc8":"markdown","f3f7bf2d":"markdown","4fc8d304":"markdown","5dcce692":"markdown","48a2e754":"markdown","f4b8cd5d":"markdown","f3a92c02":"markdown","ef6d8864":"markdown","a8bd57ee":"markdown","9324e29f":"markdown","28aab39d":"markdown","0a060b7b":"markdown","1d69ff5b":"markdown","3ff3c3ba":"markdown","91e54892":"markdown"},"source":{"2b72e848":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","6d149a11":"dataset = pd.read_csv('..\/input\/magic-gamma-telescope-dataset\/telescope_data.csv')\nX = dataset.iloc[:, 0:-1].values\ny = dataset.iloc[:, -1].values","fb1fe0c2":"import pandas_profiling as pp\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","b54164c0":"pp.ProfileReport(dataset, title = 'Pandas Profiling report of \"dataset\"', html = {'style':{'full_width': True}})","a49152ec":"import seaborn as sns\ndf = dataset.copy()\nsns.pairplot(data=df)","381320f1":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)","ab4b3434":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\n\nprint(X_train)\n\nprint(y_train)\n\nprint(X_test)\n\nprint(y_test)","1b33d46a":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\n\nprint(X_train)\n\nprint(X_test)","ec7d7307":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","150df4ba":"print(classifier.predict(sc.transform([[1, 31.6036, 11.7235, 2.5185, 0.5303, 0.3773, 26.2722, 23.8238, -9.9574, 6.3609, 205.261]])))","5712ab71":"y_pred = classifier.predict(X_test)","6cc558a1":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(\"Accuracy: {:.2f}%\".format(accuracy_score(y_test, y_pred)*100))","9493a154":"import seaborn as sns\nsns.countplot(y_pred, data=dataset)\nplt.title('0 = g , 1 = h')\nplt.xlabel('Predicted class')\nplt.show()","b9972efa":"sns.countplot(y_test,  data=dataset)\nplt.title('0 = g , 1 = h')\nplt.xlabel('Real class')\nplt.show()","d6134fc8":"# Importing the libraries","f3f7bf2d":"# Visualising predictions","4fc8d304":"# <font color='blue'>MAGIC Gamma Telescope<\/font>: Random forest with 99.98% accuracy.\n* Importing the libraries\n* Importing the dataset\n* Dataset information (Pandas Profiling)\n* Visualising pairplot\n* Encoding dependent variable\n* Splitting the dataset into the Training set and Test set\n* Feature Scaling\n* Training the Random Forest Classification model on the Training set\n* Predicting a new result\n* Predicting the Test set results\n* Making the Confusion Matrix\n* Visualising predictions\n* Visualising real values","5dcce692":"# Predicting a new result","48a2e754":"# Splitting the dataset into the Training set and Test set","f4b8cd5d":"# Visualising real values","f3a92c02":"# Visualising pairplot","ef6d8864":"# Predicting the Test set results","a8bd57ee":"# Making the Confusion Matrix","9324e29f":"# Training the Random Forest Classification model on the Training set","28aab39d":"# If you liked my work then please upvote, Thank you.","0a060b7b":"# Feature Scaling","1d69ff5b":"# Encoding dependent variable","3ff3c3ba":"# Dataset information (Pandas Profiling)","91e54892":"# Importing the dataset"}}