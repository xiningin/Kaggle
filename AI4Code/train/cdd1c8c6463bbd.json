{"cell_type":{"42471879":"code","eb05158b":"code","a3a71178":"code","6c8a9342":"code","90ae35e9":"code","09617c6d":"code","cae17003":"code","08d56498":"code","163fa64e":"code","fb669788":"code","c749068f":"code","725227ef":"code","69846f5c":"code","a2c805e7":"code","686dbaff":"code","182d654f":"code","31be300e":"code","dd25dfcf":"code","4aa78307":"code","c8c5b5bd":"code","2f710197":"code","9c31733b":"code","06e405d3":"code","193a2da7":"code","f1d67cfc":"code","2802b5d9":"code","84e226a5":"code","0c5152d3":"code","69167d6d":"code","d03f7dad":"code","dd88e749":"code","7849a79a":"code","2e3b4362":"code","eeedc4a6":"code","1b97d10f":"code","fd97afff":"markdown"},"source":{"42471879":"import os\nos.listdir('..\/input\/handwritten-digits')","eb05158b":"loc0= '..\/input\/handwritten-digits\/digit_0'\nloc1= '..\/input\/handwritten-digits\/digit_1'\nloc2= '..\/input\/handwritten-digits\/digit_2'\nloc3= '..\/input\/handwritten-digits\/digit_3'\nloc4= '..\/input\/handwritten-digits\/digit_4'\nloc5= '..\/input\/handwritten-digits\/digit_5'\nloc6= '..\/input\/handwritten-digits\/digit_6'\nloc7= '..\/input\/handwritten-digits\/digit_7'\nloc8= '..\/input\/handwritten-digits\/digit_8'\nloc9= '..\/input\/handwritten-digits\/digit_9'\n","a3a71178":"from tqdm import tqdm\nimport cv2 \n\nfeatures = []\n\nfor i in tqdm(os.listdir(loc0)):\n    f = cv2.imread(os.path.join(loc0,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \n\nfor i in tqdm(os.listdir(loc1)):\n    f = cv2.imread(os.path.join(loc1,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n    \n\nfor i in tqdm(os.listdir(loc2)):\n    f = cv2.imread(os.path.join(loc2,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc3)):\n    f = cv2.imread(os.path.join(loc3,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc4)):\n    f = cv2.imread(os.path.join(loc4,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc5)):\n    f = cv2.imread(os.path.join(loc5,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc6)):\n    f = cv2.imread(os.path.join(loc6,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc7)):\n    f = cv2.imread(os.path.join(loc7,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc8)):\n    f = cv2.imread(os.path.join(loc8,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n\nfor i in tqdm(os.listdir(loc9)):\n    f = cv2.imread(os.path.join(loc9,i),0)\n    fr = cv2.resize(f,(80,80))\n    features.append(fr)\n","6c8a9342":"import numpy as np\nX = np.array(features)\nX.shape","90ae35e9":"labels = []\n\n\nfor i in tqdm(os.listdir(loc0)):\n    labels.append(0)\n    \nfor i in tqdm(os.listdir(loc1)):\n    labels.append(1)\n    \nfor i in tqdm(os.listdir(loc2)):\n    labels.append(2)\n    \nfor i in tqdm(os.listdir(loc3)):\n    labels.append(3)\n    \nfor i in tqdm(os.listdir(loc4)):\n    labels.append(4)\n    \nfor i in tqdm(os.listdir(loc5)):\n    labels.append(5)\n    \nfor i in tqdm(os.listdir(loc6)):\n    labels.append(6)\n    \nfor i in tqdm(os.listdir(loc7)):\n    labels.append(7)\n    \nfor i in tqdm(os.listdir(loc8)):\n    labels.append(8)\n    \nfor i in tqdm(os.listdir(loc9)):\n    labels.append(9)","09617c6d":"Y = np.array(labels)\nY.shape","cae17003":"import pandas as pd \nft = pd.DataFrame(X.reshape(6837,6400))\nlt = pd.DataFrame(Y.reshape(6837,1),columns = ['Labels'])\ndigits = pd.concat((ft,lt),axis='columns')\ndigits.to_csv('digits.csv')","08d56498":"import matplotlib.pyplot as plt\nplt.imshow(X[6].reshape(80,80))\nplt.show()","163fa64e":"X = ft.values\nY = lt.values","fb669788":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y)\n","c749068f":"from sklearn.ensemble import RandomForestClassifier\nrmodel = RandomForestClassifier(max_depth = 22)\n\nrmodel.fit(xtrain,ytrain)","725227ef":"print(rmodel.score(xtrain,ytrain))\nprint(rmodel.score(xtest,ytest))","69846f5c":"from keras import models\nfrom keras import layers\n","a2c805e7":"model = models.Sequential()\nmodel.add(layers.Dense(256 , activation='relu' , input_dim=xtrain.shape[1]))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Dense(128 , activation='relu'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.Dense(256 , activation='relu'))\nmodel.add(layers.Dropout(0.2))\nmodel.add(layers.Dense(10 , activation='softmax'))","686dbaff":"model.summary()","182d654f":"from keras import optimizers\nfrom keras import metrics","31be300e":"xtrain.shape","dd25dfcf":"model.compile(optimizer='sgd',\n              loss = 'categorical_crossentropy',\n              metrics=['accuracy'])","4aa78307":"# 0 - [1 0 0 0 0 0 0 0 0 0]\n# 1 - [0 1 0 0 0 0 0 0 0 0]\n# 2 - [0 0 1 0 0 0 0 0 0 0]\nfrom sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y)\n\nfrom keras.utils import np_utils\nytrain_h = np_utils.to_categorical(ytrain)","c8c5b5bd":"xtrain_n = xtrain\/xtrain.max()","2f710197":"xtest_n = xtest\/xtest.max()\nytest_h = np_utils.to_categorical(ytest)","9c31733b":"model.fit(xtrain_n,ytrain_h,epochs=100,validation_data = (xtest_n,ytest_h))","06e405d3":"print(model.evaluate(xtrain_n,ytrain_h))\nprint(model.evaluate(xtest_n,ytest_h))","193a2da7":"import numpy as np\n\nX = np.array(features).reshape(-1,80,80,1)\nY = np.array(labels)","f1d67cfc":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Activation,Convolution2D,MaxPooling2D,Flatten,Dropout\nfrom keras.utils import np_utils","2802b5d9":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(X,Y)","84e226a5":"#Normalising the features\nxtrain_n = xtrain\/xtrain.max()\nxtest_n = xtest\/xtest.max()","0c5152d3":"#One hot encoding\nytrain_h = np_utils.to_categorical(ytrain)\n\nytest_h = np_utils.to_categorical(ytest)","69167d6d":"model = Sequential()\nmodel.add(Convolution2D(32,(3,3), padding = 'same', input_shape = xtrain_n.shape[1:]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Convolution2D(64,(3,3), padding = 'same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Convolution2D(128,(3,3), padding = 'same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Convolution2D(256,(3,3), padding = 'same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Convolution2D(512,(3,3), padding = 'same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Convolution2D(1024,(3,3), padding = 'same'))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(10,activation='softmax'))","d03f7dad":"model.summary()","dd88e749":"sgd = keras.optimizers.SGD(0.01)\nmodel.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy'])","7849a79a":"model.fit(xtrain_n,ytrain_h, epochs = 50, validation_data=(xtest_n,ytest_h))","2e3b4362":"print(model.evaluate(xtrain_n,ytrain_h))\nprint(model.evaluate(xtest_n,ytest_h))","eeedc4a6":"np.argmax(model.predict(xtest_n[200].reshape(-1,80,80,1)))","1b97d10f":"import matplotlib.pyplot as plt\nplt.imshow(xtest_n[200])\nplt.show()","fd97afff":"# **Neural Network**"}}