{"cell_type":{"453734c2":"code","a4efcef8":"code","fd5542f4":"code","0b524471":"code","29da8572":"code","072cba98":"code","ef434101":"code","dd123cb9":"code","ffce0956":"markdown","349c066e":"markdown","f698323c":"markdown","4d32f374":"markdown","0f260ac0":"markdown","8a7bd225":"markdown","8dd6eda1":"markdown","0a132937":"markdown","9dd12ec5":"markdown","4b6eddcc":"markdown","2f3234d3":"markdown"},"source":{"453734c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a4efcef8":"#import data\n\ndata = pd.read_csv(\"..\/input\/column_2C_weka.csv\")\nprint(data.info())","fd5542f4":"#normalized data\n\nx_data = data.drop([\"class\"], axis = 1)\ny_data = data[\"class\"] #y_data = class (normal\/abnormal)\nx_data = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values\n\nx_data.head()","0b524471":"#%% Show the ratio of normal\/abnormal\nimport seaborn as sns\n\nrate = y_data.value_counts()\nplt.figure(figsize=[5,5])\nplt.pie(rate.values, explode = [0, 0], labels = rate.index,  autopct = \"%1.1f%%\")\nplt.show()","29da8572":"plt.figure(figsize=[15,5])\n\n# Create dataframe and reshape\ncolumns = list(x_data.columns) #column names\n\ndf = x_data.copy()\ndf[\"class\"] = y_data #df = x_data + y_data\ndf = pd.melt(df, value_vars=columns, id_vars='class') #id = class olsun,  di\u011fer columnlar\u0131 variable olarak da\u011f\u0131t\n\n#Plot\npal = sns.cubehelix_palette(2, rot=.5, dark=.3)\nsns.violinplot(x='variable', y='value',  hue='class', data=df,\n               palette=pal,\n               split=True, \n               inner=\"quart\")\nplt.show()","072cba98":"from mpl_toolkits.mplot3d import Axes3D #for 3d plot\n\n#GET X,Y,Z AXIS VALUES\nx_values= x_data[\"pelvic_incidence\"].values.reshape(-1, 1) \ny_values= x_data[\"pelvic_tilt numeric\"].values.reshape(-1, 1)\nz_values = x_data[\"lumbar_lordosis_angle\"].values.reshape(-1, 1) \n\n#PLOT SCATTER VALUES\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x_values, y_values, z_values, c='r', marker='o', alpha=0.3)\n\n\n\n#REGRESSION WITH LINEAR MODEL\nfrom sklearn.linear_model import LinearRegression\nxy_values = x_data.iloc[:, [0,1]].values #xy_values (pelvic_incidence,pelvic_tilt numeric) np.array\n\n#LEARN Z VALUES ACCORDING TO (X,Y) VALUES\nlr = LinearRegression()\nlr.fit(xy_values, z_values)    #regression\n\n\n\n# CREATE AN ARRAY FOR X AND Y VALUES\nax_values = np.arange(0, 1, 0.05)\n#FIND THE Z_HEAD(PREDICT) VALUES CORRESPOND TO THESE X,Y VALUES\nxy_for_predict= np.vstack((ax_values,ax_values)).T\n\n#PREDICT z_head\nz_head = lr.predict(xy_for_predict)\n\n#PLOT REGRESSION LINE\nax.plot(ax_values, z_head, ax_values, c='b', label=\"Linear Regression(z_head) : lumbar_lordosis_angle\")\nax.set_xlabel('pelvic_incidence (X)')\nax.set_ylabel('pelvic_tilt numeric (Y)')\nax.set_zlabel('lumbar_lordosis_angle (Z)')\nplt.legend()\nplt.show()\n\n\n#LINEAR REGRESSION R SQUARE\nfrom sklearn.metrics import r2_score\nz_head = lr.predict(xy_values)\nprint(\"r_score: \", r2_score(z_values, z_head))","ef434101":"#%% DESICION TREE REGRESSION\nfrom sklearn.tree import DecisionTreeRegressor\ntree_reg = DecisionTreeRegressor()\n\n#REGRESSION WITH DECISION THREE \ntree_reg.fit(xy_values, z_values)\n\n#R SQUARE\nz_head = lr.predict(xy_values)\nprint(\"r_score: \", r2_score(z_values, z_head))","dd123cb9":"#PLOT SCATTER VALUES\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x_values, y_values, z_values, c='r', marker='o', alpha=0.3)\n\n\n\n#RANDOM FOREST ALGORITHM IMPLEMENT\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 100, random_state = 42) #(n_ estimators = number of tree)\nrf.fit(xy_values, z_values.ravel())\n\n#PREDICT\nz_head = lr.predict(xy_for_predict)\n\n#PLOT FOREST RANDOM REGRESSOR LINE\nax.plot(ax_values, z_head, ax_values, c='b', label=\"Random Forest Regressor(z_head) : lumbar_lordosis_angle\")\nax.set_xlabel('pelvic_incidence (X)')\nax.set_ylabel('pelvic_tilt numeric (Y)')\nax.set_zlabel('lumbar_lordosis_angle (Z)')\nplt.legend()\nplt.show()\n\n\n\n#R_SQUARE\nz_head = rf.predict(xy_values)\nprint(\"r_score: \", r2_score(z_values, z_head))","ffce0956":"<a id=\"6\"><\/a>\n**REGRESSION**","349c066e":"<a id=\"3\"><\/a>\n**2. Normalization**","f698323c":"<a id=\"7\"><\/a>\n**1. MULTIPLE LINEAR REGRESSION**","4d32f374":"<a id=\"2\"><\/a>\n**1. Import Data**","0f260ac0":"<a id=\"4\"><\/a>\n**3. Show the ratio of normal\/abnormal as a pie chart **","8a7bd225":"**Goals : **\n\n1- Learn lumbar_lordosis_angle(Z) values according to pelvic_incidence(X) and pelvic_tilt numeric(Y) values.\n\n2- Predict the Z_HEAD values corresponding to the pelvic incidence(X) and pelvic tilt numeric(Y) values given.\n\n3- Plot values and predict line(Z_HEAD)\n\n4- Find r_square\n\n","8dd6eda1":"<a id=\"5\"><\/a>\n**4. Show the values spreading according to their class**","0a132937":"**[DATA ANALYSIS](#1)**\n1. [Import Data](#2)\n2. [Normalization](#3)\n3. [Show the ratio of normal\/abnormal as a pie chart](#4)\n4. [Show the values spreading according to their class](#5)\n\n**[REGRESSION](#6)**\n1. [MULTIPLE LINEAR REGRESSION](#7)\n2. [DESICION TREE REGRESSION](#8)\n3. [RANDOM FOREST REGRESSION](#9)\n\n","9dd12ec5":"<a id=\"9\"><\/a>\n**3. RANDOM FOREST REGRESSION**","4b6eddcc":"<a id=\"8\"><\/a>\n**2.  DESICION TREE REGRESSION**","2f3234d3":"<a id=\"1\"><\/a>\n**DATA ANALYSIS**"}}