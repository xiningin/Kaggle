{"cell_type":{"1aec01ee":"code","40a46374":"code","11f1c792":"code","d02d14ba":"code","c085d4e2":"code","4778ab43":"code","4ff63346":"code","bde194a1":"code","91ab7dd0":"code","855bf10f":"code","80e0f502":"code","0dec738b":"code","21a7e9ec":"code","021e7613":"code","32801a48":"code","197eb5fe":"code","660006c1":"code","43880c91":"code","9c0c1330":"code","d02656bf":"code","26c32b80":"code","ce5e9f4e":"code","07b5b32d":"code","efad8724":"code","1de48543":"code","f3fa7e01":"code","79f40a8a":"code","dc854c0b":"code","b711e918":"code","32f1dd7b":"code","b62abe42":"code","6c466b6f":"code","a95460eb":"code","cb6a0cc5":"code","ee7d3f67":"code","fe24be45":"code","60f00f04":"code","42f43ff7":"code","63686a4a":"code","0900c674":"code","04183b62":"code","e975fbd4":"code","724539a0":"code","2b653ed4":"code","17affb1f":"code","2c50da73":"code","c1f586f6":"code","f409da8b":"code","7c64cc97":"code","34257820":"code","f57ddc91":"code","c3fa1240":"code","1548f7c2":"code","8f303109":"code","4bcf2528":"code","464ab984":"code","52570e54":"code","50bc469f":"code","3f1295c3":"code","1ac8420c":"code","4f17afa4":"code","8f6aafb2":"code","ae809870":"code","0004a1cc":"code","1c5c8eac":"code","db430aa3":"code","47ad4114":"code","5bf53461":"code","308b79b3":"code","781f17d4":"code","b114cbed":"code","1961cee3":"code","9f4c5ad7":"code","dbb2ba72":"code","daeb07bf":"code","2d808d8e":"code","97d6be04":"code","02bcd89d":"code","98b09e6a":"code","0af52cc8":"code","0f394aca":"code","7e0a7a9e":"code","d1d11dec":"code","edcc6b85":"code","aeac0e1a":"code","9594f458":"code","cacdb971":"code","19396fc8":"code","bf77d2b0":"code","b3aa4a12":"code","c50f8e07":"code","da0d2869":"code","ce7cf85a":"code","aaaaddcf":"code","884fe0ee":"code","eb949cee":"code","750394aa":"code","5327c980":"code","6b19c79f":"code","6355f4df":"code","6131a116":"code","ad43b87f":"code","6314720e":"code","f25a232b":"code","33832c33":"code","6fd76cc7":"markdown","b829e7bf":"markdown","063a7f04":"markdown","42274ffc":"markdown","ecebf9cd":"markdown","7c81c584":"markdown","abf6dadb":"markdown","9c1a056e":"markdown","43ec7e53":"markdown","2cefadde":"markdown","61ae5a3b":"markdown","a6d4054a":"markdown","e64159a6":"markdown","8b207a50":"markdown","aa1d5af9":"markdown","d6ff3c72":"markdown","d812c268":"markdown","c44a142f":"markdown","38e9a1ef":"markdown","406bef78":"markdown","e99b871f":"markdown","e45f0173":"markdown","fb2fb47e":"markdown","b6f0dba5":"markdown","8d768e74":"markdown","0723c82c":"markdown"},"source":{"1aec01ee":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.model_selection import GridSearchCV, cross_val_score","40a46374":"pd.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.5f' % x)","11f1c792":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf = train.append(test).reset_index(drop=True)\ndf.head()","d02d14ba":"def check_df(dataframe, head=5):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(head))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(head))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)","c085d4e2":"check_df(df)","4778ab43":"df.isnull().sum()","4ff63346":"df.isnull().sum().sum()","bde194a1":"df[\"MSZoning\"].describe()\ndf['MSZoning'] = df.groupby('MSSubClass')['MSZoning'].apply(lambda x: x.fillna(x.mode()[0]))\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])","91ab7dd0":"df[\"TotalBsmtSF\"].value_counts()","855bf10f":"df[df[\"TotalBsmtSF\"]==0]\nnan_to_zero=[]\nnan_to_zero.append(\"TotalBsmtSF\")","80e0f502":"nan_to_zero.append(\"LotFrontage\")","0dec738b":"nan_to_zero.append(\"Alley\")","21a7e9ec":"def twice_col(df,col1,col2):\n    n=df[col1].unique().tolist()\n    l=len(n)\n    n1=df[col2].unique().tolist()\n    l1=len(n1)\n    for i in n:\n        for j in range(l):\n            for z in n1:\n                for t in range(l1):\n                    df.loc[(df[col1] == n[j]) & (df[col2] == n1[t]), str(col1) + \"_\" + str(col2)]=str(n[j]) + str(n1[t])","021e7613":"twice_col(df,\"Heating\",\"Electrical\")","32801a48":"df[df[\"Utilities\"].isna()]['Heating_Electrical']\ndf.groupby(['Heating_Electrical'])[\"Utilities\"].agg(pd.Series.mode)\ndf[\"Utilities\"].value_counts()\ndf[\"Utilities\"]=df[\"Utilities\"].fillna(\"AllPub\")\ndf[\"Utilities\"].isnull().sum()","197eb5fe":"df[['PoolArea',\"PoolQC\",]].head()\nnan_to_zero.append(\"PoolQC\")\nnan_to_zero.append('PoolArea')","660006c1":"nan_to_zero.append(\"MiscFeature\")\nnan_to_zero.append(\"Fence\")\nnan_to_zero.append(\"FireplaceQu\")","43880c91":"nan_to_zero.append(\"GarageQual\")\nnan_to_zero.append(\"GarageFinish\")","9c0c1330":"df[df[\"GarageYrBlt\"].isnull()][[\"GarageYrBlt\",\"GarageType\"]]\ndf.loc[df[\"GarageYrBlt\"].isnull(),\"GarageType\"]=\"None\"","d02656bf":"nan_to_zero.append(\"GarageYrBlt\")\ndf[\"BsmtExposure\"].value_counts()\ndf[\"BsmtExposure\"].isnull().sum()\nnan_to_zero.append(\"BsmtExposure\")","26c32b80":"nan_to_zero.append(\"BsmtQual\")\nnan_to_zero.append(\"BsmtFinType1\")\nnan_to_zero.append(\"BsmtFinType2\")","ce5e9f4e":"df.loc[df[\"MasVnrType\"].isnull(),\"MasVnrArea\"].notnull()\ndf.loc[df[\"MasVnrArea\"].isnull(),\"MasVnrType\"]\ndf.loc[df[\"MasVnrArea\"].isnull(),\"MasVnrType\"]=\"None\"\ndf[df[\"MasVnrType\"]==\"None\"][\"MasVnrArea\"]","07b5b32d":"nan_to_zero.append(\"MasVnrArea\")\nnan_to_zero.append(\"GarageCond\")\nnan_to_zero.append(\"BsmtFullBath\")\nnan_to_zero.append(\"BsmtHalfBath\")","efad8724":"for i in nan_to_zero:\n    if i != \"SalePrice\":\n        print(df[i].head())","1de48543":"for col in nan_to_zero:\n    if df[col].dtype == \"O\":\n        df.loc[df[col].isnull(), col] = \"None\"\n    else:\n        df.loc[df[col].isnull(), col] = 0","f3fa7e01":"df.isnull().sum()","79f40a8a":"na_cols = [col for col in df.columns if df[col].isnull().sum() > 0]","dc854c0b":"for i in na_cols:\n    if i != \"SalePrice\":\n        print(df[i].head())","b711e918":"for col in na_cols:\n    if col!=\"SalePrice\":\n        if df[col].dtype==\"O\":\n            df.loc[df[col].isnull(), col] = \"None\"\n        else:\n            df.loc[df[col].isnull(),col]=0","32f1dd7b":"df['YearBuilt'].describe()\ndf[\"GarageYrBlt\"].describe()","b62abe42":"df.loc[df[\"GarageYrBlt\"]==2207]","6c466b6f":"df.loc[df[\"GarageYrBlt\"]==2207,\"GarageYrBlt\"]=2007","a95460eb":"sns.boxplot(df[\"SalePrice\"])\nplt.show()","cb6a0cc5":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n    return cat_cols, num_cols, cat_but_car","ee7d3f67":"cat_cols, num_cols, cat_but_car = grab_col_names(df)","fe24be45":"def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    quartile1 = dataframe[col_name].quantile(q1)\n    quartile3 = dataframe[col_name].quantile(q3)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","60f00f04":"for i in num_cols:\n    outlier_thresholds(df, i, q1=0.1, q3=0.90)","42f43ff7":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","63686a4a":"for i in num_cols:\n    replace_with_thresholds(df,i)","0900c674":"sns.boxplot(df[\"SalePrice\"])\nplt.show()","04183b62":"def find_correlation(dataframe, numeric_cols, corr_limit=0.60):\n    high_correlations = []\n    low_correlations = []\n    for col in numeric_cols:\n        if col == \"SalePrice\":\n            pass\n        else:\n            correlation = dataframe[[col, \"SalePrice\"]].corr().loc[col, \"SalePrice\"]\n            print(col, correlation)\n            if abs(correlation) > corr_limit:\n                high_correlations.append(col + \": \" + str(correlation))\n            else:\n                low_correlations.append(col + \": \" + str(correlation))\n    return low_correlations, high_correlations","e975fbd4":"find_correlation(df, num_cols)","724539a0":"df[\"newww\"]=df[\"TotalBsmtSF\"]*df[\"OverallQual\"]\ndf[\"NEW_area\"]=df['1stFlrSF']+df[\"2ndFlrSF\"]","2b653ed4":"def new_sorting(df,col,old,new):\n    maps={}\n    n=len(old)\n    for i in range(n):\n        maps.setdefault(old[i],new[i])\n    df[col] = df[col].map(maps).astype(int)","17affb1f":"df[\"Functional\"].head()\ndf[\"Functional\"].unique()\ndf.groupby([\"Functional\"])[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"Functional\"].value_counts()\nnew_sorting(df,\"Functional\",['Typ', 'Min1', 'Maj1', 'Min2', 'Mod', 'Maj2', 'Sev', 'None'],[6,5,5,4,5,5,3,1])","2c50da73":"df[\"new_sey\"]=df[\"YrSold\"]-df[\"YearBuilt\"]\ndf[\"new_sey2\"]=df[\"YrSold\"]-df[\"YearRemodAdd\"]\n\ndf[\"MoSold\"]=[int(i) for i in df[\"MoSold\"]]\ndf[\"MoSold\"].describe()","c1f586f6":"for i in range(df.shape[0]):\n    if df.loc[i,\"MoSold\"] in [12,1,2]:\n        df.loc[i,\"season\"]=1\n    elif df.loc[i,\"MoSold\"] in [3,4,5]:\n        df.loc[i, \"season\"] = 2\n    elif df.loc[i,\"MoSold\"] in [6,7,8]:\n        df.loc[i, \"season\"] = 3\n    else:\n        df.loc[i, \"season\"] = 4","f409da8b":"df[\"new\"]=df[\"TotRmsAbvGrd\"]+df[\"FullBath\"]+df[\"HalfBath\"]+df[\"BsmtFullBath\"]+df[\"BsmtHalfBath\"]","7c64cc97":"def generate(df,c,a,b,t,y,y1,y2):\n    df.loc[(df[c] < a), t] = y\n    df.loc[(df[c] >= a) & (df[c] < b), t] = y1\n    df.loc[(df[c] >= b), t] = y2\n    return df[t]","34257820":"df[\"new2\"]=df[\"BsmtUnfSF\"]\/df[\"TotalBsmtSF\"]\ndf[\"new2\"].describe()\ngenerate(df,\"new2\",0.21,0.47,\"new2_new\",3,2,1)","f57ddc91":"df[\"BsmtFinType1\"].unique()","c3fa1240":"new_sorting(df,\"BsmtFinType1\",['GLQ', 'ALQ', 'Unf', 'Rec', 'BLQ', 'None', 'LwQ'],[5,4,1,3,3,0,2])\nnew_sorting(df,\"BsmtFinType2\",['GLQ', 'ALQ', 'Unf', 'Rec', 'BLQ', 'None', 'LwQ'],[5,4,1,3,3,0,2])\ndf[\"new3\"]=df[\"BsmtFinType1\"]+df[\"BsmtFinType2\"]","1548f7c2":"df[\"new4\"]=df[\"GrLivArea\"]\/df[\"LotArea\"]","8f303109":"df[\"new5\"]=df[\"YrSold\"]-df[\"GarageYrBlt\"]\ndf[\"new7\"]=df[\"GarageCars\"]*df[\"GarageArea\"]\ndf[\"new8\"]=df['OverallQual']*df['OverallCond']","4bcf2528":"df[\"new9\"]=df[\"TotRmsAbvGrd\"]+df[\"HalfBath\"]+df['FullBath']","464ab984":"df[\"new10\"]=(df['BsmtFinSF1']+df[\"BsmtFinSF2\"])\/df[\"TotalBsmtSF\"]","52570e54":"generate(df,\"new10\",0.41,0.71,\"new10_new\",1,2,3)","50bc469f":"df[\"new11\"]=df[\"KitchenAbvGr\"]+df[\"BedroomAbvGr\"]","3f1295c3":"new_sorting(df,\"PavedDrive\",[\"Y\",\"P\",\"N\"],[3,2,1])\ndf[\"PavedDrive\"]\ndf[\"new_quality\"]=df['WoodDeckSF']+df['OpenPorchSF']+df['EnclosedPorch']+df['3SsnPorch']+df['ScreenPorch']+df['PoolArea']","1ac8420c":"new_sorting(df,\"LotShape\",[\"Reg\",\"IR1\",\"IR2\",\"IR3\"],[4,3,2,1])\nnew_sorting(df,\"LandContour\",[\"Lvl\",\"Bnk\",\"HLS\",\"Low\"],[4,3,2,1])\ndf['LotConfig'].unique()\nnew_sorting(df,\"LotConfig\",['Inside','Corner','CulDSac','FR2','FR3'],[2,3,1,4,5])","4f17afa4":"df['BldgType'].unique()\nnew_sorting(df,'BldgType',['1Fam', '2fmCon', 'Duplex', 'TwnhsE', 'Twnhs'],[1,2,2,3,3])","8f6aafb2":"df.groupby(\"HouseStyle\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"HouseStyle\"].unique()","ae809870":"new_sorting(df,\"HouseStyle\",['2Story', '1Story', '1.5Fin', '1.5Unf', 'SFoyer', 'SLvl', '2.5Unf',\n       '2.5Fin'],[7,6,3,1,2,5,4,8])\ndf['GarageType'].unique()\nnew_sorting(df,'GarageType',['Attchd', 'Detchd', 'BuiltIn', 'CarPort', 'None', 'Basment',\n       '2Types'],[3,5,2,1,0,4,5])","0004a1cc":"df[\"GarageFinish\"].unique()","1c5c8eac":"new_sorting(df,\"GarageFinish\",['RFn', 'Unf', 'Fin', 'None']\n,[2,1,3,0])","db430aa3":"df.loc[(df[df[\"KitchenQual\"]==\"None\"].index),\"KitchenQual\"]=\"Po\"\ndf.loc[(df[df['BsmtQual']==\"None\"].index),'BsmtQual']=\"Po\"\ndf.loc[(df[df[\"BsmtExposure\"]==\"None\"].index),\"BsmtExposure\"]=\"Po\"\ndf.loc[(df[df[\"PoolQC\"]==\"None\"].index),\"PoolQC\"]=\"Po\"","47ad4114":"old=[\"Ex\",\"Gd\",\"TA\",\"Fa\",\"Po\",\"NA\",\"No\",\"Av\",\"Mn\",'None',0]\nnew=[5,4,3,2,1,0,0,2,1,0,0]\nfor col in [\"ExterCond\",\"HeatingQC\",\"KitchenQual\",\"PoolQC\",\"FireplaceQu\",'BsmtCond','BsmtQual',\"BsmtExposure\",\"ExterQual\",\"GarageQual\",\"GarageCond\"]:\n    new_sorting(df,col,old,new)","5bf53461":"df[\"BsmtFinType1\"].value_counts()\ndf.groupby([\"BsmtFinType1\"])[\"SalePrice\"].mean().sort_values(ascending=False)\ndf.groupby([\"BsmtFinType2\"])[\"SalePrice\"].mean().sort_values(ascending=False)","308b79b3":"df['PoolArea']=[1 if i>0 else 0 for i in df['PoolArea']]\ndf['GarageCars']=[1 if i>0 else 0 for i in df['GarageCars']]\ndf['Fireplaces']=[1 if i>0 else 0 for i in df['Fireplaces']]\ndf[\"CentralAir\"]=[1 if i==\"Y\" else 0 for i in df[\"CentralAir\"]]\ndf[\"MiscFeature\"]=[0 if i==\"None\" else 1 for i in df[\"MiscFeature\"]]","781f17d4":"df.groupby(\"MSZoning\")[[\"SalePrice\"]].mean()\ndf[\"MSZoning\"].unique()\nnew_sorting(df,\"MSZoning\",[\"C (all)\",'RL','RM','FV','RH'],[1,5,3,4,2])\nnew_sorting(df,\"Alley\",[\"Grvl\",\"Pave\",'None'],[1,2,0])","b114cbed":"df[\"Utilities\"].unique()\ndf[\"Utilities\"]=[2 if i=='AllPub' else 1 for i in df[\"Utilities\"]]","1961cee3":"df[\"LandSlope\"].unique()\nnew_sorting(df,\"LandSlope\",[\"Gtl\",\"Mod\",'Sev'],[3,2,1])\ndf.groupby([\"Neighborhood\"])[\"SalePrice\"].mean().sort_values(ascending=False)\ndf[\"Neighborhood\"].unique()\nold=['CollgCr', 'Veenker', 'Crawfor', 'NoRidge', 'Mitchel', 'Somerst',\n       'NWAmes', 'OldTown', 'BrkSide', 'Sawyer', 'NridgHt', 'NAmes',\n       'SawyerW', 'IDOTRR', 'MeadowV', 'Edwards', 'Timber', 'Gilbert',\n       'StoneBr', 'ClearCr', 'NPkVill', 'Blmngtn', 'BrDale', 'SWISU',\n       'Blueste']\nnew=[5,9,6,12,4,8,5,2,2,3,11,4,5,1,1,2,9,5,10,7,4,5,1,4,3]\nnew_sorting(df,\"Neighborhood\",old,new)","9f4c5ad7":"df[\"newfeac\"]=df['KitchenAbvGr']*df['KitchenQual']\ndf[\"newfeac2\"]=df['Fireplaces']*df['FireplaceQu']\ndf[\"Fence\"].unique()\nnew_sorting(df,\"Fence\",['None', 'MnPrv', 'GdWo', 'GdPrv', 'MnWw'],[0,1,2,2,1])","dbb2ba72":"df[\"Street\"]=[0 if i == \"Gravel\" else 1 for i in df[\"Street\"]]","daeb07bf":"new_sorting(df,\"Heating\",['GasA', 'GasW', 'Grav', 'Wall', 'OthW', 'Floor'],[3,3,1,2,3,1])","2d808d8e":"df[\"RoofStyle\"].unique()\nnew_sorting(df,\"RoofStyle\",['Gable', 'Hip', 'Gambrel', 'Mansard', 'Flat', 'Shed']\n,[4,2,2,1,3,1])","97d6be04":"df.groupby(\"RoofMatl\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"RoofMatl\"].unique()\nnew_sorting(df,\"RoofMatl\",['CompShg', 'WdShngl', 'Metal', 'WdShake', 'Membran', 'Tar&Grv',\n       'Roll', 'ClyTile'],[3,6,4,5,5,4,1,2])","02bcd89d":"df[\"Electrical\"].unique()\ndf.groupby(\"Electrical\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)","98b09e6a":"new_sorting(df,\"Electrical\",['SBrkr', 'FuseF', 'FuseA', 'FuseP', 'Mix', 'None'],[5,2,3,1,0,4])\ndf.groupby(\"SaleType\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"SaleType\"].value_counts()\ndf[\"SaleType\"].unique()","0af52cc8":"new_sorting(df,\"SaleType\",['WD', 'New', 'COD', 'ConLD', 'ConLI', 'CWD', 'ConLw', 'Con', 'Oth',\n       'None'],[5,8,4,2,6,7,3,9,1,0])","0f394aca":"df.groupby(\"SaleCondition\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"SaleCondition\"].value_counts()\ndf[\"SaleCondition\"].unique()\ndf.head()\nnew_sorting(df,\"SaleCondition\",['Normal', 'Abnorml', 'Partial', 'AdjLand', 'Alloca', 'Family'],[4,2,5,1,3,2])","7e0a7a9e":"df.groupby(\"Foundation\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\ndf[\"Foundation\"].unique()\nnew_sorting(df,\"Foundation\",['PConc', 'CBlock', 'BrkTil', 'Wood', 'Slab', 'Stone'],[5,2,1,4,0,3])\n\ndf[\"MasVnrType\"].unique()\ndf.groupby(\"MasVnrType\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)\n# ['BrkFace', 'None', 'Stone', 'BrkCmn']\nnew_sorting(df,\"MasVnrType\",['BrkFace', 'None', 'Stone', 'BrkCmn'],[3,2,4,1])\ndf[\"Condition1\"].unique()\nnew_sorting(df,\"Condition1\",['Norm', 'Feedr', 'PosN', 'Artery', 'RRAe', 'RRNn', 'RRAn', 'PosA',\n       'RRNe'],[2,1,3,1,1,3,2,3,2])\nnew_sorting(df,\"Condition2\",['Norm', 'Feedr', 'PosN', 'Artery', 'RRAe', 'RRNn', 'RRAn', 'PosA',\n       'RRNe'],[2,1,3,1,1,3,2,3,2])","d1d11dec":"df[\"Exterior1st\"].value_counts()\ndf[\"Exterior1st\"].unique()\ndf.groupby(\"Exterior1st\")[[\"SalePrice\"]].mean().sort_values(by=\"SalePrice\",ascending=False)","edcc6b85":"new_sorting(df,\"Exterior1st\",['VinylSd', 'MetalSd', 'Wd Sdng', 'HdBoard', 'BrkFace', 'WdShing',\n       'CemntBd', 'Plywood', 'AsbShng', 'Stucco', 'BrkComm', 'AsphShn',\n       'Stone', 'ImStucc', 'CBlock'],[7,3,3,4,6,3,8,5,2,4,1,2,9,10,2])","aeac0e1a":"df.loc[(df[\"Exterior2nd\"]==\"Other\"),\"Exterior2nd\"]='ImStucc'\nnew_sorting(df,\"Exterior2nd\",['VinylSd', 'MetalSd', 'Wd Shng', 'HdBoard', 'Plywood', 'Wd Sdng',\n       'CmentBd', 'BrkFace', 'Stucco', 'AsbShng', 'Brk Cmn', 'ImStucc',\n       'AsphShn', 'Stone', 'CBlock'],[7,3,3,4,5,3,8,6,4,2,1,10,2,9,2])","9594f458":"df.head()","cacdb971":"check_df(df)","19396fc8":"useless_cols = [col for col in cat_cols if df[col].nunique() == 1 or\n                (df[col].nunique() == 2 and (df[col].value_counts() \/ len(df) <= 0.01).any(axis=None))]\n\ncat_cols = [col for col in cat_cols if col not in useless_cols]\n\n\nfor col in useless_cols:\n    df.drop(col, axis=1, inplace=True)","bf77d2b0":"df.drop(\"Heating_Electrical\",axis=1,inplace=True)","b3aa4a12":"cat_cols, num_cols, cat_but_car = grab_col_names(df)\ncat_cols = cat_cols + cat_but_car","c50f8e07":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","da0d2869":"df = one_hot_encoder(df, cat_cols, drop_first=True)\n\ncat_cols, num_cols, cat_but_car = grab_col_names(df)\n\nuseless_cols_new = [col for col in cat_cols if (df[col].value_counts() \/ len(df) <= 0.01).any(axis=None)]","ce7cf85a":"df[useless_cols_new].head()","aaaaddcf":"train_df = df[df['SalePrice'].notnull()]\ntest_df = df[df['SalePrice'].isnull()].drop(\"SalePrice\", axis=1)\ny = np.log1p(train_df['SalePrice'])\nX = train_df.drop([\"Id\", \"SalePrice\"], axis=1)","884fe0ee":"models = [('LR', LinearRegression()),\n          (\"Ridge\", Ridge()),\n          (\"Lasso\", Lasso()),\n          (\"ElasticNet\", ElasticNet()),\n          ('KNN', KNeighborsRegressor()),\n          ('CART', DecisionTreeRegressor()),\n          ('RF', RandomForestRegressor()),\n          ('SVR', SVR()),\n          ('GBM', GradientBoostingRegressor()),\n          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n          (\"LightGBM\", LGBMRegressor()),\n          (\"CatBoost\", CatBoostRegressor(verbose=False))]","eb949cee":"for name, regressor in models:\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")","750394aa":"lgbm_model = LGBMRegressor(random_state=46)\n\nrmse = np.mean(np.sqrt(-cross_val_score(lgbm_model,\n                                        X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n\n\nlgbm_params = {\"learning_rate\": [0.01,0.02,0.03,0.05,0.1, 0.2],\n               \"n_estimators\": [100,200,300,500,1000,1200,1500],\n               \"colsample_bytree\": [0.2,0.3,0.5, 0.7,0.8,0.9,1]}\n\n\nlgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=3,\n                            n_jobs=-1,\n                            verbose=True).fit(X, y)\n","5327c980":"final_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X, y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(final_model, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n\nrmse","6b19c79f":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({'Value': model.feature_importances_, 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                     ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')","6355f4df":"plot_importance(final_model, X, 20)","6131a116":"def num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)","ad43b87f":"feature_imp = pd.DataFrame({'Value': final_model.feature_importances_, 'Feature': X.columns})\n\nfeature_imp[feature_imp[\"Value\"] > 0].shape\n\nfeature_imp[feature_imp[\"Value\"] < 1].shape\n\n\nzero_imp_cols = feature_imp[feature_imp[\"Value\"] < 1][\"Feature\"].values\n","6314720e":"selected_cols = [col for col in X.columns if col not in zero_imp_cols]","f25a232b":"lgbm_model = LGBMRegressor(random_state=46)\n\nlgbm_params = {\"learning_rate\": [0.01,0.02,0.03,0.05,0.1, 0.2],\n               \"n_estimators\":  [100,200,300,500,1000,1200,1500],\n               \"colsample_bytree\": [0.2,0.3,0.5, 0.7,0.8,0.9,1]}\n\nlgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=3,\n                            n_jobs=-1,\n                            verbose=True).fit(X[selected_cols], y)\n\n\nfinal_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X[selected_cols], y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(final_model, X[selected_cols], y, cv=5, scoring=\"neg_mean_squared_error\")))","33832c33":"rmse","6fd76cc7":"\n\"TotalBsmtSF\" : It gives the total basement area. The nan values \u200b\u200bhere show that there is no basement in that house. It's not a missing observation. A list is created because there are many such variables. After examining all the columns, they are converted from nan to 0 with a for loop.","b829e7bf":"There is a noisy data in the year variable, when we look at the sales year of this observation, it is seen that it is 2007, most probably the garage construction year will be 2007, it will be converted.","063a7f04":"> Bu i\u015flem sonras\u0131nda \u00f6nem d\u00fczeylerine bak\u0131lan \u00f6zelliklerin \u00f6nemlileriyle tekrar bir model kurulur. Bu \u015fekilde hata azalt\u0131lmaya \u00e7al\u0131\u015f\u0131l\u0131r.","42274ffc":"> Ayn\u0131 \u015fekilde baz\u0131 columnlarda ise \u00e7eyreklik de\u011ferlerine g\u00f6re bir s\u0131ralama yap\u0131lmak istendi\u011finden ve bu i\u015flem bir\u00e7ok kez tekrarlanaca\u011f\u0131ndan b\u00f6yle bir fonksiyon olu\u015fturulur.","ecebf9cd":"> G\u00f6zlemlerdeki kategorik bilgi ta\u015f\u0131yan veriler say\u0131sal de\u011ferlere d\u00f6n\u00fc\u015ft\u00fcr\u00fcl\u00fcr b\u00f6ylelikle aralar\u0131nda ordinallik sa\u011flan\u0131r.Bu i\u015flem bir\u00e7ok column'a uygulanaca\u011f\u0131ndan ayn\u0131 i\u015flemleri tekrar etmemek ad\u0131na bir fonksiyon olu\u015fturulur.","7c81c584":"> Olu\u015fturulan yeni \u00f6zelliklerin \u00f6nem d\u00fczeylerine plot_importance fonksiyonuyla eri\u015filir","abf6dadb":"> Kategorik columnlar modele girebilmek i\u00e7in encoding i\u015flemine tabi tutulur.","9c1a056e":"\nImporting required libraries","43ec7e53":"Learn about data","2cefadde":"> Bir evde havuz varsa 1 d\u00f6nd\u00fcr\u00fcr yoksa 0 d\u00f6nd\u00fcr\u00fcr\nAyn\u0131 \u015fekilde garaj varsa 1 yoksa 0 d\u00f6nd\u00fcr\u00fcr.\nDi\u011fer feature'lar da ayn\u0131 mant\u0131kla olu\u015fturulur.","61ae5a3b":"\nHead is thrown to get information about the variables in the list and to access the type information.","a6d4054a":"> Kaliteli \u00f6zellikler \u00fcretebilmek i\u00e7in columnlar\u0131n saleprice ba\u011f\u0131ml\u0131 de\u011fi\u015fkeniyle olan korelasyonuna bak\u0131l\u0131r.","e64159a6":"> LightGBM ile hiperparametre optimizasyonu yap\u0131l\u0131r \u00f6rne\u011fin learning rate parametresine girilen bir\u00e7ok de\u011fer di\u011fer iki parametredeki de\u011ferlerin her biriyle i\u015fleme sokulur bunu sa\u011flayan GridSearchCV'dir ve en d\u00fc\u015f\u00fck hatay\u0131 veren parametre de\u011ferleri lgbm_best_params olarak atan\u0131r. Model en iyi parametrelerle tekrar kurulur ve rmse(hata de\u011feri) tekrar hesaplan\u0131r.","8b207a50":"\n\"PoolArea\" : The area measure of the pool. \"PoolQC\" : Information about the quality of the pool. Empty values \u200b\u200bin these variables show that there is no pool in that house and are added to the list in the same way.","aa1d5af9":"\nMerge the data set separated as test and train set","d6ff3c72":"\nPurpose: It is desired to carry out a machine learning project regarding the prices of different types of houses by using the dataset of each house's features and house prices.","d812c268":"> Gereksiz columnlar silinir.","c44a142f":"> GrLivArea : Oturma alan\u0131 metre karesi. (ya\u015fam alan\u0131)\nLotArea: Eve ait arsan\u0131n alan \u00f6l\u00e7\u00fcm\u00fcn\u00fc veriyor.\nBu \u00f6zellik de toplam ya\u015fam alan\u0131n\u0131n toplam evin alan\u0131na(arsa) oran\u0131n\u0131 veriyor.","38e9a1ef":"\nAnd empty values \u200b\u200bin columns with object type are filled with none, and blank values \u200b\u200bfor non-object columns are filled with 0.","406bef78":"> Roofstyle de\u011fi\u015fkeni \u00e7at\u0131lar\u0131n \u00f6zelliklerini belirtmektedir \u00e7at\u0131 g\u00f6rsellerine ve saleprice'a g\u00f6re ortalamalara bak\u0131ld\u0131\u011f\u0131nda bu \u015fekilde bir s\u0131ralama elde edilir.","e99b871f":" > Model kurulur.","e45f0173":"\nSince the test and train sets are combined, the sales values \u200b\u200bin the test set will be empty. Apart from that, it seems that there are more empty values \u200b\u200bin a few columns, and they are converted as well.","fb2fb47e":"Null value check","b6f0dba5":"Total number of nulls","8d768e74":"\nOutliers are suppressed.","0723c82c":"MSZoning: It gives the zoning classification. MSSubClass : It gives information about the style of the houses. We group the blank values \u200b\u200bin MSZoning according to the variable that gives information about the style of the houses and fill it with mode as it is a categorical variable. Because there is a relationship between the style of the houses and the purpose of their use, which makes sense."}}