{"cell_type":{"cbb95efd":"code","15e76466":"code","87477996":"code","6df5a7a9":"code","2d5dcf95":"code","508b7eb0":"code","f2ca2b02":"code","842be180":"code","32d23d2a":"code","6dac37f8":"code","8fdb1eca":"code","1e30f02e":"code","27ff73e2":"code","afd12eba":"code","ad503d2d":"code","caec89c7":"markdown","6efc2f35":"markdown","042ec6ec":"markdown","a803024e":"markdown","f7b31eb5":"markdown"},"source":{"cbb95efd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","15e76466":"#Importing the dataset\ndata = pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/train.csv')\ndata.head()","87477996":"pd.set_option('display.max_columns', None)\ndata.describe()","6df5a7a9":"#Correlation Plot for numerical columns\ncols = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways', \n        'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points',]\ncorr = data[cols].corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(corr, annot = True, cmap = 'coolwarm')\nplt.show()","2d5dcf95":"#Highly correlated Variables\nunstack = corr.unstack()\nunstack = unstack.sort_values(kind=\"quicksort\")\nunstack[((unstack > 0.6) | (unstack < -0.6)) & (unstack != 1)]","508b7eb0":"#Visualizing Numerical Columns by Cover type\n#Slope, Horizontal distance to hydrology, Vertical distance to hydrology, Horizontal distance to roadways, Horizontal distance to fire points have notable variance for the cover type\nfor i in range(1,10):\n    sns.barplot(x = 'Cover_Type', y = cols[i], data = data,  estimator = np.average, palette='deep')\n    plt.show()","f2ca2b02":"#Converting the One-hot encoded wilderness area into a single column\ncols = ['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3','Wilderness_Area4']\nwild = data[cols]\nwild = pd.DataFrame(np.argmax(np.array(wild), axis = 1), columns=['Wilderness'])\nwild = pd.DataFrame(wild['Wilderness'].map(lambda Label: Label+1))\nwild.head()\n\n#Converting the One-hot encoded soil type into a single column\ncols = ['Soil_Type1', 'Soil_Type2', 'Soil_Type3','Soil_Type4', 'Soil_Type5', 'Soil_Type6', 'Soil_Type7', 'Soil_Type8','Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12','Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16','Soil_Type17', 'Soil_Type18', 'Soil_Type19', 'Soil_Type20','Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24','Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28','Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32','Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36','Soil_Type37', 'Soil_Type38', 'Soil_Type39', 'Soil_Type40']\nsoil = data[cols]\nsoil = pd.DataFrame(np.argmax(np.array(soil), axis = 1), columns=['Soil_Type'])\nsoil = pd.DataFrame(soil['Soil_Type'].map(lambda Label: Label+1))\n\n#Concatenating Wilderness and Soiltype table with the main table\ncols = ['Elevation', 'Aspect', 'Slope','Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology','Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon','Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points', 'Cover_Type']\ndata_ = data[cols]\ndata_ = pd.concat([data_,wild,soil], axis = 1)\ndata_.head()","842be180":"plt.figure(figsize = (8,4))\nsns.countplot(x = 'Wilderness', data = data_, hue = 'Cover_Type', palette='deep')\nplt.legend(bbox_to_anchor = (1.05,1), loc = 2, borderaxespad = 0)\nplt.show()","32d23d2a":"plt.figure(figsize = (25,8))\nsns.countplot(x = 'Soil_Type', data = data_, hue = 'Cover_Type')\nplt.show()","6dac37f8":"#Removing Soil type 9 and Soil type 15\ndata_ = data.drop(['Id','Soil_Type9','Soil_Type15','Cover_Type'],axis = 1)\n\n#Scaling\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(data_)\n\nX = pd.DataFrame(scaled_data, columns = data_.columns)\ny = data['Cover_Type']","8fdb1eca":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n#Fitting the model\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.3, random_state=1)\nlogit = LogisticRegression(multi_class='multinomial', solver = 'lbfgs', max_iter = 500)\nlogit.fit(X_train, y_train)","1e30f02e":"from sklearn.metrics import accuracy_score, confusion_matrix\n\n#Prediction\npred = logit.predict(X_test)\n\n#Evaluation\naccuracy_score(y_test, pred)","27ff73e2":"from sklearn.ensemble import RandomForestClassifier\n\n#Fitting the model\nrfc = RandomForestClassifier(n_estimators=500)\nrfc.fit(X_train, y_train)","afd12eba":"#Prediction\npred = rfc.predict(X_test)\n\n#Evaluation\nconfusion_matrix(y_test, pred)","ad503d2d":"accuracy_score(y_test, pred)","caec89c7":"**Random Forest**","6efc2f35":"From the table above it is clear that there are no data in Soil type 9 and Soil type 15.","042ec6ec":"**Multinomial Logit**","a803024e":"**Exploratory Data Analysis**","f7b31eb5":"**Data Preparation**"}}