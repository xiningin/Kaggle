{"cell_type":{"19c0a794":"code","c0994fad":"code","e9ccbd73":"code","4eb9f90e":"code","a8e96786":"code","1697193b":"code","4db32921":"code","cf3e3d01":"code","6bc43acd":"code","4c71d5b4":"code","1f1e4ebc":"code","699aea55":"code","9a6d54d1":"code","632e7d18":"code","4e41842a":"code","545d8a96":"code","69d3abf1":"code","f65e1baa":"markdown","32c877c7":"markdown","98972996":"markdown","befcfc47":"markdown","56509486":"markdown","27d6914e":"markdown","fdd38667":"markdown","9a926626":"markdown","0329d113":"markdown","bc1e6162":"markdown"},"source":{"19c0a794":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0994fad":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense,RepeatVector\nfrom keras.layers import Flatten\nfrom keras.layers import TimeDistributed\nfrom keras.layers.convolutional import Conv1D\nfrom keras.layers.convolutional import MaxPooling1D\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\nimport os\nprint(os.listdir(\"..\/input\"))","e9ccbd73":"data=pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')","4eb9f90e":"data['date'] = pd.to_datetime(data['date'])\ndata.info()","a8e96786":"data.head()","1697193b":"data.set_index(['date'],inplace=True)\ndata = data['item_cnt_day'].resample('D').sum()\ndf=pd.DataFrame(data)","4db32921":"plt.figure(figsize=(16,8))\ndf['item_cnt_day'].plot(color = 'G')\nplt.xlabel('Date')\nplt.ylabel('Number of Products Sold')\nplt.show()","cf3e3d01":"df_1=df.values\ndf_1=df_1.astype('float32')\n\nscaler = MinMaxScaler(feature_range=(-1,1))\nts = scaler.fit_transform(df_1)","6bc43acd":"df.info()","4c71d5b4":"timestep = 30\n\n\nX= []\nY=[]\n\nraw_data=ts\n\nfor i in range(len(raw_data)- (timestep)):\n    X.append(raw_data[i:i+timestep])\n    Y.append(raw_data[i+timestep])\n\n\nX=np.asanyarray(X)\nY=np.asanyarray(Y)\n\n\nk = 850\nXtrain = X[:k,:,:]  \nYtrain = Y[:k]    \nmodel = Sequential()\nmodel.add(Conv1D(filters=128, kernel_size=2, activation='relu', input_shape=(30, 1)))\nmodel.add(Conv1D(filters=128, kernel_size=2, activation='relu'))\nmodel.add(Conv1D(filters=128, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='sgd', loss='mse')\n# fit model\nmodel.fit(Xtrain, Ytrain, epochs=200, verbose=0)\n","1f1e4ebc":"Xtest = X[k:,:,:]  \nYtest= Y[k:]","699aea55":"preds = model.predict(Xtest)\npreds = scaler.inverse_transform(preds)\n\n\nYtest=np.asanyarray(Ytest)  \nYtest=Ytest.reshape(-1,1) \nYtest = scaler.inverse_transform(Ytest)\n\n\nYtrain=np.asanyarray(Ytrain)  \nYtrain=Ytrain.reshape(-1,1) \nYtrain = scaler.inverse_transform(Ytrain)\n\nmean_squared_error(Ytest,preds)","9a6d54d1":"from matplotlib import pyplot\npyplot.figure(figsize=(20,10))\npyplot.plot(Ytest, 'G')\npyplot.plot(preds, 'r')\npyplot.show()","632e7d18":"print(preds)","4e41842a":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\ntf.keras.losses.CategoricalCrossentropy(\n    from_logits=False,\n    label_smoothing=0,\n    reduction=\"auto\",\n    name=\"categorical_crossentropy\",\n)","545d8a96":"cce = tf.keras.losses.CategoricalCrossentropy()\ncce(Ytest, preds).numpy()","69d3abf1":"logit = model(Xtest)\nloss_value = loss_fn(Ytest, logit)\nloss_value\nY_test = tf.convert_to_tensor(Ytest)\n# print(model(Xtest))\nprint(Ytest)","f65e1baa":"# ***DEFINING THE LOSS FUNCTION***","32c877c7":"# ***PLOTTING THE CURVE FOR PREDICTIONS VS ACTUAL SALES ON TEST SET***","98972996":"# ***DEFINING OUR MODEL***","befcfc47":"# ***PLOTTING THE FIRST FIVE ROWS OF THE DATASET***","56509486":"# ***CHANGING THE TYPE OF X AND Y TO ARRAYS***","27d6914e":"# ***PRINTING THE PREDICTED VALUES***","fdd38667":"# ***CHANGING THE DATATYPE OF DATE COLUMN AND THEN PRINTING THE INFO***","9a926626":"# ***READING THE DATASET***","0329d113":"# ***CALCULATING THE LOSS***","bc1e6162":"# ***IMPORTING ALL THE REQUIRED MODULES***"}}