{"cell_type":{"00204410":"code","59b17463":"code","670d909b":"code","1b9c32d2":"code","83001d36":"code","ded75cd5":"code","fa6a0b1d":"code","1694cdcb":"code","2c70d720":"code","85ad0679":"code","6b30d201":"code","124f880a":"code","6fae1304":"code","149d0106":"code","93ed94b2":"code","91a4fbdf":"code","957daacd":"code","cf174836":"code","4e62db31":"code","a181ed6e":"code","5044dacc":"code","62a1038d":"code","391cd616":"code","fdacd6c8":"code","2507f03d":"code","ecf2031d":"code","08dececf":"code","7796bc96":"code","32dbc245":"code","97ec23e2":"code","775e4fc6":"code","bda66fad":"code","06198184":"code","d8d60762":"code","2df9fe00":"code","a87fa797":"code","12021f59":"code","9c70c9fb":"code","39670697":"code","b7885bf7":"code","a6fc99e1":"code","b286af12":"code","9a7bae5b":"code","7b680fee":"code","588d1940":"code","4a839305":"markdown"},"source":{"00204410":"!pip install pmdarima","59b17463":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go \nimport seaborn as sns\nimport statsmodels.api as sm\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nfrom pmdarima.pipeline import Pipeline\nfrom pmdarima.preprocessing import BoxCoxEndogTransformer\nimport pmdarima as pm\nfrom statsmodels.tsa.stattools import adfuller\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","670d909b":"calender= pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\ncalender.head(3)\n","1b9c32d2":"sales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsales.head(3)","83001d36":"sales_dept = sales.groupby('dept_id').sum()\nsales_dept.head(3)","ded75cd5":"sales_item = sales.groupby('item_id').sum()\nsales_item.head(3)","fa6a0b1d":"\nsales_cat = sales.groupby('cat_id').sum().T\nsales_cat.head(3)","1694cdcb":"sales_cat['days'] =  sales_cat.index\n\n# we got all of the Calender variables from columns\nsales_cat.days","2c70d720":"sales_store = sales.groupby('store_id').sum()\nsales_state = sales.groupby('state_id').sum()","85ad0679":"sales_calender = calender.iloc[:,[0,2,3,4,5,6,7]]\n\nsales_cat = pd.merge(sales_calender,sales_cat,how = 'inner', left_on = 'd', right_on = 'days')\n\nsales_cat['date'] = pd.to_datetime(sales_cat['date'])\nsales_cat = sales_cat.set_index('date')\n","6b30d201":"sales_cat = sales_cat.iloc[:,[-4,-3,-2]]\nsales_cat.head(3)","124f880a":"sales_cat.tail(3)","6fae1304":"fig = go.Figure(data = [\n    go.Scatter(y=sales_cat['2011-01':'2016-04'].FOODS, x=sales_cat.index, name= 'Foods'), \n          go.Scatter(y=sales_cat['2011-01':'2016-04'].HOBBIES, x=sales_cat.index, name = 'Hobbies'),\n          go.Scatter(y=sales_cat['2011-01':'2016-04'].HOUSEHOLD, x=sales_cat.index, name = 'Household')\n])\n\nfig.update_layout(title_text=\"Sales by Category\")\nfig.show()","149d0106":"sns.heatmap(sales_cat[['FOODS','HOBBIES','HOUSEHOLD']].corr(), annot = True,  cbar=False)","93ed94b2":"sales_cat_monthly = sales_cat.iloc[:,[0,1,2]].resample('M').sum()[2:-1] #mensal resampling\nsales_cat_weekly = sales_cat.iloc[:,[0,1,2]].resample('W').sum()[8:-1] #weekly resampling\nsales_cat_bimonthly = sales_cat.iloc[:,[0,1,2]].resample('2M').sum()[1:-1] #bimonthy resamply","91a4fbdf":"    lists = ['FOODS','HOBBIES','HOUSEHOLD']\n\n    for i in lists:\n        fig = go.Figure(data = [\n            go.Scatter(y = sales_cat_monthly[i],x = sales_cat_monthly[i].index,name = i)\n        ])\n        fig.update_layout(title_text=i)\n        fig.show()","957daacd":"#Decomposition","cf174836":" lists = ['FOODS','HOBBIES','HOUSEHOLD']\nprint('**************** Monthly *************')\nfor i in lists:\n    \n        sm.tsa.seasonal_decompose(sales_cat_monthly[i],period = 12).plot()\n","4e62db31":" lists = ['FOODS','HOBBIES','HOUSEHOLD']\nprint('**************** Weekly *************')\nfor i in lists:\n    \n        sm.tsa.seasonal_decompose(sales_cat_weekly[i],period = 12).plot()\n","a181ed6e":"# it was clearly observed that our series are Seasonal","5044dacc":"def acf_pacf(df,columns,lag):\n\n    plot_acf(df[columns],lags = lag,title = columns)\n    plot_pacf(df[columns],lags = lag, title = columns)\n    \n    \n    plt.show()","62a1038d":"for i in lists:\n    acf_pacf(sales_cat_monthly,i,12)","391cd616":"for i in lists:\n    acf_pacf(sales_cat_weekly,i,12)","fdacd6c8":"#it seems that i will continue on Monthly Series","2507f03d":"\n lists = ['FOODS','HOBBIES','HOUSEHOLD']\n    \nfor i in lists:\n     \n        print('P values for {} is = {}'.format(i,adfuller(sales_cat_monthly[i], autolag='AIC')[1]))  \n\n\n","ecf2031d":"# The Food is Stationary but the others need to be implement","08dececf":"sales_cat_monthly_food  = sales_cat_monthly.iloc[:,0]","7796bc96":" sales_cat_monthly = sales_cat_monthly.iloc[:,1:3]","32dbc245":"deneme = sales_cat_monthly.diff().dropna()","97ec23e2":"for i in ['HOBBIES','HOUSEHOLD']:\n    print('P values for {} is = {}'.format(i,adfuller(deneme[i], autolag='AIC')[1]))","775e4fc6":"#The food is stationary\nsales_cat_monthly_hobbies = deneme.iloc[:,0] ","bda66fad":"sales_cat_monthly_household = sales_cat_monthly.iloc[:,1]\n# we will get salesc_cat_monthly_household without transformation because with Log,diff() \n#and df.shift(1)\/df methods could not find p < 0.05","06198184":"#Let start with Food\nmodel_food = pm.auto_arima(sales_cat_monthly_food,\n                     seasonal = True,m = 12,\n                     d=1,D=1,\n                     start_p = 1,start_q = 1,\n                     end_p = 10, end_q =10,\n                     trace = True,\n                     error_action = 'ignore',\n                     suppress_warnings=True)\n\nmodel_food.summary()","d8d60762":"model_food = sm.tsa.statespace.SARIMAX(sales_cat_monthly_food,order = (2,1,0),seasonal_order = (1,1,1,12),trend = 'c')\nresults_food = model_food.fit()","2df9fe00":"results_food.plot_diagnostics()\nplt.show()\n","a87fa797":"food_predict = results_food.predict(start=50,end= 65)","12021f59":"fig = go.Figure(data = [\n    go.Scatter(y=sales_cat_monthly_food,x = sales_cat_monthly_food.index),\n    go.Scatter(y=food_predict,x= food_predict.index)\n])\n\nfig.update_layout(title_text= 'Food')\nfig.show()","9c70c9fb":"# We will continue for household but we will close difference\n#because we transformed it to stationary with diff() method\nmodel_hobbies = pm.auto_arima(sales_cat_monthly_hobbies,\n                     seasonal = True,m = 12,\n                     d=1,D=1,\n                     start_p = 1,start_q = 1,\n                     end_p = 10, end_q =10,\n                     trace = True,\n                     error_action = 'ignore',\n                     suppress_warnings=True)\n\nmodel_hobbies.summary()","39670697":"model_hobbies = sm.tsa.statespace.SARIMAX(sales_cat_monthly_hobbies,order = (2,1,1),seasonal_order = (0,1,1,12),trend = 'c')\nresults_hobbies = model_hobbies.fit()\nresults_hobbies.plot_diagnostics()\nplt.show()\n","b7885bf7":"hobbies_predict = results_hobbies.predict(start = 50, end = 65)\nvalues_predict = np.cumsum(hobbies_predict) + sales_cat_monthly.iloc[-1,0]","a6fc99e1":"\nsales_cat_monthly_hobbies = sales_cat_monthly.iloc[:,0]\n\nfig = go.Figure(data = [\n    go.Scatter(y=sales_cat_monthly_hobbies,x = sales_cat_monthly_hobbies.index),\n    go.Scatter(y=values_predict,x= values_predict.index)\n])\n\nfig.update_layout(title_text= 'Hobbies')\nfig.show()","b286af12":"\nmodel_household = pm.auto_arima(sales_cat_monthly_household,\n                     seasonal = True,m = 12,\n                     d=1,D=1,\n                     start_p = 1,start_q = 1,\n                     end_p = 10, end_q =10,\n                     trace = True,\n                     error_action = 'ignore',\n                     suppress_warnings=True)\n\nmodel_household.summary()","9a7bae5b":"model_households = sm.tsa.statespace.SARIMAX(sales_cat_monthly_household,order = (0,1,1),seasonal_order = (0,1,1,12),trend = 'c')\nresults_households = model_households.fit()\ndiff_forecast = results_households.predict(start = 50, end = 65)\n","7b680fee":"results_households.plot_diagnostics()\nplt.show()","588d1940":" # let the plot final chart\n\nfig = go.Figure(data = [\n    go.Scatter(y=sales_cat_monthly_household,x = sales_cat_monthly_household.index),\n    go.Scatter(y=diff_forecast,x= diff_forecast.index)\n])\n\nfig.update_layout(title_text= 'Household')\nfig.show()","4a839305":"Big part of Sales occur by Foods"}}