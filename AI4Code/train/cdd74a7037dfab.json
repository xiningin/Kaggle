{"cell_type":{"70dcaa4f":"code","b6baf0f8":"code","5aba3c7d":"code","9e23fac1":"code","0ca6a12b":"code","35ea2889":"code","148ffe89":"code","95ecf440":"code","4cad760e":"code","d69729bc":"code","7b88af1d":"code","a7e281b3":"code","b8368ea9":"code","ca085011":"code","dc220538":"code","aec448c3":"code","c0e6e630":"code","d3c147b2":"markdown","cc32870d":"markdown","9f389a91":"markdown","4fb02976":"markdown","7c036f33":"markdown","878b06d8":"markdown","8328d8f9":"markdown","6b59a665":"markdown","1893ef25":"markdown","53912687":"markdown","59433707":"markdown","34143cef":"markdown","3fe97ee3":"markdown","8dd10018":"markdown","fb62aea8":"markdown","4df61638":"markdown","063b6baf":"markdown","e5af8787":"markdown","03829977":"markdown","db0162bd":"markdown"},"source":{"70dcaa4f":"pip install highlight_text","b6baf0f8":"import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.patheffects as path_effects\nimport matplotlib.patches as mpatches\nimport matplotlib.image as mpimg\nfrom matplotlib import rcParams\nfrom matplotlib.patches import Arc\nimport numpy as np\nfrom highlight_text import fig_text\nimport seaborn as sns\nimport requests\nfrom bs4 import BeautifulSoup\nfrom scipy.stats import poisson\nimport random \nimport requests\nimport json\nimport re\nfrom pandas.io.json import json_normalize\nimport pandas as pd","5aba3c7d":"# Entering Real Sociedad vs Barcelona match link\nlink = \"https:\/\/understat.com\/match\/15054\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n\n# Get the shotsData, it's the second script executed in order\nstrings = scripts[1].string \n\n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n\ndf_h = pd.DataFrame(data['h'])\ndf_a = pd.DataFrame(data['a'])\ndf = df_h.append(df_a)\n\n# Changing the data types \ndf['xG'] = df['xG'].astype('float')\ndf['X'] = df['X'].astype('float')\ndf['Y'] = df['Y'].astype('float')\n\n# Dividing the df between away and home again\ndf_h = pd.DataFrame(df[df['h_a']=='h'])\ndf_a = pd.DataFrame(df[df['h_a']=='a'])\n\n# List for xG \nh_xG = df_h['xG'].tolist()\na_xG = df_a['xG'].tolist()","9e23fac1":"response = requests.get('https:\/\/understat.com\/match\/15054')\n\nmatch_info = re.search(\"match_info\\s+=\\s+JSON.parse\\('([^']+)\", response.text)\ndecoded_string = bytes(match_info.groups()[0], 'utf-8').decode('unicode_escape')\nmatchObj = json.loads(decoded_string)\n\nstats = pd.Series(matchObj)\nstats =  pd.DataFrame(stats).T","0ca6a12b":"# Changing data types\nstats = stats.astype({\"h_w\": float, \"h_l\": float, \"h_d\" : float, \"a_xg\" : float , \"h_xg\" : float})\n\n# Away stats \na_goals = stats.a_goals[0]\na_xg = stats.a_xg[0]\na_shot = stats.a_shot[0]\na_shotOnTarget = stats.a_shotOnTarget[0]\na_ppda = stats.a_ppda[0]\na_deep = stats.a_deep[0]\ndate = stats.date[0]\n\n# Home stats\nh_goals = stats.h_goals[0]\nh_xg = stats.h_xg[0]\nh_shot = stats.h_shot[0]\nh_shotOnTarget = stats.a_shotOnTarget[0]\nh_ppda = stats.h_ppda[0]\nh_deep = stats.h_deep[0]\nh_w = stats.h_w[0]*100\nh_l = stats.h_l[0]*100\nh_d = stats.h_d[0]*100","35ea2889":"stats","148ffe89":"away_xpoints = np.round(3*(h_l\/100) + 1*(h_d\/100),2)\nhome_xpoints = np.round(3*(h_w\/100) + 1*(h_d\/100),2)\nprint(\"Home expected points : {}\\nAway expected points : {}\".format(home_xpoints,away_xpoints))","95ecf440":"# Total xG per player\nhomexg = df_h.groupby(\"player\")[\"xG\"].sum().reset_index()\nawayxg = df_a.groupby(\"player\")[\"xG\"].sum().reset_index()","4cad760e":"# Creating lists for the xG\ntexty = homexg['xG'].tolist()\nnamesh = homexg['player'].tolist()\nnamesa = awayxg['player'].tolist()\n# Rounding the numebers\npppp = np.round(pd.Series(awayxg.xG),3)\nnnnn = np.round(pd.Series(homexg.xG),3)","d69729bc":"fig = plt.figure(figsize=(11,6),constrained_layout=True)\nplt.style.use('fivethirtyeight')\ngs = fig.add_gridspec(nrows=1,ncols=2)\n\n# First plot\nax1 = fig.add_subplot(gs[0,0])\nax1.bar(homexg['player'] ,homexg['xG'],color='cyan',edgecolor='lightblue', lw=1.5)\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\nfor i in range(nnnn.shape[0]):\n    ax1.text(i, nnnn.values[i]+0.05, nnnn.values[i], horizontalalignment='center')\nplt.yticks(np.linspace(0,2,5))\nplt.yticks([])\nplt.grid(False)\n\n# Second plot\nax2 = fig.add_subplot(gs[0,1])\nax2.bar(awayxg['player'] ,awayxg['xG'],color='red',edgecolor='crimson', lw=1.5)\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')\nfor i in range(pppp.shape[0]):\n    ax2.text(i, pppp.values[i]+0.05, pppp.values[i], horizontalalignment='center')\nplt.yticks(np.linspace(0,2,5))\nplt.yticks([])\nplt.grid(False)\n\nfig_text(0.31,1.05 ,s=\"Team xG Distribution\",font='Comic Sans MS',fontsize=30,fontweight=\"bold\")\nfig_text(0.06,0.95, s=\"Real Sociedad\",font='Comic Sans MS',fontsize=30,fontweight=\"bold\",color='cyan')\nfig_text(0.7,0.95, s=\"FC Barcelona\",font='Comic Sans MS',fontsize=30,fontweight=\"bold\",color='crimson')","7b88af1d":"# Probabilities \nmax_goals =6 \n\nxgbarca = np.cumsum(a_xG)[-1]\nxgreal = np.cumsum(h_xG)[-1]\n\ngProbsBarcelona = [poisson.pmf(i,xgbarca) for i in range(max_goals)]\ngProbsSociedad = [poisson.pmf(i,xgreal) for i in range(max_goals)]\n\nbarca = np.round((np.array(gProbsBarcelona) * 100),2)\nsociedad = np.round((np.array(gProbsSociedad) * 100),2)","a7e281b3":"fig = plt.figure(figsize=(10,6),constrained_layout=True)\nplt.style.use('fivethirtyeight')\ngs = fig.add_gridspec(nrows=1,ncols=2)\n\n# First plot\nax1 = fig.add_subplot(gs[0,0])\nplt.bar(range(len(sociedad)),sociedad,color='cyan',edgecolor='skyblue', lw=1., zorder = 0)\nplt.xticks(range(len(sociedad)))\nplt.axvline(xgreal,linestyle='--',color='red',alpha=0.5)\nplt.text(xgreal,40,'xG',color='crimson',font=\"'Comic Sans MS\")\nplt.xlabel('Goals')\nplt.yticks([])\nplt.grid(False)\nfor i in range(len(sociedad)):\n    plt.annotate(str(sociedad[i])+\"%\", (range(len(sociedad))[i], sociedad[i]+1.5),c='black',size=8,ha='center',va='center',fontweight='bold',font='Comic Sans MS')\nplt.xticks(font='Comic Sans MS')\nplt.yticks(np.linspace(0,40,5))\n\n# Second plot\nax2 = fig.add_subplot(gs[0,1])\nplt.bar(range(len(barca)),barca,color='crimson',edgecolor='crimson', lw=1., zorder = 0)\nplt.xticks(range(len(barca)))\nplt.axvline(xgbarca,linestyle=':',color='red',alpha=0.5)\nplt.text(xgbarca,40,'xG',color='crimson',font=\"'Comic Sans MS\")\nplt.xlabel('Goals')\nplt.yticks([])\nplt.grid(False)\nfor i in range(len(barca)):\n    plt.annotate(str(barca[i])+\"%\", (range(len(barca))[i], barca[i]+1.5),c='black',size=8,ha='center',va='center',fontweight='bold',font='Comic Sans MS')\nplt.xticks(font='Comic Sans MS')\nplt.yticks(np.linspace(0,40,5))\n\nfig_text(0.31,1.25 ,s=\"Team xG Distribution\",font='Comic Sans MS',fontsize=30,fontweight=\"bold\")\nfig_text(0.06,1.15, s=\"Real Sociedad\",font='Comic Sans MS',fontsize=30,fontweight=\"bold\",color='cyan')\nfig_text(0.7,1.15, s=\"FC Barcelona\",font='Comic Sans MS',fontsize=30,fontweight=\"bold\",color='crimson')","b8368ea9":"def calculateWinner(home, away):\n    HomeGoals = 0\n    AwayGoals = 0\n    \n    def testShots(shots):\n        Goals = 0\n        \n        for shot in shots:\n            if random.random() <= shot:\n                Goals += 1\n        return Goals\n    \n    HomeGoals = testShots(home)\n    AwayGoals = testShots(away)\n    \n    #This is all that changes from above\n    #We now pass a simple string, rather than ask for a print out.\n    if HomeGoals > AwayGoals:\n        return(\"home\")\n    elif AwayGoals > HomeGoals:\n        return(\"away\")\n    else:\n        return(\"draw\")\n    ","ca085011":"def calculateChance(team1, team2):\n    home = 0;\n    away = 0;\n    draw = 0;\n    \n    for i in range(0,10000):\n        matchWinner = calculateWinner(team1,team2)\n        if matchWinner == \"home\":\n            home +=1\n        elif matchWinner == \"away\":\n            away +=1\n        else:\n            draw +=1\n    \n    home = home\/100\n    away = away\/100\n    draw = draw\/100\n    \n    win_prob = [home,away,draw]\n    return win_prob","dc220538":"calculateWinner(h_xG, a_xG)\nprob_list = calculateChance(h_xG,a_xG)","aec448c3":"prob_list","c0e6e630":"# Prob list obtained by Understat\ndisplay(prob_list)\n# Probabilities obtained by FC Python function\ndisplay(h_d,h_l,h_w)","d3c147b2":"Check this great notebook out to find out more about most likely outcome and other stuff such as obtaining probabilities through grids and other stuff.\n\nhttps:\/\/github.com\/bfrentz\/postmatch\/blob\/master\/postmatch_analyzer.ipynb\n\n","cc32870d":"Now let's compare the 2 ways of obtaining the win probability, first one is scraping it from Understat as seen before and the second one is using the function written by FC Python : ","9f389a91":"<a id=\"10.\"><\/a>\n# Other notebooks \n\nHere are some other notebooks on the subject : \n\n   1. https:\/\/github.com\/Param9498\/SoccerBetting\n    \n    \n   2. https:\/\/github.com\/aritrartira\/xG-Outcome-Predcitor\n    \n    \n   3. https:\/\/github.com\/aritrartira\/Football-Statistics-Visualisations \n   \n   \n   4. https:\/\/wiscostret.wordpress.com\/2019\/04\/20\/win-probability-expected-points-and-epa-player-value-in-football\/\n    ","4fb02976":"<a id=\"1.1\"><\/a>\n# Notebook content","7c036f33":"* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2. Importing libraries.](#2.)\n* [3. Extracting the data.](#3.)\n    - [3.1. xG Data.](#3.1)\n    - [3.2. Stats data.](#3.2)\n* [4. Expected Points](#4.)\n* [5. Team xG Distribution](#5.)\n* [6. Goals Probability](#6.)\n* [7. Random probabilities FC Python.](#7.)\n* [8. Most likely outcome](#8.)\n* [9. References](#9.)\n* [10. Other notebooks](#10.)","878b06d8":"<a id=\"9.\"><\/a>\n# References\n\nThese were the main references for this notebook: \n\n   1. https:\/\/github.com\/bfrentz\/postmatch\/blob\/master\/postmatch_analyzer.ipynb \n   \n   \n   2. https:\/\/github.com\/parth1902\/Understat-Data-Simulator \n   \n   \n   3. [FC Python Webpage](http:\/\/fcpython.com\/python-basics\/random-with-xg)\n   \n   ","8328d8f9":"As we can see it's only minor differences such as instead of 92% it's now 90$ and so on","6b59a665":"<a id=\"4.\"><\/a>\n# Expected points\n\nLet's now calculate Expected points,xpts, the way to calculate is multiplying the win probability for 3 and the draw probability for 1 and then the expected points are obtained: ","1893ef25":"<a id=\"2.\"><\/a>\n# Importing Libraries","53912687":"<a id=\"8.\"><\/a>\n# Most likely outcome","59433707":"----","34143cef":"<a id=\"3.1\"><\/a>\n## xG Data","3fe97ee3":"<a id=\"3.\"><\/a>\n# Extracting the data\nLet's now scrape the data the xG data for the match Real Sociedad 1 vs FC Barcelona 6 ","8dd10018":"<a id=\"5.\"><\/a>\n# Teams xG Distribution\nNow let's take a look at how the xG was distributed for the 2 tema","fb62aea8":"<a id=\"7.\"><\/a>\n# Random probabilities FC Python\nNow instead of using the probabilities scraped by Understat, let's calculate it ourselves and here all the credit goes to FC Python for his unbelievable [tutorial](http:\/\/fcpython.com\/python-basics\/random-with-xg) on it :  ","4df61638":"<a id=\"1.\"><\/a>\n# Introduction\n\nLet's now get into probabilities and random , based on this great [tutorial by FC Python](https:\/\/fcpython.com\/python-basics\/random-with-xg). Also we will calculate the probabilities by ourselves and use the win probabilities and several stats given by Understat:\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)","063b6baf":"# Understat Series : Probabilities and Random\n\n\n\n**By Jose Gonzalez**\n\n![image.png](attachment:image.png)","e5af8787":"<a id=\"3.2\"><\/a>\n## Stats Data\nApart from the xG shots data needed we are also scraping the stats data from the match : \n![image.png](attachment:image.png)","03829977":"----","db0162bd":"<a id=\"6.\"><\/a>\n# Goal probability\nNow let's dive a bit into the probabilities of each team scoring x number of goals, with the max being 5 or higher, 5+."}}