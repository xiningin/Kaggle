{"cell_type":{"00abe7ba":"code","3863632d":"code","58cf1989":"code","e5bc8c60":"code","35263174":"code","257ab622":"code","c0fc47e7":"code","90fbceb6":"code","d3388137":"code","9dc462cf":"code","53bae7ee":"code","d632d374":"code","903b7638":"code","4404d4f9":"code","9237aa2a":"code","ef8bcbf6":"code","5cf070c5":"code","ad08ac72":"code","d0218699":"code","75c18532":"code","ea128d97":"code","a190698c":"code","c84a9fe5":"code","1306c986":"code","15e6d1e7":"code","627bd410":"code","e1b566c3":"code","ea5c17bd":"code","23bbfd17":"code","b68afb82":"code","d57b3bd0":"code","68e33a08":"code","3e62a31c":"code","7733a09e":"code","8b070d53":"code","bb70db76":"code","47e1a6c2":"code","5fc28c28":"code","9599eec6":"code","706031b7":"code","35ae0aaf":"code","9c66d0d8":"code","5c2ed709":"code","d466ade2":"code","97033649":"code","a4f8eeda":"code","2c81f8f5":"code","84d6711d":"code","ccccc0d7":"code","f66e2f36":"code","76c3cd6a":"code","2d82c5e1":"code","7680f97c":"code","6058ed43":"code","443ad487":"code","9c7bf2c8":"code","5e3fc783":"code","196f7af9":"code","91c93706":"code","e4450eb4":"code","7996d2c2":"code","9a79cbb2":"code","77d1ce63":"code","5567693c":"code","f955e231":"code","6de2714d":"code","2579dc98":"code","458d86be":"code","d2d207fd":"code","d0d9c2ab":"code","3a45dc60":"code","dd4324f7":"code","19ee814f":"code","99c963df":"code","9ee521aa":"code","fb384339":"code","b9371669":"code","37c6a7c7":"code","98409f75":"code","475a4a87":"code","608349d5":"code","35eec667":"code","866da1c9":"code","0b526936":"code","430c8dee":"code","2325226f":"code","552995a4":"code","4c3a4992":"code","660d3f1c":"code","b142947f":"code","edb676fc":"code","5bafff6b":"code","8ecb1764":"code","6100a98f":"code","428830fa":"code","975fb077":"code","ff2c68df":"code","e36ee8db":"code","73abcb64":"code","a504cd36":"code","0865f435":"code","aee3e06f":"code","e80c5728":"code","0f296a33":"code","2dfdcc72":"code","0ee3c291":"code","365caccb":"code","42508bee":"code","42621df4":"code","29a92c45":"code","1c2b28c6":"code","13706187":"code","457962ed":"code","187893d0":"code","6a2d2895":"code","46873631":"code","1692f97f":"code","51bb8881":"code","c657a3ab":"code","5318094f":"code","9304b9a4":"code","f064e6d7":"code","17a18a27":"code","8724ff0a":"code","59dcde88":"code","abd094d5":"code","ab597420":"code","afa63b29":"code","b961b9a1":"code","644dd0b5":"code","c29f30c4":"code","e6949691":"code","6a54a059":"code","d18724e8":"code","aa5d0fd9":"code","0a4d56c7":"code","5492db19":"code","3fbcf6b5":"code","4faf15d1":"code","16ed2eff":"code","670bae86":"code","d8d116ac":"code","69999d99":"code","92eb5e83":"code","fab34532":"code","631d583c":"code","d4ffa8fa":"code","2e7e2f3a":"code","76ed2fc1":"code","518e35af":"code","8839cf9a":"code","fcbaf4d2":"code","f86725a2":"code","513a7c41":"code","fdbee231":"code","b9c1585f":"code","5f47f154":"code","ffe8d8e1":"code","a9089450":"code","830d06e0":"code","4eb438b8":"code","97e48d22":"code","acd6505a":"code","88002142":"code","3cc7a03c":"code","d75ffaf5":"code","c7a5d67d":"code","273ebe79":"code","1c8a38b5":"code","873552ec":"code","09e5daf4":"code","21f7699c":"code","5bb51890":"code","be877f9a":"code","c4a9b7aa":"code","fde84ed2":"code","8c78e249":"code","97073767":"code","addc22f1":"code","c938020f":"code","5e073305":"code","1e2902ff":"code","976da6b1":"code","2829846b":"code","f49f816d":"code","7219565e":"code","3c209eb7":"code","1b7bcbb6":"code","bac9f019":"code","c80d030e":"code","1e41b2d5":"code","830a4f90":"code","63405663":"code","40b4f509":"code","750d66fb":"code","1f9bb0c8":"code","7c5dfa34":"code","f40b7e4b":"code","57572dd8":"code","97a285c0":"code","6a923153":"markdown","60a0df8a":"markdown","0054870f":"markdown","50190849":"markdown","f497b552":"markdown","a58c6de6":"markdown","c7dcd5b0":"markdown","b64f0a4f":"markdown","324a24d5":"markdown","781d3066":"markdown","2c9ccb9b":"markdown","49b4c0e7":"markdown","ed40a709":"markdown","10fab99e":"markdown","dd45e5db":"markdown","379aaf6f":"markdown","74195584":"markdown","71fd09dc":"markdown","9eb91ce9":"markdown","ccad5237":"markdown","0a9eb633":"markdown","7c4faef3":"markdown","5c505e37":"markdown","08a95823":"markdown","15809975":"markdown","439449b7":"markdown","c3160421":"markdown","59129cbd":"markdown","92a9f809":"markdown","9b279d0e":"markdown","2fcef2e7":"markdown","d1b62fbf":"markdown","1b4cbb1a":"markdown","2f48aa32":"markdown","d9f002ad":"markdown","cb7d59ca":"markdown","4fdb0db6":"markdown","c6525685":"markdown","497f1845":"markdown","7ef51128":"markdown","5768f9b4":"markdown","8f94d367":"markdown","c93916f8":"markdown","65bee2a8":"markdown","877cd691":"markdown","23732d52":"markdown","81fb335d":"markdown","62e32d5c":"markdown","c0a2cb60":"markdown","4735ea25":"markdown","36411278":"markdown","80799028":"markdown","f734f410":"markdown","f88f56ce":"markdown","460785b0":"markdown","cc3d52a3":"markdown","ddb08e95":"markdown","0e95f677":"markdown","e8efc663":"markdown","ebaa697e":"markdown","15a01fc5":"markdown","fe574a00":"markdown","90a3769b":"markdown","8103d7fd":"markdown","7cc14f64":"markdown","48990519":"markdown","5f5da1d7":"markdown","a370d9d7":"markdown","86f25fbc":"markdown","a1966cfa":"markdown","7506ad76":"markdown","b3d740c9":"markdown","c8ef884d":"markdown","cd650ced":"markdown","2eb31911":"markdown","149a7534":"markdown","1946ed55":"markdown","59f9c504":"markdown","658991d7":"markdown","41f5f98f":"markdown","217e16ad":"markdown","ca5cf972":"markdown","bb2ae36d":"markdown","7b47222b":"markdown","0b27688d":"markdown","1ad67424":"markdown","41a47b0f":"markdown","a7202f8a":"markdown","585360c3":"markdown","85174420":"markdown","c54af5ce":"markdown","d875a3e3":"markdown","027e3a6a":"markdown","7de33a62":"markdown","bd662576":"markdown","c14ca82e":"markdown","ca4bb579":"markdown","7f7e18cf":"markdown","47f317c1":"markdown","c83b0080":"markdown","b86b7870":"markdown","4d2c8517":"markdown","0af4bc37":"markdown","e5175f4a":"markdown","d5357ada":"markdown","ca67b73c":"markdown","e56910a4":"markdown","707d69cc":"markdown","0ee1e95f":"markdown","c4138421":"markdown","4f235a0d":"markdown","9db2ebd7":"markdown","b7a40608":"markdown","5246da6c":"markdown","7ff508c1":"markdown","02933c3b":"markdown","8d5a2751":"markdown","554b43d9":"markdown","b1b180e6":"markdown","c43b7a25":"markdown","8e7be2bd":"markdown","db5d2bdd":"markdown","27396819":"markdown","2e57d2e4":"markdown","37e33622":"markdown","cdbfe5f7":"markdown","243ba8e5":"markdown"},"source":{"00abe7ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3863632d":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport operator\nwarnings.filterwarnings('ignore')","58cf1989":"data  = pd.read_csv('..\/input\/fifa19\/data.csv')","e5bc8c60":"print(data.columns)","35263174":"data = data.drop(columns = ['ID', 'Unnamed: 0','Work Rate'], axis = 1)","257ab622":"metrics_columns = ['Overall', 'Potential', 'Value', 'Wage', 'Special', 'International Reputation',\n                  'Release Clause']","c0fc47e7":"data['Body Type'].unique()","90fbceb6":"data['Body Type'] = data['Body Type'].replace('Messi', 'Normal')\ndata['Body Type'] = data['Body Type'].replace('Courtois', 'Lean')\ndata['Body Type'] = data['Body Type'].replace('Shaqiri', 'Stocky')\ndata['Body Type'] = data['Body Type'].replace('Akinfenwa', 'Stocky')\ndata['Body Type'] = data['Body Type'].replace('C. Ronaldo', 'Lean')\ndata['Body Type'] = data['Body Type'].replace('PLAYER_BODY_TYPE_25', 'Normal')\ndata['Body Type'] = data['Body Type'].replace('Neymar', 'Lean')","d3388137":"physical_columns = ['Body Type', 'Height', 'Weight', 'Preferred Foot', 'Acceleration',\n                    'SprintSpeed', 'Jumping', 'Stamina', 'Strength']","9dc462cf":"#Converting value, wage and release clause \ndef conversion(in_euros):\n    try:\n        final = float(in_euros[1:-1])\n        if in_euros[-1] == \"M\":\n            final = final*1000000\n        elif in_euros[-1] == \"K\":\n            final = final*1000\n    except:\n        final = np.nan\n    return final","53bae7ee":"\ndata.Value = data.Value.apply(conversion)\ndata.Wage = data.Wage.apply(conversion)\ndata[\"Release Clause\"] = data[\"Release Clause\"].apply(conversion)","d632d374":"plt.figure(figsize = (12,12))\nsns.pairplot(data, x_vars = physical_columns, y_vars = metrics_columns)\nplt.show()","903b7638":"plt.figure(figsize = (10,10))\nsns.heatmap(data[physical_columns+metrics_columns].corr(), linewidth = 3, linecolor = 'grey')\nplt.show()","4404d4f9":"data_age = data.dropna(subset = ['Age'], axis = 0)","9237aa2a":"fig, axis = plt.subplots(1, 2, figsize = (12,8))\naxis[0].hist(data_age.Age)\naxis[1].violinplot(data_age.Age)\n\nplt.show()","ef8bcbf6":"data_age.Age.describe()","5cf070c5":"age_group = []\ni_20 = 0\ni_20_30 = 0\ni_30 = 0\nfor i in range(0, data.Age.size):\n    if data.Age[i] < 20:\n        age_group.append('Less than 20 years')\n        i_20 = i_20+ 1\n    elif data.Age[i] > 30:\n        age_group.append('more than 30 years')\n        i_30 = i_30 +1\n    else:\n        age_group.append('In between 20 and 30 years')\n        i_20_30 = i_20_30+ 1","ad08ac72":"print('number of players below age 20: ',i_20,'\\n number of players inbetween 20 and 30: ',i_20_30,\n     '\\n number of players above 30 years: ',i_30)\nprint('Percentage of players who are in between age of 20 and 30:', i_20_30*100\/(i_20+i_30+i_20_30))","d0218699":"plt.figure(figsize = (8,8))\nsns.scatterplot(data.Age, data.Overall, hue = age_group)\nplt.xlabel('Age of the player', color = 'yellow')\nplt.ylabel('Overall outcome from the player', color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.xticks(color = 'yellow')\nplt.title('Age vs Overall', color = 'yellow', fontsize = 20)\nplt.show()","75c18532":"countries_in_order = np.array(data.Nationality.value_counts().index)\ncountries_num_players = data.Nationality.value_counts()","ea128d97":"plt.figure(figsize = (8,8))\nplt.bar(countries_in_order[0:20], countries_num_players[0:20],)\nplt.xticks(rotation = 'vertical', color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.xlabel(\"Countries\", color = 'green', fontsize = 20)\nplt.ylabel(\"Number of players\", color = 'green', fontsize = 19)\nplt.title(\"Number of players produced by the countries\", color = 'green', fontsize = 20)\nplt.show()","a190698c":"Overall_country = []\nOverall_country_average = []\nfor k in range(0, data.Nationality.value_counts().size):\n    Overall_sum = 0\n    for i in range(0, data.Nationality.size):\n        if data.Nationality[i] == countries_in_order[k]:\n            Overall_sum = Overall_sum + data.Overall[i]\n    Overall_country.append(Overall_sum)\n    Overall_country_average.append(Overall_sum\/countries_num_players[k])","c84a9fe5":"plt.figure(figsize = (12,8))\nplt.grid(color = 'yellow')\nplt.plot(countries_in_order[0:20], Overall_country_average[0:20], marker = 'o', linewidth = 5,\n         markersize = 12, markerfacecolor = 'white', rasterized = True)\nplt.xticks(color = 'yellow', rotation = 90, fontsize = 12)\nplt.yticks(color = 'yellow', fontsize = 12)\nplt.xlabel('Countries (top 20)', color = 'green', fontsize = 15)\nplt.ylabel('Average Overall rating of the players', color = 'green', fontsize = 15)\nplt.title('Average ratings of players in different countries', color = 'green', fontsize = 20)\nplt.show()\n","1306c986":"Overall_country_experienced = []\nfor k in range(0, 30):\n    Overall_sum = 0\n    for i in range(0, data.Nationality.size):\n        if ((data.Nationality[i]  == countries_in_order[k]) and (data.Age[i] >= 30)) :\n            Overall_sum = Overall_sum + 1\n    Overall_country_experienced.append(Overall_sum)","15e6d1e7":"plt.figure(figsize = (10,10))\nplt.pie( Overall_country_experienced[0:25],labels =countries_in_order[0:25], rotatelabels = True)\nplt.title('Number of experienced players in each country', color = 'green', fontsize = 20)\nplt.show()","627bd410":"plt.figure(figsize = (8,8))\nsns.distplot(data['Value'].dropna(), kde = False)\nplt.yscale('log')\nplt.xlabel('Value of the player in euros',color = 'green', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Value of the players on log scale', fontsize = 20, color = 'green')\nplt.show()","e1b566c3":"plt.figure(figsize = (8,8))\nplt.grid(color = 'yellow')\nsns.distplot(data['Wage'].dropna(), kde = True, rug = True, hist = False)\nplt.yscale('log')\nplt.xlabel('Wage of the player in euros',color = 'green', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Wage of the players on log scale', fontsize = 20, color = 'green')\nplt.show()","ea5c17bd":"plt.figure(figsize = (8,8))\nplt.grid(color = 'yellow')\nsns.distplot(data['Release Clause'].dropna(), kde = True, hist = True, color = 'black')\nplt.yscale('log')\nplt.xlabel('Release Clause of the player in euros',color = 'green', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Release Clause of the players on log scale', fontsize = 20, color = 'green')\nplt.show()","23bbfd17":"sns.jointplot(data.Age, data.Value, height = 8, color = 'black')\nplt.yscale('log')\nplt.show()\n","b68afb82":"sns.jointplot(x = 'Overall', y = 'Release Clause', data = data, kind = 'scatter', height = 10)\nplt.yscale('log')\nplt.show()","d57b3bd0":"Position_simplified = data.Position.replace(['LS', 'RS', 'LF', 'RF', 'LAM', 'RAM','LW', 'RW', 'LCM',\n                                            'RCM', 'LM', 'RM', 'LDM', 'RDM','LWB', 'RWB', 'LCB',\n                                            'RCB', 'LB', 'RB'], ['ST', 'ST', 'CF', 'CF', 'CAM',\n                                                                'CAM', 'LRW', 'LRW', 'CM', 'CM',\n                                                                'LRM', 'LRM', 'CDM', 'CDM', 'LRWB',\n                                                                'LRWB', 'CB', 'CB', 'LRB', 'LRB'])\ndata = data.assign(Position_Simplified = Position_simplified)","68e33a08":"plt.figure(figsize = (9,9))\nfor k in data.Position_Simplified.unique():\n    sns.distplot(data.Overall[data.Position_Simplified == k], hist = False, label = k)\nplt.xlabel('Overall', color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow')\nplt.xticks(color = 'yellow')\nplt.title('Disturbution of different soccer positions', color = 'green', fontsize = 20)\nplt.show()","3e62a31c":"plt.figure(figsize = (15,8))\nplt.grid(color = 'black')\nsns.boxenplot(data.Position_Simplified, data.Overall)\nsns.stripplot(data.Position_Simplified, data.Overall, color = 'grey')\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.xlabel('Positions', color = 'yellow', fontsize = 15)\nplt.ylabel('Overall Rating', color = 'yellow', fontsize =  15)\nplt.title('Position v\/s Overall rating (detailed)', color = 'green', fontsize = 20)","7733a09e":"plt.figure(figsize = (12, 5))\nplt.grid(color = 'black')\nsns.violinplot(data.Position_Simplified, data.Wage)\nplt.yscale('log')\nplt.xlabel('Positions of Players', color = 'yellow', fontsize = 15)\nplt.ylabel('Wage', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Position vs Wage of the players', color = 'green', fontsize = 20)\nplt.show()","8b070d53":"plt.figure(figsize = (8,8))\nplt.grid(color = 'black')\nplt.hist(data.Overall[data.Position == 'GK'], color = 'red')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Goalkeepers based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","bb70db76":"data.columns","47e1a6c2":"All_skills = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n              'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n              'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n              'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n              'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n              'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n              'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']","5fc28c28":"Evaluation_metrics = ['Value', 'Wage', 'Special', 'Release Clause', 'Overall', 'Potential']","9599eec6":"correlate_GK = data[data.Position == 'GK'][Evaluation_metrics + All_skills]\ncorrelate_GK = correlate_GK.corr()\ncorrelate_GK = correlate_GK.drop(Evaluation_metrics, axis = 1)\ncorrelate_GK = correlate_GK.drop(All_skills, axis = 0)","706031b7":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_GK, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the players', color = 'green', fontsize = 25)\nplt.show()","35ae0aaf":"goalie_skills = ['Reactions', 'GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']","9c66d0d8":"plt.figure(figsize = (8,8))\nsns.pairplot(data[data.Position == 'GK'], x_vars = goalie_skills, y_vars = Evaluation_metrics)\nplt.show()","5c2ed709":"from sklearn.model_selection import train_test_split\nGK_regression_data = data[data.Position == 'GK']\nGK_regression_data = GK_regression_data[goalie_skills + ['Overall']]\nGK_regression_data = GK_regression_data.dropna(axis = 0)\nGK_X_train, GK_X_test, GK_Y_train, GK_Y_test = train_test_split(GK_regression_data[goalie_skills],\n                                                                GK_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","d466ade2":"print( GK_X_train.shape, GK_Y_train.shape, GK_X_test.shape, GK_Y_test.shape)","97033649":"from sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV","a4f8eeda":"elastic_net_CV = ElasticNetCV(fit_intercept = True, precompute = False)\nelastic_net_CV.fit(GK_X_train, GK_Y_train)","2c81f8f5":"print('the alpha value is: ', elastic_net_CV.alpha_ ,\n      ' and the value of l1 ratio: ' , elastic_net_CV.l1_ratio_)","84d6711d":"elastic_net = ElasticNet(alpha = 0.1372597751010709, l1_ratio = 0.5, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nelastic_net.fit(GK_X_train, GK_Y_train)","ccccc0d7":"elastic_net.get_params()","f66e2f36":"from sklearn.metrics import mean_squared_error\nGK_Y_predict = elastic_net.predict(GK_X_test)\nmean_squared_error(GK_Y_test, GK_Y_predict)","76c3cd6a":"from sklearn.linear_model import LinearRegression\nlinear_regression = LinearRegression(fit_intercept = True, normalize = False, copy_X = True, n_jobs = None)\nlinear_regression.fit(GK_X_train, GK_Y_train)\nGK_Y_predict = linear_regression.predict(GK_X_test)\nprint(mean_squared_error(GK_Y_test, GK_Y_predict))","2d82c5e1":"from sklearn.linear_model import ElasticNet\nelastic_net = ElasticNet(alpha = 0.1372597751010709, l1_ratio = 0.5, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(GK_X_test.shape)\nmse = np.zeros((np.size(GK_X_train, 1), ))\nfor i in range(0, np.size(GK_X_train, 1)):\n    X_train = np.array(GK_X_train)\n    Y_train = GK_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    elastic_net.fit(X_train, Y_train)\n    X_test = np.array(GK_X_test)\n    Y_test = GK_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","7680f97c":"\nfig , axes = plt.subplots(np.size(GK_X_train, 1), 1, figsize = (8, 8*np.size(GK_X_train,1)))\nfor i in range(0 , np.size(GK_X_train, 1)):\n    axes[i].set_xlabel(list(GK_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(GK_X_train.columns)[i]+' v\/s Overall average of player', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(GK_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], GK_Y_test)\nplt.show()","6058ed43":"GK_regression_data['Overall'].describe()","443ad487":"plt.figure(figsize = (8, 8))\nplt.xlabel(list(GK_X_train.columns)[0], color = 'green', fontsize = 15)\nplt.ylabel('overall', color = 'green', fontsize = 15)\nplt.title(list(GK_X_train.columns)[0]+' v\/s Overall average with grouping', color = 'yellow', fontsize = 20)\nplt.grid('True')\nx_show = np.array(GK_X_test)\nplt.plot(x_show[:, 0], Y_predict[:, 0], color = 'black', linewidth = 3)\nplt.scatter(x_show[:, 0], GK_Y_test)\nplt.hlines(69, 30, 90, color = 'green')\nplt.hlines(64, 30, 90, color = 'green')\nplt.hlines(59, 30, 90, color = 'green')\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.show()","9c7bf2c8":"fig , axes = plt.subplots(np.size(GK_X_train, 1), 1, figsize = (8, 8*np.size(GK_X_train,1)))\nfor i in range(0 , np.size(GK_X_train, 1)):\n    axes[i].set_xlabel(list(GK_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(GK_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(69, 30, 90, color = 'green')\n    axes[i].hlines(64, 30, 90, color = 'green')\n    axes[i].hlines(59, 30, 90, color = 'green')\n    x_show = np.array(GK_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], GK_Y_test)\nplt.show()","5e3fc783":"CB_data = data[data.Position_Simplified == 'CB']","196f7af9":"plt.figure(figsize = (8,8))\nplt.grid(color = 'black')\nplt.hist(CB_data.Overall, color = 'red')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Center Defenders based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","91c93706":"correlate_CB = CB_data[Evaluation_metrics + All_skills]\ncorrelate_CB = correlate_CB.corr()\ncorrelate_CB = correlate_CB.drop(Evaluation_metrics, axis = 1)\ncorrelate_CB = correlate_CB.drop(All_skills, axis = 0)","e4450eb4":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_CB, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the centre defenders', color = 'green', fontsize = 25)\nplt.show()","7996d2c2":"CB_skills = ['HeadingAccuracy', 'ShortPassing', 'LongPassing', 'BallControl', 'Reactions', 'Aggression',\n             'Interceptions', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle']","9a79cbb2":"plt.figure(figsize = (20,20))\nsns.pairplot(CB_data, x_vars = CB_skills, y_vars = Evaluation_metrics)\nplt.show()","77d1ce63":"CB_regression_data = CB_data[CB_skills + ['Overall']]\nCB_regression_data = CB_regression_data.dropna(axis = 0)\nCB_X_train, CB_X_test, CB_Y_train, CB_Y_test = train_test_split(CB_regression_data[CB_skills],\n                                                                CB_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","5567693c":"print(CB_X_train.shape, CB_X_test.shape, CB_Y_train.shape, CB_Y_test.shape)","f955e231":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV","6de2714d":"Lasso_CV = LassoCV(eps = 0.001, n_alphas = 100, fit_intercept = True, copy_X = True)\nLasso_CV.fit(CB_X_train, CB_Y_train)","2579dc98":"print('the alpha parameter calculated is', Lasso_CV.alpha_, 'The intercept calculated', Lasso_CV.intercept_)","458d86be":"lasso = Lasso(alpha = 0.12548123432868297, fit_intercept = True, precompute = False, warm_start = False)\nlasso.fit(CB_X_train, CB_Y_train)","d2d207fd":"lasso.get_params()","d0d9c2ab":"CB_Y_predict = lasso.predict(CB_X_test)\nprint(mean_squared_error(CB_Y_test, CB_Y_predict))","3a45dc60":"from sklearn.linear_model import Lasso\nelastic_net = Lasso(alpha = 0.12548123432868297, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(CB_X_test.shape)\nmse = np.zeros((np.size(CB_X_train, 1), ))\nfor i in range(0, np.size(CB_X_train, 1)):\n    X_train = np.array(CB_X_train)\n    Y_train = CB_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    elastic_net.fit(X_train, Y_train)\n    X_test = np.array(CB_X_test)\n    Y_test = CB_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","dd4324f7":"fig , axes = plt.subplots(np.size(CB_X_train, 1), 1, figsize = (8, 8*np.size(CB_X_train,1)))\nfor i in range(0 , np.size(CB_X_train, 1)):\n    axes[i].set_xlabel(list(CB_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CB_X_train.columns)[i]+' v\/s Overall average of CB defender',\n                      color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(CB_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CB_Y_test)\nplt.show()","19ee814f":"CB_data['Overall'].describe()","99c963df":"fig , axes = plt.subplots(np.size(CB_X_train, 1), 1, figsize = (8, 8*np.size(CB_X_train,1)))\nfor i in range(0 , np.size(CB_X_train, 1)):\n    axes[i].set_xlabel(list(CB_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CB_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 30, 90, color = 'green')\n    axes[i].hlines(67, 30, 90, color = 'green')\n    axes[i].hlines(63, 30, 90, color = 'green')\n    x_show = np.array(CB_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CB_Y_test)\nplt.show()","9ee521aa":"print('There are', (data.Position_Simplified == 'LRWB').sum() ,\n      'fielders in the dataset who play as right or left wing fielders')","fb384339":"plt.figure(figsize = (8,8))\nsns.distplot(data.Overall[data.Position_Simplified == 'LRWB'])\nplt.title('Distribution of Overall rating of all the L\/R wing Backs', color = 'yellow', fontsize = 20)\nplt.ylabel('Distribution', color = 'green', fontsize = 15)\nplt.xlabel('Overall rating', color = 'green', fontsize = 15)\nplt.xticks(color = 'red', fontsize = 10)\nplt.yticks(color = 'red', fontsize = 10)\nplt.show()","b9371669":"correlate_LRWB = data[data.Position_Simplified == 'LRWB'][All_skills + Evaluation_metrics]\ncorrelate_LRWB = correlate_LRWB.corr()\ncorrelate_LRWB = correlate_LRWB.drop(Evaluation_metrics, axis = 1)\ncorrelate_LRWB = correlate_LRWB.drop(All_skills, axis = 0)","37c6a7c7":"plt.figure(figsize = (20,8))\nsns.heatmap(correlate_LRWB, linecolor = 'white', linewidth = 0.5, annot = True)\nplt.xticks(color = 'green', fontsize = 15)\nplt.yticks(color = 'green', fontsize = 15)\nplt.xlabel('skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation metrics', color = 'yellow', fontsize = 20)\nplt.title('correlation b\/w evaluation and skills of wing backs', color = 'yellow', fontsize = 25)\nplt.show()\n","98409f75":"CDM_data = data[data.Position_Simplified == 'CDM']","475a4a87":"plt.figure(figsize = (8,8))\nplt.grid(color = 'red')\nplt.hist(CDM_data.Overall, color = 'blue')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Center defensive Mids based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","608349d5":"correlate_CDM = CDM_data[Evaluation_metrics + All_skills]\ncorrelate_CDM = correlate_CDM.corr()\ncorrelate_CDM = correlate_CDM.drop(Evaluation_metrics, axis = 1)\ncorrelate_CDM = correlate_CDM.drop(All_skills, axis = 0)","35eec667":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_CDM, linewidth = 0.5, linecolor = 'white', annot = True)\nplt.xlabel('Skills of the defense mids', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.xticks(color = 'green', fontsize = 15)\nplt.yticks(color = 'green', fontsize = 15)\nplt.title('Correlation map of the centre defensive fielders', color = 'yellow', fontsize = 25)\nplt.show()","866da1c9":"CDM_skills = ['ShortPassing', 'LongPassing', 'BallControl', 'Reactions', 'Interceptions', 'Vision',\n              'Composure', 'StandingTackle']","0b526936":"plt.figure(figsize = (8,8))\nsns.pairplot(CDM_data, x_vars = CDM_skills, y_vars = Evaluation_metrics)\nplt.show()","430c8dee":"CDM_X_train, CDM_X_test, CDM_Y_train, CDM_Y_test = train_test_split(CDM_data[CDM_skills],\n                                                                    CDM_data['Overall'], test_size = 0.25,\n                                                                    random_state = 42)","2325226f":"print(CDM_X_train.shape, CDM_X_test.shape, CDM_Y_train.shape, CDM_Y_test.shape)","552995a4":"from sklearn.linear_model import RidgeCV\nridgeCV = RidgeCV(alphas = (0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0, 10000), fit_intercept = True, \n                  normalize = False, scoring = None)\nridgeCV.fit(CDM_X_train, CDM_Y_train)","4c3a4992":"print('the alpha value is: ', ridgeCV.alpha_ ,\n      ' and the value of cpfficient matrix is: ' , ridgeCV.coef_)","660d3f1c":"from sklearn.linear_model import Ridge\nridge = Ridge(alpha = 1000, fit_intercept = True, normalize = False, max_iter = None, solver = 'auto')\nridge.fit(CDM_X_train, CDM_Y_train)","b142947f":"ridge.get_params()","edb676fc":"CDM_Y_predict = ridge.predict(CDM_X_test)\nprint('The mean squared error is ', mean_squared_error(CDM_Y_predict, CDM_Y_test))","5bafff6b":"lr = LinearRegression(fit_intercept = True)\nY_predict = np.zeros(CDM_X_test.shape)\nmse = np.zeros((np.size(CDM_X_train, 1), ))\nfor i in range(0, np.size(CDM_X_train, 1)):\n    X_train = np.array(CDM_X_train)\n    Y_train = CDM_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    lr.fit(X_train, Y_train)\n    X_test = np.array(CDM_X_test)\n    Y_test = CDM_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], CDM_Y_test)","8ecb1764":"fig , axes = plt.subplots(np.size(CDM_X_train, 1), 1, figsize = (8, 8*np.size(CDM_X_train,1)))\nfor i in range(0 , np.size(CDM_X_train, 1)):\n    axes[i].set_xlabel(list(CDM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CDM_X_train.columns)[i]+' v\/s Overall average of player', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(CDM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CDM_Y_test)\nplt.show()","6100a98f":"CDM_data['Overall'].describe()","428830fa":"fig , axes = plt.subplots(np.size(CDM_X_train, 1), 1, figsize = (8, 8*np.size(CDM_X_train,1)))\nfor i in range(0 , np.size(CDM_X_train, 1)):\n    axes[i].set_xlabel(list(CDM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CDM_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 30, 90, color = 'green')\n    axes[i].hlines(67, 30, 90, color = 'green')\n    axes[i].hlines(64, 30, 90, color = 'green')\n    x_show = np.array(CDM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CDM_Y_test)\nplt.show()","975fb077":"LRB_data = data[data.Position_Simplified == 'LRB']","ff2c68df":"plt.figure(figsize = (8,8))\nplt.grid(color = 'yellow')\nplt.hist(LRB_data.Overall, color = 'grey')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Full backs based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","e36ee8db":"correlate_LRB = LRB_data[Evaluation_metrics + All_skills]\ncorrelate_LRB = correlate_LRB.corr()\ncorrelate_LRB = correlate_LRB.drop(Evaluation_metrics, axis = 1)\ncorrelate_LRB = correlate_LRB.drop(All_skills, axis = 0)","73abcb64":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_LRB, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the centre Ful backs', color = 'green', fontsize = 25)\nplt.show()","a504cd36":"LRB_skills = ['Crossing', 'ShortPassing', 'LongPassing', 'BallControl', 'Reactions', 'Dribbling',\n             'Interceptions', 'Composure', 'Marking', 'StandingTackle', 'SlidingTackle']","0865f435":"plt.figure(figsize = (20,20))\nsns.pairplot(LRB_data, x_vars = LRB_skills, y_vars = Evaluation_metrics)\nplt.show()","aee3e06f":"LRB_regression_data = LRB_data[LRB_skills + ['Overall']]\nLRB_regression_data = LRB_regression_data.dropna(axis = 0)\nLRB_X_train, LRB_X_test, LRB_Y_train, LRB_Y_test = train_test_split(LRB_regression_data[LRB_skills],\n                                                                LRB_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","e80c5728":"print(LRB_X_train.shape, LRB_X_test.shape, LRB_Y_train.shape, LRB_Y_test.shape)","0f296a33":"from sklearn.linear_model import LassoCV\nlasso_cv = LassoCV(eps = 0.001, alphas = None, fit_intercept = True, selection = 'cyclic')\nlasso_cv.fit(LRB_X_train, LRB_Y_train)\nprint('The value of alpha of this model: ', lasso_cv.alpha_ , '\\nThe value of intercept: ', lasso_cv.intercept_)","2dfdcc72":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.05140238284526512, precompute = False, warm_start = False, selection = 'cyclic')\nlasso.fit(LRB_X_train, LRB_Y_train)","0ee3c291":"lasso.get_params()","365caccb":"LRB_Y_predict = lasso.predict(LRB_X_test)\nprint('The squared error obtained is: ', mean_squared_error(LRB_Y_predict, LRB_Y_test))","42508bee":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.05140238284526512, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(LRB_X_test.shape)\nmse = np.zeros((np.size(LRB_X_train, 1), ))\nfor i in range(0, np.size(LRB_X_train, 1)):\n    X_train = np.array(LRB_X_train)\n    Y_train = LRB_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    elastic_net.fit(X_train, Y_train)\n    X_test = np.array(LRB_X_test)\n    Y_test = LRB_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","42621df4":"fig , axes = plt.subplots(np.size(LRB_X_train, 1), 1, figsize = (8, 8*np.size(LRB_X_train,1)))\nfor i in range(0 , np.size(LRB_X_train, 1)):\n    axes[i].set_xlabel(list(LRB_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(LRB_X_train.columns)[i]+' v\/s Overall average of player', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(LRB_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], LRB_Y_test)\nplt.show()","29a92c45":"LRB_data.Overall.describe()","1c2b28c6":"fig , axes = plt.subplots(np.size(LRB_X_train, 1), 1, figsize = (8, 8*np.size(LRB_X_train,1)))\nfor i in range(0 , np.size(LRB_X_train, 1)):\n    axes[i].set_xlabel(list(LRB_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(LRB_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(70, 20, 90, color = 'green')\n    axes[i].hlines(66, 20, 90, color = 'green')\n    axes[i].hlines(62, 20, 90, color = 'green')\n    x_show = np.array(LRB_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], LRB_Y_test)\nplt.show()","13706187":"CM_data = data[data.Position_Simplified == 'CM']","457962ed":"plt.figure(figsize = (8,8))\nplt.grid(color = 'red')\nplt.hist(CM_data.Overall, color = 'green')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Center Midfielders based on their overall rating', color = 'White', fontsize = 20)\nplt.show()","187893d0":"correlate_CM = CM_data[Evaluation_metrics + All_skills]\ncorrelate_CM = correlate_CM.corr()\ncorrelate_CM = correlate_CM.drop(Evaluation_metrics, axis = 1)\ncorrelate_CM = correlate_CM.drop(All_skills, axis = 0)","6a2d2895":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_CM, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the centre Midfielders', color = 'green', fontsize = 25)\nplt.show()","46873631":"CM_skills = ['Crossing', 'ShortPassing', 'Dribbling', 'LongPassing', 'BallControl', 'Reactions',\n             'ShotPower', 'LongShots', 'Positioning', 'Vision', 'Composure']","1692f97f":"plt.figure(figsize = (20,20))\nsns.pairplot(CM_data, x_vars = CM_skills, y_vars = Evaluation_metrics)\nplt.show()","51bb8881":"CM_regression_data = CM_data[CM_skills + ['Overall']]\nCM_regression_data = CM_regression_data.dropna(axis = 0)\nCM_X_train, CM_X_test, CM_Y_train, CM_Y_test = train_test_split(CM_regression_data[CM_skills],\n                                                                CM_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","c657a3ab":"print(CM_X_train.shape, CM_X_test.shape, CM_Y_train.shape, CM_Y_test.shape)","5318094f":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV","9304b9a4":"Lasso_CV = LassoCV(eps = 0.001, n_alphas = 100, fit_intercept = True, copy_X = True)\nLasso_CV.fit(CM_X_train, CM_Y_train)","f064e6d7":"print('the alpha parameter calculated is', Lasso_CV.alpha_, 'The intercept calculated', Lasso_CV.intercept_)","17a18a27":"lasso = Lasso(alpha = 0.13895669171744096, fit_intercept = True, precompute = False, warm_start = False)\nlasso.fit(CM_X_train, CM_Y_train)","8724ff0a":"lasso.get_params()","59dcde88":"CM_Y_predict = lasso.predict(CM_X_test)\nprint(mean_squared_error(CM_Y_test, CM_Y_predict))","abd094d5":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.13895669171744096, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(CM_X_test.shape)\nmse = np.zeros((np.size(CM_X_train, 1), ))\nfor i in range(0, np.size(CM_X_train, 1)):\n    X_train = np.array(CM_X_train)\n    Y_train = CM_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    lasso.fit(X_train, Y_train)\n    X_test = np.array(CM_X_test)\n    Y_test = CM_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = lasso.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","ab597420":"fig , axes = plt.subplots(np.size(CM_X_train, 1), 1, figsize = (8, 8*np.size(CM_X_train,1)))\nfor i in range(0 , np.size(CM_X_train, 1)):\n    axes[i].set_xlabel(list(CM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CM_X_train.columns)[i]+' v\/s Overall average of Center Midfielder',\n                      color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(CM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CM_Y_test)\nplt.show()","afa63b29":"CM_data['Overall'].describe()","b961b9a1":"fig , axes = plt.subplots(np.size(CM_X_train, 1), 1, figsize = (8, 8*np.size(CM_X_train,1)))\nfor i in range(0 , np.size(CM_X_train, 1)):\n    axes[i].set_xlabel(list(CM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CM_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 30, 90, color = 'green')\n    axes[i].hlines(66, 30, 90, color = 'green')\n    axes[i].hlines(61, 30, 90, color = 'green')\n    x_show = np.array(CM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CM_Y_test)\nplt.show()","644dd0b5":"LRM_data = data[data.Position_Simplified == 'LRM']","c29f30c4":"plt.figure(figsize = (8,8))\nplt.grid(color = 'red')\nplt.hist(LRM_data.Overall, color = 'blue')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Left\/Right Midfielders based on their overall rating', color = 'White', fontsize = 20)\nplt.show()","e6949691":"correlate_LRM = LRM_data[Evaluation_metrics + All_skills]\ncorrelate_LRM = correlate_LRM.corr()\ncorrelate_LRM = correlate_LRM.drop(Evaluation_metrics, axis = 1)\ncorrelate_LRM = correlate_LRM.drop(All_skills, axis = 0)","6a54a059":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_LRM, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the left\/right Midfielders', color = 'green', fontsize = 25)\nplt.show()","d18724e8":"LRM_skills = ['Crossing', 'Finishing', 'ShortPassing', 'Dribbling', 'BallControl', 'Reactions', 'LongShots', 'Positioning', 'Vision', 'Composure']","aa5d0fd9":"plt.figure(figsize = (20,20))\nsns.pairplot(LRM_data, x_vars = LRM_skills, y_vars = Evaluation_metrics)\nplt.show()","0a4d56c7":"LRM_regression_data = LRM_data[LRM_skills + ['Overall']]\nLRM_regression_data = LRM_regression_data.dropna(axis = 0)\nLRM_X_train, LRM_X_test, LRM_Y_train, LRM_Y_test = train_test_split(LRM_regression_data[LRM_skills],\n                                                                LRM_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","5492db19":"print(LRM_X_train.shape, LRM_X_test.shape, LRM_Y_train.shape, LRM_Y_test.shape)","3fbcf6b5":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV","4faf15d1":"Lasso_CV = LassoCV(eps = 0.001, n_alphas = 100, fit_intercept = True, copy_X = True)\nLasso_CV.fit(LRM_X_train,LRM_Y_train)","16ed2eff":"print('the alpha parameter calculated is', Lasso_CV.alpha_, 'The intercept calculated', Lasso_CV.intercept_)","670bae86":"lasso = Lasso(alpha = 0.13895669171744096, fit_intercept = True, precompute = False, warm_start = False)\nlasso.fit(LRM_X_train, LRM_Y_train)","d8d116ac":"lasso.get_params()","69999d99":"LRM_Y_predict = lasso.predict(LRM_X_test)\nprint(mean_squared_error(LRM_Y_test, LRM_Y_predict))","92eb5e83":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.13895669171744096, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(LRM_X_test.shape)\nmse = np.zeros((np.size(LRM_X_train, 1), ))\nfor i in range(0, np.size(LRM_X_train, 1)):\n    X_train = np.array(LRM_X_train)\n    Y_train = LRM_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    lasso.fit(X_train, Y_train)\n    X_test = np.array(LRM_X_test)\n    Y_test = LRM_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = lasso.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","fab34532":"fig , axes = plt.subplots(np.size(LRM_X_train, 1), 1, figsize = (8, 8*np.size(LRM_X_train,1)))\nfor i in range(0 , np.size(LRM_X_train, 1)):\n    axes[i].set_xlabel(list(LRM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(LRM_X_train.columns)[i]+' v\/s Overall average of Left\/Right Midfielder',\n                      color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(LRM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], LRM_Y_test)\nplt.show()","631d583c":"LRM_data['Overall'].describe()","d4ffa8fa":"fig , axes = plt.subplots(np.size(LRM_X_train, 1), 1, figsize = (8, 8*np.size(LRM_X_train,1)))\nfor i in range(0 , np.size(LRM_X_train, 1)):\n    axes[i].set_xlabel(list(LRM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(LRM_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 20, 90, color = 'green')\n    axes[i].hlines(67, 20, 90, color = 'green')\n    axes[i].hlines(62, 20, 90, color = 'green')\n    x_show = np.array(LRM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], LRM_Y_test)\nplt.show()","2e7e2f3a":"CAM_data = data[data.Position_Simplified == 'CAM']","76ed2fc1":"plt.figure(figsize = (8,8))\nplt.grid(color = 'black')\nplt.hist(CAM_data.Overall, color = 'red')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of Center Defenders based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","518e35af":"correlate_CAM = CAM_data[Evaluation_metrics + All_skills]\ncorrelate_CAM = correlate_CAM.corr()\ncorrelate_CAM = correlate_CAM.drop(Evaluation_metrics, axis = 1)\ncorrelate_CAM = correlate_CAM.drop(All_skills, axis = 0)","8839cf9a":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_CAM, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the attacking midfielders', color = 'green', fontsize = 25)\nplt.show()","fcbaf4d2":"CAM_skills = ['Crossing', 'Finishing', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve', 'LongPassing',\n              'BallControl', 'Reactions', 'ShotPower', 'LongShots', 'Positioning', 'Vision',\n              'Aggression', 'Composure']","f86725a2":"plt.figure(figsize = (20,30))\nsns.pairplot(CAM_data, x_vars = CAM_skills, y_vars = Evaluation_metrics)\nplt.show()","513a7c41":"CAM_regression_data = CAM_data[CAM_skills + ['Overall']]\nCAM_regression_data = CAM_regression_data.dropna(axis = 0)\nCAM_X_train, CAM_X_test, CAM_Y_train, CAM_Y_test = train_test_split(CAM_regression_data[CAM_skills],\n                                                                CAM_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","fdbee231":"print(CAM_X_train.shape, CAM_X_test.shape, CAM_Y_train.shape, CAM_Y_test.shape)","b9c1585f":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV","5f47f154":"Lasso_CV = LassoCV(eps = 0.001, n_alphas = 100, fit_intercept = True, copy_X = True)\nLasso_CV.fit(CAM_X_train, CAM_Y_train)","ffe8d8e1":"print('the alpha parameter calculated is', Lasso_CV.alpha_, 'The intercept calculated', Lasso_CV.intercept_)","a9089450":"lasso = Lasso(alpha = 0.3171430552809601, fit_intercept = True, precompute = False, warm_start = False)\nlasso.fit(CAM_X_train, CAM_Y_train)","830d06e0":"lasso.get_params()","4eb438b8":"CAM_Y_predict = lasso.predict(CAM_X_test)\nprint(mean_squared_error(CAM_Y_test, CAM_Y_predict))","97e48d22":"from sklearn.linear_model import Lasso\nelastic_net = Lasso(alpha = 0.12548123432868297, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(CAM_X_test.shape)\nmse = np.zeros((np.size(CAM_X_train, 1), ))\nfor i in range(0, np.size(CAM_X_train, 1)):\n    X_train = np.array(CAM_X_train)\n    Y_train = CAM_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    elastic_net.fit(X_train, Y_train)\n    X_test = np.array(CAM_X_test)\n    Y_test = CAM_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","acd6505a":"fig , axes = plt.subplots(np.size(CAM_X_train, 1), 1, figsize = (8, 8*np.size(CAM_X_train,1)))\nfor i in range(0 , np.size(CAM_X_train, 1)):\n    axes[i].set_xlabel(list(CAM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CAM_X_train.columns)[i]+' v\/s Overall average of CB defender',\n                      color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(CAM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CAM_Y_test)\nplt.show()","88002142":"CAM_data['Overall'].describe()","3cc7a03c":"fig , axes = plt.subplots(np.size(CAM_X_train, 1), 1, figsize = (8, 8*np.size(CAM_X_train,1)))\nfor i in range(0 , np.size(CAM_X_train, 1)):\n    axes[i].set_xlabel(list(CAM_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(CAM_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 30, 90, color = 'green')\n    axes[i].hlines(67, 30, 90, color = 'green')\n    axes[i].hlines(63, 30, 90, color = 'green')\n    x_show = np.array(CAM_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], CAM_Y_test)\nplt.show()","d75ffaf5":"LRW_data = data[data.Position_Simplified == 'LRW']","c7a5d67d":"plt.figure(figsize = (8,8))\nplt.grid(color = 'red')\nplt.hist(LRW_data.Overall, color = 'yellow')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Center defensive Mids based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","273ebe79":"correlate_LRW = LRW_data[Evaluation_metrics + All_skills]\ncorrelate_LRW = correlate_LRW.corr()\ncorrelate_LRW = correlate_LRW.drop(Evaluation_metrics, axis = 1)\ncorrelate_LRW = correlate_LRW.drop(All_skills, axis = 0)","1c8a38b5":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_LRW, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the centre Ful backs', color = 'green', fontsize = 25)\nplt.show()","873552ec":"LRW_skills = ['Crossing', 'Finishing', 'Dribbling', 'ShortPassing', 'Curve', 'LongPassing',\n              'BallControl', 'Reactions', 'LongShots', 'Positioning', 'Composure', 'Vision']","09e5daf4":"plt.figure(figsize = (20,20))\nsns.pairplot(LRW_data, x_vars = LRW_skills, y_vars = Evaluation_metrics)\nplt.show()","21f7699c":"LRW_regression_data = LRW_data[LRW_skills + ['Overall']]\nLRW_regression_data = LRW_regression_data.dropna(axis = 0)\nLRW_X_train, LRW_X_test, LRW_Y_train, LRW_Y_test = train_test_split(LRW_regression_data[LRW_skills],\n                                                                LRW_regression_data['Overall'],\n                                                                test_size = 0.25, random_state = 42)","5bb51890":"print(LRW_X_train.shape, LRW_X_test.shape, LRW_Y_train.shape, LRW_Y_test.shape)","be877f9a":"from sklearn.linear_model import LassoCV\nlasso_cv = LassoCV(eps = 0.001, alphas = None, fit_intercept = True, selection = 'cyclic')\nlasso_cv.fit(LRW_X_train, LRW_Y_train)\nprint('The value of alpha of this model: ', lasso_cv.alpha_ , '\\nThe value of intercept: ', lasso_cv.intercept_)","c4a9b7aa":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.11275707234321862, precompute = False, warm_start = False, selection = 'cyclic')\nlasso.fit(LRW_X_train, LRW_Y_train)","fde84ed2":"lasso.get_params()","8c78e249":"LRW_Y_predict = lasso.predict(LRW_X_test)\nprint('The squared error obtained is: ', mean_squared_error(LRW_Y_predict, LRW_Y_test))","97073767":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha = 0.11275707234321862, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(LRW_X_test.shape)\nmse = np.zeros((np.size(LRW_X_train, 1), ))\nfor i in range(0, np.size(LRW_X_train, 1)):\n    X_train = np.array(LRW_X_train)\n    Y_train = LRW_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    elastic_net.fit(X_train, Y_train)\n    X_test = np.array(LRW_X_test)\n    Y_test = LRW_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","addc22f1":"fig , axes = plt.subplots(np.size(LRW_X_train, 1), 1, figsize = (8, 8*np.size(LRW_X_train,1)))\nfor i in range(0 , np.size(LRW_X_train, 1)):\n    axes[i].set_xlabel(list(LRW_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(LRW_X_train.columns)[i]+' v\/s Overall average of player', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(LRW_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], LRW_Y_test)\nplt.show()","c938020f":"LRW_data.Overall.describe()","5e073305":"fig , axes = plt.subplots(np.size(LRW_X_train, 1), 1, figsize = (8, 8*np.size(LRW_X_train,1)))\nfor i in range(0 , np.size(LRW_X_train, 1)):\n    axes[i].set_xlabel(list(LRW_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(LRW_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 20, 90, color = 'green')\n    axes[i].hlines(66, 20, 90, color = 'green')\n    axes[i].hlines(63, 20, 90, color = 'green')\n    x_show = np.array(LRW_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], LRW_Y_test)\nplt.show()","1e2902ff":"data['Position_Simplified'] = data['Position_Simplified'].replace('ST', 'Forwards')\ndata['Position_Simplified'] = data['Position_Simplified'].replace('CF', 'Forwards')","976da6b1":"Forwards_data = data[data.Position_Simplified == 'Forwards']","2829846b":"plt.figure(figsize = (8,8))\nplt.grid(color = 'black')\nplt.hist(Forwards_data.Overall, color = 'red')\nplt.xlabel('Overall rating', color = 'yellow', fontsize = 15)\nplt.ylabel('Number of players', color = 'yellow', fontsize = 15)\nplt.xticks(color = 'yellow')\nplt.yticks(color = 'yellow')\nplt.title('Disturbution of forwards based on their overall rating', color = 'green', fontsize = 20)\nplt.show()","f49f816d":"correlate_Forwards = Forwards_data[Evaluation_metrics + All_skills]\ncorrelate_Forwards = correlate_Forwards.corr()\ncorrelate_Forwards = correlate_Forwards.drop(Evaluation_metrics, axis = 1)\ncorrelate_Forwards = correlate_Forwards.drop(All_skills, axis = 0)","7219565e":"plt.figure(figsize = (20, 8))\nsns.heatmap(correlate_Forwards, linewidth = 0.5,annot = True, linecolor = 'white')\nplt.xticks(color = 'yellow', fontsize = 15)\nplt.yticks(color = 'yellow', fontsize = 15)\nplt.xlabel('Various skills of the players', color = 'yellow', fontsize = 20)\nplt.ylabel('Evaluation Metrics of the players', color = 'yellow', fontsize = 20)\nplt.title('Correlation of Skills and Evaluation metrics of the Forwards', color = 'green', fontsize = 25)\nplt.show()","3c209eb7":"Forwards_skills = ['Finishing', 'ShortPassing', 'Volleys', 'Dribbling', 'BallControl', 'Reactions',\n                   'ShotPower', 'LongShots', 'Positioning', 'Composure']","1b7bcbb6":"plt.figure(figsize = (20,20))\nsns.pairplot(Forwards_data, x_vars = Forwards_skills, y_vars = Evaluation_metrics)\nplt.show()","bac9f019":"Forwards_regression_data = Forwards_data[Forwards_skills + ['Overall']]\nForwards_regression_data = Forwards_regression_data.dropna(axis = 0)\nForwards_X_train, Forwards_X_test, Forwards_Y_train, Forwards_Y_test = train_test_split(Forwards_regression_data[Forwards_skills],\n                                                                                        Forwards_regression_data['Overall'],\n                                                                                        test_size = 0.25, random_state = 42)","c80d030e":"print(Forwards_X_train.shape, Forwards_X_test.shape, Forwards_Y_train.shape, Forwards_Y_test.shape)","1e41b2d5":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV","830a4f90":"Lasso_CV = LassoCV(eps = 0.001, n_alphas = 100, fit_intercept = True, copy_X = True)\nLasso_CV.fit(Forwards_X_train, Forwards_Y_train)","63405663":"print('the alpha parameter calculated is', Lasso_CV.alpha_, 'The intercept calculated', Lasso_CV.intercept_)","40b4f509":"lasso = Lasso(alpha = 0.06811647800000001, fit_intercept = True, precompute = False, warm_start = False)\nlasso.fit(Forwards_X_train, Forwards_Y_train)","750d66fb":"lasso.get_params()","1f9bb0c8":"Forwards_Y_predict = lasso.predict(Forwards_X_test)\nprint(mean_squared_error(Forwards_Y_test, Forwards_Y_predict))","7c5dfa34":"from sklearn.linear_model import Lasso\nelastic_net = Lasso(alpha = 0.06811647800000001, fit_intercept = True, normalize = False,\n                        precompute = False, max_iter = 1000, copy_X = True, tol = 0.0001, warm_start = False,\n                        positive = False, random_state = None, selection = 'cyclic')\nY_predict = np.zeros(Forwards_X_test.shape)\nmse = np.zeros((np.size(Forwards_X_train, 1), ))\nfor i in range(0, np.size(Forwards_X_train, 1)):\n    X_train = np.array(Forwards_X_train)\n    Y_train = Forwards_Y_train\n    X_train = X_train[:, i]\n    X_train = X_train[:, np.newaxis]\n    elastic_net.fit(X_train, Y_train)\n    X_test = np.array(Forwards_X_test)\n    Y_test = Forwards_Y_test\n    X_test = X_test[:, i]\n    X_test = X_test[:, np.newaxis]\n    Y_predict[:, i] = elastic_net.predict(X_test)\n    mse[i] = mean_squared_error(Y_predict[:, i], Y_test)","f40b7e4b":"fig , axes = plt.subplots(np.size(Forwards_X_train, 1), 1, figsize = (8, 8*np.size(Forwards_X_train,1)))\nfor i in range(0 , np.size(Forwards_X_train, 1)):\n    axes[i].set_xlabel(list(Forwards_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(Forwards_X_train.columns)[i]+' v\/s Overall average of Forwards',\n                      color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    x_show = np.array(Forwards_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], Forwards_Y_test)\nplt.show()","57572dd8":"Forwards_data['Overall'].describe()","97a285c0":"fig , axes = plt.subplots(np.size(Forwards_X_train, 1), 1, figsize = (8, 8*np.size(Forwards_X_train,1)))\nfor i in range(0 , np.size(Forwards_X_train, 1)):\n    axes[i].set_xlabel(list(Forwards_X_train.columns)[i], color = 'green', fontsize = 15)\n    axes[i].set_ylabel('overall', color = 'green', fontsize = 15)\n    axes[i].set_title(list(Forwards_X_train.columns)[i]+' v\/s Overall rating with grouping', color = 'yellow', fontsize = 20)\n    axes[i].grid('True')\n    axes[i].hlines(71, 30, 90, color = 'green')\n    axes[i].hlines(66, 30, 90, color = 'green')\n    axes[i].hlines(62, 30, 90, color = 'green')\n    x_show = np.array(Forwards_X_test)\n    axes[i].plot(x_show[:, i], Y_predict[:, i], color = 'black', linewidth = 3)\n    axes[i].scatter(x_show[:, i], Forwards_Y_test)\nplt.show()","6a923153":"<p style = 'font-family: comic sans ms; color: green'> Grouping attacking midfielders just like we did with the goalies such that we find out the skill score boundaries. <\/p>","60a0df8a":"<p style= 'font-family: comic sans ms; color: green'> Assuming that the top 25% players with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often. <\/p>","0054870f":"<p style = 'font-family: comic sans ms; color: red'>Now, task is to find if there is any relation between the evaluation parameters and the physical aspects of the players<\/p>","50190849":"<p style = 'font-family :comic sans ms; color : green'> Nearly 75% of the players are aged between 20 and 30. youngsters almost make 1\/8th of the total, the experinced players make the same contribution too<\/p>\n<p style = 'font-family :comic sans ms; color : red'>Let's find out the player's perfomance with respective to their age groups.<\/p> ","f497b552":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.7 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is incluse of Crossing, Finishing, short passing, Volleys, Dribbling, Curve, long passing, ball control, reactions, shotpower, Long shots, Positioning, Vision, aggression, composure.<\/p>","a58c6de6":"<p style = 'font-family: comic sans ms; color: green'> According to the correlation map above, in order to increase their overall rating, the wing backs must focus much on their Crossing, Shortpassing, Dribbling, Ballcontrol, Reactions, Interceptions, Composure, Marking, Standing Tackle, Sliding Tackle.<\/p>","c7dcd5b0":"<h2 style = 'font-family: comic sans ms; color: green'>Now who's going to support Center mids? Ofcourse Left\/Right mids.<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> The left\/right midfielder acts passer of the ball. The left\/right midfielder must by skilled, but can get away with less speed than other positions... He can help the team retain possession and set up wingers and forwards with great passes.<\/p>","b64f0a4f":"<p style = 'font-family: comic sans ms; color: green'> Based on the graph the below conclusions can be made: <\/p>\n<p style = 'font-family:comic sans ms; color: yellow'> (i) To be placed in the top 25 percent of the goalies one should averagely maintain an Heading Accuracy score of 73, A Short Passing score almost equal to 67, Long Passing skill score of 65, Ball control skills of 64, Reactions score almost of 67, and aggression rate more than 77, Interceptions score over 71, Composure above 66, Marking of the ball score of atleast 71, Standing tackle above 73, Sliding tackle over 71.<\/p>\n<p style = 'font-family:comic sans ms; color: yellow'> (ii) The second option is to have an average centre back defenders and have extra left or right wing back fielders to compensate the weakness at the goalie end. Choosing these center backs with an Heading Accuracy score in between 73 and 66, diving4 skills of max 70 and min 65,goal handling score midst of 62 and 67, kicking score with atleast 61 and max of 68, positioning score with 62 and 69, and reflexes score in the set of (65, 71). <\/p>\n<p style = 'font-family: comic sans ms; color: yellow'> (iii) Before choosing this category of Goalkeepers for your team ensure that you have a very strong back fielders and the centre-back fielder must be in sync with the goalie and must be highly defensive. These goalies have a reaction score between 58 and 50, a diving score inbetween 60 and 65, ball handling skills in the set of 57 and 62, ball kicking score between 54 and 61, positioning score atleast 56 and 62, and reflexes between 60 and 65. <\/p>\n<p style = 'font-family: comic sans ms; color: yellow'> (iv) Now this category of goal keepers need a set of back fielders with more than 2 members(use left or right full back fielders, centre back fielders) in order to compensate the goal keeper. These have reaction score less than 50, diving score below 60, ball handling score behind 57, ball kicking score less than 54, positioning score below 56, reflexes below 60. <\/p>","324a24d5":"<p style = 'font-family: comic sans ms; color: green'> Based on the graph the below conclusions can be made: <\/p>\n<p style = 'font-family:comic sans ms; color: yellow'> (i) To be placed in the top 25 percent of the goalies one should averagely maintain an Reactions score of 66, A diving score almost equal to 70, goal handling skill score of 67, kicking skills of 68, positioning of the ball score almost of 69, and high reflexes rate more than 71.<\/p>\n<p style = 'font-family:comic sans ms; color: yellow'> (ii) The second option is to have an average goal keeper and strong back fielders to compensate the weakness at the goalie end. Choosing a goalie with an Reactions score in between 66 and 58, diving skills of max 70 and min 65,goal handling score midst of 62 and 67, kicking score with atleast 61 and max of 68, positioning score with 62 and 69, and reflexes score in the set of (65, 71). <\/p>\n<p style = 'font-family: comic sans ms; color: yellow'> (iii) Before choosing this category of Goalkeepers for your team ensure that you have a very strong back fielders and the centre-back fielder must be in sync with the goalie and must be highly defensive. These goalies have a reaction score between 58 and 50, a diving score inbetween 60 and 65, ball handling skills in the set of 57 and 62, ball kicking score between 54 and 61, positioning score atleast 56 and 62, and reflexes between 60 and 65. <\/p>\n<p style = 'font-family: comic sans ms; color: yellow'> (iv) Now this category of goal keepers need a set of back fielders with more than 2 members(use left or right full back fielders, centre back fielders) in order to compensate the goal keeper. These have reaction score less than 50, diving score below 60, ball handling score behind 57, ball kicking score less than 54, positioning score below 56, reflexes below 60. <\/p>","781d3066":"<p style = 'font-family: comic sans ms; color: green'> So our model has performed great on the dataset with a mean squared error of almost 1.7252981533202427. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> now see the regression plot between each feature and the output Overall. <\/p>","2c9ccb9b":"<p style = 'font-family: comic sans ms; color: red'>Importing the CSV file and converting it into a pandas data frame<\/p>\n<p style = 'font-family: comic sans ms; color: blue'>I wish I could import my dreams into real world and convert Scarlett Johnsson as my girl friend <\/p>","49b4c0e7":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","ed40a709":"<p style = 'font-family: comic sans ms; color: green'> Looking at the above correlation map, considering the correlation scores above 0.75 to perform futher analysis. The set consists of Shortpassing, Long passing, ball control, Reactions, Interceptions, Vision, Composure, Standing Tackle.<\/p>","10fab99e":"<p style = 'font-family :comic sans ms; color : green'> According to the plot, the players of lower age group perform a little low than than other age groups. Players in thier 20's are performing better. But the players inbetween 30 and 35 have outperformed most of the other players. This proves that 'As there's growth in experience the overall performance increases too.'<\/p>","dd45e5db":"<p style = 'font-family: comic sans ms; color: red'> Lasso Regression: It is a linear model that estimates sparse cofficients. Lasso uses co-ordinate descent as the algorithm to fit the cofficients.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using LassoCV cross validation to find the best Alpha parameter in order to fit it to the Lasso model and make sure it is the best value. <\/p>","379aaf6f":"<p style= 'font-family: comic sans ms; color: red'>Grouping players based on thier Overall rating and finding out each goal keeping skill's importance. <\/p>","74195584":"<p style ='font-family: comic sans ms; color:blue'> LEFT OR RIGHT MIDFIELDERS: <\/p>\n<p style ='font-family: comic sans ms; color: green'>Left and right midfielders have a role balanced between attack and defence, similar to that of central midfielders, but they are positioned closer to the touchlines of the pitch. They may be asked to cross the ball into the opponents' penalty area to make scoring chances for their teammates, and when defending they may put pressure on opponents who are trying to cross.<\/p>","71fd09dc":"<p style = 'font-family: comic sans ms; color: green'> Now asusual preparing the data for building a regression model for the left and right center defensive mid fielders. <\/p>","9eb91ce9":"<p style='font-family: comic sans ms; color:blue'>LEFT BACK AND RIGHT BACK:<\/p>\n<p style = 'font-family: comic sans ms; color:green'> They must provide a physical obstruction to opposition attacking players. Making off-the-ball runs into spaces down the channels and supplying crosses into the opposing penalty box. Throw-ins are often assigned to full-backs.<\/p>","ccad5237":"<p style = 'font-family: comic sans ms; color: red'> Lasso Regression: It is a linear model that estimates sparse cofficients. Lasso uses co-ordinate descent as the algorithm to fit the cofficients.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using LassoCV cross validation to find the best Alpha parameter in order to fit it to the Lasso model and make sure it is the best value. <\/p>","0a9eb633":"<p style = 'font-family: comic sans ms; color: red'> Now focus only on the goal keepers. Let's evaluate their skills, income, experience and all briefly<\/p>","7c4faef3":"<p style = 'font-family: comic sans ms; color: green'> Assuming that the top 25% centre defenders with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often.<\/p>","5c505e37":"<h2 style = 'font-family: comic sans ms;'>A quick glance at the Countries participating<\/h2>\n<p style = 'font-family: comic sans ms; color: red'>There are 164 unique country players who are listed in our data. Lets find the most number of players from a country, the most talented players in each country, the country with the most successful players.<\/p>\n","08a95823":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","15809975":"<h2 style = 'font-family: comic sans ms; color: green'> Forwards...assemble and goal<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> Analysing all the players who will be placed near to the opposition goal post. left forward, right forward, left centre forward, right and left strikers, striker positions fall in this category.<\/p>","439449b7":"<p style = 'font-family: comic sans ms; color: red'> Lasso Regression: It is a linear model that estimates sparse cofficients. Lasso uses co-ordinate descent as the algorithm to fit the cofficients.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using LassoCV cross validation to find the best Alpha parameter in order to fit it to the Lasso model and make sure it is the best value. <\/p>","c3160421":"<p style = 'font-family: comic sans ms; color: green'> Now preparing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome. <\/p>","59129cbd":"<p style = 'font-family: comic sans ms; color: green'> Most goalies are rated in between 60 and 75 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for a goal keeper and analysing each of them. <\/p>","92a9f809":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.7 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is inclusive of Crossing, Finishing, short passing, Dribbling, Long Shots, ball control, reactions, composure, Positioning, Vision. <\/p>","9b279d0e":"<p style= 'font-family: comic sans ms; color: red'> Ridge Regression: This is a simple regression model with one L2 regularization parameter.<\/p>\n<p style = 'font-family: comic sans ms; color: green'>Using RidgeCV to apply a cross validation on the data set to find the best alpha value.<\/p>","2fcef2e7":"<p style = 'font-family: comic sans ms; color: green'> So, Goalkeeper's skills are mainly Reactions, diving, Goal Handling, goal kicking, Goal Positioning, Reflexes at goal post.<\/p>","d1b62fbf":"<p style ='font-family: Comic Sans MS;color:red'>Deleting all the rows that doesn't contain Age values<\/p>","1b4cbb1a":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","2f48aa32":"<p style = 'font-family: comic sans ms; color: green'> Let's visualize each of the feature and its regression with Overall rating of the Attacking midfielders to get a clean idea. <\/p>","d9f002ad":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.7 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is incluse of Crossing, Finishing, Dribbling, short passing, Curve, long passing, ball control, reactions, Longshots, Positioning, composure, Vision. <\/p>","cb7d59ca":"<p style = 'font-family: comic sans ms; color: green'> Grouping centre defensive mid players just like we did with the goalies such that we find out the skill score boundaries.<\/p>","4fdb0db6":"<h2 style = 'font-family: comic sans ms; color: green'> Peeking at those rare left or right Wing back fielders: <\/h2>\n<p style = 'font-family: comic sans ms; color: red'> These players aren't used as often. But if the defending part of the team was seen a bit weak or the mid fielders of the opposite team a little too strong these players are used. Metodo formation of players have these wing back players in the form of (2-3-2-3)<\/p> ","c6525685":"<p style = 'font-family: comic sans ms; color: green'> Now preparing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome.<\/p>","497f1845":"<p style = 'font-family: comic sans ms; color: green'> Using Elastic-net Cross validation method the best alpha value to perform elastic net regression is 0.1372597751010709 and l1 ratio is 0.5.<\/p>\n<p style = 'font-family: comic sans ms; color: red'> Now using those values to fit to a normal elastic net regression.<\/p>","7ef51128":"<p style = 'font-family: comic sans ms; color: red'> Elastic Net Regression: This is just a linear regression with extra regularization term in its cost function. The penality introduced in this regression contains both l1 and l2 regularizers.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using ElasticNetCV (elastic net cross validation) to find the best regularizing parameters and applying those parameters to elastic net regressor for best results.<\/p>\n","5768f9b4":"<h2 style = 'font-family: comic sans ms; color: green'> Centre Mids got a lot in their plate. Hmm...<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> The center midfielder is every team's main passer of the ball. The center midfielder must by skilled, but can get away with less speed than other positions. ... He can help the team retain possession and set up wingers and forwards with great passes<\/p>","8f94d367":"<h2 style = 'font-family: comic sans ms; color: green'> Let's talk midfielders those attack<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> An attacking midfielder is a midfield player who is positioned in an advanced midfield position, usually between central midfield and the team's forwards, and who has a primarily offensive role<\/p>","c93916f8":"<h2 style = 'font-family: comic sans ms'>Positions:<\/h2>\n","65bee2a8":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 69 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for a full back and analysing each of them. <\/p>","877cd691":"<p style = 'font-family: comic sans ms; color: green'> Let's visualize each of the feature and its regression with Overall rating of the centre back defenders to get a clean idea. <\/p>","23732d52":"<header>\n    <p style = 'font-family: comic sans ms; color: red'> Let's import the data(input) and required visualization tools and libraries. <\/p>\n    <p style = 'font-family: comic sans ms;color: red'> Numpy, Scipy, Pandas for data handling and cleaning and Matplotlib, Seaborn for data visualisation to get a overview on what data actually is. <\/p>\n    <p style = 'font-family: comic sans ms; color: blue'> Trust me going through those libraries' API references was way harder than stopping Ronaldo score :\/ <\/p>\n    <\/header>","81fb335d":"<p style = 'font-family:comic sans ms; color:green'> Assuming that the top 25% centre mid defenders with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often.<\/p>","62e32d5c":"<p style = 'font-family: comic sans ms; color: red'> Let's draw a line between Overall rating and the Release Clause<\/p>","c0a2cb60":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 75 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for a center defender and analysing each of them. <\/p>","4735ea25":"<p style = 'font-family: comic sans ms; color: green'> As the count of the players is very less we can't perform any regression algorithm, so let's just visualize its disturbution and correlate it with the evaluation metrics. <\/p>","36411278":"<p style = 'font-family: comic sans ms; color: green'> Let's visualize each of the feature and its regression with Overall rating of the centre back defenders to get a clean idea. <\/p>","80799028":"<p style = 'font-family: comic sans ms; color: green'>England has produced the most number of players and Germany, Spain and Argentina took the next spots.<\/p>","f734f410":"<p style = 'font-family: comic sans ms; color: green'> Now prepareing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome. <\/p>","f88f56ce":"<p style = 'font-family: comic sans ms; color: green'> Assuming that the top 25% centre mid fielders with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often.<\/p>","460785b0":"<p style = 'font-family: comic sans ms; color: green'> Assuming that the top 25% Attacking midfielders with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often.<\/p>","cc3d52a3":"<p style = 'font-family: comic sans ms; color: green'> Let's visualize each of the feature and its regression with Overall rating of the Forwards to get a clean idea. <\/p>","ddb08e95":"<p style ='font-family: comic sans ms; color:blue'> CENTRAL OR CENTER MIDFIELDERS: <\/p>\n<p style ='font-family: comic sans ms; color: green'> Central or centre midfielders are players whose role is divided roughly equally between attack and defence and to dominate the play around the centre of the pitch. These players will try to pass the ball to the team's attacking midfielders and forwards and may also help their team's attacks by making runs into the opposition's penalty area and attempting shots on goal themselves.<\/p>","0e95f677":"<p style= 'font-family: comic sans ms; color: red'>Grouping players based on thier Overall rating and finding out each goal keeping skill's importance. <\/p>","e8efc663":"<p style = 'font-family: comic sans ms; color: green'> Grouping centre mid fielders just like we did with the other players such that we find out the skill score boundaries. <\/p>","ebaa697e":"<p style = 'font-family: comic sans ms; color: green'> So our model has performed great on the dataset with a mean squared error of almost 2.386956992746. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> now see the regression plot between each feature and the output Overall. <\/p>","15a01fc5":"<p style = 'font-family: comic sans ms; color: green'> Grouping forwards players just like we did with the goalies such that we find out the skill score boundaries. <\/p>","fe574a00":"<h2 style ='font-family: comic sans ms; color: green'> Dear Full backs... Prepare to build a wall.<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> The full-backs (the left-back and the right-back) take up the holding wide positions and traditionally stayed in defence at all times, until a set-piece.<\/p>","90a3769b":"<p style = 'font-family: comic sans ms; color: green'> Using lasso Cross validation method the best alpha value to perform elastic net regression is 0.051402382845.<\/p>\n<p style = 'font-family: comic sans ms; color: red'> Now using those values to fit to a normal lasso regression.<\/p>","8103d7fd":"<p style = 'font-family: comic sans ms; color : red'> Look at the Age vs Value plot. It's interesting <\/p>","7cc14f64":"<p style = 'font-family: comic sans ms; color: red'> Let's get an detailed overview: <\/p>","48990519":"<p style = 'font-family: comic sans ms; color: green'> Lets visualize each of the feature and its regression with Overall rating of the player.<\/p>","5f5da1d7":"<p style= 'font-family: comic sans ms; color: green'> Assuming that the top 25% goakeepers with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often. <\/p>","a370d9d7":"<p style = 'font-family: comic sans ms; color: green'>Based on the histogram plot and the violin plot we can imply that average age of a soccer player is 25 and mostly players are in between 20 and 30.<\/p>\n<p style = 'font-family: comic sans ms; color: red'>","86f25fbc":"<p style = 'font-family: comic sans ms; color: red'>This pairplot showed almost no relation between evaluation and body build of the soccer. <\/p>\n<p style = 'font-family: comic sans ms; color: green'> Correlation: Correlation is a statistical measure that indicates the extent to which two or more variables fluctuate together. A positive correlation indicates the extent to which those variables increase or decrease in parallel; a negative correlation indicates the extent to which one variable increases as the other decreases.<\/p>\n<p style = 'font-family: comic sans ms; color: red'>So lets try defining that pairplot relation using Correlation and by mapping it using a heatmap .<\/p>","a1966cfa":"<p style = 'font-family: comic sans ms; color: green'> Assuming that the top 25% centre mid fielders with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often.<\/p>","7506ad76":"<p style = 'font-family: comic sans ms; color: red'>Creating a list of objects\/features on which a soccer player is mostly rated.<\/p>\n<p style = 'font-family: comic sans ms; color: blue'> I once had a list of girls who rejected me. My parents found it. I lied that its my class's girls attendence sheet. They believed it because its 2 pages. <\/p>","b3d740c9":"<p style = 'font-family: comic sans ms; color: blue'> CENTRE-FORWARD, LEFT AND RIGHT CENTRE-FORWARDS:<\/p>\n<p style = 'font-family: comic sans ms; color: green'>The traditional role of a centre-forward is to score the majority of goals on behalf of the team. The player may also be used to win long balls or receive passes and retain possession of the ball with their back to goal as teammates advance, in order to provide depth for their team or help teammates score by providing a pass ('through ball' into the box); the latter variation usually requiring quicker pace and good movement. Most modern centre-forwards operate in front of the second strikers or central attacking midfielders, and do the majority of the ball handling outside the box. The present role of centre-forward is sometimes interchangeable with that of an attacking midfielder.<\/p>","c8ef884d":"<p style = 'font-family: comic sans ms; color: blue'> ATTACKING MID FIELDERS:<\/p>\n<p style = 'font-family: comic sans ms; color: green'> According to positioning along the field, attacking midfield may be divided into left, right and central attacking midfield roles but mostly important he is a striker behind the forwards. A central attacking midfielder may be referred to as a playmaker, or number ten (due to the association of the number 10 shirt with this position).[30][31] A good attacking midfielder needs good passing abilities, vision, the ability to make long shots, and solid dribbling skills.<\/p>","cd650ced":"<p style = 'font-family: comic sans ms; color: red'> Enough of drama. Lets get to real business. Player's most important aspect is his position.<\/p>\n<p style = 'font-family: comic sans ms; color: red'> lets start with simplifying psotions<\/p>","2eb31911":"<h2 style='font-family:comic sans ms'>Age matters? really? lets see<h2>","149a7534":"<p style = 'font-family: comic sans ms; color: green'> Now prepareing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome. <\/p>","1946ed55":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 75 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for left and right mids and analysing each of them. <\/p>","59f9c504":"<p style = 'font-family: comic sans ms; color: red'>Delete some unwanted columns like ID, work rate and Sno.s <\/p>\n<p style = 'font-family: comic sans ms; color: blue'>Just like my friends deleted my contact number from thier phones.<\/p>","658991d7":"<p style = 'font-family: comic sans ms; color: green'> Now preparing data to build a regression model on it. Let's split the available data into two parts, one for training our regression model and other for testing the model for accuracy. (using sci-kit learn libraries for all models) <\/p>","41f5f98f":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.7 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is incluse of Crossing, Dribbling, shot passing, long passing, ball control, reactions, interceptions, composure, marking, standing tackle, sliding tackle. <\/p>","217e16ad":"<p style = 'font-family: comic sans ms; color: blue'> CENTRE-BACK, LEFT AND RIGHT CENTRE-BACK:<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Also known as centre defenders, these players play important role in blocking and stopping the opposition strikers and forward offensive players shooting the goal. They cover a specific person. Every soccer formation must contain atleast one centre defender. Cause its as equally necessary to stop a goal just like scoring one.","ca5cf972":"<p style = 'font-family: comic sans ms; color: green'> Our model has scored a mean squared error of 2.21187127 and visualizing the output as follows.<\/p>","bb2ae36d":"<p style= 'font-family: comic sans ms; color: red'>Grouping players based on thier Overall rating and finding out each goal keeping skill's importance. <\/p>","7b47222b":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","0b27688d":"<h2 style = 'font-family: comic sans ms; color: green'>Defensive Mid fielders... Let's shield our centre circle.<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> Mid fielders, one of the crucial part of the team. Defensive mids stay on the centre circle but stay close to the defensive end of the field. They are responsible for both defending the opposition's attacking mid fielders from passing the ball to the strikers and the forwards and also positioning the ball towards thier own forwards adding strength to the center circle.<\/p>","1ad67424":" <p style = 'font-family: comic sans ms; color : green'>Brazil has the most number of Players with lot of experience (with age above 30 years). England and Argentina stands just below Brazil in terms of experince of players. <\/p>","41a47b0f":"<p style = 'font-family: comic sans ms; color: green'> Now prepareing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome. <\/p>","a7202f8a":"<p style = 'font-family: comic sans ms; color: red'>Replacing some false values with appropriate values<\/p>\n<p style = 'font-family: comic sans ms; color: blue'>Like people replace me with better ones<\/p>","585360c3":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","85174420":"<p style ='font-family: comic sans ms; color: green'>Based on the graph the below conclusions can be made:<\/p>\n<p style ='font-family: comic sans ms; color: yellow'>","c54af5ce":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 75 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for a center defender and analysing each of them. <\/p>","d875a3e3":"<p style = 'font-family: comic sans ms; color: blue'> STRIKER, LEFT AND RIGHT STRIKER:<\/p>\n<p style = 'font-family: comic sans ms; color: green'> The role of a striker is rather different from that of a traditional centre-forward, although the terms centre-forward and striker are used interchangeably at times, as both play further up the field than other players, while tall, heavy and technical players, like Zlatan Ibrahimovi\u0107, have qualities which are suited to both positions.[7] Like the centre-forward, the traditional role of a striker is to score goals; strikers are therefore known for their ability to peel off defenders and to run into space via the blind side of the defender and to receive the ball in a good goalscoring position.<\/p>","027e3a6a":"<h2 style = 'font-family : comic sans ms'> Talking in terms of money <\/h2>\n<p style = 'font-family : comic sans ms;color :red'> Money is also an important factor in determing a player. So lets talk about wage, value and release clauses of different players and countries<\/p>","7de33a62":"<p style ='font-family: Comic Sans MS;color:red'>take a look at the graph to get idea how the the age group is disturbuted<\/p>","bd662576":"<p style = 'font-family: comic sans ms; color: red'>Creating a list of attributes that define the physical build of a soccer player<\/p>","c14ca82e":"<p style = 'font-family: comic sans ms; color: green'> So our model has performed great on the dataset with a mean squared error of almost 0.11304 <\/p>\n<p style = 'font-family: comic sans ms; color: red'> now see the regression plot between each feature and the output Overall. <\/p>","ca4bb579":"<p style = 'font-family: comic sans ms; color: green'> Let's visualize each of the feature and its regression with Overall rating of the L\/R mids to get a clean idea. <\/p>","7f7e18cf":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.6 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is inclusive of Crossing, short passing, long passing, Dribbling, Shot Power,Long Shots, ball control, reactions, composure, marking, Positioning, Vision. <\/p>","47f317c1":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","c83b0080":"<h2 style = 'font-family: comic sans ms; color: green'>Wings do fly.<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> A winger (left winger and right winger) (historically called outside-left and outside-right, or outside forward) is an attacking player who is stationed in a wide position near the touchlines.<\/p>","b86b7870":"<header>\n   <h1 style = \"font-family: comic sans ms; color: blue; font-size:400%; text-align: center; background-color = yellow\" > FIFA 2k19<\/h1>\n   <p style = 'color: red; font-family: comic sans ms'>Let's evaluate the importance and strategies of different positions on the soccer field and also find the best requirments needed for a player to perform better at his position and make a contribution for the team.<\/p>\n   <p style = 'color: red; font-family: comic sans ms'>Teaming up players with different strategies and techniques to overcome their weakness and to defend and attack the opposition. <\/p>\n   <p style = 'color: blue; font-family: comic sans ms'> And all the Messi and Neymar fan out there, don't get gloomy by CR7's photograph. You will be entertained too. Just scroll down and down. <\/p>\n   <\/header>\n","4d2c8517":"<p style = 'font-family: comic sans ms; color : green'> According to the graph Brazil has the best average players rating. Spain stands in the second position in the list. Argentina is just below it.<\/p>\n<p style = 'font-family: comic sans ms; color : red'>Now let's get an idea how experienced the players are in each country.<\/p>","0af4bc37":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 75 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for a center defender and analysing each of them. <\/p>","e5175f4a":"<p style = 'font-family: comic sans ms; color: red'>The Correlation heatmap tilted almost zero, refering their is no much dependence of output on the body aspects of player.<\/p>\n<p style = 'font-family: comic sans ms; color: blue'> just like my relationship with my crush.<\/p>\n<p style = 'font-family: comic sans ms; color: green'>Clearly, their is almost no relation between the player's physical body aspects and their soccer skills.<\/p> ","d5357ada":"<p style = 'font-family: comic sans ms; color: red'> Lasso Regression: It is a linear model that estimates sparse cofficients. Lasso uses co-ordinate descent as the algorithm to fit the cofficients.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using LassoCV cross validation to find the best Alpha parameter in order to fit it to the Lasso model and make sure it is the best value. <\/p>","ca67b73c":"<p style = 'font-family: comic sans ms; color: green'> Using lasso Cross validation method the best alpha value to perform elastic net regression is 0.11275707234321862.<\/p>\n<p style = 'font-family: comic sans ms; color: red'> Now using those values to fit to a normal lasso regression.<\/p>","e56910a4":"<p style = 'font-family: comic sans ms; color: green'> Grouping L\/R mid fielders just like we did with the other players such that we find out the skill score boundaries. <\/p>","707d69cc":"<p style = 'font-family: comic sans ms; color: green'> Using cross validation ridge regression, the best value of alpha calculated is 1000.<\/p>\n<p style = 'font-family: comic sans ms; color: red'> Now implementing the ridge regression with the calculated alpha value for better results. <\/p>","0ee1e95f":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.7 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is inclusive of Finishing, short passing, Volleys, Dribbling, ball control, reactions, shot power, Long shots, Positioning, composure. <\/p>","c4138421":"<p style = 'font-family: comic sans ms; color: green'> Have  a glance at the above heat map. Consider only the terms which have a correlation values above 0.6 with respective to the overall rating of the player so that analysis have the right parameters. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> This set is incluse of Heading accuracy, shot passing, long passing, ball control, reactions, aggression, interceptions, composure, marking, standing tackle, sliding tackle. <\/p>","4f235a0d":"<p style = 'font-family: comic sans ms; color: green'> Based on the above graph the use of left forward, right forward and centre forward positional players is very less. Wing back positions are also used less often as you can see. <\/p> \n<p style = 'font-family: comic sans ms; color: red'> Wage of the players depending on their position.<\/p>","9db2ebd7":"<h2 style = 'font-family: comic sans ms; color: green'> Hey Defenders! what's your doing in the back?<\/h2>\n<p style = 'font-family: comic sans ms; color: red'> Analysing the players who will be placed just infront of the goal keeper. left full-back, right full-back, left centre-back, right centre-back, centre-back positions fall in this category.<\/p>","b7a40608":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 72 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for a full back and analysing each of them. <\/p>","5246da6c":"<p style = 'font-family: comic sans ms; color: green'> Grouping centre back players just like we did with the goalies such that we find out the skill score boundaries. <\/p>","7ff508c1":"<p style = 'font-family: comic sans ms; color: red'> Converting the columns of Value, wage and Release clause values which contain euros in millions and thousands into a numerical value<\/p>","02933c3b":"<p style = 'font-family: comic sans ms; color: green'> Most players are rated in between 60 and 75 as we can see in the histogram above. <\/p>\n<p style = 'font-family: comic sans ms; color: red'> Grouping all the skills required for forwards and analysing each of them. <\/p>","8d5a2751":"<p style = 'font-family: comic sans ms; color: red'>Take a quick look at the columns names to get an idea what aspects of the players we are dealing with. <\/p>\n<p style = 'font-family: comic sans ms; color: blue'> I once created a dataframe about my skills and aspects :) sadly I scored failure- 98%, ugly- 85% and smart- -20% <\/p>","554b43d9":"<p style= 'font-family: comic sans ms; color: green'> Assuming that the top 25% players with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often. <\/p>","b1b180e6":"<p style = 'font-family: comic sans ms; color: green'> A quick view on the disturution of the data <\/p>","c43b7a25":"<p style = 'font-family: comic sans ms; color: red'> Lasso Regression: It is a linear model that estimates sparse cofficients. Lasso uses co-ordinate descent as the algorithm to fit the cofficients.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using LassoCV cross validation to find the best Alpha parameter in order to fit it to the Lasso model and make sure it is the best value. <\/p>","8e7be2bd":"<p style = 'font-family: comic sans ms; color: red'> Lasso Regression: It is a linear model that estimates sparse cofficients. Lasso uses co-ordinate descent as the algorithm to fit the cofficients.<\/p>\n<p style = 'font-family: comic sans ms; color: green'> Using LassoCV cross validation to find the best Alpha parameter in order to fit it to the Lasso model and make sure it is the best value. <\/p>","db5d2bdd":"<h2 style = 'font-family = comic sans ms'>Does physical build of a player effect his skills and evaluation?<\/h2>","27396819":"<p style = 'font-family: comic sans ms; color: green'> A sportsmen's most important aspect is to have a better overall rating. So let's focus on that first<\/p>\n<p style = 'font-family: comic sans ms; color: red'> quick look at Overall rating and goalkeeping skills<\/p>","2e57d2e4":"<p style = 'font-family: comic sans ms; color: green'> Now prepareing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome. <\/p>","37e33622":"<h2 style = 'font-family: comic sans ms; color: red'> YO! Goalie... what's up?! <\/h2>","cdbfe5f7":"<p style = 'font-family: comic sans ms; color: green'> Assuming that the top 25% forwards with highest Overall rating are good at thier job and the following 25% be average and the next 25% may need to show off thier skills more often.<\/p>","243ba8e5":"<p style = 'font-family: comic sans ms; color: green'> Now preparing the data for conducting a linear regression model over the skills and finding out the optimal values of those skills to get a better outcome.<\/p>"}}