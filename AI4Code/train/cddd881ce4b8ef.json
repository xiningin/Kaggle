{"cell_type":{"7b2a247f":"code","b59f2cde":"code","0671eb2d":"code","4ac9ae1e":"code","967aa523":"code","220b2f88":"code","3515078e":"code","c73c1399":"code","3d4451ef":"code","7a9d67be":"code","03f23ebc":"code","34ef922b":"code","110348e5":"code","54cd5c64":"code","c7f8f76d":"code","daba57a2":"code","9463bac7":"code","40a18340":"code","76e85c36":"code","ff7912e8":"code","f618efea":"code","e7635fd5":"code","3a0711e5":"code","0ec49c0e":"code","508b3979":"code","65dc1f3a":"code","14214d37":"code","2cc66500":"code","89f557ec":"code","f4f410a9":"code","45541247":"code","abed73e4":"code","26b9138c":"code","b7cac7a4":"code","95ec0626":"code","ec1f670c":"code","7d7b1deb":"code","208e355d":"code","f4cd6d65":"code","c074d1fa":"code","76c964cc":"code","d74b7b89":"code","8c7a620a":"code","66c20d1a":"code","c8cef618":"code","6ace80ed":"code","d4bbee51":"code","2afdef6a":"code","a97e6e07":"code","75b0520c":"code","e4bc7e9d":"code","1ac67c70":"code","fe9a9caf":"code","b0204dd1":"code","1c5e9687":"code","f24d1b57":"code","e35f8e46":"code","b872198c":"code","09ad8a13":"code","122d9cfc":"code","16c281be":"code","e445b782":"code","cd895791":"code","e126d49d":"code","5ad09901":"code","cd671455":"code","e718b7f8":"code","4854e056":"code","91fd7ca7":"code","d3ee9ad6":"code","fb6da758":"code","928fd695":"code","917d012a":"code","68c06c0a":"code","f2b4ffe4":"code","5dde0426":"code","b9e38b37":"code","9ed3f0d4":"code","0d74f377":"code","b4bb2788":"code","04545173":"code","d06506d4":"code","b45b2174":"code","9d27f739":"code","12ca288b":"code","926a858e":"code","68c6f379":"code","6fc56883":"code","21fbd3de":"code","911db947":"code","b42512c0":"code","aba0545c":"code","db7521da":"code","35ced68d":"code","7274fb89":"code","ede89e8e":"code","5819dc98":"code","1676a9c4":"code","6353ca10":"code","9cf5f9bd":"code","beddd12b":"code","876bcaed":"code","875617d0":"code","f06a5412":"code","d792eef0":"code","9596b6f0":"code","56c54a9d":"code","1b2cb170":"code","c457f2e3":"code","242c2d1d":"code","712d2851":"code","54e6c0af":"code","b33df52d":"code","f512ca34":"code","bca9c4a0":"markdown","4c7ee4bf":"markdown","53b81bf7":"markdown"},"source":{"7b2a247f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b59f2cde":"titanic = pd.read_csv(\"..\/input\/titanic-dataset\/titanic.csv\",sep=\",\")","0671eb2d":"titanic.info()","4ac9ae1e":"titanic.shape","967aa523":"titanic.ndim","220b2f88":"titanic.head()","3515078e":"titanic.dtypes","c73c1399":"titanic.count()","3d4451ef":"titanic.head()","7a9d67be":"titanic.describe()","03f23ebc":"pd.isnull(titanic).sum()","34ef922b":"titanic[\"Pclass\"].dropna(axis=0, inplace=True)\ntitanic[\"Survived\"].dropna(axis=0, inplace=True)","110348e5":"print('The percentage of missing values \u200b\u200bin the \"Cabin\" column is %.2f%%' %((titanic['Cabin'].isnull().sum()\/titanic.shape[0])*100))","54cd5c64":"titanic.drop('Cabin',axis=1,inplace=True)","c7f8f76d":"titanic.head()","daba57a2":"titanic_temp = titanic\ntitanic_temp[\"Age\"].dropna(axis=0, inplace=True)","9463bac7":"titanic_temp.head()","40a18340":"plt.figure(figsize=(15,8))\nax = sns.kdeplot(titanic_temp[\"Age\"][titanic_temp.Survived == 1], color=\"darkturquoise\", shade=True)\nsns.kdeplot(titanic_temp[\"Age\"][titanic_temp.Survived == 0], color=\"lightcoral\", shade=True)\nplt.legend(['Survived', 'Died'])\nplt.title('Density Plot of Age for Surviving Population and Deceased Population')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","76e85c36":"plt.figure(figsize=(12,8))\nsns.boxplot(x='Pclass',y='Age',data=titanic)","ff7912e8":"titanic.head()","f618efea":"titanic.info()","e7635fd5":"type(titanic)","3a0711e5":"titanic[\"Name\"].dropna(axis=0,inplace=True)","0ec49c0e":"titanic['Name']","508b3979":"titanic['Title'] = titanic['Name'].apply(lambda name: name.split(',')[1].split('.')[0].strip())","65dc1f3a":"titanic['Title'].unique()","14214d37":"Standardized_Titles = {\n    \"Capt\":       \"Officer\",\n    \"Col\":        \"Officer\",\n    \"Major\":      \"Officer\",\n    \"Jonkheer\":   \"Royalty\",\n    \"Don\":        \"Royalty\",\n    \"Sir\" :       \"Royalty\",\n    \"Dr\":         \"Officer\",\n    \"Rev\":        \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Dona\":       \"Royalty\",\n    \"Mme\":        \"Mrs\",\n    \"Mlle\":       \"Miss\",\n    \"Ms\":         \"Mrs\",\n    \"Mr\" :        \"Mr\",\n    \"Mrs\" :       \"Mrs\",\n    \"Miss\" :      \"Miss\",\n    \"Master\" :    \"Master\",\n    \"Lady\" :      \"Royalty\"\n}\ntitanic.Title = titanic.Title.map(Standardized_Titles)\nprint(titanic.Title.value_counts())","2cc66500":"grouped = titanic.groupby(['Sex','Pclass', 'Title']) \ngrouped.Age.median()","89f557ec":"titanic.Age = grouped.Age.apply(lambda x: x.fillna(x.median()))","f4f410a9":"titanic.Age.unique()","45541247":"titanic.count()","abed73e4":"titanic.info()","26b9138c":"titanic[\"Fare\"].dropna(axis=0,inplace=True)","b7cac7a4":"titanic.info()","95ec0626":"plt.figure(figsize=(15,8))\nax = sns.kdeplot(titanic[\"Fare\"][titanic.Survived == 1], color=\"darkturquoise\", shade=True)\nsns.kdeplot(titanic[\"Fare\"][titanic.Survived == 0], color=\"lightcoral\", shade=True)\nplt.legend(['Survived', 'Died'])\nplt.title('Density ')\nax.set(xlabel='Fare')\nplt.xlim(-20,200)\nplt.show()","ec1f670c":"print('Percent of missing \"embarked\" records is %.2f%%' %((titanic['Embarked'].isnull().sum()\/titanic.shape[0])*100))","7d7b1deb":"titanic[\"Embarked\"].dropna(axis=0, inplace=True)","208e355d":"titanic['Embarked'].isnull().sum()","f4cd6d65":"print('Boarded passengers grouped by port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton):')\nprint(titanic['Embarked'].value_counts())\nsns.countplot(x='Embarked', data=titanic, palette='Set2')\nplt.show()","c074d1fa":"sns.barplot('Embarked', 'Survived', data=titanic, color=\"teal\")\nplt.show()","76c964cc":"sns.countplot(x='Embarked', data=titanic, palette='hls', hue='Survived')\nplt.xticks(rotation=45)\nplt.show()","d74b7b89":"titanic.head(3)","8c7a620a":"titanic.info()","66c20d1a":"titanic.head(3)","c8cef618":"titanic['Embarked'].unique()","6ace80ed":"titanic.dtypes","d4bbee51":"sns.barplot('SibSp', 'Survived', data=titanic, color=\"mediumturquoise\")\nplt.show()","2afdef6a":"sns.catplot(x='SibSp',col='Survived', data=titanic, kind=\"count\");","a97e6e07":"sns.catplot(x='Parch',col='Survived', data=titanic, kind=\"count\");","75b0520c":"titanic.dropna(axis=0, inplace=True)","e4bc7e9d":"pd.isnull(titanic).sum()","1ac67c70":"sns.countplot(x='Survived',data=titanic)","fe9a9caf":"sns.barplot('Pclass', 'Survived', data=titanic, color=\"darkturquoise\")\nplt.show()","b0204dd1":"titanic.pivot_table('Survived', index='Sex', columns='Pclass')","1c5e9687":"age = pd.cut(titanic['Age'], [0, 18, 80])\ntitanic.pivot_table('Survived', ['Sex', age], 'Pclass')","f24d1b57":"def titanic_corr(data):\n    correlation = data.corr()\ntitanic_corr(titanic)","e35f8e46":"Pclass_dummies = pd.get_dummies(titanic.Pclass, prefix=\"Pclass\")","b872198c":"Pclass_dummies.head()","09ad8a13":"Embarked_dummies = pd.get_dummies(titanic.Embarked, prefix=\"Embarked\")","122d9cfc":"Embarked_dummies.head()","16c281be":"titanic.Sex = titanic.Sex.map({\"Male\": 0, \"Female\":1})","e445b782":"titanic.head(3)","cd895791":"titanic.loc[(titanic['Sex'] == \"Male\", \"Sex\")]==1\ntitanic.loc[(titanic['Sex'] == \"Female\", \"Sex\")]==0","e126d49d":"titanic.head(3)","5ad09901":"Title_dummies = pd.get_dummies(titanic.Title, prefix=\"Title\")","cd671455":"Title_dummies.head()","e718b7f8":"print('The mean of \"Age\" is %.2f' %(titanic[\"Age\"].mean(skipna=True)))\nprint('The median of \"Age\" is %.2f' %(titanic[\"Age\"].median(skipna=True)))","4854e056":"ax = titanic[\"Age\"].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)\ntitanic[\"Age\"].plot(kind='density', color='teal')\nax.set(xlabel='Age')\nplt.xlim(-10,85)\nplt.show()","91fd7ca7":"max(titanic[\"Age\"])","d3ee9ad6":"titanic[\"cat_Age\"] = pd.cut(titanic[\"Age\"],bins=[0,6,18,60,80], labels=[1,2,3,4])\n\ntitanic[[\"Age\", \"cat_Age\"]].head","fb6da758":"titanic.corr()","928fd695":"titanic.drop(['Age'],axis=1,inplace=True)","917d012a":"titanic.drop(['Sex'],axis=1,inplace=True)","68c06c0a":"titanic.drop(['Name'],axis=1,inplace=True)","f2b4ffe4":"titanic.drop(['Ticket'],axis=1,inplace=True)","5dde0426":"titanic.info()","b9e38b37":"titanic_dummies = pd.concat([titanic, Pclass_dummies, Title_dummies, Embarked_dummies], axis=1)","9ed3f0d4":"titanic_dummies.drop(['Pclass', 'Title', 'Embarked'], axis=1, inplace=True)","0d74f377":"titanic_dummies.info()","b4bb2788":"titanic_dummies.head()","04545173":"titanic_dummies.drop(['Pclass_1', 'Embarked_C', 'Title_Master'], axis=1, inplace=True)","d06506d4":"from sklearn.model_selection import train_test_split","b45b2174":"titanic_dummies[\"Survived\"].dropna(axis=0, inplace=True)","9d27f739":"titanic_dummies.Survived = titanic_dummies.Survived.astype(int)","12ca288b":"X = titanic_dummies.drop('Survived',axis=1)","926a858e":"X_train, X_test, y_train, y_test = train_test_split(titanic_dummies.drop('Survived', axis=1), titanic_dummies['Survived'], test_size=0.2, random_state=0)","68c6f379":"X_train.head(4)","6fc56883":"X_train.info()","21fbd3de":"y_train.head()","911db947":"type(y_train)","b42512c0":"from sklearn.preprocessing import StandardScaler","aba0545c":"std = StandardScaler()\nX_train = std.fit_transform(X_train)","db7521da":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression(solver='lbfgs')\nlogreg.fit(X_train, y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) * 80, 2)\nacc_log","35ced68d":"from sklearn.metrics import f1_score\nf1_LG = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_LG)","7274fb89":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 80, 2)\nacc_knn","ede89e8e":"from sklearn.metrics import f1_score\nf1_KNN = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_KNN)","5819dc98":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 80, 2)\nacc_decision_tree","1676a9c4":"from sklearn.metrics import f1_score\nf1_DT = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_DT)","6353ca10":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 80, 2)\nacc_random_forest","9cf5f9bd":"from sklearn.metrics import f1_score\nf1_RF = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_RF)","beddd12b":"from sklearn.naive_bayes import GaussianNB\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\nY_pred = gaussian.predict(X_test)\nacc_gaussian = round(gaussian.score(X_train, y_train) * 80, 2)\nacc_gaussian","876bcaed":"from sklearn.metrics import f1_score\nf1_GNB = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_GNB)","875617d0":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 80, 2)\nacc_svc","f06a5412":"from sklearn.metrics import f1_score\nf1_SVC = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_SVC)","d792eef0":"from sklearn.svm import LinearSVC\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, y_train) * 80, 2)\nacc_linear_svc","9596b6f0":"from sklearn.metrics import f1_score\nf1_LSVC = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_LSVC)","56c54a9d":"from sklearn.linear_model import Perceptron\nperceptron = Perceptron()\nperceptron.fit(X_train, y_train)\nY_pred = perceptron.predict(X_test)\nacc_perceptron = round(perceptron.score(X_train, y_train) * 80, 2)\nacc_perceptron","1b2cb170":"from sklearn.metrics import f1_score\nf1_PRCP = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1_PRCP)","c457f2e3":"from sklearn.metrics import accuracy_score\nacc = (accuracy_score(y_test,Y_pred))\nprint('Accuracy score: %f' % acc)","242c2d1d":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test, Y_pred))","712d2851":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,Y_pred))","54e6c0af":"from sklearn.metrics import f1_score\nf1 = f1_score(y_test, Y_pred)\nprint('F1 score: %f' % f1)\n","b33df52d":"labels = ['Logistic Regression','kNN','Decision Tree','Random Forest','Gaussian','SVC','Linear SVM','Perceptron']\nfscores= [f1_LG, f1_KNN ,f1_DT, f1_RF ,f1_GNB,f1_SVC, f1_LSVC,f1_PRCP]\n\nx = np.arange(len(labels))  \nwidth = 0.35  \n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, fscores, width, label='F1-Scores')\n\nax.set_ylabel('F1-Score Value')\nax.set_title('F1-Score by Specific Algorithm')\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation='vertical')\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3), \n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nplt.show()","f512ca34":"labels = ['Logistic Regression','kNN','Decision Tree','Random Forest','Gaussian','SVC','Linear SVM','Perceptron']\nAccuracies = [acc_log, acc_knn ,acc_decision_tree, acc_random_forest ,acc_gaussian,acc_svc, acc_linear_svc,acc_perceptron]\n#women_means = [25, 32, 34, 20, 25]\n\nx = np.arange(len(labels))  \nwidth = 0.35\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, Accuracies, width, label='Accuracies')\n\nax.set_ylabel('Accuracy Value')\nax.set_title('Accuracy by Specific Algorithm')\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation='vertical')\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nplt.show()","bca9c4a0":"titanic[[\"age\", \"cat_age\"]].head","4c7ee4bf":"titanic.loc[(titanic['sex'] == \"male\", \"sex\")]=1\ntitanic.loc[(titanic['sex'] == \"female\", \"sex\")]=0","53b81bf7":"titanic[\"cat_Age\"] = pd.cut(titanic[\"Age\"],bins=[0,6,18,60,80], labels=[1,2,3,4])"}}