{"cell_type":{"dbee8cbb":"code","1992ea6a":"code","753b6417":"code","20c6fd1a":"code","ce7bca22":"code","521f2a5c":"code","7a72147f":"code","5a8f4fa1":"code","2ed18165":"code","a9c90309":"code","de30309e":"code","7e7ca91c":"code","af6c9ec5":"code","1d2fa710":"code","5820dfa6":"code","436a8195":"code","6a0992dd":"code","a80bc0d3":"code","5fe20af2":"code","9a8aafc3":"code","04c3c499":"code","db226a7e":"code","6df4b626":"code","9b34e9dc":"code","50f11362":"code","43b3dadb":"code","ad4e287a":"code","896ae061":"markdown"},"source":{"dbee8cbb":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\n\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","1992ea6a":"df.info()","753b6417":"df.isnull().sum().sum()","20c6fd1a":"df[df.isnull().any(axis=1)].head(2)","ce7bca22":"df[\"Salary\"].fillna(df[\"Salary\"].median(), inplace=True)\ndf[df.isnull().any(axis=1)]","521f2a5c":"df = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf.head(2)","7a72147f":"clf= LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)[0:10]","5a8f4fa1":"df_scores=clf.negative_outlier_factor_\nnp.sort(df_scores)[0:20]","2ed18165":"sns.boxplot(df_scores);","a9c90309":"threshold=np.sort(df_scores)[10]\nthreshold","de30309e":"df=df.loc[df_scores > threshold]\ndf.shape","7e7ca91c":"# Regression\n\ny=df[\"Salary\"]\nX=df.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","af6c9ec5":"#Ridge Regression\n\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","1d2fa710":"# Ridge_tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","5820dfa6":"# Ridge_tuned(alpha2)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","436a8195":"# Ridge_tuned(alpha3)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","6a0992dd":"# Ridge_tuned(best alpha)\nalphas4 = np.linspace(0,0.001,2)\nridge_cv = RidgeCV(alphas = alphas4, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a80bc0d3":"#Lasso Regression\nlasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","5fe20af2":"#Lasso Tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","9a8aafc3":"#Lasso Tuned(alpha2)\nlasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","04c3c499":"#Lasso Tuned(alpha3)\nlasso_cv_model = LassoCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","db226a7e":"# Lasso_tuned(best alpha)\nalphas4 = np.linspace(0,1,500)\nlasso_cv_model = LassoCV(alphas = alphas4, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","6df4b626":"# Elastic Net Regression\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","9b34e9dc":"#Elastic Net(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","50f11362":"#Elastic Net(alpha2)\nenet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","43b3dadb":"#Elastic Net(alpha3)\nenet_cv_model = ElasticNetCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","ad4e287a":"enet_params = {\"l1_ratio\": [0,0.01,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n               \"alpha\":[0.1,0.01,0.001,0.2,0.3,0.5,0.8,0.9,1,2,5,7,10,13,20,45,87,99,100,110]}\nenet_model = ElasticNet().fit(X, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nprint(gs_cv_enet.best_params_)\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","896ae061":"# 1) Eksik verilere median atand\u0131.\n# 2) Ayk\u0131r\u0131 g\u00f6zlemler LOF ile belirlendi,10.de\u011fer sonras\u0131 at\u0131ld\u0131.\n# 3) Kalan 311 veri ile; tune edilmi\u015f ve edilmemi\u015f, en iyi durumda:\n- Regression rmse: 306\n- Ridge rmse: 306\n- Lasso rmse: 305\n- Elastic Net rmse: 306"}}