{"cell_type":{"afcde63b":"code","0c4db966":"code","008834ff":"code","3f8cbd82":"code","e03d03b5":"code","76c597fe":"code","91b71080":"code","083bc8b3":"code","704a0258":"code","e6de0ae7":"code","240c4abc":"code","92b390f0":"code","07412c8f":"code","d5537565":"code","85e6ef97":"code","67b5115c":"code","f2c16cff":"code","b3c76d94":"code","7de0bdbf":"code","fac04745":"code","cbf9e1b3":"code","0874b63d":"code","f31919dc":"code","a9876585":"markdown","991196f4":"markdown","1c1775b2":"markdown","9e855ccc":"markdown","54a7484c":"markdown","9f2cf8d9":"markdown","556dc6a0":"markdown","afe18aa4":"markdown","08cedc58":"markdown","6feda003":"markdown","bea8cb22":"markdown","cdcc6e07":"markdown","99924e8d":"markdown","bc607596":"markdown","8f6f029d":"markdown"},"source":{"afcde63b":"#Model ID\nModelId='digit_recognizer_FML_v1'\n\n#Setting the model target variable name\nvar_target = 'label'\n\n#process outputs such as MOJO model, images and performance of tested models\nOutputPath='\/kaggle\/temp'\n\n#If you have a huge dataset, I should consider use a small sample for first execution\npct_sample_size = 1","0c4db966":"import glob\nimport functools\nimport datetime as dt\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pandas_profiling import ProfileReport\nfrom collections import defaultdict\nfrom pandas_profiling.model.base import get_var_type\nimport os\nimport random\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","008834ff":"#Import bases with features for modeling\n#In this case we will use titanic dataset available below\ndataprep_df_full = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","3f8cbd82":"#Work with a sample data if the pct_sample_size is less than 1\nif pct_sample_size == 1:\n    dataprep_df = dataprep_df_full\nelse:    \n    dataprep_df = dataprep_df_full.sample(frac=pct_sample_size, replace=False, random_state=1)","e03d03b5":"# X_train = dataprep_df.drop(labels=[var_target], axis=1)\n# X_train = X_train.astype('float32')\n# X_train = X_train \/ 255\n# dataprep_df = pd.concat([dataprep_df.loc[:,(var_target)], X_train], axis=1)","76c597fe":"#Generate report\n#If the database has many records or columns, the report can take a long time\n#If this is the case, disable the explorative, samples, correlations, missing_diagrams, duplicates and interactions options by commenting out\nprofile = ProfileReport(dataprep_df, title=f\"Pandas Profiling Report{ModelId}\"\n                        ,explorative=True\n                        ,samples=None\n                        ,correlations=None\n                        ,missing_diagrams=None\n                        ,duplicates=None\n                        ,interactions=None\n                       )\n#profile.to_file(\"profile.html\")\n#display(profile)","91b71080":"train_images = dataprep_df.drop(labels=[var_target], axis=1)  #get all the pixel columns except label column\ntrain_labels = dataprep_df[var_target] #get the label column","083bc8b3":"# reshape the data in 3 dimensions to represent an image, 28*28 is height* width 1 is grayscale, if we have coloured we should use 3 \ntrain_images = train_images.values.reshape(-1, 28,28,1) # -1 keeps the number of data as it, values convert the dataframe to arrays","704a0258":"plt.imshow(train_images[3])","e6de0ae7":"plt.imshow(train_images[4])","240c4abc":"# Get all the types pandas_profiling offers\nlist_columns = dataprep_df.columns.drop(var_target)\nd = {col: get_var_type(dataprep_df[col])['type'].value for col in list_columns}\nfd = defaultdict(list)\nfor k, v in d.items():\n    fd[v].append(k)\n     \ncols_by_base_type = dict(fd)\n# Group the types pandas_profiling offers to match typical needs\ncat_num_cols = defaultdict(list)\nfor k, v in cols_by_base_type.items():\n    # Treat boolean and unique columns as categorical\n    k = 'CAT' if k in ['BOOL', 'UNIQUE'] else k\n    cat_num_cols[k].extend(v)\n#print(dict(cat_num_cols))","92b390f0":"#It is necessary to define the types of variables (cageroric and numeric) to ensure that the type of data used in the modeling will be the most suitable.\n#For example, categorical variables need to be defined as a string because this prevents it from being treated as a numeric variable in H20 modeling\n#Another example is that the string variables will have a missing treatment by placing the missing category for all values found as 'null'\nCAT = []\n#float\nNUM = cat_num_cols['NUM'] + cat_num_cols['CAT']\n\nselected_features = CAT + NUM","07412c8f":"#Numeric features must be float type\nfor col_name in NUM:    \n    dataprep_df[col_name] = dataprep_df[col_name].astype(float)    \n\n#Categorical features must be string type and null values will be filled with \"missing\"\nfor col_name in CAT:        \n    dataprep_df[col_name] = dataprep_df[col_name].astype(str)\n    dataprep_df = dataprep_df.fillna(value={col_name: 'missing'})    ","d5537565":"# normalization\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255)","85e6ef97":"# create a convolution model using tensorflow.keras\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(28,28,1)),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')])\nmodel.summary()","67b5115c":"# compile the model\nmodel.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['acc']) ","f2c16cff":"# model fit \nmodel.fit(train_datagen.flow(train_images, train_labels, batch_size=128),steps_per_epoch = len(train_labels)\/128, epochs = 30)","b3c76d94":"submission_df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\n# submission_df = submission_df.astype('float32')\n# submission_df = submission_df \/ 255\n\n#Numeric features must be float type\nfor col_name in NUM:    \n    submission_df[col_name] = submission_df[col_name].astype(float)    \n\n#Categorical features must be string type and null values will be filled with \"missing\"\nfor col_name in CAT:        \n    submission_df[col_name] = submission_df[col_name].astype(str)    \n    submission_df = submission_df.fillna(value={col_name: 'missing'}) ","7de0bdbf":"#Now using our model we will predict test_data\ntest_images = submission_df.values.reshape(-1, 28,28,1) #reshape\ntest_images.shape","fac04745":"#predict using model.predict\npredictions = model.predict(test_images)","cbf9e1b3":"#get the classes from the prediction\ny_classes = predictions.argmax(axis=-1)","0874b63d":"predict_df = submission_df\npredict_df = predict_df.reset_index(drop=False)\npredict_df.rename(columns={'index':'ImageId'}, inplace=True)\npredict_df['ImageId'] = predict_df['ImageId']+1\npredict_df['Label'] = y_classes\npredict_df.loc[:, ('ImageId', 'Label')]","f31919dc":"predict_df.loc[:, ('ImageId', 'Label')].to_csv('\/kaggle\/working\/digit_recognizer_submission.csv', index=False)","a9876585":"### From the variables listed above you can select which  one will be tested in the model and confirm if the correct type is numeric(NUM) or categorical (CAT). Paste the correct information below:","991196f4":"# 3. Importing Data for Modeling","1c1775b2":"# 8. Save final dataset with predictions","9e855ccc":"## 5. Classify the types of variables\n#### list all columns to select the ones to be used","54a7484c":"##### For more details on the pandas profiling library see https:\/\/github.com\/pandas-profiling\/pandas-profiling\n","9f2cf8d9":"## 4.2 Plot Digit images","556dc6a0":"# 4. Univariate Analysis","afe18aa4":"## The Digit Recognizer dataset","08cedc58":"# 6. Modeling","6feda003":"## 4.1 Pandas Profiling","bea8cb22":"# 1. Parameters","cdcc6e07":"## END","99924e8d":"## 3.1 Feature Engineering","bc607596":"# 2. Import Libraries","8f6f029d":"# 7. Predict Submision Test dataset"}}