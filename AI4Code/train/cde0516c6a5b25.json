{"cell_type":{"9c69c026":"code","2718a3b0":"code","43a8408a":"code","e9a4051f":"code","bed5aa41":"code","0d289358":"code","93bc6c26":"code","589803de":"code","1b0d3b87":"code","758dd709":"code","8362b70a":"code","2ec0d0fb":"code","30d242ad":"code","c9eaddc5":"code","8899f551":"code","af1b0af4":"code","071615be":"code","628054bd":"code","f161664a":"code","435d0f85":"code","b859e375":"markdown","b01afcfd":"markdown"},"source":{"9c69c026":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.feature_selection import SelectKBest, chi2, f_regression\nfrom sklearn import datasets\nfrom sklearn.feature_selection import RFE\nfrom sklearn.ensemble import GradientBoostingRegressor \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2718a3b0":"df=pd.read_csv('\/kaggle\/input\/boston-housing-dataset\/HousingData.csv')\ndf.info()\n\n\n","43a8408a":"df=df.dropna(axis=0)\ndf","e9a4051f":"#Checking for multicollinearity\ncorrelation_matrix = df.corr().round(2)\nfig, ax = plt.subplots(figsize=(10,10))  \nsns.heatmap(data=correlation_matrix,annot=True,linewidths=0.5,ax=ax)\n\n\n       \n","bed5aa41":"#Using Simple Linear Regression (All Variables)\ny=df['MEDV']\nx=df.iloc[:,:12]\n","0d289358":"x","93bc6c26":"x=sm.add_constant(x)\nmodel=sm.OLS(y,x)\nresults = model.fit()\nresults.summary()","589803de":"#Using Simple Linear Regression (After Removing Variables with Multi-Colinearity) Remove INDUS and NOX\nx=df.iloc[:,[0,1,3,5,6,7,8,9,10,11,12]]\nx= sm.add_constant(x)\nmodel1=sm.OLS(y,x)\nresults_update = model1.fit()\nresults_update.summary()","1b0d3b87":"#Remove INDUX and NOX\nx=df.iloc[:,[0,1,3,5,6,7,8,9,10,11,12]]\nfeatures_list=x.columns\nfeatures_list","758dd709":"#Using Sklearn to conduct linear regression on test data\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42)\nmodel1=LinearRegression()\nmodel1.fit(x_train,y_train)\ny_pred=model1.predict(x_test)\ny_pred=pd.DataFrame(y_pred)\nprint(\"train r2:\",model1.score(x_train,y_train))\nprint(\"test r2:\",model1.score(x_test,y_test))\n","8362b70a":"# Selecting Predictor Variables with SelectKBest - f_regression\n\nfor i in range(11):\n   selector_train=SelectKBest(f_regression,k=i+1)\n   selector_train.fit_transform(x_train,y_train)\n   cols=selector_train.get_support(indices=True)\n   x_test1=x_test.iloc[:,cols]\n   selector_train1=SelectKBest(f_regression,k=i+1).fit_transform(x_train,y_train)\n   df1=pd.DataFrame(selector_train1)\n   model1.fit(df1,y_train)\n   print(\"r2:\",i+1,model1.score(x_test1,y_test)) #Model works best with 11 features\n\n","2ec0d0fb":"x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42)\n#Selecting Predictor Variables with Recursive Feature Elimination (Gradient Boosting Regressor)\nfor i in range(11,1,-1):\n   model = GradientBoostingRegressor()\n   rfe = RFE(model, i)\n   rfe = rfe.fit(x_train, y_train) #error\n   rfe_support = rfe.get_support()\n   x_train=x_train.loc[:,rfe_support]\n   x_test=x_test.loc[:,rfe_support]\n   model.fit(x_train,y_train)\n#Finding R2 using Linear Regression to Compare R2 (To Find Best Features)\n   model1=LinearRegression()\n   model1.fit(x_train,y_train)\n   print(\"r2:\",i,model1.score(x_test,y_test))\n   ","30d242ad":"#Selecting Predictor Variables with RandomForestRegressor\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42)\nfor i in range(11,1,-1):\n   model = RandomForestRegressor()\n   rfe = RFE(model, i)\n   rfe = rfe.fit(x_train, y_train) #error\n   rfe_support = rfe.get_support()\n   x_train=x_train.loc[:,rfe_support]\n   x_test=x_test.loc[:,rfe_support]\n   model.fit(x_train,y_train)\n#Finding R2 using Linear Regression to Compare R2 (To Find Best Features)\n   model1=LinearRegression()\n   model1.fit(x_train,y_train)\n   print(\"r2:\",i,model1.score(x_test,y_test))\n\n","c9eaddc5":"#Hyperparameter tuning for the Lasso Regression\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42)\nfrom sklearn.linear_model import Lasso\nlasso=Lasso()\nalphas1=np.logspace(-10,1,20)\nalphas = np.array([5, 0.5, 0.05, 0.005, 0.0005, 1, 0.1, 0.01, 0.001, 0.0001, 0 , 0.2,0.3,0.4,0.6,2,3,4,5,6]) \nalphas=alphas + alphas1\ngrid = GridSearchCV(estimator=lasso, param_grid=dict(alpha=alphas),cv=5)\ngrid.fit(x_test, y_test)\n\nprint(grid.best_estimator_.alpha)\nprint(grid.best_score_)","8899f551":"# Using Lasso Regression for Feature Selection\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42)\n# Import Lasso\nfrom sklearn.linear_model import Lasso\n\n# Instantiate a lasso regressor: lasso\nlasso = Lasso(alpha=6.158482110660267e-05)\n\n# Fit the regressor to the data\nlasso.fit(x_train, y_train)\n# Compute and print the coefficients\nlasso_coef = lasso.coef_\nprint(lasso_coef)\n\nplt.plot(x_train.columns, lasso_coef)\nplt.xticks(rotation=60)\n\n\n","af1b0af4":"# Using Gradient Booting Regressor\nGBE=GradientBoostingRegressor()\nGBE.fit(x_train,y_train)\nGBE.score(x_test,y_test)\n","071615be":"#Random Forest Regressor\nRF=RandomForestRegressor()\nRF.fit(x_train,y_train)\nRF.score(x_test,y_test)","628054bd":"#Lasso\nlasso1=Lasso(alpha=6.158482110660267e-05)\nlasso1.fit(x_train,y_train)\nlasso1.score(x_test,y_test)","f161664a":"#Ridge\nfrom sklearn.linear_model import Ridge\nprint(grid.best_estimator_.alpha)\nprint(grid.best_score_)\n\nridge=Ridge(alpha=1.000000078475997)\ngrid = GridSearchCV(estimator=ridge, param_grid=dict(alpha=alphas),cv=5)\ngrid.fit(x_test, y_test)\n\n\n\nridge.fit(x_train,y_train)\nridge.score(x_test,y_test)","435d0f85":"#Create a new model by selecting variables that have a p-value of less than 0.05 and use GBE\nx=df.iloc[:,[0,3,4,5,6,7,8,9,10,11,12]]\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42)\nGBE=GradientBoostingRegressor()\nGBE.fit(x_train,y_train)\nGBE.score(x_test,y_test)\n\n\n","b859e375":"# Selecting Predictor Variables ","b01afcfd":"# Regression"}}