{"cell_type":{"632cd522":"code","5e50af2e":"code","7e27a57d":"code","4f3e9893":"code","e50f8095":"code","504b1567":"code","54851800":"code","4f9e2ea5":"code","9bee1888":"code","15afee9e":"code","5e543786":"code","bb0963aa":"code","3d8415ca":"code","0eca0531":"code","7bd6e68a":"code","2e198085":"code","2c6b6c5f":"code","8f5bdaa4":"code","61740d3b":"code","0de946d1":"code","fac70560":"code","bbecccde":"markdown","9c970c26":"markdown","365a1aec":"markdown","ffbb23cf":"markdown","c0f6c01f":"markdown","cbf6c92b":"markdown","74c0e4a7":"markdown","08133912":"markdown","9a7c9e86":"markdown","200f0509":"markdown","151f1b23":"markdown","76d4d1fd":"markdown","f79c0be5":"markdown","d8fdbda2":"markdown","3782c9f3":"markdown","ae9b220b":"markdown","1e0c8330":"markdown","c6a3bb8f":"markdown","12a4823a":"markdown","b134f2f3":"markdown"},"source":{"632cd522":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e50af2e":"import pandas as pd","7e27a57d":"df=pd.read_csv(\"..\/input\/targetencodingsdata\/IMDB-Movie-Data1.csv\", index_col=\"Title\")\ndf.head()","4f3e9893":"df.describe()","e50f8095":"df['Genre'].describe()","504b1567":"df['Genre'].value_counts().head(10)","54851800":"df.corr()","4f9e2ea5":"new_df=df[['Genre','Rating']]\n# print(new_df)\nnew_df.head()","9bee1888":"df.loc['Split']","15afee9e":"df.iloc[1]","5e543786":"df.loc['Split':'The Great Wall']","bb0963aa":"df.iloc[1:4]","3d8415ca":"c=(df['Genre']=='Action,Adventure,Sci-Fi')\nprint(c)","0eca0531":"df[df['Genre']=='Action,Adventure,Sci-Fi']","7bd6e68a":"df[df['Director']=='James Gunn']","2e198085":"df[df['Rating']>=8.1].head(5)","2c6b6c5f":"df[(df['Director']=='Christopher Nolan')|(df['Director']=='Nitesh Tiwari')]","8f5bdaa4":"df[df['Director'].isin(['Christopher Nolan','Nitesh Tiwari'])]","61740d3b":"def rating_fun(rating):\n    if rating>=8.1:\n        return \"Wow! Good\"\n    else:\n        return \"Aww! Not Good\"","0de946d1":"df['Rating_c']=df['Rating'].apply(rating_fun)\ndf.head()","fac70560":"df['Rating_cc']=df['Rating'].apply(lambda rating: \"Wow! Good\" if rating>=8.1 else \"Aww! Not Good\")\ndf.head()","bbecccde":"# Take Some head values from Genre col","9c970c26":"# All Movies of James Gunn","365a1aec":"**Correllation** (Relation between columns)","ffbb23cf":"# Data about the movies which are Action,Adventurer and Sci-Fi","c0f6c01f":"# Data of movies from Split to The Great wall","cbf6c92b":"# Take a specific column information using describe()","74c0e4a7":"# Only two columns orinting out of 11 cols","08133912":"# Same data displaying in another way","9a7c9e86":"# Using Lambda Function","200f0509":"# The movies with ratings more than 8.1","151f1b23":"# Using Pandas","76d4d1fd":"Showing some data","f79c0be5":"# Functions in Pandas","d8fdbda2":"# Using or operator(conditions)","3782c9f3":"# Calling Function","ae9b220b":"# Another way to access the data from one point to another","1e0c8330":"# Use describe() Function","c6a3bb8f":"Another way of using location's function","12a4823a":"**Location of a specific movie**","b134f2f3":"# Same as above but in different way"}}