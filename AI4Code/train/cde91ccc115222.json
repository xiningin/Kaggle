{"cell_type":{"e829df08":"code","e6137075":"code","368fd4ad":"code","925bc453":"code","748addee":"code","bcc38550":"code","a968aee5":"code","fdf69cc6":"code","f97ec6d9":"code","e9d5285f":"code","a9eafc89":"code","eac4ce97":"code","0512a4e0":"code","34a5a9ef":"code","185a2b2f":"code","775d5a57":"code","22278798":"code","2a727e20":"code","9ebad72a":"code","1a1460b6":"code","2249afcf":"code","08191331":"code","706b7f63":"code","d4078fa2":"code","63e7bb2e":"markdown","1f16be55":"markdown","04f9f1af":"markdown","c56fca61":"markdown","9240fd3e":"markdown","241fd5eb":"markdown","bd7f815b":"markdown","791a89fc":"markdown","d157c7ee":"markdown","a889eb54":"markdown","c1003643":"markdown","c5434d79":"markdown","0b2269d7":"markdown","555d2227":"markdown","a0e8c0ba":"markdown","748bcec9":"markdown","e52dfa3a":"markdown","541c4305":"markdown","46f729b6":"markdown","61b9d2ae":"markdown"},"source":{"e829df08":"import os\n\nimport numpy as np\nimport pandas as pd\n\nfrom fastai import *\nfrom fastai.imports import *\nfrom fastai.vision.all import *","e6137075":"torch.cuda.is_available(),torch.backends.cudnn.enabled","368fd4ad":"def seed_everything(seed):\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\nseed_everything(42)","925bc453":"path = Path('..\/input\/cassava-leaf-disease-classification\/')\nos.listdir(path)","748addee":"train = pd.read_csv(path\/'train.csv')\ntrain.head()","bcc38550":"train.value_counts('label')","a968aee5":"train['label'].hist(figsize = (8, 6));","fdf69cc6":"train['image_id'] = train['image_id'].map(lambda x:path\/'train_images'\/x)\ntrain.head()","f97ec6d9":"tfms = aug_transforms()\ndata = ImageDataLoaders.from_df(train, valid_pct=0.2, item_tfms=Resize(512), batch_tfms=[*tfms,Normalize.from_stats(*imagenet_stats)])","e9d5285f":"data.show_batch()","a9eafc89":"if not os.path.exists('\/root\/.cache\/torch\/hub\/checkpoints\/'):\n    os.makedirs('\/root\/.cache\/torch\/hub\/checkpoints\/')\n    !cp '..\/input\/resnet50preload\/resnet50-19c8e357.pth' '\/root\/.cache\/torch\/hub\/checkpoints\/resnet50-19c8e357.pth'","eac4ce97":"learn = cnn_learner(data, models.resnet50, pretrained=True, metrics=accuracy, model_dir='..\/working\/').to_native_fp16()","0512a4e0":"learn.lr_find()","34a5a9ef":"learn.freeze()\nlearn.fit_one_cycle(1,1e-1)","185a2b2f":"learn.recorder.plot_loss()","775d5a57":"learn.unfreeze()\nlearn.lr_find()","22278798":"learn.fit_one_cycle(5, 1e-4)","2a727e20":"learn.recorder.plot_loss()","9ebad72a":"learn = learn.to_native_fp32()","1a1460b6":"test = pd.read_csv(path\/'sample_submission.csv')\ntmp_test = test.copy()\ntmp_test['image_id'] = tmp_test['image_id'].map(lambda x:path\/'test_images'\/x)\ntmp_test.head()","2249afcf":"test_data = data.test_dl(tmp_test)\ntest_data.show_batch()","08191331":"predict, t = learn.tta(dl=test_data, n=8, beta=0)","706b7f63":"test['label'] = predict.argmax(dim=-1).numpy()\ntest.head()","d4078fa2":"test.to_csv('submission.csv', index=False)","63e7bb2e":"# Inference","1f16be55":"# Loading data into Fastai format","04f9f1af":"* tta applies the same image transformations as on the training data.\n* In practise, the image is transformed n times and its predicted results are averaged.","c56fca61":"Adding the path of each image makes life easier when running inference.","9240fd3e":"Making sure GPU is on, both needs to be True. If the first is False, make sure GPU is turned on in the notebook settings. For issues with second, please check google for help. :D","241fd5eb":"# Quick data exploration","bd7f815b":"# About this notebook\n* This kernel is intended for Fastai beginners. It is quite easy to get a good model setup due to the ease of access to state-of-the-art algorithms provided by Fastai.","791a89fc":"Fastai provides a method (test_dl) that can parse the test data with the same parameters as the training data.","d157c7ee":"* fit_one_cycle is widely used to train models, you can also try other fit methods.\n* We freeze and train the last layer.\n* The first parameter is the Epoch; Number of times the dataset is iterated by the CNN. Second is the learning rate.\n* You can increase the epochs to experiment. Higher values usually give better results however it increases computation drastically.","a889eb54":"* We unfreeze to train all the layers.\n* The learning rate changes due to unlocking all layers.","c1003643":"Observing the loss function.","c5434d79":"Change back to 32-bit.","0b2269d7":"* Fastai provides several options for loading images; csv, folders, path, df...\n* In this case; the images are loaded using the pandas dataframe which contains the path of each image. You can also specify the image folder's path to the ImageDataLoaders instead of adding the path to df explicitly.\n* item_tfm resizes each image in terms of pixels, large sizes greatly increase computation.\n* aug_transforms() applies image transformations. For a full detail of the transformations applied, check out their doc: https:\/\/docs.fast.ai\/vision.augment.html#aug_transforms.\n* Normalize.from_stats(*imagenet_stats): Normalizes images based on mean and std of the imagenet pretrained model as we are using a pretrained resnet model.\n* batch_tfms applies the above two points to each batch of images.\n* Have a look at their doc if you want to learn more about the parameters and other methods to load data: https:\/\/docs.fast.ai\/vision.data.html.","555d2227":"**Training (Short version)**\n1. First we find the learning rate.\n2. Freeze the model and train only the last layer(has random weights).\n> As the pretrained model is used, the initial weights on the other layers have 'good' values. Hence we freeze the first layers and train only the last layer that has random weights.\n3. Unfreeze, find the learning rate again, and train all layers.\n> Model is unfreezed to train all layers.","a0e8c0ba":"* It is easy to get the predictions on the test set as long as the test data is in the same format as train data.\n* Add in path of test images similar to train images.","748bcec9":"High volume of data with an imblance.","e52dfa3a":"# Modelling","541c4305":"As we cannot use the internet for the competition, the pretrained resnet50 model is loaded (placed in the folder the online model would be placed in) in as a input dataset.","46f729b6":"* Fastai uses a single trainer class (cnn_learner) that takes in the data, model, metrics, loss functions, optimizer functions etc.\n* Here, the Resnet50 model is used. Its a convolutional neural network that has 50 layers and is pretrained on thousands of images with optimised weights.\n* You can also easily use techniques such as label smoothing with the Learner object if you wish. \n* to_native_fp16() changes floating point representation to 16-bit; GPU computation is faster for neural networks.","61b9d2ae":"* An approximated value of the learning rate is used. You can try others, using small rates increases computation.\n* Use more epochs, at least 10 (experiment with values to get optimal validation loss values) for actual model."}}