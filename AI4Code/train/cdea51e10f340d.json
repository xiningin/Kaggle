{"cell_type":{"a2291aa0":"code","30cf8743":"code","e5fcb48f":"code","d05027fa":"code","8738392d":"code","6e0164b1":"code","382eea70":"code","0abf07e2":"code","beac8f01":"code","9a725667":"code","f8a5731c":"code","ead57481":"code","98495dbd":"code","c37111b1":"code","56482622":"code","4625c8af":"code","8e9a72d7":"code","d6ea2c29":"code","7dc1aeba":"code","eeace2a5":"code","5de2c39b":"markdown","44c5a292":"markdown","fb9636c0":"markdown","0ea73abd":"markdown","f1d78f63":"markdown","697da735":"markdown","1b29f509":"markdown","190164de":"markdown","0f54e888":"markdown","089e7b5d":"markdown"},"source":{"a2291aa0":"import pandas as pd\ndf = pd.read_csv('..\/input\/penguins\/penguins.csv')\ndf.head()","30cf8743":"df.info()","e5fcb48f":"from sklearn import preprocessing\nlabel_encoder = preprocessing.LabelEncoder()\nencode_list = ['species','island','sex']\nfor col in encode_list:\n    df[col]= label_encoder.fit_transform(df[col])\n    \ndf.head()","d05027fa":"X = df.drop(\"sex\", axis=1)\ny = df.sex","8738392d":"# Remove low variance features\nfrom sklearn.feature_selection import VarianceThreshold\n\nselection = VarianceThreshold(threshold=(0.1))    \nX = selection.fit_transform(X)\nX.shape","6e0164b1":"# Data splitting\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, stratify=y, test_size=0.2, random_state=44\n)","382eea70":"X_train.shape, X_test.shape","0abf07e2":"y_train.value_counts()","beac8f01":"y_test.value_counts()","9a725667":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import matthews_corrcoef\nfrom sklearn.metrics import f1_score\n","f8a5731c":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(2) # Define classifier\nknn.fit(X_train, y_train) # Train model\n\n# Make predictions\ny_train_pred = knn.predict(X_train)\ny_test_pred = knn.predict(X_test)\n\n# Training set performance\nknn_train_accuracy = accuracy_score(y_train, y_train_pred) # Calculate Accuracy\nknn_train_mcc = matthews_corrcoef(y_train, y_train_pred) # Calculate MCC\nknn_train_f1 = f1_score(y_train, y_train_pred, average='weighted') # Calculate F1-score\n\n# Test set performance\nknn_test_accuracy = accuracy_score(y_test, y_test_pred) # Calculate Accuracy\nknn_test_mcc = matthews_corrcoef(y_test, y_test_pred) # Calculate MCC\nknn_test_f1 = f1_score(y_test, y_test_pred, average='weighted') # Calculate F1-score\n\nprint('Model performance for Training set')\nprint('- Accuracy: %s' % knn_train_accuracy)\nprint('- MCC: %s' % knn_train_mcc)\nprint('- F1 score: %s' % knn_train_f1)\nprint('----------------------------------')\nprint('Model performance for Test set')\nprint('- Accuracy: %s' % knn_test_accuracy)\nprint('- MCC: %s' % knn_test_mcc)\nprint('- F1 score: %s' % knn_test_f1)","ead57481":"from sklearn.svm import SVC\n\nsvm_rbf = SVC(gamma='auto')\nsvm_rbf.fit(X_train, y_train)\n\n# Make predictions\ny_train_pred = svm_rbf.predict(X_train)\ny_test_pred = svm_rbf.predict(X_test)\n\n# Training set performance\nsvm_rbf_train_accuracy = accuracy_score(y_train, y_train_pred) # Calculate Accuracy\nsvm_rbf_train_mcc = matthews_corrcoef(y_train, y_train_pred) # Calculate MCC\nsvm_rbf_train_f1 = f1_score(y_train, y_train_pred, average='weighted') # Calculate F1-score\n\n# Test set performance\nsvm_rbf_test_accuracy = accuracy_score(y_test, y_test_pred) # Calculate Accuracy\nsvm_rbf_test_mcc = matthews_corrcoef(y_test, y_test_pred) # Calculate MCC\nsvm_rbf_test_f1 = f1_score(y_test, y_test_pred, average='weighted') # Calculate F1-score\n\nprint('Model performance for Training set')\nprint('- Accuracy: %s' % svm_rbf_train_accuracy)\nprint('- MCC: %s' % svm_rbf_train_mcc)\nprint('- F1 score: %s' % svm_rbf_train_f1)\nprint('----------------------------------')\nprint('Model performance for Test set')\nprint('- Accuracy: %s' % svm_rbf_test_accuracy)\nprint('- MCC: %s' % svm_rbf_test_mcc)\nprint('- F1 score: %s' % svm_rbf_test_f1)","98495dbd":"from sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier(max_depth=10) # Define classifier\ndt.fit(X_train, y_train) # Train model\n\n# Make predictions\ny_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)\n\n# Training set performance\ndt_train_accuracy = accuracy_score(y_train, y_train_pred) # Calculate Accuracy\ndt_train_mcc = matthews_corrcoef(y_train, y_train_pred) # Calculate MCC\ndt_train_f1 = f1_score(y_train, y_train_pred, average='weighted') # Calculate F1-score\n\n# Test set performance\ndt_test_accuracy = accuracy_score(y_test, y_test_pred) # Calculate Accuracy\ndt_test_mcc = matthews_corrcoef(y_test, y_test_pred) # Calculate MCC\ndt_test_f1 = f1_score(y_test, y_test_pred, average='weighted') # Calculate F1-score\n\nprint('Model performance for Training set')\nprint('- Accuracy: %s' % dt_train_accuracy)\nprint('- MCC: %s' % dt_train_mcc)\nprint('- F1 score: %s' % dt_train_f1)\nprint('----------------------------------')\nprint('Model performance for Test set')\nprint('- Accuracy: %s' % dt_test_accuracy)\nprint('- MCC: %s' % dt_test_mcc)\nprint('- F1 score: %s' % dt_test_f1)","c37111b1":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=15) # Define classifier\nrf.fit(X_train, y_train) # Train model\n\n# Make predictions\ny_train_pred = rf.predict(X_train)\ny_test_pred = rf.predict(X_test)\n\n# Training set performance\nrf_train_accuracy = accuracy_score(y_train, y_train_pred) # Calculate Accuracy\nrf_train_mcc = matthews_corrcoef(y_train, y_train_pred) # Calculate MCC\nrf_train_f1 = f1_score(y_train, y_train_pred, average='weighted') # Calculate F1-score\n\n# Test set performance\nrf_test_accuracy = accuracy_score(y_test, y_test_pred) # Calculate Accuracy\nrf_test_mcc = matthews_corrcoef(y_test, y_test_pred) # Calculate MCC\nrf_test_f1 = f1_score(y_test, y_test_pred, average='weighted') # Calculate F1-score\n\nprint('Model performance for Training set')\nprint('- Accuracy: %s' % rf_train_accuracy)\nprint('- MCC: %s' % rf_train_mcc)\nprint('- F1 score: %s' % rf_train_f1)\nprint('----------------------------------')\nprint('Model performance for Test set')\nprint('- Accuracy: %s' % rf_test_accuracy)\nprint('- MCC: %s' % rf_test_mcc)\nprint('- F1 score: %s' % rf_test_f1)","56482622":"from sklearn.neural_network import MLPClassifier\n\nmlp = MLPClassifier(activation='logistic',solver='lbfgs', max_iter=1000, alpha=0.01, learning_rate='constant')\nmlp.fit(X_train, y_train)\n\n# Make predictions\ny_train_pred = mlp.predict(X_train)\ny_test_pred = mlp.predict(X_test)\n\n# Training set performance\nmlp_train_accuracy = accuracy_score(y_train, y_train_pred) # Calculate Accuracy\nmlp_train_mcc = matthews_corrcoef(y_train, y_train_pred) # Calculate MCC\nmlp_train_f1 = f1_score(y_train, y_train_pred, average='weighted') # Calculate F1-score\n\n# Test set performance\nmlp_test_accuracy = accuracy_score(y_test, y_test_pred) # Calculate Accuracy\nmlp_test_mcc = matthews_corrcoef(y_test, y_test_pred) # Calculate MCC\nmlp_test_f1 = f1_score(y_test, y_test_pred, average='weighted') # Calculate F1-score\n\nprint('Model performance for Training set')\nprint('- Accuracy: %s' % mlp_train_accuracy)\nprint('- MCC: %s' % mlp_train_mcc)\nprint('- F1 score: %s' % mlp_train_f1)\nprint('----------------------------------')\nprint('Model performance for Test set')\nprint('- Accuracy: %s' % mlp_test_accuracy)\nprint('- MCC: %s' % mlp_test_mcc)\nprint('- F1 score: %s' % mlp_test_f1)","4625c8af":"# Define estimators\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nestimator_list = [\n    ('knn',knn),\n    ('svm_rbf',svm_rbf),\n    ('dt',dt),\n    ('rf',rf),\n    ('mlp',mlp) ]\n\n# Build stack model\nstack_model = StackingClassifier(\n    estimators=estimator_list, final_estimator=LogisticRegression()\n)\n\n# Train stacked model\nstack_model.fit(X_train, y_train)\n\n# Make predictions\ny_train_pred = stack_model.predict(X_train)\ny_test_pred = stack_model.predict(X_test)\n\n# Training set model performance\nstack_model_train_accuracy = accuracy_score(y_train, y_train_pred) # Calculate Accuracy\nstack_model_train_mcc = matthews_corrcoef(y_train, y_train_pred) # Calculate MCC\nstack_model_train_f1 = f1_score(y_train, y_train_pred, average='weighted') # Calculate F1-score\n\n# Test set model performance\nstack_model_test_accuracy = accuracy_score(y_test, y_test_pred) # Calculate Accuracy\nstack_model_test_mcc = matthews_corrcoef(y_test, y_test_pred) # Calculate MCC\nstack_model_test_f1 = f1_score(y_test, y_test_pred, average='weighted') # Calculate F1-score\n\nprint('Model performance for Training set')\nprint('- Accuracy: %s' % stack_model_train_accuracy)\nprint('- MCC: %s' % stack_model_train_mcc)\nprint('- F1 score: %s' % stack_model_train_f1)\nprint('----------------------------------')\nprint('Model performance for Test set')\nprint('- Accuracy: %s' % stack_model_test_accuracy)\nprint('- MCC: %s' % stack_model_test_mcc)\nprint('- F1 score: %s' % stack_model_test_f1)","8e9a72d7":"acc_train_list = {'knn':knn_train_accuracy,\n'svm_rbf': svm_rbf_train_accuracy,\n'dt': dt_train_accuracy,\n'rf': rf_train_accuracy,\n'mlp': mlp_train_accuracy,\n'stack': stack_model_train_accuracy}\n\nmcc_train_list = {'knn':knn_train_mcc,\n'svm_rbf': svm_rbf_train_mcc,\n'dt': dt_train_mcc,\n'rf': rf_train_mcc,\n'mlp': mlp_train_mcc,\n'stack': stack_model_train_mcc}\n\nf1_train_list = {'knn':knn_train_f1,\n'svm_rbf': svm_rbf_train_f1,\n'dt': dt_train_f1,\n'rf': rf_train_f1,\n'mlp': mlp_train_f1,\n'stack': stack_model_train_f1}","d6ea2c29":"mcc_train_list","7dc1aeba":"import pandas as pd\n\nacc_df = pd.DataFrame.from_dict(acc_train_list, orient='index', columns=['Accuracy'])\nmcc_df = pd.DataFrame.from_dict(mcc_train_list, orient='index', columns=['MCC'])\nf1_df = pd.DataFrame.from_dict(f1_train_list, orient='index', columns=['F1'])\ndf = pd.concat([acc_df, mcc_df, f1_df], axis=1)\ndf","eeace2a5":"df.to_csv('results.csv')","5de2c39b":"**Neural network**","44c5a292":"# **Build Stacked model**","fb9636c0":"# **Build Classification models**","0ea73abd":"**Random forest**","f1d78f63":"**Support vector machine (Radial basis function kernel)**","697da735":"# **Load dataset**","1b29f509":"# **Results**","190164de":"**Decision tree**","0f54e888":"**K nearest neighbors**","089e7b5d":"# **How to stack ML models**\n\nR.Caliskan\n![](https:\/\/allisonhorst.github.io\/palmerpenguins\/man\/figures\/lter_penguins.png)"}}