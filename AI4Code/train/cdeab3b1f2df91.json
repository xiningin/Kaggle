{"cell_type":{"cea55c91":"code","c07adf26":"code","00054946":"code","0bd165a0":"code","23967218":"code","a68c8133":"code","988b3358":"code","d8b49f1a":"code","3cc02582":"code","71aa3d2a":"code","a9167be7":"code","13c1429f":"code","52689c22":"code","d52f4ed4":"code","2fdfad4a":"code","e650ad07":"code","5184d539":"markdown","b15cf0e5":"markdown","e2a33b79":"markdown","ba46ca31":"markdown","5ba69f9a":"markdown","1ab020fe":"markdown"},"source":{"cea55c91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c07adf26":"import glob\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom keras.utils.np_utils import to_categorical\n\nimg_size = (224, 224)\nimg_array_list = []\ncls_list = []\n\nimg_list1 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class1\/*.png')\nfor i in img_list1:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list1 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class1_def\/*.png')\nfor i in img_list1:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train1 = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))","00054946":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense\nfrom tensorflow.keras.metrics import AUC\n\nmodel = Sequential()\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', input_shape=(img_size[0], img_size[1], 1)))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.1))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(rate=0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(Dropout(rate=0.25))\n\nmodel.add(Dense(units=2, activation='softmax'))\n\nauc = AUC()\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy', auc])\nmodel.summary()","0bd165a0":"model.fit(X_train1, y_train, epochs=6)","23967218":"img_array_list = []\ncls_list = []\n\nimg_list2 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class2\/*.png')\nfor i in img_list2:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list2 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class2_def\/*.png')\nfor i in img_list2:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train2 = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))","a68c8133":"model.fit(X_train2, y_train, epochs=6)","988b3358":"img_array_list = []\ncls_list = []\n\nimg_list3 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class3\/*.png')\nfor i in img_list3:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list3 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class3_def\/*.png')\nfor i in img_list3:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train3 = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))","d8b49f1a":"model.fit(X_train3, y_train, epochs=6)","3cc02582":"img_array_list = []\ncls_list = []\n\nimg_list4 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class4\/*.png')\nfor i in img_list4:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list4 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class4_def\/*.png')\nfor i in img_list4:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train4 = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))","71aa3d2a":"model.fit(X_train4, y_train, epochs=6)","a9167be7":"img_array_list = []\ncls_list = []\n\nimg_list5 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class5\/*.png')\nfor i in img_list5:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list5 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class5_def\/*.png')\nfor i in img_list5:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train5 = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))","13c1429f":"model.fit(X_train5, y_train, epochs=6)","52689c22":"img_array_list = []\ncls_list = []\n\nimg_list6 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class6\/*.png')\nfor i in img_list6:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(0)\n\nimg_list6 = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/train\/Class6_def\/*.png')\nfor i in img_list6:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n    cls_list.append(1)\n\nX_train6 = np.array(img_array_list)\ny_train = to_categorical(np.array(cls_list))","d52f4ed4":"model.fit(X_train6, y_train, epochs=6)","2fdfad4a":"import glob\nfrom keras.preprocessing.image import load_img, img_to_array\n\nimg_array_list = []\n\nimg_list = glob.glob('\/kaggle\/input\/1056lab-defect-detection-extra\/test\/*.png')\nimg_list.sort()\nfor i in img_list:\n    img = load_img(i, color_mode='grayscale', target_size=(img_size))\n    img_array = img_to_array(img) \/ 255\n    img_array_list.append(img_array)\n\nX_test = np.array(img_array_list)","e650ad07":"predict = model.predict(X_test)[:, 1]\n\nsubmit = pd.read_csv('\/kaggle\/input\/1056lab-defect-detection-extra\/sampleSubmission.csv')\nsubmit['defect'] = predict\nsubmit.to_csv('submission.csv', index=False)","5184d539":"# \u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3057\u3066\u5b66\u7fd2","b15cf0e5":"# \u5b66\u7fd2 (Training)","e2a33b79":"# \u4e88\u6e2c (Predicting)","ba46ca31":"# \u30e2\u30c7\u30eb (Model)","5ba69f9a":"# \u8a13\u7df4\u30c7\u30fc\u30bf (Training data)","1ab020fe":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf (Test data)"}}