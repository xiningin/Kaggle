{"cell_type":{"3ede9dad":"code","1d172f43":"code","692224b3":"code","0f34be5e":"code","995c779d":"code","a8cad63c":"code","fe77ed75":"code","f60252c4":"code","758d02c1":"code","69b6c9a0":"code","f0ecae63":"code","e06db11d":"code","925352ee":"code","94f05b9e":"code","69a8a1a1":"code","8dae5651":"code","3623092d":"code","323fb204":"code","cab69188":"code","eca1fb9c":"code","5f61ead5":"code","f514d620":"code","eba13633":"code","ed1bcfd3":"code","5845fa63":"code","0625a76b":"code","5a5f24ec":"code","1a912ac0":"markdown","e79acc5c":"markdown","a2eccea0":"markdown","76e8bb67":"markdown","54c7a07e":"markdown","10dd2d77":"markdown","df8053c8":"markdown","7f3dbbb3":"markdown","c9297817":"markdown","0fc81afc":"markdown","2269c743":"markdown","5dd75496":"markdown","46830427":"markdown","8388b53d":"markdown","eb0cab56":"markdown","8b48998c":"markdown"},"source":{"3ede9dad":"#'''Importing Data Manipulation Modules'''\nimport numpy as np                 # Linear Algebra\nimport pandas as pd                # Data Processing, CSV file I\/O (e.g. pd.read_csv)\n\n#'''Seaborn and Matplotlib Visualization'''\nimport matplotlib                  # 2D Plotting Library\nimport matplotlib.pyplot as plt\nimport seaborn as sns              # Python Data Visualization Library based on matplotlib\nimport geopandas as gpd            # Python Geospatial Data Library\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n\n#'''Plotly Visualizations'''\nimport plotly as plotly                # Interactive Graphing Library for Python\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)\n\n#'''Spatial Visualizations'''\nimport folium\nimport folium.plugins\n\n#'''NLP - WordCloud'''\nfrom wordcloud import WordCloud, ImageColorGenerator, STOPWORDS\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\n\nfrom plotly import tools\n\nfrom PIL import Image","1d172f43":"# reading the dataset\ndf = pd.read_csv('..\/input\/sanfranciso-crime-dataset\/Police_Department_Incidents_-_Previous_Year__2016_.csv')","692224b3":"print('Rows     :',df.shape[0])\nprint('Columns  :',df.shape[1])\nprint('\\nFeatures :\\n     :',df.columns.tolist())\nprint('\\nMissing values    :',df.isnull().values.sum())\nprint('\\nUnique values :  \\n',df.nunique())","0f34be5e":"df.isnull().sum()","995c779d":"# filling the missing value in PdDistrict using the mode function\ndf['PdDistrict'].fillna(df['PdDistrict'].mode()[0],inplace = True)","a8cad63c":"df.head()","fe77ed75":"df['Category'].value_counts()","f60252c4":"plt.rcParams['figure.figsize'] = (20, 10)\nplt.style.use('seaborn')\nsns.countplot(x = 'Category', data = df, order = df['Category'].value_counts().index)\nplt.title('Crime Categories in Sanfrancisco', fontweight = 40, fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()\n","758d02c1":"df['PdDistrict'].value_counts()","69b6c9a0":"xSOUTHERN = df[df['PdDistrict'] == 'SOUTHERN']\nxNORTHERN = df[df['PdDistrict'] == 'NORTHERN']\nxMISSION = df[df['PdDistrict'] == 'MISSION']\nxCENTRAL = df[df['PdDistrict'] == 'CENTRAL']\nxBAYVIEW = df[df['PdDistrict'] == 'BAYVIEW']\nxINGLESIDE = df[df['PdDistrict'] == 'INGLESIDE']\nxTARAVAL  = df[df['PdDistrict'] == 'TARAVAL ']\nxTENDERLOIN = df[df['PdDistrict'] == 'TENDERLOIN']\nxRICHMOND = df[df['PdDistrict'] == 'RICHMOND']\nxPARK = df[df['PdDistrict'] == 'PARK']","f0ecae63":"trace1 = go.Histogram(\n    x=xSOUTHERN['Category'],\n    opacity=0.75,\n    name = \"SOUTHERN\",\n    marker=dict(color='rgb(165,0,38)'))\ntrace2 = go.Histogram(\n    x=xNORTHERN['Category'],\n    opacity=0.75,\n    name = \"NORTHERN\",\n    marker=dict(color='rgb(215,48,39)'))\ntrace3 = go.Histogram(\n    x=xMISSION['Category'],\n    opacity=0.75,\n    name = \"MISSION\",\n    marker=dict(color='rgb(244,109,67)'))\ntrace4 = go.Histogram(\n    x=xCENTRAL['Category'],\n    opacity=0.75,\n    name = \"CENTRAL\",\n    marker=dict(color='rgb(253,174,97)'))\ntrace5 = go.Histogram(\n    x=xBAYVIEW['Category'],\n    opacity=0.75,\n    name = \"BAYVIEW\",\n    marker=dict(color='rgb(254,224,144)'))\ntrace6 = go.Histogram(\n    x=xINGLESIDE['Category'],\n    opacity=0.75,\n    name = \"INGLESIDE\",\n    marker=dict(color='rgb(170,253,87)'))\ntrace7 = go.Histogram(\n    x=xTARAVAL['Category'],\n    opacity=0.75,\n    name = \"TARAVAL\",\n    marker=dict(color='rgb(171,217,233)'))\ntrace8 = go.Histogram(\n    x=xTENDERLOIN['Category'],\n    opacity=0.75,\n    name = \"TENDERLOIN\",\n    marker=dict(color='rgb(116,173,209)'))\ntrace9 = go.Histogram(\n    x=xRICHMOND['Category'],\n    opacity=0.75,\n    name = \"RICHMOND\",\n    marker=dict(color='rgb(69,117,180)'))\ntrace10 = go.Histogram(\n    x=xPARK['Category'],\n    opacity=0.75,\n    name = \"PARK\",\n    marker=dict(color='rgb(49,54,149)'))\n\ndata = [trace1, trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10]\nlayout = go.Layout(barmode='stack',\n                   title='District counts according to Crime genres',\n                   xaxis=dict(title='Crime genres'),\n                   yaxis=dict( title='Count'),\n                   paper_bgcolor='beige',\n                   plot_bgcolor='beige'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e06db11d":"wave_mask= np.array(Image.open('..\/input\/policemanjpg\/policeman-silhouette-silhouette-policeman-white-background-135347935.jpg'))\n\nstopwords = set(STOPWORDS)\nstopwords.update([\"II\", \"III\"])\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(mask=wave_mask,background_color=\"lavenderblush\",colormap=\"hsv\" ,contour_width=2, contour_color=\"black\",\n                      width=950,stopwords=stopwords,\n                          height=950\n                         ).generate(\" \".join(df.Descript))\n\nplt.imshow(wordcloud ,interpolation='bilinear')\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","925352ee":"plt.rcParams['figure.figsize'] = (18, 8)\nplt.style.use('dark_background')\nsns.countplot(x = 'DayOfWeek', data = df)\nplt.title('Crimes in each day of the week', fontweight = 40, fontsize = 30)\nplt.xticks(rotation = 45)\nplt.show()\n\n","94f05b9e":"df['Date'] = pd.to_datetime(df['Date'])","69a8a1a1":"def get_month(x):\n    return x.month","8dae5651":"df['month'] = df['Date'].apply(get_month)","3623092d":"df['month'].unique()","323fb204":"plt.rcParams['figure.figsize'] = (18,8)\n\nplt.style.use('dark_background')\n\nsns.countplot(x = 'month', data = df)\n\nplt.title('Crimes in each month')\n\nplt.show()","cab69188":"df['Resolution'].value_counts()","eca1fb9c":"none = df[df['Resolution'] == 'NONE']\narrest = df[df['Resolution'] == 'ARREST, BOOKED']\nunfounded = df[df['Resolution'] == 'UNFOUNDED']\njuvenile = df[df['Resolution'] == 'JUVENILE BOOKED ']\nexceptional = df[df['Resolution'] == 'EXCEPTIONAL CLEARANCE']","5f61ead5":"none_category = pd.DataFrame(none['Category'].value_counts())\narrest_category = pd.DataFrame(arrest['Category'].value_counts())\nunfounded_category = pd.DataFrame(unfounded['Category'].value_counts())\njuvenile_category = pd.DataFrame(juvenile['Category'].value_counts())\nexceptional_category = pd.DataFrame(exceptional['Category'].value_counts())","f514d620":"trace0 = go.Scatter(\n    x = none_category.index,\n    y = none_category[\"Category\"],\n    mode = 'markers',\n    name = 'none',\n    marker= dict(size= 14,\n                    line= dict(width=1),\n                    color= \"lime\",\n                    opacity= 0.7\n                   )\n)\ntrace1 = go.Scatter(\n    x = arrest_category.index,\n    y = arrest_category[\"Category\"],\n    mode = 'markers',\n    name = 'arrest',\n       marker= dict(size= 14,\n                    line= dict(width=1),\n                    color= \"firebrick\",\n                    opacity= 0.7,\n                   symbol=220\n                   )\n)\ntrace2 = go.Scatter(\n    x = unfounded_category.index,\n    y = unfounded_category[\"Category\"],\n    mode = 'markers',\n    name = 'unfounded',\n    marker= dict(size= 14,\n                    line= dict(width=1),\n                    color='rgba(150, 26, 80, 0.8)',\n                    opacity= 0.7\n                   )\n)\ntrace3 = go.Scatter(\n    x = juvenile_category.index,\n    y = juvenile_category[\"Category\"],\n    mode = 'markers',\n    name = 'juvenile',\n       marker= dict(size= 14,\n                    line= dict(width=1),\n                    color= 'rgba(28, 149, 249, 0.8)',\n                    opacity= 0.7,\n                    symbol=220\n                   )\n)\n\ntrace4 = go.Scatter(\n    x = exceptional_category.index,\n    y = exceptional_category[\"Category\"],\n    mode = 'markers',\n    name = 'exceptional',\n    marker= dict(size= 14,\n                    line= dict(width=1),\n                    color= 'rgba(249, 94, 28, 0.8)',\n                    opacity= 0.7\n                   )\n)\n\n\nfig = tools.make_subplots(rows=2, cols=2, \n                          subplot_titles=('Category','Category','Category'))\n\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 1, 2)\n\n\nfig['layout'].update(showlegend=False,height=800, width=800, title=\"Resolutions by Categories \" ,paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor=\"moccasin\")\niplot(fig)","eba13633":"none_PdDistrict = pd.DataFrame(none['PdDistrict'].value_counts())\narrest_PdDistrict = pd.DataFrame(arrest['PdDistrict'].value_counts())\nunfounded_PdDistrict = pd.DataFrame(unfounded['PdDistrict'].value_counts())\njuvenile_PdDistrict = pd.DataFrame(juvenile['PdDistrict'].value_counts())\nexceptional_PdDistricty = pd.DataFrame(exceptional['PdDistrict'].value_counts())","ed1bcfd3":"data8=[go.Scatterpolar(\n      r = list(none_PdDistrict[\"PdDistrict\"].values),\n      theta = none_PdDistrict.index,\n      fill = 'toself',\n      name = \"none\",\n    thetaunit = \"radians\",\n    ),\n go.Scatterpolar(\n      r = list(arrest_PdDistrict[\"PdDistrict\"].values),\n      theta = arrest_PdDistrict.index,\n      fill = 'toself',\n      name = 'arrest',\n    thetaunit = \"radians\"\n    ),\ngo.Scatterpolar(\n      r = unfounded_PdDistrict[\"PdDistrict\"].values,\n      theta = unfounded_PdDistrict.index,\n      fill = 'toself',\n      name = \"unfounded\",\n    thetaunit = \"radians\",\n     subplot = \"polar2\"\n    ),\ngo.Scatterpolar(\n      r = exceptional_PdDistricty[\"PdDistrict\"].values,\n      theta =exceptional_PdDistricty.index,\n      fill = 'toself',\n      name = 'exceptional',\n    subplot = \"polar2\",\n    thetaunit = \"radians\"\n    )]","5845fa63":"layout = go.Layout(\n    showlegend=False,\n    paper_bgcolor='moccasin',\n    title=\"Resolutions by Districts\",\n    font=dict(family='Gravitas One',size=20,color='darkred'),\n     \n    \n    polar = dict(\n      bgcolor=\"linen\",\n      domain = dict(\n        y = [0.60, 0.90],\n        x = [0, 0.48]\n      ),\n      radialaxis = dict(\n             visible = False,\n        angle = 45\n      ),\n      angularaxis = dict(\n        direction = \"clockwise\",\n        period = 6,\n          gridwidth=3,\n          tickfont=dict(size=11,color=\"black\"),\n      )\n    ),\n    polar2 = dict(\n        bgcolor=\"linen\",\n      domain = dict(\n        y = [0.60, 0.90],\n        x = [0.52, 1]\n      ),\n      radialaxis = dict(\n             visible = False,\n        angle = 45\n      ),\n      angularaxis = dict(\n        direction = \"clockwise\",\n        period = 5,\n           gridwidth=3,\n          tickfont=dict(size=11,color=\"black\"),\n      )),\n    \n     annotations=[dict(showarrow=False,text=\"District\",x=0.18,y=1.05,xref=\"paper\",yref=\"paper\",font=dict(size=15,color=\"midnightblue\"),bgcolor=\"lightyellow\",borderwidth=5),\n                                  dict(showarrow=False,text=\"District\",x=0.83,y=1.05,xref=\"paper\",yref=\"paper\",font=dict(size=15,color=\"midnightblue\"),bgcolor=\"lightyellow\",borderwidth=5)\n                                  ]\n)\n\nfig = go.Figure(data=data8,layout=layout)\niplot(fig)","0625a76b":"import folium\nfrom folium.plugins import HeatMap\nm=folium.Map([37.7749,-122.4194],zoom_start=11)\nHeatMap(df[['Y','X']].dropna(),radius=8,gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'}).add_to(m)\ndisplay(m)","5a5f24ec":"plt.rcParams['figure.figsize'] = (18,8)\n\nplt.style.use('dark_background')\n\nplt.title('Crimes by time',fontsize = 25)\n\ndf['Time'].value_counts()[:15].plot.bar()","1a912ac0":"# Data Visualization","e79acc5c":"# Reading the Dataset","a2eccea0":"# Word Cloud with Descript","76e8bb67":"> ## Creating month column","54c7a07e":"# Crime counts according to each month ","10dd2d77":"> Graph below, as we can see, the number of crimes everyday throughout the week tend to be quite similiar, but if we want to be picky, Friday  definitly has the highest number of crimes.","df8053c8":"### Most common resolutions, comparing with District column","7f3dbbb3":"> In the below, graph shows the number of different districts  in the data set according to crime genres. For example, 9204 crimes in the data set were found in the \"theft\" genre, which  were happened in Southern area. In the data set we see that the crime genre with the most number is  larceny\/theft.","c9297817":"> As we can see, crimes were most likely to happend at 12:00PM or at midnight.","0fc81afc":"In the below, graph shows the number of **Crime Categories** according to the data set. as we can see that the **larceny\/theft** takes the 1st place following by **other offenses**.","2269c743":"# Thanks for watching!","5dd75496":"### Choosing 'NONE', 'ARREST, BOOKED', 'UNFOUNDED', 'JUVENILE BOOKED' as the most common resolutions, comparing with Category column, for example, for the 'sex offenses':  there are 674 cases were none resolution, 215 were arrested, 27 were unfounded, 18 were exceptional.","46830427":"# Checking the null value","8388b53d":"# Summary of Dataset","eb0cab56":"# Crime Distribution in a Heat Map","8b48998c":"> The highest Density areas are marked in red and lowest density areas are marked in blue color"}}