{"cell_type":{"d82739f5":"code","4b4a3cdd":"code","ff2e3f4b":"code","c55d9257":"code","22edbe6c":"code","04fbc062":"code","edf04b27":"code","3e914488":"code","334c41c2":"code","e2cfaaa7":"code","d5ed84b2":"code","16a7f11e":"code","bbb8b843":"code","8b9c2400":"code","5dd88dc7":"code","b918a748":"code","c8654ec9":"code","c836203f":"code","35c6f42e":"code","071540ab":"code","b5123ddc":"code","33f6d51f":"code","1eec2514":"code","84b09b1e":"code","bd799e4a":"code","1a2c7a48":"code","5e03f8c0":"code","674dc3f4":"code","689afb81":"code","3fda9adb":"code","8a6bd5ee":"code","22628960":"markdown","fbaf61ae":"markdown","5c30ac6e":"markdown","8c64e766":"markdown","ec405039":"markdown","1b841894":"markdown","421a5fae":"markdown","84840041":"markdown","fd8be188":"markdown","6836cc47":"markdown","554cacea":"markdown","3ef0841f":"markdown","4ce0c53a":"markdown","9f39bd08":"markdown"},"source":{"d82739f5":"# Hello this is my first project on kaggle. I would appreciate feedback so much\n# Thank you :)","4b4a3cdd":"# Reading the data\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ff2e3f4b":"# Loading the needed liberaries needed for analysing\nimport numpy as np # linear algebra\nimport pandas as pd # for Reading, Analysing and Manipulating Data\nimport matplotlib.pyplot as plt # Visualizing Data\nimport seaborn as sns # Visualizing Data\nsns.set_style('whitegrid')\n%matplotlib inline","c55d9257":"# Reading the data\ndf = pd.read_csv('\/kaggle\/input\/911-calls\/911.csv') ","22edbe6c":"# getting a glance of what the data and features looks like though viewing the very first raws\ndf.head()","04fbc062":"# Understanding the data even more by knowing the types of the features and getting an idea of the null\n# values..\n# It is apparent that the zip code of the instance is the least, with the most non-null values, this gives us a\n# a good view of the data.\ndf.info()","edf04b27":"df.shape","3e914488":"df.select_dtypes('object')","334c41c2":"df.select_dtypes(['float64','int64'])","e2cfaaa7":"df.isnull().sum()","d5ed84b2":"# It is appearant that the 'zip' feature has the most null values","16a7f11e":"df['zip'].nunique()","bbb8b843":"df['zip'].value_counts().head()","8b9c2400":"df['twp'].value_counts().head()","5dd88dc7":"# This way is not effective as there are, for example, different types of traffic or EMS\ndf['title'].value_counts()","b918a748":"# To get the exact reason for the emergency call, we need to reason extracted from the title feature\n# Creating a new feature called reason using apply method\n# Applying the apply method on a feature, maps the function on the column raw by raw..\ndf['reason'] = df['title'].apply(lambda x : x.split(':')[0])","c8654ec9":"# Examining the new column within the table of data.\n# The new 'reason' feature is of the type String\ndf.head()","c836203f":"# We can know the most reporting reason\ndf['reason'].value_counts()","35c6f42e":"# We can import the Warnings liberary, to hid the warnings that happen with seaborn visuals\nimport warnings\nwarnings.filterwarnings('ignore')\n# Visualising the count of the emergencies call by the reason of call\nsns.countplot(df['reason'],data=df)","071540ab":"# To report this, we need to analyse the months againts the number of traffic calls..\ntype(df['timeStamp'][0]) # the timestamp feature is String, which is of not much help to analysis.","b5123ddc":"# Hence, we can turn the timestamp from a string into a timestamp object for more reliable view.\n# Overwriting the 'timestamp' feature applying the apply method using the pd.date_time method \n# that changes A time stamp feature of a type\n# string into an actual timestamp object.\ndf['timeStamp'] = df['timeStamp'].apply(lambda x : pd.to_datetime(x))","33f6d51f":"# Verifying the change in the timestamp object that is has been already changed into 'datetime64[ns]'\ndf.info()","1eec2514":"# Creating new features from the timestamp feature of the ease of analysing and visualization\n# We can create a new feature of the month of each emergency call, \n# the new feature is of the type int\ndf['month'] = df['timeStamp'].apply(lambda x : x.month)\n# We can now try to answer the question 'What are the most days of the month of reporting traffic?'","84b09b1e":"# What are the most days of the month of reporting traffic?\n# January\nsns.countplot(x=df['month'],data=df[df['reason']=='Traffic'])","bd799e4a":"# It is apparent that the number calls decreases by the end of the year.\nsns.countplot(x=df['month'],data=df)","1a2c7a48":"sns.countplot(x=df['month'],data=df,hue=df['reason'])","5e03f8c0":"# We can create a new feature of the hour of each emergency call, \n# the new feature is of the type int\ndf['hour'] = df['timeStamp'].apply(lambda x : x.hour)\nsns.countplot(x=df['hour'],data=df[df['reason']=='EMS'])\n# It is apparent that the the most hours of the day that EMS happen are the afternoon hours.","674dc3f4":"# We can create a new feature of the day of the week of each emergency call,\n# Using apply and the attribute of datetime objects '.dayofweek' which return a numerical value of the day\n# as such:\nnumDays_vs_weekDay = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['day of the week'] = df['timeStamp'].apply(lambda x : x.dayofweek)\n# we can label the days of the week instead of the numbers but with string represenation of the day.\ndf['day of the week'] = df['day of the week'].map(numDays_vs_weekDay)\n# Now we can answer of What are the most days of the week of reporting EMS?\nsns.countplot(x=df['day of the week'],data=df[df['reason']=='EMS'])\n# the results are pretty similar that it appears there is not significant increase of EMS calls in\n# a specific day of the week.","689afb81":"# We can still visualize the count of all calls with respect to their reason across the whole interval\nsns.countplot(x=df['day of the week'],data=df,hue=df['reason'])\n# Relocate the legend box outside the graph for a better view\nplt.legend(bbox_to_anchor=(1, 1))\n# There is not increase significant of any specific call on any given day of the week\n# However, there is a decrease in the traffic call on Sunday","3fda9adb":"# We can look even more closer into the day of the week though analysing the hours of each day.\n# df.groupby(['day of the week','hour']).count() # a groupby which matches the day of the week with each hour of it\n# We can use .unstack() to rearrange the indexes which matches the day with the hour\n# df.groupby(['day of the week','hour']).count()['reason'] # we can have the only feature to look at as the reason\nday_vs_hour_counted_by_reason= df.groupby(['day of the week','hour']).count()['reason'].unstack()\nday_vs_hour_counted_by_reason","8a6bd5ee":"# We want to answer undertand from a heatmap is the correlation between the hour of the day \n# and hour of days\n# Increasing the size of the figure\nplt.figure(figsize=(12,8))\n# Creating the heatmap using seaborn\nsns.heatmap(day_vs_hour_counted_by_reason)\n# It is apparent that the late hours of the night has the least emergency calls\n# However on the weekends, there is a more emergency calls after midnight.","22628960":"# How many zip codes does the dataset have?","fbaf61ae":"The database records the emergency 911 calls over an interval of time.\nthe features are as follows:\n\nThese two features represent the location as identified by the Opearator\nlat : String variable, Latitude\nlng: String variable, Longitude\n\ndesc: String variable, Description of the Emergency Call, reason and nature of emergency\nzip: String variable, Zipcode of the reporter as provided by the caller\ntitle: String variable, Title\ntimeStamp: String variable, YYYY-MM-DD HH:MM:SS\ntwp: String variable, Township\naddr: String variable, Address\ne: String variable, Dummy variable (always 1)","5c30ac6e":"# What are the top 5 townships (twp) for 911 calls?","8c64e766":"# Which features are numerical?","ec405039":"# Which features are categorical?","1b841894":"# What Features are available in the dataset? and what are their types?","421a5fae":"# What the most reported emergencies?","84840041":"# What are the top 5 zip codes that has the most emergency calls?","fd8be188":"# How many rows and columns does the dataset have?","6836cc47":"# What are the most hours of the day of reporting EMS?","554cacea":"# What are the most days of the week of reporting EMS?","3ef0841f":"# What are the number of calls for each month?","4ce0c53a":"# What are the most days of the month of reporting traffic?","9f39bd08":"# Which features contain blank, null or empty values?"}}