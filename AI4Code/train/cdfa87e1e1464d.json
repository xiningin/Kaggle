{"cell_type":{"de54680e":"code","e23e1ce2":"code","721366eb":"code","88e5d00f":"code","dff7945d":"code","2b112d1c":"code","c76af457":"code","57cc8cdb":"code","a317810b":"code","ac4f82a4":"markdown"},"source":{"de54680e":"# dependencies\nimport pickle\nimport time\nimport numpy as np \nimport pandas as pd \nimport os\nimport re\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split","e23e1ce2":"# function for read .pgm files\ndef read_pgm(path):\n    \"\"\"Return a raster of integers from a PGM as a list of lists.\"\"\"\n    pgmf=open(path,'rb')\n    pgmf.readline()\n    (width, height) = [int(i) for i in pgmf.readline().split()]\n    depth = int(pgmf.readline())\n    assert depth <= 255\n\n    raster = []\n    for y in range(height):\n        row = []\n        for y in range(width):\n            row.append(ord(pgmf.read(1)))\n        raster.append(row)\n    pgmf.close()\n    return np.array(raster).flatten()","721366eb":"# PCA class \nclass PCA:\n    __performance,__covar,__eig_val,__eig_vect,__var_trace,__rank,__variance_acc=0,0,0,0,0,0,[]\n    def __init__(self,data):\n        self.data=data\n    def fit(self):\n        start_time = time.time()\n        data_meaned= self.data-np.mean(self.data,axis=0)\n        self.__covar=1\/(data_meaned.shape[0]-1)*(data_meaned.T@data_meaned)\n        eig_val,eig_vect=np.linalg.eigh(self.__covar)\n        self.__rank=min(data_meaned.shape[0],data_meaned.shape[1])\n        eig_val=eig_val[::-1]\n        self.__eig_val=eig_val[: self.__rank]\n        eig_vect=np.flip(eig_vect, axis=1)\n        self.__eig_vect=eig_vect[:,:self.__rank]\n        covSum=np.sum(self.__eig_val)\n        self.__var_trace=(self.__eig_val\/covSum)\n        sums=0\n        for i in range(self.__rank):\n            sums+=self.__var_trace[i]\n            self.__variance_acc.append(sums)\n        self.__performance=time.time() - start_time\n    def transform(self,d,alpha):\n        res = next(x for x, val in enumerate(self.__variance_acc) if val > alpha)\n        p= self.__eig_vect[:,:res]\n        projected=d@p\n        return projected\n    def time(self):\n        return self.__performance\n    def variance_ratio(self):\n        return self.__var_trace\n    def variance_acc(self):\n        return self.__variance_acc\n    def covariance_matrix(self):\n        return self.__covar\n    def variances(self):\n        return self.__eig_val\n    def components(self):\n        return self.__eig_vect","88e5d00f":"# parsing code for dataset\narr=[]\nids=[]\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path=os.path.join(dirname, filename)\n        arr.append(read_pgm(path))\n        ids.append(int(re.sub(\"[^0-9]\", \"\", path[-9:-6])))","dff7945d":"# save flattened pictures into csv\ndf=pd.DataFrame(arr)\ndf.insert(0,\"Id\",ids)\ndf=df.nsmallest(400,'Id').reset_index(drop=True)\ndf.to_csv('processedData.csv')","2b112d1c":"# even\/odd splitting\nx_train=df.iloc[1::2].iloc[:,1:].values\ny_train=df.iloc[1::2].iloc[:,0].values\nx_test=df.iloc[::2].iloc[:,1:].values\ny_test=df.iloc[::2].iloc[:,0].values","c76af457":"# train the KNN and performing PCA\npca=PCA(x_train)\npca.fit()\niteration=[]\nfor alpha in [0.8,0.85,0.9,0.95]:\n    pr_train=pca.transform(x_train,alpha)\n    pr_test=pca.transform(x_test,alpha)\n    knn=[]\n    for k in [1,3,5,7]:\n        model = KNeighborsClassifier(n_neighbors=k)\n        model.fit(pr_train,y_train)\n        predicted= model.predict(pr_test)\n        knn.append(accuracy_score(y_test, predicted)*100)\n    iteration.append(knn)","57cc8cdb":"# saving the output\naccuracy = pd.DataFrame(iteration, columns=['k = 1','k = 3','k = 5','k = 7'],index=['a = 0.8','a = 0.85','a = 0.9','a = 0.95'])\npickle.dump(model, open('knnORL.sav', 'wb'))\npickle.dump(pca, open('pcaORL.sav', 'wb'))\naccuracy.to_csv('accuracy.csv')\n# load the model from disk\n# loaded_model = pickle.load(open(filename, 'rb'))","a317810b":"# Redo all previous steps on different different split\nX_train, X_test, Y_train, Y_test = train_test_split(df.iloc[:,1:].values, df.iloc[:,0].values, test_size=0.3, random_state=42,stratify=df.iloc[:,0].values)\npca2=PCA(X_train)\npca2.fit()\niteration=[]\nfor alpha in [0.8,0.85,0.9,0.95]:\n    pr_train=pca2.transform(X_train,alpha)\n    pr_test=pca2.transform(X_test,alpha)\n    knn=[]\n    for k in [1,3,5,7]:\n        model2 = KNeighborsClassifier(n_neighbors=k)\n        model2.fit(pr_train,Y_train)\n        predicted= model2.predict(pr_test)\n        knn.append(accuracy_score(Y_test, predicted)*100)\n    iteration.append(knn)\naccuracy2 = pd.DataFrame(iteration, columns=['k = 1','k = 3','k = 5','k = 7'],index=['a = 0.8','a = 0.85','a = 0.9','a = 0.95'])\npickle.dump(model2, open('knnORL2.sav', 'wb'))\npickle.dump(pca2, open('pcaORL2.sav', 'wb'))\naccuracy2.to_csv('accuracy2.csv')","ac4f82a4":"# PCA and KNN on ORL dataset"}}