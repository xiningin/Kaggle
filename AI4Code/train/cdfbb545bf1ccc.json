{"cell_type":{"6fb84927":"code","e08e58c1":"code","799f3e4e":"code","6e7124dd":"code","7b697702":"code","24bda09d":"code","0047f7e0":"code","c1aed93c":"code","54ff0a9e":"code","037b5585":"code","2b91a1c6":"code","e0354417":"code","37ad8589":"code","420a6f75":"code","1efa5684":"code","f52f4cc2":"code","66b98101":"code","bd297039":"code","affe991a":"code","99732d05":"code","c5450433":"code","aa49f9de":"code","597a5c5f":"code","8049000a":"code","5b0c4f97":"code","ffde8f18":"code","74eb7984":"code","400b5c71":"code","f18f65dc":"code","b55db7bc":"code","e9238535":"code","cd5afb25":"code","c542ab0b":"code","a634f10e":"code","9efc4021":"code","17047843":"code","27ef0937":"code","b1ae71af":"code","a64dcf40":"code","629366bb":"code","3813950f":"code","12ca9ef6":"code","d895919f":"code","e871deae":"code","a50b3ea9":"code","1d10999e":"code","92215474":"code","83f6550b":"code","a0bf0764":"code","2f2715bc":"code","eb605a17":"code","916db2c7":"code","69b96315":"code","945c2de6":"code","ecba2ec7":"code","0886c80b":"code","c0d88be8":"code","899c4c50":"code","c156aeaa":"code","6c24557f":"code","3975da08":"code","c133579b":"code","2c79fce2":"code","3596df5b":"code","de5795fc":"code","e7cfc8ec":"code","c6c0db0f":"code","74a7d93d":"code","73603ab0":"code","fa23d288":"code","2623c218":"code","c5267ba8":"code","9a689d9a":"code","05f78394":"markdown","56507de9":"markdown","4ba5c90e":"markdown","fc36e2e3":"markdown","3ebaefe1":"markdown","ad69e020":"markdown","488afd67":"markdown","1de7ea2a":"markdown","548a2022":"markdown","dd473aaf":"markdown","e25204f9":"markdown","6edc8475":"markdown","9983b705":"markdown","cfea0ad0":"markdown","ca1d692f":"markdown","5234f07e":"markdown","dc59b652":"markdown","5c858396":"markdown","89903b37":"markdown","cc7eca80":"markdown","05fbcb43":"markdown","5fbfdd53":"markdown"},"source":{"6fb84927":"# Importing Libraries\nimport time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport plotly.figure_factory as ff\nimport sklearn\nimport statsmodels.api as sm\nimport statsmodels\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport warnings\nimport calendar\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import RobustScaler\n%matplotlib inline\npio.templates.default = \"plotly_dark\"\nwarnings.filterwarnings('ignore')","e08e58c1":"# Load Dataset\nbike =pd.read_csv('..\/input\/bike-sharing\/day.csv')\nbike.head(10)","799f3e4e":"bike.shape # 730 rows & 16 features","6e7124dd":"bike.isnull().sum() # No missing values","7b697702":"bike.info() # Dataframe info","24bda09d":"# Datatype count\nfig=px.bar(x=bike.dtypes.value_counts().index.astype(str).to_list() ,  \n       y = bike.dtypes.value_counts().to_list(),\n       color = bike.dtypes.value_counts().to_list(),\n       text = bike.dtypes.value_counts().to_list(),\n      )\nfig.update_traces(textposition='outside',\n                  #marker_coloraxis=None\n                 )\nfig.show()","0047f7e0":"# Convert columns into category\ncols = ['season','weathersit','holiday','workingday','mnth','weekday']\nfor i in cols:\n    bike[i] = bike[i].astype(\"category\")\n    \nbike.dtypes","c1aed93c":"# Extract Month Name , Weekday name & year\nbike['month']= bike['mnth'].apply(lambda x: calendar.month_name[x]).astype(\"category\")\n\nbike['week_day']= bike['weekday'].map({1:list(calendar.day_name)[0],\n                                       2:list(calendar.day_name)[1],\n                                       3:list(calendar.day_name)[2],\n                                       4:list(calendar.day_name)[3],\n                                       5:list(calendar.day_name)[4],\n                                       6:list(calendar.day_name)[5],\n                                       0:list(calendar.day_name)[6]}).astype(\"category\")\n\nbike['year'] = bike['dteday'].apply(lambda x : x.split('-')[2]).astype(\"category\")\nbike.head(20)","54ff0a9e":"# Map values for 'season' column\nbike['season']=bike['season'].map({1:'spring', 2:'summer', 3:'fall', 4:'winter'})\nbike.head()","037b5585":"# Map values for 'weathersit' column\nbike['weathersit']=bike['weathersit'].map({1: 'Clear',2: 'Mist',3: 'Light_Snow',4: 'Heavy_Rain'})\nbike.head()","2b91a1c6":"# Applying custom sort on Day & Month\norder1 = ['Monday','Tuesday', 'Wednesday','Thursday','Friday','Saturday','Sunday']\nbike['week_day']=pd.Categorical(bike['week_day'],order1) \n\norder2 = [\"January\",\"Febuary\",\"March\",\"April\",\n          \"May\",\"June\",\"July\",\"August\",\n          \"September\",\"October\",\"November\",\"December\"]\n\nbike['month']=pd.Categorical(bike['month'],order2) ","e0354417":"cols = ['season', 'year', 'holiday', 'week_day','workingday', 'weathersit']\n\n#Subplot initialization\nfig = make_subplots(\n                     rows=2,  \n                     cols=3,\n                     subplot_titles=cols,\n                     horizontal_spacing=0.1,\n                     vertical_spacing=0.13 \n                   )\n# Adding subplots\ncnt=0\nfor i in range(1,3):\n    for j in range(1,4):\n        fig.add_trace(go.Box( x=bike[cols[cnt]], \n                               y=bike.cnt\n                            ),\n                      row=i,col=j)\n        cnt+=1 \nfig.update_layout(\n                    title=dict(text = \"Bi-Variate Analysis\",x=0.5,y=0.99),\n                    title_font_size=20,\n                    showlegend=False,\n                    height = 1000,\n                  )\nfig.show()","37ad8589":"fig=px.box(bike,\n           x='season',\n           y='cnt',\n           facet_col='weathersit',\n           facet_row='week_day',\n           color='weathersit',\n           boxmode=\"overlay\", \n           points='all'\n          )\nfig.update_layout(height=1600)\nfig.show()","420a6f75":"ff.create_scatterplotmatrix(bike[['temp', 'atemp', 'hum', 'windspeed','cnt']],\n                            diag='box', \n                            size=4,\n                            height=1300, \n                            width=1380\n                           )","1efa5684":"# Dropping index column instant \nbike.drop(['instant'], inplace=True,axis=1)\nbike.head()","f52f4cc2":"# Drop \"dteday\" column\nbike.drop(['dteday'], inplace=True,axis=1)\nbike.head()","66b98101":"# Dropping 'casual' & 'registered' columns due to high multi-collinearity.\nbike.drop(['casual','registered'], inplace=True,axis=1)\nbike.head()","bd297039":"fig= ff.create_annotated_heatmap(np.array(bike.corr()).round(2),\n                            x=bike.corr().columns.to_list(),\n                            y=bike.corr().columns.to_list(),\n                            colorscale='bluyl',\n                            showscale=True)\nfig.update_layout(height=800,margin=dict(l=340,r=340))","affe991a":"df1= bike.groupby(['week_day']).sum()['cnt'].reset_index() \ndf2= bike.groupby(['month']).sum()['cnt'].reset_index() \nfig1= px.line(data_frame=df1,\n        x= df1.week_day,\n        y=df1.cnt,\n        text=df1.cnt.apply(lambda x : str(round(x\/1000))+'k').values\n       )\n\nfig1.update_traces(line=dict(color=\"#f58634\", width=5),\n                   textposition='top left')\n\nfig1.update_xaxes(title='Date') \nfig1.update_yaxes(title='Transaction Amount')\nfig1.update_layout(\n                    title=dict(text = \"Day Wise Total Rentals\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False,\n                  )\n\nfig2= px.line(data_frame=df2,\n        x= df2.month,\n        y=df2.cnt,\n        text=df2.cnt.apply(lambda x : str(round(x\/1000))+'k').values\n       )\n\nfig2.update_traces(line=dict(color=\"#54e346\", width=5),\n                   textposition='top left'\n                  )\nfig2.update_xaxes(title='Day') \nfig2.update_yaxes(title='Total Rentals')\nfig2.update_layout(\n                    title=dict(text = \"Month Wise Total Rentals\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    showlegend=False\n                  )\n\nfig1.show()\nfig2.show()","99732d05":"df1= bike.groupby(['week_day','season']).sum()['cnt'].reset_index() \ndf2= bike.groupby(['week_day','weathersit']).sum()['cnt'].reset_index() \n\nfig1= px.line(data_frame=df1,\n        x= df1.week_day,\n        y=df1.cnt,\n        color=df1.season\n       )\n\nfig1.update_traces(line=dict(width=5),mode='markers+lines',marker=dict(size=14))\nfig1.update_xaxes(title='Day') \nfig1.update_yaxes(title='Total Rental Bikes')\nfig1.update_layout(\n                    title=dict(text = \"Day Wise Rental Bike count Vs Season\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    height=600\n                  )\n\nfig2= px.line(data_frame=df2,\n        x= df2.week_day,\n        y=df2.cnt,\n        color=df2.weathersit\n       )\n\nfig2.update_traces(line=dict( width=5),mode='markers+lines',marker=dict(size=14))\nfig2.update_xaxes(title='Day') \nfig2.update_yaxes(title='Total Rental Bikes')\nfig2.update_layout(\n                    title=dict(text = \"Day Wise Rental Bike count Vs Weather\",x=0.5,y=0.95),\n                    title_font_size=20,\n                    height=600\n                  )\n\nfig1.show()\nfig2.show()","c5450433":"bike.describe()","aa49f9de":"list1 = list()\ncols = ['atemp','temp','hum','windspeed']\nfor i in cols:\n    list1.append(bike.groupby(bike[i].round().astype(int)).sum()['cnt'].reset_index())\n\n#Subplot initialization\nfig = make_subplots( \n                     rows=2, \n                     cols=2,\n                     vertical_spacing=0.13, \n                     subplot_titles=('Rental Count VS atemp', \n                                     'Rental Count VS temp',\n                                     'Rental Count VS humity', \n                                     'Rental Count VS windspeed',\n                                     ),\n                   )\n# Adding subplots\ncount=0\nfor i in range(1,3): \n    for j in range(1,3): \n        fig.add_trace(go.Line(x=list1[count].iloc[:,0],\n                             y=list1[count].cnt,\n                             line=dict(width=2),\n                             name=cols[count],\n                             mode = 'lines+markers',\n                             marker=dict(size=8)\n                            ),\n                      row=i,col=j)\n        count+=1\nfig.update_layout(\n                    height = 1100,\n                  )\nfig.show()","597a5c5f":"df1=bike.groupby([bike.season,bike['atemp'].round().astype(int)]).sum()['cnt'].reset_index()\ndf1['cnt']=df1.cnt.fillna(0)\nfig1= px.line(\n        data_frame=df1,\n        x='atemp',\n        y= 'cnt',\n        color= 'season'\n      )\nfig1.show() \n\n\ndf2=bike.groupby([bike.season,bike['windspeed'].round().astype(int)]).sum()['cnt'].reset_index()\ndf2['cnt']=df2.cnt.fillna(0)\nfig2= px.line(\n        data_frame=df2,\n        x='windspeed',\n        y= 'cnt',\n        color= 'season'\n      )\nfig2.show() ","8049000a":"fig= px.scatter(bike,\n           x= 'atemp',\n           y= 'hum',\n           color='cnt',\n           size = 'windspeed',\n           facet_col='season',\n           facet_row='weathersit'\n          )\n\nfig.update_layout(height=1000)\n\nfig.show()","5b0c4f97":"fig= px.scatter(bike,\n           x= 'atemp',\n           y= 'cnt',\n           color='hum',\n           size = 'windspeed',\n           facet_col='season',\n           facet_row='weathersit'\n          )\n\nfig.update_layout(height=1000)\n\nfig.show()","ffde8f18":"fig= px.scatter(bike,\n           x= 'hum',\n           y= 'cnt',\n           color='atemp',\n           size = 'windspeed',\n           facet_col='season',\n           facet_row='weathersit'\n          )\n\nfig.update_layout(height=1000)\n\nfig.show()","74eb7984":"fig= px.scatter(bike,\n           x= 'atemp',\n           y= 'hum',\n           color='cnt',\n           size = 'windspeed',\n           facet_col='season',\n           facet_row='weathersit'\n          )\n\nfig.update_layout(height=1000)\n\nfig.show()","400b5c71":"bike.head()","f18f65dc":"# One-Hot Encoding on Categorical feature (week_day)\nbike= pd.concat([bike,pd.get_dummies(bike['week_day'],drop_first=True)],axis=1)\nbike.head()","b55db7bc":"# One-Hot Encoding on Categorical feature (month)\nbike= pd.concat([bike,pd.get_dummies(bike['month'],drop_first=True)],axis=1)\nbike.head()","e9238535":"# One-Hot Encoding on Categorical data (Season)\nbike= pd.concat([bike,pd.get_dummies(bike['season'],drop_first=True)],axis=1) \nbike.head()","cd5afb25":"# One-Hot Encoding on Categorical data (weathersit)\nbike= pd.concat([bike,pd.get_dummies(bike['weathersit'],drop_first=True)],axis=1) \nbike.head()","c542ab0b":"# Drop year, month , weekday , weathersit  and season columns\nbike.drop(['weekday','mnth','month','week_day','year','weathersit','season'],inplace=True,axis=1)\nbike.head()","a634f10e":"# High correlation between 'temp' & 'atemp'\nbike[['temp','atemp']].corr()","9efc4021":"# Dropping temp column\nbike.drop(['temp'],inplace=True,axis=True) ","17047843":"df_train,df_test=train_test_split(bike,train_size=0.7,random_state=100) \ndf_train.shape,df_test.shape","27ef0937":"df_train.head()","b1ae71af":"df_test.head()","a64dcf40":"scaler = RobustScaler() # Initialize a RobustScaler object\n\nnum_cols = ['atemp', 'hum', 'windspeed','cnt'] # Numerical Vaeriables \n\ndf_train[num_cols]","629366bb":"df_train[num_cols]=scaler.fit_transform(df_train[num_cols])\ndf_train.head()","3813950f":"df_train.describe()","12ca9ef6":"fig=ff.create_annotated_heatmap(np.array(df_train.corr().round(2).fillna(0)),\n                            x=df_train.corr().columns.to_list(),\n                            y=df_train.corr().columns.to_list(), \n                            colorscale='bluyl',\n                            showscale=True) \n\nfig.update_layout(height=1000)\nfig.show()","d895919f":"fig=px.bar(df_train.corr().loc['cnt',:].apply(lambda x: abs(x)).sort_values(ascending=False),\n       title='Feature importance by Correlation Coefficient',\n       color = df_train.corr().loc['cnt',:].apply(lambda x: abs(x)).sort_values(ascending=False),\n       text = df_train.corr().loc['cnt',:].apply(lambda x: abs(x)).sort_values(ascending=False).round(2)\n      ) \nfig.update_traces(textposition='outside')\nfig.show()","e871deae":"# X Train & Y train\ny_train=df_train.pop('cnt')\nX_train=df_train\nX_train.head()","a50b3ea9":"y_train.head()","1d10999e":"lm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm, 14)\nrfe = rfe.fit(X_train, y_train)\ndf = pd.DataFrame(list(zip(X_train.columns,rfe.support_,rfe.ranking_)),columns=['Features','RFE Support','Rank']) \nfor i in range(df.shape[0]):\n    if df.iloc[i,1]==False:\n        df.iloc[i,2]= - df.iloc[i,2] \nfig= px.bar(data_frame=df,x='Features',y='Rank',color='Rank',title='Feature Importance using RFE')\n\nfig.update_layout(height=500)\nfig.show()","92215474":"df[df['RFE Support']==True]","83f6550b":"df[df['RFE Support']==True].Features.to_list()","a0bf0764":"X_train= X_train[df[df['RFE Support']==True].Features.to_list()]\nX_train.head()","2f2715bc":"# Add a constant \nX_train_sm=sm.add_constant(X_train)\n\n#Create first Model\nlr= sm.OLS(y_train,X_train_sm)\n\n# Fit\nlr_model = lr.fit()\n\n#Params\nlr_model.params","eb605a17":"lr_model.summary()","916db2c7":"#VIF\nvif=pd.DataFrame()\nvif['Features']=X_train.columns\nvif['VIF']=[variance_inflation_factor(X_train.values,i) for i in range(X_train.shape[1])]\nvif['VIF'] = vif['VIF'].apply(lambda x: round(x,2))\nvif= vif.sort_values(by='VIF',ascending=False)\nvif","69b96315":"# Remove 'May' P value\nX=X_train.drop('May',axis=1) \nX.head()","945c2de6":"# Add a constant \nX_train_sm=sm.add_constant(X)\n\n#Create second Model\nlr= sm.OLS(y_train,X_train_sm)\n\n# Fit\nlr_model = lr.fit()\n\n#Params\nlr_model.summary()","ecba2ec7":"# Calculate VIF\nvif=pd.DataFrame()\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = vif['VIF'].apply(lambda x: round(x,2))\nvif= vif.sort_values(by='VIF',ascending=False)\nvif","0886c80b":"# Remove holiday due to high P value\nX=X.drop('holiday',axis=1) \nX.head()","c0d88be8":"# Add a constant \nX_train_sm=sm.add_constant(X)\n\n#Create third Model\nlr= sm.OLS(y_train,X_train_sm)\n\n# Fit\nlr_model = lr.fit()\n\n#Params\nlr_model.summary()","899c4c50":"# Calculate VIF\nvif=pd.DataFrame()\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = vif['VIF'].apply(lambda x: round(x,2))\nvif= vif.sort_values(by='VIF',ascending=False)\nvif","c156aeaa":"# Drop fall due to high VIF value\nX=X.drop('fall',axis=1) \nX.head()","6c24557f":"# Add a constant \nX_train_sm=sm.add_constant(X)\n\n#Create 4th Model\nlr= sm.OLS(y_train,X_train_sm)\n\n# Fit\nlr_model = lr.fit()\n\n#Params\nlr_model.summary()","3975da08":"# Calculate VIF\nvif=pd.DataFrame()\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = vif['VIF'].apply(lambda x: round(x,2))\nvif= vif.sort_values(by='VIF',ascending=False)\nvif","c133579b":"# Remove October due to high P value\nX=X.drop('October',axis=1) \nX.head()","2c79fce2":"# Add a constant \nX_train_sm=sm.add_constant(X)\n\n#Create 5th Model\nlr= sm.OLS(y_train,X_train_sm)\n\n# Fit\nlr_model = lr.fit()\n\n#Params\nlr_model.summary()","3596df5b":"# Calculate VIF\nvif=pd.DataFrame()\nvif['Features']=X.columns\nvif['VIF']=[variance_inflation_factor(X.values,i) for i in range(X.shape[1])]\nvif['VIF'] = vif['VIF'].apply(lambda x: round(x,2))\nvif= vif.sort_values(by='VIF',ascending=False)\nvif","de5795fc":"y_train_pred=lr_model.predict(X_train_sm)\nres=y_train-y_train_pred\nsns.distplot(res)","e7cfc8ec":"#Evaluate\nr2_score(y_true=y_train,y_pred=y_train_pred) ","c6c0db0f":"num_cols = ['atemp', 'hum', 'windspeed','cnt']\ndf_test[num_cols]=scaler.transform(df_test[num_cols])\ndf_test.head()","74a7d93d":"y_test=df_test.pop('cnt')\nX_test=df_test[X.columns.to_list()]\n\nX_test_sm=sm.add_constant(X_test)\nX_test_sm.head()","73603ab0":"y_test.head()","fa23d288":"# Predict\ny_test_pred=lr_model.predict(X_test_sm)\n\n#Evaluate\nr2_score(y_true=y_test,y_pred=y_test_pred)","2623c218":"res_train =y_train-y_train_pred\nres_test = y_test-y_test_pred","c5267ba8":"df1 = pd.DataFrame(np.column_stack([y_test.values.tolist(),y_test_pred.values.tolist(),res_test.values.tolist()]),\n                   columns=['Target','Prediction','Residual'])\ndf1['split'] = 'test'\n\ndf2 = pd.DataFrame(np.column_stack([y_train.values.tolist(),y_train_pred.values.tolist(),res_train.values.tolist()]),\n                   columns=['Target','Prediction','Residual'])\ndf2['split'] = 'train'\n\ndf3= pd.concat([df1, df2])\ndf3.head(10)","9a689d9a":"fig = px.scatter(\n    df3, x='Prediction', y='Residual',\n    marginal_y='violin',\n    color='split', trendline='ols',\n)\n\nfig.update_layout(height=600,title_text='Residual Analysis', title_x=0.5,title_font_size=20)\n\nfig.show()","05f78394":"__Insight__\n\n- Higher bike rentals in __fall__ and __summer__.\n- 2019 saw more demand as compared to 2018.\n- High demand of bikes in __Clear__ weather.","56507de9":"__Insights__\n\n- There is a huge demand of bike rentals in __fall__ when __feeling temperature__ is at 33.","4ba5c90e":"#### 5th Model","fc36e2e3":"### Model Evaluation","3ebaefe1":"#### First Model","ad69e020":"__Insights__\n\n- In __winter__ the demand for bikes is high if the climate is __clear__.","488afd67":"### Feature Scaling","1de7ea2a":"### Bike Sharing ","548a2022":"__Insights__\n\n- At 33 degree temperature bike demand is high\n- At 29 degree feeling temperature bike rental demand is quite high.\n- People prefer bike rental at 49 & 57 humidity.\n- Demand is spiking at windspeed 10.","dd473aaf":"### Train Model","e25204f9":"__Insights__\n\n- Big spike in demand on __Thursday__. Least demand on __Mondays__.\n- __February__ turns out be the worst month for the bike rental business. High demand in __August__,__September__ & __June__.","6edc8475":"#### Feature importance ","9983b705":"__Insights__\n\n- Strong linear relationship between\n     - __cnt__ & temp\n     - atemp & cnt \n     - temp & atemp","cfea0ad0":"#### Multivariate Analysis","ca1d692f":"### Train Test Split","5234f07e":"# End","dc59b652":"### Data understanding, preparation and EDA","5c858396":"#### 4th Model","89903b37":"#### Feature Selection","cc7eca80":"#### Second Model","05fbcb43":"#### Third Model","5fbfdd53":"### Residual Analysis"}}