{"cell_type":{"629943fd":"code","2a96cb60":"code","b2c90246":"code","f97b308e":"code","ca7daea5":"code","f1163b09":"code","7ee56e07":"code","d910ebee":"code","a5ff7e20":"code","c23b271a":"code","9524b879":"code","839c5bc8":"code","1757b2fc":"code","be2458a6":"code","b086fc32":"code","5d19ddec":"code","4c23878b":"code","3cb5c887":"code","c51cce12":"code","ab9e6b5b":"code","e192e5bd":"code","91454e40":"code","3f52bd13":"code","8a601a5b":"code","bfc46219":"code","f5ab437d":"code","26368c4a":"code","9a25ff3b":"code","df444899":"code","ede00b48":"code","db750700":"code","feba2b85":"code","77a5cfcf":"code","e6edc518":"code","c456fd4e":"code","ff7114ca":"code","ef5bd199":"code","ab606d5e":"code","6511351c":"code","a6fbe8e8":"code","5c1099da":"code","4648b937":"code","7337ef49":"code","82350c53":"code","04314d66":"code","bf7075f1":"code","7a5c43e7":"code","cc53a513":"code","7a8e22b9":"code","00f05aeb":"code","7f952dd9":"code","5e9ad05b":"code","571b01f3":"markdown","c7eb2915":"markdown","5f4d61a0":"markdown","1fdbdec9":"markdown","c03ef90b":"markdown","d897896d":"markdown","15f69c55":"markdown","bdbe456b":"markdown","c64c72ed":"markdown","40d5287d":"markdown","8657db28":"markdown","d8df3662":"markdown","202b2cce":"markdown","02adddc1":"markdown","b34d3f73":"markdown","8eed4b26":"markdown","a1ff38c1":"markdown","767e34fa":"markdown","a4f111a9":"markdown","331f474c":"markdown","58c7f383":"markdown","c8e05e5a":"markdown","6bee8a4a":"markdown","9637a7e9":"markdown","29bd7975":"markdown","6f8bfdb5":"markdown","99d4e1be":"markdown","6f4270be":"markdown","dada6466":"markdown","bf449b8c":"markdown"},"source":{"629943fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a96cb60":"import matplotlib.pyplot as plt\nimport seaborn as sns","b2c90246":"data = pd.read_csv('..\/input\/bank-marketing-dataset\/bank.csv')\ndata","f97b308e":"print(\"The provided dataset consists of {rows} rows.\".format(rows = len(data)))","ca7daea5":"data.isnull().sum()","f1163b09":"data.describe()","7ee56e07":"plt.figure(figsize=(16,10))\nsns.heatmap(data.corr(method='pearson'), annot=True)","d910ebee":"plt.figure(figsize=[15,10])\nsns.countplot(data['job'])","a5ff7e20":"plt.figure(figsize=[6,6])\nsns.countplot(data['marital'])","c23b271a":"plt.figure(figsize=[6,6])\nsns.countplot(data['education'])","9524b879":"plt.figure(figsize=[5,5])\nsns.countplot(data['housing'])","839c5bc8":"plt.figure(figsize=[5,5])\nsns.countplot(data['loan'])","1757b2fc":"plt.figure(figsize=[5,5])\nsns.countplot(data['default'])","be2458a6":"plt.figure(figsize=[5,5])\nsns.countplot(data['contact'])","b086fc32":"plt.figure(figsize=[15,10])\nsns.countplot(data['month'])","5d19ddec":"plt.figure(figsize=[7,7])\nsns.countplot(data['poutcome'])","4c23878b":"import matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\ndata.hist(bins=20, figsize=(14,10), color='#E14906')\nplt.show()","3cb5c887":"data[['pdays', 'campaign', 'previous']].describe()","c51cce12":"len (data[data['pdays'] > 400] ) \/ len(data) * 100","ab9e6b5b":"len (data[data['campaign'] > 34] ) \/ len(data) * 100","e192e5bd":"len (data[data['previous'] > 34] ) \/ len(data) * 100","91454e40":"sns.countplot(data['deposit'])","3f52bd13":"fig = plt.figure(figsize=(20,20))\nax1 = fig.add_subplot(221)\nax2 = fig.add_subplot(222)\nax3 = fig.add_subplot(212)\n\ng = sns.boxplot(x=\"default\", y=\"balance\", hue=\"deposit\",\n                    data=data, palette=\"muted\", ax=ax1)\n\ng.set_title(\"Amount of Balance by Term Suscriptions\")\n\n# ax.set_xticklabels(df[\"default\"].unique(), rotation=45, rotation_mode=\"anchor\")\n\ng1 = sns.boxplot(x=\"job\", y=\"balance\", hue=\"deposit\",\n                 data=data, palette=\"RdBu\", ax=ax2)\n\ng1.set_xticklabels(data[\"job\"].unique(), rotation=90, rotation_mode=\"anchor\")\ng1.set_title(\"Type of Work by Term Suscriptions\")\n\ng2 = sns.violinplot(data=data, x=\"education\", y=\"balance\", hue=\"deposit\", palette=\"RdBu_r\")\n\ng2.set_title(\"Distribution of Balance by Education\")","8a601a5b":"# Admin and management are basically the same let's put it under the same categorical value\nlst = [data]\n\nfor col in lst:\n    col.loc[col[\"job\"] == \"admin.\", \"job\"] = \"management\"","bfc46219":"sns.catplot(x=\"education\", y=\"duration\",hue=\"deposit\",\n                data=data, kind=\"bar\");\n","f5ab437d":"sns.catplot(x=\"marital\", y=\"duration\",hue=\"deposit\",\n                data=data, kind=\"bar\");","26368c4a":"sns.catplot(x=\"marital\", y=\"balance\",hue=\"deposit\",\n                data=data, kind=\"bar\");","9a25ff3b":"sns.catplot(x=\"education\", y=\"balance\",hue=\"deposit\",\n                data=data, kind=\"bar\");","df444899":"#job and deposit\ndf = pd.DataFrame()\n\ndf['yes'] = data[data['deposit'] == 'yes']['job'].value_counts()\ndf['no'] = data[data['deposit'] == 'no']['job'].value_counts()\n\ndf.plot.bar(title = 'Job and deposit')","ede00b48":"sns.countplot(data['deposit'])","db750700":"#balance and deposit\n\nbalance_data = pd.DataFrame()\nbalance_data['balance_yes'] = (data[data['deposit'] == 'yes'][['deposit','balance']].describe())['balance']\nbalance_data['balance_no'] = (data[data['deposit'] == 'no'][['deposit','balance']].describe())['balance']\n\nbalance_data","feba2b85":"balance_data.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Balance and deposit statistics')","77a5cfcf":"#age and deposit\n\nage_data = pd.DataFrame()\nage_data['age_yes'] = (data[data['deposit'] == 'yes'][['deposit','age']].describe())['age']\nage_data['age_no'] = (data[data['deposit'] == 'no'][['deposit','age']].describe())['age']\n\nage_data","e6edc518":"age_data.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Age and deposit statistics')","c456fd4e":"#number of contacts performed during this campaign ('campaign') and deposit\ncontact_data = pd.DataFrame()\ncontact_data['campaign_yes'] = (data[data['deposit'] == 'yes'][['deposit','campaign']].describe())['campaign']\ncontact_data['campaign_no'] = (data[data['deposit'] == 'no'][['deposit','campaign']].describe())['campaign']\n\ncontact_data","ff7114ca":"contact_data.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Number of contacts performed during this campaign and deposit statistics')","ef5bd199":"#number of contacts performed during previous campaign ('previous') and deposit\np_data = pd.DataFrame()\np_data['previous_yes'] = (data[data['deposit'] == 'yes'][['deposit','previous']].describe())['previous']\np_data['previous_no'] = (data[data['deposit'] == 'no'][['deposit','previous']].describe())['previous']\n\np_data","ab606d5e":"p_data.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Number of contacts performed during previous campaign and deposit statistics')","6511351c":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata['job']=labelencoder.fit_transform(data['job'])\ndata['marital']=labelencoder.fit_transform(data['marital'])\ndata['education']=labelencoder.fit_transform(data['education'])\ndata['default']=labelencoder.fit_transform(data['default'])\ndata['housing']=labelencoder.fit_transform(data['housing'])\ndata['loan']=labelencoder.fit_transform(data['loan'])\ndata['contact']=labelencoder.fit_transform(data['contact'])\ndata['month']=labelencoder.fit_transform(data['month'])\ndata['poutcome']=labelencoder.fit_transform(data['poutcome'])\ndata['deposit']=labelencoder.fit_transform(data['deposit'])","a6fbe8e8":"data","5c1099da":"data.columns","4648b937":"features = ['age', 'job', 'marital', 'education', 'default', 'balance', 'housing',\n       'loan', 'contact', 'day', 'month', 'duration', 'campaign', 'pdays',\n       'previous', 'poutcome']\nlabel = ['deposit']","7337ef49":"X = data[features]\ny = data[label]","82350c53":"from sklearn.model_selection import train_test_split\nX_train,X_test, y_train,y_test=train_test_split(X,y,test_size=0.33,random_state=42)\n","04314d66":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","bf7075f1":"X_train","7a5c43e7":"X_test","cc53a513":"#train XGBoost model\nimport xgboost\nfrom sklearn.metrics import accuracy_score\n#model = xgb.XGBClassifier()\nxgb = xgboost.XGBClassifier(n_estimators=100, learning_rate=0.08, gamma=0, subsample=0.75,\n                           colsample_bytree=1, max_depth=7)\nxgb.fit(X_train,y_train.squeeze().values)\n\n#calculate and print scores for the model for top 15 features\ny_train_preds = xgb.predict(X_train)\ny_test_preds = xgb.predict(X_test)\n\nprint('XGB accuracy score for train: %.3f: test: %.3f' % (\n        accuracy_score(y_train, y_train_preds),\n        accuracy_score(y_test, y_test_preds)))","7a8e22b9":"from sklearn.metrics import f1_score, roc_auc_score,accuracy_score,confusion_matrix, precision_recall_curve, auc, roc_curve, recall_score, classification_report \nclassification_report = classification_report(y_test, y_test_preds)\nprint(classification_report)","00f05aeb":"cm = confusion_matrix(y_test, y_test_preds)\ncm","7f952dd9":"predicted_probab_log = xgb.predict_proba(X_test)\npredicted_probab_log = predicted_probab_log[:, 1]\nfpr, tpr, _ = roc_curve(y_test, predicted_probab_log)","5e9ad05b":"from matplotlib import pyplot\npyplot.plot(fpr, tpr, marker='.', label='')\npyplot.xlabel('False Positive Rate')\npyplot.ylabel('True Positive Rate')\npyplot.legend()\npyplot.show()","571b01f3":"**Correlation Heatmap**","c7eb2915":"**Basic statistical description of the data**","5f4d61a0":"**Checking for NUll values in the dataset**","1fdbdec9":"**let's see how 'deposit' column value varies depending on other categorical columns' values:**","c03ef90b":"There is no high imbalance in the deposit column so there is no need to do anything for treating imbalance","d897896d":"**So what story does the above plots tell us?**\n* Customers with 'blue-collar' and 'services' jobs are less likely to subscribe for term deposit.\n* Married customers are less likely to subscribe for term deposit.\n* Customers with 'cellular' type of contact are less likely to subscribe for term deposit.\n* People who subscribed for term deposit tend to have greater balance and age values.\n* People who subscribed for term deposit tend to have fewer number of contacts during this campaign.","15f69c55":"Scaling of fhe data","bdbe456b":"**Univariate Analysis of the Columns**","c64c72ed":"so we get an accuracy of **85%**. F1 scores show that the model is performing quite well. So it's good.","40d5287d":"First we need to convert the categorical columns into numeric as we cannot feed the columns with string values to our ML model. so here we shall use Label Encoding to convert string values to numeric","8657db28":"**Fortunately there are no null values in any of the columns**","d8df3662":"**Some recommendations for future marketting campaigns**\n* The customer's account balance has a huge influence on the campaign's outcome. People with account balance above 1490$ are more likely to subscribe for term deposit, so future address those customers.\n\n* The customer's age affects campaign outcome as well. Future campains should concentrate on customers from age categories below 30 years old and above 50 years old.\n\n* Number of contacts with the customer during the campaign is also very important. The number of contacts with the customer shouldn't exceed 4.","202b2cce":"Splitting our dataset into train and test","02adddc1":"**Let's prepare our dataset for applying machine learning algorithm**","b34d3f73":"Splitting dataset into features and label","8eed4b26":"Percentage of 'previous' values above 20:","a1ff38c1":"Let's see our dataset once after encoding ","767e34fa":"****","a4f111a9":"**ROC-AUC curve**","331f474c":"As we can see from the above plots, most of the numerical columns have outliers and are not normally diatributed. So we need to have a closer look at these columns to find out noisy data present in them.","58c7f383":"**let's look at our target column**","c8e05e5a":"**First let's look up at the categorical variables**","6bee8a4a":"**Load the dataset**","9637a7e9":"'pdays' holds the number of days that passed by after the client was last contacted from a previous campaign Looking closer into 'pdays' data we can see that only 1.2% of values above 400.","29bd7975":"Mean Age is aproximately 41 years old. (Minimum: 18 years old and Maximum: 95 years old.)\n\nThe mean balance is 1,528. However, the Standard Deviation (std) is a high number so we can understand through this that the balance is heavily distributed across the dataset.","6f8bfdb5":"The most convinient way to study the continuous variables is through the histograms","99d4e1be":"Percentage of 'pdays' values above 400","6f4270be":"**Now for the Numerical \/ continuous variables**","dada6466":"**XGboost classifier algorithm**","bf449b8c":"Percentage of 'campaign' values above 20:"}}