{"cell_type":{"f317dd97":"code","fe5894d9":"code","2c6cd531":"code","ed0fa7d6":"code","77b73b03":"code","0bcdc783":"code","0949f62a":"code","29cd41bf":"code","c9192e50":"code","c346faca":"code","ec137958":"code","bd29843c":"code","64c26254":"code","e5bb3b6d":"code","2b4d6da5":"code","26ae0274":"markdown","3fa64a65":"markdown","e99254bd":"markdown","6d88116c":"markdown","a0300536":"markdown","994af21a":"markdown"},"source":{"f317dd97":"from PIL import Image\nimport numpy as np\nimport os\nimport cv2\nimport keras\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import train_test_split\nfrom keras.preprocessing.image import ImageDataGenerator \nimport tensorflow.keras.layers as Layers\nimport tensorflow.keras.models as Models\nimport tensorflow.keras.optimizers as Optimizers\nimport sklearn.utils as shuffle\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns","fe5894d9":"Images = []\nLabels = []\nParasitized = os.listdir(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/\")\nfor p in Parasitized:\n    try:\n        image = cv2.imread(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/\" + p)\n        images = Image.fromarray(image, 'RGB')\n        images = images.resize((150,150))\n        Images.append(np.array(images))\n        Labels.append(0)\n    except AttributeError:\n        print('')\nUninfected = os.listdir(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/\")\nfor u in Uninfected:\n    try:\n        image = cv2.imread(\"..\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/\" + u)\n        images = Image.fromarray(image, 'RGB')\n        images = images.resize((150,150))\n        Images.append(np.array(images))\n        Labels.append(1)\n    except AttributeError:\n        print('')","2c6cd531":"Images = np.array(Images)\nLabels = np.array(Labels)    ","ed0fa7d6":"print(Images.shape)\nprint(Labels.shape)","77b73b03":"def show_images(image, label):\n    fig = plt.figure(figsize = (10,10))\n    fig.suptitle('25 Images from the dataset' ,fontsize = 20)\n    for i in range(25):\n        index = np.random.randint(Images.shape[0])\n        plt.subplot(5,5,i+1)\n        plt.imshow(image[index])\n        plt.xticks([]) #Scale doesn't appear\n        plt.yticks([]) #Scale doesn't apper\n        plt.title((label[index]))\n        plt.grid(False)\n    plt.show()","0bcdc783":"show_images(Images, Labels)","0949f62a":"category = ['Uninfected', 'Parasitized']\n_,count = np.unique(Labels, return_counts = True)\npd.DataFrame({'data': count}, index = category).plot.bar()\nplt.show()","29cd41bf":"Labels = keras.utils.to_categorical(Labels, 2)","c9192e50":"train_x,test_x, train_y, test_y = train_test_split(Images,Labels, test_size = 0.4, random_state = 100)","c346faca":"model = Models.Sequential()\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3), activation = 'relu', input_shape = (150,150,3)))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Dropout(0.2))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.Conv2D(64, kernel_size = (3,3) , activation = 'relu'))\nmodel.add(Layers.MaxPool2D(3,3))\nmodel.add(Layers.Flatten())\nmodel.add(Layers.Dense(512, activation = 'relu'))\nmodel.add(Layers.Dense(256, activation = 'relu'))\nmodel.add(Layers.Dropout(0.2))\nmodel.add(Layers.Dense(2, activation = 'softmax'))\nmodel.compile(optimizer = Optimizers.RMSprop(lr=0.0001), loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.summary()\n\n","ec137958":"trained = model.fit(train_x, train_y, epochs = 20, batch_size = 50, validation_split = 0.20, verbose = 1)","bd29843c":"plt.plot(trained.history['accuracy'])\nplt.plot(trained.history['val_accuracy'])\nplt.title(\"Model Accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epoch\")\nplt.legend([\"Train\", \"Validation\"], loc = \"upper left\")\nplt.show()","64c26254":"plt.plot(range(20), trained.history['accuracy'], label = 'Training Accuracy')\nplt.plot(range(20), trained.history['loss'], label = 'Taining Loss')\nplt.xlabel(\"Number of Epoch's\")\nplt.ylabel('Accuracy\/Loss Value')\nplt.title('Training Accuracy and Training Loss')\nplt.legend(loc = \"best\")\nplt.show()","e5bb3b6d":"result = model.evaluate(test_x,test_y,verbose = 1)","2b4d6da5":"print(\"Test Accuracy: \" , result[1] * 100)","26ae0274":"**Importing Libraries**","3fa64a65":"**Parasitized is given the label of 0 and Uninfected is given the label of 1**","e99254bd":"**Malaria Detection with test accuracy of 95%, without Image Augumentation**","6d88116c":"**CNN Network**","a0300536":"**In few days I will update the kernel with Image Augumentation to improve the results**","994af21a":"**Displaying Images from the dataset**"}}