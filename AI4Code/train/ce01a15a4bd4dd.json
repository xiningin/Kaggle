{"cell_type":{"b73e6438":"code","cbda590b":"code","e602d6ed":"code","224d3f2e":"code","03454ff0":"code","22fd7d6e":"code","9ee25493":"code","6f2d6b0e":"code","d585c023":"code","e4d5f284":"code","b17d7110":"code","f0e0b50b":"code","6595acb4":"code","e78b9c87":"code","3668b139":"code","f93e2f1a":"code","5ae782c9":"code","ab4fa2cf":"code","82055144":"code","68e0e7b6":"code","126a7117":"code","717dfa54":"code","307b5a57":"code","a4a59109":"code","dc9ff3f8":"code","e1cdd132":"code","1797a0cb":"code","db4ffdfc":"code","89e6009c":"markdown","e1c58f01":"markdown","c68a18e6":"markdown","f9dcb69f":"markdown","b1cb1b2f":"markdown","0bfdc884":"markdown","7eb06307":"markdown","c22d1a42":"markdown","86dbacb7":"markdown","cbf80094":"markdown","c7b7c76a":"markdown","606526d2":"markdown","2e1beb6b":"markdown"},"source":{"b73e6438":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cbda590b":"train_set = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_set = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e602d6ed":"train_set.head()","224d3f2e":"train_set = train_set.set_index('PassengerId')","03454ff0":"train_set.head()","22fd7d6e":"train_set.info()","9ee25493":"train_set.describe()","6f2d6b0e":"plt.bar(train_set['Pclass'].unique(), train_set['Pclass'].value_counts())","d585c023":"bar = plt.bar(train_set['Sex'].unique(), train_set['Sex'].value_counts())\nbar[0].set_color('blue')\nbar[1].set_color('pink')\nplt.show()","e4d5f284":"train_set['Age'].hist()","b17d7110":"df = pd.DataFrame({'Gender': train_set['Sex'], 'Survived': train_set['Survived']})\ntotal_counts = df.groupby(['Survived', 'Gender']).size()\ntotal_counts.plot.bar(rot=0)","f0e0b50b":"def correlation_heatmap(train):\n    correlations = train.corr()\n    \n    fig, ax = plt.subplots(figsize=(16,16))\n    sb.heatmap(correlations, vmax=1.0, center=0, fmt='.2f', square=True, linewidths=.5, annot=True, cbar_kws={\"shrink\":.70})\n    plt.show()\ncorrelation_heatmap(train_set)","6595acb4":"def values_drop(set):\n    set = set.drop('Name', axis=1)\n    set = set.drop('Ticket', axis=1)\n    set = set.drop('Cabin', axis=1)\n    set = set.dropna()\n    return set\ndef values_drop_test(set):\n    set = set.drop('Name', axis=1)\n    set = set.drop('Ticket', axis=1)\n    set = set.drop('Cabin', axis=1)\n    return set\ntrain_set = values_drop(train_set)\ntest_set = values_drop_test(test_set)","e78b9c87":"test_set = test_set.replace(np.nan, 0)","3668b139":"train_set.head()","f93e2f1a":"survived = train_set[['Survived']]\ntrain_set = train_set.drop(\"Survived\", axis=1)","5ae782c9":"sex_cat = train_set[[\"Sex\"]]\nemb_cat = train_set[[\"Embarked\"]]","ab4fa2cf":"from sklearn.preprocessing import OneHotEncoder\nOHE = OneHotEncoder()\nsex_cat_encoded = OHE.fit_transform(sex_cat)\nsex_cat_encoded.toarray()","82055144":"emb_cat_encoded = OHE.fit_transform(emb_cat)\nemb_cat_encoded.toarray()","68e0e7b6":"train_num = train_set.drop([\"Sex\", \"Embarked\"], axis=1)","126a7117":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\nnum_attribs = list(train_num)\ncat_attribs = [\"Sex\", \"Embarked\"]\n\nfull_pipeline = ColumnTransformer([\n    (\"num\", StandardScaler(), num_attribs),\n    (\"cat\", OneHotEncoder(), cat_attribs)\n])\ntrain_prepared = full_pipeline.fit_transform(train_set)","717dfa54":"test_prepared = full_pipeline.fit_transform(test_set)","307b5a57":"import tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\n\nX = train_prepared\ny = survived\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 42)","a4a59109":"X_train.shape","dc9ff3f8":"def create_network():\n    model = keras.models.Sequential([\n        keras.layers.Dense(100, activation='relu', input_dim=10),\n        keras.layers.Dense(66, activation='relu'),\n        keras.layers.Dense(1, activation='sigmoid')\n    ])\n    return model\ndef evaluate(model):\n    model.summary()\n    model.compile(optimizer=keras.optimizers.SGD(lr=0.05), loss='binary_crossentropy', metrics=['accuracy'])\n    history = model.fit(X_train, y_train, batch_size=40, epochs=30, validation_split=.1,\n                       callbacks=[keras.callbacks.EarlyStopping(patience=5)])\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.title('model accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['training', 'validation'], loc='best')\n    plt.show()","e1cdd132":"model = create_network()\nevaluate(model)","1797a0cb":"model_acc = model.evaluate(X_test, y_test)\nprint(\" Model Accuracy is : {0:.1f}%\".format(model_acc[1]*100))","db4ffdfc":"results = model.predict_classes(test_prepared)\nresults = pd.Series(results[:,0], name=\"Survived\")\nsubmission = pd.concat([pd.Series(test_set.PassengerId, name=\"PassengerId\"),results],axis = 1)\nsubmission.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","89e6009c":"## Train Models\nNow I will train a neural network and optimize it as best I can without overfitting and underfitting.","e1c58f01":"This shows we have a few text columns and quite a big handful of null entries. Also Cabin has a huge amount of null entires so I will have to do something about this.","c68a18e6":"## Encode Categorical features\nNow I will use One Hot Encoding to chnage the Sex and Embarked columns to be continuous variables.","f9dcb69f":"## Missing Values\nNow I will treat the missing values by first removing the redundant columns like Name, Ticket and Cabin aswel as removing the little handful of null rows.","b1cb1b2f":"I am going to change the index to Passenger ID as this is the same as the index we have already making the column redundent.","0bfdc884":"# Titanic Survival Prediction\nThe reason for this analysis and model is to predict wether or not a person on the titanic will survive or not based on various features such as age, class, sex and where they embarked.","7eb06307":"## Univariate Analysis\nNow I will visualize some features to try and find some outliers and see if we can find some interesting stats.","c22d1a42":"This looks like it is fair on all three sets which is great news!","86dbacb7":"Here I create a full pipeline of transformations so I can easily call it on new entries and exisitng ones.","cbf80094":"## Bi-variate Analysis\nNow I will compare features against each other to try and find some correlation between them.","c7b7c76a":"## Variable Identification\nFirst I will explore each variable first, I want to find out the data type of each and how many null entries I have in the dataset.","606526d2":"This shows that you are more likely to survive if you are a woman as they were sent of the ship first and over 5 times more likley to not survive if you are a man.","2e1beb6b":"Final predictions on the test set."}}