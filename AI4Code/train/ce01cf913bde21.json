{"cell_type":{"6af7baa8":"code","35f9ee50":"code","301cfe0e":"code","6fc17c19":"code","67374394":"code","3a78e7ae":"code","448bd5fe":"code","0ed5365a":"code","078a5a34":"code","bbca3a44":"code","55498542":"code","e02de0d2":"code","52d0e08c":"code","1cd9d5cc":"code","c77626a5":"code","61b3e208":"code","b832704e":"code","25535811":"code","4190a03a":"code","5bea0035":"code","ce1e9473":"code","6d380eb7":"code","615d19fc":"code","9a18deeb":"code","f6974558":"code","dca98a26":"code","c4af9c9a":"code","0f3db1cc":"code","82aeb5ef":"code","1c9518ba":"code","b6bf68af":"code","1ed11f19":"markdown","e1e2364b":"markdown","f4c670fe":"markdown","6c378d71":"markdown","155a1762":"markdown","c67b3024":"markdown","eff7b301":"markdown","cc0204f2":"markdown","05453298":"markdown","4561d920":"markdown","3e17e230":"markdown","bb81eda1":"markdown","d46d90de":"markdown","6844ee35":"markdown","54e76d1c":"markdown"},"source":{"6af7baa8":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.graphics.gofplots import qqplot\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport lightgbm as lgb","35f9ee50":"train = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ntest = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')\nsubmission = pd.read_csv('..\/input\/petfinder-pawpularity-score\/sample_submission.csv')","301cfe0e":"train.head()","6fc17c19":"train.shape[0] # Train: 9912\uac1c\uc758 \uc774\ubbf8\uc9c0","67374394":"train.info()","3a78e7ae":"test.head()","448bd5fe":"test.shape[0] # Train: 8\uac1c\uc758 \uc774\ubbf8\uc9c0","0ed5365a":"submission.head() #id, popularity","078a5a34":"sns.histplot(data=train, x=\"Pawpularity\", kde=True)","bbca3a44":"qqplot(train[\"Pawpularity\"], line='s')","55498542":"# \uac01 feature\ubcc4 countplot\npredictor = train.columns[1:-1]\nfig = plt.figure(figsize=(15,10))\nfor i, x in enumerate(predictor):\n    ax = plt.subplot(3,4,i+1)\n    sns.countplot(data=train, x=x, ax=ax)","e02de0d2":"corr_matrix = train[predictor].corr()\nfig = plt.figure(figsize=(20,15))\nsns.set_theme(style=\"white\")\nmask = np.triu(np.ones_like(corr_matrix, dtype=bool))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr_matrix, annot=True, fmt='.1g', cmap=cmap, \n            mask=mask, square=True)\nplt.show()","52d0e08c":"sns.scatterplot(x=train['Face'], y=train['Eyes'])","1cd9d5cc":"vif_data = pd.DataFrame()\nX = train[predictor]\nvif_data[\"feature\"] = X.columns\n  \n# calculating VIF for each feature\nvif_data[\"VIF\"] = [variance_inflation_factor(X.values, i)\n                          for i in range(len(X.columns))]  \nvif_data = vif_data.sort_values(\"VIF\", ascending=False)\nvif_data","c77626a5":"X.drop(\"Eyes\", axis=1, inplace=True) # EYES \uc0ad\uc81c\nX.columns","61b3e208":"for x in X.columns:\n    corr_y = round(np.corrcoef(train[x], train[\"Pawpularity\"])[0,1],4)\n    print(f\"Pawpularity \/ {x}: {corr_y}\")","b832704e":"ids = train[\"Id\"].values\ny = train[\"Pawpularity\"].values\ny = y\/100","25535811":"# GridSearchCV to find the best hyperparameters.\nX_train, X_valid, y_train, y_valid = train_test_split(\n    X, y, test_size=0.3, random_state=42)\n\n\nprint(\"Train and test split sizes\")\nprint(f\"X_train : {X_train.shape}\")\nprint(f\"X_test : {X_valid.shape}\")\nprint(f\"y_train : {y_train.shape[0]}\")\nprint(f\"y_test : {y_valid.shape[0]}\")","4190a03a":"rfr = RandomForestRegressor(random_state=8)\nparam_grid = {\n            \"n_estimators\" : [10,50,100],\n            \"max_features\" : [\"log2\", \"sqrt\"],\n            \"max_depth\"    : [5,15,25],\n            \"bootstrap\"    : [True, False]\n        }\n\ngrid_rfr = GridSearchCV(\n    rfr,\n    param_grid,\n    cv = 5,\n    verbose=1,\n    n_jobs=-1)\n\nbest_rfr = grid_rfr.fit(X_train, y_train)","5bea0035":"best_rfr","ce1e9473":"importances = best_rfr.best_estimator_.feature_importances_\n\nfeature_names = X_train.columns\nforest_importances = pd.DataFrame(importances, columns=[\"FI\"], index=feature_names)\nforest_importances = forest_importances.sort_values(\"FI\", ascending=False)\n\nfig, ax = plt.subplots()\nsns.barplot(data=forest_importances, x = \"FI\", \n            y=forest_importances.index, ax=ax, \n            palette=\"Blues_d\")\nax.set_title(\"Feature importances of RandomForestRegressor\", \n             fontsize=20, fontweight='bold')\nax.set_xlabel(\"Mean decrease in impurity\")\nax.set_ylabel(\"Features\")\nfig.tight_layout()","6d380eb7":"rfr_pred = best_rfr.predict(X_valid)\nfig = plt.figure(figsize=(12,8))\nplt.scatter(x=rfr_pred, y=y_valid)\nplt.ylabel(\"Pawpularity real values (y_valid)\")\nplt.xlabel(\"Predicted values (rfr_pred)\")\nplt.title(\"Predicted Pawpularity VS True values with RandomForest\", \n          fontsize=20, fontweight='bold')\nplt.show()","615d19fc":"x_train = train.drop([\"Id\", \"Pawpularity\", \"Eyes\"], axis=1)\ny_train = train[\"Pawpularity\"]","9a18deeb":"# overfitting \ubc29\uc9c0\ub97c \uc704\ud574 train\/validation 8:2\ub85c \ubd84\ub9ac\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2)","f6974558":"#\uc6b0\ub9ac\uac00 \uc608\uce21\ud560 \ubc94\uc704\ub294 (0~\ubb34\ud55c\ub300)\uc778 \ud2b9\uc815 \uac12\uc774\ubbc0\ub85c regressor\nlgbr = lgb.LGBMRegressor(max_depth=10,learning_rate=0.005,n_estimators=200,reg_alpha=1,reg_lambda=0.1)\nlgbr.fit(x_train, y_train)\ny_pred = lgbr.predict(x_test)","dca98a26":"def rmse(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\nprint(rmse(y_test,y_pred))\nprint(mean_squared_error(y_test,y_pred))\nprint(r2_score(y_test,y_pred))","c4af9c9a":"sub = pd.DataFrame()\nsub['Id']=test['Id']","0f3db1cc":"test.head()\n# test.info()","82aeb5ef":"test = test.drop(['Id', 'Eyes'], axis=1) # id\uac12\uc740 feature\uac00 \uc544\ub2c8\uae30\uc5d0 \uc81c\uac70\nPred = lgbr.predict(test)","1c9518ba":"sub['Pawpularity'] = Pred\nsub.to_csv('submission.csv', index=False)","b6bf68af":"sub.head()","1ed11f19":"RandomForest\ub97c \uc0ac\uc6a9\ud574 feature\uc758 \uc911\uc694\ub3c4 \ud310\ub2e8","e1e2364b":"# EDA","f4c670fe":"\ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\ub294 0.35\/0.41 \uc9c0\uc5ed\uc5d0 \uc9d1\uc911\ub41c \uc608\uce21\uc774 \ub9e4\uc6b0 \ubd88\ud655\uc2e4 -> \ub2e4\ub978 \ubc29\ubc95\uc744 \uc2dc\ub3c4\ud558\uc790","6c378d71":"strong linear correlations\uc740 \ud655\uc778\ud560 \uc218 \uc5c6\ub2e4.","155a1762":"Face\uc640 Eyes\uac00 10\uc774\uc0c1\uc774\ubbc0\ub85c \uc11c\ub85c \uac15\ud55c \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uc778\ub2e4.\n\uc774 \uc911 \ud558\ub098\ub9cc \uc0ac\uc6a9\ud558\uc790.","c67b3024":"VIF\ub85c \ud655\uc778\ud574\ubcf4\uc790","eff7b301":"\uac00\uc6b0\uc2dc\uc548 \ubd84\ud3ec\ub97c \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4.\n-> \uc120\ud0dd\ud55c \ubaa8\ub378\ub9c1\uc5d0 \ub530\ub77c \ub370\uc774\ud130 \uc815\uaddc\ud654 \uc791\uc5c5\uc774 \uc911\uc694\ud558\ub2e4.","cc0204f2":"\uac01 \uc694\uc18c\ub4e4\uc740 \ub69c\ub838\ud55c \ud2b9\uc9d5\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4.\n\n\uc0c1\uad00\uad00\uacc4\ub97c \ubd84\uc11d\ud574\ubcf4\uc790.","05453298":"1. Face and Eyes --> \ud569\ub9ac\uc801\n2. Occlusion and Human (\uce58\uc544\uc758 \uac00\uc9c0\ub7f0\ud568\uacfc \uc778\uac04)","4561d920":"\ubaa8\ub378\uc758 \ud3b8\uc758\uc131\uc744 \uc704\ud574 Pawpularity\ub97c 0\uacfc 1 \uc0ac\uc774\ub85c \ubc14\uafbc\ub2e4.","3e17e230":"\ub3c5\ub9bd\ubcc0\uc218\uc778 1\ubc88 \uc694\uc18c\ub4e4\uc774 \uc0c1\uad00\uad00\uacc4\uac00 \uae4a\uc5b4 (multicollinearity) \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \uc800\ud558\uc2dc\ud0ac \uc218 \uc788\ub294\uc9c0 Scatter plot\uc73c\ub85c \ud655\uc778\ud574\ubcf4\uc790.","bb81eda1":"Pawpularity 2~30\uc5d0 \uc9d1\uc911\ub418\uc5b4 \uc788\ub2e4.\nquantile-quantile diagram\uc73c\ub85c \ubd84\ud3ec \uc815\uaddc\uc131\uc744 \ud655\uc778\ud558\uc790.","d46d90de":"strong linear correlations (Pearson) between the predictor variables and the variable to be predicted (Pawpularity).","6844ee35":"predictor variables and the variable to be predicted","54e76d1c":"Near, Group, Accessory\uac00 \uc911\uc694\ud558\ub2e4"}}