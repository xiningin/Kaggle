{"cell_type":{"76a3d319":"code","80b7c17d":"code","2ae8e4f1":"code","ffa137fc":"code","e20f7085":"code","284acedc":"code","6775a434":"code","f076652a":"code","5d082e71":"code","44ef6403":"code","49d25eef":"code","da2632a0":"markdown","9ca1be85":"markdown","3d5832ba":"markdown","a3aced2e":"markdown","38983b39":"markdown","ea500371":"markdown","26486bea":"markdown","bb21dcc4":"markdown","2d8a82e2":"markdown","9f270488":"markdown","f8812830":"markdown"},"source":{"76a3d319":"# Library Initializations\nimport pandas as pd\nimport plotly.graph_objs as go\nimport numpy as np\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom plotly.tools import FigureFactory as FF\n\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', 40)\n\n# Read data from files\n# The file is stored at the same location as the notebook\nmatches = pd.read_csv(\"..\/input\/matches.csv\")\ndeliveries = pd.read_csv(\"..\/input\/deliveries.csv\")\n\n","80b7c17d":"matches.head(2)","2ae8e4f1":"deliveries.head(2)","ffa137fc":"no_of_wins = matches.groupby(['winner','season']).season.count()\n# No of Wins by Chennai Super Kings\ndata = [go.Bar(\n            x=pd.DataFrame(no_of_wins['Chennai Super Kings'].index)['season'],\n            y=pd.DataFrame(no_of_wins['Chennai Super Kings'].values)[0],\n            marker={\n                'color': pd.DataFrame(no_of_wins['Chennai Super Kings'].values)[0],\n                'colorscale': 'Viridis'\n            }\n    )]\n\niplot(data, filename='basic-line')","e20f7085":"venue_list = matches.groupby('venue').venue.count()\n\ndata = [go.Bar(\n            y=pd.DataFrame(venue_list.index)['venue'],\n            x=pd.DataFrame(venue_list.values)[0],\n            orientation = 'h',\n            marker={\n                'color': pd.DataFrame(venue_list.values)[0],\n                'colorscale': 'Jet'\n            }\n    )]\niplot(data, filename='basic-bar')","284acedc":"df = pd.merge(matches, deliveries,how='inner',left_on='id',right_on='match_id')\ntop_10_batsman = df.groupby(['batsman']).batsman_runs.sum().sort_values(ascending=False)[0:10].index\n\nno_of_fours = pd.DataFrame(df[df.batsman.isin(top_10_batsman) & (df.batsman_runs==4)].groupby(['batsman']).batsman_runs.count())\nno_of_sixes = pd.DataFrame(df[df.batsman.isin(top_10_batsman) & (df.batsman_runs==6)].groupby(['batsman']).batsman_runs.count())\n\n\nno_of_fours.reset_index(inplace=True)\nno_of_sixes.reset_index(inplace=True)\n\nno_of_fours.columns = ['batsman','no of fours']\nno_of_sixes.columns = ['batsman','no of sixes']\n\ntotal_no_fours_sixes = no_of_fours.merge(no_of_sixes, left_on='batsman',right_on='batsman')\n\ntrace1 = go.Bar(\n            x=total_no_fours_sixes['batsman'],\n            y=total_no_fours_sixes['no of fours'],\n            text=total_no_fours_sixes['no of fours'],\n            textposition='auto',\n            name = 'No of 4s'\n        )\ntrace2= go.Bar(        \n            x=total_no_fours_sixes['batsman'],\n            y=total_no_fours_sixes['no of sixes'],\n            text=total_no_fours_sixes['no of sixes'],\n            textposition='auto',\n            name = 'No of 6s'\n        )\n\ndata = [trace1,trace2]\nlayout = go.Layout(\n    barmode='group'\n)\n\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig, filename='group-bar')","6775a434":"from IPython.core.display import HTML\n\n\nwinner_by_shortest_margin = pd.DataFrame(matches[(matches.win_by_runs<5) & (matches.win_by_wickets==0)].groupby(['season','winner']).id.count()).reset_index()\nwinner_by_shortest_margin.columns=['season','winner','no of times']\n\ndisplay(HTML(winner_by_shortest_margin.to_html()))\n \nwinner_by_least_wickets = pd.DataFrame(matches[(matches.win_by_runs==0) & (matches.win_by_wickets<=2)].groupby(['season','winner']).id.count()).reset_index()\nwinner_by_least_wickets.columns=['season','winner','no of times']\n\ndisplay(HTML(winner_by_least_wickets.to_html()))\n","f076652a":"start_season, end_season = 2008, 2018\nwhile start_season < end_season:\n    wins_percity = pd.DataFrame(matches[matches['season'] == start_season].groupby(['winner', 'city'])['id'].count().unstack()).reset_index()\n    wins_percity.fillna(value=0,inplace=True)\n    wins_percity.dropna(axis='columns',how='all',inplace=True)\n    wins_percity.dropna(inplace=True)\n\n    city_in_season = matches[matches.season == start_season].city.unique()\n    data = list();\n    \n    for each_city in city_in_season:\n        trace = go.Bar(\n            x=wins_percity['winner'],\n            y=wins_percity[each_city],\n            text=wins_percity[each_city],\n            textposition='auto',\n            name=each_city,\n        )\n        data.append(trace)\n    layout = go.Layout(\n        barmode='stack',\n        title='Wins Per City in Season '+str(start_season),\n    )\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, filename='stacked-bar')\n    start_season += 1","5d082e71":"#Toss won vs Match won\nwin_count = pd.DataFrame(matches[matches.toss_winner == matches.winner].groupby('season').winner.count()).reset_index()\nwin_count.columns = ['season','both_toss_n_match_winner']\n\ntotal_no_of_matches = pd.DataFrame(matches.groupby('season').id.count()).reset_index()\ntotal_no_of_matches.columns = ['season','no_of_matches']\n\npercentage_wins = win_count.merge(total_no_of_matches)\npercentage_wins['percentage_wins'] = round(percentage_wins['both_toss_n_match_winner']*100\/percentage_wins['no_of_matches'],2)\n\npercentage_wins.set_index('season',inplace=True)\n\npercentage_wins.plot.line()","44ef6403":"type_of_dismissal = ['caught','bowled', 'lbw', 'caught and bowled','stumped', 'hit wicket']\nvalid_wickets_df = pd.DataFrame(df[df.dismissal_kind.isin(type_of_dismissal)].groupby(['season','bowler']).inning.count())\n\ntop_5_wicket_takers = pd.DataFrame(valid_wickets_df.sort_values(by=[\"season\",\"inning\"],ascending=False).groupby('season').head(5)).reset_index()\ntop_5_wicket_takers","49d25eef":"balls_per_season = pd.DataFrame(df[df.is_super_over == 1].groupby('season').id.count()).reset_index()\nballs_per_season.columns = ['season','no_of_superover_balls']\ndata = [go.Bar(\n            x=balls_per_season['no_of_superover_balls'],\n            y=balls_per_season['season'],\n            text=balls_per_season['no_of_superover_balls'],\n            textposition='auto',\n            orientation = 'h',\n            marker={\n                'color': balls_per_season['season'],\n                'colorscale': 'Jet'\n            }\n    )]\nlayout = go.Layout(\n        title='No of balls bowled in SuperOver '\n    )\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='basic-bar')","da2632a0":"### Number of wins in each city in every release","9ca1be85":"## Matches per ground","3d5832ba":"### Sneak Peak of the data","a3aced2e":"### Number of deliveries bowled in superover in each season","38983b39":"The top batsman was selected based on total runs and then the number of 4s and 6s hit by them","ea500371":"Being an ardent cricket fun it gave me immense pleasure to analyse the data. I tried to analyze the data from various aspects and tried to represent it through tables and graphs. Hope this helps someone to gain better inside or take it to next level.\n\nThis notebook contains:\n1. Team Analysis\n2. Stadium Analysis\n3. Player Analysis \n4. Match Analysis etc.\n\nThe libraries used are:\n1. pandas\n2. plotly\n3. numpy\n4. matplotlib\n","26486bea":"### Impact of toss on the match outcome","bb21dcc4":"## Top 10 batsman with number of fours and sixes","2d8a82e2":"###  Closest matches\nA Closest match is defined as \n1. The side batting first won by < 5 runs\n2. The side chasing won with <= 2 wickets remaining","9f270488":"### Bowler's Performance w.r.t. wickets","f8812830":"### Number of wins by a team per season"}}