{"cell_type":{"dd94e0b7":"code","db1beb73":"code","ce1dd480":"code","ffb5cdba":"code","92a73f92":"code","4b2f09b4":"code","c5c3bbd0":"code","a935f5e5":"code","d68af3ab":"code","015e17ef":"code","d7020e0c":"code","95bacb3a":"code","022d96f0":"code","f597840a":"code","82472dbd":"code","6f73e850":"code","77c4fa71":"code","c552fc8f":"code","bf41e6a0":"code","6d803360":"code","4bb11d5a":"code","7767b13b":"code","cf60b8b4":"code","e48c50ff":"code","e37bfa93":"code","2652594b":"code","dcaa2a2e":"code","86e2fb23":"code","c411c1c2":"code","9af9227c":"code","b500a2ba":"code","aefbd624":"code","e79303d2":"code","f7f782cd":"code","8d47d81e":"code","d0b91fa0":"code","0c32db43":"code","241fc33a":"code","93fca5e7":"code","74e73c6f":"code","0d831680":"code","e419f5cd":"markdown","a0bfd20d":"markdown"},"source":{"dd94e0b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","db1beb73":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","ce1dd480":"from fastai.text import *\nfrom fastai import *","ffb5cdba":"path = Path('\/kaggle\/input\/jigsaw-toxic-comment-classification-challenge\/')\npath.ls()\n!mkdir data\n!pwd\n!cp -a {path}\/*.* .\/data\/\n!ls data\n\npath = Path('\/kaggle\/working\/data\/')\npath.ls()","92a73f92":"df_train = pd.read_csv(path\/'train.csv')\ndf_test = pd.read_csv(path\/'test.csv')\ndf = df_train.append(df_test)\n\ndf.head()","4b2f09b4":"df['comment_text'][1]","c5c3bbd0":"bs = 64\ndata_lm = (TextList.from_df(df, path, cols='comment_text')\n                .split_by_rand_pct(0.1)\n                .label_for_lm()\n                .databunch(bs=bs))","a935f5e5":"data_lm.show_batch()","d68af3ab":"learn = language_model_learner(data_lm, AWD_LSTM, drop_mult=0.3)","015e17ef":"learn.lr_find()\nlearn.recorder.plot(skip_end=15)","d7020e0c":"learn.fit_one_cycle(1, 1e-2, moms=(0.8,0.7))","95bacb3a":"learn.save('fit_head')","022d96f0":"learn.load('fit_head');","f597840a":"learn.unfreeze()\n","82472dbd":"learn.fit_one_cycle(6, 1e-3, moms=(0.8,0.7))","6f73e850":"learn.save('fine_tuned')","77c4fa71":"learn.load('fine_tuned');","c552fc8f":"TEXT = \"I liked this movie because\"\nN_WORDS = 40\nN_SENTENCES = 2","bf41e6a0":"print(\"\\n\".join(learn.predict(TEXT, N_WORDS, temperature=0.75) for _ in range(N_SENTENCES)))","6d803360":"# save the encoder for next step use\nlearn.save_encoder('fine_tuned_enc')","4bb11d5a":"test = pd.read_csv(path\/\"test.csv\")\ntest_datalist = TextList.from_df(test, cols='comment_text')\n","7767b13b":"data_cls = (TextList.from_csv(path, 'train.csv', cols='comment_text', vocab=data_lm.vocab)\n                .split_by_rand_pct(valid_pct=0.1)\n                .label_from_df(cols=['toxic', 'severe_toxic','obscene', 'threat', 'insult', 'identity_hate'], label_cls=MultiCategoryList, one_hot=True)\n                .add_test(test_datalist)\n                .databunch())\ndata_cls.save('data_clas.pkl')\n","cf60b8b4":"data_clas = load_data(path, 'data_clas.pkl', bs=bs)","e48c50ff":"data_clas.show_batch()","e37bfa93":"learn = text_classifier_learner(data_clas, AWD_LSTM, drop_mult=0.5)\nlearn.load_encoder('fine_tuned_enc')","2652594b":"# learn = language_model_learner(data, AWD_LSTM, drop_mult=0.3)\n# learn = language_model_learner(data, pretrained_model=URLs.WT103, drop_mult=0.3)\n","dcaa2a2e":"learn.lr_find()\nlearn.recorder.plot()","86e2fb23":"learn.fit_one_cycle(1, 2e-2, moms=(0.8,0.7))","c411c1c2":"learn.save('first')","9af9227c":"learn.load('first');","b500a2ba":"learn.freeze_to(-2)\nlearn.fit_one_cycle(1, slice(1e-2\/(2.6**4),1e-2), moms=(0.8,0.7))","aefbd624":"learn.save('second');\nlearn.load('second');","e79303d2":"learn.freeze_to(-3)\nlearn.fit_one_cycle(1, slice(5e-3\/(2.6**4),5e-3), moms=(0.8,0.7))","f7f782cd":"learn.save('third')\nlearn.load('third');","8d47d81e":"learn.unfreeze()\nlearn.fit_one_cycle(2, slice(1e-3\/(2.6**4),1e-3), moms=(0.8,0.7))","d0b91fa0":"learn.predict(\"I really loved that movie, it was awesome!\")","0c32db43":"learn.show_results()","241fc33a":"preds, target = learn.get_preds(DatasetType.Test, ordered=True)\nlabels = preds.numpy()","93fca5e7":"labels","74e73c6f":"test_id = test['id']\nlabel_cols = ['toxic', 'severe_toxic' , 'obscene' , 'threat' , 'insult' , 'identity_hate']\n\nsubmission = pd.DataFrame({'id': test_id})\nsubmission = pd.concat([submission, pd.DataFrame(preds.numpy(), columns = label_cols)], axis=1)\n\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","0d831680":"# import os\n# os.chdir(r'kaggle\/working')\n\n# from IPython.display import FileLink\n# FileLink(r'df_name.csv')","e419f5cd":"Create a TextLMDataBunch","a0bfd20d":"Now create the classifier"}}