{"cell_type":{"f3b32c28":"code","5f80eac0":"code","5935a22d":"code","ab43b9ad":"code","993a43f0":"code","5b6b817a":"code","32593fd6":"code","fd6f066f":"code","0529ebcc":"code","21c4e310":"code","a6c5f742":"code","d931e13f":"code","e157bf69":"code","0bc2b77d":"code","77001ac5":"code","9d7d695b":"code","a3cfd8fd":"code","cfe25953":"code","f2fa7d9d":"code","f1bd2df3":"code","fdbcf4d2":"code","e44754dd":"code","49aca0a4":"code","bf7571d0":"markdown","b2b314cb":"markdown","4ce72184":"markdown","1a37ef8f":"markdown","735d30b3":"markdown","cc136664":"markdown","1d35481c":"markdown","6aadfdbf":"markdown"},"source":{"f3b32c28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport geopandas\nimport pandas_profiling\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.\n'''Seaborn and Matplotlib Visualization'''\nimport matplotlib                  # 2D Plotting Library\nimport matplotlib.pyplot as plt\nimport seaborn as sns              # Python Data Visualization Library based on matplotlib\nimport geopandas as gpd            # Python Geospatial Data Library\nplt.style.use('fivethirtyeight')\n%matplotlib inline\n\n'''Plotly Visualizations'''\nimport plotly as plotly                # Interactive Graphing Library for Python\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot, plot\ninit_notebook_mode(connected=True)\n\n'''Spatial Visualizations'''\nimport folium\nimport folium.plugins\n\n'''NLP - WordCloud'''\nimport wordcloud\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n'''Machine Learning'''\nimport sklearn\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor \n\n\n\n# Any results you write to the current directory are saved as output.","5f80eac0":"import plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\nimport pandas as pd \n\ndf = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\n","5935a22d":"#by default head shows us top 5 records\ndf.head()","ab43b9ad":"df.shape","993a43f0":"df.info()","5b6b817a":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (df.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","32593fd6":"df[\"rating\"].fillna(\"No rating\", inplace = True) ","fd6f066f":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (df.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","0529ebcc":"df.rename(columns={\"type\": \"category\"},inplace = True)","21c4e310":"import pandas as pd\n\ndf = df[pd.notnull(df['director'])]","a6c5f742":"reduced_df = df.drop(\"director\", axis=1)","d931e13f":"sns.set(rc={'figure.figsize':(19.7,8.27)})\n\nsns.heatmap(reduced_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","e157bf69":"from wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.director)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200, background_color=\"coral\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.title('Most Popular Directors',fontsize = 30)\nplt.axis(\"off\")\nplt.show()","0bc2b77d":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nroomdf = reduced_df.groupby('release_year').size()\/reduced_df['release_year'].count()*100\nlabels = roomdf.index\nvalues = roomdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","77001ac5":"df_countries = pd.DataFrame(reduced_df.country.value_counts().reset_index().values, columns=[\"country\", \"count\"])\ndf_countries.head()","9d7d695b":"iplot([go.Choropleth(\n    locationmode='country names',\n    locations=df_countries.country,\n    z=df_countries[\"count\"]\n)])","a3cfd8fd":"#initializing empty list where we are going to put our name strings\n_ratings_=[]\n#getting name strings from the column and appending it to the list\nfor rating in reduced_df.rating:\n    _ratings_.append(rating)\n#setting a function that will split those name strings into separate words   \ndef split_rating(rating):\n    spl=str(rating).split()\n    return spl\n#initializing empty list where we are going to have words counted\n_rating_for_count_=[]\n#getting name string from our list and using split function, later appending to list above\nfor x in _ratings_:\n    for word in split_rating(x):\n        word=word.lower()\n        _rating_for_count_.append(word)\n        \n#we are going to use counter\nfrom collections import Counter\n#let's see top 5 used words by host to name their listing\n_top_5_w=Counter(_rating_for_count_).most_common()\n_top_5_w=_top_5_w[0:5]\n\n\n\n#now let's put our findings in dataframe for further visualizations\nsub_w=pd.DataFrame(_top_5_w)\nsub_w.rename(columns={0:'Ratings', 1:'Count'}, inplace=True)","cfe25953":"#we are going to use barplot for this visualization\n# fig = px.bar(sub_w, x='Ratings', y='Count')\n# fig.show()\nfig = px.bar(sub_w, x=\"Ratings\", y=\"Count\", color='Ratings')\nfig.show()","f2fa7d9d":"# x = reduced_df.duration.value_counts()\nmovie_df = reduced_df[reduced_df['category'] == 'Movie']\nx = movie_df.rating.value_counts()\nx.head()","f1bd2df3":"TV_show_df = reduced_df[reduced_df['category'] == 'TV Show']\nx1 = TV_show_df.rating.value_counts()\nx1.head()","fdbcf4d2":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    y=['TV-MA','TV-14','TV-PG'],\n    x=[1306, 1015,415],\n    name='Movie',\n    orientation='h',\n    marker=dict(\n        color='rgba(246, 78, 139, 0.6)',\n        line=dict(color='rgba(246, 78, 139, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n    y=['TV-MA','TV-14','TV-PG'],\n    x=[46,46,20],\n    name='TV Show',\n    orientation='h',\n    marker=dict(\n        color='rgba(58, 71, 80, 0.6)',\n        line=dict(color='rgba(58, 71, 80, 1.0)', width=3)\n    )\n))\n\nfig.update_layout(barmode='stack')\nfig.show()","e44754dd":"date = pd.DataFrame(reduced_df.date_added.value_counts().reset_index().values, columns=[\"Date\", \"Count\"])\ndate.head()","49aca0a4":"import plotly.express as px\n\n# df = px.data.gapminder().query(\"continent=='Oceania'\")\nfig = px.line(date, x=\"Date\", y=\"Count\",title = \"Line graph showing amount of content added on Netflix date wise.\")\nfig.show()","bf7571d0":"Handling the nan values","b2b314cb":"***EDA***","4ce72184":"Drop Column with Missing Values which is not important for us and do imputation for other ones.","1a37ef8f":"Plot showing amount of content added year wise on Netflix.","735d30b3":"Countries contributing content on Netflix","cc136664":"***Data Cleaning***","1d35481c":"Most of the Movies on Netflix fall under the TV-MA category i.e for mature Audience.","6aadfdbf":"![netflix](https:\/\/s.marketwatch.com\/public\/resources\/images\/MW-HT272_Netfli_ZH_20191014153615.jpg)"}}