{"cell_type":{"2a6651da":"code","224b4bab":"code","5dd01a11":"code","f1954d3e":"code","fe61e725":"code","3ea75d27":"code","722a5159":"code","38812514":"code","7ad2d6f7":"code","fd790df9":"code","528c8020":"code","956d10fd":"code","8878920d":"code","a12f3c88":"code","3260dde5":"code","f5563f56":"code","bec555ec":"code","b1474403":"code","da2e9c91":"code","8f861be7":"code","15d09e39":"code","6b753461":"code","196748dc":"code","8efca805":"markdown"},"source":{"2a6651da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","224b4bab":"!nvidia-smi","5dd01a11":"!ls ..\/input\/","f1954d3e":"import sys\n!cp ..\/input\/rapids\/rapids.0.14.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","fe61e725":"from sklearn.datasets import make_moons\nimport pandas","3ea75d27":"X, y  = make_moons(n_samples=int(1e2), noise=0.05, random_state=0)\ntype(X)","722a5159":"%time X = pandas.DataFrame({'fea%d'%i: X[:, i]for i in range(X.shape[1])})","38812514":"# print(y.tolist())\nX['class'] = y.tolist()\n# X.head()\n# fig = px.scatter(X, x=\"fea0\", y=\"fea1\")\n# fig.show()\nax2 = X.plot.scatter(x='fea0', y ='fea1')","7ad2d6f7":"from sklearn.cluster import DBSCAN\ndbscan = DBSCAN(eps = 0.3, min_samples = 5)","fd790df9":"%time dbscan.fit(X[['fea0', 'fea1']])\n","528c8020":"%time y_hat = dbscan.fit_predict(X)","956d10fd":"X['predict_class'] = y_hat.tolist()","8878920d":"X.head()","a12f3c88":"ax3 = X.plot.scatter(x='fea0', y='fea1', c='predict_class', colormap='viridis')","3260dde5":"from sklearn.datasets import make_moons\nimport cudf","f5563f56":"X, y = make_moons(n_samples=int(1e2),noise=0.05, random_state=0)","bec555ec":"%time X = cudf.DataFrame({'fea%d'%i: X[:, i]for i in range(X.shape[1])})","b1474403":"# print(y.tolist())\nX['class'] = y.tolist()\n# X.head()\n# fig = px.scatter(X, x=\"fea0\", y=\"fea1\")\n# fig.show()\nax2 = X.to_pandas().plot.scatter(x='fea0', y ='fea1')","da2e9c91":"from cuml import DBSCAN\ndbscan = DBSCAN(eps = 0.3, min_samples = 5)","8f861be7":"%time dbscan.fit(X[['fea0', 'fea1']])","15d09e39":"%time y_hat = dbscan.fit_predict(X)","6b753461":"X['predict_class'] = y_hat.tolist()","196748dc":"ax3 = X.to_pandas().plot.scatter(x='fea0', y='fea1', c='predict_class', colormap='viridis')","8efca805":"# Using the same analogy with RAPIDs"}}