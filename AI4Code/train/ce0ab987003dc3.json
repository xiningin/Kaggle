{"cell_type":{"549abac2":"code","1dff727b":"code","b3c887d4":"code","e99349a3":"code","285b79d5":"code","b4643cd6":"code","08891292":"code","4debbffc":"code","c2e37c71":"code","afa78e23":"code","71360377":"code","792bba1b":"code","8b8fca08":"code","86013884":"code","bdff2fff":"code","2c1ad4ba":"code","a0a1edf7":"code","98b105db":"code","2a2c909f":"code","55286dca":"code","e64929fc":"code","d41f66c5":"code","7540618a":"code","1bb6f549":"code","59248383":"code","9046e498":"code","ab36ff3a":"code","814b3365":"code","5fe4d779":"code","1444e484":"code","b0cb101f":"code","12bca2d2":"code","c0bdfabf":"code","df8b63f8":"code","7c1c5e85":"code","52744394":"code","71ddec0c":"code","915c010a":"code","5a67d97f":"code","47f3e47f":"code","658e7de0":"code","17512ac9":"code","4d62a8dd":"code","c6c283cd":"code","34f17f8c":"code","530d80b3":"code","089175f9":"code","5ae1f523":"code","6c22e5a4":"code","4b01dcbc":"code","382ea499":"code","16f9cb8f":"code","d1bd4308":"code","4624f2c9":"code","9e050ed5":"markdown","655c54a0":"markdown","12e50746":"markdown","aab14f23":"markdown","0e3e87d4":"markdown","fd27f239":"markdown","3d3102de":"markdown","7fbb25fc":"markdown","b5954b43":"markdown","28b68b0f":"markdown","7e905a15":"markdown","f44a8634":"markdown","f64a45e3":"markdown","accc6f35":"markdown","b9daa81f":"markdown","59deb40c":"markdown","7d166c0b":"markdown","47670a03":"markdown","ae4c7453":"markdown","62f59575":"markdown","be0dd414":"markdown","fe4d3a7e":"markdown","32692851":"markdown","dd5215c1":"markdown","604f8b75":"markdown","9c5863d5":"markdown","ef2afffa":"markdown","7a4ee707":"markdown","0234aa09":"markdown","79350f25":"markdown","a9d79330":"markdown","2f206d39":"markdown","5df01c49":"markdown"},"source":{"549abac2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor, plot_tree\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom datetime import datetime\n\nimport random\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nmatplotlib.rcParams.update({'font.size': 14})\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1dff727b":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","b3c887d4":"matplotlib.rcParams.update({'font.size': 14})\ndef evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    ### \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 ###\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","e99349a3":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.info()","285b79d5":"train_df.sample(10)","b4643cd6":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.info()","08891292":"target_mean = round(train_df['Price'].mean(), 2)\ntarget_median = train_df['Price'].median()\ntarget_mode = train_df['Price'].mode()[0]\n\nplt.figure(figsize = (8, 4))\nsns.distplot(train_df['Price'], bins=50)\ny = np.linspace(0, 0.000005, 10)\nplt.plot([target_mean] * 10, y, label='mean', linestyle=':', linewidth=4)\nplt.plot([target_median] * 10, y, label='median', linestyle='--', linewidth=4)\nplt.plot([target_mode] * 10, y, label='mode', linestyle='-.', linewidth=4)\n\nplt.title('Distribution of Price')\nplt.legend()\nplt.show()","4debbffc":"target_adjusted_mode = (train_df['Price'] \/\/ 10000 * 10000).mode()[0]\nplt.figure(figsize = (8, 4))\nsns.distplot(train_df['Price'], bins=50)\ny = np.linspace(0, 0.000005, 10)\nplt.plot([target_mean] * 10, y, label='mean', linestyle=':', linewidth=4)\nplt.plot([target_median] * 10, y, label='median', linestyle='--', linewidth=4)\nplt.plot([target_adjusted_mode] * 10, y, label='mode', linestyle='-.', linewidth=4)\n\nplt.title('Distribution of Price')\nplt.legend()\nplt.show()","c2e37c71":"train_df_obj_features = train_df.select_dtypes(include='object')\ntrain_df_obj_features.head(3)","afa78e23":"train_df_obj_features.Ecology_2.value_counts()","71360377":"train_df_obj_features.Ecology_3.value_counts()","792bba1b":"train_df_obj_features.Shops_2.value_counts()","8b8fca08":"train_df = pd.concat([train_df, pd.get_dummies(train_df_obj_features, columns=train_df_obj_features.columns)], axis=1)\ntrain_df.sample(3)","86013884":"# \u043f\u0440\u0438\u0439\u043c\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u043f\u043b\u043e\u0436\u0430\u0434\u044c \u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\nMIN_FLAT_SQUARE = 10\nMAX_FLAT_SQUARE = 400\n# \u043f\u0440\u0438\u0439\u043c\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u043f\u043b\u043e\u0436\u0430\u0434\u044c \u0434\u043b\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\nMAX_ROOMS_SQUARE = 100\nMIN_ROOMS_SQUARE = 5\nMAX_ROOMS_QUANTITY = 6\nMAX_KITCHEN_SQUARE = 50\n# \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430\u044f \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\nMAX_HOUSE_FLOOR = 90\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043e\u043c\u0430\nMIN_HOUSE_YEAR = 1910\nMAX_HOUSE_YEAR = datetime.now().year","bdff2fff":"train_df.Square.describe()","2c1ad4ba":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043c\u043d\u043e\u0433\u043e \u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0438 \u043c\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438\ntrain_df.loc[(train_df['Square'] < MIN_FLAT_SQUARE) | (train_df['Square'] > MAX_FLAT_SQUARE)].Square.nunique()\n# 15 - \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 10 \u0438 400","a0a1edf7":"# \u043d\u0430\u0439\u0434\u0451\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0436\u0438\u043b\u043e\u0439 \u0438 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0435\u0439\n#gen_life_square_relation = train_df.Square.median() \/ train_df.LifeSquare.median()\ngen_life_square_relation = (train_df.Square \/ train_df.LifeSquare).median()\nsquare_median = train_df['Square'].median()\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u043b\u0430 \u0436\u0438\u043b\u0443\u044e\ndef get_flat_square(life_square):\n    flat_square = square_median\n    if life_square:\n        computed_flat_square = life_square * gen_life_square_relation\n        if MIN_FLAT_SQUARE <= computed_flat_square <= MAX_FLAT_SQUARE:\n            flat_square = computed_flat_square\n    return flat_square\n\n\n# \u0432\u044b\u0431\u0440\u043e\u0441\u044b Square \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 LifeSquare\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u043b\u0430 \u0436\u0438\u043b\u0443\u044e\nsquare_condition = (train_df['Square'].isna()) \\\n                | (train_df['Square']<MIN_FLAT_SQUARE) \\\n                | (train_df['Square']>MAX_FLAT_SQUARE) \\\n                | (train_df['Square']<train_df['LifeSquare'])\n\ntrain_df['Square_mod'] = 0\ntrain_df.loc[square_condition, 'Square_mod']  = 1\ntrain_df.loc[square_condition, 'Square']  = train_df['LifeSquare'].apply(get_flat_square)\n","98b105db":"train_df.Rooms.describe()","2a2c909f":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043c\u043d\u043e\u0433\u043e \u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0430\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0438 \u043c\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438\ntrain_df.loc[(train_df['Rooms'] < MIN_ROOMS_SQUARE) | (train_df['Rooms'] > MAX_ROOMS_SQUARE)].Rooms.nunique()\n# 5 - \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u0441\u043d\u0442\u0430\u043d\u0442\u044b \u043a\u0430\u043a \u0435\u0441\u0442\u044c","55286dca":"rooms_median = round(train_df['Rooms'].median())\n# \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043e\u0434\u043d\u043e\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\nmed_one_room_squre = (train_df.LifeSquare \/ train_df['Rooms']).median() \n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u043b\u0430 \u0436\u0438\u043b\u0443\u044e\ndef get_rooms_quantity(square):\n    rooms = rooms_median\n    if square:\n        computed_rooms_quantity = square \/\/ med_one_room_squre\n        if 0 < computed_rooms_quantity <= MAX_ROOMS_QUANTITY:\n            rooms = computed_rooms_quantity\n    return rooms\n\n# \u0432\u044b\u0431\u0440\u043e\u0441\u044b Rooms \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Square\nrooms_condition = (train_df['Rooms'].isna()) \\\n                | (train_df['Rooms']<1) \\\n                | (train_df['Rooms']>MAX_ROOMS_QUANTITY)\n\ntrain_df['Rooms_mod'] = 0\ntrain_df.loc[rooms_condition, 'Rooms_mod']  = 1\ntrain_df.loc[rooms_condition, 'Rooms']  = train_df['Square'].apply(get_rooms_quantity)\n\ntrain_df.Rooms.describe()","e64929fc":"# \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 LifeSquare \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 Square\ntrain_df['LifeSquare_mod'] = 0\ntrain_df.loc[(train_df['LifeSquare'].isna()) \\\n             | (train_df['Square'] < train_df['LifeSquare']) \\\n             | (train_df['LifeSquare'] < MIN_FLAT_SQUARE \/ gen_life_square_relation), 'LifeSquare_mod'] = 1\n\ntrain_df.loc[(train_df['LifeSquare'].isna()) \\\n             | (train_df['Square'] < train_df['LifeSquare']) \\\n             | (train_df['LifeSquare'] < MIN_FLAT_SQUARE \/ gen_life_square_relation), 'LifeSquare'] = train_df['Square'] \/ gen_life_square_relation\n\ntrain_df.LifeSquare.describe()","d41f66c5":"# \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e, \u043d\u0443\u043b\u0435\u0432\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c KitchenSquare \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430, \u0447\u0442\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u043b\u0438\u0431\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b-\u0441\u0442\u0443\u0434\u0438\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0430\u0445\nkitchen_square_relation = ((train_df['Square'] - train_df['LifeSquare'])\/train_df['KitchenSquare']).mean()\n\n# \u0432\u044b\u0431\u0440\u043e\u0441\u044b Rooms \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Square\nkitchen_square_condition = (train_df['KitchenSquare'].isna()) \\\n                | (train_df['KitchenSquare']<0) \\\n                | (train_df['KitchenSquare']>MAX_KITCHEN_SQUARE) \\\n                | (train_df['KitchenSquare'] > (train_df['Square'] - train_df['LifeSquare']))\n\ntrain_df['KitchenSquare_mod'] = 0\ntrain_df.loc[kitchen_square_condition, 'KitchenSquare_mod']  = 1\ntrain_df.loc[kitchen_square_condition, 'KitchenSquare'] = (train_df['Square'] - train_df['LifeSquare'])\/kitchen_square_relation\nkitchen_square_relation\ntrain_df.KitchenSquare.describe()","7540618a":"house_floors_counts = train_df.HouseFloor.value_counts()\nhouse_floors_counts\n# \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b - \u043d\u0443\u043b\u0438 \u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f","1bb6f549":"# \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438\nhouse_floors = sorted(house_floors_counts[house_floors_counts.values>house_floors_counts.quantile(q=0.25)].index.to_list())\n# \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0443\u044e \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\ndef get_higher_floor(room_floor):\n    house_floor = round(train_df['HouseFloor'].median())\n    for next_house_floor in house_floors:\n        if room_floor <= next_house_floor:\n            house_floor = next_house_floor\n            break\n    return house_floor","59248383":"house_floor_condition = (train_df['HouseFloor'].isna()) \\\n                | (train_df['HouseFloor']<1) \ntrain_df['HouseFloor_mod'] = 0\ntrain_df.loc[house_floor_condition, 'HouseFloor_mod']  = 1\n# \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430 \u0440\u0430\u0432\u0435\u043d 0, \u043c\u0435\u043d\u044f\u0435\u043c \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430 \u043d\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043a \u044d\u0442\u0430\u0436\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\ntrain_df.loc[(train_df['HouseFloor'].isna()) | (train_df['HouseFloor'] == 0), 'HouseFloor'] = train_df['Floor'].apply(get_higher_floor)\n\n# \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u044d\u0442\u0430\u0436\u0438 \u0438\u043b\u0438 \u044d\u0442\u0430\u0436\u0438 = 0 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u044d\u0442\u0430\u0436\u043e\u043c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044e 0.9 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u043e\u0432 \ntrain_df.loc[train_df['HouseFloor'] > MAX_HOUSE_FLOOR, 'HouseFloor_mod']  = 1 \ntrain_df.loc[train_df['HouseFloor'] > MAX_HOUSE_FLOOR, 'HouseFloor'] = train_df['HouseFloor'].quantile(q=0.9)\n\ntrain_df.HouseFloor.describe()\n","9046e498":"train_df.Floor.describe()","ab36ff3a":"max_house_floor = train_df['HouseFloor'].max()\nfloor_condition = (train_df['Floor'].isna()) \\\n                | (train_df['Floor']<1) \\\n                | (train_df['Floor']>max_house_floor)\n\ntrain_df.loc[floor_condition, 'HouseFloor_mod'] = 1\ntrain_df.loc[floor_condition, 'Floor'] = round(train_df['Floor'].median())\n\n# \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u0430 \u0434\u043e\u043c\u0430 - \u043c\u0435\u043d\u044f\u0435\u043c \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0439\ntrain_df.loc[train_df['Floor']>train_df[\"HouseFloor\"], 'HouseFloor_mod']  = 1\ntrain_df.loc[train_df['Floor']>train_df[\"HouseFloor\"], 'HouseFloor'] = train_df['Floor'].apply(get_higher_floor)\ntrain_df.Floor.describe()\n","814b3365":"# \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u0434\u043e\u043c\u0430 \u0438 \u0434\u043e\u043c\u0430 \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a \u043c\u0435\u0434\u0438\u0430\u043d\u0435\ntrain_df.loc[(train_df['HouseYear']>2021) | (train_df['HouseYear']<MIN_HOUSE_YEAR), 'HouseYear'] = train_df['HouseYear'].median()\ntrain_df.HouseYear.sort_values(ascending=False)","5fe4d779":"train_df.Ecology_1.describe()\ntrain_df.Ecology_1.nunique()","1444e484":"# Feature discretization \u0434\u043b\u044f Ecology_1\ntrain_df.Ecology_1.describe()\ntrain_df['Ecology_1_cat'] = 0\ntrain_df.loc[(train_df['Ecology_1'] > 0.01) & (train_df['Ecology_1'] <= 0.1), 'Ecology_1_cat'] = 1  \ntrain_df.loc[(train_df['Ecology_1'] > 0.1) & (train_df['Ecology_1'] <= 0.2), 'Ecology_1_cat'] = 2\ntrain_df.loc[(train_df['Ecology_1'] > 0.2) & (train_df['Ecology_1'] <= 0.3), 'Ecology_1_cat'] = 3\ntrain_df.loc[(train_df['Ecology_1'] > 0.3) & (train_df['Ecology_1'] <= 0.4), 'Ecology_1_cat'] = 4\ntrain_df.loc[train_df['Ecology_1'] > 0.4, 'Ecology_1_cat'] = 5\ntrain_df.Ecology_1_cat.value_counts()","b0cb101f":"train_df.Social_2.describe()","12bca2d2":"train_df.Social_3.describe()","c0bdfabf":"# Healthcare_1\ngrid = sns.jointplot(train_df.loc[train_df['Healthcare_1'].notna(), 'Healthcare_1'], train_df.loc[train_df['Healthcare_1'].notna(),'Price'], kind='reg')\ngrid.fig.set_figwidth(6)\ngrid.fig.set_figheight(6)\n\nplt.show()","df8b63f8":"# \u0434\u043b\u044f \u0440\u0430\u0439\u043e\u043d\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0446\u0435\u043d\u043e\u0432\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438 - \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f, \u0442\u0435\u043c \u043f\u0440\u0435\u0441\u0442\u0438\u0436\u043d\u0435\u0435 \u0440\u0430\u0439\u043e\u043d\ndistrict_price = train_df.groupby(['DistrictId'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'District_rating'})\ndistrict_price['District_rating'] = district_price['District_rating'] \/\/ 50000\nprint(district_price['District_rating'].unique())\ndistrict_price.head(5)","7c1c5e85":"train_df = train_df.merge(district_price, on=['DistrictId'], how='left')\ntrain_df.head()","52744394":"train_df.columns.tolist()","71ddec0c":"feature_names = [\n 'Rooms',\n 'Square',\n 'LifeSquare',\n 'KitchenSquare',\n 'Floor',\n 'HouseFloor',\n 'HouseYear',\n 'Ecology_1',\n 'Social_1',\n#  'Social_2',\n 'Social_3',\n #'Healthcare_1',\n 'Helthcare_2'#,\n #'Shops_1'\n]\n\nnew_feature_names = [ \n 'Ecology_2_A',\n 'Ecology_2_B',\n 'Ecology_3_A',\n 'Ecology_3_B',\n 'Shops_2_A',\n 'Shops_2_B',\n 'Ecology_1_cat',\n 'District_rating',\n 'House_age_rating',\n 'MedPriceBySocial',\n 'MedPriceByShops',\n 'MedPriceByFloor',\n 'MedPriceByHouseFloor'\n]\n\ntarget_name =  'Price'","915c010a":"df_num_features = train_df[feature_names]\n#df_num_features.drop('Price', axis=1, inplace=True)\ndf_num_features.hist(figsize=(16, 16), bins=20, grid=False);","5a67d97f":"train_df.loc[(train_df['Social_1']<train_df['Social_1'].quantile(0.15)) | \\\n              (train_df['Social_1']>train_df['Social_1'].quantile(0.85)), 'Social_1'] = train_df['Social_1'].median() \ntrain_df.loc[(train_df['Social_2']<train_df['Social_2'].quantile(0.15)) | \\\n              (train_df['Social_2']>train_df['Social_2'].quantile(0.85)), 'Social_2'] = train_df['Social_2'].median() \ntrain_df.loc[(train_df['Social_3']<train_df['Social_3'].quantile(0.15)) | \\\n              (train_df['Social_3']>train_df['Social_3'].quantile(0.85)), 'Social_3'] = train_df['Social_3'].median()  \ntrain_df[['Social_1', 'Social_2', 'Social_3']].hist(figsize=(6, 6), bins=10, grid=False);","47f3e47f":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = train_df.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.2] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","658e7de0":"class DataPreprocessing:\n    \n    # \u043f\u0440\u0438\u0439\u043c\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u043f\u043b\u043e\u0436\u0430\u0434\u044c \u0434\u043b\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n    MIN_FLAT_SQUARE = 10\n    MAX_FLAT_SQUARE = 400\n    # \u043f\u0440\u0438\u0439\u043c\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u043f\u043b\u043e\u0436\u0430\u0434\u044c \u0434\u043b\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u044b\n    MAX_ROOMS_SQUARE = 100\n    MIN_ROOMS_SQUARE = 5\n    MAX_ROOMS_QUANTITY = 6\n    MAX_KITCHEN_SQUARE = 50\n    # \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430\u044f \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\n    MAX_HOUSE_FLOOR = 90\n    # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043e\u043c\u0430\n    MIN_HOUSE_YEAR = 1910\n    MAX_HOUSE_YEAR = datetime.now().year\n    \n    \n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.kitchen_square_quantile = None\n        # \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0436\u0438\u043b\u043e\u0439 \u0438 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0435\u0439\n        self.gen_life_square_relation = None\n        self.kitchen_square_relation = None\n        self.social_medprice = None\n        self.social_medprice_median = None\n        self.shops_medprice = None\n        self.shops_medprice_median = None\n        self.floor_medprice = None\n        self.floor_medprice_median = None\n        self.house_floor_medprice = None\n        self.house_floor_medprice_median = None\n        # \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438\n        self.house_floors = None\n        self.district_rating = None\n        self.age_rating = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        \n        self.gen_life_square_relation = self.medians['Square'] \/ self.medians['LifeSquare']\n        \n        self.kitchen_square_relation = (self.medians['Square'] - self.medians['LifeSquare'])\/self.medians['KitchenSquare']\n        \n        house_floors_counts = X.HouseFloor.value_counts()\n        # \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u0442\u0430\u0436\u0435\u0439 \u0434\u043e\u043c\u043e\u0432\n        self.house_floors = sorted(house_floors_counts[house_floors_counts.values>house_floors_counts.quantile(q=0.1)].index.to_list())\n        \n    def fit_target_encoding(self, X, y=None):\n        df = X.copy()\n        if y is not None:\n            df['Price'] = y.values\n            # \u0446\u0435\u043d\u0430 \u0437\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439 \u043c\u0435\u0442\u0440\n            df['m2_price'] = df['Price'] \/ df['Square']\n            \n             # -----------------------------  'District_rating' -----------------------------\n            # \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u0437\u0430 \u043c2 \u043e\u0442 \u0440\u0430\u0439\u043e\u043d\u0430\n            self.district_rating = df.groupby(['DistrictId'], as_index=False).agg({'m2_price':'median'})\\\n                                .rename(columns={'m2_price':'District_rating'})\n            self.district_rating['District_rating'] \/\/= 100\n            self.district_rating['District_rating'].fillna(self.district_rating['District_rating'].median(), inplace=True)\n        \n            # -----------------------------  'House_age_rating' -----------------------------\n            # \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u0437\u0430 \u043c2 \u043e\u0442 \u0433\u043e\u0434\u0430 \u0434\u043e\u043c\u0430\n            self.house_age_rating = df.groupby(['HouseYear'], as_index=False).agg({'m2_price':'median'})\\\n                                .rename(columns={'m2_price':'House_age_rating'})\n            self.house_age_rating['House_age_rating'] \/\/= 100\n            self.house_age_rating['House_age_rating'].fillna(self.house_age_rating['House_age_rating'].median(), inplace=True)\n            \n            # -----------------------------  'MedPriceByFloor' -----------------------------\n            # \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u043e\u0442 \u044d\u0442\u0430\u0436\u0430\n            self.floor_medprice = df.groupby(['Floor'], as_index=False).agg({'m2_price':'median'})\\\n                                  .rename(columns={'m2_price':'MedPriceByFloor'})\n            self.floor_medprice['MedPriceByFloor'] \/\/= 100\n            self.floor_medprice_median = round(self.floor_medprice['MedPriceByFloor'].median())\n            \n            # -----------------------------  'MedPriceByHouseFloor' -----------------------------\n            # \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u043e\u0442 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\n            self.house_floor_medprice = df.groupby(['HouseFloor'], as_index=False).agg({'m2_price':'median'})\\\n                                  .rename(columns={'m2_price':'MedPriceByHouseFloor'})\n            self.house_floor_medprice['MedPriceByHouseFloor'] \/\/= 100\n            self.house_floor_medprice_median = round(self.house_floor_medprice['MedPriceByHouseFloor'].median())\n            \n    \n            # -----------------------------  'MedPrice By Social_1', 'Social_2', 'Social_3' -----------------------------\n            # \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u043e\u0442 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\n            self.social_medprice = df.groupby(['Social_1', 'Social_2', 'Social_3',], as_index=False).agg({'m2_price':'median'})\\\n                                  .rename(columns={'m2_price':'MedPriceBySocial'})\n            self.social_medprice['MedPriceBySocial'] \/\/= 100\n            self.social_medprice_median = self.social_medprice['MedPriceBySocial'].median()\n            \n           \n            # -----------------------------  MedPrice By Shops_1 Shops_2 -----------------------------\n            # \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u043e\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432 \u0438 \u0440\u0430\u0439\u043e\u043d\u0430\n            self.shops_medprice = df.groupby(['Shops_1', 'Shops_2', 'DistrictId'], as_index=False).agg({'m2_price':'median'})\\\n                                  .rename(columns={'m2_price':'MedPriceByShops'})\n            self.shops_medprice['MedPriceByShops'] \/\/= 100\n            self.shops_medprice_median = self.shops_medprice['MedPriceByShops'].median()\n        \n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        \n        # ----------------------------- Square ----------------------------- \n        # \u0432\u044b\u0431\u0440\u043e\u0441\u044b Square \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 LifeSquare\n        square_condition = (X['Square'].isna()) \\\n                        | (X['Square']<self.MIN_FLAT_SQUARE) \\\n                        | (X['Square']>self.MAX_FLAT_SQUARE)\n\n        X['Square_mod'] = 0\n        X.loc[square_condition, 'Square_mod']  = 1\n        X.loc[square_condition, 'Square']  = X['LifeSquare'].apply(self.__get_flat_square)\n        \n        # ----------------------------- LifeSquare -----------------------------\n        # \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 LifeSquare \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 Square\n        life_square_condition = (X['LifeSquare'].isna()) \\\n                     | (X['Square'] < X['LifeSquare']) \\\n                     | (X['LifeSquare'] < self.MIN_FLAT_SQUARE \/ self.gen_life_square_relation)\n        \n        X['LifeSquare_mod'] = 0\n        X.loc[life_square_condition, 'LifeSquare_mod'] = 1\n        X.loc[life_square_condition, 'LifeSquare'] = X['Square'] \/ self.gen_life_square_relation\n\n        # ----------------------------- Rooms -----------------------------\n        # \u0432\u044b\u0431\u0440\u043e\u0441\u044b Rooms \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Square\n        rooms_condition = (X['Rooms'].isna()) \\\n                        | (X['Rooms']<1) \\\n                        | (X['Rooms']>self.MAX_ROOMS_QUANTITY)\n\n        X['Rooms_mod'] = 0\n        X.loc[rooms_condition, 'Rooms_mod']  = 1\n        X.loc[rooms_condition, 'Rooms']  = X['Square'].apply(self.__get_rooms_quantity)\n  \n        # ----------------------------- KitchenSquare -----------------------------\n        # \u0432\u044b\u0431\u0440\u043e\u0441\u044b KitchenSquare \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Square\n        kitchen_square_condition = (X['KitchenSquare'].isna()) \\\n                        | (X['KitchenSquare']<0) \\\n                        | (X['KitchenSquare']>self.MAX_KITCHEN_SQUARE) \\\n                        | (X['KitchenSquare'] > (X['Square'] - X['LifeSquare']))\n\n        X['KitchenSquare_mod'] = 0\n        X.loc[kitchen_square_condition, 'KitchenSquare_mod']  = 1\n        X.loc[kitchen_square_condition, 'KitchenSquare'] = (X['Square'] - X['LifeSquare']).apply(self.__get_kitchen_squre)\n        \n        # ----------------------------- Floor -----------------------------\n        floor_condition = (X['Floor'].isna()) \\\n                        | (X['Floor']<1) \\\n                        | (X['Floor']>self.MAX_HOUSE_FLOOR)\n\n        X.loc[floor_condition, 'Floor_mod'] = 1\n        X.loc[floor_condition, 'Floor'] = X['HouseFloor'].apply(self.__get_floor)\n\n        # \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u0442\u0430\u0436\u0430 \u0434\u043e\u043c\u0430 - \u043c\u0435\u043d\u044f\u0435\u043c \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0439\n        X.loc[X['Floor']>X[\"HouseFloor\"], 'Floor_mod']  = 1\n        X.loc[X['Floor']>X[\"HouseFloor\"], 'HouseFloor'] = X['Floor'].apply(self.__get_higher_floor)\n\n        # ----------------------------- HouseFloor -----------------------------\n        # \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u044d\u0442\u0430\u0436\u0438 \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044e 0.9 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u043e\u0432 \n        X.loc[X['HouseFloor'] > self.MAX_HOUSE_FLOOR, 'HouseFloor_mod']  = 1 \n        X.loc[X['HouseFloor'] > self.MAX_HOUSE_FLOOR, 'HouseFloor'] = X['HouseFloor'].quantile(q=0.9)\n        \n        house_floor_condition = (X['HouseFloor'].isna()) | (X['HouseFloor']<1)\n        X['HouseFloor_mod'] = 0\n        X.loc[house_floor_condition, 'HouseFloor_mod']  = 1\n        # \u0435\u0441\u043b\u0438 \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430 \u0440\u0430\u0432\u0435\u043d 0, \u043c\u0435\u043d\u044f\u0435\u043c \u044d\u0442\u0430\u0436 \u0434\u043e\u043c\u0430 \u043d\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043a \u044d\u0442\u0430\u0436\u0443 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n        X.loc[house_floor_condition, 'HouseFloor'] = X['Floor'].apply(self.__get_higher_floor)\n     \n        # ----------------------------- HouseYear -----------------------------\n        # \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u0434\u043e\u043c\u0430 \u0438 \u0434\u043e\u043c\u0430 \u0438\u0437 \u0431\u0443\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043a \u043c\u0435\u0434\u0438\u0430\u043d\u0435\n        X.loc[(X['HouseYear']>2021) | (X['HouseYear']<MIN_HOUSE_YEAR), 'HouseYear'] = round(self.medians['HouseYear'])\n\n    \n#         # ----------------------------- 'Social_1', 'Social_2', 'Social_3' -----------------------------\n          # ----------------------- \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0443 --------------------\n#         X.loc[(X['Social_1']<X['Social_1'].quantile(0.05)) | \\\n#                       (X['Social_1']>X['Social_1'].quantile(0.95)), 'Social_1'] = X['Social_1'].median() \n#         X.loc[(X['Social_2']<X['Social_2'].quantile(0.05)) | \\\n#                       (X['Social_2']>X['Social_2'].quantile(0.95)), 'Social_2'] = X['Social_2'].median() \n#         X.loc[(X['Social_3']<X['Social_3'].quantile(0.05)) | \\\n#                       (X['Social_3']>X['Social_3'].quantile(0.95)), 'Social_3'] = X['Social_3'].median()  \n            \n        # ----------------------------- Social_1 -----------------------------\n        X.loc[(X['Social_1']<X['Social_1'].quantile(0.05)) | \\\n              (X['Social_1']>X['Social_1'].quantile(0.95)), 'Social_1'] = self.medians['Social_1']  \n            \n        # ----------------------------- Social_3 -----------------------------\n        X.loc[(X['Social_3']<X['Social_3'].quantile(0.05)) | \\\n              (X['Social_3']>X['Social_3'].quantile(0.95)), 'Social_3'] = self.medians['Social_3']  \n        \n        # ----------------------------- Ecology_1 -----------------------------\n        X['Ecology_1_cat'] = 0\n        X.loc[(X['Ecology_1'] > 0.01) & (X['Ecology_1'] <= 0.1), 'Ecology_1_cat'] = 1  \n        X.loc[(X['Ecology_1'] > 0.1) & (X['Ecology_1'] <= 0.2), 'Ecology_1_cat'] = 2\n        X.loc[(X['Ecology_1'] > 0.2) & (X['Ecology_1'] <= 0.3), 'Ecology_1_cat'] = 3\n        X.loc[(X['Ecology_1'] > 0.3) & (X['Ecology_1'] <= 0.4), 'Ecology_1_cat'] = 4\n        X.loc[X['Ecology_1'] > 0.4, 'Ecology_1_cat'] = 5\n        \n      \n        # -----------------------------  Ecology_2 Ecology_3 Shops_2 -----------------------------  \n        obj_features = X.select_dtypes(include='object')\n        X = pd.concat([X, pd.get_dummies(obj_features, columns=obj_features.columns)], axis=1)\n        \n        \n        # -----------------------------  \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0438\u0437 target encoding -----------------------------\n            \n        # ----------------------------- 'MedPriceByHouseFloor' -----------------------------\n        if self.house_floor_medprice is not None:\n            X = X.merge(self.house_floor_medprice, on=['HouseFloor'], how='left')\n            X['MedPriceByHouseFloor'].fillna(self.house_floor_medprice_median, inplace=True)     \n            \n                \n        # ----------------------------- 'MedPriceByFloor' -----------------------------\n        if self.floor_medprice is not None:\n            X = X.merge(self.floor_medprice, on=['Floor'], how='left')\n            X['MedPriceByFloor'].fillna(self.floor_medprice_median, inplace=True)\n                        \n        # ----------------------------- MedPriceByShops -----------------------------\n        if self.shops_medprice is not None:\n            X = X.merge(self.shops_medprice, on=['Shops_1', 'Shops_2', 'DistrictId'], how='left')\n            X['MedPriceByShops'].fillna(self.shops_medprice_median, inplace=True)\n\n        \n        # ----------------------------- District_rating -----------------------------\n        if self.district_rating is not None:\n            X = X.merge(self.district_rating, on=['DistrictId'], how='left')\n            X['District_rating'].fillna(X['District_rating'].mode()[0], inplace=True)\n            \n        # ----------------------------- MedPriceBySocial -----------------------------\n        if self.social_medprice is not None:\n            X = X.merge(self.social_medprice, on=['Social_1', 'Social_2', 'Social_3'], how='left')\n            X['MedPriceBySocial'].fillna(self.social_medprice_median, inplace=True)\n            \n        # ----------------------------- House_age_rating -----------------------------        \n        if self.house_age_rating is not None:\n            X = X.merge(self.house_age_rating, on=['HouseYear'], how='left')\n            X['House_age_rating'].fillna(X['House_age_rating'].mode()[0], inplace=True)\n            \n        # ----------------------------- Healthcare_1 \u0438 Healthcare_2 -----------------------------\n        # \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 Healthcare_1 \u0438 Healthcare_2 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0438\u0437 RandomForestRegressor \n        # \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439\n        rf_model = RandomForestRegressor(random_state=42, criterion='mse')\n        # ----------------------------- Healthcare_1 -----------------------------\n        healthcare_1_condition_full = (X['Healthcare_1']!=0) & (X['Healthcare_1'].notna())\n        healthcare_1_condition_empty = (X['Healthcare_1']==0) | (X['Healthcare_1'].isna())\n        healthcare_1_affect_columns = ['District_rating','HouseFloor','Social_2','HouseYear']\n        \n        rf_model.fit(X.loc[healthcare_1_condition_full, healthcare_1_affect_columns], \\\n                     X.loc[healthcare_1_condition_full, 'Healthcare_1'])\n        y_hc1 = rf_model.predict(X.loc[healthcare_1_condition_empty, healthcare_1_affect_columns])\n        X.loc[healthcare_1_condition_empty,'Healthcare_1'] = np.round(y_hc1)\n        \n        \n        # ----------------------------- Healthcare_2 -----------------------------\n        helthcare_2_condition_full = (X['Helthcare_2']!=0) & (X['Helthcare_2'].notna())\n        helthcare_2_condition_empty = (X['Helthcare_2']==0) | (X['Helthcare_2'].isna())\n        helthcare_2_affect_columns = ['District_rating','Social_1', 'Social_2', 'Social_3','Shops_1'] #]],\n\n        rf_model.fit(X.loc[helthcare_2_condition_full, helthcare_2_affect_columns], X.loc[helthcare_2_condition_full, 'Helthcare_2'])\n        y_hc2 = rf_model.predict(X.loc[helthcare_2_condition_empty, helthcare_2_affect_columns]) \n        X.loc[helthcare_2_condition_empty,'Helthcare_2'] = np.round(y_hc2)\n                \n    \n        # -----------------------------  *fillna* ----------------------------- \n        X.fillna(self.medians, inplace=True)\n        \n        return X\n    \n    def __get_kitchen_squre(self, not_life_square):\n        kitchen_square = self.medians['KitchenSquare']\n        if not_life_square: \n            computed_kitchen_square = not_life_square \/ self.kitchen_square_relation\n            if computed_kitchen_square:\n                kitchen_square = computed_kitchen_square\n        return kitchen_square\n    \n    def __get_rooms_quantity(self, square):\n        rooms = round(self.medians['Rooms'])\n        if square:\n            # \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\n            one_room_squre = self.medians['LifeSquare'] \/ self.medians['Rooms']\n            computed_rooms_quantity = round(square \/\/ one_room_squre)\n            if 0 < computed_rooms_quantity <= self.MAX_ROOMS_QUANTITY:\n                rooms = computed_rooms_quantity\n        return rooms\n    \n    def __get_flat_square(self, life_square):\n        flat_square = self.medians['Square']\n        if life_square: \n            computed_flat_square = life_square * self.gen_life_square_relation\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u043b\u0430 \u0436\u0438\u043b\u0443\u044e\n            if self.MIN_FLAT_SQUARE <= computed_flat_square <= self.MAX_FLAT_SQUARE:\n                flat_square = computed_flat_square\n        return flat_square\n    \n    # \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0443\u044e \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c\n    def __get_higher_floor(self, room_floor):\n        house_floor = round(self.medians['HouseFloor'])\n        for next_house_floor in house_floors:\n            if room_floor <= next_house_floor:\n                house_floor = next_house_floor\n                break\n        return house_floor\n    \n    def __get_floor(self, house_floor):\n        flat_floor = round(self.medians['Floor'])       \n        if 0 < house_floor < self.MAX_HOUSE_FLOOR:\n            flat_floor = random.randint(1, house_floor)\n        return flat_floor\n    \n    ","17512ac9":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=42)","4d62a8dd":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\npreprocessor.fit_target_encoding(X_train, y_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","c6c283cd":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","34f17f8c":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","530d80b3":"X_train.sample(5)","089175f9":"# rf_model = RandomForestRegressor(random_state=42, criterion='mse')\n# rf_model.fit(X_train, y_train)","5ae1f523":"# y_train_preds = rf_model.predict(X_train)\n# y_test_preds = rf_model.predict(X_valid)\n\n# evaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","6c22e5a4":"# submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\n# predictions = rf_model.predict(test_df)\n# submit['Price'] = predictions\n# submit.to_csv('rf_submit.csv', index=False)","4b01dcbc":"# feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n#                                    columns=['feature_name', 'importance'])\n\n# feature_importances.sort_values(by='importance', ascending=False)","382ea499":"gb_model = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=4,\n                                     min_samples_leaf=5,\n                                     random_state=42,  \n                                     n_estimators=100)\ngb_model.fit(X_train, y_train)\n\ny_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","16f9cb8f":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\npredictions = gb_model.predict(test_df)\nsubmit['Price'] = predictions\nsubmit.to_csv('gb_submit.csv', index=False)","d1bd4308":"feature_importances = pd.DataFrame(zip(X_train.columns, gb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","4624f2c9":"# params = {'n_estimators':[100,150, 200, 300, 400], \n#           'max_depth':[2,3, 4, 5, 6],\n#           'min_samples_leaf':[2,3,4,5,6]}\n\n# gs = GridSearchCV(gb_model, params, \n#                   scoring='r2', # \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \n#                   cv=KFold(n_splits=5,   # k (\u043a\u043e\u043b-\u0432\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439\/\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439) \u0432 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n#                            random_state=42, \n#                            shuffle=True),\n#                   n_jobs=-1\n#                   )\n# gs.fit(X_train, y_train)\n# res = pd.DataFrame(gs.cv_results_)\n# res.sort_values(by='mean_test_score', ascending=False).head(10)","9e050ed5":"*Social_3 \u044f\u0432\u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0441. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c.\u0422\u0430\u043a\u0436\u0435 \u0443\u0431\u0435\u0440\u0451\u043c \u0432\u044b\u0440\u043e\u0441\u044b \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 Social*","655c54a0":"*\u041e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0430\u044f, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f - \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043d\u044b\u0439 \u0432\u044b\u0431\u0440\u043e\u0441.*","12e50746":"*\u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 Shops_2 \u0442\u0430\u043a\u0436\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0440\u0430\u0432\u0434\u043e\u043f\u043e\u0434\u043e\u0431\u043d\u043e*","aab14f23":"**HouseFloor**","0e3e87d4":"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b, \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","fd27f239":"**HouseYear**","3d3102de":"**Ecology_3**","7fbb25fc":"**Ecology_1**","b5954b43":"*\u043a\u0440\u0430\u0439\u043d\u0435\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u044b \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0446\u0435\u043d\n\u043e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u0446\u0435\u043d\u044b \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043a\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0441 \u043d\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u043e\u0439*","28b68b0f":"# **EDA**","7e905a15":"**Shops_2**","f44a8634":"*\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 Ecology_2, \u0441\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443, \u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043d\u0435 \u043d\u0443\u0436\u0434\u0430\u044e\u0442\u0441\u044f*","f64a45e3":"**\u0412\u044b\u0440\u0430\u0437\u0438\u043c \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 Feature encoding**","accc6f35":"*\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 Ecology_3 \u0442\u0430\u043a\u0436\u0435 \u0432 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043d\u0435 \u043d\u0443\u0436\u0434\u0430\u044e\u0442\u0441\u044f*","b9daa81f":"*\u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e*","59deb40c":"**Floor**","7d166c0b":"*\u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u0443\u0447\u0435\u0441\u0442\u044c \u0432 \u043c\u043e\u0434\u0435\u043b\u0438*","47670a03":"**Ecology_2**","ae4c7453":"*\u0421\u0443\u0434\u044f \u043f\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0435\u043c\u043d\u043e\u0433\u043e, \u0438 \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0441\u0432\u043e\u0439\u0441\u0442\u0432:*","62f59575":"**Rooms**","be0dd414":"*\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:*","fe4d3a7e":"*\u043e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0438\u0441\u044c*","32692851":"*\u0435\u0449\u0451 \u0440\u0430\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430*","dd5215c1":"**-----------------------------------\u0412\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438-----------------------------------**","604f8b75":"*\u0443 Healthcare_1 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u043a\u0430\u0437\u044b\u0432\u0432\u0430\u0435\u0442 \u043b\u0438 \u043e\u043d \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043d\u0443*","9c5863d5":"**KitchenSquare**","ef2afffa":"**LifeSquare**","7a4ee707":"*\u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b*","0234aa09":"# \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445","79350f25":"*\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 - 1*","a9d79330":"**-----------------------------------\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445-----------------------------------**","2f206d39":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f**","5df01c49":"**Square**"}}