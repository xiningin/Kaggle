{"cell_type":{"5ee5976a":"code","8361e255":"code","dca822c6":"code","a71b6b0b":"code","38714ed7":"code","495cb817":"code","0e89d1b6":"code","21c5893c":"code","9c918b21":"code","7d47995b":"code","ccd508a2":"code","2c0eb647":"code","dccddc54":"code","cf12a31e":"code","99e73391":"code","21f1c562":"code","2782a994":"code","5d8622e8":"code","698349ec":"code","5e3cdebe":"code","5d5eda84":"code","01126293":"code","ceee47f3":"code","9e353293":"code","4f8d3bae":"code","0f2b5fbf":"code","94ebfd14":"code","788147af":"code","0e9330ea":"code","e9ee97e8":"code","6cb192ea":"code","890b9c42":"code","845f775b":"code","30d8a847":"code","8c5fe19f":"code","c21d15ac":"code","60c6f263":"code","35804edd":"code","f9e24b0e":"code","6aba379f":"code","c123faad":"code","266e6aa5":"code","ef69b594":"code","8d56eac0":"code","ea262a4c":"code","c3df8074":"code","42fca462":"code","3b748c6f":"code","66f43ffd":"code","5adb820f":"code","d3264f25":"code","40ae19e7":"code","4bab5a47":"code","c9cf7f51":"code","c3f5e377":"markdown","2abf63cb":"markdown","e82ca0aa":"markdown","c5989d70":"markdown","8fb22991":"markdown","b6b7e0fe":"markdown","d65ed0e4":"markdown","84967e81":"markdown","50e225ff":"markdown","3d6ddb6c":"markdown","0f40d0b5":"markdown","47295039":"markdown","4f914263":"markdown","589fbc86":"markdown","a4a9469c":"markdown","41174e3d":"markdown","767e8f48":"markdown","eb4a09d8":"markdown","f960edf5":"markdown","243638b2":"markdown","dd65300f":"markdown","785f02dd":"markdown","87097303":"markdown","68a6c790":"markdown","194bf0e0":"markdown","7fac4ae2":"markdown","d68a154a":"markdown","228866fd":"markdown","6b1dd951":"markdown","6d4dd6ec":"markdown","57c3dbf9":"markdown","68887451":"markdown","dee7db74":"markdown","ac8b9aa0":"markdown","0b873af4":"markdown","5359bdad":"markdown","ab7c57dc":"markdown","f3cd7797":"markdown","a59e9e17":"markdown","d86a26da":"markdown","ec44612d":"markdown","268b89d1":"markdown","21f748bb":"markdown","18e494a3":"markdown","5f5cde6f":"markdown"},"source":{"5ee5976a":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, mean_squared_error, r2_score, roc_auc_score, roc_curve, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","8361e255":"df1 = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\ndf = df1.copy()","dca822c6":"df.head()","a71b6b0b":"df.shape","38714ed7":"df.info()","495cb817":"df.columns","0e89d1b6":"df.index","21c5893c":"df.describe().T","9c918b21":"sns.pairplot(df[['Age','Pregnancies','Insulin','BMI','SkinThickness','Glucose']])\nplt.show()","7d47995b":"more_cat_cols = [col for col in df.columns if len(df[col].unique()) < 10]\nprint('Number of Categorical Variable : ', len(more_cat_cols))\nprint(more_cat_cols)","ccd508a2":"sns.countplot(x=\"Outcome\", data=df)\nplt.show()","2c0eb647":"df.describe().T","dccddc54":"df.describe([0.05, 0.10, 0.25, 0.50, 0.75, 0.80, 0.90, 0.95, 0.99]).T","cf12a31e":"num_cols = [col for col in df.columns if df[col].dtypes != 'O']\nprint('Number of numerical variables: ', len(num_cols))","99e73391":"num_cols","21f1c562":"def hist_for_nums(data, numeric_cols):\n    col_counter = 0\n    data = data.copy()\n    for col in numeric_cols:\n        data[col].hist(bins=20)\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()\n        col_counter += 1\n    print(col_counter, \"variables have been plotted\")","2782a994":"hist_for_nums(df, num_cols)","5d8622e8":"df[\"Outcome\"].value_counts()","698349ec":"fig1, ax1 = plt.subplots()\nax1.pie(df[\"Outcome\"].value_counts(),  labels=['healthy','diabetic'], autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.show()","5e3cdebe":"df.corr()\na = df.corr()['Outcome'].sort_values(ascending=False)\nprint(a)","5d5eda84":"corrmat = df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat,vmin = 0,vmax=1,square=True,cmap=\"YlGnBu\",ax=ax)\nplt.show()\n\"\"\" there is no multicollinearity among the independent variables \"\"\"","01126293":"df.isnull().values.any()","ceee47f3":"df.isnull().sum()","9e353293":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness',\n                                                                      'Insulin','BMI']].replace(0,np.NaN)","4f8d3bae":"df.isnull().sum()","0f2b5fbf":"new_nan_values =[\"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\"]","94ebfd14":"df[\"Glucose\"].describe().T","788147af":"def median_dependent(var):\n    temp = df[df[var].notnull()]\n    temp = df[[var, 'Outcome']].groupby(['Outcome'])[[var]].median().reset_index()\n    return temp","0e9330ea":"median_dependent(\"Glucose\")","e9ee97e8":"df.loc[(df['Outcome'] == 0 ) & (df['Glucose'].isnull()), 'Glucose'] = 107\ndf.loc[(df['Outcome'] == 1 ) & (df['Glucose'].isnull()), 'Glucose'] = 140","6cb192ea":"median_dependent(\"BloodPressure\")","890b9c42":"df.loc[(df['Outcome'] == 0 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = 70\ndf.loc[(df['Outcome'] == 1 ) & (df['BloodPressure'].isnull()), 'BloodPressure'] = 74.5","845f775b":"median_dependent(\"SkinThickness\")","30d8a847":"df.loc[(df['Outcome'] == 0 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = 27\ndf.loc[(df['Outcome'] == 1 ) & (df['SkinThickness'].isnull()), 'SkinThickness'] = 32","8c5fe19f":"median_dependent(\"Insulin\")","c21d15ac":"df.loc[(df['Outcome'] == 0 ) & (df['Insulin'].isnull()), 'Insulin'] = 102.5\ndf.loc[(df['Outcome'] == 1 ) & (df['Insulin'].isnull()), 'Insulin'] = 169.5","60c6f263":"median_dependent(\"BMI\")","35804edd":"df.loc[(df['Outcome'] == 0 ) & (df['BMI'].isnull()), 'BMI'] = 30.1\ndf.loc[(df['Outcome'] == 1 ) & (df['BMI'].isnull()), 'BMI'] = 34.3","f9e24b0e":"df.isnull().sum()","6aba379f":"\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.05)\n    quartile3 = dataframe[variable].quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\n\ndef has_outliers(dataframe, num_col_names, plot=False):\n    variable_names = []\n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n            print(col, \":\", number_of_outliers)\n            variable_names.append(col)\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n    return variable_names","c123faad":"has_outliers(df, num_cols)","266e6aa5":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\n\nfor col in num_cols:\n    replace_with_thresholds(df, col)","ef69b594":"has_outliers(df, num_cols)","8d56eac0":"like_num = [col for col in df.columns if df[col].dtypes != 'O' and len(df[col].value_counts()) < 10]\n\ncols_need_scale = [col for col in df.columns if col not in \"Outcome\"\n                   and col not in like_num]\n","ea262a4c":"hist_for_nums(df, cols_need_scale)","c3df8074":"def robust_scaler(variable):\n    var_median = variable.median()\n    quartile1 = variable.quantile(0.25)\n    quartile3 = variable.quantile(0.75)\n    interquantile_range = quartile3 - quartile1\n\n    if int(interquantile_range) == 0:\n        quartile1 = variable.quantile(0.05)\n        quartile3 = variable.quantile(0.95)\n        interquantile_range = quartile3 - quartile1\n        z = (variable - var_median) \/ interquantile_range\n        return round(z, 3)\n    else:\n        z = (variable - var_median) \/ interquantile_range\n    return round(z, 3)\n","42fca462":"for col in cols_need_scale:\n    df[col] = robust_scaler(df[col])","3b748c6f":"df[cols_need_scale].describe().T","66f43ffd":"hist_for_nums(df, cols_need_scale)","5adb820f":"has_outliers(df, num_cols)","d3264f25":"models = []\n\nmodels.append((\"LR\", LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('SVR', SVC()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('RandomForests', RandomForestClassifier()))\nmodels.append(('GradientBoosting', GradientBoostingClassifier()))\nmodels.append(('XGBoost', XGBClassifier()))\nmodels.append(('Light GBM', LGBMClassifier()))","40ae19e7":"X = df.drop('Outcome', axis=1)\ny = df[[\"Outcome\"]]\n","4bab5a47":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","c9cf7f51":"for name,model in models:\n    mod = model.fit(X_train,y_train)\n    y_pred = mod.predict(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    cvscore = cross_val_score(model, X,y, cv = 10).mean()\n    print(\"Holdout Method:\",end=\" \")\n    print(name,acc)\n    print(\"Cross Val Score\",end=\" \")\n    print(name,cvscore)\n    print(\"*********************************************\")","c3f5e377":"Blood Pressure: The median for healthy people (70.0), for those with diabetes (74.5)","2abf63cb":"This dataset  is obtained from the National Institute of Diabetes and Digestive and Kidney Diseases. \nThe sample size is 768.  In this dataset , there is one dependent variable (outcome- 0:Non-Diab,1: Diab) and \neight independent or predictor variables (Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI,\nDiabetesPedigreeFunction, and Age).","e82ca0aa":"# 3. ANALYSIS of CATEGORICAL VARIABLE","c5989d70":"# 8. MODELLING","8fb22991":"The suppression approach can be a good method if we are not sure that the outlier observations are outliers or\n if we want to consider the outliers in our data.","b6b7e0fe":"As seen from the values above, there is an imbalance between the classes of the dependent variable.\n That is, the number of diabetic is 268 while the number of patients with non-diabetes is 500.","d65ed0e4":"![](http:\/\/)![image.png](attachment:image.png)\nSource:https:\/\/medshadow.org\/diabetes-medications\/","84967e81":"The pairplot is visualized by using the seaborn library. Each variable has been compared with another variable.","50e225ff":"For outlier treatment, the interquartile range (IQR)  method are used to detect outliers.  This is done in \nfollowing steps:First, calculate IQR value for the data; Second, multiply IQR by 1.5 ; Third, add 1.5 x (IQR) to \nthe third quartile; Fourth  subtract 1.5 x (IQR) from the first quartile.","3d6ddb6c":"# 6. ANALYSIS of NUMERICAL VARIABLE","0f40d0b5":"All variables are scaled with RobustScaler, except for the classified variable \"Outcome\".","47295039":"# 5. ANALYSIS of DEPENDENT VARIABLE (TARGET ANALYSIS)","4f914263":"# 2. UNDERSTANDING THE DATA-SET","589fbc86":"BMI (Body Mass Index): The median for healthy people (30.1), for those with diabetes (34.3)","a4a9469c":"Here, this code block shows the number of NaN values.","41174e3d":"**6.1. Missing Values**","767e8f48":"Insulin: The median for healthy people (102.5), for those with diabetes (169.5)","eb4a09d8":"**Now the accuracy rates are as follows:**","f960edf5":"What are the names of the numeric variables?","243638b2":"**6.2. Outlier Treatment**","dd65300f":"The primary aim of this study is to predict whether or not a patient has diabetes accurately based on the dataset.","785f02dd":"# 7. VARIABLE SCALING","87097303":"Missing values no longer appear after filling the NaN (blank data) values with the medians of the variables","68a6c790":"**Load Data**","194bf0e0":"**Correlation of variables with Heatmap**","7fac4ae2":"**Data Summary**","d68a154a":"The description of  variables in this data as follows:\n* Pregnancies: Number of times pregnant\n* Glucose: Glucose \n* BloodPressure: Blood pressure\n* SkinThickness: Triceps skin fold thickness (mm)\n* Insulin: Insulin\n* BMI: Body mass index (weight in kg\/(height in m)^2)\n* DiabetesPedigreeFunction: A function which scores likelihood of diabetes based on family history.\n* Age: Age (years)\n* Outcome: Class variable (0 or 1)","228866fd":"# 4. ANALYSIS of NUMERICAL VARIABLE","6b1dd951":"**Correlation Matrix**","6d4dd6ec":"# 1. IMPORT SOME NECESSARY LIBRARIES","57c3dbf9":"When the data set is examined; It was observed that some values of Glucose, BloodPressure, SkinThickness,\nInsulin and BMI variables were 0. If such values are 0 in a person, it is against the life cycle. So. \nThe glucose ratio, blood pressure, skin thickness, insulin and body mass index of a living person cannot be 0.\nTherefore, the value of o in these variables doesnt make sense and and this indicates missing value. \n0 values should be replaced by NaN \nIn this context, values should be shown as NaN, meaning empty instead of 0.","68887451":"Checking  missing value","dee7db74":"# **Objective**","ac8b9aa0":"There is no missing value in data set.","0b873af4":"Now, there are two solutions for NaN replacing 0 values. The first is to delete them, that is, to remove them \nfrom the data set. The second is to fill in this blank data. The first way is not used. Because the number of data \nis very low. Therefore, the second way will be used as a solution.","5359bdad":"# 6. DATA PREPROCESSING & FEATURE ENGINEERING","ab7c57dc":"Regarding these variables, all 0 values are encoded with NaN value.","f3cd7797":"Finding the number of values in the target column","a59e9e17":"You can access the entire work on my Github account. You can also contact me on [LinkedIn](http:\/\/www.linkedin.com\/in\/idris-g\u00fc\u00e7l\u00fc-ba578196\n).\nI'm eager to hear any feedback from you.","d86a26da":"There are many types of variable scaling. Here, RobustScaler type suitable for the data set is used.\nRobustScaler: robust measure is a powerful statistic that measures the statistical distribution over a range\n of numerical data.","ec44612d":"Glucose: The median for healthy people (107.0), for those with diabetes (140.0)","268b89d1":"Displaying Categorical Variables with Column Graph","21f748bb":"How many numeric variables are in the data set?","18e494a3":"Visualization of numeric variables","5f5cde6f":"Skin Thickness: The median for healthy people (27.0), for those with diabetes (32.0)"}}