{"cell_type":{"0398a590":"code","92f0d30a":"code","c07948c1":"code","bc478023":"code","d106716a":"code","d82cf8d8":"code","5e5d68f6":"code","124fd5a4":"code","23f91301":"code","d581f097":"code","55ebbb37":"code","febfa096":"code","fb0ebd2e":"code","7fbbc91e":"code","b539f388":"code","f235d792":"markdown","c7c8444c":"markdown","91177afe":"markdown","cb65e02d":"markdown","edefa0c9":"markdown","b3f6fa32":"markdown","08e4d2e9":"markdown","3d81b54a":"markdown"},"source":{"0398a590":"pip install mygene","92f0d30a":"import mygene\n\nmg = mygene.MyGeneInfo()\ng = mg.getgene('ENSG00000000003') # return info on ensemble gene with id 'ENSG00000000003'\nprint(type(g )) # dictionary\nprint(len(g.keys() ))  # 37\nprint((g.keys() ))  \n\nprint()\nprint( str(g)[:2000])","c07948c1":"len(g.keys()), g.keys()","bc478023":"list1 = ['symbol',   'name', 'entrezgene', 'alias', 'other_names' ,   'type_of_gene', 'map_location' ] \n\nfor k in list1:\n    print(k, '  --  ', g[k])","d106716a":"g['ensembl']['gene']","d82cf8d8":"g['summary']","5e5d68f6":"g = mg.getgene('ENSG00000000003',  field = 'symbol')# , 'symbol' ] )# fields= 'entrezgene, symbol') \ng.keys()","124fd5a4":"# In this - does not restrict returned fields: \ng = mg.getgene('ENSG00000000003',  fields = ['name','entrezgene', 'symbol'] )# , 'symbol' ] )# fields= 'entrezgene, symbol') \ng.keys()","23f91301":"g = mg.getgene(1017)# query by Entrez id\nprint(g[ 'entrezgene']) # same as input \nprint()\nprint( g.keys() )\n","d581f097":"g = mg.getgenes([1017,1018,'ENSG00000148795'])\n\nprint(len(g))\nfor k in g:\n    print(k['entrezgene'], k[ 'ensembl']['gene'])\n    print(k.keys())\n    print()","55ebbb37":"mg.query('symbol:cdk2', species='human')","febfa096":"mg.query('symbol:cdk2*', species='human')","fb0ebd2e":"mg.query('reporter:1000_at')","7fbbc91e":"g = mg.getgene('ENSG00000000003') # ,  fields = ['name','entrezgene', 'symbol'] )# , 'symbol' ] )# fields= 'entrezgene, symbol') \ng.keys()","b539f388":"g","f235d792":"# Quering by several id","c7c8444c":"# Query with symbol (exactly or partially known)","91177afe":"# Other query example ","cb65e02d":"### couple points to pay attention:\n\nFor ensembl  gene id - one should delete postfix \".XX\" when passing as an input:\ne.g. ENSG00000000003.14 ->\tENSG00000000003\ng = mg.getgene('ENSG00000000003') - Okay, g = mg.getgene('ENSG00000000003.14') - returns nothing\n\n\nIt seems restriction parameter \"fields\" does not work properly, engine often returns full result, not restricted to fields \n(see example below).\n","edefa0c9":"# Use examples with Entrez gene id ","b3f6fa32":"# Full output","08e4d2e9":"# What is about ?\n\n\nQuickstart notebook for MYGENE python package.\nIt allows to access various information on genes from their id(s) (there several id\/naming conventions for genes).\n\nSee docs here: \nhttps:\/\/pypi.org\/project\/mygene\/#description\n\nPython package provides interface to web site: https:\/\/mygene.info\/demo\/\n\n\nIn the simple way one can query by Entrez or Ensembl Id,\nmore complicated way allows to query by different even partially known information. \n\n\n\n### Remark, other package - PyEntrezId - seems does not work on kaggle\n\nwe tried PyEntrezId, it installs Okay on kaggle, but does not work, since cannot find the main submodule \"Conversion\"\n\n\nPS\n\nComprehensive information on gens can be also found in https:\/\/www.gencodegenes.org\/human\/\nbut it is in GTF GFF3 files, which one need to process. While MYGENE provides ready to use Python interface.\n","3d81b54a":"# Use examples with Ensembl gene id "}}