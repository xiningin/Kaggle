{"cell_type":{"5ffa78d6":"code","7374137f":"code","163ecc2c":"code","1abcabd0":"code","0fd953a3":"code","de494e48":"code","e78dc24b":"code","49b7c3cc":"code","6f867a96":"code","bf3a96ed":"code","b27da2a6":"code","892e849a":"code","0529bec6":"code","a7ffddcb":"code","b30ea87a":"code","b04b2e98":"code","0b600965":"code","600a5389":"code","2df05630":"code","0b9ccad1":"code","6b198844":"code","7f79622a":"code","17724607":"code","adc2ede3":"code","fddb0f55":"code","09f4e307":"code","33d2ae20":"code","c03a634e":"code","79e45a1a":"code","fe06353a":"code","e7c1e969":"code","fc52beba":"code","1ac541a4":"code","7aa73fe8":"code","d1327d33":"code","1a6433ed":"code","c508d3e9":"code","5117908e":"markdown","25b85040":"markdown","0a645258":"markdown","bc640768":"markdown","380f50fc":"markdown","bb8a035b":"markdown","13df2034":"markdown","033638d7":"markdown","246efff8":"markdown","7485afc1":"markdown","66f53a74":"markdown","79811c10":"markdown","ad2773e7":"markdown","9fa80475":"markdown","984894ab":"markdown","fa213115":"markdown","9253e61f":"markdown","55893dc8":"markdown","ceb617df":"markdown","b2471d3f":"markdown","cb509c8c":"markdown","80676ef9":"markdown","caacdc32":"markdown","756525c4":"markdown","a437e0eb":"markdown","66c97155":"markdown","cefd6aea":"markdown","def94dba":"markdown","d7c2e4ba":"markdown","33b9045e":"markdown","c7c22f53":"markdown","713abf63":"markdown","fe0db1a5":"markdown","e3427b86":"markdown","0489826a":"markdown","73dce6ed":"markdown","40af823d":"markdown","f90ae9cd":"markdown","1e1294d5":"markdown"},"source":{"5ffa78d6":"# import stuff \nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nfrom PIL import Image\nfrom IPython.display import Image, display\nimport os\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.datasets import load_files\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow_hub as hub\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.optimizers import Adam, RMSprop, SGD\nfrom tensorflow.keras.applications import ResNet50, VGG16, VGG19, MobileNetV2\nfrom tensorflow.keras.applications.resnet50 import preprocess_input as prepro_res50\nfrom tensorflow.keras.applications.vgg19 import preprocess_input as prepro_vgg19\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, Dense, Flatten, GlobalAveragePooling2D, BatchNormalization, Dropout, MaxPool2D, MaxPooling2D","7374137f":"# load the backend\nfrom keras import backend as K\n\n# prevent Tensorflow memory leakage\nK.clear_session()","163ecc2c":"print(os.listdir('..\/input\/'))","1abcabd0":"# Let's implement it  \ninput_shape = (224, 224, 3)\n\nmy_VGG16 = Sequential([Conv2D(64, (3, 3), input_shape=input_shape, padding='same', activation='relu'), \n                       Conv2D(64, (3, 3), activation='relu', padding='same'), \n                       MaxPooling2D(pool_size=(2, 2), strides=(2, 2)), \n                       Conv2D(128, (3, 3), activation='relu', padding='same'), \n                       Conv2D(128, (3, 3), activation='relu', padding='same'), \n                       MaxPooling2D(pool_size=(2, 2), strides=(2, 2)), \n                       Conv2D(256, (3, 3), activation='relu', padding='same'),  \n                       Conv2D(256, (3, 3), activation='relu', padding='same'), \n                       Conv2D(256, (3, 3), activation='relu', padding='same'),  \n                       MaxPooling2D(pool_size=(2, 2), strides=(2, 2)), \n                       Conv2D(512, (3, 3), activation='relu', padding='same'), \n                       Conv2D(512, (3, 3), activation='relu', padding='same'),  \n                       Conv2D(512, (3, 3), activation='relu', padding='same'),  \n                       MaxPooling2D(pool_size=(2, 2), strides=(2, 2)), \n                       Conv2D(512, (3, 3), activation='relu', padding='same'), \n                       Conv2D(512, (3, 3), activation='relu', padding='same'), \n                       Conv2D(512, (3, 3), activation='relu', padding='same'), \n                       MaxPooling2D(pool_size=(2, 2), strides=(2, 2)), \n                       Flatten(),                          # Convert 3D matrices into 1D vector\n                       Dense(4096, activation='relu'),     # Add Fully-connected layers\n                       Dense(4096, activation='relu'), \n                       Dense(1000, activation='softmax')   # Final Fully-connected layer for predictions\n                      ])\n\nmy_VGG16.summary()","0fd953a3":"path_data = '..\/input\/flowers-recognition\/flowers\/flowers\/'\nprint(os.listdir(path_data))","de494e48":"from os.path import join\n\nimg_folders = [join(path_data, folder) for folder in os.listdir(path_data)]\nlist(img_folders)","e78dc24b":"data_dir = '..\/input\/flowers-recognition\/flowers\/flowers\/'\n\ndata = load_files(data_dir, random_state=28, shuffle=True)\nX = np.array(data['filenames'])    # files location of each flower\ny = np.array(data['target'])       # target label of each flower\nlabels = np.array(data['target_names'])\n\n# remove eventual .pyc or .py files\npyc_file = (np.where(file==X) for file in X if file.endswith(('.pyc','.py')))\nfor pos in pyc_file:\n    X = np.delete(X, pos)\n    y = np.delete(y, pos)\n    \nprint(f'Data files - {X}')\nprint(f'Target labels - {y}')   # numbers are corresponding to class label, \n                               # we have to change them to a vector of 5 elements\nprint(f'Name labels - {labels}')\nprint(f'Number of training files : {X.shape[0]}')","49b7c3cc":"# Flower species number\ndf = pd.DataFrame({'species': y})\nprint(df.shape)\ndf.head()","6f867a96":"# associate names to species number\ndf['flower'] = df['species'].astype('category')\ndf['flower'].cat.categories = labels\ndf.head()","bf3a96ed":"fig, ax = plt.subplots()\nax = sns.countplot(x=\"flower\", data=df)\nax.set(ylabel='Count', title='Flower species distribution')\nax.tick_params(axis='x', rotation=15)","b27da2a6":"image_size = 224     # standard value for Transfer learning usecase (MobileNet, ResNet50, VGG16, VGG19)\n\ndef read_and_prep_images(img_paths, img_height=image_size, img_width=image_size):\n    imgs = [load_img(img_path, target_size=(img_height, img_width)) for img_path in img_paths]   # load image\n    img_array = np.array([img_to_array(img) for img in imgs])   # image to array \n    return(img_array)\n\nX = np.array(read_and_prep_images(X))\nprint(X.shape)  # (4323, 224, 224, 3) = (num_images, height_size, width_size, depth=RGB)","892e849a":"# Let's have a look at 6 randomly picked flowers.","0529bec6":"N = 18  # flowers to display\nfig, axes = plt.subplots(3, 6, figsize=(16,6))\nfor ax, j in zip(axes.flat, np.random.randint(0, len(X), N)):    \n    ax.imshow(X[j].astype(np.uint8))\n    ax.set(title=f'Flower: {labels[y[j]]}', xticks=[], yticks=[])\nfig.tight_layout()","a7ffddcb":"num_classes = len(np.unique(y))\nprint(f'Number of classes: {num_classes} --> {labels}')","b30ea87a":"y = to_categorical(y, num_classes)\nprint(y.shape)","b04b2e98":"#train, validation and test from the train dataset\nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, shuffle=True, \n                                                test_size=0.25, random_state=28)\n\nXval, Xtest, yval, ytest = train_test_split(Xtest, ytest, test_size=0.5,\n                                            shuffle=True, random_state=28)\nprint(f'Train dataset: {Xtrain.shape[0]}')\nprint(f'Validation dataset: {Xval.shape[0]}')\nprint(f'Test dataset: {Xtest.shape[0]}')","0b600965":"# release memory\ndel X","600a5389":"del y","2df05630":"# Load the VGG19 model without the final layers (include_top=False)\nimg_shape = (image_size, image_size, 3)\n\nprint('Loading MobileNetV2 ...')\nbase_model = MobileNetV2(input_shape=img_shape,\n                   include_top=False,\n                   weights='imagenet')\nprint('MobileNetV2 loaded')\n\nbase_model.trainable = False\n    \n#base_model.summary()","0b9ccad1":"base_model.output_shape","6b198844":"model = Sequential([base_model,\n                    GlobalAveragePooling2D(), \n                    Dense(num_classes, activation='softmax')\n                   ])\nmodel.summary()","7f79622a":"# callbacks \nweight_path = '{}_best_weights.hdf5'.format('flower')\ncheckpointer = ModelCheckpoint(weight_path,\n                               monitor='val_accuracy',\n                               verbose=1, \n                               save_best_only=True,\n                               mode='auto',\n                               save_weights_only=True)\n\n# set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.7, \n                                            min_lr=0.00001)\n    \n# early stop if not improvement of accuracy after 5 epochs\nearly = EarlyStopping(patience=6, \n                      verbose=1) \n    \ncallbacks = [checkpointer, learning_rate_reduction] #, early]\n\n# Optimizer\nopt = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\n    \n# Compilation\nmodel.compile(optimizer=opt, \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","17724607":"image_size = 224\nbatch_size = 32\npath = '..\/input\/flowers-recognition\/flowers\/flowers\/'\n\n#train_gen = train_aug.flow(Xtrain, ytrain, batch_size=batch_size)\n# The validation data must not have data augmentation\n#valid_gen = valid_no_aug.flow(Xval, yval, batch_size=batch_size)\n\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255,           # rescale pixel values [0,255] to [0,1]\n        horizontal_flip=True,     # random horizontal flip\n        width_shift_range=0.2,    # random shift images horizontally (fraction of total width)\n        height_shift_range=0.2,   # random shift images vertically (fraction of total height)\n        zoom_range=0.2)           # random zoom image\n        #rotation_range=20,       # random rotation\n        #shear_range=0.2)         # shear transfo\n        #validation_split=0.2)    # splitting train \/ test datasets\n\ntest_datagen = ImageDataGenerator(\n        rescale=1.\/255)\n        #validation_split=0.2)\n\ntrain_gen = train_datagen.flow(\n        Xtrain, ytrain, \n        batch_size=batch_size,\n        shuffle=False)              # already applied\n\nvalid_gen = test_datagen.flow(\n        Xval, yval,\n        batch_size=batch_size,\n        shuffle=False)   ","adc2ede3":"batch_size = 32\nepochs_0 = 40\nsteps_per_epoch = len(train_gen.x) \/\/ train_gen.batch_size\nvalidation_steps = len(valid_gen.x) \/\/ valid_gen.batch_size\n\nhistory = model.fit(\n    train_gen,\n    steps_per_epoch=len(Xtrain) \/\/ batch_size,   # or batch_size=32\n    epochs=epochs_0 ,\n    validation_data=valid_gen,\n    validation_steps=len(Xval) \/\/ batch_size,\n    callbacks=callbacks)","fddb0f55":"def plot_history(history, loss_max=5):\n    \"\"\"\n    Check loss and accuracy evolution.\n    \"\"\"\n    \n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n\n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(14, 4))\n    ax1.plot(acc, label='Training')\n    ax1.plot(val_acc, label='Validation')\n    ax1.legend(loc='lower right')\n    ax1.set(ylabel='Accuracy', title='Training - Validation Accuracy', \n            ylim=([min(plt.ylim()),1]))\n\n    ax2.plot(loss, label='Training')\n    ax2.plot(val_loss, label='Validation')\n    ax2.legend(loc='upper right')\n    ax2.set(ylabel='Loss (cross entropy)', xlabel='epochs',\n           title='Training - Validation Loss', ylim=([0, loss_max]))\n    plt.show()","09f4e307":"plot_history(history, loss_max=1)","33d2ae20":"# Generator for test dataset\ndatagen = ImageDataGenerator(\n        rescale=1.\/255)\n\neval_datagen = datagen.flow(\n        Xtest, ytest,\n        batch_size=batch_size,\n        shuffle=False)      # since shuffle was already during splitting into train, valid, test\n\n# Evaluation on the test dataset\nloss, acc = model.evaluate_generator(eval_datagen, verbose=0)\nprint(f'Test loss: {loss:.2f}')\nprint(f'Test accuracy: {acc*100:.2f}%')","c03a634e":"base_model.trainable = True\n\n# Let's take a look to see how many layers are in the base model\nprint(f'Number of layers in the base model: {len(base_model.layers)}')","79e45a1a":"# Fine-tune from this layer onwards\nfine_tuning = 100\n\n# Freeze all the layers before fine_tuned_ind\nfor layer in base_model.layers[:fine_tuning]:\n    layer.trainable =  False","fe06353a":"# Load best weights\n# model.load_weights(weight_path)\n\n# Finer learning rate now\nopt = RMSprop(lr=0.0001, rho=0.9, epsilon=1e-08, decay=0.0)\n    \n# Compilation\nmodel.compile(optimizer=opt, \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","e7c1e969":"model.summary()","fc52beba":"fine_tuned_epochs = 40\ntotal_epochs = epochs_0 + fine_tuned_epochs\n\nhistory_fined = model.fit_generator(\n    train_gen,\n    steps_per_epoch=len(Xtrain) \/\/ batch_size,   # or batch_size=32\n    epochs=total_epochs,\n    initial_epoch=history.epoch[-1],\n    validation_data=valid_gen,\n    validation_steps=len(Xval) \/\/ batch_size,\n    callbacks=callbacks)","1ac541a4":"def plot_history_fined(history, history_fined, initial_epochs=epochs_0, loss_max=1):\n    \"\"\"\n    Check loss and accuracy evolution after fine tuning\n    \"\"\"\n    \n    acc = history.history['accuracy'][:epochs_0]\n    acc += history_fined.history['accuracy']\n    val_acc = history.history['val_accuracy'][:epochs_0]\n    val_acc += history_fined.history['val_accuracy']\n    \n    loss = history.history['loss'][:epochs_0]\n    loss += history_fined.history['loss']\n    val_loss = history.history['val_loss'][:epochs_0]\n    val_loss += history_fined.history['val_loss']\n  \n    \n    fig, (ax1, ax2) = plt.subplots(1,2,figsize=(14, 4))\n    ax1.plot(acc, label='Training')\n    ax1.plot(val_acc, label='Validation')\n    ax1.plot([initial_epochs-1,initial_epochs-1],\n              plt.ylim(), label='fine-tuning', ls='--')\n    ax1.legend(loc='lower right')\n    ax1.set(ylabel='Accuracy', title='Training - Validation Accuracy', \n            ylim=([0.4,1.005]))\n\n    ax2.plot(loss, label='Training')\n    ax2.plot(val_loss, label='Validation')\n    ax2.plot([initial_epochs-1,initial_epochs-1],\n             [0,1] , label='fine-tuning', ls='--')\n    ax2.legend(loc='upper right')\n    ax2.set(ylabel='Loss (cross entropy)', xlabel='epochs',\n           title='Training - Validation Loss', ylim=([0, loss_max]))\n    plt.show()","7aa73fe8":"plot_history_fined(history, history_fined)","d1327d33":"# Evaluation on the test dataset\nloss, acc = model.evaluate_generator(eval_datagen, verbose=0)\nprint(f'Test loss: {loss:.2f}')\nprint(f'Test accuracy: {acc*100:.2f}%')","1a6433ed":"import seaborn as sns\nfrom sklearn import metrics\n\npred = model.predict(eval_datagen, verbose=1)\n\n# get most likely class\ny_pred = pred.argmax(axis=1)\ny_true = ytest.argmax(axis=1)\n\nprint(metrics.classification_report(y_true, y_pred))\n\n# confusion matrix\nmat = metrics.confusion_matrix(y_true, y_pred)\ndf_mat = pd.DataFrame(mat, index=labels, columns=labels)\nplt.figure(figsize=(8,6))\nsns.heatmap(df_mat, annot=True, fmt='d', cmap=plt.cm.Reds)\n#plt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","c508d3e9":"N = 20  # flowers to display\nfig, axes = plt.subplots(4, 5, figsize=(20,12))\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(Xtest[i].astype(np.uint8))\n    ax.set(xticks=[], yticks=[])\n    true = y_true[i]\n    prediction = y_pred[i]   \n    ax.set_xlabel(f'Predict: {labels[prediction]}\\n True: {labels[true]}', \n                  color='black' if true == prediction else 'red')\n\n#fig.tight_layout()\nfig.suptitle('Predicted flowers; Incorrect Labels in Red', size=14)","5117908e":"### 2.1 - Load & explore data","25b85040":"### Confusion matrix","0a645258":"Note that only ~ 6000 parameters will be trained, the other ~2.2M from the MobileNetV2 model were already trained.","bc640768":"![alt text](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*cufAO77aeSWdShs3ba5ndg.jpeg 'VGG19 architecture')","380f50fc":"When our model will be built, we need to specify an accuracy function, a loss function and an optimisation algorithm.\n\nThe accuracy function is used to evaluate the performance of the model.\n\nThe loss function is used to measure how the model performs on data with known labels. It tells us how poorly the model performs in a supersised system. For multi-label classification, we make use of a specific loss function called as *categorical_crossentropy* (similar to cross-entropy in maths).\n\nFinally, the optimizer function is used in order to minize the loss function by changing model parameters (weighs values, filters kernel values etc.). \n\nFor this classification problem, we choose the `RMSprop` optimizer which is very efficient and commonly used (more details on the [optimizers on Keras here](https:\/\/keras.io\/optimizers\/)).","bb8a035b":"### 3.2 Define the model","13df2034":"In this notebook, we will present how to classify flower images by using transfer learning from a pre-trained network. \n\nA *pre-trained model* is a saved network model that was previously trained on a large dataset.\n\nThe idea of **transfer learning** for image classification is that if we use a model which was trained on a really large and representative dataset, this model can serve as a base model to classify images. Indeed, we can use the learned feature maps without having to start from scratch (which require to build and train a custom model on large datasets) which can take quiet a time (training time).\n\nHere, we're gonna test two approaches:\n1. **feature extraction**: we use the representations learned by an already trained network to extract meaningful features from new samples. We're simply gonna add a new classifier, which will be trained on top of the pretrained model so that we can use the feature maps learned previously for the dataset. Of course we do not have to retrain this trained network. The base convolutional network already contains features that are generically useful for classifying pictures. Note that the final classification part of the pretrained model is specific to the original classification.\n\n2. **fine tuning** : this method consists by unfreezing some of the top layers of the previously frozen model and jointly train both the new-top layer (to classify our specific datasets) and these last layers of the frozen model. We are doing this since only the last layers of the base model extract top-level feature maps, the first convolution layers only extract basic features (edges, vertical\/horizontal lines ...). This fine-tuning of the top feature representation in the base model allows to make them more specific for our classification task.","033638d7":"Now, we need to generate predictions from the block of features, average over the spatial locations, using a `GlobalAveragePooling2D` layer to convert the features to a single 1280-element vector per image. Finally, we'll some regular `Dense` layer with a final one with 5 units corresponding to each species of flower.","246efff8":"We show the architecture of one of the most commons CNN: VGG16. There are also VGG19, ResNet50, MobileNetV2, AlexNet etc. All these were pre-trained on the ImageNet dataset: a gold mine dataset for computer vision. It consists of about 14 M hand-labelled annotated images which contains over 22,000 categories. This pre-trained models will be a solid base to help us classify our flower dataset.\n\nVGG16 was published in 2014 and is one of the simplest (compared to the other CNN architectures used in Imagenet competition). This network contains total 16 layers in which weights and bias parameters are learnt.\n- a total of 13 convolutional layers are stacked and 3 dense layers for classification\n- a number of filters in the convolution layers follow an increasing pattern (similar to decoder architecture of autoencoder)\n- the informative features are obtained by Max Pooling layers applied at different steps in the architecture\n- the dense layers are made of 4096, 4096, and 1000 nodes","7485afc1":"Here, we're gonna split our dataset into a training, a validation and a testing one. This ensures that there are no bias: the model is trained on images with known labels, then we test our model accuracy on the validation dataset on images that our model did not see before. Finally, we compute the accuracy on the test dataset.","66f53a74":"let's have a look at some predictions !","79811c10":"Now, we're gonna load the different images and transform them into numpy arrays.","ad2773e7":"Let's check how many of each species of flowers are present.","9fa80475":"We also present the VGG19 model. It is similar to the VGG16 architecture with the addition of 3 more convolution layers.","984894ab":"<a id=\"content3\"><\/a>\n## III) CNN model","fa213115":"![alt text](https:\/\/1.bp.blogspot.com\/-M8UvZJWNW4E\/WsKk-tbzp8I\/AAAAAAAAChw\/OqxBVPbDygMIQWGug4ZnHNDvuyK5FBMcQCLcBGAs\/s1600\/image5.png 'MobileNetV2 architecture')","9253e61f":"### 3.1 About the optimizer and learning rate","55893dc8":"### 3.4 Feature extraction","ceb617df":"Great ! We can really see that fine-tuning is working and improve the accuracy of our model. We note also that the validation loss tends to increase a bit a the end: to prevent an eventual overfitting situation, we could add the `EarlyStopping` function in the callbacks during the training.","b2471d3f":"A useful trick to ovoid any overfitting is to use *data augmentation*. What is that? Well, the idea is to add artificially data into our dataset. But of course not any data, we alter the dataset with tiny transformations to reproduce very similar images. \n\nFor instance, we rotate of a few degree an image, we de-center it or we zoom in or out a little bit. These common augmentation techniques are horizontal\/vertical flips, rotations, translations, rescaling, random crops, adjust brightness and more.\n\nThanks to these transformations, we can get bigger dataset (x2, x3 in size) and then train our model in a much robust way.","cb509c8c":"[ **I ) Introduction**](#content1)\n- VGG16\n- VGG19 \n- MobileNetV2\n\n[ **II ) Data**](#content2)\n- 2.1 Load & explore data\n- 2.2 Split training and validation set\n\n[ **III ) CNN model**](#content3)\n- 3.1 About the optimizer and learning rate\n- 3.2 Define the model\n- 3.3 Data augmentation\n- 3.4 Feature extraction\n- 3.5 Fine tuning\n\n[ **IV ) Model evaluation **](#content4)\n- Confusion matrix \n- Prediction vizualisations\n\n[ **V ) Conclusion **](#content5)","80676ef9":"### 3.3 - Data augmentation","caacdc32":"Since deep networks can take quiet a time for the optimizer to converge, we're gonna use an annealing method of the learning rate (*LR*).\n\nThe *LR* is basically the step by which the optimizer is 'walking'. A hight *LR* correspond to big steps and thus the convergence is faster. However, in that case the sampling is not really efficient since the optimizer do not fall especially in the right minima.\n\nAt the opposite, have a low *LR* means that the optimizer will probably find the right local minima but it will take a lot of time. \n\nThe idea here is to start from a low value but not so low and then decrease the *LR* along the training to reach efficiently the global minimum of the loss function. Using the `ReduceLROnPlateau` method , we are able to choose to reduce the *LR* by a coefficient (here 75%) if the accuracy has not improved after a number of epochs (here 3).\n\n<br>\n\nIn addition, we use the `EarlyStopping` method to control the training time: if the accuracy has not improved after 5 epochs we stop.\n\nFinally we make use of the `ModelCheckpoint` which is useful for monitoring the best found weights during the training.","756525c4":"<a id=\"content4\"><\/a>\n## IV) Model evaluation","a437e0eb":"### 2.2 - Label encoding","66c97155":"So if you want to implement yourself a VGG16-like model it is quite straighforward. The only issue will be the time to train the model. Nonetheless, we demonstrates how to build it below.","cefd6aea":"<a id=\"content1\"><\/a>\n## I) Introduction","def94dba":"<a id=\"content2\"><\/a>\n## II) Data","d7c2e4ba":"It is now time for the fine tuning of our model: we're gonna unfreeze some of the top layers of the base model and train all those and the top layer classifier.","33b9045e":"Labels are the 5 species number (from 0 to 4). Thus, we need to encode these labels to one-hot vectors. For instance, an image of a sunflower should have a label 3 and a corresponding **y** = [0,0,0,1,0].","c7c22f53":"### 2.3 - Split training and validation set","713abf63":"<a id=\"content5\"><\/a>\n## Conclusion\n\nWe can note the improvement of the model predictions by doing some fine-tuning. Of course, we can complexify the model by playing with the hyperparameters and\/or adding other layers on top of the top-less MobileNetV2 base model such as several `Dense` layers with some `Dropout` or `BatchNormalization` ones between (to avoid overfitting). Feel free to test some different architectures to improve the accuracy of the predictions.\n\nIt will be interesting also to compare this fine-tuning method with others models such as VGG16, VGG19, ResNet50 etc.\n\n#### ***Let me know what you thought of this notebook, please upvote it if you liked it and don't hesitate to leave me a comment. It will keep me motivated to work and post other Data Science notebooks. Thank you !***\n\n\n","fe0db1a5":"For now, we're doing feature extraction i.e. we freeze the convolutional base (MobileNet). Then, we add a classifier on top of it and train this top-level classifier.","e3427b86":"Continue training the model","0489826a":"### 3.5 Fine tuning","73dce6ed":"![alt text](https:\/\/tech.showmax.com\/2017\/10\/convnet-architectures\/image_0-8fa3b810.png 'VGG16 architecture')","40af823d":"Indeed we have now an 88% accuracy on the test dataset (compared to 77% before fine tuning) ! ","f90ae9cd":"###\u00a0Prediction vizualisations","1e1294d5":"In this notebook, we'll make use of a much complex architecture with the MobileNetV2 model. It has been developed in 2018, MobileNetV2 is a significant improvement over MobileNetV1 and pushes the state of the art for mobile visual recognition including classification, object detection and  segmentation. If you're interested, you can find more details in the [release paper](https:\/\/arxiv.org\/abs\/1801.04381)."}}