{"cell_type":{"2f7dfee7":"code","6451d8fd":"code","beb60979":"code","56ffc1be":"code","c61cc489":"code","a304aab2":"code","ddb77d4b":"code","51f60bab":"code","26707802":"code","accf7ddb":"code","6b822640":"code","3dd42402":"code","7225e822":"code","5eb69122":"code","b9d36487":"code","d5504ec6":"code","9769c2d9":"code","589b8633":"code","2a348a0f":"code","1da5c48e":"code","987bddab":"code","929e4b9c":"code","d9c302a2":"code","177cd179":"code","1a07f565":"code","53cc8bdc":"code","804dfdc9":"markdown","43842404":"markdown","138db420":"markdown","07133e1d":"markdown","1912daf7":"markdown","26375705":"markdown","5c0010e3":"markdown","801032ef":"markdown"},"source":{"2f7dfee7":"import math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport gc\n\nimport lightgbm as lgb\nimport optuna\nfrom optuna.samplers import TPESampler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_auc_score, plot_roc_curve","6451d8fd":"INT8_MIN = np.iinfo(np.int8).min\nINT8_MAX = np.iinfo(np.int8).max\nINT16_MIN = np.iinfo(np.int16).min\nINT16_MAX = np.iinfo(np.int16).max\nINT32_MIN = np.iinfo(np.int32).min\nINT32_MAX = np.iinfo(np.int32).max\n\nFLOAT16_MIN = np.finfo(np.float16).min\nFLOAT16_MAX = np.finfo(np.float16).max\nFLOAT32_MIN = np.finfo(np.float32).min\nFLOAT32_MAX = np.finfo(np.float32).max\n\n\ndef memory_usage(data, detail = 1):\n    if detail:\n        display(data.memory_usage())\n    memory = data.memory_usage().sum() \/ (1024 * 1024)\n    print(\"Memory usage : {0:.2f}MB\".format(memory))\n    return memory\n\n\ndef compress_dataset(data):\n    memory_before_compress = memory_usage(data, 0)\n    print()\n    print('=' * 50)\n    for col in data.columns:\n        col_dtype = data[col][:100].dtype\n\n        if col_dtype != 'object':\n            print(\"Name: {0:24s} Type: {1}\".format(col, col_dtype))\n            col_series = data[col]\n            col_min = col_series.min()\n            col_max = col_series.max()\n\n            if col_dtype == 'float64':\n                print(\" variable min: {0:15s} max: {1:15s}\".format(str(np.round(col_min, 4)), str(np.round(col_max, 4))))\n                if (col_min > FLOAT16_MIN) and (col_max < FLOAT16_MAX):\n                    data[col] = data[col].astype(np.float16)\n                    print(\"  float16 min: {0:15s} max: {1:15s}\".format(str(FLOAT16_MIN), str(FLOAT16_MAX)))\n                    print(\"compress float64 --> float16\")\n                elif (col_min > FLOAT32_MIN) and (col_max < FLOAT32_MAX):\n                    data[col] = data[col].astype(np.float32)\n                    print(\"  float32 min: {0:15s} max: {1:15s}\".format(str(FLOAT32_MIN), str(FLOAT32_MAX)))\n                    print(\"compress float64 --> float32\")\n                else:\n                    pass\n                memory_after_compress = memory_usage(data, 0)\n                print(\"Compress Rate: [{0:.2%}]\".format((memory_before_compress-memory_after_compress) \/ memory_before_compress))\n                print('=' * 50)\n\n            if col_dtype == 'int64':\n                print(\" variable min: {0:15s} max: {1:15s}\".format(str(col_min), str(col_max)))\n                type_flag = 64\n                if (col_min > INT8_MIN \/ 2) and (col_max < INT8_MAX \/ 2):\n                    type_flag = 8\n                    data[col] = data[col].astype(np.int8)\n                    print(\"     int8 min: {0:15s} max: {1:15s}\".format(str(INT8_MIN), str(INT8_MAX)))\n                elif (col_min > INT16_MIN) and (col_max < INT16_MAX):\n                    type_flag = 16\n                    data[col] = data[col].astype(np.int16)\n                    print(\"    int16 min: {0:15s} max: {1:15s}\".format(str(INT16_MIN), str(INT16_MAX)))\n                elif (col_min > INT32_MIN) and (col_max < INT32_MAX):\n                    type_flag = 32\n                    data[col] = data[col].astype(np.int32)\n                    print(\"    int32 min: {0:15s} max: {1:15s}\".format(str(INT32_MIN), str(INT32_MAX)))\n                    type_flag = 1\n                else:\n                    pass\n                memory_after_compress = memory_usage(data, 0)\n                print(\"Compress Rate: [{0:.2%}]\".format((memory_before_compress-memory_after_compress) \/ memory_before_compress))\n                if type_flag == 32:\n                    print(\"compress (int64) ==> (int32)\")\n                elif type_flag == 16:\n                    print(\"compress (int64) ==> (int16)\")\n                else:\n                    print(\"compress (int64) ==> (int8)\")\n                print('=' * 50)\n\n    print()\n    memory_after_compress = memory_usage(data, 0)\n    print(\"Compress Rate: [{0:.2%}]\".format((memory_before_compress-memory_after_compress) \/ memory_before_compress))\n    \n    return data","beb60979":"df_train = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ndf_train.head()","56ffc1be":"df_train = df_train.drop('id', axis = 1)","c61cc489":"print(f'Train set shape:   {df_train.shape}')","a304aab2":"df_train.info()","ddb77d4b":"num_feats_train = [feats for feats in df_train.select_dtypes(include = 'float')]\ncat_feats_train = [feats for feats in df_train.select_dtypes(include = 'int')]\nprint(f'Number of num columns:   {len(num_feats_train)} \\nNumber of cat columns:   {len(cat_feats_train)}')","51f60bab":"df_train.describe()","26707802":"df_train.isnull().sum().max() == 0","accf7ddb":"df_test = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\ndf_test.head()","6b822640":"df_test = df_test.drop('id', axis = 1)","3dd42402":"print(f'Test set shape:   {df_test.shape}')","7225e822":"df_test.info()","5eb69122":"num_feats_test = [feats for feats in df_test.select_dtypes(include = 'float')]\ncat_feats_test = [feats for feats in df_test.select_dtypes(include = 'int')]\nprint(f'Number of num columns:   {len(num_feats_test)} \\nNumber of cat columns:   {len(cat_feats_test)}')","b9d36487":"df_test.describe()","d5504ec6":"df_test.isnull().sum().max() == 0","9769c2d9":"plt.figure(figsize = (5,5))\nsns.countplot(x = df_train['target'])\nplt.grid()","589b8633":"scaler = StandardScaler()\n\ndf_train[num_feats_train] = scaler.fit_transform(df_train[num_feats_train])\ndf_test[num_feats_test] = scaler.transform(df_test[num_feats_test])","2a348a0f":"df_train.head()","1da5c48e":"df_test.head()","987bddab":"df_train['mean'] = df_train[num_feats_train].mean(axis = 1)\ndf_train['std'] = df_train[num_feats_train].std(axis = 1)\ndf_train['min'] = df_train[num_feats_train].min(axis = 1)\ndf_train['max'] = df_train[num_feats_train].max(axis = 1)\ndf_train['mean_2'] = df_train[cat_feats_train[:-1]].mean(axis = 1)\ndf_train['std_2'] = df_train[cat_feats_train[:-1]].std(axis = 1)\n\ndf_test['mean'] = df_test[num_feats_test].mean(axis = 1)\ndf_test['std'] = df_test[num_feats_test].std(axis = 1)\ndf_test['min'] = df_test[num_feats_test].min(axis = 1)\ndf_test['max'] = df_test[num_feats_test].max(axis = 1)\ndf_test['mean_2'] = df_test[cat_feats_test[:-1]].mean(axis = 1)\ndf_test['std_2'] = df_test[cat_feats_test[:-1]].std(axis = 1)","929e4b9c":"df_train.head()","d9c302a2":"df_test.head()","177cd179":"df_train = compress_dataset(df_train)","1a07f565":"df_test = compress_dataset(df_test)","53cc8bdc":"df_train.to_csv('train_prepared.csv')\ndf_test.to_csv('test_prepared.csv')","804dfdc9":"## Release memory","43842404":"## Target summary","138db420":"## Test set summary","07133e1d":"## Train set summary","1912daf7":"## Standard Scaler","26375705":"**Summary:**\n1. Train set contains **1 000 000** rows and **287** columns (including `id`)\n2. Train set has **240** columns with 'float' type and **46** columns with 'int' type\n3. Test set contains **500 000** rows and **286** columns (including `id`)\n4. Test set has **240** columns with 'float' type and **45** columns with 'int' type\n5. There are **no missing values** in train set and test set.\n6. Classes in target column are **balansed**.","5c0010e3":"## Feature engineering","801032ef":"## Saving"}}