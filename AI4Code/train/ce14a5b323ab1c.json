{"cell_type":{"9a115161":"code","51415d24":"code","24ae4fd5":"code","89f1689b":"code","d7c16674":"code","8ed34cf3":"code","f32cb2ef":"code","62e96a21":"code","f19dc643":"code","a1457c4c":"code","aa2f8b49":"code","783b2b1f":"code","a674d48d":"code","20e70772":"code","a0e5d573":"code","facfbdc3":"code","eac59872":"code","b1159f43":"code","a316f865":"code","60fbf344":"code","4290a712":"code","564a1e07":"code","ab7f231b":"code","b2c7d2ac":"code","b859de2f":"code","a2a6d02c":"code","e4f26747":"code","d9f51618":"code","b8daf078":"code","57132274":"code","d9c8a0ca":"code","e46a25aa":"code","e770b018":"code","2c16639e":"code","ee95ebc3":"code","0665602b":"code","783872fc":"code","0c1da7a9":"code","11a7ca8a":"code","444b80eb":"code","ff2a854a":"code","6ed32870":"code","1b809dc2":"code","5e3cd529":"code","d1692a42":"code","039749bc":"code","faba497d":"code","52c50087":"code","2ffc5d28":"code","aa46f7a1":"code","deb1a881":"code","af287e9a":"code","7cef02dc":"code","c4c45607":"code","a5af6e3e":"code","22c26206":"code","b2687d0c":"code","f697c094":"code","5d95d259":"code","e948b184":"code","d01bbc1c":"code","5412bd9a":"code","16d7b337":"code","bcd5cf8e":"code","481ac0c3":"code","d16ca04e":"code","3c31d3dc":"code","520d14fd":"code","ffa67b63":"code","3872fd89":"code","d2f1aa1f":"code","cae6da6f":"code","7affb0f5":"code","cf2103e2":"code","a7f0bcc5":"code","bdc232a5":"code","95102946":"code","8773dd80":"code","79cbc632":"code","804b7570":"code","ea5e59b4":"code","b8c80168":"code","d3da7d81":"code","7908c1c9":"code","68c4d631":"code","8df4966a":"code","3e19ed96":"code","b7078669":"code","a5193130":"code","10aed4b6":"code","e6daa847":"code","339e9703":"code","d82396df":"code","728d3f47":"code","3005bf34":"code","c6abced0":"code","ed5bdb14":"code","d2170256":"code","1ec82990":"code","8507770b":"code","5675b29d":"code","56240ae1":"code","b16d82ad":"code","8cb45d63":"code","7836e404":"code","6222e2fc":"code","56fc797d":"code","0b64b601":"code","8e1d9c88":"code","714219be":"code","6981e294":"code","99d5182b":"code","3222d5f7":"code","70d9db0c":"code","ce8736fc":"code","fffd3e80":"markdown","8789d864":"markdown","13290ce8":"markdown","9db8b8be":"markdown","7c7814a2":"markdown","f19e6461":"markdown","e5a53ee6":"markdown","fc3a2cd8":"markdown","e28e5287":"markdown","901ce99f":"markdown","26bbeb3c":"markdown","a1a6f2ea":"markdown","bd9f278f":"markdown","a2b5ebe1":"markdown","70ca1a07":"markdown","468e6927":"markdown","63757b09":"markdown","d8270172":"markdown","36ee3da2":"markdown","0b8d24a3":"markdown","9db8a9f3":"markdown","d4e77068":"markdown"},"source":{"9a115161":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, cross_val_predict\nfrom sklearn.metrics import classification_report, confusion_matrix,accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom sklearn.utils import resample\nfrom scipy.stats import zscore\n#import GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.naive_bayes import GaussianNB\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set(color_codes=True)\n","51415d24":"# load the dataset\ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.head()","24ae4fd5":"df.info()","89f1689b":"df.isnull().sum()","d7c16674":"df.isna().sum()","8ed34cf3":"df[\"Cabin\"].fillna(\"Not Available\", inplace = True)","f32cb2ef":"#df[\"Age\"].fillna(df.Age.mean(), inplace = True)","62e96a21":"#df.dropna(axis=0,inplace=True)","f19dc643":"df['Embarked'] = df['Embarked'].astype('string')","a1457c4c":"df['Sex'] = df['Sex'].astype('string')","aa2f8b49":"df.isna().sum()","783b2b1f":"df.shape","a674d48d":"df.info()","20e70772":"df.describe()","a0e5d573":"df.hist(figsize=(20,30))","facfbdc3":"fig, ax = plt.subplots(2, 3)\n\nfig.set_figheight(10)\nfig.set_figwidth(20)\n\nsns.distplot(df['Age'], ax = ax[0,0])\nsns.distplot(df['Pclass'], ax = ax[0,1])\nsns.distplot(df['SibSp'], ax = ax[0,2])\nsns.distplot(df['Parch'], ax = ax[1,0])\nsns.distplot(df['Fare'], ax = ax[1,1])\n\nax[0,0].set_title('Age')\nax[0,1].set_title('Pclass')\nax[0,2].set_title('SibSp')\nax[1,0].set_title('Parch')\nax[1,1].set_title('Fare')\nplt.show()","eac59872":"sns.displot(df, x=\"Age\", hue=\"Survived\", kde=True)","b1159f43":"sns.displot(df, x=\"Pclass\", hue=\"Survived\", kde=True)","a316f865":"sns.displot(df, x=\"Fare\", hue=\"Survived\", kde=True)","60fbf344":"sns.displot(df, x=\"Parch\", hue=\"Survived\", kde=True)","4290a712":"sns.displot(df, x=\"SibSp\", hue=\"Survived\", kde=True)","564a1e07":"fig, ax = plt.subplots(2, 3)\n\nfig.set_figheight(10)\nfig.set_figwidth(20)\n\ndf['Sex'].value_counts().plot.pie(autopct='%1.2f%%',shadow=True, ax = ax[0,0])\ndf['Pclass'].value_counts().plot.pie(autopct='%1.2f%%',shadow=True, ax = ax[0,1])\ndf['Embarked'].value_counts().plot.pie(autopct='%1.2f%%',shadow=True, ax = ax[0,2])\n\nplt.show()","ab7f231b":"pd.crosstab(df['Embarked'],df['Survived'])","b2c7d2ac":"pd.crosstab(df['Sex'],df['Survived'])","b859de2f":"pd.crosstab(df['Pclass'],df['Survived'])","a2a6d02c":"fig, ax = plt.subplots(2, 3)\n\nfig.set_figheight(10)\nfig.set_figwidth(20)\n\nsns.boxplot(df['Age'], ax = ax[0,0])\nsns.boxplot(df['Pclass'], ax = ax[0,1])\nsns.boxplot(df['SibSp'], ax = ax[0,2])\nsns.boxplot(df['Parch'], ax = ax[1,0])\nsns.boxplot(df['Fare'], ax = ax[1,1])\n\nax[0,0].set_title('Age')\nax[0,1].set_title('Pclass')\nax[0,2].set_title('SibSp')\nax[1,0].set_title('Parch')\nax[1,1].set_title('Fare')\nplt.show()","e4f26747":"fig, ax = plt.subplots(2, 3)\n\nfig.set_figheight(10)\nfig.set_figwidth(20)\n\nsns.boxplot(df['Survived'], df['Age'], ax = ax[0,0])\nsns.boxplot(df['Survived'], df['Pclass'], ax = ax[0,1])\nsns.boxplot(df['Survived'], df['SibSp'], ax = ax[0,2])\nsns.boxplot(df['Survived'], df['Parch'], ax = ax[1,0])\nsns.boxplot(df['Survived'], df['Fare'], ax = ax[1,1])\n\nax[0,0].set_title('Age')\nax[0,1].set_title('Pclass')\nax[0,2].set_title('SibSp')\nax[1,0].set_title('Parch')\nax[1,1].set_title('Fare')\nplt.show()","d9f51618":"df.corr()","b8daf078":"plt.figure(figsize=(30,20)) \nsns.heatmap(df.corr(), vmax=.8, square=True, annot=True, fmt='.2f', cmap=\"summer\")","57132274":"sns.pairplot(df, hue=\"Survived\")","d9c8a0ca":"df['Survived'].value_counts().plot.pie(autopct='%1.2f%%',shadow=True)","e46a25aa":"df['Survived'].value_counts()","e770b018":"df[\"Age\"].fillna(df.Age.mean(), inplace = True)","2c16639e":"df.isna().sum()","ee95ebc3":"df.shape","0665602b":"df.dropna(axis=0,inplace=True)","783872fc":"df.shape","0c1da7a9":"df","11a7ca8a":"oneHotCols=[\"Sex\", \"Embarked\"]","444b80eb":"df=pd.get_dummies(df, columns=oneHotCols)","ff2a854a":"df","6ed32870":"df = df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)","1b809dc2":"df","5e3cd529":"df_0=df[df['Survived']==0]\ndf_1=df[df['Survived']==1]\nprint(df_0.shape)\nprint(df_1.shape)","d1692a42":"\ndf_1_up_sampled = resample(df_1, \n                                 replace=True, \n                                 n_samples=df['Survived'].value_counts()[0],# to match majority class sample count\n                                 random_state=1) \nprint(df_1_up_sampled.shape)","039749bc":"df_upsampled = pd.concat([df_0, df_1_up_sampled])\nprint(df_upsampled.shape)","faba497d":"X = df_upsampled.drop(['Survived'],axis=1)\nY = df_upsampled['Survived']","52c50087":"X","2ffc5d28":"XScaled  = X.apply(zscore)","aa46f7a1":"X=XScaled","deb1a881":"XScaled","af287e9a":"X","7cef02dc":"x_train, x_test, y_train, y_test = train_test_split(XScaled, Y, test_size=.30, random_state=100)","c4c45607":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","a5af6e3e":"print(\"Original Survived True Values    : {0} ({1:0.2f}%)\".format(len(df_upsampled.loc[df_upsampled['Survived'] == 1]), (len(df_upsampled.loc[df_upsampled['Survived'] == 1])\/len(df_upsampled.index)) * 100))\nprint(\"Original Survived False Values   : {0} ({1:0.2f}%)\".format(len(df_upsampled.loc[df_upsampled['Survived'] == 0]), (len(df_upsampled.loc[df_upsampled['Survived'] == 0])\/len(df_upsampled.index)) * 100))\nprint(\"\")\nprint(\"Training Survived True Values    : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 1]), (len(y_train[y_train[:] == 1])\/len(y_train)) * 100))\nprint(\"Training Survived False Values   : {0} ({1:0.2f}%)\".format(len(y_train[y_train[:] == 0]), (len(y_train[y_train[:] == 0])\/len(y_train)) * 100))\nprint(\"\")\nprint(\"Test Survived True Values        : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 1]), (len(y_test[y_test[:] == 1])\/len(y_test)) * 100))\nprint(\"Test Survived False Values       : {0} ({1:0.2f}%)\".format(len(y_test[y_test[:] == 0]), (len(y_test[y_test[:] == 0])\/len(y_test)) * 100))\nprint(\"\")","22c26206":"logisticModel = LogisticRegression(solver=\"liblinear\")\nlogisticModel.fit(x_train, y_train)","b2687d0c":"y_predict = logisticModel.predict(x_test)","f697c094":"logisticModel_score = logisticModel.score(x_test, y_test)\nprint(logisticModel_score)","5d95d259":"scores = cross_val_score(logisticModel, X, Y, cv=10)\n\nprint(\"Cross-validated scores:\", scores)\nprint(\"Average score:\" , np.average(scores))\nprint(\"standard Deviation\" , np.std(scores))","e948b184":"from sklearn import metrics\ncm=metrics.confusion_matrix(y_test,y_predict, labels=[1, 0])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"1\",\"0\"]],\n                  columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True, fmt='g')","d01bbc1c":"#from sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(y_test, y_predict, labels=[1,0]))\nprint(classification_report(y_test, y_predict))","5412bd9a":"resultsDf = pd.DataFrame({'Method':['Logistic Regression'], 'accuracy': [logisticModel_score]})\nresultsDf","16d7b337":"KNN = KNeighborsClassifier(n_neighbors= 5 , weights = 'distance' )\nKNN.fit(x_train, y_train)","bcd5cf8e":"predicted_labels = KNN.predict(x_test)\nKNN.score(x_test, y_test)","481ac0c3":"y_predict = KNN.predict(x_test)","d16ca04e":"print(confusion_matrix(y_test, y_predict, labels=[1,0]))\nprint(classification_report(y_test, y_predict))","3c31d3dc":"cm=metrics.confusion_matrix(y_test,y_predict, labels=[1, 0])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"1\",\"0\"]],\n                  columns = [i for i in [\"Predict 1\",\"Predict 0\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True, fmt='g')","520d14fd":"scores = cross_val_score(KNN, X, Y, cv=10 )\n\nprint(\"Cross-validated scores:\", scores)\nprint(\"Average score:\" , np.average(scores))\nprint(\"standard Deviation\" , np.std(scores))","ffa67b63":"#In case of classifier like knn the parameter to be tuned is n_neighbors\nparam_grid = {'n_neighbors':np.arange(1,50),'metric':['minkowski','manhattan','cosine'], 'weights':['uniform','distance'], 'algorithm':['auto','ball_tree','kd_tree','brute']}\n#param_grid = {'n_neighbors':np.arange(2,60),'metric':['minkowski','manhattan','cosine'], 'weights':['uniform','distance']}","3872fd89":"knn = KNeighborsClassifier()\nknn_cv= GridSearchCV(knn,param_grid,cv=5, n_jobs=10)\nknn_cv.fit(X,Y)","d2f1aa1f":"knn_cv.best_score_","cae6da6f":"knn_cv.best_params_","7affb0f5":"knn_best = knn_cv.best_estimator_","cf2103e2":"knn_best","a7f0bcc5":"tempDF = pd.DataFrame({'Method':['KNN'], 'accuracy': [knn_cv.best_score_]})\nresultsDf = pd.concat([resultsDf, tempDF])\nresultsDf","bdc232a5":"from sklearn.tree import DecisionTreeClassifier\n\ndTree = DecisionTreeClassifier(criterion = 'gini', random_state=1)\ndTree.fit(x_train, y_train)","95102946":"print(dTree.score(x_train, y_train))\nprint(dTree.score(x_test, y_test))\nscore_DTree_Gini=dTree.score(x_test, y_test)","8773dd80":"y_predict = dTree.predict(x_test)","79cbc632":"print(confusion_matrix(y_test,y_predict))\nprint(classification_report(y_test, y_predict))","804b7570":"tempDF = pd.DataFrame({'Method':['Decision Tree (GINI)'], 'accuracy': [score_DTree_Gini]})\nresultsDf = pd.concat([resultsDf, tempDF])\nresultsDf","ea5e59b4":"rfcl = RandomForestClassifier(n_estimators = 200)\nrfcl = rfcl.fit(x_train, y_train)","b8c80168":"pred_RF = rfcl.predict(x_test)\nacc_RF = accuracy_score(y_test, pred_RF)\nscore_randomForest = (rfcl.score(x_test, y_test))\nprint(score_randomForest)","d3da7d81":"tempDF = pd.DataFrame({'Method':['Random Forest'], 'accuracy': [score_randomForest]})\nresultsDf = pd.concat([resultsDf, tempDF])\nresultsDf","7908c1c9":"from sklearn.ensemble import GradientBoostingClassifier\ngbcl = GradientBoostingClassifier(n_estimators = 200, learning_rate = 0.1, random_state=22)\ngbcl = gbcl.fit(x_train, y_train)","68c4d631":"score = gbcl.score(x_test , y_test)\nprint(score)","8df4966a":"y_predict = gbcl.predict(x_test)\nprint(confusion_matrix(y_test,y_predict))\nprint(classification_report(y_test, y_predict))","3e19ed96":"cm=metrics.confusion_matrix(y_test,y_predict, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"0\",\"1\"]],\n                  columns = [i for i in [\"Predict 0\",\"Predict 1\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True, fmt='g')","b7078669":"tempDF = pd.DataFrame({'Method':['Gradient Boost'], 'accuracy': [score]})\nresultsDf = pd.concat([resultsDf, tempDF])\nresultsDf","a5193130":"from lightgbm import LGBMClassifier\nlightGBM = LGBMClassifier(random_state=100, n_estimators=200, min_child_samples=40, max_depth=20, verbose=0)\nlightGBM.fit(x_train, y_train)","10aed4b6":"score = lightGBM.score(x_test , y_test)\nprint(score)","e6daa847":"y_predict = lightGBM.predict(x_test)\nprint(confusion_matrix(y_test,y_predict))\nprint(classification_report(y_test, y_predict))","339e9703":"cm=metrics.confusion_matrix(y_test,y_predict, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"0\",\"1\"]],\n                  columns = [i for i in [\"Predict 0\",\"Predict 1\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True, fmt='g')","d82396df":"tempDF = pd.DataFrame({'Method':['Light BGM'], 'accuracy': [score]})\nresultsDf = pd.concat([resultsDf, tempDF])\nresultsDf","728d3f47":"\n\n# Create Base Learners\nbase_learners = [\n                 ('rf_1', RandomForestClassifier(n_estimators=200, random_state=1)),\n                 ('rf_2', LGBMClassifier(random_state=1, n_estimators=200, min_child_samples=40, max_depth=20, verbose=0)),\n              ('rf_4', BaggingClassifier(base_estimator=dTree, n_estimators=200,random_state=1)),\n              ('rf_5', GradientBoostingClassifier( n_estimators=200,random_state=1))\n                ]\n\n# Initialize Stacking Classifier with the Meta Learner\nclf = StackingClassifier(estimators=base_learners, final_estimator=LogisticRegression())\n\n# Extract score\nclf.fit(x_train, y_train)","3005bf34":"score = clf.score(x_test , y_test)\nprint(score)","c6abced0":"y_predict = clf.predict(x_test)\nprint(confusion_matrix(y_test,y_predict))\nprint(classification_report(y_test, y_predict))","ed5bdb14":"cm=metrics.confusion_matrix(y_test,y_predict, labels=[0, 1])\n\ndf_cm = pd.DataFrame(cm, index = [i for i in [\"0\",\"1\"]],\n                  columns = [i for i in [\"Predict 0\",\"Predict 1\"]])\nplt.figure(figsize = (7,5))\nsns.heatmap(df_cm, annot=True, fmt='g')","d2170256":"tempDF = pd.DataFrame({'Method':['Stacking'], 'accuracy': [score]})\nresultsDf = pd.concat([resultsDf, tempDF])\nresultsDf","1ec82990":"resultsDf","8507770b":" sns.barplot(x=\"accuracy\", y=\"Method\", data=resultsDf.sort_values(by='accuracy', ascending=False), palette='mako')","5675b29d":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df","56240ae1":"resultDataSet = pd.DataFrame()\nresultDataSet['PassengerId'] = test_df['PassengerId']\nresultDataSet.head()","b16d82ad":"test_df['Embarked'] = test_df['Embarked'].astype('string')\ntest_df['Sex'] = test_df['Sex'].astype('string')","8cb45d63":"test_df[\"Age\"].fillna(df.Age.mean(), inplace = True)","7836e404":"test_df = test_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1)","6222e2fc":"test_df.isnull().sum()","56fc797d":"test_df.isna().sum()","0b64b601":"test_df[\"Fare\"].fillna(df.Fare.mean(), inplace = True)","8e1d9c88":"oneHotCols=[\"Sex\", \"Embarked\"]\ntest_df=pd.get_dummies(test_df, columns=oneHotCols)","714219be":"test_df","6981e294":"test_Scaled  = test_df.apply(zscore)","99d5182b":"test_predict = clf.predict(test_Scaled)","3222d5f7":"test_predict","70d9db0c":"resultDataSet['Survived'] = test_predict\nresultDataSet","ce8736fc":"resultDataSet.to_csv('submission', index=False)","fffd3e80":"## **Data cleansing**","8789d864":"## **Build Gradient Ensemble Model**","13290ce8":"## **Logistic regression**","9db8b8be":"**We should fill the missing age with the mean age of train data set**","7c7814a2":"## **Split Data**","f19e6461":"## **Summary Of Models**\n\n","e5a53ee6":"**We should fill the missing fare with the mean fare of train data set**","fc3a2cd8":"**There is huge imbalance in target variable.**\n\nDue to the data imbalance, this will degrade the performance of the model. Most of the predictions will correspond to the majority class and treat the minority class features as noise in the data and ignore them. This will result in a high bias in the model. So we  need to use the sampling technique to fix this.\n\n**The sampling technique we can use here is upsampling technique.**","e28e5287":"## **Random Forest Ensemble**","901ce99f":"## **Data Preprocessing**","26bbeb3c":"**Ideally, we need to process the test data in the same pipeline, but for now we execute the steps in similar way.**","a1a6f2ea":"## **Build LightGBM Model**","bd9f278f":"**Lets convert the columns with an 'object' datatype into categorical variables**","a2b5ebe1":"## **Data analysis & visualisation**","70ca1a07":"**Check for target balancing and fix it if found imbalanced.**","468e6927":"## **KNN**","63757b09":"## **Build Decision Tree Model**","d8270172":"**Segregate predictors vs target attributes**","36ee3da2":"Stacking & KNN performs well in training and testing test.\n\nStacking, KNN, Random forest has has good recall value.\n\nStandrad Deviation in the cross validation is less","0b8d24a3":"**Replace Null Values**","9db8a9f3":"## **Evaluating Test Data Set**\n\n","d4e77068":"## **Build Stacking Classifier**"}}