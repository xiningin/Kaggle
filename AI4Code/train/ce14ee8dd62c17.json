{"cell_type":{"73f7768e":"code","2b7339c9":"code","7728de6a":"code","accffbfd":"code","00fc5dec":"code","7dbd3dc5":"code","288e9a41":"code","1700cb97":"code","3f064c96":"code","8ba448d7":"code","87f4ec9a":"code","56f10960":"code","60e7b286":"code","9719f271":"code","b338d44c":"code","ba5adfca":"code","65c0eb6c":"code","9311818a":"code","d5a557a0":"code","d872c7a5":"code","fafdad11":"code","bb3bed0c":"code","2e976346":"code","2757758c":"code","dcb2e17b":"code","76d2e6fc":"code","4b538338":"code","cbaf11ba":"code","cbd27493":"code","cdf9c326":"code","6def53f3":"code","32bb4ca3":"code","bdc973dc":"code","5a479afc":"code","40843651":"markdown","36e719d9":"markdown","0535e340":"markdown","26d4595b":"markdown","5ce28a43":"markdown","3a788c0c":"markdown","314774e8":"markdown","e1c2d586":"markdown","eda05415":"markdown","87cdab61":"markdown","1ed9f4a0":"markdown"},"source":{"73f7768e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.utils import shuffle","2b7339c9":"df_train = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/test.csv')","7728de6a":"df_train.head()","accffbfd":"df_train.describe()","00fc5dec":"df_train.info()","7dbd3dc5":"df_test.info()","288e9a41":"df_train.nunique()","1700cb97":"# Drop the identity column\ndf_train = df_train.drop(['id'], axis = 1)","3f064c96":"df_test.nunique()","8ba448d7":"df_train = shuffle(df_train)","87f4ec9a":"target = ['target']\nvar_categorical = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7', 'cat8', 'cat9' ]\nvar_numerical = list(set(df_train.columns) - set(var_categorical) - set(target))","56f10960":"# Function to label the count on top of each bar in graph\ndef label_values(ax, spacing=5):\n    total = 0\n    for rect in ax.patches:\n        total += rect.get_height()\n\n    for rect in ax.patches:\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        space = spacing\n        \n        va = 'bottom'\n        \n        if y_value < 0:\n            space *= -1\n            va = 'top'\n        label = \"{:.2f}, {:.2f}\".format(y_value, y_value\/total*100)\n        ax.annotate(\n            label,                      \n            (x_value, y_value),         \n            xytext=(0, space),          \n            textcoords=\"offset points\", \n            ha='center',                \n            va=va)","60e7b286":"sns.boxplot(x = df_train[\"target\"])\nplt.show()","9719f271":"for column in var_categorical:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    ax = sns.countplot(x = df_train[column])\n    label_values(ax)\n    plt.show()","b338d44c":"for column in var_categorical:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    ax = sns.boxplot(x = df_train[column], y = df_train['target'])\n    label_values(ax)\n    plt.show()","ba5adfca":"i = 1\nfor column in var_numerical:\n    print(column.title())\n    plt.subplots(figsize=(16, 50))\n    plt.subplot(len(var_numerical) + 1, 3, i)\n    sns.boxplot(y = df_train[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 3, i)\n    sns.distplot(x = df_train[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 3, i)\n    sns.scatterplot(y = df_train[\"target\"], x = df_train[column])\n    i += 1\n    plt.show()","65c0eb6c":"plt.figure(figsize=(15, 15))\nsns.heatmap(df_train.corr(), annot=True)\nplt.show()","9311818a":"from sklearn.preprocessing import OrdinalEncoder","d5a557a0":"# df_train = pd.get_dummies(df_train, columns=var_categorical, drop_first=True)\nordinal_encoder = OrdinalEncoder()\ndf_train[var_categorical] = ordinal_encoder.fit_transform(df_train[var_categorical])\ndf_test[var_categorical] = ordinal_encoder.transform(df_test[var_categorical])","d872c7a5":"y_train = df_train.pop('target')\nX_train = df_train","fafdad11":"X_train[var_numerical] = np.log(X_train[var_numerical])","bb3bed0c":"from sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV, KFold\nfrom xgboost import XGBRegressor","2e976346":"# Train model using hyperparmeter tuning\ndef training_model_hyperparameter(model, scoring, params_grid, X_train, y_train):\n    folds = KFold(n_splits = 15, shuffle = True, random_state=43)\n\n    grid = GridSearchCV(estimator = model, scoring=scoring, param_grid = params_grid, cv = folds, \n                           verbose=0, return_train_score=True, n_jobs=-1)\n    grid.fit(X_train, y_train)\n    return grid","2757758c":"# Predict values of training\ndef prediction_model(model, X_train, y_train):\n    y_train_pred = model.predict(X_train)\n    return y_train_pred","dcb2e17b":"params_xgb = {\n    'random_state': [1], \n    'booster': ['gbtree'],\n    'n_estimators': [10000],\n    'learning_rate': [0.03628302216953097],\n    'reg_lambda': [0.0008746338866473539],\n    'reg_alpha': [23.13181079976304],\n    'subsample': [0.7875490025178415],\n    'colsample_bytree': [0.11807135201147481],\n    'max_depth': [3],\n    'tree_method':['gpu_hist'],\n    'n_jobs': [-1]\n}","76d2e6fc":"xgb = XGBRegressor()","4b538338":"xgb_grid = training_model_hyperparameter(xgb, 'neg_mean_squared_error', params_xgb, X_train, y_train)","cbaf11ba":"xgb_grid.best_params_","cbd27493":"submission = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/sample_submission.csv')\nsubmission.head()","cdf9c326":"final_submission = pd.DataFrame(\n    {'id': df_test['id']})","6def53f3":"df_test = df_test.drop(['id'], axis = 1)","32bb4ca3":"df_test[var_numerical] = np.log(df_test[var_numerical])","bdc973dc":"final_submission['target'] = xgb_grid.predict(df_test)\nfinal_submission.head()","5a479afc":"final_submission.to_csv('submission_file.csv', index=False)","40843651":"We have to predict a continuous target based on a number of feature columns given in the data. <br>\nAll of the feature columns, **cat0 - cat9** are **categorical**, and the feature columns **cont0 - cont13** are **continuous**.","36e719d9":"# Creating Submission File","0535e340":"# Model Building","26d4595b":"## Data Description","5ce28a43":"# Divide the train data into X and y","3a788c0c":"# Exploratory Data Analysis","314774e8":"# Ordinal encoding on categorical variables","e1c2d586":"# **30 DAYS ML CHALLENGE**","eda05415":"# Scaling the numerical variables","87cdab61":"We don't need to do the scaling on numerical variables as the values are already scaled.","1ed9f4a0":"## Files\n**train.csv** - the training data with the target column <br>\n**test.csv** - the test set; you will be predicting the target for each row in this file <br>\n**sample_submission.csv** - a sample submission file in the correct format <br>"}}