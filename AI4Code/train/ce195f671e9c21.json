{"cell_type":{"e359f79f":"code","1331c387":"code","fb21170a":"code","43050a8e":"code","c6bdb927":"code","ea65ebd1":"code","818396d5":"code","83db7a1f":"code","df78bb4a":"code","9f36b6bd":"code","d2c92803":"code","d1cdba36":"code","b484b2f9":"code","9ed41a26":"code","ba786261":"code","fe88ae82":"code","110b2708":"code","d10cff9b":"code","9a360224":"code","d44861fb":"code","286cb371":"code","4beced1e":"code","e19ac6e4":"code","ecc9a591":"code","9e2ff736":"code","6cf0057f":"code","ba5f7bab":"markdown","cab09316":"markdown","fe178d8b":"markdown","875453bc":"markdown","b00ce83c":"markdown","7d2152c9":"markdown","7de4b6f9":"markdown","a8f71d3e":"markdown","0694f279":"markdown","45880204":"markdown","988e6a59":"markdown","dd3ba99e":"markdown","1fbf9bb3":"markdown","966de6c8":"markdown","5c9725dc":"markdown","a82ea1a7":"markdown","88df6aa8":"markdown","53dbb6bf":"markdown"},"source":{"e359f79f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1331c387":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split,cross_val_score\nimport sklearn.metrics as mt\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n%matplotlib inline","fb21170a":"data=pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","43050a8e":"data.head()","c6bdb927":"data.isnull().sum()","ea65ebd1":"data['bmi']=data['bmi'].fillna(data['bmi'].mean())","818396d5":"data.info()","83db7a1f":"fig,n = plt.subplots(figsize=(7,4))\ng=sns.barplot(x=data['stroke'].value_counts().index,y=data['stroke'].value_counts())\ng.set_xlabel('Stroke happened')\ng.set_ylabel('Number of observations')\ng.set_title('Data distribution')","df78bb4a":"numerical=['age','avg_glucose_level','bmi']\nfor x in numerical:\n    fig,n=plt.subplots(figsize=(10,5))\n    g=sns.distplot(data[x])\n    g.set_title(f'Distribution of {x}')\n    ","9f36b6bd":"sns.pairplot(data[numerical])","d2c92803":"sns.heatmap(data[numerical].corr(),annot=True)","d1cdba36":"categorical=['gender','hypertension','heart_disease','ever_married','work_type','Residence_type','smoking_status']\nfor x in categorical:\n    cat=data[data['stroke']==1][x]\n    fig,n=plt.subplots(figsize=(10,3))\n    g=sns.barplot(x=cat.value_counts().index,y=cat.value_counts())\n    g.set_title(f'Stroke distribution by {x}')\n    g.set_ylabel('Number of observations')\n    ","b484b2f9":"obtype=['gender','ever_married','work_type','Residence_type','smoking_status']\ngen_encode=LabelEncoder()\nmar_encode=LabelEncoder()\nwork_encode=LabelEncoder()\nres_encode=LabelEncoder()\nsmo_encode=LabelEncoder()\ndata['gender']=gen_encode.fit_transform(data['gender'])\ndata['ever_married']=mar_encode.fit_transform(data['ever_married'])\ndata['work_type']=work_encode.fit_transform(data['work_type'])\ndata['Residence_type']=res_encode.fit_transform(data['Residence_type'])\ndata['smoking_status']=smo_encode.fit_transform(data['smoking_status'])","9ed41a26":"train=data.sample(frac=0.7,random_state=1)\ntest=data.loc[~data.id.isin(train.index)]","ba786261":"X=train.iloc[:,1:-1]\ny=train.iloc[:,-1]\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)","fe88ae82":"from sklearn.model_selection import cross_val_score\nran=RandomForestClassifier(n_estimators=100)\nxgb=XGBClassifier()\nscore_ran=cross_val_score(ran,X,y,cv=10,scoring='f1').mean()    \nscore_xgb=cross_val_score(xgb,X,y,cv=10,scoring='f1').mean()\n","110b2708":"score_ran","d10cff9b":"score_xgb","9a360224":"xgb.fit(X_train,y_train)\npred=xgb.predict(test.iloc[:,1:-1])","d44861fb":"print(mt.classification_report(test.iloc[:,-1],pred))","286cb371":"print(mt.accuracy_score(test.iloc[:,-1],pred))","4beced1e":"print(mt.precision_score(test.iloc[:,-1],pred))","e19ac6e4":"print(mt.recall_score(test.iloc[:,-1],pred))","ecc9a591":"mt.plot_roc_curve(xgb,test.iloc[:,1:-1],test.iloc[:,-1])","9e2ff736":"test['predicted']=pred\nfinal=test[['id','predicted']]","6cf0057f":"final.to_csv('test.csv')","ba5f7bab":"![image.png](attachment:image.png)","cab09316":"**A stroke occurs when the blood supply to part of your brain is interrupted or reduced, preventing brain tissue from getting oxygen and nutrients. Brain cells begin to die in minutes. A stroke is a medical emergency, and prompt treatment is crucial. Today we'll predict whether a person can have stroke**","fe178d8b":"**Using various metrics**","875453bc":"# OBJECTIVE\n1. Exploratory Data Analysis\n2. Stroke Prediction","b00ce83c":"**LabelEncoding for the Object type features**","7d2152c9":"**Importing necessary Libraries**","7de4b6f9":"*Now we can see that XGBoost is giving better results for F1 score*","a8f71d3e":"# Please Upvote this kernel and if you find it helpful please keep it in your Favourite Section.\n\n\n\n\n\n","0694f279":"**Checking Null Values**","45880204":"**Checking some plots for the Categorical features where Stroke Occured**","988e6a59":"**Splitting Training dataset into Training and Validation**","dd3ba99e":"**Splitting dataset for Train and Test**","1fbf9bb3":"**Checking the Target Distribution**","966de6c8":"**Importing data**","5c9725dc":"**Checking some plots for the Distribution of the Numerical features**","a82ea1a7":"**Fitting with XGBoostClassifier**","88df6aa8":"**Finally storing the predicted values of the test data to csv**","53dbb6bf":"**Applying Cross Validations**"}}