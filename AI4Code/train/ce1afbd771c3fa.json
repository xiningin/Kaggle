{"cell_type":{"2ccae143":"code","15bb7c30":"code","a8d1108b":"code","9d2c4e63":"code","a5262444":"code","44fa91ca":"code","40ee3216":"code","cd70e592":"code","170de19e":"code","92381818":"code","0fcb70f8":"code","38e8e38c":"code","fc94484e":"code","66733af7":"code","08af4f2b":"code","167a2bbc":"code","54eb134f":"code","5457578d":"code","0c88bc7f":"code","c550e764":"code","891045b6":"code","c18893b9":"code","91d91e3e":"code","8f8c5f87":"code","ade4bab3":"code","69a27b06":"code","06d8e7f5":"code","4ec69316":"code","6917a2bc":"code","4f96a83b":"code","b33b26dd":"code","cb963097":"code","7fe6a2ee":"code","3834b534":"code","9f67b88d":"code","880ff4d7":"markdown","cc570852":"markdown","d351f73b":"markdown","f7ebb05b":"markdown","0ff9b0a1":"markdown","fc1abd3a":"markdown","1f0e0e8e":"markdown","45043239":"markdown","c80e247a":"markdown","453734eb":"markdown","826c8ebc":"markdown","cb6bdf8c":"markdown","f18e4231":"markdown","05e9e301":"markdown","5044a150":"markdown","ddfb8499":"markdown","d239bf87":"markdown","8fcf5293":"markdown","a2c85879":"markdown"},"source":{"2ccae143":"import pandas as pd","15bb7c30":"df = pd.read_csv('..\/input\/mini-flight-delay-prediction\/flight_delays_train.csv')","a8d1108b":"df.head()","9d2c4e63":"def split_values(str):\n    value = str.split('-')[1]\n    return int(value)","a5262444":"df['Month'] = df['Month'].map(lambda x: split_values(x))\ndf['DayofMonth'] = df['DayofMonth'].map(lambda x: split_values(x))\ndf['DayOfWeek'] = df['DayOfWeek'].map(lambda x: split_values(x))","44fa91ca":"df.head()","40ee3216":"print(pd.DataFrame(df.dtypes))","cd70e592":"# UniqueCarrier\nuc_labels = df.UniqueCarrier.unique().tolist()\nlabel_dict_uc_train = {}\nfor index, possible_label in enumerate(uc_labels):\n    label_dict_uc_train[possible_label] = index\n\n# Origin\norigin_labels = df.Origin.unique().tolist()\nlabel_dict_origin_train = {}\nfor index, possible_label in enumerate(origin_labels):\n    label_dict_origin_train[possible_label] = index\n\n# Dest\ndest_labels = df.Dest.unique().tolist()\nlabel_dict_dest_train = {}\nfor index, possible_label in enumerate(dest_labels):\n    label_dict_dest_train[possible_label] = index","170de19e":"df['UniqueCarrier'] = df.UniqueCarrier.replace(label_dict_uc_train)\ndf['Origin'] = df.Origin.replace(label_dict_origin_train)\ndf['Dest'] = df.Dest.replace(label_dict_dest_train)","92381818":"df.head()","0fcb70f8":"df.dep_delayed_15min.value_counts()","38e8e38c":"pip install pycaret","fc94484e":"# para tarefas de classifica\u00e7\u00e3o, o split \u00e9 estratificado por padr\u00e3o\n# https:\/\/pycaret.org\/setup\/\n\ndata = df.sample(frac=0.75, random_state=786)\ndata_unseen = df.drop(data.index)\n\ndata.reset_index(drop=True, inplace=True)\ndata_unseen.reset_index(drop=True, inplace=True)\n\nprint('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))","66733af7":"from pycaret.classification import *\nexp_cls101 = setup(data = data, target = 'dep_delayed_15min', session_id=123,\n                   numeric_features = ['Month', 'DayofMonth', 'DayOfWeek',\n                                       'DepTime', 'UniqueCarrier', 'Origin',\n                                       'Dest', 'Distance'], data_split_stratify=True)","08af4f2b":"best = compare_models()","167a2bbc":"lgbm = create_model('lightgbm')","54eb134f":"tuned_model = tune_model(lgbm)","5457578d":"tuned_model","0c88bc7f":"plot_model(tuned_model)","c550e764":"plot_model(tuned_model, plot='confusion_matrix')","891045b6":"interpret_model(tuned_model)","c18893b9":"predictions = predict_model(tuned_model)","91d91e3e":"df_test = pd.read_csv('..\/input\/mini-flight-delay-prediction\/flight_delays_test.csv')\ndf_test.head()","8f8c5f87":"df_test['Month'] = df_test['Month'].map(lambda x: split_values(x))\ndf_test['DayofMonth'] = df_test['DayofMonth'].map(lambda x: split_values(x))\ndf_test['DayOfWeek'] = df_test['DayOfWeek'].map(lambda x: split_values(x))","ade4bab3":"df_test.head()","69a27b06":"# UniqueCarrier\nuc_labels = df_test.UniqueCarrier.unique().tolist()\nlabel_dict_uc_test = {}\nfor index, possible_label in enumerate(uc_labels):\n    label_dict_uc_test[possible_label] = index\n\n# Origin\norigin_labels = df_test.Origin.unique().tolist()\nlabel_dict_origin_test = {}\nfor index, possible_label in enumerate(origin_labels):\n    label_dict_origin_test[possible_label] = index\n\n# Dest\ndest_labels = df_test.Dest.unique().tolist()\nlabel_dict_dest_test = {}\nfor index, possible_label in enumerate(dest_labels):\n    label_dict_dest_test[possible_label] = index","06d8e7f5":"df_test['UniqueCarrier'] = df_test.UniqueCarrier.replace(label_dict_uc_test)\ndf_test['Origin'] = df_test.Origin.replace(label_dict_origin_test)\ndf_test['Dest'] = df_test.Dest.replace(label_dict_dest_test)","4ec69316":"df_test.head()","6917a2bc":"df_test","4f96a83b":"lgbm_final = finalize_model(lgbm)","b33b26dd":"test_labels = predict_model(lgbm_final, data = df_test)","cb963097":"test_labels","7fe6a2ee":"test_labels = test_labels.drop(['Score'], axis=1)","3834b534":"test_labels","9f67b88d":"test_labels.to_csv('hey.csv', index=False)","880ff4d7":"## Exploratory model analysis\n\nWe'll explore different models using the Pycaret lib.\n- First of all, we'll split our dataset in train and test; for classification tasks, the split is stratified by default.","cc570852":"- Initialize a setup with our data.","d351f73b":"### Mapping the values with the split_values function for integers","f7ebb05b":"### Preprocessing dataframe values","0ff9b0a1":"- Our data is quite imbalanced, as we can see below:","fc1abd3a":"### Mapping columns UniqueCarrier, Origin, Dest\n- Mapping values for a dict, and replace them at the dataframe with integers indexes.","1f0e0e8e":"### Function to split values of the first 3 dataframe columns","45043239":"- We can also see the confusion matrix, which shows the absolute numbers of our predictions.","c80e247a":"# Mini-Flight-Delay","453734eb":"### Reading dataframe","826c8ebc":"## Pre-processing","cb6bdf8c":"- The best performance was achieved by CatBoost, but it is also one of the most expensive models here. As long as its the numbers are very slightely close to the Light Gradient Boosting Machine ones, we go along with LGBM.","f18e4231":"### Using the trained model to predict on the test dataframe","05e9e301":"## Generating the predictions for the actual test set","5044a150":"- We use `tune_model` to tune hyperparameters; it returns is the model setup with greater performance. Under the hood, the function uses a random grid search approach.","ddfb8499":"- Here we have an evaluation on the hold out set.","d239bf87":"- A nice feature of Pycaret lib is this performance plot. Here we have the ROC Curve (receiver operating characteristic curve), which plots the True Positive Rates and False Positive Rates at different classification thresholds. Further reading about ROC curves and AOC can be found here:\n        - https:\/\/developers.google.com\/machine-learning\/crash-course\/classification\/roc-and-auc, \n        - https:\/\/machinelearningmastery.com\/roc-curves-and-precision-recall-curves-for-classification-in-python, and \n        - https:\/\/stackoverflow.com\/questions\/44172162\/f1-score-vs-roc-auc","8fcf5293":"- Check the perfomance of the some different possible models using the method `compare_methods`.","a2c85879":"- The function `interpret_model` show the most important components for the model output. We can see that the determinant component to state if a flight had a delay, using a LGBM model, is 'departure time'."}}