{"cell_type":{"3d4f07b1":"code","fca73995":"code","de701c7e":"code","b86443f9":"code","b94a29f9":"code","f745573a":"code","68836013":"code","7f730403":"code","280a0364":"markdown","0b7c5451":"markdown","0b8e6adf":"markdown","d7b3689c":"markdown","f38cc720":"markdown"},"source":{"3d4f07b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fca73995":"pd.options.mode.chained_assignment = None","de701c7e":"#Load the matches that have already occurred \ndf = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/ufc-master.csv\")\n\n#Load the upcoming matches\ndf_upcoming = pd.read_csv(\"\/kaggle\/input\/ultimate-ufc-dataset\/upcoming-event.csv\")\n\n#Get the number of upcoming fights\nnum_upcoming_fights = len(df_upcoming)\nprint(f\"We are going to predict the winner of {num_upcoming_fights} fights.\")","b86443f9":"#Combine the upcoming fights to the previous fights so we can clean it all at the same time.\ndf_combined = df_upcoming.append(df)\n\n#Let's put all the labels into a dataframe\ndf_combined['label'] = ''\n\n#We need to convert 'Red' and 'Blue' to 0 and 1\nmask = df_combined['Winner'] == 'Red'\ndf_combined['label'][mask] = 0\nmask = df_combined['Winner'] == 'Blue'\ndf_combined['label'][mask] = 1\n\n#Make sure label is numeric\ndf_combined['label'] = pd.to_numeric(df_combined['label'], errors='coerce')\n\n#Make sure the date column is datetime\ndf_combined['date'] = pd.to_datetime(df['date'])","b94a29f9":"#Copy the labels to their own dataframe\nlabel_df = df_combined['label']\n\n#Split the train set from the test set\n\ndf_train = df_combined[num_upcoming_fights:]\nlabel_train = label_df[num_upcoming_fights:]\n\ndf_test = df_combined[:num_upcoming_fights]\nlabel_test = label_df[:num_upcoming_fights]\n\n\n#Make sure the sizes are the same\nprint(len(df_test))\nprint(len(label_test))\n\nprint(len(df_train))\nprint(len(label_train))","f745573a":"from sklearn.tree import DecisionTreeClassifier\n#Pick a model\nmy_model = DecisionTreeClassifier(max_depth=5)\n\n#Pick some features\n#I would not recommend placing bets based off of these features...\nmy_features = ['R_odds', 'B_Stance']\n\n#Let's grab the names of the fighters for the upcoming event\n#This will be useful to print predictions at the end.\nfighters_test = df_test[['R_fighter', 'B_fighter']]\n\n\n#Make dataframes that only contain the relevant features\ndf_train_prepped = df_train[my_features].copy()\ndf_test_prepped = df_test[my_features].copy()\n\n#If we need to dummify the datasets do it now.  We need to be careful that the test set has all of the features\n#that the training set does\n\ndf_train_prepped = pd.get_dummies(df_train_prepped)\ndf_test_prepped = pd.get_dummies(df_test_prepped)\n\n#Ensure both sets are dummified the same\ndf_train_prepped, df_test_prepped = df_train_prepped.align(df_test_prepped, join='left', axis=1)    \n\n#The new test set may have new new features after the above join.  Fill them with zeroes\ndf_test_prepped = df_test_prepped.fillna(0)\n\n#Since we may have dropped some rows we need to drop the matching rows in the labels\nlabel_train_prepped = label_train[label_train.index.isin(df_train_prepped.index)]\nlabel_test_prepped = label_test[label_test.index.isin(df_test_prepped.index)]\nfighters_test_prepped = fighters_test[fighters_test.index.isin(df_test_prepped.index)]\n\n\n#Quick test that lengths match.\nprint(len(label_train_prepped))\nprint(len(df_train_prepped))\nprint(len(label_test_prepped))\nprint(len(df_test_prepped))\nprint(len(fighters_test_prepped))","68836013":"#Train the model\n\nmy_model.fit(df_train_prepped, label_train_prepped)","7f730403":"#Get predictions and print them\npredictions = my_model.predict(df_test_prepped)\n\n#Zip the fighters to predictions.  This will help with printing\nfighters_array = fighters_test_prepped.to_numpy()\nprediction_list = np.array(list(zip(fighters_array, predictions)))\nfor p in prediction_list:\n    if p[1] == 0.0:\n        print(f\"RED fighter {p[0][0]} is predicted to win over {p[0][1]}\")\n    else:\n        print(f\"BLUE fighter {p[0][1]} is predicted to win over {p[0][0]}\")","280a0364":"# Pick a model and Train it\nWe need to select a model and some features to train.","0b7c5451":"# Make the dataframes that we are going to need going forward\n\nWe need a training set and a test set for the features and the labels","0b8e6adf":"# Load and Prepare the Data","d7b3689c":"I am still new to Machine Learning projects and only taught myself Python in November.  Any suggestions would be welcome!  I hope this was helpful.","f38cc720":"# Purpose\n\nThe purpose of this kernel is to show a simple example of how to train a model using the matches that have already occured (ufc-master.csv) and use that model to predict future matches (upcoming-event.csv)"}}