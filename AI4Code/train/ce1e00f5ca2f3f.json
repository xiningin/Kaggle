{"cell_type":{"fb2a7f38":"code","8e5a3447":"code","9fab37cb":"code","a067d092":"code","5c7f230d":"code","cccd583e":"code","d54baa98":"code","37d504a0":"code","63bd8ce1":"code","7ec6d76c":"code","760fd137":"code","036c42d3":"code","e1386233":"code","30ca3f28":"code","d71b02ea":"markdown","e23ddc4e":"markdown","bf3e44ab":"markdown","43512d61":"markdown","73c46b69":"markdown","307c537d":"markdown","10310766":"markdown","62a44900":"markdown","a2a30311":"markdown","eea58e53":"markdown","cfda41c3":"markdown","2558f1c8":"markdown","4b75c6e4":"markdown","682ebde8":"markdown"},"source":{"fb2a7f38":"# For data manipulation and visualization\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\n\n# For deep learning\nimport tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder","8e5a3447":"# loading the data\ndf = pd.read_csv(\"..\/input\/devanagari-character-set\/data.csv\")\ndf.head()","9fab37cb":"train_df, test_df = train_test_split(df, test_size=0.2)\ntrain_df = train_df.reset_index(drop=True)\ntest_df = test_df.reset_index(drop=True)\n\nx_train, x_test = train_df.drop('character', axis=1), test_df.drop('character', axis=1)\ny_train, y_test = train_df['character'], test_df['character']","a067d092":"all_chars = df['character'].unique()\n\nprint(f'All characters: {all_chars}')\nprint(f\"Number of characters: {len(all_chars)}\")","5c7f230d":"# Converting data frame to image arrays\nx_train, x_test = x_train.values.reshape(x_train.values.shape[0], 32, 32), x_test.values.reshape(x_test.values.shape[0], 32, 32)\n\nprint(f'Shape of Training Image array: {x_train.shape}')\nprint(f'Shape of Testing Image array: {x_test.shape}')","cccd583e":"# Plotting some training images along with their labels\nfig, ax = plt.subplots(nrows=2, ncols=5, figsize=(12,6))\nidxs = y_train.index\n\nfor row in ax:\n    for col in row:\n        idx = random.choice(idxs)\n        col.axis('off')\n        col.set_title(y_train[idx])\n        col.imshow(x_train[idx], cmap=plt.get_cmap('gray'))","d54baa98":"# Plotting distribution of output classes\ndata = df.character.value_counts()\nplt.figure(figsize=(15, 10))\nsns.barplot(y = data.index, x = data, orient='h')\nplt.show()","37d504a0":"# Label encoding the output classes\nlabelencoder = LabelEncoder()\n\nY_train = labelencoder.fit_transform(y_train)\nX_train = x_train.reshape(x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)\n\nY_test = labelencoder.fit_transform(y_test)\nX_test = x_test.reshape(x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)","63bd8ce1":"# Detect hardware\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver() # TPU detection\nexcept ValueError: # If TPU not found\n    tpu = None","7ec6d76c":"# Select appropriate distribution strategy\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print('Running on TPU ', tpu.cluster_spec().as_dict()['worker'])  \nelse:\n    strategy = tf.distribute.get_strategy() # Default strategy that works on CPU and single GPU\n    print('Running on CPU instead')\n\nprint(\"Number of accelerators: \", strategy.num_replicas_in_sync)","760fd137":"with strategy.scope():\n    model = models.Sequential()\n    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 1)))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\n    model.add(layers.Flatten())\n    model.add(layers.Dense(128, activation='relu'))\n    model.add(layers.Dense(46))\n    \n    model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n    \n    # Display the architecture\n    model.summary()","036c42d3":"if tpu:\n    BATCH_SIZE = 400 * strategy.num_replicas_in_sync\nelse:\n    BATCH_SIZE = 400\n\nEPOCHS = 30\nVALIDATION_SPLIT = 0.25\n\n# Train the model\nhistory = model.fit(X_train, Y_train, epochs=EPOCHS, validation_split=VALIDATION_SPLIT, batch_size=BATCH_SIZE)\n\n# Save the model weights\nmodel.save('.\/devnagari_model.h5', overwrite=True)","e1386233":"plt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\n\n# Show testing loss and accuracy\ntest_loss, test_acc = model.evaluate(X_test,  Y_test, verbose=2)","30ca3f28":"fig, ax = plt.subplots(nrows=2, ncols=5, figsize=(12,6))\nidxs = y_test.index\n\nfor row in ax:\n    for col in row:\n        idx = random.choice(idxs)\n        x = X_test[idx].reshape(1, 32, 32, 1)\n        logit_y = model(x)\n        pred_y = labelencoder.inverse_transform(np.argmax(logit_y, axis=-1))\n        col.axis('off')\n        col.set_title(pred_y[0])\n        col.imshow(x_test[idx], cmap=plt.get_cmap('gray'))","d71b02ea":"<h3 style=\"color:purple;\">Visualizing data distribution for all output classes<\/h3>","e23ddc4e":"<h3 style=\"color:purple;\">Visualizing training and validation accuracies<\/h3>","bf3e44ab":"---\n\n<h3 style=\"color:red;\"> If you liked the notebook, feel free to upvote!<\/h3>","43512d61":"<h3 style=\"color:purple;\">Configuring TPU if available<\/h3>","73c46b69":"<h3 style=\"color:purple;\">Splitting the data into training and testing sets<\/h3>","307c537d":"<h3 style=\"color:purple;\">Importing Necessary Libraries<\/h3>","10310766":"<h3 style=\"color:purple;\">Visualizing some training images along with their labels<\/h3>","62a44900":"<h3 style=\"color:purple;\">Loading data<\/h3>","a2a30311":"<h3 style=\"color:purple;\">Visualizing predictions on testing set<\/h3>","eea58e53":"<h3 style=\"color:purple;\">Label encoding the output classes<\/h3>","cfda41c3":"<h3 style=\"color:purple;\">Converting DataFrame having pixel values into numpy arrays<\/h3>","2558f1c8":"<h3 style=\"color:purple;\">Showing all the output classes<\/h3>","4b75c6e4":"<h3 style=\"color:purple;\">Training the model<\/h3>","682ebde8":"<h3 style=\"color:purple;\">Defining and compiling the model<\/h3>"}}