{"cell_type":{"4974786a":"code","9602b8e6":"code","6b51eb9e":"code","d39316bc":"code","a353b705":"code","dda732ec":"code","d329b20e":"code","e6998a30":"code","1e0a253e":"code","1d9f817e":"code","c3ab9d5d":"code","27fd4b42":"code","67e07d88":"code","6601209b":"code","6dc7a13a":"code","3b34c690":"code","715b9f01":"code","d447df29":"code","f52de085":"code","a9529962":"code","39cfe309":"code","46d5bceb":"code","999a2c8d":"code","908a223e":"code","a6cfe087":"code","8d5dfe9b":"code","e6c6d4ba":"code","5ad8fc5b":"markdown","94087739":"markdown","e86a15fc":"markdown","10933463":"markdown","faa4d806":"markdown","ff739bc9":"markdown","bfb1fc80":"markdown","ccdd8d5e":"markdown","f10fa00f":"markdown","d15932cd":"markdown","b1ae7c60":"markdown","2cdf5536":"markdown","642a1cf8":"markdown","91d08b90":"markdown","970d78bb":"markdown"},"source":{"4974786a":"#We have to to perform exploratory data analysis first to understand the data\n\n#importing the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","9602b8e6":"#read the data\ndf = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","6b51eb9e":"#find the shape of the dataset\ndf.shape","d39316bc":"df.head() #first 5 rows of the dataset","a353b705":"df.tail() #last 5 rows of the dataset","dda732ec":"#finding out how many NaN values are there in each feature\n\nfeatures_na = [features for features in df.columns if df[features].isnull().sum()>1]\n\nfor feature in features_na:\n    print(feature, np.round(df[feature].isnull().mean(), 4),'%')","d329b20e":"color=['green','blue']\nfor feature in features_na:\n    data = df.copy()\n    data[feature] = np.where(data[feature].isnull(), 1, 0)\n    \n    data.groupby(feature)['SalePrice'].median().plot.bar(color=color)\n    plt.title(feature)\n    plt.show()","e6998a30":"num_features = [feature for feature in df.columns if df[feature].dtypes != 'O']\nprint('No. of Numerical variables:', len(num_features))","1e0a253e":"#finding out all the features with keyword YEAR in them for datetime variable\n\nyr_feature = [feature for feature in num_features if 'Yr' in feature or 'Year' in feature] \nprint(yr_feature)","1d9f817e":"for feature in yr_feature:\n    print(feature, df[feature].unique())","c3ab9d5d":"#plotting datetime variables with SalePrice to find relation\n\ndf.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median House Price')\nplt.title('House Price vs Year Sold')","27fd4b42":"df.groupby('YearBuilt')['SalePrice'].median().plot()\nplt.xlabel('Year Built')\nplt.ylabel('Median House Price')\nplt.title('House Price vs Year Built')","67e07d88":"df.groupby('YearRemodAdd')['SalePrice'].median().plot()\nplt.xlabel('Year Remodeled')\nplt.ylabel('Median House Price')\nplt.title('House Price vs Year Remodeled')","6601209b":"df.groupby('GarageYrBlt')['SalePrice'].median().plot()\nplt.xlabel('Year Garage was built')\nplt.ylabel('Median House Price')\nplt.title('House Price vs Year Garage was built')","6dc7a13a":"#same inference through different graphs\nfor feature in yr_feature:\n    if feature != 'YrSold':\n        data = df.copy()\n        data[feature] = data['YrSold'] - data[feature]\n        plt.scatter(data[feature], data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","3b34c690":"disc_features = [feature for feature in num_features if len(df[feature].unique())<25 and feature not in yr_feature + ['Id']]\nprint('No.of discrete features', format(len(disc_features)))\nprint(disc_features)","715b9f01":"df[disc_features].head()","d447df29":"for feature in disc_features:\n    data = df.copy()\n\n    data.groupby(feature)['SalePrice'].median().plot.bar(color=color)\n    plt.title(feature)\n    plt.show()","f52de085":"cont_features = [feature for feature in num_features if feature not in disc_features + yr_feature + ['Id']]\nprint('No.of continuous features', format(len(cont_features)))\nprint(cont_features)","a9529962":"#We use histograms to look at the continous features\nfor feature in cont_features:\n    data = df.copy()\n\n    data[feature].hist(bins=25)\n    plt.title(feature)\n    plt.xlabel(feature)\n    plt.ylabel('Count')\n    plt.show()","39cfe309":"#method 1 using np.log\n\nfor feature in cont_features:\n    data = df.copy() \n    if 0 in data[feature].unique():     #this condition is used because log 0 is undefined so we are excluding it\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data['SalePrice'] = np.log(data['SalePrice'])\n        plt.scatter(data[feature], data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('Sales Price')\n        plt.title(feature)\n        plt.show()","46d5bceb":"#method 2 using np.log1p-excludes 0 automatically\n\nfor feature in cont_features:\n    data1 = df.copy() \n    data1[feature] = np.log1p(data1[feature])\n    data1['SalePrice'] = np.log1p(data1['SalePrice'])\n    plt.scatter(data1[feature], data1['SalePrice'])\n    plt.xlabel(feature)\n    plt.ylabel('Sales Price')\n    plt.title(feature)\n    plt.show()","999a2c8d":"for feature in cont_features:\n    data = df.copy()\n    if 0 in df[feature].unique():\n        pass\n    else:\n        data[feature] = np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","908a223e":"cat_features = [feature for feature in df.columns if df[feature].dtype == 'O']\nprint(cat_features)","a6cfe087":"df[cat_features].head()","8d5dfe9b":"for feature in cat_features:\n    print('The feature is {} and the number of categories are {}'.format(feature, len(df[feature].unique())))","e6c6d4ba":"#plotting the relationship b\/w categorical variable and label i.e, Sales Price\n\nfor feature in cat_features:\n    data = df.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Sales Price')\n    plt.title(feature)\n    plt.show()","5ad8fc5b":"As you can infer from the graphs above, the data is not normally distributed in most cases. We have to apply a transformation method to normally distribute the data.","94087739":"**Find out relationship b\/w missing values and label i.e, Sales Price**","e86a15fc":"**Numerical and Datetime Variables**","10933463":"**Discrete Features**","faa4d806":"As you can see the Sale Price is dependant on the missing values. Therefore we have to handle missing values and we cannot simply drop it because of the dependancy.","ff739bc9":"As you can infer from the graph, the median house price has increased at the later years(ard 2000s) compared to before(ard 1800s-1900s).","bfb1fc80":"df[num_features].head()","ccdd8d5e":"From this graph we can say that the median house prices has reduced drastically from 2007.","f10fa00f":"We have to find the number of categorical variables in each feature in the dataset","d15932cd":"We will be using Logarithmic Transformation in this case.\n\nIn Log transformation each variable of x will be replaced by log(x) with base 10, base 2, or natural log.","b1ae7c60":"**CATEGORICAL VARIABLES**","2cdf5536":"We will be using boxplot to visualize the outliers present in the data.","642a1cf8":"We can see that the newly remodeled houses are more expensive than the older ones.","91d08b90":"**OUTLIERS**","970d78bb":"It's the same case with this graph also. Newly built garages have more value."}}