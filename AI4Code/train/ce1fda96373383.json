{"cell_type":{"2b8ee57e":"code","0fcfa295":"code","e60e1405":"code","f326f899":"code","3867d7fe":"code","0e1b17a4":"code","bcbb01b8":"code","8ddcd327":"code","bc434f54":"code","06990eef":"code","6338e8cc":"code","71d99ba7":"code","c2a66901":"code","700f9d53":"code","bc500eb1":"code","0c15fd86":"code","e64647b1":"code","b8f9383a":"markdown","2ad466ae":"markdown"},"source":{"2b8ee57e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0fcfa295":"import pandas as pd\nimport nltk\nimport re\n%matplotlib inline\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nfrom IPython.display import display\nfrom sklearn import datasets\nfrom sklearn.svm import SVC\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nfull_data = [df_train,df_test]\n","e60e1405":"for dataset in full_data:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(df_train['Title'], df_train['Sex'])","f326f899":"for dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n    \ndf_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","3867d7fe":"df_train['Age'] = df_train['Age'].fillna(-1)\ndf_test['Age'] = df_test['Age'].fillna(-1)  \nfull_data = [df_train,df_test]\n\nfor dataset in full_data:\n    \n    dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Master'), 'Age'] = 4.57\n    dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Miss'), 'Age'] = 21.84\n    dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Mr'), 'Age'] = 32.36\n    dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Mrs'), 'Age'] = 35.78\n    dataset.loc[(dataset['Age'] == -1) &(dataset['Title'] == 'Rare'), 'Age'] = 45.54\n    dataset['Age'] = dataset['Age'].astype(int)  \n    \n    full_data = [df_train, df_test]\nfor dataset in full_data:\n    \n    dataset.loc[ dataset['Age'] <= 11, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 11) & (dataset['Age'] <= 18), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 18) & (dataset['Age'] <= 22), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 22) & (dataset['Age'] <= 27), 'Age'] = 3\n    dataset.loc[(dataset['Age'] > 27) & (dataset['Age'] <= 33), 'Age'] = 4\n    dataset.loc[(dataset['Age'] > 33) & (dataset['Age'] <= 40), 'Age'] = 5\n    dataset.loc[(dataset['Age'] > 40) & (dataset['Age'] <= 66), 'Age'] = 6\n    dataset.loc[ dataset['Age'] > 66, 'Age'] = 7\ndf_train[['Sex','Age','Survived']].groupby(['Sex','Age'],as_index=False).mean()","0e1b17a4":"df_train['Family_members'] = df_train['SibSp'] + df_train['Parch']\ndf_test['Family_members'] = df_test['SibSp'] + df_test['Parch']\ndf_train[['Family_members','Survived']].groupby(['Family_members'],as_index=False).mean()","bcbb01b8":"for data in full_data: #nan \uac12\uc744 U\ub85c \ub2e4 \ucc44\uc6b0\uaca0\uc2b5\ub2c8\ub2e4.\n    data['Cabin'].fillna('U', inplace=True)\n    data['Cabin'] = data['Cabin'].apply(lambda x: x[0])\n    data['Cabin'].unique()\n    data['Fare'].fillna(0,inplace=True)\n    data['Fare'] = data['Fare'].apply(lambda x: int(x))","8ddcd327":"df_train['Cabin']\n","bc434f54":"temp = df_train['Fare'].unique()\ntemp.sort()\ntemp","06990eef":"for dataset in full_data:\n    dataset.loc[ dataset['Fare']<=30, 'Fare'] = 0\n    dataset.loc[(dataset['Fare']>30)&(dataset['Fare']<=80), 'Fare'] = 1\n    dataset.loc[(dataset['Fare']>80)&(dataset['Fare']<=100), 'Fare'] = 2\n    dataset.loc[(dataset['Fare']>100), 'Fare'] = 3","6338e8cc":"# \uc784\uc758\uc758 U\uac12\uc5d0 \uac00\uaca9\uc5d0 \ub9de\uac8c\ub054 'Cabin'\uac12\uc744 \uce21\uc815\ud55c\ub2e4.\nfor dataset in full_data:\n    dataset.loc[(dataset['Cabin'] == 'U')&(dataset['Fare'] == 0), 'Cabin'] = 'G'\n    dataset.loc[(dataset['Cabin'] == 'U')&(dataset['Fare'] == 1), 'Cabin'] = 'T'\n    dataset.loc[(dataset['Cabin'] == 'U')&(dataset['Fare'] == 2), 'Cabin'] = 'C'\n    dataset.loc[(dataset['Cabin'] == 'U')&(dataset['Fare'] == 3), 'Cabin'] = 'B'\n\ndf_train[['Cabin','Survived']].groupby(['Cabin'],as_index=False).mean()","71d99ba7":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S') #'S'\ub85c \ub2e4 \ucc44\uc6cc\ub193\uc790.","c2a66901":"df_train.info()\ndf_test.info()","700f9d53":"features = [\"Pclass\", \"Sex\", \"Family_members\", \"Age\", \"Cabin\", \"Embarked\", \"Fare\"]\nX = pd.get_dummies(df_train[features])\nX_test = pd.get_dummies(df_test[features])\ny = df_train[\"Survived\"]","bc500eb1":"svm=SVC(C=1, kernel='rbf', coef0=1)\nsvm\nsvm.fit(X, y)","0c15fd86":"svm.score(X, y)\n","e64647b1":"predictions = svm.predict(X_test)\noutput = pd.DataFrame({'PassengerId': df_test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission01.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b8f9383a":"## Cabin","2ad466ae":"## Embarked"}}