{"cell_type":{"d46f0ba5":"code","6f465843":"code","c672f79f":"code","9e1b824b":"code","d6f055f4":"code","51d6b163":"code","d80b32dc":"code","85ba8eb6":"code","16e3b958":"code","c01c7459":"code","6ad38fa1":"code","d34203c1":"code","58f2fe51":"code","1f85e0e2":"code","dce4a8ff":"code","039749ff":"code","bd131f09":"code","d74ccf07":"code","43f2e4c9":"code","9793991c":"code","6103ac2d":"code","e5b54afa":"code","0b0a580d":"code","0557675d":"code","a15a2912":"code","ce221409":"code","1ae3becc":"code","c01b629c":"code","fdbc9c5c":"code","e350a24d":"code","1e9ac4d4":"code","08b4c8b8":"code","66f077b3":"code","9e9fc1b0":"code","50b0fa2a":"code","d898c14f":"code","90c2080b":"code","97454f8c":"code","275e2417":"code","c528521a":"code","916fcc8c":"code","a51ff246":"code","dfa1f3d5":"code","fc342dce":"code","0aca9a5f":"code","4d4a204d":"code","02477119":"code","f54dc98e":"code","f9f87848":"code","17e3e8b1":"code","5832b194":"code","a03f9af4":"code","748d6451":"code","7e9cf536":"code","322f6294":"code","56e05e0d":"code","132210ea":"code","8e059bb3":"code","4340f673":"code","81867e53":"code","01dfb5a3":"code","474836f3":"code","1d51e6a0":"code","57454711":"code","acc8087d":"code","a8084a38":"code","a4b804c3":"code","1e42ecfa":"code","93d9193b":"code","17b4c04d":"code","187bad9b":"code","fc50e33e":"code","54488b9b":"code","94b90a06":"code","89cad9c0":"code","68b5a0ff":"code","5822471b":"code","17247a69":"code","20cd8e79":"code","e40085cc":"code","18ec82fb":"code","f1699d64":"code","e1d9e0ff":"code","0699b7ea":"code","4d4e45d9":"code","c56781b7":"code","8ea20ce6":"code","96d8dce1":"code","9d3dad0d":"code","ccafa6d2":"code","cfeb6c3d":"code","e268766a":"code","7368dd0f":"code","181c39dc":"code","c2df475c":"code","abf80291":"code","66138aeb":"code","311e0565":"code","667b96e4":"code","2ce10d7e":"code","5a7b0ddd":"code","65892e24":"code","3f51d031":"code","10b2dac4":"code","d02e3577":"code","c4edc413":"code","55fb30c8":"code","41fda492":"code","a92e1c83":"code","8aa20698":"code","f094b903":"code","a56337d1":"code","d4ff5d84":"code","308624c4":"code","bbabe16a":"code","b5ac8541":"code","147ad02c":"code","9e6f7489":"code","9ae0e8c6":"code","c744f9f9":"code","d8dca9ae":"code","d1b8709f":"code","01088e9c":"code","50038a76":"code","69a76686":"code","e1b64e2f":"code","1ce015dc":"code","f2f73861":"code","8a693e74":"code","22de5780":"code","9b481306":"code","c8b446ae":"code","2994b7d0":"code","2d9065e5":"code","cbc32aae":"code","88192c68":"code","1399bf90":"code","13718d80":"code","f9d714cf":"code","7f34278f":"code","17a03294":"code","cf50cdad":"code","648c94ef":"code","fcc9e14d":"code","478f8ba3":"code","2cfcc26d":"code","b0899de4":"code","dc251adb":"code","bf80a9f1":"code","9ab933ba":"code","98459777":"code","5b94bf66":"code","48d0a99a":"code","5cf8aefe":"code","89054c68":"code","5385a59b":"code","ad4d21bc":"code","1c7a0152":"code","0db2e2c9":"code","9246546b":"code","1756acee":"code","0f2cc9c5":"code","7fa5a29a":"code","f89c02c1":"code","310128d5":"code","581afa0e":"code","ae2e7232":"code","a2cb387d":"code","7034f4c4":"code","9ad336b4":"code","50964dda":"code","ac5b96cc":"code","1479bd17":"code","fd03bd70":"code","01048afa":"code","6f1ade11":"code","6d23a483":"code","24d69afb":"code","abb23ac2":"code","f3b7759c":"code","be6e4325":"code","0dcb1345":"code","76c7cdc1":"code","55ca60bd":"code","dd0a514e":"code","7da5530a":"code","684ac7e6":"code","a329f1a9":"code","140a7cd2":"code","1e7265d8":"code","1369dc1f":"code","968b4d5e":"code","09daa738":"markdown","1299286e":"markdown","6390c7a2":"markdown","70ef8b13":"markdown","744a128d":"markdown","3cf160ed":"markdown","0942b3d7":"markdown","a843994e":"markdown","56f50c8b":"markdown","72d26bd8":"markdown","493b2427":"markdown","39e1996d":"markdown","84db7322":"markdown","ce817a12":"markdown","0d3f26a0":"markdown","14c276ec":"markdown","aac16bf6":"markdown","22d99378":"markdown"},"source":{"d46f0ba5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f465843":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn import preprocessing","c672f79f":"sns.set_style(\"whitegrid\")\nsns.color_palette(\"dark\")\nplt.style.use(\"fivethirtyeight\")","9e1b824b":"df = pd.read_csv('..\/input\/bri-data-hackathon-pa\/train.csv')\nprint('Row counts:', df.shape[0], '\\nColumn counts:', df.shape[1], '\\n')\ndf.head()","d6f055f4":"df.info()","51d6b163":"print(df.select_dtypes(include = np.number).shape)\ndf.select_dtypes(include = np.number)","d80b32dc":"print(df.select_dtypes(include = object).shape)\ndf.select_dtypes(include = object)","85ba8eb6":"features_num = list(df.select_dtypes(include = np.number).drop(columns = ['Best Performance'], axis = 1).columns)\nprint('Lenghth: ', len(features_num))\nfeatures_num","16e3b958":"features_cat = list(df.select_dtypes(include = object).columns)\nprint('Lenghth: ', len(features_cat))\nfeatures_cat","c01c7459":"features_list = features_num + features_cat\nprint('Lenghth: ', len(features_list))\nfeatures_list","6ad38fa1":"print('Unique Values:', df['Best Performance'].nunique(), '\\nType:', df['Best Performance'].dtypes)\ndf.groupby(['Best Performance']).count()","d34203c1":"df.isnull().sum()","58f2fe51":"df['Last_achievement_%'] = df['Last_achievement_%'].replace(np.nan, df['Last_achievement_%'].mean())","1f85e0e2":"df['Achievement_above_100%_during3quartal'] = df['Achievement_above_100%_during3quartal'].replace(np.nan, df['Achievement_above_100%_during3quartal'].mean())","dce4a8ff":"df.isnull().sum()","039749ff":"df.nunique()","bd131f09":"print('Any duplicated rows?')\nprint('No') if df.duplicated().values.any() == False else print('Yes')","d74ccf07":"df = df[df['person_level'] != 'PG08']","43f2e4c9":"plt.figure(figsize = (10, 7))\nsns.countplot(x = df['Best Performance'])","9793991c":"plt.figure(figsize = (25, 10))\nfor i in range(0, len(features_num)):\n    plt.subplot(1, 16, i + 1)\n    sns.boxplot(\n        y = df[features_num[i]],\n        color = 'blue'\n    )\n\nplt.tight_layout()","6103ac2d":"data_numeric_hist = df[features_num]\nk = len(data_numeric_hist.columns)\nn = 4\nm = (k - 1) \/\/ n + 1\nfig, axes = plt.subplots(m, n, figsize = (n * 5, m * 3))\nfor i, (name, col) in enumerate(data_numeric_hist.iteritems()):\n    r, c = i \/\/ n, i % n\n    ax = axes[r, c]\n    col.hist(\n        ax = ax,\n        color = 'yellow'\n    )\n    ax2 = col.plot.kde(\n        ax = ax,\n        secondary_y = True,\n        title = name,\n        color = 'red'\n    )\n    ax2.set_ylim(0)\n    \naxes[2,1].set_axis_off()\naxes[2,2].set_axis_off()\n\nplt.tight_layout()","e5b54afa":"plt.figure(figsize = (25, 5))\n\nfor i in range(0, len(features_cat)):\n    plt.subplot(1, 5, i + 1)\n    sns.countplot(\n        x = df[features_cat[i]],\n        color = 'red'\n    )\n\nplt.tight_layout()","0b0a580d":"tar_ = ['Best Performance']\nfields_ = features_num + tar_\n\ncheck_corr = df[fields_].corr()\n\nplt.figure(figsize = (25, 11))\nsns.heatmap(\n    check_corr,\n    annot = True,\n    fmt = '.2f',\n    cmap = 'RdYlBu'\n)\nplt.xticks(rotation = 0)\nplt.tick_params(labelsize = 11)\n\nplt.tight_layout()","0557675d":"df.head()","a15a2912":"df['job_level'].value_counts()","ce221409":"dummies_job_level = pd.get_dummies(df['job_level'], prefix = 'job_level')\ndf = pd.concat([df, dummies_job_level], axis = 1)","1ae3becc":"df['person_level'].value_counts()","c01b629c":"dummies_person_level = pd.get_dummies(df['person_level'], prefix = 'person_level')\ndf = pd.concat([df, dummies_person_level], axis = 1)","fdbc9c5c":"df['Employee_type'].value_counts()","e350a24d":"dummies_Employee_type = pd.get_dummies(df['Employee_type'], prefix = 'Employee_type')\ndf = pd.concat([df, dummies_Employee_type], axis = 1)","1e9ac4d4":"df['Education_level'].value_counts()","08b4c8b8":"dummies_Education_level = pd.get_dummies(df['Education_level'], prefix = 'Education_level')\ndf = pd.concat([df, dummies_Education_level], axis = 1)","66f077b3":"df['marital_status_maried(Y\/N)'].value_counts()","9e9fc1b0":"dummies_marital_status_maried = pd.get_dummies(df['marital_status_maried(Y\/N)'], prefix = 'marital_status_maried(Y\/N)')\ndf = pd.concat([df, dummies_marital_status_maried], axis = 1)","50b0fa2a":"df.head()","d898c14f":"plt.figure(figsize = (25, 10))\nfor i in range(0, len(features_num)):\n    plt.subplot(1, 16, i + 1)\n    sns.boxplot(\n        y = df[features_num[i]],\n        color = 'blue'\n    )\n\nplt.tight_layout()","90c2080b":"features = ['job_duration_in_current_job_level',\n 'job_duration_in_current_person_level',\n 'job_duration_in_current_branch',\n 'gender',\n 'age',\n 'number_of_dependences',\n 'GPA',\n 'year_graduated',\n 'job_duration_from_training',\n 'branch_rotation',\n 'job_rotation',\n 'assign_of_otherposition',\n 'annual leave',\n 'sick_leaves',\n 'Last_achievement_%',\n 'Achievement_above_100%_during3quartal']\n\n\nplt.figure(figsize = (25, 15))\nfor i in range(0, len(features)):\n    plt.subplot(4, 4, i + 1)\n    sns.histplot(\n        x = df[features[i]],\n        hue = df['Best Performance'],\n    )\n\nplt.tight_layout()","97454f8c":"df[['job_duration_in_current_job_level',\n 'job_duration_in_current_person_level',\n 'job_duration_in_current_branch',\n 'gender',\n 'age',\n 'number_of_dependences',\n 'GPA',\n 'year_graduated',\n 'job_duration_from_training',\n 'branch_rotation',\n 'job_rotation',\n 'assign_of_otherposition',\n 'annual leave',\n 'sick_leaves',\n 'Last_achievement_%',\n 'Achievement_above_100%_during3quartal']].skew()","275e2417":"df['job_duration_in_current_job_level_log'] = np.log1p(df['job_duration_in_current_job_level'])\ndf[['job_duration_in_current_job_level', 'job_duration_in_current_job_level_log']].skew()","c528521a":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['job_duration_in_current_job_level']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['job_duration_in_current_job_level_log']\n);","916fcc8c":"df['job_duration_in_current_branch_log'] = np.log1p(df['job_duration_in_current_branch'])\ndf[['job_duration_in_current_branch', 'job_duration_in_current_branch_log']].skew()","a51ff246":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['job_duration_in_current_branch']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['job_duration_in_current_branch_log']\n);","dfa1f3d5":"df['gender_log'] = np.log1p(df['gender'])\ndf[['gender', 'gender_log']].skew()","fc342dce":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['gender']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['gender_log']\n);","0aca9a5f":"df['age_log'] = np.log1p(df['age'])\ndf[['age', 'age_log']].skew()","4d4a204d":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['age']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['age_log']\n);","02477119":"Q1 = df['age_log'].quantile(0.25)\nQ3 = df['age_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","f54dc98e":"def age_outlier(x):\n    if x['age_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['age_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['age_log']\n    return ap_outlier","f9f87848":"df['age_log_outlier'] = df.apply(lambda x: age_outlier(x), axis = 1)\ndf.head()","17e3e8b1":"df[(df['age_log_outlier'] < low_limit) | (df['age_log_outlier'] > high_limit)].shape","5832b194":"df[['age','age_log','age_log_outlier']].skew()","a03f9af4":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = df['age']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = df['age_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = df['age_log_outlier']\n);","748d6451":"df['GPA_log'] = np.log1p(df['GPA'])\ndf[['GPA', 'GPA_log']].skew()","7e9cf536":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['GPA']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['GPA_log']\n);","322f6294":"df['year_graduated_log']= np.log1p(df['year_graduated'])\ndf[['year_graduated', 'year_graduated_log']].skew()","56e05e0d":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['year_graduated']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['year_graduated_log']\n);","132210ea":"Q1 = df['year_graduated_log'].quantile(0.25)\nQ3 = df['year_graduated_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)\n","8e059bb3":"def year_graduated_outlier(x):\n    if x['year_graduated_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['year_graduated_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['year_graduated_log']\n    return ap_outlier\n","4340f673":"df['year_graduated_log_outlier'] = df.apply(lambda x: year_graduated_outlier(x), axis = 1)\ndf.head()","81867e53":"df[(df['year_graduated_log_outlier'] < low_limit) | (df['year_graduated_log_outlier'] > high_limit)].shape","01dfb5a3":"df[['year_graduated','year_graduated_log','year_graduated_log_outlier']].skew()","474836f3":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = df['year_graduated']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = df['year_graduated_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = df['year_graduated_log_outlier']\n);","1d51e6a0":"df['job_duration_from_training_log'] = np.log1p(df['job_duration_from_training'])\ndf[['job_duration_from_training', 'job_duration_from_training_log']].skew()","57454711":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['job_duration_from_training']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['job_duration_from_training_log']\n);","acc8087d":"Q1 = df['job_duration_from_training_log'].quantile(0.25)\nQ3 = df['job_duration_from_training_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)\n","a8084a38":"\ndef job_duration_from_training_outlier(x):\n    if x['job_duration_from_training_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['job_duration_from_training_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['job_duration_from_training_log']\n    return ap_outlier\n","a4b804c3":"df['job_duration_from_training_log_outlier'] = df.apply(lambda x: job_duration_from_training_outlier(x), axis = 1)\ndf.head()","1e42ecfa":"df[(df['job_duration_from_training_log_outlier'] < low_limit) | (df['job_duration_from_training_log_outlier'] > high_limit)].shape","93d9193b":"df[['job_duration_from_training','job_duration_from_training_log','job_duration_from_training_log_outlier']].skew()","17b4c04d":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = df['job_duration_from_training']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = df['job_duration_from_training_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = df['job_duration_from_training_log_outlier']\n);","187bad9b":"df['branch_rotation_log'] = np.log(df['branch_rotation'])\ndf[['branch_rotation', 'branch_rotation_log']].skew()","fc50e33e":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['branch_rotation']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['branch_rotation_log']\n);","54488b9b":"df['job_rotation_log']= np.log(df['job_rotation'])\ndf[['job_rotation', 'job_rotation_log']].skew()","94b90a06":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['job_rotation']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['job_rotation_log']\n);","89cad9c0":"df['assign_of_otherposition_log'] = np.log1p(df['assign_of_otherposition'])\ndf[['assign_of_otherposition', 'assign_of_otherposition_log']].skew()","68b5a0ff":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['assign_of_otherposition']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['assign_of_otherposition_log']\n);","5822471b":"Q1 = df['assign_of_otherposition_log'].quantile(0.25)\nQ3 = df['assign_of_otherposition_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)\n\n","17247a69":"def assign_of_otherposition_outlier(x):\n    if x['assign_of_otherposition_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['assign_of_otherposition_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['assign_of_otherposition_log']\n    return ap_outlier","20cd8e79":"df['assign_of_otherposition_log_outlier'] = df.apply(lambda x: assign_of_otherposition_outlier(x), axis = 1)\ndf.head()","e40085cc":"df[(df['assign_of_otherposition_log_outlier'] < low_limit) | (df['assign_of_otherposition_log_outlier'] > high_limit)].shape","18ec82fb":"df[['assign_of_otherposition','assign_of_otherposition_log','assign_of_otherposition_log_outlier']].skew()","f1699d64":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = df['assign_of_otherposition']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = df['assign_of_otherposition_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = df['assign_of_otherposition_log_outlier']\n);","e1d9e0ff":"df['annual leave_log'] = np.log1p(df['annual leave'])\ndf[['annual leave', 'annual leave_log']].skew()","0699b7ea":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['annual leave']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['annual leave_log']\n);","4d4e45d9":"df['sick_leaves_log'] = np.log1p(df['sick_leaves'])\ndf[['sick_leaves', 'sick_leaves_log']].skew()","c56781b7":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['sick_leaves']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['sick_leaves_log']\n);","8ea20ce6":"Q1 = df['sick_leaves_log'].quantile(0.25)\nQ3 = df['sick_leaves_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","96d8dce1":"def sick_leaves_outlier(x):\n    if x['sick_leaves_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['sick_leaves_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['sick_leaves_log']\n    return ap_outlier","9d3dad0d":"df['sick_leaves_log_outlier'] = df.apply(lambda x: sick_leaves_outlier(x), axis = 1)\ndf.head()","ccafa6d2":"df[(df['sick_leaves_log_outlier'] < low_limit) | (df['sick_leaves_log_outlier'] > high_limit)].shape","cfeb6c3d":"df[['sick_leaves','sick_leaves_log','sick_leaves_log_outlier']].skew()","e268766a":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = df['sick_leaves']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = df['sick_leaves_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = df['sick_leaves_log_outlier']\n);","7368dd0f":"df['Achievement_above_100%_during3quartal_log'] = np.log1p(df['Achievement_above_100%_during3quartal'])\ndf[['Achievement_above_100%_during3quartal', 'Achievement_above_100%_during3quartal_log']].skew()","181c39dc":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = df['Achievement_above_100%_during3quartal']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = df['Achievement_above_100%_during3quartal_log']\n);","c2df475c":"df.head()","abf80291":"from sklearn.preprocessing import StandardScaler","66138aeb":"scaled_features = df.copy()","311e0565":"col_names = ['job_level_JG03', 'job_level_JG04',\n       'job_level_JG05', 'person_level_PG01', 'person_level_PG02',\n       'person_level_PG03', 'person_level_PG04', 'person_level_PG05',\n       'person_level_PG06', 'person_level_PG07',\n       'Employee_type_RM_type_A', 'Employee_type_RM_type_B',\n       'Employee_type_RM_type_C', 'Education_level_level_0',\n       'Education_level_level_1', 'Education_level_level_2',\n       'Education_level_level_3', 'Education_level_level_4',\n       'Education_level_level_5', 'marital_status_maried(Y\/N)_N',\n       'marital_status_maried(Y\/N)_Y', 'job_duration_in_current_job_level_log',\n       'job_duration_in_current_branch_log', 'job_duration_in_current_person_level',\n        'gender_log','GPA_log', 'branch_rotation_log', \n        'job_rotation_log','Last_achievement_%',\n        'annual leave_log','number_of_dependences', \n       'Achievement_above_100%_during3quartal_log', 'age_log_outlier',\n       'year_graduated_log_outlier', 'job_duration_from_training_log_outlier',\n       'assign_of_otherposition_log_outlier', 'sick_leaves_log_outlier']\nfeatures = scaled_features[col_names]\nscaler = StandardScaler().fit(features.values)\nfeatures = scaler.transform(features.values)","667b96e4":"scaled_features[col_names] = features\nscaled_features[['job_level_JG03', 'job_level_JG04',\n       'job_level_JG05', 'person_level_PG01', 'person_level_PG02',\n       'person_level_PG03', 'person_level_PG04', 'person_level_PG05',\n       'person_level_PG06', 'person_level_PG07', \n       'Employee_type_RM_type_A', 'Employee_type_RM_type_B',\n       'Employee_type_RM_type_C', 'Education_level_level_0',\n       'Education_level_level_1', 'Education_level_level_2',\n       'Education_level_level_3', 'Education_level_level_4',\n       'Education_level_level_5', 'marital_status_maried(Y\/N)_N',\n       'marital_status_maried(Y\/N)_Y', 'job_duration_in_current_job_level_log',\n       'job_duration_in_current_branch_log', 'job_duration_in_current_person_level',\n        'gender_log','GPA_log', 'branch_rotation_log', \n        'job_rotation_log','Last_achievement_%',\n        'annual leave_log','number_of_dependences', \n       'Achievement_above_100%_during3quartal_log', 'age_log_outlier',\n       'year_graduated_log_outlier', 'job_duration_from_training_log_outlier',\n       'assign_of_otherposition_log_outlier', 'sick_leaves_log_outlier']].head()","2ce10d7e":"scaled_features[['job_level_JG03', 'job_level_JG04',\n       'job_level_JG05', 'person_level_PG01', 'person_level_PG02',\n       'person_level_PG03', 'person_level_PG04', 'person_level_PG05',\n       'person_level_PG06', 'person_level_PG07', \n       'Employee_type_RM_type_A', 'Employee_type_RM_type_B',\n       'Employee_type_RM_type_C', 'Education_level_level_0',\n       'Education_level_level_1', 'Education_level_level_2',\n       'Education_level_level_3', 'Education_level_level_4',\n       'Education_level_level_5', 'marital_status_maried(Y\/N)_N',\n       'marital_status_maried(Y\/N)_Y', 'job_duration_in_current_job_level_log',\n       'job_duration_in_current_branch_log', 'job_duration_in_current_person_level',\n        'gender_log','GPA_log', 'branch_rotation_log', \n        'job_rotation_log','Last_achievement_%',\n        'annual leave_log','number_of_dependences', \n       'Achievement_above_100%_during3quartal_log', 'age_log_outlier',\n       'year_graduated_log_outlier', 'job_duration_from_training_log_outlier',\n       'assign_of_otherposition_log_outlier', 'sick_leaves_log_outlier']].describe()","5a7b0ddd":"scaled_features['Best Performance'].value_counts()","65892e24":"sns.countplot(\n    x = scaled_features['Best Performance'],\n    palette = 'PuBu'\n)\n\nplt.title('Target Variable Distribution', fontsize = 20, fontweight = 'bold')\n\nplt.tight_layout()","3f51d031":"data_ready = scaled_features[['job_level_JG03', 'job_level_JG04',\n       'job_level_JG05', 'person_level_PG01', 'person_level_PG02',\n       'person_level_PG03', 'person_level_PG04', 'person_level_PG05',\n       'person_level_PG06', 'person_level_PG07', \n       'Employee_type_RM_type_A', 'Employee_type_RM_type_B',\n       'Employee_type_RM_type_C', 'Education_level_level_0',\n       'Education_level_level_1', 'Education_level_level_2',\n       'Education_level_level_3', 'Education_level_level_4',\n       'Education_level_level_5', 'marital_status_maried(Y\/N)_N',\n       'marital_status_maried(Y\/N)_Y',  'job_duration_in_current_person_level',\n        'Last_achievement_%','number_of_dependences','job_duration_in_current_job_level_log',\n       'job_duration_in_current_branch_log',\n        'gender_log','GPA_log', 'branch_rotation_log', \n        'job_rotation_log','annual leave_log', \n       'Achievement_above_100%_during3quartal_log', 'age_log_outlier',\n       'year_graduated_log_outlier', 'job_duration_from_training_log_outlier',\n       'assign_of_otherposition_log_outlier', 'sick_leaves_log_outlier','Best Performance']]\ndata_ready","10b2dac4":"from imblearn import over_sampling","d02e3577":"X_imb = data_ready.drop(['Best Performance'], axis = 1)\ny_imb = data_ready['Best Performance']\n\nX_over_smote, y_over_smote = over_sampling.SMOTE().fit_resample(X_imb, y_imb)","c4edc413":"data_over_smote = pd.concat([X_over_smote, y_over_smote], axis = 1)\ndata_over_smote","55fb30c8":"df['Best Performance'].value_counts()","41fda492":"data_over_smote['Best Performance'].value_counts()","a92e1c83":"data_over_smote.shape","8aa20698":"fig, ax = plt.subplots(1, 2, figsize = (20.7, 8.27))\n\nsns.countplot(\n    x = 'Best Performance',\n    data = scaled_features,\n    palette = 'PuBu',\n    ax = ax[0]\n)\n\nsns.countplot(\n    x = 'Best Performance',\n    data = data_over_smote,\n    palette = 'YlOrBr',\n    ax = ax[1]\n)\n\nax[0].set_title('Target Variable before Oversampling', fontsize = 20, fontweight = 'bold')\nax[1].set_title('Target Variable after Oversampling', fontsize = 20, fontweight = 'bold')\n\nplt.tight_layout()","f094b903":"data_over_smote.info()","a56337d1":"X = data_over_smote[['job_level_JG03', 'job_level_JG04',\n       'job_level_JG05', 'person_level_PG01', 'person_level_PG02',\n       'person_level_PG03', 'person_level_PG04', 'person_level_PG05',\n       'person_level_PG06', 'person_level_PG07', \n       'Employee_type_RM_type_A', 'Employee_type_RM_type_B',\n       'Employee_type_RM_type_C', 'Education_level_level_0',\n       'Education_level_level_1', 'Education_level_level_2',\n       'Education_level_level_3', 'Education_level_level_4',\n       'Education_level_level_5', 'marital_status_maried(Y\/N)_N',\n       'marital_status_maried(Y\/N)_Y',  'job_duration_in_current_person_level',\n        'Last_achievement_%','number_of_dependences','job_duration_in_current_job_level_log',\n       'job_duration_in_current_branch_log',\n        'gender_log','GPA_log', 'branch_rotation_log', \n        'job_rotation_log','annual leave_log', \n       'Achievement_above_100%_during3quartal_log', 'age_log_outlier',\n       'year_graduated_log_outlier', 'job_duration_from_training_log_outlier',\n       'assign_of_otherposition_log_outlier', 'sick_leaves_log_outlier'\n]]\n\ny = data_over_smote['Best Performance']","d4ff5d84":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","308624c4":"from xgboost import XGBClassifier\nxgb = XGBClassifier(random_state = 42, eval_metric = 'auc', use_label_encoder = False)\nxgb.fit(X_train, y_train)","bbabe16a":"y_predicted_xgb = xgb.predict(X_test)","b5ac8541":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nprint('\\nConfusion Matrix: Testing Data\\n', confusion_matrix(y_test, y_predicted_xgb))\n\nprint('\\nROC AUC Score: Testing Data\\n', roc_auc_score(y_test, y_predicted_xgb))\n\nprint('\\nAccuracy: Testing Data\\n', accuracy_score(y_test, y_predicted_xgb))\n\nprint('\\nClassification Report: Testing Data\\n', classification_report(y_test, y_predicted_xgb, digits = 6))","147ad02c":"train_predicted_xgb = xgb.predict(X_train)","9e6f7489":"print('\\nConfusion Matrix: Training Data\\n', confusion_matrix(y_train, train_predicted_xgb))\n\nprint('\\nROC AUC Score: Training Data\\n', roc_auc_score(y_train, train_predicted_xgb))\n\nprint('\\nAccuracy: Training Data\\n', accuracy_score(y_train, train_predicted_xgb))\n\nprint('\\nClassification Report: Training Datat\\n', classification_report(y_train, train_predicted_xgb, digits = 6))","9ae0e8c6":"feature_importances = pd.Series(xgb.feature_importances_, index = X.columns)\nax = feature_importances.nlargest(21).plot(kind = 'barh')\nax.invert_yaxis()\nplt.xlabel('score')\nplt.ylabel('feature')\nplt.title('Feature Importance Score')\n\nplt.tight_layout()","c744f9f9":"dftest= pd.read_csv('..\/input\/bri-data-hackathon-pa\/test.csv')","d8dca9ae":"dftest","d1b8709f":"dftest['job_level'].value_counts()\n\ndummies_job_level = pd.get_dummies(dftest['job_level'], prefix = 'job_level')\ndftest = pd.concat([dftest, dummies_job_level], axis = 1)","01088e9c":"dftest.head()","50038a76":"dftest['person_level'].value_counts()\ndummies_person_level = pd.get_dummies(dftest['person_level'], prefix = 'person_level')\ndftest = pd.concat([dftest, dummies_person_level], axis = 1)","69a76686":"dftest['Employee_type'].value_counts()\ndummies_Employee_type = pd.get_dummies(dftest['Employee_type'], prefix = 'Employee_type')\ndftest = pd.concat([dftest, dummies_Employee_type], axis = 1)\n","e1b64e2f":"dftest['Education_level'].value_counts()\ndummies_Education_level = pd.get_dummies(dftest['Education_level'], prefix = 'Education_level')\ndftest = pd.concat([dftest, dummies_Education_level], axis = 1)","1ce015dc":"dftest['marital_status_maried(Y\/N)'].value_counts()\ndummies_marital_status_maried = pd.get_dummies(dftest['marital_status_maried(Y\/N)'], prefix = 'marital_status_maried(Y\/N)')\ndftest = pd.concat([dftest, dummies_marital_status_maried], axis = 1)","f2f73861":"dftest['job_duration_in_current_job_level_log'] = np.log1p(dftest['job_duration_in_current_job_level'])\ndftest[['job_duration_in_current_job_level', 'job_duration_in_current_job_level_log']].skew()","8a693e74":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['job_duration_in_current_job_level']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['job_duration_in_current_job_level_log']\n);\n","22de5780":"dftest['job_duration_in_current_branch_log'] = np.log1p(dftest['job_duration_in_current_branch'])\ndftest[['job_duration_in_current_branch', 'job_duration_in_current_branch_log']].skew()","9b481306":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['job_duration_in_current_branch']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['job_duration_in_current_branch_log']\n);","c8b446ae":"dftest['gender_log'] = np.log1p(dftest['gender'])\ndftest[['gender', 'gender_log']].skew()","2994b7d0":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['gender']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['gender_log']\n);","2d9065e5":"dftest['age_log'] = np.log1p(dftest['age'])\ndftest[['age', 'age_log']].skew()\n\nplt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['age']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['age_log']\n);\n","cbc32aae":"Q1 = dftest['age_log'].quantile(0.25)\nQ3 = dftest['age_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)\n","88192c68":"def age_outlier(x):\n    if x['age_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['age_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['age_log']\n    return ap_outlier\n","1399bf90":"dftest['age_log_outlier'] = dftest.apply(lambda x: age_outlier(x), axis = 1)\ndftest.head()","13718d80":"dftest[(dftest['age_log_outlier'] < low_limit) | (dftest['age_log_outlier'] > high_limit)].shape\ndftest[['age','age_log','age_log_outlier']].skew()","f9d714cf":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = dftest['age']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = dftest['age_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = dftest['age_log_outlier']\n);","7f34278f":"dftest['GPA_log'] = np.log1p(dftest['GPA'])\ndftest[['GPA', 'GPA_log']].skew()","17a03294":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['GPA']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['GPA_log']\n);","cf50cdad":"dftest['year_graduated_log']= np.log1p(dftest['year_graduated'])\ndftest[['year_graduated', 'year_graduated_log']].skew()","648c94ef":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['year_graduated']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['year_graduated_log']\n);\n","fcc9e14d":"Q1 = dftest['year_graduated_log'].quantile(0.25)\nQ3 = dftest['year_graduated_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","478f8ba3":"def year_graduated_outlier(x):\n    if x['year_graduated_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['year_graduated_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['year_graduated_log']\n    return ap_outlier","2cfcc26d":"dftest['year_graduated_log_outlier'] = dftest.apply(lambda x: year_graduated_outlier(x), axis = 1)\ndf.head()","b0899de4":"dftest[(dftest['year_graduated_log_outlier'] < low_limit) | (dftest['year_graduated_log_outlier'] > high_limit)].shape\ndftest[['year_graduated','year_graduated_log','year_graduated_log_outlier']].skew()","dc251adb":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = dftest['year_graduated']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = dftest['year_graduated_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = dftest['year_graduated_log_outlier']\n);\n","bf80a9f1":"dftest['job_duration_from_training_log'] = np.log1p(dftest['job_duration_from_training'])\ndftest[['job_duration_from_training', 'job_duration_from_training_log']].skew()","9ab933ba":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['job_duration_from_training']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['job_duration_from_training_log']\n);","98459777":"Q1 = dftest['job_duration_from_training_log'].quantile(0.25)\nQ3 = dftest['job_duration_from_training_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","5b94bf66":"def job_duration_from_training_outlier(x):\n    if x['job_duration_from_training_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['job_duration_from_training_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['job_duration_from_training_log']\n    return ap_outlier","48d0a99a":"dftest['job_duration_from_training_log_outlier'] = dftest.apply(lambda x: job_duration_from_training_outlier(x), axis = 1)\ndftest.head()","5cf8aefe":"dftest[(dftest['job_duration_from_training_log_outlier'] < low_limit) | (dftest['job_duration_from_training_log_outlier'] > high_limit)].shape\ndftest[['job_duration_from_training','job_duration_from_training_log','job_duration_from_training_log_outlier']].skew()","89054c68":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = dftest['job_duration_from_training']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = dftest['job_duration_from_training_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = dftest['job_duration_from_training_log_outlier']\n);","5385a59b":"dftest['branch_rotation_log'] = np.log(dftest['branch_rotation'])\ndftest[['branch_rotation', 'branch_rotation_log']].skew()","ad4d21bc":"\nplt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['branch_rotation']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['branch_rotation_log']\n);","1c7a0152":"dftest['job_rotation_log']= np.log(dftest['job_rotation'])\ndftest[['job_rotation', 'job_rotation_log']].skew()","0db2e2c9":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['job_rotation']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['job_rotation_log']\n);","9246546b":"dftest['assign_of_otherposition_log'] = np.log1p(dftest['assign_of_otherposition'])\ndftest[['assign_of_otherposition', 'assign_of_otherposition_log']].skew()","1756acee":"\nplt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['assign_of_otherposition']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['assign_of_otherposition_log']\n);","0f2cc9c5":"Q1 = dftest['assign_of_otherposition_log'].quantile(0.25)\nQ3 = dftest['assign_of_otherposition_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)","7fa5a29a":"\ndef assign_of_otherposition_outlier(x):\n    if x['assign_of_otherposition_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['assign_of_otherposition_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['assign_of_otherposition_log']\n    return ap_outlier","f89c02c1":"dftest['assign_of_otherposition_log_outlier'] = dftest.apply(lambda x: assign_of_otherposition_outlier(x), axis = 1)\ndftest.head()\n","310128d5":"dftest[(dftest['assign_of_otherposition_log_outlier'] < low_limit) | (dftest['assign_of_otherposition_log_outlier'] > high_limit)].shape\n\ndftest[['assign_of_otherposition','assign_of_otherposition_log','assign_of_otherposition_log_outlier']].skew()\n","581afa0e":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = dftest['assign_of_otherposition']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = dftest['assign_of_otherposition_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = dftest['assign_of_otherposition_log_outlier']\n);","ae2e7232":"dftest['annual leave_log'] = np.log1p(dftest['annual leave'])\ndftest[['annual leave', 'annual leave_log']].skew()","a2cb387d":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['annual leave']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['annual leave_log']\n);","7034f4c4":"dftest['sick_leaves_log'] = np.log1p(dftest['sick_leaves'])\ndftest[['sick_leaves', 'sick_leaves_log']].skew()","9ad336b4":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['sick_leaves']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['sick_leaves_log']\n);","50964dda":"Q1 = dftest['sick_leaves_log'].quantile(0.25)\nQ3 = dftest['sick_leaves_log'].quantile(0.75)\nIQR = Q3 - Q1\nlow_limit = Q1 - (1.5 * IQR)\nhigh_limit = Q3 + (1.5 * IQR)\n\nprint(low_limit)\nprint(high_limit)\n","ac5b96cc":"def sick_leaves_outlier(x):\n    if x['sick_leaves_log'] < low_limit:\n        ap_outlier = low_limit\n    elif x['sick_leaves_log'] > high_limit:\n        ap_outlier = high_limit\n    else:\n        ap_outlier = x['sick_leaves_log']\n    return ap_outlier","1479bd17":"dftest['sick_leaves_log_outlier'] = dftest.apply(lambda x: sick_leaves_outlier(x), axis = 1)\ndf.head()\n\n\ndftest[(dftest['sick_leaves_log_outlier'] < low_limit) | (dftest['sick_leaves_log_outlier'] > high_limit)].shape\n\n\ndftest[['sick_leaves','sick_leaves_log','sick_leaves_log_outlier']].skew()","fd03bd70":"plt.figure(figsize = (20.7, 12))\nplt.subplot(3, 1, 1)\nsns.boxplot(\n    x = dftest['sick_leaves']\n)\n\nplt.subplot(3, 1, 2)\nsns.boxplot(\n    x = dftest['sick_leaves_log']\n);\nplt.subplot(3, 1, 3)\nsns.boxplot(\n    x = dftest['sick_leaves_log_outlier']\n);","01048afa":"dftest['Achievement_above_100%_during3quartal_log'] = np.log1p(dftest['Achievement_above_100%_during3quartal'])\ndftest[['Achievement_above_100%_during3quartal', 'Achievement_above_100%_during3quartal_log']].skew()\n","6f1ade11":"plt.figure(figsize = (20.7, 9))\nplt.subplot(2, 1, 1)\nsns.boxplot(\n    x = dftest['Achievement_above_100%_during3quartal']\n)\n\nplt.subplot(2, 1, 2)\nsns.boxplot(\n    x = dftest['Achievement_above_100%_during3quartal_log']\n);","6d23a483":"dftest.info()","24d69afb":"feature_test = dftest[['job_level_JG03', 'job_level_JG04',\n       'job_level_JG05', 'person_level_PG01', 'person_level_PG02',\n       'person_level_PG03', 'person_level_PG04', 'person_level_PG05',\n       'person_level_PG06', 'person_level_PG07', \n       'Employee_type_RM_type_A', 'Employee_type_RM_type_B',\n       'Employee_type_RM_type_C', 'Education_level_level_0',\n       'Education_level_level_1', 'Education_level_level_2',\n       'Education_level_level_3', 'Education_level_level_4',\n       'Education_level_level_5', 'marital_status_maried(Y\/N)_N',\n       'marital_status_maried(Y\/N)_Y', 'job_duration_in_current_job_level_log',\n       'job_duration_in_current_branch_log', 'job_duration_in_current_person_level',\n        'gender_log','GPA_log', 'branch_rotation_log', \n        'job_rotation_log','Last_achievement_%',\n        'annual leave_log','number_of_dependences', \n       'Achievement_above_100%_during3quartal_log', 'age_log_outlier',\n       'year_graduated_log_outlier', 'job_duration_from_training_log_outlier',\n       'assign_of_otherposition_log_outlier', 'sick_leaves_log_outlier']]\n","abb23ac2":"feature_test.head()","f3b7759c":"test = pd.concat([feature_test],axis=1)","be6e4325":"test.head()","0dcb1345":"# from sklearn.model_selection import RandomizedSearchCV\n# xgb = XGBClassifier(random_state = 42, eval_metric = 'auc', use_label_encoder = False)\n\n# clf = RandomizedSearchCV(xgb, hyperparameters, cv = 10, scoring = 'roc_auc')\n\n# best_model = clf.fit(X_train, y_train)\n\n# test_predicted = best_model.predict(X_test)\n","76c7cdc1":"test.info()","55ca60bd":"test.head()","dd0a514e":"test = pd.DataFrame(test)\ntest","7da5530a":"x_train = data_over_smote.iloc[:,data_over_smote.columns!='Best Performance']\ny_train = data_over_smote['Best Performance'].values\nx_test = test[x_train.columns]","684ac7e6":"from xgboost import XGBClassifier\nxgb = XGBClassifier(random_state = 42, eval_metric = 'auc', use_label_encoder = False)\nxgb.fit(x_train, y_train)\nxgb_predict = xgb.predict(x_test)\nprint(xgb_predict)","a329f1a9":"xgb_proba = xgb.predict_proba(x_test)[:,1]\nxgb_proba","140a7cd2":"len(xgb_proba)","1e7265d8":"Final= pd.DataFrame({\"Best Performance\":xgb_proba})\nFinal.index.name = 'index'\nFinal.to_csv('Final.csv', index=False)\nprint('Sukses')","1369dc1f":"dfPrediksi = pd.DataFrame(xgb_predict)\ndfPrediksi.value_counts()","968b4d5e":"dfo = pd.read_csv('Final.csv')\ndfo","09daa738":"### Features & Target","1299286e":"## DATA TEST","6390c7a2":"## Standardization","70ef8b13":"## Feature Engineering","744a128d":"## OUTLIER","3cf160ed":"### Non-Numerical Data (Categorical)","0942b3d7":"# **Describe Data**","a843994e":"## Data Cleansing","56f50c8b":"## Train Test Split","72d26bd8":"## Feature Engineering","493b2427":"## Correlation of Each Feature towards Target","39e1996d":"https:\/\/medium.com\/@atanudan\/kurtosis-skew-function-in-pandas-aa63d72e20de\n\n- If the skewness is between -0.5 and 0.5, the data are fairly symmetrical\n- If the skewness is between -1 and \u2014 0.5 or between 0.5 and 1, the data are moderately skewed\n- If the skewness is less than -1 or greater than 1, the data are highly skewed","84db7322":"## Feature Engineering","ce817a12":"## OUTLIER","0d3f26a0":"### Target","14c276ec":"## Imbalanced Class","aac16bf6":"### Numerical Data","22d99378":"#### Features"}}