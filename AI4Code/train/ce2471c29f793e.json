{"cell_type":{"59c3e609":"code","bed3fbfe":"code","60b0b16b":"code","fbd37449":"code","f5ec2b18":"code","e346d61b":"code","1c4ab14b":"code","d3c59313":"code","df581ee3":"code","8baf6c87":"code","f8bff49c":"code","121d6599":"code","fd87a3b2":"code","90bc5c65":"code","3ce087b5":"code","c8084a21":"code","360af83c":"code","53cfd16a":"markdown","5ab46c89":"markdown","885b3314":"markdown","976ffe98":"markdown","e35d7d43":"markdown","1f41e799":"markdown","aa973c93":"markdown"},"source":{"59c3e609":"import plotly.express as px\nimport pandas as pd \ndf = pd.read_csv(\"..\/input\/spam-url-prediction\/url_spam_classification.csv\")\ndf.head()","bed3fbfe":"vc = df['is_spam'].value_counts().to_frame().reset_index().head(15)\nfig = px.bar(x=vc[\"is_spam\"][::-1], y=vc[\"index\"][::-1], orientation='h', color=vc['index'])\nfig.update_layout(title = \"Spam URL Distributions\", xaxis_title=\"Num URLs\", yaxis_title = \"\", width=600, plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","60b0b16b":"df['len_url'] = df['url'].apply(lambda x : len(x))\ndf['contains_subscribe'] = df['url'].apply(lambda x : 1 if \"subscribe\" in x else 0)\ndf['contains_hash'] = df['url'].apply(lambda x : 1 if \"#\" in x else 0)\ndf['num_digits'] = df['url'].apply(lambda x : len(\"\".join(_ for _ in x if _.isdigit())) )\ndf['non_https'] = df['url'].apply(lambda x : 1 if \"https\" in x else 0)\ndf['num_words'] = df['url'].apply(lambda x : len(x.split(\"\/\")))\ndf['contains_?'] = df['url'].apply(lambda x : 1 if \"?\" in x else 0)\ndf['contains_www'] = df['url'].apply(lambda x : 1 if \"www\" in x else 0)\ndf.head()","fbd37449":"fig = px.histogram(df, x=\"len_url\", color=\"is_spam\")\nfig.update_layout(title = \"URLs length by Spam \/ Non Spam\", xaxis_title=\"URL Length\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","f5ec2b18":"fig = px.histogram(df, x=\"num_digits\", color=\"is_spam\")\nfig.update_layout(title = \"URLs Digit Counts by Spam \/ Non Spam\", xaxis_title=\"Number of Digits\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","e346d61b":"fig = px.histogram(df, x=\"num_words\", color=\"is_spam\")\nfig.update_layout(title = \"URLs Number of Words by Spam \/ Non Spam\", xaxis_title=\"Num Words\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","1c4ab14b":"fig = px.histogram(df, x=\"contains_subscribe\", color=\"is_spam\")\nfig.update_layout(title = \"contains_subscribe\", xaxis_title=\"contains_subscribe\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","d3c59313":"fig = px.histogram(df, x=\"contains_hash\", color=\"is_spam\")\nfig.update_layout(title = \"contains_hash\", xaxis_title=\"contains_hash\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","df581ee3":"fig = px.histogram(df, x=\"non_https\", color=\"is_spam\")\nfig.update_layout(title = \"non_https\", xaxis_title=\"non_https\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","8baf6c87":"fig = px.histogram(df, x=\"contains_?\", color=\"is_spam\")\nfig.update_layout(title = \"contains_?\", xaxis_title=\"contains_?\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","f8bff49c":"fig = px.histogram(df, x=\"contains_www\", color=\"is_spam\")\nfig.update_layout(title = \"contains_www\", xaxis_title=\"contains_www\", yaxis_title = \"\", plot_bgcolor=\"#fff\", showlegend = False)\nfig.show()","121d6599":"from sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nimport matplotlib.pyplot as plt \nfrom sklearn.metrics import classification_report,plot_confusion_matrix \nfrom sklearn.metrics import roc_auc_score, roc_curve\n\ntarget = 'is_spam'\nfeatures = [f for f in df.columns if f not in [\"url\", target]]\nX_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=0)\n\nsc = MinMaxScaler()\nclf = ExtraTreesClassifier()\npipe_clf = Pipeline([('scaler', sc), ('clf', clf)])\npipe_clf.fit(X_train, y_train)\n\ntest_probas = pipe_clf.predict_proba(X_test)[:,1]\n\nplt.figure(figsize=(10,8))\nfpr, tpr, tresholds = roc_curve(y_test, test_probas)\nplt.plot(fpr, tpr)\nplt.title('ROC Curve')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\n\nprint('ROC-AUC-score: ', roc_auc_score(y_test, test_probas))","fd87a3b2":"print(\"Accuracy score {:.2f} %\\n\".format(pipe_clf.score(X_test,y_test)*100))","90bc5c65":"plot_confusion_matrix(pipe_clf,X_test,y_test,cmap=plt.cm.Blues)","3ce087b5":"target = 'is_spam'\nfeatures = [f for f in df.columns if f not in [\"url\", target]]\nX_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=0)\n\nclf = ExtraTreesClassifier(random_state=42)\nclf.fit(X_train, y_train)\n\npredict = clf.predict(X_test)\n\nplt.figure(figsize=(10,8))\nfpr, tpr, tresholds = roc_curve(y_test, predict)\nplt.plot(fpr, tpr)\nplt.title('ROC Curve')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\n\nprint('ROC-AUC-score: ', roc_auc_score(y_test, predict))","c8084a21":"print(\"Accuracy score {:.2f} %\\n\".format(clf.score(X_test,y_test)*100))","360af83c":"plot_confusion_matrix(clf,X_test,y_test,cmap=plt.cm.Blues)","53cfd16a":"# I copied and edited https:\/\/www.kaggle.com\/shivamb\/spam-url-classification-getting-started. Thank you very much for sharing the note book !\n\n# In my case, I tried to add two features 'contains_?' and 'contains_www', and I tried Extra Trees Classifer for classification. ROC-AUC-score is 0.958.","5ab46c89":"# 2-1. Extra Trees Classifer with Pipeline \n# Although it may not be useful to use MinMaxScaler in decision trees....","885b3314":"Let's create a few features","976ffe98":"# 2-2. Extra Trees Classifer","e35d7d43":"# 1. Data Preprocessing and Visualization","1f41e799":"# 2. Classification by Extra Trees Classifier","aa973c93":"# There are some gap between in ROC-AUC-score between with pipeline and without pipeline."}}