{"cell_type":{"ff0fdcc5":"code","dc50e61f":"code","32a45c0a":"code","23aec32b":"code","ea3979be":"code","dd732409":"code","3df1219d":"code","1375a19e":"code","d5baa7b4":"code","6f89fd54":"code","27440f5b":"code","4367a6ce":"code","cd9b909f":"markdown","26d5ea05":"markdown","af60be95":"markdown","3d507c7f":"markdown","9b23f398":"markdown","55388b70":"markdown","0782d3d3":"markdown","bf329ed7":"markdown","33a2ea8a":"markdown","c79808ed":"markdown","4c3255c1":"markdown","844a5558":"markdown","9d8fab12":"markdown","4ac49bb3":"markdown","8a1cc1fe":"markdown"},"source":{"ff0fdcc5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\nfrom collections import Counter as counter","dc50e61f":"df_fifa = pd.read_csv(\"..\/input\/data.csv\")","32a45c0a":"def value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1]) # This return 110.5 from \u20ac110.5M\n        suffix = df_value[-1:] # This return M or K\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except:\n        value = 0\n    return value\n\ndf_fifa['Value'] = df_fifa['Value'].apply(value_to_int)\ndf_fifa['Wage'] = df_fifa['Wage'].apply(value_to_int)\ndf_fifa['Release Clause'] = df_fifa['Release Clause'].apply(value_to_int)","23aec32b":"# Inch = 2.54 CM\n# Foot = 2.54*12 = 30.48\ndef convert_to_cm(df_value):\n    height = 0\n    try:\n        feet,inches = str(df_value).split(\"'\",)\n        feet = eval(feet)\n        inches = eval(inches)\n        height = 30.48*feet + 2.54*inches\n    except:\n        pass #do nothing\n    return int(height)\n\ndf_fifa['Height'] = df_fifa['Height'].apply(convert_to_cm)","ea3979be":"def remove_lbs(df_value):\n    try:\n        weight = int(df_value[0:-3])\n    except:\n        weight = 0\n    return weight\n\ndf_fifa['Weight'] = df_fifa['Weight'].apply(remove_lbs)","dd732409":"def evaluate_the_row(x):\n    try:\n        return eval(x)\n    except:\n        return 0\n\n# 26 Positions need addition\nfor i in range(28,54):\n    df_fifa.iloc[:,i] = df_fifa.iloc[:,i].apply(evaluate_the_row)\n","3df1219d":"df_fifa = df_fifa[df_fifa.Value != 0]\ndf_fifa = df_fifa[df_fifa.Overall != 0]\ndf_fifa = df_fifa[df_fifa.Height != 0]\ndf_fifa = df_fifa[df_fifa.Weight != 0]","1375a19e":"def classify_position(df_value):\n    if(df_value == 'GK'):\n        return 1\n    elif(df_value in ['RCB', 'CB', 'LCB', 'LB', 'RB', 'RWB', 'LWB']):\n        return 2\n    elif(df_value in ['RCM', 'LCM', 'LDM', 'CDM', 'CAM', 'RM', 'LAM', 'LM', 'RDM', 'CM', 'RAM']):\n        return 3\n    elif(df_value in ['RF', 'LF', 'ST', 'LW', 'RS', 'LS', 'RW', 'CF']):\n        return 4\n    return 0\n\ndf_fifa['PositionCode'] = df_fifa['Position'].apply(classify_position)","d5baa7b4":"df_fifa['Value'].describe().apply(lambda x: format(x, 'f'))","6f89fd54":"df_fifa['Wage'].describe().apply(lambda x: format(x, 'f'))","27440f5b":"df_fifa.iloc[:,28:54]","4367a6ce":"export_csv = df_fifa.to_csv(r'clean.csv', index=None, header=True)","cd9b909f":"## Add new column: Create a variable with a classified position","26d5ea05":"## Reviewing Value","af60be95":"## Remove Cells where key items are 0","3d507c7f":"## Reviewing Wage","9b23f398":"## Check Positions were added correctly","55388b70":"## Import necessary libraries","0782d3d3":"## Clean weight data","bf329ed7":"# Manipulation","33a2ea8a":"## Cycle through skill columns and add them up","c79808ed":"# Write to CSV","4c3255c1":"# The Data Cleaning Notebook\n\nThis notebook documents the cleaning process for the Fifa 2019 Data. It creates a new csv file in .\/data\/out\/clean.csv","844a5558":"## Convert the height to CM","9d8fab12":"## Load Data to a data table","4ac49bb3":"# Error Checking","8a1cc1fe":"## Convert the value and wage into proper currency"}}