{"cell_type":{"16e1e533":"code","9a0dfe68":"code","dbad46ab":"code","1cea556c":"code","0fae62fb":"code","cf8ee400":"code","5ab64f8e":"code","abb7b07f":"code","4dddd6ef":"code","ef18713f":"code","6e24d30a":"code","4fe1ff6c":"code","e18a8d14":"code","73c3c274":"code","5200b8ae":"code","8a784663":"code","c0d1293f":"code","f48f77f1":"code","6db7cb70":"code","6e99adde":"code","9a0ce14d":"code","2d6253f2":"code","7f57da38":"code","073ff0b5":"code","cf3cfc29":"code","ee5191ae":"code","b324e6fb":"code","5a5db2a3":"code","41e9998f":"code","08cbffc2":"code","b3fb25e5":"code","5cd006f5":"code","861b246e":"code","a6e9757f":"code","02371b09":"code","d5879879":"code","87b515e5":"code","1e6d2b4f":"code","162364f0":"code","75161aaa":"code","a39a291b":"code","cfb6e9ca":"code","f5cbb078":"code","3217133c":"code","ce9a42fe":"code","15d32f29":"code","aa03295a":"code","a144157a":"code","75f48919":"code","95624f76":"code","549acfd6":"code","a13a3625":"markdown","5f17f4ee":"markdown","f0ffc755":"markdown","f608a3dc":"markdown","8bc1e2d4":"markdown","4706bd6f":"markdown","824c59fb":"markdown","f58c3306":"markdown","b26ad66c":"markdown","68008411":"markdown","30a312d1":"markdown","5f112c1d":"markdown","02c345f5":"markdown","ce77acf0":"markdown","9c48c5f5":"markdown","3e3530ed":"markdown","33d5ec4e":"markdown","236102f5":"markdown","05551290":"markdown","d50aaeb4":"markdown","f58d0a9a":"markdown","f950e8a9":"markdown","f261d154":"markdown","7e26468f":"markdown"},"source":{"16e1e533":"#Importing Liabraries\nimport numpy as np  \nimport pandas as pd \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom wordcloud import WordCloud, STOPWORDS\n\n# Inline backend\n%matplotlib inline\nmpl.style.use(['ggplot'])\nimport warnings\nwarnings.filterwarnings('ignore')","9a0dfe68":"#Loading Dataset\ndf = pd.read_csv('..\/input\/immigration-to-canada\/canadian_immegration_data.csv')\n#First 5 rows of canadian immegration dataset\ndf_can = df.copy(deep=True)\n#df_can = df1\ndf_can.head()","dbad46ab":"# For consistency, ensure that all column labels of type string by checking the types of the column labels\nall(isinstance(column, str) for column in df_can.columns)","1cea556c":"# Set the country name as index\ndf_can.set_index('Country', inplace=True)\ndf_can.head()","0fae62fb":"print('Data dimensions:', df_can.shape)","cf8ee400":"# Short summary \ndf_can.info(verbose=False)","5ab64f8e":"# Column names\ndf_can.columns","abb7b07f":"# Useful for plotting later on\nyears = list(map(str, range(1980, 2014)))","4dddd6ef":"# Top 5 countries that contributed the most to immigration to Canada.\ndf_top5 = df_can.copy(deep=True)\n\ndf_top5.sort_values(['Total'], ascending=False, axis=0, inplace=True)\n\n# get the top 5 entries\ndf_topfiv = df_top5.head()\n\n# transpose the dataframe\ndf_topfiv = df_topfiv[years].transpose()\n\ndf_topfiv.head()","ef18713f":"# Compare the trends of top 5 countries that contributed the most to immigration to Canada.\ndf_topfiv.plot(kind='line', figsize=(14, 8)) \n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","6e24d30a":"# let's change the index values of df_topfiv to type integer for plotting\ndf_topfiv.index = df_topfiv.index.map(int)\ndf_topfiv.plot(kind='area',\n             stacked=False,\n             figsize=(20, 10))  # pass a tuple (x, y) size\n\nplt.title('Immigration Trend of Top 5 Countries')\nplt.ylabel('Number of Immigrants')\nplt.xlabel('Years')\n\nplt.show()","4fe1ff6c":"# transposed dataframe\ndf_can_t = df_can[years].transpose()\n\n# cast the Years (the index) to type int\ndf_can_t.index = map(int, df_can_t.index)\n\n# let's label the index. This will automatically be the column name when we reset the index\ndf_can_t.index.name = 'Year'\n\n# reset index to bring the Year in as a column\ndf_can_t.reset_index(inplace=True)\n\n# view the changes\ndf_can_t.head()","e18a8d14":"#Comparing India and China\n\n# normalized Chinese data\nnorm_china = (df_can_t['China'] - df_can_t['China'].min()) \/ (df_can_t['China'].max() - df_can_t['China'].min())\n\n# normalized Indian data\nnorm_india = (df_can_t['India'] - df_can_t['India'].min()) \/ (df_can_t['India'].max() - df_can_t['India'].min())\n\n# China\nax0 = df_can_t.plot(kind='scatter',\n                        x='Year',\n                        y='China',\n                        figsize=(14, 8),\n                        alpha=0.5,                  # transparency\n                        color='green',\n                        s=norm_china * 2000 + 10,  # pass in weights \n                        xlim=(1975, 2015)\n                       )\n\n# India\nax1 = df_can_t.plot(kind='scatter',\n                        x='Year',\n                        y='India',\n                        alpha=0.5,\n                        color=\"blue\",\n                        s=norm_india * 2000 + 10,\n                        ax = ax0\n                       )\n\nax0.set_ylabel('Number of Immigrants')\nax0.set_title('Immigration from China and India from 1980 - 2013')\nax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')","73c3c274":"stopwords = set(STOPWORDS)\n\ntotal_immigration = df_can['Total'].sum()\ntotal_immigration\n\nmax_words = 90\nword_string = ''\nfor country in df_can.index.values:\n    # check if country's name is a single-word name\n    if country.count(\" \") == 0:\n        repeat_num_times = int(df_can.loc[country, 'Total'] \/ total_immigration * max_words)\n        word_string = word_string + ((country + ' ') * repeat_num_times)\n\n# display the generated text\nword_string\n\n# create the word cloud\nwordcloud = WordCloud(background_color='white').generate(word_string)\n\n# display the cloud\nplt.figure(figsize=(14, 18))\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","5200b8ae":"# What is the immigration distribution for China,Pakistan, India for years 1980 - 2013?\n\n# let's quickly view the dataset \ndf_can.loc[['China','Pakistan', 'India'], years]","8a784663":"# transpose dataframe\ndf_t = df_can.loc[['China','Pakistan', 'India'], years].transpose()\ndf_t.head()","c0d1293f":"# generate histogram\ndf_t.plot(kind='hist', figsize=(10, 6))\n\nplt.title('Histogram of Immigration from China,Pakistan,India and Bangladesh from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","f48f77f1":"# let's get the x-tick values\ncount, bin_edges = np.histogram(df_t, 15)\n\n# un-stacked histogram\ndf_t.plot(kind ='hist', \n          figsize=(15, 6),\n          bins=15,\n          alpha=0.6,\n          xticks=bin_edges,\n          color=['coral', 'darkslateblue', 'mediumseagreen']\n         )\n\nplt.title('Histogram of Immigration from China,Pakistan and India from 1980 - 2013')\nplt.ylabel('Number of Years')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","6db7cb70":"#Let's compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013\n\n# step 1: get the data\ndf_iceland = df_can.loc['Iceland', years]\n\n# step 2: plot data\ndf_iceland.plot(kind='bar', figsize=(10, 6))\n\nplt.xlabel('Year') # add to x-label to the plot\nplt.ylabel('Number of immigrants') # add y-label to the plot\nplt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot\n\nplt.show()","6e99adde":"df_iceland.plot(kind='bar', figsize=(10, 6), rot=90)\n\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\nplt.title('Icelandic Immigrants to Canada from 1980 to 2013')\n\n# Annotate arrow\nplt.annotate('',  # s: str. will leave it blank for no text\n             xy=(32, 70),  # place head of the arrow at point (year 2012 , pop 70)\n             xytext=(28, 20),  # place base of the arrow at point (year 2008 , pop 20)\n             xycoords='data',  # will use the coordinate system of the object being annotated\n             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)\n             )\n\n# Annotate Text\nplt.annotate('2008 - 2011 Financial Crisis',  # text to display\n             xy=(28, 30),  # start the text at at point (year 2008 , pop 30)\n             rotation=72.5,  # based on trial and error to match the arrow\n             va='bottom',  # want the text to be vertically 'bottom' aligned\n             ha='left',  # want the text to be horizontally 'left' algned.\n             )\n\nplt.show()","9a0ce14d":"# group countries by continents and apply sum() function \ndf_continents = df_can.groupby('Continent', axis=0).sum()\n\n# note: the output of the groupby method is a `groupby' object. \n# we can not use it further until we apply a function (eg .sum())\nprint(type(df_can.groupby('Continent', axis=0)))\n\ndf_continents.head()","2d6253f2":"# Modified Pie chart\ncolors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']\nexplode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.\n\ndf_continents['Total'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90,    \n                            shadow=True,       \n                            labels=None,         # turn off labels on pie chart\n                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct \n                            colors=colors_list,  # add custom colors\n                            explode=explode_list # 'explode' lowest 3 continents\n                            )\n\n# scale the title up by 12% to match pctdistance\nplt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) \n\nplt.axis('equal') \n\n# add legend\nplt.legend(labels=df_continents.index, loc='upper left') \n\nplt.show()","7f57da38":"    explode_list = [0.0, 0, 0, 0.1, 0.1, 0.2] # ratio for each continent with which to offset each wedge.\n\n    df_continents['2013'].plot(kind='pie',                            \n                                figsize=(15, 6),\n                                autopct='%1.1f%%', \n                                startangle=90,    \n                                shadow=True,       \n                                labels=None,                 # turn off labels on pie chart\n                                pctdistance=1.12,            # the ratio between the pie center and start of text label\n                                explode=explode_list         # 'explode' lowest 3 continents\n                                )\n\n    # scale the title up by 12% to match pctdistance\n    plt.title('Immigration to Canada by Continent in 2013', y=1.12) \n    plt.axis('equal') \n\n    # add legend\n    plt.legend(labels=df_continents.index, loc='upper left') \n\n    # show plot\n    plt.show()","073ff0b5":"# Comparing immegrants from China,India and Pakistan using Box plot\ndf_CIP= df_can.loc[['China', 'India','Pakistan'], years].transpose()\ndf_CIP.head()","cf3cfc29":"df_CIP.plot(kind='box', figsize=(10, 7))\n\nplt.title('Box plots of Immigrants from China,India and Pakistan (1980 - 2013)')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","ee5191ae":"# horizontal box plots\ndf_CIP.plot(kind='box', figsize=(10, 7), color='blue', vert=False)\n\nplt.title('Box plots of Immigrants from Pakistan,China and India (1980 - 2013)')\nplt.xlabel('Number of Immigrants')\n\nplt.show()","b324e6fb":"fig = plt.figure() # create figure\n\nax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)\nax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**\n\n# Subplot 1: Box plot\ndf_CIP.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1\nax0.set_title('Box Plots of Immigrants from Pakistan,China and India (1980 - 2013)')\nax0.set_xlabel('Number of Immigrants')\nax0.set_ylabel('Countries')\n\n# Subplot 2: Line plot\ndf_CIP.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2\nax1.set_title ('Line Plots of Immigrants from Pakistan,China and India (1980 - 2013)')\nax1.set_ylabel('Number of Immigrants')\nax1.set_xlabel('Years')\n\nplt.show()","5a5db2a3":"# Immigration from top 15 countries for decades 80s, 90s and 2000s\n\ndf_top15 = df_can.sort_values(['Total'], ascending=False, axis=0).head(15)\ndf_top15\n#The correct answer is:\n\n# create a list of all years in decades 80's, 90's, and 00's\nyears_80s = list(map(str, range(1980, 1990))) \nyears_90s = list(map(str, range(1990, 2000))) \nyears_00s = list(map(str, range(2000, 2010))) \n\n# slice the original dataframe df_can to create a series for each decade\ndf_80s = df_top15.loc[:, years_80s].sum(axis=1) \ndf_90s = df_top15.loc[:, years_90s].sum(axis=1) \ndf_00s = df_top15.loc[:, years_00s].sum(axis=1)\n\n# merge the three series into a new data frame\nnew_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) \n\n# display dataframe\nnew_df.head()","41e9998f":"new_df.plot(kind='box', figsize=(10, 6))\n\nplt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')\n\nplt.show()","08cbffc2":"new_df=new_df.reset_index()\nnew_df[new_df['2000s']> 209611.5]","b3fb25e5":"# Step 1: Get the dataset.\n\n# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type int (useful for regression later on)\ndf_tot.index = map(int, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace = True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","5cd006f5":"# Plot the data\ndf_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\nplt.show()","861b246e":"x = df_tot['year']      # year on x-axis\ny = df_tot['total']     # total on y-axis\nfit = np.polyfit(x, y, deg=1)\nfit","a6e9757f":"# We can mathematically analyze this upward trend using a regression line (line of best fit) as shown in following\ndf_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')\n\nplt.title('Total Immigration to Canada from 1980 - 2013')\nplt.xlabel('Year')\nplt.ylabel('Number of Immigrants')\n\n# plot line of best fit\nplt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years\nplt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))\n\nplt.show()\n\n# print out the line of best fit\n'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1])","02371b09":"# let's create a new dataframe for these three countries \ndf_dsn = df_can.loc[['Denmark', 'Norway', 'Sweden'], :]\n\n# let's take a look at our dataframe\ndf_dsn","d5879879":"# Step 1. The first step into creating a waffle chart is determing the proportion of each category with respect to the total\n\n# compute the proportion of each category with respect to the total\ntotal_values = df_dsn['Total'].sum()\ncategory_proportions = df_dsn['Total'] \/ total_values\n\n# print out proportions\npd.DataFrame({\"Category Proportion\": category_proportions})","87b515e5":"# Step 2. The second step is defining the overall size of the waffle chart\nwidth = 40 # width of chart\nheight = 10 # height of chart\n\ntotal_num_tiles = width * height # total number of tiles\n\nprint(f'Total number of tiles is {total_num_tiles}.')","1e6d2b4f":"# Step 3. The third step is using the proportion of each category to determe it respective number of tiles\n\n# compute the number of tiles for each category\ntiles_per_category = (category_proportions * total_num_tiles).round().astype(int)\n\n# print out number of tiles per category\npd.DataFrame({\"Number of tiles\": tiles_per_category})","162364f0":"# Step 4. The fourth step is creating a matrix that resembles the waffle chart and populating it.\n# initialize the waffle chart as an empty matrix\nwaffle_chart = np.zeros((height, width), dtype = np.uint)\n\n# define indices to loop through waffle chart\ncategory_index = 0\ntile_index = 0\n\n# populate the waffle chart\nfor col in range(width):\n    for row in range(height):\n        tile_index += 1\n\n        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...\n        if tile_index > sum(tiles_per_category[0:category_index]):\n            # ...proceed to the next category\n            category_index += 1       \n            \n        # set the class value to an integer, which increases with class\n        waffle_chart[row, col] = category_index","75161aaa":"#Step 5. Map the waffle chart matrix into a visual.\n\n# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\nplt.show()","a39a291b":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])\nplt.show()","cfb6e9ca":"# define the world map\nworld_map = folium.Map()\n\n# display world map\nworld_map","f5cbb078":"#define Pakistan's geolocation coordinates\nPakistan_latitude = 30.3753\nPakistan_longitude = 69.3451\n\nPakistan_map = folium.Map(location=[Pakistan_latitude, Pakistan_longitude], zoom_start=3, tiles='Stamen Toner')\n\n# display world map\nPakistan_map","3217133c":"# create a Stamen Terrain map of the world centered around Canada\nworld_map = folium.Map(location=[56.130, -106.35], zoom_start=3, tiles='Stamen Terrain')\n\n# display map\nworld_map","ce9a42fe":"world_geo = '..\/input\/world-countries\/world-countries.json'\n# create a plain world map\nworld_map = folium.Map(location=[0, 0], zoom_start=2)\n#df.head()","15d32f29":"# generate choropleth map using the total immigration of each country to Canada from 1980 to 2013\nworld_map.choropleth(\n    geo_data=world_geo,\n    data=df,\n    columns=['Country', 'Total'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd', \n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Immigration to Canada'\n)\n\n# display map\nworld_map","aa03295a":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type float (useful for regression later on)\ndf_tot.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace=True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","a144157a":"sns.regplot(x='year', y='total', data=df_tot)","75f48919":"ax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')\nplt.show()","95624f76":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')\nplt.show()","549acfd6":"#If you like this notebook,Don't forget to upvote.","a13a3625":"## Stamen Toner Maps","5f17f4ee":"# Basic EDA","f0ffc755":"## Bubble Plot","f608a3dc":"## Regression Plots","8bc1e2d4":"## Multiple Line Plot","4706bd6f":"## Word Clouds","824c59fb":"### China and India are both considered as outliers since their population for the decade exceeds 209,611.5.","f58c3306":"## Subplots","b26ad66c":"## Box plot","68008411":"## Waffle Charts","30a312d1":"## Modified Regression Plot","5f112c1d":"# Data Visualization using Matplotlib","02c345f5":"# Data visualization using Seaborn","ce77acf0":"### We can clearly observe an upward trend in the data: as the years go by, the total number of immigrants increases.","9c48c5f5":"## Bar Plot","3e3530ed":"# Scatter Plots","33d5ec4e":"## Stamen Terrain Maps","236102f5":"# Data Visualization using Plotly\n### Following Notebooks provide a complete guide from Basic to Advance about Plotly.\n[Data visualization using Plotly](https:\/\/www.kaggle.com\/ammaraahmad\/interactive-visualizations-using-plotly)\n\n[Interactive visualizations using Plotly](https:\/\/www.kaggle.com\/ammaraahmad\/data-visualization-using-plotly)","05551290":"## Pie Chart","d50aaeb4":"## Choropleth Maps","f58d0a9a":"## Data visualization using Folium","f950e8a9":"## Histogram","f261d154":"# Setup\n# Basic EDA\n# Data visualization using Matplotlib\n* ### Multiple Line Plot\n* ### Area Graph\n* ### Bubble Plot\n* ### Word Clouds\n* ### Histogram\n* ### Bar Plot\n* ### Pie Chart\n* ### Box Plot\n* ### SubPlots\n* ### Scatter Plot\n* ### Waffle Charts\n# Data visualization using Folium\n* ### Stamen Toner Maps\n* ### Stamen Terrain Maps\n* ### Choropleth Maps\n# Data visualization using Seaborn\n* ### Regression Plots\n* ### Modified Regression Plot\n# Data visualization using Plotly\n* ### Other Resources","7e26468f":"## Area Graph"}}