{"cell_type":{"0a648fe9":"code","fe7d7920":"code","e0b61d7e":"code","989ec11b":"code","af8434db":"code","3f90562f":"code","2ccc6ee6":"code","3d7bc062":"code","abda8e0a":"code","c519ff6a":"code","f4af32bf":"code","91d48ffb":"code","29d0f7c0":"code","078f27b4":"code","794c4ec4":"code","4bd29e98":"code","7df889c6":"code","5d89e862":"code","ba32d0f8":"markdown","04d4e629":"markdown","21c76a13":"markdown","728da538":"markdown","3b0284a7":"markdown","183233c5":"markdown","fd8494ae":"markdown"},"source":{"0a648fe9":"!pip install efficientnet -q\n!conda install gdcm -c conda-forge -y","fe7d7920":"import os\n\nimport efficientnet.tfkeras as efn\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom sklearn.model_selection import GroupKFold","e0b61d7e":"COMPETITION_NAME = \"siimcovid19-512-img-png-600-study-png\"\nGCS_DS_PATH = KaggleDatasets().get_gcs_path(COMPETITION_NAME)","989ec11b":"load_dir = f\"\/kaggle\/input\/{COMPETITION_NAME}\/\"\ndf = pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\nlabel_cols = df.columns[1:5]\ndf #Just includes id and numbering of 4 classes","af8434db":"IM_PATH = '..\/input\/ricord-covid19-xray-positive-tests\/MIDRC-RICORD\/MIDRC-RICORD'\nmeta_extradata = pd.read_csv('..\/input\/ricord-covid19-xray-positive-tests\/MIDRC-RICORD-meta.csv')\nmeta_extradata.dropna(inplace = True, subset = ['labels'])","3f90562f":"meta_extradata","2ccc6ee6":"def locate_row_to_delete(a):\n    if a.max() <= 0.5 :\n        return np.array([np.nan,np.nan,np.nan,np.nan])\n    else:\n        return a\n\n\ndef encode_labels(df):\n    df = df[['fname', 'labels']]\n    \n    #initialize label columns\n    df['Negative for Pneumonia'] = 0\n    df['Typical Appearance'] = 0\n    df['Indeterminate Appearance'] = 0\n    df['Atypical Appearance'] = 0\n    \n    #Count occurences of each category\n    df['Negative for Pneumonia'] = df.labels.apply(lambda x : x.count('Negative'))\n    df['Typical Appearance'] = df.labels.apply(lambda x : x.count('Typical'))\n    df['Indeterminate Appearance'] = df.labels.apply(lambda x : x.count('Indeterminate'))\n    df['Atypical Appearance'] = df.labels.apply(lambda x : x.count('Atypical'))\n    \n    #df to array for computations\n    labels_np = df[['Negative for Pneumonia','Typical Appearance', 'Indeterminate Appearance', 'Atypical Appearance']].values\n    temp = labels_np\/labels_np.sum(axis = 1, keepdims=True)\n    temp = np.apply_along_axis(locate_row_to_delete, 1, temp) \n\n    temp -= 0.51\n    \n    temp[temp > 0] = 1\n    temp[temp < 0] = 0\n    \n\n    df['Negative for Pneumonia'] = temp[:,0]\n    df['Typical Appearance'] = temp[:,1]\n    df['Indeterminate Appearance'] = temp[:,2]\n    df['Atypical Appearance'] = temp[:,3]\n    \n    \n    df.dropna(subset = ['Negative for Pneumonia'], inplace = True)\n    return df","3d7bc062":"output = encode_labels(meta_extradata)\noutput","abda8e0a":"output = output.rename(columns={'fname': 'id'})\nnan_value = float(\"NaN\") \noutput. replace(\"\", nan_value, inplace=True)\noutput. dropna(subset = [\"labels\"], inplace=True)\noutput=output.drop(['labels'], axis=1)","c519ff6a":"output=output.reset_index(drop=True)\nprint(output)","f4af32bf":"temp_df=[df, output]\nextended = pd.concat(temp_df)\nextended","91d48ffb":"extended=extended.reset_index(drop=True)\nprint(extended)","29d0f7c0":"gkf  = GroupKFold(n_splits = 5)\nextended['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(gkf.split(extended, groups = extended.id.tolist())):\n    extended.loc[val_idx, 'fold'] = fold\nextended\ndf=extended\nprint(df)","078f27b4":"from PIL import Image\nimport os\n\nsave_dir = f'\/kaggle\/tmp\/external\/'\nos.makedirs(save_dir, exist_ok=True)","794c4ec4":"import tqdm\nfrom PIL import Image\nfrom tqdm.auto import tqdm\n\nfor dirname, _, filenames in tqdm(os.walk(f'..\/input\/siimcovid19-512-img-png-600-study-png\/study')):\n    for file in filenames:\n        photo = Image.open(os.path.join(dirname, file))\n        photo.save(os.path.join(save_dir, file.replace('.png', '.jpg')))","4bd29e98":"for dirname, _, filenames in tqdm(os.walk(f'..\/input\/ricord-covid19-xray-positive-tests\/MIDRC-RICORD\/MIDRC-RICORD')):\n    for file in filenames:\n        photo = Image.open(os.path.join(dirname, file))\n        newsize = (600, 600) #Make image size 600x600\n        photo = photo.resize(newsize)\n        photo.save(os.path.join(save_dir, file.replace('.dcm.jpg', '.jpg')))","7df889c6":"# files = os.listdir(save_dir)\n# files","5d89e862":"df.to_csv(f'df.csv')\n!tar -zcf test.tar.gz -C \"\/kaggle\/tmp\/external\/\" .","ba32d0f8":"**If you want to check files uncomment the following**","04d4e629":"**Now time to use groupkfold to extended data**","21c76a13":"**I think besides this adding BIMCV to dataset is the key for winning this competition. **","728da538":"**Thanks to https:\/\/www.kaggle.com\/xhlulu\/ranzcr-efficientnet-tpu-training**\n\n**Let's use the extra data provided by https:\/\/www.kaggle.com\/raddar\/ricord-covid19-xray-positive-tests**\n\n**Thanks to https:\/\/www.kaggle.com\/josephamigo\/siim-external-data-pipeline**","3b0284a7":"# **Data still have extra columns and different names**\n* First change the column name from fname -> id\n\n* Then drop NaN \n\n* Then drop labels column","183233c5":"# Save all the extended data to temporary directory","fd8494ae":"**Concatenate the extra files with original dataframe to obatin the extended one**"}}