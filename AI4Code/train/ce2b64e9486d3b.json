{"cell_type":{"307edc36":"code","55d5ce2b":"code","aa0f4e52":"code","3f8ed7a3":"code","7ca94ffb":"code","f1982622":"code","ce7b6545":"code","487582d4":"code","38f139b3":"code","cfce44e5":"markdown","2a9b1311":"markdown","9be8b788":"markdown","be568a61":"markdown","9afa8982":"markdown"},"source":{"307edc36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55d5ce2b":"data = pd.read_csv('\/kaggle\/input\/covid19-in-limeiraspbrazil\/covid-limeira-daily.csv')\ndata['Date'] = pd.to_datetime(data['Date'])","aa0f4e52":"data.tail(10)","3f8ed7a3":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n\ndata['confirmed_avg2w'] = data['NewCases'].rolling(window=14, center=False).mean()\n#data.set_index('Date',inplace=True)\n#data.head(20)\n\n# https:\/\/stackoverflow.com\/a\/49714879\/1388312\ndef hide_xticks(ax, every_nth):\n    for n, label in enumerate(ax.xaxis.get_ticklabels()):\n        if n % every_nth != 0:\n            label.set_visible(False)\n\nfig, ax = plt.subplots(figsize=(16,9))\nfig.patch.set_facecolor('white')\nsns.set_style('whitegrid')\n\ng1 = sns.lineplot(data=data,\n             y='confirmed_avg2w',\n             x=data.index,\n             ax=ax,\n             color='red',\n             label='Confirmed cases (rolling avg 2w)',\n             linewidth=2)\n\n#bar_colors = ['skyblue' if (x < data['NewCases'].max()) else 'orange' for x in data['NewCases'].values ]\n\ng2 = sns.barplot(data=data,\n            y='NewCases',\n            x=data.index,\n            ax=ax,\n            #palette=bar_colors,\n            color='skyblue',\n            label='Confirmed cases')\n\nax.set_xticklabels(labels=data['Date'].apply(lambda d: d.strftime('%d\/%m')),\n                   rotation=90)\n\nhide_xticks(ax, 7) # hide every # ticks\n            \nax.set_title('COVID in Limeira-SP, Brazil - Confirmed cases - Daily growth', fontsize=16)\nax.set_ylabel('Number of cases', fontsize=12)\nax.set_xlabel('Date', fontsize=12)\n\nax.legend(loc='upper right')\n\nplt.show()","7ca94ffb":"# import plotly.graph_objs as go\n\n# # Creating trace1\n# trace1 = go.Scatter(\n#                     x = df.world_rank,\n#                     y = df.citations,\n#                     mode = \"lines\",\n#                     name = \"citations\",\n#                     marker = dict(color = 'rgba(16, 112, 2, 0.8)'))\n\n                   \n# data = [trace1]\n# layout = dict(title = 'COVID in Limeira-SP, Brazil - Confirmed cases - Daily growth',\n#               xaxis= dict(title= 'Date',ticklen= 5,zeroline= False)\n#              )\n# fig = dict(data = data, layout = layout)\n# iplot(fig)\n","f1982622":"# create the 'week' column\nweeks = []\ndef getweek(d):\n    key = int(str(d.year) + str(d.isocalendar()[1]))\n    if (key not in weeks):\n        weeks.append(key)        \n    return weeks.index(key) + 1\n\ndata['week'] = data['Date'].apply(getweek)\n\n# get weekly data\nweekly = data[['Confirmed', 'NewCases', 'week']].groupby(by='week').agg({'Confirmed': 'max', 'NewCases': 'sum'}).reset_index()\nweekly.tail(5)","ce7b6545":"def show_values(column, data, g, offset=5, color='royalblue', use_int=True):\n    for index, row in data.iterrows():\n        g.text(row.name, row[column]+offset, (int(row[column]) if use_int else round(row[column],2)) if not np.isnan(row[column]) else 0, color=color, ha=\"center\")\n\nfig, ax = plt.subplots(figsize=(16,9))\nfig.patch.set_facecolor('white')\nsns.set_style('whitegrid')\n\ng = sns.barplot(data=weekly,\n                y='NewCases',\n                x=weekly.index,\n                ax=ax,\n                #palette=bar_colors,\n                color='royalblue',\n                label='New cases per week')\n\nshow_values('NewCases', weekly, g)\n        \nax2 = ax.twinx()\nax2.grid(None)\nax2.set_ylim([0,weekly['Confirmed'].max()+1000])\n\nsns.pointplot(data=weekly,\n             y='Confirmed',\n             x=weekly.index,\n             ax=ax2,\n             color='red',\n             label='Confirmed cases',\n             scale=0.8)\n\nax.set_xticklabels(labels=weekly['week'] )\n\n#hide_xticks(ax, 5)\n            \nax.set_title('COVID in Limeira,SP,Brazil - Weekly growth vs Total confirmed cases', fontsize=16)\nax.set_ylabel('Number of cases', fontsize=12)\nax2.set_ylabel('Number of cases', fontsize=12)\nax.set_xlabel('Week of pandemic', fontsize=12)\n\n#ax.legend(loc='upper right')\n\nplt.show()","487582d4":"weekly_deaths = data[['Deaths', 'NewDeaths', 'URCOccupancy', 'week']].groupby(by='week').agg({'Deaths': 'max', 'NewDeaths': 'sum', 'URCOccupancy' : 'mean'}).reset_index()\nweekly_deaths.tail()","38f139b3":"fig, ax = plt.subplots(figsize=(16,9))\nfig.patch.set_facecolor('white')\nsns.set_style('whitegrid')\nax.set_ylim([0,60])\n\ng = sns.barplot(data=weekly_deaths,\n                y='NewDeaths',\n                x=weekly_deaths.index,\n                ax=ax,\n                #palette=bar_colors,\n                color='darkorange',\n                label='New deaths per week')\n\nshow_values('NewDeaths', weekly_deaths, g, offset=0.25, color='darkorange')\n        \nax2 = ax.twinx()\nax2.grid(None)\nax2.set_ylim([0,1])\n\ng2 = sns.pointplot(data=weekly_deaths,\n                 y='URCOccupancy',\n                 x=weekly_deaths.index,\n                 ax=ax2,\n                 color='darkblue',\n                 label='URC Occupancy',\n                 scale=0.8)\n\nshow_values('URCOccupancy', weekly_deaths, g2, offset=0.01, color='darkblue', use_int=False)\n\nax.set_xticklabels(labels=weekly_deaths['week'])\n\n#hide_xticks(ax, 5)\n            \nax.set_title('COVID in Limeira,SP,Brazil - Weekly deaths vs URC Occpupancy', fontsize=16)\nax.set_ylabel('Number of deaths', fontsize=12)\nax2.set_ylabel('URC Occupancy', fontsize=12)\nax.set_xlabel('Week of pandemic', fontsize=12)\n\nax.legend(loc='upper right')\n\nplt.show()","cfce44e5":"## Daily Growth of Confirmed Cases\n\nThe chart bellow shows the evolution of cases day-by-day and an rolling average of 14 days (2 weeks).","2a9b1311":"# COVID-19 in Limeira-SP, Brazil - Basic Analisys\n\n**Last update: 04\/10\/2021 12:32 PM**\n\n## Introduction\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/46\/SaoPaulo_Municip_Limeira.svg\" alt=\"Map of Limeira\" width=\"400\"\/>\n\nThe city of [Limeira](https:\/\/pt.wikipedia.org\/wiki\/Limeira) is located at Sao Paulo state, in Brazil. The city has an area of 518.0 km\u00b2 and has slightly more than 300,000 habitants (acordingly to the last census, in 2017).\n\nThe first cases of coronavirus was detected in the city by the end of March, 2020. As the pandemic goes, the city hall built the URC (Coronavirus Reference Unit, a specialized hospital for treat COVID patients).\n\nUsing the dataset of public COVID pandemic data, the goal of this basic analisys is to make some visualizations that could help the citizens to better understand the evolution coronavirus at the city.\n\n**NOTICE: This notebook will be updated as new data are being reported.**","9be8b788":"The table bellow shows the numbers reported for last week.","be568a61":"## Weekly Growth vs Confirmed\n\nThe next chart shows the total number of new cases per week. Also, there is a line with the total number of confirmed cases by the end of that week. Before, the table shows up the confirmed cases for the last weeks.","9afa8982":"## Weekly Deaths and URC Occupancy\n\nThe chart bellow shows the number of COVID deaths per week and the mean URC occupancy (percentage) in that week. Before the chart, there is a table that shows this data for the latest weeks."}}