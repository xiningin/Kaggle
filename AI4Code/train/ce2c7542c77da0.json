{"cell_type":{"bab55bad":"code","cbeba22d":"code","4e3156c5":"code","effdb15f":"code","194a5fdf":"code","2206eb70":"code","7bfc639f":"code","1b1c16ee":"code","37c3bb9e":"code","355490d3":"code","f8a08fed":"code","43f292db":"code","d7b3f8be":"code","5f455fb2":"code","e8c611ad":"code","a1fea2d1":"code","c3731c48":"markdown","d23ff586":"markdown","3c1fbb17":"markdown"},"source":{"bab55bad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cbeba22d":"# load data\ntrain_df = pd.read_csv('..\/input\/leaf-classification\/train.csv.zip', index_col ='id')\ntest_df = pd.read_csv('..\/input\/leaf-classification\/test.csv.zip')","4e3156c5":"test_ids = test_df.id\ntest_df = test_df.drop(['id'], axis =1)","effdb15f":"train_df.head(3)","194a5fdf":"# taking care of missing values\ntrain_df.isnull().any().sum()","2206eb70":"test_df.isnull().any().sum()","7bfc639f":"# encoding catagorical\ntrain_df.info()","1b1c16ee":"test_df.info()","37c3bb9e":"train_df['species'].nunique()","355490d3":"# IV and DV\nx = train_df.drop('species',axis=1)\ny = train_df['species']","f8a08fed":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ny_fit = encoder.fit(train_df['species'])\ny_label = y_fit.transform(train_df['species']) \nclasses = list(y_fit.classes_) \nclasses","43f292db":"# splitting\nfrom sklearn.model_selection import  train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y_label, test_size = 0.2, random_state = 1)","d7b3f8be":"from sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nclassifier =  LinearDiscriminantAnalysis()\nclassifier.fit(x_train, y_train)","5f455fb2":"final_predictions = classifier.predict_proba(test_df)","e8c611ad":"submission = pd.DataFrame(final_predictions, columns=classes)\nsubmission.insert(0, 'id', test_ids)\nsubmission.reset_index()","a1fea2d1":"submission.to_csv('submission.csv', index = False)","c3731c48":"# Data Preprocessing","d23ff586":"The target y is the only catagorical column","3c1fbb17":"Building model"}}