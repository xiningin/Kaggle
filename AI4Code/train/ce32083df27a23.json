{"cell_type":{"a4dc012d":"code","3024cd45":"code","4dc08a49":"code","427f3686":"code","57505d25":"code","dc47b678":"code","9612150e":"code","865b2b74":"code","70a5f0e5":"code","31f9a539":"code","1e04d833":"code","a472a73f":"code","ef11d12d":"code","e20def65":"code","2bb89f3c":"code","95acdf25":"code","5e81007b":"code","85280c45":"code","f818b1a6":"code","fecead91":"code","a8e0e2fa":"code","43f16a87":"code","89fde074":"code","6ae06d29":"code","f022e417":"code","8b1f85b7":"code","9e9dc770":"code","0b359d1a":"code","06140c2b":"code","2579c796":"markdown","948b428e":"markdown","b4a7a2b6":"markdown","d285de0d":"markdown","2c9502e3":"markdown","eee1bfdc":"markdown","f2b7e8cc":"markdown","8502c3f0":"markdown","a559f952":"markdown","07052832":"markdown","04b9a8df":"markdown","e823bd55":"markdown","72de6e3d":"markdown","b4265caa":"markdown","39f489b4":"markdown","0903ad8f":"markdown","e0e8df39":"markdown","6ad2394a":"markdown","f767e188":"markdown"},"source":{"a4dc012d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3024cd45":"# Reading data in dataframes\ndata1=pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_w_genres.csv')\ndata2=pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')\ndata1.info()\ndata2.info()","4dc08a49":"# Making a new dataframe genre containing only artists and genre. Cleaning the dataframe.\n\ngenre=data1[[\"genres\",\"artists\"]]\ngenre=genre[genre[\"genres\"]!=\"[]\"]\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"'\", \"\")\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"[\", \"\")\ngenre[\"genres\"]=genre[\"genres\"].str.replace(\"]\", \"\")","427f3686":"# Exploring Genre dataframe\ngenre.head(10)","57505d25":"#Exploring the most popular genre\n\ngenre_dict={}\n\ngenre_df_dict=genre[\"genres\"].str.split(\",\")\nfor index, genre_list in genre_df_dict.iteritems():\n    for genre_name in genre_list:\n        if genre_name in genre_dict:\n            genre_dict[genre_name]+=1\n        else:\n            genre_dict[genre_name]=1\n            \ngenre_dict_sorted=sorted(genre_dict.items(), key= lambda x:x[1], reverse=True) ","dc47b678":"pattern_classical='orchestra[\\s\\S]*|\\b?[\\s\\S]*classical[\\s\\S]*\\b?|[\\s\\S]*piano[\\s\\S]+|opera'\npattern_movies=r'\\bbroadway[\\s\\S]*|\\b[\\s\\S]*movie[\\s\\S]+|\\b[\\s\\S]*show[\\s\\S]+|\\b[\\s\\S]*hollywood'\npattern_kpop=r'[\\s\\S]+k[-]?pop[\\s\\S]+'\npattern_rock=r'[\\s\\S]+ rock[\\s\\S]*|[\\s\\S]+metal[\\s\\S]*|[\\s\\S]+punk[\\s\\S]*'\npattern_pop=r'[\\s\\S]+pop[\\s\\S]*'\npattern_rap=r'[\\s\\S]* rap[\\s\\S]*'\npattern_jazz=r'[\\s\\S]*jazz[\\s\\S]*|bossa nova'\npattern_reggae=r'\\b[\\s\\S]*reggae[\\s\\S]*'\npattern_r=r'[\\s\\S]*christian[\\s\\S]*|[\\s\\S]*gospel[\\s\\S]*'\npattern_folk=r\"[\\s\\S]*folk[\\s\\S]*|\\brebetiko|hawaiian, jawaiian|ukulele|duranguense|grupera|ranchera|[\\s\\S]*regional mexican|norteno|latin\"\npattern_country=r'[\\s\\S]*country[\\s\\S]*|\\btejano\\b'\npattern_rnb=r'[\\s\\S]*blues[\\s\\S]*|[\\s\\S]*r&b[\\s\\S]*'\npattern_funk=r'[\\s\\S]*funk[\\s\\S]*|[\\s\\S]*disco[\\s\\S]*|[\\s\\S]*hip hop[\\s\\S]*'\npattern_edm=r'electronica|[\\s\\S]*edm[\\s\\S]*|electro house|electronic trap'\n\n\n\ngenre[\"genres_main\"]=genre[\"genres\"].str.replace(pattern_classical,\"classical\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_movies,\"movies_and_broadway\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_r,\"religiuos\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_kpop,\"kPop\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_reggae,\"reggaeton\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_rap,\"rap\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_rock,\"rock\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_pop,\"pop\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_jazz,\"jazz\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_country,\"country music\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_folk,\"folk\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_rnb,\"rhytm_and_blues\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_funk,\"funk\")\ngenre[\"genres_main\"]=genre[\"genres_main\"].str.replace(pattern_edm,\"edm\")\n\n\n# Finding main genres to select for analysis\n\npd.set_option(\"display.max_rows\",None)\ngenre[\"genres_main\"].value_counts()","9612150e":"genre_dict_a={}\n\ngenre_df_dict_a=genre[\"genres_main\"].str.split(\",\")\nfor index, genre_list_a in genre_df_dict_a.iteritems():\n    for genre_name_a in genre_list_a:\n        if genre_name_a in genre_dict_a:\n            genre_dict_a[genre_name_a]+=1\n        else:\n            genre_dict_a[genre_name_a]=1\ngenre_dict_sorted_a=sorted(genre_dict_a.items(), key= lambda x:x[1], reverse=True)","865b2b74":"# Creating a dictionary which categorises an artist's work into a main genre of music\n\nartist_dictionary={}\nfor index, row in genre.iterrows():\n    artist_name=row[\"artists\"]\n    artist_genre=row[\"genres_main\"]\n    artist_dictionary[artist_name]=artist_genre","70a5f0e5":"#Adding a genre column in data2 by using information in dictionary created above\n\ndata2[\"artists\"]=data2[\"artists\"].str.replace(\"\\[\",\"\")\ndata2[\"artists\"]=data2[\"artists\"].str.replace(\"\\]\",\"\")\ndata2[\"artists\"]=data2[\"artists\"].str.replace(\", \",\",\")\ndata2[\"artists\"]=data2[\"artists\"].str.split(\",\")\n\n\n\ndef find_genre(column):\n    music_style=[]\n    for artist in column:\n        artist=artist.strip(\"'\")\n        if artist in artist_dictionary:\n            #print(artist)\n            music_style.append(artist_dictionary[artist])\n    return music_style\n            \ndata2[\"genre\"]=data2[\"artists\"].apply(find_genre)\ndata2.info()","31f9a539":"# Looking at information in genre column\ndata2['genre'].describe()","1e04d833":"data2[\"genre\"]=data2[\"genre\"].astype(str)\ndata2[\"genre\"]=data2[\"genre\"].str.replace(\"]\",\"\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(\"[\",\"\")","a472a73f":"# Selecting only those rows whose genre information is available.\ndata2=data2[data2[\"genre\"]!=\"\"]\ndata2[\"genre\"]=data2[\"genre\"].str.strip(\"'\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(\"', '\", \",\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"classical,{1,}[\\s\\S]*\",\"classical\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"movies_and_broadway,{1,}[\\s\\S]*\",\"movies_and_broadway\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"[\\s\\S]*bollywood[\\s\\S]*|[\\s\\S]*filmi[\\s\\S]*\",\"bollywood\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"\\brap,+rap\\b\",\"rap\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"\\bfolk,+folk\\b|folkfolk\",\"folk\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"jazz,+jazz\\b\",\"jazz\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"\\bpop,+pop\\b\",\"pop\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"rock,rock\",\"rock\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"[\\s\\S]*folk, ?mariachi, folk\",\"folk\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"reggaeton,reggaeton\",\"reggaeton\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"country music,country music\",\"country music\")\ndata2[\"genre\"]=data2[\"genre\"].str.replace(r\"rap,+rap\",\"rap\")","ef11d12d":"data2[\"genre\"].value_counts()","e20def65":"\ngenre_list_interest=[\"rock\",\"classical\",\"pop\",\"jazz\",\"rap\",\"folk\",\"country music\",\"funk\",\"reggaeton\",\"movies_and_broadway\",\n                     \"religiuos\",\"rhytm_and_blues\",\"bollywood\",\"kPop\"]\ndata2_new=data2[data2[\"genre\"].isin(genre_list_interest)]","2bb89f3c":"# Cleaning of 'artists 'column\n\ndata2_new[\"artists\"]=data2_new[\"artists\"].astype(str)\ndata2_new[\"artists\"]=data2_new[\"artists\"].str.strip('[]\"')\ndata2_new[\"artists\"]=data2_new[\"artists\"].str.replace('\\'','').str.replace('\"',\"\")","95acdf25":"data2_new[\"duration_ms\"]=data2_new[\"duration_ms\"]\/1000\ndata2_new[\"duration_ms\"].value_counts(bins=30)","5e81007b":"# Creating a list of time values which will replace the duration_ms column for each row\nlist_time=[x for x in range(60,1740,60)]\nlist_time_2=[x for x in range (1740,3840,240)] # Longer songs are less, so larger intervals created.\nlist_time+=list_time_2\n\n#Replace values of column\"duration_ms\" using  list_time\ndef round_duration(value):\n    for time in list_time:\n        if value<=time:\n            new_value=time\n            break\n    return new_value\n\ndata2_new[\"duration_ms\"]=data2_new[\"duration_ms\"].apply(round_duration) ","85280c45":"# Aggregating data2\ngrouped=data2_new.groupby(['artists','genre','year'], as_index=False)","f818b1a6":"group_mean=grouped[\"duration_ms\",\"popularity\"].mean()\ngroup_count=grouped[\"name\"].count()\ngroup_mean\ngroup_mean[\"genre\"]=group_mean[\"genre\"].astype(str)\ngroup_mean[\"song_count\"]=group_count[\"name\"]\ngroup_mean.head(5)","fecead91":"import plotly\nimport plotly.express as px\nimport plotly.io as pio","a8e0e2fa":"# Sorting table by year\ngroup_mean=group_mean.sort_values('year')\n","43f16a87":"missing_data=group_mean[group_mean['year']==1921]\npresent_list=missing_data['genre'].unique().tolist()\n\nfor genre in genre_list_interest:\n    if genre not in present_list:\n        dict_new={'artists': \"blank\", 'genre': genre, 'year': 1921,'duration_ms':100,'popularity':0, 'song_count':0}\n        group_mean=group_mean.append(dict_new, ignore_index=True)\n","89fde074":"# Selecting color scheme from plotly color charts\nprint(px.colors.qualitative.Alphabet)","6ae06d29":"color_discrete_map={'classical':'#AA0DFE', 'pop':'#3283FE', 'movies_and_broadway':'#85660D', 'jazz':'#16FF32', 'rock':'#565656',\n       'religiuos': '#1C8356', 'funk':'#782AB6', 'reggaeton':'#FA0087', 'country music':'#FE00FA',\n       'rhytm_and_blues':'#1CBE4F', 'folk':'#C4451C','rap':'#DEA0FD','kPop':'#B00068'}\nfig=px.scatter(data_frame=group_mean,x=\"popularity\",y=\"song_count\",color=\"genre\",size=\"duration_ms\",size_max=30,\\\n               color_discrete_map=color_discrete_map,\\\n               hover_name=\"artists\",animation_frame=\"year\",range_x=[0,100],range_y=[0,20],\\\n              title=\"SPOTIFY : MUSIC TRENDS FROM 1921 TO 2020\",labels={\"popularity\":\"popularity\",\"song_count\":\"song_count\"})\nfig.update_layout(title={'x':0.5,'xanchor':'center','font':{'size':20}},\n                  xaxis={'title': {'text': 'POPULARITY'}},\n                  yaxis={'title': {'text': 'NUMBER OF SONGS'}},\n                  legend={'font':{'size':18},'title':{'font':{'size':18}}})\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 800\npio.show(fig)","f022e417":"# Creating new dataframe by aggregation \n\nmissing_data=data2_new[data2_new['year']==1921]\npresent_list=missing_data['genre'].unique().tolist()\n\nfor genre in genre_list_interest:\n    if genre not in present_list:\n        dict_new={'artists': \"blank\", 'genre': genre, 'year': 1921,'duration_ms':100,'popularity':0, 'song_count':0}\n        data2_new=data2_new.append(dict_new, ignore_index=True)\ndata2_new=data2_new.sort_values('year')","8b1f85b7":"group_mean.head(10)","9e9dc770":"grouped_2=group_mean.groupby(['genre','year'],as_index=False)\ndf_a=grouped_2['artists'].count()\ndf_b=grouped_2['song_count'].sum()\ndf_c=grouped_2['popularity'].mean()\ndf_a['song_count']=df_b['song_count']\ndf_a['popularity']=df_c['popularity']\ndf_a=df_a.sort_values('year')","0b359d1a":"years_df_a=[i for i in range(1922,2021)]\nfor genre in genre_list_interest:\n    test_df=df_a[df_a[\"genre\"]==genre]\n    test_list= test_df['year'].unique().tolist()\n    for year in years_df_a:\n        if year not in test_list:\n            dict_new_1={'artists': 0, 'genre': genre, 'year': year,'duration_ms':0,'popularity':0, 'song_count':0}\n            df_a=df_a.append(dict_new_1, ignore_index=True)\n            ","06140c2b":"color_discrete_map={'classical':'#AA0DFE', 'pop':'#3283FE', 'movies_and_broadway':'#85660D', 'jazz':'#16FF32', 'rock':'#565656',\n       'religiuos': '#1C8356', 'funk':'#782AB6', 'reggaeton':'#FA0087', 'country music':'#FE00FA',\n       'rhytm_and_blues':'#1CBE4F', 'folk':'#C4451C','rap':'#DEA0FD','kPop':'#B00068'}\nfig=px.scatter(data_frame=df_a,x=\"popularity\",y=\"song_count\",color=\"genre\",size=\"artists\",size_max=60,\\\n               color_discrete_map=color_discrete_map,\\\n               hover_name=\"genre\",animation_frame=\"year\",range_x=[0,90],range_y=[0,1500],\\\n              title=\"SPOTIFY: TRENDS OF MUSIC FROM 1921 TO 2020\",labels={\"popularity\":\"popularity\",\"song_count\":\"song_count\"})\nfig.update_layout(autosize=False,width=700,height=550,\\\n                  title={'x':0.5,'xanchor':'center','font':{'size':20}},\n                  xaxis={'title': {'text': 'POPULARITY'}},\n                  yaxis={'title': {'text': 'NUMBER OF SONGS'}},\n                  legend={'font':{'size':18},'title':{'font':{'size':18}}})\nfig.update_yaxes(automargin=True)\nfig.update_xaxes(automargin=True)\nfig.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 900\npio.show(fig)\n","2579c796":"## Conclusion 2:<br>\nIn the above graph, each bubble represents a genre. The size of the bubble indicates number of artists. Y-axis is their average popularity of each genre. X-axis is total number of songs produced in each genre in the corresponding year.\n\nIt gives a clearer picture of our findings in the previuos plot. Also worth noting that, religiuos music artists  seem to have produced lot of music in 2000s. As we remember from our genre classification, religiuos music consists of modern rock and contemporary styles which is more towards the taste of the masses. ","948b428e":"## Step 4: Plot using Plotly","b4a7a2b6":"## Step 1: Make dictionary of artists and corresponding genre.","d285de0d":"We will select first 14 genres for further analysis.","2c9502e3":"## Step 2: Use the dictionary above to build genre column in data2","eee1bfdc":"Since, the scatter plot above contains too much data. Now we would attempt a different kind of aggregation. A graph where, a genre will represent a single bubble.","f2b7e8cc":"We will select songs of top 11 genres and a few which are of my choice.<br>\nSo genres of interest are:<br>\n\nrock,classical,pop,jazz,rap,folk,country music,funk,reggaeton,movies_and_broadway,religiuos,rhytm_and_blues,bollywood,kPop   ","8502c3f0":"Data1 gives information on artists, popularity and their music genre. However, the year in which their music was released is not given. On the other hand, Data2 has the information about year in which a particular song was released by an artist, but genre is not mentioned. The following steps have been followed to make a dataframe having all the infprmation in a single table.\n1. Make a dictionary with key as artist and value as the genre, using data1.\n2. Use the above dictionary to build a new column named \"genre\" in data2.\n3. Aggregate Data2 by columns : 'artists','genre','year'. \n4. Plot popularity vs number of songs produced in different years using plotly.\n","a559f952":"Since 1921 does not have many genres, there is an error when plotting the scatter plot. This may be because the base frame is made on the basis of year 1921. So I added blank rows into the dataframe for other genres. Thus other genres will be included in the base frame.","07052832":"## Conclusion 1:<br>\nIn the above graph, each bubble represents an artist. Color of the bubble represents the genre. The size of the bubble indicates average duration of an artist's song. Y-axis is their average popularity in a particular year. X-axis is total number of songs produced by the artist in the corresponding year. <br>\nIn 1921, classical seems to be the most popular genre. In the following years, jazz and classical genres flourish.1940s sees a new wave of different genres such as pop and folk. The movie industry seems to have picked up some pace. Hence, a lot of broadway tunes and bollywood songs have come into picture.<br>\nIn the 1950s there is a resurgence of jazz music. A lot of artists have produced jazz music in the 1950s. In the late 1950s, we can see emergence of rock music. It not just emerges, but dominates the 1960s and 1970s. In the late 1970s, there are number of artists producing pop and funk music. 1980s sees a surge of rap music production which turns out to be most the popular genre in the 1990s along with rock.1980s also sees many reggaeton artist producing music.<br>\n2000s seems to have a fare share of all types of music: rock, pop, rap with some new additions such as kpop.\nWorth noting is the fact that kpop also has grown in popularity since 2015. Although, pop, rap and rock remains the dominant music of the 2000s.","04b9a8df":"## Step 3:Aggregate Data2 by columns : 'artists','genre','year'**","e823bd55":"Rock seems to be genre with maximum number of songs. However, there are other sub divisions of rock such as country rock, modern rock. Similarly, other genres like rap, pop also have sub genres.We will use vectorisation to classify the artists work into main genre.","72de6e3d":"We will use the aggregated dataframe group_mean for the next analysis.","b4265caa":"For more information on using plotly for creating animated bubble charts please refer the following links:\n1. https:\/\/www.kaggle.com\/aashita\/guide-to-animated-bubble-charts-using-plotly\n2. https:\/\/www.youtube.com\/watch?v=VdCMzpVcsCc","39f489b4":"We will analyse how music trends have changed from 1921 to 2020. This exploratory data analysis has been done using plotly animated scatter plots. ","0903ad8f":"We need to convert the values in genre column to string and do some cleaning.","e0e8df39":"Again for error resolution, every year must contain data for all genre. So adding a blank row for missing genres in each year.","6ad2394a":"Duration of songs are given in milli seconds. Converting these into seconds.","f767e188":"We require only an approximate value of duration of songs. So we will replace the duration of each song with a generalised value. For example, a song with a duration between 60 to 120 seconds,will have the column value as 120 seconds, a song with a duration between 20 to 180 seconds will have the column value as 180 seconds, so on.\n"}}