{"cell_type":{"4593c7dc":"code","3b377c6c":"code","d8eec436":"code","f133f696":"code","55c0dcfd":"code","ce37f95d":"code","a08f14c5":"code","b38f9db4":"code","c696436d":"code","e64c72c7":"code","e601f547":"code","a7dc7bb1":"code","ff6c6833":"code","35218ab4":"code","c5c05616":"code","7c54ca79":"code","8e70fbbb":"code","8416d89e":"code","d0101de9":"code","a08987e5":"code","a0e63091":"code","d6478bf1":"code","f6041265":"code","6ac49ea4":"code","86b38c41":"code","d3647c17":"code","cb797a20":"code","3783579a":"code","61a57ee7":"code","c4ad94e5":"code","976b36db":"code","dd1196e7":"code","292ac0d9":"code","cf1faf94":"code","b8037fbe":"code","8d27e6e4":"code","b683b644":"markdown","fa872519":"markdown"},"source":{"4593c7dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3b377c6c":"import matplotlib.pyplot as plt\nfrom matplotlib.pyplot import figure\n\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import RandomizedSearchCV\n","d8eec436":"train = pd.read_csv(\"\/kaggle\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/learn-together\/test.csv\")","f133f696":"train.head()","55c0dcfd":"test.head()","ce37f95d":"plt.scatter(train['Elevation'], train['Slope'], c=train['Cover_Type'], s = 0.5)\n\nplt.show()","a08f14c5":"sns.pairplot(train[['Horizontal_Distance_To_Hydrology',\n       'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways',\n       'Hillshade_9am', 'Hillshade_Noon', 'Hillshade_3pm',\n       'Horizontal_Distance_To_Fire_Points']])","b38f9db4":"sns.boxplot(x = train['Cover_Type'], y = train['Elevation'])","c696436d":"sns.swarmplot(x = train['Cover_Type'], y = train['Elevation'])","e64c72c7":"sns.boxplot(x = train['Cover_Type'], y = train['Elevation'])","e601f547":"# get target\ny = train['Cover_Type']\n\n# get features (TODO feature extraction)\nX = train.drop(['Cover_Type'],axis=1)\nXtest = test\n\n# split data into training and validation data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 42)","a7dc7bb1":"train_X = train_X.drop(['Id'], axis = 1)","ff6c6833":"val_X = val_X.drop(['Id'], axis = 1)","35218ab4":"model_fetimp = RandomForestClassifier(n_estimators=500, n_jobs=-1, random_state=42)","c5c05616":"#thit is how we get the feature importance with simple steps:\nmodel_fetimp.fit(train_X.values, train_y.values.ravel())\n# display the relative importance of each attribute\nimportances = model_fetimp.feature_importances_\n#Sort it\nprint (\"Sorted Feature Importance:\")\nsorted_feature_importance = sorted(zip(importances, list(train_X.columns)), reverse=True)\nprint (sorted_feature_importance)","7c54ca79":"features = train_X.columns\nimportances = model_fetimp.feature_importances_\nindices = np.argsort(importances)\nfigure(num=None, figsize=(6, 12), dpi=300, facecolor='w', edgecolor='k')\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","8e70fbbb":"print([features[i] for i in indices])","8416d89e":"importances[indices]","d0101de9":"train_X = train_X.drop(['Soil_Type7', 'Soil_Type15', 'Soil_Type8', 'Soil_Type25', 'Soil_Type9', 'Soil_Type36', 'Soil_Type28', 'Soil_Type27', 'Soil_Type21', 'Soil_Type34', 'Soil_Type19', 'Soil_Type26', 'Soil_Type37', 'Soil_Type14', 'Soil_Type18', 'Soil_Type16', 'Soil_Type5', 'Soil_Type1', 'Soil_Type20', 'Soil_Type35', 'Soil_Type31', 'Soil_Type24', 'Soil_Type6', 'Soil_Type11', 'Soil_Type33', 'Wilderness_Area2', 'Soil_Type12', 'Soil_Type23', 'Soil_Type32', 'Soil_Type29', 'Soil_Type22', 'Soil_Type13', 'Soil_Type17', 'Soil_Type2', 'Soil_Type30', 'Soil_Type40', 'Soil_Type4'], axis = 1)","a08987e5":"val_X = val_X.drop(['Soil_Type7', 'Soil_Type15', 'Soil_Type8', 'Soil_Type25', 'Soil_Type9', 'Soil_Type36', 'Soil_Type28', 'Soil_Type27', 'Soil_Type21', 'Soil_Type34', 'Soil_Type19', 'Soil_Type26', 'Soil_Type37', 'Soil_Type14', 'Soil_Type18', 'Soil_Type16', 'Soil_Type5', 'Soil_Type1', 'Soil_Type20', 'Soil_Type35', 'Soil_Type31', 'Soil_Type24', 'Soil_Type6', 'Soil_Type11', 'Soil_Type33', 'Wilderness_Area2', 'Soil_Type12', 'Soil_Type23', 'Soil_Type32', 'Soil_Type29', 'Soil_Type22', 'Soil_Type13', 'Soil_Type17', 'Soil_Type2', 'Soil_Type30', 'Soil_Type40', 'Soil_Type4'], axis = 1)","a0e63091":"rf = RandomForestRegressor(random_state = 42)\nfrom pprint import pprint# Look at parameters used by our current forest\nprint('Parameters currently in use:\\n')\npprint(rf.get_params())","d6478bf1":"train_X.head()","f6041265":"train_y.head()","6ac49ea4":"val_X.head()","86b38c41":"val_y.head()","d3647c17":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4]\n# Method of selecting samples for training each tree\nbootstrap = [True, False]# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\npprint(random_grid)","cb797a20":"train_X.values","3783579a":"train_y.values.ravel()","61a57ee7":"# Use the random grid to search for best hyperparameters\n# First create the base model to tune\nrf = RandomForestRegressor()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)# Fit the random search model\nrf_random.fit(train_X.values, train_y.values.ravel())","c4ad94e5":"rf_random.best_params_","976b36db":"def evaluate(model, test_features, test_labels):\n    predictions = model.predict(test_features)\n    errors = abs(predictions - test_labels)\n    mape = 100 * np.mean(errors \/ test_labels)\n    accuracy = 100 - mape\n    print('Model Performance')\n    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n    print('Accuracy = {:0.2f}%.'.format(accuracy))\n    \n    return accuracy\nbase_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\nbase_model.fit(train_X.values, train_y.values.ravel())\nbase_accuracy = evaluate(base_model, val_X.values, val_y.values.ravel())","dd1196e7":"best_random = rf_random.best_estimator_\nrandom_accuracy = evaluate(best_random, val_X.values, val_y.values.ravel())","292ac0d9":"print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) \/ base_accuracy))","cf1faf94":"test_ids = Xtest[\"Id\"]\ntest = Xtest.drop([\"Id\", 'Soil_Type7', 'Soil_Type15', 'Soil_Type8', 'Soil_Type25', 'Soil_Type9', 'Soil_Type36', 'Soil_Type28', 'Soil_Type27', 'Soil_Type21', 'Soil_Type34', 'Soil_Type19', 'Soil_Type26', 'Soil_Type37', 'Soil_Type14', 'Soil_Type18', 'Soil_Type16', 'Soil_Type5', 'Soil_Type1', 'Soil_Type20', 'Soil_Type35', 'Soil_Type31', 'Soil_Type24', 'Soil_Type6', 'Soil_Type11', 'Soil_Type33', 'Wilderness_Area2', 'Soil_Type12', 'Soil_Type23', 'Soil_Type32', 'Soil_Type29', 'Soil_Type22', 'Soil_Type13', 'Soil_Type17', 'Soil_Type2', 'Soil_Type30', 'Soil_Type40', 'Soil_Type4'], axis = 1)","b8037fbe":"test_pred = best_random.predict(test)\ntest_pred = np.ceil(test_pred)","8d27e6e4":"# Save test predictions to file\noutput = pd.DataFrame({'Id': test_ids,\n                       'Cover_Type': test_pred})\noutput.to_csv('submission.csv', index=False)","b683b644":"#### Quick Random Forest from:\n#### https:\/\/towardsdatascience.com\/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74","fa872519":"#### Preliminary EDA"}}