{"cell_type":{"7b983ca8":"code","662a0e91":"code","4f5fa148":"code","190513a8":"code","58a27b1f":"code","99977bbf":"code","aa44ea94":"code","1da88599":"markdown","be07b4a4":"markdown","bb55ba77":"markdown","3d47f60e":"markdown"},"source":{"7b983ca8":"# \u3053\u306ePython 3\u74b0\u5883\u306b\u306f\u3001\u591a\u304f\u306e\u5f79\u7acb\u3064\u5206\u6790\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\n# \u8a73\u7d30\u306f\u53f3\u306b\u3066\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059 kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# \u4f8b\u3048\u3070\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059 \n\nimport numpy as np # \u7dda\u5f62\u4ee3\u6570\nimport pandas as pd # \u30c7\u30fc\u30bf\u6574\u5f62, CSV file I\/O (e.g. pd.read_csv)\n\n# \u30d5\u30a1\u30a4\u30eb\u306e\u5165\u529b\u306f\u3053\u306e\u3088\u3046\u306b\u3067\u304d\u307e\u3059 \"..\/input\/\" directory.\n# \u3053\u306e\u30bb\u30eb\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044 (Shift+Enter\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059) \u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3055\u308c\u307e\u3059\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# \u3042\u306a\u305f\u306f\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u66f8\u304d\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059","662a0e91":"fpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-2019-workshop-scheduling\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')","4f5fa148":"# family_id:\u5bb6\u65cfID\u3001choice_0\uff5e9:1\u304b\u3089100\u65e5\u76ee\u306e\u3069\u306e\u65e5\u306b\u958b\u50ac\u3055\u308c\u308b\u30ef\u30fc\u30af\u30b7\u30e7\u30c3\u30d7\u306b\u53c2\u52a0\u3057\u305f\u3044\u304b\u3001n_people\uff1a\u5bb6\u65cf\u306e\u4eba\u6570\ndata.head()","190513a8":"submission.head()","58a27b1f":"family_size_dict = data[['n_people']].to_dict()['n_people']\n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","99977bbf":"def cost_function(prediction):\n\n    penalty = 0\n\n    # \u3053\u306e\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u65e5\u306e\u4eba\u6570\u3092\u6570\u3048\u307e\u3059\n    daily_occupancy = {k:0 for k in days}\n    \n    # \u5168\u5bb6\u65cf\u3092\u30eb\u30fc\u30d7\u51e6\u7406; d \u306f\u5404\u5bb6\u65cf f \u306e\u30ef\uff0d\u30af\u30b7\u30e7\u30c3\u30d7\u65e5\u3067\u3059\n    for f, d in enumerate(prediction):\n\n        # \u4e0a\u3067\u4f5c\u6210\u3057\u305f\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3001\u5909\u6570\u306b\u5024\u3092\u4ee3\u5165\u3059\u308b\n        n = family_size_dict[f]\n        choice_0 = choice_dict['choice_0'][f]\n        choice_1 = choice_dict['choice_1'][f]\n        choice_2 = choice_dict['choice_2'][f]\n        choice_3 = choice_dict['choice_3'][f]\n        choice_4 = choice_dict['choice_4'][f]\n        choice_5 = choice_dict['choice_5'][f]\n        choice_6 = choice_dict['choice_6'][f]\n        choice_7 = choice_dict['choice_7'][f]\n        choice_8 = choice_dict['choice_8'][f]\n        choice_9 = choice_dict['choice_9'][f]\n\n        # \u5bb6\u65cf\u4eba\u6570\u3092\u305d\u308c\u305e\u308c\u306e\u65e5\u306e\u53c2\u52a0\u6570\u306b\u52a0\u7b97\u3059\u308b\n        daily_occupancy[d] += n\n\n        # \u30da\u30ca\u30eb\u30c6\u30a3\u3092\u8a08\u7b97\u3059\u308b\n        if d == choice_0:\n            penalty += 0\n        elif d == choice_1:\n            penalty += 50\n        elif d == choice_2:\n            penalty += 50 + 9 * n\n        elif d == choice_3:\n            penalty += 100 + 9 * n\n        elif d == choice_4:\n            penalty += 200 + 9 * n\n        elif d == choice_5:\n            penalty += 200 + 18 * n\n        elif d == choice_6:\n            penalty += 300 + 18 * n\n        elif d == choice_7:\n            penalty += 300 + 36 * n\n        elif d == choice_8:\n            penalty += 400 + 36 * n\n        elif d == choice_9:\n            penalty += 500 + 36 * n + 199 * n\n        else:\n            penalty += 500 + 36 * n + 398 * n\n\n    # \u3059\u3079\u3066\u306e\u65e5\u306e\u53c2\u52a0\u8005\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    #  (\u30cf\u30fc\u30c9\u306a\u5236\u7d04\u3067\u306f\u306a\u304f\u30bd\u30d5\u30c8\u306a\u5236\u7d04\u3092\u4f7f\u7528\u3059\u308b)\n    for _, v in daily_occupancy.items():\n        if (v > MAX_OCCUPANCY) or (v < MIN_OCCUPANCY):\n            penalty += 100000000\n\n    # \u4f1a\u8a08\u30b3\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\n    # \u306f\u3058\u3081\u306e\u65e5\u306e\u5024\u3092\u8a08\u7b97\u3059\u308b(day 100)\n    accounting_cost = (daily_occupancy[days[0]]-125.0) \/ 400.0 * daily_occupancy[days[0]]**(0.5)\n    # \u3000\uff11\u65e5\u306e\u53c2\u52a0\u8005\u304c125\u3088\u308a\u5c11\u306a\u3044\u5834\u5408\u306b\u4f1a\u8a08\u30b3\u30b9\u30c8\u304c\u30de\u30a4\u30ca\u30b9\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001MAX\u3092\u3068\u308b\n    accounting_cost = max(0, accounting_cost)\n    \n    # \u6b8b\u308a\u306e\u65e5\u306e\u4f1a\u8a08\u30b3\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\n    yesterday_count = daily_occupancy[days[0]]\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = abs(today_count - yesterday_count)\n        accounting_cost += max(0, (daily_occupancy[day]-125.0) \/ 400.0 * daily_occupancy[day]**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty","aa44ea94":"# \u30b5\u30f3\u30d7\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3092\u8a66\u3057\u306b\u4f7f\u3063\u3066\u307f\u308b\nbest = submission['assigned_day'].tolist()\nstart_score = cost_function(best)\n\nnew = best.copy()\n# \u5404\u5bb6\u65cf\u3092\u30eb\u30fc\u30d7\u51e6\u7406\u3059\u308b\nfor fam_id, _ in enumerate(best):\n    # \u5bb6\u65cf\u6bce\u306e\u9078\u629e\u3092\u66f4\u65b0\n    for pick in range(10):\n        day = choice_dict[f'choice_{pick}'][fam_id]\n        temp = new.copy()\n        temp[fam_id] = day # \u65b0\u3057\u3044\u53c2\u52a0\u65e5\u3092\u4ee3\u5165\n        if cost_function(temp) < start_score:\n            new = temp.copy()\n            start_score = cost_function(new)\n\nsubmission['assigned_day'] = new\nscore = cost_function(new)\nsubmission.to_csv(f'submission_{score}.csv')\nprint(f'Score: {score}')","1da88599":"## \u7c21\u5358\u306a\u6700\u9069\u5316\n\n\u305d\u308c\u305e\u308c\u306e\u5bb6\u65cf\u3001\u305d\u308c\u305e\u308c\u306e\u5e0c\u671b\u65e5\u3001\nFor each family, loop over their choices, and if keep it if the score improves. There's a lot of easy improvement that can be made to this code.","be07b4a4":"## \u30b3\u30b9\u30c8\u8a55\u4fa1\u95a2\u6570\n","bb55ba77":"## \u3044\u304f\u3064\u304b\u306e\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3092\u4f5c\u6210\u3059\u308b\n\n\u4f7f\u7528\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u3002","3d47f60e":"## \u5bb6\u65cf\u60c5\u5831\u3068\u30b5\u30f3\u30d7\u30eb\u306e\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u3092\u898b\u3066\u307f\u308b"}}