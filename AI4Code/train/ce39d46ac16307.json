{"cell_type":{"5ec32df0":"code","6b89ceeb":"code","69d4960b":"code","47058a6a":"code","9c3cb8fc":"code","c5420a91":"code","197e1ebe":"code","b69f6900":"code","cf8cc114":"code","431721ad":"code","a663753a":"code","d4987acf":"code","6b0c4896":"code","c9163a85":"code","c41d9d7b":"code","19a3e21a":"code","011eb1f5":"code","646d53b9":"code","b086562a":"code","ac881e9b":"code","0951db5d":"code","6d2d1ba8":"code","b817e02d":"code","377ced5a":"code","2b4f4966":"code","d77240f8":"code","12ed19f4":"code","06748527":"code","a7fd4b63":"code","d46f034a":"code","6fa713ec":"code","d50ecbc6":"code","ea58fa64":"code","8197ad98":"code","5462e7b7":"code","30f1da46":"code","85570b40":"code","533c7bd7":"code","c7289b51":"code","3ab743b7":"code","cde34692":"code","5041d185":"code","33f5cb9b":"code","05481d13":"code","2470d53c":"code","edb48e91":"code","00186a51":"code","7094366d":"code","b9b147b2":"code","087e24eb":"code","5aea975d":"code","50d9e881":"code","270d6d3e":"code","04f6e4ec":"code","e86615fa":"code","c271d6bd":"code","24520c9d":"code","712ce59e":"code","b832e08f":"code","92bd79db":"code","94d6b0d0":"code","8bf41e75":"code","87fc8c97":"code","fab5fdbc":"code","6b5d0b03":"code","3c061d7f":"code","8e54a9ef":"code","837f2263":"code","3930d5b2":"code","6c5e8825":"code","7f88910a":"code","be31864b":"code","56ef05b8":"code","523e44bd":"code","d3fcdbd3":"code","8fbed723":"code","d7412666":"code","6c0f2db6":"code","ef19c1dc":"markdown","105acecd":"markdown","45ea1a54":"markdown","5ebc3f7e":"markdown","cd149d3e":"markdown","f5026282":"markdown","8fcf5c62":"markdown","5d2f994c":"markdown","b984f698":"markdown","f29cd210":"markdown","a103d494":"markdown","f1437a7f":"markdown","c533d680":"markdown","f3a54da7":"markdown","fadac638":"markdown","5ac2b0c8":"markdown","10c931f4":"markdown","c605a23a":"markdown","0d615fb0":"markdown","b20506c1":"markdown","6e5288c0":"markdown","cf8156b4":"markdown","9d2e1fac":"markdown","9faaab66":"markdown","5a17cfae":"markdown","7b889bbb":"markdown","018a0cdc":"markdown","ba2e3c1e":"markdown","5543b639":"markdown","2c8e71a8":"markdown","54b9d840":"markdown","a4168641":"markdown","ad4b547d":"markdown","54ca86d3":"markdown","a1104b8f":"markdown","e10fef2a":"markdown","b3aeceb6":"markdown"},"source":{"5ec32df0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6b89ceeb":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.style.use(\"fivethirtyeight\")\nsns.set_style(\"darkgrid\")","69d4960b":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_auc_score\nimport category_encoders as ce\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nfrom sklearn.decomposition import PCA\n\nimport optuna","47058a6a":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv\")\n#submission = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")","9c3cb8fc":"train_original = train.copy()\ntest_original = test.copy()","c5420a91":"display (train.head())\ndisplay (test.head())\ndisplay (sub.head())","197e1ebe":"display(train.shape)\ndisplay(test.shape)","b69f6900":"display(train.info())\ndisplay(test.info())","cf8cc114":"print(\"Columns in Train: \\n\\n\", train.columns.tolist())\nprint(\"\\nColumns in Test: \\n\\n\", test.columns.tolist())","431721ad":"import pandas_profiling as pp\npp.ProfileReport(train)","a663753a":"print(\"--------DETAILS OF TRAINING AND TESTING DATA SIZE---------\")\nprint(\"Number of instances in train data: \",len(train))\nprint(\"Number of instances in test data: \",len(test))\nprint(\"There are {} feature columns\".format(test.shape[1]))","d4987acf":"!pip install AutoViz\n!pip install xlrd","6b0c4896":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\ndftc = AV.AutoViz(filename='', \n                  sep ='' , \n                  depVar ='target', \n                  dfte = train, \n                  header = 0, \n                  verbose = 1, \n                  lowess = False, \n                  chart_format ='png', \n                  max_rows_analyzed = 300000, \n                  max_cols_analyzed = 30\n)","c9163a85":"display(train.isnull().sum())\ndisplay(test.isnull().sum())\nprint(train.isnull().sum().sum())\nprint(test.isnull().sum().sum())","c41d9d7b":"train['target'].value_counts().to_frame()","19a3e21a":"plt.figure(figsize=(6,4))\nsns.countplot(x='target', data=train)\nplt.show()","011eb1f5":"def plot_categorical(cat, train=train):\n    ax = plt.subplots(figsize=(12, 6))\n    sns.set_style('whitegrid')\n    sns.countplot(x=cat, data=train);\n    plt.ylabel('No. of Observations', size=20);\n    plt.xlabel(cat+' Count', size=20);\n    plt.show()\n    \ndef plot_cat_response(cat, train=train):\n    ax = plt.subplots(figsize=(12, 8))\n    sns.set_style('whitegrid')\n    sns.countplot(x=cat, hue='target', data=train);\n    plt.show()","646d53b9":"plot_categorical('cat0')","b086562a":"plot_cat_response('cat0')","ac881e9b":"plot_categorical('cat1')","0951db5d":"plot_cat_response('cat1')","6d2d1ba8":"plot_categorical('cat2')","b817e02d":"plot_cat_response('cat2')","377ced5a":"plot_categorical('cat3')","2b4f4966":"plot_cat_response('cat3')","d77240f8":"plot_categorical('cat4')","12ed19f4":"plot_cat_response('cat4')","06748527":"plot_categorical('cat5')","a7fd4b63":"plot_cat_response('cat5')","d46f034a":"plot_categorical('cat6')","6fa713ec":"plot_cat_response('cat6')","d50ecbc6":"plot_categorical('cat7')","ea58fa64":"plot_cat_response('cat7')","8197ad98":"plot_categorical('cat8')","5462e7b7":"plot_cat_response('cat8')","30f1da46":"plot_categorical('cat9')","85570b40":"plot_cat_response('cat9')","533c7bd7":"plot_categorical('cat10')","c7289b51":"plot_cat_response('cat10')","3ab743b7":"plot_categorical('cat11')","cde34692":"plot_cat_response('cat11')","5041d185":"plot_categorical('cat12')","33f5cb9b":"plot_cat_response('cat12')","05481d13":"plot_categorical('cat13')","2470d53c":"plot_cat_response('cat13')","edb48e91":"plot_categorical('cat14')","00186a51":"plot_cat_response('cat14')","7094366d":"plot_categorical('cat15')","b9b147b2":"plot_cat_response('cat15')","087e24eb":"plot_categorical('cat16')","5aea975d":"plot_cat_response('cat16')","50d9e881":"plot_categorical('cat17')","270d6d3e":"plot_cat_response('cat17')","04f6e4ec":"plot_categorical('cat18')","e86615fa":"plot_cat_response('cat18')","c271d6bd":"train.corr()['target'].sort_values(ascending=False)[:25]","24520c9d":"a = train.drop(\"target\", axis=1)\na.corrwith(train.target).plot(kind='bar', grid=True, figsize=(15,10), color='salmon')\nplt.title(\"Correlation with target\", size=20)\nplt.xticks(size=15, rotation=90)\nplt.yticks(size=15)\nplt.show()","712ce59e":"plt.figure(figsize=(10,7))\nsns.heatmap(train.corr(), annot=True, cbar=False, fmt='.1g', linewidth=0.3);","b832e08f":"plt.figure(figsize=(10,7))\nsns.heatmap(train.corr(method='pearson'), annot=True, cbar=False, fmt='.1g', linewidth=0.3)\nplt.show()","92bd79db":"plt.figure(figsize=(10,7))\nsns.heatmap(train.corr(method='spearman'), annot=True, cbar=False, fmt='.1g', linewidth=0.3)\nplt.show()","94d6b0d0":"#y = train['target']\ntrain.drop(['id','target'], axis=1, inplace=True)\ntest.drop(['id'], axis=1, inplace=True)","8bf41e75":"plt.figure(figsize=(10,8))\nsns.boxplot(data=train, orient=\"h\", palette=\"Set2\")\nplt.show()","87fc8c97":"plt.figure(figsize=(10,8))\nsns.boxplot(data=test, orient=\"h\", palette=\"Set2\"); # colon used to avoid plt.show()","fab5fdbc":"train.skew().sort_values(ascending=True)[:20]","6b5d0b03":"test.skew().sort_values(ascending=True)[:20]","3c061d7f":"!pip install sweetviz","8e54a9ef":"import sweetviz as sv\nmy_report = sv.analyze(train)\n#my_report.show_html()\nmy_report.show_notebook(w=\"100%\", h=\"full\")","837f2263":"sns.pairplot(data=train)\nplt.show()","3930d5b2":"sns.pairplot(data=test)\nplt.show()","6c5e8825":"def preprocess(df):\n    categorical_cols = [c for c in df.columns if 'cat' in c]\n    numerical_cols = [c for c in df.columns if 'cat' not in c]\n    \n    onehot_encoded_df = pd.get_dummies(df[categorical_cols])\n    numerical_df = df[numerical_cols]\n    \n    return pd.concat([numerical_df, onehot_encoded_df], axis=1)","7f88910a":"train_df = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","be31864b":"train_size = train_df.shape[0]\ntest_size = test_df.shape[0]\nall_data = pd.concat([train_df, test_df])","56ef05b8":"all_data = preprocess(all_data)\ntrain_data = all_data[:train_size]\ntest_data = all_data[train_size:].drop(columns=['target'])","523e44bd":"y = train_data.target.values\nX = train_data.drop(columns=['id', 'target'])\nX_ = test_data.drop(columns='id')","d3fcdbd3":"params = {\n    'lambda': 0.0001,\n    'learning_rate': 0.007930236488607134,\n    'max_bin': 270,\n    'max_depth': 98,\n    'metric': 'auc',\n    'min_data_in_leaf': 60,\n    'n_estimators': 20000,\n    'num_leaves': 263,\n    'objective': 'binary',\n    'sub_feature': 0.2098021977637481\n}","8fbed723":"folds = KFold(n_splits = 50, shuffle=True)\noof = np.zeros(X.shape[0])\npredictions = np.zeros(X_.shape[0])","d7412666":"for fold_, (trn_idx, val_idx) in enumerate(folds.split(X, y)):\n    print(\"Fold {}\".format(fold_))\n    X_train = X.iloc[trn_idx]\n    y_train = y[trn_idx]\n    X_test = X.iloc[val_idx]\n    y_test = y[val_idx]\n    clf = lgb.LGBMClassifier(**params, random_state=42)\n    clf.fit(X_train, y_train, eval_set=[(X_train, y_train),(X_test, y_test)],\n        eval_metric='auc', early_stopping_rounds=250, verbose=250  )\n    predictions += clf.predict_proba(X_, num_iteration=clf.best_iteration_)[:,1] \/ folds.n_splits","6c0f2db6":"submission = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv')\nsubmission = pd.concat([submission, pd.DataFrame(predictions)], axis=1).drop(columns='target')\nsubmission.columns = ['id', 'target']\nsubmission.to_csv('submission.csv', index=False)","ef19c1dc":"<h2 style=color:green align=\"left\"> 9) cat7 <\/h2>","105acecd":"<h2 style=color:green align=\"left\"> 14) cat12 <\/h2>","45ea1a54":"<h2 style=color:green align=\"left\"> i) Pandas Profiling <\/h2>","5ebc3f7e":"<h2 style=color:green align=\"left\"> 8) cat6 <\/h2>","cd149d3e":"<h2 style=color:green align=\"left\"> vi) Data Visualisation <\/h2>\n\n- Univariate Analysis\n\n- Bivariate Analysis\n\n- Multivariate Analysis","f5026282":"<h2 style=color:green align=\"left\"> 13) cat11 <\/h2>","8fcf5c62":"### Multivariate Analysis","5d2f994c":"<h2 style=color:green align=\"left\"> ii) Correlation between Features <\/h2>","b984f698":"<h1 style=color:blue align=\"left\"> 4. Feature Engineering <\/h1>","f29cd210":"<h2 style=color:green align=\"left\"> iv) Outliers <\/h2>","a103d494":"<h2 style=color:green align=\"left\"> 6) cat4 <\/h2>","f1437a7f":"<h2 style=color:green align=\"left\"> 5) cat3 <\/h2>","c533d680":"<h1 style=color:blue align=\"left\"> 5. Model Building and Evaluation <\/h1>","f3a54da7":"<h2 style=color:green align=\"left\"> ii) AutoViz <\/h2>","fadac638":"<h2 style=color:green align=\"left\"> 16) cat14 <\/h2>","5ac2b0c8":"<h2 style=color:green align=\"left\"> 17) cat14 <\/h2>","10c931f4":"<h2 style=color:green align=\"left\"> 7) cat5 <\/h2>","c605a23a":"### Univariate Analysis","0d615fb0":"<h1 style=color:blue align=\"left\"> 2. Load Data <\/h1>","b20506c1":"<h2 style=color:green align=\"left\"> 3) cat1 <\/h2>","6e5288c0":"<h2 style=color:green align=\"left\"> v) Skewness and Kurtsis <\/h2>","cf8156b4":"<h2 style=color:green align=\"left\"> 1) target <\/h2>","9d2e1fac":"### Content:\n1. EDA(Exploratory Data Analysis)\n\n   a. Manual EDA\n   \n   b. Pandas Profiling\n   \n   c. SweetViz\n   \n   d. AutoViz\n    \n2. Outliers\n3. Correlation\n4. Skewness and Kurtosis\n5. Data Visualisation\n6. Feature Engineering\n7. Model building & Evaluation","9faaab66":"<h2 style=color:green align=\"left\"> 18) cat16 <\/h2>","5a17cfae":"<h2 style=color:green align=\"left\"> 11) cat9 <\/h2>","7b889bbb":"<h2 style=color:green align=\"left\"> 18) cat17 <\/h2>","018a0cdc":"<h1 style=color:blue align=\"left\"> 3. EDA(Exploratory Data Analysis) <\/h1>","ba2e3c1e":"<h2 style=color:green align=\"left\"> 2) cat0 <\/h2>","5543b639":"<h2 style=color:green align=\"left\"> 12) cat10 <\/h2>","2c8e71a8":"<h1 style=color:blue align=\"left\"> 1. Import Required Libraries <\/h1>","54b9d840":"<h2 style=color:green align=\"left\"> 4) cat2 <\/h2>","a4168641":"<h2 style=color:green align=\"left\"> 10) cat8 <\/h2>","ad4b547d":"<h1 style=color:blue align=\"center\"> Tabular Playground Series - Mar 2021 <\/h>\n\n### Data Description\n- For this competition, you will be predicting a **binary target** based on a number of feature columns given in the data.\n\n- Train set has **300,000 rows** while test set has **200,000 rows**. There are **19 categorical features** from **cat0 - cat18** and **11 continuous features** from **cont0 - cont10** with total of **30 features.**\n\n### Files\n- **train.csv** - the training data with the target column\n- **test.csv** - the test set; you will be predicting the target for each row in this file (the probability of the binary target)\n- **sample_submission.csv** - a sample submission file in the correct format\n\n- **Submissions** are evaluated on **area under the ROC curve** between the predicted probability and the observed target.","54ca86d3":"<h2 style=color:green align=\"left\"> 19) cat18 <\/h2>","a1104b8f":"<h2 style=color:green align=\"left\"> iii) Drop Unwanted Columns <\/h2>","e10fef2a":"<h2 style=color:green align=\"left\"> ii) Missing Values <\/h2>","b3aeceb6":"<h2 style=color:green align=\"left\"> 15) cat13 <\/h2>"}}