{"cell_type":{"c9484c1f":"code","8f7bbacd":"code","2c47eb7d":"code","189d11e3":"code","2536a66f":"code","5444a391":"code","6c48abaa":"code","52e2b359":"code","e409d99b":"code","f732147a":"code","d0794dc4":"code","b13868a7":"code","357ec41d":"code","953fd440":"code","139b6647":"code","a17a4767":"code","1cb064ee":"code","05df9a0d":"code","d5bf06d1":"code","9798a2a5":"code","df7cac70":"code","d674b44a":"code","1f77a1a4":"code","b8e41f13":"code","de0e4695":"code","de4fcb76":"code","9c3d3b12":"markdown","b5941b38":"markdown","939547a2":"markdown","1fb7d09a":"markdown","51ae583f":"markdown","7e78c7e6":"markdown","3660c3a1":"markdown","e4d18d07":"markdown","b2cef1e6":"markdown","e4d3d8a3":"markdown","7172a407":"markdown","e3c14d1e":"markdown","6ed74d2d":"markdown","ef792d38":"markdown","9f97469d":"markdown"},"source":{"c9484c1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f7bbacd":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.figure_factory as ff\nfrom plotly import tools\n\nimport gc\nfrom datetime import datetime\nfrom sklearn.model_selection import train_test_split, KFold\nfrom sklearn.metrics import  roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom catboost  import CatBoostClassifier\nfrom sklearn import svm\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nimport xgboost as xgb","2c47eb7d":"from plotly.offline import download_plotlyjs, init_notebook_mode,plot,iplot","189d11e3":"df = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","2536a66f":"df.head()","5444a391":"print(\"credit card fraud detection data - rows:\", df.shape[0], \"columns: \" , df.shape[1])","6c48abaa":"total = df.isnull().sum().sort_values(ascending = False)\npercent = (df.isnull().sum()\/df.isnull().count() * 100).sort_values(ascending = False)\npd.concat([total,percent], axis = 1, keys= ['total','percent'])","52e2b359":"temp = df['Class'].value_counts()\ndf_fraud = pd.DataFrame({'Class': temp.index, 'values': temp.values})\ndf_fraud","e409d99b":"import plotly.graph_objs as go\ntrace = go.Bar(x = df_fraud['Class'], y = df_fraud['values'], \n              name = \"Plotting Unbalanced Data where 1 is Fraud and 0 is Non Fraud Data\",\n              marker = dict(color=\"Red\"),\n              text = df_fraud['values'])\ndata = [trace]\nlayout = dict(title = \"Plotting Unbalanced Data where 1 is Fraud and 0 is Non Fraud Data\", \n             xaxis = dict(title = 'Class', showticklabels = True),\n             yaxis = dict(title = 'Number of Transactions'),\n             hovermode = 'closest',\n             width = 800)\nfig = dict(data=data, layout = layout)\niplot(fig, filename = 'class')","f732147a":"class_0 = df.loc[df['Class'] == 0]['Time']\nclass_1 = df.loc[df['Class'] == 1]['Time']\nhist_data = [class_0, class_1]\ngroup_labels = ['Not_Fraud', 'Fraud']\nfig = ff.create_distplot(hist_data,group_labels, show_hist = False, show_rug = False )\nfig['layout'].update(title= \"Time Density Plot\", xaxis=  dict(title = 'Time[s]'))\niplot(fig, filename = 'dist_only')","d0794dc4":"fig, (ax1, ax2) = plt.subplots(ncols = 2, figsize=(12,6))\ns = sns.boxplot(ax = ax1, x = \"Class\", y = 'Amount', hue = 'Class', data = df, palette = 'PRGn', showfliers = True)\ns = sns.boxplot(ax = ax2, x = \"Class\", y = 'Amount', hue = 'Class', data = df, palette = 'PRGn', showfliers = False)\nplt.show()","b13868a7":"tmp = df[['Amount','Class']].copy()\nclass_0 = tmp.loc[tmp['Class'] == 0]['Amount']\nclass_1 = tmp.loc[tmp['Class'] == 1]['Amount']\nclass_0.describe()","357ec41d":"class_1.describe()","953fd440":"fraud =df.loc[df['Class'] == 1]\ntrace = go.Scatter(x = fraud['Time'], y = fraud['Amount'],\n                  name = 'Amount',\n                  marker = dict(color = 'rgb(238,23,11)',\n                               line = dict(color = 'red', width = 1),\n                               opacity = 0.5,\n                               ),\n                   text = fraud['Amount'],\n                   mode = 'markers'\n                  )\n\ndata = [trace]\nlayout = dict(title = 'Amount of Fraud Transactions',\n             xaxis = dict(title = 'Time[s]', showticklabels = True),\n             yaxis =  dict(title = 'Amount'),\n              hovermode = 'closest')\n\nfig = dict(data = data, layout = layout)\niplot(fig, filename = 'fraud_amount')\n                   ","139b6647":"plt.figure(figsize = (14,14))\nplt.title('Corelation Plot')\ncorr = df.corr()\nsns.heatmap(corr, xticklabels = corr.columns, yticklabels = corr.columns, linewidths = .1, cmap = 'Reds')\nplt.show()","a17a4767":"s = sns.lmplot(x = 'V20', y = 'Amount', data = df, hue = 'Class', fit_reg = True, scatter_kws = {'s':2})\ns = sns.lmplot(x = 'V7', y = 'Amount', data = df, hue = 'Class', fit_reg = True, scatter_kws = {'s':2})\nplt.show()","1cb064ee":"s = sns.lmplot(x = 'V2', y = 'Amount', data = df, hue = 'Class', fit_reg = True, scatter_kws = {'s':2})\ns = sns.lmplot(x = 'V5', y = 'Amount', data = df, hue = 'Class', fit_reg = True, scatter_kws = {'s':2})\nplt.show()","05df9a0d":"df.columns","d5bf06d1":"target = 'Class'\npredictors = ['Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10',\n       'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20',\n       'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount',\n       'Class']","9798a2a5":"train_df ,test_df = train_test_split(df,  shuffle = True)\n#test_size = TEST_SIZE, random_state = RANDOM_STATE,\ntrain_df ,valid_df = train_test_split(train_df, shuffle = True)\n#, test_size = VALID_SIZE, random_state = RANDOM_STATE,","df7cac70":"clf = RandomForestClassifier(n_estimators=100)\n#n_jobs= NO_JOBS, criterion= RFC_METRIC, n_estimators=NUM_ESTIMATORS, verbose=False","d674b44a":"clf.fit(train_df[predictors], train_df[target].values)","1f77a1a4":"preds = clf.predict(valid_df[predictors])","b8e41f13":"tmp = pd.DataFrame({'Feature': predictors , 'Feature Importance' : clf.feature_importances_})\ntmp = tmp.sort_values(by = 'Feature Importance')\nplt.figure(figsize = (7,4))\nplt.title('Feature Importance')\ns = sns.barplot(x = 'Feature', y= 'Feature Importance', data = tmp)\ns.set_xticklabels(s.get_xticklabels(), rotation =90)\nplt.show()","de0e4695":"cm = pd.crosstab(valid_df[target].values, preds , rownames = ['Actual'], colnames = ['Predicted'])\nfig , (ax1) = plt.subplots(ncols=1, figsize = (5,5))\nsns.heatmap(cm, \n            xticklabels = ['Not Fraud', 'Fraud'],\n            yticklabels = ['Not Fraud', 'Fraud'],\n           annot = True,\n           ax = ax1\n           , linewidths = .2, linecolor = \"Blue\", cmap = \"Blues\")\nplt.show()","de4fcb76":"roc_auc_score(valid_df[target].values, preds)","9c3d3b12":"No missing values in the dataset, hence the dataset is clean","b5941b38":"Splitting the data in train , test and validation sets","939547a2":"Predictive Models","1fb7d09a":"Feature Co-relation","51ae583f":"Plotting the direct corelations : i.e (V20 and amount) and (V7 and amount)","7e78c7e6":"Feature Importance Visualization","3660c3a1":"Defining predictors and target values. In our case there is no categorical value","e4d18d07":"Checking Missing data from the dataset if any","b2cef1e6":"Checking for unbalanced Data","e4d3d8a3":"Transaction Amount","7172a407":"Plotting Fraud Transactions against Time in seconds","e3c14d1e":"Confusion Matrix","6ed74d2d":"Building Random forest Classification Model\n\nUsinf GINI validation criteria","ef792d38":"Checking Data","9f97469d":"Fraud Data is 492 and clean data is 284315"}}