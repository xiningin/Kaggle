{"cell_type":{"6cd3d430":"code","0f44660a":"code","b6b2e872":"code","a5a0680e":"code","a5769d76":"code","06a93e3f":"code","e3ac953a":"code","a94349eb":"code","a3ff7731":"code","2d860095":"code","fb5b1ada":"code","25116ecf":"code","11de2658":"code","50ae00a1":"code","46182ead":"code","214eeb62":"code","a55e26b3":"code","ef7aff2c":"code","ce9ef630":"code","d629f729":"code","81d0ad15":"code","8092efbd":"markdown","5e25f44b":"markdown","7f6b0a3c":"markdown","46256959":"markdown","204355e3":"markdown"},"source":{"6cd3d430":"import cv2\nimport numpy as np\nimport csv\nimport pandas as pd\nimport matplotlib as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\nimport chardet\nfrom skimage.feature import local_binary_pattern\nimport copy\ndemoindex = 1","0f44660a":"info = pd.read_csv(\"\/kaggle\/input\/ultrasound-nerve-segmentation\/train_masks.csv\") \nimage_path = \"\/kaggle\/input\/ultrasound-nerve-segmentation\/train\/{}_{}.tif\"\nmask_path = \"\/kaggle\/input\/ultrasound-nerve-segmentation\/train\/{}_{}_mask.tif\"\nrows = 420\ncols = 580\nwindow_height = 120\nwindow_width = 140\nstep_size = [window_height, window_width]\nlabel = []\nfeatures = []\nnums = 120\nli = []\ni = 0\nwhile i < nums:  #note the index of images that have nerve\n    mask = cv2.imread(mask_path.format(info['subject'][i], info['img'][i]), 2)\n    if (np.sum(mask) > 0):\n        li.append(i)\n    i = i + 1    \nimgs = np.zeros((nums, rows, cols))\nmasks = np.zeros((nums, rows, cols))\ncontours = np.zeros((nums, rows, cols))\nimgwithoutline = np.zeros((nums, rows, cols))\ncor = np.zeros((nums, 2))\npospatch = np.zeros((nums, window_height, window_width))\nposwithoutline = np.zeros((nums, window_height, window_width))\n","b6b2e872":"for n in range(0,nums):\n    img = cv2.imread(image_path.format(info['subject'][n], info['img'][n]), 2)\n    mask = cv2.imread(mask_path.format(info['subject'][n], info['img'][n]), 2)\n    imgm=cv2.medianBlur(img,5)\n    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\n    equ = clahe.apply(imgm)\n    imgs[n,:,:] = equ\n    masks[n,:,:] = mask.astype(np.bool)\n    imgwithoutline[n,:,:] = copy.deepcopy(equ)\n    mask_outline = cv2.blur(mask, (3,3))\n    mask_outline = mask_outline * ((mask_outline < 255) & (mask_outline > 0))\n    contours[n,:,:] = mask_outline > 0\n    temp = np.where(mask.astype(np.bool))\n#     if temp[0].size != 0:         # center of the nerve\n#         xs = temp[0]\n#         ys = temp[1]\n#         x = int((min(xs) + max(xs)) \/ 2)\n#         y = int((min(ys) + max(ys)) \/ 2)\n#         cor[n,0] = x\n#         cor[n,1] = y\n#         pospatch[n,:,:] = img[x - int(window_height \/ 2) : x + int(window_height \/ 2),y - int(window_width \/ 2):y + int(window_width \/ 2)]\n#         temp = copy.deepcopy(pospatch[n,:,:])\n#         contour = contours[n,x - int(window_height \/ 2) : x + int(window_height \/ 2),y - int(window_width \/ 2):y + int(window_width \/ 2)]\n#         temp[contour>0] = 255\n#         poswithoutline[n] = temp\n#         imgwithoutline[n][contours[n] > 0]=255\nimgwithmask = imgs * masks","a5a0680e":"neg = []\nallpatch = []\npatcheswithoutline = []\nlabels = []\nwindow_height = 70\nwindow_width = 58\nstep_size = [window_height, window_width]\nfor n in range(0, nums):\n    curneg = []\n    curpatch = []\n    curoutline = []\n    img = imgs[n]\n    mask = masks[n]\n    withline = imgwithoutline[n]\n    for i in range(0, rows - window_height + 1, step_size[0]):\n        for j in range(0, cols - window_width + 1, step_size[1]):\n            temp = img[i:i+window_height, j: j + window_width]\n            m = mask[i:i+window_height, j:j+window_width]\n            curpatch.append(temp)\n            if (np.sum(m) == 0):    \n                curneg.append(temp)\n                labels.append(0)\n            else:\n                labels.append(1)\n            temp = withline[i:i + window_height, j:j + window_width]\n            curoutline.append(temp)\n    curneg = np.stack(curneg)\n    curpatch = np.stack(curpatch)\n    curoutline = np.stack(curoutline)\n    neg.append(curneg)\n    allpatch.append(curpatch)\n    patcheswithoutline.append(curoutline)\nneg = np.array(neg)\nallpatch = np.array(allpatch)\nlabels = np.array(labels, dtype = np.bool)\npatcheswithoutline = np.array(patcheswithoutline)","a5769d76":"f, axarr = plt.subplots(6,10, figsize = (10 * 4, 6 * 4))\nplt.subplots_adjust(wspace= 0.01, hspace=0.01)\npatches = patcheswithoutline[2]\nfor i in range(0, 60):\n    row = int(i \/ 10)\n    col = int(i % 10)\n    axarr[row][col].imshow(patches[i],cmap = 'gray')\n    axarr[row][col].axis('off')\n    ","06a93e3f":"f,axarr=plt.subplots(1,3,figsize = (18, 4))\naxarr[0].imshow(imgs[li[demoindex]],cmap = 'gray')\naxarr[0].set_title(\"image\")\naxarr[1].imshow(imgwithoutline[li[demoindex]],cmap = 'gray')\naxarr[1].set_title(\"image withmask outline\")\naxarr[2].imshow(masks[li[demoindex]],cmap = 'gray')\naxarr[2].set_title(\"mask\")\nplt.show()\n\n# f,axarr=plt.subplots(1,3,figsize = (18, 4))\n# axarr[0].imshow(pos[li[demoindex]],cmap = 'gray')\n# axarr[0].set_title(\"centered\")\n# axarr[1].imshow(poswithoutline[li[demoindex]],cmap = 'gray')\n# axarr[1].set_title(\"centered with contour\")\n# axarr[2].imshow(contours[demoindex,int(cor[li[demoindex],0] - window_height \/ 2) : int(cor[li[demoindex],0] + window_height \/ 2),int(cor[li[demoindex],1] - window_width \/ 2):int(cor[li[demoindex],1] + window_width \/ 2)],cmap = 'gray')\n# axarr[2].set_title(\"contour\")\n# plt.show()","e3ac953a":"l = 0\nfor i in range(0, nums):\n    l = l + neg[i].shape[0]\nnegpatch = np.zeros((l, window_height, window_width))\ncur = 0\nfor i in range(0, neg.shape[0]):\n    curneg = neg[i]\n    for j in range(0, curneg.shape[0]):\n        negpatch[cur] = curneg[j,:,:]\n        cur = cur + 1","a94349eb":"allpatch.shape\nal = allpatch.reshape((60*nums,70,58))","a3ff7731":"from scipy.stats import kurtosis,skew\nfeatures=[]\nfor i in range(0, al.shape[0]):\n    vector = np.zeros(6)\n    cur = al[i].flatten()\n    m0 = np.mean(cur)\n    m1 = np.mean(cur - m0)\n    m2 = np.std(cur)\n    m3 = np.sum(((cur-m0)**3)\/(m2**3))\/cur.size\n    m4 = np.sum((cur-m0)**4\/(m2**4))\/cur.size\n    m5 = m2 \/ m0\n    vector[0] = m0\n    vector[1] = m1\n    vector[2] = m2\n    vector[3] = m3\n    vector[4] = m4\n    vector[5] = m5\n    features.append(vector)\nfeatures = np.stack(features)","2d860095":"scores = np.zeros(features.shape[1])\nfor i in range(features.shape[1]):\n    f = features[:, i]\n    fa = f[labels == 1]\n    fb = f[labels == 0]\n    mi = np.mean(f)\n    mia = np.mean(fa)\n    mib = np.mean(fb)\n    na = fa.shape[0]\n    nb = fb.shape[0]\n    va = np.var(fa)\n    vb = np.var(fb)\n    scores[i] = (na * np.square((mia - mi))+nb * np.square((mib-mi)))\/(na*va+nb*vb)\nindexes = np.argsort(scores) ","fb5b1ada":"scores","25116ecf":"from sklearn import svm\nimport joblib\nfilename = 'finalized_model.sav'\nclf = svm.SVC(kernel=\"linear\", gamma=\"scale\", C=5.0)\nclf.fit(features, labels)\njoblib.dump(clf, filename)","11de2658":"posf = features[labels == True]\nnegf = features[labels == False]\nf, axarr = plt.subplots(6, 1, figsize = (4*2, 6*4))\naxarr[0].hist(posf[:, 0], color = 'r', bins = 20, density = True)\naxarr[0].hist(negf[:, 0], color = 'b', bins = 20, density = True,alpha = 0.5)\naxarr[0].set_title('histogram of m0')\n\naxarr[1].hist(posf[:, 1], color = 'r',bins = 20, density = True)\naxarr[1].hist(negf[:, 1], color = 'b',bins = 20, density = True,alpha = 0.5)\naxarr[1].set_title('histogram of m1')\n\naxarr[2].hist(posf[:, 2], color = 'r', bins = 20, density = True)\naxarr[2].hist(negf[:, 2], color = 'b', bins = 20, density = True,alpha = 0.5)\naxarr[2].set_title('histogram of m2')\n\naxarr[3].hist(posf[:, 3], color = 'r', bins = 20, density = True)\naxarr[3].hist(negf[:, 3], color = 'b', bins = 20, density = True,alpha = 0.5)\naxarr[3].set_title('histogram of m3')\n\naxarr[4].hist(posf[:, 4], color = 'r', bins = 20, density = True)\naxarr[4].hist(negf[:, 4], color = 'b', bins = 20, density = True,alpha = 0.5)\naxarr[4].set_title('histogram of m4')\n\naxarr[5].hist(posf[:, 5], color = 'r', bins = 20, density = True)\naxarr[5].hist(negf[:, 5], color = 'b', bins = 20, density = True,alpha = 0.5)\naxarr[5].set_title('histogram of m5')\nplt.show()","50ae00a1":"testnums = 30\ntestpatches = []\ntestlabels = []\nfor n in range(nums, nums + testnums):\n    img = cv2.imread(image_path.format(info['subject'][n], info['img'][n]), 2)\n    mask = cv2.imread(mask_path.format(info['subject'][n], info['img'][n]), 2)\n    imgm=cv2.medianBlur(img,5)\n    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))\n    equ = clahe.apply(imgm)\n    for i in range(0, rows - window_height + 1, step_size[0]):\n        for j in range(0, cols - window_width + 1, step_size[1]):\n            temp = imgm[i:i+window_height, j: j + window_width]\n            m = mask[i:i+window_height, j:j+window_width]\n            if (np.sum(m) > 0):\n                testlabels.append(1)\n            else:\n                testlabels.append(0)\n            testpatches.append(temp)\ntestpatches = np.array(testpatches)\ntestlabels = np.array(testlabels, dtype = np.bool)\ntestfeatures = []\nfor i in range(0, testpatches.shape[0]):\n    vector = np.zeros(6)\n    cur = al[i].flatten()\n    m0 = np.mean(cur)\n    m1 = np.mean(cur - m0)\n    m2 = np.std(cur)\n    m3 = np.sum(((cur-m0)**3)\/(m2**3))\/cur.size\n    m4 = np.sum((cur-m0)**4\/(m2**4))\/cur.size\n    m5 = m2 \/ m0\n    vector[0] = m0\n    vector[1] = m1\n    vector[2] = m2\n    vector[3] = m3\n    vector[4] = m4\n    vector[5] = m5\n    testfeatures.append(vector)\ntestfeatures = np.stack(testfeatures)","46182ead":"from sklearn.metrics import confusion_matrix\noutput = clf.predict(testfeatures)\nconfusion = confusion_matrix(testlabels, output)","214eeb62":"print(confusion)","a55e26b3":"scores = np.zeros(features.shape[1])\nfor i in range(features.shape[1]):\n    f = features[:, i]\n    fa = f[labels == 1]\n    fb = f[labels == 0]\n    mi = np.mean(f)\n    mia = np.mean(fa)\n    mib = np.mean(fb)\n    na = fa.shape[0]\n    nb = fb.shape[0]\n    va = np.var(fa)\n    vb = np.var(fb)\n    scores[i] = (na * np.square((mia - mi))+nb * np.square((mib-mi)))\/(na*va+nb*vb)\nindexes = np.argsort(scores) \nthe returned indexes are sorted by score in ascending order \nuse this index to select features","ef7aff2c":"# L5 = np.array((1,4,6,4,1))\n# L5 = L5.reshape(1,5)\n# E5 = np.array((-1,-2,0,2,1))\n# E5 = E5.reshape(1,5)\n# S5 = np.array((-1,0,2,0,-1))\n# S5 = S5.reshape(1,5)\n# R5 = np.array((1,-4,6,-4,1))\n# R5 = R5.reshape(1,5)\n# kernel1 = np.kron(E5.T, L5)\n# kernel2 = np.kron(R5.T, L5)\n# kernel3 = np.kron(S5.T,E5)\n# kernel4 = np.kron(S5.T,S5)\n# kernel5 = np.kron(R5.T,R5)\n# kernel6 = np.kron(L5.T,S5)\n# kernel7 = np.kron(E5.T,E5)\n# kernel8 = np.kron(E5.T,R5)\n# kernel9 = np.kron(S5.T, R5)","ce9ef630":"# n=0\n# img = cv2.imread(image_path.format(info['subject'][n], info['img'][n]), cv2.CV_8U)\n# mask = cv2.imread(mask_path.format(info['subject'][n], info['img'][n]), 2)\n# from scipy import signal\n# fig, axarr = plt.subplots(3, 3, figsize = (15,15))\n# map1 = signal.convolve2d(img, kernel1, mode = 'same')\n# axarr[0,0].imshow(map1,cmap = 'gray')\n# map2 = signal.convolve2d(img, kernel2, mode = 'same')\n# axarr[0,1].imshow(map2,cmap = 'gray')\n# map3 = signal.convolve2d(img, kernel3, mode = 'same')\n# axarr[0,2].imshow(map3,cmap = 'gray')\n# map4 = signal.convolve2d(img, kernel4, mode = 'same')\n# axarr[1,0].imshow(map4,cmap = 'gray')\n# map5 = signal.convolve2d(img, kernel5, mode = 'same')\n# axarr[1,1].imshow(map5,cmap = 'gray')\n# map6 = signal.convolve2d(img, kernel6, mode = 'same')\n# axarr[1,2].imshow(map6,cmap = 'gray')\n# map7 = signal.convolve2d(img, kernel7, mode = 'same')\n# axarr[2,0].imshow(map7,cmap = 'gray')\n# map8 = signal.convolve2d(img, kernel8, mode = 'same')\n# axarr[2,1].imshow(map8,cmap = 'gray')\n# map9 = signal.convolve2d(img, kernel9, mode = 'same')\n# axarr[2,2].imshow(map9,cmap = 'gray')","d629f729":"# #test \n# #This model doesn't work. At least for now...\n# k= 49\n# testimg = cv2.imread(image_path.format(info['subject'][k], info['img'][k]), cv2.CV_8U)\n# testmask = cv2.imread(mask_path.format(info['subject'][k], info['img'][k]), 2)\n# testmask = testmask \/ 255\n# testimgm=cv2.medianBlur(testimg,3)\n# testequ = cv2.equalizeHist(testimgm)\n# testlbp1=local_binary_pattern(testequ,8,1,'ror')\n# testlbp2=local_binary_pattern(testequ,8,1,'uniform')\n# testlabel = []\n# testfeatures = []\n# for i in range(0, rows - window_height + 1, step_size[0]):\n#     for j in range(0, cols - window_width + 1, step_size[1]):\n#         feature1 = testlbp1[i:i+window_height, j: j + window_width]\n#         feature2 = testlbp2[i:i+window_height, j: j + window_width]\n#         feature3 = testimg[i:i+window_height, j: j + window_width]\n#         h1 = np.histogram(feature1,bins = range(0,257))\n#         h2 = np.histogram(feature2,bins = range(0,257))\n#         h3 = np.histogram(feature3,bins = range(0,257))\n#         f = np.array((h1[0], h2[0],h3[0]))\n#         maskpart = testmask[i:i+window_height, j: j + window_width]\n#         testfeatures.append(f.flatten())\n#         if (np.sum(maskpart) > 0):\n#             testlabel.append(1)\n#         else:\n#             testlabel.append(0)\n# testlabel = np.array(testlabel)\n# testfeatures = np.array(testfeatures)\n# testlab= clf.predict_proba(testfeatures)\n# img = np.zeros((rows, cols),np.uint8)\n# positive = testlab[:,0]\n# for i in range(0, rows - window_height + 1, step_size[0]):\n#     for j in range(0, cols - window_width + 1, step_size[1]):\n#         a = int(i \/ step_size[0])\n#         b = int(j \/ step_size[1])\n#         start = (j,i)\n#         end = (j+ window_width,i+window_height)\n#         if (positive[a * int((cols - window_width + 1)\/step_size[1]+1) + b] > 0.9):\n#             img = cv2.rectangle(img,start,end,255,-1)\n# plt.imshow(img, cmap = 'gray')\n# img = img \/ 255\n","81d0ad15":"# brg = cm.get_cmap('brg', 256)\n# newcolors = brg(np.linspace(0, 1, 256))\n# black = np.array([0, 0, 0, 1])\n# green = np.array([0, 1, 0, 1])\n# blue = np.array([0, 0, 1, 1])\n# red = np.array([1, 0, 0, 1])\n# newcolors[0:62, :] = black\n# newcolors[62:126, :] = red\n# newcolors[190:, :] = green\n# newcolors[126:190,:] = blue\n# newcmp = ListedColormap(newcolors)\n# c=(np.array(img)*np.array(testmask))*1\n# anb=np.logical_xor(img,c)*3\n# bna=np.logical_xor(testmask,c)*2\n# f=c+anb+bna\n# dice = np.sum(img[testmask==1])*2.0 \/ (np.sum(img) + np.sum(testmask))\n# plt.imshow(f,cmap = newcmp)\n# print(dice)","8092efbd":"## Throw the features and labels to svm, learn the possible location of nerve....","5e25f44b":"## Form the training set\nconcatenate positive and negative together","7f6b0a3c":"## Feature Selection(I assume each sliding window's feature is given in a one-dimension vector)","46256959":"## read in images\n* imgs: images\n* cor: coordinate of the center of nerves\n* contours: contours of nerves\n* imgwithoutline: images outlined with nerve contours\n* masks: ground truths\n* pospatches: patches centered at nerve\n* poswithoutline: centered nerve patches with nerve outline\n\nFor now, I'm not sure if we should use this centered nerve patch, possibly not.","204355e3":"## Form test set"}}