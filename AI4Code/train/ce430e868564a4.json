{"cell_type":{"3e47f48e":"code","17ed4021":"code","b5fff0b3":"code","d29cd770":"code","1e87c4c9":"code","b0c89d08":"code","511ff164":"code","2ceb975f":"code","0e79f0c3":"code","e78bec10":"code","356b6e2c":"code","09187046":"code","e31e4fb9":"code","d2b217ff":"code","c885f347":"code","f3d59f2e":"code","23ed858c":"code","1f39bf60":"code","6b56c840":"code","91bb1de4":"code","dbb550bb":"code","11913f17":"code","957b0265":"code","076e6e57":"code","9c6daeec":"code","3f171c1a":"code","e6b751aa":"code","95a22aa5":"code","f9c4c4cc":"code","cba0b45e":"code","7619763c":"code","993ecdc4":"code","00a72205":"code","a4d5a736":"code","efa64743":"code","b50c90b9":"code","51e60482":"code","4f64384c":"code","87eb0910":"code","a3c40e67":"code","d501b336":"code","f431a0ec":"code","521d67f3":"code","109952b9":"code","e9e7f9bf":"code","17c63202":"code","7cbfb340":"code","f53e2e5b":"markdown"},"source":{"3e47f48e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17ed4021":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nimport matplotlib\n\n#matplotlib.rcparams['figure.figsize']=(20,10)\n\ndf1=pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf1.head()","b5fff0b3":"df1.shape","d29cd770":"df1.info()","1e87c4c9":"df1.groupby('area_type')['area_type'].agg('count')\n","b0c89d08":"df2=df1.drop(['area_type','society','balcony','availability'],axis='columns')\ndf2.head()","511ff164":"df2.isnull().sum()","2ceb975f":"df3=df2.dropna()\ndf3.isnull().sum()\n","0e79f0c3":"df3['size'].unique()","e78bec10":"df3['bhk']=df3['size'].apply(lambda x: int(x.split(' ')[0]))","356b6e2c":"df3.head()","09187046":"df3[df3.bhk>20]","e31e4fb9":"df3.total_sqft.unique()","d2b217ff":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","c885f347":"df3[~df3['total_sqft'].apply(is_float)].head(15)","f3d59f2e":"def convert_sqft_to_num(x):\n    tokens=x.split('-')\n    if len(tokens)==2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(x)\n    except:\n        return None","23ed858c":"convert_sqft_to_num('1000Sq. Meter')","1f39bf60":"df4=df3.copy()\ndf4['total_sqft']=df4['total_sqft'].apply(convert_sqft_to_num)\ndf4.head()","6b56c840":"df5=df4.copy()\ndf5['price_per_sqft']=df5['price']*100000\/df5['total_sqft']\ndf5.head()","91bb1de4":"df5.loaction=df5.location.apply(lambda x : x.strip())\nloc_stats=df5.groupby('location')['location'].agg('count').sort_values(ascending=False)\nloc_stats","dbb550bb":"len(loc_stats[loc_stats<=10])","11913f17":"loc_stats_less_than_10=loc_stats[loc_stats<=10]\nlen(loc_stats_less_than_10)\n","957b0265":"df5.location=df5.location.apply(lambda x: 'other' if x in loc_stats_less_than_10 else x)\n","076e6e57":"len(df5.location.unique())","9c6daeec":"df5[df5.total_sqft\/df5.bhk<300].head()","3f171c1a":"df5.shape","e6b751aa":"df6=df5[~(df5.total_sqft\/df5.bhk<300)]\ndf6.shape","95a22aa5":"df6.price_per_sqft.describe()","f9c4c4cc":"def remove_pps_outliers(df):\n    df_out=pd.DataFrame()\n    for key,subdf in df.groupby('location'):\n        m=np.mean(subdf.price_per_sqft)\n        st=np.std(subdf.price_per_sqft)\n        reduced_df=subdf[(subdf.price_per_sqft>(m-st))&(subdf.price_per_sqft<=(m+st))]\n        df_out=pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf7=remove_pps_outliers(df6)\ndf7.shape","cba0b45e":"def plot_scatter_chart (df,location):\n    bhk2=df[(df.location==location) & (df.bhk==2)]\n    bhk3=df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize']=(15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK',s=50,alpha=0.5)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+',color='green',label='3 BHK',s=50)\n    plt.xlabel('Total Square Feet Area')\n    plt.ylabel('Price Per Square Feet')\n    plt.title(location)\n    plt.legend()\n\nplot_scatter_chart(df7,'Hebbal')","7619763c":"def remove_bhk_outliers(df):\n    exclude_indices=np.array([])\n    for location,location_df in df.groupby('location'):\n        bhk_stats={}\n        for bhk,bhk_df in location_df.groupby('bhk'):\n            bhk_stats[bhk]={\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk,bhk_df in location_df.groupby('bhk'):\n            stats=bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices=np.append(exclude_indices,bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\ndf8=remove_bhk_outliers(df7)\ndf8.shape","993ecdc4":"def plot_scatter_chart (df,location):\n    bhk2=df[(df.location==location) & (df.bhk==2)]\n    bhk3=df[(df.location==location) & (df.bhk==3)]\n    matplotlib.rcParams['figure.figsize']=(15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK',s=50,alpha=0.5)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker='+',color='green',label='3 BHK',s=50)\n    plt.xlabel('Total Square Feet Area')\n    plt.ylabel('Price Per Square Feet')\n    plt.title(location)\n    plt.legend()\n\nplot_scatter_chart(df8,'Hebbal')","00a72205":"matplotlib.rcParams['figure.figsize']=(20,10)\nplt.hist(df8.price_per_sqft,rwidth=0.8)\nplt.xlabel('Price per square feet')\nplt.ylabel('Count')","a4d5a736":"df9=df8[df8.bath<df8.bhk+2]\ndf9.shape","efa64743":"df10=df9.drop(['size','price_per_sqft'],axis='columns')\ndf10.head()","b50c90b9":"dummies=pd.get_dummies(df10.location)","51e60482":"df11=pd.concat([df10,dummies.drop('other',axis='columns')],axis='columns')\n","4f64384c":"df12=df11.drop('location',axis='columns')\ndf12.head()","87eb0910":"X=df12.drop('price',axis='columns')\n\n\ny=df12.price","a3c40e67":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test =train_test_split(X,y,test_size=0.2,random_state=10)\n","d501b336":"from sklearn.linear_model import LinearRegression\n\nlr=LinearRegression()\nlr.fit(X_train,y_train)\nlr.score(X_test,y_test)","f431a0ec":"from sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv=ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)\n\ncross_val_score(LinearRegression(),X,y,cv=cv)","521d67f3":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_best_mode(X,y):\n    \n    algos={\n        'linear':{\n            'model':LinearRegression(),\n            'params': {               \n                'normalize': [True,False]\n                }\n        },\n        'lasoo':{\n            'model': Lasso(),\n            'params': {\n                'alpha':[1,2],\n                'selection':['random','cyclic']\n                }\n        },\n        'decision_tree':{\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion':['mse','friedman_mse'],\n                'splitter':['best','random']\n                }\n            } \n        }\n    \n    scores = []\n    cv=ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)\n    for algo_name,config in algos.items():\n        \n        gs=GridSearchCV(config['model'],config['params'],cv=cv,return_train_score=False)\n        gs.fit(X,y)\n        scores.append({    \n            'model':algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\nfind_best_mode(X,y)","109952b9":"X_train.shape,y_test.shape","e9e7f9bf":"X.columns","17c63202":"def predict_price(location,sqft,bath,bhk):\n    \n    loc_index=np.where(X.columns==location)[0][0]\n    x=np.zeros(len(X.columns))\n    x[0]=sqft\n    x[1]=bath\n    x[2]=bhk\n    if loc_index>=0:\n        x[loc_index]=1\n    return lr.predict([x])[0]","7cbfb340":"predict_price('Indira Nagar',1000,4,5)","f53e2e5b":"****Code Basics Youtube Channel"}}