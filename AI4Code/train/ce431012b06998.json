{"cell_type":{"da7fe6e3":"code","5a8327ce":"code","6073fb70":"code","9a3f29c8":"code","8e42a6ee":"code","e5f257ce":"code","d8ca6ac2":"markdown","b9d36e93":"markdown","55869551":"markdown","f3bca1e2":"markdown"},"source":{"da7fe6e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n\n\n# import plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly import tools # for sub figures\n\n# these two lines are what allow your code to show up in a notebook!\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# print(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5a8327ce":"df_ny_bus_delay = pd.read_csv(\"..\/input\/bus-breakdown-and-delays.csv\", index_col=0)\ndf_ny_bus_delay.head()","6073fb70":"df_ny_bus_delay['Occurred_On'] = pd.to_datetime(df_ny_bus_delay['Occurred_On'])\n# breakdown_dates = df_ny_bus_delay.loc[(df_ny_bus_delay['Occurred_On'] < datetime.now()), ['Occurred_On','Busbreakdown_ID']].groupby('Occurred_On').count().dropna()\nbreakdown_dates = df_ny_bus_delay.loc[(df_ny_bus_delay['Occurred_On'] < datetime.now()), ['Occurred_On','Busbreakdown_ID']].groupby(['Occurred_On']).count().dropna()\nbreakdown_dates.rename(columns={'Busbreakdown_ID' : 'n'}, inplace=True)\nbreakdown_dates.head()\n","9a3f29c8":"data_dates = [go.Scatter(x=breakdown_dates.index, y=breakdown_dates.n)]\n\n# specify the layout of our figure\nlayout_dates = dict(title = \"Number of bus breakdowns\",\n              xaxis= dict(title= 'Date',ticklen= 5,zeroline= False))\n\n# create and show our figure\nfig = dict(data = data_dates, layout = layout_dates)\niplot(fig)","8e42a6ee":"delay_by_borough = df_ny_bus_delay.loc[(df_ny_bus_delay['Occurred_On'] < datetime.now()), ['Boro','Busbreakdown_ID']].groupby(['Boro']).count().dropna()\ndelay_by_borough.rename(columns={'Busbreakdown_ID' : 'n'}, inplace=True)","e5f257ce":"data = [go.Bar(\n            x=delay_by_borough.index,\n            y=delay_by_borough.n\n    )]\n\nlayout = dict(title = \"Bus delays by borough\",\n              xaxis= dict(title= 'Borough',ticklen= 5,zeroline= False))\niplot(data, layout)","d8ca6ac2":"## Delays and breakdowns overview","b9d36e93":"## Data overview","55869551":"## Content\nThe Bus Breakdown and Delay system collects information from school bus vendors operating out in the field in real time. Bus staff that encounter delays during the route are instructed to radio the dispatcher at the bus vendor\u2019s central office. The bus vendor staff are then instructed to log into the Bus Breakdown and Delay system to record the event and notify OPT. OPT customer service agents use this system to inform parents who call with questions regarding bus service. The Bus Breakdown and Delay system is publicly accessible and contains real time updates. All information in the system is entered by school bus vendor staff.","f3bca1e2":"## Delays by borough"}}