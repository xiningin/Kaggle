{"cell_type":{"0168bf6f":"code","31dd06ec":"code","16198f3e":"code","d99e2076":"code","89168d25":"code","7228e9b6":"code","09ed9dad":"code","afe7bb60":"code","a58b99bf":"code","82dd8fde":"code","f074d2b4":"code","2a4cdf4f":"code","e85e8e87":"code","287384f7":"code","d06321e8":"code","0c1fbdee":"code","1aebf951":"code","e594182e":"code","17e75ead":"markdown","94223b48":"markdown","f7454e01":"markdown","1227469a":"markdown","c000b335":"markdown","7c1128f6":"markdown","c033e2b1":"markdown","eb890f85":"markdown","7cb241f0":"markdown","c868c90c":"markdown","0d0914f9":"markdown","06b13420":"markdown","5c654b81":"markdown","6c8dcac0":"markdown"},"source":{"0168bf6f":"import numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nimport pandas as pd\nimport cv2\nimport os","31dd06ec":"train_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/train.csv')\ntest_df = pd.read_csv('..\/input\/aptos2019-blindness-detection\/test.csv')\ntrain_dir = '..\/input\/aptos2019-blindness-detection\/train_images'\ntest_dir = '..\/input\/aptos2019-blindness-detection\/test_images'","16198f3e":"train_df.head()","d99e2076":"test_df.head()","89168d25":"print('Num of training images: ', len(train_df))\nprint('Num of test images: ', len(test_df))","7228e9b6":"train_df.hist()\nplt.title('Training Data Class Distribution')\nplt.show()","09ed9dad":"_, counts = np.unique(train_df['diagnosis'].values, return_counts=True)\nnum_classes = len(counts)\n\nfor i in range(num_classes):\n    print(\"Label {}: {} or {:.2f}%\".format(i,counts[i],counts[i]\/len(train_df)*100))","afe7bb60":"# n, the number of images to display, must be even\ndef plotExamples(ids, n):\n  np.random.seed(0)\n  rand_ids = ids[np.random.choice(len(ids),n)]\n\n  fig = plt.figure(figsize=(15, 10))\n  for i in range(n):\n    fig.add_subplot(int(n\/2),2,i+1)\n    I = cv2.imread(os.path.join(train_dir, rand_ids[i]+\".png\"))\n    I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)\n    plt.imshow(I)\n    plt.xlabel(rand_ids[i] + \".png\")\n    plt.grid(None)","a58b99bf":"class0 = train_df.loc[train_df['diagnosis'] == 0, ['id_code']].values.flatten()\nplotExamples(class0, 4)","82dd8fde":"class1 = train_df.loc[train_df['diagnosis'] == 1, ['id_code']].values.flatten()\nplotExamples(class1, 4)","f074d2b4":"class2 = train_df.loc[train_df['diagnosis'] == 2, ['id_code']].values.flatten()\nplotExamples(class2, 4)","2a4cdf4f":"class3 = train_df.loc[train_df['diagnosis'] == 3, ['id_code']].values.flatten()\nplotExamples(class3, 4)","e85e8e87":"class4 = train_df.loc[train_df['diagnosis'] == 4, ['id_code']].values.flatten()\nplotExamples(class4, 4)","287384f7":"import albumentations as A","d06321e8":"def cropEye(img, radius):\n    mid_row = img[int(img.shape[0]\/2),:,:].sum(1)\n    r = (mid_row > mid_row.mean()\/10).sum()\/2\n    s = radius*(1\/r)\n    I_r = cv2.resize(img,(0,0),fx=s,fy=s)\n    center_row = int(I_r.shape[0]\/2)\n    center_col = int(I_r.shape[1]\/2)\n    start_x = max(center_row - radius, 0)\n    end_x = center_row + radius\n    start_y = max(center_col - radius, 0)\n    end_y = center_col + radius\n    I_cropped = I_r[start_x:end_x, start_y:end_y, :]\n    if I_cropped.shape[0] != radius*2 or I_cropped.shape[1] != radius*2:\n        I_cropped = cv2.resize(I_cropped, (radius*2,radius*2))\n    return I_cropped","0c1fbdee":"np.random.seed(0)\nids = train_df['id_code'].values.flatten()\nrand_ids = ids[np.random.choice(len(ids),6)]\nrand_ids","1aebf951":"fig = plt.figure(figsize=(15, 10))\nn = len(rand_ids)\nfor i in range(n):\n    fig.add_subplot(int(n\/2),2,i+1)\n    I = cv2.imread(os.path.join(train_dir, rand_ids[i]+\".png\"))\n    I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)\n    plt.imshow(I)\n    plt.xlabel(rand_ids[i] + \".png\")\n    plt.grid(None)","e594182e":"fig = plt.figure(figsize=(15, 10))\nn = len(rand_ids)\nfor i in range(n):\n    I = cv2.imread(os.path.join(train_dir, rand_ids[i]+\".png\"))\n    I = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)\n    I = I.astype('float32')\n    I = cropEye(I, 128)\n    I = I\/255\n\n    fig.add_subplot(int(n\/2),2,i+1)\n    plt.imshow(I)\n    plt.xlabel(rand_ids[i] + \".png\")\n    plt.grid(None)","17e75ead":"## Example Images\n\n\"DR leads to gradual changes in vasculature structure and resulting abnormalities such as microaneurysms, hemorrhages, hard exudates, and cotton wool spots. Along with the changes, there may be a presence of venous beading, retinal neovascularization which can be utilized to classify DR retinopathy in one of the two phases known as non-proliferative diabetic retinopathy (NPDR) and proliferative diabetic retinopathy (PDR)\" - DeepDRiD Challenge","94223b48":"Class 0 corresponds to no apparent DR: there should be no signs of abnormalities.","f7454e01":"## Get Data","1227469a":"## Data Statistics","c000b335":"## Import Libraries","7c1128f6":"### Crop Function","c033e2b1":"Clearly there is a large class imbalance in the training dataset. The labels are not provided for the test dataset so there is no information on their class distribution.","eb890f85":"## Preprocessing","7cb241f0":"Class 2 corresponds to moderate NPDR: more than just microaneurysms but less than severe NPDR.","c868c90c":"Class 3 corresponds to severe NPDR:\n\nModerate NPDR and any of the following:\n\n\u2022 > 20 intraretinal hemorrhages\n\n\u2022 Venous beading (localized increase in vein diameter)\n\n\u2022 Intraretinal microvascular abnormalities","0d0914f9":"Class 4 corresponds to PDR:\n\nSevere NPDR and one or both of the following:\n\n\u2022 Neovascularization\n\n\u2022 Vitreous\/preretinal hemorrhage","06b13420":"### Cropped Images","5c654b81":"### Original Images","6c8dcac0":"Class 1 corresponds to mild NPDR: only presence of microaneurysms."}}