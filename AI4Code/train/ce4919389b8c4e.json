{"cell_type":{"8bf7045b":"code","5dd9a9f5":"code","f388433a":"code","e15bfc56":"code","9e3d3e0c":"code","79fb4a9c":"code","e82e882d":"code","de83dfcd":"code","b02d868c":"code","3378e313":"code","602f1fad":"code","b5e98ad9":"code","70e20282":"code","74948e2d":"code","309c8259":"code","400a314f":"code","cd1c960a":"code","f7232c89":"code","48fd844c":"code","8498248f":"code","f8b0a5aa":"code","e139f85d":"markdown","05830394":"markdown","0f2f585e":"markdown","864c41dd":"markdown","971e1ed8":"markdown","759d599e":"markdown","92f9612b":"markdown","37879bb7":"markdown","83c50912":"markdown","8bbdf40a":"markdown","81139278":"markdown"},"source":{"8bf7045b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nfrom plotly.offline import init_notebook_mode, iplot, plot \nimport plotly.graph_objs as go \nimport plotly.express as px\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5dd9a9f5":"df = pd.read_csv('\/kaggle\/input\/medical-insurance-premium-prediction\/Medicalpremium.csv')\ndf.shape","f388433a":"df.describe().T","e15bfc56":"df.isna().sum()","9e3d3e0c":"def conditions(s):\n    if (s['Diabetes']!=0) or (s['BloodPressureProblems']!= 0) or (s['AnyTransplants']!=0) or (s['AnyChronicDiseases']!=0) or (s['KnownAllergies']!=0) or (s['HistoryOfCancerInFamily']!=0) or (s['NumberOfMajorSurgeries']>1) or (np.any(s['BMI']==list(range(19,25)))):\n        return 1\n    else:\n        return 0","79fb4a9c":"#Calculating BMI\ndf['BMI']=(df['Weight']\/df['Height']**2)*10000\n#Creating a new variable to see number of customers who are totally fit vs others\ndf['anymedicalcondition']= df.apply(conditions, axis=1)","e82e882d":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    x = df['PremiumPrice'],\n    y = df['BMI'],\n    mode = 'markers'\n))\nfig.update_layout(title='Premium Price (INR) Vs BMI')\nfig.update_xaxes(title='Premium Price (INR)')\nfig.update_yaxes(title= 'BMI')\nfig.show()","de83dfcd":"this_figure = make_subplots(rows=1, cols=2) \n\n\nfig1 = px.box(df, x=\"Diabetes\", y=\"Age\")\nfigure2_traces = []\nfor trace in range(len(fig1[\"data\"])):\n    figure2_traces.append(fig1[\"data\"][trace])\n\n\nfor traces in figure2_traces:\n    this_figure.append_trace(traces, row=1, col=2)\nthis_figure.add_trace(go.Histogram(x=df.loc[df['Diabetes']!=1,'Age'],name='Age Dist (without Diabetes)'),row=1,col=1)\nthis_figure.add_trace(go.Histogram(x=df.loc[df['Diabetes']==1,'Age'],name='Age Dist (with Diabetes)'),row=1,col=1)\n\nthis_figure.update_layout(title='Age Distribution of Diabetes and Non Diabetic customers')\nthis_figure.update_xaxes(title='Age (in years)',row=1,col=1)\nthis_figure.update_xaxes(title='Diabetic?',row=1,col=2)\nthis_figure.update_yaxes(title='Age',row=1,col=2)\nthis_figure.update_yaxes(title='Count',row=1,col=1)\n\nthis_figure.show()","b02d868c":"def CorrMtx(df, dropDuplicates = True):\n\n    df = df.corr()\n\n    # Exclude duplicate correlations by masking uper right values\n    if dropDuplicates:    \n        mask = np.zeros_like(df, dtype=np.bool)\n        mask[np.triu_indices_from(mask)] = True\n\n    # Set background color \/ chart style\n    sns.set_style(style = 'white')\n\n    # Set up  matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n\n    # Add diverging colormap from red to blue\n    cmap = sns.diverging_palette(250, 10, as_cmap=True)\n\n    # Draw correlation plot with or without duplicates\n    if dropDuplicates:\n        sns.heatmap(df, mask=mask, cmap=cmap, annot=True,\n                square=True,\n                linewidth=.5, cbar_kws={\"shrink\": .5}, ax=ax)\n    else:\n        sns.heatmap(df, cmap=cmap, annot=True,\n                square=True,\n                linewidth=.5, cbar_kws={\"shrink\": .5}, ax=ax)","3378e313":"CorrMtx(df.corr())","602f1fad":"fig = px.scatter(df, x=\"Age\", y=\"PremiumPrice\", color=\"Age\" ,trendline=\"lowess\")\nfig.update_layout(title='Age Vs Premium Price')\nfig.show()","b5e98ad9":"fig = px.scatter(df, x=\"NumberOfMajorSurgeries\", y=\"PremiumPrice\" , color=\"NumberOfMajorSurgeries\" ,trendline=\"ols\")\nfig1 = px.box(df, x=\"NumberOfMajorSurgeries\", y=\"PremiumPrice\")\nfigure1_traces = []\nfigure2_traces = []\nfor trace in range(len(fig[\"data\"])):\n    figure1_traces.append(fig[\"data\"][trace])\nfor trace in range(len(fig1[\"data\"])):\n    figure2_traces.append(fig1[\"data\"][trace])\n\nthis_figure = make_subplots(rows=1, cols=2) \n\nfor traces in figure1_traces:\n    this_figure.append_trace(traces, row=1, col=1)\nfor traces in figure2_traces:\n    this_figure.append_trace(traces, row=1, col=2)\nthis_figure.update_layout(title='Number of Major Surgeries Vs Premium Price')\nthis_figure.update_xaxes(title='Number of Major Surgeries')\nthis_figure.update_yaxes(title='Premium Price (INR)')\nthis_figure.show()","70e20282":"fig = px.scatter(df, x=\"anymedicalcondition\", y=\"PremiumPrice\", color=\"Age\" ,trendline=\"ols\")\nfig.update_layout(title='Medical Conditions Vs Premium Price')\n\nfig = px.scatter(df, x=\"anymedicalcondition\", y=\"PremiumPrice\" , color=\"NumberOfMajorSurgeries\" ,trendline=\"ols\")\nfig1 = px.box(df, x=\"anymedicalcondition\", y=\"PremiumPrice\")\nfigure1_traces = []\nfigure2_traces = []\nfor trace in range(len(fig[\"data\"])):\n    figure1_traces.append(fig[\"data\"][trace])\nfor trace in range(len(fig1[\"data\"])):\n    figure2_traces.append(fig1[\"data\"][trace])\n\nthis_figure = make_subplots(rows=1, cols=2) \n\nfor traces in figure1_traces:\n    this_figure.append_trace(traces, row=1, col=1)\nfor traces in figure2_traces:\n    this_figure.append_trace(traces, row=1, col=2)\nthis_figure.update_layout(title='Medical Condition Vs Premium Price')\nthis_figure.update_xaxes(title='Medical Condition')\nthis_figure.update_yaxes(title='Premium Price (INR)')\nthis_figure.show()","74948e2d":"!pip install pycaret\ndf.drop('anymedicalcondition',axis = 1,inplace=True)\nfrom pycaret.regression import *","309c8259":"random_seed = 69\ndef data_sampling(dataset, frac: float, random_seed: int):\n    data_sampled_a = dataset.sample(frac=frac, random_state=random_seed)\n    data_sampled_b =  dataset.drop(data_sampled_a.index).reset_index(drop=True)\n    data_sampled_a.reset_index(drop=True, inplace=True)\n    return data_sampled_a, data_sampled_b   ","400a314f":"df_seen, df_unseen = data_sampling(df, 0.9, random_seed)","cd1c960a":"exp1 = setup(df_seen,\n             target = 'PremiumPrice',feature_selection = True,silent= True)","f7232c89":"models = ['svm','knn','dt','rf','et','ada','gbr','mlp','xgboost','lightgbm']\ncompare_models(fold = 10, round = 4, include = models) ","48fd844c":"top3 = compare_models(n_select = 3)\ntuned_top3 = [tune_model(i) for i in top3]\nstacker = stack_models(tuned_top3)\nbest_rmse = automl(optimize = 'RMSE')","8498248f":"evaluate_model(best_rmse)","f8b0a5aa":"pred_unseen = predict_model(best_rmse, data = df_unseen)\npred_unseen.head(10)","e139f85d":"# EDA","05830394":"**Basic Stats about the data:**","0f2f585e":"**Looking at Age distribution of Customer by Diabetes condition**","864c41dd":"Adding few other features that I can think of and can be derived using existing data. \n1. **Body Mass Index (BMI)**\n1. **Overall Customer's:** Customer's overall health status including BMI. Value 1 is assigned to customer's having any medical condition or if BMI is outside normal range and value 0 is assigned in rest of the cases.","971e1ed8":"**Few key insights that we can observe from above chart are:**\n1. Premium Price is highly influenced by Age of the customer, Correlation coefficient is **+0.85** shows very high positive relationship.\n1. Premium Price is also slightly influenced by Number of Surgeries customer has had in past, Correlation coefficient is **+0.43**.\n1. Our engineered feature anymedicalcondition also shows positive correlation of **+0.4** (which is obvious as we derived it from combination of other features)\n\n\n*On a side note: Premium Price shows very slight negative correlation for few variables which can be ignored but seems interesting to explore.*","759d599e":"Model Building","92f9612b":"Above histogram clearly shows our dataset consists of high number of customers having diabetes with higher age.","37879bb7":"It's quite clear from the chart, we don\u2019t see any specific patter which either indicates positive or negative impact of BMI on Premium Price.","83c50912":"# Feature Engineering:","8bbdf40a":"**Checking if BMI has any impact on Premium Price:**","81139278":"**Objective:**\n1. Perform EDA\n1. Data Cleanup And Prepration\n1. Build Model\n"}}