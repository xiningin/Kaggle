{"cell_type":{"95a0699b":"code","8bd8e5a0":"code","0fa5c45c":"code","e436cf71":"code","125314f4":"code","af211031":"code","e960df42":"code","6687765a":"code","f749d150":"code","c1948e8c":"code","b581e371":"code","409835e7":"code","5ff521ba":"code","29f5a540":"code","87ad3aa4":"code","185279d6":"code","2702447b":"code","4e6da775":"code","e6ef6e8f":"code","f5ce4318":"code","3177ea3f":"code","af1a6fe1":"code","0016be76":"code","17108138":"code","0f48fb16":"code","bfdc6756":"code","bf667ffe":"code","d097eff2":"code","6796d1e3":"code","e237f0e2":"code","58d1f973":"code","f2d71cef":"code","f0fce0da":"code","eba43c62":"code","870e77e6":"code","622a5ce5":"code","eae15f89":"code","ac08e597":"code","5ff0ee37":"code","7425ec52":"code","af383472":"code","80df3f57":"code","3f7ba4b7":"code","66379ca9":"code","eee7da27":"code","c0e9d61f":"code","c8be0119":"code","4db626fb":"code","180b74c6":"markdown","607e8999":"markdown","c35f2e40":"markdown","26d14db5":"markdown","d9be2b83":"markdown","271f1a8f":"markdown","b8bd6416":"markdown","8443c22e":"markdown","3e5b2e80":"markdown","a270b330":"markdown","fcbd41bf":"markdown","e8ad478d":"markdown","9e609606":"markdown","b674a159":"markdown"},"source":{"95a0699b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8bd8e5a0":"pd.get_option(\"display.max_columns\")\ndf = pd.read_csv(\"\/kaggle\/input\/spotify-top-100\/top2018.csv\")\ndf.head()","0fa5c45c":"df.dtypes","e436cf71":"df.describe(include=\"all\")","125314f4":"df.columns","af211031":"art = df.groupby(\"artists\")[\"artists\"].count().sort_values(ascending=False)\nart.head()","e960df42":"## Converting it to a dataframe\nart = art.to_frame()","6687765a":"art.head()","f749d150":"artist=art.rename(columns={\"artists\":\"artists\",\"artists\":\"count\"})\nartist.head(10) # Viewing the top 10 artists","c1948e8c":"artist = artist.reset_index()","b581e371":"top10artist = artist.head(10)\ntop10artist","409835e7":"# importing matplotlib for plotting\nimport matplotlib.pyplot as plt","5ff521ba":"fig = plt.figure(figsize=(15,8))\nplt.bar(top10artist[\"artists\"],top10artist[\"count\"],color=\"purple\",width=0.3)\nplt.xlabel(\"Artists\")\nplt.ylabel(\"Number of Songs\")\nplt.title(\"Artist vs songs\")\nplt.show()","29f5a540":"top10artist.to_csv(\"Top 10 artist.csv\",index=None)","87ad3aa4":"import seaborn as sns\ncorr = df.corr()\nfig, ax = plt.subplots(figsize=(10,10)) \nsns.heatmap(corr,xticklabels=corr.columns.values,yticklabels=corr.columns.values,linewidths=.5, ax=ax)","185279d6":"# viewing the columns of the dataframe\ndf.columns","2702447b":"dan=df.groupby([\"artists\"])[\"danceability\"].max().sort_values(ascending=False)\ndan.head()","4e6da775":"##converting dan to a dataframe\ndan=dan.to_frame()\n# Resetting the index\ndan = dan.reset_index()\ndan","e6ef6e8f":"top10dan=dan.head(10)\ntop10dan","f5ce4318":"figure = plt.figure(figsize=(15,8))\nplots=sns.barplot(x=\"artists\",y=\"danceability\",data=top10dan)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xlabel(\"Artists\",size=15)\nplt.ylabel(\"Danceability\",size=15)\nplt.title(\"Danceability\",size=20)\nplt.show()","3177ea3f":"# Exporting it to CSV file\ntop10dan.to_csv(\"Top 10 danceability.csv\",index=False)","af1a6fe1":"ene = df.groupby([\"artists\"])[\"energy\"].max().sort_values(ascending=False)\nene","0016be76":"#converting it to a dataframe\n\nene = ene.to_frame()\n\n#reseting the index\n\nene = ene.reset_index()\n\nene","17108138":"# Viewing the top 10 artists\ntop10ene = ene.head(10)\ntop10ene","0f48fb16":"figure = plt.figure(figsize=(17,5))\nax = figure.add_subplot(111)\nplt.plot(top10ene[\"artists\"],top10ene[\"energy\"],color=\"red\")\nfor i,j in top10ene.energy.items():\n    ax.annotate(str(j), xy=(i, j))\nplt.xlabel(\"Artist\")\nplt.ylabel(\"Energy level\")\nplt.title(\"Energy level for Artist\",size=20)\nplt.show()","bfdc6756":"#Exporting it to a csv file\ntop10ene.to_csv(\"Top 10 energy.csv\",index=False)","bf667ffe":"df.columns","d097eff2":"kla=df.groupby([\"artists\"])[\"key\",\"speechiness\",\"acousticness\"].max().sort_values(by=[\"key\",\"speechiness\"],ascending=False)\ntop10kla = kla.head(10)","6796d1e3":"top10kla=top10kla.reset_index()","e237f0e2":"top10kla","58d1f973":"figure = plt.figure(figsize=(15,8))\nplots=sns.barplot(x=\"artists\",y=\"speechiness\",data=top10kla)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xlabel(\"Artists\",size=15)\nplt.ylabel(\"speechiness\",size=15)\nplt.title(\"speechiness for the artists with key value \\'11\\'\",size=20)\nplt.show()\n\nprint(\"\\n\\n\")\n\nfigure = plt.figure(figsize=(15,8))\nplots=sns.barplot(x=\"artists\",y=\"acousticness\",data=top10kla)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xlabel(\"Artists\",size=15)\nplt.ylabel(\"acousticness\",size=15)\nplt.title(\"acousticness for the artists with key value \\'11\\'\",size=20)\nplt.show()","f2d71cef":"mode = df['mode'].value_counts()\nmode","f0fce0da":"mode=mode.to_frame()\nmode=mode.reset_index()\nmode=mode.rename(columns={\"index\":\"mode\",\"mode\":\"count\"})","eba43c62":"figure = plt.figure(figsize=(10,10))\nplots=sns.barplot(x=\"mode\",y=\"count\",data=mode)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xlabel(\"Mode\",size=15)\nplt.ylabel(\"Count\",size=15)\nplt.title(\"Count of mode\",size=20)\nplt.show()","870e77e6":"# Exporting mode to csv\nmode.to_csv(\"Count of mode.csv\",index=False)","622a5ce5":"df.columns","eae15f89":"live=df.groupby([\"artists\"])[\"liveness\"].mean().sort_values(ascending=False)\ntop10live = live.head(10)","ac08e597":"# Converting it to dataframe\ntop10live = top10live.to_frame()\n\n#reseting the dataframe's index\ntop10live = top10live.reset_index()","5ff0ee37":"# Converting the values to percentage\nfor i in range (0,len(top10live)):\n    top10live[\"liveness\"][i] = top10live[\"liveness\"][i]*100\n    ","7425ec52":"figure = plt.figure(figsize=(16,8))\nplots=sns.barplot(x=\"artists\",y=\"liveness\",data=top10live)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xlabel(\"artists\",size=15)\nplt.ylabel(\"liveness\",size=15)\nplt.title(\"Artists with their respective live percentage\",size=20)\nplt.show()","af383472":"# Exporting to csv format\ntop10live.to_csv(\"Top 10 live.csv\",index=False)","80df3f57":"val=df.groupby([\"artists\"])[\"valence\"].mean().sort_values(ascending=False)\ntop10val = val.head(10)","3f7ba4b7":"# changing it to dataframe\ntop10val=top10val.to_frame()\n\n# resetting their indexes\n\ntop10val = top10val.reset_index()","66379ca9":"top10val","eee7da27":"for i in range (0,len(top10val)):\n    top10val[\"valence\"][i] = top10val[\"valence\"][i]*100\n    ","c0e9d61f":"figure = plt.figure(figsize=(15,8))\nplots=sns.barplot(x=\"artists\",y=\"valence\",data=top10val)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=15, xytext=(0, 8),\n                   textcoords='offset points')\nplt.xlabel(\"Artists\",size=15)\nplt.ylabel(\"valence\",size=15)\nplt.title(\"Artist with high valence(Happy songs)%\",size=20)\nplt.show()","c8be0119":"# Exporting to csv format\n\ntop10val.to_csv(\"Top 10 Valence.csv\",index=False)","4db626fb":"df.head()","180b74c6":"## Checking the Datatypes","607e8999":"#### Reseting the index","c35f2e40":"## Importing the data","26d14db5":"## Mode","d9be2b83":"Exporting top10artist dataframe to CSV format ","271f1a8f":"## Liveness","b8bd6416":"## Checking the artist with their max danceability, energy, key, loudness","8443c22e":"These are the TOP 5 artist who had most TOP 100 songs. Post Malone and XXXTENTACTION has 6 songs.","3e5b2e80":"## Checking the Correlation\n","a270b330":"### Key, speechiness and acousticness","fcbd41bf":"## Finding which Artist had most TOP 100 songs","e8ad478d":"### Danceability","9e609606":"### Energy","b674a159":"## Valence"}}