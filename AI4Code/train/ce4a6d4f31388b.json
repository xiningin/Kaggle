{"cell_type":{"06d5df57":"code","84ffe539":"code","093edf22":"code","7f226150":"code","aad91e63":"code","0d815da6":"code","027bca6b":"code","504fc400":"code","d7510c42":"code","51d64109":"code","b72b1ff3":"code","2fc61c09":"code","a8bfd8fe":"code","fdf17d6f":"code","47c539dc":"code","1fb926eb":"code","d61189c9":"code","51f7d964":"code","edcfa8d8":"code","9ef70782":"code","2bb0818b":"code","14b06445":"code","8958f1a5":"code","eacc3e82":"code","0cd7b601":"markdown","4bf22956":"markdown","a1c19498":"markdown","c84f28b1":"markdown","95120d06":"markdown","7c2faa66":"markdown","4a6ae81f":"markdown","e898f02c":"markdown","9edd3bdf":"markdown","873e6a35":"markdown","dd248c53":"markdown","296f7b60":"markdown","ad0063bb":"markdown","7de7f5ee":"markdown","487bdb04":"markdown","d304a4b9":"markdown","fea76291":"markdown","e95bf85c":"markdown","8e046c44":"markdown","3990a15f":"markdown"},"source":{"06d5df57":"!pip install swifter\n!pip install tensorflow==2.0.0","84ffe539":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport matplotlib.image as mpimg\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os # accessing directory structure","093edf22":"DATASET_PATH = \"\/kaggle\/input\/myntradataset\/\"\nprint(os.listdir(DATASET_PATH))","7f226150":"df = pd.read_csv(DATASET_PATH + \"styles.csv\", nrows=5000, error_bad_lines=False)\ndf['image'] = df.apply(lambda row: str(row['id']) + \".jpg\", axis=1)\ndf = df.reset_index(drop=True)\ndf.head(10)","aad91e63":"import cv2\ndef plot_figures(figures, nrows = 1, ncols=1,figsize=(8, 8)):\n    \"\"\"Plot a dictionary of figures.\n\n    Parameters\n    ----------\n    figures : <title, figure> dictionary\n    ncols : number of columns of subplots wanted in the display\n    nrows : number of rows of subplots wanted in the figure\n    \"\"\"\n\n    fig, axeslist = plt.subplots(ncols=ncols, nrows=nrows,figsize=figsize)\n    for ind,title in enumerate(figures):\n        axeslist.ravel()[ind].imshow(cv2.cvtColor(figures[title], cv2.COLOR_BGR2RGB))\n        axeslist.ravel()[ind].set_title(title)\n        axeslist.ravel()[ind].set_axis_off()\n    plt.tight_layout() # optional\n    \ndef img_path(img):\n    return DATASET_PATH+\"\/images\/\"+img\n\ndef load_image(img):\n    return cv2.imread(img_path(img))","0d815da6":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# generation of a dictionary of (title, images)\nfigures = {'im'+str(i): load_image(row.image) for i, row in df.sample(6).iterrows()}\n# plot of the images in a figure, with 2 rows and 3 columns\nplot_figures(figures, 2, 3)","027bca6b":"plt.figure(figsize=(7,20))\ndf.articleType.value_counts().sort_values().plot(kind='barh')","504fc400":"import tensorflow as tf\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions\nfrom tensorflow.keras.layers import GlobalMaxPooling2D\ntf.__version__","d7510c42":"# Input Shape\nimg_width, img_height, _ = load_image(df.iloc[0].image).shape\n\n# Pre-Trained Model\nbase_model = ResNet50(weights='imagenet', \n                      include_top=False, \n                      input_shape = (img_width, img_height, 3))\nbase_model.trainable = False\n\n# Add Layer Embedding\nmodel = tf.keras.Sequential([\n    base_model,\n    GlobalMaxPooling2D()\n])\n\nmodel.summary()","51d64109":"def get_embedding(model, img_name):\n    # Reshape\n    img = image.load_img(img_path(img_name), target_size=(img_width, img_height))\n    # img to Array\n    x   = image.img_to_array(img)\n    # Expand Dim (1, w, h)\n    x   = np.expand_dims(x, axis=0)\n    # Pre process Input\n    x   = preprocess_input(x)\n    return model.predict(x).reshape(-1)","b72b1ff3":"emb = get_embedding(model, df.iloc[1].image)\nemb.shape","2fc61c09":"plt.imshow(cv2.cvtColor(load_image(df.iloc[1].image), cv2.COLOR_BGR2RGB))\nprint(emb)","a8bfd8fe":"%%time\nimport swifter\n\n# Parallel apply\nmap_embeddings = df['image'].swifter.apply(lambda img: get_embedding(model, img))\ndf_embs        = map_embeddings.apply(pd.Series)\n\nprint(df_embs.shape)\ndf_embs.head()","fdf17d6f":"# https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.pairwise_distances.html\nfrom sklearn.metrics.pairwise import pairwise_distances\n\n# Calcule DIstance Matriz\ncosine_sim = 1-pairwise_distances(df_embs, metric='cosine')\ncosine_sim[:4, :4]","47c539dc":"indices = pd.Series(range(len(df)), index=df.index)\nindices\n\n# Function that get movie recommendations based on the cosine similarity score of movie genres\ndef get_recommender(idx, df, top_n = 5):\n    sim_idx    = indices[idx]\n    sim_scores = list(enumerate(cosine_sim[sim_idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:top_n+1]\n    idx_rec    = [i[0] for i in sim_scores]\n    idx_sim    = [i[1] for i in sim_scores]\n    \n    return indices.iloc[idx_rec].index, idx_sim\n\nget_recommender(2993, df, top_n = 5)","1fb926eb":"# Idx Item to Recommender\nidx_ref = 2993\n\n# Recommendations\nidx_rec, idx_sim = get_recommender(idx_ref, df, top_n = 6)\n\n# Plot\n#===================\nplt.imshow(cv2.cvtColor(load_image(df.iloc[idx_ref].image), cv2.COLOR_BGR2RGB))\n\n# generation of a dictionary of (title, images)\nfigures = {'im'+str(i): load_image(row.image) for i, row in df.loc[idx_rec].iterrows()}\n# plot of the images in a figure, with 2 rows and 3 columns\nplot_figures(figures, 2, 3)","d61189c9":"idx_ref = 987\n\n# Recommendations\nidx_rec, idx_sim = get_recommender(idx_ref, df, top_n = 6)\n\n# Plot\n#===================\nplt.imshow(cv2.cvtColor(load_image(df.iloc[idx_ref].image), cv2.COLOR_BGR2RGB))\n\n# generation of a dictionary of (title, images)\nfigures = {'im'+str(i): load_image(row.image) for i, row in df.loc[idx_rec].iterrows()}\n# plot of the images in a figure, with 2 rows and 3 columns\nplot_figures(figures, 2, 3)","51f7d964":"from sklearn.manifold import TSNE\nimport time\nimport seaborn as sns","edcfa8d8":"df.head()","9ef70782":"time_start = time.time()\ntsne = TSNE(n_components=2, verbose=0, perplexity=40, n_iter=300)\ntsne_results = tsne.fit_transform(df_embs)\nprint('t-SNE done! Time elapsed: {} seconds'.format(time.time()-time_start))","2bb0818b":"df['tsne-2d-one'] = tsne_results[:,0]\ndf['tsne-2d-two'] = tsne_results[:,1]","14b06445":"plt.figure(figsize=(16,10))\nsns.scatterplot(x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n                hue=\"masterCategory\",\n                data=df,\n                legend=\"full\",\n                alpha=0.8)","8958f1a5":"plt.figure(figsize=(16,10))\nsns.scatterplot(x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n                hue=\"subCategory\",\n                data=df,\n                legend=\"full\",\n                alpha=0.8)","eacc3e82":"df.sample(100).to_csv('df_sample.csv')\ndf_embs.to_csv('embeddings.csv')\ndf.to_csv('metadados.csv')","0cd7b601":"\n## Introduction\n\nIn this notebook, I will use a CNN Model to create a Fashion Embedding. This information can be used in ML algorithms with higher semantic quality and similarity between Objects. We will use embeddings to identify similar items, this information will be used to recommend similar content in RecSys.\n\n* **Introduction**\n    * What is Embedding ?\n    * How to use Embedding ?\n* **Data Preparation**\n* **Use Pre-Trained Model to Recommendation**\n* Visualization Latent Space of Contents","4bf22956":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSiR683wW4f9httU7krJeLcgDQRB3Fmxi4v2SIr8QLSht204cmk&s)","a1c19498":"## Conclusion\n\nConvolutional networks can be used to generate generic embeddings of any content. These embeddings can be used to identify similar items and in a recommendation process.\n\nA big improvement would be to retrain some network layers in a dataset similar to the one that will be used. So the network learns better features for a specific problem.","c84f28b1":"#### Configure VM","95120d06":"## Use Pre-Trained Model to Recommendation","7c2faa66":"An embedding is a relatively low-dimensional space into which you can translate high-dimensional vectors. Embeddings make it easier to do machine learning on large inputs like sparse vectors representing words. Ideally, an embedding captures some of the semantics of the input by placing semantically similar inputs close together in the embedding space. An embedding can be learned and reused across models.","4a6ae81f":"#### Recommender Similar Items","e898f02c":"Get Embedding for all itens in dataset","9edd3bdf":"## What is Embedding ?","873e6a35":"Get item Embedding","dd248c53":"You can see different clusters generated by embeddings, which reinforces that features make sense. In this image above it is possible to observe the separation by Category, and in more detail by subcategory.\n\nOf course there is actually a lot more information in embeddings, the visualization is for general understanding only","296f7b60":"## Visualization Latent Space of Contents\n\nSince our latent space is not two-dimensional, we will use TSNE to reduce dimensionality, so we can use some interesting visualizations that can be made at this point. One is to look at the neighborhoods of different classes in the latent 2D plane:","ad0063bb":"**Search for items similar to the reference to recommend. Apparently it's working!**","7de7f5ee":"# Building a Recommendation System Using CNN \n![](https:\/\/www.researchgate.net\/profile\/Andreas_Veit\/publication\/282181243\/figure\/fig1\/AS:360995122892808@1463079352720\/Visualization-of-a-2D-embedding-of-the-style-space-trained-with-strategic-sampling.png)\n","487bdb04":"#### Compute Similarity Between Items","d304a4b9":"The Dataset is made up of different items that can be found in a marketplace. The idea is to use embeddings to search for similarity and find similar items just using the image.","fea76291":"So a natural language modelling technique like Word Embedding is used to map words or phrases from a vocabulary to a corresponding vector of real numbers. As well as being amenable to processing by learning algorithms, this vector representation has two important and advantageous properties:\n\n* **Dimensionality Reduction**\u200a\u2014\u200ait is a more efficient representation\n* **Contextual Similarity**\u200a\u2014\u200ait is a more expressive representation","e95bf85c":"## Data Preparation\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data.","8e046c44":"We can use the Embedding as input of the model, containing a reduced dimensionality but with much semantic information. ","3990a15f":"![](http:\/\/dataaspirant.com\/wp-content\/uploads\/2015\/04\/cosine.png)"}}