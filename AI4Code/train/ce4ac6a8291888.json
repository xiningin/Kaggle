{"cell_type":{"09a7d6cc":"code","a7193405":"code","418894cd":"code","b8e0d1f7":"code","7c69b80c":"code","758542ce":"code","4022763b":"code","d7fb7d61":"code","fd354733":"code","6cd1c784":"code","cd7bd0fa":"code","7386e01b":"code","1a0bdd98":"code","c1b1b6f0":"code","f2cf4385":"code","8cc461c7":"code","27fb076f":"code","ef173818":"code","fe67b24f":"code","dba04078":"code","48d05a8c":"code","4158bcad":"code","725f59d0":"code","6aa1ff4a":"code","d9d75f56":"code","444089cc":"code","a4c74cdc":"code","874cc024":"code","feb654e4":"code","002e700b":"code","cc249a9c":"code","481eee2e":"code","bc57d250":"code","583642dd":"code","ab0e6b03":"code","f74dd75d":"code","f75f660d":"code","45d5f9a0":"code","eee6e2b0":"code","0a110ec4":"code","9f637b7e":"code","fc072ece":"code","5a7ef9e9":"code","63ee1132":"code","940191f6":"code","26612af9":"code","de3a56d4":"code","ddacb56f":"code","1035be28":"code","d522327e":"code","e26a2de4":"code","e05de8cb":"code","1b9891d1":"code","0e0e2191":"code","de9b3903":"code","4afb1793":"code","2c189398":"code","a46fa48f":"code","fb8e1f0d":"code","62c63364":"code","3b49729a":"code","56ef8d07":"code","a25fdb0f":"code","dc01b172":"code","84e134ab":"code","2a3706a4":"code","d240f75a":"code","b86e3673":"code","4e236b1a":"code","fcf18deb":"code","7e532894":"code","e4f448cb":"code","75063b90":"code","4f4463ac":"code","b1704776":"code","664bb8bf":"code","38d52fb6":"code","bd48ad8f":"code","97fe3877":"code","995b7e2c":"code","9f4358b7":"code","f480b9cb":"code","b94d9096":"code","b52871f7":"code","1c67c4b4":"code","6fbeedaa":"code","a64531c5":"code","6399d07b":"code","3b14c06b":"code","a63e77b9":"code","b62bd998":"code","c3f95621":"code","1726dae7":"code","f6c05dd6":"code","403650ab":"code","29993149":"code","b03f6f0f":"code","fb41c5cf":"code","ec10da7b":"code","57f02d64":"code","6455156a":"code","4df01e4c":"code","4beefecb":"code","162c4a1b":"code","e8d26bb1":"code","c1145ffd":"code","ed2d7fcf":"code","36f64b97":"code","ef96d114":"code","6cbef0c2":"code","f2433d42":"code","43ffbd43":"code","75b713b0":"code","b6bfd1ff":"code","d1ea02cc":"code","8a32cfd4":"code","ee1a1136":"code","545692ca":"code","2106e677":"code","3add8913":"code","760dfb15":"code","ae0dfccd":"code","660a53cc":"code","ef370525":"code","c48de924":"code","bafd619b":"code","8ab8ba33":"code","535edc11":"code","1d3fb125":"code","047594a4":"code","f07673f2":"code","603a1d14":"code","ffe309ba":"code","55f687e7":"code","24a0dd97":"code","2ba345da":"code","2949ba44":"code","d2d8f792":"code","e6d7a56d":"markdown","b57292ef":"markdown","7888a328":"markdown","810a11b0":"markdown","db8bca06":"markdown","54f72ee8":"markdown","caa35768":"markdown","c8f03871":"markdown","150441ca":"markdown","528165b0":"markdown","cd198bad":"markdown","0b76b64f":"markdown","d6302de4":"markdown","c53740cd":"markdown","13d5a36b":"markdown","ffe18a3c":"markdown","150c82c5":"markdown","cb49ea6e":"markdown","f61a5840":"markdown","151198cb":"markdown","a0046619":"markdown","da1f6fb8":"markdown","f1930a59":"markdown","d5c8fc66":"markdown","f85442c7":"markdown","0d26de76":"markdown","ac938af1":"markdown","9af633d2":"markdown","b5613ae8":"markdown","59e8118e":"markdown","c991e23e":"markdown","a2d76ed9":"markdown","2f5dc7dd":"markdown","0c25343e":"markdown","91a6fc2c":"markdown","fe2b2834":"markdown","01886964":"markdown","c618b98c":"markdown","6f06abd4":"markdown","6cae964d":"markdown","a99e85ce":"markdown","83d02746":"markdown","f418a2ab":"markdown","62e88606":"markdown","67661822":"markdown","da333c33":"markdown","59e6a0ba":"markdown","6d67a763":"markdown","77ab0558":"markdown","0608929a":"markdown","9c887860":"markdown","3e39c729":"markdown","2a69238e":"markdown","1346792a":"markdown","5869dbc7":"markdown","f461aaa9":"markdown","02e70a1d":"markdown","3bc537d3":"markdown","441908f6":"markdown","1189389b":"markdown","dd59caa9":"markdown","63f65e9b":"markdown","037b1780":"markdown","a3f37988":"markdown","61efa904":"markdown"},"source":{"09a7d6cc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go","a7193405":"df = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndf","418894cd":"df.head()","b8e0d1f7":"df.tail()","7c69b80c":"df.dtypes","758542ce":"df.columns","4022763b":"df.shape","d7fb7d61":"df.size","fd354733":"df.info()","6cd1c784":"df.describe()","cd7bd0fa":"df.isnull().sum()","7386e01b":"df.duplicated().sum()","1a0bdd98":"df.skew()","c1b1b6f0":"df.corr()","f2cf4385":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'],errors = 'coerce')","8cc461c7":"df['gender'].value_counts()","27fb076f":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['gender'].value_counts().index\ny=df['gender'].value_counts().values.tolist()\ndata = df.groupby(\"gender\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Gender Group', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['gender'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Gender of People',weight = 'bold')\nplt.show()","ef173818":"df['SeniorCitizen'].value_counts()","fe67b24f":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['SeniorCitizen'].value_counts().index\ny=df['SeniorCitizen'].value_counts().values.tolist()\ndata = df.groupby(\"SeniorCitizen\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('SeniorCitizen Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['SeniorCitizen'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('SeniorCitizen Yes\/No',weight = 'bold')\nplt.show()","dba04078":"df['Partner'].value_counts()","48d05a8c":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Partner'].value_counts().index\ny=df['Partner'].value_counts().values.tolist()\ndata = df.groupby(\"Partner\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Partner Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Partner'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Partner Yes\/No',weight = 'bold')\nplt.show()","4158bcad":"df['Dependents'].value_counts()","725f59d0":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Dependents'].value_counts().index\ny=df['Dependents'].value_counts().values.tolist()\ndata = df.groupby(\"Dependents\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Dependents Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Dependents'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Dependents Yes\/No',weight = 'bold')\nplt.show()","6aa1ff4a":"df['PhoneService'].value_counts()","d9d75f56":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['PhoneService'].value_counts().index\ny=df['PhoneService'].value_counts().values.tolist()\ndata = df.groupby(\"PhoneService\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('PhoneService Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['PhoneService'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('PhoneService Yes\/No',weight = 'bold')\nplt.show()","444089cc":"df['MultipleLines'].value_counts()","a4c74cdc":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['MultipleLines'].value_counts().index\ny=df['MultipleLines'].value_counts().values.tolist()\ndata = df.groupby(\"MultipleLines\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('MultipleLines Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['MultipleLines'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('MultipleLines Yes\/No',weight = 'bold')\nplt.show()","874cc024":"df['InternetService'].value_counts()","feb654e4":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['InternetService'].value_counts().index\ny=df['InternetService'].value_counts().values.tolist()\ndata = df.groupby(\"InternetService\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('InternetService Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['InternetService'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('InternetService Yes\/No',weight = 'bold')\nplt.show()","002e700b":"df['OnlineSecurity'].value_counts()","cc249a9c":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['OnlineSecurity'].value_counts().index\ny=df['OnlineSecurity'].value_counts().values.tolist()\ndata = df.groupby(\"OnlineSecurity\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('OnlineSecurity Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['OnlineSecurity'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('OnlineSecurity Yes\/No',weight = 'bold')\nplt.show()","481eee2e":"df['OnlineBackup'].value_counts()","bc57d250":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['OnlineBackup'].value_counts().index\ny=df['OnlineBackup'].value_counts().values.tolist()\ndata = df.groupby(\"OnlineBackup\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('OnlineBackup Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['OnlineBackup'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('OnlineBackup Yes\/No',weight = 'bold')\nplt.show()","583642dd":"df['DeviceProtection'].value_counts()","ab0e6b03":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['DeviceProtection'].value_counts().index\ny=df['DeviceProtection'].value_counts().values.tolist()\ndata = df.groupby(\"DeviceProtection\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('DeviceProtection Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['DeviceProtection'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('DeviceProtection Yes\/No',weight = 'bold')\nplt.show()","f74dd75d":"df['TechSupport'].value_counts()","f75f660d":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['TechSupport'].value_counts().index\ny=df['TechSupport'].value_counts().values.tolist()\ndata = df.groupby(\"TechSupport\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('TechSupport Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['TechSupport'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('TechSupport Yes\/No',weight = 'bold')\nplt.show()","45d5f9a0":"df['StreamingTV'].value_counts()","eee6e2b0":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['StreamingTV'].value_counts().index\ny=df['StreamingTV'].value_counts().values.tolist()\ndata = df.groupby(\"StreamingTV\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('StreamingTV Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['StreamingTV'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('StreamingTV Yes\/No',weight = 'bold')\nplt.show()","0a110ec4":"df['StreamingMovies'].value_counts()","9f637b7e":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['StreamingMovies'].value_counts().index\ny=df['StreamingMovies'].value_counts().values.tolist()\ndata = df.groupby(\"StreamingMovies\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('StreamingMovies Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['StreamingMovies'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('StreamingMovies Yes\/No',weight = 'bold')\nplt.show()","fc072ece":"df['Contract'].value_counts()","5a7ef9e9":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Contract'].value_counts().index\ny=df['Contract'].value_counts().values.tolist()\ndata = df.groupby(\"Contract\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Contract Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Contract'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Contract Yes\/No',weight = 'bold')\nplt.show()","63ee1132":"df['PaperlessBilling'].value_counts()","940191f6":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['PaperlessBilling'].value_counts().index\ny=df['PaperlessBilling'].value_counts().values.tolist()\ndata = df.groupby(\"PaperlessBilling\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('PaperlessBilling Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['PaperlessBilling'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('PaperlessBilling Yes\/No',weight = 'bold')\nplt.show()","26612af9":"df['PaymentMethod'].value_counts()","de3a56d4":"fig, ax = plt.subplots(1, 2, figsize=(20,10))\nx=df['PaymentMethod'].value_counts().index\ny=df['PaymentMethod'].value_counts().values.tolist()\ndata = df.groupby(\"PaymentMethod\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('PaymentMethod Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['PaymentMethod'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('PaymentMethod Yes\/No',weight = 'bold')\nplt.show()","ddacb56f":"df['Churn'].value_counts()","1035be28":"fig, ax = plt.subplots(1, 2, figsize=(15,8))\nx=df['Churn'].value_counts().index\ny=df['Churn'].value_counts().values.tolist()\ndata = df.groupby(\"Churn\").size()\nsns.set(style=\"dark\", color_codes=True)\npal = sns.color_palette(\"YlGnBu\", len(data))\nrank = data.argsort().argsort() \nsns.barplot(x=x,y=y,palette=np.array(pal[::-1])[rank],ax = ax[0])\nfor p in ax[0].patches:\n        ax[0].annotate('{:.0f}'.format(p.get_height()), (p.get_x()+0.3, p.get_height()),\n                    ha='center', va='bottom',\n                    color= 'black')\nax[0].set_xlabel('Churn Yes\/No', weight='semibold', fontname = 'monospace')\n        \nax[1].pie(y, labels = x, colors = pal, autopct='%1.1f%%',\n        explode=[0.03 for i in df['Churn'].value_counts().index])\nplt.legend(bbox_to_anchor=(1, 1))\nplt.suptitle ('Churn Yes\/No',weight = 'bold')\nplt.show()","d522327e":"sns.histplot(x = df['tenure'],kde = True)\nplt.show()","e26a2de4":"sns.histplot(x = df['MonthlyCharges'],kde = True)\nplt.show()","e05de8cb":"fig = px.histogram(data_frame = df,\n             x = \"gender\",\n             color=\"Churn\", title=\"<b>Gender vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","1b9891d1":"fig = px.sunburst(data_frame=df,\n                  path=['gender', 'Churn'],\n                  color='Churn',\n                  title='Gender vs Churn'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","0e0e2191":"fig = px.sunburst(data_frame=df,\n                  path=['SeniorCitizen', 'Churn'],\n                  color='Churn',\n                  title='SeniorCitizen vs Churn'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","de9b3903":"fig = px.sunburst(data_frame=df,\n                  path=['Partner', 'Churn'],\n                  color='Churn',\n                  title='Partner vs Churn'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","4afb1793":"fig = px.histogram(data_frame = df,\n             x = \"Dependents\",\n             color=\"Churn\", title=\"<b>Dependents vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","2c189398":"fig = px.sunburst(data_frame=df,\n                  path=['Dependents', 'Churn'],\n                  color='Churn',\n                  title='Dependents vs Churn'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","a46fa48f":"fig = px.histogram(data_frame = df,\n             x = \"PhoneService\",\n             color=\"Churn\", title=\"<b>PhoneService vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","fb8e1f0d":"fig = px.sunburst(data_frame=df,\n                  path=['PhoneService', 'Churn'],\n                  color='Churn',\n                  title='PhoneService vs Churn'\n                 )\n\nfig.update_traces(textinfo='label+percent parent')\nfig.update_layout(margin=dict(t=40, l=0, r=0, b=0))\nfig.show()","62c63364":"fig = px.histogram(data_frame = df,\n             x = \"MultipleLines\",\n             color=\"Churn\", title=\"<b>MultipleLines vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","3b49729a":"fig = px.histogram(data_frame = df,\n             x = \"InternetService\",\n             color=\"Churn\", title=\"<b>InternetService vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","56ef8d07":"fig = px.histogram(data_frame = df,\n             x = \"OnlineSecurity\",\n             color=\"Churn\", title=\"<b>OnlineSecurity vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","a25fdb0f":"fig = px.histogram(data_frame = df,\n             x = \"OnlineBackup\",\n             color=\"Churn\", title=\"<b>Onlinebackup vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","dc01b172":"fig = px.histogram(data_frame = df,\n             x = \"DeviceProtection\",\n             color=\"Churn\", title=\"<b>DeviceProtection vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","84e134ab":"fig = px.histogram(data_frame = df,\n             x = \"TechSupport\",\n             color=\"Churn\", title=\"<b>TechSupport vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","2a3706a4":"fig = px.histogram(data_frame = df,\n             x = \"StreamingTV\",\n             color=\"Churn\", title=\"<b>StreamingTV vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","d240f75a":"fig = px.histogram(data_frame = df,\n             x = \"StreamingMovies\",\n             color=\"Churn\", title=\"<b>StreamingMovies vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","b86e3673":"fig = px.histogram(data_frame = df,\n             x = \"Contract\",\n             color=\"Churn\", title=\"<b>Contract vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","4e236b1a":"fig = px.histogram(data_frame = df,\n             x = \"PaperlessBilling\",\n             color=\"Churn\", title=\"<b>PaperlessBilling vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","fcf18deb":"fig = px.histogram(data_frame = df,\n             x = \"PaymentMethod\",\n             color=\"Churn\", title=\"<b>PaymentMethod vs Churn<\/b>\",\n             pattern_shape_sequence=['x'],\n             template='ggplot2')\n\nfig.show()","7e532894":"def barplot_percentages(feature, orient='v', axis_name=\"percentage of customers\"):\n    ratios = pd.DataFrame()\n    g = df.groupby(feature)[\"Churn\"].value_counts().to_frame()\n    g = g.rename({\"Churn\": axis_name}, axis=1).reset_index()\n    g[axis_name] = g[axis_name]\/len(df)\n    if orient == 'v':\n        ax = sns.barplot(x=feature, y= axis_name, hue='Churn', data=g, orient=orient)\n        ax.set_yticklabels(['{:,.0%}'.format(y) for y in ax.get_yticks()])\n    else:\n        ax = sns.barplot(x= axis_name, y=feature, hue='Churn', data=g, orient=orient)\n        ax.set_xticklabels(['{:,.0%}'.format(x) for x in ax.get_xticks()])\n    ax.plot()\nbarplot_percentages(\"SeniorCitizen\")","e4f448cb":"df['churn_rate'] = df['Churn'].replace(\"No\", 0).replace(\"Yes\", 1)\ng = sns.FacetGrid(df, col=\"SeniorCitizen\", height=4, aspect=.9)\nax = g.map(sns.barplot, \"gender\", \"churn_rate\", palette = \"Blues_d\", order= ['Female', 'Male'])","75063b90":"g = sns.FacetGrid(df, row='SeniorCitizen', col=\"gender\", hue=\"Churn\", height=3.5)\ng.map(plt.scatter, \"tenure\", \"MonthlyCharges\", alpha=0.6)\ng.add_legend();","4f4463ac":"fig, axis = plt.subplots(1, 2, figsize=(12,4))\naxis[0].set_title(\"Has partner\")\naxis[1].set_title(\"Has dependents\")\naxis_y = \"percentage of customers\"\n# Plot Partner column\ngp_partner = df.groupby('Partner')[\"Churn\"].value_counts()\/len(df)\ngp_partner = gp_partner.to_frame().rename({\"Churn\": axis_y}, axis=1).reset_index()\nax = sns.barplot(x='Partner', y= axis_y, hue='Churn', data=gp_partner, ax=axis[0])\n# Plot Dependents column\ngp_dep = df.groupby('Dependents')[\"Churn\"].value_counts()\/len(df)\ngp_dep = gp_dep.to_frame().rename({\"Churn\": axis_y}, axis=1).reset_index()\nax = sns.barplot(x='Dependents', y= axis_y, hue='Churn', data=gp_dep, ax=axis[1])","b1704776":"plt.figure(figsize=(9, 4.5))\nbarplot_percentages(\"MultipleLines\", orient='h')","664bb8bf":"ax = sns.catplot(x=\"MultipleLines\", y=\"MonthlyCharges\", hue=\"Churn\", kind=\"violin\",\n                 split=True, palette=\"pastel\", data=df, height=4.2, aspect=1.4)","38d52fb6":"plt.figure(figsize=(9, 4.5))\nbarplot_percentages(\"InternetService\", orient=\"h\")","bd48ad8f":"ax = sns.catplot(x=\"InternetService\", y=\"MonthlyCharges\", hue=\"Churn\", kind=\"violin\",\n                 split=True, palette=\"pastel\", data=df, height=4.2, aspect=1.4)","97fe3877":"cols = [\"OnlineSecurity\", \"OnlineBackup\", \"DeviceProtection\", \"TechSupport\", \"StreamingTV\", \"StreamingMovies\"]\ndf1 = pd.melt(df[df[\"InternetService\"] != \"No\"][cols]).rename({'value': 'Has service'}, axis=1)\nplt.figure(figsize=(10, 4.5))\nax = sns.countplot(data=df1, x='variable', hue='Has service')\nax.set(xlabel='Additional service', ylabel='Num of customers')\nplt.show()","995b7e2c":"plt.figure(figsize=(10, 4.5))\ndf1 = df[(df.InternetService != \"No\") & (df.Churn == \"Yes\")]\ndf1 = pd.melt(df1[cols]).rename({'value': 'Has service'}, axis=1)\nax = sns.countplot(data=df1, x='variable', hue='Has service', hue_order=['No', 'Yes'])\nax.set(xlabel='Additional service', ylabel='Num of churns')\nplt.show()","9f4358b7":"g = sns.FacetGrid(df, col=\"PaperlessBilling\", height=4, aspect=.9)\nax = g.map(sns.barplot, \"Contract\", \"churn_rate\", palette = \"Blues_d\", order= ['Month-to-month', 'One year', 'Two year'])","f480b9cb":"plt.figure(figsize=(9, 4.5))\nbarplot_percentages(\"PaymentMethod\", orient='h')","b94d9096":"train_no_NA = df.dropna()\n\ntrain_cat_visual_0 = train_no_NA[[ 'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod', 'Churn']].columns.tolist()","b52871f7":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.55)\n\nfig, ax = plt.subplots(6, 3, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_0, ax.flatten())))):\n    \n    sns.violinplot(ax = axes, x = train_no_NA[column], \n                   y = train_no_NA['tenure'],\n                   scale = 'width', linewidth = 0.5, \n                   palette = 'crest', inner = None)\n    \n    plt.setp(axes.collections, alpha = 0.3)\n    \n    sns.stripplot(ax = axes, x = train_no_NA[column], \n                  y = train_no_NA['tenure'],\n                  palette = 'crest', alpha = 0.9, \n                  s = 1.5, jitter = 0.07)\n    sns.pointplot(ax = axes, x = train_no_NA[column],\n                  y = train_no_NA['tenure'],\n                  color = '#ff5736', scale = 0.25,\n                  estimator = np.mean, ci = 'sd',\n                  errwidth = 0.5, capsize = 0.15, join = True)\n    \n    plt.setp(axes.lines, zorder = 100)\n    plt.setp(axes.collections, zorder = 100)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \nplt.tight_layout()\nplt.show()","1c67c4b4":"train_cat_visual_1 = df.select_dtypes(\n                     include = ['object', 'category']).columns.tolist()\ntrain_cat_visual_1.remove('customerID')","6fbeedaa":"sns.set_theme(rc = {'figure.dpi': 250, 'axes.labelsize': 7, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.55)\n\nfig, ax = plt.subplots(6, 3, figsize = (6.5, 7.5))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_cat_visual_1, \n                                                    ax.flatten())))):\n    \n    sns.countplot(ax = axes, x = df[column], hue = df['Churn'], \n                  palette = 'crest', alpha = 0.8)\n    \nelse:\n    [axes.set_visible(False) for axes in ax.flatten()[indx + 1:]]\n    \naxes_legend = ax.flatten()\n\naxes_legend[1].legend(title = 'Churn', loc = 'upper right')\naxes_legend[2].legend(title = 'Churn', loc = 'upper right')\n\nplt.tight_layout()\nplt.show()","a64531c5":"train_num_visual_0 = ['MonthlyCharges', 'tenure','TotalCharges']","6399d07b":"sns.set_theme(rc = {'figure.dpi': 120, 'axes.labelsize': 8, \n                    'axes.facecolor': '#f0eee9', 'grid.color': '#fffdfa', \n                    'figure.facecolor': '#e8e6e1'}, font_scale = 0.65)\n\nfig, ax = plt.subplots(3, 1, figsize = (6, 6))\n\nfor indx, (column, axes) in list(enumerate(list(zip(train_num_visual_0, ax.flatten())))):\n    \n    sns.histplot(ax = axes, x = df[column], hue = df['Churn'], \n                 palette = 'crest', alpha = 0.8, multiple = 'stack')\n    \n    legend = axes.get_legend() # sns.hisplot has some issues with legend\n    handles = legend.legendHandles\n    legend.remove()\n    axes.legend(handles, ['0', '1'], title = 'Churn', loc = 'upper right')\n    Quantiles = np.quantile(df[column], [0, 0.25, 0.50, 0.75, 1])\n    \n    for q in Quantiles: axes.axvline(x = q, linewidth = 0.5, color = 'r')\n        \nplt.tight_layout()\nplt.show()","3b14c06b":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    ''' Acceps a list of IpyTable objects and returns a table which contains each IpyTable in a cell\n    '''\n    return HTML(\n        '<table><tr style=\"background-color:white;\">' + \n        ''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list]) +\n        '<\/tr><\/table>')","a63e77b9":"df_nunique = {var: pd.DataFrame(df[var].value_counts()) \n              for var in {'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling','TotalCharges', 'Churn'}}\nmulti_table([df_nunique['gender'], df_nunique['SeniorCitizen'], df_nunique['Partner'],df_nunique['Dependents'],\n              df_nunique['PhoneService'],df_nunique['MultipleLines'],df_nunique['InternetService'] ,\n             df_nunique['OnlineSecurity'], df_nunique['OnlineBackup'],df_nunique['DeviceProtection'],\n            df_nunique['TechSupport'],df_nunique['StreamingTV'],df_nunique['StreamingMovies'],df_nunique['Contract'],\n            df_nunique['PaperlessBilling'],df_nunique['Churn']])","b62bd998":"df_groupby = {var: pd.DataFrame(df.groupby([var, 'Churn']).size()) \n              for var in {'gender', 'SeniorCitizen', 'Partner', 'Dependents',\n        'PhoneService', 'MultipleLines', 'InternetService',\n       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n       'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling',\n       'PaymentMethod'}}\nmulti_table([df_groupby['gender'], df_groupby['SeniorCitizen'], df_groupby['Partner'],df_groupby['Dependents'],\n              df_groupby['PhoneService'],df_groupby['MultipleLines'],df_groupby['InternetService'] ,\n             df_groupby['OnlineSecurity'], df_groupby['OnlineBackup'],df_groupby['DeviceProtection'],\n            df_groupby['TechSupport'],df_groupby['StreamingTV'],df_groupby['StreamingMovies'],df_groupby['Contract'],\n            df_groupby['PaperlessBilling']])","c3f95621":"x = ['tenure','MonthlyCharges']\ndef count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x:\n    count_outliers(df,i)","1726dae7":"df.drop(['customerID','Churn'],axis = 1,inplace = True)","f6c05dd6":"df","403650ab":"df1=pd.get_dummies(data=df,columns=['gender', 'Partner', 'Dependents', \n       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod'],drop_first=True)\ndf1","29993149":"df1 = df1[['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',\n        'gender_Male', 'Partner_Yes', 'Dependents_Yes',\n       'PhoneService_Yes', 'MultipleLines_No phone service',\n       'MultipleLines_Yes', 'InternetService_Fiber optic',\n       'InternetService_No', 'OnlineSecurity_No internet service',\n       'OnlineSecurity_Yes', 'OnlineBackup_No internet service',\n       'OnlineBackup_Yes', 'DeviceProtection_No internet service',\n       'DeviceProtection_Yes', 'TechSupport_No internet service',\n       'TechSupport_Yes', 'StreamingTV_No internet service', 'StreamingTV_Yes',\n       'StreamingMovies_No internet service', 'StreamingMovies_Yes',\n       'Contract_One year', 'Contract_Two year', 'PaperlessBilling_Yes',\n       'PaymentMethod_Credit card (automatic)',\n       'PaymentMethod_Electronic check', 'PaymentMethod_Mailed check','churn_rate']]","b03f6f0f":"df1","fb41c5cf":"from sklearn.impute import SimpleImputer\n\n# Imputation\n\nimputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\n\ndf1.TotalCharges = imputer.fit_transform(df1[\"TotalCharges\"].values.reshape(-1, 1))","ec10da7b":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report,confusion_matrix\nscaler = StandardScaler()\nscaler.fit(df1.drop(['churn_rate'],axis = 1))\nscaled_features = scaler.transform(df1.drop('churn_rate',axis = 1))","57f02d64":"from sklearn.model_selection import train_test_split\nX = scaled_features\nY = df1['churn_rate']\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)","6455156a":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 30)\nknn.fit(X_train,Y_train)","4df01e4c":"pred = knn.predict(X_test)\npred","4beefecb":"print(confusion_matrix(Y_test,pred))","162c4a1b":"print(classification_report(Y_test,pred))","e8d26bb1":"error_rate= []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,Y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i != Y_test))","c1145ffd":"plt.figure(figsize = (10,6))\nplt.plot(range(1,40),error_rate,color = 'blue',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 10)\nplt.title('Error Rate vs K')\nplt.xlabel('K')\nplt.ylabel('Error Rate')","ed2d7fcf":"from sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nprint(metrics.accuracy_score(Y_test, pred))\nknn.score(X_train,Y_train)","36f64b97":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,Y_train)","ef96d114":"predR = logmodel.predict(X_test)","6cbef0c2":"print(classification_report(Y_test,pred))\nprint(confusion_matrix(Y_test,pred))","f2433d42":"logmodel.score(X_test,Y_test)","43ffbd43":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, Y_train)\ny_pred = dtc.predict(X_test)","75b713b0":"confusion_matrix(Y_test, y_pred)","b6bfd1ff":"print(classification_report(Y_test, y_pred))","d1ea02cc":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(Y_test, y_pred))","8a32cfd4":"from sklearn.svm import SVC\nsvc = SVC()\nsvc.fit(X_train, Y_train)\ny_pred = svc.predict(X_test)","ee1a1136":"confusion_matrix(Y_test, y_pred)","545692ca":"print(classification_report(Y_test, y_pred))","2106e677":"print(accuracy_score(Y_test, y_pred))","3add8913":"from sklearn.model_selection import GridSearchCV\ngrid_params = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : [3, 5, 7, 10],\n    'min_samples_split' : range(2, 10, 1),\n    'min_samples_leaf' : range(2, 10, 1)\n}\n\ngrid_search = GridSearchCV(dtc, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, Y_train)","760dfb15":"dtc = grid_search.best_estimator_\ny_pred = dtc.predict(X_test)","ae0dfccd":"print(accuracy_score(Y_test, y_pred))","660a53cc":"# best parameters and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","ef370525":"from sklearn.ensemble import AdaBoostClassifier\n\nada = AdaBoostClassifier(base_estimator = dtc)\n\nparameters = {\n    'n_estimators' : [50, 70, 90, 120, 180, 200],\n    'learning_rate' : [0.001, 0.01, 0.1, 1, 10],\n    'algorithm' : ['SAMME', 'SAMME.R']\n}\n\ngrid_search = GridSearchCV(ada, parameters, n_jobs = -1, cv = 10, verbose = 1)\ngrid_search.fit(X_train, Y_train)","c48de924":"print(grid_search.best_params_)\nprint(grid_search.best_score_)","bafd619b":"ada = AdaBoostClassifier(base_estimator = dtc, algorithm = 'SAMME.R', learning_rate = 0.001, n_estimators = 200)\nada.fit(X_train, Y_train)","8ab8ba33":"confusion_matrix(Y_test, y_pred)","535edc11":"print(accuracy_score(Y_test, y_pred))","1d3fb125":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier()\n\nparameters = {\n    'loss': ['deviance', 'exponential'],\n    'learning_rate': [0.001, 0.1, 1, 10],\n    'n_estimators': [100, 150, 180, 200]\n}\n\ngrid_search = GridSearchCV(gb, parameters, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, Y_train)","047594a4":"# best parameter and best score\n\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","f07673f2":"gb = GradientBoostingClassifier(learning_rate = 0.1, loss = 'deviance', n_estimators = 180)\ngb.fit(X_train,Y_train)\ny_pred = gb.predict(X_test) ","603a1d14":"print(accuracy_score(Y_test, y_pred))","ffe309ba":"sgbc = GradientBoostingClassifier(learning_rate = 0.1, subsample = 0.9, max_features = 0.75, loss = 'deviance',\n                                  n_estimators = 100)\nsgbc.fit(X_train, Y_train)\ny_pred = sgbc.predict(X_test)","55f687e7":"print(accuracy_score(Y_test, y_pred))","24a0dd97":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(iterations = 180, learning_rate = 0.1)\ncat.fit(X_train, Y_train)\ny_pred = cat.predict(X_test)","2ba345da":"print(accuracy_score(Y_test, y_pred))","2949ba44":"from xgboost import XGBClassifier\nxgb = XGBClassifier(booster = 'gblinear', learning_rate = 1, n_estimators = 10)\nxgb.fit(X_train, Y_train)\ny_pred = xgb.predict(X_test)","d2d8f792":"print(accuracy_score(Y_test, y_pred))","e6d7a56d":"#### Totalcharges is given as object datatype but it is float datatype","b57292ef":">#### Few customers doesn't have phone service\n>#### Customers with multiple lines have a slightly higher churn rate\n#### Let's see how multiple lines affects the monthly charges:","7888a328":">#### Customers with paperless billing are more probable to churn\n>#### The preferred payment method is Electronic check with around 35% of customers. This method also has a very high churn rate\n>#### Short term contracts have higher churn rates","810a11b0":"># Prediction using support vector classifier","db8bca06":"# Steps Involved to predict customer Churn\n>#### Importing Libraries\n>#### Loading Dataset\n>#### Exploratory Data Analysis\n>#### Basic Data Cleaning\n>#### Exploring All Categorical Columns\n>#### Exploring all Numerical Columns\n>#### Multitable Analysis\n>#### Outliers using IQR method\n>#### Data Cleaning\n>#### One-hot Encoding\n>#### Rearranging Columns\n>### Prediction using\n>#### KNN classifier\n>#### Random Forest Classifier\n>#### Logistic Regression\n>#### Support Vector Classifier\n>#### Decision Tree Classifier\n>#### GridSearchCV (Hyper Parameter Tuning)\n>#### ADA Boost Classifier\n>#### Gradient Boosting Classifier\n>#### Stochastic Gradient Boosting (SGB)\n>#### Cat Boost Classifier\n>#### XGB Boost Classifier","54f72ee8":">#### Customers that doesn't have partners are more likely to churn\n>#### Customers without dependents are also more likely to churn","caa35768":">#### Most of the customers are having paperlessBilling\n>#### 59.2% (4171) of the customers are having paperlessBilling\n>#### 40.8% (2872) of the customers are not having paperlessBilling","c8f03871":">#### Gender is not an indicative of churn.\n>#### SeniorCitizens are only 16% of customers, but they have a much higher churn rate: 42% against 23% for non-senior customers.\n>#### There are no special relations between this categorical values and the main numerical features.","150441ca":">#### Most of the customers are not having StreamingTV\n>#### 39.9% (2810) of the customers are not having StreamingTV\n>#### 38.4% (2707) of the customers are having StreamingTV\n>#### 21.7% (1526) of the customers are not having any internet service","528165b0":"># Basic Data Cleaning","cd198bad":"># Data Cleaning","0b76b64f":"#### Customers without dependent churned more","d6302de4":"># Feature Scaling","c53740cd":"># Outliers Analysis with IQR Method","13d5a36b":">#### Most of the customers are not SeniorCitizen.\n>#### Number of customers without partners are 5901, 83.8% of the customers are not SeniorCitizen.\n>#### Number of customers with partners are 1142, 16.2% of the customers are SeniorCitizen.","ffe18a3c":"># Multi Table Analysis","150c82c5":"># Exploring Numerial Columns","cb49ea6e":">#### Most of the customers are having phone services\n>#### 90.3% (6361) of the customers are having phone services\n>#### 9.7% (682) of the customers are not having phone services","f61a5840":">#### Now let's look at the services that customers are using. There are only two main services: phone and internet but the former has many additionals like online backup and security.","151198cb":">#### Most of the customers are not having OnlineSecurity\n>#### 49.7% (3498) of the customers are not having OnlineSecurity\n>#### 28.7% (2019) of the customers are having OnlineSecurity\n>#### 21.7% (1526) of the customers are not having any internet service","a0046619":"># Prediction using KNN","da1f6fb8":">#### Most of the customers are not having Fiber Optic InternetService\n>#### 44% (3096) of the customers are having Fiber optic InternetService\n>#### 34.4% (2421) of the customers are having DSL InternetService\n>#### 21.7% (1526) of the customers are not having any InternetService service","f1930a59":">## Which gender is doing more churn","d5c8fc66":"># Exploratory Data Analysis","f85442c7":"># Gradient Boosting Classifier","0d26de76":"># Exploring all Categorical Columns","ac938af1":"#### Additional services","9af633d2":"#### The first plot shows the total number of customers for each additional service, while the second shows the number of clients that churn. We can see that:\n>#### Customers with the first 4 additionals (security to tech support) are more unlikely to churn\n>#### Streaming service is not predictive for churn","b5613ae8":"># Stochastic Gradient Boosting (SGB)","59e8118e":">## Partner and dependents","c991e23e":">#### Clients without internet have a very low churn rate\n>#### Customers with fiber are more probable to churn than those with DSL connection\n#### Comparing the Internet service with monthly charges:","a2d76ed9":">#### Most of the customers are not having StreamingMovies\n>#### 39.5% (2785) of the customers are not having StreamingMovies\n>#### 38.8% (2732) of the customers are having StreamingMovies\n>#### 21.7% (1526) of the customers are not having any internet service","2f5dc7dd":"># Prediction using Decisiontree","0c25343e":"># On-Hot Encoding","91a6fc2c":"># Cat boost Classifier","fe2b2834":"#### Most of the customers are staying only in between 0-5 months in the company","01886964":">#### Most of the customers are not having partners.\n>#### Number of customers without partners are 3641, 51.7% of the customers are not having partners\n>#### Number of customers with partners are 3402, 48.3% of the customers are not having partners.","c618b98c":"># Importing Libraries","6f06abd4":"># Feature Selection","6cae964d":">#### Most of the customers are not having DeviceProtection\n>#### 43.9% (3095) of the customers are not having DeviceProtection\n>#### 34.4% (2422) of the customers are having OnlineSecurity\n>#### 21.7% (1526) of the customers are not having any internet service","a99e85ce":"># XGB Classifier","83d02746":">#### Only 1% of female churned morethan male if we talk in number only 9 female churned morethan male.\n>#### 930 male churned while 939 femaale churned overall.","f418a2ab":">#### Most of the customers are not invloving Churn\n>#### 73.5% (5174) of the customers are not invloving in Churn\n>#### 26.5% (1869) of the customers are invloving in Churn\n>#### This is also looks like unbalanced data","62e88606":"#### Dropped customerId because it is not needed\n#### Dropped Churn because we had already encoded column Churn_rate","67661822":"#### Phone Services","da333c33":"># Boosting: ADA boost classifier","59e6a0ba":">#### Most of the customers are having Month-to-Month Contract\n>#### 55.0% (3875) of the customers are having Month-to-Month Contract\n>#### 24.1% (1695) of the customers are having Two year Contract\n>#### 20.9% (1473) of the customers are having One year Contract","6d67a763":">#### We can clearly see here that male customers are more than female customres but not with big difference. In terms of numbers **67** male customers are more and in percentage **0.5%** male customers are more .","77ab0558":">#### Most of the customers are not having OnlineBackup\n>#### 43.8% (3498) of the customers are not having OnlineBackup\n>#### 34.5% (2019) of the customers are having OnlineSecurity\n>#### 21.7% (1526) of the customers are not having any internet service","0608929a":"># Rearranging Columns","9c887860":"#### 33% of people without partners churned","3e39c729":">## Phone and Internet services","2a69238e":"#### Internet services","1346792a":">#### Most of the customers are not having Multiplelines\n>#### 48.1% (3390) of the customers are not having Multiplelines\n>#### 42.2% (2971) of the customers are having Multiplelines\n>#### 9.7% (682) of the customers are not having any phone service","5869dbc7":">#### Most of the customers are not having TechSupport\n>#### 49.3% (3473) of the customers are not having TechSupport\n>#### 29.0% (2044) of the customers are having TechSupport\n>#### 21.7% (1526) of the customers are not having any internet service","f461aaa9":"># Loading Dataset","02e70a1d":"#### Contract and Payment","3bc537d3":"#### Most of the customers having Monthly charges in between 20-25","441908f6":">#### Most of the people are not having dependents for them\n>#### 70.0% (4933) of customers are not having dependents\n>#### 30.0% (2110) of customers are having dependents","1189389b":">#### Most of the customers are having Electronic check PaymentMethod\n>#### 33.6% (2365) of the customers are having Electronic check PaymentMethod\n>#### 22.9% (1695) of the customers are having Mailed check PaymentMethod\n>#### 21.9% (1544) of the customers are having Bank transfer(automatic) check PaymentMethod\n>#### 21.6% (1522) of the customers are having Credit Card(automatic) check PaymentMethod","dd59caa9":"># Hyper parameter Tuning","63f65e9b":">#### Intresting fact here is 42% of the old citizens are churned","037b1780":"#### There are only two features here: if the client has phone and if he has more than one line. Both can be summed up in one chart:","a3f37988":">#### It's interesting how customers with DSL (slower connection) and higher charges are less probable to churn.","61efa904":"># Prediction using Logistic Regression"}}