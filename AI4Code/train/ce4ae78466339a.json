{"cell_type":{"dc611cea":"code","f8d4765b":"code","5104a831":"code","617dde5e":"code","6fe5b581":"code","61abaa5e":"code","e538a247":"code","2affc303":"code","8e2aa446":"code","2555c4ae":"code","00afb4a1":"code","99bbe06f":"code","a412e6a9":"code","79bb30c3":"markdown"},"source":{"dc611cea":"import pandas as pd\n\n#best practice to import our data is using _filepath\n\ntrain_filepath = \"..\/input\/titanic\/train.csv\"\ntest_filepath = \"..\/input\/titanic\/test.csv\"\ntrain_data = pd.read_csv(train_filepath)\ntest_data = pd.read_csv(test_filepath)","f8d4765b":"# jadi kita bakal intip dulu data yang mau kita kasi makan ke modelnya (fitting)\n# dan data yang mau kita test. fit=train_data , test=test_data\n\n#jalanin 1 1 ya\ntrain_data.head() \n# test_data.head() ","5104a831":"# selanjutnya kita cek nih, kalau kita liat\n# pas datanya di describe, kita bsa liat kalo ada\n# data yang NaN\/NULL di kolom age\n# yang lain 891 data tapi age cuma 714\n\ntrain_data.describe()\n\n# bisa diliat di index 5 itu ada yang NaN ya\ntrain_data['Age'].head(10)","617dde5e":"# untuk mengatasi masalah di atas, kita pakai\n# fillna aja, dan kita akan fill dengan nilai tengah Age nya aja\n\ntrain_data['Age'] = train_data['Age'].fillna(train_data['Age'].median())\ntrain_data.head(10)\n\n\n# kita juga harus fillna data yang mau di uji ya\ntest_data['Age'] = test_data['Age'].fillna(test_data['Age'].median())","6fe5b581":"# UPDATE\n# aku bakal fillna ke kolom embarked\n\ntrain_data['Embarked'] = train_data['Embarked'].fillna('S')\ntest_data['Embarked'] = test_data['Embarked'].fillna('S')","61abaa5e":"# UPDATE\n# fillna lagi ke kolom fare wkwkw\n\ntrain_data['Fare']= train_data['Fare'].fillna(train_data['Fare'].median())\ntest_data['Fare']= test_data['Fare'].fillna(train_data['Fare'].median())","e538a247":"# UPDATE\n# jadi rupanya sex nya pengaruh nya banyak, jadi ku configure si sexnya jadi 1 or 0\n# biar ntr bisa di fitting, krna string gbsa di fitting kalo gk salah\n\ntrain_data['Sex'] = train_data['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\ntest_data['Sex'] = test_data['Sex'].map( {'female': 0, 'male': 1} ).astype(int)","2affc303":"# MORE UPDATE\n# aku juga bakal tandain embarked nya juga kayaknya pakai mapping\n\ntrain_data['Embarked'] = train_data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ntest_data['Embarked'] = test_data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","8e2aa446":"from sklearn.tree import DecisionTreeRegressor\n\n# jadi kita bakal coba predict data sendiri dulu ya \n# buat testing key yang kita ambil itu bener apa gak\n# jadi si Y ini gunanya menandakan data yang mau kita predict\ntrain_y = train_data['Survived']\n\n# lalu si X ini, bakal jadi dasar, jadi kita mw predict si Y itu berdasar apa\n# nah di kasus ini aku pake 2 kolom yaitu Pclass sama Age(yang barusan kita fillna juga)\n# train_feature = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ntrain_feature = ['Pclass','Sex','Age','SibSp','Parch']\n\ntrain_x = train_data[train_feature]\n\n# sekarang kita bisa bikin model tree regressor nya\ntrain_model = DecisionTreeRegressor(random_state = 1)\n\n# kemudian stlh kita buat modelnya, kita kasi makan data nya\ntrain_model.fit(train_x, train_y)\n\n# baru kita coba force print predict\n# NB: itu akurat krna kita predict data sendiri\nprint(train_model.predict(train_x.head()).tolist())\nprint(train_y.head().tolist())","2555c4ae":"from sklearn.tree import DecisionTreeRegressor\n\n# nah sekarang kita bakal coba predict data nya ya langsung menuju test data\n# test_feature = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ntest_feature = ['Pclass','Sex','Age','SibSp','Parch']\n\ntest_x = test_data[test_feature]\n\n# kalau km notice, itu data yang keluar bakalan float, nah itu gak sesuai\n# dengan yang diminta soal karna soal minta 1\/0. \n# itu kan tandanya masih belum akurat ya data hasil predict kita,\nprint(train_model.predict(test_x))\n","00afb4a1":"# jadi kita bakal pakai DecisionTreeClassifier buat dapat nilai antara \n\nfrom sklearn.tree import DecisionTreeClassifier\nimport pandas as pd\n\nclassifier_train_model = DecisionTreeClassifier(random_state = 1)\nclassifier_train_model.fit(train_x, train_y)\nprediction = classifier_train_model.predict(test_x)\n\noutput = pd.DataFrame({'PassengerId':test_data['PassengerId'] , 'Survived':prediction})\noutput\n\n# lalu di output\noutput.to_csv('ans5.csv', index=False)","99bbe06f":"# TESTING pakai RandomForestClassifier\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nforest_model = RandomForestClassifier(random_state = 1)\nforest_model.fit(train_x, train_y)\nforest_prediction = forest_model.predict(test_x)\n\nforest_output = pd.DataFrame({'PassengerId':test_data['PassengerId'], 'Survived':prediction})\nforest_output\nforest_output.to_csv('forest.csv',index=False)","a412e6a9":"trainData = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntestData = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\nfrom sklearn.ensemble import RandomForestClassifier\n\ny = trainData[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\n\nX= trainData[features]\nX_test = testData[features]\n\nX['Sex'] = X['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\nX_test['Sex'] = X_test['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n\nmodel = RandomForestClassifier(max_depth = 5,random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': testData['PassengerId'], 'Survived': predictions})\noutput\n# output.to_csv('asu.csv', index=False)\n","79bb30c3":"Submission'e cornel"}}