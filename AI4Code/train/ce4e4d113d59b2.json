{"cell_type":{"47ce8995":"code","e6323bad":"code","d974cd9c":"code","4e3ab4db":"code","0c5ff184":"code","43e74afb":"code","2c2049f3":"code","6ddc5a96":"markdown"},"source":{"47ce8995":"!pip install pycairo","e6323bad":"import cairo\nfrom IPython.display import Image, display\nfrom math import pi\nfrom io import BytesIO\nimport os\n\ndef disp(draw_func):\n    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 800, 800)\n    ctx = cairo.Context(surface)\n    draw_func(ctx, 800, 800)\n    with BytesIO() as fileobj:\n        surface.write_to_png(fileobj)\n        display(Image(fileobj.getvalue(), width=800))\n\nd2r = pi \/ 180","d974cd9c":"def draw_triangle(cr, width, height):\n    cr.scale(width, height)\n    sk = 0.1\n    cr.set_line_width(0.02)\n    cr.move_to(0 + sk, 1 - sk)\n    cr.line_to(1 - sk, 1 - sk)\n    cr.line_to(0.5, 0 + sk)\n    cr.line_to(0 + sk, 1 - sk)\n    cr.close_path()\n    cr.stroke()\n    return\n\ndisp(draw_triangle)","4e3ab4db":"def draw_bar(cr, width, height):\n    cr.scale(width, height)\n    cr.set_line_width(0.1)\n    cr.move_to(0, 0.5)\n    cr.line_to(1, 0.5)\n    cr.stroke()\n    return\n\ndisp(draw_bar)","0c5ff184":"def draw_weight(cr, width, height):\n    cr.scale(width, height)\n    sk = 0.05\n    r1 = 0.1\n    r2 = 0.05\n    cr.set_line_width(0.02)\n    cr.move_to(0 + sk + 0.25, 1 - sk)\n    cr.line_to(1 - sk - 0.25, 1 - sk)\n    cr.line_to(1 - sk - 0.25, 1 - sk - 0.5)\n    cr.arc(1 - sk - 0.25, 1 - sk - 0.5 - r1, r1, 90 * d2r, 270 * d2r)\n    cr.line_to(1 - sk - 0.25, 1 - sk - 0.5 - 3 * r1)\n    cr.line_to(0 + sk + 0.25, 1 - sk - 0.5 - 2 * r1 - 2 * r2)\n    cr.line_to(0 + sk + 0.25, 1 - sk - 0.5 - 3 * r1)\n    cr.arc(0 + sk + 0.25, 1 - sk - 0.5 - r1, r1, 270 * d2r, 90 * d2r)\n    cr.line_to(0 + sk + 0.25, 1 - sk)\n    cr.close_path()\n    cr.stroke()\n    return\n\ndisp(draw_weight)","43e74afb":"def draw_scale(cr, width, height,pl=5, wl=5, pr=5, wr=5):\n    cr.scale(width, height)\n    \n    # Triangule\n    cr.set_line_width(0.004)\n    cr.move_to(0.45, .6)\n    cr.line_to(0.55, .6)\n    cr.line_to(0.5, .5)\n    cr.line_to(0.45, .6)\n    cr.close_path()\n    cr.stroke()\n    \n    # Bar\n    cr.set_line_width(0.008)\n    cr.move_to(0, .49)\n    cr.line_to(1, .49)\n    cr.stroke()\n    \n    # Left Weight\n    cr.set_line_width(0.002)\n    r1 = .01 * (wl\/5)\n    p_sc = .098 * pl\n    ini_x = .5 - p_sc\n    ini_y = .48\n    siz = .08 * (wl\/5)\n    siz_x = .05 * (wl\/5)\n    d_90 = 90 * d2r\n    d_270 = 270 * d2r\n    \n    cr.move_to(ini_x, ini_y)\n    cr.line_to(ini_x + siz_x, ini_y)\n    cr.line_to(ini_x + siz_x, ini_y - siz)\n    cr.arc(ini_x + siz_x, ini_y - siz - r1, r1, d_90, d_270)\n    cr.line_to(ini_x + siz_x, ini_y - siz - 3 * r1)\n    cr.line_to(ini_x, ini_y - siz - 3 * r1)\n    cr.line_to(ini_x, ini_y - siz - 2 * r1)\n    cr.arc(ini_x, ini_y - siz - r1, r1, d_270, d_90)\n    cr.line_to(ini_x, ini_y)\n    cr.close_path()\n    \n    # Right Weight\n    r1 = .01 * (wr\/5)\n    p_sc = .098 * pr\n    ini_x = .5 + p_sc\n    ini_y = .48\n    siz = .08 * (wr\/5)\n    siz_x = .05 * (wr\/5)\n    \n    cr.move_to(ini_x, ini_y)\n    cr.line_to(ini_x - siz_x, ini_y)\n    cr.line_to(ini_x - siz_x, ini_y - siz)\n    cr.arc_negative(ini_x - siz_x, ini_y - siz - r1, r1, d_90, d_270)\n    cr.line_to(ini_x - siz_x, ini_y - siz - 3 * r1)\n    cr.line_to(ini_x, ini_y - siz - 3 * r1)\n    cr.line_to(ini_x, ini_y - siz - 2 * r1)\n    cr.arc_negative(ini_x, ini_y - siz - r1, r1, d_270, d_90)\n    cr.line_to(ini_x, ini_y)\n    cr.close_path()\n    \n    cr.stroke()\n    return \n\ndisp(draw_scale)","2c2049f3":"for i in range(1, 6):\n    for j in range(1, 6):\n        for k in range(1, 6):\n            for n in range(1, 6):\n                filename = f'LD_{i}_LW_{j}_RD_{k}_RW_{n}.png'\n                surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 800, 800)\n                ctx = cairo.Context(surface)\n                draw_scale(ctx, 800, 800, i, j, k, n)\n                surface.write_to_png(filename)\n                print(filename, 'done! ')","6ddc5a96":"This notebook presents the process of generating the balance scale images. For that, I use the PyCario library, due to its flexibility."}}