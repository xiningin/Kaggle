{"cell_type":{"22b5f7c2":"code","e624407d":"code","4671043a":"code","477d5639":"code","76d06bca":"code","a3183880":"code","d6205cc5":"code","cf19f795":"code","35890c1a":"code","bc747607":"code","b6b03501":"code","be01740d":"code","ef1e2042":"code","b093c82e":"markdown","3c72518a":"markdown","aa2577a2":"markdown","ebea4c33":"markdown","aa7fc13e":"markdown","243dff57":"markdown","134db8b0":"markdown","21098029":"markdown","03785e08":"markdown","7913644a":"markdown","b3f50993":"markdown","aba0f105":"markdown","48f89584":"markdown","3547f350":"markdown","75e53f1b":"markdown","d3e660b8":"markdown"},"source":{"22b5f7c2":"pip install highlight_text","e624407d":"import pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nimport matplotlib.patheffects as path_effects\nimport matplotlib.patches as mpatches\nimport matplotlib.image as mpimg\nfrom matplotlib import rcParams\nfrom matplotlib.patches import Arc\nimport numpy as np\nfrom highlight_text import fig_text\nimport seaborn as sns\nimport requests\nimport re\nfrom bs4 import BeautifulSoup\nimport json","4671043a":"pip install highlight-text","477d5639":"# Entering the league's  link\nlink = \"https:\/\/understat.com\/league\/La_liga\"\nres = requests.get(link)\nsoup = BeautifulSoup(res.content,'lxml')\nscripts = soup.find_all('script')\n# Get the table \nstrings = scripts[3].string \n# Getting rid of unnecessary characters from json data\nind_start = strings.index(\"('\")+2 \nind_end = strings.index(\"')\") \njson_data = strings[ind_start:ind_end] \njson_data = json_data.encode('utf8').decode('unicode_escape')\ndata = json.loads(json_data)\n\n# Creating a dataframe\ndf = pd.DataFrame(data)\n\n# Filtering the data \ndf = df[['player_name','team_title','goals','assists','xG','xA']]\ndf = df.astype({\"xG\": float, \"goals\": int, \"assists\": int, \"xA\": float, \"team_title\": str,'player_name':str})\n","76d06bca":"# Getting the 2 best goalscorers \ndf = df.set_index('player_name').groupby('team_title')['goals'].nlargest(2).reset_index()","a3183880":"df.head(5)","d6205cc5":"# Eliminating player duplicates\ndf = df[~df.team_title.str.contains(\",\")]","cf19f795":"df","35890c1a":"# sorting the dataframe \ndf = df.sort_values(['goals','team_title'],ascending=False)\n","bc747607":"#New column for bool value\ndf['bool'] = df['team_title'].duplicated(keep='first')\n\n# cleaning the title names \ndf['team_title'] = df['team_title'].str.replace('Real Madrid','Madrid')\ndf['team_title'] = df['team_title'].str.replace('Real Sociedad','Sociedad')\ndf['team_title'] = df['team_title'].str.replace('Real Betis','Betis')\n\n# Creating new columns for shortening team names\ndf['names'] = df['team_title'].str[0:3]\n\n# Capital letters for team names\ndf['names'] = df['names'].str.upper()","b6b03501":"# Sorting values\ndf = df.sort_values(['names'],ascending=True)\n# Dividing the DataFrames in highest goalscorer and second highest goalscorer\ndf_min = df[df['bool']==True] # Highest\ndf_max = df[df['bool']==False] # Second Highest\n","be01740d":"# plot style \nplt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize = (16,8))\n\n# plotting\nax.scatter(df_min['names'],df_min['goals'], color='tomato', edgecolor='black',s=655, label=\"Second Best Scorer\")\nax.scatter(df_max['names'],df_max['goals'], color='cyan', edgecolor='black',s=655, label=\"First Best Scorer\")\n\n# title\nfig_text(0.08,0.94, s=\" <1st Goalscorer> and <2nd Goalscorer>\",highlight_textprops=[{\"color\":'cyan'}, {'color':\"tomato\"}], fontsize = 23, fontweight=\"light\", color = \"black\")\nfig_text(0.08,0.99, s=\" La Liga | Season 2021\/2020 \", fontsize = 25, fontweight=\"light\")\n\n# text\nfig_text(0.5,0.01, s=\"Teams\\n\", fontsize = 28, fontweight = \"bold\", color = \"black\")\nfig_text(0.01,0.6, s=\"Goals Scored\\n\", fontsize = 28, fontweight = \"bold\", color = \"black\",rotation=90)\nplt.yticks([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30])\n\n\n# Horizontal lines\nplt.vlines( ymin=df_min['goals'], ymax=df_max['goals'],x=df_max['names'], color='black', alpha=0.2,linestyle=\"solid\")\n\n# Annotate text goals\nfor i in range(len(df_min['goals'].tolist())):\n    plt.annotate(df_min['goals'].tolist()[i], (df_min['names'].tolist()[i],df_min['goals'].tolist()[i]),c='black',size=12,ha='center',va='center')\nfor i in range(len(df_max['goals'].tolist())):\n    plt.annotate(df_max['goals'].tolist()[i], (df_max['names'].tolist()[i],df_max['goals'].tolist()[i]),c='black',size=12,ha='center',va='center')    \n\n# Annotate text player names\nfor i in range(len(df_max['goals'].tolist())):\n    plt.annotate(df_max['player_name'].tolist()[i], (df_max['names'].tolist()[i],df_max['goals'].tolist()[i]+1),c='cyan',size=13,ha='center',va='center')  \nfor i in range(len(df_min['goals'].tolist())):\n    plt.annotate(df_min['player_name'].tolist()[i], (df_min['names'].tolist()[i],df_min['goals'].tolist()[i]-1.2),c='tomato',size=13,ha='center',va='center')  \n","ef1e2042":"# plot style \nplt.style.use('fivethirtyeight')\nfig,ax = plt.subplots(figsize = (16,8))\n\n# plotting\nax.scatter(df_min['names'],df_min['goals'], color='tomato', edgecolor='black',s=955, label=\"Second Best Scorer\")\nax.scatter(df_max['names'],df_max['goals'], color='cyan', edgecolor='black',s=955, label=\"First Best Scorer\")\n\n# Horizontal lines\nplt.vlines( ymin=df_min['goals'], ymax=df_max['goals'],x=df_max['names'], color='black', alpha=0.2,linestyle=\"solid\")\n\n# title\nfig_text(0.08,0.92, s=\" <1st Goalscorer> and <2nd Goalscorer>\",highlight_textprops=[{\"color\":'cyan'}, {'color':\"tomato\"}], fontsize = 23, fontweight=\"light\", color = \"black\")\nfig_text(0.08,0.97, s=\" La Liga | Season 2021\/2020 \", fontsize = 25, fontweight=\"light\")\n\n# text\nfig_text(0.5,0.01, s=\"Teams\\n\", fontsize = 28, fontweight = \"bold\", color = \"black\")\nfig_text(0.01,0.6, s=\"Goals Scored\\n\", fontsize = 28, fontweight = \"bold\", color = \"black\",rotation=90)\nplt.yticks([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30])\n\n# Annotate text goals\nfor i in range(len(df_min['goals'].tolist())):\n    plt.annotate(df_min['goals'].tolist()[i], (df_min['names'].tolist()[i],df_min['goals'].tolist()[i]),c='black',size=13,ha='center',va='center')\nfor i in range(len(df_max['goals'].tolist())):\n    plt.annotate(df_max['goals'].tolist()[i], (df_max['names'].tolist()[i],df_max['goals'].tolist()[i]),c='black',size=13,ha='center',va='center')    \n\n    # legend\nlegend = ax.legend(loc=\"upper center\")\nlegend.legendHandles[0]._sizes = [1000]\nlegend.legendHandles[1]._sizes = [1000]","b093c82e":"<a id=\"3.1\"><\/a>\n## Groupby team and goals\nNow let's group the dataframe by teams and then using the function nlargest we'll obtain the 2 best goalscorers in each team :","3c72518a":"In order to represent the 2 best goalscorers we must separate them in 2 different dataframes ,  the best goalscorers for example Messi and the second best goalscorers, in this case Griezmann.\n\nThere is also an issue of length for the names of the teams, They must be shorten up to only 3 letters to fit the the plot, and here we run into another problem is that several teams start with the same name such as **Real** Betis, **Real** Madrid, **Real** Sociedad , therefore We cannot have 4 different teams with REA as their shorten names, so we must replace their names with the name of the city rather than their first name , such as Madrid instead of Real Madrid, Sociedad instead of Real Sociedad :  ","aa2577a2":"<a id=\"4.1\"><\/a>\n## Part I","ebea4c33":"<a id=\"4.2\"><\/a>\n## Part II","aa7fc13e":"<a id=\"1.1\"><\/a>\n# Notebook content\n* [1. Introduction](#1.)\n    - [1.1. Notebook Content.](#1.1)\n* [2. Importing libraries.](#2.)\n* [3. Scraping La Liga player stats.](#3.)\n    - [3.1. Groupby teams and goals.](#3.1)\n* [4. Plotting top 2 Goalscorers](#4.)\n   -  [4.1. Divergin bars.](#4.1)\n   -  [4.2. Diverging bars with text](#4.2)\n","243dff57":"Now let's sort the dataframe by the team name and by the number of goals scored :","134db8b0":"<a id=\"3.2\"><\/a>\n## Eliminating duplicates","21098029":"<a id=\"4.\"><\/a>\n# Plotting Top 2 Goalscorers \nNow let's go ahead and plot the top 2 goalscorers and also add the names of the players : ","03785e08":"<a id=\"2.\"><\/a>\n# Importing Libraries","7913644a":"# Understat Series : Top 2 Goalscorers\n\n\n**By Jose Gonzalez**\n![image.png](attachment:image.png)\n","b3f50993":"Now let's sort the dataframe by the goals scored : ","aba0f105":"And now we do not have more duplicates, players that played for several teams.","48f89584":"<a id=\"3.\"><\/a>\n# Scraping La Liga player stats\nLet's start by scraping the statistics from La Liga players , xG, Goals, assists etc. Then we proceed by filtering so we won't have as many columns.","3547f350":"Ooops , here is a problem, some players have played for 2 different teams in La liga as you can see with I\u00f1igo C\u00f3rdoba and Adri\u00e1n Mar\u00edn , We cannot have that ,so in order to eliminate let's get rid of every row containing the\",\" character,  because as you can see, that's how the players that played for different teams are represented : ","75e53f1b":"It does seem a bit too loaded so now let's try it without the names","d3e660b8":"<a id=\"1.\"><\/a>\n# Introduction\nInspired by this [tweet](https:\/\/twitter.com\/jonollington\/status\/1369689519872675843) by Jon Ollington , I've decided I will try to replicate by scraping , cleaning and then plotting from Understat.\n\nHere are some of the other notebooks created for the Understat Series :\n\n1. [Understat Series : Webscraping of Understat using the Beautiful Soup](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-beautiful-soup)\n2. [Understat Series : Understat package](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-understat-package)\n\n3. [Understat Series : Webscraping using Selenium](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-selenium)\n\n4. [Understat Series : Webscraping using for loops](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-webscraping-using-for-loops)\n\n5. [Understat Series : Probabilities and Random](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-probabilities-and-random)\n\n6. [Understat Series : Diverging plots](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-diverging-plots)\n\n7. [Understat Series : xG Rolling averages](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-rolling-averages)\n\n8. [Understat Series : xG Flow Chart](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-xg-flow-chart)\n\n9. [Understat Series : Shotmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-shotmaps)\n\n10. [Understat Series : Heatmaps](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-heatmaps)\n\n11. [Understat Series : Top 2 Goalscorers](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-top-2-goalscorers)\n\n12. [Understat Series : Dashboards](https:\/\/www.kaggle.com\/josegabrielgonzalez\/understat-series-dashboards)"}}