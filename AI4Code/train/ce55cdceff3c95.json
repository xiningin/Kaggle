{"cell_type":{"38588cf4":"code","bab56098":"code","fb0002c3":"code","9a7e4821":"code","15b396f5":"code","230b07e1":"code","d0be495a":"code","a623727d":"code","3c2b7983":"code","26e10a40":"markdown","2ed050f3":"markdown"},"source":{"38588cf4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torch\nimport os\nimport time\nimport shutil\nimport torch.nn as nn\nfrom skimage import io\nimport torchvision\nimport cv2\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor\nfrom torchvision.models.detection import FasterRCNN\nfrom torchvision.models.detection.rpn import AnchorGenerator\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.utils.data.sampler import SequentialSampler\nfrom albumentations.pytorch import ToTensor\nfrom torchvision import utils\nfrom albumentations import (HorizontalFlip, ShiftScaleRotate, VerticalFlip, Normalize,\n                            Compose, GaussNoise)\n\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n","bab56098":"csv_path = '\/kaggle\/input\/global-wheat-detection\/train.csv'\ntest_dir = '\/kaggle\/input\/global-wheat-detection\/test'","fb0002c3":"def get_transforms():\n            list_transforms = []\n            list_transforms.extend(\n                    [\n        \n            ToTensor(),\n                    ])\n            list_trfms = Compose(list_transforms)\n            return list_trfms","9a7e4821":"class Wheatset(Dataset):\n    def __init__(self,image_dir):\n        super().__init__()\n   \n        self.image_dir = image_dir\n        self.images = os.listdir(image_dir)\n        self.transforms = get_transforms()\n        \n        \n    def __len__(self):\n        return len(self.images)\n    \n    def __getitem__(self,idx):\n        image = self.images[idx]\n        image_arr = io.imread(os.path.join(self.image_dir,image))\n        image_id = str(image.split('.')[0])\n        \n        if self.transforms:\n            sample = {\n                'image': image_arr,\n            }\n            sample = self.transforms(**sample)\n            image = sample['image']\n               \n        return image, image_id","15b396f5":"def collate_fn(batch):\n    return tuple(zip(*batch))\ntest_dir = '\/kaggle\/input\/global-wheat-detection\/test'\n\ntest_dataset = Wheatset(test_dir)\n\ntest_data_loader = DataLoader(\n    test_dataset,\n    batch_size=4,\n    shuffle=False,\n    num_workers=4,\n    drop_last=False,\n    collate_fn=collate_fn\n)","230b07e1":"device = torch.device('cpu')\n\n\n# load a model; pre-trained on COCO\nmodel = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False, pretrained_backbone=False)\n    \nnum_classes = 2  # 1 class (wheat) + background\n\n# get number of input features for the classifier\nin_features = model.roi_heads.box_predictor.cls_score.in_features\n\n# replace the pre-trained head with a new one\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\n\n# Load the trained weights\nweights = '\/kaggle\/input\/faster-rcnn-with-psudo-labeling-pytorch\/psudomodel.pt'\n\ncheckpoint = torch.load(weights,map_location=device)\nmodel.load_state_dict(checkpoint['state_dict'])\nmodel.eval()\n\nx = model.to(device)","d0be495a":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n\n    return \" \".join(pred_strings)\n\n\n\n\ndetection_threshold = 0.5\nresults = []\nfor images, image_ids in test_data_loader:\n\n    images = list(image.to(device) for image in images)\n    outputs = model(images)\n    \n    for i, image in enumerate(images):\n\n        boxes = outputs[i]['boxes'].data.cpu().numpy()\n        scores = outputs[i]['scores'].data.cpu().numpy()\n        \n        boxes = boxes[scores >= detection_threshold].astype(np.int32)\n        scores = scores[scores >= detection_threshold]\n        image_id = image_ids[i]\n        \n        boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n        boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n        \n        result = {\n            'image_id': image_id,\n            'PredictionString': format_prediction_string(boxes, scores)\n        }\n     \n        results.append(result)\n","a623727d":"final_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\nfinal_df.head()","3c2b7983":"final_df.to_csv('submission.csv', index=False)","26e10a40":"* This is an inference kernel.You can refer my [training kernel](http:\/\/https:\/\/www.kaggle.com\/arunmohan003\/fasterrcnn-using-pytorch-baseline) for training the model.","2ed050f3":"Refernece: https:\/\/www.kaggle.com\/pestipeti\/pytorch-starter-fasterrcnn-inference\/data\nThanks @Peter for your inference kernel.\n\n###  **If you find this notebook helpful please do upvote.**"}}