{"cell_type":{"cab55fab":"code","45c182ff":"code","7213ae28":"code","a404c5d4":"code","6881362b":"code","78803c45":"code","c74da95a":"code","52fbb89e":"code","80eefcad":"code","10341e0c":"code","1993cb29":"code","42138572":"code","dbddce6c":"code","571f0b7f":"code","66ddcb25":"code","838b286d":"code","cad70247":"code","6ebe6070":"code","d7860a56":"code","994f72d5":"code","11249290":"code","d925fecc":"code","991dca83":"code","0424e700":"code","ffdff681":"code","871433c9":"code","4e15ece2":"markdown","096a7800":"markdown","5263aaa0":"markdown","99cfa72e":"markdown","f8902c01":"markdown","0a753c8e":"markdown","e97f73e9":"markdown","38e0ebaa":"markdown","c7ee1163":"markdown","38c7baea":"markdown","ba4d7c5d":"markdown","538e0b73":"markdown","22c101e9":"markdown"},"source":{"cab55fab":"import torch\nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import DataLoader\nfrom torch.utils.data import Dataset","45c182ff":"class SimpleNN(nn.Module):\n    def __init__(self, model_size, num_of_classes):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(model_size, 48)\n        self.fc2 = nn.Linear(48, num_of_classes)\n    \n    def forward(self, x):\n        out = self.fc1(x)\n        out = F.relu(out)\n        out = self.fc2(out)\n        return out","7213ae28":"class SimpleCNN(nn.Module):\n    def __init__(self, in_channels=1, classes=10):\n        super(SimpleCNN, self).__init__()\n        \n        self.conv1 = nn.Conv2d(\n            in_channels=in_channels,\n            out_channels=8, \n            padding=(1,1), \n            kernel_size=(3,3), \n            stride=(1,1)) # same convolution, input will be same as output\n        \n        self.conv2 = nn.Conv2d(\n            in_channels=8, \n            out_channels=16, \n            padding=(1,1), \n            kernel_size=(3,3), \n            stride=(1,1))\n        \n        self.pool = nn.MaxPool2d(kernel_size=(2,2), stride=(2,2))\n        self.fc1 = nn.Linear(16*7*7, classes)\n    \n    def forward(self, x):\n        out = F.relu(self.conv1(x))\n        out = self.pool(out)\n        out = F.relu(self.conv2(out))\n        out = self.pool(out)\n        out = out.reshape(out.shape[0], -1)\n        out = self.fc1(out)\n        return out\n        \n        ","a404c5d4":"class CNN(nn.Module):\n    def __init__(self, in_channels=1, num_classes=10):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(\n            in_channels=in_channels,\n            out_channels=8,\n            kernel_size=(3, 3),\n            stride=(1, 1),\n            padding=(1, 1),\n        )\n        self.pool = nn.MaxPool2d(kernel_size=(2, 2), stride=(2, 2))\n        self.conv2 = nn.Conv2d(\n            in_channels=8,\n            out_channels=16,\n            kernel_size=(3, 3),\n            stride=(1, 1),\n            padding=(1, 1),\n        )\n        self.fc1 = nn.Linear(16 * 7 * 7, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = self.pool(x)\n        x = F.relu(self.conv2(x))\n        x = self.pool(x)\n        x = x.reshape(x.shape[0], -1)\n        x = self.fc1(x)\n        return x","6881362b":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","78803c45":"num_epochs = 5\nlearning_rate = 0.001\nbatch_size=64\n# input_size=784\nin_channels=1\nnum_of_classes=10\n","c74da95a":"# try:\n#     train_dataset = datasets.MNIST(root='.\/dataset\/', download=True, train=True, transform=transforms.ToTensor())\n#     test_dataset = datasets.MNIST(root='.\/dataset\/', download=True, train=False, transform=transforms.ToTensor())\n#     train_dataloader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)\n#     test_dataloader = DataLoader(dataset = test_dataset, batch_size=batch_size, shuffle=True)\n# except Exception as e:\n#     print(e)\n    ","52fbb89e":"import numpy as np","80eefcad":"# xy = np.loadtxt('..\/input\/mnist-in-csv\/mnist_train.csv', delimiter=\",\", dtype=np.float32, skiprows=1)\n# x = xy[:,1:]\n# y = xy[:,[0]]\n# print(x, y)\n    ","10341e0c":"import pandas as pd\n\ndd = pd.read_csv('..\/input\/mnist-in-csv\/mnist_train.csv', dtype=np.float)\ndd.head()","1993cb29":"y_dash = torch.from_numpy(dd.iloc[:,0].values) # y\ny_dash","42138572":"type(y_dash)","dbddce6c":"dd.shape","571f0b7f":"x_dash = torch.from_numpy(dd.iloc[:,1:].values)\n\n# x_dash[0]","66ddcb25":"type(x_dash)","838b286d":"x_d = x_dash.reshape(x_dash.size(0), 1, 28,28)\nx_d.shape","cad70247":"import numpy as np\n\nclass MnistDataset(Dataset):\n    def __init__(self, data_path):\n        # data loading\n        df = pd.read_csv(data_path, dtype=np.float)\n        self.x = torch.from_numpy(df.iloc[:,1:].values)\n        \n        self.x = self.x.reshape(self.x.size(0),1,28,28)\n        self.x = self.x.float() # why float?\n        \n        self.y = torch.from_numpy(df.iloc[:,0].values) \n        self.y = self.y.long() # why long?\n        \n        self.n_samples = df.shape[0]\n        \n    def __len__(self):\n        return self.n_samples\n    \n    def __getitem__(self, index):\n        return self.x[index], self.y[index]\n        ","6ebe6070":"train_dataset = MnistDataset(\"..\/input\/mnist-in-csv\/mnist_train.csv\")\ntrain_dataloader = DataLoader(dataset=train_dataset, batch_size=batch_size,shuffle=True)\n\ntest_dataset = MnistDataset(\"..\/input\/mnist-in-csv\/mnist_test.csv\")\ntest_dataloader = DataLoader(dataset=test_dataset, batch_size=batch_size,shuffle=True)\n","d7860a56":"first = train_dataset[0]\nfeatures, label = first\n# print(features, label)","994f72d5":"type(features)","11249290":"model = SimpleCNN().to(device=device) # to device?","d925fecc":"#testing\nx = torch.randn(64,1,28,28).to(device=device)\ny = model(x)\ny.shape","991dca83":"loss_criterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=learning_rate)","0424e700":"current_loss = 0\nfor epoch in range(num_epochs):\n    for batch_idx, (data, targets) in enumerate(train_dataloader):\n        # Get data to cuda if possible\n        data = data.to(device=device)\n        targets = targets.to(device=device)\n        \n#         data = data.reshape((data.shape[0],1,28,28))\n#         print(f\"data shape: {data.shape}\")\n\n        # forward\n        scores = model(data)\n        loss = loss_criterion(scores, targets)\n        current_loss = loss\n        \n        # backward\n        optimizer.zero_grad()\n        loss.backward()\n\n        # gradient descent or adam step\n        optimizer.step()\n    \n    print(f\"At epoch: {epoch}, loss: {current_loss}\")","ffdff681":"def check_accuracy(model, dataloader):\n    \n    total_sample = 0\n    correct_sample = 0\n    \n    model.eval()\n    \n    with torch.no_grad():\n        for x, y in dataloader:\n            x = x.to(device=device)\n            y = y.to(device=device)\n            \n#             x = x.reshape(x.shape[0], -1)\n            \n            scores = model(x)\n            _, predictions = scores.max(1)\n            correct_sample += (y==predictions).sum()\n            total_sample += predictions.size(0)\n            \n    model.train()\n    \n    print(f\"out of total sample : {total_sample}  correct sample : {correct_sample} accuracy : {float(correct_sample\/total_sample)*100:.2f}\")\n            \n    ","871433c9":"check_accuracy(model, train_dataloader)\ncheck_accuracy(model, test_dataloader)","4e15ece2":"# Learning Pytorch\nThis series would be taken from various tutorial available in youtube.\n\n## 1 : Creating a simple convolutional neural network\nThis one is taken from excellent channel Alladin Perrson : https:\/\/www.youtube.com\/watch?v=Jy4wM2X21u0&list=PLhhyoLH6IjfxeoooqP9rhU3HJIAVAJ3Vz&index=3\n\n![](https:\/\/i.morioh.com\/200620\/5b0ea047.jpg)","096a7800":"## Putting in the hyper parameters","5263aaa0":"## initialising the model","99cfa72e":"## creating the model","f8902c01":"testing over","0a753c8e":"## Getting the dataset","e97f73e9":"## Define loss criterion and optimizer","38e0ebaa":"We can also look at individual dataset that loaded","c7ee1163":"## Handling imports","38c7baea":"## Getting device information","ba4d7c5d":"## Train on data","538e0b73":"testing","22c101e9":"since getting a from interenet isn't reliable lets try with a dataset from csv\n\n## Custom data set class\n\nwith help from https:\/\/www.youtube.com\/watch?v=PXOzkkB5eH0"}}