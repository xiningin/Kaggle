{"cell_type":{"f41f9393":"code","e0eff194":"code","9d47a27f":"code","a74a7ad9":"code","8ca09826":"code","2143e979":"code","367ca017":"code","4b8c3c20":"code","b2edc42c":"code","1b577762":"code","7357d942":"code","3f1e9838":"code","bd7f2150":"code","59a9db6d":"code","63ce714a":"code","ed37d546":"code","973fc63c":"code","fe5c7c2a":"code","e6a4b9df":"code","db3798cb":"code","b3f5f116":"code","96c074ad":"code","62dee752":"code","f56fb441":"code","988f50bb":"code","8205c6cd":"code","0426df28":"code","a16a6bd4":"code","350aeb4f":"code","17fece96":"code","fbf4df88":"code","ae098998":"code","646f2e7b":"code","11bb65c2":"markdown","648546f7":"markdown","6926dc9f":"markdown","e49ec598":"markdown","6194eaf8":"markdown","8a3fa4ec":"markdown","d3daf6d8":"markdown"},"source":{"f41f9393":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport cv2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0eff194":"import zipfile\nimport glob\n\nfiles_zip_ext = glob.glob('\/kaggle\/input\/dogs-vs-cats\/*.zip')\nprint(files_zip_ext)\ndef extract_data_from_zip(file_path):\n    with zipfile.ZipFile(file_path, \"r\") as zip_ref:\n        zip_ref.extractall(\"\/kaggle\/temp\/data\")\n\n# Extract train and test\nfor file_path in files_zip_ext:\n    extract_data_from_zip(file_path)","9d47a27f":"print(f\"Train size: {len(os.listdir('\/kaggle\/temp\/data\/train'))}\")\nprint(f\"Test size: {len(os.listdir('\/kaggle\/temp\/data\/test1'))}\")","a74a7ad9":"os.chdir('\/kaggle\/temp\/data')","8ca09826":"train_y = (lambda dir_: [1 if file.split('.')[0] == 'dog' else 0 for file in os.listdir(dir_)])('train')\n\ngen_path = lambda dir_: [path for path in os.listdir(dir_)]\ntrain_x = gen_path('train')\ntest_x = gen_path('test1')","2143e979":"df = pd.DataFrame({'filename': train_x,\n                    'category': train_y})\n\nprint(df.tail())\n\nsns.displot(df, x='category')","367ca017":"def visualize(img_path):\n    img = mpimg.imread(img_path) \n\n    # Displaying the image \n    plt.figure(figsize=(8,8))\n\n    plt.imshow(img)","4b8c3c20":"visualize(f\"train\/{df['filename'].iloc[0]}\")","b2edc42c":"# Convert to gray\ndef preprocess(img_path):\n    gray = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)\n    \n    # resize the images\n    size = 28\n    gray = cv2.resize(gray, (size, size))\n    \n    # normalize\n    normalized = gray.flatten() \/ 255.0\n    \n    # global centering\n    mean = normalized.mean()\n    centered = normalized - mean\n    \n    return centered.reshape(1, size*size)","1b577762":"from sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","7357d942":"X_train, X_test, y_train, y_test = train_test_split(train_x, train_y, test_size=0.2, random_state=42)","3f1e9838":" sgd_clf = linear_model.SGDClassifier()","bd7f2150":"# Generate batches with preprocessing\n# X -> list of file paths and y -> (0 - dog, 1 - cat)\n\ndef gen_batches(X, y=None, batch_size=200, image_size=784):\n    batch = []\n    for i, x in enumerate(X, start=1):\n        img = preprocess(x)\n        batch.append(img)\n        if i % batch_size == 0:\n            data = np.asarray(batch).reshape(batch_size, image_size)\n            if y:\n                targets = y[i-batch_size:i]\n                yield data, targets\n            else:\n                yield data\n            batch = []","59a9db6d":"# Training\nos.chdir('\/kaggle\/temp\/data\/train\/')\n\ncategories = np.unique(y_train)\nfor b in gen_batches(X_train, y_train):\n    sgd_clf.partial_fit(b[0], b[1], classes=categories)","63ce714a":"# Predict 205 image in training set\nimg_path = df['filename'].iloc[205]\nvisualize(img_path)\n\npred = sgd_clf.predict(preprocess(img_path))\nprint(f\"It thinks it's a {'dog' if pred[0] == 0 else 'cat'}\")","ed37d546":"def display_metrics(y_test, y_predicted):\n    # Predict on validation set\n    target_names = ['Dog', 'Cat']\n    outcome = pd.DataFrame(confusion_matrix(y_test, y_predicted),index=target_names,\n                           columns=target_names)\n    \n    print(\"CONFUSION MATRIX\")\n    print(outcome)\n    \n    report = classification_report(y_test, y_predicted, target_names=target_names)\n    print(\"CLASSIFICATION REPORT\")\n    print(report)","973fc63c":"# Metrics for SGDClassifier\ny_predicted = np.asarray([sgd_clf.predict(b) for b in gen_batches(X_test)]).flatten()\ndisplay_metrics(y_test, y_predicted)","fe5c7c2a":"from lightgbm import LGBMClassifier","e6a4b9df":"lgb = LGBMClassifier(objective='binary', boosting='gbdt')","db3798cb":"X_train_full = np.asarray([preprocess(img) for img in X_train]).reshape(len(X_train), 784)","b3f5f116":"X_test_full = np.asarray([preprocess(img) for img in X_test]).reshape(len(X_test), 784)","96c074ad":"lgb.fit(X_train_full, y_train)","62dee752":"y_predicted = lgb.predict(X_test_full)\ndisplay_metrics(y_test, y_predicted)","f56fb441":"os.chdir('\/kaggle\/temp\/data\/test1')","988f50bb":"os.getcwd()","8205c6cd":"test = np.asarray([preprocess(img) for img in test_x]).reshape(len(test_x), 784)","0426df28":"categories = lgb.predict(test)","a16a6bd4":"# change directory to top level\nos.chdir('\/kaggle\/working\/')","350aeb4f":"submission = pd.DataFrame({'id': ind+1, 'label': cat} for ind, cat in enumerate(categories))\nsubmission.to_csv('submission.csv', index=False)","17fece96":"import lightgbm\nlightgbm.__version__","fbf4df88":"from joblib import dump, load","ae098998":"dump(lgb, 'lgb_model.mdl')","646f2e7b":"lgbm_load = load('lgb_model.mdl')","11bb65c2":"# **Visualization of first image**","648546f7":"# **Extracting data from zip files**","6926dc9f":"# **Generate labels and adding file names to path**","e49ec598":"# Make submission","6194eaf8":"# **Try LGBM model**","8a3fa4ec":"# Dump model","d3daf6d8":"# **Preprocessing image**"}}