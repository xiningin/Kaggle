{"cell_type":{"06fe0d61":"code","b8ac3784":"code","e9521c8d":"code","16bcab09":"code","8be1e4db":"code","5eb7f551":"code","e168c2f0":"code","4a2073c9":"code","53a18675":"code","36a66467":"code","8c7b9ab2":"code","7cd25a48":"code","3a38ebff":"code","ea973257":"code","4243e13a":"code","644568c0":"code","8abd29ab":"code","f0202c46":"code","7ca1c42c":"code","10863cba":"code","bdde1590":"code","9427dd6b":"code","09ef8754":"code","4aaf69ad":"code","12e1595b":"code","7204edb8":"code","74cea6ea":"code","a9eb569a":"code","ebef2525":"code","e4e7fb0d":"code","805cb02d":"code","328afc56":"code","b6be6b67":"code","b51a4295":"code","56ef2d3a":"code","19cbeb8d":"code","8eb284af":"code","acbf4e59":"code","b1161145":"code","d673e6d7":"code","5fdb73a8":"code","c7159a56":"code","27371f95":"code","2026b522":"code","bdb9523f":"code","824d9d7d":"code","e895154b":"code","56694384":"code","155b8aaf":"code","85a804ac":"code","2e685748":"markdown","25826b0c":"markdown","869186eb":"markdown","4f91cb0f":"markdown","68102a95":"markdown","2f1e6a2a":"markdown","e688be6b":"markdown","5c9b440d":"markdown","931519d7":"markdown","18e6a0c5":"markdown","38a78ce2":"markdown","a0190de4":"markdown"},"source":{"06fe0d61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b8ac3784":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score","e9521c8d":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')","16bcab09":"df.head()","8be1e4db":"df.info()","5eb7f551":"df.isna().sum()","e168c2f0":"df.hist(figsize = (20,20))","4a2073c9":"##dfBMI = df['BMI'].unique().tolist().sort()","53a18675":"dfBMI = df['BMI']","36a66467":"dfBMI.sort_values()","8c7b9ab2":"dfBMI[dfBMI == 0]","7cd25a48":"#for col in df:\n   # for i in df[col]:\n      #  if i == 0:\n         #   print(i)","3a38ebff":"dfBP = df['BloodPressure']","ea973257":"df[df['BloodPressure'] == 0]","4243e13a":"df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = df[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)","644568c0":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df)\nprofile","8abd29ab":"df['BloodPressure'].isna().sum()","f0202c46":"import statistics","7ca1c42c":"InsulinNull = df.loc[(df['Insulin'].isnull())]","10863cba":"InsulinH = df.loc[((df['Insulin'].notnull()) & (df['Outcome'] == 0))]","bdde1590":"InsulinH['Insulin'].median()","9427dd6b":"InsulinNullH = df.loc[((df['Insulin'].isnull()) & (df['Outcome'] == 0))]","09ef8754":"#df = df['Insulin'].isnull() = 102.5\n\nInsulinNullH['Insulin'].fillna(102.5, inplace = True)","4aaf69ad":"df.loc[(df['Outcome'] == 0 ) & (df['Insulin'].isnull()), 'Insulin'] = 102.5\ndf.loc[(df['Outcome'] == 1 ) & (df['Insulin'].isnull()), 'Insulin'] = 169.5","12e1595b":"dfcopy = df","7204edb8":"def Filler(col):\n    Healthy = df\n    Unhealthy = df\n    Healthy = df.loc[((df[col].notnull()) & (df['Outcome'] == 0))]\n    HealthyMedian = Healthy[col].median()\n    \n    Unhealthy = df.loc[((df[col].notnull()) & (df['Outcome'] == 1))]\n    UnhealthyMedian = Unhealthy[col].median()\n    \n    #Then Set the medians for na values\n    \n    df.loc[(df['Outcome'] == 0 ) & (df[col].isnull()), col] = HealthyMedian\n    df.loc[(df['Outcome'] == 1 ) & (df[col].isnull()), col] = UnhealthyMedian\n    \n    ","74cea6ea":"Filler('BMI')","a9eb569a":"Filler('SkinThickness')","ebef2525":"Filler('BloodPressure')","e4e7fb0d":"Filler('Glucose')","805cb02d":"profile2 = ProfileReport(df)","328afc56":"profile2","b6be6b67":"plt.style.use('ggplot')\n\nf, ax = plt.subplots(figsize=(11,15))\n\nax.set_facecolor('#fafafa')\nax.set(xlim=(-.5, 300))\nplt.ylabel('Variables')\nplt.title('Overview Data Set')\nax = sns.boxplot(data = df, orient = 'h', palette = 'Set2')","b51a4295":"lr = LinearRegression()\nx= df.drop(['Outcome'], axis =1)\ny=df['Outcome']\nx_train, x_test, y_train, y_test = train_test_split(x,y, random_state=42, test_size=0.15)","56ef2d3a":"lr.fit(x_train,y_train)\npred_1=lr.predict(x_test)\nscore_1=r2_score(y_test,pred_1)","19cbeb8d":"score_1","8eb284af":"from sklearn import svm\n\nclf_svm = svm.SVC(kernel ='linear')\nclf_svm.fit(x_train, y_train)\n\n\nprint(y_test)\n#clf_svm.predict(x_test)","acbf4e59":"clf_svm.predict(x_test)","b1161145":"clf_svm.score(x_test,y_test)","d673e6d7":"from sklearn.tree import DecisionTreeClassifier as dtc\n\nclf_dec = dtc()\nclf_dec.fit(x_train,y_train)","5fdb73a8":"clf_dec.score(x_test,y_test)","c7159a56":"from sklearn.naive_bayes import GaussianNB as gnb","27371f95":"clf_gnb = gnb()","2026b522":"clf_gnb.fit(x_train, y_train)\nclf_gnb.score(x_test, y_test)","bdb9523f":"from sklearn.linear_model import LogisticRegression\n\nclf_log = LogisticRegression(solver='liblinear')\n","824d9d7d":"clf_log.fit(x_train, y_train)\n\nclf_log.score(x_test, y_test)","e895154b":"from sklearn.metrics import f1_score\n\nf1_score(y_test, clf_dec.predict(x_test), average = None)","56694384":"(y_train == 1).count()","155b8aaf":"HealthyCount = 0\nUnhealthyCount = 0\nfor i in y_train:\n    if i == 0:\n        HealthyCount = HealthyCount + 1\n    else:\n        UnhealthyCount = UnhealthyCount + 1","85a804ac":"print(HealthyCount, UnhealthyCount)","2e685748":"### Linear SVM","25826b0c":"### Naive Bayes","869186eb":"### Glucose and all other cols with missing values","4f91cb0f":"## Data Exploration\/Cleaning","68102a95":"### Determining how to fill in missing values\n\nThe concept is to find out what the distribution of values given a certain outcome is, then fill in missing values with something that makes sense given the outcome.","2f1e6a2a":"## Linear Regression","e688be6b":"## Investigating the bad prediction rate for UnHealthy","5c9b440d":"## Classification","931519d7":"### Insulin","18e6a0c5":"### Boxplot of data","38a78ce2":"### Decision Tree","a0190de4":"### Logistic Regression"}}