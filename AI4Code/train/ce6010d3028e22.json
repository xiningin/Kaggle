{"cell_type":{"63b6982d":"code","aedf9e5a":"code","ef369c0d":"code","dfd828dd":"code","f130484f":"code","21467251":"code","59b000bb":"code","a434454e":"code","13088b44":"code","3ee55043":"code","aaad681e":"code","8c982884":"markdown","8cff4806":"markdown","510cec23":"markdown","963f0b14":"markdown","9f07f3ce":"markdown","9ab6b629":"markdown","078609a0":"markdown","2aca0e8b":"markdown","47fcbd35":"markdown","4767bc1d":"markdown","61619efd":"markdown","dc97e344":"markdown","8293c2be":"markdown","f3624d15":"markdown","6058b44c":"markdown","e0e1ed50":"markdown","4d6f5bbc":"markdown","3e4378ab":"markdown","42786d85":"markdown","d5262297":"markdown"},"source":{"63b6982d":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","aedf9e5a":"# Llamar a dataset tabular videoconferencia.csv  \ndf = pd.read_csv(\"..\/input\/short-tabular-data\/videoconferencia.csv\")\n\n# Se aplica formato de matriz al dataset con la funci\u00f3n Pivot \ndf_vc = df.pivot(index=\"D\u00eda\", columns=\"Semana\", values=\"Horas\")\n\n# Se ordenan las filas (index) del dataset seg\u00fan orden indicado por lista \"Dias_Ordenados\" \nDias_Ordenados = ['Lunes', 'Martes', 'Mi\u00e9rcoles', 'Jueves', 'Viernes', 'S\u00e1bado', 'Domingo']\ndf_vc = df_vc.reindex(Dias_Ordenados)\n\n# Se visualiza el dataset en formato matricial para cada d\u00eda de la semana\ndf_vc.head(len(df_vc))","ef369c0d":"# Se personaliza el fondo del gr\u00e1fico (con el fin de mejorar el constraste) y se especifican sus dimensiones con plt.rcParams\nplt.style.use('dark_background')\nplt.rcParams['figure.figsize'] = (20.0, 10.0)\n\n# Se genera mapa de calor personalizado por:\n# - annot: espec\u00edfica si se escribe o no el valor en la celda\n# - fmt: espec\u00edfica el formato de escritura del valor (d para valores enteros)\n# - annot_kws: espec\u00edfica argumentos para el texto de las anotaciones, como el tama\u00f1o\n# - linewidths: para marcar espaciado entre las celdas\n# - cbar_kws: especifica par\u00e1metros de la barra de color, en este caso la orientaci\u00f3n de la barra\n# - cmap: especifica la paleta de colores de la visualizaci\u00f3n, en este caso usamos una paleta \"secuencial\"\nax = sns.heatmap(df_vc, annot=True, fmt=\"d\", annot_kws={'size':15}, linewidths=1.0, cbar_kws={\"orientation\": \"horizontal\"}, cmap='Blues')\nax.set_title('Horas de Llamadas con Paleta de Color Secuencial \"Blues\"', pad=20, fontsize=20, fontweight=\"bold\")\nplt.show()","dfd828dd":"# - cmap: en este caso usamos una paleta \"divergente\"\nax = sns.heatmap(df_vc, annot=True, fmt=\"d\", annot_kws={'size':15}, linewidths=1.0, cbar_kws={\"orientation\": \"horizontal\"}, cmap='BrBG')\nax.set_title('Horas de Llamadas con Paleta de Color Divergente \"BrBG\"', pad=20, fontsize=20, fontweight=\"bold\")\nplt.show()","f130484f":"# Identificar valor m\u00ednimo y m\u00e1ximo de dataset matricial \n# Resultado: M\u00ednimo corresponde al primer domingo y el M\u00e1ximo al \u00faltimo lunes (la visualizacion secuencial lo valida)\nprint(df_vc.min().min())\nprint(df_vc.max().max())","21467251":"# Llamar a dataset titanic son Seaborn\ndf_titanic = pd.read_csv(\"..\/input\/short-tabular-data\/titanic.txt\")\n\n# Se visualizan los primeros 10 registros del dataset (Nos interesa el atributo class y survived)\ndf_titanic.head(10)","59b000bb":"# Se crea una figura en matplotlib para poner el gr\u00e1fico de tama\u00f1o 5x5 pulgadas y se agrega un gr\u00e1fico con add_subplot()\nplt.style.use('default')\nfig = plt.figure(figsize=(5, 5))\nplot = fig.add_subplot()\n\n#Se filtran los datos para cada clase y luego se cuentan los pasajeros en cada uno formando una lista \nc1 = df_titanic[df_titanic[\"class\"]=='First']\nc2 = df_titanic[df_titanic[\"class\"]=='Second']\nc3 = df_titanic[df_titanic[\"class\"]=='Third']\nclases = [len(c1),len(c2),len(c3)]\n\n# Se crea un gr\u00e1fico de torta con el m\u00e9todo pie y se le entrega la lista de valores (clase de cada pasajero)\n# El primer output del m\u00e9todo es una lista de cada segmento circular (patches), en este caso, son 3 segmentos (Clases)\n# Se a\u00f1ade el argumento autopct, el cual calcula el porcentaje de pasajeros por segmento con 2 cifras sigificativas en este caso\npie_plot = plot.pie(clases, labels=['First','Second','Third'] ,colors=['navy','lime','red'], autopct='%1.2f%%',startangle=90)\n\n#Se asigna un t\u00edtulo al gr\u00e1fico y se demarca en blanco para el segmento de color mas oscuro \nplot.set_title(\"Pasajeros del Titanic por Clase\", fontsize=15, fontweight=\"bold\")\npie_plot[2][0].set_color('white')\nplt.show()","a434454e":"# Se generan 1 figura con 2 subplots. Con cada subplot de tama\u00f1o personalizable\nfig1, (ax1, ax2) = plt.subplots(1,2,figsize=(10,10))\n\n# Se filtran los datos de los pasajeros que NO sobrevivieron utilizando el dataframe previamente filtrado por clases\nc1_0 = c1[c1[\"survived\"]==0]\nc2_0 = c2[c2[\"survived\"]==0]\nc3_0 = c3[c3[\"survived\"]==0]\nno_survived = [len(c1_0),len(c2_0),len(c3_0)]\n\n# Se filtran los datos de los pasajeros que SI sobrevivieron utilizando el dataframe previamente filtrado por clases\nc1_1 = c1[c1[\"survived\"]==1]\nc2_1 = c2[c2[\"survived\"]==1]\nc3_1 = c3[c3[\"survived\"]==1]\nsurvived = [len(c1_1),len(c2_1),len(c3_1)]\n\n# Se genera el gr\u00e1fico para cada subplot manteniendo los colores y propiedades\npie_plot1 = ax1.pie(no_survived, labels=['First','Second','Third'] ,colors=['navy','lime','red'], autopct='%1.2f%%',startangle=90)\npie_plot2 = ax2.pie(survived, labels=['First','Second','Third'] ,colors=['navy','lime','red'], autopct='%1.2f%%',startangle=90)\n\n# Se asigna un t\u00edtulo general a los subplot y se demarca en blanco para el segmento de color mas oscuro \nfig1.suptitle(\"Pasajeros del Titanic por Supervivencia (0\/1) y por Clase (T\/F\/S)\", fontsize=15, fontweight=\"bold\")\nfig1.subplots_adjust(top=1.25)\npie_plot1[2][0].set_color('white')\npie_plot2[2][0].set_color('white')\n\n# Se agrega un t\u00edtulo a cada subplot y se muestra s\u00f3lo el gr\u00e1fico\nax1.title.set_text('0: No Sobrevivientes')\nax2.title.set_text('1: Sobrevivientes')\nplt.show()","13088b44":"# Llamar a dataset tabular peliculas.csv  \ndf_pel = pd.read_csv(\"..\/input\/short-tabular-data\/peliculas.csv\")\n\n# Se visualizan los primeros 10 registros del dataset y sus atributos\ndf_pel.head(20)","3ee55043":"# Generar una grilla en donde los argumentos son:\n# data: indicar de donde provienen los datos\n# col: indicar qu\u00e9 columna utilizar para definir cuantos gr\u00e1ficos hay\n# hue: indicar qu\u00e9 columna utilizar para definir los colores de cada gr\u00e1fico\n# col_wrap: indicar cuantas columnas pueden haber.\n# Esta funci\u00f3n solo genera los gr\u00e1ficos sin datos, ahora falta indicar con qu\u00e9 llenar cada gr\u00e1fico\ngrid = sns.FacetGrid(data=df_pel, col=\"g\u00e9nero\", hue=\"g\u00e9nero\", col_wrap=3)\n\n# Llamamos al m\u00e9todo MAP que se encarga de llenar cada gr\u00e1fico de la grilla. Sus argumentos son:\n# Cada gr\u00e1fico se llenara en este caso con l\u00ednea y marcas para la cantidad de estrenos por a\u00f1o en cada g\u00e9nero \n# Coordenada en el eje X ser\u00e1 el a\u00f1os de estreno\n# Coordenada en el eje Y ser\u00e1 la cantidad de estrenos\n# marker: indicar c\u00f3mo se va a marcar cada punto del gr\u00e1fico. En este caso usaremos asterisco\ngrid.map(plt.plot, \"a\u00f1o\", \"cantidad\", marker=\"*\")\n\n# Visualizar el gr\u00e1fico\nplt.show()","aaad681e":"# modificamos el atributo categ\u00f3rico para este caso al a\u00f1o de estreno\ngrid2 = sns.FacetGrid(data=df_pel, col=\"a\u00f1o\", hue=\"a\u00f1o\", col_wrap=3)\n\n# Para este caso usamos la funci\u00f3n BARH de matplotlib con la categor\u00eda g\u00e9nero como EJE Y y la cantidad como EJE X\ngrid2.map(plt.barh, \"g\u00e9nero\", \"cantidad\", height=0.8)\ngrid2.set_axis_labels(\"Cantidad\",\"G\u00e9nero\");\n\n# Visualizar el gr\u00e1fico\nplt.show()","8c982884":"* ### Respuesta: \n#### a) Claramente el primer caso con gr\u00e1ficos de l\u00ednea, ya que podemos comparar para un g\u00e9nero espec\u00edfico la tendencia temporal de los estrenos codificando la posici\u00f3n vertical de la marca \n#### b) Si no posicionamos en 1 a\u00f1o espec\u00edfico, el segundo caso de barras horizontales nos muestra de modo efectivo que g\u00e9nero se estreno m\u00e1s usando el canal de magnitud de las barras","8cff4806":"### Importar librer\u00edas a utilizar en los 3 casos","510cec23":"* ### Pregunta: \n#### a) \u00bfCual de los 2 gr\u00e1ficos permite comparar la tendencia de un g\u00e9nero entre los diferentes a\u00f1os?\n#### b) \u00bfCu\u00e1l de los 2 gr\u00e1ficos permite identificar el g\u00e9nero de pel\u00edculas mas estrenados en 1 a\u00f1o espec\u00edfico?","963f0b14":"### Cargar Dataset","9f07f3ce":"* ### Respuestas: \n#### a) Analizando la gr\u00e1fica, la clase m\u00e1s com\u00fan que sobrevivi\u00f3 es la primera clase con un poco menos de un 40% del total de sobrevivientes\n#### b) Analizando la gr\u00e1fica, la clase m\u00e1s com\u00fan que NO sobrevivi\u00f3 es la tercera clase con un 67% del total\n#### c) Depende lo que se quiere comparar, ya que si comparamos la proporci\u00f3n de una categor\u00eda sobre el total de categor\u00edas (parte de un todo), es m\u00e1s efectivo utilizar un gr\u00e1fico de torta, sin embargo, el gr\u00e1fico de barras es efectivo cuando comparas cambios en el tiempo de una categor\u00eda sobre otra","9ab6b629":"### 1) Generar Visualizacion - Small Multiple con gr\u00e1fico de l\u00edneas y marca","078609a0":"### Cargar Dataset","2aca0e8b":"### 1) Generar Visualizacion tipo Torta - Pasajeros del Titanic por Clase ","47fcbd35":"# Caso 2: Pasajeros del Titanic","4767bc1d":"* ### Preguntas: \n#### a) De los sobrevivientes, \u00bfCu\u00e1l es la clase de pasajero mas com\u00fan?\n#### b) De los NO sobrevivientes, \u00bfCu\u00e1l es la clase de pasajero mas com\u00fan?\n#### c) \u00bfCree que este gr\u00e1fico es m\u00e1s efectivo que un gr\u00e1fico de barras para comparar categor\u00edas?","61619efd":"* ### Respuesta: \n#### Una paleta Secuencial es m\u00e1s efectiva por el orden (tendencia creciente) y gradaci\u00f3n de los datos presentados (seg\u00fan los valores extremos identificados), adem\u00e1s no requiere m\u00e1s de 1 tono de color (Hue) como canal (NO se presentan valores negativos y positivos que requieran un valor central definido y por tanto m\u00e1s de 1 tono de color) ","dc97e344":"# Respuestas Miniproyecto 2","8293c2be":"# Caso 1: Uso de Plataformas de Videoconferencia","f3624d15":"### Cargar Dataset","6058b44c":"### 2) Generar Visualizacion - Small Multiple con gr\u00e1fico de barras horizontales","e0e1ed50":"### Generar Visualizacion - Mapa de Calor","4d6f5bbc":"## Caso 3: Estreno de Peliculas por Genero","3e4378ab":"Se generan 2 mapas de calor con la funci\u00f3n **heatmap** de Seaborn, uno con una paleta de colores **secuencia** y otra **divergente**","42786d85":"### 2) Generar Visualizacion tipo Torta - Pasajeros del Titanic por Supervivencia y Clase ","d5262297":"* ### Pregunta: \n#### \u00bfCu\u00e1l tipo de paleta es m\u00e1s efectiva para codificar estos datos?"}}