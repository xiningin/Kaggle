{"cell_type":{"f701d3c1":"code","c835bb4d":"code","0a47dab1":"code","be0ed9f3":"code","52c2297b":"code","5f558149":"code","8dfb1712":"code","3219b94d":"code","9f1cc7d0":"code","67ab0528":"code","f6b92362":"code","dc41ad4a":"code","33d4f4b8":"code","85237880":"code","2708ebc6":"code","b2985282":"code","7bde9c08":"code","ff8c69d4":"code","0153fbf4":"code","2d11d9a8":"code","5565de86":"code","17575ced":"code","db80e1a7":"code","2f83d2eb":"code","b43a38e6":"code","e69d5f13":"code","af7b6406":"markdown","433af98b":"markdown","c9de3524":"markdown","7f447fd4":"markdown","da791d46":"markdown","7abb06ce":"markdown","cf94da2e":"markdown","f9c0e994":"markdown","2b8e2bd0":"markdown","221a6b89":"markdown","07a7af5f":"markdown"},"source":{"f701d3c1":"# \u7279\u5fb4\u91cf\u306e\u6e96\u5099\n\nimport numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\ndata = pd.concat([train, test], sort=False)\n\ndata['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","c835bb4d":"data.head()","0a47dab1":"delete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)","be0ed9f3":"X_train.head()","52c2297b":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=0, stratify=y_train)","5f558149":"# \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u6307\u5b9a\ncategorical_features = ['Embarked', 'Pclass', 'Sex']","8dfb1712":"params = {\n    'objective': 'binary',\n    'max_bin': 300,\n    'learning_rate': 0.05,\n    'num_leaves': 40\n}","3219b94d":"import lightgbm as lgb\n\n\nlgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categorical_features)\nlgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train, categorical_feature=categorical_features)\n\nmodel = lgb.train(\n    params, lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=10,\n    num_boost_round=1000,\n    early_stopping_rounds=10\n)\n\ny_pred = model.predict(X_test, num_iteration=model.best_iteration)","9f1cc7d0":"y_pred[:10]","67ab0528":"y_pred = (y_pred > 0.5).astype(int)\ny_pred[:10]","f6b92362":"sub = gender_submission\n\nsub['Survived'] = y_pred\nsub.to_csv(\"submission_lightgbm_holdout.csv\", index=False)\n\nsub.head()","dc41ad4a":"# \u5148\u306btrain_test_split\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6539\u3081\u3066\u7279\u5fb4\u91cf\u306e\u6e96\u5099\n\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\ndata = pd.concat([train, test], sort=False)\n\ndata['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1\n\ndelete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)\n\nX_train.head()","33d4f4b8":"from sklearn.model_selection import KFold\n\n\ny_preds = []\nmodels = []\noof_train = np.zeros((len(X_train),))\ncv = KFold(n_splits=5, shuffle=True, random_state=0)\n\ncategorical_features = ['Embarked', 'Pclass', 'Sex']\n\nparams = {\n    'objective': 'binary',\n    'max_bin': 300,\n    'learning_rate': 0.05,\n    'num_leaves': 40\n}\n\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    lgb_train = lgb.Dataset(X_tr, y_tr, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n\n    oof_train[valid_index] = model.predict(X_val, num_iteration=model.best_iteration)\n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n\n    y_preds.append(y_pred)\n    models.append(model)","85237880":"pd.DataFrame(oof_train).to_csv('oof_train_kfold.csv', index=False)\n\nscores = [\n    m.best_score['valid_1']['binary_logloss'] for m in models\n]\nscore = sum(scores) \/ len(scores)\nprint('===CV scores===')\nprint(scores)\nprint(score)","2708ebc6":"from sklearn.metrics import accuracy_score\n\n\ny_pred_oof = (oof_train > 0.5).astype(int)\naccuracy_score(y_train, y_pred_oof)","b2985282":"len(y_preds)","7bde9c08":"y_preds[0][:10]","ff8c69d4":"y_sub = sum(y_preds) \/ len(y_preds)\ny_sub = (y_sub > 0.5).astype(int)\ny_sub[:10]","0153fbf4":"sub['Survived'] = y_sub\nsub.to_csv(\"submission_lightgbm_kfold.csv\", index=False)\n\nsub.head()","2d11d9a8":"from sklearn.model_selection import KFold\n\n\ncv = KFold(n_splits=5, shuffle=True, random_state=0)\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    print(f'fold: {fold_id}')\n    print(f'y_tr y==1 rate: {sum(y_tr)\/len(y_tr)}')\n    print(f'y_val y==1 rate: {sum(y_val)\/len(y_val)}')","5565de86":"from sklearn.model_selection import StratifiedKFold\n\n\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train, y_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    print(f'fold: {fold_id}')\n    print(f'y_tr y==1 rate: {sum(y_tr)\/len(y_tr)}')\n    print(f'y_val y==1 rate: {sum(y_val)\/len(y_val)}')","17575ced":"from sklearn.model_selection import StratifiedKFold\n\n\ny_preds = []\nmodels = []\noof_train = np.zeros((len(X_train),))\ncv = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n\ncategorical_features = ['Embarked', 'Pclass', 'Sex']\n\nparams = {\n    'objective': 'binary',\n    'max_bin': 300,\n    'learning_rate': 0.05,\n    'num_leaves': 40\n}\n\nfor fold_id, (train_index, valid_index) in enumerate(cv.split(X_train, y_train)):\n    X_tr = X_train.loc[train_index, :]\n    X_val = X_train.loc[valid_index, :]\n    y_tr = y_train[train_index]\n    y_val = y_train[valid_index]\n\n    lgb_train = lgb.Dataset(X_tr, y_tr, categorical_feature=categorical_features)\n    lgb_eval = lgb.Dataset(X_val, y_val, reference=lgb_train, categorical_feature=categorical_features)\n\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n\n    oof_train[valid_index] = model.predict(X_val, num_iteration=model.best_iteration)\n    y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n\n    y_preds.append(y_pred)\n    models.append(model)","db80e1a7":"pd.DataFrame(oof_train).to_csv('oof_train_skfold.csv', index=False)\nprint(oof_train[:10])\n\nscores = [\n    m.best_score['valid_1']['binary_logloss'] for m in models\n]\nscore = sum(scores) \/ len(scores)\nprint('===CV scores===')\nprint(scores)\nprint(score)","2f83d2eb":"from sklearn.metrics import accuracy_score\n\n\ny_pred_oof = (oof_train > 0.5).astype(int)\naccuracy_score(y_train, y_pred_oof)","b43a38e6":"y_sub = sum(y_preds) \/ len(y_preds)\ny_sub = (y_sub > 0.5).astype(int)\ny_sub[:10]","e69d5f13":"sub['Survived'] = y_sub\nsub.to_csv(\"submission_lightgbm_skfold.csv\", index=False)\n\nsub.head()","af7b6406":"\u3053\u306e\u4e88\u6e2c\u5024\u306f\u3001\u79c1\u306e\u74b0\u5883\u30670.77033\u3068\u3044\u3046\u30b9\u30b3\u30a2\u304c\u51fa\u3066\u3044\u307e\u3059\uff08\u524d\u56de\u306eKernel\u53c2\u7167\uff09\u3002\n\n# \u4ea4\u5dee\u691c\u8a3c\uff08Cross Validation\uff09\n\n\u3055\u3066\u3001\u3053\u3053\u3067\u300cCross Validation\u300d\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\u306e\u4f8b\u3088\u308a\u3082\u3001\u66f4\u306b\u6c4e\u7528\u7684\u306b\u6027\u80fd\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u4ea4\u5dee\u691c\u8a3c\uff08Cross Validation\uff09\u3068\u306f\u3001\u8907\u6570\u56de\u306b\u308f\u305f\u3063\u3066\u7570\u306a\u308b\u65b9\u6cd5\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u5272\u3057\u3001\u305d\u308c\u305e\u308c\u3067\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\u3092\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u305d\u306e\u30b9\u30b3\u30a2\u306e\u5e73\u5747\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u30011\u56de\u306e\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\u3067\u751f\u3058\u3046\u308b\u504f\u308a\u306b\u5bfe\u3059\u308b\u61f8\u5ff5\u3092\u5f31\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n`train_test_split` \u3092\u8907\u6570\u56de\u66f8\u3044\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u3088\u308a\u4fbf\u5229\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002","433af98b":"\u3053\u306e\u4e88\u6e2c\u5024\u3092\u63d0\u51fa\u3059\u308b\u3068\u3001\u79c1\u306e\u74b0\u5883\u30670.77511\u3068\u3044\u3046\u30b9\u30b3\u30a2\u304c\u51fa\u307e\u3057\u305f\u3002`KFold`\u306e\u6642\u3088\u308a\u3082\u3001\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\u306e\u6642\u3088\u308a\u3082\u826f\u3044\u30b9\u30b3\u30a2\u304c\u51fa\u3066\u3044\u307e\u3059\u3002","c9de3524":"Cross Validation\u3092\u5b9f\u65bd\u3057\u305f\u969b\u306f\u3001\u5168\u4f53\u306e\u5e73\u5747\u3092validation\u30b9\u30b3\u30a2\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\u3053\u306e\u30b9\u30b3\u30a2\u306e\u3053\u3068\u3092\u300cCV\u30b9\u30b3\u30a2\u300d\u3001\u7701\u7565\u3057\u3066\u5358\u306b\u300cCV\u300d\u3068\u3082\u547c\u3073\u307e\u3059\u3002","7f447fd4":"\u3053\u3053\u307e\u3067\u4f7f\u3063\u3066\u3044\u305fKFold\u306f\u3001\u7279\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3084\u8ab2\u984c\u8a2d\u5b9a\u306e\u7279\u5fb4\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u306a\u304f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u5272\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u5b66\u7fd2\u7528\u30fb\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e`y==1`\u306e\u4e88\u6e2c\u5024\u306e\u5272\u5408\u3092\u898b\u3066\u307f\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002fold: 2, 4\u306a\u3069\u3067\u9855\u8457\u306b\u5272\u5408\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002","da791d46":"This Notebook is a kaggle tutorial for Japanese kaggle beginners writen in Japanese.\n\n# 6. submit\u306e\u305d\u306e\u524d\u306b\uff01 \u300cCross Validation\u300d\u306e\u5927\u5207\u3055\u3092\u77e5\u308d\u3046","7abb06ce":"\u7279\u5fb4\u91cf\u306e\u6e96\u5099\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\n\n# \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\n\n\u5b9f\u306f\u65e2\u306b\u3001LightGBM\u3092\u5229\u7528\u3059\u308b\u6bb5\u968e\u3067\u300c\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\u300d\u3068\u547c\u3070\u308c\u308b\u4e00\u7a2e\u306evalidation\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u5272\u3057\u305f\u4e0a\u3067LightGBM\u3092\u5b66\u7fd2\u3055\u305b\u3066\u3044\u305f\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u306e\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u81ea\u5206\u3067\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u5207\u308a\u51fa\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u76ee\u7684\u5909\u6570\u3092\u542b\u3081\u3066\u5168\u5bb9\u3092\u628a\u63e1\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u5168\u4f53\u50cf\u306e\u898b\u3048\u3066\u3044\u306a\u3044public LB\u306e\u30b9\u30b3\u30a2\u306b\u6bd4\u3079\u3066\u3001\u4fe1\u983c\u6027\u306e\u9ad8\u3044\u30b9\u30b3\u30a2\u3092\u5f97\u3089\u308c\u308b\u53ef\u80fd\u6027\u3092\u79d8\u3081\u3066\u3044\u307e\u3059\u3002\n\n\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u6027\u80fd\u3001\u3059\u306a\u308f\u3061validation\u30b9\u30b3\u30a2\u306f\u3001\u63d0\u51fa\u3059\u308b\u3053\u3068\u306a\u304f\u624b\u5143\u3067\u78ba\u8a8d\u53ef\u80fd\u3067\u3059\u3002\u81ea\u5206\u306e\u6c17\u306e\u6e08\u3080\u3060\u3051\u8a66\u884c\u932f\u8aa4\u3092\u56de\u3057\u3001\u826f\u3044\u30b9\u30b3\u30a2\u3092\u5f97\u305f\u5834\u5408\u306b\u5b9f\u969b\u306bKaggle\u306b\u63d0\u51fa\u3059\u308b\u3088\u3046\u306a\u904b\u7528\u304c\u53ef\u80fd\u3067\u3059\u3002","cf94da2e":"\u3053\u306e\u5206\u5272\u3092\u7528\u3044\u3066\u5b66\u7fd2\u30fb\u4e88\u6e2c\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\u3002","f9c0e994":"3\u301c5\u3064\u76ee\u306eNotebook\u3067\u306f\u3001\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u30fb\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30fb\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9762\u3067\u3001\u30b9\u30b3\u30a2\u3092\u4e0a\u3052\u3066\u3044\u304f\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\n\n\u3053\u306e[Notebook](https:\/\/www.kaggle.com\/sishihara\/upura-kaggle-tutorial-06-validation)\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u898b\u7a4d\u3082\u308b\u300cvalidation\u300d\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002","2b8e2bd0":"\u7e70\u308a\u8fd4\u3057\u306b\u306a\u308a\u307e\u3059\u304c\u3001Kaggle\u306e\u76ee\u7684\u306f\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3042\u308bLB\u306b\u5bfe\u3059\u308b\u6027\u80fd\u3092\u9ad8\u3081\u308b\u3053\u3068\u3067\u3059\u3002\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u304a\u3051\u308b`y==1`\u306e\u5272\u5408\u306f\u8ab0\u306b\u3082\u6b63\u78ba\u306b\u306f\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u304c\u3001\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3042\u308b\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u540c\u69d8\u306e\u5272\u5408\u3060\u3068\u8fd1\u4f3c\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f`y==1`\u306e\u5272\u5408\u3092\u4fdd\u3064\u3088\u3046\u306b\u5206\u5272\u3059\u308b\u306e\u304c\u7406\u60f3\u7684\u3067\u3059\u3002\n\n`y==1`\u306e\u5272\u5408\u304c\u5747\u7b49\u3067\u306a\u3044\u5834\u5408\u3001`y==1`\u3092\u91cd\u8981\u8996\u3057\u305f\u308a\u9006\u306b\u8efd\u8996\u3057\u305f\u308a\u3068\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b66\u7fd2\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u50be\u5411\u306b\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3067\u306f\u9069\u5207\u306b\u7279\u5fb4\u3092\u5b66\u7fd2\u3067\u304d\u305a\u3001\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u6027\u80fd\u304c\u52a3\u5316\u3057\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002KFold\u3092\u7528\u3044\u305f\u5834\u5408\u306b\u30b9\u30b3\u30a2\u304c\u60aa\u5316\u3057\u305f\u539f\u56e0\u3082\u3053\u3053\u306b\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002","221a6b89":"\u3053\u306e\u4e88\u6e2c\u5024\u3092\u63d0\u51fa\u3059\u308b\u3068\u3001\u79c1\u306e\u74b0\u5883\u30670.76555\u3068\u3044\u3046\u30b9\u30b3\u30a2\u304c\u51fa\u307e\u3057\u305f\u3002\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u691c\u8a3c\u306e\u6642\u3088\u308a\u3082\u60aa\u3044\u30b9\u30b3\u30a2\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u539f\u56e0\u306e\u4e00\u3064\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5206\u5272\u65b9\u6cd5\u3060\u3068\u63a8\u5bdf\u3055\u308c\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u3053\u306e\u90e8\u5206\u3092\u6398\u308a\u4e0b\u3052\u3066\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002","07a7af5f":"# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5206\u5272\u65b9\u6cd5\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5206\u5272\u306b\u5f53\u305f\u3063\u3066\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3084\u8ab2\u984c\u8a2d\u5b9a\u306e\u7279\u5fb4\u3092\u610f\u8b58\u3059\u308b\u306e\u304c\u5927\u5207\u3067\u3059\u3002"}}