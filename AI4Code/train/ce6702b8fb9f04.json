{"cell_type":{"c4790f47":"code","dc1f5f16":"code","7471a87b":"code","3c68ac5c":"code","8f1b6e2c":"code","3254c2da":"code","75849174":"code","342eed27":"code","4e264a5d":"code","e235248c":"code","8147a8e6":"code","5e211924":"code","b8a6c1a2":"code","2416238b":"code","572e5c1d":"code","471bc5f0":"code","521041e7":"code","d1aa8b54":"markdown","6c572ce2":"markdown","d8ccdc66":"markdown","1b676420":"markdown","746b0dac":"markdown","9f820690":"markdown","ef58a793":"markdown","57ed7d52":"markdown","8bc14478":"markdown","20e35ee6":"markdown","d611e0b4":"markdown"},"source":{"c4790f47":"# file operations\nimport os\n# to list files\nimport glob\n\n# for numerical analysis\nimport numpy as np \n# to store and process in a dataframe\nimport pandas as pd \n\n# for ploting graphs\nimport matplotlib.pyplot as plt\n# advancec ploting\nimport seaborn as sns\n\n# image processing\nimport matplotlib.image as mpimg\n\n# train test split\nfrom sklearn.model_selection import train_test_split\n# model performance metrics\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# utility functions\nfrom tensorflow.keras.utils import to_categorical\n# process image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n# sequential model\nfrom tensorflow.keras.models import Sequential\n# layers\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout","dc1f5f16":"# current working directory\nos.getcwd()","7471a87b":"# no. of files\n\ndef list_files(startpath):\n    for root, dirs, files in os.walk(startpath):\n        level = root.replace(startpath, '').count(os.sep)\n        indent = ' ' * 4 * (level)\n        print('{}{}'.format(indent, os.path.basename(root)), '-', len(os.listdir(root)))\n        \nfolder = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray'\nlist_files(folder)","3c68ac5c":"# list of files in the dataset\nos.listdir('..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray')","8f1b6e2c":"# path to each directory\n\nbase_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray'\ntrain_dir = os.path.join(base_dir, 'train')\nval_dir = os.path.join(base_dir, 'val')\ntest_dir = os.path.join(base_dir, 'test')","3254c2da":"# list of files in the train dataset\nos.listdir(train_dir)","75849174":"# path to both folder in the train directory\np_dir = os.path.join(train_dir, 'PNEUMONIA')\n\n# list of pnemonia affected and normal images\np_imgs = os.listdir(p_dir)\n\n# print no. of images\nlen(p_imgs)","342eed27":"# path to both folder in the train directory\nn_dir = os.path.join(train_dir, 'NORMAL')\n\n# list of pnemonia affected and normal images\nn_imgs = os.listdir(n_dir)\n\n# print no. of images\nlen(n_imgs)","4e264a5d":"# show pnemonia affected lungs X-rays\n\nfig, ax = plt.subplots(figsize=(18, 6))\nfig.suptitle('Pnemonia affected lungs', fontsize=24)\n\nfor i, img_path in enumerate(p_imgs[:24]):\n    plt.subplot(3, 8, i+1)\n    img = mpimg.imread(os.path.join(p_dir, img_path))\n    plt.axis('off')\n    plt.imshow(img)\nplt.show()","e235248c":"# show normal lungs X-rays\n\nfig, ax = plt.subplots(figsize=(18, 6))\nfig.suptitle('Normal lungs', fontsize=24)\n\nfor i, img_path in enumerate(n_imgs[:24]):\n    plt.subplot(3, 8, i+1)\n    img = mpimg.imread(os.path.join(n_dir, img_path))\n    plt.axis('off')\n    plt.imshow(img)\nplt.show()","8147a8e6":"train_data_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train'\nvalidation_data_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val'\ntest_data_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test'\n\nIMG_SIZE = 64\nBATCH_SIZE = 32\nTARGET_SIZE = 64\nEPOCHS = 10","5e211924":"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Conv2D(64, (3,3), activation='relu'))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Conv2D(128, (3,3), activation='relu'))\nmodel.add(MaxPooling2D(2,2))\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nmodel.summary()","b8a6c1a2":"datagen = ImageDataGenerator(rescale=1.\/255,\n                             zoom_range=0.2,\n                             horizontal_flip=True,\n                             vertical_flip=True,\n                             width_shift_range=0.2,\n                             height_shift_range=0.2,\n                             validation_split=0.3)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","2416238b":"train_generator = datagen.flow_from_directory(train_data_dir,\n                                              target_size=(IMG_SIZE, IMG_SIZE),\n                                              batch_size=BATCH_SIZE,\n                                              shuffle=True,\n                                              class_mode='binary', \n                                              subset='training')\n\nvalidation_generator = datagen.flow_from_directory(train_data_dir,\n                                                   target_size=(IMG_SIZE, IMG_SIZE),\n                                                   batch_size=BATCH_SIZE,\n                                                   shuffle=True,\n                                                   class_mode='binary', \n                                                   subset='validation')\n\ntest_generator = test_datagen.flow_from_directory(test_data_dir,\n                                                  target_size=(IMG_SIZE, IMG_SIZE),\n                                                  batch_size=BATCH_SIZE,\n                                                  shuffle=True,\n                                                  class_mode='binary')","572e5c1d":"history = model.fit_generator(train_generator,\n                              validation_data=validation_generator,\n                              epochs=EPOCHS,\n                              verbose=1)","471bc5f0":"plt.figure(figsize=(14, 5))\n\nplt.subplot(1, 2, 1)\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\n\nplt.show()","521041e7":"# evaluate model\nmodel.evaluate(test_generator)","d1aa8b54":"# Data","6c572ce2":"# Libraries","d8ccdc66":"### Evaluate","1b676420":"# Model","746b0dac":"### CNN model","9f820690":"### Model Metrics","ef58a793":"### Model parameters","57ed7d52":"### Fit model","8bc14478":"# EDA","20e35ee6":"### Data generator","d611e0b4":"## About the Dataset\n> * The dataset is organized into 3 folders \n  \n> > * train  \n> > * test  \n> > * val  \n  \n> * All contains subfolders for each image category (Pneumonia\/Normal).   \n> * There are 5,863 X-Ray images (JPEG) and 2 categories (Pneumonia\/Normal).  \n\n## Task\n> * To come up with a model that can label pneumonia affected and normal X-rays"}}