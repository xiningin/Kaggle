{"cell_type":{"5a9192fd":"code","d70747e5":"code","053ecf92":"code","f185cf7b":"code","d0a81c0f":"code","48d9f251":"code","eb6f0d65":"code","675ae3fb":"code","0f99114f":"code","00e25a24":"code","1bf29e58":"code","754be1a1":"code","a6cf5d17":"code","d9376421":"code","15e52a32":"code","f3428dd3":"markdown","f9391939":"markdown","370c1f8c":"markdown","3333493f":"markdown","ff5227a3":"markdown","96a6ab18":"markdown","49b2d539":"markdown","e40a0393":"markdown","2491a5ae":"markdown","1ceb0a55":"markdown","d1db4f9a":"markdown","dfdf2a0a":"markdown","45860649":"markdown","6c31d65b":"markdown","ff6c39d2":"markdown","96b1cefe":"markdown","21e3fd5d":"markdown","69fc413d":"markdown","fbe4b3d0":"markdown","43b5fa9b":"markdown","8ad46362":"markdown","e4c98124":"markdown"},"source":{"5a9192fd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndftrain = pd.read_csv('train.csv', index_col=0)\ndftrain.info()\nprint('------------------------------------\\n')\n\ndftest = pd.read_csv('test.csv', index_col=0)\ndftest.info()","d70747e5":"#mengisi data kosong di kolom kecepatan_clock dan panjang_layar dengan modus dari kolom tersebut\ndfo = dftrain.replace({'': np.nan})\n#df = dfna.dropna(axis=0, how='any', inplace=False) #menghilangkan data\ndfo['kecepatan_clock'].fillna(dfo['kecepatan_clock'].mode()[0], inplace=True)\ndfo['panjang_layar'].fillna(dfo['panjang_layar'].mode()[0], inplace=True)\ndfo.info()","053ecf92":"#mengubah data di kolom four_g\nX_actual = dftest.replace({'Ya': 1, 'Tidak': 0})\ndfp = dfo.replace({'Tidak': 0, 'Ya': 1})\n\n#mengubah data di kolom price_range\ndf = dfp.replace({'0-<1000k': 0, '1000k-<2000k': 1, '2000k-3000k': 2, '>3000k': 3})\ndf.info()","f185cf7b":"#memisahkan X dan y\nX = df.drop('price_range', axis=1)\ny = df['price_range']\n\n#mengubah X dan y ke numpy array\narrX = np.array(X)\narry = np.array(y)\n\nprint(X.shape)\nX.info()\nprint('------------------------------------\\n')\n\n#melihat ketimpangan jumlah anggota dalam setiap kelas\ny.value_counts()","d0a81c0f":"fig, ax = plt.subplots(figsize=(12,11))\nax = sns.heatmap(df.corr(), annot=True, fmt='.2f', linewidths=2)\nplt.show()","48d9f251":"#x = kapasitas_ram\n#y = price_range\n#size = px_panjang*px_lebar\n\nfig2, ax2 = plt.subplots(figsize=(12,8))\nmapbar = ax2.scatter(x=df['kapasitas_ram'], y=df['daya_baterai'], s=df['px_panjang']*df['px_lebar']*0.0001,\n                  c=df['price_range'], cmap='coolwarm', alpha=0.8)\nax2.set_xlabel('Kapasitas RAM [MB]')\nax2.set_ylabel('Daya Baterai [mAh]')\nax2.set_title('Scatter Plot untuk Semua Data HP')\nfig2.colorbar(mapbar)\nplt.show()","eb6f0d65":"sns.pairplot(df[['price_range', 'kapasitas_ram', 'daya_baterai', 'px_panjang', 'px_lebar']], hue='price_range', markers=['p', 'o', 's', 'D'], corner=True)","675ae3fb":"from sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss, f1_score\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\n#from sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\n#cek skor untuk tiap fold\n#list_f1_rf = []\n#clf = RandomForestClassifier(max_depth=2, min_samples_leaf=1, random_state=0)\n#for i in range(4):\n#    clf.fit(list_X_feature[i],list_y_feature[i])\n#    y_predict = clf.predict(list_X_targets[i])\n#    list_f1_rf.append(f1_score(list_y_targets[i], y_predict, average='micro'))\n\nclassifier = [\n              KNeighborsClassifier(3),\n              SVC(probability=True),\n              DecisionTreeClassifier(),\n              RandomForestClassifier(),\n              AdaBoostClassifier(),\n              GradientBoostingClassifier(),\n              GaussianNB(),\n              LinearDiscriminantAnalysis(),\n              QuadraticDiscriminantAnalysis()#,\n              #LogisticRegression()\n]\n\nlog_cols = [\"Classifier\", \"F1 Score\"]\nlog = pd.DataFrame(columns=log_cols)\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)\n\n#X = X.iloc[:, :].values\n#y = y.values\n\ndict_f1 = {}\n\nfor train_index, test_index in sss.split(X, y):\n    X_train, X_test = arrX[train_index], arrX[test_index]\n    y_train, y_test = arry[train_index], arry[test_index]\n\n    for clf in classifier:\n        name = clf.__class__.__name__\n        clf.fit(X_train, y_train)\n        train_predict = clf.predict(X_test)\n        f1 = f1_score(y_test, train_predict, average='micro')\n        if name in dict_f1:\n            dict_f1[name] += f1\n        else:\n            dict_f1[name] = f1\n\nfor clf in dict_f1:\n    dict_f1[clf] = dict_f1[clf] \/ 10.0\n    log_entry = pd.DataFrame([[clf, dict_f1[clf]]], columns=log_cols)\n    log = log.append(log_entry)\n\nplt.xlabel('F1 Score')\nplt.title('Classifier F1 Scores')\n\nsns.set_color_codes('muted')\nsns.barplot(x='F1 Score', y='Classifier', data=log, color='b')","0f99114f":"SVC?","00e25a24":"from sklearn.model_selection import RandomizedSearchCV\nmodel_svc = SVC()\nparam_grid = {\n    'C': [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5],\n    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],#, 'precomputed'\n    'degree': [1, 2, 3, 4, 5],\n    'gamma': ['scale', 'auto'],\n    'coef0': [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n    'shrinking': [False, True],\n    'probability': [False, True],\n    'class_weight': [None, 'balanced'],\n    'break_ties': [False, True],\n    'max_iter': [1000, 2000]\n}\n\nrscv = RandomizedSearchCV(model_svc, param_grid, cv=10, scoring='f1_micro')\nrscv.fit(X, y)","1bf29e58":"rscv.best_params_","754be1a1":"rscv.best_score_","a6cf5d17":"model_svc_best = rscv.best_estimator_","d9376421":"y_predict = model_svc_best.predict(X_actual)\nprint(y_predict)\nprint(type(y_predict))\nprint(len(y_predict))","15e52a32":"testing = pd.read_csv('test.csv')\nsubmission = pd.DataFrame({'index': testing['index'], 'price_range': y_predict})\nsubmission.to_csv('submit_Harga.csv', index=False)","f3428dd3":"Terlihat bahwa harga HP berkaitan erat dengan kapasitas RAM. Namun, ada lagi faktor yang memengaruhi, yaitu daya baterai, panjang HP, dan lebar HP.","f9391939":"### Submit hasil","370c1f8c":"Memastikan panjang data prediksi sama dengan panjang data test","3333493f":"Terdapat beberapa hal yang menarik dari pairplot di atas:\n\n1.   Ada cukup banyak HP yang memiliki daya baterai rendah di kelas harga 2000k-3000k. Hal ini terlihat dari adanya \"bukit\" pertama dari grafik daya baterai untuk kelas harga tersebut. Inilah yang menyebabkan korelasi daya baterai terhadap kelas harga relatif tidak terlalu kuat.\n2.   Terdapat kecenderungan resolusi panjang tertentu untuk semua kelas harga.\n3.   Kelas harga selain >3000k memiliki distribusi resolusi lebar yang kurang lebih sama.\n\n","ff5227a3":"Perlakuan terhadap data kosong di kolom kecepatan_clock dan panjang_layar","96a6ab18":"Memisahkan X (data feature) dan y (data target) dari dataframe train dan mengubah menjadi array","49b2d539":"Cek f1 score hasil terbaik","e40a0393":"Mengubah kolom bertipe data objek menjadi angka","2491a5ae":"Data train dan test sekarang siap untuk dieksplorasi","1ceb0a55":"# Submission Quiz Pekan 4\n###### Oleh: Kevin Putra Adiwijna\n##### kpadiwijna1998@gmail.com","d1db4f9a":"Menggunakan hyperparameter terbaik pada model SVC","dfdf2a0a":"Import data dari CSV","45860649":"Heatmap untuk melihat koefisien korelasi antar variabel","6c31d65b":"Berdasarkan training dan testing tiap algoritma dengan parameter default, didapatkan bahwa algoritma SVC akan paling baik dalam melakukan prediksi.","ff6c39d2":"### Mencari hyperparameter terbaik untuk model yang dipilih","96b1cefe":"### Penggunaan model dengan hyperparameter terbaik untuk prediksi data test","21e3fd5d":"Parameter dari SVC dapat dilihat dengan menjalankan perintah: SVC? dalam blok kode. Inilah yang disebut sebagai hyperparameter. Penyeteman dilakukan dengan variasi harga hyperparameter melalui perintah RandomizedSearchCV untuk mempersingkat waktu. ","69fc413d":"### Eksplorasi data","fbe4b3d0":"Cek parameter terbaik","43b5fa9b":"### Baca data","8ad46362":"### Meneliti performa model","e4c98124":"Terlihat dari scatter plot bahwa tersedia beragam variasi daya baterai dan kapasitas RAM dalam satu kelas harga. Namun, terlihat jelas bahwa kapasitas RAM lebih berpengaruh terhadap kelas harga dibanding daya baterai."}}