{"cell_type":{"10877156":"code","d403c54e":"code","5e6cefdf":"code","13d2a591":"code","04e819ac":"code","3e878d28":"code","11c8b3e7":"code","2d90ad23":"code","21f3a545":"code","f8559ca0":"code","d7bf9892":"code","3cb0a567":"code","a8493ed8":"code","2169ebc7":"code","2dfa35de":"code","e4092a6a":"code","9f2deb35":"code","466caf40":"code","d45bc1dd":"code","b24b8738":"code","8616fdec":"code","419df8ff":"code","e752abb4":"code","9d5248a4":"markdown","3cee3bb0":"markdown","2683dc70":"markdown","4891455c":"markdown","8fe90015":"markdown","e9abd63f":"markdown","a05f9897":"markdown","54b63012":"markdown","7fe3174e":"markdown","7c38136a":"markdown","29b106af":"markdown","76b7368a":"markdown"},"source":{"10877156":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d403c54e":"data = pd.read_csv('\/kaggle\/input\/the-world-of-pokemons\/pokemons dataset.csv',encoding='latin-1')","5e6cefdf":"data.head()","13d2a591":"import matplotlib.pyplot as plt\nimport seaborn as sns","04e819ac":"li = ['Attack','Defense','HP','Sp.Attack','Sp.Defense','Speed']\nplt.figure(figsize=(10,8))\nfor i in enumerate(li):\n  plt.subplot(2,3,i[0]+1)\n  sns.scatterplot(data[i[1]],data['Total'])\n  ","3e878d28":"li = ['Attack','Defense','HP','Sp.Attack','Sp.Defense','Speed','Total']\nfor i in enumerate(li):\n  plt.subplot(3,3,i[0]+1)\n  sns.boxplot(data[i[1]])","11c8b3e7":"def remove(data):\n  Q1 = np.percentile(data, 25, interpolation = 'midpoint')\n  \n# Third quartile (Q3)\n  Q3 = np.percentile(data, 75, interpolation = 'midpoint')\n  iqr = Q3 - Q1\n  percentile25 = data.quantile(0.25)\n  percentile75 = data.quantile(0.75)\n\n  upper_limit = percentile75 + 1.5 * iqr\n  lower_limit = percentile25 - 1.5 * iqr\n  data = np.where(\n    data > upper_limit,upper_limit,\n    np.where(\n        data < lower_limit,\n        lower_limit,\n        data\n    )\n  )\n  return data\n\n#train[train['discount_percent'] > upper_limit]\n#train[train['discount_percent'] < lower_limit]\n\n","2d90ad23":"from sklearn.preprocessing import LabelEncoder,StandardScaler","21f3a545":"data['Name2'] = np.where(data['Name2'].notnull(),1,0)\ndata['Secondary type'] = np.where(data['Secondary type'].isnull(),'0',data['Secondary type'])\ndata['Primary Type']  = LabelEncoder().fit_transform(data['Primary Type'])\ndata['Secondary type']  = LabelEncoder().fit_transform(data['Secondary type'])","f8559ca0":"print(data.shape)\ndata =data.drop_duplicates(keep='first')\nprint(data.shape)\n\n\n","d7bf9892":"plt.figure(figsize=(10,8),dpi=100)\nli = ['Name2','Secondary type','Primary Type','Attack','Defense','HP','Sp.Attack','Sp.Defense','Speed','Total']\nfor i in enumerate(li):\n  plt.subplot(5,3,i[0]+1)\n  sns.boxplot(data[i[1]])","3cb0a567":"data['Name2'].unique()","a8493ed8":"data.head()","2169ebc7":"for i in data.columns[2:]:\n  data[i]=remove(data[i])\n  data[i] = StandardScaler().fit_transform(data[[i]])","2dfa35de":"li = ['Attack','Defense','HP','Sp.Attack','Sp.Defense','Speed','Total']\nfor i in enumerate(li):\n  plt.subplot(3,3,i[0]+1)\n  sns.boxplot(data[i[1]])","e4092a6a":"data['Name'].unique()","9f2deb35":"sns.heatmap(data.corr(),fmt = '.1f',annot=True,mask=np.triu(data.corr()))","466caf40":"feature =data.drop(['Total','Name'],axis=1)\nlabel = data['Total']","d45bc1dd":"from sklearn.model_selection import train_test_split\ntrainF,testF,trainL,testL = train_test_split(feature,label,random_state=42,test_size=.3)","b24b8738":"import catboost as cb\nmodel = cb.CatBoostRegressor(random_state=42)","8616fdec":"model.fit(trainF,trainL)","419df8ff":"model.score(testF,testL)","e752abb4":"pred = model.predict(testF)\npred = np.array(pred)\ntestL = np.array(testL)\nplt.plot(pred[:50])\nplt.plot(testL[:50])\nplt.legend(['pred','actual'])","9d5248a4":"* *We can see here there are some common outliers*  *","3cee3bb0":"# Remove outlier and then normalize data","2683dc70":"# Split train and test data","4891455c":"** As there have so many names I avoid this column though I can use maximum occured name  **","8fe90015":"# Split feature and label\n","e9abd63f":"# Visualize data and find any clue","a05f9897":"# hurraay 99%","54b63012":"# Lets Visualization for satisfaction","7fe3174e":"# but first of do convert string data to int or category data","7c38136a":"# find more detailed look using boxplot to find outliers","29b106af":"# Choose model , in that case I use *CATBOOSTREGRESSOR*","76b7368a":"# Look Closer At Data"}}