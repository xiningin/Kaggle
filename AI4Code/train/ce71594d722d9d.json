{"cell_type":{"22266a3b":"code","133519de":"code","6c208a3e":"code","f2900e4d":"code","210530c8":"code","0ee7cd5a":"code","85b0c3bb":"code","c5d7a842":"code","7401a89c":"code","173ec98b":"code","2880cb3a":"code","8a142683":"code","a16c9e21":"code","5abf7ddf":"code","e697fa1c":"code","094f35d4":"code","c87413ff":"code","b820554c":"code","7a84c647":"code","46586856":"code","3068b462":"code","c6bd0158":"code","e9adeae9":"code","caed672f":"code","f6dc7e25":"code","4532115b":"code","e93a0069":"code","cab54263":"code","93c7aa14":"code","84420e2a":"code","fcfc5731":"code","d9efdb72":"code","716fe248":"code","570556a6":"code","2452ad85":"code","ff627e22":"code","a2310524":"code","8b4dd8dc":"code","317f67fa":"code","869d9a52":"code","db9e4f12":"code","ed1deded":"code","c0b6f042":"code","90561bd0":"markdown","9f313bd1":"markdown","5082a199":"markdown","e3509c09":"markdown","5beb979b":"markdown","93071008":"markdown","6db8447e":"markdown","64eb4d06":"markdown","47c8c555":"markdown","da0f0f53":"markdown","d517d6bb":"markdown","5cc11e41":"markdown","51ee6783":"markdown","cf140def":"markdown","22e7c9e9":"markdown","af4cbf41":"markdown","0491101c":"markdown","93a43504":"markdown","2ff74180":"markdown","75244a68":"markdown","9188e9ec":"markdown","5dc64bd0":"markdown","91a6e4d0":"markdown","32f19584":"markdown","97914387":"markdown","51a107a9":"markdown","55ef18ca":"markdown","768c42c6":"markdown","9dab9e95":"markdown","584d3669":"markdown","bb654e50":"markdown","97265aba":"markdown","74363497":"markdown","a04801ce":"markdown","1cab42a4":"markdown","089797a8":"markdown","55f310fc":"markdown","f16b7e36":"markdown","8c2c75b5":"markdown","a592df3f":"markdown","e14ad772":"markdown","a10c29ce":"markdown","8fec490b":"markdown","ba877276":"markdown","3534c65b":"markdown","cc12429b":"markdown","811be6f8":"markdown","c8dba2b0":"markdown","da8206b2":"markdown","010c8548":"markdown","532fb01e":"markdown","5397f600":"markdown","c0b898dc":"markdown","1adca515":"markdown","e6ccc19d":"markdown","a71b72bd":"markdown","6349dbfb":"markdown","27913f40":"markdown","515074f7":"markdown","b64d7eda":"markdown","6352aea7":"markdown","4889546b":"markdown","b5b8af3c":"markdown","07cbbd4a":"markdown","b90208ea":"markdown"},"source":{"22266a3b":"import numpy as np  # useful for many scientific computing in Python\nimport pandas as pd # primary data structure library\nfrom PIL import Image # converting images into arrays","133519de":"!conda install -c anaconda xlrd --yes","6c208a3e":"df_can = pd.read_excel('https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Data_Files\/Canada.xlsx',\n                       sheet_name='Canada by Citizenship',\n                       skiprows=range(20),\n                       skipfooter=2)\n\nprint('Data downloaded and read into a dataframe!')","f2900e4d":"# clean up the dataset to remove unnecessary columns (eg. REG) \ndf_can.drop(['AREA','REG','DEV','Type','Coverage'], axis = 1, inplace = True)\n\n# let's rename the columns so that they make sense\ndf_can.rename (columns = {'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace = True)\n\n# for sake of consistency, let's also make all column labels of type string\ndf_can.columns = list(map(str, df_can.columns))\n\n# set the country name as index - useful for quickly looking up countries using .loc method\ndf_can.set_index('Country', inplace = True)\n\n# add total column\ndf_can['Total'] =  df_can.sum (axis = 1)\n\n# years that we will be using in this lesson - useful for plotting later on\nyears = list(map(str, range(1980, 2014)))\nprint ('data dimensions:', df_can.shape)","210530c8":"%matplotlib inline\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches # needed for waffle Charts\n\nmpl.style.use('ggplot') # optional: for ggplot-like style\n\n# check for latest version of Matplotlib\nprint ('Matplotlib version: ', mpl.__version__) # >= 2.0.0","0ee7cd5a":"# let's create a new dataframe for these three countries \ndf_dsn = df_can.loc[['Denmark', 'Norway', 'Sweden'], :]\n\n# let's take a look at our dataframe\ndf_dsn","85b0c3bb":"# compute the proportion of each category with respect to the total\ntotal_values = sum(df_dsn['Total'])\ncategory_proportions = [(float(value) \/ total_values) for value in df_dsn['Total']]\n\n# print out proportions\nfor i, proportion in enumerate(category_proportions):\n    print (df_dsn.index.values[i] + ': ' + str(proportion))","c5d7a842":"width = 40 # width of chart\nheight = 10 # height of chart\n\ntotal_num_tiles = width * height # total number of tiles\n\nprint ('Total number of tiles is ', total_num_tiles)","7401a89c":"# compute the number of tiles for each catagory\ntiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n# print out number of tiles per category\nfor i, tiles in enumerate(tiles_per_category):\n    print (df_dsn.index.values[i] + ': ' + str(tiles))","173ec98b":"# initialize the waffle chart as an empty matrix\nwaffle_chart = np.zeros((height, width))\n\n# define indices to loop through waffle chart\ncategory_index = 0\ntile_index = 0\n\n# populate the waffle chart\nfor col in range(width):\n    for row in range(height):\n        tile_index += 1\n\n        # if the number of tiles populated for the current category is equal to its corresponding allocated tiles...\n        if tile_index > sum(tiles_per_category[0:category_index]):\n            # ...proceed to the next category\n            category_index += 1       \n            \n        # set the class value to an integer, which increases with class\n        waffle_chart[row, col] = category_index\n        \nprint ('Waffle chart populated!')","2880cb3a":"waffle_chart","8a142683":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()","a16c9e21":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])","5abf7ddf":"# instantiate a new figure object\nfig = plt.figure()\n\n# use matshow to display the waffle chart\ncolormap = plt.cm.coolwarm\nplt.matshow(waffle_chart, cmap=colormap)\nplt.colorbar()\n\n# get the axis\nax = plt.gca()\n\n# set minor ticks\nax.set_xticks(np.arange(-.5, (width), 1), minor=True)\nax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n# add gridlines based on minor ticks\nax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\nplt.xticks([])\nplt.yticks([])\n\n# compute cumulative sum of individual categories to match color schemes between chart and legend\nvalues_cumsum = np.cumsum(df_dsn['Total'])\ntotal_values = values_cumsum[len(values_cumsum) - 1]\n\n# create legend\nlegend_handles = []\nfor i, category in enumerate(df_dsn.index.values):\n    label_str = category + ' (' + str(df_dsn['Total'][i]) + ')'\n    color_val = colormap(float(values_cumsum[i])\/total_values)\n    legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n# add legend to chart\nplt.legend(handles=legend_handles,\n           loc='lower center', \n           ncol=len(df_dsn.index.values),\n           bbox_to_anchor=(0., -0.2, 0.95, .1)\n          )","e697fa1c":"def create_waffle_chart(categories, values, height, width, colormap, value_sign=''):\n\n    # compute the proportion of each category with respect to the total\n    total_values = sum(values)\n    category_proportions = [(float(value) \/ total_values) for value in values]\n\n    # compute the total number of tiles\n    total_num_tiles = width * height # total number of tiles\n    print ('Total number of tiles is', total_num_tiles)\n    \n    # compute the number of tiles for each catagory\n    tiles_per_category = [round(proportion * total_num_tiles) for proportion in category_proportions]\n\n    # print out number of tiles per category\n    for i, tiles in enumerate(tiles_per_category):\n        print (df_dsn.index.values[i] + ': ' + str(tiles))\n    \n    # initialize the waffle chart as an empty matrix\n    waffle_chart = np.zeros((height, width))\n\n    # define indices to loop through waffle chart\n    category_index = 0\n    tile_index = 0\n\n    # populate the waffle chart\n    for col in range(width):\n        for row in range(height):\n            tile_index += 1\n\n            # if the number of tiles populated for the current category \n            # is equal to its corresponding allocated tiles...\n            if tile_index > sum(tiles_per_category[0:category_index]):\n                # ...proceed to the next category\n                category_index += 1       \n            \n            # set the class value to an integer, which increases with class\n            waffle_chart[row, col] = category_index\n    \n    # instantiate a new figure object\n    fig = plt.figure()\n\n    # use matshow to display the waffle chart\n    colormap = plt.cm.coolwarm\n    plt.matshow(waffle_chart, cmap=colormap)\n    plt.colorbar()\n\n    # get the axis\n    ax = plt.gca()\n\n    # set minor ticks\n    ax.set_xticks(np.arange(-.5, (width), 1), minor=True)\n    ax.set_yticks(np.arange(-.5, (height), 1), minor=True)\n    \n    # add dridlines based on minor ticks\n    ax.grid(which='minor', color='w', linestyle='-', linewidth=2)\n\n    plt.xticks([])\n    plt.yticks([])\n\n    # compute cumulative sum of individual categories to match color schemes between chart and legend\n    values_cumsum = np.cumsum(values)\n    total_values = values_cumsum[len(values_cumsum) - 1]\n\n    # create legend\n    legend_handles = []\n    for i, category in enumerate(categories):\n        if value_sign == '%':\n            label_str = category + ' (' + str(values[i]) + value_sign + ')'\n        else:\n            label_str = category + ' (' + value_sign + str(values[i]) + ')'\n            \n        color_val = colormap(float(values_cumsum[i])\/total_values)\n        legend_handles.append(mpatches.Patch(color=color_val, label=label_str))\n\n    # add legend to chart\n    plt.legend(\n        handles=legend_handles,\n        loc='lower center', \n        ncol=len(categories),\n        bbox_to_anchor=(0., -0.2, 0.95, .1)\n    )","094f35d4":"width = 40 # width of chart\nheight = 10 # height of chart\n\ncategories = df_dsn.index.values # categories\nvalues = df_dsn['Total'] # correponding values of categories\n\ncolormap = plt.cm.coolwarm # color map class","c87413ff":"create_waffle_chart(categories, values, height, width, colormap)","b820554c":"# install wordcloud\n!conda install -c conda-forge wordcloud==1.4.1 --yes\n\n# import package and its set of stopwords\nfrom wordcloud import WordCloud, STOPWORDS\n\nprint ('Wordcloud is installed and imported!')","7a84c647":"# download file and save as alice_novel.txt\n!wget --quiet https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Data_Files\/alice_novel.txt\n\n# open the file and read it into a variable alice_novel\nalice_novel = open('alice_novel.txt', 'r').read()\n    \nprint ('File downloaded and saved!')","46586856":"stopwords = set(STOPWORDS)","3068b462":"# instantiate a word cloud object\nalice_wc = WordCloud(\n    background_color='white',\n    max_words=2000,\n    stopwords=stopwords\n)\n\n# generate the word cloud\nalice_wc.generate(alice_novel)","c6bd0158":"# display the word cloud\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","e9adeae9":"fig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\n# display the cloud\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","caed672f":"stopwords.add('said') # add the words said to stopwords\n\n# re-generate the word cloud\nalice_wc.generate(alice_novel)\n\n# display the cloud\nfig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","f6dc7e25":"# download image\n!wget --quiet https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/DV0101EN\/labs\/Images\/alice_mask.png\n    \n# save mask to alice_mask\nalice_mask = np.array(Image.open('alice_mask.png'))\n    \nprint('Image downloaded and saved!')","4532115b":"fig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(alice_mask, cmap=plt.cm.gray, interpolation='bilinear')\nplt.axis('off')\nplt.show()","e93a0069":"# instantiate a word cloud object\nalice_wc = WordCloud(background_color='white', max_words=2000, mask=alice_mask, stopwords=stopwords)\n\n# generate the word cloud\nalice_wc.generate(alice_novel)\n\n# display the word cloud\nfig = plt.figure()\nfig.set_figwidth(14) # set width\nfig.set_figheight(18) # set height\n\nplt.imshow(alice_wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()","cab54263":"df_can.head()","93c7aa14":"total_immigration = df_can['Total'].sum()\ntotal_immigration","84420e2a":"max_words = 90\nword_string = ''\nfor country in df_can.index.values:\n    # check if country's name is a single-word name\n    if len(country.split(' ')) == 1:\n        repeat_num_times = int(df_can.loc[country, 'Total']\/float(total_immigration)*max_words)\n        word_string = word_string + ((country + ' ') * repeat_num_times)\n                                     \n# display the generated text\nword_string","fcfc5731":"# create the word cloud\nwordcloud = WordCloud(background_color='white').generate(word_string)\n\nprint('Word cloud created!')","d9efdb72":"# display the cloud\nfig = plt.figure()\nfig.set_figwidth(14)\nfig.set_figheight(18)\n\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()","716fe248":"# import library\nimport seaborn as sns\n\nprint('Seaborn imported!')","570556a6":"# we can use the sum() method to get the total population per year\ndf_tot = pd.DataFrame(df_can[years].sum(axis=0))\n\n# change the years to type float (useful for regression later on)\ndf_tot.index = map(float, df_tot.index)\n\n# reset the index to put in back in as a column in the df_tot dataframe\ndf_tot.reset_index(inplace=True)\n\n# rename columns\ndf_tot.columns = ['year', 'total']\n\n# view the final dataframe\ndf_tot.head()","2452ad85":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot)","ff627e22":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot, color='green')","a2310524":"import seaborn as sns\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')","8b4dd8dc":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+')","317f67fa":"plt.figure(figsize=(15, 10))\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\n\nax.set(xlabel='Year', ylabel='Total Immigration') # add x- and y-labels\nax.set_title('Total Immigration to Canada from 1980 - 2013') # add title","869d9a52":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","db9e4f12":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('ticks') # change background to white background\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","ed1deded":"plt.figure(figsize=(15, 10))\n\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\nax = sns.regplot(x='year', y='total', data=df_tot, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigration to Canada from 1980 - 2013')","c0b6f042":"# create df_countries dataframe\ndf_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()\n\n# create df_total by summing across three countries for each year\ndf_total = pd.DataFrame(df_countries.sum(axis=1))\n\n# reset index in place\ndf_total.reset_index(inplace=True)\n\n# rename columns\ndf_total.columns = ['year', 'total']\n\n# change column year from string to int to create scatter plot\ndf_total['year'] = df_total['year'].astype(int)\n\n# define figure size\nplt.figure(figsize=(15, 10))\n\n# define background style and font size\nsns.set(font_scale=1.5)\nsns.set_style('whitegrid')\n\n# generate plot and add title and axes labels\nax = sns.regplot(x='year', y='total', data=df_total, color='green', marker='+', scatter_kws={'s': 200})\nax.set(xlabel='Year', ylabel='Total Immigration')\nax.set_title('Total Immigrationn from Denmark, Sweden, and Norway to Canada from 1980 - 2013')","90561bd0":"And what was the total immigration from 1980 to 2013?","9f313bd1":"This is not magic; it is *seaborn*! You can also customize the color of the scatter plot and regression line. Let's change the color to green.","5082a199":"Interesting! So in the first 2000 words in the novel, the most common words are **Alice**, **said**, **little**, **Queen**, and so on. Let's resize the cloud so that we can see the less frequent words a little better.","e3509c09":"Or to a white background with gridlines.","5beb979b":"As expected, the matrix consists of three categories and the total number of each category's instances matches the total number of tiles allocated to each category.","93071008":"`Word` clouds are commonly used to perform high-level analysis and visualization of text data. Accordinly, let's digress from the immigration dataset and work with an example that involves analyzing text data. Let's try to analyze a short novel written by **Lewis Carroll** titled *Alice's Adventures in Wonderland*. Let's go ahead and download a *.txt* file of the novel.","6db8447e":"I hope this kernal is useful to you to learn these Visualisation tools.\n\nIf you find this notebook helpful to you to learn, Please **Upvote**!!","64eb4d06":"Clean up data. We will make some modifications to the original dataset to make it easier to create our visualizations. Refer to our previous course [Data-Visualisation[beginners]-1](https:\/\/www.kaggle.com\/vijaygiitk\/data-visualisation-beginners-1)  for a detailed description of this preprocessing. ","47c8c555":"You can always customize the marker shape, so instead of circular markers, let's use '+'.","da0f0f53":"# 5. Word Clouds \n\n`Word` clouds (also known as text clouds or tag clouds) work in a simple way: the more a specific word appears in a source of textual data (such as a speech, blog post, or database), the bigger and bolder it appears in the word cloud.","d517d6bb":"Let's blow up the plot a little bit so that it is more appealing to the sight.","5cc11e41":"**Step 6**: Prettify the chart.","51ee6783":"Luckily, a Python package already exists in Python for generating `word` clouds. The package, called `word_cloud` was developed by **Andreas Mueller**. You can learn more about the package by following this [link](https:\/\/github.com\/amueller\/word_cloud\/).\n\nLet's use this package to learn how to generate a word cloud for a given text document.","cf140def":"Let's take a look at how the mask looks like.","22e7c9e9":"**Step 1**: The first step into creating a waffle chart is determing the proportion of each category with respect to the total.","af4cbf41":"Now it would very inefficient to repeat these seven steps every time we wish to create a `waffle` chart. So let's combine all seven steps into one function called `create_waffle_chart`. This function would take the following parameters as input:\n\n> 1. **categories**: Unique categories or classes in dataframe.\n> 1. **values**: Values corresponding to categories or classes.\n> 1. **height**: Defined height of waffle chart.\n> 1. **width**: Defined width of waffle chart.\n> 1. **colormap**: Colormap class\n> 1. **value_sign**: In order to make our function more generalizable, we will add this parameter to address signs that could be associated with a value such as %, $, and so on. **value_sign** has a default value of empty string.","0491101c":"Unfortunately, our immmigration data does not have any text data, but where there is a will there is a way. Let's generate sample text data from our immigration dataset, say text data of 90 words.","93a43504":"**Step 3**: The third step is using the proportion of each category to determe it respective number of tiles","2ff74180":"**Step 7**: Create a legend and add it to chart.","75244a68":"Hello Kagglers!\n\nIn the [previous kernel](https:\/\/www.kaggle.com\/vijaygiitk\/data-visualisation-intermediate-2), we have learned and explored the `Matplotlib` library with `Pie Charts`, `Box Plots`, `Scatter Plots` and `Bubble Plots`. ","9188e9ec":"With *seaborn*, generating a regression plot is as simple as calling the **regplot** function.","5dc64bd0":"There seems to be a new Python package for generating `waffle charts` called [PyWaffle](https:\/\/github.com\/gyli\/PyWaffle), but it looks like the repository is still being built. But feel free to check it out and play with it.","91a6e4d0":"Next, let's use the stopwords that we imported from `word_cloud`. We use the function set to remove any redundant stopwords.","32f19584":"# 1. Exploring Datasets with pandas and Matplotlib \n\nToolkits: The course heavily relies on [pandas](https:\/\/pandas.pydata.org) and [Numpy](https:\/\/numpy.org) for data wrangling, analysis, and visualization. The primary plotting library we will explore in the course is `Matplotlib`.\n\nDataset: Immigration to Canada from 1980 to 2013 - [International migration flows to and from selected countries - The 2015 revision](https:\/\/www.un.org\/en\/development\/desa\/population\/migration\/data\/empirical2\/migrationflows.asp) from United Nation's website\n\nThe dataset contains annual data on the flows of international migrants as recorded by the countries of destination. The data presents both inflows and outflows according to the place of birth, citizenship or place of previous \/ next residence both for foreigners and nationals. In this lab, we will focus on the Canadian Immigration data.","97914387":"Much better! However, **said** isn't really an informative word. So let's add it to our stopwords and re-generate the cloud.","51a107a9":"# 4. Waffle Charts\n\nA `waffle chart` is an interesting visualization that is normally created to display progress toward goals. It is commonly an effective option when you are trying to add interesting visualization features to a visual that consists mainly of cells, such as an Excel dashboard.","55ef18ca":"Import matplotlib:","768c42c6":"If you are not a big fan of the purple background, you can easily change the style to a white plain background.","9dab9e95":"And let's increase the size of markers so they match the new size of the figure, and add a title and x- and y-labels.","584d3669":"**Step 2**: The second step is defining the overall size of the `waffle` chart.","bb654e50":"Congratulations! you have learned how to create a plot (Waffle Charts, Word Clouds, and Regression Plots) with Matplotlib. ","97265aba":"## Thank you for completing this lession!","74363497":"Let's download and import our primary Canadian Immigration dataset using pandas `read_excel()` method. Normally, before we can do that, we would need to download a module which pandas requires to read in excel files. This module is **xlrd**. For your convenience, we have pre-installed this module, so you would not have to worry about that. Otherwise, you would need to run the following line of code to install the **xlrd** module.\n\nNow we are ready to read in our data.","a04801ce":"# 3. Visualizing Data using Matplotlib","1cab42a4":"Let's recall how our data looks like.","089797a8":"# 2. Downloading and Prepping Data","55f310fc":"Let's revisit the previous case study about Denmark, Norway, and Sweden.","f16b7e36":"Using countries with single-word names, let's duplicate each country's name based on how much they contribute to the total immigration.","8c2c75b5":"## Table of Contents\n\n1. [Exploring Datasets with pandas](#EDP)\n2. [Downloading and Prepping Data](#DPD)\n3. [Visualizing Data using Matplotlib](#VDM)\n4. [Waffle Charts](#WC)\n5. [Word Clouds](#WoC)\n6. [Regression Plots](#RP)","a592df3f":"Now to create a `waffle` chart, all we have to do is call the function `create_waffle_chart`. Let's define the input parameters:","e14ad772":"Create a word cloud object and generate a word cloud. For simplicity, let's generate a word cloud using only the first 2000 words in the novel.","a10c29ce":"And there you go! What a good looking delicious `waffle` chart, don't you think?","8fec490b":"According to the above word cloud, it looks like the majority of the people who immigrated came from one of 15 countries that are displayed by the word cloud. One cool visual that you could build, is perhaps using the map of Canada and a mask and superimposing the word cloud on top of the map of Canada. That would be an interesting visual to build!","ba877276":"### To learn more about advanced Visualisation Tools(Folium, Map with Markers and Choropleth Maps), Click [here](https:\/\/www.kaggle.com\/vijaygiitk\/data-visualisation-advanced-4) to go to next Kernel.","3534c65b":"Let's first install seaborn","cc12429b":"Really impressive!","811be6f8":"Unfortunately, unlike R, `waffle` charts are not built into any of the Python visualization libraries. Therefore, we will learn how to create them from scratch.","c8dba2b0":"Let's take a peek at how the matrix looks like.","da8206b2":"And now let's call our function to create a `waffle` chart.","010c8548":"Importing Primary Modules:","532fb01e":"And finally increase the font size of the tickmark labels, the title, and the x- and y-labels so they don't feel left out!","5397f600":"We are not dealing with any stopwords here, so there is no need to pass them when creating the word cloud.","c0b898dc":"In this lession, we will learn how to create `word clouds` and `waffle charts`. Furthermore, we will start learning about additional visualization libraries that are based on `Matplotlib`, namely the library `seaborn`, and we will learn how to create regression plots using the `seaborn` library.","1adca515":"Amazing! A complete scatter plot with a regression fit with 5 lines of code only. Isn't this really amazing?","e6ccc19d":"# 6. Regression Plots \n\n>  Seaborn is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics. You can learn more about *seaborn* by following this [link](https:\/\/seaborn.pydata.org\/) and more about *seaborn* regression plots by following this [link](http:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html).","a71b72bd":"Create a new dataframe that stores that total number of landed immigrants to Canada per year from 1980 to 2013.","6349dbfb":"Shaping the `word` cloud according to the mask is straightforward using `word_cloud` package. For simplicity, we will continue using the first 2000 words in the novel.","27913f40":"**Step 4**: The fourth step is creating a matrix that resembles the `waffle` chart and populating it.","515074f7":"**Questio**n: Use seaborn to create a scatter plot with a regression line to visualize the total immigration from Denmark, Sweden, and Norway to Canada from 1980 to 2013.","b64d7eda":"In kernel [Pie Charts, Box Plots, Scatter Plots, and Bubble Plots](https:\/\/www.kaggle.com\/vijaygiitk\/data-visualisation-intermediate-2), we learned how to create a *scatter* plot and then fit a regression line. It took ~20 lines of code to create the scatter plot along with the regression fit. In this final section, we will explore *seaborn* and see how efficient it is to create regression lines and fits using this library!","6352aea7":"Awesome! Now that the `word cloud` is created, let's visualize it.","4889546b":"**Step 5**: Map the `waffle` chart matrix into a visual.","b5b8af3c":"Based on the calculated proportions, Denmark will occupy 129 tiles of the `waffle` chart, Norway will occupy 77 tiles, and Sweden will occupy 194 tiles.","07cbbd4a":"Excellent! This looks really interesting! Another cool thing we can implement with the `word_cloud` package is superimposing the words onto a mask of any shape. Let's use a mask of Alice and her rabbit. We already created the mask for you, so let's go ahead and download it and call it **alice_mask.png**.","b90208ea":"First, let's install the package."}}