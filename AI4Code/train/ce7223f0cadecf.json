{"cell_type":{"2b2cf0a4":"code","f0347d9e":"code","c2bce459":"code","01af0654":"code","827511cb":"code","074b7da4":"code","ca6453f5":"code","b11496b6":"code","8ecfff67":"code","e2c15913":"code","2fc5c954":"code","f434604b":"code","9fdf59d2":"code","cd263e85":"code","1ddce765":"code","e2178ae5":"code","519a0c9b":"code","042bfb2d":"code","bc56eeda":"code","544e4332":"code","6bf12bc1":"code","44fd32a7":"code","c5999e5c":"code","f7ff7890":"code","02322455":"code","927fc271":"code","256a9cdf":"code","73281200":"markdown","304a3e3a":"markdown","a85f9c69":"markdown","c202ba84":"markdown","b673e930":"markdown","8d1ef91a":"markdown","450064ee":"markdown","b87f22c5":"markdown"},"source":{"2b2cf0a4":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime, timedelta\nimport os\nfrom tqdm import tqdm\n\nimport tensorflow as tf\n\nimport keras\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint,EarlyStopping\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Input, Convolution2D, ZeroPadding2D, MaxPooling2D, Activation\nfrom keras.layers import Conv2D, AveragePooling2D\nfrom keras.models import Model, Sequential\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import metrics\nfrom keras.models import load_model\n\nfrom keras.models import model_from_json\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nimport warnings\nwarnings.filterwarnings('ignore')","f0347d9e":"df = pd.read_csv('..\/input\/utk-face-extracted-info\/extracted_info.csv')\ndf.dropna(inplace=True)\ndf = df[df['Age'] <= 90]\n# df = df[df['Age'] > 16]\ndf = df[df['Age'] >= 0]\ndf = df.reset_index()\ndf = df.drop(columns = {'DateTime', 'Unnamed: 0', 'index'})\n\n'''\n'''\n# df['Name'] = df['Name'].apply(lambda x: '..\/input\/utkface-new\/UTKFace\/' + str(x))\n'''\n'''\nnum_classes = len(df['Age'].unique())\ndf.head()","c2bce459":"fig = plt.figure(figsize=(22, 5))\nfor i in range(10):  \n    fig.add_subplot(1, 10, i+1)\n    img = mpimg.imread(df.iloc[i]['Name'])\n#     img = np.random.randint(10, size=(h,w))\n    plt.imshow(img)\n    plt.axis('off')\n#     plt.title(\"Figure\" + str(i))\nplt.show()","01af0654":"df.hist()\n# df[df['Age'] < 16]","827511cb":"'''\nlen(df[df['Age']>93]['Age']) ------- just 46 people\nclasses = 101 #(0, 100])\nprint(\"number of output classes: \",classes)\n'''\n\ndf['Age'] = df['Age'] - 1\n# df['Age'] = df['Age'] - 16","074b7da4":"# dff = df[df['Race'] == 3]\n# dff['Age'].hist()","ca6453f5":"df_data = df.Name\ny_data = df.Age\n# y2_data = df.Gender\nX_train, X_test, y_train, y_test = train_test_split(df_data, y_data, test_size=0.20, random_state=45)\nd = {'Name':X_train,'Age':y_train}\ndf_train = pd.concat(d,axis=1)\ndf_train.head(3)","b11496b6":"df_data = df_train.Name\ny_data = df_train.Age\n# y2_data = df.Gender\nX_train, X_val, y_train, y_val = train_test_split(df_data, y_data, test_size=0.1, random_state=20)\nd = {'Name':X_train,'Age':y_train}\ntrain = pd.concat(d,axis=1)\ntrain.head(3)","8ecfff67":"d = {'Name':X_val,'Age':y_val}\nval = pd.concat(d,axis=1)\nprint(val.head(3))\n###################\nd = {'Name':X_test,'Age':y_test}\ndf_test = pd.concat(d,axis=1)\nprint(df_test.head(3))","e2c15913":"train['Age'] = train['Age'].astype('str')\ndf_test['Age'] = df_test['Age'].astype('str')\nval['Age'] = val['Age'].astype('str')","2fc5c954":"len(df[df['Age']>=80])\npd.merge(df, train, on='Name')['Race'].hist()","f434604b":"batch = 512\ntrain_gen = ImageDataGenerator(rescale=1.\/255)\ntest_gen = ImageDataGenerator(rescale=1.\/255)\ntrain_data = train_gen.flow_from_dataframe(dataframe = train, \n                                           #directory = train_folder, \n                                           x_col = 'Name',\n                                           y_col = 'Age', seed = 42,\n                                           batch_size = batch,\n                                           shuffle = True, \n                                           class_mode=\"sparse\",\n                                           target_size = (224, 224))\n\ntest_data = test_gen.flow_from_dataframe(dataframe = df_test,\n                                         #directory = test_folder,\n                                         x_col = 'Name',\n                                         y_col = 'Age',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\n\nval_data = train_gen.flow_from_dataframe(dataframe = val, \n                                           #directory = train_folder, \n                                           x_col = 'Name',\n                                           y_col = 'Age', seed = 42,\n                                           batch_size = batch,\n                                           shuffle = True, \n                                           class_mode=\"sparse\",\n                                           target_size = (224, 224))","9fdf59d2":"model = Sequential()\nmodel.add(ZeroPadding2D((1,1),input_shape=(224,224, 3)))\nmodel.add(Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(128, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(128, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(256, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(ZeroPadding2D((1,1)))\nmodel.add(Convolution2D(512, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(2,2)))\n \nmodel.add(Convolution2D(4096, (7, 7), activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(4096, (1, 1), activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Convolution2D(2622, (1, 1)))\nmodel.add(Flatten())\n# model.add(Activation('softmax'))\n\n# model.load_weights('..\/input\/vggfaceweights\/vgg_face_weights.h5')\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(num_classes))\n\nmodel.add(Activation('softmax'))","cd263e85":"model.output_shape","1ddce765":"model.load_weights('..\/input\/model-weights-for-utkface-dataset\/age_model_weights_utk_1.h5')","e2178ae5":"for layer in model.layers[:-7]:\n    layer.trainable = False\n\nmodel.compile(\n  optimizer='adam',\n  loss = tf.losses.SparseCategoricalCrossentropy(from_logits=True),\n  metrics=['accuracy'])\n\ncheckpointer = ModelCheckpoint(\n    filepath='classification_age_model_utk.hdf5'\n    , monitor = \"val_loss\"\n    , verbose=1\n    , save_best_only=True\n    , mode = 'auto'\n)\n    \ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=4)","519a0c9b":"__train = False\nif __train:\n    history = model.fit(\n        train_data,\n        validation_data=val_data,\n        epochs= 4,\n        callbacks = [checkpointer, callback],\n        shuffle=True\n    )\n    model.load_weights(\".\/classification_age_model_utk.hdf5\")\n    model.save_weights('age_model_weights_utk.h5')","042bfb2d":"__train = False\nif __train:\n    for layer in model.layers[:-2]:\n        layer.trainable = False","bc56eeda":"if __train:\n    history = model.fit(\n            train_data\n            , epochs=2\n            , validation_data=val_data\n            , callbacks=[checkpointer]\n            , shuffle=True\n    )\n    model = load_model(\".\/classification_age_model_utk.hdf5\")\n    model.save_weights('age_model_weights_utk.h5')\n\n# #     scores.append(score)\n\n# # #restore the best weights","544e4332":"# A = model.predict_classes(test_data)\nB = model.predict(test_data)\noutput_indexes = np.array([i for i in range(0, num_classes)])\napparent_predictions = np.sum(B * output_indexes, axis = 1)\nmodel.summary()","6bf12bc1":"# df_test['Predictions'] = A\ndf_test['Predictions'] = apparent_predictions\ndf_test.to_csv('Final.csv')","44fd32a7":"MAE = 0\ncount = 0\nfor i in range(len(df_test)):\n    if int(df_test.iloc[i]['Age']) < 16 or int(df_test.iloc[i]['Age']) > 80:\n        continue\n    count = count + 1\n    MAE = MAE + abs(int(df_test.iloc[i]['Age']) - int(df_test.iloc[i]['Predictions']))\nprint(\"MAE is \", MAE\/count)","c5999e5c":"df_test","f7ff7890":"df_test_race = pd.merge(df, df_test, on=\"Name\")\n\ndff = [1, 2, 3, 4, 5]\n\ndff[0] = df_test_race[df_test_race['Race'] == 0]\ndff[1] = df_test_race[df_test_race['Race'] == 1]\ndff[2] = df_test_race[df_test_race['Race'] == 2]\ndff[3] = df_test_race[df_test_race['Race'] == 3]\ndff[4] = df_test_race[df_test_race['Race'] == 4]\n\ndff[0]['Age_x'] = dff[0]['Age_x'].astype('str')\ndff[1]['Age_x'] = dff[1]['Age_x'].astype('str')\ndff[2]['Age_x'] = dff[2]['Age_x'].astype('str')\ndff[3]['Age_x'] = dff[3]['Age_x'].astype('str')\ndff[4]['Age_x'] = dff[4]['Age_x'].astype('str')","02322455":"batch = 512\ntrain_gen = ImageDataGenerator(rescale=1.\/255)\ntest_gen = ImageDataGenerator(rescale=1.\/255)\n\ntest_data_race = [1, 2, 3 ,4 ,5]\ntest_data_race[0] = test_gen.flow_from_dataframe(dataframe = dff[0],\n                                         x_col = 'Name',\n                                         y_col = 'Age_x',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[1] = test_gen.flow_from_dataframe(dataframe = dff[1],\n                                         x_col = 'Name',\n                                         y_col = 'Age_x',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[2] = test_gen.flow_from_dataframe(dataframe = dff[2],\n                                         x_col = 'Name',\n                                         y_col = 'Age_x',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[3] = test_gen.flow_from_dataframe(dataframe = dff[3],\n                                         x_col = 'Name',\n                                         y_col = 'Age_x',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))\ntest_data_race[4] = test_gen.flow_from_dataframe(dataframe = dff[4],\n                                         x_col = 'Name',\n                                         y_col = 'Age_x',\n                                         batch_size = batch,\n                                         shuffle = True,\n                                         class_mode='sparse',\n                                         target_size = (224, 224))","927fc271":"for iii in range(len(df['Race'].unique())):\n    mae = 0\n    B = model.predict(test_data_race[iii])\n    output_indexes = np.array([i for i in range(0, num_classes)])\n    apparent_predictions = np.sum(B * output_indexes, axis = 1)\n    dff[iii]['Predictions'] = apparent_predictions\n    count = 0\n    for i in range(len(dff[iii])):\n        if int(dff[iii].iloc[i]['Age_x']) < 16 or int(df_test.iloc[i]['Age']) > 80:\n            continue\n        count = count +  1\n        mae = mae + abs(int(dff[iii].iloc[i]['Age_x']) - int(dff[iii].iloc[i]['Predictions']))\n    print(\"MAE is \", mae\/count, \"for race\", iii)","256a9cdf":"model","73281200":"## Age, Gender and Race Distribution in the original Dataset","304a3e3a":"## Training","a85f9c69":"<a href=\".\/classification_age_model_utk.hdf5\"> Download Model Weights <\/a>","c202ba84":"## Loading Previously Trained Model","b673e930":"## Visualising Some Images in the Dataset","8d1ef91a":"## Testing MAE For Separate Races","450064ee":"## Generating the Test, Train and Validation Datasets","b87f22c5":"## Visualising Race Distribution In the train dataset."}}