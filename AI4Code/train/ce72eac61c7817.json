{"cell_type":{"65a7438b":"code","e1bd5ecb":"code","ccd607f0":"code","0f6e93e4":"code","ba417300":"code","20929e24":"code","2291e455":"code","d8bcd590":"code","93eb2ec5":"code","4df5cd1d":"code","195fb008":"code","fd3c7739":"markdown"},"source":{"65a7438b":"import numpy as np, pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom tqdm import tqdm\nfrom tqdm import tqdm_notebook\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.semi_supervised import LabelSpreading\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures","e1bd5ecb":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","ccd607f0":"train.shape","0f6e93e4":"test.shape","ba417300":"oof_train = np.zeros(len(train)) \npred_te_test = np.zeros(len(test))\n\ncols = [c for c in train.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","20929e24":"for i in tqdm_notebook(range(512)):\n    if (i==0):\n        print(\"Starting the modelling\")\n    train2 = train[train['wheezy-copper-turtle-magic']==i]\n    test2 = test[test['wheezy-copper-turtle-magic']==i]\n    idx1 = train2.index; idx2 = test2.index\n    \n    y = train2.loc[idx1]['target']\n    train2.reset_index(drop=True,inplace=True)\n\n    sel = VarianceThreshold(threshold=1.5)\n    train3 = sel.fit_transform(train2[cols])  \n    test3 = sel.transform(test2[cols])\n\n    skf = StratifiedKFold(n_splits=7, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train3, train2['target']):\n        \n        clf = QuadraticDiscriminantAnalysis(reg_param=0.25)\n        clf.fit(train3[train_index,:],train2.loc[train_index]['target'])\n        oof_train[idx1[test_index]] = clf.predict_proba(train3[test_index,:])[:,1]\n        pred_te_test[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n    \nprint(\"ROC for training = \",roc_auc_score(train['target'],oof_train))","2291e455":"saved_targets = train['target'].values.copy()","d8bcd590":"test[\"target\"] = pred_te_test","93eb2ec5":"oof_ls = np.zeros(len(train)) \npred_te_ls = np.zeros(len(test))","4df5cd1d":"for k in tqdm_notebook(range(512)):\n    train2 = train[train['wheezy-copper-turtle-magic']==k] \n    train2p = train2.copy(); idx1 = train2.index \n    test2 = test[test['wheezy-copper-turtle-magic']==k]\n    \n    test2p = test2[ (test2['target']<=0.001) | (test2['target']>=0.999) ].copy()\n    test2p.loc[ test2p['target']>=0.5, 'target' ] = 1\n    test2p.loc[ test2p['target']<0.5, 'target' ] = 0 \n    train2p = pd.concat([train2p,test2p],axis=0)\n    train2p.reset_index(drop=True,inplace=True)\n    \n    test2[\"target\"] = -1\n    #merging train2p with full test\n    train3p = pd.concat([train2p,test2],axis=0)\n    train3p.reset_index(drop=True,inplace=True)\n    \n    sel = VarianceThreshold(threshold=1.5).fit(train3p[cols])     \n    train4p = sel.transform(train3p[cols])\n    train4 = sel.transform(train2[cols])\n    test4 = sel.transform(test2[cols])\n    \n    skf = StratifiedKFold(n_splits=25, random_state=42, shuffle=True)\n    for train_index, test_index in skf.split(train4p, train3p['target']):\n        test_index3 = test_index[ test_index<len(train4) ] \n        \n        clf = LabelSpreading(gamma=0.01,kernel='rbf', max_iter=10)\n        clf.fit(train4p[train_index,:],train3p.loc[train_index]['target'])\n        oof_ls[idx1[test_index3]] = clf.predict_proba(train4[test_index3,:])[:,1]\n        pred_te_ls[test2.index] += clf.predict_proba(test4)[:,1] \/ skf.n_splits\n\nauc = roc_auc_score(saved_targets,oof_ls)\nprint('CV for LabelSpreading =',round(auc,5))               ","195fb008":"#submission\nsub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = pred_te_ls\nsub.to_csv('submission.csv', index=False)","fd3c7739":"**In this script we are using semisupervised, LabelSpreading Algorithm for prediction.**"}}