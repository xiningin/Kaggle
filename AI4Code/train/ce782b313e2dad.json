{"cell_type":{"1128dcf8":"code","350576a6":"code","6fc413f2":"code","bb280494":"code","c1484b16":"code","da25bf28":"code","1ad312f4":"code","ebd17744":"code","0824d40a":"code","e09f0ec7":"code","96645a65":"code","dacd67b4":"code","8ed8b283":"code","082c210c":"code","298ef9a6":"code","6478609e":"code","e9ec417b":"code","946ed0f6":"code","161bc36b":"code","7636ec1b":"code","98ab7395":"code","58f88a37":"code","3a7c1a8b":"code","ba18c7c3":"code","17d1684b":"code","ca174b83":"code","8784eda1":"code","b59a0e65":"code","c2e7997c":"code","2ba193e5":"code","9fe037d4":"code","9446cb2c":"code","2284a7db":"code","8ea916c5":"code","3a704caa":"code","ebe3206b":"code","c0d12787":"code","685f26b7":"markdown","0cb79b45":"markdown","c4301d86":"markdown","ddc71d1a":"markdown","552f5991":"markdown","e2f91819":"markdown","e0ef495f":"markdown","01656300":"markdown","f494f486":"markdown","3afa5ccb":"markdown","92275007":"markdown","c23733bc":"markdown","7d9191e9":"markdown","9554373c":"markdown","1f21a3d2":"markdown","75b237c1":"markdown","ffe39bc4":"markdown","eafc26d0":"markdown","517fb58c":"markdown","fcc74298":"markdown","67396aa5":"markdown","385af43f":"markdown","23b2ed31":"markdown","1a825ef2":"markdown","942536b7":"markdown","927df654":"markdown","49c8b709":"markdown","f6ed299a":"markdown","8579a0af":"markdown","e0b1b0ea":"markdown","29406a56":"markdown","509c36c1":"markdown","18a2fb14":"markdown","9239bc02":"markdown","bd119612":"markdown","94b408e2":"markdown","a1da40f8":"markdown","4cc97b4e":"markdown","7d8d2945":"markdown","cf5fdbb1":"markdown","2d3a888f":"markdown"},"source":{"1128dcf8":"# This kernel is my first hands-on machine learning, any comments and suggestions are well received! (Sorry for grammar)","350576a6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef get_missing_data_table(dataframe):\n    '''Return the sum of missing values in dataframe and their percentage'''\n    total = dataframe.isnull().sum()\n    percentage = dataframe.isnull().sum() \/ dataframe.isnull().count()\n    \n    missing_data = pd.concat([total, percentage], axis='columns', keys=['TOTAL','PERCENTAGE'])\n    return missing_data.sort_index(ascending=True)\n\ndef get_null_observations(dataframe, column):\n    '''Return a DataFrame object with all rows with missing value in column'''\n    return dataframe[pd.isnull(dataframe[column])]\n\ndef delete_null_observations(dataframe, column):\n    '''Drop all rows of dataframe with missing value in column'''\n    fixed_df = dataframe.drop(get_null_observations(dataframe,column).index)\n    return fixed_df\n    \ndef transform_dummy_variables(dataframe, columns):\n    '''Return the One Hot encoding for all of the columns'''\n    df = dataframe.copy()\n    for column in columns:    \n        df[column] = pd.Categorical(df[column])\n    df = pd.get_dummies(df, drop_first=False)\n    return df\n\ndef imput_nan_values(dataframe, column, strateg):\n    from sklearn.preprocessing import Imputer\n    imp = Imputer(strategy=strateg)\n    df = dataframe.copy()\n    df[column] = imp.fit_transform(df[column].values.reshape(-1,1))\n    return df\n\nprint(\"Everything's ready!\")","6fc413f2":"df = pd.read_csv('..\/input\/train.csv')\ndf.head()","bb280494":"df.describe()","c1484b16":"get_missing_data_table(df)","da25bf28":"# Delete Cabin\ndf = df.drop('Cabin', axis='columns') \n\n# Delete null observations in Embarked and reset the index in the DataFrame object\ndf = delete_null_observations(df, column='Embarked')\ndf = df.reset_index(drop=True)\n\n# Fill missing values in 'Age' with arbitrary value 1000\ndf['Age'] = df['Age'].fillna(value=1000)\n\n#Corroborate missing values elimination\nget_missing_data_table(df)","1ad312f4":"%%HTML\n<div class='tableauPlaceholder' id='viz1531198007302' style='position: relative'><noscript><a href='#'><img alt='Survived ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Survived&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;Survived' \/><param name='tabs' value='no' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Survived&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='filter' value='publish=yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531198007302');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","ebd17744":"%%HTML\n<div class='tableauPlaceholder' id='viz1531199081048' style='position: relative'><noscript><a href='#'><img alt='Sex ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Sex&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;Sex' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Sex&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531199081048');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","0824d40a":"%%HTML\n<div class='tableauPlaceholder' id='viz1531629813892' style='position: relative'><noscript><a href='#'><img alt='Fare ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;7X&#47;7XN3CC9F8&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='path' value='shared&#47;7XN3CC9F8' \/> <param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;7X&#47;7XN3CC9F8&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531629813892');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","e09f0ec7":"%%HTML\n<div class='tableauPlaceholder' id='viz1531359837278' style='position: relative'><noscript><a href='#'><img alt='Pclass ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Pclass&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;Pclass' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Pclass&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531359837278');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","96645a65":"%%HTML\n<div class='tableauPlaceholder' id='viz1531361426048' style='position: relative'><noscript><a href='#'><img alt='Embarked ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Embarked&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;Embarked' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Embarked&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531361426048');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","dacd67b4":"%%HTML\n<div class='tableauPlaceholder' id='viz1531361822427' style='position: relative'><noscript><a href='#'><img alt='SibSp ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;SibSp&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;SibSp' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;SibSp&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531361822427');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>\n\n<div class='tableauPlaceholder' id='viz1531361843315' style='position: relative'><noscript><a href='#'><img alt='Parch ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Parch&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;Parch' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Parch&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531361843315');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","8ed8b283":"# family size = sibsp + parch\ndf['Family Size'] = df['SibSp'] + df['Parch']\ndf = df.drop('SibSp', axis='columns')\ndf = df.drop('Parch', axis='columns')\n#Show first 5 records\ndf.head(5)","082c210c":"%%HTML\n<div class='tableauPlaceholder' id='viz1531362393780' style='position: relative'><noscript><a href='#'><img alt='Family Size ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;FamilySize&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;FamilySize' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;FamilySize&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531362393780');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","298ef9a6":"#Print the name of the first passenger\nprint(df['Name'][0])","6478609e":"name_row = df['Name'].copy()\nname_row = pd.DataFrame(name_row.str.split(', ',1).tolist(), columns = ['Last name', 'Name'])\nname_row = name_row['Name'].copy()\nname_row = pd.DataFrame(name_row.str.split('. ',1).tolist(),columns=[\"Title\",\"Name\"])\nname_row = name_row['Title'].copy()\n\nname_row.unique()","e9ec417b":"%%HTML\n<div class='tableauPlaceholder' id='viz1531365012539' style='position: relative'><noscript><a href='#'><img alt='Title Distribution ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;TitleDistribution&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;TitleDistribution' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;TitleDistribution&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531365012539');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","946ed0f6":"%%HTML\n<div class='tableauPlaceholder' id='viz1531365774117' style='position: relative'><noscript><a href='#'><img alt='Title ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;PG&#47;PG9N22M7X&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='path' value='shared&#47;PG9N22M7X' \/> <param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;PG&#47;PG9N22M7X&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531365774117');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","161bc36b":"#Add 'Title'\ntitles = name_row.tolist()\nfor i in range(len(titles)):\n    title = titles[i]\n    if title != 'Master' and title != 'Miss' and title != 'Mr' and title !='Mrs':\n        titles[i] = 'Other'\n\nname_row = pd.DataFrame(titles, columns=['Title'])\ndf['Title'] = name_row.copy()\n\n#Drop 'Name'\ndf = df.drop('Name', axis='columns')\ndf.head(5)","7636ec1b":"%%HTML\n<div class='tableauPlaceholder' id='viz1531366447873' style='position: relative'><noscript><a href='#'><img alt='Title (group) Distribution ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;TitlegroupDistribution&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;TitlegroupDistribution' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;TitlegroupDistribution&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531366447873');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>\n<br>\n<div class='tableauPlaceholder' id='viz1531367117802' style='position: relative'><noscript><a href='#'><img alt='Average age of each title group ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Averageagebytitlegroup&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='TitanicsexABtest&#47;Averageagebytitlegroup' \/><param name='tabs' value='no' \/><param name='toolbar' value='no' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Ti&#47;TitanicsexABtest&#47;Averageagebytitlegroup&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1531367117802');                    var vizElement = divElement.getElementsByTagName('object')[0];                    vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';                    var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","98ab7395":"test_df = df.copy()\ntest_df = pd.DataFrame([df['Age'].tolist(), df['Title'].tolist()]).transpose()\ntest_df.columns = ['Age','Title']\n\ntest_df_list = test_df.values #Age and Title of each row\nfor i in range(len(test_df_list)):\n    age = test_df_list[i][0]\n    title = test_df_list[i][1]\n    \n    if age == 1000: #Missing value\n        if title == 'Master':\n            test_df_list[i][0] = 5.19\n        elif title == 'Miss':\n            test_df_list[i][0] = 21.87\n        elif title == 'Mr':\n            test_df_list[i][0] = 32.18\n        elif title == 'Mrs':\n            test_df_list[i][0] = 35.48\n        else:\n            test_df_list[i][0] = 42.81\n\ndf['Age'] = test_df['Age'].copy() #Replace 'Age' in main DataFrame\n\n#now Max value is not '1000'\ndf['Age'] = df['Age'].astype('float64')\ndf['Age'].describe()","58f88a37":"df = df.drop('Ticket', axis='columns')\ndf = df.drop('PassengerId', axis='columns')\n#Show the actual structure\ndf.head(5)","3a7c1a8b":"#Treat categorical features\ndf = transform_dummy_variables(df,['Sex','Pclass','Embarked','Title'])\n#Show changes\ndf.head(5)","ba18c7c3":"#Getting X and y\nX_train = df.iloc[:,1:].values\ny = df.iloc[:,0].values\n\n#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\n\n#Show changes\nprint('X_train: {0}'.format(X_train[0:5]))\nprint('y: {0}'.format(y[0:5]))","17d1684b":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y)","ca174b83":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]\n        }\n\nfolds = 4\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\n\nrandom_search = RandomizedSearchCV(classifier, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=skf.split(X_train,y), verbose=3, random_state=1001, iid=True)\nrandom_search.fit(X_train, y)\n\nxgboost_classifier = random_search.best_estimator_","8784eda1":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier()\nclassifier.fit(X_train, y)","b59a0e65":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nparams = {\n        'n_estimators': [5, 10, 15],\n        'criterion': ['gini', 'entropy'],\n        'max_features': ['auto', 'sqrt', 'log2', None],\n        'max_depth': [None, 3, 4, 5]\n        }\n\nfolds = 4\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\n\nrandom_search = RandomizedSearchCV(classifier, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=skf.split(X_train,y), verbose=3, random_state=1001, iid=True)\nrandom_search.fit(X_train, y)\n\nrandomforest_classifier = random_search.best_estimator_","c2e7997c":"from sklearn.svm import SVC\nclassifier = SVC(probability=True)\nclassifier.fit(X_train, y)","2ba193e5":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nparams = {\n        'C': [0.5, 1, 1.5],\n        'kernel': ['rbf', 'linear', 'poly', 'sigmoid'],\n        'gamma': [0.001, 0.0001],\n        'class_weight': [None, 'balanced']\n        }\n\nfolds = 4\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\n\nrandom_search = RandomizedSearchCV(classifier, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=skf.split(X_train,y), verbose=3, random_state=1001, iid=True)\nrandom_search.fit(X_train, y)\n\nsvc_classifier = random_search.best_estimator_","9fe037d4":"from sklearn.ensemble import VotingClassifier\nclassifier = VotingClassifier(estimators=[('xgb', xgboost_classifier), ('rf',randomforest_classifier), ('svc',svc_classifier)], voting='soft')\nclassifier.fit(X_train, y)","9446cb2c":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=classifier, X=X_train, y=y, cv=5)\nprint('accuracy mean: {0}'.format(accuracies.mean()))\nprint('accuracy std: {0}'.format(accuracies.std()))","2284a7db":"#Importing test dataset\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf_test.describe()","8ea916c5":"get_missing_data_table(df_test)","3a704caa":"#Fill missing values in Fare using the median\ndf_test = imput_nan_values(df_test,'Fare','median')\n\n#Fill missing values in Age according to the passanger's title\ndf_test['Age'] = df_test['Age'].fillna(value=1000)\nname_row = df_test['Name'].copy()\nname_row = pd.DataFrame(name_row.str.split(', ',1).tolist(), columns = ['Last name', 'Name'])\nname_row = name_row['Name'].copy()\nname_row = pd.DataFrame(name_row.str.split('. ',1).tolist(),columns=[\"Title\",\"Name\"])\nname_row = name_row['Title'].copy()\n\ntitles = name_row.tolist()\nfor i in range(len(titles)):\n    title = titles[i]\n    if title != 'Master' and title != 'Miss' and title != 'Mr' and title !='Mrs':\n        titles[i] = 'Other'\n\nname_row = pd.DataFrame(titles, columns=['Title'])\ndf_test['Title'] = name_row.copy()\n\ntest_df = df_test.copy()\ntest_df = pd.DataFrame([df_test['Age'].tolist(), df_test['Title'].tolist()]).transpose()\ntest_df.columns = ['Age','Title']\n\ntest_df_list = test_df.values\nfor i in range(len(test_df_list)):\n    age = test_df_list[i][0]\n    title = test_df_list[i][1]\n    \n    if age == 1000:\n        if title == 'Master':\n            test_df_list[i][0] = 5.19\n        elif title == 'Miss':\n            test_df_list[i][0] = 21.87\n        elif title == 'Mr':\n            test_df_list[i][0] = 32.18\n        elif title == 'Mrs':\n            test_df_list[i][0] = 35.48\n        else:\n            test_df_list[i][0] = 42.81\n\ndf_test['Age'] = test_df['Age'].copy()\n\n#Show changes\nget_missing_data_table(df_test)","ebe3206b":"#Drop Cabin\ndf_test = df_test.drop('Cabin', axis='columns')\n\n#Create Family Size = Sibsp + Parch\ndf_test['Family Size'] = df_test['SibSp'] + df_test['Parch']\ndf_test = df_test.drop('SibSp', axis='columns')\ndf_test = df_test.drop('Parch', axis='columns')\n\n#Drop irrelevant features\ndf_test = df_test.drop('Name', axis='columns')\ndf_test = df_test.drop('Ticket', axis='columns')\ndf_test = df_test.drop('PassengerId', axis='columns')\n\n#Transform dummy variables\ndf_test['Age'] = df_test['Age'].astype('float64')\ndf_test = transform_dummy_variables(df_test,['Sex','Pclass','Embarked','Title'])\n\n#Show changes\ndf_test.head(5)","c0d12787":"#Predictions\nX_test = df_test.values\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_test = sc.fit_transform(X_test)\n\npred = classifier.predict(X_test)\n\n# Create result dataframe and 'predictions.csv'\ntest_dataset = pd.read_csv('..\/input\/test.csv')\nps_id = test_dataset.iloc[:,0].values\nd = {'PassengerId':ps_id, 'Survived':pred}\ndf = pd.DataFrame(data=d)\ndf = df.set_index('PassengerId')\ndf.to_csv('predictions.csv')\n\n#Show structure\ndf.head(15)","685f26b7":"The plot shows that females have a higher survival chance than males (the reason is probably the rule of \"women and children first \"), so 'Sex' is definitly a feature to be used in the model.\n\n**Fare**\n\nTo analyze 'Fare' I decided to create 3 groups of values : \n* Less than 50\n* 50 to 100\n* More than 100","0cb79b45":"**Age**\n\nTo deal with missing values in 'Age' I decided to use the average age for the passenger's title.\n\nThe age distribution and average age by title is presented in the charts below:","c4301d86":"Again Random search is used for hyperparameter tuning:","ddc71d1a":"# Import required libraries\nWith some functions that I was constantly using throughout the code.","552f5991":"Let's fill the missing values according with those values:","e2f91819":"The difference between Mr vs Miss is greater than Female vs Male in 'Sex' because of the childrens recorded as Male. The feature 'Title' describe with more details the relationship between 'Sex' feature and the outcome 'Survived'. Title is statistically significant for the model.\n\nLet's create this feature and drop 'Name':","e0ef495f":"This test dataset must be treated like the train dataset, 'Cabin' will be excluded as 'PassengerId', and 'Name, 'SibSp' and 'Parch' will be replaced by 'Family Size' and 'Title' will come up from 'Name'.\n\nTo deal with the missing values in 'Age' I will use the same method based on the passenger's title. The missing value in 'Fare' will be filled using the median.\n\nLet's correct those missing values:","01656300":"# Part Three: Predicting the Test Dataset","f494f486":"**Feature transformations**\n\nLet's make the other feature transfomations:","3afa5ccb":"I decided to create these title groups:\n* Master\n* Miss\n* Mr\n* Mrs\n* Others","92275007":"As I am going to use tree-based models for predictions it is not necessary to think about the 'Dummy Variables Trap' so the last thing to do is to split df into X and y. Scaling the values of the independent variables is also important:","c23733bc":"**Ticket and PassengerId**\n\nThe feature 'PassengerId' is unique for each passenger like 'Name' and it doesn't have a relation with 'Survived'. For 'Ticket' however the codification of the value could mean something useful for the model but for now I decided to exclude both variables from the model.\n\nLet's drop those columns:","7d9191e9":"For 'Pclass' the graph shows that 1st and 2nd classes have a greater positive impact on the survival chance, so 'Pclass' will be included in the model.\n\n**Embarked**","9554373c":"**Load train dataset**\n","1f21a3d2":"'SibSp' and 'Parch' are not very clear in the graph, the subclasses don't have an equal amount of records, and the ones in 'SibSp' are very close to the 41% line. I decided to exclude both from the model.\n\nHowever to get value out of those features I decided to take the sum as a single feature called 'Family Size' the mainly reason is to answer if the size of the family affects the survival chance (a dissaster like Titanic looks worse if you are alone).","75b237c1":"**Creation of the csv file with predictions**","ffe39bc4":"** Dummy variables**\n\nNow the DataFrame is almost complete, but features 'Sex', 'Pclass', 'Embarked' and 'Title' are categorical, let's transform those dummy variables using one of the functions defined at the beginning of this kernel:","eafc26d0":"The test results have an accuracy of more than 80% and a standard deviation of less than 3%, which I consider good for the problem.","517fb58c":"To deal with those missing values I decided to exclude 'Cabin' due 77% missing values (high percentages like this usually mean something, a future job could be doing something about it).\n\nThe 2 rows where 'Embarked' is a missing value could be deleted or filled using the median, in this case I decided to exclude those rows for the training process.\n\nThe 19,87% missing values in age must be treated with care. I initially decided to fill those rows with arbitrary value '1000'.","fcc74298":"**Feature analysis and transformations** \n\nFor this part I'll be using Tableau to perform a basic *ad-hoc* A\/B test for the features, the idea is to describe the relation between each feature and the survival rate.\n\nFirst, let's take a look at the survival rate.","67396aa5":"![score](https:\/\/i.imgur.com\/Q3I02Zy.png)","385af43f":"After load the train dataset an initial approach is to describe the numerical features.","23b2ed31":"**Load test dataset**","1a825ef2":"The graph shows a possitive impact for 'Cherbourg' but the other two are very close to the 41% line, I decided to use 'Pclass' in the model anyways but maybe 'Pclass' is not relevant enaugh and could be excluded from the model.\n\n** SibSp and Parch**","942536b7":"**Dealing with missing values**\nThe description of the test dataset shows missing values in 'Age' and 'Fare'. Let's see:","927df654":"# Part Two: Modeling\n\nTo build the model I decided to use tree-based algorithms because this is a prediction problem, the main goal is to get very accurate forecast, so the best decision is to use very high flexibity with low bias models like Support Vector Machines and Boosting.\n\n Kuhn and Johnson said in their book Applied Predictive Modeling that\n> \u201cUnfortunately, the predictive models that are most powerful are usually the least interpretable.\u201c \n\nThis trade-off between prediction accuracy and model interpretabilty is the reason why I decided to choose XGBoost, Random Forest and Supporting Vector Machine classifiers for the ensamble learning model.","49c8b709":"According to the graph, having one to three family members means a greater survival chance than being alone. However, more than three reduce that chance. 'Family Size' is definitly a feature for the model.\n\n**Name**\n\nThe feature 'Name' can't be tested with the type of graph used for the other variables, but each passenger has a unique name and by simple intuition, 'Name' is not a statistically singificant feature.\n\nNonetheless, the format that name is recorded in the dataset includes a title for each passenger, e.g. 'Mr' for the first record.","f6ed299a":"The most relevant information here are the minimum and maximum values which show, for example, the range of people from babies up to elders (80 Y.O.). Also, the count value in 'Age' is a sign for possible missing values.","8579a0af":"**Fit and hyperparameter tuning of an ensamble learning Voting classfier to the training set**\n\nTo get all the potential out of these three models I decided to use a soft Voting classifier due to the tuning of hyperparameters. I am confident that all three models are well calibrated so a prediction based on probabilities will be more efficient than a simple majority vote (hard voting).\n\nlet's implement the Voting classifier:","e0b1b0ea":"The 'Age' analysis showed that women are more likely to survive than men but title is a more complete category as the title is assigned according to the age of the passenger (important because of the missing 'Age' values to be filled in).\n\nlet's get the titles in the dataset and their distribution by age:","29406a56":"The chance of survival is 41% for a random selection. This will be the metric to determine if a feature affects the survival chance.\n\nIf a feature shows patterns that can increase or decrease that 41% then said feature is statistically significant. \n\n**Sex**","509c36c1":"# Part One: Data Preparation","18a2fb14":"**Fit and hyperparameter tuning of Supporting Vector Machine classifier to the training set**","9239bc02":"**Cross-validation test**\n\nEverything is ready to test the model, the way I decided to do it was through a cross-validation test with 5 folds:","bd119612":"Hyperparameter tuning with Random search:","94b408e2":"For the hyperparameter tuning I decided to use random search:","a1da40f8":"**Fit and hyperparameter tuning of Random Forest classifier to the training set**","4cc97b4e":"**Dealing with missing values**\n\nFirst let's visualize the sum of missing values for each feature and their percentage.","7d8d2945":"The graph shows that a higher fare means a greater survival chance. 'Fare' is another variable to take into acount in the model.\n\n**Pclass**","cf5fdbb1":"**Fit and hyperparameter tuning of XGBoost classifier to the training set**","2d3a888f":"# Table of contents\n* **Import required  libraries and helpful functions**\n* **Part One: Data Preparation**\n    * Load train dataset\n    * Dealing with missing values\n    * Feature analysis and transformations\n* **Part Two: Modeling**\n    * Fit and hyperparameter tuning of XGBoost classifier to the training set\n    * Fit and hyperparameter tuning of Random Forest classifier to the training set\n    * Fit and hyperparameter tuning of Supporting Vector Machine classifier to the training set\n    * Fit and hyperparameter tuning of an ensamble learning Voting classfier to the training set\n    * Cross-validation test\n* **Part Three: Predicting the Test Dataset**\n    * Load test dataset\n    * Dealing with missing values\n    * Feature transformations\n    * Creation of the csv file with predictions\n    "}}