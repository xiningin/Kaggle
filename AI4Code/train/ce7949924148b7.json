{"cell_type":{"a984abc2":"code","0e65577a":"code","59525432":"code","0bc1293d":"code","6feb5351":"code","0d674a9f":"code","97083384":"code","58b7943c":"code","4e2dbe18":"code","c256daa1":"code","f0b9ce86":"code","e0b9a0db":"code","db4a0e38":"code","3389cfb3":"code","1889f89f":"code","0bcb753b":"code","90ff6259":"code","d5cb6263":"code","dc38d039":"code","a33ce1d8":"code","1cedc734":"code","4e9026d1":"code","18666329":"code","5aea1ccc":"code","357d4858":"code","167ac268":"code","3ee80da1":"code","0e07bff2":"code","53027578":"code","079c451e":"code","cac98e88":"code","8b1f2602":"code","96c100be":"code","c8b5fd6b":"code","a3f75834":"markdown","83b7040e":"markdown","7c72a850":"markdown","73ec234a":"markdown","4ae47ea2":"markdown","9b19a0a2":"markdown","b65cf954":"markdown","51073fd4":"markdown"},"source":{"a984abc2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e65577a":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n%matplotlib inline\nwarnings.filterwarnings('ignore')","59525432":"df = pd.read_csv('..\/input\/wine-quality\/winequalityN.csv')","0bc1293d":"df.head()","6feb5351":"# statistical info\ndf.describe()","0d674a9f":"# datatype info\ndf.info()","97083384":"# null values:\ndf.isnull().sum()","58b7943c":"# filling the missing values:\nfor col , value in df.items():\n    if col != 'type': # type col -> object datatype\n        df[col] = df[col].fillna(df[col].mean())","4e2dbe18":"df.isnull().sum()","c256daa1":"# box plots:\nfig, ax = plt.subplots(ncols=6, nrows=2, figsize=(20,10))\nindex = 0\nax = ax.flatten()\nfor col, value in df.items():\n    if col != 'type':\n        sns.boxplot(y=col, data=df, ax=ax[index])\n        index += 1\nplt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)","f0b9ce86":"fig, ax = plt.subplots(ncols=6, nrows=2, figsize=(20,10))\nindex = 0\nax = ax.flatten()\n\nfor col, value in df.items():\n    if col != 'type':\n        sns.distplot(value, ax=ax[index])\n        index += 1\nplt.tight_layout(pad=0.5, w_pad=0.7, h_pad=5.0)","e0b9a0db":"# log transformation:\ndf['free sulfur dioxide'] = np.log(1 + df['free sulfur dioxide'])","db4a0e38":"sns.distplot(df['free sulfur dioxide'])","3389cfb3":"sns.countplot(df['type'])","1889f89f":"sns.countplot(df['quality'])","0bcb753b":"corr = df.corr()","90ff6259":"plt.figure(figsize=(20,10))\nsns.heatmap(corr , annot = True )","d5cb6263":"X = df.drop(columns=['type', 'quality'])","dc38d039":"y = df['quality']","a33ce1d8":"from imblearn.over_sampling import SMOTE","1cedc734":"y.value_counts()","4e9026d1":"oversample = SMOTE(k_neighbors=4)","18666329":"X, y = oversample.fit_resample(X, y)","5aea1ccc":"y.value_counts()","357d4858":"from sklearn.model_selection import cross_val_score, train_test_split","167ac268":"def classify(model, X, y):\n    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n    model.fit(x_train, y_train)\n    print(\"Accuracy:\", model.score(x_test, y_test) * 100)\n    \n    score = cross_val_score(model, X, y, cv=5)\n    print(\"CV Score:\", np.mean(score)*100)","3ee80da1":"from sklearn.linear_model import LogisticRegression","0e07bff2":"model = LogisticRegression()","53027578":"classify(model, X, y)","079c451e":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nclassify(model, X, y)","cac98e88":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nclassify(model, X, y)","8b1f2602":"from sklearn.ensemble import ExtraTreesClassifier\nmodel = ExtraTreesClassifier()\nclassify(model, X, y)","96c100be":"import xgboost as xgb\nmodel = xgb.XGBClassifier()\nclassify(model, X, y)","c8b5fd6b":"import lightgbm \nmodel = lightgbm.LGBMClassifier()\nclassify(model, X, y)","a3f75834":"# IMPORT MODULES:","83b7040e":"# EXPLORATORY DATA ANALYSIS:","7c72a850":"# CLASS IMBALANCEMENT:","73ec234a":"# MODEL TRAINING:","4ae47ea2":"# INPUT SPLIT:","9b19a0a2":"# COORELATION MATRIX:","b65cf954":"# PREPROCESSING THE DATA:","51073fd4":"# LOADING THE DATASET:"}}