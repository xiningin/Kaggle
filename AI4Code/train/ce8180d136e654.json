{"cell_type":{"2ab711e4":"code","39896a19":"code","bc83c622":"code","89a4eee5":"code","a29fafee":"code","5931f3d6":"code","791705cd":"code","2e29d5a4":"code","627e1e9c":"code","d31d2c90":"code","8a91b5b2":"code","e666da8c":"code","245b8de8":"code","0ec14a6f":"code","dc576b36":"code","91ef2d35":"code","431ef48a":"code","c99c2910":"code","793f8bf5":"code","f27bbf01":"code","d41e6179":"code","53147d43":"code","fadf5540":"code","7995a3ab":"code","cbad4ba4":"code","2d37627f":"code","514a6462":"code","baca0ea0":"code","cf04787e":"code","7783d1a1":"code","c9eef15a":"code","7e73e03e":"code","a3324143":"code","b333b10b":"code","5ea39c57":"code","e87935c4":"code","d1a27769":"code","66154376":"code","1ba071a2":"code","e29f1a6c":"code","48475b01":"code","a5dde3c3":"code","b979bd3a":"code","d36bd378":"code","2e31df2d":"code","67f16ba0":"code","9343e648":"code","6e61a180":"code","3232a77b":"code","93552a00":"code","647a7ae1":"code","12644e63":"markdown","45ff9523":"markdown","3b33f440":"markdown","9524c45e":"markdown","3395df18":"markdown","6f34efda":"markdown","3d383170":"markdown","f3dbdf44":"markdown"},"source":{"2ab711e4":"# loading requred packages \nimport numpy as np\nimport pandas as pd\nimport math \nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns\nimport plotly.offline as pyoff\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\nimport warnings                             # To ignore any warnings\nwarnings.filterwarnings('ignore') \nfrom sklearn import preprocessing\ninit_notebook_mode(connected=True)","39896a19":"#creating the layout for the polts\n\ndef generate_layout_bar(col_name):\n    layout_bar = go.Layout(\n        autosize=False, # auto size the graph? use False if you are specifying the height and width\n        width=800, # height of the figure in pixels\n        height=600, # height of the figure in pixels\n        title = \"Distribution of {} column\".format(col_name), # title of the figure\n        # more granular control on the title font \n        titlefont=dict( \n            family='Courier New, monospace', # font family\n            size=14, # size of the font\n            color='black' # color of the font\n        ),\n        # granular control on the axes objects \n        xaxis=dict( \n        tickfont=dict(\n            family='Courier New, monospace', # font family\n            size=14, # size of ticks displayed on the x axis\n            color='black'  # color of the font\n            )\n        ),\n        yaxis=dict(\n#         range=[0,100],\n            title='Percentage',\n            titlefont=dict(\n                size=14,\n                color='black'\n            ),\n        tickfont=dict(\n            family='Courier New, monospace', # font family\n            size=14, # size of ticks displayed on the y axis\n            color='black' # color of the font\n            )\n        ),\n        font = dict(\n            family='Courier New, monospace', # font family\n            color = \"white\",# color of the font\n            size = 12 # size of the font displayed on the bar\n                )  \n        )\n    return layout_bar","bc83c622":"dftrain = pd.read_csv(\"..\/input\/us-electrical-appliances-explored-data-for-finial\/Train.csv\")\n#dftest = pd.read_excel(\"Test.xlsx\")","89a4eee5":"dftrain.head(5)","a29fafee":"dftrain.info()","5931f3d6":"value,count=np.unique(dftrain['Suspicious'],return_counts=True)\npercent=(count\/dftrain.shape[0])*100\nprint(np.asarray([value,count,percent]).T)","791705cd":"data1 = [\n    go.Bar(\n        x=value, # assign x as the dataframe column 'x'\n        y=count,\n        text = percent,\n        textposition = 'auto'\n    )\n]\n\nlayout = go.Layout(\n    barmode='stack',\n    title='Distribution of the Traget attribute',\n    xaxis=dict(title='TotalSumSalesValue'),\n    yaxis=dict(title='Quantity')\n)\n\nfig = go.Figure(data=data1, layout=layout)\n\n# IPython notebook\niplot(fig)","2e29d5a4":"oneunitSalesValue = dftrain['TotalSalesValue']\/dftrain['Quantity']\ndftrain[\"OneUnitSalesValue\"]=oneunitSalesValue\ndftrain.head(10)","627e1e9c":"AvgSalesValue = dftrain['OneUnitSalesValue']\/dftrain['TotalSalesValue']\ndftrain[\"AvgUnitSales\"]=AvgSalesValue\ndftrain.head()","d31d2c90":"df1=dftrain.groupby(['SalesPersonID','ProductID']).mean()['Quantity']\ndf1 = (pd.DataFrame(df1))\ndf1 = df1.reset_index()\ndf1.columns","8a91b5b2":"data=pd.merge(dftrain,df1,on=['SalesPersonID','ProductID'],how='left')","e666da8c":"data = data.rename(index = str,columns ={'Quantity_y':'AvgQuantityperProductID','Quantity_x':'Quantity'})","245b8de8":"df1=data.groupby(['SalesPersonID','ProductID']).mean()['TotalSalesValue']\ndf1 = (pd.DataFrame(df1))\ndf1 = df1.reset_index()\ndf1.columns","0ec14a6f":"data=pd.merge(data,df1,on=['SalesPersonID','ProductID'],how='left')\ndata = data.rename(index = str,columns ={'TotalSalesValue_x':'TotalSalesValue','TotalSalesValue_y':'AvgSelingPrice'})\ndata = data.rename(index = str,columns ={'AvgUnitSales':'ratioOfcontribution'})\ndata.head()","dc576b36":"Yplot1=data.groupby(['Suspicious']).sum()['AvgQuantityperProductID']\nYplot1=pd.DataFrame(Yplot1)\nYplot1","91ef2d35":"data1 = [\n    go.Bar(\n        x=Yplot1.index, # assign x as the dataframe column 'x'\n        y=Yplot1['AvgQuantityperProductID'],\n        #text=data.groupby(['Suspicious']).sum()['AvgQuantityperProductID'],\n        #textposition='auto'\n    )\n]\n\nlayout = go.Layout(\n    barmode='stack',\n    autosize=True,\n    title='Distribution of AvgQuantity per ProductID W.R.T Traget'\n)\n\nfig = go.Figure(data=data1, layout=layout)\n\n# IPython notebook\niplot(fig)","431ef48a":"#total sum of Quantity, TotalSalesValue, OneUnitSalesValue, ratioOfcontribution, AvgQuantityperProductID, AvgSelingPrice W.R.T SalesPersonID\nsumofpersonID=data.groupby(['Suspicious']).sum()\nsumofpersonID.head()","c99c2910":"v1=data.groupby(['SalesPersonID']).sum()\nv1.head()","793f8bf5":"#top and last 10 quantity soled by a salesperson \ntop_ten_quantity_by_SalesPersonID=v1.sort_values(by='Quantity',ascending=False).head(10)\nlast_ten_quantity_by_SalesPersonID=v1.sort_values(by='Quantity',ascending=False).tail(10)","f27bbf01":"top_ten_quantity_by_SalesPersonID","d41e6179":"yes=data[data['Suspicious']=='Yes'].sum()\nNo=data[data['Suspicious']=='No'].sum()\nindeterminate=data[data['Suspicious']=='indeterminate'].sum()","53147d43":"data1 = [\n    go.Bar(\n        x=top_ten_quantity_by_SalesPersonID.index, # assign x as the dataframe column 'x'\n        y=top_ten_quantity_by_SalesPersonID['Quantity'],\n        text=top_ten_quantity_by_SalesPersonID['Quantity'],\n        textposition='auto'\n    )\n]\n\nlayout = go.Layout(\n    barmode='stack',\n    title='Top ten Quantity sold W.R.T salespersonID'\n)\n\nfig = go.Figure(data=data1, layout=layout)\n\n# IPython notebook\niplot(fig)","fadf5540":"yesm=data[data['Suspicious']=='Yes']\nNom=data[data['Suspicious']=='No']\nindeterminatem=data[data['Suspicious']=='indeterminate']","7995a3ab":"yesm[yesm['SalesPersonID']=='C21636'].head()","cbad4ba4":"indeterminatem[indeterminatem['SalesPersonID']=='C21636'].head()","2d37627f":"Nom[Nom['SalesPersonID']=='C21636'].head()","514a6462":"#sum of the total sales value\nsumoftotalSales=data['TotalSalesValue'].sum()\nsumoftotalSales","baca0ea0":"#sum of the total Quantity value\nsumoftotalQuantitysold=data['Quantity'].sum()\nsumoftotalQuantitysold","cf04787e":"print((top_ten_quantity_by_SalesPersonID['Quantity']\/sumoftotalSales)*100)\nprint((last_ten_quantity_by_SalesPersonID['Quantity']\/sumoftotalSales)*100)","7783d1a1":"data1 = [\n    go.Bar(\n        x=top_ten_quantity_by_SalesPersonID.index, # assign x as the dataframe column 'x'\n        y=((top_ten_quantity_by_SalesPersonID['Quantity']\/sumoftotalSales)*100),\n        text=((top_ten_quantity_by_SalesPersonID['Quantity']\/sumoftotalSales)*100),\n        marker=dict(\n        color='rgb(0,200,0)',# Lava (#CC0E1D)\n#         color = 'rgb(200,0,0)'   `\n        ),\n        textposition='auto',\n        \n    )\n]\n\nlayout = go.Layout(\n    barmode='stack',\n    autosize=True,\n    title='Percentage of total Quantity sold by salesperson, by total sales '\n    \n)\n\nfig = go.Figure(data=data1, layout=layout)\n\n# IPython notebook\niplot(fig)","c9eef15a":"data1 = [\n    go.Bar(\n        x=last_ten_quantity_by_SalesPersonID.index, # assign x as the dataframe column 'x'\n        y=((last_ten_quantity_by_SalesPersonID['Quantity']\/sumoftotalSales)*100),\n        text=((last_ten_quantity_by_SalesPersonID['Quantity']\/sumoftotalSales)*100),\n        marker=dict(\n        color='rgb(200,100,0)',# Lava (#CC0E1D)\n#         color = 'rgb(0,0,0)'   `\n        ),\n        textposition='auto'\n    )\n]\n\nlayout = go.Layout(\n    barmode='stack',\n    autosize=True,\n    title='Percentage of last 10 Quantity sold by salesperson by total sales'\n    \n)\n\nfig = go.Figure(data=data1, layout=layout)\n\n# IPython notebook\niplot(fig)","7e73e03e":"yesm[yesm['SalesPersonID']=='C21887'].head()","a3324143":"indeterminatem[indeterminatem['SalesPersonID']=='C21887'].head()","b333b10b":"Nom[Nom['SalesPersonID']=='C21887'].head()","5ea39c57":"prod=data.groupby(['ProductID']).sum()","e87935c4":"top_ten_quantity_by_ProductID=prod.sort_values(by='Quantity',ascending=False).head(10)\nlast_ten_quantity_by_ProductID=prod.sort_values(by='Quantity',ascending=False).tail(10)","d1a27769":"((top_ten_quantity_by_ProductID['Quantity']\/sumoftotalQuantitysold)*100)\n((last_ten_quantity_by_ProductID['Quantity']\/sumoftotalQuantitysold)*100)","66154376":"data1 = [\n    go.Bar(\n        x=top_ten_quantity_by_ProductID.index, # assign x as the dataframe column 'x'\n        y=((top_ten_quantity_by_ProductID['Quantity']\/sumoftotalQuantitysold)*100),\n        text=((top_ten_quantity_by_ProductID['Quantity']\/sumoftotalQuantitysold)*100),\n        marker=dict(\n        color='rgb(200,2000,0)',# Lava (#CC0E1D)\n#         color = 'rgb(0,0,0)'   `\n        ),\n        textposition='auto'\n    )\n]\n\nlayout = go.Layout(\n        autosize=True,\n        title='Top performers based on productID Quantity',\n        xaxis=dict(title='ProductID'),\n        yaxis=dict(title='Quantity percentage')\n)\n\nfig = go.Figure(data=data1, layout=layout)\n\n# IPython notebook\niplot(fig)","1ba071a2":"indeterminatem[indeterminatem['ProductID']=='PR6550'].head()","e29f1a6c":"yesm[yesm['ProductID']=='PR6550'].head()","48475b01":"Nom[Nom['ProductID']=='PR6550'].head()","a5dde3c3":"percentageoftotalSaleswhenyes=((yes['TotalSalesValue']\/sumoftotalSales)*100)\npercentageoftotalSaleswhenyes","b979bd3a":"percentageoftotalSaleswhenNo=((No['TotalSalesValue']\/sumoftotalSales)*100)\npercentageoftotalSaleswhenNo","d36bd378":"percentageoftotalSaleswhenindeterminate=((indeterminate['TotalSalesValue']\/sumoftotalSales)*100)\npercentageoftotalSaleswhenindeterminate","2e31df2d":"sumoftotalQuantity=data['Quantity'].sum()\nsumoftotalQuantity","67f16ba0":"percentageoftotalQuantitywhenyes=((yes['Quantity']\/sumoftotalQuantitysold)*100)\npercentageoftotalQuantitywhenyes","9343e648":"percentageoftotalQuantitywhenNo=((No['Quantity']\/sumoftotalQuantitysold)*100)\npercentageoftotalQuantitywhenNo","6e61a180":"percentageoftotalQuantitywhenindeterminate=((indeterminate['Quantity']\/sumoftotalQuantitysold)*100)\npercentageoftotalQuantitywhenindeterminate","3232a77b":"df1 = dftrain.groupby(['SalesPersonID'])[['TotalSalesValue']].mean()\ndf1 = df1.rename(columns={'TotalSalesValue': 'Average Transactions SalesP'})\ndftrain = dftrain.join(df1,on = ['SalesPersonID'])","93552a00":"dftrain.head()","647a7ae1":"value=np.unique(dftrain['Suspicious'])\ncount = dftrain.groupby(['Suspicious'])[['Average Transactions SalesP']].mean()\n#percent=(count\/dftrain.shape[0])*100\nprint(np.asarray([value,count,percent]).T)\n#dftrain.groupby(['Suspicious'])[['Average Transactions SalesP']].mean().plot.bar(color = \"#b53856\")","12644e63":"SalesPersonID - C21636 and the Product witch he like to sell - PR6444 Quantity sold 662 + 470 = 1132 hmm, lets have look at this guy.","45ff9523":"let's derive more attributes to see if we can pull out some insights ","3b33f440":"Looking for the hights salespersonID contribution, in the Suspicious column","9524c45e":"Looking for the hights ProductID contribution, in the Suspicious column","3395df18":"'yes' says some fishy things are going on and it's at 0.42%. even though most of the sales fall into 'indeterminate' that still means there can be some fraud sales happening there too, where it's not popping up on the radar of the company and they didn't give us any info on how they classified salesman.","6f34efda":"this guy C21636 likes to keep his product flying. well is it clean?mm","3d383170":"When you are the large US electrical appliances retailer with many branches, where the salesmen are given free will to sell the product at his profit margin, well there are going to smart salesmen who will do too good. we'll see what are salesman up to.\nThe dataset is of sales where the salesmen are classified into three risk factors in attribute Suspicious -  'indeterminate' 'no' 'yes' by the company using this we'll do a EDA.\n","f3dbdf44":"# EDA "}}