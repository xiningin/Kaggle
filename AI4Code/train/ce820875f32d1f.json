{"cell_type":{"cb366343":"code","dfb71820":"code","d7bc9359":"code","de13a800":"code","ce442f48":"code","c40d0f61":"code","495ce3cc":"code","4315d945":"code","f411514a":"code","ead96d26":"code","9d5c7096":"code","ba2c246d":"code","e40a78e1":"code","e9db6b24":"code","35a58561":"code","026c2a6f":"code","fbc0d4e2":"code","759cf143":"code","7de4c3dc":"code","5c83583e":"code","2803bf24":"markdown","1bbafae2":"markdown","5ebaf0ba":"markdown","85694058":"markdown"},"source":{"cb366343":"from typing import Iterable, List, Dict, Callable\nimport os\nimport gc","dfb71820":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d7bc9359":"PATH_TO_DATA = \"\/kaggle\/input\/condition-monitoring-of-hydraulic-systems\/\"\nNUMBER_OF_PROFILES = 2205\nPROFILE_MAX_SAMPLE_RATE = 6000\nTARGET_NAMES = [\"cooler\", \"valve\", \"leakage\", \"accumulator\", \"stable\"]\n\nPLOT_STYLE = \"darkgrid\"","de13a800":"TARGET_VALUES_MAP = {\n    \"cooler\": {\n        3: \"close to total failure\",\n        20: \"reduced effifiency\",\n        100: \"full efficiency\",\n    },\n    \"valve\": {\n        100:\"optimal switching behavior\",\n        90: \"small lag\",\n        80: \"severe lag\",\n        73: \"close to total failure\",\n    }, \n    \"leakage\": {\n        0: \"no\",\n\t    1: \"weak\",\n\t    2: \"severe\",\n    },\n    \"accumulator\": {\n        130: \"optimal pressure\",\n    \t115: \"slightly reduced pressure\",\n\t    100: \"severely reduced pressure\",\n\t    90:  \"close to total failure\",\n     },\n     \"stable\":{\n        0: \"yes\",\n\t    1: \"not\",\n     }\n}","ce442f48":"sersor_files_config = [\n    {\"name\": \"CE\", \"upsample_coeff\": 100},\n    {\"name\": \"CP\", \"upsample_coeff\": 100},\n    {\"name\": \"EPS1\", \"upsample_coeff\": 1},\n    {\"name\": \"FS1\", \"upsample_coeff\": 10},\n    {\"name\": \"FS2\", \"upsample_coeff\": 10},\n    {\"name\": \"PS1\", \"upsample_coeff\": 1},\n    {\"name\": \"PS2\", \"upsample_coeff\": 1},\n    {\"name\": \"PS3\", \"upsample_coeff\": 1},\n    {\"name\": \"PS4\", \"upsample_coeff\": 1},\n    {\"name\": \"PS5\", \"upsample_coeff\": 1},\n    {\"name\": \"PS6\", \"upsample_coeff\": 1},\n    {\"name\": \"SE\", \"upsample_coeff\": 100},\n    {\"name\": \"TS1\", \"upsample_coeff\": 100},\n    {\"name\": \"TS2\", \"upsample_coeff\": 100},\n    {\"name\": \"TS3\", \"upsample_coeff\": 100},\n    {\"name\": \"TS4\", \"upsample_coeff\": 100},\n    {\"name\": \"VS1\", \"upsample_coeff\": 100},\n]","c40d0f61":"def get_files_with_resample(config: List[Dict]) -> Iterable[np.ndarray]:\n    for file in config:\n        data = np.genfromtxt(PATH_TO_DATA + file[\"name\"] + \".txt\", dtype=float, delimiter='\\t')\n        yield np.repeat(data, file[\"upsample_coeff\"], axis=1).flatten()","495ce3cc":"def load_feature_dataframe(config: List[Dict]) -> pd.DataFrame:\n    columns = [file[\"name\"] for file in config]\n    data = np.stack(get_files_with_resample(config), axis=-1)\n    data_df = pd.DataFrame(data, columns=columns)\n\n    prodile_ids = np.repeat(range(1, NUMBER_OF_PROFILES+1), PROFILE_MAX_SAMPLE_RATE)\n    prodile_ids_df = pd.DataFrame(prodile_ids, columns=[\"profile_id\"])\n\n    return pd.concat([prodile_ids_df, data_df], axis=1, sort=False)","4315d945":"def load_targets(filename: str) -> pd.DataFrame:\n    conditions_data = np.genfromtxt(PATH_TO_DATA + filename, dtype=int, delimiter='\\t')\n    conditions_df = pd.DataFrame(conditions_data, columns=TARGET_NAMES)\n\n    prodile_ids = range(1, NUMBER_OF_PROFILES+1)\n    prodile_ids_df = pd.DataFrame(prodile_ids, columns=[\"profile_id\"])\n\n    return pd.concat([prodile_ids_df, conditions_df], axis=1, sort=False)","f411514a":"feature_df = load_feature_dataframe(sersor_files_config)\ntarget_df = load_targets(\"profile.txt\") #Note that targets is define for profile, not to points\n\n_ = gc.collect()","ead96d26":"feature_df.head()","9d5c7096":"feature_df.tail()","ba2c246d":"target_df.head()","e40a78e1":"target_df.tail()","e9db6b24":"def generate_encoder(target_labels: Dict[str, Dict[int, str]], feature_name: str) -> Callable:\n    encodes = target_labels[feature_name]\n\n    def encode(value: int) -> str:\n        return encodes[value]\n    \n    return encode","35a58561":"def plot_profile(df: pd.DataFrame, target_df: pd.DataFrame, profile_id: int, features: List[str] = []):\n    filtered_df = df[features][df.profile_id == profile_id].reset_index()\n\n    profile_target_values = target_df[target_df.profile_id == profile_id][TARGET_NAMES].to_dict(\"records\")[0]\n    profile_target_labels = [f\"{k}: {generate_encoder(TARGET_VALUES_MAP, k)(v)}\" for k, v in profile_target_values.items()]\n\n    with sns.axes_style(PLOT_STYLE):\n        figure, axes = plt.subplots(len(features), 1, figsize=(15, len(features)*2), sharex=True)\n        figure.suptitle(f'{\", \".join(profile_target_labels)}', fontsize=14)\n        plt.xlabel(\"sample\")\n\n        for ax, feature_name in zip(axes, features):\n            ax.plot(filtered_df[feature_name])\n            ax.set_ylabel(feature_name)","026c2a6f":"plot_profile(feature_df, profile_id=1, target_df=target_df, features=[\"CE\", \"PS1\", \"VS1\"])","fbc0d4e2":"plot_profile(feature_df, profile_id=35, target_df=target_df, features=[\"CE\", \"PS1\", \"TS1\"])","759cf143":"plot_profile(feature_df, profile_id=2205, target_df=target_df, features=[\"CE\", \"PS1\", \"PS5\"])","7de4c3dc":"def count_targets(df: pd.DataFrame):\n    for target in TARGET_NAMES:\n        encoder = generate_encoder(TARGET_VALUES_MAP, target)\n        data = df[target].map(encoder)\n        print(f\"Distribution of '{target}' target:\\n{data.value_counts()}\\n\")","5c83583e":"count_targets(target_df)","2803bf24":"### Basic EDA","1bbafae2":"### Load data","5ebaf0ba":"### Imports","85694058":"### Constants"}}