{"cell_type":{"ca65f58e":"code","cfbd9ceb":"code","95539b16":"code","3c1fd2d3":"code","92141b02":"code","f013d6e3":"code","a6e7a5cd":"code","afa00a88":"code","c7940f72":"code","0c577f4b":"code","f1dfed7b":"code","615cfd44":"code","f9fa04ec":"code","ef6eac0f":"code","5e7c73e8":"code","1e0a3fa8":"code","75b9c3af":"code","5aa5a5f0":"code","31932c68":"code","2d6a7eaf":"code","02f1ec99":"code","ed58e8db":"code","96242b23":"code","e30ae340":"code","33c44481":"code","52495f81":"code","706fd8cd":"code","95375bdc":"code","4ab6d7ab":"code","f891c6ab":"code","5152ddf6":"code","ba853525":"code","7daf81ea":"code","375a9374":"code","8d7e7d7b":"code","322d3478":"code","b47fec86":"code","e4c56fa7":"code","00880a92":"code","f02bf8e7":"code","f3f8783e":"code","e3ea5f41":"code","21cb73bf":"code","c3b8d62a":"code","54458147":"code","cc10be10":"code","5f1bdad6":"code","c66ae405":"code","c56f3a45":"code","835a45db":"code","91e7f322":"code","63c26723":"code","c8e33ca9":"code","d6f354be":"code","5e2699dc":"code","62176bfc":"code","f5274b22":"code","da61fd00":"code","bc3d1b4e":"code","9c88ca42":"code","2be1c848":"code","a8cd8ae2":"code","9c6d308f":"code","29c58143":"code","2efcf6d8":"code","dbd9c1b3":"code","2dfe9a08":"code","52cba2c8":"markdown","1c030f0e":"markdown","2e173d2b":"markdown","4c250f1a":"markdown","6cd7a588":"markdown","87e93a18":"markdown","2568d1a1":"markdown","14893424":"markdown","86091ebe":"markdown","a54f6643":"markdown","8c9e055a":"markdown","14953db3":"markdown","1d7d15eb":"markdown","07cb31ef":"markdown","afc14f21":"markdown","a658832b":"markdown","7ba48b05":"markdown","b4fb550b":"markdown","f8bc45f6":"markdown","bdee7f7d":"markdown","824e61af":"markdown","e93df9be":"markdown","7664a451":"markdown","8218a0e3":"markdown","a0fe6602":"markdown","732f4753":"markdown","167aae04":"markdown","20f01fe6":"markdown","d23a49c7":"markdown","aed7083b":"markdown","63476da4":"markdown","84c14801":"markdown","1fbc8f64":"markdown","1517dcac":"markdown","e33dce32":"markdown","39bb5d4a":"markdown","0ab465ec":"markdown","13ee5143":"markdown","24b024c5":"markdown","ed370d2c":"markdown","102167f2":"markdown","a4016439":"markdown","4bcece4c":"markdown","e95dd405":"markdown","12de2412":"markdown","b390bc19":"markdown","4b9ac786":"markdown","1968714b":"markdown","e5542ec6":"markdown","cf5c3923":"markdown"},"source":{"ca65f58e":"# Import libraries\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","cfbd9ceb":"# Collecting data\n\n# The train data set will be used to train our model \n# We will test our model with the test data set\n#train_data = pd.read_csv(\"train.csv\")\n#test_data = pd.read_csv(\"test.csv\")\n\n# Kaggle\n\ntrain_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","95539b16":"train_data.head()","3c1fd2d3":"test_data.head()","92141b02":"print(train_data.shape,test_data.shape)","f013d6e3":"# Survived\/Deceased v Sex and Pclass\n\nf, axes = plt.subplots(nrows=1,ncols=2, figsize=(8, 4))\nsns.countplot(x=\"Survived\",data=train_data,hue=\"Sex\",ax=axes[0])\nsns.countplot(x=\"Survived\",data=train_data,hue=\"Pclass\",ax=axes[1])","a6e7a5cd":"# Siblings or spouses aboard\n\nplt.figure(figsize=(12,6))\nsns.countplot(x=\"Survived\",data=train_data,hue=\"SibSp\")","afa00a88":"# Parents or children aboard\n\nplt.figure(figsize=(12,6))\nsns.countplot(x=\"Survived\",data=train_data,hue=\"Parch\")","c7940f72":"# Age \n\nplt.figure(figsize=(12,6))\nsns.distplot(train_data[\"Age\"],bins=60)","0c577f4b":"train_data.describe()","f1dfed7b":"train_data.head()","615cfd44":"# Missing data\n\nprint(train_data.isnull().sum())\nprint(\"\\n\")\nprint(test_data.isnull().sum())","f9fa04ec":"# Sex\n# We need to transform words (male \/ female) into numbers so that computer understands\n# We could have used the function pandas.get_dummies\n\ntrain_data.loc[train_data[\"Sex\"] == \"male\",\"Sex\"] = 1\ntrain_data.loc[train_data[\"Sex\"] == \"female\",\"Sex\"] = 0\n\n# Test data\n\ntest_data.loc[train_data[\"Sex\"] == \"male\",\"Sex\"] = 1\ntest_data.loc[train_data[\"Sex\"] == \"female\",\"Sex\"] = 0","ef6eac0f":"# Embarked\n# We are missing 2 values, we will fill them with \"S\" because it is the most common\n# As we did before, we will turn letters into numbers so that the model can work with them\n\n# Train data\n\ntrain_data[\"Embarked\"] = train_data[\"Embarked\"].fillna(\"S\")\ntrain_data.loc[train_data[\"Embarked\"] == \"S\",\"Embarked\"] = 0\ntrain_data.loc[train_data[\"Embarked\"] == \"C\",\"Embarked\"] = 1\ntrain_data.loc[train_data[\"Embarked\"] == \"Q\",\"Embarked\"] = 2\n\n# Test data\n\ntest_data.loc[train_data[\"Embarked\"] == \"S\",\"Embarked\"] = 0\ntest_data.loc[train_data[\"Embarked\"] == \"C\",\"Embarked\"] = 1\ntest_data.loc[train_data[\"Embarked\"] == \"Q\",\"Embarked\"] = 2","5e7c73e8":"titles = []\nfor i in train_data[\"Name\"]:\n    titles.append(i.split(\",\")[1].split(\".\")[0].strip())\n    \nprint(set(titles))","1e0a3fa8":"Title_dict = {\n    \"Capt\": 3,\n    \"Col\": 3,\n    \"Major\": 3,\n    \"Jonkheer\": 3,\n    \"Don\": 3,\n    \"Sir\" : 3,\n    \"Dr\": 3,\n    \"Rev\": 3,\n    \"the Countess\":3,\n    \"Mme\": 3,\n    \"Mlle\": 3,\n    \"Ms\": 2,\n    \"Mr\" : 0,\n    \"Mrs\" : 2,\n    \"Miss\" : 1,\n    \"Master\" : 3,\n    \"Lady\" : 3\n}\n\n# 3 = Highest rank royalty\/officer\n# 2 = Married women\n# 1 = Unmarried women\n# 0 = Mr\n\nprint(Title_dict)\n\n# The titles need to be numbered so that the model can process them","75b9c3af":"# Add new column to data set with titles\n\ndef get_titles(data_set):\n    # we extract the title from each name\n    data_set['Title'] = data_set['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\n    \n    # a map of more aggregated title\n    # we map each title\n    data_set['Title'] = data_set.Title.map(Title_dict)\n    return data_set","5aa5a5f0":"# Train data\ntrain_data = get_titles(train_data)\n\n# Test data\ntest_data = get_titles(test_data)","31932c68":"test_data.isnull().sum()","2d6a7eaf":"# There is one missing title in our test data. We need to fill in the missing Title value.\n\nprint(\"Number of titles in the test data:\")\nprint(test_data[\"Title\"].value_counts())\nprint(\"\")\nname = str(test_data[test_data[\"Title\"].isna()][\"Name\"])\nprint(f\"The missing title corresponds to: {name}\")\ntest_data[test_data[\"Title\"].isna()]","02f1ec99":"# How should we fill the missing Title?\n\ntest_data[\"Title\"].value_counts()","ed58e8db":"# We will fill the missing Title value with the no. 1, since the missing passenger is a female travelling alone (Miss.)\n\ntest_data[\"Title\"] = test_data[\"Title\"].fillna(1)","96242b23":"if train_data[\"Title\"].isnull().sum() == 0 and test_data[\"Title\"].isnull().sum() == 0:\n    \n    print(\"The Titles in the train and test data sets are now complete!\")","e30ae340":"# Age: Fill the missing\n# We will use the mean age to fill in the missing age values\n\n# Train data\n# train_data[\"Age\"] = train_data[\"Age\"].fillna(round(train_data[\"Age\"].mean()))\n\n# Test data\n# test_data[\"Age\"] = test_data[\"Age\"].fillna(round(train_data[\"Age\"].mean()))\n","33c44481":"# Let's see what features correlate best with age\n\ntrain_data.corr()[\"Age\"].sort_values()","52495f81":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"Title\",y=\"Age\",data=train_data)","706fd8cd":"plt.figure(figsize=(12,6))\nsns.boxplot(x=\"Pclass\",y=\"Age\",data=train_data)","95375bdc":"train_data.groupby(\"Title\").mean()[\"Age\"]","4ab6d7ab":"# Fill the age according to the Title\n\n# Train data\ntrain_data[\"Age\"].fillna(train_data.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)\n\n# Test data (we will use the mean of the train data as well)\ntest_data[\"Age\"].fillna(train_data.groupby(\"Title\")[\"Age\"].transform(\"median\"),inplace=True)","f891c6ab":"if train_data[\"Age\"].isnull().sum() == 0 and test_data[\"Age\"].isnull().sum() == 0:\n    \n    print(\"The Ages in the train and test data sets are now complete!\")","5152ddf6":"train_data[\"Cabin\"].value_counts()","ba853525":"# Cabin numbers that we are missing\ntrain_data[\"Cabin\"].isnull().sum(),test_data[\"Cabin\"].isnull().sum()","7daf81ea":"# We will start with the train data\n\n# We can see that most of the passengers from first class have a cabin number, whereas the third class ones don\u00b4t.\n\ntrain_data_cabin_null = train_data[train_data[\"Cabin\"].isna()][[\"Pclass\",\"Cabin\",\"Fare\"]]\ntrain_data_cabin_not_null = train_data[train_data[\"Cabin\"].notna()][[\"Pclass\",\"Cabin\",\"Fare\"]]\n\ntrain_data_cabin_null\n\ntrain_data_cabin_null[\"Pclass\"].value_counts()","375a9374":"x = [\"Third class\",\"Second class\",\"First class\"]\ny = list(train_data_cabin_null[\"Pclass\"].value_counts())\nplt.title(\"Missing Cabin numbers for each Passenger class\\nTrain data\")\nplt.xlabel(\"Passenger Class\")\nplt.ylabel(\"Number of missing cabin names\")\n\nplt.bar(x,y)","8d7e7d7b":"#train_data[train_data[\"Pclass\"]==1][[\"Pclass\",\"Cabin\",\"Fare\"]].head(10)","322d3478":"# Dataframe with passengers that have a cabin number\n\ntrain_data_cabin_not_null.head(10)","b47fec86":"def get_number_of_cabins(string):\n    number_of_cabins = 1\n    for i in string:\n        if i == \" \":\n            number_of_cabins += 1\n            \n    return number_of_cabins\n\ndef first_letter(string):\n    return string[0]","e4c56fa7":"# I\u00b4m only interested in the first letter to know the deck\n# Some fares correspond to more than one cabin\n# Find out fare per cabin \n\ntrain_data_cabin_not_null[\"No_cabins\"] = 1 # Fill with 1 at the begining\ntrain_data_cabin_not_null[\"Deck\"] = \"A\"\n\n# Deck letters\n\nfor row in train_data_cabin_not_null.index:\n    train_data_cabin_not_null[\"No_cabins\"][row] = get_number_of_cabins(train_data_cabin_not_null[\"Cabin\"][row])\n    train_data_cabin_not_null[\"Deck\"][row] = first_letter(train_data_cabin_not_null[\"Cabin\"][row])\n\n# Mean price per cabin\n    \ntrain_data_cabin_not_null[\"Price_per_cabin\"] = train_data_cabin_not_null[\"Fare\"] \/ train_data_cabin_not_null[\"No_cabins\"]\n\ntrain_data_cabin_not_null","00880a92":"plt.figure(figsize=(14,8))\n\nsns.swarmplot(x=\"Deck\",y=\"Price_per_cabin\",data=train_data_cabin_not_null,size=6)","f02bf8e7":"train_data_cabin_not_null[\"Deck\"].unique()","f3f8783e":"for pclass in [1,2,3]:\n    decks = train_data_cabin_not_null[train_data_cabin_not_null[\"Pclass\"]==pclass][\"Deck\"].unique()\n    print(f\"Passenger class: {pclass}\\tDecks: {decks}\")","e3ea5f41":"for deck in [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"T\"]:\n    mean = train_data_cabin_not_null[train_data_cabin_not_null[\"Deck\"] == deck][\"Price_per_cabin\"].mean()\n    print(f\"Mean price per cabin for in Deck: {deck} is {round(mean,3)}\")","21cb73bf":"# Dictionaries\n\ndict_pclass_deck = {\n    1:[\"A\",\"B\",\"C\",\"D\",\"E\",\"T\"],\n    2:[\"D\",\"E\",\"F\"],\n    3:[\"E\",\"F\",\"G\"]\n}\n\ndict_fare_deck = {\n    \"A\": 39.624,\n    \"B\": 86.579,\n    \"C\": 82.483,\n    \"D\": 53.285,\n    \"E\": 46.027,\n    \"F\": 16.954,\n    \"G\": 13.581,\n    \"T\": 35.5\n}","c3b8d62a":"def get_deck(dict_fare,dict_pclass, fare, pclass):\n    listOfItems = dict_fare.items()\n    for item  in listOfItems:\n        if item[1] == fare:\n            deck = item[0]\n            return deck\n\n    # We haven\u00b4t found the exact value\n    difference = list()\n    difference_decks = list()\n    for item  in listOfItems:\n        #print(item[0],abs(valueToFind - item[1]))\n        difference.append(abs(fare - item[1]))\n        difference_decks.append(item[0])\n        \n    # Find index of minimum and correspond it to list of decks\n    \n    minimum_index = difference.index(min(difference))\n    possible_deck = difference_decks[minimum_index]\n    \n    # We have the most probable deck based on the fare\n    # Make sure this is possible regarding passenger class\n    \n    if possible_deck in dict_pclass.get(pclass):\n        deck = possible_deck\n        \n        return deck\n    \n    else:\n        #print(f\"Suggest deck: {possible_deck}. But there is no {possible_deck} deck in pclass {pclass}\")\n        # Two options:\n            # 1. Fare to high for class --> Best deck in class\n            # 2. Class to high for fare --> Worst deck in class\n            \n        if fare > dict_fare.get(possible_deck): # Opt. 1\n            \n            return dict_pclass.get(pclass)[0] # Best deck of its class\n        \n        else:\n            \n            return dict_pclass.get(pclass)[-1] # Worst deck of its class\n        \n","54458147":"train_data[\"Deck\"] = \"A\"  # Fill with \"A\" provisionally\n\n# Deck letters\n\ntrain_data[\"Cabin\"] = train_data[\"Cabin\"].fillna(\"Z\") # Fill missing with \"Z\" provisionally\n\n# To fill column Deck:\n# If cabin != \"Z\" appply function of getting first letter\n# If cabin == \"Z\" apply get_deck function\n\nfor row in train_data.index:\n    if train_data[\"Cabin\"][row] != \"Z\":\n        train_data[\"Deck\"][row] = first_letter(train_data[\"Cabin\"][row])\n    else:\n        fare = train_data[\"Fare\"][row]\n        pclass = train_data[\"Pclass\"][row]\n        train_data[\"Deck\"][row] = get_deck(dict_fare_deck,dict_pclass_deck,fare,pclass)\n\ntrain_data.head()","cc10be10":"# Turn deck into numeric values\n\ndict_deck_number = {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3,\n    \"D\": 4,\n    \"E\": 5,\n    \"F\": 6,\n    \"G\": 7,\n    \"T\": 8\n}\n\ndef get_deck_no(data_set):\n    data_set['Deck_no'] = data_set.Deck.map(dict_deck_number)\n    return data_set","5f1bdad6":"train_data = get_deck_no(train_data)","c66ae405":"# We now repeat the process with the test data\n\n# 1. Filling the missing values\n    \ntest_data[\"Deck\"] = \"A\"  # Fill with \"A\" provisionally\n\n# Deck letters\n\ntest_data[\"Cabin\"] = test_data[\"Cabin\"].fillna(\"Z\") # Fill missing with \"Z\" provisionally\n\n# To fill column Deck:\n# If cabin != \"Z\" appply function of getting first letter\n# If cabin == \"Z\" apply get_deck function\n\nfor row in test_data.index:\n    if test_data[\"Cabin\"][row] != \"Z\":\n        test_data[\"Deck\"][row] = first_letter(test_data[\"Cabin\"][row])\n    else:\n        fare = test_data[\"Fare\"][row]\n        pclass = test_data[\"Pclass\"][row]\n        test_data[\"Deck\"][row] = get_deck(dict_fare_deck,dict_pclass_deck,fare,pclass)\n\n# 2. Turn deck into numeric values\n\ntest_data = get_deck_no(test_data)","c56f3a45":"train_data.isnull().sum()","835a45db":"test_data.isnull().sum()","91e7f322":"# We will do the same for the test data as we did before for the train data\n\ntest_data.loc[test_data[\"Sex\"] == \"male\",\"Sex\"] = 1\ntest_data.loc[test_data[\"Sex\"] == \"female\",\"Sex\"] = 0\ntest_data[\"Embarked\"] = test_data[\"Embarked\"].fillna(\"S\")\ntest_data.loc[test_data[\"Embarked\"] == \"S\",\"Embarked\"] = 0\ntest_data.loc[test_data[\"Embarked\"] == \"C\",\"Embarked\"] = 1\ntest_data.loc[test_data[\"Embarked\"] == \"Q\",\"Embarked\"] = 2\n#test_data[\"Age\"] = test_data[\"Age\"].fillna(round(test_data[\"Age\"].mean()))\ntest_data[\"Fare\"] = test_data[\"Fare\"].fillna(round(train_data[\"Fare\"].mean()))\n# Title information see bellow\n\n# We filled in the missing fare value with the mean from the train data where we have all values","63c26723":"test_data.head()","c8e33ca9":"print(train_data.isnull().sum())\nprint(\"\")\nprint(test_data.isnull().sum())","d6f354be":"#train_data.drop(\"Name\",axis=1,inplace=True)\n#test_data.drop(\"Name\",axis=1,inplace=True)","5e2699dc":"# Machine learning libraries\n\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import mean_absolute_error","62176bfc":"titanic_features = [\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Title\",\"Embarked\",\"Deck_no\"]\n\n# Adding Embarked as feature does not improve our model\n\nX_train = train_data[titanic_features]\ny_train = train_data[\"Survived\"]","f5274b22":"# Define our model. Specify a number for random_state to ensure same results each run.\n\ntitanic_model = RandomForestClassifier(n_estimators=1000, max_depth=5, random_state=1)\n\n#Fit model\ntitanic_model.fit(X_train,y_train)\n\nprint(\"Model succesfully created!\")","da61fd00":"# Making predictions...\n# These results should be 1 or 0, alive or dead, we can\u00b4t have decimals.\n\npredicted_values = titanic_model.predict(X_train)\n\npredicted_values_rounded = []\nfor i in predicted_values:\n    predicted_values_rounded.append(round(i))","bc3d1b4e":"from sklearn.metrics import mean_absolute_error","9c88ca42":"predicted_values_train = titanic_model.predict(X_train)\n\nMAE_rfc = round(mean_absolute_error(y_train,predicted_values_train),4)\nacc_rfc = round(titanic_model.score(X_train,y_train),4)","2be1c848":"X_test = test_data[titanic_features]","a8cd8ae2":"print(\"Model Evaluation:\")\nprint(f\"Mean Absolute Error: {MAE_rfc}\")\nprint(f\"Model Accuracy: {acc_rfc}\")","9c6d308f":"predicted_values_test = titanic_model.predict(X_test)","29c58143":"# Round the predicted values to 0 or 1\n\npredicted_values_test_rounded = []\n\nfor i in predicted_values_test:\n    predicted_values_test_rounded.append(int(round(i)))","2efcf6d8":"# Save to CSV file\n\nsubmission = pd.DataFrame({\n    \"PassengerId\": test_data[\"PassengerId\"],\n    \"Survived\":predicted_values_test_rounded\n})\n\nsubmission.to_csv(\"titanicSub_v.csv\",index=False)","dbd9c1b3":"submission","2dfe9a08":"print(\"Model Evaluation:\")\nprint(f\"Mean Absolute Error: {MAE_rfc}\")\nprint(f\"Model Accuracy: {acc_rfc}\")","52cba2c8":"We will automatically create a .csv file with the results. ","1c030f0e":"Based on the data, we can see that passenfers from first class could travel in decks A,B,C,D,E and T, passengers in second class could travel in decks D,E or F and finally, passengers from third class travelled in decks E,F or G.","2e173d2b":"This will help us measure the error of our model. In order to do so we will calculate the Mean Absolute Error (MAE). The smaller the MAE the more accurante our model will be.","4c250f1a":"Let\u00b4s double check all the data has been filled in.","6cd7a588":"### Age","87e93a18":"Now to predict!","2568d1a1":"### Sex","14893424":"Here we will use all the information we have (our model has) learned about the passengers in order to, through various the decision making procedures, we will try to predict wether a passenger will survive or not.  ","86091ebe":"#### Conclusions ","a54f6643":"We can see that in the train_data data set we have 891 passengers in total, whereas in the test_data one we only have 491. \n\nFrom the cells above, we can see that we are missing some data in both data sets. Particularly data sepecifying passenger age, cabin, fare and place where he\/she embarked. \nIn the future we will look at ways as to how we might fill this missing data in the best way rergarding predictions. ","8c9e055a":"![title](Titanic.jpg)","14953db3":"## Importing Libraries and Data","1d7d15eb":"## Model validation","07cb31ef":"## Exploratory Data Analysis","afc14f21":"## Fill the missing data","a658832b":"The majority od the dead passengers where from third class","7ba48b05":"#### Analysing the existing data","b4fb550b":"The number of the cabin is formed by a letter a some numbers that go from A to G.\n\nFrom the following image we can see that the first letters corresponded to the top decks, probably the firs and second class decks, and as we go down below decks the letters go from A to G.\n\nWe can easily deduce that passengers travelling in cabins beginning with the letter \"A\" had a much higher chance of survival than passengers travelling in cabins starting with \"G\".\n\nTo add this to the model we will need to extract the letter of each cabin, assign a number to it and fill the missing data. We can fill the missing data taking into account factors like Passenger Class, Fare, or Title, to give us a better idea of where the passenger in question could have been travelling. ","f8bc45f6":"Since the Title appears to have a higher correlation with the age than the Passenger class, I will use this feature in order to fill in the missing age values. I will do it by obtaining the mean age of each title.","bdee7f7d":"## Preparing the Test Data","824e61af":"Looks like we are missing information about age and cabin, we will leave these for later, since we will use information in the other columns to fill the missing values.","e93df9be":"Numer of parents \/ children aboard the ship.","7664a451":"All the train data has been filled!","8218a0e3":"# Titanic: Machine Learning from Disaster","a0fe6602":"Check out our data...","732f4753":"We have built a function that takes the fare and the passenger class and returns the most probable deck in which the passenger migth have travelled. We now need to fill the data frame(s) using this function.\n\nWe will later need to give numerical values to each of the decks so that the model can understand them.","167aae04":"\"When feature engineering is done, we usually tend to decrease the dimensionality by selecting the \"right\" number of features that capture the essential.\"","20f01fe6":"This is a tricky one... the title of the passenger can reveal social status related inforamtion about him or her. If we notice, every passenger has a title, and this is preceded by a \",\" and followed by a \".\".\n\nWe are not not going to give a numeric value to each of the different titles. We are going to define four \"social groups\" based on their title. This could be more precise, however there probably wouln\u00b4t be a considerable difference, so we will continue with this approach.\n\nBellow we can see in which of the four social groups we insert each of the titles. These groups will go from 0 to 3 (this doesn't respond to any sort of ranking).","d23a49c7":"We will now select the features (X) for our model. These features will help our model identify patterns. The features will be columns.","aed7083b":"Title could be an interesting option in order to fill the missing age values. Let's explore this a bit further.","63476da4":"## Results: Predictions on the Test Data","84c14801":"### Name","1fbc8f64":"All the data has been filled. We are good to go!","1517dcac":"The following graphs will help us decide which information is relevant from a survival point of view for each of the passengers.\n\nThis is important, since later on, when constructing our model, we will need to \"train\" it based on these features. The more relevant they are the more accurate out model\u00b4s predictions will be. ","e33dce32":"Now we can get an idea of how much a cabin costs depending on the deck where its at.","39bb5d4a":"The graph is not very defining. So we obtain the mean price per cabin on each of the decks. And we see that surprisingly the highest average corresponds to cabins in deck \"B\" (not \"A\", as I expected at first).\n\nThis data will serve to fill in the deks for the missing cabins based on the fare cost. We will assume, as a starting point, that all the missing cabins correspond to one cabin per passenger.","0ab465ec":"We can clearly see that most of the passengers were aged between 20 and 35 approximately","13ee5143":"This refers to the number of siblings \/ spouses each passenger was travelling with. We can see that most of them were travelling alone, whereas some other where accompanied by up to eight siblings. This feature doesn\u00b4t seem to have a clear impact on the survival  odds of a given passsenger, tehrefore, it will not be a decisive feature for our model, nevertheless, it will be taken into account. ","24b024c5":"Here we will analyse the data to see what information we are missing and how we can fill this missing information. We will do this for the train data and the test data as well. ","ed370d2c":"We call \"Target\" what we want to find out. In this case if the passenger survives or not. \n\nThe model will study the feature's columns contrasting it with the Target column, which will be the \"Survived\" column. This is how it will create patterns and train itself to understand what factors decide, or have a greater impact on wether a given passenger should survive ir not. This knowledge will later on be applied on the test data set. Therefore, the better the training, the more accurate the predictions.  ","102167f2":"Let's see what data we're missing...","a4016439":"We can clearly see that most of the dead were men. This will be an important feature to take into account when building our model. ","4bcece4c":"Let's recap...\n1. We have 8 possible decks: A,B,C,D,E,F,G and T.\n2. We have analysed the relationship between passenger class and deck where they travelled.\n3. We have also analysed the relationship between the fare of the ticket and the deck where the passenger travelled, this is not very defining. \n4. Finally we have obtained the average fare per number of cabins for each passenger. This is due to the fact that there are several fares that correspond to more than one cabin. \n\nTo fill the missing data we will take into account tha fare and the passenger class in order to obtain the deck where the passenger could have been travelling.","e95dd405":"## Machine learning model","12de2412":"### Cabin","b390bc19":"### Feature selection","4b9ac786":"![](Titanic_decks.png)","1968714b":"#### Fill the missing data","e5542ec6":"## Feature Engineering","cf5c3923":"### Embarked"}}