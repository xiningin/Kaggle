{"cell_type":{"06fbddce":"code","58f701cd":"code","ba9ff15a":"code","af4b3c5f":"code","3fbe765e":"code","6ab48595":"code","dd20a7eb":"code","7ad61d28":"code","8aeb8517":"code","29baa881":"code","aaefcb51":"code","725aafdb":"code","56fb4da9":"code","191a1357":"code","76ff44c9":"code","fdda51dc":"code","cb473b8b":"code","5f45c63b":"code","5047d864":"code","f523cf25":"code","a42f2678":"code","67e805ff":"code","a548d278":"code","7ae146b6":"code","393b2b03":"code","e20fa9f9":"code","399cc714":"code","ecc6b9cf":"code","1b09d5e3":"code","be3bb5db":"code","3c963fab":"code","40157964":"code","ea235576":"code","6d46e7b8":"code","81e09271":"code","bbd59222":"code","af717ea7":"code","8f5a25b9":"code","de528693":"code","936b924d":"code","6ed73201":"code","09ddfc66":"code","a16d2a7c":"code","419f58fb":"code","567f0304":"code","ecd2ea00":"code","88dc90a4":"code","f1e6eacc":"code","022f29fd":"code","acaf49a6":"code","ecebb8d8":"code","acea512a":"code","a993a5b3":"code","f600e167":"code","9e31412a":"code","c4c4fdf7":"code","b7fe1188":"code","baefc656":"code","ff65694f":"code","3d77e1cf":"code","da584918":"code","916dbc44":"code","e9d763e3":"code","aaee5478":"code","df563b6b":"code","0baf2568":"code","7c296539":"code","d34a3e9f":"code","b77f0249":"code","272dacaa":"code","ac03102c":"code","d6783a0b":"code","dff4f149":"code","5e4965a8":"code","f4811dbe":"code","207d21cf":"code","5424c0f1":"code","fc917c32":"code","3e0adebd":"markdown","090a57b6":"markdown","aabb59f9":"markdown","b6329f99":"markdown","4f07a61c":"markdown","02238be8":"markdown","2407938b":"markdown","c0c90511":"markdown","1ea179b6":"markdown","007d89f1":"markdown","029f6e48":"markdown","6068defa":"markdown","fccb23fb":"markdown","2ebc7bd2":"markdown","8caf1c4a":"markdown","0b6106bd":"markdown","dfebb29c":"markdown","fb8dbc80":"markdown","5d4fe7ab":"markdown","0a8dd230":"markdown","129859f3":"markdown","6fe0bdc9":"markdown","3d783d20":"markdown","8fa3edba":"markdown","3437578b":"markdown","f0bcec85":"markdown","783cbc58":"markdown","ea22c270":"markdown","d07315e4":"markdown","c54d6ec0":"markdown"},"source":{"06fbddce":"import os #paths to file\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nimport warnings# warning filter\nimport datetime as dt #for timestamp\n\n#ploting libraries\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n#feature engineering\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\n\n#train test split\nfrom sklearn.model_selection import train_test_split\n\n#metrics\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.model_selection import cross_validate\n\n#cross validation\nfrom sklearn.model_selection  import cross_val_score as CVS\n\n\n#ML models\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n#default theme and settings\nsns.set(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=False, rc=None)\npd.set_option('display.max_columns', None)\n\n#warning handle\nwarnings.filterwarnings(\"always\")\nwarnings.filterwarnings(\"ignore\")\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58f701cd":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ba9ff15a":"#paths for the dataset\ntr_path = \"\/kaggle\/input\/carinsurance\/carInsurance_train.csv\" \nte_path = \"\/kaggle\/input\/carinsurance\/carInsurance_test.csv\" ","af4b3c5f":"tr_df = pd.read_csv(tr_path, index_col = 'Id')\nte_df = pd.read_csv(te_path, index_col = 'Id')\ntr_df.head()","3fbe765e":"te_df.head()","6ab48595":"tr_df.info()","dd20a7eb":"te_df.info()","7ad61d28":"print(\"Training Shape (row, col): {}, Testing Shape (row, col): {}\".format(tr_df.shape, te_df.shape))","8aeb8517":"tr_df.describe()","29baa881":"te_df.describe()","aaefcb51":"#list of all the categoric columns\ncat = tr_df.select_dtypes('object').columns.to_list()\nfor col in cat[:6]:\n    print(\"train\\n\")\n    print(col,\"\\n\",tr_df[col].value_counts()\/tr_df.shape[0],\"\\n\\n\")\n    print(\"test\\n\")\n    print(col,\"\\n\",te_df[col].value_counts()\/te_df.shape[0],\"\\n\\n\")","725aafdb":"for call in cat[6:8]:\n    tr_df[call] = pd.to_datetime(tr_df[call])\ntr_df.info()","56fb4da9":"tr_df[\"call_time\"] = tr_df[\"CallEnd\"]  - tr_df[\"CallStart\"]\n# extracting time from timestamp\ntr_df[\"call_time\"] = tr_df[\"call_time\"].dt.components[\"minutes\"]*60 + tr_df[\"call_time\"].dt.components[\"seconds\"]\n#tr_df[\"Car_Insurance\"] = tr_df[\"CarInsurance\"].copy()\n#tr_df = tr_df.drop([\"CarInsurance\"], axis = 1)\ntr_df.head()","191a1357":"#tr_df[\"CallEnd\"] = tr_df[\"CallEnd\"].dt.time\n#tr_df[\"CallStart\"] = tr_df[\"CallStart\"].dt.time\n#tr_df[\"call_time\"] = tr_df[\"call_time\"].astype(\"\")","76ff44c9":"tr_df.info()","fdda51dc":"for call in cat[6:8]:\n    te_df[call] = pd.to_datetime(te_df[call])\nte_df[\"call_time\"] = te_df[\"CallEnd\"]  - te_df[\"CallStart\"]\n# extracting time from timestamp\nte_df[\"call_time\"] = te_df[\"call_time\"].dt.components[\"minutes\"]*60 + te_df[\"call_time\"].dt.components[\"seconds\"]\n#te_df[\"Car_Insurance\"] = te_df[\"CarInsurance\"].copy()\n#te_df = te_df.drop([\"CarInsurance\"], axis = 1)\n#te_df[\"CallEnd\"] = te_df[\"CallEnd\"].dt.time\n#te_df[\"CallStart\"] = te_df[\"CallStart\"].dt.time\nte_df.info()","cb473b8b":"print(tr_df.call_time.describe())\nprint(te_df.call_time.describe())","5f45c63b":"null_cols = [\"Job\",\"Education\", \"Communication\", \"Outcome\"]\nfor col in null_cols[:3]:\n    tr_df[col] = tr_df[col].fillna(\n    tr_df[col].dropna().mode().values[0])    \n    print(f\"{col}:\\n{tr_df[col].value_counts()}\\n\",\"-\"*50)\n","5047d864":"for col in null_cols[:3]:\n    te_df[col] = te_df[col].fillna(\n    te_df[col].dropna().mode().values[0])\n    \ntr_df[\"Outcome\"] = tr_df[\"Outcome\"].fillna(\"no prevoius contact\")\n#te_df = te_df.drop([\"Outcome\"],axis = 1)\nte_df[\"Outcome\"] = te_df[\"Outcome\"].fillna(\"no prevoius contact\")","f523cf25":"print(tr_df.info())\nprint(te_df.info())","a42f2678":"print(tr_df[\"CarInsurance\"].value_counts())\n#tr_df[cat[-1]].hist(grid = False)\n\n#print(i)\ntotal = float(len(tr_df[\"CarInsurance\"]))\nplt.figure(figsize=(8,10))\nsns.set(style=\"whitegrid\")\nax = sns.countplot(tr_df[\"CarInsurance\"])\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,height + 3,'{:1.2f}'.format(height\/total),ha=\"center\") \nplt.show()","67e805ff":"num_cols =  tr_df.select_dtypes('number').columns.to_list()\ncat_cols =  tr_df.select_dtypes('object').columns.to_list() ","a548d278":"plt.figure(figsize=(15,9))\nsns.countplot(x=\"Outcome\" , data=tr_df ,palette='rocket_r')\nplt.title(\"Outcome\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Outcome\"].value_counts()\/tr_df.shape[0]),4)*100)","7ae146b6":"plt.figure(figsize=(15,9))\nsns.countplot(x=\"Job\" , data=tr_df ,palette='viridis_r')\nplt.title(\"Job\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Job\"].value_counts()\/tr_df.shape[0]),4)*100)","393b2b03":"plt.figure(figsize=(6,4))\nsns.countplot(x=\"Marital\" , data=tr_df ,palette='rocket')\nplt.title(\"Marital\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Marital\"].value_counts()\/tr_df.shape[0]),4)*100)","e20fa9f9":"plt.figure(figsize=(6,4))\nsns.countplot(x=\"Education\" , data=tr_df ,palette='nipy_spectral')\nplt.title(\"Education\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Education\"].value_counts()\/tr_df.shape[0]),4)*100)","399cc714":"plt.figure(figsize=(6,4))\nsns.countplot(x=\"Default\" , data=tr_df ,palette='CMRmap')\nplt.title(\"Default\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Default\"].value_counts()\/tr_df.shape[0]),4)*100)","ecc6b9cf":"plt.figure(figsize=(6,4))\nsns.countplot(x=\"HHInsurance\" , data=tr_df ,palette='rainbow')\nplt.title(\"HHInsurance\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"HHInsurance\"].value_counts()\/tr_df.shape[0]),4)*100)","1b09d5e3":"plt.figure(figsize=(6,4))\nsns.countplot(x=\"CarLoan\" , data=tr_df ,palette='rocket')\nplt.title(\"CarLoan\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"CarLoan\"].value_counts()\/tr_df.shape[0]),4)*100)","be3bb5db":"plt.figure(figsize=(6,4))\nsns.countplot(x=\"Communication\" , data=tr_df ,palette='cubehelix')\nplt.title(\"Communication\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Communication\"].value_counts()\/tr_df.shape[0]),4)*100)","3c963fab":"plt.figure(figsize=(10,4))\nsns.countplot(x=\"LastContactDay\" , data=tr_df ,palette='icefire')\nplt.title(\"LastContactDay\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"LastContactDay\"].value_counts()\/tr_df.shape[0]),4)*100)","40157964":"plt.figure(figsize=(10,4))\nsns.countplot(x=\"LastContactMonth\" , data=tr_df ,palette='rainbow')\nplt.title(\"LastContactMonth\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"LastContactMonth\"].value_counts()\/tr_df.shape[0]),4)*100)","ea235576":"plt.figure(figsize=(10,4))\nsns.countplot(x=\"NoOfContacts\" , data=tr_df ,palette='nipy_spectral')\nplt.title(\"NoOfContacts\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"NoOfContacts\"].value_counts()\/tr_df.shape[0]),4)*100)","6d46e7b8":"plt.figure(figsize=(10,4))\nsns.countplot(x=\"PrevAttempts\" , data=tr_df ,palette='coolwarm')\nplt.title(\"PrevAttempts\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"PrevAttempts\"].value_counts()\/tr_df.shape[0]),4)*100)","81e09271":"plt.figure(figsize=(10,4))\nsns.countplot(x=\"Outcome\" , data=tr_df ,palette='viridis')\nplt.title(\"Outcome\", fontsize=14)\nplt.show()\nprint(\"% of total:\")\nprint(round((tr_df[\"Outcome\"].value_counts()\/tr_df.shape[0]),4)*100)","bbd59222":"tr_df[\"Balance\"].describe()","af717ea7":"tr_df[\"DaysPassed\"].describe()","8f5a25b9":"#plotting the correlation matrix\nsns.heatmap(tr_df.corr() ,cmap='rocket')","de528693":"#correlation table\ncorr = tr_df.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","936b924d":"bins= [18,30,40,50,60,100]\nlabels = ['young adult','adult','middle aged','veteran','senior citizen']\ntr_df[\"Age_Group\"] = pd.cut(tr_df['Age'], bins=bins, labels=labels, right=False)","6ed73201":"seasons = {'dec':0, 'jan':1, 'feb':2, 'mar':3, 'apr':4, 'may':5, 'jun':6, 'jul':7, 'aug':8, 'sep':9, 'oct':10, 'nov':11}\ntr_df = tr_df.applymap(lambda lable: seasons.get(lable) if lable in seasons else lable)\nbins= [0,3,6,9,12]\nlabels = ['winter','spring','summer','fall']\ntr_df[\"LC_Seasons\"] = pd.cut(tr_df['LastContactMonth'], bins=bins, labels=labels, right=False)\ntr_df[\"LC_Seasons\"].head()","09ddfc66":"bins= [0,10,20,32]\nlabels = ['begining','middle','end']\ntr_df[\"LC_Month_Period\"] = pd.cut(tr_df['LastContactDay'], bins=bins, labels=labels, right=False)\ntr_df[\"LC_Month_Period\"].head()","a16d2a7c":"print(tr_df[\"CallStart\"].dt.time.max())\nprint(tr_df[\"CallStart\"].dt.time.min())","419f58fb":"tr_df[\"Time_Of_Day\"]=pd.cut(tr_df[\"CallEnd\"].dt.hour,\n               [9,12,15,28],\n               labels=['Morning','noon','Afternoon'],\n               include_lowest=True)\ntr_df.head()","567f0304":"tr_df[\"DaysPassedLenth\"]=pd.cut(tr_df[\"DaysPassed\"],\n               bins = [-1,0,182,1095],\n               labels= [\"no prevoius contact\",'a day - six months','over six months'], include_lowest=True)\ntr_df[\"DaysPassedLenth\"].head()","ecd2ea00":"tr_df[\"Balance_status\"]=pd.cut(tr_df[\"Balance\"],\n               bins = [-4000,0,1000,5000, 100000],\n               labels= [\"negitive balance\",'low','mid', 'high'], include_lowest=True)\ntr_df[\"Balance_status\"].head()","88dc90a4":"tr_df.info()","f1e6eacc":"cols = tr_df.columns.to_list() \nfor col in cols[19:]:\n    plt.figure(figsize=(10,4))\n    sns.countplot(x=col , data=tr_df ,palette='icefire')\n    plt.title(col, fontsize=14)\n    plt.show()\n    print(\"% of total:\")\n    print(round((tr_df[col].value_counts()\/tr_df.shape[0]),4)*100)","022f29fd":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"Job\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"Job\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","acaf49a6":"pd.pivot_table(tr_df, index=[\"Job\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","ecebb8d8":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"Marital\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"Marital\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","acea512a":"pd.pivot_table(tr_df, index=[\"Marital\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","a993a5b3":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"Education\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"Education\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","f600e167":"pd.pivot_table(tr_df, index=[\"Education\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","9e31412a":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"Default\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"Default\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","c4c4fdf7":"pd.pivot_table(tr_df, index=[\"Default\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","b7fe1188":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"HHInsurance\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"HHInsurance\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","baefc656":"pd.pivot_table(tr_df, index=[\"HHInsurance\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","ff65694f":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"CarLoan\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"CarLoan\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","3d77e1cf":"pd.pivot_table(tr_df, index=[\"CarLoan\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","da584918":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"Communication\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"Communication\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","916dbc44":"pd.pivot_table(tr_df, index=[\"Communication\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","e9d763e3":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"NoOfContacts\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"NoOfContacts\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","aaee5478":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"Outcome\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"Outcome\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","df563b6b":"pd.pivot_table(tr_df, index=[\"Outcome\",\"CarInsurance\"], aggfunc = {col:np.count_nonzero})","0baf2568":"plt.figure(figsize=(50,15))\nplt.subplot(2,3,1)\nsns.countplot(x=\"PrevAttempts\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"PrevAttempts\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","7c296539":"for col in cols[19:]: \n    plt.figure(figsize=(30,20))\n    plt.subplot(2,3,1)\n    sns.countplot(x=col ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\n    plt.xlabel(col, fontsize=20)\n    plt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","d34a3e9f":"tr_df[\"call_time\"] = pd.cut(tr_df[\"call_time\"], bins=[0, 180, 900,3600], labels=[\"short\", \"medium\", \"long\"], right=False)\nplt.figure(figsize=(30,20))\nplt.subplot(2,3,1)\nsns.countplot(x=\"call_time\" ,hue='CarInsurance', data=tr_df ,palette='coolwarm_r')\nplt.xlabel(\"call_time\", fontsize=20)\nplt.legend((\"0: insurance not subscibed\", \"1: insurance subscibed\"),loc='upper left')","b77f0249":"#te_df update \n\n#age group\nte_df[\"Age_Group\"] = pd.cut(te_df['Age'], bins=[18,30,40,50,60,100], labels=['young adult','adult','middle aged','veteran','senior citizen'], right=False)\n\n#seasons\n\n#seasons = {'dec':0, 'jan':1, 'feb':2, 'mar':3, 'apr':4, 'may':5, 'jun':6, 'jul':7, 'aug':8, 'sep':9, 'oct':10, 'nov':11}\nte_df = te_df.applymap(lambda lable: seasons.get(lable) if lable in seasons else lable)\nte_df[\"LC_Seasons\"] = pd.cut(te_df['LastContactMonth'], bins=[0,3,6,9,12], labels=['winter','spring','summer','fall'], right=False)\n\n#LC_Month_Period \nte_df[\"LC_Month_Period\"] = pd.cut(te_df['LastContactDay'], bins=[0,10,20,32], labels=['begining','middle','end'], right=False)\n\n#Time_Of_Day\"\nte_df[\"Time_Of_Day\"]=pd.cut(te_df[\"CallEnd\"].dt.hour,\n               bins=[9,12,15,28],\n               labels=['Morning','noon','Afternoon'],\n               include_lowest=True)\n#DaysPassedLenth\nte_df[\"DaysPassedLenth\"]=pd.cut(te_df[\"DaysPassed\"],\n               bins = [-1,0,182,1095],\n               labels= [\"no prevoius contact\",'a day - six months','over six months'], include_lowest=True)\n\n#Balance_status\nte_df[\"Balance_status\"]=pd.cut(te_df[\"Balance\"],\n               bins = [-4000,0,1000,5000, 100000],\n               labels= [\"negitive balance\",'low','mid', 'high'], include_lowest=True)\n\n#call_time\nte_df[\"call_time\"] = pd.cut(te_df[\"call_time\"], bins=[0, 180, 900,3600], labels=[\"short\", \"medium\", \"long\"], right=False)\n\n\nreorder_columns = ['Job','HHInsurance','CarLoan','PrevAttempts','Outcome','call_time',\n                    'Age_Group', 'LC_Seasons', 'LC_Month_Period', 'Time_Of_Day','DaysPassedLenth','Balance_status','CarInsurance']\ntr_df = tr_df[reorder_columns]\nte_df = te_df[reorder_columns]\nprint(tr_df.info())\nprint(te_df.info())","272dacaa":"#lable encoding\n\nle = LabelEncoder()\nLabel = ['call_time','Age_Group', 'LC_Seasons', 'LC_Month_Period','Time_Of_Day','DaysPassedLenth','Balance_status']\n                     \n\nfor i in Label:\n    tr_df[i] = le.fit_transform(tr_df[i])\n    te_df[i] = le.fit_transform(te_df[i])\n    \n#one hot encoding\ncols = ['Job', 'Outcome']\n# Apply one-hot encoder\nOH_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)\ntr_oh = pd.DataFrame(OH_encoder.fit_transform(tr_df[cols])).astype('int64')\nte_oh = pd.DataFrame(OH_encoder.fit_transform(te_df[cols])).astype('int64')\n\n\n#get feature columns\ntr_oh.columns = OH_encoder.get_feature_names(cols)\nte_oh.columns = OH_encoder.get_feature_names(cols)\n\n# One-hot encoding removed index; put it back\ntr_oh.index = tr_df.index\nte_oh.index = te_df.index\n\n# Add one-hot encoded columns to our main df new name: tr_fe, te_fe (means feature engeenired) \ntr_fe = pd.concat([tr_df, tr_oh], axis=1)\nte_fe = pd.concat([te_df, te_oh], axis=1)\n\ntr_fe = tr_fe.drop(cols, axis = 1)\nte_fe = te_fe.drop(cols, axis = 1)\n\nprint(tr_fe.info())\nprint(te_fe.info())","ac03102c":"y = tr_fe['CarInsurance']\nX = tr_fe.drop('CarInsurance', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.75, random_state = 101)","d6783a0b":"def cross_val(model_name,model,X,y,cv):\n    \n    scores = CVS(model, X, y, cv=cv)\n    print(f'{model_name} Scores:')\n    for i in scores:\n        print(round(i,2))\n    print(f'Average {model_name} score: {round(scores.mean(),4)}')\n\nindex = ['Valid1','Valid2','Valid3','Valid4','Valid5']\nscoring = ['accuracy','precision', 'recall','f1']","dff4f149":"#model\nXGB = XGBClassifier()\n#cross validation\nXGB_report = pd.DataFrame(cross_validate(XGB, X, y, scoring=scoring))\n#getting required score methods\nXGB_report = XGB_report.iloc[:,2:]\n#naming the columns\nXGB_report.columns = scoring\n#naming the index\nXGB_report.index = index\n\n#final result collection\nmodel_1 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(XGB_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(XGB_report[score].mean(),4)}\")\n    model_1.append(round(XGB_report[score].mean(),4))","5e4965a8":"#model\nLR = LogisticRegression()\n#cross validation\nLR_report = pd.DataFrame(cross_validate(LR, X, y, scoring=scoring))\n#getting required score methods\nLR_report = LR_report.iloc[:,2:]\n#naming the columns\nLR_report.columns = scoring\n#naming the index\nLR_report.index = index\n\n#final result collection\nmodel_2 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(LR_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(LR_report[score].mean(),4)}\")\n    model_2.append(round(LR_report[score].mean(),4))","f4811dbe":"#model\nRF = RandomForestClassifier()\n#cross validation\nRF_report = pd.DataFrame(cross_validate(RF, X, y, scoring=scoring))\n#getting required score methods\nRF_report = RF_report.iloc[:,2:]\n#naming the columns\nRF_report.columns = scoring\n#naming the index\nRF_report.index = index\n\n#final result collection\nmodel_3 = []\n\n#Classification report\nprint(\"Clasification report:\\n\")\nprint(RF_report,\"\\n\\n\")\nprint(\"Mean Scores:\\n\")\nfor score in scoring:\n    print(f\"\\t{score}: {round(RF_report[score].mean(),4)}\")\n    model_3.append(round(RF_report[score].mean(),4))","207d21cf":"Models = pd.DataFrame({\n    'XGBoost': np.array(model_1),\n    'Logistic Regression': np.array(model_2),\n    'Random Forest': np.array(model_3)})\nModels.index = scoring\nModels","5424c0f1":"LR.fit(X,y)\nX_test = te_fe.drop(\"CarInsurance\", axis = 1)\nte_fe[\"CarInsurance\"] = LR.predict(X_test)\nte_fe[\"CarInsurance\"] = te_fe[\"CarInsurance\"].apply(lambda x: \"wiil not buy insurance\" if x==0 else \"wiil buy insurance\")\ncolumns = ['HHInsurance', 'CarLoan', 'PrevAttempts', 'call_time', 'Age_Group',\n       'LC_Seasons', 'LC_Month_Period', 'Time_Of_Day', 'DaysPassedLenth',\n       'Balance_status', 'Job_admin.', 'Job_blue-collar',\n       'Job_entrepreneur', 'Job_housemaid', 'Job_management', 'Job_retired',\n       'Job_self-employed', 'Job_services', 'Job_student', 'Job_technician',\n       'Job_unemployed', 'Outcome_failure', 'Outcome_no prevoius contact',\n       'Outcome_other', 'Outcome_success', 'CarInsurance']\nte_fe = te_fe[columns]\nte_fe[\"CarInsurance\"].value_counts()","fc917c32":"te_fe.to_csv(\"Insurance Purchase Forcast.csv\")","3e0adebd":"We can see a slight positive correlation between `CarInsurance` and `call_time` meaning a longer call might increase the odds of subcribing an insurance.","090a57b6":"## First look at the data:","aabb59f9":"# Data analysis and preprocessing \ud83d\udcbb\n## File Paths \ud83d\udcc2","b6329f99":"### call month period\n\n\nDividing our data to begining middle and end of the month.","4f07a61c":"## Logistic Regression","02238be8":"![](https:\/\/i.pinimg.com\/originals\/c9\/91\/72\/c99172c17b83d3c620b997858351b2a5.gif)","2407938b":"### Days Passed Lenth\n\nHow long has it been since last contact:\n\n* **no prevoius contact**\n* **a day - six months**\n* **over six months**","c0c90511":"<h2 style='text-align:center;font-family:Comic Sans MS;font-size:60px;border:20px;color:Black'>Thank you!<h2>","1ea179b6":"the calls are within daily shifts of 9:00 AM until 18:00 PM\nso we will divide the shifts into 3 categories:\n* morning 9:00-12:00\n* noon 12:00-15:00\n* afternoon 15:00-18:00","007d89f1":"### engineered features plot","029f6e48":"### call time of day\n\nWe want to check the time span of the calls.\n\n","6068defa":"Plotting the new attributes:","fccb23fb":"## feature engineering\n\nwe want to create more features for further analysis and grouping of attributes.\n\n\n### age group\n\nour groups will be created using the following method:\n        \n        `pd.cut(df, bins, labels, right=False)`\n        \n* **young adult** - 18-29\n* **young adult** - 30-39\n* **middle aged** - 40-49\n* **veteran** - 50-59\n* **senior citizen** - 60+\n\n","2ebc7bd2":"![](https:\/\/thumbs.gfycat.com\/CluelessVioletAgouti.webp)","8caf1c4a":"## XGBoost","0b6106bd":"## Data visalization \ud83d\udcca\n### Unvariate plots\nVisualizing our data for further understanding of how the data is spreaded","dfebb29c":"# Results for Test set\n\nFor this problem the main metric to look at is recall which identifies the percetage of correct positives out of all positives.\nLogistic Regression has performed best (identified **66.52%** isnurance subscibers out of all subscibers in average of all tests)\ntherefor we can assume the model can predict two thirds of the actual calls that ended with subscribed insurance. The prediction is stored in a csv file.","fb8dbc80":"<h2 style='text-align:left;font-family:Comic Sans MS;font-size:20px;border:20px;color:Black'>Now our data is all filled and ready for visualization! \ud83d\udda5\ud83d\udcc8<h2>","5d4fe7ab":"### call season\n\nWinter, Spring, Summer and Fall classification.","0a8dd230":"This suggests if any part of the data is not spreaded at a 6:4 ratio divided by the target `CarInsurance`, It may show a connection of how the target reacts.","129859f3":"# Machine learning models\n![](https:\/\/intellipaat.com\/blog\/wp-content\/uploads\/2017\/01\/What-is-machine-learning.gif)\n\nIn the Next seciton we will make `X` as the features and `y` as `CarInsurance` - the target value we want to predict.\n\n**Assumptions:**\n\n* This is a classification problem so we will use classification methods.\n\n* Train test split will be a 75:25 ratio respectively.\n\n* a 5-fold cross validation is initiated the final value of each metric is the mean score.\n\n## Models we will use:\n\n* **Logistic Regression** \n* **Random Forest Regressor** \n* **XGBoost Classifier**\n \n\n## The Process of Modeling the Data:\n\n1. Importing the model\n\n2. Fitting the model\n\n3. Predicting `CarInsurace`\n\n4. Classification metrics\n\n### Score Metrics for Classification:\n\n* **Accuracy** - Accuracy is the quintessential classification metric. It is pretty easy to understand. And easily suited for binary as well as a multiclass classification problem.\n    \n![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAY4AAAB\/CAMAAADPY9VGAAABZVBMVEX\/\/\/\/\/wAAAsFCS0FAAAAD\/AABpaWn\/vAD\/\/vzh8dP\/xTP\/+e7\/9OGLzUL\/vQD\/57gAr0ugsn6W0lj5+fn\/wh7X7cTq6urf39\/19fXGxsZVVVV3kj16enqpqamFhYXl5eXa2tpMTEyWlpa8vLyYmJjR0dGkpKRCQkK1tbUsLCwZGRlubm5eXl5tbW0lJSVJSUnzAAA2NjYpKSn\/xgDztwAdHR1XfDDQAAAPDw9ukz6FvkneAADepwD\/3YQ1Sx1HNgA\/WSLHlgB3qUEAeTeIAABeRwAApUtFAAAAEQhqAAAhGQBzVwAAXCoALBQAj0EAaC+jAAAlAAAAQx\/o6trF0LB9qWBipVJKpUzV2sI9oDv\/9NT\/4J3\/0lOTuX\/\/1Gv\/6K+vwpZNmTP\/1Fxxp1n\/13So1WQWHwyjewBehjS4AAAAHg1KaimPbABVAAAaFAAAczQzJgApOhc4AABRAACWAAAgKBFsUgASuNL1AAANDklEQVR4nO2diX+bRhbHx94RUWu3dne8XIUBIS5LWApOnChpm8Np3PRImsbO5aTHbrtt0mvbbrt\/\/84MQkKAJCwhWbLn9\/GHj2AAo\/n6vTfHGwwAFxcXFxcXFxcXFxcXFxcXFxfXLFRdK6zTftTzoPULRbV12o96HrR+YaWg3jztRz0P4jgWShzHaWjt8NnRYV4BxzFvocOjx0+ePt98J69w\/c2trZWVt9\/mOOakZ4+fH2yurq7m46iuHR8fb7x4uXJhHBGOowQdPmYshuKIVT3+4OXKSCIcx\/Q6et6FMQ4H0drGy1EmwnFMK\/nLHowCOIjWv+I4Zqa1JI1COAD4+tIwA+E4phP6NkmjIA5Q\/Y7jmIm+GaBRFAeofpDfFeE4plKKRmEcALzgOErX4fPVSXGAF3nxg+OYRu9sTo4DfJXDg+OYQodPV6fAsbbFcZSqx2njOBEOsMFxlKnqP9M0Toaj+pLjKFFHByNwoJox9gZfcxwlKhPIkzhkKI29QTZ6cBwTay0bOpLOCo63DvCvdOOK45hYh08yNHo4XE2DO5o17haZvgfHMbGyzdweDqRbFsS2i8bc4jg9VMJxTKxMl3wwlBdxVplJdI5jYo3GUSSUcxwlagyOdgHr4M6qPI2IHUXFQ3l5Wvt2ZEO3iHhDtzxVv5wWB+8Glqn03NOJcWSnoJYAh4EtKmzI2MKWmS42o2JLFC2f7Mp25oxZKSeWn4MhRLPZDKDaFAwRNrEA9e5hsdvHcnaaKgx2NNGEUCGHG\/7cnmzKEd2N7PzTEuAgEqHJtqQpj1tydKzm9IpNKNJtx6uRk1rzw5H1VifBsb60008SpHXPoOgtMTrWUnrFDusBm9CB\/lxxHGbaVifAUc00q5YOB6n1wOse2+5bR4xDxJ48TxzgaAocS5y6EOMIPRh1di3yaTvc7hb3cKCGLe7OEQdIm0dhHNUPchMRlwuHrihR5HAUZc9W6nE0j3EAHZrb88Tx7OmEOPJpLBmO5KjcdjZ2iADVAm+eOMCz55PgWM+LG8uHw0wc28vDAeoQzhVHqnVVDMeLreVOmc7Dgfs7DjObqLkrwPpcHw0cPT3ZgoK1jTeHLxVcDhzIkXvbHMkO6m3FYSfNTM+ebBbHUX2R7YoXxoEUZdz8IhdY+7K3\/Gkkjurxxlej16KNwWFA6Iw8gYuq+uzb7uLAYTjWjzdefPdya+zi2dE4XLVlz+Dxz6CO3nnyfHNzCA72TpIi65jH4Kjp9i5zyJoakIaMoqpYFJvEYJRABopVr7nkkypQby01VcHUMaJjegWmJc+cqmuH3zx+fG0IjgIkxuNQdiWRjpLKUPBtDenQ9Zt1o1Wn7UkZ+DC0fWfb9oO2TNya5lsWa+JoAb3Who1Go6PO4pvPTK0OfebyG8olvbHHEgDY0YjPCkkTUgYtlsYlbfdwECuQ5ajZj1ViF0gOMWAAiUFJVMtlJ+yRpfJbZtX1whpxFxRqiqK1JIDZ3zuK6rmPI6S7fhM2dg0QYHaJG5Ii3hibiRQYep5HerkRDhB1sAZx6FAXlY4BBI2dYracIPrkerVarS2M\/AWOcJrCmeepUbVHdSPluT2dm\/ndO032jAHQ94jTMcBuk\/ojFJIzcYxDIxVeJzhwSGycuDR1pzvwLfl1IiVz00VWnWlBHay4x4KaQsKz12q2m6jeqO3s1gHuCGpIcOgtQM0kUEOCQ9wNmx6m+23uq2YiQ2fzbrJrAuS7OvmjkVyXjmnX3broImBGtFxd0qll6C49X4RZK+M6NTlQPO1H4OqrNjp4c81XMo8cXFxcb\/x9nP69NU4r1dP+FmdGb7z1t3EaO4h7geMoSwVwjB3B5ThKUwEcl6g4jrloFI7r167cuvH99zfv\/vzD+5dHEFlEHFhjcoHOtmlFpZoPXI2Offt2pi1t0\/I6qJOtlW1o08OaDSSNjiKIiQSUKTUUx\/VXt76Hfd389PbKMCCLiMPG2m6ISW0JnmuFXrdbL8dDeRbW9jxMqluFdDYL1+Ial+IPNQ9jrACr4dq1RpwaJ8bDAxYkpS5Q2HoDCZY2qjkEx\/4tmNUPl\/OBLCIOomi0m47SG3Hamq71i1U2Yx\/UOqQu2UQXUxinVdSi1xtYNQKxEb\/qAMd2ZkVJ1soeXW8gNWaM48q9HBrERG7n8lhMHCiaLqFbFK+ncfvDLbLK6li1cRslcPRqNsbRJptWPI3RjLnEOKAJ67PGsd+t\/XuPPr\/z4ODK1dcPP\/yoe+hunoEsPI56nGqYg8OiptPHsRdbh6rali0y63B6OaFanANj79mW5RAcSGvLxkxxvIpM48c7D1iaz7WLlUrl4tUPh\/NYaBxN2ILRWjIHtjrkp2soPRzA7qAuDtzYhY1Wg5WrJLRoJgkS5KLIRemdFuy0OoyX3cG0IUBwIGjPFMdPrNrv34lzEhkOSqQL5P0Mj5PhQCh3RFAUCk3vKzaw8tIykJYehO\/i2BFMJwrgsmNiNd5J4JC33S4OyTEbuhnZR+yswt4VhmMGmumw39NzVgi40NybHY6Ixuf9l47FOCqVq8xlfZLhcRIcbkfTsllvighkXAiHvwP07peXzMRx1BqCQ0hE71xnRe4Jm1lnlQjlffUePYFD9oJwZjhesaBxJ5FA3cdRqXzMeFyeBgebK0eAmkg0cC7LAKndRS4yy2Luj6hHHxDL74n2fXY927VplwGxU4jFbRfBYQe9jwkcSG0E8W+EeaG8p2woR2y9waxw7HdohT9ILi9I4qj8SYs\/vTwtDqGm6bKGSV0gLGDL3RZsE4oyFrRABqqGPfq1nW2seQ7QPM1FbtAUELCEZqCBwAK+igWFeHfJUbXQAIqqaV4GR5R+EjQTx5S+n5M91lxiWwX2cNhxzyQqBjhM3tOP692K1qwxHKTvUlrS8SCO67Tnd2+AxiCOCgsgP1+aHIcgEhNoEheARIA6hkLXCYNAAUZHdjXaP6PpVfIuqVyTOA4\/ANhDQCJ\/jEHdDGl3GjRttG2Qi3RSYaoCiL0QaEqYmcA1xP42R8ninJO6h8T8HJDuYdlkW6m0+bFBHFdoZd9ZHYHjIvNXlyfGoYcY+6RGyUfHdVuGxf4IGQ5xx6cpu6TeiQsn\/WBa+06IMDnDb7t62\/UFmhEHmq7DOtEuBmJo67gtEgPJOqul1ACO67SqP1sdhaNSYe5qSmdFcTihZBAckUdhODTSBq2ncHiA4RAkyUD1oIvD9GgkoTg8R5JE+YzioK2q++kXub47SKPykLV2J8axQ7c7BIdeAw5xVsQJ+7LgAwPKxDMBwQUqwUFHicy9OvVdFIdEXJFjmA0E2hq5GJHGvyKSRhZQfSArIPSjlN\/lVxIHixwpV5XFcfEXah6XJsThM+eEiR3ImmAJBnADwoJEZKktk4ZPQDhpJF7S9\/eaoR2Q1q9FHZsSCBYiETwg15OLyS4JMIFgipogiMAMgrpw5nBco8aRppHBUXlNTvt1Dr1yJxx\/zllTEgf1Vf8Zj4NFj+Rg4oxwmOcwvSqB43on08jNx\/Fxqq27mGNWS6kEjv1cX5WD4yobSuQ4ZqAEjlc5rdxcHO\/9AeFvHMcslMBB+4CfF8Fx8SMIO+9zHDNQAsetvGZuHo7KL4M9j7Jx1Of8yokFUgLHjfTg4VAcH88Oh0yXyWaXdJ0XLRoOpwZYP\/ycaiJnNQUOIxBUOgMdNBFQNdWVdnEgiUHgmazIUfeCOrboNFEy6+PcKIHjp5OE8klxNF1giDqpbc0Fqkf6eg2dffYFIOjAkM2AWgcdYBfm+w6pxVCqZVW4ofvJZDhEj2aQCdFIukpImLsyOegreiixIkdF1FkFrhGex0U2qW7goyI4aDfw5mT9jiyOFsHR9hXFMZI4\/LYSjLvXWVRykIRm82T\/T1oWx8PUjMdJnBVBIBp00oM6qy4OhscENR8YhtlmOESvvHSAZVJyCPFGbizP4viCJohOOGZleoIqIS1QNQTaLn2Ns0zjexAowCFFBlBrddqywpm573OhJI5Xud4qg+Nienp2Fr3y8f8B7EwqiWP\/Xl7PI4ODNnPvTjr9VFBGuKCvjZixBiZnf88zjzSOq+npDj5mVZ4GcOznJJJkcPyRGl7nOErUYGIP7ZjfOxiJ42HGODiO8jSIg5lHKpdkEMdrmI4cHEeJSiWFsry3R8NxvEfLfxtI6+E4SlQ6ZZolsD86GILjde6SAo6jNGUWFPwOU53zBA4WNwZ6gBxHucrguM54wM8OMjiu\/jeisZIWx1Gachaj3YjWosUrbiIcF99judKwk7ENjqNE5S3VvNJdl\/nozoOD1c13CYrXf\/4RHcoufeI4ylTuQuZrv3eB3Pvx\/v2\/Pvrii+4u\/DSPBsdRnoYs83+Vt7D8bv6yco6jPA19CcaVG4NEfvvf0LdgcBylacQrYvav3fgrQvHrzZ9vj3hHDMdRmt54a6zYP4pYeXu4OI7StPaPsdoYq9P+ElxcXFxcXFxc50b\/B5H5sw\/x156CAAAAAElFTkSuQmCC)\n\n**key**:\n\n    TP - True Positive\n    TN - True Negitive\n    TP - True Positive\n    TN - True Negitive\n    \n* **Precision** - Answers the following question: what proportion of **predicted Positives** is truly Positive?\n\n    Precision = (TP)\/(TP+FP)\n    \n* **Recall** - Answers the following question: what proportion of **actual Positives** is correctly classified?\n\n    Recall = (TP)\/(TP+FN)\n\n* **f1 score** - A number between 0 and 1, the harmonic mean of precision and recall.\n\n![](https:\/\/miro.medium.com\/max\/564\/0*-lZUM_HsT3RsgePy.png)","6fe0bdc9":"<h2 style='text-align:center;font-family:Comic Sans MS;font-size:40px;border:20px;color:Black'>Car Insurance Cold Calls<h2>\n\n![](https:\/\/media2.giphy.com\/media\/NsGAPK1LajNt2urNgA\/giphy.gif)\n\n<h2 style='text-align:center;font-family:Comic Sans MS;font-size:30px;border:20px;color:Black'>Table of Contents<h2>\n    \n1. Introduction\n2. Data Id\n3. Librraries\n4. Data analysis and preprocessing\n5. ML models\n6. Results for Test set\n    \n# Introduction\n## description\n\nThis is a dataset from one bank in the United States. Besides usual services, this bank also provides car\ninsurance services. The bank organizes regular campaigns to attract new clients. The bank has potential\ncustomers\u2019 data, and bank\u2019s employees call them for advertising available car insurance options. We are\nprovided with general information about clients (age, job, etc.) as well as more specific information about the\ncurrent insurance sell campaign (communication, last contact day) and previous campaigns (attributes like\nprevious attempts, outcome). \n    \n## Aim of the notebook:\nThe task is to predict for 1000 customers who were contacted during the current campaign, whether they will\nbuy car insurance or not.\n\n![](https:\/\/media0.giphy.com\/media\/l2JdXdTUsNAOZLo8o\/giphy.gif)\n\n# Data Id\n\nThis dataset is named [Car Insurance Cold Calls](https:\/\/www.kaggle.com\/kondla\/carinsurance). The dataset contains two sets data:\n1. **training set** - 4,000 records under 19 attributes.\n\n2. **testing set** - 1,000 records under 19 attributes.\n    \n## Attributes:\n\n![](https:\/\/miro.medium.com\/max\/962\/1*qPepoH3_CzypeZ-K-z0VaQ.png)\n\n# Libraries \ud83d\udcda","3d783d20":"<h2 style='text-align:left;font-family:Comic Sans MS;font-size:30px;border:20px;color:Black'>\ud83d\udcddNote:<h2>\n    <h2 style='text-align:left;font-family:Comic Sans MS;font-size:20px;border:20px;color:Black'>We need to insert the engineered features into the testing set! let's update it:<h2>\n        \n### Our Chosen Features will be stored in the variable `reorder_columns`","8fa3edba":"# Metrics results table","3437578b":"## Missing values \u2b55\n\nThe filling missing values strategy here:\n1. Filling the mode value in `Job`,`Education`, `Communication` attributes.\n2. Filling the value `no prevoius contact` in our `Outcome` attribute.","f0bcec85":"### Balance status\n\nIs the Yearly Balance negitive, low, medium or high.","783cbc58":"### multivariate plots\n\nHow the data behaves and splits by our target data `CarInsurance`.","ea22c270":"## Random Forest","d07315e4":"### correlation plots","c54d6ec0":"## feature encoding\n\n**one hot**:\n* `Job`\n* `Outcome`\n\n\n**Label**:\n\n* `Lc_seasons`\n* `call_time`\n* `Age_Group`\n* `LC_Month_Period`\n* `Time_Of_Day`\n* `DaysPassedLenth`\n* `Balance_status`\n\n<h2 style='text-align:left;font-family:Comic Sans MS;font-size:30px;border:20px;color:Black'>\ud83d\udcddNote:<h2>\n    <h2 style='text-align:left;font-family:Comic Sans MS;font-size:20px;border:20px;color:Black'>One Hot is better for ordinal attributes, Label is for nominal attributes.<h2>"}}