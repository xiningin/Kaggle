{"cell_type":{"beecb998":"code","74a68117":"code","27d649da":"code","9ea5e3cd":"code","a60ca20c":"code","25a2192a":"code","b5797a17":"code","e18326d3":"code","7d33758c":"code","e0326f62":"code","93a4857f":"code","11a428f9":"code","307e2db3":"code","e2c02367":"code","e5299edd":"code","8eb42ba8":"code","3f644715":"code","faa9660b":"markdown","17b86a26":"markdown","5d99acbf":"markdown","834e43ff":"markdown","7a58d085":"markdown","c766a2b9":"markdown","14fd3a85":"markdown","0aa97fce":"markdown","8331f399":"markdown","f1cd95cb":"markdown","ac045ef6":"markdown","93887c98":"markdown"},"source":{"beecb998":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","74a68117":"data=pd.read_csv('..\/input\/tmdb_5000_movies.csv')  # Show the path you will use","27d649da":"data.info() # Display the content of data","9ea5e3cd":"def tuble_ex():  #define your function\n    \"\"\"Write here anything describes your function\"\"\"  #function description with triple quotes\n    t=(1,2,3)   #write what you want your function to do\n    return t\nprint(tuble_ex())","a60ca20c":"# can you guess that what does this code print?\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","25a2192a":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n\n# First local scope searched, then global scope searched, if both of them can not be found lastly built in scope searched.","b5797a17":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)\n# These are defined functions and it is not recommended to use them as a variable name","e18326d3":"# A nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())","7d33758c":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n\n# what if we want to change default arguments\nprint(f(5,4,3))","e0326f62":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\nprint(\"\")\n\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n# If you do not understand this part turn for loops in PART1 and look at dictionary in for loop\n    for key, value in kwargs.items():               \n        print(key, \" \", value)\n        \nf(country = 'spain', capital = 'madrid', population = 123456)\n#f(something)  it gives an error","93a4857f":"# Lambda function: makes functions simpler and shorter\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","11a428f9":"# Anonymus function: is just like Lambda but it takes more than one arguments\nnumber_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","307e2db3":"# An iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","e2c02367":"# An zipping example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)\n# It combines lists to save memory (allocation)\nprint('')\n# An unzipping example\nun_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","e5299edd":"# An example of a list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","8eb42ba8":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 11 else i+5 for i in num1]\nprint(num2)","3f644715":"# lets return movie csv and make one more list comprehension example\n# lets classify movies whether they are expensive or cheap. Our threshold is average budget.\nthreshold = sum(data.budget)\/len(data.budget) # calculating average budget\nprint('Average budget: ', threshold)\ndata[\"budget_level\"] = [\"high\" if i > threshold else \"low\" for i in data.budget]\ndata.loc[1706:1716,[\"budget_level\",\"budget\"]]   # I will mention \"loc\" more detailed later","faa9660b":"**List Compherension *****\n\n*One of the most important topic for Data Science.*\n\nWe use list comprehension for data analysis often. \n\nList Comprehension: collapses for loops for building lists into a single line .\n\nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","17b86a26":"**Nested Functions**","5d99acbf":"**Scope**","834e43ff":"**Basic steps to start Data Science: PART2**","7a58d085":"[i + 1 for i in num1 ]: list of comprehension\n\ni +1: list comprehension syntax \n\nfor i in num1: for loop syntax \n\ni: iterator \n\nnum1: iterable object","c766a2b9":"**Default and Flexible Arguments**","14fd3a85":"**Iterators**","0aa97fce":"**Read more here:**\n\n* [Basic steps to start Data Science: PART1](https:\/\/www.kaggle.com\/osmanaliyardim\/data-science-introduction)\n\n* [Basic steps to start Data Science: PART3](https:\/\/www.kaggle.com\/osmanaliyardim\/data-science-introduction-3)\n\n* [Basic steps to start Data Science: PART4](https:\/\/www.kaggle.com\/osmanaliyardim\/data-science-introduction-4)","8331f399":"**User Defined Functions**","f1cd95cb":"**Lambda Function**","ac045ef6":"**Anonymus Function**","93887c98":"**Zipping**"}}