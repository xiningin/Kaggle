{"cell_type":{"d2d54fbd":"code","17a5070f":"code","fce2f691":"code","2a759ff2":"code","85adb5fc":"code","ad5ffd06":"code","97826a9f":"code","72210c0a":"code","62a21928":"code","2b7c9bc3":"code","67389a28":"code","64e4989a":"code","d70dc873":"code","6d43148a":"code","80347996":"code","60874b0c":"code","5c19d110":"code","9959c89f":"code","4819f778":"code","7f8a84aa":"code","c139e615":"code","e0d35573":"code","96268921":"code","788dddbc":"code","9aa8da66":"code","76074627":"code","54b4c579":"code","b94788be":"code","cac74f41":"code","4d3b842b":"code","40128759":"code","b1867956":"code","dca78709":"code","f0c2d756":"code","b36712df":"code","a8c92804":"code","c8a52d98":"code","7663e42f":"code","7d430b02":"code","75cf5178":"code","405d7b02":"code","203d12d0":"code","e2b96c5c":"code","b06097d1":"markdown","46f6bbeb":"markdown","75d3ab29":"markdown","7e2e30ed":"markdown","dc3b9a06":"markdown","178d80a1":"markdown","bb7c232c":"markdown","6b658144":"markdown","e853fb0d":"markdown","4654b9ff":"markdown","a481db4f":"markdown","fda134c5":"markdown","4c81f431":"markdown","56b3fd96":"markdown","894da995":"markdown","eaaed093":"markdown","a64ec7e6":"markdown","b7022288":"markdown","a4bb8c47":"markdown","5f4312a7":"markdown","f503df68":"markdown","19d223ef":"markdown","84637bb2":"markdown","117cf71e":"markdown"},"source":{"d2d54fbd":"import os\nimport warnings  \nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nimport math \nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score , f1_score , precision_score, recall_score , roc_auc_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_curve, auc\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","17a5070f":"dataset = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","fce2f691":"dataset.info()","2a759ff2":"dataset.describe()","85adb5fc":"dataset['sex'] = dataset['sex'].astype('object')\ndataset['cp'] = dataset['cp'].astype('object')\ndataset['fbs'] = dataset['fbs'].astype('object')\ndataset['restecg'] = dataset['restecg'].astype('object')\ndataset['exang'] = dataset['exang'].astype('object')\ndataset['slope'] = dataset['slope'].astype('object')\ndataset['ca'] = dataset['ca'].astype('object')\ndataset['thal'] = dataset['thal'].astype('object')","ad5ffd06":"dataset.dtypes","97826a9f":"dataset.isnull().sum().sort_values()","72210c0a":"sns.set_style('whitegrid')","62a21928":"sns.countplot(dataset[\"target\"])","2b7c9bc3":"sns.distplot(dataset['age'].sort_values())","67389a28":"plt.figure(figsize = (12,6))\nsns.countplot(dataset['age'].sort_values()  ,  hue = dataset['target'])","64e4989a":"sns.countplot('sex' , data  = dataset , hue = 'target')","d70dc873":"sns.countplot('cp' , data  = dataset , hue = 'target')","6d43148a":"sns.distplot(dataset['trestbps'].sort_values())","80347996":"sns.boxplot(dataset['trestbps'])","60874b0c":"sns.distplot(dataset['chol'].sort_values())","5c19d110":"sns.boxplot(dataset['chol'])","9959c89f":"sns.countplot('fbs' , data  = dataset , hue = 'target')","4819f778":"sns.countplot('restecg' , data  = dataset , hue = 'target')","7f8a84aa":"sns.distplot(dataset['thalach'].sort_values())\n","c139e615":"sns.countplot('exang' , data  = dataset , hue = 'target')\n","e0d35573":"sns.distplot(dataset['oldpeak'].sort_values())","96268921":"sns.boxplot(dataset['oldpeak'])","788dddbc":"sns.countplot('slope' , data  = dataset , hue = 'target')","9aa8da66":"sns.countplot('ca' , data  = dataset , hue = 'target')","76074627":"sns.countplot('thal' , data  = dataset , hue = 'target')","54b4c579":"X = dataset.drop([\"target\"], axis = 1)\n\ny = dataset[\"target\"].values","b94788be":"X = pd.get_dummies(X)  #drop_first = True?","cac74f41":"X.head(10)","4d3b842b":"from sklearn.preprocessing import RobustScaler\nrb = RobustScaler()\nX[[\"age\" , \"trestbps\" , \"chol\" , \"thalach\" , \"oldpeak\"]] = rb.fit_transform(X[[\"age\" , \"trestbps\" , \"chol\" , \"thalach\" , \"oldpeak\"]])","40128759":"X.head(10)","b1867956":"for v in X.columns:\n    variance = X.var()\n  \nvariance = variance.sort_values(ascending = False)\n   \nplt.figure(figsize=(12,5))\nplt.plot(variance)  ","dca78709":"variance","f0c2d756":"from sklearn.feature_selection import VarianceThreshold\n\nthresholder = VarianceThreshold(threshold=0.01)\n\nX = X.loc[:, thresholder.fit(X).get_support()]","b36712df":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","a8c92804":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score \nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import roc_auc_score\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\n","c8a52d98":"classifiers =  [\n       ['Logistic Regression Classifier :', LogisticRegression()] ,\n       ['XGB Classifier :', XGBClassifier()] ,\n       ['K-Neighbors Classifier :', KNeighborsClassifier()] ,\n       ['Support Vector Classifier :', SVC()] ,\n       ['Naive Bayes :' , GaussianNB()] ,\n       ]\n\nfor name,model in classifiers:    \n\n    model = model\n    \n    model.fit(X_train,y_train)\n    \n    y_pred_train = model.predict(X_train)\n\n    y_pred = model.predict(X_test)\n     \n    print('-----------------------------------')\n    print(name)\n    \n    print(\" --  TRAIN scores --  \") \n    print('Accuracy: ', accuracy_score( y_train , y_pred_train))\n    print(\"f1: \",f1_score( y_train , y_pred_train))\n    print(\"precision: \", precision_score( y_train , y_pred_train))\n    print(\"recall: \", recall_score( y_train , y_pred_train))\n    print(\"ROC AUC: \", roc_auc_score( y_train , y_pred_train))\n\n    print('---------------------------------')\n    \n    print(\" --  TEST scores --  \")\n    print('Accuracy: ', accuracy_score( y_test, y_pred))\n    print(\"f1: \",f1_score( y_test, y_pred))\n    print(\"precision: \", precision_score( y_test, y_pred))\n    print(\"recall: \", recall_score( y_test, y_pred))\n    print(\"ROC AUC: \", roc_auc_score( y_test, y_pred))\n\n    print('---------------------------------')\n","7663e42f":"from xgboost import XGBClassifier\n\nmodel = XGBClassifier()\nmodel.fit( X_train , y_train )\n\n\nimportances = model.feature_importances_\nindex = np.argsort(importances)[::-1][0:15]\nfeature_names = X_train.columns.values\n\nplt.figure(figsize=(10,5))\nsns.barplot(x = feature_names[index], y = importances[index]);\nplt.title(\"Top important features \");","7d430b02":"from sklearn.feature_selection import SelectFromModel\n\nimportances = pd.Series(importances)\nimportances = importances.sort_values(ascending = False)  \n\nimportances.tail(10)","75cf5178":"sfm = SelectFromModel(model, threshold=0.001)   \n\nX_train = X_train.loc[ :, sfm.fit(X_train , y_train).get_support()]\n\nX_test = X_test[X_train.columns]","405d7b02":"from sklearn.model_selection import RandomizedSearchCV\n\n\ncolsample_bylevel = [1 , 0.5]\ncolsample_bytree = [1 , 0.5]\ngamma = [0 , 1 , 5]\nlearning_rate = [0.1 , 0.05 , 0.0125 , 0.001]\nmax_delta_step = [0]\nmax_depth = [ 1 , 5 , 10 ]\nmin_child_weight = [1]\nn_estimators = [300 , 400 , 500,  600 , 700]\nobjective = ['binary:logistic']\nrandom_state = [42]     \nreg_alpha = [0, 1]\nreg_lambda = [0 , 1]\nscale_pos_weight = [1]\nsubsample = [0.5, 1 ]\n\n\nparam_distributions = dict(\n                           colsample_bylevel = colsample_bylevel,\n                           colsample_bytree = colsample_bytree,\n                           gamma = gamma, \n                           learning_rate = learning_rate,\n                           max_depth = max_depth,\n                           min_child_weight = min_child_weight,\n                           n_estimators = n_estimators,\n                           objective = objective,\n                           random_state = random_state,\n                           reg_alpha = reg_alpha,\n                           reg_lambda = reg_lambda,\n                           scale_pos_weight = scale_pos_weight,\n                           subsample = subsample , \n                           \n                           ) \n\n\n\nestimator = XGBClassifier()     \n\n\nRandomCV = RandomizedSearchCV(\n                            estimator = estimator,         \n                            param_distributions = param_distributions,\n                            n_iter = 10,\n                            cv = 5,\n                            scoring = \"roc_auc\",   \n                            random_state = 42, \n                            verbose = 1, \n                            n_jobs = None,\n                            )\n\n\n\nhyper_model = RandomCV.fit(X_train, y_train)                   \n                                              \n\nprint('Best Score: ', hyper_model.best_score_)    \n\nprint('Best Params: ', hyper_model.best_params_)\n","203d12d0":"hyper_model.best_estimator_.fit(X_train,y_train)\n\ny_pred_train_hyper = hyper_model.best_estimator_.predict(X_train)  \n\ny_pred_hyper = hyper_model.best_estimator_.predict(X_test)  \n","e2b96c5c":"print(\"HYPER   TRAIN\")\nprint('Accuracy Score ', accuracy_score( y_train , y_pred_train_hyper))\nprint(\"f1: \",f1_score(y_train , y_pred_train_hyper))\nprint(\"precision: \", precision_score(y_train , y_pred_train_hyper))\nprint(\"recall_score: \", recall_score( y_train, y_pred_train_hyper))\nprint(\"ROC AUC: \", roc_auc_score( y_train, y_pred_train_hyper))\nprint('---------------------------------')\n\n\nprint(\" HYPER  TEST\")\nprint('Accuracy Score ', accuracy_score( y_test, y_pred_hyper))\nprint(\"f1: \",f1_score(y_test, y_pred_hyper))\nprint(\"precision: \", precision_score(y_test, y_pred_hyper))\nprint(\"recall_score: \", recall_score( y_test, y_pred_hyper))\nprint(\"ROC AUC: \", roc_auc_score( y_test, y_pred_hyper))\n","b06097d1":"*Thalassemia*","46f6bbeb":"If you have any advice\/suggestion, let me know in the comments and upvote!\nThank you!","75d3ab29":"If you have any advice\/suggestion, let me know in the comments and upvote!\nThank you!","7e2e30ed":"***Preprocessing***","dc3b9a06":"*Blood sugar*","178d80a1":"*Age*","bb7c232c":"*XGB features importance & Hyperparameters*","6b658144":"*Hyper Models*","e853fb0d":"![](https:\/\/i.pinimg.com\/originals\/85\/43\/97\/8543971cee65bdf4da2aa23801101a44.jpg)","4654b9ff":"*Chest pain type*","a481db4f":"*Sex*","fda134c5":"*Exercise induce angina?*","4c81f431":"*Ecg*","56b3fd96":"*Check Variance*","894da995":"*Num major vessels*","eaaed093":"*Oldpeak*","a64ec7e6":"*Blood pressure*","b7022288":"*Modeling*","a4bb8c47":"*Slope*","5f4312a7":"*Check Target*","f503df68":"***Heart Anatomy - Leonardo da Vinci***","19d223ef":"**EDA**","84637bb2":"*Cholesterol*","117cf71e":"*Max heart rate achieved*"}}