{"cell_type":{"9e4e7a26":"code","b2849894":"code","a5f2c6fc":"code","5f8fcfba":"code","c173b4e7":"code","a5d08ccf":"code","40890bf4":"code","4b0b0d1a":"code","affef28e":"code","a695f5d4":"code","5051394c":"code","41e26fd0":"code","e5a08feb":"code","7e9256a1":"code","b05b99fa":"code","ef678430":"code","4173d248":"code","a3aa05f2":"code","819f8322":"code","b2e53f51":"code","5795f451":"markdown","2254b233":"markdown"},"source":{"9e4e7a26":"import numpy as np \nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\n\n# grid search k value for SMOTE oversampling for imbalanced classification\nfrom numpy import mean\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler","b2849894":"maindf=pd.read_csv(\"..\/input\/amazon-ml-engineer-hiring-challenge\/train.csv\")\nmaindf[0:3]","a5f2c6fc":"print(maindf.info())\nprint(maindf.describe())","5f8fcfba":"if round( (sum(maindf.isnull().sum())\/len(maindf) )*100,3) <= 5: # 5% is our threshold \n    print(round( (sum(maindf.isnull().sum())\/len(maindf) )*100,3),\"%. Remove the NaN data\")\n    \nelse:\n    print(\"Preprocessing required\")","c173b4e7":"maindf=maindf.dropna()\nmaindf.pop(\"customer_id\")","a5d08ccf":"print(maindf[\"customer_active_segment\"].value_counts())\nprint(\"\\n\")\nprint(maindf[\"X1\"].value_counts())\nprint(\"\\n\")\nprint(maindf[\"customer_category\"].value_counts())\n\n# no.of.'0'\/ no.of.'0'+ no.of.'1' %\nprint(\"% for 0\",round ( ( maindf[\"customer_category\"].value_counts()[0] \/( maindf[\"customer_category\"].value_counts()[0]+maindf[\"customer_category\"].value_counts()[1]))*100,3))\nprint(\"% for 1\",round ( (maindf[\"customer_category\"].value_counts()[1] \/( maindf[\"customer_category\"].value_counts()[0]+maindf[\"customer_category\"].value_counts()[1]))*100,3))","40890bf4":"sns.pairplot(data=maindf,hue='customer_category')\n# skips 'X1' and 'customer_active_segment'\n","4b0b0d1a":"sns.pairplot(data=maindf, kind=\"kde\")","affef28e":"corr_mat = maindf.corr().stack().reset_index(name=\"correlation\")\n\n# Draw each cell as a scatter point with varying size and color\ng = sns.relplot(\n    data=corr_mat,\n    x=\"level_0\", y=\"level_1\", hue=\"correlation\", size=\"correlation\",\n    palette=\"vlag\", hue_norm=(-1, 1), edgecolor=\".7\",\n    height=10, sizes=(50, 250), size_norm=(-.2, .8),\n)\n\n# Tweak the figure to finalize\ng.set(xlabel=\"\", ylabel=\"\", aspect=\"equal\")\ng.despine(left=True, bottom=True)\ng.ax.margins(.02)\nfor label in g.ax.get_xticklabels():\n    label.set_rotation(90)\nfor artist in g.legend.legendHandles:\n    artist.set_edgecolor(\".7\")","a695f5d4":"y=maindf.pop('customer_category')\nx=pd.get_dummies(maindf,columns=['customer_active_segment','X1'])\n\nprint(x)\nprint(y)","5051394c":"\n#use smoteen\nfrom collections import Counter\nfrom sklearn.datasets import make_classification\nfrom imblearn.combine import SMOTEENN \n\nprint('Original dataset shape %s' % Counter(y))\nsme = SMOTEENN(random_state=42)\nX_res, y_res = sme.fit_resample(x, y)\nprint('Resampled dataset shape %s' % Counter(y_res))","41e26fd0":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(\n    X_res, y_res, test_size=0.20, random_state=42)","e5a08feb":"from sklearn.metrics import accuracy_score\nclf1=KNeighborsClassifier()\nmodel1=clf1.fit(x_train,y_train)\npred_y=model1.predict(x_test)\nprint(accuracy_score(y_test,pred_y))\n\n","7e9256a1":"from sklearn.metrics import accuracy_score\nclf2=RandomForestClassifier()\nmodel2=clf2.fit(x_train,y_train)\npred_y=model2.predict(x_test)\nprint(accuracy_score(y_test,pred_y))","b05b99fa":"from sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nclf3=SVC()\nmodel3=clf3.fit(x_train,y_train)\npred_y=model3.predict(x_test)\nprint(accuracy_score(y_test,pred_y))","ef678430":"testdf=pd.read_csv(\"..\/input\/amazon-ml-engineer-hiring-challenge\/test.csv\")","4173d248":"testdf=testdf.dropna()\nuser_test=testdf.pop(\"customer_id\")","a3aa05f2":"test_x=pd.get_dummies(testdf,columns=['customer_active_segment','X1'])","819f8322":"predictions=model2.predict(test_x)\nprint(predictions)","b2e53f51":"to_submit=pd.DataFrame(list(zip(user_test,predictions)),columns=['userid','customer_category'])","5795f451":"# the response variable is imbalanced.","2254b233":"customer segment and X1 are categorical variables. and our target variable is a binary response ( 0 and 1)"}}