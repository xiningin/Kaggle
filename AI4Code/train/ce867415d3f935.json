{"cell_type":{"d6269c70":"code","e8e3acc6":"code","591467a4":"code","e246484d":"code","e0c34d6d":"code","9e7aa4ff":"code","e453c8ff":"code","aca1e24a":"code","31ada158":"code","f0315f02":"code","ceec42b8":"code","b961b051":"code","b6eba4ee":"code","0bd4e7eb":"code","1472d8af":"code","23298f0b":"code","d15e45fa":"markdown","c7d02c56":"markdown","38b7cf03":"markdown","a4c7b11b":"markdown"},"source":{"d6269c70":"import numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\ntry:\n    import apyori\nexcept:\n    !pip install apyori\n\nfrom apyori import apriori","e8e3acc6":"loan = pd.read_csv(r'\/kaggle\/input\/personal-loan\/personal_loan.csv')","591467a4":"loan.head(2)","e246484d":"plt.subplot(2, 2, 1)\nloan.save_act.value_counts().plot(kind='pie')\nplt.subplot(2, 2, 2)\nloan.current_act.value_counts().plot(kind='pie')\nplt.subplot(2, 2, 3)\nloan.mortgage.value_counts().plot(kind='pie')\nplt.subplot(2, 2, 4)\nloan.car.value_counts().plot(kind='pie')","e0c34d6d":"plot = loan.children.value_counts().plot(kind='bar')\nplot.set_xlabel(\"Number of Children\", labelpad=20, weight='bold', size=12)\nplot.set_ylabel(\"Number of Applicants\", labelpad=20, weight='bold', size=12)\nplot","9e7aa4ff":"loan.married.value_counts().plot(kind='pie')","e453c8ff":"plot = loan.income.hist(bins=6)\nplot.set_xlabel(\"Yearly Income\", labelpad=20, weight='bold', size=12)\nplot.set_ylabel(\"Number of Applicants\", labelpad=20, weight='bold', size=12)\nplot","aca1e24a":"loan.sex.value_counts().plot(kind='pie')","31ada158":"loan.region.value_counts().plot(kind='pie')","f0315f02":"plot = loan.age.hist(bins=6)\nplot.set_xlabel(\"Age (years)\", labelpad=20, weight='bold', size=12)\nplot.set_ylabel(\"Number of Applicants\", labelpad=20, weight='bold', size=12)\nplot","ceec42b8":"loan.income = pd.qcut(loan.income, 4, labels=['very_low_income','low_income','medium_income','high_income'])\nloan.age = pd.qcut(loan.age, 3, labels=['young','middle_age','old'])\nloan.drop(['id'], axis=1, inplace=True)\n\nloan.married.replace({'NO': 'not_married', 'YES': 'married'}, inplace=True)\nloan.children.replace({0:'no_children',1:'1_child',2:'2_children',3:'3_children'}, inplace=True)\nloan.car.replace({'NO': 'no_car', 'YES': 'car'}, inplace=True)\nloan.save_act.replace({'NO': 'no_savings_act', 'YES': 'savings_act'}, inplace=True)\nloan.current_act.replace({'NO': 'no_act', 'YES': 'act'}, inplace=True)\nloan.mortgage.replace({'NO': 'no_mortgage', 'YES': 'mortgage'}, inplace=True)\nloan.pep.replace({'NO': 'no_pep', 'YES': 'pep'}, inplace=True)","b961b051":"loan.head(2)","b6eba4ee":"rules = list(apriori(loan.values,\n        min_support=0.12,\n        min_confidence=0.80,\n        min_lift=1.8,\n        max_length=None))","0bd4e7eb":"for rule in rules:\n    stat = rule.ordered_statistics[0]\n    print('Rule: ', list(stat.items_base), ' -> ', list(stat.items_add))\n    print(\"Support: \" + str(rule[1]))\n\n    print(\"Confidence: \" + str(stat.confidence))\n    print(\"Lift: \" + str(stat.lift))\n    print(\"=====================================\")","1472d8af":"rules = list(apriori(loan.values,\n        min_support=0.05,\n        min_confidence=0.7,\n        min_lift=2,\n        max_length=3))","23298f0b":"for rule in rules:\n    stat = rule.ordered_statistics[0]\n    if (list(stat.items_add)[0] not in ['pep','no_pep']) or len(stat.items_add) > 1:\n        continue\n    \n    print('Rule: ', list(stat.items_base), ' -> ', list(stat.items_add))\n    print(\"Support: \" + str(rule[1]))\n\n    print(\"Confidence: \" + str(stat.confidence))\n    print(\"Lift: \" + str(stat.lift))\n    print(\"=====================================\")","d15e45fa":"## Creating Association Rules","c7d02c56":"# Data Prep","38b7cf03":"## Finding Association Rules specifically tied to PEP","a4c7b11b":"# Data Exploration"}}