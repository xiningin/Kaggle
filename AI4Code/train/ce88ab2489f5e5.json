{"cell_type":{"a678547e":"code","4ef0721b":"code","fd36e0d3":"code","d66e9a8f":"code","48f3d218":"code","b6f0ecd2":"code","9e30125b":"code","12c862b0":"code","5ac8583f":"code","d0cad01c":"code","399f2cc5":"code","cfcfa8ce":"code","4f008349":"code","c452919a":"code","840e4341":"code","6d048dad":"code","6c868c04":"code","0577acd4":"code","2b6527e6":"code","4a21b8ae":"code","58c85863":"code","d5cdeb55":"code","30faeac0":"code","8cc88a5c":"code","7b6c6363":"markdown","651631a6":"markdown"},"source":{"a678547e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ef0721b":"import matplotlib.pylab as plt\nfrom matplotlib import cm\nimport math\nimport pandas as pd\nimport numpy as np\nimport random\n\n%matplotlib inline \nplt.style.use('seaborn-whitegrid')\n# plt.rc('text', usetex=False)\nplt.rc('font', family='times')\nplt.rc('xtick', labelsize=10) \nplt.rc('ytick', labelsize=10) \nplt.rc('font', size=12) ","fd36e0d3":"data = pd.read_csv(\"\/kaggle\/input\/datasetjupyter\/files\/ch04\/ACCIDENTS_GU_BCN_2013.csv\", encoding='latin-1')\nprint (data.columns)","d66e9a8f":"#Create a new column which is the date\ndata['Date'] = '2013-'+data['Mes de any'].apply(lambda x : str(x)) + '-' +  data['Dia de mes'].apply(lambda x : str(x))\ndata['Date'] = pd.to_datetime(data['Date'])\naccidents = data.groupby(['Date']).size()\nprint (\"Mean:\", accidents.mean())","48f3d218":"fig, ax = plt.subplots(1, 1, figsize=(12, 4))\nplt.ylabel('Number of accidents')\nplt.xlabel('Day')\nplt.plot(range(0, 365), np.array(accidents), 'b-+', lw=0.7, alpha=0.7)\nplt.plot(range(0, 365), [accidents.mean()]*365, 'r-', lw=0.7, alpha=0.9)\nplt.show()","b6f0ecd2":"fig, ax = plt.subplots(1, 1, figsize=(12, 3))\nplt.ylabel('Frequency')\nplt.xlabel('Number of accidents')\nplt.hist(np.array(accidents), bins=20)\nax.axvline(x=accidents.mean(), ymin=0, ymax=40, color=[1, 0, 0])\nplt.savefig(\"bootmean.png\",dpi=300, bbox_inches='tight')\nplt.show()","9e30125b":"print (\"Mean:\", accidents.mean(), \"; STD:\", accidents.std())","12c862b0":"df = accidents.to_frame()\nm = []\n\nfor i in range(10):\n    df['for_testing'] = False\n    # get a 25% sample \n    sampled_ids = np.random.choice(df.index,\n                                   size=np.int64(np.ceil(df.index.size * 0.25)),\n                                   replace=False)\n    df.loc[sampled_ids, 'for_testing'] = True\n    accidents_sample = df[df['for_testing'] == True]\n    m.append(accidents_sample[0].mean())\n    print  ('Sample '+str(i)+': Mean', '%.2f' % accidents_sample[0].mean())","5ac8583f":"fig, ax = plt.subplots(1, 1, figsize=(12, 2))\nx = range(10)\nax.step(x,m, where='mid')\nax.set_ylabel('Mean')\nax.set_xlabel('Sample')","d0cad01c":"plt.autumn()\n\n# population\ndf = accidents.to_frame()    \nN_test = 10000              \nelements = 200             \n\n# mean array of samples\nmeans = [0] * N_test             \n\n# sample generation\nfor i in range(N_test):          \n    rows = np.random.choice(df.index.values, elements)\n    sampled_df = df.loc[rows]\n    means[i] = sampled_df.mean()\n    \nfig, ax = plt.subplots(1, 1, figsize=(12,3))\n\nplt.hist(np.array(means),bins=50)\nplt.ylabel('Frequency')\nplt.xlabel('Sample mean value')\nax.axvline(x = np.array(means).mean(), \n           ymin = 0, \n           ymax = 700, \n           color = [1, 0, 0])\nplt.savefig(\"empiricalmean.png\",dpi=300, bbox_inches='tight')\nplt.show()\nplt.set_cmap(cmap=cm.Pastel2)\n\nprint (\"Sample mean:\", np.array(means).mean())","399f2cc5":"rows = np.random.choice(df.index.values, 200)\nsampled_df = df.loc[rows]\nest_sigma_mean = sampled_df.std()\/math.sqrt(200)\n\nprint ('Direct estimation of SE from one sample of 200 elements:', \\\n       est_sigma_mean[0])\nprint ('Estimation of the SE by simulating 10000 samples of 200 elements:',  \\\n       np.array(means).std())","cfcfa8ce":"def meanBootstrap(X,numberb):\n    import numpy as np\n    x = [0]*numberb\n    for i in range(numberb):\n        sample = [X[_] for _ in np.random.randint(len(X), size=len(X))]\n        x[i] = np.mean(sample)\n    return x\n\nm = meanBootstrap(accidents, 10000)\nprint (\"Mean estimate:\", np.mean(m))","4f008349":"fig, ax = plt.subplots(1, 1, figsize=(12, 3))\nplt.ylabel('Frequency')\nplt.xlabel('Sample mean value')\nplt.hist(m, \n         bins = 50, \n         density = True)\nax.axvline(x = np.mean(m), \n           ymin = 0.0, \n           ymax = 1.0, \n           color = [1, 0, 0])","c452919a":"def medBootstrap(X,numberb):\n    import numpy as np\n    x = [0]*numberb\n    for i in range(numberb):\n        sample = [X[_] for _ in np.random.randint(len(X), size=len(X))]\n        x[i] = np.median(sample)\n    return x\n\nmed = medBootstrap(accidents, 10000)\nprint (\"Median estimate:\", np.mean(med))\nfig, ax = plt.subplots(1, 1, figsize=(12, 3))\nplt.hist(med, bins=5, density=True)\nplt.ylabel('Frequency')\nplt.xlabel('Sample median value')\nax.axvline(x = np.array(med).mean(), \n           ymin = 0, \n           ymax = 1.0, \n           color = [1, 0, 0])","840e4341":"m = accidents.mean()\nse = accidents.std()\/math.sqrt(len(accidents))\nci = [m - se*1.96, m + se*1.96]\nprint (\"Confidence interval:\", ci)","6d048dad":"m = meanBootstrap(accidents, 10000)\nsample_mean = np.mean(m)\nsample_se =  np.std(m)\n\nprint (\"Mean estimate:\", sample_mean)\nprint (\"SE of the estimate:\", sample_se)\n\nci = [np.percentile(m,2.5), np.percentile(m,97.5)]\nprint (\"Confidence interval:\", ci)","6c868c04":"df = accidents   \n\nn = 100                                               # number of observations\nN_test = 100                                          # number of samples with n observations\nmeans = np.array([0.0] * N_test)                      # samples' mean\ns = np.array([0.0] * N_test)                          # samples' std\nci = np.array([[0.0,0.0]] * N_test)\ntm = df.mean()                                        # \"true\" mean\n\nfor i in range(N_test):                               # sample generation and CI computation\n    rows = np.random.choice(df.index.values, n)\n    sampled_df = df.loc[rows]\n    means[i] = sampled_df.mean()\n    s[i] = sampled_df.std()\n    ci[i] = means[i] + np.array([-s[i] *1.96\/np.sqrt(n), s[i]*1.96\/np.sqrt(n)])    \n\nout1 = ci[:,0] > tm                                   # CI that do not contain the \"true\" mean\nout2 = ci[:,1] < tm\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 5))\nind = np.arange(1, N_test+1)\nax.axhline(y = tm, \n           xmin = 0, \n           xmax = N_test+1, \n           color = [0, 0, 0])\nci = np.transpose(ci)\nax.plot([ind,ind], \n        ci, \n        color = '0.75', \n        marker = '_', \n        ms = 0, \n        linewidth = 3)\nax.plot([ind[out1],ind[out1]], \n        ci[:, out1], \n        color = [1, 0, 0, 0.8], \n        marker = '_', \n        ms = 0, \n        linewidth = 3)\nax.plot([ind[out2],ind[out2]], \n        ci[:, out2], \n        color = [1, 0, 0, 0.8], \n        marker = '_',\n        ms = 0, \n        linewidth = 3)\nax.plot(ind, \n        means, \n        color = [0, .8, .2, .8], \n        marker = '.',\n        ms = 10, \n        linestyle = '')\nax.set_ylabel(\"Confidence interval for the samples' mean estimate\",\n              fontsize = 12)\nax.set_xlabel('Samples (with %d observations). '  %n, \n              fontsize = 12)\nplt.savefig(\"confidence.png\",\n            dpi = 300, \n            bbox_inches = 'tight')\nplt.show()","0577acd4":"data = pd.read_csv(\"\/kaggle\/input\/datasetjupyter\/files\/ch04\/ACCIDENTS_GU_BCN_2010.csv\", encoding='latin-1')\n#Create a new column which is the date\ndata['Date'] = data['Dia de mes'].apply(lambda x : str(x)) + '-' +  \\\n               data['Mes de any'].apply(lambda x : str(x))\ndata2 = data['Date']\ncounts2010 =data['Date'].value_counts()\nprint ('2010: Mean', counts2010.mean())\n\ndata = pd.read_csv(\"\/kaggle\/input\/datasetjupyter\/files\/ch04\/ACCIDENTS_GU_BCN_2013.csv\", encoding='latin-1')\n#Create a new column which is the date\ndata['Date'] = data['Dia de mes'].apply(lambda x : str(x)) + '-' +  \\\n               data['Mes de any'].apply(lambda x : str(x))\ndata2 = data['Date']\ncounts2013 = data['Date'].value_counts()\nprint ('2013: Mean', counts2013.mean())","2b6527e6":"n = len(counts2013)\nmean = counts2013.mean()\ns = counts2013.std()\nci = [mean - s*1.96\/np.sqrt(n),  mean + s*1.96\/np.sqrt(n)] \nprint ('2010 accident rate estimate:', counts2010.mean())\nprint ('2013 accident rate estimate:', counts2013.mean())\nprint ('CI for 2013:',ci)","4a21b8ae":"m = len(counts2010)\nn = len(counts2013)\np = (counts2013.mean() - counts2010.mean())\nprint ('m:',m, 'n:', n)\nprint ('mean difference: ', p)","58c85863":"x = counts2010\ny = counts2013\npool = np.concatenate([x,y])\nnp.random.shuffle(pool)\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 3))\nplt.hist(pool, \n         bins = 25, \n         density = True)\nplt.ylabel('Frequency')\nplt.xlabel('Number of accidents')\nplt.title(\"Pooled distribution\")","d5cdeb55":"N = 10000 # number of samples\ndiff = [i for i in range(N)]\nfor i in range(N):\n    p1 = [random.choice(pool) for _ in range(n)]\n    p2 = [random.choice(pool) for _ in range(n)]\n    diff[i] = (np.mean(p1)-np.mean(p2))\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 3))\nplt.hist(diff, \n         bins = 50, \n         density = True)\nplt.ylabel('Frequency')\nplt.xlabel('Difference in the mean')","30faeac0":"# counting how many differences are larger than the observed one\ndiff2 = np.array(diff)\nw1 = np.where(diff2 > p)[0]      \nlen(w1)","8cc88a5c":"print ('p-value (Simulation)=', len(w1)\/float(N), '(', len(w1)\/float(N)*100 ,'%)', 'Difference =', p)\nif len(w1)\/float(N)<0.05:\n    print ('The effect is likely')\nelse:\n    print ('The effect is not likely')","7b6c6363":"- Q2) How can we give a unique value for the estimate?\n\nTake the mean of the different estimates.","651631a6":"- Q1) Can we still give an approximation (an estimate) to this population mean?\n\nYes, making an estimate from a sample of the population is still possible. Just sample the population and take the mean of this sample. The sample should be large enough, so the approximation is still reasonable."}}