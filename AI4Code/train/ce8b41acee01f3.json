{"cell_type":{"30e7d59a":"code","c8c94f57":"code","bf69b0f8":"code","d45b9c27":"code","db42e7fc":"code","8ecd423b":"code","9d9b6d2f":"markdown","9225ef79":"markdown","6aa43f17":"markdown","a3b0c13e":"markdown","3b4a7604":"markdown","79ff135a":"markdown","53e5df18":"markdown","b21bc92b":"markdown"},"source":{"30e7d59a":"##### PACKAGES\nimport os\nfrom pathlib import Path\nimport pydicom as dcm  # great library for working with dicom\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt","c8c94f57":"data_path = Path('..\/input\/rsna-str-pulmonary-embolism-detection\/train\/759a5963508b')\ndcm_paths = list(data_path.glob('**\/*.dcm'))\n\nprint(f\"First 10 dicom paths: \\n\\n{dcm_paths[:10]}\\n\\n... out of {len(dcm_paths)} total dcms\")","bf69b0f8":"\"\"\"Utiliy functions for displaying dcms clearly\"\"\"\n\n\ndef get_first_of_dicom_field_as_int(x):\n    #get x[0] as in int is x is a 'pydicom.multival.MultiValue', otherwise get int(x)\n    if type(x) == dcm.multival.MultiValue: return int(x[0])\n    else: return int(x)\n    \ndef get_windowing(data):\n    dicom_fields = [data[('0028','1050')].value, #window center\n                    data[('0028','1051')].value, #window width\n                    data[('0028','1052')].value, #intercept\n                    data[('0028','1053')].value] #slope\n    return [get_first_of_dicom_field_as_int(x) for x in dicom_fields]\n\ndef metadata_window(img, print_ranges=False):\n    # Get data from dcm\n    window_center, window_width, intercept, slope = get_windowing(img)\n    img = img.pixel_array\n    \n    # Window based on dcm metadata\n    img = img * slope + intercept\n    img_min = window_center - window_width \/\/ 2\n    img_max = window_center + window_width \/\/ 2\n    if print_ranges:\n        print(f'Window Level: {window_center}, Window Width:{window_width}, Range:[{img_min} {img_max}]')\n    img[img < img_min] = img_min\n    img[img > img_max] = img_max\n    \n    # Normalize\n    img = (img - img_min) \/ (img_max - img_min)\n    return img\n\ndef show_image_slices(dcms, title=\"dcms\"):\n    fig, axes = plt.subplots(1, len(dcms), figsize=(25,5))\n    fig.suptitle(title, fontsize=16)\n    for i, dcm in enumerate(dcms):\n        axes[i].imshow(metadata_window(dcm), cmap=\"gray\")\n        ","d45b9c27":"\"\"\" \nNote: slices are most reliably sorted by patient position. For axial slices this will be z index\nas there is no gaurantee that the sequence numbers are different in a study so we can generate \na unique key for each sequence (series number + position-axis[0] + position-axis[1]).\nThe first two positions (x, y) in ImagePositionPatient usually vary between Axial sequences \n\"\"\"\n\n# dictionary of keys to series\ndcm_series = defaultdict(list)\nfor dcm_path in dcm_paths:\n    d = dcm.read_file(dcm_path) \n    # key = series number + first axis, most likely unique across axial series.\n    dcm_series[f\"Series #:{d.SeriesNumber}, x:{d.ImagePositionPatient[0]}, y:{d.ImagePositionPatient[1]}\"].append(d)\n    \n    \nprint(\"printing series by series-keys with lengths...\")\nfor key, series in dcm_series.items():\n    print(f\"series key [{key}] has:  {len(series)} dcms\")\n","db42e7fc":"for key, series in dcm_series.items():\n    \n    show_image_slices(series[:30:5], title=key+\" UNSORTED\")\n    ","8ecd423b":"for key, series in dcm_series.items():\n    \n    show_image_slices(sorted(series[:30:5], key=lambda dcm:dcm.ImagePositionPatient[2]), title=key+\" SORTED\")   # ImagePositionPatient[2] is the Z axis\n    ","9d9b6d2f":"# Table of Contents\n\n### 1. [Load a study](#load)\n### 2. [Utility functions for dicom display](#utility)\n### 3. [Isolate dicom series](#series)\n### 4. [Display all series unsorted](#unsorted)\n### 5. [Display all series sorted](#sorted)","9225ef79":"## Thanks for checking out this notebook. I hope some of you find it helpful.\n\n## Have fun working with dicoms and medical imaging!\n","6aa43f17":"# Let's See How to Select Sequences and Sort DICOM data \n\n\n### After inspecting the data in the RSNA STR Pulmonary Embolism Detection challenge I occasionally found studies with two sequences with the same series number. This simple notebook shows an example of how to handle this edge case and uses StudyInstanceUID 759a5963508b as an example input.\n\n### For 3D approachs to CTA pulmonary embolus prediction an accurate and consistent sorting mechanism and proper sequence selection is essential.","a3b0c13e":"# Isolate a dicom series <a class=\"anchor\" id=\"series\"><\/a>","3b4a7604":"# Display series data unsorted <a class=\"anchor\" id=\"unsorted\"><\/a>","79ff135a":"# Display series data sorted <a class=\"anchor\" id=\"sorted\"><\/a>","53e5df18":"# Load a dicom study <a class=\"anchor\" id=\"load\"><\/a>","b21bc92b":"# Utility functions for display <a class=\"anchor\" id=\"utility\"><\/a>"}}