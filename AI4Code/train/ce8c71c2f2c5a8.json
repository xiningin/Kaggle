{"cell_type":{"b2d8ea47":"code","248039d9":"code","17e9868f":"code","8d81a1ea":"code","f5e065c5":"code","edcb40ba":"code","cf881d60":"code","86189771":"code","8ce4bbb2":"code","efa66cd2":"code","224800d6":"code","8182af4a":"code","baefa37d":"code","ef2ce001":"code","21eb3593":"code","3fd647aa":"code","9eb60f91":"code","878a29c3":"code","4961557d":"code","e8a12a0f":"code","af59f8e0":"code","e1267721":"code","867f88ac":"code","5f44ff60":"code","9f2364f2":"code","cd517018":"code","06212cde":"code","fcfff6e7":"code","7347daf0":"code","78bf2bc1":"code","4f7fca31":"code","c6a33f70":"code","aca55af8":"code","7923a837":"code","de877a94":"code","49c45323":"code","a7aaeed5":"code","bd09da3a":"code","eb2d46bc":"code","8dc6d2dd":"code","ee9b31c1":"code","73c61454":"code","4e8e44f2":"code","dadb0570":"code","fc1f6226":"code","c055a0ca":"code","74f5705f":"code","77c55833":"code","39bc7402":"code","8c4110ac":"code","f2a5e58b":"code","bd9818fe":"code","4121a01e":"code","c349ec9c":"code","eafa75ec":"code","72c6056b":"code","2888840f":"code","6cd24873":"code","c0d89734":"code","ac9144c8":"code","6d3e5949":"code","c243c273":"code","61cd4401":"code","f0a223fa":"code","d5f23f30":"code","c1ae11b7":"code","3769cd6a":"code","8c97a184":"markdown","b08334cd":"markdown","791bff2e":"markdown","b9860236":"markdown","5fb6ab66":"markdown","2e4ce96f":"markdown","58e1b059":"markdown","930dc73c":"markdown","4b44a947":"markdown","9c9a86ef":"markdown","01dc506a":"markdown","889a2632":"markdown","f5a5990f":"markdown","6c1b72cd":"markdown","2f0fda1d":"markdown","c7499114":"markdown","7cd2b5e5":"markdown","9a43fe5c":"markdown","af4d3c5d":"markdown","3bd87e6e":"markdown","66a79ad9":"markdown","a9ada5e5":"markdown","e2523a2f":"markdown","45e57cfe":"markdown"},"source":{"b2d8ea47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","248039d9":"import numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nsns.set()","17e9868f":"df_train = pd.read_csv(\"\/kaggle\/input\/ods-mlclass-dubai-2019-03-lecture3-hw\/train.csv\", index_col = \"uid\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/ods-mlclass-dubai-2019-03-lecture3-hw\/test.csv\", index_col = \"uid\")\n\nprint(\"train: \", df_train.shape)\nprint(\"test: \", df_test.shape)","8d81a1ea":"df_train.drop_duplicates(keep=\"first\", inplace = True)\n\n\nprint(\"Shape after removing duplicate values\")\nprint(\"train: \", df_train.shape)\nprint(\"test: \", df_test.shape)","f5e065c5":"df_train.head()","edcb40ba":"df_train.info()","cf881d60":"df_train.nunique()","86189771":"sns.distplot(df_train['age'])","8ce4bbb2":"bins= [0,25,45,65,100]\nlabels = [\"Young\", \"Middle\", \"Senior\", \"Old\"]\ndf_train['age'] = pd.cut(df_train['age'], bins=bins, labels=labels, right=False)\ndf_test['age'] = pd.cut(df_test['age'], bins=bins, labels=labels, right=False)","efa66cd2":"sns.countplot(df_train['age'])","224800d6":"sns.countplot(y = df_train['workclass'], hue=df_train['target'])","8182af4a":"df_train['workclass'].replace({\" Without-pay\":\"Not-working\", \n                               \" Never-worked\":\"Not-working\", \n                               \" ?\": \"UNKNOWN\", \n                               \" State-gov\": \"Gov\", \n                               \" Local-gov\": \"Gov\", \n                               \" Federal-gov\": \"Gov\", \n                               \" Self-emp-not-inc\": \"Self-emp\", \n                               \" Self-emp-inc\": \"Self-emp\", \n                               \" Private\": \"Private\"}, inplace=True)\ndf_test['workclass'].replace({\" Without-pay\":\"Not-working\", \n                              \" Never-worked\": \"Not-working\", \n                              \" ?\":\"UNKNOWN\", \n                               \" State-gov\": \"Gov\", \n                               \" Local-gov\": \"Gov\", \n                               \" Federal-gov\": \"Gov\", \n                               \" Self-emp-not-inc\": \"Self-emp\", \n                               \" Self-emp-inc\": \"Self-emp\", \n                               \" Private\": \"Private\"}, inplace=True)","baefa37d":"sns.countplot(y = df_train['workclass'], hue=df_train['target'])","ef2ce001":"df_train[['education-num', 'education']].drop_duplicates()","21eb3593":"df_train.drop('education', axis=1, inplace=True)\ndf_test.drop('education', axis=1, inplace=True)","3fd647aa":"df_train['education-num'].replace(to_replace = [1,2,3,4,5,6,7,8], \n                                  value = 0,\n                                  inplace=True)\ndf_train['education-num'].replace(to_replace = [9,10], \n                                  value = 1,\n                                  inplace=True)\ndf_train['education-num'].replace(to_replace = [11,12], \n                                  value = 2,\n                                  inplace=True)\ndf_train['education-num'].replace({13: 3, 14: 4, 15: 5, 16:6},\n                                  inplace=True)\n\n\ndf_test['education-num'].replace(to_replace = [1,2,3,4,5,6,7,8], \n                                  value = 0,\n                                  inplace=True)\ndf_test['education-num'].replace(to_replace = [9,10], \n                                  value = 1,\n                                  inplace=True)\ndf_test['education-num'].replace(to_replace = [11,12], \n                                  value = 2,\n                                  inplace=True)\ndf_test['education-num'].replace({13: 3, 14: 4, 15: 5, 16:6},\n                                  inplace=True)","9eb60f91":"sns.countplot(df_train['education-num'], hue=df_train['target'])","878a29c3":"df_train['marital-status']=df_train['marital-status'].str.strip()\ndf_train['marital-status'].unique()","4961557d":"df_train['marital-status'].replace(to_replace = [\"Never-married\",\"Divorced\",\"Separated\", \"Widowed\"], \n                              value = \"Not-married\",\n                              inplace=True)\ndf_train['marital-status'].replace(to_replace = [\"Married-civ-spouse\",\"Married-spouse-absent\",\"Married-AF-spouse\"], \n                              value = \"Married\",\n                              inplace=True)\ndf_test['marital-status'].replace(to_replace = [\"Never-married\",\"Divorced\",\"Separated\", \"Widowed\"], \n                              value = \"Not-married\",\n                              inplace=True)\ndf_test['marital-status'].replace(to_replace = [\"Married-civ-spouse\",\"Married-spouse-absent\",\"Married-AF-spouse\"], \n                              value = \"Married\",\n                              inplace=True)","e8a12a0f":"df_train['marital-status'] = (df_train['marital-status']=='Married')\ndf_train['marital-status']*=1\ndf_train.rename(columns={\"marital-status\": \"is-married\"}, inplace=True)\n\ndf_test['marital-status'] = (df_test['marital-status']=='Married')\ndf_test['marital-status']*=1\ndf_test.rename(columns={\"marital-status\": \"is-married\"}, inplace=True)","af59f8e0":"sns.countplot(df_train['is-married'], hue=df_train['target'])","e1267721":"df_train['sex'] = df_train['sex'].str.strip()\ndf_test['sex'] = df_test['sex'].str.strip()","867f88ac":"df_train['sex'] = (df_train['sex']=='Male')\ndf_train['sex']*=1\ndf_train.rename(columns={\"sex\": \"is-male\"}, inplace=True)\n\ndf_test['sex'] = (df_test['sex']=='Male')\ndf_test['sex']*=1\ndf_test.rename(columns={\"sex\": \"is-male\"}, inplace=True)","5f44ff60":"df_train['occupation'] = df_train['occupation'].str.strip()\ndf_test['occupation'] = df_test['occupation'].str.strip()","9f2364f2":"sns.catplot('target', col = 'occupation', data = df_train, kind=\"count\", col_wrap=5)","cd517018":"df_train['occupation'].replace({\"Adm-clerical\": \"Admin\", \n                                \"Armed-Forces\": \"Military\", \n                                \"Prof-specialty\": \"Professional\", \n                                \"Exec-managerial\": \"White-collar\", \n                                \"?\":\"UNKNOWN\"}, inplace = True)                        \ndf_train['occupation'].replace(to_replace = [\"Craft-repair\", \"Farming-fishing\", \n                                             \"Handlers-cleaners\", \"Machine-op-inspct\", \"Transport-moving\"], \n                               value = \"Blue-collar\", inplace = True) \ndf_train['occupation'].replace(to_replace = [\"Other-service\", \"Priv-house-serv\"], \n                               value = \"Service\", inplace = True)\ndf_train['occupation'].replace(to_replace = [\"Protective-serv\", \"Tech-support\", \"Other-Occupations\"], \n                               value = \"Other-Occupations\", inplace = True)\n\n\ndf_test['occupation'].replace({\"Adm-clerical\": \"Admin\", \n                                \"Armed-Forces\": \"Military\", \n                                \"Prof-specialty\": \"Professional\", \n                                \"Exec-managerial\": \"White-collar\", \n                                \"?\":\"UNKNOWN\"}, inplace = True)                        \ndf_test['occupation'].replace(to_replace = [\"Craft-repair\", \"Farming-fishing\", \n                                             \"Handlers-cleaners\", \"Machine-op-inspct\", \"Transport-moving\"], \n                               value = \"Blue-collar\", inplace = True) \ndf_test['occupation'].replace(to_replace = [\"Other-service\", \"Priv-house-serv\"], \n                               value = \"Service\", inplace = True)\ndf_test['occupation'].replace(to_replace = [\"Protective-serv\", \"Tech-support\", \"Other-Occupations\"], \n                               value = \"Other-Occupations\", inplace = True)","06212cde":"sns.catplot(\"target\", col=\"occupation\", data = df_train, kind = \"count\", col_wrap=4)","fcfff6e7":"sns.distplot(df_train['hours-per-week'])","7347daf0":"bins= [0,20,40,60,100]\nlabels = [\"Part-time\", \"Full-time\", \"Overtime\", \"Too-much\"]\ndf_train['hours-per-week'] = pd.cut(df_train['hours-per-week'], bins=bins, labels=labels, right=False)\ndf_test['hours-per-week'] = pd.cut(df_test['hours-per-week'], bins=bins, labels=labels, right=False)","78bf2bc1":"sns.countplot(df_train['hours-per-week'], hue = df_train['target'])","4f7fca31":"df_train['native-country'] = df_train['native-country'].str.strip()\ndf_test['native-country'] = df_test['native-country'].str.strip()","c6a33f70":"df_train['native-country'].unique()","aca55af8":"df_train['native-country'].value_counts()","7923a837":"df_train['native-country'].replace(to_replace = [\"Cambodia\",\"Laos\",\"Philippines\",\"Thailand\",\"Vietnam\"], \n                                   value = \"SE-Asia\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"Canada\",\"India\",\"England\",\"Ireland\",\"Scotland\"], \n                                   value = \"British-Commonwealth\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"Hong\",\"Taiwan\"], \n                                   value = \"China\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"Columbia\",\"Ecuador\",\"El-Salvador\",\"Peru\"], \n                                   value = \"South-America\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"Dominican-Republic\",\"Guatemala\",\"Haiti\",\"Honduras\",\n                                                 \"Jamaica\",\"Mexico\",\"Trinadad&Tobago\",\"Nicaragua\",\n                                                 \"Outlying-US(Guam-USVI-etc)\",\"Puerto-Rico\"], \n                                   value = \"Latin-America\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"France\",\"Italy\",\"Holand-Netherlands\",\"Germany\"], \n                                   value = \"Euro1\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"Greece\",\"Hungary\",\"Poland\",\"Portugal\",\"Yugoslavia\",\"South\"], \n                                   value = \"Euro2\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"Iran\",\"Cuba\",\"Japan\"], \n                                   value = \"Other\", inplace = True)\ndf_train['native-country'].replace(to_replace = [\"?\"], \n                                   value = \"UNKNOWN\", inplace = True)\n\n\ndf_test['native-country'].replace(to_replace = [\"Cambodia\",\"Laos\",\"Philippines\",\"Thailand\",\"Vietnam\"], \n                                   value = \"SE-Asia\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"Canada\",\"India\",\"England\",\"Ireland\",\"Scotland\"], \n                                   value = \"British-Commonwealth\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"Hong\",\"Taiwan\"], \n                                   value = \"China\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"Columbia\",\"Ecuador\",\"El-Salvador\",\"Peru\"], \n                                   value = \"South-America\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"Dominican-Republic\",\"Guatemala\",\"Haiti\",\"Honduras\",\n                                                 \"Jamaica\",\"Mexico\",\"Trinadad&Tobago\",\"Nicaragua\",\n                                                 \"Outlying-US(Guam-USVI-etc)\",\"Puerto-Rico\"], \n                                   value = \"Latin-America\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"France\",\"Italy\",\"Holand-Netherlands\",\"Germany\"], \n                                   value = \"Euro1\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"Greece\",\"Hungary\",\"Poland\",\"Portugal\",\"Yugoslavia\",\"South\"], \n                                   value = \"Euro2\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"Iran\",\"Cuba\",\"Japan\"], \n                                   value = \"Other\", inplace = True)\ndf_test['native-country'].replace(to_replace = [\"?\"], \n                                   value = \"UNKNOWN\", inplace = True)","de877a94":"df_test['native-country'].value_counts()","49c45323":"sns.distplot(df_train[df_train['capital-loss']!=0]['capital-loss'])","a7aaeed5":"med = df_train[df_train['capital-loss']!=0]['capital-loss'].median()\nmaxx = df_train[df_train['capital-loss']!=0]['capital-loss'].max()\nbins = [-1, 0,med,maxx]\nlabels = ['None', 'Low', 'High']\ndf_train['capital-loss'] = pd.cut(df_train['capital-loss'], bins=bins, labels=labels, right=True)\ndf_test['capital-loss'] = pd.cut(df_test['capital-loss'], bins=bins, labels=labels, right=True)","bd09da3a":"sns.countplot(df_train['capital-loss'])","eb2d46bc":"sns.distplot(df_train[df_train['capital-gain']!=0]['capital-gain'])","8dc6d2dd":"med = df_train[df_train['capital-gain']!=0]['capital-gain'].median()\nmaxx = df_train[df_train['capital-gain']!=0]['capital-gain'].max()\nbins = [-1, 0,med,maxx]\nlabels = ['None', 'Low', 'High']\ndf_train['capital-gain'] = pd.cut(df_train['capital-gain'], bins=bins, labels=labels, right=True)\ndf_test['capital-gain'] = pd.cut(df_test['capital-gain'], bins=bins, labels=labels, right=True)","ee9b31c1":"sns.countplot(df_train['capital-loss'])","73c61454":"df_train.head()","4e8e44f2":"sns.countplot(df_train['target'])\nprint(df_train['target'].value_counts(normalize=True))","dadb0570":"sns.countplot(y=\"age\", hue='target', data=df_train)","fc1f6226":"df_train.columns","c055a0ca":"def facetgrid_countplot(x, y, **kwargs):\n    sns.countplot(y=x, hue=y)\n    #x = plt.xticks(rotation=90)\n\n\nf = pd.melt(df_train[['target', 'age', 'education-num', 'workclass', 'is-married', 'occupation', 'is-male', \n                      'relationship', 'native-country', 'race', 'hours-per-week', 'capital-gain', 'capital-loss']], \n            id_vars=['target'])\n\ng = sns.FacetGrid(f, col='variable', col_wrap=2,\n                  sharex=False, sharey=False, aspect=2)\ng = g.map(facetgrid_countplot, 'value', 'target')","74f5705f":"df_train.info()","77c55833":"df_train['age'].unique()\nto_change = {\"Young\": 1, \"Middle\": 2, \"Senior\": 3, \"Old\": 4}\ndf_train['age'] = df_train['age'].map(to_change)\ndf_train['age'].unique()\n\ndf_test['age'] = df_test['age'].map(to_change) ","39bc7402":"df_temp = pd.DataFrame()\ndf_temp['count'] = df_train.groupby(['workclass']).count()['target']\ndf_temp['sum'] = df_train.groupby(['workclass']).sum()['target']\ndf_temp['mean'] = df_train.groupby(['workclass']).mean()['target']\n\ndf_temp.drop(columns=['sum', 'count'], inplace=True)\n\ndf_train['workclass'] = df_train['workclass'].map(df_temp.T.to_dict('list'))\ndf_train['workclass'] = df_train['workclass'].str[0]\n\ndf_test['workclass'] = df_test['workclass'].map(df_temp.T.to_dict('list'))\ndf_test['workclass'] = df_test['workclass'].str[0]","8c4110ac":"df_temp = pd.DataFrame()\ndf_temp['count'] = df_train.groupby(['occupation']).count()['target']\ndf_temp['sum'] = df_train.groupby(['occupation']).sum()['target']\ndf_temp['mean'] = df_train.groupby(['occupation']).mean()['target']\n\ndf_temp.drop(columns=['sum', 'count'], inplace=True)","f2a5e58b":"df_train['occupation'] = df_train['occupation'].map(df_temp.T.to_dict('list'))\ndf_train['occupation'] = df_train['occupation'].str[0]\n\ndf_test['occupation'] = df_test['occupation'].map(df_temp.T.to_dict('list'))\ndf_test['occupation'] = df_test['occupation'].str[0]","bd9818fe":"df_temp = pd.DataFrame()\ndf_temp['count'] = df_train.groupby(['relationship']).count()['target']\ndf_temp['sum'] = df_train.groupby(['relationship']).sum()['target']\ndf_temp['mean'] = df_train.groupby(['relationship']).mean()['target']\n\ndf_temp.drop(columns=['sum', 'count'], inplace=True)","4121a01e":"df_train['relationship'] = df_train['relationship'].map(df_temp.T.to_dict('list'))\ndf_train['relationship'] = df_train['relationship'].str[0]\n\ndf_test['relationship'] = df_test['relationship'].map(df_temp.T.to_dict('list'))\ndf_test['relationship'] = df_test['relationship'].str[0]","c349ec9c":"df_temp = pd.DataFrame()\ndf_temp['count'] = df_train.groupby(['race']).count()['target']\ndf_temp['sum'] = df_train.groupby(['race']).sum()['target']\ndf_temp['mean'] = df_train.groupby(['race']).mean()['target']\n\ndf_temp.drop(columns=['sum', 'count'], inplace=True)","eafa75ec":"df_train['race'] = df_train['race'].map(df_temp.T.to_dict('list'))\ndf_train['race'] = df_train['race'].str[0]\n\ndf_test['race'] = df_test['race'].map(df_temp.T.to_dict('list'))\ndf_test['race'] = df_test['race'].str[0]","72c6056b":"df_temp = pd.DataFrame()\ndf_temp['count'] = df_train.groupby(['native-country']).count()['target']\ndf_temp['sum'] = df_train.groupby(['native-country']).sum()['target']\ndf_temp['mean'] = df_train.groupby(['native-country']).mean()['target']\n\ndf_temp.drop(columns=['sum', 'count'], inplace=True)","2888840f":"df_train['native-country'] = df_train['native-country'].map(df_temp.T.to_dict('list'))\ndf_train['native-country'] = df_train['native-country'].str[0]\n\ndf_test['native-country'] = df_test['native-country'].map(df_temp.T.to_dict('list'))\ndf_test['native-country'] = df_test['native-country'].str[0]","6cd24873":"df_train['capital-loss'].unique()\nto_change = {\"None\": 0, \"Low\": 1, \"High\": 2}\ndf_train['capital-loss'] = df_train['capital-loss'].map(to_change)\ndf_train['capital-gain'] = df_train['capital-gain'].map(to_change)\n\ndf_test['capital-loss'] = df_test['capital-loss'].map(to_change)\ndf_test['capital-gain'] = df_test['capital-gain'].map(to_change)","c0d89734":"df_train['hours-per-week'].unique()\nto_change = {\"Part-time\": 1, \"Full-time\": 2, \"Overtime\": 3, \"Too-much\": 4}\n\ndf_train['hours-per-week'] = df_train['hours-per-week'].map(to_change)\ndf_test['hours-per-week'] = df_test['hours-per-week'].map(to_change)","ac9144c8":"plt.figure(figsize=(25, 10))\n\nsns.set(font_scale=1.2)\n\nsns.heatmap(df_train.corr(), \n            cmap='YlGnBu',\n            cbar=True, annot=True,\n            square=True, fmt='.2f',\n            annot_kws={'size': 10})","6d3e5949":"df_train.drop(columns='relationship', inplace=True)\ndf_test.drop(columns='relationship', inplace=True)","c243c273":"features = list(df_train.columns[:-1])\nfeatures","61cd4401":"X_train, y_train = df_train[features], df_train['target']\nX_test = df_test[features]","f0a223fa":"from sklearn.tree import DecisionTreeClassifier\nclf_tree = DecisionTreeClassifier(criterion='entropy', max_depth=9, \n                                  random_state=17)\n\n# training the tree\nclf_tree.fit(X_train, y_train)\n\n# some code to depict separating surface\npredicted = clf_tree.predict(X_test)","d5f23f30":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\n\n# function for fitting trees of various depths on the training data using cross-validation\ndef run_cross_validation_on_trees(X, y, tree_depths, cv=5, scoring='f1'):\n    cv_scores_list = []\n    cv_scores_std = []\n    cv_scores_mean = []\n    accuracy_scores = []\n    for depth in tree_depths:\n        tree_model = DecisionTreeClassifier(max_depth=depth)\n        cv_scores = cross_val_score(tree_model, X, y, cv=cv, scoring=scoring)\n        cv_scores_list.append(cv_scores)\n        cv_scores_mean.append(cv_scores.mean())\n        cv_scores_std.append(cv_scores.std())\n        accuracy_scores.append(tree_model.fit(X, y).score(X, y))\n    cv_scores_mean = np.array(cv_scores_mean)\n    cv_scores_std = np.array(cv_scores_std)\n    accuracy_scores = np.array(accuracy_scores)\n    return cv_scores_mean, cv_scores_std, accuracy_scores\n  \n# function for plotting cross-validation results\ndef plot_cross_validation_on_trees(depths, cv_scores_mean, cv_scores_std, accuracy_scores, title):\n    fig, ax = plt.subplots(1,1, figsize=(15,5))\n    ax.plot(depths, cv_scores_mean, '-o', label='mean cross-validation accuracy', alpha=0.9)\n    ax.fill_between(depths, cv_scores_mean-2*cv_scores_std, cv_scores_mean+2*cv_scores_std, alpha=0.2)\n    ylim = plt.ylim()\n    ax.plot(depths, accuracy_scores, '-*', label='train accuracy', alpha=0.9)\n    ax.set_title(title, fontsize=16)\n    ax.set_xlabel('Tree depth', fontsize=14)\n    ax.set_ylabel('F1 score', fontsize=14)\n    ax.set_ylim(ylim)\n    ax.set_xticks(depths)\n    ax.legend()\n\n# fitting trees of depth 1 to 24\nsm_tree_depths = range(1,25)\nsm_cv_scores_mean, sm_cv_scores_std, sm_accuracy_scores = run_cross_validation_on_trees(X_train, y_train, sm_tree_depths)\n\n# plotting accuracy\nplot_cross_validation_on_trees(sm_tree_depths, sm_cv_scores_mean, sm_cv_scores_std, sm_accuracy_scores, \n                               'F1 score per decision tree depth on training data')","c1ae11b7":"idx_max = sm_cv_scores_mean.argmax()\nsm_best_tree_depth = sm_tree_depths[idx_max]\nsm_best_tree_cv_score = sm_cv_scores_mean[idx_max]\nsm_best_tree_cv_score_std = sm_cv_scores_std[idx_max]\nprint('The depth-{} tree achieves the best mean cross-validation f1 {} +\/- {}% on training dataset'.format(\n      sm_best_tree_depth, round(sm_best_tree_cv_score*100,5), round(sm_best_tree_cv_score_std*100, 5)))","3769cd6a":"modified = df_test.reset_index()\nmodified['target'] = predicted\ndf_submit = modified[['uid','target']]\ndf_submit.to_csv('\/kaggle\/working\/submit.csv', index=False)","8c97a184":"### native-country","b08334cd":"## Categorical to numeric","791bff2e":"### relationship","b9860236":"### Marital-status","5fb6ab66":"### age","2e4ce96f":"### Occupation","58e1b059":"## Feature slection","930dc73c":"## kNN","4b44a947":"## Data analysis","9c9a86ef":"### Hours-per-week","01dc506a":"# Building model","889a2632":"### Workclass","f5a5990f":"### Age","6c1b72cd":"### sex","2f0fda1d":"# Handling data","c7499114":"### occupation","7cd2b5e5":"## Decision Tree","9a43fe5c":"### Education and Education-num","af4d3c5d":"## Data Preparation","3bd87e6e":"### workclass","66a79ad9":"### native-country","a9ada5e5":"### race","e2523a2f":"### capital-loss and capital-gain","45e57cfe":"### capital-loss, capital-gain, hours-per-week"}}