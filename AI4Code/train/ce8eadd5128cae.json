{"cell_type":{"215ec216":"code","e36b3816":"code","f63d3e52":"code","0591fc2c":"code","04d963de":"code","c073bf11":"code","1d869c8f":"code","a45c9d12":"code","2dac3d12":"code","1355e3f6":"code","68afa3cb":"code","c80492cd":"code","e4cb78d8":"code","29f43dfd":"code","54094a1e":"code","82375db2":"code","0ac1e111":"code","a8e3d5aa":"code","6e225573":"code","3b110ad3":"code","2216d37e":"code","f5f35b9f":"code","ed502aa6":"code","529066dd":"code","e0c4d178":"code","f462e5d2":"code","a6a3a352":"code","594706d2":"code","55bcc8a6":"code","e657fee7":"markdown","e9e95fbf":"markdown","e7608025":"markdown","4ca25f64":"markdown","c4188e71":"markdown","b09e820b":"markdown","0e4e7690":"markdown","3bb9fe8c":"markdown","0cb031ba":"markdown","11921714":"markdown","8366b43b":"markdown"},"source":{"215ec216":"import os \nimport regex as re\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly\nimport cufflinks as cf\nfrom cufflinks.offline import go_offline\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.offline import iplot, init_notebook_mode\nimport matplotlib.ticker as tick\nimport warnings\nimport folium\nfrom folium.plugins import HeatMap\nbasemap=folium.Map()\nwarnings.filterwarnings('ignore')\ninit_notebook_mode()\ngo_offline()","e36b3816":"os.listdir(r'..\/input\/uber-pickups-in-new-york-city')","f63d3e52":"files = ['uber-raw-data-apr14.csv',\n         'uber-raw-data-aug14.csv',\n         'uber-raw-data-jul14.csv',\n         'uber-raw-data-jun14.csv',\n         'uber-raw-data-may14.csv',\n         'uber-raw-data-sep14.csv']\nfiles","0591fc2c":"df_names = [re.findall('\\w+\\d',f)[0][:-2].upper() for f in files]\ndf_names","04d963de":"#Concate all data in one dataframe\n\npath=r'..\/input\/uber-pickups-in-new-york-city'\n\napr14=pd.read_csv(path+\"\/\"+files[0],encoding='utf-8')\naug14=pd.read_csv(path+\"\/\"+files[1],encoding='utf-8')\njul14=pd.read_csv(path+\"\/\"+files[2],encoding='utf-8')\njun14=pd.read_csv(path+\"\/\"+files[3],encoding='utf-8')\nmay14=pd.read_csv(path+\"\/\"+files[4],encoding='utf-8')\nsep14=pd.read_csv(path+\"\/\"+files[5],encoding='utf-8')\n\n#blank dataframe\nuber_2014=pd.DataFrame()\ndfs = [apr14,aug14,jul14,jun14,may14,sep14]\n\nfor df in dfs:\n    uber_2014=pd.concat([df,uber_2014])\n\ndfs.append(uber_2014)\n\nuber_2014.head()","c073bf11":"#Preparing the columns in each Dataframe\n\nfor df in dfs:\n    \n#Converting columns alphabets to lowercase\n    df.columns = [i.lower() for i in df.columns]\n    \n#Converting Date\/Time column to a datastamp\n    df['date\/time'] = pd.to_datetime(df['date\/time'], format=\"%m\/%d\/%Y %H:%M:%S\")\n\n#Create a new column for day name\n    df['day_name'] = df['date\/time'].dt.day_name()\n\n#Create a new column for day\n    df['day'] = df['date\/time'].dt.day\n\n#Create a new column for month\n    df['month'] = df['date\/time'].dt.month\n\n#Create a new column for hour\n    df['hour'] = df['date\/time'].dt.hour\n\n#Create a new column for minute\n    df['minute'] = df['date\/time'].dt.minute\n\nuber_2014.head()","1d869c8f":"#Lets make a copy of our original final data\ndf = uber_2014.copy()","a45c9d12":"df.info()","2dac3d12":"#Base Column\ndf['base'].unique()","1355e3f6":"#Day name Column\ndf['day_name'].unique()","68afa3cb":"#Day Column\ndf['day'].unique()","c80492cd":"temp = df['day_name'].value_counts().reset_index().rename(columns={'index':'day','day_name':'count'})\ntemp.iplot(kind='bar',x='day',y='count',\n           title='Bar Plot for Weekdays trips',\n          xTitle='Weekdays',yTitle='Trips Count')","e4cb78d8":"index = df['day_name'].value_counts().index\ntemp = pd.DataFrame(index=index)\n\nfor i in range(len(dfs[:-1])):\n    temp[df_names[i]] = dfs[i]['day_name'].value_counts()\n    \ntemp = temp.T \n\ncolors = px.colors.qualitative.T10\n\nfig = px.bar(temp,barmode='group',\n             x = temp.index,\n             y = [c for c in temp.columns],\n             template = 'plotly_white',\n             color_discrete_sequence = colors,\n             title='Grouped Bar Plot for for total trips by months and day names')\n\nfig['layout'].update()\nfig.show()","29f43dfd":"temp = df['day_name'].value_counts().reset_index().rename(columns={'index':'day','day_name':'count'})\n\ntemp.iplot(kind='pie',labels='day',values='count',\n           title='Pie Plot for Weekdays trips',\n           pull=0.03,sort=True,linecolor='red',\n           textinfo='label+percent')","54094a1e":"temp = df['day'].value_counts().reset_index().rename(columns={'index':'day','day':'count'})\ntemp.iplot(kind='bar',x='day',y='count',\n           title='Bar Plot for Weekdays trips',\n          xTitle='Weekdays',yTitle='Trips Count')","82375db2":"index = df['day'].value_counts().index\ntemp = pd.DataFrame(index=index)\n\nfor i in range(len(dfs[:-1])):\n    temp[df_names[i]] = dfs[i]['day'].value_counts()\n    \n# temp = temp.T \n\ncolors = px.colors.qualitative.T10\n\nfig = px.bar(temp,barmode='stack',\n             x = temp.index,\n             y = [c for c in temp.columns],\n             template = 'plotly_white',\n             color_discrete_sequence = colors,\n             title='Stacked Bar Plot for for total trips by days and months')\nfig.show()","0ac1e111":"# temp = df.groupby(['day_name', 'day'])['date\/time'].count().reset_index().rename(columns = {'date\/time':'Counts'})\n\nindex = df['day'].value_counts().index\ntemp = pd.DataFrame(index=index)\n\nfor i in range(len(dfs[:-1])):\n    temp[df_names[i]] = dfs[i]['day'].value_counts()\n    \ntemp = temp.sort_index()\ntemp.iplot(kind='line')\n","a8e3d5aa":"temp = df['hour'].value_counts().reset_index().rename(columns={'index':'hour','hour':'count'})\ntemp.iplot(kind='bar',x='hour',y='count',\n           title='Bar Plot for Day Hours trips',\n          xTitle='Weekdays',yTitle='Total Trips')","6e225573":"index = df['hour'].value_counts().index\ntemp = pd.DataFrame(index=index)\n\nfor i in range(len(dfs[:-1])):\n    temp[df_names[i]] = dfs[i]['hour'].value_counts()\n    \ncolors = px.colors.qualitative.T10\n\nfig = px.bar(temp,barmode='stack',\n             x = temp.index,\n             y = [c for c in temp.columns],\n             template = 'plotly_white',\n             color_discrete_sequence = colors,\n             title='Stacked Bar Plot for for total trips by hours and months')\n\nfig.show()","3b110ad3":"temp_2 = pd.DataFrame(index=df['hour'].unique())\n\nfor day in df['day_name'].unique():\n    data = df[df['day_name']==day]['hour'].value_counts()\n    temp_2[day] = data\n    \ntemp_2.iplot(kind='line',title='Line P')","2216d37e":"temp = pd.DataFrame([len(df) for df in dfs[:-1]],index=df_names,columns=['Total'])\ntemp.sort_values('Total').iplot(kind='bar',title='Bar Plot for for total trips by months')","f5f35b9f":"temp = pd.DataFrame([len(df) for df in dfs[:-1]],index=df_names,columns=['Total']).reset_index()\n\ntemp.iplot(kind='pie',labels='index',values='Total',\n           title='Pie Plot for for total trips by months',\n           pull=0.03,sort=True,linecolor='red',\n           textinfo='label+percent')","ed502aa6":"temp = df['base'].value_counts()\ntemp.iplot(kind='bar',title='Total Trips By Bases',\n           xTitle='Bases',yTitle='Total Trips')","529066dd":"index = df['base'].value_counts().index\ntemp = pd.DataFrame(index=index)\n\nfor i in range(len(dfs[:-1])):\n    temp[df_names[i]] = dfs[i]['base'].value_counts()\n    \ncolors = px.colors.qualitative.T10\n\nfig = px.bar(temp,barmode='group',\n             x = temp.index,\n             y = [c for c in temp.columns],\n             template = 'plotly_white',\n             color_discrete_sequence = colors,\n             title='Grouped Bar Plot for for total trips by base and months')\n\nfig.show()","e0c4d178":"temp = df.copy()\ntemp['one'] = np.ones(len(df))\ntemp = temp.groupby(['base','day_name']).count().reset_index()\n\ncolors = px.colors.qualitative.T10\n\nfig = px.bar(temp,barmode='group',\n             x = 'base',\n             y = 'one',\n             color='day_name',\n             template = 'plotly_white',\n             color_discrete_sequence = colors,\n             title='Grouped Bar Plot for for total trips by base and weakday')\n\nfig.show()","f462e5d2":"temp = df['base'].value_counts().reset_index()\ntemp.reset_index().iplot(kind='pie',labels='index',values='base',\n                         title='Pie Plot for total trips by bases',\n                         pull=0.03,sort=True,linecolor='red',\n                         textinfo='label+percent')","a6a3a352":"HeatMap(df.groupby(['lat','lon'])['day_name'].count().reset_index(),zoom=20,radius=15).add_to(basemap)\nbasemap","594706d2":"def plot_HeatMap(df,day):\n    df_out=df[df['day_name']==day]\n    df_out.groupby(['lat','lon'])['day_name'].count().reset_index()\n    HeatMap(df_out.groupby(['lat','lon'])['day_name'].count().reset_index(),zoom=20,radius=15).add_to(basemap)\n    return basemap","55bcc8a6":"plot_HeatMap(df,'Sunday')","e657fee7":"###  Analysis By Bases","e9e95fbf":"###  Analysis By Days","e7608025":"### Data Loading and Preparation","4ca25f64":"Loadin Data","c4188e71":"### <h1 align=\"center\"> Uber Pickups in New York City<\/h1>\n<h2 align=\"lef\" style='color:red' > Upvote my work if you found it useful<\/h2>\n<h2 align=\"lef\" style='color:red'>Wait a few seconds until the notebook is ready<\/h2>\n<img src='https:\/\/miro.medium.com\/max\/920\/1*ONVVDm_vLO0wNVaNF7nghQ.jpeg' width=1000 hight=100><br>\n<b>You can also see:<\/b><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-data-analysis-with-plotly-clustering'>Superstore Data Analysis With Plotly(Clustering)<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a><br>","b09e820b":"<b>Lets create a function for a specific day","0e4e7690":"<h2> Data Preparation<\/h2>\n<b><p>Now we have :<\/b><br>\n<li>Lat : The latitude of the Uber pickup\n<li>Lon : The longtude of the Uber pickup\n<li>Base : The TLC base company code affiliated with the Uber pickup\n<li>Date\/Time : The data of the trip","3bb9fe8c":"###  Analysis By Weakdays","0cb031ba":"###  Analysis By Hours","11921714":"###  Analysis By Months","8366b43b":"### Analysis of Location"}}