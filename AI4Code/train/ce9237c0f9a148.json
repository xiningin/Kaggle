{"cell_type":{"f97a6eed":"code","2d215b63":"code","6f05def0":"code","54783dd4":"code","b412503a":"code","be60b552":"code","127b5bf8":"code","c3418b7d":"code","e1765d25":"code","6fad8867":"code","cc7f1e3a":"code","9ad05fe4":"code","db0425c7":"code","c4270bfe":"code","7717f250":"code","e1257053":"code","03bde447":"code","42210ea9":"code","8c283674":"code","ebd54071":"code","e378dbeb":"code","1b88db72":"code","1f7d6a15":"code","521417a9":"code","b9227580":"code","98384b7a":"code","b5e7dc83":"code","96cc539d":"code","1fc9b699":"code","bba8ab1f":"code","0dbc7399":"code","d4558762":"code","e60c24ae":"code","f1d2f8bb":"code","23d29816":"code","1d488d85":"code","1288cc62":"code","1b9c77f9":"code","b633b693":"code","e67cacbb":"markdown","c45691f4":"markdown","792783ce":"markdown","bc3a6091":"markdown","8df1ee58":"markdown","c4c0dcb5":"markdown","ef593387":"markdown","6ddea5fe":"markdown","af7a2a24":"markdown","2febd100":"markdown","b7d5ab59":"markdown","025e0d7c":"markdown","72ec0f19":"markdown"},"source":{"f97a6eed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2d215b63":"df = pd.read_csv('..\/input\/boston-house-prices\/housing.csv',names = ['data'])","6f05def0":"df.head()","54783dd4":"d = ['crim','zn','indus','chas','nox','rm','age','dis','rad','tax','ptratio','b','lstat','medv']","b412503a":"a = list(range(14))\na = [str(i) for i in a]\na","be60b552":"df1 = pd.DataFrame(df,columns = a)\n#df1 = df1.fillna(0)","127b5bf8":"df1['data'] = df.data\n","c3418b7d":"for i in a:\n    df1[i] = df1['data'].apply(lambda x : x.split()[int(i)])","e1765d25":"df1 = df1[a]\ndf1.columns = d","6fad8867":"df1.head()","cc7f1e3a":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression","9ad05fe4":"X = df1[['crim','zn','indus','chas','nox','rm','age','dis','rad','tax','ptratio','b','lstat']]\ny = df1['medv']","db0425c7":"linR = LinearRegression(normalize=True)","c4270bfe":"trainX , testX ,trainY, testY = train_test_split( X, y, test_size=0.33, random_state=42)","7717f250":"linR.fit(trainX,trainY)","e1257053":"#accuracy of linear regression\nprint(linR.score(testX,testY))","03bde447":"from sklearn.ensemble import AdaBoostRegressor\n\nregr = AdaBoostRegressor(random_state=0, n_estimators=100)\nregr.fit(trainX, trainY)\n\n","42210ea9":"regr.score(testX,testY)","8c283674":"from sklearn import ensemble\n\nparams = {'n_estimators': 500, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.01, 'loss': 'ls'}\nxg_model = ensemble.GradientBoostingRegressor(**params)\n\n\nxg_model.fit(trainX,trainY)","ebd54071":"#accuracy of gradient boosting regression\nprint(xg_model.score(testX,testY))","e378dbeb":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(2)\npoly.fit_transform(trainX)\nlinR.fit(trainX,trainY)\n","1b88db72":"print(linR.score(testX,testY))","1f7d6a15":"dict = { }","521417a9":"for i in range(2,10):\n    \n    poly.fit_transform(trainX)\n    linR.fit(trainX,trainY)\n    dict.update({ i: linR.score(testX,testY)})","b9227580":"dict","98384b7a":"trainX , testX ,trainY, testY = train_test_split( X, y, test_size=0.33, random_state=42)","b5e7dc83":"features = set(X.columns)","96cc539d":"from sklearn import ensemble as en\n\nparams = {'n_estimators': 500, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.01, 'loss': 'ls'}\nxg_model = en.GradientBoostingRegressor(**params)\n\n\nxg_model.fit(trainX,trainY)","1fc9b699":"dict={ }","bba8ab1f":"for feat in features:\n    train = trainX[list(features - set(feat))]\n    test = testX[list(features - set(feat))]\n    xg_model.fit(train ,trainY)\n    dict.update({ feat : xg_model.score(test,testY)})\n    ","0dbc7399":"dict","d4558762":"sorted_x =sorted(dict.items(), key=lambda x: x[1], reverse=True)","e60c24ae":"sorted_x","f1d2f8bb":"trainX , testX ,trainY, testY = train_test_split( X, y, test_size=0.33, random_state=42)","23d29816":"from sklearn import linear_model as lin\nreg = lin.Ridge(alpha = 0.001)\nreg.fit(trainX,trainY)","1d488d85":"#accuracy of the ridge regression\nprint(reg.score(testX,testY))","1288cc62":"from sklearn import linear_model as lin\nlas = lin.Lasso(alpha = 0.001)\nlas.fit(trainX,trainY)","1b9c77f9":"#accuracy of the ridge regression\nprint(las.score(testX,testY))","b633b693":"from sklearn.linear_model import ElasticNet\nregr = ElasticNet(alpha = 0.5)\nregr.fit(trainX,trainY)\n#accuracy of the ridge regression\nprint(regr.score(testX,testY))","e67cacbb":"Accuracy of Ada Boost Algorithm","c45691f4":"# accuracy of linear regression","792783ce":"# Types of Regressions:\n* Linear Regression\n* Ada boosting\n* Gradient boosting regression\n* Logistic Regression\n* Polynomial Regression\n* Stepwise Regression\n* Ridge Regression\n* Lasso Regression\n* ElasticNet Regression\n* Regressor chain\n\n\n","bc3a6091":"# 3 . Gradient boosting regression","8df1ee58":"# 4 . Polynomial Equation","c4c0dcb5":"We will try to check how the increase in degree of polynomial changes the accuracy score of the predictor","ef593387":"# 7 . Lasso Regression","6ddea5fe":"# 8 . ElasticNet Regression","af7a2a24":"# 6 . Ridge Regression","2febd100":"# 5.  Stepwise Regression\nThe aim of this modeling technique is to maximize the prediction power with minimum number of predictor variables. It is one of the method to handle higher dimensionality of data set.\n\nThe method is to determine that how much a feature can contribute to the accuracy of the prediction.","b7d5ab59":"# 1 . Linear regression","025e0d7c":"# 2 . Ada Boost Algorithm","72ec0f19":"# accuracy gradient boosting regression"}}