{"cell_type":{"4737dbb4":"code","9c6bc285":"code","9454f14a":"code","9e70b037":"code","e097e23f":"code","55552b26":"code","3ee16903":"code","6b9726af":"code","160388b2":"code","af8f53ca":"code","94ed6c16":"code","a4c70efc":"code","dd21a61f":"code","f0376a5d":"code","8b775824":"code","6daf8bc4":"code","ce7e4209":"code","9e79bfe4":"code","6186f358":"code","90f9a04a":"code","c4a6d26f":"code","4873ade6":"code","a7d0a655":"code","3878517b":"code","7caf27e4":"code","bad42317":"code","ebd4e9f2":"code","341767f0":"code","14d160d4":"code","036f1a5b":"code","a5ecb643":"code","3c71dab3":"code","adb0f3b2":"code","1aed9364":"code","9e00b026":"code","a7013a21":"code","a5971e57":"code","49e85782":"code","e0e3b7ae":"code","d838a03e":"code","debc772f":"code","5ed874a0":"code","b2b3fd9f":"code","f4cc1516":"code","db57dd9f":"code","b250e704":"code","362f010f":"code","5247021f":"code","e6b54087":"code","d7898455":"code","1c44741f":"code","42a79c20":"code","70e9fa92":"code","2504e465":"code","78b1d19c":"code","00b49543":"code","105a91f6":"code","b5b44642":"code","a8c5cfcf":"code","c0b2d4f8":"code","2c90b321":"code","66902277":"code","0528ad13":"code","357e14c0":"code","7babd1d1":"code","64202d10":"code","900c6d24":"code","ad92514e":"code","c39b9379":"code","2f644293":"code","de86a64d":"code","b08a26ac":"code","92bd6330":"code","746f221e":"code","9f849188":"code","e34a2d19":"code","bd614688":"code","bcacf024":"code","109d02bc":"code","d0dfcf2a":"code","edfe7ccc":"code","2f160c6d":"code","30e2153b":"code","2241c6cb":"code","05463526":"code","9b99531b":"code","9e3ff155":"code","22d44fe2":"code","d31997fc":"code","01dfed2f":"code","2fc24b74":"code","8bed805a":"code","94ec8e07":"code","edf2713c":"code","27d1e20c":"code","b063e061":"code","33d1c321":"code","a6fca047":"code","7145ac8e":"code","1cb99c85":"code","4aa651f8":"code","c827fdc8":"code","2bdee559":"code","f4555c5c":"code","2178d3f4":"code","509fb819":"code","508e837e":"code","d640a815":"code","4179ddea":"code","db4a0dc8":"code","6f33f84a":"code","cf1ef1fc":"code","bb02b718":"code","8739f66e":"code","4de9255e":"markdown","8d249a42":"markdown","d0848762":"markdown","139c409e":"markdown","850f9546":"markdown","89864640":"markdown","981dab23":"markdown","cbe8164e":"markdown","82d815aa":"markdown","e755b4e4":"markdown","dfc56bf8":"markdown","69dc8e59":"markdown","255ec8a3":"markdown","14f38c3c":"markdown","c42ebd6e":"markdown","f494439e":"markdown","d1dcdbdf":"markdown","820ebfbb":"markdown","f3809355":"markdown","7dba2712":"markdown","dacf0cb7":"markdown","4ed59ac6":"markdown","0c955c96":"markdown","80473069":"markdown","2f75656b":"markdown","ede72e59":"markdown","c0c619d5":"markdown","c57d26c2":"markdown","26ef97c4":"markdown","555514f5":"markdown","8118d980":"markdown","288c0961":"markdown","c13d0960":"markdown","84bfc60e":"markdown","8f480250":"markdown","07d00e87":"markdown","9d4de5c2":"markdown","8536b840":"markdown","b86323c1":"markdown","cbdfbaf0":"markdown","d3deefec":"markdown","3feae027":"markdown","bee7588c":"markdown","f1250156":"markdown","c40c1759":"markdown","ab868315":"markdown","bfa51d6e":"markdown","cffa286a":"markdown","ff8c2fd7":"markdown","f001e0ce":"markdown","e4b89703":"markdown","daffeae2":"markdown","1508d297":"markdown","8e88dd37":"markdown","32599410":"markdown","8118f6cb":"markdown","249404dd":"markdown","24732e07":"markdown","fc7404a1":"markdown","c5858ca5":"markdown"},"source":{"4737dbb4":"# importing pandas\nimport pandas as pd\nimport numpy as np","9c6bc285":"# reading a .csv file with pandas, using `Id` as the index column\ndf = pd.read_csv('..\/input\/house-prices-data\/train.csv', index_col='Id')","9454f14a":"df","9e70b037":"type(df)\n# pandas represents data in a tabular form known as DataFrame","e097e23f":"df['LotFrontage']","55552b26":"type(df['LotFrontage'])\n# each column of a dataframe is known as Series","3ee16903":"# for multiple column selection, provide the array of columns\ncols = ['LotFrontage', 'SalePrice', 'LotShape']\ndf[cols]","6b9726af":"df.SalePrice","160388b2":"# .shape attribute will give you the (rows, columns) of a dataframe\ndf.shape","af8f53ca":"# selecting top 10, rows in a dataframe (by default it'll give you top 5 rows)\ndf.head(10)","94ed6c16":"# selecting last 10 rows of dataframe (by default it'll give last 5 rows)\ndf.tail(10)","a4c70efc":"# selecting randomly 10 rows in dataframe\ndf.sample(10)","dd21a61f":"# getting array of all the present column names in dataframe\ndf.columns","f0376a5d":"df.head()","8b775824":"# selecting a particular row with it's index name\ndf.loc[2]","6daf8bc4":"# ignore this code for this moment, we'll discuss it later\nd = df.groupby('LotConfig').count()\nd.head()","ce7e4209":"# NOTE: pass the index's name (here we have index as string)\nd.loc['Inside']","9e79bfe4":"# .loc also takes the name of column or array of columns for showing the selective columns\ndf.loc[2, 'SalePrice']","6186f358":"cols = ['LotConfig', 'SalePrice', 'Street']\ndf.loc[2, cols]","90f9a04a":"# .iloc takes the sequential order of certain row (pandas count from 0)\nd.iloc[4]","c4a6d26f":"df.head()","4873ade6":"# selecting rows where MSSubClass value is equal to 20\nsingle_condition = df['MSSubClass'] == 20\nsingle_condition # boolean array with True where condition met and False otherwise","a7d0a655":"# selecting rows where 'LotConfig' is 'FR2' and MSSubClass is 20\nmultiple_condition = ((df['LotConfig'] == 'FR2') & (df['MSSubClass'] == 20))","3878517b":"# passing those boolean arrays will show you that rows where conditon is met\ndf[multiple_condition]","7caf27e4":"# gives basic information about columns in dataframe\ndf.info()","bad42317":"# gives statistical information about columns of dataframe\ndf.describe()","ebd4e9f2":"# returns the data type for each column\ndf.dtypes","341767f0":"#selecting cols with a specific dtype\nobject_cols_df = df.select_dtypes(include='object') # returns a dataframe\nobject_cols_df","14d160d4":"# showing unique values and their frequencey in a column\ndf.LotConfig.value_counts() ","036f1a5b":"# showing the number of unique values in a column\ndf.LotConfig.nunique() ","a5ecb643":"# finding nan values\ndf.isna() # or df.isnull() (both works same)","3c71dab3":"# converting entire dataframe into a 2D array\ndf.isna().values[:8,:8] ","adb0f3b2":"#checking if our data has any nan value\ndf.isna().values.any()\n# any() function will true if there's atleast one True in array otherwise False","1aed9364":"# counting total number of nan values in a dataframe\ndf.isna().values.sum() # try to find why it worked, if you have doubt leave a comment ?","9e00b026":"df.isna().sum()[:10]","a7013a21":"# a better way to find all the columns that had nan values\n# we loop through each column and check the condition for finding missing values\n\nfor column in df.columns:\n    if df[column].isna().values.any():\n        print(column)","a5971e57":"new_df = pd.read_csv('..\/input\/dataset\/QueryResults.csv')\nnew_df.head()","49e85782":"# see we have `date` column as type of object\nnew_df.dtypes","e0e3b7ae":"# converting `Date` column from object to `datetime` format\nnew_df.Date = pd.to_datetime(new_df.Date)","d838a03e":"new_df.head()","debc772f":"# well it worked :)\nnew_df.dtypes","5ed874a0":"# a shorter way to do the same, `parse_date` parameter takes the array of column name that contain Dates as values\nnew_df = pd.read_csv('..\/input\/dataset\/QueryResults.csv', parse_dates=['Date'])\nnew_df.head()","b2b3fd9f":"new_df.dtypes","f4cc1516":"df.head()","db57dd9f":"# dropping entire `SalePrice` column from dataframe, \n# remember axis=1 represents that we are moving along column and dropping its values\ndf.drop('SalePrice', axis=1)","b250e704":"# dropping multiple columns\ncolumns_to_drop = ['SalePrice', 'LotArea']\ndf.drop(columns_to_drop, axis=1)","362f010f":"# dropping rows,\n# axis=0 represents that now we are moving along rows and dropping the values\ndf.drop([1,5], axis=0)","5247021f":"df","e6b54087":"# dropping rows with nan values, by default axis=0\ndf.dropna() ","d7898455":"# dropping columns with nan values\ndd = df.dropna(axis=1)","1c44741f":"dd.isna().values.any()","42a79c20":"# replacing nan values with another numerical value\nfiltered_df = df.fillna(0)\nfiltered_df","70e9fa92":"filtered_df.isna().values.any()","2504e465":"filling = {}\nfor col in df.columns:\n    if df[col].dtype == object:\n        filling[col] = \"missing\"\n    else:\n        filling[col] = 0\nfilling","78b1d19c":"filtered_df = df.fillna(filling)","00b49543":"filtered_df","105a91f6":"li = np.array([1,2,3,4,5])\nli + 3","b5b44642":"# adding 10 to the `PoolArea` column\nfiltered_df.PoolArea = filtered_df.PoolArea + 10\nfiltered_df.head()\n# that's why these arithmetic operations are called broadcasting operations","a8c5cfcf":"# creating a new column from the sum of two already existing columns\nfiltered_df['MiscVal_MoSold'] = filtered_df['MiscVal'] + filtered_df['MoSold']\nfiltered_df.head()","c0b2d4f8":"filtered_df['MiscVal_MoSold'] = 15\nfiltered_df.head()\n# no need to use loops, broadcasting is awesome :)","2c90b321":"df.head()","66902277":"df.describe()","0528ad13":"saleprice = df.SalePrice","357e14c0":"saleprice","7babd1d1":"saleprice.min(), saleprice.max() # printing min and maximum values","64202d10":"saleprice.sum() # printing sum of column","900c6d24":"saleprice.mean() # printing mean of column","ad92514e":"saleprice.std() # printing standard deviation of column","c39b9379":"saleprice.median() # printing median of column","2f644293":"saleprice.describe()","de86a64d":"df.head()","b08a26ac":"# sorting dataframe according to the values of column `SalePrice`\ndf.sort_values('SalePrice', ascending=False)","92bd6330":"new_df.head(10)","746f221e":"new_df.shape","9f849188":"# grouping the data and applying some operation on it\nnew_df.groupby('Tag').count()\n# try it with mean() too :)","e34a2d19":"# grouping and applying different operations on different columns\nnew_df.groupby('Tag').agg({'Date':pd.Series.count, 'Posts':pd.Series.sum})","bd614688":"new_df.head()","bcacf024":"new_df.tail()","109d02bc":"new_df.groupby('Tag')['Posts'].transform('sum')\n# play with the code for a while and try to understand, you'll surely like it\n# if got any doubt, leave a comment :)","d0dfcf2a":"new_df = pd.read_csv('..\/input\/dataset\/QueryResults.csv')\nnew_df.head()","edfe7ccc":"new_df.Date.dtype","2f160c6d":"# splitting `Date` column from the \" \" (space) into values of arrray\nsplitted_date = new_df.Date.str.split(\" \")\nsplitted_date","30e2153b":"# `expand` is a bool parameter, making it True will first split and then create separate column for both\ndate_time_df = new_df.Date.str.split(\" \", expand=True)\ndate_time_df.columns = ['Date', 'Time']\ndate_time_df","2241c6cb":"# Can you guess what I'am doing here ?\nmodified_df = new_df.drop('Date', axis=1)\nmodified_df","05463526":"# merging two dataframes\ndataframes_to_be_merged = [date_time_df,modified_df]\n\nmodified_df = pd.concat(dataframes_to_be_merged,axis=1)\n\nmodified_df.head(10)","9b99531b":"df.head()","9e3ff155":"# query takes the condtion as a string\ndf.query('LotConfig == \"FR2\" and MSSubClass == 20')","22d44fe2":"dummy_df = df[['LotConfig','YrSold','SalePrice']]\ndummy_df.head()","d31997fc":"dummy_df.LotConfig.value_counts()","01dfed2f":"# .factorize() returns the encoded vlaues and the unique values in column\n# we only need the encoded values\ndummy_df.LotConfig, uniques = df.LotConfig.factorize()","2fc24b74":"dummy_df.LotConfig.value_counts()","8bed805a":"uniques","94ec8e07":"dummy_df = df[['KitchenQual','YrSold','SalePrice']]\ndummy_df.head()","edf2713c":"df['KitchenQual'].value_counts()","27d1e20c":"# .get_dummies is very similar to `one hot encoding`\n# creates separate column for each unique column\npd.get_dummies(dummy_df,columns=['KitchenQual'])","b063e061":"pd.get_dummies(dummy_df,columns=['KitchenQual'],prefix=\"dummy\")","33d1c321":"dummy_df.head()","a6fca047":"# here we are grouping the unique categories with the mean of the SalePrice column\n# .transform() we talked above, if you have doubt, leave a comment\ndummy_df.groupby('KitchenQual')['SalePrice'].transform('mean')","7145ac8e":"encoded_values = dummy_df.groupby('KitchenQual')['SalePrice'].transform('mean')","1cb99c85":"encoded_df = pd.DataFrame(data=encoded_values, index=encoded_values.index)\nencoded_df.head()","4aa651f8":"encoded_df.columns = ['encoded_KitchenQual']\nencoded_df.head()","c827fdc8":"# another way of merging two dataframes\ndummy_df.join(encoded_df)","2bdee559":"dummy_df = dummy_df[:5]\ndummy_df","f4555c5c":"func = lambda x: sum(x)\ndummy_df[['YrSold','SalePrice']].apply(func=func, axis=0)\n# remember apply() function pass only one argument to your custom function","2178d3f4":"for (index,row) in dummy_df.iterrows():\n    print(row)\n    print() # just for extra line\n    \n# similarly you can access the values of each column through row[col]","509fb819":"for tup in dummy_df.itertuples():\n    print(tup)\n    \n# tup is a tuple with columns as it's values\n# you can spread all the vlaues in a tuple by *tup","508e837e":"for tup in dummy_df.itertuples():\n    print(*tup)\n    \n# tup is a tuple with columns as it's values\n# you can spread all the vlaues in a tuple by *tup","d640a815":"df.head()","4179ddea":"plot_df = df[:30]","db4a0dc8":"# plotting bar graph\nplot_df.plot(y='SalePrice', x='YrSold', kind='bar',figsize=(16,10))","6f33f84a":"# plotting scatter graph\nplot_df.plot(y='SalePrice', x='HouseStyle', kind='scatter')","cf1ef1fc":"# plotting and understanding box plots\nplot_df = plot_df.sort_values('SalePrice')\nplot_df.plot(y='SalePrice', kind='box',figsize=(15,6))\n# Box plot represents the Quartiles (Q1,Q2,Q3), minimum and maximum values in data","bb02b718":"# plotting kernel density plot\nplot_df.plot(y='SalePrice', kind='kde',figsize=(15,6))","8739f66e":"# plotting horizontal bar graph\nplot_df = df.groupby('HouseStyle').agg({'SalePrice': pd.Series.mean})\nplot_df = plot_df.sort_values('SalePrice')\nplot_df.plot(y='SalePrice', kind=\"barh\", figsize=(15,6))","4de9255e":"### multiple condition:\n- & => and\n- | => or\n- ! => not","8d249a42":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","d0848762":"## Statistical insights from data\n\nYou've already seen the `describe` method, which gives you a good \"summary\" of the `DataFrame`. Let's explore other methods in more detail:","139c409e":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","850f9546":"## Selecting Columns\n* Two ways\n    - `df['col_name']` or `df[[array of cols]]`\n    - `df.col_name` (auto complete feature works \ud83d\ude42)","89864640":"Is the method that shown is really helpful \ud83e\udd14 ?\n\nThe problem with above method is that if our column will be of type object but still it got filled with a numerical value","981dab23":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","cbe8164e":"![purple-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071927-c1cd7100-2562-11e9-908a-dde91ba14e59.png)\n","82d815aa":"![purple-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071927-c1cd7100-2562-11e9-908a-dde91ba14e59.png)\n","e755b4e4":"## Selecting Rows\n* 2 ways\n    - `df.loc[]`\n    - `df.iloc[]`","dfc56bf8":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","69dc8e59":"### using `transform` and understanding difference between `agg` and `transform`","255ec8a3":"## Broadcasting Operations\n\nBroadcasting functions are numpy's speciality. Since Pandas is built on top of nunpy so it also got this speciality.\n\nThese are basically element wise operations, you do some arithmetic operation on array and it get implemented on all of it's elements","14f38c3c":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","c42ebd6e":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","f494439e":"- `pd.get_dummies`","d1dcdbdf":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","820ebfbb":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","f3809355":"## More functions and graph plotting","7dba2712":"unfortunately all of the rows in our data contain a `nan` value","dacf0cb7":"now either you can drop the `KitchenQual` column or replace it's values with the `encoded_KitchenQual`","4ed59ac6":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","0c955c96":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","80473069":"- `iterrows`","2f75656b":"- `factorize`","ede72e59":"A correct way is to provide the coloumn name and value to replace with `nan`\n\nfor example: \nlet `column1` is a numerical column and `column2` is a object column\n```python\ndf.fillna({\n    'coloumn1' : 0\n    'column2': 'missing',\n})\n```\nnow it'll replace the `nan` values in `column1` with 0 and `column2` with 'missing'","c0c619d5":"- `itertuples`","c57d26c2":"- target encoding","26ef97c4":"### query method\n\nanother way for conditional selection of rows","555514f5":"## Dropping Stuff\n- Droping a column\n- Droping a row\n- Droping `nan` values (we have a particular section for treatment of `nan` values)","8118d980":"![purple-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071927-c1cd7100-2562-11e9-908a-dde91ba14e59.png)\n","288c0961":"## Basic data exploration\n\n- Reading data\n- Selecting columns\n- selecting rows","c13d0960":"## Getting some insights of data","84bfc60e":"# Introduction to data manipulation and viusualisation with Pandas\n","8f480250":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","07d00e87":"## Some basic functions for data exploration","9d4de5c2":"## Dealing with Date\/Time in Pandas\n\nSometime we have data in which a particular column contains date as values, but those values are of object data type initially.\nSo we had to convert them into datetime format.","8536b840":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","b86323c1":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","cbdfbaf0":"### Sorting","d3deefec":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","3feae027":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","bee7588c":"### Applying any function along column or row","f1250156":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","c40c1759":"# Introduction\n\npandas is a library written for the Python for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series.\n\nSo since it's a module, we need to: \n- download pandas first from `pip install pandas`\n- import it on our notebook","ab868315":"## Dealing with `nan` values\n\nIn Pandas there are two ways in which you can deal `nan` values :\n- drop the rows \/ columns that contain `nan` value\n- replace that `nan` value with some other value","bfa51d6e":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","cffa286a":"### plotting graph","ff8c2fd7":"### string splitting and expanding","f001e0ce":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","e4b89703":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","daffeae2":"### categorical encoding\n- `facorize`\n- `get_dummies`\n- `target encoding`\n\nfor categorical encoding we'll be using a function `factorize` from pandas.\nThis function gives a numerical value to all the categories present in a column","1508d297":"# The End !!","8e88dd37":"### Till now we saw that pandas only work with 2 data structures\n- DataFrame\n- Series","32599410":"### Conditional selection of rows","8118f6cb":"### Iterating over dataframe\n- `iterrows`\n- `itertuples`\n\nUsing loop to iterate over a dataframe","249404dd":"Ques: How to find all the columns that have nan values in them ?\n\nAns: We can check all the columns one by one manually \ud83d\ude11 NO THANKS","24732e07":"### grouping the data according to a column","fc7404a1":"![green-divider](https:\/\/user-images.githubusercontent.com\/7065401\/52071924-c003ad80-2562-11e9-8297-1c6595f8a7ff.png)","c5858ca5":"<img src=\"https:\/\/i.postimg.cc\/wBFPWZ8W\/boxplot.png\"> <\/img>"}}