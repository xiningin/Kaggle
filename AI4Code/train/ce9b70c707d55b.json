{"cell_type":{"c75ee8dc":"code","d5e88dcd":"code","37c6f5d3":"code","3172dff0":"code","9bfdf4a6":"code","0285ed5a":"markdown","d6ef899b":"markdown","315eabcf":"markdown","687367f4":"markdown","ffdfb998":"markdown","d927317e":"markdown"},"source":{"c75ee8dc":"import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","d5e88dcd":"df = pd.read_csv('..\/input\/covidqa\/community.csv')\ndf.head()","37c6f5d3":"vectorizer = TfidfVectorizer()\nvectorizer.fit(np.concatenate((df.question, df.answer)))","3172dff0":"Question_vectors = vectorizer.transform(df.question)","9bfdf4a6":"name = input(\"Enter your name : \") # Ask name from user\nprint(f\"BOT : Hello {name}! How can I help you ?\") # Welcome Message\n\nwhile True :\n    input_question = input(f\"{name} : \") # Ask a question from the user\n    if input_question.lower() == \"bye\" : # Check if he person wants to leave the chat\n        print(f\"BOT : Bye! Have a nice day and maintain proper norms and regulations to stop the spread of COVID.\") # Bye Message\n        break\n    input_question_vector = vectorizer.transform([input_question]) # Convert input question to vectors\n    similarities = cosine_similarity(input_question_vector, Question_vectors) # Find similarities between input question vectors and all question vectors\n    closest = np.argmax(similarities, axis=1) # Select index of the question vector with highest similarity\n    print(f\"BOT : {df.answer.iloc[closest].values[0]}\") # Print the answer for that index","0285ed5a":"For more information about TF-IDF Vectorizer, Visit https:\/\/www.etutorialspoint.com\/index.php\/386-tf-idf-tfidfvectorizer-tutorial-with-examples","d6ef899b":"# **Load the Data**","315eabcf":"# **Import required Libraries**","687367f4":"# **Use TF-IDF to convert words to vectors**","ffdfb998":"# **Helper Code for Chatting with the Retrieval Based Chatbot**","d927317e":"# **Convert Questions into Vectors**"}}