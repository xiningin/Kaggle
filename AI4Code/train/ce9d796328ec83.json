{"cell_type":{"65f14707":"code","a242dcd0":"code","bd8edbc1":"code","419f1514":"code","3aa336f4":"code","00bb033c":"code","2e310eaf":"code","7f75bc71":"code","6146f89e":"code","9de2769f":"code","e07c6136":"code","a642d419":"code","bc4ef3c5":"markdown","1b66505f":"markdown","889a2863":"markdown","6bb1e64a":"markdown","a1aee678":"markdown","20cbd409":"markdown","0e54674d":"markdown","07a2c974":"markdown","84b707e6":"markdown","d6c34da3":"markdown","d64249cc":"markdown","ea811b0c":"markdown","b2f15cf1":"markdown"},"source":{"65f14707":"import itertools\nimport re\n\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","a242dcd0":"print(os.listdir('..\/input'))","bd8edbc1":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","419f1514":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","3aa336f4":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","00bb033c":"raw1 = pd.read_csv('..\/input\/steam.csv', delimiter=',')\nnRow, nCol = raw1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","2e310eaf":"raw1.head(5)","7f75bc71":"def remove_non_english(df):\n    df = df[df['english'] == 1].copy()\n    \n    # doesn't contain 3 or more non-ascii characters\n    df = df[~df['name'].str.contains('[^\\u0001-\\u007F]{3,}')]\n    \n    df = df.drop('english', axis=1)\n    \n    return df\n\n\ndef calc_rating(row):\n\n    import math\n\n    pos = row['positive_ratings']\n    neg = row['negative_ratings']\n\n    total_reviews = pos + neg\n\n    average = pos \/ total_reviews\n\n    score = average - (average*0.5) * 2**(-math.log10(total_reviews + 1))\n\n    return score * 100\n\n\ndef get_unique(series):\n    return set(list(itertools.chain(*series.apply(lambda x: [c for c in x.split(';')]))))\n\n\ndef process_cat_gen_tag(df):\n    cat_cols = get_unique(df['categories'])\n    \n    # remove comments to use all categories\n    cat_cols = [\n#         'Local Multi-Player',\n#         'MMO',\n#         'Mods',\n        'Multi-player',\n#         'Online Co-op',\n#         'Online Multi-Player',\n        'Single-player'\n    ]\n    \n    for col in sorted(cat_cols):\n        col_name = re.sub(r'[\\s\\-\\\/]', '_', col.lower())\n        col_name = re.sub(r'[()]', '', col_name)\n        \n        df[col_name] = df['categories'].apply(lambda x: 1 if col in x.split(';') else 0)\n        \n    gen_cols = get_unique(df['genres'])\n    \n    # remove comments to use all genres. Currently uses main ones as per steam store home page\n    gen_cols = [\n#         'Accounting',\n        'Action',\n        'Adventure',\n#         'Animation & Modeling',\n#         'Audio Production',\n        'Casual',\n#         'Design & Illustration',\n#         'Documentary',\n#         'Early Access',\n#         'Education',\n#         'Free to Play',\n#         'Game Development',\n#         'Gore',\n        'Indie',\n        'Massively Multiplayer',\n#         'Nudity',\n#         'Photo Editing',\n        'RPG',\n        'Racing',\n#         'Sexual Content',\n        'Simulation',\n#         'Software Training',\n        'Sports',\n        'Strategy'\n#         'Tutorial',\n#         'Utilities',\n#         'Video Production',\n#         'Violent',\n#         'Web Publishing'\n    ]\n    \n    gen_col_names = []\n    \n    for col in sorted(gen_cols):\n        col_name = col.lower().replace('&', 'and').replace(' ', '_')\n        gen_col_names.append(col_name)\n        \n        df[col_name] = df['genres'].apply(lambda x: 1 if col in x.split(';') else 0)\n    \n    # remove \"non-games\" based on genre\n    gen_sums = df[gen_col_names].sum(axis=1)\n    df = df[gen_sums > 0]\n        \n    tag_cols = get_unique(df['steamspy_tags'])\n    # df['top_tag'] = df['tags'].apply(lambda x: x.split(';')[0] if ';' in x else x)\n    \n    # display(cat_cols, gen_cols, tag_cols)\n    df = df.drop(['categories', 'genres', 'steamspy_tags'], axis=1)\n    \n    return df\n\n\ndef process_year(df):\n    df['release_date'] = df['release_date'].astype('datetime64[ns]')\n    df['release_year'] = df['release_date'].apply(lambda x: x.year)\n    return df\n\n    \ndef process_revenue(df):\n    df['est_revenue'] = df['owners'] * df['price']\n    return df\n\n\ndef process_price(df):\n    cut_points = [-1, 0, 4, 10, 30, 50, 1000]\n    label_names = ['free', 'very cheap', 'cheap', 'moderate', 'expensive', 'very expensive']\n    \n    df['price_categories'] = pd.cut(df['price'], cut_points, labels=label_names)\n    \n    return df\n\n\ndef pre_process(df):\n    # english only\n    df = remove_non_english(df)\n    \n    # windows only\n    df = df[df['platforms'].str.contains('windows')].drop('platforms', axis=1).copy()\n    \n    df['owners'] = df['owners'].str.split('-').apply(lambda x: (int(x[0]) + int(x[1])) \/ 2).astype(int)\n    # df['owners'] = df['owners'].str.replace('[+,]', '').astype(int)\n    \n    # calculate ratings\n    df['total_ratings'] = df['positive_ratings'] + df['negative_ratings']\n    df['ratings_ratio'] = df['positive_ratings'] \/ df['total_ratings']\n    df['weighted_rating'] = df.apply(calc_rating, axis=1)\n    # df = df.drop(['positive', 'negative'], axis=1)\n    \n    df = df.rename(columns={'average_forever': 'average_playtime', 'median_forever': 'median_playtime'})\n    \n    df = process_year(df)\n    df = process_revenue(df)\n    df = process_price(df)\n    df = process_cat_gen_tag(df)\n    \n    return df\n\ndf1 = pre_process(raw1)\ndf1.dataframeName = 'steam'\n\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns after preprocessing')\n\ndf1.head()","6146f89e":"# percentage of apps in each genre\ngenre_cols = df1.columns[-10:]\n\ntotal_owners_per_genre = df1[genre_cols].multiply(df1['owners'], axis='index').sum()\naverage_owners_per_genre = total_owners_per_genre \/ df1[genre_cols].sum()\n\nfig, ax1 = plt.subplots()\n\ncolor = 'tab:red'\ndf1[genre_cols].mean().sort_index(ascending=False).plot.barh(ax=ax1, color=color, alpha=.5, position=.8)\n# ax1.set_ylabel('genre')\nax1.set_xlabel('% of apps', color=color)\nax1.tick_params(axis='x', labelcolor=color)\n\nax2 = ax1.twiny()\n\ncolor = 'tab:blue'\naverage_owners_per_genre.sort_index(ascending=False).plot.barh(ax=ax2, color=color, alpha=.5, position=.2, label='1')\nax2.set_xlabel('average owners per app', color=color)\nax2.tick_params(axis='x', labelcolor=color)\n\nplt.tight_layout()\nplt.show()","9de2769f":"dfsample = df1.sample(1000)\ndfsample.dataframeName = 'steam'\nplotPerColumnDistribution(dfsample, 10, 5)","e07c6136":"plotCorrelationMatrix(dfsample, 8)","a642d419":"plotScatterMatrix(dfsample, 20, 10)","bc4ef3c5":"## Introduction\nThis is a modified kernel with starter code demonstrating how to read in the data, preprocess the data, and begin exploring. Click the blue \"Edit Notebook\" or \"Fork Notebook\" button at the top of this kernel to begin editing.","1b66505f":"Correlation matrix:","889a2863":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data.","6bb1e64a":"Let's take a quick look at what the raw data looks like:","a1aee678":"Scatter and density plots:","20cbd409":"Now let's do a bit of feature engineering, and transform some columns into more useful ones.","0e54674d":"### Let's check 1st file: ..\/input\/steam.csv","07a2c974":"There is 1 csv file in the current version of the dataset:\n","84b707e6":"Distribution graphs (histogram\/bar graph) of sampled columns:","d6c34da3":"Let's have a look at the breakdown of genres, and how the average amount of owners per game compares to the proportion of games in each genre. It's important to remember that a single game can belong to multiple genres.","d64249cc":"Now you're ready to read in the data and use the plotting functions to visualize the data.","ea811b0c":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","b2f15cf1":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Edit Notebook\" button at the top of the kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!"}}