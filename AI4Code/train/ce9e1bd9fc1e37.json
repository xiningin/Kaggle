{"cell_type":{"cc543217":"code","4852dd87":"code","71dfc266":"code","dd2f3f2f":"code","ffbea1b2":"code","c0dd2876":"code","1bcc3650":"code","fc2cd5c7":"code","a96e89e3":"code","aab6e7d7":"code","9e92c0ed":"code","b66c18bb":"code","84f5ee11":"code","0869cfc4":"code","9cab2abe":"code","71a2871e":"code","be71904e":"code","c821a979":"code","a6fa0f87":"code","dab5f308":"markdown","7d7646bd":"markdown","0c7faaba":"markdown","cd6aede1":"markdown","83a52cb3":"markdown","cb42be63":"markdown","a23935de":"markdown","119f4de4":"markdown","accc87bf":"markdown","cd7d103e":"markdown"},"source":{"cc543217":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4852dd87":"df = pd.read_csv('..\/input\/electricity-production-by-source-world\/Electricity_Production_By_Source.csv',skiprows = 1, names=['Entity', 'Code', 'Year', 'Coal', 'Gas', 'Hydro', 'Renewables', 'Solar', 'Oil', 'Wind', 'Nuclear'])\ndisplay(df.head())\ndisplay(df.describe().T)\ndisplay(df.shape)","71dfc266":"numerical_features = df.select_dtypes(include=np.number).columns\nprint(f'Numerical Features ({len(numerical_features)}):\\n{numerical_features}')\nprint('-'*80)\ncategorical_features = df.select_dtypes(include=np.object).columns\nprint(f'Categorical Features ({len(categorical_features)}):\\n{categorical_features}')\n","dd2f3f2f":"df.Entity.nunique()","ffbea1b2":"df.Year.nunique()","c0dd2876":"df.info()","1bcc3650":"def plot_nans(df: pd.DataFrame, obj_id: str):\n    \"\"\"Function calculates percentage of missing values by column\n    and creates a bar plot.\"\"\"\n    rows, _ = df.shape\n    missing_values = df.isna().sum() \/ rows * 100\n    missing_values = missing_values[missing_values != 0]\n    missing_values.sort_values(inplace=True)\n    title = obj_id + ' missing values'\n    plt.barh(missing_values.index, missing_values.values)\n    plt.xlabel('Percentage (%)')\n    plt.title(title)\n    plt.show()\nplot_nans(df, 'DataFrame')","fc2cd5c7":" from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors = 2)\nimputer.fit_transform(df[['Oil', 'Gas', 'Coal', 'Renewables']])\n\ndf.replace({np.nan : 'NaN'}, inplace = True)\nprint('contains missing values: ')\ndf.isnull().any()","a96e89e3":"print('unique countries\/regions: ', df.Entity.nunique())\nprint('unique codes: ', df.Code.nunique())","aab6e7d7":"df.groupby([ 'Entity']).head()","9e92c0ed":"def total_usage(row):\n    row.Total_production = float(row.Coal) + float(row.Gas) + float(row.Hydro) + float(row.Renewables) + float(row.Solar) + float(row.Oil) + float(row.Wind) + float(row.Nuclear)\n    return row\ndf['Total_production'] = np.nan\ndf = df.apply(total_usage, axis='columns')\ndf.head(5)","b66c18bb":"df = df.set_index('Year')\ndf['Entity'].unique()","84f5ee11":"# df = df.set_index('Year')\ndf[df['Entity'] == 'Netherlands'].plot(figsize=(12,12))","0869cfc4":"production  = ['Coal', 'Gas', 'Hydro', 'Renewables', 'Solar', 'Oil', 'Wind',\n       'Nuclear']\nyearly_production = df.groupby('Year')[production].sum()\nyearly_production.head()","9cab2abe":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(15,15))\n\nfor col in yearly_production.columns:\n    sns.regplot(x=yearly_production[col].index, y=yearly_production[col], label=col)\nfig.legend()    \n","71a2871e":"yearly_production.hist(bins=20,figsize=(15,15))","be71904e":"df.columns","c821a979":"trans_df = df.copy()\ntrans_df['Year'] = pd.to_datetime(trans_df['Year'],format='%Y')\ntrans_df.set_index('Year', inplace=True)\ntrans_df.head(5)","a6fa0f87":"from statsmodels.tsa.seasonal import STL\n\nplt.figure(figsize=(30,30))\nstl = STL(trans_df['Coal'], period=12).fit()\nstl.plot()\nplt.show()","dab5f308":"## STL\nseasonality? trends?","7d7646bd":"## Missing Values","0c7faaba":"## yearly production","cd6aede1":"resample df to yearly data","83a52cb3":"for the oil, gas, coal and renewables missing values we can impute those. \nThe code missing values we cannot really impute, we can fill them with a place holder.","cb42be63":"not really anything significant","a23935de":"#### Description\nnotice missing values in count column\ntimeseries goes from 1985 until 2020","119f4de4":"## Country\/Regions","accc87bf":"## Preditions","cd7d103e":"## Regional power usage"}}