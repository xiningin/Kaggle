{"cell_type":{"b1808534":"code","01adeadb":"code","16bdce32":"code","9292d71c":"code","e7dae95d":"code","e902fe51":"code","0b54f5c0":"markdown","569b4f05":"markdown","a8d1f1e0":"markdown","f0bc511c":"markdown","2f2abfd9":"markdown","f4618a5f":"markdown"},"source":{"b1808534":"from __future__ import print_function\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\nimport matplotlib.pyplot as plt\nfrom time import time\nfrom keras.callbacks import TensorBoard\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np","01adeadb":"batch_size = 200\nnum_classes = 10\nepochs = 30\n\n# input image dimensions\nimg_rows, img_cols = 28, 28\n\ntrain_data = pd.read_csv(\"..\/input\/train.csv\")\ntrain_data = np.array(train_data)\nX_train = train_data[:,1:]\nY_train = train_data[:,0]\n\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\nX_test = np.array(test_data)\n\n\nif K.image_data_format() == 'channels_first':\n    X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n    X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1, img_rows, img_cols)\nelse:\n    X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\n    X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols,1)\n    input_shape = (img_rows, img_cols, 1)\n\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\nX_train \/= 255\nX_test \/= 255\nprint('x_train shape:', X_train.shape)\nprint('x_test shape:', X_test.shape)\nprint(X_train.shape[0], 'train samples')\nprint(X_test.shape[0], 'test samples')\n\n# convert class vectors to binary class matrices\nY_train = keras.utils.to_categorical(Y_train, num_classes)\n\n\nY_train.shape","16bdce32":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=input_shape))\n\nmodel.add(Conv2D(32, kernel_size=(5, 5),\n                 activation='relu',))\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\n\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adadelta(),\n              metrics=['accuracy'])\nmodel.summary()\n","9292d71c":"#cb=keras.callbacks.TensorBoard(log_dir='\/tmp\/mnist_demo\/2', histogram_freq=0, batch_size=200, write_graph=True, write_grads=True, write_images=True,embeddings_freq=0, embeddings_layer_names=None, embeddings_metadata=None, embeddings_data=None, update_freq='epoch')\nhistory = model.fit(X_train, Y_train,\n          batch_size=batch_size,\n          epochs=epochs,\n          verbose=1, shuffle = True,\n          validation_split= 0.1)","e7dae95d":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Error vs Epochs')\nplt.ylabel('Error')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper right')\nplt.show()","e902fe51":"Y_test = model.predict(X_test)\nresults = np.argmax(Y_test,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","0b54f5c0":"# Error vs Epoch","569b4f05":"## Predictions","a8d1f1e0":"# Network Initialization\n\n### 3 Convolution Layers of size 3x3, 5x5 and 3x3 having rectified linear Activation function followed by Max Pool Layer of size 2x2  after 2nd and 3rd Convolution Layer followed by dense layer with dropout of 0.25.","f0bc511c":"# Some Pre-Processing Steps\n\n### Batch SIze = 200\n### Epochs = 30","2f2abfd9":"# Major Imports","f4618a5f":"# Fit Model and compute accuracy score "}}