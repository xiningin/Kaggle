{"cell_type":{"c9c2d7f1":"code","9f8296ca":"code","c5d1eb73":"code","578d34cc":"code","5f9b4bf0":"code","d4019e9b":"code","b5bd3980":"code","558ca4c9":"code","e4e2cf1e":"code","3d79dea0":"code","545f4786":"code","6cf768f7":"code","d8b4dcf5":"markdown","c9a396b1":"markdown","0f258c4d":"markdown","c6178c27":"markdown","60d168aa":"markdown","e61e1c33":"markdown","0a3c2d14":"markdown","6a2b2236":"markdown","62dd207b":"markdown","4b3edd1d":"markdown","e69f2d2b":"markdown","70df727b":"markdown","d45820a9":"markdown","d9a8facc":"markdown","ba8bdac3":"markdown"},"source":{"c9c2d7f1":"# Import the libraries\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","9f8296ca":"# Load the data\nfashion_mnist = keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()","c5d1eb73":"# Create list for the class names\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","578d34cc":"# Plot the first image in the training set\nplt.imshow(train_images[0], cmap='binary')\nplt.colorbar()\nplt.show()","5f9b4bf0":"# Divide the values by 255\ntrain_images = train_images \/ 255\ntest_images = test_images \/ 255","d4019e9b":"# Plot the first 25 images in the training set\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap='binary')\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","b5bd3980":"# Configure the layers\nmodel = keras.Sequential([\n                          keras.layers.Flatten(input_shape=(28, 28)),\n                          keras.layers.Dense(128, activation='relu'),\n                          keras.layers.Dense(len(class_names), activation='softmax')\n\n])","558ca4c9":"# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","e4e2cf1e":"# Fit the model\nmodel.fit(train_images, train_labels, epochs=10)","3d79dea0":"# Get the model's accuracy\ntest_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)","545f4786":"# Make predictions\npredictions = model.predict(test_images)","6cf768f7":"# Plot the images for the first 25 predictions\nplt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.gca().set_title(f'Predicted: {class_names[np.argmax(predictions[i])]}')\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(test_images[i], cmap='binary')\n    plt.xlabel(f'Actual: {class_names[test_labels[i]]}')\n    plt.tight_layout()\nplt.show()","d8b4dcf5":"## Making Predictions\nWith the model trained, we can now use it to make predictions on some images.","c9a396b1":"## Evaluating the Model\nNext, compare how the model performs on the test data.","0f258c4d":"## Loading the Data\nWe can import and load the Fashion MNIST dataset directly from TensorFlow. Loading the dataset returns four NumPy arrays:\n\n- The train_images and train_labels arrays are the training set, which is the data the model uses to learn.\n- The model is tested against the test set, the test_images, and test_labels arrays.\n","c6178c27":"As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.91 (or 91%) on the training data.","60d168aa":"### Configuring the Layers\nThe first layer in this neural network, `keras.layers.Flatten`, which will transform the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels).\n\nAfter the pixels are flattened, the network consists of a sequence of two `keras.layers.Dense` layers. The first Dense layer has 128 nodes (or neurons) and the second layer will return a softmax array with length of 10.","e61e1c33":"## Building the Model\nNow, we can build the neural network by configuring the layers of the model and compiling the model.","0a3c2d14":"As we can see, pixel values fall in the range of 0 to 255. However, we need to scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, we can divide the values by 255. ","6a2b2236":"To verify that the data is in the correct format, let's display the first 25 images from the training set along with the class name below each image.","62dd207b":"### Fitting the Model\nNow, we can use the `model.fit` method to fits the model to the training data.","4b3edd1d":"### Compiling the Model\nBefore training the model, we need to compile the model with the following settings:\n- Loss function: This measures how accurate the model is during training. For the loss function, we are going to use the sparse categorical cross entropy.\n- Optimizer: This is how the model is updated based on the data it sees and its loss function. We are going to use Adam, which is an optimization algorithm based on adaptive estimation of first-order and second-order moments.\n- Metrics: Used to monitor the training and testing steps. Here we will use accuracy, the fraction of the images that are correctly classified.","e69f2d2b":"Let's plot several images along with their predictions.","70df727b":"The images are 28x28 NumPy arrays, with pixel values ranging from 0 to 255. The labels are an array of integers, ranging from 0 to 9. The labels and the corresponding class of clothing is shown in the table below:\n\n| Label | Class       |\n|-------|-------------|\n| 0     | T-shirt\/top |\n| 1     | Trouser     |\n| 2     | Pullover    |\n| 3     | Dress       |\n| 4     | Coat        |\n| 5     | Sandal      |\n| 6     | Shirt       |\n| 7     | Sneaker     |\n| 8     | Bag         |\n| 9     | Ankle boot  |\n\nEach image is mapped to a single label. Since the class names are not included with the dataset, we will create a list to store these class names.","d45820a9":"# Image Classification on Fashion MNIST Dataset\nThis project is one of my Deep Learning projects. For this project, we have the [Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist) dataset which contains a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 pixels grayscale image, associated with a label from 10 classes. Here's an example how the data looks,\n\n![Fashion-MNIST samples (by Zalando, MIT License)](https:\/\/github.com\/zalandoresearch\/fashion-mnist\/raw\/master\/doc\/img\/fashion-mnist-sprite.png)\n\nThe goal of this project is to create a neural network model to classify clothing images by predicting their labels.\n","d9a8facc":"## Preprocessing the Data\nBefore training the network, we need to preprocess the data. Let's first inspect the first image in the training set.","ba8bdac3":"It turns out that the accuracy on the test dataset is a little less than the accuracy on the training data."}}