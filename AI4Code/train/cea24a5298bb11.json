{"cell_type":{"6af986d9":"code","9a3ba6d8":"code","7d0d2d61":"code","569ca010":"code","4bde6a8b":"code","786960ac":"code","260a56c5":"code","cdcde211":"code","5f60dca6":"code","6edf56d8":"code","61810ed1":"code","6eaddbc7":"code","991f31c2":"code","4a40bce8":"code","c907fceb":"code","944d9c69":"code","fb617082":"code","534bd2b1":"code","e216048b":"code","4979eeb0":"code","434a19f8":"code","c3ab8cc6":"code","af892a6e":"code","47c3b424":"code","8f30db07":"code","5b861191":"code","34a5fd82":"markdown","047817c4":"markdown","1cc18f55":"markdown","44208f35":"markdown","e569b13d":"markdown","e083572c":"markdown","28b5d6fe":"markdown","539937fa":"markdown","84b268ad":"markdown","e3a2e84c":"markdown","70355dfd":"markdown","a5b842bb":"markdown","ba8d1622":"markdown","00eba0ec":"markdown","77778047":"markdown","325ef8c0":"markdown"},"source":{"6af986d9":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport plotly\nimport plotly.plotly as py\nfrom plotly import graph_objs as go\nfrom __future__ import division\nimport plotly.figure_factory as ff\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n%matplotlib inline\n\ndfHome = pd.read_csv('..\/input\/home_page_table.csv')\ndfSearch = pd.read_csv('..\/input\/search_page_table.csv')\ndfPaymentC1 = pd.read_csv('..\/input\/payment_confirmation_table.csv')\ndfPaymentP2 = pd.read_csv('..\/input\/payment_page_table.csv')\nUserTable = pd.read_csv('..\/input\/user_table.csv')\n\n\n","9a3ba6d8":"UserTable.head()","7d0d2d61":"dfHome.head()","569ca010":"data_table = [['Phases', 'Values'],\n               ['dfHome', dfHome['user_id'].count()],\n               ['dfSearch', dfSearch['user_id'].count()],\n               ['dfPaymentP2', dfPaymentP2['user_id'].count()],\n               ['dfPaymentC1', dfPaymentC1['user_id'].count()],\n               ['UserTable', UserTable['user_id'].count()]]","4bde6a8b":"data_table","786960ac":"table = ff.create_table(data_table)\niplot(table)","260a56c5":"# chart stages data\nvalues = [90400, 45200, 6030, 452]\nphases = ['Home', 'Search', 'Payment', 'Confirm']\n\n# color of each funnel section\ncolors = ['rgb(0, 102, 204)', 'rgb(51, 153, 255)', 'rgb(0, 102, 204)', 'rgb(204, 255, 255)']\n\nn_phase = len(phases)\nplot_width = 700\n\n# height of a section and difference between sections \nsection_h = 100\nsection_d = 10\n\n# multiplication factor to calculate the width of other sections\nunit_width = plot_width \/ max(values)\n\n# width of each funnel section relative to the plot width\nphase_w = [int(value * unit_width) for value in values]\n\n# plot height based on the number of sections and the gap in between them\nheight = section_h * n_phase + section_d * (n_phase - 1)\n\n# list containing all the plot shapes\nshapes = []\n\n# list containing the Y-axis location for each section's name and value text\nlabel_y = []\n\nfor i in range(n_phase):\n        if (i == n_phase-1):\n                points = [phase_w[i] \/ 2, height, phase_w[i] \/ 2, height - section_h]\n        else:\n                points = [phase_w[i] \/ 2, height, phase_w[i+1] \/ 2, height - section_h]\n\n        path = 'M {0} {1} L {2} {3} L -{2} {3} L -{0} {1} Z'.format(*points)\n\n        shape = {\n                'type': 'path',\n                'path': path,\n                'fillcolor': colors[i],\n                'line': {\n                    'width': 1,\n                    'color': colors[i]\n                }\n        }\n        shapes.append(shape)\n        \n        # Y-axis location for this section's details (text)\n        label_y.append(height - (section_h \/ 2))\n\n        height = height - (section_h + section_d)\n        \n# For phase names\nlabel_trace = go.Scatter(\n    x=[-350]*n_phase,\n    y=label_y,\n    mode='text',\n    text=phases,\n    textfont=dict(\n        color='rgb(255, 255, 255)',\n        size=15\n    )\n)\n \n# For phase values\nvalue_trace = go.Scatter(\n    x=[350]*n_phase,\n    y=label_y,\n    mode='text',\n    text=values,\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n\ndata = [label_trace, value_trace]\n \nlayout = go.Layout(\n    title=\"<b>Conversion Funnel<\/b>\",\n    titlefont=dict(\n        size=40,\n        color='rgb(255, 255, 255)'\n    ),\n    shapes=shapes,\n    height=560,\n    width=800,\n    showlegend=False,\n    paper_bgcolor='rgba(44,58,71,1)',\n    plot_bgcolor='rgba(44,58,71,1)',\n    xaxis=dict(\n        showticklabels=False,\n        zeroline=False,\n    ),\n    yaxis=dict(\n        showticklabels=False,\n        zeroline=False\n    )\n)\n \nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cdcde211":"UserTable.head()","5f60dca6":"dfHome = dfHome.rename(columns={'page':'Step One'})\ndfSearch = dfSearch.rename(columns={'page':'Step Two'})\ndfPaymentP2 = dfPaymentP2.rename(columns={'page':'Step Three'})\ndfPaymentC1 = dfPaymentC1.rename(columns={'page':'Step Four'})","6edf56d8":"dfPaymentC1.head()","61810ed1":"dfT = UserTable.merge(dfHome, how ='outer',on='user_id').merge(dfSearch, how ='outer', on='user_id').merge(dfPaymentP2, how ='outer', on='user_id').merge(dfPaymentC1, how ='outer', on='user_id')","6eaddbc7":"dfT.head()","991f31c2":"Step_One_Male = (dfT['sex'] == 'Male') & (dfT['Step One'] == 'home_page')\nStep_One_Female = (dfT['sex'] == 'Female') & (dfT['Step One'] == 'home_page')\n\nStep_Two_Male = (dfT['sex'] == 'Male') & (dfT['Step Two'] == 'search_page')\nStep_Two_Female = (dfT['sex'] == 'Female') & (dfT['Step Two'] == 'search_page')\n\nStep_Three_Male = (dfT['sex'] == 'Male') & (dfT['Step Three'] == 'payment_page')\nStep_Three_Female = (dfT['sex'] == 'Female') & (dfT['Step Three'] == 'payment_page')\n\nStep_Four_Male = (dfT['sex'] == 'Male') & (dfT['Step Four'] == 'payment_confirmation_page')\nStep_Four_Female = (dfT['sex'] == 'Female') & (dfT['Step Four'] == 'payment_confirmation_page')\n\ndata_table2 = [['Phases', 'Man', 'Woman'],\n               ['Home', Step_One_Male.sum(), Step_One_Female.sum()],\n               ['Search', Step_Two_Male.sum(), Step_Two_Female.sum()],\n               ['Payment', Step_Three_Male.sum(), Step_Three_Female.sum()],\n               ['Confirmation', Step_Four_Male.sum(), Step_Four_Female.sum()]]\n\n","4a40bce8":"data_table2","c907fceb":"table = ff.create_table(data_table2)\niplot(table)","944d9c69":"df = pd.DataFrame(np.array([['Home', 45325, 45075], ['Search', 22524, 22676], ['Payment', 2930, 3100], ['Confirmation', 211, 241]]),\n                            columns=['','Man', 'Woman'])\ndf = df.set_index('')\n\ndf['Man'] = df['Man'].astype('int')\ndf['Woman'] = df['Woman'].astype('int')","fb617082":"df.dtypes","534bd2b1":"total = [sum(row[1]) for row in df.iterrows()]\n\n\nn_phase, n_seg = df.shape\n\nplot_width = 600\nunit_width = plot_width \/ total[0]\n \nphase_w = [int(value * unit_width) for value in total]\n \n# height of a section and difference between sections \nsection_h = 100\nsection_d = 10\n\n# shapes of the plot\nshapes = []\n \n# plot traces data\ndata = []\n \n# height of the phase labels\nlabel_y = []\n\nheight = section_h * n_phase + section_d * (n_phase-1)\n\n# rows of the DataFrame\ndf_rows = list(df.iterrows())\n\n# iteration over all the phases\nfor i in range(n_phase):\n    # phase name\n    row_name = df.index[i]\n    \n    # width of each segment (smaller rectangles) will be calculated\n    # according to their contribution in the total users of phase\n    seg_unit_width = phase_w[i] \/ total[i]\n    seg_w = [int(df_rows[i][1][j] * seg_unit_width) for j in range(n_seg)]\n    \n    # starting point of segment (the rectangle shape) on the X-axis\n    xl = -1 * (phase_w[i] \/ 2)\n    \n    # iteration over all the segments\n    for j in range(n_seg):\n        # name of the segment\n        seg_name = df.columns[j]\n        \n        # corner points of a segment used in the SVG path\n        points = [xl, height, xl + seg_w[j], height, xl + seg_w[j], height - section_h, xl, height - section_h]\n        path = 'M {0} {1} L {2} {3} L {4} {5} L {6} {7} Z'.format(*points)\n        \n        shape = {\n                'type': 'path',\n                'path': path,\n                'fillcolor': colors[j],\n                'line': {\n                    'width': 1,\n                    'color': colors[j]\n                }\n        }\n        shapes.append(shape)\n        \n        # to support hover on shapes\n        hover_trace = go.Scatter(\n            x=[xl + (seg_w[j] \/ 2)],\n            y=[height - (section_h \/ 2)],\n            mode='markers',\n            marker=dict(\n                size=min(seg_w[j]\/2, (section_h \/ 2)),\n                color='rgba(255,255,255,1)'\n            ),\n            text=\"Segment : %s\" % (seg_name),\n            name=\"Value : %d\" % (df[seg_name][row_name])\n        )\n        data.append(hover_trace)\n        \n        xl = xl + seg_w[j]\n\n    label_y.append(height - (section_h \/ 2))\n\n    height = height - (section_h + section_d)\n    \n    # For phase names\nlabel_trace = go.Scatter(\n    x=[-350]*n_phase,\n    y=label_y,\n    mode='text',\n    text=df.index.tolist(),\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n\ndata.append(label_trace)\n \n# For phase values (total)\nvalue_trace = go.Scatter(\n    x=[350]*n_phase,\n    y=label_y,\n    mode='text',\n    text=total,\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n\ndata.append(value_trace)\n\nlayout = go.Layout(\n    title=\"<b>Segmented Funnel Chart<\/b>\",\n    titlefont=dict(\n        size=20,\n        color='rgb(230,230,230)'\n    ),\n    hovermode='closest',\n    shapes=shapes,\n    showlegend=False,\n    paper_bgcolor='rgba(44,58,71,1)',\n    plot_bgcolor='rgba(44,58,71,1)',\n    xaxis=dict(\n        showticklabels=False,\n        zeroline=False,\n    ),\n    yaxis=dict(\n        showticklabels=False,\n        zeroline=False\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","e216048b":"Step_One_Desktop_Male =(dfT['sex'] == 'Male') &  (dfT['device'] == 'Desktop') & (dfT['Step One'] == 'home_page')\nStep_One_Mobile_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Mobile') & (dfT['Step One'] == 'home_page')\nStep_One_Desktop_Female =(dfT['sex'] == 'Female') &  (dfT['device'] == 'Desktop') & (dfT['Step One'] == 'home_page')\nStep_One_Mobile_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Mobile') & (dfT['Step One'] == 'home_page')\n\nStep_Two_Desktop_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Desktop') & (dfT['Step Two'] == 'search_page')\nStep_Two_Mobile_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Mobile') & (dfT['Step Two'] == 'search_page')\nStep_Two_Desktop_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Desktop') & (dfT['Step Two'] == 'search_page')\nStep_Two_Mobile_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Mobile') & (dfT['Step Two'] == 'search_page')\n\nStep_Three_Desktop_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Desktop') & (dfT['Step Three'] == 'payment_page')\nStep_Three_Mobile_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Mobile') & (dfT['Step Three'] == 'payment_page')\nStep_Three_Desktop_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Desktop') & (dfT['Step Three'] == 'payment_page')\nStep_Three_Mobile_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Mobile') & (dfT['Step Three'] == 'payment_page')\n\nStep_Four_Desktop_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Desktop') & (dfT['Step Four'] == 'payment_confirmation_page')\nStep_Four_Mobile_Male =(dfT['sex'] == 'Male') & (dfT['device'] == 'Mobile') & (dfT['Step Four'] == 'payment_confirmation_page')\nStep_Four_Desktop_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Desktop') & (dfT['Step Four'] == 'payment_confirmation_page')\nStep_Four_Mobile_Female =(dfT['sex'] == 'Female') & (dfT['device'] == 'Mobile') & (dfT['Step Four'] == 'payment_confirmation_page')\n\ndata_tableTop = [['Phases', 'Desktop Male', 'Mobile Male', 'Desktop Female', 'Mobile Female'],\n               ['Home', Step_One_Desktop_Male.sum(), Step_One_Mobile_Male.sum(), Step_One_Desktop_Female.sum(), Step_One_Mobile_Female.sum()],\n               ['Search',Step_Two_Desktop_Male.sum(), Step_Two_Mobile_Male.sum(), Step_Two_Desktop_Female.sum(), Step_Two_Mobile_Female.sum()],\n               ['Payment', Step_Three_Desktop_Male.sum(), Step_Three_Mobile_Male.sum(), Step_Three_Desktop_Female.sum(), Step_Three_Mobile_Female.sum()],\n               ['Confirmation', Step_Four_Desktop_Male.sum(), Step_Four_Mobile_Male.sum(), Step_Four_Desktop_Female.sum(), Step_Four_Mobile_Female.sum()]]\n\n","4979eeb0":"data_tableTop","434a19f8":"table = ff.create_table(data_tableTop)\niplot(table)","c3ab8cc6":"dfFull = pd.DataFrame(np.array([['Home', 30203, 15122, 29997, 15078], ['Search', 15009, 7515, 15091, 7585], ['Payment', 1480, 1450, 1530, 1570], ['Confirmation', 76, 135, 74, 167]]),\n                            columns=['','Desktop Male', 'Mobile Male', 'Desktop Female', 'Mobile Female'])\n\ndfFull = dfFull.set_index('')\n\n","af892a6e":"dfFull['Desktop Male'] = dfFull['Desktop Male'].astype('int')\ndfFull['Mobile Male'] = dfFull['Mobile Male'].astype('int')\ndfFull['Desktop Female'] = dfFull['Desktop Female'].astype('int')\ndfFull['Mobile Female'] = dfFull['Mobile Female'].astype('int')\n","47c3b424":"dfFull","8f30db07":"colors = ['rgb(63,92,128)', 'rgb(90,131,182)', 'rgb(255,255,255)', 'rgb(127,127,127)']\ntotal = [sum(row[1]) for row in dfFull.iterrows()]\nn_phase, n_seg = dfFull.shape\n\nplot_width = 800\nunit_width = plot_width \/ total[0]\n \nphase_w = [int(value * unit_width) for value in total]\n \n# height of a section and difference between sections \nsection_h = 100\nsection_d = 10\n\n# shapes of the plot\nshapes = []\n \n# plot traces data\ndata = []\n \n# height of the phase labels\nlabel_y = []\n\nheight = section_h * n_phase + section_d * (n_phase-1)\n\n# rows of the DataFrame\ndf_rows = list(dfFull.iterrows())\n\n# iteration over all the phases\nfor i in range(n_phase):\n    # phase name\n    row_name = dfFull.index[i]\n    \n    # width of each segment (smaller rectangles) will be calculated\n    # according to their contribution in the total users of phase\n    seg_unit_width = phase_w[i] \/ total[i]\n    seg_w = [int(df_rows[i][1][j] * seg_unit_width) for j in range(n_seg)]\n    \n    # starting point of segment (the rectangle shape) on the X-axis\n    xl = -1 * (phase_w[i] \/ 2)\n    \n    # iteration over all the segments\n    for j in range(n_seg):\n        # name of the segment\n        seg_name = dfFull.columns[j]\n        \n        # corner points of a segment used in the SVG path\n        points = [xl, height, xl + seg_w[j], height, xl + seg_w[j], height - section_h, xl, height - section_h]\n        path = 'M {0} {1} L {2} {3} L {4} {5} L {6} {7} Z'.format(*points)\n        \n        shape = {\n                'type': 'path',\n                'path': path,\n                'fillcolor': colors[j],\n                'line': {\n                    'width': 1,\n                    'color': colors[j]\n                }\n        }\n        shapes.append(shape)\n        \n        # to support hover on shapes\n        hover_trace = go.Scatter(\n            x=[xl + (seg_w[j] \/ 2)],\n            y=[height - (section_h \/ 2)],\n            mode='markers',\n            marker=dict(\n                size=min(seg_w[j]\/2, (section_h \/ 2)),\n                color='rgba(255,255,255,1)'\n            ),\n            text=\"Segment : %s\" % (seg_name),\n            name=\"Value : %d\" % (dfFull[seg_name][row_name])\n        )\n        data.append(hover_trace)\n        \n        xl = xl + seg_w[j]\n\n    label_y.append(height - (section_h \/ 2))\n\n    height = height - (section_h + section_d)\n    \n    # For phase names\nlabel_trace = go.Scatter(\n    x=[-600]*n_phase,\n    y=label_y,\n    mode='text',\n    text=dfFull.index.tolist(),\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n\ndata.append(label_trace)\n \n# For phase values (total)\nvalue_trace = go.Scatter(\n    x=[600]*n_phase,\n    y=label_y,\n    mode='text',\n    text=total,\n    textfont=dict(\n        color='rgb(200,200,200)',\n        size=15\n    )\n)\n\ndata.append(value_trace)\n\nlayout = go.Layout(\n    title=\"<b>Segmented Funnel Chart<\/b>\",\n    titlefont=dict(\n        size=20,\n        color='rgb(230,230,230)'\n    ),\n    hovermode='closest',\n    shapes=shapes,\n    showlegend=False,\n    paper_bgcolor='rgba(44,58,71,1)',\n    plot_bgcolor='rgba(44,58,71,1)',\n    xaxis=dict(\n        showticklabels=False,\n        zeroline=False,\n    ),\n    yaxis=dict(\n        showticklabels=False,\n        zeroline=False\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","5b861191":"labels = ['Desktop Male', 'Mobile Male', 'Desktop Female', 'Mobile Female']\nvalues = [76, 135, 74, 167]\ncolors = ['rgb(63,92,128)', 'rgb(90,131,182)', 'rgb(255,255,255)']\n\ntrace = go.Pie(labels=labels, values=values,\n               textfont=dict(size=25),\n               marker=dict(colors=colors, \n                           line=dict(color='#000000', width=1)))\n\niplot([trace], filename='styled_pie_chart')","34a5fd82":"<strong><h2 id=\"C6\">Second segmented funnel - By gender and device<\/h2><\/strong>","047817c4":"Wow! This funnel looks nice, but the difference between genders is very small, so... lets make something awesome and lets make a funnel segmented per devices and gender at the same time. Sounds good? Lets prepare the data again.\n<p>As we can see, the ecommerce should focus on the drop between the Search page and the Payment page.<br \/>They should use some strategy in order to hold back the customer and try to not let him go<\/p>","1cc18f55":"<p>Yeah! Right now we can extract some insights. As we can see with the visual impact even if more people enter by desktop, the biggest part of this people drops. <br \/>But, the people who enter by mobile is almost the half in comparasion with the desktop people, but they dont drop as much as the desktop people.<\/p>\n<p>Thats quite interesting, another good point is that more women stays until the end.<\/p>\n<p>Again, the ecommerce should focus in the drop between search and payment<\/p>\n<p>Sadly, in the funnel we can't see the conversion page with visual impact, lets make a pie chart to see how its looks like<\/p>\n","44208f35":"Now i have a table where i can see the different steps of the funnel","e569b13d":"To create the funnel i need a new dataFrame with the values per phase, and that values has to be integer not object","e083572c":"<p>Now i'm gonna make the first funnel. This funnel is gonna be basic.<br \/>In this first step i just want to show you how the differents phases changes the number of retention of the ussers.<\/p>\n<p>The phases are the same as from the dable<\/p>","28b5d6fe":"<strong><h2 id=\"C1\">Data preparation<\/h2><\/strong>","539937fa":"<strong><h2 id=\"C2\">Basic conversion funnel<\/h2><\/strong>","84b268ad":"So, here we can see how Mobile predominates over Desktop.\n\nAnd more womens buy finally the product.\n\n<p>And i want to recall again the the drop between the setp 2 and step 3 is not normal, they should make some CRO and AB Test strategy<\/p>\n\n","e3a2e84c":"<strong><h2 id=\"C3\">Preparing and mergind data for the segmented funnels<\/h2><\/strong>","70355dfd":"<p>Hi there!<\/p>\n<p>Today i want to play with the incredible library Plotly to make some interesting funnels.<\/p>\n<p>Im gonna use the dataSets from Ecommerce websites.<\/p>\n<p>My goal this weekend was develop some graphic funnels and extract some insights.<\/p>\n\n<ul>\n\t<li><a href=\"#C1\">1. Data preparation<\/a><\/li>\n\t<li><a href=\"#C2\">2. Basic conversion funnel<\/a><\/li>\n\t<li><a href=\"#C3\">3. Preparing and mergind data for the segmented funnels<\/a><\/li>\n\t<li><a href=\"#C4\">4. First segmented funnel - By gender<\/a><\/li>\n\t<li><a href=\"#C5\">5. Preparing data for the second segmented funnel<\/a><\/li>\n\t<li><a href=\"#C6\">6. Second segmented funnel - By gender and device<\/a><\/li>\n<\/ul>","a5b842bb":"<strong><h2 id=\"C5\">Preparing data for the second segmented funnel<\/h2><\/strong>","ba8d1622":"At the first moment i want to explore the data and see how many not NaN values have each data set. I want to recall that each data set has only one step of the conversion funnel and they are connected by the user id","00eba0ec":"<strong><h2 id=\"C4\">First segmented funnel - By gender<\/h2><\/strong>","77778047":"<p>As we can see this funnel represent the same thing as we see in the table from above but with more visual impact.<\/p>\n<p>Also, the ecommerce should focus on the drop between the Search page and the Payment page.<br \/>They should use some strategy in order to hold back the customer and try to not let him go<\/p>\n<p>The thing is that this is yet a little bit useless, i want to make a funnel with the variation per gender and device.<\/p>\n<p>Lets make in the first place the segmentation by gender<\/p>\n\n<p>To make that.<br \/>First of all i want to change the name of the columns adding the steps.<br \/>Then in the second place merge the different dataSets where we can have the steps.<br \/>In third place count the values of each step in order to make the famous table of the phases.<\/p>\n\n","325ef8c0":"Once the data is ready, lets run the funnel!"}}