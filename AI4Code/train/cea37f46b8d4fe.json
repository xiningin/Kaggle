{"cell_type":{"337cfa00":"code","e950efb4":"code","629bb64b":"code","40825045":"code","b3e6e540":"code","000fc07d":"code","737eebe7":"code","2c25f280":"code","c673cf20":"code","f7283955":"code","140ed26c":"code","6f857687":"code","8b9de4b9":"code","78b23623":"code","eb3d9ef1":"code","78705b0d":"code","d442990a":"code","4572dadf":"code","c3dc977c":"code","023b0f2b":"code","2d1cfdc0":"code","7f6aa5fb":"code","92dfecc2":"code","a3597df8":"markdown","314fdb97":"markdown"},"source":{"337cfa00":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom skimage import io\nfrom skimage import color\nfrom pathlib import Path\nimport tensorflow as tf\nfrom skimage.transform import resize, rescale, rotate, setup, warp, AffineTransform\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nimport cv2\nfrom numpy import expand_dims\nfrom keras.preprocessing.image import load_img\nfrom keras.preprocessing.image import img_to_array","e950efb4":"#Define Paths\ndata_path = Path('..\/input\/chest-xray-pneumonia\/chest_xray\/')         # Define path for data\ndef path_produce(premiere_path,destination_path):\n  x=\"\"\n  y=\"\"\n  z=\"\"\n  x= premiere_path\/destination_path\n  y= x\/'NORMAL'\n  z= x\/'PNEUMONIA' \n  return x,y,z\n\ntrain_path, normal_train_path, pneumonia_train_path  =  path_produce(data_path, 'train')               # Define paths for train set data, normal and pneumonia (train) set data\nvalidation_path, normal_validation_path, pneumonia_validation_path  =  path_produce(data_path, 'val')  # Define paths for validation set data, normal and pneumonia (Validation) set data\ntest_path, normal_test_path, pneumonia_test_path  =  path_produce(data_path, 'test')                   # Define paths for test set data, normal and pneumonia (test) set data\n\n\ndef get_images(normal_images_path,pneumonia_images_path): \n  return normal_images_path.glob('*.jpeg') ,pneumonia_images_path.glob('*.jpeg') \n\nnormal_train_data, pneumonia_train_data  = get_images(normal_train_path, pneumonia_train_path)                     #Get all normal and pneumonia images of the train set\nnormal_validation_data, pneumonia_validation_data  = get_images(normal_validation_path, pneumonia_validation_path) #Get all normal and pneumonia images of the validation set\nnormal_test_data, pneumonia_test_data  = get_images(normal_test_path, pneumonia_test_path)                         #Get all normal and pneumonia images of the test set","629bb64b":"# labeling of datasets\ndef labeling_images(n_data,p_data):\n  normal_data = pd.DataFrame(n_data, columns=['X_rayImage'],index=None)\n  normal_data['pneumonia'] = '0'\n  pneumonia_data = pd.DataFrame(p_data , columns=['X_rayImage'],index=None)\n  pneumonia_data['pneumonia'] = '1'\n  d = [normal_data,pneumonia_data]\n  data = pd.concat(d)\n  return  data, normal_data, pneumonia_data\n\nprint(normal_train_data)\ntrain_data, normal_train_data, pneumonia_train_data = labeling_images(normal_train_data,pneumonia_train_data)\n\nvalidation_data, normal_validation_data, pneumonia_validation_data= labeling_images(normal_validation_data,pneumonia_validation_data)\n\ntest_data,normal_test_data, pneumonia_test_data = labeling_images(normal_test_data,pneumonia_test_data)","40825045":"# shuffle datasets\ntrain_data = train_data.sample(frac=1.).reset_index(drop=True)\nvalidation_data = validation_data.sample(frac=1.).reset_index(drop=True)\ntest_data = test_data.sample(frac=1.).reset_index(drop=True)\n\n#Print first five rows of train set\ntrain_data.head()","b3e6e540":"# Find number of data in each data set\nprint(\"Before preprocessing:\")\nprint(\"train_data.shape\", train_data.shape,\"test_data.shape\", test_data.shape, \"validation_data.shape\", validation_data.shape)\nd = [train_data,validation_data]\ndata= pd.concat(d)\nX = data.X_rayImage;\ny = data.pneumonia;\n\n\n# Combine validation dataset and train dataset, and split the combined data set in two data sets: 90% data for train dataset and 10% data for validation data set\n# Reason for combining these datasets: validation dataset is too small\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, random_state=1)\ndf1 = {'X_rayImage': X_train, 'pneumonia': y_train}\ntrain_data = pd.DataFrame(df1,index=None)\n\ndf2 = {'X_rayImage': X_val, 'pneumonia': y_val}\nvalidation_data = pd.DataFrame(df2,index=None)\ntrain_data.head()\nprint(\"After preprocessing:\")\nprint(\"train_data.shape\", train_data.shape,\"test_data.shape\", test_data.shape, \"validation_data.shape\", validation_data.shape)\n","000fc07d":"# Find number of each class in train set\n\ntrain = train_data.pneumonia.value_counts()\nprint(\"Number of pneumonia and normal cases in train data:\\n\",train)\nplt.figure(figsize=[6,6])\nplt.pie(train, labels = ['Pnemunia','Normal'], counterclock=False,autopct='%1.0f%%');\nplt.axis(\"square\");","737eebe7":"# Find number of each class in test set\n\ntest = test_data.pneumonia.value_counts()\nprint(\"Number of pneumonia and normal cases in test data set:\\n\",test)\nplt.figure(figsize=[6,6])\nplt.pie(test, labels = ['Pnemunia','Normal'], counterclock=False,autopct='%1.0f%%');\nplt.axis(\"square\");","2c25f280":"# Find number of each class in ]validation set\n\nvalidation = validation_data.pneumonia.value_counts()\nprint(\"Number of pneumonia and normal cases in validation data set:\\n\",validation)\nplt.figure(figsize=[6,6])\nplt.pie(validation, labels = ['Pnemunia','Normal'], counterclock=False,autopct='%1.0f%%');\nplt.axis(\"square\");","c673cf20":"# plot intensity of pixels of 5 images\nfor i in range(3):\n  plt.xlabel(\"Pixel values\")\n  plt.ylabel(\"Intensity distribution of an image\")\n  plt.title(\"Image{}\".format(i+1))\n  a = train_data['X_rayImage'].iloc[i]\n  img = io.imread(a,1)\n  plt.hist(img.ravel())\n  plt.show()","f7283955":"# Plot some of samples for Normal and Pneumonia classes\n\nf,ax = plt.subplots(2,4, figsize=(20,10))\nfor i in range(4):\n  img_normal = io.imread(normal_train_data['X_rayImage'].iloc[i])\n  img_normal= resize(img_normal, (512,512))\n\n  ax[0,i].imshow(img_normal,cmap='gray')\n  ax[0,i].set_xlabel('Normal case')\n  img_pneumonia = io.imread(pneumonia_train_data['X_rayImage'].iloc[i])\n  img_pneumonia= resize(img_pneumonia, (512,512))\n\n  ax[1,i].imshow(img_pneumonia,cmap='gray')\n  ax[1,i].set_xlabel('Pneumonia case')\n","140ed26c":"# Preprocessing object\n#####Note: I have done rescaling  (rescale = 1\/255), but here only to plot augmented images, I assumed rescale=1\n\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    featurewise_center=False, samplewise_center=False,\n    featurewise_std_normalization=False, samplewise_std_normalization=False,\n    zca_whitening=False, zca_epsilon=1e-06, rotation_range=10, width_shift_range=0.1,\n    height_shift_range=0.1, brightness_range=None, shear_range=0.1, zoom_range=0.1,\n    channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=True,\n    vertical_flip=True, rescale=1, preprocessing_function=None,\n    data_format=None, validation_split=0.0, dtype=None\n)\nplt.figure(figsize=[10,10])\nimg = img_to_array(load_img(normal_train_data['X_rayImage'].iloc[0]))\naugmented_images = expand_dims(img, 0)\nit = datagen.flow(augmented_images, batch_size=1)\nfor i in range(9):\n\tplt.subplot(330 + 1 + i)\n\tbatch = it.next()\n\timage = batch[0].astype('uint8')\n\tplt.imshow(image)\nplt.show()\n\nimg0 = load_img(normal_train_data['X_rayImage'].iloc[0])\nplt.figure(figsize=[5,5])\nplt.imshow(img0)","6f857687":"# Parameters\nIMG_SIZE = 256  # Image size\nBATCH_SIZE = 16\n\n# Preprocessing object\nidg = tf.keras.preprocessing.image.ImageDataGenerator(\n    featurewise_center=False, samplewise_center=False,\n    featurewise_std_normalization=False, samplewise_std_normalization=False,\n    zca_whitening=False, zca_epsilon=1e-06, rotation_range=10, width_shift_range=0.1,\n    height_shift_range=0.1, brightness_range=None, shear_range=0.1, zoom_range=0.1,\n    channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=True,\n    vertical_flip=True, rescale=1\/255.0, preprocessing_function=None,\n    data_format=None, validation_split=0.0, dtype=None\n)\n\n# Turn values to strings as a requirement for flow_from_dataframe\ntrain_data['X_rayImage'] = train_data['X_rayImage'].astype(\"string\")\nvalidation_data['X_rayImage'] = validation_data['X_rayImage'].astype(\"string\")\ntest_data['X_rayImage'] = test_data['X_rayImage'].astype(\"string\")\n\n# Create train generator\ntrain_gen = idg.flow_from_dataframe(dataframe= train_data,\n                                         directory=None, \n                                         x_col = 'X_rayImage',\n                                         y_col = 'pneumonia',\n                                         class_mode = 'binary',\n                                         color_mode = 'grayscale',\n                                         target_size = (IMG_SIZE,IMG_SIZE), \n                                         batch_size = BATCH_SIZE,\n                                         shuffle = True,\n                                         )\n\n# Create test generator\nvalidation_gen = idg.flow_from_dataframe(dataframe= validation_data, \n                                         directory=None, \n                                         x_col = 'X_rayImage',\n                                         y_col = 'pneumonia',\n                                         class_mode = 'binary',\n                                         color_mode = 'grayscale',\n                                         target_size = (IMG_SIZE,IMG_SIZE), \n                                         batch_size = BATCH_SIZE,\n                                         shuffle = False,\n                                         )\n\n# Create test generator\ntest_gen = idg.flow_from_dataframe(dataframe= test_data, \n                                         directory=None, \n                                         x_col = 'X_rayImage',\n                                         y_col = 'pneumonia',\n                                         class_mode = 'binary',\n                                         color_mode = 'grayscale',\n                                         target_size = (IMG_SIZE,IMG_SIZE), \n                                         batch_size = BATCH_SIZE,\n                                         shuffle = False,\n                                         )","8b9de4b9":"from keras.models import Sequential\nfrom keras.layers import Input, Dense, Conv2D, MaxPool2D, Dropout, Flatten, BatchNormalization\n\n# Params\nbase_kernel_size = 32\n\n# Initiate model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Input(shape=(IMG_SIZE,IMG_SIZE, 1)))\n\n# Conv layers\n# Block 1\nmodel.add(Conv2D(base_kernel_size, 3, padding='same', activation='relu'))\nmodel.add(Conv2D(base_kernel_size, 3, padding='same', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n# Block 2\nmodel.add(Conv2D(2 * base_kernel_size, 3, padding='same', activation='relu'))\nmodel.add(Conv2D(2 * base_kernel_size, 3, padding='same', activation='relu'))\n# model.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n# Block 3\nmodel.add(Conv2D(4 * base_kernel_size, 3, padding='same', activation='relu'))\nmodel.add(Conv2D(4 * base_kernel_size, 3, padding='same', activation='relu'))\n# model.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\n\n# # Block 4\n# model.add(Conv2D(8 * base_kernel_size, 3, padding='same', activation='relu'))\n# model.add(Conv2D(8 * base_kernel_size, 3, padding='same', activation='relu'))\n# # model.add(BatchNormalization())\n# model.add(MaxPool2D(pool_size=(2, 2)))\n\n# # Block 5\n# model.add(Conv2D(16 * base_kernel_size, 3, padding='same', activation='relu'))\n# model.add(Conv2D(16 * base_kernel_size, 3, padding='same', activation='relu'))\n# # model.add(BatchNormalization())\n# model.add(MaxPool2D(pool_size=(2, 2)))\n\n# FC layers\nmodel.add(Flatten())\n\n# model.add(Dense(512, activation='relu'))\n# model.add(BatchNormalization())\n# model.add(Dropout(0.5))\n\nmodel.add(Dense(128, activation='relu'))\n# model.add(BatchNormalization())\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(1, activation='sigmoid'))","78b23623":"# Metrics & Model Compilation\naccuracy = tf.keras.metrics.BinaryAccuracy(\n    name='binary_accuracy', dtype=None, threshold=0.5\n)\n\nrecall = tf.keras.metrics.Recall(\n    thresholds=None, top_k=None, class_id=None, name='recall', dtype=None\n)\n\nprecision = tf.keras.metrics.Precision(\n    thresholds=None, top_k=None, class_id=None, name='precision', dtype=None\n)\n\nmodel.compile(loss='binary_crossentropy', \n              optimizer='Adamax', \n              metrics=[accuracy, recall, precision])","eb3d9ef1":"#Train Model\nfrom keras.models import load_model\n\nTRAINING = True\nNUM_EPOCHS = 30\n# model_path = '\/content\/drive\/MyDrive\/Project_Colab\/Pneumonia_detection\/my_model.h5'\n\n# if TRAINING:\nclass_weight = {0: 1, 1: 0.26}\nr = model.fit(train_gen, \n            epochs=NUM_EPOCHS, \n            validation_data=validation_gen,\n            validation_steps=len(validation_gen),\n            steps_per_epoch=None, \n            class_weight=class_weight)\n   \n#   model.save(model_path)\n\n# else:\n\n  # returns a compiled model\n  # identical to the previous one\n#   model = load_model(model_path, compile=True)","78705b0d":"# Accuracy of train and validation set\nplt.plot(r.history['binary_accuracy'])\nplt.plot(r.history['val_binary_accuracy'])\nplt.legend(['train', 'validation'], loc='upper left')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')","d442990a":"# loss of train and validation set\nplt.plot(r.history['loss'])\nplt.plot(r.history['val_loss'])\nplt.legend(['train', 'validation'], loc='upper left')\nplt.ylabel('Loss')\nplt.xlabel('epoch')","4572dadf":"# Recall of train and validation set\nplt.plot(r.history['recall'])\nplt.plot(r.history['val_recall'])\nplt.legend(['train', 'validation'], loc='upper left')\nplt.ylabel('Recall')\nplt.xlabel('epoch')","c3dc977c":"# Precision of train and validation set\nplt.plot(r.history['precision'])\nplt.plot(r.history['val_precision'])\nplt.legend(['train', 'validation'], loc='upper left')\nplt.ylabel('precision')\nplt.xlabel('epoch')","023b0f2b":"num_test_batchs = len(iter(test_gen))\naccuracy = tf.keras.metrics.BinaryAccuracy()\n\npred_list = []\nlabel_list = []\n\nfor i in range(num_test_batchs):\n  image, label = test_gen[i]\n  out_model = model.predict(\n    image, batch_size=None, verbose=0, steps=None, callbacks=None, max_queue_size=10,\n    workers=1, use_multiprocessing=False\n    )\n  pred_bool = tf.math.greater(out_model, 0.5, name=None)\n  pred = tf.dtypes.cast(pred_bool, tf.int32)\n  pred_list.append(pred)\n  label_list.append(label)","2d1cfdc0":"# Flatten arrays\ny_predict = np.asarray(pred_list).flatten()\ny_test = np.asarray(label_list).flatten()","7f6aa5fb":"#Results\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score,f1_score,precision_score,recall_score\nprint(\"confusion_matrix\", confusion_matrix(y_test,y_predict))\nprint(\"Accuracy\", accuracy_score(y_test, y_predict))\nprint(\"F1_Score\", f1_score(y_test,y_predict, average = 'macro'))\nprint(\"Precision:\",precision_score(y_test, y_predict,average='macro'))\nprint(\"recall\",recall_score(y_test, y_predict,average='macro'))","92dfecc2":"#print summary of model\nmodel.summary()","a3597df8":"# Pneumonia detection methods:\n\n\n\n![Screen%20Shot%202021-01-10%20at%208.42.21%20PM.png](attachment:Screen%20Shot%202021-01-10%20at%208.42.21%20PM.png)\n","314fdb97":"# What is Pneumonia?\n* An infection inflammation of air sacs in one or both lungs caused by viruses, fungi, bacteria. \n* The second leading reason for hospitalization of medicare beneficiaries.\u00a0\n* 2017: 1.3 million people were diagnosed with pneumonia.\n* Mortality: About 50,000 people each year in the United States.\n* The mortality rate for severe pneumonia: as high as 20%.\n[[1]](https:\/\/\/www.cdc.gov\/dotw\/pneumonia\/index.html)\n[[2]](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC4612842\/)\n\n\nFig1: (a) Pneumonia affecting part of the left lung (b) Normal alveoli (c) Alveoli with Pneumonia\n[[3]](https:\/\/www.nhlbi.nih.gov\/health-topics\/pneumonia)\n\n\n![3](https:\/\/www.nhlbi.nih.gov\/sites\/default\/files\/inline-images\/pneumonia.png)\n"}}