{"cell_type":{"e5e36300":"code","e491dcc0":"code","63503c13":"code","5792c94d":"code","f33e20e3":"code","1130d7a6":"code","7c35b32b":"code","3ef8c785":"code","7441fd14":"code","8a46377f":"code","632ebef4":"code","36866de5":"code","5b99d7ed":"markdown","12a9501c":"markdown","241a7df1":"markdown","ca05e672":"markdown","634f9e31":"markdown","ffe74c32":"markdown"},"source":{"e5e36300":"import numpy as np\nimport pandas as pd \nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nimport xgboost","e491dcc0":"SEED = 42\nEARLY_STOP_NUM = 5 \nDATA_NUM = 10000 # row number \nCOL_NUM = 20 #column number \n\nSAVE_CVS_FILE_NAME = \"oof_test_data.csv\"","63503c13":"np.random.seed(SEED)\nX = np.random.rand(DATA_NUM, COL_NUM) - 0.5\ny = 3*X[:, 0]**2 + 0.05 * np.random.randn(DATA_NUM)","5792c94d":"new_data = np.append(X,y.reshape(-1,1),axis=1)\ndf = pd.DataFrame(new_data)\n\n\nnew_col = []\ni = 1\nfor col in df.columns:\n    if i ==  len(df.columns):\n        new_col.append(\"target\")\n    else :\n        new_col.append(\"col\" + str(i))\n        \n    i += 1\n    \ndf.columns = new_col\n\ndf.to_csv(SAVE_CVS_FILE_NAME,index=False)","f33e20e3":"X = pd.DataFrame(X)\ny = pd.DataFrame(y)","1130d7a6":"X[:5]","7c35b32b":"y[:5]","3ef8c785":"X_train_val, X_test, y_train_val, y_test = train_test_split(X, y, random_state=SEED)\nX_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, random_state=SEED)","7441fd14":"xgb_reg = xgboost.XGBRegressor(random_state=SEED)\nxgb_reg.fit(X_train, y_train,eval_set=[(X_val, y_val)], early_stopping_rounds=EARLY_STOP_NUM)\ny_pred = xgb_reg.predict(X_val)\nval_error = mean_squared_error(y_val, y_pred,squared=False)  \nprint(\"Validation RMSE:\", val_error)         ","8a46377f":"# import module we'll need to import our custom module\nfrom shutil import copyfile\n\n# copy our file into the working directory (make sure it has .py suffix)\ncopyfile(src = \"..\/input\/shuffle-split-oof-py\/function_shufflesplit_oof.py\", dst = \"..\/working\/function_shufflesplit_oof.py\")\n\nfrom function_shufflesplit_oof import *","632ebef4":"def custom_rmse(y1,y2):\n    return mean_squared_error(y1,y2,squared=False)","36866de5":"NFOLD = 5\npred_test = shuffleSplitOOF(NFOLD,X,y,X_test,xgb_reg,custom_rmse)\npred_test[:10]","5b99d7ed":"# Regression OOF ","12a9501c":"# make data","241a7df1":"# global variables","ca05e672":"# split train set and validation set","634f9e31":"# get best xgb model ","ffe74c32":"# import libraries"}}