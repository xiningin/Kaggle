{"cell_type":{"1dffb366":"code","66a4f866":"code","0819eb48":"code","354d7ca7":"code","eecd5ecc":"code","894a87f4":"code","230d2e22":"code","317033dd":"code","9118d675":"code","9d1eadc6":"code","6c26b7ec":"code","177070c2":"code","2d49fd9c":"code","73b4c753":"code","cf2e8fa1":"code","8bfb9d0b":"code","92acc149":"code","af34c643":"code","c8312c9f":"code","274e8c26":"code","1e51b2be":"code","a056327e":"code","bf99a006":"code","b61d7139":"code","b298e5bd":"code","30ff212c":"code","e65cefb7":"code","600b8353":"code","cbe51f79":"code","3a266925":"code","6793cdd7":"code","3258d18a":"code","82fb92fb":"code","9f59e32d":"code","2c970330":"code","023dbef4":"code","fe13a8f3":"code","a820e067":"code","99cd9788":"code","067da4ed":"code","c8ebfe1b":"code","1f4e3eae":"code","44cd284f":"code","22ae0c1a":"code","45e66ec7":"code","3f7de3d1":"code","2344c6fa":"code","ba077555":"code","9fe36e4a":"code","c7edaed1":"code","e54237da":"code","2ee05454":"code","1b8b1cf3":"markdown","c27a4486":"markdown","7ba69f2a":"markdown","eb4cee5a":"markdown","90f4b21f":"markdown","2c76b6e9":"markdown","6bf9dfcf":"markdown","07ae6149":"markdown","9b0c6514":"markdown","554432b8":"markdown","507d1722":"markdown","80305db6":"markdown","2597beb7":"markdown","f504d5bf":"markdown","b68c44d9":"markdown","8ef3c954":"markdown","4c187e31":"markdown","74a34261":"markdown","395612d9":"markdown","15455468":"markdown","b81e1ea7":"markdown","4d78d7dc":"markdown","605aa7e8":"markdown","66ed3fd7":"markdown","0fe2ec85":"markdown","311b36d9":"markdown","cabd567f":"markdown","7347ae03":"markdown","ee2608e4":"markdown","2ab64fb8":"markdown","751ae1c5":"markdown","1a399dc9":"markdown","724fbe10":"markdown","2a80e479":"markdown","fbff8d91":"markdown","2b83ea12":"markdown","b8db6f4f":"markdown","a204c180":"markdown","9b68bc71":"markdown","ed1a8667":"markdown","1d41f3dc":"markdown","a92a11ca":"markdown","72586c62":"markdown","5b08eedb":"markdown","50ddb319":"markdown","db80be27":"markdown","cf37e12f":"markdown","039840a0":"markdown","f4271061":"markdown","ec6935c9":"markdown","850d8b14":"markdown"},"source":{"1dffb366":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight') # For plots\nplt.rcParams['figure.figsize'] = (10, 8)\nimport numpy as np # linear algebra\nimport os\nimport glob\nimport pydicom","66a4f866":"test = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/sample_submission.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv\")\ntrain_dir = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/\"\ntest_dir = \"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test\/\"","0819eb48":"# lets check dimensions of the train and test datasets\ntrain.shape, test.shape,sub.shape","354d7ca7":"# check training data\ntrain.head()","eecd5ecc":"# check test dataset\ntest","894a87f4":"# sample submission\nsub.head()","230d2e22":"# check for null values\ntrain.isnull().sum()","317033dd":"# n\u00ba of unique patients in the traiing dataset\ntrain.Patient.nunique()","9118d675":"# distribution plot for FVC\nsns.distplot(train.FVC, hist = False,color = \"darkred\")\nplt.title(\"FVC Distribution\")","9d1eadc6":"df =  train.groupby(\"Patient\").count()[\"Weeks\"].value_counts()\ndf","6c26b7ec":"# lets check the n\u00ba of males\/females in the dataset\nsizes =  [len(train[train.Sex == \"Male\"]),len(train[train.Sex == \"Female\"])]\nexplode = (0.1,0)  # explode 1st slice\ncolors = ['Green',\"Cyan\"]\nplt.pie(sizes, explode=explode, labels=train.Sex.unique(), colors=colors,autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.title(\"Pie Chart for Gender Distribution\")\nplt.show()","177070c2":"# checking smoking status \ntrain.SmokingStatus.value_counts()","2d49fd9c":"# lets check smoking distribution\ntrain.SmokingStatus.unique()\nsizes =  [len(train[train.SmokingStatus == \"Ex-smoker\"]),len(train[train.SmokingStatus == \"Currently smokes\"]),len(train[train.SmokingStatus == \"Never smoked\"])]\nexplode = (0,0,0.1)\ncolors = ['Cyan',\"Green\",\"Red\"]\nplt.pie(sizes, explode=explode, labels=train.SmokingStatus.unique(), colors=colors,autopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.title(\"Pie Chart for SmokingStatus Distribution\")\nplt.show()","73b4c753":"train.Age.min(),train.Age.max()","cf2e8fa1":"f, (ax1, ax2) = plt.subplots(1, 2, figsize = (16, 6))\n\n# Patient age group\nageGroupLabel = 'Below 60', '60-70', '70-80', 'Above 80'\n\nbelow60 = len(train[train.Age<60])\nsixty_to_seventy = len(train[(train['Age']>=60) & (train['Age']<= 70)])\nseventy_to_eighty = len(train[(train['Age']>70) & (train['Age']<= 80)])\nabove80 = len(train[train.Age>80])\n\n# Number of Guests expected in age group\npatientNumbers     = [below60, sixty_to_seventy, seventy_to_eighty,above80] \n\nexplode = (0, 0, 0, 0.1)\ncolors  = (\"green\",\"indigo\",\"blue\", \"red\")\n\n# Draw the pie chart\nax1.pie(patientNumbers,explode = explode,colors = colors,labels = ageGroupLabel,autopct = '%1.2f',startangle = 90)\n\n# Aspect ratio\nax1.axis('equal')\n\n\n# distribution plot for Age\nsns.distplot(train.Age, hist = False, color = \"indigo\")\nplt.suptitle(\"Age Distribution\")\n\nplt.show()","8bfb9d0b":"train.Weeks.min(),train.Weeks.max()","92acc149":"# Patient age group\n\nbelow10 = len(train[train.Weeks<10])\neleven_20 = len(train[(train['Weeks']>=11) & (train['Weeks']<= 20)])\ntwentyone_30 = len(train[(train['Weeks']>20) & (train['Weeks']<= 30)])\nthirtyone_40 = len(train[(train['Weeks']>30) & (train['Weeks']<= 40)])\nfortyone_50 = len(train[(train['Weeks']>40) & (train['Weeks']<= 50)])\nfiftyone_60 = len(train[(train['Weeks']>50) & (train['Weeks']<= 60)])\nsixtyone_70 = len(train[(train['Weeks']>60) & (train['Weeks']<= 70)])\nseventyone_80 = len(train[(train['Weeks']>70) & (train['Weeks']<= 80)])\neightyone_90 = len(train[(train['Weeks']>80) & (train['Weeks']<= 90)])\nninetyone_100 = len(train[(train['Weeks']>90) & (train['Weeks']<= 100)])\nhundredone_110 = len(train[(train['Weeks']>100) & (train['Weeks']<= 110)])\nhundredten_120 = len(train[(train['Weeks']>110) & (train['Weeks']<= 120)])\nabove120 = len(train[train.Weeks>120])\n\nsizes = [below10, eleven_20, twentyone_30, thirtyone_40, fortyone_50, fiftyone_60,sixtyone_70,seventyone_80,eightyone_90,ninetyone_100,hundredone_110,hundredten_120,above120]\nlabels =  'below10','eleven_20', 'twentyone_30', 'thirtyone_40', 'fortyone_50', 'fiftyone_60','sixtyone_70','seventyone_80','eightyone_90','ninetyone_100','hundredone_110','hundredten_120','above120'\n\n\nfig1, (ax1, ax2)= plt.subplots(1,2,figsize=(15, 10))\n\ntheme = plt.get_cmap('prism')\nax1.set_prop_cycle(\"color\", [theme(1. * i \/ len(sizes)) for i in range(len(sizes))])\n\n_, _ = ax1.pie(sizes, startangle=90)\n\nax1.axis('equal')\n\ntotal = sum(sizes)\nax1.legend(\n    loc='upper left',\n    labels=['%s, %1.1f%%' % (\n        l, (float(s) \/ total) * 100) for l, s in zip(labels, sizes)],\n    prop={'size': 11},\n    bbox_to_anchor=(0.0, 1),\n    bbox_transform=fig1.transFigure\n)\n\n# distribution plot for Weeks\nsns.distplot(train.Weeks, hist = False, color = \"indigo\")\nplt.suptitle(\"Weeks Distribution\")\n\nplt.show()","af34c643":"# heat map\ncorrMatrix = train.corr()\nmask = np.triu(corrMatrix)\nsns.heatmap(corrMatrix,\n            annot=True,\n            fmt='.1f',\n            cmap='coolwarm',            \n            mask=mask,\n            linewidths=1,\n            cbar=False)\nplt.show()","c8312c9f":"# Pair plot\nsns.pairplot(train)","274e8c26":"sns.pairplot(train,hue=\"SmokingStatus\")\nplt.show()","1e51b2be":"sns.pairplot(train,hue=\"Sex\")\nplt.show()","a056327e":"df_0 = train[train.Patient == train.Patient[0]]\nsns.pairplot(df_0)\nplt.show()","bf99a006":"df_1 = train[train.Patient == train.Patient[1]]\nsns.pairplot(df_1)\nplt.show()","b61d7139":"df_2 = train[train.Patient == train.Patient[2]]\nsns.pairplot(df_2)\nplt.show()","b298e5bd":"# lets group Male & Female data\ngrp = train.groupby(\"Sex\")\n\n# draw a plot to display mean of FVC for Males and Females\nsplot = sns.barplot(x=train.Sex.unique(),y= grp[\"FVC\"].mean())\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n\nplt.xlabel(\"Sex\",fontsize = 30)\nplt.ylabel(\"Mean FCV\",fontsize = 30)\nplt.title (\"FVC Mean for Male Vs Female\",fontsize = 30) \nplt.show()","30ff212c":"# lets create groupwise data for different categories of smoking status\ngrp = train.groupby(\"SmokingStatus\")\n\n# draw a barplot for different smoking categories vs mean FVC for individual categories\nsplot  = sns.barplot(x=train.SmokingStatus.unique(),y= grp[\"FVC\"].mean())\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n\nplt.xlabel(\"Smoking Status\",fontsize = 30)\nplt.ylabel(\"Mean FCV\",fontsize = 30)\nplt.title (\"FVC Mean for different Smoking Categories\",fontsize = 30) \nplt.show()","e65cefb7":"plt.figure(figsize=(12,8))\n# lets create bins for weeks\ntrain[\"Weeks_Bins\"] = pd.cut(train[\"Weeks\"], 13, duplicates = 'drop') # creating bins     \n\n# group the data for the bins created above\ngrp = train.groupby(\"Weeks_Bins\")\n\n# draw a barplot for different weeks bins and mean FVC\nsplot = sns.barplot(x=train.Weeks_Bins.unique(),y= grp[\"FVC\"].mean())\nsplot.set_xticklabels(splot.get_xticklabels(),rotation = 45)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n\nplt.xlabel(\"Weeks Bins\",fontsize = 30)\nplt.ylabel(\"Mean FCV\",fontsize = 30)\nplt.title (\"FVC Mean for different Weeks Bins\",fontsize = 30) \nplt.show()","600b8353":"train[\"Age_Bins\"] = pd.cut(train[\"Age\"], 4, duplicates = 'drop') # creating bins     \ngrp = train.groupby(\"Age_Bins\")\nsplot = sns.barplot(x=train.Age_Bins.unique(),y= grp[\"FVC\"].mean())\nsplot.set_xticklabels(splot.get_xticklabels(),rotation = 45)\n\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\n\nplt.xlabel(\"Age Bins\",fontsize = 30)\nplt.ylabel(\"Mean FCV\",fontsize = 30)\nplt.title (\"FVC Mean for different Age Bins\",fontsize = 30) \nplt.show()","cbe51f79":"p_id = list(train.Patient.sample(3))\np_id","3a266925":"# lets draw a plot for a random patient, we will check how its FVC varies as value of Weeks is changed\nplt.plot(train[train.Patient == p_id[0]].Weeks,train[train.Patient == p_id[0]].FVC,color = \"darkblue\")\n\nplt.xlabel(\"Weeks\",fontsize = 30)\nplt.ylabel(\"FCV\",fontsize = 30)\ntitle = \"FVC for patient:\"+ p_id[0]\nplt.title (title,fontsize = 25) \nplt.show()","6793cdd7":"# lets draw a plot for a random patient, we will check how its FVC varies as value of Weeks is changed\nplt.plot(train[train.Patient == p_id[1]].Weeks,train[train.Patient == p_id[1]].FVC, color = \"darkgreen\")\n\nplt.xlabel(\"Weeks\",fontsize = 30)\nplt.ylabel(\"FCV\",fontsize = 30)\ntitle = \"FVC for patient:\"+ p_id[1]\nplt.title (title,fontsize = 25)  \nplt.show()","3258d18a":"# lets draw a plot for a random patient, we will check how its FVC varies as value of Weeks is changed\nplt.plot(train[train.Patient == p_id[2]].Weeks,train[train.Patient == p_id[2]].FVC,color = \"purple\")\n\nplt.xlabel(\"Weeks\",fontsize = 30)\nplt.ylabel(\"FCV\",fontsize = 30)\ntitle = \"FVC for patient:\"+ p_id[2]\nplt.title (title,fontsize = 25) \nplt.show()","82fb92fb":"# review training directory\np_sizes = [] # list of no. of dcm files present for each patientx\n\nfor d in os.listdir(train_dir):\n    print(\"Patient '{}' has {} scans\".format(d, len(os.listdir(train_dir + d))))\n    p_sizes.append(len(os.listdir(train_dir + d)))\n\nprint('----')\nprint('Total patients {} Total DCM files {}'.format(len(os.listdir(train_dir)), \n                                                      len(glob.glob(train_dir+ \"\/*\/*.dcm\"))))","9f59e32d":"# lets visualize trainig data\np = sns.color_palette()\nplt.hist(p_sizes, color=p[2])\nplt.ylabel('Number of patients')\nplt.xlabel('Count of DICOM files')\nplt.title('Histogram of DICOM count per patient - Training Data')","2c970330":"# review test directory\np_sizes = [] # list of no. of dcm files present for each patientx\n\nfor d in os.listdir(test_dir):\n    print(\"Patient '{}' has {} scans\".format(d, len(os.listdir(test_dir + d))))\n    p_sizes.append(len(os.listdir(test_dir + d)))\n\nprint('----')\nprint('Total patients {} Total DCM files {}'.format(len(os.listdir(test_dir)), \n                                                      len(glob.glob(test_dir+ \"\/*\/*.dcm\"))))","023dbef4":"# lets visualize image distribution per patient\nplt.hist(p_sizes, color=p[3])\nplt.ylabel('Number of patients')\nplt.xlabel('Count of DICOM files')\nplt.title('Histogram of DICOM count per patient - Test Data')","fe13a8f3":"sizes = [os.path.getsize(dcm)\/1000000 for dcm in glob.glob(train_dir+ \"\/*\/*.dcm\")]\nprint('DCM file sizes: min {:.3}MB max {:.3}MB avg {:.3}MB std {:.3}MB'.format(np.min(sizes), \n                                                       np.max(sizes), np.mean(sizes), np.std(sizes)))","a820e067":"# read a dcm file for patient ID00368637202296470751086\ndcm = '\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00368637202296470751086\/270.dcm'\nprint('Filename: {}'.format(dcm))\ndcm = pydicom.read_file(dcm)","99cd9788":"print(dcm)","067da4ed":"# display the image read above\nimg = dcm.pixel_array\nimg[img == -2000] = 0\n\nplt.axis('off')\nplt.imshow(img)\nplt.show()\n\nplt.axis('off')\nplt.imshow(-img) # Invert colors with -\nplt.show()","c8ebfe1b":"# helper function\ndef dicom_to_image(filename):\n    dcm = pydicom.read_file(filename)\n    img = dcm.pixel_array\n    img[img == -2000] = 0\n    return img","1f4e3eae":"# lets display some 20 images at random\nfiles = glob.glob(train_dir + \"\/*\/*.dcm\")\n\nf, plots = plt.subplots(4, 5, sharex='col', sharey='row', figsize=(10, 8))\nfor i in range(20):\n    plots[i \/\/ 5, i % 5].axis('off')\n    plots[i \/\/ 5, i % 5].imshow(dicom_to_image(np.random.choice(files)), cmap=plt.cm.bone)","44cd284f":"# function to sort patients dcm images\ndef get_slice_location(dcm):\n    return float(dcm[0x0020, 0x1041].value)\n\n# Returns a list of images for that patient_id, in ascending order of Slice Location\ndef load_patient(patient_id):\n    files = glob.glob(train_dir + patient_id + \"\/*.dcm\")\n    imgs = {}\n    for f in files:\n        dcm = pydicom.read_file(f)\n        img = dcm.pixel_array\n        img[img == -2000] = 0\n        sl = get_slice_location(dcm)\n        imgs[sl] = img\n        \n    # Not a very elegant way to do this\n    sorted_imgs = [x[1] for x in sorted(imgs.items(), key=lambda x: x[0])]\n    return sorted_imgs\n","22ae0c1a":"# display  all dcm images for patient ID00210637202257228694086\npat = load_patient('ID00210637202257228694086')\nf, plots = plt.subplots(31, 10, sharex='all', sharey='all', figsize=(10, 31))\nfor i in range(303):\n    plots[i \/\/ 10, i % 10].axis('off')\n    plots[i \/\/ 10, i % 10].imshow(pat[i], cmap=plt.cm.bone)","45e66ec7":"# display  all dcm images for patient ID00368637202296470751086\npat = load_patient('ID00368637202296470751086')\nf, plots = plt.subplots(35, 10, sharex='all', sharey='all', figsize=(10, 35))\nfor i in range(341):\n    plots[i \/\/ 10, i % 10].axis('off')\n    plots[i \/\/ 10, i % 10].imshow(pat[i], cmap=plt.cm.bone)","3f7de3d1":"# display  all dcm images for patient ID00169637202238024117706\npat = load_patient('ID00169637202238024117706')\nf, plots = plt.subplots(12, 10, sharex='all', sharey='all', figsize=(10, 12))\nfor i in range(115): \n    plots[i \/\/ 10, i % 10].axis('off')\n    plots[i \/\/ 10, i % 10].imshow(pat[i], cmap=plt.cm.bone)","2344c6fa":"import matplotlib.animation as animation\nfrom IPython.display import HTML","ba077555":"# stack up all the 2D slices to make up a 3D volume\ndef load_scan(patient_name):\n    \n    patient_directory = sorted(os.listdir(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{patient_name}'), key=(lambda f: int(f.split('.')[0])))\n    volume = np.zeros((len(patient_directory), 512, 512))\n\n    for i, img in enumerate(patient_directory):\n        img_slice = pydicom.dcmread(f'..\/input\/osic-pulmonary-fibrosis-progression\/train\/{patient_name}\/{img}')\n        volume[i] = img_slice.pixel_array\n            \n    return volume","9fe36e4a":"patient_scan = load_scan('ID00368637202296470751086')","c7edaed1":"%%capture\nfig = plt.figure(figsize=(8, 8))\n\nimgs = []\nfor ps in patient_scan:\n    img = plt.imshow(ps, animated=True, cmap=plt.cm.bone)\n    plt.axis('off')\n    imgs.append([img])","e54237da":"vid = animation.ArtistAnimation(fig, imgs, interval=25, blit=False, repeat_delay=1000)","2ee05454":"# lets play the video \nHTML(vid.to_html5_video())","1b8b1cf3":"# Week-Wise Distribution","c27a4486":"**From the above pie chart we can conclude that almost 50% of the patients got their FVC checked between weeks -5 to 30**","7ba69f2a":"FVC ranges from 1000 to somewhere around 5000 mostly, went above 5000 in very few cases","eb4cee5a":"DICOM files can be read and processed easily with pydicom package. DICOM files allow to store metadata along with pixel data inside them. Reading a dicom file creates a pydicom.dataset.FileDataset object. FileDataset object wraps dict and contains DataElement instances.","90f4b21f":"# Lets load a random dicom image","2c76b6e9":"We can see that the train directory is made up of a bunch of subdirectories, each representing a single patient ID and containing about 20-600 DICOM files inside, there are few patients between 800 to 1000 dicom files, seems to be outliars.","6bf9dfcf":"There are two things here that I think are significant, slice location and the 'Pixel Data'.\n\nWe can retrieve a image as a numpy array by calling dcm.pixel_array, and we can then replace the -2000s, which are essentially NAs, with 0s.","07ae6149":"# Lets check categorical variables \"Sex\" and \"SmokingStatus\"","9b0c6514":"# Load datasets","554432b8":"# Pair Plot & Heat Map","507d1722":"**Mean FVC is lower for Males, but this can be misleading, as we dont have enough data for female patients**","80305db6":"**Most of the customers got their FVC checked for 9 times**","2597beb7":"# Mean FVC Males Vs Females","f504d5bf":"# Lets ZOOM-IN (Draw pair plots for the first 3 patients)","b68c44d9":"This gives us some idea with the sort of images we're dealing with. Now, let's try to reconstruct the layers of the body from which the images were taken, by taking a single patient and sorting his scans by Slice Location.","8ef3c954":"# Introduction - Pulmonary Fibrosis","4c187e31":"Test directory has around 28 to 400 images per patient","74a34261":"We can see here that basically all the DICOM files are somewhere between 2.7 to 3.4 MB.","395612d9":"**Again, FVC is evenly distribute for all age groups**","15455468":"# Mean FVC - Age wise","b81e1ea7":"Pulmonary Fibrosis, a disorder with no known cause and no known cure, created by scarring of the lungs. \n\n\n![image.png](attachment:image.png)\n\n\nIf that happened to you, you would want to know your prognosis. \n\nThat\u2019s where a troubling disease becomes frightening for the patient: outcomes can range from long-term stability to rapid deterioration, but doctors aren\u2019t easily able to tell where an individual may fall on that spectrum. \n\nWe as Data Scientists, should be able to help in predicting this disease, which would dramatically help both patients and clinicians.\n\nCurrent methods make fibrotic lung diseases difficult to treat, even with access to a chest CT scan. \n\nIn addition, the wide range of varied prognoses create issues organizing clinical trials. \n\nFinally, patients suffer extreme anxiety\u2014in addition to fibrosis-related symptoms\u2014from the disease\u2019s opaque path of progression.\n\nOpen Source Imaging Consortium (OSIC) is a not-for-profit, co-operative effort between academia, industry and philanthropy. \n\nThe group enables rapid advances in the fight against Idiopathic Pulmonary Fibrosis (IPF), fibrosing interstitial lung diseases (ILDs), and other respiratory diseases, including emphysematous conditions. \n\nIts mission is to bring together radiologists, clinicians and computational scientists from around the world to improve \nimaging-based treatments.","4d78d7dc":"**Most of the patients belongs to 60 to 70 age group, very few patients are above 80**","605aa7e8":"**There is not much variation in FVC for different Weeks**","66ed3fd7":"# What we need to do?\n\nIn this competition, we need to predict a patient\u2019s severity of decline in lung function based on a CT scan of their lungs. \n\nWe will determine lung function based on output from a spirometer, which measures the volume of air inhaled and exhaled. The challenge is to use machine learning techniques to make a prediction with the image, metadata, and baseline FVC as input.","0fe2ec85":"Now that we have the images of a patient sorted by position in the body, we can plot them to see how this varies.","311b36d9":"# Lets plot some more images at random","cabd567f":"# Let's check what's present in train directory","7347ae03":"From the above pair plot , its again very clear that FVC has a strong correlation with Percent. For rest of the features, it either has no relation or it is loosely correlated.","ee2608e4":"**Above pie shows that majority of the customers were into smoking, either they smoke currently or they used to smoke ealier(may be prior to get infected from the disease)**","2ab64fb8":"# FVC Vs Weeks Plot for Randomly selected patients","751ae1c5":"**We have total 176 directories (1 directory per patient) and total of 33026 dicom images**","1a399dc9":"If we look at the overall dataset, FVC and Percent seems to have a decent relationship.\n\nAge and FVC also seems to have inverse correlation","724fbe10":"# Let's check the frequency of patients visits for FVC Check","2a80e479":"# Let's stack up all the dicom images of a patient to create a 3D volume","fbff8d91":"We can actually use this to reconstruct a 3D model of the of the torso by simply concatenating the images together. Then something like a 3D convolutional network could be applied on top in order to identify points of interest in 3D space. Interesting stuff.","2b83ea12":"# Let's check the size of the dicom images","b8db6f4f":"**What we saw for the whole dataset is also true for each of the 3 pateints we checked above Pattern is the same, only FVC & Percent seems to have a decent correlation**","a204c180":"# Evaluation Metrics\n\nThis competition is evaluated on a modified version of the Laplace Log Likelihood. \n\nIn medical applications, it is useful to evaluate a model's confidence in its decisions. Accordingly, the metric is designed to reflect both the accuracy and certainty of each prediction.\n\nFor each true FVC measurement, we will predict both an FVC and a confidence measure (standard deviation \u03c3). The metric is computed as:\n\n![image.png](attachment:image.png)\n\n\nThe error is thresholded at 1000 ml to avoid large errors adversely penalizing results, while the confidence values are clipped at 70 ml to reflect the approximate measurement uncertainty in FVC. The final score is calculated by averaging the metric across all test set Patient_Weeks (three per patient). **Note that metric values will be negative and higher is better.**","9b68bc71":"Mean FVC is the least for those who currently smoke, best for those who never smoked, makes complete sense. Though we do not have enough data for the non-smokers.","ed1a8667":"# Age-Wise Distribution","1d41f3dc":"**Test directory has data for 5 patients, and a total of 1261 images**","a92a11ca":"Above plots are giving us better inttutions as far as relation between Weeks and FVC is concerned.\nWhen we zoomed the data to individual patients, mostly, FVC shows decreasing trend as we progress towards higher weeks","72586c62":"Now, we have read the image in a variable called dcm, we can simply \"print\" this variable to see the information related to the image","5b08eedb":"**Clearly, 79% of the pateints are Males and the rest females**","50ddb319":"# Mean FVC for different SmokingStatus","db80be27":"We have 2 directories here, `train` and `test`, both these directories have dicom images for different-different patients.\n\nInside `train` directory, we have sub directories, one sub-directory per patient. Each sub directory containts dicom files for that particular patient.","cf37e12f":"# Mean FVC - Week wise","039840a0":"# Lets draw pairplot, will set different colors for different categories of smoking status & sex","f4271061":"# Lets check how FVC is distributed in the dataset","ec6935c9":"# DATA\n\nIn the dataset,We have a baseline chest CT scan and associated clinical information for a set of patients. A patient has an image acquired at time Week = 0 and has numerous follow up visits over the course of approximately 1-2 years, at which time their FVC is measured.\n\nIn the training set, we are provided with an anonymized, baseline CT scan and the entire history of FVC measurements.\n\nIn the test set, we are provided with a baseline CT scan and only the initial FVC measurement. We are asked to predict the final three FVC measurements for each patient, as well as a confidence value in your prediction.\n\nSince this is real medical data,relative timing of FVC measurements varies widely. The timing of the initial measurement relative to the CT scan and the duration to the forecasted time points may be different for each patient. This is considered part of the challenge of the competition. To avoid potential leakage in the timing of follow up visits, we are asked to predict every patient's FVC measurement for every possible week. Those weeks which are not in the final three visits are ignored in scoring.","850d8b14":"# DICOM Files - Introduction\n\n`Digital Imaging and Communications` in Medicine (DICOM) is the standard for the communication and management of medical imaging information and related data.These files may also include patient information to pair the image with the patient.\n\n`DICOM` is most commonly used for storing and transmitting medical images enabling the integration of medical imaging devices such as scanners, servers, workstations, printers, network hardware, and picture archiving and communication systems (PACS) from multiple manufacturers. It has been widely adopted by hospitals and is making inroads into smaller applications like dentists' and doctors' offices.\n\n\nMultiple .dcm files represent different slices of a single CT scan. CT scans produce 3D volumes for each scan, those volumes consist of 2D slices and each slice is a .dcm file."}}