{"cell_type":{"bdccaf4c":"code","8ddc8889":"code","b6eba091":"code","a68c5742":"code","4d9836f2":"code","97c0e7b6":"code","4a3f77ae":"code","d54ed22f":"code","93db172f":"code","b437419f":"code","2f7e614f":"code","c9c0bb35":"code","80638bcc":"code","1db719be":"code","b5f49a38":"code","d798cd20":"code","7b419df0":"code","0d3d5c83":"code","41997071":"code","c18d214d":"code","92259273":"code","6fc72c04":"code","ed3e106a":"code","ba045ca4":"code","c832caf3":"code","036ec848":"code","1a35982b":"code","fbf632c9":"code","e493f7aa":"code","84a688f4":"code","ad85319d":"code","4ce6f545":"code","1269866d":"code","baa0d812":"code","9480d1bf":"code","fbb26cb6":"code","638dbd11":"code","a165ca53":"code","d42f59d4":"code","76493640":"code","d0e1862c":"code","cceabc01":"code","c732fbd4":"code","124db376":"code","fed57af8":"markdown","5e5b6036":"markdown","2a6acf8f":"markdown","c6bb8876":"markdown","9625ac12":"markdown","fc5810cc":"markdown","36cca959":"markdown","14fb4bc8":"markdown","c586db6c":"markdown","9f33df48":"markdown","3ee1e6b6":"markdown","57feb98e":"markdown"},"source":{"bdccaf4c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import Lasso, LassoCV ,ElasticNetCV,RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom mlxtend.regressor import StackingCVRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","8ddc8889":"train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest2=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nlen_train=train.shape[0]\nhouses=pd.concat([train,test], sort=False)\nprint(train.shape)\nprint(test.shape)","b6eba091":"houses.select_dtypes(include='object').head()","a68c5742":"houses.select_dtypes(include=['float','int']).head()","4d9836f2":"houses.select_dtypes(include='object').isnull().sum()[houses.select_dtypes(include='object').isnull().sum()>0]","97c0e7b6":"sns.set_style(\"whitegrid\")\nmissing = train.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","4a3f77ae":"train[\"PoolQC\"] = train[\"PoolQC\"].fillna(\"None\")\ntrain[\"MiscFeature\"] = train[\"MiscFeature\"].fillna(\"None\")\ntrain[\"Alley\"] = train[\"Alley\"].fillna(\"None\")\ntrain[\"Fence\"] = train[\"Fence\"].fillna(\"None\")\ntrain[\"FireplaceQu\"] = train[\"FireplaceQu\"].fillna(\"None\")\n# Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\ntrain[\"LotFrontage\"] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    train[col] = train[col].fillna('None')\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    train[col] = train[col].fillna('None')\ntrain[\"MasVnrType\"] = train[\"MasVnrType\"].fillna(\"None\")\ntrain['MSSubClass'] = train['MSSubClass'].fillna(\"None\")\ntrain[\"Functional\"] = train[\"Functional\"].fillna(\"Typ\")\ntrain['MSZoning'] = train['MSZoning'].fillna(train['MSZoning'].mode()[0])\ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical'].mode()[0])\ntrain['KitchenQual'] = train['KitchenQual'].fillna(train['KitchenQual'].mode()[0])\ntrain['Exterior1st'] = train['Exterior1st'].fillna(train['Exterior1st'].mode()[0])\ntrain['Exterior2nd'] = train['Exterior2nd'].fillna(train['Exterior2nd'].mode()[0])\ntrain['SaleType'] = train['SaleType'].fillna(train['SaleType'].mode()[0])","d54ed22f":"test[\"PoolQC\"] = test[\"PoolQC\"].fillna(\"None\")\ntest[\"MiscFeature\"] = test[\"MiscFeature\"].fillna(\"None\")\ntest[\"Alley\"] = test[\"Alley\"].fillna(\"None\")\ntest[\"Fence\"] = test[\"Fence\"].fillna(\"None\")\ntest[\"FireplaceQu\"] = test[\"FireplaceQu\"].fillna(\"None\")\n# Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\ntest[\"LotFrontage\"] = test.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    test[col] = test[col].fillna('None')\n\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    test[col] = test[col].fillna('None')\ntest[\"MasVnrType\"] = test[\"MasVnrType\"].fillna(\"None\")\ntest[\"Functional\"] = test[\"Functional\"].fillna(\"Typ\")\ntest['MSSubClass'] = test['MSSubClass'].fillna(\"None\")\ntest['Electrical'] = test['Electrical'].fillna(test['Electrical'].mode()[0])\ntest['KitchenQual'] = test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['Exterior1st'] = test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['Exterior2nd'] = test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['SaleType'] = test['SaleType'].fillna(test['SaleType'].mode()[0])\ntest['MSZoning'] = test['MSZoning'].fillna(test['MSZoning'].mode()[0])\ntest['Utilities'] = test['Utilities'].fillna(test['MSZoning'].mode()[0])","93db172f":"houses.select_dtypes(include=['int','float']).isnull().sum()[houses.select_dtypes(include=['int','float']).isnull().sum()>0]","b437419f":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    train[col] = train[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    train[col] = train[col].fillna(0)\ntrain[\"MasVnrArea\"] = train[\"MasVnrArea\"].fillna(0)\n","2f7e614f":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    test[col] = test[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    test[col] = test[col].fillna(0)\ntest[\"MasVnrArea\"] = test[\"MasVnrArea\"].fillna(0)","c9c0bb35":"print(train.isnull().sum().sum())\nprint(test.isnull().sum().sum())","80638bcc":"corrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","1db719be":"k = 10 \ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b5f49a38":"var = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","d798cd20":"#removing outliers recomended by author\ntrain = train[train['GrLivArea']<4000]","7b419df0":"var = 'TotalBsmtSF'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","0d3d5c83":"len_train=train.shape[0]\nprint(train.shape)","41997071":"houses=pd.concat([train,test], sort=False)\nhouses['_OverallQualCond'] = houses['OverallQual'] + (houses['OverallCond'] - 5) * 0.5\nhouses['_TotalSF'] = houses['TotalBsmtSF'] + houses['GrLivArea']\nhouses['_PorchArea'] = houses['OpenPorchSF'] + houses['EnclosedPorch'] + houses['3SsnPorch'] + houses['ScreenPorch']\nhouses['_TotalArea'] = houses['_TotalSF'] + houses['GarageArea'] + houses['_PorchArea']\nhouses['_Rooms'] = houses['TotRmsAbvGrd'] + houses['FullBath'] + houses['HalfBath']\nhouses['_BathRooms'] = houses['FullBath'] + houses['BsmtFullBath'] + (houses['HalfBath'] + houses['BsmtHalfBath']) * 0.7\nhouses['_GrLAreaAveByRms'] = houses['GrLivArea'] \/ houses['_Rooms']\n\nhouses['YrBltAndRemod']=houses['YearBuilt']+houses['YearRemodAdd']\nhouses['TotalSF']=houses['TotalBsmtSF'] + houses['1stFlrSF'] + houses['2ndFlrSF']\n\nhouses['Total_sqr_footage'] = (houses['BsmtFinSF1'] + houses['BsmtFinSF2'] +\n                                 houses['1stFlrSF'] + houses['2ndFlrSF'])\n\nhouses['Total_Bathrooms'] = (houses['FullBath'] + (0.5 * houses['HalfBath']) +\n                               houses['BsmtFullBath'] + (0.5 * houses['BsmtHalfBath']))\n\nhouses['Total_porch_sf'] = (houses['OpenPorchSF'] + houses['3SsnPorch'] +\n                              houses['EnclosedPorch'] + houses['ScreenPorch'] +\n                              houses['WoodDeckSF'])\n\n\n","c18d214d":"houses['haspool'] = houses['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nhouses['has2ndfloor'] = houses['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\nhouses['hasgarage'] = houses['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nhouses['hasbsmt'] = houses['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nhouses['hasfireplace'] = houses['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","92259273":"#MSSubClass=The building class\nhouses['MSSubClass'] = houses['MSSubClass'].apply(str)\n#Year and month sold are transformed into categorical features.\nhouses['YrSold'] = houses['YrSold'].astype(str)\nhouses['MoSold'] = houses['MoSold'].astype(str)","6fc72c04":"skew=houses.select_dtypes(include=['int','float']).apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskew_df=pd.DataFrame({'Skew':skew})\nskewed_df=skew_df[(skew_df['Skew']>0.5)|(skew_df['Skew']<-0.5)]","ed3e106a":"skewed_df.index","ba045ca4":"skewed_df = skewed_df[abs(skewed_df) > 0.5]\nprint(\"There are {} skewed numerical features to log transform\".format(skewed_df.shape[0]))\n\nfor col in ('MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n       'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch',\n       'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF',\n       'LotFrontage', 'GrLivArea', 'BsmtFinSF1', 'BsmtUnfSF', 'Fireplaces',\n       'HalfBath', 'TotalBsmtSF', 'BsmtFullBath', 'OverallCond', 'YearBuilt',\n       'GarageYrBlt'):\n    train[col]=np.log1p(train[col])\n    test[col]=np.log1p(test[col])","c832caf3":"train=houses[:len_train]\ntest=houses[len_train:]","036ec848":"train['SalePrice']=np.log1p(train['SalePrice'])","1a35982b":"houses=pd.concat([train,test], sort=False)\nhouses=pd.get_dummies(houses)","fbf632c9":"train=houses[:len_train]\ntest=houses[len_train:]","e493f7aa":"train.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","84a688f4":"x=train.drop('SalePrice', axis=1)\ny=train['SalePrice']\ntest=test.drop('SalePrice', axis=1)","ad85319d":"sc=RobustScaler()\nx=sc.fit_transform(x)\ntest=sc.transform(test)","4ce6f545":"alphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\n\n#model=Lasso(alpha =0.001, random_state=1)\n\nmodelLA=LassoCV(alphas=alphas2, random_state=42)\nmodelEL=ElasticNetCV(alphas=alphas2,random_state=42)\nmodelRI=RidgeCV(alphas=alphas2)\n\n","1269866d":"lgbm = LGBMRegressor(objective='regression', \n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       n_estimators=5000,\n                                       max_bin=200, \n                                       bagging_fraction=0.75,\n                                       bagging_freq=5, \n                                       bagging_seed=7,\n                                       feature_fraction=0.2,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )\n\n","baa0d812":"xgboost = XGBRegressor(learning_rate=0.01,n_estimators=3460,\n                                     max_depth=3, min_child_weight=0,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,\n                                     objective='reg:linear', nthread=-1,\n                                     scale_pos_weight=1, seed=27,\n                                     reg_alpha=0.00006)","9480d1bf":"g_boost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, \n                                   loss='huber', random_state =5)\n","fbb26cb6":"# model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n#                              learning_rate=0.05, max_depth=3, \n#                              min_child_weight=1.7817, n_estimators=2200,\n#                              reg_alpha=0.4640, reg_lambda=0.8571,\n#                              subsample=0.5213, silent=1,\n#                              random_state =7, nthread = -1)\n# model_xgb.fit(x,y)","638dbd11":"stack_gen = StackingCVRegressor(regressors=(modelRI,modelLA,modelEL,g_boost,lgbm,),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)\n","a165ca53":"# modelEL.fit(x,y)\n# modelLA.fit(x,y)\n# modelRI.fit(x,y)","d42f59d4":"stack_gen_model = stack_gen.fit(np.array(x), np.array(y))","76493640":"\npred=stack_gen_model.predict(np.array(test))\n#pred=modelEL.predict(test)\n#preds = lgbm.predict(test)\npreds=np.exp(pred)","d0e1862c":"output=pd.DataFrame({'Id':test2.Id, 'SalePrice':preds})\noutput.to_csv('StackModelV3.csv', index=False)\n#output.to_csv('ElasticNetModele.csv', index=False)","cceabc01":"#output","c732fbd4":"# Save the predictions in form of a dataframe\nsubmission = pd.DataFrame()\nsubmission['Id'] = test2.Id\nsubmission['SalePrice'] = preds\n\ntop_public = pd.read_csv('..\/input\/modele\/ElasticNetModele.csv')\n\nfinal_blend = (0.6*top_public.SalePrice.values + 0.4*preds)\n\nblended_submission = pd.DataFrame()\n\nblended_submission['Id'] = test2.Id\nblended_submission['SalePrice'] = final_blend\n\nblended_submission.to_csv('BlendModelV2.csv', index=False)","124db376":"blended_submission","fed57af8":"#### When we read the data description file we realize that \"\", a numerical features (not ordinal), should be transformed into categorical. I'll do this later in this kernel.","5e5b6036":"Numerical to categorical","2a6acf8f":"# Submission","c6bb8876":"# Transforming Data","9625ac12":"# Importing Data \n","fc5810cc":"Skew","36cca959":"Categorical to one hot encoding","14fb4bc8":"# Advanced Regression Techniques\n\n\n## Steps:\n### Importing packages\n### Visualising data\n### Handling missing values\n### Handling outliers \n### Adding more variables\n### Transforming data \n### Creating models \n### Submission ","c586db6c":"# Handling Outliers","9f33df48":"# Creating Models","3ee1e6b6":"# Handling Missing Values","57feb98e":"# Visualising data \n"}}