{"cell_type":{"6729883d":"code","ef619388":"code","c482ff06":"code","52ea0166":"code","69eec5b4":"code","a4189817":"code","aca849d5":"code","7f2d88a4":"code","0e215d6c":"code","3a14441d":"code","eb879ce8":"code","4899b0e4":"code","f025d416":"code","0a90ed9b":"code","5465ed4e":"code","7cd5b313":"code","f81d52a2":"code","e18d50a3":"code","bf7a887e":"code","2bd451a9":"code","04dc8910":"code","c20768b0":"code","1284bad4":"code","7cdb2ed7":"code","b52dd574":"code","790fb98c":"code","764b0f3b":"code","b8e870ee":"code","8c46c6d9":"code","53eb30de":"code","706aaed7":"code","e0b4301e":"code","cac46950":"code","76be2071":"code","7112231b":"code","f403cbe4":"code","006d3049":"code","d80595d1":"code","d8e7190e":"code","758743ae":"code","43feb0a7":"code","ed50182e":"code","4946b17a":"markdown","b602fe92":"markdown","613584e8":"markdown","a527fabf":"markdown","d026c41a":"markdown"},"source":{"6729883d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ef619388":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.preprocessing import sequence\n","c482ff06":"##\u5bfc\u5165\u6570\u636e Imdb\n##\u5df2\u7ecf\u505a\u5b8c token\u7684\u5b57\u5178!!\nnum_words = 2000\n\n(x_train, y_train), (x_test, y_test) = keras.datasets.imdb.load_data(num_words=num_words)\nprint(x_train.shape, ' ', y_train.shape)\nprint(x_test.shape, ' ', y_test.shape)","52ea0166":"##\u67e5\u770b\u7b2c\u4e00\u4f4d\u8bc4\u8bba\u7684\u597d\u574f(1:\u597d\u8bc4\uff0c0:\u5dee\u8bc4)\ny_train[0]","69eec5b4":"x_train[0] ##\u67e5\u770b\u7b2c\u4e00\u4e2a\u8bc4\u8bba","a4189817":"##\u5c06\u4e0d\u5b9a\u957f\u5ea6\u7684\u8bc4\u8bba'\u622a\u957f\u8865\u77ed'\uff0c\u4e0d\u8db3100\u5b57\u7684\u88650\uff0c\u8d85\u8fc7100\u5b57\u7684\u5220\u53bb\u591a\u7684\u5b57\u6570\nx_train_seq = sequence.pad_sequences(x_train,maxlen=100)\nx_test_seq = sequence.pad_sequences(x_test,maxlen=100)","aca849d5":"##\u67e5\u770b\u8bc4\u8bba\u5b57\u6570\u957f\u5ea6\n\nprint('before pad_sequences length=',len(x_train[0]))\nprint(x_train[0])\n\nprint('before pad_sequences length=',len(x_train[74]))\nprint(x_train[74])","7f2d88a4":"print('after pad_sequences length=',len(x_train_seq[0]))\nprint(x_train_seq[0])\nprint('after pad_sequences length=',len(x_train_seq[74]))\nprint(x_train_seq[74])","0e215d6c":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= \"https:\/\/camo.githubusercontent.com\/37e2ac7043a4c8276affc5abc565562b4fa38dfb\/687474703a2f2f75632d722e6769746875622e696f2f7075626c69632f696d616765732f616e616c79746963732f646565705f6c6561726e696e672f646565705f6e6e2e706e67\")\n\n","3a14441d":"from keras.models import Sequential\nfrom keras.layers.core import Dense,Dropout,Activation,Flatten\nfrom keras.layers.embeddings import Embedding","eb879ce8":"model = Sequential()\n\nmodel.add(Embedding(output_dim=32\n                   ,input_dim=2000\n                   ,input_length=100))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(units=256\n               ,activation = 'relu'))\n\nmodel.add(Dropout(0.35))\n\nmodel.add(Dense(units=1\n               ,activation = 'sigmoid'))","4899b0e4":"model.summary()","f025d416":"model.compile(loss = 'binary_crossentropy'\n             ,optimizer='adam'\n             ,metrics = ['accuracy'])","0a90ed9b":"train_history = model.fit(x_train_seq,y_train,batch_size = 64,epochs = 10,verbose = 2,validation_split = 0.2)","5465ed4e":"scores = model.evaluate(x_test_seq,y_test,verbose = 1)\nscores[1]","7cd5b313":"##\u5b66\u4e60\u66f2\u7ebf\nimport matplotlib.pyplot as plt\n\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 1)\n    plt.show()\n\nplot_learning_curves(train_history)","f81d52a2":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= \"http:\/\/dprogrammer.org\/wp-content\/uploads\/2019\/04\/RNN-vs-LSTM-vs-GRU-1024x308.png\")","e18d50a3":"num_words = 2000\n(x_train, y_train), (x_test, y_test) = keras.datasets.imdb.load_data(num_words=num_words)\nprint(x_train.shape, ' ', y_train.shape)\nprint(x_test.shape, ' ', y_test.shape)","bf7a887e":"x_train_seq = sequence.pad_sequences(x_train,maxlen=100)\nx_testseq = sequence.pad_sequences(x_test,maxlen=100)","2bd451a9":"from keras.models import Sequential\nfrom keras.layers.core import Dense,Dropout,Activation,Flatten\nfrom keras.layers.recurrent import SimpleRNN\nfrom keras.layers.embeddings import Embedding","04dc8910":"model = Sequential()\n\nmodel.add(Embedding(output_dim=32\n                   ,input_dim=2000\n                   ,input_length=100))\nmodel.add(Dropout(0.2))\n\nmodel.add(SimpleRNN(units = 16))\n\nmodel.add(Dense(units=256\n               ,activation = 'relu'))\n\nmodel.add(Dropout(0.35))\n\nmodel.add(Dense(units=1\n               ,activation = 'sigmoid'))","c20768b0":"model.summary()","1284bad4":"model.compile(loss = 'binary_crossentropy'\n             ,optimizer='adam'\n             ,metrics = ['accuracy'])","7cdb2ed7":"train_history = model.fit(x_train_seq\n                          ,y_train,batch_size = 100\n                         ,epochs = 10,verbose = 2,validation_split = 0.2)","b52dd574":"scores = model.evaluate(x_test_seq,y_test,verbose = 1)\nscores[1]","790fb98c":"##\u5b66\u4e60\u66f2\u7ebf\nimport matplotlib.pyplot as plt\n\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 1)\n    plt.show()\n\nplot_learning_curves(train_history)","764b0f3b":"num_words = 2000\n(x_train, y_train), (x_test, y_test) = keras.datasets.imdb.load_data(num_words=num_words)\nprint(x_train.shape, ' ', y_train.shape)\nprint(x_test.shape, ' ', y_test.shape)","b8e870ee":"x_train_seq = sequence.pad_sequences(x_train,maxlen=100)\nx_testseq = sequence.pad_sequences(x_test,maxlen=100)","8c46c6d9":"from keras.models import Sequential\nfrom keras.layers.core import Dense,Dropout,Activation,Flatten\nfrom keras.layers.recurrent import LSTM\nfrom keras.layers.embeddings import Embedding","53eb30de":"model = Sequential()\n\nmodel.add(Embedding(output_dim=32\n                   ,input_dim=2000\n                   ,input_length=100))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(32))\n\nmodel.add(Dense(units=256\n               ,activation = 'relu'))\n\nmodel.add(Dropout(0.35))\n\nmodel.add(Dense(units=1\n               ,activation = 'sigmoid'))","706aaed7":"model.summary()","e0b4301e":"model.compile(loss = 'binary_crossentropy'\n             ,optimizer='adam'\n             ,metrics = ['accuracy'])","cac46950":"train_history = model.fit(x_train_seq\n                          ,y_train,batch_size = 100\n                         ,epochs = 10,verbose = 2,validation_split = 0.2)","76be2071":"scores = model.evaluate(x_test_seq,y_test,verbose = 1)\nscores[1]","7112231b":"##\u5b66\u4e60\u66f2\u7ebf\nimport matplotlib.pyplot as plt\n\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 1)\n    plt.show()\n\nplot_learning_curves(train_history)","f403cbe4":"from keras.models import Sequential\nfrom keras.layers.core import Dense,Dropout,Activation,Flatten\nfrom keras.layers.recurrent import GRU\nfrom keras.layers.embeddings import Embedding","006d3049":"model = Sequential()\n\nmodel.add(Embedding(output_dim=32\n                   ,input_dim=2000\n                   ,input_length=100))\nmodel.add(Dropout(0.2))\n\nmodel.add(GRU(32))\n\nmodel.add(Dense(units=256\n               ,activation = 'relu'))\n\nmodel.add(Dropout(0.35))\n\nmodel.add(Dense(units=1\n               ,activation = 'sigmoid'))","d80595d1":"model.summary()","d8e7190e":"model.compile(loss = 'binary_crossentropy'\n             ,optimizer='adam'\n             ,metrics = ['accuracy'])","758743ae":"train_history = model.fit(x_train_seq\n                          ,y_train,batch_size = 100\n                         ,epochs = 10,verbose = 2,validation_split = 0.2)","43feb0a7":"scores = model.evaluate(x_test_seq,y_test,verbose = 1)\nscores[1]","ed50182e":"##\u5b66\u4e60\u66f2\u7ebf\nimport matplotlib.pyplot as plt\n\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 1)\n    plt.show()\n\nplot_learning_curves(train_history)","4946b17a":"# RNN","b602fe92":"LSTM","613584e8":"# GRU","a527fabf":"\u53ef\u4ee5\u770b\u51fa\uff0c\u7ecf\u8fc7'\u622a\u957f\u8865\u77ed'\uff0c\u5b57\u6570\u88ab\u7edf\u4e00\u6210100\u7684\u957f\u5ea6","d026c41a":"# Deep neural network"}}