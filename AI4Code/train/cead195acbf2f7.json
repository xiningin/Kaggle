{"cell_type":{"b86dde60":"code","09f4ba44":"code","80702707":"code","b33b0f08":"code","ba4cb823":"code","09daf2c1":"code","a50791cf":"code","d02a5690":"code","f9576ab2":"code","61faf881":"code","c70852b3":"code","a00cc46c":"code","c3f159d8":"code","e38bf418":"code","21843e7f":"code","aeecc85d":"code","1833b86a":"code","8dc32c53":"code","ef310ca2":"code","e6e5eeaa":"code","2d24d9d6":"code","56b8e0c9":"code","65e2211f":"code","8ed1385f":"code","c39092fd":"code","feae0c57":"code","672c60e4":"code","8cb29fa3":"code","1b0a23b0":"code","25213e6a":"code","c8a5a1c5":"code","a1fa3c6b":"code","c963c1a0":"code","8235666e":"code","249b32c6":"code","8963a3e2":"code","72d6b7f5":"code","1e0db865":"code","b0cdc899":"code","2f6438fc":"code","9924911d":"code","7aeaa084":"code","2cb53683":"code","8d259451":"code","1253ce9a":"code","6ae31fa4":"code","492cc55b":"code","991f03a8":"code","56a5f1b9":"code","69635a52":"code","4fec5295":"code","d86af563":"code","966be025":"code","8ff15808":"code","afa45ee8":"code","17b984a8":"code","6ccd2065":"code","93c48519":"code","ca1f80de":"code","1392d389":"code","1109393b":"code","c5b9000f":"code","417b8824":"code","6c15bb28":"code","7430e5c4":"code","9b58da28":"code","67353f77":"code","49cce048":"code","5fd0c83d":"code","fa53836f":"code","59e5b64c":"code","4fdc51ff":"code","1e24bdb6":"code","a88ce810":"code","9e8032f4":"code","9354f78b":"code","dd083cc8":"code","e08d58fe":"code","ac15a7c0":"code","ed22ec95":"code","caad788f":"code","e7cc51ee":"code","9ba1054f":"code","e6233f7d":"code","e64e4d94":"code","9f46cd24":"code","ebcba640":"code","07694d0f":"code","4d10d241":"code","ca77de28":"code","71c6c6d8":"code","e67861a3":"code","d29b82d8":"code","4e502919":"code","be46da54":"code","eaa2f2c8":"code","7c1e6941":"code","53cc0f96":"code","2d29323a":"code","07968396":"code","484fd4a3":"code","5346f739":"code","7aaca441":"code","930bb872":"code","afde6969":"code","e6e96f30":"code","0949be7b":"code","7eab5fc0":"code","44008565":"code","c7b3b21e":"code","4871d22d":"code","0cc6dcc8":"code","1dbc0fdc":"code","d784525b":"code","c8562ec5":"code","f1356ff3":"code","2b532608":"code","931833bd":"code","85e1656c":"code","1e74ac96":"code","dab8961a":"code","7ecbf2da":"code","ab9c18ee":"code","ab023cd1":"code","45104aba":"code","c6e4139f":"code","28ef7090":"code","abed0079":"code","8a6c9945":"code","87f1af14":"code","c60bb239":"code","23fe43d5":"code","5df4028b":"code","a5a74c03":"code","8c98ec65":"code","2d96639b":"code","72de516b":"code","dbfcfc13":"code","016e17fb":"code","e2566c47":"code","b8fea79d":"code","e230aad2":"code","b23a4e4f":"code","d074bcc9":"code","9b8d1aea":"code","2b6c95bf":"code","2c1c07a8":"code","392c7d26":"code","3a2f4054":"code","477eb7db":"code","d6321937":"code","cba2f15c":"code","ef3b6ced":"code","604ee361":"code","8bb9d8c5":"code","3ee6c5a6":"code","51f7cc51":"code","5311b4c3":"code","65d3e3c5":"code","d06177b0":"code","21e3b300":"code","93df88d4":"code","cd55bc38":"code","30777929":"code","e1995f9d":"code","496bfdcb":"code","a4c9fe73":"code","de6fed7a":"code","fbddb938":"code","fd59700f":"code","8a38f1ef":"code","ba92cb7e":"code","27c14484":"code","e92ea708":"code","04ea8eab":"code","f7d1c022":"code","fb15884e":"code","82f15ecc":"code","c6ef24f0":"code","69a516f3":"code","6bc7b988":"code","b5a086bb":"code","77bb7c61":"code","488dae33":"code","bc8f3295":"code","9b7ef683":"code","e01d09df":"code","050c21c1":"code","b125e514":"code","4a08aab5":"code","14f49e5f":"code","324fa3c1":"code","629e8fdc":"code","ab246e12":"code","d2139b8f":"code","b65ed95a":"code","3812fe22":"code","e97ffb48":"code","1a44c2ab":"code","394bcd5b":"code","b4e9d10a":"code","f4f0d0db":"code","d409ed29":"code","80854ddd":"code","a33c6ddb":"code","fe0bbcb4":"code","7d900c76":"markdown","fe26a90f":"markdown","1fbb01d8":"markdown","32f5fe96":"markdown","bc69b6ad":"markdown","2cb8b8ff":"markdown","e5d0140f":"markdown","c40a49b1":"markdown","2b5e8d7a":"markdown","f80e6ce9":"markdown","258a83db":"markdown","bda9af28":"markdown","14ec05d7":"markdown","4f4b55e9":"markdown","0248b5a0":"markdown","e6936695":"markdown","b53acfb7":"markdown"},"source":{"b86dde60":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport matplotlib as mpl\nfrom matplotlib.patches import Circle, Rectangle, Arc\nimport seaborn as sns\nplt.style.use('seaborn-dark-palette')\nmypal = plt.rcParams['axes.prop_cycle'].by_key()['color'] # Grab the color pal\nimport os\nimport gc","09f4ba44":"def mkdir(path):\n    import os\n    path = path.strip()\n    path = path.rstrip(\"\\\\\")\n    isExists = os.path.exists(path)\n    if not isExists:\n        os.makedirs(path)\n        print(path + 'Successufully established')\n        return True\n    else:\n        print(path + 'dir existed')\n        return False","80702707":"MENS_DIR = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Mens-Data\/MDataFiles_Stage1'\nWOMENS_DIR = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Womens-Data\/WDataFiles_Stage1'","b33b0f08":"Mss = pd.read_csv(f'{MENS_DIR}\/MTeams.csv')\nWss = pd.read_csv(f'{WOMENS_DIR}\/WTeams.csv')\nMss.head()","ba4cb823":"Wss.head()","09daf2c1":"M_drop_list = [\"FirstD1Season\",\"TeamName\",\"LastD1Season\"]\nW_drop_list = ['TeamName']\nMss.drop(M_drop_list,axis = 1,inplace = True)\nWss.drop(W_drop_list,axis = 1,inplace = True)\nMss.head()","a50791cf":"print(len(Mss[\"TeamID\"].unique()))\nprint(len(Wss[\"TeamID\"].unique()))","d02a5690":"# Team_box\ntime_list = [2015,2016,2017,2018,2019]","f9576ab2":"Mss = pd.read_csv(f'{MENS_DIR}\/MTeams.csv')\nWss = pd.read_csv(f'{WOMENS_DIR}\/WTeams.csv')","61faf881":"M_Seed = pd.read_csv(f'{MENS_DIR}\/MNCAATourneySeeds.csv')\nW_Seed = pd.read_csv(f'{WOMENS_DIR}\/WNCAATourneySeeds.csv')","c70852b3":"M_Team_seed = M_Seed[M_Seed['Season'].isin(time_list)]\nW_Team_seed = W_Seed[W_Seed['Season'].isin(time_list)]","a00cc46c":"print(len(W_Team_seed))\nprint(len(M_Team_seed))","c3f159d8":"M_game_result_detailed =  pd.read_csv(f'{MENS_DIR}\/MRegularSeasonDetailedResults.csv')\nW_game_result_detailed =  pd.read_csv(f'{WOMENS_DIR}\/WRegularSeasonDetailedResults.csv')\n\nprint(M_game_result_detailed.head())\nprint(W_game_result_detailed.head())","e38bf418":"M_game_result_detailed = M_game_result_detailed[M_game_result_detailed['Season'].isin(time_list)]\nW_game_result_detailed = W_game_result_detailed[W_game_result_detailed['Season'].isin(time_list)]\nprint(M_game_result_detailed.head())\nprint(W_game_result_detailed.head())","21843e7f":"print(len(M_game_result_detailed))\nprint(len(W_game_result_detailed))","aeecc85d":"M_game_result_detailed.columns","1833b86a":"W_game_result_detailed.columns","8dc32c53":"win_list = ['Season','WTeamID','WScore','WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR',\n       'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']\nM_game_result_win = M_game_result_detailed[win_list]\nW_game_result_win = W_game_result_detailed[win_list]\nW_game_result_win.head()","ef310ca2":"lose_list = ['Season','LTeamID','LScore','LFGM', 'LFGA', 'LFGM3', 'LFGA3',\n       'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF']\nM_game_result_lose = M_game_result_detailed[lose_list]\nW_game_result_lose = W_game_result_detailed[lose_list]\nW_game_result_lose.head()","e6e5eeaa":"M_team_win_box = M_game_result_win.groupby(['WTeamID','Season']).count()\nW_team_win_box = W_game_result_win.groupby(['WTeamID','Season']).count()","2d24d9d6":"drop_list = ['WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR',\n       'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']\nM_team_win_box = M_team_win_box.drop(drop_list,axis = 1)\nW_team_win_box = W_team_win_box.drop(drop_list,axis = 1)\nM_team_win_box = M_team_win_box.rename(columns = {'WScore':'count'})\nW_team_win_box = W_team_win_box.rename(columns = {'WScore':'count'})","56b8e0c9":"M_team_count = M_team_win_box.reset_index()\nW_team_count = W_team_win_box.reset_index()","65e2211f":"M_team_win_box = M_game_result_win.groupby(['WTeamID','Season']).sum()\nM_team_win_box = M_team_win_box.reset_index()\nM_team_win_box = pd.merge(M_team_win_box,M_team_count,on = ['WTeamID','Season'])\nwin_rename_columns = {'WTeamID':\"TeamID\",\"WScore\":\"Score\",'WFGM':'FGM', 'WFGA':'FGA', 'WFGM3':'FGM3', 'WFGA3':'FGA3',\n       'WFTM':'FTM', 'WFTA':'FTA', 'WOR':'OR', 'WDR':'DR', 'WAst':'Ast', 'WTO':'TO', 'WStl':'Stl', 'WBlk':'Blk', 'WPF':'PF'}\nM_team_win_box = M_team_win_box.rename(columns=win_rename_columns)\nM_team_win_box.head()","8ed1385f":"W_team_win_box = W_game_result_win.groupby(['WTeamID','Season']).sum()\nW_team_win_box = W_team_win_box.reset_index()\nW_team_win_box = pd.merge(W_team_win_box,W_team_count,on = ['WTeamID','Season'])\nW_team_win_box = W_team_win_box.rename(columns=win_rename_columns)\nW_team_win_box.head()","c39092fd":"len(W_team_win_box)","feae0c57":"W_game_result_lose","672c60e4":"M_team_lose_box = M_game_result_lose.groupby(['LTeamID','Season']).count()\ndrop_list = ['LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR',\n       'LAst', 'LTO', 'LStl', 'LBlk', 'LPF']\nM_team_lose_box = M_team_lose_box.drop(drop_list,axis = 1)\nM_team_lose_box = M_team_lose_box.rename(columns = {'LScore':'count'})","8cb29fa3":"W_team_lose_box = W_game_result_lose.groupby(['LTeamID','Season']).count()\nW_team_lose_box = W_team_lose_box.drop(drop_list,axis = 1)\nW_team_lose_box = W_team_lose_box.rename(columns = {'LScore':'count'})","1b0a23b0":"M_team_lose_count = M_team_lose_box.reset_index()\nW_team_lose_count = W_team_lose_box.reset_index()","25213e6a":"M_result_lose = M_game_result_lose.groupby(['LTeamID','Season']).sum()\nM_team_lose_box = M_result_lose.reset_index()\nM_team_lose_box = pd.merge(M_team_lose_box,M_team_lose_count,on = ['LTeamID','Season'])\nrename_columns = {'LTeamID':\"TeamID\",\"LScore\":\"Score\",'LFGM':'FGM', 'LFGA':'FGA', 'LFGM3':'FGM3', 'LFGA3':'FGA3',\n       'LFTM':'FTM', 'LFTA':'FTA', 'LOR':'OR', 'LDR':'DR', 'LAst':'Ast', 'LTO':'TO', 'LStl':'Stl', 'LBlk':'Blk', 'LPF':'PF'}\nM_team_lose_box = M_team_lose_box.rename(columns=rename_columns)\nM_team_lose_box.head()","c8a5a1c5":"W_result_lose = W_game_result_lose.groupby(['LTeamID','Season']).sum()\nW_team_lose_box = W_result_lose.reset_index()\nW_team_lose_box = pd.merge(W_team_lose_box,W_team_lose_count,on = ['LTeamID','Season'])\nW_team_lose_box = W_team_lose_box.rename(columns=rename_columns)\nW_team_lose_box.head()","a1fa3c6b":"assert len(W_team_win_box.columns) == len(W_team_lose_box.columns)","c963c1a0":"M_result = pd.merge(M_team_win_box,M_team_lose_box,on=['TeamID','Season'])\nW_result = pd.merge(W_team_win_box,W_team_lose_box,on=['TeamID','Season'])","8235666e":"M_result = M_team_win_box.append(M_team_lose_box)\nW_result = W_team_win_box.append(W_team_lose_box)","249b32c6":"W_result","8963a3e2":"M_result = M_result.groupby(['TeamID','Season']).sum()\nW_result = W_result.groupby(['TeamID','Season']).sum()","72d6b7f5":"W_result","1e0db865":"element_list = ['Score','FGM','FGA','FGM3','FGA3','FTM','FTA','OR','DR','TO','Stl','Blk','PF','Ast']","b0cdc899":"M_result = M_result[element_list].apply(lambda x:x\/M_result['count'])\nW_result = W_result[element_list].apply(lambda x:x\/W_result['count'])","2f6438fc":"W_result","9924911d":"M_result_withseed = pd.merge(M_result,M_Team_seed,on=['TeamID','Season'],how = 'outer')\nW_result_withseed = pd.merge(W_result,W_Team_seed,on=['TeamID','Season'],how = 'outer')","7aeaa084":"W_result_withseed","2cb53683":"M_team_win_box = M_result_withseed.rename(columns = {'TeamID':'WTeamID'})\nM_team_lose_box = M_result_withseed.rename(columns = {'TeamID':'LTeamID'})\nW_team_win_box = W_result_withseed.rename(columns = {'TeamID':'WTeamID'})\nW_team_lose_box = W_result_withseed.rename(columns = {'TeamID':'LTeamID'})","8d259451":"M_result_withseed.to_csv('M_result.csv')\nW_result_withseed.to_csv('W_result.csv')","1253ce9a":"M_game_result =  pd.read_csv(f'{MENS_DIR}\/MNCAATourneyCompactResults.csv')\nM_game_result = M_game_result[M_game_result['Season'].isin(time_list)]\nW_game_result =  pd.read_csv(f'{WOMENS_DIR}\/WNCAATourneyCompactResults.csv')\nW_game_result = W_game_result[W_game_result['Season'].isin(time_list)]","6ae31fa4":"W_game_result","492cc55b":"W_team_lose_box","991f03a8":"M_game_result_1 = pd.merge(M_game_result,M_team_win_box,on=['WTeamID','Season'],how = 'left')\nW_game_result_1 = pd.merge(W_game_result,W_team_win_box,on=['WTeamID','Season'],how = 'left')","56a5f1b9":"W_game_result_1","69635a52":"M_game_result_final = pd.merge(M_game_result_1,M_team_lose_box,on=['LTeamID','Season'],how = 'left')\nW_game_result_final = pd.merge(W_game_result_1,W_team_lose_box,on=['LTeamID','Season'],how = 'left')","4fec5295":"W_game_result_final[['Score_x','Score_y']]","d86af563":"M_game_result_final.to_csv('M_result_by_game_tourney.csv')\nW_game_result_final.to_csv('W_result_by_game_tourney.csv')","966be025":"import statsmodels.api as sm\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","8ff15808":"df = M_game_result_final.copy()\ndf1=df.copy()\ndf_WTeamID=df['WTeamID']\ndf_LTeamID=df['LTeamID']\ndf_WScore=df['WScore']\ndf_LScore=df['LScore']\ndf1['WTeamID']=df_LTeamID\ndf1['LTeamID']=df_WTeamID\ndf1['WScore']=df_LScore\ndf1['LScore']=df_WScore\nlabel_x=df1.columns[8:23]\nlabel_y=df1.columns[23:38]\nlabel_x=list(label_x)\nlabel_y=list(label_y)\nfor i in range(len(label_x)):\n    df1[label_x[i]]=df[label_y[i]]\n    df1[label_y[i]]=df[label_x[i]]","afa45ee8":"df['target']=1\ndf1['target']=0\ndf_final=df.append(df1)","17b984a8":"df_W = W_game_result_final.copy()\ndf_W1=df_W.copy()\ndf_W_WTeamID=df_W['WTeamID']\ndf_W_LTeamID=df_W['LTeamID']\ndf_W_WScore=df_W['WScore']\ndf_W_LScore=df_W['LScore']\ndf_W1['WTeamID']=df_W_LTeamID\ndf_W1['LTeamID']=df_W_WTeamID\ndf_W1['WScore']=df_W_LScore\ndf_W1['LScore']=df_W_WScore\nlabel_x_W=df_W1.columns[8:23]\nlabel_y_W=df_W1.columns[23:38]\nlabel_x_W=list(label_x_W)\nlabel_y_W=list(label_y_W)\nfor i in range(len(label_x_W)):\n    df_W1[label_x_W[i]]=df_W[label_y_W[i]]\n    df_W1[label_y_W[i]]=df_W[label_x_W[i]]","6ccd2065":"df_W['target']=1\ndf_W1['target']=0\ndf_W_final=df_W.append(df_W1)","93c48519":"df_final.to_csv('M_result_by_game_tourney_editored.csv')\ndf_W_final.to_csv('W_result_by_game_tourney_editored.csv')","ca1f80de":"m,n=np.shape(df_final)","1392d389":"df_final.reset_index(inplace = True)","1109393b":"df_final","c5b9000f":"df_final = df_final.drop(columns = 'index')","417b8824":"df_final","6c15bb28":"data=df_final.copy()\nwseed = data[\"Seed_x\"]\nlseed = data[\"Seed_y\"]\nWseed  = np.zeros([m])\nLseed = np.zeros([m])","7430e5c4":"data","9b58da28":"for i in range(m):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\n    \nseeddiff=Wseed-Lseed","67353f77":"df_final=df_final.drop(['WLoc','Seed_x','Seed_y','WTeamID','WScore','LTeamID','LScore'],axis=1)","49cce048":"m,n=np.shape(df_final)","5fd0c83d":"df_final.insert(n-1,'Seeddiff',seeddiff) ","fa53836f":"df_final.tail()","59e5b64c":"# Split the data \ndf_train=df_final[df_final['Season']<2019]\ndf_test=df_final[df_final['Season']>2018]","4fdc51ff":"x_train = df_train.iloc[:,0:n].values\ny_train = df_train.target.values","1e24bdb6":"x_test = df_test.iloc[:,0:n].values\ny_test = df_test.target.values","a88ce810":"from sklearn.linear_model import LogisticRegressionCV\n\nlogreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train, y_train)\n\ny_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","9e8032f4":"y_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\naccuracy_train = accuracy_score(y_train, y_pred_train)\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprint('Accuracy on the training set =', np.round(accuracy_train,4))\nprint('Accuracy on the test set =', np.round(accuracy_test,4))","9354f78b":"m,n=np.shape(df_W_final)","dd083cc8":"df_W_final.reset_index(inplace = True)","e08d58fe":"df_W_final = df_W_final.drop(columns = 'index')","ac15a7c0":"data=df_W_final.copy()\nwseed = data[\"Seed_x\"]\nlseed = data[\"Seed_y\"]\nWseed  = np.zeros([m])\nLseed = np.zeros([m])","ed22ec95":"for i in range(m):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\n    \nseeddiff=Wseed-Lseed","caad788f":"df_W_final=df_W_final.drop(['WLoc','Seed_x','Seed_y','WTeamID','WScore','LTeamID','LScore'],axis=1)","e7cc51ee":"m,n=np.shape(df_W_final)","9ba1054f":"df_W_final.insert(n-1,'Seeddiff',seeddiff) ","e6233f7d":"# Split the data \ndf_train_W=df_W_final[df_W_final['Season']<2019]\ndf_test_W=df_W_final[df_W_final['Season']>2018]","e64e4d94":"x_train_W = df_train_W.iloc[:,0:n].values\ny_train_W = df_train_W.target.values","9f46cd24":"x_test_W = df_test_W.iloc[:,0:n].values\ny_test_W = df_test_W.target.values","ebcba640":"from sklearn.linear_model import LogisticRegressionCV\n\nlogreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train, y_train)\n\ny_pred_train = logreg.predict(x_train_W)\ny_pred_test = logreg.predict(x_test_W)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","07694d0f":"y_pred_train = logreg.predict(x_train_W)\ny_pred_test = logreg.predict(x_test_W)\n\naccuracy_train = accuracy_score(y_train_W, y_pred_train)\naccuracy_test = accuracy_score(y_test_W, y_pred_test)\nprint('Accuracy on the training set =', np.round(accuracy_train,4))\nprint('Accuracy on the test set =', np.round(accuracy_test,4))","4d10d241":"import xgboost as xgb","ca77de28":"data_xgb = pd.read_csv(\"M_result_by_game_tourney_editored.csv\")\ndata_xgb","71c6c6d8":"wseed = data_xgb[\"Seed_x\"]\nlseed = data_xgb[\"Seed_y\"]\nWseed  = np.zeros([data_xgb.shape[0]])\nLseed = np.zeros([data_xgb.shape[0]])\nfor i in range(data_xgb.shape[0]):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\ndata_xgb[\"Seed_x\"] = Wseed\ndata_xgb[\"Seed_y\"] = Lseed","e67861a3":"data_xgb[\"Score_diff\"] = data_xgb[\"Score_x\"]-data_xgb[\"Score_y\"]\ndata_xgb[\"FGM_diff\"] = data_xgb[\"FGM_x\"]-data_xgb[\"FGM_y\"]\ndata_xgb[\"FGA_diff\"] = data_xgb[\"FGA_x\"]-data_xgb[\"FGA_y\"]\ndata_xgb[\"FGM3_diff\"] = data_xgb[\"FGM3_x\"]-data_xgb[\"FGM3_y\"]\ndata_xgb[\"FGA3_diff\"] = data_xgb[\"FGA3_x\"]-data_xgb[\"FGA3_y\"]\ndata_xgb[\"FTM_diff\"] = data_xgb[\"FTM_x\"]-data_xgb[\"FTM_y\"]\ndata_xgb[\"FTA_diff\"] = data_xgb[\"FTA_x\"]-data_xgb[\"FTA_y\"]\ndata_xgb[\"OR_diff\"] = data_xgb[\"OR_x\"]-data_xgb[\"OR_y\"]\ndata_xgb[\"DR_diff\"] = data_xgb[\"DR_x\"]-data_xgb[\"DR_y\"]\ndata_xgb[\"TO_diff\"] = data_xgb[\"TO_x\"]-data_xgb[\"TO_y\"]\ndata_xgb[\"Stl_diff\"] = data_xgb[\"Stl_x\"]-data_xgb[\"Stl_y\"]\ndata_xgb[\"Blk_diff\"] = data_xgb[\"Blk_x\"]-data_xgb[\"Blk_y\"]\ndata_xgb[\"PF_diff\"] = data_xgb[\"PF_x\"]-data_xgb[\"PF_y\"]\ndata_xgb[\"Seed_diff\"] = data_xgb[\"Seed_x\"]-data_xgb[\"Seed_y\"]\n","d29b82d8":"trainlabel = data_xgb[data_xgb['Season']<2019]['target']\ntestlabel = data_xgb[data_xgb['Season']==2019]['target']\ntrainlabel","4e502919":"traindata = data_xgb[data_xgb['Season']<2019]\ntestdata = data_xgb[data_xgb['Season']==2019]","be46da54":"droplist = [\"Unnamed: 0\",\"LTeamID\",\"WTeamID\",\"WLoc\",\"target\",\"WScore\",\"Score_x\",\"FGM_x\",\"FGA_x\",\"FGM3_x\",\"FGA3_x\",\n            \"LScore\",\"FTM_x\",\"FTA_x\",\"OR_x\",\"DR_x\",\"TO_x\",\"Stl_x\",\"Blk_x\",\n           \"PF_x\",\"Score_y\",\"FGM_y\",\"FGA_y\",\"FGM3_y\",\"FGA3_y\",\"FTM_y\",\"FTA_y\",\n            \"OR_y\",\"DR_y\",\"TO_y\",\"Stl_y\",\"Blk_y\",\"PF_y\",\"Seed_x\",\"Seed_y\"]\ntraindata.drop(droplist,axis=1,inplace = True)\ntestdata.drop(droplist,axis=1,inplace = True)\ntraindata","eaa2f2c8":"xg_reg = xgb.XGBRegressor(objective ='binary:logistic', colsample_bytree = 0.8, learning_rate = 0.001,\n                max_depth = 10, alpha = 7, n_estimators = 50000)\nxg_reg.fit(traindata,trainlabel)","7c1e6941":"preds  = xg_reg.predict(testdata)\npreds = np.floor(preds+0.5)\nnp.sum(preds==testlabel)\/testdata.shape[0]","53cc0f96":"xgb.plot_tree(xg_reg,num_trees=0)\nplt.rcParams['figure.figsize'] = [500, 400]\nplt.show()","2d29323a":"# xgb.plot_importance(xg_reg)\n#plt.rcParams['figure.figsize'] = [500,400]\n# plt.show()","07968396":"data_xgb = pd.read_csv(\"W_result_by_game_tourney_editored.csv\")\n\nwseed = data_xgb[\"Seed_x\"]\nlseed = data_xgb[\"Seed_y\"]\nWseed  = np.zeros([data_xgb.shape[0]])\nLseed = np.zeros([data_xgb.shape[0]])\nfor i in range(data_xgb.shape[0]):\n    Wseed[i] = wseed[i][1:3]\n    Lseed[i] = lseed[i][1:3]\ndata_xgb[\"Seed_x\"] = Wseed\ndata_xgb[\"Seed_y\"] = Lseed","484fd4a3":"data_xgb[['Score_x','Score_y']]","5346f739":"data_xgb[\"Score_diff\"] = data_xgb[\"Score_x\"]-data_xgb[\"Score_y\"]\ndata_xgb[\"FGM_diff\"] = data_xgb[\"FGM_x\"]-data_xgb[\"FGM_y\"]\ndata_xgb[\"FGA_diff\"] = data_xgb[\"FGA_x\"]-data_xgb[\"FGA_y\"]\ndata_xgb[\"FGM3_diff\"] = data_xgb[\"FGM3_x\"]-data_xgb[\"FGM3_y\"]\ndata_xgb[\"FGA3_diff\"] = data_xgb[\"FGA3_x\"]-data_xgb[\"FGA3_y\"]\ndata_xgb[\"FTM_diff\"] = data_xgb[\"FTM_x\"]-data_xgb[\"FTM_y\"]\ndata_xgb[\"FTA_diff\"] = data_xgb[\"FTA_x\"]-data_xgb[\"FTA_y\"]\ndata_xgb[\"OR_diff\"] = data_xgb[\"OR_x\"]-data_xgb[\"OR_y\"]\ndata_xgb[\"DR_diff\"] = data_xgb[\"DR_x\"]-data_xgb[\"DR_y\"]\ndata_xgb[\"TO_diff\"] = data_xgb[\"TO_x\"]-data_xgb[\"TO_y\"]\ndata_xgb[\"Stl_diff\"] = data_xgb[\"Stl_x\"]-data_xgb[\"Stl_y\"]\ndata_xgb[\"Blk_diff\"] = data_xgb[\"Blk_x\"]-data_xgb[\"Blk_y\"]\ndata_xgb[\"PF_diff\"] = data_xgb[\"PF_x\"]-data_xgb[\"PF_y\"]\ndata_xgb[\"Seed_diff\"] = data_xgb[\"Seed_x\"]-data_xgb[\"Seed_y\"]\n","7aaca441":"data_xgb['Score_y']","930bb872":"trainlabel = data_xgb[data_xgb['Season']<2019]['target']\ntestlabel = data_xgb[data_xgb['Season']==2019]['target']\ntrainlabel","afde6969":"traindata = data_xgb[data_xgb['Season']<2019]\ntestdata = data_xgb[data_xgb['Season']==2019]","e6e96f30":"traindata","0949be7b":"droplist = [\"Unnamed: 0\",\"LTeamID\",\"WTeamID\",\"WLoc\",\"target\",\"WScore\",\"Score_x\",\"FGM_x\",\"FGA_x\",\"FGM3_x\",\"FGA3_x\",\n            \"LScore\",\"FTM_x\",\"FTA_x\",\"OR_x\",\"DR_x\",\"TO_x\",\"Stl_x\",\"Blk_x\",\n           \"PF_x\",\"Score_y\",\"FGM_y\",\"FGA_y\",\"FGM3_y\",\"FGA3_y\",\"FTM_y\",\"FTA_y\",\n            \"OR_y\",\"DR_y\",\"TO_y\",\"Stl_y\",\"Blk_y\",\"PF_y\",\"Seed_x\",\"Seed_y\"]\ntraindata.drop(droplist,axis=1,inplace = True)\ntestdata.drop(droplist,axis=1,inplace = True)\ntraindata","7eab5fc0":"xg_reg = xgb.XGBRegressor(objective ='binary:logistic', colsample_bytree = 0.8, learning_rate = 0.001,\n                max_depth = 10, alpha = 7, n_estimators = 50000)\nxg_reg.fit(traindata,trainlabel)","44008565":"preds  = xg_reg.predict(testdata)\npreds = np.floor(preds+0.5)\nnp.sum(preds==testlabel)\/testdata.shape[0]","c7b3b21e":"#xgb.plot_tree(xg_reg,num_trees=0)\n#plt.rcParams['figure.figsize'] = [500, 400]\n#plt.show()","4871d22d":"# xgb.plot_importance(xg_reg)\n#plt.rcParams['figure.figsize'] = [500,400]\n# plt.show()","0cc6dcc8":"!pip install pygam","1dbc0fdc":"from pygam import LinearGAM,f,s,l\nimport eli5\nfrom eli5.sklearn import PermutationImportance","d784525b":"X=x_train\ny=y_train","c8562ec5":"# perform LASSO CV\n# Note that the regularization strength is denoted by alpha in sklearn.\nfrom sklearn import linear_model\ncv = 10\nlassocv = linear_model.LassoCV(cv=cv)\nlassocv.fit(X, y)\nprint('alpha =',lassocv.alpha_.round(4))","f1356ff3":"# draw solution path\nalphas = np.logspace(-8,1,21)\nalphas_lassocv, coefs_lassocv, _ = lassocv.path(X, y, alphas=alphas)\nlog_alphas_lassocv = np.log10(alphas_lassocv)\n\nplt.figure(figsize=(12,8)) \nplt.plot(log_alphas_lassocv,coefs_lassocv.T)\nplt.vlines(x=np.log10(lassocv.alpha_), ymin=np.min(coefs_lassocv), ymax=np.max(coefs_lassocv), \n           color='b',linestyle='-.',label = 'alpha chosen')\nplt.axhline(y=0, color='black',linestyle='--')\nplt.xlabel(r'$\\log_{10}(\\alpha)$', fontsize=12)\nplt.ylabel(r'$\\hat{\\beta}$', fontsize=12, rotation=0)\nplt.title('Solution Path',fontsize=12)\nplt.legend()\nplt.show()","2b532608":"\n# fit a multiple layer percepton (neural network)\nfrom sklearn.neural_network import MLPClassifier\nnames=df_train.drop('target',axis=1).columns\nnames=list(names)\nclf = MLPClassifier(max_iter=1000, random_state=0)\nclf.fit(X, y)\n# define a permutation importance object\nperm = PermutationImportance(clf).fit(X, y)\n# show the importance\neli5.show_weights(perm, feature_names=names)","931833bd":"df_train[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values","85e1656c":"x_train =df_train[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values\nx_test =df_test[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values","1e74ac96":"names = ['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']\nnames","dab8961a":"from pygam import LogisticGAM,f,s,l\n\ngam = LogisticGAM().fit(x_train,y_train)\n# f: factor term\n# some parameters combinations in grid search meet the error exception.\ngam.gridsearch(x_train,y_train)","7ecbf2da":"# plotting\nfig, axs = plt.subplots(2,3,figsize=(20,8))\nfor i, ax in enumerate(axs.flatten()):\n    XX = gam.generate_X_grid(term=i)\n    plt.subplot(ax)\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='grey', ls='--')\n    plt.title(names[i])\nplt.tight_layout()","ab9c18ee":"y_pred_train = gam.predict(x_train)\ny_pred_test = gam.predict(x_test)\n\nprint('The Acc on training set:',accuracy_score(y_train,y_pred_train))\nprint('The Acc on testing set:',accuracy_score(y_test,y_pred_test))","ab023cd1":"X=x_train_W\ny=y_train_W","45104aba":"# perform LASSO CV\n# Note that the regularization strength is denoted by alpha in sklearn.\nfrom sklearn import linear_model\ncv = 10\nlassocv = linear_model.LassoCV(cv=cv)\nlassocv.fit(X, y)\nprint('alpha =',lassocv.alpha_.round(4))","c6e4139f":"# draw solution path\nalphas = np.logspace(-8,1,21)\nalphas_lassocv, coefs_lassocv, _ = lassocv.path(X, y, alphas=alphas)\nlog_alphas_lassocv = np.log10(alphas_lassocv)\n\nplt.figure(figsize=(12,8)) \nplt.plot(log_alphas_lassocv,coefs_lassocv.T)\nplt.vlines(x=np.log10(lassocv.alpha_), ymin=np.min(coefs_lassocv), ymax=np.max(coefs_lassocv), \n           color='b',linestyle='-.',label = 'alpha chosen')\nplt.axhline(y=0, color='black',linestyle='--')\nplt.xlabel(r'$\\log_{10}(\\alpha)$', fontsize=12)\nplt.ylabel(r'$\\hat{\\beta}$', fontsize=12, rotation=0)\nplt.title('Solution Path',fontsize=12)\nplt.legend()\nplt.show()","28ef7090":"# fit a multiple layer percepton (neural network)\nfrom sklearn.neural_network import MLPClassifier\nnames=df_train.drop('target',axis=1).columns\nnames=list(names)\nclf = MLPClassifier(max_iter=1000, random_state=0)\nclf.fit(X, y)\n# define a permutation importance object\nperm = PermutationImportance(clf).fit(X, y)\n# show the importance\neli5.show_weights(perm, feature_names=names)","abed0079":"x_train =df_train[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values\nx_test =df_test[['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']].values","8a6c9945":"names = ['Seeddiff','Score_y','FGM_y','FGA_y','FTM_x','FTA_x']\nnames","87f1af14":"gam = LogisticGAM().fit(x_train,y_train)\n# f: factor term\n# some parameters combinations in grid search meet the error exception.\ngam.gridsearch(x_train_W,y_train_W)","c60bb239":"# plotting\nfig, axs = plt.subplots(2,3,figsize=(20,8))\nfor i, ax in enumerate(axs.flatten()):\n    XX = gam.generate_X_grid(term=i)\n    plt.subplot(ax)\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX))\n    plt.plot(XX[:, i], gam.partial_dependence(term=i, X=XX, width=.95)[1], c='grey', ls='--')\n    plt.title(names[i])\nplt.tight_layout()","23fe43d5":"y_pred_train = gam.predict(x_train)\ny_pred_test = gam.predict(x_test)\n\nprint('The Acc on training set:',accuracy_score(y_train,y_pred_train))\nprint('The Acc on testing set:',accuracy_score(y_test,y_pred_test))","5df4028b":"names=df_train.drop('target',axis=1).columns\nnames=list(names)","a5a74c03":"MENS_DIR_player = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Mens-Data'\nWOMENS_DIR_player = '..\/input\/march-madness-analytics-2020\/2020DataFiles\/2020DataFiles\/2020-Womens-Data'","8c98ec65":"M_players = pd.read_csv(f'{MENS_DIR_player}\/MPlayers.csv')\nW_players = pd.read_csv(f'{WOMENS_DIR_player}\/WPlayers.csv')\nW_players.head()","2d96639b":"def high_order_stats(event_by_player):\n    event_by_player['Points'] = event_by_player['made1']+2*event_by_player['made2']+3*event_by_player['made3']\n    element_list = ['assist','block','foul','made1','made2','made3','miss1','miss2','miss3',\n               'reb','steal','sub','timeout','turnover','Points']\n    for item in element_list:\n        event_by_player[item] = event_by_player[item]\/event_by_player['count']\n    event_by_player['Field_goal'] = (event_by_player['made2']+\n                                 event_by_player['made3'])\/(event_by_player['made2']+\n                                                            event_by_player['made3']+\n                                                           event_by_player['miss2']+\n                                                            event_by_player['miss3'])\n    event_by_player['FT_goal'] = event_by_player['made1']\/(event_by_player['miss1']+event_by_player['made1'])\n    event_by_player['3PT'] = event_by_player['made3']\/(event_by_player['miss3']+event_by_player['made3'])\n    # assist vs turnover\n    event_by_player['AT'] = event_by_player['assist']\/event_by_player['turnover']\n    event_by_player['eFG'] = (event_by_player['made2']+\n                          0.5*event_by_player['made3'])\/(event_by_player['made2']+\n                                                         event_by_player['made3']+\n                                                         event_by_player['miss2']+\n                                                         event_by_player['miss3'])\n    event_by_player['TS'] = event_by_player['Points']\/(2*((event_by_player['made2']+\n                                                         event_by_player['made3']+\n                                                         event_by_player['miss2']+\n                                                         event_by_player['miss3'])\n                                                      +0.44*(event_by_player['made1']+\n                                                         event_by_player['made1'])))\n    event_by_player['PER'] = (event_by_player['Points']+event_by_player['assist']+event_by_player['reb']+event_by_player['steal']+\n                         event_by_player['block']-event_by_player['miss1']-event_by_player['turnover'])\/event_by_player['count']\n    return event_by_player\n    \n\n    ","72de516b":"mkdir('mens_stats')\nmkdir('womens_stats')","dbfcfc13":"# year of stats\n\nyear = 2015\nfor year in range(2015,2020):\n    M_events = pd.read_csv(f'{MENS_DIR_player}\/MEvents{year}.csv')\n    W_events = pd.read_csv(f'{WOMENS_DIR_player}\/WEvents{year}.csv')\n    M_game_made = M_events[['DayNum','EventPlayerID']]\n    W_game_made = W_events[['DayNum','EventPlayerID']]\n    M_game_made['count'] = 0\n    W_game_made['count'] = 0\n    M_game_made = M_game_made.drop_duplicates()\n    W_game_made = W_game_made.drop_duplicates()\n    M_game_made = M_game_made.groupby(['EventPlayerID']).count()\n    M_game_made.reset_index(inplace = True)\n    W_game_made = W_game_made.groupby(['EventPlayerID']).count()\n    W_game_made.reset_index(inplace = True)\n    M_game_made.drop(index = 0,inplace = True)\n    W_game_made.drop(index = 0,inplace = True)\n    M_game_made = M_game_made[['EventPlayerID','count']]\n    W_game_made = W_game_made[['EventPlayerID','count']]\n    M_events_useful = M_events[['EventPlayerID','EventType']]\n    W_events_useful = W_events[['EventPlayerID','EventType']]\n    M_events_useful['count'] = 0\n    W_events_useful['count'] = 0\n    M_events_useful = M_events_useful.groupby(['EventPlayerID','EventType']).count()\n    W_events_useful = W_events_useful.groupby(['EventPlayerID','EventType']).count()\n    M_events_reindex = M_events_useful.reset_index()\n    W_events_reindex = W_events_useful.reset_index()\n    M_events_pivoted=M_events_reindex.pivot('EventPlayerID', 'EventType', 'count')\n    W_events_pivoted=W_events_reindex.pivot('EventPlayerID', 'EventType', 'count')\n    M_event_by_player = M_events_pivoted.fillna(0)\n    W_event_by_player = W_events_pivoted.fillna(0)\n    M_event_by_player = M_event_by_player.drop(index = 0)\n    W_event_by_player = W_event_by_player.drop(index = 0)\n    M_event_by_player = pd.merge(M_event_by_player, M_game_made,on = 'EventPlayerID')\n    W_event_by_player = pd.merge(W_event_by_player, W_game_made,on = 'EventPlayerID')\n    M_event_by_player = high_order_stats(M_event_by_player)\n    W_event_by_player = high_order_stats(W_event_by_player)\n    M_players.rename(columns = {'PlayerID':'EventPlayerID'},inplace = True)\n    W_players.rename(columns = {'PlayerID':'EventPlayerID'},inplace = True)\n\n    M_player_stats = pd.merge(M_players,M_event_by_player,on = 'EventPlayerID',how = 'left')\n    W_player_stats = pd.merge(W_players,W_event_by_player,on = 'EventPlayerID',how = 'left')\n    M_player_stats = M_player_stats.fillna(0)\n    W_player_stats = W_player_stats.fillna(0)\n    \n    \n    M_player_stats.to_csv(f'mens_stats\/M_player_stats_{year}.csv')\n    W_player_stats.to_csv(f'womens_stats\/W_player_stats_{year}.csv')","016e17fb":"def pre_processer(df):\n    player_information=df.iloc[:,0:4]\n    EventPlayerID=player_information['EventPlayerID']\n    df=df.drop(['EventPlayerID','LastName','FirstName'],axis=1)\n    df[df==0]=np.nan\n    pd.isnull(df)\n    df=df.dropna(how='all')\n    df.tail()\n    df.insert(0,'EventPlayerID',EventPlayerID)\n    df=pd.merge(player_information, df, on='EventPlayerID')\n    return df","e2566c47":"def Team_member(df):\n    number_of_teamplayer=Counter(df['TeamID'])\n    #number=list(number_of_tramplayer)\n    number=number_of_teamplayer.values()\n    number=list(number)\n    np.shape(number)\n    \n    return number","b8fea79d":"def TeamID_made(df):\n    TeamID=list(df.drop_duplicates(['TeamID']).TeamID)\n    k=len(TeamID)\n    \n    return TeamID","e230aad2":"def calculator_advanced(i,df,TeamID): \n    df1=df[df['TeamID']==TeamID[i]][['AT','eFG','TS','PER']].sum()\n    #df_sum=df1.append([df2,df3,df4],ignore_index = False)\n    df_sum=pd.DataFrame(df1,columns=[TeamID[i]])\n    return df_sum","b23a4e4f":"def sum_final(df,k,TeamID):\n    df[df['AT']>10000]=0\n    # k=len(TeamID)\n    df_sum_final=calculator_advanced(0,df,TeamID)\n    for i in range (1,k):\n        df_temp=calculator_advanced(i,df,TeamID)\n        df_sum_final=pd.concat([df_sum_final,df_temp],axis=1)\n        #df_sum_final=df_sum_final.append([df_temp],ignore_index = False)\n    return df_sum_final","d074bcc9":"from collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf_2015=pd.read_csv(\"mens_stats\/M_player_stats_2015.csv\")\ndf_2016=pd.read_csv(\"mens_stats\/M_player_stats_2016.csv\")\ndf_2017=pd.read_csv(\"mens_stats\/M_player_stats_2017.csv\")\ndf_2018=pd.read_csv(\"mens_stats\/M_player_stats_2018.csv\")\ndf_2019=pd.read_csv(\"mens_stats\/M_player_stats_2019.csv\")","9b8d1aea":"def pre_processer(df):\n    player_information=df.iloc[:,0:4]\n    EventPlayerID=player_information['EventPlayerID']\n    df=df.drop(['EventPlayerID','LastName','FirstName'],axis=1)\n    df[df==0]=np.nan\n    pd.isnull(df)\n    df=df.dropna(how='all')\n    df.tail()\n    df.insert(0,'EventPlayerID',EventPlayerID)\n    df=pd.merge(player_information, df, on='EventPlayerID')\n    return df\n\ndef Team_member(df):\n    number_of_teamplayer=Counter(df['TeamID'])\n    #number=list(number_of_tramplayer)\n    number=number_of_teamplayer.values()\n    number=list(number)\n    np.shape(number)\n    return number\n\n\ndef TeamID_made(df):\n    TeamID=list(df.drop_duplicates(['TeamID']).TeamID)\n    k=len(TeamID)\n    \n    return TeamID\n\ndef calculator_advanced(i,df,TeamID): \n    df1=df[df['TeamID']==TeamID[i]][['AT','eFG','TS','PER']].sum()\n    #df_sum=df1.append([df2,df3,df4],ignore_index = False)\n    df_sum=pd.DataFrame(df1,columns=[TeamID[i]])\n    return df_sum\n\n\ndef calculator_advanced(i,df,TeamID): \n    df1=df[df['TeamID']==TeamID[i]][['AT','eFG','TS','PER']].sum()\n    #df_sum=df1.append([df2,df3,df4],ignore_index = False)\n    df_sum=pd.DataFrame(df1,columns=[TeamID[i]])\n    return df_sum\n\ndef sum_final(df,k,TeamID):\n    df[df['AT']>10000]=0\n    # k=len(TeamID)\n    df_sum_final=calculator_advanced(0,df,TeamID)\n    for i in range (1,k):\n        df_temp=calculator_advanced(i,df,TeamID)\n        df_sum_final=pd.concat([df_sum_final,df_temp],axis=1)\n        #df_sum_final=df_sum_final.append([df_temp],ignore_index = False)\n    return df_sum_final","2b6c95bf":"df_2015=pre_processer(df_2015)\nnumber_2015=Team_member(df_2015)\nTeamID_2015=TeamID_made(df_2015)\nk_2015=len(TeamID_2015)\ndf_sum_final_2015=sum_final(df_2015,k_2015,TeamID_2015)\nfor i in range(k_2015):\n    df_sum_final_2015.iloc[:,i]=df_sum_final_2015.iloc[:,i]\/number_2015[i]\n\ndf_2016=pre_processer(df_2016)\nnumber_2016=Team_member(df_2016)\nTeamID_2016=TeamID_made(df_2016)\nk_2016=len(TeamID_2016)\ndf_sum_final_2016=sum_final(df_2016,k_2016,TeamID_2016)\nfor i in range(k_2016):\n    df_sum_final_2016.iloc[:,i]=df_sum_final_2016.iloc[:,i]\/number_2016[i]\n\ndf_2017=pre_processer(df_2017)\nnumber_2017=Team_member(df_2017)\nTeamID_2017=TeamID_made(df_2017)\nk_2017=len(TeamID_2017)\ndf_sum_final_2017=sum_final(df_2017,k_2017,TeamID_2017)\nfor i in range(k_2017):\n    df_sum_final_2017.iloc[:,i]=df_sum_final_2017.iloc[:,i]\/number_2017[i]\n    \ndf_2018=pre_processer(df_2018)\nnumber_2018=Team_member(df_2018)\nTeamID_2018=TeamID_made(df_2018)\nk_2018=len(TeamID_2018)\ndf_sum_final_2018=sum_final(df_2018,k_2018,TeamID_2018)\nfor i in range(k_2018):\n    df_sum_final_2018.iloc[:,i]=df_sum_final_2018.iloc[:,i]\/number_2018[i]\n\ndf_2019=pre_processer(df_2019)\nnumber_2019=Team_member(df_2019)\nTeamID_2019=TeamID_made(df_2019)\nk_2019=len(TeamID_2019)\ndf_sum_final_2019=sum_final(df_2019,k_2019,TeamID_2019)\nfor i in range(k_2019):\n    df_sum_final_2019.iloc[:,i]=df_sum_final_2019.iloc[:,i]\/number_2019[i]\ndf_sum_final_2019.tail()","2c1c07a8":"mkdir('player_as')","392c7d26":"df_sum_final_2015.to_csv('player_as\/df_sum_final_2015.csv')\ndf_sum_final_2016.to_csv('player_as\/df_sum_final_2016.csv')\ndf_sum_final_2017.to_csv('player_as\/df_sum_final_2017.csv')\ndf_sum_final_2018.to_csv('player_as\/df_sum_final_2018.csv')\ndf_sum_final_2019.to_csv('player_as\/df_sum_final_2019.csv')","3a2f4054":"df_target=pd.read_csv(\"M_result_by_game_tourney_editored.csv\")","477eb7db":"df_target=df_target[['Season','WTeamID','LTeamID','target']]\ndf_target.tail()","d6321937":"def preprocess_win(df,i,TeamID):\n    df_new=df.T\n    df_new.columns=[['AT_win','eFG_win','TS_win','PER_win']]\n    df_new['Season']=i\n    df_new['WTeamID']=TeamID\n    \n    return df_new","cba2f15c":"def preprocess_lose(df,i,TeamID):\n    df_new=df.T\n    df_new.columns=[['AT_lose','eFG_lose','TS_lose','PER_lose']]\n    df_new['Season']=i\n    df_new['LTeamID']=TeamID\n    \n    return df_new","ef3b6ced":"df_2015_new_win=preprocess_win(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_win=preprocess_win(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_win=preprocess_win(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_win=preprocess_win(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_win=preprocess_win(df_sum_final_2019,2019,TeamID_2019)\ndf_2015_new_lose=preprocess_lose(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_lose=preprocess_lose(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_lose=preprocess_lose(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_lose=preprocess_lose(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_lose=preprocess_lose(df_sum_final_2019,2019,TeamID_2019)","604ee361":"df1=df_2015_new_win.append(df_2016_new_win)\ndf2=df1.append(df_2017_new_win)\ndf3=df2.append(df_2018_new_win)\ndf4=df3.append(df_2019_new_win)\ndf_final_win=df4\ndf_final_win","8bb9d8c5":"df1=df_2015_new_lose.append(df_2016_new_lose)\ndf2=df1.append(df_2017_new_lose)\ndf3=df2.append(df_2018_new_lose)\ndf4=df3.append(df_2019_new_lose)\ndf_final_lose=df4\ndf_final_lose","3ee6c5a6":"df_final_win.columns=df_final_win.columns.get_level_values(0)\ndf_final_win.columns","51f7cc51":"#\u7b2c\u4e00\u53e5\u8bdd\u4e0d\u88ab\u8fd0\u884c\u662f\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u624d\u7528\uff1a\ndf_target_new=pd.merge(df_target,df_final_win,on = ['Season','WTeamID'],how='left')\ndf_target_new.tail()","5311b4c3":"df_final_lose.columns=df_final_lose.columns.get_level_values(0)\ndf_final_lose.columns","65d3e3c5":"df_target_new=pd.merge(df_target_new,df_final_lose,on = ['Season','LTeamID'],how='left')\ndf_target_new.tail()","d06177b0":"df_target_new.to_csv('with_advanced_stat.csv')","21e3b300":"df_2015=pd.read_csv(\"womens_stats\/W_player_stats_2015.csv\")\ndf_2016=pd.read_csv(\"womens_stats\/W_player_stats_2016.csv\")\ndf_2017=pd.read_csv(\"womens_stats\/W_player_stats_2017.csv\")\ndf_2018=pd.read_csv(\"womens_stats\/W_player_stats_2018.csv\")\ndf_2019=pd.read_csv(\"womens_stats\/W_player_stats_2019.csv\")","93df88d4":"df_2015=pre_processer(df_2015)\nnumber_2015=Team_member(df_2015)\nTeamID_2015=TeamID_made(df_2015)\nk_2015=len(TeamID_2015)\ndf_sum_final_2015=sum_final(df_2015,k_2015,TeamID_2015)\nfor i in range(k_2015):\n    df_sum_final_2015.iloc[:,i]=df_sum_final_2015.iloc[:,i]\/number_2015[i]\n\ndf_2016=pre_processer(df_2016)\nnumber_2016=Team_member(df_2016)\nTeamID_2016=TeamID_made(df_2016)\nk_2016=len(TeamID_2016)\ndf_sum_final_2016=sum_final(df_2016,k_2016,TeamID_2016)\nfor i in range(k_2016):\n    df_sum_final_2016.iloc[:,i]=df_sum_final_2016.iloc[:,i]\/number_2016[i]\n\ndf_2017=pre_processer(df_2017)\nnumber_2017=Team_member(df_2017)\nTeamID_2017=TeamID_made(df_2017)\nk_2017=len(TeamID_2017)\ndf_sum_final_2017=sum_final(df_2017,k_2017,TeamID_2017)\nfor i in range(k_2017):\n    df_sum_final_2017.iloc[:,i]=df_sum_final_2017.iloc[:,i]\/number_2017[i]\n    \ndf_2018=pre_processer(df_2018)\nnumber_2018=Team_member(df_2018)\nTeamID_2018=TeamID_made(df_2018)\nk_2018=len(TeamID_2018)\ndf_sum_final_2018=sum_final(df_2018,k_2018,TeamID_2018)\nfor i in range(k_2018):\n    df_sum_final_2018.iloc[:,i]=df_sum_final_2018.iloc[:,i]\/number_2018[i]\n\ndf_2019=pre_processer(df_2019)\nnumber_2019=Team_member(df_2019)\nTeamID_2019=TeamID_made(df_2019)\nk_2019=len(TeamID_2019)\ndf_sum_final_2019=sum_final(df_2019,k_2019,TeamID_2019)\nfor i in range(k_2019):\n    df_sum_final_2019.iloc[:,i]=df_sum_final_2019.iloc[:,i]\/number_2019[i]\ndf_sum_final_2019.tail()","cd55bc38":"df_sum_final_2015.to_csv('player_as\/W_df_sum_final_2015.csv')\ndf_sum_final_2016.to_csv('player_as\/W_df_sum_final_2016.csv')\ndf_sum_final_2017.to_csv('player_as\/W_df_sum_final_2017.csv')\ndf_sum_final_2018.to_csv('player_as\/W_df_sum_final_2018.csv')\ndf_sum_final_2019.to_csv('player_as\/W_df_sum_final_2019.csv')","30777929":"df_target=pd.read_csv(\"W_result_by_game_tourney_editored.csv\")","e1995f9d":"df_target=df_target[['Season','WTeamID','LTeamID','target']]\ndf_target.tail()","496bfdcb":"df_2015_new_win=preprocess_win(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_win=preprocess_win(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_win=preprocess_win(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_win=preprocess_win(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_win=preprocess_win(df_sum_final_2019,2019,TeamID_2019)\ndf_2015_new_lose=preprocess_lose(df_sum_final_2015,2015,TeamID_2015)\ndf_2016_new_lose=preprocess_lose(df_sum_final_2016,2016,TeamID_2016)\ndf_2017_new_lose=preprocess_lose(df_sum_final_2017,2017,TeamID_2017)\ndf_2018_new_lose=preprocess_lose(df_sum_final_2018,2018,TeamID_2018)\ndf_2019_new_lose=preprocess_lose(df_sum_final_2019,2019,TeamID_2019)","a4c9fe73":"df1=df_2015_new_win.append(df_2016_new_win)\ndf2=df1.append(df_2017_new_win)\ndf3=df2.append(df_2018_new_win)\ndf4=df3.append(df_2019_new_win)\ndf_final_win=df4\ndf_final_win","de6fed7a":"df1=df_2015_new_lose.append(df_2016_new_lose)\ndf2=df1.append(df_2017_new_lose)\ndf3=df2.append(df_2018_new_lose)\ndf4=df3.append(df_2019_new_lose)\ndf_final_lose=df4\ndf_final_lose","fbddb938":"df_final_win.columns=df_final_win.columns.get_level_values(0)\ndf_final_win.columns","fd59700f":"#\u7b2c\u4e00\u53e5\u8bdd\u4e0d\u88ab\u8fd0\u884c\u662f\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u624d\u7528\uff1a\ndf_target_new=pd.merge(df_target,df_final_win,on = ['Season','WTeamID'],how='left')\ndf_target_new.tail()","8a38f1ef":"df_final_lose.columns=df_final_lose.columns.get_level_values(0)\ndf_final_lose.columns","ba92cb7e":"df_target_new_W=pd.merge(df_target_new,df_final_lose,on = ['Season','LTeamID'],how='left')\ndf_target_new_W.tail()","27c14484":"df_target_new_W.to_csv('W_with_advanced_stat.csv')","e92ea708":"df_target_new_W","04ea8eab":"df=df_target_new\n#order=['Season','WTeamID','LTeamID','AT_win','eFG_win','TS_win','PER_win','AT_lose','eFG_lose','TS_lose','PER_lose','target']\ntarget=df['target']\ndf=df.drop('target',axis=1)\ndf['target']=target\ndf.tail()","f7d1c022":"df_plot=df[['target','AT_win','eFG_win','TS_win','PER_win']]\nsns.pairplot(df_plot, hue=\"target\", size=3, diag_kind=\"kde\")","fb15884e":"# Split the data \ndf_train=df[df['Season']<2019]\ndf_test=df[df['Season']>2018]\n\ndf_train=df_train.drop(['Season','WTeamID','LTeamID'],axis=1)\ndf_test=df_test.drop(['Season','WTeamID','LTeamID'],axis=1)\n\nm,n=np.shape(df_train)\n\nx_train = df_train.iloc[:,0:n-1].values\ny_train = df_train.target.values\n\nx_test = df_test.iloc[:,0:n-1].values\ny_test = df_test.target.values","82f15ecc":"df=df_target_new_W\n#order=['Season','WTeamID','LTeamID','AT_win','eFG_win','TS_win','PER_win','AT_lose','eFG_lose','TS_lose','PER_lose','target']\ntarget=df['target']\ndf=df.drop('target',axis=1)\ndf['target']=target\ndf.tail()","c6ef24f0":"df_plot=df[['target','AT_win','eFG_win','TS_win','PER_win']]\nsns.pairplot(df_plot, hue=\"target\", size=3, diag_kind=\"kde\")","69a516f3":"# Split the data \ndf_train=df[df['Season']<2019]\ndf_test=df[df['Season']>2018]\n\ndf_train=df_train.drop(['Season','WTeamID','LTeamID'],axis=1)\ndf_test=df_test.drop(['Season','WTeamID','LTeamID'],axis=1)\n\nm,n=np.shape(df_train)\n\nx_train = df_train.iloc[:,0:n-1].values\ny_train = df_train.target.values\n\nx_test = df_test.iloc[:,0:n-1].values\ny_test = df_test.target.values","6bc7b988":"df=df_target_new_W\n#order=['Season','WTeamID','LTeamID','AT_win','eFG_win','TS_win','PER_win','AT_lose','eFG_lose','TS_lose','PER_lose','target']\ntarget=df['target']\ndf=df.drop('target',axis=1)\ndf['target']=target","b5a086bb":"df_plot=df[['target','AT_win','eFG_win','TS_win','PER_win']]\nsns.pairplot(df_plot, hue=\"target\", size=3, diag_kind=\"kde\")","77bb7c61":"# Split the data \ndf_train=df[df['Season']<2019]\ndf_test=df[df['Season']>2018]\n\ndf_train=df_train.drop(['Season','WTeamID','LTeamID'],axis=1)\ndf_test=df_test.drop(['Season','WTeamID','LTeamID'],axis=1)\n\nm,n=np.shape(df_train)\n\nx_train = df_train.iloc[:,0:n-1].values\ny_train = df_train.target.values\n\nx_test = df_test.iloc[:,0:n-1].values\ny_test = df_test.target.values","488dae33":"from sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.metrics import accuracy_score\nlogreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train, y_train)\n\ny_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","bc8f3295":"y_pred_train = logreg.predict(x_train)\ny_pred_test = logreg.predict(x_test)\n\naccuracy_train = accuracy_score(y_train, y_pred_train)\naccuracy_test = accuracy_score(y_test, y_pred_test)\nprint('Accuracy on the training set =', np.round(accuracy_train,4))\nprint('Accuracy on the test set =', np.round(accuracy_test,4))","9b7ef683":"df_2015=df_2015[['AT','eFG','TS','PER','TeamID']]\ndf_2016=df_2016[['AT','eFG','TS','PER','TeamID']]\ndf_2017=df_2017[['AT','eFG','TS','PER','TeamID']]\ndf_2018=df_2018[['AT','eFG','TS','PER','TeamID']]\ndf_2019=df_2019[['AT','eFG','TS','PER','TeamID']]","e01d09df":"coef=np.round(logreg.coef_,4)\ncoef[0][0:4]","050c21c1":"def project(df):\n    df_player_influence=0\n    for i in range(4):  \n        df_player_influence=coef[0][i]*df.iloc[:,i]+df_player_influence\n    df['player_influence']=df_player_influence\n    return df","b125e514":"df_2015_new=project(df_2015)\ndf_2016_new=project(df_2016)\ndf_2017_new=project(df_2017)\ndf_2018_new=project(df_2018)\ndf_2019_new=project(df_2019)\n\ndf_2015_new.dropna(axis=0,how='any',inplace=True)\ndf_2016_new.dropna(axis=0,how='any',inplace=True)\ndf_2017_new.dropna(axis=0,how='any',inplace=True)\ndf_2018_new.dropna(axis=0,how='any',inplace=True)\ndf_2019_new.dropna(axis=0,how='any',inplace=True)","4a08aab5":"def sum_influence(df,k,TeamID,q,number):\n    # k=len(TeamID)\n    df_sum_final=[]\n    df_sum_final.append(df[df['TeamID']==TeamID[0]]['player_influence'].sum())\n    lists=['influence_2015','influence_2016','influence_2017','influence_2018','influence_2019']\n    for i in range (1,k):\n        df_temp=df[df['TeamID']==TeamID[i]]['player_influence'].sum()\n        df_sum_final.append(df_temp)\n        #df_sum_final=df_sum_final.append([df_temp],ignore_index = False)\n    df_sum_final=pd.DataFrame(df_sum_final,columns=[lists[q]])\n    for i in range(k):\n        df_sum_final.loc[i]=df_sum_final.loc[i]\/number[i]\n    return df_sum_final","14f49e5f":"team_2015_influence=sum_influence(df_2015_new,k_2015,TeamID_2015,0,number_2015)\nteam_2015_influence['Season_2015']=2015\nteam_2015_influence['TeamID']=TeamID_2015\n\nteam_2016_influence=sum_influence(df_2016_new,k_2016,TeamID_2016,1,number_2016)\nteam_2016_influence['Season_2016']=2016\nteam_2016_influence['TeamID']=TeamID_2016\n\nteam_2017_influence=sum_influence(df_2017_new,k_2017,TeamID_2017,2,number_2017)\nteam_2017_influence['Season_2017']=2017\nteam_2017_influence['TeamID']=TeamID_2017\n\nteam_2018_influence=sum_influence(df_2018_new,k_2018,TeamID_2018,3,number_2018)\nteam_2018_influence['Season_2018']=2018\nteam_2018_influence['TeamID']=TeamID_2018\n\nteam_2019_influence=sum_influence(df_2019_new,k_2019,TeamID_2019,4,number_2019)\nteam_2019_influence['Season_2019']=2019\nteam_2019_influence['TeamID']=TeamID_2019","324fa3c1":"df_1=pd.merge(team_2015_influence,team_2016_influence,on=['TeamID'])\ndf_2=pd.merge(df_1,team_2017_influence,on=['TeamID'])\ndf_3=pd.merge(df_2,team_2018_influence,on=['TeamID'])\ndf_final_influence=pd.merge(df_3,team_2019_influence,on=['TeamID'])\ndf_final_influence=df_final_influence.drop(['Season_2015','Season_2016','Season_2017','Season_2018','Season_2019'],axis=1)\nTeamID=df_final_influence['TeamID']\ndf_final_influence.drop(['TeamID'],axis=1,inplace=True)\ndf_final_influence.insert(0,'TeamID',TeamID)\ndf_final_influence.tail()","629e8fdc":"df_final_influence.to_csv('team_influence_time_series.csv')","ab246e12":"!pip install pmdarima","d2139b8f":"import pmdarima as pm\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.stattools import adfuller\n\ndf_input=df_final_influence.iloc[:,1:6]\ndf_input=df_input.T\ndf_input.tail()\n\n\ndef auto_arima(df,i):\n    model = pm.auto_arima(df.iloc[:,i], trace=False, error_action='ignore', suppress_warnings=True)\n    model.fit(df.iloc[:,i])\n    forecast = model.predict(n_periods=1)\n    \n    return forecast","b65ed95a":"m,n=np.shape(df_input)\nresult=[]\nfor i in range(n):\n    temp=auto_arima(df_input,i)\n    result.append(temp)","3812fe22":"result=pd.DataFrame(result,columns=['prediction_2020'])\nresult=result.T\nresult","e97ffb48":"df_output=df_input.append(result)\ndf_output.tail()","1a44c2ab":"df_output.to_csv('team_influence_prediction.csv')","394bcd5b":"!pip install chart_studio\n!pip install bubbly","b4e9d10a":"df_output_new=df_output.T\ndf_1=df_output_new[['influence_2015']]\ndf_1.rename(columns={'influence_2015': 'influence'}, inplace=True)\ndf_1['teamid']=TeamID\ndf_1['season']='Real'\n\ndf_2=df_output_new[['influence_2016']]\ndf_2.rename(columns={'influence_2016': 'influence'}, inplace=True)\ndf_2['teamid']=TeamID\ndf_2['season']='Real'\n\ndf_3=df_output_new[['influence_2017']]\ndf_3.rename(columns={'influence_2017': 'influence'}, inplace=True)\ndf_3['teamid']=TeamID\ndf_3['season']='Real'\n\ndf_4=df_output_new[['influence_2018']]\ndf_4.rename(columns={'influence_2018': 'influence'}, inplace=True)\ndf_4['teamid']=TeamID\ndf_4['season']='Real'\n\ndf_5=df_output_new[['influence_2019']]\ndf_5.rename(columns={'influence_2019': 'influence'}, inplace=True)\ndf_5['teamid']=TeamID\ndf_5['season']='Real'\n\ndf_6=df_output_new[['prediction_2020']]\ndf_6.rename(columns={'prediction_2020': 'influence'}, inplace=True)\ndf_6['teamid']=TeamID\ndf_6['season']='Prediction'\n\ndf_bubble=pd.concat([df_1,df_2,df_3,df_4,df_5,df_6],axis=0)\ndf_bubble\n\n#df_bubble.iloc[:,0]=df_bubble.iloc[:,0]-min(df_bubble.iloc[:,0])\ndf_bubble.reset_index(drop=True, inplace=True)\ndf_bubble.sort_values(by='influence',ascending=False,inplace=True)\ndf_bubble_plot=df_bubble.head(100)\ndf_bubble_plot.tail()\n","f4f0d0db":"from bubbly.bubbly import bubbleplot \nfrom plotly.offline import iplot\nimport chart_studio.plotly as py\n","d409ed29":"figure = bubbleplot(dataset=df_bubble_plot, x_column='teamid', y_column='influence', \n                    bubble_column='season', size_column='influence', color_column='season', \n                    x_logscale=True, scale_bubble=2, height=350)\n\niplot(figure)","80854ddd":"import seaborn as sns\ndf_influence = df_bubble['influence']\nplt.figure(figsize=(8,6))\nsns.set_style(\"darkgrid\")\nsns.kdeplot(data=df_influence,label=\"Team_Competitiveness\" ,shade=True)","a33c6ddb":"logreg = LogisticRegressionCV(cv=5,random_state=0, solver='newton-cg')\nlogreg.fit(x_train_W, y_train_W)\n\ny_pred_train = logreg.predict(x_train_W)\ny_pred_test = logreg.predict(x_test_W)\n\nprint(\"Coefficients :\", np.round(logreg.intercept_,4), np.round(logreg.coef_,4))","fe0bbcb4":"df_2015=df_2015[['AT','eFG','TS','PER','TeamID']]\ndf_2016=df_2016[['AT','eFG','TS','PER','TeamID']]\ndf_2017=df_2017[['AT','eFG','TS','PER','TeamID']]\ndf_2018=df_2018[['AT','eFG','TS','PER','TeamID']]\ndf_2019=df_2019[['AT','eFG','TS','PER','TeamID']]","7d900c76":"Basiclly, these are two opening questions related to various factors:\n* Players' physical condition at the time\n* Audiences' support for host team\n* Psychological quality for coaches and players\n* Weather, Competiveness, and chance\n\nIn this notebook, first, we will try to **make a prediction of the tournament result in season 2019-2020**. Second, we will seek to quantify the player influence as objective as possible, by abusing the terminology of the official definition, **define how influent a college basketball player can be**.","fe26a90f":"##  analysis by year","1fbb01d8":"## using advanced statistics","32f5fe96":"# Regression","bc69b6ad":"## logistic regression with advanced stats","2cb8b8ff":"## variable importance","e5d0140f":"## data for women","c40a49b1":"### What's the result in *March Madness*(2019-2020) if coronavirus did not spread?\n### Do players fail to match, match, or exceed expectations according to their previous seasons?","2b5e8d7a":"# Logistic Regression","f80e6ce9":"# Using PyGam","258a83db":"# XGboost","bda9af28":"## same for women","14ec05d7":"## xgboost for women","4f4b55e9":"#### We use pairplot to show the bivariate data relation.\n#### Where we find \"target=1\" group shows a tighter convergence than \"target=0\" group. There is a different distribution of these four advanced statistics(AT,eFG,TS,PER) according to these two \"targets\", that is to say to some degree, \"target\" can be explained by these four stats. Hence, we then use Logistic Regression.","0248b5a0":"## lasso selection","e6936695":"# Begining of player stats mining","b53acfb7":"To load the data of regular season, use 'MRegularSeasibCompactResults.csv' or 'WRegularSeasibCompactResults.csv'"}}