{"cell_type":{"5593d2a9":"code","1e51d0d3":"code","e711242d":"code","e80a4df7":"code","d9ae6c7f":"code","5dc4f7f2":"code","db183723":"code","5cc13ed5":"code","c42a0034":"code","8e2e0926":"code","3a5ad9a4":"code","258d8363":"code","3f86da49":"code","9c7a2f32":"code","b0bb4b18":"code","8730eda5":"code","1a9fc3d1":"code","e98bcf68":"code","8fbf139b":"code","1dc22987":"code","9818d3fd":"code","edcf71ea":"code","cab84799":"code","df0c8bad":"code","35a7e6b5":"code","e4ae770d":"code","ef0d1496":"code","2e0f155c":"code","cc7f2007":"code","b90b3f5d":"code","f4b7bd98":"code","125e74aa":"code","f870360e":"code","87dcbb94":"code","bb29fd10":"code","690bf2f5":"code","d9b2487f":"code","b99eff1a":"markdown","c6a08cb2":"markdown","2fad1412":"markdown","8ec61679":"markdown","19ebdf85":"markdown","acccd4c5":"markdown","6573a82f":"markdown","d3e0eb80":"markdown","eb22b12e":"markdown","19a7871f":"markdown","e4ada917":"markdown","767b459c":"markdown","2eb5a655":"markdown","ee13ba9f":"markdown","f3e06061":"markdown","a382dcbb":"markdown","6ff29830":"markdown","1f38a675":"markdown","2486895e":"markdown","9a5eed45":"markdown","4f43ec41":"markdown","5da8b494":"markdown","fd423777":"markdown","7bca3748":"markdown","b87f0692":"markdown","9b7e7d92":"markdown","9cb86e4c":"markdown","fc7b5981":"markdown","bbb12ef4":"markdown","78167661":"markdown","c409fac3":"markdown","2cc98db6":"markdown"},"source":{"5593d2a9":"# Load in our libraries\nimport pandas as pd\nimport numpy as np\nimport re\nimport sklearn\nimport xgboost as xgb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# 5\uac1c\uc758 \ubaa8\ub378\uc744 \uad50\ucc28 \uac80\uc99d\ud558\uba70 \uc0ac\uc6a9\ud574\ubcfc \uac83\uc785\ub2c8\ub2e4.\nfrom sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n                              GradientBoostingClassifier, ExtraTreesClassifier)\nfrom sklearn.svm import SVC\nfrom sklearn.cross_validation import KFold","1e51d0d3":"# \ud6c8\ub828 \ub370\uc774\ud130 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\n# passengerID\ub97c \ub2e4\ub978 \ubcc0\uc218\ub85c \uc800\uc7a5\nPassengerId = test['PassengerId']\n\ntrain.head(3)","e711242d":"full_data = [train, test]\n\n# \uc800\uc790\uac00 \ubcc4\ub3c4\ub85c \ucd94\uac00\ud55c \uba87\uba87 \ud2b9\uc9d5\n\n## a. \uc774\ub984 \uae38\uc774 \ubd80\uc5ec\ntrain['Name_length'] = train['Name'].apply(len)\ntest['Name_length'] = test['Name'].apply(len)\n\n## b. \uc2b9\uac1d\uc774 \ud0c0\uc774\ud0c0\ub2c9\uc5d0 Cabin\uc744 \uac00\uc9c0\uace0 \uc788\uc5c8\ub294\uc9c0 \uc5ec\ubd80\ub97c \uc54c\ub824\uc8fc\ub294 \ubcc0\uc218\ntrain['Has_Cabin'] = train[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\ntest['Has_Cabin'] = test[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)","e80a4df7":"# Sina\uc5d0 \uc758\ud55c Feature engineering \ub2e8\uacc4\n\n## a. SibSp\uc640 Parch\uc758 \uacb0\ud569\uc73c\ub85c FamilySize\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218 \uc0dd\uc131\nfor dataset in full_data:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1","d9ae6c7f":"## b. FamilySize\ub85c\ubd80\ud130 IsAlone(\ub3c5\uc2e0 \uc5ec\ubd80)\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218 \uc0dd\uc131\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1","5dc4f7f2":"## c. Embarked \uc5f4\uc5d0\uc11c \ubaa8\ub4e0 Null\uac12 \uc81c\uac70('S'\ub77c\ub294 \uac12\uc73c\ub85c \ub2e4 \ucc44\uc6b0\uac8c \ub428)\nfor dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","db183723":"## d. Fare \uc5f4\uc5d0\uc11c \ubaa8\ub4e0 Null\uac12 \uc81c\uac70 \ubc0f CategoricalFare\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218 \uc0dd\uc131\nfor dataset in full_data:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\ntrain['CategoricalFare'] = pd.qcut(train['Fare'], 4)","5cc13ed5":"## e. CagegoricalAge\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218 \uc0dd\uc131\nfor dataset in full_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\ntrain['CategoricalAge'] = pd.cut(train['Age'], 5)","c42a0034":"## f. \uc2b9\uac1d \uc774\ub984\uc758 title \ucd94\ucd9c\ud558\ub294 \ud568\uc218 \uc815\uc758\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"","8e2e0926":"## g. Title(\uc2b9\uac1d \uc774\ub984\uc758 title\uc744 \ud3ec\ud568)\uc774\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218 \uc0dd\uc131\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)","3a5ad9a4":"## h. \ub3c5\ud2b9\ud55c \ud0c0\uc774\ud2c0\uc740 \ud558\ub098\uc758 \uc0c8\ub85c\uc6b4 \uadf8\ub8f9\uc778 'Rare'\ub85c \uadf8\ub8f9\ud654\nfor dataset in full_data:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr',\n                                                 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')","258d8363":"for dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n    \n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4 ;","3f86da49":"# \ubcc0\uc218 \uc120\ud0dd\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp']\ntrain = train.drop(drop_elements, axis = 1)\ntrain = train.drop(['CategoricalAge', 'CategoricalFare'], axis = 1)\ntest  = test.drop(drop_elements, axis = 1)","9c7a2f32":"train.head(3)","b0bb4b18":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","8730eda5":"g = sns.pairplot(train[[u'Survived', u'Pclass', u'Sex', u'Age', u'Parch', u'Fare', u'Embarked',\n       u'FamilySize', u'Title']], hue='Survived', palette = 'seismic',size=1.2,diag_kind = 'kde',diag_kws=dict(shade=True),plot_kws=dict(s=10) )\ng.set(xticklabels=[])","1a9fc3d1":"# \ub098\uc911\uc5d0 \uc720\uc6a9\ud558\uac8c \uc4f0\uc77c \uba87 \uac00\uc9c0 \uc720\uc6a9\ud55c \ub9e4\uac1c \ubcc0\uc218\nntrain = train.shape[0]\nntest = test.shape[0]\nSEED = 0 # for reproducibility\nNFOLDS = 5 # set folds for out-of-fold prediction\nkf = KFold(ntrain, n_folds= NFOLDS, random_state=SEED)","e98bcf68":"# Sklearn \ubd84\ub958\uae30\ub97c \ud655\uc7a5\ud558\ub294 \ud074\ub798\uc2a4 \uc0dd\uc131\nclass SklearnHelper(object):\n    def __init__(self, clf, seed=0, params=None):\n        params['random_state'] = seed\n        self.clf = clf(**params)\n\n    def train(self, x_train, y_train):\n        self.clf.fit(x_train, y_train)\n\n    def predict(self, x):\n        return self.clf.predict(x)\n    \n    def fit(self,x,y):\n        return self.clf.fit(x,y)\n    \n    def feature_importances(self,x,y):\n        print(self.clf.fit(x,y).feature_importances_)\n    \n# Class to extend XGboost classifer","8fbf139b":"def get_oof(clf, x_train, y_train, x_test):\n    oof_train = np.zeros((ntrain,))\n    oof_test = np.zeros((ntest,))\n    oof_test_skf = np.empty((NFOLDS, ntest))\n\n    for i, (train_index, test_index) in enumerate(kf):\n        x_tr = x_train[train_index]\n        y_tr = y_train[train_index]\n        x_te = x_train[test_index]\n\n        clf.train(x_tr, y_tr)\n\n        oof_train[test_index] = clf.predict(x_te)\n        oof_test_skf[i, :] = clf.predict(x_test)\n\n    oof_test[:] = oof_test_skf.mean(axis=0)\n    return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)","1dc22987":"# \ud574\ub2f9 \ubd84\ub958\uae30\uc5d0 \ub300\ud55c \ub9e4\uac1c \ubcc0\uc218 \uc785\ub825\n\n# Random Forest parameters\nrf_params = {\n    'n_jobs': -1,\n    'n_estimators': 500,\n     'warm_start': True, \n     #'max_features': 0.2,\n    'max_depth': 6,\n    'min_samples_leaf': 2,\n    'max_features' : 'sqrt',\n    'verbose': 0\n}\n\n# Extra Trees Parameters\net_params = {\n    'n_jobs': -1,\n    'n_estimators':500,\n    #'max_features': 0.5,\n    'max_depth': 8,\n    'min_samples_leaf': 2,\n    'verbose': 0\n}\n\n# AdaBoost parameters\nada_params = {\n    'n_estimators': 500,\n    'learning_rate' : 0.75\n}\n\n# Gradient Boosting parameters\ngb_params = {\n    'n_estimators': 500,\n     #'max_features': 0.2,\n    'max_depth': 5,\n    'min_samples_leaf': 2,\n    'verbose': 0\n}\n\n# Support Vector Classifier parameters \nsvc_params = {\n    'kernel' : 'linear',\n    'C' : 0.025\n    }","9818d3fd":"# 5\uac1c\uc758 \uac1d\uccb4 \uc0dd\uc131\nrf = SklearnHelper(clf=RandomForestClassifier, seed=SEED, params=rf_params)\net = SklearnHelper(clf=ExtraTreesClassifier, seed=SEED, params=et_params)\nada = SklearnHelper(clf=AdaBoostClassifier, seed=SEED, params=ada_params)\ngb = SklearnHelper(clf=GradientBoostingClassifier, seed=SEED, params=gb_params)\nsvc = SklearnHelper(clf=SVC, seed=SEED, params=svc_params)","edcf71ea":"# Seagate \ubaa8\ub378\uc5d0 \uacf5\uae09\ud560 \ud6c8\ub828, \ud14c\uc2a4\ud2b8 \ubc0f \ud0c0\uae43(Survived) \ub370\uc774\ud130 \ud504\ub808\uc784\uc758 \ucd95\uc18c\ub41c \ubc30\uc5f4 \uc0dd\uc131\ny_train = train['Survived'].ravel()\ntrain = train.drop(['Survived'], axis=1)\nx_train = train.values # Creates an array of the train data\nx_test = test.values # Creats an array of the test data","cab84799":"# OOF \ud6c8\ub828 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\uce21 \uc0dd\uc131(\uc774 \uacb0\uacfc\ub294 \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub85c \uc0ac\uc6a9\ub428)\net_oof_train, et_oof_test = get_oof(et, x_train, y_train, x_test) # Extra Trees\nrf_oof_train, rf_oof_test = get_oof(rf,x_train, y_train, x_test) # Random Forest\nada_oof_train, ada_oof_test = get_oof(ada, x_train, y_train, x_test) # AdaBoost \ngb_oof_train, gb_oof_test = get_oof(gb,x_train, y_train, x_test) # Gradient Boost\nsvc_oof_train, svc_oof_test = get_oof(svc,x_train, y_train, x_test) # Support Vector Classifier\n\nprint(\"Training is complete\")","df0c8bad":"rf_feature = rf.feature_importances(x_train,y_train)\net_feature = et.feature_importances(x_train, y_train)\nada_feature = ada.feature_importances(x_train, y_train)\ngb_feature = gb.feature_importances(x_train,y_train)","35a7e6b5":"# \uc800\uc790\uc758 \uacb0\uacfc\uac12\n\"\"\"\nrf_features = [0.10474135,  0.21837029,  0.04432652,  0.02249159,  0.05432591,  0.02854371,\n               0.07570305,  0.01088129 , 0.24247496,  0.13685733 , 0.06128402]\net_features = [0.12165657,  0.37098307  ,0.03129623 , 0.01591611 , 0.05525811 , 0.028157,\n               0.04589793 , 0.02030357 , 0.17289562 , 0.04853517,  0.08910063]\nada_features = [0.028 ,   0.008  ,      0.012   ,     0.05866667,   0.032 ,       0.008,\n                0.04666667 ,  0.     ,      0.05733333,   0.73866667,   0.01066667]\ngb_features = [0.06796144 , 0.03889349 , 0.07237845 , 0.02628645 , 0.11194395,  0.04778854,\n               0.05965792 , 0.02774745,  0.07462718,  0.4593142 ,  0.01340093]\n\"\"\"\n\n# \ubcf8\uc778\uc758 \uacb0\uacfc\uac12\nrf_features = [0.12744467, 0.19878228, 0.03280782, 0.02026083, 0.07062299, 0.02371953,\n               0.10598414, 0.06506545, 0.06885129, 0.01377609, 0.27268491]\net_features = [0.12268921, 0.37993562, 0.02912038, 0.01654575, 0.05556577, 0.02857685,\n               0.04689155, 0.08409832, 0.04365948, 0.02129523, 0.17162184]\nada_features = [0.03, 0.01, 0.02, 0.062, 0.034, 0.008, 0.696, 0.012, 0.05, 0.004, 0.074]\ngb_features = [0.07202989, 0.03244964, 0.10381478, 0.0322107,  0.08839205, 0.06451757,\n               0.42717722, 0.02277748, 0.06645172, 0.02087609, 0.06930285]","e4ae770d":"cols = train.columns.values\n# Create a dataframe with features\nfeature_dataframe = pd.DataFrame({'features': cols,\n                                  'Random Forest feature importances': rf_features,\n                                  'Extra Trees feature importances': et_features,\n                                  'AdaBoost feature importances': ada_features,\n                                  'Gradient Boost feature importances': gb_features})","ef0d1496":"# Scatter plot for Random Forest feature importances\ntrace = go.Scatter(y = feature_dataframe['Random Forest feature importances'].values,\n                   x = feature_dataframe['features'].values,\n                   mode='markers',\n                   marker=dict(sizemode = 'diameter', sizeref = 1, size = 25,\n                               color = feature_dataframe['Random Forest feature importances'].values,\n                               colorscale='Portland', showscale=True),\n                   text = feature_dataframe['features'].values)\ndata = [trace]\n\nlayout= go.Layout(autosize= True,\n                  title= 'Random Forest Feature Importance',\n                  hovermode= 'closest',\n                  yaxis=dict(title='Feature Importance', ticklen= 5, gridwidth= 2),\n#                 xaxis= dict(title='Pop', ticklen= 5, zeroline= False, gridwidth= 2),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')","2e0f155c":"# Scatter plot for Extra Trees feature importances\ntrace = go.Scatter(y = feature_dataframe['Extra Trees feature importances'].values,\n                   x = feature_dataframe['features'].values,\n                   mode='markers',\n                   marker=dict(sizemode = 'diameter', sizeref = 1, size = 25,\n                               color = feature_dataframe['Extra Trees feature importances'].values,\n                               colorscale='Portland', showscale=True),\n                   text = feature_dataframe['features'].values)\ndata = [trace]\n\nlayout= go.Layout(autosize= True,\n                  title='Extra Trees feature importances',\n                  hovermode= 'closest',\n                  yaxis=dict(title='Feature Importance', ticklen= 5, gridwidth= 2),\n#                 xaxis= dict(title='Pop', ticklen= 5, zeroline= False, gridwidth= 2),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')","cc7f2007":"# Scatter plot for AdaBoost feature importances\ntrace = go.Scatter(y = feature_dataframe['AdaBoost feature importances'].values,\n                   x = feature_dataframe['features'].values,\n                   mode='markers',\n                   marker=dict(sizemode = 'diameter', sizeref = 1, size = 25,\n                               color = feature_dataframe['AdaBoost feature importances'].values,\n                               colorscale='Portland', showscale=True),\n                   text = feature_dataframe['features'].values)\ndata = [trace]\n\nlayout= go.Layout(autosize= True,\n                  title='AdaBoost feature importances',\n                  hovermode= 'closest',\n                  yaxis=dict(title='Feature Importance', ticklen= 5, gridwidth= 2),\n#                 xaxis= dict(title='Pop', ticklen= 5, zeroline= False, gridwidth= 2),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')","b90b3f5d":"# Scatter plot for Gradient Boost feature importances\ntrace = go.Scatter(y = feature_dataframe['Gradient Boost feature importances'].values,\n                   x = feature_dataframe['features'].values,\n                   mode='markers',\n                   marker=dict(sizemode = 'diameter', sizeref = 1, size = 25,\n                               color = feature_dataframe['Gradient Boost feature importances'].values,\n                               colorscale='Portland', showscale=True),\n                   text = feature_dataframe['features'].values)\ndata = [trace]\n\nlayout= go.Layout(autosize= True,\n                  title='Gradient Boost feature importances',\n                  hovermode= 'closest',\n                  yaxis=dict(title='Feature Importance', ticklen= 5, gridwidth= 2),\n#                 xaxis= dict(title='Pop', ticklen= 5, zeroline= False, gridwidth= 2),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig,filename='scatter2010')","f4b7bd98":"# Create the new column containing the average of values\n\nfeature_dataframe['mean'] = feature_dataframe.mean(axis= 1) # axis = 1 computes the mean row-wise\nfeature_dataframe.head(3)","125e74aa":"y = feature_dataframe['mean'].values\nx = feature_dataframe['features'].values\ndata = [go.Bar(x= x,\n               y= y,\n               width = 0.5,\n               marker=dict(color = feature_dataframe['mean'].values,\n                           colorscale='Portland',\n                           showscale=True,\n                           reversescale = False),\n               opacity=0.6)]\n\nlayout= go.Layout(autosize= True,\n                  title='Barplots of Mean Feature Importance',\n                  hovermode='closest',\n#                 xaxis= dict(title='Pop', ticklen=5, zeroline=False, gridwidth=2,),\n                  yaxis=dict(title='Feature Importance', ticklen=5, gridwidth=2),\n                  showlegend= False)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='bar-direct-labels')","f870360e":"base_predictions_train = pd.DataFrame({'RandomForest': rf_oof_train.ravel(),\n                                       'ExtraTrees': et_oof_train.ravel(),\n                                       'AdaBoost': ada_oof_train.ravel(),\n                                       'GradientBoost': gb_oof_train.ravel()})\nbase_predictions_train.head()","87dcbb94":"data = [go.Heatmap(z=base_predictions_train.astype(float).corr().values,\n                   x=base_predictions_train.columns.values,\n                   y=base_predictions_train.columns.values,\n                   colorscale='Viridis',\n                   showscale=True,\n                   reversescale = True)]\npy.iplot(data, filename='labelled-heatmap')","bb29fd10":"x_train = np.concatenate((et_oof_train, rf_oof_train, ada_oof_train, gb_oof_train, svc_oof_train), axis=1)\nx_test = np.concatenate((et_oof_test, rf_oof_test, ada_oof_test, gb_oof_test, svc_oof_test), axis=1)","690bf2f5":"gbm = xgb.XGBClassifier(n_estimators=2000, max_depth= 4, min_child_weight= 2,\n                        gamma=0.9, subsample=0.8, colsample_bytree=0.8, # learning_rate = 0.02,\n                        objective= 'binary:logistic', nthread= -1, scale_pos_weight=1).fit(x_train, y_train)\npredictions = gbm.predict(x_test)","d9b2487f":"# Generate Submission File \nStackingSubmission = pd.DataFrame({'PassengerId': PassengerId, 'Survived': predictions})\nStackingSubmission.to_csv(\"StackingSubmission.csv\", index=False)","b99eff1a":"<a id=\"13\"><\/a> <br>\n## 4-5. Plotly \uc0b0\uc810\ub3c4 \uadf8\ub9bc\uc744 \ud1b5\ud55c \ubc18\uc751\uc801 \ubcc0\uc218\uc758 \uc911\uc694\ub3c4\n\n\uc800\ub294 \uc774 \uc2dc\uc810\uc5d0\uc11c \ub300\ud654\ud615 Plotly \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \"\uc0b0\uc810\ub3c4\"\ub97c \ud638\ucd9c\ud558\uc5ec,<br>\n\ubd84\uc0b0 \ud50c\ub86f\uc744 \ud1b5\ud574 \ub2e4\ub978 \ubd84\ub958\uae30\uc758 \ud615\uc0c1 \uac00\uc838\uc624\uae30 \uac12\uc744 \uc2dc\uac01\ud654\ud560 \uac83\uc785\ub2c8\ub2e4.","c6a08cb2":"\ubcc0\uc218\ub4e4\uc744 \uccad\uc18c\ud558\uace0 \uad00\ub828 \uc815\ubcf4\ub97c \ucd94\ucd9c\ud558\uace0 \ubc94\uc8fc\ud615 \uc5f4\uc744 \uc0ad\uc81c\ud588\uc73c\ub2c8, \uc774\uc81c \uc6b0\ub9ac\uc758 \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc5d0 \uc801\ud569\ud55c \ud615\uc2dd\uc774 \ub418\uac8c \ub9cc\ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4.<br>\n\uadf8\ub7ec\ub098 \uc9c4\ud589\ud558\uae30 \uc804\uc5d0 \ubcc0\ud658\ub41c \ub370\uc774\ud130 \uc138\ud2b8\uc758 \uac04\ub2e8\ud55c \uc0c1\uad00 \uad00\uacc4 \ubc0f \ubd84\ud3ec\ub3c4\ub97c \uc0dd\uc131\ud558\uc5ec \uadf8 \uc591\uc0c1\uc744 \uad00\ucc30\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n<a id=\"4\"><\/a> <br>\n## 2-2. \uc2dc\uac01\ud654","2fad1412":"<a id=\"7\"><\/a> <br>\n## 3-2. \uc608\uce21 \ubd88\uac00\n\n\uc18c\uac1c \uc139\uc158\uc5d0\uc11c \uc704\uc5d0\uc11c \uc5b8\uae09\ud55c \ubc14\uc640 \uac19\uc774,<br>\n\uc2a4\ud0dd\uc740 2\ub2e8\uacc4 \ubaa8\ub378\uc5d0 \ub300\ud55c \uad50\uc721\uc744 \uc704\ud574 \uae30\ubcf8 \ubd84\ub958\uae30\uc758 \uc608\uce21\uc744 \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4.\n\n\uadf8\ub7ec\ub098 \ub2e8\uc21c\ud788 \uc804\uccb4 \ud6c8\ub828 \ub370\uc774\ud130\uc5d0 \uae30\ucd08 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uace0,<br>\n\uc804\uccb4 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\uce21\uc744 \uc0dd\uc131\ud55c \ub2e4\uc74c,<br>\n2\ucc28 \ud6c8\ub828\uc744 \uc704\ud574 \uae30\ubcf8 \ubaa8\ub378\uc744 \ucd9c\ub825\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.\n\n\uc774\ub294 \uae30\ubcf8 \ubaa8\ub378 \uc608\uce21\uc774 \uc774\ubbf8 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc744 \"\ubcf4\uc558\uae30\" \ub54c\ubb38\uc5d0 \uc774\ub7ec\ud55c \uc608\uce21\uc744 \uc81c\uacf5\ud560 \ub54c \uc624\ubc84 \ud53c\ud305\uc758 \uc704\ud5d8\uc744 \ucd08\ub798\ud569\ub2c8\ub2e4.","8ec61679":"<a id=\"18\"><\/a> <br>\n## 5-3. XGBoost\ub97c \ud1b5\ud55c 2\ub808\ubca8\uc758 \ud559\uc2b5 \ubaa8\ub378\n\n\uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \uac15\ud654\ub41c \ub098\ubb34 \ud559\uc2b5 \ubaa8\ub378\uc778 XGBoost\ub97c \uc704\ud574 \uc544\uc8fc \uc720\uba85\ud55c library\ub97c \uc120\ud0dd\ud569\ub2c8\ub2e4.<br>\n\uc774\ub294 \ub300\uaddc\ubaa8\ub85c \uc99d\uac15\ub41c \ud2b8\ub9ac \uc54c\uace0\ub9ac\uc998\uc744 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud574 \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4.\n\n\uc54c\uace0\ub9ac\uc998\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 [\uacf5\uc2dd \ubb38\uc11c][24]\ub97c \ud655\uc778\ud558\uc138\uc694.\n\n  [24]: https:\/\/xgboost.readthedocs.io\/en\/latest\/\n\n\uc5b4\uca0c\ub4e0 \uc6b0\ub9ac\ub294 XGBC \ubd84\ub958\uae30\ub97c \ubd88\ub7ec 1\ucc28 \uc5f4\ucc28 \ubc0f \ubaa9\ud45c \ub370\uc774\ud130\uc5d0 \ub9de\ucd94\uace0 \ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uacfc \uac19\uc774 \uc2dc\ud5d8 \ub370\uc774\ud130\ub97c \uc608\uce21\ud560 \uac83\uc785\ub2c8\ub2e4.","19ebdf85":"\uc11c\ub85c \ub354 \uc0c1\uad00\uc5c6\ub294 \ud6c8\ub828\ub41c \ubaa8\ub378\ub4e4\uc774 \ub354 \uc88b\uc740 \uc810\uc218\ub97c \ub0b4\ub294 \uac83\uc758 \uc7a5\uc810\uc5d0 \ub300\ud55c \uae30\uc0ac\ub4e4\uacfc Kaggle \uacbd\uc7c1\uc0c1 \uc218\uc0c1\uc790\ub4e4\uc758 \uc774\uc57c\uae30\ub4e4\uc774 \uaf64 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.","acccd4c5":"Plotly \ud328\ud0a4\uc9c0\ub97c \ud1b5\ud574 \uc27d\uac8c \ud50c\ub86f\ud560 \uc218 \uc788\ub3c4\ub85d \ud615\uc0c1 \uc911\uc694 \ub370\uc774\ud130\uac00 \ub4e4\uc5b4 \uc788\ub294 \ubaa9\ub85d\uc5d0\uc11c \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.","6573a82f":"<a id=\"9\"><\/a> <br>\n## 4-1. \ud30c\ub77c\ubbf8\ud130 \uc774\ud574\ud558\uae30\n\n\uc644\uc804\uc131\uc744 \uc704\ud574 \uc5ec\uae30\uc5d0 \ub098\uc5f4\ud560 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac04\ub7b5\ud558\uac8c \uc694\uc57d\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n**n_jobs** : \uad50\uc721 \ud504\ub85c\uc138\uc2a4\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ucf54\uc5b4 \uc218. -1\ub85c \uc124\uc815\ud558\uba74 \ubaa8\ub4e0 \ucf54\uc5b4\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\n**n_estimators** : \ud559\uc2b5 \ubaa8\ub378\uc758 \ubd84\ub958 \ud2b8\ub9ac \uc218(\uae30\ubcf8\uac12\ub2f9 10\uac1c\ub85c \uc124\uc815\ub428)\n\n**max_deep** : \ud2b8\ub9ac\uc758 \ucd5c\ub300 \uae4a\uc774 \ub610\ub294 \ub178\ub4dc\ub97c \ud655\uc7a5\ud574\uc57c \ud558\ub294 \ud06c\uae30. \ub108\ubb34 \ub192\uac8c \uc124\uc815\ud558\uba74 \ub098\ubb34\uac00 \ub108\ubb34 \uae4a\uc774 \uc790\ub784 \uc704\ud5d8\uc774 \uc788\uc73c\ubbc0\ub85c \uc8fc\uc758\ud558\uc138\uc694.\n\n**verbose** : \ud559\uc2b5 \uacfc\uc815 \uc911\uc5d0 \ud14d\uc2a4\ud2b8\ub97c \ucd9c\ub825\ud560\uc9c0 \uc5ec\ubd80 \uc81c\uc5b4. 0 \uac12\uc740 \ubaa8\ub4e0 \ud14d\uc2a4\ud2b8\ub97c \uc5b5\uc81c\ud558\ub294 \ubc18\uba74 3 \uac12\uc740 \ubc18\ubcf5\ud560 \ub54c\ub9c8\ub2e4 \ud2b8\ub9ac \ud559\uc2b5 \ud504\ub85c\uc138\uc2a4\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\uacf5\uc2dd Sklearn \uc6f9 \uc0ac\uc774\ud2b8\ub97c \ud1b5\ud574 \uc804\uccb4 \uc124\uba85\uc744 \ud655\uc778\ud558\uc138\uc694.<br>\n\uac70\uae30\uc11c \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uc774 \uac00\uc9c0\uace0 \ub180 \uc218 \uc788\ub294 \ub9ce\uc740 \ub2e4\ub978 \uc720\uc6a9\ud55c \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc774 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4.","d3e0eb80":"[\ubaa9\ucc28\ub85c](#0)\n\n------------------------------------------------------------------------------------------------\n<a id=\"15\"><\/a> <br>\n# 5. 2\ub2e8\uacc4 : 1\ub2e8\uacc4 \ucd9c\ub825\uac12\uc73c\ub85c\ubd80\ud130\uc758 \uc608\uce21","eb22b12e":"[\ubaa9\ucc28\ub85c](#0)\n\n------------------------------------------------------------------------------------------------\n<a id=\"1\"><\/a> <br>\n# 1. \uc18c\uac1c\n\n\uc774 \ub178\ud2b8\ubd81\uc740 \uae30\ucd08 \ud559\uc2b5 \ubaa8\ub378, \ud2b9\ud788 \uc2a4\ud0dd\uc73c\ub85c \uc54c\ub824\uc9c4 \uc559\uc0c1\ube14\uc758 \ubcc0\ud615\uc5d0 \ub300\ud55c \ub9e4\uc6b0 \uae30\ubcf8\uc801\uc774\uace0 \ub2e8\uc21c\ud55c \uc785\ubb38 \ud504\ub77c\uc774\uba38\uc785\ub2c8\ub2e4.<br>\n\uac04\ub2e8\ud788 \ub9d0\ud558\uba74, 1\ub2e8\uacc4(\ubca0\uc774\uc2a4)\ub85c\uc11c \uc801\uce35 \uc6a9\ub3c4\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \uba87 \uac00\uc9c0 \uae30\ubcf8 \ubd84\ub958\uae30\uc758 \uc608\uce21\uc744 \ud55c \ub2e4\uc74c,<br>\n2\ub2e8\uacc4\uc5d0\uc11c \ub2e4\ub978 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc774\uc804\uc758 1\ub2e8\uacc4 \uc608\uce21\uc73c\ub85c\ubd80\ud130 \uc0b0\ucd9c\ubb3c\uc744 \uc608\uce21\ud569\ub2c8\ub2e4.\n\nKaggle\uc758 \ub9ce\uc740 \uc2e0\uc778\ub4e4\uc774 \ud0c0\uc774\ud0c0\ub2c9 \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ubd80\ud130 \uc2dc\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774 \uac1c\ub150\uc744 \ub3c4\uc785\ud558\ub294 \ub370 \uc788\uc5b4 \uac00\uc7a5 \uc720\ub825\ud55c \ud6c4\ubcf4\uc9c0\uc785\ub2c8\ub2e4.<br>\n\ube44\ub85d \ub9ce\uc740 \ud300\uc774 Kaggle Competition\uc5d0\uc11c \uc6b0\uc2b9\ud55c \uacbd\ud5d8\uc740 \uc788\uc73c\ub098, \uc774 \uc8fc\uc81c\uc5d0 \ub300\ud55c \uc54c\ub9f9\uc774\uac00 \ubd80\uc871\ud55c \uac83 \uac19\uc544,<br>\n\uc774 \uacf5\ucc45\uc774 \uadf8 \uacf5\ubc31\uc744 \uc5b4\ub290 \uc815\ub3c4 \uba54\uc6b8 \uc218 \uc788\uae30\ub97c \ubc14\ub78d\ub2c8\ub2e4.\n\n\uc800\uc790\ub3c4 \uc774 \ucee4\ub110\uc744 \uc791\uc131\ud560 \ub2f9\uc2dc Kaggle\uc5d0 \uc0c8\ub85c \ub4e4\uc5b4\uc628 \uc0ac\ub78c\uc785\ub2c8\ub2e4.<br>\n\uc800\uc790\uac00 \uc6b0\uc5f0\ud788 \uc54c\uac8c \ub41c \uccab \ubc88\uc9f8 \uc801\uc808\ud55c \uc559\uc0c1\ube14\/\ucd94\uc801 \ucee4\ub110\uc740 Faron\uc758 'AllState Severity Claims competition'\uc5d0 \uc4f0\uc5ec\uc9c4 \uac83\uc774\uc5c8\ub2e4\uace0 \ud569\ub2c8\ub2e4.<br>\n\uc774 \ub178\ud2b8\ubd81\uc758 \uc790\ub8cc\ub3c4 Faron\uc758 \ucee4\ub110\uc5d0\uc11c \ub9ce\uc774 \ube4c\ub824\uc628 \uac83\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.<br>\n\uadf8\uac00 \ud1f4\ud589\uc790\uc758 \uc559\uc0c1\ube14\uc774\uc5c8\uc744 \ub54c \ubd84\ub958\uc790\uc758 \uc559\uc0c1\ube14\uc744 \uace0\ub824\ud558\uae30 \uc704\ud574 \ubc30\uce58\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\uadf8\uc758 \uc790\uc138\ud55c \uc2a4\ud06c\ub9bd\ud2b8\uc5d0 \ub300\ud55c \uac83\uc740 \uc544\ub798 \uc8fc\uc18c\ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.\n\n[Stacking Starter][21] : by Faron \n\n\uc774\uc81c \uc190\uc5d0 \ub4e4\uace0 \uc788\ub294 \ub178\ud2b8\ubd81\uc5d0, \uc99d\uba85\ud560 \uc218 \uc788\uace0, \uc9c1\uad00\uc801\uc774\uace0, \uac04\uacb0\ud55c \ubc29\uc2dd\uc73c\ub85c \uc559\uc0c1\ube14\uc758 \uac1c\ub150\uc744 \uc804\ub2ec\ud558\uae30\ub97c \ubc14\ub78d\ub2c8\ub2e4.<br>\n\uc544\ub798\uc5d0 \uc124\uba85\ub41c \uac83\uacfc \uc815\ud655\ud788 \ub3d9\uc77c\ud55c \uc559\uc0c1\ube14 \ub2e8\uacc4\ub97c \uad6c\ud604\ud558\ub294 \uc800\uc790\uc758 \ub2e4\ub978 \ub3c5\ub9bd\ud615 [Kaggle \ucee4\ub110][22]\uc740<br>\n\uc0c1\uc704 9%\uae4c\uc9c0 \ub3c4\ub2ec\ud560 \uc218 \uc788\uc744 \ub9cc\ud07c \ucda9\ubd84\ud55c 0.808\uc758 \uacf5\uac1c LB \uc810\uc218\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.<br>\n\uadf8\ub7ec\ubbc0\ub85c \uc800\ub294 \uadf8 \ub300\ubcf8\uc744 \uac1c\uc120\ud558\uace0 \ucd94\uac00\ud560 \uc5ec\uc9c0\uac00 \ub9ce\ub2e4\uace0 \ud655\uc2e0\ud569\ub2c8\ub2e4.<br>\n\uc5b4\uca0c\ub4e0, \uc81c\uac00 \uc5b4\ub5bb\uac8c \uac1c\uc120\ud560 \uc218 \uc788\ub294\uc9c0\uc5d0 \ub300\ud55c \uc758\uacac\uc744 \uc790\uc720\ub86d\uac8c \ub0a8\uaca8\uc8fc\uae38 \ubc14\ub78d\ub2c8\ub2e4.\n\n[21]: https:\/\/www.kaggle.com\/mmueller\/allstate-claims-severity\/stacking-starter\/run\/390867\n[22]: https:\/\/www.kaggle.com\/arthurtok\/titanic\/simple-stacking-with-xgboost-0-808","19a7871f":"<a id=\"11\"><\/a> <br>\n## 4-3. 1\ub2e8\uacc4 \uc608\uce21 \uacb0\uacfc\n\n\uc6b0\ub9ac\ub294 \uc774\uc81c \ud6c8\ub828\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c 5\uac1c\uc758 \uae30\ubcf8 \ubd84\ub958\uae30\uc5d0 \uc785\ub825\ud558\uace0<br>\n\uc55e\uc5d0\uc11c \uc815\uc758\ud55c \uc608\uce21 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uc5ec \uccab \ubc88\uc9f8 \uc218\uc900\uc758 \uc608\uce21\uc744 \uc0dd\uc131\ud560 \uac83\uc785\ub2c8\ub2e4.\n\n\uc544\ub798 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub420 \ub54c\uae4c\uc9c0 \uba87 \ubd84 \uc815\ub3c4 \uae30\ub2e4\ub9ac\uc138\uc694.","e4ada917":"[\ubaa9\ucc28\ub85c](#0)\n\n------------------------------------------------------------------------------------------------\n<a id=\"2\"><\/a> <br>\n# 2. \ubcc0\uc218 \ubd84\uc11d, \uc804\ucc98\ub9ac, Engineering\n\n\uc774\uc81c \uc6b0\ub9ac\ub294 \ub300\ubd80\ubd84\uc758 \ucee4\ub110\uc744 \uad6c\uc870\ud654\ub41c \ubc29\uc2dd\uacfc \uac19\uc774 \uc9c4\ud589\ud574 \ub098\uac08 \uac83\uc785\ub2c8\ub2e4.\n\n\uba3c\uc800 \uc190\uc5d0 \uc7a1\ud788\ub294 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\uace0, \uac00\ub2a5\ud55c \ud615\uc0c1 \uacf5\ud559\uc801 \uae30\ud68c\ub97c \uc2dd\ubcc4\ud558\uace0, \uc5b4\ub5a4 \ubc94\uc8fc\ud615 \ud2b9\uc9d5\uc744 \uc218\uce58\uc801\uc73c\ub85c \uc778\ucf54\ub529\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.","767b459c":"<a id=\"16\"><\/a> <br>\n## 5-1. \uc0c8 \ubcc0\uc218\ub85c \uccab \ubc88\uc9f8 \ub808\ubca8 \ucd9c\ub825\n\n\uc774\uc81c \uc6b0\ub9ac\uc758 1\ub2e8\uacc4 \uc608\uce21\uc744 \uc5bb\uc5c8\uc73c\ub2c8, \ubcf8\uc9c8\uc801\uc73c\ub85c \ub2e4\uc74c \ubd84\ub958\uae30\uc758 \ud6c8\ub828 \ub370\uc774\ud130\ub85c \uc0ac\uc6a9\ub420 \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \uc9d1\ud569\uc744 \uad6c\ucd95\ud558\ub294 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc544\ub798 \ucf54\ub4dc\uc5d0 \ub530\ub77c, \uc6b0\ub9ac\ub294 \uc0c8\ub85c\uc6b4 \uce7c\ub7fc\uc73c\ub85c \uc774\uc804\uc758 \ubd84\ub958\uc790\ub4e4\ub85c\ubd80\ud130\uc758 1\ub2e8\uacc4 \uc608\uce21\uc744 \uac00\uc9c0\uace0 \uc788\uace0, \uc6b0\ub9ac\ub294 \uc774\uac83\uc5d0 \ub300\ud55c \ub2e4\uc74c \ubd84\ub958\uc790\ub97c \ud6c8\ub828\uc2dc\ud0a4\uace0 \uc788\uc2b5\ub2c8\ub2e4.","2eb5a655":"\uac8c\ub2e4\uac00 OOP \ud504\ub808\uc784\uc6cc\ud06c \ub0b4\uc758 \uac1c\uccb4\uc640 \ud074\ub798\uc2a4\uc5d0 \ub300\ud574 \uc5b8\uae09\ud588\uc73c\ubbc0\ub85c,<br>\n\uc774\uc81c \uc55e\uc5d0\uc11c \uc815\uc758\ud55c Helper Sklearn \ud074\ub798\uc2a4\ub97c \ud1b5\ud574 5\uac1c\uc758 \ud559\uc2b5 \ubaa8\ub378\uc744 \ub098\ud0c0\ub0b4\ub294 5\uac1c\uc758 \uac1c\uccb4\ub97c \uc0dd\uc131\ud574 \ubd05\uc2dc\ub2e4.","ee13ba9f":"\uc774\uc81c x_train\uacfc x_test\ub85c 1\ub2e8\uacc4 \uc5f4\ucc28\uc640 \ud14c\uc2a4\ud2b8 \uc608\uce21\uc5d0 \ubaa8\ub450 \uc5f0\uacc4\ud558\uace0 \ucc38\uc5ec\ud588\uc73c\ub2c8 \uc774\uc81c 2\ub2e8\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc744 \uc7a5\ucc29\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","f3e06061":"\uadf8\ub7ec\ub098 \uc544\uc9c1 \ubcc0\uc218\uc758 \uc911\uc694\ub3c4\ub97c \uc644\uc804\ud788 \ud560\ub2f9\ud558\uace0 \uc800\uc7a5\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ub0b4\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4.<br>\n\ub530\ub77c\uc11c \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c \uac12\uc744 \ucd9c\ub825\ud55c \ub2e4\uc74c \uc544\ub798\uc640 \uac19\uc774 Python \ubaa9\ub85d\uc5d0 \ubcf5\uc0ac\ud558\uc5ec \ubd99\uc5ec\ub123\uc744 \uac83\uc774\ub2e4.","a382dcbb":"<a id=\"19\"><\/a> <br>\n## 5-4. \uc81c\ucd9c\ud30c\uc77c \uc791\uc131\n\n\ub9c8\uce68\ub0b4 \ubaa8\ub4e0 1\ub2e8 \ubc0f 2\ub2e8 \ubaa8\ub378\uc744 \uad50\uc721\ud558\uace0 \uc801\ud569\ud558\uac8c \ub9cc\ub4e4\uc5c8\uace0,<br>\n\uc774\uc81c \ub2e4\uc74c\uacfc \uac19\uc774 \uc608\uce21\uc744 \ud0c0\uc774\ud0c0\ub2c9 \ub300\ud68c\uc5d0 \uc81c\ucd9c\ud560 \uc218 \uc788\ub294 \uc801\uc808\ud55c \ud615\uc2dd\uc73c\ub85c \ucd9c\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","6ff29830":"# <div align=\"center\">Level 1. Titanic: Machine Learning form Disaster<\/div>\n## <div align=\"center\">4. Introduction to Ensembling\/Stacking in Python<\/div>\n### <div align=\"center\"> \uc81c\uc791\uc790 : \uae40\uaddc\ub3d9 <\/div>\n### <div align=\"center\"> \uc81c\uc791 \uc2dc\uc791 : 2020. 1. 15. 17:40 PM <br> \ucd5c\uc885 \uc218\uc815 : 2019. 1. 15. 19:40 PM<\/div>","1f38a675":"<a id=\"17\"><\/a> <br>\n## 5-2. 2\ubc88\uc9f8 \uc218\uc900\uc758 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud55c \uc0c1\uad00\uad00\uacc4 \ud788\ud2b8\ub9f5","2486895e":"\ubaa8\ub378\uc5d0 \uc0ac\uc6a9\ub41c XGBoost \ub9e4\uac1c \ubcc0\uc218\ub97c \uac04\ub2e8\ud788 \uc694\uc57d\ud588\uc2b5\ub2c8\ub2e4.\n\n**max_deep**: \ud2b8\ub9ac\uc758 \uae4a\uc774. \ub108\ubb34 \ub192\uac8c \uc124\uc815\ud558\uba74 \uc624\ubc84\ud54f\uc758 \uc704\ud5d8\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c \uc8fc\uc758\ud558\uc138\uc694.\n\n**gamma** : \ud2b8\ub9ac\uc758 \ub9ac\ud504 \ub178\ub4dc\uc5d0\uc11c \ucd94\uac00 \ud30c\ud2f0\uc158\uc744 \ub9cc\ub4dc\ub294 \ub370 \ud544\uc694\ud55c \ucd5c\uc18c \uc190\uc2e4 \uac10\uc18c. \ud06c\uae30\uac00 \ud074\uc218\ub85d \uc54c\uace0\ub9ac\uc998\uc740 \ubcf4\uc218\uc801\uc77c \uac83\uc785\ub2c8\ub2e4.\n\n**eta** : \uac01 \ubd80\uc2a4\ud305 \ub2e8\uacc4\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc5b4 \uc624\ubc84\ud53c\ud305 \ubc29\uc9c0","9a5eed45":"[\ubaa9\ucc28\ub85c](#0)\n\n------------------------------------------------------------------------------------------------\n<a id=\"5\"><\/a> <br>\n# 3. \uc559\uc0c1\ube14 \ubc0f \uc2a4\ud0dd \ubaa8\ub378\n\n\uc6b0\ub9ac\ub294 \ub9c8\uce68\ub0b4 \uc774 \ub178\ud2b8\uc758 \ud575\uc2ec\uc5d0 \ub3c4\ub2ec\ud588\uc2b5\ub2c8\ub2e4.\n\n\uc2a4\ud0dd \uc559\uc0c1\ube14 \ub9cc\ub4e4\uae30!","4f43ec41":"\uc774\uc81c \ubaa8\ub4e0 \ud615\uc0c1 \uac00\uc838\uc624\uae30 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\uc5ec \ud615\uc0c1 \uc911\uc694\ub3c4 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \uc0c8 \uc5f4\ub85c \uc800\uc7a5\ud574 \ub461\uc2dc\ub2e4.","5da8b494":"[\ubaa9\ucc28\ub85c](#0)\n\n------------------------------------------------------------------------------------------------\n<a id=\"20\"><\/a> <br>\n# 6. \uacb0\uacfc\n\n**\ucd94\uac00 \uac1c\uc120\uc744 \uc704\ud55c \ub2e8\uacc4**\n\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc0c1\uae30 \ub2e8\uacc4\ub294 \uc559\uc0c1\ube14 \uc2a4\ud0dd\ub7ec\ub97c \uc0dd\uc131\ud558\ub294 \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ubc29\ubc95\uc784\uc744 \uc720\uc758\ud574\uc57c \ud569\ub2c8\ub2e4.<br>\n\uac00\uc7a5 \ub192\uc740 \uc218\uc900\uc758 \uce74\uae00 \ub300\ud68c\uc5d0\uc11c \ub9cc\ub4e4\uc5b4\uc9c4 \uc559\uc0c1\ube14\uc5d0 \ub300\ud574 \ub4e4\uc5b4\ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.<br>\n\uc774 \ub300\ud68c\ub294 \ub204\uc801\ub41c \ubd84\ub958\uae30\uc640 2\ub2e8\uacc4 \uc774\uc0c1\uc758 \uc2a4\ud0dd \ub808\ubca8\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4.\n\n\uc810\uc218\ub97c \ub192\uc774\uae30 \uc704\ud574 \ucde8\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ucd94\uac00 \ub2e8\uacc4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n1. \ucd5c\uc801\uc758 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \ucc3e\uae30 \uc704\ud574 \ubaa8\ub378\uc744 \uad50\uc721\ud560 \ub54c \uad50\ucc28 \uac80\uc99d \uc804\ub7b5\uc744 \uad6c\ud604\ud569\ub2c8\ub2e4.\n2. \ud559\uc2b5\uc744 \uc704\ud55c \ubcf4\ub2e4 \ub2e4\uc591\ud55c \uae30\ubcf8 \ubaa8\ub378\uc744 \uc18c\uac1c\ud569\ub2c8\ub2e4. \uacb0\uacfc\uac00 \uc0c1\uad00\uc5c6\ub294 \uac83\uc77c\uc218\ub85d \ucd5c\uc885 \uc810\uc218\ub294 \ub354 \uc88b\uc2b5\ub2c8\ub2e4.\n\n\uc800\ub294 \uc774 \ub178\ud2b8\ubd81\uc774 \ud559\uc2b5 \ubaa8\ub378\uc744 \uc313\uae30 \uc704\ud55c \uc791\uc5c5 \ub300\ubcf8\uc744 \uc18c\uac1c\ud558\ub294 \ub370 \ub2e4\uc18c \ub3c4\uc6c0\uc774 \ub418\uc5c8\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \ub2e4\uc2dc \ud55c \ubc88 Faron\uacfc Sina\uc5d0\uac8c \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4.<br>\n\uc77c\ubc18\uc801\uc73c\ub85c \uc2a4\ud0dd \ub610\ub294 \uc559\uc0c1\ube14\uc5d0 \ub300\ud55c \uae30\ud0c0 \uc6b0\uc218\ud55c \uc790\ub8cc\ub294 MLWave \uc6f9\uc0ac\uc774\ud2b8\uc5d0\uc11c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. [Kaggle \uc559\uc0c1\ube14 \uac00\uc774\ub4dc][25]\n\n\uac10\uc0ac\ud569\ub2c8\ub2e4.\n\n  [25]: http:\/\/mlwave.com\/kaggle-ensembling-guide\/","fd423777":"<a id=\"12\"><\/a> <br>\n## 4-4. \uc11c\ub85c \ub2e4\ub978 \ubd84\ub958\uae30\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c \ubcc0\uc218\uc758 \uc911\uc694\ub3c4\n\n\uccab \ubc88\uc9f8 \uc218\uc900\uc758 \ubd84\ub958\uae30\ub97c \ubc30\uc6e0\uc73c\ub2c8 \uc6b0\ub9ac\ub294 sklearn \ubaa8\ub378\uc758 \ub9e4\uc6b0 \ubbfc\ucca9\ud55c \ud2b9\uc9d5\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uace0,<br>\n\uc774\ub294 \ud6c8\ub828 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc758 \ub2e4\uc591\ud55c \ud2b9\uc9d5\ub4e4\uc744 \ud558\ub098\uc758 \ub9e4\uc6b0 \ub2e8\uc21c\ud55c \ucf54\ub4dc \ub77c\uc778\uc73c\ub85c \ucd9c\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\nSklearn \uc124\uba85\uc11c\uc5d0 \ub530\ub974\uba74\n\ub300\ubd80\ubd84\uc758 \ubd84\ub958\uc790\ub294 **.feature_importions_**\uc744 \uc785\ub825\ud558\uae30\ub9cc \ud558\uba74 \ud53c\uccd0 \uac00\uc838\uc624\uae30 \uae30\ub2a5\uc744 \ubc18\ud658\ud558\ub294 \uc18d\uc131\uc73c\ub85c \ub0b4\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.<br>\n\uadf8\ub7ec\ubbc0\ub85c \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\uc758 \ud568\uc218 \uadc0\uc0ac\ub97c \ud1b5\ud574 \ub9e4\uc6b0 \uc720\uc6a9\ud55c \uc18d\uc131\uc744 \ud638\ucd9c\ud558\uace0 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc801 \uc218\uc785\uc6d0\uc744 \ud45c\uc2dc\ud560 \uac83\uc785\ub2c8\ub2e4.","7bca3748":"\uc6b0\ub9ac\uc758 \uc784\ubb34\ub294, \uc5b4\ub5bb\uac8c \ud574\uc11c\ub4e0 \ubc94\uc8fc\ud615 \ubcc0\uc218\uc5d0\uc11c \uc815\ubcf4\ub97c \ucd94\ucd9c\ud558\ub294 \uac83\uc774\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n<a id=\"3\"><\/a> <br>\n## 2-1. Feature Engineering\n\n\uc5ec\uae30\uc11c, Feature Engineering \uc544\uc774\ub514\uc5b4\uc5d0 \ub300\ud55c Sina\uc758 \ub9e4\uc6b0 \ud3ec\uad04\uc801\uc774\uace0 \uc798 \uc0dd\uac01\ud55c \ub178\ud2b8\ubd81\uc5d0 \ud06c\ub808\ub527\uc774 \ud655\uc7a5\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c, \uadf8\uc758 \uc791\ud488\uc744 \ud655\uc778\ud574 \ubcf4\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.\n\n[Titanic Best Working Classfier][23] : by Sina\n\n\n  [23]: https:\/\/www.kaggle.com\/sinakhorami\/titanic\/titanic-best-working-classifier","b87f0692":"<a id=\"6\"><\/a> <br>\n## 3-1. Python \ud074\ub798\uc2a4\ub97c \ud1b5\ud55c \ub3c4\uc6c0\ub9d0\n\n\uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\uc5d0\uac8c \ub354 \ud3b8\ub9ac\ud558\uac8c \ud558\uae30 \uc704\ud574 \ud30c\uc774\uc36c\uc758 \uc218\uc5c5\uc744 \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4.\n\n\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ucc98\uc74c \uc2dc\uc791\ud55c \uc0ac\ub78c\uc5d0\uac8c\ub294 \uc77c\ubc18\uc801\uc73c\ub85c OOP(Object-Oriented Programming)\uc640 \ud568\uaed8 \ud074\ub798\uc2a4\uac00 \uc0ac\uc6a9\ub418\ub294 \uac83\uc744 \ub4e3\uc2b5\ub2c8\ub2e4.<br>\n\uc694\ucee8\ub300, \ud074\ub798\uc2a4\ub294 \uac1d\uccb4(\uad6c\uc2dd \ud54d\uc5d0 \ub300\ud55c \ubcc0\uc218)\ub97c \uc791\uc131\ud558\uae30 \uc704\ud55c \uc77c\ubd80 \ucf54\ub4dc\/\ud504\ub85c\uadf8\ub7a8\uc744 \ud655\uc7a5\ud558\uace0 \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0 \ud2b9\uc815\ud55c \uae30\ub2a5\uacfc \ubc29\ubc95\uc744 \uad6c\ud604\ud558\ub294 \ub370 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4.\n\n\uc544\ub798 \ucf54\ub4dc \uc139\uc158\uc5d0\uc11c\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ubaa8\ub4e0 Sklearn \ubd84\ub958\uae30\uc5d0 \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ub0b4\uc7a5 \ubc29\ubc95(\uc608: \ud6c8\ub828 \ub370\uc774\ud130 \uc608\uce21 \ubc0f \uc801\ud569)<br>\n\uc744 \ud655\uc7a5\ud560 \uc218 \uc788\ub294 *SklearnHelper* \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.<br>\n\ub530\ub77c\uc11c \uc6b0\ub9ac\uac00 \ub2e4\uc12f \uac1c\uc758 \ub2e4\ub978 \ubd84\ub958\uae30\ub97c \ud638\ucd9c\ud558\uace0 \uc2f6\ub2e4\uba74, \ub3d9\uc77c\ud55c \ubc29\ubc95\uc744 \ub2e4\uc12f \ubc88 \uc4f8 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc911\ubcf5\uc131\uc744 \ubc30\uc81c\ud569\ub2c8\ub2e4.","9b7e7d92":"-----------------------------------------------------------------------------------------------------------\n<a id=\"0\"><\/a> <br>\n# \ubaa9\ucc28\n1. [\uc18c\uac1c](#1)\n<br><br>\n1. [\ubcc0\uc218 \ubd84\uc11d, \uc804\ucc98\ub9ac, Engineering](#2)\n    1. [Feature Engineering](#3)\n    1. [\uc2dc\uac01\ud654](#4)\n<br><br>\n1. [\uc559\uc0c1\ube14 \ubc0f \uc2a4\ud0dd \ubaa8\ub378](#5)\n    1. [Python \ud074\ub798\uc2a4\ub97c \ud1b5\ud55c \ub3c4\uc6c0\ub9d0](#6)\n    1. [\uc608\uce21 \ubd88\uac00](#7)\n<br><br>\n1. [1\ub2e8\uacc4 : \ubaa8\ub378 \uc0dd\uc131](#8)\n    1. [\ud30c\ub77c\ubbf8\ud130 \uc774\ud574\ud558\uae30](#9)\n    1. [\ud6c8\ub828 \ub370\uc774\ud130 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c NumPy\ub97c \uc774\uc6a9\ud55c array \uc0dd\uc131](#10)\n    1. [1\ub2e8\uacc4 \uc608\uce21 \uacb0\uacfc](#11)\n    1. [\uc11c\ub85c \ub2e4\ub978 \ubd84\ub958\uae30\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c \ubcc0\uc218\uc758 \uc911\uc694\ub3c4](#12)\n    1. [Plotly \uc0b0\uc810\ub3c4 \uadf8\ub9bc\uc744 \ud1b5\ud55c \ubc18\uc751\uc801 \ubcc0\uc218\uc758 \uc911\uc694\ub3c4](#13)\n    1. [\ud3c9\uade0 \ubcc0\uc218\uc758 \uc911\uc694\ub3c4\uc758 Plotly \ub9c9\ub300\uadf8\ub798\ud504](#14)\n<br><br>\n1. [2\ub2e8\uacc4 : 1\ub2e8\uacc4 \ucd9c\ub825\uac12\uc73c\ub85c\ubd80\ud130\uc758 \uc608\uce21](#15)\n    1. [\uc0c8 \ubcc0\uc218\ub85c \uccab \ubc88\uc9f8 \ub808\ubca8 \ucd9c\ub825](#16)\n    1. [2\ubc88\uc9f8 \uc218\uc900\uc758 \ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud55c \uc0c1\uad00\uad00\uacc4 \ud788\ud2b8\ub9f5](#17)\n    1. [XGBoost\ub97c \ud1b5\ud55c 2\ub808\ubca8\uc758 \ud559\uc2b5 \ubaa8\ub378](#18)\n    1. [\uc81c\ucd9c\ud30c\uc77c \uc791\uc131](#19)\n<br><br>\n1. [\uacb0\uacfc](#20)","9cb86e4c":"** \uadf8\ub798\ud504 \ubcf4\uae30 **\n\n\ud53c\uc5b4\uc2a4 \uc0c1\uad00\uad00\uacc4 \uadf8\ub9bc\uc774 \uc6b0\ub9ac\uc5d0\uac8c \ub9d0\ud574 \uc904 \uc218 \uc788\ub294 \ud55c \uac00\uc9c0\ub294 '\uc11c\ub85c \uac15\ud558\uac8c \uc0c1\uad00\ub418\ub294 \ud2b9\uc9d5\ub4e4\uc774 \ub108\ubb34 \ub9ce\uc9c0 \uc54a\ub2e4'\ub294 \uac83\uc785\ub2c8\ub2e4.<br>\n\uc774\ub7ec\ud55c \uc591\uc0c1\uc740 \ud559\uc2b5 \ubaa8\ub378\uc5d0 \uc81c\uacf5\ud558\ub294 \uad00\uc810\uc5d0\uc11c \uc88b\uc740 \uac83\uc73c\ub85c, \ud6c8\ub828 \ub370\uc774\ud130\uc5d0\ub294 \uc911\ubcf5\ub418\uac70\ub098 \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130\uac00 \ubcc4\ub85c \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\ub610 \uc6b0\ub9ac\ub294 \uac01 \ubcc0\uc218\uac00 \uc5b4\ub5a4 \ub3c5\ud2b9\ud55c \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c\uc544\ucc4c \uc218 \uc788\uc2b5\ub2c8\ub2e4.<br>\n\ub2e4\uc74c\uc740 FamilySize\uc640 Parch(\ubd80\ubaa8\uc640 \uc790\ub140)\uc758 \ub450 \uac00\uc9c0 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc5f0\uc2b5\uc744 \uc704\ud574 \ub450 \uac00\uc9c0 \ud2b9\uc9d5\uc744 \ubaa8\ub450 \uadf8\ub300\ub85c \ub458 \uac83\uc785\ub2c8\ub2e4.\n\n** Pairplots **\n\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \ud55c \ubcc0\uc218\uc5d0\uc11c \ub2e4\ub978 \ubcc0\uc218\ub85c\uc758 \ub370\uc774\ud130 \ubd84\ud3ec\ub97c \uad00\ucc30\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ud398\uc5b4 \ud50c\ub86f\uc744 \uc0dd\uc131\ud574 \ubd05\uc2dc\ub2e4.<br>\n\ub2e4\uc2dc \ud55c\ubc88 \uc6b0\ub9ac\ub294 Seaborn\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4.","fc7b5981":"\uc774\ubbf8 \uc774\uac83\uc744 \uc54c\uace0 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc744 \uc704\ud574\uc11c, \uadf8\ub7ec\ub098 \uc774\uc804\uc5d0 \ud30c\uc774\uc36c\uc5d0\uc11c \ud074\ub798\uc2a4\ub098 \uc624\ube0c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\uc740 \uc0ac\ub78c\ub4e4\uc744 \uc704\ud574\uc11c,<br>\n\uc800\ub294 \uc704\uc5d0 \uc8fc\uc5b4\uc9c4 \ucf54\ub4dc\uac00 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0 \uc124\uba85\ud574 \ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uae30\ubcf8 \ubd84\ub958\uae30\ub97c \ub9cc\ub4e4 \ub54c, \uc800\ub294 sklearn library\uc5d0 \uc774\ubbf8 \uc788\ub294 \ubaa8\ub378\ub9cc \uc0ac\uc6a9\ud560 \uac83\uc774\uace0, \ub530\ub77c\uc11c \uadf8\uac83\uc744 \uc704\ud55c \uc218\uc5c5\ub9cc \uc5f0\uc7a5\ud560 \uac83\uc785\ub2c8\ub2e4.\n\n**def init** : \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\uae30 \uc704\ud55c Python \ud45c\uc900.<br>\n\uc989, \uac1d\uccb4(\ubd84\ub958\uae30)\ub97c \ub9cc\ub4e4\ub824\uba74 clf(\uc5b4\ub5a4 \uc2a4\ud0a4\uc5b4 \ubd84\ub958\uae30\ub97c \uc6d0\ud558\ub294\uc9c0), seed(\ub79c\ub364 \uc2dc\ub4dc), param(\ubd84\ub958\uae30\uc6a9 \ub9e4\uac1c\ubcc0\uc218)\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ubd80\uc5ec\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \ub2e8\uc21c\ud788 sklearn \ubd84\ub958\uae30 \ub0b4\uc5d0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ud574\ub2f9 \ubc29\ubc95\uc744 \ubd80\ub974\ub294 \ud074\ub798\uc2a4\uc758 \ubc29\ubc95\uc77c \ubfd0\uc785\ub2c8\ub2e4.<br>\n\uae30\ubcf8\uc801\uc73c\ub85c, \uc6b0\ub9ac\ub294 \ub2e4\uc591\ud55c Sklearn \ubd84\ub958\uae30\ub97c \ud655\uc7a5\ud558\uae30 \uc704\ud574 \ub798\ud37c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uc5c8\uace0,<br>\n\uc774\uac83\uc740 \uc6b0\ub9ac\uac00 \uc2a4\ud0dd\ub7ec\uc5d0 \uc5ec\ub7ec \ud559\uc2b5\uc790\ub97c \uad6c\ud604\ud560 \ub54c \uac19\uc740 \ucf54\ub4dc\ub97c \ubc18\ubcf5\ud574\uc11c \uc4f8 \ud544\uc694\uac00 \uc5c6\ub3c4\ub85d \ub3c4\uc640\uc90d\ub2c8\ub2e4.","bbb12ef4":"[\ubaa9\ucc28\ub85c](#0)\n\n------------------------------------------------------------------------------------------------\n<a id=\"8\"><\/a> <br>\n# 4. 1\ub2e8\uacc4 : \ubaa8\ub378 \uc0dd\uc131\n\n\uc774\uc81c \uccab \ubc88\uc9f8 \ub808\ubca8 \ubd84\ub958\ub85c \ub2e4\uc12f \uac00\uc9c0 \ud559\uc2b5 \ubaa8\ub378\uc744 \uc900\ube44\ud574\ubd05\uc2dc\ub2e4.<br>\n\uc774\ub7ec\ud55c \ubaa8\ub378\uc740 \ubaa8\ub450 Sklearn \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud1b5\ud574 \ud3b8\ub9ac\ud558\uac8c \ud638\ucd9c\ud560 \uc218 \uc788\uc73c\uba70 \ub2e4\uc74c\uacfc \uac19\uc774 \ub098\uc5f4\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n 1. Random Forest classifier\n 2. Extra Trees classifier\n 3. AdaBoost classifer\n 4. Gradient Boosting classifer\n 5. Support Vector Machine(SVM)","78167661":"<a id=\"10\"><\/a> <br>\n## 4-2. \ud6c8\ub828 \ub370\uc774\ud130 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c NumPy\ub97c \uc774\uc6a9\ud55c array \uc0dd\uc131\n\n\uc88b\uc2b5\ub2c8\ub2e4. \uc704\uc5d0\uc11c \uccab \ubc88\uc9f8 \uacc4\uce35 \uae30\ubcf8 \ubaa8\ub378\uc744 \uc900\ube44\ud588\uc73c\ub2c8,<br>\n\uc774\uc81c NumPy array\ub97c \uc6d0\ub798 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \uc0dd\uc131\ud558\uc5ec \ubd84\ub958\uae30\uc5d0 \uc785\ub825\ud558\uae30 \uc704\ud55c \ud6c8\ub828 \ubc0f \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc900\ube44\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","c409fac3":"**\ud53c\uc5b4\uc2a8 \uc0c1\uad00\uad00\uacc4 \ud788\ud2b8\ub9f5**\n\n\ud55c \ubcc0\uc218\uac00 \ub2e4\ub978 \ubcc0\uc218\ub4e4\uacfc \uc5bc\ub9c8\ub098 \uad00\ub828\uc774 \uc788\ub294\uc9c0 \uc54c\uc544\ubcf4\uae30 \uc704\ud574 \ubcc0\uc218\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \uba87 \uac00\uc9c0 \uc0dd\uc131\ud574 \ubd05\uc2dc\ub2e4.<br>\n\uc774\ub97c \uc704\ud574 \uc6b0\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ub9e4\uc6b0 \ud3b8\ub9ac\ud558\uac8c \ud788\ud2b8\ub9f5\uc744 \uadf8\ub9b4 \uc218 \uc788\ub294 Seaborn \ud328\ud0a4\uc9c0\ub97c \uc774\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4.","2cc98db6":"<a id=\"14\"><\/a> <br>\n## 4-6. \ud3c9\uade0 \ubcc0\uc218\uc758 \uc911\uc694\ub3c4\uc758 Plotly \ub9c9\ub300\uadf8\ub798\ud504\n\n\ubaa8\ub4e0 \ubd84\ub958\uae30\uc5d0\uc11c \ud3c9\uade0 \ud53c\uccd0 \uc911\uc694\uc131\uc744 \ud30c\uc545\ud55c \ud6c4 \ub2e4\uc74c\uacfc \uac19\uc774 Plotly \ub9c9\ub300 \uadf8\ub798\ud504\ub85c \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."}}