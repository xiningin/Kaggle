{"cell_type":{"b8230285":"code","229159b7":"code","64026eae":"code","ea5cb018":"code","bf333870":"code","ddadb92b":"code","66c68762":"code","b140106d":"code","14c03a15":"code","e7d74122":"code","aa393e7a":"code","0ce7b12a":"code","d724492f":"code","5ceefe09":"code","1c9025b3":"code","69907725":"code","301b78e9":"code","c07f5b67":"code","a237d653":"code","f48a5b07":"code","333e943a":"markdown","e10e22c2":"markdown","fcb74f36":"markdown"},"source":{"b8230285":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","229159b7":"#We will start with getting the data to understand it's composition.\nmachine_data = pd.read_csv('\/kaggle\/input\/machine-predictive-maintenance-classification\/predictive_maintenance.csv')\nmachine_data.head()","64026eae":"#Let us check the data type for each of the fgiven features\nmachine_data.info()","ea5cb018":"#The below code will help in understanding the value counts in each of the feature. This count helps us understand if the values in column are having good information quality or not.\n#for i in machine_data.columns:\n    #print(\"Value Count for \",i,\" is\", machine_data[str(i)].value_counts())\n    #print('\\n')","bf333870":"#copying the dataset and dropping the two \nmach_data = machine_data\nmach_data.drop(columns = ['UDI','Product ID'], inplace = True)","ddadb92b":"#mach_data.info()","66c68762":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sn\nsn.set_theme(style=\"darkgrid\")","b140106d":"#For Type Column\nax = sn.countplot(x=\"Type\", data=mach_data)","14c03a15":"#For air temperature\nsn.histplot(mach_data['Air temperature [K]'], kde=True)","e7d74122":"#boxplot\nsn.boxplot(mach_data['Air temperature [K]'])","aa393e7a":"#For Process temperature [K]\nsn.histplot(mach_data['Process temperature [K]'], kde=True)","0ce7b12a":"#boxplot\nsn.boxplot(mach_data['Process temperature [K]'])","d724492f":"#For air Rotational speed [rpm]\nsn.histplot(mach_data['Rotational speed [rpm]'], kde=True)","5ceefe09":"#boxplot\nsn.boxplot(mach_data['Rotational speed [rpm]'])","1c9025b3":"#For air Torque [Nm]\nsn.histplot(mach_data['Torque [Nm]'], kde=True)","69907725":"#boxplot\nsn.boxplot(mach_data['Torque [Nm]'])","301b78e9":"#For air Tool wear [min]\nsn.histplot(mach_data['Tool wear [min]'], kde=True)","c07f5b67":"#boxplot\nsn.boxplot(mach_data['Tool wear [min]'])","a237d653":"#For Target Column\nax = sn.countplot(x=\"Target\", data=mach_data)","f48a5b07":"#For Target Column\nplt.xticks(rotation=45)\nax = sn.countplot(x=\"Failure Type\", data=mach_data)","333e943a":"**From the above code we see that following columns do not provide us with useful information:**\n* UDI\n* Product ID\n\n**And so we will drop those columns and proceed with the rest.**","e10e22c2":"# **Python EDA For Machine Predictive Dataset**","fcb74f36":"# EDA with Graphs"}}