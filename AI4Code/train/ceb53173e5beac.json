{"cell_type":{"4482c48b":"code","172dc7d2":"code","f57f148e":"code","0c48e8ed":"code","d30db531":"code","e74cd4da":"code","5448b7b7":"code","a1c1ac86":"code","48160c1a":"code","b7ea64a0":"code","d1249e39":"code","d3a2f660":"code","63a8d161":"code","ad7c1d26":"code","a800c53a":"code","4e4d914b":"code","eb45f22d":"markdown","ff8a9633":"markdown","3577def2":"markdown","194005a1":"markdown","84580d41":"markdown","31b184e2":"markdown","dcdbf5f5":"markdown"},"source":{"4482c48b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","172dc7d2":"import matplotlib.pyplot as plt\n\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball=pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\nfootball","f57f148e":"edu = pd.read_csv('\/kaggle\/input\/travail-2-ense3\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","0c48e8ed":"edu.head()","d30db531":"edu.tail()","e74cd4da":"edu.describe()","5448b7b7":"edu['Value']","a1c1ac86":"edu['GEO']","48160c1a":"edu[10:14]","b7ea64a0":"edu.iloc[90:94][['TIME','GEO']]","d1249e39":"edu[edu['Value'] > 6.5].tail()","d3a2f660":"edu[edu['Value'] > 6.5]","63a8d161":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","ad7c1d26":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","a800c53a":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","4e4d914b":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","eb45f22d":"3. What does the method tail()return?\nThis method returns the 5 last rows of the DataFrame.","ff8a9633":"5. What does this index return? What does the first index represent? And the second one?\nThis index return the Time and Geo for the rows 90 to 93.\nThe first index represent the rows that we want to see.\nThe second one represent the columns that we want to see.","3577def2":"1. Which is the size of the edu DataFrame (rows x columns)?\nThe edu DataFrame has 384 rows and 3 columns. So the size of edu DataFRame is 1152 (384x3). ","194005a1":"2. What happens if we give a number as argument to the method head()?\nWe have in return the begining if the DataFrame. For : edu.head(n), we obtain the n first rows.","84580d41":"6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\n\nThis operation produce a new DataFrame, wich is fill only with rows where the Value is above 6.5.","31b184e2":"7. What do you observe regarding the parameter ascending=False?\n\nThis parameter do not sort the values in an ascending order.","dcdbf5f5":"4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?\nWe have the number of values, the mean, the standard error, the minimum, the maximum and the quartiles, for the columns that are numbers."}}