{"cell_type":{"6a3b4cd8":"code","c337e2aa":"code","f32ac306":"code","f166158a":"code","ec5499d3":"code","dcfe0c0b":"code","c29fca32":"code","1575538d":"code","951d9392":"code","27c0efc1":"code","95932f59":"markdown","078bef86":"markdown"},"source":{"6a3b4cd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c337e2aa":"# Read Womens Clothing E-Commerce Reviews.csv:\nimport pandas as pd\ndf = pd.read_csv('..\/input\/womens-ecommerce-clothing-reviews\/Womens Clothing E-Commerce Reviews.csv')\ndf.info()","f32ac306":"# Only take the review and recommendation column\ndf = df.drop(df.columns[[0, 1, 2, 3, 5, 7, 8, 9, 10]], axis=1)\ndf = df.dropna()\ndf","f166158a":"# Split data into train data and test data\nfrom sklearn.model_selection import train_test_split\nreview = df['Review Text'].values\nrecommendation = df['Recommended IND'].values\nreview_train, review_test, recommendation_train, recommendation_test = train_test_split(review, recommendation, test_size=0.2)","ec5499d3":"# Tokenization of review texts\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n \ntokenizer = Tokenizer(num_words=50000, oov_token='x')\ntokenizer.fit_on_texts(review_train) \ntokenizer.fit_on_texts(review_test)\n \nsequence_train = tokenizer.texts_to_sequences(review_train)\nsequence_test = tokenizer.texts_to_sequences(review_test)\n\npadded_train = pad_sequences(sequence_train) \npadded_test = pad_sequences(sequence_test)","dcfe0c0b":"# Neural network model with a sequential model\nimport tensorflow as tf\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=50000, output_dim=16),\n    tf.keras.layers.LSTM(64),\n    tf.keras.layers.Dense(10, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","c29fca32":"# Training process\n# In addition, if we want to display accuracy in each model training process we can add a metrics parameter and fill it with the string 'accuracy'.\nnum_epochs = 10\nhistory = model.fit(padded_train, recommendation_train, epochs=num_epochs, \n                    validation_data=(padded_test, recommendation_test), verbose=2)","1575538d":"# Plotting training accuracy and validation accuracy\nimport matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'], 'r', label='Accuracy Training')\nplt.plot(history.history['val_accuracy'], 'b', label='Accuracy Validation')\nplt.title('Accuracy Training and Validation')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(loc=0)\nplt.show()","951d9392":"# Plotting training loss and validation loss\nimport matplotlib.pyplot as plt\nplt.plot(history.history['loss'], 'r', label='Loss Training')\nplt.plot(history.history['val_loss'], 'b', label='Loss Validation')\nplt.title('Loss Training and Validation')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(loc=0)\nplt.show()","27c0efc1":"# You can try your review.\nmy_review = [\"I really wanted to like this dress. the material, design, length and fit all over was perfect, except for the armholes- too big and the ruffles came right upto the nipple line. not comfortable with that. sadly, had to return.\"]\nresult = tokenizer.texts_to_sequences(my_review)\nresult = pad_sequences(result)\n\n#print recommended or not\nimport numpy as np\nresult = model.predict_classes(result)\nif result == [0]:\n  print('Not Recommended')\nelif result == [1]:\n  print('Recommended')","95932f59":"You can tinker with the Sequential Model part to get great results like adding the dropout() function.","078bef86":"Review Text: reviews of women's clothes. Recommended Id: 1 means Recommended, 0 means Not Recommended"}}