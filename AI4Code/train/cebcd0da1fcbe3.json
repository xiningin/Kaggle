{"cell_type":{"f4612490":"code","a4584faf":"code","88214296":"code","e40e8e90":"code","d140915c":"code","7f30da84":"code","6d0d2734":"code","0a801eb6":"code","8d39e03a":"code","ed0be0b2":"code","e35a379b":"code","39cdda04":"code","a3693e6c":"code","5f219271":"code","73572c49":"code","ca37a9a1":"code","34e9e0e4":"code","8ca0501a":"code","b895ce54":"code","0de7a0eb":"code","385d12e9":"code","bdd1cf0b":"code","f2b4f04e":"code","668b667d":"code","5af20f5d":"code","f70bf4b0":"code","c70f8ad1":"code","536ce638":"code","50190d0d":"code","1881df64":"code","d5808a6b":"code","7ded1656":"code","4e8fbd4c":"code","d282c698":"code","c119b1e7":"code","3a1dc0be":"code","d2ca8ed4":"code","89129028":"code","1cf12ed4":"code","9a4906c4":"code","7bad49d5":"code","6a129c00":"code","addc6400":"code","e2e60978":"code","51408870":"code","f8979518":"code","dcb893a1":"code","6c4d8896":"code","cf99d348":"code","ef157d6a":"code","06f88c60":"markdown","a3bd78d9":"markdown","8eeafa87":"markdown","38eb6792":"markdown","58382800":"markdown","5a5f2c80":"markdown","cb22aac8":"markdown","5aa0c3d6":"markdown","76a41913":"markdown","0cf09cc8":"markdown","09790490":"markdown","e4d2e9dd":"markdown","50a68929":"markdown","2e9b4607":"markdown"},"source":{"f4612490":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a4584faf":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pylab import rcParams\nimport pandas as pd\nimport joblib\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_curve, auc","88214296":"# Exibir gr\u00e1ficos dentro do Jupyter Notebook\n%matplotlib inline\n\n# Definir tamanho padr\u00e3o para os gr\u00e1ficos\nrcParams['figure.figsize'] = 17, 4","e40e8e90":"# Realizei processamento de dados com o R adicionando novas colunas de pronome de tratamento \ndataset_original = pd.read_csv('..\/input\/trainn\/train.csv')\n\n# Eliminar o identificador dos passageiros\ndataset = dataset_original.drop(['PassengerId'], axis=1)\ndataset = dataset.drop(['Unnamed: 0'], axis=1)","d140915c":"dataset.head()","7f30da84":"dataset.dtypes","6d0d2734":"# [0] = Quantidade de inst\u00e2ncias\n# [1] = Quantidade de atributos\nprint(\"O dataset cont\u00e9m \", dataset.shape[0], \"inst\u00e2ncias e \", dataset.shape[1], \" atributos.\")","0a801eb6":"# .sample() Mostra uma amostra aleat\u00f3ria\n# .head() Mostra as primeiras inst\u00e2ncias\n# .tail() Mostra as \u00faltimas inst\u00e2ncias\ndataset.sample(5)","8d39e03a":"# Somente atributos num\u00e9ricos s\u00e3o considerados\ndataset.describe()","ed0be0b2":"# Quantidade absoluta\ntotalNulos = (dataset.isnull()).sum()\ntotalNulos","e35a379b":"# Percentual\npercentualNulos = (totalNulos \/ len(dataset)) * 100\npercentualNulos","39cdda04":"# Apenas atributos int e float\nnumericos = (dataset.select_dtypes(include=['int64', 'float64'])).columns","a3693e6c":"# Apenas atributos object (string)\ncategoricos = (dataset.select_dtypes(include=['object'])).columns\n\n# N\u00e3o considerar os atributos textuais Name, Ticket e Cabin entre os atributos categ\u00f3ricos \ncategoricos = categoricos.drop(['Name', 'Ticket', 'Cabin'])","5f219271":"fig, ax = plt.subplots(ncols=len(numericos), nrows=1)\nplt.suptitle(\"Boxplots dos Atributos Num\u00e9ricos\")\n\n# Gr\u00e1fico para cada atributo num\u00e9rico\nfor i in range(0, len(numericos)):\n    feature = numericos[i]\n    sns.boxplot(dataset[feature], ax=ax[i], orient='vertical')","73572c49":"fig, ax = plt.subplots(ncols=len(numericos), nrows=1)\nplt.suptitle(\"Histogramas dos Atributos Num\u00e9ricos\")\n\n# Histograma para cada atributo num\u00e9rico\nfor i in range(0, len(numericos)):\n    feature = numericos[i]\n    ax[i].set_title(feature)\n    dataset[feature].plot(kind='hist', ax=ax[i])","ca37a9a1":"fig, ax = plt.subplots(ncols=len(categoricos), nrows=1)\nplt.suptitle(\"Gr\u00e1ficos de Barra dos Atributos Categ\u00f3ricos\")\n\n# Gr\u00e1fico para cada atributo categ\u00f3rico\nfor i in range(0, len(categoricos)):\n    feature = categoricos[i]\n    ax[i].set_title(feature)\n    dataset[feature].value_counts().plot(kind='bar', ax=ax[i])","34e9e0e4":"# Somente atributos num\u00e9ricos s\u00e3o considerados\nplt.suptitle(\"Gr\u00e1fico de Calor das Correla\u00e7\u00f5es entre os Atributos Num\u00e9ricos\")\nsns.heatmap(dataset.corr(), annot=True, cmap='Blues')","8ca0501a":"dataset_original.shape","b895ce54":"# removendo features que n\u00e3o ser\u00e3o utilizadas no treinamento\ndataset = dataset_original.drop(['Name', 'Ticket', 'Cabin', 'PassengerId', 'Unnamed: 0'], axis=1)\ndataset.head()","0de7a0eb":"# divis\u00e3o do dataset em treino e teste\ntrain, test_split = train_test_split(dataset.copy(), test_size=0.05)","385d12e9":"train.isnull().sum()","bdd1cf0b":"# Para as inst\u00e2ncias onde Age \u00e9 nulo, imputar a m\u00e9dia (29.298)\n#train.loc[train['Age'].isnull(), 'Age'] = train.mean()['Age']","f2b4f04e":"#train.mean()['Age']","668b667d":"train.isnull().sum()","5af20f5d":"train.loc[train['Embarked'].isnull(), 'Embarked'] = (train.mode())['Embarked'][0]","f70bf4b0":"(train.mode())['Embarked'][0]","c70f8ad1":"train.isnull().sum()","536ce638":"train = pd.get_dummies(train)","50190d0d":"train.head()","1881df64":"#train.drop(['Sex_female','Embarked_Q'], axis=1, inplace=True)\n#train.head()","d5808a6b":"# separando o target do treinamento\nX = train.drop(['Survived'], axis=1)\ny = train['Survived']","7ded1656":"# treinamento do modelo com Random Forest\nmodel = RandomForestClassifier(criterion='entropy')\n\n# treinamento do modelo com Rede Neural\n#model = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(4, 2), random_state=1)\n\nmodel.fit(X, y)\n#MLPClassifier(alpha=1e-05, hidden_layer_sizes=(4, 2), random_state=1,solver='lbfgs')","4e8fbd4c":"y_pred = model.predict(X)","d282c698":"# acur\u00e1cia\naccuracy_score(y, y_pred)","c119b1e7":"print(classification_report(y, y_pred))","3a1dc0be":"# Imputar valores nulos usando padr\u00f5es do conjunto de treino\n#test_split.loc[test_split['Age'].isnull(), 'Age'] = 29.84\ntest_split.loc[test_split['Embarked'].isnull(), 'Embarked'] = 'S'\n\n# Transfrmando dummy\ntest_split = pd.get_dummies(test_split)\ntest_split.head()","d2ca8ed4":"test_split.isnull().sum()","89129028":"X_test = test_split.drop(['Survived'], axis=1)\ny_test = test_split['Survived']","1cf12ed4":"y_pred = model.predict(X_test)\ny_proba = model.predict_proba(X_test)","9a4906c4":"# gerando a matriz confus\u00e3o\ncm = confusion_matrix(y_test, y_pred)\n\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g')\nplt.title('Matriz de Confus\u00e3o')\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","7bad49d5":"accuracy_score(y_test, y_pred)","6a129c00":"print(classification_report(y_test, y_pred))","addc6400":"fp, tp, thresholds = roc_curve(y_test, y_proba[:, 1])","e2e60978":"# Gerando a Curva ROC\nplt.plot(fp, tp)\n\nplt.plot([0, 1], [0, 1], '--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.xlabel('Falso Positivo')\nplt.ylabel('Verdadeiro Positivo')\nplt.title('Curva ROC')","51408870":"# \u00c1rea sob a curva ROC\nauc(fp, tp)","f8979518":"validation = pd.read_csv('..\/input\/teste3\/test3.csv')\nvalidation.head()","dcb893a1":"# Descartar colunas textuais e identificador\nidentificador = validation[['PassengerId']]\nvalidation.drop(['Name', 'Ticket', 'Cabin', 'PassengerId', 'Unnamed: 0'], axis=1, inplace=True)\n\n# Imputar valores nulos usando padr\u00f5es do conjunto de treino\n#validation.loc[validation['Age'].isnull(), 'Age'] = 29.84\nvalidation.loc[validation['Embarked'].isnull(), 'Embarked'] = 'S'\n\n# Transfrmando dummy\nvalidation = pd.get_dummies(validation)\nvalidation.head()","6c4d8896":"y_pred = model.predict_proba(validation)\ny_pred = y_pred[:, 1]","cf99d348":"resultado = pd.concat([identificador, pd.DataFrame(y_pred, columns=['Survived'])], axis=1)\nresultado.head()","ef157d6a":"# gerando arquivos para submiss\u00e3o na competi\u00e7\u00e3o\nresultado.to_csv('submission.csv', index=False)","06f88c60":"Analisando as distribui\u00e7\u00f5es, temos que:\n\n    Existiam mais passageiros na terceira classe do que nas outras 2\n    A vari\u00e1vel Age \u00e9 a que mais se aproxima de uma Distribui\u00e7\u00e3o Normal\n    SibSp, Parch e Fare possuem, em sua maioria, valores pequenos","a3bd78d9":"### Avalia\u00e7\u00e3o do modelo com o dataframe de testes","8eeafa87":"### An\u00e1lise explorat\u00f3ria para conhecer o dataset","38eb6792":"Existiam mais homens do que mulheres a bordo e a maioria dos passageiros embarcaram em \"S\" (Southampton)\n","58382800":"## Pr\u00e9-Processamento","5a5f2c80":"### Treinamento do modelo","cb22aac8":"O gr\u00e1fico de calor mostra que as vari\u00e1veis mais correlacionadas s\u00e3o Pclass e Fare (negativamente) e SibSp e Parch (positivamente).","5aa0c3d6":"### Carregando o dataset de treino","76a41913":"### Predi\u00e7\u00e3o com dataset de teste para submiss\u00e3o na competi\u00e7\u00e3o","0cf09cc8":"### Listagem os arquivos armazenados na sess\u00e3o do kaggle","09790490":"### Todos os imports necess\u00e1rios para o projeto","e4d2e9dd":"### Configura\u00e7\u00e3o de par\u00e2metros","50a68929":"# Baseline - [Data Train] Competi\u00e7\u00e3o ML #1 - Titanic\n\n### Para o notebook completo seguindo o m\u00e9todo CRISP-DM acesse: https:\/\/github.com\/wandersondsm\/Competicao-ML-1---Data-Train\n\n### Espero que todos se divirtam e assim possamos aprender juntos!\n### Para troca de ideias e discurs\u00f5es sobre a competi\u00e7\u00e3o, entre na comunidade no telegram: https:\/\/t.me\/thedatatrain\n\n\n#### Autor: Wanderson Marques - wdsmarques@gmail.com","2e9b4607":"Os boxplots acima mostra ainda mais claramente a exist\u00eancia de outliers para Age, SibSp, Parch e Fare, principalmente para as 3 \u00faltimas. Em etapas posteriores, pode ser que seja necess\u00e1rio realizar algum tratamento nas inst\u00e2ncias que apresentam esse tipo de comportamento."}}