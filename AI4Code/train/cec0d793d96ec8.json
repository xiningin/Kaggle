{"cell_type":{"605cee55":"code","e9c14316":"code","416b7abf":"code","7f6da315":"code","f72ee98b":"code","3558aa9f":"code","128029d5":"code","26f9c0a8":"code","b745f665":"code","3df76028":"code","48b2a5a6":"code","eb64325d":"markdown","4d420fec":"markdown"},"source":{"605cee55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e9c14316":"data=pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')\ndata.head()","416b7abf":"data.info()","7f6da315":"#specify x and y\ny=data.Class.values\nx_data=data.drop(['Class'],axis=1)\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n#split data into train and test set\nx_train, x_test, y_train, y_test=train_test_split(x, y, test_size=0.25, random_state=42)","f72ee98b":"x_train=x_train.T\nx_test=x_test.T\ny_train=y_train.T\ny_test=y_test.T\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","3558aa9f":"def initwb(dimension=30):\n    w=np.full((dimension,1), 0.01)\n    b=0.0\n    return w, b","128029d5":"def sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head","26f9c0a8":"def fbprop(w, b, x_train, y_train):\n    #forward propagation\n    z=np.dot(w.T, x_train)+b\n    y_head=sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    #s\u0131f\u0131ra b\u00f6lme(!!)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    #backward propagation\n    dcost_dw=(np.dot(x_train, ((y_head-y_train).T)))\/x_train.shape[1]\n    dcost_db=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\":dcost_dw, \"derivative_bias\":dcost_db}\n    return cost, gradients","b745f665":"def update(w, b, x_train, y_train, alpha, itera):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    for i in range(itera):\n        cost, gradients=fbprop(w, b, x_train, y_train)\n        cost_list.append(cost)\n        w=w-alpha*gradients[\"derivative_weight\"]\n        b=b-alpha*gradients[\"derivative_bias\"]\n        if i %100==0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"cost after iteration %i:%f\" %(i,cost))\n    parameters={\"weight\":w,\"bias\":b}\n    plt.figure(figsize=(15,10))\n    plt.plot(index,cost_list2)\n    plt.show()\n    return parameters,gradients,cost_list","3df76028":"def predict(w,b,x_test):\n    z0=np.dot(w.T,x_test)+b\n    z=sigmoid(z0)\n    y_pred=np.zeros((1,x_test.shape[1]))\n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5:\n            y_pred[0,i]=0\n        else:\n            y_pred[0,i]=1\n    return y_pred","48b2a5a6":"def logistic(x_train,y_train,x_test,y_test,alpha,itera):\n    dimension = x_train.shape[0]\n    w,b=initwb(dimension)\n    parameters,gradients,cost_list=update(w, b, x_train, y_train, alpha, itera)\n    y_prediction_test=predict(parameters[\"weight\"],parameters[\"bias\"],x_test)    \n    y_prediction_train=predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n    print(\"train accuracy:{}%\",format(100-np.mean(np.abs(y_prediction_train-y_train))*100))\n    print(\"test accuracy:{}%\",format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n\n\nlogistic(x_train,y_train,x_test,y_test,alpha=1,itera=500)","eb64325d":"### There is no nan value.  \nWe can make logistic regression over this well prepared dataset.","4d420fec":"This data set consists of credit card transactions.  \nOver 284000 transactions listed."}}