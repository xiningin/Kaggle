{"cell_type":{"edf6b2bb":"code","07169695":"code","0a6b3471":"code","3fa4d5b0":"code","a912e099":"code","e834f914":"code","c924c2c6":"code","3efa5c13":"code","dfb9b58a":"code","7de84c6a":"code","dcaf2f45":"code","2bff322d":"code","ba83b750":"code","7ad816d2":"code","f214c57c":"code","3d9a947d":"code","8a102ab4":"code","77936d12":"code","37f8b6b4":"code","6bf04abf":"code","002faddf":"code","5fd9ce73":"code","7067d817":"markdown","0c409244":"markdown","c167d233":"markdown","4d488573":"markdown","98013b74":"markdown","a0a96e55":"markdown","b3aaeeb4":"markdown","061719f7":"markdown"},"source":{"edf6b2bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07169695":"import tensorflow as tf\ntf.__version__","0a6b3471":"from tensorflow.keras.layers import Input, Lambda,Dense,Flatten\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3","3fa4d5b0":"from tensorflow.keras.applications.inception_v3 import preprocess_input\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.models import Sequential\nfrom glob import glob","a912e099":"Img_size=[224,224]","e834f914":"train_path=\"..\/input\/tomato\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\/train\"\n\ntrain_path=\"..\/input\/tomato\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\/valid\"","c924c2c6":"inception = InceptionV3(input_shape=Img_size+[3],weights='imagenet',include_top=False)\n\n#include_top = False as we include the first and last layer","3efa5c13":"type(inception)","dfb9b58a":"for layer in inception.layers:\n    layer.trainable=False","7de84c6a":"folders=glob(\"..\/input\/tomato\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\/train\/*\")","dcaf2f45":"len(folders)","2bff322d":"x=Flatten()(inception.output)","ba83b750":"prediction=Dense(len(folders),activation='softmax')(x)","7ad816d2":"model=Model(inputs=inception.input,outputs=prediction)","f214c57c":"model.summary()","3d9a947d":"model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","8a102ab4":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_data=ImageDataGenerator(rescale=1.\/255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n\ntest_data=ImageDataGenerator(rescale=1.\/255)","77936d12":"train_set=train_data.flow_from_directory('..\/input\/tomato\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\/train',\n                                        target_size=(224,224),batch_size=32,class_mode='categorical')","37f8b6b4":"test_set=train_data.flow_from_directory('..\/input\/tomato\/new plant diseases dataset(augmented)\/New Plant Diseases Dataset(Augmented)\/valid',\n                                        target_size=(224,224),batch_size=32,class_mode='categorical')","6bf04abf":"r=model.fit_generator(train_set,validation_data=test_set,epochs=10,steps_per_epoch=len(train_set),validation_steps=len(test_set))","002faddf":"import matplotlib.pyplot as plt\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n","5fd9ce73":"plt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","7067d817":"# Plot the accuracy","0c409244":"**No of classes in training dataset**","c167d233":"# Resizing image size","4d488573":"# Import InceptionV3 model ","98013b74":"**Final layer**","a0a96e55":"# Transfer learning using Inception v3","b3aaeeb4":"# Plot the loss","061719f7":"# Fit the model\/\n"}}