{"cell_type":{"7558eaca":"code","3126264d":"code","73086261":"code","610c8293":"code","f9528e53":"code","9f715e94":"code","285f542a":"code","f885f254":"code","db74c7ee":"code","3e93ea4a":"code","da13925d":"code","1ce57960":"code","1ec78aa7":"code","b7ee7dd7":"code","43b5f57f":"code","0e33e84a":"code","37104c40":"code","36361503":"code","e72cb520":"code","654437b2":"code","84ab7fc8":"code","0124f055":"code","56deb471":"code","982a686a":"code","75b928f7":"code","603dfe1a":"code","f236a6c3":"code","2f703003":"code","b5c42062":"code","87590086":"code","1bec99b6":"code","3c6c8f05":"code","a9beb41a":"code","a0fb7bca":"code","db99f48c":"code","2228aac1":"code","91f9a6ca":"code","3823017a":"code","9cda087f":"code","ab29a7f1":"code","58f8a08d":"code","08a361d1":"code","37f939da":"code","10d4347d":"code","a3087a54":"code","e1b21b84":"code","975359e9":"code","58a7911e":"code","a290394f":"code","57653f0b":"code","2f02ad77":"code","daeefcf4":"code","68ed0e29":"code","99b6a8bf":"code","fd9b4692":"code","26c15893":"code","4bb45cac":"code","2a9266f9":"code","e299e2c6":"code","a7251139":"code","90c018d6":"code","606d405f":"code","2c85013b":"code","341333cd":"code","c3a76368":"code","95dd4566":"code","88defa9d":"code","318827a3":"code","8c53e914":"code","7eb0d6a1":"code","aa75773c":"code","e2cd71f8":"code","d6e628b0":"code","4979fe9d":"code","189d8a68":"code","95c094fe":"code","91bd2595":"code","0d8f3217":"code","58cf43fb":"code","c1605ef4":"code","1b5a289c":"code","3bdecdcd":"code","35257c49":"code","77e4e3e9":"code","b0211db0":"code","2544dbfd":"code","1ea26e37":"code","5799a677":"code","5ef83e58":"code","d47164b5":"code","2ac47e5b":"code","66e3a6b5":"code","f7685a00":"code","664ef402":"code","005f9b52":"code","c591bdf7":"markdown","766b3a38":"markdown","7788a5ac":"markdown","c34c7a93":"markdown","768627da":"markdown","efd2c35a":"markdown","0ed18655":"markdown","5d8d1733":"markdown","9a3eeb8f":"markdown","5318a641":"markdown","59d61d25":"markdown","dfaadb14":"markdown","bea73f38":"markdown"},"source":{"7558eaca":"import datetime, warnings, scipy \nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.patches import ConnectionPatch\nfrom collections import OrderedDict\nfrom matplotlib.gridspec import GridSpec\nfrom sklearn import metrics, linear_model\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom scipy.optimize import curve_fit\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom datetime import datetime\n\n\nplt.rcParams[\"patch.force_edgecolor\"] = True\nplt.style.use('fivethirtyeight')\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"last_expr\"\npd.options.display.max_columns = 50\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","3126264d":"df = pd.read_csv('..\/input\/Train.csv')\ndf_test = pd.read_csv('..\/input\/Test.csv')","73086261":"df.head()","610c8293":"df['DATOP'].unique()","f9528e53":"df.info()","9f715e94":"df.shape","285f542a":"df['target'].mean()","f885f254":"# # df[['DATOP', 'STD', 'STA']]\ndf['STD'] =  pd.to_datetime(df['STD'], format='%Y-%m-%d %H:%M:%S')\ndf['STA'] =  pd.to_datetime(df['STA'], format='%Y-%m-%d %H.%M.%S')\ndf['DATOP'] =  pd.to_datetime(df['DATOP'], format='%Y-%m-%d')\n\ndf_test['STD'] =  pd.to_datetime(df_test['STD'], format='%Y-%m-%d %H:%M:%S')\ndf_test['STA'] =  pd.to_datetime(df_test['STA'], format='%Y-%m-%d %H.%M.%S')\ndf_test['DATOP'] =  pd.to_datetime(df_test['DATOP'], format='%Y-%m-%d')","db74c7ee":"# there is a space after the flight id\ndf['FLTID'] = df['FLTID'].astype(str).str[:-1]\ndf_test['FLTID'] = df_test['FLTID'].astype(str).str[:-1]","3e93ea4a":"df['FLTID'][0]","da13925d":"df['STATUS'].unique()","1ce57960":"df.isnull().sum(axis=0).reset_index()","1ec78aa7":"df['AC'].unique()","b7ee7dd7":"df['target'].mean()","43b5f57f":"# function that extract statistical parameters from a grouby objet:\ndef get_stats(group):\n    return {'min': group.min(), 'max': group.max(),\n            'count': group.count(), 'mean': group.mean()}\n#_______________________________________________________________\n# Creation of a dataframe with statitical infos on each airline:\nglobal_stats = df['target'].groupby(df['AC']).apply(get_stats).unstack()\nglobal_stats = global_stats.sort_values('count')\nglobal_stats","0e33e84a":"global_stats.sort_values('max')","37104c40":"font = {'family' : 'normal', 'weight' : 'bold', 'size'   : 18}\nmpl.rc('font', **font)\nimport matplotlib.patches as mpatches\n#__________________________________________________________________\ndf2 = df.loc[:, ['AC', 'target']]\n#________________________________________________________________________\ncolors = ['royalblue', 'grey', 'wheat', 'c', 'firebrick', 'seagreen', 'lightskyblue',\n          'lightcoral', 'yellowgreen', 'gold', 'tomato', 'violet', 'aquamarine', 'chartreuse']\n\nfig = plt.figure(1, figsize=(70,70))\ngs=GridSpec(2,2)             \nax1=fig.add_subplot(gs[0,0]) \n# Pie chart n\u00ba1: nb of flights\nlabels = [s for s in  global_stats.index]\nsizes  = global_stats['count'].values\nexplode = [0.3 if sizes[i] < 1.0 else 0.0 for i in range(len(sizes))]\npatches, texts, autotexts = ax1.pie(sizes, explode=explode,\n                                labels=labels, colors = colors,  autopct='%1.0f%%',\n                                shadow=False, startangle=0)\nax1.axis('equal')\n# ax1.set_title('% of flights per company', bbox={'facecolor':'midnightblue', 'pad':10},\n#               color = 'w',fontsize=18)","36361503":"# ax2=fig.add_subplot(gs[0,1]) \n# Pie chart n\u00ba2: mean delay at departure\nfig = plt.figure(1, figsize=(50,50))\nax2=fig.add_subplot(gs[0,0])\nlabels = [s for s in  global_stats.index]\nsizes  = global_stats['mean'].values\nsizes  = [max(s,0) for s in sizes]\npatches, texts, autotexts = ax2.pie(sizes, labels = labels,\n                                colors = colors, shadow=False, startangle=0,\n                                autopct = lambda p :  '{:.0f}'.format(p * sum(sizes) \/ 100))\nax2.axis('equal')\n# ax2.set_title('Mean delay', bbox={'facecolor':'midnightblue', 'pad':5},\n#               color='w', fontsize=24)\nplt.show()","e72cb520":"fig = plt.figure(1, figsize=(25,25))\ndf2 = df.loc[:, ['AC', 'target']]\ndf2 = df2.drop(df2[df2.target == 0].index)\nax = sns.stripplot(x=\"target\", y=\"AC\", data=df2, size = 12, linewidth = 2,  jitter=True)\nplt.xlabel('Departure delay', fontsize=18, bbox={'facecolor':'midnightblue', 'pad':5},\n           color='w', labelpad=30)\nax3.yaxis.label.set_visible(False)\nplt.tight_layout(w_pad=3) ","654437b2":"# Function that define how delays are grouped\ndelay_type = lambda x:((0,1)[x > 5],2)[x > 45]\ndf['DELAY_LEVEL'] = df['target'].apply(delay_type)\n#____________________________________________________\nfig = plt.figure(1, figsize=(70,70))\nax = sns.countplot(y=\"AC\", hue='DELAY_LEVEL', data=df)\n#____________________________________________________________________________________\n# We replace the abbreviations by the full names of the companies and set the labels\nlabels = df['AC'].unique().tolist()\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), fontsize=24, weight = 'normal', rotation = 0);\nplt.setp(ax.get_yticklabels(), fontsize=24, weight = 'bold', rotation = 0);\nax.yaxis.label.set_visible(False)\nplt.xlabel('Flight count', fontsize=24, weight = 'bold', labelpad=10)\n#________________\n# Set the legend\nL = plt.legend()\nL.get_texts()[0].set_text('on time (t < 5 min)')\nL.get_texts()[1].set_text('small delay (5 < t < 45 min)')\nL.get_texts()[2].set_text('large delay (t > 45 min)')\nplt.show()","84ab7fc8":"print(\"Nb of airports: {}\".format(len(df['DEPSTN'].unique())))","0124f055":"list_of_airpots = df['DEPSTN'].unique().tolist()\nlist_of_ac = df['AC'].unique().tolist()\norigin_nb = dict()\nfor carrier in list_of_ac:\n    liste_origin_airport = df[df['AC'] == carrier]['DEPSTN'].unique().tolist()\n    origin_nb[carrier] = len(liste_origin_airport)","56deb471":"test_df = pd.DataFrame.from_dict(origin_nb, orient='index')\ntest_df.rename(columns = {0:'count'}, inplace = True)\nax = test_df.plot(kind='bar', figsize = (25,25))\nlabels = [x for x in list_of_ac]\nax.set_xticklabels(labels)\nplt.ylabel('Number of airports visited', fontsize=14, weight = 'bold', labelpad=12)\nplt.setp(ax.get_xticklabels(), fontsize=11, ha = 'right', rotation = 80)\nax.legend().set_visible(False)\nplt.show()","982a686a":"# df['month'] = pd.DatetimeIndex(df['DATOP']).month\ndf['year'] = pd.DatetimeIndex(df['DATOP']).year\ndf.head()","75b928f7":"flights_dict = dict()\nac_group = df.groupby('AC')\nfor x in list_of_ac:\n    df_ac = ac_group.get_group(x)\n    flights_dict[x] = df[df['AC'] == x]['year'].value_counts().to_dict()","603dfe1a":"flights_dict","f236a6c3":"# flights_dict\nnbr_flights = pd.DataFrame.from_dict(flights_dict, orient='index')\nnbr_flights.fillna(0, inplace=True)\n# nbr_flights","2f703003":"nbr_flights.columns = ['flights_in_2018', 'flights_in_2017', 'flights_in_2016']","b5c42062":"nbr_flights['flights_in_2016'] = nbr_flights['flights_in_2016'].astype(np.int64)\nnbr_flights['flights_in_2017'] = nbr_flights['flights_in_2017'].astype(np.int64)\nnbr_flights['flights_in_2018'] = nbr_flights['flights_in_2018'].astype(np.int64)\nnbr_flights['total_flights'] = nbr_flights['flights_in_2016'] + nbr_flights['flights_in_2017'] + nbr_flights['flights_in_2018']\n# nbr_flights","87590086":"nbr_flights['total_flights'].unique().min()","1bec99b6":"nbr_flights['total_flights'].unique().max()","3c6c8f05":"nbr_flights['flights_in_2018'].unique()","a9beb41a":"# add a variable describing the frequency of that AC's flights 3 levels (100 <, 100< < 200, >200) but per year\ndf['ac_frequency'] = 0\ndef define_frequency(nbr):\n        if nbr<100:\n            return 0\n        \n        else:\n            if (nbr>100 and nbr<200): \n                return 1\n            else:\n                return 2","a0fb7bca":"for i in range(df.shape[0]):\n    ac = df.loc[i, 'AC']\n    year = df.loc[i, 'year']\n    if year == 2016:\n        freq_2016 = define_frequency(nbr_flights.loc[ac, 'flights_in_2016'])\n        if freq_2016 !=0:\n            df.at[i, 'ac_frequency'] = freq_2016\n    else:\n        if year == 2017:\n            freq_2017 = define_frequency(nbr_flights.loc[ac, 'flights_in_2017'])\n            if freq_2017 !=0:\n                df.at[i, 'ac_frequency'] = freq_2017\n        else:\n            freq_2018 = define_frequency(nbr_flights.loc[ac, 'flights_in_2018'])\n            if freq_2018 !=0:\n                df.at[i, 'ac_frequency'] = freq_2018","db99f48c":"df.to_csv('Train_interm.csv', index=False)","2228aac1":"airport_mean_delays = pd.DataFrame(pd.Series(df['DEPSTN'].unique()))\nairport_mean_delays.set_index(0, drop = True, inplace = True)\n\nfor carrier in list_of_ac:\n    df1 = df[df['AC'] == carrier]\n    test = df1['target'].groupby(df['DEPSTN']).apply(get_stats).unstack()\n    airport_mean_delays[carrier] = test.loc[:, 'mean'] ","91f9a6ca":"airport_mean_delays","3823017a":"sns.set(context=\"paper\")\nfig = plt.figure(1, figsize=(15,15))\n\nax = fig.add_subplot(1,2,1)\nsubset = airport_mean_delays.iloc[:34,:]\nmask = subset.isnull()\nsns.heatmap(subset, linewidths=0.01, cmap=\"Accent\", mask=mask, vmin = 0, vmax = 35)\nplt.setp(ax.get_xticklabels(), fontsize=10, rotation = 85) ;\nax.yaxis.label.set_visible(False)\n\nax = fig.add_subplot(1,2,2)\nsubset = airport_mean_delays.iloc[34:,:]\nfig.text(0.5, 1.02, \"Delays: impact of the origin airport\", ha='center', fontsize = 18)\nmask = subset.isnull()\nsns.heatmap(subset, linewidths=0.01, cmap=\"Accent\", mask=mask, vmin = 0, vmax = 35)\nplt.setp(ax.get_xticklabels(), fontsize=10, rotation = 85) ;\nax.yaxis.label.set_visible(False)\n\nplt.tight_layout()","9cda087f":"df.head()","ab29a7f1":"df = pd.read_csv('\/home\/souhagaa\/Bureau\/hackathon\/tunisair\/Train_interm.csv')","58f8a08d":"df.head()","08a361d1":"df['trajectory'] = df['DEPSTN'] + '-' + df['ARRSTN']\ndf_test['trajectory'] = df_test['DEPSTN'] + '-' + df_test['ARRSTN']","37f939da":"df['trajectory'].nunique()","10d4347d":"df['month'] = pd.DatetimeIndex(df['DATOP']).month\ndf['day'] = pd.DatetimeIndex(df['DATOP']).day\ndf['day_of_week'] = pd.DatetimeIndex(df['DATOP']).dayofweek\ndf['year'] = pd.DatetimeIndex(df['DATOP']).year\ndf['week_of_year'] = pd.DatetimeIndex(df['DATOP']).week","a3087a54":"df_test['month'] = pd.DatetimeIndex(df_test['DATOP']).month\ndf_test['day'] = pd.DatetimeIndex(df_test['DATOP']).day\ndf_test['day_of_week'] = pd.DatetimeIndex(df_test['DATOP']).dayofweek\ndf_test['year'] = pd.DatetimeIndex(df_test['DATOP']).year\ndf_test['week_of_year'] = pd.DatetimeIndex(df_test['DATOP']).week","e1b21b84":"# Adding a week of month variable\ndata = [df, df_test]\nfor dataset in data:\n    dataset.loc[ dataset['day'] <= 7, 'week_of_month'] = 0\n    dataset.loc[(dataset['day'] > 7) & (dataset['day'] <= 14), 'week_of_month'] = 1\n    dataset.loc[(dataset['day'] > 14) & (dataset['day'] <= 21), 'week_of_month'] = 2\n    dataset.loc[(dataset['day'] > 21) & (dataset['day'] <= 28), 'week_of_month'] = 3\n    dataset.loc[(dataset['day'] > 28) & (dataset['day'] <= 31), 'week_of_month'] = 4\n    dataset['week_of_month'] = dataset['week_of_month'].astype(int)","975359e9":"# Adding a season column depicting the season the flight has taken place in\ndata = [df, df_test]\nfor dataset in data:\n    dataset.loc[ (dataset['month'] < 3) | (dataset['month'] == 12), 'season'] = 0\n    dataset.loc[(dataset['month'] >= 3) & (dataset['month'] < 6), 'season'] = 1\n    dataset.loc[(dataset['month'] >= 6) & (dataset['month'] < 9), 'season'] = 2\n    dataset.loc[(dataset['month'] >= 9) & (dataset['month'] < 12), 'season'] = 3\n    dataset['season'] = dataset['season'].astype(int)","58a7911e":"df['dep_hour'] = pd.DatetimeIndex(df['STD']).hour \ndf_test['dep_hour'] = pd.DatetimeIndex(df_test['STD']).hour\n\n\ndf['arr_hour'] = pd.DatetimeIndex(df['STA']).hour \ndf_test['arr_hour'] = pd.DatetimeIndex(df_test['STA']).hour","a290394f":"df['dep_minute'] = pd.DatetimeIndex(df['STD']).minute\ndf_test['dep_minute'] = pd.DatetimeIndex(df_test['STD']).minute\n\ndf['arr_minute'] = pd.DatetimeIndex(df['STA']).minute \ndf_test['arr_minute'] = pd.DatetimeIndex(df_test['STA']).minute","57653f0b":"df['flight_duration_sec'] = (df['STA'] - df['STD']).values.astype(np.int64) \/\/ 10 ** 9\ndf_test['flight_duration_sec'] = (df_test['STA'] - df_test['STD']).values.astype(np.int64) \/\/ 10 ** 9","2f02ad77":"df['flight_duration_hours'] = df['arr_hour'] - df['dep_hour'] \ndf_test['flight_duration_hours'] = df_test['arr_hour'] - df_test['dep_hour']\n\ndf['flight_duration_minutes'] = (df['flight_duration_sec'] \/ 60).astype(np.int64)\ndf_test['flight_duration_minutes'] = (df_test['flight_duration_sec'] \/ 60).astype(np.int64)","daeefcf4":"data = [df, df_test]\nfor dataset in data:\n    dataset.loc[ (dataset['dep_hour'] < 12) , 'dep_hour_AM_PM'] = 0\n    dataset.loc[(dataset['dep_hour'] >= 12) , 'dep_hour_AM_PM'] = 1\n    dataset['dep_hour_AM_PM'] = dataset['dep_hour_AM_PM'].astype(int)\n\n    dataset.loc[ (dataset['arr_hour'] < 12) , 'arr_hour_AM_PM'] = 0\n    dataset.loc[(dataset['arr_hour'] >= 12) , 'arr_hour_AM_PM'] = 1\n    dataset['arr_hour_AM_PM'] = dataset['arr_hour_AM_PM'].astype(int)","68ed0e29":"df['S_dep_hour'] = np.sin(2*np.pi*df['dep_hour']\/24)\ndf['C_dep_hour'] = np.cos(2*np.pi*df['dep_hour']\/24)\ndf_test['S_dep_hour'] = np.sin(2*np.pi*df_test['dep_hour']\/24)\ndf_test['C_dep_hour'] = np.cos(2*np.pi*df_test['dep_hour']\/24)\n\n\ndf['S_arr_hour'] = np.sin(2*np.pi*df['arr_hour']\/24)\ndf['C_arr_hour'] = np.cos(2*np.pi*df['arr_hour']\/24)\ndf_test['S_arr_hour'] = np.sin(2*np.pi*df_test['arr_hour']\/24)\ndf_test['C_arr_hour'] = np.cos(2*np.pi*df_test['arr_hour']\/24)","99b6a8bf":"# '2016-01-03'.strftime('%j')\ndata = [df, df_test]\nfor dataset in data:\n    for i in range(dataset.shape[0]):\n        dataset.loc[i, 'day_of_year'] = int(dataset.loc[i, 'DATOP'].strftime('%j'))\n# int(df['DATOP'].datetime.strftime('%j'))","fd9b4692":"corrmat = df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","26c15893":"df.shape","4bb45cac":"# df = pd.read_csv('\/home\/souhagaa\/Bureau\/hackathon\/tunisair\/Train_clean.csv')","2a9266f9":"# we shuffle data\n# df = df.sample(frac=1).reset_index(drop=True)","e299e2c6":"df.head()","a7251139":"# !!!! only in case df is read from the file we need to convert the types back to datetime objects\n# df['STD'] =  pd.to_datetime(df['STD'], format='%Y-%m-%d %H:%M:%S')\n# df['STA'] =  pd.to_datetime(df['STA'], format='%Y-%m-%d %H:%M:%S')\n# df['DATOP'] =  pd.to_datetime(df['DATOP'], format='%Y-%m-%d')","90c018d6":"df.to_csv('\/home\/souhagaa\/Bureau\/hackathon\/tunisair\/Train_clean.csv', index=False)","606d405f":"df.columns","2c85013b":"train_cols = ['DATOP', 'FLTID', 'DEPSTN', 'ARRSTN', 'STD', 'STA', 'STATUS',\n       'AC', 'trajectory', 'month', 'day', 'day_of_week', 'year',\n       'week_of_year', 'week_of_month', 'season', 'dep_hour', 'arr_hour',\n       'dep_minute', 'arr_minute', 'flight_duration_sec',\n       'flight_duration_hours', 'flight_duration_minutes', 'dep_hour_AM_PM',\n       'arr_hour_AM_PM', 'S_dep_hour', 'C_dep_hour', 'S_arr_hour',\n       'C_arr_hour', 'day_of_year']\nX = df[train_cols]\ntest = df_test[train_cols]\ny = df['target']","341333cd":"# y = df['target']\n# del df['target']\n# X = df","c3a76368":"X.head()","95dd4566":"# del X['year']\n# del X['ac_frequency']","88defa9d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,random_state=17)","318827a3":"categ_feat_idx = np.where(X_train.dtypes == 'object')[0]\ncateg_feat_idx","8c53e914":"# from catboost import CatBoostRegressor\n# model = CatBoostRegressor(iterations=700, depth= 10, l2_leaf_reg= 7, learning_rate= 0.1) \n# #depth= 10, l2_leaf_reg= 7, learning_rate= 0.1\n# model.fit(X_train,y_train,verbose=False,cat_features=categ_feat_idx)\n\n# from catboost import CatBoostRegressor\nmodel = CatBoostRegressor(iterations=699, depth=10, learning_rate=0.1,l2_leaf_reg= 7, loss_function='RMSE')\nmodel.fit(X_train, y_train,cat_features=categ_feat_idx,eval_set=(X_test, y_test),plot=True)","7eb0d6a1":"predictions = model.predict(X_test)\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\nrmse = sqrt(mean_squared_error(y_test,predictions))\nprint(rmse)\n#106.61722528055746\n","aa75773c":"model = CatBoostRegressor()\nparameters = {'depth'         : [6,8,10],\n              'learning_rate' : [0.01, 0.05, 0.1],\n              'iterations'    : [650, 700, 750]\n             }\ngrid = GridSearchCV(estimator=model, param_grid = parameters, cv = 2, n_jobs=-1)\ngrid.fit(X_train, y_train,cat_features=categ_feat_idx,eval_set=(X_test, y_test))    \n\n# Results from Grid Search\nprint(\"\\n========================================================\")\nprint(\" Results from Grid Search \" )\nprint(\"========================================================\")    \n\nprint(\"\\n The best estimator across ALL searched params:\\n\",\n      grid.best_estimator_)\n\nprint(\"\\n The best score across ALL searched params:\\n\",\n      grid.best_score_)\n\nprint(\"\\n The best parameters across ALL searched params:\\n\",\n      grid.best_params_)","e2cd71f8":"importances = pd.DataFrame({'feature':X.columns,'importance':np.round(model.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False).set_index('feature')\nimportances","d6e628b0":"importances.plot.bar()\n","4979fe9d":"# I again fit the model but with the whole dataset to get more data into training\n# model.fit(X, y,cat_features=categ_feat_idx,eval_set=(X_test, y_test))","189d8a68":"y_pred = model.predict(test)","95c094fe":"any(y_pred<0)","91bd2595":"y_pred[y_pred < 0] =0","0d8f3217":"submission= pd.DataFrame({'ID':df_test[\"ID\"],'target':y_pred})\nsubmission.to_csv(\"submission.csv\",index=False)","58cf43fb":"one_hot = pd.get_dummies(X['STATUS'])\nX = X.drop('STATUS',axis = 1)\nX = X.join(one_hot)","c1605ef4":"one_hot = pd.get_dummies(test['STATUS'])\ntest = test.drop('STATUS',axis = 1)\ntest = test.join(one_hot)","1b5a289c":"# one_hot = pd.get_dummies(df['DEPSTN'],prefix='depart_')\n# df = df.drop('DEPSTN',axis = 1)\n# df = df.join(one_hot)","3bdecdcd":"# one_hot = pd.get_dummies(df['ARRSTN'], prefix='arrival_')\n# df = df.drop('ARRSTN',axis = 1)\n# df = df.join(one_hot)","35257c49":"# one_hot = pd.get_dummies(df['AC'], prefix='ac_')\n# df = df.drop('AC',axis = 1)\n# df = df.join(one_hot)","77e4e3e9":"le = LabelEncoder()\n# enc = OneHotEncoder(sparse=False)\nX['DEPSTN'] = le.fit_transform(X['DEPSTN'])\nX['ARRSTN'] = le.fit_transform(X['ARRSTN'])\nX['AC'] = le.fit_transform(X['AC'])\nX['FLTID'] = le.fit_transform(X['FLTID'])\nX['trajectory'] = le.fit_transform(X['trajectory'])","b0211db0":"test['DEPSTN'] = le.fit_transform(test['DEPSTN'])\ntest['ARRSTN'] = le.fit_transform(test['ARRSTN'])\ntest['AC'] = le.fit_transform(test['AC'])\ntest['FLTID'] = le.fit_transform(test['FLTID'])\ntest['trajectory'] = le.fit_transform(test['trajectory'])","2544dbfd":"X.head()","1ea26e37":"X['DATOP_ts'] = X.DATOP.values.astype(np.int64) \/\/ 10 ** 9\nX['STD_ts'] = X.STD.values.astype(np.int64) \/\/ 10 ** 9\nX['STA_ts'] = X.STA.values.astype(np.int64) \/\/ 10 ** 9\ndel X['DATOP']\ndel X['STA']\ndel X['STD']","5799a677":"test['DATOP_ts'] = test.DATOP.values.astype(np.int64) \/\/ 10 ** 9\ntest['STD_ts'] = test.STD.values.astype(np.int64) \/\/ 10 ** 9\ntest['STA_ts'] = test.STA.values.astype(np.int64) \/\/ 10 ** 9\ndel test['DATOP']\ndel test['STA']\ndel test['STD']","5ef83e58":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=17)","d47164b5":"model = linear_model.LinearRegression()\nmodel.fit(X_train, y_train)","2ac47e5b":"results = model.predict(X_test)\nscore1 = np.sqrt(metrics.mean_squared_error(y_test,results))\nscore2 = metrics.r2_score(y_test,results )\nprint('RMSE: ',score1, '  R2 Score: ', score2)\n# MSE:  5954526.582315134   R2 Score:  -461.04557347688393\n# when deleting year and ac_frequency MSE:  13643.94079805509   R2 Score:  0.058992522154372895\n# WITH label encoding MSE:  12795.027061727462   R2 Score:  0.036762754570380474\n# MSE:  12059.485969460224   R2 Score:  0.0421820337368739 labelenc with delet of year and ac_freq","66e3a6b5":"plt.scatter(X_train['AC'], y_train)\n","f7685a00":"#memory error\nfor i in range(1,3):\n    poly = PolynomialFeatures(degree = i)\n    regr = linear_model.LinearRegression()\n    X_ = poly.fit_transform(X_train)\n    regr.fit(X_, y_train)\n    X_ = poly.fit_transform(X_test)\n    results = regr.predict(X_)\n    score1 = np.sqrt(metrics.mean_squared_error(y_test,results))\n    score2 = metrics.r2_score(y_test,results )\n    print('Model with Polynominal Degree', i, 'MSE: ',score1, '  R2 Score: ', score2)\n# 5 : Model with Polynominal Degree 5 MSE:  11915.27537981318   R2 Score:  0.053635879617132454\n","664ef402":"clf = linear_model.SGDRegressor(max_iter=1000, tol=1e-3)\nclf.fit(X_train, y_train)","005f9b52":"results = clf.predict(X_test)\nscore1 = np.sqrt(metrics.mean_squared_error(y_test,results))\nscore2 = metrics.r2_score(y_test,results )\nprint('RMSE: ',score1, '  R2 Score: ', score2)","c591bdf7":"<h2>Relationship between the origin airport and delays<\/h2>","766b3a38":"We don't have missing values","7788a5ac":"<h2> Comparing delay times per AC <\/h2>","c34c7a93":"**number of flights per year**","768627da":"**The mean delay times are between 0 minutes and 205.4 minutes (the max delay of all flights is 3451 minutes)**","efd2c35a":"**As we can see the departure airport has a great impact on the delay we can see the dominance of large delays in a lot of airports like LYS and SXB in the left panel**","0ed18655":"<h2> Feature Engineering <\/h2>","5d8d1733":"-> There is a high variability in average delays, both between the different airports but also between the different airlines. This is important because it implies that in order to accurately model the delays, it will be necessary to adopt a model that is specific to the company and the home airport .","9a3eeb8f":"<h3> Linear Regression <\/h3>","5318a641":"DATOP - Date of flight\n\nFLTID - Flight number\n\nDEPSTN - Departure point\n\nARRSTN - Arrival point\n\nSTD - Scheduled Time departure\n\nSTA - Scheduled Time arrival\n\nSTATUS - Flight status\n\nAC - Aircraft Code","59d61d25":"Label encoding","dfaadb14":"**Dates of flights from 2016-01-03 till 2018-12-30**","bea73f38":"**The mean delay time is 48.73 minutes let's take a closer look on how the delay times are dispersed**\n"}}