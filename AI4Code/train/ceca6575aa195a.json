{"cell_type":{"8bb2ddab":"code","8dd1139f":"code","c8c8ee4c":"code","fe1ff073":"code","6549078e":"code","d1e8f5ec":"code","2ec55db1":"code","d2176949":"code","78178b7b":"code","f7ed448b":"code","66431677":"code","5c647634":"code","b3e4deb1":"code","a6cf2366":"code","2f22c23c":"code","3ced665f":"code","4827fa7e":"code","04e508d0":"code","3e99e516":"code","19bcad0d":"code","9a434cbc":"code","6efe2ccd":"code","99bb459a":"code","d99e46a6":"code","2c2051f5":"code","d1f88f7f":"code","7f9a8d1a":"code","b400e29f":"code","a5610252":"code","25b2281e":"markdown","adb74a7c":"markdown","dde24700":"markdown","0e855702":"markdown","c930619c":"markdown","0947b58d":"markdown","c1a7639a":"markdown","24bc43c9":"markdown","edf30a5b":"markdown","06e8c456":"markdown","e7dedac2":"markdown","665464c3":"markdown","fe5de6fd":"markdown","303587a0":"markdown","1444cf2c":"markdown"},"source":{"8bb2ddab":"import pandas as pd\npd.set_option('display.max_columns', 50)\n\nfrom matplotlib import pyplot\n# import matplotlib.pylab as plt\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime,timedelta\n\nimport numpy as np\nfrom numpy import *\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set(style=\"white\")\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA","8dd1139f":"def _from_ordinal(x, tz=None):\n    ix = int(x)\n    dt = datetime.fromordinal(ix)\n    remainder = float(x) - ix\n    hour, remainder = divmod(24 * remainder, 1)\n    minute, remainder = divmod(60 * remainder, 1)\n    second, remainder = divmod(60 * remainder, 1)\n    microsecond = int(1e6 * remainder)\n    if microsecond < 10:\n        microsecond = 0  # compensate for rounding errors\n    dt = datetime(dt.year, dt.month, dt.day, int(hour), int(minute),\n                  int(second), microsecond)\n    if tz is not None:\n        dt = dt.astimezone(tz)\n\n    if microsecond > 999990:  # compensate for rounding errors\n        dt += timedelta(microseconds=1e6 - microsecond)\n\n    return dt","c8c8ee4c":"# READING DATA - Patient 1\npat1_values_original = pd.read_csv('\/home\/varun\/Desktop\/dm\/assignment1\/DataFolder\/CGMSeriesLunchPat1.csv')\n\npat1_ts_original = pd.read_csv('\/home\/varun\/Desktop\/dm\/assignment1\/DataFolder\/CGMDatenumLunchPat1.csv')","fe1ff073":"# REPLACING MISSING DATA WITH N\/A AND CONVERTING TIMESERIES FORMAT\npat1_ts_original.fillna(1,inplace=True)\n# pat1_values_df.fillna(0,inplace=True)","6549078e":"# pat1_values_df.head()","d1e8f5ec":"# CONVERTING TIMESERIES FORMAT\npat1_ts_parsed = pat1_ts_original.applymap(lambda ts : _from_ordinal(ts))","2ec55db1":"# pat1_ts_parsed.head()","d2176949":"# ROWS & COLUMNS(Original)\npat1_values_original.shape\npat1_ts_parsed.shape","78178b7b":"# TS - \n# 1. DECREASES TO THE RIGHT IN A SINGLE DAY\n# 2. DECREASES TO THE BOTTOM IN A SINGLE MONTH(ish)\npat1_ts_updated = pat1_ts_parsed.iloc[::-1]\npat1_ts_updated = pat1_ts_updated.iloc[:, ::-1]\npat1_ts_updated.head()","f7ed448b":"# CGM VALUES - \n# 1. DECREASES TO THE RIGHT IN A SINGLE DAY\n# 2. DECREASES TO THE BOTTOM IN A SINGLE MONTH(ish)\npat1_values_updated = pat1_values_original.iloc[::-1]\npat1_values_updated = pat1_values_updated.iloc[:, ::-1]\npat1_values_updated.head()","66431677":"# ROWS & COLUMNS(Updated)\npat1_values_updated.shape\npat1_ts_updated.shape","5c647634":"# PATIENT 1, DAY 1\nplt.xlim( max(pat1_ts_updated.iloc[:1,:].values.flatten())- timedelta(minutes=150), max(pat1_ts_updated.iloc[:1,:].values.flatten()))\nplt.plot(pat1_ts_updated.iloc[:1,:].values.flatten(),pat1_values_updated.iloc[:1,:].values.flatten())","b3e4deb1":"# PATIENT 1, DAY 2\nplt.xlim( max(pat1_ts_updated.iloc[1:2,:].values.flatten())- timedelta(minutes=150), max(pat1_ts_updated.iloc[1:2,:].values.flatten()))\nplt.plot(pat1_ts_updated.iloc[1:2,:].values.flatten(),pat1_values_updated.iloc[1:2,:].values.flatten())","a6cf2366":"corr = pat1_values_updated.corr()\npat1_values_updated.corr().shape","2f22c23c":"# GENERATE A MASK FOR THE UPPER TRIANGLE\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# SET UP THE MATPLOTLIB FIGURE\nf, ax = plt.subplots(figsize=(11, 9))\n\n# GENERATE A CUSTOM DIVERGING COLORMAP\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# DRAW THE HEATMAP WITH THE MASK & CORRECT ASPECT RATIO\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","3ced665f":"# CREATING DF COPY\npat1_values_df_features = pat1_values_df.copy()","4827fa7e":"pat1_values_df_features['max'] = pat1_values_df.max(axis = 1, skipna=True)\npat1_values_df_features['min'] = pat1_values_df.min(axis = 1, skipna=True)\npat1_values_df_features['max-min'] = pat1_values_df_features['max'] - pat1_values_df_features['min']","04e508d0":"pat1_values_df_features['mean'] = pat1_values_df.mean(axis = 1, skipna=True)","3e99e516":"pat1_values_df_features['std'] = pat1_values_df.std(axis = 1, skipna=True)","19bcad0d":"pat1_values_df_features['skew'] = pat1_values_df.skew(axis = 1, skipna=True)","9a434cbc":"# OBSERVATIONS\npat1_values_df_features.head()","6efe2ccd":"# ADDING TARGET - 'meal', since all labels are positive\npat1_values_df_features['target'] = 'meal'\npat1_values_df_features.head()","99bb459a":"features = ['max', 'min', 'max-min', 'mean', 'std', 'skew']\n# SEPARATING FEATURES\nfeatures_unstd = pat1_values_df_features.loc[:, features].values\n# SEPARATING TARGET\ntarget = pat1_values_df_features.loc[:,['target']].values\n# STANDARDIZING FEATURES\nfeatures_std = StandardScaler().fit_transform(features_unstd)\nprint(features_std)","d99e46a6":"# APPLYING PCA with n=None\npca = PCA(n_components=None)\nprincipal_components = pca.fit(features_std)\n\nprint(principal_components.explained_variance_ratio_)","2c2051f5":"# APPLYING PCA with n=2\npca = PCA(n_components=2)\nprincipal_components_2 = pca.fit(features_std)\n\nprint(principal_components_2.explained_variance_ratio_)","d1f88f7f":"# TODO: convert array to DF\nprincipal_df.shape","7f9a8d1a":"# CONCATENATING PRINCIPLE COMPONENTS WITH TARGET\ndf_final = pd.concat([principal_df, pat1_values_df_features[['target']]], axis = 1)\ndf_final.head()","b400e29f":"fig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('2 component PCA', fontsize = 20)\ntargets = ['meal', 'not-meal']\ncolors = ['r', 'g', 'b']\nfor target, color in zip(targets,colors):\n    indicesToKeep = df_final['target'] == target\n    ax.scatter(df_final.loc[indicesToKeep, 'principal component 1']\n               , df_final.loc[indicesToKeep, 'principal component 2']\n               , c = color\n               , s = 50)\nax.legend(targets)\nax.grid()","a5610252":"# CORRELATION MATRICES\ncorr_matrix_std = np.corrcoef(features_std.T)\nprint('Correlation matrix using standardized data\\n\\n', corr_matrix_std)\n\ncorr_matrix_unstd = np.corrcoef(features_unstd.T)\nprint('\\n\\nCorrelation matrix using base unstandardized data\\n\\n', corr_matrix_unstd)\n\n# COVARIANCE MATRIX(Standardized data)\nmean_vec = np.mean(features_std, axis=0)\ncov_matrix = (features_std - mean_vec).T.dot((features_std - mean_vec)) \/ (features_std.shape[0]-1)\nprint('\\n\\nCovariance matrix \\n\\n', cov_matrix)","25b2281e":"## STANDARDIZATION","adb74a7c":"## 3. Standard-deviation","dde24700":"## 2. Mean","0e855702":"## ADDING TARGET VARIABLE","c930619c":"### Testing - Covariance v\/s Correlation(un-standardized) v\/s Correlation(standardized)","0947b58d":"# Sample Day 1 & 2 Plots","c1a7639a":"## FEATURES DATAFRAME","24bc43c9":"# Cross-Correlation","edf30a5b":"## 1. Max - Min","06e8c456":"# Reading Data(added pre-processing)","e7dedac2":"## OBSERVATION - \n1. Correlation on both dataset yields same result(standardizing the data-set and then computing the covariance and correlation matrices will yield the same results)\n2. Covariance matrix produces similar results to correlation matrices","665464c3":"## PCA","fe5de6fd":"## 4. Skewness","303587a0":"# RESULTS","1444cf2c":"# Method to convert ordinal timeseries format to\n## YYYY-mm-dd HH:MM:ss.SSSSSS"}}