{"cell_type":{"6111792d":"code","b1e2da3d":"code","754a7efd":"code","1616877b":"code","defdd0fd":"code","3130e1ca":"code","e5993731":"code","467fd84e":"code","1c9e54e8":"code","55f4bdde":"code","6f0d970d":"code","3fd3e37c":"code","e7ac8651":"code","02bf9e03":"code","24e79e76":"code","a01c11a7":"code","db6a8840":"code","9f3ded78":"code","b9216faa":"code","93ba1682":"code","d18859a9":"code","c115923c":"code","d941ee26":"code","367f3f8e":"code","1745ee5d":"code","87b59f29":"code","256e98e2":"code","782b0f58":"markdown","7c03f3bc":"markdown","edddb28b":"markdown","1cae98d3":"markdown","f0d92dba":"markdown","fe9d144f":"markdown","76aa4ef7":"markdown","b1cf63d5":"markdown"},"source":{"6111792d":"import cudf\n\ntrain = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","b1e2da3d":"train.sample(3)","754a7efd":"train.shape","1616877b":"test.sample(3)","defdd0fd":"test.shape","3130e1ca":"sample_submission.sample(3)","e5993731":"sample_submission.shape","467fd84e":"train.info()","1c9e54e8":"train.describe()","55f4bdde":"train.describe(exclude='number')","6f0d970d":"from cuml.preprocessing import train_test_split\n\nX = train.drop('target', axis=1)\ny = train.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)","3fd3e37c":"import numpy as np\n\n\ndef baseline_model(n_preds, pred):\n    # just predict the average\n    return cudf.Series([pred for n in range(n_preds)])\n\n# make baseline preds\nbaseline_preds = baseline_model(len(y_test), np.mean(y_train))","e7ac8651":"baseline_preds","02bf9e03":"from cuml.metrics import mean_squared_error\n\nmean_squared_error(y_true=y_test,\n                   y_pred=baseline_preds,\n                   squared=False)","24e79e76":"train.columns","a01c11a7":"%%time\npd.get_dummies(t)","db6a8840":"%%time\ncudf.get_dummies(train)","9f3ded78":"from cuml.preprocessing import train_test_split\n\nX = train.drop('target', axis=1)\nX = cudf.get_dummies(X)\n\ny = train.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)","b9216faa":"from cuml.linear_model import LinearRegression\n\nlr = LinearRegression()\n\nlr.fit(X_train, y_train)","93ba1682":"simple_preds = lr.predict(X_test)\n\nsimple_preds.tail(5)","d18859a9":"from cuml.metrics import mean_squared_error\n\nmean_squared_error(y_true=y_test,\n                   y_pred=simple_preds,\n                   squared=False)","c115923c":"%%time\nimport cudf\nfrom cuml.linear_model import LinearRegression\n\n# data load\ntrain = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n\n# data prep\nX = train.drop('target', axis=1)\nX = cudf.get_dummies(X)\n\ny = train.target\n\ntest = cudf.get_dummies(test)\n\n# modeling\nlr = LinearRegression()\n\nlr.fit(X, y)\n\nsimple_preds = lr.predict(test)\n\n# save results & submit\nsample_submission['target'] = simple_preds\n\nsample_submission.to_csv('submission.csv', index=False)","d941ee26":"for c in X.columns:\n    if c not in test.columns:\n        print(c)","367f3f8e":"X.cat6_G.value_counts()","1745ee5d":"train.cat6.value_counts()","87b59f29":"test['cat6_G'] = 0","256e98e2":"%%time\nimport cudf\nfrom cuml.linear_model import LinearRegression\n\n# data load\ntrain = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')\n\n# data prep\nX = train.drop('target', axis=1)\nX = cudf.get_dummies(X)\n\ny = train.target\n\ntest = cudf.get_dummies(test)\ntest['cat6_G'] = 0  # fix lack of Gs in test data\n\n# modeling\nlr = LinearRegression()\n\nlr.fit(X, y)\n\nsimple_preds = lr.predict(test)\n\n# save results & submit\nsample_submission['target'] = simple_preds\n\nsample_submission.to_csv('submission.csv', index=False)","782b0f58":"How to solve `ValueError: Expected 71 columns but got 70 columns.`...\n\n- \"Expected 71\" <- model was trained on 71 columns\n- \"but got 70\" <- test data only has 70 columns","7c03f3bc":"### About the train...","edddb28b":"https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.mean_squared_error.html","1cae98d3":"## Define a simple model...","f0d92dba":"## Load in Data","fe9d144f":"## Baseline Model","76aa4ef7":"My model is better than the baseline!! I'm lazy so let's submit and call it a day :)","b1cf63d5":"Instead of deleting, I'm going to add this column to `test`..."}}