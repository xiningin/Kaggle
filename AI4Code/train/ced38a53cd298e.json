{"cell_type":{"9477f2ae":"code","8a3396e2":"code","d953e962":"code","50c20bbb":"code","5bbff3d2":"code","8cb9b481":"code","e624b525":"code","6fe09516":"code","4b716795":"code","b94ed590":"code","b394b6d3":"code","31fa2f87":"code","77ce6bef":"code","8dc8ed0c":"code","0a79693a":"code","2d330294":"code","98258b4c":"code","ec3c07e0":"code","a9b51be7":"code","5ba5021d":"code","44000702":"code","0b1efebb":"code","3d2f0228":"code","9bfd382f":"code","737bbdc7":"code","83d3c013":"code","ed35dfbb":"code","8ba3e54f":"code","d5dc5f65":"code","450d4b17":"code","dd8e2f2c":"code","65801f08":"code","7acbdcaa":"code","81c521b7":"code","4eacc8bb":"code","7de182d0":"code","8f803c3c":"code","704b13dd":"code","5803abca":"code","055a27ea":"code","88cdef19":"code","ae2c05e6":"code","49e1a8c2":"code","6fac7cde":"code","0b49cbce":"code","0afb24c1":"code","f88b4dcd":"code","3e95df95":"code","0a75506b":"code","fd52b24a":"code","97b63fea":"code","93ab32b3":"code","ea736399":"code","c7bee83d":"code","fc9a00b4":"code","d0aa9942":"code","838d1be3":"code","7ddec285":"code","9c944a72":"code","8e86a983":"code","2f177963":"code","0304b758":"code","aae9cfb5":"code","c28d6bcb":"code","749855a0":"code","cdcc444c":"code","968b404d":"code","a65c6ef4":"code","fa50c5ed":"code","99a2ff09":"code","1d4ef8bc":"code","11db31c7":"code","68a37446":"code","51f68564":"code","68dbcd27":"code","fb29efc0":"code","d4855fe1":"code","57bef8cd":"code","e918b691":"code","68e459f4":"code","362b8329":"code","fe7d0348":"code","260b4e53":"code","a551ad2b":"code","b2a412de":"code","d608dd16":"code","91d6050a":"code","92d3f088":"code","6741741c":"code","3d488e0f":"code","26626f8a":"code","59bad45f":"code","743b9ab6":"code","65995019":"code","33595f83":"code","ea017622":"markdown","0eb0b434":"markdown"},"source":{"9477f2ae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\npd.set_option(\"display.max_columns\",999)\npd.set_option(\"display.max_rows\", 999)\nimport warnings\nwarnings.simplefilter(action = \"ignore\")","8a3396e2":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")","d953e962":"df.head(5)","50c20bbb":"df.info()","5bbff3d2":"df.describe()","8cb9b481":"#total 891 observations, our dependent variable is Survived","e624b525":"#to find null values\nnull_list = []\nnull_count = []\nnull_percen = []\nfor i in df.columns:\n    val = df[i].isnull().sum()\n    if  val > 0:\n        null_list.append(i)\n        null_count.append(val)\n        null_percen.append(val\/len(df))","6fe09516":"null_dic = {\"null_columns\" : null_list, \"null_count\" : null_count, \"null_percentage\" : null_percen}","4b716795":"null_df = pd.DataFrame.from_dict(null_dic)","b94ed590":"null_df","b394b6d3":"fig = plt.figure()\nsns.barplot(x = \"null_columns\", y = \"null_percentage\", data = null_df)\n\nplt.show()","31fa2f87":"#for cabin, we need to replace the nan values with the another category\ndf[\"Cabin\"] = df['Cabin'].fillna(\"miss\")\n#and also take the first letter of the cabin to specify the classes.\ncabin_first = df['Cabin'].astype(str).str[0]\ndf['Cabin'] = df['Cabin'].astype(str).str[0]","77ce6bef":"cabin_dict = cabin_first.value_counts().to_dict()","8dc8ed0c":"cabin_dict","0a79693a":"df['Cabin'] = df['Cabin'].map(cabin_dict)","2d330294":"#now focus on age column","98258b4c":"df['Age'] = df['Age'].fillna(df['Age'].median())","ec3c07e0":"df['Embarked'].value_counts()\n#missed values is only two so replace that with Highest count 'S'","a9b51be7":"df['Embarked'] = df['Embarked'].fillna('S')","5ba5021d":"df.head(3)","44000702":"#name and ticket is not required\ndf.drop(['Name', 'Ticket', 'PassengerId'], axis = 1, inplace = True)","0b1efebb":"df.head(5)","3d2f0228":"sns.barplot(y = 'Age', x = 'Survived', hue = 'Sex', data = df)","9bfd382f":"# more female are survived than male\nsns.stripplot(x = \"Sex\", y = \"Fare\", hue = \"Embarked\", data = df)","737bbdc7":"for i in df.columns:\n    try:\n        plt.figure()\n        colors = \"#\" + str(np.random.randint(100000,999999))\n        sns.distplot(df[i], color = colors)\n        plt.figure()\n    except:\n        pass","83d3c013":"sex = pd.get_dummies(df['Sex'], drop_first = True)\nembarked = pd.get_dummies(df['Embarked'], drop_first = True)","ed35dfbb":"df.drop(['Sex', 'Embarked'],axis = 1, inplace = True)","8ba3e54f":"df = pd.concat([df, sex, embarked], axis = 1)","d5dc5f65":"df.head(1)","450d4b17":"Y = df[['Survived']]\ndf.drop('Survived', axis = 1, inplace = True)\nX= df","dd8e2f2c":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscale_X = scaler.fit_transform(X)","65801f08":"X = pd.DataFrame(scale_X, columns = X.columns)\nX.head(5)","7acbdcaa":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report","81c521b7":"x_train, x_test, y_train,y_test = train_test_split(X,Y, test_size = 0.3)","4eacc8bb":"#for logisticregression\nLOR = LogisticRegression()\nLOR.fit(x_train,y_train)\ny_pred = LOR.predict(x_test)\nprint(accuracy_score(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))\nprint(classification_report(y_pred,y_test))","7de182d0":"#for randomforestclassifier\nfrom sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier()\nclassifier.fit(x_train,y_train)\ny_pred = classifier.predict(x_test)\nprint(accuracy_score(y_pred,y_test))\nprint(confusion_matrix(y_pred,y_test))\nprint(classification_report(y_pred,y_test))","8f803c3c":"1e-4","704b13dd":"params = {\n    'penalty' : ['l1', 'l2', 'elasticnet', None],\n    'C': [0.2,0.5,0.7,1.0,1,4,1,5],\n    'class_weight': [None,1,2,3,4,5,8],\n    'solver' : ['liblinear', 'newton-cg', 'lbfgs'],\n    'max_iter' : np.linspace(0,501,50),\n    'l1_ratio' : [0.2,0.4,0.6,0.8,1]\n}","5803abca":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV","055a27ea":"m1_rn = RandomizedSearchCV(LOR, param_distributions = params, n_jobs = -1, verbose = 3, n_iter = 100, cv = 5, random_state = 0)","88cdef19":"m1_rn.fit(x_train,y_train)","ae2c05e6":"m1_rn.best_params_","49e1a8c2":"params = { 'C': [0,0.2,0.3],\n    'class_weight': [None,1,2],\n    'solver' : ['newton-cg', 'lbfgs'],\n    'max_iter' : [300,340,380],\n    'l1_ratio' : [0,0.1,0.2,0.3],\n        'penalty' : [\"l2\"]\n         }","6fac7cde":"m2_grid = GridSearchCV(LOR, param_grid = params, n_jobs = -1, cv = 4, verbose = 4)","0b49cbce":"m2_grid.fit(x_train,y_train)","0afb24c1":"m2_grid.best_estimator_","f88b4dcd":"m2_grid.best_params_","3e95df95":"m3_lor = LogisticRegression(C= 0.2,\n class_weight= None,\n l1_ratio= 0,\n max_iter= 300,\n penalty= 'l2',\n solver='newton-cg')","0a75506b":"m3_lor.fit(x_train,y_train)","fd52b24a":"y_pred = m3_lor.predict(x_test)","97b63fea":"print(accuracy_score(y_pred,y_test))","93ab32b3":"#perform hyper parameter tuning xgboost\nfrom xgboost import XGBClassifier","ea736399":"xgb = XGBClassifier()","c7bee83d":"params = {\n    \"max_depth\" : [1,2,3,4,5,6,7,8,9],\n    \"learning_rate\" : [0.005,0.010,0.030,0.070,0.010,0.03,0.05,0.09,0.10,0.20,0.30,0.40,0.50,0.60],\n    \"booster\" : ['gbtree', 'gblinear', 'dart'],\n    \"gamma\" : [0,0.05,0.1,0.2,0.3,0.4,0.5],\n    \"min_child_weight\" : [1,2,3,4,5,6,7],\n    \"subsample\" : [0.2,0.3,0.4,0.5,0.6,0.7],\n    \"colsample_bytree\": [0.1,0.2,0.3,0.4,0.5]\n}","fc9a00b4":"m4_xgb = RandomizedSearchCV(xgb, param_distributions = params, n_iter = 200, cv = 5, n_jobs = -1, verbose = 3, random_state = 0)","d0aa9942":"m4_xgb.fit(x_train,y_train)","838d1be3":"m4_xgb.best_params_","7ddec285":"y_pred = m4_xgb.predict(x_test)\nprint(confusion_matrix(y_pred,y_test))\nprint(accuracy_score(y_pred,y_test))\nprint(classification_report(y_pred,y_test))","9c944a72":"params = {\n    \"max_depth\" : [6,7,8,9],\n    \"learning_rate\" : [0.08,0.07,.09,0.10,0.11],\n    \"booster\" : ['dart'],\n    \"gamma\" : [0,0.09,0.02],\n    \"min_child_weight\" : [3,4,5],\n    \"subsample\" : [0.6,0.7,0.8,0.9],\n    \"colsample_bytree\": [0.4,0.5,0.6,0.7]\n}","8e86a983":"m5_grid = GridSearchCV(xgb, param_grid = params, n_jobs = -1, cv = 4,verbose = 3)","2f177963":"m5_grid.fit(x_train,y_train)","0304b758":"y_pred = m5_grid.predict(x_test)\nprint(confusion_matrix(y_pred,y_test))\nprint(accuracy_score(y_pred,y_test))\nprint(classification_report(y_pred,y_test))","aae9cfb5":"m5_grid.best_estimator_","c28d6bcb":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","749855a0":"test_data.drop(['PassengerId', 'Ticket', 'Name'], axis = 1, inplace = True)","cdcc444c":"test_data.head(5)","968b404d":"#to find null values\nnull_list = []\nnull_count = []\nnull_percen = []\nfor i in test_data.columns:\n    val = test_data[i].isnull().sum()\n    if  val > 0:\n        null_list.append(i)\n        null_count.append(val)\n        null_percen.append(val\/len(df))","a65c6ef4":"null_list","fa50c5ed":"test_data['Age'] = test_data['Age'].fillna(test_data['Age'].median())\ntest_data['Fare'] = test_data['Fare'].fillna(test_data['Fare'].median())","99a2ff09":"test_data['Cabin'] = test_data['Cabin'].fillna('miss')","1d4ef8bc":"test_data['Cabin'] = test_data['Cabin'].astype(str).str[0]","11db31c7":"cabin_dict = test_data['Cabin'].value_counts().to_dict()","68a37446":"test_data['Cabin'] = test_data['Cabin'].map(cabin_dict)","51f68564":"test_data.head()","68dbcd27":"sex = pd.get_dummies(test_data['Sex'], drop_first = True)\nembarked = pd.get_dummies(test_data['Embarked'], drop_first = True)\ntest_data.drop(['Sex', 'Embarked'], axis = 1, inplace = True)\ntest_data = pd.concat([test_data, sex, embarked], axis = 1)","fb29efc0":"scaled_data = scaler.fit_transform(test_data)","d4855fe1":"test_data = pd.DataFrame(scaled_data, columns = test_data.columns)","57bef8cd":"test_data.head()","e918b691":"# fitting the train data with the best model\nfrom sklearn.pipeline import Pipeline","68e459f4":"pipe = Pipeline([\n    (\"xgb\", XGBClassifier(base_score=0.5, booster='dart', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.7, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.09, max_delta_step=0, max_depth=9,\n              min_child_weight=4, missing=np.nan, monotone_constraints='()',\n              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=0.7,\n              tree_method='exact', validate_parameters=1, verbosity=None))\n])\n","362b8329":"pipe.fit(X,Y)","fe7d0348":"pipe.predict(test_data)","260b4e53":"import joblib\njoblib.dump(pipe, 'TitanicModel.pkl')","a551ad2b":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","b2a412de":"y_pred = pipe.predict(test_data)\nprint(confusion_matrix(y_pred,submission['Survived']))\nprint(accuracy_score(y_pred,submission['Survived']))\nprint(classification_report(y_pred,submission['Survived']))","d608dd16":"submission['Survived'] = y_pred","91d6050a":"submission.to_csv(\"test_result.csv\", index = False)","92d3f088":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()","6741741c":"params = {\n    \"n_estimators\" : [100,200,300,400,500],\n    \"criterion\" : ['entropy', 'gini'],\n    \"max_depth\" : [1,3,5,7,9],\n    \"min_samples_split\" : [1,3,5,6,7,8],\n    \"min_samples_leaf\" : [1,2,3,4],\n    \"max_leaf_nodes\" : [None, 1,2,3,4],\n\n}","3d488e0f":"model_new1 = RandomizedSearchCV(rfc, param_distributions = params, n_jobs = -1, verbose = 3, n_iter = 300, cv = 4, random_state = 0)","26626f8a":"model_new1.fit(X,Y)","59bad45f":"y_pred = model_new1.predict(test_data)\nprint(confusion_matrix(y_pred,submission['Survived']))\nprint(accuracy_score(y_pred,submission['Survived']))\nprint(classification_report(y_pred,submission['Survived']))","743b9ab6":"y_pred","65995019":"submission['Survived'] = y_pred","33595f83":"submission.to_csv(\".\/test_result.csv\", index = False)","ea017622":"Please comment if any queries","0eb0b434":"# Titanic dataset Prediction"}}