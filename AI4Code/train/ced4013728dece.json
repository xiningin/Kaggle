{"cell_type":{"261a26aa":"code","e81e1b8b":"code","9ca5f717":"code","a2db7011":"code","155bc00a":"code","05baf2f8":"code","850f0cb6":"code","61f07da2":"code","6f88a552":"code","a1c99f12":"code","c01dfef0":"code","54b918d8":"markdown","03747060":"markdown","9f5d2e91":"markdown","7fb75a31":"markdown","98088e21":"markdown","051775ed":"markdown","c0f28908":"markdown","ab0687f6":"markdown","19f15588":"markdown","2699ddca":"markdown"},"source":{"261a26aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e81e1b8b":"import json, sys, random\nimport numpy as np","9ca5f717":"# download dataset from json object\nf = open(r'..\/input\/ships-in-satellite-imagery\/shipsnet.json')\ndataset = json.load(f)\nf.close()","a2db7011":"data = np.array(dataset['data']).astype('uint8')\nlabels = np.array(dataset['labels']).astype('uint8')","155bc00a":"data.shape","05baf2f8":"print(labels.shape)\nprint(labels[0:10])","850f0cb6":"n_spectrum = 3 # color chanel (RGB)\nwidth = 80\nheight = 80\nX = data.reshape([-1, n_spectrum, width, height])\n\nX.shape","61f07da2":"# Your code here...\nimport matplotlib.pyplot as plt\nfor i in range(20):\n    plt.imshow(np.moveaxis(X[i], 0, -1)) # reshape won't work\n    plt.show()","6f88a552":"noships = np.argwhere(labels==0)[:20].flatten()\nfor i in noships:\n    plt.imshow(np.moveaxis(X[i], 0, -1))\n    plt.show()","a1c99f12":"# Your code here...\n\nXmeans = X.mean(axis=0) # returns array of shape (n_spectrum, width(?), height(?))\nXstds = X.std(axis=0)\n\n# Means for the three channels\nfig, axs = plt.subplots(1, 3, constrained_layout=True)\ntitles = list('RGB')\nfor i, ax in enumerate(axs):\n    ax.hist(Xmeans[i, :, :].flatten())\n    ax.set_title(titles[i])\nfig.suptitle('means')\nfig.show()\n\n# Std for the three channels\nfig, axs = plt.subplots(1, 3, constrained_layout=True)\nfor i, ax in enumerate(axs):\n    ax.hist(Xstds[i, :, :].flatten())\n    ax.set_title(titles[i])\nfig.suptitle('stds')\nfig.show()","c01dfef0":"# Your code here...","54b918d8":"From the dataset description, we know that each image has 3 color channels (RGB), and is 80x80 pixels.","03747060":"The dataset includes 4000 labels, corresponding to each image.","9f5d2e91":"## Task 2\n\ncreate histogram of R, B, G channel means and standard deviations","7fb75a31":"# Exploring ship images\n\nIn this exercise, we're going to explore a dataset of images of ships and manipulate some of the data.","98088e21":"## Task 3\n\nNormalize each image so that R, B, and G channels have mean = 0 and standard deviation = 1, create histograms again.","051775ed":"The entire dataset is available as a JSON file.","c0f28908":"So now we have 4000 images, each with 3 channels and 80x80 pixels.","ab0687f6":"The images are stored as the `data` key, and the labels are stored as the `label` key (1 = \"ship\", 0 = \"no ship\").","19f15588":"## Task 1 \n\nDisplay 20 images with ships in them, and 20 images with no ships.","2699ddca":"The dataset contains 4000 images. One image is represented as a vector of length 19200 elements."}}