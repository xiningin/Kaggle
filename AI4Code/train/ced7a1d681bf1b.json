{"cell_type":{"df8dbc58":"code","54f890d3":"code","e5c17845":"code","514c36d4":"code","c85a7dbe":"code","d4b4b80a":"code","62aa2e6c":"code","0b017c62":"code","c2ed9968":"code","7aac170b":"code","686ce7e8":"code","5b23ffca":"code","674a62fb":"code","b76072c2":"code","5bb53bc5":"code","d5d41c52":"code","e83c6c74":"code","6367a1f4":"code","083cf463":"code","ceb41414":"code","623836c6":"code","f5dacc7d":"code","99812f9c":"code","9fde2528":"code","8228f601":"code","0d8cd8e4":"code","ebf3de28":"code","9455e64a":"code","aa1d7ffd":"code","b2bf717c":"code","ca68df56":"code","6e4239a3":"code","79b2f71b":"code","312a26ad":"code","f6eb2608":"markdown"},"source":{"df8dbc58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport codecs\n\n    \n# Any results you write to the current directory are saved as output.","54f890d3":"data = pd.read_csv('..\/input\/NBA_player_of_the_week.csv')\n","e5c17845":"data.info()\n","514c36d4":"data.corr()","c85a7dbe":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","d4b4b80a":"data.head(1000)\n","62aa2e6c":"data.columns\n","0b017c62":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata['Seasons in league'].plot(kind = 'line', color = 'g',label = 'Seasons in league',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Age.plot(color = 'r',label = 'Age',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","c2ed9968":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Seasons in league', y='Age',alpha = 0.5,color = 'red')\nplt.xlabel('Real_value')\nplt.ylabel('Age')\nplt.title('Value Date Scatter Plot')","7aac170b":"# Histogram\n# bins = number of bar in figure\ndata.Age.plot(kind = 'hist',bins = 40,figsize = (12,12))\nplt.show()","686ce7e8":"# clf() = cleans it up again you can start a fresh\ndata['Seasons in league'].plot(kind = 'hist',bins = 50)\nplt.clf()","5b23ffca":"#create dictionary and look its keys and values\ndictionary = {'Spain' : 'Barcelona',\n              'Turkey' : 'Fenerbahce',\n              'Germany' : 'Bayern Munih',\n              'France' : 'Paris Saint Germain'}\nprint(dictionary.keys())\nprint(dictionary.values())","674a62fb":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"\nprint(dictionary)\ndictionary['france'] = \"paris\"\nprint(dictionary)\ndel dictionary['spain']\ndel dictionary['france']\nprint(dictionary.keys())\nprint(dictionary.values())\nprint(dictionary)\nprint('france' in dictionary)\nprint('France' in dictionary)\ndictionary.clear()\nprint(dictionary)","b76072c2":"series = data['Team']\nprint(type(series))\ndata_frame = data[['Team']]\nprint(type(data_frame))","5bb53bc5":"# Comparison operator\nprint(6 > 9)\nprint(70 >= 15)\nprint(4!=7)\n# Boolean operators\nprint(True and False)\nprint(True or False)","d5d41c52":"# 1 - Filtering Pandas data frame\nx = data['Age']<30\ndata[x]","e83c6c74":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Age']<25) & (data['Real_value']<1)]","6367a1f4":"# Stay in loop if condition( i is not equal 18) is true\ni = 0\nwhile i != 18 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 18')","083cf463":"# Stay in loop if condition( i is not equal 9) is true\nliste = [1,2,3,4,5,6,7,8,9]\nfor i in liste:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(liste):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'Spain':'Real Madrid','France':'Paris Saint Germain', 'Italy' : 'Juventus'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Age']][0:1].iterrows():\n    print(index,\" : \",value)","ceb41414":"def tuble_ex():\n    t = (data.Team, data.Player, data.Age)\n    return t\na,b,c = tuble_ex()\nprint(a)\nprint(b)\nprint(c)","623836c6":"sL = data['Seasons in league']\ndef f():\n    x = data.Real_value\n    y = sL \/ x\n    return y\nprint(f())","f5dacc7d":"import builtins\ndir(builtins)","99812f9c":"dir(pd)","9fde2528":"dir(plt)","8228f601":"def square():\n    \n    def add():\n        sL = data['Seasons in league']\n        x = data.Real_value\n        y = sL \/ x\n        return y\n    return add()**2\nprint(square())","0d8cd8e4":"def f(**kwargs):\n    for key, value in kwargs.items():\n        print(key, \" \", value)\nf(Team = data.Team, Player = data.Player, Age = data.Age)\n","ebf3de28":"sL = data['Seasons in league']\nx = data.Age\nsquare = lambda z,y: y\/z\nprint(square(sL,x))\n","9455e64a":"sL = data['Seasons in league']\nrv = data.Real_value\ny = map(lambda x:x**rv,sL)\nprint(list(y))","aa1d7ffd":"# iteration example\nname = data.Player\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","b2bf717c":"list1 = data.Player\nlist2 = data.Team\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","ca68df56":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","6e4239a3":"# Example of list comprehension\nnum1 = data['Seasons in league']\nnum2 = [i * 2 for i in num1 ]\nprint(num2)","79b2f71b":"num1 = data['Seasons in league']\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","312a26ad":"threshold = sum(data.Real_value)\/len(data.Real_value)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Real_value]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","f6eb2608":"**INTRO**<br><br>\n**Hello to Everyone,**<br>\nUdemy site DATAI TEAM (Kaan Can) Python course I watched. And I created this notebook to do the homework. I picked the data randomly. Now I'm going to examine this data with what I've learned."}}