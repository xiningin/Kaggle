{"cell_type":{"c75ba439":"code","74c4b75b":"code","ef090ce2":"code","4accf5ae":"code","40f2d9f2":"code","b742fa4e":"code","e1f5bef1":"code","4e4c9a99":"code","b6c08bb2":"code","0eb74a1b":"code","7a667dc5":"code","12fcae52":"code","2fce0b5a":"code","6ed2fd71":"code","985decf0":"code","1077596a":"code","fa18e9d6":"code","975ac603":"code","3971d584":"code","48dda7a4":"code","6f750415":"code","db894177":"code","c3d8917c":"code","0c3fb34f":"code","1c33dfcd":"code","d3705627":"code","bdff0d8d":"code","3723e05c":"code","c8e4c4fe":"code","e6a9c1a7":"code","810f906b":"code","c6318e01":"code","9d43179e":"code","43456ee0":"code","eac025d0":"code","e50a8145":"code","c664da19":"code","957ec70b":"code","fc349477":"code","7201d839":"code","d6e8b72d":"code","8d5d1092":"code","5f26f45c":"code","65966f5a":"code","6facc617":"code","bfcda78f":"code","6696569b":"code","12474f95":"markdown","a6bcd593":"markdown","5eac2cfc":"markdown","0cd7e727":"markdown","26d65042":"markdown","ce2108cd":"markdown","ce5f81e2":"markdown"},"source":{"c75ba439":"import tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\n\nfrom folium import plugins","74c4b75b":"house_df = pd.read_csv('..\/input\/housesalesprediction\/kc_house_data.csv', encoding = 'ISO-8859-1')","ef090ce2":"house_df.head()","4accf5ae":"house_df.info()","40f2d9f2":"house_df.describe()","b742fa4e":"g1 = [go.Box(y=house_df.bedrooms,name=\"Bedrooms\",marker=dict(color=\"rgba(51,0,0,0.9)\"),hoverinfo=\"name+y\")]\ng2 = [go.Box(y=house_df.bathrooms,name=\"Bathrooms\",marker=dict(color=\"rgba(0,102,102,0.9)\"),hoverinfo=\"name+y\")]\ng3 = [go.Box(y=house_df.floors,name=\"Floors\",marker=dict(color=\"rgba(204,0,102,0.9)\"),hoverinfo=\"name+y\")]\nlayout2 = go.Layout(title=\"Bedrooms,Bathrooms and Floors\",yaxis=dict(range=[0,13])) \nfig2 = go.Figure(data=g1+g2+g3,layout=layout2)\niplot(fig2)","e1f5bef1":"total = len(house_df)\nax1 = plt.figure(figsize=(17,7))\n\ng = sns.countplot(x='bedrooms', data=house_df)\ng.set_title(\"Bedrooms\", fontsize=20)\ng.set_xlabel(\"\", fontsize=17)\ng.set_ylabel(\"Count\", fontsize=17)\nsizes = []\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=10) \ng.set_ylim(0, max(sizes) * 1.1)","4e4c9a99":"sns.scatterplot(x = 'sqft_living', y = 'price', data = house_df);","b6c08bb2":"f, ax = plt.subplots(figsize = (20, 20))\nsns.heatmap(house_df.corr(), annot = True);","0eb74a1b":"house_df.hist(bins = 20, figsize = (20,20), color = 'b');","7a667dc5":"house_df[\"color\"] = \"\"\nhouse_df.color[house_df.grade == 1] = \"rgb(255,255,255)\"\nhouse_df.color[house_df.grade == 2] = \"rgb(220,220,220)\"\nhouse_df.color[house_df.grade == 3] = \"rgb(242, 177, 172)\"\nhouse_df.color[house_df.grade == 4] = \"rgb(255,133,27)\"\nhouse_df.color[house_df.grade == 5] = \"rgb(255,255,204)\"\nhouse_df.color[house_df.grade == 6] = \"rgb(255,65,54)\"\nhouse_df.color[house_df.grade == 7] = \"rgb(178,37,188)\"\nhouse_df.color[house_df.grade == 8] = \"rgb(51,51,0)\"\nhouse_df.color[house_df.grade == 9] = \"rgb(37,188,127)\"\nhouse_df.color[house_df.grade == 10] = \"rgb(26,51,176)\"\nhouse_df.color[house_df.grade == 11] = \"rgb(132,10,10)\"\nhouse_df.color[house_df.grade == 12] = \"rgb(82,80,80)\"\nhouse_df.color[house_df.grade == 13] = \"rgb(0,0,0)\"\n\ndataplus = house_df[np.logical_and(house_df.grade >= 7,house_df.yr_built >= 2000)] \nlats = list(dataplus.lat.values)\nlongs = list(dataplus.long.values)\n\nmapbox_access_token = 'pk.eyJ1IjoiZGFya2NvcmUiLCJhIjoiY2pscGFheHA1MXdqdjNwbmR3c290MTZ6dCJ9.K1FMv_q3ZVlKP13RrjFkjg'\nmapp = [go.Scattermapbox(lat=lats,lon=longs,mode=\"markers\",marker=dict(size=4,color=dataplus[\"color\"]) ,hoverinfo=\"text\",text=\"Grade:\"+dataplus.grade.apply(str)+\" Built Year:\"+dataplus.yr_built.apply(str)+\" Price:\"+dataplus.price.apply(str))]\nlayout5 = dict(title=\"Grade(+7) - Built Year(+2000) Map\",width=800,height=750,hovermode=\"closest\",mapbox=dict(bearing=0,pitch=0,zoom=9,center=dict(lat=47.5,lon=-122.161),accesstoken=mapbox_access_token))\nfig5 = go.Figure(data=mapp,layout=layout5)\niplot(fig5);","12fcae52":"selected_features = ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'sqft_above', 'sqft_basement']","2fce0b5a":"X = house_df[selected_features]\nX","6ed2fd71":"y = house_df['price']\ny.head()","985decf0":"print(X.shape, y.shape)","1077596a":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)","fa18e9d6":"X_scaled","975ac603":"X_scaled.shape","3971d584":"y = y.values.reshape(-1,1)","48dda7a4":"y.shape","6f750415":"y_scaled = scaler.fit_transform(y)","db894177":"y_scaled","c3d8917c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.25)","0c3fb34f":"print(X_train.shape, X_test.shape )","1c33dfcd":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu', input_shape=(7, )))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='linear')) ","d3705627":"model.summary()","bdff0d8d":"model.compile(optimizer='Adam', loss='mean_squared_error')","3723e05c":"epochs_hist = model.fit(X_train, y_train, epochs = 100, batch_size = 50, validation_split = 0.2)","c8e4c4fe":"plt.plot(epochs_hist.history['loss'])\nplt.plot(epochs_hist.history['val_loss'])\nplt.title('Model Loss Progress During Training')\nplt.ylabel('Training and Validation Loss')\nplt.xlabel('Epoch number')\nplt.legend(['Training Loss', 'Validation Loss']);","e6a9c1a7":"y_predict = model.predict(X_test)\nplt.plot(y_test, y_predict, \"^\", color = 'r')\nplt.xlabel(\"Model Predictions\")\nplt.ylabel(\"True Value (ground Truth)\")\nplt.title('Linear Regression Predictions')\nplt.show()","810f906b":"y_predict_orig = scaler.inverse_transform(y_predict)\ny_test_orig = scaler.inverse_transform(y_test)","c6318e01":"plt.plot(y_test_orig, y_predict_orig, \"^\", color = 'r')\nplt.xlabel('Model Predictions')\nplt.ylabel('True Values')\nplt.xlim(0, 5000000)\nplt.ylim(0, 3000000);","9d43179e":"k = X_test.shape[1]\nn = len(X_test)\nn","43456ee0":"k","eac025d0":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom math import sqrt\n\nRMSE = float(format(np.sqrt(mean_squared_error(y_test_orig, y_predict_orig)),'.3f'))\nMSE = mean_squared_error(y_test_orig, y_predict_orig)\nMAE = mean_absolute_error(y_test_orig, y_predict_orig)\nr2 = r2_score(y_test_orig, y_predict_orig)\nadj_r2 = 1-(1-r2)*(n-1)\/(n-k-1)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2, '\\nAdjusted R2 =', adj_r2) ","e50a8145":"selected_features = ['bedrooms','bathrooms','sqft_living','sqft_lot','floors', 'sqft_above', 'sqft_basement', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'yr_built', \n'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15']\n\nX = house_df[selected_features]\nX.head()","c664da19":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)","957ec70b":"X_scaled","fc349477":"y = house_df['price']","7201d839":"y = y.values.reshape(-1,1)\ny_scaled = scaler.fit_transform(y)\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.25)","d6e8b72d":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu', input_shape=(19, )))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='linear'))","8d5d1092":"model.compile(optimizer='Adam', loss='mean_squared_error')","5f26f45c":"epochs_hist = model.fit(X_train, y_train, epochs = 100, batch_size = 50, validation_split = 0.2)","65966f5a":"plt.plot(epochs_hist.history['loss'])\nplt.plot(epochs_hist.history['val_loss'])\nplt.title('Model Loss Progress During Training')\nplt.ylabel('Training and Validation Loss')\nplt.xlabel('Epoch number')\nplt.legend(['Training Loss', 'Validation Loss']);","6facc617":"y_predict = model.predict(X_test)\nplt.plot(y_test, y_predict, \"^\", color = 'r')\nplt.xlabel(\"Model Predictions\")\nplt.ylabel(\"True Value (ground Truth)\")\nplt.title('Linear Regression Predictions')\nplt.show()","bfcda78f":"y_predict_orig = scaler.inverse_transform(y_predict)\ny_test_orig = scaler.inverse_transform(y_test)","6696569b":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nfrom math import sqrt\n\nRMSE = float(format(np.sqrt(mean_squared_error(y_test_orig, y_predict_orig)),'.3f'))\nMSE = mean_squared_error(y_test_orig, y_predict_orig)\nMAE = mean_absolute_error(y_test_orig, y_predict_orig)\nr2 = r2_score(y_test_orig, y_predict_orig)\nadj_r2 = 1-(1-r2)*(n-1)\/(n-k-1)\n\nprint('RMSE =',RMSE, '\\nMSE =',MSE, '\\nMAE =',MAE, '\\nR2 =', r2, '\\nAdjusted R2 =', adj_r2) ","12474f95":"# **2\u00b0 Test**\n\n\nLet's add more attributes and have the results compare.","a6bcd593":"# **Conclusion**\n\nIn this second test, we checked if we keep all dataset attributes and all R2 and Adjusted R2 characteristics increase in value, so we came to the conclusion that we can keep all attributes in the development of the algorithm for the forecast, and all are well related with each other for setting the price of the property.","5eac2cfc":"# If you find this notebook useful, support with an upvote \ud83d\udc4d","0cd7e727":"In this step we will select only the attributes most relevant to the property's characteristics.","26d65042":"Around season 25 it has stabilized, it would probably not be necessary for us to train for 100 seasons.","ce2108cd":"We have the value of R2 at 0.54%, and the value of adjusted r2 at 0.54%, meaning that the attributes we selected have a good relationship with the price, it shows that we did not select useless attributes, if the value of R2 was too low we could eliminate the attributes and we do more testing.","ce5f81e2":"# **CONTEXT**\n\nThis dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n\nIt's a great dataset for evaluating simple regression models."}}