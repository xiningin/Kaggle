{"cell_type":{"e187fccf":"code","b741e285":"code","0c896073":"code","8eb7ae74":"code","a0e91c1e":"code","acd077ee":"code","1d0c61f6":"code","e2d6fae0":"code","44e8a22f":"code","45acfac0":"code","b5fd3a8d":"code","270e0a55":"code","371f323a":"code","08b92ca7":"code","75292940":"code","118ded0e":"code","e7c21f50":"code","c39aff43":"code","a19f2e31":"code","98a6f209":"code","953bc5ee":"markdown","909413fe":"markdown"},"source":{"e187fccf":"import pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\n!pip install openpyxl\n\nfrom mlxtend.frequent_patterns import apriori, association_rules\n\ndf_ = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name= \"Year 2010-2011\")\n\ndf = df_.copy()","b741e285":"# To avoid the outliers\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","0c896073":"# preprocessing\ndef retail_data_prep(dataframe):\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe\n\ndf = retail_data_prep(df)\ndf.head()","8eb7ae74":"df_ger = df[df['Country'] == \"Germany\"]","a0e91c1e":"df_ger.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).head(20)","acd077ee":"df_ger.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().iloc[0:5, 0:5]\n","1d0c61f6":"df_ger.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().fillna(0).iloc[0:5, 0:5]","e2d6fae0":"df_ger.groupby(['Invoice', 'Description']).agg({\"Quantity\": \"sum\"}).unstack().fillna(0).applymap(\n    lambda x: 1 if x > 0 else 0).iloc[0:5, 0:5]","44e8a22f":"def create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)","45acfac0":"ger_inv_pro_df = create_invoice_product_df(df_ger)\n\nger_inv_pro_df = create_invoice_product_df(df_ger, id=True)","b5fd3a8d":"# for the find the names of id\ndef check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)","270e0a55":"check_id(df_ger, 21987) #PACK OF 6 SKULL PAPER CUPS\n","371f323a":"check_id(df_ger, 23235) # STORAGE TIN VINTAGE LEAF\n","08b92ca7":"check_id(df_ger, 22747) #POPPY'S PLAYHOUSE BATHROOM","75292940":"frequent_itemsets = apriori(ger_inv_pro_df, min_support=0.01, use_colnames=True)\nfrequent_itemsets.sort_values(\"support\", ascending=False).head(20)\n\nrules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)\nrules.sort_values(\"support\", ascending=False).head(100)\n\nrules.sort_values(\"lift\", ascending=False).head(100)","118ded0e":"def arl_recommender(rules_df, product_id, rec_count=1):\n    sorted_rules = rules_df.sort_values(\"lift\", ascending=False)\n    recommendation_list = []\n    for i, product in enumerate(sorted_rules[\"antecedents\"]):\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\n\n    return recommendation_list[0:rec_count]","e7c21f50":"# product recommendation for user who has item 21987 in their cart\narl_recommender(rules, 21987,2)","c39aff43":"# find the product name\ncheck_id(df_ger, 21086)","a19f2e31":"# try another product\narl_recommender(rules, 22747,1)","98a6f209":"# find the product name\ncheck_id(df_ger, 22746)","953bc5ee":"for product recommendation for users","909413fe":"**Association Rules**\n\nAntecedents : previous item\n\nConsequents : next item\n\nAntecedents support : gives the probability of previous item alone\n\nConsequents support : gives the probability that the next item will appear alone\n\nSupport : expresses the probability of seeing two products together\n\nConfidence : probability of getting y when x is taken\n\nLift : probability of taking y when x is taken"}}