{"cell_type":{"1f311fa3":"code","101a9f77":"code","5f72990d":"code","6c3d5a6a":"code","4d52fd93":"code","5e55d815":"code","8713d6b8":"code","4c6734e5":"code","f71a91d5":"code","cb47a438":"code","e1c4ed6e":"code","2dd5a643":"code","a1c4a17a":"code","ba1ac535":"code","7e04609a":"code","83b6ff06":"code","24458fd8":"code","6a1d020c":"code","9af8bdb5":"code","31d7f119":"code","dae2c8b0":"code","0126e8a8":"markdown","83e597e1":"markdown","edc87066":"markdown","ea0f5b01":"markdown","76c30344":"markdown","5a8b1eb7":"markdown","e75b3284":"markdown","7a440528":"markdown","9f8b921e":"markdown","0b41ee31":"markdown","637afe37":"markdown","47b5fa24":"markdown","cb8338b7":"markdown","083cc29f":"markdown","b8a9fa36":"markdown","9b370dad":"markdown","3265e532":"markdown","dbec88a0":"markdown"},"source":{"1f311fa3":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nimport matplotlib.pyplot as plt \nfrom  sklearn.model_selection import train_test_split","101a9f77":"df=pd.read_csv(r'..\/input\/iris\/Iris.csv')\n\ny=df.pop('Species')\ndf.pop('Id')\n\n\nspecies=np.unique(y)\n\ny=y.map(dict(zip(np.unique(y),np.arange(len(np.unique(y))))))\n\n        ","5f72990d":"df.describe()","6c3d5a6a":"corr=df.corr()\nsns.heatmap(corr,annot=True)\nplt.show()","4d52fd93":"df.head()","5e55d815":"y=np.array(y)\nx=df.values\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)","8713d6b8":"setosa,setosa_test=[],[]\nvirginica,virginica_test=[],[]\nversicolor,versicolor_test=[],[]","4c6734e5":"for i in range(len(y)):\n    if y[i]==0:\n        setosa.append(x[i])\n    elif y[i]==1:\n        versicolor.append(x[i])\n    else:\n        virginica.append(x[i])\nsetosa=np.array(setosa)\nvirginica=np.array(virginica)\nversicolor=np.array(versicolor)","f71a91d5":"model=MLPClassifier(max_iter=10000).fit(x_train,y_train)\ny_test=np.array(model.predict(x_test))\nprint(model.score(x_test,y_test))","cb47a438":"for i in range(len(y_test)):\n    if y_test[i]==0:\n        setosa_test.append(x_test[i])\n    elif y_test[i]==1:\n        versicolor_test.append(x_test[i])\n    else:\n        virginica_test.append(x_test[i])\n        \n        \nversicolor_test=np.array(versicolor_test)\nsetosa_test=np.array(setosa_test)\nvirginica_test=np.array(virginica_test)","e1c4ed6e":"plt.figure(0,figsize=(12,6))\nplt.title('relation between sepal measurements')\nplt.scatter(setosa[:,0],setosa[:,1],label='setosa')\nplt.scatter(virginica[:,0],virginica[:,1],label='virginica')\nplt.scatter(versicolor[:,0],versicolor[:,1],label='versicolor')\nplt.scatter(setosa_test[:,0],setosa_test[:,1],label='setosa prediction')\nplt.scatter(versicolor_test[:,0],versicolor_test[:,1],label='versicolor prediction')\nplt.scatter(virginica_test[:,0],virginica_test[:,1],label='virginica prediction')\nplt.xlabel('Sepal length')\nplt.ylabel('sepal width')\nplt.legend()","2dd5a643":"plt.figure(1,figsize=(12,6))\nplt.title('relation between petal measurements')\nplt.scatter(setosa[:,2],setosa[:,3],label='setosa')\nplt.scatter(virginica[:,2],virginica[:,3],label='virginica')\nplt.scatter(versicolor[:,2],versicolor[:,3],label='versicolor')\nplt.scatter(setosa_test[:,2],setosa_test[:,3],label='setosa prediction')\nplt.scatter(versicolor_test[:,2],versicolor_test[:,3],label='versicolor prediction')\nplt.scatter(virginica_test[:,2],virginica_test[:,3],label='virginica prediction')\nplt.xlabel('Petal length')\nplt.ylabel('Petal width')\nplt.legend()","a1c4a17a":"plt.figure(2,figsize=(12,6))\nplt.title('relation between lengths')\nplt.scatter(setosa[:,0],setosa[:,2],label='setosa')\nplt.scatter(virginica[:,0],virginica[:,2],label='virginica')\nplt.scatter(versicolor[:,0],versicolor[:,2],label='versicolor')\nplt.scatter(setosa_test[:,0],setosa_test[:,2],label='setosa prediction')\nplt.scatter(versicolor_test[:,0],versicolor_test[:,2],label='versicolor prediction')\nplt.scatter(virginica_test[:,0],virginica_test[:,2],label='virginica prediction')\nplt.xlabel('Sepal lengths')\nplt.ylabel('Petal lengths')\nplt.legend()","ba1ac535":"plt.figure(3,figsize=(12,6))\nplt.title('relation between widths')\nplt.scatter(setosa[:,1],setosa[:,3],label='setosa')\nplt.scatter(virginica[:,1],virginica[:,3],label='virginica')\nplt.scatter(versicolor[:,1],versicolor[:,3],label='versicolor')\nplt.scatter(setosa_test[:,1],setosa_test[:,3],label='setosa prediction')\nplt.scatter(versicolor_test[:,1],versicolor_test[:,3],label='versicolor prediction')\nplt.scatter(virginica_test[:,1],virginica_test[:,3],label='virginica prediction')\nplt.xlabel('Sepal widths')\nplt.ylabel('Petal widths')\nplt.legend()\nplt.show()","7e04609a":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)\nmodel=RandomForestClassifier().fit(x_train,y_train)\ny_test=np.array(model.predict(x_test))\nprint(model.score(x_test,y_test))","83b6ff06":"setosa_test,versicolor_test,virginica_test=[],[],[]\nfor i in range(len(y_test)):\n    if y_test[i]==0:\n        setosa_test.append(x_test[i])\n    elif y_test[i]==1:\n        versicolor_test.append(x_test[i])\n    else:\n        virginica_test.append(x_test[i])","24458fd8":"versicolor_test=np.array(versicolor_test)\nsetosa_test=np.array(setosa_test)\nvirginica_test=np.array(virginica_test)","6a1d020c":"plt.figure(0,figsize=(12,6))\nplt.title('relation between sepal measurements(Random forest)')\nplt.scatter(setosa[:,0],setosa[:,1],label='setosa')\nplt.scatter(virginica[:,0],virginica[:,1],label='virginica')\nplt.scatter(versicolor[:,0],versicolor[:,1],label='versicolor')\nplt.scatter(setosa_test[:,0],setosa_test[:,1],label='setosa prediction')\nplt.scatter(versicolor_test[:,0],versicolor_test[:,1],label='versicolor prediction')\nplt.scatter(virginica_test[:,0],virginica_test[:,1],label='virginica prediction')\nplt.xlabel('Sepal length')\nplt.ylabel('sepal width')\nplt.legend()","9af8bdb5":"plt.figure(1,figsize=(12,6))\nplt.title('relation between petal measurements(Random forest)')\nplt.scatter(setosa[:,2],setosa[:,3],label='setosa')\nplt.scatter(virginica[:,2],virginica[:,3],label='virginica')\nplt.scatter(versicolor[:,2],versicolor[:,3],label='versicolor')\nplt.scatter(setosa_test[:,2],setosa_test[:,3],label='setosa prediction')\nplt.scatter(versicolor_test[:,2],versicolor_test[:,3],label='versicolor prediction')\nplt.scatter(virginica_test[:,2],virginica_test[:,3],label='virginica prediction')\nplt.xlabel('Petal length')\nplt.ylabel('Petal width')\nplt.legend()","31d7f119":"\nplt.figure(2,figsize=(12,6))\nplt.title('relation between lengths(random forest)')\nplt.scatter(setosa[:,0],setosa[:,2],label='setosa')\nplt.scatter(virginica[:,0],virginica[:,2],label='virginica')\nplt.scatter(versicolor[:,0],versicolor[:,2],label='versicolor')\nplt.scatter(setosa_test[:,0],setosa_test[:,2],label='setosa prediction')\nplt.scatter(versicolor_test[:,0],versicolor_test[:,2],label='versicolor prediction')\nplt.scatter(virginica_test[:,0],virginica_test[:,2],label='virginica prediction')\nplt.xlabel('Sepal lengths')\nplt.ylabel('Petal lengths')\nplt.legend()\n","dae2c8b0":"plt.figure(3,figsize=(12,6))\nplt.title('relation between widths(Random forest)')\nplt.scatter(setosa[:,1],setosa[:,3],label='setosa')\nplt.scatter(virginica[:,1],virginica[:,3],label='virginica')\nplt.scatter(versicolor[:,1],versicolor[:,3],label='versicolor')\nplt.scatter(setosa_test[:,1],setosa_test[:,3],label='setosa prediction')\nplt.scatter(versicolor_test[:,1],versicolor_test[:,3],label='versicolor prediction')\nplt.scatter(virginica_test[:,1],virginica_test[:,3],label='virginica prediction')\nplt.xlabel('Sepal widths')\nplt.ylabel('Petal widths')\nplt.legend()\nplt.show()","0126e8a8":"Now we can start to see more clearly the diferent clusters in the data and this becomes clear in relation with the petal measurements","83e597e1":"Separating the data in the Species variables (will later be used on the process of plotting the data)","edc87066":"In the relation between lengths the clusters are still clear and sparse","ea0f5b01":"Showing correlations between variables","76c30344":"Another amazing result it predicted correctly all the samples it was given !!!!!\n\nAs the data set is the same the results are very similar the only change is in the points where the model should predict \nWe folloew the same steps as the MLP classifier to the next visualization. ","5a8b1eb7":"In the relation between widths the clusters are still clear and sparse between eachother ","e75b3284":"Now we start the process of building the results vector for every species of Iris  ","7a440528":"As we can see the data shows a clear cluster between the setosa and the other two when in relation to the sepal measurements ","9f8b921e":"Creating variables that will be used to construct and separate our data between Species of Iris  ","0b41ee31":"# Our Random Forest Model","637afe37":"Great score our model predicted correctly all of the results !!!!","47b5fa24":"Parsing all the data to a numpy array and spliting to later validation of the model ","cb8338b7":"Reading the Data and mapping categorical feature to numerical one, also removing the id of the measurement to do not disturb in the results","083cc29f":"We follow the same steps with random forest","b8a9fa36":"# Objectives \n\n* Implement a classification model for The Iris problem with good accuracy\n    * Models chosen:\n        * MLP(Multi Layer Perceptron)(Neural Network)\n        * Random Forest\n* Show the results via graphics for both of the constructed algorithms\n    * Show correlation between lengths of Sepals and Petals\n    * Show correlation between widths of Sepals and Petals\n    * Show correlation between the length of Sepals and Petals\n    * Show correlation between the width of Sepals and Petals \n    * Show the predicted results","9b370dad":"Importing libraries ","3265e532":"# Conclusions\n \n The results of the models where very good showing a great accuracy \n We achived our goals and showed in a graphical form the relations we where interested on\n **If you enjoyed this notebook give it an up and feel free to leave a comment **\n \n \n                                 THANK YOU FOR YOUR ATTENTION","dbec88a0":"# Building our MLP model\n\nUsing scikit-learn MLP method we can easily build our MLP model \nAlso we can see the score of our model wich implies if our result is good.\nIs also on this next code block that we build our vector with the results of our prediction\n"}}