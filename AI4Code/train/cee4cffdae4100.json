{"cell_type":{"e70351e2":"code","ab2be92d":"code","a775e583":"code","f7326be3":"code","31105566":"code","2772caff":"code","6439e275":"markdown"},"source":{"e70351e2":"# Create functions that:\n\n# First function take two parameters, text_symbol, number_of_times\n# Print that symbol the number of times specified.\n\n# Second will the same but return a string of symbols that can then be printed.\n\n# The third  will all in one line. using print's \"end\" property.\n\n# EXTRA CREDIT print a square grid that is the same width and height using the \"number_of_times\" parameter for both.\n\n\n","ab2be92d":"def print_symbol(symbol=\"*\", number_of_times=3):\n    for _ in range(number_of_times):\n        print(symbol)\nprint_symbol()\n    ","a775e583":"def make_symbol(symbol=\"*\", number_of_times=3):\n    output = \"\"\n    for _ in range(number_of_times):\n#         output = output + symbol #CONCATENATION CONCATENATE -= \n        output += symbol\n    return output\n\nprint(make_symbol(\"#\",2))","f7326be3":"def print_symbol_one_line(symbol=\"*\", number_of_times=3):\n    for _ in range(number_of_times):\n        print(symbol, end=\"\")\n        \nprint_symbol_one_line()","31105566":"def print_symbol_grid(symbol=\"*\", number_of_times=3):\n    for row in range(number_of_times):\n        for column in range(number_of_times):\n            print(symbol, end=\"  \")\n        print() #new line\nprint_symbol_grid(\".\", 5)","2772caff":"def make_symbol_grid(symbol=\"*\", number_of_times=3):\n    output = \"\"\n    for row in range(number_of_times):\n        for column in range(number_of_times):\n            output = output + symbol + \" \"\n        output += \"\\n\"\n    return output\n\nresult = make_symbol_grid()\nprint(result)","6439e275":"Make Tea"}}