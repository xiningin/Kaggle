{"cell_type":{"0e770833":"code","4926c1da":"code","f0937e94":"code","c25303d1":"code","e563a3b3":"code","908f01dd":"code","130dd0e2":"code","8fc49f7a":"code","1f4927fd":"code","238400ff":"code","1e1de3f2":"code","77b22ec7":"code","b4cef2f4":"code","92064f37":"code","3e4775f1":"code","96f7b9c7":"code","57c5660b":"code","f47b0031":"code","1ce91697":"code","86719ecd":"code","9ff61de2":"code","19987754":"code","bde7b5bf":"code","111a57b7":"code","7a9587a0":"code","7a0b89bb":"code","c553737c":"code","82bf7ab9":"code","bbd9e759":"code","4c71400b":"code","ca7f0c48":"code","1c40228f":"code","a719c8d3":"code","18852647":"code","ca1f04fb":"code","b39c42a2":"code","e5249a00":"code","e92c6451":"code","7c1625f6":"code","ec25b7bd":"code","286cf1c3":"code","24b820e8":"code","86ade0d8":"code","a246a97b":"code","1b75c914":"markdown"},"source":{"0e770833":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4926c1da":"import datetime\nimport pandas as pd\nimport requests\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport os\nimport plotly.express as px\n\nmpl.rcParams['figure.figsize'] = (10,8)\nmpl.rcParams['axes.grid'] = False\n\nprint(\"import succesfull\")","f0937e94":"df=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/srivatsan88\/YouTubeLI\/master\/dataset\/nyc_energy_consumption.csv\")","c25303d1":"df.head()","e563a3b3":"df['timeStamp']=pd.to_datetime(df['timeStamp'])","908f01dd":"df.info()","130dd0e2":"df.describe()","8fc49f7a":"fig=px.line(df,x='timeStamp',y='demand',title='Energy consumption')\n\nfig.update_xaxes(\n    rangeslider_visible= True,\n    rangeselector=dict(\n                        buttons = list([\n                        dict(count = 1,label = '1m',step='month',stepmode = \"backward\"),\n                        dict(count = 2,label = '6m',step='month',stepmode = \"backward\"),\n                        dict(count = 3,label = '6mYTD',step='month',stepmode = \"todate\"),\n                        dict(count = 4,label = '2y',step='year',stepmode = \"backward\"),\n                        dict(count = 5,label = '3y',step='year',stepmode = \"backward\"),\n                        dict(step= 'all')\n                            ])        \n                        )\n                   )\nfig.show()","1f4927fd":"ny_df=df.set_index('timeStamp')","238400ff":"ny_df.head()","1e1de3f2":"ny_df.plot(subplots=True)","77b22ec7":"ny_df_daily=ny_df.resample('D').mean()","b4cef2f4":"ny_df_daily['demand']= ny_df_daily['demand'].fillna(method = 'ffill')\nny_df_daily['temp']= ny_df_daily['temp'].fillna(method = 'ffill')\nny_df_daily['precip']= ny_df_daily['precip'].fillna(method = 'ffill')","92064f37":"from fbprophet import Prophet","3e4775f1":"ny_df_final = ny_df_daily.reset_index()[['timeStamp','demand','temp']].rename({'timeStamp':'ds','demand':'y','temp':'temp'}, axis='columns')","96f7b9c7":"ny_df_final.head()","57c5660b":"ny_df_final['month']=ny_df_final['ds'].dt.month","f47b0031":"ny_df_final.head()","1ce91697":"fig = px.line(ny_df_final, x = 'ds',y = 'y',title = 'NYC_Energy_Consumption', hover_data=['temp','month'])\n\nfig.update_xaxes(\n    rangeslider_visible= True,\n    rangeselector=dict(\n                        buttons = list([\n                        dict(count = 1,label = '1m',step='month',stepmode = \"backward\"),\n                        dict(count = 2,label = '6m',step='month',stepmode = \"backward\"),\n                        dict(count = 3,label = '6mYTD',step='month',stepmode = \"todate\"),\n                        dict(count = 4,label = '2y',step='year',stepmode = \"backward\"),\n                        dict(count = 5,label = '3y',step='year',stepmode = \"backward\"),\n                        dict(step= 'all')\n                            ])        \n                        )\n                   )\nfig.show()\n","86719ecd":"ny_df_final[['month','temp']].groupby('month').agg({'temp':{'max','min','mean'}})","9ff61de2":"ny_df_final[['y','temp']].corr()","19987754":"ny_df_final.query('temp>80')[['y','temp']].corr()","bde7b5bf":"ny_df_final.query('temp<=80')[['y','temp']].corr()","111a57b7":"def summer_temp(temp):\n    if temp>80:\n        return 1\n    else:\n        return 0","7a9587a0":"ny_df_final['summer_temp']=ny_df_final['temp'].apply(summer_temp)","7a0b89bb":"ny_df_final['month_bins'] = pd.cut(ny_df_final['month'],bins=3,labels=False)","c553737c":"ny_df_final.head()","82bf7ab9":"train = ny_df_final[(ny_df_final['ds']>='2012-01-01') & (ny_df_final['ds']<='2017-04-30')]\ntest = ny_df_final[(ny_df_final['ds']>'2017-04-30')]","bbd9e759":"train.shape","4c71400b":"test.shape","ca7f0c48":"m = Prophet(interval_width=0.95,yearly_seasonality=True)","1c40228f":"m.add_regressor('summer_temp',standardize=False)\nm.add_regressor('month_bins',standardize=False,mode='multiplicative')","a719c8d3":"m.fit(train)","18852647":"m.params","ca1f04fb":"future = m.make_future_dataframe(periods=104)\nfuture.tail()","b39c42a2":"future['summer_temp']=ny_df_final['summer_temp']\n\nfuture['month_bins']=ny_df_final['month_bins']","e5249a00":"forecast = m.predict(future)\nforecast[['ds','yhat','yhat_lower','yhat_upper']].tail()","e92c6451":"fig1 = m.plot(forecast)","7c1625f6":"fig2 = m.plot_components(forecast)","ec25b7bd":"from fbprophet.diagnostics import cross_validation,performance_metrics\ncv_results = cross_validation(model = m,initial = '731 days',horizon='365 days')\ndf_p = performance_metrics(cv_results)\ndf_p","286cf1c3":"from fbprophet.plot import plot_cross_validation_metric\nfig3 = plot_cross_validation_metric(cv_results,metric='mape')","24b820e8":"from fbprophet.plot import add_changepoints_to_plot\nfig = m.plot(forecast)\na = add_changepoints_to_plot(fig.gca(),m,forecast)","86ade0d8":"deltas = m.params['delta'].mean(0)\ndeltas","a246a97b":"fig = plt.figure(facecolor='w')\nax = fig.add_subplot(111)\nax.bar(range(len(deltas)),deltas)\nax.grid(True,which='major',c='red',ls='-',alpha=0.2)\nax.set_ylabel('Rate Chnages')\nax.set_xlabel('Changepoint')\nfig.tight_layout()","1b75c914":"**As the temperature below is common for all years seasonality data, we try the data below eight for further analysis**"}}