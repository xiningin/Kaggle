{"cell_type":{"d4eb67f9":"code","b982c6e6":"code","c4b98c53":"code","e499b1b9":"code","ff3c921f":"code","949055cc":"code","8c0f4d6d":"code","844808cb":"code","9da93c02":"code","9c473070":"code","25677a90":"code","80eda69c":"code","e4c19329":"code","5e8758b1":"code","9ec5f496":"code","d29d74d3":"code","246627e1":"code","df9a73a2":"code","a429178c":"code","177873cf":"code","fe0cbd0a":"code","9bff2795":"code","2aeebc02":"code","dac32d68":"code","1730c013":"code","c1cf0cb6":"code","d64ae276":"code","cbfe1dba":"code","24f7539b":"code","644b9dc9":"code","4b0c1841":"code","a26ae204":"code","1f779e84":"code","6c8e679b":"code","2c2078ce":"code","450f61d2":"code","f8871f51":"code","1e5a32a7":"code","b0838199":"code","47df80f7":"code","08381468":"code","9650d2fc":"code","c68c61ed":"code","66e726ef":"code","d4f1c173":"code","e96798e6":"code","a218e464":"code","f7d2d071":"code","3bb38ba3":"code","3009a6e6":"code","a5375ce5":"code","8207a6d5":"code","a98d921d":"code","3947f5f2":"code","eec651a5":"code","b60e8375":"markdown","ed90ce0f":"markdown","a018dfcd":"markdown","caa14845":"markdown","7d2eac68":"markdown","d4cd3865":"markdown","d0bda00c":"markdown","b2801a27":"markdown","7a07349a":"markdown","533bb42a":"markdown","87ed05e0":"markdown","71bf4122":"markdown","14b0b21f":"markdown","4e90ef62":"markdown","ab743a36":"markdown","474f73d1":"markdown","313c7139":"markdown","c714d741":"markdown","fad72ba9":"markdown","5e44fdf1":"markdown","1b08ebf6":"markdown","fd460d27":"markdown"},"source":{"d4eb67f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport sklearn\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, roc_curve, roc_auc_score, auc, confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectKBest, SelectPercentile, GenericUnivariateSelect, f_regression\nfrom sklearn.decomposition import PCA\nfrom xgboost import XGBClassifier\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nimport pickle\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b982c6e6":"\ntrain = pd.read_csv(r\"\/kaggle\/input\/santander-customer-transaction-prediction\/train.csv\")\ntest = pd.read_csv(r\"\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv\")\ntrain.columns = train.columns.str.strip()","c4b98c53":"\ntrain.head(10)","e499b1b9":"print(\"Train Dataset \",train.shape)\nprint(\"Test Dataset \",test.shape)","ff3c921f":"test.head(10)","949055cc":"#Missing Percentage of all the features\ndef missing_percentage(df):     \n    missing_total = df.isnull().sum().sort_values(ascending = False)[df.isnull().sum().sort_values(ascending = False) != 0]\n    percent = round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2)[round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2) != 0]\n    return pd.concat([missing_total, percent], axis=1, keys=['Missing_Total','Percent'])","8c0f4d6d":"missing_percentage(train)","844808cb":"missing_percentage(test)","9da93c02":"target = train['target']\n#train = train.drop([\"ID_code\", \"target\"], axis=1)\nsns.set_style('whitegrid')\nsns.countplot(target)","9c473070":"train['target'].value_counts()","25677a90":"#Check for imbalanced\ndef check_balance(df,target):\n    check=[]\n    print('size of data is:',df.shape[0] )\n    for i in [0,1]:\n        print('for target  {} ='.format(i))\n        print(df[target].value_counts()[i]\/df.shape[0]*100,'%')","80eda69c":"check_balance(train, 'target')","e4c19329":"train.describe()","5e8758b1":"data_prep = [col for col in train.columns if col not in ['ID_code', 'target']]","9ec5f496":"print(\"Skewness: %f\" % train['target'].skew())\nprint(\"Kurtosis: %f\" % train['target'].kurt())","d29d74d3":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of mean values per row in the train and test set\")\nsns.distplot(train[data_prep].mean(axis=1),color=\"green\", kde=True,bins=120, label='train')\nsns.distplot(test[data_prep].mean(axis=1),color=\"red\", kde=True,bins=120, label='test')\nplt.legend()\nplt.show()","246627e1":"plt.figure(figsize=(16,6))\nplt.title(\"Distribution of std values per rows in the train and test set\")\nsns.distplot(train[data_prep].std(axis=1),color=\"black\",kde=True,bins=120, label='train')\nsns.distplot(test[data_prep].std(axis=1),color=\"green\", kde=True,bins=120, label='test')\nplt.legend(); plt.show()","df9a73a2":"t0 = train.loc[target == 0]\nt1 = train.loc[target == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of skew values per row in the train set\")\nsns.distplot(t0[data_prep].skew(axis=1),color=\"pink\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[data_prep].skew(axis=1),color=\"green\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","a429178c":"t0 = train.loc[target == 0]\nt1 = train.loc[target == 1]\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of kurtosis values per row in the train set\")\nsns.distplot(t0[data_prep].kurtosis(axis=1),color=\"red\", kde=True,bins=120, label='target = 0')\nsns.distplot(t1[data_prep].kurtosis(axis=1),color=\"blue\", kde=True,bins=120, label='target = 1')\nplt.legend(); plt.show()","177873cf":"X = train.drop(['ID_code', 'target'], axis = 1)\ny = train['target']","fe0cbd0a":"# Function to calculate mean absolute error\ndef cross_val(X_train, y_train, model):\n    # Applying k-Fold Cross Validation    \n    accuracies = cross_val_score(estimator = model, X = X_train, y = y_train, cv = 5)\n    return accuracies.mean()\n\n# Takes in a model, trains the model, and evaluates the model on the test set\ndef fit_and_evaluate(model):\n    \n    # Train the model\n    model.fit(X_train, y_train)\n    \n    # Make predictions and evalute\n    model_pred = model.predict(X_test)\n    model_cross = cross_val(X_train, y_train, model)\n    \n    # Return the performance metric\n    return model_cross\n\n#This method is used for selecting the Most important feature which affect the target value using PCA.\ndef fit_and_evaluate_select_k(model):\n    \n    # Train the model\n    model.fit(X_train_pca, y_train_pca)\n    \n    # Make predictions and evalute\n    model_pred = model.predict(X_test_pca)\n    model_cross = cross_val(X_train_pca, y_train_pca, model)\n    \n    # Return the performance metric\n    return model_cross\n\n\n\n\n#As our dataset is imbalanced so we used SMOTE\n# Takes in a model, trains the model, and evaluates the model on the test set\ndef fit_and_evaluate_smote(model):\n    \n    # Train the model\n    model.fit(X_train_smote, Y_train_smote)\n    \n    # Make predictions and evalute\n    model_pred = model.predict(X_test)\n    model_cross = cross_val(X_train_smote, Y_train_smote, model)\n    \n    # Return the performance metric\n    return model_cross\n\n\n\ndef performance(Y_test, logist_pred):\n    logist_pred_var = [0 if i < 0.5 else 1 for i in logist_pred]\n    print('Confusion Matrix:')\n    print(confusion_matrix(Y_test, logist_pred_var)) \n   \n    fpr, tpr, thresholds = roc_curve(Y_test, logist_pred, pos_label=1)\n    print('AUC:')\n    print(auc(fpr, tpr))","9bff2795":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X)\nX_scaled = sc.transform(X)\nX_scaled = pd.DataFrame(X_scaled, columns=X.columns)","2aeebc02":"#Due to  logistic regression and it depends on euclidean distance so we scaled the value \nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.5, random_state=2)","dac32d68":"lr = LogisticRegression()\nlogistic_Regression = fit_and_evaluate(lr)\n\nprint('LogisticRegression Performance on the test set: Cross Validation Score = %0.4f' % logistic_Regression)","1730c013":"#Lets predict\nY_predict = lr.predict(X_test)","c1cf0cb6":"#Let us seaborn in confusion matrix\ncm = confusion_matrix(y_test, Y_predict)\nannot_kws = {\"ha\": 'left',\"va\": 'top'}\nsns.heatmap(cm\/np.sum(cm), annot=True, annot_kws=annot_kws,\n           fmt='.2%', cmap='Blues')","d64ae276":"\nperformance(y_test, Y_predict)\n\n#This model gave out an AUC of 0.626 on validation set","cbfe1dba":"# calculate AUC\nauc = roc_auc_score(y_test, Y_predict)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(y_test, Y_predict)\n# plot no skill\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n# show the plot\nplt.show()","24f7539b":"perm = PermutationImportance(lr, random_state=1).fit(X_test, y_test)\neli5.show_weights(perm, feature_names = X_test.columns.tolist(), top=150)","644b9dc9":"#classification report about the model \nprint(classification_report(y_test, Y_predict))","4b0c1841":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE()","a26ae204":"X_train_smote, Y_train_smote = smote.fit_sample(X_train, y_train)","1f779e84":"from collections import Counter\nprint(\"Before SMOTE \", Counter(y_train))\nprint(\"After SMOTE\", Counter(Y_train_smote))","6c8e679b":"lr_smote = LogisticRegression()\nlogistic_Regression_smote = fit_and_evaluate_smote(lr_smote)\n\nprint('LogisticRegression Performance on the SMOTE test set: Cross Validation Score = %0.4f' % logistic_Regression_smote)","2c2078ce":"#Lets predict\nY_predict_smote = lr_smote.predict(X_test)","450f61d2":"#After using SMOTE lets check the peformance\n#Let us seaborn in confusion matrix\ncm = confusion_matrix(y_test, Y_predict_smote)\nannot_kws = {\"ha\": 'left',\"va\": 'top'}\nsns.heatmap(cm\/np.sum(cm), annot=True, annot_kws=annot_kws,\n           fmt='.2%', cmap='Blues')","f8871f51":"# calculate AUC\nauc = roc_auc_score(y_test, Y_predict_smote)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(y_test, Y_predict_smote)\n# plot no skill\nplt.plot([0, 1], [0, 1])\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n# show the plot\nplt.show()","1e5a32a7":"#classification report about the model \nprint(classification_report(y_test, Y_predict_smote))","b0838199":"pca = PCA(n_components= 100)\n\nX_pca = pca.fit_transform(X_train_smote)","47df80f7":"X_pca","08381468":"X_train_pca, X_test_pca, y_train_pca, y_test_pca = train_test_split(X_pca, Y_train_smote, test_size=0.3, random_state=2)","9650d2fc":"\nlr_pca = LogisticRegression()\nlogistic_Regression_pca = fit_and_evaluate_select_k(lr_pca)\n\nprint('LogisticRegression Performance on the test set: Cross Validation Score = %0.4f' % logistic_Regression_pca)","c68c61ed":"#Lets predict\nY_predict_pca = lr_pca.predict(X_test_pca)","66e726ef":"#Let us seaborn in confusion matrix\ncm = confusion_matrix(y_test_pca, Y_predict_pca)\nannot_kws = {\"ha\": 'left',\"va\": 'top'}\nsns.heatmap(cm\/np.sum(cm), annot=True, annot_kws=annot_kws,\n           fmt='.2%', cmap='Blues')","d4f1c173":"# calculate AUC\nauc = roc_auc_score(y_test_pca, Y_predict_pca)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(y_test_pca, Y_predict_pca)\n# plot no skill\nplt.plot([0, 1], [0, 1])\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n# show the plot\nplt.show()","e96798e6":"\n#classification report about the model \nprint(classification_report(y_test_pca, Y_predict_pca))","a218e464":"# Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nrandom = RandomForestClassifier(n_estimators = 10, criterion = 'entropy')\nrandom_cross = fit_and_evaluate_select_k(random)\n\nprint('Random Forest Performance on the test set: Cross Validation Score = %0.4f' % random_cross)","f7d2d071":"#Lets predict\nY_predict_rf = random.predict(X_test_pca)","3bb38ba3":"#Let us seaborn in confusion matrix\ncm = confusion_matrix(y_test_pca, Y_predict_rf)\nannot_kws = {\"ha\": 'left',\"va\": 'top'}\nsns.heatmap(cm\/np.sum(cm), annot=True, annot_kws=annot_kws,\n           fmt='.2%', cmap='Blues')","3009a6e6":"# calculate AUC\nauc = roc_auc_score(y_test_pca, Y_predict_rf)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(y_test_pca, Y_predict_rf)\n# plot no skill\nplt.plot([0, 1], [0, 1])\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n# show the plot\nplt.show()","a5375ce5":"#classification report about the model \nprint(classification_report(y_test_pca, Y_predict_rf))","8207a6d5":"model=XGBClassifier(random_state=1,learning_rate=0.01)\n\nxgBoost_Cross = fit_and_evaluate_select_k(model)\nprint('XGBClassifier Performance on the test set: Cross Validation Score = %0.4f' % xgBoost_Cross)","a98d921d":"from sklearn.svm import LinearSVC\nclf = LinearSVC(random_state=0, tol=1e-5)\nclf.fit(X_train_pca, y_train_pca) \n\nsvc_fit = fit_and_evaluate_select_k(clf)\n\nprint('SVC Performance on the test set: Cross Validation Score = %0.4f' % svc_fit)","3947f5f2":"#Now it is time to test our algorithm using TEST set.\ndata_x_test = test.drop(columns = ['ID_code'])\n\n#scaling dataset\nsc = StandardScaler()\nsc.fit(data_x_test)\nX_scaled = sc.transform(data_x_test)\nX_scaled = pd.DataFrame(X_scaled, columns=X.columns)\n\n#Reducing the dimension\npca = PCA(n_components= 100)\nX_pca = pca.fit_transform(X_scaled) \n\n\ny_pred = random.predict(X_pca)\ndata_y = pd.DataFrame(y_pred)\ndf_submission = pd.merge(pd.DataFrame(test['ID_code']),data_y, left_index=True, right_index=True)\n\nprint(df_submission)","eec651a5":"df_submission.to_csv(\"submission.csv\", index=False)","b60e8375":"Random Forest is a great fit as the precision, recall, f1score are highly balance.","ed90ce0f":"Before SMOTE  Counter({0: 90055, 1: 9945})\n\nAfter SMOTE Counter({1: 90055, 0: 90055})\n\nSo Lets check Precision and F1 Score using Logitics Regression","a018dfcd":"As there are nearly 200 columns so it will take lot of time to create model. For that we have to check which feature is important.","caa14845":"# Distribution of kurtosis","7d2eac68":"SVC Performance on the test set: Cross Validation Score = 0.7960\nSo, I have evaluted 4 algorithms\n\n1.Logistic Regression\n\n2.Random Forest Classifier\n\n3.XGBClassifier\n\n4.SVC\n\nBut from the above algorithms Random Forest Classifier is good for evaluting because of Cross Validation Score of 85%. As we know Logistic regression are used more often when we have cleanly and linearly separable classes. If we add more variables into the mix, which means that logistic regression performs worse under high dimensionality conditions. That means that typically we have to shift over to random forest if we have a lot of variables.\n\nFortunately we had a algorithm which is a good fit for our business module and that mean Random Forest Classifier is the best choice with good Precision, Recall and F1Score.","d4cd3865":"And after using the PCA technique our algorithm giving a better result with good Precision, Recall and F1-Score.","d0bda00c":"# Lets Check in Random Forest Classifier","b2801a27":"# Distribution of test and train set for mean","7a07349a":"# Distribution for Standard Deviation","533bb42a":"# lets check the shape of both test and train dataset","87ed05e0":"# Data Exploration","71bf4122":"\n# lets check for the missing values","14b0b21f":"# Submission","4e90ef62":"Precision is too low !!\n\nAlso the dataset is too big and taking a very long time to train the data. For that I have used PCA technique to reduce the dimension. And again try to use logistic regression","ab743a36":"Precision is quite good 69 percent. But the as we know that your dataset is skewed, we have to concentrate on improving your F1 score. If your data is not skewed, only accuracy can be used to say whether a model is good or not.\n\nSo I decide to use SMOTE (Synthetic Minority Oversampling Technique) in this dataset. And Try to increase F1 score","474f73d1":"Logistic Regression accuracy is 91 percent. Lets Check the Precision & Recall.","313c7139":"# Distribution of skewness","c714d741":"This is a Imbalanced target competition.","fad72ba9":"# scaling dataset","5e44fdf1":"1. As you move down the top of the graph, the importance of the feature decreases.\n2. The features that are shown in green indicate that they have a positive impact on our prediction\n3. The features that are shown in white indicate that they have no effect on our prediction\n4. The features shown in red indicate that they have a negative impact on our prediction","1b08ebf6":"So We can clearly conclude that there is no missing value are present in training and test set!\n\nSo lets checks whether target columns is balanced or not.","fd460d27":"# skewness and kurtosis"}}