{"cell_type":{"c9792516":"code","9eae7320":"code","5f4388c7":"code","57d61610":"code","12d093f1":"code","6f3c79e9":"code","6cf80e3e":"code","eca6c6b1":"code","c4989e7b":"code","262e0d0f":"code","b22b8ee6":"code","4e9c1965":"code","403ed998":"code","a2d44917":"code","797d957a":"code","65773f15":"code","c4507259":"code","58960130":"code","41c57d11":"code","f822236c":"code","21b78cac":"code","b248ee2d":"code","4aab4bd3":"code","6a4d7dfa":"code","60d6cb41":"code","a2199b0d":"code","a28c4408":"code","cb73d9df":"code","2b464fff":"code","7bca3a2b":"code","d1448c0c":"code","7a4ae24b":"code","b7c3ac59":"code","ebbdb452":"code","5ee6f509":"code","0e03e2e2":"code","eb0598dc":"code","b87b71da":"code","2a17f6f8":"code","64f66a9f":"code","4655b654":"code","68de6da2":"code","c3b929e7":"markdown","2b455d5a":"markdown","51f51cbd":"markdown","12e27ca0":"markdown","7fab0aee":"markdown","eeefa7cc":"markdown","14efb0c2":"markdown","bccb99a8":"markdown","9488c432":"markdown","f3805251":"markdown","3e8def52":"markdown","6cbc41a5":"markdown","a44bba2c":"markdown","13779344":"markdown","33300214":"markdown","947332e4":"markdown","596693a0":"markdown","fdc191aa":"markdown","60b9df95":"markdown","44cb41dc":"markdown","61d21ace":"markdown","09ac0060":"markdown","dc9bd7ed":"markdown","51a9c939":"markdown","9296e041":"markdown","3565e03c":"markdown","24f70ccb":"markdown","93d65c78":"markdown","d615e2e8":"markdown","7f6b2bcc":"markdown"},"source":{"c9792516":"!pip install chart_studio","9eae7320":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# plotly standard imports\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\n\n# Cufflinks wrapper on plotly\nimport cufflinks as cf\n\n# Options for pandas\npd.options.display.max_columns = 30\n\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\n\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\ncf.go_offline(connected=True)\n\n# Set global theme\ncf.set_config_file(world_readable=True, theme='pearl')\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5f4388c7":"df = pd.read_csv('\/kaggle\/input\/corona-virus-report\/full_grouped.csv')\ndf.head()","57d61610":"df.shape","12d093f1":"df.isnull().sum()","6f3c79e9":"df.info()","6cf80e3e":"df['Date'] = pd.to_datetime(df['Date']) ","eca6c6b1":"df.describe()","c4989e7b":"df.columns","262e0d0f":"df['WHO Region'].value_counts()","b22b8ee6":"df.groupby('WHO Region')[['Confirmed', 'WHO Region']].sum().sort_values('Confirmed', \n                            ascending=False)[:15].iplot(kind = 'bar',\n                                                       xTitle = 'WHO Region',\n                                                       yTitle = 'Confirmed Cases',\n                                                       title = 'Confirmed cases in various WHO Region')","4e9c1965":"df_euro = df.loc[df['WHO Region'] == 'Europe']\ndf_euro","403ed998":"df_euro['Month'] = pd.to_datetime(df_euro.Date).dt.strftime('%b')\ndf_euro.head()","a2d44917":"df_sort_date = df_euro.sort_values('Date', ascending = False)","797d957a":"df_sort_date.head()","65773f15":"df_death = df_euro.sort_values('New deaths', ascending = False)\ndf_death.head()","c4507259":"df_euro.sort_values('Deaths', ascending = False)[:1]","58960130":"df_month_max = df_euro.groupby('Month').sum().sort_values('Confirmed', ascending = False)\ndf_month_max","41c57d11":"df_euro.groupby('Country\/Region')[['Confirmed','Deaths', 'Recovered','Active','New cases',\n                                   'New deaths','New recovered']].sum().iplot()","f822236c":"import plotly.figure_factory as ff\ncorrs = df_euro.corr()\n\nfigure = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    colorscale='solar',\n    annotation_text=corrs.round(2).values,\n    showscale=True, reversescale=True)\n\nfigure.layout.margin = dict(l=200, t=200)\nfigure.layout.height = 800\nfigure.layout.width = 1000\n\niplot(figure)","21b78cac":"df_russia = df_euro.loc[df_euro['Country\/Region'] == 'Russia'].set_index('Date')\ndf_russia.head()","b248ee2d":"df_russia[['Confirmed','Deaths', 'Recovered','Active','New cases',\n                                   'New deaths','New recovered']].iplot(\n    y='Confirmed',\n    mode='lines',\n    secondary_y = 'Recovered',\n    secondary_y_title='Recovered',\n    opacity=0.8,\n    size=8,\n    symbol=1,\n    xTitle='Date',\n    yTitle='Confirmed',\n    text='Active',\n    title='Confirmed and Active casess Count over Time')\n\n    ","4aab4bd3":"layout = dict(\n    xaxis=dict(type='log', title='Recovered'),\n    yaxis=dict(title='Deaths'),\n    title='Recovered vs Death Count Log Axis')\n\ndf_russia.sort_values('Recovered').iplot(\n    x='Recovered',\n    y='Deaths',\n    layout=layout,\n    text='Active',\n    mode='lines',\n    bestfit=True,\n    bestfit_colors=['blue'])","6a4d7dfa":"df_euro.set_index('Date')[['Deaths', 'Active']].cumsum().iplot(y='Deaths', secondary_y='Active',\n                                                 yTitle='Deaths', secondary_y_title='Active',\n                                                 title='Deaths and Active Count Totals')","60d6cb41":"import plotly.express as px\nfig = px.choropleth(df_euro, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Deaths\", \n                    hover_name=\"Country\/Region\", range_color=[1,2000], \n                    color_continuous_scale='portland', \n                    title='European Countries with Deaths Cases', scope='europe', height=800)\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","a2199b0d":"nordic_countries=df_euro.set_index('Country\/Region')\nnordic_countries = nordic_countries.loc[[\"Finland\",\"Sweden\",\"Norway\",\"Denmark\",\"Iceland\"]]\nnordic_countries = nordic_countries.reset_index()\nnordic_countries.head()","a28c4408":"df_nordic_sum = nordic_countries.groupby('Country\/Region').sum().sort_values('Confirmed',\n                                                            ascending = False).iplot(kind = 'bar',\n                                                                                    yTitle = 'Count',\n                                    title = 'Count of cases in nordic countries')","cb73d9df":"df_asia = df.set_index('WHO Region')\ndf_asia = df_asia.loc[['South-East Asia', 'Western Pacific', 'Eastern Mediterranean']]","2b464fff":"df_asia = df_asia.reset_index()","7bca3a2b":"df_asia['WHO Region'].value_counts()","d1448c0c":"df_asia.groupby('Date')[['Deaths', 'Recovered']].sum().iplot(\n        xTitle = 'Date',\n        yTitle = 'Deaths',\n        secondary_y = 'Recovered',\n        secondary_y_title = 'Recovered',\n        title = 'Death vs Recovered Cases')","7a4ae24b":"layout = dict(\n    yaxis = dict(type = 'log', title = 'Confirmed'),\n    xaxis = dict(title = 'Date')\n    )\n\ndf_asia.groupby('Date')[['Confirmed', 'Recovered']].sum().iplot(\n    yTitle = 'Confirmed',\n    xTitle = 'Date',\n    mode = 'lines',\n    bestfit = True,\n    bestfit_colors = ['orange', 'blue'], \n    secondary_y = 'Recovered',\n    secondary_y_title = 'Recovered',\n    title = 'Log scale showing the recovered to confirmed cases'\n)","b7c3ac59":"import plotly.express as px\nfig = px.choropleth(df_asia, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Deaths\", \n                    hover_name=\"Country\/Region\", range_color=[1,20000], \n                    color_continuous_scale='portland', \n                    title='Asian Countries with Death Cases', scope='asia', height=800)\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","ebbdb452":"df_asia.groupby('WHO Region')[['WHO Region', 'Deaths']].sum().sort_values('Deaths').iplot(\n    kind = 'bar',\n    xTitle = 'WHO Region',\n    yTitle = 'Deaths',\n    colors = 'red',\n    title = 'Death per WHO Region')","5ee6f509":"df_asia.groupby('Date')[['Confirmed', 'Deaths']].sum().iplot(\n    xTitle = 'Date',\n    yTitle = 'Confirmed',\n    secondary_y = 'Deaths',\n    secondary_y_title = 'Deaths',\n    title = 'Confirmed cases and Deaths over time')","0e03e2e2":"df_asia.head(1)","eb0598dc":"df_asia.groupby('Country\/Region')[['Active', 'Country\/Region']].sum().sort_values('Active', \n                                                            ascending = False)[:15].iplot(\nxTitle = 'Country',\nyTitle = 'Active Cases',\ntitle = 'Active cases per country')","b87b71da":"import plotly.express as px\nfig = px.choropleth(df_asia, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Active\", \n                    hover_name=\"Country\/Region\", range_color=[1000,20000], \n                    color_continuous_scale='portland', \n                    title='Asian Countries with Active Cases', scope='asia', height=800)\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","2a17f6f8":"df_asia.groupby('Country\/Region')[['Country\/Region', 'Recovered', \n                        'New recovered']].sum().sort_values('Recovered', ascending = False)[:15].iplot(\nkind = 'bar',\n    xTitle = 'Country',\nyTitle = 'Recovered',\nsecondary_y = 'New recovered',\nsecondary_y_title = 'New recovered',\ntitle = 'Recovered vs New Recovered')","64f66a9f":"print(\"Countries with Lowest Deaths\")\ntemp = df_asia[df_asia['Confirmed']>100]\ntemp = temp.sort_values('Deaths', ascending=True)[['Country\/Region', 'Confirmed',\n                                                          'Deaths']][:16]\ntemp.sort_values('Confirmed', ascending=False)[['Country\/Region', 'Confirmed',\n                                            'Deaths']][:20].style.background_gradient(cmap='Reds')","4655b654":"formated_gdf = df.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Confirmed'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Confirmed\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, 1500], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='COVID-19: Spread Over Time', color_continuous_scale=\"portland\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","68de6da2":"formated_gdf = df.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Recovered'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Recovered\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, 1500], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='COVID-19: Recovery Over Time', color_continuous_scale=\"peach\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","c3b929e7":"# Sorting the data by Date","2b455d5a":"# Checking the shape.","51f51cbd":"# Extracting the EURO region","12e27ca0":"## Death vs Recovered cases over time","7fab0aee":"# Country with most single deaths","eeefa7cc":"## Active cases in Asia","14efb0c2":"# Generating the heatmap","bccb99a8":"# Analysis of Asia","9488c432":"# Nordic Countries","f3805251":"# Changing the column type of Date column","3e8def52":"# Checking for Missing Values","6cbc41a5":"# Checking the various WHO region and countries under them","a44bba2c":"# Starting of cases","13779344":"# Cases variation in Russia with time","33300214":"## Lowest deaths","947332e4":"# Creating the month from the date","596693a0":"# Determining the total cases per country over the period of time","fdc191aa":"The Data Set is a cleaned data set.","60b9df95":"# Checking the columns","44cb41dc":"# Log Plot","61d21ace":"# Statistics of the dataframe","09ac0060":"# Confirmed cases in various WHO Region","dc9bd7ed":"## THE SPREAD","51a9c939":"# Sorting countries by new deaths","9296e041":"## Lograthmic structure of the cases","3565e03c":"# Extracting the information","24f70ccb":"# Cases in nordic countries","93d65c78":"# Determing the month with most confirmed cases","d615e2e8":"## Active cases over time","7f6b2bcc":"# Recovery"}}