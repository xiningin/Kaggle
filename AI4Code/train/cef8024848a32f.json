{"cell_type":{"d4f55741":"code","2cd70e16":"code","0745d142":"code","a86b675a":"code","01be3fa4":"code","b3fc13ce":"code","01585f4b":"code","e98413a5":"code","eba40a9a":"code","c1953cb9":"code","c711eb96":"code","9c1a0443":"code","002d5677":"code","1e9ef7ec":"code","17896696":"code","2f8de68b":"code","3243536c":"code","d7a52e10":"code","b0a1183d":"code","ce1f95ef":"code","462f491e":"code","d1545171":"code","bb3618f6":"code","b3d854f9":"code","10daed25":"code","9cbcc049":"code","b0dfd67a":"code","bdcc21ec":"code","9d30ad83":"code","23218a1c":"code","77fa3dca":"code","c3d115eb":"code","55d65bd0":"code","9331787c":"code","6b79b2ba":"code","953abd24":"code","58368191":"code","e9a6a5ee":"code","e013e542":"code","6e84b99e":"code","266ee616":"code","ff534b69":"code","68ef3923":"code","99d2b2a1":"code","7004582d":"code","74862c9f":"code","42b0a8ad":"code","005e8f87":"code","4667b57c":"code","e597771f":"code","3f8575ec":"code","58017176":"code","8154fb7f":"code","4db3aa45":"code","ca6f9727":"code","d1037cf1":"code","2a5773a3":"code","9c267c31":"markdown","196e202d":"markdown","8df7f66b":"markdown","eb0d7807":"markdown","92d8597a":"markdown","efa076e6":"markdown","4e491a9e":"markdown","db589587":"markdown","39ab0a9e":"markdown","0f7082cd":"markdown","be244406":"markdown","20c774b3":"markdown","39b1f8b0":"markdown","577c866b":"markdown","b77f17ee":"markdown","32aee034":"markdown","af90e23e":"markdown","f1cb365e":"markdown","95799ec0":"markdown","ca83a2b1":"markdown","b753379c":"markdown","fcaf2791":"markdown","a67ae17e":"markdown","7d42314e":"markdown","9c90bde8":"markdown","cd734529":"markdown","f5ead84e":"markdown","2391d665":"markdown","71871ac5":"markdown","7ca72d8c":"markdown","bfa57339":"markdown","f36c3066":"markdown","c8abbd7f":"markdown","d593d887":"markdown","c182eb7e":"markdown","9ceaa171":"markdown","f7cfc27a":"markdown","f48d45fd":"markdown","1991586a":"markdown","1cbe3ff8":"markdown","07dc10a1":"markdown","00d8f00f":"markdown","c00bb704":"markdown","a88204c4":"markdown","2cc9dda8":"markdown","206629fd":"markdown","06245b50":"markdown"},"source":{"d4f55741":"import numpy as np\n\nimport pandas as pd\npd.options.plotting.backend = \"plotly\"\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import (train_test_split, ShuffleSplit, cross_val_score)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import plot_confusion_matrix\n\nfrom skopt.space import (Real,\n                         Integer,\n                         Categorical)\nfrom skopt.utils import use_named_args\nfrom skopt import (gp_minimize, \n                   dump, \n                   load)\nfrom skopt.plots import plot_convergence\nfrom skopt.callbacks import CheckpointSaver\n\nimport json","2cd70e16":"df = pd.read_csv('..\/input\/human-resources-data-set\/HRDataset_v13.csv')\n\n# Null rows after 310\ndf = df.iloc[0:310, :]","0745d142":"df","a86b675a":"df.isnull().sum()\/df.shape[0]","01be3fa4":"df = df.loc[:, (df.isnull().sum()\/df.shape[0] < 0.3)]","b3fc13ce":"df.isnull().sum()","01585f4b":"df[df.isnull().any(axis=1)]","e98413a5":"df.dropna(axis=0, inplace=True)\ndf.reset_index(drop=True, inplace=True)","eba40a9a":"df.dtypes","c1953cb9":"df[['PayRate', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount']]","c711eb96":"df['PayRate'].plot.hist()","9c1a0443":"df['EngagementSurvey'].plot.hist()","002d5677":"df['EmpSatisfaction'].plot.hist()","1e9ef7ec":"df['SpecialProjectsCount'].plot.hist()","17896696":"df[['Position', 'State', 'RecruitmentSource', 'ManagerName', 'Sex', \n    'MaritalDesc', 'CitizenDesc', 'HispanicLatino','RaceDesc', 'Department']]","2f8de68b":"df['Position'].plot.hist()","3243536c":"df['State'].plot.hist()","d7a52e10":"for state in df['State'].unique():\n    if state != 'MA':\n        df.replace(state, 'non-MA', inplace=True)","b0a1183d":"df['State'].plot.hist()","ce1f95ef":"df['RecruitmentSource'].plot.hist()","462f491e":"df['RecruitmentSource'].replace('Pay Per Click', 'Other', inplace=True)\ndf['RecruitmentSource'].replace('On-line Web application', 'Other', inplace=True)\ndf['RecruitmentSource'].replace('Careerbuilder', 'Other', inplace=True)\ndf['RecruitmentSource'].replace('Company Intranet - Partner', 'Other', inplace=True)","d1545171":"df['RecruitmentSource'].plot.hist()","bb3618f6":"df['ManagerName'].plot.hist()","b3d854f9":"df['Sex'].plot.hist()","10daed25":"df['MaritalDesc'].plot.hist()","9cbcc049":"df['CitizenDesc'].plot.hist()","b0dfd67a":"for state in df['CitizenDesc'].unique():\n    if state != 'US Citizen':\n        df.replace(state, 'non-US Citizen', inplace=True)","bdcc21ec":"df['CitizenDesc'].plot.hist()","9d30ad83":"df['HispanicLatino'].plot.hist()","23218a1c":"df['HispanicLatino'].replace('yes', 'Yes', inplace=True)\ndf['HispanicLatino'].replace('no', 'No', inplace=True)","77fa3dca":"df['HispanicLatino'].plot.hist()","c3d115eb":"df['RaceDesc'].plot.hist()","55d65bd0":"df['RaceDesc'].replace('American Indian or Alaska Native', 'Others', inplace=True)\ndf['RaceDesc'].replace('Two or more races', 'Others', inplace=True)\ndf['RaceDesc'].replace('Hispanic', 'Others', inplace=True)","9331787c":"df['RaceDesc'].plot.hist()","6b79b2ba":"df.drop('HispanicLatino', axis=1, inplace=True)","953abd24":"df['Department'].plot.hist()","58368191":"print(df.shape)\ndf.drop(df[df['Department'] == 'Executive Office'].index, axis=0, inplace=True)\nprint(df.shape)","e9a6a5ee":"df['Department'].plot.hist()","e013e542":"df['PerformanceScore'].plot.hist()","6e84b99e":"df['PerformanceScore'].replace('PIP', 'Bad', inplace=True)\ndf['PerformanceScore'].replace('Needs Improvement', 'Bad', inplace=True)\ndf['PerformanceScore'].replace('Fully Meets', 'Good', inplace=True)\ndf['PerformanceScore'].replace('Exceeds', 'Good', inplace=True)","266ee616":"df['PerformanceScore'].plot.hist()","ff534b69":"X = df[['PayRate', 'EngagementSurvey', 'EmpSatisfaction', 'SpecialProjectsCount', \n        'Position', 'State', 'RecruitmentSource', 'ManagerName', 'Sex', 'MaritalDesc', \n        'CitizenDesc', 'RaceDesc', 'Department']]\n\ny = df['PerformanceScore']","68ef3923":"ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), slice(4, X.shape[1]))],\n                       remainder='passthrough')\nX = ct.fit_transform(X)","99d2b2a1":"model_name = 'random_forest'","7004582d":"input_shape = X.shape[1]\nprint(f'input_shape = {input_shape}')\n\ntry:\n    output_shape = Y.shape[1]\nexcept:\n    output_shape = 1\nprint(f'output_shape = {output_shape}')\n      \nn_samples = X.shape[0]\nprint(f'n_samples = {n_samples}')","74862c9f":"cv = ShuffleSplit(n_splits=20, test_size=0.20)\ncv_opt = ShuffleSplit(n_splits=20, test_size=0.20)","42b0a8ad":"hyperparams_names = ['n_estimators',\n                     'max_depth', \n                     'max_features', \n                     'min_samples_split', \n                     'min_samples_leaf']","005e8f87":"space  = [Integer(64, 1024, name=hyperparams_names[0]),\n          Integer(2, 256, name=hyperparams_names[1]),\n          Integer(2, input_shape, name=hyperparams_names[2]),\n          Integer(2, 16, name=hyperparams_names[3]),\n          Integer(1, 16, name=hyperparams_names[4])]","4667b57c":"@use_named_args(space)\ndef objective(**hyperparams):\n    \n    print(hyperparams)\n        \n    cv_scores = cross_val_score(RandomForestClassifier(**hyperparams), \n                                X, y, cv=cv_opt)\n    \n    return -np.mean(cv_scores)","e597771f":"res_gp = gp_minimize(objective, space, n_calls=100, n_random_starts=20, \n                    random_state=0, verbose=1)","3f8575ec":"plot_convergence(res_gp)\nplt.show()","58017176":"best_hyperparams = {param:value for param, value in zip(hyperparams_names, res_gp.x)}\nprint(f'best_hyperparams = {best_hyperparams}')","8154fb7f":"hyperparams = best_hyperparams","4db3aa45":"clf = RandomForestClassifier(**hyperparams)\ncross_val_scores = pd.DataFrame(cross_val_score(clf, X, y, cv=cv), columns=['Random Forest'])\n\nprint(f'cross validation score (accuracy): {round(cross_val_scores.mean().values[0], 2)} +\/- {round(cross_val_scores.std().values[0], 2)}')","ca6f9727":"cross_val_scores.plot.box()","d1037cf1":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nclf = RandomForestClassifier(**hyperparams)\n\nclf.fit(X_train, y_train)\n\nscore = clf.score(X_test, y_test)\nprint(round(score, 2))","2a5773a3":"disp = plot_confusion_matrix(clf, X_test, y_test, cmap=plt.cm.Blues)\ndisp.ax_.set_title(f'Confusion Matrix  -  accuracy: {round(score, 2)}')","9c267c31":"# Importing Packages","196e202d":"## Feature Analysis","8df7f66b":"#### PayRate","eb0d7807":"Let`s transform \"American Indian or Alaska Native\", \"Two or more races\" and \"Hispanic\" categories into a single class \"Others\". ","92d8597a":"#### State","efa076e6":"Let`s transform the feature to \"MA\" and \"non-MA\" categories. ","4e491a9e":"#### HispanicLatino","db589587":"#### EmpSatisfaction","39ab0a9e":"### Droping samples with missing data \nDoing this because it`s just 3% of all the dataset (9 samples). ","0f7082cd":"Adding 'Pay Per Click', 'On-line Web application', 'Careerbuilder' and 'Company Intranet - Partner' into 'Other'","be244406":"#### ManagerName","20c774b3":"#### SpecialProjectsCount","39b1f8b0":"## Prediction","577c866b":"## Hyperparameters Optimization","b77f17ee":"I`m going to create a model that will predict the Performance Score.  ","32aee034":"## Encoding data","af90e23e":"* The target is quite asymmetrical. This may have induced a biased training. To better handle this, it may be better to change the metric to \"balanced_accuracy_score\". [https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html#balanced-accuracy-score](http:\/\/)","f1cb365e":"### Deleting features with more than 30% missing data  ","95799ec0":"### Target","ca83a2b1":"Correcting the capital letters problem.","b753379c":"#### EngagementSurvey","fcaf2791":"I`m going to use 10.","a67ae17e":"# Random Forest","7d42314e":"There are 3 features with more than 30% of missing data.","9c90bde8":"#### RaceDesc","cd734529":"# Dataset","f5ead84e":"## Reading dataset","2391d665":"## Missing data","71871ac5":"Let`s transform the feature to \"US Citizen\" and \"non-US Citizen\" categories. ","7ca72d8c":"Let`s remove the single \"Executive Office\" sample from the dataset. It is an outlier. ","bfa57339":"There is no need to use the the \"HispanicLatino\" feature. It is redundant.","f36c3066":"I`m going to use 4.","c8abbd7f":"#### MaritalDesc","d593d887":"#### Sex","c182eb7e":"#### The samples with missing data","9ceaa171":"#### CitizenDesc","f7cfc27a":"## Cross-validation","f48d45fd":"#### Department","1991586a":"# Observations","1cbe3ff8":"### Categorical features","07dc10a1":"#### Deleting samples","00d8f00f":"#### Position","c00bb704":"Let`s transform \"PIP\" and \"Needs Improvement\" categories into a single class \"Bad\". The same with  \"Fully Meets\" and \"Exceeds\" categories into a single class \"Good\"","a88204c4":"### Numeric features","2cc9dda8":"#### RecruitmentSource","206629fd":"* First, I will clean the data to improve the classifier's performance.\n* Next, I'll do a Bayesian optimization on Random Forest's hyper parameters. For that, I will use the scikit-optmize package.\n* And, I will end with the results of the optimized classifier.","06245b50":"# General Informations"}}