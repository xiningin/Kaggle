{"cell_type":{"f7e56911":"code","b316833b":"code","7980d0c3":"code","615876fc":"code","06740dfc":"code","1d51357a":"code","7e236de0":"code","70dee5cf":"code","57a904c4":"code","99a1b642":"code","e03e6f26":"code","7d07b973":"code","bbb103db":"code","7c829796":"code","5f519a64":"code","0c7b92d4":"code","06a9d9a4":"code","05a129ad":"markdown","b14280ad":"markdown","4cf04573":"markdown","f93ab82b":"markdown","45df6f96":"markdown","f82a2a51":"markdown","bffd1e1c":"markdown","d502b0e5":"markdown","b1c53667":"markdown","583798a9":"markdown","1822bf77":"markdown"},"source":{"f7e56911":"!pip install scispacy\n!pip install https:\/\/s3-us-west-2.amazonaws.com\/ai2-s2-scispacy\/releases\/v0.2.4\/en_ner_bc5cdr_md-0.2.4.tar.gz\n!pip install MulticoreTSNE\n\nimport scispacy\nimport en_ner_bc5cdr_md\n\n#Faster T-SNE implementation\nfrom MulticoreTSNE import MulticoreTSNE as TSNE","b316833b":"import os\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport spacy\nfrom spacy import displacy\nfrom collections import Counter\nimport pickle\nfrom collections import defaultdict\n\nimport seaborn as sns # plotting\n\n%matplotlib inline","7980d0c3":"metadata = pd.read_csv(\"\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv\")\nmetadata = metadata.fillna(\"\")","615876fc":"nlp = en_ner_bc5cdr_md.load()","06740dfc":"dc_vocab = []\nd2c_pairs = []\n\nfor row in tqdm(metadata.iterrows()):\n    doc = nlp(row[1][\"abstract\"])\n    dc_vocab.extend(doc.ents)\n                \n    for sent in doc.sents:\n        for i in sent.ents:\n            if i.label_ == \"DISEASE\":\n                for j in sent.ents:\n                    if j.label_ == \"CHEMICAL\":\n                        d2c_pairs.append(((i.text, i.label_), (j.text, j.label_)))","1d51357a":"pickle.dump([a.as_doc() for a in dc_vocab], open(\"docs.pk\", \"wb\"))\npickle.dump(d2c_pairs, open(\"d2c_pairs.pk\", \"wb\"))","7e236de0":"# UNPACKING\n# dc_vocab = pickle.load(open(\"\/kaggle\/input\/cord-19\/docs.pk\", \"rb\"))\n# dc_vocab = [a.ents[0] for a in dc_vocab]\n\n# d2c_pairs = pickle.load(open(\"\/kaggle\/input\/d2c-pairs\/d2c_pairs.pk\", \"rb\"))","70dee5cf":"diseases = [a for a in dc_vocab if a.label_ == \"DISEASE\"]\ncommon_diseases = [a[0] for a in Counter([a.text for a in diseases]).most_common()[:300]]\nprint(common_diseases)\n\ndisease_set = set()\nmini_batch = []\n\nfor a in dc_vocab:\n    if a.text in common_diseases and a.text not in disease_set:\n        mini_batch.append(a)\n        disease_set.add(a.text)","57a904c4":"nomenclature = pd.read_csv(\"\/kaggle\/input\/drug-namestems\/drug_nomenclature (1).csv\")\nnomenclature.drop(columns=['web-scraper-order', 'web-scraper-start-url'])\ndrug_namestems = list(nomenclature[\"affix_suffix\"])","99a1b642":"#Helper Function. It matches a string with a stem. \n\ndef dstem_match(sstr, stem):\n    pruned = stem.replace(\"-\", \"\")\n    stem_len = len(pruned)\n    \n    if stem[0] == \"-\" and stem[-1] != \"-\":\n        if sstr[-stem_len:] == pruned:\n            return True\n    elif stem[-1] == \"-\" and stem[0] != \"-\":\n        if sstr[:stem_len] == pruned:\n            return True\n    else:\n        if pruned in sstr:\n            return True\n    \n    return False","e03e6f26":"key_list = [a[0][0][0] for a in list(Counter([a for a in d2c_pairs if a[1][0] == \"SARS-CoV-2\"]).most_common())]","7d07b973":"relevant_pairs = [a for a in d2c_pairs if a[0][0] in key_list] ","bbb103db":"filtered = []\n\nfor pair in relevant_pairs:\n    if dstem_match(pair[1][0], \"-vir\"):\n        filtered.append(pair)\n            \nfiltered","7c829796":"items = [(i[0][0], i[1][0]) for i in filtered]\ndc_df = pd.DataFrame(items, columns =['disease', 'chemical']) \ncmatrix = pd.crosstab(dc_df.disease, dc_df.chemical)\n\ncmatrix","5f519a64":"sns.heatmap(cmatrix, cmap=plt.cm.cubehelix_r)","0c7b92d4":"disease_groups = list(set([a[0][0] for a in filtered]))\nlen(disease_groups)","06a9d9a4":"added = set()\nmini_batch = []\n\nfor a in dc_vocab:\n    if a.text in disease_groups and a.text not in added:\n        added.add(a.text)\n        mini_batch.append(a)\n        \nannotations = [a.text for a in mini_batch]\n\nX_embedded = TSNE(n_components=2, verbose=1).fit_transform(np.array([a.vector for a in mini_batch]))\nX_embedded.shape\n\n# kmeans = KMeans(n_clusters=10, random_state=5, verbose=1).fit(X_embedded)\n\nplt.figure(figsize=(10,10))\ncdict = {1: 'red', 2: 'blue', 3: 'green', 4: 'yellow', 5: 'purple'}\nplt.scatter(X_embedded[:, 0], X_embedded[:, 1])\n\nfor i, txt in enumerate(annotations):\n    plt.annotate(txt, (X_embedded[:, 0][i], X_embedded[:, 1][i]))\n\nplt.show()","05a129ad":"# Find disease-chemical pairs that occur on the sentence level.\nThis process takes about 25 minutes for me. I save the results for future use in the next cell.","b14280ad":"# Find chemicals associated with the above diseases","4cf04573":"# Find diseases associated with \"SARS-CoV-2\"","f93ab82b":"# Importing Libraries","45df6f96":"# Disease Vector Dimensionality Reduction with t-SNE","f82a2a51":"# Generate a heatmap to visualize the matrix","bffd1e1c":"### Filter antivirals from chemicals\nUsing other drug name stems gets a bit messy, so I'm using the common stem, -vir, for antiviral drugs for now.","d502b0e5":"# Loading SciBert bc5cdr NER Model","b1c53667":"# Importing Drug Name Stems","583798a9":"# Produce a co-occurrence matrix of disease and antivirals","1822bf77":"# Disease-Chemical Co-Occurrence Matrix\n\nTo better understand what drugs are currently tested against COVID-19, I create a co-occurrence matrix based on the mentions of diseases and drugs, specifically antivirals.\n\n![Screen%20Shot%202020-03-22%20at%205.19.05%20PM.png](attachment:Screen%20Shot%202020-03-22%20at%205.19.05%20PM.png)\n\n**Pipeline:**\n1. Extract abstracts from metadata.csv\n2. Disease-Chemical Named Entity Recognition from abstracts. Model: SciBert, ner_bc5cdr_md\n    * Find Disease-Chemical pairs that occur on the sentence level.\n4. Find diseases associated with \"SARS-CoV-2\"\n5. Find chemicals associated with the above diseases \n6. Produce a co-occurrence matrix\n7. Generate a heatmap to visualize the matrix"}}