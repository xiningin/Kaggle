{"cell_type":{"78b1a881":"code","94c48848":"code","d70a210a":"code","bdc0b737":"code","04444b4c":"code","b0b8a487":"code","a3ee5f6c":"code","cb287254":"code","7776f463":"code","24c22686":"code","83e186b8":"code","632deb8a":"code","e3ffb379":"code","8d484238":"code","2ec2578c":"code","a1fabb1a":"code","a5a3b3f4":"markdown","9348ca7c":"markdown","99d7317b":"markdown","2add6b71":"markdown","586e8f21":"markdown","93dd62f7":"markdown","c67f7bd5":"markdown","e73de518":"markdown","e93606a2":"markdown","18ceffd7":"markdown","cbd38a92":"markdown","d68d2ec1":"markdown","c900d76f":"markdown","af8fc408":"markdown","c182b539":"markdown","3e111496":"markdown","32942668":"markdown","24b00a4b":"markdown","96150571":"markdown","2da26ca0":"markdown","63ba948b":"markdown","eb1a28b8":"markdown","a389bb11":"markdown","ed9b0c2d":"markdown","13c31997":"markdown"},"source":{"78b1a881":"from mpl_toolkits import mplot3d\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport pandas as pd","94c48848":"def f_score(n_team_mates, rank, n_teams):\n    \n    score = 100000\/math.sqrt(n_team_mates)\n    score = score*math.pow(rank,-0.75)\n    score = score*math.log(10,1+math.log(10,n_teams))\n    return score","d70a210a":"scores = pd.DataFrame(columns=['score', \n                               'n_team_mates', \n                               'rank', \n                               'n_teams'])","bdc0b737":"i = 1\n\nfor i_nteammates in range(25):\n    \n    for i_rank in range(25):\n        \n        for i_nteams in range(25):\n            \n            new_score = f_score(i_nteammates+2,\n                                i_rank+2,\n                                i_nteams+2)\n\n            scores.loc[i] = [new_score,\n                             i_nteammates+1,\n                             i_rank+1,\n                             i_nteams+1]\n            i += 1\n\n# Let's see the DataFrame.\nscores.head()","04444b4c":"# Create a DataFrame with rank and n_teams fixed to 1.\nscores_nteammates = scores[(scores['rank']==1.0)&(scores['n_teams']==1.0)]\nscores_nteammates.head()","b0b8a487":"# Ploting 2D graph for the previous DataFrame.\nplt.plot(scores_nteammates['n_team_mates'],\n         scores_nteammates.score,\n         color='blue')\n\nplt.title(\"\")\nplt.xlabel(\"- n_team_mates +\")\nplt.ylabel(\"- score +\")\nplt.xticks([], '')\nplt.yticks([], '')\nplt.show()","a3ee5f6c":"# Create a DataFrame with n_teams and n_team_mates fixed to 1.\nscores_rank = scores[(scores['n_teams']==1.0)&(scores['n_team_mates']==1.0)]\nscores_rank.head()","cb287254":"# Ploting 2D graph for the previous DataFrame.\nplt.plot(scores_rank['rank'],\n         scores_rank.score,\n         color='blue')\n\nplt.title(\"\")\nplt.xlabel(\"- rank +\")\nplt.ylabel(\"- score +\")\nplt.xticks([], '')\nplt.yticks([], '')\nplt.show()","7776f463":"# Create a DataFrame with n_team_mates and rank fixed to 1.\nscores_nteams = scores[(scores['n_team_mates']==1.0)&(scores['rank']==1.0)]\nscores_nteams.head()","24c22686":"# Ploting 2D graph for the previous DataFrame.\nplt.plot(scores_nteams['n_teams'],\n         scores_nteams.score,\n         color='blue')\n\nplt.title(\"\")\nplt.xlabel(\"- n_teams +\")\nplt.ylabel(\"- score +\")\nplt.xticks([], '')\nplt.yticks([], '')\nplt.show()","83e186b8":"scores_nteammates_rank = scores[scores['n_teams']==1.0]\nscores_nteammates_rank.head()","632deb8a":"x = np.asarray(scores_nteammates_rank['n_team_mates'])\ny = np.asarray(scores_nteammates_rank['rank'])\nz = np.asarray(scores_nteammates_rank['score'])\n\nfig = plt.figure()\naxs = fig.add_subplot(projection='3d')\naxs.set_xlabel('- n_team_mates +')\naxs.set_ylabel('- rank +')\naxs.set_zlabel('- score +')\naxs.set_xticks([])\naxs.set_yticks([])\naxs.set_zticks([])\n\nsurf = axs.plot_trisurf(x, y, z, \n                        antialiased=False, \n                        cmap='winter')\n\nplt.show( )","e3ffb379":"scores_rank_nteams = scores[scores['n_team_mates']==1.0]\nscores_rank_nteams.head()","8d484238":"x = np.asarray(scores_rank_nteams['rank'])\ny = np.asarray(scores_rank_nteams['n_teams'])\nz = np.asarray(scores_rank_nteams['score'])\n\nfig = plt.figure()\naxs = fig.add_subplot(projection='3d')\naxs.set_xlabel('- rank +')\naxs.set_ylabel('- n_teams +')\naxs.set_zlabel('- score +')\naxs.set_xticks([])\naxs.set_yticks([])\naxs.set_zticks([])\n\nsurf = axs.plot_trisurf(x, y, z, \n                        antialiased=False, \n                        cmap='winter')\n\nplt.show( )","2ec2578c":"scores_nteams_nteammates = scores[scores['rank']==1.0]\nscores_nteams_nteammates.head()","a1fabb1a":"x = np.asarray(scores_nteams_nteammates['n_teams'])\ny = np.asarray(scores_nteams_nteammates['n_team_mates'])\nz = np.asarray(scores_nteams_nteammates['score'])\n\nfig = plt.figure()\naxs = fig.add_subplot(projection='3d')\naxs.set_xlabel('- n_teams +')\naxs.set_ylabel('- n_team_mates +')\naxs.set_zlabel('- score +')\naxs.set_xticks([])\naxs.set_yticks([])\naxs.set_zticks([])\n\nsurf = axs.plot_trisurf(x, y, z, \n                        antialiased=False, \n                        cmap='winter')\n\nplt.show( )","a5a3b3f4":"> **n_team_mates** or **ntm**, number of members in your team.\n\n> **rank** or **r**, your placement in the competition.\n\n> **n_teams** or **nt**, number of teams in the competition.","9348ca7c":"**2d.3** Plot score based on n_teams.\n\nIsolating n_team_mates and rank...","99d7317b":"The best score scenario is low n_team_mates and low rank (good placing).","2add6b71":"Then, we will run f_score several times in an interval (I chose 1 to 25) for each variable (n_team_mates, rank and n_mates). ","586e8f21":"To study this formula, I will omit the last expression...\n\n\n# $$e^{-t\/500}$$\n\n\nThis is exactly the Kaggle points decay, which you can read about on my other topic. We will focus here only on the competition points and to start, write it as score(n_team_mates, rank, n_teams).","93dd62f7":"$$\\left(\\frac{100000}{\\sqrt{n\\_team\\_mates}}\\right)\\left(\\text{rank}^{-0.75}\\right)\\left(\\log_{10}(1 + \\log_{10}(n\\_teams))\\right)\\left(e^{-t\/500}\\right)$$","c67f7bd5":"My previous topic (about decay) has a Calculus approach, studying the first and second derivatives to analyse the decay formula. In this topic I won't use Calulus, I'll focus in generate a dataset based on an interval of n_team_mates, rank, n_teams and its respective score results to plot graphics and see what happen.\n\nLet's import some libraries...","e73de518":"$$s(ntm,r,nt)=\\left(\\frac{100000}{\\sqrt{ntm}}\\right)\\left(\\text{r}^{-0.75}\\right)\\left(\\log_{10}(1 + \\log_{10}(nt))\\right)$$","e93606a2":"Now, we need to create a DataFrame do store massive f_score returns.","18ceffd7":"# 3D Graphs\n\n**3d.1** Plot score based on n_teammates and rank.\n\nAlthough we are already able to understand all relations between variables and score, it's always awsome to see those relations in 3D graphs, and we can start isolating n_teams...","cbd38a92":"**2d.2** Plot score based on rank.\n\nIsolating n_teams and n_team_mates...","d68d2ec1":"We can conclude that score increases as n_team_mates decreases and *vice versa*.","c900d76f":"**3d.2** Plot score based on rank and n_teams.\n\nIsolating n_team_mates...","af8fc408":"The best score scenario is high n_teams and low n_team_mates.","c182b539":"# Understanding Kaggle Competition Points","3e111496":"> This isn't the score related to your performance in a competition (this is stated on competition page and can be different for each competition). We are analysing here the score that is used to Kaggle ranking system.","32942668":"# The End\n\nIf you have any question or observation about this content, any suggestion to improve it or even report an error, please, feel free to share in a comment.","24b00a4b":"Some days ago I created a discussion topic to understand Kaggle points decay, which you can find in [Understanding Kaggle Points Decay (with Calculus)](https:\/\/www.kaggle.com\/general\/232296). But I was also curious about another Kaggle formula, the one that calculates competition points. Althought it's a bit more complex, it was very interesting to analyse it. If you never saw that formula, it's available in [Kaggle Progression System](https:\/\/www.kaggle.com\/progression), but I also made it available bellow.","96150571":"We can conclude that score increases as n_teams increases and *vice versa*.","2da26ca0":"# 2D Graphs\n\n**2d.1** Plot score based on n_team_mates.\n\nTo isolate a varibale (a column, with you prefer), we can keep this variable constant. I'll chose to keep isolated variables as 1. So the only thing we need to do, for example, to plot score based only on n_team_mates, is filter in the DataFrame only rows that contains rank and n_teams equal to 1. Thus we can see what happens with score when we increase n_team_mates.","63ba948b":"**3d.2** Plot score based on n_teams and n_team_mates.\n\nIsolating rank...","eb1a28b8":"Note that we have more than 3 variables here and we can't plot a graph containing all of them togheter, so I separate this study in steps, isolating some variables in each step...\n\n**2D Graphs**\n\n2d.1 - Plot score based on n_team_mates.\n\n2d.2 - Plot score based on rank.\n\n2d.3 - Plot score based on n_teams.\n\n**3D Graphs**\n\n3d.1 - Plot score based on n_teammates and rank.\n\n3d.2 - Plot score based on rank and n_teams.\n\n3d.3 - Plot score based on n_teams and n_team_mates.","a389bb11":"The first thing we need to do is to create a Python function based on the score formula, which gets n_team_mates, rank and n_teams parameters and return the score.","ed9b0c2d":"The best score scenario is low rank (good placing) and high n_teams.","13c31997":"We can conclude that score increases as rank decreases and *vice versa* (remember that low rank means better placing in the competition)."}}