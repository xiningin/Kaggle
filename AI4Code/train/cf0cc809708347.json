{"cell_type":{"60326715":"code","7fdfd2c4":"code","2999a093":"code","20c5f85a":"code","aeaa653c":"code","3f15e7d4":"code","dcafc95d":"code","232c8f73":"code","03e06230":"code","d95252a9":"code","d0c7d159":"code","b301b4b0":"code","8e644de8":"code","7a894400":"code","ffd7a5a7":"code","3a3c466d":"code","d22f6866":"code","72bce005":"code","a4c05b80":"code","8c6f8256":"code","f041e7ab":"code","d7120af1":"code","0d1d2d39":"code","125d6595":"code","e31b8d1a":"code","8a5ae6d0":"markdown"},"source":{"60326715":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fdfd2c4":"import tensorflow as tf\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom sklearn.datasets import fetch_lfw_people\nimport matplotlib.pyplot as mlp\nfrom tensorflow.keras.layers import Layer,Dense,Lambda,Flatten,Activation\nfrom tensorflow_addons.metrics import HammingLoss,hamming_distance\nimport cv2\nfrom keras.models import Model,Sequential\nfrom tensorflow.keras import activations","2999a093":"faces = fetch_lfw_people(min_faces_per_person=60)","20c5f85a":"dir(faces)","aeaa653c":"print(faces.images.shape)\nprint(faces.target.shape)\nprint(faces.target_names.shape)\n\nfor i in range(20):\n    print(i,faces.target_names[faces.target[i]],faces.target[i])","3f15e7d4":"print(faces.target_names[faces.target[14]])\nmlp.imshow(faces.images[14],'gray')","dcafc95d":"Images = np.expand_dims(faces.images,axis=-1)\nImages = np.repeat(Images,3,axis=-1)\nImages = tf.image.resize(Images,[75,75])","232c8f73":"Images.shape","03e06230":"inception = InceptionV3(weights=\"imagenet\",include_top=False)","d95252a9":"inception.summary()","d0c7d159":"def Winner_takes_all(x):\n#     print(type(a),a.shape)\n#     k=0.5\n#     j= int(a.shape[0]*k)\n#     threshold = sorted(a)[j]\n#     result= [int(x>=threshold) for x in a]\n    return tf.where(x>0.5,1,0)","b301b4b0":"model = Sequential()\nmodel.add(inception)\nmodel.add(Dense(128,activation=\"sigmoid\"))\nmodel.add(Flatten())\n# model.add(Dense(64,input_shape=(2048,),activation=\"sigmoid\"))\n# model.add(Activation(activations.sigmoid))\nmodel.add(Lambda(Winner_takes_all))","8e644de8":"model.compile(loss=HammingLoss,metrics=[hamming_distance])","7a894400":"X_train = Images[:1000]\nX_test = Images[1000:]","ffd7a5a7":"Y = model.predict(X_train)","3a3c466d":"Y.shape","d22f6866":"print(Y[0])","72bce005":"distance = dict()\nnames=list()\nfor i in range(20):\n    distance[i]=[sum(abs(Y[i]-Y[j])) for j in range(20)]\n    names.append(faces.target_names[faces.target[i]])\n#     print(\"distance de hamming entre une image de George bush et l'image de= \",faces.target_names[faces.target[i]],sum(abs(Y[10]-Y[i])))","a4c05b80":"pd.DataFrame(distance,names)","8c6f8256":"X_test.shape","f041e7ab":"prediction = model.predict(X_test)","d7120af1":"prediction.shape","0d1d2d39":"count = 0\nfor i in range(len(prediction)):\n    dists = sum(abs(Y-prediction[i]))\n    if faces.target[1000+i] == faces.target[np.argmin(Y-prediction[i])]:\n        count = count + 1\nprint(\"accuracy = \",count\/len(prediction)*100)","125d6595":"print(faces.target_names[faces.target[1000]])\nmlp.imshow(faces.images[1000])\n","e31b8d1a":"print(faces.target_names[faces.target[np.argmin(sum(abs(Y-prediction[0])))]])\nmlp.imshow(faces.images[np.argmin(sum(abs(Y-prediction[0])))])","8a5ae6d0":"**HashCode de la premiere image**"}}