{"cell_type":{"958758ae":"code","679fbefa":"code","e7231fa0":"code","a8796823":"code","4c0f328e":"code","0ca10fe4":"code","905754f8":"markdown","222dbe95":"markdown"},"source":{"958758ae":"from IPython.display import clear_output\n!pip3 install rx \nclear_output()\n\nimport rx \nfrom rx import of, operators as op\n","679fbefa":"of(1,2,3,4,5,6,7,8,9,10).pipe(\n   op.debounce(5)\n).subscribe(lambda x: print(\"value = {0}\".format(x)))","e7231fa0":"of(1,2,3,4,5,6,7,8,9,10).pipe(\n   op.debounce(2)\n).subscribe(lambda x: print(\"value = {0}\".format(x)))","a8796823":"of(1,2,3,4,5,6,7,8,9,10).pipe(\n   op.debounce(0.5)\n).subscribe(lambda x: print(\"value = {0}\".format(x)))","4c0f328e":"of(1,2,3,4,5,6,7,8,9,10).pipe(\n   op.debounce(0.00001)\n).subscribe(lambda x: print(\"value = {0}\".format(x)))","0ca10fe4":"of(1,2,3,4,5,6,7,8,9,10).pipe(\n   op.debounce(0.0000001)\n).subscribe(lambda x: print(\"value = {0}\".format(x)))","905754f8":"# debounce","222dbe95":"This operator will give \n\n### the values from the source observable, \n\n### until the timespan given \n\nand ignore the rest of the values if time passes."}}