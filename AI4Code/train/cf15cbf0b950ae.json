{"cell_type":{"c6ca72f4":"code","4c564d42":"code","ccc0b419":"code","5e34961c":"code","05c7e0b0":"code","101a208b":"code","7355d078":"code","25a9c283":"code","a4bdb801":"code","9a675a9b":"code","690d4485":"code","ad8aa85e":"code","7d308282":"code","2070df19":"code","ed2bd56d":"code","61426496":"code","a1dcfd44":"code","e17c0def":"code","4398ba63":"code","e8788a89":"code","a52b8f18":"code","e035c034":"code","9e26b9bd":"code","be178cef":"code","130ac939":"code","da96cf3b":"code","5b19767a":"code","0cda79c2":"code","12b6c55f":"code","acaae004":"code","5c6f5aa5":"code","0cd252f3":"code","e7956c6b":"code","22717e1a":"code","70936b76":"code","ab4bf788":"code","09736bb5":"code","7db00185":"code","86f3cb1f":"code","d254a8f3":"code","a751c6f1":"code","9822198b":"code","bc09d4c1":"markdown","cd38c8bc":"markdown","44486588":"markdown","20086730":"markdown","93a9a389":"markdown","fc42929b":"markdown","1f9226ad":"markdown","f84102d5":"markdown","37b26da6":"markdown","8df1b097":"markdown","61482d2a":"markdown","139623e7":"markdown","e6c0c583":"markdown"},"source":{"c6ca72f4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4c564d42":"#import packages\nimport pandas as pd\nfrom pandas import datetime\nimport numpy as np\n\n\n#to plot within notebook\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('fivethirtyeight')\n# Above is a special style template for matplotlib, highly useful for visualizing time series data\n\nimport seaborn as sns\n\n\n#setting figure size\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 10,10","ccc0b419":"path = '..\/input\/national-stock-exchange-time-series\/'\n\nTCS = pd.read_csv(path + 'tcs_stock.csv', parse_dates=['Date'])\n\nINFY = pd.read_csv(path + 'infy_stock.csv', parse_dates=['Date'])\n\nNIFTY = pd.read_csv(path + 'nifty_it_index.csv', parse_dates=['Date'])\n\n\nstocks = [TCS, INFY, NIFTY]\n\n\nTCS.name = 'TCS'\nINFY.name = 'INFY'\nNIFTY.name = 'NIFTY_IT'","5e34961c":"TCS[\"Date\"] = pd.to_datetime(TCS[\"Date\"])\nINFY[\"Date\"] = pd.to_datetime(INFY[\"Date\"])\nNIFTY[\"Date\"] = pd.to_datetime(NIFTY[\"Date\"])","05c7e0b0":"TCS.head(5)","101a208b":"TCS.shape","7355d078":"INFY.head(5)","25a9c283":"NIFTY.head(5)","a4bdb801":"# Features Generation\n\n\ndef features_build(df):\n    df['Date'] = pd.to_datetime(df['Date'])\n    df['Year'] = df['Date'].dt.year\n    df['Month'] = df.Date.dt.month\n    df['Day'] = df.Date.dt.day\n    df['WeekOfYear'] = df.Date.dt.weekofyear\n    \n    \n    \nfor i in range(len(stocks)):\n    # print(stocks[i])\n    features_build(stocks[i])\n    ","9a675a9b":"# check for newly added features. \nTCS.shape","690d4485":"TCS.head(3)","ad8aa85e":"# Lets define a function for moving average with rolling window\n\n# Sklearn has seperate function to calculate this: [ DataFrame.rolling(window).mean() ].\n\ndef moving_average(series, n):\n    \"\"\"\n        Calculate average of last n observations\n        \n        n - rolling window\n    \"\"\"\n    return np.average(series[-n:])\n\n\n'''\n# We can also imlement this user-defined function. But, first we need to isolate both 'Date' and 'Close' columns\nunder consideration. After that, we need to resample according to week , using:\n\ndf.resample('W')\n\nfunction. Then We will pass the 'Close' column as the 'series' argument to the custom built function.\nAnd, n = rolling window size.\n\n\nBut: We are not doing that here to maintain simplicity in code.\n\n'''","7d308282":"weeks = [4, 16, 28, 40, 52]","2070df19":"def indexing(stock):\n    stock.index = stock['Date']\n    return stock","ed2bd56d":"indexing(TCS)\nindexing(INFY)\nindexing(NIFTY)","61426496":"def plot_time_series(stock, weeks = [4, 16, 28, 40, 52]):\n    \n    dummy = pd.DataFrame()\n    # First Resampling into Weeks format to calculate for weeks\n    dummy['Close'] = stock['Close'].resample('W').mean() \n     \n    for i in range(len(weeks)):\n        m_a = dummy['Close'].rolling(weeks[i]).mean() # M.A using inbuilt function\n        dummy[\" Mov.AVG for \" + str(weeks[i])+ \" Weeks\"] = m_a\n        print('Calculated Moving Averages: for {0} weeks: \\n\\n {1}' .format(weeks[i], dummy['Close']))\n    dummy.plot(title=\"Moving Averages for {} \\n\\n\" .format(stock.name))\n    ","a1dcfd44":"plot_time_series(TCS)","e17c0def":"plot_time_series(INFY)","4398ba63":"plot_time_series(NIFTY)","e8788a89":"TCS = TCS.asfreq('D', method ='pad')        # pad-ffill : forward-fill\nINFY = INFY.asfreq('D', method ='pad')\nNIFTY = NIFTY.asfreq('D', method ='pad')\n\n\nTCS.name = 'TCS'\nINFY.name = 'INFY'\nNIFTY.name = 'NIFTY_IT'","a52b8f18":"def plot_roll_win(stock, win = [10, 75]):\n    \n    dummy = pd.DataFrame()\n    \n    dummy['Close'] = stock['Close']\n     \n    for i in range(len(win)):\n        m_a = dummy['Close'].rolling(win[i]).mean() # M.A using predefined function\n        dummy[\" Mov.AVG for \" + str(win[i])+ \" Roll Window\"] = m_a\n        print('Calculated Moving Averages: for {0} weeks: \\n\\n {1}' .format(win[i], dummy['Close']))\n    dummy.plot(title=\"Moving Averages for {} \\n\\n\" .format(stock.name))","e035c034":"plot_roll_win(TCS)","9e26b9bd":"plot_roll_win(INFY)","be178cef":"plot_roll_win(NIFTY)","130ac939":"def volume_shocks(stock):\n    \"\"\"\n    'Volume' - Vol_t\n    'Volume next day - vol_t+1\n    \n    \"\"\"\n    stock[\"vol_t+1\"] = stock.Volume.shift(1)  #next rows value\n    \n    stock[\"volume_shock\"] = ((abs(stock[\"vol_t+1\"] - stock[\"Volume\"])\/stock[\"Volume\"]*100)  > 10).astype(int)\n    \n    return stock","da96cf3b":"volume_shocks(TCS)\nvolume_shocks(INFY)\nvolume_shocks(NIFTY)","5b19767a":"def direction_fun(stock):\n    \n    # considerng only shock - 1 valued rows.\n    # 0 - negative and 1- positive\n    if stock[\"volume_shock\"] == 0:\n        pass\n    else:\n        if (stock[\"vol_t+1\"] - stock[\"Volume\"]) < 0:\n            return 0\n        else:\n            return 1","0cda79c2":"def vol_shock_direction(stock):\n    stock['VOL_SHOCK_DIR'] = 'Nan'\n    stock['VOL_SHOCK_DIR'] = stock.apply(direction_fun, axis=1)\n    return stock","12b6c55f":"vol_shock_direction(TCS)\nvol_shock_direction(INFY)\nvol_shock_direction(NIFTY)","acaae004":"def price_shocks(stock):\n    \"\"\"\n    'ClosePrice' - Close_t\n    'Close Price next day - vol_t+1\n    \n    \"\"\"\n    stock[\"price_t+1\"] = stock.Close.shift(1)  #next rows value\n    \n    stock[\"price_shock\"] = (abs((stock[\"price_t+1\"] - stock[\"Close\"])\/stock[\"Close\"]*100)  > 2).astype(int)\n    \n    stock[\"price_black_swan\"] = stock['price_shock'] # Since both had same data anad info\/\n    \n    return stock","5c6f5aa5":"price_shocks(TCS)\nprice_shocks(INFY)\nprice_shocks(NIFTY)","0cd252f3":"def direction_fun_price(stock):\n    \n    # considerng only shock - 1 valued rows.\n    # 0 - negative and 1- positive\n    if stock[\"price_shock\"] == 0:\n        pass\n    else:\n        if (stock[\"price_t+1\"] - stock[\"Close\"]) < 0:\n            return 0\n        else:\n            return 1","e7956c6b":"def price_shock_direction(stock):\n    stock['PRICE_SHOCK_DIR'] = 'Nan'\n    stock['PRICE_SHOCK_DIR'] = stock.apply(direction_fun_price, axis=1)\n    return stock","22717e1a":"vol_shock_direction(TCS)\nvol_shock_direction(INFY)\nvol_shock_direction(NIFTY)","70936b76":"def price_shock_wo_vol_shock(stock):\n    \n    stock[\"not_vol_shock\"]  = (~(stock[\"volume_shock\"].astype(bool))).astype(int)\n    stock[\"price_shock_w\/0_vol_shock\"] = stock[\"not_vol_shock\"] & stock[\"price_shock\"]\n    \n    return stock","ab4bf788":"price_shock_wo_vol_shock(TCS)\nprice_shock_wo_vol_shock(INFY)\nprice_shock_wo_vol_shock(NIFTY)","09736bb5":"import bokeh\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.io import show, output_notebook\nfrom bokeh.palettes import Blues9\nfrom bokeh.palettes import RdBu3\nfrom bokeh.models import ColumnDataSource, CategoricalColorMapper, ContinuousColorMapper\nfrom bokeh.palettes import Spectral11","7db00185":"output_notebook()","86f3cb1f":"def bokeh_plot(stock):\n    data = dict(stock=stock['Close'], Date=stock.index)\n    \n    p = figure(plot_width=800, plot_height=250,  title = 'time series for {}' .format(stock.name), x_axis_type=\"datetime\")\n    p.line(stock.index, stock['Close'], color='blue', alpha=0.5)\n    \n    #show price shock w\/o vol shock\n    \n    p.circle(stock.index, stock.Close*stock[\"price_shock_w\/0_vol_shock\"], size=4, legend_label='price shock without vol shock')\n    show(p)","d254a8f3":"output_file(\"timeseries.html\")\n\nbokeh_plot(TCS)\nbokeh_plot(INFY)\nbokeh_plot(NIFTY)","a751c6f1":"from statsmodels.tsa.stattools import acf, pacf\n\ndef draw_pacf(stock):\n    \n    lags = 50\n\n    x = list(range(lags))\n\n    p = figure(plot_height=500, title=\"Partial Autocorrelation PLot {}\" .format(stock.name))\n\n    partial_autocorr = pacf(stock[\"Close\"], nlags=lags)\n    p.vbar(x=x, top=partial_autocorr, width=0.9)\n    show(p)","9822198b":"output_file(\"PACF.html\")\n\ndraw_pacf(TCS)\ndraw_pacf(INFY)\ndraw_pacf(NIFTY)","bc09d4c1":"##### Price Shock Direction and Black Swan shock direction (both same)","cd38c8bc":"##### Now , we further have to put rolling window as 10 and then 75. Keeping in mind the stock market holidays. For that, we first need to resample again as per days. We are not worried about special\/ national holidays. because for that we need to use special calendar APIs, which may provide us holidays for each year. Here, we are only considering STOCK MARKET HOLIDAYS. ie. Saturday and Sunday\n\n\n##### Thus, instead of `resample()`, we will here use `resample.Resampler.asfreq()` function. Because it also provide us option of padding (backwardfill\/forwardfill missing values \"not NANs\" ). source: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.asfreq.html We are using this, because on saturdays and sundays, market remains closed, so friday's close price could be forwarded in closing days.","44486588":"##### Table With Calculated Moving Average + plot for Moving averages for weeks = [4,16,28,40,52]","20086730":"##### Let us calculate moving averages (closing price) for weeks = [4,16,28,40,52]","93a9a389":"# National Stock Exchange -> Time Series Analysis & Forecast","fc42929b":"### Volume Shocks","1f9226ad":"##### **Conclusion** : From Above graph plottings, we can visualize that, as much as the rolling window is small, the moving average is somehow significant and closer to the actual data","f84102d5":"## Part-2 Visualisation with BOKEH","37b26da6":"##### Price shocks","8df1b097":"#### Target Variable : Set Close (Closing Price to be the target variable).","61482d2a":"#### Volume Shock Direction","139623e7":"##### Price Shock w\/o volume shocks","e6c0c583":"## PART-1"}}