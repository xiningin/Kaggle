{"cell_type":{"aa41395f":"code","0de036e4":"code","05b066b2":"code","61979bed":"code","3d1bf42c":"code","8ecaf624":"code","8f69c42c":"code","e9293b1b":"code","0e58474f":"code","d6824087":"code","b8438ca3":"code","a240233a":"code","fa262343":"code","99f45db6":"code","4ce8deb1":"code","d7a6d062":"code","ed2840f6":"code","49080474":"code","de226f68":"code","f30d88c0":"code","28596847":"code","d4778a77":"code","ac78eafa":"code","0c7c7107":"code","557deab2":"code","b26ecfcc":"code","76f7d120":"code","200763d5":"code","b2df86e7":"code","1678b4cb":"code","8873423a":"code","747ac7c8":"code","b8283eae":"code","ebe1058f":"code","ca6fde31":"code","862c9701":"code","6449500d":"code","17c06c7a":"code","9c313437":"code","af8adf15":"code","bf6be5b3":"code","029f556a":"code","e55e27e3":"code","0687a2d6":"code","b221f84c":"code","affaed62":"code","45b11b08":"code","44fe7fbb":"code","1292db08":"code","fa4d1af8":"code","f5ca2a64":"code","9a6a1070":"code","0d3b5ca8":"code","c25c79bd":"code","69497db4":"code","f026997b":"code","c7d140ae":"markdown","48d2ccb5":"markdown","7e2333bf":"markdown","daf36fe9":"markdown","bcd9a96b":"markdown","98cad1dc":"markdown","f2b2b113":"markdown","46a6003a":"markdown","65ce9c9e":"markdown","f4e0682a":"markdown","3e3ae6bb":"markdown","578e47fb":"markdown","1c32d29c":"markdown","9eb9db75":"markdown","6edd9d93":"markdown","a17db6f3":"markdown","e084d300":"markdown","398a4639":"markdown","9fc63de3":"markdown","64f90232":"markdown","80dd2603":"markdown","bb608078":"markdown","02569a0a":"markdown","062f42d0":"markdown","d04b17fc":"markdown","677e1bc9":"markdown","f1837888":"markdown","df462751":"markdown","4e56b8bf":"markdown","0ddb0cd7":"markdown","282b8bff":"markdown","7d60a989":"markdown"},"source":{"aa41395f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0de036e4":"data = pd.read_csv(\"..\/input\/telecom-users-dataset\/telecom_users.csv\")\npd.options.display.max_columns = None","05b066b2":"data.head()","61979bed":"data.Churn.value_counts()","3d1bf42c":"data.info()","8ecaf624":"[col for col in data.columns if \" \" in data[col].value_counts().index.tolist()]","8f69c42c":"data[\"TotalCharges\"].replace(to_replace = \" \", value = np.nan, inplace = True)\ndata.dropna(inplace = True)","e9293b1b":"import plotly.express as px\nimport plotly.graph_objects as go","0e58474f":"px.pie(values = data.Churn.value_counts().values.tolist(), names = data.Churn.value_counts().index.tolist(),title = \"Y variable distribution\")","d6824087":"px.pie(values = data[\"gender\"].value_counts().values.tolist(), names = data[\"gender\"].value_counts().index.tolist(), title = \"gender distribution is Telecom\")","b8438ca3":"fig = go.Figure(\n    [go.Bar(name = \"senior_citizen - 1\", x = data[data[\"SeniorCitizen\"] == 1].gender.value_counts().index.tolist(),\n            y = data[data[\"SeniorCitizen\"] == 1].gender.value_counts().values.tolist()),\n     go.Bar(name = \"senior_citizen - 0\", x = data[data[\"SeniorCitizen\"] == 0].gender.value_counts().index.tolist(),\n            y = data[data[\"SeniorCitizen\"] == 0].gender.value_counts().values.tolist())]\n)\nfig.update_layout(barmode = \"group\",title = \"gender distribution based on senior citizenship\")","a240233a":"px.violin(data[\"tenure\"],box = True, points = \"all\")","fa262343":"sen = data[data[\"SeniorCitizen\"] == 1]\nno_sen = data[data[\"SeniorCitizen\"] == 0]","99f45db6":"fig = go.Figure(\n    [go.Bar(x = sen.InternetService.value_counts().index.tolist(), y = sen.InternetService.value_counts().values.tolist(), name = \"senior_citizens\"),\n    go.Bar(x = no_sen.InternetService.value_counts().index.tolist(), y = no_sen.InternetService.value_counts().values.tolist(), name = \"non-senior_citizens\")]\n)\nfig.update_layout(barmode = \"group\", title = \"internet service differences between senior citizens and young citizens\")","4ce8deb1":"dims1 = ['PhoneService', 'MultipleLines', 'OnlineSecurity',\"OnlineBackup\"]\nfig = px.parallel_categories(sen, dimensions = dims1,\n                color=\"MonthlyCharges\", color_continuous_scale=px.colors.sequential.Inferno,\n                labels ={k:k for k in dims1})\nfig.update_layout(title = \"comprehensive correlation for senior citizens #1\")","d7a6d062":"dims2 = [\"DeviceProtection\",\"TechSupport\", \"StreamingTV\",\"StreamingMovies\"]\nfig = px.parallel_categories(sen, dimensions = dims2,\n                color=\"MonthlyCharges\", color_continuous_scale=px.colors.sequential.Plotly3,\n                labels ={k:k for k in dims2})\nfig.update_layout(title = \"comprehensive correlation for senior citizens #2\")","ed2840f6":"dims1 = ['PhoneService', 'MultipleLines', 'OnlineSecurity',\"OnlineBackup\"]\nfig = px.parallel_categories(no_sen, dimensions = dims1,\n                color=\"MonthlyCharges\", color_continuous_scale=px.colors.sequential.Inferno,\n                labels ={k:k for k in dims1})\nfig.update_layout(title = \"comprehensive correlation for non-senior citizens #1\")","49080474":"dims2 = [\"DeviceProtection\",\"TechSupport\", \"StreamingTV\",\"StreamingMovies\"]\nfig = px.parallel_categories(no_sen, dimensions = dims2,\n                color=\"MonthlyCharges\", color_continuous_scale=px.colors.sequential.Plotly3,\n                labels ={k:k for k in dims2})\nfig.update_layout(title = \"comprehensive correlation for non-senior citizens #2\")","de226f68":"px.bar_polar(data, r = data.PaymentMethod.value_counts().values.tolist(), theta = data.PaymentMethod.value_counts().index.tolist(),\n                   color = data.PaymentMethod.value_counts().index.tolist(),\n                   title = \"payment method!\")","f30d88c0":"from plotly.subplots import make_subplots","28596847":"fig = make_subplots(rows = 1, cols = 2,\n                      subplot_titles = (\"happily ever after?(senior)\",\"forever single?(non_senior)\"),\n                    specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(values = sen[\"Partner\"].value_counts().values.tolist(), labels = sen[\"Partner\"].value_counts().index.tolist(),hole = 0.4),1,1)\nfig.add_trace(go.Pie(values = no_sen[\"Partner\"].value_counts().values.tolist(), labels = no_sen[\"Partner\"].value_counts().index.tolist(),hole = 0.4),1,2)\nfig.show()","d4778a77":"px.bar(x = data.Contract.value_counts().index.tolist(), y = data.Contract.value_counts().values.tolist(),\n       title = \"popularity of telecomm subcription duration\", color = data.Contract.value_counts().index.tolist())","ac78eafa":"px.violin(data[\"MonthlyCharges\"],box = True , points = \"all\",title = \"monthly charges distribution\")","0c7c7107":"px.violin(data[\"TotalCharges\"],box = True , points = \"all\",title = \"total charges distribution\")","557deab2":"data_copy = data.copy(deep = True)","b26ecfcc":"for col in data_copy.columns[2:]:\n    print(f\"{col}: \\n{data_copy[col].value_counts()}\\n\\n\")","76f7d120":"data_copy[\"OnlineSecurity\"].replace(to_replace = [\"No internet service\"], value = [\"No\"], inplace = True)\ndata_copy[\"OnlineBackup\"].replace(to_replace = [\"No internet service\"], value = [\"No\"], inplace = True)\ndata_copy[\"DeviceProtection\"].replace(to_replace = [\"No internet service\"], value = [\"No\"], inplace = True)\ndata_copy[\"TechSupport\"].replace(to_replace = [\"No internet service\"], value = [\"No\"], inplace = True)\ndata_copy[\"StreamingTV\"].replace(to_replace = [\"No internet service\"], value = [\"No\"], inplace = True)\ndata_copy[\"StreamingMovies\"].replace(to_replace = [\"No internet service\"], value = [\"No\"], inplace = True)\ndata_copy[\"MultipleLines\"].replace(to_replace = [\"No phone service\"], value = [\"No\"], inplace = True)","200763d5":"label_list = [col for col in data_copy.columns[2:-1] if len(data_copy[col].value_counts().index) == 2]\nfor col in label_list:\n    data_copy[col].replace(to_replace = data_copy[col].value_counts().index.tolist(), value = [*range(0,len(data_copy[col].value_counts().index.tolist()))], inplace = True)","b2df86e7":"data_copy[\"TotalCharges\"] = data_copy[\"TotalCharges\"].astype(np.float32)","1678b4cb":"one_hot_list = [data_copy.columns.tolist().index(col) for col in data_copy.columns[2:-1] if len(data_copy[col].value_counts().index) > 2 and type(data_copy[col][0]) == str]","8873423a":"one_hot_list","747ac7c8":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\ncolumnTransformer = ColumnTransformer([('encoder',\n                                        OneHotEncoder(),\n                                        one_hot_list)],\n                                      remainder='passthrough')\ndata_copy = pd.DataFrame(np.array(columnTransformer.fit_transform(data_copy)))","b8283eae":"data_copy.drop([11], axis = 1,inplace = True)","ebe1058f":"data_copy[28].replace(to_replace = [\"Yes\",\"No\"], value = [1,0], inplace = True)","ca6fde31":"data_copy.head()","862c9701":"from sklearn.model_selection import train_test_split\n\nx = data_copy.iloc[:,:-1].values\ny = data_copy.iloc[:,-1].values\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state = 177013)","6449500d":"from imblearn.combine import SMOTEENN\nfrom collections import Counter","17c06c7a":"print(\"Before :\",Counter(y_train), len(x_train),len(y_train),\"\\n\")\nsmoteenn = SMOTEENN()\nx_train_re,y_train_re = smoteenn.fit_resample(x_train,y_train)\n\nprint(\"After :\",Counter(y_train_re), len(x_train_re),len(y_train_re))","9c313437":"from sklearn.metrics import classification_report,roc_auc_score,roc_curve\nimport matplotlib.pyplot as plt","af8adf15":"# great helper function\ndef eval(algo):\n    algo.fit(x_train_re,y_train_re)\n    y_pred = algo.predict(x_test)\n    print(classification_report(y_test,y_pred))\n    y_pred_proba = algo.predict_proba(x_test)[::,1]\n    fpr, tpr, _ = roc_curve(y_test,y_pred_proba)\n    auc = roc_auc_score(y_test, y_pred_proba)\n    plt.plot(fpr, tpr ,label = f\"auc={str(auc)}\")\n    plt.legend(loc=4)\n    plt.title(f\"ROC Curve of {algo}\")\n    plt.show()","bf6be5b3":"from sklearn.linear_model import LogisticRegression\neval(algo = LogisticRegression())","029f556a":"from sklearn.svm import SVC\neval(algo = SVC(probability = True))","e55e27e3":"from sklearn.tree import DecisionTreeClassifier\neval(algo = DecisionTreeClassifier())","0687a2d6":"from sklearn.ensemble import RandomForestClassifier\neval(algo = RandomForestClassifier(n_estimators = 300, random_state = 177013))","b221f84c":"from sklearn.ensemble import GradientBoostingClassifier\neval(algo = GradientBoostingClassifier(n_estimators = 300, random_state = 177013))","affaed62":"import tensorflow\nfrom tensorflow.keras.layers import Dense,Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam","45b11b08":"N,D = x_train.shape","44fe7fbb":"i = Input(shape = (D,))\nx = Dense(16,activation = \"relu\")(i)\nx = Dense(8,activation = \"relu\")(x)\nx = Dense(1,activation = \"sigmoid\")(x)\n\nmodel = Model(i,x, name = \"churn_banger_9000\")\n\nmodel.compile(loss = \"binary_crossentropy\", metrics = [\"accuracy\"], optimizer = Adam(lr = 0.0001))","1292db08":"tensorflow.keras.utils.plot_model(model,show_shapes = True)","fa4d1af8":"x_train_arr = np.asarray(x_train_re).astype(np.float32)\ny_train_arr = np.asarray(y_train_re).astype(np.float32)","f5ca2a64":"x_test_arr = np.asarray(x_test).astype(np.float32)\ny_test_arr = np.asarray(y_test).astype(np.float32)","9a6a1070":"his = model.fit(x_train_arr,y_train_arr, epochs = 75, validation_data = (x_test_arr,y_test_arr))","0d3b5ca8":"plt.plot(his.history[\"accuracy\"], label = \"train\")\nplt.plot(his.history[\"val_accuracy\"], label = \"test\")\nplt.legend()","c25c79bd":"y_pred_nn = model.predict(x_test_arr)\ny_pred_ceil = [1 if y_pred > 0.5 else 0 for y_pred in y_pred_nn]","69497db4":"print(classification_report(y_test,y_pred_ceil))","f026997b":"fpr, tpr, _ = roc_curve(y_test,y_pred_nn)\nauc = roc_auc_score(y_test, y_pred_nn)\nplt.plot(fpr, tpr ,label = f\"auc={str(auc)}\")\nplt.legend(loc=4)\nplt.title(f\"ROC Curve of NN\")\nplt.show()","c7d140ae":"11 is that pesky costumerID column i forgot to drop at start and too lazy to fix it at start, so imma fix it HERE!","48d2ccb5":"do senior citizens opt for onlinebackup?","7e2333bf":"### non-senior citizens guide to many variables","daf36fe9":"now, we are left with..\n\n- 'tenure',             --- cardinal \n- 'InternetService',    --- categorical\n- 'Contract',           --- categorical\n- 'PaymentMethod',      --- categorical\n- 'MonthlyCharges',     --- decimals\n- 'TotalCharges'        --- decimals(IS actually str in dataset)\n\nso total_charges is in str..cool, now back to FLOAT\n\nwe leave out the numeric values and only convert categorical","bcd9a96b":"## Exploratory Data Analysis","98cad1dc":"### applying [SMOTEENN](https:\/\/www.analyticsvidhya.com\/blog\/2020\/10\/overcoming-class-imbalance-using-smote-techniques\/) algorithm to oversample and undersample to move closer to balanced distribution","f2b2b113":"so, first we will explore machine learning and then we will create ANN","46a6003a":"maybe there is room for improvement","65ce9c9e":"mailed check in 2021? damn","f4e0682a":"## data preprocessing and preparation","3e3ae6bb":"Support vector classifier","578e47fb":"i am a bit curious about something","1c32d29c":"i bet the distribution is BAD!","9eb9db75":"### A guide to senior citizen telecom preferences","6edd9d93":"### Decision Tree classifier","a17db6f3":"lets see what kind of internet service senior citizens have","e084d300":"1. logistic regression -- 73%\n\n2. Decision tree Classifier -- 72%                               \n\n3. random forest classifier -- 78% | Winner! \n\n4. support vector classifier -- 61%                        \n\n5. XGboost(the Competitive algorithm) -- 78% | Winner! \n\n6. Neural Network(can be improved further) -- 70% |consolation ","398a4639":"## conclusion","9fc63de3":"To avoid redundant levels in a categorical variable and to deal with rare levels, we can simply combine the different levels.","64f90232":"1. logistic regression\n\n2. Decision tree Classifier\n\n3. random forest classifier\n\n4. support vector with RBF kernel\n\n5. XGboost(the Competitive algorithm)","80dd2603":"pretty updated oof!","bb608078":"### Random Forest Classifier","02569a0a":"### back to main data, lets stop being indifferent towards aged people","062f42d0":"### logistic regression","d04b17fc":"## machine learning\/neural networks with metrics included :)","677e1bc9":"### neural network using tensorflow","f1837888":"thats pretty inconclusive...i am a bit disappointed","df462751":"# TELECOM CHURN MODELLING","4e56b8bf":"label encoding 2 value categorical variables","0ddb0cd7":"made with regret while listening to [Symposium magaram](https:\/\/www.youtube.com\/watch?v=Qt2pvlpGQL0&t=201s) on loop at 3am","282b8bff":"we might have to resample this later.","7d60a989":"lets start with basic analysis and work our way through complex conditions"}}