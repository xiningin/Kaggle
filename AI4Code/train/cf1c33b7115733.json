{"cell_type":{"dcf1d4e0":"code","79d94aee":"code","1b6a92d7":"code","31bb350d":"code","f35fe12b":"code","3378b683":"code","bd08a34b":"code","cd713ccf":"code","ff1a55e9":"code","809aad8a":"code","54d18a6d":"code","0a7e7ebc":"code","36da6b4c":"code","147fd8e7":"code","1cbf945f":"code","458914e4":"code","fcaa4c9b":"code","14104e55":"code","66ce2aeb":"code","682d96de":"code","6da6b0a6":"code","f675a8d7":"code","4f3b0ea9":"code","79d84f7c":"code","ee1849bc":"code","a3c4814d":"code","f201d30e":"code","71a93fc2":"code","937e3aae":"code","c297b43c":"code","f61efc24":"code","2d81b9c4":"code","143a0fbd":"code","aedfab39":"code","c1cafa13":"code","da902f28":"code","7ad36367":"code","79852d5c":"code","aca307de":"code","ebb1d204":"code","5b0a4633":"code","9c9e4f1c":"code","87ed7785":"code","1b1a53a5":"code","bd0a8b41":"code","46474c37":"code","b5152943":"code","fa9fdef5":"code","4850a463":"code","5c6e0440":"code","81b0a110":"code","9779f0ee":"code","95abd1ad":"code","5810cd12":"code","6f4ad03d":"code","75edb4f6":"code","9a249962":"code","41db0a73":"code","dc6f968e":"code","3598a6a9":"code","4e0614e1":"code","7e21c2b2":"code","5fb637e9":"code","8586c5f5":"code","386ee0f4":"markdown","4eb61330":"markdown","6155fa9b":"markdown","4f503bf8":"markdown","9acf2c16":"markdown","bd26507d":"markdown","da0e4b9c":"markdown","ff9a7dfb":"markdown","67da485a":"markdown","8ed4bbc0":"markdown","1ec8736f":"markdown","39985284":"markdown","4588e321":"markdown","069c99fa":"markdown","0dcd20b5":"markdown","dbcff837":"markdown","23eed623":"markdown","a5ab7a6d":"markdown","2d0fa254":"markdown","8ebf5e55":"markdown"},"source":{"dcf1d4e0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom pandas_profiling import ProfileReport","79d94aee":"pip install openpyxl","1b6a92d7":"df=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ndf_Test=pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Test_set.xlsx')","31bb350d":"df.head()","f35fe12b":"profile=ProfileReport(df, title='Pandas Profiling Report', explorative=True)\nprofile.to_widgets()","3378b683":"\nsns.distplot(df['Price'])","bd08a34b":"df['Airline'].value_counts().plot(kind='bar');\n","cd713ccf":"df['Total_Stops'].value_counts().plot(kind='bar');","ff1a55e9":"df['Source'].value_counts().plot(kind='bar');","809aad8a":"df['Destination'].value_counts().plot(kind='bar');","54d18a6d":"\nprint(df.shape)","0a7e7ebc":"df.describe()","36da6b4c":"df.info()","147fd8e7":"df.isnull().sum()","1cbf945f":"print(df[df[\"Total_Stops\"].isnull()])\nprint(df[df[\"Route\"].isnull()])","458914e4":"df.dropna(inplace = True)","fcaa4c9b":"df.shape\ndf.isnull().sum() # No Null values now","14104e55":"df.replace({\"New Delhi\": \"Delhi\"}, inplace = True)","66ce2aeb":"df[\"Journey_Month\"] = pd.to_datetime(df[\"Date_of_Journey\"],format = \"%d\/%m\/%Y\").dt.month\ndf[\"Journey_Date\"] = pd.to_datetime(df[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.day","682d96de":"df.head()","6da6b0a6":"df.drop([\"Date_of_Journey\"],axis='columns',inplace=True) # Dropping the column \"Date_of_Journey\"","f675a8d7":"df.head()","4f3b0ea9":"df[\"Arrival_hour\"] = pd.to_datetime(df['Arrival_Time']).dt.hour\ndf[\"Arrival_min\"] = pd.to_datetime(df['Arrival_Time']).dt.minute\n","79d84f7c":"df.drop([\"Arrival_Time\"],axis=1,inplace=True) #Dropping the \"Arrival_Time\" Column","ee1849bc":"df.head()","a3c4814d":"df['Dep_hour'] = pd.to_datetime(df[\"Dep_Time\"]).dt.hour\ndf[\"Dep_min\"] = pd.to_datetime(df[\"Dep_Time\"]).dt.minute\n","f201d30e":"df.drop(['Dep_Time'],axis=1,inplace=True) # #Dropping the \"Dep_Time\" Column","71a93fc2":"df.head()","937e3aae":"df['Duration_in_Min']=(pd.to_timedelta(df['Duration']).dt.seconds \/\/ 60).astype(int)\n\n\n\n","c297b43c":"df.drop(['Duration'],axis=1,inplace=True) # #Dropping the \"Duration\" Column","f61efc24":"df.head()","2d81b9c4":"df.nunique()","143a0fbd":"Airline = pd.get_dummies(df[[\"Airline\"]],drop_first=True)\nSource = pd.get_dummies(df[[\"Source\"]],drop_first=True)\nDestination = pd.get_dummies(df[[\"Destination\"]],drop_first=True)","aedfab39":"Airline.head()\n","c1cafa13":"Source.head()","da902f28":"Destination.head()","7ad36367":"df= pd.concat([df, Airline,Source,Destination],axis=1)","79852d5c":"df.shape","aca307de":"df","ebb1d204":"df.drop(['Airline',\"Source\",\"Destination\"],axis=1,inplace=True)","5b0a4633":"df","9c9e4f1c":"df.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","87ed7785":"df","1b1a53a5":"df.drop(['Route','Additional_Info'],axis=1,inplace=True) # We see that routes and Total_stops do the same thing","bd0a8b41":"df","46474c37":"sorted(df)","b5152943":"import seaborn as sns \nimport matplotlib.pyplot as plt\nplt.figure(figsize = (29,29))\nsns.heatmap(df.corr(), annot = True, linecolor=\"red\", cbar=True)\n\nplt.show()","fa9fdef5":" \nX = df.drop([\"Price\"],axis=1)\ny = df[\"Price\"]","4850a463":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 7)","5c6e0440":"from sklearn.ensemble import RandomForestRegressor\nreg_rf = RandomForestRegressor()\n\n","81b0a110":"reg_rf.fit(X_train, y_train)","9779f0ee":"y_pred = reg_rf.predict(X_test)","95abd1ad":"y_pred","5810cd12":"print(y_test, y_pred)","6f4ad03d":"reg_rf.score(X_test,y_test)","75edb4f6":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 2000, num = 20)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 10)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 1000]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","9a249962":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","41db0a73":"rf_random = RandomizedSearchCV(estimator = reg_rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","dc6f968e":"rf_random.fit(X_train,y_train)","3598a6a9":"rf_random.best_params_","4e0614e1":"from sklearn.metrics import accuracy_score\n\nmodel = RandomForestRegressor(n_estimators = 1500,\n min_samples_split = 5,\n min_samples_leaf =  2,\n max_features = 'auto',\n max_depth =  24)\nmodel.fit(X_train,y_train)\nmodel.score(X_test,y_test)","7e21c2b2":"#import joblib ","5fb637e9":"#joblib.dump(model,\"Flight_Ticket_Prediction_Model\")","8586c5f5":"#model=joblib.load('Flight_Ticket_Prediction_Model')\n       ","386ee0f4":"\n\n# <div> <center><b style=\"color:OrangeRed\"> Flight Ticket Price Prediction <\/b> <\/center><\/div>\n\n","4eb61330":"## Manipulating the values of the \"Total_Stops\" Column","6155fa9b":"# EDA","4f503bf8":"# Feature Engineering","9acf2c16":"<h2>Importing the data sets<\/h2>","bd26507d":"<h2>Calculating some statistical data<\/h2>","da0e4b9c":"### Airline, Source  & Destination are the nominal categorical variables, So converting those to dummy variables.","ff9a7dfb":" ### <font color=\"red\"> Note - Originally Airlines, Source & Destination had 12, 6 & 5 unique values but data frame we are getting have 1 less column for each of them because \"drop_first=True\" and that is used to avoid \"Dummy Trap\"\/ multicollinearity. <\/font>","67da485a":"## Merging all the data frames \n","8ed4bbc0":"## Below is the complete report of the dataset , toggle trough the widgets to get the information.","1ec8736f":"# Creating a Joblib file for the model","39985284":"## Finding the rows that contain these values","4588e321":"### Extracting Date and Month from Date_of_Journey ","069c99fa":"<h2>Checking the data type of the columns<\/h2>","0dcd20b5":"### Extracting Hour  and Minutes from Arrival_Time","dbcff837":"### Exatracting a new column from 'Duration' column which show Total duration in Minutes","23eed623":"# Hyper Parameter Tuning","a5ab7a6d":"## Checking for null values\n","2d0fa254":"### Extracting Hour  and Minutes from Dep_Time","8ebf5e55":"### The airports in New Delhi and Delhi are the same."}}