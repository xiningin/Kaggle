{"cell_type":{"67237607":"code","4d1228ec":"code","11e3ab13":"code","0db3df91":"code","3ba98018":"code","d1c2e0a2":"code","a92f925a":"code","09afbf5a":"code","4bab039c":"code","d98cc106":"code","d001c4c8":"code","e977bf27":"markdown","edf08c8e":"markdown","b349f9dd":"markdown"},"source":{"67237607":"import pandas as pd\nimport tensorflow as tf\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport cv2\n","4d1228ec":"import os\n\ntrain_dir='..\/input\/chest-xray-pneumonia\/chest_xray\/train'\nprint(len(os.listdir(train_dir)))","11e3ab13":"test_dir='..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nprint(len(os.listdir(test_dir)))","0db3df91":"import matplotlib.image as mpimg\n\nplt.figure(figsize=(10,10))\nimg = mpimg.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/IM-0115-0001.jpeg')\nplt.imshow(img,cmap='gray')\nprint('NORMAL CHEST')","3ba98018":"plt.figure(figsize=(10,10))\nimg = mpimg.imread('..\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/person1003_virus_1685.jpeg')\nplt.imshow(img,cmap='gray')\nprint('PNEUMONIA CHEST')","d1c2e0a2":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ndatagen=ImageDataGenerator(rescale=1.0\/255.0)\n\ntrainDatagen=datagen.flow_from_directory(train_dir,\n                                 target_size=(250,250),\n                                 batch_size=50,\n                                 class_mode='binary',\n                                 rotation_range=20,\n                                 width_shift_range=0.2,\n                                 height_shift_range=0.2,\n                                 horizontal_flip=True)\nvalDatagen=datagen.flow_from_directory(test_dir,\n                                      target_size=(250,250),\n                                      batch_size=10,\n                                      class_mode='binary')","a92f925a":"model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(32, (3,3), activation='relu',input_shape=(250,250, 3)),\n                                    tf.keras.layers.MaxPooling2D(2,2),\n                                    tf.keras.layers.Dropout(0.2),\n                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2,2),\n    \n                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2,2),\n    \n                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n                                    tf.keras.layers.MaxPooling2D(2,2),\n                                    tf.keras.layers.Dropout(0.3),\n    \n                                    tf.keras.layers.Flatten(),\n    \n                                    tf.keras.layers.Dense(512, activation='relu'),\n    \n                                    tf.keras.layers.Dense(1, activation='sigmoid')])\n\n","09afbf5a":"model.summary()","4bab039c":"model.compile(optimizer='adam',\n             loss='binary_crossentropy',\n             metrics=['accuracy'])\n","d98cc106":"class mycallbacks(tf.keras.callbacks.Callback):\n    def on_epoch_end(self,epochs,logs={}):\n        if(logs.get('accuracy')>0.99):\n            self.model.stop_training=True\ncallbacks=mycallbacks()\nhistory=model.fit_generator(trainDatagen,validation_data=valDatagen,epochs=30,verbose=1,callbacks=[callbacks])","d001c4c8":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\n\nplt.figure()\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","e977bf27":"**VISULAIZATION OF OVERFITTING OR UNDERFITTING**","edf08c8e":"# **VISUALIZATION**","b349f9dd":"# **Data Augmentation**"}}