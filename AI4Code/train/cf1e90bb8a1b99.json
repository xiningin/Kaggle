{"cell_type":{"79935e52":"code","37544d1f":"code","943bbffe":"code","7e54d01f":"code","2f76db2d":"code","56fd3501":"code","505000b8":"code","607fd592":"code","7d4feebc":"code","c276161f":"code","c8924ac9":"code","6f0efd97":"code","6e1dee7c":"code","8044c2fb":"code","010e5f17":"code","944da36f":"code","437efd89":"code","ca248ef7":"code","010cfe65":"code","54e24d4e":"code","f444091a":"code","0b758332":"code","a5f6987b":"code","631a7593":"code","c36cf738":"code","2f8e97c6":"code","3de95d15":"code","eb5c06f8":"code","9b4a3d91":"code","8f2b90db":"code","0ecaa5f3":"code","1ad1c3ef":"code","9f9b7df6":"code","cbfb0fc1":"code","ae6d08d2":"code","10e72a0f":"code","81775f9e":"code","c3537403":"code","16b4ad17":"code","a7b2b7f4":"code","0424c3fc":"code","7a3cc71e":"code","1bcd0af0":"code","b9ccd1d7":"code","a6ed9960":"code","9238f6de":"code","86054c8e":"code","14d5a247":"code","590b15cb":"code","44375018":"code","bad90d9a":"code","5ff1ebee":"code","71ab26e7":"code","0ac91ff6":"code","a1df10b7":"code","c95058fb":"code","dc956bad":"code","6a6190b1":"code","68da1d1c":"code","e86ffe5a":"code","4b9778e8":"code","3456e302":"code","5538f33f":"code","61f1a07c":"code","0cdd5fef":"code","fac0a336":"code","06ec91dd":"code","34226df8":"code","41094a5c":"code","71f57bd4":"code","abe38980":"code","ca3adcd5":"code","7f044916":"code","0dbf03ea":"code","e0b3f4f5":"code","ad3c7e5c":"code","7dce5c9b":"code","0634aeaf":"code","61bc8b42":"code","324866d2":"code","b9ff9872":"code","a7292740":"code","bb382a54":"code","990c9d8a":"code","7dfe8a93":"code","0a1a604d":"code","0cfd3b46":"code","5296bb20":"code","85aef210":"code","b0cfb946":"code","dccc336a":"code","856cc81c":"code","2a56498c":"code","b2986b03":"code","2438ab5d":"code","4ce48aa9":"code","65622c77":"code","854e538d":"code","e41fe887":"code","6c7d51d4":"code","2321d2b8":"code","ef40c75f":"code","81c02943":"code","47e40544":"code","2535a0e2":"code","af8a0592":"code","575e514f":"code","a9f424b8":"markdown","dc4199b1":"markdown","be1e9ddd":"markdown","c0b5efe8":"markdown","94edd927":"markdown","59fa907c":"markdown","d0d0a501":"markdown","948b6b18":"markdown","e4402a0d":"markdown","659fcf9c":"markdown","64501c40":"markdown","c851c3ce":"markdown","a241a834":"markdown","b99454db":"markdown","345b6ae3":"markdown","99eb6210":"markdown","9943290d":"markdown","3690eb22":"markdown","d234b314":"markdown","925aadbe":"markdown","c134881a":"markdown","a162d954":"markdown","6cc79ef8":"markdown","fe7b4060":"markdown","53bfbf53":"markdown","f748bd1d":"markdown","85a5e762":"markdown","42bdafb3":"markdown","65386da7":"markdown","c79301eb":"markdown","ccb0e868":"markdown","c469a81f":"markdown","c6a8074c":"markdown","d83a729a":"markdown","c1c691c3":"markdown","40f09eec":"markdown","7ad4e53c":"markdown","f34941c5":"markdown","efa50508":"markdown","85a97ef1":"markdown","f2bbd0d6":"markdown","b4310b1a":"markdown","216ca5f2":"markdown","0833bc4e":"markdown","3496f9a6":"markdown","a33673f5":"markdown","627a7763":"markdown","8f423531":"markdown","beb493c6":"markdown","9d3863a4":"markdown","6439bb8c":"markdown","1b5d0fe8":"markdown","3044cdae":"markdown","8efcd2ec":"markdown"},"source":{"79935e52":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","37544d1f":"df=pd.read_csv('..\/input\/true-value-cars-dataset\/train.csv')\n","943bbffe":"df.head()","7e54d01f":"df.shape #to know rows and columns","2f76db2d":"df.columns #column names","56fd3501":"df['car_name'].value_counts()","505000b8":"df['city'].value_counts()","607fd592":"df['sale_price'].value_counts()","7d4feebc":"df.info() #info about each column how many nullvalues and data type of each column","c276161f":"df.nunique(axis=0) #no of unique values in each column","c8924ac9":"df.duplicated().sum() #no duplicate values","6f0efd97":"df.isnull().sum() #checking for null values","6e1dee7c":"corr=df.corr() #to find correlation\ncorr","8044c2fb":"corr = df.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(13,7))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","010e5f17":"def remove(df):\n  df1=df.drop(['id','emi_starts_from','original_price','broker_quote'],axis=1)\n  return df1\ndf1=remove(df)","944da36f":"df1","437efd89":"df1.head()","ca248ef7":"df1.isnull().sum()","010cfe65":"df1.shape","54e24d4e":"df1.info()","f444091a":"sns.heatmap(df1.isnull(),yticklabels=False,cbar=False)","0b758332":"df1.dtypes","a5f6987b":"for i in df.columns:\n  print(i)\n  print(df[i].unique())\n  print(\"_____________________________________________________________________\")\n  #printing unique values of each column","631a7593":"category_columns=df1.select_dtypes(include=['object']).columns.tolist()\ninteger_columns=df1.select_dtypes(include=['int64','float64']).columns.tolist()\n\nfor column in df1:\n    if df1[column].isnull().any():\n        if(column in category_columns):\n            df1[column]=df1[column].fillna(df1[column].mode()[0])\n        else:\n            df1[column]=df1[column].fillna(df1[column].mean)","c36cf738":"df1.head()","2f8e97c6":"df1.isnull().sum()","3de95d15":"sns.heatmap(df1.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","eb5c06f8":"df1.describe() #gives statistical description about our numerical data","9b4a3d91":"df1.describe(include='object') #description about categorical data","8f2b90db":"#finding correlation again\ncorr = df1.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(13,7))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","0ecaa5f3":"for i in integer_columns:\n  plt.figure()\n  sns.boxplot(x=df1[i])","1ad1c3ef":"max_km=df1['kms_run'].max()\nmax_km","9f9b7df6":"df1=df1[df1['kms_run']<max_km]\ndf1.shape","cbfb0fc1":"df1=df1[df1['sale_price']<2500000]\ndf1.shape","ae6d08d2":"df1=df1[df1['times_viewed']<20000]\ndf1.shape","10e72a0f":"df1=df1[df1['yr_mfr']>2005]\ndf1.shape","81775f9e":"#  df1=df1[df1['broker_quote']<2500000]\n# df1.shape","c3537403":"# def outlinefree(dataCol):\n#     sorted(dataCol)\n#         # getting percentile 25 and 27 that will help us for getting IQR (interquartile range)\n#     Q1,Q3 = np.percentile(dataCol,[25,75])\n#         # getting IQR (interquartile range)\n#     IQR = Q3-Q1\n#         # getting Lower range error\n#     LowerRange = Q1-(1.5 * IQR)\n#         # getting upper range error\n#     UpperRange = Q3+(1.5 * IQR)\n#         # return Lower range and upper range.\n#     return LowerRange,UpperRange","16b4ad17":"# lwyr_mfr,upyr_mfr = outlinefree(df1['yr_mfr'])\n# lwkms_run,upkms_run = outlinefree(df1['kms_run'])\n# lwsale_price,upsale_price = outlinefree(df1['sale_price'])\n# lwtimes_viewed,uptimes_viewed = outlinefree(df1['times_viewed'])\n# lwttl_own,upttl_own = outlinefree(df1['total_owners'])\n# lwbdwnpy,updwnpy = outlinefree(df1['booking_down_pymnt'])","a7b2b7f4":"# df1['yr_mfr'].replace(list(df1[df1['yr_mfr'] < lwyr_mfr].yr_mfr) ,lwyr_mfr,inplace=True)\n# df1['kms_run'].replace(list(df1[df1['kms_run'] > upkms_run].kms_run) ,upkms_run,inplace=True)\n# df1['sale_price'].replace(list(df1[df1['sale_price'] > upsale_price].sale_price) ,upsale_price,inplace=True)\n# df1['times_viewed'].replace(list(df1[df1['times_viewed'] > uptimes_viewed].times_viewed) ,uptimes_viewed,inplace=True)\n# #df1['total_owners'].replace(list(df1[df1['total_owners'] > upttl_own].total_owners) ,upttl_own,inplace=True)\n# df1['booking_down_pymnt'].replace(list(df1[df1['booking_down_pymnt'] > updwnpy].booking_down_pymnt) ,updwnpy,inplace=True)","0424c3fc":"for i in integer_columns:\n  plt.figure()\n  sns.boxplot(x=df1[i])","7a3cc71e":"for col1 in integer_columns:\n  sns.FacetGrid(df1,height=5).map(sns.distplot,col1).add_legend()","1bcd0af0":"for i in integer_columns:\n  plt.figure()\n  sns.displot(df1[i])","b9ccd1d7":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.lineplot(x='kms_run',y='sale_price',data=df1)","a6ed9960":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.lineplot(x='times_viewed',y='sale_price',data=df1)\n\n","9238f6de":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'white','axes.grid': True,'xtick.labelsize':16})\nsns.lineplot(x='yr_mfr',y='sale_price',data=df1,hue='transmission')","86054c8e":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'white','axes.grid': False,'xtick.labelsize':16})\nsns.lineplot(x='yr_mfr',y='sale_price',data=df,hue='body_type')","14d5a247":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.lineplot(x='total_owners',y='sale_price',data=df1)","590b15cb":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.countplot(df['body_type'])","44375018":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.barplot(df['body_type'],df['sale_price'])","bad90d9a":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.barplot(df['transmission'],df['sale_price'])","5ff1ebee":"plt.figure(figsize=(12,8))\nsns.set(rc={'axes.facecolor':'#283747','axes.grid': True,'xtick.labelsize':16})\nsns.barplot(df['city'],df['sale_price'])\nplt.xticks(rotation=45)","71ab26e7":"#sns.pairplot(df1,kind='kde')","0ac91ff6":"df_test=pd.read_csv('..\/input\/true-value-cars-dataset\/test.csv')","a1df10b7":"df_test.shape","c95058fb":"df_test.head()","dc956bad":"df_test.isnull().sum()","6a6190b1":"df_test1=remove(df_test)","68da1d1c":"df_test1.shape","e86ffe5a":"df_test1.head()","4b9778e8":"cateogry_columns=df_test1.select_dtypes(include=['object']).columns.tolist()\ninteger_columns=df_test1.select_dtypes(include=['int64','float64']).columns.tolist()\n\nfor column in df_test1:\n    if df_test1[column].isnull().any():\n        if(column in cateogry_columns):\n            df_test1[column]=df_test1[column].fillna(df_test1[column].mode()[0])\n        else:\n            df_test1[column]=df_test1[column].fillna(df_test1[column].mean)","3456e302":"df_test1.isnull().sum()","5538f33f":"X_train=df1.drop('sale_price',axis=1)\nY_train=df1['sale_price'].values","61f1a07c":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\n# get numeric data\nnum_d = X_train.select_dtypes(exclude=['object'])\n\n# update the cols with their normalized values\nX_train[num_d.columns] = sc.fit_transform(num_d)\n\n","0cdd5fef":"X_train.head()","fac0a336":"X_train.nunique()","06ec91dd":"# Import label encoder\nfrom sklearn import preprocessing\n  \n# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\n  \n# Encode labels in categorical_column \nfor i in category_columns:\n  X_train[i]= label_encoder.fit_transform(X_train[i])\n  \n","34226df8":"X_train.head()","41094a5c":"X_train1=X_train.values","71f57bd4":"X_train1","abe38980":"X_test=df_test1.drop('sale_price',axis=1)\nY_test=df_test1['sale_price'].values","ca3adcd5":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\n# get numeric data\nnum_d = X_test.select_dtypes(exclude=['object'])\n\n# update the cols with their normalized values\nX_test[num_d.columns] = sc.fit_transform(num_d)\n\n","7f044916":"# Import label encoder\nfrom sklearn import preprocessing\n  \n# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\n  \n# Encode labels in categorical_column \nfor i in category_columns:\n  X_test[i]= label_encoder.fit_transform(X_test[i])\n  \n","0dbf03ea":"X_test.head()","e0b3f4f5":"X_test1=X_test.values\nX_test1","ad3c7e5c":"Y_test","7dce5c9b":"Y_train","0634aeaf":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train1,Y_train)","61bc8b42":"y_pred=lr.predict(X_test1)","324866d2":"tsc1=lr.score(X_test1,Y_test)\ntsc1","b9ff9872":"sc1=lr.score(X_train1,Y_train)\nsc1","a7292740":"from sklearn.linear_model import Lasso\nlasso_reg = Lasso()\nlasso_reg.fit(X_train1,Y_train)","bb382a54":"y_pred2=lasso_reg.predict(X_test1)","990c9d8a":"tsc2=lasso_reg.score(X_train1,Y_train)\ntsc2","7dfe8a93":"sc2=lasso_reg.score(X_test1,Y_test)\nsc2","0a1a604d":"from sklearn.linear_model import Ridge\nridge_reg=Ridge()\nridge_reg.fit(X_train1,Y_train)","0cfd3b46":"y_pred3=ridge_reg.predict(X_test1)","5296bb20":"tsc3=ridge_reg.score(X_train1,Y_train)\ntsc3","85aef210":"sc3=ridge_reg.score(X_test1,Y_test)\nsc3","b0cfb946":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 20, random_state = 0)\nregressor.fit(X_train1, Y_train)","dccc336a":"y_pred4=regressor.predict(X_test1)","856cc81c":"tsc4=regressor.score(X_train1,Y_train)\ntsc4","2a56498c":"sc4=regressor.score(X_test1,Y_test)\nsc4","b2986b03":"from xgboost import XGBRegressor\nxgb = XGBRegressor()\nxgb.fit(X_train1, Y_train)","2438ab5d":"y_pred5=xgb.predict(X_test1)","4ce48aa9":"tsc5=regressor.score(X_train1,Y_train)\ntsc5","65622c77":"sc5=regressor.score(X_test1,Y_test)\nsc5","854e538d":"from sklearn.metrics import mean_squared_error,mean_absolute_error\ndef metric(y_test,y_predict):\n    mae=mean_absolute_error(y_test,y_predict) #mean_absolute_error\n    mse=mean_squared_error(y_test,y_predict) #mean_squared_error\n    rmse=mean_squared_error(y_test,y_predict,squared=False)\n    return [mae,mse,rmse]","e41fe887":"linearregressoin=metric(Y_test,y_pred)\nlinearregressoin.append(sc1)\nlinearregressoin.append(tsc1)\nlinearregressoin","6c7d51d4":"lassoregression=metric(Y_test,y_pred2)\nlassoregression.append(sc2)\nlassoregression.append(tsc2)\nlassoregression","2321d2b8":"Ridgeregression=metric(Y_test,y_pred3)\nRidgeregression.append(sc3)\nRidgeregression.append(tsc3)\nRidgeregression","ef40c75f":"RandomForestRegressor=metric(Y_test,y_pred4)\nRandomForestRegressor.append(sc4)\nRandomForestRegressor.append(tsc4)\nRandomForestRegressor","81c02943":"XGBRegressor=metric(Y_test,y_pred5)\nXGBRegressor.append(sc5)\nXGBRegressor.append(tsc5)\nXGBRegressor","47e40544":"algorithms=['Linear Regression','Lasso Regression','Ridge Regression','Random Forest Regression','XGBoost Regression']\neval=pd.DataFrame([linearregressoin,lassoregression,Ridgeregression,RandomForestRegressor,XGBRegressor],columns=['Mean Squared Error','Mean Absolute Error','Root Mean SquareError','Test Score','Train Score'],index=algorithms)\neval","2535a0e2":"score=[]\nfor i in range(5):\n  score.append(eval.iloc[:,3][i])\nscore","af8a0592":"\nplt.figure(figsize=(15,7))\nplt.scatter(algorithms,score,linewidth=2,s=50,marker='s',edgecolors='green')\n\nplt.xlabel(\"Regression Models\") \nplt.ylabel(\"Scores\") \nplt.title(\"Algorithm Comparison\")\nplt.show()\ndf=pd.DataFrame(score,index=algorithms,columns=['score'])\ndf","575e514f":"algo=['lr','lasso','ridge','rfr','xgbr']\nind = np.arange(len(score))  # the x locations for the groups\nwidth = 0.35  # the width of the bars\n\nfig,ax = plt.subplots()\n\n\nrects1 = ax.bar(ind - width\/2, eval['Mean Squared Error'], width, \n                label='mse')\nrects2 = ax.bar(ind + width\/2, eval['Root Mean SquareError'], width, \n                label='rmse')\n\nax.set_ylabel('Scores')\nax.set_title('Algorithm performance')\nax.set_xticks(ind)\nax.set_xticklabels(algo)\nax.legend()\n\n\ndef autolabel(rects, xpos='center'):\n   \n\n    ha = {'center': 'center', 'right': 'left', 'left': 'right'}\n    offset = {'center': 0, 'right': 1, 'left': -1}\n\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(offset[xpos]*3, 3),  # use 3 points offset\n                    textcoords=\"offset points\",  # in both directions\n                    ha=ha[xpos], va='bottom')\n\n\n# autolabel(rects1, \"left\")\n# autolabel(rects2, \"right\")\n\n\nfig.tight_layout()\n\nplt.show()\n\ndf=pd.DataFrame([eval['Mean Squared Error'],eval['Root Mean SquareError']],columns=algorithms,index=['mse','rmse'])\ndf\n","a9f424b8":"**From the above  figure we can observe the variability in prices of cars of two transmission categories in relation to their total_owners.We can see if total_owners are more the price of that car is generally less**","dc4199b1":"# E) XGBOOST Regressor","be1e9ddd":"# Observation from comparing model performances\n\n \n*   From these above results it would suggest that Linear Regression is perhaps worthy of further study on this problem.\n*   Among all the methods Linear Regression is the best of all which gives best results we can observe it's score (0.9999999999969837) and also We can observe from second graph that among all Linear Regression has lowest mse and rmse that means less error\n*   So we can use **Linear Regression** for best results\n\n\n\n\n","c0b5efe8":"# A) Linear Regression","94edd927":"**From above graph we can say that there is not much relationship between kms_run and sale_price**","59fa907c":"# C) Ridge Regression","d0d0a501":"**From the above  figure we can observe the variation in prices of cars of different body types in relation to their manufacturing year. **","948b6b18":"**We can observe that mean for automatic cars  is more and its value is 700000 . Inter quartile range is 670000-750000**","e4402a0d":"**From above graph we can say that there is not much relationship between times_viewed and sale_price**","659fcf9c":"# **16.Conclusion**","64501c40":"The value of a car drops right from the moment it is bought and the depreciation continues with each passing year.\n\nIn fact, in the first year itself, the value of a car decreases by 20 percent of its initial value.\n\nThe make and model of a car, total kilometers driven, overall condition of the vehicle and various other factors further affect the car\u2019s resale value.\n\nWe can observe from above that sale_price,emi_starts_from,booking_down_pymnt original_price ,broker_quote are highly correlated and sale_price is our target variable\nHere i am removing above mentioned columns and keeping booking_down_payment as it is\nI am removing original_price also because as we observed above it has 2824 null values.\n\nTotal Five Techniques were used in this study.\n\n1.   Linear Regression\n2.   Lasso Regression\n3.   Ridge Regression\n4.   Random Forest Regression\n5.   XGBoost Regression\n\nBelow are the results observed in all the Five models\n\n**Linear Regression**\n\n\n*   Mean Squared Error = 26448.012383\t\t\t\t\n\t  \n*    Mean Absolute Error = 1.771641e+09\n    \n*    Root Mean SquareError = 42090.863694\n    \n*    Test Score = 0.999997\n  \t\n*    Train Score = 0.981738\n\n**Lasso Regression**\n\t\t\t\t\n\n*   Mean Squared Error = 25923.515013\t\t\n\t  \n*    Mean Absolute Error = 1.789480e+09\n    \n*    Root Mean SquareError = 42302.240195\n    \n*    Test Score = 0.981554\n  \t\n*    Train Score = 0.999993\n\t\t\t\t\n**Ridge Regression**\n\t\t\t\t\n\n*   Mean Squared Error = 26446.516419\n\t  \n*    Mean Absolute Error = 1.775618e+09\n    \n*    Root Mean SquareError = 42138.083184\n    \n*    Test Score = 0.981697\n  \t\n*    Train Score = 0.9999999456\n\n**Random Forest Regression**\n\t\t\t\t\t\t\t\n\n*   Mean Squared Error = 28538.731150\n\t  \n*    Mean Absolute Error = 5.407858e+09\n    \n*    Root Mean SquareError = 73538.138936\n    \n*    Test Score = 0.944255\n  \t\n*    Train Score = 0.999924\t\n\n**XGBoost Regression**\n\t\t\t\t\t\t\t\t\t\t\t\n\n*   Mean Squared Error = 28202.355617\n\t  \n*    Mean Absolute Error = 4.607117e+09\n    \n*    Root Mean SquareError = 67875.749496\n    \n*    Test Score = 0.944255\n  \t\n*    Train Score = 0.999924\n\nFrom these above results it would suggest that Linear Regression is perhaps worthy of further study on this problem.\n\nAmong all the methods Linear Regression is the best of all which gives best results we can observe it's score (0.9999999999969837) and also We can observe from second graph that among all Linear Regression has lowest mse and rmse that means less error.\n\nI prefer Linear Regression for better predictions\n\nso we can choose **Linear Regression**  as our final model which will predict best results\n\n\n\n\n\n","c851c3ce":"**Here i am replacing object type column missing values with their mode and numeric type columns with their mean**","a241a834":"# **CONTENT**\n\n\n# 1.   Context\n# 2.  Problem Statement\n# 3. Data Description\n# 4. Importing Libraries\n# 5. Loading Train data\n# 6. Getting information about Data\n# 7. Correlation\n# 8.Handling missing values\n# 9.Handling Outliers\n# 10.Exploratory Data Analysis\n# 11.Loading and Handling Test Data\n# 12.Transformation for feature variables\n# 13.Training our Models\n\n\n\n\n*  Linear Regression\n*  Lasso Regression\n*  Ridge Regression\n*  Random Forest Regression\n*  XGBoost Regression\n\n# 14.Model Evaluation\n# 15.Comparing Model Performances\n# 16.Conclusion\n\n\n","b99454db":"**From boxplot observations we can take times_viewed < 20000 only**","345b6ae3":"# 3. Data Description","99eb6210":"**FOr Testing data**","9943290d":"**Handling null values in test data**","3690eb22":"# Dataset link:[True Value Cars](https:\/\/www.kaggle.com\/focusedmonk\/true-value-cars-dataset)","d234b314":"**From the above  figure we can observe the variation in prices of cars of two transmission categories in relation to their manufacturing year. **","925aadbe":"# 6. Getting information about Data","c134881a":"\n\n# ***Used car price prediction using Machine Learning.***","a162d954":"# 11.Loading and Handling Test Data","6cc79ef8":"The prices of new cars in the industry is fixed by the manufacturer with some additional costs\nincurred by the Government in the form of taxes. So, customers buying a new car can be\nassured of the money they invest to be worthy. But due to the increased price of new cars and\nthe inability of customers to buy new cars due to the lack of funds, used cars sales are on a\nglobal increase (Pal, Arora and Palakurthy, 2018). There is a need for a used car price\nprediction system to effectively determine the worthiness of the car using a variety of features.\nEven though there are websites that offers this service, their prediction method may not be the\nbest. Besides, different models and systems may contribute on predicting power for a used car\u2019s\nactual market value. It is important to know their actual market value while both buying and\nselling.\n","fe7b4060":"**From boxplot observations we can take sales_price < 2500000 only**","53bfbf53":"**For Training Data**\n\n**Standard Scaler for numerical data**","f748bd1d":"# 9.Handling Outliers","85a5e762":"# 7. Correlation","42bdafb3":"**We removed some columns in train data so we have to remove them in test data also**","65386da7":"**We can observe that mean for luxury suv are is highest and around 1.05 . Inter quartile range is 1.0-1.2**","c79301eb":"# 1.  Context\n\n**What determines the price of used cars?**\n\nThe value of a car drops right from the moment it is bought and the depreciation continues with each passing year.\n\nIn fact, in the first year itself, the value of a car decreases by 20 percent of its initial value.\n\nThe make and model of a car, total kilometers driven, overall condition of the vehicle and various other factors further affect the car\u2019s resale value.","ccb0e868":"**No duplicate records**","c469a81f":"# 14.Model Evaluation","c6a8074c":"**Here original_price column contains more null values so we can decide after correaltion analysis whether to  remove it or not**","d83a729a":"# 2.Problem Statement","c1c691c3":"**We can observe from above box plots that we have to handle outliers in kms_run,sale_price and times_viewed column .**\n\n**As sales_price and booking_down_payment are highly correlated handling one column will reflect on another**","40f09eec":"**In our data body_type,transmission,source,car_availability,car_rating,ad_created_on,fitness_certificate,registered_city,registered_state contains null values our next step is to handle missing data**","7ad4e53c":"# 5. Loading Train data","f34941c5":"# D) Random Forest Regression","efa50508":"**we can observe that the cars with body type 'hatchback' are maximum.**","85a97ef1":"# 12.Transformation for feature variables","f2bbd0d6":"# 4. Importing Libraries","b4310b1a":"# B) Lasso Regression","216ca5f2":" **We can observe from above that sale_price,emi_starts_from,booking_down_pymnt\n original_price ,broker_quote are highly correlated and \n sale_price is our target variable\nThat means emi_starts_from , booking_down_payment,original_price,broker_qoute effect more our target variable**\n\n **So we can keep any one of them and drop remaining columns**\n\n **Here i am removing above mentioned columns and keeping booking_down_payment as it is\n I am removing original_price also because as we observed above it has 2824 null values**","0833bc4e":"**We can observe that mean for cars from chennai  is highest and around 490000 . Inter quartile range is 1.0-1.2 470000-520000**","3496f9a6":"**Taking kms_run upto max value**","a33673f5":"**We can Observe that there is some skewness in our data**","627a7763":"# 15.Comparing Model Performances","8f423531":"This dataset contains over 7000+ true value cars data across all major tier 1 and tier 2 cities in India which is ready to accept a different owner. The information includes car manufacturer, model, fuel type, year of manufacture to mention a few. \n\nContent:\n\n**id**: Unique ID for every car\n\n**car_name**: Name of a car\n\n**yr_mfr**: Car manufactured year\n\n**fuel_type**: Type of fuel car runs on\n\n**kms_run**: Number of kilometers run\n\n**body_type**: Car body type. Ex: Sedan, hatchback etc.\n\n**transmission**: Type of transmission. Ex: Manual, Automatic\n\n**variant**: Car variant\n\n**make**: Car manufacturing company\n\n**model**: Car model name\n\n**is_hot**: Is it a top selling car? Indicates the demand for a car.\n\n**car_availability**: Car availability status\n\n**total_owners**: How many owners have already owned it?\n\n**car_rating**: How good is the car to buy?\n\n**fitness_certificate**: Does the car have fitness certificate?\n\n**source**: Method of selling a car\n\n**registered_city**: City where the car is registered\n\n**registered_state**: State where the car is registered\n\n**rto**: Regional Transport Office where the car is registered\n\n**city**: City where the car is being sold\n\n**times_viewed**: Number of times people have shown interest for the car\n\n**assured_buy**: Broker assured car\n\n**broker_quote**: Price quoted for previous owner (in INR)\n\n**original_price**: Original price of a car (in INR)\n\n**emi_starts_from**: Opting for EMI? Monthly EMI for the car starts from! (in \nINR)\n\n**booking_down_pymnt**: Decided to buy? Please pay the down payment (in INR)\n\n**ad_created_on**: Listed date for selling a car\n\n**reserved**: Car reserved status\n\n**warranty_avail**: Warranty availability status\n\n**sale_price**: Selling price of a car (in INR)'''","beb493c6":"# 8.Handling missing values","9d3863a4":"# **AUTHOR : VARIGONDA SAI NIRMAL VIGNU**\n","6439bb8c":"**value count**","1b5d0fe8":"# **13.Training our Models**","3044cdae":"# 10.Exploratory Data Analysis","8efcd2ec":" **And also removing Id column because it doesn't effect our target column**"}}