{"cell_type":{"fd5ea762":"code","daeed6ab":"code","c5f18a53":"code","f8f8463e":"code","207de16f":"code","402566c4":"code","7dc77d2e":"code","df8a1490":"code","f6802845":"code","b38fd885":"code","cb36b1e9":"code","146588cc":"code","b03e4b34":"code","86f6d4a2":"code","2af2ec33":"code","ef886b62":"code","cda5fad9":"code","3d9581c1":"code","1f16dc22":"code","166045f7":"markdown","8dc9fa30":"markdown","86d1e10d":"markdown","873800a5":"markdown","0448b0fc":"markdown","26a13a15":"markdown","2b042460":"markdown","2f389162":"markdown","a5c79676":"markdown","ecd10d5b":"markdown","d5e1d5af":"markdown","6b25f2bf":"markdown","b9af531a":"markdown","a85d5562":"markdown"},"source":{"fd5ea762":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns # visualization lib\n\nimport random \n\n# from IPython.core.interactiveshell import InteractiveShell  \n# InteractiveShell.ast_node_interactivity = \"all\" # printing all the line of the cell\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","daeed6ab":"#Import  Data \n\n\ndf =sns.load_dataset('tips')\nprint(f\"{df.shape[0]}rows and {df.shape[1]} columns\")\ndf.head()","c5f18a53":"#most common way to do Filter in pandas is\ndf.loc[(df['tip']>6)  & (df['total_bill'] >=30)] \n\n#elegant method\ndf.query(\"tip >6 & total_bill>=30\")\n\n# reference global variable name with @\nmedian_tip = df['tip'].median()\ndisplay(df.query(\"tip>@median_tip\").head())\n\n# wrap column name containing . with backtick: `\ndf.rename(columns={'total_bill':'total.bill'}, inplace=True)\ndisplay(df.query(\"`total.bill`<20\").head())\ndf.rename(columns={'total.bill':'total_bill'}, inplace=True)\n\n# wrap string condition with single quotes (this is what I like)\ndisplay(df.query(\"day=='Sat'\").head())\n# could also do it the other way around (i.e. 'day==\"Sat\"')","f8f8463e":"display(df.head())\ndisplay(df.tail())\n\n# In the last line, display() is redundant but it is there for consistency. \n# It works the same way if we take out display() from the last line:\n\ndisplay(df.head())\ndf.tail()","207de16f":"display(df.sort_values(by=['total_bill', 'tip'], ascending=[True, False]).head())\ndf.sort_values(by=['total_bill', 'tip'],ascending =[1,0]).head()","402566c4":"display(df.nsmallest(5, 'total_bill'))\n\n#the above code is equivalent to \ndf.sort_values(by='total_bill').head()","7dc77d2e":"display(df.nlargest(5, 'total_bill'))\ndisplay(df.sort_values(by='total_bill', ascending=False).head())","df8a1490":"#let\u2019s check out the column types:\ndf.info()","f6802845":"df.describe(include='all')","b38fd885":"display(df.describe(include=['category'])) # categorical types\ndisplay(df.describe(include=['number'])) # numerical types","cb36b1e9":"display(df.describe(exclude=['number']))","146588cc":"print(f\"{pd.options.display.max_columns} columns\")\nprint(f\"{pd.options.display.max_rows} rows\")","b03e4b34":"pd.options.display.max_columns = None\npd.options.display.max_rows = None","86f6d4a2":"# This may or may not be a good idea depending on how big your dataframe is.\n# We can also set these options to a number of our choice:\npd.options.display.max_columns = 50\npd.options.display.max_rows = 100","2af2ec33":"pd.options.display.float_format = '{:.4f}'.format # 4 decimal places","ef886b62":"import random\n\n[[random.randint(0, 10) for _ in range(random.randint(3, 5))] for _ in range(10)]","cda5fad9":"[random.randint(0, 10) for _ in range(random.randint(3, 5))]","3d9581c1":"n = 10\ndf = pd.DataFrame(\n    {\n        \"list_col\": [[random.randint(0, 10) for _ in range(random.randint(3, 5))] for _ in range(10)],\n    }\n)\ndisplay(df)\ndf.shape # output","1f16dc22":"df = df.explode(\"list_col\")\ndisplay(df)\ndf.shape #output","166045f7":"### \ud83d\udccd Tip #1: Filter with query()\n##### **Filter with query()**\n\nHere you can see normal style of filtering is too verbose: \n\n- each condition requires reference to the under lying dataframe and paranthesis wrapping if there are multiple conditions\n\nHow to achieve the same using more elegant code: query()\n","8dc9fa30":"### **\ud83d\udccd Tip #2: Show multiple dataframes with display()","86d1e10d":"### \ud83d\udccd Tip #3a: Use a list of booleans when sorting by multiple columns\n\nThe following code will first sort the dataframe by `total_bill` in ascending order then sort by `tip` in descending order\n\n```\ndf.sort_values(by=[\u2018total_bill\u2019, \u2018tip\u2019], ascending=[True, False]).head()\n\ndf.sort_values(by=[\u2018total_bill\u2019, \u2018tip\u2019],ascending =[1,0]).head()\n\n```","873800a5":"In our dataframe, we have numerical and categorical columns. Let\u2019s see summary stats for all columns by adding include='all':","0448b0fc":"If we had both strings and categorical columns and wished to display the summary stats for both in one table, we can use either: include=['category', 'object'] or exclude=['number'].","26a13a15":"### References\nhttps:\/\/towardsdatascience.com\/5-tips-for-pandas-users-e73681d16d17","2b042460":"Using nsmallest(), we could check out 5 records with the smallest total bill like this:","2f389162":"### Another intresting feature of pandas for the day!!\n```\npd.explode()\n```","a5c79676":"### \ud83d\udccd Tip #5: Update default display settings","ecd10d5b":"### \ud83d\udccd Tip #3b: Use nsmallest() or nlargest()\n\nUsing nsmallest(), we could check out 5 records with the smallest total bill like this:","d5e1d5af":"This is cool but a little messy. Let\u2019s show the summary stats by column types separately with the following script:","6b25f2bf":"### \ud83d\udccd Tip #4. Customise describe()\n\ndf.describe(): - This shows summary stats for numerical columns. But we can get more than that by specifying its arguments.","b9af531a":"This means if we try to display a dataframe with more than 20 columns, we only get to see the first 10 and final 10 (total of 20 columns shown) while the rest will be truncated as three dots. The same logic applies to rows. Often, we may want to see more than these maximums. If we want to change this behaviour, we can do so like this:","a85d5562":"Secondly, depending on the scale of the numerical variables you are working on, \nyou may sometimes encounter scientific notations for very large or very small numbers \nwhen working with pandas. If you find it easier to read numbers as 1200 and 0.012 compared \nto 1.2e3 and 1.2e-2 respectively, you are likely to find this line of code handy:"}}