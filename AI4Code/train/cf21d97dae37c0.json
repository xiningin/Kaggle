{"cell_type":{"6dc3b960":"code","68653c0e":"code","95ea5d6a":"code","821109dd":"code","3fc452cf":"code","53c0b1ce":"code","e905d4fb":"code","4abe38b5":"code","3f5c7a9e":"code","af40216f":"code","6e5e98c2":"code","0f48f9fe":"code","02c6ae3f":"code","d28c1c9f":"markdown","3d898899":"markdown","c03c1618":"markdown","5e15c613":"markdown"},"source":{"6dc3b960":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","68653c0e":"data = pd.read_csv(\"..\/input\/housingdata.csv\", header=None)\n\ntrain = data #.sample(frac=1)\n\n#test  = data.loc[~data.index.isin(train.index)]\n#train.reset_index(drop=True, inplace = True)\n#test.reset_index(drop=True, inplace = True)\n\nX = train.iloc[:,0:13]   \nY = train.iloc[:,13]\n ","95ea5d6a":"data.head()","821109dd":"X.head()","3fc452cf":"Y.head()","53c0b1ce":"# define base model\ndef baseline_model():\n\t# create model\n\tmodel = Sequential()\n\tmodel.add(Dense(13, input_dim=13, kernel_initializer='normal', activation='relu'))\n\tmodel.add(Dense(1, kernel_initializer='normal'))\n\t# Compile model\n\tmodel.compile(loss='mean_squared_error', optimizer='adam')\n\treturn model","e905d4fb":"# fix random seed for reproducibility\nseed = 7\nnp.random.seed(seed)\n# evaluate model with standardized dataset\nestimator = KerasRegressor(build_fn=baseline_model, nb_epoch=100, batch_size=5, verbose=0)","4abe38b5":"kfold = KFold(n_splits=10, random_state=seed)\nresults = cross_val_score(estimator, X.values, Y.values, cv=kfold, n_jobs=1)\nprint(\"Results: %.2f (%.2f) MSE\" % (results.mean(), results.std()))","3f5c7a9e":"# evaluate model with standardized dataset\nnp.random.seed(seed)\nestimators = []\nestimators.append(('standardize', StandardScaler()))\nestimators.append(('mlp', KerasRegressor(build_fn=baseline_model, epochs=50, batch_size=5, verbose=0)))\npipeline = Pipeline(estimators)\nkfold = KFold(n_splits=10, random_state=seed)\nresults = cross_val_score(pipeline, X, Y, cv=kfold, n_jobs=1)\nprint(\"Standardized: %.2f (%.2f) MSE\" % (results.mean(), results.std()))","af40216f":"# define the model\ndef larger_model():\n\t# create model\n\tmodel = Sequential()\n\tmodel.add(Dense(13, input_dim=13, kernel_initializer='normal', activation='relu'))\n\tmodel.add(Dense(6, kernel_initializer='normal', activation='relu'))\n\tmodel.add(Dense(1, kernel_initializer='normal'))\n\t# Compile model\n\tmodel.compile(loss='mean_squared_error', optimizer='adam')\n\treturn model","6e5e98c2":"np.random.seed(seed)\nestimators = []\nestimators.append(('standardize', StandardScaler()))\nestimators.append(('mlp', KerasRegressor(build_fn=larger_model, epochs=50, batch_size=5, verbose=0)))\npipeline = Pipeline(estimators)\nkfold = KFold(n_splits=10, random_state=seed)\nresults = cross_val_score(pipeline, X, Y, cv=kfold, n_jobs=1)\nprint(\"Larger: %.2f (%.2f) MSE\" % (results.mean(), results.std()))","0f48f9fe":"# define wider model\ndef wider_model():\n\t# create model\n\tmodel = Sequential()\n\tmodel.add(Dense(20, input_dim=13, kernel_initializer='normal', activation='relu'))\n\tmodel.add(Dense(1, kernel_initializer='normal'))\n\t# Compile model\n\tmodel.compile(loss='mean_squared_error', optimizer='adam')\n\treturn model","02c6ae3f":"np.random.seed(seed)\nestimators = []\nestimators.append(('standardize', StandardScaler()))\nestimators.append(('mlp', KerasRegressor(build_fn=wider_model, epochs=100, batch_size=5, verbose=0)))\npipeline = Pipeline(estimators)\nkfold = KFold(n_splits=10, random_state=seed)\nresults = cross_val_score(pipeline, X, Y, cv=kfold, n_jobs=1)\nprint(\"Wider: %.2f (%.2f) MSE\" % (results.mean(), results.std()))","d28c1c9f":"# 3. Modeling The Standardized Dataset","3d898899":"# 4. Evaluate a Deeper Network Topology","c03c1618":"# 5. Evaluate a Wider Network Topology","5e15c613":"# 2. Develop a Baseline Neural Network Model"}}