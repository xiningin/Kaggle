{"cell_type":{"a786db3e":"code","5608dfc3":"code","36a02397":"code","8e87cb7d":"code","e2640e95":"code","e2ba0ebb":"code","203314cd":"code","9190a4bf":"code","5e8711d8":"code","ec531f8d":"code","96dccb83":"code","f75000d8":"code","b17c3a66":"code","ce7cd209":"code","0cf681d2":"code","20332621":"code","4af5cf11":"code","355ab785":"code","5e8bc0e5":"code","192fde51":"code","a3478d06":"code","47f5776e":"code","bc10fd70":"code","015526ca":"code","683f04c5":"code","1da88159":"code","ec772ca0":"code","ac0fc836":"code","f9843460":"code","e89b582f":"code","43ddaefc":"code","5d29b963":"code","8e746018":"code","2ae5a323":"code","e8279460":"code","f9faeeb0":"code","b62b98b0":"code","661b7113":"code","e0e1fde8":"code","561c6e6f":"code","b7b522d0":"code","867b336c":"code","ab9d85d0":"code","16cbefc0":"code","3d0c2470":"code","8b20f833":"code","dc96c82d":"code","73fe4093":"code","087198b5":"code","5d8c272b":"code","fe07c7f1":"code","333e2497":"code","351466b2":"code","e9693eae":"code","85aeb7ab":"code","59746465":"code","b9c9d676":"code","6e7bd9f8":"code","fbe81c80":"code","686bff04":"code","fb700f07":"code","b8c42c2d":"code","4fdf2bc3":"code","8903cb97":"code","41e49ec0":"code","bcf032f8":"code","c1fc1a98":"code","09ec4bb8":"code","b636a67b":"code","3cef0bcc":"code","8a625a28":"code","2c4f58dd":"code","55bba323":"code","d4cc0da6":"code","f53d8895":"code","c427eb52":"code","03d98206":"code","73de3520":"code","41b0bfa6":"code","2915c1f8":"code","3669e810":"code","04d704bc":"code","ece4a8e8":"code","a9730278":"markdown","9890d835":"markdown","7dbde1c9":"markdown","db6332c0":"markdown"},"source":{"a786db3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5608dfc3":"data = pd.read_csv('..\/input\/weatherAUS.csv')","36a02397":"data.head()","8e87cb7d":"len(data)","e2640e95":"data.shape","e2ba0ebb":"data.RainToday.value_counts()","203314cd":"data.RainTomorrow.value_counts()","9190a4bf":"# Filling missing values","5e8711d8":"data.isnull().sum()","ec531f8d":"(data.isnull().sum() \/ len(data)).sort_values(ascending=False)","96dccb83":"data.columns","f75000d8":"# Removing columns with too much null values\ndata = data.drop(['Sunshine', 'Evaporation', 'Cloud3pm', 'Cloud9am'], axis=1)","b17c3a66":"# For the plots\ndata_no_nan = data.dropna()","ce7cd209":"# Pressure9am\ndata.Pressure9am.describe()","0cf681d2":"plt.figure(figsize=(10,6))\nsns.distplot(data_no_nan.Pressure9am)","20332621":"# Fill with mean, nearly same as median\ndata.Pressure9am = data.Pressure9am.fillna(data.Pressure9am.mean())","4af5cf11":"# Pressure3pm\ndata.Pressure3pm.describe()","355ab785":"plt.figure(figsize=(10,6))\nsns.distplot(data_no_nan.Pressure3pm)","5e8bc0e5":"# Fill with mean, nearly same as median\ndata.Pressure3pm = data.Pressure3pm.fillna(data.Pressure3pm.mean())","192fde51":"# WindDir9am\ndata.WindDir9am.value_counts()","a3478d06":"plt.figure(figsize=(10,6))\nsns.countplot(data_no_nan.WindDir9am)","47f5776e":"# Fill with max value\ndata.WindDir9am = data.WindDir9am.fillna(data.WindDir9am.value_counts().reset_index().iloc[0]['index'])","bc10fd70":"# WindGustDir\ndata.WindGustDir.value_counts()","015526ca":"plt.figure(figsize=(10,6))\nsns.countplot(data_no_nan.WindGustDir)","683f04c5":"# Fill with max value\ndata.WindGustDir = data.WindGustDir.fillna(data.WindGustDir.value_counts().reset_index().iloc[0]['index'])","1da88159":"# WindGustSpeed\ndata.WindGustSpeed.describe()","ec772ca0":"plt.figure(figsize=(10,6))\nsns.distplot(data_no_nan.WindGustSpeed)","ac0fc836":"# Fill with mean, nearly same as median\ndata.WindGustSpeed = data.WindGustSpeed.fillna(data.WindGustSpeed.mean())","f9843460":"# WindDir3pm\ndata.WindDir3pm.value_counts()","e89b582f":"plt.figure(figsize=(10,6))\nsns.countplot(data_no_nan.WindDir3pm)","43ddaefc":"# Fill with max value\ndata.WindDir3pm = data.WindDir3pm.fillna(data.WindDir3pm.value_counts().reset_index().iloc[0]['index'])","5d29b963":"# Humidity3pm\ndata.Humidity3pm.describe()","8e746018":"plt.figure(figsize=(10,6))\nsns.distplot(data_no_nan.Humidity3pm)","2ae5a323":"# Fill with mean, nearly same as median\ndata.Humidity3pm = data.Humidity3pm.fillna(data.Humidity3pm.mean())","e8279460":"# Temp3pm\ndata.Temp3pm.describe()","f9faeeb0":"plt.figure(figsize=(10,6))\nsns.distplot(data_no_nan.Temp3pm)","b62b98b0":"# Fill with mean, nearly same as median\ndata.Temp3pm = data.Temp3pm.fillna(data.Temp3pm.mean())","661b7113":"# WindSpeed3pm\ndata.WindSpeed3pm.describe()","e0e1fde8":"plt.figure(figsize=(10,6))\ng = sns.countplot(data_no_nan.WindSpeed3pm)\ng.set_xticklabels(g.get_xticklabels(), rotation=90)","561c6e6f":"# Fill with mean, nearly same as median\ndata.WindSpeed3pm = data.WindSpeed3pm.fillna(data.WindSpeed3pm.mean())","b7b522d0":"# Humidity9am\ndata.Humidity9am.describe()","867b336c":"plt.figure(figsize=(10,6))\ng = sns.distplot(data_no_nan.Humidity9am)","ab9d85d0":"# Fill with mean, nearly same as median\ndata.Humidity9am = data.Humidity9am.fillna(data.Humidity9am.mean())","16cbefc0":"# Rainfall\ndata.Rainfall.describe()","3d0c2470":"plt.figure(figsize=(10,6))\ng = sns.distplot(data_no_nan.Rainfall)","8b20f833":"# Fill with median\ndata.Rainfall = data.Rainfall.fillna(data.Rainfall.median())","dc96c82d":"# WindSpeed9am\ndata.WindSpeed9am.describe()","73fe4093":"plt.figure(figsize=(10,6))\ng = sns.countplot(data_no_nan.WindSpeed9am)\ng.set_xticklabels(g.get_xticklabels(), rotation=90)","087198b5":"# Fill with mean, nearly same as median\ndata.WindSpeed9am = data.WindSpeed9am.fillna(data.WindSpeed9am.mean())","5d8c272b":"# Temp9am\ndata.Temp9am.describe()","fe07c7f1":"plt.figure(figsize=(10,6))\ng = sns.distplot(data_no_nan.Temp9am)","333e2497":"# Fill with mean, nearly same as median\ndata.Temp9am = data.Temp9am.fillna(data.Temp9am.mean())","351466b2":"# MinTemp\ndata.MinTemp.describe()","e9693eae":"plt.figure(figsize=(10,6))\ng = sns.distplot(data_no_nan.MinTemp)","85aeb7ab":"# Fill with mean, nearly same as median\ndata.MinTemp = data.MinTemp.fillna(data.MinTemp.mean())","59746465":"# MaxTemp\ndata.MaxTemp.describe()","b9c9d676":"plt.figure(figsize=(10,6))\ng = sns.distplot(data_no_nan.MaxTemp)","6e7bd9f8":"# Fill with mean, nearly same as median\ndata.MaxTemp = data.MaxTemp.fillna(data.MaxTemp.mean())","fbe81c80":"# MaxTemp\ndata.RainToday.value_counts()","686bff04":"plt.figure(figsize=(10,6))\nsns.countplot(data_no_nan.RainToday)","fb700f07":"# Fill with max value\ndata.RainToday = data.RainToday.fillna(data.RainToday.value_counts().reset_index().iloc[0]['index'])","b8c42c2d":"(data.isnull().sum() \/ len(data)).sort_values(ascending=False)","4fdf2bc3":"# Converting categorical values to numerical values","8903cb97":"# Removing Location and Date, not useful to predict the rain \ndata = data.drop(['Date', 'Location'], axis=1)","41e49ec0":"from sklearn import preprocessing","bcf032f8":"le = preprocessing.LabelEncoder()\nle.fit(data.WindGustDir)\ndata.WindGustDir = le.transform(data.WindGustDir)","c1fc1a98":"le = preprocessing.LabelEncoder()\nle.fit(data.WindDir9am)\ndata.WindDir9am = le.transform(data.WindDir9am)","09ec4bb8":"le = preprocessing.LabelEncoder()\nle.fit(data.WindDir3pm)\ndata.WindDir3pm = le.transform(data.WindDir3pm)","b636a67b":"data.RainToday = data.RainToday.map({'No':0, 'Yes':1})\ndata.RainTomorrow = data.RainTomorrow.map({'No':0, 'Yes':1})","3cef0bcc":"data.head()","8a625a28":"plt.figure(figsize=(10,8))\nsns.heatmap(data.corr())","2c4f58dd":"data.corr()['RainTomorrow'].sort_values(ascending=False)","55bba323":"# RISK_MM is an estimation of the amount of rain in the next day, we don't want to use this feature\n\ndata = data.drop('RISK_MM', axis=1)","d4cc0da6":"X = data.drop('RainTomorrow', axis=1)\ny = data['RainTomorrow']","f53d8895":"from sklearn.model_selection import train_test_split\n\n#split dataset into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","c427eb52":"X_train.shape, y_train.shape","03d98206":"X_test.shape, y_test.shape","73de3520":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier","41b0bfa6":"# Logistic Regression\n\nlog = LogisticRegression(random_state=42)\nlog.fit(X_train,y_train)\nprecision = 100*round(log.score(X_test, y_test),4)\nprint('Precision : %s' % precision)","2915c1f8":"# Random Forest\n\nn_estimators = range(5,100, 5)\nprecision_rdf = dict()\n\nfor i in n_estimators:\n    clf = RandomForestClassifier(n_estimators=i,random_state=42)\n    clf.fit(X_train, y_train)\n    precision = 100*round(clf.score(X_test, y_test),4)\n    precision_rdf[i] = precision\n    print('Estimators : ', i, '-> Precision : %s' %precision)","3669e810":"best_estimators = max(precision_rdf, key=precision_rdf.get)\nclf = RandomForestClassifier(n_estimators=best_estimators,random_state=42)\nclf.fit(X_train, y_train)\nprecision = 100*round(clf.score(X_test, y_test),4)\nprint(precision)","04d704bc":"n_estimators = range(10,150, 10)\nprecision_xgb = dict()\n\nfor i in n_estimators:\n    xgb = XGBClassifier(learning_rate=0.1, n_estimators=i, max_depth=8,\n                            min_child_weight=3, gamma=0.2, random_state=42)\n    xgb.fit(X_train, y_train)\n    precision = 100*round(xgb.score(X_test, y_test),4)\n    precision_xgb[i] = precision\n    print('Estimators : ', i, '-> Precision : %s' %precision)","ece4a8e8":"best_estimator_xgb = max(precision_xgb, key=precision_xgb.get)\nxgb = XGBClassifier(learning_rate=0.1, n_estimators=i, max_depth=8,\n                            min_child_weight=3, gamma=0.2, random_state=42)\nxgb.fit(X_train, y_train)\nprecision = 100*round(xgb.score(X_test, y_test),4)\nprint(precision)","a9730278":"**Data Predictions**","9890d835":"**Exploring Data**","7dbde1c9":"Best predictions with the XGBoost model","db6332c0":"**Data Cleaning**"}}