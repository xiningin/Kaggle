{"cell_type":{"cb2caa67":"code","55acae3c":"code","2334d1e0":"code","6d6b696f":"code","a5c3120a":"code","cf9b8613":"code","8569999d":"code","2a52d4c9":"code","f1d5b0b4":"code","858da512":"code","2b81083b":"code","52d79efe":"code","fabdd07a":"code","3a12d3cf":"code","5edc9418":"code","5f72f543":"code","6d6e6364":"code","7e1863fc":"markdown","4b321f20":"markdown","111c49d6":"markdown","b55f1006":"markdown"},"source":{"cb2caa67":"import numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\n\nfrom glob import glob\nimport pathlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nimport tensorflow as tf\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Flatten, Dropout\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","55acae3c":"image_path = \"..\/input\/game-of-deep-learning-ship-datasets\/train\/images\/\"\nshape = (64, 64, 1)\nmapping = {\n    0: 'Cargo', \n    1: 'Military', \n    2: 'Carrier', \n    3: 'Cruise', \n    4: 'Tankers'\n}\nbatch_size = 24","2334d1e0":"train_csv_file = \"..\/input\/game-of-deep-learning-ship-datasets\/train\/train.csv\"\ntrain_csv = pd.read_csv(train_csv_file)\ntrain_csv.sample(5)","6d6b696f":"train_images = []\nfor i in tqdm(range(train_csv.shape[0])):\n    img = image.load_img(image_path + train_csv['image'][i], target_size=shape, grayscale=True)\n    img = image.img_to_array(img)\n    img = img.astype(np.float32) \/ 255.0\n    train_images.append(img)\nX = np.array(train_images)","a5c3120a":"y_val = train_csv['category'].subtract(1).values\ny = to_categorical(y_val, num_classes=len(mapping))","cf9b8613":"Image.open(image_path + train_csv['image'][3254])","8569999d":"plt.imshow(X[3254])\nplt.show()","2a52d4c9":"val = train_csv.loc[:, \"category\"].value_counts()\nval = val.rename(index=mapping)\nval.plot.pie(\n    autopct='%.2f'\n)","f1d5b0b4":"base_model = ResNet50(\n    include_top=False, weights=None, input_shape=shape\n)\nlayer = base_model.output\nlayer = Flatten()(layer)\nlayer = Dense(512, activation='tanh')(layer)\n# layer = Dropout(0.3)(layer)\nlayer = Dense(128, activation='tanh')(layer)\n# layer = Dropout(0.3)(layer)\nlayer = Dense(len(mapping), activation='softmax')(layer)\nmodel = Model(inputs = base_model.input, outputs = layer)\nmodel.summary()","858da512":"for layer in base_model.layers:\n    layer.trainable = False","2b81083b":"model.compile(\n    optimizer='adam', \n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","52d79efe":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","fabdd07a":"args = dict(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2\n)\ndatagen = image.ImageDataGenerator(**args)","3a12d3cf":"train_dataset = datagen.flow(X_train, y_train, batch_size=batch_size)\ntest_dataset = datagen.flow(X_test, y_test, batch_size=batch_size)","5edc9418":"step_size_train=train_dataset.n\/\/train_dataset.batch_size\nstep_size_val=test_dataset.n\/\/test_dataset.batch_size","5f72f543":"history = model.fit(\n    train_dataset,\n    steps_per_epoch=step_size_train,\n    epochs=50,\n    validation_data=test_dataset,\n    validation_steps=step_size_val\n)","6d6e6364":"plt.plot(history.history[\"loss\"], label=\"train_loss\")\nplt.plot(history.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(history.history[\"acc\"], label=\"train_acc\")\nplt.plot(history.history[\"val_acc\"], label=\"val_acc\")\nplt.legend()\nplt.show()","7e1863fc":"## Validating the images","4b321f20":"## Perform Image Augmentation","111c49d6":"## Performing the test train split","b55f1006":"## Model Building: ResNet50"}}