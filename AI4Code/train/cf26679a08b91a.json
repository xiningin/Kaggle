{"cell_type":{"3279acad":"code","2593d545":"code","ac1cbd68":"code","67aea8d8":"code","c39cad66":"code","1aa4cc44":"code","2affd19e":"code","5b888110":"code","9527e796":"code","5a3e42c3":"code","cf03dff9":"code","b318fb73":"code","7847a20e":"markdown","dc064cbd":"markdown","4a970bd5":"markdown","2a57d928":"markdown","0cb7db89":"markdown","02cd65f4":"markdown","116ab55d":"markdown","996ba37b":"markdown","4e749b34":"markdown","86e80d4c":"markdown","2b122d75":"markdown","d589c126":"markdown","ab5f19c0":"markdown"},"source":{"3279acad":"import pandas as pd\nimport numpy as np\nimport datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport squarify\nimport plotly.offline as py\nimport plotly_express as px\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline","2593d545":"india_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n\nworld_population = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\nconfirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')\nrecovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')\nlatest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')\n\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'],dayfirst = True)\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])\n\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_to_visualize = dates[8:]\n\nglobal_confirmed = {}\nglobal_deaths = {}\nglobal_recovered = {}\nglobal_active= {}\n\nglobal_confirmed_list = []\nglobal_recovered_list = []\nglobal_deaths_list = []\nglobal_active_list = []\n\ndf1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\ntrain = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')\ntrain['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])\n\ncountry_dict={}\n'China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India'\ncountry_dict['1']='China'\ncountry_dict['2']='Germany'\ncountry_dict['3']='Iran'\ncountry_dict['4']='Italy'\ncountry_dict['5']='Spain'\ncountry_dict['6']='US'\ncountry_dict['7']='Korea, South'\ncountry_dict['8']='France'\ncountry_dict['9']='Turkey'\ncountry_dict['10']='United Kingdom'\ncountry_dict['11']='India'\n","ac1cbd68":"def get_world_updates():\n    world_confirmed = confirmed_df[confirmed_df.columns[-1:]].sum()\n    world_recovered = recovered_df[recovered_df.columns[-1:]].sum()\n    world_deaths = deaths_df[deaths_df.columns[-1:]].sum()\n    world_active = world_confirmed - (world_recovered - world_deaths)\n\n    labels = ['Active','Recovered','Deceased']\n    sizes = [world_active,world_recovered,world_deaths]\n    color= ['#66b3ff','green','red']\n    explode = []\n\n    for i in labels:\n        explode.append(0.05)\n\n    plt.figure(figsize= (15,10))\n    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=9, explode =explode,colors = color)\n    centre_circle = plt.Circle((0,0),0.70,fc='white')\n\n    fig = plt.gcf()\n    fig.gca().add_artist(centre_circle)\n    plt.title('World COVID-19 Cases',fontsize = 20)\n    plt.axis('equal')  \n    plt.tight_layout()\n","67aea8d8":"def get_hotspot_country_details():\n    hotspots = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']\n    dates = list(confirmed_df.columns[4:])\n    dates = list(pd.to_datetime(dates))\n    dates_to_visualize = dates[8:]\n\n    df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\n    df2 = deaths_df.groupby('Country\/Region').sum().reset_index()\n    df3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\n\n    for country in hotspots:\n        k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n        global_confirmed[country] = k.values.tolist()[0]\n\n        k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n        global_deaths[country] = k.values.tolist()[0]\n\n        k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n        global_recovered[country] = k.values.tolist()[0]\n\n    for country in hotspots:\n        k = list(map(int.__sub__, global_confirmed[country], global_deaths[country]))\n        global_active[country] = list(map(int.__sub__, k, global_recovered[country]))\n\n    fig = plt.figure(figsize= (15,15))\n    plt.suptitle('Active, Recovered, Deaths in Hotspot Countries and India as of May 15',fontsize = 20,y=1.0)\n    #plt.legend()\n    k=0\n    for i in range(1,12):\n        ax = fig.add_subplot(6,2,i)\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n        ax.bar(dates_to_visualize,global_active[hotspots[k]],color = 'green',alpha = 0.6,label = 'Active');\n        ax.bar(dates_to_visualize,global_recovered[hotspots[k]],color='grey',label = 'Recovered');\n        ax.bar(dates_to_visualize,global_deaths[hotspots[k]],color='red',label = 'Death');   \n        plt.title(hotspots[k])\n        handles, labels = ax.get_legend_handles_labels()\n        fig.legend(handles, labels, loc='upper left')\n        k=k+1\n\n    plt.tight_layout(pad=3.0)","c39cad66":"def get_death_rate_per_million():\n    hotspots = ['China','Germany','Iran','Italy','Spain','United States','South Korea','France','Turkey','United Kingdom','India']\n    country_death_rate = pd.DataFrame(columns = ['country','day1','day2','day3'])\n    world_population['Population (2020)'] = world_population['Population (2020)']\/1000000\n\n    d1=[]\n    d2 =[]\n    d3 = []\n    for country in hotspots:\n        p = float(world_population[world_population['Country (or dependency)'] == country ]['Population (2020)'])\n        if country == 'United States':\n            k = global_deaths['US'][-3:]\n        elif country == 'South Korea':\n            k = global_deaths['Korea, South'][-3:]\n        else:\n            k = global_deaths[country][-3:]\n        d1.append(round(k[0]\/p,2))\n        d2.append(round(k[1]\/p,2))\n        d3.append(round(k[2]\/p,2))\n\n    country_death_rate['country'] = hotspots\n    country_death_rate['day1'] = d1\n    country_death_rate['day2'] = d2\n    country_death_rate['day3'] = d3    \n\n    plt.figure(figsize= (10,10))\n    plt.hlines(y=country_death_rate['country'], xmin=country_death_rate['day1'], xmax=country_death_rate['day3'], color='grey', alpha=0.4);\n    plt.scatter(country_death_rate['day1'], country_death_rate['country'], color='skyblue', label='13th May');\n    plt.scatter(country_death_rate['day2'], country_death_rate['country'], color='green', label='14th May');\n    plt.scatter(country_death_rate['day3'], country_death_rate['country'], color='red', label='15th May');\n    plt.legend();\n    plt.title(\"Death Rate per Million in Hotspot Countries\",fontsize=20);\n    plt.xlabel('Death Rate per Million');\n","1aa4cc44":"def get_comparision_between_countries():\n    countries = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']\n\n\n    for country in countries:\n        k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n        global_confirmed_list.append(k.values.tolist()[0]) \n\n        k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n        global_deaths_list.append(k.values.tolist()[0]) \n\n        k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n        global_deaths_list.append(k.values.tolist()[0])  \n\n    plt.figure(figsize= (15,10))\n    plt.xticks(rotation = 90 ,fontsize = 11)\n    plt.yticks(fontsize = 10)\n    plt.xlabel(\"Dates\",fontsize = 20)\n    plt.ylabel('Total cases',fontsize = 20)\n    plt.title(\"Comparison with other Countries\" , fontsize = 20)\n\n    for i in range(len(countries)):\n        plt.plot_date(y= global_confirmed_list[i],x= dates_to_visualize,label = countries[i],linestyle ='-')\n    plt.legend();","2affd19e":"def get_country_visualization(countryName):\n    df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\n    df2 = deaths_df.groupby('Country\/Region').sum().reset_index()\n    df3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\n    k = df1[df1['Country\/Region']==countryName].loc[:,'1\/30\/20':]\n    india_confirmed = k.values.tolist()[0] \n\n    k = df2[df2['Country\/Region']==countryName].loc[:,'1\/30\/20':]\n    india_deaths = k.values.tolist()[0] \n\n    k = df3[df3['Country\/Region']==countryName].loc[:,'1\/30\/20':]\n    india_recovered = k.values.tolist()[0] \n\n    plt.figure(figsize= (15,10))\n    plt.xticks(rotation = 90 ,fontsize = 11)\n    plt.yticks(fontsize = 10)\n    plt.xlabel(\"Dates\",fontsize = 20)\n    plt.ylabel('Total cases',fontsize = 20)\n    title=\"Total Confirmed, Active, Death in \"+countryName\n    plt.title(title , fontsize = 20)\n\n    ax1 = plt.plot_date(y= india_confirmed,x= dates_to_visualize,label = 'Confirmed',linestyle ='-',color = 'b')\n    ax2 = plt.plot_date(y= india_recovered,x= dates_to_visualize,label = 'Recovered',linestyle ='-',color = 'g')\n    ax3 = plt.plot_date(y= india_deaths,x= dates_to_visualize,label = 'Death',linestyle ='-',color = 'r')\n    plt.legend();","5b888110":"def get_prediction_using_growth_factor(countryName):\n    df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\n    df2 = deaths_df.groupby('Country\/Region').sum().reset_index()\n    df3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\n    k =df1[df1['Country\/Region']==countryName].loc[:,'2\/4\/20':]\n    india_confirmed = k.values.tolist()[0] \n\n    growth_diff = []\n\n    for i in range(1,len(india_confirmed)):\n        growth_diff.append(india_confirmed[i] \/ india_confirmed[i-1])\n\n    growth_factor = sum(growth_diff)\/len(growth_diff)\n    print('Average growth factor',growth_factor)\n\n    prediction_dates = []\n\n    start_date = dates_to_visualize[len(dates_to_visualize) - 1]\n    for i in range(15):\n        date = start_date + datetime.timedelta(days=1)\n        prediction_dates.append(date)\n        start_date = date\n    previous_day_cases = global_confirmed_list[5][len(dates_to_visualize) - 1]\n    predicted_cases = []\n\n    for i in range(15):\n        predicted_value = previous_day_cases *  growth_factor\n        predicted_cases.append(predicted_value)\n        previous_day_cases = predicted_value\n\n    plt.figure(figsize= (15,10))\n    plt.xticks(rotation = 90 ,fontsize = 11)\n    plt.yticks(fontsize = 10)\n    plt.xlabel(\"Dates\",fontsize = 20)\n    plt.ylabel('Total cases',fontsize = 20)\n    title=\"Predicted Values for the next 15 Days for \"+countryName\n    plt.title(title , fontsize = 20)\n    ax1 = plt.plot_date(y= predicted_cases,x= prediction_dates,linestyle ='-',color = 'c')","9527e796":"def get_prediction_using_prophet(countryName):\n    k = df1[df1['Country\/Region']==countryName].loc[:,'1\/22\/20':]\n    india_confirmed = k.values.tolist()[0] \n    data = pd.DataFrame(columns = ['ds','y'])\n    data['ds'] = dates\n    data['y'] = india_confirmed\n\n    prop=Prophet()\n    prop.fit(data)\n    future=prop.make_future_dataframe(periods=30)\n    prop_forecast=prop.predict(future)\n    forecast = prop_forecast[['ds','yhat']].tail(30)\n\n    fig = plot_plotly(prop, prop_forecast)\n    fig = prop.plot(prop_forecast,xlabel='Date',ylabel='Confirmed Cases')","5a3e42c3":"def get_prediction_using_ARIMA(countryName):\n    k = df1[df1['Country\/Region']==countryName].loc[:,'1\/22\/20':]\n    india_confirmed = k.values.tolist()[0] \n    data = pd.DataFrame(columns = ['ds','y'])\n    data['ds'] = dates\n    data['y'] = india_confirmed\n    arima = ARIMA(data['y'], order=(5, 1, 0))\n    arima = arima.fit(trend='c', full_output=True, disp=True)\n    forecast = arima.forecast(steps= 30)\n    pred = list(forecast[0])\n\n    start_date = data['ds'].max()\n    prediction_dates = []\n    for i in range(30):\n        date = start_date + datetime.timedelta(days=1)\n        prediction_dates.append(date)\n        start_date = date\n    plt.figure(figsize= (15,10))\n    plt.xlabel(\"Dates\",fontsize = 20)\n    plt.ylabel('Total cases',fontsize = 20)\n    title= \"Predicted Values for the next 15 Days for \"+countryName\n    plt.title(title , fontsize = 20)\n\n    plt.plot_date(y= pred,x= prediction_dates,linestyle ='dashed',color = '#ff9999',label = 'Predicted');\n    plt.plot_date(y=data['y'],x=data['ds'],linestyle = '-',color = 'blue',label = 'Actual');\n    plt.legend();","cf03dff9":"print(\"Do you want to see world wide covid-19 updates(YES\/NO)?\")\nanswer= input()\nif(answer=='YES'):\n    get_world_updates()\n    get_hotspot_country_details()\n    get_death_rate_per_million()\n    get_comparision_between_countries()","b318fb73":"print(\"Select a country from the list of hotspot countries to predict the cases for next 15 days\")\nfor number, country in country_dict.items(): \n    print(number, \":\", country) \nanswer=input()\nget_country_visualization(country_dict[answer])\nget_prediction_using_growth_factor(country_dict[answer])\nget_prediction_using_prophet(country_dict[answer])\nget_prediction_using_ARIMA(country_dict[answer])","7847a20e":"# Imports","dc064cbd":"# 2.1. Country wise Visualization <a id=\"1\"><\/a>","4a970bd5":"# Initializations","2a57d928":"# 2.2. Country wise Prediction <a id=\"7\"><\/a>","0cb7db89":"## 2.2.3. Prediction using ARIMA <a id=\"11\"><\/a>","02cd65f4":"# 1. World Updates  <a id=\"32\"><\/a>\n","116ab55d":"## 2.2.1. Prediction using growth factor","996ba37b":"# 1.3. Comparision between different countries[](http:\/\/)","4e749b34":"# 1.2. Death rate per million in hotspot countries","86e80d4c":"## 2.2.2. Prediction using Prophet Model <a id=\"10\"><\/a>","2b122d75":"# 2. Prediction and Visualization[](http:\/\/)","d589c126":"# ![](http:\/\/)![](http:\/\/)**1.1. Active, Recovered, Deaths in hotspot countries**","ab5f19c0":"# User interaction code"}}