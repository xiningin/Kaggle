{"cell_type":{"89151803":"code","f0ac3133":"code","05fa9105":"code","49e60da9":"code","339df599":"code","d25e9e36":"code","bd4712b2":"code","6c42bae2":"code","00beabf9":"code","a6881449":"code","57eb7b32":"code","6099bc54":"code","2a660a4f":"code","088a772c":"code","daf2feda":"code","7208de7f":"code","f7dcd285":"code","3409c223":"code","4962affc":"code","702e30a8":"code","da9c967d":"code","67c04e76":"code","1dcd594d":"code","174abf44":"code","5be61dff":"code","e884d250":"code","a6271201":"code","b845d08c":"code","90ff5057":"code","2f19c6c2":"markdown","1333bdc7":"markdown","69cc4156":"markdown","496969f3":"markdown","7e89eb23":"markdown","3b0b0b95":"markdown","cc618b9f":"markdown","ca1929e1":"markdown","de341f42":"markdown","1ff0a3d1":"markdown","7f54584e":"markdown","3588f510":"markdown","90da3930":"markdown","e1e3c2c4":"markdown","569f9ecf":"markdown","f81bf545":"markdown","631bf91c":"markdown","0fa533bb":"markdown","4a2fd61c":"markdown","e30c0560":"markdown","7ac0aee7":"markdown","9814c039":"markdown","5d2bbf47":"markdown","1103feca":"markdown","271c9915":"markdown","fa50b9ff":"markdown","72ba96bb":"markdown","d041d891":"markdown"},"source":{"89151803":"import warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import TimeSeriesSplit, cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import roc_auc_score\nfrom hyperopt import fmin, tpe, hp, anneal, Trials","f0ac3133":"train = pd.read_csv('..\/input\/flight_delays_train.csv')\ntest = pd.read_csv('..\/input\/flight_delays_test.csv')","05fa9105":"train.head()","49e60da9":"print(train.isnull().sum().sum())\nprint(test.isnull().sum().sum())","339df599":"train.info()","d25e9e36":"print(len(train.Month.unique()))\nprint(len(train.DayofMonth.unique()))\nprint(len(train.DayOfWeek.unique()))","bd4712b2":"print(len(train.UniqueCarrier.unique()))\nprint(len(train.Origin.unique()))\nprint(len(train.Dest.unique()))","6c42bae2":"def transform_to_int(value):\n    return int(value[2:])\n\ntrain['Month'] = train['Month'].apply(transform_to_int)\ntrain['DayofMonth'] = train['DayofMonth'].apply(transform_to_int)\ntrain['DayOfWeek'] = train['DayOfWeek'].apply(transform_to_int)\ntest['Month'] = test['Month'].apply(transform_to_int)\ntest['DayofMonth'] = test['DayofMonth'].apply(transform_to_int)\ntest['DayOfWeek'] = test['DayOfWeek'].apply(transform_to_int)","00beabf9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 5))\nax1 = sns.boxplot(train.loc[train['dep_delayed_15min']=='Y','Distance'], ax=ax[0])\nax2 = sns.boxplot(train.loc[train['dep_delayed_15min']=='N','Distance'], ax=ax[1])","a6881449":"train_del_dow = train.loc[train['dep_delayed_15min']=='Y', 'DayOfWeek'].value_counts().sort_index()\/train['DayOfWeek'].value_counts().sort_index()*100\n\nax = train_del_dow.sort_index().plot(kind='bar', title='Delayed fligths by day of week', figsize=(10, 6))\nax.set_xlabel('\\nDay of Week')\nax.set_ylabel('%')","57eb7b32":"train_del_month = train.loc[train['dep_delayed_15min']=='Y', 'Month'].value_counts().sort_index()\/train['Month'].value_counts().sort_index()*100\n\nax = train_del_month.sort_index().plot(kind='bar', title='Percent of delayed fligths by month', figsize=(12, 6))\nax.set_ylabel('%')\nax.set_xlabel('Month')","6099bc54":"train_del_dom = (train.loc[train['dep_delayed_15min']=='Y', 'DayofMonth'].value_counts(normalize=True)*100).sort_index()\n\nax = train_del_dom.sort_index().plot(kind='bar', title='Delayed fligths by day of month', figsize=(18, 6))\nax.set_ylabel('%')\nax.set_xlabel('Day of Month')","2a660a4f":"train_carrier = (train['UniqueCarrier'].value_counts())\n\nax = train_carrier.sort_index().plot(kind='bar', title='Number of flights by unique carrier', figsize=(18, 6))\nax.set_ylabel('Number of Flights')\nax.set_xlabel('Unique Carrier')","088a772c":"train_del_carrier = (train.loc[train['dep_delayed_15min']=='Y', 'UniqueCarrier'].value_counts().sort_index()\/train['UniqueCarrier'].value_counts().sort_index())*100\n\nax = train_del_carrier.plot(kind='bar', title='Percent of delayed fligths by unique carrier', figsize=(18, 6))\nax.set_ylabel('%')\nax.set_xlabel('Unique Carrier')","daf2feda":"train['Flight'] = train['Origin'] + '-' + train['Dest']\ntest['Flight'] = train['Origin'] + '-' + train['Dest']","7208de7f":"train['DepTime'].describe()","f7dcd285":"def fix_dep_time(value):\n    if value >= 2400:\n        return value-2400\n    return value\n\ntrain['DepTime'] = train['DepTime'].apply(fix_dep_time)\ntest['DepTime'] = test['DepTime'].apply(fix_dep_time)","3409c223":"def fetch_hour_data(value):\n    value_str = str(value)\n    if len(value_str) <= 2:\n        hour = 0\n        minutes = int(value_str)\n    elif len(value_str) == 3:  \n        hour = int(value_str[:1])\n        minutes = int(value_str[1:])\n    else:\n        hour = int(value_str[:2])\n        minutes = int(value_str[2:])\n    if minutes < 15:\n        minutes = 0\n    elif minutes in range(15, 45):\n        minutes = 0.5\n    else:\n        minutes = 1\n    if hour + minutes == 24:\n        return 0.0\n    return hour + minutes\n\ndef fetch_minutes_data(value):\n    value_str = str(value)\n    if len(value_str) <= 2:\n        minutes = int(value_str)\n    elif len(value_str) == 3:  \n        minutes = int(value_str[1:])\n    else:\n        minutes = int(value_str[2:])\n    return minutes\n\ntrain['Hour'] = train['DepTime'].apply(fetch_hour_data).astype('str')\ntest['Hour'] = test['DepTime'].apply(fetch_hour_data).astype('str')\n\ntrain['HourSQ'] = (train['Hour'].astype('float')**2)\ntest['HourSQ'] = (test['Hour'].astype('float')**2)\ntrain['HourSQ2'] = (train['Hour'].astype('float')**4)\ntest['HourSQ2'] = (test['Hour'].astype('float')**4)\n\ntrain['Minutes'] = train['DepTime'].apply(fetch_minutes_data)\ntest['Minutes'] = test['DepTime'].apply(fetch_minutes_data)","4962affc":"train_del_hour = train.loc[train['dep_delayed_15min']=='Y', 'Hour'].value_counts().sort_index()\/train['Hour'].value_counts().sort_index()*100\n# new_index = [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 3, 30, 31, 4, 5, 6, 7, 8, 9]\n# train_del_dom.index = new_index\n\nax = train_del_hour.sort_index().plot(kind='bar', title='Percent of delayed fligths by hour', figsize=(18, 6))\nax.set_ylabel('%')\nax.set_xlabel('Hour')","702e30a8":"train.info()","da9c967d":"def add_season(value):\n    if value > 11 or value < 3:\n        return 'Winter'\n    elif value < 6:\n        return 'Spring'\n    elif value < 9:\n        return 'Summer'\n    else:\n        return 'Autumn'\n    \ndef add_weekend(value):\n    if value > 5 :\n        return 'Y'\n    else:\n        return 'N'\n\ntrain['Season'] = train['Month'].apply(add_season)\ntrain['Weekend'] = train['DayOfWeek'].apply(add_weekend)\ntest['Season'] = test['Month'].apply(add_season)\ntest['Weekend'] = test['DayOfWeek'].apply(add_weekend)","67c04e76":"from pandas.tseries.holiday import USFederalHolidayCalendar as calendar\n\ndr = pd.date_range(start='2011-01-01', end='2012-12-31')\ndf_hol = pd.DataFrame()\ndf_hol['Date'] = dr\n\ncal = calendar()\nholidays = cal.holidays(start=dr.min(), end=dr.max())\n\ndf_hol = df_hol[df_hol['Date'].isin(holidays)]\ndf_hol['DayofMonth'] = df_hol['Date'].dt.day\ndf_hol['DayofWeek'] = df_hol['Date'].dt.dayofweek + 1\ndf_hol['Month'] = df_hol['Date'].dt.month\ndf_hol","1dcd594d":"%%time\n\nholiday_list = list()\n\ndef get_holiday_dates(row):\n    month_code = row['Month']\n    day_of_month_code = row['DayofMonth']\n    day_of_week_code = row['DayofWeek']\n    holiday_date = str(month_code) + '-' + str(day_of_month_code) + '-' + str(day_of_week_code)\n    holiday_list.append(holiday_date)\n\ndf_hol.apply(get_holiday_dates, axis=1)\n\ndef find_holiday(row):\n    month_code = str(row['Month'])[2:]\n    day_of_month_code = str(row['DayofMonth'])[2:]\n    day_of_week_code = str(row['DayOfWeek'])[2:]\n    holiday_date = month_code + '-' + day_of_month_code + '-' + day_of_week_code\n    if holiday_date in holiday_list:\n        return 'Y'\n    else:\n        return row['Weekend']\n        \ntrain['Weekend'] = train.apply(find_holiday, axis=1)\ntest['Weekend'] = test.apply(find_holiday, axis=1)","174abf44":"def add_dist_label(value):\n    if value <= 500:\n        return 'vshort'\n    elif value <= 1000:\n        return 'short'\n    elif value <= 1500:\n        return 'middle'\n    elif value <= 2000:\n        return 'vmiddle'\n    elif value <= 2500:\n        return 'long'\n    else:\n        return 'vlong'\n    \ntrain['DistLabel'] = train['Distance'].apply(add_dist_label)\ntest['DistLabel'] = test['Distance'].apply(add_dist_label)","5be61dff":"train_del_dist = (train.loc[train['dep_delayed_15min']=='Y', 'DistLabel'].value_counts().sort_index()\/train['DistLabel'].value_counts().sort_index()*100).sort_values()\n\nax = train_del_dist.plot(kind='bar', title='Delayed fligths by distance', figsize=(18, 6))\nax.set_ylabel('%')\nax.set_xlabel('Distance')","e884d250":"def add_part_of_day(value):\n    value = float(value)\n    if value < 6:\n        return 'Night'\n    elif value < 12:\n        return 'Morning'\n    elif value < 18:\n        return 'Day'\n    else:\n        return 'Evening'\n    \ntrain['PartOfDay'] = train['Hour'].apply(add_part_of_day)\ntest['PartOfDay'] = test['Hour'].apply(add_part_of_day)","a6271201":"train['Month'] = train['Month'].astype(str)\ntest['Month'] = test['Month'].astype(str)\n\ntrain['DayofMonth'] = train['DayofMonth'].astype(str)\ntest['DayofMonth'] = test['DayofMonth'].astype(str)\n\ntrain['DayOfWeek'] = train['DayOfWeek'].astype(str)\ntest['DayOfWeek'] = test['DayOfWeek'].astype(str)\n\ntrain['OriginHour'] = train['Origin'] + '-' + train['Hour']\ntest['OriginHour'] = test['Origin'] + '-' + test['Hour']\n\ntrain['DestHour'] = train['Dest'] + '-' + train['Hour']\ntest['DestHour'] = test['Dest'] + '-' + test['Hour']\n\ntrain['CarrierOrigin'] = train['UniqueCarrier'] + '-' + train['Origin']\ntest['CarrierOrigin'] = test['UniqueCarrier'] + '-' + test['Origin']\n\ntrain['CarrierDest'] = train['UniqueCarrier'] + '-' + train['Dest']\ntest['CarrierDest'] = test['UniqueCarrier'] + '-' + test['Dest']\n\ntrain['CarrierHour'] = train['UniqueCarrier'] + '-' + train['Hour']\ntest['CarrierHour'] = test['UniqueCarrier'] + '-' + test['Hour']\n\ntrain['CarrierOriginHour'] = train['UniqueCarrier'] + '-' + train['Origin'] + '-' + train['Hour']\ntest['CarrierOriginHour'] = test['UniqueCarrier'] + '-' + test['Origin'] + '-' + train['Hour']\n\ntrain['CarrierDestHour'] = train['UniqueCarrier'] + '-' + train['Dest'] + '-' + train['Hour']\ntest['CarrierDestHour'] = test['UniqueCarrier'] + '-' + test['Dest'] + '-' + test['Hour']","b845d08c":"def prepare_data(train, features_to_drop=[]):\n    X_test = test.drop(features_to_drop, axis=1)\n    features_to_drop.append('dep_delayed_15min')\n    X_train = train.drop(features_to_drop, axis=1)\n    y_train = train['dep_delayed_15min'].map({'Y': 1, 'N': 0})\n    return X_train, y_train, X_test\n\ndef write_submission_to_file(predicted_labels, out_file, target='dep_delayed_15min', index_label='id'):\n    predicted_df = pd.DataFrame(predicted_labels, columns=[target])\n    predicted_df.to_csv(out_file, index_label=index_label)\n\ndef train_predict_and_submit(train, test, filename, features_to_drop=[]):\n    # prepare data\n    X_train, y_train, X_test = prepare_data(train, features_to_drop)\n    # make train and validation set\n    X_train_part, X_valid, y_train_part, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=17)\n    # determine categorical features\n    categ_feat_idx = np.where(X_train.dtypes == 'object')[0]\n    # train and test model \n    ctb = CatBoostClassifier(random_seed=17)\n    ctb.fit(X_train_part, y_train_part, cat_features=categ_feat_idx)\n    ctb_valid_pred = ctb.predict_proba(X_valid)[:, 1]\n    # make predicitons and write them to file\n    ctb_test_pred = ctb.predict_proba(X_test)[:, 1]\n    write_submission_to_file(ctb_test_pred, filename)\n    print(roc_auc_score(y_valid, ctb_valid_pred))\n    feat_imp = zip(list(X_train.columns), list(ctb.feature_importances_))\n    for i, j in feat_imp:\n        print(i,'--->', j)\n    return ctb","90ff5057":"ctb = train_predict_and_submit(train, test, 'submission.csv', features_to_drop=['Distance', 'DepTime'])","2f19c6c2":"Distribution of delayed flights by distance","1333bdc7":"<center>\n<img src=\"https:\/\/habrastorage.org\/files\/fd4\/502\/43d\/fd450243dd604b81b9713213a247aa20.jpg\">\n## Open Machine Learning Course\n<center>Author: [Yury Kashnitsky](https:\/\/www.linkedin.com\/in\/festline\/), Data Scientist @ Mail.Ru Group <br>All content is distributed under the [Creative Commons CC BY-NC-SA 4.0](https:\/\/creativecommons.org\/licenses\/by-nc-sa\/4.0\/) license.","69cc4156":"Train, predict and write submission to file","496969f3":"Number of unique values of *UniqueCarrier*, *Origin* and *Dest* columns","7e89eb23":"# <center> Assignment #10 (demo)\n## <center> Gradient boosting\n\nYour task is to beat at least 2 benchmarks in this [Kaggle Inclass competition](https:\/\/www.kaggle.com\/c\/flight-delays-spring-2018). Here you won\u2019t be provided with detailed instructions. We only give you a brief description of how the second benchmark was achieved using Xgboost. Hopefully, at this stage of the course, it's enough for you to take a quick look at the data in order to understand that this is the type of task where gradient boosting will perform well. Most likely it will be Xgboost, however, we\u2019ve got plenty of categorical features here.\n\n<img src=https:\/\/habrastorage.org\/webt\/fs\/42\/ms\/fs42ms0r7qsoj-da4x7yfntwrbq.jpeg width=40% \/>","3b0b0b95":"Distribution of delayed flights by hour","cc618b9f":"Let's see the train dataset","ca1929e1":"Dependence between distance of flight and delay of flights.","de341f42":"Number of unique values of *Month*, *DayOfMonth*, and *DayOfWeek* columns","1ff0a3d1":"Distribution of delayed flights by month","7f54584e":"Null data","3588f510":"Now let's find holidays in our dataset and for each holiday set *Weekend* value to 1","90da3930":"Transform *Month*, *DayofMonth* and *DayOfWeek* columns to integer","e1e3c2c4":"Distribution of delayed flights by day of month","569f9ecf":"Percent of delayed flights by unique carrier","f81bf545":"Add combination of *UniqueCarrier*, *Flight*, *Hour*, *DayofMonth*, *DayOfWeek*, *Month* and *Dist_Label* columns","631bf91c":"Fix *DepTime* incorrect data","0fa533bb":"Number of fligths by carrier","4a2fd61c":"Add season feature","e30c0560":"Let's also add distance label","7ac0aee7":"Let's write a function for training CatBoost model, prediction and submitting predictions to file.","9814c039":"Investigate *DepTime* column","5d2bbf47":"Data types","1103feca":"Let's fetch Hour and Minutes data from *DepTime* column","271c9915":"Transform *Destination* and *Origin* column to *Flight*.","fa50b9ff":"Add part of day label","72ba96bb":"Distribution of delayed flights by day of week","d041d891":"According to date values this dataset was sampled within two years. According to calendar it's 2011 and 2012 years.\n\nAccording to *Origin* and *Dest* column we can conclude that this dataset represents flight delay in USA. So we can also add information about holidays in US."}}