{"cell_type":{"bfea74c2":"code","47098ccb":"code","70a1e5a0":"code","a62330f6":"code","11d55ff3":"code","18869f2f":"code","cfd38b6d":"code","de6dcc3d":"code","538cd07f":"code","bf4edb88":"code","9f15745c":"code","b692ef20":"code","be7cf050":"code","d79a1fc9":"code","a71c057f":"code","43d80d26":"markdown","4ee2720e":"markdown","63920563":"markdown","ac9f1365":"markdown","0bae887b":"markdown","c847fdfe":"markdown","9d7ed769":"markdown"},"source":{"bfea74c2":"#Imports all needed libraries\nimport matplotlib.pyplot as plt #data viz\nimport matplotlib #data viz\nfrom matplotlib.animation import FuncAnimation #animation\nimport cartopy.crs as ccrs #data viz - geospatial\nimport cartopy.feature as cf #data viz - geospatial\nimport cartopy.io.shapereader as shpreader #data viz - geospatial \nimport pandas as pd #data processing\nimport numpy as np #linear algebra\nimport warnings #warnings\nfrom IPython.display import HTML #display gif\nwarnings.filterwarnings('ignore') #Hides warning popups","47098ccb":"#sets global variables\n\n#downloads world map with information on country borders\nshpfilename = shpreader.natural_earth(resolution='10m', category='cultural', name='admin_0_countries')\n#creates the color mapping \"cividis\"\ncmap = matplotlib.cm.get_cmap('cividis')\n#cases of covid that will display the leftmost color of the colormap\nmin_cases = 0\n#cases of covid that will display the rightmost color of the colormap\nmax_cases = 50_000\n#normalizer -- normalizes number of covid cases between 0-1 so that it can be displayed as a color\nnorm = plt.Normalize(min_cases, max_cases)","70a1e5a0":"#Reads in dataset\ncovid_data = pd.read_csv('..\/input\/omicron-covid19-variant-daily-cases\/covid-variants.csv')\n\n#Fixes discrepencies in the spelling of certain country names between cartopy | this dataset\ncovid_data['location'] = covid_data.location.apply(lambda x: 'Bosnia and Herz.' \\\n                                                   if x=='Bosnia and Herzegovina' else x)\ncovid_data['location'] = covid_data.location.apply(lambda x: 'Cura\u00e7ao' \\\n                                                   if x=='Curacao' else x)\ncovid_data['location'] = covid_data.location.apply(lambda x: 'Dominican Rep.' \\\n                                                   if x=='Dominican Republic' else x)\ncovid_data['location'] = covid_data.location.apply(lambda x: 'Sint Maarten' \\\n                                                   if x=='Sint Maarten (Dutch part)' else x)\ncovid_data['location'] = covid_data.location.apply(lambda x: 'United States of America' \\\n                                                   if x=='United States' else x)\n\n#Displays a sample of the data\ncovid_data.head()","a62330f6":"def make_global_gif(variant_name=None):\n    \"\"\"\n    This function takes a corona virus variant name as a parameter then creates and \n    saves a gif of the progression of infected people by country for that variant. \n    If no variant name is given, the gif will include all covid variants together.\n    \"\"\"\n    if variant_name: #if a variant is given shows only that variant\n        data = covid_data[covid_data.variant==variant_name].reset_index(drop=True)\n        name = variant_name\n        title = 'Spread of Corona - ' + variant_name +' Varaint by Country'\n        col = 'num_sequences'\n    else: #else shows all covid variants\n        data = covid_data.groupby(['location', 'date']).num_sequences_total.max().reset_index()\n        name = 'Covid'\n        title = 'Spread of Corona by Country'\n        col = 'num_sequences_total'\n        \n    dates = sorted(data.date.unique().tolist()) #all dates in the dataset\n    frames = len(dates) #number of frames of the animation\n    \n    def animate(frame_num):\n        \"\"\"\n        This function takes a frame number and returns a carotpy|matplotlib\n        plot. Each frame number corresponds to a date (in chronological order).\n        This will show how Covid has changed over time.\n        \"\"\"\n        data_date = data[data.date==dates[frame_num]].reset_index(drop=True) #date for the current frame\n        countries = list(data_date.location.values) #all countries with covid data for the given date\n        cases = list(data_date[col].values) #number of covid cases for each country\n        total_cases = int(sum(cases)) #number of total global cases\n        poly = [] #list to be filled with border info for each country\n        for country in  countries: #fills \"poly\" with border info from the previously downloaded map\n            for cntry in shpreader.Reader(shpfilename).records():\n                if cntry.attributes['NAME'] == country:\n                    poly.append(cntry.geometry)\n                    break #breaks for-loop once border added\n        ax = plt.axes(projection=ccrs.PlateCarree()) #plots a global map\n        ax.coastlines() #adds coastlines \n        ax.add_feature(cf.BORDERS) #adds country borders\n        ax.add_feature(cf.OCEAN, facecolor=(\"lightblue\")) #makes ocean blue\n        ax.add_feature(cf.LAND, facecolor=(\"lightgrey\")) #makes land default grey\n        #sets the colorbar settings\n        sm = plt.cm.ScalarMappable(cmap=cmap) \n        sm._A = []\n        ticks = np.linspace(min_cases, max_cases, 5)\n        labels = [int(round(x, -3)) for x in ticks]\n        loc = [norm(x) for x in ticks]\n        cb = plt.colorbar(sm, orientation='horizontal', shrink=0.75)\n        cb.set_ticks(loc)\n        cb.set_ticklabels(labels[:-1] + [str(labels[-1]) + '+'], \n                          font='Serif', size='25',color='black',weight='bold')\n        #Adds informational text to the plot\n        ax.text(-80, -115, 'Number of People Infected',\n                    fontdict={'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\n        ax.text(-179, -55, 'Total Cases:\\n' + str(total_cases), \n                {'font':'Serif', 'size':'25','color': 'black','weight':'bold'})\n        ax.text(-179, -30, dates[frame_num], \n                {'font':'Serif', 'size':'32','color': 'black','weight':'bold'})\n        plt.title(title,\n              {'font':'Serif', 'size':'36','color': 'black','weight':'bold'})\n        #fills in countries with the colormap color according to how many covid cases there are\n        for i, pol in enumerate(poly):\n            if pol.geom_type=='Polygon': #error handling\n                pol = [pol]\n            ax.add_geometries(pol, crs=ccrs.PlateCarree(), \n                              facecolor=cmap(norm(cases[i])), #color=the corresponding cmap color\n                              edgecolor='none', zorder=1)\n        return plt.gca() #returns the plot\n    \n    #sets figure settings\n    fig = plt.figure(figsize=(20,12))\n    fig.patch.set_facecolor('#f5f5f5')\n    #creates an animation\n    anim = FuncAnimation(fig, animate, frames=frames, interval=10000) #change frames to <5 \n    #saves the animation as a gif                                      if designing new gif\n    anim.save(name + '.gif', writer='imagemagick', fps=2)\n    plt.close() #stops extra plot from appearing","11d55ff3":"#creates a gif for All Covid, Alpha variant, Delta variant, and Omicron variant\nfor variant in [None, 'Alpha', 'Delta', 'Omicron']:\n    make_global_gif(variant)","18869f2f":"#displays gif for All Covid\nHTML('<img src=\".\/Covid.gif\" \/>')","cfd38b6d":"#displays gif for Alpha variant\nHTML('<img src=\".\/Alpha.gif\" \/>')","de6dcc3d":"#displays gif for Delta variant\nHTML('<img src=\".\/Delta.gif\" \/>')","538cd07f":"#displays gif for Omicron variant\nHTML('<img src=\".\/Omicron.gif\" \/>')","bf4edb88":"def make_piechart_gif(country_name=None):\n    \"\"\"\n    This function takes a country name as a parameter then creates and \n    saves a gif of the proportion of covid variants  for that country. \n    If no country name is given, the gif will include all countries.\n    \"\"\"\n    \n    variant_mapping = { #maps all unnamed variants to 'Other'\n                    'Alpha': 'Alpha',\n                    'B.1.1.277': 'Other',\n                    'B.1.1.302': 'Other',\n                    'B.1.1.519': 'Other',\n                    'B.1.160': 'Other',\n                    'B.1.177': 'Other',\n                    'B.1.221': 'Other',\n                    'B.1.258': 'Other',\n                    'B.1.367': 'Other',\n                    'B.1.620': 'Other',\n                    'Beta': 'Beta',\n                    'Delta': 'Delta',\n                    'Epsilon': 'Epsilon',\n                    'Eta': 'Eta',\n                    'Gamma': 'Gamma',\n                    'Iota': 'Iota',\n                    'Kappa': 'Kappa',\n                    'Lambda': 'Lambda',\n                    'Mu': 'Mu',\n                    'Omicron': 'Omicron',\n                    'S:677H.Robin1': 'Other',\n                    'S:677P.Pelican': 'Other',\n                    'others': 'Other',\n                    'non_who': 'non_who'\n                    }\n    #create new dataset with variant mappings\n    data = covid_data.copy() \n    data['variant'] = data.variant.map(variant_mapping) \n    if country_name: #if a country is given shows only that country\n        data = data[(data.location==country_name) * \\\n                (data.variant != 'non_who')].reset_index(drop=True)\n        data = data.groupby(['variant', 'date']).num_sequences.sum().reset_index()\n        name = country_name\n        title = 'Covid Variants in ' + country_name\n\n    else: #else show global\n        data = data.groupby(['variant', 'date']).num_sequences.sum().reset_index()\n        data = data[data.variant != 'non_who'].reset_index(drop=True)\n        name = 'Global'\n        title = 'Covid Variants Globally'\n\n        \n    dates = sorted(data.date.unique().tolist()) #all dates in the dataset\n    frames = len(dates) #number of frames of the animation\n    variant_color_map = { #gives each variant its own color\n                    'Alpha': 'gold',\n                    'Other': 'yellowgreen',\n                    'Beta': 'lightcoral',\n                    'Delta': 'lightskyblue',\n                    'Epsilon': 'limegreen',\n                    'Eta': 'red',\n                    'Gamma': 'navy',\n                    'Iota': 'blue',\n                    'Kappa': 'magenta',\n                    'Lambda': 'crimson',\n                    'Mu': 'pink',\n                    'Omicron': 'orange'\n    }\n    #makes matplotlib figure\n    fig = plt.figure(figsize=(8,8))\n    fig.patch.set_facecolor('#f5f5f5')\n    \n    def animate(frame_num):\n        fig.clear() #clears the figure--if not weird frame overlap\n        #get stats\n        date_data = data[data.date==dates[frame_num]]\n        cases = date_data.num_sequences[date_data.num_sequences.values > 0].values.tolist()\n        total_cases = int(sum(cases))\n        perc = [(i \/ total_cases)*100 for i in cases]\n        variants = date_data.variant[date_data.num_sequences.values > 0].values.tolist()\n        explode = [0.01 for i in variants] \n        patches, texts = plt.pie(perc, #pie chart\n               explode=explode, \n               labels=variants, \n               colors=[variant_color_map[var] for var in variants])\n        \n        #set up legend\n        legend_labels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(variants, perc)]\n        patches, legend_labels, dummy =  zip(*sorted(zip(patches, legend_labels, cases),\n                                        key=lambda x: x[2],\n                                        reverse=True))\n        plt.legend(patches, legend_labels, loc='center', bbox_to_anchor=(-0.05, 0.8),\n           fontsize=10)\n        #add text to the figure\n        plt.text(0.95, 0.8, 'Total Cases:\\n' + str(total_cases), \n                {'font':'Serif', 'size':'12','color': 'black','weight':'bold'})\n        plt.text(0.95, 1, dates[frame_num], \n                {'font':'Serif', 'size':'16','color': 'black','weight':'bold'})\n        plt.title(title,\n              {'font':'Serif', 'size':'20','color': 'black','weight':'bold'})\n        return plt.gca()\n    \n\n    #creates an animation\n    anim = FuncAnimation(fig, animate, frames=frames, interval=10000) #change frames to <5 \n    #saves the animation as a gif                                      if designing new gif\n    anim.save(name + '.gif', writer='imagemagick', fps=2)\n    plt.close() #stops extra plot from appearing","9f15745c":"#creates a gif for global Covid, USA, India, and South Korea\nfor country in [None, 'United States of America', 'India', 'South Korea']:\n    make_piechart_gif(country)","b692ef20":"#displays gif for entire world\nHTML('<img src=\".\/Global.gif\" \/>')","be7cf050":"#displays gif for USA\nHTML('<img src=\".\/United States of America.gif\" \/>')","d79a1fc9":"#displays gif for india\nHTML('<img src=\".\/India.gif\" \/>')","a71c057f":"#displays gif for SK\nHTML('<img src=\".\/South Korea.gif\" \/>')","43d80d26":"<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">\n    Import Libraries and Read In Dataset\n<\/h1>","4ee2720e":"<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">\n    Animate the Spread of COVID Globally on a World Map \ud83c\udf0e \n<\/h1>\n\n\n<h3 style = \"font-size: 32px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #f5427e; text-align: center; border-radius: 100px 100px;\">Show the below cell to view the animation function.<\/h3>","63920563":"<h1 style = \"font-size:60px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">\n    \ud83e\udda0\ud83c\udf0e\ud83d\udccaVisualizing COVID Trends with Animations\n<\/h1>\n<img src=\"https:\/\/media.istockphoto.com\/photos\/coronavirus-covid19-new-variant-mutation-picture-id1336071300?b=1&k=20&m=1336071300&s=170667a&w=0&h=PO9o_qaO--nJAVoM35NW0uBEwnVN22UiljaX2if1kfM=\" style = \"display: block; margin-left: auto; margin-right: auto; width: 50%;\" \/>\n\n<h3 style = \"font-size: 32px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #f5427e; text-align: center; border-radius: 100px 100px;\">In this notebook we will create animations with matplotlib and cartopy that show how the corona virus has been spreading globally for the past 2 years.<\/h3>\n\n<h5 style = \"font-size: 24px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #d442f5; text-align: center; border-radius: 100px 100px;\">\n    Please upvote if you find this notebook useful :)\n    <\/h5>","ac9f1365":"<h3 style = \"font-size: 32px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #f5427e; text-align: center; border-radius: 100px 100px;\">\n    <strong>WARNING<\/strong>: Rendering these animations will take a while (aprox 40min each).\n    If you plan on creating your own animation, I recommend limiting the frames to below 5 \n    until you are happy with the result.\n<\/h3>","0bae887b":"<h3 style = \"font-size: 32px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #f5427e; text-align: center; border-radius: 100px 100px;\">\nI hope you enjoyed this notebook and try out animations for your own country!    \n<\/h3>","c847fdfe":"<h5 style = \"font-size: 24px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #d442f5; text-align: center; border-radius: 100px 100px;\">\n    Here are some additional tasks to try out:\n    <\/h5>\n<ul style = \"font-size: 16px; font-family:Georgia ; font-weight : bold; background-color: #f5f5f5 ; color : #d442f5; text-align: center; border-radius: 100px 100px;\">\n    <li>Create a custom colormap for the animation (1st animation)<\/li>\n    <li>Instead of changing colors based on number of cases, try setting the colors to change\n        based on percentage of population infected (1st animation)<\/li>\n    <li>Clean up the labels and change the colors (2nd animation)<\/li>\n<\/ul>","9d7ed769":"<h1 style = \"font-size:50px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #00bbf9; text-align: center; border-radius: 100px 100px;\">\n    Animate the Proportion of Covid Variants by Country with a Pie Chart \ud83e\udd67 \n<\/h1>\n\n<h3 style = \"font-size: 32px; font-family:Georgia ; font-weight : normal; background-color: #f5f5f5 ; color : #f5427e; text-align: center; border-radius: 100px 100px;\">Show the below cell to view the animation function.<\/h3>"}}