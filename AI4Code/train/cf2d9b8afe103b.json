{"cell_type":{"8ffb1c5c":"code","2d1ea5a9":"code","ba6fff2a":"code","dfd6ab60":"code","0dc0fb6b":"code","81d8d8bc":"code","9fd65a7b":"code","b27ca51e":"code","3fe3fc53":"code","cc4077c0":"markdown","f93f7316":"markdown","6572d48f":"markdown","71084b9d":"markdown","d60000a9":"markdown","82800d09":"markdown","74d8b149":"markdown","ea6aa6a0":"markdown","9ec089e9":"markdown","5f67ef5f":"markdown","ae10610f":"markdown","a3879162":"markdown"},"source":{"8ffb1c5c":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport os\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression,SGDRegressor,Ridge\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import roc_auc_score","2d1ea5a9":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/test.csv\")","ba6fff2a":"train_df.head()","dfd6ab60":"test_df.head()","0dc0fb6b":"train_ds = train_df.drop([\"id\",\"target\"],axis=1)\nlabels = train_df[\"target\"]\ntest_ds = test_df.drop([\"id\"],axis=1)\n\nprint(\"--------DETAILS OF TRAINING AND TESTING DATA SIZE---------\")\nprint(\"Number of instances in train data: \",len(train_ds))\nprint(\"Number of instances in test data: \",len(test_ds))\nprint(\"There are {} feature columns\".format(test_ds.shape[1]))\n\ncat_cols = []\nnum_cols = []\n\nfor col in test_ds.columns:\n    if test_ds[col].dtype == \"float64\":\n        num_cols.append(col)\n    else:\n        cat_cols.append(col)\n        \nprint(\"\\n--------DETAILS OF COLUMNS-------\")\nprint(\"There are {} categorical and {} numerical columns.\".format(len(cat_cols),len(num_cols)))\nprint(\"Categorical columns are: \",cat_cols)\nprint(\"Numerical columns are: \",num_cols)","81d8d8bc":"cat_encoder = LabelEncoder()\nscaler = StandardScaler()\n#scaler = MinMaxScaler()\n\nds = pd.concat([train_ds,test_ds],axis=0)\nfor col in cat_cols:\n    ds[col] = cat_encoder.fit_transform(ds[col])\n\n#ds[cat_cols] = scaler.fit_transform(ds[cat_cols])\ntrain_ds = ds.iloc[:len(train_ds),:]\ntest_ds = ds.iloc[len(train_ds):,:]\n\ntrain_ds.head()","9fd65a7b":"SEED = 143\nN_SPLITS = 10\nkfold = StratifiedKFold(n_splits=N_SPLITS, shuffle=True, random_state=SEED)\n\n\n'''sgd = SGDRegressor()\nlogreg = LogisticRegression(class_weight='balanced')\nparam = {'C':[0.001,0.003,0.005,0.01,0.03,0.05,0.1,0.3,0.5,1,2,3,3,4,5,10,20]}\nclf = GridSearchCV(logreg,param,scoring='roc_auc',refit=True,cv=10)\nclf.fit(train_ds,labels)\nprint('Best roc_auc: {:.4}, with best C: {}'.format(clf.best_score_, clf.best_params_))\nlr = LogisticRegression(C=clf.best_params_[\"C\"])'''\n\nrf_clf = RandomForestClassifier(max_depth=7, n_jobs=-1)\nparam = {'n_estimators':[150,200,225,250,275,300]}\nclf = GridSearchCV(rf_clf,param,scoring='roc_auc',refit=True,cv=10)\nclf.fit(train_ds,labels)\nprint('Best roc_auc: {:.4}, with best C: {}'.format(clf.best_score_, clf.best_params_))\nclf = RandomForestClassifier(n_estimators=clf.best_params_[\"n_estimators\"], max_depth=7, n_jobs=-1)","b27ca51e":"i=1\npred_test_full =0\nmax_auc = 0\n\nfor train_idx,test_idx in kfold.split(train_ds,labels):\n    print(' Running {} of KFold {}'.format(i,kfold.n_splits))\n    xtr,xvl = train_ds.loc[train_idx],train_ds.loc[test_idx]\n    ytr,yvl = labels.loc[train_idx],labels.loc[test_idx]\n    \n    #lr.fit(xtr,ytr)\n    #sgd.fit(xtr,ytr)\n    clf.fit(xtr,ytr)\n    score = roc_auc_score(yvl,clf.predict(xvl))   \n    print('ROC AUC score:',score)\n        \n    pred_test = clf.predict_proba(test_ds)[:,1]                #sgd.predict(test_ds)   #lr.predict_proba(test_ds)[:,1]\n    pred_test_full +=pred_test\n    i+=1","3fe3fc53":"# dividing by number of folds\ny_pred = pred_test_full\/N_SPLITS\n\npred_csv = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")\npred_csv.target = y_pred\n\npred_csv.to_csv(\"submission.csv\",index=False)","cc4077c0":"# Visualization","f93f7316":"# Submission","6572d48f":"# Details of Data","71084b9d":"### **I am using StratifiedKFold to divide the data into training and validation and searching for best hyper parameter C using GridSearchCV and using the same for training.**","d60000a9":"# Hyperparameter Tuning","82800d09":"# Loading Data","74d8b149":"## The following competition is basically to get used to working on tabular data. I used scikit learn to solve this problem. Lets dive in :)","ea6aa6a0":"# Preprocessing Data","9ec089e9":"# Introduction","5f67ef5f":"## That's it, you have done it\u270c\ud83d\udc4f.\n\n**Kindly give me suggestions regarding training or preprocessing the data. Always open to learn\ud83d\ude0a.**\n###  Happy coding\u2764","ae10610f":"## COMING SOON :)","a3879162":"# Training and prediction"}}