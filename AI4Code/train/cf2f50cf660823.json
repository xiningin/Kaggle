{"cell_type":{"331e5156":"code","7d5c6cd1":"code","4797727c":"code","c6683b70":"code","58da17cb":"code","8d507f63":"code","da0ddba5":"code","1bcf5a71":"code","3876581a":"code","d9715732":"code","ccc13a6e":"code","2951b55d":"code","1c0f94f8":"code","d4fe7076":"code","ba94dc12":"code","578a2c65":"code","fe1decb3":"markdown","3dc0e1d2":"markdown","5b74666a":"markdown","c15df0f6":"markdown","fa26367b":"markdown","d7e38fdf":"markdown","c17eb4a1":"markdown","1a943896":"markdown","aceff4e2":"markdown","d2158508":"markdown","d73366cb":"markdown","443637f8":"markdown","fbf4640b":"markdown","dfa860b8":"markdown","28f0e885":"markdown","a744533a":"markdown","3d1c8787":"markdown","e8dd0121":"markdown","4464c9d8":"markdown","b47554dc":"markdown","8612a982":"markdown","838b5c32":"markdown","59aab5fe":"markdown"},"source":{"331e5156":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\nimport folium\nfrom folium.plugins import HeatMap, HeatMapWithTime","7d5c6cd1":"# Read in the data\ndf = pd.read_csv(\"..\/input\/cincinnati-car-crash-data\/cincinnati_traffic_crash_data__cpd.csv\")","4797727c":"df.head()","c6683b70":"df.info() # the crash location is not always recorded, gender is not always taken","58da17cb":"df.describe() # something is weird about Crash Severity ID","8d507f63":"# Fix the Crash Severity ID\ndef CrashSeverityIDFixed(x):\n    if x == 201905.0:\n        return 5\n    elif x == 201904.0:\n        return 4\n    elif x == 201903.0:\n        return 3\n    elif x == 201902.0:\n        return 2\n    elif x == 201901.0:\n        return 1\n    else: \n        return x\n    \ndf['CRASHSEVERITYID'] = df['CRASHSEVERITYID'].apply(lambda x: CrashSeverityIDFixed(x))\n\n# Fix Gender\ndf.loc[(df['GENDER'] == 'MALE'), 'GENDER']='M - MALE'\ndf.loc[(df['GENDER'] == 'FEMALE'), 'GENDER']='F - FEMALE'\n\n# Fix CRASHSEVERITY\ndf.loc[(df['CRASHSEVERITY'] == '1 - FATAL'), 'CRASHSEVERITY']='1 - FATAL INJURY'\ndf.loc[(df['CRASHSEVERITY'] == '3 - PROPERTY DAMAGE ONLY (PDO)'), 'CRASHSEVERITY']='5 - PROPERTY DAMAGE ONLY'\n\n# Create a simple loop to fix the other 6 columns\ncols = ['INJURIES', 'LIGHTCONDITIONSPRIMARY', 'ROADCONDITIONSPRIMARY', 'ROADSURFACE', 'WEATHER', 'CRASHSEVERITY']\n\nfor col in cols:\n    df[col] = df[col].str.split(\" - \", 1).str[1]\n    \n# Adjust some column types\ndf = df.astype({\"CRASHSEVERITYID\": object, \"LOCALREPORTNO\": object})","da0ddba5":"# Date Adjustments\ndf['CRASHDATE'] = pd.to_datetime(df['CRASHDATE'])\ndf['CRASH_SHORTDATE'] = df['CRASHDATE'].dt.strftime('%Y\/%m')\ndf['CRASH_YEAR'] = pd.DatetimeIndex(df['CRASHDATE']).year\ndf['CRASH_MONTH'] = pd.DatetimeIndex(df['CRASHDATE']).month\ndf['CRASH_DAY'] = pd.DatetimeIndex(df['CRASHDATE']).day\ndf['CRASH_DAYOFWEEK'] = pd.DatetimeIndex(df['CRASHDATE']).day_name()\ndf['CRASH_ISWKND'] = df['CRASH_DAYOFWEEK'].apply(lambda x: 1 if x in [5,6] else 0) \n\n# Time Adjustments\ndf['CRASH_HOUR'] = pd.DatetimeIndex(df['CRASHDATE']).hour\n\ndef TimeofDay(x):\n    if 4 <= x <= 7:\n        return 'Early Morning'\n    elif 8 <= x <= 11:\n        return 'Morning'\n    elif 12 <= x <= 15:\n        return 'Noon'\n    elif 16 <= x <= 19:\n        return 'Evening'\n    elif 20 <= x <= 23:\n        return 'Night'\n    else:\n        return 'Midnight'\n\ndf['CRASH_TIMEOFDAY'] = df['CRASH_HOUR'].apply(lambda x: TimeofDay(x))\n","1bcf5a71":"# Crash Severity\ndf_severity = df[\"CRASHSEVERITY\"].value_counts()\n\n# Define the plots\nfig, ax = plt.subplots(figsize = (10,6))\ndf_severity.plot(kind='bar',\n        align='center', width=.5, edgecolor='black', ax=ax)\n\n# Format Labels\nplt.xticks(rotation=20)\nplt.title(\"Crash Severity\", fontdict = {'size':16})\nplt.ylabel(\"Count of Severity\", fontdict = {'size':12})\nplt.xlabel(\"\")\nfor i in range(6):\n    plt.text(x = i, y = round(df_severity[i],2), s = '{:,}'.format(df_severity[i]), horizontalalignment = 'center', verticalalignment = 'bottom')\nplt.show()","3876581a":"# Crash Severity\ndf_unit = df[\"UNITTYPE\"].value_counts()[:10]\n\n# Define the plots\nfig, ax = plt.subplots(figsize = (14,8))\ndf_unit.plot(kind='bar',\n        align='center', width=.5, edgecolor='black', \n        color=list('r'*2) + list(['gray']*8), ax=ax)\n\n# Format Labels\nplt.xticks(rotation=20)\nplt.title(\"Types of Vehicles Involved in Crashes\", fontdict = {'size':16})\nplt.ylabel(\"Count\", fontdict = {'size':12})\nplt.xlabel(\"\")\n# for i in range(7):\n#     plt.text(x = i, y = round(df_severity[i],2), s = '{:,}'.format(df_severity[i]), horizontalalignment = 'center', verticalalignment = 'bottom')\nplt.show()","d9715732":"df_age_crash = df.groupby('AGE')[\"CRASHSEVERITY\"].value_counts().unstack()\n\ndf_age_crash.plot(\n    kind=\"bar\",\n    figsize = (18,10),\n    color=[\"brown\", \"red\", \"green\", \"navy\", 'gold','plum'],\n    width=.80,\n    title='Crash Severity by Age Group',\n    ylabel='Count of Severity',\n    xlabel=''\n)","ccc13a6e":"df_pie = df['CRASH_DAYOFWEEK'].value_counts(normalize = True).reset_index()\ndf_pie['CRASH_DAYOFWEEK'] = 100*df_pie['CRASH_DAYOFWEEK']\nplt.figure(figsize = (7,7))\nplt.pie(\n    x = df_pie['CRASH_DAYOFWEEK'], \n    colors=[\"red\", \"springgreen\", \"yellow\", \"lavender\", 'tan','plum', 'cyan'], \n    labels = df_pie['index'], \n    explode = [0.1,0,0,0,0,0,0], \n    shadow = True, autopct = '%1.1f%%',\n    startangle=90\n)\nplt.show()","2951b55d":"piv = pd.pivot_table(columns = df['CRASH_DAY'], values = 'CRASH_DAY' ,index = 'CRASH_MONTH' , aggfunc = 'count', data = df)\n\nplt.figure(figsize = (18,8))\nsns.heatmap(piv, cmap = 'Greens')\n\nplt.yticks(np.arange(0.5,12.5) ,['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sept','Oct','Nov','Dec'])\nplt.xlabel('')\nplt.ylabel('')\nplt.title(\"Frequency of Crashes by Month and Day\", fontdict = {'size':16})\n\nplt.show()","1c0f94f8":"piv = pd.pivot_table(columns = df['CRASH_TIMEOFDAY'], values = 'CRASH_TIMEOFDAY' ,index = 'CRASH_DAYOFWEEK' , aggfunc = 'count', data = df)\n\n# redo the index\npiv = piv.reindex(\n    index = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'], \n    columns = ['Early Morning','Morning','Noon','Evening','Night','Midnight'])\n\n\nplt.figure(figsize = (12,6))\nsns.heatmap(piv, cmap = 'Blues')\n\nplt.xlabel('')\nplt.ylabel('')\nplt.title(\"Frequency of Crashes by Day and Time\", fontdict = {'size':16})\nplt.show()","d4fe7076":"# Create some Markers\nmarkers = [\n    {\n        'lat': 39.106989, \n        'lon': -84.514475,\n        'tip': '<p style=\"font-weight: bold\">Central Pkwy<\/p>', \n        'desc': '''\n        <article style=\"width:225px; text-align: center;\">\n            <p style=\"font-weight: bold\">Central Pkwy<\/p> \n            <p>A main route through downtown<\/p>\n            <p>Many people speed down this street after exiting from the highway <\/p>\n        <\/article>\n        '''\n    },\n    {\n        'lat': 39.124244, \n        'lon':  -84.534191,\n        'tip': '<p style=\"font-weight: bold\">Western Hills Viaduct<\/p>',\n        'desc': '''\n        <article style=\"width:225px; text-align: center;\">\n            <p style=\"font-weight: bold\">Western Hills Viaduct<\/p> \n            <p>A major entrance and exit ramp onto I-75<\/p>\n        <\/article>\n        '''\n    },\n    {\n        'lat': 39.097067, \n        'lon':  -84.521103,\n        'tip': '<p style=\"font-weight: bold\">I-75 & I-71 Junction<\/p>',\n        'desc': '''\n        <article style=\"width:225px; text-align: center;\">\n            <p style=\"font-weight: bold\">I-75 & I-71 Junction<\/p> \n            <p>I-75 and I-71 merge at this point<\/p>\n            <p>It is a really confusing connection of highways<\/p>\n        <\/article>\n        '''\n    },\n    {\n        'lat': 39.137631, \n        'lon':  -84.548229,\n        'tip': '<p style=\"font-weight: bold\">Intersection at Hopple St<\/p>',\n        'desc': '''\n        <article style=\"width:225px; text-align: center;\">\n            <p style=\"font-weight: bold\">Intersection at Hopple St<\/p> \n            <p>One of the major roadways leading to I-75.<\/p>\n            <p>It has been under construction for a while<\/p>\n        <\/article>\n        '''\n    },\n    {\n        'lat': 39.125009, \n        'lon':  -84.468020,\n        'tip': '<p style=\"font-weight: bold\">Columbia Pkwy<\/p>',\n        'desc': '''\n        <article style=\"width:225px; text-align: center;\">\n            <p style=\"font-weight: bold\">Columbia Pkwy<\/p> \n            <p>A main route into downtown from the east side of Cincinnati<\/p>\n            <p>There is no median on this road and the speed limit says 45mph<\/p>\n            <p>However, people always go 10mph over<\/p>\n        <\/article>\n        '''\n    },\n    {\n        'lat': 39.125009, \n        'lon':  -84.468020,\n        'tip': '<p style=\"font-weight: bold\">Columbia Pkwy<\/p>',\n        'desc': '''\n        <article style=\"width:225px; text-align: center;\">\n            <p style=\"font-weight: bold\">Columbia Pkwy<\/p> \n            <p>A main route into downtown from the east side of Cincinnati<\/p>\n            <p>There is no median on this road and the speed limit says 45mph<\/p>\n            <p>However, people always go 10mph over<\/p>\n        <\/article>\n        '''\n    }\n]","ba94dc12":"# create the initial map\ncincy  = folium.Map(location = [39.117072, -84.520164],control_scale=True, zoom_start=14)\n\n# Triple checking that the colum is float\ndf['LATITUDE_X'] = df['LATITUDE_X'].astype(float)\ndf['LONGITUDE_X'] = df['LONGITUDE_X'].astype(float)\n\n# Filter down the data so that we only look at fatal crashes in 2020\nheat_df = df[df['CRASH_YEAR']==2020]\nheat_df = df[df['CRASHSEVERITY'] == 'FATAL INJURY']\nheat_df = heat_df[['LATITUDE_X', 'LONGITUDE_X']]\nheat_df = heat_df.dropna(axis=0, subset=['LATITUDE_X','LONGITUDE_X'])\n\n# Create a list of lists with list comprehension\nheat_data = [[row['LATITUDE_X'],row['LONGITUDE_X']] for index, row in heat_df.iterrows()]\n\n# Create a Title\ntitle_html = '''<h3 align=\"center\" style=\"font-size:18px\"><b>Cincinnati Fatal Crashes 2020<\/b><\/h3>'''\ncincy.get_root().html.add_child(folium.Element(title_html))\n\n# Add some markers\nfor marker in markers:\n    folium.Marker([marker['lat'], marker['lon']],\n                  popup = marker['desc'],\n                  tooltip = marker['tip'],\n                  icon=folium.Icon(color='red'),\n                  min_width=300\n                 ).add_to(cincy)\n\n# Plot it on the map\nHeatMap(heat_data).add_to(cincy)\n\n# Display the map\ncincy\n","578a2c65":"# Create a fresh map\ncincy  = folium.Map(location = [39.117072, -84.520164],control_scale=True, zoom_start=14)\n\n# Filtering down the data to make a weight column based on crash severity\ndf_hm = df[(df['CRASHSEVERITY'] == 'FATAL INJURY') | (df['CRASHSEVERITY'] == 'SERIOUS INJURY SUSPECTED') | (df['CRASHSEVERITY'] == 'INJURY')] \\\n.groupby(['CRASH_SHORTDATE', 'LATITUDE_X','LONGITUDE_X'])['CRASHSEVERITY'].count().to_frame().reset_index()\n\n# Sort by Date\ndf_hm['CRASH_SHORTDATE'] = df_hm['CRASH_SHORTDATE'].sort_values(ascending=True)\n\n# Create a list of lists\ndata = []\nfor _, d in df_hm.groupby('CRASH_SHORTDATE'):\n    data.append([[row['LATITUDE_X'], row['LONGITUDE_X'], row['CRASHSEVERITY']] for _, row in d.iterrows()])\n    \n\n# Create a Title\ntitle_html = '''<h3 align=\"center\" style=\"font-size:16px\"><b>Cincinnati Fatal Crashes Over Time<\/b><\/h3>'''\n\ncincy.get_root().html.add_child(folium.Element(title_html))\n\n# Add Markers\nfor marker in markers:\n    folium.Marker([marker['lat'], marker['lon']],\n                  popup = marker['desc'],\n                  tooltip = marker['tip'],\n                  icon=folium.Icon(color='red'),\n                  min_width=300\n                 ).add_to(cincy)\n\n# Create the HeatMap\nhm = HeatMapWithTime(data, auto_play=True,max_opacity=0.8)\nhm.add_to(cincy)\n\ncincy","fe1decb3":"## <font color = 'blue'>Location Data using Folium <a class=\"anchor\" id=\"Section5\"><\/a> ","3dc0e1d2":"### Data Cleaning\n\n* Adjust the `Crash Severity ID` since it does not line up in a same step scale as the `Crash Severity`\n    * There are values like `201905.0` and `201904.0` which should just be 5 & 4 respectively.\n    * This lines up with the ID captured in column `CRASHSEVERITY`\n    \n    \n* 7 columns have issues with small variations in category names, for instance 'Other' is encoded as '9 - Other' and '99 - Other', or \"M - Male\" and \"Male\".  I will treat those as the same values;\n    * Columns with this issue present:\n        * `GENDER`\n        * `CRASHSEVERITY`\n        * `INJURIES`\n        * `LIGHTCONDITIONSPRIMARY`\n        * `ROADCONDITIONSPRIMARY`\n        * `ROADSURFACE`\n        * `WEATHER`\n        \n        \n* Change the column type of `LOCALREPORTNO` to 'object'","5b74666a":"## <font color = 'blue'>Understanding the Data<a class=\"anchor\" id=\"Section3\"><\/a>","c15df0f6":"## <font color = 'blue'> Wrapping it up! <a class=\"anchor\" id=\"Section6\"><\/a> \n    \nThere are many more columns and metrics to explore in this dataset.  I didn't even touch on the light and road conditions, gender differences, and seasonal trends.  **What else can you find in this data?**\n    \n \nIf you made it this far please give it a thumbs up and leave a comment on anything you think I can improve on!\n\n<img src=\"https:\/\/media.giphy.com\/media\/111ebonMs90YLu\/giphy.gif\">","fa26367b":"**Inference**: Driving on a Friday results in the most reported crashes.  This could be due to people trying to get home quickly after finishing work on Fridays ","d7e38fdf":"### Day of the Month and Crashes","c17eb4a1":"# Visualizing Cincinnati Car Crash Data w\/ Folium","1a943896":"Folium is a great library for creating visualization on maps. With just some initial work on your end to format the data, Folium makes the hassle of creating a great map super easy.  If you know some HTML\/CSS you can customize even more of the elements on the map too!\n\nI used Folium to create two visualizations that use `HeatMap` and `HeatMapWithTime` plugins.   \n\nLet's get into it! ","aceff4e2":"**Inference:** Fatal or serious injuries are infrequent which is good news!","d2158508":"## <font color = 'blue'>Importing the Libraries and Data <a class=\"anchor\" id=\"Section2\"><\/a>","d73366cb":"## <font color = 'blue'>Introduction <a class=\"anchor\" id=\"Section1\"><\/a>\n\nThe City of Cincinnati has been regularly updating some great datasets on public initiatives to [Open Data Cincinnati](https:\/\/data.cincinnati-oh.gov\/).  The datasets cover a wide range of topics related to safety, growing economic opportunities, thriving neighborhoods, fiscal sustainability, and much more.  The purpose of these datasets is to:\n>  To provide access to government data, encourage the development of creative tools to engage, serve and improve our neighborhoods and the quality of life of our residents.\n    \nThis notebook explores the dataset containing the **car crashes reported by the Cincinnati Police Department** from 2010 to now.  The dataset includes a good amount of different information ranging from the location, injuries, type of car, road conditions, and even more variables not covered in this notebook.\n    \n### <font color = 'blue'>Setting the Stage\n\nCincinnati, Ohio is located in southwest Ohio along the Ohio river. What makes Cincinnati traffic kinda unique is that two major US highways merge right in the heart of downtown.  Interstate 75 goes from the tip of Michigan all the way to southern Florida.  Interstate 71 runs from Cleveland Ohio all the way to Louisville Kentucky.  There is also a series of state highways that cross between the many different suburbs. \n","443637f8":"**Inference** \n* The age group 18-25 are typically involved in more crashes since this group is normally the least experienced drivers and\/or make more wreckless decisions\n* The age group Under 18 has a greater occurance of an injury resulting from a crash.  This is the only group with **Injury** almost comparable to **Property Damage**","fbf4640b":"### Severity of crashes","dfa860b8":"**Inference** \n\nThis is not what I was expecting...  My original notion was that crashes were more frequent around US holidays.  I guess that since holidays like Labor Day, Memorial Day, and Thanksgiving all move around on the day of week between each year the data does not have any large spikes on those days.\n\nIt is easy to point out that there are little reported crashes on Christmas Day, and a lot of reported crashes on Halloween (10\/31)\n","28f0e885":"### Day of the Week ","a744533a":"### Viewing crash severity by different age groups","3d1c8787":"### Time and Day of Crashes","e8dd0121":"## <font color = 'blue'>Exploratory Data Analysis <a class=\"anchor\" id=\"Section4\"><\/a> ","4464c9d8":"## Table of Contents\n    \n* [Introduction](#Section1)\n    * Setting the Stage\n* [Importing Libraries and Data](#Section2)\n* [Understanding the Data and Feature Engineering](#Section3)\n* [Exploratory Data Analysis](#Section4)\n* [Location Data Using Folium](#Section5)\n* [Wrapping it up!](#Section6)","b47554dc":"### Types of cars involved in crashes","8612a982":"**Inference**\n\nCrashes most often occur in the evening hours during the week.  This lines up exactly when the Cincinnati rush hour starts between 4 - 7pm. Also known as '***the drive as 5***'","838b5c32":"### Feature Engineering\n\n* Extract the date and time from the `CRASHDATE` column\n* Create additional slices to the `CRASHDATE` column to include month, day, weekend or not\n* Create additional column to slice up the time extracted from `CRASHDATE`\n    * Early Morning (04:00 - 07:00am)\n    * Morning (08:00 - 11:00am)\n    * Noon (12:00 - 03:00pm)\n    * Evening (04:00 - 07:00pm)\n    * Night (08:00 - 11:00pm)\n    * Midnight (12:00am - 03:00am)","59aab5fe":"**Inference:** As expected the most common car on the road is involved in the most crashes"}}