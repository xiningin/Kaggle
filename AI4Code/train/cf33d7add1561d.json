{"cell_type":{"6af43beb":"code","6ad7fcfe":"code","cff60769":"code","4ee5db2c":"code","b3bb9614":"code","19182e65":"code","d9e8941f":"code","1c13fbb4":"code","12443dde":"code","335fa5c2":"code","7efc6ee9":"code","8a1b1f8b":"code","caadc6ca":"code","a7aa2afa":"code","d04b62f0":"code","aa9cff93":"code","cdc0bcc4":"code","920274a0":"code","ff277737":"code","b9b0690a":"code","90df0185":"code","0a19de5a":"code","ef32f7b0":"code","ac8eb698":"code","1b90d219":"code","4fa82208":"code","4adbbd23":"code","75bb7723":"code","e07080b1":"code","d717d248":"code","19ad4e64":"code","12be4da4":"code","e49f2a96":"code","017afb1f":"code","3a62b5e1":"code","505859b2":"code","78429faa":"code","a2fbdf81":"code","e9e1da57":"markdown","dab94c6a":"markdown","29b4a3de":"markdown","b996a8dc":"markdown","771905c5":"markdown"},"source":{"6af43beb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6ad7fcfe":"data = pd.read_csv(\"..\/input\/crab-age-prediction\/CrabAgePrediction.csv\")\n\ndata[\"Sex\"] = data[\"Sex\"].map( {\"F\": 2, \"M\": 1, \"I\": 0})\n\ndata.head()","cff60769":"data.info()","4ee5db2c":"data.describe()","b3bb9614":"col_values = data.columns.values\n\ncol_values","19182e65":"fig, axis = plt.subplots(4, 2, figsize=(12, 12))\n\ncnt = 0\n\nfor i in range(4):\n    for j in range(2):\n        axis[i, j].plot(data[col_values[cnt]], data[\"Age\"], 'o', markersize=4)\n        axis[i, j].set_xlabel(col_values[cnt], size=10)\n        axis[i, j].set_ylabel(\"Age\", size=10)\n        axis[i, j].set_title(f\"Age vs. {col_values[cnt]}\", size=12)\n        cnt+=1\n\nfig.tight_layout()","d9e8941f":"corr = data.corr()\nfig, ax = plt.subplots(figsize=(10,7)) \nsns.heatmap(corr)\nplt.title(\"Correlation matrix of features\")\nplt.show()","1c13fbb4":"corr","12443dde":"def feature_band_remarked(data, feature, bins=5, factor=100):\n    bandname = f\"{feature}Band\"\n    \n    data[feature] *= factor\n    data[bandname] = pd.cut(data[feature], bins)\n    \n    log = data[[bandname, 'Age']].groupby([bandname], as_index=False).mean().sort_values(by=bandname, ascending=True)\n\n    band = log[bandname]\n    \n    for i in range(bins):\n        left = band[i].left\n        right = band[i].right\n        \n        if i == 0:\n            data.loc[ data[feature] <= right, feature] = i\n        \n        else:\n            data.loc[(data[feature] > left) & (data[feature] <= right), feature] = i\n\n    data = data.drop(bandname, axis=1)\n    \n    return data, log","335fa5c2":"def normal_feature(data, feature, mode=1):\n    if mode == 1:\n        data[feature] = (data[feature] - data[feature].mean()) \/ data[feature].std()\n        \n    else:\n        data[feature] = data[feature] \/ data[feature].max()\n    \n    return data","7efc6ee9":"col_values = col_values[1:-1]\n\nprint(col_values)","8a1b1f8b":"logs = []\n\ndata_band = data.copy()\ndata_normal = data.copy()\n\nfor feature in col_values:\n    data_band, log = feature_band_remarked(data_band, feature, bins=10, factor=1000)\n    logs.append(log)\n\nfor feature in col_values:\n    data_normal = normal_feature(data_normal, feature)","caadc6ca":"data_band.astype(int)\ndata_band.head()","a7aa2afa":"data_normal.head()","d04b62f0":"# Original\nx = data.drop(\"Age\", axis=1)\ny = data[\"Age\"]\n\nx_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)\n\nprint(f\"\\nTotal:\\t{x.shape[0]}\")\nprint(f\"Train:\\t{x_train_val.shape[0]}\")\nprint(F\"Test:\\t{x_test.shape[0]}\")","aa9cff93":"from sklearn.ensemble import RandomForestRegressor\n\nforest_org = RandomForestRegressor(200, random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)\n\n%time forest_org.fit(x_train_val, y_train_val)\n\nforest_org.score(x_test, y_test)","cdc0bcc4":"y_pred = forest_org.predict(x_test)\n\nprint(y_pred[:10])\nprint(y_test[None, :10])","920274a0":"plt.figure(figsize=(10, 9))\n\nabs_org = abs(y_pred - y_test)\n\nplt.plot(y_test, abs_org, 'bo', markersize=8)\nplt.xlabel(\"Age\", size=12)\nplt.title(\"Original\", size=14)\nplt.grid()","ff277737":"# Banding\nx = data_band.drop(\"Age\", axis=1)\ny = data_band[\"Age\"]\n\nx_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)\n\nprint(f\"\\nTotal:\\t{x.shape[0]}\")\nprint(f\"Train:\\t{x_train_val.shape[0]}\")\nprint(F\"Test:\\t{x_test.shape[0]}\")","b9b0690a":"forest_band = RandomForestRegressor(200, random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)\n\n%time forest_band.fit(x_train_val, y_train_val)\n\nforest_band.score(x_test, y_test)","90df0185":"y_pred = forest_band.predict(x_test)\n\nprint(y_pred[:10])\nprint(y_test[None, :10])","0a19de5a":"plt.figure(figsize=(10, 9))\n\nabs_banding = abs(y_pred - y_test)\n\nplt.plot(y_test, abs_banding, 'bo', markersize=8)\nplt.xlabel(\"Age\", size=12)\nplt.title(\"Banding\", size=14)\nplt.grid()","ef32f7b0":"# Normalization\nx = data_normal.drop(\"Age\", axis=1)\ny = data_normal[\"Age\"]\n\nx_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)\n\nprint(f\"\\nTotal:\\t{x.shape[0]}\")\nprint(f\"Train:\\t{x_train_val.shape[0]}\")\nprint(F\"Test:\\t{x_test.shape[0]}\")","ac8eb698":"forest_normal = RandomForestRegressor(200, random_state = 1, max_features = 'sqrt', n_jobs = 1, verbose = 1)\n\n%time forest_normal.fit(x_train_val, y_train_val)\n\nforest_normal.score(x_test, y_test)","1b90d219":"y_pred = forest_normal.predict(x_test)\n\nprint(y_pred[:10])\nprint(y_test[None, :10])","4fa82208":"plt.figure(figsize=(10, 9))\n\nabs_normal = abs(y_pred - y_test)\n\nplt.plot(y_test, abs_normal, 'bo', markersize=8)\nplt.xlabel(\"Age\", size=12)\nplt.title(\"Normalization\", size=14)\nplt.grid()","4adbbd23":"plt.figure(figsize=(10, 9))\nplt.plot(y_test, abs_org, 'r*', markersize=8, label=\"orginal\", alpha=0.5)\nplt.plot(y_test, abs_banding, 'go', markersize=8, label=\"banding\", alpha=0.5)\nplt.plot(y_test, abs_normal, 'b.', markersize=8, label=\"normalization\", alpha=0.5)\nplt.xlabel(\"Age\", size=12)\nplt.legend()\nplt.grid()","75bb7723":"import numpy as np\n\nnp.mean(abs_org), np.mean(abs_banding), np.mean(abs_normal)","e07080b1":"learning_rate = 1e-3\nepochs = 200","d717d248":"import tensorflow.keras as keras\n\nclass Keras_Model(keras.Model):\n    def __init__(self):\n        super(Keras_Model, self).__init__()\n\n        self.act = keras.layers.Activation(\"relu\")\n\n        self.block_1 = keras.Sequential()\n        for i in range(3):\n            self.block_1.add(keras.layers.Dense(32))\n            self.block_1.add(self.act)\n\n        self.fc_out = keras.layers.Dense(1)\n\n    def call(self, inputs, training=None, mask=None):\n        x = self.block_1(inputs)\n        x = self.fc_out(x)\n        return x\n\n    def get_config(self):\n        config = super(Keras_Model, self).get_config()\n        config.update()\n        return config","19ad4e64":"opt = keras.optimizers.RMSprop(\n    learning_rate=learning_rate,\n)\nmodel = Keras_Model()\nmodel.compile(\n    optimizer=opt,\n    loss=\"mae\"\n)","12be4da4":"# Normalization\nx = data_normal.drop(\"Age\", axis=1)\ny = data_normal[\"Age\"]\n\nx_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.2, shuffle=False)\n\nhistory = model.fit(\n        x=x_train_val, y=y_train_val,\n        validation_data=(x_test, y_test),\n        epochs=epochs,\n        verbose=0\n    )","e49f2a96":"plt.figure(figsize=(10,8))\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model\\'s Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')","017afb1f":"log = model.evaluate(x_test, y_test)\n\nprint(f\"\\nTest Loss: {log}\")","3a62b5e1":"y_pred = model.predict(x_test)\n\ny_pred = y_pred[:,0]\n\nprint(y_pred[:10])\nprint(y_test[None, :10])","505859b2":"plt.figure(figsize=(10, 9))\n\nabs_dnn = abs(y_pred - y_test)\n\nplt.plot(y_test, abs_dnn, 'bo', markersize=8)\nplt.xlabel(\"Age\", size=12)\nplt.title(\"Keras\", size=14)\nplt.grid()","78429faa":"plt.figure(figsize=(12, 9))\nplt.plot(y_test, abs_dnn, 'yo', markersize=8, label=\"keras\", alpha=0.65)\nplt.plot(y_test, abs_org, 'r*', markersize=8, label=\"orginal\", alpha=0.65)\nplt.plot(y_test, abs_banding, 'go', markersize=8, label=\"banding\", alpha=0.65)\nplt.plot(y_test, abs_normal, 'b.', markersize=8, label=\"normalization\", alpha=0.65)\nplt.xlabel(\"Age\", size=12)\nplt.legend()\nplt.grid()","a2fbdf81":"print(f\"RF with Orginal:\\t{np.mean(abs_org)}\")\nprint(f\"RF with Banding:\\t{np.mean(abs_banding)}\")\nprint(f\"RF with Normalization:\\t{np.mean(abs_normal)}\")\nprint(f\"Keras DNN:\\t\\t{log}\")","e9e1da57":"# RandForest\n\n---\n\n## 1. Original","dab94c6a":"## 3. Normalization","29b4a3de":"# Keras\n","b996a8dc":"## 2. Banding","771905c5":"---"}}