{"cell_type":{"682c64bd":"code","f98fc238":"code","cfbab6b0":"code","7126542b":"code","ec6f5a04":"code","61e8c481":"code","547e0066":"code","36b07814":"code","8b2dd8dd":"code","79905218":"code","8ecc568f":"code","e507b901":"code","54238c14":"code","88d248ca":"code","9e691f6c":"code","06f703ab":"code","c2f1b44c":"code","78b8e2a1":"code","bcb0157f":"code","69e3d8b5":"code","b18571a2":"code","a089aab5":"code","1fe4f216":"code","44badbed":"markdown","c5f7841d":"markdown","515cc8b1":"markdown","3e3481e3":"markdown","c63a3a2f":"markdown","ee2ca519":"markdown","57a6ac08":"markdown","9f208e39":"markdown","2455f71c":"markdown"},"source":{"682c64bd":"!pip install -q efficientnet","f98fc238":"import os, random, re, math, time\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nimport efficientnet.tfkeras as efn\nimport PIL\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\nfrom kaggle_datasets import KaggleDatasets\nfrom tqdm import tqdm\n\nprint('tensorflow version', tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE\nrandom.seed(457)","cfbab6b0":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Runnig on TPU', tpu.master())\nexcept ValueError:\n    tpu=None\n    \nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy()\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","7126542b":"# change the image size here\nIMAGE_SIZE = [512, 512]\n\n# epoch 32 was not possible\nEPOCHS = 20 \nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nGCS_DS_PATH    = KaggleDatasets().get_gcs_path(f'melanoma-{IMAGE_SIZE[0]}x{IMAGE_SIZE[0]}')\nBASEPATH = \"..\/input\/siim-isic-melanoma-classification\"\ndf_train = pd.read_csv(os.path.join(BASEPATH, 'train.csv'))\ndf_test  = pd.read_csv(os.path.join(BASEPATH, 'test.csv'))\ndf_sub   = pd.read_csv(os.path.join(BASEPATH, 'sample_submission.csv'))\n\nTRAINING_FILENAMES = tf.io.gfile.glob(GCS_DS_PATH + '\/train*.tfrec')\nTEST_FILENAMES  = tf.io.gfile.glob(GCS_DS_PATH + '\/test*.tfrec')\n\nCLASSES = {0:'benign', 1:'malignant'}","ec6f5a04":"# given below are all the functions required for visualizations\nnp.set_printoptions(threshold=15, linewidth=80)\n\ndef batch_to_numpy_images_and_labels(data):\n    # input data which has images and labels only\n    images, labels = data\n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    if numpy_labels.dtype == object:\n        numpy_labels = [None for _ in enumerate(numpy_images)]\n    return numpy_images, numpy_labels\n\ndef title_from_label_and_target(label, correct_label):\n    if correct_label is None:\n        return CLASSES[label], True\n    correct = (label == correct_label)\n    return \"{} [{}{}{}]\".format(CLASSES[label], 'OK' if correct else 'NO', u\"\\u2192\" if not correct else '',\n                                CLASSES[correct_label] if not correct else ''), correct\n\ndef display_one_flower(image, title, subplot, red=False, titlesize=16):\n    plt.subplot(*subplot)\n    plt.axis('off')\n    plt.imshow(image)\n    if len(title) > 0:\n        plt.title(title, fontsize=int(titlesize) if not red else int(titlesize\/1.2), color='red' if red else 'black', fontdict={'verticalalignment':'center'}, pad=int(titlesize\/1.5))\n    return (subplot[0], subplot[1], subplot[2]+1)\n    \ndef display_batch_of_images(databatch, predictions=None):\n    \"\"\"This will work with:\n    display_batch_of_images(images)\n    display_batch_of_images(images, predictions)\n    display_batch_of_images((images, labels))\n    display_batch_of_images((images, labels), predictions)\n    \"\"\"\n    # data\n    images, labels = batch_to_numpy_images_and_labels(databatch)\n    if labels is None:\n        labels = [None for _ in enumerate(images)]\n        \n    # auto-squaring: this will drop data that does not fit into square or square-ish rectangle\n    rows = int(math.sqrt(len(images)))\n    cols = len(images)\/\/rows\n        \n    # size and spacing\n    FIGSIZE = 13.0\n    SPACING = 0.1\n    subplot=(rows,cols,1)\n    if rows < cols:\n        plt.figure(figsize=(FIGSIZE,FIGSIZE\/cols*rows))\n    else:\n        plt.figure(figsize=(FIGSIZE\/rows*cols,FIGSIZE))\n    \n    # display\n    for i, (image, label) in enumerate(zip(images[:rows*cols], labels[:rows*cols])):\n        title = '' if label is None else CLASSES[label]\n        correct = True\n        if predictions is not None:\n            title, correct = title_from_label_and_target(predictions[i], label)\n        dynamic_titlesize = FIGSIZE*SPACING\/max(rows,cols)*40+3 # magic formula tested to work from 1x1 to 10x10 images\n        subplot = display_one_flower(image, title, subplot, not correct, titlesize=dynamic_titlesize)\n    \n    #layout\n    plt.tight_layout()\n    if label is None and predictions is None:\n        plt.subplots_adjust(wspace=0, hspace=0)\n    else:\n        plt.subplots_adjust(wspace=SPACING, hspace=SPACING)\n    plt.show()\n\ndef display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    \ndef display_training_curves(training, validation, title, subplot):\n    if subplot%10==1: # set up the subplots on the first call\n        plt.subplots(figsize=(10,10), facecolor='#F0F0F0')\n        plt.tight_layout()\n    ax = plt.subplot(subplot)\n    ax.set_facecolor('#F8F8F8')\n    ax.plot(training)\n    ax.plot(validation)\n    ax.set_title('model '+ title)\n    ax.set_ylabel(title)\n    #ax.set_ylim(0.28,1.05)\n    ax.set_xlabel('epoch')\n    ax.legend(['train', 'valid.'])","61e8c481":"def count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(TRAINING_FILENAMES)\nNUM_TEST_IMAGES = count_data_items(TEST_FILENAMES)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint(f'Dataset: {NUM_TRAINING_IMAGES} training images, {NUM_TEST_IMAGES} unlabeled test images')\nprint(f'{STEPS_PER_EPOCH} Steps per epoch')","547e0066":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        'image'                        : tf.io.FixedLenFeature([], tf.string),\n        'image_name'                   : tf.io.FixedLenFeature([], tf.string),\n        'patient_id'                   : tf.io.FixedLenFeature([], tf.int64),\n        'sex'                          : tf.io.FixedLenFeature([], tf.int64),\n        'age_approx'                   : tf.io.FixedLenFeature([], tf.int64),\n        'anatom_site_general_challenge': tf.io.FixedLenFeature([], tf.int64),\n        'diagnosis'                    : tf.io.FixedLenFeature([], tf.int64),\n        'target'                       : tf.io.FixedLenFeature([], tf.int64)\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['target'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        'image'             : tf.io.FixedLenFeature([], tf.string),\n        'image_name'        : tf.io.FixedLenFeature([], tf.string),\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['image_name']\n    return image, idnum\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    return dataset\n\ndef data_augment(image, label):\n    # data augmentation. Thanks to the dataset.prefetch(AUTO) statement in the next function (below),\n    # this happens essentially for free on TPU. Data pipeline code is executed on the \"CPU\" part\n    # of the TPU while the TPU itself is computing gradients.\n    image = tf.image.random_flip_left_right(image)\n    #image = tf.image.random_saturation(image, 0, 2)\n    return image, label   \n\ndef get_training_dataset():\n    dataset = load_dataset(TRAINING_FILENAMES, labeled=True)\n    dataset = dataset.map(data_augment, num_parallel_calls=AUTO)\n    dataset = dataset.repeat()\n    dataset = dataset.shuffle(NUM_TRAINING_IMAGES)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(TEST_FILENAMES, labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset","36b07814":"print(\"Training data shapes:\")\nfor image, label in get_training_dataset().take(3):\n    print(image.numpy().shape, label.numpy().shape)\nprint(\"Training data label examples:\", label.numpy())\nprint(\"Test data shapes:\")\nfor image, idnum in get_test_dataset().take(3):\n    print(image.numpy().shape, idnum.numpy().shape)\nprint(\"Test data IDs:\", idnum.numpy().astype('U'))","8b2dd8dd":"training_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().filter(lambda image, label: label==0)\ntraining_dataset = training_dataset.batch(25)\ntrain_batch = iter(training_dataset)\ndisplay_batch_of_images(next(train_batch))","79905218":"training_dataset = get_training_dataset()\ntraining_dataset = training_dataset.unbatch().filter(lambda image, label: label==1)\ntraining_dataset = training_dataset.batch(25)\ntrain_batch = iter(training_dataset)\ndisplay_batch_of_images(next(train_batch))","8ecc568f":"test_dataset = get_test_dataset()\ntest_dataset = test_dataset.unbatch().batch(25)\ntest_batch = iter(test_dataset)\ndisplay_batch_of_images(next(test_batch))","e507b901":"with strategy.scope():\n    pretrained_model = efn.EfficientNetB7(weights='noisy-student', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n    pretrained_model.trainable = True\n    \n    model = tf.keras.Sequential([\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(512, activation='relu'),\n        tf.keras.layers.Dropout(0.15),\n        tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n\n    model.compile(\n        optimizer= tf.keras.optimizers.Adam(learning_rate=0.00001),\n        loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = 0.05),\n        metrics = [tf.keras.metrics.AUC(curve='ROC', name='auc')]\n    )\nmodel.summary()","54238c14":"#taken from a public notebook\nLR_START = 0.00001\nLR_MAX = 0.00005 * strategy.num_replicas_in_sync\nLR_MIN = 0.00001\nLR_RAMPUP_EPOCHS = 5\nLR_SUSTAIN_EPOCHS = 0\nLR_EXP_DECAY = .8\n\ndef lrfn(epoch):\n    if epoch < LR_RAMPUP_EPOCHS:\n        lr = (LR_MAX - LR_START) \/ LR_RAMPUP_EPOCHS * epoch + LR_START\n    elif epoch < LR_RAMPUP_EPOCHS + LR_SUSTAIN_EPOCHS:\n        lr = LR_MAX\n    else:\n        lr = (LR_MAX - LR_MIN) * LR_EXP_DECAY**(epoch - LR_RAMPUP_EPOCHS - LR_SUSTAIN_EPOCHS) + LR_MIN\n    return lr\n    ","88d248ca":"lr_callback = tf.keras.callbacks.LearningRateScheduler(lrfn, verbose=True)\n\nhistory = model.fit(get_training_dataset(), \n                    verbose = 1,\n                    steps_per_epoch = STEPS_PER_EPOCH, \n                    epochs = EPOCHS, \n                    callbacks = [lr_callback])","9e691f6c":"model.save('efficientnetb7_512_model1.h5')","06f703ab":"display_training_curves(history.history['loss'], history.history['auc'], 'plots', 211)","c2f1b44c":"model.load_weights('efficientnetb7_512_model1.h5')","78b8e2a1":"test_ds = get_test_dataset(ordered=True)\nprint('Computing predictions...')\ntest_images_ds = test_ds.map(lambda image, image_name: image)\nprobabilities = model.predict(test_images_ds, verbose=1)\n#predictions = np.argmax(probabilities, axis=-1)\nprint(probabilities)","bcb0157f":"image_names = np.array([image_name.numpy().decode(\"utf-8\") \n                        for img, image_name in iter(test_ds.unbatch())])\nimage_names","69e3d8b5":"submission = pd.DataFrame(dict(\n    image_name = image_names,\n    target     = probabilities[:,0]))\n\nsubmission = submission.sort_values('image_name').reset_index(drop=True) \nsubmission.to_csv('efficientnet-b7-512-submission.csv', index=False)","b18571a2":"submission.head()","a089aab5":"sub = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\nsub['target'] = probabilities.reshape(-1,)\nsub.to_csv('efficientnet-b7-512-submission.csv', index=False)","1fe4f216":"sub.head()","44badbed":"Training on TPUs with the given pretrained backbone\n1. EfficientNet-B7 -with about 65M parameters (noisy student training) was used. EfnetB7 with noisy student training gives the SOTA results on ImageNet - 88.4% top1 accuracy.\n\nTotal training time around - \n\n### Do upvote if you find this notebook helpful :))","c5f7841d":"## Benign images","515cc8b1":"## DATASET\n* **dataset.shuffle** - Randomly shuffles the elements of this dataset. For perfect shuffling, a buffer size greater than or equal to the full size of the dataset is required.\n* **dataset.filter** - Filters this dataset according to predicate.\n* **dataset.repeat()** for training as the data is to be iteratively used\n* **dataset.prefetch()** for getting next chunk without any delay\n* **dataset.unbatch()** is to remove batching\n* Apply augmentation with **dataset.map(augment, naum_parallel_reads=AUTO)**","3e3481e3":"## Malignant images","c63a3a2f":"# MELANOMA EFFICIENTNET-B7 WITH TPUS","ee2ca519":"* So the datasets are read directly from Google Cloud Storage or GCS. These are done I think in order to reduce the memory flow bottleneck. I have to do more research on this to be sure.\n* get_gcs_path() function can be used for multiple datasets.\n* create filenames useing tf.io.gfile.glob() for train and test datasets.","57a6ac08":"# MODEL AND TRAINING\n* The output activation function should be sigmoid and not softmax since this one is a binary classifier.\n* The complete model is to be declared under a strategy scope for TPUs","9f208e39":"## Test Dataset","2455f71c":"Model is highly overfitting."}}