{"cell_type":{"908f253c":"code","e8ae66cd":"code","cbecd2cd":"code","af281b75":"code","40ffc598":"code","1bd6b6da":"code","0700c267":"code","3b65f407":"code","6f3b84b2":"code","a274f7fc":"code","282e1863":"markdown","ac053055":"markdown","42b8d99b":"markdown","1224ea1a":"markdown","0d50fb72":"markdown","4ca75fe4":"markdown","2407e2f4":"markdown","240a85c6":"markdown","b6d1d2e3":"markdown"},"source":{"908f253c":"from tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport pandas as pd\nimport numpy as np\nimport imagehash\nimport PIL\nimport os","e8ae66cd":"class CFG():\n    \n    threshold = .9\n    img_size = 512\n    seed = 42","cbecd2cd":"root = '\/kaggle\/input\/plant-pathology-2021-fgvc8\/train_images'\n\npaths = os.listdir(root)\n\ndf = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/train.csv', index_col='image')\n\nfor path in tqdm(paths, total=len(paths)):\n    image = tf.io.read_file(os.path.join(root, path))\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.image.resize(image, [CFG.img_size, CFG.img_size])\n    image = tf.cast(image, tf.uint8).numpy()\n    plt.imsave(path, image)","af281b75":"hash_functions = [\n    imagehash.average_hash,\n    imagehash.phash,\n    imagehash.dhash,\n    imagehash.whash]\n\nimage_ids = []\nhashes = []\n\npaths = tf.io.gfile.glob('.\/*.jpg')\n\nfor path in tqdm(paths, total=len(paths)):\n\n    image = PIL.Image.open(path)\n\n    hashes.append(np.array([x(image).hash for x in hash_functions]).reshape(-1,))\n    image_ids.append(path.split('\/')[-1])\n    \nhashes = np.array(hashes)\nimage_ids = np.array(image_ids)","40ffc598":"duplicate_ids = []\n\nfor i in tqdm(range(len(hashes)), total=len(hashes)):\n    similarity = (hashes[i] == hashes).mean(axis=1)\n    duplicate_ids.append(list(image_ids[similarity > CFG.threshold]))\n    \nduplicates = [frozenset([x] + y) for x, y in zip(image_ids, duplicate_ids)]\nduplicates = set([x for x in duplicates if len(x) > 1])","1bd6b6da":"duplicates_by_kingofarmy = {\n    frozenset(('8dbeda49894d522e.jpg', 'afbe5641896d522a.jpg')),\n    frozenset(('af6292db1b611d98.jpg', 'a56292dadb618d95.jpg')),\n    frozenset(('abf0b5a0df028b17.jpg', 'abf0b5819f028f0f.jpg')),\n    frozenset(('e385830ecacd2d9e.jpg', 'c335971e8acd609e.jpg')),\n    frozenset(('cebdc20f67838631.jpg', 'dfbdc047068b063d.jpg')),\n    frozenset(('f392f11919991cea.jpg', 'f196f11a99d91ce0.jpg'))}\n\nduplicates |= duplicates_by_kingofarmy","0700c267":"print(f'Found {len(duplicates)} duplicate pairs:')\nfor row in duplicates:\n    print(', '.join(row))","3b65f407":"print('Writing duplicates to \"duplicates.csv\".')\nwith open('duplicates.csv', 'w') as file:\n    for row in duplicates:\n        file.write(','.join(row) + '\\n')","6f3b84b2":"for row in duplicates:\n    \n    figure, axes = plt.subplots(1, len(row), figsize=[5 * len(row), 5])\n\n    for i, image_id in enumerate(row):\n        image = plt.imread(os.path.join('..\/input\/plant-pathology-2021-fgvc8\/train_images', image_id))\n        axes[i].imshow(image)\n\n        axes[i].set_title(f'{image_id} - {df.loc[image_id, \"labels\"]}')\n        axes[i].axis('off')\n\n    plt.show()","a274f7fc":"for file in tf.io.gfile.glob('.\/*.jpg'):\n    os.remove(file)","282e1863":"Here we add some of the duplicates spotted by @kingofarmy in the corresponding **[discussion](https:\/\/www.kaggle.com\/c\/plant-pathology-2021-fgvc8\/discussion\/229851)**:","ac053055":"### Clear working folder to avoid output pollution","42b8d99b":"## 2. Hash computation","1224ea1a":"### Summary\n\nDuplicates are always harmful for training process: differently labeled duplicates produce noise in the dataset, while equally labeled duplicates lead to data leakage. \n\nIn this short notebook I am looking through image hash of **Plant Pathology 2021** competition dataset with `image_hash` library, finding more than 50 duplicates.\n\n### Update\nDue to recent changes in the `train.csv` file mentioned in **[this discussion](https:\/\/www.kaggle.com\/c\/plant-pathology-2021-fgvc8\/discussion\/228465)**, we have no more the `cider_apple_rust` class. This version (7) is made after the changes.","0d50fb72":"## 4. Let's see what is found","4ca75fe4":"### Acknowledgements\n\n* This work is Copy&Edit form @appian **[notebook](https:\/\/www.kaggle.com\/appian\/let-s-find-out-duplicate-images-with-imagehash)** with a lot of changes, but still highly inspired. If you find this notebook useful, please, upvote his work too.\n* Thanks to @kingofarmy for spotting more duplicates in **[his thread](https:\/\/www.kaggle.com\/c\/plant-pathology-2021-fgvc8\/discussion\/229851)**.","2407e2f4":"### Imports","240a85c6":"## 3. Run search across hashed images\nWe firstly compare each image hash with all the hashes and then leave only unique pairs of matches","b6d1d2e3":"## 1. Saving downscaled images to boost performance\nComputing hash over original images of very high quality would take nearly 5 hours, thus we downscaling first."}}