{"cell_type":{"674914d5":"code","6f025da8":"code","c3d2b927":"code","d2355ba7":"code","b6d3d78d":"code","190f2977":"code","fe32b0ba":"code","89a41ee4":"code","ecb624d4":"code","762a6bde":"code","1cbe3f47":"code","d6bea2b4":"code","f950d2df":"code","c7356fc0":"code","26cd8c2b":"code","4fd15cee":"code","2f57bbfc":"code","40d78513":"code","79620f34":"code","bf326277":"code","0827243e":"code","b2b46f0c":"code","ee63df63":"code","caeee663":"code","0dbab3a1":"code","67b69edd":"code","23a23e9b":"code","aad0a54d":"code","172620c9":"code","add7eb46":"code","73c1919d":"code","3b611607":"code","c0b838d0":"code","76463a63":"code","3c989819":"code","7a622d4c":"code","cea9093a":"code","7ba4ed0c":"code","bb240aa2":"code","adacf1a7":"markdown","dc1b8702":"markdown","8f5ebd96":"markdown","43311505":"markdown","3ff0ec87":"markdown","9f76dd52":"markdown","dbf565b2":"markdown","844353c8":"markdown","0fc22c47":"markdown","e3cf2b0e":"markdown","14579dc4":"markdown","5b59f845":"markdown","de68a6e6":"markdown","8cbad15d":"markdown","838282a0":"markdown","7ba8b708":"markdown","3c1510a4":"markdown","452833db":"markdown","9c9c5232":"markdown","227b4bb5":"markdown","7ed74e7b":"markdown","273164d6":"markdown","c7103a4d":"markdown","6b852812":"markdown","58d93b00":"markdown","63a6edf6":"markdown","b1ff8a42":"markdown","33be081f":"markdown","e37eb332":"markdown","0c98af89":"markdown","31014a88":"markdown","c265111c":"markdown","c6a6bf5e":"markdown","3fb0eb6f":"markdown","3a9f5211":"markdown","e2cc25dc":"markdown","3496d07e":"markdown","80b06a68":"markdown","9f0e8150":"markdown","344848b2":"markdown","01af74b3":"markdown","ca0b2ab8":"markdown","38d6b3ef":"markdown","d9c0ff87":"markdown","d713cb95":"markdown","24db3085":"markdown","15fec2de":"markdown","2f57ed41":"markdown","6aa3197d":"markdown","9e6c1a41":"markdown","4a02b538":"markdown","f90278f6":"markdown","c152cb52":"markdown","ef8c1819":"markdown","fd450638":"markdown","a97f21f8":"markdown","a69f1ec6":"markdown","03a7b10b":"markdown","e6dfc1d5":"markdown","5d54ccde":"markdown","ec95cd7e":"markdown","9f949761":"markdown"},"source":{"674914d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","6f025da8":"## Loading events dataset\ndf_events = pd.read_csv(\"..\/input\/events.csv\")\n## Loading ginf dataset, which has some important data to merge with event dataset\ndf_ginf = pd.read_csv(\"..\/input\/ginf.csv\")\n## Selecting only the features I need. `id_odsp` serves as a unique identifier that will be used to \n## union the 2 datasets\ndf_ginf = df_ginf[['id_odsp', 'date', 'league', 'season', 'country']]","c3d2b927":"## Join the 2 datasets to add 'date', 'league', 'season', and 'country' information to the main dataset\ndf_events = df_events.merge(df_ginf, how='left')","d2355ba7":"## Filtering the seasons because some leagues have many more matches than others before season 2015\ndf_events = df_events[df_events['season'] >= 2015]","b6d3d78d":"## Naming the leagues with their popular names, which will make thinks much clear for us\nleagues = {'E0': 'Premier League', 'SP1': 'La Liga',\n          'I1': 'Serie A', 'F1': 'League One', 'D1': 'Bundesliga'}","190f2977":"## Apply the mapping\ndf_events['league'] = df_events['league'].map(leagues)","fe32b0ba":"## Events type 1\nevent_type_1 = pd.Series([\n    'Announcement',\n    'Attempt',\n    'Corner',\n    'Foul',\n    'Yellow card',\n    'Second yellow card',\n    'Red card',\n    'Substitution',\n    'Free kick won',\n    'Offside',\n    'Hand ball',\n    'Penalty conceded'], index=[[item for item in range(0, 12)]])\n\n## Events type 2\nevent_type2 = pd.Series(['Key Pass', 'Failed through ball', 'Sending off', 'Own goal'],\n                       index=[[item for item in range(12, 16)]])\n\n## Match side\nside = pd.Series(['Home', 'Away'], index=[[item for item in range(1, 3)]])\n\n## Shot place\nshot_place = pd.Series([\n    'Bit too high', \n    'Blocked',\n    'Bottom left corner',\n    'Bottom right corner',\n    'Centre of the goal',\n    'High and wide',\n    'Hits the bar',\n    'Misses to the left',\n    'Misses to the right',\n    'Too high',\n    'Top centre of the goal',\n    'Top left corner',\n    'Top right corner'\n], index=[[item for item in range(1, 14)]])\n\n## Outcome of shot\nshot_outcome = pd.Series(['On target', 'Off target', 'Blocked', 'Hit the bar'],\n                        index=[[item for item in range(1, 5)]])\n## Location of shot\nlocation = pd.Series([\n    'Attacking half',\n    'Defensive half',\n    'Centre of the box',\n    'Left wing',\n    'Right wing',\n    'Difficult angle and long range',\n    'Difficult angle on the left',\n    'Difficult angle on the right',\n    'Left side of the box',\n    'Left side of the six yard box',\n    'Right side of the box',\n    'Right side of the six yard box',\n    'Very close range',\n    'Penalty spot',\n    'Outside the box',\n    'Long range',\n    'More than 35 yards',\n    'More than 40 yards',\n    'Not recorded'\n], \nindex=[[item for item in range(1, 20)]])\n\n## Players' body part\nbodypart = pd.Series(['right foot', 'left foot', 'head'], index=[[item for item in range(1, 4)]])\n\n## Assist method\nassist_method = pd.Series(['None', 'Pass', 'Cross', 'Headed pass', 'Through ball'],\n                         index=[item for item in range(0, 5)])\n\n## Situation\nsituation = pd.Series(['Open play', 'Set piece', 'Corner', 'Free kick'],\n                     index=[item for item in range(1, 5)])","89a41ee4":"## Utility function to plot bar plots with similar configuration\ndef plot_barplot(data, x_ticks, x_labels, y_labels, title, color='muted', num=10, figsize=8):\n    ## Set standard style as whitegrid (this also could be customized via param)\n    sns.set_style(\"whitegrid\")\n    ## Set a figure with custom figsize\n    plt.figure(figsize=(num, figsize))\n    ## Plottin data\n    ax = sns.barplot(x = [j for j in range(0, len(data))], y=data.values, palette=color)\n    ## Setting ticks extracted from data indexes\n    ax.set_xticks([j for j in range(0, len(data))])\n    ## Set labels of the chart\n    ax.set_xticklabels(x_ticks, rotation=45)\n    ax.set(xlabel = x_labels, ylabel = y_labels, title = title)\n    ax.plot();\n    plt.tight_layout()","ecb624d4":"## Count of events occurecies\nevents_series = df_events['event_type'].value_counts()\n\n## Plotting chart \nplot_barplot(events_series, event_type_1.values,\n            \"Event type\", \"Number of events\", \"Event types\", 'OrRd_r', 10, 5)","762a6bde":"## Filtering out dataframe to extract attemtps which resulted in goals\ndf_shot_places = df_events[(df_events['event_type'] == 1) & \n                           (df_events['is_goal'] == 1)]['shot_place'].value_counts()\n\n## Plotting the chart\nplot_barplot(df_shot_places, shot_place[[3, 4, 5, 13, 12]], 'Shot places', 'Number of events',\n    'Shot places resulting in goals', 'BuGn_r', 8, 5)","1cbe3f47":"## Copying original dataframe\ndf_shot_places_ed = df_events.copy()\n\n## Grouping data by shot places\ndf_shot_places_ed = df_events.groupby('shot_place', as_index=False).count().sort_values('id_event',\n                                                   ascending=False).dropna()\n\n## Mapping dataframe index to shot places labels available in the dictionary file\ndf_shot_places_ed['shot_place'] = df_shot_places_ed['shot_place'].map(shot_place)\n\n## Plotting the chart\nplot_barplot(df_shot_places_ed['id_event'], df_shot_places_ed['shot_place'],\n             'Shot places',\n             'Number of events',\n             'Shot places',\n             'BuGn_r', 8, 5)","d6bea2b4":"## Grouping attempts by team\ngrouping_by_offensive = df_events[df_events['is_goal']==1].groupby('event_team')\n\n## Sorting the values\ngrouping_by_offensive = grouping_by_offensive.count().sort_values(by='id_event', ascending=False)[:10]\nteams = grouping_by_offensive.index\nscores = grouping_by_offensive['id_event']\n\n## Plotting the teams\nplot_barplot(scores, teams, 'Teams', '# of goals', 'Most offensive teams', 'GnBu_d', 8, 6)","f950d2df":"## grouping by player when is goal\ngrouping_by_offensive_player = df_events[df_events['is_goal']==1].groupby('player')\n\n## Couting and sorting the number of goals by player, then pick the top 10\ngrouping_by_offensive_player = grouping_by_offensive_player.count().sort_values(by='id_event',\n                                                                                ascending=False)[:10]\n## Extracting player names\nplayers = grouping_by_offensive_player.index\n## Extracting values (# of goals)\nscores = grouping_by_offensive_player['id_event']\n\n## Plotting the chart\nplot_barplot(scores, players, 'Players', '# of score', 'Most offensive players', 'GnBu_d', 8, 6)","c7356fc0":"## Grouping by player when attempt == 1\ngrouped_by_player = df_events[df_events['event_type'] == 1].groupby('player').count()\n\n## Grouping by player when is goal and attempt == 1\ngrouped_by_player_goals = df_events[(df_events['event_type'] == 1) &\n                             (df_events['is_goal'] == 1)].groupby('player').count()\n\n## Grouping by player when is not goal and attempt == 1\ngrouped_by_player_not_goals = df_events[(df_events['event_type'] == 1) &\n                             (df_events['is_goal'] == 0)].groupby('player').count()\n\n## Setting a threshold to filter out players with a small number of attempts, which can lead to a lack \n## of consistency in the final result\nthreshold = grouped_by_player['id_event'].std()\n\ngrouped_by_player_is_goal = df_events[df_events['is_goal'] == 1].groupby('player').count()\n## filtering players that have at least more than average number of chances to skip noise\n## For example, a player that has 2 attempts and 1 goal has a very high effectiveness, even though,\n## this particular player has not created many chances for his team\ngrouped_by_player_is_goal_filtered = grouped_by_player_goals[grouped_by_player_goals['id_event'] > threshold]\ngrouped_by_players_not_goal_filtered = grouped_by_player_not_goals[grouped_by_player_not_goals['id_event'] > threshold]\n\n## Total number of attemtps\ntotal = grouped_by_players_not_goal_filtered['id_event'] + grouped_by_player_is_goal_filtered['id_event']\n\n## Dividing the total of attempts by the attemtps which ended up in goals\nresult = total\/grouped_by_player_is_goal_filtered['id_event']\n\n## Dropping NaN values\nresult.dropna(inplace=True)\n\n## Sorting results\nsorted_results = result.sort_values(ascending=True)\n\n## Extracting players names\nplayers = sorted_results[:10].index\n## Extracting value of effectiveness\neffectiveness = sorted_results[:10]\n\n## Plotting results\nplot_barplot(effectiveness, players, 'Players', \n            '# of shots needed to score a goal',\n            'Most effective players',\n            'RdBu_r', 8, 6)","26cd8c2b":"## Creating a dataframe with total of attempts and total goals\nresult_df = pd.DataFrame({'total': total.dropna(), 'is_goal': grouped_by_player_is_goal_filtered['id_event']})\n## Sorting values by total\nresult_df.sort_values('total', ascending=False, inplace=True)\n\n## Setting style to dark\nsns.set(style=\"darkgrid\")\n\n## Creating figure\nf, ax = plt.subplots(figsize=(10, 6))\n\n## Plotting chart\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"total\",\n            y=result_df.index,\n            data=result_df,\n            label=\"# of attempts\", color=\"b\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='is_goal',\n            y=result_df.index, \n            data=result_df,\n            label=\"# of goals\", color=\"b\")\n\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(ylabel=\"Players\",\n       xlabel=\"Number of goals x attempts\", title='Player effectiveness')\n\neach = result_df['is_goal'].values\nthe_total = result_df['total'].values\nx_position = 50\n\nfor i in range(len(ax.patches[:15])):\n    ax.text(ax.patches[i].get_width() - x_position, ax.patches[i].get_y() +.50, \n            str(round((each[i]\/the_total[i])*100, 2))+'%')\n    \nsns.despine(left=True, bottom=True)\nf.tight_layout()","4fd15cee":"## Filtering out events with time <= 15'\nfirst_15 = df_events[df_events['time'] <= 15]\n## Filtering out events with time between 75' and 90'\nlast_15 = df_events[(df_events['time'] >= 75) & (df_events['time'] <= 90)]\n\n## Grouping by teams for the first 15'\ntop_10_scorer_first_15 = first_15[first_15['is_goal'] == 1].groupby('event_team').count().sort_values(by='id_event', ascending=False)\n\n## Extracting teams from dataframe\nteams = top_10_scorer_first_15.index[:10]\n## Extracting number of goals \nscores = top_10_scorer_first_15['id_event'][:10]\n\n## Plotting results\nsns.set_style(\"whitegrid\")\nfig, axs = plt.subplots(ncols=2, figsize=(15, 6))\nax = sns.barplot(x = [j for j in range(0, len(scores))], y=scores.values, palette='Blues_d', ax=axs[0])\nax.set_xticks([j for j in range(0, len(scores))])\nax.set_xticklabels(teams, rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'Most goals in the 1st 15 minutes');\n\n## Grouping by last 15' scorers\ntop_10_scorer_last_15 = last_15[last_15['is_goal'] == 1].groupby('event_team').count().sort_values(by='id_event', ascending=False)[:10]\n\n## Extracting the names of the teams\nteams_last_15 = top_10_scorer_last_15.index[:10]\n## Extracting the number of goals\nscores_last_15 = top_10_scorer_last_15['id_event'][:10]\n\n## Plottin the results\nax = sns.barplot(x = [j for j in range(0, len(scores_last_15))], y=scores_last_15.values, palette='Blues_d', ax=axs[1])\nax.set_xticks([j for j in range(0, len(scores_last_15))])\nax.set_xticklabels(teams_last_15, rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'Most goals in the last 15 minutes');\nfig.tight_layout()","2f57bbfc":"## Last minute goals\nlast_minute_goals = df_events[(df_events['time'] >= 90) &\n                             (df_events['time'] <= 95)]\n\n## Last minute scores by team, league, opponent, and players\ntop_last_minute_scores = last_minute_goals[last_minute_goals['is_goal'] == 1].groupby(['event_team', 'league']).count().sort_values(by='id_event', ascending=False)\ntop_last_minute_scored = last_minute_goals[last_minute_goals['is_goal'] == 1].groupby('opponent').count().sort_values(by='id_event', ascending=False)\ntop_last_minute_scores_by_player = last_minute_goals[last_minute_goals['is_goal'] == 1].groupby('player').count().sort_values(by='id_event', ascending=False)\n\n## Plotting the last minute goals by players\nplot_barplot(top_last_minute_scores_by_player['id_event'][:10],\n            top_last_minute_scores_by_player.index[:10],\n            'Players',\n            '# of goals',\n            'Last minute goals by player',\n            'Reds_r', 8, 5)","40d78513":"## Reseting index\ntop_last_minute_scores.reset_index(inplace=True)\n\n## Filtering out dataframe by league\ntop_5_scorer_league_one = top_last_minute_scores[top_last_minute_scores['league'] == 'League One'][:5]\ntop_5_scorer_premier_league = top_last_minute_scores[top_last_minute_scores['league'] == 'Premier League'][:5]\ntop_5_scorer_la_liga = top_last_minute_scores[top_last_minute_scores['league'] == 'La Liga'][:5]\ntop_5_scorer_serie_a = top_last_minute_scores[top_last_minute_scores['league'] == 'Serie A'][:5]\ntop_5_scorer_bundesliga = top_last_minute_scores[top_last_minute_scores['league'] == 'Bundesliga'][:5]\n\n## Plotting the chart\nfig, axs = plt.subplots(nrows=2, ncols=3, figsize=(15, 8))\nax = sns.barplot(x = [j for j in range(0, len(top_5_scorer_league_one['id_event']))],\n                 y=top_5_scorer_league_one['id_event'].values,\n                 palette='Reds_r', ax=axs[0][0])\nax.set_xticks([j for j in range(0, len(top_5_scorer_league_one['id_event']))])\nax.set_xticklabels(top_5_scorer_league_one['event_team'], rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'League One');\n\nax = sns.barplot(x = [j for j in range(0, len(top_5_scorer_premier_league['id_event']))],\n                 y=top_5_scorer_premier_league['id_event'].values,\n                 palette='Reds_r', ax=axs[0][1])\nax.set_xticks([j for j in range(0, len(top_5_scorer_premier_league['id_event']))])\nax.set_xticklabels(top_5_scorer_premier_league['event_team'], rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'Premiere League');\n\nax = sns.barplot(x = [j for j in range(0, len(top_5_scorer_la_liga['id_event']))],\n                 y=top_5_scorer_la_liga['id_event'].values,\n                 palette='Reds_r', ax=axs[0][2])\nax.set_xticks([j for j in range(0, len(top_5_scorer_la_liga['id_event']))])\nax.set_xticklabels(top_5_scorer_la_liga['event_team'], rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'La Liga');\n\nax = sns.barplot(x = [j for j in range(0, len(top_5_scorer_serie_a['id_event']))],\n                 y=top_5_scorer_serie_a['id_event'].values,\n                 palette='Reds_r', ax=axs[1][0])\nax.set_xticks([j for j in range(0, len(top_5_scorer_serie_a['id_event']))])\nax.set_xticklabels(top_5_scorer_serie_a['event_team'], rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'Serie A');\n\nax = sns.barplot(x = [j for j in range(0, len(top_5_scorer_bundesliga['id_event']))],\n                 y=top_5_scorer_bundesliga['id_event'].values,\n                 palette='Reds_r', ax=axs[1][1])\nax.set_xticks([j for j in range(0, len(top_5_scorer_bundesliga['id_event']))])\nax.set_xticklabels(top_5_scorer_bundesliga['event_team'], rotation=45)\nax.set(xlabel = 'Teams', ylabel = '# of goals', title = 'Bundesliga');\n\naxs[1][2].axis('off')\n\nfig.tight_layout()","79620f34":"## Copying original dataset\ndf_shot_outcome = df_events.copy()\n## Mapping shot outcomes to original labels\nshot_outcomes = {1: 'On Target', 2: 'Off Target', 3: 'Blocked', 4: 'Hit the Bar'}\ndf_shot_outcome['shot_outcome'] = df_shot_outcome['shot_outcome'].map(shot_outcome)\n\n## Plotting the chart\ng = sns.FacetGrid(df_shot_outcome, col=\"shot_outcome\")\ng = g.map(plt.hist, 'league', color=\"r\")\ng.set_xticklabels(rotation=45)\ng.set_ylabels('# of attempts');","bf326277":"## Total number of attempts on target\ntotal_events = df_events[(df_events['event_type'] == 1) &\n         ((df_events['shot_outcome'] == 1) |\n         (df_events['shot_outcome'] == 2))].groupby('player').count()\n         \n## Using the threshold to filter out players with fewer events\ntotal_events = total_events[total_events['id_event'] > threshold]\n\n## How many of those attempt events were actually on target\non_target_events = df_events[(df_events['event_type'] == 1) &\n         (df_events['shot_outcome'] == 1)].groupby('player').count()\n\nthreshold = 100\n\n## Filtering out the result\ntotal_events = total_events[total_events['id_event'] > threshold]\n\n## Dividing the number of attemps by the attempts on target\non_target = on_target_events['id_event']\/total_events[total_events.index.isin(on_target_events.index)]['id_event']\n\n## Sorting the result to find the most 'accurate' players\nmost_accurate_players = on_target.dropna().sort_values(ascending=False)[:10]\nless_accurate_players = on_target.dropna().sort_values()[:10]\n\nsns.set_style(\"whitegrid\")\n## Plot the most accurate players chart\nfig, axs = plt.subplots(ncols=2, figsize=(15, 6))\nax = sns.barplot(x = [j for j in range(0, len(most_accurate_players))], y=most_accurate_players.values, palette='Blues_d', ax=axs[0])\nax.set_xticks([j for j in range(0, len(most_accurate_players))])\nax.set_xticklabels(most_accurate_players.index, rotation=45)\nax.set(xlabel = 'Players', ylabel = '# of attempts to target the goal', title = 'Most accurate players');\n\n## Plot the less accurate players chart\nax = sns.barplot(x = [j for j in range(0, len(less_accurate_players))], y=less_accurate_players.values, palette='Blues_d', ax=axs[1])\nax.set_xticks([j for j in range(0, len(less_accurate_players))])\nax.set_xticklabels(less_accurate_players.index, rotation=45)\nax.set(xlabel = 'Players', ylabel = '# of attempts to target the goal', title = 'Less accurate players');","0827243e":"import cufflinks as cf\ncf.go_offline()","b2b46f0c":"## Grouping players who had their shots blocked\nplayers_blocked = df_events[df_events['shot_outcome'] == 3].groupby('player').count().sort_values('id_event',\n                                                                                                  ascending=False)\n## Grouping players who have blocked the most shots\nplayers_blocked_the_most = df_events[df_events['shot_outcome'] == 3].groupby('player2').count().sort_values('id_event',\n                                                                                                            ascending=False)\n\n## Plotting the top 10 players that have the most shots blocked\nplayers_blocked[:10]['id_event'].iplot(kind='bar', yTitle='# of events',\n                                         title='Players that have their most shots blocked',\n             filename='cufflinks\/categorical-bar-chart', color='#27AE60')","ee63df63":"## Players that blocked the most attempts\nplayers_blocked_the_most[:10]['id_event'].iplot(kind='bar', yTitle='# of events',\n                                         title='Players who blocked the most shots',\n             filename='cufflinks\/categorical-bar-chart', color='#00CEC9')","caeee663":"## Most goals from outside the box\nlong_range_goals = df_events[(df_events['location'] == 15) & \n         (df_events['is_goal'] == 1)].groupby('player').count().sort_values('id_event',\n                                                                           ascending=False)[:10]\n## Long range attempts (goals and not goals)\nlong_range_attempts = df_events[(df_events['location'] == 15)].groupby('player').count().sort_values('id_event',\n                                                                           ascending=False)\n## Most goals from the long range\nlong_range_goals['id_event'].iplot(kind='bar', yTitle='# of events',\n                                         title='Top long range scorers',\n             filename='cufflinks\/categorical-bar-chart', color='#2D3436')","0dbab3a1":"print('{} # of attempts: {}'.format('Yaya Toure', long_range_attempts.iloc[long_range_attempts.index.get_loc('yaya toure')]['id_event']))","67b69edd":"## Copying original dataset\ndf_body_part = df_events.copy()\n\n## Mapping dataframe bodypart to provided labels\ndf_body_part['bodypart'] = df_body_part['bodypart'] .map(bodypart)\n\n## Filtering only the goal events\ndf_body_part = df_body_part[df_body_part['is_goal'] == 1]\n\n## Setting custom style and plotting the chart\nsns.color_palette(\"bright\")\nsns.set(font_scale=1.0)\nsns.set_style(\"white\")\ng = sns.FacetGrid(df_body_part, col=\"bodypart\", col_wrap=4, sharey=True)\ng = g.map(plt.hist, 'league', bins=10, color=\"r\")\ng.set_xticklabels(rotation=45)\ng.set_xlabels('League')\ng.set_ylabels('# of events');","23a23e9b":"## Copying the original dataset\ndf_goals = df_events.copy()\n\n## Filtering goals events\ndf_goals = df_goals[df_goals['is_goal'] == 1]\n\n## Goals with right foot\nright_foot = df_goals[df_goals['bodypart'] == 1].groupby('player').count().sort_values('id_event',\n                                                                          ascending=False)[:5]\n\n## Goals with left foot\nleft_foot = df_goals[df_goals['bodypart'] == 2].groupby('player').count().sort_values('id_event',\n                                                                           ascending=False)[:5]\n\n## Goals with head\nhead = df_goals[df_goals['bodypart'] == 3].groupby('player').count().sort_values('id_event',\n                                                                           ascending=False)[:5]\n\n## Most goals by bodypart\nfig, axs = plt.subplots(ncols=3, figsize=(15, 5), sharey=True)\nax = sns.barplot(x = [j for j in range(0, len(right_foot['id_event']))],\n                 y=right_foot['id_event'].values, palette='Blues_r', ax=axs[0])\nax.set_xticks([j for j in range(0, len(right_foot['id_event']))])\nax.set_xticklabels(right_foot['event_team'].index, rotation=45)\nax.set(xlabel = 'Players', ylabel = '# of goals', title = 'Right foot');\n\nax = sns.barplot(x = [j for j in range(0, len(left_foot['id_event']))],\n                 y=left_foot['id_event'].values, palette='Blues_r', ax=axs[1])\nax.set_xticks([j for j in range(0, len(left_foot['id_event']))])\nax.set_xticklabels(left_foot['event_team'].index, rotation=45)\nax.set(xlabel = 'Players', ylabel = '# of goals', title = 'Left foot');\n\nax = sns.barplot(x = [j for j in range(0, len(head['id_event']))],\n                 y=head['id_event'].values, palette='Blues_r', ax=axs[2])\nax.set_xticks([j for j in range(0, len(head['id_event']))])\nax.set_xticklabels(head['event_team'].index, rotation=45)\nax.set(xlabel = 'Players', ylabel = '# of goals', title = 'Head');","aad0a54d":"## Grouping data by assists\ntop_assists = df_events[(df_events['is_goal'] == 1) &\n         (df_events['player2'] != np.nan)].groupby('player2').count().sort_values('id_event',\n                                                                   ascending=False)[:10]\n\n## Plotting the players with the most assists\ntop_assists['id_event'][:10].iplot(kind='bar', yTitle='# of assists', title='Top assists',\n             filename='cufflinks\/categorical-bar-chart', color='#C70039')","172620c9":"## Setting style\nsns.set_style(\"whitegrid\")\n\n## Setting figure\nplt.figure(figsize=(12, 5))\n\n## Plotting data\nax = sns.stripplot(top_assists.sort_values('id_event').index, top_assists.sort_values('id_event')['id_event'].values, \n                palette='Blues', size=15, jitter=True,\n                linewidth=1)\nax.set(ylabel=\"# of assists\",\n       xlabel=\"Players\", title='Players with the most assists');\nax.set_xticklabels(top_assists.sort_values('id_event').index, rotation=45);","add7eb46":"## Copying original dataet\ndf_events_distribution = df_events.copy()\n\n## Filtering the goals events\ndf_events_distribution = df_events_distribution[df_events_distribution['is_goal']==1]\n## Converting the data column data datetime\ndf_events_distribution['date'] = pd.to_datetime(df_events_distribution['date'])\n\n## Extracting day, month, and year from provided date and creating a exclusive column for each\ndf_events_distribution['day'] = df_events_distribution['date'].apply(lambda x: x.day)\ndf_events_distribution['month'] = df_events_distribution['date'].apply(lambda x: x.month)\ndf_events_distribution['year'] = df_events_distribution['date'].apply(lambda x: x.year)\n\n## Extracting only months that have events (Some months don't have occorencies beacause of the season break)\nsorted_indexes = sorted(df_events_distribution['month'].unique())\n\n## Month labels\nmonths =['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n## Overall mean by month\ntotal_mean = df_events_distribution.groupby('month').count().mean()['id_event']\n\n## Plotting the results\nsns.set_style('dark')\nplt.figure(figsize=(15, 5))\nplt.bar(sorted_indexes, \n        df_events_distribution.groupby('month').count()['id_event'], alpha=0.6,\n       color='skyblue')\nplt.plot(sorted_indexes, \n        df_events_distribution.groupby('month').count()['id_event'], color='darkred', marker='o',\n        linewidth=4, markersize=10)\nplt.axvspan(6, 7, alpha=0.5, color='azure')\nplt.xticks([item for item in range(1, 13)], months);\nplt.ylabel('# of gols')\nplt.title('Goals distribution by month in Europe');","73c1919d":"## Goal distribution by each league\npremier_league_events = df_events_distribution[df_events_distribution['league'] == 'Premier League']\nla_liga_events = df_events_distribution[df_events_distribution['league'] == 'La Liga']\nleague_one_events = df_events_distribution[df_events_distribution['league'] == 'League One']\nserie_a_events = df_events_distribution[df_events_distribution['league'] == 'Serie A']\nbundesliga_events = df_events_distribution[df_events_distribution['league'] == 'Bundesliga']\n\n## Mean values for each league\npl_mean = premier_league_events.groupby('month').count().mean()['id_event']\nll_mean = la_liga_events.groupby('month').count().mean()['id_event']\nlo_mean = league_one_events.groupby('month').count().mean()['id_event']\nsa_mean = serie_a_events.groupby('month').count().mean()['id_event']\nbl_mean = bundesliga_events.groupby('month').count().mean()['id_event']\n\n## Random color to use in charts\ncolors = ['olivedrab', 'seagreen', 'lightseagreen', 'paleturquoise',\n'darkcyan', 'deepskyblue', 'royalblue', 'darkslategray',\n'cadetblue', 'dodgerblue', 'lightskyblue', 'teal']\n\n## Plotting the distribution by league\nsns.set_style('ticks')\nfig, axs = plt.subplots(nrows=3, ncols=2, figsize=(15, 12))\n\naxs[0][0].plot(premier_league_events.groupby('month').count()['id_event'], lw=4, color=random.choice(colors));\n## premier league mean\naxs[0][0].axhline(y=pl_mean, color='r', linestyle='-', alpha=0.5)\naxs[0][0].set_xlim(1, 12);\naxs[0][0].set_xticks([item for item in range(1, 13)])\naxs[0][0].set_xticklabels(months);\naxs[0][0].set_ylabel('# of goals')\naxs[0][0].set_title('Premier League goals distribution')\n\naxs[0][1].plot(la_liga_events.groupby('month').count()['id_event'], lw=4, color=random.choice(colors));\n## la liga mean\naxs[0][1].axhline(y=ll_mean, color='r', linestyle='-', alpha=0.5)\naxs[0][1].set_xlim(1, 12);\naxs[0][1].set_xticks([item for item in range(1, 13)])\naxs[0][1].set_xticklabels(months);\naxs[0][1].set_ylabel('# of goals')\naxs[0][1].set_title('La Liga goals distribution')\n\naxs[1][0].plot(league_one_events.groupby('month').count()['id_event'], lw=4, color=random.choice(colors));\n## league one mean\naxs[1][0].axhline(y=lo_mean, color='r', linestyle='-', alpha=0.5)\naxs[1][0].set_xlim(1, 12);\naxs[1][0].set_xticks([item for item in range(1, 13)])\naxs[1][0].set_xticklabels(months);\naxs[1][0].set_ylabel('# of goals')\naxs[1][0].set_title('League One goals distribution')\n\naxs[1][1].plot(serie_a_events.groupby('month').count()['id_event'], lw=4, color=random.choice(colors));\n## serie a league\naxs[1][1].axhline(y=sa_mean, color='r', linestyle='-', alpha=0.5)\naxs[1][1].set_xlim(1, 12);\naxs[1][1].set_xticks([item for item in range(1, 13)])\naxs[1][1].set_xticklabels(months);\naxs[1][1].set_ylabel('# of goals')\naxs[1][1].set_title('Serie A goals distribution')\n\naxs[2][0].plot(bundesliga_events.groupby('month').count()['id_event'], lw=4, color=random.choice(colors));\n## bundesliga mean\naxs[2][0].axhline(y=bl_mean, color='r', linestyle='-', alpha=0.5)\naxs[2][0].set_xlim(1, 12);\naxs[2][0].set_xticks([item for item in range(1, 13)])\naxs[2][0].set_xticklabels(months);\naxs[2][0].set_ylabel('# of goals')\naxs[2][0].set_title('Bundesliga goals distribution')\n\naxs[2][1].axis('off');\nplt.tight_layout()","3b611607":"## Plotly version of the same visual\n\n## Grouping event by month\ngrouped_monthly_distribution = df_events_distribution.groupby('month').count()\n\n## Excluding months with no events\nactive_months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n## Plotting La liga data\nla_liga = go.Scatter(\n                x=active_months,\n                y=la_liga_events.groupby('month').count()['id_event'].values,\n                name = \"La Liga\",\n                line = dict(color = '#FF5733'),\n                opacity = 0.8)\n\n## Plot Bundesliga data\nbundesliga = go.Scatter(\n                x=active_months,\n                y=bundesliga_events.groupby('month').count()['id_event'].values,\n                name = \"Bundesliga\",\n                line = dict(color = '#FFC300'),\n                opacity = 0.8)\n\n## Plotting League One data\nleague_one = go.Scatter(\n                x=active_months,\n                y=league_one_events.groupby('month').count()['id_event'].values,\n                name = \"League One\",\n                line = dict(color = '#17BECF'),\n                opacity = 0.8)\n\n## Plotting Serie A data\nserie_a = go.Scatter(\n                x=active_months,\n                y=serie_a_events.groupby('month').count()['id_event'].values,\n                name = \"Serie A\",\n                line = dict(color = '#75FF33'),\n                opacity = 0.8)\n\n## Plotting Premier League data\npremier_league = go.Scatter(\n                x=active_months,\n                y=premier_league_events.groupby('month').count()['id_event'].values,\n                name = \"Premier League\",\n                line = dict(color = '#C70039'),\n                opacity = 0.8)\n\ndata = [la_liga, bundesliga, league_one, serie_a, premier_league]\n\nlayout = dict(\n    title = \"Goals distribution by month\",\n     xaxis = dict(\n        showticklabels=True)\n)\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, filename = \"Monthly goals distribution in Europe\")","c0b838d0":"## Copying original dataset\ndf_distribution_minutes = df_events.copy()\n\n## Goals distribution by minutes\ndf_distribution_minutes = df_distribution_minutes[(df_distribution_minutes['is_goal'] == 1) &\n                                                ((df_distribution_minutes['time'] >=0 &\n                                                (df_distribution_minutes['time'] <=90)))]\n## Couting the goals by minutes\ngroup_goals_by_minutes = df_distribution_minutes.groupby('time').count()\n\n## Plotting using plotly\ngroup_goals_by_minutes['id_event'].iplot(kind='bar', yTitle='# of goals',\n                                         title='Goals distribution by minutes',\n             filename='cufflinks\/categorical-bar-chart', color='#255818')","76463a63":"## Copying original data\ndf_event_type_distribution_minutes = df_events.copy()\n\n## Grouped data function for events distribution in matches\ndef get_event_type_df(event_type):\n    \"\"\" Function to return grouped data for a specific event type, passed as parameter\n        get_event_type_df(event_type) -> dataframe \n    \"\"\"\n    return df_event_type_distribution_minutes[df_event_type_distribution_minutes['event_type'] == event_type].groupby('time').count()\n\n## Setting dark style\nsns.set_style('darkgrid')\nfig, axs = plt.subplots(nrows=6, ncols=1, figsize=(12, 15), sharex=True)\n\n## Custom colors\ncolors = ['darkgreen', 'royalblue', 'dimgray', 'yellow', 'yellow', 'darkred']\n## Event titles\ntitles = ['Attempt', 'Corner', 'Foul', 'Yellow Card', '2nd Yellow Card', 'Red Card']\n\n## Plotting events\nfor item in range(0, 6):\n    ax = sns.barplot(x = [j for j in range(0, len(get_event_type_df(item+1)['id_event']))],\n                 y=get_event_type_df(item+1)['id_event'].values, color=colors[item], ax=axs[item])\n    ax.set_xticks([j for j in range(0, len(get_event_type_df(item+1)['id_event']), 5)])\n    ax.set_xticklabels(([(str(i) + \"'\") for i in range(0, len(get_event_type_df(item+1)['id_event']), 5)]))\n    ax.set(xlabel = 'Minute of the match', ylabel = '# of events', title = titles[item]);\n\nplt.tight_layout()","3c989819":"## Goals distribution by year\ngoals_dist_year = df_events_distribution.groupby(['time', 'season'], as_index=False).count()\n\n## Breaking down by season\nseason_2015 = goals_dist_year[goals_dist_year['season'] == 2015]\nseason_2016 = goals_dist_year[goals_dist_year['season'] == 2016]\n## The dataset does not contain all the data for the 2017 season. For this reason, we're excluding it \n## to keep the consistency\nseason_2017 = goals_dist_year[goals_dist_year['season'] == 2017]\n\n## Plotting data\n\nfig = {\n    'data': [\n        {'x': season_2015['time'].values,\n         'y': season_2015['id_event'].values, 'mode': 'markers', 'name': 'Season 2015'},\n        {'x': season_2016['time'].values,\n         'y': season_2016['id_event'].values, 'mode': 'markers', 'name': 'Season 2016'}        \n    ],\n    'layout': {\n        'xaxis': {'title': 'Minute of the match'},\n        'yaxis': {'title': \"# of goals\"}\n    }\n}\npy.iplot(fig, filename='cufflinks\/multiple-scatter')","7a622d4c":"## Grouping by assist method\nwhich_assist = df_events[df_events['is_goal'] == 1].groupby('assist_method').count().sort_values('id_event',\n                                                                                 ascending=False)\n## Mapping index numbers to labels\nwhich_assist.index = assist_method\n\n## Plotting data\nwhich_assist['id_event'].iplot(kind='bar', yTitle='# of goals',\n                                         title='Goals distribution by minutes',\n             filename='cufflinks\/categorical-bar-chart', color='#31255A')","cea9093a":"## Grouping data by sitation where a goal occurred\nwhich_situation = df_events[df_events['is_goal'] == 1].groupby('situation').count().sort_values('id_event',\n                                                                                 ascending=False)\n## Mapping index to labels\nwhich_situation.index = situation\n\n## Plotting data\nwhich_situation['id_event'].iplot(kind='bar', yTitle='# of goals',\n                                         title='Situation where goals occurred',\n             filename='cufflinks\/categorical-bar-chart', color='#07B0E8')","7ba4ed0c":"## Filtering data by fouls\ndf_fouls_which_league = df_events[df_events['event_type'] == 3]\n\n## Grouping by league\ndf_fouls_which_league = df_fouls_which_league.groupby('league').count().sort_values('id_event',\n                                                           ascending=True)\n\n## Plotting data\ndf_fouls_which_league['id_event'].iplot(kind='bar', yTitle='# of fouls',\n                                         title='Number of fouls per league',\n             filename='cufflinks\/categorical-bar-chart', color='#07B0E8')","bb240aa2":"# Filtering data by cards\ndf_cards = df_events[(df_events['event_type'] == 4) |\n                     (df_events['event_type'] == 5) |\n                     (df_events['event_type'] == 6)]\n\n## Grouping data\ngrouped_card_events = df_cards.groupby(['league', 'event_type'],\n                                       as_index=False).count().sort_values('id_event',\n                                                                           ascending=True)\n## Creating a new dataframe to group the results\ncards = pd.DataFrame()\n\n## Results for each card type\nyellow_cards = grouped_card_events[grouped_card_events['event_type'] == 4][['league', 'id_event']].sort_index()\nsecond_yellow_card = grouped_card_events[grouped_card_events['event_type'] == 5][['league', 'id_event']].sort_index()\nred_cards = grouped_card_events[grouped_card_events['event_type'] == 6][['league', 'id_event']].sort_index()\n\n## Creating dataframe column to each result\ncards['Yellow card'] = yellow_cards['id_event'].values\ncards['Second yellow card'] = second_yellow_card['id_event'].values\ncards['Red card'] = red_cards['id_event'].values\n\n## Mapping index to labels\ncards.index = yellow_cards['league'].values\n\n## Plotting the results\ncards.iplot(kind='barh', yTitle='# of cards',\n                                         title='Number of cards per league',\n             filename='cufflinks\/categorical-bar-chart', colors = ['#FCEA53', '#FEE300',\n                                                                  '#DF0505'])","adacf1a7":"### Shot places\nWhat are the shot places more likely to score a goal?","dc1b8702":"### Utility function to create barplots\nWe create barplots using matplotlib several times in this notebook. To reuse code to execute similar tasks, we're using this generic function to create a barplot with its parameters.","8f5ebd96":"* It seems that **September**, **October** and **December** are very exciting months to watch european football. \n* This data may be explained by the fact that the major leagues are returning from break on August (that's why this month has a low performance), and the clubs seem to need one month to recover and achieve their regular performance.\n* Other external factors might impact the overall number of goals, which will be explored in the next section.","43311505":"### Another perspective of the same data\n\nWe can see it at a different angle. ","3ff0ec87":"#### Players who blocked the most shots\nThese players blocked the most shots from other players.","9f76dd52":"### Important notes:\n* Lionel Messi and Cristiano Ronaldo are some examples from what has been previously explained. These players are the ones with the most attempts overall, so it's clear why they have also a considerable number of shots blocked.\n* Philippe Coutinho is not a player with a huge number of opportunities - compare to Messi and Cristiano Ronaldo - but he is well known for his long range shot abilities. That's why he is on this list: long range shots are more likely to be blocked because you have more players in front of you trying to disarm you.\n* Other factors that lead a player to have an attempt blocked must be investigated: wrong decision making, lack of ability, field conditions, oponent performance, etc.\n","dbf565b2":"#### Showing the same data with a different chart\nHere we're using a kind o scatter plot to see the same relationship with a different visual. Also, the color indicates sequential values, from lighter to darker.","844353c8":"* It seems that the teams are more likely to score at the end of each half of the match, which the mojority of the goals scored at the minute 90'.","0fc22c47":"### Champions League and Europe League calendars (Other European Competitions)\n\n* It seems that September, October and December are very exciting months to watch european football. \n* It also interesting that on February and March we have a slight drop on the number of goals on the main leagues. That could be caused by a lot of factors, but surprinsgly this is also the month that important european leagues enter their knockout stage: Europe League and Champions League. Due to this, several teams play the domestic league with their alternative players. Other than that, other national competitions take place throughout the year, which might impact in the domestic league overall performance.\n* Also, May has a huge drop on goals: this is the last month of the season for most leagues, and most leagues play until mid-May\n* La Liga has the most number of goals in 5 out of 10 months.\n* Premier League (which is considered a very exciting league) has only the top goals in 2 months. This is fine, taking into account the number of goal does not necessarily imply that a league is more competitive than others.\n* Serie A has the other 3 months.\n* La Liga has a huge drop in the # of goals in **November**, while Premier League has a huge increase in **December**.","e3cf2b0e":"### Events distribution by minutes in matches\nLet's analyze when the events happened in the matches.","14579dc4":"### Situation where goals occurred\nThis section explores in which situations are most likely to score a goal.","5b59f845":"### Preparing data","de68a6e6":"### Imports and initial configuration","8cbad15d":"## Data Preparation\nPreparing data to be used in this notebook. Loading and merging datasets, changing columns values and mapping encoded values to real values presented in the dictionary. ","838282a0":"### Shots blocked\nPlayer that **have their shot blocked** and players that **blocked the most shots**. In this section you'll see some top players in the 'shots blocked' category, which does not necessarily mean they're not precise when finding an opening to shot, but, in this case, it might just mean that they create a lot of opportunities to shot in a match, which certainly increase the probability to be blocked: they try more than the regular players. *To really check how precise is a player, it would be necessary to weight the number of shots they're blocked with the number of clear attempts they have!*","7ba8b708":"* Cristiano Ronaldo is the leader right foot and head finisher. The left foot finisher, as you can guess, is Lionel Messi.\n* 4 out of 5 players from the left foot list play in La Liga (except for Paulo Dybala), which in part explains why La Liga is leader in left foot scorers among all other european leagues.","3c1510a4":"### Reading dictionary to use in the charts\/code","452833db":"### Last minute goals by player\nBreaking down the analysis by player. Which player can be considered the most 'decisive' player?","9c9c5232":"* Serie A has the most number of attempts off target.\n* Premier league and Serie A have the most number of shots on target.\n* Premier league has the most number of shots bocked among all leagues.","227b4bb5":"### Body part - Breakdown by player\nWhich players scored the most goals by body part?","7ed74e7b":"### Top first & last minute scorers\nIn this section, we are analysing the teams that scored most goals in the first 15 minutes of the matches, and in the last 15 minutes of the matches.","273164d6":"### Loading datasets","c7103a4d":"* Christian Eriksen and Alexis Sanchez are the only players that appear in both lists. ","6b852812":"## Football Exploratory Data Analysis","58d93b00":"* Goals with no assistance is the most commom type\n* Through ball is the most difficult\/inefficient method to help other players score a goal.","63a6edf6":"* Open play is by far the most commom situation.\n* Goals from Free kick are really rare to happen, even more than corner.","b1ff8a42":"* Left foot is the most scorer body part in La Liga.\n* Premier League has the record for Right Foot and Head body parts.","33be081f":"### Assists\nWhat are the players with the most assists in all leagues?","e37eb332":"Monaco, Arsenal, Real Madrid, Lazio, and Borussia Dortmund. Something important to note is that in the most leagues, the main team is not the top last minute scorer. Examples: League One, Serie A, and Bundesliga. I am not taking into account Premiere League because there are many comparable teams. ","0c98af89":"### What are the most offensive player and teams?\nWhat are the most offensive teams in all leagues?","31014a88":"### Breaking down by player\nWhat are the most offensive players in all leagues?","c265111c":"### Most goals from outside the box\nThis section analyzes the players with the most goals from outside the box, long range shots.","c6a6bf5e":"It's really interesting that the leagues considered to be very competitive have the most teams on the top 10: Premier League (England) and Serie A (Italy) with 3 teams each. However, the UEFA coefficient (https:\/\/www.uefa.com\/memberassociations\/uefarankings\/country\/) considers 'La Liga' as the top league.","3fb0eb6f":"### Shot outcome\nAnalyzing the shot outcomes in different leagues.","3a9f5211":"* Attempt, Corner and Fouls have similar distribution to the goals distribution, which makes sense, once these sort of events lead to more goals.\n* Red cards are more likely to happen at the minute 87' of the match.\n* It's more likely to receive the second yellow card in the first half of the match.\n","e2cc25dc":"We can see that the most efficient shot locations are at the bottom of the box. Also, the center of the goal should be in the third place because shots at the top are very difficult to score, even thought players try this a lot. Let's see if that's true.","3496d07e":"#### Plotting the same data using Plotly visuals\nWe are plotting the goals distribution by league using plotly linechart. This chart is interesting because of its interactivity. We can check\/unckeck variables on-damand. So, for example, if I don't want to see La Liga goals distribution, I might just unmark La Liga and its data will not be drawn.","80b06a68":"### Most effective players\nThis metric evaluates how much effective a players is, which means that the most effective player needs **the least number of attempts** to score a goal, and the less effective player needs **the most number of chances** to score a single goal.","9f0e8150":"We can see that Alexandre Lacazette is the most effective player. He scores the most number of goals **proportionately** to the number of attempts he has. ","344848b2":"### Fouls distribution by league\nBreaking down the fouls statistics by league.","01af74b3":"### Goals distribution - breakdown by league\nWhat is the breakdown by league? Are all leagues sharing the same pattern?","ca0b2ab8":"We can see above that the three most commom events are: Announcement, Attempt, and Corner. ","38d6b3ef":"* Premier legaue is well known to have \"fast pace\" matches, which might explain the fewer number of fouls.","d9c0ff87":"### Event types breakdown\nThe occurence of the event types.","d713cb95":"Real Madrid appeared in both lists: the teams that scored the most goals in the beginning of the match and in the end of the match. 100% focus from the beginning until the end facing this team.","24db3085":"## Summary\n\n* **Lionel Messi** is the second most offensive player, the player with the most assists, and the most decisive player as the player who scored more goals in the last minutes of matches.\n\n* **Cristiano Ronaldo** is the player with the most offensive player, the player with the most goals with Right Foot and Head, and is one the players with the most goals from long range.\n\n* **Barcelona** and **Real Madrid** are: the most offensive teams and the teams which scored the most last minute goals.\n\n* **Barcelona** is the only team with 2 player in the top 10 **most offensive players** and top 10 players with **the most assists.**\n\n* **Luis Suarez** is the second most effective player and the 4th with the most assists.\n\n* **La Liga** is the league with the higher number of months with the most goals: 5.\n\n* **Premier League** is the league with the least number of fouls and the second with the fewer number of yellow cards.\n\n* **Direct red cards** are more likely to happen than **second yellow cards**.\n\n* Other players like **Alexandre Lacazette**, **Christian Eriksen** and **Alexis Sanchez** have great stats too. \n\nExploring data for other competitions would draw a better picture of the european football, but domestic leagues can be a good indicator.\n\nMany other questions can be answered with this data, we focused on a few. I've tried to explore different libraries and charts to present the data to make this notebook very diverse. Feel free to make any suggestions.\n","15fec2de":"### Goals distribution\nWhat are the goals distribution by month in all Europe leagues?","2f57ed41":"Zlatan Ibrahimovic(*) and Pierre-emerick Aubameyang are the only players that do not play for the top 10 most offensive teams.\n\n(*) He played for Paris Saint-German until season 2016, then transfered to Manchester United, which does not appear on the most offensive teams list\n\nBarcelona is the only team which has 2 players as the most offensives if we take into account that Zlatan Ibrahimovic played for PSG and Manchester United in this interval.","6aa3197d":"### Goals distribution - Breakdown by minutes\nIn which minutes of the matches are more likely to score a goal?","9e6c1a41":"### Some important information:\n* Serie A and La Liga are the top leagues which give yellow cards\n* Direct red card is more common than second yellow card in all leagues, which might be an indicator of: Referees are less likely to give the second yellow card , players \"take it easy\" after receiving the first yellow card, or players are substituted after they receive the second card.","4a02b538":"* **Premier League**: Kevin de Bruyne, Dimitri Payet, Cesc Fabregas, Mesut Ozil\n* **La Liga**: Lionel Messi, Luis Suarez\n* **Serie A**: Marek Hamsik, Miralem Pjanic\n* **League One**: Angel Di Maria\n* **Bundesliga**: Gonzalo Castro\n\n* La Liga is the only league with 2 players from the same team in the top #10","f90278f6":"Above we show the 'more accurate' player and the 'less accurate' one.\n* 70% of Carlos Bacca's shots find the goal.\n* Lionel Messi shots on target 2 out of 3 times.","c152cb52":"### Goals distribution - Breakdown by season\nMinutes when the goals occured in different seasons. Excluding the 2017 season because of the data is not consistent for this year. ","ef8c1819":"### Assists resulting in goals\nDistribution of the assisting methods resulting in goals","fd450638":"* The number 1 scorer from outside of the box is not even in the top 10 of attemtps. To be exactly, Yaya Toure tried 107 times to score 9 goals, and ~8.5% average.\n* Even tough he is the top scorer from long range, he is just one goal ahead the other players.","a97f21f8":"### Last minute goals breakdown by league\nWhich teams have scored the most number of goals by league?","a69f1ec6":"5 players on this list play on Premier League. Interesting, isn't it?","03a7b10b":"We can see in the chart above that the center of the goal is the third most commom shot place. However, taking into accounts only places that enconters the goal itself, we can say that the center of the goal is the most commom. ","e6dfc1d5":"### Cards\nIn this section we'll analyze the cards distribution by league. ","5d54ccde":"### Body part - Breakdown by league\nWhich body part is responsible for the majority of the goals in different leagues?","ec95cd7e":"This chart also shows the players effectiveness from different perspective. We can still see that Alexandre Lacazette and Luis Suarez have the most effectiveness, but if we compare to the number of attempts of Cristiano Ronaldo and Lionel Messi, we can easily see why they have been considered the best for many years: **consistency**. It's difficult to imagine that Lacazette and Suarez will keep this performance every season. \nSo, for example, if we define a threshold line in Zatlan Ibrahimovic, only him and Lionel Messi (28%) achieve more than 20% effectiveness. On the other hand, bellow this threshold, about 87% of the players achieved more than 20% of effectiveness. ","9f949761":"### Most accurate and les accurate players\nPlayers whose shots are more likely to go on target (most accurate) and off target (less accurate)."}}