{"cell_type":{"018d6406":"code","f309a652":"code","555d00af":"code","c2f6cef1":"code","8ec44f0a":"code","003e5b36":"code","7f733320":"code","13f593b8":"code","c7a63652":"code","00f76840":"code","f124124b":"code","95303914":"code","5daff669":"code","9232158e":"code","1ff189db":"code","9e00cd22":"code","bb07a4d2":"code","db727624":"code","1cedb5ac":"code","269b0573":"code","e7566943":"code","c9bf4997":"code","4856ceb0":"code","5c99cd87":"code","da5844ce":"code","4d0948c8":"code","999429ff":"code","e9a96f04":"code","22bc889d":"code","dc053dd0":"code","50aa8c8d":"code","228dcfa5":"code","1f555772":"markdown","536d1f45":"markdown","dedd8e99":"markdown","2e67ebbc":"markdown","ee4e04a6":"markdown","03da1ca9":"markdown","673eaf54":"markdown","ba8b2bc6":"markdown","00e40694":"markdown","4912d3d6":"markdown","6b186702":"markdown","3ddd8f16":"markdown","992bc4bf":"markdown","512d3b0f":"markdown","ccb72f62":"markdown","3c7c21c7":"markdown","a5643fbe":"markdown","30f63ac2":"markdown","df591ca4":"markdown","8ab5828e":"markdown","fecf6326":"markdown","6958d0df":"markdown","45b7a4ad":"markdown","5fd5cf46":"markdown","73933ba3":"markdown","09e76577":"markdown"},"source":{"018d6406":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f309a652":"!pip install bar_chart_race","555d00af":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nplt.style.use('fivethirtyeight')\nsns.set_context(\"notebook\")\nimport datetime\nimport requests\nimport warnings\nfrom IPython.display import HTML\nimport bar_chart_race as bcr\nwarnings.filterwarnings('ignore')","c2f6cef1":"ageGroup = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\ncovid_19_india = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nhospitalBeds = pd.read_csv('..\/input\/covid19-in-india\/HospitalBedsIndia.csv')\nicmrTestLabs = pd.read_csv('..\/input\/covid19-in-india\/ICMRTestingLabs.csv')\nindiDetails = pd.read_csv('..\/input\/covid19-in-india\/IndividualDetails.csv')\nindiaCencus = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\nstateDetails = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')","8ec44f0a":"corona_data=pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nchoro_map=px.choropleth(corona_data, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\/Region\", \n                    animation_frame=\"ObservationDate\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Spread of Coronavirus',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","003e5b36":"covid_19_india=pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv',index_col='Date')\ncovid_19_india","7f733320":"df_cases = covid_19_india.loc[:, ['State\/UnionTerritory', 'Confirmed']]","13f593b8":"df_cases.reset_index(inplace=True)","c7a63652":"\ndf_cases","00f76840":"df_cases['Date']=pd.to_datetime(df_cases['Date'],format=\"%d\/%m\/%y\")\n","f124124b":"df_confirmed_deaths_cured = covid_19_india.loc[:, ['State\/UnionTerritory', 'Confirmed','Deaths','Cured']]\ndf_confirmed_deaths_cured.index=pd.to_datetime(df_confirmed_deaths_cured.index,format=\"%d\/%m\/%y\")\ndf_confirmed_deaths_cured.tail()\n\n","95303914":"df1=df_confirmed_deaths_cured.reset_index()\ndf1=df1.groupby('Date').sum()\ndf1.reset_index(inplace=True)\ndf2=df1.tail(25)\nplt.figure(figsize=(14,8))\nsns.barplot(data=df2,x='Date',y='Confirmed',color=sns.color_palette('Set3')[3],label='Confirmed')\nsns.barplot(data=df2,x='Date',y='Cured',color=sns.color_palette('Set3')[4],label='Cured')\nsns.barplot(data=df2,x='Date',y='Deaths',color=sns.color_palette('Set3')[5],label='Deaths')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.xticks(rotation = 90)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\nplt.legend(frameon=True,fontsize=12)\n\n","5daff669":"\nplt.figure(figsize= (14,8))\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(data=df1,y= 'Confirmed',x= 'Date',label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(data=df1,y= 'Cured',x= 'Date',label = 'Cured',linestyle ='-',color = 'g')\nax3 = plt.plot_date(data=df1,y= 'Deaths',x= 'Date',label = 'Death',linestyle ='-',color = 'r')\nplt.legend();","9232158e":"state_cases=df_confirmed_deaths_cured.groupby('State\/UnionTerritory')['Confirmed','Deaths','Cured'].max().reset_index()\nstate_cases['Active'] = state_cases['Confirmed'] - abs((state_cases['Deaths']- state_cases['Cured']))\nstate_cases[\"Death Rate (per 100)\"] = np.round(100*state_cases[\"Deaths\"]\/state_cases[\"Confirmed\"],2)\nstate_cases[\"Cure Rate (per 100)\"] = np.round(100*state_cases[\"Cured\"]\/state_cases[\"Confirmed\"],2)\nstate_cases.sort_values('Confirmed', ascending= False).fillna(0).style.background_gradient(cmap='Reds',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Blues',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Cured\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Active\"])\\\n                        .background_gradient(cmap='Greys',subset=[\"Death Rate (per 100)\"])\\\n                        .background_gradient(cmap='Oranges',subset=[\"Cure Rate (per 100)\"])","1ff189db":"states_list=['Maharashtra','Gujarat','Delhi','Rajasthan','Madhya Pradesh','Tamil Nadu','Uttar Pradesh','Andhra Pradesh',\n            'West Bengal','Karnataka','Kerala','Jammu and Kashmir','Punjab','Haryana']\ndf5=df_confirmed_deaths_cured.copy()\ndf5.reset_index(inplace=True)\n\n\nplt.figure(figsize=(20,60))\n\nfor i,state in enumerate(states_list):\n    plt.subplot(7,2,i+1)\n    df4=df5[df5['State\/UnionTerritory']==state]\n    df4=df4.tail(15)\n    plt.bar(df4.Date,df4.Confirmed,label='Confirmed')\n    \n    plt.xticks(rotation=90)\n    plt.title(state)\n    plt.ylabel('Total Cases')\n    plt.xlabel('Date')\n    plt.legend()\nplt.tight_layout()\nplt.show()","9e00cd22":"df = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf_maharashtra = df[(df['State\/UnionTerritory']=='Maharashtra')]\nplt.figure(figsize=(8,8))\nplt.plot(df_maharashtra['Date'],df_maharashtra['Confirmed'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Confirmed Cases')\nplt.title('Dates V\/S Confirmed Cases')\nax.annotate('Lockdown1', xy =('23\/03\/20', 74 ), xytext=('23\/03\/20',45000),ha='center',\n                arrowprops = dict(facecolor ='Green',shrink = 0.05),) \nax.annotate('Lockdown 2', xy =('15\/04\/20',2687), xytext=('15\/04\/20',50000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('04\/05\/20',12974), xytext=('04\/05\/20',55000),ha='center', \n            \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('18\/05\/20',33053), xytext=('18\/05\/20',65000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('08\/06\/20',85975), xytext=('08\/06\/20',15000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n\n\n\ndf_test = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_maharashtra_test=df_test[(df_test['State']=='Maharashtra')]\nplt.figure(figsize=(8,8))\nplt.plot(df_maharashtra_test['Date'],df_maharashtra_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-04-15', 45142), xytext=('2020-04-15',150000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-05-04',168374), xytext=('2020-05-04',5000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2020-05-18',282437), xytext=('2020-05-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2020-06-08',565290), xytext=('2020-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n","bb07a4d2":"df = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf_delhi = df[(df['State\/UnionTerritory']=='Delhi')]\nplt.figure(figsize=(8,8))\nplt.plot(df_delhi['Date'],df_delhi['Confirmed'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Confirmed Cases')\nplt.title('Dates V\/S Confirmed Cases')\nax.annotate('Lockdown1', xy =('23\/03\/20',29), xytext=('23\/03\/20',15000),ha='center',\n                arrowprops = dict(facecolor ='Green',shrink = 0.05),) \nax.annotate('Lockdown 2', xy =('15\/04\/20',1561), xytext=('15\/04\/20',25000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('04\/05\/20',4549), xytext=('04\/05\/20',35000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('18\/05\/20',10054), xytext=('18\/05\/20',45000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('08\/06\/20',27654), xytext=('08\/06\/20',5000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n\n\ndf_test = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_delhi_test=df_test[(df_test['State']=='Delhi')]\nplt.figure(figsize=(8,8))\nplt.plot(df_delhi_test['Date'],df_delhi_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-04-15',16605), xytext=('2020-04-15',55000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-05-04',64108), xytext=('2020-05-04',15000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2020-05-18',139727), xytext=('2020-05-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2020-06-08',255615), xytext=('2020-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n","db727624":"df = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf_tn = df[(df['State\/UnionTerritory']=='Tamil Nadu')]\nplt.figure(figsize=(8,8))\nplt.plot(df_tn['Date'],df_tn['Confirmed'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Confirmed Cases')\nplt.title('Dates V\/S Confirmed Cases')\nax.annotate('Lockdown1', xy =('23\/03\/20',9), xytext=('23\/03\/20',9000),ha='center',\n                arrowprops = dict(facecolor ='Green',shrink = 0.05),) \nax.annotate('Lockdown 2', xy =('15\/04\/20',1204), xytext=('15\/04\/20',10000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('04\/05\/20',3023), xytext=('04\/05\/20',15000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('18\/05\/20',11224), xytext=('18\/05\/20',20000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('08\/06\/20',31667), xytext=('08\/06\/20',10000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n\ndf_test = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_tn_test=df_test[(df_test['State']=='Tamil Nadu')]\nplt.figure(figsize=(8,8))\nplt.plot(df_tn_test['Date'],df_tn_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-04-15', 21994), xytext=('2020-04-15',150000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-05-04',162970), xytext=('2020-05-04',5000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2020-05-18',337841), xytext=('2020-05-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2020-06-08',607952), xytext=('2020-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) ","1cedb5ac":"df = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf_guj = df[(df['State\/UnionTerritory']=='Gujarat')]\nplt.figure(figsize=(8,8))\nplt.plot(df_guj['Date'],df_guj['Confirmed'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Confirmed Cases')\nplt.title('Dates V\/S Confirmed Cases')\nax.annotate('Lockdown1', xy =('23\/03\/20',29), xytext=('23\/03\/20',5000),ha='center',\n                arrowprops = dict(facecolor ='Green',shrink = 0.05),) \nax.annotate('Lockdown 2', xy =('15\/04\/20',695), xytext=('15\/04\/20',10000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('04\/05\/20',5428), xytext=('04\/05\/20',15000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('18\/05\/20',11379), xytext=('18\/05\/20',20000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('08\/06\/20',20070), xytext=('08\/06\/20',10000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n\n\ndf_test = pd.read_csv(\"..\/input\/covid19-in-india\/StatewiseTestingDetails.csv\")\ndf_guj_test=df_test[(df_test['State']=='Gujarat')]\nplt.figure(figsize=(8,8))\nplt.plot(df_guj_test['Date'],df_guj_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-04-15',19197), xytext=('2020-04-15',55000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-05-04',84648), xytext=('2020-05-04',15000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2020-05-18',148824), xytext=('2020-05-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2020-06-08',256289), xytext=('2020-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) \n\ndf = pd.read_csv(\"..\/input\/covid19-in-india\/covid_19_india.csv\")\ndf_delhi = df[(df['State\/UnionTerritory']=='Gujarat')]\ndf_dt=df_delhi[(df_delhi['Date']=='06\/07\/20')]\n\n\nlabels = 'Cured', 'Death', 'Unknown'\nsizes = [71.8,0.05,28.15]\nexplode = (0, 0.1, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n","269b0573":"plt.figure(figsize=(14,8))\nsns.barplot(data=ageGroup,x='AgeGroup',y='TotalCases',color=sns.color_palette('Set3')[0])\nplt.title('Age Group Distribution')\nplt.xlabel('Age Group')\nplt.ylabel('Total Cases')\nfor i in range(ageGroup.shape[0]):\n    count = ageGroup.iloc[i]['TotalCases']\n    plt.text(i,count+1,ageGroup.iloc[i]['Percentage'],ha='center')\n    \nfrom IPython.display import display, Markdown","e7566943":"state_testing=stateDetails.groupby('State')['TotalSamples','Negative','Positive'].max().reset_index()\ntesting=state_testing.sort_values(['TotalSamples'], ascending=False)\ntesting","c9bf4997":"plt.figure(figsize=(14,8))\nsns.barplot(data=testing,x='TotalSamples',y='State',color=sns.color_palette('Set3')[0],orientation='horizontal',label='total samples')\nsns.barplot(data=testing,x='Positive',y='State',color=sns.color_palette('Set3')[1],orientation='horizontal',label='total positive cases')\nplt.title('Testing statewise insight')\nplt.legend(frameon=True,fontsize=12)","4856ceb0":"hospitalBeds=hospitalBeds.groupby('State\/UT').max()\nhospitalBeds.reset_index(inplace=True)","5c99cd87":"hospitalBeds","da5844ce":"d=pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\nd.groupby('State')['TotalSamples','Positive'].max()","4d0948c8":"df_active=covid_19_india.groupby('State\/UnionTerritory').max()\ndf_active['active']=df_active['Confirmed']- df_active['Cured']- df_active['Deaths']\ndf_active.reset_index(inplace=True)\ndf_active\n","999429ff":"df_beds_vs_patients=pd.merge(hospitalBeds, df_active, left_on='State\/UT', right_on='State\/UnionTerritory').drop('State\/UnionTerritory', axis=1)\n\n\nplt.figure(figsize=(14,14))\n\nsns.barplot(data=df_beds_vs_patients,y='State\/UT',x='NumPublicBeds_HMIS',color=sns.color_palette('RdBu')[5],label='beds available')\nsns.barplot(data=df_beds_vs_patients,y='State\/UT',x='active',color='r',label='active cases')\nplt.title('Total Beds per states')\nplt.xlabel('Count')\nplt.ylabel('States')\nplt.legend(frameon=True,fontsize=12)","e9a96f04":"df_india=df_cases.groupby('Date').sum()\ndaily_cases=[1.0]\nfor i in range(1,len(df_india)):\n    daily_cases.append(df_india['Confirmed'].iloc[i]-df_india['Confirmed'].iloc[i-1])\n \ndf_india['daily_cases']=daily_cases\n","22bc889d":"df_india","dc053dd0":"df_india.reset_index(inplace=True)\nplt.figure(figsize=(8,8))\nplt.title('Daily new cases')\nplt.plot(df_india['Date'],df_india['daily_cases'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.xticks(rotation=45)\nplt.rc(\"ytick\",labelsize=10)","50aa8c8d":"def find_daily_cases(state):\n    df_cases_state=df_cases[df_cases['State\/UnionTerritory']== state].groupby('Date').sum()\n    daily_cases=[df_cases_state['Confirmed'].iloc[0]]\n    for i in range(1,len(df_cases_state)):\n        daily_cases.append(df_cases_state['Confirmed'].iloc[i]-df_cases_state['Confirmed'].iloc[i-1])\n    df_cases_state['daily_cases']=daily_cases\n    return df_cases_state\n        \n    \n    ","228dcfa5":"states_list=['Maharashtra','Gujarat','Delhi','Rajasthan','Madhya Pradesh','Tamil Nadu','Uttar Pradesh','Andhra Pradesh',\n            'West Bengal','Karnataka','Kerala','Jammu and Kashmir','Punjab','Haryana']\n\nplt.figure(figsize=(30,30))\n\nfor i,state in enumerate(states_list):\n    df_state=find_daily_cases(state)\n    df_state=df_state.reset_index()\n    df_state=df_state.tail(15)\n    plt.subplot(4,4,i+1)\n    plt.title(state)\n    plt.plot(df_state['Date'],df_state['daily_cases'],'-r')\n    plt.rc(\"xtick\",labelsize=9)\n    plt.xticks(rotation=45)\n    plt.rc(\"ytick\",labelsize=10)","1f555772":"The testing has also seen a great amount of increase in Delhi but compared to the cases ,it is a bit underwhelming and also a fact to look at is the testing started around lockdown 2.the rate as we can see has a constant rate of increase ulike the cases graph but we can observe after the unlock the rate at which testing is done has seen a massive increase","536d1f45":"# State Wise Cases Analysis ","dedd8e99":"You might have heard the phrase 'Flatten The Curve'. But what does it really mean? How can data identify if the curve is flattening or not? Let's look at the trend of all the states and the overall numbers of the country.","2e67ebbc":"# Delhi","ee4e04a6":"# Global Spread of Coronavirus","03da1ca9":"![image.png](attachment:image.png)","673eaf54":"# Spread in India","ba8b2bc6":"# Statewise Cure Rate and Death rate","00e40694":"<font size=\"+1\" color=purple ><b> I hope you enjoyed this kernel , Please don't forget to appreciate me with an Upvote.<\/b><\/font>","4912d3d6":"![image.png](attachment:image.png)","6b186702":"gujarat done very low testing at the starting","3ddd8f16":"# Analyze the 4 major States i.e Maharashtra , Delhi , Tamil Nadu , Gujarat","992bc4bf":"# Age Group Analysis","512d3b0f":"![](http:\/\/![image.png](attachment:image.png))","ccb72f62":"# Visualizing Active cases ,deaths ,and recovered cases","3c7c21c7":"Maharashtra is with the highest number of corona cases .above we can see that their rate of testing is incrasing at a good rate but so is the confirmed cases","a5643fbe":"# Flattening the curve ","30f63ac2":"# Maharashtra","df591ca4":"# Health Care Analysis ","8ab5828e":"# Tamil Nadu","fecf6326":"So from the above graphs i can conclude that while lockdown beneficial and with the unlock the above graphs clearly show that the rate has increased rapidly.","6958d0df":"# Gujarat","45b7a4ad":"As we can see the cases have been rising eversince the first lockdown and event though the lockdowns helped in keeping the rate of increase in check,after the unlock as we can see in the graph the rate has increased a lot","5fd5cf46":"# INDIA Covid-19 Analysis ","73933ba3":"As we can see maximum number of cases are of age group 20-69","09e76577":"We need  more number of beds as  number of patients are increasing . we need more beds in states like Delhi and maharashtra"}}