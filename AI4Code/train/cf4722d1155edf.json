{"cell_type":{"fccd8e88":"code","e8c19511":"code","caa49189":"code","5110cd13":"code","f8f4d835":"code","02f67ad1":"code","1680bd92":"code","a136ee15":"code","edafb997":"code","f9aec12c":"code","0fc499ef":"code","19415b02":"code","47e4ae2e":"code","f382ad6b":"code","c5551a7b":"code","f3cb8984":"code","d438f52e":"code","a8d4f781":"markdown","1e6e6048":"markdown","eab4a621":"markdown","6a872ba3":"markdown"},"source":{"fccd8e88":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import rankdata\nimport os\nfrom copy import deepcopy as dc\n\nf = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')[['image_name']]\nn = f.shape[0]\ncols = {}\nfiles = [os.path.join('\/kaggle\/input\/melanoma', file) for file in os.listdir('\/kaggle\/input\/melanoma')] + [os.path.join('\/kaggle\/input\/melanoma-public', file) for file in os.listdir('\/kaggle\/input\/melanoma-public')]\nfor i, filename in enumerate(files):\n    cols[filename] = f'target_{i}'\n    ff = pd.read_csv(filename)\n    ff.columns = ['image_name', f'target_{i}']\n    ff[f'target_{i}'] = rankdata(ff[f'target_{i}'].values.tolist())\n    ff[f'target_{i}'] = ff[f'target_{i}'].apply(lambda x: (x-1)\/(n-1))\n    f = f.merge(ff, on='image_name')","e8c19511":"cols","caa49189":"f.head()","5110cd13":"print(f.shape)","f8f4d835":"f['target'] = f[cols.values()].mean(axis=1)\nf[['image_name', 'target']].head()","02f67ad1":"f[['image_name', 'target']].to_csv('submission.csv', index=False)","1680bd92":"def calculate_mse(y, df):\n    for col in cols.values():\n        df[col] = (df[col]-y)**2\n    return df.sum(axis=1)\ndic_errors = {}\nfor file, col in cols.items():\n    y = f[col]\n    error = calculate_mse(y,f[cols.values()])\n    dic_errors[file] = error","a136ee15":"err_df = pd.DataFrame(dic_errors).transpose().sum(axis=1).sort_values(ascending=False)\nerr_df","edafb997":"N=4","f9aec12c":"biggest_error = err_df.index.tolist()[:N]","0fc499ef":"biggest_error","19415b02":"f[f'target_wo_{N}'] = f[[c for k,c in cols.items() if k not in biggest_error]].mean(axis=1)\nf[['image_name', f'target_wo_{N}']].to_csv(f'sub_wo_{N}.csv', index=False, header=['image_name', 'target'])\nname_col = f'target_wo_{N}'","47e4ae2e":"min_dist = pd.DataFrame(dic_errors).idxmin(axis=1)\nmin_vals = []\nfor i, sub in min_dist.iteritems():\n    min_vals.append(f.loc[i,cols[sub]])","f382ad6b":"f['target_arg_min'] = min_vals","c5551a7b":"f[['image_name', 'target_arg_min']].to_csv('sub_argmin.csv', index=False, header=['image_name', 'target'])","f3cb8984":"vals = []\nfor i, row in pd.DataFrame(dic_errors).iterrows():\n    vals.append(f.loc[i,[cols[sub] for sub in row.sort_values(ascending=False).index.tolist()[N+1:]]].mean())\nf['target_mean_min'] = vals\nf[['image_name', 'target_mean_min']].to_csv('sub_mean_min.csv', index=False, header=['image_name', 'target'])","d438f52e":"f['global_sub']= f[[name_col, 'target_mean_min']].mean(axis=1)\nf[['image_name', 'global_sub']].to_csv('global_sub.csv', index=False, header=['image_name', 'target'])","a8d4f781":"Seems we can exclude submissions 11 and 12...","1e6e6048":"Let's do it intelligent : for each row take minimal distance","eab4a621":"# Try to see which ones are the further from the other ones (probably more false)","6a872ba3":"Other option : for each row mean value of all but the N+1 furthest"}}