{"cell_type":{"c10f797e":"code","438d1dbe":"code","0954520d":"code","5fa5dd33":"code","0422dc66":"code","4cb74b51":"code","7e4b58a7":"code","1030229f":"code","7778e937":"code","4a5717a3":"markdown"},"source":{"c10f797e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","438d1dbe":"#reading the csv using pandas\n#in R 'diamonds.csv' is part of the ggplot2 library you would have to import the library and then access the \n#datasets that comes with the library using data()\ndf = pd.read_csv('..\/input\/diamonds.csv')","0954520d":"#initial look at the dataset\n#in R you would need to insert the name of the dataset as the first argument of the head() function\ndf.head()","5fa5dd33":"#shape of our dataset\n# in R you would insert the name of the dataset as the first argument of the dim() function \ndf.shape","0422dc66":"#removing the first column of the dataset using iloc\n#you do not need to do this for the diamonds dataset in R. An easy way to do this in R is to set the column \n#to null\n#diamomnds[1] <- NULL\ndf = df.iloc[:,1:]","4cb74b51":"#The first thing I would like to do is check if there are any 'Null' values in the dataset \n#in R a way to check if there are na values in the columns of our dataset is using this function \n#apply(diamonds, 2, function(x) any(is.na(x)))\ndf.isnull().any()","7e4b58a7":"#explore the dataset by seeing how cut and color of a diamond affect the price\n# histogram of price counts faceted by color and the cut of the diamond is used to color the histogram bars.\np1 = sns.FacetGrid(data = df, col ='color', col_wrap = 4, hue = 'cut')\n(p1.map(plt.hist, 'price')).add_legend();\n\n#to do this in R\n#ggplot(aes(x = price), data = diamonds)+\n#  geom_histogram(aes(fill = cut))+\n#  facet_wrap(diamonds$color)\n#I think it is more visually appealing and easier to read the output in R","1030229f":"# A scatterplot of table vs. price\nsns.lmplot(x='table', y='price', data=df, palette = 'Set1',\n           fit_reg=False, # No regression line\n           hue='cut', #color of the markers by cut\n           scatter_kws={\"s\": 5, 'alpha':1}) #size of the markers and the alpha\n\nplt.xlim(50,80); #setting the min and max limit for the x axis\n\n#ggplot(aes(x=table, y= price), data = diamonds)+\n#  geom_point(aes(color = cut))+\n#  scale_x_continuous(breaks = seq(50,80,2), limit = c(50,80))","7778e937":"#let us now use the x,y and z to calculate the volume of the diamonds\n# in R to create the new volume column you could\n#diamonds$volume <- diamonds$x * diamonds$y * diamonds$z\ndf['volume'] = df.x * df.y *df.z\n\n#create a scatterplot of the price vs volume to see how the volume affects the price for diamonds of different\n#clarity\np3 = sns.lmplot(data = df, x = 'volume', y = 'price', fit_reg = False, hue = 'clarity', scatter_kws = {'s':5})\n\nplt.xlim(0,df.volume.quantile(0.99));\n\n#to do this in R\n#ggplot(aes(x = volume, y = price), data = diamonds)+\n#  geom_point(aes(color = cut))+\n#  scale_y_log10()+\n#  xlim(0,quantile(diamonds$volume,0.99))","4a5717a3":"From initial observation of the first 5 rows of our dataset we see that we do not need the first column. In R the first column is Carat. one difference between R and Python is that python uses zero based indexing where the initial element of a sequence is assinged the index zero. \n\n(Think of the first unnamed column as the way that indexing works in R)"}}