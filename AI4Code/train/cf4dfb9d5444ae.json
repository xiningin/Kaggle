{"cell_type":{"929de363":"code","0a0be8dc":"code","c3d7f4be":"code","0b6e6a79":"code","9679db1c":"code","f5620737":"code","3c64db12":"code","708d0e10":"code","94c1b31a":"code","6c68e747":"code","d4c21bfb":"code","cca3b89c":"code","a0f9d309":"code","ccce2629":"code","c5e31ee0":"code","c79175de":"code","4d91e6fd":"code","2950b898":"code","55b955be":"code","0dd6330b":"code","1889b959":"code","c73fd58e":"code","1dfdce76":"code","0fce678f":"code","c42aa1db":"code","ba0f3e7f":"code","80f5c6ca":"code","d5cb807f":"code","fb1ffe2d":"code","e748f7fa":"code","eb9c17d6":"code","f9913bc9":"code","8a4d2a12":"code","b90321c6":"code","06795571":"code","677d076a":"code","30063682":"code","16b8fb65":"code","c606921d":"code","eb06b04b":"code","7ac84964":"code","5ea1b1c9":"code","8e212937":"code","8a850694":"code","f30652d4":"code","2264be84":"code","697521ca":"markdown","9568de67":"markdown","f648a35e":"markdown","8007d08e":"markdown","146a4279":"markdown","187dfe4b":"markdown","8bc088b2":"markdown","747d8cba":"markdown","324146b5":"markdown","0ca541b0":"markdown","d9525948":"markdown","80828a91":"markdown"},"source":{"929de363":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0a0be8dc":"movie=pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')\nrating=pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')\ntag = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/tag.csv')","c3d7f4be":"movie.head()","0b6e6a79":"movie_details=movie.merge(rating,on='movieId')","9679db1c":"tag = tag[(tag.tag == 'Bollywood') | (tag.tag == 'Hollywood')]","f5620737":"movie_details = movie_details.merge(tag,on='movieId')","3c64db12":"movie_details = movie_details.drop(['userId_y','timestamp_x','timestamp_y'],axis=1)","708d0e10":"total_ratings=movie_details.groupby(['movieId','genres']).sum()['rating'].reset_index()","94c1b31a":"df=movie_details.copy()","6c68e747":"df.drop_duplicates(['title','genres'],inplace=True)","d4c21bfb":"df=df.merge(total_ratings,on='movieId')","cca3b89c":"df.head()","a0f9d309":"df.drop(columns=['rating_x','genres_y'],inplace=True)","ccce2629":"df.rename(columns={'genres_x':'genres','rating_y':'rating'},inplace=True)","c5e31ee0":"df.drop(columns=['userId_x'],inplace=True)","c79175de":"df.shape","4d91e6fd":"df.to_csv('itdf.csv',index=False)","2950b898":"tag_str = df['tag'].astype(str)\n","55b955be":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ntfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0)\ntfidf_matrix = tfidf.fit_transform(tag_str,df['genres'])\n\ntfidf_matrix.shape  # banyak karena n-gram (1,2)\n# tfidf.get_feature_names()","0dd6330b":"# Since we have used the TF-IDF Vectorizer, calculating the Dot Product will directly give us the Cosine Similarity Score\nfrom sklearn.metrics.pairwise import linear_kernel\n\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\ncosine_sim[:4, :4]","1889b959":"indices = pd.Series(df.index, index=df['title'])\n\n# Function that get movie recommendations based on the cosine similarity score of movie genres\ndef genre_recommendations(title, similarity=False):\n    \n    if similarity == False:\n        \n        idx = indices[title]\n        sim_scores = list(enumerate(cosine_sim[idx]))\n        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n        sim_scores = sim_scores[1:11] # you can change to 20 movies, even more\n    \n        movie_indices = [i[0] for i in sim_scores]\n    \n        return pd.DataFrame({'Movie': df['title'].iloc[movie_indices].values})\n    \n    \n    elif similarity == True:\n        \n        idx = indices[title]\n        sim_scores = list(enumerate(cosine_sim[idx]))\n        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n        sim_scores = sim_scores[1:11]\n        \n        movie_indices = [i[0] for i in sim_scores]\n        similarity_ = [i[1] for i in sim_scores]\n        \n        return pd.DataFrame({'Movie': df['title'].iloc[movie_indices].values,\n                             'Similarity': similarity_})","c73fd58e":"genre_recommendations('Don (2006)', similarity=True)","1dfdce76":"genre_recommendations('Rear Window (1954)',similarity=False)","0fce678f":"movie['year'] = movie.title.str.extract('(\\(\\d\\d\\d\\d\\))',expand=False)\n#Removing the parentheses\nmovie['year'] = movie.year.str.extract('(\\d\\d\\d\\d)',expand=False)","c42aa1db":"#Removing the years from the 'title' column\nmovie['title'] = movie.title.str.replace('(\\(\\d\\d\\d\\d\\))', '')\n#Applying the strip function to get rid of any ending whitespace characters that may have appeared\nmovie['title'] = movie['title'].apply(lambda x: x.strip())","ba0f3e7f":"movie.head()","80f5c6ca":"rating.drop(columns=['timestamp'],inplace=True)","d5cb807f":"movie.drop(columns=['genres'], inplace=True)","fb1ffe2d":"user = [\n            {'title':'Om Shanti Om', 'rating':4},\n            {'title':'Don', 'rating':2.5},\n            {'title':'Lagaan: Once Upon a Time in India', 'rating':3},\n            {'title':\"Chhoti Si Baat\", 'rating':4.5},\n            {'title':'Zindagi Na Milegi Dobara', 'rating':5}\n         ] \ninputMovie = pd.DataFrame(user)\ninputMovie","e748f7fa":"#Filtering out the movies by title\nId = movie[movie['title'].isin(inputMovie['title'].tolist())]\n#Then merging it so we can get the movieId. It's implicitly merging it by title.\ninputMovie = pd.merge(Id, inputMovie)\n#Dropping information we won't use from the input dataframe\ninputMovie = inputMovie.drop('year', 1)\ninputMovie","eb9c17d6":"#Filtering out users that have watched movies that the input has watched and storing it\nusers = rating[rating['movieId'].isin(inputMovie['movieId'].tolist())]\nusers.head()","f9913bc9":"users.shape","8a4d2a12":"#Groupby creates several sub dataframes where they all have the same value in the column specified as the parameter\nuserSubsetGroup = users.groupby(['userId'])","b90321c6":"#Sorting it so users with movie most in common with the input will have priority\nuserSubsetGroup = sorted(userSubsetGroup,  key=lambda x: len(x[1]), reverse=True)\n","06795571":"userSubsetGroup[0:3]","677d076a":"userSubsetGroup = userSubsetGroup[0:100]","30063682":"from math import sqrt\n#Store the Pearson Correlation in a dictionary, where the key is the user Id and the value is the coefficient\npearsonCorDict = {}\n\n#For every user group in our subset\nfor name, group in userSubsetGroup:\n    #Let's start by sorting the input and current user group so the values aren't mixed up later on\n    group = group.sort_values(by='movieId')\n    inputMovie = inputMovie.sort_values(by='movieId')\n    #Get the N for the formula\n    n = len(group)\n    #Get the review scores for the movies that they both have in common\n    temp = inputMovie[inputMovie['movieId'].isin(group['movieId'].tolist())]\n    #And then store them in a temporary buffer variable in a list format to facilitate future calculations\n    tempRatingList = temp['rating'].tolist()\n    #put the current user group reviews in a list format\n    tempGroupList = group['rating'].tolist()\n    #Now let's calculate the pearson correlation between two users, so called, x and y\n    Sxx = sum([i**2 for i in tempRatingList]) - pow(sum(tempRatingList),2)\/float(n)\n    Syy = sum([i**2 for i in tempGroupList]) - pow(sum(tempGroupList),2)\/float(n)\n    Sxy = sum( i*j for i, j in zip(tempRatingList, tempGroupList)) - sum(tempRatingList)*sum(tempGroupList)\/float(n)\n    \n    #If the denominator is different than zero, then divide, else, 0 correlation.\n    if Sxx != 0 and Syy != 0:\n        pearsonCorDict[name] = Sxy\/sqrt(Sxx*Syy)\n    else:\n        pearsonCorDict[name] = 0","16b8fb65":"pearsonCorDict.items()","c606921d":"pearsonDF = pd.DataFrame.from_dict(pearsonCorDict, orient='index')\npearsonDF.columns = ['similarityIndex']\npearsonDF['userId'] = pearsonDF.index\npearsonDF.index = range(len(pearsonDF))\npearsonDF.head()","eb06b04b":"topUsers=pearsonDF.sort_values(by='similarityIndex', ascending=False)[0:50]\ntopUsers.head()","7ac84964":"topUsersRating=topUsers.merge(rating, left_on='userId', right_on='userId', how='inner')\ntopUsersRating.head()","5ea1b1c9":"#Multiplies the similarity by the user's ratings\ntopUsersRating['weightedRating'] = topUsersRating['similarityIndex']*topUsersRating['rating']\ntopUsersRating.head()","8e212937":"#Applies a sum to the topUsers after grouping it up by userId\ntempTopUsersRating = topUsersRating.groupby('movieId').sum()[['similarityIndex','weightedRating']]\ntempTopUsersRating.columns = ['sum_similarityIndex','sum_weightedRating']\ntempTopUsersRating.head()","8a850694":"#Creates an empty dataframe\nrecommendation_df = pd.DataFrame()\n#Now we take the weighted average\nrecommendation_df['weighted average recommendation score'] = tempTopUsersRating['sum_weightedRating']\/tempTopUsersRating['sum_similarityIndex']\nrecommendation_df['movieId'] = tempTopUsersRating.index\nrecommendation_df.head()","f30652d4":"recommendation_df = recommendation_df.sort_values(by='weighted average recommendation score', ascending=False)\nrecommendation_df.head(10)","2264be84":"movie.loc[movie['movieId'].isin(recommendation_df.head(10)['movieId'].tolist())]","697521ca":"## Recommending the Bollywood Movie's","9568de67":"## Selecting Only Hollywood & Bollywood Movies for Recommendation using Tag's","f648a35e":"### Calculating the Cosine Similarity","8007d08e":"## Recommending the Hollywood Movie's","146a4279":"## Creating a User","187dfe4b":"## Collaborative Filtering","8bc088b2":"### Merging the Ratings Data","747d8cba":"### Creating the Recommendation Function","324146b5":"### Deleting the Duplicates","0ca541b0":"## Reading the Required Datasets Movies,Ratings & Tags\n### Tag's to Identify the Hollywood & Bollywood Movies","d9525948":"### Using tfdif vector","80828a91":"### Merging the Tags"}}