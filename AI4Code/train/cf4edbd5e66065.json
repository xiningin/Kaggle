{"cell_type":{"8f2e25a5":"code","799bf73e":"code","020b9efc":"code","7eb5cc3d":"code","95ad6b87":"code","7b5b4d3d":"code","35dcff2a":"code","44060fbe":"code","4a3bf3b5":"code","5c4d9440":"code","fb0b009d":"code","e1ef9cf7":"code","273a1ef4":"code","6533e2ca":"code","69cc12cf":"code","258efe7c":"code","2addc4c5":"code","213f5304":"code","a9e063f1":"code","4422b6ac":"code","d0d2c137":"code","aabe8821":"code","a256acce":"code","de7728bb":"code","56e4b01a":"code","a2284c13":"code","7b7b884e":"code","2c5bdd3e":"code","cf9c71f1":"code","1d8bc091":"code","e396efa1":"code","b4eea4c5":"code","6043d43e":"code","b1b47885":"code","7058a2b4":"code","73cae590":"code","740d3323":"code","1fb93af7":"code","6a6ecad2":"code","1953b0a6":"code","38acfa94":"code","ca9c2341":"code","0369a77f":"code","44b6dab8":"code","344977f9":"code","6ba7e823":"code","75472337":"code","0115ca8e":"code","4fa0472d":"code","b66f716e":"code","4f5a70cd":"code","ab2ac63c":"code","3464660e":"code","44d1e937":"code","573c23f0":"code","fa1e8125":"code","72494f25":"code","c815805f":"code","ce0a53b9":"code","11d4536c":"code","ac2b8414":"code","f529ecef":"code","3acb8f71":"code","c1e6f4c9":"code","de7e3c5f":"code","30472a9a":"code","ef1580af":"code","bb48768e":"code","d974acbd":"code","9490ecaf":"code","910cb523":"code","52216692":"code","a3f881f9":"code","c2493afe":"code","c1675805":"code","f2150129":"code","d77465cd":"code","b6a7a78c":"code","a32f8e7b":"code","3292883e":"code","1aebad34":"code","aa9b2e9d":"code","ce5e45d2":"code","36c97397":"code","8a81b575":"markdown","b2aaac24":"markdown","a2a87da0":"markdown","45bdf177":"markdown","22b2f38f":"markdown","2dfd5e53":"markdown","fdf0dd18":"markdown","77851b39":"markdown","d13f79af":"markdown","0c3dd368":"markdown","51ce3cb0":"markdown","f6d083e6":"markdown","4a8b4a05":"markdown","f5fc0101":"markdown","50a3a00b":"markdown","883d5730":"markdown","fc334a64":"markdown","b91b80e2":"markdown","d01a5a96":"markdown"},"source":{"8f2e25a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","799bf73e":"dataframe=pd.read_csv('..\/input\/cicids2017-full-modified-all-8-files\/combinenew.csv')\ndataframe.head()","020b9efc":"df=dataframe.sample(n=654321,replace=True)\ndf.head()","7eb5cc3d":"df.shape","95ad6b87":"print('Label distribution:')\ndf[' Label'].value_counts()","7b5b4d3d":"df.isna().any()[lambda x:x]","35dcff2a":"del df['Flow Bytes\/s']","44060fbe":"del df[' Flow Packets\/s']","4a3bf3b5":"df.shape","5c4d9440":"df.info()","fb0b009d":"df.describe()","e1ef9cf7":"moddf= df.dropna()\nmoddf.shape","273a1ef4":"from sklearn.model_selection import train_test_split\ndf_train, df_test=train_test_split(moddf,test_size = 0.20)\nprint(df_train.shape)\nprint(df_test.shape)","6533e2ca":"print('Label distribution Training set:')\nprint(df_train[' Label'].value_counts())\nprint()\nprint('Label distribution Test set:')\nprint(df_test[' Label'].value_counts())","69cc12cf":"labeldf=df_train[' Label']\nlabeldf_test=df_test[' Label']\n#change the label column\nnewlabeldf=labeldf.replace({ 'BENIGN' : 0, 'DoS Hulk' : 2,'PortScan' : 4,'DDoS' : 2,'DoS GoldenEye' : 2,\n        'DoS slowloris' : 2,'DoS Slowhttptest' : 2,'Bot' : 1,'Infiltration' : 3,'Heartbleed' : 2, 'FTP-Patator' : 5,\n        'SSH-Patator' : 5, 'Web Attack_Brute Force' : 6, 'Web Attack_XSS' : 6, 'Web Attack_Sql Injection' : 6})\nnewlabeldf_test=labeldf_test.replace({ 'BENIGN' : 0, 'DoS Hulk' : 2,'PortScan' : 4,'DDoS' : 2,'DoS GoldenEye' : 2,\n        'DoS slowloris' : 2,'DoS Slowhttptest' : 2,'Bot' : 1,'Infiltration' : 3,'Heartbleed' : 2, 'FTP-Patator' : 5,\n        'SSH-Patator' : 5, 'Web Attack_Brute Force' : 6, 'Web Attack_XSS' : 6, 'Web Attack_Sql Injection' : 6})\n# put the new label column back\ndf_train[' Label'] = newlabeldf\ndf_test[' Label'] = newlabeldf_test\nprint(df_train[' Label'].head())\nprint(df_test[' Label'].head())","258efe7c":"to_drop_Bot = [2,3,4,5,6]\nto_drop_DoS = [1,3,4,5,6]\nto_drop_Infiltration = [1,2,4,5,6]\nto_drop_PortScan = [1,2,3,5,6]\nto_drop_BruteForce = [1,2,3,4,6]\nto_drop_WebAttacks = [1,2,3,4,5]\n\nBot_df=df_train[~df_train[' Label'].isin(to_drop_Bot)];\nDoS_df=df_train[~df_train[' Label'].isin(to_drop_DoS)];\nInfiltration_df=df_train[~df_train[' Label'].isin(to_drop_Infiltration)];\nPortScan_df=df_train[~df_train[' Label'].isin(to_drop_PortScan)];\nBruteForce_df=df_train[~df_train[' Label'].isin(to_drop_BruteForce)];\nWebAttacks_df=df_train[~df_train[' Label'].isin(to_drop_WebAttacks)];\n#test\nBot_df_test=df_test[~df_test[' Label'].isin(to_drop_Bot)];\nDoS_df_test=df_test[~df_test[' Label'].isin(to_drop_DoS)];\nInfiltration_df_test=df_test[~df_test[' Label'].isin(to_drop_Infiltration)];\nPortScan_df_test=df_test[~df_test[' Label'].isin(to_drop_PortScan)];\nBruteForce_df_test=df_test[~df_test[' Label'].isin(to_drop_BruteForce)];\nWebAttacks_df_test=df_test[~df_test[' Label'].isin(to_drop_WebAttacks)];\nprint('Train:')\nprint('Dimensions of Bot:' ,Bot_df.shape)\nprint('Dimensions of DoS:' ,DoS_df.shape)\nprint('Dimensions of Infiltration:' ,Infiltration_df.shape)\nprint('Dimensions of PortScan:' ,PortScan_df.shape)\nprint('Dimensions of BruteForce:' ,BruteForce_df.shape)\nprint('Dimensions of WebAttacks:' ,WebAttacks_df.shape)\nprint('Test:')\nprint('Dimensions of Bot:' ,Bot_df_test.shape)\nprint('Dimensions of DoS:' ,DoS_df_test.shape)\nprint('Dimensions of Infiltration:' ,Infiltration_df_test.shape)\nprint('Dimensions of PortScan:' ,PortScan_df_test.shape)\nprint('Dimensions of BruteForce:' ,BruteForce_df_test.shape)\nprint('Dimensions of WebAttacks:' ,WebAttacks_df_test.shape)","2addc4c5":"# Split dataframes into X & Y\n# assign X as a dataframe of feautures and Y as a series of outcome variables\nX_Bot = Bot_df.drop(' Label',1)\nY_Bot = Bot_df[' Label']\nX_DoS = DoS_df.drop(' Label',1)\nY_DoS = DoS_df[' Label']\nX_Infiltration = Infiltration_df.drop(' Label',1)\nY_Infiltration = Infiltration_df[' Label']\nX_PortScan = PortScan_df.drop(' Label',1)\nY_PortScan = PortScan_df[' Label']\nX_BruteForce = BruteForce_df.drop(' Label',1)\nY_BruteForce = BruteForce_df[' Label']\nX_WebAttacks = WebAttacks_df.drop(' Label',1)\nY_WebAttacks = WebAttacks_df[' Label']","213f5304":"# test set\nX_Bot_test = Bot_df_test.drop(' Label',1)\nY_Bot_test = Bot_df_test[' Label']\nX_DoS_test = DoS_df_test.drop(' Label',1)\nY_DoS_test = DoS_df_test[' Label']\nX_Infiltration_test = Infiltration_df_test.drop(' Label',1)\nY_Infiltration_test = Infiltration_df_test[' Label']\nX_PortScan_test = PortScan_df_test.drop(' Label',1)\nY_PortScan_test = PortScan_df_test[' Label']\nX_BruteForce_test = BruteForce_df_test.drop(' Label',1)\nY_BruteForce_test = BruteForce_df_test[' Label']\nX_WebAttacks_test = WebAttacks_df_test.drop(' Label',1)\nY_WebAttacks_test = WebAttacks_df_test[' Label']","a9e063f1":"colNames=list(X_Bot)\ncolNames_test=list(X_Bot_test)","4422b6ac":"from sklearn import preprocessing\nscaler1 = preprocessing.StandardScaler().fit(X_Bot)\nX_Bot=scaler1.transform(X_Bot) ","d0d2c137":"scaler2 = preprocessing.StandardScaler().fit(X_DoS)\nX_DoS=scaler2.transform(X_DoS) ","aabe8821":"scaler3 = preprocessing.StandardScaler().fit(X_Infiltration)\nX_Infiltration=scaler3.transform(X_Infiltration) ","a256acce":"scaler4 = preprocessing.StandardScaler().fit(X_PortScan)\nX_PortScan=scaler4.transform(X_PortScan) \n","de7728bb":"scaler5 = preprocessing.StandardScaler().fit(X_BruteForce)\nX_BruteForce=scaler5.transform(X_BruteForce) ","56e4b01a":"scaler6 = preprocessing.StandardScaler().fit(X_WebAttacks)\nX_WebAttacks=scaler6.transform(X_WebAttacks) ","a2284c13":"# test data\nscaler7 = preprocessing.StandardScaler().fit(X_Bot_test)\nX_Bot_test=scaler7.transform(X_Bot_test) \nscaler8 = preprocessing.StandardScaler().fit(X_DoS_test)\nX_DoS_test=scaler8.transform(X_DoS_test) \nscaler9 = preprocessing.StandardScaler().fit(X_Infiltration_test)\nX_Infiltration_test=scaler9.transform(X_Infiltration_test) \nscaler10 = preprocessing.StandardScaler().fit(X_PortScan_test)\nX_PortScan_test=scaler10.transform(X_PortScan_test) \nscaler11 = preprocessing.StandardScaler().fit(X_BruteForce_test)\nX_BruteForce_test=scaler11.transform(X_BruteForce_test)\nscaler12 = preprocessing.StandardScaler().fit(X_WebAttacks_test)\nX_WebAttacks_test=scaler12.transform(X_WebAttacks_test)","7b7b884e":"print(X_Bot.std(axis=0))","2c5bdd3e":"X_DoS.std(axis=0);\nX_Infiltration.std(axis=0);\nX_PortScan.std(axis=0);\nX_BruteForce.std(axis=0);\nX_WebAttacks.std(axis=0);","cf9c71f1":"#univariate feature selection with ANOVA F-test. using secondPercentile method, then RFE\n#Scikit-learn exposes feature selection routines as objects that implement the transform method\n#SelectPercentile: removes all but a user-specified highest scoring percentage of features\n#f_classif: ANOVA F-value between label\/feature for classification tasks.\nfrom sklearn.feature_selection import SelectPercentile, f_classif\nnp.seterr(divide='ignore', invalid='ignore');\nselector=SelectPercentile(f_classif, percentile=10)\nX_newBot = selector.fit_transform(X_Bot,Y_Bot)\nX_newBot.shape","1d8bc091":"true=selector.get_support()\nnewcolindex_Bot=[i for i, x in enumerate(true) if x]\nnewcolname_Bot=list( colNames[i] for i in newcolindex_Bot )\nnewcolname_Bot","e396efa1":"X_newDoS = selector.fit_transform(X_DoS,Y_DoS)\nX_newDoS.shape","b4eea4c5":"true=selector.get_support()\nnewcolindex_DoS=[i for i, x in enumerate(true) if x]\nnewcolname_DoS=list( colNames[i] for i in newcolindex_DoS )\nnewcolname_DoS","6043d43e":"X_newInfiltration = selector.fit_transform(X_Infiltration,Y_Infiltration)\nX_newInfiltration.shape","b1b47885":"true=selector.get_support()\nnewcolindex_Infiltration=[i for i, x in enumerate(true) if x]\nnewcolname_Infiltration=list( colNames[i] for i in newcolindex_Infiltration)\nnewcolname_Infiltration","7058a2b4":"X_newPortScan = selector.fit_transform(X_PortScan,Y_PortScan)\nX_newPortScan.shape","73cae590":"true=selector.get_support()\nnewcolindex_PortScan=[i for i, x in enumerate(true) if x]\nnewcolname_PortScan=list( colNames[i] for i in newcolindex_PortScan)\nnewcolname_PortScan","740d3323":"X_newBruteForce = selector.fit_transform(X_BruteForce,Y_BruteForce)\nX_newBruteForce.shape","1fb93af7":"true=selector.get_support()\nnewcolindex_BruteForce=[i for i, x in enumerate(true) if x]\nnewcolname_BruteForce=list( colNames[i] for i in newcolindex_BruteForce)\nnewcolname_BruteForce","6a6ecad2":"X_newWebAttacks = selector.fit_transform(X_WebAttacks,Y_WebAttacks)\nX_newWebAttacks.shape","1953b0a6":"true=selector.get_support()\nnewcolindex_WebAttacks=[i for i, x in enumerate(true) if x]\nnewcolname_WebAttacks=list( colNames[i] for i in newcolindex_WebAttacks)\nnewcolname_WebAttacks","38acfa94":"print('Features selected for DoS:',newcolname_Bot)\nprint()\nprint('Features selected for Probe:',newcolname_DoS)\nprint()\nprint('Features selected for R2L:',newcolname_Infiltration)\nprint()\nprint('Features selected for U2R:',newcolname_PortScan)\nprint()\nprint('Features selected for BruteForce:',newcolname_BruteForce)\nprint()\nprint('Features selected for WebAttacks:',newcolname_WebAttacks)\nprint()","ca9c2341":"'''from sklearn import preprocessing\nfrom sklearn import utils\n\nlab_enc = preprocessing.LabelEncoder()\nencoded = lab_enc.fit_transform(Y_Bot) '''\n","0369a77f":"Y_Bot=Y_Bot.astype('int')\nY_DoS=Y_DoS.astype('int')\nY_Infiltration=Y_Infiltration.astype('int')\nY_PortScan=Y_PortScan.astype('int')\nY_BruteForce=Y_BruteForce.astype('int')\nY_WebAttacks=Y_WebAttacks.astype('int')","44b6dab8":"from sklearn.feature_selection import RFE\nfrom sklearn.tree import DecisionTreeClassifier\n# Create a decision tree classifier. By convention, clf means 'classifier'\nclf = DecisionTreeClassifier(random_state=0)\n\n#rank all features, i.e continue the elimination until the last one\nrfe = RFE(clf, n_features_to_select=1)\nrfe.fit(X_newBot, Y_Bot)\nprint (\"Bot Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_Bot)))","344977f9":"rfe.fit(X_newDoS, Y_DoS)\nprint (\"DoS Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_DoS)))","6ba7e823":"rfe.fit(X_newInfiltration, Y_Infiltration)\nprint (\"Infiltration Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_Infiltration)))","75472337":"rfe.fit(X_newPortScan, Y_PortScan)\nprint (\"PortScan Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_PortScan)))","0115ca8e":"rfe.fit(X_newBruteForce, Y_BruteForce)\nprint (\"BruteForce Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_BruteForce)))","4fa0472d":"rfe.fit(X_newWebAttacks, Y_WebAttacks)\nprint (\"WebAttacks Features sorted by their rank:\")\nprint (sorted(zip(map(lambda x: round(x, 4), rfe.ranking_), newcolname_WebAttacks)))","b66f716e":"from sklearn.feature_selection import RFE\nclf = DecisionTreeClassifier(random_state=0)\nrfe = RFE(estimator=clf, n_features_to_select=8, step=1)\nrfe.fit(X_Bot, Y_Bot)\nX_rfeBot=rfe.transform(X_Bot)\ntrue=rfe.support_\nrfecolindex_Bot=[i for i, x in enumerate(true) if x]\nrfecolname_Bot=list(colNames[i] for i in rfecolindex_Bot)","4f5a70cd":"rfe.fit(X_DoS, Y_DoS)\nX_rfeDoS=rfe.transform(X_DoS)\ntrue=rfe.support_\nrfecolindex_DoS=[i for i, x in enumerate(true) if x]\nrfecolname_DoS=list(colNames[i] for i in rfecolindex_DoS)","ab2ac63c":"rfe.fit(X_Infiltration, Y_Infiltration)\nX_rfeInfiltration=rfe.transform(X_Infiltration)\ntrue=rfe.support_\nrfecolindex_Infiltration=[i for i, x in enumerate(true) if x]\nrfecolname_Infiltration=list(colNames[i] for i in rfecolindex_Infiltration)","3464660e":"rfe.fit(X_PortScan, Y_PortScan)\nX_rfePortScan=rfe.transform(X_PortScan)\ntrue=rfe.support_\nrfecolindex_PortScan=[i for i, x in enumerate(true) if x]\nrfecolname_PortScan=list(colNames[i] for i in rfecolindex_PortScan)","44d1e937":"rfe.fit(X_BruteForce, Y_BruteForce)\nX_rfeBruteForce=rfe.transform(X_BruteForce)\ntrue=rfe.support_\nrfecolindex_BruteForce=[i for i, x in enumerate(true) if x]\nrfecolname_BruteForce=list(colNames[i] for i in rfecolindex_BruteForce)","573c23f0":"rfe.fit(X_WebAttacks, Y_WebAttacks)\nX_rfeWebAttacks=rfe.transform(X_WebAttacks)\ntrue=rfe.support_\nrfecolindex_WebAttacks=[i for i, x in enumerate(true) if x]\nrfecolname_WebAttacks=list(colNames[i] for i in rfecolindex_WebAttacks)","fa1e8125":"print('Features selected for DoS:',rfecolname_Bot)\nprint()\nprint('Features selected for Probe:',rfecolname_DoS)\nprint()\nprint('Features selected for R2L:',rfecolname_Infiltration)\nprint()\nprint('Features selected for U2R:',rfecolname_PortScan)\nprint()\nprint('Features selected for BruteForce:',rfecolname_BruteForce)\nprint()\nprint('Features selected for WebAttacks:',rfecolname_WebAttacks)\nprint()","72494f25":"print(X_rfeBot.shape)\nprint(X_rfeDoS.shape)\nprint(X_rfeInfiltration.shape)\nprint(X_rfePortScan.shape)\nprint(X_rfeBruteForce.shape)\nprint(X_rfeWebAttacks.shape)","c815805f":"clf_Bot=DecisionTreeClassifier(random_state=0)\nclf_DoS=DecisionTreeClassifier(random_state=0)\nclf_Infiltration=DecisionTreeClassifier(random_state=0)\nclf_PortScan=DecisionTreeClassifier(random_state=0)\nclf_BruteForce=DecisionTreeClassifier(random_state=0)\nclf_WebAttacks=DecisionTreeClassifier(random_state=0)\nclf_Bot.fit(X_Bot, Y_Bot)\nclf_DoS.fit(X_DoS, Y_DoS)\nclf_Infiltration.fit(X_Infiltration, Y_Infiltration)\nclf_PortScan.fit(X_PortScan, Y_PortScan)\nclf_BruteForce.fit(X_BruteForce, Y_BruteForce)\nclf_WebAttacks.fit(X_WebAttacks, Y_WebAttacks)","ce0a53b9":"clf_rfeBot=DecisionTreeClassifier(random_state=0)\nclf_rfeDoS=DecisionTreeClassifier(random_state=0)\nclf_rfeInfiltration=DecisionTreeClassifier(random_state=0)\n#clf_rfePortScan=DecisionTreeClassifier(random_state=0)\nclf_rfeBruteForce=DecisionTreeClassifier(random_state=0)\nclf_rfeWebAttacks=DecisionTreeClassifier(random_state=0)\nclf_rfeBot.fit(X_rfeBot, Y_Bot)\nclf_rfeDoS.fit(X_rfeDoS, Y_DoS)\nclf_rfeInfiltration.fit(X_rfeInfiltration, Y_Infiltration)\n#clf_rfePortScan.fit(X_rfePortScan, Y_PortScan)\nclf_rfeBruteForce.fit(X_rfeBruteForce, Y_BruteForce)\nclf_rfeWebAttacks.fit(X_rfeWebAttacks, Y_WebAttacks)","11d4536c":"clf_Bot.predict(X_Bot_test)","ac2b8414":"clf_Bot.predict_proba(X_Bot_test)[0:10]","f529ecef":"Y_Bot_pred=clf_Bot.predict(X_Bot_test)\n# Create confusion matrix\npd.crosstab(Y_Bot_test, Y_Bot_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","3acb8f71":"Y_DoS_pred=clf_DoS.predict(X_DoS_test)\n# Create confusion matrix\npd.crosstab(Y_DoS_test, Y_DoS_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","c1e6f4c9":"Y_Infiltration_pred=clf_Infiltration.predict(X_Infiltration_test)\n# Create confusion matrix\npd.crosstab(Y_Infiltration_test, Y_Infiltration_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","de7e3c5f":"Y_PortScan_pred=clf_PortScan.predict(X_PortScan_test)\n# Create confusion matrix\npd.crosstab(Y_PortScan_test, Y_PortScan_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","30472a9a":"Y_BruteForce_pred=clf_BruteForce.predict(X_BruteForce_test)\n# Create confusion matrix\npd.crosstab(Y_BruteForce_test, Y_BruteForce_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","ef1580af":"Y_WebAttacks_pred=clf_WebAttacks.predict(X_WebAttacks_test)\n# Create confusion matrix\npd.crosstab(Y_WebAttacks_test, Y_WebAttacks_pred, rownames=['Actual attacks'], colnames=['Predicted attacks'])","bb48768e":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\naccuracy = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='precision')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='recall')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_Bot, X_Bot_test, Y_Bot_test, cv=10, scoring='f1')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","d974acbd":"accuracy = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_DoS, X_DoS_test, Y_DoS_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","9490ecaf":"accuracy = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_Infiltration, X_Infiltration_test, Y_Infiltration_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","910cb523":"accuracy = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_PortScan, X_PortScan_test, Y_PortScan_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","52216692":"accuracy = cross_val_score(clf_BruteForce, X_BruteForce_test, Y_BruteForce_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_BruteForce, X_BruteForce_test, Y_BruteForce_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_BruteForce, X_BruteForce_test, Y_BruteForce_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_BruteForce, X_BruteForce_test, Y_BruteForce_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","a3f881f9":"accuracy = cross_val_score(clf_WebAttacks, X_WebAttacks_test, Y_WebAttacks_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_WebAttacks, X_WebAttacks_test, Y_WebAttacks_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_WebAttacks, X_WebAttacks_test, Y_WebAttacks_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_WebAttacks, X_WebAttacks_test, Y_WebAttacks_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","c2493afe":"X_Bot_test2=X_Bot_test[:,rfecolindex_Bot]\nX_DoS_test2=X_DoS_test[:,rfecolindex_DoS]\nX_Infiltration_test2=X_Infiltration_test[:,rfecolindex_Infiltration]\nX_PortScan_test2=X_PortScan_test[:,rfecolindex_PortScan]\nX_BruteForce_test2=X_BruteForce_test[:,rfecolindex_BruteForce]\nX_WebAttacks_test2=X_WebAttacks_test[:,rfecolindex_WebAttacks]\nX_PortScan_test2.shape","c1675805":"Y_Bot_pred2=clf_rfeBot.predict(X_Bot_test2)\n# Create confusion matrix\npd.crosstab(Y_Bot_test, Y_Bot_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","f2150129":"Y_DoS_pred2=clf_rfeDoS.predict(X_DoS_test2)\n# Create confusion matrix\npd.crosstab(Y_DoS_test, Y_DoS_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","d77465cd":"Y_Infiltration_pred2=clf_rfeInfiltration.predict(X_Infiltration_test2)\n# Create confusion matrix\npd.crosstab(Y_Infiltration_test, Y_Infiltration_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","b6a7a78c":"Y_BruteForce_pred2=clf_rfeBruteForce.predict(X_BruteForce_test2)\n# Create confusion matrix\npd.crosstab(Y_BruteForce_test, Y_BruteForce_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","a32f8e7b":"Y_WebAttacks_pred2=clf_rfeWebAttacks.predict(X_WebAttacks_test2)\n# Create confusion matrix\npd.crosstab(Y_WebAttacks_test, Y_WebAttacks_pred2, rownames=['Actual attacks'], colnames=['Predicted attacks'])","3292883e":"accuracy = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='precision')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='recall')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeBot, X_Bot_test2, Y_Bot_test, cv=10, scoring='f1')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","1aebad34":"accuracy = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeDoS, X_DoS_test2, Y_DoS_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","aa9b2e9d":"accuracy = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeInfiltration, X_Infiltration_test2, Y_Infiltration_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","ce5e45d2":"accuracy = cross_val_score(clf_rfeBruteForce, X_BruteForce_test2, Y_BruteForce_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeBruteForce, X_BruteForce_test2, Y_BruteForce_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeBruteForce, X_BruteForce_test2, Y_BruteForce_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeBruteForce, X_BruteForce_test2, Y_BruteForce_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","36c97397":"accuracy = cross_val_score(clf_rfeWebAttacks, X_WebAttacks_test2, Y_WebAttacks_test, cv=10, scoring='accuracy')\nprint(\"Accuracy: %0.5f (+\/- %0.5f)\" % (accuracy.mean(), accuracy.std() * 2))\nprecision = cross_val_score(clf_rfeWebAttacks, X_WebAttacks_test2, Y_WebAttacks_test, cv=10, scoring='precision_macro')\nprint(\"Precision: %0.5f (+\/- %0.5f)\" % (precision.mean(), precision.std() * 2))\nrecall = cross_val_score(clf_rfeWebAttacks, X_WebAttacks_test2, Y_WebAttacks_test, cv=10, scoring='recall_macro')\nprint(\"Recall: %0.5f (+\/- %0.5f)\" % (recall.mean(), recall.std() * 2))\nf = cross_val_score(clf_rfeWebAttacks, X_WebAttacks_test2, Y_WebAttacks_test, cv=10, scoring='f1_macro')\nprint(\"F-measure: %0.5f (+\/- %0.5f)\" % (f.mean(), f.std() * 2))","8a81b575":"# PortScan","b2aaac24":"# DoS","a2a87da0":"# Summary of features selected by RFE","45bdf177":"Confusion Matrices","22b2f38f":"# Build the model:","2dfd5e53":"# Brute Force","fdf0dd18":"# DoS","77851b39":"# Prediction & Evaluation (validation)","d13f79af":"# WebAttacks","0c3dd368":"# Infiltration","51ce3cb0":"# PortScan","f6d083e6":"# Brute Force","4a8b4a05":"# Bot","f5fc0101":"Get the features that were selected: DoS","50a3a00b":"# Cross Validation: Accuracy, Precision, Recall, F-measure","883d5730":"Recursive Feature Elimination, select 13 features each of 122 (Option 2: get 13 best features from 122 from RFE)","fc334a64":"# Infiltration","b91b80e2":"# WebAttacks","d01a5a96":"# Bot"}}