{"cell_type":{"09f60b51":"code","3d60e296":"code","8829ecf8":"code","fbf8ba1a":"code","22ca2288":"code","aa6279ea":"code","33933cd0":"code","e5ea2686":"code","93f1d0b2":"code","aa370476":"code","bdff5d8a":"code","42cd1bfe":"code","6ebdc499":"code","544e03c6":"code","09931f12":"code","e0094aeb":"code","f39ba680":"code","70391792":"code","fd55e7c6":"code","56d80fe4":"code","92500b5f":"code","4d9f36c9":"code","71d472c4":"code","2e73e841":"code","4696fef8":"code","698d02f7":"code","20b73bd4":"code","24808da0":"code","b0464236":"code","9e79993d":"code","76e2fe7c":"markdown","7724a277":"markdown","44980ada":"markdown","6bacf463":"markdown","7f6d36d2":"markdown"},"source":{"09f60b51":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score","3d60e296":"dfStarClassification = pd.read_csv(\"..\/input\/star-type-classification\/Stars.csv\",sep=\",\")\ndfStarClassification.head()","8829ecf8":"dfStarClassification.info()","fbf8ba1a":"dfStarClassification = dfStarClassification.astype({\"Type\": str})","22ca2288":"dfStarClassification.info()","aa6279ea":"dfStarClassification.Color.unique()","33933cd0":"def ColoumnArrangement(df,ColoumnName):\n    dfSeries = pd.Series(data=df[ColoumnName])\n    dfSeries = dfSeries.str.upper()\n    dfSeries = dfSeries.str.replace(\" \",\"-\")\n    df = df.drop(columns=[ColoumnName])\n    df.insert(loc=4,column=ColoumnName,value= dfSeries)\n    return df\n","e5ea2686":"dfStarClassification = ColoumnArrangement(dfStarClassification,\"Color\")","93f1d0b2":"dfStarClassification.head()","aa370476":"dfStarClassification.Color.unique()","bdff5d8a":"dfStarClassification.Spectral_Class.unique()","42cd1bfe":"correlation = dfStarClassification.corr()\ncorrelation","6ebdc499":"sns.heatmap(correlation,xticklabels=correlation.columns,yticklabels=correlation.columns)","544e03c6":"sns.catplot(x=\"Type\",data= dfStarClassification,kind=\"count\")\nplt.show()","09931f12":"continuousColumns = [\"Temperature\",\"L\",\"R\",\"A_M\"]\nfor item  in continuousColumns:\n    sns.boxplot(x=\"Type\", y=item, data=dfStarClassification)\n    plt.show()\n","e0094aeb":"willOneHotEncode = [\"Color\",\"Spectral_Class\"]\nwillScale  = continuousColumns","f39ba680":"for item in willOneHotEncode:\n    dfStarClassification = pd.concat([dfStarClassification,pd.get_dummies(dfStarClassification[item],prefix=item)],axis=1)\n    dfStarClassification = dfStarClassification.drop(columns=[item])\ndfStarClassification.head()\n","70391792":"minMaxScaler = MinMaxScaler()\nscaledColums = pd.DataFrame(minMaxScaler.fit_transform(dfStarClassification[willScale]),columns=willScale)\nscaledColums.describe()","fd55e7c6":"dfStarClassification.drop(willScale,axis=1,inplace=True)","56d80fe4":"dfStarClassification = pd.concat([dfStarClassification,scaledColums],axis=1)","92500b5f":"dfStarClassification","4d9f36c9":"correlation = dfStarClassification.corr().abs()\ncorrelation.head()","71d472c4":"target = [\"Type\"]\nfeatures = dfStarClassification.columns.drop(target)\ntrain,test = train_test_split(dfStarClassification,test_size = 0.22,random_state= 12)\nxTrain = train[features]\nyTrain = train[target]\nxTest  = test[features]\nyTest = test[target]\n","2e73e841":"from sklearn.neighbors import KNeighborsClassifier","4696fef8":"knnModel = KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=6, p=2,\n                     weights='uniform')\n\nknnModel= KNeighborsClassifier().fit(xTrain,yTrain.values.ravel())\n","698d02f7":"yPred= knnModel.predict(xTest)\naccuracy_score(yTest,yPred)\n","20b73bd4":"print(classification_report(yTest,yPred))\n","24808da0":"from sklearn.tree import DecisionTreeClassifier","b0464236":"dTree = DecisionTreeClassifier(criterion=\"gini\", max_depth=4)\nstart = time.time()\ndTree.fit(xTrain, yTrain)\nend = time.time()\npreddt = dTree.predict(xTest)\nprint(classification_report(yTest,preddt))\nprint(\"Prosesing Time\",end-start)","9e79993d":"dTree = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)\nstart = time.time()\ndTree.fit(xTrain, yTrain)\nend = time.time()\npreddt = dTree.predict(xTest)\nprint(classification_report(yTest,preddt))\nprint(\"Prosesing Time: \",end-start)","76e2fe7c":"## Train Test Split ","7724a277":"## Preprocessing","44980ada":"## Importing The Dataset ","6bacf463":"## KNN","7f6d36d2":"## DecisionTree"}}