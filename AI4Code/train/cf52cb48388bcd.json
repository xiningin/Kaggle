{"cell_type":{"587a780c":"code","e2aa08d0":"code","51d30e44":"code","3a3e63c7":"code","17336b6a":"code","4cdd14db":"code","1ea36f7f":"code","8e026ec0":"code","c3ec68b4":"code","da284379":"code","769f58be":"code","235e6277":"code","8178116e":"code","cfae5de5":"code","24899972":"code","591e9874":"code","766f807b":"code","1bba05cc":"code","067bd237":"code","ad4480c4":"code","59a40b54":"code","f10ddea5":"code","f94ec8e2":"code","6dcbf459":"code","d1df4b33":"code","83888009":"code","37ae997c":"code","f52868e4":"code","9cfb6fd4":"code","c123a435":"code","967e9833":"code","daf23530":"code","23681366":"code","c664c145":"code","a8cb9eef":"code","b2e7e1d2":"code","f03ca6c6":"code","075c844f":"code","206f0945":"code","ce233036":"code","b3cdae9a":"code","28d0802c":"code","66789f32":"code","85604c93":"code","925d2082":"code","7985dfab":"code","d4d6460a":"code","1a05b801":"code","d77f4c2e":"code","0bf9e23b":"code","432a5fba":"code","49b12087":"code","461c778c":"code","e4137319":"code","2c40d6df":"code","9e21f888":"code","92ffe40d":"code","1ba0eb3c":"code","21bbc362":"code","321908de":"code","2a097fcb":"code","a9f9908c":"code","dd005ae2":"code","bc8ca113":"code","2b0b4451":"code","9a7d1daf":"code","52b7ea16":"code","53d0ea88":"code","528ab19d":"code","68cd650a":"code","e8308158":"code","93930adf":"code","43b0d247":"code","3ab9ec72":"code","8bfd7b08":"code","a1333895":"code","b8335a39":"markdown","b4eec9b5":"markdown","5d9c8a2e":"markdown","7540959e":"markdown","9b3f5922":"markdown","4f68a76a":"markdown","b3734c51":"markdown","6797079e":"markdown","2c86c29c":"markdown","cf26d7e1":"markdown","59824026":"markdown","a8a6b15f":"markdown","fbf83ccc":"markdown","4bdd00d8":"markdown","5e83d30a":"markdown","2afca793":"markdown","6ec706cd":"markdown","851aa1f9":"markdown","e3c87ee7":"markdown","4813efc6":"markdown","9d077ccf":"markdown","d7c4fd3d":"markdown","8c1429f5":"markdown","9484dcca":"markdown","63fc4ac6":"markdown","49a2a188":"markdown","36dd0a48":"markdown","b7edac7b":"markdown","12b5253a":"markdown","ea821263":"markdown","6ec32e92":"markdown","050fe417":"markdown","74261576":"markdown","b685be59":"markdown","0ba6f7c9":"markdown","b2ccd87f":"markdown","3a708c7f":"markdown","b85795b4":"markdown"},"source":{"587a780c":"!pip install -q jupyter-dash\n\nimport os\nimport json\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport dash_core_components as dcc\nimport dash_html_components as html\n\n\nfrom jupyter_dash import JupyterDash\nfrom dash.dependencies import Input, Output\nfrom dateutil import parser\nfrom tqdm.notebook import tqdm","e2aa08d0":"players_df = pd.read_csv('..\/input\/mlb-player-digital-engagement-forecasting\/players.csv')","51d30e44":"players_df.head()","3a3e63c7":"players_df['densety'] = 1 \/ len(players_df)\nplayers_df = players_df.fillna('NaN')\n\nfig = px.sunburst(players_df, path=['playerForTestSetAndFuturePreds', 'primaryPositionName', 'birthCountry', 'birthStateProvince', 'birthCity'], values='densety')\nfig.show()","17336b6a":"_players_df = players_df.loc[players_df.playerForTestSetAndFuturePreds != 'NaN', :]\n_players_df[\"heightInches \/ 100\"] = _players_df[\"heightInches\"] \/ 100\n\nfig = px.violin(_players_df, y=\"heightInches \/ 100\", x=\"playerForTestSetAndFuturePreds\", color=\"primaryPositionName\", box=False)\nfig.show()","4cdd14db":"_players_df[\"weight \/ 100\"] = _players_df[\"weight\"] \/ 100\nfig = px.violin(_players_df, y=\"weight \/ 100\", x=\"playerForTestSetAndFuturePreds\", color=\"primaryPositionName\", box=False,)\nfig.show()","1ea36f7f":"_players_df[\"BMI\"] = _players_df[\"weight\"] \/ (_players_df[\"weight\"] * _players_df[\"weight\"]) * 703\nfig = px.violin(_players_df, y=\"BMI\", x=\"playerForTestSetAndFuturePreds\", color=\"primaryPositionName\", box=False,)\nfig.show()","8e026ec0":"def calculateAge(birthDate):\n    birthDate = parser.parse(birthDate)\n    today = datetime.date.today()\n    age = (today.year - birthDate.year - \n         ((today.month, today.day) <\n         (birthDate.month, birthDate.day)))\n    return age","c3ec68b4":"_players_df['age'] = _players_df['DOB'].apply(lambda x: calculateAge(x))\n_players_df['age \/ 100'] = _players_df['age']\/100\nfig = px.violin(_players_df, y=\"age \/ 100\", x=\"playerForTestSetAndFuturePreds\", color=\"primaryPositionName\", box=False, points='all')\nfig.show()","da284379":"print('Average age players in test group:', _players_df.loc[_players_df.playerForTestSetAndFuturePreds == True, 'age'].mean())\nprint('Average age players in train only group:', _players_df.loc[_players_df.playerForTestSetAndFuturePreds == False, 'age'].mean())","769f58be":"fig = px.scatter(_players_df, x=\"age\", y=\"BMI\", color=\"playerForTestSetAndFuturePreds\", opacity=0.25, trendline='ols')\nfig.show()","235e6277":"seasons_df = pd.read_csv('..\/input\/mlb-player-digital-engagement-forecasting\/seasons.csv')","8178116e":"seasons_df","cfae5de5":"start = []\nend = []\nttype = []\n\nfor i, row in seasons_df.iterrows():\n    start.append(row.seasonStartDate)\n    end.append(row.seasonEndDate)\n    ttype.append('Season')\n    \n    start.append(row.preSeasonStartDate)\n    end.append(row.preSeasonEndDate)\n    ttype.append('Pre Season')   \n    \n    start.append(row.regularSeasonStartDate)\n    end.append(row.regularSeasonEndDate)\n    ttype.append('Regular Season')\n    \n    start.append(row.postSeasonStartDate)\n    end.append(row.postSeasonEndDate)\n    ttype.append('Post Season')\n    \nseson_df_timeline = pd.DataFrame({'Start': start, 'End': end, 'Type': ttype})","24899972":"fig = px.timeline(seson_df_timeline, x_start=\"Start\", x_end=\"End\", y=\"Type\", color=\"Type\")\n\nfor i, row in seasons_df.iterrows():\n    fig.add_shape(type='line',\n                yref=\"y\",\n                xref=\"x\",\n                x0=row.lastDate1stHalf,\n                x1=row.lastDate1stHalf,\n                y0=-1,\n                y1=4,\n                line=dict(color='green', width=1))\n    fig.add_annotation(\n                x=row.lastDate1stHalf,\n                y=1.06,\n                yref='paper',\n                showarrow=False,\n                text=f'lastDate1stHalf {row.seasonId}')\n    \n    fig.add_shape(type='line',\n                yref=\"y\",\n                xref=\"x\",\n                x0=row.firstDate2ndHalf,\n                x1=row.firstDate2ndHalf,\n                y0=-1,\n                y1=4,\n                line=dict(color='red', width=1))\n    fig.add_annotation(\n                x=row.firstDate2ndHalf,\n                y=-0.12,\n                yref='paper',\n                showarrow=False,\n                text=f'firstDate2ndHalf {row.seasonId}')\n    \n    if isinstance(row.allStarDate, str):\n        fig.add_shape(type='line',\n                yref=\"y\",\n                xref=\"x\",\n                x0=row.allStarDate,\n                x1=row.allStarDate,\n                y0=-1,\n                y1=4,\n                line=dict(color='blue', width=1))\n        fig.add_annotation(\n                x=row.allStarDate,\n                y=1.10,\n                yref='paper',\n                showarrow=False,\n                textangle = 0, \n                text=f'allStarDate {row.seasonId}')\nfig.update_yaxes(autorange=\"reversed\")\nfig.show()","591e9874":"teams_df = pd.read_csv('..\/input\/mlb-player-digital-engagement-forecasting\/teams.csv')","766f807b":"teams_df.head()","1bba05cc":"teams_df['densety'] = 1 \/ len(teams_df)\nteams_df = teams_df.fillna('NaN')\n\nfig = px.sunburst(teams_df, path=['leagueName', 'divisionName', 'name'], values='densety')\nfig.show()","067bd237":"train_df = pd.read_csv('..\/input\/mlb-player-digital-engagement-forecasting\/train.csv')","ad4480c4":"train_df.head()","59a40b54":"records = []\nfor nextDayPlayerEngagement in train_df.nextDayPlayerEngagement.values:\n    records.extend(filter(lambda x:  x['playerId'] == 628317, json.loads(nextDayPlayerEngagement)))\nplayerTarget = pd.DataFrame.from_records(records)","f10ddea5":"fig = px.line(playerTarget, x=\"engagementMetricsDate\", y=[\"target1\", \"target2\", \"target3\", \"target4\"])\nfig.update_layout(\n    title={\n        'text': \"PlayerId: 628317\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name in ['target2', 'target3', 'target4'] else ())\nfig.show()","f94ec8e2":"records = []\nfor pN in tqdm(players_df.primaryPositionName.unique()):\n    pids = players_df.loc[players_df.primaryPositionName==pN, 'playerId'].values\n    for nextDayPlayerEngagement in tqdm(train_df.nextDayPlayerEngagement.values, total=len(train_df.nextDayPlayerEngagement.values)):\n        filtered = list(filter(lambda x:  x['playerId'] in pids, json.loads(nextDayPlayerEngagement)))\n        records.extend([\n            {\n                'engagementMetricsDate': filtered[0]['engagementMetricsDate'],\n                'target1': np.mean([f['target1'] for f in filtered]),\n                'target2': np.mean([f['target2'] for f in filtered]),\n                'target3': np.mean([f['target3'] for f in filtered]),\n                'target4': np.mean([f['target4'] for f in filtered]),\n                'primaryPositionName': pN\n            }\n        ])","6dcbf459":"targetStatByPosition = pd.DataFrame.from_records(records)","d1df4b33":"fig = px.line(targetStatByPosition, x=\"engagementMetricsDate\", y=\"target1\", color='primaryPositionName')\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['Pitcher'] else ())\nfig.show()","83888009":"fig = px.violin(targetStatByPosition, y=\"target1\", x=\"primaryPositionName\", color=\"primaryPositionName\", box=False)\nfig.show()","37ae997c":"fig = px.line(targetStatByPosition, x=\"engagementMetricsDate\", y=\"target2\", color='primaryPositionName')\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['Pitcher'] else ())\nfig.show()","f52868e4":"fig = px.violin(targetStatByPosition, y=\"target2\", x=\"primaryPositionName\", color=\"primaryPositionName\", box=False)\nfig.show()","9cfb6fd4":"fig = px.line(targetStatByPosition, x=\"engagementMetricsDate\", y=\"target3\", color='primaryPositionName')\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['Pitcher'] else ())\nfig.show()","c123a435":"fig = px.violin(targetStatByPosition, y=\"target3\", x=\"primaryPositionName\", color=\"primaryPositionName\", box=False)\nfig.show()","967e9833":"fig = px.line(targetStatByPosition, x=\"engagementMetricsDate\", y=\"target4\", color='primaryPositionName')\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['Pitcher'] else ())\nfig.show()","daf23530":"fig = px.violin(targetStatByPosition, y=\"target4\", x=\"primaryPositionName\", color=\"primaryPositionName\", box=False)\nfig.show()","23681366":"playerStat = {}\nfor nextDayPlayerEngagement in tqdm(train_df.nextDayPlayerEngagement.values, total=len(train_df.nextDayPlayerEngagement.values)):\n    nextDayPlayerEngagement = json.loads(nextDayPlayerEngagement)\n    for player in nextDayPlayerEngagement:\n        if player['playerId'] in playerStat:\n            playerStat[player['playerId']] += np.array([\n                    float(player['target1']), float(player['target2']), float(player['target3']), float(player['target4']),\n                    1., 1., 1., 1.\n            ])\n        else:\n            playerStat[player['playerId']] = np.array([\n                    float(player['target1']), float(player['target2']), float(player['target3']), float(player['target4']),\n                    1., 1., 1., 1.\n            ])\n            \nfor i in range(1, 5):\n    _players_df[f'target{i}Mean'] = 0\n    \nfor pid, v in playerStat.items():\n    _players_df.loc[players_df.playerId == pid, ['target1Mean', 'target2Mean', 'target3Mean', 'target4Mean']] = np.array([\n        v[0 + i]\/v[4 + i] for i in range(4)\n    ])","c664c145":"fig = px.scatter(_players_df, x=\"BMI\", y=['target1Mean', 'target2Mean', 'target3Mean', 'target4Mean'], opacity=0.25, trendline='ols')\nfig.show()","a8cb9eef":"fig = px.scatter(_players_df, x=\"heightInches\", y=['target1Mean', 'target2Mean', 'target3Mean', 'target4Mean'], opacity=0.25, trendline='ols')\nfig.show()","b2e7e1d2":"fig = px.scatter(_players_df, x=\"weight\", y=['target1Mean', 'target2Mean', 'target3Mean', 'target4Mean'], opacity=0.25, trendline='ols')\nfig.show()","f03ca6c6":"fig = px.scatter(_players_df, x=\"age\", y=['target1Mean', 'target2Mean', 'target3Mean', 'target4Mean'], opacity=0.25, trendline='ols')\nfig.show()","075c844f":"playerActivity = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nplayerTarget = {pid: np.zeros((len(train_df), 4)) for pid in players_df.playerId}\n\nfor i, nextDayPlayerEngagement in tqdm(enumerate(train_df.nextDayPlayerEngagement.values)):\n    nextDayPlayerEngagement = json.loads(nextDayPlayerEngagement)\n    for ndpe in nextDayPlayerEngagement:\n        if ndpe['playerId'] in playerTarget:\n            playerTarget[ndpe['playerId']][i] = [ndpe[f'target{j}'] for j in range(1, 5)]\n\nstatus = set()\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    for r in json.loads(roster):\n        if r['playerId'] in playerActivity:\n            status.add(r['status'])\n            playerActivity[r['playerId']][i] += int(r['status'] == 'Active')\ntrain_df.date = train_df.date.apply(lambda x: parser.parse(str(x)))","206f0945":"pid = 628317\n_ex = pd.DataFrame({'date': train_df.date, 'Activity': playerActivity[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['Activity', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['Activity', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': \"PlayerId: 628317\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","ce233036":"onActive = np.zeros((4,))\nonInActive = np.zeros((4,))\nonActiveCount = 0\nonInActiveCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    activity = playerActivity[pid]\n    \n    active = target[activity > 0]\n    inactive = target[activity == 0]\n        \n    onActiveCount += 1 if len(active) > 0 else 0\n    onInActiveCount += 1 if len(inactive) > 0 else 0\n    for j in range(0, 4):\n        onActive[j] += np.mean(active[:, j]) if len(active) > 0 else 0\n        onInActive[j] += np.mean(inactive[:, j]) if len(inactive) > 0 else 0\nonActive \/= onActiveCount\nonInActive \/= onInActiveCount","b3cdae9a":"_ex = pd.DataFrame({'isActive': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onActive[0], onInActive[0], onActive[1], onInActive[1], onActive[2], onInActive[2], onActive[3], onInActive[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isActive', barmode='group')\nfig.show()","28d0802c":"playerIL = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nlastDate = None\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    updatedPid = set()\n    for r in json.loads(roster):\n        if r['playerId'] in playerIL:\n            if r['status'] == '10-day IL':\n                playerIL[r['playerId']][i] += 10\n                updatedPid.add(r['playerId'])\n            elif r['status'] == '60-day IL':\n                playerIL[r['playerId']][i] += 60\n                updatedPid.add(r['playerId'])\n                \n    if lastDate is not None:\n        day = (train_df.date[i] - lastDate).days\n        for pid in playerIL:\n            if pid not in updatedPid:\n                playerIL[pid][i] += max(0, playerIL[pid][i-1] - 1)\n    lastDate = train_df.date[i]","66789f32":"pid = 622554\n_ex = pd.DataFrame({'date': train_df.date, 'IL Days': playerIL[pid], \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['IL Days', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['IL Days', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","85604c93":"illness = np.concatenate([v for v in playerIL.values()], axis=0)\ntargets = np.concatenate([v[:, 0] for v in playerTarget.values()], axis=0)\nbins = np.array(list(range(0, 100)))\nvalue = np.array([np.sum(illness[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(illness)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target1', 'y':'illness'})\nfig.show()","925d2082":"targets = np.concatenate([v[:, 1] for v in playerTarget.values()], axis=0)\nvalue = np.array([np.sum(illness[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(illness)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target2', 'y':'illness'})\nfig.show()","7985dfab":"targets = np.concatenate([v[:, 2] for v in playerTarget.values()], axis=0)\nvalue = np.array([np.sum(illness[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(illness)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target3', 'y':'illness'})\nfig.show()","d4d6460a":"targets = np.concatenate([v[:, 3] for v in playerTarget.values()], axis=0)\nvalue = np.array([np.sum(illness[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(illness)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target4', 'y':'illness'})\nfig.show()","1a05b801":"playerBereavement = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    for r in json.loads(roster):\n        if r['playerId'] in playerBereavement:\n            playerBereavement[r['playerId']][i] += int(r['status'] == 'Bereavement List')","d77f4c2e":"onBereavement = np.zeros((4,))\nonUnbereavement = np.zeros((4,))\nonBereavementCount = 0\nonUnBereavementCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    bereavement = playerBereavement[pid]\n    \n    tunbereavement = target[bereavement == 0]\n    tbereavement = target[bereavement > 0]\n    \n    onBereavementCount += 1 if len(tbereavement) > 0 else 0\n    onUnBereavementCount += 1 if len(tunbereavement) > 0 else 0\n    for j in range(0, 4):\n        onBereavement[j] += np.mean(tbereavement[:, j]) if len(tbereavement) > 0 else 0\n        onUnbereavement[j] += np.mean(tunbereavement[:, j]) if len(tunbereavement) > 0 else 0\nonBereavement \/= onBereavementCount\nonUnbereavement \/= onUnBereavementCount\n\n_ex = pd.DataFrame({'isBereavement': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onBereavement[0], onUnbereavement[0], onBereavement[1], onUnbereavement[1], onBereavement[2], onUnbereavement[2], onBereavement[3], onUnbereavement[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isBereavement', barmode='group')\nfig.show()","0bf9e23b":"playerDeceased = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    for r in json.loads(roster):\n        if r['playerId'] in playerDeceased:\n            playerDeceased[r['playerId']][i:] += int(r['status'] == 'Deceased')\n            if r['status'] == 'Deceased':\n                print('Deceased Player:', r['playerId'], players_df.loc[players_df.playerId == pid, 'playerName'].values[0])","432a5fba":"pid = 572140\n_ex = pd.DataFrame({'date': train_df.date, 'isDeceased': playerDeceased[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isDeceased', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isDeceased', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","49b12087":"onDeceased = np.zeros((4,))\nonUnDeceased = np.zeros((4,))\nonDeceasedCount = 0\nonUnDeceasedCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    deceased = playerDeceased[pid]\n    tundeceased = target[deceased == 0]\n    tdeceased = target[deceased > 0]\n    \n    onDeceasedCount += 1 if len(tdeceased) > 0 else 0\n    onUnDeceasedCount += 1 if len(tundeceased) > 0 else 0\n    for j in range(0, 4):\n        onDeceased[j] += np.mean(tdeceased[:, j]) if len(tdeceased) > 0 else 0\n        onUnDeceased[j] += np.mean(tundeceased[:, j]) if len(tundeceased) > 0 else 0\nonDeceased \/= onDeceasedCount\nonUnDeceased \/= onUnDeceasedCount\n\n_ex = pd.DataFrame({'isDeceased': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onDeceased[0], onUnDeceased[0], onDeceased[1], onUnDeceased[1], onDeceased[2], onUnDeceased[2], onDeceased[3], onUnDeceased[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isDeceased', barmode='group')\nfig.show()","461c778c":"playerInjured = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nlastDate = None\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    updatedPid = set()\n    for r in json.loads(roster):\n        if r['playerId'] in playerIL:\n            if r['status'] == 'Injured 7-Day':\n                playerInjured[r['playerId']][i] += 7\n                updatedPid.add(r['playerId'])\n            elif r['status'] == 'Injured 10-Day':\n                playerInjured[r['playerId']][i] += 10\n                updatedPid.add(r['playerId'])\n            elif r['status'] == 'Injured 60-Day':\n                playerInjured[r['playerId']][i] += 60\n                updatedPid.add(r['playerId'])\n                \n    if lastDate is not None:\n        day = (train_df.date[i] - lastDate).days\n        for pid in playerInjured:\n            if pid not in updatedPid:\n                playerInjured[pid][i] += max(0, playerInjured[pid][i-1] - 1)\n    lastDate = train_df.date[i]","e4137319":"pid = 640449\n_ex = pd.DataFrame({'date': train_df.date, 'Injured Days': playerInjured[pid], \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['Injured Days', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['Injured Days', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","2c40d6df":"injured = np.concatenate([v for v in playerInjured.values()], axis=0)\ntargets = np.concatenate([v[:, 0] for v in playerTarget.values()], axis=0)\nbins = np.array(list(range(0, 100)))\nvalue = np.array([np.sum(injured[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(injured)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target1', 'y':'injured'})\nfig.show()","9e21f888":"targets = np.concatenate([v[:, 1] for v in playerTarget.values()], axis=0)\nvalue = np.array([np.sum(injured[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(injured)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target2', 'y':'injured'})\nfig.show()","92ffe40d":"targets = np.concatenate([v[:, 2] for v in playerTarget.values()], axis=0)\nvalue = np.array([np.sum(injured[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(injured)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target3', 'y':'injured'})\nfig.show()","1ba0eb3c":"targets = np.concatenate([v[:, 3] for v in playerTarget.values()], axis=0)\nvalue = np.array([np.sum(injured[(targets < b + 1) & (targets >= b)]) for b in bins])\/np.sum(injured)\nfig = px.bar(x=bins, y=value, color=value, labels={'x':'target4', 'y':'injured'})\nfig.show()","21bbc362":"playerFME = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    for r in json.loads(roster):\n        if r['playerId'] in playerFME:\n            playerFME[r['playerId']][i] += int(r['status'] == 'Family Medical Emergency')\n            if r['status'] == 'Family Medical Emergency':\n                print('Family Medical Emergency Player:', r['playerId'], players_df.loc[players_df.playerId == r['playerId'], 'playerName'].values[0])","321908de":"pid = 456078\n_ex = pd.DataFrame({'date': train_df.date, 'isFME': playerFME[pid] * 10, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isFME', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isFME', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","2a097fcb":"onFME = np.zeros((4,))\nonUnFME = np.zeros((4,))\nonFMECount = 0\nonUnFMECount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    fme = playerFME[pid]\n    tunfme = target[fme == 0]\n    tfme = target[fme > 0]\n    \n    onFMECount += 1 if len(tfme) > 0 else 0\n    onUnFMECount += 1 if len(tunfme) > 0 else 0\n    for j in range(0, 4):\n        onFME[j] += np.mean(tfme[:, j]) if len(tfme) > 0 else 0\n        onUnFME[j] += np.mean(tunfme[:, j]) if len(tunfme) > 0 else 0\nonFME \/= onFMECount\nonUnFME \/= onUnFMECount\n\n_ex = pd.DataFrame({'isFME': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onFME[0], onUnFME[0], onFME[1], onUnFME[1], onFME[2], onUnFME[2], onFME[3], onUnFME[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isFME', barmode='group')\nfig.show()","a9f9908c":"playerPaternity = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    for r in json.loads(roster):\n        if r['playerId'] in playerPaternity:\n            playerPaternity[r['playerId']][i] += int(r['status'] == 'Paternity' or r['status'] == 'Paternity List')","dd005ae2":"pid = 628317\n_ex = pd.DataFrame({'date': train_df.date, 'isPaternity': playerPaternity[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isPaternity', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isPaternity', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","bc8ca113":"onPaternity = np.zeros((4,))\nonUnPaternity = np.zeros((4,))\nonPaternityCount = 0\nonUnPaternityCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    paternity = playerPaternity[pid]\n    tunpaternity = target[paternity == 0]\n    tpaternity = target[paternity > 0]\n    \n    onPaternityCount += 1 if len(tpaternity) > 0 else 0\n    onUnPaternityCount += 1 if len(tunpaternity) > 0 else 0\n    for j in range(0, 4):\n        onPaternity[j] += np.mean(tpaternity[:, j]) if len(tpaternity) > 0 else 0\n        onUnPaternity[j] += np.mean(tunpaternity[:, j]) if len(tunpaternity) > 0 else 0\nonPaternity \/= onPaternityCount\nonUnPaternity \/= onUnPaternityCount\n\n_ex = pd.DataFrame({'isPaternity': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onPaternity[0], onUnPaternity[0], onPaternity[1], onUnPaternity[1], onPaternity[2], onUnPaternity[2], onPaternity[3], onUnPaternity[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isPaternity', barmode='group')\nfig.show()","2b0b4451":"playerReassigned = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    roster = json.loads(roster)\n    for r in roster:\n        if r['playerId'] in playerReassigned:\n            playerReassigned[r['playerId']][i] += int(r['status'] == 'Reassigned' and r['status'] != 'Reassigned to Minors')\n            playerReassigned[r['playerId']][i] -= int(r['status'] == 'Reassigned to Minors')\n    for r in roster:\n        if r['playerId'] in playerReassigned:\n            playerReassigned[r['playerId']][i] = max(0., playerReassigned[r['playerId']][i])","9a7d1daf":"pid = 650619\n_ex = pd.DataFrame({'date': train_df.date, 'isReassignedToMajor': playerReassigned[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isReassignedToMajor', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isReassignedToMajor', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","52b7ea16":"onReassigned = np.zeros((4,))\nonUnReassigned = np.zeros((4,))\nonReassignedCount = 0\nonUnReassignedCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    reassigned = playerReassigned[pid]\n    tunreassigned = target[reassigned == 0]\n    treassigned = target[reassigned > 0]\n    \n    onReassignedCount += 1 if len(treassigned) > 0 else 0\n    onUnReassignedCount += 1 if len(tunreassigned) > 0 else 0\n    for j in range(0, 4):\n        onReassigned[j] += np.mean(treassigned[:, j]) if len(treassigned) > 0 else 0\n        onUnReassigned[j] += np.mean(tunreassigned[:, j]) if len(tunreassigned) > 0 else 0\nonReassigned \/= onPaternityCount\nonUnReassigned \/= onUnPaternityCount\n\n_ex = pd.DataFrame({'isReassignedToMajor': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onReassigned[0], onUnReassigned[0], onReassigned[1], onUnReassigned[1], onReassigned[2], onUnReassigned[2], onReassigned[3], onUnReassigned[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isReassignedToMajor', barmode='group')\nfig.show()","53d0ea88":"playerReassignedToMinor = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    roster = json.loads(roster)\n    for r in roster:\n        if r['playerId'] in playerReassignedToMinor:\n            playerReassignedToMinor[r['playerId']][i] += int(r['status'] == 'Reassigned to Minors')","528ab19d":"pid = 650619\n_ex = pd.DataFrame({'date': train_df.date, 'isReassignedToMinor': playerReassignedToMinor[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isReassignedToMinor', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isReassignedToMinor', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","68cd650a":"onReassigned = np.zeros((4,))\nonUnReassigned = np.zeros((4,))\nonReassignedCount = 0\nonUnReassignedCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    reassigned = playerReassignedToMinor[pid]\n    tunreassigned = target[reassigned == 0]\n    treassigned = target[reassigned > 0]\n    \n    onReassignedCount += 1 if len(treassigned) > 0 else 0\n    onUnReassignedCount += 1 if len(tunreassigned) > 0 else 0\n    for j in range(0, 4):\n        onReassigned[j] += np.mean(treassigned[:, j]) if len(treassigned) > 0 else 0\n        onUnReassigned[j] += np.mean(tunreassigned[:, j]) if len(tunreassigned) > 0 else 0\nonReassigned \/= onPaternityCount\nonUnReassigned \/= onUnPaternityCount\n\n_ex = pd.DataFrame({'isReassignedToMinor': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onReassigned[0], onUnReassigned[0], onReassigned[1], onUnReassigned[1], onReassigned[2], onUnReassigned[2], onReassigned[3], onUnReassigned[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isReassignedToMinor', barmode='group')\nfig.show()","e8308158":"playerReserve = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    roster = json.loads(roster)\n    for r in roster:\n        if r['playerId'] in playerReserve:\n            playerReserve[r['playerId']][i] += int(r['status'] == 'Reserve List (Minors)')","93930adf":"pid = 656887\n_ex = pd.DataFrame({'date': train_df.date, 'isReserve': playerReserve[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isReserve', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isReserve', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","43b0d247":"onReserve = np.zeros((4,))\nonUnReserve = np.zeros((4,))\nonReserveCount = 0\nonUnReserveCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    reserve = playerReserve[pid]\n    tunreserve = target[reserve == 0]\n    treserve = target[reserve > 0]\n    \n    onReserveCount += 1 if len(treserve) > 0 else 0\n    onUnReserveCount += 1 if len(tunreserve) > 0 else 0\n    for j in range(0, 4):\n        onReserve[j] += np.mean(treserve[:, j]) if len(treserve) > 0 else 0\n        onUnReserve[j] += np.mean(tunreserve[:, j]) if len(tunreserve) > 0 else 0\nonReserve \/= onReserveCount\nonUnReserve \/= onUnReserveCount\n\n_ex = pd.DataFrame({'isReserve': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onReserve[0], onUnReserve[0], onReserve[1], onUnReserve[1], onReserve[2], onUnReserve[2], onReserve[3], onUnReserve[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isReserve', barmode='group')\nfig.show()","3ab9ec72":"playerSuspended = {pid: np.zeros((len(train_df),)) for pid in players_df.playerId}\nfor i, roster in tqdm(enumerate(train_df.rosters)):\n    roster = json.loads(roster)\n    for r in roster:\n        if r['playerId'] in playerSuspended:\n            playerSuspended[r['playerId']][i] += int(r['status'] == 'Suspended' or r['status'] == 'Suspended # days')","8bfd7b08":"pid = 592206\n_ex = pd.DataFrame({'date': train_df.date, 'isSuspended': playerSuspended[pid] * 100, \n                    'Target1': playerTarget[pid][:, 0], 'Target2': playerTarget[pid][:, 1],\n                    'Target3': playerTarget[pid][:, 2], 'Target4': playerTarget[pid][:, 3]})\nfig = px.line(_ex, x='date', y=['isSuspended', 'Target1', 'Target2', 'Target3', 'Target4'])\nfig.for_each_trace(lambda trace: trace.update(visible=\"legendonly\") \n                   if trace.name not in ['isSuspended', 'Target1'] else ())\nfig.update_layout(\n    title={\n        'text': f\"PlayerId: {pid}; Player Name: {players_df.loc[players_df.playerId == pid, 'playerName'].values[0]}\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\nfig.show()","a1333895":"onSuspended = np.zeros((4,))\nonUnSuspended = np.zeros((4,))\nonSuspendedCount = 0\nonUnSuspendedCount = 0\nfor pid in playerTarget:\n    target = playerTarget[pid]\n    suspended = playerSuspended[pid]\n    tunsuspended = target[suspended == 0]\n    tsuspended = target[suspended > 0]\n    \n    onSuspendedCount += 1 if len(tsuspended) > 0 else 0\n    onUnSuspendedCount += 1 if len(tunsuspended) > 0 else 0\n    for j in range(0, 4):\n        onSuspended[j] += np.mean(tsuspended[:, j]) if len(tsuspended) > 0 else 0\n        onUnSuspended[j] += np.mean(tsuspended[:, j]) if len(tsuspended) > 0 else 0\nonSuspended \/= onSuspendedCount\nonUnSuspended \/= onUnSuspendedCount\n\n_ex = pd.DataFrame({'isReserve': [True, False, True, False, True, False, True, False], \n                    'targetMean': [onSuspended[0], onUnSuspended[0], onSuspended[1], onUnSuspended[1], onSuspended[2], onUnSuspended[2], onSuspended[3], onUnSuspended[3]],\n                    'targetType': ['target1', 'target1', 'target2', 'target2', 'target3', 'target3', 'target4', 'target4']\n                   })\nfig = px.bar(_ex, x='targetType', y='targetMean', color='isReserve', barmode='group')\nfig.show()","b8335a39":"<a id=\"3.2.9\"><\/a>\n### 3.2.9 Reserve List (Minors) Features","b4eec9b5":"### to be continued...","5d9c8a2e":"<a id=\"2\"><\/a>\n## 2. Teams\n* `id` - teamId\n* `name`\n* `teamName`\n* `teamCode`\n* `shortName`\n* `abbreviation`\n* `locationName`\n* `leagueId`\n* `leagueName`\n* `divisionId`\n* `divisionName`\n* `venueId`\n* `venueName`","7540959e":"Looks like the test group players are younger. Let's calculate average age for two groups.","9b3f5922":"<a id=\"3.2.6\"><\/a>\n### 3.2.6 Paternity & Paternity List Feature","4f68a76a":"So for player which play on game targets value (`target1`, `target2`, `target4`) is greater then for inactive.","b3734c51":"<a id=\"top\"><\/a>\n\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">MLB Player Digital Engagement Forecasting<\/h2>\n\n<img src='https:\/\/media.istockphoto.com\/vectors\/several-baseball-players-in-different-positions-vector-id134085440?k=6&m=134085440&s=612x612&w=0&h=5_Qznbnajho0p04xvUVcVkb9vLPAs_TlGspOqnkI-d8='><\/img>\n\n* [0. Players](#0)\n* [1. Seasons](#1)\n* [2. Teams](#2)\n* [3. Train](#3)\n    * [3.1 nextDayPlayerEngagement](#3.1)\n        * [3.1.1 PlayerId[628317] Example](#3.1.1)\n        * [3.1.2 Targets Vs primaryPosition](#3.1.2)\n        * [ 3.1.3 Targets Vs BMI, Heaight, Weight, Age](#3.1.3)\n    * [3.2 rosters](3.2)\n        * [3.2.1 isActive Feature](#3.2.1)\n        * [3.2.2 Illness Feature](#3.2.2)\n        * [3.2.3 Bereavement Feature](#3.2.3)\n        * [3.2.4 Deceased Feature](#3.2.4)\n        * [3.2.5 Family Medical Emergency Feature](#3.2.5)\n        * [3.2.6 Paternity & Paternity List Feature](#3.2.6)\n        * [3.2.7 Reassigned to Major Features](#3.2.7)\n        * [3.2.8 Reassigned  to Minor Features](#3.2.8)\n        * [3.2.9 Reserve List (Minors) Features](#3.2.9)\n        * [3.2.10 Suspended Features](#3.2.10)","6797079e":"The tallest players in positions:\n* outfilder\n* first base\n* pitcher","2c86c29c":"<a id=\"3.2.10\"><\/a>\n### 3.2.10 Suspended Features","cf26d7e1":"Wow! What is target1, target2, target3, target4 mean?\n\n[Tyler Wayne Skaggs](https:\/\/en.wikipedia.org\/wiki\/Tyler_Skaggs) (July 13, 1991 \u2013 July 1, 2019) was an American left-handed professional baseball starting pitcher who played in Major League Baseball (MLB) for the Arizona Diamondbacks and Los Angeles Angels of Anaheim.","59824026":"Players BMI with age decrease.","a8a6b15f":"<a id=\"3.1.1\"><\/a>\n### 3.1.1 PlayerId[628317] Example","fbf83ccc":"<a id=\"3.2.4\"><\/a>\n### 3.2.4 Deceased Feature","4bdd00d8":"Hm... Some targets value for a player with bereavement greater than for a player without bereavement.","5e83d30a":"So about 57.5 % of players is used on test stage. Most players is Pitchers from California USA.","2afca793":"<a id=\"3.2.7\"><\/a>\n### 3.2.7 Reassigned to Major Features","6ec706cd":"<a id=\"3.2.8\"><\/a>\n### 3.2.8 Reassigned  to Minor Features","851aa1f9":"Players with biggest weights in positions:\n* catcher\n* first base\n* pitcher","e3c87ee7":"<a id=\"3.1.3\"><\/a>\n### 3.1.3 Targets Vs BMI, Heaight, Weight, Age","4813efc6":"This means that the sick player has low KPI values, which is logical. ","9d077ccf":"<a id=\"3.2.5\"><\/a>\n### 3.2.5 Family Medical Emergency Feature","d7c4fd3d":"<a id=\"3.1\"><\/a>\n## 3.1 nextDayPlayerEngagement\n   * `engagementMetricsDate` - date of player engagement metrics, based on US Pacific Time (aligns with previous day\u2019s games, rosters, on-field statistics, transactions, awards, etc.).\n   * `playerId`\n   * `target1`\n   * `target2`\n   * `target3`\n   * `target4`\n\ntarget1-target4 are each daily indexes of digital engagement on a 0-100 scale.","8c1429f5":"<a id=\"3\"><\/a>\n## 3. Train\n\nThis contains data on MLB players active at some point since 2018. Predictions are only scored for those players active in 2021 (see above), but previous seasons\u2019 players are included here to provide more data for exploration and modeling purposes.\n\n^indicates that a more complete walkthrough is below\n\n   * `date` - Integer formatted date, which is a primary index of the CSV.\n   * `nextDayPlayerEngagement^` - Nested JSON containing all modeling targets from the following day.\n   * `games^` - Nested JSON containing all game information for a given day. Includes spring training and exhibition games along with regular season, Postseason, and All-Star games.\n   * `rosters^` - Nested JSON containing all roster information for a given day. Includes in-season and offseason team rosters.\n   * `playerBoxScores^` - Nested JSON containing game stats aggregated at the player game level for a given day. Includes regular season, Postseason, and All-Star games.\n   * `teamBoxScores^` - Nested JSON containing game stats aggregated at the team game level for a given day. Includes regular season, Postseason, and All-Star games.\n   * `transactions^` - Nested JSON containing all transaction information involving MLB teams for a given day.\n   * `standings^` - Nested JSON containing all standings information involving MLB teams for a given day.\n   * `awards^` - Nested JSON containing all awards or honors handed out on a given day.\n   * `events^` - Nested JSON containing all on-field game events for a given day. Includes regular season and Postseason games.\n   * `playerTwitterFollowers^` - Nested JSON containing some players\u2019 number of Twitter followers on that day.\n   * `teamTwitterFollowers^` - Nested JSON containing each team\u2019s number of Twitter followers on that day.\n","9484dcca":"So `primaryPositionName` is categorical feature which have none linear relation with targets value distributions.","63fc4ac6":"Players with less BMI in positions:\n* Designated Hitter\n* First Base\n\nPlayers with big BMI in positions:\n* Shortstop","49a2a188":"<a id=\"3.2.5\"><\/a>\n### 3.2.5 Injured Feature","36dd0a48":"The average targets value is higher for players time periods with Paternity & Paternity List Flags.","b7edac7b":"Hm... The average targets value is higher for players time periods with Family Medical Emergency Flag.","12b5253a":"<a id=\"3.1.2\"><\/a>\n### 3.1.2 Targets Vs primaryPosition","ea821263":"Let's calculate [BMI](https:\/\/en.wikipedia.org\/wiki\/Body_mass_index):\n$$ BMI = \\frac{weight}{height^2} * 703 $$","6ec32e92":"Targets have increased trend with age, weight, height & decreased trend for BMI index.","050fe417":"<a id=\"3.2\"><\/a>\n## 3.2 rosters\n   * `playerId` - Unique identifier for a player.\n   * `gameDate`\n   * `teamId` - teamId that player is on that date.\n   * `statusCode` - Roster status abbreviation.\n   * `status` - Descriptive roster status.\n","74261576":"<a id=\"3.2.2\"><\/a>\n### 3.2.2 Illness Feature","b685be59":"<a id=\"3.2.1\"><\/a>\n### 3.2.1 isActive Feature","0ba6f7c9":"Statistics for an injured feature is the same as for an illness feature.","b2ccd87f":"<a id=\"1\"><\/a>\n## 1. Seasons\n* `seasonId`\n* `seasonStartDate`\n* `seasonEndDate`\n* `preSeasonStartDate`\n* `preSeasonEndDate`\n* `regularSeasonStartDate`\n* `regularSeasonEndDate`\n* `lastDate1stHalf`\n* `allStarDate`\n* `firstDate2ndHalf`\n* `postSeasonStartDate`\n* `postSeasonEndDate`","3a708c7f":"<a id=\"0\"><\/a>\n## 0. Players\n\n<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/8\/88\/Baseball_positions.svg\/1200px-Baseball_positions.svg.png'><\/img>\n\n* `playerId` - Unique identifier for a player.\n* `playerName`\n* `DOB` - Player\u2019s date of birth.\n* `mlbDebutDate`\n* `birthCity`\n* `birthStateProvince`\n* `birthCountry`\n* `heightInches`\n* `weight`\n* `primaryPositionCode` - Player\u2019s primary position code, details are [here](https:\/\/statsapi.mlb.com\/api\/v1\/positions).\n* `primaryPositionName` - player\u2019s primary position, details are [here](https:\/\/statsapi.mlb.com\/api\/v1\/positions).\n* `playerForTestSetAndFuturePreds` - Boolean, true if player is among those for whom predictions are to be made in test data","b85795b4":"<a id=\"3.2.3\"><\/a>\n### 3.2.3 Bereavement Feature"}}