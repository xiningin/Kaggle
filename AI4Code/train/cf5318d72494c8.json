{"cell_type":{"cbf360f1":"code","75847b31":"code","e8178121":"code","521bc178":"code","a9ba049a":"code","521adde8":"code","8b8c625e":"code","97a8c61a":"code","20cc38be":"code","2c227891":"code","ae55e0d3":"code","f5f6cd00":"code","e535256d":"code","3fe06762":"code","8aece009":"code","9b556298":"code","ced0e92b":"code","3c442f97":"markdown","107ec9ef":"markdown","1f31b55e":"markdown","6a83ae37":"markdown"},"source":{"cbf360f1":"# This Kernel includes my studies on World Happiness Report 2019\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","75847b31":"data = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")        # Reads file and equalize it to data variable\n","e8178121":"data.info()              # Getting summary on data ","521bc178":"# Columns of data\n\ndata.columns","a9ba049a":"# Renaming columns of data\n\ndata.rename(columns={'Overall rank':'Overall_rank', 'Country or region':'Country_or_region', 'GDP per capita':'GDP_per_capita',\n                     'Social support':'Social_support','Healthy life expectancy':'Healthy_life_expectancy',\n                    'Freedom to make life choices':'Freedom_to_make_life_choices','Perceptions of corruption':'Perceptions_of_corruption'},\n           inplace=True)\n\ndata.columns","521adde8":"data.corr()          #Shows the correlation in data columns, values around 1.0 means positive correlation where as around -1.0 negative correlation.","8b8c625e":"#Correlation map : Creating heatmap using correlation output from data.corr()\n\nfig, ax = plt.subplots(figsize=(8,8))       # subplots() function creates a single figure object as \"fig\" and a single axis object as \"ax\"\n                                            # figsize() argument defines the size of the figure object\n    \nsns.heatmap(data.corr(), annot=True,linewidth=0.5, linecolor=\"blue\", fmt=\".2f\", ax=ax)\nplt.show()","97a8c61a":"data.head(10)       #Shows first 10 rows of data\n                    #data.head() shows first 5 rows of data","20cc38be":"data.tail(10)         #Shows last 10 rows of data","2c227891":"# Multiple Line plot using <figure> and <ax> object\n\nfig, ax = plt.subplots(figsize=(10,10))    #Creating figure and axis object in order to plot multiple lines in one plot\nx=data[\"Score\"]                            #Setting data for x axis\n\n#Setting data for y axis\n\ny0=data[\"Overall_rank\"]\ny1=data[\"Country_or_region\"]\ny2=data[\"GDP_per_capita\"]\ny3=data[\"Social_support\"]\ny4=data[\"Healthy_life_expectancy\"]\ny5=data[\"Freedom_to_make_life_choices\"]\ny6=data[\"Generosity\"]\ny7=data[\"Perceptions_of_corruption\"]\n\n#Plotting lines of selected y datas vs x data in one graph\n\nax.plot(x,y2,label=\"GDP_per_capita\", color=\"red\", linewidth=2, linestyle=\"-.\", alpha=0.9 )   # Line plotting using plot() attribute of ax object\nax.plot(x,y3,label=\"Social_support\", color=\"black\", linewidth=1)\nax.plot(x,y4,label=\"Healthy_life_expectancy\", color=\"purple\", linewidth=1.5)\nax.plot(x,y5,label=\"Freedom_to_make_life_choices\", color=\"blue\")\nax.plot(x,y7,label=\"Perceptions_of_corruption\", color=\"green\", linewidth=2, linestyle=\"-.\")\n\nplt.title(\"Effects on Happiness of 2019\")       # Shows title of the plot\nplt.xlabel(\"Happiness Score\")                   # Shows X-Axis definition\nplt.ylabel(\"Values\")                            # Shows Y-Axis definition\nplt.legend(loc=\"upper left\")                    # Shows legend at location of upper left on plot\n\nplt.show()","ae55e0d3":"# Multiple line plot specifying target of <ax> in <DataFrame.plot>\n\nax1= data.plot(kind=\"line\", x=\"Score\", y=\"GDP_per_capita\", color=\"red\", linewidth=2, linestyle=\"-.\", alpha=0.9 )\nax2= data.plot(kind=\"line\", x=\"Score\", y=\"Social_support\", color=\"black\", linewidth=1, ax=ax1)\ndata.plot(kind=\"line\", x=\"Score\", y=\"Healthy_life_expectancy\", color=\"purple\", linewidth=1.5, ax=ax2)\n\nplt.show()","f5f6cd00":"# Scatter plot (Plotting scatters seperately in different plots)\n\ndata.plot(kind=\"scatter\", x=\"Healthy_life_expectancy\", y=\"Freedom_to_make_life_choices\", color=\"blue\")  \ndata.plot(kind=\"scatter\", x=\"Healthy_life_expectancy\", y=\"Social_support\", color=\"red\")\ndata.plot(kind=\"scatter\", x=\"Healthy_life_expectancy\", y=\"GDP_per_capita\", color=\"green\")\nplt.show()","e535256d":"# Multiple scatter plotting --> by specifying target of <ax> in <DataFrame.plot>\n\n# Defining <ax> object as scatter plot of \"Healthy life expectancy\" vs \"Freedom to make life choices\".\nax = data.plot(kind=\"scatter\", x=\"Healthy_life_expectancy\", y=\"Freedom_to_make_life_choices\", color=\"blue\", label=\"Freedom_to_make_life_choices\")\n\n# Defining <ax1> object as scatter plot of \"Healthy life expectancy\" vs \"Social support\"\n# Specifying target of ax to ax\nax1= data.plot(kind=\"scatter\", x=\"Healthy_life_expectancy\", y=\"Social_support\", color=\"red\", ax=ax, label=\"Social_support\")\n\n#Specifying target of ax to ax1\ndata.plot(kind=\"scatter\", x=\"Healthy_life_expectancy\", y=\"GDP_per_capita\", color=\"green\", ax=ax1,grid=True, label=\"GDP_per_capita\")\n\nplt.legend(loc=\"upper left\")    # Showing and locating of legend\nplt.title(\"Scatter Plot\")       # Showing title\nax.set_ylabel(\"Values\")         # Defining and showing y-axis by using <ax> object.\nplt.show()\n","3fe06762":"# Histogram of all columns in <data>\n\ndata.plot(kind=\"hist\", bins=50, figsize=(15,10), edgecolor=\"black\", grid=True)\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency of countries\")\nplt.show()","8aece009":"# Overall_rank column is dropped and defined new dataframe as <new_data>\nnew_data=data.drop(columns=[\"Overall_rank\"])    # Creating <new_data> by dropping two columns from <data>\nnew_data.plot(kind=\"hist\", bins=250, figsize=(20,5), edgecolor=\"black\", grid=True)    # Plotting histogram\nplt.xlabel(\"Values\")\nplt.ylabel(\"Frequency of Countries\")\nplt.legend(loc=\"upper center\")\nplt.show()\n           ","9b556298":"# Histogram\n\ndata.GDP_per_capita.plot(kind=\"hist\", bins=20, figsize=(5,5), color=\"green\", edgecolor=\"black\")\nplt.title(\"Histogram of GDP\")\nplt.legend(loc=\"upper left\")\nplt.show()\n","ced0e92b":"# Histogram Happiness Score\ndata.Score.plot(kind=\"hist\", bins=20, figsize=(5,5), color=\"purple\", edgecolor=\"black\")               #Plotting histogram of Hapiness Score.\n\nplt.title(\"Histogram of Score\")\nplt.legend(loc=\"upper left\")\nplt.show()\n","3c442f97":"According to above histogram:\nHappiness score is distributed between 3-7.5 values through countries in the world.","107ec9ef":"**Histogram plot of DataFrame <data>**\n\nI wanted to plot all columns of data in a histogram in order to see the accumulations.\nBut i could not get well-shown graph because of the values of \"Overal rank\" column out of range of the other columns.\nCan be seen as below:\n","1f31b55e":"**For example:**\nAbove table shows that \"Social Support\" and \"Healthy life expectancy\" have positive correlation with \"GDP per capita\". It can be said that the countries increasing \"GDP per capita\", have also increase in \"Social Support\" and \"Healhy life expectancy\".","6a83ae37":"So, i wanted to plot the histogram of <data> all columns except \"Overal rank\" and \"Score\".\n* \"Overal rank\" column is dropped\n* <new_data> is defined as new dataframe as below:    "}}