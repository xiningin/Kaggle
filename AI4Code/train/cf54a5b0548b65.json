{"cell_type":{"c4efce44":"code","5111779c":"code","d3b45dca":"code","f4beae94":"code","4b5a9ef9":"code","18b6835e":"code","322f532f":"code","c1aef37c":"code","9063122b":"code","13bf5fbd":"code","ce0507f0":"code","5fb3af28":"code","815f32a5":"code","6bee916b":"code","886680c7":"code","1a491777":"code","777d0bd3":"code","9ddc6afb":"code","add963f0":"code","a4e0dc1a":"code","11723311":"code","b20043d8":"code","bb69584c":"code","3e68565a":"code","e5dd694e":"code","f7ca0b61":"code","8e1710d3":"code","42385ada":"code","dc92a14d":"code","4c77a6ee":"code","9b952877":"code","efd69754":"code","a882eb87":"code","7acea26d":"code","fb9d52a4":"code","5db204bb":"code","00561ce1":"code","5945cea5":"code","6a10d9ea":"code","9a0a810f":"code","30f01b99":"code","a1992ecc":"code","13bda657":"code","e8fe7dc9":"code","98505070":"code","35368877":"code","52c4054d":"code","b7837e8c":"code","4f115c42":"code","bce3541a":"code","167d7067":"code","60cd67b5":"code","8a9a5313":"markdown","b6145d12":"markdown","231b9dbc":"markdown","d5d9519d":"markdown","dc8b3eff":"markdown","5bb3ec6e":"markdown","a9891449":"markdown","1701f4a8":"markdown","e5893914":"markdown","f4239114":"markdown","e1a837f6":"markdown","a5fd7be7":"markdown","082fb64c":"markdown"},"source":{"c4efce44":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pylab as pl\nimport pandas as pd\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.utils import shuffle\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5111779c":"test = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv')\ntrain = pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')","d3b45dca":"train.head()","f4beae94":"test.head()","4b5a9ef9":"print(train.shape)\nprint(test.shape)","18b6835e":"print(train.isnull().sum())","322f532f":"print(test.isnull().sum())","c1aef37c":"print(train.nunique())","9063122b":"print(test.nunique())","13bf5fbd":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Gender % Looking for job change!',fontsize = 30)\ntrain['gender'].value_counts().plot.pie(autopct=\"%1.1f%%\")","ce0507f0":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('If Candidate is Experienced?',fontsize = 30)\ntrain['relevent_experience'].value_counts().plot.pie(autopct=\"%1.1f%%\")","5fb3af28":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Type of Course Candidate was Enrolled ',fontsize = 30)\ntrain['enrolled_university'].value_counts().plot.pie(autopct=\"%1.1f%%\")","815f32a5":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Size of comapny working?',fontsize = 30)\ntrain['company_size'].value_counts().plot.pie(autopct=\"%1.1f%%\")","6bee916b":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Type Of Company Candidate is\/was working? ',fontsize = 30)\ntrain['company_type'].value_counts().plot.pie(autopct=\"%1.1f%%\")","886680c7":"plt.figure(figsize=(30,10))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('last Job of Candidate ',fontsize = 30)\ntrain['last_new_job'].value_counts().plot.pie(autopct=\"%1.1f%%\")","1a491777":"plt.figure(figsize=(30,15))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nplt.title('Major_Discipline of Candidate',fontsize = 30)\ntrain['major_discipline'].value_counts().plot.pie(autopct=\"%1.5f%%\")","777d0bd3":"train['training_hours'].value_counts()","9ddc6afb":"train['target'].value_counts()\n","add963f0":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"major_discipline\",hue ='gender',data=train)","a4e0dc1a":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"relevent_experience\",hue ='gender',data=train)","11723311":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"enrolled_university\",hue ='gender',data=train)","b20043d8":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"company_size\",hue ='company_type',data=train)","bb69584c":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"last_new_job\",hue ='gender',data=train)","3e68565a":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"company_type\",hue ='gender',data=train)","e5dd694e":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"relevent_experience\",hue ='company_type',data=train)","f7ca0b61":"plt.figure(figsize=(10,6))\nsns.countplot(y=\"relevent_experience\",hue ='enrolled_university',data=train)","8e1710d3":"display(train[['city','city_development_index','relevent_experience','gender','education_level','major_discipline','experience','company_size','company_type','target']].groupby(['gender','education_level','experience','company_size']).agg([\"max\",'mean',\"min\"]).style.background_gradient(cmap=\"Blues\"))","42385ada":"import plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\ncd = train['city_development_index'].value_counts().reset_index()\ncd.columns = [\n    'city_development_index', \n    'count'\n]\ncd['city_development_index'] = cd['city_development_index'].astype(str) + '-'\ncd = cd.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    cd, \n    x='count', \n    y='city_development_index', \n    orientation='h', \n    title='Count: City development index', \n    width=1000,\n    height=900 \n)\n\nfig.show()\n","dc92a14d":"cdi = train.sort_values(by='city_development_index', ascending=True)[:2000]\nfigure = plt.figure(figsize=(10,6))\nsns.barplot(y=cdi.city, x=cdi.city_development_index)\nplt.xticks()\nplt.xlabel('city_development_index')\nplt.ylabel('city')\nplt.title('City by city development index')\nplt.show()","4c77a6ee":"f, axes = plt.subplots(1,1, figsize = (16, 5))\ng1 = sns.distplot(train[\"city_development_index\"], color=\"red\",ax = axes)\nplt.title(\"Distributional of city_development_index\")","9b952877":"def gender_to_numeric(x):\n    if x=='Female': return 2\n    if x=='Male':   return 1\n    if x=='Other':   return 0\n    \ndef rel_experience(x):\n    if x=='Has relevent experience': return 1\n    if x=='No relevent experience':   return 0\n    \ndef enrollment(x):\n    if x=='no_enrollment'   : return 0\n    if x=='Full time course':   return 1 \n    if x=='Part time course':   return 2 \n    \ndef edu_level(x):\n    if x=='Graduate'       :   return 0\n    if x=='Masters'        :   return 1 \n    if x=='High School'    :   return 2 \n    if x=='Phd'            :   return 3 \n    if x=='Primary School' :   return 4 \n    \ndef major(x):\n    if x=='STEM'                   :   return 0\n    if x=='Business Degree'        :   return 1 \n    if x=='Arts'                   :   return 2 \n    if x=='Humanities'             :   return 3 \n    if x=='No Major'               :   return 4 \n    if x=='Other'                  :   return 5 \n    \ndef experience(x):\n    if x=='<1'      :   return 0\n    if x=='1'       :   return 1 \n    if x=='2'       :   return 2 \n    if x=='3'       :   return 3 \n    if x=='4'       :   return 4 \n    if x=='5'       :   return 5\n    if x=='6'       :   return 6\n    if x=='7'       :   return 7\n    if x=='8'       :   return 8 \n    if x=='9'       :   return 9 \n    if x=='10'      :   return 10 \n    if x=='11'      :   return 11\n    if x=='12'      :   return 12\n    if x=='13'      :   return 13 \n    if x=='14'      :   return 14 \n    if x=='15'      :   return 15 \n    if x=='16'      :   return 16\n    if x=='17'      :   return 17\n    if x=='18'      :   return 18\n    if x=='19'      :   return 19 \n    if x=='20'      :   return 20 \n    if x=='>20'     :   return 21 \n    \ndef company_t(x):\n    if x=='Pvt Ltd'               :   return 0\n    if x=='Funded Startup'        :   return 1 \n    if x=='Early Stage Startup'   :   return 2 \n    if x=='Other'                 :   return 3 \n    if x=='Public Sector'         :   return 4 \n    if x=='NGO'                   :   return 5 \n    \ndef company_s(x):\n    if x=='<10'          :   return 0\n    if x=='10\/49'        :   return 1 \n    if x=='100-500'      :   return 2 \n    if x=='1000-4999'    :   return 3 \n    if x=='10000+'       :   return 4 \n    if x=='50-99'        :   return 5 \n    if x=='500-999'      :   return 6 \n    if x=='5000-9999'    :   return 7\n    \ndef last_job(x):\n    if x=='never'        :   return 0\n    if x=='1'            :   return 1 \n    if x=='2'            :   return 2 \n    if x=='3'            :   return 3 \n    if x=='4'            :   return 4 \n    if x=='>4'           :   return 5 \n    \ndef city(x):\n    if x=='city_103'         : return  0\n    if x=='city_40'          : return  1\n    if x=='city_21'          : return  2\n    if x=='city_115'         : return  3\n    if x=='city_162'         : return  4\n    if x=='city_176'         : return  5\n    if x=='city_160'         : return  6\n    if x=='city_46'          : return  7\n    if x=='city_61'          : return  8\n    if x=='city_114'         : return  9\n    if x=='city_13'          : return  10\n    if x=='city_159'         : return  11\n    if x=='city_102'         : return  12\n    if x=='city_67'          : return  13\n    if x=='city_100'         : return  14\n    if x=='city_16'          : return  15\n    if x=='city_71'          : return  16\n    if x=='city_104'         : return  17\n    if x=='city_64'          : return  18\n    if x=='city_101'         : return  19\n    if x=='city_83'          : return  20\n    if x=='city_105'         : return  21\n    if x=='city_73'          : return  22\n    if x=='city_75'          : return  23\n    if x=='city_41'          : return  24\n    if x=='city_11'          : return  25\n    if x=='city_93'          : return  26\n    if x=='city_90'          : return  27\n    if x=='city_36'          : return  28\n    if x=='city_20'          : return  29\n    if x=='city_57'          : return  30\n    if x=='city_152'         : return  31\n    if x=='city_19'          : return  32\n    if x=='city_65'          : return  33\n    if x=='city_74'          : return  34\n    if x=='city_173'         : return  35\n    if x=='city_136'         : return  36\n    if x=='city_98'          : return  37\n    if x=='city_97'          : return  38\n    if x=='city_50'          : return  39\n    if x=='city_138'         : return  40\n    if x=='city_82'          : return  41\n    if x=='city_157'         : return  42\n    if x=='city_89'          : return  43\n    if x=='city_150'         : return  44\n    if x=='city_70'          : return  45\n    if x=='city_175'         : return  46\n    if x=='city_94'          : return  47\n    if x=='city_28'          : return  48\n    if x=='city_59'          : return  49\n    if x=='city_165'         : return  50\n    if x=='city_145'         : return  51\n    if x=='city_142'         : return  52\n    if x=='city_26'          : return  53\n    if x=='city_12'          : return  54\n    if x=='city_37'          : return  55\n    if x=='city_43'          : return  56\n    if x=='city_116'         : return  57\n    if x=='city_23'          : return  58\n    if x=='city_99'          : return  59\n    if x=='city_149'         : return  60\n    if x=='city_10'          : return  61\n    if x=='city_45'          : return  62\n    if x=='city_80'          : return  63\n    if x=='city_128'         : return  64\n    if x=='city_158'         : return  65\n    if x=='city_123'         : return  66\n    if x=='city_7'           : return  67\n    if x=='city_72'          : return  68\n    if x=='city_106'         : return  69\n    if x=='city_143'         : return  70\n    if x=='city_78'          : return  71\n    if x=='city_109'         : return  72\n    if x=='city_24'          : return  73\n    if x=='city_134'         : return  74\n    if x=='city_48'          : return  75\n    if x=='city_144'         : return  76\n    if x=='city_91'          : return  77\n    if x=='city_146'         : return  78\n    if x=='city_133'         : return  79\n    if x=='city_126'         : return  80\n    if x=='city_118'         : return  81\n    if x=='city_9'           : return  82\n    if x=='city_167'         : return  83\n    if x=='city_27'          : return  84\n    if x=='city_84'          : return  85\n    if x=='city_54'          : return  86\n    if x=='city_39'          : return  87\n    if x=='city_79'          : return  88\n    if x=='city_76'          : return  89\n    if x=='city_77'          : return  90\n    if x=='city_81'          : return  91\n    if x=='city_131'         : return  92\n    if x=='city_44'          : return  93\n    if x=='city_117'         : return  94\n    if x=='city_155'         : return  95\n    if x=='city_33'          : return  96\n    if x=='city_141'         : return  97\n    if x=='city_127'         : return  98\n    if x=='city_62'          : return  99\n    if x=='city_53'          : return  100\n    if x=='city_25'          : return  101\n    if x=='city_2'           : return  102\n    if x=='city_69'          : return  103\n    if x=='city_120'         : return  104\n    if x=='city_111'         : return  105\n    if x=='city_30'          : return  106\n    if x=='city_1'           : return  107\n    if x=='city_140'         : return  108\n    if x=='city_179'         : return  109\n    if x=='city_55'          : return  110\n    if x=='city_14'          : return  111\n    if x=='city_42'          : return  112\n    if x=='city_107'         : return  113\n    if x=='city_18'          : return  114\n    if x=='city_139'         : return  115\n    if x=='city_180'         : return  116\n    if x=='city_166'         : return  117\n    if x=='city_121'         : return  118\n    if x=='city_129'         : return  119\n    if x=='city_8'           : return  120\n    if x=='city_31'          : return  121\n    if x=='city_171'         : return  122","efd69754":"train['gender'] = train['gender'].apply(gender_to_numeric)\ntrain['relevent_experience'] = train['relevent_experience'].apply(rel_experience)\ntrain['enrolled_university'] = train['enrolled_university'].apply(enrollment)\ntrain['education_level'] = train['education_level'].apply(edu_level)\ntrain['major_discipline'] = train['major_discipline'].apply(major)\ntrain['experience'] = train['experience'].apply(experience)\ntrain['company_type'] = train['company_type'].apply(company_t)\ntrain['company_size'] = train['company_size'].apply(company_s)\ntrain['last_new_job'] = train['last_new_job'].apply(last_job)\ntrain['city'] = train['city'].apply(city)\n\ntrain","a882eb87":"train['gender'] = train['gender'].fillna((train['gender'].mean()))\ntrain['enrolled_university'] = train['enrolled_university'].fillna((train['enrolled_university'].mean()))\ntrain['major_discipline'] = train['major_discipline'].fillna((train['major_discipline'].mean()))\ntrain['company_size'] = train['company_size'].fillna((train['company_size'].mean()))\ntrain['company_type'] = train['company_type'].fillna((train['company_type'].mean()))\ntrain['company_type'] = train['company_type'].fillna((train['company_type'].mean()))\n\ntrain","7acea26d":"test['gender'] = test['gender'].apply(gender_to_numeric)\ntest['relevent_experience'] = test['relevent_experience'].apply(rel_experience)\ntest['enrolled_university'] = test['enrolled_university'].apply(enrollment)\ntest['education_level'] = test['education_level'].apply(edu_level)\ntest['major_discipline'] = test['major_discipline'].apply(major)\ntest['experience'] = test['experience'].apply(experience)\ntest['company_type'] = test['company_type'].apply(company_t)\ntest['company_size'] = test['company_size'].apply(company_s)\ntest['last_new_job'] = test['last_new_job'].apply(last_job)\ntest['city'] = test['city'].apply(city)","fb9d52a4":"test['gender'] = test['gender'].fillna((test['gender'].mean()))\ntest['enrolled_university'] = test['enrolled_university'].fillna((test['enrolled_university'].mean()))\ntest['major_discipline'] = test['major_discipline'].fillna((test['major_discipline'].mean()))\ntest['company_size'] = test['company_size'].fillna((test['company_size'].mean()))\ntest['company_type'] = test['company_type'].fillna((test['company_type'].mean()))\ntest['company_type'] = test['company_type'].fillna((test['company_type'].mean()))\n\ntest","5db204bb":"\n\nfeatures =[\"enrollee_id\",\"city\",\"city_development_index\",\"gender\",\"relevent_experience\",\"enrolled_university\",\"education_level\",\"major_discipline\",\"experience\",\"company_size\",\"company_type\",\"last_new_job\",\"training_hours\"]\ntarget = 'target'","00561ce1":"train[features].head(10)","5945cea5":"#Display first 10 target variables\ntrain[target].head(100).values","6a10d9ea":"from xgboost import XGBRegressor\nfrom xgboost import plot_importance\nimport shap","9a0a810f":"from sklearn.model_selection import train_test_split\nX = train.drop(['target'],axis=1)\nY = train['target']\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=9)","30f01b99":"print(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\nprint(Y_test.shape)","a1992ecc":"model = XGBRegressor(max_depth=8,n_estimators=1000, min_child_weight=300,subsample=0.8,seed=42)\n\nmodel.fit(X_train,Y_train,eval_metric=\"rmse\",eval_set=[(X_train, Y_train), (X_test, Y_test)],verbose=True)","13bda657":"# We predict target values (Split 15% from training data)\nY_predict = model.predict(X_test)\nY_predict","e8fe7dc9":"#Test (Split 15% from training data)\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(Y_test, Y_predict)\nmetrics.auc(fpr, tpr)\n","98505070":"predictions = model.predict(test[features])\n\npredictions","35368877":"from sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(train[target],  model.predict(train[features]))\nmetrics.auc(fpr, tpr)","52c4054d":"import xgboost\nimport matplotlib.pylab as plt\nxgboost.plot_importance(model)\nplt.title(\"model.plot_importance(model)\")\nplt.show()","b7837e8c":"shap_values  = shap.TreeExplainer(model).shap_values(X_train)\nshap.summary_plot(shap_values, X_train, plot_type=\"bar\")","4f115c42":"shap_values  = shap.TreeExplainer(model).shap_values(X_train)\nshap.summary_plot(shap_values, X_train)","bce3541a":"#Create a  DataFrame\nsubmission = pd.DataFrame({'enrollee_id':test['enrollee_id'],'target':predictions})\n                        \n\n#Visualize the first 10 rows\nsubmission.head(10)","167d7067":"##% Submit Predictions \nsubmission.to_csv('submission.csv',index=False)","60cd67b5":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n","8a9a5313":"### Train : Replace nan values with average of columns","b6145d12":"## Make predictions using the features from the test data set\n","231b9dbc":"### Test : Replace nan values with average of columns","d5d9519d":"## Distplot : Distribution plot\nDepicts the variation in the data distribution for city development index","dc8b3eff":"### Loading Test and Train data with some Analysis","5bb3ec6e":"## Select feature column names and target variable we are going to use for training","a9891449":"## This is input which our classifier will use as an input.","1701f4a8":"## XGBoost:eXtreme Gradient Boosting.\nIs a decision-tree-based ensemble Machine Learning algorithm that uses a gradient boosting framework. In prediction problems involving unstructured data (images, text, etc.) ... A wide range of applications: Can be used to solve regression, classification, ranking, and user-defined prediction problems.","e5893914":"## Preparation of data for Modelling","f4239114":"### Importing libraries and loading data","e1a837f6":"## city_development_index\nContinous Variable","a5fd7be7":"## Some Visualization to get more Insights ","082fb64c":"## Please Upvote if you like my work.!"}}