{"cell_type":{"995c89eb":"code","ff5cdf42":"code","91522f87":"code","81bccd5b":"code","d170561f":"code","ab1840ca":"code","e755ac36":"code","fd693fea":"code","4c8c934a":"code","646cc181":"code","4e3b4ee7":"code","691303db":"code","2d1cef4e":"code","19cb72ad":"code","df75b739":"code","d416f528":"code","22317df5":"code","080f0b20":"code","e7c87c05":"code","f9ae68ee":"code","de5de3c0":"code","032eb339":"code","21c141ef":"code","b1963b40":"code","5feacaa4":"code","4f70756b":"code","87428d63":"code","a5139c1b":"code","cf1a630c":"code","e14dae28":"code","bf02e9a1":"code","02cfab78":"code","c2a62df5":"code","dd7a6a5e":"markdown","6e0a457b":"markdown","4ffb7ecd":"markdown","cb77e0c4":"markdown","7c53be52":"markdown","1c861565":"markdown","e50d71b3":"markdown"},"source":{"995c89eb":"#Import necessary libraries, read csv files and store to a dataframe (df):\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Load GDP data for each region\ndf = pd.read_csv('..\/input\/country-regional-and-world-gdp\/gdp_csv.csv')\n\n#Load list of countries:\ndf2 = pd.read_csv('..\/input\/countries\/countries of the world.csv')\n","ff5cdf42":"#Look at the columns and values present for the GDP dataframe\ndf.head()","91522f87":"#Look at the columns and values present for the countries dataframe\ndf2.tail()","81bccd5b":"df['Country Name'].unique()","d170561f":"countries = list(df2['Country'].unique())\ncountries","ab1840ca":"#Using list comprehension to remove blank space:\ncountries = [country.replace(' ','') for country in countries]\ncountries","e755ac36":"#Compare list of countries from df2 to country column of df. Where countries in both databases are assigned a value of true.\nnew = df['Country Name'].isin(countries)\n#Create new dataframe which reflects data only from countries:\ndf_new = df[new]\n#Reset index to start from 0\ndf_new.reset_index(drop = True, inplace = True)\n#Normalise the GDP value:\ndf_new['Value'] = (df_new['Value'])\/max(df_new['Value'])\ndf_new.head()","fd693fea":"#Start by finding out which countries are included:\ncountries_df = pd.DataFrame(countries)\n\nincluded = countries_df.isin(df['Country Name'].values.tolist())\n\ncountries_included = countries_df[included]\ncountries_included.head()","4c8c934a":"#As seen from above, rows with not a number values, are the rows of countries excluded from the original dataset.\nrows_with_nan = []\nfor index, row in countries_included.iterrows():\n    is_nan_series = row.isnull()\n    if is_nan_series.any():\n        rows_with_nan.append(index)\n#rows_with_nan represents the index of missing countries from the countries_df\nprint(rows_with_nan)","646cc181":"#Create dataframe with the missing countries\ncountries_excluded = countries_df.iloc[rows_with_nan]\n#Convert ot list to easily drop from df_new\ncountries_excluded.values.tolist()","4e3b4ee7":"df_new.drop(countries_excluded, axis = 0, inplace = True)\ndf_new","691303db":"df_new.drop(['Country Code'], axis = 1, inplace = True)\ndf_new.head()","2d1cef4e":"import matplotlib.pyplot as plt\n\nafghanistan = df_new[df_new['Country Name'] == 'Afghanistan']\n\nplt.plot(afghanistan['Year'], afghanistan['Value'])\nplt.xlabel('Year')\nplt.ylabel('GDP')\nplt.show()","19cb72ad":"len(df_new['Country Name'].unique())","df75b739":"a = 37  # number of rows\nb = 4  # number of columns\nc = 1  # initialize plot counter\n\nfig = plt.figure(figsize=(32,280))\nfig.tight_layout()\n\nfor country in df_new['Country Name'].unique():\n    plt.subplot(a, b, c)\n    plt.title('{}'.format(country))\n    plt.xlabel('Year')\n    plt.ylabel('GDP')\n    plt.plot(df_new[df_new['Country Name'] == '{}'.format(country)]['Year'], df_new[df_new['Country Name'] == '{}'.format(country)]['Value'])\n    c = c + 1","d416f528":"c","22317df5":"earliest_year_on_record = []\n\nfor country in df_new['Country Name'].unique():\n    earliest_year_on_record.append(min(df_new['Year'].loc[df_new['Country Name'] == country]))","080f0b20":"latest_year_on_record = []\n\nfor country in df_new['Country Name'].unique():\n    latest_year_on_record.append(max(df_new['Year'].loc[df_new['Country Name'] == country]))","e7c87c05":"df_c = pd.DataFrame(columns = ['Country', 'earliest_year_on_record', 'latest_year_on_record'])\ndf_c['Country'] = df_new['Country Name'].unique()\ndf_c['earliest_year_on_record'] = earliest_year_on_record\ndf_c['latest_year_on_record'] = latest_year_on_record","f9ae68ee":"df_2011 = df_new[df_new['Year'] == 2011]\ndf_2016 = df_new[df_new['Year'] == 2016]\n\ndf_2011.reset_index().drop('index', axis = 1)\ndf_2016.reset_index().drop('index', axis = 1)","de5de3c0":"#Find countries without value for 2011:\nverdict = []\nfor name in df_2016['Country Name'].unique():\n    verdict = name in df_2011['Country Name'].unique()\n    if verdict == False:\n        print('no 2011 val: ', name)\n#Find countries without value for 2016:        \nfor names in df_2011['Country Name'].unique():\n    verdicts = names in df_2016['Country Name'].unique()\n    if verdicts == False:\n        print('no 2016 val: ', names)","032eb339":"final_countries = df_2016['Country Name'].values.tolist()\nfinal_countries.remove('Somalia')\nlen(final_countries)","21c141ef":"GDP_change = []\n\nfor country in final_countries:\n    x = df_2016['Value'][df_2016['Country Name'] == country]\n    y = df_2011['Value'][df_2011['Country Name'] == country]\n    x = float(x)\n    y = float(y)\n    z = x*100\/y*2\n    GDP_change.append(z)\n    print('Country ', country, ', GDP Change ',z,'%')\n    \n\n","b1963b40":"final_df = pd.DataFrame(columns = ['Country', 'GDP Change (%)'])\nfinal_df['Country'] = final_countries\nfinal_df['GDP Change (%)'] = GDP_change\n\nfinal_df.sort_values(by = ['GDP Change (%)'], ascending = False)","5feacaa4":"import folium\n\n# Import folium MarkerCluster plugin\nfrom folium.plugins import MarkerCluster\n# Import folium MousePosition plugin\nfrom folium.plugins import MousePosition\n# Import folium DivIcon plugin\nfrom folium.features import DivIcon\n\ncountry_geo = pd.read_json('..\/input\/world-countries\/world-countries.json')","4f70756b":"# Start location is Ethiopia\nethiopia_coordinates = [8, 38]\nsite_map = folium.Map(location=ethiopia_coordinates, zoom_start=4)","87428d63":"final_df['Country'].unique()","a5139c1b":"len(final_df['Country'].unique())","cf1a630c":"coordinates = [[33.9, 67.7],[41.2, 20.2],[28.0, 1.7],[42.5,1.5],[-11.2,17.9],[-35.0,-65.0],[40.8,44.7],[-24.8,134.8],[47.2,13.2],[40.4,47.8],[26.2,50.5],[24.5,90.3],[13.2,-59.5],[53.4,27.7],[50.6,4.7],[16.8,-88.7],[9.5,2.3],[27.5,90.5],[-17.1,-65.0],[-23.2,24.6],[-10.3,-53.2],[42.6, 25.5],[-3.4,30.0],[13.5,104.9],[4.6,13.2],[61.1,-108.0],[15.6,19.0],[-31.8, -71.3],[35.0,105.0],[2.9,-73.8],[-12.2,44.3],[45.6,17.0],[35.0,33.1],[55.7,10.3],[15.4,-61.4],[-1.4,-79.4],[58.8,25.3],[10.2,38.7],[-18.1,179.0],[63.2,25.9],[46.6,1.9],[-0.9,11.7],[41.7,44.0],[51.1,10.4],[8.0,-1.1],[39.0,22.0],[12.1,-61.7],[13.5,144.8],[15.6,-89.9],[10.7,-10.7],[12.1,-14.9],[4.8,-58.6],[19.1,-72.4],[15.3,-86.1],[47.2,19.5],[65.0, -18.1],[22.4,78.7],[-2.4,117.9],[33.1,44.2],[52.9, -8.0],[31.5,34.9],[42.6,12.7],[18.2,-77.4],[36.6,139.2],[31.2,36.9],[47.2,65.2],[1.4,38.4],[-1.2,175.3],[29.3,47.5],[58.8,24.8],[33.9,35.8],[-29.6,28.3],[5.7, -9.4],[55.4,23.7],[49.8,6.1],[-18.9,46.4],[-13.3,33.9],[4.6,102.3],[4.7,73.3],[16.4,-2.3],[35.9,14.4],[20.3,-9.2],[-20.3,57.6],[22.5,-100.0],[47.3,28.6],[46.8,103.8],[31.2,-7.3],[-19.3, 34.9],[-23.2,17.3],[-0.5,166.9],[28.1,84.1],[52.5,5.7],[12.6,-85.3],[17.7,9.3],[9.6, 8.0],[60.5, 9.1],[21.0,57.0],[30.3,71.2],[5.4,132.9],[8.6,-81.1],[-23.3,-58.2],[-6.9,-75.0],[12.8,122.7],[52.2,19.1],[40.0,-7.9],[25.3,51.2],[46.0,24.7],[-2.0, 30.1],[-13.8, -172.1],[14.5,-14.5],[44.2,20.6],[-4.7,55.5],[1.35, 103.8],[45.8,14.5],[39.3,-4.8],[14.6,29.5],[4.1,-56.1],[-26.6,31.4],[59.7,14.5],[46.8,8.2],[38.6,70.8],[-6.5,35.8],[14.9,100.8],[8.8,1.0],[-19.9,-175.2],[33.8,9.4],[39.0,34.9],[39.4,59.4],[-8.6,179.2],[1.5,32.2],[49.5,31.3],[-32.9,-56.0],[41.3,64.0],[-16.5,168.1],[13.3,108.4],[-14.5, 27.6],[-18.5,29.7]]\nfinal_countries = ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',\n       'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan',\n       'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium',\n       'Belize', 'Benin', 'Bhutan', 'Bolivia', 'Botswana', 'Brazil',\n       'Bulgaria', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Chad',\n       'Chile', 'China', 'Colombia', 'Comoros', 'Croatia', 'Cyprus',\n       'Denmark', 'Dominica', 'Ecuador', 'Estonia', 'Ethiopia', 'Fiji', 'Finland', 'France', 'Gabon', 'Georgia', 'Germany', 'Ghana',\n       'Greece', 'Grenada', 'Guam', 'Guatemala', 'Guinea',\n       'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iraq', 'Ireland', 'Israel',\n       'Italy', 'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya',\n       'Kiribati', 'Kuwait', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia','Lithuania', 'Luxembourg', 'Madagascar', 'Malawi', 'Malaysia',\n       'Maldives', 'Mali', 'Malta', 'Mauritania', 'Mauritius', 'Mexico',\n       'Moldova', 'Mongolia', 'Morocco', 'Mozambique', 'Namibia', 'Nauru','Nepal', 'Netherlands', 'Nicaragua', 'Niger', 'Nigeria', 'Norway',\n       'Oman', 'Pakistan', 'Palau', 'Panama', 'Paraguay', 'Peru',\n       'Philippines', 'Poland', 'Portugal', 'Qatar', 'Romania', 'Rwanda',\n       'Samoa', 'Senegal', 'Serbia', 'Seychelles', 'Singapore',\n       'Slovenia', 'Spain', 'Sudan', 'Suriname', 'Swaziland', 'Sweden',\n       'Switzerland', 'Tajikistan', 'Tanzania', 'Thailand', 'Togo',\n       'Tonga', 'Tunisia', 'Turkey', 'Turkmenistan', 'Tuvalu', 'Uganda',\n       'Ukraine', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Vietnam', 'Zambia',\n       'Zimbabwe'  ]","e14dae28":"test_df = pd.DataFrame(columns = ['Country', 'GDP Change', 'Coordinates'])\ntest_df['Country'] = final_countries\ntest_df['GDP Change'] = GDP_change\ntest_df['Coordinates'] = coordinates\ntest_df","bf02e9a1":"for i in range(1):\n    print(coordinates[i])","02cfab78":"#Country where GDP change was the highest between 2011 and 2016:\ntop_country = test_df['Country'][test_df['GDP Change'] == max(test_df['GDP Change'])].unique()\nprint('Country with the greatest GDP increase between 2011 and 2016 was ', top_country,' where the GDP change was {:.0f}'.format(max(test_df['GDP Change'])),'%')","c2a62df5":"for i, country in enumerate(test_df['Country']):\n    \n    gdp = float(test_df['GDP Change'][test_df['Country'] == country])\n    coordinate = coordinates[i]\n    \n    \n    circle = folium.Circle(coordinate, radius=2000, color='#000000', fill=True).add_child(folium.Popup('{}'.format(country)))\n    marker = folium.map.Marker(\n        coordinate,\n# Create an icon as a text label\n        icon=DivIcon(\n            icon_size=(20,20),\n            icon_anchor=(0,0),\n            html='<div style=\"font-size: 40; color:#000000;\"><b>%s<\/b><\/div>' % '{} {:.0f}%'.format(country,gdp)\n            )\n        )\n    site_map.add_child(circle)\n    site_map.add_child(marker)\n\nsite_map","dd7a6a5e":"For GDP analysis need consistent number of years between all data entries.","6e0a457b":"Create a dataframe to display the range of year data available for each country","4ffb7ecd":"Country code does not add any value to analysis, therefore the column can be dropped","cb77e0c4":"The above shows that there is a space at the end of every string, now we need to remove the space and then use the pandas isin method to compare the values for countries in the two datasbases.","7c53be52":"It looks like regions are included in the df dataset. Lets use another dataset to ensure we only complete analysis on countries, not regions. This is done by comparing the respective columns in both datasets.","1c861565":"However, unfortunately, not all countries in countries dataset is in the original GDP data set. Therfore, it is necessary to drop rows where countries are not present in the original data set.","e50d71b3":"Years of analysis between 2011 and 2016, list countries outside that range:"}}