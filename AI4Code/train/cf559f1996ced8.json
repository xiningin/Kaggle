{"cell_type":{"004f8214":"code","8871266a":"code","5374160f":"code","9dfc1c9f":"code","4361a1c9":"code","3043accd":"code","d599fcda":"code","aa7baa9c":"code","eacf38de":"code","3d38653e":"code","a37c44dc":"code","7913ea59":"code","62852b8b":"code","452e6812":"code","550557c3":"code","d303114e":"code","2ba1bf92":"code","c861ea99":"code","4d9b2f2c":"code","d7ce7d38":"code","c90c5c45":"code","545b6a28":"code","adcc7b09":"code","0a3dc059":"code","dd28bb28":"code","c6e90166":"code","73597043":"code","4dd5d172":"code","dd0943e4":"code","b92553e5":"code","fab4e4aa":"code","78d63f7a":"code","290b8f48":"code","1d794492":"code","b9fb8f10":"code","859c0c8f":"markdown"},"source":{"004f8214":"import numpy as np\nimport pandas as pd\nimport os","8871266a":"matches = pd.read_csv('\/kaggle\/input\/t20matches\/t20_matches.csv')\nseries = pd.read_csv('\/kaggle\/input\/t20matches\/t20_series.csv')\nmatches.shape,series.shape","5374160f":"matches.head(5)","9dfc1c9f":"matches.home.nunique()","4361a1c9":"matches.away.nunique()","3043accd":"import matplotlib.pyplot as plt \nimport seaborn as sns\n\nnames = ' '\nfor name in matches.home:\n    name = str(name)\n    names = names + name + ' '\nfrom wordcloud import WordCloud, STOPWORDS \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black',  \n                min_font_size = 10).generate(names) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","d599fcda":"names = ' '\nfor name in matches.away:\n    name = str(name)\n    names = names + name + ' '\nfrom wordcloud import WordCloud, STOPWORDS \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black',  \n                min_font_size = 10).generate(names) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","aa7baa9c":"values = matches.away.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","eacf38de":"values = matches.home.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","3d38653e":"matches.columns","a37c44dc":"values = matches.winner.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","7913ea59":"matches['innings1_runs'].max(),matches['innings1_runs'].min()","62852b8b":"#Match with maximum score of 263 runs\nmatches.loc[matches['innings1_runs'].idxmax()]","452e6812":"#Match with minimum score of 1 run\nmatches.loc[matches['innings1_runs'].idxmin()]","550557c3":"plt.figure(figsize=(15,8))\nplt.xticks(rotation=90)\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=matches['innings1_wickets'], data=matches)","d303114e":"plt.figure(figsize=(15,8))\nplt.xticks(rotation=90)\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=matches['innings2_wickets'], data=matches)","2ba1bf92":"plt.plot(matches['innings1_overs_batted'],matches['innings1_runs'])","c861ea99":"plt.plot(matches['innings2_overs_batted'],matches['innings2_runs'])","4d9b2f2c":"names = ' '\nfor name in matches.venue:\n    name = str(name)\n    names = names + name + ' '\nfrom wordcloud import WordCloud, STOPWORDS \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black',  \n                min_font_size = 10).generate(names) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() ","d7ce7d38":"#Top 10 Grounds\nvalues = matches.venue.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","c90c5c45":"#Match with max no of runs margin for victory\nmatches.loc[matches['win_by_runs'].idxmax()]","545b6a28":"#Match with min no of runs margin for victory\nmatches.loc[matches['win_by_runs'].idxmin()]","adcc7b09":"series.head()","0a3dc059":"plt.figure(figsize=(15,8))\nplt.xticks(rotation=90)\nsns.set()\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=series['season'], data=series)","dd28bb28":"#Top 10 Series Winners\nvalues = series.winner.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","c6e90166":"series['series'] = series.series.str.split('(',expand=True)","73597043":"#Top 10 Series \nvalues = series.series.value_counts().sort_values(ascending=False).head(10)\nlabels = values.index\nplt.figure(figsize=(15,8))\nsns.barplot(x=values, y=labels)","4dd5d172":"x = series.margin.str.split('(',expand=True)[1]\nx = x.str.split(')',expand=True)[0]","dd0943e4":"series['Margin'] = x","b92553e5":"series.drop(['margin'],axis=1,inplace=True)","fab4e4aa":"series.head()","78d63f7a":"#Series Win by max margin\nseries.info()","290b8f48":"series = series.astype({\"Margin\": float})","1d794492":"series.loc[series['Margin'].idxmax()]","b9fb8f10":"#All the series where winning Margin was more than or equal to 4 \nseries.loc[series['Margin']>=4]","859c0c8f":"**Model will be made for winner prediction in next update**"}}