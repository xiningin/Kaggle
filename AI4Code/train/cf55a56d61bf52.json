{"cell_type":{"351cddf8":"code","0782bd8e":"code","369c3c76":"code","9815c4ca":"code","4855db13":"code","ae7a5781":"code","bfece82f":"code","9cf98ad4":"code","a8592169":"code","bf3a9eee":"code","354ab1ca":"code","66d75121":"code","90cb63b5":"code","2968fafd":"code","bc931e6f":"code","67bdae6a":"code","95f644f5":"code","66dc6cf9":"code","833a23c5":"code","61c0b276":"code","2db7ce01":"code","8c8792df":"code","60e7884f":"code","2b542b1f":"markdown","d5d77387":"markdown","b7ef11f0":"markdown","1f5d84c7":"markdown","2dfcbf4b":"markdown","e11a3034":"markdown","6b16ab07":"markdown","cbcca513":"markdown","07ee66a9":"markdown","0f549a85":"markdown","9b50f3d2":"markdown","6bfa966d":"markdown","f43ecd43":"markdown"},"source":{"351cddf8":"# basic libraries used\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\npd.options.display.max_columns = None\n\n# code presenting customer functions\n\nfrom IPython.display import Markdown, display\ndef printmd(string):\n    display(Markdown(string))\n    \nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n","0782bd8e":"#reading Data \ndata = pd.read_csv(\"..\/input\/zomato.csv\")\n\nprintmd(\"### initial look into data\")\n\nprint(data.info())\n\ndata.head()","369c3c76":"#reorganizing items in menu items to list\n\ndata[\"menu_item\"]=data[\"menu_item\"].str.strip(\"'[]'\").str.split()\n\n# Split the rates to the seperate\ndata[\"rate\"]=data[\"rate\"].str.split(\"\/\")\n#data[\"rate\"] = data.rate.str[0]\n\n# Reorgnizing Rating field\n\ndata[\"rating\"]=pd.to_numeric(data.rate.str[0],errors='coerce') \ndata[\"rating_outof\"]=pd.to_numeric(data.rate.str[1],errors='coerce') \n\n#Deleting unwanted columns \ndata.drop([\"address\",\"url\",\"phone\"],axis=1,inplace=True)\n\n#reattanging cost field \ndata[\"costfortwo\"]=data[\"approx_cost(for two people)\"].str.replace(\",\",'').astype(float)","9815c4ca":"## Missing values analysis\n\n_missing_counts=pd.DataFrame(round(data.isna().sum() \/ data.shape[0] ,2))\n\n_missing_counts.columns =[\"Count\"]\n_missing_counts=_missing_counts.reset_index()\n\n_missing_counts.sort_values(by=\"Count\",ascending = False)","4855db13":"# from the rating understanded that if rating is like NEW can be considered as NEW or else existing restaurant\n\ndata[\"Category\"] = np.where((data.rating.isna()==True) & (data.rate.isna()==False),\"New\",\"Existing\")","ae7a5781":"data.groupby(\"name\")[\"name\"].count().sort_values(ascending =False)[:20]","bfece82f":"# identified some estaurants indicating resturent chains. and these type of resturents represnts mostly same kind of standards hence. \n\n# hence for analysis on rating and votes we will prepare another data set by deleting all resturents with keeping only one Restaurants of any specfic chain\n\ndata_unique_Restaurants=(data.drop_duplicates(subset=[\"name\"],keep=\"first\")).copy()\n\ndata_unique_Restaurants.shape","9cf98ad4":"# analysing Category of restaurants \n\ndef dis_pie(field,num):\n    #plt.subplot(num)\n    _temp = pd.DataFrame(data.groupby(field)[field].count())\n    #plt.title(field+\" Descriptions\")\n    #plt.pie(_temp,labels = _temp.index,autopct='%1.1f%%', shadow=True, startangle=90)\n    print(_temp)\n    \nplt.figure(figsize=(10,10))\ndis_pie(\"Category\",221)\ndis_pie(\"online_order\",222)\ndis_pie(\"book_table\",223)\nplt.show()\n\ndef dis_barChart(field):\n    plt.figure(figsize=(20,10))\n    _temp = pd.DataFrame(data.groupby(field)[field].count())\n    _temp.columns =[\"count\"]\n    _temp=_temp.reset_index()\n    _temp.columns =[field,\"count\"]  \n    _temp=_temp.sort_values(by=\"count\",ascending =False)\n    plt.title(field+\" Descriptions\")\n    g=sns.barplot(data =_temp,x=field,y=\"count\")\n    plt.xticks(rotation=90)\n    plt.show()\n    \n    \ndis_barChart(\"listed_in(city)\")\ndis_barChart(\"rest_type\")\ndis_barChart('listed_in(type)')\n\ndis_barChart('rating')\n#_temp = pd.DataFrame(data.groupby())\n\n","a8592169":"#Derived columns for cuisines\n\n#covert list variables as list\ndata_unique_Restaurants[\"cuisines_ls\"]=data_unique_Restaurants.cuisines.str.split(\",\")\n\n#find out distient elements of cuisines\n_temp=data_unique_Restaurants['cuisines_ls'].apply(pd.Series)\nfor i in _temp.columns:\n    _temp[i] = _temp[i].str.strip().str.lower()    \n    \ndata_unique_Restaurants[\"cuisines_ls1\"]=_temp.apply(lambda x:list(x),axis=1)\nlist_of_cuisines = _temp.stack().value_counts()","bf3a9eee":"for i in list_of_cuisines[:10].index:\n    data_unique_Restaurants[i] =data_unique_Restaurants.cuisines_ls1.astype(str).str.contains(i)\n","354ab1ca":"#display Rare cuisines surving restaruents\nrare_cuisines = list_of_cuisines[-40:-1]\nrare_cuisines","66d75121":"# identified restaurants serving where rare foods\n\ndata_unique_Restaurants[\"rare_cuisines\"] =data_unique_Restaurants.cuisines_ls1.astype(str).str.contains(\"hot dogs\")\n\nfor i in rare_cuisines.index:\n    data_unique_Restaurants[\"rare_cuisines\"] =(data_unique_Restaurants.cuisines_ls1.astype(str).str.contains(i)) | (data_unique_Restaurants[\"rare_cuisines\"])","90cb63b5":"# derived colum defining type of cuisines surved by the restaurant\ndata_unique_Restaurants[\"number_of_different_cuisines\"] = data_unique_Restaurants.cuisines_ls.str.len()","2968fafd":"# attemped to identify how many of Restaurants serving each popular type of cuisnies + rare_cuisines\n\n_temp=pd.DataFrame(data_unique_Restaurants[list_of_cuisines[:10].index.tolist() +[\"rare_cuisines\"]].stack())\n_temp=_temp.reset_index(level=1)\n_temp.columns=[\"name\",\"values\"]\n\n\n(_temp.groupby([\"name\",\"values\"])[\"values\"].count() \/ data_unique_Restaurants.shape[0]).unstack().plot(kind =\"bar\",stacked=True,figsize=(20,5),title=\"restaurants serving specific cuisine comparing with number of restaurants\")\nplt.show()","bc931e6f":"# multi cuisine Restaurants\n\n_temp =data_unique_Restaurants.groupby('number_of_different_cuisines')[\"number_of_different_cuisines\"].count() \/ data_unique_Restaurants.shape[0]\n\n_temp =pd.DataFrame(_temp)\n_temp.columns =[\"Per\"]\n_temp=_temp.reset_index()\n_temp.columns =[\"noof_multi_cuisine\",\"Per\"]\n\nplt.figure(figsize=(10,5))\nax=sns.barplot(x=\"noof_multi_cuisine\",y=\"Per\",data=_temp)\nplt.title(\"Multi Cuisine Resturents in Banglore\")\n\nfor index, row in _temp.iterrows():\n    ax.text(index ,row.Per+0.001,str(round(row.Per,4)*100)+\"%\", color='black', ha=\"center\")\n    \n    \nplt.show()","67bdae6a":"## Review number of votes \n\n#data.votes.describe()\ndata_unique_Restaurants[\"votes_range\"]=pd.cut(data_unique_Restaurants.votes,[0,2,5,7,10,15,20,50,100,200,1000,10000])\n\n_temp =data_unique_Restaurants.groupby(\"votes_range\")[\"name\"].count() \/ data_unique_Restaurants.shape[0]\n_temp=pd.DataFrame(_temp)\n_temp=_temp.reset_index()\n_temp.columns=[\"votes_range\",\"Per\"]\n\nplt.figure(figsize=(20,5))\nax=sns.barplot(x=\"votes_range\",y=\"Per\",data =_temp)\nplt.title(\"Resturent by votes\")\n\nfor index, row in _temp.iterrows():\n    ax.text(index ,row.Per+0.001,str(round(row.Per,4)*100)+\"%\", color='black', ha=\"center\")\n    \nplt.show()\n##data.head()","95f644f5":"#_temp=data.pivot_table(index=\"votes_range\",columns=[\"north indian\"],values=[\"north indian\"],aggfunc=\"count\")\n\n#_temp=_temp.reset_index(level =0)\n_temp=pd.concat([data_unique_Restaurants[list_of_cuisines[:10].index.tolist() +[\"rare_cuisines\"]].astype(int) , data_unique_Restaurants[\"votes_range\"]],axis=1)\n\n_temp=_temp.groupby(\"votes_range\").sum() \n#_temp=_temp.reset_index()\nplt.figure(figsize=(20,7))\nplt.subplot(1,2,1)\nplt.title(\"Votes by cusine type for all resturents (# Count)\")\nsns.heatmap(_temp,cmap=\"YlGnBu\",vmin=0.4)\n#plt.show()\n\n_temp=_temp.apply(lambda x: x\/sum(x),axis=0)\n\n#_temp=_temp.reset_index()\n#plt.figure(figsize=(10,7))\nplt.subplot(1,2,2)\nplt.title(\"% Votes by cusine type on the same segment of serving cuisine\")\nsns.heatmap(_temp,cmap=\"YlGnBu\",vmin=0.01,annot=True)\nplt.show()\n#data[list_of_cuisines[:10].index.tolist() +[\"rare_cuisines\"]].apply(lambda x: 1 if x else 0,axis=0)","66dc6cf9":"#_temp=data.pivot_table(index=\"votes_range\",columns=[\"north indian\"],values=[\"north indian\"],aggfunc=\"count\")\n\n#_temp=_temp.reset_index(level =0)\n_temp=pd.concat([data_unique_Restaurants[list_of_cuisines[:10].index.tolist() +[\"rare_cuisines\"]].astype(int) , data_unique_Restaurants[\"rating\"]],axis=1)\n\n_temp=_temp.groupby(\"rating\").sum() \n#_temp=_temp.reset_index()\nplt.figure(figsize=(20,7))\nplt.subplot(1,2,1)\nplt.title(\"Votes by cusine type for all resturents (# count)\")\nsns.heatmap(_temp,cmap=\"YlGnBu\",vmin=0.4)\n\n_temp=_temp.apply(lambda x: x\/sum(x),axis=0)\n\n#_temp=_temp.reset_index()\nplt.subplot(1,2,2)\nplt.title(\"Votes by cusine type on the same segment of serving cuisine (%)\")\nsns.heatmap(_temp,cmap=\"YlGnBu\",vmin=0.01)\nplt.show()\n#data[list_of_cuisines[:10].index.tolist() +[\"rare_cuisines\"]].apply(lambda x: 1 if x else 0,axis=0)","833a23c5":"_temp=data_unique_Restaurants.loc[ data_unique_Restaurants[\"costfortwo\"].isnull() ==False ,[\"votes_range\",\"costfortwo\",\"rating\"]]\n\n#_temp[\"costfortwo\"]=_temp[\"approx_cost(for two people)\"].str.replace(',', '').astype(float) \n\nplt.figure(figsize=(20,5))\nplt.title(\"Number of votes vs cost for two\")\nsns.boxplot(data =_temp,x=\"votes_range\",y=\"costfortwo\")\nplt.show()\n\nplt.figure(figsize=(20,5))\nplt.title(\"Rating vs cost for two\")\nsns.boxplot(data =_temp,x=\"rating\",y=\"costfortwo\")\nplt.show()\n\n#_temp[\"approx_cost(for two people)\"]=_temp[\"approx_cost(for two people)\"].str.replace(',', '').astype(float) \n\n#_temp[_temp[\"approx_cost(for two people)\"].isnull()]\n\n#data.iloc[1662]","61c0b276":"# online orders vs votes\ndata_unique_Restaurants.groupby([\"votes_range\",\"online_order\"])[\"name\"].count().unstack().plot(kind=\"bar\",stacked=True,figsize=(15,5),title=\"Option of Online Order vs Votes\")\nplt.show()\n\n#online order vs rating\ndata_unique_Restaurants.groupby([\"rating\",\"online_order\"])[\"name\"].count().unstack().plot(kind=\"bar\",stacked=True,figsize=(15,5),title=\"Option of Online Order vs rating\")\nplt.show()\n\n","2db7ce01":"# online orders vs votes\ndata_unique_Restaurants.groupby([\"votes_range\",\"book_table\"])[\"name\"].count().unstack().plot(kind=\"bar\",stacked=True,figsize=(15,5),title=\"Option of Online Order vs Votes\")\nplt.show()\n\n#online order vs rating\ndata_unique_Restaurants.groupby([\"rating\",\"book_table\"])[\"name\"].count().unstack().plot(kind=\"bar\",stacked=True,figsize=(15,5),title=\"Option of Online Order vs rating\")\nplt.show()\n","8c8792df":"_temp=data_unique_Restaurants.loc[ data_unique_Restaurants[\"approx_cost(for two people)\"].isnull() ==False ,[\"book_table\",\"approx_cost(for two people)\",\"online_order\"]]\n_temp[\"costfortwo\"]=_temp[\"approx_cost(for two people)\"].str.replace(',', '').astype(float) \n\n\nplt.figure(figsize=(20,5))\nplt.subplot(1,2,1)\nplt.title(\"Booking Table option vs cost for two\")\nsns.boxplot(data =_temp,x=\"book_table\",y=\"costfortwo\")\n\n\nplt.subplot(1,2,2)\nplt.title(\"Online Order option vs cost for two\")\nsns.boxplot(data =_temp,x=\"online_order\",y=\"costfortwo\")\nplt.show()","60e7884f":"\n# Top of Restaurants of choice can be tried\n\ndata_unique_Restaurants.loc[(data_unique_Restaurants.rating>4.5) &(data_unique_Restaurants.\n                                                                 costfortwo <=800),[\"name\",\"cuisines\",\"listed_in(city)\",\"listed_in(type)\",\"votes\",\"rating\",\n                                                                                    \"costfortwo\"]].sort_values(by=\"costfortwo\")\n\n\n\n\n","2b542b1f":"### Review remaks \n\n1. arround 24% of Restaurants serving  only one type of cuisine \n2. around 35% of Restaurants serving  two type of cuisine \n3. around 24% of Restaurants serving  three type of cuisine \n\n4. only about 3% of Restaurants serving more than 6 cuisine","d5d77387":"### Review Remaks \n\nwhen the number of votes are high, indicating that cost for food also relatively high.\n\nwhen the ratung higher than 4 indicating ,that price for 2 expected to be mean of 800+ and it keep increased with the increase of resrurent rating\n\n<font color=\"red\"> there are some Restaurants with the rating lesser than 2.5 and indicating price for the is closely about 1000 Rs. <\/font>\n    \n    ","b7ef11f0":"### Review Remaks \n\nBased on above graph Even Most of Restaurants serving \"North Indian Food\" more than 60 of total Restaurants will not have a choice of north indian dishes\nsimilarly chinese serving Restaurants closely about 25+% only and 75% Restaurants not serving chainees dishes","1f5d84c7":"#### Review Remaks \n\nnot found evidence of online order facility attracting higher number of rating or votes","2dfcbf4b":"### Review Remaks \n\nData Set is having 51,717 observations with 17 fields. in the intial look observed that all fields are string type except votes field. \n\nnoted for the EDA, we don't need these URL, Address, Phone so desided to remove these columns \n\nmenu items are in the form of string convert string to list","e11a3034":"### Review Remaks \n\na. Restaurants in banglore rating indicates perfect normalized graph. i.e major resturents are having rating between 3.6 and 4.1\n\nb. major number of Restaurants are in BTS (around 10%), HSR, kormangala 5th block JP nagar \n\nc. Restaurants classified majorly described as  quick bites type food","6b16ab07":"### Review Remaks \n\nif Restaurants offering table booking option indicating to be attract higher number of votes and higher number of ratings","cbcca513":"### Performing univariate analysis ","07ee66a9":"### Review Remaks \n\n1. maximum votes for the segment of 20 to 50 votes of about 14.13%\n2. around 12% of bangnore Restaurants got the votes in the range of 200-1000\n3. opnly 3% of Restaurants are got the votes above 1000","0f549a85":"### Review remaks \n\nbooking table option indicating to be Restaurants with the good standards. it represent highest customer expereince by means of attracting higher votes and rating. and if option offering online or not does't indicate any coorlation with the customer expereince","9b50f3d2":"### Remaks \n\n##### Graph-1 \n\nsince north indian \/  chinese cuisine serving Restaurants are high in bangalore, it is +ve correlated with the number Restaurants attracting more votes.\nfollowed by continental and cafes and italian \n\neventhough <b> south  indian Restaurants <\/b> are in high in numbers number of votes attracted above 200 is very less.\n\n\n##### Graph-2\n\nif Restaurants is serving continential \/  italian \/ rare cuisine  the are majorly attract higher votes above 200+ votes.  fro example on continential serving resturents closly 49% of resturents attract more than 200 votes.\n\nsouth indian serving Restaurants's otherhand seems having several classes of resturent i.e mostly spreaded accross 20 votes to 1000 votes\n\n","6bfa966d":"### Review Remaks \n\nSimilar to previous analysis on voting. rating's also appeared to be showing same indication.\n\n\n#### Graph1\nOverall major Restaurants offering north indian and chines Restaurants number of resturents getting higher rating i.e above 3 is more on this type serving resturents.\n\n#### Graph 2\n\nsimilar to the previous analysis, if resturents is serving rare cuisnines or continental  \/  cafe indicating probability of attract higher rating","f43ecd43":"### Introduction\n\nThe purpose of this document is to perform Exploratory Data Analysis on zomato restaurants located in banglore. \n\n<font color=\"blue\">Data Set<\/font> : Data set is collected from the kaggle data set.\n\n<font color=\"blue\">Busines Objective<\/font> : Understand the data and inspect the extract insights such as "}}