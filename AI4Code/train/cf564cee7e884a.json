{"cell_type":{"01400ef1":"code","d664e42d":"code","f9742827":"code","76263fdd":"code","96ea6f23":"code","cb72d2b4":"code","2574fc54":"code","1e2685b6":"code","0601e345":"code","c84a0d1d":"code","16a2aaaa":"code","8967fe16":"code","0d631848":"markdown"},"source":{"01400ef1":"#!pip install ipywidgets pyvis jsonpickle","d664e42d":"import pandas as pd\nfrom scipy.spatial.distance import cosine\nimport numpy as np\nfrom pyvis.network import Network\nimport networkx as nx\nimport ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual","f9742827":"data = pd.read_csv('..\/input\/_vs___.xlsx - Page1.csv', index_col=[0,1,2,3,4,5], skipinitialspace=True,na_values=0)","76263fdd":"data = data.fillna(0)","96ea6f23":"c = data.index.names\ndata = data.reset_index().fillna('').set_index(c)\ndata.index = [' '.join(col).strip() for col in data.index.values]","cb72d2b4":"@interact\ndef main(INIT_ROLE = data.columns):\n    init_vect = np.array(data[INIT_ROLE].fillna(0)).reshape(-1, 1)\n    simlist = []\n    for role in data.columns:\n        trg_vect = np.array((data[role].fillna(0))).reshape(-1, 1)\n        sim = cosine(trg_vect, init_vect)\n        simlist.append(sim)\n    res = pd.DataFrame(data={'\u0420\u043e\u043b\u0438': data.columns,'\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c':simlist}).sort_values('\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c')\n    \n    return res[1:11]","2574fc54":"@interact\ndef main2(INIT_ROLE = data.columns, TARGET_ROLE=data.columns):\n    df = data[[INIT_ROLE,TARGET_ROLE]].copy()\n    df['\u0420\u0430\u0437\u043d\u0438\u0446\u0430'] = data[TARGET_ROLE] - data[INIT_ROLE]\n    res = df.sort_values('\u0420\u0430\u0437\u043d\u0438\u0446\u0430', ascending=False)\n    return res","1e2685b6":"def roles_pairs(set_of_roles):\n    pairs = []\n    for i in range(len(set_of_roles)):\n        for j in range(i+1, len(set_of_roles)):\n            pairs.append((set_of_roles[i], set_of_roles[j]))\n    return pairs","0601e345":"def init_pairs(set_of_roles, INIT_ROLE):\n    pairs = []\n    for i in range(len([INIT_ROLE])):\n        for j in range(i+1, len(set_of_roles)):\n            pairs.append(([INIT_ROLE][i], set_of_roles[j]))\n    return pairs","c84a0d1d":"df_dict = {}\nfor INIT_ROLE in data.columns:\n    init_vect = np.array(data[INIT_ROLE].fillna(0)).reshape(-1, 1)\n    simlist = []\n    for role in data.columns:\n        trg_vect = np.array((data[role].fillna(0))).reshape(-1, 1)\n        sim = cosine(trg_vect, init_vect)\n        simlist.append(sim)\n    res = pd.DataFrame(data={'\u0420\u043e\u043b\u0438': data.columns,'\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c':simlist}).sort_values('\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c')\n    res['node_title'] = res['\u0420\u043e\u043b\u0438'] +': ' + res['\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c'].apply(np.around, args=({3})).astype(str).values\n    df_dict[INIT_ROLE] = res","16a2aaaa":"@interact\ndef graph(INIT_ROLE=data.columns):\n    got_net = Network(height=\"750px\", width=\"100%\", bgcolor=\"#222222\", font_color=\"white\", notebook=True)\n    got_net.hrepulsion()\n    #got_net.barnes_hut()\n    got_net.show_buttons(filter_=['physics'])\n    trg_df = df_dict[INIT_ROLE][:11]\n    pairs = init_pairs(trg_df['\u0420\u043e\u043b\u0438'].values, INIT_ROLE)\n    for e in pairs:\n        src = e[0]\n        dst = e[1]\n        #init_vect = np.array(data[src].fillna(0)).reshape(-1, 1)\n        #trg_vect = np.array((data[dst].fillna(0))).reshape(-1, 1)\n        w = trg_df[trg_df['\u0420\u043e\u043b\u0438'] == dst]['\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c'].values[0]\n        got_net.add_node(src, src, title=src)\n        got_net.add_node(dst, dst, title=dst)\n        got_net.add_edge(src, dst, width=w*w*100, title='')\n\n    neighbor_map = got_net.get_adj_list()\n    \n    for node in got_net.nodes:\n        node[\"title\"] += \" \u041f\u043e\u0445\u043e\u0436\u0438\u0435 \u0440\u043e\u043b\u0438:<br>\" + \"<br>\".join(trg_df['node_title'][1:11].values)\n        node[\"value\"] = len(neighbor_map[node[\"id\"]])\n        \n    for edge in got_net.edges:\n        df = data[[edge['from'],edge['to']]].copy()\n        df['\u0420\u0430\u0437\u043d\u0438\u0446\u0430'] = data[edge['to']] - data[edge['from']]\n        res = df.sort_values('\u0420\u0430\u0437\u043d\u0438\u0446\u0430', ascending=False)\n        res['edge_title'] = res.index +': ' + res['\u0420\u0430\u0437\u043d\u0438\u0446\u0430'].astype(str).values\n        edge[\"title\"] += \" \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b:<br>\" + \"<br>\".join(res['edge_title'][:10].values)\n        #edge[\"value\"] = len(neighbor_map[node[\"id\"]])\n        \n    return got_net.show(\"roles.html\")","8967fe16":"@interact\ndef graph():\n    got_net = Network(height=\"750px\", width=\"100%\", bgcolor=\"#222222\", font_color=\"white\", notebook=True)\n    got_net.hrepulsion()\n    #got_net.barnes_hut()\n    got_net.show_buttons(filter_=['physics'])\n    pairs = roles_pairs(data.columns)\n    for e in pairs:\n        src = e[0]\n        dst = e[1]\n        #init_vect = np.array(data[src].fillna(0)).reshape(-1, 1)\n        #trg_vect = np.array((data[dst].fillna(0))).reshape(-1, 1)\n        w = 1 - df_dict[src][df_dict[src]['\u0420\u043e\u043b\u0438'] == dst]['\u041f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c'].values[0]\n        got_net.add_node(src, src, title=src)\n        got_net.add_node(dst, dst, title=dst)\n        if w>0.8:\n            got_net.add_edge(src, dst, width=w*w, title='')\n\n    neighbor_map = got_net.get_adj_list()\n    \n    for node in got_net.nodes:\n        node[\"title\"] += \" \u041f\u043e\u0445\u043e\u0436\u0438\u0435 \u0440\u043e\u043b\u0438:<br>\" + \"<br>\".join(neighbor_map[node[\"id\"]])\n        node[\"value\"] = len(neighbor_map[node[\"id\"]])\n        \n    for edge in got_net.edges:\n        df = data[[edge['from'],edge['to']]].copy()\n        df['\u0420\u0430\u0437\u043d\u0438\u0446\u0430'] = data[edge['to']] - data[edge['from']]\n        res = df.sort_values('\u0420\u0430\u0437\u043d\u0438\u0446\u0430', ascending=False)\n        res['edge_title'] = res.index +': ' + res['\u0420\u0430\u0437\u043d\u0438\u0446\u0430'].astype(str).values\n        edge[\"title\"] += \" \u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b:<br>\" + \"<br>\".join(res['edge_title'].values)\n        #edge[\"value\"] = len(neighbor_map[node[\"id\"]])\n        \n    return got_net.show(\"roles.html\")","0d631848":"## \u041f\u0435\u0440\u0432\u044b\u0435 10 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0440\u043e\u043b\u0435\u0439 \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u044b \u043a\u043e\u043c\u043f\u0435\u0442\u0435\u043d\u0446\u0438\u0439"}}