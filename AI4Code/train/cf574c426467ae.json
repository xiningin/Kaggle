{"cell_type":{"b0c5135a":"code","018248cc":"code","e8c726a5":"code","b4937c16":"code","ef55c75e":"code","e09cb927":"code","458aa07a":"code","645b8b7d":"code","4470761d":"code","9329ce20":"markdown","a2d86e5f":"markdown"},"source":{"b0c5135a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#For categorical variable encoding and data splitting\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\n#for model selection\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","018248cc":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#load train and test data\nX_train = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\")\nX_test = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/test.csv\")\n\nX_train.head()","e8c726a5":"#check to see if there are any null values in training set\nX_train.isnull().sum()","b4937c16":"#check and see if there are any null values in test set\nX_test.isnull().sum()","ef55c75e":"#seperate the features and the target\ny = X_train['target']\nfeatures = X_train.drop(['target'], axis=1,inplace = True)\nfeatures.head()","e09cb927":"#Seperate Numerical and categorical fewtures\nX_num = X_train.select_dtypes(include = ['float64'])\nX_categorical = X_train.select_dtypes(include = ['object'])","458aa07a":"#check the correlation among numerical features\nX_num.corr()","645b8b7d":"# see number of  different values for categorical features\nfor cname in X_categorical:\n    print(X_train[cname].nunique())","4470761d":"#make copy of the data set\nX = features.copy()\nX_t = X_test.copy()\n\n#encode categorical features using Ordinal Encoding\nordinal_encode = OrdinalEncoder()\n","9329ce20":"Looks like the test and train data set are clean and donot require any intial dropping or cleaning.\n","a2d86e5f":"Most of the columns have less cordinality which is less than 10."}}