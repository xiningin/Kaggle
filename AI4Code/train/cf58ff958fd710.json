{"cell_type":{"2f8334b1":"code","c49462c4":"code","f76d6222":"code","5d82bce0":"code","e24eb53a":"code","952a1c4c":"code","e0b9d588":"code","e3d1d387":"code","0b3ca8e3":"code","42941eba":"code","043a62eb":"code","8b69cd3b":"code","a3c9c9e2":"code","a4d6a712":"code","99a09c45":"code","853aa485":"code","ec0dc758":"code","4bd57788":"code","e048d7b4":"code","02cb8ce1":"markdown","b3b60ff1":"markdown","69efdb22":"markdown","5c085454":"markdown","f60487f9":"markdown","af5eaebd":"markdown","e345c43c":"markdown","df49e30e":"markdown","c3c42d7d":"markdown","8cb55ce8":"markdown"},"source":{"2f8334b1":"import numpy as np\nimport pandas as pd\n\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pydicom\nfrom pydicom.data import get_testdata_files\n\n","c49462c4":"PATH = '\/kaggle\/input\/siim-isic-melanoma-classification'","f76d6222":"train_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\nprint(train_df.shape)\ntrain_df.head()","5d82bce0":"print(\"Number of Train Images: \", train_df.image_name.nunique())\nprint(\"Number of Train Patirnts: \", train_df.patient_id.nunique())","e24eb53a":"temp = train_df[['patient_id', 'image_name']].groupby('patient_id').count()\n\nplt.hist(temp.image_name, 30)\nplt.xlabel('Image Count per Patient')\nplt.ylabel('Number of Patients')\nplt.title(r'Per Patient Image Count Distribution')\nplt.show()","952a1c4c":"fig = plt.figure(figsize=(16,6))\naxes = fig.subplots(1, 3)\n\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n)\n\nsns.countplot(x='sex', data=train_df[['patient_id', 'sex']].drop_duplicates(), ax=axes[0])\naxes[0].set_title(\"Sex Ratio of Patients\")\nsns.countplot(x='benign_malignant', data=train_df, ax=axes[1])\naxes[1].set_title(\"Malignamt Images\")\nsns.countplot(x='diagnosis', data=train_df, ax=axes[2])\naxes[2].set_title(\"Different Disgnosis in Images\");","e0b9d588":"train_df.head()","e3d1d387":"fig = plt.figure(figsize=(16,6))\n# axes = fig.subplots(1, 3)\ntemp = train_df[['patient_id', 'target']].groupby('patient_id').sum()\nsns.countplot(x='target', data=temp)\nplt.show()\nprint(\"Values\")\ntemp.reset_index().groupby('target').count()","0b3ca8e3":"temp = train_df[['patient_id', 'target']].groupby('patient_id').sum()\ntemp.reset_index(inplace=True)\ntemp.target = temp.target.apply(lambda x: 1 if x != 0 else 0)\nprint(temp.shape)\ntemp = temp.merge(train_df[['patient_id', 'sex']].drop_duplicates(), on='patient_id', how='left')\n\nsns.countplot(x='target', hue='sex', data=temp)\nplt.title('Sex Based Malignamt Patients Distibution');","42941eba":"import random\nfrom PIL import Image\nimg_name = random.choice(train_df.image_name.tolist())","043a62eb":"img = Image.open(os.path.join(PATH, \"jpeg\/train\", img_name+'.jpg'))\nplt.imshow(np.array(img))","8b69cd3b":"image_data = pydicom.dcmread(os.path.join(PATH, \"train\", img_name+'.dcm'))\nimage_data","a3c9c9e2":"def read_dicom_image(img_name, train=True):\n    if train:\n        img_path = os.path.join(PATH, \"train\", img_name+'.dcm')\n    else:\n        img_path = os.path.join(PATH, \"test\", img_name+'.dcm')\n    image_data = pydicom.dcmread(img_path)\n\n    img_data = {\n            \"patient_name\": image_data.PatientName,\n            \"patient_id\": image_data.PatientID,\n            \"modality\": image_data.Modality,\n            \"sex\": image_data.PatientSex,\n            \"image_name\": image_data.StudyID,\n            \"rows\": int(image_data.Rows),\n            \"cols\": int(image_data.Columns),\n            \"body_part_examined\": image_data.BodyPartExamined,\n            \"age\": int(image_data.PatientAge.replace('Y', '')),\n            }\n\n    return image_data.pixel_array, img_data\n\ndef show_dicom_image(img):\n    plt.imshow(img, cmap=plt.cm.bone)\n    plt.show()\n    \ndef show_image(img_name, train=True):\n    if train:\n        img_path = os.path.join(PATH, \"jpeg\/train\", img_name+'.jpg')\n    else:\n        img_path = os.path.join(PATH, \"jpeg\/test\", img_name+'.jpg')\n\n    img = Image.open(img_path)\n    plt.imshow(np.array(img))\n    plt.show()","a4d6a712":"img, img_data =read_dicom_image('ISIC_0149568')\nshow_dicom_image(img)\nimg_data","99a09c45":"temp = train_df[['patient_id', 'image_name']].groupby('patient_id').count()\ntemp = temp.merge(train_df[['patient_id', 'target']].drop_duplicates(), on='patient_id', how='left')\ntemp[(temp.target == 1) & (temp.image_name == 6)].head(2)","853aa485":"fig = plt.figure(figsize=(16,6))\naxes = fig.subplots(2, 3)\n\nfor i, row in train_df[train_df.patient_id == 'IP_0274810'].reset_index().iterrows():\n    img_path = os.path.join(PATH, \"jpeg\/train\", row.image_name+'.jpg')\n    axes[i\/\/3][i%3].imshow(np.array(Image.open(img_path)))\n    axes[i\/\/3][i%3].set_title(row.benign_malignant)\nplt.show()\n","ec0dc758":"fig = plt.figure(figsize=(16,6))\naxes = fig.subplots(2, 3)\n\nfor i, row in train_df[train_df.patient_id == 'IP_0274810'].reset_index().iterrows():\n    img_path = os.path.join(PATH, \"jpeg\/train\", row.image_name+'.jpg')\n    img, _ = read_dicom_image(row.image_name)\n    axes[i\/\/3][i%3].imshow(img, cmap=plt.cm.bone)\n    axes[i\/\/3][i%3].set_title(row.benign_malignant)\nplt.show()","4bd57788":"test_df = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\nprint(test_df.shape)\ntest_df.head()","e048d7b4":"print(\"Number of Train Images: \", test_df.image_name.nunique())\nprint(\"Number of Train Patirnts: \", test_df.patient_id.nunique())","02cb8ce1":"#### Dicom Images","b3b60ff1":"#### JPG Images","69efdb22":"#### Patient Image Count Distribution ","5c085454":"## Working with Dicom Image\n#### DICOM (Digital Imaging and Communications in Medicine) is the international standard to transmit, store, retrieve, print, process, and display medical imaging information.\n\nModality: https:\/\/wiki.cancerimagingarchive.net\/display\/Public\/DICOM+Modality+Abbreviations\n\nMore Info: https:\/\/dicom.innolitics.com\/ciods\/ct-image\/image-pixel\/00280004","f60487f9":"### One Paitient Sample Visualization","af5eaebd":" ## Upvote if you find it useful ","e345c43c":"### Number of Malignamt Images Per User","df49e30e":"\n### Utility Functions","c3c42d7d":"### Reading JPG Image","8cb55ce8":"### Test Data"}}