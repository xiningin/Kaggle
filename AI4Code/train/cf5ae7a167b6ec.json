{"cell_type":{"74593a22":"code","95a0cf58":"code","fea87681":"code","d2363b55":"code","23e92724":"code","63c1e299":"code","b2865e3e":"code","da7a6d94":"code","dd946b67":"code","e1b917cd":"markdown","8ba5bccc":"markdown","4bd8cd25":"markdown","7e911666":"markdown","07ee0d0e":"markdown","e2942cd7":"markdown","d9f3e463":"markdown","252a15d4":"markdown","923859e7":"markdown"},"source":{"74593a22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95a0cf58":"cars_df = pd.read_csv('\/kaggle\/input\/belarus-used-cars-prices\/cars.csv')\ncars_df.isna().any()","fea87681":"cars_df['make_count'] = cars_df.groupby('make')['make'].transform('count')\ncars_df[cars_df['make_count'] == 3]","d2363b55":"def mark_for_deletion(series):\n    return len(set(series)) == 1\n    \n#conteos = cars_df.groupby('make')['year'].value_counts()\n#conteos\ncars_df['deletion'] = cars_df.groupby('make')['year'].transform(mark_for_deletion)\ndeletion_rows = cars_df[cars_df['deletion']]\nprint(f'Deleting {len(deletion_rows)} records with only one registering production year')\ncars_df.drop(deletion_rows.index, inplace = True)","23e92724":"import matplotlib.pyplot as plt\n\n\ndef plot_makes(df, xlabel = 'Year', ylabel = 'Price (USD)', title = 'Price per Year for different car makes'):\n    _, ax = plt.subplots(figsize = (30,28))\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)    \n    ax.set_title(title)\n    for make, make_df in cars_df.groupby('make'):        \n        ax.scatter(make_df['year'], make_df['priceUSD'], label = make)\n    ax.legend()\n\n\nplot_makes(cars_df)","63c1e299":"next_year = cars_df['year'].max() + 1\nprint(f'Year of prediction: {next_year}')","b2865e3e":"import statsmodels.api as sm\nfrom statsmodels.graphics.regressionplots import abline_plot\n\n\ndef plot_regression_prediction(x, y, x_pred, y_pred, regression, xlabel = '', ylabel = '', title = ''):\n    fig, ax = plt.subplots(figsize = (30,21))\n    ax.scatter(x, y, label = 'real')\n    ax.scatter(x_pred, y_pred, label = f'{make} prediction')\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    abline_plot(model_results = regression, ax = ax)\n    \n\ndef obtain_make_regression_model(make):\n    \"\"\"\n    Returns the fit OLS linear regression instance for a make\n    \"\"\"\n    make_df = cars_df[cars_df['make'] == make]\n    \n    y = make_df['priceUSD']\n    x = make_df['year']\n\n    x_pred = pd.DataFrame([next_year, next_year + 1])\n    return sm.OLS(y, sm.add_constant(x)).fit()\n\n\ndef get_regressions_dataframe(df, x_pred):\n    reg_df = pd.DataFrame(columns = ['make','prediction'])\n    reg_df['make'] = cars_df['make'].unique()\n    reg_df.set_index('make', inplace = True)\n\n    for make in reg_df.index:\n        linear_regression = obtain_make_regression_model(make)\n        reg_df.loc[make, 'prediction'] = linear_regression.predict(sm.add_constant(x_pred))[0]\n\n    return reg_df\n\n\nreg_df = get_regressions_dataframe(cars_df, [next_year, next_year + 1])\n\nmax_price_car = reg_df[reg_df['prediction'] == reg_df['prediction'].max()]\n\nprint(f'The car make with the highest expected price for {next_year} is {max_price_car.index[0]}, with a price of {max_price_car[\"prediction\"].values[0]:.2f} USD')","da7a6d94":"max_price_car_df = cars_df[cars_df['make'] == max_price_car.index[0]]\nmax_price_car_df","dd946b67":"def plot_regression_prediction(x, y, x_pred, y_pred, regression, make = ''):\n    fig, ax = plt.subplots(figsize = (10,7))\n    ax.scatter(x, y, label = f'{make} real')\n    ax.scatter(x_pred, y_pred, label = f'{make} prediction')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Price (USD)')\n    ax.set_title(f'Price per Year regression for cars of the {make} make')\n    ax.legend()\n    abline_plot(model_results = regression, ax = ax)\n\nreg = obtain_make_regression_model(max_price_car.index[0])\n    \nplot_regression_prediction(max_price_car_df['year'], max_price_car_df['priceUSD'], next_year, max_price_car['prediction'], reg, make = max_price_car.index[0])","e1b917cd":"## Data analysis","8ba5bccc":"Visualizing the different makes and their prices per year of production","4bd8cd25":"As there are no null values in columns of interest dropping rows with empty values is not necessary","7e911666":"# Used Car Prices Analysis\n\nThis notebook intends to explore the price of cars produced in different years and will try to calculate what brand is the most likely to have the most expensive car, produced in the year next to the last registered year in the dataset\n\n![](https:\/\/images.pexels.com\/photos\/170811\/pexels-photo-170811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940)","07ee0d0e":"As there are records that only have one only year, linear regression won't be possible; these records will be deleted","e2942cd7":"Analyzing which car make yields the highest expected price for the next year","d9f3e463":"## Data transformation","252a15d4":"## File exploration","923859e7":"## Data extraction"}}