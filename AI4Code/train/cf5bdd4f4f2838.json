{"cell_type":{"1e776e10":"code","21b48e7f":"code","ab4abb97":"code","dfeb901b":"code","53c8e806":"code","d1c8743d":"code","131dfb87":"code","0d2cce45":"code","afa8db09":"code","85941339":"code","5ee87f66":"code","21b2d0ee":"code","3afefd51":"code","ddb87cc0":"markdown"},"source":{"1e776e10":"#Importing the Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sys \nimport scipy\nimport seaborn as sns\nimport sklearn\n","21b48e7f":"print('Python version',format(sys.version))\nprint('Numpy version',format(np.__version__))\nprint('pandas version',format(pd.__version__))\n#print('matplotlib version',format(plt1.__version__))\nprint('scipy version',format(scipy.__version__))\nprint('seaborn version',format(sns.__version__))\nprint('sklearn version',format(sklearn.__version__))","ab4abb97":"#Importing the essential packeges\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","dfeb901b":"#Importing the dataset\ndataset=pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\nprint(dataset.columns)","53c8e806":"print(dataset.shape)","d1c8743d":"print(dataset.describe)","131dfb87":"datset=dataset.sample(frac=0.001,random_state=1)\nprint(dataset.shape)","0d2cce45":"#plot a histogram of the dataset\ndataset.hist(figsize=(20,20))\nplt.xlabel(\"x-axis\")\nplt.show()","afa8db09":"#Now we are going to detect no. of fraud transactions in our dataset\nfraud=dataset[dataset['Class']==1]\nvalid=dataset[dataset['Class']==0]\noutlier_fraction=len(fraud)\/float(len(valid))\nprint(outlier_fraction)\nprint(\"fraud cases():\",format(len(fraud)))\nprint(\"valid cases():\",format(len(valid)))","85941339":"#Building the Co-relation Matrix\ncoremat=dataset.corr()\nfigu=plt.figure(figsize=(12,9))\n\nsns.heatmap(coremat,vmax=.8,square=True)\nplt.show()","5ee87f66":"#Now we are getting all the column from the dataframe\ncolumns=dataset.columns.tolist()\n\n#Eliminating the data from the columns which id not required\ncolumns=[c for c in columns if c not in[\"Class\"]]\n\n#storing the variable we are going to predict\ntarget=\"Class\"\nX=dataset[columns]\nY=dataset[target]\n\n#print the shape of target and column\nprint(X.shape)\nprint(Y.shape)\n","21b2d0ee":"from sklearn.metrics import classification_report,accuracy_score\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\n\n#defining a random state\nstate=1\n\n#define the outlier detection method\nclassifiers={\n    \"Isolation forest\":IsolationForest(max_samples=len(X),contamination=outlier_fraction,random_state=state),\n    \"Local Outlier Factor\":LocalOutlierFactor(n_neighbors=20,contamination=outlier_fraction)\n}\n","3afefd51":"#Fitting the model\nn_outliers=len(fraud)\nfor i,(clf_name,clf) in enumerate(classifiers.items()):\n    #fit the data and tag Outliers\n    if clf_name==\"Local Outlier Factor\":\n        y_pred=clf.fit_predict(X)\n        scores_pred=clf.negative_outlier_factor_\n    else:    \n        clf.fit(X)\n        scores_pred=clf.decision_function(X)\n        y_pred=clf.predict(X)\n    \n  #reshape the predictin values to 0 for valid, 1 for fraud\ny_pred[y_pred==1]=0\ny_pred[y_pred==-1]=1\nn_errors=(y_pred!=Y).sum()\n\n#Run Classificatin Matrices\nprint('{}:{}',format(clf_name,str(n_errors)))\nprint(accuracy_score(Y,y_pred))\nprint(classification_report(Y,y_pred))","ddb87cc0":"# Credit card Fraud Detection"}}