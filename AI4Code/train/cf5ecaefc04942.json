{"cell_type":{"ba7cfe69":"code","cef36a4a":"code","c5a0b3dc":"code","44204d65":"code","6f388058":"code","70782444":"code","7e7f74f5":"code","92cd8a35":"code","db4c5d4b":"code","cb69fe8d":"code","9dcf7a64":"code","cfd0de65":"code","a3863c56":"code","08b0b34e":"code","f313a83e":"code","5a01574e":"code","852ab454":"code","6dc4a8c1":"code","5b0bd84e":"code","e316f399":"code","ce1c28cf":"code","ade3b4fe":"code","eb6f82f8":"code","e97b234c":"code","fe04f0ee":"code","5224c464":"code","d42d6a29":"code","9f0ca55d":"code","e9104951":"markdown","bdaad7c1":"markdown"},"source":{"ba7cfe69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cef36a4a":"import lightgbm as lgb\nimport optuna.integration.lightgbm as oplgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport category_encoders as ce\nimport seaborn as sns","c5a0b3dc":"df_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\ndf_sample = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv\")","44204d65":"df_train","6f388058":"df_test","70782444":"train_id = df_train[\"id\"]\ntest_id = df_test[\"id\"]\n\ndf_train.drop(\"id\", axis=1, inplace=True)\ndf_test.drop(\"id\", axis=1, inplace=True)","7e7f74f5":"cat_features = [f\"cat{i}\" for i in range(9 + 1)]","92cd8a35":"onehot_encoder = ce.one_hot.OneHotEncoder()\nonehot_encoder.fit(pd.concat([df_train[cat_features], df_test[cat_features]], axis=0))\ntrain_ohe = onehot_encoder.transform(df_train[cat_features])\ntest_ohe = onehot_encoder.transform(df_test[cat_features])\ntrain_ohe.columns = [f\"OHE_{col}\" for col in train_ohe]\ntest_ohe.columns = [f\"OHE_{col}\" for col in test_ohe]","db4c5d4b":"numerical_features = [f\"cont{i}\" for i in range(13 + 1)]","cb69fe8d":"train_x = pd.concat([\n    df_train[numerical_features],\n    train_ohe\n], axis=1)","9dcf7a64":"test_x = pd.concat([\n    df_test[numerical_features],\n    test_ohe\n], axis=1)","cfd0de65":"train_y = df_train[\"target\"]","a3863c56":"train_x","08b0b34e":"test_x","f313a83e":"oplgb_train_data = oplgb.Dataset(train_x, train_y)","5a01574e":"oplgb_params = {\n    \"objective\": \"regression\",\n    \"metric\": \"root_mean_squared_error\",\n    \"verbosity\": -1,\n    \"learning_rate\": 0.01\n}","852ab454":"folds = KFold(n_splits=5, shuffle=True, random_state=2021)","6dc4a8c1":"tuner_cv = oplgb.LightGBMTunerCV(oplgb_params, oplgb_train_data, num_boost_round=1000, early_stopping_rounds=100, folds=folds, verbose_eval=100, time_budget=21600)\ntuner_cv.run()","5b0bd84e":"tuner_cv.best_params","e316f399":"class FoldsAverageLGBM:\n    def __init__(self, folds):\n        self.folds = folds\n        self.models = []\n        \n    def fit(self, lgb_params, train_x, train_y):\n        oof_preds = np.zeros_like(train_y)\n        \n        self.train_x = train_x\n        self.train_y = train_y.values\n        \n        for tr_idx, va_idx in tqdm(folds.split(train_x)):\n            tr_x, va_x = self.train_x.iloc[tr_idx], self.train_x.iloc[va_idx]\n            tr_y, va_y = self.train_y[tr_idx], self.train_y[va_idx]\n            \n            lgb_train_dataset = lgb.Dataset(tr_x, tr_y)\n            lgb_valid_dataset = lgb.Dataset(va_x, va_y)\n            model = lgb.train(lgb_params, lgb_train_dataset, valid_sets=[lgb_valid_dataset], verbose_eval=100)\n            self.models.append(model)\n            \n            oof_pred = model.predict(va_x)\n            oof_preds[va_idx] = oof_pred\n            \n        self.oof_preds = oof_preds\n        \n    def predict(self, test_x):\n        preds = []\n        for model in tqdm(self.models):\n            pred = model.predict(test_x)\n            preds.append(pred)\n        preds = np.mean(preds, axis=0)\n        return preds\n    \n    def get_feature_importance(self, importance_type=\"gain\"):\n        feature_names = self.models[0].feature_name()\n        feature_importances_list = [model.feature_importance(importance_type) for model in self.models]\n        \n        out_df = pd.DataFrame()\n        for i, name in enumerate(feature_names):\n            out_df[name] = [v[i] for v in feature_importances_list]\n        return out_df","ce1c28cf":"def plot_importance(importance_df, max_features=100):\n    feature_order = list(importance_df.mean().sort_values(ascending=False).index[:max_features])\n    target_data = importance_df[feature_order]\n    sns.boxenplot(data=target_data, orient=\"h\", order=feature_order)","ade3b4fe":"lgb_params = dict(tuner_cv.best_params)\nlgb_params[\"learning_rate\"] = 0.005\nlgb_params[\"early_stopping_round\"] = 200\nlgb_params[\"num_iterations\"] = 20000","eb6f82f8":"folds_average_lgbm = FoldsAverageLGBM(folds)","e97b234c":"folds_average_lgbm.fit(lgb_params, train_x, train_y)","fe04f0ee":"plt.figure(figsize=(20, 20))\nimportance_df = folds_average_lgbm.get_feature_importance()\nplot_importance(importance_df)","5224c464":"np.sqrt(mean_squared_error(df_train.target, folds_average_lgbm.oof_preds))","d42d6a29":"y_pred = folds_average_lgbm.predict(test_x)","9f0ca55d":"sub = df_sample.copy()\nsub[\"target\"] = y_pred\n\nsub.to_csv(\"submission_optuna_lgbm_ohe_v1.csv\", index=False)\n\nsub.head()","e9104951":"# Optuna","bdaad7c1":"# OneHotEncoder"}}