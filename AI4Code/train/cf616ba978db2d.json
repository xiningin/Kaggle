{"cell_type":{"0130be55":"code","0dc658f4":"code","81e01489":"code","cc87e3c7":"code","7e8eac1a":"code","676299ad":"code","e341ec9a":"code","5c71e90a":"code","5be2e1a8":"code","7fb20eba":"code","e21f8573":"code","24d48bf7":"code","3af8e6e4":"code","79a6ef2b":"code","c6fa41e5":"code","897a0c21":"code","3a126b0f":"code","acfddfc7":"code","d52601f4":"code","6fbfc36b":"code","3decfa3a":"code","1d048308":"code","1b7f74a8":"code","428ecaa7":"code","2bdeec8a":"code","c6d3f1ee":"code","4f9bc92f":"code","4fc9342d":"code","3eb19490":"code","4cba7240":"code","54951827":"code","e328e2f3":"code","7226dc22":"code","4550e2f0":"code","3b1f2c00":"code","42c12e09":"code","c14d3afe":"code","0fc339bf":"code","cfee488a":"code","76c92676":"code","77cab1ff":"code","f62e6046":"code","8a3c7c42":"code","940dc962":"code","3d83f380":"code","5258c398":"code","c1903de5":"code","7af4daad":"code","04020771":"code","94392b11":"code","d6a34559":"code","fe50d34e":"code","410688c8":"code","c1fff991":"code","d1c9cb26":"code","f6554878":"code","86c81276":"code","c5095f08":"code","060f30a6":"code","12c29001":"code","89ec2aa2":"markdown","238f5593":"markdown","f518948f":"markdown","8b4d48c5":"markdown","01119577":"markdown","27f665ad":"markdown","b8d144f7":"markdown","331e6ae9":"markdown","6380f84e":"markdown","1b0bc3fb":"markdown","a67b3c63":"markdown","c1e0db43":"markdown","719819a7":"markdown","42b86845":"markdown","1ba948f4":"markdown","88f14e54":"markdown","b071a8ac":"markdown","298a99a6":"markdown","2cba3399":"markdown","4154c96b":"markdown","620ec7c1":"markdown","cdc782a7":"markdown","6f445bf0":"markdown","ea090b0a":"markdown","491c11f5":"markdown"},"source":{"0130be55":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n","0dc658f4":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","81e01489":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# METABRIC_RNA_Mutation.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/METABRIC_RNA_Mutation.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'METABRIC_RNA_Mutation.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","cc87e3c7":"df1.head(5)","7e8eac1a":"#Pivot table for overall survival\ncorr = pd.pivot_table(df1, columns=['overall_survival'])\n","676299ad":"#Get top 30 values \nbestDeathCorr30 = corr.iloc[:,0].sort_values(ascending=False).head(30)\n","e341ec9a":"#Show top 30 values \nbestDeathCorr30\n","5c71e90a":"#Get correlations for living \nbestLifeCorr30 = corr.iloc[:,1].sort_values(ascending=False).head(30)\n","5be2e1a8":"#Show top 30 values \nbestLifeCorr30\n","7fb20eba":"#Get boxplot graphs for overall surival months and some interesting categories \n#f, axes = plt.subplots(2, 1, figsize=(20,15), sharex=False)\n\n#Main plot to be plotted \nplt.figure(figsize=(15,5))\nsns.boxplot(x='lymph_nodes_examined_positive', y='overall_survival_months', hue='overall_survival', data=df1) #ax=axes[0, 0]\nplt.xlabel(\"Lymph nodes examined positive\", fontsize=16)\nplt.xticks(fontsize=12)\nplt.ylabel(\"Overall survival (months)\", fontsize=16)\nplt.yticks(fontsize=12)\nplt.title(\"Overall survival vs. positive lymph nodes\", fontsize=16)\n\n#Other plots that will not be plotted\n#sns.boxplot(x='er_status', y='overall_survival_months', hue='overall_survival', data=df1, ax=axes[1, 0])\n#sns.boxplot(x='her2_status_measured_by_snp6', y='overall_survival_months', hue='overall_survival', data=df1, ax=axes[1, 0])\n#sns.boxplot(x='tumor_stage', y='overall_survival_months', hue='overall_survival', data=df1, ax=axes[1, 1])\n#sns.boxplot(x='pr_status', y='overall_survival_months', hue='overall_survival', data=df1, ax=axes[2, 0])\n#sns.boxplot(x='neoplasm_histologic_grade', y='overall_survival_months', hue='overall_survival', data=df1, ax=axes[2, 1])\n\n#plt.tight_layout()\n\nplt.savefig(\"\")\n","e21f8573":"#Group by overall survival to find the survival months mean and std. \nsurvivalMonths = df1.groupby(by='overall_survival')\nsurvivalMonthsMean = survivalMonths.mean()['overall_survival_months']\nsurvivalMonthsStd = survivalMonths.std()['overall_survival_months']\n","24d48bf7":"print (survivalMonthsMean)\nprint(survivalMonthsStd)","3af8e6e4":"#Get treatment list \ntreatmentList = [\"type_of_breast_surgery\", \"chemotherapy\", \"hormone_therapy\", \"radio_therapy\"] #cut, poison, hormones, burn \n","79a6ef2b":"#Get correlations between the treatments \ndfTreatments = df1[treatmentList]\ndfTreatments[\"type_of_breast_surgery\"] = dfTreatments[\"type_of_breast_surgery\"].apply(lambda x: 1 if \"MASTECTOMY\" in str(x) else 0)\n","c6fa41e5":"#Rename columns and get correlation \ndfTreatments.rename(columns={\"type_of_breast_surgery\": \"Mastectomy\", \"chemotherapy\": \"Chemotherapy\", \"hormone_therapy\": \"Hormone Therapy\", \"radio_therapy\": \"Radio Therapy\"}, inplace=True)\ndfTreatmentsCorr = dfTreatments.corr() \n","897a0c21":"#Display heatmap \nsns.heatmap(dfTreatmentsCorr, cmap = \"YlGnBu\", annot=True, fmt=\".2f\")\n","3a126b0f":"#Get pivot table with the overall survival values and the treatment combinations -> get a mean and std.\ndfTreatmentGroupsMean = pd.pivot_table(df1, columns = treatmentList, index = 'overall_survival', values = 'overall_survival_months').mean()\ndf1TreatmentGroupsStd = pd.pivot_table(df1, columns = treatmentList, index = 'overall_survival', values = 'overall_survival_months').std()\n","acfddfc7":"#Get pivot table with the overall survival and the treatment combinations. \ndf2TreatmentGroups = pd.pivot_table(df1, columns = treatmentList, index = 'overall_survival', values = 'overall_survival_months', aggfunc='count').sum().sort_values(ascending=False)\n","d52601f4":"#Make a dataframe with pivot tables made above\ntreatmentData = pd.DataFrame({'Mean Months Survived': dfTreatmentGroupsMean, \"Std Months Survived\": df1TreatmentGroupsStd, 'Treatments': df2TreatmentGroups}) \ntreatmentData = treatmentData.fillna(0)\n","6fbfc36b":"#Reset the index and use a figure label to make things easy to read. \ntreatmentData.index = range(1,17)\nunstackedTreatmentData = treatmentData\n\n#create subplots with shared x axis\nf, axes = plt.subplots(2, 1, figsize = (7,7), sharex=True)\n\nmeanMonths = unstackedTreatmentData.plot(kind='bar', y='Mean Months Survived', legend=False, yerr='Std Months Survived', ax=axes[0])\nmeanMonths.set_ylabel(\"Mean Months Survived\")\n\nnumTreatments = unstackedTreatmentData.plot(kind='bar', y='Treatments', legend=False, ax=axes[1])\nnumTreatments.set_ylabel(\"Number of Treatments\")\nnumTreatments.set_xlabel(\"Treatment Method\")\n\nplt.tight_layout()","3decfa3a":"#Get the overall survival % in 100%. \nmastectomyCounts = (dfTreatments[\"Mastectomy\"].value_counts()[1]\/dfTreatments[\"Mastectomy\"].value_counts().sum())*100\nchemoCounts = (dfTreatments[\"Chemotherapy\"].value_counts()[1]\/dfTreatments[\"Chemotherapy\"].value_counts().sum())*100\nhormoneCounts = (dfTreatments[\"Hormone Therapy\"].value_counts()[1]\/dfTreatments[\"Hormone Therapy\"].value_counts().sum())*100\nradioCounts = (dfTreatments[\"Radio Therapy\"].value_counts()[1]\/dfTreatments[\"Radio Therapy\"].value_counts().sum())*100\n","1d048308":"#Dictionary of the survival % for each treatment \ntreatmentSurvivalDict = {'Mastectomy': mastectomyCounts, 'Chemotherapy': chemoCounts, 'Hormone Therapy':hormoneCounts, 'Radio Therapy': radioCounts}\n","1b7f74a8":"#Plot of each treatment \nplt.figure(figsize=(7.5,5))\nplt.bar(list(treatmentSurvivalDict.keys()), list(treatmentSurvivalDict.values()))\nplt.xlabel(\"Treatment\", fontsize=15)\nplt.ylabel(\"Survival %\", fontsize=15)\nplt.xticks(size=12)\nplt.yticks(size=12)\n\nplt.tight_layout()\n","428ecaa7":"#Drop columns that are not related to mutations\ndf1UniqueMutations = df1.drop(columns=list(df1.iloc[:,0:-173].columns))\n","2bdeec8a":"#Make a new dataframe with the unique counts of each mutation and sort\ndf1GroupedUniqueMutations = pd.DataFrame({\"Unique Mutations\": df1UniqueMutations.nunique()})\ndf1GroupedUniqueMutations.sort_values(by='Unique Mutations', ascending=False).head(10)\n","c6d3f1ee":"#Make dataframe of binary values for each gene (mutated = 1, not-mutated = 0) and remove \ndf1UniqueMutationsBinary = df1UniqueMutations.applymap(lambda x: 1 if x != '0' else 0)\ncorr = df1UniqueMutationsBinary.corr().fillna(0)\n","4f9bc92f":"#Make the heatmap\nplt.figure(figsize=(20,20))\nsns.heatmap(corr, cmap = \"YlGnBu\", linewidths=0.5)\n","4fc9342d":"#The argsort returns indexes and columns from 0:len(columns), sorted in descending order by column values\n#Get the second largest values\n#Make the array columns and index values as correlation index values\n\narr = np.argsort(-corr.values, axis=1)\ncorrValue = corr.apply(lambda row: row.nlargest(2).values[-1],axis=1)\ndf2UniqueMutationsBinary = pd.DataFrame({'Correlated Mutation': corr.columns[arr[1]], 'Pearson Correlation': corrValue}, index=corr.index)\n","3eb19490":"#Sort the values\nbestMutation = df2UniqueMutationsBinary.sort_values(by = 'Pearson Correlation', ascending=False)\n","4cba7240":"#Take a look at the top 50 values \nbestMutation.head(50)\n","54951827":"#Expression dataframe with genes normalized with z-score. \nexpressionDB = df1.iloc[:, 31:520]\n","e328e2f3":"#Dataframe with the expression of each gene. \nexpressionDB2 = df1[['pr_status', 'er_status', 'her2_status', 'cancer_type_detailed', 'age_at_diagnosis', 'overall_survival', 'tumor_stage']]\n","7226dc22":"#Concatenate the df with desired columns and expression values\nexpressionDB3 = pd.concat([expressionDB,expressionDB2], axis=1)\n","4550e2f0":"#Made expression analysis DB with all the correct columns \nexpressionDB3\n","3b1f2c00":"#Change object dtypes to numerics \nexpressionDB3.pr_status = expressionDB3.pr_status.apply(lambda x: 1 if \"Positive\" in x else 0)\nexpressionDB3.er_status = expressionDB3.er_status.apply(lambda x: 1 if \"Positive\" in x else 0)\nexpressionDB3.her2_status = expressionDB3.her2_status.apply(lambda x: 1 if \"Positive\" in x else 0)\n","42c12e09":"#Remove cancer type column because it seems less interesting for this comparison\nexpressionDB3.drop(columns=\"cancer_type_detailed\", inplace=True)\n","c14d3afe":"#Get the correlations for the dataframe \ncorr = expressionDB3.corr().fillna(0)\n","0fc339bf":"#Make a heatmap for the correlation\nf, axes = plt.subplots(1, 4, figsize=(25,25), sharex=False)\n#plt.figure(figsize=(3,100))\nsns.heatmap(corr.iloc[:-6,-6:-1][1:125], cmap = \"RdBu_r\",linewidths=0.1, cbar = False, ax=axes[0])\nsns.heatmap(corr.iloc[:-6,-6:-1][126:250], cmap = \"RdBu_r\",linewidths=0.1, cbar = False,ax=axes[1])\nsns.heatmap(corr.iloc[:-6,-6:-1][251:375], cmap = \"RdBu_r\",linewidths=0.1, cbar = False,ax=axes[2])\nsns.heatmap(corr.iloc[:-6,-6:-1][376:489], cmap = \"RdBu_r\",linewidths=0.1, ax=axes[3])\n\n#sns.boxplot(x='er_status', y='overall_survival_months', hue='overall_survival', data=df1, ax=axes[1, 0])\n","cfee488a":"#looking at the dataframe to sort out unnecessary columns\ndf1.iloc[:,20:38]\n","76c92676":"#Drop unnecessary columns\ndf2 = df1.drop(columns=['patient_id', 'cancer_type', 'cancer_type_detailed', 'cohort'])\n","77cab1ff":"#UNDEF was removed from 'her2_status_measured_by_snp6'\ndf3 = df2[df2['her2_status_measured_by_snp6'] != 'UNDEF']\n","f62e6046":"#Change binary columns into 1's and 0's \ndf3['er_status_measured_by_ihc'] = df3['er_status_measured_by_ihc'].apply(lambda x: 1 if \"Positive\" in str(x) else 0)\ndf3['her2_status'] = df3['her2_status'].apply(lambda x: 1 if \"Positive\" in str(x) else 0)\ndf3['inferred_menopausal_state'] = df3['inferred_menopausal_state'].apply(lambda x: 1 if \"Post\" in str(x) else 0)\ndf3['primary_tumor_laterality'] = df3['primary_tumor_laterality'].apply(lambda x: 1 if \"Left\" in str(x) else 0)\ndf3['pr_status'] = df3['pr_status'].apply(lambda x: 1 if \"Positive\" in str(x) else 0)\ndf3['er_status'] = df3['er_status'].apply(lambda x: 1 if \"Positive\" in str(x) else 0)\n","8a3c7c42":"#Change columns into dummy variables\ndummyList = ['cellularity',\n             'pam50_+_claudin-low_subtype',\n             'neoplasm_histologic_grade',\n             #'cancer_type_detailed',\n             'tumor_other_histologic_subtype',\n             'integrative_cluster',\n             #'gene_classifier_subtype',\n             'oncotree_code',\n             'her2_status_measured_by_snp6',\n             '3-gene_classifier_subtype',\n             'death_from_cancer'\n            ]\ndf4 = pd.get_dummies(df3, columns=dummyList)\n","940dc962":"#Change type_of_breast_surgery so Mastectomy = 1, Breast conserving \ndf4['type_of_breast_surgery'] = df4['type_of_breast_surgery'].apply(lambda x: 1 if \"MASTECTOMY\" in str(x) else 0)\n","3d83f380":"#Change column 507 to the last column \ndf5 = df4.applymap(lambda x: 0 if \"0\" in str(x) else 1)\n","5258c398":"df5","c1903de5":"#Make a y value and use df5 with \"death_from_cancer_Died of Disease\", \"death_from_cancer_Living\". \ny = df5[\"death_from_cancer_Died of Disease\"]\nX = df5.drop(columns=[\"overall_survival\", \"death_from_cancer_Died of Other Causes\", \"death_from_cancer_Living\", \"death_from_cancer_Died of Disease\"])\n","7af4daad":"#train, test split \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)\n","04020771":"#import dtree \nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\nclf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\nyPred = clf.predict(X_test)\naccuracy_score(y_test, yPred)","94392b11":"#Logistic regression\nfrom sklearn.linear_model import LogisticRegression\n\nlogReg = LogisticRegression()\nlogReg.fit(X_train, y_train)\nyPred = logReg.predict(X_test)\naccuracy_score(y_test, yPred)\n","d6a34559":"from sklearn.ensemble import GradientBoostingClassifier\n\ngBoostClassifier = GradientBoostingClassifier()\ngBoostClassifier.fit(X_train, y_train)\nyPred = gBoostClassifier.predict(X_test)\naccuracy_score(y_test, yPred)\n","fe50d34e":"from sklearn.ensemble import AdaBoostClassifier\n\nadaBoostClassifier = AdaBoostClassifier()\nadaBoostClassifier.fit(X_train, y_train)\nyPred = adaBoostClassifier.predict(X_test)\naccuracy_score(y_test, yPred)\n","410688c8":"import xgboost as xgb \n\nD_train = xgb.DMatrix(X_train, label=y_train)\nD_test = xgb.DMatrix(X_test, label=y_test)\n","c1fff991":"#Parameters for XGBoost\nparam = {\n    'eta': 0.3, \n    'max_depth': 3,  \n    'objective': 'multi:softprob',  \n    'num_class': 3} \n\nsteps = 20  # The number of training iterations\n","d1c9cb26":"import numpy as np\nfrom sklearn.metrics import precision_score, recall_score, accuracy_score\n\nmodel = xgb.train(param, D_train, steps)\npreds = model.predict(D_test)\nbest_preds = np.asarray([np.argmax(line) for line in preds])\n\nprint(\"Precision = {}\".format(precision_score(y_test, best_preds, average='macro')))\nprint(\"Recall = {}\".format(recall_score(y_test, best_preds, average='macro')))\nprint(\"Accuracy = {}\".format(accuracy_score(y_test, best_preds)))","f6554878":"#Make input layer\nX_NN_input = X.transpose()\n","86c81276":"#Neural network model \nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=724, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n","c5095f08":"#Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","060f30a6":"#Fit the model\nmodel.fit(X_train, y_train, epochs=150, batch_size=10)\n","12c29001":"#Evaluate the model\n_, accuracy = model.evaluate(X_test, y_test)\nprint('Accuracy: %.2f' % (accuracy*100))","89ec2aa2":"## Neural network","238f5593":"Now you're ready to read in the data and use the plotting functions to visualize the data.","f518948f":"Although statistical significance cannot be ascertained from these figures, one can roughly say, with some reasonable probability, that the following are risk factors for low survival and few overall months left: \n\n- Neoplasm histologic grade: 3 \n- PR status: Positive\n- Tumor stage: 3 or 4, \n- Her2 status measured by snp6: GAIN \n- ER status: Negative\n- Lymph nodes examined positive: 5 or more ","8b4d48c5":"Best survival is with radiotherapy, hormone therapy or mastectomy. If you have chemotherapy, you have a less than 50% chance of survival","01119577":"This heatmap shows a diverse number of relationships between the pr_statis, er_status, her2_status, age_at_diagnosis and overall survival. Many of these relationships are surprising (e.g. pdgfra, lamb3 and age at diagnosis).","27f665ad":"Seems like the biggest correlation between overall death (opposite of survival) and features comes from: \n- \"overall_survival_months\"\n- \"age_at_diagnosis\"\n- \"tumor_size\"\n- \"mutation_count\"\n- \"nottingham_prognostic_index\". ","b8d144f7":"## Treatments Effectiveness Analysis\n### (Breast surgery, radiotherapy, mastectomy, chemotherapy, hormone therapy) ","331e6ae9":"## Machine Learning ","6380f84e":"## Expression analysis (abundance\/gene, correlations to survival and other features)","1b0bc3fb":"Let's take a quick look at what the data looks like:","a67b3c63":"The genes with the most varied mutations were:\n    \n- tp53\n- muc16\n- syne1\n- pik3ca\n- map3k1\n- ahnak2\n- kmt2c\n- gata3\n- cdh1\n- dnah11","c1e0db43":"## Positive lymph nodes vs. Overall months of survival","719819a7":"Chemotherapy and radio therapy are done more often together than other therapies.","42b86845":"Seems like the biggest correlation between overall death (opposite of survival) and features comes from:\n\n- \"overall_survival_months\"\n- \"age_at_diagnosis\"\n- \"tumor_size\"\n- \"mutation_count\"\n- \"nottingham_prognostic_index\"","1ba948f4":"## Treatment % Survival\n### (Breast surgery, radiotherapy, mastectomy, chemotherapy, hormone therapy) ","88f14e54":"There is 1 csv file in the current version of the dataset:\n","b071a8ac":"## Import libraries","298a99a6":"Overall survival (in months) for overall survival vs. overall death:\n\nSurvived: 156.4 $\\pm$ 77.9 <br>\nDead: 101.7 $\\pm$ 74.9\n    ","2cba3399":"## Overall survival (in months) vs. overall survival","4154c96b":"## Treatment Correlation Analysis \n### (Breast surgery, radiotherapy, mastectomy, chemotherapy, hormone therapy) ","620ec7c1":"## Let's check 1st file: \/kaggle\/input\/METABRIC_RNA_Mutation.csv","cdc782a7":"|                | Decision Tree | Logistic Regression | Gradient Boosted Trees | Ada Boosted Trees | XGBoost | 3-Layer NN |\n|----------------|:-------------:|:-------------------:|:----------------------:|:-----------------:|:-------:|:----------:|\n| Accuracy Score |      61%      |         59%         |           67%          |       61.5%       |   65%   |     61%    |","6f445bf0":"| Treatment Combination   | Breast Surgery | Chemotherapy | Hormone Therapy | Radio Therapy |\n|:--:|:--------------:|:------------:|:---------------:|:-------------:|\n|  1 |                |              |                 |               |\n|  2 |               |              |                 |       +       |\n|  3 |               |              |        +        |               |\n|  4 |              |              |        +        |       +       |\n|  5 |               |       +      |                 |               |\n|  6 |               |       +      |                 |       +       |\n|  7 |               |       +      |        +        |               |\n|  8 |               |       +      |        +        |       +       |\n|  9 |        +       |              |                 |               |\n| 10 |         +       |              |                 |       +       |\n| 11 |        +        |              |        +        |               |\n| 12 |        +        |              | +               | +             |\n| 13 |        +        | +            |                 |               |\n| 14 |        +        | +            |                 | +             |\n| 15 |        +        | +            | +               |               |\n| 16 |        +        | +            | +               | +             |\n\n\n- More treatments are not always better. Condition 7, in which all four treatments were used, led to some of the lowest survival rates. \n- It also looks like the greatest variance for survival (in months) was when breast surgery and chemotherapy were both done (condition 13,14).","ea090b0a":"## Features that correlate most with death","491c11f5":"## Mutation analysis (abundance\/gene, correlations to survival and other features)"}}