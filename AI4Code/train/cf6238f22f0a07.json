{"cell_type":{"20460d1d":"code","4f38f777":"code","bd3b10f4":"code","bd0673e4":"code","aeb6f1ed":"code","23f6012a":"code","7f47b1bf":"code","06b07a44":"code","d9ecb599":"code","27dc8c49":"code","b0ec9f19":"code","13e61127":"code","e9cad699":"code","8999fd0e":"code","6bb87ffb":"code","c4777503":"code","eec2c3fe":"code","3f296e5d":"code","d0a745ba":"code","d54912e7":"code","39f804bf":"code","26f2cfc5":"code","5de91f81":"code","f7128539":"code","4c7aa710":"code","08cae76f":"code","259afab8":"code","7e992166":"code","caed4f1c":"code","55e7db19":"code","f86d91f7":"code","cd87bab2":"code","a0f7792a":"code","4faf3950":"code","b66adcb5":"code","f4ff68b4":"code","813ec284":"code","8954577a":"code","68f44a22":"markdown","bf6b2366":"markdown","224c2cc5":"markdown","d9339c49":"markdown","30a587d5":"markdown","294ecca0":"markdown","05b7bb0f":"markdown","9d92ffec":"markdown","be005d7c":"markdown","f5e524c6":"markdown","11afe214":"markdown","f47cc8a7":"markdown","cfb41cb4":"markdown","b4b309f8":"markdown","4417a479":"markdown","02f420c1":"markdown","c01c43c8":"markdown","e26c297d":"markdown","37943bc1":"markdown","a46eb474":"markdown","bd7cb02a":"markdown","112513e8":"markdown","a4770cfd":"markdown","4b9e2429":"markdown","54905adc":"markdown","fa46ddcf":"markdown","5d34e4f3":"markdown","db0f70d7":"markdown","0d850a04":"markdown","fbce9a2c":"markdown","11f7fad5":"markdown"},"source":{"20460d1d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f38f777":"PercGrow = pd.read_csv(\"\/kaggle\/input\/population-growth-annual\/API_SP.POP.GROW_DS2_en_csv_v2_2164049.csv\")\nPercGrow.head(3)","bd3b10f4":"IncomeGroup = pd.read_csv(\"\/kaggle\/input\/population-growth-annual\/Metadata_Country_API_SP.POP.GROW_DS2_en_csv_v2_2164049.csv\")\nIncomeGroup.head(3)","bd0673e4":"PercGrow.shape","aeb6f1ed":"#Columns SP.POP.GROW and Indicator Code\nprint(f\"{PercGrow[PercGrow.columns[2:4]].value_counts()}\\n\") #We can removes this columns because they have a unique value\n\n# Year 1960 and 2020 NaN values \nprint(PercGrow[\"1960\"].isnull().sum()) # Many NaN values \nprint(PercGrow[\"2020\"].isnull().sum()) # Same \n\n# Then, we drop all these columns from our dataset \nPercGrow = PercGrow.drop(PercGrow.columns[2:4],axis=1)\nPercGrow = PercGrow.drop([\"1960\",\"2020\"],axis=1)\nPercGrow.head()","23f6012a":"PercGrow[PercGrow.columns[5:-1]].isnull().sum()","7f47b1bf":"PercGrow = PercGrow.drop(PercGrow[PercGrow[\"1961\"].isnull() == True].index, axis=0)\nPercGrow[PercGrow.columns[5:-1]].isnull().sum()\nPercGrow = PercGrow.fillna(0)","06b07a44":"import re\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https:\/\/www.bluemarblecitizen.com\/world-population\/1961\"\n\ntry:\n    page=requests.get(url)\nexcept:\n    print(\"Problem with the request\")\n\nsoup=BeautifulSoup(page.content,\"html.parser\")\nresults = soup.find_all(class_=\"popTable\")\n\ndef cleanhtml(raw_html):\n    return re.sub(re.compile('<.*?>'), '\/', raw_html).split(\"\/\/\")[1:-1]\n\ndataset = []\n\nfor table in results:\n    job_section = table.find_all(\"tr\")\n    for job in job_section:\n        scapped = [item.replace(\"\/\",\"\") for item in cleanhtml(str(job))[1:3]] \n        if scapped not in dataset:\n            dataset.append(scapped)\n\nd = {str(PercGrow.columns[0]): [item[0] for item in dataset[1:]], 'Population_1961': [int(item[1].replace(\",\",\"\")) for item in dataset[1:]]}\nPopulation_size_1961 = pd.DataFrame(data=d)\nPopulation_size_1961.head()","d9ecb599":"#Left Join on Country Name\nTestNaN = pd.merge(PercGrow,Population_size_1961,on=str(PercGrow.columns[0]),how='left')\nTestNaN[TestNaN.Population_1961.isnull() == True][\"Country Name\"].unique()","27dc8c49":"World = PercGrow[PercGrow[\"Country Name\"] == \"World\"].copy()\nWorld[\"Population_1961\"] = 3091843507\nWorld","b0ec9f19":"PopulationSize = pd.merge(PercGrow,Population_size_1961,on=str(PercGrow.columns[0]),how='inner')\n\nfor col in PopulationSize.columns[3:-1]:\n    PopulationSize[f\"Population_{col}\"] = round(PopulationSize[f\"Population_{int(col)-1}\"] + PopulationSize[f\"Population_{int(col)-1}\"] * (PopulationSize[col]\/100))\n\nPopulationSize.head(5)","13e61127":"df = pd.merge(IncomeGroup[IncomeGroup.columns[0:3]],PopulationSize,on=\"Country Code\",how='inner')\ndf.head(5)","e9cad699":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncolunms = World.columns[3:-1].copy()\n\nfor col in colunms:\n    World[f\"Population_{col}\"] = round(World[f\"Population_{int(col)-1}\"] + World[f\"Population_{int(col)-1}\"] * (World[col]\/100))\n\n    World[World.columns[2:61]].values[0]","8999fd0e":"#Set a figure \nplt.style.use('seaborn-whitegrid')\nfig, ax_G = plt.subplots(figsize=[20,12])\nax_P = ax_G.twinx()\nax_G.set_xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nax_G.set_ylabel(\"% Growth\",fontsize=15,fontweight=550,labelpad=15)\nax_P.set_ylabel(\"Population in Billion\",fontsize=15,fontweight=550,labelpad=15)\nax_G.set_title(\"Evolution of the % Growth and the population in the World from 1961 to 2019\",fontsize=20,fontweight=600)\nax_P.set_xticks([i*2 for i in range(0,30)])\nax_P.set_xticklabels(labels  = [1961 + i*2 for i in range(0,30)])\n\nax_G.plot([int(item) for item in World.columns[2:61].tolist()],World[World.columns[2:61]].values[0],linewidth=3,label=\"% Growth\",color = \"#CD9FCC\")\nax_P.plot([int(item[-4:]) for item in World.columns[61:].tolist()],World[World.columns[61:]].values[0],linewidth=3,label=\"Population\",color = \"#0A014F\")\n\nax_G.set_xticks([1961 + i*2 for i in range(0,30)])\nax_G.set_xticklabels([1961 + i*2 for i in range(0,30)])\n","6bb87ffb":"Evolution_by_region = df.groupby([\"Region\"]).mean()\nPercentage_years_columns = Evolution_by_region.columns[0:59] #% growth columns \nPopulation_years_columns = Evolution_by_region.columns[59:] #population size columns \nEvolution_by_region","c4777503":"#Set a figure \nfig = plt.figure(figsize=[20,12])\nplt.yticks(fontsize=10,fontweight=550) \nplt.xticks([i*2 for i in range(0,30)],fontsize=8,fontweight=550)\nplt.xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nplt.ylabel(\"% Growth\",fontsize=15,fontweight=550,labelpad=15)\nplt.title(\"Evolution of the % Growth from 1961 to 2019 in the different regions across the world\",fontsize=20,fontweight=600)\n\nfor index in Evolution_by_region.index:\n    plt.plot(Evolution_by_region[Percentage_years_columns].loc[index],label = index,linewidth=3)\n\nplt.legend(fontsize=12)\n","eec2c3fe":"print(\"We can see that overall, the % of growth has decreased over the last 60 years !\\n\")\nprint(f\"Decrease for each region from 1961 to 2019 : \\n\\n\\n{Evolution_by_region['1961'] - Evolution_by_region['2019']}\")\nEvolution_by_region[[\"1961\",\"2019\"]]","3f296e5d":"#Set a figure \nfig = plt.figure(figsize=[20,12])\nplt.yticks(fontsize=10,fontweight=550) \nplt.xticks([i*2 for i in range(0,30)],labels=[1961+i*2 for i in range(0,30)],fontsize=8,fontweight=550)\nplt.xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nplt.ylabel(\"Growth in Billion\",fontsize=15,fontweight=550,labelpad=15)\nplt.title(\"Evolution of the population from 1961 to 2019 in the different regions across the world\",fontsize=20,fontweight=600)\n\nfor index in Evolution_by_region.index:\n    plt.plot(df.groupby(['Region']).sum()[Population_years_columns].loc[index],label = index,linewidth=3)\n\nplt.legend(fontsize=12)\n","d0a745ba":"print(\"On the contrary, despite a decrease of % of growth, the world population has increased for each region ! \\n\")\nprint(f\"Population Evolution from 1961 to 2019 : \\n\\n\\n{df.groupby(['Region']).sum()['Population_2019'] - df.groupby(['Region']).sum()['Population_1961']}\")\ndf.groupby([\"Region\"]).sum()[[\"Population_1961\",\"Population_2019\"]]","d54912e7":"result = sum(df.groupby([\"Region\"]).sum()[\"Population_2019\"].iloc[[0,5]])\nprint(f\"If we add 'East Asia & Pacific' and 'South Asia', we can observe that a lot of people lives in these region :\\n{result}\")\nprint(\"Soit 4 billions peoples, more than half of the total earth population\")","39f804bf":"EastAsia = df[df[\"Region\"] == 'East Asia & Pacific'].copy()\nSouthAsia = df[df[\"Region\"] == 'South Asia'].copy()\nprint(SouthAsia[SouthAsia[\"Population_2019\"] == SouthAsia[\"Population_2019\"].max()][\"Country Name\"])\nprint(EastAsia[EastAsia[\"Population_2019\"] == EastAsia[\"Population_2019\"].max()][\"Country Name\"])","26f2cfc5":"#Create datasets \nChina = df[df[\"Country Name\"] == \"China\"]\nIndia = df[df[\"Country Name\"] == \"India\"]","5de91f81":"#Set a figure \nfig, ax_G = plt.subplots(figsize=[20,12])\nax_P = ax_G.twinx()\nfig = plt.figure()\nax_G.set_xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nax_G.set_ylabel(\"% Growth\",fontsize=15,fontweight=550,labelpad=15)\nax_P.set_ylabel(\"Population in Billion\",fontsize=15,fontweight=550,labelpad=15)\nax_G.set_title(\"Evolution of the % Growth and the population in China and India from 1961 to 2019\",fontsize=20,fontweight=600)\nax_P.set_xticks([i*2 for i in range(0,30)])\nax_P.set_xticklabels(labels  = [1961 + i*2 for i in range(0,30)])\n\nax_G.plot([int(item) for item in China.columns[4:63].tolist()],China[China.columns[4:63]].values[0],linewidth=3,label=\"% Growth China\",color = \"#ff758f\")\nax_P.plot([int(item[-4:]) for item in China.columns[63:].tolist()],China[China.columns[63:]].values[0],linewidth=3,label=\"Population China\",color = \"#a4133c\")\nax_G.plot([int(item) for item in India.columns[4:63].tolist()],India[India.columns[4:63]].values[0],linewidth=3,label=\"% Growth India\",color = \"#78c6a3\")\nax_P.plot([int(item[-4:]) for item in India.columns[63:].tolist()],India[India.columns[63:]].values[0],linewidth=3,label=\"Population India\",color = \"#248277\")\n\nax_G.set_xticks([1961 + i*2 for i in range(0,30)])\nax_G.set_xticklabels([1961 + i*2 for i in range(0,30)])\nax_G.legend(fontsize=18,loc=8)\nax_P.legend(fontsize=18,loc=4)\n","f7128539":"Growth_AVG = df[df.columns[4:63]].mean()\nPop_AVG = df[df.columns[63:]].mean()","4c7aa710":"plt.figure(figsize=[20,20])\nax_G = plt.subplot(211)\n\nfig = plt.figure()\nax_G.set_xlabel(\"Year\",fontsize=10,fontweight=550,labelpad=15)\nax_G.set_ylabel(\"% Growth\",fontsize=10,fontweight=550,labelpad=15)\nax_G.set_title(\"Comparaison of the % Growth and the population in China with the global average from 1961 to 2019\",fontsize=10,fontweight=600)\nax_G.set_xticks([i*2 for i in range(0,30)])\nax_G.set_xticklabels(labels  = [1961 + i*2 for i in range(0,30)])\n\nax_G.plot([int(item) for item in China.columns[4:63].tolist()],China[China.columns[4:63]].values[0],linewidth=3,label=\"% Growth China\",color = \"#ff758f\")\n\nax_G.plot([int(item) for item in China.columns[4:63].tolist()],df[df.columns[4:63]].mean(),linewidth=3,label=\"% Mean\",color = \"#48cae4\")\n\n\nax_G.set_xticks([1961 + i*2 for i in range(0,30)])\nax_G.set_xticklabels([1961 + i*2 for i in range(0,30)])\nax_G.legend(fontsize=15,loc=8)\n\n\n#Set a figure \nplt.figure(figsize=[20,20])\nax_G2 = plt.subplot(212)\n\nax_G2.set_xlabel(\"Year\",fontsize=2,fontweight=550,labelpad=15)\nax_G2.set_ylabel(\"% Growth\",fontsize=2,fontweight=550,labelpad=15)\nax_G2.set_title(\"Comparaison of the % Growth and the population in India with the global average from 1961 to 2019\",fontsize=10,fontweight=600)\nax_G2.set_xticks([i*2 for i in range(0,30)])\nax_G2.set_xticklabels(labels  = [1961 + i*2 for i in range(0,30)])\n\nax_G2.plot([int(item) for item in India.columns[4:63].tolist()],India[India.columns[4:63]].values[0],linewidth=3,label=\"% Growth India\",color = \"#78c6a3\")\n\nax_G2.plot([int(item) for item in China.columns[4:63].tolist()],df[df.columns[4:63]].mean(),linewidth=3,label=\"% Mean\",color = \"#48cae4\")\n\nax_G2.set_xticks([1961 + i*2 for i in range(0,30)])\nax_G2.set_xticklabels([1961 + i*2 for i in range(0,30)])\nax_G2.legend(fontsize=15,loc=6)\n","08cae76f":"PercentGrowth = pd.melt(World[World.columns[2:61]]).rename(columns={\"variable\" : \"Year\",\"value\" : \"PercGrowth\"})\nPercentGrowth[\"Year\"] = PercentGrowth[\"Year\"].map(lambda x : pd.to_datetime(f\"{x}-12-31\"))\nPercentGrowth.head(5)","259afab8":"plt.figure(figsize=[12,8])\nplt.title(\"% Growth of the world population\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"% Growth\")\nplt.xticks([i*3 for i in range(0,20)],labels = [1961 + i*3 for i in range(20)])\nPercentGrowth['PercGrowth'].plot()","7e992166":"from statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.tsa.ar_model import AutoReg\n\n# Run the test\nPG_stationarityTest = adfuller(PercentGrowth['PercGrowth'], autolag='AIC')\n\n# Check the value of p-value\nprint(\"P-value: \", PG_stationarityTest[1],\", then no stationarity.\")\n\nplt.figure(figsize=[12,8])\npacf = plot_pacf(PercentGrowth['PercGrowth'], lags=25)\n\n# Create training and test data\ntrain_data = PercentGrowth['PercGrowth'][:round(len(PercentGrowth['PercGrowth'])*0.8)]\ntest_data = PercentGrowth['PercGrowth'][round(len(PercentGrowth['PercGrowth'])*0.8):]","caed4f1c":"# Instantiate and fit the AR model with training data\nar_model = AutoReg(train_data, lags=6).fit()\nprint(ar_model.summary())\nplt.show()","55e7db19":"# Make the predictions\n\nplt.figure(figsize=[15,10])\npred = ar_model.predict(start=len(train_data), end=(len(PercentGrowth)-1), dynamic=False)\n\n# Plot the prediction vs test data\nplt.plot(pred)\nplt.plot(test_data, color='red')","f86d91f7":"# Make the predictions\nplt.figure(figsize=[20,10])\nplt.plot(PercentGrowth['PercGrowth'],label=\"% Growth\")\npred = ar_model.predict(start=len(PercentGrowth)-1, end=(len(PercentGrowth)+41), dynamic=False)\nplt.plot(pred,color='red',label=\"Forecast\")\nplt.xticks([i*4 for i in range(28)],labels = [1961 + i*4 for i in range(28)])\nplt.ylabel(\"Population in Billion\",fontsize=15,fontweight=550,labelpad=15)\nplt.title(\"Evolution and Prediction of the % Growth from 1961 to 2061\",fontsize=20,fontweight=600)\n\nplt.legend(fontsize=18)","cd87bab2":"PopIni = World[\"Population_2019\"].values[0]\nPred_pop_size = []\n\nfor percGrowth in pred:\n    PopIni = PopIni + PopIni * (percGrowth\/100)\n    Pred_pop_size.append(PopIni)","a0f7792a":"#Set a figure \nfig = plt.figure(figsize=[20,12])\nplt.xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nplt.ylabel(\"Population in 10 billions\",fontsize=15,fontweight=550,labelpad=15)\nplt.title(\"Evolution and Prediction of the population size from 1961 to 2061\",fontsize=20,fontweight=600)\n#ax_P.set_xticks([i*2 for i in range(0,30)])\n#ax_P.set_xticklabels(labels  = [1961 + i*2 for i in range(0,30)])\n\nplt.plot([2020 + i for i in range(43)],Pred_pop_size,linewidth=3,label=\"Prediction\",color = \"#a4133c\")\nplt.plot([int(item[-4:]) for item in World.columns[61:].tolist()],World[World.columns[61:]].values[0],linewidth=3,label=\"Evolution of the population\",color = \"#0A014F\")\nplt.vlines(2019, 3000000000, 11000000000, linestyle='--', color='r', label='Start of forecast');\nplt.legend(fontsize=18,loc=4)","4faf3950":"PercentGrowth = PercentGrowth.set_index(\"Year\")\nPercentGrowth.head(5)","b66adcb5":"from statsmodels.tsa.holtwinters import Holt\ndf = PercentGrowth.copy()\ntrain = df.iloc[:58, :]\ntest = df.iloc[58:, :]\ntrain.index = pd.to_datetime(train.index,format=\"%Y\")\ntest.index = pd.to_datetime(test.index,format=\"%Y\")\npred = test.copy()","f4ff68b4":"model = Holt(np.asarray(train['PercGrowth']))\n#model._index = pd.to_datetime(df.index)\nfit1 = model.fit(smoothing_level=.7, smoothing_trend=.1)\npred1 = fit1.forecast(len(test)+40)\nfit2 = model.fit(smoothing_level=.5, smoothing_trend=.25)\npred2 = fit2.forecast(len(test)+40)\nfit3 = model.fit(smoothing_level=.3, smoothing_trend=.15)\npred3 = fit3.forecast(len(test)+40)\n\n\nfig, ax = plt.subplots(figsize=(20, 12))\nax.plot(df.index, df.values)\nfor p, f, c in zip((pred1, pred2, pred3),(fit1, fit2, fit3),('#ff7823','#3c763d','c')):\n    ax.plot(train.index, f.fittedvalues, color=c)\n    ax.plot([pd.to_datetime(f'{year}-12-31T00:00:00.000000000') for year in range(2019,2060)], p, label=\"alpha=\"+str(f.params['smoothing_level'])[:4]+\", beta=\"+str(f.params['smoothing_trend'])[:4], color=c)\nplt.xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nplt.ylabel(\"Population in 10 billions\",fontsize=15,fontweight=550,labelpad=15)\nplt.title(\"Holt's Exponential Smoothing predictions\",fontsize=20,fontweight=600)\nplt.legend(fontsize=18)","813ec284":"PopIni = World[\"Population_2019\"].values[0]\n#orange one \nPred_pop_size1 = []\nfor percGrowth in pred1:\n    PopIni = PopIni + PopIni * (percGrowth\/100)\n    Pred_pop_size1.append(PopIni)\n\n#green one\nPopIni = World[\"Population_2019\"].values[0]\nPred_pop_size2 = []\nfor percGrowth in pred2:\n    PopIni = PopIni + PopIni * (percGrowth\/100)\n    Pred_pop_size2.append(PopIni)\n    \n#blue one\nPopIni = World[\"Population_2019\"].values[0]\nPred_pop_size3 = []\nfor percGrowth in pred3: \n    PopIni = PopIni + PopIni * (percGrowth\/100)\n    Pred_pop_size3.append(PopIni)","8954577a":"#Set a figure \nfig = plt.figure(figsize=[20,12])\nplt.xlabel(\"Year\",fontsize=15,fontweight=550,labelpad=15)\nplt.ylabel(\"Population in 10 billions\",fontsize=15,fontweight=550,labelpad=15)\nplt.title(\"Evolution and Prediction of the population size from 1961 to 2061\",fontsize=20,fontweight=600)\n\nplt.plot([2020 + i for i in range(41)],Pred_pop_size1,linewidth=3,label=\"Prediction 1\",color = \"#ff7823\")\nplt.plot([2020 + i for i in range(41)],Pred_pop_size2,linewidth=3,label=\"Prediction 2\",color = \"#3c763d\")\nplt.plot([2020 + i for i in range(41)],Pred_pop_size3,linewidth=3,label=\"Prediction 3 \",color = \"c\")\nplt.plot([int(item[-4:]) for item in World.columns[61:].tolist()],World[World.columns[61:]].values[0],linewidth=3,label=\"Evolution of the population\",color = \"#0A014F\")\nplt.vlines(2019, 3000000000, 11000000000, linestyle='--', color='r', label='Start of forecast');\n\nplt.vlines(2050, 3000000000, 11000000000, linestyle='--', color='b', label='2050');\nplt.legend(fontsize=18,loc=4)","68f44a22":"# 3) India vs China ","bf6b2366":"**The second set of data tells us about the income group of each country as well as the region around the world.**  \n**Thanks to the country code, we will be able to join these data to the main dataset if we need it.**","224c2cc5":"## Autoregression (AR)  \nAutoregressive modeling is training a regression model on the value of response variable itself.  \nAutoregressive is made of the word, Auto and Regressive which represents the linear regression on itself (auto).  \nIn context of time-series forecasting, autoregressive modeling will mean creating the model where the response variable Y will depend upon the previous values of Y at a pre-determined constant time lag. The time lag can be daily (or 2, 3, 4\u2026 days), weekly, monthly etc.  \nsource \ud83c\udf10 : https:\/\/vitalflux.com\/autoregressive-ar-models-with-python-examples\/","d9339c49":"**The population gap between China and India is narrowing. \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66**  \n**This is mainly due to the % growth curve falling much more on the Chinese side than on the Indian side.**  \n**It is not long before India overtakes China in total population. \ud83e\udd47**  \n**Another element to highlight this phenomenon is the time when the % growth rate has fallen below the world average.** ","30a587d5":"**Now that we are well advanced on the subject, we can now try to predict what might happen in 20, 30 or even 50 years.**  \n**We are going to use different forecasting methods on the global population, taking into account % growth and the world population.**\n\n**Before that, we will convert the data into TimeSeries!** ","294ecca0":"# 2) Growth Evolution arround the World ","05b7bb0f":"**Despite a declining percentage of growth, the number of people on Earth is increasing. \u2197**  \n**Currently we are: 7.674 Billion \ud83d\udc65**  \n\n**Let's see now according to the regions \ud83c\udf0e\ud83c\udf0d\ud83c\udf0f !**  \n**I start by grouping the countries into regions using the \"groupby\" function and calculating their average.** \n## By regions","9d92ffec":"# 1) Data prepation ","be005d7c":"**Now that our dataset is ready, we can start by observing the evolution of the last 60 years at the level of the regions of the world but also in its totality.**  \n**We will compare both the Population in quantity and the evolution in percentage.**","f5e524c6":"**From now, the cases seem to be isolated, so one can claim that one NaN means a 0% increase compared to the previous year. That is, an identical population.**","11afe214":"**In order to know the evolution of the population of each selected countries, we multiply the population of the previous year with the growth percentage of the current year to calculate the population growth.**\n\n**\u2757 Warning \u2757: You have to be careful to round the result to avoid having partial humans...** \n\n**\u2757 Warning 2 \u2757: The results are not 100% accurate but are still usable for our analysis.**","f47cc8a7":"**The first dataset contains the country code and name and one column for each year (from 1960 to 2020)**","cfb41cb4":"![](https:\/\/images.unsplash.com\/photo-1526470608268-f674ce90ebd4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1934&q=80)","b4b309f8":"**A beautiful line is then predicted with more than 10 billion people on Earth by 2050.**","4417a479":"**Thank you for following this notebook! \ud83d\udcd3**  \n**If you want to give me some advices, don't hesitate! \ud83d\ude4f**  \n**We are here to learn \u26a1**\n\n## Baptiste ","02f420c1":"**With this method, we find also a result between 10 and 10.5 billions people by 2050 !!**  \n**We will then be forced to optimise our land and resources**  \n**An other challenge for data scientist ! \ud83d\udcde**","c01c43c8":"**So if we only use the countries that have data for their population size, we already lose 75 of them.**  \n**We can also see that we have a line : \"World\"!**  \n**Quite interesting, so we will remove it from the data set.**","e26c297d":"**For each of these regions, one country has more than one billion inhabitants at present.**  \n**China and India, often referred to as the massive population places.**","37943bc1":"# Population Growth Evolution and prediction ! \ud83c\udf0d ","a46eb474":"## ADD Population size with web scrapping","bd7cb02a":"**There are still NaN values, but by removing the countries with missing values from the year 1961, we end up with a cleaner dataset**","112513e8":"## Exponential smoothing","a4770cfd":"**With the exception of the Sub-Saharan Africa region, which increased slightly, all regions saw their growth decrease between 0.65 and 2.2%.**  \n\n**This is good news, right? \ud83d\udc4d**","4b9e2429":"Essayons de regarder les \"mastodontes\" de ces deux regions","54905adc":"**Finally, we just add the regions to our dataset and we are ready to start the analysis. \u2705** ","fa46ddcf":"------------------------","5d34e4f3":"**In order to compare our result with an another method, we are going to use Exponential smoothing for prediction**  \n\n**For our Exponential smoothing, we will use Holt's linear smoothing because our data have a downward trend and no seasonality!**","db0f70d7":"**The % growth tells us how much a population has increased in comparison to the previous year.**  \n**However, our dataset does not provide any information on the size of a population.**  \n**In order to flesh out our data, I went to look up the population of many countries in 1961 on the site \ud83c\udf10 :** https:\/\/www.bluemarblecitizen.com\/world-population\/1961  \n\n**With a bit of webscrapping, it is quite easy to bring out the data presented in the table in table form.**","0d850a04":"#### This quick notebook about populatin growth is divided in 4 parts :  \n- **Data prepartion + Web scrapping** \ud83d\udce5\n- **Global population growth analysis in the world's regions** \ud83d\udd0d\n- **Specific case China vs India** \ud83c\udf0f\n- **Prediction of the world population for the next years** \ud83d\udcc9","fbce9a2c":"# 4) Forecasting world % growth for next years","11f7fad5":"**The graph above shows that China's % growth fell below the world average in 1975. \ud83d\udcc6**  \n**In contrast, India's growth rate rose above the world average in 1969 and remained above it for more than 35 years (until 2005).**  \n\n**This highlights the significant population growth that India has undergone in recent years, and which risks becoming the most populous country in the world.**  \n**An important factor is the one-child policy, or Planned Parenthood policy, the public birth control policy implemented by the People's Republic of China from 1979 to 2015. \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67**  \n\n**This reinforces the fall in the % growth over this period.**"}}