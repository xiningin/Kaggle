{"cell_type":{"6397cd3d":"code","59b4133b":"code","96f8d262":"code","bc20f24f":"code","4e98b092":"code","b82ca9fb":"code","22930ad8":"code","c8258aff":"code","1687c850":"code","9a126437":"code","aa4ceb35":"code","b193c81d":"code","82191337":"code","f0a3ddfa":"code","495f226c":"code","be1deb3b":"code","5f9e6957":"code","08dc6f0d":"code","3bf0c813":"code","ee665a1b":"code","33d7352b":"code","558e6f97":"code","8e54cb77":"code","7a5a9f44":"code","160a7b32":"code","ec7b029a":"code","bbc74a05":"code","05dd6336":"code","37847bde":"code","0e86a25b":"code","b152f6e0":"code","0e50bcd5":"code","31a2c6c9":"code","0ac925f0":"code","c20e1739":"code","f56bc21e":"code","43580ccb":"code","7b8cdbc7":"code","d90da668":"code","8fdaabea":"markdown"},"source":{"6397cd3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","59b4133b":"# credit to @guiferviz for the memory reduction \ndef memory_usage_mb(df, *args, **kwargs):\n    \"\"\"Dataframe memory usage in MB. \"\"\"\n    return df.memory_usage(*args, **kwargs).sum() \/ 1024**2\n\ndef reduce_memory_usage(df, deep=True, verbose=True):\n    # All types that we want to change for \"lighter\" ones.\n    # int8 and float16 are not include because we cannot reduce\n    # those data types.\n    # float32 is not include because float16 has too low precision.\n    numeric2reduce = [\"int16\", \"int32\", \"int64\", \"float64\"]\n    start_mem = 0\n    if verbose:\n        start_mem = memory_usage_mb(df, deep=deep)\n\n    for col, col_type in df.dtypes.iteritems():\n        best_type = None\n        if col_type in numeric2reduce:\n            downcast = \"integer\" if \"int\" in str(col_type) else \"float\"\n            df[col] = pd.to_numeric(df[col], downcast=downcast)\n            best_type = df[col].dtype.name\n        # Log the conversion performed.\n        if verbose and best_type is not None and best_type != str(col_type):\n            print(f\"Column '{col}' converted from {col_type} to {best_type}\")\n\n    if verbose:\n        end_mem = memory_usage_mb(df, deep=deep)\n        diff_mem = start_mem - end_mem\n        percent_mem = 100 * diff_mem \/ start_mem\n        print(f\"Memory usage decreased from\"\n              f\" {start_mem:.2f}MB to {end_mem:.2f}MB\"\n              f\" ({diff_mem:.2f}MB, {percent_mem:.2f}% reduction)\")\n        \n    return df","96f8d262":"train_identity = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv\")\ntrain_transaction = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv\")\n# train_full=train_transaction","bc20f24f":"# categorical = train_full[train_full.select_dtypes(include=['object']).columns]\n# train_full = train_full.drop(train_full.select_dtypes(include=['object']).columns, axis=1)\n# train_full.shape","4e98b092":"# corr = train_full.corr()","b82ca9fb":"train_full = train_identity.merge(train_transaction, how='outer')\n# train_full = train_full.fillna(0)\ndel train_identity\ndel train_transaction","22930ad8":"test_identity = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv\")\ntest_transaction = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv\")\n# test_full = test_transaction\ntest_full = test_identity.merge(test_transaction, how='outer')\n# test_full = test_full.fillna(0)\ndel test_identity\ndel test_transaction","c8258aff":"train_full.shape, test_full.shape","1687c850":"labels = train_full[\"isFraud\"]\ntrain_full = train_full.drop([\"isFraud\"], axis=1)","9a126437":"# cor = train_full.corr()","aa4ceb35":"# cor[(cor<0.5) & (cor>-0.5)]","b193c81d":"categorical = train_full[train_full.select_dtypes(include=['object']).columns]\none_hot_train = pd.get_dummies(categorical)","82191337":"categorical = test_full[test_full.select_dtypes(include=['object']).columns]\none_hot_test = pd.get_dummies(categorical)","f0a3ddfa":"del categorical\none_hot_train.shape, one_hot_test.shape","495f226c":"train_full = train_full.drop(train_full.select_dtypes(include=['object']).columns, axis=1)\ntest_full = test_full.drop(test_full.select_dtypes(include=['object']).columns, axis=1)","be1deb3b":"# cols_nan = train_full.isna().sum()\n# columns =  cols_nan[((cols_nan\/train_full.shape[0])<0.50)]\n# train_full = train_full[columns.index]\n# test_full = test_full[columns.index]\n\ntrain_full = train_full.iloc[:,0:200]\ntest_full = test_full.iloc[:,0:200]\n# train_full = train_full\n# test_full = test_full","5f9e6957":"train_full = train_full.fillna(-1000)\ntest_full = test_full.fillna(-1000)","08dc6f0d":"# from sklearn import preprocessing\n# # normalized_X = preprocessing.normalize(train_full)\n# # normalized_df=(train_full-train_full.mean())\/train_full.std()\nID = test_full[\"TransactionID\"]\n# train_full = (train_full-train_full.min())\/(train_full.max()-train_full.min())\n# test_full = (test_full-test_full.min())\/(test_full.max()-test_full.min())","3bf0c813":"train_full = reduce_memory_usage(train_full, deep=True, verbose=True)\ntest_full = reduce_memory_usage(test_full, deep=True, verbose=True)","ee665a1b":"one_hot_train, one_hot_test = one_hot_train.align(one_hot_test, join='inner', axis=1)\ntest_full = test_full.drop(test_full.select_dtypes(include=['object']).columns, axis=1)\nprint (test_full.shape)\ntest_full = pd.concat([test_full, one_hot_test], axis=1)\nprint (test_full.shape)\ntrain_full = pd.concat([train_full, one_hot_train], axis=1)\ndel one_hot_train\ndel one_hot_test","33d7352b":"# train_full = train_full.drop(train_full.select_dtypes(include=['object']).columns, axis=1)\n# train_full = pd.concat([train_full, one_hot_train], axis=1)","558e6f97":"train_full.shape, test_full.shape","8e54cb77":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=500, random_state=1)\n\nclf.fit(train_full[:100000], labels[:100000])\nprint (1)\nclf.fit(train_full[100001:200000], labels[100001:200000])\nprint (2)\nclf.fit(train_full[200001:300000], labels[200001:300000])\nprint (3)\nclf.fit(train_full[300001:400000], labels[300001:400000])\nprint (4)\nclf.fit(train_full[400001:500000], labels[400001:500000])\nprint (5)\nclf.fit(train_full[500001:], labels[500001:])\nprint (6)","7a5a9f44":"del train_full\ndel labels","160a7b32":"# test_identity = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv\")\n# test_transaction = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv\")\n\n# test_full = test_identity.merge(test_transaction, how='outer')\n# test_full = test_full.fillna(0)\n# del test_identity\n# del test_transaction","ec7b029a":"# categorical = test_full[test_full.select_dtypes(include=['object']).columns]\n# one_hot_test = pd.get_dummies(categorical)\n# print (one_hot_test.shape)\n# one_hot_train, one_hot_test = one_hot_train.align(one_hot_test, join='inner', axis=1)\n# test_full = test_full.drop(test_full.select_dtypes(include=['object']).columns, axis=1)\n# print (test_full.shape)\n# test_full = pd.concat([test_full, one_hot_test], axis=1)\n# print (test_full.shape)\n# # test_full = test_full.fillna(0)","bbc74a05":"# test_full.isna().sum()>0\ntest_full = test_full.fillna(-1000)","05dd6336":"a = test_full[:100000]\nb = test_full[100000:200000]\nc = test_full[200000:300000]\nd = test_full[300000:400000]\ne = test_full[400000:500000]\nf = test_full[500000:]\n# del test_full","37847bde":"a = clf.predict_proba(a)","0e86a25b":"b = clf.predict_proba(b)","b152f6e0":"c = clf.predict_proba(c)","0e50bcd5":"d = clf.predict_proba(d)","31a2c6c9":"e = clf.predict_proba(e)","0ac925f0":"f = clf.predict_proba(f)","c20e1739":"# a = clf.predict_proba(test_full[:100000])\n# b = clf.predict_proba(test_full[100000:200000])\n# c = clf.predict_proba(test_full[20000:300000])\n# d = clf.predict_proba(test_full[30000:400000])\n# e = clf.predict_proba(test_full[40000:500000])\n# f = clf.predict_proba(test_full[50000:])\npred = np.concatenate([a,b,c,d,e,f])\ndel a\ndel b\ndel c\ndel d\ndel e\ndel f","f56bc21e":"# test_identity = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv\")\n# test_transaction = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv\")\n# test_full = test_transaction\n# test_full = test_identity.merge(test_transaction, how='outer')\n# test_full = test_full.fillna(0)\n# del test_identity\n# del test_transaction","43580ccb":"p = pred[:,1]\n# pred = pd.DataFrame(test_full[\"TransactionID\"])\npred = pd.DataFrame(ID)\npred[\"isFraud\"] = p","7b8cdbc7":"pred.to_csv('submission.csv', index=False)","d90da668":"# import the modules we'll need\nfrom IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n#     print (HTML(html))\n    \n    return HTML(html)\n\n# create a random sample dataframe\ndf = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n\n# create a link to download the dataframe\ncreate_download_link(pred)","8fdaabea":"<a href=\".\/submission.csv\"> Download File <\/a>"}}