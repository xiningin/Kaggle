{"cell_type":{"aad0efef":"code","b1a4eb56":"code","2a391fca":"code","79fe6175":"code","effe315f":"code","3fde4ebb":"code","5524e6ab":"code","a239088b":"markdown","1705c233":"markdown","37849470":"markdown","7896e619":"markdown","f62f012e":"markdown"},"source":{"aad0efef":"import numpy as np \nimport pandas as pd\nfrom sklearn import *\nimport lightgbm as lgb\n\ntrain = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')\ntrain.shape, test.shape","b1a4eb56":"def features(df):\n    df = df.sort_values(by=['time']).reset_index(drop=True)\n    df.index = ((df.time * 10_000) - 1).values\n    df['batch'] = df.index \/\/ 50_000\n    df['batch_index'] = df.index  - (df.batch * 50_000)\n    df['batch_slices'] = df['batch_index']  \/\/ 5_000\n    df['batch_slices2'] = df.apply(lambda r: '_'.join([str(r['batch']).zfill(3), str(r['batch_slices']).zfill(3)]), axis=1)\n    \n    for c in ['batch','batch_slices2']:\n        d = {}\n        d['mean'+c] = df.groupby([c])['signal'].mean()\n        d['median'+c] = df.groupby([c])['signal'].median()\n        d['max'+c] = df.groupby([c])['signal'].max()\n        d['min'+c] = df.groupby([c])['signal'].min()\n        d['std'+c] = df.groupby([c])['signal'].std()\n        d['mean_abs_chg'+c] = df.groupby([c])['signal'].apply(lambda x: np.mean(np.abs(np.diff(x))))\n        d['abs_max'+c] = df.groupby([c])['signal'].apply(lambda x: np.max(np.abs(x)))\n        d['abs_min'+c] = df.groupby([c])['signal'].apply(lambda x: np.min(np.abs(x)))\n        for v in d:\n            df[v] = df[c].map(d[v].to_dict())\n        df['range'+c] = df['max'+c] - df['min'+c]\n        df['maxtomin'+c] = df['max'+c] \/ df['min'+c]\n        df['abs_avg'+c] = (df['abs_min'+c] + df['abs_max'+c]) \/ 2\n    \n    #add shifts\n    df['signal_shift_+1'] = [0,] + list(df['signal'].values[:-1])\n    df['signal_shift_-1'] = list(df['signal'].values[1:]) + [0]\n    for i in df[df['batch_index']==0].index:\n        df['signal_shift_+1'][i] = np.nan\n    for i in df[df['batch_index']==49999].index:\n        df['signal_shift_-1'][i] = np.nan\n\n    for c in [c1 for c1 in df.columns if c1 not in ['time', 'signal', 'open_channels', 'batch', 'batch_index', 'batch_slices', 'batch_slices2']]:\n        df[c+'_msignal'] = df[c] - df['signal']\n        \n    return df\n\ntrain = features(train)\ntest = features(test)","2a391fca":"col = [c for c in train.columns if c not in ['time', 'open_channels', 'batch', 'batch_index', 'batch_slices', 'batch_slices2']]\nx1, x2, y1, y2 = model_selection.train_test_split(train[col], train['open_channels'], test_size=0.3, random_state=7)\ndel train\n\n","79fe6175":"def lgb_Metric(preds, dtrain):\n    labels = dtrain.get_label()\n    preds = np.round(np.clip(preds, 0, 10)).astype(int)\n    score = metrics.cohen_kappa_score(labels, preds, weights = 'quadratic')\n    return ('KaggleMetric', score, True)\n \nparams = {'learning_rate': 0.8, 'max_depth': 7, 'num_leaves':2**7+1, 'metric': 'rmse', 'random_state': 7, 'n_jobs':-1} \nmodel = lgb.train(params, lgb.Dataset(x1, y1), 2000,  lgb.Dataset(x2, y2), verbose_eval=50, early_stopping_rounds=50, feval=lgb_Metric)\npreds = model.predict(test[col], num_iteration=model.best_iteration)\ntest['open_channels'] = np.round(np.clip(preds, 0, 10)).astype(int)\n\ntest[['time','open_channels']].to_csv('submission_ligth.csv', index=False, float_format='%.4f')","effe315f":"lgb.plot_importance(model,importance_type='split', max_num_features=20)","3fde4ebb":"from catboost import Pool,CatBoostRegressor\n\n# Initialize CatBoostRegressor\nmodel = CatBoostRegressor(task_type = \"CPU\",\n                          iterations=1000,\n                          learning_rate=0.1,\n                          random_seed = 42,\n                          depth=2,\n                         )\n# Fit model\nmodel.fit(x1, y1)\n# Get predictions\npreds_catb = model.predict(test[col])\ntest['open_channels'] = np.round(np.clip(preds_catb, 0, 10)).astype(int)\ntest[['time','open_channels']].to_csv('submission_cat3.csv', index=False, float_format='%.4f')","5524e6ab":"preds_comb = 0.75 * preds + 0.25 * preds_catb\ntest['open_channels'] = np.round(np.clip(preds_comb, 0, 10)).astype(int)\ntest[['time','open_channels']].to_csv('submission_comb.csv', index=False, float_format='%.4f')\n","a239088b":"\n![liverpol](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/18045\/logos\/thumb76_76.png?t=2020-02-21-18-37-27)\n\nIf you like this notebook please let here your upvote!\n\n### Install libraries and load the Data","1705c233":"### Create features for train and test","37849470":"### CatBoost model","7896e619":"### Ensemble predictions","f62f012e":"### Light GBM model"}}