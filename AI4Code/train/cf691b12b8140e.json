{"cell_type":{"5c937d1f":"code","f994dc5a":"code","87929534":"code","b121218a":"code","6a2d35d7":"code","fca25556":"code","8dcce806":"code","48ff500a":"code","0929b69a":"code","3da69b0b":"code","a31628ec":"code","71ed1888":"code","683684c3":"code","38303482":"code","21e3deed":"code","20463fe1":"code","c25c22d3":"code","475de22e":"code","cff7c6f4":"code","efe4b981":"code","e67aa4ff":"code","2ff2081d":"code","b6cc6ded":"code","84e91daf":"code","fe3bd36a":"code","9f027c81":"code","3dce9ee6":"code","f0b3f642":"code","c515fd55":"code","14253df3":"code","615f48a7":"code","7e963f15":"code","e9bf613b":"code","02f4092e":"code","99cc84ca":"code","9cf51400":"code","1c17a80d":"code","6bc450e2":"code","fb991eef":"code","4befcfc7":"code","4b4e342d":"code","61f03385":"code","e88d2b51":"markdown","c7cfc5c0":"markdown"},"source":{"5c937d1f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f994dc5a":"from fastai import *\nfrom fastai.vision import *\nfrom fastai.tabular import *","87929534":"path = Path('..\/input\/petfinder-adoption-prediction')","b121218a":"path_train_img = path\/'train_images';\npath_test_img = path\/'test_images';\npath_train = path\/'train';\npath_test = path\/'test'; \npath_train_sentiment = path\/'train_sentiment';\npath_test_sentiment = path\/'test_sentiment';\npath_train.ls(), path_test.ls()","6a2d35d7":"df_train = pd.read_csv(path_train\/'train.csv')\ndf_train.shape","fca25556":"df_test = pd.read_csv(path_test\/'test.csv')\ndf_test.shape","8dcce806":"import json\nfrom pprint import pprint\n\ntuplist = []\nfor filename in os.listdir(path_train_sentiment):\n    if filename.endswith(\".json\"):\n      with open(path_train_sentiment\/filename) as f:\n        data = json.load(f)\n        tuplist.append( (filename[:-5], data['documentSentiment']['magnitude'], data['documentSentiment']['score']) )\n\ntuplist[0]","48ff500a":"df_sent = pd.DataFrame(tuplist, columns=['PetID', 'magnitude', 'score'])\ndf_sent.head()","0929b69a":"df_train_sent = pd.merge(df_train, df_sent, how='left', on='PetID')\ndf_train_sent.shape","3da69b0b":"df_train_sent.head()","a31628ec":"# Add in Description Length Column\nalist = []\nfor i in range(len(df_train_sent)):\n    alist.append(len(str(df_train_sent.iloc[i]['Description'])))\n# Create a column from the list\ndf_train_sent['desc_len'] = alist\ndf_train_sent.head()","71ed1888":"import pprint as pp\nwith open(path\/'train_metadata'\/'000fb9572-6.json') as f:\n    data = json.load(f)\n    x = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['x']\n    y = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['y']\n    string = '000fb9572-6.json'\n    a = string.find('-')\n    print(string[:string.find('-')])\n#     pp.pprint(data)\n#     pp.pprint(x)\n#     pp.pprint(y)","683684c3":"# get train image metadata\npath_train_img_meta = path\/'train_metadata'\n\ntuplist = []\nfor filename in os.listdir(path_train_img_meta):\n    if filename.endswith(\".json\"):\n      with open(path_train_img_meta\/filename) as f:\n        data = json.load(f)\n        x = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['x']\n        y = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['y']        \n        tuplist.append( (filename[:filename.find('-')], x, y) )\n\ntuplist[0]","38303482":"df_meta = pd.DataFrame(tuplist, columns=['PetID', 'vert_x', 'vert_y'])\ndf_meta.head()","21e3deed":"# aggregate training data\ngrouped1 = df_meta.groupby('PetID',as_index=False)['vert_x', 'vert_y'].agg({'vert_min':'min', 'vert_max':'max', \n                                                                               'vert_mean':'mean'})\n\ngrouped1.head()","20463fe1":"grouped1.columns = ['PetID','PetID1','vert_x_min','vert_y_min','PetID2','vert_x_max','vert_y_max','PetID3','vert_x_mean','vert_y_mean']\ngrouped1['vert_x_mean'] = grouped1['vert_x_mean'].apply(lambda x: int(round(x)))\ngrouped1['vert_y_mean'] = grouped1['vert_y_mean'].apply(lambda x: int(round(x)))\ngrouped1 = grouped1[['PetID','vert_x_mean','vert_y_mean']]\ngrouped1.head()","c25c22d3":"grouped1.shape","475de22e":"df_train_meta = pd.merge(df_train_sent, grouped1, how='left', on='PetID')\ndf_train_meta.shape","cff7c6f4":"df_train_meta.head()","efe4b981":"# for test data\nimport json\nfrom pprint import pprint\n\ntuplist = []\nfor filename in os.listdir(path_test_sentiment):\n    if filename.endswith(\".json\"):\n      with open(path_test_sentiment\/filename) as f:\n        data = json.load(f)\n        tuplist.append( (filename[:-5], data['documentSentiment']['magnitude'], data['documentSentiment']['score']) )\n\ntuplist[0]","e67aa4ff":"df_sent = pd.DataFrame(tuplist, columns=['PetID', 'magnitude', 'score'])\ndf_sent.head()","2ff2081d":"df_test_sent = pd.merge(df_test, df_sent, how='left', on='PetID')\ndf_test_sent.shape","b6cc6ded":"alist = []\nfor i in range(len(df_test_sent)):\n    alist.append(len(str(df_test_sent.iloc[i]['Description'])))\n# Create a column from the list\ndf_test_sent['desc_len'] = alist\ndf_test_sent.head()","84e91daf":"# get test image metadata\npath_test_img_meta = path\/'test_metadata'\n\ntuplist = []\nfor filename in os.listdir(path_test_img_meta):\n    if filename.endswith(\".json\"):\n      with open(path_test_img_meta\/filename) as f:\n        data = json.load(f)\n        x = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['x']\n        y = data['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices'][2]['y']        \n        tuplist.append( (filename[:filename.find('-')], x, y) )\n\ntuplist[0]","fe3bd36a":"df_test_meta = pd.DataFrame(tuplist, columns=['PetID', 'vert_x', 'vert_y'])\ndf_test_meta.head()","9f027c81":"# aggregate test image metadata\ngrouped1 = df_test_meta.groupby('PetID',as_index=False)['vert_x', 'vert_y'].agg({'vert_min':'min', 'vert_max':'max', \n                                                                               'vert_mean':'mean'})\ngrouped1.head()","3dce9ee6":"grouped1.columns = ['PetID','PetID1','vert_x_min','vert_y_min','PetID2','vert_x_max','vert_y_max','PetID3','vert_x_mean','vert_y_mean']\ngrouped1 = grouped1[['PetID','vert_x_min','vert_y_min','vert_x_max','vert_y_max','vert_x_mean','vert_y_mean']]\ngrouped1.head()","f0b3f642":"df_test_meta = pd.merge(df_test_sent, grouped1, how='left', on='PetID')\ndf_test_meta.shape","c515fd55":"# list(df_train_meta.columns.values)\n# for col in df_train_meta:\n#     print( col, \": \", len(df_train_meta[col].unique()) )","14253df3":"dep_var = 'AdoptionSpeed'\ncat_names = ['Type', 'Breed1', 'Breed2', 'Gender', 'Color1', 'Color2', 'Color3',\n             'MaturitySize', 'FurLength', 'Vaccinated', 'Dewormed', 'Sterilized', 'Health', 'Quantity', \n             'State', 'VideoAmt', 'PhotoAmt'] \ncont_names = ['Age', 'Fee', 'magnitude', 'score', 'desc_len', 'vert_x_mean', 'vert_y_mean']\nprocs = [FillMissing, Categorify, Normalize]","615f48a7":"data = (TabularList.from_df(df_train_meta, path='.', cat_names=cat_names, cont_names=cont_names, procs=procs)\n                           .random_split_by_pct(0.2, seed=2)\n                           .label_from_df(cols=dep_var)\n                          .add_test(TabularList.from_df(df_test_meta, path='.', cat_names=cat_names, cont_names=cont_names, procs=procs))\n                           .databunch())","7e963f15":"data.show_batch(rows=10)","e9bf613b":"kappa = KappaScore()\nkappa.weights = \"quadratic\"","02f4092e":"learn = tabular_learner(data, layers=[1000, 500], ps=[0.001,0.01], emb_drop=0.1, metrics=[accuracy, kappa])","99cc84ca":"learn.fit_one_cycle(5, 1e-2)","9cf51400":"learn.recorder.plot_losses(last=-1)","1c17a80d":"learn.lr_find()","6bc450e2":"learn.recorder.plot()","fb991eef":"learn.fit_one_cycle(3, 1e-3)","4befcfc7":"# get predictions for test data\ntest_preds=learn.get_preds(DatasetType.Test)","4b4e342d":"df_test_meta[\"AdoptionSpeed\"] = test_preds[0].argmax(dim=1)\nresult = df_test_meta[[\"PetID\",\"AdoptionSpeed\"]]\nresult.head()","61f03385":"result.to_csv(\"submission.csv\", index=False)","e88d2b51":"**Using Fastai Tabular**","c7cfc5c0":"**My Code**"}}