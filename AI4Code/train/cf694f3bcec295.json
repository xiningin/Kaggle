{"cell_type":{"1dff8024":"code","d80b4304":"code","713e80bf":"code","a0002553":"code","ac8994fb":"code","51dd9662":"code","c36e0fc1":"code","de89853b":"code","82ed15b4":"code","dc2f699d":"code","fb79293e":"code","f5c15b7d":"code","237377a1":"code","fa671efb":"code","cce2ae84":"code","f0bdc64b":"code","5e86426e":"code","121c30ff":"code","68ec5424":"code","711d1f32":"code","d92133e7":"code","6bcd9411":"code","c8288521":"code","1d9bb01e":"code","25952706":"code","a6451306":"code","4a1e6e4d":"code","8c5e8a37":"code","75fd9204":"code","6ac9e546":"code","10f03bae":"code","bc9b316c":"code","79cbe9a7":"code","93f88ea1":"code","8521eb58":"code","b3cecaca":"code","066e483c":"code","7274c1be":"code","5d3ff9e1":"code","ee88be90":"code","343c7b97":"code","360f602c":"markdown","b4b44494":"markdown","e799b69d":"markdown","67f1202a":"markdown","7dbfd601":"markdown"},"source":{"1dff8024":"!pip install ez-ml","d80b4304":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","713e80bf":"import pandas as pd \nimport plotly.express as px\nimport numpy as np \nimport pandas as pd \nfrom ezml import preprocessing , interpreting\nimport os\nimport warnings \nfrom fbprophet import Prophet\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings('ignore')","a0002553":"env_vars = pd.read_csv('\/kaggle\/input\/environmental-variables-for-world-countries\/World_countries_env_vars.csv').set_index('Country')\nindexes = pd.read_csv('\/kaggle\/input\/65-world-indexes-gathered\/Kaggle.csv').set_index('Id')\nhappiness_alcool = pd.read_csv('\/kaggle\/input\/happiness-and-alcohol-consumption\/HappinessAlcoholConsumption.csv').set_index('Country')\nresult = pd.concat([env_vars, indexes,happiness_alcool], axis=1, join='inner')","ac8994fb":"_ = preprocessing.missing_values(result,plot=True)","51dd9662":"result.drop(['slope','aspect','elevation'],axis=1,inplace=True)\n_ = preprocessing.missing_values(result,plot=True)","c36e0fc1":"cleaned_data = pd.read_csv(\"\/kaggle\/input\/hemzacsv\/covid_19_clean_complete.csv\",parse_dates=['Date'])\ndf_original = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_original.loc[df_original['Province\/State'].isnull(),'Province\/State'] = df_original['Country\/Region']","de89853b":"coords = pd.read_csv(\"\/kaggle\/input\/hemzacsv\/covid_19_clean_complete.csv\")","82ed15b4":"corona_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ncorona_df['Country\/Region'].replace(['Mainland China'], 'China',inplace=True)\ncorona_df['Country\/Region'].replace(['US'], 'United States',inplace=True)\ncorona_df['Country'] = corona_df['Country\/Region']","dc2f699d":"a = corona_df.groupby(['Country','ObservationDate']).agg({\n    'Confirmed':sum,\n    'Deaths':sum,\n    'Recovered':sum\n}).reset_index()","fb79293e":"a['Moratality'] = ((a['Deaths'] \/ a['Confirmed']) *1000).fillna(0)\na['RecoveryRate'] = ((a['Recovered'] \/ a['Confirmed']) *1000).fillna(0)\nlatest_mars = a[a['ObservationDate'] == '03\/23\/2020']\njour_avant = a[a['ObservationDate'] == '03\/22\/2020']","f5c15b7d":"df = pd.concat([result,latest_mars.set_index('Country') ], axis=1, join='inner')","237377a1":"df = df.reset_index().drop('index',axis=1)","fa671efb":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['Region'] = le.fit_transform(df['Region'])\nle1 = LabelEncoder()\ndf['Hemisphere'] = le1.fit_transform(df['Hemisphere'])\n","cce2ae84":"final_date = '3\/20\/20'\ncoords_final = coords[coords.Date == final_date]\ndf_deaths = pd.DataFrame(coords_final.groupby('Country\/Region')['Deaths'].sum())\ndf_confirmed = pd.DataFrame(coords_final.groupby('Country\/Region')['Confirmed'].sum())\ndf_recovered = pd.DataFrame(coords_final.groupby('Country\/Region')['Recovered'].sum())\ndf_confirmed['Deaths'] = df_deaths['Deaths']\ndf_confirmed['Recovered'] = df_recovered['Recovered']\ndf_global = df_confirmed\ndf_global['Mortality Rate'] = np.round((df_global.Deaths.values\/df_global.Confirmed.values)*100,2)\ndf_global['Ratio_Death_recovered'] = df_global.Deaths.values\/df_global.Recovered.values\ndf_global.Ratio_Death_recovered = df_global.Ratio_Death_recovered.replace(np.inf,1)\ndf_global.Ratio_Death_recovered = df_global.Ratio_Death_recovered.fillna(0)\ndf_global = df_global.reset_index()\ncorr = df_global.corr()\ncorr.style.background_gradient(cmap='coolwarm')","f0bdc64b":"plt.scatter(df_global.Deaths,df_global.Recovered)\nplt.xlabel('Deaths')\nplt.ylabel('Recovered')\nplt.show()","5e86426e":"grouped = cleaned_data.groupby('Date')['Date', 'Confirmed', 'Deaths'].sum().reset_index()\n\nfig = px.line(grouped, x=\"Date\", y=\"Confirmed\", \n              title=\"Total confirmed cases\")\nfig.show()","121c30ff":"fig = px.line(grouped, x=\"Date\", y=\"Deaths\", title=\"Mortality evolution\",\n             color_discrete_sequence=['#F42272'])\nfig.show()","68ec5424":"temp = cleaned_data[[col for col in cleaned_data.columns if col != 'state']]\nlatest = temp[temp['Date'] == max(temp['Date'])].reset_index()\nlatest_grouped=latest.groupby('Country\/Region')['Confirmed','Deaths'].sum().reset_index()","711d1f32":"fig = px.choropleth(latest_grouped, locations=\"Country\/Region\", \n                    locationmode='country names', color=\"Deaths\", \n                    hover_name=\"Deaths\", range_color=[1,100], \n                    color_continuous_scale=\"peach\", \n                    title='Deaths per countries')\n\nfig.show()","d92133e7":"fig = px.bar(latest_grouped.sort_values('Deaths', ascending=False)[:10][::-1], \n             x='Deaths', y='Country\/Region',\n             title='Nombre des d\u00e9ces', text='Deaths', orientation='h')\nfig.show()","6bcd9411":"formated_gdf = cleaned_data.groupby(['Date', 'Country\/Region'])['Confirmed', 'Deaths'].max()\nformated_gdf = formated_gdf.reset_index()\nformated_gdf['Date'] = pd.to_datetime(formated_gdf['Date'])\nformated_gdf['Date'] = formated_gdf['Date'].dt.strftime('%m\/%d\/%Y')\nformated_gdf['size'] = formated_gdf['Deaths'].pow(0.3)\n\nfig = px.scatter_geo(formated_gdf, locations=\"Country\/Region\", locationmode='country names', \n                     color=\"Deaths\", size='size', hover_name=\"Country\/Region\", \n                     range_color= [0, 100], \n                     projection=\"natural earth\", animation_frame=\"Date\", \n                     title='Death Evolution since it all started', color_continuous_scale=\"thermal\")\n# fig.update(layout_coloraxis_showscale=False)\nfig.show()","c8288521":"fig = px.choropleth(latest_mars, \n                    locations=\"Country\", \n                    color=\"Moratality\", \n                    locationmode = 'country names', \n                    hover_name=\"Country\",\n                    range_color=[0,100],\n                    title='Global COVID-19 Moratality rate for the 03\/23\/2020 Per 1000')\nfig.show()","1d9bb01e":"fig = px.choropleth(df_global, \n                    locations=\"Country\/Region\", \n                    color=\"Ratio_Death_recovered\", \n                    locationmode = 'country names', \n                    hover_name=\"Country\/Region\",\n                    range_color=[0,1],\n                    title='Global COVID-19 Ratio_Death_recovered as of '+final_date)\nfig.show()","25952706":"y = df['Moratality']\nX = df.drop(['ObservationDate', 'Confirmed', 'Deaths', 'Recovered',\n       'Moratality', 'RecoveryRate'] ,axis=1)","a6451306":"from catboost import CatBoostRegressor\ncbr = CatBoostRegressor()\ncbr.fit(X, y)","4a1e6e4d":"interpreting.rf_feat_importance(cbr,X,plot=True)","8c5e8a37":"fig = px.choropleth(latest_mars, \n                    locations=\"Country\", \n                    color=\"Confirmed\", \n                    locationmode = 'country names', \n                    hover_name=\"Country\",\n                    range_color=[0,40000],\n                    title='Global COVID-19 confirmed infections for the 03\/23\/2020')\nfig.show()","75fd9204":"y = df['Confirmed']\nX = df.drop(['ObservationDate', 'Confirmed', 'Deaths', 'Recovered',\n       'Moratality', 'RecoveryRate'] ,axis=1)","6ac9e546":"from catboost import CatBoostRegressor\ncbr = CatBoostRegressor()\ncbr.fit(X, y)","10f03bae":"interpreting.rf_feat_importance(cbr,X,plot=True)","bc9b316c":"import warnings\nwarnings.filterwarnings(\"ignore\")\nprint(\"-- List of Countries --\")\nprint(df_original[\"Country\/Region\"].unique())\nprint(\"----\")\ncountry = \"Mainland China\"#input(\"Choose a country :\")\nfig, ax = plt.subplots()\nprint(df_original[df_original[\"Country\/Region\"] == country][\"Province\/State\"].unique())\nlist_ = df_original[df_original[\"Country\/Region\"] == country][\"Province\/State\"].unique()\n\nfor el in list_:\n    ax.plot(df_original[(df_original[\"Country\/Region\"] == country) & (df_original[\"Province\/State\"] == el)][\"ObservationDate\"], df_original[(df_original[\"Country\/Region\"] == country) & (df_original[\"Province\/State\"] == el)][\"Confirmed\"],label=el)\n\nplt.xticks(rotation=90)\nplt.rcParams[\"figure.figsize\"] = (20,15)\nax.legend(loc='upper left', frameon=False)\nplt.show()","79cbe9a7":"model = Prophet()\n\nprint(\"-- List of Countries --\")\n\nprint(df_original[\"Country\/Region\"].unique())\n\nprint(\"----\")\n\ncountry = \"Mainland China\"#input(\"Choose a country :\")\n\ndf_tmp = df_original[df_original[\"Country\/Region\"] == country]\ndf_tmp['Evolution'] = df_tmp.apply(lambda row: row.Confirmed - row.Recovered, axis = 1)\ndf_tmp = pd.DataFrame({'count' : df_tmp.groupby('ObservationDate')['Evolution'].sum()}).reset_index()\ndf_tmp = df_tmp.rename(columns={'ObservationDate':'ds', 'count':'y'})\n\nprint(df_tmp)\n\nmodel.fit(df_tmp)\nfuture = model.make_future_dataframe(periods=14)\nforecast = model.predict(future)\n\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']])\n\nmodel.plot_components(forecast)","93f88ea1":"fig = px.choropleth(latest_mars, \n                    locations=\"Country\", \n                    color=\"Recovered\", \n                    locationmode = 'country names', \n                    hover_name=\"Country\",\n                    range_color=[0,10000],\n                    title='Global COVID-19 confirmed infections for the 03\/23\/2020')\nfig.show()","8521eb58":"y = df['Recovered']\nX = df.drop(['ObservationDate', 'Confirmed', 'Deaths', 'Recovered',\n       'Moratality', 'RecoveryRate'] ,axis=1)","b3cecaca":"from catboost import CatBoostRegressor\ncbr = CatBoostRegressor()\ncbr.fit(X, y)","066e483c":"interpreting.rf_feat_importance(cbr,X,plot=True)","7274c1be":"from sklearn.cluster import KMeans\nX = df_global[['Mortality Rate','Deaths' , 'Recovered','Ratio_Death_recovered','Confirmed']]\nX = X.to_numpy()\ny = df_global['Country\/Region']","5d3ff9e1":"kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=1000, n_init=10, random_state=0)\npred_y = kmeans.fit_predict(X)\ndicti = {}\nfor i in range(len(y)):\n    dicti[y[i]] = pred_y[i]\n","ee88be90":"df_global['pr'] = pd.DataFrame(pred_y)","343c7b97":"fig = px.choropleth(df_global, \n                    locations=\"Country\/Region\", \n                    color=\"pr\", \n                    locationmode = 'country names', \n                    hover_name=\"Country\/Region\",\n                    range_color=[0,3],\n                    title='clusting result for the '+final_date)\nfig.show()","360f602c":"Let's pull our corona dataset and do a little cleaning","b4b44494":"## Infection Rate","e799b69d":"## Recovery Rate","67f1202a":"# Mortality Rate","7dbfd601":"# Data Preprocessing"}}