{"cell_type":{"7b202e90":"code","7e2b829e":"code","c6e9ea29":"code","f7f3dc4c":"code","8c38ca5a":"code","048b090b":"code","2f54bcf0":"code","f2d9e833":"code","37048f82":"code","3811596d":"code","8185a096":"code","1f31ef98":"code","075a5848":"code","bfdb04f6":"code","5b555bc7":"code","976a038e":"code","8a67be39":"code","1458d404":"code","8d2746c2":"code","3739a250":"code","b501c07d":"code","845e564b":"code","bff87624":"code","eec2a01c":"code","2646ba9a":"code","ebbce8f4":"code","927771b1":"code","7ab48dc0":"code","31419735":"code","a8cb48a1":"code","fc952ca0":"code","557fa8bd":"code","d4e8cebb":"code","51b4e499":"markdown","30e1bcc5":"markdown"},"source":{"7b202e90":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e2b829e":"cs = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/vw.csv\").columns\ndf = pd.DataFrame(columns=cs+[\"brand\"])\ndfs = []\n\nbrands_dict = {\n    \"vw\": \"VW\",\n    \"merc\": \"Mercedes\",\n}\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if not \"unclean\" in filename and not \"focus\" in filename and not \"cclass\" in filename:\n            p = os.path.join(dirname, filename)\n            brand = filename.replace(\".csv\", \"\")\n            if brand in brands_dict:\n                brand = brands_dict[brand]\n            new_df = pd.read_csv(p)\n            new_df[\"brand\"] = [brand for i in range(len(new_df))]\n            if \"tax(\u00a3)\" in new_df.columns:\n                new_df.rename(columns={\"tax(\u00a3)\": \"tax\"}, inplace=True)\n            \n            dfs.append(new_df)\ndf = pd.concat(dfs)          ","c6e9ea29":"df.describe()","f7f3dc4c":"df.head()","8c38ca5a":"df.head()","048b090b":"df.groupby(\"model\")[\"price\"].mean()","2f54bcf0":"models = list(df[\"model\"])\nbrands = list(df[\"brand\"])\nnew_model_names = [f\"{brand} {model}\" for model, brand in zip(models, brands)]","f2d9e833":"df[\"model\"] = new_model_names","37048f82":"df.head()","3811596d":"numerical_df = df.copy()","8185a096":"def make_column_numerical(df, column):\n    uniques = list(df[column].unique())\n    df[column] = df[column].apply(lambda x: uniques.index(x))\n    return df","1f31ef98":"def make_numerical(df):\n    num = df.copy()\n    num = make_column_numerical(num, \"transmission\")\n    num = make_column_numerical(num, \"fuelType\")\n    return num","075a5848":"#numerical_df = make_numerical(numerical_df)","bfdb04f6":"df[\"model\"] == models[0]\nlist(map(lambda x: int(x), list(df[\"model\"] == models[0])))","5b555bc7":"def make_ready_for_regression(df):\n    models = df[\"model\"].unique()\n    numerical = make_numerical(df)\n    target = numerical[\"price\"]\n    numerical.drop(\"price\", axis=1, inplace=True)\n    numerical.drop(\"brand\", axis=1, inplace=True)\n    for model in models:\n        is_model = list(map(lambda x: int(x), list(numerical[\"model\"] == model)))\n        numerical[model] = is_model\n    numerical.drop(\"model\", axis=1, inplace=True)\n    X = numerical.values\n    y = target\n    return X, y","976a038e":"df.head()","8a67be39":"df.isna().sum()","1458d404":"num = make_numerical(df)","8d2746c2":"num.head()","3739a250":"X, y = make_ready_for_regression(df)","b501c07d":"import random\nfrom sklearn.model_selection import train_test_split","845e564b":"random.shuffle(zip(X, y))","bff87624":"train_X, test_X, train_y, test_y = train_test_split(\n X, y, test_size=0.33, random_state=42)","eec2a01c":"from sklearn.linear_model import LinearRegression","2646ba9a":"train_X[0]","ebbce8f4":"model = LinearRegression()\nmodel = model.fit(train_X, train_y)","927771b1":"model.score(test_X, test_y)","7ab48dc0":"from sklearn.metrics import mean_squared_error, mean_absolute_error","31419735":"y = model.predict(test_X)","a8cb48a1":"mean_squared_error(test_y, y)","fc952ca0":"mean_absolute_error(test_y, y)","557fa8bd":"model.coef_","d4e8cebb":"numerical.values()","51b4e499":"Im Durschnitt Error von 2316","30e1bcc5":"# get price by model, divide dataset by model than look for year transmission mileage fuelType tax mpg"}}