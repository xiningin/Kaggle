{"cell_type":{"95700827":"code","09796a00":"code","35595b54":"code","3102fc00":"code","3c4df9a2":"code","3c11d726":"code","87d5b360":"code","7dc2af90":"code","1f4703e0":"code","0872bb1b":"code","44622071":"code","7989fd14":"code","8c84a984":"code","43a318c1":"code","e723eadc":"code","ff9593a0":"code","197d850a":"code","5839e744":"code","376f9efb":"code","26e91919":"code","9038bea2":"markdown","dcaf20b1":"markdown","40ac9163":"markdown","3f1cd603":"markdown","8890ed71":"markdown","cc4a67d1":"markdown","71065b46":"markdown","ba46b3fd":"markdown","8b31a131":"markdown"},"source":{"95700827":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport datetime, os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","09796a00":"#loading dataframes\ntrain_df = pd.read_csv('\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/rsna-bone-age\/boneage-test-dataset.csv')\n\n#appending file extension to id column for both training and testing dataframes\ntrain_df['id'] = train_df['id'].apply(lambda x: str(x)+'.png')\ntest_df['Case ID'] = test_df['Case ID'].apply(lambda x: str(x)+'.png') \n\ntrain_df.head()","35595b54":"#finding out the number of male and female children in the dataset\n#creating a new column called gender to keep the gender of the child as a string\ntrain_df['gender'] = train_df['male'].apply(lambda x: 'male' if x else 'female')\nprint(train_df['gender'].value_counts())\nsns.countplot(x = train_df['gender'])","3102fc00":"#oldest child in the dataset\nprint('MAX age: ' + str(train_df['boneage'].max()) + ' months')\n\n#youngest child in the dataset\nprint('MIN age: ' + str(train_df['boneage'].min()) + ' months')\n\n#mean age is\nmean_bone_age = train_df['boneage'].mean()\nprint('mean: ' + str(mean_bone_age))\n\n#median bone age\nprint('median: ' +str(train_df['boneage'].median()))\n\n#standard deviation of boneage\nstd_bone_age = train_df['boneage'].std()\n\n#models perform better when features are normalised to have zero mean and unity standard deviation\n#using z score for the training\ntrain_df['bone_age_z'] = (train_df['boneage'] - mean_bone_age)\/(std_bone_age)\n\nprint(train_df.head())","3c4df9a2":"#plotting a histogram for bone ages\ntrain_df['boneage'].hist(color = 'green')\nplt.xlabel('Age in months')\nplt.ylabel('Number of children')\nplt.title('Number of children in each age group')","3c11d726":"train_df['bone_age_z'].hist(color = 'violet')\nplt.xlabel('bone age z score')\nplt.ylabel('Number of children')\nplt.title('Relationship between number of children and bone age z score')","87d5b360":"#Relationship between age and gender with a categorical scatter plot (swarmplot)\nsns.swarmplot(x = train_df['gender'], y = train_df['boneage'])","7dc2af90":"#distribution of age within each gender \nmale = train_df[train_df['gender'] == 'male']\nfemale = train_df[train_df['gender'] == 'female']\nfig, ax = plt.subplots(2,1)\nax[0].hist(male['boneage'], color = 'blue')\nax[0].set_ylabel('Number of boys')\nax[1].hist(female['boneage'], color = 'red')\nax[1].set_xlabel('Age in months')\nax[1].set_ylabel('Number of girls')\nfig.set_size_inches((10,7))","1f4703e0":"#splitting train dataframe into traininng and validation dataframes\ndf_train, df_valid = train_test_split(train_df, test_size = 0.2, random_state = 0)","0872bb1b":"import matplotlib.image as mpimg\nfor filename, boneage, gender in train_df[['id','boneage','gender']].sample(4).values:\n    img = mpimg.imread('\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset\/'+ filename)\n    plt.imshow(img)\n    plt.title('Image name:{}  Bone age: {} years  Gender: {}'.format(filename, boneage\/12, gender))\n    plt.axis('off')\n    plt.show()","44622071":"#library required for image preprocessing\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom  keras.applications.xception import preprocess_input \n\n#reducing down the size of the image \nimg_size = 256\n\ntrain_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\nval_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\n\n#train data generator\ntrain_generator = train_data_generator.flow_from_dataframe(\n    dataframe = df_train,\n    directory = '\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset',\n    x_col= 'id',\n    y_col= 'bone_age_z',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode= 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))\n\n#validation data generator\nval_generator = val_data_generator.flow_from_dataframe(\n    dataframe = df_valid,\n    directory = '\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset',\n    x_col = 'id',\n    y_col = 'bone_age_z',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode = 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))\n\n#test data generator\ntest_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\n\ntest_generator = test_data_generator.flow_from_directory(\n    directory = '\/kaggle\/input\/rsna-bone-age\/boneage-test-dataset',\n    shuffle = True,\n    class_mode = None,\n    color_mode = 'rgb',\n    target_size = (img_size,img_size))","7989fd14":"test_X, test_Y = next(val_data_generator.flow_from_dataframe( \n                            df_valid, \n                            directory = '\/kaggle\/input\/rsna-bone-age\/boneage-training-dataset\/boneage-training-dataset',\n                            x_col = 'id',\n                            y_col = 'bone_age_z', \n                            target_size = (img_size, img_size),\n                            batch_size = 2523,\n                            class_mode = 'other'\n                            )) ","8c84a984":"def plot_it(history):\n    '''function to plot training and validation error'''\n    fig, ax = plt.subplots( figsize=(20,10))\n    ax.plot(history.history['mae_in_months'])\n    ax.plot(history.history['val_mae_in_months'])\n    plt.title('Model Error')\n    plt.ylabel('error')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Val'], loc='upper right')\n    ax.grid(color='black')\n    plt.show()","43a318c1":"from keras.metrics import mean_absolute_error\ndef mae_in_months(x_p, y_p):\n    '''function to return mae in months'''\n    return mean_absolute_error((std_bone_age*x_p + mean_bone_age), (std_bone_age*y_p + mean_bone_age)) ","e723eadc":"from tensorflow.keras.layers import GlobalMaxPooling2D, Dense,Flatten\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint,EarlyStopping,ReduceLROnPlateau\nfrom tensorflow.keras import Sequential\n\nmodel_1 = tf.keras.applications.xception.Xception(input_shape = (img_size, img_size, 3),\n                                           include_top = False,\n                                           weights = 'imagenet')\nmodel_1.trainable = True\nmodel_2 = Sequential()\nmodel_2.add(model_1)\nmodel_2.add(GlobalMaxPooling2D())\nmodel_2.add(Flatten())\nmodel_2.add(Dense(10, activation = 'relu'))\nmodel_2.add(Dense(1, activation = 'linear'))\n\n\n#compile model\nmodel_2.compile(loss ='mse', optimizer= 'adam', metrics = [mae_in_months] )\n\n#model summary\nmodel_2.summary()","ff9593a0":"# Load the TensorBoard notebook extension\n%load_ext tensorboard\nlogs_dir = '.\\logs'\n%tensorboard --logdir {logs_dir}","197d850a":"#early stopping\nearly_stopping = EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience= 5,\n                              verbose=0, mode='auto')\n\n#model checkpoint\nmc = ModelCheckpoint('best_model.h5', monitor='val_loss', mode='min', save_best_only=True)\n\n#tensorboard callback\nlogdir = os.path.join(logs_dir,datetime.datetime.now().strftime('%Y%m%d-%H%M%S'))\ntensorboard_callback =  TensorBoard(logdir, histogram_freq = 1)\n\n#reduce lr on plateau\nred_lr_plat = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', min_delta=0.0001, cooldown=0, min_lr=0)\n\ncallbacks = [tensorboard_callback,early_stopping,mc, red_lr_plat]\n\n\n#fit model\nhistory = model_2.fit_generator(train_generator,\n                            steps_per_epoch = 315,\n                            validation_data = val_generator,\n                            validation_steps = 1,\n                            epochs = 50,\n                            callbacks= callbacks)\nhistory\n%tensorboard --logdir logs\nplot_it(history)\n","5839e744":"model_2.load_weights('best_model.h5')\npred = mean_bone_age + std_bone_age*(model_2.predict(test_X, batch_size = 32, verbose = True))\ntest_months = mean_bone_age + std_bone_age*(test_Y)\n\nord_ind = np.argsort(test_Y)\nord_ind = ord_ind[np.linspace(0, len(ord_ind)-1, 8).astype(int)] # take 8 evenly spaced ones\nfig, axs = plt.subplots(4, 2, figsize = (15, 30))\nfor (ind, ax) in zip(ord_ind, axs.flatten()):\n    ax.imshow(test_X[ind, :,:,0], cmap = 'bone')\n    ax.set_title('Age: %fY\\nPredicted Age: %fY' % (test_months[ind]\/12.0, \n                                                           pred[ind]\/12.0))\n    ax.axis('off')\nfig.savefig('trained_image_predictions.png', dpi = 300)\n","376f9efb":"fig, ax = plt.subplots(figsize = (7,7))\nax.plot(test_months, pred, 'r.', label = 'predictions')\nax.plot(test_months, test_months, 'b-', label = 'actual')\nax.legend(loc = 'upper right')\nax.set_xlabel('Actual Age (Months)')\nax.set_ylabel('Predicted Age (Months)')","26e91919":"test_generator.reset()\ny_pred = model_2.predict_generator(test_generator)\npredicted = y_pred.flatten()\npredicted_months = mean_bone_age + std_bone_age*(predicted)\nfilenames=test_generator.filenames\nresults=pd.DataFrame({\"Filename\":filenames,\n                      \"Predictions\": predicted_months})\nresults.to_csv(\"results.csv\",index=False)","9038bea2":"Predicting on test data, we obtain:","dcaf20b1":"This notebook is an attempt to predict bone age using Xception(pre trained model)<br>","40ac9163":"**Some EDA and feature engineering follow**","3f1cd603":"Looking into the dataset...","8890ed71":"Evaluating the best saved model on the validation data and visualising results!!","cc4a67d1":"**Some Setup**<br>\nThe cell below creates the pandas dataframes for training and testing.","71065b46":"**The plot deviates from the line at very old and very young ages probably because we have less examples for those cases in the dataset**","ba46b3fd":" The function to plot training and validation error as a function of epochs","8b31a131":"**Setting up Image Data Generators!**<br>\nWe use image data generators for both training, testing and preprocessing of images. Validation set is already broken off from training set. "}}