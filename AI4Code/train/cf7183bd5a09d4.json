{"cell_type":{"4fcf0dc4":"code","386e2e3b":"code","63c92f10":"code","81228dc4":"code","21a2bb26":"code","96f0927a":"code","b7356f94":"code","fe31b3f2":"code","5f5c55d5":"code","817c78f3":"code","ca1dfb45":"code","3823638c":"code","930ec940":"code","8b2e8137":"code","6fe1d080":"code","75f8be54":"code","f13acaaa":"code","681ae554":"code","57c37b82":"code","879c6f62":"code","a725f471":"code","58463749":"code","a04ceefc":"code","01dae478":"code","8c6d445a":"code","279e2877":"code","73dd490b":"code","2266e2e5":"code","7479b1ec":"code","d2621145":"code","d36fb2dc":"code","6b24cd2a":"code","43f49d9c":"code","5c681280":"code","603dbcc3":"code","4e6eabff":"code","44ecff4a":"markdown","51d33663":"markdown","bb5e62af":"markdown","02f47d24":"markdown","fe52dbd4":"markdown","0b39441e":"markdown","cccd59b5":"markdown","e5b3978f":"markdown","33e77f28":"markdown","f90ff4fb":"markdown","6f02ec6a":"markdown","5b66a165":"markdown","e2076347":"markdown","a841fc2b":"markdown","43ada947":"markdown","22cc1ad0":"markdown","2b2a3338":"markdown","bcdbfef3":"markdown","57b00df5":"markdown","8633a6fd":"markdown","2e91adaf":"markdown","35dd5ba7":"markdown","7a664e0e":"markdown","9352e96a":"markdown","4b786d1a":"markdown","6a68fadd":"markdown","369a1970":"markdown","a4ec0ea9":"markdown","cccef64b":"markdown","1a412d43":"markdown","5a31fb93":"markdown","9ee70947":"markdown","0ccbc423":"markdown","56825ac2":"markdown","9f9f179a":"markdown","b5f61605":"markdown"},"source":{"4fcf0dc4":"!pip install kneed","386e2e3b":"#import libraries\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom kneed import KneeLocator\nfrom sklearn.metrics import silhouette_score","63c92f10":"#import dataset\npoke = pd.read_csv(\"\/kaggle\/input\/pokemon-type-matchup-data\/PokeTypeMatchupData.csv\")\nprint(poke.head())","81228dc4":"#define variables\nn=len(poke)\nunique_type_combos = 154\nnumeric_columns = poke.columns.drop(['Name'])\npoke_type_columns = numeric_columns.drop(['Number'])","21a2bb26":"print(numeric_columns)\nprint(type(poke[\"Normal\"][0]))","96f0927a":"#takeout the first position of each value of each field \n#and convert each to a float type\nfor name in numeric_columns:\n    for i in range(0,n):\n        poke[name][i] = float(poke[name][i][1:])","b7356f94":"print(poke.head())","fe31b3f2":"#lets rank each pokemon based on how well they battle each type\npoke[\"score\"] = 1\nfor i in poke_type_columns:\n    poke[\"score\"] = poke[\"score\"]+poke[i]","5f5c55d5":"#check to see the top and bottom strongest pokemon\nprint(poke.sort_values(\"score\")[[\"Name\",\"score\"]].head(20))\nprint(poke.sort_values(\"score\")[[\"Name\",\"score\"]].tail(20))","817c78f3":"x = poke[\"score\"]\nplt.hist(x)\nprint(\"Overall our best score is\", str(min(x)), \" and our worst score is \", str(max(x)))","ca1dfb45":"#list the pokemon with the highest score\nprint(poke[poke[\"score\"] == 14.25][\"Name\"])","3823638c":"#list the pokemon with the lowest score\nprint(poke[poke[\"score\"] == 26][\"Name\"])","930ec940":"#let's do a cluster analysis on each pokemon\n\nkmeans = KMeans(\n    init=\"random\",\n    n_clusters=8,\n    n_init=10,\n    max_iter=300,\n    random_state=42\n)\nkmeans.fit(poke[poke_type_columns])","8b2e8137":"#analyze the output\n# The lowest SSE value\nprint(kmeans.inertia_)\n\n# Final locations of the centroid\nkmeans.cluster_centers_\n\n# The number of iterations required to converge\nprint(kmeans.n_iter_)\n\n# first 5 predicted labels\nprint(kmeans.labels_[:5])","6fe1d080":"# here we can use the elbow method to find the optimal number of clusters\nkmeans_kwargs = {\n    \"init\": \"random\",\n    \"n_init\": 10,\n    \"max_iter\": 300,\n    \"random_state\": 42,\n}\n\n# A list holds the SSE values for each k\n# Python\u2019s dictionary unpacking operator (**)\nsse = []\nfor k in range(1, 20):\n    kmeans = KMeans(n_clusters=k, **kmeans_kwargs)\n    kmeans.fit(poke[poke_type_columns])\n    sse.append(kmeans.inertia_)","75f8be54":" plt.style.use(\"fivethirtyeight\") \n plt.plot(range(1, 20), sse) \n plt.xticks(range(1, 20))\n plt.xlabel(\"Number of Clusters\")\n plt.ylabel(\"SSE\")\n plt.show()","f13acaaa":"# A list holds the silhouette coefficients for each k\nsilhouette_coefficients = []\nscaled_features = poke[poke_type_columns]\n\n# Notice you start at 2 clusters for silhouette coefficient\nfor k in range(2, 11):\n    kmeans = KMeans(n_clusters=k, **kmeans_kwargs)\n    kmeans.fit(scaled_features)\n    score = silhouette_score(scaled_features, kmeans.labels_)\n    silhouette_coefficients.append(score)","681ae554":"plt.style.use(\"fivethirtyeight\")\nplt.plot(range(2, 11), silhouette_coefficients)\nplt.xticks(range(2, 11))\nplt.xlabel(\"Number of Clusters\")\nplt.ylabel(\"Silhouette Coefficient\")\nplt.show()","57c37b82":"import numpy as np\nimport pandas as pd\n\nimport scipy\nfrom scipy.cluster.hierarchy import dendrogram,linkage\nfrom scipy.cluster.hierarchy import fcluster\nfrom scipy.cluster.hierarchy import cophenet\nfrom scipy.spatial.distance import pdist\n\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\n\nimport sklearn\nfrom sklearn import datasets\nfrom sklearn.cluster import AgglomerativeClustering\nimport sklearn.metrics as sm\nfrom sklearn.preprocessing import scale","879c6f62":"#Configure the output\nnp.set_printoptions(precision=4,suppress=True)\n%matplotlib inline\nrcParams[\"figure.figsize\"] =20,10","a725f471":"z = linkage(scaled_features,\"ward\")\n\n#generate dendrogram\ndendrogram(z,truncate_mode= \"lastp\", p =10, leaf_rotation=45,leaf_font_size=15, show_contracted=True)\nplt.title(\"Truncated Hierachial Clustering Dendrogram\")\nplt.xlabel(\"Cluster Size\")\nplt.ylabel(\"Distance\")\n#divide the cluster\nplt.axhline(y=20)\nplt.show()","58463749":"#Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots","a04ceefc":"#let's do a cluster analysis on each pokemon\n\nkmeans = KMeans(\n    init=\"random\",\n    n_clusters=5,\n    n_init=10,\n    max_iter=300,\n    random_state=42\n)\nkmeans.fit(poke[poke_type_columns])\n\n# attach predicted labels to our dataset\npoke[\"clusters\"] = kmeans.labels_\n\n#histogram of clusters\nfig = px.histogram(poke, x=\"clusters\")\nfig.update_layout(\n    title_text='Number of Pokemon in Each Cluster', # title of plot\n    xaxis_title_text='Cluster', # xaxis label\n    yaxis_title_text='Number of Pokemon', # yaxis label\n    bargap=0.2, # gap between bars of adjacent location coordinates\n)\nfig.show()","01dae478":"grid = []\nfor j in poke_type_columns:\n    typ = []\n    for i in range(0,5):\n        typ.append(poke[poke[\"clusters\"] == i][j].mean())\n    grid.append(typ)","8c6d445a":"grid1 = pd.DataFrame(grid)\ngrid2 = grid1.transpose()\ngrid2.columns = poke_type_columns\n# grid2[\"clusters\"] = [1,2,3,4,5,6,7,8]\nprint(grid2)","279e2877":"pts = []\nfor i in range(0,5):\n    df = pd.DataFrame(grid2)\n    pts.append(df.iloc[i, :])","73dd490b":"fig_country = go.Figure()\nfig_country.add_trace(go.Bar(x=poke_type_columns,y=pts[0], marker=dict(color=list(range(20)), colorscale=\"Sunsetdark\")))\n\nfig_country.update_layout(title=\"Cluster 1 Weakness Chart\",\n                             xaxis_title=\"Poke Type\", yaxis_title=\"Damage Multiplyer\",title_x=0.5, paper_bgcolor=\"mintcream\",\n                             title_font_size=20)\nfig_country.show()","2266e2e5":"#run to see 30 pokemon in this cluster\nprint(poke[poke[\"clusters\"]==0][\"Name\"].head(30))","7479b1ec":"fig_country = go.Figure()\nfig_country.add_trace(go.Bar(x=poke_type_columns,y=pts[1], marker=dict(color=list(range(20)), colorscale=\"Sunsetdark\")))\n\nfig_country.update_layout(title=\"Cluster 2 Weakness Chart\",\n                             xaxis_title=\"Poke Type\", yaxis_title=\"Damage Multiplyer\",title_x=0.5, paper_bgcolor=\"mintcream\",\n                             title_font_size=20)\nfig_country.show()","d2621145":"#run to see 30 pokemon in this cluster\nprint(poke[poke[\"clusters\"]==1][\"Name\"].head(30))","d36fb2dc":"fig_country = go.Figure()\nfig_country.add_trace(go.Bar(x=poke_type_columns,y=pts[2], marker=dict(color=list(range(20)), colorscale=\"Sunsetdark\")))\n\nfig_country.update_layout(title=\"Cluster 3 Weakness Chart\",\n                             xaxis_title=\"Poke Type\", yaxis_title=\"Damage Multiplyer\",title_x=0.5, paper_bgcolor=\"mintcream\",\n                             title_font_size=20)\nfig_country.show()","6b24cd2a":"#run to see 30 pokemon in this cluster\nprint(poke[poke[\"clusters\"]==2][\"Name\"].head(30))","43f49d9c":"fig_country = go.Figure()\nfig_country.add_trace(go.Bar(x=poke_type_columns,y=pts[3], marker=dict(color=list(range(20)), colorscale=\"Sunsetdark\")))\n\nfig_country.update_layout(title=\"Cluster 4 Weakness Chart\",\n                             xaxis_title=\"Poke Type\", yaxis_title=\"Damage Multiplyer\",title_x=0.5, paper_bgcolor=\"mintcream\",\n                             title_font_size=20)\nfig_country.show()","5c681280":"#run to see 30 pokemon in this cluster\nprint(poke[poke[\"clusters\"]==3][\"Name\"].head(30))","603dbcc3":"fig_country = go.Figure()\nfig_country.add_trace(go.Bar(x=poke_type_columns,y=pts[4], marker=dict(color=list(range(20)), colorscale=\"Sunsetdark\")))\n\nfig_country.update_layout(title=\"Cluster 5 Weakness Chart\",\n                             xaxis_title=\"Poke Type\", yaxis_title=\"Damage Multiplyer\",title_x=0.5, paper_bgcolor=\"mintcream\",\n                             title_font_size=20)\nfig_country.show()","4e6eabff":"#run to see 30 pokemon in this cluster\nprint(poke[poke[\"clusters\"]==3][\"Name\"].head(30))","44ecff4a":"The above two pokemon have have the type combination of grass and ice. Although, grass is defensively strong against water, grass, elecctric, and ground, it is weak against fire, ice, poison, flying, and bug. Additionally, when ice is added to the equation the weakness increase to fighting, rock, and steel. It also has a double weaakness to fire.","51d33663":"### Cluster 2","bb5e62af":"### Cluster 1","02f47d24":"### Cluster 3","fe52dbd4":"![Pokemon_image](https:\/\/www.technosamrat.com\/wp-content\/uploads\/2012\/05\/Pokemon-Wallpapers-Picture.jpg)","0b39441e":"<a id=\"3\"><\/a>\n# 3. The Data","cccd59b5":"<a id=\"5\"><\/a>\n# 5. Import Dataset","e5b3978f":"From the above output we see that this cluster is weak against fire, ice, flying, and rock and strong against grass, fighting, and ground. This cluster consists of the type of pokemon that are grass, flying, fairy or some combination of the 3. Some pokemon in this cluster include Butterfree, Exeggutor, Mr. Mime, Pinser, and even Charizard. ","33e77f28":"The data set used in this notebook contains the weakness muliplier for about 500 Pokemon for each type of attack it encouners. If the attack is super affective on the Pokemon it will be assigned a 2. If is weak or super weak it will be assigned a .5 or .25. If it is upaffected at all it will be assigned 0. Lastly, if the attack has no special affect it will be assigned a 1.","f90ff4fb":"All of the above pokemon have have the type combination of steel and fairy. This is an impressive combination because defensively steel is strong against normal, grass, ice, flying, psychic, bug, rock, ghost, dragon, dark, steel, and fairy. When fairy is added to this type combination it negates steel's weakness against fighing and increases it's strength against bug, dark and dragon. This leaves only weeknesses to ground and fire.","6f02ec6a":"From the above output we see that this cluster is moderately weak against fire, water, fighting and very weak against ground. This cluster is strong against grass, poison, and bug. This cluster consists of the type of pokemon that are fire, electric, poison, or steel which explains the strong weakness to ground type attacks. Some pokemon in this cluster include Ninetails, Joltion, gastly, and Magnemite.","5b66a165":"### Cluster 4","e2076347":"Pokemon are creatures in a video game that are used to battle against other Pokemon. A person who owns Pokemon for battle is called a trainer, typically trainers duel each other in a Pokemon battle with a set of 6 Pokemon each. Pokemon are assigned types along with different attacks, each attack is also assigned a type. This is important because each Pokemon type is assigned strenths and weaknesses. For example, Charmander is a fire type Pokemon and because he is fire type he is weak if he is attacked by a water move and thus will deal extra damage to Charmander if attacked. Charmander also has a set of attacks, of course he will be assigned fire attacks but he might have an array of other attack types too. His fire attacks will be strong against grass type Pokemon and deal extra damage against grass type Pokemon. One last thing, Pokemon have be assigned up to two types. For example, Charazard is both fire and flying type, this comes with both weakness and advantages. Along with the characteristics of fire type moves that we discussed Charazard also adops the strenths and weaknesses of flying type Pokemon. Fo example, Charazard will be strong against fighting type Pokemon along with grass types and weak against electricc types along with water.","a841fc2b":"## Hierarchical clustering","43ada947":"<a id=\"8\"><\/a>\n# 8. Analyzing Clusters","22cc1ad0":"Going further I went with the heirarichal clustering results and chose to go with 5 clusters. I did this because a trainer is able to choose 6 pokemon for their team. Therefore the cluster analysis can help us choose 5 pokemon with disjoint type combinations and one extra to be chosen by the trainer.","2b2a3338":"<a id=\"top\"><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" role=\"tab\" aria-controls=\"home\">Table of Content<\/h3>\n\n* [1. Introduction](#1)\n* [2. What is a Pokemon?](#2)\n* [3. The Data](#3)\n* [4. Importing Packages](#4)    \n* [5. Import Dataset](#5)\n* [6. Explore the Dataset and Calculate the Weakness Scores](#6)\n* [7. Cluster Analysis](#7)\n* [8. Analyzing Clusters](#8)\n* [9. Conclusion](#9)\n","bcdbfef3":"In this Notebook, we will analyze which Pokemon are the strongest and weakest based only on the type the Pokemon has been assigned. Using K-Means clustering we will also be clustering which Pokemon are alike based on the Pokemon type combinations. We will also be exploring several different methods to find the optimal number of clusters This will allow the user to organize their starting Pokemon so that the trainer will have a strong attack and defence no matter what Pokemon the opponent plays. ","57b00df5":"<a id=\"2\"><\/a>\n# 2. What is a Pokemon?","8633a6fd":"<a id=\"1\"><\/a>\n# 1. Introduction","2e91adaf":"<a id=\"9\"><\/a>\n# 9. Conclusion","35dd5ba7":"In conclusion we used the pokemon dataset to get better understanding of pokemon tpes and their combinations. I first calculated an aggregate score from the type matchup scores to find the weakest and strongest pokemon type combinations. Then I used a K-Means cluster analysis to group like-type combinations to better understand which types are most similar and to help us choose a pokemon team. ","7a664e0e":"### Cluster 5","9352e96a":"Below I'll use the Elbow Method to find the optimal number of Clusters","4b786d1a":"<a id=\"7\"><\/a>\n# 7. Cluster Analysis","6a68fadd":"Below I will compare the Elbow Method to the Silhouette Method for finding the optimal number of clusters","369a1970":"<a id=\"4\"><\/a>\n# 4. Importing Packages","a4ec0ea9":"Now that we've assigned each pokemon to a cluster let's find the weaknesses and strengths of each cluster","cccef64b":"<a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\">Go to TOC<\/a>","1a412d43":"From the above output we see that this cluster is weak against electric, grass, ghost, and dark. This cluster is strong against fire, water, ice, and steel. This cluster consists of the type of pokemon that are water and psychic type. Some pokemon in this cluster include Abra, Wartortle, Slowpoke, Mew, and Kingler.","5a31fb93":"From the above output we see that this cluster is moderately weak against ice, ground, fighting, very weak against water and extremely weak against grass. This cluster is strong against poison, and rock and extremely strong against electric. This cluster consists of the type of mostly pokemon that are ground and rock which explains the strong weakness to grass type attacks and strong defense to electric. Some pokemon in this cluster include Diglett, Cubone, Tyranitar, and Rydon.","9ee70947":"In the above analysis we found which pokemon types are the strongest and weakest. Let's go a bit further to see which type combinations are most similar to each other by using a cluster analysis. This way we can better understand we want to choose when forming our team.","0ccbc423":"## K-Means Clustering","56825ac2":"<a id=\"6\"><\/a>\n# 6. Explore the Dataset and Calculate the Weakness Scores","9f9f179a":"From the above output we see that this cluster is weak against electric, grass, ghost, and dark. This cluster is strong against fire, water, ice, and steel. This cluster consists of the type of pokemon that are water and psychic type. Some pokemon in this cluster include Abra, Wartortle, Slowpoke, Mew, and Kingler.","b5f61605":"<center><h1>Pokemon Analysis and Clustering<\/h1><\/center>"}}