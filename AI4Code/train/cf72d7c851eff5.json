{"cell_type":{"a92f8e54":"code","5befb9ee":"code","42be2582":"code","ff94306b":"code","0f41d061":"code","07fbcf6f":"code","20c8d930":"code","8cba957d":"code","1dc9555e":"code","d630c5ce":"code","5ccca46f":"code","ca361059":"code","548666f3":"code","a3d61bab":"code","16e86053":"code","5a69e63c":"code","f6a5ccb4":"code","83d65026":"code","0c62c852":"code","a415f676":"code","d6153e98":"code","4ef2d738":"code","c137561f":"code","8af63f01":"code","79258608":"code","8376543b":"code","91b0d6e8":"code","f9f047a0":"code","54631111":"code","624c75cd":"code","9092336e":"code","cac2a911":"code","581e1acd":"code","3807943a":"code","2a556bba":"code","2d0829bd":"code","47429570":"code","97dfa94c":"code","f9f40c8c":"code","866dd8a5":"code","fa36ce07":"code","748c105a":"code","993a0e70":"code","02dd2ed6":"code","9b63a0cc":"code","54755842":"code","52b9baac":"code","2323b285":"code","d6a65cd0":"code","b6806be2":"code","192fdfd4":"code","2451acd5":"code","8554ad1c":"code","6b25756f":"code","7e72d492":"code","c74a3663":"code","6797093c":"code","fe51bcc0":"code","c7eca2d4":"code","db2342d9":"code","6d1129b0":"code","1813f6b6":"code","fe2cb766":"code","e44ac288":"code","d48cc49d":"code","df074a56":"code","3171d2f4":"code","0fd70902":"code","f338aa76":"code","b39c6315":"code","d50a6b59":"code","95cbafeb":"code","3f32112e":"code","a9c07733":"code","93367eb1":"markdown","aabf0fef":"markdown","5eff22c2":"markdown","37c1b709":"markdown","eab7bae5":"markdown","a05bb59c":"markdown","24265619":"markdown","7d442f9d":"markdown","9a6bbe41":"markdown","4f847dd6":"markdown","eb15117f":"markdown","9fea9052":"markdown","f8185ee1":"markdown","ba3fc4b3":"markdown","c65f818e":"markdown","5f5184a4":"markdown","b8180d54":"markdown","02f1caff":"markdown","a4f910a0":"markdown","47c064b2":"markdown","08d134f8":"markdown","a509aa6e":"markdown","6132a7eb":"markdown"},"source":{"a92f8e54":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport os\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import RobustScaler\n\nimport category_encoders as ce\n\nplt.style.use('seaborn-colorblind')\n%matplotlib inline","5befb9ee":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\nprint(data.shape)\ndata.head(8)","42be2582":"data.info()","ff94306b":"data.dtypes","0f41d061":"data.describe()","07fbcf6f":"data.describe(include=['object'])","20c8d930":"data.isna().any()","8cba957d":"def check_missing(data, output_path=None):\n    \"\"\"\u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438 \u0434\u043e\u043b\u044e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.\"\"\"\n    result = pd.concat([data.isnull().sum(), data.isnull().mean()], axis=1)\n    result = result.rename(index=str, columns={0: 'total missing', 1: 'proportion'})\n    return result","1dc9555e":"check_missing(data=data)","d630c5ce":"data.drop(['id','name', 'host_id', 'host_name'], axis=1, inplace=True)","5ccca46f":"data.fillna({'reviews_per_month':0}, inplace=True)","ca361059":"data['last_review'] = data['last_review'].fillna(-1)","548666f3":"data.isna().any().any()","a3d61bab":"for feature in data.columns:\n    fig = px.histogram(data, x = feature, nbins=60)\n    fig.update_layout(\n        autosize=False,\n        width=800,\n        height=400,)\n    fig.show()","16e86053":"corr = data.corr()\nplt.figure(figsize=(30,20));\nsns.heatmap(corr, annot=True, fmt='.2f');","5a69e63c":"sns.pairplot(data)\nplt.show();","f6a5ccb4":"num_features = [col for col, dtype in data.dtypes.items() if dtype == 'int64' or dtype == 'float64']","83d65026":"plt.figure(figsize=(20,35))\nplotnumber =1\nfor column in num_features:\n    ax = plt.subplot(10,3,plotnumber)\n    sns.boxplot(data = data, x = column, palette='pastel')\n    plt.xlabel(column)\n    plotnumber+=1\nplt.show()","0c62c852":"data['neighbourhood_group'].unique()","a415f676":"sns.catplot(x=\"neighbourhood_group\", y=\"price\", data=data, palette='pastel')\nfig = plt.gcf()\nfig.set_size_inches(10,5)","d6153e98":"sns.countplot(data = data, x = 'neighbourhood_group', hue ='room_type', palette='pastel')\nfig = plt.gcf()\nfig.set_size_inches(10,5)","4ef2d738":"plt.figure(figsize=(10,6))\nsns.scatterplot(data = data, x = 'longitude', y = 'latitude', hue='neighbourhood_group', palette='pastel')\nplt.show()","c137561f":"latitude_m, longitude_m = data[['latitude', 'longitude']][data['neighbourhood_group'] == 'Manhattan'].mean()","8af63f01":"data['dist'] = np.sqrt((data['latitude'] -latitude_m)**2 + (data['longitude']-longitude_m)**2)","79258608":"data['last_review'][data['last_review'] != -1] = pd.to_datetime(data['last_review'])","8376543b":"data1 = data[data['last_review'] != -1].sort_values(by='last_review', ascending = False)","91b0d6e8":"date = data1['last_review'].to_list()[0]\ndate","f9f047a0":"data['date_last_review'] = data['last_review'][data['last_review'] != -1].map(lambda x: date - x )","54631111":"data['date_last_review'] = pd.to_numeric(data['date_last_review'].dt.days, downcast='integer')","624c75cd":"data['date_last_review'] = data['date_last_review'].fillna(-1)\ndata.head()","9092336e":"data.head()","cac2a911":"categorical_features = [\n    'neighbourhood_group', \n    'room_type'\n]","581e1acd":"data = pd.get_dummies(data, columns=categorical_features, prefix='category')","3807943a":"from sklearn.preprocessing import LabelEncoder","2a556bba":"label = LabelEncoder()\ndata['neighbourhood'] = label.fit_transform(data['neighbourhood'])","2d0829bd":"data.head()","47429570":"dev = (data['price']-data['price'].mean()).abs()\n# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\nstd = data['price'].std()\n# \u0424\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445\ndata = data[~(dev>3*std)]","97dfa94c":"data['price'].hist()","f9f40c8c":"np.log(data['price']+1).hist(bins=20)","866dd8a5":"data['price_log'] = np.log(data['price']+1)","fa36ce07":"data.drop(['price'], axis =1, inplace =True)","748c105a":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    data.drop(['price_log', 'last_review'], axis=1), \n    data['price_log'], \n    test_size=0.3\n)","993a0e70":"from sklearn.preprocessing import StandardScaler, RobustScaler\nscaler = StandardScaler()","02dd2ed6":"continuous_vars = [\n    'latitude',\n    'longitude',\n    'reviews_per_month',\n    'calculated_host_listings_count',\n    'dist'\n    \n]","9b63a0cc":"X_train_scaled = X_train.copy()\nX_test_scaled = X_test.copy()\n\nX_train_scaled[continuous_vars] = scaler.fit_transform(X_train_scaled[continuous_vars])\nX_test_scaled[continuous_vars] = scaler.transform(X_test_scaled[continuous_vars])","54755842":"X_train_r_scaled = X_train.copy()\nX_test_r_scaled = X_test.copy()\n\nX_train_r_scaled[continuous_vars] = scaler.fit_transform(X_train_r_scaled[continuous_vars])\nX_test_r_scaled[continuous_vars] = scaler.transform(X_test_r_scaled[continuous_vars])","52b9baac":"from sklearn import metrics  # \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\ndef dataframe_metrics(y_test,y_pred):\n    stats = [\n       metrics.mean_absolute_error(y_test, y_pred),\n       np.sqrt(metrics.mean_squared_error(y_test, y_pred)),\n       metrics.r2_score(y_test, y_pred)\n    ]\n    return stats\n\nmeasured_metrics = pd.DataFrame({\"error_type\":[\"MAE\", \"RMSE\", \"R2\"]})\nmeasured_metrics.set_index(\"error_type\")","2323b285":"from sklearn.linear_model import LinearRegression, RidgeCV, LassoCV, ElasticNetCV","d6a65cd0":"lin_reg = LinearRegression()\n\nlin_reg.fit(X_train_scaled, y_train)","b6806be2":"featureImportance = pd.DataFrame({\"feature\": X_train.columns, \n                                  \"importance\": lin_reg.coef_})\n\nfeatureImportance.set_index('feature', inplace=True)\nfeatureImportance.sort_values([\"importance\"], ascending=False, inplace=True)\nfeatureImportance[\"importance\"].plot(kind='bar', figsize=(50, 15));","192fdfd4":"predictions = lin_reg.predict(X_test_scaled)","2451acd5":"measured_metrics[\"lin_reg\"] = dataframe_metrics(y_test, predictions)\nmeasured_metrics","8554ad1c":"lin_reg = LinearRegression()\n\nlin_reg.fit(X_train_r_scaled, y_train)","6b25756f":"predictions = lin_reg.predict(X_test_r_scaled)","7e72d492":"measured_metrics[\"lin_reg_r\"] = dataframe_metrics(y_test, predictions)\nmeasured_metrics","c74a3663":"predictions = lin_reg.predict(X_test_r_scaled)","6797093c":"ridge_cv = RidgeCV()\n\nridge_cv.fit(X_train_scaled, y_train)","fe51bcc0":"featureImportance = pd.DataFrame({\"feature\": X_train.columns, \n                                  \"importance\": ridge_cv.coef_})\n\nfeatureImportance.set_index('feature', inplace=True)\nfeatureImportance.sort_values([\"importance\"], ascending=False, inplace=True)\nfeatureImportance[\"importance\"].plot(kind='bar', figsize=(50, 15));","c7eca2d4":"predictions = ridge_cv.predict(X_test_scaled)","db2342d9":"measured_metrics[\"ridge_cv\"] = dataframe_metrics(y_test, predictions)\nmeasured_metrics","6d1129b0":"lasso_cv = LassoCV()\n\nlasso_cv.fit(X_train_scaled, y_train)","1813f6b6":"featureImportance = pd.DataFrame({\"feature\": X_train.columns[lasso_cv.coef_!=0], \n                                  \"importance\": lasso_cv.coef_[lasso_cv.coef_!=0]})\n\nfeatureImportance.set_index('feature', inplace=True)\nfeatureImportance.sort_values([\"importance\"], ascending=False, inplace=True)\nfeatureImportance[\"importance\"].plot(kind='bar', figsize=(18, 6));","fe2cb766":"predictions = lasso_cv.predict(X_test_scaled)","e44ac288":"measured_metrics[\"lasso_cv\"] = dataframe_metrics(y_test, predictions)\nmeasured_metrics","d48cc49d":"elastic=ElasticNetCV()\n\nelastic.fit(X_train_scaled, y_train)","df074a56":"featureImportance = pd.DataFrame({\"feature\": X_train.columns[elastic.coef_!=0], \n                                  \"importance\": elastic.coef_[elastic.coef_!=0]})\n\nfeatureImportance.set_index('feature', inplace=True)\nfeatureImportance.sort_values([\"importance\"], ascending=False, inplace=True)\nfeatureImportance[\"importance\"].plot(kind='bar', figsize=(18, 6));","3171d2f4":"predictions = elastic.predict(X_test_scaled)","0fd70902":"measured_metrics[\"elastic\"] = dataframe_metrics(y_test, predictions)\nmeasured_metrics","f338aa76":"from sklearn.ensemble import GradientBoostingRegressor","b39c6315":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.01)\nGBoost.fit(X_train,y_train)","d50a6b59":"predictions = GBoost.predict(X_test)","95cbafeb":"measured_metrics[\"GBoost\"] = dataframe_metrics(y_test, predictions)\nmeasured_metrics","3f32112e":"from sklearn.ensemble import RandomForestRegressor","a9c07733":"rf_reg = RandomForestRegressor(n_jobs=-1)\nrf_reg.fit(X_train, y_train)\n\nmeasured_metrics[\"rf_reg\"] = dataframe_metrics(y_test, rf_reg.predict(X_test))\nmeasured_metrics","93367eb1":"## Machine Learning","aabf0fef":"## Data Overview","5eff22c2":"Model with the best score is RandomForestRegressor","37c1b709":"#### Data Visualization","eab7bae5":"## Task","a05bb59c":"# New York City Airbnb Rental Prices Prediction","24265619":"#### Last Review","7d442f9d":"## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b:","9a6bbe41":"## Conclusion","4f847dd6":"#### Encoding Categorical Features","eb15117f":"#### Metrics","9fea9052":"#### LinearRegression","f8185ee1":"## Exploratory Data Analysis","ba3fc4b3":"Predict `price` of NYC Airbnb rentals based on the data provided.","c65f818e":"#### Gradient Boosting Regressor","5f5184a4":"#### Scaling","b8180d54":"#### Random Forest Regressor","02f1caff":"#### Ridge","a4f910a0":"## Feature Engineering","47c064b2":"#### ElasticNet","08d134f8":"#### Distance to Manhattan","a509aa6e":"#### Price","6132a7eb":"#### Lasso"}}