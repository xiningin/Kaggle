{"cell_type":{"5d1a5972":"code","04860ca0":"code","79896a1b":"code","42adf286":"code","e078dabf":"code","2af216c4":"code","ad09923b":"code","52c65553":"code","29983c1a":"code","5bb7acbb":"code","8f244958":"code","9b9fece7":"code","54018c25":"code","f5434aa6":"code","7ce20c76":"code","7a291a32":"code","9c6fbf35":"code","f8c9449a":"code","1f9e0fd2":"code","c5a46e64":"code","c0f9978e":"code","ea01223a":"code","30339608":"code","f057a7e7":"code","60d528b7":"code","f6189bff":"code","1f3aaccd":"code","deb8e7ac":"code","866d2800":"code","23a615dd":"code","e4f0d5dc":"code","8ce58407":"code","4d5b87e7":"code","cf6311d9":"code","dc4e059c":"code","3ad195f2":"code","8f07eca1":"code","5b8f5e8a":"code","2a77ecca":"code","4e945f3b":"code","1699bf57":"code","b2ce85c3":"code","8e313180":"code","2013515a":"code","d756ef51":"code","cc0d1cde":"code","ebfafc44":"code","e62545ac":"code","ef3bb330":"code","6667e2eb":"code","5a76ec7b":"code","39b6ad7f":"code","74f5781c":"code","55bba2f5":"code","07e1258f":"code","e22ae08c":"code","78187226":"code","f7cebe46":"code","d0caec84":"code","0c08193b":"code","21853ead":"code","27721c9d":"code","94c91c90":"code","16f4d72f":"code","778a7748":"code","ec8515e6":"code","db367abf":"markdown","771fa0cb":"markdown","547b4ecd":"markdown","a3f26556":"markdown","ce236f32":"markdown","1a8f5642":"markdown","92311edd":"markdown","1e1662bd":"markdown","be0d1f0b":"markdown","ac67ef3b":"markdown","350573c0":"markdown","62c0deba":"markdown","22dfe112":"markdown","eb969100":"markdown","0e863a0a":"markdown","73c99d1d":"markdown","271082ff":"markdown","b94b72db":"markdown","f2db8001":"markdown","1ce2e914":"markdown","95872a33":"markdown","03560903":"markdown","b4c9a989":"markdown","bffb150e":"markdown","57fb4c26":"markdown","5c4579e1":"markdown","1e1adb1b":"markdown","ddd13304":"markdown","70d8fdd8":"markdown","e53bbbab":"markdown","d642a3c5":"markdown","d7ff4420":"markdown","067cd55b":"markdown","e0459214":"markdown","ffdfb7f4":"markdown","abae1596":"markdown","84f82c49":"markdown","93841ee6":"markdown"},"source":{"5d1a5972":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04860ca0":"!pip install pycaret","79896a1b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom pycaret.classification import * ","42adf286":"train_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntrain_df.head()","e078dabf":"test_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\ntest_df.head()","2af216c4":"train_df_copy = train_df.copy()","ad09923b":"train_df.drop('Survived', axis=1, inplace = True)","52c65553":"df = pd.concat([train_df,test_df], ignore_index=True)\ndf.tail()","29983c1a":"df.isnull().sum()","5bb7acbb":"df.info()","8f244958":"df.describe()","9b9fece7":"plt.figure(figsize=(10,7))\nplt.hist(df['Age'], bins = 20)\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.title('Histogram of Age')\nplt.show()","54018c25":"plt.figure(figsize=(10,7))\nplt.hist(df['Fare'], bins = 50)\nplt.xlabel('Fare')\nplt.ylabel('Count')\nplt.title('Histogram of Fare')\nplt.show()","f5434aa6":"plt.figure(figsize=(10,7))\nplt.hist(df['SibSp'], bins = 20)\nplt.xlabel('SibSp')\nplt.ylabel('Count')\nplt.title('Histogram of SibSp')\nplt.show()","7ce20c76":"plt.figure(figsize=(10,7))\nplt.hist(df['Parch'], bins = 20)\nplt.xlabel('Parch')\nplt.ylabel('Count')\nplt.title('Histogram of Parch')\nplt.show()","7a291a32":"plt.figure(figsize=(10,7))\nplt.hist(df['Pclass'], bins = 5)\nplt.xlabel('Pclass')\nplt.ylabel('Count')\nplt.title('Histogram of Parch')\nplt.show()","9c6fbf35":"plt.figure(figsize=(10,7))\nsns.countplot(x=\"Embarked\", data=df)","f8c9449a":"age_mean = df['Age'].mean()\nage_median = df['Age'].median()\nprint(age_mean, age_median)","1f9e0fd2":"df['Age'] = df['Age'].fillna(age_median)","c5a46e64":"fare_mean = df['Fare'].mean()\nfare_median = df['Fare'].median()\nprint(fare_mean, fare_median)","c0f9978e":"df['Fare'] = df['Fare'].fillna(fare_median)","ea01223a":"embarked_mode = df['Embarked'].mode()[0]\nprint(embarked_mode)","30339608":"df['Embarked'] = df['Embarked'].fillna(embarked_mode)","f057a7e7":"df['Ticket'] = df['Ticket'].fillna('NA')","60d528b7":"df['Cabin'] = df['Cabin'].fillna('NA')","f6189bff":"df.isnull().sum()","1f3aaccd":"df[['First_Name','Last_Name']] = df.Name.str.split(',', expand=True)\ndf.head()","deb8e7ac":"df['Family'] = df['SibSp'] + df['Parch'] +1","866d2800":"df['Cabin_Class'] = df['Cabin'].str[:1]","23a615dd":"df['Cabin_Class'] = df['Cabin_Class'].replace(to_replace = 'N', value = 'NA')","e4f0d5dc":"df.drop(['Name','PassengerId'], axis=1, inplace = True)","8ce58407":"df.head()","4d5b87e7":"#df['Age'] = df['Age'].round().astype('int')\ndf['Age'] = df['Age'].round()","cf6311d9":"#df['Fare'] = df['Fare'].round().astype('int')\ndf['Fare'] = df['Fare'].round()","dc4e059c":"df.head()","3ad195f2":"label = LabelEncoder()","8f07eca1":"df['Ticket'] = label.fit_transform(df['Ticket'])\ndf['First_Name'] = label.fit_transform(df['First_Name'])\ndf['Last_Name'] = label.fit_transform(df['Last_Name'])\ndf['Cabin_Class'] = label.fit_transform(df['Cabin_Class'])\ndf['Cabin'] = label.fit_transform(df['Cabin'])","5b8f5e8a":"df_onehot = pd.get_dummies(df[['Sex','Embarked']])\ndf_onehot.head()","2a77ecca":"df = pd.concat([df,df_onehot], axis=1)\ndf.head()","4e945f3b":"df.drop(['Sex','Embarked'], axis=1, inplace = True)","1699bf57":"df.head()","b2ce85c3":"train = df[0:100000]\ntest = df[100000:]","8e313180":"train = pd.concat([train, train_df_copy['Survived']], axis=1)\ntrain.head()","2013515a":"data = train.sample(frac=0.95, random_state=786)\ndata_unseen = train.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))","d756ef51":"titanic_classification = setup(\n                               data= data, \n                               target='Survived', \n                               ignore_features = ['First_Name'],\n                               numeric_features =['SibSp','Parch','Family','Age','Fare','Ticket','Cabin','Cabin_Class','Last_Name'], \n                               ordinal_features = {'Pclass': ['1','2','3']},\n                           #   high_cardinality_features = ['Ticket'],\n                               normalize=True,\n                               normalize_method = 'maxabs',\n                               handle_unknown_categorical = True,\n                               unknown_categorical_method = 'least_frequent',\n                            #  bin_numeric_features = ['Age','Fare'],\n                               remove_outliers = True,\n                            #  remove_multicollinearity = True,\n                            #   polynomial_features = True,\n                               trigonometry_features = True,\n                               transformation= True, \n                               fix_imbalance=True, \n                               use_gpu=True, \n                               session_id=123, \n                               log_experiment=True, \n                               silent=True)","cc0d1cde":"best_model = compare_models()","ebfafc44":"lightgbm = create_model('lightgbm')","e62545ac":"tuned_lightgbm = tune_model(lightgbm)","ef3bb330":"plot_model(lightgbm, plot = 'auc')","6667e2eb":"plot_model(lightgbm, plot = 'pr')","5a76ec7b":"plot_model(lightgbm, plot='feature')","39b6ad7f":"plot_model(lightgbm, plot = 'confusion_matrix')","74f5781c":"evaluate_model(lightgbm)","55bba2f5":"predict_model(lightgbm)","07e1258f":"final_lightgbm = finalize_model(lightgbm)","e22ae08c":"print(final_lightgbm)","78187226":"predict_model(final_lightgbm)","f7cebe46":"unseen_predictions = predict_model(final_lightgbm, data=data_unseen)\nunseen_predictions.head()","d0caec84":"from pycaret.utils import check_metric\ncheck_metric(unseen_predictions['Survived'], unseen_predictions['Label'], metric = 'Accuracy')","0c08193b":"save_model(final_lightgbm,'Final lgm Model 26Apr2021')","21853ead":"saved_final_lightgbm = load_model('Final lgm Model 26Apr2021')","27721c9d":"submission = predict_model(saved_final_lightgbm, data=test)\nsubmission.head()","94c91c90":"submission_copy = submission.copy()","16f4d72f":"submission_copy.drop(['Pclass', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare',\n       'Cabin', 'Last_Name', 'Sex_female', 'Sex_male', 'Embarked_C',\n       'Embarked_Q', 'Embarked_S', 'Score'], axis=1, inplace = True)","778a7748":"submission_copy.rename(columns={'Label':'Survived'},inplace = True)","ec8515e6":"submission_copy.to_csv('submission.csv', index=False)","db367abf":"## \ud83d\udc49 Plot feature Importance","771fa0cb":"## \ud83d\udc49 Splitting the Train and Test data","547b4ecd":"## \ud83d\udc49 Finalize Model for deployment","a3f26556":"## \ud83d\udc49 Choose the best model from the list","ce236f32":"## \ud83d\udc49 Loading the saved model","1a8f5642":"## \ud83d\udc49 Rounding the 'Age' and 'Fare' columns","92311edd":"## \ud83d\udc49 Creating a submission file","1e1662bd":"# \ud83d\udc49 Dropping 'Survived' column from train dataset","be0d1f0b":"## \ud83d\udc49 Comparing different models","ac67ef3b":"# \ud83d\udc49 Concatenate train_df and test_df dataframe","350573c0":"# \ud83d\udc49 Making a Copy of train_df dataframe","62c0deba":"# \ud83d\udc49 Install Pycaret","22dfe112":"# Data Preprocessing\n## \ud83d\udc49 Check for null values","eb969100":"## \ud83d\udc49 Predict model on unseen data","0e863a0a":"## \ud83d\udc49 Plot Precision-Recall Curve","73c99d1d":"## \ud83d\udc49 Once again verifying the null values","271082ff":"## \ud83d\udc49 Imputing null values for all the features","b94b72db":"# \ud83d\udc49 Loading Train and Test dataset","f2db8001":"# Feature Engineering\n## \ud83d\udc49 Creating new features 'First_Name' and 'Last_Name'","1ce2e914":"## \ud83d\udc49 Check feature information","95872a33":"## \ud83d\udc49 Plot the AUC curve","03560903":"## \ud83d\udc49 Creating new feature 'Cabin_Class'","b4c9a989":"## \ud83d\udc49 Perform Scaling, Label encoding and One hot encoding on categorical features","bffb150e":"## \ud83d\udc49 Predicting on test data","57fb4c26":"## \ud83d\udc49 Evaluating the model","5c4579e1":"## \ud83d\udc49 Splitting training data into training and validation dataset","1e1adb1b":"## \ud83d\udc49 Setting up preprocessing sequence for Pycaret","ddd13304":"## \ud83d\udc49 Appending 'Survived'column to train dataframe","70d8fdd8":"## \ud83d\udc49 Dropping 'Name' and 'PassengerId' columns from df","e53bbbab":"## \ud83d\udc49 Visualizing the features","d642a3c5":"# \ud83d\udc49 Importing libraries","d7ff4420":"## \ud83d\udc49 Saving the model","067cd55b":"## \ud83d\udc49 Check feature description","e0459214":"## \ud83d\udc49 Plot Confusion Matrix","ffdfb7f4":"## \ud83d\udc49 Creating new feature 'Family'","abae1596":"## \ud83d\udc49 Dropping 'Sex' and 'Embarked' columns","84f82c49":"## \ud83d\udc49 Tune the model","93841ee6":"## \ud83d\udc49 Predict data"}}