{"cell_type":{"951ba7ee":"code","a0747075":"code","005496f1":"code","341ecba9":"code","88b9c922":"code","13ff3b34":"code","7eaa90fd":"code","3a35def2":"code","a3512c27":"code","f354f514":"code","32db661d":"code","4883d614":"code","4fc90231":"code","61b20b32":"code","f054a527":"code","58a990a7":"code","be6f8968":"code","22e78223":"code","5a85c1d2":"code","f37ee661":"code","5b4e3287":"code","c8295d62":"code","8e5f0739":"code","8b91e788":"code","9d112a62":"code","8906777c":"code","06c3c89b":"code","091ea3ae":"code","56ef769c":"code","879f0e10":"code","1c0a5d52":"code","71dfbbc5":"code","34533dfb":"code","7e24b0c4":"code","b206af4a":"code","d641b91e":"code","be3d7897":"code","2608c875":"code","8d55252f":"code","ea0100b9":"code","6999dea4":"code","9425346b":"code","00147019":"code","c6f7479b":"code","e0d3863f":"code","0ec42fb6":"code","3585b5b5":"code","02d5db12":"code","02f203e9":"code","e55e9b1e":"code","f9e98188":"code","6659335d":"code","ef0400be":"code","a85adca4":"code","15c6aafe":"code","859c2590":"code","73cbf968":"code","7a87d010":"code","fa7b9066":"code","4aef14bf":"code","2e21d332":"code","a5451a10":"code","2b92effb":"code","fa23f99d":"code","57258a29":"code","197f9397":"code","d471b269":"code","f19f0a86":"code","253754d8":"code","f6978344":"code","9b544b89":"code","b178e280":"code","a8ffc153":"code","7ce68852":"code","e798ab69":"code","4790da6d":"code","f3231e09":"code","a85ce0aa":"code","bd460a5f":"code","0089505c":"code","c21ba3a5":"code","a38eba93":"code","b7ae7a69":"code","81b85842":"code","109fa033":"code","4ca0d587":"code","9d2ca9ed":"code","cabce15b":"code","3e4a5b63":"code","2a4b6ef7":"code","ab87233f":"code","fe8b51d4":"code","9f1e07db":"code","ec4d97f0":"code","2e44a4c4":"code","1e7cea38":"code","e6e3efcb":"code","a1594bbb":"code","baa344a8":"code","ac6a864c":"code","2ea27fce":"code","fd3c05a5":"code","ca348f63":"code","63addc38":"code","84864770":"code","1a3a50d1":"code","dfd9e6ae":"code","3b8d9a52":"code","8d06f5c7":"code","0063e6b9":"code","2c2eae71":"code","a8f71f4f":"code","4c723d5e":"code","e015fddf":"code","ab9edcf4":"code","fa7299d9":"code","1220450c":"code","ff20a4cd":"code","cf113637":"code","299ac9fa":"code","d00594d3":"code","04f7c94a":"code","87de1160":"code","a302e816":"code","8305a522":"code","c04df22d":"code","54f4acc4":"code","91de2de3":"code","32fa5150":"code","25a4c127":"code","4db6a796":"code","37f21ed2":"code","103f53ee":"code","bde0912b":"code","2d19c2af":"code","3ad0034f":"code","9a480490":"code","0747d644":"code","217541be":"code","020ce1a7":"code","54e1b9bb":"code","3b468fce":"code","e4f52ed9":"code","c049ef2b":"code","a191b8db":"code","5423fea3":"code","8c3586ac":"code","fb01619d":"code","9221bde3":"code","efcf71ce":"code","2dbbb46f":"code","aa6c725f":"code","343ad9f0":"code","48b322de":"code","7a08afca":"code","b1e7794d":"code","56cd0945":"code","80ebb07e":"code","bfe3d710":"code","1c84b1f5":"code","bb3fb80c":"code","62305068":"code","35fe4043":"code","6ecb9307":"code","bdeb541a":"code","87797fc3":"code","2c47c5a6":"code","71fdd7fc":"code","989ecdb0":"code","a4ce7f1e":"code","2a70a5f8":"code","b371b621":"code","6274ee81":"code","26e61cf7":"code","b4765663":"code","ab702842":"code","8c181532":"code","9b5dfbc8":"code","78d79a06":"code","504303e3":"code","2033a446":"code","977a823a":"code","90215b24":"code","785d9d1e":"markdown","5223a50e":"markdown","4c4911fb":"markdown","c4a97c1a":"markdown","ac6df2a1":"markdown","c0f7df60":"markdown","f5c944c1":"markdown","05d43c00":"markdown","d127ad40":"markdown","a50519fe":"markdown","9e3648ea":"markdown","4ebfcbfb":"markdown","f1086611":"markdown","26774d2d":"markdown","a7964b07":"markdown","64a91d2b":"markdown","29517182":"markdown","98f34c74":"markdown","e98ed303":"markdown","3c799644":"markdown","7f6e5548":"markdown","d7c763b3":"markdown","e332039e":"markdown","77274d33":"markdown","295164e1":"markdown","88d3bb00":"markdown","a20d2136":"markdown","416a3828":"markdown","eff91a53":"markdown","d438dca3":"markdown","db414f60":"markdown","6e62d342":"markdown","36583a47":"markdown","1fa0b247":"markdown","9e1f3146":"markdown","3df4fc8c":"markdown","4b528b3a":"markdown","a8520f7b":"markdown","6259434f":"markdown","6fd21ac8":"markdown","ebc42cad":"markdown","aff98150":"markdown","3a80d56e":"markdown","5c404f0b":"markdown","594b25a4":"markdown","d2dfbb23":"markdown","b9c31141":"markdown","a5f69982":"markdown","198c2e52":"markdown","1a68c484":"markdown","cc41323f":"markdown","f2de0a53":"markdown","4fd4248a":"markdown","73bfbe97":"markdown","07ad4fff":"markdown","fcc84d19":"markdown","5667bdc0":"markdown","ef4428d5":"markdown","187419b9":"markdown","990ee677":"markdown","1d93bfad":"markdown","834f1c3a":"markdown"},"source":{"951ba7ee":"import numpy as np\nimport pandas as pd","a0747075":"# visualization\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom mpl_toolkits.basemap import Basemap\nimport folium\nfrom folium import plugins","005496f1":"from sklearn.cross_validation import train_test_split","341ecba9":"from sklearn import linear_model\nimport statsmodels.api as sm","88b9c922":"df = pd.read_csv('..\/input\/crime.csv', encoding='latin-1')","13ff3b34":"def print_five_rows(name_column):\n    return df[name_column][0:5]","7eaa90fd":"def describe_column(name_column):\n    return df[name_column].describe()","3a35def2":"def create_list_number_crime(name_column, list_unique):\n    # list_unique = df[name_column].unique()\n    \n    i = 0\n    \n    list_number = list()\n    \n    while i < len(list_unique):\n        list_number.append(len(df.loc[df[name_column] == list_unique[i]]))\n        i += 1\n    \n    return list_unique, list_number","a3512c27":"def pie_plot(list_number, list_unique):\n    plt.figure(figsize=(20,10))\n    plt.pie(list_unique, \n        labels=list_number,\n        autopct='%1.1f%%', \n        shadow=True, \n        startangle=140)\n \n    plt.axis('equal')\n    plt.show()\n    return 0","f354f514":"def bar_chart(list_number, list_unique):\n    objects = list_unique\n    y_pos = np.arange(len(objects))\n    performance = list_number\n \n    plt.figure(figsize=(20,10))    \n    plt.bar(y_pos, performance, align='center', alpha=0.5)\n    plt.xticks(y_pos, objects)\n    plt.ylabel('Number') \n    plt.show()\n    \n    return 0","32db661d":"def drop_NaN_two_var(x, y):\n\n    df1 = df[[x, y]].dropna()\n    print(df1.shape)\n\n    x_value = df1[x]\n    y_value = df1[y]\n\n    del df1\n        \n    print(x + ': ' + str(x_value.shape))\n    print(y + ': ' + str(y_value.shape))\n        \n    return x_value, y_value","4883d614":"def function_OLS_Regression(x, y):\n    \n    model = sm.OLS(y, x)\n    res = model.fit()\n    return res.summary()","4fc90231":"df.shape","61b20b32":"df.columns","f054a527":"df.isnull().sum()","58a990a7":"print_five_rows('INCIDENT_NUMBER')","be6f8968":"describe_column('INCIDENT_NUMBER')","22e78223":"df = df.drop('INCIDENT_NUMBER', 1)","5a85c1d2":"print_five_rows('OFFENSE_CODE')","f37ee661":"len(df['OFFENSE_CODE'].unique())","5b4e3287":"print_five_rows('OFFENSE_CODE_GROUP')","c8295d62":"describe_column('OFFENSE_CODE_GROUP')","8e5f0739":"print_five_rows('OFFENSE_DESCRIPTION')","8b91e788":"describe_column('OFFENSE_DESCRIPTION')","9d112a62":"print_five_rows('DISTRICT')","8906777c":"describe_column('DISTRICT')","06c3c89b":"df['DISTRICT'].unique()","091ea3ae":"print_five_rows('REPORTING_AREA')","56ef769c":"describe_column('REPORTING_AREA')","879f0e10":"print_five_rows('SHOOTING')","1c0a5d52":"df['SHOOTING'].unique()","71dfbbc5":"print_five_rows('OCCURRED_ON_DATE')","34533dfb":"df['OCCURRED_ON_DATE'] = pd.to_datetime(df['OCCURRED_ON_DATE'])","7e24b0c4":"describe_column('OCCURRED_ON_DATE')","b206af4a":"print_five_rows('YEAR')","d641b91e":"df['MONTH'].unique()","be3d7897":"df['DAY_OF_WEEK'].unique()","2608c875":"df['HOUR'].unique()","8d55252f":"df['UCR_PART'].unique()","ea0100b9":"print_five_rows('STREET')","6999dea4":"describe_column('STREET')","9425346b":"df[['Lat', 'Long']].head()","00147019":"describe_column('Lat')","c6f7479b":"describe_column('Long')","e0d3863f":"df['Location'].head()","0ec42fb6":"plt.figure(figsize=(16,8))\ndf['DISTRICT'].value_counts().plot.bar()\nplt.show()","3585b5b5":"# 2015\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2015].value_counts().plot.bar()\nplt.show()\n\n# 2016\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2016].value_counts().plot.bar()\nplt.show()\n\n# 2017\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2017].value_counts().plot.bar()\nplt.show()\n\n# 2018\nplt.figure(figsize=(8,4))\ndf['DISTRICT'].loc[df['YEAR']==2018].value_counts().plot.bar()\nplt.show()","02d5db12":"i = 1\n\nwhile i < 13:\n    print('== ' + str(i) + ' ==')\n    print(df['DISTRICT'].loc[df['MONTH']==i].value_counts())\n    i +=1","02f203e9":"list_unique_year, list_number_year = create_list_number_crime('YEAR',df['YEAR'].unique())","e55e9b1e":"pie_plot(list_unique_year, list_number_year)","f9e98188":"bar_chart(list_number_year,list_unique_year)","6659335d":"list_unique_month, list_number_month = create_list_number_crime('MONTH',list(range(1,13)))","ef0400be":"# pie_plot(list_unique_month,list_number_month)","a85adca4":"bar_chart(list_number_month,list_unique_month)","15c6aafe":"day_of_week = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')","859c2590":"list_unique_day, list_number_day = create_list_number_crime('DAY_OF_WEEK',day_of_week)","73cbf968":"#pie_plot(list_unique_day,list_number_day)","7a87d010":"bar_chart(list_number_day,list_unique_day)","fa7b9066":"list_unique_hour, list_number_hour = create_list_number_crime('HOUR',list(range(0,24)))","4aef14bf":"# pie_plot(list_unique_hour, list_number_hour)","2e21d332":"bar_chart(list_number_hour,list_unique_hour)","a5451a10":"df['SHOOTING'].fillna(0, inplace = True)\n\ndf['SHOOTING'] = df['SHOOTING'].map({\n    0: 0,\n    'Y':1\n})","2b92effb":"shoot_true = len(df.loc[df['SHOOTING'] == 1])\nshoot_false = len(df.loc[df['SHOOTING'] == 0])","fa23f99d":"print('With shooting(num): ' + str(shoot_true))\nprint('With shooting(%):   ' + str(round(shoot_true*100\/len(df),2))+'%')\nprint()\nprint('Without shooting(num): ' + str(shoot_false))\nprint('Without shooting(%):   ' + str(round(shoot_false*100\/len(df),2))+'%')","57258a29":"df_shoot = df.loc[df['SHOOTING'] == 1]\ndf_shoot.shape","197f9397":"shoot_y_2015 = len(df_shoot.loc[df_shoot['YEAR'] == 2015])\nshoot_y_2016 = len(df_shoot.loc[df_shoot['YEAR'] == 2016])\nshoot_y_2017 = len(df_shoot.loc[df_shoot['YEAR'] == 2017])\nshoot_y_2018 = len(df_shoot.loc[df_shoot['YEAR'] == 2018])\n\nunique_shoot_year = '2015', '2016', '2017', '2018'\nnumber_shoot_year = [shoot_y_2015, shoot_y_2016, shoot_y_2017, shoot_y_2018]","d471b269":"# pie_plot(unique_shoot_year,number_shoot_year)","f19f0a86":"bar_chart(number_shoot_year,unique_shoot_year)","253754d8":"i = 1\nlist_month = list()\n\nwhile i <= 12:\n    list_month.append(len(df_shoot.loc[df_shoot['MONTH'] == i]))\n    i+=1","f6978344":"# pie_plot(list(range(1,13)), list_month)","9b544b89":"bar_chart(list_month,list(range(1,13)))","b178e280":"day_of_week = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')\n\ni = 0\nday_number = list()\n\nwhile i < 7:\n    day_number.append(len(df_shoot.loc[df_shoot['DAY_OF_WEEK'] == day_of_week[i]]))\n    \n    i +=1","a8ffc153":"# pie_plot(day_of_week, day_number)","7ce68852":"bar_chart(day_number,day_of_week)","e798ab69":"i = 0\nhour_number = list()\n\nwhile i < 24:\n    hour_number.append(len(df_shoot.loc[df_shoot['HOUR'] == i]))\n    i +=1","4790da6d":"# pie_plot(list(range(0,24)), hour_number)","f3231e09":"bar_chart(hour_number,list(range(0,24)))","a85ce0aa":"plt.figure(figsize=(20,10))\ndf_shoot['DISTRICT'].value_counts().plot.bar()\nplt.show()","bd460a5f":"location_shoot = df_shoot[['Lat','Long']]\nlocation_shoot = location_shoot.dropna()\n\nlocation_shoot = location_shoot.loc[(location_shoot['Lat']>40) & (location_shoot['Long'] < -60)]  \n\nx_shoot = location_shoot['Long']\ny_shoot = location_shoot['Lat']\n\n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\nsns.jointplot(x_shoot, y_shoot, kind='scatter')\nsns.jointplot(x_shoot, y_shoot, kind='hex')\nsns.jointplot(x_shoot, y_shoot, kind='kde')","0089505c":"plt.figure(figsize=(20,10))\ndf['UCR_PART'].value_counts().plot.bar()\nplt.show()","c21ba3a5":"df[['Lat','Long']].describe()","a38eba93":"location = df[['Lat','Long']]\nlocation = location.dropna()\n\nlocation = location.loc[(location['Lat']>40) & (location['Long'] < -60)]  ","b7ae7a69":"x = location['Long']\ny = location['Lat']\n\n\ncolors = np.random.rand(len(x))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","81b85842":"m = folium.Map([42.348624, -71.062492], zoom_start=11)\nm","109fa033":"x = location['Long']\ny = location['Lat']\n\n\n# Custom the inside plot: options are: \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d\nsns.jointplot(x, y, kind='scatter')\nsns.jointplot(x, y, kind='hex')\nsns.jointplot(x, y, kind='kde')","4ca0d587":"#plt.figure(figsize=(20,20))\n\n#map = Basemap(\n#    projection='merc', \n#    lat_0 = 42.2, \n#    lon_0 = -70.9,\n#    resolution = 'h', \n#    area_thresh = 0.1,\n#    llcrnrlon=-70.8, \n#    llcrnrlat=42.2,\n#    urcrnrlon=-71.5, \n#    urcrnrlat=42.5\n#)\n \n#map.drawcoastlines()\n#map.drawcountries()\n#map.fillcontinents(color = 'coral')\n#map.drawmapboundary()\n\n#lons = list(long[0:1000])\n#lats = list(lat[0:1000])\n#x,y = map(lons, lats)\n#map.plot(x, y, 'bo', markersize=3)\n\n#plt.show()","9d2ca9ed":"df.isnull().sum()","cabce15b":"df['Day'] = 0","3e4a5b63":"df['Night'] = 0","2a4b6ef7":"# Day or night for 1st month\ndf['Day'].loc[(df['MONTH'] == 1) & (df['HOUR'] >= 6) & (df['HOUR'] <= 18)] = 1\n\n# Day or night for 2st month\ndf['Day'].loc[(df['MONTH'] == 2) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# for 3st month\ndf['Day'].loc[(df['MONTH'] == 3) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 4st month\ndf['Day'].loc[(df['MONTH'] == 4) & (df['HOUR'] >= 5) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 5st month\ndf['Day'].loc[(df['MONTH'] == 5) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 6st month\ndf['Day'].loc[(df['MONTH'] == 6) & (df['HOUR'] >= 4) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 7st month\ndf['Day'].loc[(df['MONTH'] == 7) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 8st month\ndf['Day'].loc[(df['MONTH'] == 8) & (df['HOUR'] >= 5) & (df['HOUR'] <= 21)] = 1\n\n# Day or night for 9st month\ndf['Day'].loc[(df['MONTH'] == 9) & (df['HOUR'] >= 6) & (df['HOUR'] <= 20)] = 1\n\n# Day or night for 10st month\ndf['Day'].loc[(df['MONTH'] == 10) & (df['HOUR'] >= 6) & (df['HOUR'] <= 19)] = 1\n\n# Day or night for 11st month\ndf['Day'].loc[(df['MONTH'] == 11) & (df['HOUR'] >= 6) & (df['HOUR'] <= 17)] = 1\n\n# Day or night for 12st month\ndf['Day'].loc[(df['MONTH'] == 12) & (df['HOUR'] >= 7) & (df['HOUR'] <= 17)] = 1","ab87233f":"df['Night'].loc[df['Day']==0]=1","fe8b51d4":"plt.figure(figsize=(16,8))\ndf['Night'].value_counts().plot.bar()\nplt.show()","9f1e07db":"df['OFFENSE_CODE_GROUP'].value_counts().head(15)","ec4d97f0":"list_offense_code_group = ('Motor Vehicle Accident Response',\n                           'Larceny',\n                           'Medical Assistance',\n                           'Investigate Person',\n                           'Other',\n                           'Drug Violation',\n                           'Simple Assault',\n                           'Vandalism',\n                           'Verbal Disputes',\n                           'Towed',\n                           'Investigate Property',\n                           'Larceny From Motor Vehicle')","2e44a4c4":"df_model = pd.DataFrame()","1e7cea38":"i = 0\n\nwhile i < len(list_offense_code_group):\n\n    df_model = df_model.append(df.loc[df['OFFENSE_CODE_GROUP'] == list_offense_code_group[i]])\n    \n    i+=1","e6e3efcb":"list_column = ['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night']","a1594bbb":"df_model = df_model[list_column]","baa344a8":"# DISTRICT\n\ndf_model['DISTRICT'] = df_model['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model['DISTRICT'].unique()","ac6a864c":"# REPORTING_AREA\n\ndf_model['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","2ea27fce":"# MONTH\n\ndf_model['MONTH'].unique()","fd3c05a5":"# DAY_OF_WEEK\n\ndf_model['DAY_OF_WEEK'] = df_model['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model['DAY_OF_WEEK'].unique()","ca348f63":"# HOUR\n\ndf_model['HOUR'].unique()","63addc38":"# Lat, Long\n\ndf_model[['Lat', 'Long']].head()","84864770":"df_model.fillna(0, inplace = True)","1a3a50d1":"x = df_model[['DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK','HOUR','Lat','Long','Day','Night']]","dfd9e6ae":"y = df_model['OFFENSE_CODE_GROUP']","3b8d9a52":"y.unique()","8d06f5c7":"y = y.map({\n    'Motor Vehicle Accident Response':1, \n    'Larceny':2, \n    'Medical Assistance':3,\n    'Investigate Person':4, \n    'Other':5, \n    'Drug Violation':6, \n    'Simple Assault':7,\n    'Vandalism':8, \n    'Verbal Disputes':9, \n    'Towed':10, \n    'Investigate Property':11,\n    'Larceny From Motor Vehicle':12\n})","0063e6b9":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","2c2eae71":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.tree import ExtraTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.semi_supervised import LabelSpreading\nfrom sklearn.svm import LinearSVC\nfrom sklearn.neighbors.nearest_centroid import NearestCentroid\nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier","a8f71f4f":"from sklearn.metrics import f1_score","4c723d5e":"def fun_results(result):\n    print('mean: ' + str(result.mean()))\n    print('max: ' + str(result.max()))\n    print('min: ' + str(result.min()))\n    return result","e015fddf":"# DecisionTreeClassifier\n\ndef fun_DecisionTreeClassifier(X_train, Y_train):\n    dec_tree = DecisionTreeClassifier()\n    dec_tree = dec_tree.fit(X_train, Y_train)\n\n    dec_tree_pred = dec_tree.predict(X_test)\n\n    dec_tree_score = f1_score(Y_test, dec_tree_pred, average=None)\n    return fun_results(dec_tree_score)\n\nfun_DecisionTreeClassifier(X_train, Y_train)","ab9edcf4":"# BernoulliNB\n\ndef fun_BernoulliNB(X_train, Y_train):\n    bernoulli = BernoulliNB()\n    bernoulli = bernoulli.fit(X_train, Y_train)\n\n    bernoulli_pred = bernoulli.predict(X_test)\n\n    bernoulli_score = f1_score(Y_test, bernoulli_pred, average=None)\n    return fun_results(bernoulli_score)\n\nfun_BernoulliNB(X_train, Y_train)","fa7299d9":"# ExtraTreeClassifier\n\ndef fun_ExtraTreeClassifier(X_train, Y_train):\n    ext_tree = ExtraTreeClassifier()\n    ext_tree = ext_tree.fit(X_train, Y_train)\n\n    ext_tree_pred = ext_tree.predict(X_test)\n\n    ext_tree_score = f1_score(Y_test, ext_tree_pred, average=None)\n    return fun_results(ext_tree_score)\n\nfun_ExtraTreeClassifier(X_train, Y_train)","1220450c":"# KNeighborsClassifier\n\ndef fun_KNeighborsClassifier(X_train, Y_train):\n    neigh = KNeighborsClassifier()\n    neigh.fit(X_train, Y_train) \n\n    neigh_pred = neigh.predict(X_test)\n\n    neigh_score = f1_score(Y_test, neigh_pred, average=None)\n    return fun_results(neigh_score)\n\nfun_KNeighborsClassifier(X_train, Y_train)","ff20a4cd":"# GaussianNB\n\ndef fun_GaussianNB(X_train, Y_train):\n    gauss = GaussianNB()\n    gauss = gauss.fit(X_train, Y_train)\n\n    gauss_pred = gauss.predict(X_test)\n\n    gauss_score = f1_score(Y_test, gauss_pred, average=None)\n    return fun_results(gauss_score)\n\nfun_GaussianNB(X_train, Y_train)","cf113637":"# RandomForestClassifier\n\ndef fun_RandomForestClassifier(X_train, Y_train):\n    rfc = RandomForestClassifier()\n    rfc = rfc.fit(X_train, Y_train)\n\n    rfc_pred = rfc.predict(X_test)\n\n    rfc_score = f1_score(Y_test, rfc_pred, average=None)\n    return fun_results(rfc_score)\n\nfun_RandomForestClassifier(X_train, Y_train)","299ac9fa":"# LGBMClassifier\n\ndef fun_LGBMClassifier(X_train, Y_train):\n    clf = LGBMClassifier()\n    clf.fit(X_train, Y_train)\n\n    clf_pred = clf.predict(X_test)\n\n    clf_score = f1_score(Y_test, clf_pred, average=None)\n    return fun_results(clf_score)\n\nfun_LGBMClassifier(X_train, Y_train)","d00594d3":"df_model_2 = df[['OFFENSE_CODE', 'DISTRICT','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]","04f7c94a":"df_model_2['OFFENSE_CODE'] = pd.to_numeric(df_model_2['OFFENSE_CODE'], errors='coerce')","87de1160":"# DISTRICT\n\ndf_model_2['DISTRICT'] = df_model_2['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})\n\ndf_model_2['DISTRICT'].unique()","a302e816":"# DAY_OF_WEEK\n\ndf_model_2['DAY_OF_WEEK'] = df_model_2['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})\n\ndf_model_2['DAY_OF_WEEK'].unique()","8305a522":"df_model_2.isnull().sum()","c04df22d":"df_model_2 = df_model_2.dropna()","54f4acc4":"df_model_2['DISTRICT'].unique()","91de2de3":"df_model_2.shape","32fa5150":"x = df_model_2[['OFFENSE_CODE','MONTH','DAY_OF_WEEK','HOUR','Day','Night']]\ny = df_model_2['DISTRICT']","25a4c127":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","4db6a796":"fun_DecisionTreeClassifier(X_train, Y_train)\n","37f21ed2":"fun_BernoulliNB(X_train, Y_train)","103f53ee":"fun_ExtraTreeClassifier(X_train, Y_train)","bde0912b":"fun_KNeighborsClassifier(X_train, Y_train)","2d19c2af":"fun_GaussianNB(X_train, Y_train)","3ad0034f":"fun_RandomForestClassifier(X_train, Y_train)","9a480490":"fun_LGBMClassifier(X_train, Y_train)","0747d644":"df_model3 = df[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','UCR_PART','Lat','Long']]","217541be":"df_model3['DISTRICT'] = df_model3['DISTRICT'].map({\n    'B3':1, \n    'E18':2, \n    'B2':3, \n    'E5':4, \n    'C6':5, \n    'D14':6, \n    'E13':7, \n    'C11':8, \n    'D4':9, \n    'A7':10, \n    'A1':11, \n    'A15':12\n})","020ce1a7":"# REPORTING_AREA\n\ndf_model3['REPORTING_AREA'] = pd.to_numeric(df_model3['REPORTING_AREA'], errors='coerce')","54e1b9bb":"# DAY_OF_WEEK\n\ndf_model3['DAY_OF_WEEK'] = df_model3['DAY_OF_WEEK'].map({\n    'Tuesday':2, \n    'Saturday':6, \n    'Monday':1, \n    'Sunday':7, \n    'Thursday':4, \n    'Wednesday':3,\n    'Friday':5\n})","3b468fce":"df_model3['UCR_PART'].unique()","e4f52ed9":"df_model3['UCR_PART'] = df_model3['UCR_PART'].map({\n    'Part Three':3, \n    'Part One':1, \n    'Part Two':2, \n#    'Other':4\n})","c049ef2b":"df_model3 = df_model3.dropna()\nprint(df_model3.shape)\ndf_model3.isnull().sum()","a191b8db":"x = df_model3[['DISTRICT','REPORTING_AREA', 'MONTH','DAY_OF_WEEK','HOUR','Lat','Long']]\ny = df_model3['UCR_PART']","5423fea3":"# Split dataframe into random train and test subsets\n\nX_train, X_test, Y_train, Y_test = train_test_split(\n    x,\n    y, \n    test_size = 0.1,\n    random_state=42\n)\n\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","8c3586ac":"fun_DecisionTreeClassifier(X_train, Y_train)","fb01619d":"fun_BernoulliNB(X_train, Y_train)","9221bde3":"fun_ExtraTreeClassifier(X_train, Y_train)","efcf71ce":"fun_KNeighborsClassifier(X_train, Y_train)","2dbbb46f":"fun_GaussianNB(X_train, Y_train)","aa6c725f":"fun_RandomForestClassifier(X_train, Y_train)","343ad9f0":"fun_LGBMClassifier(X_train, Y_train)","48b322de":"location.isnull().sum()","7a08afca":"location.shape","b1e7794d":"x = location['Long']\ny = location['Lat']\n\ncolors = np.random.rand(len(location))\n\nplt.figure(figsize=(20,20))\nplt.scatter(x, y,c=colors, alpha=0.5)\nplt.show()","56cd0945":"from sklearn.cluster import KMeans","80ebb07e":"X = location\nX = X[~np.isnan(X)]","bfe3d710":"#K means Clustering #K means  \ndef doKmeans(X, nclust):\n    model = KMeans(nclust)\n    model.fit(X)\n    clust_labels = model.predict(X)\n    cent = model.cluster_centers_\n    return (clust_labels, cent)\n\nclust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","1c84b1f5":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","bb3fb80c":"X = location\nX = X[~np.isnan(X)]","62305068":"clust_labels, cent = doKmeans(X, 3)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","35fe4043":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","6ecb9307":"X = location\nX = X[~np.isnan(X)]","bdeb541a":"clust_labels, cent = doKmeans(X, 5)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","87797fc3":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","2c47c5a6":"X = location\nX = X[~np.isnan(X)]","71fdd7fc":"clust_labels, cent = doKmeans(X, 10)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","989ecdb0":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=50)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","a4ce7f1e":"df_clus = df[['OFFENSE_CODE','Long','Lat']]","2a70a5f8":"df_clus = df_clus.loc[(df_clus['Lat'] > 40) & (df_clus['Long'] < -60)]","b371b621":"#df_clus['REPORTING_AREA'] = pd.to_numeric(df_model['REPORTING_AREA'], errors='coerce')","6274ee81":"df_clus = df_clus.dropna()","26e61cf7":"df_clus.describe()","b4765663":"X = df_clus\nX = X[~np.isnan(X)]","ab702842":"clust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","8c181532":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=5)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","9b5dfbc8":"df_clus = df[['MONTH','Long','Lat']]","78d79a06":"df_clus = df_clus.loc[(df_clus['Lat'] > 40) & (df_clus['Long'] < -60)]","504303e3":"df_clus = df_clus.dropna()","2033a446":"X = df_clus\nX = X[~np.isnan(X)]","977a823a":"clust_labels, cent = doKmeans(X, 2)\nkmeans = pd.DataFrame(clust_labels)\nX.insert((X.shape[1]),'kmeans',kmeans)","90215b24":"#Plot the clusters obtained using k means#Plot the \nfig = plt.figure(figsize=(20,20))\nax = fig.add_subplot(111)\nscatter = ax.scatter(X['Long'],X['Lat'],\n                     c=kmeans[0],s=5)\nax.set_title('K-Means Clustering')\nax.set_xlabel('Long')\nax.set_ylabel('Lat')\nplt.colorbar(scatter)","785d9d1e":"### 4.7. SHOOTING","5223a50e":"#### 5.6.1. Shooting & year","4c4911fb":"### 4.4. OFFENSE_DESCRIPTION\n\nDescription for offence. Maybe, i will use for statistics research and modeling.","c4a97c1a":" ### 6.6. Clustering with location and month","ac6df2a1":"### 5 clusters","c0f7df60":"### 4.15. Lat \/ Long","f5c944c1":"# 4. First data research","05d43c00":"### 5.5. Total number crime for each hour","d127ad40":"#### 5.6.2. Shooting & month","a50519fe":"# Crimes in Boston\n## More than 2,60,760 crimes in Boston (2015- 2018)","9e3648ea":"### 4.1. INCIDENT_NUMBER (*will delete*)\n\nNumber for incident. This indicator is **difficult** for visualization, modeling and other research. I will **not** use it.","4ebfcbfb":"#### Day or Night\n\n###### Link\n\nhttps:\/\/www.timeanddate.com\/sun\/usa\/boston","f1086611":"### 4.5. DISTRICT\n\nDistrict. I will use it for reaearch, modeling and visualization.","26774d2d":"## 3.3. Function for modeling and cleaning","a7964b07":"#### 5.6.6. Shooting and location","64a91d2b":"### Inspiration\n\n1. How has crime changed over the years?\n2. Is it possible to predict where or when a crime will be committed?\n3. Which areas of the city have evolved over this time span?\n4. In which area most crimes are committed?","29517182":"### 2 clus","98f34c74":"#### KMeans","e98ed303":"### Content\n\n1. Import\n2. Read data\n3. Function\n4. First data research\n5. Visualization\n6. Model (Multi classification \/ Clustering)","3c799644":"### 4.11. DAY_OF_WEEK","7f6e5548":"### 5.4. Total number crime for each day of week","d7c763b3":"# 3. Function","e332039e":"#### 6.1.3. Models","77274d33":"## 6.2. Multi classification\nY - DISTRICT\n\nX - OFFENSE_CODE_GROUP, Month, Day of week, Hour, Day, Night\n","295164e1":"#### 5.7. UCR_PART","88d3bb00":"![](https:\/\/www.techemergence.com\/wp-content\/uploads\/2017\/11\/ai-for-crime-prevention-and-detection-5-current-applications.png)","a20d2136":"### 4.13. UCR_PART","416a3828":"### 4.10. MONTH","eff91a53":"### 3 clusters","d438dca3":"### 5.2. Total number crime for each year","db414f60":"### 5.1. District","6e62d342":"### 6.1. Multi classification\nY - OFFENSE_CODE_GROUP\n\nX - 'DISTRICT','REPORTING_AREA','MONTH','DAY_OF_WEEK',\n               'HOUR','Lat','Long', 'OFFENSE_CODE_GROUP','Day','Night'","36583a47":"# Create new var","1fa0b247":"# 2. Read data","9e1f3146":"### 10 clusters","3df4fc8c":"### 2 clusters","4b528b3a":"#### 6.1.2. Split data for *sklearn.multiclass*","a8520f7b":"### 6.3. Multi classification - > UCR_PART\n\nY - UCR_PART\n\nX - DISTRICT, REPORTING_AREA, MONTH, DAY_OF_WEEK, HOUR, LATITUDE, LONGITUDE","6259434f":"### 6.5. Clustering with location and OFFENSE_CODE","6fd21ac8":"### 4.12. HOUR","ebc42cad":"## 3.2. Function for visualization","aff98150":"# 1. Import","3a80d56e":"#### 5.6.4. Shooting & hour","5c404f0b":"### 4.8. OCCURRED_ON_DATE","594b25a4":"## 3.1. Function for research","d2dfbb23":"#### 5.6.3. Shooting & day of week","b9c31141":"# 5. Visualization","a5f69982":"**Data**:  https:\/\/www.kaggle.com\/ankkur13\/boston-crime-data\n\nThis is a dataset containing records from the new crime incident report system, which includes a reduced set of fields focused on capturing the type of incident as well as when and where it occurred.","198c2e52":"### 5.6. SHOOTING","1a68c484":"### 4.3. OFFENSE_CODE_GROUP\n\nCode for offence`s group. Maybe, i will use for statistics research and modeling.","cc41323f":"### 4.9. YEAR","f2de0a53":"### 4.14. STREET","4fd4248a":"### 4.16. Location","73bfbe97":"### 4.2. OFFENSE_CODE\n\nCode for offence. Maybe, i will use for statistics research and modeling.","07ad4fff":"### Conclusions\n1. See visualization (**5.2. Total number crime for each year**)\n2. It is hard for predict. It is not possible with this data. We need to more date. For example, promenade zone, street type and so on.\n3. Not more evoluted (**5.1. District**)\n4. See visualization (**5.6.7. Lat, Long**)","fcc84d19":"## 6.4. Clustering location","5667bdc0":"## *This is a work in progress. Comments and critical feedback are always welcome.*","ef4428d5":"### 4.6. REPORTING_AREA","187419b9":"# 6. Modeling","990ee677":"\n#### 5.8. Lat, Long","1d93bfad":"#### 5.6.5. Shooting & District","834f1c3a":"### 5.3.  Total number crime for each month"}}