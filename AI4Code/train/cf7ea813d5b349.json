{"cell_type":{"ded1ff9a":"code","e77f7862":"code","2765fea4":"code","856e0064":"code","dfe10509":"code","477495c5":"code","5e83fef2":"code","8868edff":"code","df57314e":"code","92576bf2":"code","31044d03":"code","23bd1eb2":"code","549370a5":"code","f05477dc":"code","013068df":"code","5aa7e2e1":"code","825c82ed":"code","04b87b73":"code","77ebee5f":"markdown","eb488605":"markdown","92dcbb16":"markdown","93552ab1":"markdown","442ce4ff":"markdown","9dc29df2":"markdown","d71d6e46":"markdown","43aef135":"markdown"},"source":{"ded1ff9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e77f7862":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","2765fea4":"train.isnull().sum()","856e0064":"#For \"Cabin\", the portion of missing values exceeds 25%. I drop the whole column.\ntrain.drop(\"Cabin\", axis = 1, inplace = True)\n#For \"Age\", I replace nans with average age.\ntrain[\"Age\"].fillna(train[\"Age\"].mean(), inplace = True)","dfe10509":"train.drop(['PassengerId', 'Name', 'Ticket',\"Embarked\",'Pclass'], axis = 1, inplace = True)\ntrain.loc[train['Sex']=='male','Sex'] = 1\ntrain.loc[train['Sex']=='female', 'Sex'] = 0","477495c5":"train.isnull().sum()","5e83fef2":"x_train = train.drop(\"Survived\", axis = 1, inplace = False)\ny_train = train[\"Survived\"]","8868edff":"x_train.info()","df57314e":"#logistic regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nlr_parameters = {'C':[0.1, 1, 3, 5, 10]}\nlr_model = LogisticRegression()\ngridcv_lr = GridSearchCV(lr_model, lr_parameters, cv = 10)\ngridcv_lr.fit(x_train, y_train)\nprint(gridcv_lr.best_estimator_.__class__.__name__)\nprint(gridcv_lr.best_params_)\nprint(gridcv_lr.best_score_)","92576bf2":"#decision tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt_parameters = {'max_depth':[1, 3, 5, 10], 'min_samples_leaf':[1, 3, 5, 10]}\ndt = DecisionTreeClassifier()\ngridcv_dt = GridSearchCV(dt, dt_parameters, cv = 10)\ngridcv_dt.fit(x_train, y_train)\nprint(gridcv_dt.best_estimator_.__class__.__name__)\nprint(gridcv_dt.best_params_)\nprint(gridcv_dt.best_score_)","31044d03":"#random forest\nfrom sklearn.ensemble import RandomForestClassifier\nrf_parameters = {'max_depth':[1, 3, 5, 10], 'min_samples_leaf':[1, 3, 5, 10]}\nrf = RandomForestClassifier()\ngridcv_rf = GridSearchCV(rf, rf_parameters)\ngridcv_rf.fit(x_train, y_train)\nprint(gridcv_rf.best_estimator_.__class__.__name__)\nprint(gridcv_rf.best_params_)\nprint(gridcv_rf.best_score_)","23bd1eb2":"#record the best classifier\nclf = gridcv_dt.best_estimator_","549370a5":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head()","f05477dc":"test.info()","013068df":"test[\"Age\"].fillna(test[\"Age\"].mean(), inplace = True)\ntest.drop(['PassengerId', 'Name', 'Ticket',\"Embarked\", 'Cabin','Pclass'], axis = 1, inplace = True)\ntest.loc[test['Sex']=='male','Sex'] = 1\ntest.loc[test['Sex']=='female', 'Sex'] = 0\ntest[\"Fare\"].fillna(test[\"Fare\"].mean(), inplace = True)","5aa7e2e1":"test.info()","825c82ed":"prediction = clf.predict(test)","04b87b73":"test = pd.read_csv('..\/input\/titanic\/test.csv')\nmy_submission = pd.DataFrame({'PassengerId': test.PassengerId,\n                             'Survived': prediction})\nmy_submission.to_csv('titanic_submission.csv', index=False)","77ebee5f":"### Check whether there's missing value in training data.","eb488605":"From the result, we can see that \"Age\", \"Cabin\", and \"Embarked\" have missing values respectively.\n\nThere are several ways to deal with missing values.\n* Drop the missing values\n    1. Drop the whole column\n    2. Drop the row which contains missing value\n* Replace the missing values\n    1. Replace it with its average (continuous data)\n    2. Replace it by frequency (categorical data)","92dcbb16":"#### Handle the columns which contain missing values.","93552ab1":"## Data preprocessing","442ce4ff":"## Import data ","9dc29df2":"#### Handle the categorical features.","d71d6e46":"## Train the models \n* Train the models by using Logistic Regression, Decision Tree and Random Forest.\n* Use grid search to optimize the accuracy among these three models.","43aef135":"Check if the missing values exist after preprocessing."}}