{"cell_type":{"ced448fb":"code","bce521b9":"code","a996b196":"code","17f4cc7b":"code","f62f4c38":"code","6354a8cb":"code","7dfc92f0":"code","d689e35b":"code","897004fc":"code","89038477":"code","d80641dc":"code","4048b81b":"code","2f957607":"code","f7e9dc5b":"code","a526a710":"code","a14781c4":"code","e1002196":"code","1473a91b":"code","fab55367":"code","20acb8b9":"code","afd0e946":"markdown"},"source":{"ced448fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bce521b9":"df = pd.read_csv('..\/input\/Treatment Prediciton.csv')\ndf.shape","a996b196":"# Null values are coded as ? replaceing then with Nan\ndf.replace('?',np.nan, inplace=True)","17f4cc7b":"# Percent of null values present in the corresponding column\n\nnull = round(df.isnull().sum()\/len(df)*100,2)\nnull[null > 0]","f62f4c38":"# As Medical Speciality is important fill null values as Unknown\n\ndf.medical_specialty.fillna('Unknown', inplace=True)","6354a8cb":"# 2 Columns where gender is invalid\n\ndf[df['gender']=='Unknown\/Invalid'].iloc[:,:5]","7dfc92f0":"# Dropping weight, payercode columns due to high null values \n# Dropping empty records of race\n# Drop gender records that are invalid\n\ndf.drop(['weight','payer_code'],1, inplace=True)\ndf = df[df.race.notnull()]\ndf = df[df['gender']!='Unknown\/Invalid']\ndf.shape","d689e35b":"# Handling missing values in diagnosis\n# If newer diagnosis is null, take the result of previous diagnosis as the value\n\ndf.diag_1 = np.where(df.diag_1.isnull(), df.diag_2, df.diag_1)\n\ndf.diag_2 = np.where(df.diag_2.isnull(), df.diag_1, df.diag_2)\ndf.diag_3 = np.where(df.diag_3.isnull(), df.diag_2, df.diag_3)","897004fc":"null = round(df.isnull().sum()\/len(df)*100,2)\nnull[null > 0]\n\n# Null Values are treated","89038477":"# Converting Age \n\ndef Ageimpute(col):\n    if col=='[0-10)':\n        return 5\n    elif col=='[10-20)':\n        return 15\n    elif col=='[20-30)':\n        return 25\n    elif col=='[30-40)':\n        return 35\n    elif col=='[40-50)':\n        return 45\n    elif col=='[50-60)':\n        return 55\n    elif col=='[60-70)':\n        return 65\n    elif col=='[70-80)':\n        return 75\n    elif col=='[80-90)':\n        return 85\n    else:\n        return 95\n    \ndf.age = df.age.apply(Ageimpute)\ndf.age = df.age.astype(object)","d80641dc":"print('No of Admission Type : ',df.admission_type_id.nunique())\nprint('No of Discharge Type : ',df.discharge_disposition_id.nunique())\nprint('No of Sources Type   : ',df.admission_source_id.nunique())","4048b81b":"# Reducing Admission Type Id Categories\n\n# Emergency (1,2,7)\n# Elective (3)\n# Newborn (4)\n# Unknown (5,6,8)\n\ndef Admissiontype_impute(col):\n    if ((col == 1) or (col == 2) or (col == 7)):\n        return 'Emergency'\n    elif col == 3:\n        return 'Elective'\n    elif col == 4:\n        return 'Newborn'\n    else:\n        return 'Unknown'\n    \ndf.admission_type_id = df.admission_type_id.apply(Admissiontype_impute)","2f957607":"# Reducing Discharge Disposition Id Category\n\n# Home (1,6,7,8,13)\n# Hospital (2,9,10,22,23,28)\n# Discharged to special care facility (3,4,5,14,24,27)\n# Expired or hospice (11,19,20)\n# Outpatient (15,16,17)\n# Null\/Unknown (6,18,25)\n\ndef Discharge_impute(col):\n    if ((col == 1) or (col == 6) or (col == 7) or (col == 8) or (col == 13)):\n        return 'Home'\n    elif ((col == 2) or (col == 9) or (col == 10) or (col == 22) or (col == 23) or (col == 28)):\n        return 'Hospital'\n    elif ((col == 3) or (col == 4) or (col == 5) or (col == 14) or (col==24) or (col == 27)):\n        return 'SC_facility'\n    elif ((col == 11) or (col == 19) or (col==20)):\n        return 'Expired'\n    elif ((col == 15) or (col == 16) or (col == 17) or (col == 12)):\n        return 'Outpatient'\n    else:\n        return 'Unknown'\n\ndf.discharge_disposition_id = df.discharge_disposition_id.apply(Discharge_impute)","f7e9dc5b":"# Reducing Category Admission Source Id\n\n# 1. Referral (1,2,3)\n# 2. From another facility (4,5,6,10,22,25)\n# 3. Emergency (7)\n# 4. Law\/Enforcement (8)\n# 5. Null, Not mapped (9,17,20)\n# 6. Birth (11,13,14) \n\ndef Source_impute(col):\n    if ((col == 1) or (col == 2) or (col == 3)):\n        return 'Referrel'\n    elif ((col == 2) or (col == 4) or (col == 5) or (col == 6) or (col == 10) or (col == 22) or (col == 25)):\n        return 'Facility'\n    elif col == 7:\n        return 'Emergency'\n    elif col == 8:\n        return 'Law'\n    elif ((col == 9) or (col == 17) or (col == 20)):\n        return 'Unknown'\n    else:\n        return 'Birth'\n\ndf.admission_source_id = df.admission_source_id.apply(Source_impute)","a526a710":"# Dropping Expired and Hospice patients\n\ndf = df[df.discharge_disposition_id != 'Expired']","a14781c4":"## Removing the characters from diagnosis to group them\n\nimport re\ndf.diag_1 = df.diag_1.apply(lambda x: re.sub('[VE]','',str(x)))\ndf.diag_2 = df.diag_2.apply(lambda x: re.sub('[VE]','',str(x)))\ndf.diag_3 = df.diag_3.apply(lambda x: re.sub('[VE]','',str(x)))\n\n# Converting them back to float\ndf.diag_1 = df.diag_1.astype(float)\ndf.diag_2 = df.diag_2.astype(float)\ndf.diag_3 = df.diag_3.astype(float)","e1002196":"def diag_impute(col):\n    if np.floor(col == 250):\n        return 'Diabetes'\n    \n    elif ((col >= 390) and (col <= 459)) or (col == 785):\n        return ' Circulatory'\n    elif (col >=460 and col <=519) or (col == 786):\n        return 'Respiratory'\n    elif (col >= 520 and col <= 579) or (col == 787):\n        return 'Digestive'\n    elif (col>=800 and col<=999):\n        return 'Injury'\n    elif (col>=710 and col <=785):\n        return 'Musculoskeletal'\n    elif (col>=580 and col<=629) or col == 788:\n        return 'Genitourinary'\n    elif (col>=140 and col<=239):\n        return 'Neoplasm'\n    else :\n        return 'Other'\n    \ndf.diag_1 = df.diag_1.apply(diag_impute)\ndf.diag_2 = df.diag_2.apply(diag_impute)\ndf.diag_3 = df.diag_3.apply(diag_impute)","1473a91b":"df = df.drop(['encounter_id','patient_nbr'],1)\ndf.reset_index(inplace=True, drop=True)\ndf.head().T","fab55367":"df.describe().T","20acb8b9":"fig, axes = plt.subplots(1,2)\nfig.set_figwidth(16)\n\nsns.countplot(x= df['race'], hue = df['Target'], ax = axes[0]).set_title('Race VS. Medication')\nsns.countplot(df['gender'], hue = df['Target'], ax = axes[1]).set_title(\"Gender of Patient VS. Medication\")\n\naxes[0].set(xlabel = 'Race')\naxes[1].set(xlabel = 'Gender')\n            \nplt.tight_layout;","afd0e946":"## EDA"}}