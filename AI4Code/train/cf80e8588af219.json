{"cell_type":{"7d63704a":"code","cdc58d9f":"code","c6bdabe4":"code","8459aade":"code","8196516c":"code","057516ea":"code","ba2530f2":"code","0f74c3d7":"code","66243ce8":"code","fc14381e":"code","70610132":"code","d2bd4bf0":"code","3aef0e1d":"code","b4fe0836":"code","72d00e6f":"code","05b5bc59":"code","500637cd":"code","69986a1b":"markdown","758ef5a9":"markdown","f8d4adbe":"markdown","48b16b62":"markdown","9df866a2":"markdown","df5cb67d":"markdown","41f7a77f":"markdown","51ff6587":"markdown","5241c51e":"markdown","c9ab0270":"markdown","9d4732c4":"markdown","a163d36c":"markdown","71ac1cd1":"markdown","0824ff34":"markdown","2c88b41f":"markdown","f14e3b1a":"markdown"},"source":{"7d63704a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport os\nprint(os.listdir(\"..\/input\"))","cdc58d9f":"data = pd.read_csv('..\/input\/train.csv')","c6bdabe4":"data.head()","8459aade":"data.info()","8196516c":"data.drop(['PassengerId','Cabin','Name','Sex','Ticket','Embarked','Age'],axis=1,inplace=True)\ndata.head()","057516ea":"y=data.Survived.values\nx_data = data.drop(['Survived'],axis=1)","ba2530f2":"x = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","0f74c3d7":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n","66243ce8":"def iwab(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","fc14381e":"def fbp(w,b,x_train,y_train):\n    #Forward\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]\n    \n    #Backward\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                \n    gradients = {\"Derivative Weight\": derivative_weight, \"Derivative Bias\": derivative_bias}\n    \n    return cost,gradients","70610132":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(number_of_iterarion):\n        cost,gradients = fbp(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w - learning_rate * gradients[\"Derivative Weight\"]\n        b = b - learning_rate * gradients[\"Derivative Bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","d2bd4bf0":"def predict(w,b,x_test):\n    \n    z = sigmoid(np.dot(w.T,x_test)+b)\n    y_pre = np.zeros((1,x_test.shape[1]))\n    \n    #   if z value is bigger than 0.5, our prediction is sign one (y_head=1),\n    #   if z value is smaller than 0.5, our prediction is sign zero (y_head=0),\n    \n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            y_pre[0,i] = 0\n        else:\n            y_pre[0,i] = 1\n\n    return y_pre","3aef0e1d":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n  \n    dimension =  x_train.shape[0] \n    w,b = iwab(dimension)\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    print(\"Test Accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \n","b4fe0836":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 50)  ","72d00e6f":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 2, num_iterations = 200)  ","05b5bc59":"logistic_regression(x_train, y_train, x_test, y_test,learning_rate = 3, num_iterations = 500)  ","500637cd":"lr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint('Test Accuracy:',lr.score(x_test.T,y_test.T))","69986a1b":"Top 5 row","758ef5a9":"Train - Test split process for Data \n\n%80 Train\n\n%20 Test","f8d4adbe":"I will create a function for updating parameter","48b16b62":"Hello everyone. I am doing Logistic Regression hw with Python.\nFirst of all, I am importing some libraries.\n","9df866a2":"I am including Titanic Data","df5cb67d":"I tried different learning rate  and num iterations values for finding best test accuracy score. The best one I found test accuracy score: %71.5 for learning_rate = 3, num_iterations = 500.(\tmustn't grumble )\n\nIt's could be better.\n","41f7a77f":"As you can see Test accuracy is %70.94\n\nIt's could be better in the same way\n\nI will be waiting for your comment ","51ff6587":"**General overview**","5241c51e":"Than I will create forward_backward_propagation function(acronym  = > fbp )","c9ab0270":"Finally,  I will create Logistic Regression function   ( almost  I come to the end of the road  :)  )\n","9d4732c4":"I'm throwing out unnecessary information from dataset.","a163d36c":"I am creating initialize_weights_and_bias(acronym  => iwab ) and sigmoid functions for Logistic Regression Model\n\n\n","71ac1cd1":"I am defining X and Y values","0824ff34":"Now, I am creating prediction function  ","2c88b41f":"Normalization process for  X values","f14e3b1a":"Terminally,  I will create Logistic Regression Model with Sklearn Library"}}