{"cell_type":{"742fe662":"code","7fd33bbe":"code","f3dfa1f2":"code","110d81e5":"code","2eb538bf":"code","069eb1b5":"code","75f47eae":"code","d7b22411":"code","2aecaba1":"code","51f9f92e":"code","fcd06a6d":"code","9301bb15":"code","8b4498c1":"code","9a089e8f":"code","23f75931":"code","73cc7727":"markdown","5462e98a":"markdown","df3fa396":"markdown","019f04e1":"markdown","1702487b":"markdown","f3163496":"markdown","39f779c5":"markdown","d19c2778":"markdown","c672b3f1":"markdown"},"source":{"742fe662":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# For import data\nimport os\n\n# Visualization\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.simplefilter('ignore')","7fd33bbe":"# Set parameters\nmodel_name = \"River_Model_BOD_O2\" # name of the cognitive map (CM)\ninput_growth = 10  # initial change of the input indicator (vertice of CM) for modeling, %\nT = 5  # simulation duration\nM = 2  # order of the basic CM","f3dfa1f2":"# # Import files with data from Kaggle dataset\n# dataset_files = []\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         dataset_files.append(filename)\n# dataset_files\n# [s for s in dataset_files if model_name in s]","110d81e5":"# Data for given model\n# Names of vertices of the cognitive map\nn_cm = pd.read_csv(f'..\/input\/cognitive-modeling-of-complex-systems\/{model_name}_names.csv', header=0, sep=';')\n#n_cm = n_cm[n_cm['name']!='BOD_WB2'].reset_index(drop=True)\nn_cm","2eb538bf":"# Data for given model\n# Weights of the cognitive map\nw_cm = pd.read_csv(f'..\/input\/cognitive-modeling-of-complex-systems\/{model_name}_weights.csv', header=0, sep=';')\nw_cm.index = w_cm.columns\nw_cm","069eb1b5":"def stable_cm_check(df):\n    # Checks if the cognitive map is stable\n    # Returns the answer: True or False\n    \n    # Calculation of absolute value of eigenvalues of the matrix of cognitive map weights\n    ev = abs(np.linalg.eig(df)[0])\n    print('Eigenvalues:')\n    print(ev)\n    \n    # Get the maximum eigenvalue\n    ev_max = max(ev)\n    print(f'Maximum eigenvalue is: {ev_max}')\n        \n    # Check whether the maximum eigenvalue (absolute value) is not greater than 1\n    # Stability test\n    if ev_max <= 1:\n        print('Cognitive map is stable')\n        return True\n    else:\n        print('Cognitive map is not stable')\n        return False","75f47eae":"# Get the basic CM\ncm_len = len(w_cm)\ncm_basic = w_cm.values[(cm_len-M):, (cm_len-M):]\ncm_basic","d7b22411":"# Stable test of the basic CM\ncm_basic_stability = stable_cm_check(cm_basic)","2aecaba1":"# Stable test of the main CM\ncm_stability = stable_cm_check(w_cm.values)","51f9f92e":"# Set initial input data\ninput_vector = [10]*len(w_cm)\ninput_vector","fcd06a6d":"# Initial values in results\ncols = n_cm.name.tolist()\nres = pd.DataFrame(data=dict(zip(cols, list(input_vector))), index=[0])\nres","9301bb15":"# Modeling\nres_accum = res.copy()  # accumulated results\nif cm_stability:\n    for t in range(T-1):\n        res = res.append(dict(zip(cols, list(w_cm.values@(res.iloc[t, :])))), ignore_index=True)        ","8b4498c1":"res.round(1)","9a089e8f":"# Results visualization\nif cm_stability:\n    res.plot(figsize=(15,10), grid=True, title=\"Visualization of cognitive modeling results\")","23f75931":"# Results visualization\nif cm_stability:\n    res.plot(figsize=(15,10), grid=True, title='\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043e\u0433\u043d\u0456\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0435\u043b\u044e\u0432\u0430\u043d\u043d\u044f \u0437\u0430 \u043c\u043e\u0434\u0435\u043b\u043b\u044e \"BOD-O2\"')","73cc7727":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download data](#2)\n1. [Stability test](#3)\n1. [Modeling and prediction](#4)\n1. [Result visualization](#5)","5462e98a":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","df3fa396":"## 3. Stability test<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","019f04e1":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","1702487b":"<a class=\"anchor\" id=\"0\"><\/a>\n# Cognitive modeling - model \"River Model BOD-O2\" \n## The stable cognitive map with the pseudo-triangular connectivity matrix\n## Hypothetical example","f3163496":"## Acknowledgements\n\n### Kaggle Dataset:\n* [Cognitive modeling of complex systems](https:\/\/www.kaggle.com\/vbmokin\/cognitive-modeling-of-complex-systems)\n\n### Thanks to: \n* my article","39f779c5":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","d19c2778":"## 4. Modeling and prediction<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","c672b3f1":"## 5. Result visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}