{"cell_type":{"30b46752":"code","94028b90":"code","3f4ad10c":"code","e9d7855f":"code","37db0b9f":"code","37ce33ad":"code","bc6a58d7":"code","3f9ea95a":"code","49509157":"code","ed201c93":"code","84fb90fc":"code","d0740bad":"code","7b8d2404":"code","ce5283cf":"code","7893dfee":"code","418a65d4":"code","df8beda1":"code","c8317e4a":"code","64c2529d":"code","e1ca2fd8":"code","f0174544":"code","448247b1":"code","7b7b2081":"code","725b4244":"code","198b077c":"code","84a644f3":"code","a9432b96":"code","214a2aeb":"code","ab29bb5c":"code","7513e687":"code","b06d99eb":"code","ea6579fc":"code","ba166728":"markdown","f6f4f70f":"markdown","16898cf7":"markdown","f8e46fda":"markdown"},"source":{"30b46752":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\nimport pandas as pd\nimport numpy as np\nimport sklearn\n","94028b90":"# \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430\u0434\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0432 \u043f\u0440\u0430\u0432\u043e\u043c \u043c\u0435\u043d\u044e \u0447\u0435\u0440\u0435\u0437 \"Add data\" - \u0432\u044b\u0431\u0440\u0430\u0442\u044c Titanic competition\ndf = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","3f4ad10c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0442\u0430\u043c \u0432\u043d\u0443\u0442\u0440\u0438\ndf.head","e9d7855f":"df.info()","37db0b9f":"# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u043b\u0443\ndf['Sex'].value_counts().plot.pie()\n","37ce33ad":"# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u043b\u0443 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445\ndf[df['Survived'] == 1]['Sex'].value_counts().plot.pie()","bc6a58d7":"# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043f\u043e\u043b\u0443 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445\ndf[df['Survived'] == 0]['Sex'].value_counts().plot.pie()","3f9ea95a":"# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445 \u043f\u043e \u043a\u043b\u0430\u0441\u0441\u0443 \u0431\u0438\u043b\u0435\u0442\u0430\ndf[df['Survived'] == 1]['Pclass'].value_counts().plot.pie()","49509157":"df[df['Survived'] == 0]['Pclass'].value_counts().plot.pie()","ed201c93":"# \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u0438 \u0432\u044b\u0436\u0438\u0432\u0448\u0438\u0445\ndf[[\"Age\", \"Survived\"]].boxplot(by=\"Survived\")","84fb90fc":"# \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 \u043d\u0438\u043c (\u043f\u043e\u043a\u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0430 \u043d\u0435 \u0447\u0438\u0441\u043b\u0430)\ndf[\"SexNum\"] = df[\"Sex\"].astype(\"category\").cat.codes","d0740bad":"# \u043f\u043e\u0438\u0449\u0435\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 - \u0447\u0435\u043c \u0431\u043b\u0438\u0436\u0435 \u043a 1 \u0438\u043b\u0438 -1, \u0442\u0435\u043c \u0441\u0438\u043b\u044c\u043d\u0435\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c\ndf.corr()","7b8d2404":"df['Ticket']","ce5283cf":"def split_row(row):\n    a = row.split()\n    while len(a) < 2:\n        a.insert(0, None)\n    if len(a) == 3:\n        a = [a[0]+a[1], a[2]]\n    if a[0] is not None:\n        a[0] = a[0].replace(\".\", \"\")\n    return a","7893dfee":"new_def = pd.DataFrame(df['Ticket'].apply(split_row).tolist(), columns=['class', 'num'])","418a65d4":" new_def['class'].values","df8beda1":"len(new_def['class'].notna())","c8317e4a":"#new_def['Ticket_Len'] = new_def.iloc[:, 0].apply(lambda x: len(x))","64c2529d":"df['Embarked'].values","e1ca2fd8":"cabined = []\nfor i in df['Cabin']:\n    if i is not np.nan:\n        cabined.append(1)\n    else:\n        cabined.append(0)\n\ndf['Cabined'] = pd.DataFrame(cabined)","f0174544":"df['Cabined'].head(20)","448247b1":"df[['Cabined', 'Survived']].corr()","7b7b2081":"df['Cabin']","725b4244":"answer = pd.DataFrame(df_test['PassengerId'])","198b077c":"survived_ans = []\nfor i, j, k in zip(df_test.Sex, df_test.Age, df_test.Pclass):\n    if (i == 'female' or j < 18) and (k <= 2):\n        survived_ans.append(1)\n    else:\n        survived_ans.append(0)\n        \nanswer['Survived'] = pd.DataFrame(survived_ans)","84a644f3":"answer.to_csv('gender_and_children_submission.csv', index=False)","a9432b96":"from sklearn.model_selection import train_test_split","214a2aeb":"X_train, X_test, y_train, y_test = train_test_split(df.loc[:, df.columns.difference(['Survived'])], df['Survived'], test_size=0.25, random_state=42)","ab29bb5c":"from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score","7513e687":"type(y_test)","b06d99eb":"# \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0430 \u043d\u0430\u0448\u0435\u0439 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nsurvived_ans = []\nfor i, j, k in zip(X_test.Sex, X_test.Age, X_test.Pclass):\n    if (i == 'female' or j < 18) and (k <= 2):\n        survived_ans.append(1)\n    else:\n        survived_ans.append(0)\n        \ny_ans = pd.Series(survived_ans)","ea6579fc":"print(\"Accuracy: \", accuracy_score(y_test, y_ans))\nprint(\"Recall: \", recall_score(y_test, y_ans))\nprint(\"Precision: \", precision_score(y_test, y_ans))\nprint(\"F-score: \", f1_score(y_test, y_ans))","ba166728":"\u0415\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u043f\u043e\u043b\u043e\u043c , \u043a\u043b\u0430\u0441\u0441\u043e\u043c \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u0431\u0438\u043b\u0435\u0442\u0430 (\u0447\u0442\u043e \u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u0432\u0435\u0434\u044c \u0435\u0441\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f).\n\n\u0422\u0443\u0442 \u0437\u0430\u043a\u043e\u043d\u0447\u0438\u043b\u043e\u0441\u044c \u0442\u043e, \u0447\u0442\u043e \u0431\u044b\u043b\u043e \u043e\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e - \u0434\u0430\u043b\u044c\u0448\u0435 \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432\u043d\u0438\u043a\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u043c\u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0443.","f6f4f70f":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n| survival | Survival | 0 = No, 1 = Yes |\n|------|----|--------|\n| pclass | Ticket class | 1 = 1st, 2 = 2nd, 3 = 3rd\n| sex | Sex |  | \n| Age | Age in years |  | \n| sibsp | # of siblings \/ spouses aboard the Titanic |  | \n| parch | # of parents \/ children aboard the Titanic |  | \n| ticket | Ticket number |  | \n| fare | Passenger fare |  | \n| cabin | Cabin number |  | \n| embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton  | ","16898cf7":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.","f8e46fda":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0437\u043d\u0430\u0442\u044c, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0448\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430."}}