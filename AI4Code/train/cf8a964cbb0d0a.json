{"cell_type":{"f3825d09":"code","8f0e6f49":"code","696de876":"code","958e478f":"code","06f50c34":"code","0d07800f":"code","3db2a581":"code","80ae5bd3":"code","0b40397b":"code","72f45a2c":"code","12019da6":"code","af459bb3":"code","c32cb289":"code","1f3af1a6":"code","b10109f8":"code","cccd09d7":"code","73b687d5":"code","0355d486":"code","223351b4":"code","fe10a1ed":"code","8a0dcd9e":"code","6e46d6ad":"code","39b662a5":"code","ebf63bb3":"code","472e7580":"code","a783bcb2":"code","508f5bf3":"code","e68b422c":"code","ff9c7720":"code","cce35890":"code","e992d90e":"code","fc0099b2":"code","4b8695d8":"code","6426d7f0":"code","3171d0c1":"code","15128b95":"code","5618ddad":"markdown","6d194d9e":"markdown","ed2d8e71":"markdown","cdddaab9":"markdown","4ac93b1f":"markdown","ac416d1b":"markdown","6ac1118a":"markdown","195cebb3":"markdown","2283cb8d":"markdown","9fde61b9":"markdown","e3bdf749":"markdown","97ef73e9":"markdown","187dc335":"markdown","939b7600":"markdown","b92c69aa":"markdown","5e03b095":"markdown","1ac75a6d":"markdown","c1076df8":"markdown","6d9320b0":"markdown","ac593fd6":"markdown"},"source":{"f3825d09":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split","8f0e6f49":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if filename.endswith(\".csv\"):\n            print(os.path.join(dirname, filename))","696de876":"submission_file =\"\/kaggle\/input\/cassava-leaf-disease-classification\/sample_submission.csv\"\ntrain_path =\"\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv\"\ntrain_images_path = \"..\/input\/cassava-leaf-disease-classification\/train_images\"","958e478f":"train_data = pd.read_csv(train_path)\nsubmission = pd.read_csv(submission_file)","06f50c34":"train_data.head()","0d07800f":"submission.head()","3db2a581":"train_data.label.value_counts()","80ae5bd3":"sns.countplot(\"label\", data=train_data)","0b40397b":"trainX,valX,trainY,valY = train_test_split(train_data.iloc[:,0].values,\n                                             train_data.iloc[:,1].values,\n                                             stratify= train_data.iloc[:,1].values,\n                                             random_state=11,\n                                             test_size=0.2\n                                            )","72f45a2c":"num_train_images = len(trainX)\nnum_eval_images = len(valX)","12019da6":"print(\"Number of train images: \",num_train_images)\nprint(\"Number of validation images: \",num_eval_images)\nprint(\"Shape of train data: \",trainX.shape)\nprint(\"Shape of validation data: \",valX.shape)\nprint(\"Shape of train targets: \",trainY.shape)\nprint(\"Shape of validation targets: \",valY.shape)","af459bb3":"df_train = pd.DataFrame.from_dict({\"image_id\":trainX, \"label\":trainY})\ndf_val = pd.DataFrame.from_dict({\"image_id\":valX, \"label\":valY})","c32cb289":"df_train.head()","1f3af1a6":"df_train.label.value_counts()","b10109f8":"sns.countplot(\"label\", data=df_train)","cccd09d7":"df_val.label.value_counts()","73b687d5":"sns.countplot(\"label\", data=df_val)","0355d486":"EPOCHS=5\nBATCH_SIZE=32\nIMAGE_DIM=(224,224)","223351b4":"def get_path_of_image(image):\n    return os.path.join(train_images_path,image)","fe10a1ed":"def load_tf_image(image_path,dim):\n    image = tf.io.read_file(image_path)\n    image = tf.image.decode_jpeg(image,channels=3)\n    image = tf.image.resize(image,dim)\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    image = image\/255.0\n    return image","8a0dcd9e":"def generate_tf_dataset(X,Y,image_size):\n    X = [get_path_of_image(str(x)) for x in X]\n    datasetX = tf.data.Dataset.from_tensor_slices(X).map(\n            lambda path: load_tf_image(path,image_size),\n            num_parallel_calls=tf.data.experimental.AUTOTUNE\n    )\n    datasetY = tf.data.Dataset.from_tensor_slices(tf.keras.utils.to_categorical(Y))\n    dataset = tf.data.Dataset.zip((datasetX,datasetY))\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.repeat()\n    dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)\n    return dataset","6e46d6ad":"def plot_images_grid(data,num_rows=1,class_names=None):\n    images, labels = data\n    n=len(images)\n    labels = np.argmax(labels.numpy(), axis=1)\n    if n > 1:\n        num_cols=np.ceil(n\/num_rows)\n        fig,axes=plt.subplots(ncols=int(num_cols),nrows=int(num_rows))\n        axes=axes.flatten()\n        fig.set_size_inches((20,20))\n        for i,image in enumerate(images):\n            axes[i].imshow(image.numpy())\n            axes[i].axis('off')\n            axes[i].set_title(class_names[str(labels[i])])","39b662a5":"train_dataset=generate_tf_dataset(trainX,trainY,IMAGE_DIM)\nprint(train_dataset.element_spec)","ebf63bb3":"eval_dataset=generate_tf_dataset(valX,valY,IMAGE_DIM)\nprint(eval_dataset.element_spec)","472e7580":"image_classes = {\n    \"0\":\"Cassava Bacterial Blight (CBB)\",\n    \"1\":\"Cassava Brown Streak Disease (CBSD)\",\n    \"2\":\"Cassava Green Mottle (CGM)\",\n    \"3\":\"Cassava Mosaic Disease (CMD)\",\n    \"4\":\"Healthy\"\n}","a783bcb2":"plot_images_grid(next(iter(train_dataset.take(1))),class_names=image_classes,num_rows=8)","508f5bf3":"plot_images_grid(next(iter(eval_dataset.take(1))),class_names=image_classes,num_rows=8)","e68b422c":"pretrained = tf.keras.applications.InceptionResNetV2(\n                include_top=False, weights='imagenet',input_shape=(*IMAGE_DIM,3)\n            )\npretrained.summary()","ff9c7720":"model = tf.keras.Sequential([\n    pretrained,\n    tf.keras.layers.GlobalAveragePooling2D(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(512),\n    tf.keras.layers.LeakyReLU(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(128),\n    tf.keras.layers.LeakyReLU(),\n    tf.keras.layers.Dense(len(image_classes),activation=\"softmax\")\n])","cce35890":"model.summary()","e992d90e":"model.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])","fc0099b2":"checkpoint_path=\"best_checkpoint\"","4b8695d8":"model_checkpoint=tf.keras.callbacks.ModelCheckpoint(checkpoint_path,monitor=\"val_accuracy\",\n                                                    save_best_only=True,mode=\"max\",\n                                                    save_weights_only=True,\n                                                    verbose=1)\nearly_stop=tf.keras.callbacks.EarlyStopping(monitor=\"val_accuracy\",patience=5,\n                                            mode=\"max\", verbose=1)\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy',mode=\"max\",\n                                                 factor=0.2,patience=2, \n                                                 min_lr=0.001, verbose=1)","6426d7f0":"callbacks=[model_checkpoint,early_stop,reduce_lr]","3171d0c1":"history=model.fit(train_dataset,\n                  epochs=EPOCHS,\n                  steps_per_epoch=num_train_images\/\/BATCH_SIZE,\n                  validation_data=eval_dataset,\n                  validation_steps=num_eval_images\/\/BATCH_SIZE,\n                  callbacks=callbacks)","15128b95":"if os.path.isfile(checkpoint_path):\n    model.load_weights(checkpoint_path)","5618ddad":"In above plots we can see both train and validation data which we have splitted have same distribution of labels which we want.","6d194d9e":"model training happens here with fit method. It takes tf datasets and steps.","ed2d8e71":"Loading best model checkpoint","cdddaab9":"From above plot we can see that dataset has more images of class 3 (Cassava Mosaic Disease (CMD)), So we need to have care that we split data in stratified manner.","4ac93b1f":"## Predicting test data\n\nThis competition provide test data during submission for scoring and notebook with internet disabled. So create a new inference notebook for submission.","ac416d1b":"## Setting up train and validation tf dataset\n\nCreate tf datasets using tf.data for training and validation. A single element of these datasets return *(Image,Label)* where Image = *(batch_size,image_width,image_height,channels)* and Label = *(batch_size,)*. ","6ac1118a":"Getting Path to csv files:\n\n- train.csv\n- submission.csv\n\nsubmission.csv is loaded only for checking format of submission file","195cebb3":"Importing required dependencies","2283cb8d":"#### Thanks for tuning till last and consider upvoting \u2714\u2714.","9fde61b9":"## Helper Functions\n\n- get_path_of_image : for getting full path to image from its name\n- load_tf_image : loading and normalizing image and converting to tensor\n- generate_tf_dataset : generate tf dataset","e3bdf749":"## Checking class imbalance ","97ef73e9":"## Splitting data into training and validation","187dc335":"## What to do next?\n\n- Add data augmentation for better generalization of model, we can use [albumentations](https:\/\/albumentations.ai\/) or tensorflow image augmentation explained [here](https:\/\/www.tensorflow.org\/tutorials\/images\/data_augmentation).\n\n- Tune hyperparmeters and check performance.\n\n- Use different pretrained models like Xception, InceptionV3, Vgg, EfficientNet, Resnet etc. find list of some pretrained models [here](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/applications)\n\n- Use K folds for cross validation (we have already using stratified hold_out_split cross validation in this notebook) \n\n- Using different trained models and create ensemble using Voting Classification, Model Stacking or Blending.\n\n- Do not just limited to these use your intitution for feature engineering.","939b7600":"## Setting Parameters here","b92c69aa":"Reading CSV files and viewing their heads","5e03b095":"Callbacks for:\n- model_checkpointing- For checpointing model with best validation accuracy.\n- early_stop- Stop training of model if model's validation accuracy did not improved in last 5 steps\n- reduce_lr- reduce learning rate if validation accuracy did not improved in last 2 steps.","1ac75a6d":"# CASSAVA LEAF DISEASE CLASSIFICATION\n\nThis is starter training notebook for tensorflow users for this competition. This notebook is run with internet 'on' for downloading pretrained models.\n\n- It uses tf.data for loading data for training\n- model is trained using transfer learning.","c1076df8":"## Training Model\n\nWe use InceptionResnetV2 pretrained model trained on imagenet, chop off its last classification layers (Dense Layers) and finetune it.","6d9320b0":"### ALL THE BEST \ud83d\udc4d","ac593fd6":"## Plotting and Visualizing images"}}