{"cell_type":{"ce41dada":"code","ee138802":"code","15f53a2e":"code","2e13da2c":"code","511b6255":"code","6529fa6f":"code","eaac831d":"code","73f3e338":"code","753cf137":"code","49da327d":"code","31641c20":"code","1d7330b1":"markdown","1c7d7b44":"markdown","6a6e8f10":"markdown","87e75880":"markdown","871ecb92":"markdown"},"source":{"ce41dada":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\ndf = pd.read_csv('..\/input\/international-football-results-from-1872-to-2017\/results.csv')\ndf.head()\ndf['date'] = [i.replace('-','') for i in df['date']]\nall_list = ((df['tournament'].unique()).tolist() + (df['country'].unique()).tolist() + (df['city'].unique()).tolist() + (df['home_team'].unique()).tolist() + (df['away_team'].unique()).tolist())\nprint(df.isnull().sum())\n\nprint('done!')\ndf.head()","ee138802":"uni_len = '***'.join(all_list)\nnat_enc = tf.keras.preprocessing.text.Tokenizer(num_words=len(all_list),\n    filters='',\n    lower=False,\n    split = '***')\nnat_enc.fit_on_texts([uni_len])\nnat_dic = nat_enc.word_index\nprint(len(list(nat_dic)))","15f53a2e":"for step, val in enumerate(df['tournament']):\n    df['tournament'].iloc[step] = (nat_dic.get(val))\nfor step, val in enumerate(df['city']):\n    df['city'].iloc[step] = (nat_dic.get(val))\nfor step, val in enumerate(df['country']):\n    df['country'].iloc[step] = (nat_dic.get(val))\nfor step, val in enumerate(df['home_team']):\n    df['home_team'].iloc[step] = (nat_dic.get(val))\nfor step, val in enumerate(df['away_team']):\n    df['away_team'].iloc[step] = (nat_dic.get(val))\nfor step, val in enumerate(df['neutral']):\n    if df['neutral'].iloc[step] == False:\n        df['neutral'].iloc[step] = 0\n    if df['neutral'].iloc[step] == True:\n        df['neutral'].iloc[step] = 1\n\n\nprint(df.isnull().sum())","2e13da2c":"df_old =  pd.read_csv('..\/input\/international-football-results-from-1872-to-2017\/results.csv')\ndf_new = df\n\ntemp_tor = []\nfor i in df_old['tournament']:\n    temp_tor.append(len(i))\ntemp_away = []\nfor i in df_old['away_team']:\n    temp_away.append(len(i))\ntemp_home = []\nfor i in df_old['home_team']:\n    temp_home.append(len(i))\ndf_new['tor_len'] = temp_tor\ndf_new['home_len'] = temp_home\ndf_new['away_len'] = temp_away\n\n","511b6255":"from sklearn.model_selection import train_test_split\nfrom sklearn.manifold import TSNE, Isomap\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler, Normalizer\n\nexp = df_new['date'].to_numpy()\nscaler = StandardScaler()\nexp_2 = scaler.fit_transform(exp.reshape(-1,1))\ndf_new['date'] = (np.ravel(exp_2)).tolist()\n\ndf_new = df_new.dropna()\n\ndf_label1 = df_new['home_score']\ndf_label2 = df_new['away_score']\ndf_new = df_new.drop(['home_score', 'away_score'], axis = 1)\nx_train = df_new.to_numpy()\n","6529fa6f":"df_train = pd.DataFrame(data=x_train, columns=df_new.columns)\ndf_label = pd.concat([df_label1, df_label2],axis = 1)\ndf_label.columns = ['home_score', 'away_score']","eaac831d":"win = []\nfor h, a in zip(df_label['home_score'], df_label['away_score']):\n    if h > a:\n        win.append('home_win')\n    if a > h:\n        win.append('away_win')\n    if a == h:\n        win.append('draw')\ndf_label['win'] = win\n\nNorm = Normalizer()\nx_temp = Norm.fit_transform(x_train)\ndf_temp = pd.DataFrame(data=x_temp, columns=df_new.columns)\ndf_corr = df_temp.corr()\n","73f3e338":"import seaborn as sns\nimport matplotlib.pyplot as plt\ndf_train = pd.DataFrame(data=x_train, columns=df_new.columns)\n\nsns.set_style('darkgrid')\n\nfig, axs = plt.subplots(2,3, figsize=(20,10))\n\naxs[0,0].scatter(x = df_train['home_len'], y = df_label1, c='blue', marker='.', alpha=0.7)\naxs[0,0].scatter(x= df_train['away_len'], y = df_label2, c='red', marker='1', alpha = 0.5)\naxs[0,0].legend(['home_score', 'away_score'])\naxs[0,0].set_xlabel('Team( home \/ away )_name_length')\naxs[0,0].set_ylabel('Goals_scored')\naxs[0,0].set_title('Goal vs Team_name_length')\n\naxs[1,0].set_title('Mean_goal_scored_in_each_comp_length')\nsns.barplot(x=df_train['tor_len'], y=df_label['home_score'], ax=axs[1,0]);\nsns.barplot(x = df_train['tor_len'], y=df_label['away_score'], ax = axs[1,0]);\naxs[1,0].set_ylabel('home\/away_scores')\n\naxs[0,1].set_title('Total_goal_scored v\/s date')\naxs[0,1].scatter(df_train['date'],df_label['home_score'], c='blue', alpha=0.5, marker = '.');\naxs[0,1].scatter(df_train['date'],df_label['away_score'], c='red', alpha=0.5, marker = '.');\naxs[0,1].set_xlabel('Scaled_date')\naxs[0,1].set_ylabel('total_goals_scored')\naxs[0,1].legend(['home_score', 'away_score'])\n\naxs[0,2].set_title('Mean_goal_scored_in_each_in_each_results')\nsns.barplot(x=df_label['win'], y = df_label['home_score'], ax=axs[0,2]);\nsns.barplot(x = df_label['win'], y = df_label['away_score'], ax = axs[0,2]);\naxs[0,2].set_ylabel('home\/away_scores')\naxs[0,2].set_xlabel('result')\n\naxs[1,1].set_title('Total_goals_scored v\/s results')\nsns.barplot(x=df_label['win'], y=df_label['home_score']+df_label['away_score'], hue=df_train['neutral'], ax=axs[1,1]);\naxs[1,1].set_ylabel('Total_goals_scored')\n\naxs[1,2].set_title('Correlation - Matrix')\nsns.heatmap(data = df_corr, square=True, annot=True, ax=axs[1,2])\n\n\nplt.tight_layout(pad=2);\n\n","753cf137":"y_es = df_label.drop('win', axis=1).to_numpy()\nx_es = df_temp.drop('city', axis=1).to_numpy()","49da327d":"from scipy.stats import uniform, randint\nimport xgboost as xgb\nfrom sklearn.metrics import auc, accuracy_score, mean_absolute_error\nfrom sklearn.model_selection import cross_val_score, RandomizedSearchCV, train_test_split, KFold\nfrom sklearn.decomposition import PCA\nfrom sklearn.multioutput import MultiOutputRegressor\n\nprint(x_es.shape, y_es.shape)\n\nx_t, x_val , y_t, y_val = train_test_split(x_es, y_es, random_state=28)\n\nparams = {\n    \"estimator__colsample_bylevel\": uniform(0.7, 0.3),\n    \"estimator__gamma\": uniform(0, 0.5),\n    \"estimator__learning_rate\": uniform(0.003, 0.3),\n    \"estimator__max_depth\": randint(2, 6),\n    \"estimator__n_estimators\": randint(100, 500), \n    \"estimator__subsample\": uniform(0.6, 0.4)\n}\n\nxgb_model = MultiOutputRegressor(xgb.XGBRegressor(objective='reg:squarederror', eval_metric=['mae'], random_state = 1, use_label_encoder=False))\n\nsearch = RandomizedSearchCV(xgb_model, param_distributions=params, random_state =1, n_iter=5, cv=3,\n                            verbose=0, n_jobs=1, return_train_score=True) \nsearch.fit(x_t, y_t) \n\nbest_param = search.best_params_\nprint('-')\nprint(search.best_score_)\nprint(best_param)\nprint('-')\n\nxgb_model = MultiOutputRegressor(xgb.XGBRegressor(objective='reg:squarederror',eval_metric=['mae'], random_state = 1, \n                              use_label_encoder=False, **best_param)).fit(x_t, y_t) \n\nprint('MAE: ',mean_absolute_error(y_val, xgb_model.predict(x_val)))\n\nprint()\nprint('----KFold----')\n\nfolds = KFold(n_splits = 5, shuffle = True, random_state = 100)\nscores = cross_val_score(xgb_model, x_val, y_val, scoring='neg_mean_absolute_error', cv=folds, verbose=0)\nprint('KFold_Neg_MAE: ',np.mean(scores))\n\nprint()\n","31641c20":"import random\ndef predict_score(inp_list, autofill, Norm, seed, model):\n    ind_list = []\n    for i in inp_list:\n        ind_list.append(nat_dic.get(i))\n    seed[:,1] = ind_list[0]\n    seed[:,2] = ind_list[1]\n    x_test = Norm.fit_transform(seed)\n    pred = model.predict(x_test)\n    return np.ravel(pred).tolist()\n    \n\ninp = str(input(\"Enter Home & Away team (like Home Away): \"))\nautofill = True\ninp = inp.split(' ')\nseed = x_train[random.randint(0,x_train.shape[0])].reshape(1,-1)\nseed = np.delete(seed, 4, axis=1)\nparams = {\n    'autofill': True,\n    'Norm': Norm,\n    'seed': seed,\n    'model': xgb_model\n}\nans = predict_score(inp, **params) \n\nprint(f'Scoreline -- {inp[0]} : {round(ans[0])}  {round(ans[1])} : {inp[1]}')\n        ","1d7330b1":"Its not the best, but its fun ! Any constructive critisicm is most Welcome","1c7d7b44":"<img style = \"width:100%; height:auto;\" src = \"https:\/\/www.myholidays.com\/blog\/content\/images\/2020\/10\/Scheduling-Of-FIFA-2022.jpg\">\n<img style =\"width:80px; height:80px;float:left;\" src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/50f21928e4b022c544965f87\/1529522216010-QVYXZ0OG9OHFN1AGAAN6\/Giphy%2BWorld%2BCup%2Bpop.gif\"><img style =\"width:80px; height:80px; float:right;\" src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/50f21928e4b022c544965f87\/1529522216010-QVYXZ0OG9OHFN1AGAAN6\/Giphy%2BWorld%2BCup%2Bpop.gif\"><h1  style = \"background-color:black; color: white; text-align:center;\"><b>International - Football<\/b><i> Naive-Analysis<\/i> and <i> Prediction<\/i><\/h1>\n","6a6e8f10":"<img style =\"width:120px; height:90px;float:left;\" src=\"https:\/\/compsquad.carrd.co\/assets\/images\/image03.gif?v=d9663bd7\"><img style =\"width:120px; height:90px; float:right;\" src=\"https:\/\/compsquad.carrd.co\/assets\/images\/image03.gif?v=d9663bd7\"><h2  style = \"background-color:black; color: white; text-align:center;\"><b><i>Inference<\/i><\/b><\/h2>","87e75880":"<img style =\"width:90px; height:90px;float:left;\" src=\"https:\/\/static.wixstatic.com\/media\/2f860b_0ffada2bbaf94379b1bbb614acd1c106~mv2.gif\"><img style =\"width:90px; height:90px; float:right;\" src=\"https:\/\/static.wixstatic.com\/media\/2f860b_0ffada2bbaf94379b1bbb614acd1c106~mv2.gif\"><h2  style = \"background-color:black; color: white; text-align:center;\"><b><i>Naive Data-Analysis<\/i><\/b><\/h2>","871ecb92":"<img style =\"width:90px; height:90px;float:left;\" src=\"https:\/\/global-uploads.webflow.com\/5d41ae7af656706ceb80e40d\/5d76ee85344fac1dfa091907_09-fix.gif\"><img style =\"width:90px; height:90px; float:right;\" src=\"https:\/\/global-uploads.webflow.com\/5d41ae7af656706ceb80e40d\/5d76ee85344fac1dfa091907_09-fix.gif\"><h2  style = \"background-color:black; color: white; text-align:center;\"><b><i>Predictive Model Creation<\/i><\/b><\/h2>"}}