{"cell_type":{"03ed5572":"code","d048e566":"code","b597bee0":"code","ca22b8f6":"code","6016e4ab":"code","82d95625":"code","3063da34":"code","e01f31e5":"code","c5e4ff0c":"code","cce007d6":"code","bd6f668e":"markdown","5e39e2de":"markdown","8dbca4c5":"markdown","b19ffc64":"markdown","75539808":"markdown","dacc4c8f":"markdown","b7383fcf":"markdown","f459cec0":"markdown"},"source":{"03ed5572":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d048e566":"import json\nwith open('..\/input\/persian-reverse-dictionary-dataset\/extracted-phrases.json','r',encoding='utf-8') as file:\n    data = json.load(file)","b597bee0":"data[0]","ca22b8f6":"print('In the above object, the word '+data[0]['word']+' is described by the following phrase: \\n '+data[0]['phrases'][0])","6016e4ab":"def pretty_display(item):\n    source_to_fa = {\n        'amid':'\u0639\u0645\u06cc\u062f',\n        'dehkhoda-vy':'\u062f\u0647\u062e\u062f\u0627',\n        'moeen-vy':'\u0645\u0639\u06cc\u0646',\n        'farsnet':'\u0641\u0627\u0631\u0633\u200c\u0646\u062a',\n        'wikipedia':'\u0648\u06cc\u06a9\u06cc\u200c\u067e\u062f\u06cc\u0627'\n    }\n    from IPython.core.display import HTML\n    html_code = '<div style=\"direction:rtl;text-align:justify;font-family:tahoma\">'\n    html_code += '\u06a9\u0644\u0645\u0647: ' + item['word'] + '<\/br>'\n    for idx, phrase in enumerate(item['phrases']):\n        html_code +=  '\u0639\u0628\u0627\u0631\u062a \u062a\u0648\u0635\u06cc\u0641\u06cc ' + str(idx+1) + ': ' + phrase + '<\/br>'\n    html_code += '\u0645\u0646\u0628\u0639: ' + source_to_fa[item['source']] + '<\/br>'\n    html_code += '<\/div>'\n    return HTML(html_code)","82d95625":"amid_data = [item for item in data if item['source'].startswith('amid')]\npretty_display(amid_data[100])","3063da34":"dehkhoda_data = [item for item in data if item['source'].startswith('dehkhoda')]\npretty_display(dehkhoda_data[1500])","e01f31e5":"moeen_data = [item for item in data if item['source'].startswith('moeen')]\npretty_display(moeen_data[0])","c5e4ff0c":"farsnet_data = [item for item in data if item['source'].startswith('farsnet')]\npretty_display(farsnet_data[0])","cce007d6":"wikipedia_data = [item for item in data if item['source'].startswith('wiki')]\npretty_display(wikipedia_data[0])","bd6f668e":"# Dehkhoda Samples","5e39e2de":"# Pretty Display Function ","8dbca4c5":"# Wikipedia Samples","b19ffc64":"# Moeen Samples","75539808":"# Instances","dacc4c8f":"# Amid Samples","b7383fcf":"# Farsnet Samples","f459cec0":"# Loading the Dataset"}}