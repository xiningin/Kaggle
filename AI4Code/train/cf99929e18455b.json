{"cell_type":{"54d956d2":"code","071efe64":"code","3b88410d":"code","fe788c0a":"code","a83107bd":"code","9b408200":"code","254b4d3e":"code","4cf4f649":"code","c874d112":"code","449b0831":"code","b2abd7a5":"code","35f49b77":"code","3b68e94f":"code","a32df7e6":"code","b2975920":"code","72c79f81":"code","ef7223b0":"code","e53bab29":"code","3bb54835":"code","7d8b1815":"code","7de15f9c":"code","94bfe664":"code","31b16614":"code","206052b1":"code","0f5ee820":"code","0bb68be8":"code","0c930d92":"code","079132de":"code","7e7d9dda":"code","079c629e":"code","437ad3b8":"code","27c6b5fa":"code","9513cc48":"code","16c622cf":"code","5ac5c02d":"code","48e485f6":"code","2e26af92":"code","5efd6c2f":"code","0c4f5e66":"code","cf43ee75":"code","0cef9d6e":"code","8a50d247":"code","5d9096da":"code","a459cd1d":"code","137ab105":"code","1230155a":"code","83c464db":"code","b8f340c7":"code","fba9d752":"code","e22e55fc":"code","36377068":"code","d67148e1":"code","7fdb94bc":"code","c02736bf":"code","fd8008b1":"code","04d3ddf4":"code","f7bc3d92":"code","e0b48882":"code","37efde19":"code","87be6b32":"code","ab03284e":"code","edc2cc17":"code","0f933486":"code","0e9a2b25":"code","1119da82":"code","c0aafa52":"code","cee3347a":"code","088c18ba":"code","2ec5d81f":"code","dcb54e62":"code","f6f42c49":"code","986d2161":"code","17b15ca3":"markdown","9b3126fc":"markdown","4b956123":"markdown","effec059":"markdown","3e6ae3a4":"markdown","31c74169":"markdown","bca586d8":"markdown","228f2660":"markdown","8f50c7bd":"markdown","c3cbaef1":"markdown","e45b7915":"markdown"},"source":{"54d956d2":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly_express as px\nimport matplotlib.image as mpimg\nfrom tabulate import tabulate\nimport missingno as msno \nfrom IPython.display import display_html\nfrom PIL import Image\nimport gc\nimport cv2\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","071efe64":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","3b88410d":"train.head(5)","fe788c0a":"train.info()","a83107bd":"test.info()","9b408200":"def missing_values(df):\n    total_mv = df.isnull().sum().sort_values(ascending=False)\n    percentage = round(df.isnull().sum().sort_values(ascending=False) \/ len(df) * 100, 2)\n    return pd.concat([total_mv, percentage], axis=1, keys=['Total', 'Percentage'])","254b4d3e":"missing_values(train)","4cf4f649":"missing_values(test)","c874d112":"def percentage_value_count(df, feature):\n    percent = pd.DataFrame(round(df.loc[:, feature].value_counts(dropna=False, normalize=True)*100, 2))\n    \n    total = pd.DataFrame(df.loc[:, feature].value_counts(dropna=False))\n    total.columns = ['Total']\n    percent.columns = ['Percent']\n    return pd.concat([total, percent], axis=1)","449b0831":"percentage_value_count(train, 'Embarked')","b2abd7a5":"train[train['Embarked'].isnull()]","35f49b77":"fig, ax = plt.subplots(figsize=(16,12),ncols=2)\nax1 = sns.barplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=train, ax = ax[0]);\nax2 = sns.barplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=test, ax = ax[1]);\nax1.set_title(\"Training Set\", fontsize = 18)\nax2.set_title('Test Set',  fontsize = 18)\n\n\nfig.show()","3b68e94f":"test[test.Fare.isnull()]","a32df7e6":"test['Fare'] = test['Fare'].fillna(0)","b2975920":"print('Train age missing value' + str((train.Age.isnull().sum() \/ len(train))* 100)+str('%'))\nprint('Test age missing value' + str((test.Age.isnull().sum() \/ len(test))* 100) + str('%'))","72c79f81":"colors = [\"#0101DF\", \"#DF0101\"]\nf, ax = plt.subplots(figsize=(12, 5))\nsns.countplot('Sex', data=train, palette=colors)","ef7223b0":"colors = [\"#0101DF\", \"#DF0101\"]\nf, ax = plt.subplots(figsize=(12, 5))\nsns.countplot('Survived', data=train, palette=colors)","e53bab29":"pal = {'male':\"white\", 'female':\"Pink\"}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize = (15,8))\nax = sns.barplot(x = \"Sex\", \n                 y = \"Survived\", \n                 data=train, \n                 palette = pal,\n                 linewidth=5,\n                 order = ['female','male'],\n                 capsize = .05,\n\n                )\n\nplt.title(\"Survived\/Non-Survived Passenger Gender Distribution\", fontsize = 25,loc = 'center', pad = 40)\nplt.ylabel(\"% of passenger survived\", fontsize = 15, )\nplt.xlabel(\"Sex\",fontsize = 15);","3bb54835":"from plotly.offline import init_notebook_mode,iplot","7d8b1815":"train['Pclass']","7de15f9c":"upper_class = train[train.Pclass== 3]\nmiddle_class = train[train.Pclass== 2]\nlower_class = train[train.Pclass== 1]","94bfe664":"plt.subplots(figsize = (15,10))\nsns.barplot(x = \"Pclass\", \n            y = \"Survived\", \n            data=train, \n            linewidth=6,\n            capsize = .05,\n            errcolor='blue',\n            errwidth = 3\n            \n\n           )\nplt.title(\"Passenger Class Distribution - Survived vs Non-Survived\", fontsize = 25, pad=40)\nplt.xlabel(\"Socio-Economic class\", fontsize = 15);\nplt.ylabel(\"% of Passenger Survived\", fontsize = 15);\nnames = ['Upper', 'Middle', 'Lower']\n#val = sorted(train.Pclass.unique())\nval = [0,1,2] ## this is just a temporary trick to get the label right. \nplt.xticks(val, names);","31b16614":"# Kernel Density Plot\nfig = plt.figure(figsize=(15,8),)\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Fare'] , color='red',shade=True,label='not survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Fare'] , color='green',shade=True, label='survived')\nplt.title('Fare Distribution Survived vs Non Survived', fontsize = 25, pad = 40)\nplt.ylabel(\"Frequency of Passenger Survived\", fontsize = 15, labelpad = 20)\nplt.xlabel(\"Fare\", fontsize = 15, labelpad = 20);","206052b1":"train[train.Fare > 280]","0f5ee820":"# Kernel Density Plot\nfig = plt.figure(figsize=(15,8),)\nax=sns.kdeplot(train.loc[(train['Survived'] == 0),'Age'] , color='red',shade=True,label='not survived')\nax=sns.kdeplot(train.loc[(train['Survived'] == 1),'Age'] , color='green',shade=True, label='survived')\nplt.title('Age Distribution Survived vs Non Survived', fontsize = 25, pad = 40)\nplt.ylabel(\"Frequency of Passenger Survived\", fontsize = 15, labelpad = 20)\nplt.xlabel(\"Age\", fontsize = 15, labelpad = 20);","0bb68be8":"pal = {'Q':\"white\", 'S':\"Pink\", 'C':\"Green\"}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize = (15,8))\nax = sns.barplot(x = \"Embarked\", \n                 y = \"Survived\", \n                 data=train, \n                 palette = pal,\n                 linewidth=5,\n                 order = ['Q','S', 'C'],\n                 capsize = .05,\n\n                )\n\nplt.ylabel(\"% of passenger survived\", fontsize = 15, )\nplt.xlabel(\"Embarked\",fontsize = 15);","0c930d92":"pal = {1:\"Green\", 0:\"Red\"}\ng = sns.FacetGrid(train,size=5, col=\"Sex\", row=\"Embarked\", margin_titles=True, hue = \"Survived\",\n                  palette = pal\n                  )\ng = g.map(plt.hist, \"Age\", edgecolor = 'white').add_legend();\ng.fig.suptitle(\"Survived by Sex and Age\", size = 25)\nplt.subplots_adjust(top=0.90)","079132de":"g = sns.FacetGrid(train, size=5,hue=\"Survived\", col =\"Sex\", margin_titles=True,\n                palette=pal,)\ng.map(plt.scatter, \"Fare\", \"Age\",edgecolor=\"w\").add_legend()\ng.fig.suptitle(\"Survived by Sex, Fare and Age\", size = 25)\nplt.subplots_adjust(top=0.85)","7e7d9dda":"train.describe(include='all')","079c629e":"#Below is a heatmap of the correlation of the normal data:\ncorrelation_matrix = train.corr()\nfig = plt.figure(figsize=(20,8))\nsns.heatmap(correlation_matrix, vmax=0.8, square=True)","437ad3b8":"correlation_matrix['Survived'].sort_values(ascending=False)","27c6b5fa":"pd.DataFrame(abs(train.corr()['Survived']).sort_values(ascending = False))","9513cc48":"train['Sex'] = train['Sex'].map({'male':1, 'female':0})\ntest['Sex'] = test['Sex'].map({'male':1, 'female':0})\nmale_mean = train[train['Sex'] == 1].Survived.mean()\nfemale_mean = train[train['Sex'] == 0].Survived.mean()\n\nprint('Male survival mean' + str(male_mean))\nprint('Female survival mean' + str(female_mean))\n\nprint (\"The mean difference between male and female survival rate: \" + str(female_mean - male_mean))","16c622cf":"import random\nmale = train[train['Sex'] == 1]\nfemale = train[train['Sex'] == 0]\n\n## empty list for storing mean sample\nm_mean_samples = []\nf_mean_samples = []\n\nfor i in range(50):\n    m_mean_samples.append(np.mean(random.sample(list(male['Survived']),50,)))\n    f_mean_samples.append(np.mean(random.sample(list(female['Survived']),50,)))\n    \n\n# Print them out\nprint (f\"Male mean sample mean: {round(np.mean(m_mean_samples),2)}\")\nprint (f\"Male mean sample mean: {round(np.mean(f_mean_samples),2)}\")\nprint (f\"Difference between male and female mean sample mean: {round(np.mean(f_mean_samples) - np.mean(m_mean_samples),2)}\")","5ac5c02d":"train = train.drop(['PassengerId', 'Cabin'], axis=1)","48e485f6":"test = test.drop(['PassengerId', 'Cabin'], axis=1)","2e26af92":"train = train.drop(['Name', 'Ticket'], axis=1)\ntest = test.drop(['Name', 'Ticket'], axis=1)","5efd6c2f":"train['family_size'] = train.SibSp + train.Parch+1\ntest['family_size'] = train.SibSp + train.Parch+1","0c4f5e66":"def family_group(size):\n    a = ''\n    if (size <= 1):\n        a = 'loner'\n    elif (size <= 4):\n        a = 'small'\n    else:\n        a = 'large'\n    return a","cf43ee75":"train['family_group'] = train['family_size'].map(family_group)\ntest['family_group'] = test['family_size'].map(family_group)","0cef9d6e":"train['is_alone'] = [1 if i<2 else 0 for i in train.family_size]\ntest['is_alone'] = [1 if i<2 else 0 for i in test.family_size]","8a50d247":"## Calculating fare based on family size.\ntrain['calculated_fare'] = train.Fare \/ train.family_size\ntest['calculated_fare'] = test.Fare \/ test.family_size","5d9096da":"def fare_group(fare):\n    a = ''\n    if fare <= 4:\n        a = 'Very Low'\n        \n    elif fare <= 10:\n        a = 'Low'\n        \n    elif fare <= 20:\n        a = 'mid'\n        \n    elif fare <= 45:\n        a = 'high'\n        \n    else:\n        a = 'very high'\n    return a\n\ntrain['fare_group'] = train['calculated_fare'].map(fare_group)\ntest['fare_group'] = test['calculated_fare'].map(fare_group)","a459cd1d":"train.drop(['family_size','Fare'], axis=1, inplace=True)\ntest.drop(['family_size',\"Fare\"], axis=1, inplace=True)\n","137ab105":"train = pd.get_dummies(train, columns=[\"Pclass\",'Embarked', 'family_group', 'fare_group'], drop_first=False)\ntest = pd.get_dummies(test, columns=[\"Pclass\",'Embarked', 'family_group', 'fare_group'], drop_first=False)","1230155a":"train.head(5)","83c464db":"train = pd.concat([train[['Survived', 'Age', 'Sex', 'SibSp', 'Parch']], train.loc[:, 'is_alone':]], axis=1)","b8f340c7":"test = pd.concat([test[['Age', 'Sex']], test.loc[:, 'SibSp':]], axis=1)","fba9d752":"from sklearn.ensemble import RandomForestRegressor\n\ndef completing_age(df):\n    ## gettting all the features except Survived\n    age_df = df.loc[:, 'Age':]\n    \n    temp_train = age_df.loc[age_df.Age.notnull()]## df with age values\n    temp_test = age_df.loc[age_df.Age.isnull()]\n    \n    y = temp_train.Age.values\n    x = temp_train.loc[:, 'Sex':].values\n    \n    rfr = RandomForestRegressor(n_estimators=1500, n_jobs=-1)\n    rfr.fit(x, y)\n    predicted_age = rfr.predict(temp_test.loc[:, 'Sex':])\n    \n    df.loc[df.Age.isnull(), \"Age\"] = predicted_age\n    return df\n\n## Implementing the completing_age function in both train and test dataset. \ncompleting_age(train)\ncompleting_age(test);","e22e55fc":"## Let's look at the his\nplt.subplots(figsize = (22,10),)\nsns.distplot(train.Age, bins = 100, kde = True, rug = False, norm_hist=False);","36377068":"##we can create a new column by grouping the age group","d67148e1":"def age_group_fun(age):\n    a = ''\n    if age <= 1:\n        a = 'infant'\n    elif age <= 4:\n        a = 'toddler'\n    elif age <= 13:\n        a = 'teenager'\n    elif age <= 18:\n        a = 'teenager'\n    elif age <= 35:\n        a = 'young_adult'\n    elif age <= 45:\n        a = 'adult'\n    elif age <= 55:\n        a = 'middle_aged'\n    elif age <= 65:\n        a = 'senior_citizen'\n    else:\n        a = 'old'\n    return a\n\ntrain['age_group'] = train['Age'].map(age_group_fun)\ntest['age_group'] = test['Age'].map(age_group_fun)","7fdb94bc":"train = pd.get_dummies(train, columns=['age_group'], drop_first=True)\ntest = pd.get_dummies(test, columns=['age_group'], drop_first=True);","c02736bf":"# It is important to separate dependent and independent variables.\n#Our dependent variable or target variable is something that we are trying to find,\n#and our independent variable is the features we use to find the dependent variable.","fd8008b1":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)","04d3ddf4":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.33, random_state=0)","f7bc3d92":"len(X_train)","e0b48882":"len(X_test)","37efde19":"train.sample(5)","87be6b32":"#Here Age and Calculated_fare is much higher in magnitude compared to others machine learning features.\n#This can create problems as many machine learning models will get confused thinking Age and Calculated_fare\n#have more weight than other features. Therefore, we need to do feature scaling to get a better result.\n#There are multiple ways to do feature scaling.","ab03284e":"from sklearn.preprocessing import StandardScaler","edc2cc17":"std_scaler = StandardScaler()\nX_train = std_scaler.fit_transform(X_train)\nX_test = std_scaler.transform(X_test)","0f933486":"# import LogisticRegression model in python. \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_absolute_error, accuracy_score","0e9a2b25":"reg = LogisticRegression(solver='liblinear', penalty='l1', random_state=42)\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)","1119da82":"y_pred","c0aafa52":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_pred, y_test)\ncm","cee3347a":"#Accuracy is the measure of how often the model is correct.","088c18ba":"accuracy_score(y_test, y_pred)","2ec5d81f":"from sklearn.metrics import classification_report, balanced_accuracy_score\nprint(classification_report(y_test, y_pred))","dcb54e62":"y_pred_test = reg.predict(test)","f6f42c49":"y_pred_test","986d2161":"submission = pd.DataFrame({\n        \"PassengerId\": submission.PassengerId,\n        \"Survived\": y_pred_test\n    })\n\nsubmission.PassengerId = submission.PassengerId.astype(int)\nsubmission.Survived = submission.Survived.astype(int)\n\nsubmission.to_csv(\"titanic1_submission.csv\", index=False)","17b15ca3":"Confusion matrix, a table that describes the performance of a classification model. Confusion Matrix tells us how many our model predicted correctly and incorrectly in terms of binary\/multiple outcome classes by comparing actual and predicted cases.","9b3126fc":"Alot of passengers that bought a ticket under 100 dollars did not survive","4b956123":"More females survived than males","effec059":"There is an outlier with a fare of 512 dollars. we will delete these outliers","3e6ae3a4":"More males than females in the data","31c74169":"checking to see if our dataset consists of any missing values","bca586d8":"Most of the passengers were with in the Fare range of $100.","228f2660":"FROM WHAT I CAN SEE CABIN CONSISTS OF 77% MISSING VALUES WHILE AGE CONSISTS OF 19% MISSING VALUES \nNOW HOW CAN WE DEAL WITH THESE MISSING VALUES?","8f50c7bd":"Less people survived","c3cbaef1":"Most Males that embarked in southampton died and most females that embarked in southampton survived\nPretty much every male that boarded on Queenstown(Q) did not survive.\nPretty much every female that boarded on Queenstown(Q) survived.","e45b7915":"Embarked contains 2 null values"}}