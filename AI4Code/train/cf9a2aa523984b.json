{"cell_type":{"050133a8":"code","5243fd1e":"code","750af645":"code","e08f2524":"code","16c93c49":"code","3ebbf17d":"code","4af14f08":"code","dbdad5b3":"code","9a4d7b88":"code","7d02e441":"code","4f82ebc9":"code","d35904dc":"code","4cbc15f5":"code","d1f126a0":"code","9be5aef7":"code","24307f53":"code","06a0c585":"code","bfa80598":"code","5363b3b7":"code","ec1c70cf":"code","18bbef1c":"code","10df7d7f":"code","3b0bf88c":"code","5ec7de09":"code","bc2f502a":"code","0a7827e2":"code","a43655ae":"code","3e3e8b36":"code","ca582c2d":"code","1482bf49":"code","582c6ffa":"code","590a6cd6":"code","eabdb886":"code","3f915b89":"code","aec348f0":"code","b876735e":"code","98ce6071":"code","5edd5c57":"code","79343a20":"code","41dbe27a":"code","70db0938":"code","6dad3ba3":"code","1bb5ea80":"code","c36aab7c":"code","b0784ad6":"code","f8b9899c":"code","7e793931":"code","53fbd405":"code","438f9d92":"code","6e19d28f":"code","c2a65c7a":"code","d397328f":"code","12ae2d14":"code","706174ef":"code","ddfccd27":"code","acf0343f":"code","9ea2c7d3":"code","06402b2b":"code","044b5bad":"markdown","1c022155":"markdown","b6717247":"markdown","d093e4c7":"markdown","ec55a154":"markdown","8d8a200d":"markdown","63429885":"markdown","ef26c651":"markdown","527ea352":"markdown","0b8a62fc":"markdown","66c9171e":"markdown","13d4d99a":"markdown","21ae2b49":"markdown","5b94ebfc":"markdown"},"source":{"050133a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5243fd1e":"#pandas ve numpy,seaborn ve matplotlib k\u00fct\u00fcphanesini insert ediyoruz.\nimport pandas as pd \nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns ","750af645":"data = pd.read_excel('..\/input\/ispark\/ispark.xlsx')\n\n\n\n","e08f2524":"#datan\u0131n ilk 5 verisini g\u00f6zlemliyorum. \n\ndata.head(2)","16c93c49":"#Data seti hangi kolonlardan olu\u015fuyor \ndata.columns","3ebbf17d":"data['Park_Ad\u0131']","4af14f08":"#Verinin sondan 3 sat\u0131r\u0131n\u0131 g\u00f6zlemliyoruz \ndata.tail(3)","dbdad5b3":"#Data setin veri tipleri hakkk\u0131nda genel bilgi \ndata.info()","9a4d7b88":"#Bir kolonun veri tipini inceliyorsun\ndata['Boylam'].dtypes","7d02e441":"#Say\u0131sal bir de\u011ferin da\u011f\u0131l\u0131m\u0131n\u0131 incelemek i\u00e7in \ndata['Park_Kapasitesi'].describe()","4f82ebc9":"data.sort_values(by='Park_Kapasitesi' , ascending=True)","d35904dc":"#Ka\u00e7 farkl\u0131 \u00e7e\u015fit oldu\u011funu incelemek amac\u0131yla \ndata['Park_Tipi'].value_counts()","4cbc15f5":"# bo\u015f de\u011fer kontrolu \ndata.isnull().sum()","d1f126a0":"data['Park_Tipi'].duplicated().any()","9be5aef7":"#IS NOT NULL \ndata[data['Enlem'].notna()]\n ","24307f53":"#Bir de\u011fi\u015fkeni liste halinde g\u00f6rmek istenirse \n\nlist(data['B\u00f6lge'].unique())","06a0c585":"#Ba\u015fka bir alt de\u011fi\u015fken incelenmesi \nlist(data['Alt_B\u00f6lge'].unique())","bfa80598":"data['\u0130l\u00e7e']\n\n","5363b3b7":"\ndata[['\u0130l\u00e7e', 'Alt_B\u00f6lge', 'B\u00f6lge', 'Park_Tipi']].head(5)\n\n","ec1c70cf":"filtre_data=data.Park_Tipi\nfiltre_data","18bbef1c":"filtre_data_1=data[data.Ayl\u0131k_Abonelik_\u00dccreti>200]\nfiltre_data_1","10df7d7f":"data[(data['\u0130l\u00e7e'] == 'FAT\u0130H') & (data['Ayl\u0131k_Abonelik_\u00dccreti']==200)].head(2)\n#Filtreleme \n","3b0bf88c":" data[(data['\u0130l\u00e7e'] == 'FAT\u0130H') & (data['Park_Tipi']=='KAPALI OTOPARK' )]","5ec7de09":"data[data['\u0130l\u00e7e'] == 'FAT\u0130H'].count()","bc2f502a":"#Bir de\u011fi\u015fkenin gruplanmas\u0131 \ndata.groupby('\u0130l\u00e7e').size()","0a7827e2":"data.groupby('B\u00f6lge').size()","a43655ae":"data.Ayl\u0131k_Abonelik_\u00dccreti.agg(['sum','max', 'min','mean'])","3e3e8b36":"data.Ayl\u0131k_Abonelik_\u00dccreti.quantile(.95)","ca582c2d":"data.Ayl\u0131k_Abonelik_\u00dccreti.max()","1482bf49":"#\u0130l\u00e7enin toplam kapasitesinin hesaplanmas\u0131 ve b\u00fcy\u00fckten k\u00fc\u00e7\u00fc\u011fe s\u0131ralanas\u0131 \ndata.groupby('\u0130l\u00e7e')['Park_Kapasitesi'].sum().sort_values(ascending=False)","582c6ffa":"# First we copy our dataset\ndata_new=data.groupby('\u0130l\u00e7e')['Park_Kapasitesi'].sum().reset_index()\ndata_new.head(1)","590a6cd6":"# Mevcut datasetine yeni bir kolon eklenmesi ve o kolonun  update edilmesi \ndata['Total_Kapasite']=data_new['Park_Kapasitesi']\ndata.columns","eabdb886":"ortalama_park_kapasitesi = data.Park_Kapasitesi.mean()\n\n\ndata[\"park_kapasite_seviyesi\"] = [\"dusuk\" if ortalama_park_kapasitesi > each else \"yuksek\" for each in data.Park_Kapasitesi]\nprint(data[\"park_kapasite_seviyesi\"])\ndata.head(1)","3f915b89":"# Set the width and height of the figure\nplt.figure(figsize=(45,15))\n\n# Add title\nplt.title(\"\u0130l\u00e7elerin Park Kapasitesi\")\n\n# Bar chart showing average arrival delay for Spirit Airlines flights by month\nsns.barplot(x=data_new['\u0130l\u00e7e'], y=data_new['Park_Kapasitesi'])\n\n# Add label for vertical axis\nplt.ylabel(\"Park Kapasitesi\")\nplt.xlabel(\"\u0130l\u00e7e\")","aec348f0":"data_gaz=pd.read_excel('..\/input\/igdasdata\/igdas.xlsx')\ndata_gaz.head()","b876735e":"data_join=pd.merge(data, data_gaz, on='\u0130l\u00e7e')#inner join\ndata_join.head(1)\n#pd.merge(df1, df2, on='key', how='left')left join i\u00e7in \n","98ce6071":"# visualize your numerical feature with a boxplot\nplt.figure(figsize = (4, 8))\ndata_gaz.Abone_Say\u0131.plot(kind = 'box');","5edd5c57":"# \u0130BB verisinin csvpd.read_excel() olarak kaydedilmi\u015f hali.\nokultatil = pd.read_excel('..\/input\/okultatil\/OkulTatil.xlsx')\n\n# 2019 y\u0131l\u0131 i\u00e7indeki resmi tatilleri i\u00e7eren dosya.\nresmitatil = pd.read_excel('..\/input\/resmitarih-tatil\/ResmiTatilTarihleri.xlsx')\n\n\n# 2019 y\u0131l\u0131 i\u00e7indeki resmi tatiller hari\u00e7 okul tatillerini i\u00e7eren dosya.\nindex = pd.read_excel('..\/input\/indeks-rapor\/Trafikindeks_2019.xlsx')\n","79343a20":"okultatil","41dbe27a":"resmitatil","70db0938":"index['Trafik'].sort_values","6dad3ba3":"index['Trafik'].mean()","1bb5ea80":"# Kullanaca\u011f\u0131m\u0131z renkler\nprint(\"Genel Renkler\")\nsns.palplot(sns.color_palette(\"Paired\"))\nplt.show()\nprint(\"Is\u0131 Haritas\u0131 Renkler\")\nsns.palplot(sns.diverging_palette(128, 10, s=75, l=50, center='light'))\nplt.show()\n\n# Bunlar\u0131 bir kenara saklayal\u0131m\npaired_pal = sns.color_palette(\"Paired\")\nhm_pal = sns.diverging_palette(128, 10, s=75, l=50, center='light', as_cmap=True)","c36aab7c":"result = pd.merge(index, okultatil, how='left', on=['Tarih'])","b0784ad6":"data_index = pd.merge(result, resmitatil, how='left', on=['Tarih'])","f8b9899c":"\ndata_index","7e793931":"data_index.sort_values(by='Trafik', ascending=False).head(40)","53fbd405":"# visualize your numerical feature with a histogram\ndata_index.Trafik.hist(bins =100)\nplt.xlabel(',\u0130ndex')\nplt.ylabel('Count')\nplt.title('Histogram of Average Cost for two');","438f9d92":"\nemptyyear = pd.date_range(start=\"20190101\", \n                     end=\"20191231\", \n                     periods=365,\n                     normalize=True)\nalldays = set(emptyyear)\nobservationdays = set([i.normalize() for i in data_index['Tarih']])\nnodata = list(alldays.difference(observationdays))\nnodata.sort()\nnodata_days = len(nodata)\nnodata_percent = (1 - (len(observationdays)\/len(alldays)))*100\nprint(f\"Veri Olmayan G\u00fcnler: {nodata_days} (%{nodata_percent:.1f})\")\nfor day in nodata:\n    print(day.date(), )","6e19d28f":"title = 'Trafik Yo\u011funlu\u011fu (G\u00fcnl\u00fck G\u00f6zlem Say\u0131s\u0131)'\nobservationcounts = data_index.groupby('Tarih')['Trafik'].agg([\"count\"])\nobservationcounts = observationcounts.reindex(emptyyear)\nsns.set(context='paper', style='whitegrid')\nf, ax = plt.subplots(figsize=(18, 6))\np = sns.scatterplot(data=observationcounts,  \n                    markers=\"o\", \n                    color=[paired_pal[1]],\n                    legend=False,\n                    ax=ax)\nplt.xlim(emptyyear[0], emptyyear[-1])\nplt.ylim(0, 400)\np.set_title(title, fontsize=16)\np.set(xlabel=\"\")\np.set_ylabel(\"\")\np.tick_params(labelsize=10)\n\nleftx = plt.xlim()[0]\nbottomy = plt.ylim()[0] - ((plt.ylim()[1] - plt.ylim()[0]) * 0.125)\n\n\nall_figures[title] = f\nplt.show()","c2a65c7a":"# Ay ve ay\u0131n g\u00fcn\u00fc baz\u0131nda bakal\u0131m.\nby_ay_gun = data_index.groupby(['Ay','Ay\u0131n_G\u00fcn\u00fc','Haftasonu','Okul_Tatilleri'])[\"Trafik\"].agg([\"mean\", \"max\"])\n","d397328f":"# En k\u00f6t\u00fc ortalamal\u0131 5 g\u00fcn\nby_ay_gun.sort_values(by='max', ascending=False).head(5)","12ae2d14":"data_index","706174ef":"# Haftan\u0131n g\u00fcn\u00fc ve saat baz\u0131nda bakal\u0131m.\nby_gun_saat = data_index.groupby([\"G\u00fcn\", \"Tam_Saat\"])[\"Trafik\"].agg(\n    [\"mean\", \"max\", \"min\", \"median\", \"std\"])\nby_gun_saat = by_gun_saat.reset_index()\nby_gun_saat_flat = by_gun_saat.pivot(\"G\u00fcn\", \"Tam_Saat\", \"mean\")\nby_gun_saat_flat = by_gun_saat_flat.sort_index()","ddfccd27":"title = 'Trafik Yo\u011funlu\u011fu (Haftan\u0131n G\u00fcn\u00fc ve Saatlere G\u00f6re)'\nsns.set(context='poster')\n# Heatmap\nf, ax = plt.subplots(figsize=(36, 32))\np = sns.heatmap(by_gun_saat_flat, \n            annot=True, \n            linewidths=.5, \n            cmap=hm_pal, \n            square=True,\n            cbar=True,\n            cbar_kws={\"shrink\": .25},\n            fmt='.0f',\n            ax=ax)\n# Ba\u015fl\u0131k\np.set_title(title, fontsize=24)\n\n\n\nleftx = plt.xlim()[0]\nbottomy = plt.ylim()[0] - ((plt.ylim()[1] - plt.ylim()[0]) * 0.15)\nbottomy2 = plt.ylim()[0] - ((plt.ylim()[1] - plt.ylim()[0]) * 0.20)\n\n\n# Notlar\np.text(leftx, bottomy2, \"Renkler ve say\u0131lar saatlik ortalama trafi\u011fi g\u00f6steriyor.\", \n       ha ='left', \n       fontsize = 18,\n       verticalalignment='bottom')\n\n\n# Ay ve g\u00fcn demeye gerek yok bo\u015fu bo\u015funa. Temizleyelim.\np.set(xlabel=\"\", ylabel=\"\")\n\nall_figures[title] = f\nplt.show()","acf0343f":"# Bir korelasyon matrisi yap\u0131p ne neyle ili\u015fkili bakal\u0131m.\n\ncorr = data_index.corr()","9ea2c7d3":"data_index","06402b2b":"title = ' Trafik Yo\u011funluk Korelasyonu ()'\n# Bu \u00fc\u00e7gen de\u011fil kare versiyonu.\nsns.set(context='poster',style='white')\n# Heatmap\nf, ax = plt.subplots(figsize=(20, 20))\n\n# Heatmap. Ama renk paletimizi tersine \u00e7eviriyoruz (hm_pal.reversed()) \u00e7\u00fcnk\u00fc pozitifler ye\u015fil olsun istiyoruz.\np = sns.heatmap(corr, \n                cmap=hm_pal.reversed(), \n                center=0,\n                square=True, \n                linewidths=.5,\n                annot=True, \n                fmt='.2f',\n                cbar=True,\n                cbar_kws={\"shrink\": 1},\n                ax=ax)\n\n# Ba\u015fl\u0131k\np.set_title(title, fontsize=32)\n\n# X aks\u0131ndak\u015fi yaz\u0131lar\u0131 \u00e7evirelim. Zor okunuyor.\nf.autofmt_xdate(bottom=0.5, rotation=30, ha='right')\n\n# Akslardaki yaz\u0131lar\u0131n boyu\np.tick_params(labelsize=20)\n\nleftx = plt.xlim()[0]\nbottomy = plt.ylim()[0] - ((plt.ylim()[1] - plt.ylim()[0]) * 0.25)\n\n# Notumuz.\np.text(leftx, bottomy, KAYNAK, \n       ha ='left', \n       fontsize = 14,\n       verticalalignment='bottom')\n\nall_figures[title] = f\nplt.show()","044b5bad":"# TANIMLAYICI VER\u0130 ANAL\u0130Z\u0130","1c022155":"# PANDAS K\u00dcT\u00dcPHANES\u0130 \n*  pandas hizli ve etkili for dataframes\n*  csv ve text dosyalar\u0131na acip inceleyip sonuclarimiza bu dosya tiplerine rahat bir sekilde kaydedbilir.\n* pandas bizim isimizi kolaylastiriyor for missing data\n* reshape yapip datayi daha etkili bir sekilde kullanabiliriz\n*  slicing indexing kolay\n*  time series data analizinde cok yardimci\n* ayrica herseyden onemlisi hiz pandas hiz acisindan optimize edilmis hizli bir kutuphane","b6717247":"![](http:\/\/)PANDAS F\u0130LTER\u0130NG****","d093e4c7":"#  MATPLOTL\u0130B K\u00dcT\u00dcPHANES\u0130 \n*  Verileri g\u00f6rselle\u015ftirmeye yarayan Python k\u00fct\u00fcphanesi\n*  Line, Scatter(iki de\u011fi\u015fken aras\u0131ndaki corelasyon i\u00e7in ),Histogram \u00e7izmek i\u00e7in kullan\u0131l\u0131r .\n\n#  SEABORN K\u00dcT\u00dcPHANES\u0130 \n* Seaborn, Matplotlib k\u00fct\u00fcphanesi tabanl\u0131, istatiksel bir Python veri g\u00f6rselle\u015ftirme k\u00fct\u00fcphanesidir. \n* Seaborn kullan\u0131c\u0131lara istatiksel g\u00f6rselle\u015ftirmeler yapmalar\u0131 i\u00e7in high-level (y\u00fcksek seviyeli) bir aray\u00fcz sunar.\n","ec55a154":"# pandas  filtering\n* dataFrame['filtre1']\n* dataFrame['filtre1','filtre2','filtre3']\n* filtrelenmis_data = dataFrame[filtre1] \n* filtrelenmis_data = dataFrame.filtre>x \n* dataFrame[filtre1 & filtre2] \n* dataFrame[filtre1 | filtre2] \n* dataFrame[dataFrame1['col2'].isna()] \n* dataFrame[dataFrame1['col2'].notna()]","8d8a200d":"pandas # %% concatenating\u00b6","63429885":"PANDAS GROUP\u0130NG","ef26c651":"# pandas # %% Descriptive statistics","527ea352":"## PANDAS BAS\u0130C METHOD","0b8a62fc":"\n# pandas # %% Descriptive statistics\u00b6\n* dataFrame.filtre1.agg(['sum', 'mean']) \n* dataFrame.filtre1.agg(['max', 'min'])","66c9171e":"# pandas basic method\n* print(dataFrame.columns)#Verinin kolonlar\u0131 nelerden olu\u015fur \n* print(dataFrame.head)#Datan\u0131n ilk 5 verisini g\u00f6r\u00fcnt\u00fclenir\n* print(dataFrame.tail) #Sondaki ilk 10 veriyi d\u00f6nd\u00fcr\u00fcr.\n* print(dataFrame.info()) #t\u00fcm kolonlar\u0131n veri tipi\n* print(dataFrame.dtypes) # kolonun veri tipi\n* print(dataFrame.describe()) #max,min, mean gibi de\u011ferler d\u00f6nd\u00fcr\u00fcr\n* feature = columns (age,maas) \n* print(dataFrame.sort_values()) #S\u0131ralama \n* print(dataFrame.value_counts()) \n* print(dataFrame.isnull().sum()) #bo\u015f de\u011fer kontrolu\n* print(dataFrame.duplicated().any() #\u00e7ift kay\u0131t kontrolu, mant\u0131ksal sonu\u00e7 d\u00f6ner. True\/False","13d4d99a":"\n# pandas # %% GroupBy\n* dataFrame.groupby('filtre1').size() \n* dataFrame.groupby('i\u0307filtre1')['filtre2'].sum().sort_values(ascending=False)","21ae2b49":"# NUMPY K\u00dcT\u00dcPHANES\u0130 \n* Python\u2019 da bilimsel hesaplamalarda kullan\u0131lan temel pakettir. \u00c7ok boyutlu bir dizi nesnesi,\n* Matematiksel, mant\u0131ksal, \u015fekil i\u015fleme, s\u0131ralama, se\u00e7me, g \/ \u00c7 i\u00e7eren bir dizi yordam sunar\n* Ayr\u0131k Fourier d\u00f6n\u00fc\u015f\u00fcm\u00fc, temel do\u011frusal cebir, temel istatistik i\u015flemler, rassal sim\u00fclasyonve \u00e7ok daha fazlas\u0131","5b94ebfc":"* Genellikle analiz s\u00fcre\u00e7lerinin ilk ad\u0131m\u0131d\u0131r \n* Veriler hakk\u0131nda genel bir fikir sahibi olmak\n* Tahmin yapabilmek i\u00e7in herhangi bir algoritmadan \u00f6nce uygulan\u0131r \n* H\u0131zl\u0131 ve basit bir \u00e7\u0131kar\u0131msal istatistik sorular\u0131n cevaplar\u0131n\u0131 verir."}}