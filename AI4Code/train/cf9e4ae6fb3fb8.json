{"cell_type":{"c41e4a7e":"code","e04dc607":"code","1145dd76":"code","ad5fc51d":"code","15740d28":"code","20fbde6b":"code","335649cc":"code","575a2d57":"code","1353deb6":"code","5c4e87ee":"code","ff500434":"code","43bf3e4e":"code","360fdd3b":"code","8681a266":"code","d309c4d1":"code","07c26577":"code","e36b644d":"code","f1550dbf":"markdown","d65a20d4":"markdown","1edfca22":"markdown","c0c9792b":"markdown","debe70b7":"markdown"},"source":{"c41e4a7e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression","e04dc607":"datasets = pd.read_csv(\"..\/input\/iris\/Iris.csv\")","1145dd76":"datasets","ad5fc51d":"target = datasets[\"Species\"] \ntarget.astype('category') ","15740d28":"target_encode = [] #List to store all the encoded data\nfor i in range(len(target)):\n  if (target[i] == \"Iris-setosa\"): # 0\n    target_encode.append(0)\n  elif (target[i] == \"Iris-versicolor\"): # 1\n    target_encode.append(1)\n  else:\n    target_encode.append(2) # 2","20fbde6b":"target_encode[:10]","335649cc":"data = datasets[\"SepalLengthCm\"] # X","575a2d57":"plt.plot(data)\nplt.title(\"Data\")","1353deb6":"x = data\ny = target_encode\n\nx = np.array(x)\ny = np.array(y)","5c4e87ee":"from sklearn.model_selection import train_test_split #Split the dataset into parts\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0) #30% data -> Test data ","ff500434":"poly = PolynomialFeatures(14).fit_transform(X_train.reshape(-1 , 1)) #Quadratic Regression -> X_train || y_train\nreg2 = LinearRegression()\nreg2.fit(poly , y_train) ","43bf3e4e":"plt.plot(y_train) # Ground Truth or Actual Value\nplt.plot(reg2.predict(poly)) # Y_Pred","360fdd3b":"pred_target = np.array([7.9]) # Iris-virginica sepal length","8681a266":"poly1 = PolynomialFeatures(14).fit_transform(pred_target.reshape(1 , -1)) #Quadratic Regression -> X_train || y_train","d309c4d1":"pred = np.round (reg2.predict(poly1))","07c26577":"def predict(pred):\n  if (pred == 0):\n    return (\"Iris-setosa\")\n  elif (pred == 1):\n    return (\"Iris-versicolor\")\n  else:\n    return (\"Iris-virginica\")","e36b644d":"predict(pred)","f1550dbf":"### Inference","d65a20d4":"### Creating Train and Test Split","1edfca22":"# IRIS Classifier\n\n**Introduction :**  This notebook implements the Polynomial and Linear Regression models on the IRIS datasets. The models are from the sklearn library. This is a very simple model and is very easy to implement. \n\n**Steps :**\n\n1. Import my dataset\n2. Load my dataset\n3. Pre-Process dataset\n4. See the variables in dataset\n5. Target Variable selection\n6. Vis the data\n7. Choose the model\n8. Construct the model\n9. Train the model\n10. Adjust hyperparameters\n11. Test the model \n12. Deploy the model\n\n","c0c9792b":"### Implementation of manual label encoding","debe70b7":"### Fitting the Model"}}