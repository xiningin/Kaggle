{"cell_type":{"d10e2bdb":"code","1e4fc84c":"code","398e42a0":"code","f0dfdd05":"code","eab853ab":"code","10b2ecb6":"code","7e0b81b2":"code","1a1bdac1":"code","1ce5d0ef":"code","38a14381":"code","0e5a51be":"code","3dd4d9f4":"code","015019fb":"code","c3d73e9d":"code","a077bbba":"code","bf858a1b":"code","935f63a8":"code","402a2541":"code","6ebff4b1":"code","630d9fe8":"code","c4058813":"code","cd1d9cf0":"code","f43a1f3d":"code","fe9be2de":"code","94d4373c":"code","2525f413":"markdown","c885cf31":"markdown","03e2163b":"markdown","9ccbd064":"markdown","8f46829f":"markdown"},"source":{"d10e2bdb":"#Lets take a look at our directory\nimport os, shutil\nprint(os.listdir(\"..\/input\"))\n","1e4fc84c":"import random\nimport gc   #Gabage collector for cleaning deleted data from memory\n\ntrain_dir = '..\/input\/train'\ntest_dir = '..\/input\/test'\n\n# train_imgs = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir)]  #get full data set\ntrain_dogs = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'dog' in i]  #get dog images\ntrain_cats = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'cat' in i]  #get cat images\n\ntest_imgs = ['..\/input\/test\/{}'.format(i) for i in os.listdir(test_dir)] #get test images\n\ntrain_imgs = train_dogs[:2000] + train_cats[:2000]  # slice the dataset and use 2000 in each class\nrandom.shuffle(train_imgs)  # shuffle it randomly\n\n#Clear list that are useless\ndel train_dogs\ndel train_cats\ngc.collect()   #collect garbage to save memory","398e42a0":"#Import some packages to use\nimport cv2\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nimport seaborn as sns\n%matplotlib inline ","f0dfdd05":"#Lets declare our image dimensions\n#we are using coloured images. \nnrows = 150\nncolumns = 150\nchannels = 3  #change to 1 if you want to use grayscale image\n\n\n#A function to read and process the images to an acceptable format for our model\ndef read_and_process_image(list_of_images):\n    \"\"\"\n    Returns two arrays: \n        X is an array of resized images\n        y is an array of labels\n    \"\"\"\n    X = [] # images\n    y = [] # labels\n    \n    for image in list_of_images:\n        X.append(cv2.resize(cv2.imread(image, cv2.IMREAD_COLOR), (nrows,ncolumns), interpolation=cv2.INTER_CUBIC))  #Read the image\n        #get the labels\n        if 'dog' in image:\n            y.append(1)\n        elif 'cat' in image:\n            y.append(0)\n    \n    return X, y","eab853ab":"#get the train and label data\nX, y = read_and_process_image(train_imgs)","10b2ecb6":"#Lets view some of the pics\nplt.figure(figsize=(20,10))\ncolumns = 5\nfor i in range(columns):\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.imshow(X[i])","7e0b81b2":"del train_imgs\ngc.collect()\n#Convert list to numpy array\nX = np.array(X)\ny = np.array(y)\n\n#Lets plot the label to be sure we just have two class\nsns.countplot(y)\nplt.title('Labels for Cats and Dogs')","1a1bdac1":"print(\"Shape of train images is:\", X.shape)\nprint(\"Shape of labels is:\", y.shape)","1ce5d0ef":"#Lets split the data into train and test set\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=2)","38a14381":"#clear memory\ndel X\ndel y\ngc.collect()\n\n#get the length of the train and validation data\nntrain = len(X_train)\nnval = len(X_val)\n\n#We will use a batch size of 32. Note: batch size should be a factor of 2.***4,8,16,32,64...***\nbatch_size = 32  \n","0e5a51be":"from keras.applications import InceptionResNetV2\n\nconv_base = InceptionResNetV2(weights='imagenet', include_top=False, input_shape=(150,150,3))","3dd4d9f4":"conv_base.summary()","015019fb":"from keras import layers\nfrom keras import models\n\nmodel = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))  #Sigmoid function at the end because we have just two classes","c3d73e9d":"#Lets see our model\nmodel.summary()","a077bbba":"print('Number of trainable weights before freezing the conv base:', len(model.trainable_weights))\nconv_base.trainable = False\nprint('Number of trainable weights after freezing the conv base:', len(model.trainable_weights))\n","bf858a1b":"#We'll use the RMSprop optimizer with a learning rate of 0.0001\n#We'll use binary_crossentropy loss because its a binary classification\nfrom keras import optimizers\n\nmodel.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(lr=2e-5), metrics=['acc'])","935f63a8":"#Lets create the augmentation configuration\n#This helps prevent overfitting, since we are using a small dataset\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img\n\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,   #Scale the image between 0 and 1\n                                    rotation_range=40,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    fill_mode='nearest')\n\nval_datagen = ImageDataGenerator(rescale=1.\/255)  #We do not augment validation data. we only perform rescale","402a2541":"#Create the image generators\ntrain_generator = train_datagen.flow(X_train, y_train,batch_size=batch_size)\nval_generator = val_datagen.flow(X_val, y_val, batch_size=batch_size)","6ebff4b1":"#The training part\n#We train for 64 epochs with about 100 steps per epoch\nhistory = model.fit_generator(train_generator,\n                              steps_per_epoch=ntrain \/\/ batch_size,\n                              epochs=20,\n                              validation_data=val_generator,\n                              validation_steps=nval \/\/ batch_size)","630d9fe8":"#Save the model\nmodel.save_weights('model_wieghts.h5')\nmodel.save('model_keras.h5')","c4058813":"#lets plot the train and val curve\nimport matplotlib.pyplot as plt\n\n#get the details form the history object\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\n\nplt.show()\n","cd1d9cf0":"def smooth_plot(points, factor=0.7):\n    smooth_pts = []\n    for point in points:\n        if smooth_pts:\n            previous = smooth_pts[-1]\n            smooth_pts.append(previous * factor + point * (1 - factor))\n        else:\n            smooth_pts.append(point)\n    return smooth_pts","f43a1f3d":"#Plot figure\nplt.plot(epochs, smooth_plot(acc), 'b', label='Training accurarcy')\nplt.plot(epochs, smooth_plot(val_acc), 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\nplt.show()\n","fe9be2de":"#Now lets predict on the first 10 Images of the test set\nX_test, y_test = read_and_process_image(test_imgs[0:10]) #Y_test in this case will be empty.\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","94d4373c":"i = 0\ncolumns = 5\ntext_labels = []\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(x, batch_size=1):\n    pred = model.predict(batch)\n    if pred > 0.5:\n        text_labels.append('dog')\n    else:\n        text_labels.append('cat')\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.title('This is a ' + text_labels[i])\n    imgplot = plt.imshow(batch[0])\n    i += 1\n    if i % 10 == 0:\n        break\nplt.show()","2525f413":"> In this kernel, we'll use Transfer learning to achieve an accuracy of about 96%  on the Dog VS. Cat classification challenge.\n**\nA [link](https:\/\/medium.com\/@risingdeveloper\/transfer-learning-on-image-classification-using-keras-and-kaggle-kernels-c76d3b030649) to my Medium post with full explanation of this Notebook and transfer learning in general**","c885cf31":"The train data contains 25,000 images of both dogs and cats. We are going to sample a small portion of  the data for training because of memory and Ram limits on kaggle kernels. So therefore, we will use Data Augmentation to reduce overfitting.","03e2163b":"A [link](https:\/\/medium.com\/@risingdeveloper\/transfer-learning-on-image-classification-using-keras-and-kaggle-kernels-c76d3b030649) to my Medium post with full explanation of the code and transfer learning in general","9ccbd064":"Let's create a function that makes our plot looks smoother and cleaner.","8f46829f":"Now lets create our model."}}