{"cell_type":{"69f4048d":"code","2be0dfe0":"code","442e8a43":"code","b9dcfc04":"code","071812ad":"code","53ca4d50":"code","bf99a0c1":"code","d9070ed9":"code","ea80bcff":"code","e65d6f80":"code","c44e62dd":"code","415f6e13":"code","8e5285ce":"markdown","e41b3627":"markdown","d4e8291f":"markdown","2aca8710":"markdown","6e4bdea4":"markdown","ad1cd082":"markdown","1f75f7f4":"markdown","90f4512d":"markdown","464a685c":"markdown","3ac98c47":"markdown"},"source":{"69f4048d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport numpy as np\n\nfrom pandas.plotting import register_matplotlib_converters\nimport warnings\n\nregister_matplotlib_converters()\n\nwarnings.filterwarnings(\"ignore\")\n\nplt.rcParams[\"font.family\"] = \"sans-serif\"\n# plt.rcParams[\"figure.dpi\"] = 150\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndirectory = \"\/kaggle\/input\/kaggle-survey-2020\/\"\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2be0dfe0":"survey = pd.read_csv(directory + \"kaggle_survey_2020_responses.csv\")","442e8a43":"def isolate_col(df):\n    \"\"\"\n    Used for isolating 2 columns\n    and saving them to a dictionary.\n    col1 and col2 preferably have to\n    be object dtype.\n\n    Parameters\n    ----------\n    df : DataFrame\n        DESCRIPTION.\n    col1 : Object\n        DESCRIPTION.\n    col2 : Object\n        DESCRIPTION.\n\n    Returns\n    -------\n    Dictionary of col1 and col2.\n\n    \"\"\"\n    col1 = df.columns\n    col2 = list(df.loc[0, ])\n\n    q_dict = {q: ref for q, ref in zip(col1, col2)}\n\n    return q_dict\n\n# %% Run above function and subset only Python users\nquest_dict = isolate_col(survey)\nsurvey.drop(0, 0, inplace=True)\n\n# We have Q7_Part_1 as only Python users\npython = survey[survey.Q7_Part_1 == \"Python\"]","b9dcfc04":"print(\"Total number of respondents: {}\".format(len(survey)))\npython = survey[survey.Q7_Part_1 == \"Python\"]\nprint(\"Total number of pythonists: {}\".format(len(python)))","071812ad":"mapping = {\"Bachelor\u2019s degree\": \"Bachelor's\",\n           \"Doctoral degree\": \"Doctoral\",\n           \"I prefer not to answer\": \"Not Answered\",\n           \"Master\u2019s degree\": \"Master's\",\n           \"No formal education past high school\": \"High School\",\n           \"Professional degree\": \"Professional\",\n           \"Some college\/university study without earning a bachelor\u2019s degree\": \"Some College Study\"}\n\npython[\"Q4\"] = python.Q4.map(mapping)\n\npython[\"Q4\"].unique()","53ca4d50":"python_age_dist = python.Q1.value_counts().sort_index()\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 8))\np1 = ax.bar(python_age_dist.index,\n            python_age_dist,\n            color=(\"lightcoral\"),\n            alpha=0.6,\n            edgecolor='black',\n            linewidth=0.7)\n\nax.grid(axis='y', color='grey', linewidth=0.5, alpha=0.4)\n\n# Annotate each bar\nfor num in range(len(python_age_dist.index)):                 \n    ax.annotate(format(python_age_dist[num]),\n                xy=(p1.patches[num].get_x(),\n                    p1.patches[num].get_y() + p1.patches[num].get_height()+50),\n                xytext=(22.5, 0),\n                textcoords=\"offset points\",\n                va='center',\n                ha='center',\n                fontweight=\"bold\")\n\nsb.despine(left=True)\nplt.title(\"Age Distribution (Pythonists)\",\n          loc=\"left\",\n          fontweight='bold',\n          fontsize=15)\n\nplt.tight_layout()\nplt.savefig(\"Age Distribution.png\");","bf99a0c1":"edu_df = python[[\"Q2\", \"Q4\"]]\n\nedu_count = edu_df[[\"Q2\", \"Q4\"]].groupby(\"Q4\").count()\nedu_count.reset_index(inplace=True)\nedu_df_gender = pd.crosstab(edu_df.Q4, edu_df.Q2)\n\nfig, ax = plt.subplots(figsize=(15, 8))\n\nall_colors = list(plt.colormaps())\ncmap = 'ocean'\n\nsb.barplot(y=edu_count.Q4,\n           x=edu_count.Q2,\n           ax=ax,\n           palette=sb.set_palette(cmap, len(edu_count)))\n\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\nax.tick_params(labelsize=12)\nax.set_title(\"Count of Degree Holders\", loc=\"left\",\n             fontfamily=\"sans-serif\", fontweight=\"bold\", fontsize=16)\n\nax.grid(axis='x', alpha=0.3, linewidth=0.5, color='black')\nsb.despine(left=True)","d9070ed9":"male_edu = edu_df_gender.loc[:, \"Man\"]\nfem_edu = edu_df_gender.loc[:, \"Woman\"]\n\n\nfig, ax = plt.subplots(2, 1, figsize=(10, 10), subplot_kw=dict(aspect='equal'))\n\nwedges, text, pct = ax[0].pie(male_edu,\n                              wedgeprops=dict(width=0.5),\n                              startangle=0,\n                              autopct=\"%.1f%%\",\n                              pctdistance=0.8,\n                              colors=sb.set_palette(\"tab10\", len(male_edu)),\n                              textprops=dict(color='w',\n                                             fontfamily='sans-serif',\n                                             fontsize=12,\n                                             fontweight='bold'))\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    hor_align = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    conn_style = \"angle, angleA=0, angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": conn_style})\n    ax[0].annotate(male_edu.index[i],\n                   xy=(x, y),\n                   xytext=(1.35 * np.sign(x), 1.3 * y),\n                   horizontalalignment=hor_align,\n                   fontfamily='sans-serif',\n                   fontsize=12, **kw)\n\nax[0].set_title(\"Qualifications (Men)\", fontweight='bold', fontsize=14)\n\nwedges, text, pct = ax[1].pie(fem_edu,\n                              wedgeprops=dict(width=0.5),\n                              startangle=0,\n                              autopct=\"%.1f%%\",\n                              pctdistance=0.8,\n                              colors=sb.set_palette(\"tab10\", len(fem_edu)),\n                              textprops=dict(color='w',\n                                             fontsize=12,\n                                             fontweight='bold'))\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    hor_align = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    conn_style = \"angle, angleA=0, angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": conn_style})\n    ax[1].annotate(fem_edu.index[i],\n                   xy=(x, y),\n                   xytext=(1.35 * np.sign(x), 1.3 * y),\n                   horizontalalignment=hor_align,\n                   fontsize=12, **kw)\n\nax[1].set_title(\"Qualifications (Women)\", fontweight='bold', fontsize=14)\nplt.tight_layout()","ea80bcff":"occupation = python[\"Q5\"].value_counts()\n\n# Explore gender vs. occupation\ngen_occu = python[[\"Q2\", \"Q5\"]].groupby(\"Q2\")[\"Q5\"].value_counts().unstack()\ngen_occu = gen_occu.transpose()\ngen_occu.drop([\"Nonbinary\", \"Prefer to self-describe\", \"Prefer not to say\"],\n              axis=1, inplace=True)\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(30, 30), dpi=150)\n\np1 = sb.barplot(x=gen_occu.Man,\n                y=gen_occu.index,\n                data=gen_occu,\n                color='lightblue',\n                ax=ax1)\n\np2 = sb.barplot(x=gen_occu.Woman,\n                y=gen_occu.index,\n                data=gen_occu,\n                color='lightcoral',\n                ax=ax2)\n\nax2.invert_xaxis()\nax2.yaxis.set_ticks_position(\"right\")\n\nsb.despine(left=True)\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.tick_params(labelsize=25)\nax2.set_xlabel('')\nax2.set_ylabel('')\nax2.tick_params(labelsize=25)\nax1.set_title(\"Occupations (Python, Men)\", fontweight='bold', loc=\"left\", fontsize=30)\nax2.set_title(\"Occupations (Python, Women)\", fontweight='bold', loc=\"right\", fontsize=30)\n\npercent_men = [str(round((i\/gen_occu.Man.sum()) * 100, 2)) + \"%\" for i in gen_occu.Man]\npercent_women = [str(round((i\/gen_occu.Woman.sum()) * 100, 2)) + \"%\" for i in gen_occu.Woman]\n\n# Annotate men and women\nfor perc, num in zip(percent_men, range(len(gen_occu))):\n    ax1.annotate(perc,\n                   xy=(p1.patches[num].get_width(),\n                       p1.patches[num].get_y() + p1.patches[num].get_height()\/2),\n                   textcoords=\"offset points\",\n                   xytext=(28, 0),\n                   ha='center', va='center',\n                   fontsize=23,\n                rotation=-25)\n\nfor perc, num in zip(percent_women, range(len(gen_occu))):\n    ax2.annotate(perc,\n                   xy=(p2.patches[num].get_width(),\n                       p2.patches[num].get_y() + p1.patches[num].get_height()\/2),\n                   textcoords=\"offset points\",\n                   xytext=(-30, 0),\n                   ha='center', va='center',\n                   fontsize=23,\n                rotation=-25)\n\nplt.tight_layout(pad=1.0);","e65d6f80":"# %% Compare above chart with C++ programmers\ncpp = survey[survey.Q7_Part_5 == \"C++\"]\ngen_occu_cpp = cpp[[\"Q2\", \"Q5\"]].groupby(\"Q2\")[\"Q5\"].value_counts().unstack()\ngen_occu_cpp = gen_occu_cpp.transpose()\ngen_occu_cpp.drop([\"Nonbinary\", \"Prefer to self-describe\", \"Prefer not to say\"],\n              axis=1, inplace=True)\n\n# Plot bars\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(30, 30), dpi=150)\n\np1 = sb.barplot(x=gen_occu_cpp.Man,\n                y=gen_occu_cpp.index,\n                data=gen_occu_cpp,\n                color='#BFA840',\n                ax=ax1)\n\np2 = sb.barplot(x=gen_occu_cpp.Woman,\n                y=gen_occu_cpp.index,\n                data=gen_occu_cpp,\n                color='#82BF40',\n                ax=ax2)\n\nax2.invert_xaxis()\nax2.yaxis.set_ticks_position(\"right\")\n\nsb.despine(left=True)\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.tick_params(labelsize=25)\nax2.set_xlabel('')\nax2.set_ylabel('')\nax2.tick_params(labelsize=25)\nax1.set_title(\"Occupations (C++, Men)\", fontweight='bold', loc=\"left\", fontsize=30)\nax2.set_title(\"Occupations (C++, Women)\", fontweight='bold', loc=\"right\", fontsize=30)\n\npercent_men_cpp = [str(round((i\/gen_occu_cpp.Man.sum()) * 100, 2)) + \"%\" for i in gen_occu_cpp.Man]\npercent_women_cpp = [str(round((i\/gen_occu_cpp.Woman.sum()) * 100, 2)) + \"%\" for i in gen_occu_cpp.Woman]\n\n# Annotate men\nfor perc, num in zip(percent_men_cpp, range(len(gen_occu_cpp))):\n    ax1.annotate(perc,\n                   xy=(p1.patches[num].get_width(),\n                       p1.patches[num].get_y() + p1.patches[num].get_height()\/2),\n                   textcoords=\"offset points\",\n                   xytext=(28, 0),\n                   ha='center', va='center',\n                   fontsize=23,\n                rotation=-25)\n\nfor perc, num in zip(percent_women_cpp, range(len(gen_occu_cpp))):\n    ax2.annotate(perc,\n                   xy=(p2.patches[num].get_width(),\n                       p2.patches[num].get_y() + p1.patches[num].get_height()\/2),\n                   textcoords=\"offset points\",\n                   xytext=(-30, 0),\n                   ha='center', va='center',\n                   fontsize=23,\n                rotation=-25)\n\nplt.tight_layout(pad=1.0);","c44e62dd":"r_lang = survey[survey.Q7_Part_2 == \"R\"]\ngen_occu_r = r_lang[[\"Q2\", \"Q5\"]].groupby(\"Q2\")[\"Q5\"].value_counts().unstack().fillna(0)\ngen_occu_r = gen_occu_r.transpose()\ngen_occu_r.drop([\"Nonbinary\", \"Prefer to self-describe\", \"Prefer not to say\"],\n              axis=1, inplace=True)\n\n# Plot bars\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(30, 30), dpi=150)\n\np1 = sb.barplot(x=gen_occu_r.Man,\n                y=gen_occu_r.index,\n                data=gen_occu_r,\n                color='#40BFB6',\n                ax=ax1)\n\np2 = sb.barplot(x=gen_occu_r.Woman,\n                y=gen_occu_r.index,\n                data=gen_occu_r,\n                color='#BF4049',\n                ax=ax2)\n\nax2.invert_xaxis()\nax2.yaxis.set_ticks_position(\"right\")\n\nsb.despine(left=True)\nax1.set_xlabel('')\nax1.set_ylabel('')\nax1.tick_params(labelsize=25)\nax2.set_xlabel('')\nax2.set_ylabel('')\nax2.tick_params(labelsize=25)\nax1.set_title(\"Occupations (R, Men)\", fontweight='bold', loc=\"left\", fontsize=30)\nax2.set_title(\"Occupations (R, Women)\", fontweight='bold', loc=\"right\", fontsize=30)\n\npercent_men_r = [str(round((i\/gen_occu_r.Man.sum()) * 100, 2)) + \"%\" for i in gen_occu_r.Man]\npercent_women_r = [str(round((i\/gen_occu_r.Woman.sum()) * 100, 2)) + \"%\" for i in gen_occu_r.Woman]\n\n# Annotate men\nfor perc, num in zip(percent_men_r, range(len(gen_occu_r))):\n    ax1.annotate(perc,\n                   xy=(p1.patches[num].get_width(),\n                       p1.patches[num].get_y() + p1.patches[num].get_height()\/2),\n                   textcoords=\"offset points\",\n                   xytext=(28, 0),\n                   ha='center', va='center',\n                   fontsize=23,\n                rotation=-25)\n\nfor perc, num in zip(percent_women_r, range(len(gen_occu_r))):\n    ax2.annotate(perc,\n                   xy=(p2.patches[num].get_width(),\n                       p2.patches[num].get_y() + p1.patches[num].get_height()\/2),\n                   textcoords=\"offset points\",\n                   xytext=(-30, 0),\n                   ha='center', va='center',\n                   fontsize=23,\n                rotation=-25)\n\nplt.tight_layout(pad=1.0);","415f6e13":"age_occu = python[[\"Q1\", \"Q5\"]].groupby(\"Q1\")[\"Q5\"].value_counts().unstack().fillna(0)\n\nplt.figure(figsize=(50, 300), dpi=150)\n\nfor ix, group in enumerate(age_occu):\n    ax = plt.subplot(11, 2, ix+1)\n    p = sb.barplot(x=age_occu.index,\n               y=f\"{group}\",\n               data=age_occu,\n               ax=ax,\n               color=sb.set_palette(\"inferno\",\n                                    len(age_occu)))\n\n    for age in range(len(age_occu.index)):\n        p.annotate(format(int(age_occu[f\"{group}\"][age])),\n                   xy=(p.patches[age].get_x()+0.4,\n                       p.patches[age].get_y() + p.patches[age].get_height()),\n                   xytext=(0, 5),\n                   fontweight=\"bold\",\n                   fontsize=24,\n                   textcoords=\"offset points\",\n                    ha='center',\n                    va='center')\n\n    ax.tick_params(axis='x', labelrotation=50)\n    ax.tick_params(labelsize=28)\n    ax.set_xlabel(\"\")\n    ax.set_ylabel(\"\")\n    ax.set_title(f\"Age vs {group}\",\n                 fontsize=34,\n                 fontweight=\"bold\")\n\n    sb.despine(left=True)","8e5285ce":"## Initial Procedures\n\nLet's load our dataset and do some manipulations. I'll be isolating all the questions from the main dataset and storing them in a dictionary for helpful reference while isolating columns of importance.","e41b3627":"Clear results. Despite the perceived dominance of Python in the data science domain, most kagglers with the role 'Data Scientist' use more R than Python. Many inferences can be made from this. For example, despite the following Python commands, data scientists on the contrary perceive R as more expendable. Also, Python still remains the choice of students and young people just entering the industry. Additionally, R clearly seems to be maintaining its territory - more data analysts, data scientists, statisticians and people from research use R than Python.\n\nMoving on - let's see what age has to tell us. For example, we can analyse the occupation vs. age and answer what is the average age of data scientists and say an allied occupation of data analysts, so on and so forth.","d4e8291f":"## Age Distribution of Python Programmers \n\nWith over 95% respondents coding in Python (see above), it is crystal clear of how much reach the language commands.\n\nLet's start with some early steps and simple charting, and then I'll level up one step at a time. Below is the age distribution of pythonists, with education levels renamed for the purpose of proper naming within plot borders.","2aca8710":"The gender wise comparison is interesting. Despite having much fewer women's response, we still observe that there are 4% more women with master's, 2% more with a bachelor's degree and 1% more with doctoral's. Conclusively, Kaggle women hold more full time degrees than their male counterparts.\n\n## Occupations\n\nLet's move on to diving into the occupations part - what occupations do pythonists pursue?","6e4bdea4":"Wow! I was expecting something different. There are more students who code in C++, almost 15% more on average for both genders. Also, there are more unemployed Python programmers for both genders than compared with the C++ community. Additionally, software engineers and data scientists also seem to rely considerably on C++. Let's have a final look at Python's rival - R.","ad1cd082":"Clearly, age group 25-29 witnesses the most frequency, followed by younger age groups. We see an abrupt decline starting from bracket 30-34. Conclusion - Python is the choice of young learners and data crunchers.\n\n## Education (general and gender-wise)\nLet's see how pythonists fare on the education front.","1f75f7f4":"Data science certainly is a specialised area and requires consistent practise and skill development. Consequently, the majority hold at least one master's, followed by a bachelor's. We can conclude that more than 90% pythonists are full time degree holders.\n\nLet's go a little deeper into this - what is the educational distribution gender wise?","90f4512d":"## Introduction\n\nPython is one of the most widely used programming languages across a broad spectrum of applications. First invented in the late 80s, it has come a long way since then (we're nearing Python 4!).\n\nInterestingly, Python that is originally a developer's tool has also become the lingua franca of data munging and crunching, well surpassing free open source tools like R (that was originally made by statisticians for statisticians). I've myself witnessed this great language's growth in popularity; when I first joined Kaggle over 5 years ago, R was the dominant tool and data science itself was a pretty confined area, and well quite unheard of.\n\nIn such a short period of time, the growth of Python and data science has gone hand-in-hand, and Python now has well overtaken most of its contemporaries. I thought I might explore the Python community of Kaggle and see what it has to show us. This is my first submission on Kaggle, despite joining it in 2014 with people of my age group now being master competitors here (I thank them for the inspiration). But it's never too late! And so I hope this notebook would come out as interesting and insightful as possible.\n\nIn this notebook I explore specifically the Python community with some comparisons with other lanugages here and there. Pandas is a powerful tool and I personally believe it to be more versatile than R's tidyr package. And so here I've done most analysis through the chained `.groupby().unstack()` approach, keeping my code as simple and yet insightful as possible.\n\nThis is a work in progress, so I'll keep mining from the vast Kaggle dataset and adding more insights and new ideas whenever I come across anything important.","464a685c":"A lot of inferences can be made here:\n\n* People aged 18-21 dominantly occupy the student category. Interestingly, age group 25-29 has fewer students than I expected personally.\n* Some roles certainly record people of younger age groups (data analysts, ML Engineers and Business Analysts).\n* Project managers, data scientists and database engineers have a more uniform distribution; in fact the DBEs seem to be more towards the older age groups.\n* There are more younger unemployed than older groups.\n\nThis is it for now!\n### Work in Progress","3ac98c47":"The majority of the Python community is student followed by data scientists and interestingly, followed by a considerable unemployed people. Note that that I intentionally kept the x-axis to be expressed in numerals instead of percentages since my idea was to provide primarily the percentage of people under each occupation but also to provide a rough idea of how many people do really work under that occupation.\n\nThere are more women students than men, and this could explain why more women hold professional degrees than men. Interestingly, despite possessing more degrees, female Python programmers are 2% more unemployed. For men, we clearly observe inclination towards engineering roles. And hence greater distribution for data engineers, machine learning engineers, etc.\n\nHow does the Python community compare with say C++?"}}