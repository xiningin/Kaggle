{"cell_type":{"43df9c8e":"code","5244c394":"code","cf137289":"code","666f81f4":"code","e16aaaea":"code","c7c15893":"code","7e5a7674":"code","dcc00ed3":"code","66c386cb":"code","de2ca892":"code","9b52b266":"code","ba5d2111":"code","90300c65":"code","0a8e8611":"code","87c0bc48":"code","274f1a7e":"code","1ed22be8":"code","7daa17a8":"code","10e8f710":"code","935b01dd":"code","57b60b1a":"code","a499d3fe":"code","081050cd":"code","11a6fd40":"code","109b680b":"code","f5dfbf64":"code","7d4cce1d":"code","0d949bd8":"code","cdcfff93":"code","d6df3487":"code","11ac36b6":"code","2b49bab1":"code","13ec81c3":"code","4fba800b":"code","22d8251c":"code","9a8b89c3":"code","9ae61546":"code","cc1d926f":"markdown","d711f841":"markdown","6dbd7dcf":"markdown","df163bcd":"markdown","8ecbf07c":"markdown","18d9e05f":"markdown","a0b525df":"markdown","19767985":"markdown","12a44c9d":"markdown","f3931d8c":"markdown","9e3099e8":"markdown","310a0fbc":"markdown","768c316c":"markdown","a6aecfa8":"markdown","143e5fd3":"markdown","0dbc6892":"markdown","ff419f3a":"markdown","829e113a":"markdown","eb82f518":"markdown","4ca9b956":"markdown","b84b447b":"markdown","0acb5f78":"markdown","5ff14e49":"markdown","15f58b6e":"markdown","f839fd10":"markdown"},"source":{"43df9c8e":"import pandas as pd\nimport numpy as np\n\nimport operator\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\ndf = pd.read_csv('..\/input\/multipleChoiceResponses.csv')\ndf.drop([0],inplace=True)\n\n### ###\n### DROP SOME DATA ###\n# Start of time column\ndf['Time from Start to Finish (seconds)'] = df['Time from Start to Finish (seconds)'].apply(int)\n# Rejecting those who answered questions too fast:\ndf = df[df['Time from Start to Finish (seconds)']>60]\n# drop \"Time\" column\ndf.drop(['Time from Start to Finish (seconds)'],axis=1,inplace=True)\n# End of time column\n### ###","5244c394":"def is_salary_known(x):\n    if (x=='I do not wish to disclose my approximate yearly compensation'): return 'unknown'\n    if (x!=x): return 'unknown'\n    return 'known'\n\ndf['is salary known']=df['Q9'].apply(lambda x: is_salary_known(x))\n\n# all valid salary ranges:\nall_salaries = ['0-10,000','10-20,000','20-30,000','30-40,000','40-50,000','50-60,000','60-70,000',\n                       '70-80,000','80-90,000','90-100,000','100-125,000','125-150,000','150-200,000',\n                       '200-250,000','250-300,000','300-400,000','400-500,000','500,000+']","cf137289":"fig = plt.subplots(figsize=(12,6))\ndf_with_unknown_salaries = df\ng1 = sns.countplot(x='is salary known',data=df_with_unknown_salaries, \n                   order=['unknown','known'],palette='pastel')\ng1.set_xlabel('')\ng1.set_ylabel('')\ng1.tick_params(labelsize=16)\nout = g1.set_title('A compensation of how many respondents is known?',fontsize=24)","666f81f4":"### ###\n### DROP SOME DATA ###\n# drop those who didn't disclose disclose their salary\n# and those whose salary is unknown\ndf = df[(df['is salary known']=='known')]\n### ###\n\n# def: plot salary distribution\ndef plot_salary_distribution(df,col='Q9',x_label='yearly compensation, [USD]',order=None):\n    fig, ax2 = plt.subplots(figsize=(18,6))\n    g2 = sns.countplot(x=col,data=df, order=order, ax=ax2)\n    g2.set_xticklabels(ax2.get_xticklabels(),rotation=90)\n    g2.set_title('Yearly compensation distribution',fontsize=24)\n    g2.set_ylabel('')\n    g2.set_xlabel(x_label,fontsize=20)\n    g2.tick_params(labelsize=14)\n    #ax2.set(yscale=\"log\")\n    for p in ax2.patches:\n        x=p.get_bbox().get_points()[:,0]\n        y=p.get_bbox().get_points()[1,1]\n        ax2.annotate(p.get_height(), (x.mean(), y), ha='center', va='bottom',fontsize=14)\n        \n# plot salary distribution\nplot_salary_distribution(df,order=all_salaries)","e16aaaea":"renamed_columns = {\n    'Q1': 'gender',\n    'Q2': 'age [years]',\n    'Q3': 'country',\n    'Q4': 'education',\n    'Q5': 'undergraduate major',\n    'Q6': 'job title',\n    'Q7': 'industry',\n    'Q8': 'experience in current role [years]',\n    'Q9': 'yearly compensation [USD]',\n    'Q10': 'Does your current employer use ML?',\n    'Q24': 'experience writing data analysis code [years]',\n    'Q25': 'experience using ML [years]'\n}\n\ndef rename_columns(x):\n    if x in renamed_columns.keys():\n        return renamed_columns[x]\n    return x\n\ndf.rename(columns=lambda x: rename_columns(x), inplace=True)\n\n\n# shorten names of some countries\ndef rename_some_countries(x):\n    if (x=='United States of America'): return 'USA'\n    if (x=='United Kingdom of Great Britain and Northern Ireland'): return 'United Kingdom'\n    if (x=='Iran, Islamic Republic of...'): return 'Iran'\n    if (x=='Hong Kong (S.A.R.)'): return 'Hong Kong'\n    return x\n\ndf['country']=df['country'].apply(lambda x: rename_some_countries(x))\n\n# distribution over salary ranges\ndf_USA = df[(df['country']=='USA')]\ndf_India = df[(df['country']=='India')]\ndf_for_plot = pd.concat([df_USA,df_India])\n\nfig, ax2 = plt.subplots(figsize=(18,6))\ng2 = sns.countplot(x='yearly compensation [USD]',data=df_for_plot, \n                   order=all_salaries, ax=ax2, hue='country')\nsmth0 = g2.set_xticklabels(ax2.get_xticklabels(),rotation=90)\nsmth1 = g2.set_title('Yearly compensation distribution',fontsize=24)\nsmth2 = g2.set_ylabel('')\nsmth3 = g2.set_xlabel('yearly compensation [USD]',fontsize=20)\nsmth4 = g2.tick_params(labelsize=14)\nsmth5 = plt.gca().legend().set_title('')\nsmth6 = plt.setp(ax2.get_legend().get_texts(), fontsize='20') # for legend text","c7c15893":"# average salary values in each salary range\ndict_averages = {'0-10,000':5000,'10-20,000':15000,'20-30,000':25000,\n                '30-40,000':35000,'40-50,000':45000,'50-60,000':55000,\n                '60-70,000':65000,'70-80,000':75000,'80-90,000':85000,\n                '90-100,000':95000,'100-125,000':112500,'125-150,000':137500,\n                '150-200,000':175000,'200-250,000':225000,'250-300,000':275000,\n                '300-400,000':350000,'400-500,000':450000,'500,000+':650000}\n\ndict_mins = {'0-10,000':0,'10-20,000':10000,'20-30,000':20000,\n                 '30-40,000':30000,'40-50,000':40000,'50-60,000':50000,\n                '60-70,000':60000,'70-80,000':70000,'80-90,000':80000,\n                '90-100,000':90000,'100-125,000':100000,'125-150,000':125000,\n                '150-200,000':150000,'200-250,000':200000,'250-300,000':250000,\n                '300-400,000':300000,'400-500,000':400000,'500,000+':500000}\n\n# quantify salary ranges by enumerating them\ndef quantify_enumerate(x):\n    for i in range(1,len(all_salaries)+1):\n        if (x==all_salaries[i-1]): return i\n    return -100\n\n# quantify salary ranges by getting an average for each range\ndef quantify_average(x):\n    return dict_averages[x]\n\n# quantify salary ranges by getting an average for each range\ndef quantify_min(x):\n    return dict_mins[x]\n\ndf['enum salary ranges'] = df['yearly compensation [USD]'].apply(lambda x: quantify_enumerate(x))\n\ndf['salary averages'] = df['yearly compensation [USD]'].apply(lambda x: quantify_average(x))\n\ndf['salary mins'] = df['yearly compensation [USD]'].apply(lambda x: quantify_min(x))\n\n# replace nans in all data with a string value\ndf.fillna('nan_value', inplace=True)","7e5a7674":"df_USA = pd.DataFrame(df[df['country']=='USA'])\ndf_India = pd.DataFrame(df[df['country']=='India'])\n\nfig,(ax1,ax2,ax3) = plt.subplots(figsize=(18,6),ncols=3)\n\np1 = ax1.hist(df_USA['enum salary ranges'],bins=18)\np2 = ax1.hist(df_India['enum salary ranges'],bins=18,alpha=0.5)\np3 = ax1.set_title('India vs USA',fontsize=20)\np4 = ax1.set_xlabel('simple enum. of a compensation range',fontsize=16)\np5 = ax1.set_xlim(1,18)\n\np1 = ax2.hist(df_USA['salary averages'],bins=65)\np2 = ax2.hist(df_India['salary averages'],bins=65,alpha=0.5)\np3 = ax2.set_title('India vs USA',fontsize=20)\np4 = ax2.set_xlabel('compensation range average [USD]',fontsize=16)\np5 = ax2.set_xlim(0,650000)\nax2.legend(('USA', 'India'),fontsize='16')\n\np1 = ax3.hist(df_USA['salary mins'],bins=50)\np2 = ax3.hist(df_India['salary mins'],bins=50,alpha=0.5)\np3 = ax3.set_title('India vs USA',fontsize=20)\np4 = ax3.set_xlabel('compensation range min [USD]',fontsize=16)\np5 = ax3.set_xlim(0,650000)\n","dcc00ed3":"# print out number of events in a given category\n# and also mean and std salary\ndef print_mean_std_name_n(name,n,mean,std):\n    print('{}: count={}, mean={},std={}'.\n              format(name,n,int(mean),int(std),int(100*std\/mean)))\n\n# mean and std salary of all categories for a given df column\n# df_col is usually a df[[col]] but could be an original df\ndef cats_mean_and_std(df_col,col,n_cut,salary_quantification_col):\n    categories = df_col[col].unique()\n    n_cats = categories.size\n    dict_cats = {}\n    for cat in categories:\n        df_local = df_col[df_col[col]==cat]\n        n = df_local.shape[0]\n        if (n<n_cut): continue\n        val_mean = df_local[salary_quantification_col].mean(axis=0)\n        val_std = df_local[salary_quantification_col].std(axis=0)\n        val_mean=int(val_mean)\n        val_std=int(val_std)\n        dict_cats[cat] = [val_mean, val_std]\n    return dict_cats\n\n\n# calculate separation of salary\n# between two categories\n# it's defined as |mean1-mean2|-sqrt(std1^2+std2^2)\n# if it's bigger than zero, \n# the separation is significant\ndef separation(mean1,mean2,std1,std2):\n    diff = abs(mean1-mean2)\n    std = (std1**2+std2**2)**0.5\n    return diff-std\n\n# an array of all salary separations\n# for all category pairs\ndef separations(dict_cats):\n    n = len(dict_cats)\n    keys = list(dict_cats.keys())\n    seps = []\n    sep_max = ['key1','key2',-100]\n    for i in range(n):\n        for j in range(i,n):\n            key1 = keys[i]\n            key2 = keys[j]\n            mean1,std1 = dict_cats[key1]\n            mean2,std2 = dict_cats[key2]\n            sep = separation(mean1,mean2,std1,std2)\n            if (sep>0): seps.append([key1,key2,int(sep)])\n            if (sep>sep_max[2]): \n                sep_max[0] = key1\n                sep_max[1] = key2\n                sep_max[2] = int(sep)\n    return sep_max,seps","66c386cb":"cols_to_check = []\nfor col in df.columns:\n    if (col=='yearly compensation [USD]'): continue\n    if (col=='enum salary ranges'): continue\n    if (col=='salary averages'): continue\n    if (col=='salary mins'): continue\n    if (col=='is salary known'): continue\n    if (col=='N salary 0-10,000'): continue\n    n = len(df[col].unique())\n    if (n<100):\n        cols_to_check.append(col)\n        ","de2ca892":"def run_salary_separations(df,salary_quantification_col,n_cut):\n    seps_max = []\n    for col in cols_to_check:\n        df_col = df[[col,salary_quantification_col]]\n        dict_cats = cats_mean_and_std(df_col,col,n_cut,salary_quantification_col)\n        sep_max,seps = separations(dict_cats)\n        if (len(seps)>0):\n            #print(col, 'sep max =',sep_max)\n            seps_max.append([col,sep_max[0],sep_max[1],sep_max[2]])\n        seps_max = sorted(seps_max, key = lambda x: int(x[3]))\n    print('')\n    print('The most significant factors affecting yearly compensation')\n    print('estimated based on {}:'.format(salary_quantification_col))\n    print('')\n    for i in range(len(seps_max)-1,-1,-1):\n        print(seps_max[i][0], ':',seps_max[i][1],'vs',seps_max[i][2],'( score =',seps_max[i][3],')')\n    \nrun_salary_separations(df,'enum salary ranges',n_cut=20)\nprint('_______________________________________')\nrun_salary_separations(df,'salary averages',n_cut=20)","9b52b266":"def is_student(row):\n    if (row['job title']=='Student'): return 'Student'\n    if (row['industry']=='I am a student'): return 'Student'\n    return 'Not a student'\n\ndf['is_student'] = df.apply(lambda row: is_student(row),axis=1)\n\nfig = plt.subplots(figsize=(12,6))\ng1 = sns.countplot(x='is_student',data=df, order=['Student','Not a student'],\n                   palette='pastel')\ng1.set_xlabel('')\ng1.set_ylabel('')\nout = g1.set_title('Are you a student?',fontsize=24)\ng1.tick_params(labelsize=16)","ba5d2111":"def plot_one_count_and_box_plot(df,col,salary_quantification_col,y_label,order=None):\n    if (col=='country'): # Q3 is country\n        fig, (ax1,ax2) = plt.subplots(figsize=(18,28),ncols=2)\n    else:\n        fig, (ax1,ax2) = plt.subplots(figsize=(18,12),ncols=2)\n    g1 = sns.boxplot(y=col,x=salary_quantification_col,data=df, ax=ax1,order=order)\n    g2 = sns.countplot(y=col,data=df, ax=ax2,order=order)\n    #g1.set_xticklabels(ax1.get_xticklabels(), rotation=90)\n    #g2.set_xticklabels(ax2.get_xticklabels(), rotation=90)\n    g2.set_yticklabels([])\n    g1.set_xlabel(salary_quantification_col,fontsize=20)\n    g2.set_xlabel('counts',fontsize=20)\n    g1.set_title(salary_quantification_col+' by '+y_label,fontsize=24)\n    g2.set_title('N of respondents by '+y_label,fontsize=24)\n    g1.set_ylabel('')\n    g2.set_ylabel('')\n    g1.tick_params(labelsize=16)\n    g2.tick_params(labelsize=16)\n    for p in ax2.patches:\n        x=p.get_bbox().get_points()[:,1]\n        y=p.get_bbox().get_points()[1,0]\n        ax2.annotate(p.get_width(),(1.05*p.get_width(),p.get_y()+0.4),fontsize=16)\n    if (col=='country' or col=='job title' or col=='industry'):  \n        ax2.set(xscale=\"log\")","90300c65":"def values_by_salary_order(df,col,salary_quantification_col):\n    d = df.groupby(by=col).mean().to_dict()[salary_quantification_col]\n    sorted_d = sorted(d.items(), key=operator.itemgetter(1))\n    countries_order = ['X']*len(sorted_d)\n    for i in range(len(sorted_d)):\n        countries_order[i]=sorted_d[i][0]\n    return countries_order","0a8e8611":"# Start with Q6\n# Q6 - job title\n\nsalary_quantification_col = 'enum salary ranges'\ndf_title = df[['job title',salary_quantification_col]]\ndf_title = df_title[df_title['job title']!='Other']\norder = values_by_salary_order(df_title,'job title',salary_quantification_col)\nplot_one_count_and_box_plot(df_title,'job title',\n                            salary_quantification_col,'job title',order)","87c0bc48":"# Q7 - industry\n\nsalary_quantification_col = 'enum salary ranges'\ndf_industry = df[['industry',salary_quantification_col]]\ndf_industry = df_industry[df_industry['industry']!='Other']\norder = values_by_salary_order(df_industry,'industry',salary_quantification_col)\nplot_one_count_and_box_plot(df_industry,'industry',salary_quantification_col,'industry',order)","274f1a7e":"df_for_plot = df[(df['country']=='USA') | (df['country']=='India')]\n\nfig = plt.subplots(figsize=(12,6))\ng1 = sns.countplot(x='is_student',data=df_for_plot, order=['Student','Not a student'],\n                   hue='country')\ng1.set_xlabel('')\ng1.set_ylabel('')\nout = g1.set_title('Are you a student?',fontsize=24)\ng1.tick_params(labelsize=16)\nplt.gca().legend().set_title('')\nsmth5 = plt.setp(g1.get_legend().get_texts(), fontsize='20') # for legend text","1ed22be8":"df_for_plot_non_student = df_for_plot[df_for_plot['is_student']=='Not a student']\n\nfig, (ax1,ax2) = plt.subplots(figsize=(18,12),nrows=2)\n\ng1 = sns.countplot(x='yearly compensation [USD]',data=df_for_plot, \n                   order=all_salaries, ax=ax1, hue='country',hue_order=(['USA','India']))\nsmth0 = g1.set_xticklabels(ax1.get_xticklabels(),rotation=90)\nsmth1 = g1.set_title('Yearly compensation distribution, India vs USA \\n\\n (INCLUDING students)',fontsize=24)\nsmth2 = g1.set_ylabel('')\nsmth3 = g1.set_xlabel('')\nsmth4 = g1.tick_params(labelsize=14)\ng1.set_xticklabels([])\nl = ax1.legend()\nl.set_title('')\nsmth5 = plt.setp(ax1.get_legend().get_texts(), fontsize='20') # for legend text\n\ng2 = sns.countplot(x='yearly compensation [USD]',data=df_for_plot_non_student, \n                   order=all_salaries, ax=ax2, hue='country',hue_order=(['USA','India']))\nsmth0 = g2.set_xticklabels(ax2.get_xticklabels(),rotation=90)\nsmth1 = g2.set_title('(EXCLUDING students)',fontsize=24)\nsmth2 = g2.set_ylabel('')\nsmth3 = g2.set_xlabel('yearly compensation [USD]',fontsize=20)\nsmth4 = g2.tick_params(labelsize=14)\nplt.gca().legend().set_title('')\nsmth5 = plt.setp(ax2.get_legend().get_texts(), fontsize='20') # for legend text","7daa17a8":"print('# of respondents before removing students: ',df.shape[0])\ndf = df[df['is_student']=='Not a student']\nprint('# of respondents after students: ',df.shape[0])","10e8f710":"run_salary_separations(df,'enum salary ranges',n_cut=20)\nprint('_______________________________________')\nrun_salary_separations(df,'salary averages',n_cut=20)","935b01dd":"# Q3 - country\nsalary_quantification_col='enum salary ranges'\n\n# shorten names of some countries\ndef rename_some_countries(x):\n    if (x=='United States of America'): return 'USA'\n    if (x=='United Kingdom of Great Britain and Northern Ireland'): return 'United Kingdom'\n    if (x=='Iran, Islamic Republic of...'): return 'Iran'\n    if (x=='Hong Kong (S.A.R.)'): return 'Hong Kong'\n    return x\n\ndf['country']=df['country'].apply(lambda x: rename_some_countries(x))\n\ndf_countries = df[['country',salary_quantification_col]]\nprint('N of respondents: ',df_countries.shape[0])\ndf_countries = df_countries[df_countries['country']!='Other']\ndf_countries = df_countries[df_countries['country']!='I do not wish to disclose my location']\nprint('N of respondents from known countries: ',df_countries.shape[0])\n\nn_countries = len(dict(df_countries['country'].value_counts()))\nprint('N of countries:',n_countries)\n\n#print(dict(df_countries['country'].value_counts()))\n\n###\n### plot known vs unknown country\n###\n\norder = values_by_salary_order(df_countries,'country',salary_quantification_col)\nplot_one_count_and_box_plot(df_countries,'country',salary_quantification_col,'country',order)","57b60b1a":"# x is enum salary rages\ndef is_lower_10000(x):\n    if (x<=1): return 1\n    return 0\n\ndef is_lower_20000(x):\n    if (x<=2): return 1\n    return 0\n\ndef is_lower_30000(x):\n    if (x<=3): return 1\n    return 0\n\n# x is enum salary rages for 100000+\ndef is_bigger_100000(x):\n    if (x>=11):return 1\n    return 0\n\n# introduce new aggregate features\ndf['N salary 0-10,000'] = df['enum salary ranges'].apply(lambda x: is_lower_10000(x))\ndf['N salary 0-20,000'] = df['enum salary ranges'].apply(lambda x: is_lower_20000(x))\ndf['N salary 0-30,000'] = df['enum salary ranges'].apply(lambda x: is_lower_30000(x))\ndf['N salary 100,000+'] = df['enum salary ranges'].apply(lambda x: is_bigger_100000(x))\ndf_by_country = df.groupby(by='country').agg({\n    'enum salary ranges': 'mean',\n    'salary averages': 'mean',\n    'salary mins': 'mean',\n    'country':'count',\n    'N salary 0-10,000': 'sum',\n    'N salary 0-20,000': 'sum',\n    'N salary 0-30,000': 'sum',\n    'N salary 100,000+': 'sum'\n})\n\ndf_by_country['N respondents'] = df_by_country['country']\ndf_by_country.drop('country',axis=1,inplace=True)\n\n# remove the entries of unknown countries\ndf_by_country.drop('Other',axis=0,inplace=True)\ndf_by_country.drop('I do not wish to disclose my location',axis=0,inplace=True)\n\ndef fraction_below_10000(row):\n    return 100*row['N salary 0-10,000']\/row['N respondents']\n\ndef fraction_below_20000(row):\n    return 100*row['N salary 0-20,000']\/row['N respondents']\n\ndef fraction_below_30000(row):\n    return 100*row['N salary 0-30,000']\/row['N respondents']\n\ndef fraction_above_100000(row):\n    return 100*row['N salary 100,000+']\/row['N respondents']\n\ndf_by_country['% with salary 0-10,000'] = df_by_country.apply(lambda row: fraction_below_10000(row),axis=1)\ndf_by_country['% with salary 0-10,000'] = df_by_country['% with salary 0-10,000'].apply(int)\n\ndf_by_country['% with salary 0-20,000'] = df_by_country.apply(lambda row: fraction_below_20000(row),axis=1)\ndf_by_country['% with salary 0-20,000'] = df_by_country['% with salary 0-20,000'].apply(int)\n\ndf_by_country['% with salary 0-30,000'] = df_by_country.apply(lambda row: fraction_below_30000(row),axis=1)\ndf_by_country['% with salary 0-30,000'] = df_by_country['% with salary 0-30,000'].apply(int)\n\ndf_by_country['% with salary 100,000+'] = df_by_country.apply(lambda row: fraction_above_100000(row),axis=1)\ndf_by_country['% with salary 100,000+'] = df_by_country['% with salary 100,000+'].apply(int)\n\ndf_by_country.sort_values(by='salary averages',\n                          ascending=True,inplace=True)\n\ndf_by_country_percent = df_by_country[['% with salary 0-10,000',\n                                '% with salary 0-20,000',\n                                 '% with salary 0-30,000',\n                                  '% with salary 100,000+']]\ndf_by_country_percent['<$10K'] = df_by_country_percent['% with salary 0-10,000']\ndf_by_country_percent['<$20K'] = df_by_country_percent['% with salary 0-20,000']\ndf_by_country_percent['<$30K'] = df_by_country_percent['% with salary 0-30,000']\ndf_by_country_percent['>$100K'] = df_by_country_percent['% with salary 100,000+']","a499d3fe":"import seaborn as sns\n\nf,ax = plt.subplots(figsize=(12,28))\n\nout = sns.heatmap(df_by_country_percent[['<$10K','<$20K','<$30K','>$100K']],\n                 annot=True, annot_kws={\"size\": 16}, cmap='coolwarm')\nax.set_title('% of Respondents with Yearly Compensation of\\n',\n             fontsize=24)\nax.xaxis.set_ticks_position('top')\nout = ax.tick_params(labelsize=16)\nout = ax.set_ylabel('')","081050cd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# distribution over salary ranges\ndf_Kenya = df[(df['country']=='Kenya')]\ndf_Republic_of_Korea = df[(df['country']=='Republic of Korea')]\ndf_Israel = df[(df['country']=='Israel')]\ndf_for_plot = pd.concat([df_Israel,df_Kenya,df_Republic_of_Korea])\n\nfig, ax2 = plt.subplots(figsize=(18,6))\ng2 = sns.countplot(x='yearly compensation [USD]',data=df_for_plot, \n                   order=all_salaries, ax=ax2, hue='country',\n                   palette=[\"#9b59b6\", \"#95a5a6\",\"#34495e\"])\nsmth0 = g2.set_xticklabels(ax2.get_xticklabels(),rotation=90)\nsmth1 = g2.set_title('Yearly compensation distribution',fontsize=24)\nsmth2 = g2.set_ylabel('')\nsmth3 = g2.set_xlabel('yearly compensation [USD]',fontsize=20)\nsmth4 = g2.tick_params(labelsize=14)\nsmth5 = plt.gca().legend().set_title('')\nplt.legend(loc='upper right')\nsmth6 = plt.setp(ax2.get_legend().get_texts(), fontsize='20')\n\nprint('N of non-student respondents with known salaries residing in:')\nprint('')\nprint('Israel:',df_Israel.shape[0])\nprint('Kenya:',df_Kenya.shape[0])\nprint('Republic of Korea:',df_Republic_of_Korea.shape[0])","11a6fd40":"# [average_income, cost_index, population(millions)]\n# average income: https:\/\/www.worlddata.info\/average-income.php\n# https:\/\/www.numbeo.com\/cost-of-living\/rankings_by_country.jsp\n# http:\/\/www.worldometers.info\/world-population\/population-by-country\/\ndict_countries_additional_info = {\n    'USA': [58270, 68.95, 326.77], \n    'India': [1820, 23.81, 1354.05], \n    'Russia': [9230, 36.73, 143.96], \n    'China': [8690, 40.43, 1415.05], \n    'Brazil': [8580, 40.48, 210.87], \n    'United Kingdom': [40530, 67.18, 66.57], \n    'Germany': [43490, 67.89, 82.29], \n    'Canada': [42870, 64.54, 36.95], \n    'France': [37970, 74.83, 65.23], \n    'Japan': [38550, 79.87, 127.19], \n    'Spain': [27180, 55.43, 46.40], \n    'Italy': [31020, 69.68, 59.29], \n    'Poland': [12710, 38.69, 38.10], \n    'Australia': [51360, 73.87, 24.77], \n    'Turkey': [10930, 35.52, 81.92], \n    'Netherlands': [46180, 75.93, 17.08], \n    'Ukraine': [2390, 27.08, 44.01],\n    'Mexico': [8610, 30.54, 130.76], \n    'Israel': [37270, 74.86, 8.45], \n    'Singapore': [54530, 80.40, 5.79], \n    'Sweden': [52590, 70.39, 9.98], \n    'Switzerland': [80560, 119.98, 8.54], \n    'Argentina': [13040, 36.41, 44.69], \n    'Nigeria': [2080, 32.25, 195.88], \n    'Colombia': [5830, 32.61, 49.46], \n    'South Africa': [5430, 42.11, 57.39], \n    'Portugal': [19820, 50.64, 10.29], \n    'South Korea': [28380, 76.62, 51.16], \n    'Indonesia': [3540, 36.16, 266.80], \n    'Viet Nam': [2170, 36.91, 96.49], \n    'Greece': [18090, 57.64, 11.14], \n    'Pakistan': [1580, 22.17, 200.81], \n    'Hungary': [12870, 41.34, 9.69], \n    'Denmark': [55220, 82.65, 5.75], \n    'Belgium': [41790, 74.39, 11.49], \n    'Ireland': [55290, 77.08, 4.80], \n    'Malaysia': [9650, 40.69, 32.04], \n    'Chile': [13610, 48.20, 18.20], \n    'Belarus': [-1, 32.03, 9.45], \n    'Kenya': [1440, 38.29, 50.95], \n    'Norway': [75990, 104.09, 5.35], \n    'Finland': [44580, 72.73, 5.54], \n    'Romania': [9970, 36.70, 19.58], \n    'Czech Republic': [18160, 44.53, 10.63], \n    'Peru': [-1, 38.32, 32.55], \n    'New Zealand': [38970, 72.41, 4.75], \n    'Thailand': [5960, 44.55, 69.18], \n    'Philippines': [3660, 32.78, 106.51], \n    'Iran': [5400, 30.86, 82.01], \n    'Egypt': [3010, 24.67, 99.38], \n    'Hong Kong': [46310, 74.73, 7.43], \n    'Bangladesh': [1470, 30.18, 166.37], \n    'Austria': [45440, 72.31, 8.75], \n    'Republic of Korea': [-1, -1, 25.61], \n    'Morocco': [2860, 33.59, 36.19],\n    'Tunisia': [-1, 24.53, 11.66]\n}\n\ndf_add_info = pd.DataFrame(dict_countries_additional_info)\ndf_add_info = df_add_info.transpose()\ndf_add_info.rename(columns={0:'country average income',1:'cost of living index',2:'population'},\n                  inplace=True)","109b680b":"df_by_country['salary averages']=df_by_country['salary averages'].apply(int)\ndf_by_country['salary mins']=df_by_country['salary mins'].apply(int)\ndf_by_country['enum salary ranges']=df_by_country['enum salary ranges'].apply(int)\n\ndf_by_country=df_by_country.join(df_add_info)\ndf_by_country.dropna(inplace=True)\ndf_by_country['country average income']=df_by_country['country average income'].apply(int)\ndf_by_country['population']=df_by_country['population'].apply(int)\n\n# compose more features\ndef N_responders_per_million(row):\n    return row['N respondents']\/row['population']\n\ndef kaggler_salary_over_country_average(row):\n    return row['salary averages']\/row['country average income']\n\ndef kaggler_min_salary_over_country_average(row):\n    return row['salary mins']\/row['country average income']\n\ndef kaggler_salary_over_cost_index(row):\n    return row['salary averages']\/row['cost of living index']\n\ndf_by_country['N respondents per million of population'] = df_by_country.apply(lambda row: N_responders_per_million(row),axis=1)\ndf_by_country['N respondents per million of population'] = df_by_country['N respondents per million of population'].apply(lambda x: \n                                                                                                                        round(x,2))\ndf_by_country['kaggler salary over country average'] = df_by_country.apply(lambda row:\n                                                                            kaggler_salary_over_country_average(row),axis=1)\ndf_by_country['kaggler salary over country average'] = df_by_country['kaggler salary over country average'].apply(lambda x: \n                                                                                                                    round(x,2))\ndf_by_country['kaggler salary over country average low estimate'] = df_by_country.apply(lambda row:\n                                                                            kaggler_min_salary_over_country_average(row),axis=1)\ndf_by_country['kaggler salary over country average low estimate'] = df_by_country['kaggler salary over country average low estimate'].apply(lambda x: \n                                                                                                                    round(x,2))\ndf_by_country['kaggler salary over cost index'] = df_by_country.apply(lambda row:\n                                                                            kaggler_salary_over_cost_index(row),axis=1)\ndf_by_country['kaggler salary over cost index'] = df_by_country['kaggler salary over cost index'].apply(int)\n\n# sort countries by number of respondents\ndf_by_country.sort_values(by='N respondents',ascending=False,inplace=True)\n\n# print table\ndf_by_country[['N respondents','N respondents per million of population',\n               'kaggler salary over cost index','kaggler salary over country average',\n              '% with salary 0-10,000','% with salary 0-20,000','% with salary 0-30,000',\n              '% with salary 100,000+']].head()","f5dfbf64":"df_by_country[['N respondents','N respondents per million of population',\n               'kaggler salary over cost index','kaggler salary over country average',\n              '% with salary 0-10,000','% with salary 0-20,000','% with salary 0-30,000',\n              '% with salary 100,000+']]","7d4cce1d":"import matplotlib.pyplot as plt\n\ncol1 = 'N respondents'\ncol2 = 'N respondents per million of population'\n\ndf_by_country.sort_values(by=col2,\n                          ascending=True,inplace=True)\n\nfig, (ax2,ax1) = plt.subplots(figsize=(18,45),ncols=2,sharey=True)\nax1.set_title('N respondents total',fontsize=24)\nout = df_by_country[col1].plot(kind='barh',ax=ax1, color='cyan')\nax2.set_title(col2,fontsize=24)\nout = df_by_country[col2].plot(kind='barh',ax=ax2, color='cyan')\nout = ax1.tick_params(labelsize=16)\nout = ax2.tick_params(labelsize=16)\nout = ax1.set_ylabel('')\nout = ax2.set_ylabel('')\nout = ax1.set(xscale=\"log\")\nout = ax2.set(xscale=\"log\")\n\nfor p in ax1.patches:\n    x=p.get_bbox().get_points()[:,1]\n    y=p.get_bbox().get_points()[1,0]\n    ax1.annotate(p.get_width(),(1.05*p.get_width(),p.get_y()+0.1),fontsize=16)\n    \nfor p in ax2.patches:\n    x=p.get_bbox().get_points()[:,1]\n    y=p.get_bbox().get_points()[1,0]\n    ax2.annotate(p.get_width(),(1.05*p.get_width(),p.get_y()+0.1),fontsize=16)","0d949bd8":"fig, ax =plt.subplots(1,2,figsize=(18,12),sharey=True)\ng1 = sns.regplot(x='N respondents per million of population',\n           y='salary averages',data=df_by_country, ax=ax[0])\nout = ax[0].set_ylim(0,130000)\nout = ax[0].set_xlim(0,23)\ng2 = sns.regplot(x='N respondents',\n           y='salary averages',data=df_by_country,ax=ax[1])\nout = ax[1].set_ylim(0,130000)\nout = ax[1].set_xlim(0,3000)\nout = g1.set_xlabel('N respondents per million of population',fontsize=20)\nout = g1.set_ylabel('kaggler salary average [USD]',fontsize=20)\nout = g2.set_xlabel('N respondents total',fontsize=20)\nout = g2.set_ylabel('')\ng1.tick_params(labelsize=14)\ng2.tick_params(labelsize=14)","cdcfff93":"def kaggler_salary_by_cost_index(row):\n    country = row['country']\n    salary_average = row['salary averages']\n    cost_index = dict_countries_additional_info[country][1]\n    if (cost_index==-1): return -1\n    return salary_average\/cost_index \n\ndef kaggler_salary_by_country_average_income(row):\n    country = row['country']\n    salary_min = row['salary mins']\n    country_salary = dict_countries_additional_info[country][0]\n    if (country_salary==-1): return -1\n    return salary_min\/country_salary\n\ndf = df[df['country']!='Other']\ndf = df[df['country']!='I do not wish to disclose my location']\n\ndf['kaggler salary over cost index'] = df.apply(lambda row: kaggler_salary_by_cost_index(row),axis=1)\ndf['kaggler salary over country average'] = df.apply(lambda row: kaggler_salary_by_country_average_income(row),axis=1)\n\ndf = df[df['kaggler salary over cost index']!=-1]\ndf = df[df['kaggler salary over country average']!=-1]","d6df3487":"order = values_by_salary_order(df,'country','salary averages')\n\nfig, (ax1,ax2,ax3) = plt.subplots(figsize=(18,28),ncols=3,sharey=True)\n\ndef plot_one_col(col,title,ax):\n    g = sns.boxplot(y='country',x=col,\n                 data=df,ax=ax,order=order)\n    g.set_xlabel(title,fontsize=20)\n    g.set_title(title,fontsize=24)\n    g.set_ylabel('')\n    g.tick_params(labelsize=16)\n    return g\n    \ng1 = plot_one_col('salary averages','kaggler \\n salary average [USD]',ax1)\nout = ax1.set_xlim(0,122000)\ng2 = plot_one_col('kaggler salary over cost index','kaggler \\n salary average \\n over cost index',ax2)\nout = ax2.set_xlim(0,2000)\ng3 = plot_one_col('kaggler salary over country average','kaggler \\n salary min \\n over country average',ax3)\nout = ax3.set_xlim(0.5,50)\nout = ax3.set_xscale('log')","11ac36b6":"col_by = 'salary averages'\nn_top_or_bottom = 5\n\ndef top_and_bottom(col_by,n_top_or_bottom):\n    df_top = df_by_country.sort_values(by=col_by,ascending=False).head(n_top_or_bottom)\n    df_bottom = df_by_country.sort_values(by=col_by,ascending=True).head(n_top_or_bottom)\n    bottom_mean = df_bottom[col_by].mean()\n    top_mean = df_top[col_by].mean()\n    top_by_bottom = top_mean\/bottom_mean\n    top_countries = df_top.index.tolist()\n    bottom_countries = df_bottom.index.tolist()\n    print(col_by,':')\n    if (col_by=='kaggler salary over country average'):\n        print('top',n_top_or_bottom,':',round(top_mean,2),top_countries)\n        print('bottom',n_top_or_bottom,':',round(bottom_mean,2),bottom_countries)\n    else:\n        print('top',n_top_or_bottom,':',int(top_mean),top_countries)\n        print('bottom',n_top_or_bottom,':',int(bottom_mean),bottom_countries)        \n    print('top\/bottom:',round(top_by_bottom,2))\n    print('')\n    return(top_countries,bottom_countries)\n    \n(tc1,bc1)=top_and_bottom('salary averages',n_top_or_bottom)\n(tc2,bc2)=top_and_bottom('kaggler salary over cost index',n_top_or_bottom)","2b49bab1":"(tc1,bc1)=top_and_bottom('salary averages',n_top_or_bottom)\n(tc2,bc2)=top_and_bottom('kaggler salary over cost index',n_top_or_bottom)\n(tc3,bc3)=top_and_bottom('kaggler salary over country average',n_top_or_bottom)\n\n#print(set(tc1+bc1+tc2+bc2+tc3+bc3))","13ec81c3":"salary_quantification_col = 'salary averages'\ndf_title = df[['job title','country',salary_quantification_col]]\ndf_title = df_title[df_title['country']=='Greece']\ndf_title = df_title[df_title['job title']!='Other']\norder = values_by_salary_order(df_title,'job title',salary_quantification_col)\nplot_one_count_and_box_plot(df_title,'job title',\n                            salary_quantification_col,'job title',order)","4fba800b":"df_by_country = df_by_country[df_by_country['country average income']!=-1]\ndf_by_country = df_by_country[df_by_country['cost of living index']!=-1]\n\nfig, ax =plt.subplots(1,2,figsize=(18,12),sharey=True)\ng1 = sns.regplot(x='kaggler salary over cost index',\n           y='salary averages',data=df_by_country, ax=ax[0])\nout = ax[0].set_ylim(0,120000)\nout = ax[0].set_xlim(250,1750)\ng2 = sns.regplot(x='kaggler salary over country average low estimate',\n           y='salary averages',data=df_by_country,ax=ax[1])\nout = ax[1].set_ylim(0,120000)\nout = ax[1].set_xlim(0,30)\nout = g1.set_xlabel('kaggler salary over cost index',fontsize=20)\nout = g2.set_xlabel('kaggler salary over country average (low estimate)',fontsize=20)\nout = g1.set_ylabel('kaggler salary average [USD]',fontsize=20)\nout = g2.set_ylabel('')\ng1.tick_params(labelsize=14)\ng2.tick_params(labelsize=14)\nout = fig.suptitle('Kaggler salary average vs the same thing \\n divided over living cost index and over country-wide average income \\n (one dot - one country)',fontsize=24)","22d8251c":"(tc1,bc1)=top_and_bottom('salary averages',n_top_or_bottom)","9a8b89c3":"(tc2,bc2)=top_and_bottom('kaggler salary over cost index',n_top_or_bottom)","9ae61546":"(tc3,bc3)=top_and_bottom('kaggler salary over country average',n_top_or_bottom)","cc1d926f":"_this study excludes respondents who spent less than a minute to complete the survey_\n<br><br>\nAll possible yearly compensations are split into 18 ranges, from '0-10,000' to '500,000+':","d711f841":"For non-students respondents, country is the most significant factor to affect the compensation.","6dbd7dcf":"and have very little in common with the ratio of a kaggler's compensation over the country-wide average income","df163bcd":"## What Factors Affect Kaggler's non-Student Compensation the Most","8ecbf07c":"## Are you happy with the situation in your country? \n## What are you willing to change?","18d9e05f":"The largest professional kaggler's groups are data scientists, software engineers and data analysts. As one would expect, these professionals have a higher-than-average income in their countries - in no countries this ratio is found to be less than 1.\n<br><br>\nThe largest ratios of kaggler's to country-wide average salary compensatons are found for **Kenya**, **India**, **Pakistan**, **Bangladesh**, and **Ukraine** averaging to as high as over 15(!) for these 5 countries. For that reason 'salary mins' are used to estimate this quantity rather than 'salary averages' - so that these estimates are at the lower boundary, and actual ratios are even higher. **If you reside in one of these countries, please feel free to comment.** (And, by the way, if you are not residing in one of these countries, still feel free to comment).\n<br><br>\n*Note: **India** is also in the top 5 of the best of kaggler compensation to the cost of living ratio.*\n<br><br>\nThe smallest ratios of kaggler to country-wide average salary compensatons are found for **Norway**, **Austria**, **Greece**, **Finland**, and **Sweden**. The average value of the mean values of a kaggler income divided over a country wide income only slightly exceeds 1 (1.14). **Greece** is also among 5 countries with the worsk kaggler over the cost index ratio.\n<br><br>\nI wonder who the non-student **Greek kagglers** are","a0b525df":"# Country Pay Gap\n\nIn the [2018 Kaggle ML & DS Survey Challenge](https:\/\/www.kaggle.com\/kaggle\/kaggle-survey-2018\/home) kagglers are asked to explore a dataset with survey results of themselves.\n<br><br>\nAmong tens of multiple choice questions, the survey takers were asked to disclose a range of their yearly compensation, and about 2\/3 respondents did.","19767985":"## Kaggle Popularity in Different Countries\n\nTo have a deeper look into the country effect, let us attract some relevant external data: \n\n- [average income](https:\/\/www.worlddata.info\/average-income.php)\n- [cost index](https:\/\/www.numbeo.com\/cost-of-living\/rankings_by_country.jsp)\n- [population](http:\/\/www.worldometers.info\/world-population\/population-by-country\/)","12a44c9d":"Students appear in \"job title\" and \"industry you are working in\" questions, and in both cases they are the least paid categories as expected.\n<br><br>\nStudents affect compensation distributions by country differently for different countries because the fraction of students among the survey respondents differ from country to country.","f3931d8c":"## Conclusions\n\nThe primary focus of this kernel is to investigate kaggler's yearly compensations in different countries. 56 countries with the highest numbers of respondents in the 2018 Kaggle Survey are considered. Countries with at least 50 respondents are featured in the released dataset. After removing respondens with unknown salaries, students, and people who answered the survey too fast, countries with the lowest number of respondents become **Tunisia** (19 respondents) and **Morocco** (25 respondents).\n<br><br>\nWhile a total number of respondents from a country shows a little effect on the average country's compensation, a ratio of a number of non-student kagglers divided over the total country's population is found to correlate with a kaggler's yearly compensation. \n<br><br>\nCountries with the highest and lowest kaggler's yearly compensations are identified","9e3099e8":"## What Factors Affect Kaggler's Compensation the Most","310a0fbc":"The right plot shows us that while for most countries the kagglers salary is about two times higher than a country-wide average income, for some countries this ratio is much higher. All such countries are in a group of a relatively low-paying standards.","768c316c":"#### Observations\nGenerally, countries with higher compensations also have higher comtensations to cost index ratios but the difference between 'top 5' and 'bottom 5' countries becomes better: 7 times difference in absolute compensation values vs 3 times difference in compensation-over-cost index ratios.\n<br><br>\n**USA**, **Australia**, and **Israel** are among top 5 countries both in terms of the highest absolute values of yearly compensations as well as in terms of ratios of the compensation over the cost index.\n<br><br>\n**Nigeria**, **Viet Nam**, **Iran**, and **Turkey** are among both groups of five countries with the five lowest absolute values of yearly compensations as well as the compensations divided over the cost index. \n<br><br>\n**Switzerland** has the highest absolute value of an average yearly kaggler's compensation, however, due to it's very high cost index, it is not among top five countries in terms of compensation-over-cost index ratio.\n<br><br>\n**India** is among 20 the least paying countries from our list but is in top 5 if the kaggle's compensation is divided over the cost index\n\n<br><br>\nMore interesting observations can be made if in addition to the two quantities discussed above we take a look into \n#### the ratio of the country kaggler's average yearly compensation over the average annual income for residents of a given country","a6aecfa8":"which significantly overlap with countries with the highest and lowest compensations divided over the country living cost index ","143e5fd3":"The distribution of the number of respondents by country per capita (left plot) is more indicative of the kaggle popularity in a given country rather than the total number of respondents (right plot).\n<br><br>\n*Note: the plots exclude students*\n<br><br>\n**India** and **China** have one of the highest numbers of the total respondents but the kaggle popularity in these countries is closer to the lowest boundary (or they didn't participate in the survey).\n<br><br>\n**Do you know if kaggle is allowed in China?**\n<br><br>\nIn contrast, look at **Singapore**. With fewer than 6 million of population, this country does not have a large enough total number of respondents to be as noticible as USA or India, but 22 respondents per million of population makes it absolutely stand out in terms of kaggle popularity with the second place (**Ireland**) left behind by over 30%! \n<br><br>\n**A kaggle popularity in a given country is strongly correlated with a kaggler's yearly compensation in the country. **","0dbc6892":"The peak around '100-125,000' corresponds to the average compensation of USA data scientists while the peak at '0-10,000' indicates a large representation of kagglers from countries with lower salary scales.\n<br><br>","ff419f3a":"The table above shows only a few out of a number of aggregate features for five countries with the largest numbers of respondents. \n- **N respondents** and **N respondents per million of population**: total number of respondents (except students, people with unknown salaries and people who answered the survey too fast) and the same number divided over the country population;\n- **kaggler salary over cost index**: the 'salary average' divided over country living cost index;\n- **kaggler salary over country average**: the 'salary average', average yearly compensation of a kaggler residing in a given country, divided over the average income of a resident of this country (regardless whether the resident is a kaggler or not);\n- **% with salary X**: % of respondents from a number 'N respondents' with a given annual compensation (below \\$10K, below \\$20K, below \\$30K and above \\$100K, as shown on a heatmap above).\n\nIf you are interested to stare at these numbers for all 56 countries, you are welcome to check the table hidden below.\n\n*Note: negative values means some of data were not available in the external sources I used.*","829e113a":"Kagglers residing in **Nigeria**, **Viet Nam**, **Egypt**, **Iran** and **Turkey** have the smallest compensations, while kagglers living in **Switzerland**, **USA**, **Australia**, **Denmark** and **Isarael** are paid the best, although almost any country with a sufficient number of respondents have highly paid outliers.","eb82f518":"## Salary Quantification\n\nThe ranges are good for such comparison plots as one above and are distributed fairly well for USA, but for more in-depth compensation studies the ranges need to be quantified. It is essential to measure the difference in typical compensation for any kaggler groups whether it is by a country of residence, an education, experience, main activities at work or a job title. \n<br><br>\nThree quantification methods are used in this study:\n- simple enumeration of compensation ranges<br>\n    ('0-10,000' $\\rightarrow$ 1, '10-20,000' $\\rightarrow$ 2, '500,000+' $\\rightarrow$ 18);\n- averages of compensation range boundaties<br>\n    ('0-10,000' $\\rightarrow$ 5000, '10-20,000' $\\rightarrow$ 15000, '500,000+' $\\rightarrow$ 650000); and\n- minimal values of range boundaries<br>\n    ('0-10,000' $\\rightarrow$ 0, '10-20,000' $\\rightarrow$ 10000, '500,000+' $\\rightarrow$ 500000)","4ca9b956":"If one is interested in a combination of the absolute values of yearly compensations and it's ratio to the living cost index, the best countries to work in are **USA**, **Australia**, and **Israel**.\n<br><br>\nFor someone who cares more about having a higher living standards compared to people around but doesn't care that much about the absolute amount of $$, **India** might be the best option.","b84b447b":"#### Observations:\n- In **Iran** and **Nigeria**, 71% of non-student respondents have a yearly compensation of less than \\$10K;\n- in 9 out of 56 countries more than 50% of non-student respondents make less than \\$10K;\n- in 40% of 56 countries more than 50% of non-student respondents make less than \\$20K;\n- in **USA**, **Switzerland**, **Australia** and **Israel**, more than 30\\% of non-student respondents have a yearly compensation of over \\$100K.\n<br><br>\nThe countries in the heatmap above above are sorted by 'salary averages'. Thus, we expect left and middle plots to appear in ascending and right plot to appear in descending order. While it is generally the case, I want to emphasize outliers:\n<br><br>\n- **Republic of Korea** is in top 10 country with the largest average yearly compensations, but has only 3% of respondents in >\\$100K range \n- **Kenya**, with 66% of respondents making less than \\$20K, has a relatively large fraction (8%) of kagglers with yearly compensation of above \\$100K\n- **Israel** while being among the top 4 countries by a fraction of kagglers making over \\$100K (35%), has a relatively large fraction of low-paid kagglers (11% of respondents in Israel make less than \\$20K, and almost half of them - less than \\$10K)","0acb5f78":"\n## Kagglers salary divided by country living cost index and by country average income","5ff14e49":"Both methods found country of residence to be the most significant factor affecting a kaggler's yearly compensation.\n<br><br>\nSome other parameters like experience with data analysis and machine learning algorithms also affect one's compensation by factor of several but for a closer investigation we have to exclude one very important group of kagglers. ","15f58b6e":"Thus, Greek kagglers are mostly data scientists and software engineers, just as for the community in general.","f839fd10":"This kernel concentrates on the study of these discrepancies between compensations of kagglers residing in different countries which are refered as a __country pay gap__."}}