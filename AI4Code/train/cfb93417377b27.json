{"cell_type":{"f6b0c6b0":"code","13edc375":"code","bf354441":"code","e353b4ff":"code","ffcd1feb":"code","d13f7875":"code","92db9026":"code","a81913bf":"code","71792538":"code","064c212c":"code","b77c5840":"code","10ed407b":"code","187598f4":"code","b6219aac":"code","e7ee9418":"code","49587879":"code","6d285ebc":"code","7565acde":"code","58ad46bf":"code","7e192adb":"code","49336f29":"code","60b4478e":"code","de73f2d7":"code","768ad4b2":"code","a5e1800e":"code","41518b50":"code","5ee85d2c":"code","fafda76d":"code","f9e77895":"code","ffb38c70":"markdown","56b56f4a":"markdown","865f1849":"markdown","3c00350d":"markdown","c3d376cc":"markdown","48342b0f":"markdown","0b29f1fc":"markdown"},"source":{"f6b0c6b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","13edc375":"df=pd.read_csv('\/kaggle\/input\/prediction-facebook-comment\/Dataset.csv')\ndf.columns","bf354441":"df","e353b4ff":"import numpy as np #used for scientific computation\nimport pandas as pd #used for data mugging and preprocessing\nimport matplotlib.pyplot as plt #data visualization library\nimport seaborn as sns # stastical visualization library\nimport squarify #used to make square area plots\n%matplotlib inline ","ffcd1feb":"df.describe()","d13f7875":"df.head()","92db9026":"df.tail()","a81913bf":"df.corr().head()","71792538":"\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","064c212c":"df.isnull().sum()","b77c5840":"plt.figure(figsize=(10,5)) #plt is the object of matplot lib and .figure() is used to show or change properties of graphs\nsns.heatmap(df.isnull(),cmap='viridis',yticklabels=False,cbar=False) #heatmaps are matrix plots which can visualize data in 2D\nplt.show()","10ed407b":"df=df.drop(['shares'],axis='columns')\ndf=df.drop(['mon_pub'],axis='columns')\ndf=df.drop(['thu_pub'],axis='columns')\ndf=df.drop(['mon_base'],axis='columns')","187598f4":"df.columns","b6219aac":"df.isnull().sum()","e7ee9418":"plt.figure(figsize=(50,100)) #plt is the object of matplot lib and .figure() is used to show or change properties of graphs\nsns.heatmap(df.isnull(),cmap='viridis',yticklabels=False,cbar=False)#heatmaps are matrix plots which can visualize data in 2D\nplt.show()","49587879":"df['Returns']=df['Returns'].fillna(df['Returns'].mode()[0] )\ndf['Category']=df['Category'].fillna(df['Category'].mode()[0])\ndf['commBase']=df['commBase'].fillna(df['commBase'].mode()[0])\ndf['comm48']=df['comm48'].fillna(df['comm48'].mode()[0])","6d285ebc":"df.isnull().all()","7565acde":"plt.scatter(df.sat_base,df.output,marker=\".\",color=\"blue\")\nplt.xlabel('sat_base')\nplt.ylabel('output')","58ad46bf":"from sklearn.model_selection import train_test_split\n","7e192adb":"columns=df.columns.tolist()\n\n#filter the columns to remove data we do not want\ncolumns=[c for c in columns if c not in ['output']]\n\n#store the value we will predicting on\ntarget='output'\n\nx=df[['likes', 'Checkins', 'Returns', 'Category', 'commBase', 'comm24',\n       'comm48', 'comm24_1', 'diff2448', 'baseTime', 'length', 'hrs',\n       'sun_pub', 'tue_pub', 'wed_pub', 'fri_pub', 'sat_pub', 'sun_base',\n       'tue_base', 'wed_base', 'thu_base','fri_base']]\ny=df[target]\n\n","49336f29":"x.shape\n","60b4478e":"y.shape","de73f2d7":"\nfrom sklearn import datasets, linear_model, metrics \nfrom sklearn.model_selection import train_test_split \nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4,random_state=1) \nreg = linear_model.LinearRegression() \nreg.fit(x_train, y_train) ","768ad4b2":"print('Coefficients: \\n', reg.coef_) ","a5e1800e":"print('Variance score: {}'.format(reg.score(x_test, y_test))) #not the best algo to implement the accuracy is 30%","41518b50":"reg.score(x_test,y_test)","5ee85d2c":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=20)\nmodel.fit(x_train, y_train)\n","fafda76d":"model.score(x_test,y_test)","f9e77895":"\nfrom sklearn import tree\nmodel = tree.DecisionTreeRegressor()\nmodel.fit(x_train, y_train)\nmodel.score(x_test,y_test)\n","ffb38c70":"correlation map","56b56f4a":"**Random Forest **","865f1849":"**Dropping the collums**","3c00350d":"Here yellow bars repersent the null values(missing values)","c3d376cc":"*** Liner regression ***","48342b0f":"Data is in comma seperated values (C.S.V) format","0b29f1fc":" **Decision Tree **"}}