{"cell_type":{"cba4d97a":"code","517e6503":"code","32a0701e":"code","0948d958":"code","c2978c9e":"code","33694ce2":"code","3f86511c":"code","559ca4f4":"code","efaca810":"code","185d8627":"code","e7dce5d5":"code","8e4c5254":"code","159cdaca":"code","96354278":"code","2af8b231":"code","deff3b3d":"code","ca936db9":"code","c0a71c10":"code","fc48d29b":"code","425e5342":"markdown","f171f970":"markdown","f20a2721":"markdown","b8fd56eb":"markdown","dc37503e":"markdown","7f07eade":"markdown","e48d0505":"markdown","895c26f9":"markdown"},"source":{"cba4d97a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler,Normalizer,RobustScaler\nimport re as re\nimport itertools\nimport seaborn as sns\nimport matplotlib.gridspec as gridspec\nfrom sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB \nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom mlxtend.classifier import StackingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom mlxtend.plotting import plot_learning_curves\nfrom mlxtend.plotting import plot_decision_regions\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","517e6503":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain.info() #We can see that Age,Cabin and Embarked values are missing\n#test.info() #We can see that Age,Fare and Cabin values are missing\ndataset = [train,test] # Created dataset\n","32a0701e":"plt.hist(train['Age'],50)\nprint(\"Mean age = \"  + str(train['Age'].mean()))\nprint(\"Median age = \" + str(train['Age'].median()))","0948d958":"\nfor data in dataset:\n    age_median = data['Age'].median()\n    age_deviation = data['Age'].std()\n    age_missing_count = data['Age'].isnull().sum() #count of missing values\n    age_values = np.random.normal(age_median,age_deviation,age_missing_count) #generating random values of age\n    data['Age'][np.isnan(data['Age'])] = age_values\ntrain['Age'] = train['Age'].astype(int) #Converting from float to int\ntest['Age'] = test['Age'].astype(int)\n#train['Age'].count()","c2978c9e":"train = train.drop(columns = ['Cabin','Ticket','PassengerId','Pclass'])\n#test = test.drop(columns = ['Cabin','Ticket','PassengerId','Pclass'])\n#test.head()","33694ce2":"train['Sex'] = train['Sex'].map( {'male': 1,'female': 0} )\ntest['Sex'] = test['Sex'].map( {'male': 1,'female': 0} )","3f86511c":"val = ['Q','C','S']\ncount_missing_train = train['Embarked'].isnull().sum()\ncount_missing_test = test['Embarked'].isnull().sum()\nfor i in range(count_missing_train):\n    train['Embarked'] = train['Embarked'].fillna(val[np.random.randint(891) % 3])\nfor i in range(count_missing_test):\n    test['Embarked'] = test['Embarked'].fillna(val[np.random.randint(891) % 3])\n","559ca4f4":"def convert(val):\n    if(val == 'Q'):\n        return 0\n    elif(val == 'S'):\n        return 1\n    else:\n        return 2\ntrain['Embarked'] = train['Embarked'].map(convert)\ntest['Embarked'] = test['Embarked'].map(convert)","efaca810":"test['Fare'] = test['Fare'].fillna(test['Fare'].median())\n#test['Fare'].isna().sum()\n\n","185d8627":"def name(val):\n    get_title = re.search(' ([A-Za-z]+)\\.', val)\n    if get_title:\n        return len(get_title.group(1))\n\ntrain['Name'] = train['Name'].map(name)\ntest['Name'] = test['Name'].map(name)","e7dce5d5":"train.info()","8e4c5254":"train_X = train[['Name','Sex','Age','SibSp','Parch','Fare','Embarked']]\ny = train['Survived']\ntest_X = test[['Name','Sex','Age','SibSp','Parch','Fare','Embarked']]\nscale = RobustScaler()\n#train_X[['Age','Fare']] = scale.fit_transform(train_X[['Age','Fare']].as_matrix())\n#test_X[['Age','Fare']] = scale.fit_transform(test_X[['Age','Fare']].as_matrix())\ntrain_X[['Name','Sex','Age','SibSp','Parch','Fare','Embarked']] = scale.fit_transform(train_X[['Name','Sex','Age','SibSp','Parch','Fare','Embarked']].as_matrix())\ntest_X[['Name','Sex','Age','SibSp','Parch','Fare','Embarked']] = scale.fit_transform(test_X[['Name','Sex','Age','SibSp','Parch','Fare','Embarked']].as_matrix())\ntrain_X.head()","159cdaca":"test_X.head()","96354278":"clf1 = RandomForestClassifier(random_state=1)\nclf2 = GaussianNB()\nclf3 = SVC(C=1, kernel='rbf', degree=4)\n#clf4 = DecisionTreeClassifier()\n#clf5 = KNeighborsClassifier(n_neighbors=1)\nclf6 = AdaBoostClassifier()\nclf7 = GradientBoostingClassifier()\nclf8 = LinearDiscriminantAnalysis()\nclf9 = QuadraticDiscriminantAnalysis()\nlr = LogisticRegression()\nsclf = StackingClassifier(classifiers=[clf1,clf2,clf3,clf6,clf7,clf8,clf9], meta_classifier=lr)","2af8b231":"label = ['RF','NB','SVC','ADA','GB','LD','QD','Stacking Classifier']\nclf_list = [clf1,clf2,clf3,clf6,clf7,clf8,clf9,sclf]\n    \n\nclf_cv_mean = []\nclf_cv_std = []\nfor clf, label in zip(clf_list, label):\n        \n    scores = cross_val_score(clf, train_X, y, cv=10, scoring='accuracy')\n    print(\"Accuracy: %.2f (+\/- %.2f) [%s]\" %(scores.mean(), scores.std(), label))\n    clf_cv_mean.append(scores.mean())\n    clf_cv_std.append(scores.std())\n        \n    clf.fit(train_X, y)\n","deff3b3d":"plt.figure()\n(_, caps, _) = plt.errorbar(range(8), clf_cv_mean, yerr=clf_cv_std, c='blue', fmt='-o', capsize=5)\nfor cap in caps:\n    cap.set_markeredgewidth(1)                                                                                                                                \nplt.xticks(range(8), ['RF','NB','SVC','ADA','GB','LD','QD','Stacking Classifier'])        \nplt.ylabel('Accuracy'); plt.xlabel('Classifier'); plt.title('Stacking Ensemble');\nplt.show()","ca936db9":"X_train, X_test, y_train, y_test = train_test_split(train_X, y, test_size=0.3, random_state=42)\n    \nplt.figure()\nplot_learning_curves(X_train, y_train, X_test, y_test, sclf, print_model=False, style='ggplot')\nplt.show()","c0a71c10":"ans = pd.DataFrame(columns = ['PassengerId','Survived'])\nfor i in range(test.shape[0]):\n    id = int(test['PassengerId'][i])\n    prediction = int(sclf.predict([[test_X['Name'][i],test_X['Sex'][i],test_X['Age'][i],test_X['SibSp'][i],test_X['Parch'][i],test_X['Fare'][i],test_X['Embarked'][i]]]))\n    ans = ans.append({'PassengerId' : id,'Survived' : prediction}, ignore_index=True)\nans.head()                      ","fc48d29b":"ans.to_csv('final.csv',index=False)","425e5342":"Embarked","f171f970":"Dropping Ticket and Cabin columns","f20a2721":"Name","b8fd56eb":"Missing values of Age ","dc37503e":"Fare","7f07eade":"Ensemble","e48d0505":"Converting Sex into values","895c26f9":"I found out that the SVC model alone works betther than the Ensemble."}}