{"cell_type":{"0da5a7c7":"code","1ff95510":"code","21353577":"code","b0ace02c":"code","94607e80":"code","37904495":"code","03e651db":"code","4660dcd2":"code","8d41692d":"code","0c3ce51e":"code","d60a63ac":"code","c25b7fb5":"code","748477af":"code","ea868393":"code","43c1508e":"code","aa3f2754":"code","89e7b76b":"code","8ac07ce1":"code","6ebf6600":"code","16cbf938":"code","c19a9c9f":"code","d513e423":"code","e80a6760":"code","8942e515":"code","cac8faf0":"code","ef01a657":"code","2a11fc72":"code","8d9b1d4d":"code","df1f5769":"code","445a33fc":"code","27b7d620":"code","7fc88c6f":"code","a6587351":"code","37631733":"code","69f528f7":"code","233ecdfe":"code","514a2438":"code","57048e82":"code","a2794840":"code","d92a1d95":"code","ebd397bd":"code","b6afc908":"code","effb24fe":"code","bd5b32e1":"code","8ee147c1":"code","eb187275":"code","55576a7a":"code","0ad0269a":"code","6c2b4536":"code","2537362e":"markdown","1d37c335":"markdown","881e1fa8":"markdown","7034f7b8":"markdown","f03664dc":"markdown","201cf557":"markdown"},"source":{"0da5a7c7":"# import the basic libraries\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nfrom matplotlib import pyplot as plt","1ff95510":"# Reading the stores dataset\nstores = pd.read_csv(\"..\/input\/stores.csv\")\nstores.head()","21353577":"# Histogram\n# method 1: use pandas Dataframe attributes\nstores.TotalSales.plot(kind = \"hist\", edgecolor = \"black\", bins = 5)\n# kind arg is used to specify the type of the graph\n# bins = how many groups you want\nplt.show()\n# plt.show is used to remove the print comments","b0ace02c":"# we can also do this:\nstores.TotalSales.plot.hist(bins = 5, edgecolor = \"black\", color = \"tomato\")\nplt.show()","94607e80":"# Method 2\n# using plt\nplt.hist(stores.TotalSales, bins = 5, color = \"skyblue\", edgecolor = \"black\")\nplt.show()","37904495":"plt.hist(stores.TotalSales, bins = 5, color = \"skyblue\", edgecolor = \"black\")\nplt.title(\"Histogram for total sales\")\nplt.xlabel(\"Total sales from stores data\")\nplt.ylabel(\"Frequency\")\nplt.show()","03e651db":"# Method 3\n# Using seaborn distplot = ditribution plots\nsns.distplot(stores.TotalSales, bins = 5, color = \"pink\")\nplt.show()\n# seaborn by default shows density on the y axis which you can turn off using density","4660dcd2":"stores.OperatingCost.plot(kind = \"box\")\nplt.show()","8d41692d":"# Method 1:\nplt.scatter(x = list(range(0,32)), y = stores.TotalSales, s = 200, marker = \"*\")\nplt.scatter(x = list(range(0,32)), y = stores.OperatingCost*10, s= 200 ,marker = \"+\")\nplt.xlabel(\"Indexes\")\nplt.ylabel(\"total sales from the stores data\")\nplt.show()","0c3ce51e":"sns.distplot(stores.TotalSales)\nplt.show()","d60a63ac":"plt.scatter(x = stores.OperatingCost, y = stores.TotalSales)\nplt.show()","c25b7fb5":"# getting a scatter plot is not possible with the pandas plot\n# Method 2: Using seaborn\n# Every scatter plot has a concept of best fit line. That line virtually passes through each and every point.\n# This process is called linear model plot. Y = mx+c\n\n# Seaborn doesn't accept pandas.series as input\nsns.lmplot(x = \"OperatingCost\", y=\"TotalSales\", data = stores)\nplt.xlabel(\"Operating Cost or expenses\")\nplt.ylabel(\"Income or TotalSales\")\nplt.title(\"Relation between Operating cost and Total sales\")\nplt.show()\n# you can also apply matlab file here to get the plot\n# to deactivate the line put fit_reg = False\n","748477af":"\n# can we add more variables\n# add a new categorical variable as color use hue and you can use palette to give custom colors\nsns.lmplot(x = \"OperatingCost\", y=\"TotalSales\", data = stores, hue = \"Location\", fit_reg = False)\nplt.xlabel(\"Operating Cost or expenses\")\nplt.ylabel(\"Income or TotalSales\")\nplt.title(\"Relation between Operating cost and Total sales\")\nplt.show()","ea868393":"# Frequency Bar\n# What is the frequency distribution of storetypes in the dataset stores?\nstores.StoreType.value_counts()","43c1508e":"f1 = stores.groupby([\"StoreType\"])[[\"StoreType\"]].count().add_prefix(\"CountOf_\")\nf1","aa3f2754":"f2 = stores.groupby([\"StoreType\"])[[\"StoreType\"]].count().add_prefix(\"CountOf_\").reset_index()\nf2","89e7b76b":"# method 1 usina pandas\nf1.plot(kind = \"bar\")\nplt.show()","8ac07ce1":"# Method 2:\n# using pyplot\n# we need f2 since f1 syntax is not suitable \nplt.bar(x = f2.StoreType, height = f2.CountOf_StoreType)\nplt.xlabel(\"Counts of StoreType\")\nplt.ylabel(\"Store Type\")\nplt.show()","6ebf6600":"# Method 3: Using Seaborn\nsns.barplot(x = \"StoreType\" , y =\"CountOf_StoreType\", data = f2)\nplt.show()","16cbf938":"# Task 2\n# w.r.t location, what is the % TotalSales in each location\/city?\nr1 = stores.groupby(by = [\"Location\"])[[\"TotalSales\"]].sum().add_prefix(\"sumOf_\")\nr1","c19a9c9f":"r2 = r1.reset_index()\nr2","d513e423":"r1.plot(kind = \"bar\")\nplt.show()","e80a6760":"plt.bar(x = r2.Location, height = r2.sumOf_TotalSales)\nplt.show()","8942e515":"sns.barplot(x = \"Location\", y = \"sumOf_TotalSales\", data = r2)\nplt.show()","cac8faf0":"r1","ef01a657":"## Slight change in the question. instead of total numbers if we want to see how much the contribution is ?\nr1 = stores.groupby(by = [\"Location\"])[[\"TotalSales\"]].sum().add_prefix(\"SumOf_\")\nr1\nGrandTotalSales = r1.SumOf_TotalSales.sum()\nGrandTotalSales\nr1[\"PctSales\"] = round(r1.SumOf_TotalSales\/GrandTotalSales * 100,2)\nr1.drop(columns=[\"SumOf_TotalSales\"], inplace = True)\nr1","2a11fc72":"r1.plot(kind = \"bar\", legend = False)\nplt.ylabel(\"% contribution\")\nplt.show()","8d9b1d4d":"r2 = r1.reset_index()\nsns.barplot(x = \"Location\", y = \"PctSales\", data = r2)\nplt.show()","df1f5769":"# Task \n# get mean of operating cost for each location and store type\n\nr3 = stores.groupby(by = [\"Location\",\"StoreType\"])[[\"OperatingCost\"]].mean().add_prefix(\"MeanOf_\")\nr3","445a33fc":"r4 = r3.reset_index()\nr4","27b7d620":"r3.plot(kind = \"bar\")\nplt.show()","7fc88c6f":"# a more elegant version will be stacket barplot, \n# r3 is in long format. \n# convert r3 to the wide format\n# r4","a6587351":"# Type2\nr4_wide = r4.pivot(index  = \"Location\", columns = \"StoreType\", values = \"MeanOf_OperatingCost\")\nr4_wide","37631733":"# Dodged bar\nr4_wide.plot(kind = \"bar\")\nplt.show()","69f528f7":"# Stacked bar\nr4_wide.plot(kind = \"bar\", stacked = True)\nplt.show()","233ecdfe":"# using seaborn\n# we definetely have to use seaborn\nsns.barplot(x  = \"Location\", y = \"MeanOf_OperatingCost\", data = r4, hue = \"StoreType\")\nplt.show()","514a2438":"# stacked bar\nsns.barplot(x  = \"Location\", y = \"MeanOf_OperatingCost\", data = r4, hue = \"StoreType\", dodge = False)\nplt.show()\n\n# there is a bug in the seaborn hence people preferably use barplot","57048e82":"_temp = stores.groupby(by = [\"Location\"])\na = _temp[[\"TotalSales\"]].mean().add_prefix(\"SumOf_\")\nb = _temp[[\"OperatingCost\"]].sum().add_prefix(\"MeanOf_\")\nResult_4 = pd.concat(objs=[a,b], axis = 1)\nResult_4","a2794840":"Result_4_a = Result_4.reset_index()\nResult_4_a","d92a1d95":"Result_4.plot.bar()\nplt.show()","ebd397bd":"Result_4_a_long = pd.melt(Result_4_a, id_vars = \"Location\", value_name = \"Values\",var_name = \"Metrics\")\nResult_4_a_long","b6afc908":"sns.barplot(x = \"Location\", y = \"Values\", data = Result_4_a_long, hue = \"Metrics\")\nplt.show()","effb24fe":"Result_4.plot.bar(stacked = True)\nplt.show()","bd5b32e1":"# pie charts\nf1.plot(kind = \"pie\", subplots =True, legend = False, autopct = \"%.2f%%\")\nplt.ylabel(\"\")\nplt.show()","8ee147c1":"r3.plot(kind = \"pie\", subplots = True, legend = False, autopct = \"%.2f%%\")\nplt.legend = False\nplt.ylabel(\"\")\nplt.show()","eb187275":"r4 = r3.reset_index()\nr4","55576a7a":"r4_wide = r4.pivot(index = \"Location\", columns = \"StoreType\", values = \"MeanOf_OperatingCost\")\nr4_wide","0ad0269a":"r4_wide.plot(kind = \"pie\", subplots = True, legend = False, figsize = (15,8))\n\nplt.show()","6c2b4536":"r4_wide.T.plot(kind = \"pie\", subplots = True, legend = False, figsize = (15,8))\n\nplt.show()","2537362e":"**First we will start with the distribution charts**\n1. Histograms\n    * The sole purpose of histogram is to see the data's probability distribution\n2. Boxplots\n3. Scatter plots","1d37c335":"**Bar plots**\n","881e1fa8":"** Scatter plots **\n\nx,y plotting\n\nOne variable scatter plot.Total sales on y axis, on x axis, we will take it's indexes","7034f7b8":"**Boxplots**\n\nBox plots are used to see basic distribution of charts, helps to know the range of the data. \n\nIt shows upper whisker, lower Whisker, and outliers.\n\nUses IQR rule to get the UC.","f03664dc":"One thing missing here are the labels. Since matplotlib is the main facilitator in the python graphs, it has all the functions related to the graphs. So in order to not put lots of arguments in the fucntion we can direclty use plt to adjust the graphs. ","201cf557":"**There are two types of charts:**\n1. Comparision \/ Relationship Charts\n    * Relationship between two variables\n    * Continuous - Continuous\n        * Used to display correlation among different variables\n        * Scatter plot\n        * Heatmaps\n    * Between Continous and Categorical \n        * Used to display aggregations\n            * Dodged bar \n            * bar\n            * Area Map\n            * Line Chart\n    * Between Categorical and categorical\n        * Cross tabs\n        * bar\/pie\n2. Composition Charts:\n    * Used to display the constituents of the data. \n    * pie chart and stacked bar\n    \nNow we will see how these charts can be plotted using python pandas, Matplotlib, and Seaborn"}}