{"cell_type":{"06ce6136":"code","c75b3c32":"code","74c10c28":"code","a77b7cc1":"code","16a7f4e5":"code","70ed8cdc":"code","c75a41a7":"code","882c0f01":"code","3fc190d6":"markdown","909d80b3":"markdown"},"source":{"06ce6136":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nimport cv2\nimport pydicom","c75b3c32":"! pip install efficientnet_pytorch","74c10c28":"def get_img(path):\n    d = pydicom.dcmread(path)\n    # normlize and resize the image\n    return cv2.resize((d.pixel_array - d.pixel_array.min()) \/ (d.pixel_array.max() - d.pixel_array.min()), (512, 512))","a77b7cc1":"ROOT = \"..\/input\/osic-pulmonary-fibrosis-progression\"\nos.listdir(ROOT)","16a7f4e5":"# load a demo image\ndemo_img_path = os.path.join(ROOT, \"train\", \"ID00007637202177411956430\", \"1.dcm\")\ndemo_img = get_img(demo_img_path)\ndemo_img.shape","70ed8cdc":"# get the efficientNet model\nfrom efficientnet_pytorch import EfficientNet\nmodel = EfficientNet.from_pretrained('efficientnet-b6')\nmodel.cuda()","c75a41a7":"import torch\n# convert the image to the input tensor, the input must be a 3-channel tensor with float dtype\ndemo_img_ts = torch.from_numpy(demo_img).unsqueeze(0).unsqueeze(0).repeat(1, 3, 1, 1).to(dtype=torch.float).cuda()\ndemo_img_ts.size()","882c0f01":"demo_feature = model.extract_features(demo_img_ts)\ndemo_feature.size()","3fc190d6":"As you can see, when the input image is in shape (batch, 3, 512, 512). The feature tensor extracted by the efficientNet-b6 is in shape (batch, 2304, 16, 16). You can flatten this tensor or send it through a few more convolution layers to make it adapt to your model's input size.\n### NOTE\nAfter extraction, you might need to detach this tensor from the graph then send it into your model for fvc regression. Otherwise, you might fine-tune the weights of the efficientNet when you train your fvc regression model.","909d80b3":"### Pytorch EfficientNet Feature Extraction\nThis notebook demonstrate the usage of extracting features from the CT scan images by using EfficientNet(Pytorch implementation).\n\nIf you'd like to add the information of CT scan images into your Feature-Engineering process, you can follow the methodology of this notebook to obtain features from each patient\u2019s images."}}