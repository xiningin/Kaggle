{"cell_type":{"d1381e84":"code","efb26574":"code","f6d9ada0":"code","8b99ae88":"code","6f9580c8":"code","1d0200c0":"code","ac47fb95":"code","dae72aa2":"code","0b068188":"code","d089e73e":"code","f9acb3b5":"code","b830c1ec":"code","435744b5":"code","d5e202c6":"code","a2cfbc37":"code","1a83bfd1":"code","5f3675cc":"code","80481b4d":"code","2ce3a082":"code","a12a4ba5":"code","6e79211d":"code","4381fe37":"code","9fc65d49":"code","ae0f1379":"code","5d783f6c":"code","69cb0a9c":"code","08588eed":"code","26c13a1b":"code","db71d788":"code","f0daa27c":"code","631ade7c":"code","5fb1836a":"code","2c4fb60c":"code","5c0cb1b9":"code","6f18fe09":"code","5cc753cc":"code","dffa6250":"code","24deea42":"code","a113145f":"code","3a7f1e88":"code","0891ef8b":"code","b1135bce":"code","2e61e3e3":"code","ec1d92e9":"code","eae661f1":"code","7c471c07":"code","8abcb0d3":"code","d5612b37":"code","40305fc3":"code","47637b29":"code","04c15046":"code","c73be62c":"code","f160ebd8":"code","05bf74cc":"code","22e45c74":"code","f5e96ad1":"code","d104be1f":"code","f41618b0":"code","f5bf257f":"code","75485094":"code","bf4af8fa":"code","104ab8b0":"code","2d3a9120":"code","08320af9":"code","b1a54054":"code","4bca6f87":"code","3dff33c1":"code","4b6fcb9b":"code","3cfab76e":"code","4e24c7cc":"code","1d8ddd2a":"code","2bafda56":"code","997907b7":"code","1870b3d0":"code","4be88551":"code","5b3cd3bb":"code","c6ce3a26":"code","bbc371b1":"code","304c85de":"code","b367a64a":"code","c5a219ba":"code","cca46fdc":"code","313fe9b1":"code","498f9989":"code","f9aee50b":"code","062f961f":"code","f7db03e5":"code","9a44d724":"code","6d9636b7":"code","a19e919b":"code","ba16a7db":"code","b7be2c87":"code","e26478d8":"code","55b7df7a":"code","ea1e10d6":"code","fcfb93a4":"code","e1dba99f":"code","84351baf":"code","0ced795c":"code","22ddb7ce":"code","d1d19ec2":"code","4b53bf28":"code","84c63eeb":"code","fc27c62c":"code","7754f25f":"code","9d4b1e4e":"code","95dbdb80":"code","467cae0e":"code","9a758eda":"code","8395572c":"code","0c4ca4ac":"code","704ed12d":"code","16192626":"code","7bd7b7dd":"code","22cd2bcc":"code","b64c8daf":"code","788ea440":"code","6c08975c":"code","7a66923c":"code","fc29c2be":"code","f6debb63":"code","f9f4d22f":"code","6d7dbe2d":"code","a75dbb08":"code","f2884ae6":"code","e6432f26":"code","5fbef2da":"code","a5a9f1e5":"code","d753b8f9":"code","7b9beb08":"code","60ddf985":"code","ed57164f":"code","69aeec5b":"code","c0a76c1a":"code","b8688fb2":"code","911b94f1":"code","10cdbd9d":"code","a2895815":"code","5d730cad":"code","0878fd85":"code","06da6741":"code","5c63d60b":"code","94e550f8":"code","72e38e13":"code","98476b8d":"code","8ecd1213":"markdown","5021e021":"markdown","da6e8cbe":"markdown","049af6ca":"markdown","bae4ff1e":"markdown","c67bc69c":"markdown","b082905d":"markdown","bce9b543":"markdown","af789837":"markdown","de6da108":"markdown","80c88398":"markdown","1785c8aa":"markdown","d2c4b48b":"markdown","18e875a2":"markdown","a8368ab9":"markdown"},"source":{"d1381e84":"# Integer\ni = 9\nblah = 10","efb26574":"# Float\n\nfl = 9.8","f6d9ada0":"fl","8b99ae88":"i","6f9580c8":"blah","1d0200c0":"blah = blah + 1","ac47fb95":"blah","dae72aa2":"type(blah)","0b068188":"type(fl)","d089e73e":"type(blah + 2)","f9acb3b5":"type(blah + 2.2)","b830c1ec":"blah + 2.2","435744b5":"# comments start with a # and continue till the end of the line","d5e202c6":"# There is no \"char\" type. Just strings\n\nname = 'Prasanna' # or you could also do    name = \"Prasanna\"","a2cfbc37":"name","1a83bfd1":"type(name)","5f3675cc":"# concatenating strings \n\nname + ' L S'","80481b4d":"# repeating strings\n\nname * 5","2ce3a082":"opinion = 'Weird seeing my name so many times'","a12a4ba5":"opinion[0]","6e79211d":"opinion[1]","4381fe37":"# slicing\nopinion[0:6] # starts from 0 and goes upto 4 (5 - 1)","9fc65d49":"opinion[:5]","ae0f1379":"opinion[5:]","5d783f6c":"opinion.split(' ')","69cb0a9c":"# displays all the available methods of the current object\ndir(opinion)","08588eed":"# type a method call such as opinion.split()\n# Once we have parenthesis, place text cursor into the parenthesis and press Shift + Tab once to display function parameters\n# Press Shift + Tab twice to see the function documentation","26c13a1b":"opinion.lower()","db71d788":"opinion = opinion.upper() + '!'","f0daa27c":"opinion","631ade7c":"li = [1, 2, 3, 4, 5]","5fb1836a":"# slicing is same as with strings\nli[0]","2c4fb60c":"li[:3]","5c0cb1b9":"li[1:4]","6f18fe09":"li.append(6)","5cc753cc":"li","dffa6250":"li.remove(6)","24deea42":"li","a113145f":"del li[0]","3a7f1e88":"li","0891ef8b":"dir(li)","b1135bce":"li.reverse()","2e61e3e3":"li","ec1d92e9":"li.sort()\nli","eae661f1":"names = ['Prasanna', 'Prajwal', 'Gaurav', 'Dolly', 'Manasa']","7c471c07":"names[0]","8abcb0d3":"names[2]","d5612b37":"names[0][:4]","40305fc3":"len(li)","47637b29":"li","04c15046":"li + ['str', 'blah blah']","c73be62c":"contacts = {'Prasanna' : 21323123, 'Prajwal': 12123113}","f160ebd8":"contacts['Prasanna']","05bf74cc":"contacts['Prajwal']","22e45c74":"contacts['Gaurav'] = 121","f5e96ad1":"contacts['Gaurav']","d104be1f":"contacts","f41618b0":"del contacts['Gaurav']","f5bf257f":"contacts['Gaurav']","75485094":"len(contacts)","bf4af8fa":"li","104ab8b0":"if li[0] >= 1:\n    print('Awesome')\nelse:\n    print('Not so awesome')","2d3a9120":"li[0] = 1","08320af9":"if li[0] > 1:\n    print('Extremely awesome')\nelif li[0] == 1:\n    print('Still kinda awesome')\nelse:\n    print('Nope. Not awesome.')","b1a54054":"li[1] =2 ","4bca6f87":"if li[0] == 1 and li[1] == 2:\n    print('I can see!')","3dff33c1":"if li[0] == 1 or li[1] == 3:\n    print('Half vision is still pretty good, I guess.')","4b6fcb9b":"li","3cfab76e":"while li[0] < 4:\n    li[0] += 1\n    print(li)","4e24c7cc":"li","1d8ddd2a":"for entry in li:\n    print(entry)","2bafda56":"len(li)","997907b7":"list(range(10))","1870b3d0":"for i in range(len(li)):\n    print(li[i])","4be88551":"for i in range(10):\n    print(i)","5b3cd3bb":"list(range(2, 11, 2))","c6ce3a26":"for i in range(5, 12):  # similar to the slicing. Starts at 5 and goes till and including 9\n    print(i)","bbc371b1":"for i in range(0, 10, 2):\n    print(i)","304c85de":"for i in range(0, 10, 4):\n    print(i)","b367a64a":"for i in range(len(li)):\n    print(li[i])","c5a219ba":"li","cca46fdc":"contacts.items()","313fe9b1":"for key, value in contacts.items():\n    print(str(key) + ' --- ' + str(value))","498f9989":"contacts.keys()","f9aee50b":"contacts.items()","062f961f":"contacts.values()","f7db03e5":"## Side note, (1,2, 3) creates whats called a Tuple\n\ntup = (1, 2, 3)","9a44d724":"tup","6d9636b7":"dir(tup)","a19e919b":"# no method to add itesm into the tuple. Tuples are immutable. Can't be changed once created.\ntup","ba16a7db":"# cool thing about tuples is that they can be used in \"tuple assignments\" like so\n\nfirst_val, second_val, third_val = tup","b7be2c87":"first_val","e26478d8":"second_val","55b7df7a":"third_val","ea1e10d6":"# This can be very handy as we'll see\n\n# Btw, here's how to swap two variable values in python\na = 2\nb = 3\nprint(str(a) + ' ' + str(b))","fcfb93a4":"b, a = a, b\nprint(str(a) + ' ' + str(b))","e1dba99f":"a,b","84351baf":"tu = a,b\ntu","0ced795c":"b, a = tu","22ddb7ce":"a, b","d1d19ec2":"usersName = input('What is your name?')","4b53bf28":"usersName","84c63eeb":"# also works with int and floats\nnumIters = input('Enter the number of iterations')","fc27c62c":"numIters","7754f25f":"type(numIters)","9d4b1e4e":"numIters = int(numIters)","95dbdb80":"numIters, type(numIters)","467cae0e":"slope = input('Enter the slope for the line : ')","9a758eda":"slope, type(slope)","8395572c":"slope = float(slope)\nslope, type(slope)","0c4ca4ac":"def get_int(message):\n    reply = input(message)\n    reply = int(reply)\n    return reply","704ed12d":"numBhelPuris = get_int('How many Bhel Puris do you want to eat today?')","16192626":"numBhelPuris, type(numBhelPuris)","7bd7b7dd":"def get_contact():\n    name = input('Enter your name : ')\n    number = input('Enter your number : ')\n    return name, number  # creates a tuple and returns the tuple","22cd2bcc":"name, number = get_contact()","b64c8daf":"name, number","788ea440":"class Contact():\n    def __init__(self, name, number):  # __init__ is the constructor\n        self.name = name\n        self.number = number \n        # ******** NOTE ******** \"name\" variables scope ends after this function. \n        # But \"self.name\" can be accessed as long as the object is in memory(has a reference to it)\n    \n    def print_contact(self):\n        print('Name : ' + self.name)\n        print('Number : ' + self.number)\n        \n\nclass ClassName():\n    def doSomeStuff(self):\n        print('stuff stuff')","6c08975c":"con = Contact('Prasanna', '121133131')  # in general, ClassName() creates an object of that class","7a66923c":"con.print_contact()","fc29c2be":"c = ClassName()","f6debb63":"c.doSomeStuff()","f9f4d22f":"con.name   # con.name is like telling self.name \n           #(Can sorta relate this to the \"this\" pointer in c++. self is like the \"this\" pointer)","6d7dbe2d":"con.number ","a75dbb08":"contact_list = []","f2884ae6":"num_contacts = 3","e6432f26":"for i in range(num_contacts):\n    name, number = get_contact()\n    newCon = Contact(name, number)\n    contact_list.append(newCon)","5fbef2da":"contact_list","a5a9f1e5":"for contact in contact_list:\n    contact.print_contact()\n    print()  # new line","d753b8f9":"# File IO","7b9beb08":"fHandle = open('fileName.txt', 'w')\nfHandle.write('''hello\nworld\nbye\nrunning out of things to type\n''')\nfHandle.close()","60ddf985":"fHandle = open('fileName.txt', 'r')","ed57164f":"dir(fHandle)","69aeec5b":"fHandle.read()","c0a76c1a":"fHandle.read()","b8688fb2":"fHandle.seek(0)","911b94f1":"fHandle.read()","10cdbd9d":"fHandle.seek(0)","a2895815":"fHandle.readline()","5d730cad":"fHandle.readline()","0878fd85":"fHandle.readline()","06da6741":"fHandle.readline()","5c63d60b":"fHandle.readline()","94e550f8":"fHandle.seek(0)","72e38e13":"for line in fHandle:\n    print(line)","98476b8d":"fHandle.close()","8ecd1213":"#### Lists","5021e021":"#### Dictionaries","da6e8cbe":"But still, do I have to know what each function does?\n\nNope. Jupyter Notebook has you covered.","049af6ca":"## Classes and Objects","bae4ff1e":"## Variables and data types","c67bc69c":"## for loop","b082905d":"* Can have any number of parameters\n* Can have any number of lines of code in the function\n* Can return any data type\n* If we don't return anything, by default, None is returned(Kinda like the NULL pointer in C. Kinda like that. Kinda.)","bce9b543":"## User input","af789837":"1. Variables and data types\n2. Conditional statements\n3. Looping constructs - for while \n4. User input\n5. Functions\n6. Classes","de6da108":"# Looping constructs","80c88398":"## Functions","1785c8aa":"### So many functions. How to know it all? \n\nWell, you don't have to.","d2c4b48b":"# Python Workshop","18e875a2":"## Conditional statements","a8368ab9":"## while loop"}}