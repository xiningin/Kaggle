{"cell_type":{"21b8263e":"code","3d80ba34":"code","248ba6eb":"code","1d86bee2":"code","fa220277":"code","564cd825":"code","08bf8038":"code","7524a829":"code","d7331b02":"code","6857ab62":"code","cd53ba44":"code","7fabd304":"code","f0414335":"code","7d45c163":"code","8fb2d952":"code","a38bd83c":"code","3f384a08":"code","af88beba":"code","7f381f75":"code","610a8169":"code","f19faca2":"code","d3c2916f":"code","1d49ff1b":"code","7b6502df":"code","720c084e":"code","7b387d80":"code","b7f39590":"code","cba89c1d":"code","c739c412":"code","75b34058":"markdown","45c98d2e":"markdown","3f5c4c54":"markdown","c48ad6c5":"markdown","87d4d7aa":"markdown","d0eca3d8":"markdown","0fa9592e":"markdown","97046999":"markdown","30b19dd9":"markdown","3bbcb2f8":"markdown","a496fbf1":"markdown","7d9f3e96":"markdown","953cf57a":"markdown","c765c72b":"markdown","9d139c14":"markdown","5d2251b7":"markdown","14ec7b34":"markdown","ba108fc0":"markdown"},"source":{"21b8263e":"import pandas as pd\nimport plotly \nimport plotly.express as ex\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport plotly.graph_objs as go","3d80ba34":"data=pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv')\ndata21=pd.read_csv('\/kaggle\/input\/world-happiness-report-2021\/world-happiness-report.csv')","248ba6eb":"display(data.shape)\ndisplay(data21.shape)","1d86bee2":"data.columns","fa220277":"display(data.head())\ndisplay(data21.head())","564cd825":"data.sort_values(by='Ladder score',ascending=False,inplace=True)","08bf8038":"data['Regional indicator'].value_counts()","7524a829":"RI_grp=data.groupby(['Regional indicator']).agg({'Country name':'count','Ladder score':'mean'}).reset_index().rename({'Country name':'Country count','Ladder score':'Avg. Ladder score'},axis=1)\nRI_grp['Avg. Ladder score']=round(RI_grp['Avg. Ladder score'],3)","d7331b02":"## Plot Region wise count of countries and average ladder score\n\nfrom plotly.subplots import make_subplots\nfig=go.Figure()\nfig.add_trace(go.Bar(\n    x=RI_grp['Regional indicator'],\n    y=RI_grp['Country count'],\n    name='Country Count',\n    marker_color='lightblue',\n    text=RI_grp['Country count'],\n    textposition='inside',\n    yaxis='y1'\n))\nfig.add_trace(go.Scatter(\n    x=RI_grp['Regional indicator'],\n    y=RI_grp['Avg. Ladder score'],\n    name='Average Ladder Score',\n    mode='markers+text+lines',\n    marker_color='magenta',\n    marker_size=10,\n    text=RI_grp['Avg. Ladder score'],\n    textposition='top center',\n    line=dict(color='#5D69B1',dash='dash'),\n    yaxis='y2'\n\n))\nfig.update_layout(\n    title=\"Region Wise Counts and Avg ladder Score\",\n    xaxis_title=\"Region\",\n    yaxis_title=\"Count of Country\",\n    template='ggplot2',\n    font=dict(\n        size=12,\n        color=\"Black\",\n        family=\"Garamond\"\n        \n    ),\n    xaxis=dict(showgrid=False),\n    yaxis=dict(showgrid=False),\n    plot_bgcolor='white',\n    yaxis2=dict(showgrid=True,overlaying='y',side='right',title='Avg. Ladder Score'),\n    legend=dict(yanchor=\"top\",\n    y=1.3,\n    xanchor=\"left\",\n    x=0.78)\n)\nfig.show()","6857ab62":"RI_grp1=data.groupby('Regional indicator').agg({'Social support':'mean','Healthy life expectancy':'mean'}).reset_index().rename({'Social support':'Avg. Social support','Healthy life expectancy':'Avg. Healthy life expectancy'},axis=1)","cd53ba44":"RI_grp1['Avg. Social support']=round(RI_grp1['Avg. Social support'],3)\nRI_grp1['Avg. Healthy life expectancy']=round(RI_grp1['Avg. Healthy life expectancy'],3)","7fabd304":"from plotly.subplots import make_subplots\nfig=go.Figure()\nfig.add_trace(go.Bar(\n    x=RI_grp1['Regional indicator'],\n    y=RI_grp1['Avg. Healthy life expectancy'],\n    name='Avg health life exp.',\n    marker_color='mediumspringgreen',\n    text=RI_grp1['Avg. Healthy life expectancy'],\n    yaxis='y1'\n))\nfig.add_trace(go.Scatter(\n    x=RI_grp1['Regional indicator'],\n    y=RI_grp1['Avg. Social support'],\n    name='Average Ladder Score',\n    mode='markers+text',\n    marker_color='black',\n    marker_size=10,\n    text=RI_grp1['Avg. Social support'],\n    textposition='bottom center',\n    textfont=dict(color='black'),\n    yaxis='y2'\n\n))\nfig.update_layout(\n    title=\"Region Wise Avg. Social support & Healthy life expectancy\",\n    xaxis_title=\"Region\",\n    yaxis_title=\"Avg. Healthy life expectancy\",\n    template='ggplot2',\n    font=dict(\n        size=10,\n        color=\"black\",\n        family=\"Garamond\"\n        \n    ),\n    xaxis=dict(showgrid=False),\n    yaxis=dict(showgrid=False),\n    plot_bgcolor='white',\n    yaxis2=dict(showgrid=True,overlaying='y',side='right',title='Avg. Social support'),\n    legend=dict(yanchor=\"top\",\n    y=1.3,\n    xanchor=\"left\",\n    x=0.78)\n)\nfig.show()","f0414335":"# defining data\ntrace = go.Histogram(x=data['Perceptions of corruption'],nbinsx=40)\ndf = [trace]\n# defining layout\nlayout = go.Layout(title=\"Perception of Corruption Distribution\")\n# defining figure and plotting\nfig = go.Figure(data = df,layout = layout)\nfig.update_layout(xaxis_title=\"Perception of Corruption\",\n                  template='ggplot2',\n                  xaxis=dict(showgrid=False),\n                  yaxis=dict(showgrid=False),\n                  plot_bgcolor='white',\n                  font=dict(family=\"Garamond\"))\nfig.show()","7d45c163":"#defining data\ntrace = go.Scatter(x = data['Perceptions of corruption'],y=data['Dystopia + residual'],text = data['Country name'],mode='markers',marker={'color':'red'})\ndf=[trace]\n#defining layout\nlayout = go.Layout(title='Perceptions of corruption & Dystopia + residual : Scatter Plot',xaxis=dict(title='Perceptions of corruption'),yaxis=dict(title='Dystopia + residual'),hovermode='closest')\n#defining figure and plotting\nfigure = go.Figure(data=df,layout=layout)\nfigure.update_layout(template='ggplot2',\n                  xaxis=dict(showgrid=True),\n                  yaxis=dict(showgrid=True),\n                  plot_bgcolor='lightgrey',\n                  font=dict(family=\"Garamond\"))\nfigure.show()","8fb2d952":"#function to get longitude and latitude data from country name\nfrom geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"<masked>\")### pass a valid mailid\ndef geolocate(country):\n    try:\n        # Geolocate the center of the country\n        loc = geolocator.geocode(country)\n        # And return latitude and longitude\n        return (loc.latitude, loc.longitude)\n    except:\n        # Return missing value\n        return np.nan","a38bd83c":"data['lat_long']=data['Country name'].apply(geolocate)","3f384a08":"data.head()","af88beba":"### Get the country name where lat long is not present \n# data['lat_long'].isna().sum()\n# data[data['lat_long'].isna()] ## Hong kong SAR of china\n\n## add lat long \ndata['lat_long']=np.where(data['Country name']=='Hong Kong S.A.R. of China','(22.3193,114.1694)',data['lat_long'])","7f381f75":"data[data['lat_long'].isna()]### 0 records","610a8169":"data['lat_long']=data['lat_long'].astype(str)\ndata['lat_long']=data['lat_long'].str.replace('(','')\ndata['lat_long']=data['lat_long'].str.replace(')','')\ndata=pd.concat([data,data['lat_long'].str.split(',',expand=True).rename({0:'lat',1:'long'},axis=1)],axis=1)","f19faca2":"data['lat'].isna().sum()\ndata['long'].isna().sum()","d3c2916f":"# Create a world map to show distributions of users \nimport folium\nfrom folium.plugins import MarkerCluster\n#empty map\nworld_map= folium.Map(tiles=\"cartodbpositron\")\nmarker_cluster = MarkerCluster().add_to(world_map)\n#for each coordinate, create circlemarker of user percent\nfor i in range(len(data)):\n        lat = data.iloc[i]['lat']\n        long = data.iloc[i]['long']\n        radius=5\n        popup_text = \"\"\"Country : {}<br>\n                    Logged GDP per capita : {}<br>\n                    Ladder score : {}<br>\"\"\"\n        popup_text = popup_text.format(data.iloc[i]['Country name'],\n                                   data.iloc[i]['Logged GDP per capita'],data.iloc[i]['Ladder score']\n                                   )\n        folium.CircleMarker(location = [lat, long], radius=radius, popup= popup_text, fill =True).add_to(marker_cluster)\n#show the map\nworld_map","1d49ff1b":"# data21.head()\ndata21[data21['Country name']=='Afghanistan']","7b6502df":"### Top 10 countries as per Ladder score \ntop10=data['Country name'][:10].tolist()\ndata21_top10=data21[data21['Country name'].isin(top10)]","720c084e":"data21_top10['Country name'].unique()","7b387d80":"data21_top10.reset_index(drop=True,inplace=True)","b7f39590":"color={}\ncolor_list=['#FF0000','#00FF00','#0000FF','#FFFF00','#00FFFF','#FF00FF','#808080','#800000','#808000','#008000']\ni=0\nfor c in top10:\n    color[c]=color_list[i]\n    i+=1","cba89c1d":"for k,v in color.items():\n    print(v)","c739c412":"## Plot Region wise count of countries and average ladder score\nfrom plotly.subplots import make_subplots\nfig=go.Figure()\nfor k,v in color.items():\n    fig.add_trace(go.Scatter(\n    x=data21_top10[data21_top10['Country name']==k]['year'],\n    y=data21_top10[data21_top10['Country name']==k]['Life Ladder'],\n    name=k,\n    mode='markers+text+lines',\n    marker_color='black',\n    marker_size=3,\n    line=dict(color=color[k]),\n    yaxis='y1'))\n    \nfig.update_layout(\n    title=\"Top 10 Country wise Life Ladder trend\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Life Ladder\",\n    template='ggplot2',\n    font=dict(\n        size=10,\n        color=\"Black\",\n        family=\"Garamond\"\n    ),\n    xaxis=dict(showgrid=True),\n    yaxis=dict(showgrid=True)\n)\nfig.show()","75b34058":"<html><h3 style='font-family:Garamond;background:lightgrey;  color:black; font-size:30px; padding:15px; border:3px solid #fe346e;'><center><b>Distribution of Region wise Count and Avg. ladder score<\/b><\/center><\/h3><\/html>","45c98d2e":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Import Libraries&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","3f5c4c54":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Map Latitude and Longitude&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","c48ad6c5":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Region wise GroupBy- Social Support Mean & Healthy life expectancy Mean&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","87d4d7aa":"<html><h3 style='font-family:Garamond;background:lightgrey;  color:black; font-size:30px; padding:15px; border:3px solid #fe346e;'><center><b>Plot on World Map -> Ladder Score and Logged GDP per capita<\/b><\/center><\/h3><\/html>","d0eca3d8":"<html><h3 style='font-family:Garamond;background:lightgrey;  color:black; font-size:30px; padding:15px; border:3px solid #fe346e;'><center><b>Distribution of Region wise Avg. Social support & Avg. life expectancy<\/b><\/center><\/h3><\/html>","0fa9592e":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Split the Latitude and Longitude&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","97046999":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Create a color dictionary for country&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","30b19dd9":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Sort the data&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","3bbcb2f8":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">Understanding Plotly with Folium using World Happiness Dataset<\/h1>\n<br>\n    \n<center><img src=\"https:\/\/miro.medium.com\/max\/4800\/1*jSzSsGQdJhcG7_PIH8eLag.png\"><\/center>\n","a496fbf1":"### <h3 style=\"color:#fe346e\">Abstract<\/h3>\n\nWhen data visualization first became a thing, data practitioners were plotting graphs as they were exploring their data with Pandas. The library that made this possible was called Matplotlib, it was a good library because it is :\n* easy to use\n* fast\n* harmonizes well with Pandas\n\nHowever, people who have used it long enough felt that it was dull.\n\nEven the official functionality of Matplotlib states that :\n**Matplotlib is mainly deployed for basic plotting. \u2014 Matplotlib**\nHence, data practitioners who wanted a more interesting library that consist of more plotting patterns, options and an easier syntax flocked to the Seaborn Library. At the time, Seaborn was the go to for many people.\n\n### <h3 style=\"color:#fe346e\">Dynamic visuals as a Rescuer <\/h3>\nHowever, there was still a problem. All of these libraries offer static plots. These plots can only tell you what they show on screen. You aren\u2019t able to dive deeper into the plots, hover over points to find out information or add filters.\n\nPlots that are able to perform functions like these are named Interactive Visualizations.\nInteractive Visualizations are popular for adding a ton of information on top of the plots you\u2019re presenting, unlocking possibilities and making you look 10x cooler. It\u2019s hard to put in words, let\u2019s visualize what I\u2019m trying to tell you.\n\n### <h3 style=\"color:#fe346e\">Plotly<\/h3>\nPlotly is the Python Library for interactive data visualizations. Plotly allows you to plot superior interactive graphs than either Matplotlib or Seaborn.\n\nWhat kind of Graphs does Plotly Plot?\n1. All Matplotlib and Seaborn Charts\n2. Statistical Charts which includes but not limited to Parallel Categories and Probability Tree Plots\n3. Scientific Charts you never thought of, ranging from Network Graphs to Radar Charts\n4. Financial Charts which are useful for Time-Series Analysis, examples include Candlesticks, Funnels and Bullet Charts\n5. Geological Maps and 3 Dimensional Plots which allows you to interact with them\n\n### <h3 style=\"color:#fe346e\">Why is Plotly so Popular ?<\/h3>\n\n1. Interactive Plots\n2. Prettier than Matplotlib\/Seaborn (Up for debate ?)\n3. Offers a more detailed visualization which assists in exploring, understanding and communicating your data\n4. Provides maximum customization for your plots including adding sliders and filters\n5. Much cleaner and understandable code base\n6. Backed up by a company named Plotly, which makes interactive web-based visualizations and web-applications\n\n### <h3 style=\"color:#fe346e\">How do I Install Plotly ?<\/h3>\n`pip install plotly`<br>\n`pip install cufflinks`","7d9f3e96":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Scatter plot-Ladder score in Dystopia & Dystopia + residual&nbsp;&nbsp;&nbsp;&nbsp;<\/h1>","953cf57a":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Check the shape&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","c765c72b":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Region wise GroupBy- Leader Score Mean&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","9d139c14":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Histogram-Perceptions of corruption&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","5d2251b7":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Trend Lines&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","14ec7b34":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">Loading Data \ud83d\udc8e&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> ","ba108fc0":"<h1 style=\"font-family: Verdana; font-size: 24px; font-style: normal; font-weight: bold; text-decoration: none; text-transform: none; letter-spacing: 3px; background-color: #ffffff; color: navy;\">View data&nbsp;&nbsp;&nbsp;&nbsp;<\/h1> "}}