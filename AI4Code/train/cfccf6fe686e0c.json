{"cell_type":{"944c7e87":"code","c20d97a1":"code","31e63bb1":"code","2f4d047d":"code","91c3f585":"code","cfc80bce":"code","51e6cf61":"code","42050485":"code","a0498584":"code","0b20d2ba":"code","d11fccc0":"code","61e027fd":"code","d70c4e9b":"code","cffc96aa":"code","5884b0df":"code","384d9a9d":"markdown","77f6f8f1":"markdown","66274096":"markdown","75f7c9e0":"markdown"},"source":{"944c7e87":"# Dataset\nfrom sklearn import datasets\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom matplotlib import animation\nfrom IPython.display import HTML\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn import preprocessing","c20d97a1":"!pip install neupy\n\nfrom neupy import utils\nfrom neupy import algorithms, utils","31e63bb1":"# carregar dados\niris = datasets.load_iris()\ndata = iris.data\nfeatures = iris.feature_names\niris_target = iris.target\nclasses = iris.target_names","2f4d047d":"df_iris = pd.DataFrame(data, columns=features)\ndf_iris[\"class_id\"] = iris_target\n\n# Creating numeric class identifiers (0,1,2) \ndf_iris.loc[df_iris[\"class_id\"]==0, 'class'] = str(classes[0])\ndf_iris.loc[df_iris[\"class_id\"]==1, 'class'] = str(classes[1])\ndf_iris.loc[df_iris[\"class_id\"]==2, 'class'] = str(classes[2])","91c3f585":"sns.set(style=\"ticks\")\nsns.pairplot(df_iris, hue=\"class\")","cfc80bce":"df_iris.head()","51e6cf61":"# Sele\u00e7\u00e3o dos atributos num\u00e9ricos e categ\u00f3ricos\niris_x = df_iris.filter(['sepal length (cm)', 'sepal width (cm)','petal length (cm)', 'petal width (cm)'])\nspecies = {'setosa': 0,'versicolor': 1,'virginica': 2}\niris_class = df_iris['class'].map(species)\niris_class = iris_class.to_numpy()\n\n# Normaliza\u00e7\u00e3o dos dados\niris_x = preprocessing.scale(iris_x)\niris_x = pd.DataFrame(iris_x, columns = ['sepal length (cm)', 'sepal width (cm)','petal length (cm)', 'petal width (cm)'])\n\n# Visualiza\u00e7\u00e3o das estat\u00edsticas b\u00e1sicas\niris_x.describe()","42050485":"def create_gng(n_features, n_start_nodes, epsilon_b, epsilon_n, max_age, lambda_, beta, alpha, max_nodes, verbose = True):\n    \"\"\"\n    Par\u00e2metros\n    ----------\n        n_inputs : N\u00famero de classes no conjunto de dados\n        n_start_nodes : N\u00famero de neur\u00f4nios inicializados\n        step (epsilon_b) : move o n\u00f3 vencedor em epsilon_b vezes\n        neighbour_step (epsilon_n) : move os n\u00f3s vizinhos do n\u00f3 vencedor epsilon_n vezes\n        max_edge_age : remove arestas mais antigas que max_edge_age  \n        n_iter_before_neuron_added (lambda) : a cada lambda itera\u00e7\u00e3o um novo n\u00f3 \u00e9 adicionado\n        error_decay_rate (beta) : taxa de deicamento para todo n\u00f3\n        after_split_error_decay_rate (alpha) : decaimento de erro ap\u00f3s a inser\u00e7\u00e3o de novo n\u00f3\n        max_nodes : N\u00famero m\u00e1ximo de n\u00f3s a serem adicionados    \n    \"\"\"\n    \n    return algorithms.GrowingNeuralGas(\n        n_inputs=n_features,\n        n_start_nodes=n_start_nodes,\n\n        shuffle_data=True,\n        verbose=verbose,\n\n        step=epsilon_b,\n        neighbour_step=epsilon_n,\n\n        max_edge_age=max_age,\n        max_nodes=max_nodes,\n\n        n_iter_before_neuron_added=lambda_,\n        after_split_error_decay_rate=alpha,\n        error_decay_rate=beta,\n        min_distance_for_update=0.01,\n    )","a0498584":"## Fun\u00e7\u00e3o para pegar erros\ndef create_model(model_df, list_gng_models, list_modes = [] ):\n\n    for index in range(len(list_gng_models)):\n            dict_info = pd.DataFrame.from_dict({'quantisation_error': list_gng_models[index].errors.train,\n                                        'iterations': [i for i in range(1, len(list_gng_models[index].errors.train)+1)],\n                                        'mode': [list_modes[index] for i in range(1, len(list_gng_models[index].errors.train)+1)],\n                                        'error_min':[min(list_gng_models[index].errors.train) for i in range(1, len(list_gng_models[index].errors.train)+1)]\n                                        })\n            model_df = model_df.append(dict_info)\n    return(model_df)","0b20d2ba":"# Cria\u00e7\u00e3o do objeto \ngng_model1 = create_gng(n_features = len(iris_x.columns),\n                         n_start_nodes = 2,\n                         epsilon_b = 10e-2,\n                         epsilon_n = 10e-4,\n                         max_age = 90,\n                         lambda_ = 50,\n                         beta = 0.005,\n                         alpha = 0.5,\n                         max_nodes = 500,\n                         verbose=True)\n\n# Treino do modelo\ngng_model1.train(iris_x, epochs=2000)","d11fccc0":"# Cria\u00e7\u00e3o do objeto \ngng_model2 = create_gng(n_features=len(iris_x.columns),\n                           n_start_nodes=2,\n                           epsilon_b=0.05,\n                           epsilon_n=0.0006,\n                           max_age=100,\n                           lambda_=200,\n                           beta=0.05,\n                           alpha=0.5,\n                           max_nodes=300,\n                           verbose=False)\n\n# Treino do modelo\ngng_model2.train(iris_x, epochs=2000)","61e027fd":"# Resultado do modelo\niris_model = pd.DataFrame(columns = ['quantisation_error', 'iterations', 'mode', 'error_min'])\niris_model = create_model(model_df = iris_model, list_gng_models = [gng_model1, gng_model2], \n                          list_modes = [\"gng_model1\", \"gng_model2\"] )","d70c4e9b":"## Gr\u00e1fico quantiza\u00e7\u00e3o\ng = sns.FacetGrid(iris_model, col=\"mode\")\ng.map(sns.lineplot, \"iterations\", \"quantisation_error\")\ng.fig.set_figwidth(22)\ng.fig.set_figheight(8)\n\n\nax1, ax2 = g.axes[0]\n\nax1.axhline(iris_model.query('mode == \"gng_model1\"')['error_min'][0], ls='--')\nax2.axhline(iris_model.query('mode == \"gng_model2\"')['error_min'][0], ls='--')\n\n\nax1.set(ylim=(0.00, 0.075))\nax2.set(ylim=(0.00, 0.075))\n\nax1.text(1500,0.03, \"min error:\" + str(round(iris_model.query('mode == \"gng_model1\"')['error_min'][0], 5)))\nax2.text(1500,0.03, \"min error:\" + str(round(iris_model.query('mode == \"gng_model2\"')['error_min'][0], 5)))","cffc96aa":"nodes, max_age, max_nodes = 2, 25, 50\n\nplt.title('Dimens\u00f5es das p\u00e9talas')\nplt.scatter(df_iris[df_iris[\"class\"] == 'setosa']['petal length (cm)'].values,\n            df_iris[df_iris[\"class\"] == 'setosa']['petal width (cm)'].values, label='Iris-setosa', alpha=.5)\nplt.scatter(df_iris[df_iris[\"class\"] == 'versicolor']['petal length (cm)'].values,\n            df_iris[df_iris[\"class\"] == 'versicolor']['petal width (cm)'].values, label='Iris-versicolor', alpha=.5)\nplt.scatter(df_iris[df_iris[\"class\"] == 'virginica']['petal length (cm)'].values,\n            df_iris[df_iris[\"class\"] == 'virginica']['petal width (cm)'].values, label='Iris-virginica', alpha=.5)\nplt.xlabel('petal_length')\nplt.ylabel('petal_width')\nplt.legend()\n\ndata = df_iris[['petal length (cm)', 'petal width (cm)']].values\ngng = GNG(n_inputs=nodes, max_edge_age=max_age, max_nodes=max_nodes)\n\n\ngng.train(data, epochs=500)\n\nfor node_1, node_2 in gng.graph.edges:\n#     print(node_2.weight)\n    weights = np.concatenate([node_1.weight, node_2.weight])\n    plt.plot(*weights.T, color='k', linewidth=1)\n    plt.scatter(*weights.T, color='k', s=20)","5884b0df":"fig, ax = plt.subplots(2, 4, figsize=(17, 8), sharex=True, sharey=True)\n\nmax_edge_ages = [50, 500] #default 100\nn_iter_before_neuron_added = [100, 2000] # default 1000\nn_nodes = [100, 2000] #default 1000\n\nidxs = [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3)]\nidx = 0\nfor age in max_edge_ages:\n    for it in n_iter_before_neuron_added:\n        for node in n_nodes:\n            print('idx: ', idx)\n            x, y = idxs[idx][0], idxs[idx][1]\n            gng = GNG(n_inputs=2, max_edge_age=age, max_nodes=node)\n            gng.train(data, 500)\n            ax[x][y].set_title('GNG Iris\\nn: %s, a: %s, t: %s'%(node, age, it))\n            ax[x][y].scatter(df_iris[df_iris[\"class\"] == 'setosa']['petal length (cm)'].values,\n                        df_iris[df_iris[\"class\"] == 'setosa']['petal width (cm)'].values, label='Iris-setosa', alpha=.5)\n            ax[x][y].scatter(df_iris[df_iris[\"class\"] == 'versicolor']['petal length (cm)'].values,\n                        df_iris[df_iris[\"class\"] == 'versicolor']['petal width (cm)'].values, label='Iris-versicolor', alpha=.5)\n            ax[x][y].scatter(df_iris[df_iris[\"class\"] == 'virginica']['petal length (cm)'].values,\n                        df_iris[df_iris[\"class\"] == 'virginica']['petal width (cm)'].values, label='Iris-virginica', alpha=.5)\n            if x == 1:\n                ax[x][y].set_xlabel('petal_length')\n            if y == 0:\n                ax[x][y].set_ylabel('petal_width')\n            ax[x][y].legend()\n            \n            for node_1, node_2 in gng.graph.edges:\n                weights = np.concatenate([node_1.weight, node_2.weight])\n                ax[x][y].plot(*weights.T, color='k', linewidth=1)\n                ax[x][y].scatter(*weights.T, color='k', s=10)\n            \n            idx+=1","384d9a9d":"### Projeto 3 - The Growing Neural Gas (GNG)\n\n- Discente: Helvecio Neto\n- Docente: Dr. Marcos Quiles","77f6f8f1":"### Normaliza\u00e7\u00e3o dos dados","66274096":"##### Fun\u00e7\u00e3o treinamento","75f7c9e0":"#### Exemplo 01 - Iris"}}