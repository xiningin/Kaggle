{"cell_type":{"7a0009c5":"code","9de5e020":"code","f4e2b3d4":"code","2c8184f8":"code","cb433b18":"code","28dbd324":"code","5bd25428":"code","1890ef39":"code","2610760b":"code","a14cb178":"code","fa5f6fab":"code","c92648b9":"code","4064434d":"code","ea621c76":"code","099c8292":"code","a0151a34":"code","ee50f748":"code","cc2ac40f":"code","edee6683":"code","bbc0d34b":"code","701b888a":"code","06d3c118":"code","e0e82635":"code","a60523fb":"code","5f0b8648":"code","d397c412":"code","bba62904":"code","8797d41c":"code","9f8b010c":"code","098f6368":"code","84bc2a09":"code","6de59d58":"code","825486a3":"code","1dc6f008":"code","51cca46e":"code","9d9ec599":"code","c8fc89af":"code","774ab88d":"code","0b0cc770":"code","236a0e55":"code","67a62bfc":"markdown","c5e45a8e":"markdown","31a73929":"markdown","1f188c95":"markdown","39c51fbd":"markdown"},"source":{"7a0009c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9de5e020":"data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndata.head()","f4e2b3d4":"len(data)","2c8184f8":"data.describe()","cb433b18":"data.dtypes","28dbd324":"data.isna().sum()","5bd25428":"data.info()","1890ef39":"data[\"Survived\"].value_counts()","2610760b":"data.corr()","a14cb178":"# Split into X and y\nX = data.drop(\"Survived\", axis=1)\ny = data[\"Survived\"]","fa5f6fab":"X.head()","c92648b9":"y.head()","4064434d":"# Split data into train and validation sets\nfrom sklearn.model_selection import train_test_split\nnp.random.seed(17)\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)","ea621c76":"len(X_train), len(X_val), len(y_train), len(y_val)","099c8292":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\n\ndef transform_data(data):\n    # remove \"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"\n    data = data.drop(\"PassengerId\", axis=1)\n    data = data.drop(\"Name\", axis=1)\n    data = data.drop(\"Ticket\", axis=1)\n    data = data.drop(\"Cabin\", axis=1)\n    \n    # fill na with pandas\n    data[\"Age\"].fillna(data[\"Age\"].mean(), inplace=True)\n    data[\"Embarked\"].fillna(data[\"Embarked\"].mode()[0], inplace=True)\n    data[\"Fare\"].fillna(data[\"Fare\"].mean(), inplace=True)\n    \n    # change \"Sex\" and \"Embark\" into numerical\n    one_hot = OneHotEncoder()\n    transformer = ColumnTransformer([(\"one_hot\",\n                                      one_hot,\n                                      [\"Sex\", \"Embarked\"])],\n                                    remainder=\"passthrough\")\n    data = transformer.fit_transform(data)\n    \n    return data","a0151a34":"X_train_tf = transform_data(X_train)\nX_train_tf\n# note this converts to numpy array, and not pd","ee50f748":"X_val_tf = transform_data(X_val)\nX_val_tf","cc2ac40f":"pd.DataFrame(X_val_tf).isna().sum()","edee6683":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Put models in a dictionary\nmodels = {\"Logistic Regression\": LogisticRegression(),\n          \"KNN\": KNeighborsClassifier(),\n          \"Random Forest\": RandomForestClassifier()}\n\n# Create a function to fit and score models\ndef fit_and_score(models, X_train_tf, X_val_tf, y_train, y_val):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of differetn Scikit-Learn machine learning models\n    \"\"\"\n    # Set random seed\n    np.random.seed(17)\n    # Make a dictionary to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(X_train_tf, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(X_val_tf, y_val)\n    return model_scores","bbc0d34b":"model_scores = fit_and_score(models=models,\n                             X_train_tf=X_train_tf,\n                             X_val_tf=X_val_tf,\n                             y_train=y_train,\n                             y_val=y_val)\n\nmodel_scores","701b888a":"# creating a evaluation metrics\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\ndef evaluate_preds(y_true, y_preds):\n    \"\"\"\n    perform evaluation comparison on y_true labels vs y_preds labels\n    \"\"\"\n    accuracy = accuracy_score(y_true, y_preds)\n    precision = precision_score(y_true, y_preds)\n    recall = recall_score(y_true, y_preds)\n    f1 = f1_score(y_true, y_preds)\n    metric_dict = {\"accuracy\": round(accuracy, 2),\n                          \"precision\": round(precision, 2),\n                          \"recall\": round(recall, 2),\n                          \"f1\": round(f1, 2)}\n    print(f\"Acc: {accuracy * 100:.2f}%\")\n    print(f\"Precision: {precision:.2f}\")\n    print(f\"Recall: {recall:.2f}\")\n    print(f\"F1 score: {f1:.2f}\")\n    return metric_dict\n","06d3c118":"np.random.seed(17)\nclf = RandomForestClassifier()\nclf.fit(X_train_tf, y_train)\ny_preds = clf.predict(X_val_tf)  # prediction using X_val_tf\n\n# evaluate using our function on validation set\nbaseline_metrics = evaluate_preds(y_val, y_preds)\nbaseline_metrics\n","e0e82635":"# tuning hyperparameters by RandomSearchCV\n\nfrom sklearn.model_selection import RandomizedSearchCV\ngrid = {\"n_estimators\": [10,100,200,500,1000,1200],\n        \"max_depth\": [None,5,10,20,30],\n        \"max_features\": [\"auto\", \"sqrt\"],\n        \"min_samples_split\": [2,4,6],\n        \"min_samples_leaf\": [1,2,4]}\n\nnp.random.seed(17)\n\nclf = RandomForestClassifier()\nrs_clf = RandomizedSearchCV(estimator=clf,\n                            param_distributions=grid,  # what we defined above\n                            n_iter=10, # number of combinations to try\n                            cv=5,   # number of cross-validation split\n                            verbose=2)\nrs_clf.fit(X_train_tf, y_train);","a60523fb":"rs_clf.best_params_","5f0b8648":"rs_y_preds = rs_clf.predict(X_val_tf)\n\n# evaluate predictions\nrs_metrics = evaluate_preds(y_val, rs_y_preds)\n","d397c412":"# tuning hyperparameters by GridSearchCV\nfrom sklearn.model_selection import GridSearchCV\n\ngrid_2 = {'n_estimators': [500, 1000, 2000],\n         'max_depth': [None, 10],\n         'max_features': ['sqrt'],\n         'min_samples_split': [4, 6],\n         'min_samples_leaf': [1, 2]}\n\nnp.random.seed(17)\n\nclf = RandomForestClassifier()\n\n# Setup GridSearchCV\ngs_clf = GridSearchCV(estimator=clf,\n                            param_grid=grid_2,\n                            cv=5,\n                            verbose=2)\n\n# Fit the GSCV version of clf\ngs_clf.fit(X_train_tf, y_train);\n","bba62904":"gs_clf.best_params_","8797d41c":"gs_y_preds = gs_clf.predict(X_val_tf)\ngs_y_preds","9f8b010c":"gs_metrics = evaluate_preds(y_val, gs_y_preds)","098f6368":"# Lets compare our different model metrics\n\ncompare_metrics = pd.DataFrame({\"baseline\": baseline_metrics,\n                                \"random search\": rs_metrics,\n                                \"grid search\": gs_metrics})\ncompare_metrics.plot.bar(figsize=(10,8))\n","84bc2a09":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","6de59d58":"test_data_tf = transform_data(test_data)\ntest_data_tf ","825486a3":"pd.DataFrame(test_data_tf ).isna().sum()","1dc6f008":"test_data.isna().sum()","51cca46e":"test_preds = gs_clf.predict(test_data_tf)\npd.DataFrame(test_preds)","9d9ec599":"submission = pd.DataFrame({\"PassengerId\": test_data[\"PassengerId\"], \n                          \"Survived\": test_preds})","c8fc89af":"submission","774ab88d":"len(submission)","0b0cc770":"len(test_data)","236a0e55":"submission.to_csv(\"submission.csv\", index=False)","67a62bfc":"### Modeling\nWe're going to try 3 different machine learning models:\n\n1. Logistic Regression\n2. K-Nearest Neighbours Classifier\n3. Random Forest Classifier","c5e45a8e":"Seems like RandomSearchCV yields the best result for our model","31a73929":"### Further exploring model\non RandomForest, since it currently gives us the best result","1f188c95":"### Prepare our data\n\nWe need to:\n1. handle missing values\n2. make all data numerical\n\nOnly these features have missing:\n1. age\n2. cabin - to be removed\n3. embarked\n4. fare (in test data)\n\nOur pipeline function will:\n1. remove \"PassengerId\", \"Name\", \"Ticket\", \"Cabin\"\n2. change \"Sex\" into numerical\n3. change \"Embarked\" into numerical\n4. fill embarked missing with mode?\n5. fill age with mean?\n6. fill fare with mean","39c51fbd":"Testing\n1. transform test data\n2. run test\n3. export into desired test result"}}