{"cell_type":{"a168d2a9":"code","2528c850":"code","4a71bd38":"code","d043ea44":"code","eecc11f0":"code","8de7b1f0":"code","90fdbe1f":"code","becac344":"code","bd3eb676":"code","9e5e7136":"markdown","239497f7":"markdown","56ff23fd":"markdown"},"source":{"a168d2a9":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\n\nfrom scipy.stats import describe\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","2528c850":"LABELS = [\"isFraud\"]\nall_files = glob.glob(\"..\/input\/lgmodels\/*.csv\")\nscores = np.zeros(len(all_files))\nfor i in range(len(all_files)):\n    scores[i] = float('.'+all_files[i].split(\".\")[3])\n    print(i,scores[i],all_files[i])","4a71bd38":"describe(scores)","d043ea44":"top = scores.argsort()[::-1]\nfor i, f in enumerate(top):\n    print(i,scores[f],all_files[f])","eecc11f0":"outs = [pd.read_csv(all_files[f], index_col=0) for f in top]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"m\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols","8de7b1f0":"# check correlation\ncorr = concat_sub.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(len(cols)+2, len(cols)+2))\n\n# Draw the heatmap with the mask and correct aspect ratio\n_ = sns.heatmap(corr,mask=mask,cmap='prism',center=0, linewidths=1,\n                annot=True,fmt='.4f', cbar_kws={\"shrink\":.2})","90fdbe1f":"rank = np.tril(corr.values,-1)\nrank[rank<0.92] = 1\nm = (rank>0).sum() - (rank>0.97).sum()\nm_gmean, s = 0, 0\nfor n in range(m):\n    mx = np.unravel_index(rank.argmin(), rank.shape)\n    w = (m-n)\/m\n    m_gmean += w*(np.log(concat_sub.iloc[:,mx[0]])+np.log(concat_sub.iloc[:,mx[1]]))\/2\n    s += w\n    rank[mx] = 1\nm_gmean = np.exp(m_gmean\/s)","becac344":"m_gmean = (m_gmean-m_gmean.min())\/(m_gmean.max()-m_gmean.min())\ndescribe(m_gmean)","bd3eb676":"concat_sub['isFraud'] = m_gmean\nconcat_sub[['isFraud']].to_csv('stack_gmean.csv')","9e5e7136":"# Stacking Approach using GMEAN","239497f7":"Credits to the Experts (Please like their kernels)<br>\nAshish Gupta: [20+ top lgbm models outputs](https:\/\/www.kaggle.com\/roydatascience\/lgmodels)<br>\nNavaneetha: [xtreme-boost-and-feature-engineering](https:\/\/www.kaggle.com\/krishonaveen\/xtreme-boost-and-feature-engineering)<br>\nShugen: [lgb-starter-r](https:\/\/www.kaggle.com\/andrew60909\/lgb-starter-r) <br>\nKhan HBK: [hust-lgb-starter-with-r](https:\/\/www.kaggle.com\/duykhanh99\/hust-lgb-starter-with-r)<br>\nKonstantin: [ieee-internal-blend](https:\/\/www.kaggle.com\/kyakovlev\/ieee-internal-blend)<br>\nAvocado: [xgb-model-with-feature-engineering](https:\/\/www.kaggle.com\/iasnobmatsu\/xgb-model-with-feature-engineering)<br>\nDavid: [feature-engineering-lightgbm-w-gpu](https:\/\/www.kaggle.com\/davidcairuz\/feature-engineering-lightgbm-w-gpu)<br>\nLyalikov: [lgbm-baseline-small-fe-no-blend](https:\/\/www.kaggle.com\/timon88\/lgbm-baseline-small-fe-no-blend)<br>\nYuanrong: [lgb-xgb-ensemble-stacking-based-on-fea-eng](https:\/\/www.kaggle.com\/yw6916\/lgb-xgb-ensemble-stacking-based-on-fea-eng)<br>\n","56ff23fd":"# Weighted GMEAN by inverse correlation"}}