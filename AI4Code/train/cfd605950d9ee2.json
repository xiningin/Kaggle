{"cell_type":{"33af1c50":"code","9b28dcd6":"code","5441a1bf":"code","406671c7":"code","6f55ebd4":"code","e4ee2931":"code","dcf8d9b7":"code","eda1b448":"code","9eb60851":"code","164103b7":"code","f229986c":"code","d18dd205":"markdown","a680d1a2":"markdown"},"source":{"33af1c50":"import tensorflow\nimport tensorflow.compat.v1 as tf\n\nimport keras\nimport cv2 as cv\nimport os\nimport numpy as np\nimport random\nimport pickle\nfrom keras.applications.imagenet_utils import preprocess_input\nfrom keras.preprocessing.image import load_img, img_to_array\nfrom keras.models import load_model\n\nimport time\nprint(tf.__version__)\nprint(\"tools import done!\")","9b28dcd6":"'''\n\u8bfb\u53d6\u6570\u636e\u96c6\n\u7f16\u5199\u5377\u79ef\u7f51\u7edc\u548c\u5168\u8fde\u63a5\u5c42\n\u7f16\u8bd1\u3001\u8bad\u7ec3\u3001\u8bc4\u4f30\n\n'''","5441a1bf":"# \u6570\u636e\u9884\u5904\u7406\nstart_time = time.time()\n# \u8fdb\u5165\u56fe\u7247\u6570\u636e\u7684\u76ee\u5f55\uff0c\u8bfb\u53d6\u56fe\u7247\u4fe1\u606f\nall_data_file = os.listdir('.\/kaggle\/train\/')\n\n# \u6253\u4e71\u56fe\u7247\u987a\u5e8f\nrandom.shuffle(all_data_file)\n\nall_train_file = all_data_file[:20000]\nall_test_file = all_data_file[20000:]\n\ntrain_data = []\ntrain_label = []\nfilename = []\n\ntest_data = []\ntest_label = []\ntest_filename = []\n\n# \u8bad\u7ec3\u96c6\nfor i in all_train_file:\n    img = cv.imread(os.path.join('.\/kaggle\/train\/', i), 1)\n    resize_img = cv.resize(img,(100,100))\n    img_data = np.array(resize_img)\n\n    train_data.append(img_data)\n    if 'cat' in i :\n        train_label.append(0)\n    elif 'dog' in i :\n        train_label.append(1)\n    else:\n        raise Exception('%s is wrong train file'%(i))\n\n    filename.append(i)\n\n# \u6d4b\u8bd5\u96c6\nfor i in all_test_file:\n    img = cv.imread(os.path.join('.\/kaggle\/train', i),1)\n    resize_img = cv.resize(img, (100, 100))\n    img_data = np.array(resize_img)\n    test_data.append(img_data)\n    if 'cat' in i :\n        test_label.append(0)\n    elif 'dog' in i :\n        test_label.append(1)\n    else:\n        raise Exception('%s is wrong test file'%(i))\n\nimage = tf.image.resize_images(train_data, [100, 100], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)\nimage = tf.cast(image, tf.float32)\nx_train = np.array(image)\n\ny_train = np.array(train_label)\n\nimage_test = tf.image.resize_images(test_data, [100, 100], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)\nimage_test = tf.cast(image_test, tf.float32)\n\nx_test = np.array(image_test)\ny_test = np.array(test_label)\n","406671c7":"# 2.\u5b9a\u4e49\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\n# \u4e24\u4e2a\u5377\u79ef\u5c42\u52a0\u4e0a\u4e24\u4e2a\u6c60\u5316\u5c42\uff0c\u5728\u52a0\u4e24\u4e2a\u5168\u8fde\u63a5\u5c42\nmodel = keras.models.Sequential([\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(16, kernel_size = 3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(16, kernel_size = 3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u6c60\u5316\u5c42\uff1a2*2\u7a97\u53e3\uff0cstrides=2\n    keras.layers.MaxPool2D(pool_size=2, strides=2),\n\n\n    # \u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\uff0c64\u4e2a\uff0c5*5*32\uff0cfilter,strides=1,padding='same'\n    keras.layers.Conv2D(32, kernel_size=3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(32, kernel_size=3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u6c60\u5316\u5c42\uff0c2*2\u7a97\u53e3\uff0cstrides=2, [None,8,8,64]\n    keras.layers.MaxPool2D(pool_size=2, strides=2),\n\n\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(64, kernel_size=3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(64, kernel_size=3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u6c60\u5316\u5c42\n    keras.layers.MaxPool2D(pool_size=2, strides=2),\n\n\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(128, kernel_size=3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u5377\u79ef\u5c42\n    keras.layers.Conv2D(128, kernel_size=3, strides=1,\n                        data_format='channels_last', activation=tf.nn.relu),\n    # \u6c60\u5316\u5c42\n    keras.layers.MaxPool2D(pool_size=2, strides=2),\n\n    # [None,8,8,64]-->[None,8*8*64]\n    keras.layers.Flatten(),\n    # \u5168\u8fde\u63a5\u5c42\u795e\u7ecf\u7f51\u7edc\n    # 1024\u4e2a\u795e\u7ecf\u5143\u7f51\u7edc\u5c42\n    keras.layers.Dense(1024, activation=tf.nn.relu),\n    # 2\u4e2a\u795e\u7ecf\u5143\u795e\u7ecf\u7f51\u7edc\n    keras.layers.Dense(2, activation=tf.nn.softmax)\n\n])\n","6f55ebd4":"# \u6a21\u578b\u8c03\u4f18\nmodel.compile(optimizer=keras.optimizers.Adam(),\n                  loss= tf.keras.losses.sparse_categorical_crossentropy,\n                  metrics=['accuracy'])\n","e4ee2931":"# \u6a21\u578b\u8bad\u7ec3\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)","dcf8d9b7":"# \u6a21\u578b\u8bc4\u4f30\u7ed3\u679c\u663e\u793a\nloss, acc= model.evaluate(x_test, y_test)\nmodel.save('.\/ckpt\/cnn.h5')\nprint(loss, acc)\n\nend_time = time.time()\n\nprint('\u6700\u7ec8\u7528\u65f6\uff1a{}'.format(end_time - start_time))","eda1b448":"# \u5bfc\u5165\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\nmodel = load_model('.\/ckpt\/cnn.h5')","9eb60851":"feature = []\nimages = []\nimages_name = []\nj = 0\nfor i in os.listdir('.\/kaggle\/test1'):\n    img_path = os.path.join('.\/kaggle\/test1', i)\n\n    '''\u8bfb\u53d6\u56fe\u7247\n        \u8f6c\u6362\u6210\u6570\u7ec4\n        \u6a21\u578b\u8f93\u5165\n    '''\n    images_name.append(i)\n    imge = load_img(img_path, target_size=(100, 100))\n    img = img_to_array(imge)\n\n    img = np.array(img)\n    feature.append(img)\n\n    images.append(imge)\n    # \u5904\u7406\u56fe\u7247\u6570\u636e\uff0cnparray\u6570\u7ec4\u8f93\u5165\n    inputs = preprocess_input(np.array(feature))\n    j += 1","164103b7":"preds = model.predict(inputs, batch_size=1, verbose=1)","f229986c":"for i in range(j):\n    res = preds[i]\n    cat = float(res[0])\n    dog = float(res[1])\n    imge = feature[i]\n    imge_ = imge.copy()\n    name = images_name[i]\n    if cat > dog:\n        cv.imwrite(os.path.join('.\/preds\/cats\/', name), imge_)\n    else:\n        cv.imwrite(os.path.join(\".\/preds\/dogs\/\", name), imge_)","d18dd205":"> \u5229\u7528\u9884\u6d4b\u7684\u7ed3\u679c\u5bf9\u732b\u72d7\u7684\u56fe\u7247\u8fdb\u884c\u5206\u7c7b","a680d1a2":"*\u8fdb\u884c\u6a21\u578b\u9884\u6d4b*"}}