{"cell_type":{"c01875d3":"code","42503209":"code","4d94d0c7":"code","9c499caf":"code","c052724b":"code","cfbe0d2d":"code","b11a92fa":"code","725034a9":"code","e7ced705":"code","88f9d1f6":"code","46bdc6bb":"code","3f6ea5b2":"code","0cb3c681":"code","9be7ddd0":"code","ed801c84":"code","8a84949b":"code","871ee870":"code","b7500ebf":"code","1fdf6504":"code","a3754bb6":"code","c206e0d0":"code","7e85132b":"code","3f255481":"code","ff11f0b9":"code","f1e11b34":"code","a1e5d73f":"code","caeae4be":"code","cd2f3f3a":"code","caa53346":"code","1baee059":"code","6cbfa4c8":"code","6cd3287f":"code","6b4cc5ff":"code","1675c0c5":"code","ef0a0785":"code","f308dd97":"code","4b757c90":"code","6179848a":"code","d79e5c3e":"code","189a59e6":"code","4d17859f":"code","d2224125":"code","48f8fff2":"code","207c50f3":"code","84c05300":"code","3a0904d6":"code","ba6d71f1":"code","0da42d43":"code","2c89fbf3":"code","be78e46f":"code","b732932e":"code","6309d699":"code","65109718":"code","9fe257b2":"code","fd01e564":"code","6029ad58":"code","ca3cce5b":"code","ea0f8321":"code","e4491c7c":"code","68009460":"code","bcb466fa":"code","fac91ff7":"code","dbab218d":"code","ee70fa0a":"code","c5ab8ccd":"code","6a860e36":"code","1d6a414a":"code","2fd78358":"code","3a51cf68":"code","2b6f6149":"code","8e8595d5":"code","02522744":"code","e7cc2937":"code","44636409":"code","cb15cd77":"code","ebd42c7f":"code","687802e0":"code","048b3096":"code","f6d3c651":"code","f6583d14":"code","98b29f1f":"code","4cad8a2a":"code","4e286766":"code","ba52ca70":"code","701ee5c7":"code","55549996":"code","6dc0c16e":"code","30b8e664":"code","c7c65a10":"code","6ee12653":"code","abf35ec0":"code","f2f5a037":"code","6d4716f8":"code","d7d3ed47":"code","566caad5":"code","31f79b99":"code","7696e000":"code","5d9b88b1":"code","09e8d74d":"code","b8da28bc":"code","b4b008ce":"code","9d3ed959":"code","c1c2bc6f":"code","d2a6d284":"code","c6b60e2c":"code","f48d0853":"code","5e719705":"code","826873e5":"code","08a951c4":"code","bc9e23ac":"code","c57a1272":"code","d22bb493":"code","a054d6bb":"code","46d36d41":"code","6f85295d":"code","53096232":"code","536e422c":"code","0420bc4a":"code","bc6b4405":"code","069e1866":"code","a19a18d2":"code","d26fb2fd":"code","fc57d800":"code","7ad1906b":"code","0647f379":"code","3e4bbec4":"code","c209c45d":"code","7ad3e8ee":"markdown","fe52ed3b":"markdown","1b280944":"markdown","54139109":"markdown","d1e9b413":"markdown","b80353a2":"markdown","22cbc915":"markdown","ed027313":"markdown","24700b12":"markdown","9e5ae0f5":"markdown","cda1031c":"markdown","c7400665":"markdown","409d9912":"markdown","4eeb686a":"markdown","b38eaf40":"markdown","03f55c09":"markdown","e7f5b9f1":"markdown","77a03207":"markdown","f6201c51":"markdown","c46bb317":"markdown","1d84c264":"markdown","d70eab37":"markdown","24ddfa34":"markdown","caf85057":"markdown","6e84e9ee":"markdown","b36ba356":"markdown","40f9ef06":"markdown","be903bcc":"markdown","3603285b":"markdown","6e2a2b76":"markdown","23d9e67a":"markdown","b7129370":"markdown","f1a431e7":"markdown","f3e57392":"markdown","c0081907":"markdown","88ec8bc2":"markdown"},"source":{"c01875d3":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","42503209":"import pandas as pd  \n   \n# list of name, degree, score \nnme = [\"aparna\", \"pankaj\", \"sudhir\", \"Geeku\"] \ndeg = [\"MBA\", \"BCA\", \"M.Tech\", \"MBA\"] \nscr = [90, 40, 80, 98] \n   \n# dictionary of lists  \ndict = {'name': nme, 'degree': deg, 'score': scr}  \n     \ndf = pd.DataFrame(dict) \n  \n# saving the dataframe \ndf.to_csv(r'file3.csv', index=False) \n","4d94d0c7":"train = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')\n\nprint(\"Shape of train: \", train.shape)\nprint(\"Shape of test: \", test.shape)","9c499caf":"train.head(10)","c052724b":"test.head(10)","cfbe0d2d":"## concat train and test\ndf = pd.concat((train, test))\ntemp_df = df\nprint(\"Shape of df: \", df.shape)","b11a92fa":"df.head(6)","725034a9":"df.tail(6)","e7ced705":"# To show the all columns\npd.set_option(\"display.max_columns\", 2000)\npd.set_option(\"display.max_rows\", 85)","88f9d1f6":"df.head(6)","46bdc6bb":"df.tail(6)","3f6ea5b2":"df.info()","0cb3c681":"df.describe()","9be7ddd0":"df.select_dtypes(include=['int64', 'float64']).columns","ed801c84":"df.select_dtypes(include=['object']).columns","8a84949b":"# Set index as Id column\ndf = df.set_index(\"Id\")","871ee870":"df.head(6)","b7500ebf":"# Show the null values using heatmap\nplt.figure(figsize=(16,9))\nsns.heatmap(df.isnull())","1fdf6504":"# Get the percentages of null value\nnull_percent = df.isnull().sum()\/df.shape[0]*100\nnull_percent","a3754bb6":"col_for_drop = null_percent[null_percent > 20].keys() # if the null value % 20 or > 20 so need to drop it","c206e0d0":"# drop columns\ndf = df.drop(col_for_drop, \"columns\")\ndf.shape","7e85132b":"# find the unique value count\nfor i in df.columns:\n    print(i + \"\\t\" + str(len(df[i].unique())))","3f255481":"# find unique values of each column\nfor i in df.columns:\n    print(\"Unique value of:>>> {} ({})\\n{}\\n\".format(i, len(df[i].unique()), df[i].unique()))","ff11f0b9":"# Describe the target \ntrain[\"SalePrice\"].describe()","f1e11b34":"# Plot the distplot of target\nplt.figure(figsize=(10,8))\nbar = sns.distplot(train[\"SalePrice\"])\nbar.legend([\"Skewness: {:.2f}\".format(train['SalePrice'].skew())])","a1e5d73f":"# correlation heatmap\nplt.figure(figsize=(25,25))\nax = sns.heatmap(train.corr(), cmap = \"coolwarm\", annot=True, linewidth=2)\n\n# to fix the bug \"first and last row cut in half of heatmap plot\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)","caeae4be":"# correlation heatmap of higly correlated features with SalePrice\nhig_corr = train.corr()\nhig_corr_features = hig_corr.index[abs(hig_corr[\"SalePrice\"]) >= 0.5]\nhig_corr_features\n","cd2f3f3a":"plt.figure(figsize=(10,8))\nax = sns.heatmap(train[hig_corr_features].corr(), cmap = \"coolwarm\", annot=True, linewidth=3)\n# to fix the bug \"first and last row cut in half of heatmap plot\"\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)","caa53346":"# Plot regplot to get the nature of highly correlated data\nplt.figure(figsize=(16,9))\nfor i in range(len(hig_corr_features)):\n    if i <= 9:\n        plt.subplot(3,4,i+1)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        sns.regplot(data=train, x = hig_corr_features[i], y = 'SalePrice')","1baee059":"missing_col = df.columns[df.isnull().any()]\nmissing_col","6cbfa4c8":"bsmt_col = ['BsmtCond', 'BsmtExposure', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtFinType1',\n       'BsmtFinType2', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtQual', 'BsmtUnfSF', 'TotalBsmtSF']\nbsmt_feat = df[bsmt_col]\nbsmt_feat","6cd3287f":"bsmt_feat.info()","6b4cc5ff":"bsmt_feat.isnull().sum()","1675c0c5":"bsmt_feat = bsmt_feat[bsmt_feat.isnull().any(axis=1)]\nbsmt_feat","ef0a0785":"bsmt_feat_all_nan = bsmt_feat[(bsmt_feat.isnull() | bsmt_feat.isin([0])).all(1)]\nbsmt_feat_all_nan","f308dd97":"bsmt_feat_all_nan.shape","4b757c90":"qual = list(df.loc[:, df.dtypes == 'object'].columns.values)\nqual","6179848a":"# Fillinf the mising value in bsmt features\nfor i in bsmt_col:\n    if i in qual:\n        bsmt_feat_all_nan[i] = bsmt_feat_all_nan[i].replace(np.nan, 'NA') # replace the NAN value by 'NA'\n    else:\n        bsmt_feat_all_nan[i] = bsmt_feat_all_nan[i].replace(np.nan, 0) # replace the NAN value inplace of 0\n\nbsmt_feat.update(bsmt_feat_all_nan) # update bsmt_feat df by bsmt_feat_all_nan\ndf.update(bsmt_feat_all_nan) # update df by bsmt_feat_all_nan\n\n\"\"\"\n>>> df = pd.DataFrame({'A': [1, 2, 3],\n...                    'B': [400, 500, 600]})\n>>> new_df = pd.DataFrame({'B': [4, 5, 6],\n...                        'C': [7, 8, 9]})\n>>> df.update(new_df)\n>>> df\n   A  B\n0  1  4\n1  2  5\n2  3  6\n\"\"\"","d79e5c3e":"bsmt_feat = bsmt_feat[bsmt_feat.isin([np.nan]).any(axis=1)]\nbsmt_feat","189a59e6":"bsmt_feat.shape","4d17859f":"print(df['BsmtFinSF2'].max())\nprint(df['BsmtFinSF2'].min())","d2224125":"pd.cut(range(0,1526),5) # create a bucket","48f8fff2":"df_slice = df[(df['BsmtFinSF2'] >= 305) & (df['BsmtFinSF2'] <= 610)]\ndf_slice","207c50f3":"bsmt_feat.at[333,'BsmtFinType2'] = df_slice['BsmtFinType2'].mode()[0] # replace NAN value of BsmtFinType2 by mode of buet ((305.0, 610.0)","84c05300":"bsmt_feat","3a0904d6":"bsmt_feat['BsmtExposure'] = bsmt_feat['BsmtExposure'].replace(np.nan, df[df['BsmtQual'] =='Gd']['BsmtExposure'].mode()[0])","ba6d71f1":"bsmt_feat['BsmtCond'] = bsmt_feat['BsmtCond'].replace(np.nan, df['BsmtCond'].mode()[0])\nbsmt_feat['BsmtQual'] = bsmt_feat['BsmtQual'].replace(np.nan, df['BsmtQual'].mode()[0])","0da42d43":"df.update(bsmt_feat)","2c89fbf3":"bsmt_feat.isnull().sum()","be78e46f":"df.columns[df.isnull().any()]","b732932e":"garage_col = ['GarageArea', 'GarageCars', 'GarageCond', 'GarageFinish', 'GarageQual', 'GarageType', 'GarageYrBlt',]\ngarage_feat = df[garage_col]\ngarage_feat = garage_feat[garage_feat.isnull().any(axis=1)]\ngarage_feat","6309d699":"garage_feat.shape","65109718":"garage_feat_all_nan = garage_feat[(garage_feat.isnull() | garage_feat.isin([0])).all(1)]\ngarage_feat_all_nan.shape","9fe257b2":"for i in garage_feat:\n    if i in qual:\n        garage_feat_all_nan[i] = garage_feat_all_nan[i].replace(np.nan, 'NA')\n    else:\n        garage_feat_all_nan[i] = garage_feat_all_nan[i].replace(np.nan, 0)\n        \ngarage_feat.update(garage_feat_all_nan)\ndf.update(garage_feat_all_nan)","fd01e564":"garage_feat = garage_feat[garage_feat.isnull().any(axis=1)]\ngarage_feat","6029ad58":"for i in garage_col:\n    garage_feat[i] = garage_feat[i].replace(np.nan, df[df['GarageType'] == 'Detchd'][i].mode()[0])","ca3cce5b":"garage_feat.isnull().any()","ea0f8321":"df.update(garage_feat)","e4491c7c":"df.columns[df.isnull().any()]","68009460":"df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\ndf['Functional'] = df['Functional'].fillna(df['Functional'].mode()[0])\ndf['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])\ndf['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])\ndf['SaleType'] = df['SaleType'].fillna(df['SaleType'].mode()[0])\ndf['Utilities'] = df['Utilities'].fillna(df['Utilities'].mode()[0])\ndf['MasVnrType'] = df['MasVnrType'].fillna(df['MasVnrType'].mode()[0])","bcb466fa":"df.columns[df.isnull().any()]","fac91ff7":"df[df['MasVnrArea'].isnull() == True]['MasVnrType'].unique()","dbab218d":"df.loc[(df['MasVnrType'] == 'None') & (df['MasVnrArea'].isnull() == True), 'MasVnrArea'] = 0","ee70fa0a":"df.isnull().sum()\/df.shape[0] * 100","c5ab8ccd":"lotconfig = ['Corner', 'Inside', 'CulDSac', 'FR2', 'FR3']\nfor i in lotconfig:\n    df['LotFrontage'] = pd.np.where((df['LotFrontage'].isnull() == True) & (df['LotConfig'] == i) , df[df['LotConfig'] == i] ['LotFrontage'].mean(), df['LotFrontage'])","6a860e36":"df.isnull().sum()","1d6a414a":"df.columns","2fd78358":"# converting columns in str which have categorical nature but in int64\nfeat_dtype_convert = ['MSSubClass', 'YearBuilt', 'YearRemodAdd', 'GarageYrBlt', 'YrSold']\nfor i in feat_dtype_convert:\n    df[i] = df[i].astype(str)","3a51cf68":"df['MoSold'].unique() # MoSold = Month of sold","2b6f6149":"# conver in month abbrevation\nimport calendar\ndf['MoSold'] = df['MoSold'].apply(lambda x : calendar.month_abbr[x])","8e8595d5":"df['MoSold'].unique()","02522744":"quan = list(df.loc[:, df.dtypes != 'object'].columns.values)","e7cc2937":"quan","44636409":"len(quan)","cb15cd77":"obj_feat = list(df.loc[:, df.dtypes == 'object'].columns.values)\nobj_feat","ebd42c7f":"from pandas.api.types import CategoricalDtype\ndf['BsmtCond'] = df['BsmtCond'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes","687802e0":"df['BsmtCond'].unique()","048b3096":"df['BsmtExposure'] = df['BsmtExposure'].astype(CategoricalDtype(categories=['NA', 'Mn', 'Av', 'Gd'], ordered = True)).cat.codes","f6d3c651":"df['BsmtExposure'].unique()","f6583d14":"df['BsmtFinType1'] = df['BsmtFinType1'].astype(CategoricalDtype(categories=['NA', 'Unf', 'LwQ', 'Rec', 'BLQ','ALQ', 'GLQ'], ordered = True)).cat.codes\ndf['BsmtFinType2'] = df['BsmtFinType2'].astype(CategoricalDtype(categories=['NA', 'Unf', 'LwQ', 'Rec', 'BLQ','ALQ', 'GLQ'], ordered = True)).cat.codes\ndf['BsmtQual'] = df['BsmtQual'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['ExterQual'] = df['ExterQual'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['ExterCond'] = df['ExterCond'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['Functional'] = df['Functional'].astype(CategoricalDtype(categories=['Sal', 'Sev', 'Maj2', 'Maj1', 'Mod','Min2','Min1', 'Typ'], ordered = True)).cat.codes\ndf['GarageCond'] = df['GarageCond'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['GarageQual'] = df['GarageQual'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['GarageFinish'] = df['GarageFinish'].astype(CategoricalDtype(categories=['NA', 'Unf', 'RFn', 'Fin'], ordered = True)).cat.codes\ndf['HeatingQC'] = df['HeatingQC'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['KitchenQual'] = df['KitchenQual'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes\ndf['PavedDrive'] = df['PavedDrive'].astype(CategoricalDtype(categories=['N', 'P', 'Y'], ordered = True)).cat.codes\ndf['Utilities'] = df['Utilities'].astype(CategoricalDtype(categories=['ELO', 'NASeWa', 'NASeWr', 'AllPub'], ordered = True)).cat.codes","98b29f1f":"df['Utilities'].unique()","4cad8a2a":"skewed_features = ['1stFlrSF',\n '2ndFlrSF',\n '3SsnPorch',\n 'BedroomAbvGr',\n 'BsmtFinSF1',\n 'BsmtFinSF2',\n 'BsmtFullBath',\n 'BsmtHalfBath',\n 'BsmtUnfSF',\n 'EnclosedPorch',\n 'Fireplaces',\n 'FullBath',\n 'GarageArea',\n 'GarageCars',\n 'GrLivArea',\n 'HalfBath',\n 'KitchenAbvGr',\n 'LotArea',\n 'LotFrontage',\n 'LowQualFinSF',\n 'MasVnrArea',\n 'MiscVal',\n 'OpenPorchSF',\n 'PoolArea',\n 'ScreenPorch',\n 'TotRmsAbvGrd',\n 'TotalBsmtSF',\n 'WoodDeckSF']","4e286766":"quan == skewed_features","ba52ca70":"plt.figure(figsize=(25,20))\nfor i in range(len(skewed_features)):\n    if i <= 28:\n        plt.subplot(7,4,i+1)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        ax = sns.distplot(df[skewed_features[i]])\n        ax.legend([\"Skewness: {:.2f}\".format(df[skewed_features[i]].skew())], fontsize = 'xx-large')","701ee5c7":"df_back = df","55549996":"# decrease the skewnwnes of the data\nfor i in skewed_features:\n    df[i] = np.log(df[i] + 1)","6dc0c16e":"plt.figure(figsize=(25,20))\nfor i in range(len(skewed_features)):\n    if i <= 28:\n        plt.subplot(7,4,i+1)\n        plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n        ax = sns.distplot(df[skewed_features[i]])\n        ax.legend([\"Skewness: {:.2f}\".format(df[skewed_features[i]].skew())], fontsize = 'xx-large')","30b8e664":"SalePrice = np.log(train['SalePrice'] + 1)","c7c65a10":"# get object feature to conver in numeric using dummy variable\nobj_feat = list(df.loc[:,df.dtypes == 'object'].columns.values)\nlen(obj_feat)","6ee12653":"# dummy varaibale\ndummy_drop = []\nclean_df = df\nfor i in obj_feat:\n    dummy_drop += [i + '_' + str(df[i].unique()[-1])]\n\ndf = pd.get_dummies(df, columns = obj_feat)\ndf = df.drop(dummy_drop, axis = 1)","abf35ec0":"df.shape","f2f5a037":"#sns.pairplot(df)","6d4716f8":"# scaling dataset with robust scaler\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\nscaler.fit(df)\ndf = scaler.transform(df)","d7d3ed47":"train_len = len(train)","566caad5":"X_train = df[:train_len]\nX_test = df[train_len:]\ny_train = SalePrice\n\nprint(X_train.shape)\nprint(X_test.shape)\nprint(len(y_train))","31f79b99":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import make_scorer, r2_score\n\ndef test_model(model, X_train=X_train, y_train=y_train):\n    cv = KFold(n_splits = 3, shuffle=True, random_state = 45)\n    r2 = make_scorer(r2_score)\n    r2_val_score = cross_val_score(model, X_train, y_train, cv=cv, scoring = r2)\n    score = [r2_val_score.mean()]\n    return score","7696e000":"import sklearn.linear_model as linear_model\nLR = linear_model.LinearRegression()\ntest_model(LR)","5d9b88b1":"# Cross validation\ncross_validation = cross_val_score(estimator = LR, X = X_train, y = y_train, cv = 10)\nprint(\"Cross validation accuracy of LR model = \", cross_validation)\nprint(\"\\nCross validation mean accuracy of LR model = \", cross_validation.mean())","09e8d74d":"rdg = linear_model.Ridge()\ntest_model(rdg)","b8da28bc":"lasso = linear_model.Lasso(alpha=1e-4)\ntest_model(lasso)","b4b008ce":"from sklearn.svm import SVR\nsvr_reg = SVR(kernel='rbf')\ntest_model(svr_reg)","9d3ed959":"from sklearn.tree import DecisionTreeRegressor\ndt_reg = DecisionTreeRegressor(random_state=21)\ntest_model(dt_reg)","c1c2bc6f":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(n_estimators = 1000, random_state=51)\ntest_model(rf_reg)","d2a6d284":"from sklearn.ensemble import BaggingRegressor, GradientBoostingRegressor\nbr_reg = BaggingRegressor(n_estimators=1000, random_state=51)\ngbr_reg = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.1, loss='ls', random_state=51)","c6b60e2c":"test_model(br_reg)","f48d0853":"test_model(gbr_reg)","5e719705":"import xgboost\n#xgb_reg=xgboost.XGBRegressor()\nxgb_reg = xgboost.XGBRegressor(bbooster='gbtree', random_state=51)\ntest_model(xgb_reg)","826873e5":"svr_reg.fit(X_train,y_train)\ny_pred = np.exp(svr_reg.predict(X_test)).round(2)","08a951c4":"y_pred","bc9e23ac":"submit_test1 = pd.concat([test['Id'],pd.DataFrame(y_pred)], axis=1)\nsubmit_test1.columns=['Id', 'SalePrice']","c57a1272":"submit_test1","d22bb493":"submit_test1.to_csv('sample_submission.csv', index=False )","a054d6bb":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nparams = {'kernel': ['rbf'],\n         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n         'C': [0.1, 1, 10, 100, 1000],\n         'epsilon': [1, 0.2, 0.1, 0.01, 0.001, 0.0001]}\nrand_search = RandomizedSearchCV(svr_reg, param_distributions=params, n_jobs=-1, cv=11)\nrand_search.fit(X_train, y_train)\nrand_search.best_score_","46d36d41":"svr_reg= SVR(C=100, cache_size=200, coef0=0.0, degree=3, epsilon=0.01, gamma=0.0001,\n    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\ntest_model(svr_reg)","6f85295d":"svr_reg.fit(X_train,y_train)\ny_pred = np.exp(svr_reg.predict(X_test)).round(2)","53096232":"y_pred","536e422c":"submit_test3 = pd.concat([test['Id'],pd.DataFrame(y_pred)], axis=1)\nsubmit_test3.columns=['Id', 'SalePrice']","0420bc4a":"submit_test3.to_csv('sample_submission.csv', index=False)\nsubmit_test3","bc6b4405":"xgb2_reg=xgboost.XGBRegressor(n_estimators= 899,\n mon_child_weight= 2,\n max_depth= 4,\n learning_rate= 0.05,\n booster= 'gbtree')\n\ntest_model(xgb2_reg)","069e1866":"xgb2_reg.fit(X_train,y_train)\ny_pred_xgb_rs=xgb2_reg.predict(X_test)","a19a18d2":"np.exp(y_pred_xgb_rs).round(2)","d26fb2fd":"y_pred_xgb_rs = np.exp(xgb2_reg.predict(X_test)).round(2)\nxgb_rs_solution = pd.concat([test['Id'], pd.DataFrame(y_pred_xgb_rs)], axis=1)\nxgb_rs_solution.columns=['Id', 'SalePrice']\nxgb_rs_solution.to_csv('sample_submission.csv', index=False)","fc57d800":"xgb_rs_solution","7ad1906b":"# correlation Barplot\nplt.figure(figsize=(9,16))\ncorr_feat_series = pd.Series.sort_values(train.corrwith(train.SalePrice))\nsns.barplot(x=corr_feat_series, y=corr_feat_series.index, orient='h')","0647f379":"df_back1 = df_back","3e4bbec4":"df_back1.to_csv('df_for_feature_engineering.csv', index=False)","c209c45d":"list(corr_feat_series.index)","7ad3e8ee":"# Random Forest Regressor","fe52ed3b":"import sklearn.linear_model as linear_model\nlin_reg_2 = linear_model.LinearRegression()\n#lin_reg_2.fit(X_poly, y_train)\ntest_model(lin_reg_2,X_poly)","1b280944":" # Bagging & boosting","54139109":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nparams = {'kernel': ['linear', 'rbf', 'sigmoid'],\n         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n         'C': [0.1, 1, 10, 100, 1000],\n         'epsilon': [1, 0.2, 0.1, 0.01, 0.001, 0.0001]}","d1e9b413":"# Fitting Polynomial Regression to the dataset\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 2)\nX_poly = poly_reg.fit_transform(X_train)\npoly_reg.fit(X_poly, y_train)\nlin_reg_2 = LinearRegression()\n#lin_reg_2.fit(X_poly, y_train)\n#test_model(lin_reg_2,X_poly)","b80353a2":"## Show skewness of feature with distplot","22cbc915":"### Handling missing value of Bsmt feature ","ed027313":"### Handling missing value of Garage feature","24700b12":"# SVM Model Bulding","9e5ae0f5":"# Decision Tree Regressor","cda1031c":"# House Prices: Advanced Regression Techniques","c7400665":"# Support Vector Machine","409d9912":"### Handling missing value of remain feature","4eeb686a":"# Machine Learning Model Building","b38eaf40":"# Exploratory Data Analysis (EDA)","03f55c09":"rand_search_xgb.best_score_","e7f5b9f1":"# Cross Validation","77a03207":"## Import essential libraries","f6201c51":"rand_search_xgb.best_params_","c46bb317":"#### Handling missing value of LotFrontage feature","1d84c264":"# Hyperparameter Tuning ","d70eab37":"Predict the price of a house by its features. If you are a buyer or seller of the house but you don't know the exact price of the house, so supervised machine learning regression algorithms can help you to predict the price of the house just providing features of the target house.","24ddfa34":"# Feature Transformation","caf85057":"# SVM Model Bulding Hyperparameter Tuning ","6e84e9ee":"rand_search = RandomizedSearchCV(svr_reg, param_distributions=params, n_jobs=-1, cv=11)\nrand_search.fit(X_train, y_train)\nrand_search.best_params_","b36ba356":"# Linear Regression","40f9ef06":"1603\n0.12484\n2\n1d\nYour Best Entry \nYour submission scored 0.12484, which is an improvement of your previous score of 0.12612. Great job!\nTweet this!","be903bcc":"## Conver categorical code into order","3603285b":"## Goal of the Project","6e2a2b76":"Name\nSubmitted\nWait time\nExecution time\nScore\nsample_submission.csv\n3 days ago\n0 seconds\n0 seconds\n0.12612","23d9e67a":"# Feature Engineering \/ Selection to improve accuracy","b7129370":"# XGBoost parameter tuning","f1a431e7":"# XGBoost","f3e57392":"# Handling Missing Value","c0081907":"xgb2_reg = xgboost.XGBRegressor()\nparams_xgb = {\n    'max_depth': range(2, 20, 2),\n    'n_estimators': range(99, 2001, 80),\n    'learning_rate': [0.2, 0.1, 0.01, 0.05],\n    'booster': ['gbtree'],\n    'mon_child_weight': range(1, 8, 1)\n}\nrand_search_xgb = RandomizedSearchCV(estimator = xgb2_reg, \n                                     param_distributions=params_xgb, \n                                     n_iter=100, n_jobs=-1, cv=11, verbose=11, \n                                     random_state=51, return_train_score =True, scoring='neg_mean_absolute_error')\nrand_search_xgb.fit(X_train,y_train)","88ec8bc2":"## Load Data Set"}}