{"cell_type":{"89f15b86":"code","05bb4023":"code","718a5520":"code","17aa2d6f":"code","cdf3b584":"code","350b5230":"code","047d3ab3":"code","8776a013":"code","0c6c5dd8":"code","440c9520":"code","76d9ffa3":"code","aecd300c":"code","8beb2169":"code","2462dc24":"code","cd1fed42":"code","8261c195":"code","60e9cd97":"code","823dd030":"code","35a31e49":"code","cf3bae87":"code","3968f1ea":"code","4973edfc":"code","8102e2f1":"code","043186f3":"code","6df42aa9":"code","3666d87e":"code","ab830f96":"code","7fafa468":"code","052ef21d":"code","f33bd0dd":"code","d767ef41":"markdown","03011c59":"markdown","caf28ad1":"markdown","3b6be824":"markdown","10d603b9":"markdown","d8294369":"markdown","a9ea9b45":"markdown","38f63c04":"markdown","04513dd8":"markdown","ec8e8b4f":"markdown","98a32fb0":"markdown","d2a8d167":"markdown","a15ed095":"markdown","128efeab":"markdown","fa6b755b":"markdown","90376432":"markdown","46020927":"markdown","2400cf25":"markdown","362543be":"markdown","9b03118d":"markdown"},"source":{"89f15b86":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport sympy","05bb4023":"%%bash -e\nif ! [[ -f .\/linkern ]]; then\n  wget http:\/\/www.math.uwaterloo.ca\/tsp\/concorde\/downloads\/codes\/src\/co031219.tgz\n  echo 'c3650a59c8d57e0a00e81c1288b994a99c5aa03e5d96a314834c2d8f9505c724  co031219.tgz' | sha256sum -c\n  tar xf co031219.tgz\n  (cd concorde && CFLAGS='-Ofast -march=native -mtune=native -fPIC' .\/configure)\n  (cd concorde\/LINKERN && make -j && cp linkern ..\/..\/)\n  rm -rf concorde co031219.tgz\nfi","718a5520":"# %%bash -e\n# wget http:\/\/akira.ruc.dk\/~keld\/research\/LKH\/LKH-2.0.9.tgz\n# tar xvfz LKH-2.0.9.tgz\n# cd LKH-2.0.9\n# make","17aa2d6f":"def write_tsp(cities, filename, dim, name='traveling-santa-2018-prime-paths'):\n    with open(filename, 'w') as f:\n        f.write('NAME : %s\\n' % name)\n        f.write('COMMENT : %s\\n' % name)\n        f.write('TYPE : TSP\\n')\n        f.write('DIMENSION : %d\\n' % dim)\n        f.write('EDGE_WEIGHT_TYPE : EUC_2D\\n')\n        f.write('NODE_COORD_SECTION\\n')\n        for row in cities.itertuples():\n            f.write('%d %.11f %.11f\\n' % (row.idx, row.X, row.Y))\n        f.write('EOF\\n')","cdf3b584":"# def write_tsp1(cities, filename,dim, name='traveling-santa-2018-prime-paths'):\n#     with open(\"..\/working\/LKH-2.0.9\/{0}\".format(filename), 'w') as f:\n#         f.write('NAME : %s\\n' % name)\n#         f.write('COMMENT : %s\\n' % name)\n#         f.write('TYPE : TSP\\n')\n#         f.write('DIMENSION : %d\\n' % dim)\n#         f.write('EDGE_WEIGHT_TYPE : EUC_2D\\n')\n#         f.write('NODE_COORD_SECTION\\n')\n#         for row in cities.itertuples():\n#             f.write('%d %.11f %.11f\\n' % (row.idx, row.X, row.Y))\n#         f.write('EOF\\n')","350b5230":"# def write_parameters(filename):\n#     parameters = [\n#     (\"PROBLEM_FILE\", \"{0}.tsp\\n\".format(filename)),\n#     (\"OUTPUT_TOUR_FILE\", \"{0}_sol.csv\\n\".format(filename)),\n#     (\"SEED\", 2018),\n#     ('CANDIDATE_SET_TYPE', 'POPMUSIC'), #'NEAREST-NEIGHBOR', 'ALPHA'),\n#     ('INITIAL_PERIOD', 1000),\n#     ('MAX_TRIALS', 1000),\n#     ]\n#     with open(\"..\/working\/LKH-2.0.9\/{0}.par\".format(filename), 'w') as f:\n#         for param, value in parameters:\n#             f.write(\"{} = {}\\n\".format(param, value))\n#     #print(\"Parameters saved as\", filename)","047d3ab3":"cities = pd.read_csv('..\/input\/cities.csv')\ncities['idx'] = cities.index + 1 \ncities.head()","8776a013":"def plot_tour(tour, tg, cmap=mpl.cm.gist_rainbow):\n    fig, ax = plt.subplots(figsize=(25, 25))\n    ind = tour\n    plt.plot(tg.X[ind], tg.Y[ind], linewidth=1)","0c6c5dd8":"cities1k = cities\ncities1k.X = cities.X * 1000\ncities1k.Y = cities.Y * 1000","440c9520":"# Kmeans\nfrom sklearn.cluster import MiniBatchKMeans,Birch\ncoords = np.vstack((cities1k.X.values,cities1k.Y.values)).T\nsample_ind = np.random.permutation(len(coords))\nkmeans = MiniBatchKMeans(n_clusters = 36, batch_size = 50).fit(coords[sample_ind])\ncities1k.loc[:, 'kmeans']   = kmeans.predict(cities1k[['X', 'Y']])","76d9ffa3":"# GMM\nfrom sklearn.mixture import GaussianMixture\nmclusterer = GaussianMixture(n_components=36, tol=0.01, random_state=66, verbose=1)\ncities['gmm'] = mclusterer.fit_predict(cities[['X', 'Y']].values)\nnmax = cities.gmm.max()\nprint(\"{} clusters\".format(nmax+1))","aecd300c":"plt.style.use('seaborn')\nfig, ax = plt.subplots(ncols=1, nrows=2,figsize=(15, 5))\nplt.subplot(1,2,1)\nplt.scatter(cities1k.X.values, cities1k.Y.values,c=cities1k.gmm.values,s=0.3, cmap='nipy_spectral', alpha=0.9)\nplt.subplot(1,2,2)\nplt.scatter(cities1k.X.values, cities1k.Y.values,c=cities1k.kmeans.values,s=0.3, cmap='nipy_spectral', alpha=0.9)\nplt.show()","8beb2169":"# Concorde on Kmeans\nplt.style.use('seaborn')\nfig, ax = plt.subplots(ncols=6, nrows=6,figsize=(15, 15))\ncmap=mpl.cm.nipy_spectral\n\nfor i in range(cities1k.kmeans.max()+1):\n    citiesk = cities1k[cities1k.kmeans == i]\n    citiesk = citiesk.reset_index(drop=True)\n    citiesk['idx'] = citiesk.index + 1\n    dim = len(citiesk)\n    #citiesk.to_csv('citieskm{0}.csv'.format(i),index=False)\n    write_tsp(citiesk, 'citieskm{0}.tsp'.format(i),dim)\n#     write_tsp1(citiesk, 'citieskm{0}.tsp'.format(i),dim)\n#     write_parameters('citieskm{0}'.format(i))\n    plt.subplot(6,6,i+1)\n    plt.scatter(citiesk.X.values, citiesk.Y.values,s=0.5,color=cmap(i), alpha=0.99)  \n    plt.title(i)\n    plt.xticks([])\n    plt.yticks([])","2462dc24":"# Concorde on GMM\nplt.style.use('seaborn')\nfig, ax = plt.subplots(ncols=6, nrows=6,figsize=(15, 15))\ncmap=mpl.cm.nipy_spectral\n\nfor i in range(cities1k.kmeans.max()+1):\n    citiesk = cities1k[cities1k.gmm == i].reset_index()\n    citiesk['idx'] = citiesk.index + 1\n    dim = len(citiesk)\n    #citiesk.to_csv('citiesgmm{0}.csv'.format(i),index=False)\n    write_tsp(citiesk, 'citiesgmm{0}.tsp'.format(i),dim)\n#     write_tsp1(citiesk, 'citiesgmm{0}.tsp'.format(i),dim)\n#     write_parameters('citiesgmm{0}'.format(i))\n    plt.subplot(6,6,i+1)\n    plt.scatter(citiesk.X.values, citiesk.Y.values,s=0.5,color=cmap(i), alpha=0.99)  \n    plt.title(i)\n    plt.xticks([])\n    plt.yticks([])","cd1fed42":"#!cd LKH-2.0.9 && ls","8261c195":"print(cities1k.kmeans.max())\nprint(cities1k.gmm.max())","60e9cd97":"%%bash\nfor i in {0..36}\n    do\n    echo $i\n    time .\/linkern -K 1 -s 42 -S linkernkm$i.tour -R 999999999 -t 3 .\/citieskm$i.tsp >linkernkm$i.log\n    done","823dd030":"%%bash\nfor i in {0..36}\n    do\n    echo $i\n    time .\/linkern -K 1 -s 42 -S linkerngmm$i.tour -R 999999999 -t 3 .\/citiesgmm$i.tsp >linkerngmm$i.log\n    done","35a31e49":"#!cat .\/LKH-2.0.9\/citiesgmm4_sol.csv","cf3bae87":"# %%bash\n# cd .\/LKH-2.0.9\n# for i in {0..64}\n#     do\n#     echo $i\n#     timeout 20s .\/LKH citieskm$i.par\n#     done","3968f1ea":"def from_file(filename):  # from linkern's output or csv\n    seq = [int(x) for x in open(filename).read().split()[1:]]\n    return (seq if seq[-1] == 0 else (seq + [0]))","4973edfc":"# def read_tour(filename):\n#     tour = []\n#     for line in open(filename).readlines():\n#         line = line.replace('\\n', '')\n#         try:\n#             tour.append(int(line) - 1)\n#         except ValueError as e:\n#             pass  # skip if not a city id (int)\n#     return tour[:-1]","8102e2f1":"plt.style.use('seaborn')\nfig, ax = plt.subplots(ncols=1, nrows=1,figsize=(13, 9))\ncmap=mpl.cm.nipy_spectral\n\nfor i in range(cities1k.kmeans.max()+1):\n    citiesk = cities1k[cities1k.kmeans == i].reset_index()\n    citiesk['idx'] = citiesk.index + 1\n    tour = from_file('linkernkm{0}.tour'.format(i))\n #   plt.subplot(10,10,i+1)\n    plt.plot(citiesk.X[tour], citiesk.Y[tour], linewidth=1)  \n #   plt.title(i)\n #   plt.xticks([])\n #   plt.yticks([])\nplt.show()\n","043186f3":"plt.style.use('seaborn')\nfig, ax = plt.subplots(ncols=1, nrows=1,figsize=(13, 9))\ncmap=mpl.cm.nipy_spectral\n\nfor i in range(cities1k.gmm.max()+1):\n    citiesk = cities1k[cities1k.gmm == i].reset_index()\n    citiesk['idx'] = citiesk.index + 1\n    tour = from_file('linkerngmm{0}.tour'.format(i))\n #   plt.subplot(10,10,i+1)\n    plt.plot(citiesk.X[tour], citiesk.Y[tour], linewidth=1)  \n #   plt.title(i)\n #   plt.xticks([])\n #   plt.yticks([])\nplt.show()\n","6df42aa9":"# plt.style.use('seaborn')\n# fig, ax = plt.subplots(ncols=1, nrows=1,figsize=(13, 9))\n# cmap=mpl.cm.nipy_spectral\n\n# for i in range(cities1k.gmm.max()+1):\n#     citiesk = cities1k[cities1k.gmm == i].reset_index()\n#     citiesk['idx'] = citiesk.index + 1    \n#     tour = read_tour('..\/working\/LKH-2.0.9\/citiesgmm{0}_sol.csv'.format(i))\n#  #   plt.subplot(10,10,i+1)\n#     plt.plot(citiesk.X[tour], citiesk.Y[tour], linewidth=1)  \n#  #   plt.title(i)\n#  #   plt.xticks([])\n#  #   plt.yticks([])\n# plt.show()\n","3666d87e":"#@staticmethod\ndef score(cities, tour):\n    penalized = ~cities.CityId.isin(sympy.primerange(0, len(cities)))\n    df = cities.reindex(tour)\n    dist = np.hypot(df.X.diff(-1), df.Y.diff(-1))\n    penalty = 0.1 * dist[9::10] * penalized[tour[9::10]]\n    return dist.sum() + penalty.sum()","ab830f96":"scoretotal = 0\nfor i in range(cities1k.kmeans.max()+1):\n    citiesk = cities1k[cities1k.kmeans == i].reset_index()\n    citiesk['idx'] = citiesk.index + 1\n    tour = from_file('linkernkm{0}.tour'.format(i))\n    scorei = score(citiesk,tour)\n    scorei = scorei\/1000\n    scoretotal = scorei + scoretotal\nprint(scoretotal)","7fafa468":"scoretotal = 0\nfor i in range(cities1k.kmeans.max()+1):\n    citiesk = cities1k[cities1k.kmeans == i].reset_index()\n    citiesk['idx'] = citiesk.index + 1\n    tour = from_file('linkerngmm{0}.tour'.format(i))\n    scorei = score(citiesk,tour)\n    scorei = scorei\/1000\n    scoretotal = scorei + scoretotal\nprint(scoretotal)","052ef21d":"# scoretotal = 0\n# for i in range(cities1k.gmm.max()+1):\n#     citiesk = cities1k[cities1k.kmeans == i].reset_index()\n#     citiesk['idx'] = citiesk.index + 1\n#     tour = read_tour('..\/working\/LKH-2.0.9\/citiesgmm{0}_sol.csv'.format(i))\n#     scorei = score(citiesk,tour)\n#     scorei = scorei\/1000\n#     scoretotal = scorei + scoretotal\n# print(scoretotal)","f33bd0dd":"# tour.to_csv('submission.csv')\n# tour.score()","d767ef41":"# Write TSP for Concorde","03011c59":"# Run LKH on each GMM clusters ","caf28ad1":"# Clustering cities by GMM into 36 cluster","3b6be824":"# Plot Concord solution for every Kmeans cluster","10d603b9":"# Show sum of all Concord solution's scores for every GMM cluster","d8294369":"# Run Concorde on each GMM clusters ","a9ea9b45":"# Plot Clustering Results on Santa cities","38f63c04":"# Show sum of all Concord solution's scores for every Kmeans cluster","04513dd8":"# Show sum of all LKH solution's scores for every GMM cluster","ec8e8b4f":"# Prepare .tsp files for Concorde & LKH and plot each cluster seperatly - GMM","98a32fb0":"# Scale input","d2a8d167":"## Build concorde","a15ed095":"# Plot Concord solution for every GMM cluster","128efeab":"# Run Concorde on each Kmeans clusters ","fa6b755b":"# Prepare .tsp files for Concorde & LKH and plot each cluster seperatly - Kmeans","90376432":"# Clustering cities by Kmeans into 36 cluster","46020927":"# Build LKH","2400cf25":"# Write TSP for LKH","362543be":"This notebook shows how to build and run Clusterig Travel Sanat solver, by runnig Concorde and LKH on each cluster to find best path in each cluster.","9b03118d":"# Plot LKH solution for every GMM cluster"}}