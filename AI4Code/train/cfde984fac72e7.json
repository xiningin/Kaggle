{"cell_type":{"902a4744":"code","864215c4":"code","04f8f33b":"code","89c44443":"code","6ffd83b6":"code","50e58dbe":"code","16e844f5":"code","8ba1c6ab":"code","a440d161":"code","83c6ef9d":"code","31173f6f":"code","cf305469":"code","2d1a3d1c":"code","569bc358":"code","fa89d59c":"code","1a0da184":"code","e37debc1":"code","78bbcda9":"code","b5ce1d99":"code","ecfdb509":"code","3cc9ecbc":"code","0d72442a":"markdown","6d6074be":"markdown","039a5ce9":"markdown","32ff94b2":"markdown","2a4158ad":"markdown","e4da5021":"markdown","5d007eec":"markdown","9c1fbfba":"markdown"},"source":{"902a4744":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","864215c4":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","04f8f33b":"import seaborn as sns\nfrom matplotlib import pyplot as plt","89c44443":"train.describe()","6ffd83b6":"train = train.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)\ntrain['Sex'].replace({'male':0,'female':1},inplace=True)\ntrain['Embarked'].replace({'S':0,'C':1,'Q':3},inplace=True)\ntrain['Age'] = train['Age'].fillna(train['Age'].mean())\ntrain['Age'] = train['Age'].astype(int)\ntrain['Embarked'] = train['Embarked'].fillna(train['Embarked'].mean())\n\ntest = test.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)\ntest['Sex'].replace({'male':0,'female':1},inplace=True)\ntest['Embarked'].replace({'S':0,'C':1,'Q':3},inplace=True)\ntest['Embarked'] = test['Embarked'].fillna(test['Embarked'].mean())\ntest['Age'] = test['Age'].fillna(test['Age'].mean())\ntest['Age'] = test['Age'].astype(int)\ntest['Fare'] = test['Fare'].fillna(test['Fare'].mean())","50e58dbe":"train.describe()","16e844f5":"test.isnull().sum()","8ba1c6ab":"ax = sns.countplot(x=train[\"Sex\"], hue=train[\"Survived\"])\nplt.show()","a440d161":"X = train.drop(['Survived'], axis=1)","83c6ef9d":"y = train['Survived']","31173f6f":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nX_train, X_test, y_train ,y_test = train_test_split(X, y, test_size=0.35, random_state=69)","cf305469":"train.isnull().sum()","2d1a3d1c":"from sklearn.linear_model import LinearRegression","569bc358":"model1 = LinearRegression()\nmodel1.fit(X_train, y_train)\ncv_results = cross_val_score(model1, X, y, cv=9)\nm1score = (cv_results.mean())\n#m1score = model1.score(X_test, y_test)\nprint(m1score)","fa89d59c":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel2 = KNeighborsClassifier(n_neighbors=9)\nmodel2.fit(X_train, y_train)\ncv_results = cross_val_score(model2, X, y, cv=10)\nm2score = (cv_results.mean())\nprint((cv_results.mean()))","1a0da184":"from sklearn.linear_model import SGDClassifier\n\nmodel3 = SGDClassifier(loss=\"log\")\nmodel3.fit(X_train, y_train)\ncv_results = cross_val_score(model3, X, y, cv=9)\n#predict3 = model3.predict(X_test)\n#m3score = model3.score(X_test, y_test)\nm3score = cv_results.mean()\nprint(cv_results.mean())","e37debc1":"print(\"Linear Regression accuracy: \", m1score)\nprint(\"Nearest Neighbors accuracy: \", m2score)\nprint(\"SGDClassifier accuracy: \", m3score)","78bbcda9":"pred = model3.predict(test)","b5ce1d99":"sub = pd.DataFrame({\"PassengerId\": submission[\"PassengerId\"],\"Survived\":m3score})","ecfdb509":"sub","3cc9ecbc":" sub.to_csv('submission.csv',index=False)","0d72442a":"### Nearest Neighbors","6d6074be":"### LinearRegression","039a5ce9":"## Evaluating models","32ff94b2":"## Building models","2a4158ad":"## Loading Data","e4da5021":"### SGDClassifier","5d007eec":"## EDA","9c1fbfba":"## Generating submission data"}}