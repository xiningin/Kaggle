{"cell_type":{"a10be77d":"code","a4c383b9":"code","c55da1d1":"code","00e42e3c":"code","d8ba5f5a":"code","ed6e5bb4":"code","d043f65b":"code","e2f1fa73":"code","79944e24":"code","38531e72":"code","f3d0891e":"code","e76adaef":"code","7b6a3360":"code","0c0bcf89":"code","3e4fd194":"code","ebd59f38":"code","b6483443":"code","9ac4d0df":"code","89b0d6b7":"code","c50cc1f2":"code","fb4debee":"code","b29114c4":"code","1e1f97b4":"code","77d1a876":"code","97ad65d2":"code","42c1ab3c":"code","315769b9":"code","6603ab6e":"code","4c40a3a8":"code","3f00822f":"code","0247bc00":"code","44fc87a5":"code","2fa9fd10":"code","4613454e":"code","87a0e5b9":"code","e9b35efc":"code","9b7924db":"code","9f2871be":"code","e59c51a0":"code","f7649fde":"code","8c172bf8":"code","26155287":"code","81077b3a":"code","ade05b5e":"code","038d3313":"code","b56ac07a":"code","a5da046c":"code","34167280":"code","7d529e11":"code","8f536980":"code","5f1a9a8a":"code","478fc458":"code","b7f7aede":"code","2cabaa05":"code","a71fea4f":"code","4d363c9e":"code","21216194":"code","62f04ed4":"code","9f4afaff":"code","4a8ef345":"code","de1c1d3f":"code","fe8e74b1":"code","800afe48":"code","05478553":"code","50f0c1ea":"code","54705e56":"code","b9e14966":"code","5b995904":"code","fe295a7d":"code","f32debf2":"code","ec696444":"code","021a5200":"code","c9ce2bf9":"code","9eca1871":"code","6e53fa69":"code","b938d039":"code","4141f32c":"code","394eb166":"code","434417c2":"code","381cd446":"code","05ed509e":"code","46443404":"code","56d7fe6e":"code","c39dff56":"code","76297b04":"code","eb30b4be":"code","79779e09":"code","bafb3cd2":"code","6c8915e8":"markdown"},"source":{"a10be77d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4c383b9":"data_info = pd.read_csv('..\/input\/lending-club\/lending_club_info.csv',index_col='LoanStatNew')","c55da1d1":"print(data_info.loc['revol_util']['Description'])","00e42e3c":"def feat_info(col_name):\n    print(data_info.loc[col_name]['Description'])","d8ba5f5a":"feat_info('mort_acc')","ed6e5bb4":"import matplotlib.pyplot as plt\nimport seaborn as sns","d043f65b":"df = pd.read_csv('..\/input\/lending-club\/lending_club_loan_two.csv')","e2f1fa73":"df.info()","79944e24":"sns.countplot(x='loan_status',data=df)","38531e72":"plt.figure(figsize=(12,4))\nsns.distplot(df['loan_amnt'],kde=False,bins=40)\nplt.xlim(0,45000)","f3d0891e":"df.corr()","e76adaef":"plt.figure(figsize=(12,7))\nsns.heatmap(df.corr(),annot=True,cmap='viridis')\nplt.ylim(10, 0)","7b6a3360":"feat_info('installment')","0c0bcf89":"feat_info('loan_amnt')","3e4fd194":"sns.scatterplot(x='installment',y='loan_amnt',data=df,)","ebd59f38":"sns.boxplot(x='loan_status',y='loan_amnt',data=df)","b6483443":"df.groupby('loan_status')['loan_amnt'].describe()","9ac4d0df":"sorted(df['grade'].unique())","89b0d6b7":"sorted(df['sub_grade'].unique())","c50cc1f2":"sns.countplot(x='grade',data=df,hue='loan_status')","fb4debee":"plt.figure(figsize=(12,4))\nsubgrade_order = sorted(df['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=df,order = subgrade_order,palette='coolwarm') ","b29114c4":"f_and_g = df[(df['grade']=='G') | (df['grade']=='F')]\n\nplt.figure(figsize=(12,4))\nsubgrade_order = sorted(f_and_g['sub_grade'].unique())\nsns.countplot(x='sub_grade',data=f_and_g,order = subgrade_order,hue='loan_status')","1e1f97b4":"df['loan_status'].unique()","77d1a876":"df['loan_repaid'] = df['loan_status'].map({'Fully Paid':1,'Charged Off':0})","97ad65d2":"df[['loan_repaid','loan_status']]","42c1ab3c":"df.corr()['loan_repaid'].sort_values().drop('loan_repaid').plot(kind='bar')","315769b9":"df.head()","6603ab6e":"df.isna().sum()","4c40a3a8":"100* df.isnull().sum()\/len(df)","3f00822f":"feat_info('emp_title')\nprint('\\n')\nfeat_info('emp_length')","0247bc00":"df['emp_title'].nunique()","44fc87a5":"df['emp_title'].value_counts()","2fa9fd10":"df = df.drop('emp_title',axis=1)","4613454e":"sorted(df['emp_length'].dropna().unique())","87a0e5b9":"emp_length_order = [ '< 1 year',\n                      '1 year',\n                     '2 years',\n                     '3 years',\n                     '4 years',\n                     '5 years',\n                     '6 years',\n                     '7 years',\n                     '8 years',\n                     '9 years',\n                     '10+ years']","e9b35efc":"plt.figure(figsize=(12,4))\n\nsns.countplot(x='emp_length',data=df,order=emp_length_order)","9b7924db":"plt.figure(figsize=(12,4))\nsns.countplot(x='emp_length',data=df,order=emp_length_order,hue='loan_status')","9f2871be":"emp_co = df[df['loan_status']==\"Charged Off\"].groupby(\"emp_length\").count()['loan_status']","e59c51a0":"emp_fp = df[df['loan_status']==\"Fully Paid\"].groupby(\"emp_length\").count()['loan_status']","f7649fde":"emp_len = emp_co\/emp_fp","8c172bf8":"emp_len","26155287":"emp_len.plot(kind='bar')","81077b3a":"df = df.drop('emp_length',axis=1)","ade05b5e":"df.isnull().sum()","038d3313":"df['purpose'].head(10)","b56ac07a":"df['title'].head(10)","a5da046c":"df = df.drop('title',axis=1)","34167280":"feat_info('mort_acc')","7d529e11":"df['mort_acc'].value_counts()","8f536980":"print(\"Correlation with the mort_acc column\")\ndf.corr()['mort_acc'].sort_values()","5f1a9a8a":"print(\"Mean of mort_acc column per total_acc\")\ndf.groupby('total_acc').mean()['mort_acc']","478fc458":"total_acc_avg = df.groupby('total_acc').mean()['mort_acc']","b7f7aede":"total_acc_avg[2.0]","2cabaa05":"def fill_mort_acc(total_acc,mort_acc):\n    '''\n    Accepts the total_acc and mort_acc values for the row.\n    Checks if the mort_acc is NaN , if so, it returns the avg mort_acc value\n    for the corresponding total_acc value for that row.\n    \n    total_acc_avg here should be a Series or dictionary containing the mapping of the\n    groupby averages of mort_acc per total_acc values.\n    '''\n    if np.isnan(mort_acc):\n        return total_acc_avg[total_acc]\n    else:\n        return mort_acc","a71fea4f":"df['mort_acc'] = df.apply(lambda x: fill_mort_acc(x['total_acc'], x['mort_acc']), axis=1)","4d363c9e":"df.isnull().sum()","21216194":"df = df.dropna()\ndf.isnull().sum()","62f04ed4":"df.select_dtypes(['object']).columns","9f4afaff":"df['term'].value_counts()","4a8ef345":"df['term'] = df['term'].apply(lambda term: int(term[:3]))","de1c1d3f":"df = df.drop('grade',axis=1)","fe8e74b1":"subgrade_dummies = pd.get_dummies(df['sub_grade'],drop_first=True)","800afe48":"df = pd.concat([df.drop('sub_grade',axis=1),subgrade_dummies],axis=1)","05478553":"df.columns","50f0c1ea":"df.select_dtypes(['object']).columns","54705e56":"dummies = pd.get_dummies(df[['verification_status', 'application_type','initial_list_status','purpose' ]],drop_first=True)\ndf = df.drop(['verification_status', 'application_type','initial_list_status','purpose'],axis=1)\ndf = pd.concat([df,dummies],axis=1)","b9e14966":"df['home_ownership'].value_counts()","5b995904":"df['home_ownership']=df['home_ownership'].replace(['NONE', 'ANY'], 'OTHER')\n\ndummies = pd.get_dummies(df['home_ownership'],drop_first=True)\ndf = df.drop('home_ownership',axis=1)\ndf = pd.concat([df,dummies],axis=1)","fe295a7d":"df['zip_code'] = df['address'].apply(lambda address:address[-5:])","f32debf2":"dummies = pd.get_dummies(df['zip_code'],drop_first=True)\ndf = df.drop(['zip_code','address'],axis=1)\ndf = pd.concat([df,dummies],axis=1)","ec696444":"df = df.drop('issue_d',axis=1)","021a5200":"df['earliest_cr_year'] = df['earliest_cr_line'].apply(lambda date:int(date[-4:]))\ndf = df.drop('earliest_cr_line',axis=1)\ndf.select_dtypes(['object']).columns","c9ce2bf9":"from sklearn.model_selection import train_test_split","9eca1871":"df = df.drop('loan_status',axis=1)","6e53fa69":"X = df.drop('loan_repaid',axis=1).values\ny = df['loan_repaid'].values","b938d039":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=101)","4141f32c":"from sklearn.preprocessing import MinMaxScaler","394eb166":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","434417c2":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation,Dropout\nfrom tensorflow.keras.constraints import max_norm","381cd446":"model = Sequential()\n# input layer\nmodel.add(Dense(78,  activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(39, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# hidden layer\nmodel.add(Dense(19, activation='relu'))\nmodel.add(Dropout(0.2))\n\n# output layer\nmodel.add(Dense(units=1,activation='sigmoid'))\n\n# Compile model\nmodel.compile(loss='binary_crossentropy', optimizer='adam')","05ed509e":"model.fit(x=X_train, \n          y=y_train, \n          epochs=25,\n          batch_size=256,\n          validation_data=(X_test, y_test), \n          )","46443404":"losses = pd.DataFrame(model.history.history)","56d7fe6e":"losses[['loss','val_loss']].plot()","c39dff56":"from sklearn.metrics import classification_report,confusion_matrix\npredictions = model.predict_classes(X_test)\nprint(classification_report(y_test,predictions))","76297b04":"confusion_matrix(y_test,predictions)","eb30b4be":"import random\nrandom.seed(101)\nrandom_ind = random.randint(0,len(df))\n\nnew_customer = df.drop('loan_repaid',axis=1).iloc[random_ind]\nnew_customer","79779e09":"model.predict_classes(new_customer.values.reshape(1,78))","bafb3cd2":"df.iloc[random_ind]['loan_repaid']","6c8915e8":"The implementation of the code includes-\n1. Exploratory data analysis \n2. Data PreProcessing\n3. Normalising the data\n4. Creating a model \n5. Evaluating Model's performance."}}