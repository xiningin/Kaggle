{"cell_type":{"b775d0e9":"code","a71081e3":"code","154ec928":"code","05a015fb":"markdown","9e11bd88":"markdown","366e7f33":"markdown"},"source":{"b775d0e9":"import timeit\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","a71081e3":"def numericalCategoricalSplit(df):\n    numerical_features=df.select_dtypes(exclude=['object']).columns\n    categorical_features=df.select_dtypes(include=['object']).columns\n    numerical_data=df[numerical_features]\n    categorical_data=df[categorical_features]\n    return(numerical_data,categorical_data)\n\n\n\ndef nullFind(df):\n    null_numerical=pd.isnull(df).sum().sort_values(ascending=False)\n    #null_numerical=null_numerical[null_numerical>=0]\n    null_categorical=pd.isnull(df).sum().sort_values(ascending=False)\n   # null_categorical=null_categorical[null_categorical>=0]\n    return(null_numerical,null_categorical)\n\n\n\ndef removeNullRows(df,few_null_col_list):\n    for col in few_null_col_list:\n        df=df[df[col].notnull()]\n    return(df)\n    \n \n\n\ndef EDA(df,labels,target_variable_name,\n        data_summary_figsize=(16,16),corr_matrix_figsize=(16,16),\n        data_summary_figcol=\"Reds_r\",corr_matrix_figcol='Blues',\n        corr_matrix_annot=False,\n        pairplt_col='all',pairplt=False,\n        feature_division_figsize=(12,12)):\n    \n    start_time = timeit.default_timer()\n    \n    #for converting class labels into integer values\n    if df[target_variable_name].dtype=='object':\n        class_labels=df[target_variable_name].unique().tolist()\n        class_labels=[x for x in class_labels if type(x)==str]\n        class_labels=[x for x in class_labels if str(x) != 'nan']\n      \n        for i in range(len(class_labels)):\n            df[target_variable_name][df[target_variable_name]==class_labels[i]]=i\n            \n            \n    df_orig=df\n    print('The data looks like this: \\n',df_orig.head())\n    print('\\nThe shape of data is: ',df_orig.shape)\n    \n    #To check missing values\n    print('\\nThe missing values in data are: \\n',pd.isnull(df_orig).sum().sort_values(ascending=False))\n    sns.heatmap(pd.isnull(df_orig))\n    plt.title(\"Missing Values Summary\", fontsize=(15), color=\"red\")\n    \n    \n   \n\n    print('\\nThe summary of data is: \\n',df_orig.describe())\n    plt.figure(figsize=data_summary_figsize)\n    sns.heatmap(df_orig.describe()[1:].transpose(), annot= True, fmt=\".1f\",\n                linecolor=\"black\", linewidths=0.3,cmap=data_summary_figcol)\n    plt.title(\"Data Summary\", fontsize=(15), color=\"red\")\n    \n      \n   \n\n    \n    print('\\nSome useful data information: \\n')\n    print(df_orig.info())\n    print('\\nThe columns in data are: \\n',df_orig.columns.values)\n    \n    \n    \n   \n    null_cutoff=0.5\n\n    numerical=numericalCategoricalSplit(df_orig)[0]\n    categorical=numericalCategoricalSplit(df_orig)[1]\n    null_numerical=nullFind(numerical)[0]\n    null_categorical=nullFind(categorical)[1]\n    null=pd.concat([null_numerical,null_categorical])\n    null_df=pd.DataFrame({'Null_in_Data':null}).sort_values(by=['Null_in_Data'],ascending=False)\n    null_df_many=(null_df.loc[(null_df.Null_in_Data>null_cutoff*len(df_orig))])\n    null_df_few=(null_df.loc[(null_df.Null_in_Data!=0)&(null_df.Null_in_Data<null_cutoff*len(df_orig))])\n\n    many_null_col_list=null_df_many.index\n    few_null_col_list=null_df_few.index\n    \n    #remove many null columns\n    df_orig.drop(many_null_col_list,axis=1,inplace=True)\n    \n    df_wo_null=(removeNullRows(df_orig,few_null_col_list))\n    \n    \n    if df_wo_null[target_variable_name].dtype=='object':\n        df_wo_null[target_variable_name] =df_wo_null[target_variable_name].astype(str).astype(int)\n   \n    \n    df=df_wo_null[df_wo_null.select_dtypes(exclude=['object']).columns]\n   \n    \n    #Check correlation matrix\n    plt.figure(figsize=corr_matrix_figsize)\n    sns.heatmap(df.corr(),cmap=corr_matrix_figcol,annot=corr_matrix_annot) \n    \n    \n    col = df.columns.values\n    number_of_columns=len(col)\n    number_of_rows = len(col)-1\/number_of_columns\n    \n    \n    #To check Outliers\n    plt.figure(figsize=(number_of_columns,number_of_rows))\n    \n    for i in range(0,len(col)):\n        #plt.subplot(number_of_rows + 1,number_of_columns,i+1)\n        if number_of_columns%2==0:\n            plt.subplot(number_of_columns\/2,2,i+1)   \n            sns.set_style('whitegrid')\n            sns.boxplot(df[col[i]],color='green',orient='h')\n            plt.tight_layout()\n        else:\n            plt.subplot((number_of_columns+1)\/2,2,i+1)\n            sns.set_style('whitegrid')\n            sns.boxplot(df[col[i]],color='green',orient='h')\n            plt.tight_layout()\n    \n    \n    #To check distribution-Skewness\n    for i in range(0,len(col)):\n        fig,axis = plt.subplots(1, 2,figsize=(16, 5))\n        sns.distplot(df_orig[col[i]],kde=True,ax=axis[0]) \n        axis[0].axvline(df_orig[col[i]].mean(),color = \"k\",linestyle=\"dashed\",label=\"MEAN\")\n        axis[0].legend(loc=\"upper right\")\n        axis[0].set_title('distribution of {}. Skewness = {:.4f}'.format(col[i] ,df_orig[col[i]].skew()))\n        \n        sns.violinplot(x=target_variable_name, y=col[i], data=df_orig, ax=axis[1], inner='quartile')\n        axis[1].set_title('violin of {}, split by target'.format(col[i]))\n    \n       \n    \n    #to construct pairplot\n    if (pairplt==True) and (pairplt_col!='all'):\n        sns.pairplot(data=df, vars=pairplt_col, hue=target_variable_name)\n    elif (pairplt==True) and (pairplt_col=='all'):\n        sns.pairplot(data=df, vars=df.columns.values, hue=target_variable_name)\n   \n    \n    \n    #Proportion of target variable in dataset   \n    \n    st=df[target_variable_name].value_counts().sort_index()\n    print('\\nThe target variable is divided into: \\n',st) #how many belong to each class of target variable\n    \n    \n    \n    plt.figure(figsize=feature_division_figsize)\n    plt.subplot(121)\n    ax = sns.countplot(y = df_orig[target_variable_name],\n                     \n                       linewidth=1,\n                       edgecolor=\"k\"*2)\n    for i,j in enumerate(st):\n        ax.text(.7,i,j,weight = \"bold\",fontsize = 27)\n    plt.title(\"Count for target variable in datset\")\n    \n    \n    plt.subplot(122)\n    plt.pie(st,\n            labels=labels,\n            autopct=\"%.2f%%\",wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"})\n    my_circ = plt.Circle((0,0),.7,color = \"white\")\n    plt.gca().add_artist(my_circ)\n    plt.subplots_adjust(wspace = .2)\n    plt.title(\"Proportion of target variable in dataset\")\n    \n    \n    print('\\nThe numerical features are: \\n',df_wo_null.select_dtypes(exclude=['object']).columns.tolist())\n    print('\\nThe categorical features are: \\n',df_wo_null.select_dtypes(include=['object']).columns.tolist())\n    \n    #Proportion of categorical variables in dataset   \n    if len(df_wo_null.select_dtypes(include=['object']).columns.tolist())>=1:\n        for cat_feat in df_wo_null.select_dtypes(include=['object']).columns.tolist():\n            \n            ct=df_wo_null.select_dtypes(include=['object'])[cat_feat].value_counts().sort_values(ascending=False)\n            print('\\nThe categorical variable is divided into: \\n',ct) #how many belong to each class of target variable\n            \n            \n            if (ct.index.size)<50:\n                plt.figure(figsize=feature_division_figsize)\n                plt.subplot(121)\n                ax = sns.countplot(y = df_wo_null.select_dtypes(include=['object'])[cat_feat],\n                                  \n                                   linewidth=1,\n                                   edgecolor=\"k\"*2)\n                for i,j in enumerate(ct):\n                    ax.text(.7,i,j,weight = \"bold\",fontsize = 27)\n                plt.title(\"Count for categorical variable in datset\")\n                \n                \n                plt.subplot(122)\n                plt.pie(ct,\n                        labels=df_wo_null.select_dtypes(include=['object'])[cat_feat].unique().tolist(),\n                        autopct=\"%.2f%%\",wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"})\n                my_circ = plt.Circle((0,0),.7,color = \"white\")\n                plt.gca().add_artist(my_circ)\n                plt.subplots_adjust(wspace = .2)\n                plt.title(\"Proportion of categorical variable in dataset\")\n            else:\n                print('\\nThe categorical variable %s has too many divisions to plot \\n'%cat_feat)\n            continue\n    elapsed = timeit.default_timer() - start_time\n    print('\\nExecution Time for EDA: %.2f minutes'%(elapsed\/60))\n    \n    \n    return df_wo_null,df_wo_null.select_dtypes(exclude=['object']).columns.tolist(),df_wo_null.select_dtypes(include=['object']).columns.tolist()","154ec928":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf.drop(['PassengerId','Ticket'],axis=1,inplace=True)\nlabels=[\"not survived\",\"survived\"]\ntarget_variable_name='Survived'\ndf_processed,num_features,cat_features=EDA(df,labels,\n                                         target_variable_name,\n                                         data_summary_figsize=(6,6),\n                                         corr_matrix_figsize=(6,6),\n                                         corr_matrix_annot=True,\n                                         pairplt=True)","05a015fb":"# 2. AutoEDA Function","9e11bd88":"# 1. Necessary Imports","366e7f33":"# 3. Titanic Dataset"}}