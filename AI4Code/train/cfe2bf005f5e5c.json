{"cell_type":{"ad06e329":"code","71028afc":"code","a943a05c":"code","951c51b1":"code","1d89f192":"code","b5d18e2c":"code","d1ea95cf":"code","3d305558":"code","36377255":"code","7603711e":"code","4b109eab":"code","b134c75b":"code","e0aa8dc2":"code","18e0a508":"code","a95b1ef2":"code","64b34c94":"code","42ffe78e":"markdown"},"source":{"ad06e329":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport pandas as pd\nimport seaborn  as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patch\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nData=pd.read_csv(\"..\/input\/vgsales.csv\")\n\n# Any results you write to the current directory are saved as output.","71028afc":"Data.head()","a943a05c":"#Let's see PLatform First\n#Wii is most used platform\nPlatform=Data[\"Platform\"]\nplt.figure(figsize=(8,6))\nsns.barplot(Platform.value_counts(),Platform.unique())\nplt.xlabel(\"Platform\")\nplt.ylabel(\"Total No. of games\")\nplt.show()","951c51b1":"#Let's see the total no of games produced in each year\n#Year 2009 was most successful year\nplt.figure(figsize=(25,15))\nYear=Data[\"Year\"]\ntype(Year[0])\nYear=Year.value_counts()\nYear=pd.DataFrame(Year)\nplt.bar(Year.index,Year[\"Year\"])\nplt.xticks(Year.index)\nplt.xlabel(\"Total no of games produced\")\nplt.ylabel(\"Year\")\nplt.show()","1d89f192":"#Let's have some Genre\n#So Sports games are produced in highest numbers\nGenre=Data[\"Genre\"]\nplt.figure(figsize=(12,10))\nsns.barplot(Genre.unique(),Genre.value_counts(),palette=\"deep\")\nplt.show()","b5d18e2c":"# Here we have bar chart of companies with their total number of games produced.\n#So EA games top the chart.\n#Here we are showing only company names who has published more than 40 games.\nPublisher=Data[\"Publisher\"]\nPublisher=Publisher.dropna()\nlen(Publisher.unique())\nPublisher_Data=pd.DataFrame(Publisher.value_counts())\nPublisher_Data.columns=[\"Total no of Games\"]\nlen(Publisher_Data[Publisher_Data[\"Total no of Games\"]>40])\nPublisher_Data_51=Publisher_Data[Publisher_Data[\"Total no of Games\"]>40]\nplt.figure(figsize=(10,15))\nsns.barplot(Publisher_Data_51[\"Total no of Games\"],Publisher_Data_51.index,palette=\"deep\")\nplt.show()","d1ea95cf":"#Lets find number of games who sold more than 100k copies in each year\n#Total 1431 different type of games of more than 100k copies sold each.\nx_data=[]\nYear1=[]\nfor i,j in Data.groupby(\"Year\"):\n    x_data.append([j.shape[0]])\n    Year1.append(i)\nplt.figure(figsize=(25,10))\nplt.plot(Year1,x_data,color=\"brown\")\nplt.xlabel(\"Year\")\nplt.xticks(Year.index)\nplt.ylabel(\"Total no of Games who sold more than 100k copies\")\nplt.show()","3d305558":"x_data=[]\nfor i,j in Data.groupby(\"Year\"):\n    z=[]\n    #print(i)\n    #print(j[\"Genre\"].value_counts())\n    z=[i,j[\"Genre\"].value_counts().index[0],j[\"Genre\"].value_counts()[0]]\n    #x_data.append({j[\"Genre\"].value_counts().index[0]:j[\"Genre\"].value_counts()[0]})\n    x_data.append(z)\nx_data1=pd.DataFrame(x_data)\nx_data1.columns=[\"Year\",\"Genre\",\"Total no of games\"]\n","36377255":"#Here we have created barchart of game genre which produced maximum number of games in a particula year.\n#Nowadays action movie are more famous.\nx_data1[\"Year\"]=[int(i) for i in x_data1[\"Year\"] ]\nx_data2=x_data1\nx_data2=x_data2.drop(x_data2.tail(2).index)\nx_data2=x_data2.reindex()\n#x_data2.loc[x_data2[\"Genre\"==\"Role-Playing\",:]]\nfig, ax = plt.subplots(figsize=(15, 10))\n\nax.bar(x_data2[\"Year\"],x_data2[\"Total no of games\"],color=\"y\")\ni=0\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x(),height+20,x_data2[\"Genre\"][i],rotation=90)\n    i=i+1\nplt.xticks(x_data2[\"Year\"],rotation=90)\nplt.ylabel(\"Total no. of games\")\nplt.show()","7603711e":"#Here we have created the barchart of companies who produced most number of successful games in a particular year.\nx_data=[]\nfor i,j in Data.groupby(\"Year\"):\n    z=[]\n    z=[i,j[\"Publisher\"].value_counts().index[0],j[\"Publisher\"].value_counts()[0]]\n    x_data.append(z)\nx_data1=pd.DataFrame(x_data)\nx_data1.columns=[\"Year\",\"Publisher\",\"Total no of games\"]   \nx_data1\n\nx_data1[\"Year\"]=[int(i) for i in x_data1[\"Year\"] ]\nx_data2=x_data1\nx_data2=x_data2.drop(x_data2.tail(2).index)\nx_data2=x_data2.reindex()\nfig, ax = plt.subplots(figsize=(15, 10))\nax.bar(x_data2[\"Year\"],x_data2[\"Total no of games\"],color=\"g\",alpha=0.6)\ni=0\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x(),height+10,x_data2[\"Publisher\"][i],rotation=90)\n    i=i+1\nplt.xticks(x_data2[\"Year\"],rotation=90)\nplt.ylabel(\"Total no. of games\")\nplt.show()","4b109eab":"#These DataFrames contains list of games who sold maximum copies each year\n\n#US\nData_NA=pd.DataFrame(columns=Data.columns)\nfor i,j in Data.groupby(\"Year\"):\n    z=pd.DataFrame(j[j[\"NA_Sales\"]==max(j[\"NA_Sales\"])])\n    Data_NA=pd.concat([Data_NA,z],axis=0)\nData_NA=Data_NA.loc[:,[\"Year\",\"Name\",\"NA_Sales\"]]\nData_NA.columns=[\"Year\",\"NA-Game Names\",\"NA_Sales\"]\nData_NA=Data_NA.set_index(\"Year\")\nData_NA\n\n#Europe\nData_EU=pd.DataFrame(columns=Data.columns)\nfor i,j in Data.groupby(\"Year\"):\n    z=pd.DataFrame(j[j[\"EU_Sales\"]==max(j[\"EU_Sales\"])])\n    Data_EU=pd.concat([Data_EU,z],axis=0)\nData_EU=Data_EU.loc[:,[\"Year\",\"Name\",\"EU_Sales\"]]\nData_EU.columns=[\"Year\",\"EU-Game Names\",\"EU_Sales\"]\nData_EU=Data_EU.set_index(\"Year\")\nData_EU\n\n#Japan    \nData_JP=pd.DataFrame(columns=Data.columns)\nfor i,j in Data.groupby(\"Year\"):\n    z=pd.DataFrame(j[j[\"JP_Sales\"]==max(j[\"JP_Sales\"])])\n    Data_JP=pd.concat([Data_JP,z],axis=0)\nData_JP=Data_JP.loc[:,[\"Year\",\"Name\",\"JP_Sales\"]]\nData_JP.columns=[\"Year\",\"JP-Game Names\",\"JP_Sales\"]\nData_JP=Data_JP.set_index(\"Year\")\nData_JP\n\n#Others\nData_Others=pd.DataFrame(columns=Data.columns)\nfor i,j in Data.groupby(\"Year\"):\n    z=pd.DataFrame(j[j[\"Other_Sales\"]==max(j[\"Other_Sales\"])])\n    Data_Others=pd.concat([Data_Others,z],axis=0)\nData_Others=Data_Others.loc[:,[\"Year\",\"Name\",\"Other_Sales\"]]\nData_Others.columns=[\"Year\",\"Others-Game Names\",\"Other_Sales\"]\nData_Others=Data_Others.set_index(\"Year\")\nData_Others\n#World\nData_Global=pd.DataFrame(columns=Data.columns)\nfor i,j in Data.groupby(\"Year\"):\n    z=pd.DataFrame(j[j[\"Global_Sales\"]==max(j[\"Global_Sales\"])])\n    Data_Global=pd.concat([Data_Global,z],axis=0)\nData_Global=Data_Global.loc[:,[\"Year\",\"Name\",\"Global_Sales\"]]\nData_Global.columns=[\"Year\",\"Global-Game Names\",\"Global_Sales\"]\nData_Global=Data_Global.set_index(\"Year\")\n\n\n","b134c75b":"Data_NA","e0aa8dc2":"Data_EU","18e0a508":"Data_JP","a95b1ef2":"Data_Others","64b34c94":"Data_Global\n","42ffe78e":"**Conclusion**\n\nAction games are more famous nowadays,Namco Bandai Company is producing maximum number of successful games,2009 was most successful year for game community."}}