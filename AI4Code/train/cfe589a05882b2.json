{"cell_type":{"03405099":"code","e8ed6c78":"code","73ed7139":"code","653bf7c5":"code","dcda5335":"code","14d4878b":"code","8720452e":"code","3981e280":"code","e1be751b":"code","d23f8754":"code","e3251e6e":"code","7343c44c":"code","88e29963":"code","e1a4c4b8":"code","dca32fed":"code","fcc87853":"code","a4fa0998":"code","a47e85a6":"code","c8566412":"code","11c5101f":"markdown","40cfd6bb":"markdown","78811472":"markdown","f6f4cdf8":"markdown","80308235":"markdown","a16e1608":"markdown","f4d11e45":"markdown","e583dab9":"markdown","1038e267":"markdown","631b8187":"markdown","e1c09a3a":"markdown","d6f616e0":"markdown","f93657c5":"markdown","8e2194cf":"markdown","2fd24fcc":"markdown","3394b5ad":"markdown"},"source":{"03405099":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8ed6c78":"import pandas as pd, numpy as np, os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', None)\n\nPAL = ['#7bed7b','#ffdc52','#61caff', '#b4b4b4','#ff3b17'] # green,yellow,blue,grey,orange,\n%matplotlib inline","73ed7139":"#funtion to clean plot\ndef setup_plot(w=1,h=1,rows=1,cols=1,X_label='',y_label='',dpi=600):\n    '''\n    w: width of the figsize parameter of matplotlib.pyplot\n    h: height of the figsize parameter of matplotlib.pyplot\n    rows: numbers of rows in gridspec\n    cols: numbers of cols in gridspec\n    X_label: Label of the x-axis\n    y_label: Label of the y-axis\n    dpi: to set dpi for the figure.dpi\n    Return axes (only single axes for now, still working on the multiple axes)\n    '''\n    #setting plot theme\n    plt.rcParams['figure.dpi'] = dpi\n\n    fig = plt.figure(figsize=(w,h), facecolor='#f6f5f5')\n    gs = fig.add_gridspec(rows, cols)\n    gs.update(wspace=1.5, hspace=0.05)\n\n    background_color = \"#ffffff\"\n    sns.set_palette(PAL)\n    \n    # making single ax\n    ax_dict = {}\n    for row in range(rows):\n        for col in range(cols):\n            ax_dict[\"ax%s%s\" %(row,col)] = fig.add_subplot(gs[row, col])\n\n    locals().update(ax_dict)\n\n    #setting theme for every ax in local()\n    for row in range(rows):\n        for col in range(cols):\n                    \n            for s in [\"right\", \"top\"]:\n                locals()['ax' + str(row) + str(col)].spines[s].set_visible(False)\n                \n            locals()['ax' + str(row) + str(col)].set_facecolor(background_color)\n\n            locals()['ax' + str(row) + str(col)].set_xlabel(X_label,fontsize=3,)\n            locals()['ax' + str(row) + str(col)].set_ylabel(y_label,fontsize=3,)\n\n            locals()['ax' + str(row) + str(col)].tick_params(labelsize=3, width=0.5, length=1.5)\n            locals()['ax' + str(row) + str(col)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.3)\n            locals()['ax' + str(row) + str(col)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.3)\n\n    return locals()['ax' + str(row) + str(col)]","653bf7c5":"data = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')","dcda5335":"data.head(3)","14d4878b":"_df_ = data[data.Q3 == 'India'] # my country\nprint(_df_.shape)","8720452e":"_q = str(data.iloc[0,1])\n_df = data.iloc[1:,1]\ngender = data.iloc[1:,2]\n_df = pd.concat([_df,gender],axis=1)\n\n_df['sort'] = _df['Q1'].str.extract('(^[0-9]{2})', expand=False).astype(int)\n_df.sort_values('sort',inplace=True, ascending=True)\n_df = _df.drop('sort', axis=1)\n\nq1 = sns.histplot(x = _df.Q1,ax=setup_plot(w=4,h=1,X_label='Age Group',y_label='Count'),zorder=4,linewidth=0.2,hue=_df.Q2,multiple='dodge')\nplt.title(_q,fontsize=4, weight='bold',ha='left',loc='left')\n\nmean=_df['Q1'].value_counts().values.mean()\nmedian=np.median(_df['Q1'].value_counts().values)\n\nq1.axhline(mean, color='b', linestyle='--',linewidth=0.5)\nq1.axhline(median, color='g', linestyle='-',linewidth=0.5)\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nplt.text(xmin,ymax+140,'Age-group of  All Countries',fontsize=3,ha='left')\n# plt.xticks(rotation=45)\n\nq1.legend(['Mean','Median','NonBinary','Prefer to self-describe','Prefer not to say','Women','Man'], facecolor='#D8D8D8', edgecolor='#f6f5f5', fontsize=3, bbox_to_anchor=(1, 1.3), loc='upper right')\n\nplt.show()\n\ndel gender, _df\ngc.collect()\n","3981e280":"_q = 'What is your age?'\ngender = data.iloc[1:,1]\n\n_x = gender.value_counts().values\n_y = gender.value_counts().index\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=2,X_label='Counts',y_label='Age'),zorder=2,linewidth=0.2,color='#36ffd2',ec='black')\nplt.title(_q,fontsize=4,)\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\n\nplt.text(xmax+1000,ymax,'Age Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/gender.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 100\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n\ndel gender, _x, _y\ngc.collect()","e1be751b":"_q = str(data.iloc[0,3])\ncountry = data.iloc[1:,3]\n\n_x = country.value_counts().values\n_y = ['India', 'United States of America', 'Other', 'Japan', 'China',\n       'Brazil', 'Russia', 'Nigeria',\n       'United Kingdom', 'Pakistan',\n       'Egypt', 'Germany', 'Spain', 'Indonesia', 'Turkey', 'France',\n       'South Korea', 'Taiwan', 'Canada', 'Bangladesh', 'Italy', 'Mexico',\n       'Viet Nam', 'Australia', 'Kenya', 'Colombia', 'Poland',\n       'Iran, Islamic Republic of...', 'Ukraine', 'Singapore', 'Argentina',\n       'Malaysia', 'Netherlands', 'South Africa', 'Morocco', 'Israel',\n       'Thailand', 'Portugal', 'Peru', 'United Arab Emirates', 'Tunisia',\n       'Philippines', 'Sri Lanka', 'Greece', 'Chile', 'Ghana', 'Saudi Arabia',\n       'Ireland', 'Sweden', 'Hong Kong (S.A.R.)', 'Nepal', 'Switzerland',\n       'confidential', 'Belgium', 'Czech Republic',\n       'Romania', 'Austria', 'Belarus', 'Ecuador', 'Denmark', 'Uganda',\n       'Kazakhstan', 'Norway', 'Algeria', 'Ethiopia', 'Iraq']\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=4,X_label='Counts',y_label='Country'),zorder=2,linewidth=0.2,color='#a578ff',ec='black')\nplt.title(_q,fontsize=4)\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 200\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n\ndel  _x, _y\ngc.collect()","d23f8754":"_q = str(data.iloc[0,4])\nplot = data.iloc[1:,4]\n\n_x = plot.value_counts().values\n_y = ['Master\u2019s degree', 'Bachelor\u2019s degree', 'Doctoral degree',\n       'Some studies without bachelor\u2019s degree',\n       'I prefer not to answer', 'No formal education past high school',\n       'Professional doctorate']\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=1,X_label='Counts',y_label='attain within 2yrs'),zorder=2,linewidth=0.2,color='#dedede',alpha=1,ec='black')\nplt.title('Highest level of formal education',fontsize=4,ha='right',loc='right')\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 500\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","e3251e6e":"_q = str(data.iloc[0,5])\nplot = data.iloc[1:,5]\n\n_x = plot.value_counts().values\n_y = plot.value_counts().index\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=2,X_label='Counts',y_label='title most similar to your current role'),zorder=2,linewidth=0.2,color='#21b5ff',ec='black')\nplt.title('Current Role',fontsize=4)\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nplt.text(xmax+4000,ymax,'Qualification Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 200\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","7343c44c":"#q3\n_q = str(data.iloc[0,6])\nplot = data.iloc[1:,6]\n\n_x = plot.value_counts().values\n_y = plot.value_counts().index\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=1,X_label='Counts',y_label='Coding Experience in yrs'),zorder=2,linewidth=0.2,color='#fffeb8',ec='black')\nplt.title('Experience in coding Plot',fontsize=4,ha='right',loc='right')\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\n\nplt.text(xmax+5000,ymax,'Experience Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 250\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","88e29963":"def clean(data,Question,n):\n    x = []\n    for i in range(1,n):\n        x.append(Question+str(i))\n    x.append(str('Q7_OTHER'))\n\n\n    ddict = {}\n    for i in x:\n        ddict[data[i].value_counts().keys()[0]]=data[i].value_counts()[0]\n    re = pd.DataFrame(ddict.items())\n    re.iloc[:,-1] = re.iloc[:,-1].astype('int32')\n    re.columns = ['Programming Languages','values']\n    return re\n\nplot = clean(data,'Q7_Part_',12)\n_all = plot['values'].sum()\nplot = plot.sort_values(['values'],ascending=False)\n\nq1 = sns.barplot(y =plot['Programming Languages'],x=plot['values'],ax=setup_plot(w=1,h=1,X_label='Counts',y_label='Programming Languages'),zorder=2,linewidth=0.2,color='#6effdf',ec='black')\n                   \nplt.title('Most Used Programming Languages',fontsize=4, )\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nplt.text(xmax+10000,ymax,'programming languages Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/_all):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 600\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()","e1a4c4b8":"_q = str(data.loc[0,'Q8'])\nplot = data.loc[1:,'Q8']\n\n_x = plot.value_counts().values\n_y = plot.value_counts().index\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=1,X_label='Counts',y_label='Recommend Programming Language for DS'),zorder=2,linewidth=0.2,color=PAL[2],ec='black')\nplt.title('Recommend Programming Language\\nfor Aspiring Data Scientist',fontsize=3,ha='right',loc='right')\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\n\nplt.text(xmax+7000,ymax,'Experience Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 550\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","dca32fed":"def clean(data,Question,n):\n    x = []\n    for i in range(1,n):\n        x.append(Question+str(i))\n    x.append(str('Q9_OTHER'))\n\n\n    ddict = {}\n    for i in x:\n        ddict[data[i].value_counts().keys()[0]]=data[i].value_counts()[0]\n    re = pd.DataFrame(ddict.items())\n    re.iloc[:,-1] = re.iloc[:,-1].astype('int32')\n    re.columns = ['IDE\\'s','values']\n    return re\n\nplot = clean(data,'Q9_Part_',12)\n_all = plot['values'].sum()\nplot = plot.sort_values(['values'],ascending=False).reset_index(drop=True)\n\nplot.iloc[0,-1] = int(plot.iloc[0,-1]) + 5488\nplot.drop(3,inplace=True)\n\nq1 = sns.barplot(y =plot['IDE\\'s'],x=plot['values'],ax=setup_plot(w=1,h=2,X_label='Counts',y_label='IDE\\'s'),zorder=2,linewidth=0.2,color=PAL[-3],ec='black')\n                   \nplt.title('Most Used IDE',fontsize=4)\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nplt.text(xmax+10000,ymax,'programming languages Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/_all):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 600\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","fcc87853":"def clean(data,Question,n):\n    x = []\n    for i in range(1,n):\n        x.append(Question+str(i))\n    x.append(str('Q10_OTHER'))\n\n\n    ddict = {}\n    for i in x:\n        ddict[data[i].value_counts().keys()[0]]=data[i].value_counts()[0]\n    re = pd.DataFrame(ddict.items())\n    re.iloc[:,-1] = re.iloc[:,-1].astype('int32')\n    re.columns = ['Cloud Notebook\\'s','values']\n    return re\n\nplot = clean(data,'Q10_Part_',16)\n_all = plot['values'].sum()\nplot = plot.sort_values(['values'],ascending=False).reset_index(drop=True)\n\nplot.iloc[0,-1] = int(plot.iloc[0,-1]) + 5488\nplot.drop(3,inplace=True)\n\nq1 = sns.barplot(y =plot['Cloud Notebook\\'s'],x=plot['values'],ax=setup_plot(w=1,h=2,X_label='Counts',y_label='Cloud Notebook\\'s'),zorder=2,linewidth=0.2,color=PAL[-1],ec='black')\n                   \nplt.title('Most Used Cloud Notebook',fontsize=4,)\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nplt.text(xmax+10000,ymax,'programming languages Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/_all):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 600\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","a4fa0998":"_q = str(data.loc[0,'Q11'])\nplot = data.loc[1:,'Q11']\n\n_x = plot.value_counts().values\n_y = ['A laptop', 'A personal computer \/ desktop',\n       'A cloud computing platform',\n       'A deep learning workstation', 'None',\n       'Other']\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=1,X_label='Counts',y_label='Computing Platform'),zorder=2,linewidth=0.2,color=PAL[2],ec='black')\nplt.title('Most Used Computing Platform for\\nData Science Project',fontsize=3,ha='right',loc='right')\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\n\nplt.text(xmax+7000,ymax,'Experience Plot',fontsize=3,ha='right',alpha=.001) #ignore this line\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 550\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()","a47e85a6":"_q = str(data.loc[0,'Q25'])\nplot = data.loc[1:,'Q25']\n\n_x = plot.value_counts().values\n_y = plot.value_counts().index\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=3,X_label='Counts',y_label='current yearly compensation (approximate $USD)'),zorder=2,linewidth=0.2,color=PAL[2],ec='black')\nplt.title('Current yearly compensation',fontsize=3,ha='right',loc='right')\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 550\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()","c8566412":"_q = str(data.loc[0,'Q41'])\nplot = data.loc[1:,'Q41']\n\n_x = plot.value_counts().values\n_y = plot.value_counts().index\n\nq1 = sns.barplot(y =_y,x=_x ,ax=setup_plot(w=1,h=1,X_label='Counts',y_label='Tool used at work or school'),zorder=2,linewidth=0.2,color=PAL[2],ec='black')\nplt.title('Primary Tool Usage',fontsize=3,ha='right',loc='right')\n\nxmin, xmax = q1.get_xlim()\nymin, ymax = q1.get_ylim()\n\nfor p in q1.patches:\n            value = f'{p.get_width():.0f} | {(p.get_width()\/country.shape[0]):,.1%}'\n            if value == '0':\n                pass\n            else:\n                x = p.get_x() + p.get_width() + 550\n                y = p.get_y() + p.get_height() \/ 2 \n                q1.text(x, y, value, ha='left', va='center', fontsize=2, \n                        bbox=dict(facecolor='none', edgecolor='black', boxstyle='round', linewidth=0.3))\nplt.show()\n","11c5101f":"# Title most similar to your current role\n\n> *Machine Learning Engineer*","40cfd6bb":"# In which country do you currently reside?\n\n* India :), 28.6% of the people who has given survey are from india. Followed by United States of America with 10.2% of the total number of people who gave the survey.","78811472":"# Most Used Computing Platform for Data Science Project\n\n62.5% people who gave the survey uses laptop for data science projects.","f6f4cdf8":"# Current yearly compensation\n\nMy compensation is between $0-999","80308235":"# Most Used IDE\n\nFor me, I mostly use Kaggle\/Colab notebooks sometimes Spyder, I like using Jupyter Notebooks.","a16e1608":"# Most Used Cloud Notebook\n\nAs I said, kaggle\/Colab notebook is very easy to use, and they also provide free GPU & TPU support.\n\n50.1% people who gave the survey uses colab notebook, followed by Kaggle 31.2% people.","f4d11e45":"# What is your Age?","e583dab9":"# Import Libraries","1038e267":"**My age? !23**\n\n18.1% of the people in the survery falls in my age range, 18.9% are younger and 63% people in the survery are older than me!","631b8187":"# Highest level of formal education\n\n*  Completed my bachelor's Degree in 2019","e1c09a3a":"# Programming Language\n\nI Love **Python**","d6f616e0":"Thank you, **WIP**.","f93657c5":"# Coding Experience\n\nI have 2+ years of experience in Coding","8e2194cf":"# Primary Tool Usage\n\nI mostly prefer Google sheets and Jupyter Notebook","2fd24fcc":"Hello Kagglers, Today we are goin to explore the insights of Kaggle 2021 survey data and grasp the information from visualizations.","3394b5ad":"# Recommend Programming Language for Aspiring Data Scientist\n\nTrue, I will also recommend python to anyone who is getting started with AI\/ML etc."}}