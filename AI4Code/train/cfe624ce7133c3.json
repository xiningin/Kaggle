{"cell_type":{"9afb0fd1":"code","33b6c0ac":"code","2c8e25e2":"code","e0fa78fc":"code","1df29077":"code","b82467e1":"code","6f094721":"code","335c9486":"code","ac4d2113":"code","aa473951":"code","8f7d66f4":"code","e3adf625":"code","ccb63fae":"code","838554a8":"code","d5a5de05":"code","2ea8a3ff":"markdown","89e8f4b6":"markdown","8f27f9ad":"markdown","33ea064b":"markdown","ae286d7c":"markdown","bf28c064":"markdown","0d94068c":"markdown"},"source":{"9afb0fd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33b6c0ac":"data = pd.read_csv(\"\/kaggle\/input\/3dprinter\/data.csv\")","2c8e25e2":"data.info() #We have 50 samples' values ","e0fa78fc":"data.head(20)","1df29077":"data.layer_height = data.layer_height * 100\ndata.elongation = data.elongation * 100  #Mens growth rate ","b82467e1":"data.material = [0 if each ==\"abs\" else 1 for each in data.material]\ndata.infill_pattern = [0 if each ==\"grid\" else 1 for each in data.infill_pattern]","6f094721":"data.head()","335c9486":"data.info()","ac4d2113":"x = data.drop([\"material\"],axis = 1) #by y axis\ny = data.material.values #using .values convert to numpy array","aa473951":"#Normalisation \nx_norm = (x-np.min(x))\/(np.max(x) - np.min(x))","8f7d66f4":"#Train test Split \nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x_norm,y, test_size = 0.2 ,random_state = 42)","e3adf625":"import keras \nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Input\nfrom keras.optimizers import SGD #Gradient Descent\n\nmodel = Sequential()\nmodel.add(Dense(32,input_dim = 11))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(32))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(32))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.3))\n        \nmodel.add(Dense(16))\nmodel.add(Activation(\"sigmoid\"))\n          \nmodel.compile(optimizer=\"adam\",loss = \"sparse_categorical_crossentropy\",metrics = [\"accuracy\"])\nprint(model.summary())\n","ccb63fae":"model.fit(x_train,y_train, epochs=500, validation_data = (x_test,y_test))","838554a8":"y_predict = model.predict_classes(x_train)","d5a5de05":"score = model.evaluate(x_train,y_predict)\nprint(\"Test Loss:\",score[0])\nprint(\"Test Loss:\",score[1])","2ea8a3ff":"### Uploading Dataset","89e8f4b6":"Now there is no object dtype in the dataset, lets train our data","8f27f9ad":"## Training Model","33ea064b":"## In this kernel we'll see how to teach model for 3d printer samples ","ae286d7c":"# Tensile Test Application for Mechanical Engineers ( by Deep Learning ) ","bf28c064":"When we want to train a ml model we need to work with float, int or categorical not by Objects, now we going to optimize our data by changing objects to int ","0d94068c":"### Training model using by \"KERAS\""}}