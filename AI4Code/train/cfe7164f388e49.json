{"cell_type":{"74c6be28":"code","36efb199":"code","77f82090":"code","60c8f9dd":"code","9d1993f2":"code","f08a9c37":"code","75efc1fa":"code","9126b865":"code","b9160a07":"code","20798598":"code","3186aeeb":"code","fc5ec80e":"code","33b0d23d":"code","e291a438":"code","21f13572":"code","f5fe8a51":"code","7183b631":"code","11ffb94e":"code","05b41f66":"code","f8639acb":"code","0f418546":"code","10e41759":"code","f869b38e":"code","a5dc04d9":"code","8fb8f7ca":"markdown","32a7d38e":"markdown","cd506835":"markdown","5634d2bf":"markdown","0141368a":"markdown","73d433fd":"markdown","fd8d6e94":"markdown","e36fb8f3":"markdown","8b576dad":"markdown"},"source":{"74c6be28":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import radians, asin, sin, cos, sqrt\n\nimport warnings\nwarnings.filterwarnings('ignore')","36efb199":"# loading the dataframe\ndef load_dataframe(path):\n    return pd.read_csv(path, nrows = 100000)\ntrain_dataframe = load_dataframe('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv')","77f82090":"train_dataframe.head()","60c8f9dd":"train_dataframe.shape","9d1993f2":"train_dataframe['key'].nunique","f08a9c37":"# Checking for missing values\ntrain_dataframe.isnull().sum()","75efc1fa":"# dropping missing values\ndef drop_missing_values(dataframe):\n    return dataframe.dropna()\ntrain_dataframe = drop_missing_values(train_dataframe)","9126b865":"train_dataframe.isnull().sum()","b9160a07":"def haversine_distance(latitudeA, longitudeA, latitudeB, longitudeB):\n    radius_of_earth = 6371.8 #in kilometers\n    # converting everything into radians\n    latitudeA, longitudeA, latitudeB, longitudeB = radians(latitudeA), radians(longitudeA), radians(latitudeB), radians(longitudeB)\n    # finding the difference between the latitudes and longitudes\n    latitude_difference = latitudeB - latitudeA\n    longitude_difference = longitudeB - longitudeA\n    # applyin the haversine formulas\n    haversin_latitude = (1 - cos(latitude_difference))\/2\n    haversin_longitude = (1 - cos(longitude_difference))\/2\n    haversin_teta = haversin_latitude + (cos(longitudeA) * cos(longitudeB) * haversin_longitude)\n    # finding the distance\n    distance = 2 * radius_of_earth * asin(sqrt(haversin_teta))\n    return distance\n# haversine_distance(latitudeA, longitudeA, latitudeB, longitudeB)","20798598":"def distance_feature(dataframe):\n    dataframe['distance'] = haversine_distance(0, 0, 0, 0)\n    for i in range(len(dataframe)):\n        dataframe['distance'].loc[i] = haversine_distance(dataframe['pickup_latitude'].loc[i],\n                                                          dataframe['pickup_longitude'].loc[i],\n                                                          dataframe['dropoff_latitude'].loc[i],\n                                                          dataframe['dropoff_longitude'].loc[i])\n    dataframe = dataframe.drop(['pickup_latitude',\n                                            'pickup_longitude',\n                                            'dropoff_latitude',\n                                            'dropoff_longitude',], axis = 1)\n    return dataframe\ntrain_dataframe = distance_feature(train_dataframe)\ntrain_dataframe.head()","3186aeeb":"train_dataframe['pickup_datetime'].dtype\ntrain_dataframe['pickup_datetime'].head()","fc5ec80e":"def time_taken(dataframe):\n    # we will first convert into timestamp and then we will bin this\n    dataframe['time_taken'] = pd.to_datetime(dataframe['pickup_datetime']).dt.hour\n    dataframe = dataframe.drop(['pickup_datetime'], axis = 1)\n    # Converting the time taken into binned values for calculations.\n    dataframe['time_taken'] = pd.cut(dataframe['time_taken'],\n                                       bins=np.array([-1, 3, 6, 9, 12, 15, 18, 21, 24]),\n                                       labels=[0,1,2,3,4,5,6,7])\n    return dataframe\ntrain_dataframe = time_taken(train_dataframe)\ntrain_dataframe.head()","33b0d23d":"# splitting the data into train and testing set\nfrom sklearn.model_selection import train_test_split\nX = train_dataframe.drop(['fare_amount', 'key'], axis = 1)\ny = train_dataframe['fare_amount']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state = 101)","e291a438":"# Data is not linear at all and there are just 3 input features and 1 target feature. \n# So I am using Random Forest\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=500)","21f13572":"# fitting the model\nmodel.fit(X_train, y_train)","f5fe8a51":"# prediction some sample data for validating the model\npredictions = model.predict(X_val)","7183b631":"# checking the performance of the model\nfrom sklearn.metrics import mean_squared_error\nprint(np.sqrt(mean_squared_error(predictions, y_val)))","11ffb94e":"test_dataframe = load_dataframe('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv')\ntest_dataframe.head()","05b41f66":"test_dataframe = drop_missing_values(test_dataframe)\ntest_dataframe.isnull().sum()","f8639acb":"test_dataframe = distance_feature(test_dataframe)\ntest_dataframe.head()","0f418546":"test_dataframe = time_taken(test_dataframe)\ntest_dataframe.head()","10e41759":"# predicting the fare amount\nX = test_dataframe.drop(['key'], axis = 1)\nfare_amount = model.predict(X)\nfare_amount[:10]","f869b38e":"submission = pd.DataFrame({'key':test_dataframe['key'], 'fare_amount':fare_amount})\nsubmission.head()","a5dc04d9":"submission.to_csv('submission.csv', index = False)","8fb8f7ca":"Thanks for viewing my kernel and for your kind encouragement by upvoting. \n\nSuggestions and Discussions are encouraged. We all learn from our mistakes !! ","32a7d38e":"We can use Haversin formula to calculate the distance between a latitude and longitute on earth. The formula can be understood by clicking [here](https:\/\/en.wikipedia.org\/wiki\/Haversine_formula).","cd506835":"Now the model is trained and evaluated. Now performing the same in test set and submitting the file","5634d2bf":"Now we will go ahead with the regression model","0141368a":"Inferences:\n1. I am getting memory error so I am using just nrows = 100000.\n2. The 'key' is nothing but the timestamp, which have the possiblity of repeating, 2 different taxis can be hired at the same time, exactly at the same time. However the probablity is extremely low so we can assume that the alternate hypothesis works here.\n3. The 'fare_amount' is the target feature to be predicted.\n4. The pickup location and dropoff location can be used to calculate the distance between pickup and dropoff points .\n5. The datetime feature can be binned into categories such as morning, afternoon, evening, night (Since there are many rows we can bin it into more variables to get good insights - Evenings of Thursdays, Fridays are peak hours. Mornings of Mondays are peak hours)","73d433fd":"Now the distance is calculated and now we can go ahead with bunning the data and time. ","fd8d6e94":"**The DISTANCE maybe misleading considering the reality because there might be different routes for short distance, there might be traffic, there might be diversions etc. Distances from point A to point B, in reality, cannot be a straight line. We are gonna use Haversine distance here to calculate the distance between latitude-longitude A to latitude-longitude B**","e36fb8f3":"Looks we can make the best use of all the features here.","8b576dad":"This kernel can be used by starters in Machine Learning for understanding basic Data Preparation and modelling steps."}}