{"cell_type":{"21c14814":"code","ff03ea87":"code","fc2ec753":"code","8724f864":"code","d850f7c8":"code","b4380390":"code","04e1f284":"code","820eac7b":"code","4f2b7b0b":"code","e26af2ed":"code","4f68d19e":"code","06db7aaf":"markdown","57d6d74b":"markdown"},"source":{"21c14814":"# adapted from https:\/\/www.kaggle.com\/gulgaishatemerbekova\/clothes-recommendation-system-using-densenet121\/notebook\n# fixed his code to get it running again\n\nimport numpy as np\nimport pandas as pd\nimport os \nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom keras import Model\nfrom tensorflow.python.keras.applications.densenet import DenseNet121\nfrom keras.preprocessing import image\nfrom keras.applications.densenet import preprocess_input, decode_predictions\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.utils.vis_utils import plot_model\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport cv2\nimport pathlib\nfrom sklearn.metrics.pairwise import linear_kernel","ff03ea87":"path = '..\/input\/fashion-product-images-dataset\/fashion-dataset\/fashion-dataset\/'\ndataset_path = pathlib.Path(path)\nimages=os.listdir(dataset_path)\nimages","fc2ec753":"plt.figure(figsize=(20,20))\nfor i in range(20, 30):\n    plt.subplot(6, 10, i-20+1)\n    cloth_img =  mpimg.imread(path + 'images\/100'+ str(i) +'.jpg')\n    plt.imshow(cloth_img)\n    plt.axis(\"off\")\nplt.subplots_adjust(wspace=-0.5, hspace=1)\nplt.show()","8724f864":"df = pd.read_csv(path + \"styles.csv\", nrows=6000)\ndf['image'] = df.apply(lambda x: str(x['id']) + \".jpg\", axis=1)\ndf = df.reset_index(drop=True)\nprint(df.shape)\ndf.head(5)","d850f7c8":"img_width, img_height, chnl = 200, 200, 3\ndn121path = '..\/input\/densenet121\/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n# Sets up DenseNet121 from input file.\ndensenet = DenseNet121(include_top=False, weights=dn121path, input_shape=(img_width, img_height, chnl))\ndensenet.trainable = False\n\n# Add Layer Embedding\nmodel = keras.Sequential([\n    densenet,\n    GlobalMaxPooling2D()\n])\n\nmodel.build(input_shape=(None, img_width, img_height, chnl))\nmodel.summary()","b4380390":"def img_path(img):\n    return path + 'images\/' + img\n\ndef model_predict(model, img_name):\n    # Reshape\n    img = image.load_img(img_path(img_name), target_size=(img_width, img_height))\n    # img to Array\n    x   = image.img_to_array(img)\n    # Expand Dim (1, w, h)\n    x   = np.expand_dims(x, axis=0)\n    # Pre process Input\n    x   = preprocess_input(x)\n    return model.predict(x).reshape(-1)","04e1f284":"df_copy = df\ndf_embedding = df_copy['image'].apply(lambda x: model_predict(model, x))\ndf_embedding = df_embedding.apply(pd.Series)\ndf_embedding.head(5)","820eac7b":"cosine_sim = linear_kernel(df_embedding, df_embedding)","4f2b7b0b":"indices = pd.Series(range(len(df)), index=df.index)\n\ndef get_recommendations(index, df, cosine_sim=cosine_sim):\n    idx = indices[index]\n\n    # Get the pairwise similarity scores of all clothes with that one\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the clothes based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 5 most similar clothing\n    sim_scores = sim_scores[1:6]\n\n    # Get the clothes indices\n    cloth_indices = [i[0] for i in sim_scores]\n\n    # Return the top 5 most similar clothing\n    return df['image'].iloc[cloth_indices]","e26af2ed":"def show_recommendation(index):\n    recommendation = get_recommendations(index, df, cosine_sim)\n    recommendation_list = recommendation.to_list()\n    # Items viewed\/bought\n    chosen_img =  mpimg.imread(path + 'images\/' + df.iloc[index].image)\n    plt.title(\"Item viewed\/bought\")\n    plt.imshow(chosen_img)\n    # Recommended Items\n    plt.figure(figsize=(20,20))\n    j=0\n    for i in recommendation_list:\n        plt.subplot(5, 10, j+1)\n        cloth_img =  mpimg.imread(path + 'images\/'+ i)\n        plt.imshow(cloth_img)\n        plt.axis(\"off\")\n        j+=1\n    plt.title(\"Recommended Items\")\n    plt.subplots_adjust(wspace=-0.5, hspace=1)\n    plt.show()\n","4f68d19e":"chosen_img_index = 600 # change this to get new recommendations\n\nshow_recommendation(chosen_img_index)","06db7aaf":"This calculates the cosine similarity using linear_kernel to compute the similarity between items. Note that linear_kernel and cosine_similarity produce the same result. However, linear_kernel takes a shorter time to execute. As such, it is good practice to default to linear_kernel to improve performance when we work with a very large amount of data and when our vectors are in the tf-idf representation.","57d6d74b":"Here, we convert the objects into embeddings. By doing so, we limit the number of elements in the array representing each item on a continuous scale. This way, the values have a relationship-based meaning. \n\nObjects close to each other based on similarity (dot product) are highly related."}}