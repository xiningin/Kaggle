{"cell_type":{"d0cc9b01":"code","ec218345":"code","b10fd894":"code","e904007e":"code","2ab51a0d":"code","5de8d4ce":"code","b362dbab":"code","3f11386b":"code","44c2dd64":"code","f2fa0ede":"code","cfd4817d":"code","08b3472c":"code","04f87729":"code","ea2f3ad2":"code","d436ed28":"code","174536d2":"code","8bc8b9b7":"code","c28d08fb":"code","9131ca3b":"code","10be73df":"code","79821a74":"code","7dbf4307":"code","8d649ec1":"code","6cb0d079":"code","a2ddd09e":"code","5647ba49":"code","b9b7397a":"code","14955b11":"code","3a318273":"code","f63bf396":"code","cf2fe32e":"code","cccf2f1e":"code","4ef1ca6d":"code","cab57aa6":"code","2c87d723":"code","985c8c4e":"code","8454590a":"code","4ed9d549":"code","afc465f9":"code","97fcb314":"code","8556542e":"code","29cab63d":"code","aaf811c4":"code","37fc5f7b":"code","ce66714f":"code","7fbf6a82":"code","32b5b8a9":"code","45ecc6a0":"code","844746f5":"code","33be9f6c":"code","9ed24ef5":"code","1656b671":"code","7bd2c3ce":"code","22f07704":"code","80b22f0e":"code","dbf03033":"code","c9dc92b9":"code","01007247":"code","a3f692f2":"code","aa00379d":"code","e02ed8e3":"code","7496bd78":"code","ddfca56d":"code","66cc925a":"code","e9144c98":"code","6525e160":"code","3cd43b4d":"code","2c839b22":"code","0524e197":"code","f45c262a":"code","11aa6690":"code","c72f7181":"code","d23b64fb":"markdown","721c7c4f":"markdown","1d9dc875":"markdown","605c00ab":"markdown","b33f8a1f":"markdown","bab42d53":"markdown","a9816d82":"markdown","a6f8b015":"markdown","c6817861":"markdown","9a521dca":"markdown","94259f7a":"markdown","4503b9b1":"markdown","58359717":"markdown","45abe744":"markdown","5fb25ad7":"markdown"},"source":{"d0cc9b01":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib","ec218345":"# read dataset\ndf = pd.read_csv('\/kaggle\/input\/top-1000-highest-grossing-movies\/Highest Holywood Grossing Movies.csv')\ndf.drop(\"Unnamed: 0\", axis=1, inplace=True)","b10fd894":"df.head()","e904007e":"def rows_and_cols(value):\n    row = df.shape[0]\n    col = df.shape[1]\n    print(f\"The dataset contains {row} rows and {col} columns\")","2ab51a0d":"rows_and_cols(df)","5de8d4ce":"# checking for info, describe\ndef info(value):\n    info = df.info()\n    return info","b362dbab":"info(df)","3f11386b":"# checking for description max and min \ndef des(vale):\n    des = df.describe()\n    return des","44c2dd64":"des(df)","f2fa0ede":"# checking for null values\ndef null_values(value):\n    return df.isnull().sum().sort_values(ascending=False)","cfd4817d":"null_values(df)","08b3472c":"# checking the correlation of dataset\ndef corr(value):\n    return df.corr()","04f87729":"corr(df)","ea2f3ad2":"# checking the datatype of each variable\nnumeric_col = df.select_dtypes(include='int64').columns.tolist()\ncategorical_col = df.select_dtypes(include='object').columns.tolist()\ndef datatypes(value):\n    print(\"Numeric columns is :\\n\",numeric_col)\n    print(\"Categorical columns is: \\n\", categorical_col)","d436ed28":"datatypes(df)","174536d2":"# checking for null values in numeric and cols columns\ndef null(value):\n    print(df[numeric_col].isnull().sum().sort_values(ascending=False))\n    print(df[categorical_col].isnull().sum().sort_values(ascending=False))","8bc8b9b7":"null(df)","c28d08fb":"df_domestic_sales= df[[\"Title\",\"Movie Info\",\"Domestic Sales (in $)\"]]","9131ca3b":"df_domestic_sales","10be73df":"# checking for max and min sale in Domestic sale for movies\ndef max_min(value):\n    print(df_domestic_sales.max())\n    print(df_domestic_sales.min())","79821a74":"max_min(df_domestic_sales)","7dbf4307":"def sale_domestic(value):\n    domestic = df.groupby([\"Title\", \"Movie Info\", \"Release Date\", \"Genre\",\"Movie Runtime\", \"License\"])[\"Domestic Sales (in $)\"].sum()\n    print(\"The minimum no of sale in domestic {} \\nmovie is {}\\n\".format(domestic.max(), domestic.idxmax()))\n    print(\"The minimum no of sale in domestic {} \\nmovie is {}\\n\".format(domestic.min(), domestic.idxmin()))","8d649ec1":"sale_domestic(df)","6cb0d079":"top_4= df[df[\"Domestic Sales (in $)\"]>678815482]","a2ddd09e":"top_4","5647ba49":"sns.barplot(data= top_4, x=\"Domestic Sales (in $)\", y=\"Title\")\nplt.title(\"The top 4 best highest grossing movies of all time\");","b9b7397a":"chart = df.boxplot()\nchart.set_xticklabels(chart.get_xticklabels(), rotation = 45)\nplt.ylabel('Count', fontsize = 12)\nplt.show()","14955b11":"df[\"Release Date\"] = pd.to_datetime(df[\"Release Date\"])\ndf[\"Year\"] = df[\"Release Date\"].dt.year","3a318273":"df","f63bf396":"df[\"Year\"].fillna(value=\"2015\", inplace=True)","cf2fe32e":"df","cccf2f1e":"df[\"Release Date\"] = df[\"Release Date\"].fillna(\"2010-08-13\", inplace=False)","4ef1ca6d":"df","cab57aa6":"null(df[\"Release Date\"])","2c87d723":"df[\"License\"].fillna(value=\" PG-13\", inplace=True)","985c8c4e":"null(df)","8454590a":"df.head(1)","4ed9d549":"df[\"Year\"].value_counts().sort_values(ascending=False)","afc465f9":"film_1972 = df[df[\"Year\"] == 1972.0]","97fcb314":"film_1972","8556542e":"px.histogram(film_1972,\n            y=\"Domestic Sales (in $)\",\n            x=\"Title\",\n            color=\"Genre\")","29cab63d":"# analyzing films in 2021\ntwok_21 = df[df[\"Year\"] == 2021.0] ","aaf811c4":"twok_21","37fc5f7b":"# analyzing films 2020\nyear_2020 = df[df[\"Year\"] == 2020]","ce66714f":"year_2020","7fbf6a82":"print(\"The Highest Grossing film in 2020 is \\n {}\".format(year_2020.max()))","32b5b8a9":"print(\"The Lowest Grossing film in 2020 is \\n {}\".format(year_2020.min()))","45ecc6a0":"plt.figure(figsize=(10,6))\nsns.barplot(data=year_2020, x=\"Domestic Sales (in $)\", y=\"Title\", hue=\"Genre\");","844746f5":"plt.figure(figsize=(10,6))\nsns.barplot(data=year_2020, x=\"International Sales (in $)\", y=\"Title\", hue=\"Genre\");","33be9f6c":"plt.figure(figsize=(10,6))\nsns.barplot(data=year_2020, x=\"World Sales (in $)\", y=\"Title\", hue=\"Genre\");","9ed24ef5":"year_2019 = df[df[\"Year\"] == 2019]","1656b671":"year_2019.groupby('Year')['Title','Movie Info','Distributor','Release Date','Domestic Sales (in $)','International Sales (in $)','World Sales (in $)','Genre','Movie Runtime','License'].count()","7bd2c3ce":"print('The highest grossing film in 2019 is \\n {}'.format(year_2019.max()))\nprint('The Lowest grossing film in 2019 is \\n {}'.format(year_2019.min()))","22f07704":"plt.figure(figsize=(10,15))\nsns.barplot(data=year_2019, x=\"Domestic Sales (in $)\", y=\"Title\");\nplt.figure(figsize=(10,15))\nsns.barplot(data=year_2019, x=\"International Sales (in $)\", y=\"Title\");\nplt.figure(figsize=(10,15))\nsns.barplot(data=year_2019, x=\"World Sales (in $)\", y=\"Title\");","80b22f0e":"# data of 2018\ndf[df[\"Year\"] == 2018]","dbf03033":"# data of 2017\ndf[df[\"Year\"] == 2017]","c9dc92b9":"# data of 2016\ndf[df[\"Year\"] == 2016]","01007247":"# data of 2015\ndf[df[\"Year\"] == 2015]","a3f692f2":"# data of 2014\ndf[df[\"Year\"] == 2014]","aa00379d":"# data of 2013\ndf[df[\"Year\"] == 2013]","e02ed8e3":"# data of 2012\ndf[df[\"Year\"] == 2012]","7496bd78":"# data of 2011\ndf[df[\"Year\"] == 2011]","ddfca56d":"# data of 2010\ndf[df[\"Year\"] == 2010]","66cc925a":"plt.plot(df[[\"Domestic Sales (in $)\", \"Release Date\"]]);","e9144c98":"domestics = df[[\"Domestic Sales (in $)\", \"Release Date\"]]\ndf_a = domestics.groupby(by=\"Release Date\").sum()","6525e160":"plt.figure(figsize=(20,4))\nplt.plot(df[\"Year\"], df[\"Domestic Sales (in $)\"])","3cd43b4d":"plt.plot(df[\"Year\"], df[\"Domestic Sales (in $)\"], 'g--')","2c839b22":"domes = df[df[\"Year\"] == 2019.0]","0524e197":"domes","f45c262a":"df.plot.pie(domes[\"Year\"]);","11aa6690":"from pandas_profiling import ProfileReport","c72f7181":"ProfileReport(df)","d23b64fb":"# Year 2019","721c7c4f":"There are only 3 films that were released in 2020","1d9dc875":"Now all the columns has no null values....","605c00ab":"###  Film Per Year","b33f8a1f":"## Null Values","bab42d53":"# Year 2020","a9816d82":"# Checking for shape rows and columns","a6f8b015":"Now from the dataset we can conclude that only two columns contains non or missing values","c6817861":"The release year starts from 1972 and till 2021","9a521dca":"## Info, Describe","94259f7a":"### Filling missing values in Release data columns","4503b9b1":"###  Filling value in Liscence Columns","58359717":"Total number of films that were released in 2019 was 35","45abe744":"Only one film was in 1972 which was The Godfather (1972)","5fb25ad7":"### Checking for Number of Years that are unique"}}