{"cell_type":{"8a4d6ea8":"code","91da420c":"code","6bfecee1":"code","82081f2c":"code","7d8007b7":"code","da697635":"code","005c0c10":"code","f1657572":"code","6d78a1e6":"markdown","57ec35a7":"markdown","b1fb470c":"markdown","af8df4ea":"markdown","aef919a4":"markdown","76dd91e4":"markdown","0119f6a3":"markdown"},"source":{"8a4d6ea8":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","91da420c":"df_test = pd.read_csv(os.path.join('\/kaggle\/input\/Kannada-MNIST\/test.csv'))\ndf_test.sample(n=5)","6bfecee1":"df_train = pd.read_csv(os.path.join('\/kaggle\/input\/Kannada-MNIST\/train.csv'))\ndf_train.sample(n=5)","82081f2c":"X_train = np.array(df_train.loc[:, df_train.columns != 'label'])\nX_test  = np.array(df_test.loc[:, df_test.columns != 'id'])\n\ny_train = np.array(df_train['label'])\n\nprint(f\"X_train: {X_train.shape}\\nX_test: {X_test.shape}\\ny_train: {y_train.shape}\")","7d8007b7":"rows = 5\ncols = 10\nfig, ax = plt.subplots(nrows=rows, ncols=cols, figsize=(cols, rows))\n\nfor label in range(cols):\n    digits = df_train.loc[df_train['label'] == label]\n    digits = digits.drop('label', axis=1)\n    ax[0][label].set_title(label)\n    for j in range(rows):\n        ax[j][label].axis('off')\n        ax[j][label].imshow(digits.iloc[j, :].to_numpy().astype(np.uint8).reshape(28, 28), cmap='gray')","da697635":"sns.distplot(y_train, kde=False)","005c0c10":"pixel_counts = (df_train.loc[:, df_train.columns != 'label'] \/ 255).astype(int)\npixel_counts = pixel_counts.sum(axis=0).values\npixel_counts = pixel_counts.reshape((28, 28))\nsns.heatmap(pixel_counts)","f1657572":"fig, ax = plt.subplots(nrows=2, ncols=5, figsize=(20, 5))\nax = ax.flatten()\n\nfor label in range(10):\n    pixel_counts = (df_train.loc[:, df_train.columns != 'label'] \/ 255).astype(int)\n    pixel_counts = pixel_counts.loc[df_train['label'] == label]\n    pixel_counts = pixel_counts.sum(axis=0).values\n    pixel_counts = pixel_counts.reshape((28, 28))\n    ax[label].axis('off')\n    sns.heatmap(pixel_counts, ax=ax[label])","6d78a1e6":"## Further steps\n\nWhen you already know what kind of data you are dealing with, you can start creating and training your model. You can refer to many existing tutorials and kernels regarding MNIST dataset which is also available on Kaggle as [Digit Recognizer](https:\/\/www.kaggle.com\/c\/digit-recognizer) competition. There you can find exhausting list of visualizations, models and general advices.","57ec35a7":"#### Distribution\n\nLet's display number of samples representing each label (0-9). You can clearly see that in the training set, every label has 6000 samples. It means we don't have to do anything specific to reduce data imbalance which is a good sign.","b1fb470c":"#### Pixel heatmap\n\nThe next (actually interesting) thing is a pixel heatmap. It shows which pixels are usually used in our data images i.e. aren't black pixels. If you take a look at the image below, you can see that approx. 2-3 pixels from each side of images (and a bit more in the top-left corner) are never used in the training set.","af8df4ea":"We can see that each row in `train.csv` file consists of a `label` and 784 (28x28) pixels. Pixel values are our training data (called `X`) and labels are our target (classification result, called `y`). In `test.csv` on the other hand, `label` column is missing (because that's what we need to find) but we've got `id` column which is just row index - not really useful so we will get rid of that. Let's now split dataframes into X and y arrays for both training and test sets.","aef919a4":"We can also plot heatmaps for each label separately, as below.","76dd91e4":"## Reading input data \nIn the first step, we need to read our data from the input the directory (`\/kaggle\/input\/Kannada-MNIST\/`).  \nWe are interested in two files:\n* `train.csv` containing samples for training model,\n* `test.csv` containing records that need to be classified in this competition.","0119f6a3":"## Visualization\n\n#### Sample images\n\nWe start with displaying sample images for each of ten labels which is quite simple task but it's good to know what data we are dealing with."}}