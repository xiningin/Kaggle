{"cell_type":{"7d1695b1":"code","24be51b6":"code","7a0dae81":"code","f8d03c83":"code","78e8db44":"code","5be8556a":"code","5971ac88":"code","ea54e402":"code","86568753":"code","704bb6d0":"code","3a5da906":"code","55a1eaa3":"code","ca6dbef7":"code","1a885b31":"markdown","abc9290c":"markdown","173762fa":"markdown","ab15b709":"markdown","bab735e7":"markdown","33ead5f6":"markdown","05a4ce8f":"markdown","2896769c":"markdown","af6eff96":"markdown","ace6d92a":"markdown","d41e739a":"markdown"},"source":{"7d1695b1":"import numpy as np\nimport pandas as pd\nimport math\n\n#visualization libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n%pylab inline\nfrom matplotlib.colors import ListedColormap\nfrom textwrap import wrap\n\n# Disable warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n# plotly packages\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport cufflinks as cf\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()","24be51b6":"df_2020 = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf20 = df_2020.iloc[1:,[1,2,3,4,5,6,118]]\ndf20.columns = ['Age','Gender','Country','Education','Title', 'NumYrs','Sal']\n#df20.loc[df20['Country'] == 'United Kingdom of Great Britain and Northern Ireland','Country'] = 'UK'\n#df20.loc[df20['Country'] == 'United States of America','Country'] = 'USA'\n#df20.loc[df20['Country'] == 'Republic of Korea','Country'] = 'South Korea'\n#df20.loc[df20['Country'] == 'Viet Nam','Country'] = 'Vietnam'\ndf20.loc[df20['Country'] == 'United States of America','Country'] = 'United States'\ndf20.loc[df20['Country'] == 'United Kingdom of Great Britain and Northern Ireland','Country'] = 'United Kingdom'\n\ndf20.loc[df20['Country'] == 'Iran, Islamic Republic of...','Country'] = 'Iran'\ndf20.loc[df20['Education'] == 'Some college\/university study without earning a bachelor\u2019s degree','Education'] = 'High School\/Some College'\ndf20.loc[df20['Education'] == 'No formal education past high school', 'Education'] = 'High School\/Some College'\n# df_2020 = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\n# df20 = df_2020.iloc[1:,[1,2,3,4,5,6,118]]\n# df20.columns = ['Age','Gender','Country','Education','Title', 'NumYrs','Salary']\n#Importing the 2019 Dataset\ndf_2019 = pd.read_csv('\/kaggle\/input\/cleaned-mcr-kaggle-survey-2019\/clean_multiple_choice_responses.csv')\ndf_2019 = df_2019.rename(columns={'Duration (in seconds)': 'Duration',\n        'What is your age (# years)?': 'Age', \n        'What is your gender? - Selected Choice': 'Gender',\n        'In which country do you currently reside?':'Country',\n        'What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Education',\n        'What is the size of the company where you are employed?':'CompanySize',\n        'What is your current yearly compensation (approximate $USD)?':'Salary',\n        'Approximately how much money have you spent on machine learning and\/or cloud computing products at your work in the past 5 years?':'MoneyDS',\n                            })\ndf19 = df_2019[['Duration','Age','Gender','Country','Education','Salary','CompanySize','MoneyDS']] #'CompanySize''MoneyDS'\n\n# Replacing the ambigious countries name with Standard names\ndf19['Country'].replace({'United States of America':'United States',\n                            'Viet Nam':'Vietnam',\n                             \"People 's Republic of China\":'China',\n                             \"United Kingdom of Great Britain and Northern Ireland\":'United Kingdom',\n                             \"Hong Kong (S.A.R.)\":\"Hong Kong\"},inplace=True)\n#Importing the 2018 Dataset\ndf_2018 = pd.read_csv('..\/input\/kaggle-survey-2018\/multipleChoiceResponses.csv')\ndf_2018.columns = df_2018.iloc[0]\ndf_2018=df_2018.drop([0])\n\ndf_2018 = df_2018.rename(columns={'Duration (in seconds)': 'Duration',\n        'What is your age (# years)?': 'Age', \n        'What is your gender? - Selected Choice': 'Gender',\n        'In which country do you currently reside?':'Country',\n        'What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Education',\n         #'What is the size of the company where you are employed?':'CompanySize',\n         'What is your current yearly compensation (approximate $USD)?':'Salary',\n         #'Approximately how much money have you spent on machine learning and\/or cloud computing products at your work in the past 5 years?':'MoneyDS',\n                            })\ndf18 = df_2018[['Duration','Age','Gender','Country','Education','Salary']]\n# #Importing the 2017 Dataset\ndf17=pd.read_csv('..\/input\/kaggle-survey-2017\/multipleChoiceResponses.csv',encoding='ISO-8859-1')                         \ngen_ratio = ((df20['Gender'].value_counts(normalize=True)[:2])*100).round(2)\ndf20['Gender'] == 'Woman'\nsns.set(style=\"whitegrid\")\nclrs = ['#949994','#a0dea4']\nax = sns.barplot(x=gen_ratio.index, y=gen_ratio.values, palette = clrs)\nax.axhline(0, color=\"k\", clip_on=False) \nax.set_xlabel(\"Gender\")\nax.set_ylabel(\"Percentage\")\n_= ax.set_title(\"Percentage of Women & Men\")","7a0dae81":"# df_N = pd.DataFrame(data = [len(df17),len(df18),len(df19), len(df20)],\n#                           columns = ['Numresponses'])\ndf_F = pd.DataFrame(data = [(df17['GenderSelect'] == 'Female').sum(), (df18['Gender'] == 'Female').sum(),\n                        (df19['Gender'] == 'Female').sum(), (df20['Gender'] == 'Woman').sum()],columns = ['Females'])\ndf_M = pd.DataFrame(data = [(df17['GenderSelect'] == 'Male').sum(), (df18['Gender'] == 'Male').sum(),\n                             (df19['Gender'] == 'Male').sum(), (df20['Gender'] == 'Man').sum()], columns = ['Males'])\n#df_A = pd.concat([df_N, df_F,df_M] , axis=1)\ndf_A = pd.concat([df_F,df_M] , axis=1)                     \ndf_A.index = ['2017','2018','2019','2020']\ndfAf = df_A.copy()\ndfAf = dfAf.reset_index()\ndfAf = dfAf.rename(columns={\"index\":\"Year\"})\ndfAf[\"%W\"] = ((dfAf[\"Females\"]\/dfAf[\"Males\"])*100).round(2)\nfig = go.Figure()\nfig.add_trace(go.Bar(x=dfAf['Year'],\n                y=dfAf['Males'],\n                name='Men',\n                marker_color='rgb(55, 83, 109)'\n                   ))\nfig.add_trace(go.Bar(x=dfAf['Year'],\n                y=dfAf['Females'],\n                name='Women',\n                marker_color='indianred'\n                ))\n# Change the bar mode\nfig.update_layout(\n    title='Count of Men and Women for 2017, 2018, 2019, 2020',\n    xaxis_title=\"Year\",\n    yaxis_title=\"Count\",\n    barmode='group', plot_bgcolor='rgb(250,250,250)')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black',zeroline=False)\n                \nfig.update_yaxes(showline=True, linewidth=2, linecolor='black',\n                showgrid=True, gridwidth=1, gridcolor='#d6d5d2')\nfig.show()\nimport plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=dfAf['Year'], y=dfAf['%W'],\n                    mode='lines+markers',\n                         \n                    name='lines+markers',\n                    line_color = 'firebrick',\n                    marker_color='#0834a3'))\n\n# Edit the layout\nfig.update_layout(title='Percentage of Women to Men(2017,2018,2019,2020)',\n                   xaxis_title='Year',\n                   yaxis_title='% of Women',\n                   plot_bgcolor='white',\n                   width=600,\n                   height=300)\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black',zeroline=False)\nfig.update_yaxes(showline=True, linewidth=2, linecolor='black',\n                showgrid=True, gridwidth=1, gridcolor='#d6d5d2')\nfig.show()","f8d03c83":"df20 = df20.sort_values('Age')\ndf20[\"Male_Age_Group\"]=df20[df20[\"Gender\"]==\"Man\"][\"Age\"]\ndf20[\"Female_Age_Group\"]=df20[df20[\"Gender\"]==\"Woman\"][\"Age\"]\ndf20[[\"Male_Age_Group\",\"Female_Age_Group\"]].iplot(kind=\"histogram\", bins=11, \\\n         theme=\"white\", title=\"Men & Women Age Group Categories\",\n         xTitle='Age Groups', yTitle='Count')","78e8db44":"dfEW = df20[df20['Gender'] == 'Woman']['Education'].value_counts(sort = True)\ndfEM = df20[df20['Gender'] == 'Man']['Education'].value_counts(sort = True)\nlabsW = dfEW.keys()\ndataW = list(dfEW.values)\nlabsM = dfEM.keys()\ndataM = list(dfEM.values)\n# Creating explode data \nexplode = (0.0, 0.0, 0.1, 0.1, 0.4, 0.1) \n  \n# Creating color parameters \ncolors = ( \"#a8a7a5\", \"#a3cfc5\", \"#d9c0a0\", \n          \"#f7ec74\", \"#d4bdf0\", \"#cff2c7\" ) \n# Wedge properties \nwp = { 'linewidth' : 1, 'edgecolor' : \"black\" }\n\n# Creating autocpt arguments \ndef func(pct, allvalues): \n    absolute = int(pct \/ 100.*np.sum(allvalues)) \n    return \"{:.1f}%\\n({:d})\".format(pct, absolute)\n# Creating plot \n#fig, ax = plt.subplots(figsize =(10, 7)) \nfig, (ax1, ax2) = plt.subplots(1, 2,figsize =(10, 8))\nwedges, texts, autotexts = ax1.pie(dfEW,  \n                                  autopct = lambda pct: func(pct, dataW), \n                                  explode = explode,  \n                                  labels = labsW, \n                                  shadow = True, \n                                  colors = colors, \n                                  startangle = 90, \n                                  wedgeprops = wp, \n                                  textprops = dict(color =\"black\")) \n\nwedgesM, textsM, autotextsM = ax2.pie(dfEM,  \n                                  autopct = lambda pct: func(pct, dataM), \n                                  explode = explode,  \n                                  labels = labsM, \n                                  shadow = True, \n                                  colors = colors, \n                                  startangle = 90, \n                                  wedgeprops = wp, \n                                  textprops = dict(color =\"black\")) \n\n#Adding legend \nplt.legend(wedges, labsW, \n          title =\"Education\", \n          loc =\"lower left\",\n          bbox_to_anchor =(1, 0, 0.5, 1)) \n  \n# plt.setp(autotexts, size = 8, weight =\"bold\") \nfig.suptitle('Education',y=.9)\nax1.set_title(\"Women\",pad=30, fontsize=18, color='red') \n#ax2.use_sticky_edges = False\nax2.set_title(\"Men\", pad=30, fontsize=18, color='blue')\n# show plot \nplt.show() ","5be8556a":"dfC = df20.copy()\ndfC = dfC[dfC[\"Country\"] != \"Other\"]\ndfCF=dfC.groupby('Country')['Gender'].apply(lambda x: (x=='Woman').count()).reset_index(name='ctFemales')\ndfCF = dfCF.sort_values(by='ctFemales', ascending=False)\ndfCF = dfCF.iloc[:20,:]\nx = dfCF['Country']\nvalues = dfCF['ctFemales']\nmy_range=range(1,len(dfCF)+1)\n# # Vertical version.\nplt.figure(figsize=(12,6))\nplt.hlines(y=my_range, xmin=0, xmax=dfCF['ctFemales'], color='red')\nplt.plot(values, my_range, \"D\")\nplt.yticks(my_range, x)\nplt.title(\"Top 20 Countries with highest Female respondents\", loc='center',fontsize=16)\nplt.xlabel('Count, fig(1)', fontsize=14)\nplt.ylabel('Countries', fontsize=14)\nplt.show()\n\ndfC1 = dfC.groupby(['Country','Gender']).size().unstack()[['Man','Woman']]\ndfC1['%W'] = ((dfC1['Woman']\/dfC1['Man'])*100).round(0)\ndfC1 = dfC1.astype(int)\ndfCW = dfC1.sort_values('Woman', ascending=False).head(20)\ndfCWP = dfC1.sort_values('%W', ascending=False).head(20)\ngF = pd.DataFrame({'group':dfCW.index.tolist(), 'value1':dfCW.Woman , 'value2':dfCW.Man })\nmy_range=range(1,len(gF.index)+1)\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,8))\nplt.hlines(y=my_range, xmin=gF['value1'], xmax=gF['value2'], color='blue', alpha=1)\nplt.scatter(gF['value1'], my_range, color='red', alpha=1, label='Females')\nplt.scatter(gF['value2'], my_range, color='green', alpha=1 , label='Males', marker='D')\nplt.legend()\n# Add title and axis names\nplt.yticks(my_range, gF['group'])\nplt.title(\"Top 20 Countries with highest Female respondents to Males\", loc='center', fontsize=16)\nplt.xlabel('Num of Females & Males')\nplt.ylabel('Countries')\nplt.xlabel('Count, fig(2)', fontsize=14)\nplt.ylabel('Countries', fontsize=14)\nplt.show()\ngF1 = pd.DataFrame({'group':dfCWP.index.tolist(), 'value1':dfCWP.Woman , 'value2':dfCWP.Man })\nmy_range=range(1,len(gF1.index)+1)\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(12,8))\nplt.hlines(y=my_range, xmin=gF1['value1'], xmax=gF1['value2'], color='blue', alpha=1)\nplt.scatter(gF1['value1'], my_range, color='red', alpha=1, label='Females')\nplt.scatter(gF1['value2'], my_range, color='green', alpha=1 , label='Males', marker='D')\nplt.legend()\n# Add title and axis names\nplt.yticks(my_range, gF1['group'])\nplt.title(\"Top 20 Countries with %Woman to Man respondents\", loc='center',fontsize=16)\nplt.xlabel('Num of Females & Males')\nplt.ylabel('Countries')\nplt.xlabel('Count, fig(3)', fontsize=14)\nplt.ylabel('Countries', fontsize=14)\nplt.show()","5971ac88":"dfVLM = df_2020.loc[df_2020[\"Q2\"] == 'Man', [i for i in df_2020.columns if 'Q14' in i]]\nq14M_count = pd.Series(dtype='int')\nfor i in dfVLM.columns:\n    q14M_count[dfVLM[i].value_counts().index[0]] = dfVLM[i].count()\ndM = q14M_count.to_dict()\ndfVLW = df_2020.loc[df_2020[\"Q2\"] == 'Woman', [i for i in df_2020.columns if 'Q14' in i]]\nq14W_count = pd.Series(dtype='int')\nfor i in dfVLW.columns:\n    q14W_count[dfVLW[i].value_counts().index[0]] = dfVLW[i].count()\ndW = q14W_count.to_dict()\nwordcloudw = WordCloud()\nwordcloudm = WordCloud()                              \nwordcloudw.generate_from_frequencies(frequencies=dW) \nwordcloudm.generate_from_frequencies(frequencies=dM)\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize =(14, 10))\nax1.imshow(wordcloudw)\nax1.axis('off')\nax1.set_title(\"Women\")\nax2.imshow(wordcloudm)\nax2.axis('off')\nax2.set_title(\"Men\")\nfig.suptitle('Data Visualization Libraries',fontsize=18, C='red') \nfig.tight_layout()\nfig.subplots_adjust(top=1.4)\nfig.show()","ea54e402":"dfSal = df20.copy()\ndfSal = dfSal.loc[~dfSal['Sal'].isna()]\ndfSal['Sal'] = dfSal['Sal'].apply(lambda x: \"500,000-700,000\" if x == '> $500,000' else x)\ndfSal['Sal'] = dfSal['Sal'].apply(lambda x: \"0-999\" if x == '$0-999' else x)\ndfSal['Sal'] = dfSal['Sal'].str.replace(',','')\ndfSal['S1'] = dfSal['Sal'].str.split('-').str[0].astype(int)\ndfSal['S2'] = dfSal['Sal'].str.split('-').str[1].astype(int)\ndfSal['Salary'] = (dfSal['S1']+dfSal['S2'])\/2\ndfSal['Salary'] = dfSal['Salary'].apply(math.ceil)\ndfSal = dfSal.drop(['S1','S2'], axis=1)\n#dfSal.loc[dfSal['NumYrs'] == 'I have never written code', \"NumYrs\"]= \"No Code\"\ndfC = df20.copy()\ndfC = dfC[dfC[\"Country\"] != \"Other\"]\ndfC1 = dfC.groupby(['Country','Gender']).size().unstack()[['Man','Woman']]\ndfC1['%W'] = ((dfC1['Woman']\/dfC1['Man'])*100).round(0)\ndfC1 = dfC1.astype(int)\ndfCW = dfC1.sort_values('Woman', ascending=False)#.head(20)\ndfCWP = dfC1.sort_values('%W', ascending=False)#.head(20)\ncwList = list(dfCW.index)\ncwpList = list(dfCWP.index)\ndfTest = dfSal.loc[dfSal['Country'].isin(cwpList[:17])]\ndfT = dfTest.groupby(['Country','Title','Gender']).size().unstack().reset_index()\ndfT.columns.name = None\ndfT['%W'] = ((dfT['Woman']\/dfT['Man'])*100).round()\ndfT = dfT[['Country','Title','%W']].fillna(0)\ndfT = dfT.set_index('Country').sort_index()\ndfT = dfT.groupby([dfT.index, 'Title'])['%W'].first().unstack()\ndfT = dfT.fillna(0)\ndfA = dfT.T\npalette_mw = sns.color_palette(\"Greys_r\", 12) + sns.color_palette(\"Greens\", 12)\nplt.figure(figsize=(14,8))\nax = sns.heatmap(dfA, vmax=100, vmin=0, center = 50, cmap = palette_mw, square=True, \n           annot=True, linewidths=2, \n           cbar_kws = {\"label\":\"% of women\", \"shrink\":0.5})\nax.set_xlabel('Countries, fig(1)', fontsize=14)\nax.set_ylabel('Title', fontsize=14)\nax.set_xticklabels(ax.get_xticklabels(),rotation=90)\n_ = ax.set_title(\"Top 17 countries(%Women to Men) by Title\",fontsize=16, C='blue')","86568753":"dfAA = dfSal.loc[dfSal['Country'].isin(cwList[:12])]\ndfAA = dfAA.groupby(['Country','Education','Gender']).size().unstack().reset_index()\ndfAA.columns.name = None\ndfAA['%W'] = ((dfAA['Woman']\/dfAA['Man'])*100).round()\ndfAA = dfAA[['Country','Education','%W']]\ndfAA = dfAA.set_index('Country').sort_index()\ndfAA = dfAA.groupby([dfAA.index, 'Education'])['%W'].first().unstack()\ndfAA = dfAA.fillna(0)\ndfAA = dfAA.T\ndef plot_waffle(proportion, axes = gca, numrows=4, numcols = 4, orient = \"v\", **kwargs):\n    \n    numfields = numrows*numcols \n    filled = int(round(proportion * numfields))\n\n    filledvec = np.concatenate([np.ones(filled),np.zeros(numfields-filled)])\n    if orient == \"h\":\n        filledvec = filledvec.reshape(numrows, numcols)\n        filledvec = filledvec\n    else: \n        filledvec = filledvec.reshape(numcols, numrows)\n        filledvec = filledvec.T \n        if orient != \"v\": \n            print(\"invalid orientation, defaulting to vertical\")\n        \n    axes.pcolormesh(filledvec, edgecolors='w', **kwargs)\n    axes.set_aspect('equal');\n    axes.axis('off');\nf, a = plt.subplots(nrows = dfAA.shape[0]+1, ncols = dfAA.shape[1]+1, figsize=(13,6))\nplt.subplots_adjust(wspace = 0.2, hspace = 0.2)\nwaffle_params = {\"numrows\":4, \"numcols\":4, \"orient\":\"v\"}\nparams = {\"linewidth\":2, \"cmap\": ListedColormap(sns.color_palette(\"YlGnBu_r\", 3))}\nfor row, ax_row in enumerate(a[1:,1:]): \n    for col, ax_col in enumerate(ax_row):\n        plot_waffle(dfAA.iloc[row, col]\/100, ax_col, **waffle_params, **params)\na[0][0].axis('off')\n\n# print column names\nfor i, ax in enumerate(a[0,1:]):\n    ax.axis('off')\n    ax.text(x = 0.5, y = 0, s = dfAA.columns[i], rotation = 90, ha = \"center\", va=\"bottom\")\n\n# print row labels (df index)\nfor i, ax in enumerate(a[1:,0]):\n    ax.axis('off')\n    ax.text(x = -0.25, y = 0.5, s = '\\n'.join(wrap(dfAA.index[i], 12)), rotation = 0, va = \"center\")\n    \n    # add legend\nrect = lambda color: plt.Rectangle((0,0),1,1, color=color)\nlegend = a[0,0].legend([rect(params['cmap'](2)), rect(params['cmap'](0))], [\"women\", \"men\"])  \n_= f.suptitle('Proportion between men and women in Education ', fontsize=16)","704bb6d0":"#Bar plot\ndata = dfAA.T.reset_index()\ndata.head()\ndata_mean = pd.DataFrame(data.mean(), columns=['women'])\ndata_mean['men'] = 100 - data_mean['women']\ndata_mean.head()\nmarker_dict = {\n 'China':\"o\",\n 'India':\"p\",\n 'Germany':'v',\n 'Indonesia':\"D\",\n 'Nigeria':\"^\",\n 'Iran':\"<\",\n 'Russia':\">\",\n 'Canada':\"d\",\n 'United States':\"s\",\n 'Brazil':\"P\",\n 'Turkey':\"X\",\n 'United Kingdom':\"*\",\n}\n#pastel2 = sns.color_palette('Pastel2', 2)\nseta = sns.color_palette('husl', 2)\n# background bar plot\nax = data_mean.plot.bar(stacked=True, cmap = ListedColormap(seta), \n                        width=1, edgecolor=\"k\", \n                        alpha=1, figsize=(7,4))\n# scatterplot for each country\nfor ind in arange(data.shape[0]):\n    plt.scatter(y=list(data.iloc[ind][1:].values), \n                x=list(arange(data.shape[1]-1)+(ind+0.5-round((data.shape[0])\/2))*0.06), \n                marker=marker_dict[data['Country'].iloc[ind]], s=60, \n                  edgecolor=\"k\", linewidth=1, \n                 label=data['Country'].iloc[ind], \n                axes = ax, \n               zorder=10)\n\n# make markers transparent\nfor paths in ax.collections:\n    paths.set_facecolor('None')\n  \n# empty plot to get an empty legend entry\nplt.plot(np.NaN, np.NaN, '-', color='none', label=' ', axes=ax)\n\n# create legend\nhandles, labels = ax.get_legend_handles_labels()\nplt.legend(handles[1:-2]+handles[0:1]+handles[-2::][::-1], \n           labels[1:-2]+labels[0:1]+labels[-2::][::-1], \n           loc='right', bbox_to_anchor=(1.4, 0.5), \n          edgecolor=\"w\")\n\n# adjust axes\nplt.ylim(0,100)\nplt.ylabel('% women')\n\nplt.xlim(-0.5, 4.5)\n_ = plt.title(\"% Women and mean across countries in Education\")\n","3a5da906":"dfTree = dfSal.loc[dfSal['Country'].isin(cwList[:14])]\nfig = px.treemap(dfTree, \n                 path=['Country','NumYrs','Gender'], \n                 values='Salary',\n                 color='Country',\n                 width=800, height=600,\n                 title=\"Salary per Gender per NumYrs per Country\")\n                 \nfig.show()","55a1eaa3":"dfT = dfTest.groupby(['Country','Education','Gender'])[\"Salary\"].mean().round(0).unstack().reset_index()\ndfT.columns.name = None\ndfT = dfT.iloc[:,[0,1,2,6]]\nfig = px.scatter(dfT, x=\"Man\", y=\"Woman\", color=\"Country\", hover_data=[\"Education\"])                \nfig.add_trace(go.Scatter(x=dfT['Man'], y=(dfT['Man']*.5),\n                    mode='lines',\n                    name='50% of Men Wages',\n                        line=dict(color='black', width=2)))\nfig.add_trace(go.Scatter(x=dfT['Man'], y=(dfT['Man']*.3),\n                    mode='lines',\n                    name='30% of Men Wages',\n                        line=dict(color='#cfcbc2', width=2)))\nfig.add_trace(go.Scatter(x=dfT['Man'], y=(dfT['Man']*.6),\n                    mode='lines',\n                    name='60% of Men Wages',\n                        line=dict(color='gray', width=2)))\nfig.add_trace(go.Scatter(x=dfT['Man'], y=(dfT['Man']*.7),\n                    mode='lines',\n                    name='70% of Men Wages',\n                        line=dict(color='#7a563c', width=2)))\nfig.add_trace(go.Scatter(x=dfT['Man'], y=(dfT['Man']),\n                    mode='lines',\n                    name='Equal Wages',\n                        line=dict(color='#f7051d', width=2)))\nfig.update_traces(marker=dict(size=7,\n                              line=dict(width=2,\n                                        color='DarkSlateGrey')),\n                  selector=dict(mode='markers'))\nfig.update_layout(\n    title='The Gender Wage Gap',\n    xaxis_title=\"Men's Average Salary degree wise\",\n    yaxis_title=\"Women's Average Salary degree wise\",\n    width=742,\n    height=600,\n    hovermode=\"x\",\n    plot_bgcolor='rgb(250,250,250)')\nfig.update_xaxes(showline=True, linewidth=2, linecolor='black',zeroline=False)\n                \nfig.update_yaxes(showline=True, linewidth=2, linecolor='black',\n                showgrid=True, gridwidth=1, gridcolor='#d6d5d2', zeroline =False)\nfig.show()\n","ca6dbef7":"df2 = df20.copy()\nimport plotly.graph_objs as gobj\ngkk1 = df2.groupby(['Country','Gender']).size()\ngkk1 = pd.DataFrame(gkk1).reset_index()\ngkk1 = gkk1.rename(columns={0:'count'})\ngkk1 = gkk1.pivot(index='Country', columns='Gender', values='count')\ngkk1.columns.name = None\ngkk1['Woman'] = gkk1['Woman'].astype(int)\ngkk1['Man'] = gkk1['Man'].astype(int)\ngkk1 =gkk1.sort_values(by = 'Woman', ascending = False)\ngkn = gkk1.reset_index()\ndata1 = dict(type = 'choropleth',\n            locations = gkn['Country'],\n            locationmode = 'country names',\n            colorscale= 'Reds',\n            #text= ['IND','NEP','CHI','PAK','BAN','BHU', 'MYN','SLK'],\n            z= gkn['Woman'],#[1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0],\n            colorbar = {'title':'Country Colours', 'len':200,'lenmode':'pixels' })\n#initializing the layout variable\nlayout = dict(title = 'The Nationality of Female Respondents in 2020',geo = {'scope':'world'})\n# Initializing the Figure object by passing data and layout as arguments.\ncol_map = gobj.Figure(data = [data1],layout = layout)\n#plotting the map\niplot(col_map)\n# dfW['GDP per capita'] = dfW['GDP per capita'].str.replace('$','').str.replace(',','')\n# dfW['GDP per capita'] = dfW['GDP per capita'].astype(int)\n# dfW['population'] = dfW['population'].str.replace(',','')\n# dfWGDP = dfW[dfW['Country'].isin(cwpList[:20])]\n# dfWGDP = dfWGDP[['Country','population','GDP per capita']]","1a885b31":"About <span style=\"background-color: #FFFF00\">20% of Woman<\/span> have responded to the kaggle survey. This is more or less reflective of Woman in Tech in general. Now let's see if their representaion has increased over the years (2017-2020).","abc9290c":"From the above fig(1) if you just go by number of Female responders, <span style=\"background-color: #aced98\">highest are - India, USA, Brazil, Japan, Russia. Though India, USA<\/span>, the numbers by themselves don't mean much because they are highly populated and so we have to consider population to really see where they stand.\n\nFrom the above fig(2) comparing  Female responders to male, highest are - India, USA, Brazil, UK, Turkey. UK, Turkey proportionatly more female respondents.\n\nFig(3) tells us a different story. <span style=\"background-color: #aced98\">In Malaysia, Tunisia, Iran, Ireland, Philippines though number of responders are small, percentage of Women compared to Men are more.<\/span>This is interesting, is it related to GDP?\n\n### Analysis of Preferences based on Gender\n\n\n","173762fa":"Tree map\n* Clearly US takes the lion's share, way ahead than any other Country.\n* In US Men with 20+ years, 10-20 years get much higher share of the Salary.\n* Women are somewhat represented in the US in the 3-5 yrs and 5-10 yrs categories.\n\nGender Wage Gap Graph\n* Averaging, only about 10% of Women earn more than Men with the same degree.\n* Most Women earn less than 50% of men \n* In Singapore,Portugal,Taiwan,  Women with Doct0ral degree on an average earn more than Men\n\n### Under representated Countries","ab15b709":"## Gender Disparity in Data Science\n\nThe field of computing increasingly has developed a gender gap. Let's explore the gender disparity and try to figure out the reasons.\n\nIn the early days of computers and computing, women were well-represented in the field. But lately, we see an increasing disparity.\n\n<img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcT26XQ7ED9XgqGLtrG_dyu8Km-MPfOtip_VfQ&usqp=CAU\" width=\"300\">\n\n\nDespite on going efforts to bridge gender diversity in tech, women are still underrepresented, underpaid and often discriminated against in the tech industry. The gender gap is still wider in STEM occupations than in non-STEM   \n\n<img src=https:\/\/www.statnews.com\/wp-content\/uploads\/2019\/11\/AdobeStock_138936733-768x432.jpg alt=\"whatever\" width=\"400\">\n\n\nLet's explore the 2020 Kaggle Survey to see if any progress is made by women in bridging the gap. Let's try to figure out reasons and find some possible solutions.\n\nStarting with percentage of Women to Men who participated in the 2020 survey.\n","bab735e7":"Most men are in the 25-29(3128) to age group wheras most women are in the 22-24(886) age group. As the age increases(20-24 to 70+) there is <strong><span style=\"background-color: #fa4f46\">continious decrease in women responders from 886 in 22-24 age group to 29 in 60-69 and 2 in 70+.<\/span><\/strong>\n\nFrom an article- [https:\/\/www.cio.com\/article\/3516012\/women-in-tech-statistics-the-hard-truths-of-an-uphill-battle.html] by  Sarah K. White ,Senior Writer, CIO \n\n\nStatistics from the following seven facets of IT work, ranging from higher education to workplace environment, paint a clear picture of the challenges women face in finding equal footing in a career in IT.\n* The employment gap\n* The degree gap\n* The retention gap\n* Workplace culture gap\n* The founder gap\n* The pay gap\n* IT leadership\n\nSince we have degree data of the correspndents lets check and see if there is Degree Gap between the male and female data scientists.","33ead5f6":"Fig(1)\n* Overall participation of Women is far less, see more black than green.\n* Women DBA\/Data Engineers are only in India and Taiwan in the top 17 countries.\n* More Women working as Product\/Project Manager, Research Scientist, Statistician\n* More are from Ireland, Malaysia, Tunisia\n\nFig(2)\n* In Indonesia more women with doctaral degree, equal to men with Bachelor's degree and none with Professional degree\n* Overall very few women with professional Degree and very few from Turkey\n\nFig(3)\n* As the bar graph shows % Women in each Education category is very less.\n* % of Women with Doctoral Degree is slightly higher.\n* Indonesia mean of % Women is way higher for Doctal Degree\n\n### Analysis of Pay Divide\n","05a4ce8f":"* Scikit-learn is the most popular ML framework for both Men and Women.\n* Next, TensorFlow, Keras, PyTorch, Xgboost are equally popular for both.\n* <span style=\"background-color: #aced98\">Looks like Caret is preffered compared to CatBoost by Women.<\/span>\n* <span style=\"background-color: #adeddf\">Fast.ai\tand Prophet are not to their liking.<\/span>\n\n* Matplotlib and Seaborn are equally popular with both Men and Women.\n* <span style=\"background-color: #aced98\">Ggplot\/ggplot2  is preferred by more Women compared to Men.<\/span>\n* <span style=\"background-color: #adeddf\">Plotly\/ plotly Express is Men's choice compared to Women.<\/span>\n\n\n### Analysis of Women to Men by Title and Education by Countries","2896769c":"Percentage of Woman with Masters degree, Doctoral degree compared to Woman with other degrees is more than Men's percentage with Master's Degree and Doctoral degrees. Comparatively more men with High school and some college to women in the same category. This means more men who do not have degrees are into Data Science compared to Women. Interesting!\n\n### Analysis of Female respondents by Country","af6eff96":"### Conclusion\n\nThere are many hurdles for Girl child and Women.\n\nWe have to focus on bringing social and political stability especially to Countries in Africa. \n\nEducating girls from Primary to College.\n\nHelp in Reducing povert worldwide. distribution of wealth.\n\nImprove Safety. \n\nGoing forward hoping more and more girls enroll in STEM braches.","ace6d92a":"From the above two graphs, total number of responders were the highest in 2018. But percentage wise we see the <span style=\"background-color: #aced98\">highest increase from 2019 to 2020, nearly 4.6%<\/span> which is good. Looks like the particpation of women is increasing in the right direction.","d41e739a":"Many Countries from African Continent are not represented. Few in Europe-noticably Norway, Finland, few from South America, and Central America. \n\nPoverty, Lack of Education, Social and Political imbalances contribute to Women not participating propotinately.\n\n<img src=\"https:\/\/stories.plancanada.ca\/wp-content\/uploads\/2017\/10\/6-reasons-education.jpg\" width=\"400\">\n\n"}}