{"cell_type":{"0459461d":"code","f97926ba":"code","f0b811d5":"code","53d477ba":"code","f9883f8c":"code","5c252a9a":"code","5402784e":"code","4e91d7ee":"code","6993439d":"code","5ca2563e":"code","b9d3af77":"code","d7cb29ba":"code","21e30251":"code","b860d47b":"code","402b1533":"code","003c3b4a":"code","d8add137":"code","8790fe0d":"code","ccad9fd6":"code","9cf03ebd":"code","7f971609":"code","d7f95a11":"code","8adc2ecb":"code","7fbe3039":"code","a01a2da3":"code","bc57f96e":"code","be7e01bb":"code","662cf5f5":"code","dce4e1c8":"code","6598d1ea":"code","4f0b568a":"code","3f23ebe3":"code","498716c3":"code","e3963e4f":"code","ef514a6c":"markdown","5f81d6c1":"markdown","954c75b9":"markdown","e5adcb03":"markdown","fadab67b":"markdown","27dd3a20":"markdown"},"source":{"0459461d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f97926ba":"!pip install numpy","f0b811d5":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","53d477ba":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","f9883f8c":"train.info()","5c252a9a":"test.info()","5402784e":"all = pd.concat([train, test], sort = False)\nall.info()","4e91d7ee":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","6993439d":"all.info()","5ca2563e":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","b9d3af77":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","d7cb29ba":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","21e30251":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","b860d47b":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","402b1533":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","003c3b4a":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","d8add137":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","8790fe0d":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","ccad9fd6":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","9cf03ebd":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","7f971609":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","d7f95a11":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","8adc2ecb":"from sklearn.linear_model import LogisticRegression","7fbe3039":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","a01a2da3":"predictions = logmodel.predict(X_test)\npredictions","bc57f96e":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","be7e01bb":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","662cf5f5":"all_test.head()","dce4e1c8":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","6598d1ea":"TestForPred.info()","4f0b568a":"t_pred = logmodel.predict(TestForPred).astype(int)","3f23ebe3":"PassengerId = all_test['PassengerId']","498716c3":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","e3963e4f":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","ef514a6c":"****Train\/Test Split","5f81d6c1":"****Check Accuracy","954c75b9":"****Extra Features:","e5adcb03":"****Final Predictions","fadab67b":"****Confusion Matrix","27dd3a20":"****Build Logistic Model"}}