{"cell_type":{"de114cd2":"code","b66500d2":"code","59899914":"code","bdd77bf8":"code","54c3090c":"code","4efe8087":"code","fe750692":"code","82636326":"code","f42d9914":"code","f1e6ba1c":"code","7aa453f2":"code","376c8b9b":"code","fe04fad4":"code","e9cc806c":"code","25e9aabf":"code","9686426c":"code","1c3c2fb6":"code","4fb8cba5":"code","ff955782":"code","cd2bab44":"code","637149f9":"code","fbee1047":"code","ddd138f9":"code","ca61535e":"code","12c2afe6":"code","ac9c03d4":"code","7112867b":"code","963d3bc3":"code","56b6faf8":"code","5077143f":"code","e8b649ba":"code","2ac10716":"code","46bba984":"code","c3170650":"code","b0d4ef10":"code","cd475fcb":"code","6e1a325c":"code","17fb78c9":"code","0cfbc19f":"markdown"},"source":{"de114cd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b66500d2":"train_data=pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/train.csv',nrows=10_000_000)\ntrain_data.head()","59899914":"train_data.shape","bdd77bf8":"train_data.info()","54c3090c":"test_data=pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/test.csv')\ntest_data.head()","4efe8087":"test_data.info()","fe750692":"train_data.isna().sum()","82636326":"train_data['Difference_longitude']=np.abs(np.asarray(train_data['pickup_longitude']-train_data['dropoff_longitude']))\ntrain_data['Difference_latitude']=np.abs(np.asarray(train_data['pickup_latitude']-train_data['dropoff_latitude']))\n\n\ntest_data['Difference_longitude']=np.abs(np.asarray(test_data['pickup_longitude']-test_data['dropoff_longitude']))\ntest_data['Difference_latitude']=np.abs(np.asarray(test_data['pickup_latitude']-test_data['dropoff_latitude']))","f42d9914":"print(f'Before Dropping null values: {len(train_data)}')\ntrain_data.dropna(inplace=True)\nprint(f'After Dropping null values: {len(train_data)}')","f1e6ba1c":"plot = train_data[:2000].plot.scatter('Difference_longitude', 'Difference_latitude')","7aa453f2":"train_data=train_data[(train_data['Difference_longitude']<5.0)&(train_data['Difference_latitude']<5.0)]","376c8b9b":"ls1=list(train_data['pickup_datetime'])\nfor i in range(len(ls1)):\n    ls1[i]=ls1[i][11:-7:]\ntrain_data['pickuptime']=ls1    \n\n\n\nls1=list(test_data['pickup_datetime'])\nfor i in range(len(ls1)):\n    ls1[i]=ls1[i][11:-7:]\ntest_data['pickuptime']=ls1   ","fe04fad4":"train_data.head()","e9cc806c":"ls1=list(train_data['pickup_datetime'])\nfor i in range(len(ls1)):\n    ls1[i]=ls1[i][:-4:]\n    ls1[i]=pd.Timestamp(ls1[i])\n    ls1[i]=ls1[i].weekday()\ntrain_data['Weekday']=ls1\n\n\nls1=list(test_data['pickup_datetime'])\nfor i in range(len(ls1)):\n    ls1[i]=ls1[i][:-4:]\n    ls1[i]=pd.Timestamp(ls1[i])\n    ls1[i]=ls1[i].weekday()\ntest_data['Weekday']=ls1","25e9aabf":"train_data.head()","9686426c":"test_data.head()","1c3c2fb6":"train_data.drop('pickup_datetime',inplace=True,axis=1)\ntest_data.drop('pickup_datetime',inplace=True,axis=1)","4fb8cba5":"train_data['Weekday'].replace(to_replace=[i for i in range(0,7)],\n                            value=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],\n                              inplace=True)\ntest_data['Weekday'].replace(to_replace=[i for i in range(0,7)],\n                              value=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],\n                              inplace=True)","ff955782":"train_one_hot=pd.get_dummies(train_data['Weekday'])\ntest_one_hot=pd.get_dummies(test_data['Weekday'])\ntrain_data=pd.concat([train_data,train_one_hot],axis=1)\ntest_data=pd.concat([test_data,test_one_hot],axis=1)","cd2bab44":"train_data.drop('Weekday',axis=1,inplace=True)\ntest_data.drop('Weekday',axis=1,inplace=True)","637149f9":"ls1=list(train_data['pickuptime'])\nfor i in range(len(ls1)):\n    z=ls1[i].split(':')\n    ls1[i]=int(z[0])*100+int(z[1])\ntrain_data['pickuptime']=ls1\n\n\nls1=list(test_data['pickuptime'])\nfor i in range(len(ls1)):\n    z=ls1[i].split(':')\n    ls1[i]=int(z[0])*100+int(z[1])\ntest_data['pickuptime']=ls1","fbee1047":"train_data.head()","ddd138f9":"R = 6373.0\nlat1 =np.asarray(np.radians(train_data['pickup_latitude']))\nlon1 = np.asarray(np.radians(train_data['pickup_longitude']))\nlat2 = np.asarray(np.radians(train_data['dropoff_latitude']))\nlon2 = np.asarray(np.radians(train_data['dropoff_longitude']))\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\nls1=[] \na = np.sin(dlat\/2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\ndistance = R * c\n\n    \ntrain_data['Distance']=np.asarray(distance)*0.621\n\n\n\nlat1 =np.asarray(np.radians(test_data['pickup_latitude']))\nlon1 = np.asarray(np.radians(test_data['pickup_longitude']))\nlat2 = np.asarray(np.radians(test_data['dropoff_latitude']))\nlon2 = np.asarray(np.radians(test_data['dropoff_longitude']))\n\ndlon = lon2 - lon1\ndlat = lat2 - lat1\n \na = np.sin(dlat \/ 2)**2 + np.cos(lat1) * np.cos(lat2) * np.sin(dlon\/ 2)**2\nc = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\ndistance = R * c\ntest_data['Distance']=np.asarray(distance)*0.621","ca61535e":"R = 6373.0\nlat1 =np.asarray(np.radians(train_data['pickup_latitude']))\nlon1 = np.asarray(np.radians(train_data['pickup_longitude']))\nlat2 = np.asarray(np.radians(train_data['dropoff_latitude']))\nlon2 = np.asarray(np.radians(train_data['dropoff_longitude']))\n\nlat3=np.zeros(len(train_data))+np.radians(40.6413111)\nlon3=np.zeros(len(train_data))+np.radians(-73.7781391)\ndlon_pickup = lon3 - lon1\ndlat_pickup = lat3 - lat1\nd_lon_dropoff=lon3 -lon2\nd_lat_dropoff=lat3-lat2\na1 = np.sin(dlat_pickup\/2)**2 + np.cos(lat1) * np.cos(lat3) * np.sin(dlon_pickup\/ 2)**2\nc1 = 2 * np.arctan2(np.sqrt(a1), np.sqrt(1 - a1))\ndistance1 = R * c1\ntrain_data['Pickup_Distance_airport']=np.asarray(distance1)*0.621\n\na2=np.sin(d_lat_dropoff\/2)**2 + np.cos(lat2) * np.cos(lat3) * np.sin(d_lon_dropoff\/ 2)**2\nc2 = 2 * np.arctan2(np.sqrt(a2), np.sqrt(1 - a2))\ndistance2 = R * c2\n\n    \ntrain_data['Dropoff_Distance_airport']=np.asarray(distance2)*0.621\n\n\n\nlat1 =np.asarray(np.radians(test_data['pickup_latitude']))\nlon1 = np.asarray(np.radians(test_data['pickup_longitude']))\nlat2 = np.asarray(np.radians(test_data['dropoff_latitude']))\nlon2 = np.asarray(np.radians(test_data['dropoff_longitude']))\n\nlat3=np.zeros(len(test_data))+np.radians(40.6413111)\nlon3=np.zeros(len(test_data))+np.radians(-73.7781391)\ndlon_pickup = lon3 - lon1\ndlat_pickup = lat3 - lat1\nd_lon_dropoff=lon3 -lon2\nd_lat_dropoff=lat3-lat2\na1 = np.sin(dlat_pickup\/2)**2 + np.cos(lat1) * np.cos(lat3) * np.sin(dlon_pickup\/ 2)**2\nc1 = 2 * np.arctan2(np.sqrt(a1), np.sqrt(1 - a1))\ndistance1 = R * c1\ntest_data['Pickup_Distance_airport']=np.asarray(distance1)*0.621\n\na2=np.sin(d_lat_dropoff\/2)**2 + np.cos(lat2) * np.cos(lat3) * np.sin(d_lon_dropoff\/ 2)**2\nc2 = 2 * np.arctan2(np.sqrt(a2), np.sqrt(1 - a2))\ndistance2 = R * c2\n\n    \ntest_data['Dropoff_Distance_airport']=np.asarray(distance2)*0.621","12c2afe6":"train_data['Distance']=np.round(train_data['Distance'],2)\ntrain_data['Pickup_Distance_airport']=np.round(train_data['Pickup_Distance_airport'],2)\ntrain_data['Dropoff_Distance_airport']=np.round(train_data['Dropoff_Distance_airport'],2)\ntest_data['Distance']=np.round(test_data['Distance'],2)\ntest_data['Pickup_Distance_airport']=np.round(test_data['Pickup_Distance_airport'],2)\ntest_data['Dropoff_Distance_airport']=np.round(test_data['Dropoff_Distance_airport'],2)","ac9c03d4":"train_data.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis=1,inplace=True)\ntest_data.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude'],axis=1,inplace=True)","7112867b":"train_data['Difference_longitude']=np.abs(train_data['Difference_longitude']-np.mean(train_data['Difference_longitude']))\ntrain_data['Difference_longitude']=train_data['Difference_longitude']\/np.var(train_data['Difference_longitude'])","963d3bc3":"train_data['Difference_latitude']=np.abs(train_data['Difference_latitude']-np.mean(train_data['Difference_latitude']))\ntrain_data['Difference_latitude']=train_data['Difference_latitude']\/np.var(train_data['Difference_latitude'])","56b6faf8":"test_data['Difference_longitude']=np.abs(test_data['Difference_longitude']-np.mean(test_data['Difference_longitude']))\ntest_data['Difference_longitude']=test_data['Difference_longitude']\/np.var(test_data['Difference_longitude'])\n\ntest_data['Difference_latitude']=np.abs(test_data['Difference_latitude']-np.mean(test_data['Difference_latitude']))\ntest_data['Difference_latitude']=test_data['Difference_latitude']\/np.var(test_data['Difference_latitude'])","5077143f":"train_data.shape","e8b649ba":"test_data.shape","2ac10716":"from sklearn.model_selection import train_test_split\nX=train_data.drop(['key','fare_amount'],axis=1)\ny=train_data['fare_amount']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.01,random_state=80)","46bba984":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression(normalize=True)\nlr.fit(X_train,y_train)\nprint(lr.score(X_test,y_test))","c3170650":"pred=np.round(lr.predict(test_data.drop('key',axis=1)),2)","b0d4ef10":"pd.read_csv('\/kaggle\/input\/new-york-city-taxi-fare-prediction\/sample_submission.csv').head()","cd475fcb":"Submission=pd.DataFrame(data=pred,columns=['fare_amount'])\nSubmission['key']=test_data['key']\nSubmission=Submission[['key','fare_amount']]","6e1a325c":"Submission.set_index('key',inplace=True)","17fb78c9":"Submission.to_csv('Submission.csv')","0cfbc19f":"Latitude: 40.6413111 Longitude: -73.7781391 Of John F Kennedy Airport"}}