{"cell_type":{"39f04bdd":"code","1bace307":"code","1948c61e":"code","4321aee4":"code","867ab0d2":"code","3f47056a":"code","e296c99c":"code","97cbdc4f":"code","3d88ad1c":"code","d2f52da1":"code","131dc6b5":"code","bc6877b7":"code","e0147510":"code","f169ab4c":"code","5da109f0":"code","bad17549":"code","c723a590":"code","906e717c":"code","5d3f7328":"code","56b34c1b":"code","20495bde":"code","66eb9e1c":"code","1483dc47":"code","18221418":"code","ab10de95":"code","3a0950c2":"code","18f25ff6":"code","eb44b045":"code","c2b39f0f":"code","ee1ef538":"code","0247ac00":"code","73cb2269":"code","51ad7ffc":"code","a24401e7":"code","4b226fe6":"code","e789a7ea":"code","9f01e8af":"code","a18e6aa6":"code","8454469b":"code","0b6b2d84":"code","8bc52742":"code","6ab37bb8":"code","e59114d5":"code","119a4d79":"code","6e77de5c":"code","9a1cf101":"code","0513c1fe":"code","663550e3":"code","545f8c1a":"code","38f09783":"code","d1829f24":"code","4d7e6665":"code","4d6eb732":"code","d06b0b1d":"code","0e7d5a2a":"code","01fa2385":"code","8170b4ed":"code","09a34a2e":"code","da671d14":"code","2d486c78":"code","aa14c88d":"code","32e225ad":"code","20850ac2":"code","8a3b4b83":"code","3e74cf97":"code","81693e91":"code","c22e2da1":"code","9faf2f14":"code","19117373":"code","bf15d417":"code","a008480b":"code","83cd5caf":"code","c685ed49":"code","da92d5cc":"code","fcbdf48f":"code","9ac7eb8d":"code","05917cbd":"code","c80ba77d":"code","fa4fb23c":"code","0cc51a12":"code","ffc85cf1":"code","6013f025":"code","d5bfaeaa":"code","9ee299a8":"code","258883ca":"code","ff0c67e5":"code","3ca700c2":"code","28793f4d":"code","1163459c":"code","2fd66c1a":"code","e0c0f233":"code","8bd64db1":"code","9c07a553":"code","70854a12":"code","30f6cf1c":"code","72471c3a":"code","9ef9cc88":"code","bea88766":"code","6cca214c":"code","b799c05a":"code","8d4857ff":"code","6da489f4":"code","7de2c3be":"code","2c85c0c1":"code","77408384":"code","561d9a5c":"code","a5bf7b42":"code","04caa18d":"code","cfc5c082":"code","765d87ab":"code","91d0427c":"code","1f72112b":"code","488ead94":"code","8287975e":"code","42df20c8":"code","9640ade8":"code","e5a3cf18":"code","34a1c910":"code","0ba07311":"code","0849e2dc":"code","1ef017eb":"code","4ff4e4b2":"code","74f972fb":"code","8fea0a74":"code","2780304c":"code","aab1257b":"code","f9df76e8":"code","09c611f1":"code","2748c555":"markdown","78f27266":"markdown","426270af":"markdown","1a142715":"markdown","6e00c2d5":"markdown","5a3f8b3d":"markdown","72da0dee":"markdown","757a5595":"markdown","3ef9fa18":"markdown","124720f2":"markdown","b5d8f2a1":"markdown","bfa68faa":"markdown","f7f9ade6":"markdown","c2ddad55":"markdown","277dd87f":"markdown","be248121":"markdown","6110a617":"markdown","beff7f7d":"markdown","4912fb41":"markdown","a89c9303":"markdown","d5675919":"markdown","6adb8ad7":"markdown","5b948fa2":"markdown","9538d151":"markdown","70e75be8":"markdown","9981d188":"markdown","db8f7ba7":"markdown","cac1016b":"markdown","babae36e":"markdown","853cea74":"markdown","e62f6d60":"markdown","59ba72f9":"markdown","c7187ef1":"markdown","89228203":"markdown","ae8ea2f9":"markdown","aeb8462a":"markdown","bc19d976":"markdown","2f88fedb":"markdown","2b8166d9":"markdown","4481ebf4":"markdown","b67d69b2":"markdown","029f1457":"markdown","0245eaf8":"markdown","e5f3732e":"markdown","03cad312":"markdown","12c5087d":"markdown","17625134":"markdown","b12afe51":"markdown","5bd88a9c":"markdown","0eae3ba3":"markdown","cd3d240a":"markdown","c2430c73":"markdown","04a11105":"markdown","a0adadfe":"markdown","dc2443bc":"markdown","265c326d":"markdown","ba6ffece":"markdown","e52ade53":"markdown","4e92c7ac":"markdown","d1f3a465":"markdown","84ea9168":"markdown","890424be":"markdown","885857b8":"markdown","152a01a3":"markdown","c500e15e":"markdown","43d0a135":"markdown","7225f794":"markdown","0a2ac624":"markdown","c95609ef":"markdown","9b047dc3":"markdown","fb05a0cb":"markdown","d1bafd93":"markdown","132c7ae9":"markdown","a3ae5499":"markdown","9d574a54":"markdown","b1826cdd":"markdown","f2a5e38b":"markdown","0742a417":"markdown","feec6572":"markdown","57cbe5ad":"markdown"},"source":{"39f04bdd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\n%matplotlib inline\n\nplt.rc(\"font\", size=18)\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)","1bace307":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","1948c61e":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","4321aee4":"print(\"Train observations\", train.shape[0])\nprint(\"Test observations\", test.shape[0])\nprint(\"Test Size\", \"{:.0%}\".format(test.shape[0]\/(train.shape[0]+test.shape[0])))","867ab0d2":"train.head()","3f47056a":"train.info()\ntrain.isnull().sum()","e296c99c":"train.describe()","97cbdc4f":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize = (10,5))\nmale = train[train.Sex == 'male']\nfemale = train[train.Sex == 'female']\nsns.distplot(female[female.Survived == 1].Age.dropna(), bins = 20,\n             label = 'Survived', ax = ax[0], kde=False)\nsns.distplot(female[female.Survived == 0].Age.dropna(), bins = 20,\n             label = 'Not Survived', ax = ax[0], kde=False)\nax[0].legend()\nax[0].set_title('Female')\nsns.distplot(male[male.Survived == 1].Age.dropna(), bins = 20,\n             label = 'Survived', ax = ax[1], kde=False)\nsns.distplot(male[male.Survived == 0].Age.dropna(), bins = 20,\n             label = 'Not Survived', ax = ax[1], kde=False)\nax[1].legend()\nax[1].set_title('Male')\n\nprint(\"Total count of Male surviors\", male[male.Survived == 1].shape[0], \n      \"| Percentage of Total Male\", \"{:.0%}\".format(male[male.Survived == 1].shape[0]\/male.shape[0]))\nprint(\"Total count of Female surviors\", female[female.Survived == 1].shape[0], \n      \"| Percentage of Total Female\", \"{:.0%}\".format(female[female.Survived == 1].shape[0]\/female.shape[0]))","3d88ad1c":"from numpy import mean\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize = (10,5))\nsns.barplot(x = 'SibSp', y = 'Survived', data = train, ci=None, color='salmon', estimator = mean, ax = ax[0])\nax[0].set_title('Mean Survival of Siblings or Spouse')\nsns.barplot(x = 'Parch', y = 'Survived', data = train, ci=None, color = 'indigo', estimator = mean, ax = ax[1])\nax[1].set_title('Mean Survival of Parents or Children')","d2f52da1":"def create_matrix(variable1, variable2):\n    if max(train[variable1].unique()) > max(train[variable2].unique()):\n        number = max(train[variable1].unique())+1\n    else:\n        number = max(train[variable2].unique())+1\n    \n    matrix_data = np.array([[np.empty for i in range(number)] for j in range(number)])\n    for i in range(number):\n        for j in range(number):\n            matrix_data[i, j] = 'child or parent'\n            matrix_data[6, j] = ''\n            matrix_data[7, j] = ''\n            matrix_data[0, 0] = 'adult'\n            matrix_data[1, 0] = 'adult'\n            if i>1:\n                matrix_data[i, j] = 'child'\n            if j>2:\n                matrix_data[i, j] = 'parent'\n            if j ==7 or 8:\n                matrix_data[i, 7] = ''\n                matrix_data[i, 8] = ''\n    \n    for i in range(number):\n        for j in range(number):\n            if j not in train[train[variable1] == i][variable2].unique():\n                matrix_data[i, j] = ''\n                \n    columns = [variable2+ ' ' + str(i) for i in range(number)]\n    matrix = pd.DataFrame(data = matrix_data, columns = columns)\n    matrix[variable1] = [variable1+ ' ' + str(i) for i in range(number)]\n    matrix = matrix.set_index(variable1)\n    matrix = matrix.drop(['Parch 7', 'Parch 8'], axis =1)\n    return matrix","131dc6b5":"create_matrix('SibSp', 'Parch')","bc6877b7":"def generate_persona(dataset, persona_list):\n    for i in range(dataset.shape[0]):\n        if dataset.Age[i] <=14:\n            persona_list.append('child')\n        if dataset.Age[i] > 14:\n            if dataset.Parch[i] > 0:\n                persona_list.append('parent')\n            elif dataset.Parch[i] == 0:\n                persona_list.append('adult')\n        if math.isnan(dataset.Age[i]) == True:\n            if dataset.SibSp[i] in [0, 1] and dataset.Parch[i] == 0:\n                persona_list.append('adult')\n            elif dataset.SibSp[i] >=2 and dataset.Parch[i] < 3:\n                persona_list.append('child')\n            elif dataset.Parch[i] >2:\n                persona_list.append('parent')\n            else:\n                persona_list.append('child or parent')\n    dataset['persona'] = persona_list","e0147510":"persona_list_train = []\npersona_list_test = []\npersona_lists = [persona_list_train, persona_list_test]\ndata = [train, test]\nfor i in range(2):\n    generate_persona(data[i], persona_lists[i])","f169ab4c":"fig, ax = plt.subplots(nrows=1, ncols=1, figsize = (10,5))\nsns.countplot(x = 'persona', data = train, color='salmon', hue = 'Sex', ax=ax)\nax.set_title('Count by Persona')","5da109f0":"from numpy import sum\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize = (10,5))\nsns.barplot(x = 'persona', y = 'Survived', data = train[train.Survived ==1], ci=None, color='salmon', hue = 'Sex', estimator = sum, ax=ax)\nax.set_title('Count Survival by Persona')","bad17549":"fig, ax = plt.subplots(nrows=1, ncols=1, figsize = (10,5))\nsns.barplot(x = 'persona', y = 'Survived', data = train, ci=None, color='indigo', hue = 'Sex', estimator = mean, ax=ax)\nax.set_title('Mean Survival by Persona')","c723a590":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (12,7))\nsns.countplot(x = 'Embarked', data = train, color='salmon', hue = 'persona', ax = ax[0,0])\nax[0,0].set_title('Count by Embarking Point')\nsns.countplot(x = 'Pclass', data = train, color = 'indigo', hue = 'persona', ax = ax[0,1])\nax[0,1].set_title('Count by Passenger Class')\nsns.barplot(x = 'Embarked', y = 'Survived', data = train, ci=None, color='salmon', \n            hue = 'persona', estimator = mean, ax = ax[1,0])\nax[1,0].set_title('Mean Survival by Embarking Point')\nsns.barplot(x = 'Pclass', y = 'Survived', data = train, ci=None, color = 'indigo', hue = 'persona', \n            estimator = mean, ax = ax[1,1])\nax[1,1].set_title('Mean Survival by Passenger Class')\nplt.tight_layout()","906e717c":"def generate_titles(dataset, titles_list):\n    for i in dataset.Name:\n        split = i.split(' ')\n        for j in range(len(split)):\n            if ',' in split[j]:\n                if split[j+2] == 'Countess.':\n                    titles_list.append(split[j+2])\n                else:\n                    titles_list.append(split[j+1])\n    dataset['titles'] = titles_list","5d3f7328":"def generate_surnames(dataset, surname_list):\n    for i in dataset.Name:\n        surname_list.append(i.split(' ')[0][:-1])","56b34c1b":"train_titles = []\ntest_titles = []\ntitles_lists = [train_titles, test_titles]\ndata = [train, test]\nfor i in range(2):\n    generate_titles(data[i], titles_lists[i])","20495bde":"create_matrix('SibSp', 'Parch')","66eb9e1c":"train[train.persona == 'child'].titles.unique()","1483dc47":"train[train.persona == 'parent'].titles.unique()","18221418":"train[train.persona == 'adult'].titles.unique()","ab10de95":"train[train.persona == 'child or parent'].titles.unique()","3a0950c2":"train[train.persona == 'child or parent']","18f25ff6":"train.loc[(train.persona == 'child or parent')&(train.titles == 'Master.'), 'persona'] = 'child'","eb44b045":"train[train.persona == 'child or parent'].titles.unique()","c2b39f0f":"train.isnull().sum()","ee1ef538":"train_df = train.copy()\ntest_df = test.copy()","0247ac00":"train_df = train_df.drop(['Cabin'], axis=1)\ntest_df = test_df.drop(['Cabin'], axis = 1)","73cb2269":"train_df[train_df.Embarked.isnull()]","51ad7ffc":"train[train.Embarked.isnull()]","a24401e7":"train_df.Embarked.describe()","4b226fe6":"replace_value = 'S'\ndata = [train_df, test_df]\n\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(replace_value)","e789a7ea":"train_df.persona.unique()","9f01e8af":"print(\"Null adult persona\", train_df[train_df.persona == 'adult'].Age.isnull().sum())\nprint(\"Median age\", train_df[train_df.persona == 'adult'].Age.median())\ntrain_df[train_df.persona == 'adult'].describe()","a18e6aa6":"train_df.loc[(train_df.Age.isnull())&(train_df.persona=='adult'),'Age']= train_df[train_df.persona == 'adult'].Age.median()","8454469b":"test_df.loc[(test_df.Age.isnull())&(test_df.persona=='adult'),'Age']= test_df[test_df.persona == 'adult'].Age.median()","0b6b2d84":"print(\"Null child or parent persona\", train_df[train_df.persona == 'child or parent'].Age.isnull().sum())\nprint(\"Median age\", train_df[train_df.persona == 'child or parent'].Age.median())\ntrain_df[train_df.persona == 'child or parent'].describe()","8bc52742":"create_matrix('SibSp', 'Parch')","6ab37bb8":"pd.set_option(\"display.max_rows\", 1000)\ntrain_df[train_df.persona == 'child or parent']","e59114d5":"train_df.loc[(train_df.persona == 'child or parent')&(train.titles == 'Mrs.'), 'persona'] = 'parent'\ntrain_df.loc[(train_df.persona == 'child or parent')&(train.titles == 'Miss.'), 'persona'] = 'child'\ntrain_df.loc[(train_df.persona == 'child or parent')&(train.titles == 'Mr.'), 'persona'] = 'parent'","119a4d79":"test_df.loc[(test_df.persona == 'child or parent')&(test.titles == 'Mrs.'), 'persona'] = 'parent'\ntest_df.loc[(test_df.persona == 'child or parent')&(test.titles == 'Master.'), 'persona'] = 'child'","6e77de5c":"print(\"Null child persona\", train_df[train_df.persona == 'child'].Age.isnull().sum())\nprint(\"Median age\", train_df[train_df.persona == 'child'].Age.median())\ntrain_df[train_df.persona == 'child'].describe()","9a1cf101":"train_df.loc[(train_df.Age.isnull())&(train_df.persona=='child'),'Age']= train_df[train_df.persona == 'child'].Age.median()","0513c1fe":"test_df.loc[(test_df.Age.isnull())&(test_df.persona=='child'),'Age']= test_df[test_df.persona == 'child'].Age.median()","663550e3":"print(\"Null parent persona\", train_df[train_df.persona == 'parent'].Age.isnull().sum())\nprint(\"Median age\", train_df[train_df.persona == 'parent'].Age.median())\ntrain_df[train_df.persona == 'parent'].describe()","545f8c1a":"train_df.loc[(train_df.Age.isnull())&(train_df.persona=='parent'),'Age']= train_df[train_df.persona == 'parent'].Age.median()","38f09783":"test_df.loc[(test_df.Age.isnull())&(test_df.persona=='parent'),'Age']= test_df[test_df.persona == 'parent'].Age.median()                                                                 ","d1829f24":"train_df.isnull().sum()","4d7e6665":"test_df.isnull().sum()","4d6eb732":"test_df.loc[test_df.Fare.isnull(), 'Fare'] = test_df.Age.mean()","d06b0b1d":"test_df.isnull().sum()","0e7d5a2a":"train_df.head(2)","01fa2385":"train_df.Sex = train_df.Sex.map({'female': 1, 'male': 0}).astype(int)","8170b4ed":"test_df.Sex = test_df.Sex.map({'female': 1, 'male': 0}).astype(int)","09a34a2e":"train_df.Embarked.unique()","da671d14":"train_df.Embarked = train_df.Embarked.map({'Q': 0, 'C': 1, 'S': 2}).astype(int)","2d486c78":"test_df.Embarked = test_df.Embarked.map({'Q': 0, 'C': 1, 'S': 2}).astype(int)","aa14c88d":"train_df.persona.unique()","32e225ad":"train_df.persona = train_df.persona.map({'adult': 0, 'parent': 1, 'child': 2}).astype(int)","20850ac2":"test_df.persona = test_df.persona.map({'adult': 0, 'parent': 1, 'child': 2}).astype(int)","8a3b4b83":"train_df.titles.unique()","3e74cf97":"train_df.titles = train_df.titles.replace(['Don.', 'Dr.', 'Major.', 'Lady.', 'Sir.',\n                                       'Col.', 'Capt.', 'Countess.', 'Jonkheer.', 'Rev.'], 'Rare')\ntrain_df.titles = train_df.titles.replace('Mlle.', 'Miss.')\ntrain_df.titles = train_df.titles.replace('Ms.', 'Miss.')\ntrain_df.titles = train_df.titles.replace('Mme.', 'Miss.')","81693e91":"test_df.titles = test_df.titles.replace(['Don.', 'Dr.', 'Major.', 'Lady.', 'Sir.',\n                                       'Col.', 'Capt.', 'Countess.', 'Jonkheer.', 'Rev.'], 'Rare')\ntest_df.titles = test_df.titles.replace('Mlle.', 'Miss.')\ntest_df.titles = test_df.titles.replace('Ms.', 'Miss.')\ntest_df.titles = test_df.titles.replace('Mme.', 'Miss.')","c22e2da1":"train_df.titles.unique()","9faf2f14":"test_df.titles.unique()","19117373":"test_df.titles = test_df.titles.replace('Dona.', 'Rare')","bf15d417":"train_df.titles = train_df.titles.map({\"Mr.\": 1, \"Miss.\": 2, \"Mrs.\": 3, \"Master.\": 4, \"Rare\": 5}).astype(int)","a008480b":"test_df.titles = test_df.titles.map({\"Mr.\": 1, \"Miss.\": 2, \"Mrs.\": 3, \"Master.\": 4, \"Rare\": 5}).astype(int)","83cd5caf":"train_df.head(2)\ntest_df.head(2)","c685ed49":"from sklearn import preprocessing\ncontinuous_features = ['Fare','Age']\ndata = [train_df, test_df]\nfor dataset in data:\n    for col in continuous_features:\n        transf = dataset[col].values.reshape(-1,1)\n        scaler = preprocessing.StandardScaler().fit(transf)\n        dataset[col] = scaler.transform(transf)","da92d5cc":"train_df = pd.get_dummies(train_df, columns=['Embarked','titles','Parch','SibSp','Pclass', 'persona'], drop_first = False)\ntest_df = pd.get_dummies(test_df, columns=['Embarked','titles','Parch','SibSp','Pclass', 'persona'], drop_first = False)","fcbdf48f":"train_df = train_df.drop(['PassengerId', 'Name', 'Ticket'], axis=1)\ntest_df = test_df.drop(['PassengerId', 'Name', 'Ticket'], axis=1)","9ac7eb8d":"pd.set_option(\"display.max_columns\", 40)\ntrain_df.head(2)\ntest_df.head(2)","05917cbd":"def get_gini_impurity(survived_count, total_count):\n    survival_prob = survived_count\/total_count\n    not_survival_prob = (1 - survival_prob)\n    random_observation_survived_prob = survival_prob\n    random_observation_not_survived_prob = (1 - random_observation_survived_prob)\n    mislabelling_survided_prob = not_survival_prob * random_observation_survived_prob\n    mislabelling_not_survided_prob = survival_prob * random_observation_not_survived_prob\n    gini_impurity = mislabelling_survided_prob + mislabelling_not_survided_prob\n    return gini_impurity","c80ba77d":"gini_impurity_starting_node = get_gini_impurity(342, 891)\ngini_impurity_starting_node","fa4fb23c":"gini_impurity_male = get_gini_impurity(109, 577)\nprint(\"male gini\", gini_impurity_male)\ngini_impurity_female = get_gini_impurity(233, 314)\nprint(\"female gini\", gini_impurity_female)","0cc51a12":"#Weighted =impurity\nmen_weight = 577\/891\nwomen_weight = 314\/891\nweighted_gini_impurity_sex_split = (gini_impurity_male * men_weight) + (gini_impurity_female * women_weight)\n\nsex_gini_decrease = weighted_gini_impurity_sex_split - gini_impurity_starting_node\nsex_gini_decrease","ffc85cf1":"print(\"adult observations\", train_df[(train_df.persona_0 ==1)].shape[0])\nprint(\"adult survived\", train_df[(train_df.persona_0 ==1)&(train_df.Survived == 1)].shape[0])","6013f025":"gini_impurity_adult = get_gini_impurity(226, 668)\nprint(\"adult gini\", gini_impurity_adult)\ngini_impurity_nonadult = get_gini_impurity((342-226), (891-668))\nprint(\"nonadult gini\", gini_impurity_nonadult)","d5bfaeaa":"#Weighted =impurity\nadult_weight = 668\/891\nnonadult_weight = (891-668)\/891\nweighted_gini_impurity_adult_split = (gini_impurity_adult * adult_weight) + (gini_impurity_nonadult * nonadult_weight)\n\nadult_gini_decrease = weighted_gini_impurity_adult_split - gini_impurity_starting_node\nadult_gini_decrease","9ee299a8":"print(\"child observations\", train_df[(train_df.persona_2 ==1)].shape[0])\nprint(\"child survived\", train_df[(train_df.persona_2 ==1)&(train_df.Survived == 1)].shape[0])\nprint(\"nonchild observations\", train_df[(train_df.persona_2 ==1)].shape[0])\nprint(\"child survived\", train_df[(train_df.persona_2 ==1)&(train_df.Survived == 1)].shape[0])","258883ca":"gini_impurity_child = get_gini_impurity(50, 96)\nprint(\"child gini\", gini_impurity_child)\ngini_impurity_nonchild = get_gini_impurity((342-50), (891-96))\nprint(\"non-child gini\", gini_impurity_nonchild)","ff0c67e5":"#Weighted =impurity\nchild_weight = 96\/891\nnonchild_weight = (891-96)\/891\nweighted_gini_impurity_child_split = (gini_impurity_child * child_weight) + (gini_impurity_nonchild * nonchild_weight)\n\nchild_gini_decrease = weighted_gini_impurity_child_split - gini_impurity_starting_node\nchild_gini_decrease","3ca700c2":"print(\"mr observations\", train_df[(train_df.titles_1 ==1)].shape[0])\nprint(\"mr survived\", train_df[(train_df.titles_1 ==1)&(train_df.Survived == 1)].shape[0])","28793f4d":"gini_impurity_mr = get_gini_impurity(81, 517)\nprint(\"mr gini\", gini_impurity_mr)\ngini_impurity_nonmr = get_gini_impurity((342-81), (891-517))\nprint(\"non-mr gini\", gini_impurity_nonmr)","1163459c":"#Weighted =impurity\nmr_weight = 517\/891\nnonmr_weight = (891-517)\/891\nweighted_gini_impurity_mr_split = (gini_impurity_mr * mr_weight) + (gini_impurity_nonmr * nonmr_weight)\nmr_gini_decrease = weighted_gini_impurity_mr_split - gini_impurity_starting_node\nmr_gini_decrease","2fd66c1a":"train_df.head(2)","e0c0f233":"def get_impurity_change(dataset, variable):\n    \n    def get_gini_impurity(survived_count, total_count):\n        survival_prob = survived_count\/total_count\n        not_survival_prob = (1 - survival_prob)\n        random_observation_survived_prob = survival_prob\n        random_observation_not_survived_prob = (1 - random_observation_survived_prob)\n        mislabelling_survided_prob = not_survival_prob * random_observation_survived_prob\n        mislabelling_not_survided_prob = survival_prob * random_observation_not_survived_prob\n        gini_impurity = mislabelling_survided_prob + mislabelling_not_survided_prob\n        return gini_impurity\n    \n    obs = dataset[(dataset[variable] ==1)].shape[0]\n    survived_obs = dataset[(dataset[variable] ==1)&(dataset.Survived == 1)].shape[0]\n    total_obs = dataset.shape[0]\n    total_surv = dataset[dataset.Survived == 1].shape[0]\n    gini_impurity_1 = get_gini_impurity(survived_obs, obs)\n    gini_impurity_2 = get_gini_impurity((total_surv-survived_obs), (total_obs - obs))\n    gini_impurity_starting_node = get_gini_impurity(total_surv, total_obs)\n    weight1 = obs\/total_obs\n    weight2 = (total_obs - obs)\/total_obs\n    weighted_gini = (gini_impurity_1 * weight1) + (gini_impurity_2 * weight2)\n    gini_decrease = weighted_gini - gini_impurity_starting_node\n    \n    return gini_decrease","8bd64db1":"get_impurity_change(train_df, 'Sex')","9c07a553":"select_columns = train_df.columns.to_list()\nselect_columns = select_columns[1:2] + select_columns[4:] #remove non binary variables","70854a12":"for i in select_columns:\n    print(i, get_impurity_change(train_df, i))","30f6cf1c":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier","72471c3a":"from sklearn.model_selection import train_test_split\n\nX_train = train_df.drop(['Survived'], axis = 1).values\ny_train = train_df['Survived']\nX_test = test_df.drop(['Parch_9'], axis = 1).values","9ef9cc88":"decision_tree = DecisionTreeClassifier(max_depth = 3)\ndecision_tree.fit(X_train, y_train)","bea88766":"y_pred = decision_tree.predict(X_test)","6cca214c":"from sklearn.metrics import accuracy_score\nacc_decision_tree = round(decision_tree.score(X_train, y_train) * 100, 2)\nacc_decision_tree","b799c05a":"len(y_pred)","8d4857ff":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test['PassengerId']\nsubmission['Survived'] = y_pred\nsubmission = submission.set_index('PassengerId')","6da489f4":"submission.to_csv('titanic_submission_03022020.csv')","7de2c3be":"from sklearn.model_selection import GridSearchCV","2c85c0c1":"params = {'max_leaf_nodes': list(range(2, 100)), \n          'min_samples_split': [2, 3, 4], \n          'criterion':['entropy', 'gini']}\n          \ngrid_search_cv = GridSearchCV(DecisionTreeClassifier(random_state=42), params, verbose=1, cv=3)\n\ngrid_search_cv.fit(X_train, y_train)","77408384":"grid_search_cv.best_params_","561d9a5c":"tree_clf = DecisionTreeClassifier(criterion= 'entropy', max_leaf_nodes = 47, min_samples_split = 4, \n                                  random_state=42)","a5bf7b42":"tree_clf.fit(X_train, y_train)","04caa18d":"y_pred1 = tree_clf.predict(X_test)","cfc5c082":"acc_decision_tree = round(tree_clf.score(X_train, y_train) * 100, 2)\nacc_decision_tree","765d87ab":"submission2 = pd.DataFrame()\nsubmission2['PassengerId'] = test['PassengerId']\nsubmission2['Survived'] = y_pred1\nsubmission2 = submission2.set_index('PassengerId')","91d0427c":"submission2.to_csv('titanic_submission_03022020_sub2.csv')","1f72112b":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()","488ead94":"params = {'bootstrap': [True],\n          'max_depth': list(range(3, 11)), \n          'max_features': [\"sqrt\", \"log2\"], \n          'max_leaf_nodes':list(range(6,10))}\n\ngrid_search = GridSearchCV(model, params, \n                          verbose = 1)\n\ngrid_search.fit(X_train, y_train)","8287975e":"grid_search.best_params_","42df20c8":"randomf_tree = RandomForestClassifier(bootstrap = True, max_depth = 9, max_features = 'log2', max_leaf_nodes =8,\n                                     random_state = 0)","9640ade8":"randomf_tree.fit(X_train, y_train)","e5a3cf18":"y_pred2 = randomf_tree.predict(X_test)","34a1c910":"acc_random_tree = round(randomf_tree.score(X_train, y_train) * 100, 2)\nacc_random_tree","0ba07311":"submission3 = pd.DataFrame()\nsubmission3['PassengerId'] = test['PassengerId']\nsubmission3['Survived'] = y_pred2\nsubmission3 = submission3.set_index('PassengerId')","0849e2dc":"submission3.to_csv('titanic_submission_03022020_sub3.csv')","1ef017eb":"params = {'bootstrap': [True],\n          'max_depth': list(range(3, 16)), \n          'max_features': [\"auto\", \"sqrt\", \"log2\"], \n          'max_leaf_nodes':list(range(6,20))}\n\ngrid_search = GridSearchCV(model, params, \n                          verbose = 1, cv =10)\n\ngrid_search.fit(X_train, y_train)","4ff4e4b2":"grid_search.best_params_","74f972fb":"randomf_tree_new = RandomForestClassifier(bootstrap = True, max_depth = 9, max_features = 'sqrt', max_leaf_nodes =18)","8fea0a74":"randomf_tree_new.fit(X_train, y_train)","2780304c":"y_pred4 = randomf_tree_new.predict(X_test)","aab1257b":"acc_random_tree_5 = round(randomf_tree_new.score(X_train, y_train) * 100, 2)\nacc_random_tree_5","f9df76e8":"submission5 = pd.DataFrame()\nsubmission5['PassengerId'] = test['PassengerId']\nsubmission5['Survived'] = y_pred4\nsubmission5 = submission5.set_index('PassengerId')","09c611f1":"submission5.to_csv('titanic_submission_04022020_2.csv')","2748c555":"Result:\n* Score of: 0.79425, which is higher","78f27266":"Interestingly, we can see that all the unknown cases of child or parent are in fact 'NaN' age values. The only thing we can correct for now is the 'Master' category which is used for children.","426270af":"**Initial comments on the variables:**\n- Survived is our **Target**; we know that 38% of the training set survived the Titanic. This we will need to take into consideration later on if we are to use classification alogirthms which are sensitive to this inbalance in the data.\n- Pclass: this is a proxy for social economic class; there are a total of 3 classes [1,2,3]\n- Name: this is a string from which we can derive the social class (eg. 'Sir')\n- Sex: M and F; we will subtitute this will dummy variables [0,1]\n- Sibsp: number of siblings on board; indicator of size of family\n- ParchL: number of parents, children on board; indicator of size of family\n- Fare: Continuous variable;\n- Age: continuous variable\n- PassengerID and Ticker are assumed to be randomly identifiers assigned to each customer, therefore we do not consider this for our analysis.\n- Embarked: categorical variable with 3 :(C = Cherbourg; Q = Queenstown; S = Southampton); they will need to be changed to dummy variables.\n- Null values with **Age** and **Cabin** and **Embarked**; we will deal with these in **Section 2.**","1a142715":"### Submission 1:","6e00c2d5":"Let's clean some of the data so we can have some distinct groupings:","5a3f8b3d":"This indicates the position around the ship; however, since there are a lot of null variables we will not consider this for feature engineer. We will drop this altogether.","72da0dee":"# Machine Learning From Titanic Disaster:","757a5595":"**Result:**\n* The train accuracy is very high (much higher than the first submission)\n* The score for submission 2 was 0.76555 which is lower than submission 1: 0.78947\n\nWhy is this the case?\n* Overfitting","3ef9fa18":"We have already created categories for the different 'personas' for our EDA, but now we are going to continue by looking at other variables and what categories we can create from them.","124720f2":"**From logic we know the following:**<br>\n*SibSp:*<br>\n* If SibSp == 0: This is either a SINGLE CHILD or a SINGLE ADULT<br>\n* If the SibSp > 1: This is most likely a CHILD in a FAMILY (exception: Adult with more than one sibling or with spouse and sibling)<br>\n\n*Parch:*<br>* If Parch == 0: This is an ADULT OR  (with potentially a)<br>\n<br>\n\n*SibSp AND Parch*<br>* If Parch == 0 AND SibSp ==0: This is a SINGLE ADULT<br>\n\nIf we take the variables as follows:<br>\n(1) SINGLE CHILD OR FAMILY<br>\n(2) SINGLE ADULT\n\nWe can construct the following matrix:","b5d8f2a1":"### 4.1: Decision Tree","bfa68faa":"Preliminary conclusions on 'personas':\n<br>\n- Females have a higher a survival rate all round, however it is particularly prevalent with the adult class;\n- Parents who are male have may have a smaller chance of survival;","f7f9ade6":"#### Titles: ","c2ddad55":"Therefore, we can see that splitting by Adult for the starting node is negligent in decreasing impurity.","277dd87f":"### Part III: Dummy Variables","be248121":"Therefore, if we compare splitting by Sex to Starting node - we see that the Gini impurity decreases by 13%","6110a617":"**Child**:","beff7f7d":"Reference: https:\/\/www.kaggle.com\/dmilla\/introduction-to-decision-trees-titanic-dataset","4912fb41":"**Now we can plot our results:**","a89c9303":"### Contents Overview:","d5675919":"**Aim** of this challenge is: *use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.*","6adb8ad7":"**The context** of this challenge is that the Titanic ... ","5b948fa2":"### Initial Comments:","9538d151":"#### Dummy Variables for non-binary Categorical Data:","70e75be8":"#### Age:","9981d188":"Now let's drop the last few variables we do not need:","db8f7ba7":"**Preliminary Observations:**\n* We can see that the highet survival rates are with 1 and 2 for SibSp; wiht 1, 2 and 3 with Parch\n* Survival rate drops a lot wiht 3, 4 for SibSp and 5 for Parch;\n\n","cac1016b":"Now that we have titles, though, we can verify and correct this as we constructed this on certain assumptions that need to be checked with the 'titles' information.","babae36e":"### Variable by Variable Analysis:","853cea74":"#### Persona:","e62f6d60":"Can we automate this?","59ba72f9":"List of variables to conver to dummy:\n* Sex\n* Embarked\n* persona\n* titles","c7187ef1":"Here is where we have 177 null values and we have to be careful of what strategy is best to deal with this. A simple strategy might be to use the median of the age to fill the NaN values - however, as we have seen Age varies greatly by other factors, this may not be the best way of doing so.\n\n<br>\nWhat we are going to do here then is to return to our grouping of the different personas to help us deal with this.","89228203":"#### Cabin:","ae8ea2f9":"### Aim and Context:","aeb8462a":"### Personas, revisited:","bc19d976":"#### Sex:","2f88fedb":"### Submission 5:","2b8166d9":"#### Age and Sex:","4481ebf4":"First, let's generate the list of titles and the list of surnames:","b67d69b2":"Let's replace 'child' nan with the median:","029f1457":"Let's replace 'adult' nan with the median:","0245eaf8":"#### Embarked:","e5f3732e":"Here we can see that this - so far - is the highest decrease in gini.","03cad312":"## 0. Introduction and Contents Overview:","12c5087d":"### Titles:","17625134":"The way decision trees work is by using a starting node impurity (that is, \"*probability of mislabelling an element assuming that the element is randomly labelled according the the distribution of all the classes in the set.*\"). Then, as we add more decisions (i.e. depth of tree increases) we seek to reduce that impurity.\n<br>\n\nLet's begin by trying to find that starting node impurity. If we recall, the 342 out of 891 survived in train set.","b12afe51":"Now that we know which one is the most significant (Title, Mr.) then we can move onto finding the optimum tree-depth:","5bd88a9c":"### Part II: Cleaning and Dealing with Null Values:","0eae3ba3":"#### Embarked:","cd3d240a":"[..]","c2430c73":"#### Age and Fare (Continuous Variables) Scaling:","04a11105":"From the above, a median substitution for the personas: 'adult' and 'child' seem appropriate (no need for 'parent' as there are no instances of null values). However, for child or parent, a median value of 25 would be an option if there truly is no way of differentiating the two, but let's see if we can unpack this further.\n<br>\n\nIf we recall our matrix, we used the following conditions to define this persona category:","a0adadfe":"## 1. Exploratory Data Analysis:","dc2443bc":"**Title Mr:**","265c326d":"**Here we can make the following observations:**\n* Both a higher absolute number and relative number of females survived the Titanic\n* For male survivors, the higher peaks are wiht the very low end (young children of 0-4 years old and 18-30 year old age mark (potentially parents)\n* For women we have higher chances of survival with 14 to 40 years old\n* With young children 5-18 the chance of survival is much lower for mena that it is for women\n* Elderly people did not survive much (relatively)\n\n**We can make the following (preliminary inferences):**<br>\n1) Being part of a family may increase your chances of survival<br>\n2) Being a female has a higher chance of survival (this may be also because of (1); i.e. many women on board were part of families)<br>\n3) Being a man generally has a lower chance of survival<br>","ba6ffece":"Now, considering our EDA, where we saw that Sex was a major determining factor. Let's use this to simulate our model then.\n<br>\n\nIf we call:\n* Male: 577 observations with only 109 survived\n* Female: 314 observations with 233 survived","e52ade53":"**Notes on when dealing with a small sample size:**\n\n*Main point: Generally speaking, as you decrease sample size, your Cross Validation (CV) variance will increase.*\n\nSuggestion:\nUse cross validation over features themselves; that is, in addition to randomly selecting a train set, you randomly select a subset of features for each cross-validation fold.\n\n\"Bagging\" method in Random Forest Tree seems to achieve this.\n\nRead more:\nhttps:\/\/stats.stackexchange.com\/questions\/86238\/is-cross-validation-still-valid-when-the-sample-size-is-small\n\nFurther discussion on whether on small datasets and cross-validation can be seen:\nhttps:\/\/stats.stackexchange.com\/questions\/120152\/cross-validation-and-small-samples\n\nHere we can see a reference to an Oxford Journal on this topic of whether cross-validation works on small datasets.\n\nHere a bootstrap method can be applied [need to learn more about this].","4e92c7ac":"# 2. Creating Categories & Feature Engineering:","d1f3a465":"We can look at the titles to modify this:","84ea9168":"Let's now make sure we do this to both our train and test datasets.","890424be":"### Import Libraries, Loading the Data:","885857b8":"### PClass, Embarked:","152a01a3":"Let's look at: 1) Decision Tree; 2) Random Forest Tree Classifier for this.","c500e15e":"##### Our decision tree model:","43d0a135":"Now that we have some categories created and a better understanding of the overall data, we are in a better position to deal with the case of the null values.","7225f794":"You will recall that in the previous section we created the 'personas' to aid our Exploratory Data Analysis - that is, to show the breakdown by what sort of person type they were. We can refresh how we constructed this with the matrix:","0a2ac624":"**Adult:**","c95609ef":"### Submission 2:","9b047dc3":"For this we can simply use the most frequent occurence of Embarked to replace it:","fb05a0cb":"## 4. Apply Model:","d1bafd93":"Result:\n* Same as smote score: 0.78468\n* Must have overfitted with these 10 folds;","132c7ae9":"### Submission 3: Random Forest","a3ae5499":"### Part I: Creating Categories:","9d574a54":"**Preliminary observations for Embarking Points:**\n* The vast majority of passengers come from Port S regardless of persona type;\n* The vast majority of children are travelling in Pclass = 3\n* The mean survival rate of children in higher in Pclass =2 and Pclass = 1; this might be because in Pclass=3 there is more competition as there are more people in this class (single adults highest in this class).\n* In general we have higher rates of survival the from pclass= 3 to 1;","b1826cdd":"And, finally, our list of null values has been dealt with.","f2a5e38b":"#### Basic Overview:","0742a417":"This notebook will be structured in the following manner:\n1. **Exploratory Data Analysis:**<br>*Discern the main trends between the variables and the target outcome: survived*\n2. **Creating Categories & Feature Engineering:**<br>*Following from our EDA create new categories and apply feature engineering to cases of null values*\n3. **Prepare the Test, Train Data:**\n4. **Apply the Model(s):**\n5. **Cross-Validation:**\n6. **Final Score and Concluding Thoughts:**","feec6572":"Here we can see which cases belong to which. Based on this schema, we can now reassess the cases of survival as per the type of person it is. Let's now create a function so we can append this to our dataframes.","57cbe5ad":"#### SibSp (Siblings\/Spouse) and Parch (Parents\/Children):"}}