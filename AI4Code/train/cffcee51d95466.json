{"cell_type":{"1a657bb3":"code","aa20800d":"code","faad227d":"code","c60e5ce3":"code","d888da43":"code","15a2ee9e":"code","99c785df":"code","6f4eec5c":"code","b6b12a46":"code","5202ff5d":"code","42dc04b9":"code","4a029ff7":"code","434a11cd":"code","cb77fbc1":"code","b29ef422":"code","a9f84291":"code","39029eaf":"code","f5c7347b":"code","ea0cd7e3":"code","a053ff12":"code","35e90d9d":"code","49ab522c":"code","0be0e54f":"code","eca194ca":"code","30735095":"code","97d245bb":"code","b47ea864":"code","b7c4ea84":"code","f315a328":"code","1c375f10":"code","8af0cfec":"code","76b66c11":"code","cdc56df4":"code","5e8b675f":"code","a80bb174":"code","b96e2274":"code","e7abe311":"code","da0ad22b":"code","16f01640":"code","3054f170":"code","e2cd63f6":"code","77fe83c4":"code","c59e8e5e":"code","3752a85b":"code","76e1d28e":"code","18046f39":"code","7b586a2a":"code","b2d5becd":"code","712e705c":"code","788be591":"code","7810b252":"code","acbef8f0":"code","ab9e5c24":"code","0cd22c3c":"code","da1e1c37":"code","2e52c8ac":"code","66461fc6":"code","11f9f5c1":"code","8fdad7be":"code","9e13cc0b":"code","107c256c":"code","1ea11bec":"code","d784bd23":"code","02953221":"code","5d701aa9":"code","1928c5ae":"code","9ae4b310":"code","a2d463c1":"code","df5bc200":"code","94303e40":"code","6432a439":"code","654b4787":"code","8686275f":"code","77e21b0b":"code","c81715c6":"code","8ee20790":"code","9d34ef0a":"code","87774a81":"code","0900f6a4":"code","ab122dde":"code","665a6f62":"code","77a5e3bf":"code","48c85cc6":"code","67165dc8":"code","c1564fc2":"code","278babfe":"code","af5bb5ea":"code","e7d5e32d":"code","22050ed1":"code","74a49019":"code","c3222846":"code","444a49ad":"code","0ad94fe6":"code","71529cba":"markdown","b81af77f":"markdown","f36997b6":"markdown","56ebeb6e":"markdown","b44058b9":"markdown","84b4ec6c":"markdown","4be93915":"markdown","e0f7402e":"markdown","af2d0aee":"markdown"},"source":{"1a657bb3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aa20800d":"pi = 3.14159\npi_approx= 22\/7\n\n\nprint(pi)\nprint(pi_approx)\nprint(\"percent sign goes here%\",100*pi\/pi_approx)","faad227d":"x = int (input(\"Enter an integer: \"))\n\n#print(\"Enter an integer: \")\n#x=input()\n#int(x)\n\n\nif x%2 == 0: #please tell me if\/when 56 divided by 2 and the remainder is 0\n    print (\"even\")\nelse:\n    print (\"odd\")\n    print (\"done with conditional\")","c60e5ce3":"x= int (input('Enter an integer: '))\n\nif x%2 == 0: #check if the integer entered by the user is divisible by 2 w\/o remainder\n\tprint('Even')\nelse:\n\tprint('Odd')\n\nprint(\"Done with conditional\")","d888da43":"x= int (input('Enter an integer: '))\nif x%2 == 0:\n\tif x%3 == 0:\n\t\tprint('Divisible by 2 and 3')\n\telse:\n\t\tprint('Divisible by 2 and not by 3')\nelif x%3 == 0:\n\tprint('Divisible by 3 and not by 2')\nelse:\n    print('Not divisible by 3 or 2')","15a2ee9e":"x = 7\ny = 5\nz = 11\n\nif x< y and x< z:\n\tprint('x is least')\nelif y< z:\n\tprint('y is least')\nelse:\n\tprint('z is least')","99c785df":"x = float(input(\"Enter a number for x: \"))\ny = float(input(\"Enter a number for y: \"))\nif x == y:\n\tprint(\"x and y are equal\")\n    break\n\tif y != 0:\n\t\tprint(\"therefore, x \/ y is\", x\/y)\nelif x < y:\n\tprint(\"x is smaller\")\n    \nelse:\n\tprint(\"y is smaller\")\nprint(\"thanks!\")","6f4eec5c":"# this program prints some evil things\n\nnum = 1\nwhile num < 5:\n    num += 1\n    print(num)\n#print(num) \nprint (\"Outside of loop\")","b6b12a46":"numberOfLoops = 1\nnumberOfApples = 3\nwhile numberOfLoops < 10:\n    numberOfApples *= 3\n    numberOfApples += numberOfLoops\n    numberOfLoops -= 4\nprint (\"Number of apples: \" + str(numberOfApples))","5202ff5d":"num = 10\nwhile num > 3:\n    print(num) \n    num -= 1","42dc04b9":"num = 10\nwhile True:\n    if num <= 8:\n        print ('Breaking out of loop')\n        break\n    print(num)\n    num -= 1\nprint ('Outside of loop')","4a029ff7":"num = 10\nwhile True:\n    if num <= 0:\n        break\nprint ('num is: ' + str(num))","434a11cd":"hi = \"hello there\"\ngreetings = 'hello'\n\n#Concatenate strings\nname = \"eric\"\ngreet = hi + name #hello thereeric\nprint(greet)\n\ngreeting = hi + \" \" + name\nprint(greeting)\n\nx=5\ny=7\nz=x+y\nprint(z)","cb77fbc1":"MYname = \"bu\u011frahan\"\n# index   0-1-2-3-4-5-6-7\n# place   1-2-3-4-5-6-7-8\nprint(len(MYname))\n\nprint(MYname[-3])\n#h\nprint(MYname[2:5])\n#start at 2. and before 5. that means exclude 5.\n#\u011fra\n\nprint(MYname[:5])\n#same as print(MYname[0:5])\n#bu\u011fra\n\nprint(MYname[3:])\n#same as print(MYname[3:8])\n#rahan\n\nprint(MYname[:])\n#same as print(MYname[0:8])\n#bugrahan","b29ef422":"x = 1\nprint(x)\n\nx_str= str(x) #str() function changes x's type from integer to string\nprint(\"my fav num is\", x, \".\", \"x =\", x)\nprint(\"my fav num is \"+ x_str + \". \" + \"x = \" + x_str)\n\nprint(\"my fav num is\" + x, \".\"+ \"x =\"+ x)\n#will lead to TypeError because you cannot concatenate strings with integers.","a9f84291":"#print(\"tell me your name\")\n#myNAME=input()\n\nmyNAME = input(\"tell me something: \")\nprint(5*myNAME)\n\nnum= int(input(\"Type a number... \"))\nprint(5*num)","39029eaf":"n = 0\nwhile n < 5:\n\tprint(n)\n\tn = n+1 # n=+1\n\nprint(\"other code\")\n\nfor n in range(5): #range(5) gives us the integers \n\tprint(n)","f5c7347b":"mysum= 0\nfor i in range(7, 10): #gives us 7,8,9\n\tmysum+= i #mysum=mysum+i\nprint(mysum)\n\nmysum= 0\nfor i in range(5, 11, 2): #gives us 5,7,9\n\tmysum+= i\nprint(mysum)\n\nmysum= 0\nfor i in range(13, 4, -3): #gives us 13,10,7\n\tmysum+= i\nprint(mysum)","ea0cd7e3":"mysum= 0\nfor i in range(5, 11, 2): #gives us 5,7,9\n\tmysum+= i\n\tif mysum== 5: #if this is true, which is TRUE\n\t\tbreak\nprint(mysum)","a053ff12":"x= 12\nans= 0\nitersLeft= x\nwhile(itersLeft!= 0):\n\tans= ans+ x\n\titersLeft = itersLeft - 1\nprint(str(x) + '  *  ' + str(x) + '=' + str(ans))\nprint(x,\"*\",x,\"=\",ans)","35e90d9d":"cube = 27\nfor guess in range(cube+1): #gives numbers 0 to 8\n    if guess**3 == cube:\n        print(\"Cube root of\", cube, \"is\", guess)\n        \n\"\"\"\nx=-6\nprint(x)\nprint(abs(x))","49ab522c":"cube = -8\nfor guess in range(abs(cube)+1):\n    if guess**3 >= abs(cube):\n        break\nif guess**3 != abs(cube):\n    print(cube, 'is not a perfect cube')\nelse:\n    if cube < 0:\n        guess = -guess\n    print('Cube root of ' + str(cube) + ' is ' + str(guess))","0be0e54f":"x = int(input('Enter an integer: '))\nans = 0\nwhile ans**3 < x:\n\tans = ans + 1\nif ans**3 != x:\n\tprint(str(x) + ' is not a perfect cube')\nelse:\n\tprint('Cube root of ' + str(x) + ' is ' + str(ans))","eca194ca":"#first code block\nfor x in range (2, 11, 3): #this will give us 2,5,8\n    print(x, end = \" \")\n    if x == 3:\n        break\n    else:\n        x=x-1\n        \n#second code block\nelse:\n    print(\"error!\")","30735095":"#indexing\n#           01234567\nstring_s = \"abcdefgh\"\n\nfor index in range(len(string_s)): #equals to range(8)\n    if string_s[index] == 'i' or string_s[index] == 'u':\n        print(\"There is an i or u\")\n\"\"\"\n    else:\n        print(\"no i or u\")\n\"\"\"\nfor CHARbug in string_s:\n    if CHARbug == 'i' or CHARbug == 'u':\n        print(\"There is an i or u\")","97d245bb":"an_letters = \"aefhilmnorsxAEFHILMNORSX\"\n#I will take an apple, I will take a banana\n\nword = input(\"I will cheer for you! Enter a word: \")\ntimes = int(input(\"Enthusiasm level (1-10): \"))\n\ni = 0\nwhile i < len(word):\n    char = word[i]\n    if char in an_letters:\n        print(\"Give me an \" + char + \"! \" + char)\n    else:\n        print(\"Give me a  \" + char + \"! \" + char)\n    i += 1\n\nprint(\"What does that spell?\")\nfor i in range(times):\n    print(word, \"!!!\")","b47ea864":"cube = 27\nepsilon = 0.01\nguess = 0.0\nincrement = 0.01\nnum_guesses = 0\n\nwhile abs(guess**3 - cube) >= epsilon and guess <= cube:\n    guess += increment\n    num_guesses += 1\nprint('num_guesses =', num_guesses)\nif abs(guess**3 - cube) >= epsilon:\n    print('Failed on cube root of', cube)\nelse:\n    print(guess, 'is close to the cube root of', cube)","b7c4ea84":"x = 25\nepsilon = 0.001\nnumGuesses = 0\nlow = 0.0\nhigh = x\nans = (high + low)\/2\n\nwhile abs(ans**2 - x) >= epsilon:\n    print('low = ' + str(low) + ' high = ' + str(high) + ' ans = ' + str(ans))\n    numGuesses += 1\n    if ans**2 < x:\n        low = ans\n    else:\n        high = ans\n    ans = (high + low)\/2.0\nprint('numGuesses = ' + str(numGuesses))\nprint(str(ans) + ' is close to square root of ' + str(x))","f315a328":"x= int (input (\"enter a number\"))\n#user enters 7\n\nfor i in range(3, 9, 3):\n    x+= i\n    break\nprint (x)","1c375f10":"num=int(input(\"enter a number: \"))\n\nif num < 0:\n    isNegative = True\n    num = abs(num)\nelse:\n    isNegative = False\n\nresult = \"\"\n\nif num == 0:\n    result = '0'\n    \nwhile num > 0:\n    result = str(num%2) + result\n    num = num\/\/2\n    \nif isNegative: #check if the value of isNegative is True\n    result = \"-\" + result\nprint(result)","8af0cfec":"def is_even( i ):\n    print(\"hi\")\n    return i%2 == 0 #check,when i is divided by 2 if the remainder is 0. If that is the case, return True\n          \nis_even(3) #later in the code, you call the function using its \t\tname ","76b66c11":"def is_even( i ):\n    print(\"hi\")\n    print(\"minnosch\")\n    return i%2 == 0 #TRUE and returned\n    return i%3 == 0 #FALSE but not returned\n          \nis_even(8)","cdc56df4":"def area(r,pi):\n        #9,3.14\n    '''\n    this function takes r as radius and pi as pi\n    returns the area.\n    '''\n    return pi*r*r #or return pi*r**2\n\npi=3.14\narea(9,pi)","5e8b675f":"def func_a():\n    print(\"inside func_a\")\n    \ndef func_b(y): # func_b(2):\n    print(\"inside func_b\")\n    return y*10 #-> return 20\n\ndef func_c(z): #-> func_c(func_a)\n    print(\"inside func_c\")\n    return z()\n\nprint(func_a())\n\nprint(5 * func_b(2))\n#print(5 * 20) -> print (100)\n\nprint(func_c(func_a))","a80bb174":"def func(y):\n    x = 1\n    x += 1\n    print(x)\n\nx = 5\n\nfunc(x)\nprint(x)","b96e2274":"def g(y):\n    print(x)\n    print(x + 1)\n\nx = 5\n\ng(x)\n\nprint(x)","e7abe311":"def h(y): #-> h(5) y becomes 5\n    y = y + 1\n    print(y)\n\nx = 5\n\nh(x) ->h(5)\nprint(x)","da0ad22b":"#iterative solution \ndef mult_iter(a, b):\n    result = 0\n    while b > 0:  #iteration\n\n        result += a\n        b -= 1\n    return result\n\n#recursive solution\ndef mult(a, b): #mult is called\/invoked by mult(3,4)\n    if b == 1:  #base case\n        return a\n    else:       #recursive step\n        return a + mult(a, b-1) #else return 3 + mult(3,3)\n    #next, it is going to call  #else return 3 + mult(3,2)\n    #next, it is going to call  #else return 3 + mult(3,1)\n    \nprint(\"iterative is:\", mult_iter(3,4))\nprint(\"recursive is:\", mult(3,4))","16f01640":"an_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nword = input('I will cheer for you! Enter a word: ')\ntimes = int(input('Enthusiasm level (1-10): '))\n\ni = 0\nwhile i < len(word):\n    char = word[i]\n    if char in an_letters:\n        print('Give me an ' + char + ': ' + char)\n    else:\n        print('Give me a ' + char + ': ' + char)\n    i += 1\nprint('What does the spell?')\nfor i in range(times):\n    print(word, '!!!')","3054f170":"def square(x):\n    return x*x\n\ndef fourthPower(x): -> fourthPower(2)\n    '''\n    x: int or float.\n    do not use these-> return x*x*x*x # return x**4\n    '''\n    return square(square(x))\n  # return square(square(2)) -> return square(4) -> return 16\n\n#square(2)\nfourthPower(2)","e2cd63f6":"def odd(x):\n    '''\n    x: int or float.\n \n    returns: True if x is odd, False otherwise\n    '''\n    return x%2 == 1 #True or False\n\nodd(5)","77fe83c4":"def iterPower(base, exp):\n    '''\n    base: int or float.\n    exp: int >= 0\n \n    returns: int or float, base^exp\n    '''\n    # do not use \"return base**exp\"\n    \n    result=0\n    while exp>0:\n        result = base*base\n        exp=exp-1\n    return result\n    \niterPower(2,4) #expected 16, got 4","c59e8e5e":"def iterPower(base,exp):\n    n=base\n    for _ in range(1,exp):\n        n*=base\n    return n\nprint(iterPower(3,3))","3752a85b":"mytupleABCDZ=[2,1,True,'ff']\n\ntype(mytupleABCDZ)\n","76e1d28e":"L=[1,5,3,4,8,9]\nL.insert(0,[7,('a','c','b','d'),56,5])\n\nL.sort()","18046f39":"L = [2,1,3,6,3,7,0] # do below in order\nL.remove(2) #\uf0e0 mutates L = [1,3,6,3,7,0]\nL.remove(3) # mutates L = [1,6,3,7,0]\ndel(L[1]) #\uf0e0 mutates L = [1,3,7,0]\nL.pop() #returns 0 and mutates L = [1,3,7]","7b586a2a":"s = \"I <3 py\" # s is a string\n#list(s) #\uf0e0 returns ['I',' ','<','3',' ',\u2019p',\u2019y']\n\n#s.split(\"3\") #return ['I <', ' py']\ns.split() #return ['I', '<3', 'py']","b2d5becd":"L = ['a', 'b', 'c'] # L is a list\n''.join(L)          # returns \"abc\u201c\n'_6_'.join(L)         #returns \"a_b_c\"","712e705c":"string2=\"convert string to list with list(s), returns a list with every character from san element in L can use s.split(), to split a string on a character parameter, splits on spaces if called without a parameter use ''.join(L) to turn a list of characters into a string, can give a character in quotes to add char between every element\"\n\"\"\"\nlist = string2.split()\nstring3 = \"\".join(list)\nprint(string3)\nTHANKS BURAK!!!\n\"\"\"\nstring3 = \"\".join(string2.split())\nprint(string3)\n\n#string3 should be equal to string2 but without any spaces in it.","788be591":"\"\"\"Write a procedure called oddTuples, which takes a tuple as input,\nand returns a new tuple as output, where every other element of the\ninput tuple is copied, starting with the first one. So if test is\nthe tuple ('I', 'am', 'a', 'test', 'tuple'), then evaluating \noddTuples on this input would return the tuple ('I', 'a', 'tuple').\n\"\"\"\n\ndef oddTuples(aTUP):\n    '''\n    aTup: a tuple\n    returns: tuple, every other element of aTup. \n    '''\n    # Your Code Here\n    bTUP=()\n    index = 0\n    \n    while index < len(aTup):\n        bTUP = bTUP+(aTup[index],)\n        index = index+2\n    return bTUP\n    \"\"\"\n    #len aTUP =5 ->\n    #range(0,len(aTUP)+1, 2) then becomes range(0,6,2)\n    #range(0,6,2) = var should take values of (0,2,4)\n        \n         \n    #return (XXXX) ('I', 'a', 'tuple')\n    \"\"\"\n    \ndef oddTuples2(aTUP):\n    return aTUP[::2] #->start,stop,step: start at 0, go max, by 2.\n    \n    \naTUP= ('I', 'am', 'a', 'test', 'tuple')\noddTuples2(aTUP)","7810b252":"aList = [0, 1, 2, 3, 4, 5]\nbList = aList\naList[2] = \"hello\"","acbef8f0":"aList == bList","ab9e5c24":"aList is bList","0cd22c3c":"aList","da1e1c37":"bList","2e52c8ac":"cList = [6, 5, 4, 3, 2]\ndList = []\nfor num in cList:\n   dList.append(num)","66461fc6":"cList == dList","11f9f5c1":"cList is dList","8fdad7be":"cList[2] = 20","9e13cc0b":"cList","107c256c":"dList","1ea11bec":"cList == dList","d784bd23":"cList is dList","02953221":"def applyEachTo(L, x):\n    result = []\n    for i in range(len(L)):\n        result.append(L[i](x))\n    return result\ndef square(a):\n    #takes one value, return the square of it\n    return a*a\ndef halve(a):\n    #takes one value, return the halve of it\n    return a\/2\ndef inc(a):\n    return a+1\n\napplyEachTo([inc, square, halve, abs], -3)","5d701aa9":"applyEachTo([inc, square, halve, abs], 3.0)","1928c5ae":"applyEachTo([inc, max, int], -3)","9ae4b310":"listA = [1, 4, 3, 0]","a2d463c1":"listA.sort","df5bc200":"listA.sort()\nprint(listA)","94303e40":"listA.sort()\nprint(listA)","6432a439":"listA","654b4787":"def fib(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n              #fib(3-1) + fib(3-2)\n              #fib(2)   + fib(1)\n              #returns  + #returns\n                # 2     +   1\n              #return 3","8686275f":"#fib(15) = fib(14) + fib (13)\n#         fib(14) = fib(13)+ fib(12)\nfib(15)","77e21b0b":"def fib_efficient(n, d):\n    if n in d: #check if n is already in dictionary d\n        return d[n] #return the value associated with the key n\n    else:\n        ans = fib_efficient(n-1, d) + fib_efficient(n-2, d)\n        d[n] = ans # add to dictionary key:value\n        return ans","c81715c6":"d = {1:1, 2:2}\nprint(fib_efficient(3, d))","8ee20790":"print(fib_efficient(6, d))","9d34ef0a":"d","87774a81":"print(fib_efficient(5, d))","0900f6a4":"d[6] #Send me the value associated with key 6 in dictionary d.","ab122dde":"#tracking some inefficient code\ndef fib(n):\n    \"\"\"this function takes one integer n,\n    returns its fibonacci series in a recursive way.\n    !!!uses global numFibCalls variable!!!\"\"\"\n    global numFibCalls\n    numFibCalls += 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n\nnumFibCalls = 0\n\nprint(fib(34))\nprint('function calls', numFibCalls)","665a6f62":"#tracking some more efficient code!\ndef fib_efficient(n, d):\n    global numFibCalls\n    numFibCalls += 1\n    if n in d:\n        return d[n]\n    else:\n        ans = fib_efficient(n-1, d) + fib_efficient(n-2, d)\n        d[n] = ans\n        return ans     ","77a5e3bf":"numFibCalls = 0\n        \nd = {1:1, 2:2}\nprint (fib_efficient(35, d))\nprint ('function calls', numFibCalls)","48c85cc6":"test = [2,5,8]\n #index 0,1,2","67165dc8":"#test[4] #test index should be less than or equal to 2.\ntest[2]","c1564fc2":"nl=[]\nfor x in range(2000, 3201):\n    if (x%7==0) and (x%5!=0):\n        nl.append(str(x))\nprint (','.join(nl))","278babfe":"def fact(x):\n    if x == 0:\n        return 1\n    return x * fact(x - 1)\nx=int(input('enter a number: '))\nprint(fact(x))","af5bb5ea":"num=int(input('enter a number: '))\nd={}\nfor i in range(1,num+1): #range(1,9) -> (1,2,3,4,5,6,7,8)\n    d[i]=i*i # d[1]=1*1 -> 1:1 , d[2]=2*2 -> 2:4 , d[3]=3*3 -> 3:9\nprint (d)","e7d5e32d":"def isPal(x):\n    assert type(x) == list\n    temp = x\n    temp.reverse\n    \n    print(temp)\n    \n    if temp == x:\n        return True\n    else:\n        return False\n\ndef silly(n):\n    '''input is an integer\n    outputs nothing, calls isPal func'''\n    \n    for i in range(n):\n        result = []\n        elem = input('Enter element: ')\n        result.append(elem)\n        \n        #print(result)\n        \n    if isPal(result):\n        print('Yes')\n    else:\n        print('No')\n        \nsilly(1)","22050ed1":"#Exception Example\n\ndef normalize(numbers):\n    max_number = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] \/= float(max_number)\n    return numbers \n\n#Let\u2019s call this with:\n\n#normalize([0,0,0])\n\ntry:\n    normalize([-6,-4,0])\nexcept ZeroDivisionError:\n    print('Invalid maximum element')","74a49019":"x=1234\ny=123\nz=902\n\nL=[1,2,3,4] #this is one instance of a list class\/object\nL2=[6,7] #this is another instance of a list class\/object\n\nd = {1:1, 2:2, 3:\"g\"}\n\nL.append(5)\n\nprint(d)\ntype(d)","c3222846":"class Coordinate(object):\n    \n    def __init__ (self, x, y):\n        self.x = x \n        self.y = y \n        \n    def distance(self, other):\n        x_diff_sq = (self.x-other.x)**2\n        y_diff_sq = (self.y-other.y)**2\n        return (x_diff_sq + y_diff_sq)**0.5\n    def __str__(self):\n        return \"<\" + str(self.x) + \",\" + str(self.y) + \">\"\n    def __lt__(self, other):\n        return self.x<other.x\n\n        \nc = Coordinate(3,4) #c is an instance of Coordinate class\nprint(c.x) #c.x = c.3 ->3\nprint(c.y) #c.y = c.4 ->4\n\norigin = Coordinate(0,0) #origin is another instance of Coordinate class\nprint(origin.x) #origin.x = origin.0 ->0\nprint(origin.y) #origin.y = origin.0 ->0\n\nprint(c.distance(origin))\n#EXACTLY SAME AS\nprint(Coordinate.distance(c, origin))\n\nprint(c)\nprint(type(c))\nprint(Coordinate, type(Coordinate))\n\nprint(isinstance(c, Coordinate)) #tell me, \n#if object c is an instance of the coordinate class\n\nprint(c < origin) #check and tell me, if x value of c is \n#bigger than x value of origin","444a49ad":"class intSet(object):\n\n    def __init__(self):\n        self.vals = []\n\n    def insert(self, e):\n        if not e in self.vals:\n            self.vals.append(e)\n\n    def member(self, e):\n        return e in self.vals\n\n    def remove(self, e):\n        try:\n            self.vals.remove(e)\n        except:\n           raise ValueError(str(e) + ' not found')\n\n    def __str__(self):\n        self.vals.sort()\n        result = \"\"\n        for e in self.vals:\n            result = result + str(e) + ','\n            return \"{\" + result[:-1] + \"}\"\n        \ns= intSet()\n\ns.insert(3)","0ad94fe6":"s.insert(5)\ns.insert(6)\n\nprint(s)","71529cba":"cube root of 27 is 3\ncube root of 64 is 4\n\ncube root of 28 should lie between 3 and 4.\n0**3 = 0\n1**3 = 1\n2**3 = 8\n3**3= 27\n4**3 =64","b81af77f":"# **List**","f36997b6":"# APPROXIMATE SOLUTIONS\n> good enough solution\n\nstart with a guess and increment by some small value\n\n|guess^3|-cube>= epsilon\n\tfor some small epsilon","56ebeb6e":"# **Dictionary**","b44058b9":"# Object Oriented Programming (OOP) -> use classes","84b4ec6c":"Global variables","4be93915":"# **Functions**","e0f7402e":"decreasing increment size ->\tslower program\nincreasing epsilon        -> \tless accurate answer","af2d0aee":"This code below, will print\/show \"hello world\" on screen, when run."}}