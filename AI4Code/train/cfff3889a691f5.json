{"cell_type":{"f571b4fa":"code","a9f7d517":"code","e38a07bb":"code","7d81f8d7":"code","9ffeddf4":"code","8c91fc8f":"code","125733ee":"code","cbb9b205":"code","d64b8b3f":"code","a85c8fd4":"code","c3e64991":"code","b56cefc6":"code","8194192f":"code","8a564804":"code","038297d7":"code","5795ffb7":"code","284580c8":"markdown","0c8c2d10":"markdown","f90f42a2":"markdown","5f67a194":"markdown","1f4b1954":"markdown","80ed3d4e":"markdown","16b2ee8e":"markdown","ae390c8b":"markdown","672be090":"markdown"},"source":{"f571b4fa":"import os\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","a9f7d517":"sub_path = \"..\/input\/ieeesubmissions\"\nall_files = os.listdir(sub_path)\nall_files","e38a07bb":"all_files.remove('blend02.csv')\nall_files","7d81f8d7":"outs = [pd.read_csv(os.path.join(sub_path, f), index_col=0) for f in all_files]\nconcat_sub = pd.concat(outs, axis=1)\ncols = list(map(lambda x: \"ieee\" + str(x), range(len(concat_sub.columns))))\nconcat_sub.columns = cols\nconcat_sub.reset_index(inplace=True)\nconcat_sub.head()\nncol = concat_sub.shape[1]","9ffeddf4":"# check correlation\nconcat_sub.iloc[:,1:ncol].corr()","8c91fc8f":"corr = concat_sub.iloc[:,1:7].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","125733ee":"# get the data fields ready for stacking\nconcat_sub['ieee_max'] = concat_sub.iloc[:, 1:ncol].max(axis=1)\nconcat_sub['ieee_min'] = concat_sub.iloc[:, 1:ncol].min(axis=1)\nconcat_sub['ieee_mean'] = concat_sub.iloc[:, 1:ncol].mean(axis=1)\nconcat_sub['ieee_median'] = concat_sub.iloc[:, 1:ncol].median(axis=1)","cbb9b205":"concat_sub.describe()","d64b8b3f":"cutoff_lo = 0.8\ncutoff_hi = 0.2","a85c8fd4":"concat_sub['isFraud'] = concat_sub['ieee_mean']\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_mean.csv', \n                                        index=False, float_format='%.6f')","c3e64991":"concat_sub['isFraud'] = concat_sub['ieee_median']\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_median.csv', \n                                        index=False, float_format='%.6f')","b56cefc6":"concat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), 1, \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             0, concat_sub['ieee_median']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_pushout_median.csv', \n                                        index=False, float_format='%.6f')","8194192f":"concat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), \n                                    concat_sub['ieee_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             concat_sub['ieee_min'], \n                                             concat_sub['ieee_mean']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_minmax_mean.csv', \n                                        index=False, float_format='%.6f')","8a564804":"concat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), \n                                    concat_sub['ieee_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             concat_sub['ieee_min'], \n                                             concat_sub['ieee_median']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_minmax_median.csv', \n                                        index=False, float_format='%.6f')","038297d7":"sub_base = pd.read_csv('..\/input\/ieeesubmissions\/blend01.csv')","5795ffb7":"concat_sub['ieee_base'] = sub_base['isFraud']\nconcat_sub['isFraud'] = np.where(np.all(concat_sub.iloc[:,1:ncol] > cutoff_lo, axis=1), \n                                    concat_sub['ieee_max'], \n                                    np.where(np.all(concat_sub.iloc[:,1:ncol] < cutoff_hi, axis=1),\n                                             concat_sub['ieee_min'], \n                                             concat_sub['ieee_base']))\nconcat_sub[['TransactionID', 'isFraud']].to_csv('stack_minmax_bestbase.csv', \n                                        index=False, float_format='%.6f')","284580c8":"# Pushout + Median Stacking\n>* Pushout strategy is bit aggresive","0c8c2d10":"# Mean Stacking","f90f42a2":">* Based on https:\/\/www.kaggle.com\/lpachuong\/statstack\n>* Thanks to <br>\nhttps:\/\/www.kaggle.com\/jazivxt\/safe-box<br>\nhttps:\/\/www.kaggle.com\/artgor\/eda-and-models<br>\nhttps:\/\/www.kaggle.com\/stocks\/under-sample-with-multiple-runs<br>\nhttps:\/\/www.kaggle.com\/artkulak\/ieee-fraud-simple-baseline-0-9383-lb","5f67a194":"# MinMax + BestBase Stacking\n>* loading submission with best score","1f4b1954":"## Upvote if this was helpful","80ed3d4e":"# MinMax + Mean Stacking\n>* MinMax seems more gentle and it outperforms the previous one","16b2ee8e":"# MinMax + Median Stacking","ae390c8b":"# Median Stacking","672be090":"## Median stacking gives the best LB score"}}