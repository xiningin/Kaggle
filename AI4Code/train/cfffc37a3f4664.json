{"cell_type":{"d3984d5e":"code","7609438d":"code","d1504b48":"code","3ea5a94c":"code","4d5fa72c":"code","50a3c483":"code","3bdfba7b":"code","7b886a62":"markdown","33c326d3":"markdown"},"source":{"d3984d5e":"# Import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.layers import Dense","7609438d":"# Data Generator\n# create a matrix of row:300 col:1, value = -1~1\nx_data = np.linspace(-1,1,300)[:, np.newaxis]\nnoise = np.random.normal(0, 0.05, x_data.shape)\n\n# generate Y with noise for training model\ny_data = np.square(x_data) - 0.5 + noise","d1504b48":"# Build Model\nmodel = keras.models.Sequential()\n\nmodel.add(Dense(10, input_dim=1, activation='relu')) # add a hidden layer with 10 neurons \nmodel.add(Dense(1, activation=None))\n\nmodel.summary()","3ea5a94c":"# Compile Model\n# Optimizer : SGD, RMSpro, Adagrad, Adaelta, Adam, Adamax, Nadam\nmodel.compile(optimizer='sgd', loss='mse')","4d5fa72c":"# Train Model\nmodel.fit(x_data, y_data, batch_size=50, epochs=1000)","50a3c483":"# Prediction : input X to predict Y\ny_pred = model.predict(x_data)","3bdfba7b":"# Draw Results\ny_ideal= np.square(x_data) - 0.5          # use x_data to generate ideal y\n\nplt.scatter(x_data, y_data) # plot training data (x_data ,y_data)\nplt.plot(x_data, y_ideal, 'yellow', lw=2) # plot (x_data, y_ideal)\nplt.plot(x_data, y_pred, 'red', lw=1)     # plot (x_data, y_pred)\nplt.show()                                # show plot","7b886a62":"## Hidden Layer Network architecture\n![image.png](attachment:image.png)","33c326d3":"# Hidden Layer Network (10 neurons)\nuse a hidden network with 10 neurons to learn an equation Y = X^2 + 0.5"}}