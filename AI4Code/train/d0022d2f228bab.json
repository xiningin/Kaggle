{"cell_type":{"5a30ee74":"code","927cf8e4":"code","18e12ea0":"code","f10746d8":"code","3f3998b1":"code","589785eb":"code","a1fcb5c6":"code","29294f77":"code","1449f857":"code","bb640204":"code","26e8d150":"code","cc285c4d":"code","53733303":"code","b86ba933":"code","cbc1423d":"code","ab2e8651":"code","d20e4473":"code","ad01a111":"code","f3637378":"code","c2bdbb41":"code","e52ae01c":"markdown"},"source":{"5a30ee74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","927cf8e4":"##########################################################\n# 1. IMPORT ALL PACKAGES\n##########################################################\nimport pandas as pd\nimport numpy as np\nimport math\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import multilabel_confusion_matrix\n# from sklearn.metrics import confusion_matrix","18e12ea0":"##########################################################\n# 2. LOAD DATASET\n##########################################################\ndata = pd.read_csv(\"..\/input\/iris\/Iris.csv\",header=0)# header 0 means the first row is\n\ni = 0\nfor each in data.species:\n    if each == \"Iris-setosa\":\n        data.species[i] = 0;\n    elif each == \"Iris-versicolor\":\n        data.species[i] = 1;\n    elif each == \"Iris-virginica\":\n        data.species[i] = 2;\n        \n    i+=1\nprint(i)\ndata","f10746d8":"sequence = list(np.sort(data['species'].unique()))\nprint(sequence","3f3998b1":"##########################################################\n# 3. SHARE TO TEST AND TRAIN DATA\n##########################################################\nx = data.iloc[:, 1:] #original\ny = data['species'].tolist() #predict\n\n# Share test and train data (x train, y label)\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42","589785eb":"##########################################################\n# 4. TRAIN PERCEPTRON LEARNING ALGORITHM\n##########################################################\n# Create a perceptron object with the parameters over the data\nmodel_clf = Perceptron(max_iter=50, eta0=0.3, random_state=0)\n\n# Train the perceptron\nmodel_clf.fit(x_train, y_train)","a1fcb5c6":"##########################################################\n# 5. APPLY THE TRAINED LEARNER TO TEST NEW DATA\n##########################################################\n# Apply the trained perceptron to make prediction of test data\ny_pred = model_clf.predict(x_test) #x because the data is unknown lable","29294f77":"##########################################################\n# 6. MULTI-CLASS CONFUSION MATRIX FOR EACH CLASS\n##########################################################\n# Actual and predicted classes\nlst_actual_class = y_test\nlst_predicted_class = y_pred\n# Class = digit labels 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\nlst_classes = sequence\n# Compute multi-class confusion matrix\narr_out_matrix = multilabel_confusion_matrix(lst_actual_class, lst_predicted_class, labels=lst_classes)\n# Temp store results\nstore_sens = [];\nstore_spec = [];\nstore_acc = [];\nstore_bal_acc = [];\nstore_prec = [];\nstore_fscore = [];\nstore_mcc = [];","1449f857":"for no_class in range(len(lst_classes)):\n    arr_data = arr_out_matrix[no_class];\n    print(\"Predicted Performance of Digit Label\/Class: {0}\".format(no_class));\n    tp = arr_data[1][1]\n    fp = arr_data[0][1]\n    tn = arr_data[0][0]\n    fn = arr_data[1][0]\n    sensitivity = round(tp\/(tp+fn), 3);\n    specificity = round(tn\/(tn+fp), 3);\n    accuracy = round((tp+tn)\/(tp+fp+tn+fn), 3);\n    balanced_accuracy = round((sensitivity+specificity)\/2, 3);\n    precision = round(tp\/(tp + fp), 3)\n    fscore = round((2 * ((precision * sensitivity) \/ (precision + sensitivity))), 3)\n    mcc = round((((tp * tn)-(fp * fn))\/ math.sqrt((tp + fp)*(tp + fn)*(tn + fp)*(tn + fn))),3)\n    store_sens.append(sensitivity);\n    store_spec.append(specificity);\n    store_acc.append(accuracy);\n    store_bal_acc.append(balanced_accuracy);\n    store_prec.append(precision);\n    store_fscore.append(fscore);\n    store_mcc.append(mcc);","bb640204":"##########################################################\n# 7. OVERALL - FINAL PREDICTION PERFORMANCE\n##########################################################\nprint(\"Overall Performance Prediction:\");\nprint(\"Sensitivity: {0}%\".format(round(mean(store_sens)*100, 4)));\nprint(\"Specificity: {0}%\".format(round(mean(store_spec)*100, 4)));\nprint(\"Accuracy: {0}%\".format(round(mean(store_acc)*100, 4)));\nprint(\"Balanced Accuracy: {0}%\".format(round(mean(store_bal_acc)*100, 4)));\nprint(\"Precision: {0}%\".format(round(mean(store_prec)*100, 4)));\nprint(\"F1-Score: {0}%\".format(round(mean(store_fscore)*100, 4)))\nprint(\"MCC: {0}\\n\".format(round(mean(store_mcc), 4)))","26e8d150":"##########################################################\n# 4. TRAIN RANDOM FOREST ALGORITHM\n##########################################################\n# Create a RandomForestClassifier object with the parameters over the data\n# n_estimators (default=100) = the number of trees in the forest.\n# max_depth (default=None) = the maximum depth of the tree.\nmodel_clf = RandomForestClassifier(n_estimators=500, max_depth=2, random_state=0)\n\n# Train the Random Forest algorithm\nmodel_clf.fit(x_train, y_train)","cc285c4d":"##########################################################\n# 5. APPLY THE TRAINED LEARNER TO TEST NEW DATA\n##########################################################\n# Apply the trained perceptron to make prediction of test data\ny_pred = model_clf.predict(x_test) #x because the data is unknown lable\n","53733303":"##########################################################\n# 6. MULTI-CLASS CONFUSION MATRIX FOR EACH CLASS\n##########################################################\n# Actual and predicted classes\nlst_actual_class = y_test\nlst_predicted_class = y_pred\n# Class = digit labels 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\nlst_classes = sequence\n# Compute multi-class confusion matrix\narr_out_matrix = multilabel_confusion_matrix(lst_actual_class, lst_predicted_class, labels=lst_classes)\n# Temp store results\nstore_sens = [];\nstore_spec = [];\nstore_acc = [];\nstore_bal_acc = [];\nstore_prec = [];\nstore_fscore = [];\nstore_mcc = [];","b86ba933":"# Loop for each taget label\nfor no_class in range(len(lst_classes)):\n    arr_data = arr_out_matrix[no_class];\n    print(\"Predicted Performance of Digit Label\/Class: {0}\".format(no_class));\n    tp = arr_data[1][1]\n    fp = arr_data[0][1]\n    tn = arr_data[0][0]\n    fn = arr_data[1][0]\n    sensitivity = round(tp\/(tp+fn), 3);\n    specificity = round(tn\/(tn+fp), 3);\n    accuracy = round((tp+tn)\/(tp+fp+tn+fn), 3);\n    balanced_accuracy = round((sensitivity+specificity)\/2, 3);\n    precision = round(tp\/(tp + fp), 3)\n    fscore = round((2 * ((precision * sensitivity) \/ (precision + sensitivity))), 3)\n    mcc = round((((tp * tn)-(fp * fn))\/ math.sqrt((tp + fp)*(tp + fn)*(tn + fp)*(tn + fn))),3)\n    store_sens.append(sensitivity);\n    store_spec.append(specificity);\n    store_acc.append(accuracy);\n    store_bal_acc.append(balanced_accuracy);\n    store_prec.append(precision);\n    store_fscore.append(fscore);\n    store_mcc.append(mcc);","cbc1423d":"##########################################################\n# 7. OVERALL - FINAL PREDICTION PERFORMANCE\n##########################################################\nprint(\"Overall Performance Prediction:\");\nprint(\"Sensitivity: {0}%\".format(round(mean(store_sens)*100, 4)));\nprint(\"Specificity: {0}%\".format(round(mean(store_spec)*100, 4)));\nprint(\"Accuracy: {0}%\".format(round(mean(store_acc)*100, 4)));\nprint(\"Balanced Accuracy: {0}%\".format(round(mean(store_bal_acc)*100, 4)));\nprint(\"Precision: {0}%\".format(round(mean(store_prec)*100, 4)));\nprint(\"F1-Score: {0}%\".format(round(mean(store_fscore)*100, 4)))\nprint(\"MCC: {0}\\n\".format(round(mean(store_mcc), 4)))","ab2e8651":"##########################################################\n# 4. TRAIN SVM FOREST ALGORITHM\n##########################################################\n# Create a RandomForestClassifier object with the parameters over the data\n# n_estimators (default=100) = the number of trees in the forest.\n# max_depth (default=None) = the maximum depth of the tree.\nmodel_clf = SVC(kernel='linear')\n\n# Train the Random Forest algorithm\nmodel_clf.fit(x_train, y_train)","d20e4473":"##########################################################\n# 5. APPLY THE TRAINED LEARNER TO TEST NEW DATA\n##########################################################\n# Apply the trained perceptron to make prediction of test data\ny_pred = model_clf.predict(x_test) #x because the data is unknown lable","ad01a111":"##########################################################\n# 6. MULTI-CLASS CONFUSION MATRIX FOR EACH CLASS\n##########################################################\n# Actual and predicted classes\nlst_actual_class = y_test\nlst_predicted_class = y_pred\n# Class = digit labels 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\nlst_classes = sequence\n# Compute multi-class confusion matrix\narr_out_matrix = multilabel_confusion_matrix(lst_actual_class, lst_predicted_class, labels=lst_classes)\n# Temp store results\nstore_sens = [];\nstore_spec = [];\nstore_acc = [];\nstore_bal_acc = [];\nstore_prec = [];\nstore_fscore = [];\nstore_mcc = [];","f3637378":"# Loop for each taget label\nfor no_class in range(len(lst_classes)):\n    arr_data = arr_out_matrix[no_class];\n    print(\"Predicted Performance of Digit Label\/Class: {0}\".format(no_class));\n    tp = arr_data[1][1]\n    fp = arr_data[0][1]\n    tn = arr_data[0][0]\n    fn = arr_data[1][0]\n    sensitivity = round(tp\/(tp+fn), 3);\n    specificity = round(tn\/(tn+fp), 3);\n    accuracy = round((tp+tn)\/(tp+fp+tn+fn), 3);\n    balanced_accuracy = round((sensitivity+specificity)\/2, 3);\n    precision = round(tp\/(tp + fp), 3)\n    fscore = round((2 * ((precision * sensitivity) \/ (precision + sensitivity))), 3)\n    mcc = round((((tp * tn)-(fp * fn))\/ math.sqrt((tp + fp)*(tp + fn)*(tn + fp)*(tn + fn))),3)\n    store_sens.append(sensitivity);\n    store_spec.append(specificity);\n    store_acc.append(accuracy);\n    store_bal_acc.append(balanced_accuracy);\n    store_prec.append(precision);\n    store_fscore.append(fscore);\n    store_mcc.append(mcc);\n","c2bdbb41":"##########################################################\n# 7. OVERALL - FINAL PREDICTION PERFORMANCE\n##########################################################\nprint(\"Overall Performance Prediction:\");\nprint(\"Sensitivity: {0}%\".format(round(mean(store_sens)*100, 4)));\nprint(\"Specificity: {0}%\".format(round(mean(store_spec)*100, 4)));\nprint(\"Accuracy: {0}%\".format(round(mean(store_acc)*100, 4)));\nprint(\"Balanced Accuracy: {0}%\".format(round(mean(store_bal_acc)*100, 4)));\nprint(\"Precision: {0}%\".format(round(mean(store_prec)*100, 4)));\nprint(\"F1-Score: {0}%\".format(round(mean(store_fscore)*100, 4)))\nprint(\"MCC: {0}\\n\".format(round(mean(store_mcc), 4)))","e52ae01c":"# Identify Iris-sentosa"}}