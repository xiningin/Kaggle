{"cell_type":{"4831a2a5":"code","407e72c7":"code","de702c29":"code","22b89ea9":"code","7e4c1694":"code","61a9744c":"code","c04bfcd4":"code","3c37f819":"code","47aaaeca":"code","1c66dfc5":"code","757d5503":"code","55a3ebb5":"code","99221871":"code","4d639ef0":"code","57c76aed":"code","e954dfe5":"code","d0fc26d3":"code","6adccbb6":"code","269f40e1":"code","6e128693":"code","dd57ed1e":"code","d0255c3e":"code","85e6615d":"code","1d4206de":"code","1dc3c33c":"code","ee86f762":"code","7d2dc5b5":"code","eac3bb7b":"code","f781a9ee":"code","529aece3":"code","e7c94b61":"code","5baef8a4":"code","61cb862e":"code","a344f202":"code","244618ee":"code","47952448":"code","d9b9e842":"code","d3dd385b":"code","a1a66712":"code","e832dc04":"code","fa86769c":"code","72eaf278":"code","355eac15":"code","175cb59f":"code","176b6230":"code","95a070b7":"code","686679e4":"code","36828ca1":"code","9e712bde":"code","b8fe555e":"code","f116b7ed":"code","5e42aba3":"code","0501bd7f":"code","7c5cae17":"code","c2709f8a":"code","3daec9c8":"code","b97194b2":"code","6f192c1e":"code","12e775e1":"code","3cbc5ebd":"code","7fc0c802":"code","29260236":"code","54ceda86":"code","6a87c83f":"code","4d5fe7ca":"code","b5388e48":"code","0f6fcd82":"code","ba8f1a55":"code","239b038d":"code","9652ba81":"code","a8746ef3":"code","da0cc14e":"code","23e9f31f":"code","0d5c5629":"code","364ac73b":"code","d99a708a":"code","cdc210b4":"code","4a4f654d":"code","e3c1d077":"code","cab399c8":"code","826ab78d":"markdown","6320ec4e":"markdown","ee78a712":"markdown","ca92f605":"markdown","5d4a0be5":"markdown","3992ae7b":"markdown","ff88f305":"markdown","e48df2c9":"markdown","6e680398":"markdown","c74ef4e1":"markdown"},"source":{"4831a2a5":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\ndf=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ndf1=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","407e72c7":"train_original=df.copy()\ntest_original=df1.copy()","de702c29":"df.head(10)","22b89ea9":"#COUNT THE NUMBER OF ROWS AND COLUMNS IN THE DATA SET.","7e4c1694":"df.shape","61a9744c":"df1.shape","c04bfcd4":"#GET SOME STATISTICS","3c37f819":"df.describe()","47aaaeca":"df.info()","1c66dfc5":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","757d5503":"#VIEWING THE TEST DATASET\n\n\ndf1.head()","55a3ebb5":"df1.info()","99221871":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","4d639ef0":"data=[df,df1]\nfor dataset in data:\n    #FILTER CATEGORICAL VARIABLES\n    categorical_columns=[x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    #EXCLUDE ID COLS AND SOURCE:\n    categorical_columns =[x for x in categorical_columns if x not in['Loan_ID']]\n    \n    \n    #PRINT FREQUENCY OF CATEGORIES\nfor col in categorical_columns:\n    print('\\nFrequency of categories for variable %s'%col)\n    print(df[col].value_counts())\n    \n    ","57c76aed":"#GENDER\n\nsns.countplot(df['Gender'])","e954dfe5":"pd.crosstab(df.Gender, df.Loan_Status, margins=True)","d0fc26d3":"#DEPENDENDANTS\n\nplt.figure(figsize=(6,6))\nlabels=['0','1','2','3+']\nexplode=(0.05,0,0,0)\nsize=[345,102,101,51]\nplt.pie(size,explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","6adccbb6":"#GET THE COUNT OF THE NUMBER OF DEPENDENTS\n\ndf.Dependents.value_counts()","269f40e1":"pd.crosstab(df.Dependents,df.Loan_Status,margins=True)","6e128693":"#CREDIT HISTORY\n\nsns.countplot(df['Credit_History'])","dd57ed1e":"pd.crosstab(df.Credit_History,df.Loan_Status, margins=True)","d0255c3e":"#SELF EMPLOYED\n\nsns.countplot(df['Self_Employed'])","85e6615d":"pd.crosstab(df.Self_Employed, df.Loan_Status, margins=True)","1d4206de":"#MARRIED\n\nsns.countplot(df.Married)","1dc3c33c":"pd.crosstab(df.Married, df.Loan_Status, margins=True)","ee86f762":"#LOAN AMOUNT \n\nsns.displot(df['LoanAmount'])","7d2dc5b5":"#EDUCATION\n\nsns.countplot(df.Education)","eac3bb7b":"#PROPERTY AREA\n\n\nsns.countplot(df.Property_Area)","f781a9ee":"# APPLICANT INCOME\n\ndf['ApplicantIncome'].hist(bins=50)","529aece3":"df.boxplot(column='ApplicantIncome')","e7c94b61":"# APPLICANT INCOME AND EDUCATION\n\ndf.boxplot(column='ApplicantIncome',by='Education')\n","5baef8a4":"temp1=df['Credit_History'].value_counts(ascending=True)\ntemp2=df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc= lambda x: x.map({'Y':1,'N':0}).mean())\nprint('Frequency Table for Credit History:')\nprint(temp1)\nprint('\\n probability of getting loan for each credit history class:')\nprint(temp2)","61cb862e":"import matplotlib.pyplot as plt\nfig=plt.figure(figsize=(8,4))\nax1=fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of applicants')\nax1.set_title(\"Applicants by credit_History\")\ntemp1.plot(kind='bar')\nax2=fig.add_subplot(122)\ntemp2.plot(kind='bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","a344f202":"temp3=pd.crosstab(df['Credit_History'],df['Loan_Status'])\ntemp3.plot(kind='bar',stacked=True, color=['red','blue'],grid=False)","244618ee":"df.apply(lambda x: sum(x.isnull()),axis=0)","47952448":"df['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)","d9b9e842":"df[\"Self_Employed\"].value_counts()","d3dd385b":"# HEATMAP REPRESENTATION OF THE CORRELATION\n\nmatrix=df.corr()\nf,ax=plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","a1a66712":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","e832dc04":"df.head()","fa86769c":"#CONVERTING STRING VALUES(CATEGORICAL VALUES) TO INTEGER\n\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","72eaf278":"df.head()","355eac15":"#CONVERTING STRING VALUES(CATEGORICAL VALUES)TO INTEGER\n\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","175cb59f":"df1.head()","176b6230":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","95a070b7":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\n\ndf[\"Loan_Amount_Term\"].value_counts()","686679e4":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","36828ca1":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","9e712bde":"df.isnull().sum()","b8fe555e":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","f116b7ed":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","5e42aba3":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\ndf1[\"Loan_Amount_Term\"].value_counts()","0501bd7f":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","7c5cae17":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","c2709f8a":"\n\ndf1.isnull().sum()","3daec9c8":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","b97194b2":"sns.displot(df[\"Total_Income\"])","6f192c1e":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","12e775e1":"sns.displot(df1[\"Total_Income_log\"])","3cbc5ebd":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","7fc0c802":"sns.displot(df[\"EMI\"])","29260236":"sns.displot(df[\"EMI\"])","54ceda86":"#MULTIPLYING BY 1000 TO MAKE THE UITS EQUAL\n\ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","6a87c83f":"sns.displot(df[\"Balance Income\"])","4d5fe7ca":"sns.displot(df[\"Balance Income\"])","b5388e48":"df=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\ndf","0f6fcd82":"#LOOK AT THE DATA TYPES\n\ndf.dtypes","ba8f1a55":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\n","239b038d":"df1=df1.drop(\"Loan_ID\",axis=1)\ndf1","9652ba81":"#LOOK AT THE DATA TYPES\ndf1.dtypes","a8746ef3":"#LETS PREPARE THE DATA FOR FEEDING IN TO THE MODELS\n#SAVE THE TARGET VARIABLE IN SEPARATE\n\nx=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","da0cc14e":"x=pd.get_dummies(x)\ndf=pd.get_dummies(df)","23e9f31f":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=102)","0d5c5629":"#USE GAUSSIAN NAIVE BAYES\n\nfrom sklearn.naive_bayes import GaussianNB\ngauss=GaussianNB()\ngauss.fit(x_train,y_train)\npred_gb=gauss.predict(x_test)\nacc_gb=accuracy_score(y_test,pred_gb)*100\nacc_gb\n\n","364ac73b":"pred_test=gauss.predict(df1)","d99a708a":"loancsv=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","cdc210b4":"loancsv","4a4f654d":"loancsv[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nloancsv[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","e3c1d077":"loancsv","cab399c8":"loancsv.to_csv(r\"C:\\Users\\FATHIMA SHEMEEMA\\Desktop\\loanGNB.csv\",index=False)","826ab78d":"# FILLING MISSING VALUES\n","6320ec4e":"# DROPPING THE VARIABLES","ee78a712":"# CORRELATION BETWEEN ALL THE NUMERICAL VARIABLES\n","ca92f605":"# FILLING MISSING VALUES IN TEST DATA","5d4a0be5":"# REPLACING THE CATEGORICAL VALUES","3992ae7b":"#  GAUSSIAN NAIVE_BAYES","ff88f305":"# EXPLORING AND PREPARING THE DATA","e48df2c9":"# READING THE DATA","6e680398":"# IMPORTING PACKAGES","c74ef4e1":"# FEATURE ENGINEERING"}}