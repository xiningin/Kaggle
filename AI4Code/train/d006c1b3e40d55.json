{"cell_type":{"fe5eb965":"code","542dea88":"code","dd68026d":"code","c09d7eb1":"code","a2861664":"code","e8861b2f":"code","99f5ebe9":"code","04e91918":"code","436f5476":"code","944a3ea7":"code","84609a0d":"code","6bdee189":"code","16439618":"code","a28a4a23":"code","b27bacdc":"code","a640fc4c":"code","1f7d6eda":"code","b0ad8d77":"code","914e561d":"markdown","bc143dcb":"markdown","7a8805a8":"markdown","1cae14e1":"markdown","3a205681":"markdown","3d569e67":"markdown","e975b9dc":"markdown","3935e59c":"markdown","f865fba2":"markdown","48be23ad":"markdown","78845218":"markdown","717a8a19":"markdown","3cfb14ca":"markdown","a3ba2807":"markdown","d32cd215":"markdown","7e44512d":"markdown","4773dae5":"markdown","a287ea4e":"markdown","f443f992":"markdown","62387349":"markdown"},"source":{"fe5eb965":"!pip install wordninja","542dea88":"import nltk\nnltk.download('stopwords')","dd68026d":"import numpy as np\nimport time\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom nltk.tokenize import RegexpTokenizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nimport wordninja\nimport math\nimport scipy\nimport pickle","c09d7eb1":"class ProcessData:\n    def __init__(self):\n        '''\n        Create stop words for URL\n        '''\n        self.stop_words = stopwords.words('english')\n        url_stop_words = ['http', 'www', 'net', 'com', 'org',\n                          'index', 'htm', 'html']\n        self.stop_words += url_stop_words\n        self.vectorizer = TfidfVectorizer()\n\n    def read_csv(self, file_path: str) -> list:\n        '''\n        :param file_path: str\n            file path of data file\n        :return: list\n            x_train, y_train, x_test, y_test\n        '''\n        df = pd.read_csv(file_path, names=['idx', 'URL', 'Category'])\n        train, test = train_test_split(df, test_size=0.2)\n        self.x_train = train['URL']\n        self.y_train = train['Category'].astype('category').cat.codes.to_list()\n        self.x_train = self.x_train.to_list()[:]\n        self.x_test = test['URL']\n        self.y_test = test['Category'].astype('category').cat.codes.to_list()\n        self.x_test = self.x_test.to_list()[:]\n        return self.x_train, self.y_train, self.x_test, self.y_test\n\n    def tokenzier_url(self, url_list: list) -> list:\n        '''\n        Tokenize url by split special character\n        :param url_list: list\n            List of URL in dataset\n        :return: list\n            List of words after tokenize\n        '''\n        #tokenizer = RegexpTokenizer(r'\\w+')\n        tokenizer = RegexpTokenizer(r'[a-zA-Z0-9]+')\n        x_train_tokenized = []\n        for x in url_list:\n            try:\n                x_tokenized = tokenizer.tokenize(x)\n                x_tokenized = [w for w in x_tokenized if not w in self.stop_words]\n                for word in x_tokenized:\n                    word_split = wordninja.split(word)\n                    x_tokenized = [w for w in word_split if (1 < len(w) < len(word))] + x_tokenized\n                #print(x_tokenized)\n                x_tokenized = \" \".join(map(str, x_tokenized))\n                x_train_tokenized.append(x_tokenized)\n            except:\n                x_train_tokenized.append('none')\n                print(f\"error at: {x}\")\n        return x_train_tokenized\n\n    def vectorizer_url(self, x: list):\n        '''\n        Calculate tf-idf for training set\n        :param x: list\n            List of input URL\n        :return: csr_matrix\n            tf-idf of training set\n        '''\n        x_tokenized = self.tokenzier_url(x)\n        x_tfidf = self.vectorizer.fit_transform(x_tokenized)\n        print(x_tfidf.shape)\n        return x_tfidf\n\n    def vectorizer_url_test_set(self, x_test: list):\n        '''\n        calculate tf-idf for test set\n        :param x_test: list\n            List of input URL in test set\n        :return: csr_matrix\n            tf-idf of test set\n        '''\n        x_test_tokenized = self.tokenzier_url(x_test)\n        x_test_tfidf = self.vectorizer.transform(x_test_tokenized)\n        return x_test_tfidf","a2861664":"class MultinomialNB():\n    def __init__(self, alpha: float = 1.0):\n        '''\n        Init for MultinomialNB class\n        :param alpha: float\n        '''\n        self.alpha = alpha\n        self.prior_prob = None\n        self.num_class = None\n        self.tfidf_count = None\n        self.word_count = None\n\n    def fit(self, x_train, y_train: np.ndarray):\n        '''\n        Fit trainning set to model\n        :param x_train: csr_matrix\n            Input of training set\n        :param y_train: list\n            Output of training set\n        '''\n        y_train = np.array(y_train)\n        self.num_class = np.max(y_train) + 1\n        self.prior_prob = self.calculate_prior_prob(y_train)\n        self.calculate_tfidf_count(x_train, y_train)\n\n    def calculate_prior_prob(self, y_train: np.ndarray) -> np.ndarray:\n        '''\n        Calculate prior probability for each class\n        :param y_train: np.ndarray\n            Output label of traning set\n        :return: np.ndarray\n            Prior probabilities for each class in training set\n        '''\n        self.prior_prob = [0]*self.num_class\n        for i in range(self.num_class):\n            mask = y_train == i\n            count_mask = np.count_nonzero(mask)\n            self.prior_prob[i] = count_mask\n        self.prior_prob \/= np.int32(len(y_train))\n        return self.prior_prob\n\n    def calculate_tfidf_count(self, x_train, y_train: np.ndarray):\n        '''\n        Calculate tf-idf count in training phase\n        :param x_train: csr_matrix\n            Input of training set\n        :param y_train: np.ndarray\n            Output of training set\n        '''\n        self.word_count = x_train.shape[1]\n        self.tfidf_count = []\n        for i in range(self.num_class):\n            index_arr = np.where(y_train == i)\n            count_sum = x_train[index_arr].sum()\n            self.tfidf_count.append((np.array(x_train[index_arr].sum(axis=0)).squeeze() + self.alpha)\/(count_sum + self.word_count))\n\n    def predict(self, x_test) -> list:\n        '''\n        Predict output for test set\n        :param x_test: csr_matrix\n            Input of test set\n        :return: list\n            List of predicted classes\n        '''\n        y_pred = []\n        for x in x_test:\n            prob = [0] * self.num_class\n            for i in range(self.num_class):\n                probability = 1\n                for j in range(len(x.data)):\n                    probability *= self.tfidf_count[i][x.indices[j]]**x.data[j]\n                prob[i] = math.log(probability)\n            y_pred.append(np.argmax(prob))\n        return y_pred\n\n    def accuracy_score(self, y_test: list, y_pred: list) -> float:\n        '''\n        Calculate accuracy of model\n        :param y_test: list\n            Labels of test set\n        :param y_pred:\n            Predicted labels of model\n        :return: float\n            Accuracy of model\n        '''\n        return sum(np.equal(y_test, y_pred))\/len(y_test)","e8861b2f":"#Initialize\nFILE_PATH = \"..\/input\/url-classification-dataset-dmoz\/URL Classification.csv\"\nprocess_data = ProcessData()\n\nx_train, y_train, x_test, y_test = process_data.read_csv(FILE_PATH)","99f5ebe9":"labels = ['Adult', 'Arts', 'Business', 'Computers', 'Games', 'Health', 'Home', 'Kids',\n          'News', 'Recreation', 'Reference', 'Science', 'Shopping', 'Society', 'Sports']\nlabels_count = np.unique(y_train, return_counts=True)\nfig, ax = plt.subplots(figsize=(20, 8))\nax.bar(labels_count[0], labels_count[1], 0.5, tick_label=labels, color='green')\nplt.show()","04e91918":"labels_count = np.unique(y_test, return_counts=True)\nfig, ax = plt.subplots(figsize=(20, 8))\nax.bar(labels_count[0], labels_count[1], 0.5, tick_label=labels, color='green')\nplt.show()","436f5476":"SAVED = False\nif SAVED == False:\n    t1 = time.time()\n    x_train_tfidf = process_data.vectorizer_url(x_train)\n    t2 = time.time()\n    print(f\"time to run process_data.vectorizer_url= {t2 - t1}\")\n    with open(\".\/vectorized_url.pickle\", \"wb\") as handle:\n        pickle.dump([process_data, x_train_tfidf], handle, protocol=pickle.HIGHEST_PROTOCOL)\nelse:\n    with open(\".\/vectorized_url.pickle\", \"rb\") as handle:\n        process_data, x_train_tfidf = pickle.load(handle)\n    print('load successed from vectorized_url.pickle')","944a3ea7":"x_test_tfidf = process_data.vectorizer_url_test_set(x_test)\nprint(f\"x_train_tfidf shape = {x_train_tfidf.shape}\")\nprint(f\"x_test_tfidf shape = {x_test_tfidf.shape}\")","84609a0d":"t1 = time.time()\nclf = MultinomialNB(alpha=0.001)\nclf.fit(x_train_tfidf, y_train)\nt2 = time.time()\nprint(f\"time to fit = {t2 - t1}\")","6bdee189":"t1 = time.time()\ny_pred = clf.predict(x_train_tfidf)\naccuracy = clf.accuracy_score(y_train, y_pred)\nt2 = time.time()\nprint(\"accuracy of training set = \", accuracy)\nprint(f\"time to predict = {t2 - t1}\")","16439618":"print(metrics.classification_report(y_train, y_pred))","a28a4a23":"confusion_matrix = metrics.confusion_matrix(y_train, y_pred)\nplt.figure(figsize=(15, 12))\nsns.heatmap(np.array(confusion_matrix), fmt='d', annot=True, cmap='Blues')\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True label\")\nplt.show()","b27bacdc":"t1 = time.time()\ny_pred = clf.predict(x_test_tfidf)\naccuracy = clf.accuracy_score(y_test, y_pred)\nt2 = time.time()\nprint(\"accuracy of test set = \", accuracy)\nprint(f\"time to predict = {t2 - t1}\")","a640fc4c":"print(metrics.classification_report(y_test, y_pred))","1f7d6eda":"confusion_matrix = metrics.confusion_matrix(y_test, y_pred)\nplt.figure(figsize=(15, 12))\nsns.heatmap(np.array(confusion_matrix), fmt='d', annot=True, cmap='Blues')\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True label\")\nplt.show()","b0ad8d77":"from google.colab import drive\ndrive.mount('\/content\/drive')","914e561d":"## Process data class","bc143dcb":"## URL vectorizer using tf-idf\n\nSAVED = False -> save to pickle file\n\nSAVED = True -> load from pickle file","7a8805a8":"## Fit data to train","1cae14e1":"Accuracy of Training Set","3a205681":"## Bi\u1ec3u \u0111\u1ed3 s\u1ed1 l\u01b0\u1ee3ng items trong t\u1eadp test","3d569e67":"## C\u00f3 th\u1ec3 b\u1ecf prior probabilities \u0111\u01b0\u1ee3c kh\u00f4ng?\n\nTheo l\u00fd thuy\u1ebft c\u1ee7a Naive Bayes th\u00ec ta ph\u1ea3i nh\u00e2n v\u1edbi prior probabilities v\u00ec n\u00f3 th\u1ec3 hi\u1ec7n cho s\u1ef1 tr\u1ea3i nghi\u1ec7m tr\u01b0\u1edbc \u0111\u00e2y c\u1ee7a vi\u1ec7c \"h\u1ecdc\".\n\nTuy nhi\u00ean, \u1edf \u0111\u00e2y b\u00e0i to\u00e1n c\u1ee7a ch\u00fang ta \u0111ang l\u00e0 b\u00e0i to\u00e1n ph\u00e2n lo\u1ea1i, v\u1eady n\u00ean ta c\u1ea7n th\u1ef1c hi\u1ec7n sao cho k\u1ebft qu\u1ea3 nh\u1eadn d\u1ea1ng l\u00e0 t\u1ed1t nh\u1ea5t. V\u1eady n\u00ean em ngh\u0129 c\u00f3 th\u1ec3 b\u1ecf \u0111\u01b0\u1ee3c prior probabilities. Nh\u01b0ng l\u00fac n\u00e0y b\u00e0i to\u00e1n c\u1ee7a ch\u00fang ta s\u1ebd kh\u00f4ng tu\u00e2n theo Naive Bayes n\u1eefa.\n\nM\u1ed9t c\u00e1ch \u0111\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y l\u00e0 ch\u00fang ta c\u00f3 th\u1ec3 chu\u1ea9n b\u1ecb l\u1ea1i t\u1eadp d\u1eef li\u1ec7u. Trong th\u1ef1c t\u1ebf th\u00ec nh\u1eefng link li\u00ean quan \u0111\u1ebfn ch\u1ee7 \u0111\u1ec1 \"Arts\" x\u1ea3y ra \u00edt h\u01a1n r\u1ea5t nhi\u1ec1u so v\u1edbi ch\u1ee7 \u0111\u1ec1u \"News\", tuy nhi\u00ean trong t\u1eadp d\u1eef li\u1ec7u n\u00e0y th\u00ec ho\u00e0n to\u00e0n ng\u01b0\u1ee3c l\u1ea1i. V\u1eady n\u00ean, ch\u00fang ta c\u00f3 th\u1ec3 chu\u1ea9n b\u1ecb m\u1ed9t t\u1eadp d\u1eef li\u1ec7u c\u00f3 t\u00ednh c\u00e2n b\u1eb1ng gi\u1eefa c\u00e1c l\u1edbp, khi n\u00e0y ch\u00fang ta v\u1eabn c\u00f3 k\u1ebft qu\u1ea3 ph\u00e2n lo\u1ea1i t\u1ed1t m\u00e0 b\u00e0i to\u00e1n v\u1eabn tu\u00e2n theo Naive Bayes.","e975b9dc":"## MultinomialNB Class","3935e59c":"## Import libraries","f865fba2":"## Tr\u00edch d\u1eabn t\u1eeb \"Data Understanding and Preparation\"\nRobert Nisbet Ph.D., ... Ken Yale D.D.S., J.D., in Handbook of Statistical Analysis and Data Mining Applications (Second Edition), 2018\"\n\nPrior Probabilities\nThe prior probability of a given target class is the proportion of its occurrence compared with the other target state. Some analytic algorithms permit the specification of prior probability (e.g., STATISTICA Data Miner classification and regression trees). These probabilities function in a manner similar to weights in controlling the effect of a case with a given target class on the final predicted value. If the modeling algorithm you choose has this capability, it might produce a more predictive model than with either sampling method.\n\nWhich method is best? The answer is it depends on your data. The safest course to follow is to test as many methods as you can on your data set and pick the one that produces the most acceptable model in terms of accuracy and generality.","48be23ad":"## Vectorize for test set","78845218":"## M\u1ed9t s\u1ed1 l\u00fd do d\u1eabn \u0111\u1ebfn Overfitting v\u00e0 ph\u01b0\u01a1ng \u00e1n gi\u1ea3i quy\u1ebft:\n\nL\u00fd do d\u1eabn \u0111\u1ebfn overfitting:\n\n* Thi\u1ebfu d\u1eef li\u1ec7u training\n* M\u00f4 h\u00ecnh h\u1ecdc qu\u00e1 kh\u1edbp v\u1edbi d\u1eef li\u1ec7u training d\u1eabn \u0111\u1ebfn k\u1ebft qu\u1ea3 kh\u00f4ng ch\u00ednh x\u00e1c trong qu\u00e1 tr\u00ecnh testing\n* D\u1eef li\u1ec7u training ch\u1ee9a qu\u00e1 nhi\u1ec1u nhi\u1ec5u\n* Nh\u1eefng \u0111i\u1ec3m b\u1ea5t th\u01b0\u1eddng trong t\u1eadp d\u1eef li\u1ec7u kh\u00f4ng \u0111\u01b0\u1ee3c lo\u1ea1i b\u1ecf m\u00e0 v\u1eabn \u0111\u01b0a v\u00e0o qu\u00e1 tr\u00ecnh trainning\n\nC\u00e1c ph\u01b0\u01a1ng ph\u00e1p \u0111\u1ec3 gi\u1ea3i quy\u1ebft overfitting:\n\n* T\u0103ng d\u1eef li\u1ec7u trainning ho\u1eb7c s\u1eed d\u1ee5ng c\u00e1c k\u1ef9 thu\u1eadt data augmentation \u0111\u1ec3 t\u0103ng d\u1eef li\u1ec7u\n* Lo\u1ea1i b\u1ecf nhi\u1ec5u ho\u1eb7c c\u00e1c \u0111i\u1ec3m b\u1ea5t th\u01b0\u1eddng trong t\u1eadp d\u1eef li\u1ec7u\n* S\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt cross-validation\n* S\u1eed d\u1ee5ng m\u1ed9t m\u00f4 h\u00ecnh \u0111\u01a1n gi\u1ea3n h\u01a1n \u0111\u1ec3 h\u1ecdc v\u1eeba \u0111\u1ee7 t\u1eeb d\u1eef li\u1ec7u c\u1ee7a t\u1eadp training\n* N\u1ebfu l\u00e0 c\u00e1c m\u00f4 h\u00ecnh deep learning th\u00ec c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng c\u00e1c k\u1ef9 thu\u1eadt regularizer nh\u01b0: L2 regularizer, drop-out.\n* Ho\u1eb7c s\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt Early stopping \u0111\u1ec3 d\u1eebng qu\u00e1 tr\u00ecnh hu\u1ea5n luy\u1ec7n khi \u0111\u1ea1t \u0111\u1ebfn m\u1ed9t \u0111\u1ed9 ch\u00ednh x\u00e1c nh\u1ea5t \u0111\u1ecbnh (Deep Learning)","717a8a19":"## Confusion matrix of training set\n\ncolor bar b\u00ean ph\u1ea3i l\u00e0 th\u1ec3 hi\u1ec3n \u0111\u1ed9 l\u1edbn c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb trong confusion matrix. Gi\u00e1 tr\u1ecb c\u00f2n l\u1edbn th\u00ec m\u00e0u c\u1ee7a n\u00f3 c\u00e0ng \u0111\u1eadm.","3cfb14ca":"Ta c\u00f3 c\u00f4ng th\u1ee9c:\n\n\\begin{equation}\nP(C|X) \\propto  P(C)\\prod_{i=1}^{d} P(x_{i}|C)\n\\end{equation}\n\nTr\u01b0\u1eddng h\u1ee3p $P(x_{i}|C)$ n\u00e0o \u0111\u00f3 b\u1eb1ng 0 hay c\u1ee5 th\u1ec3 trong b\u00e0i to\u00e1n n\u00e0y th\u00ec m\u1ed9t t\u1eeb n\u00e0o \u0111\u00f3 m\u1edbi c\u1ee7a t\u1eadp test kh\u00f4ng xu\u1ea5t hi\u1ec7n trong m\u1ed9t class n\u00e0o \u0111\u00f3 c\u1ee7a t\u1eadp train d\u1eabn \u0111\u1ebfn x\u00e1c su\u1ea5t b\u1eb1ng 0. \u0110\u1ec3 gi\u1ea3i quy\u1ebft v\u1ea5n \u0111\u1ec1 n\u00e0y th\u00ec ng\u01b0\u1eddi ta th\u01b0\u1eddng s\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt smoothing \u1edf \u0111\u00e2y c\u1ee5 th\u1ec3 l\u00e0 laplace smoothing v\u1edbi hyperparameter l\u00e0 $\\alpha$. \n\nTh\u01b0\u1eddng v\u1edbi c\u00e1c b\u00e0i to\u00e0n s\u1eed d\u1ee5ng word count th\u00ec alpha th\u01b0\u1eddng b\u1eb1ng 1. Tuy nhi\u00ean \u1edf b\u00e0i to\u00e1n n\u00e0y s\u1eed d\u1ee5ng tf-idf n\u00ean c\u00e1c gi\u00e1 tr\u1ecb trong vector th\u01b0\u1eddng b\u00e9 h\u01a1n m\u1ed9t v\u1eadt n\u00ean em ch\u1ecdn qua m\u1ed9t v\u00e0i gi\u00e1 tr\u1ecb b\u00e9 h\u01a1n m\u1ed9t v\u00e0 khi ch\u1ecdn 0.001 th\u00ec th\u1ea5y \u0111\u1ed9 ch\u00ednh x\u00e1c t\u1ed1t n\u00ean l\u1ef1a ch\u1ecdn $\\alpha = 0.001$. ","a3ba2807":"## Download stopwords dictionary of nltk library","d32cd215":"## Read data from file","7e44512d":"# Nh\u1eadn x\u00e9t v\u1edbi confusion matrix:\n\n1.   \u1ede tr\u00ean ta \u0111\u00e3 t\u00ednh \u0111\u01b0\u1ee3c \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a t\u1eadp trainning \u0111ang l\u1edbn h\u01a1n r\u1ea5t nhi\u1ec1u so v\u1edbi \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a t\u1eadp test do \u0111\u00f3 c\u00f3 th\u1ec3 k\u1ebft lu\u1eadn \u0111\u01b0\u1ee3c m\u00f4 h\u00ecnh \u0111ang r\u01a1i v\u00e0o tr\u1ea1ng th\u00e1i Overfitting.\n2.   \u0110\u1ed1i v\u1edbi 2 confusion matrix \u1edf tr\u00ean ta c\u00f3 th\u1ec3 t\u00ednh ra \u0111\u01b0\u1ee3c precision \u0111\u1ec1u l\u1edbn h\u01a1n recall v\u00e0 h\u1ea7u nh\u01b0 d\u1ef1 \u0111o\u00e1n c\u00e1c class c\u00f3 s\u1ed1 l\u01b0\u1ee3ng samples nh\u1ecf nh\u1ea7m v\u00e0o c\u00e1c class c\u00f3 s\u1ed1 l\u01b0\u1ee3ng samples l\u1edbn.\n3.   T\u1ea1i sao ch\u00fang ta l\u1ea1i b\u1ecb r\u01a1i v\u00e0o v\u1ea5n \u0111\u1ec1 s\u1ed1 2 nh\u01b0 v\u1eady? H\u00e3y nh\u00ecn v\u00e0o h\u00ecnh b\u00ean d\u01b0\u1edbi, \u0111\u00e2y l\u00e0 s\u1ed1 l\u01b0\u1ee3ng samples \u1edf trong m\u1ed7i class c\u1ee7a t\u1eadp d\u1eef li\u1ec7u. C\u00f3 th\u1ec3 th\u1ea5y, \u0111\u00e2y l\u00e0 m\u1ed9t t\u1eadp d\u1eef li\u1ec7u ho\u00e0n to\u00e0n m\u1ea5t c\u00e2n b\u1eb1ng, tuy nhi\u00ean \u0111\u1ed1i v\u1edbi thu\u1eadt to\u00e1n Naive Bayes ch\u00fang ta c\u1ea7n nh\u00e2n v\u1edbi \"prior probabilites\" l\u00e0 x\u00e1c xu\u1ea5t c\u1ee7a m\u1ed7i class trong t\u1eadp hu\u1ea5n luy\u1ec7n. V\u1eady n\u00ean, \u0111\u1ed1i v\u1edbi c\u00e1c class c\u00f3 s\u1ed1 l\u01b0\u1ee3ng sample l\u1edbn th\u00ec \"prior probability\" c\u1ee7a class \u0111\u00f3 s\u1ebd l\u1edbn v\u00e0 ng\u01b0\u1ee3c l\u1ea1i. V\u1eady n\u00ean, trong qu\u00e1 tr\u00ecnh testing ta s\u1ebd d\u1ef1 \u0111o\u00e1n nh\u1ea7m r\u1ea5t nhi\u1ec1u v\u00e0o c\u00e1c class c\u00f3 s\u1ed1 l\u01b0\u1ee3ng sample l\u1edbn, d\u1eabn \u0111\u1ebfn qu\u00e1 tr\u00ecnh testing s\u1ebd cho ra \u0111\u1ed9 ch\u00ednh x\u00e1c r\u1ea5t th\u1ea5p. Em \u0111\u00e3 c\u00f3 th\u1eed kh\u00f4ng nh\u00e2n v\u1edbi \"prior probabilities\" th\u00ec \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a m\u00f4 h\u00ecnh t\u0103ng l\u00ean kho\u1ea3ng 3% \u0111\u1ebfn 6%, tuy nhi\u00ean theo l\u00fd thuy\u1ebft c\u1ee7a Naive Bayes th\u00ec ta c\u1ea7n nh\u00e2n v\u1edbi \u0111\u1ea1i l\u01b0\u1ee3ng n\u00e0y. B\u1edfi v\u00ec m\u1ed9t v\u00e0i l\u00fd do \u1edf tr\u00ean d\u1eabn \u0111\u1ebfn thu\u1eadt to\u00e1n n\u00e0y mang l\u1ea1i k\u1ebft qu\u1ea3 kh\u00f4ng t\u1ed1t \u1edf trong b\u00e0i to\u00e1n n\u00e0y.\n\n![visualize.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAuoAAAFtCAYAAABROk9bAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+\/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzs3Xu8tfWc\/\/HXu5LooFJMKlNSRphJhUYYh6E06EDJj0TIIYTfGDnMJKNhzDgzRlQKU1LinhHpl8qxdJBSocLoVjoolVOpPr8\/rmt1r\/tu77VXda99Xever+fjsR5rXd91+uza916f9b0+3883VYUkSZKkflmp6wAkSZIk3ZGJuiRJktRDJuqSJElSD5moS5IkST1koi5JkiT1kIm6JEmS1EMm6pIkSVIPmahLkiRJPWSiLkmSJPWQibokSZLUQ6t0HUBfrLfeerXJJpt0HYYkSZJWcGefffY1VbX+XI8zUW9tsskmnHXWWV2HIUmSpBVckv8d53GWvkiSJEk9ZKIuSZIk9ZCJuiRJktRDJuqSJElSD5moS5IkST1koi5JkiT1kIm6JEmS1EMm6pIkSVIPmahLkiRJPTSxRD3JxklOSXJRkguS7N+Ovz3JL5Oc2152GnrOm5NckuTHSXYYGt+xHbskyQFD45smOSPJxUk+l2TVdvye7fEl7f2bTOrnlCRJkiZhlQm+9i3A\/62qc5KsCZyd5KT2vvdX1b8PPzjJlsCewMOABwD\/L8kW7d0fBZ4KLAbOTLKoqi4E\/rV9raOT\/CfwEuBj7fV1VfXgJHu2j3vu8vrBclCW10stpQ6sibyuJEmSps\/EZtSr6oqqOqe9fSNwEbDhiKfsDBxdVTdV1c+AS4BHt5dLquqnVXUzcDSwc5IATwaObZ9\/BLDL0Gsd0d4+FnhK+3hJkiRpKsxLjXpbevJI4Ix26NVJzktyWJJ12rENgcuGnra4HZtt\/L7Ab6rqlmXGl3qt9v7r28cvG9e+Sc5KctbVV199t35GSZIkaXmaM1FPstMMl+2HEuy5nr8GcBzwuqq6gaY0ZTNgK+AK4L2Dh87w9LoL46Nea+mBqkOqatuq2nb99dcf+XNIkiRJ82mcGvX9gb8GvkGTAD+OZmZ8syRvqarPzfbEJPegSdI\/W1VfAKiqK4fu\/wTwP+3hYmDjoadvBFze3p5p\/Bpg7SSrtLPmw48fvNbiJKsA9wGuHeNnlSRJknphnNKXPwAPrapnVNXfAVsCv6FJ3t8225PamvBDgYuq6n1D4xsMPWxX4Ift7UXAnm3Hlk2BzYHvAWcCm7cdXlalWXC6qKoKOAV4Tvv8vYEvDb3W3u3t5wBfbx8vSZIkTYVxZtQ3q6pfDg6q6pdJHlpVVyW5ZcTztgf2As5Pcm479hbgeUm2oilF+Tnw8vZ1L0hyDHAhTceY\/arqVoAkrwZOBFYGDquqC9rXexNwdJJ3At+n+WJAe\/3pJJfQzKTvOcbPKUmSJPXGOIn66UmOA45pj3cHzkiyOs1s+4yq6lvMXCt+wojnHAwcPMP4CTM9r6p+StMVZtnxP7ZxSpIkSVNpnET9FcDzgCfSJN5fBI5qZ7sfO7nQJEmSpIVrzkS9Tcg\/014kSZIkzYNx2jM+I8n5SX6T5IYkNya5YT6CkyRJkhaqcUpfPgDsXlXfn3QwmpwcNJmNWetAm+lIkiRNwjjtGa8ySZckSZLm1zgz6mckORI4HrhpMNh2YpEkSZI0AeMk6n\/WXu8xNFaMaLMo3V2TKtUBy3UkSdJ0GKfry\/PmIxBJkiRJS8yaqCfZv6o+mOQ9M91fVf8wubAkSZKkhW3UjPri9vrS+QhEkiRJ0hKzJupVdVx7\/fH5C0eSJEkSjFGjnuRBwOuATYYfX1U7TS4sSZIkaWEbp+vLccCRwLHArZMNR5IkSRKMl6hXVb1\/4pFIkiRJut04O5N+Mck+SdZJcu\/BZeKRSZIkSQvYODPqr2yvDx4aK+AByz8cSZIkSTDehkcbzEcgkiRJkpYYteHR9lX17SQzdnepqhMmF5YkSZK0sI2aUX8G8G1grxnuK8BEXZIkSZqQURsevbm9ft78hSNJkiQJxltMSpKnAA8DVhuMVdV7JhWUJEmStNCNszPph4H7A9vTbHy0K3D6hOOSJEmSFrRx+qj\/TVXtAfy6LYd5NGAnGEmSJGmCxknU\/9Be\/zHJ\/YDfA5tOLiRJkiRJ49Sofy3J2sD7gHOBW4CjJhqVJEmStMCNTNSTrAR8sap+Axyd5H+Ae1fVVfMSnSRJkrRAjSx9qarbgI8OHf\/WJF2SJEmavHFq1L+e5O8mHokkSZKk242TqL8M+O8kv01yVZKrkzirLkmSJE3QrDXqSTasql8CG81jPJIkSZIYPaP+3wBVddNMl3mKT5IkSVqQRiXqmbcoJEmSJC1lVHvGDZO8b7Y7q+oNE4hHkiRJEqMT9T8AF8xXIJIkSZKWGJWo\/7qqDp23SCRJkiTdblSN+q3zFoUkSZKkpcyaqFfVo+YzEEmSJElLjLPhkSRJkqR5ZqIuSZIk9dDIRD3Jykl+MF\/BSJIkSWqMTNSr6lbgwiQbzlM8kiRJkhjdnnFgPeCiJN8FfjcYrKrdJhaVJEmStMCNk6i\/+668cJKNgSOBPwNuAw6pqg8mWRf4HLAJ8HNgj6q6LkmADwI7Ab8HXlRV57SvtTfwtval31lVR7Tj2wCfAu4FnADsX1U123vclZ9DkiRJ6sKci0mr6mTgB8A92ssP2rG53AL836p6KLAdsF+SLYEDgJOranPg5PYY4OnA5u1lX+BjAG3SfSDwGODRwIFJ1mmf87H2sYPn7diOz\/YekiRJ0lSYM1FP8mzgHGAv4IXAWUl2net5VXXFYEa8qm4ELgI2BHYGjmgfdgSwS3t7Z+DIapwOrJ1kA2AH4KSquradFT8J2LG9b62q+m5VFc3s\/fBrzfQekiRJ0lQYp\/Tln4BHVdWVAEnuD3wNOH7cN0myCfBI4Azg\/lV1BTTJfJL7tQ\/bELhs6GmL27FR44tnGGfEe0iSJElTYZw+6isNkvTW1WM+D4AkawDHAa+rqhtGPXSGsboL42NLsm+Ss5KcdfXVV9+Zp0qSJEkTNU7CfVKSE5K8IMkLgEXAieO8eJJ70CTpn62qL7TDV7ZlK7TXV7Xji4GNh56+EXD5HOMbzTA+6j2WUlWHVNW2VbXt+uuvP86PJEmSJM2LWRP1JIOymP9L01nl0TQLOo8A3jjXC7ddXA4FLqqq9w3dtQjYu729N\/ClofEXprEdcH1bvnIi8LQk67SLSJ8GnNjed2OS7dr3euEyrzXTe0iSJElTYVSN+hnANsDhVfUi4Jg7+drb0yxAPT\/Jue3YW2jaPR6T5CXAL4Dd2\/tOoGnNeAlNe8YXA1TVtUn+GTizfdw7qura9vYrWdKe8SvthRHvIUmSJE2FUYn6PZM8H3h8kmcte2dVLRr1wlX1LWauIwd4ygyPL2C\/WV7rMOCwGcbPAh4+w\/ivZ3oPSZIkaVqMStT3A14ArM0dZ6SLprxEkiRJ0gTMmqhX1WnAaUnOqqqPz2NMkiRJ0oI3zs6kJumSJEnSPBu7H7okSZKk+WOiLkmSJPXQnIl6kqOT7ND2KpckSZI0D8aZUf8UsA\/wkyTvTPLgyYYkSZIkaZzFpF+tqufS7Ez6K+CUJN9IstfQ7qWSJEmSlqOxatSTrAP8H5qdRs8DPg48Fvjq5EKTJEmSFq45Z8STHAM8Avgv4NlVtbi967NJvj\/J4CRJkqSFamSinmQl4HzguVVVy95fVY+cVGCSJEnSQjay9KWqbgP+bqYkXZIkSdLkjFOjflKSnSceiSRJkqTbjdO15dXAfZLcBPwBCFBVte5EI5MkSZIWsHES9fUmHoUkSZKkpcyZqFfVrUl2Ap7QDp1aVbZllCRJkiZozhr1JAcD\/wD8tL38Q5J3TjowSZIkaSEbp\/TlmcAjq+pWgCSHAecAb5tkYJIkSdJCNtbOpMBaQ7fXnEQgkiRJkpYYZ0b9PcA5SU6m6fjyROCfJhmUJEmStNCNs5j0M0lOAR5Dk6j\/U1X9cuKRSZIkSQvYnIl6kr9sb17SXt83ySrAZe3OpZIkSZKWs3FKXw4FtgIuoJlRfyjwQ5pNkPatqpMnGJ8kSZK0II2zmPRiYJuq2qqq\/grYBjgX2AF47ySDkyRJkhaqcRL1h1bVeYODqjof2LqqLhnxHEmSJEl3wzilL5cm+TBwdHv8XOCSJPcEbplYZJIkSdICNs6M+guBxcABwJuBy4G9aZL0p0wuNEmSJGnhGqc94++TvB84boZyl+snE5YkSZK0sM05o57kGcD5wEnt8VZJjp90YJIkSdJCNk7py0E0mx39BqCqzgUePMmgJEmSpIVunET9T1X1m2XGahLBSJIkSWqM0\/XloiR7ACsl2RTYHzh9smFJkiRJC9s4M+qvptnk6DbgC8AfaZJ1SZIkSRMyzoz6DlX1JuBNg4Eku9Ek7ZIkSZImYJwZ9bfNMPbW5R2IJEmSpCVmnVFPsgOwI7BhkvcN3bUWTRmMJEmSpAkZVfpyFfBDmpr0C4bGb6TZpVSSJEnShMyaqFfV94HvJ\/lsVf1xHmOSJEmSFrxxFpNumORgYEtgtcFgVW0xsagkSZKkBW6cxaSfAg4HAjwdOAY4eoIxSZIkSQveOIn6vavqRICqurSq3gY8abJhSZIkSQvbOKUvNyUJcGmSVwC\/BO432bAkSZKkhW2cGfXXA2sArwW2B14K7DPXk5IcluSqJD8cGnt7kl8mObe97DR035uTXJLkx21ryMH4ju3YJUkOGBrfNMkZSS5O8rkkq7bj92yPL2nv32SMn1GSJEnqlVkT9TbhvW9VnVFVN1bVL6pqL+AlwFljvPanaPqwL+v9VbVVezmhfa8tgT2Bh7XP+Y8kKydZGfgoTW38lsDz2scC\/Gv7WpsD17Vx0V5fV1UPBt7fPk6SJEmaKqNm1D8IPHmG8Z2A980wvpSq+gZw7Zhx7AwcXVU3VdXPgEuAR7eXS6rqp1V1M80i1p3bUpwnA8e2zz8C2GXotY5obx8LPKV9vCRJkjQ1RiXqT6iqz88w\/mngiXfjPV+d5Ly2NGaddmxD4LKhxyxux2Ybvy\/wm6q6ZZnxpV6rvf\/69vGSJEnS1BiVqM84C11VNdt9Y\/gYsBmwFXAF8N4R7zXb+4waH\/Vad5Bk3yRnJTnr6quvHhW3JEmSNK9GJerXJNlm2cEkWzN+SctSqurKqrq1qm4DPkFT2gLNjPjGQw\/dCLh8xPg1wNpJVllmfKnXau+\/z2zxVtUhVbVtVW27\/vrr35UfSZIkSZqIUYn6G4HjkrwtydPbyz8Cx7X33WlJNhg63BUYdIRZBOzZLmDdFNgc+B5wJrB52+FlVZoFp4vaWf1TgOe0z98b+NLQa+3d3n4O8PX28ZIkSdLUmLWPelWdnmQ74DXAK9rhC4DHVtUVc71wkqNoatnXS7IYOBB4YpKtaEpRfg68vH2vC5IcA1wI3ALsV1W3tq\/zauBEYGXgsKq6oH2LNwFHJ3kn8H3g0Hb8UODTSS6hmUnfc4z\/DpIkSVKvjNzwqKp+Bbz1rrxwVT1vhuFDZxgbPP5g4OAZxk8ATphh\/KcsKZ0ZHv8jsPudClaSJEnqmXE2PJIkSZI0z0zUJUmSpB4yUZckSZJ6aNYa9STHM0v\/cYCq2m0iEUmSJEkauZj0I\/MWhSRJkqSljGrPePJ8BiJJkiRpiZHtGQGSbEbTNnFLYLXBeFVtMcG4JEmSpAVtnMWknwIOBwI8HTgGOHqCMUmSJEkL3jiJ+r2r6kSAqrq0qt4GPGmyYUmSJEkL25ylL8BNSQJcmuQVwC+B+002LEmSJGlhGydRfz2wBvBamlr1+wD7TDIoSZIkaaGbM1GvqjPamzcCe002HEmSJEkwXteXk5hh46OqetpEIpIkSZI0VunL24ZurwY8G7hpMuFIkiRJgjtX+jJwWpLTJhSPJEmSJMYrfVlr6HAlYBtgg4lFJEmSJGms0pcLaGrUA9wC\/Ax42SSDkiRJkha6cUpfNp6PQCRJkiQtMWuinuRZo55YVYuWfziSJEmSYPSM+u7t9XrAY4FT2+O\/AU4DTNQlSZKkCZk1Ua+qvQCSLAK2rKpftscbAh+an\/AkSZKkhWmlMR7zoEGS3roceMiE4pEkSZLEeF1fvpHky8BRNN1f9gS+MdGoJEmSpAVunER9P5p69ce3x0cCx04sIkmSJEljtWcs4Jj2IkmSJGkejGrPeFpV\/U2S62hKXm6\/iyZ\/X3fi0UmSJEkL1KgZ9Se11+vNRyCSJEmSlpi160tV3dbefA+wdVXdOnyZn\/AkSZKkhWmc9owXAgcn+UmSdyXZatJBSZIkSQvdnIl6VR1aVU8Dtgd+AXwgyY8mHpkkSZK0gI3TnnFgY2ATYEPgkolEI02xHJSJvG4dWHM\/SJIkrXDmTNSTHAw8B7gM+BzwmKq6dtKBSZIkSQvZODPqVwBPqKorJx2MJEmSpMaoPuqbV9XFwDeA+ye5\/\/D9VXXepIOTJEmSFqpRM+oHAC8BPjrDfQU8YSIRSZIkSZo9Ua+ql7TXj5+\/cCRJkiTB6NKXZ416YlUtWv7hSJIkSYLRpS+7t9frAY8FTm2P\/wY4DTBRlyRJkiZkVOnLXgBJFgFbVtUv2+MNgQ\/NT3iSJsne75Ik9decO5MCDxok6a3LgYdMKB5JkiRJjNdH\/RtJvgwcRdPtZU+alo2SJEmSJmScRH0\/mnr1QfeXI4FjJxaRJEmSpLkT9aoq4Jj2IkmSJGkezFmjnmTnJBcluT7JDUluTHLDGM87LMlVSX44NLZukpOSXNxer9OOJ8mHklyS5LwkWw89Z+\/28Rcn2XtofJsk57fP+VCSjHoPSZIkaZqMU\/ryXmDXqjr\/Tr72p4CP0JTKDBwAnFxV705yQHv8JuDpwObt5THAx4DHJFkXOBDYlqY+\/uwki6rquvYx+wKnAycAOwJfGfEekqbcpLrUgJ1qJEn9M07XlyvvQpJOVX0DuHaZ4Z2BI9rbRwC7DI0fWY3TgbWTbADsAJxUVde2yflJwI7tfWtV1Xfb0pwjl3mtmd5DkiRJmhrjzKifmeSzwBeBmwaDd3Fn0vtX1RXt869Icr92fEPgsqHHLW7HRo0vnmF81HtIkiRJU2OcRP2+wG3As4bGiuW7M+lM57PrLozfuTdN9qUpn+GBD3zgnX26JM3JTaUkSXfVOF1f9lqO73dlkg3ame4NgKva8cXAxkOP24hmY6XFwBOXGT+1Hd9ohsePeo87qKpDgEMAtt12Wz\/1JEmS1BuzJupJ3s+IWeqqesNdeL9FwN7Au9vrLw2NvzrJ0TSLSa9vE+0TgX8Z6tzyNODNVXVt231mO+AM4IXAh+d4D0mSJGlqjJpR\/+GI++aU5Cia2fD1kiym6d7ybuCYJC8BfkGzkRI0XVt2Ai4Bfg+8GKBNyP8ZOLN93DuqarBA9ZU0nWXuRdPt5Svt+GzvIUmSJE2NWRP1qjr07rxwVT1vlrueMsNji2YH1Jle5zDgsBnGzwIePsP4r2d6D0mSJGmajNOeUZIkSdI8G6friyRpAbFTjST1w6wz6kn+pb3ebf7CkSRJkgSjS1+emWRl4G3zFYwkSZKkxqjSl5OAa4HVk1xLs8nQYLOhqqp15yE+SZIkaUGadUa97ZO+NnAisD6w3jLXkiRJkiZk5GLSqqokrwSeSjObfmFVXTYvkUmSJEkL2KidSdcEPg48FjiPpuTlEUm+C+xbVTfOT4iSJEnSwjNqMekHgUuBzarqWVX1TOBBwMXAh+cjOEmSJGmhGlX68viq2nx4oKpuA\/4pycWTDUuSJEla2O7qzqST2Q1DkiRJEjA6UT89yVuWHUxyAHDG5EKSJEmSNKr05TXA4Ul+AnyfpuvL1sCFwIsmH5okSZK0cM2aqFfVb4Bdk2wBPIym3OXAqvrxfAUnSZIkLVQj+6gDVNVPgJ\/MQyySJEmSWnd1MakkSZKkCTJRlyRJknpoZKKeZOUkP5ivYCRJkiQ1RibqVXUrcGGSDecpHkmSJEmMsZgUWA+4KMl3gd8NBqtqt4lFJUmSJC1w4yTq7554FJIkSZKWMk57xpOTbARsXlWnJFkNWHnyoUmSJEkL15xdX5LsAywCPtkOPRD40iSDkiRJkha6cdozvhbYDrgBbt8A6f6TDEqSJEla6MZJ1P9YVTcPDpJY9iJJkiRN2DiJ+reT\/AOwWpInAZ8D\/meyYUmSJEkL2ziJ+j8ANwI\/AvYHTgbeOsmgJEmSpIVunK4vtyb5JHAaUMDFVXXbxCOTJEmSFrA5E\/UkOwKHAL8AAmyU5GVV9bVJBydJkiQtVONsePQB4G\/bbi8k2YKmPeNDJxmYJEmStJCNU6N+1SBJh9vbM149uZAkSZIkzTqjnuRZ7c0fJlkEHENTo7478L15iE2SJElasEaVvuw+dPt6YIf29o3A\/SYWkSRJkqTZE\/Wq2ms+A5EkSZK0xDhdXx4IvBrYZPjxVbXb5MKSJEmSFrZxur4sAo4ETgLsny5JkiTNg3ES9Zur6n0Tj0SSJEnS7cZJ1D+c5G3AicBNg8GqOm9iUUmSJEkL3DiJ+hbAS4Gns6T0pYAnTCooSZLGlYMysdeuA2tiry1JcxknUd8D2KSqbprzkZIkaU6T+nLhFwtpxTLOzqTnAWtOOhBJkiRJS4wzo35f4EdJzmDpGnXbM0qStEB4FkCaf+Mk6gcv7zdN8nOaHU5vBW6pqm2TrAt8jqZf+8+BParquiQBPgjsBPweeFFVndO+zt7A29qXfWdVHdGObwN8CrgXcAKwf1X5l0CSJElTY85EvapOntB7P6mqrhk6PgA4uareneSA9vhNNItYN28vjwE+BjymTewPBLalWdx6dpJFVXVd+5h9gdNpEvUdga9M6OeQJEmSlrs5a9ST3Jjkhvby+yQ3JblhArHsDBzR3j4C2GVo\/MhqnA6snWQDYAfgpKq6tk3OTwJ2bO9bq6q+286iHzn0WpIkSdJUGGdG\/faFpElWAnYD\/upuvm8BX0tSwMer6hDg\/lV1RfueVyS5X\/vYDYHLhp67uB0bNb54hnFJkiRpaozT9eV2VXVbVR0LPPVuvu\/2VbU1TVnLfklG9WSfafVK3YXxO75wsm+Ss5KcdfXVV88VsyRJkjRv5pxRT\/KsocOVaGrC79bS76q6vL2+KsnxwKOBK5Ns0M6mbwBc1T58MbDx0NM3Ai5vx5+4zPip7fhGMzx+pjgOAQ4B2HbbbV1sKkmSpN4YZ0Z996HLzsCf2uu7JMnqSdYc3AaeBvwQWATs3T5sb+BL7e1FwAvT2A64vi2RORF4WpJ1kqzTvs6J7X03Jtmu7RjzwqHXkiRJkqbCODXqey3n97w\/cHyTQ7MK8F9V9dUkZwLHJHkJ8AuaLwbQdG3ZCbiEpj3ji9u4rk3yz8CZ7ePeUVXXtrdfyZL2jF\/Bji+SJEmaMrMm6kneMuJ5VVXvuitvWFU\/ZYbFqFX1a+ApM70RsN8sr3UYcNgM42cBD78r8UmSJEl9MKr05dYZLqsCLwf+cfKhSZIkSQvXrDPqVfWvg9tJ1gBeTVPvfSzwb5MPTZIk6a7JQXer78Ws6kB7T2j+jKxRT7I28DqaxZ2fBR7VlqhIkiRJmqBRNervAvagqQH\/q6qaxG6kkiRJkmYwqkb9TcCfAX8P\/DzJte3luiTXjnieJEmSpLtpVOnLPeYtCkmSJElLGbWY9Nb5DESSJEnSEuPsTCpJkiRpnpmoS5IkST1koi5JkiT10Kj2jNcBM3X1D1BVte7EopIkSZIWuFFdX9abtygkSZIkLWXsri9J1gVWGxq6fFJBSZIkLTQ5KBN53TpwpgIJTYM5a9ST\/F2SnwCLgTPa669POjBJkiRpIRtnMenBwPbAj6tqY2AH4NRJBiVJkiQtdOMk6rdU1dXASklSVScBW084LkmSJGlBG7WYdOD6JKsD3wKOTHIVcNtkw5IkSZIWtnFm1HcB\/gi8jqbk5ZfAMyYYkyRJkrTgjZOov7mqbq2qP1XVoVX1PuANkw5MkiRJWsjGKX3ZEXjLMmN\/N8OYJEmSFohJtZMEW0oOjNqZ9OXAK4AtkpwzdNeawFmTDkySJElayEbNqB8DnAy8CzhgaPzGqrpqolFJkiRJC9yonUmvA64Ddk\/ycOBx7V3fBEzUJUmSpAkaZ2fS\/Whm1x\/YXo5J8qpJByZJkiQtZOMsJn058Oiq+i1Akn8BvgP8xyQDkyRJkhaycdozBvjT0PGf2jFJkiRJEzKq68sqVXUL8Gng9CTHtXftChwxH8FJkiRJC9Wo0pfvAVtX1XuSnAI8nmYm\/RVVdea8RCdJkiQtUKMS9dvLW9rE3ORckiRJmiejEvX1k7xhtjur6n0TiEeSJEkSoxP1lYE1cOGoJEmSNO9GJepXVNU75i0SSZIkSbcb1Z7RmXRJkiSpI6MS9afMWxSSJEmSljJrol5V185nIJIkSZKWGGdnUkmSJEnzzERdkiRJ6qFRXV8kSZKkFUYOmkyvlDqwJvK6zqhLkiRJPWSiLkmSJPWQibokSZLUQybqkiRJUg+tsIl6kh2T\/DjJJUkO6DoeSZIk6c5YIRP1JCsDHwWeDmwJPC\/Jlt1GJUmSJI1vhUzUgUcDl1TVT6vqZuBoYOeOY5IkSZLGtqIm6hsClw0dL27HJEmSpKmQqsk0aO9Skt2BHarqpe3xXsCjq+o1yzxuX2Df9vAhwI8nEM56wDUTeN1JMubJm7Z4YfpinrZ4wZjnw7TFC8Y8H6YtXjDm+TDJeP+8qtaf60Er6s6ki4GNh443Ai5f9kFVdQhwyCQDSXJWVW07yfdY3ox58qYtXpi+mKctXjDm+TBt8YIxz4dpixeMeT70Id4VtfTlTGDzJJsmWRXYE1jUcUySJEnS2FbIGfWquiXJq4ETgZWBw6rqgo7DkiRJksa2QibqAFV1AnBC13Ew4dKaCTHmyZu2eGH6Yp62eMGY58O0xQvGPB+mLV4w5vnQebwr5GJSSZIkadqtqDXqkiRJ0lQzUZckSZJ6yERdkiRJ6iETdQGQZN2uY1D\/JLlXkod0HcdCkWSdJH\/ZdRzqhySPS\/Li9vb6STbtOqbZJFk9yUrt7S2SPCvJPbrVChBRAAAd\/0lEQVSOa5QkmyW5Z3v7iUlem2TtruOazUz\/\/\/v8OzGt+vZ7YaK+nCXZPsnq7e0XJHlfkj\/vOq4xnJHk80l2SpKugxlHkv2TrJXGoUnOSfK0ruOaTZL3tPHeI8nJSa5J8oKu45pNkmcC5wJfbY+3StL7\/QiSrJzkAUkeOLh0HdMoSU5tfy\/WBX4AHJ7kfV3HNZsk5yc5b5nLN5O8P8l9u45vJkl2S3JxkuuT3JDkxiQ3dB3XKEkOBN4EvLkdugfwme4imtM3gNWSbAicDLwY+FSnEc3tOODWJA8GDgU2Bf6r25BGOm6GsWPnPYo7Kcm9k\/xjkk+0x5sneUbXcY3Qq98LE\/Xl72PA75P8FfAPwP8CR3Yb0li2oGlDtBdwSZJ\/SbJFxzHNZZ+qugF4GrA+zQfDu7sNaaSntfE+g2b33C2AN3Yb0khvBx4N\/Aagqs4FNukwnjkleQ1wJXAS8OX28j+dBjW3+7S\/F7sBh1fVNsDfdhzTKF+h+e\/6\/Pby3zRJ2q\/ob2L2HuBZVXWfqlqrqtasqrW6DmoOuwLPAn4HUFWXA2t2GtFoqarf0\/wef7iqdgW27DimudxWVbfQ\/Lf+QFW9Htig45juIMlfJHk2cJ\/2S+fg8iJgtY7DG8fhwE3AX7fHi4F3dhfOnHr1e7HC9lHv0C1VVUl2Bj5YVYcm2bvroOZSTZ\/Ok4CTkjyJZubmVUl+ABxQVd\/tNMCZDWb+d6JJcH7Q87MBg9PAOwFHVdW1\/Q6XW6rq+p7HuKz9gYdU1a+7DuROWCXJBsAewFu7DmYM21fV9kPH5yf5dlVt3+MzRFdW1UVdB3En3dx+lhQ0pSVdBzSHJPlrmi9vL2nH+p5j\/CnJ84C9gWe2Y30s13kIzQTP2iyJE+BG4GWdRHTnbFZVz23\/W1NVf+j5Z3Wvfi\/6\/o9oGt2Y5M3AC4AnJFmZfv7DX0p7yvoFNDPqVwKvARYBWwGfpzn10zdnJ\/kaTWxvTrImcFvHMY2yKMmPgD\/QfAlaH\/hjxzGN8sMk\/wdYOcnmwGuB73Qc01wuA67vOog76SCaXZS\/VVVnJnkQcHHHMY2yRpLHVNUZAEkeDazR3ndLd2HdUZLd2ptnJfkc8EWamT0AquoLnQQ2nmOSfBxYO8nLgH2AT3Qc0yivoynTOb6qLmh\/j0\/pOKa5vBh4BXBwVf2srffuXXlRVX0J+FKSv+7ppNlcbk5yL2DwpXMzhv4d9lCvfi\/c8Gg5S\/JnwP8Bzqyqb7b1sU+sql6XvyT5CfBpmpnpxcvc96aq+tduIptdmoVLWwE\/rarftDW+G1XVeR2HdgdtrNsBFwE3VNWt7QzZmlX1q26jm1mSe9PM8A7q\/k8E3llVvf1ykeRQmtmnL7N0Qtbnmu\/tq+rbc431RZJHAYfRJOcBbgBeClwA\/F1VHdNheEtJcviIu6uq9pm3YO6CJE+l+fcX4MSqOqnjkOaUZPWq+l3XcaxIknyYNsmdSVW9dh7DudPa3+O30ZRCfQ3YHnhRVZ3aZVyzSfJk4PS2lKtzJurLWZJ\/rao3zTXWN0n2WPYDNsnuVfX5rmKaS5LtgXOr6nftKfetacqN\/rfj0GaU5LtV9ddzP1J3VbsA7w6q6qD5jmVcSc6pqq3nGuubJPeh+Qz5TdexzGXavgzB7d08rhh8MW5nJO9fVT\/vNLBZtGUvhwJrVNUD23VaL6+qV3Uc2h0kOZ\/RiW+vOi\/NVT5bVUfMVyx3VXvWfjuaL52nV9U1HYc0qyRH0sT6a+Cb7eVbVXVdJ\/GYqC9fs3zonte3f\/jLmsZkIcl5wF8Bf0lzNuBQYLeq+ptOA5tFkoOA84Av1BT8w0tyErD7IBFLsg5wdFXt0G1kc2vLoKqqftt1LLNpE5vH0pQMvH\/orrWAXavqrzoJbA5p2pY9m2Zh8e3lk1X1jq5imsuU\/n07C3hsVd3cHq8KfLuqHtVtZDNLcgbwHGBRVT2yHfthVT2828juKEs6se3XXn+6vX4+8Ps+\/y5PqzRtZzdh6b8ZfS49I8kDaH6n\/x54QFV1Ui5ujfpykuSVwKuAzdoEcmBNoM+zNk+nWdy4YZIPDd21Fj2rN53BtC3cfQOwOk3bpz\/QzCxUj7tPrDc8W1pV1yW5X5cBzSXJw2k+dNdtj68BXlhVF3Qa2MxWpSkfWYWlu3ncQPPh0FdfolkHcDb9rjMd\/jK0fpI3DN21FrByN1GNbZVBkg5QVTe3yXpvVdVly6wRvLWrWEYZnHVtz6oML4w+IMm3gV4m6klOYYYzAVX15A7CGVuSw2gm1C5gyTqyAnqZqLdn6B8PPAK4BvgIzax6J0zUl5\/\/omlb9i7ggKHxG6vq2m5CGsvlwFk0bcDOHhq\/EXh9JxGNb7Bwdy\/g8X1fuFtVfW6tNpPbkjywqn4Bt89C9f1MwCHAG6rqFGg2q6BZgPfYLoOaSVWdluRbwCP6XJozg42qaseugxjTtH4ZArg6ybOqahFAOyHR23IB4LIkjwWq\/ULxWpo1OX22epLHVdW3ANr4+9xd5++Hbq9Gc2ar7xNqANtVVd9bdQ77AHAp8J\/AKV2Xm1n6shy1CwbP6+Opvrmk2UFuFeCBVfXjruMZx7Qt3G3bUT0f2LSq\/jnJxsAGVfW9jkObUZIdaRLf09qhJwD7VtWJ3UU1WpIfLFsyMtNYnyT5et9nxIYlOYSmT\/b5XccyriR\/3te1K7NpO2N8FngAzdm3y2jODl3SaWCzSLIe8EGaPQBCs2hw\/z63Sk2yDc3C6Pu0Q7+h2Z\/jnO6iunOSnNbXcs+BdpH\/e6vqwq5jGVeSh9F85j0O2Bz4cVXt1UksJurLV5LPAm8ezEJOizS7UP47sGpVbZpkK+AdVfWsjkMbqZ3l3byq\/l\/bpWTlqrqx67hmkuRjNKf9nlxVD21rvr\/W15pTuP3Dd7AA6Lt9XgAEkOR44ByW1Jy+ANi2qnbpLqrRkryX5oPg87Sb20B\/6zeTXAg8GPgZTenLoISrd+twkvw3oxcN9vrvG0CSNWg+q3v5d21FkGQtmv\/GvW7t2nY2G1gJ2Ab4UFU9pKOQxpLkCTQbo\/2Knv\/NgNt\/H7YH\/oamBGY9mgWwnZTWWvqy\/G0AXJDkeyz50K2q2rnDmMbxdppdKE+FZhfKJJt0F87c0vQW3pemHnkzYEOaU1VP6TKuER5TVVsn+T7cXvPd65pT4J7AtTR\/K7ZMQlV9o+OYRtmHpi\/5F2g+DL5B0xO3z9al6S4wPKve2\/pN4OldB3An\/HvXAdxVyy7aHdR+93WhY9ul5jXcccFg774MJXlBVX1mmXULDP037ms717Np\/jaEpuTlZyzZXKrPDqMpUT2ffu91MvCtoctHapmW1fPNRH35G641Dc1pk+d1FMudMY27UO5H8+XiDICqurjnix3\/1NbRDzZ9WJ8e\/9FK8q\/Ac7njAqDeJupt+6xe9xReVlX1\/YsE0MwyVdUNNOtXpkJVnTb3o3prahbttr5I03nrv+nx37XWoA59pnVDvS0zqKo+bjw4jl8M1lpMg8FMf3qyJ4CJ+nLWLhDbiqZ2eg+ab7z\/2W1UY5nGXShvajshAJBkFXr8Rxb4EHA8cL8kB9MsZvvHbkMaaRfgIVXV+yQhyQeq6nWzlTr0cVZvIMlGwIdpTrUWzSzO\/l3P4szgv2i2MR+e1Rso4EFdBDWO9m\/au2g2XFltMF5VvY2Z6Vq0C\/DHqvrQ3A\/rhS\/DzPsrtGWgvZIlO+zOqK9lckN+lOS\/aL7E9X5n4OE9AYDO9wQwUV9OkmwB7Ekze\/5r4HM0NW9P6jSw8b2GZhfKm4CjaHah\/OdOI5rbaUneAtwrzc5nr6L5Q9BLVfXZJGfTlOYE2KWq+twV4ac0XXR6n6izpCZ9GksdDqdJgndvj1\/Qjj21s4hmUFXPaK+ncVbvcOBAmn71T6Iph+r76cPvJHnEFC3a\/WCaDce+xtLJWB8XZp6cZIdlu3kkeTHNDpp9+xwZfHm4H00Hq6+3x0+iKVftZcI75F40vxNPGxrrc3nfB4AdgEUAVfWDts6+Ey4mXU6S3EbTZ\/Mlg1X5SX7a8xmbqdZ22XkJQ1tsA5+snv5SJ\/n0sqvGZxrriyTH0WwodTJLf\/D2trQkyf5V9cG5xvokyblVtdVcY33SzvA9jubD9ptV9cWOQxopydlVtU2S86vqEe3YN6vq8V3HNptpWrQLkORdNHXIlzJUKtfHjkZJdqLpULNTVV3cjr2Z5kz403t4NguAJP8DvKyqrmiPNwA+WlUjZ9x15yQ5o6oek+T7tWTzrs66hzmjvvw8m2ZG\/ZQkXwWOpv8zNlNdMlBVt9H0yP5E17GM6WHDB229+jYdxTKORe1lmuxN8wE87EUzjPXJNe0GG0e1x4Ozcr2U5D9oEshBvK9I8tSq2m\/E07r2x\/aL\/cVJXg38kmZ2ss+madEuwK7Ag2pok6a+qqoTktwEfCXJLsBLgUcBT6iOtokf0yaDJL11JdDrji8wVeV9A73aE8AZ9eUsyeo0tb3Po+nicARwfFV9rdPAZpFkm6o6O8mMfVj7vBgryfY03Wr+nOZL52DGqVdnMdqZmrfQnP77PUu+wN0MHFJVb+4qtrkkuRdT0Fs\/yfNoZsMex9I7yK0J3FpVf9tJYGNo+\/9\/BPjrdujbNB9ivez7neQC4OGDM1dtAnx+VT1s9DO7k+RRNB+0a9OU9K0F\/FtVnd5pYHNI8jia9rOHt4vP16iqn3Ud10ySfA54TVVd1XUs42r\/+36RZj3WHlX1x45DGinJR2hauR5Fk\/DuCVzc57OcAElOoinvG26b+\/yq6lV530Df9gQwUZ+gtufp7sBz+3j6b1j7BeMP7Sz1YLb3nlX1+24jm12SH9Hsnno2Q1tVd\/WPaS5J3tXnpHxZ09Rbv+2nvykz7AxMswnZNOzeNxWSfAF4fS3Zhv3PgXdXVe+7W\/Wli8M42nrvbWkWdG+R5AHA52vpLe97I8mpNNvEn8nSpXJ9\/HtxI0sWRN8T+BPNZ8hgsmetDsMbKcmuNBvxAFwH3L\/nZ7OmsryvTyx9maCquhb4eHvpu5Npvj3+tj2+F823yN5tvT7k+qr6StdB3AlfmWlBSo\/7kr+dO\/bW7+VCwjZp\/F+WzEpPjSQPopm92Y4mefguTSL8004Dm919gYvavSKgKRn4bpLBwqs+Jma96uIwpl2BR9Js4EVVXZ5kpnaCfXFg1wGMq6r6\/N9xLj+j+Ts36Cp3XLfhjGUqyvuS\/NOIu6uqOmmwYaKugdWqapCkU1W\/TbPTZ5+dkuTfaFaO973LAMAbh26vRpMEn83SG930yUy99Xt9Ci7JdjS1kA8FVgVWBn7X5xkymlPCH6VJzKA5nX0U8JjOIhpt1IdZX\/Wqi8OYbq6qSjIoMVp9rid0qc9lktNuBegqtw9Ned\/7aT5DvtOO9c1MZ9tWp2lacV866oRnoq6B3yXZepDkJtkG+EPHMc1lkMhsOzRW9DTxraql+vMm2Rh4T0fhjGMae+t\/hOYD7fM0vxcvpFn42Gepqk8PHX+mXfDYS+1eEX9G80WzgDOr6lcdhzWnqrpsmS+dt8722J44JsnHgbXT7MK8Dz1eOD+lX5KnxY9o1t48c6ir3Ou7DWl8VfULoHdn2pZVVe8d3G7PXu1P08r1aOC9sz1v0kzUNfA64PNJLm+PN6DZlbK3pmg2YTaLgYd3HcQI09hbn6q6JMnKVXUrcHiSvn+5OCXJATQfBkXz7+7L7RqXQQldbyR5Kc2s+tdpano\/nOQdVXVYt5GN1KsuDuOoqn9v94e4gaazxz9V1UkdhzXKTF+SN+80ohXHtHaV+zAjzsL2cRFs+3f3DcDzaZqBbN11JyAXk+p2Se5B84EQ4EdV9aeOQ5pRkhdU1WeSvGGm+6vqffMd0ziW+aO1ErAV8POqekF3Ua1YknyDZq3FJ4FfAVcAL+qq\/+04kgy6eAx+N5ba8bOHXYx+DDx2sGg7yX2B71RVb9vE9a2Lw1zaxfwn9rlb0bKSnFVV2yY5r5Zswf6dqurzOqepMoVd5fYeOjyIZdYxVNUR8xvRaG0p7W7AITT96X87x1PmhYm6gNuT9FeyZDX5qcDH+5isJ3l5VX287YpwBzXDttB9sMwfrVtokvRvdxXPbKa5t37bgeRKmlPvrwfuA\/zH4HRxn7QtAy8blI20vx\/PBn4OvL1vM+kDSU6m2RTm5vZ4VeCEaUoqp0G7OHevqrq+61jGMfQl+VCaL8i9\/5I8zaapqxzA8OZBfZVm48qbaD6fhz\/7Ou0GZKIuAJJ8kma7+ME33L1o+k+\/tLuoVjxtUvMXNH8EftzHzUGmubc+TFXv93OAv62qa9uFjUfTlBttBTy0qp7TaYCzSHIk8AjgSzS\/xzsD3wN+Av06ozWNp94HkhxD0wnoJIYWufU15hm+JK8FfKyPX5I1\/5KcU1Vbdx3HNLJGXQOPWmbm4+tJftBZNGNI8h7gnTSLXr9Ks93966rqM50GNos021Z\/nGaL7QCbtmcHetVisqrObm+exQy99TsLbAzDvd9p\/vv2tvc7sPLQrPlzaTa\/Og44Lsm5HcY1l0vby8CX2us+trw7a+j2HU6999yX20uvJdkZ2KiqPtoen0az6+ug1aiJunQ3OKMu4PbZvd2r6tL2+EHAsX3+BjzYMKHdAGIXmlmcU\/p6qrXdoOkZQ6v2NwO+XFV\/0W1kM0tyOs2M72\/b4zWAr\/W55jTJoN3lqYPTrMM1s32S5IfAVlV1S\/u7se+gp36SH1ZVnxcaD7oiVF\/qOOcyDafelzUNZ4eSfBvYs6oua4\/Ppfk3uAZweFU9pcv41J2hjaUA7k2zMzdMwcZSfeKMugbeSLOifLDJyiY0bYn67B7t9U7AUW0JQZfxzOWqZU4D\/xTo83bb09hbf6be7311FHBakmtozgp9EyDJg4He1iUneTjNVuDrtsfXAC+sqgs6DWxuUzUrNUVnh1YdJOmtb7Vniq7te+93TdaUbyzVGybqC9zQgraT217ZL6dZEPQ1oNelL8B\/tzORfwBelWR94I8dxzTKBUlOAI6hSRp2B85MshtAVX2hy+BmsGxv\/W3pf2\/9qen9XlUHtwszN6A5UzHcEeg13UU2p0OAN1TVKQBJnkjT37u3Z1qm1NuZjp2B1xk+qKrhPQDWn+dYpBWOpS8L3LQuaBtIsg5wQ1Xd2s72rtXXzVeSHD7i7qqqXu3U1n6JOxq4nOaLxQNoOgycPfKJHWp\/B94KPK0dOhF4Z1X1+QvcVEnyg2XLy2Ya64NpPvWe5IyqesxwyU4fy7iSfJam1OwTy4y\/HHhiVT2vm8ikFYOJ+gI3\/AGb5KPA1VX19vb43Kraqsv4RknywpnGq+rI+Y5lRTLcNrBt2\/lymt6yF9JsutLXtoErA++uqjd2HcuKLMnxwDk05S8ALwC2rapduotqxZPkUOBk4ACatp2vBe5RVa\/oNLBlJLkf8EWatnbntMPb0Cw836WqruwqNmlFYKK+wE3zgra29drAasBTgHP6ehagPW39Gpr6\/9vLzvpWczrNZ1mSfH0aegpPs\/Ys1kHA42hmpr9B0\/e90937VjTTdnYoyZOBh7WHF1TV17uMR1pRmKgvcEneSrMY8xrggTTb5Va7oO2Iqtq+0wDvhCT3AT7dt8R3oG13eShwPnDbYLxvfcmn\/CzLe2m2Lf88S\/ee7lv9vzSjJJ+uqr2S7F9VH+w6HkndcjHpAjfFC9pm8nuaJK2v\/lhVH+o6iDGsnGSVqrqF5izFvkP39f1vxrrAr2naww0UYKK+nCTZAvh77nhmyDMZy8c27eZB+7SbSy3VwqivpWeSJqPvH7qaB1V1+gxjP+kiljsjS29xvxKwJU1Hlb76YJIDaTrq3DQYHHRV6ZGpbBsIUFV9bym6Ivg88J\/AJ4FbO45lRfSfNBu4PYglNd8D1Y5LWiAsfdHUWmaL+1uA\/62qxV3FM5ck7wL2otnVcVD6Un2ciUyyHUvOsvyuHdsCWKOHXyxul+QIYP+q+k17vA7w3r511JlmSc6uqm26jmNFl+RjVfXKruOQ1C0Tda0QkqwH\/Lp6\/AvdLtb9y6q6uetYVlQz7T45jTtS9lGSddubr6XZqOt4lj4zZEnGcpbkccDmVXV4+zduzar6WddxSZo\/lr5o6rSzve8GrgX+maZN3HrASkleWFVf7TK+EX4ArE2\/dyOddislWWfQgaRNLv07t3ycTVN6MaiZ\/vtl7rckYzlqy+S2BR4CHE6zQ+lngKlZ4C\/p7vMDTNPoI8BbgPsAXweeXlWnJ\/kLmvrqvibq9wd+lORMlp6J7GWXmin1XuA7SY6lSSr3AA7uNqQVxnNp+utfAZBkb5r+3j+n2UVTy9euwCNp69Sr6vIkbskuLTAm6ppGq1TV1wCSvGOwGLaqfpRk9DO7dWDXAazoqurIJGfRdH0JsFtVXdhxWCuK\/wT+FqDtr\/8ulvTXPwTobX\/9KXVz2yq3AJKs3nVAkubfSl0HIN0Ftw3d\/sMy9\/W2Rr3tl\/4jYM32clHfeqivINYFfldVHwaubjea0t238lAd+nOBQ6rquKr6R+DBHca1ojomyceBtZO8DPh\/NJ12JC0gLibV1ElyK81mNgHuRdM\/nfZ4taq6R1exjZJkD+DfgFNpYn088MaqOrbLuFYkw3W9VbVFkgcAn5+mjbv6app3MZ5WSZ5KszNpgBOr6qSOQ5I0zyx90dSpqpW7juEueivwqKq6CiDJ+jSzZCbqy491vZMztf31p1WbmJ8EkGTlJM+vqs92HJakeWSiLs2flQZJeuvXWH62vFnXOyEr2C7GvZVkLWA\/YENgEU2ivh\/wRuBcwERdWkBM1KX589UkJ9LMTEJT53tCh\/GsiJat690H63qXm2ndxXjKfBq4Dvgu8FKaBH1VYOeqOrfLwCTNP2vUpQlrSwPuX1XfTrIb8DiamtPrgM9W1aWdBriCsa5X0yzJ+VX1iPb2ysA1wAOr6sZuI5PUBRN1acKS\/A\/wlqo6b5nxbYEDq+qZ3US24msTnT2t69W0SHJOVW0927GkhcVEXZqwUR0xhmfPdNfNVddbVTt3GJ40tqGuVrB0Z6sAVVVrdRWbpPlnjbo0eauNuO9e8xbFis26Xq0QprirlaQJMFGXJu\/MJC+rqk8MDyZ5CXB2RzGtaB40VNf7SazrlSStAEzUpcl7HXB8kuezJDHflmbGd9fOolqx\/Glwo6puTfIzk3RJ0rSzRl2aJ0meBAxq1S+oqq93Gc+KxLpeSdKKyERdkiRJ6iF3RZQkSZJ6yERdkiRJ6iETdUlaIJL8WZKjk1ya5MIkJyTZYpbHrp3kVfMdoyRpCRN1SVoAkgQ4Hji1qjarqi2Bt\/D\/27uDEKuqOI7j3x8iioxpULZwoRAuDBdK5C7FjZAiIbkIVKKgdi4EFSHCFDHBjdTGQhAFkRCpbBERiRNJgjJqKbjKaRtEmIKB4L\/FPU8mmFk4w+Ab3\/cDj\/fuueeee+7q\/Ticew68NMElC4FpD+pJXH1MkiZgUJekwbAOeFhVx3oFbTOoa0l+TDKS5LckvV1cDwMvJ7me5AhAkt1JriT5Ncn+XjtJPkpyO8kPSc4k2dXKVya53Op\/leT5Vn4xyaEkw8CHSe4kmd3OPZdktHcsSYPMkQxJGgwrGH+DrX+BzVX1T5IXgMtJzgN7gRVVtRIgyXpgGbCabtnL80nW0C2D+Rawiu4\/ZWTMfU4BO6pqOMkBYB\/dvgIAC6tqbWt7KbAR+Bp4GzhXVY\/XxpekQWVQl6TBFuBQC92PgMWMPx1mfftca8dDdMF9PvBNVT0ASPJt+15AF8aHW\/2TwNkx7X055vdxYA9dUH8XeH\/qjyVJM59BXZIGwy1gyzjlW4EXgVer6mGSUWDuOPUCfFJVn\/+vMNk5yf70Nqiiqi4lWZpkLTCrqm5Osk1JeqY4R12SBsMFYE6Sx6PVSV4DlgB\/tpC+rh0D3KMbLe\/5HngvyVC7dnGSRcDPwKYkc9u5jQBVdRf4O8nr7frtwDATOwWcAU5M8Tkl6ZnhiLokDYCqqiSbgaNJ9tLNTR8FPgY+TXIVuA7cbvX\/SnIpyU3gu6ranWQ58Eu3gAz3gW1VdaXNab8B\/AFcBe62274DHEsyD\/idblrLRE4DB+nCuiQJSFU97T5IkmawJENVdb8F8p+AD6pq5Anb2AK8WVXbp6WTkjQDOaIuSZqqL5K8Qje3\/eQkQvpnwBvAhunonCTNVI6oS5IkSX3Il0klSZKkPmRQlyRJkvqQQV2SJEnqQwZ1SZIkqQ8Z1CVJkqQ+ZFCXJEmS+tB\/A1i2+DKqF1oAAAAASUVORK5CYII=)\n\n\n\n","4773dae5":"## Accuracy of Testing Set","a287ea4e":"## Bi\u1ec3u \u0111\u1ed3 s\u1ed1 l\u01b0\u1ee3ng items trong t\u1eadp training","f443f992":"# \u00dd ngh\u0129a c\u1ee7a macro avg v\u00e0 weighted avg:\n\nMacro-average precision l\u00e0 trung b\u00ecnh c\u1ed9ng c\u1ee7a c\u00e1c precision theo class, t\u01b0\u01a1ng t\u1ef1 v\u1edbi Macro-average recall v\u00e0 Macro-average F1-score:\n\n\\begin{equation}\nmacro-avg-precision = \\frac{\\sum_{c=1}^{N} precision}{N}\n\\end{equation}\n\n*   V\u1edbi N l\u00e0 s\u1ed1 class trong t\u1eadp d\u1eef li\u1ec7u. \n*   \u1ede trong b\u00e0i to\u00e1n URL Classification n\u00e0y N = 15.\n\nAccuracy s\u1ebd th\u1ec3 hi\u1ec7n kh\u00f4ng ch\u00ednh x\u00e1c v\u1ec1 \u0111\u1ed9 ch\u00ednh x\u00e1c c\u1ee7a m\u00f4 h\u00ecnh trong tr\u01b0\u1eddng h\u1ee3p t\u1eadp training l\u00e0 t\u1eadp d\u1eef li\u1ec7u m\u1ea5t c\u00e2n b\u1eb1ng (imbalance dataset). V\u1eady n\u00ean ch\u00fang ta s\u1ebd c\u1ea7n weighted average \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 m\u00f4 h\u00ecnh:\n\n\\begin{equation}\nweighted-average-precision= \\frac{\\sum_{n=1}^{N} precision_{n} \\times support_{n}}{m}\n\\end{equation}\n\n*   V\u1edbi $support_{n}$ l\u00e0 s\u1ed1 samples c\u1ee7a class th\u1ee9 n\n*   m l\u00e0 t\u1ea5t c\u1ea3 samples trong t\u1eadp test\n\nC\u00e1c c\u00f4ng th\u1ee9c \u0111\u1ec3 t\u00ednh macro-avg v\u00e0 weighted-avg d\u00e0nh cho recall hay f1-score c\u0169ng \u0111\u01b0\u1ee3c t\u00ednh to\u00e1n t\u01b0\u01a1ng t\u1ef1 nh\u01b0 t\u00ednh cho precision.","62387349":"## Confusion matrix of training set\n\nColor bar b\u00ean ph\u1ea3i l\u00e0 th\u1ec3 hi\u1ec3n \u0111\u1ed9 l\u1edbn c\u1ee7a c\u00e1c gi\u00e1 tr\u1ecb trong confusion matrix. Gi\u00e1 tr\u1ecb c\u00f2n l\u1edbn th\u00ec m\u00e0u c\u1ee7a n\u00f3 c\u00e0ng \u0111\u1eadm."}}