{"cell_type":{"7e454728":"code","49ca34ee":"code","ddf62ff5":"code","49b9325f":"code","cf86f175":"code","0afb67a5":"code","f6a577f8":"code","8f7f5c05":"code","f9cc039e":"code","67dd1679":"code","1e9e93fb":"code","09e1c256":"code","d7f705f8":"code","51f0dd55":"code","74ae41d4":"code","50e8c448":"code","7c654e2e":"code","3f374f64":"code","faeb17e3":"code","d1012548":"code","c5b33980":"code","6f92cb7b":"code","9b3bdde0":"code","bae41967":"code","2df773bf":"code","d49cc299":"code","82fa657b":"code","0e187155":"code","ed36cf37":"code","349898bd":"code","307b3c4b":"code","1d32e75b":"code","8935d908":"code","38874338":"code","b26b690b":"markdown","416052cb":"markdown"},"source":{"7e454728":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","49ca34ee":"from sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing\nimport matplotlib.pylab as pylab\nimport matplotlib.pyplot as plt\nfrom pandas import get_dummies\nimport matplotlib as mpl\nimport xgboost as xgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport numpy\nimport json\nimport sys\nimport csv\nimport os","ddf62ff5":"print('matplotlib: {}'.format(matplotlib.__version__))\nprint('sklearn: {}'.format(sklearn.__version__))\nprint('scipy: {}'.format(scipy.__version__))\nprint('seaborn: {}'.format(sns.__version__))\nprint('pandas: {}'.format(pd.__version__))\nprint('numpy: {}'.format(np.__version__))\nprint('Python: {}'.format(sys.version))","49b9325f":"sns.set(style='white', context='notebook', palette='deep')\npylab.rcParams['figure.figsize'] = 12,8\nwarnings.filterwarnings('ignore')\nmpl.style.use('ggplot')\nsns.set_style('white')\n%matplotlib inline","cf86f175":"# import train and test to play with it\ndf_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","0afb67a5":"type(df_train)","f6a577f8":"type(df_test)","8f7f5c05":"df_train.head()","f9cc039e":"# Modify the graph above by assigning each species an individual color.\ng = sns.FacetGrid(df_train, hue=\"Survived\", col=\"Pclass\", margin_titles=True,\n                  palette={1:\"seagreen\", 0:\"gray\"})\ng=g.map(plt.scatter, \"Fare\", \"Age\",edgecolor=\"w\").add_legend();","67dd1679":"df_train.plot(kind='scatter', x='Age', y='Fare',alpha = 0.5,color = 'red')","1e9e93fb":"#show scatter plot with using Matplotlib\nplt.figure(figsize=(8,6))\nplt.scatter(range(df_train.shape[0]), np.sort(df_train['Age'].values))\nplt.xlabel('index')\nplt.ylabel('Age')\nplt.title('Explore: Age')\nplt.show()","09e1c256":"ax= sns.boxplot(x=\"Pclass\", y=\"Age\", data=df_train)\nax= sns.stripplot(x=\"Pclass\", y=\"Age\", data=df_train, jitter=True, edgecolor=\"gray\")\nplt.show()","d7f705f8":"# histograms\ndf_train.hist(figsize=(15,20));\nplt.figure();","51f0dd55":"df_train[\"Age\"].hist();","74ae41d4":"df_train.Age.plot(kind = 'hist',bins = 5);","50e8c448":"f,ax=plt.subplots(1,2,figsize=(20,10))\ndf_train[df_train['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('Survived= 0')\nx1=list(range(0,85,5))\nax[0].set_xticks(x1)\ndf_train[df_train['Survived']==1].Age.plot.hist(ax=ax[1],color='green',bins=20,edgecolor='black')\nax[1].set_title('Survived= 1')\nx2=list(range(0,85,5))\nax[1].set_xticks(x2)\nplt.show()","7c654e2e":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=df_train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","3f374f64":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train[['Sex','Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Sex:Survived vs Dead')\nplt.show()","faeb17e3":"sns.countplot('Pclass', hue='Survived', data=df_train)\nplt.title('Pclass: Sruvived vs Dead')\nplt.show()","d1012548":"# scatter plot matrix\npd.plotting.scatter_matrix(df_train,figsize=(10,10))\nplt.figure();","c5b33980":"# violinplots on petal-length for each species\nsns.violinplot(data=df_train,x=\"Sex\", y=\"Age\")","6f92cb7b":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","9b3bdde0":"# Using seaborn pairplot to see the bivariate relation between each pair of features\nsns.pairplot(data=df_train[[\"Fare\",\"Survived\",\"Age\",\"Pclass\"]],\n             hue=\"Survived\", dropna=True);","bae41967":"sns.FacetGrid(df_train, hue=\"Survived\", size=5).map(sns.kdeplot, \"Fare\").add_legend()\nplt.show();","2df773bf":"sns.jointplot(x='Fare',y='Age',data=df_train);","d49cc299":"sns.jointplot(x='Fare',y='Age' ,data=df_train, kind='reg');","82fa657b":"sns.swarmplot(x='Pclass',y='Age',data=df_train);","0e187155":"plt.figure(figsize=(7,4)) \nsns.heatmap(df_train.corr(),annot=True,cmap='cubehelix_r') #draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show();","ed36cf37":"plt.imshow(df_train.corr(), cmap='hot', interpolation='nearest')\nplt.show()","349898bd":"df_train['Pclass'].value_counts().plot(kind=\"bar\");","307b3c4b":"sns.factorplot('Pclass','Survived',hue='Sex',data=df_train)\nplt.show();","1d32e75b":"sns.factorplot('SibSp','Survived',hue='Pclass',data=df_train)\nplt.show()","8935d908":"#let's see some others factorplot\nf,ax=plt.subplots(1,2,figsize=(20,8))\nsns.barplot('SibSp','Survived', data=df_train,ax=ax[0])\nax[0].set_title('SipSp vs Survived in BarPlot')\nsns.factorplot('SibSp','Survived', data=df_train,ax=ax[1])\nax[1].set_title('SibSp vs Survived in FactorPlot')\nplt.close(2)\nplt.show();","38874338":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(df_train[df_train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(df_train[df_train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(df_train[df_train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","b26b690b":"reference: https:\/\/www.kaggle.com\/mjbahmani\/a-comprehensive-ml-workflow-with-python","416052cb":"# Data_Visualization "}}