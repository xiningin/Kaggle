{"cell_type":{"485528df":"code","52f2abfc":"code","60ed1d16":"code","97ccb69d":"code","5d6486cf":"code","09e1401d":"code","01487d8e":"code","64df9403":"code","16c5e7b6":"code","6b952fb0":"code","df3463c2":"code","cbd98884":"code","4e8bbae3":"code","cd69b7ca":"code","d639ef34":"code","83a4a341":"code","c1726acf":"code","b33fefcd":"code","f41aa7a3":"code","6a0f0b73":"code","d7f3c750":"code","851f6276":"code","23def92f":"code","f7cf7cb4":"code","c10a5269":"code","5266ca38":"code","bb52c903":"code","e566fbc4":"code","c629bacd":"code","b753e984":"code","ae0bebf9":"code","ff2c882c":"code","4c1baf34":"code","054b8d5c":"code","68444754":"code","40fb3abf":"code","4f832283":"code","ef07d06d":"code","42438216":"code","a097b3b0":"code","d543e08c":"code","ad65dfca":"code","77156790":"code","c6c31872":"code","6025be15":"code","914e423a":"markdown","b7a84576":"markdown","ff26ed2d":"markdown","cec6caeb":"markdown","1d24a0b9":"markdown","2f652a3c":"markdown","0a978508":"markdown","fe2c4993":"markdown","a5d3a7e5":"markdown","74f9ae80":"markdown","86249b6c":"markdown","ee92f539":"markdown","6927cfc1":"markdown","34e418c5":"markdown","2c9986d6":"markdown","daf70c70":"markdown","63da6dec":"markdown","6bead2fe":"markdown","13fc184f":"markdown","f36f24c8":"markdown","4f60c062":"markdown","31e2e751":"markdown","2bb579b1":"markdown","36a65c8a":"markdown","0894da52":"markdown","169caf32":"markdown","7d81f3a0":"markdown","5aa57571":"markdown","8e32c2d5":"markdown","4e6b27b4":"markdown","56391911":"markdown","f1f45dc6":"markdown","542abc03":"markdown","afdc6dba":"markdown","989eb1b0":"markdown"},"source":{"485528df":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport keras as keras\nimport os\n\nimport plotly.offline as py \npy.init_notebook_mode(connected=True) \nimport plotly.graph_objs as go \nimport plotly.tools as tls \nimport plotly.figure_factory as ff \nimport warnings\nwarnings.filterwarnings('ignore')","52f2abfc":"print(os.listdir(\"..\/input\"))","60ed1d16":"dataset = pd.read_csv('..\/input\/churn-modellingcsv\/Churn_Modelling.csv')","97ccb69d":"dataset.head()","5d6486cf":"dataset.columns","09e1401d":"dataset.shape","01487d8e":"dataset.isna().sum()","64df9403":"dataset.describe().T","16c5e7b6":"dataset.nunique()","6b952fb0":"dataset = dataset.drop([\"RowNumber\", \"CustomerId\",\"Surname\"], axis = 1)","df3463c2":"churn     = dataset[dataset[\"Exited\"] == 1]\nnot_churn = dataset[dataset[\"Exited\"] == 0]","cbd98884":"target_column = [\"Exited\"]\ncategorical_column   = dataset.nunique()[dataset.nunique() < 6].keys().tolist()\ncategorical_column   = [x for x in categorical_column if x not in target_column]\nnumerical_column   = [x for x in dataset.columns if x not in categorical_column + target_column]","4e8bbae3":"print(\"\\tCategorical Featuers\")\nprint(categorical_column)\nprint(\"\\n**********************************************\")\nprint(\"\\tNumerical Featuers\")\nprint(numerical_column)","cd69b7ca":"def plot_pie(column) :\n    \n    trace1 = go.Pie(values  = churn[column].value_counts().values.tolist(),\n                    labels  = churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    domain  = dict(x = [0,.48]),\n                    name    = \"Churn Customers\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    hole    = .6\n                   )\n    \n    trace2 = go.Pie(values  = not_churn[column].value_counts().values.tolist(),\n                    labels  = not_churn[column].value_counts().keys().tolist(),\n                    hoverinfo = \"label+percent+name\",\n                    marker  = dict(line = dict(width = 2,\n                                               color = \"rgb(243,243,243)\")\n                                  ),\n                    domain  = dict(x = [.52,1]),\n                    hole    = .6,\n                    name    = \"Non churn customers\" \n                   )\n\n\n    layout = go.Layout(dict(title = column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            annotations = [dict(text = \"churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .15, y = .5),\n                                           dict(text = \"Non churn customers\",\n                                                font = dict(size = 13),\n                                                showarrow = False,\n                                                x = .88,y = .5\n                                               )\n                                          ]\n                           )\n                      )\n    data = [trace1,trace2]\n    fig  = go.Figure(data = data,layout = layout)\n    py.iplot(fig)","d639ef34":"plot_pie(categorical_column[0])","83a4a341":"plot_pie(categorical_column[1])","c1726acf":"plot_pie(categorical_column[2])","b33fefcd":"plot_pie(categorical_column[3])","f41aa7a3":"plot_pie(categorical_column[4])","6a0f0b73":"def histogram(column) :\n    trace1 = go.Histogram(x  = churn[column],\n                          histnorm= \"percent\",\n                          name = \"Churn Customers\",\n                          marker = dict(line = dict(width = .5,\n                                                    color = \"black\"\n                                                    )\n                                        ),\n                         opacity = .9 \n                         ) \n    \n    trace2 = go.Histogram(x  = not_churn[column],\n                          histnorm = \"percent\",\n                          name = \"Non churn customers\",\n                          marker = dict(line = dict(width = .5,\n                                              color = \"black\"\n                                             )\n                                 ),\n                          opacity = .9\n                         )\n    \n    data = [trace1,trace2]\n    layout = go.Layout(dict(title =column + \" distribution in customer attrition \",\n                            plot_bgcolor  = \"rgb(243,243,243)\",\n                            paper_bgcolor = \"rgb(243,243,243)\",\n                            xaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = column,\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                            yaxis = dict(gridcolor = 'rgb(255, 255, 255)',\n                                             title = \"percent\",\n                                             zerolinewidth=1,\n                                             ticklen=5,\n                                             gridwidth=2\n                                            ),\n                           )\n                      )\n    fig  = go.Figure(data=data,layout=layout)\n    \n    py.iplot(fig)","d7f3c750":"histogram(numerical_column[0])","851f6276":"histogram(numerical_column[1])","23def92f":"histogram(numerical_column[2])","f7cf7cb4":"histogram(numerical_column[3])","c10a5269":"histogram(numerical_column[4])","5266ca38":"sns.pairplot(dataset, kind ='scatter', hue= \"Exited\")","bb52c903":"\"\"\"\nGender_division = dataset[\"Gender\"].value_counts()\nprint(\"Gender Division\\n\")\nprint(Gender_division)\nprint(\"*****************************************************\")\nHas_card = dataset[\"HasCrCard\"].value_counts()\nprint(\"Customer having the cards\\n\")\nprint(Has_card)\nprint(\"1 = Yes, 0 = No\")\nprint(\"*****************************************************\")\nnum_prod = dataset[\"NumOfProducts\"].value_counts()\nprint(num_prod)\nprint(\"*****************************************************\")\ncountry = dataset[\"Geography\"].value_counts()\nprint(country)\nprint(\"*****************************************************\")\ntenure = dataset[\"Tenure\"].value_counts()\nprint(tenure)\nprint(\"*****************************************************\")\nactive_member = dataset[\"IsActiveMember\"].value_counts()\nprint(active_member)\nprint(\"1 = Active, 0 = Not Active\")\nprint(\"*****************************************************\")\ncust_status = dataset[\"Exited\"].value_counts()\nprint(cust_status)\nprint(\"1 = Customer Left, 0 = Not Left\")\n\"\"\"","e566fbc4":"\"\"\"\n#Gender_division = Gender_division.to_frame()\n#Gender_division.insert(0, column=\"Gender_Type\" , value = (\"Male\",\"Female\"))\n#Gender_division\n\nHas_card = Has_card.to_frame()\nHas_card.insert(0, column =\"Taken_Card\", value = (\"Yes\",\"No\"))\n\ncountry = country.to_frame()\ncountry.insert(0, column=\"Country_Name\", value= (\"France\", \"Germany\", \"Spain\"))\n\"\"\"","c629bacd":"\"\"\"\nlabels = [\"France\", \"Germany\",\"Spain\"]\nsize = country.iloc[:,1]\nexplode = (0.1,0.1,0.1)\ncolors = [\"c\",\"r\",\"g\"]\n\nfig1, ax1 = plt.subplots()\nax1.pie(size, explode= explode, labels= labels, colors=colors,\n       autopct = \"%1.1f%%\", shadow = True, startangle = 90)\nax1.axis = (\"equal\")\nplt.tight_layout()\nplt.show()\n\"\"\"","b753e984":"\"\"\"\nlabels = [\"Yes\", \"No\"]\nsize = Has_card.iloc[:,1]\nexplode = (0.1,0)\ncolors = [\"#ff9999\",\"#99ff99\"]\n\nfig1, ax1 = plt.subplots()\nax1.pie(size, explode= explode, labels= labels, colors=colors,\n       autopct = \"%1.1f%%\", shadow = True, startangle = 90)\nax1.axis = (\"equal\")\nplt.tight_layout()\nplt.show()\n\"\"\"","ae0bebf9":"\"\"\"\nlabels = [\"Male\", \"Female\"]\nsize = Gender_division.iloc[:,1]\nexplode = (0.1,0)\ncolors = [\"#ff9999\",\"#99ff99\"]\n\nfig1, ax1 = plt.subplots()\nax1.pie(size, explode= explode, labels= labels, colors=colors,\n       autopct = \"%1.1f%%\", shadow = True, startangle = 90)\nax1.axis = (\"equal\")\nplt.tight_layout()\nplt.show()\n\"\"\"","ff2c882c":"\"\"\"\ndataset[\"Age\"].value_counts()\ndataset[\"EstimatedSalary\"].value_counts()\n\"\"\"","4c1baf34":"\"\"\"\ntenure = tenure.to_frame()\ntenure.insert(0, column=\"Tenure_Year\", value=(2,1,7,8,5,3,4,9,6,10,0))\n\"\"\"","054b8d5c":"\"\"\"\ntenure_plot = sns.barplot(tenure.iloc[:,0],tenure.iloc[:,1], data = tenure, palette=\"Paired\")\ntenure_plot.set(xlabel = \"Tenure Year of Customers\" , ylabel = \"Count\"  )\nplt.show()\n\"\"\"","68444754":"dataset[dataset.columns].corr()","40fb3abf":"sns.set()\nsns.set(font_scale = 1.25)\nsns.heatmap(dataset.corr(), annot = True,fmt = \".1f\")\nplt.show()","4f832283":"trace = []\ndef gen_boxplot(df):\n    for feature in df:\n        trace.append(\n            go.Box(\n                name = feature,\n                y = df[feature]\n            )\n        )\n\nnew_df = dataset[numerical_column[:1]]\ngen_boxplot(new_df)\ndata = trace\npy.iplot(data)","ef07d06d":"trace = []\ndef gen_boxplot(df):\n    for feature in df:\n        trace.append(\n            go.Box(\n                name = feature,\n                y = df[feature]\n            )\n        )\nnew_df = dataset[numerical_column[1:3]]\ngen_boxplot(new_df)\ndata = trace\npy.iplot(data)","42438216":"trace = []\ndef gen_boxplot(df):\n    for feature in df:\n        trace.append(\n            go.Box(\n                name = feature,\n                y = df[feature]\n            )\n        )\nnew_df = dataset[numerical_column[3:]]\ngen_boxplot(new_df)\ndata = trace\npy.iplot(data)","a097b3b0":"ageNew = []\nfor val in dataset.Age:\n    if val <= 85:\n        ageNew.append(val)\n    else:\n        ageNew.append(dataset.Age.median())\n        \ndataset.Age = ageNew","d543e08c":"dataset1 = dataset","ad65dfca":"list_cat = ['Geography', 'Gender']\ndataset1 = pd.get_dummies(dataset1, columns = list_cat, prefix = list_cat)","77156790":"from sklearn.ensemble import RandomForestClassifier\nimport numpy as np","c6c31872":"X1 = dataset1.drop('Exited', axis=1)\ny1 = dataset1.Exited\n\nfeatures_label = X1.columns\n\nforest = RandomForestClassifier (n_estimators = 10000, random_state = 0, n_jobs = -1)\nforest.fit(X1, y1)\n\nimportances = forest.feature_importances_\n\nindices = np.argsort(importances)[::-1]\n\nfor i in range(X1.shape[1]):\n    print (\"%2d) %-*s %f\" % (i + 1, 30, features_label[i], importances[indices[i]]))","6025be15":"plt.title('Feature Importances')\nplt.bar(range(X1.shape[1]), importances[indices], color = \"red\", align = \"center\")\nplt.xticks(range(X1.shape[1]), features_label, rotation = 90)\nplt.show()","914e423a":"<h3><b>:::::The snapshot of the imported data:::::<\/b><\/h3><br>\nAs the dataset variable of DATA_FRAME type so we can use the head() function to show the top 5 rows\/tuples of the whole dataset.","b7a84576":"<h3><b>:::::The function is called to visualize the numerical feature (Balance):::::<\/b><\/h3><br>\n<ol>\n    <li>The mean of the churn customers balance came 107.5k - 112.5k. <\/li>\n    <li>The mean of the Non churn customers balance came 112.5k - 117.5k. <\/li>\n<\/ol>\nBalance value in $ (dollars).","ff26ed2d":"<h3><b>::::: Importing dataset:::::<\/b><\/h3><br>\nThe data is imported using the pandas (alias name pd) pre-defined function read_csv() as our data file format is csv (comma-seprated values) in the dataset variable.","cec6caeb":"<h3><b>:::::Dropping the unsignificant featuers:::::<\/b><\/h3><br>\nThe function dataset_name.drop([\"LIST_OF_FEATUERS\"], axis = 0\/1) will drop the columns (when axis=1) and rows (when axis=0).","1d24a0b9":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","2f652a3c":"<h3><b>:::::The function is called to visualize the numerical feature (Age):::::<\/b><\/h3><br>\n<ol>\n    <li>The mean of the churn customers age is 46. <\/li>\n    <li>The mean of the Non churn customers age is 35. <\/li>\n<\/ol>","0a978508":"<h1><center> BANK CUSTOMER CHURN PREDICTION <\/center><\/h1><br>\n<b>Customer churn <\/b> can be defined as the customer terminates any relationship with a company that provides services either online or offline. Churn prediction can be referred to as the prediction of customers who are likely to cancel a subscription, product or service. ","fe2c4993":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function using the plotly library will generate the pie charts for the categorical featuers in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","a5d3a7e5":"<h3><b>:::::The Data in the form of the Descriptive Statistics:::::<\/b><\/h3><br>\nThe descriptive statistics provide us a information of numerical featuers in the term of the Mean, Standard Deviation and 5 elements of the box plot (Min, Max, Q1, Q2, Q3).","74f9ae80":"<h3><b>:::::The function to visualize the box plot for the outlier detection for the Age and Tenure features:::::<\/b><\/h3><br>","86249b6c":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","ee92f539":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","6927cfc1":"<h3><b>:::::The dimension of the dataframe in the matrix format (rows,columns):::::<\/b><\/h3>","34e418c5":"<h3><b>:::::Visualizing the Importance of the featuers on the basis of the Gini Index of the dataset:::::<\/b><\/h3><br>\n<b>CreditScore<\/b> feature comes at the top while <b>Gender<\/b> features showed lowest importance.","2c9986d6":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","daf70c70":"<h3><b>:::::The feature division on the basis of the unqiues:::::<\/b><\/h3><br>\nThe fetuers will be divided on the basis of the number of the uniques (uniques less than 6) into categorical featuers and remaining the numerical featuers.","63da6dec":"<h3><b>:::::The conversion of the categorical features into numerical using the One-Hot coding Technique.:::::<\/b><\/h3><br>\nThe conversion of the categorical featuers into numerical featuers using the one-hot encoding technique in which each unique value in the feature will be converted into a seperate column.","6bead2fe":"<h3><b>:::::The function is called to visualize the numerical feature (Tenure):::::<\/b><\/h3><br>","13fc184f":"<h3><b>:::::The function is called to visualize the numerical feature (Estimated Salary):::::<\/b><\/h3><br>","f36f24c8":"<h3><b>:::::The user-defined function to visualize the categorical features:::::<\/b><\/h3><br>\nThe customized pie function will generate the pie charts for the categorical functions in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","4f60c062":"<h3><b>:::::Importing following libraries:::::<\/b><\/h3>\n<ol>\n    <li><b>Pandas::<\/b> For the data manipulation and analysis.<\/li>\n    <li><b>Matplotlib::<\/b> For the data visualization.<\/li>\n    <li><b>Seaborn::<\/b> For the data visualization built on the top of the matplotlib library.<\/li>\n    <li><b>Keras::<\/b> For building the neural network built on the Tensorflow backend.<\/li>\n    <li><b>Plotly::<\/b> For the data visualization but creates more creative plots and provides a lot of custom ability.<\/li>\n    <li><b>Warning::<\/b> For dealing with the warnings coming while execution of the lines of code.<\/li>\n<\/ol>","31e2e751":"<h3><b>:::::To check the missing values:::::<\/b><\/h3><br>\nThe function isna() will check the missing values column wise (default axis = 0 (column-wise)) and sum() will do the submission at the end.\n\n<h4><b>:::::Our Analysis on the missing values:::::<\/b><\/h4><br>\nThe data contains the 0 missing values.","2bb579b1":"<h3><b>:::::The function to to remove outlier values from  Age Feature:::::<\/b><\/h3><br>\nThe function will remove the outliers value from the dataset and add the median values instead of the outlier's value.","36a65c8a":"<h3><b>:::::To check the uniques terms in the each features:::::<\/b><\/h3><br>\nThe function nunique() will check the unique values column wise (default axis = 0 (column-wise)).","0894da52":"<h3><b>:::::The featuers and Class_Label of the data:::::<\/b><\/h3><br>\n<ol>\n    <li><b>RowNumber:<\/b> The index number of the row.<\/li>\n    <li><b>CusomerId:<\/b> The customer ID. <\/li>\n    <li><b>Surname:<\/b> The last name of the customer.<\/li>\n    <li><b>CreditScore:<\/b> The credit score given by the bank.<\/li>\n    <li><b>Geography:<\/b> Country that customer belongs.\\begin{equation}\nGeography \\: \\: \\epsilon \\: \\:  R^{\\{France,Germany,Spain\\}}\n\\end{equation}<\/li>\n    <li><b>Gender:<\/b> The gender of the customer. \\begin{equation}\nGender \\: \\: \\epsilon \\: \\:  R^{\\{Male\\:,\\:Female\\}}\n\\end{equation}<\/li>\n    <li><b>Age:<\/b>The age of the customer.<\/li>\n    <li><b>Tenure:<\/b>Number of years customer is with the bank.<\/li>\n    <li><b>Balance:<\/b>The current balance of the account.<\/li>\n    <li><b>NumOfProducts:<\/b>The number of the products taken by the customer.\\begin{equation}\nNumOfProducts \\: \\: \\epsilon \\: \\:  R^{\\{1\\:,\\:2\\:,\\:3\\:,\\:4\\:\\}}\n\\end{equation}<\/li>\n    <li><b>HasCrCard:<\/b> Is customer owing a credit card or not. \\begin{equation}\nHasCrCard \\: \\: \\epsilon \\: \\:  R^{\\{\\:0\\: = \\:No\\:,\\: 1\\: =\\: Yes\\:\\}}\n\\end{equation}<\/li>\n    <li><b>IsActiveMember:<\/b>Is customer is active or not.\\begin{equation}\nIsActiveMember \\: \\: \\epsilon \\: \\:  R^{\\{\\:0\\: = \\:No\\:,\\: 1\\: =\\: Yes\\:\\}}\n\\end{equation}<\/li>\n    <li><b>EstimatedSalary:<\/b>The annual salary of the customers.<\/li>\n    <li><b>Exited:<\/b>The <b>CLASS LABEL<\/b> whether customer still with bank or not.\\begin{equation}\nExited \\: \\: \\epsilon \\: \\:  R^{\\{\\:0\\: = \\:No\\:,\\: 1\\: =\\: Yes\\:\\}}\n\\end{equation}<\/li>\n<\/ol>","169caf32":"<h3><b>:::::The user-defined function to visualize the numerical features in the histogram plots:::::<\/b><\/h3><br>\nThe customized histogram function using the plotly library will generate the histogram charts for the numerical featuers in the 2-dimensional plane and grouped by the Exited (CLASS LABEL).","7d81f3a0":"<h3><b>:::::The function is called to visualize the numerical feature (Credit Score):::::<\/b><\/h3><br>\n<ol>\n    <li>The mean of the churn customers credit score is 625-629. <\/li>\n    <li>The mean of the Non churn customers credit score is 680-684. <\/li>\n<\/ol>","5aa57571":"<h3><b>:::::The feature Selection:::::<\/b><\/h3><br>\nThe feature selection using the Random Forest Classifier algorithm by computing the Gini Scores.","8e32c2d5":"<h3><b>:::::The correlation table for the dataset:::::<\/b><\/h3><br>\nA correlation coefficient is a way to put a value to the relationship. Correlation coefficients have a value of between -1 and 1. A \u201c0\u201d means there is no relationship between the variables at all, while -1 or 1 means that there is a perfect negative or positive correlation (negative or positive correlation here refers to the type of graph the relationship will produce).","4e6b27b4":"<h3><b>:::::Data Division on the basis of class label:::::<\/b><\/h3><br>","56391911":"<h3><b>:::::The function to visualize the box plot for the outlier detection for the CreditScore features:::::<\/b><\/h3><br>","f1f45dc6":"<h3><b>:::::The categorical and numerical featuers:::::<\/b><\/h3><br>\n\nThe <b>categorical featuers<\/b> are:\n<ol>\n    <li>Geography <b>(Geography)<\/b><\/li>\n    <li>Gender <b>(Gender)<\/b><\/li>\n    <li>Number of Products <b>(NumOfProducts)<\/b><\/li>\n    <li>Customer having the credit card or not <b>(HasCrCard)<\/b><\/li>\n    <li>Customer is active with bank or not <b>(IsActiveMember)<\/b><\/li>\n<\/ol>\n\nThe <b>numerical featuers<\/b> are:\n<ol>\n    <li>The credit score of the customer <b>(CreditScore)<\/b><\/li>\n    <li>The age of the customer <b>(Age)<\/b><\/li>\n    <li>The tenure of the customer with the bank <b>(Tenure)<\/b><\/li>\n    <li>The balance of the customer's account <b>(Balance)<\/b><\/li>\n    <li>The estimated salary of the customer <b>(EstimatedSalary)<\/b><\/li>\n<\/ol>\n    ","542abc03":"<h3><b>:::::The visualization (Heat Map) of the correlation table for the dataset:::::<\/b><\/h3><br>","afdc6dba":"<h3><b>:::::The visualization of the dataset on the pair-plot:::::<\/b><\/h3><br>\n A pairs plot allows us to see both distribution of single variables and relationships between two variables. Pair plots are a great method to identify trends for follow-up analysis.","989eb1b0":"<h3><b>:::::The function to visualize the box plot for the outlier detection for the Balance and EstimatedSalary features:::::<\/b><\/h3><br>"}}