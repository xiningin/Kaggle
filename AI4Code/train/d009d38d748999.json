{"cell_type":{"55cdc9bd":"code","2780886f":"code","67d28f3a":"code","d6a0d9d5":"code","7703b51e":"code","fc8d4a2c":"code","75bc419f":"code","2b0b535e":"code","46a28d48":"code","2a72b65e":"code","4fb9bf42":"code","b6ab3ee1":"markdown","5046f4f0":"markdown","4a437775":"markdown"},"source":{"55cdc9bd":"import pandas as pd\nimport numpy as np\n\ntrain = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/test.csv')\n\n# Append \".jpg\" to make things easier later\ntrain['image_id'] = train['image_id'] + '.jpg'\ntest['image_id'] = test['image_id'] + '.jpg'","2780886f":"from matplotlib import pyplot as plt\nfrom matplotlib import image as mpimg\n\nIMG_PATH = '\/kaggle\/input\/plant-pathology-2020-fgvc7\/images\/'\n\nfor i in range(5):\n    plt.imshow(mpimg.imread(IMG_PATH + train.iloc[i,:]['image_id']))\n    if train.iloc[i,:]['healthy'] == 1:\n        plt.title('healthy')\n    elif train.iloc[i,:]['multiple_diseases'] == 1:\n        plt.title('multiple_diseases')\n    elif train.iloc[i,:]['rust'] == 1:\n        plt.title('rust')\n    else:\n        plt.title('scab')\n    plt.show()\n","67d28f3a":"!pip install tensorflow-addons","d6a0d9d5":"!pip install efficientnet","7703b51e":"from sklearn.model_selection import train_test_split\n\n# Training-validation split\ntraining, validation = train_test_split(train, \n                                        test_size = 0.2,\n                                        random_state = 42)","fc8d4a2c":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nSIZE = 224\nBATCH = 32\nTARGETS = ['healthy','multiple_diseases','rust','scab']\n\n# image augmentations\nimage_gen = ImageDataGenerator(rescale=1.\/255,\n                                rotation_range=20,\n                                width_shift_range=0.2,\n                                height_shift_range=0.2,\n                                zoom_range=0.2,\n                                brightness_range=[0.5, 1.5],\n                                horizontal_flip=True,\n                                vertical_flip=True)\n\n# flow_from_dataframe generators\ntrain_generator = image_gen\\\n    .flow_from_dataframe(train,\n                        directory=IMG_PATH,\n                        target_size=(SIZE, SIZE),\n                        x_col=\"image_id\",\n                        y_col=TARGETS,\n                        class_mode='raw',\n                        shuffle=False,\n                        batch_size=BATCH)\n\nvalidation_generator = image_gen\\\n    .flow_from_dataframe(validation,\n                        directory=IMG_PATH,\n                        target_size=(SIZE, SIZE),\n                        x_col=\"image_id\",\n                        y_col=TARGETS,\n                        class_mode='raw',\n                        shuffle=False,\n                        batch_size=BATCH)\n\ntest_generator = image_gen\\\n    .flow_from_dataframe(test,\n                        directory=IMG_PATH,\n                        target_size=(SIZE, SIZE),\n                        x_col=\"image_id\",\n                        y_col=None,\n                        class_mode=None,\n                        shuffle=False,\n                        batch_size=BATCH)","75bc419f":"import efficientnet.keras as efn \nimport tensorflow_addons as tfa\nfrom tensorflow.keras.callbacks import Callback\nfrom keras.models import Model\nfrom keras.layers import Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ReduceLROnPlateau, ModelCheckpoint\nfrom keras.optimizers import Adadelta\n\n# Callbacks\n## Keep the best model\nmc = ModelCheckpoint('model.hdf5', save_best_only=True, verbose=0, monitor='val_loss', mode='min')\n\n## Reduce learning rate if it gets stuck in a plateau\nrlr = ReduceLROnPlateau(monitor='val_loss', factor=0.3, patience=3, min_lr=0.000001, verbose=1)\n\n# Model\n## Define the base model with EfficientNet weights\nmodel = efn.EfficientNetB4(weights = 'imagenet', \n                           include_top = False, \n                           input_shape = (SIZE, SIZE, 3))\n\n## Output layer\nx = model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dense(64, activation=\"relu\")(x)\npredictions = Dense(4, activation=\"softmax\")(x)\n\n## Compile and run\nmodel = Model(inputs=model.input, outputs=predictions)\n\nmodel.compile(optimizer='adam',\n              loss=tfa.losses.SigmoidFocalCrossEntropy(), \n              metrics=['accuracy'])\n\nmodel_history = model.fit(train_generator,\n                            validation_data=validation_generator,\n                            steps_per_epoch=train_generator.n\/BATCH,\n                            validation_steps=validation_generator.n\/BATCH,\n                            epochs=7,\n                            verbose=1,\n                            callbacks = [rlr, mc])","2b0b535e":"# Load best model\nmodel.load_weights(\"model.hdf5\")","46a28d48":"# Plot training\/test\nacc = model_history.history['accuracy']\nval_acc = model_history.history['val_accuracy']\nloss = model_history.history['loss']\nval_loss = model_history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()","2a72b65e":"# Make predictions\npreds = model.predict(test_generator, steps=test_generator.n\/BATCH)","4fb9bf42":"# Make submission\nsample_sub = pd.read_csv('\/kaggle\/input\/plant-pathology-2020-fgvc7\/sample_submission.csv')\n\nsubmission = pd.DataFrame({'image_id': sample_sub['image_id'],\n                           'healthy': preds[:,0],\n                           'multiple_diseases': preds[:,1],\n                           'rust': preds[:,2],\n                           'scab': preds[:,3]\n                         })\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","b6ab3ee1":"# Make predictions","5046f4f0":"# EfficientNet model\n\nNow we'll train a model using EfficientNet transfer learning.","4a437775":"# Prepare submission"}}