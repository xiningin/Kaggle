{"cell_type":{"a17d8878":"code","aa116b23":"code","badd19de":"code","b1211301":"code","5c67a5de":"code","ba18de03":"code","be182ab6":"code","518e078e":"code","88a885e9":"code","73f9d9d8":"code","c5d8a755":"code","fcc5464b":"code","a2c398ce":"code","873686ee":"code","b327653c":"code","1a0469f5":"code","3fea80d1":"code","b4e5e53c":"code","2ae8c19e":"code","5aa526fe":"code","466b283b":"code","87bcbe0c":"code","2a556dbe":"markdown","1be7a44a":"markdown","03dfe10d":"markdown","381a9b21":"markdown","14cc6dd7":"markdown","b30031fe":"markdown","d14a480a":"markdown","3c085b6f":"markdown","ed3754e6":"markdown","ad4a2d63":"markdown","5c20c7e8":"markdown","18fc6f31":"markdown","7bf682c7":"markdown","1055f454":"markdown","3dc972d3":"markdown","081ca4a1":"markdown","7cb3f203":"markdown","f743b888":"markdown","ecc34a60":"markdown","5e1c5dcc":"markdown"},"source":{"a17d8878":"import math\nimport pandas_datareader as web\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\nfrom keras.utils import plot_model\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","aa116b23":"df = web.DataReader('NCR', data_source='yahoo', start='2015-01-01', end='2020-7-15')  \ndf","badd19de":"df.shape","b1211301":"plt.figure(figsize=(16,8))\nplt.title('Adjusted Close Price History')\nplt.plot(df['Adj Close'])\nplt.xlabel('Date',fontsize=18)\nplt.ylabel('Adjusted Close Price USD ($)',fontsize=18)\nplt.show()","5c67a5de":"data = df.filter(['Adj Close'])\ndataset = data.values\ntraining_data_len = math.ceil( len(dataset) *.8)\ntraining_data_len","ba18de03":"scaler = MinMaxScaler(feature_range=(0, 1)) \nscaled_data = scaler.fit_transform(dataset)","be182ab6":"train_data = scaled_data[0:training_data_len  , : ]\nx_train = []\ny_train = []\nfor i in range(60,len(train_data)):\n    x_train.append(train_data[i-60:i,0])\n    y_train.append(train_data[i,0])","518e078e":"x_train, y_train = np.array(x_train), np.array(y_train)","88a885e9":"x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\nx_train.shape","73f9d9d8":"test_data = scaled_data[training_data_len - 60: , : ]\nx_test = []\ny_test = dataset[training_data_len : , : ] \nfor i in range(60,len(test_data)):\n    x_test.append(test_data[i-60:i,0])","c5d8a755":"x_test= np.array(x_test)","fcc5464b":"x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))\nx_test.shape","a2c398ce":"model = Sequential()\nmodel.add(LSTM(units=256, return_sequences=True, input_shape=(x_train.shape[1],1)))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(units=256, return_sequences=False))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(units=32))\nmodel.add(Dense(units=1))\n\nmodel.summary()","873686ee":"plot_model(model)","b327653c":"model.compile('adam', 'mse')","1a0469f5":"hist = model.fit(x_train, y_train, batch_size=1, epochs=3)","3fea80d1":"predictions = model.predict(x_test) \npredictions = scaler.inverse_transform(predictions) #Undo scaling","b4e5e53c":"rmse=np.sqrt(np.mean(((predictions - y_test)**2)))\nrmse","2ae8c19e":"train = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n\nplt.figure(figsize=(16,8))\nplt.title('Valid VS Prediction')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Adjusted Close Price USD ($)', fontsize=18)\nplt.plot(valid['Adj Close'], color='C1')\nplt.plot(valid['Predictions'], color='C2')\nplt.legend(['Valid', 'Predictions'], loc='lower right')\nplt.show()\n\nplt.figure(figsize=(16,8))\nplt.title('Model of the Overall Data')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Adjusted Close Price USD ($)', fontsize=18)\nplt.plot(train['Adj Close'])\nplt.plot(valid[['Adj Close', 'Predictions']])\nplt.legend(['Train', 'Valid', 'Predictions'], loc='lower right')\nplt.show()","5aa526fe":"valid","466b283b":"#Get the quote\nNCR_quote = web.DataReader('NCR', data_source='yahoo', start='2015-01-01', end='2020-7-15')\n\n#Create a new dataframe\nnew_df = NCR_quote.filter(['Adj Close'])\n\n#Get the last 60 day closing price \nlast_60_days = new_df[-60:].values\n\n#Scale the data to be values between 0 and 1\nlast_60_days_scaled = scaler.transform(last_60_days)\n\n#Create an empty list\nX_test = []\n\n#Append the past 60 days\nX_test.append(last_60_days_scaled)\n\n#Convert the X_test data set to a numpy array\nX_test = np.array(X_test)\n\n#Reshape the data\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n\n#Get the predicted scaled price\npred_price = model.predict(X_test)\n                           \n#undo the scaling \npred_price = scaler.inverse_transform(pred_price)\nprint(pred_price)","87bcbe0c":"#Get the quote\nNCR_quote2 = web.DataReader('NCR', data_source='yahoo', start='2020-7-16', end='2020-7-16')\nprint(NCR_quote2['Adj Close'])","2a556dbe":"Compile the model","1be7a44a":"Scale the all of the data to be values between 0 and 1","03dfe10d":"Create a graph to visualize the data. Visualize the adjusted closing price history.","381a9b21":"Show the valid and predicted prices.","14cc6dd7":"Reshape the training data into the shape accepted by the LSTM","b30031fe":"Convert test data to a numpy array","d14a480a":"This program uses an artificial recurrent neural network called Long Short Term Memory (LSTM) to predict the closing stock price of NCR Corporation (NYSE: NCR) using the past 60 day stock price.","3c085b6f":"Getting the models predicted price values","ed3754e6":"Plot and visualize the data.","ad4a2d63":"Create a new dataframe with only the 'Adj Close' column. Converting the dataframe to a numpy array. Compute the number of rows to train the model on. (training data set to contain about 80% of the data)","5c20c7e8":"Train the model","18fc6f31":"I want to test the model some more and get the predicted adjusted closing price value of NCR for July 16, 2020 (7\/16\/2020)","7bf682c7":"Build the LSTM network model","1055f454":"Convert x_train and y_train to numpy arrays","3dc972d3":"Create the scaled training data set. Split the data into x_train and y_train data sets. ","081ca4a1":"Create the x_test and y_test data sets","7cb3f203":"Get the stock quote and show the data.","f743b888":"Import the libraries.","ecc34a60":"Calculate\/Get the value of RMSE","5e1c5dcc":"Reshape the testing data into the shape accepted by the LSTM"}}