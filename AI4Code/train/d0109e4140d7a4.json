{"cell_type":{"956bdd73":"code","eba85bc1":"code","8c09af08":"code","9546f708":"code","8447d6f9":"code","7b290c55":"code","0d0969b7":"code","aad45e09":"code","36e25c30":"code","7f11d6e3":"code","51057fc5":"code","d7c34272":"code","a3b7929d":"code","1dc34e38":"code","01a90261":"code","5452c2cd":"code","1fbaf43a":"code","341bd1d0":"code","a2161fb6":"code","c4f50ea3":"markdown","d5603a49":"markdown","31e91781":"markdown","6e0a4dbd":"markdown","07e2c1ee":"markdown","343449f6":"markdown","b0786f63":"markdown","bbcd135e":"markdown","74ce300e":"markdown","d2ffa6cf":"markdown","2953b6a5":"markdown","58d4378c":"markdown","c92c6a51":"markdown","56fa64dd":"markdown","2b3930f8":"markdown","8d39e46f":"markdown","0bb16723":"markdown","d5280752":"markdown","ef5a9ccd":"markdown","fea2df3c":"markdown","1ce20a35":"markdown"},"source":{"956bdd73":"import tensorflow as tf\nfrom tensorflow.keras import datasets,layers,models\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Conv2D,Dropout,Flatten,MaxPooling2D","eba85bc1":"(x_train,y_train),(x_test,y_test)=tf.keras.datasets.cifar10.load_data()","8c09af08":"x_train=x_train.astype('float32')\nx_test=x_test.astype('float32')","9546f708":"x_train\/=255\nx_test\/=255\nprint('x_train shape:',x_train.shape)\nprint('Number of images in x_train',x_train.shape[0])\nprint('Number of images in x_test',x_test.shape[0])","8447d6f9":"input_shape=(32,32,3)","7b290c55":"model=Sequential()\nmodel.add(Conv2D(32 ,kernel_size =( 3, 3) ,input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=tf.nn.softmax))","0d0969b7":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nhistory=model.fit(x=x_train,y=y_train,epochs=12,validation_split=0.3)","aad45e09":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","36e25c30":"image_index = 20\nprint(y_train[image_index])\nplt.imshow(x_train[image_index])\nx_train.shape","7f11d6e3":"from matplotlib import pyplot\nfrom keras.datasets import cifar10","51057fc5":"(trainX,trainY),(testX,testY) = cifar10.load_data()","d7c34272":"print('Train: X=',trainX.shape,'Y=',trainY.shape)\nprint('Test: X=',testX.shape,'Y=',testY.shape)","a3b7929d":"import  PIL \nfrom PIL import  ImageEnhance , ImageOps  \nfrom tensorflow.keras.preprocessing.image import img_to_array","1dc34e38":"model.evaluate(x_test,y_test)","01a90261":"for i in range(36):\n  pyplot.subplot(6,6,i+1)\n  pyplot.imshow(testX[i])","5452c2cd":"image_index=6","1fbaf43a":"import numpy as np \nlabels = '''airplane automobile bird cat deer dog frog horseship truck'''.split()\nplt.imshow(testX[image_index])\nn = np.array(testX[image_index])\nprint(n.size)\np = n.reshape(1, 32, 32, 3)\npred = labels[model.predict(p).argmax()]\n\nprint(\"The predicted image is {}\".format(pred))","341bd1d0":"pic = PIL.Image.open('..\/input\/car-picture\/airplane.jpg')\nplt.imshow(pic)","a2161fb6":"pic1=ImageOps.grayscale(pic)\nplt.imshow(pic1,cmap='Accent')\n\n\n\np1=pic.resize((32,32))\np1 = np.array(p1)\np1 = p1.reshape((1,32,32,3))\n\n\n\npred = labels[model.predict(p1).argmax()]\n\nprint(\"The predicted image is {}\".format(pred))","c4f50ea3":"*Model Evaluation*","d5603a49":"*Visualizing the Testing Data*","31e91781":"*Training Sample Visualisation*","6e0a4dbd":"*summarize loaded data*","07e2c1ee":"\nConvolution Neural Network Layers: Input Layer, Feature Learning, Classification, Output Layer","343449f6":"**CNN Model for Cifar Dataset**\n\n---\n\n","b0786f63":"* Feature Learning : Convolution + Relu , Pooling , Convolution + Relu , Pooling","bbcd135e":"*load dataset*","74ce300e":"*Importing Libraries*","d2ffa6cf":"*Prediction*","2953b6a5":"*Split Train and Test Data*","58d4378c":"*Upload an Image*","c92c6a51":"*User Input of Index*","56fa64dd":"* Classification Layers : Flatten , Fully connected , Softmax","2b3930f8":"Refer GitHub Link for User Input : https:\/\/github.com\/Indhu-Sree-S\/Cifar_CNN_Model","8d39e46f":"enter 6","0bb16723":"* Compile","d5280752":"*Model Accuracy*","ef5a9ccd":"*Constructing a Model*","fea2df3c":"*Predection for the given index*","1ce20a35":"***User Input***"}}