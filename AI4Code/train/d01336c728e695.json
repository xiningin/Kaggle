{"cell_type":{"fe730244":"code","f18a7638":"code","8a67dd0f":"code","49bb8832":"code","7056a73b":"code","3c06a7ad":"code","1fbb16bb":"code","e64450db":"code","c21a8cf7":"code","b56a6d40":"code","58a430aa":"code","8a0f4e7a":"code","6b47926b":"code","39d19b31":"code","1084a45f":"code","604f08b8":"markdown","256dffdb":"markdown"},"source":{"fe730244":"#Importing the important libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","f18a7638":"#Importing the datasets\n\ndistrict_data = pd.read_csv(\"\/kaggle\/input\/covid19-corona-virus-india-dataset\/district_level_latest.csv\")\nstate_data = pd.read_csv(\"\/kaggle\/input\/covid19-corona-virus-india-dataset\/state_level_latest.csv\")\ncountry_data = pd.read_csv(\"\/kaggle\/input\/covid19-corona-virus-india-dataset\/nation_level_daily.csv\")\npatient_data = pd.read_csv(\"\/kaggle\/input\/covid19-corona-virus-india-dataset\/patients_data.csv\")\ntests_state_data = pd.read_csv(\"\/kaggle\/input\/covid19-corona-virus-india-dataset\/tests_state_wise.csv\")","8a67dd0f":"#Droping the unnecessary columns and checking for null values\n\ndistrict_data = district_data.drop(['District_Notes','Last_Updated'],axis=1)\ndistrict_data.info()","49bb8832":"#Plotting the important features across the states\n\nstate_data = state_data.drop(0) # Drop the column of Totals\n\n# Plot the Confirmed, Recovered, Active and Deaths on the same plot using matplotlib\nplt.figure(figsize=(12,10))\nx = state_data['State_code']\ny = state_data['Confirmed']\nplt.plot(x,y,marker='o',label=\"Confirmed\")\ny = state_data['Recovered']\nplt.plot(x,y,marker='o',label=\"Recovered\")\ny = state_data['Active']\nplt.plot(x,y,marker='o',label=\"Active\")\ny = state_data['Deaths']\nplt.plot(x,y,marker='o',label=\"Deaths\")\nplt.legend();\nplt.savefig('PIC_1')","7056a73b":"#Now, selecting the data for top 20 states with respect to 'Confirmed' cases\n\nstate_top20 = state_data.nlargest(20,'Confirmed')\nstate_top20","3c06a7ad":"#visualizing the data of the top 20 states\n\n# Position of bars on x-axis\nind = np.arange(20)\n\n# Width of a bar \nwidth = 0.4\n\nplt.figure(figsize=(15,12))\nx = state_top20['State_code']\ny = state_top20['Confirmed']\nplt.bar(ind+width\/2,y,align='edge',width=width,label=\"Confirmed\")\ny = state_top20['Recovered']\nplt.bar(ind+width,y,align='edge',width=width,label=\"Recovered\")\ny = state_top20['Active']\nplt.bar(ind+3*width\/2,y,align='edge',width=width,label=\"Active\")\ny = state_top20['Deaths']\nplt.bar(ind+2*width,y,align='edge',width=width,label=\"Deaths\")\n\nplt.xticks(ind + 3*width\/2, x)\nplt.legend();\nplt.savefig('PIC_2')","1fbb16bb":"#Similarly selecting data for top 10 districts from India with respect to 'Confirmed' cases\n\ndistrict_top10 = district_data.nlargest(10,'Confirmed')\ndistrict_top10","e64450db":"#visualizing the data of the top 10 districts\n\nind = np.arange(10)    # Position of bars on x-axis\n\nwidth = 0.4   # Width of a bar \n\nplt.figure(figsize=(15,12))\nx = district_top10['District']\ny = district_top10['Confirmed']\nplt.bar(ind+width\/2,y,align='edge',width=width,label=\"Confirmed\")\ny = district_top10['Recovered']\nplt.bar(ind+width,y,align='edge',width=width,label=\"Recovered\")\ny = district_top10['Active']\nplt.bar(ind+3*width\/2,y,align='edge',width=width,label=\"Active\")\ny = district_top10['Deceased']\nplt.bar(ind+2*width,y,align='edge',width=width,label=\"Deseased\")\n\nplt.xticks(ind + 3*width\/2, x)\nplt.legend()\nplt.savefig('PIC_3')","c21a8cf7":"tests = tests_state_data.loc[tests_state_data['Updated On'] == '06\/08\/2020']\ntests = tests[['State','Total Tested','Positive']]\ntests = tests.dropna()\ntests.info()","b56a6d40":"#interactive map to see the relationship of number of tests with positive (Confirmed) cases\nimport plotly.express as px\n\nfig = px.scatter(tests, x=\"Total Tested\", y=\"Positive\", text=\"State\", log_x=True, \n                 log_y=True, size_max=100, color=\"Positive\")\nfig.update_traces(textposition='top center')\nfig.update_layout(title_text='Life Expectency', title_x=0.5)\nfig.show()","58a430aa":"import geopandas as gpd\n\nfp = r'\/kaggle\/input\/indiageofiles\/india-polygon.shp'\nmap_df = gpd.read_file(fp)\nmap_df.rename(columns={'st_nm': 'State'},inplace=True)\nmap_df.head()","8a0f4e7a":"#merging the state data with the geo data\n\ndata_merge = map_df.merge(state_data, on = 'State', how = 'left')\ndata_merge.head()","6b47926b":"fig, ax = plt.subplots(1, figsize=(8, 8))\nax.axis('off')\nax.set_title('Statewise Confirmed Cases', fontdict={'fontsize': '25', 'fontweight' : '10'})\n\n# plot the figure\ndata_merge.plot(column='Confirmed',cmap='YlOrRd', linewidth=0.8, ax=ax, \n                edgecolor='0', legend=True,markersize=[39.739192, -104.990337]);","39d19b31":"fig, ax = plt.subplots(1, figsize=(8, 8))\nax.axis('off')\nax.set_title('Statewise Recovered Cases', fontdict={'fontsize': '25', 'fontweight' : '10'})\ndata_merge.plot(column='Recovered',cmap='Greens', linewidth=0.8, ax=ax, edgecolor='0', \n                legend=True,markersize=[39.739192, -104.990337])","1084a45f":"fig, ax = plt.subplots(1, figsize=(8, 8))\nax.axis('off')\nax.set_title('Statewise Deaths', fontdict={'fontsize': '25', 'fontweight' : '10'})\ndata_merge.plot(column='Deaths',cmap='Blues', linewidth=0.8, ax=ax, edgecolor='0', \n                legend=True,markersize=[39.739192, -104.990337])","604f08b8":"# Exploratory Data Analysis of Covid_19_India Dataset","256dffdb":"# Plotting Covid-19 data on India Map using geopandas:"}}