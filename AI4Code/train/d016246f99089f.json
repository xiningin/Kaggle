{"cell_type":{"2107ef2d":"code","01d83a81":"code","f271bd61":"code","d3986fc7":"code","e5dfb084":"code","44ab01a4":"code","0462083d":"code","7a3207c2":"code","bc803551":"code","551478f3":"code","f164d9e8":"code","eaabf337":"code","0cd7b905":"code","fe6a9192":"code","6ca50c18":"code","44deb01b":"code","a5b54553":"code","f55ce0be":"code","f8421ec9":"code","77b95060":"code","0bb9bfcb":"code","1fe28494":"code","4fe46d46":"code","c38bee29":"code","7be6f8e5":"code","ef747dba":"code","6af6814b":"code","0043d5de":"code","732714f2":"code","0a280e1d":"code","9b58ebce":"code","9f252a3d":"code","4a872591":"code","e63fb6fd":"code","9d6ce1fb":"code","8319e731":"code","6320d16a":"code","1a856b5c":"code","6499bcb7":"code","390d97d2":"code","c27db968":"code","deb6d01b":"code","dd9a376c":"code","3f9acea2":"code","9853b942":"code","29950bad":"code","e39b4efd":"code","6b50f298":"code","b784253f":"code","c00dac0d":"code","dd098597":"code","0aec86d3":"code","8c9fda02":"code","d215b802":"code","98e38305":"code","930ead08":"code","3d8b4587":"code","f2da8fb2":"code","dce34851":"code","b1c95a33":"code","20ee1365":"code","b9cdca08":"code","9f0f53f3":"code","1893f51a":"code","7aa3db94":"code","587c98e0":"code","db114d18":"code","dffad11d":"code","cf95289e":"code","e45ae078":"markdown","7a028bfc":"markdown","49eefb37":"markdown","9416aa13":"markdown","2a299de9":"markdown","8fdf3629":"markdown","9a2cab68":"markdown","40bafbc5":"markdown","f36b678e":"markdown","d91e9def":"markdown","6c17dcdd":"markdown","f18cbf8e":"markdown","97a1fa26":"markdown","6384760b":"markdown","6bf80cc2":"markdown","bc8415c2":"markdown","065acd59":"markdown","534171bc":"markdown","bb1282df":"markdown","871c6383":"markdown","cb873e32":"markdown","2cb7626e":"markdown","0b302b44":"markdown","9882a2d9":"markdown","4ca50377":"markdown","96226d44":"markdown","8b8c2684":"markdown"},"source":{"2107ef2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats import norm\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","01d83a81":"cars = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/car data.csv\")\ncars.info()","f271bd61":"cars.head()","d3986fc7":"sns.distplot(cars.Selling_Price)","e5dfb084":"sns.distplot(np.log(cars.Selling_Price), fit=norm, kde=False)","44ab01a4":"sns.distplot(np.log1p(cars.Selling_Price), fit=norm, kde=False)","0462083d":"sns.distplot(np.sqrt(cars.Selling_Price), fit=norm, kde=False)","7a3207c2":"cars.Selling_Price = np.log(cars.Selling_Price)\ncars['Present_Price'] = np.log(cars['Present_Price'])","bc803551":"cars2 = pd.read_csv(\"..\/input\/vehicle-dataset-from-cardekho\/CAR DETAILS FROM CAR DEKHO.csv\")\ncars2.info()","551478f3":"cars2.head()","f164d9e8":"sns.distplot(cars2.selling_price)","eaabf337":"sns.distplot(np.log(cars2.selling_price), fit=norm, kde=False)","0cd7b905":"cars2.selling_price = np.log(cars2.selling_price)","fe6a9192":"cars['Car_Name'].nunique()","6ca50c18":"cars2['name'].nunique()","44deb01b":"cars['Car_Name'].value_counts()[:35]","a5b54553":"cars2['name'].value_counts()[:35]","f55ce0be":"fig = plt.figure(figsize=(10, 20))\n\nplt.title('Selling price of cars by car name')\n\nprice_order = cars.groupby('Car_Name')['Selling_Price'].mean().sort_values(ascending=False).index.values\n\nsns.boxplot(data=cars, x='Selling_Price', y='Car_Name', \n            order=price_order)","f8421ec9":"fig = plt.figure(figsize=(10, 20))\n\nplt.title('Selling price of cars by car name')\n\nprice_order = cars2.groupby('name')['selling_price'].mean().sort_values(ascending=False).index.values[:75]\n\nsns.boxplot(data=cars2, x='selling_price', y='name', \n            order=price_order)","77b95060":"mean_price = cars.groupby('Car_Name')['Selling_Price'].mean().reset_index()\nmean_price.sort_values(by='Selling_Price', ascending=False).head(5)","0bb9bfcb":"def plot_price(feature, title=''):\n    fig = plt.figure(figsize=(8, 5))\n    \n    plt.title(title)\n\n    price_order = cars.groupby(feature)['Selling_Price'].mean().sort_values(ascending=False).index.values\n\n    sns.boxplot(data=cars, y='Selling_Price', x=feature, \n                order=price_order)\n    \n\ndef plot_price2(feature, title='', width=8, height=5):\n    fig = plt.figure(figsize=(width, height))\n    \n    plt.title(title)\n\n    price_order = cars2.groupby(feature)['selling_price'].mean().sort_values(ascending=False).index.values\n\n    sns.boxplot(data=cars2, y='selling_price', x=feature, \n                order=price_order)\n\nplot_price('Fuel_Type', 'Selling price of cars by fuel type')","1fe28494":"mean_price = cars.groupby('Fuel_Type')['Selling_Price'].mean().reset_index()\nmean_price.sort_values(by='Selling_Price', ascending=False)","4fe46d46":"plot_price2('fuel', 'Selling price of cars by fuel type')","c38bee29":"mean_price = cars2.groupby('fuel')['selling_price'].mean().reset_index()\nmean_price.sort_values(by='selling_price', ascending=False)","7be6f8e5":"plot_price('Seller_Type', 'Selling price of cars by seller type')","ef747dba":"mean_price = cars.groupby('Seller_Type')['Selling_Price'].mean().reset_index()\nmean_price.sort_values(by='Selling_Price', ascending=False)","6af6814b":"plot_price2('seller_type', 'Selling price of cars by seller type')","0043d5de":"mean_price = cars2.groupby('seller_type')['selling_price'].mean().reset_index()\nmean_price.sort_values(by='selling_price', ascending=False)","732714f2":"plot_price('Year', 'Selling price of cars by year')","0a280e1d":"fig = plt.figure(figsize=(10, 5))\nsns.distplot(cars[cars['Year']==2015].Selling_Price)","9b58ebce":"plot_price2('year', 'Selling price of cars by year', width=15)","9f252a3d":"plot_price('Owner', 'Selling price of cars by owner')","4a872591":"plot_price2('owner', 'Selling price of cars by owner')","e63fb6fd":"plot_price('Transmission', 'Selling price of cars by transmission')","9d6ce1fb":"plot_price2('transmission', 'Selling price of cars by transmission')","8319e731":"cars2.info()","6320d16a":"sns.lmplot(x='Kms_Driven', y='Selling_Price', data=cars)\nax = plt.gca()\nax.set_title('Selling price of cars by kms driven')","1a856b5c":"sns.distplot(cars['Kms_Driven'])","6499bcb7":"sns.distplot(np.sqrt(cars['Kms_Driven']), fit=norm, kde=False)","390d97d2":"sns.distplot(np.log(cars['Kms_Driven']), fit=norm, kde=False)","c27db968":"cars['Kms_Driven'] = np.log(cars['Kms_Driven'])\n\nsns.lmplot(x='Kms_Driven', y='Selling_Price', data=cars)\nax = plt.gca()\nax.set_title('Selling price of cars by kms driven')","deb6d01b":"sns.lmplot(x='km_driven', y='selling_price', data=cars2)\nax = plt.gca()\nax.set_title('Selling price of cars by kms driven')","dd9a376c":"sns.distplot(cars2['km_driven'])","3f9acea2":"cars2['km_driven'] = np.log(cars2['km_driven'])\nsns.distplot(cars2['km_driven'])","9853b942":"sns.lmplot(x='km_driven', y='selling_price', data=cars2)\nax = plt.gca()\nax.set_title('Selling price of cars by kms driven')","29950bad":"sns.lmplot(x='Present_Price', y='Selling_Price', data=cars)\nax = plt.gca()\nax.set_title('Selling price of cars by present price')","e39b4efd":"cars = pd.concat([cars, pd.get_dummies(cars['Year'],prefix='Year')], axis=1)\ncars.drop(['Year'],axis=1,inplace=True)","6b50f298":"cars2 = pd.concat([cars2, pd.get_dummies(cars2['year'],prefix='Year')], axis=1)\ncars2.drop(['year'],axis=1,inplace=True)","b784253f":"new_fuel = pd.get_dummies(cars['Fuel_Type'],prefix='Fuel')\nnew_seller = pd.get_dummies(cars['Seller_Type'],prefix='Seller')\nnew_transmission = pd.get_dummies(cars['Transmission'],prefix='Transmission')\nnew_owner = pd.get_dummies(cars['Owner'],prefix='Owner')\n\nframes = [cars, new_fuel, new_seller, new_transmission, new_owner]\ntemp = pd.concat(frames, axis=1)\ntemp.drop(['Fuel_Type','Seller_Type','Transmission','Owner'],axis=1,inplace=True)\ncars = temp\ncars.head()","c00dac0d":"new_fuel = pd.get_dummies(cars2['fuel'],prefix='Fuel')\nnew_seller = pd.get_dummies(cars2['seller_type'],prefix='Seller')\nnew_transmission = pd.get_dummies(cars2['transmission'],prefix='Transmission')\n# new_owner = pd.get_dummies(cars2['owner'],prefix='Owner')\n\n# frames = [cars2, new_fuel, new_seller, new_transmission, new_owner]\nframes = [cars2, new_fuel, new_seller, new_transmission]\ntemp = pd.concat(frames, axis=1)\ntemp.drop(['fuel','seller_type','transmission'],axis=1,inplace=True)\ncars2 = temp\ncars2.head()","dd098597":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nle.fit(cars['Car_Name'])\ncars['Car_Name'] = le.fit_transform(cars['Car_Name'])\ncars.head()","0aec86d3":"cars.info()","8c9fda02":"le2 = LabelEncoder()\nle2.fit(cars2['name'])\ncars2['name'] = le.fit_transform(cars2['name'])\nle2.fit(cars2['owner'])\ncars2['owner'] = le.fit_transform(cars2['owner'])\ncars2.head()","d215b802":"cars2.info()","98e38305":"from sklearn.model_selection import train_test_split, cross_val_score, ShuffleSplit\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n\nimport xgboost as xgb","930ead08":"y = cars.Selling_Price\nX = cars.drop(columns='Selling_Price', axis=1)\nX.head(10)","3d8b4587":"pd.DataFrame(y).head(10)","f2da8fb2":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=1)","dce34851":"def final_predictions(model, name):\n    new_model = model.fit(X_train, y_train)\n    pred = np.exp(model.predict(X_valid))\n    print(\"============= %s and Shuffle Split =============\" %name)\n    print(\"Accuracy: %f\" %(r2_score(np.exp(y_valid), pred)))\n    print(\"MSE: %f\" %(mean_squared_error(np.exp(y_valid), pred)))\n    print(\"MAE: %f\" %(mean_absolute_error(np.exp(y_valid), pred)))\n    \n    new_model = model.fit(X, y)\n    cv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)\n    cvs = cross_val_score(model, X, y, cv=cv)\n    print('Shuffle and cross validate: %s \\nAverage: %.2f' %(cvs, cvs.mean()))","b1c95a33":"lr_model = LinearRegression()\nfinal_predictions(lr_model, 'Linear Regression')","20ee1365":"rf_model = RandomForestRegressor(random_state=0)\nfinal_predictions(rf_model, 'Random Forest Regressor')","b9cdca08":"dt_model = DecisionTreeRegressor(random_state=0)\nfinal_predictions(dt_model, 'Decision Tree Regressor')","9f0f53f3":"xgb_model = xgb.XGBRegressor()\nfinal_predictions(xgb_model, 'XGBoost Regressor')","1893f51a":"y = cars2.selling_price\nX = cars2.drop(columns='selling_price', axis=1)\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=1)\nX.head(10)","7aa3db94":"pd.DataFrame(y).head(10)","587c98e0":"lr_model = LinearRegression()\nfinal_predictions(lr_model, 'Linear Regression')","db114d18":"rf_model = RandomForestRegressor(random_state=0)\nfinal_predictions(rf_model, 'Random Forest Regressor')","dffad11d":"dt_model = DecisionTreeRegressor(random_state=0)\nfinal_predictions(dt_model, 'Decision Tree Regressor')","cf95289e":"xgb_model = xgb.XGBRegressor()\nfinal_predictions(xgb_model, 'XGBoost Regressor')","e45ae078":"For an individual year, the sale price distribution looks like this:","7a028bfc":"There's no present price in the cars2 data set.","49eefb37":"## Predictions for the first data set","9416aa13":"### Fuel Type","2a299de9":"# Step 2: Exploratory Data Analysis (EDA)\n\n## Categorical features\n\nLooking at each categorical feature first and how the average selling price is affected starting with car name:\n\n### Car Name","8fdf3629":"### Owner\n\nCars with 0 previous owners (brand new cars) tend to sell for more than cars with one previous owner. There is only one car in the data set with more than 2 owners, therefore, it is not good to compare with brand new cars and cars with one previous owner. This variable can then be one-hot encoded rather than label encoded in case it is not ordinal (ranked).","9a2cab68":"The natural log transform looks more normally distributed than the others. The present price, then, also needs to be transformed.","40bafbc5":"### Transmission\n\nCars with automatic transmission have a higher average selling price than cars with manual transmission.","f36b678e":"There doesn't seem to be a linear relationship between kms driven and selling price. But, we can look at the distribution and see if the feature can be improved.","d91e9def":"A different way of one-hot encoding:","6c17dcdd":"# Step 1: Read file","f18cbf8e":"## Numerical Features\n\n### Year\n\n'Year' looks like a categorical variable since there are multiple different selling prices for each year. It is not a continuous numerical variable. The selling price of the cars based on year below are ordered by the average selling price:","97a1fa26":"Since it's right-skewed, a transform will normalize the distribution:","6384760b":"### Kilometres driven","6bf80cc2":"### Present Price\n\n","bc8415c2":"**Random Forest and Cross Validation**","065acd59":"## Predictions for the second data set\n\nThis data set does not include the 'Present_Price' feature. Therefore, the models are less accurate. With the 'Present_Price' LinearRegression was the best model, without it XGBoost is the best model.","534171bc":"Let's look at the distribution of selling price, which is what we are trying to predict (y-variable or the response variable):","bb1282df":"### Label Encoding\n\nAs stated previously, the 'Car_Name' will be label encoded since machine learning models only use numerical features in training and predicting.","871c6383":"**Decision Tree and Cross Validation**","cb873e32":"**Train, test, split**","2cb7626e":"**XGBoost Regressor**","0b302b44":"# Step 4: Training and Predicting\n\nIn this step, different models will be used to train on the features and then tested on how accurately they can predict the sale price of the car.","9882a2d9":"### Seller Type","4ca50377":"**Linear Regression and Cross Validation**\n\nSince the selling price was transformed using np.log, np.exp is used to transform it back to its original values and then compared with the predictions:","96226d44":"# Step 3: Cleaning up the data\n\nIn this step, choose either label encoding or one-hot encoding for the categorical variables. I decided to one-hot encode all the categorical variables except for 'Car_Name'. The 'Year' will also be one-hot encoded since there are difference prices for each year. There are no missing values.\n\n### One-hot Encoding\n\nConcatenate the one-hot encoded columns, drop the columns that were one-hot encoded. Version 1 of one-hot encoding:","8b8c2684":"The natural log or square root transform on kms driven gives a better linear relationship on selling price."}}