{"cell_type":{"afdbf1df":"code","9e324ded":"code","2f933302":"code","0a74076a":"code","a703fb53":"code","d9977c8c":"code","c97d8447":"code","78dfdd6b":"code","e56030ee":"code","e90772e1":"code","320f2714":"code","53bbc1c5":"code","d444fcd2":"code","30eadace":"code","d9d94109":"code","5afdfe8a":"code","d5058bea":"code","140278e5":"code","035f1bac":"code","f273d14c":"code","4b198ee4":"code","023f964e":"code","dbca4b1b":"code","234e99dc":"code","a9ff890c":"code","2da76b9c":"code","e5faee97":"code","30c343ef":"code","31060fac":"code","0c35da2a":"code","f4967190":"code","001bae42":"code","d4824e9f":"code","6fb32fbb":"code","4305a517":"code","6762e56b":"code","94ac6ac1":"code","719b6553":"markdown","dcaf53a8":"markdown","16721eb9":"markdown","2b44bc07":"markdown","4a80aed0":"markdown","1f7acaff":"markdown","f461fb7f":"markdown","02b2e67b":"markdown"},"source":{"afdbf1df":"# Importing necessary libraries\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.io as pio\nimport plotly.express as px\npio.templates.default=\"plotly_dark\"\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_style(\"darkgrid\")\nplt.style.use(\"fivethirtyeight\")\nfrom pandas_profiling import ProfileReport\nfrom sklearn.model_selection import GridSearchCV,train_test_split,StratifiedKFold,cross_val_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder,LabelEncoder\nfrom sklearn.metrics import accuracy_score,roc_auc_score,f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier,StackingClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.naive_bayes import MultinomialNB\nfrom statsmodels.graphics.gofplots import qqplot\nfrom category_encoders.target_encoder import TargetEncoder\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.preprocessing import RobustScaler,label_binarize\nfrom sklearn.model_selection import cross_val_score,StratifiedKFold,GridSearchCV\nfrom sklearn.metrics import roc_curve\nfrom scipy.stats import mode\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.metrics import roc_curve,precision_recall_curve,confusion_matrix,classification_report\nfrom pickle import dump","9e324ded":"data=pd.read_csv(\"..\/input\/bondora-peer-to-peer-lending-loan-data\/LoanData_Bondora.csv\")\nprint(data.shape)\ndata.head()","2f933302":"drop_cols=['ReportAsOfEOD',\n 'LoanId',\n 'LoanNumber',\n 'ListedOnUTC','DateOfBirth',\n 'BiddingStartedOn','UserName', 'LanguageCode','LoanApplicationStartedDate','FirstPaymentDate','IncomeFromPrincipalEmployer', 'IncomeFromPension',\n       'IncomeFromFamilyAllowance', 'IncomeFromSocialWelfare',\n       'IncomeFromLeavePay', 'IncomeFromChildSupport', 'IncomeOther','LoanApplicationStartedDate','ApplicationSignedHour',\n       'ApplicationSignedWeekday','ActiveScheduleFirstPaymentReached','ModelVersion','WorseLateCategory','PlannedPrincipalTillDate',\"NextPaymentNr\",'ProbabilityOfDefault',\n          'ExpectedLoss', 'LossGivenDefault', 'ExpectedReturn']\nprint(len(drop_cols))\ndata.drop(drop_cols,axis=1,inplace=True)","0a74076a":"nan=data.isnull().sum()[data.isnull().sum()>0]\nprint(nan\/len(data))\nnan=nan\/len(data)\ndrop_cols=list(nan[nan>0.5].index)\nprint(len(drop_cols))","a703fb53":"data.drop(drop_cols,axis=1,inplace=True)\nprint(data.shape)","d9977c8c":"# Dropping Date-Time Columns \ndate_cols=[\"LoanDate\",\"MaturityDate_Original\",\"MaturityDate_Last\",'LastPaymentOn']\ndata.drop(date_cols,axis=1,inplace=True)","c97d8447":"data.loc[data['Education']==1,\"Education\"]=\"Primary\"\ndata.loc[data['Education']==2,\"Education\"]=\"Basic\"\ndata.loc[data['Education']==3,\"Education\"]=\"Vocational\"\ndata.loc[data['Education']==4,\"Education\"]=\"Secondary\"\ndata.loc[data['Education']==5,\"Education\"]=\"Higher\"\ndata.loc[data['Education'] == -1.0,\"Education\"] = 'Not_present'\ndata.loc[data['Education'] == 0.0,\"Education\"] = 'Not_present'","78dfdd6b":"data.loc[data['EmploymentStatus']==1,\"EmploymentStatus\"]=\"Un-Employed\"\ndata.loc[data['EmploymentStatus']==2,\"EmploymentStatus\"]=\"Partially-Employed\"\ndata.loc[data['EmploymentStatus']==3,\"EmploymentStatus\"]=\"Fully-Employed\"\ndata.loc[data['EmploymentStatus']==4,\"EmploymentStatus\"]=\"Self-Employed\"\ndata.loc[data['EmploymentStatus']==5,\"EmploymentStatus\"]=\"Entrepreneur\"\ndata.loc[data['EmploymentStatus']==6,\"EmploymentStatus\"]=\"Retiree\"\ndata.loc[data['EmploymentStatus']==-1,\"EmploymentStatus\"]=\"Unknown\"\ndata.loc[data['EmploymentStatus']==0,\"EmploymentStatus\"]=\"Unknown\"","e56030ee":"data.loc[data['Gender'] == 0.0,'Gender'] = 'Male'\ndata.loc[data['Gender'] == 1.0,'Gender']= 'Female'\ndata.loc[data['Gender'] == 2.0,'Gender'] = 'Unknown'","e90772e1":"data.loc[data['HomeOwnershipType']==0,\"HomeOwnershipType\"]=\"Homeless\"\ndata.loc[data['HomeOwnershipType']==1,\"HomeOwnershipType\"]=\"Owner\"\ndata.loc[data['HomeOwnershipType']==2,\"HomeOwnershipType\"]='Living_with_parents'\ndata.loc[data['HomeOwnershipType']==3,\"HomeOwnershipType\"]='Tenant_pre_furnished_property'\ndata.loc[data['HomeOwnershipType']==4,\"HomeOwnershipType\"]=\"Tenant_unfurnished_property\"\ndata.loc[data['HomeOwnershipType']==5,\"HomeOwnershipType\"]=\"Council_house\"\ndata.loc[data['HomeOwnershipType']==6,\"HomeOwnershipType\"]=\"Joint_tenant\"\ndata.loc[data['HomeOwnershipType']==7,\"HomeOwnershipType\"]=\"Joint_Ownership\"\ndata.loc[data['HomeOwnershipType']==8,\"HomeOwnershipType\"]=\"Mortgage\"\ndata.loc[data['HomeOwnershipType']==9,\"HomeOwnershipType\"]='Owner_with_encumbrance'\ndata.loc[data['HomeOwnershipType']==10,\"HomeOwnershipType\"]=\"Other\"\ndata.loc[data['HomeOwnershipType']==-1,\"HomeOwnershipType\"]=\"Unknown\"","320f2714":"data.loc[data['MaritalStatus']==-1,\"MaritalStatus\"]=\"Not_specified\"\ndata.loc[data['MaritalStatus']==0,\"MaritalStatus\"]=\"Not_specified\"\ndata.loc[data['MaritalStatus']==1,\"MaritalStatus\"]=\"Married\"\ndata.loc[data['MaritalStatus']==2,\"MaritalStatus\"]=\"Cohabitant\"\ndata.loc[data['MaritalStatus']==3,\"MaritalStatus\"]=\"Single\"\ndata.loc[data['MaritalStatus']==4,\"MaritalStatus\"]=\"Divorced\"\ndata.loc[data['MaritalStatus']==5,\"MaritalStatus\"]=\"Widow\"","53bbc1c5":"data.loc[data['OccupationArea'] == 1,'OccupationArea'] = 'Other'\ndata.loc[data['OccupationArea'] == 2,'OccupationArea'] = 'Mining'\ndata.loc[data['OccupationArea'] == 3,'OccupationArea'] = 'Processing'\ndata.loc[data['OccupationArea'] == 4,'OccupationArea'] = 'Energy'\ndata.loc[data['OccupationArea'] == 5,'OccupationArea'] = 'Utilities'\ndata.loc[data['OccupationArea'] == 6,'OccupationArea'] = 'Construction'\ndata.loc[data['OccupationArea'] == 7,'OccupationArea'] = 'Retail_and_wholesale'\ndata.loc[data['OccupationArea'] == 8,'OccupationArea'] = 'Transport_and_warehousing'\ndata.loc[data['OccupationArea'] == 9,'OccupationArea'] = 'Hospitality_and_catering'\ndata.loc[data['OccupationArea'] == 10,'OccupationArea'] = 'Info_and_telecom'\ndata.loc[data['OccupationArea'] == 11,'OccupationArea'] = 'Finance_and_insurance'\ndata.loc[data['OccupationArea'] == 12,'OccupationArea'] = 'Real_estate'\ndata.loc[data['OccupationArea'] == 13,'OccupationArea'] = 'Research'\ndata.loc[data['OccupationArea'] == 14,'OccupationArea'] = 'Administrative'\ndata.loc[data['OccupationArea'] == 15,'OccupationArea'] = 'Civil_service_and_military'\ndata.loc[data['OccupationArea'] == 16,'OccupationArea'] = 'Education'\ndata.loc[data['OccupationArea'] == 17,'OccupationArea'] = 'Healthcare_and_social_help'\ndata.loc[data['OccupationArea'] == 18,'OccupationArea'] = 'Art_and_entertainment'\ndata.loc[data['OccupationArea'] == 19,'OccupationArea'] = 'Agriculture_forestry_and_fishing'\ndata.loc[data['OccupationArea'] == -1.0,'OccupationArea'] = 'Not_specified'\ndata.loc[data['OccupationArea'] == 0.0,'OccupationArea'] = 'Not_specified'","d444fcd2":"data.loc[data['UseOfLoan'] == -1,'UseOfLoan'] = 'Not_set'\ndata.loc[data['UseOfLoan'] == 0,'UseOfLoan'] = 'Loan_consolidation'\ndata.loc[data['UseOfLoan'] == 1,'UseOfLoan'] = 'Real_estate'\ndata.loc[data['UseOfLoan'] == 2,'UseOfLoan'] = 'Home_improvement'\ndata.loc[data['UseOfLoan'] == 3,'UseOfLoan'] = 'Business'\ndata.loc[data['UseOfLoan'] == 4,'UseOfLoan'] = 'Education'\ndata.loc[data['UseOfLoan'] == 5,'UseOfLoan'] = 'Travel'\ndata.loc[data['UseOfLoan'] == 6,'UseOfLoan'] = 'Vehicle'\ndata.loc[data['UseOfLoan'] == 7,'UseOfLoan'] = 'Other'\ndata.loc[data['UseOfLoan'] == 8,'UseOfLoan'] = 'Health'\ndata.loc[data['UseOfLoan'] == 101,'UseOfLoan'] = 'Working_capital_financing'\ndata.loc[data['UseOfLoan'] == 102,'UseOfLoan'] = 'Purchase_of_machinery_equipment'\ndata.loc[data['UseOfLoan'] == 104,'UseOfLoan'] = 'Accounts_receivable_financing'\ndata.loc[data['UseOfLoan'] == 106,'UseOfLoan'] = 'Construction_finance'\ndata.loc[data['UseOfLoan'] == 107,'UseOfLoan'] = 'Acquisition_of_stocks'\ndata.loc[data['UseOfLoan'] == 108,'UseOfLoan'] = 'Acquisition_of_real_estate'\ndata.loc[data['UseOfLoan'] == 110,'UseOfLoan'] = 'Other_business'","30eadace":"data.loc[data['VerificationType'] == 0.0,'VerificationType'] = 'Not_set'\ndata.loc[data['VerificationType'] == 1.0,'VerificationType'] = 'Income_unverified'\ndata.loc[data['VerificationType'] == 2.0,'VerificationType'] = 'Income_unverified_crossref_phone'\ndata.loc[data['VerificationType'] == 3.0,'VerificationType'] = 'Income_verified'\ndata.loc[data['VerificationType'] == 4.0,'VerificationType'] = 'Income_expenses_verified'","d9d94109":"data.loc[data['NewCreditCustomer'] == False,'NewCreditCustomer'] = 'Existing_credit_customer'\ndata.loc[data['NewCreditCustomer'] == True,'NewCreditCustomer'] = 'New_credit_Customer'\n\ndata.loc[data['Restructured'] == False,'Restructured']='No'\ndata.loc[data['Restructured'] == True,'Restructured']='Yes'\n\ndata.loc[data['RecoveryStage']==1,'RecoveryStage']='Collection'\ndata.loc[data['RecoveryStage']==0,'RecoveryStage']='Recovery'","5afdfe8a":"numerical_cols=[col for col in data.columns if data[col].dtype!=object]\ncategorical_cols=[col for col in data.columns if data[col].dtype==object]\nprint(\"No of Numerical features =\",len(numerical_cols))\nprint(\"No of Categorical features =\",len(categorical_cols))","d5058bea":"def Numerical_Summary():\n    for col in numerical_cols:\n        print(col)\n        print(\"No of Missing Values =\",data[col].isnull().sum())\n        print(\"Skew =\",data[col].skew())\n        print(\"Histogram\")\n        fig=px.histogram(data_frame=data,x=col)\n        fig.show()\n        print(\"=\"*50)\n        \ndef Categorical_Summary():\n    for col in categorical_cols:\n        print(col)\n        print(\"No of Missin Values =\",data[col].isnull().sum())\n        print(data[col].value_counts())\n        print(\"=\"*50)\n        ","140278e5":"Numerical_Summary()","035f1bac":"data=data[data['Age']>10]\ndata=data[data['AppliedAmount']>0]\ndata=data[data['DebtToIncome']<100]\ndata=data[data['CreditScoreEeMini']!=0]\ndata=data[data['PrincipalBalance']>=0]","f273d14c":"Categorical_Summary()","4b198ee4":"plt.figure(figsize=(25,25))\nsns.heatmap(data[numerical_cols].corr(),annot=True,cmap='viridis')","023f964e":"print(\"No of Total Lender Error =\",len(data.loc[data['Amount']>data['AppliedAmount']]))\nprint(\"No of Lender Errors for which Ammount is  greather then Applied Ammount +1=\",len(data.loc[data['Amount']>data['AppliedAmount']+1] ))","dbca4b1b":"px.scatter_3d(data_frame=data,x=\"AppliedAmount\",y='Amount',z='IncomeTotal')","234e99dc":"pd.crosstab(data['Status'],data['UseOfLoan'])","a9ff890c":"pd.crosstab(data['Status'],data['EmploymentStatus'])","2da76b9c":"pd.crosstab(data['Status'],data['CreditScoreEsMicroL'])","e5faee97":"fig=go.Figure()\nfig.add_trace(go.Box(x=data['Status'],y=data['ExistingLiabilities']))","30c343ef":"data.drop(['StageActiveSince'],axis=1,inplace=True)\nprint(data.shape)","31060fac":"data.to_csv(\"Preprocessed_Bondora.csv\",index=False)","0c35da2a":"X_train,X_test,y_train,y_test=train_test_split(data.drop(\"Status\",axis=1),data['Status'],test_size=0.3,random_state=42,stratify=data['Status'])\nprint(\"Training Data Shape =\",X_train.shape)\nprint(\"Testing Data Shape =\",X_test.shape)","f4967190":"class Prepare_data():\n    def __init__(self,estimator,X,y,n_choice,param_grid,train=False,X_test=None):\n        self.estimator=estimator\n        self.X=X.copy()\n        self.y=y.copy()\n        self.n_choice=n_choice\n        self.param_grid=param_grid\n        if X_test is not None:\n            self.X_test=X_test.copy()\n        else:\n            self.X_test=None\n        self.estimator=estimator\n        if estimator=='RFC':\n            self.model=RandomForestClassifier()\n        elif estimator=='XGBC':\n            self.model=XGBClassifier(objective='multi:softprob',verbosity = 0,silent=True,eval_metric='mlogloss')\n        elif estimator=='SVC':\n            self.model=SVC()\n        else:\n            self.model=LogisticRegression()\n        self.X=self.data_imputation(self.X)\n        if self.X_test is not None:\n            self.X_test=self.data_imputation(self.X_test)\n        self.Data_Preparation(self.X,self.y)\n    def data_imputation(self,data):\n        missing_cols=[col for col in data.columns if data[col].isnull().sum()>0]\n        cat_cols=[col for col in missing_cols if data[col].dtype==object and col!=\"Status\"]\n        num_cols=[col for col in missing_cols if data[col].dtype!=object]\n        data[cat_cols]=data[cat_cols].fillna(\"missing\")\n        for col in num_cols:\n            data[col]=data[col].fillna(data[col].median())\n        return data\n    def Feature_Selection(self):\n        X=self.X.copy()\n        y=self.y.copy()\n        n_choice=self.n_choice\n        random_indices=np.random.choice(X.shape[0],20000)\n        X_new=X.iloc[random_indices,:]\n        X_new=X_new.reset_index(drop=True)\n        y_new=y[random_indices]\n        cat_cols=[col for col in self.X.columns if self.X[col].dtype==object]\n        num_cols=[col for col in self.X.columns if self.X[col].dtype!=object]\n        \n        targetencoder=TargetEncoder()\n        \n        \n    \n        X_new=X_new[num_cols].join(targetencoder.fit_transform(X_new[cat_cols],y_new))\n        \n        etc=ExtraTreesClassifier()\n        etc.fit(X_new,y_new)\n        feature_importances=pd.DataFrame(sorted(zip(etc.feature_importances_,X_new.columns),reverse=True),columns=['Imp','Col'])\n        fig=px.bar(feature_importances,x=\"Imp\",y=\"Col\",template=\"plotly_dark\")\n        fig.show()\n        return list(feature_importances.head(self.n_choice)['Col'])\n    def Data_Preparation(self,X,y):\n        cat_cols=[col for col in X.columns if X[col].dtype==object]\n        for col in cat_cols:\n            X[col]=X[col].astype(str)\n        ordinal_cols=[\"Rating\",'CreditScoreEsMicroL',\"Education\"]\n        ordinal_cols=[col for col in list(X.columns) if col in ordinal_cols]\n        nominal_cols=[col for col in cat_cols if col not in ordinal_cols]\n        for col in ordinal_cols:\n            lb=LabelEncoder()\n            X[col]=lb.fit_transform(X[col])\n            if self.X_test is not None:\n                self.X_test[col]=self.X_test[col].map(lambda s: '<unknown>' if s not in lb.classes_ else s)\n                lb.classes_ = np.append(lb.classes_, '<unknown>')\n                self.X_test[col]=lb.transform(self.X_test[col])\n        num_cols=[col for col in X.columns if X[col].dtype!=object]\n        transformer=ColumnTransformer([(\"CATEGORICAL\",OneHotEncoder(handle_unknown=\"ignore\"),nominal_cols),\n                                       (\"NUMERICAL\",RobustScaler(),num_cols)])\n        self.nominal_encoder=lb\n        self.lb=LabelEncoder()\n        self.y=self.lb.fit_transform(y)\n        self.preprocessor=transformer\n        \n    def Cross_Validation(self):\n        X=self.preprocessor.fit_transform(self.X)\n        y=self.y.copy()\n        \n        stratifiedkfold=StratifiedKFold(n_splits=5,shuffle=True,random_state=42)\n        scores=cross_val_score(self.model,X,y,cv=stratifiedkfold,scoring=\"roc_auc_ovr\")\n        print(\"Mean ROC AUC =\",scores.mean()\n             )\n        return scores\n    def GridSearch(self):\n        X=self.X.copy()\n        y=self.y.copy()\n        X=self.preprocessor.fit_transform(X)\n        grid=GridSearchCV(self.model,self.param_grid,scoring=\"roc_auc_ovr\")\n        grid.fit(X,y)\n        print(\"Best ROC AUC =\",grid.best_score_)\n        return grid.best_estimator_\n    def train(self):\n        X_train=self.X.copy()\n        X_test=self.X_test.copy()\n        y_train=self.y.copy()\n        test_predictions=pd.DataFrame(columns=['Fold_1','Fold_2','Fold_3','Fold_4','Fold_5'])\n        test_prob_predictions=np.zeros((self.X_test.shape[0],3))\n        kfold=StratifiedKFold(shuffle=True,random_state=42)\n        i=0\n        for train_idx,val_idx in kfold.split(X_train,y_train):\n            train_data=self.preprocessor.fit_transform(X_train.iloc[train_idx])\n            val_data=self.preprocessor.transform(X_train.iloc[val_idx])\n            test_data=self.preprocessor.transform(X_test)\n            if self.estimator=='RFC':\n                \n                model=RandomForestClassifier()\n            elif self.estimator=='XGBC':\n                \n                model=XGBClassifier(objective='multi:softprob')\n            elif self.estimator=='SVC':\n                \n                model=SVC()\n            else:\n            \n                model=LogisticRegression()\n            model.fit(train_data,self.y[train_idx])\n            val_predictions=model.predict(val_data)\n            print(f\"Validation F1 Micro Score for Fold{i+1} =\",f1_score(self.y[val_idx],val_predictions,average='micro'))\n            test_predictions[\"Fold_\"+str(i+1)]=model.predict(test_data)\n            prob=model.predict_proba(test_data)\n            test_prob_predictions=(test_prob_predictions+prob)\n            with open(f\"Model_fold{i+1}.pkl\",\"wb\") as f:\n                dump(model,f)\n            with open(f\"Preprocessing_Pipeline_fold{i+1}.pkl\",\"wb\") as p:\n                dump(self.preprocessor,p)\n            \n            \n            i+=1\n        test_prob_predictions=test_prob_predictions\/5\n        test_predictions=test_predictions.T\n        test_predictions=test_predictions.reset_index(drop=True)\n        test_predictions=test_predictions.apply(lambda x: mode(x)[0]).values\n        \n        \n        \n        \n        return test_predictions,test_prob_predictions,self.lb,self.nominal_encoder","001bae42":"model=Prepare_data(None,X_train,y_train,30,{})\ncols=model.Feature_Selection()","d4824e9f":"model=Prepare_data(\"XGBC\",X_train[cols],y_train,None,{},True,X_test[cols])\np,probs,lb,ne=model.train()","6fb32fbb":"f1_score(y_test,lb.inverse_transform(p.T),average=\"micro\")","4305a517":"roc_auc_score(y_test,probs,multi_class=\"ovr\")","6762e56b":"def plot_roc_curve(y_test,y_test_prob):\n    y=y_test.copy()\n    labelbinarizer=LabelBinarizer()\n    y_test=labelbinarizer.fit_transform(y_test)\n    fpr_0,tpr_0,thr_0=roc_curve(y_test[:,0],y_test_prob[:,0])\n    fpr_1,tpr_1,thr_1=roc_curve(y_test[:,1],y_test_prob[:,1])\n    fpr_2,tpr_2,thr_2=roc_curve(y_test[:,2],y_test_prob[:,2])\n    a,b,c=roc_curve(y_test[:,1],y_test_prob[:,1])\n    plt.plot(fpr_0,tpr_0,color=\"red\",label=\"Class_0\")\n    plt.plot(fpr_1,tpr_1,color='blue',label=\"Class_1\")\n    plt.plot(fpr_2,tpr_2,color=\"green\",label=\"Class_2\")\n    plt.plot([0,1],[0,1],color=\"black\")\n    plt.legend()\nplot_roc_curve(y_test,probs)","94ac6ac1":"sns.heatmap(confusion_matrix(y_test,lb.inverse_transform(p.T)),annot=True,cmap=\"viridis\")","719b6553":"# Preparing data for Modelling","dcaf53a8":"# Modelling","16721eb9":"# Observations from above plots:-\n* Bids Columns have alot of zero values with skewed right distributions\n* Age has some values less then 10 which is not possible.\n* AppliedAmount,Amount are discrete and not continous and have skew of 1.5 and 1.6 .\n* Interest has 0 NAN's is highly skewed and alot of values are greather then 100.\n* Monthly Payments has 6685 NANs and is highly skewed right with some 0 values.\n* Alot of records has 0 IncomeTotal and high skew.\n* Debt to Income ratio is expressed as percentage, 2 observations have value greather then 100 which is not possible and has 45 NAN.\n* PlannedInterestTillDate is right skewed with 3000+ NANs.\n* Principal Overdueby Schedule is skewed right with NANs\n* CreditScoreEMini has 1 zero value.\n* 5 rows have Principal Amount less then 0.\n* Monthly payments,debt to income,free cash,Plnned Interest till date,Principal Overdue by Schedule,Previous Repayments Before Loan, Not Scheduled Payments has missing values.","2b44bc07":"# Data Cleaning","4a80aed0":"# EDA","1f7acaff":"* Staus and UseofLoan are correlated\n* Employment-Status and Status are correlated\n* CreditScoreEsMicroL abd Status are correlated","f461fb7f":"# Observations\nCity,Education,Martial Status,CreditScore,EsMicroEl,Rating,HomeOwnershipType,Occupation Area,EmploymentDuration,Country, VerificationType have missing values.","02b2e67b":"# Observations\n* As Applied Ammount,Ammount increases monthlypayments,PrincipalBalance increase.\n* As Loan Duration increases No of Rescheduled Payments also increases.\n* Income increases Applied Ammount and Ammount increase and because of that Principal Balance increase e.g A->B,B->C therefore A->C\n* No of Previous Loans increase AmmountofPreviousLoan also increase.\n* As Unpaid Interest increases Principal that is overdue also increases.\n* So there is slight Multicollinearity."}}