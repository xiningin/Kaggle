{"cell_type":{"5f4c0128":"code","e8b93fee":"code","57eb001f":"code","a16a947f":"code","38a35adb":"code","462480a7":"code","0c2b9605":"code","95c25f42":"code","da2ba2bd":"code","c4eabeec":"code","6f8efbd3":"code","9938fee0":"code","531c905d":"code","a002f689":"code","c4b02b46":"code","a1209450":"code","9f8ad88a":"code","24432ca9":"code","d978a96f":"code","ef259b91":"code","da447aa1":"code","9c077d7c":"code","12db9ad5":"code","46743a4b":"code","f9bf354e":"code","a7c98a8c":"code","7b3e4300":"code","901a0855":"code","e587320d":"code","0096058b":"code","27bc1353":"code","75f821d5":"code","d59f920e":"markdown","ee02720c":"markdown","a7add998":"markdown","7e90e7f2":"markdown","07e7ff8b":"markdown","1d471ae0":"markdown","c0d6d157":"markdown","b28d1ccc":"markdown","732f391c":"markdown","9ae6ff56":"markdown","be83f1cb":"markdown","cb48223c":"markdown","dff31668":"markdown","2409a5da":"markdown","6fc3f47f":"markdown","22435a50":"markdown","7d72f6cc":"markdown","182a4c45":"markdown","68c85276":"markdown","e6ac9aa4":"markdown","c3d92d9f":"markdown"},"source":{"5f4c0128":"!pip install bubbly","e8b93fee":"# for basic operations\nimport numpy as np\nimport pandas as pd\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for interactive visualizations\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nfrom plotly import tools\nimport plotly.figure_factory as ff\n\nfrom bubbly.bubbly import bubbleplot\n\nimport plotly.tools as tls\nimport squarify\nfrom mpl_toolkits.basemap import Basemap\nfrom numpy import array\nfrom matplotlib import cm\n\n# for providing path\nimport os\nprint(os.listdir('..\/input\/'))","57eb001f":"data = pd.read_csv('..\/input\/who_suicide_statistics.csv')\n\ndata = data.sort_values(['year'], ascending = True)\n\nprint(data.shape)","a16a947f":"# let's check the total number of countries' data available for suicidal analysis\n\nprint(\"No. of Countries available for analysis :\", data['country'].nunique())\n","38a35adb":"# checking the head of the table\n\ndat = ff.create_table(data.head())\npy.iplot(dat)","462480a7":"# let's describe the data\n\ndat = ff.create_table(data.describe())\npy.iplot(dat)\n","0c2b9605":"# renaming the columns\n\ndata.rename({'sex' : 'gender', 'suicides_no' : 'suicides'}, inplace = True, axis = 1)\n\ndata.columns","95c25f42":"# checkinng the null values in the dataset\n\ndata.isnull().sum()","da2ba2bd":"# filling missing values\n\ndata['suicides'].fillna(0, inplace = True)\n# data['population'].mean()\ndata['population'].fillna(1664090, inplace = True)\n\n# checking if there is any null value left\ndata.isnull().sum().sum()\n\n# converting these attributes into integer format\ndata['suicides'] = data['suicides'].astype(int)\ndata['population'] = data['population'].astype(int)","c4eabeec":"import warnings\nwarnings.filterwarnings('ignore')\n\nfigure = bubbleplot(dataset = data, x_column = 'suicides', y_column ='population', \n    bubble_column = 'country',  color_column = 'country', \n    x_title = \"Number of Suicides\", y_title = \"Population\", title = 'Population vs Suicides',\n    x_logscale = False, scale_bubble = 3, height = 650)\n\npy.iplot(figure, config={'scrollzoom': True})","6f8efbd3":"# visualising the different countries distribution in the dataset\n\nplt.style.use('seaborn-dark')\nplt.rcParams['figure.figsize'] = (15, 9)\n\ncolor = plt.cm.winter(np.linspace(0, 10, 100))\nx = pd.DataFrame(data.groupby(['country'])['suicides'].sum().reset_index())\nx.sort_values(by = ['suicides'], ascending = False, inplace = True)\n\nsns.barplot(x['country'].head(10), y = x['suicides'].head(10), data = x, palette = 'winter')\nplt.title('Top 10 Countries in Suicides', fontsize = 20)\nplt.xlabel('Name of Country')\nplt.xticks(rotation = 90)\nplt.ylabel('Count')\nplt.show()","9938fee0":"# visualising the different year distribution in the dataset\n\nplt.style.use('seaborn-dark')\nplt.rcParams['figure.figsize'] = (18, 9)\n\nx = pd.DataFrame(data.groupby(['year'])['suicides'].sum().reset_index())\nx.sort_values(by = ['suicides'], ascending = False, inplace = True)\n\nsns.barplot(x['year'], y = x['suicides'], data = x, palette = 'cool')\nplt.title('Distribution of suicides from the year 1985 to 2016', fontsize = 20)\nplt.xlabel('year')\nplt.xticks(rotation = 90)\nplt.ylabel('count')\nplt.show()","531c905d":"\ncolor = plt.cm.Blues(np.linspace(0, 1, 2))\ndata['gender'].value_counts().plot.pie(colors = color, figsize = (10, 10), startangle = 75)\n\nplt.title('Gender', fontsize = 20)\nplt.axis('off')\nplt.show()","a002f689":"# visualising the different year distribution in the dataset\n\nplt.style.use('seaborn-dark')\nplt.rcParams['figure.figsize'] = (18, 9)\n\nx = pd.DataFrame(data.groupby(['gender'])['suicides'].sum().reset_index())\nx.sort_values(by = ['suicides'], ascending = False, inplace = True)\n\nsns.barplot(x['gender'], y = x['suicides'], data = x, palette = 'afmhot')\nplt.title('Distribution of suicides wrt Gender', fontsize = 20)\nplt.xlabel('year')\nplt.xticks(rotation = 90)\nplt.ylabel('count')\nplt.show()","c4b02b46":"\nsuicide = pd.DataFrame(data.groupby(['country','year'])['suicides'].sum().reset_index())\n\ncount_max_sui=pd.DataFrame(suicide.groupby('country')['suicides'].sum().reset_index())\n\ncount = [ dict(\n        type = 'choropleth',\n        locations = count_max_sui['country'],\n        locationmode='country names',\n        z = count_max_sui['suicides'],\n        text = count_max_sui['country'],\n        colorscale = 'Cividis',\n        autocolorscale = False,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(180,180,180)',\n                width = 0.5\n            ) ),\n)]\nlayout = dict(\n    title = 'Suicides happening across the Globe',\n    geo = dict(\n        showframe = True,\n        showcoastlines = True,\n        projection = dict(\n            type = 'orthographic'\n        )\n    )\n)\nfig = dict( data=count, layout=layout )\niplot(fig, validate=False, filename='d3-world-map')","a1209450":"# looking at the Suicides in USA.\n\ndata[data['country'] == 'United States of America'].sample(20)","9f8ad88a":"# replacing categorical values in the age column\n\ndata['age'] = data['age'].replace('5-14 years', 0)\ndata['age'] = data['age'].replace('15-24 years', 1)\ndata['age'] = data['age'].replace('25-34 years', 2)\ndata['age'] = data['age'].replace('35-54 years', 3)\ndata['age'] = data['age'].replace('55-74 years', 4)\ndata['age'] = data['age'].replace('75+ years', 5)\n\n#data['age'].value_counts()\n\n# suicides in different age groups\n\nx1 = data[data['age'] == 0]['suicides'].sum()\nx2 = data[data['age'] == 1]['suicides'].sum()\nx3 = data[data['age'] == 2]['suicides'].sum()\nx4 = data[data['age'] == 3]['suicides'].sum()\nx5 = data[data['age'] == 4]['suicides'].sum()\nx6 = data[data['age'] == 5]['suicides'].sum()\n\nx = pd.DataFrame([x1, x2, x3, x4, x5, x6])\nx.index = ['5-14', '15-24', '25-34', '35-54', '55-74', '75+']\nx.plot(kind = 'bar', color = 'grey')\n\nplt.title('suicides in different age groups')\nplt.xlabel('Age Group')\nplt.ylabel('count')\nplt.show()","24432ca9":"df = data.groupby(['country', 'year'])['suicides'].mean()\ndf = pd.DataFrame(df)\n\n# looking at the suicides trends for any 3 countries\nplt.rcParams['figure.figsize'] = (20, 30)\nplt.style.use('dark_background')\n\nplt.subplot(3, 1, 1)\ncolor = plt.cm.hot(np.linspace(0, 1, 40))\ndf['suicides']['United States of America'].plot.bar(color = color)\nplt.title('Suicides Trends in USA wrt Year', fontsize = 30)\n\nplt.subplot(3, 1, 2)\ncolor = plt.cm.spring(np.linspace(0, 1, 40))\ndf['suicides']['Russian Federation'].plot.bar(color = color)\nplt.title('Suicides Trends in Russian Federation wrt Year', fontsize = 30)\n\nplt.subplot(3, 1, 3)\ncolor = plt.cm.PuBu(np.linspace(0, 1, 40))\ndf['suicides']['Japan'].plot.bar(color = color)\nplt.title('Suicides Trends in Japan wrt Year', fontsize = 30)\n\nplt.show()","d978a96f":"df2 = data.groupby(['country', 'age'])['suicides'].mean()\ndf2 = pd.DataFrame(df2)\n\n# looking at the suicides trends for any 3 countries\nplt.rcParams['figure.figsize'] = (20, 30)\n\nplt.subplot(3, 1, 1)\ndf2['suicides']['United States of America'].plot.bar()\nplt.title('Suicides Trends in USA wrt Age Groups', fontsize = 30)\nplt.xticks(rotation = 0)\n\nplt.subplot(3, 1, 2)\ncolor = plt.cm.jet(np.linspace(0, 1, 6))\ndf2['suicides']['Russian Federation'].plot.bar(color = color)\nplt.title('Suicides Trends in Russian Federation wrt Age Groups', fontsize = 30)\nplt.xticks(rotation = 0)\n\nplt.subplot(3, 1, 3)\ncolor = plt.cm.Wistia(np.linspace(0, 1, 6))\ndf2['suicides']['Japan'].plot.bar(color = color)\nplt.title('Suicides Trends in Japan wrt Age Groups', fontsize = 30)\nplt.xticks(rotation = 0)\n\nplt.show()","ef259b91":"\nplt.rcParams['figure.figsize'] = (15, 7)\nplt.style.use('dark_background')\n\nsns.stripplot(data['year'], data['suicides'], palette = 'cool')\nplt.title('Year vs Suicides', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","da447aa1":"# age-group vs suicides\n\nplt.rcParams['figure.figsize'] = (15, 7)\n\n\nsns.stripplot(data['gender'], data['suicides'], palette = 'Wistia')\nplt.title('Age groups vs Suicides', fontsize = 20)\nplt.grid()\nplt.show()","9c077d7c":"# label encoding for gender\n\nfrom sklearn.preprocessing import LabelEncoder\n\n# creating an encoder\nle = LabelEncoder()\ndata['gender'] = le.fit_transform(data['gender'])\n\ndata['gender'].value_counts()","12db9ad5":"# deleting unnecassary column\n\ndata = data.drop(['country'], axis = 1)\n\ndata.columns","46743a4b":"#splitting the data into dependent and independent variables\n\nx = data.drop(['suicides'], axis = 1)\ny = data['suicides']\n\nprint(x.shape)\nprint(y.shape)","f9bf354e":"# splitting the dataset into training and testing sets\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 45)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","a7c98a8c":"# min max scaling\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# importing the min max scaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n# creating a scaler\nmm = MinMaxScaler()\n\n# scaling the independent variables\nx_train = mm.fit_transform(x_train)\nx_test = mm.transform(x_test)","7b3e4300":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n# creating the model\nmodel = LinearRegression()\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n","901a0855":"from sklearn.ensemble import RandomForestRegressor\n\n# creating the model\nmodel = RandomForestRegressor()\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n","e587320d":"from sklearn.tree import DecisionTreeRegressor\n\n# creating the model\nmodel = DecisionTreeRegressor()\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n","0096058b":"from sklearn.ensemble import AdaBoostRegressor\n\n# creating the model\nmodel = AdaBoostRegressor()\n\n# feeding the training data into the model\nmodel.fit(x_train, y_train)\n\n# predicting the test set results\ny_pred = model.predict(x_test)\n\n# calculating the mean squared error\nmse = np.mean((y_test - y_pred)**2)\nprint(\"MSE :\", mse)\n\n# calculating the root mean squared error\nrmse = np.sqrt(mse)\nprint(\"RMSE :\", rmse)\n\n#calculating the r2 score\nr2 = r2_score(y_test, y_pred)\nprint(\"r2_score :\", r2)\n","27bc1353":"r2_score = np.array([0.385, 0.851, 0.745, 0.535])\nlabels = np.array(['Linear Regression', 'Random Forest', 'Decision Tree', 'AdaBoost Tree'])\nindices = np.argsort(r2_score)\ncolor = plt.cm.rainbow(np.linspace(0, 1, 9))\n\nplt.style.use('seaborn-talk')\nplt.rcParams['figure.figsize'] = (18, 7)\nplt.bar(range(len(indices)), r2_score[indices], color = color)\nplt.xticks(range(len(indices)), labels[indices])\nplt.title('R2 Score', fontsize = 30)\nplt.grid()\nplt.tight_layout()\nplt.show()","75f821d5":"rmse = np.array([600, 295, 388, 521])\nlabels = np.array(['Linear Regression', 'Random Forest', 'Decision Tree', 'AdaBoost Tree'])\nindices = np.argsort(rmse)\ncolor = plt.cm.spring(np.linspace(0, 1, 9))\n\nplt.style.use('seaborn-talk')\nplt.rcParams['figure.figsize'] = (18, 7)\n\nplt.bar(range(len(indices)), rmse[indices], color = color)\nplt.xticks(range(len(indices)), labels[indices])\nplt.title('RMSE', fontsize = 30)\n\nplt.grid()\nplt.tight_layout()\nplt.show()","d59f920e":"### AdaBoostRegressor\u30e2\u30c7\u30eb","ee02720c":"## \u6bd4\u8f03\u7d50\u679c","a7add998":"## \u5e74\u3054\u3068\u306e\u81ea\u6bba\u50be\u5411\u306e\u767a\u898b","7e90e7f2":"<img src=\"https:\/\/www.thenewsminute.com\/sites\/default\/files\/styles\/news_detail\/public\/Jaseem_Rep_image_Hanging_Stool_Rope_Suicide_Death_750x500.jpg?itok=YulbRMPQ\" width=\"800px\">","07e7ff8b":"### \u6c7a\u5b9a\u6728","1d471ae0":"**\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30a4\u30f3\u30dd\u30fc\u30c8**","c0d6d157":"### \u7dda\u5f62\u56de\u5e30","b28d1ccc":"## \u5e74\u9f62\u5c64\u306b\u3088\u308b\u81ea\u6bba\u50be\u5411\u306e\u767a\u898b","732f391c":"\u3053\u306e\u8a18\u4e8b\u306f\u3001WHO Suicide Analysis\u3068\u3044\u3046\u8a18\u4e8b\u3092\u7ffb\u8a33\u3057\u3066\u3044\u307e\u3059\u3002 https:\/\/www.kaggle.com\/roshansharma\/who-suicide-analysis\u3000\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305froshan sharma\u3055\u3093\u306b\u6df1\u3044\u656c\u610f\u3092\u8868\u3057\u307e\u3059\u3002","9ae6ff56":"### \u80cc\u666f:\n\n\n* \u4e16\u754c\u4fdd\u5065\u6a5f\u95a2\uff08WHO\uff09\u306f\u3001\u6bce\u5e74\u7d04100\u4e07\u4eba\u304c\u81ea\u6bba\u3067\u6b7b\u4ea1\u3059\u308b\u3068\u63a8\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u300110\u4e07\u4eba\u3042\u305f\u308a16\u4eba\u306e\u6b7b\u4ea1\u7387\u3001\u307e\u305f\u306f40\u79d2\u3054\u3068\u306b1\u4eba\u306e\u6b7b\u4ea1\u3092\u610f\u5473\u3057\u307e\u3059\u3002 2020\u5e74\u307e\u3067\u306b\u3001\u6b7b\u4ea1\u7387\u306f20\u79d2\u3054\u3068\u306b1\u4eba\u306b\u5897\u52a0\u3059\u308b\u3068\u4e88\u6e2c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n### WHO\u306e\u3055\u3089\u306a\u308b\u5831\u544a\u306b\u3088\u308b\u3068\uff1a\n\n* \u904e\u53bb45\u5e74\u9593\u3067\u3001\u81ea\u6bba\u7387\u306f\u4e16\u754c\u4e2d\u306760\uff05\u5897\u52a0\u3057\u307e\u3057\u305f\u3002\u73fe\u5728\u3001\u81ea\u6bba\u306f15\u301c44\u6b73\uff08\u7537\u6027\u3068\u5973\u6027\uff09\u306e\u5c64\u306b\u3068\u3063\u3066\u3001\u4e3b\u8981\u306a3\u3064\u306e\u6b7b\u56e0\u306e\u3046\u3061\u306e1\u3064\u3067\u3059\u3002\u81ea\u6bba\u3092\u56f3\u3063\u305f\u4eba\u306e\u6570\u306f\u3001\u81ea\u6bba\u3057\u305f\u4eba\u3088\u308a\u6700\u592720\u500d\u3082\u591a\u3044\u306e\u3067\u3059\u3002\n\n* \u81ea\u6bba\u7387\u306f\u4f1d\u7d71\u7684\u306b\u9ad8\u9f62\u7537\u6027\u306e\u4e2d\u3067\u6700\u3082\u9ad8\u3044\u304c\u3001\u82e5\u8005\u306e\u81ea\u6bba\u7387\u306f\u3001\u73fe\u5728\u3001\u3059\u3079\u3066\u306e\u56fd\u306e3\u5206\u306e1\u3067\u6700\u3082\u30ea\u30b9\u30af\u304c\u9ad8\u3044\u30b0\u30eb\u30fc\u30d7\u306b\u307e\u3067\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u7cbe\u795e\u969c\u5bb3\uff08\u7279\u306b\u3046\u3064\u75c5\u304a\u3088\u3073\u85ac\u7269\u4e71\u7528\uff09\u306f\u3001\u81ea\u6bba\u306e\u5168\u75c7\u4f8b\u306e90\uff05\u4ee5\u4e0a\u306b\u95a2\u9023\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u3057\u304b\u3057\u3001\u81ea\u6bba\u306f\u591a\u304f\u306e\u8907\u96d1\u306a\u793e\u4f1a\u6587\u5316\u7684\u8981\u56e0\u306b\u8d77\u56e0\u3057\u3001\u793e\u4f1a\u7d4c\u6e08\u7684\u3001\u5bb6\u65cf\u7684\u304a\u3088\u3073\u500b\u4eba\u7684\u306a\u5371\u6a5f\u306e\u671f\u9593\u4e2d\u306b\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\uff08\u4f8b\u3048\u3070\u3001\u611b\u3059\u308b\u4eba\u306e\u55aa\u5931\u3001\u5931\u696d\u3001\u6027\u7684\u6307\u5411\u3001\u30a2\u30a4\u30c7\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u767a\u9054\u306e\u56f0\u96e3\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u307e\u305f\u306f\u4ed6\u306e\u4eba\u304b\u3089\u306e\u5206\u96e2\u3001\u793e\u4f1a\/\u4fe1\u5ff5\u306b\u95a2\u3059\u308b\u3053\u3068\u3001\u304a\u3088\u3073\u540d\u8a89\uff09\u3002\n\n### WHO\u306f\u4ed6\u306b\u3082\u3053\u3093\u306a\u8a00\u53ca\u3092\u3057\u3066\u3044\u308b:\n\n* \u30e8\u30fc\u30ed\u30c3\u30d1\u3001\u7279\u306b\u6771\u30e8\u30fc\u30ed\u30c3\u30d1\u3067\u306f\u3001\u7537\u6027\u3068\u5973\u6027\u306e\u4e21\u65b9\u3067\u6700\u3082\u9ad8\u3044\u81ea\u6bba\u7387\u304c\u5831\u544a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n* \u6771\u5730\u4e2d\u6d77\u5730\u57df\u3068\u4e2d\u592e\u30a2\u30b8\u30a2\u5171\u548c\u56fd\u306e\u81ea\u6bba\u7387\u306f\u6700\u3082\u4f4e\u3044\u3002\n \n* \u4e16\u754c\u4e2d\u306e\u81ea\u6bba\u306e\u307b\u307c30\uff05\u304c\u30a4\u30f3\u30c9\u3068\u4e2d\u56fd\u3067\u767a\u751f\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u4e16\u754c\u306e\u5e74\u9f62\u5225\u306e\u81ea\u6bba\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u300255\uff05\u306f15\u301c44\u6b73\u300145\uff05\u306f45\u6b73\u4ee5\u4e0a\u3067\u3059\u3002\n\n* \u82e5\u8005\u306e\u81ea\u6bba\u306f\u3001\u6700\u5927\u306e\u5272\u5408\u3067\u5897\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n#### \u7c73\u56fd\u3067\u306f\u3001\u75be\u75c5\u7ba1\u7406\u4e88\u9632\u30bb\u30f3\u30bf\u30fc\u304c\u6b21\u306e\u3088\u3046\u306b\u5831\u544a\u3057\u3066\u3044\u307e\u3059:\n\n* \u5168\u4f53\u3068\u3057\u3066\u3001\u81ea\u6bba\u306f\u3059\u3079\u3066\u306e\u30a2\u30e1\u30ea\u30ab\u7cfb\u30a2\u30e1\u30ea\u30ab\u4eba\u306b\u3068\u3063\u306611\u756a\u76ee\u306e\u4e3b\u8981\u306a\u6b7b\u56e0\u3067\u3042\u308a\u300115\u301c24\u6b73\u306e\u82e5\u8005\u306e3\u756a\u76ee\u306e\u4e3b\u8981\u306a\u6b7b\u56e0\u3067\u3059\u3002\n\n* \u81ea\u6bba\u306f\u82e5\u8005\u3068\u6210\u4eba\u306e\u9593\u3067\u6df1\u523b\u306a\u554f\u984c\u3067\u3059\u304c\u3001\u6b7b\u4ea1\u7387\u306f65\u6b73\u4ee5\u4e0a\u306e\u9ad8\u9f62\u8005\u306e\u9593\u3067\u6700\u3082\u9ad8\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n* \u7537\u6027\u306f\u5973\u6027\u3088\u308a\u3082\u81ea\u6bba\u306b\u3088\u308a\u6b7b\u4ea1\u3059\u308b\u53ef\u80fd\u6027\u304c4\u500d\u9ad8\u3044\u3002\u305f\u3060\u3057\u3001\u5973\u6027\u306f\u7537\u6027\u3088\u308a\u3082\u81ea\u6bba\u3092\u8a66\u307f\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u304f\u306a\u308a\u307e\u3059\u3002","be83f1cb":"> > > > ","cb48223c":"**4\u3064\u306e\u5168\u30e2\u30c7\u30eb\u306b\u5bfe\u3059\u308bR2 Score**","dff31668":"\n* \u3053\u3053\u3067\u306f\u3001\u6bce\u5e74\u306e\u81ea\u6bba\u8005\u6570\u306b\u5fdc\u3058\u3066\u4e0a\u4f4d10\u304b\u56fd\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 GDP\u3001\u96c7\u7528\u3001\u6210\u9577\u3001\u7d4c\u6e08\u3001\u8d05\u6ca2\u306e\u5206\u91ce\u3067\u6700\u3082\u5f37\u529b\u306a\u56fd\u3067\u3042\u308b\u30ed\u30b7\u30a2\u3068\u30a2\u30e1\u30ea\u30ab\u306f\u3001\u4e16\u754c\u4e2d\u3067\u6700\u3082\u4f4f\u307f\u3084\u3059\u3044\u56fd\u306e1\u3064\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u3066\u304a\u308a\u307e\u3059\u304c\u3001\u81ea\u6bba\u306e\u89b3\u70b9\u304b\u3089\u3082\u30ea\u30b9\u30c8\u306e\u30c8\u30c3\u30d7\u306b\u3044\u307e\u3059\u3002\n\n* \u3053\u308c\u3089\u306e\u56fd\u3067\u306f\u751f\u6d3b\u8cbb\u304c\u975e\u5e38\u306b\u9ad8\u3044\u305f\u3081\u3001\u307e\u305f\u306f\u95a2\u4fc2\u306e\u85ac\u7269\/\u554f\u984c\/\u5bb6\u65cf\u95a2\u9023\u306e\u554f\u984c\u306a\u3069\u304c\u539f\u56e0\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u7406\u7531\u306f\u5931\u696d\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002","2409a5da":"## \u81ea\u6bba\u306e\u5730\u7406\u7a7a\u9593\u5206\u6790","6fc3f47f":"## \u81ea\u6bba\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb","22435a50":"* \u4e0a\u8a18\u306e\u30d7\u30ed\u30c3\u30c8\u3092\u898b\u308b\u3068\u3001\u30a2\u30d5\u30ea\u30ab\u3084\u30a2\u30b8\u30a2\u306e\u5730\u57df\u3067\u306f\u30a2\u30e1\u30ea\u30ab\u3084\u30e8\u30fc\u30ed\u30c3\u30d1\u306e\u5730\u57df\u306b\u6bd4\u3079\u3066\u81ea\u6bba\u8005\u306e\u6570\u304c\u975e\u5e38\u306b\u591a\u3044\u3068\u3044\u3046\u7d50\u8ad6\u3092\u5c0e\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","7d72f6cc":"# WHO\u306e\u89e3\u6790\u3068\u53ef\u8996\u5316","182a4c45":"### \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8","68c85276":"**4\u3064\u306e\u5168\u30e2\u30c7\u30eb\u306b\u5bfe\u3059\u308bRMSE Score**","e6ac9aa4":"## \u30c7\u30fc\u30bf\u53ef\u8996\u5316","c3d92d9f":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3088\u3046"}}