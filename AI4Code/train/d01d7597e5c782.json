{"cell_type":{"98fe17c2":"code","4ad4ef82":"code","df5d26bf":"code","92f293cd":"code","c1c3edd5":"markdown"},"source":{"98fe17c2":"import numpy as np \nimport pandas as pd\nimport json\nfrom pandas.io.json import json_normalize\nimport os\nimport gc\nprint(os.listdir(\"..\/input\"))","4ad4ef82":"def load_data(train_url, test_url):\n    \"\"\"\n    load train and test data \n    \"\"\"\n    dtype={\n            'channelGrouping': str,\n            'geoNetwork': str,\n            'date': str,\n            'fullVisitorId': str,\n            'sessionId': str,\n            'totals': str,\n            'device': str\n        }\n    \n    df_train = pd.read_csv(train_url, dtype=dtype)\n    df_test =  pd.read_csv(test_url, dtype=dtype)\n\n    df_train['is_train'] = 1\n    df_test['is_train'] = 0\n\n    df = pd.concat([df_train, df_test]).reset_index(drop=True)\n    del df_train; del df_test; gc.collect()\n    return df\n\ndef normalize_json_cols(df_t, json_cols):\n    \"\"\"\n    returns df with columns for keys in a column that contains a json string\n    \"\"\"\n    df = df_t.copy()\n    for i in json_cols:\n        temp = pd.io.json.json_normalize(df[i].apply(json.loads))\n        temp.columns = [i + '_' + j for j in temp.columns]\n        df = pd.concat([df, temp], axis=1)\n    df.drop(json_cols, axis=1, inplace=True)\n    return df\n\ndef remove_junk_data(df, dont_del=[]):\n    \"\"\"\n    remove columns with only 1 unique value\n    \"\"\"\n    unique_counts = df.nunique()\n    unique_counts.drop(dont_del, inplace=True)\n    return df.drop(list(unique_counts.index[unique_counts == 1]), axis=1)\n\ndef coerce_numeric_columns(df, numerics):\n    \"\"\"\n    force certain numeric columns to be... numeric\n    \"\"\"\n    df[numerics] = df[numerics].apply(pd.to_numeric, errors='coerce')\n    return df\n\ndef run():\n    \"\"\"\n    return the cleaned up dataframe\n    \"\"\"\n    df = load_data('..\/input\/train.csv', '..\/input\/test.csv')\n    json_cols = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    dont_del = ['totals_newVisits', 'totals_bounces']\n    df = normalize_json_cols(df, json_cols)\n    df = remove_junk_data(df, dont_del=dont_del)\n    numerics = ['totals_hits', 'totals_pageviews', 'totals_transactionRevenue', 'totals_newVisits', 'totals_bounces']\n    df = coerce_numeric_columns(df, numerics)\n    return df","df5d26bf":"df = run()","92f293cd":"df.to_csv('starting_point.csv', index=False)","c1c3edd5":"### Introduction\nThe data in this project is pretty disorganized. This kernel flattens out the jsons into and removes some columns that don't provide any data"}}