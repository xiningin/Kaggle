{"cell_type":{"034f2ee5":"code","7f9889d1":"code","c4d73bb1":"code","a720f147":"code","0828e4c9":"code","95dfc82f":"code","da1bf73c":"code","f3bb2cf9":"code","0955994c":"code","fe28acc0":"code","40919849":"code","6c26c19c":"markdown","b716403b":"markdown","de8d77fa":"markdown","f3deaa64":"markdown","abbd2888":"markdown","fce0b459":"markdown","5ad31a33":"markdown","1380a837":"markdown","92e51654":"markdown","c658155a":"markdown","63d71029":"markdown"},"source":{"034f2ee5":"import numpy as np\nimport pandas as pd\n\nprint('read data')\ndf = pd.read_csv('..\/input\/train.csv')","7f9889d1":"engineering_feats = {\n'var_0': ['var_2', 'var_198', 'var_179', 'var_191', 'var_22'],\n'var_2': ['var_0', 'var_179', 'var_198', 'var_146', 'var_22', 'var_115'],\n'var_26': ['var_44', 'var_155', 'var_157', 'var_163', 'var_180', 'var_123', 'var_87'],\n'var_44': ['var_26', 'var_123', 'var_173', 'var_180', 'var_87', 'var_155', 'var_157', 'var_163', 'var_35', 'var_196', 'var_75'],\n'var_86': ['var_21', 'var_51', 'var_40', 'var_135', 'var_139', 'var_67', 'var_167', 'var_76'],\n'var_139': ['var_21', 'var_80', 'var_86', 'var_174', 'var_40', 'var_76'],\n'var_172': ['var_83', 'var_167', 'var_19', 'var_67', 'var_118'],\n}","c4d73bb1":"k = 'var_44'\nv = engineering_feats[k]\nT = df[v].copy()\nfor i, fe in enumerate(v):\n    T['%s_%s'%(k.split('_')[1],fe.split('_')[1])] = df[k]+df[fe]\nT = T.drop(v,axis=1)\nT.corr()","a720f147":"S = T.corr()\nS[S!=1.0].mean()","0828e4c9":"k = 'var_44'\nv = df.columns[2:14]\nT = df[v].copy()\nfor i, fe in enumerate(v):\n    T['%s_%s'%(k.split('_')[1],fe.split('_')[1])] = df[k]+df[fe]\nT = T.drop(v,axis=1)\nT.corr()","95dfc82f":"S = T.corr()\nS[S!=1.0].mean()","da1bf73c":"from sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import QuantileTransformer\nX = df.values[:,2:].astype(np.float32)\nY = df.values[:,1].astype(np.float32)\nall_roc = 0\nall_cnt = 0\nfor fold_id, (IDX_train, IDX_test) in enumerate(KFold(n_splits=5, random_state=12, shuffle=True).split(Y)):\n    X_train = X[IDX_train]\n    X_test = X[IDX_test]\n    Y_train = Y[IDX_train]\n    Y_test = Y[IDX_test]\n    clf = make_pipeline(QuantileTransformer(output_distribution='normal',random_state=12), GaussianNB())\n    clf.fit(X_train,Y_train)\n    Z = clf.predict_proba(X_test)[:,1]\n    all_roc += roc_auc_score(Y_test,Z)\n    all_cnt += 1\nprint('CV score:',all_roc\/all_cnt)","f3bb2cf9":"combination_feats = [('var_26','var_44')]\nprint(combination_feats)","0955994c":"df_e = df.copy()\nfor fe in combination_feats:\n    df_e['%s_plus_%s'%fe] = df_e[fe[0]]+df_e[fe[1]]\n    df_e['%s_minus_%s'%fe] = df_e[fe[1]]-df_e[fe[0]]\ndf_e = df_e.drop(list(set([i for s in combination_feats for i in s])),axis=1)\ndf_e.head()","fe28acc0":"X = df_e.values[:,2:].astype(np.float32)\nY = df_e.values[:,1].astype(np.float32)\nprint(X.shape)","40919849":"all_roc = 0\nall_cnt = 0\nfor fold_id, (IDX_train, IDX_test) in enumerate(KFold(n_splits=5, random_state=12, shuffle=True).split(Y)):\n    X_train = X[IDX_train]\n    X_test = X[IDX_test]\n    Y_train = Y[IDX_train]\n    Y_test = Y[IDX_test]\n    clf = make_pipeline(QuantileTransformer(output_distribution='normal',random_state=12), GaussianNB())\n    clf.fit(X_train,Y_train)\n    Z = clf.predict_proba(X_test)[:,1]\n    all_roc += roc_auc_score(Y_test,Z)\n    all_cnt += 1\nprint('CV score:',all_roc\/all_cnt)","6c26c19c":"Replace the features to theres sum and difference","b716403b":"*Motivation*:\n\nI would like to find something with special relationships from the Feature.","de8d77fa":"The number of Feature has not changed","f3deaa64":"CV Score gains.*(@_@)* ","abbd2888":"Correlation is large because it becomes similar value when adding together. So it's less meaningful to include than the top set...?","fce0b459":"QuantileTransfExpected value of GaussianNB by cross validationrmer","5ad31a33":"fmm...","1380a837":"**It has not been completed yet.\nI am halfway!**","92e51654":"It's Dummy.","c658155a":"**Expected value of GaussianNB by cross validation**\n\nwithout Feature Engineering, It's 0.8893809240152594","63d71029":"There seems to be some relationship between these features..."}}