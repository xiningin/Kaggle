{"cell_type":{"173eec0a":"code","eea644fe":"code","22c323a4":"code","03f563cf":"code","af0357c1":"code","451cc612":"markdown","e4d79215":"markdown"},"source":{"173eec0a":"import numpy as np \nimport pandas as pd \nimport matplotlib\nimport matplotlib.pyplot as plt\nimport os\n\n\n\ndata_dir = '..\/input\/nfl-big-data-bowl-2020\/'\ndf = pd.read_csv(data_dir + 'train.csv')\nplays = np.unique(df['PlayId'].values)","eea644fe":"# Chose which play to plot \nplay_n = 75\n\nacc        = df[df['PlayId']==plays[play_n]]['A'].values\nx_coord    = df[df['PlayId']==plays[play_n]]['X'].values\ny_coord    = df[df['PlayId']==plays[play_n]]['Y'].values\ndirection  = df[df['PlayId']==plays[play_n]]['Dir'].values\nplay_dir   = df[df['PlayId']==plays[play_n]]['PlayDirection'].values\nyard_line  = df[df['PlayId']==plays[play_n]]['YardLine'].values\nrusher_id  = df[df['PlayId']==plays[play_n]]['NflIdRusher'].values\nnfl_id     = df[df['PlayId']==plays[play_n]]['NflId'].values\nteam       = df[df['PlayId']==plays[play_n]]['Team'].values\n\n\na_x =  np.cos(direction * ((2 * np.pi)\/360 + (np.pi\/2)))\na_y =  np.sin(direction * ((2 * np.pi)\/360 + (np.pi\/2)))\n\nrusher_idx =np.where(rusher_id == nfl_id)[0][0]\n","22c323a4":"fig, ax = plt.subplots(figsize=(20,9), facecolor='grey')\nax.set_facecolor('green')\nplt.ylim((0,53))\nplt.xlim((0,120))\nnorm = matplotlib.colors.Normalize(vmin=acc.min(),vmax=acc.max())\n\nplt.grid()\nhw = 1.2\nq_away = ax.quiver(x_coord[0:10], y_coord[0:10],\n                   a_x[0:10], a_y[0:10],acc[0:10],\n                   cmap='autumn', norm=norm, \n                   scale = 30, headwidth = hw)\nq_home = ax.quiver(x_coord[11:21], y_coord[11:21],\n                   a_x[11:21], a_y[11:21],acc[11:21],\n                   cmap='winter', norm=norm, \n                   scale = 30, headwidth = hw)\n\nplt.plot(x_coord[0:10],y_coord[0:10],'o',color='brown')\nplt.plot(x_coord[11:21],y_coord[11:21],'o',color='blue')\n\nplt.plot(x_coord[rusher_idx],y_coord[rusher_idx],'o',color='black')\nax.axvline(10,c='black') #Home Endzone\nax.axvline(110,c='black') #Away Endzone\n\ncb_away = plt.colorbar(q_away)\ncb_away.set_label('Away Team Acceleration')\ncb_home = plt.colorbar(q_home)\ncb_home.set_label('Home Team Acceleration')\n\nplt.title('Play Direction: '+ play_dir[0])\nplt.show()","03f563cf":"# wip: Trying to make it more interactive\nimport holoviews as hv\nfrom holoviews import opts, dim\nhv.extension('bokeh')\n\nhmap = hv.HoloMap({play_n: hv.VectorField((df[df['PlayId']==plays[play_n]]['X'].values,\n                                           df[df['PlayId']==plays[play_n]]['Y'].values,\n                                            df[df['PlayId']==plays[play_n]]['Dir'].values,\n                                           df[df['PlayId']==plays[play_n]]['A'].values)).opts(color ='black')\n                   for play_n in range(100) } , kdims='play number')  # Print only 100 for now\n\nhmap_2 = hv.HoloMap({play_n: hv.VectorField((df[df['PlayId']==plays[play_n]]['X'].values[0:10],\n                                           df[df['PlayId']==plays[play_n]]['Y'].values[0:10],\n                                            df[df['PlayId']==plays[play_n]]['Dir'].values[0:10],\n                                           df[df['PlayId']==plays[play_n]]['A'].values[0:10])).opts(color ='black')\n                   for play_n in range(100) } , kdims='play number')  # Print only 100 for now\n\nhmap.opts(width =600, height=320)\nhmap.opts(bgcolor='green')","af0357c1":"hmap_2.opts(width =600, height=320)\nhmap_2.opts(bgcolor='green')","451cc612":"# Computing the vectors\n\nWe know the direction in degrees towards where the players are moving. \n\nTo get the x and y component of the acceleration vectors we: \n- calculate the direction in radians and add pi\/2 (we add pi\/2 since in the data 0\u00b0 means the vector its pointing towards the positive y axis and not towards the positive x axis)\n- use the np.cos and np.sin functions to get the x and y components respectively","e4d79215":"# Visualizing Acceleration Vectors at Handoff time\n\nThe magnitude and direction of acceleration of each player shows in which way the play itself is moving. "}}