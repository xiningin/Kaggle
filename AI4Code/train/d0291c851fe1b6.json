{"cell_type":{"7d133e2c":"code","7e97883e":"code","eb489e39":"code","1ab9f685":"code","62bbae5d":"code","a1287cb3":"code","41509675":"code","726e922c":"code","48fc5a93":"code","f6d58253":"code","68305d4a":"code","f98d13d2":"code","7894b723":"code","3fd0a82c":"code","839e2128":"code","74fe6a91":"code","2890057a":"code","48cf2c8c":"code","c3adedb0":"code","2c09d6af":"code","fed7d373":"code","1247afb4":"code","698b97cc":"code","ed84e9b7":"code","30b0d08c":"code","d7ee38ff":"code","816f74a2":"code","34d13e0a":"code","e46a1204":"code","2b9490fa":"code","bcf2cb68":"code","f2a7f582":"code","be8df0fa":"code","7698f73b":"code","2007d9fa":"code","6554dbe9":"code","554b437a":"code","badad3e8":"code","a2b09859":"code","51a19aaf":"code","249cf94b":"code","8caafd15":"code","57ac76cb":"code","2847c301":"markdown","511612eb":"markdown","8a6aa451":"markdown","87ab79df":"markdown","859bc30d":"markdown","d4dc8432":"markdown","e3663510":"markdown","84a190ef":"markdown","636e6df9":"markdown","9c89ed14":"markdown","ece2eeff":"markdown","c7021466":"markdown","19968f2c":"markdown","78b01b34":"markdown","d54cefc9":"markdown","0791135f":"markdown","d67a5285":"markdown","c6ce10b9":"markdown","19983618":"markdown","da7c3c59":"markdown"},"source":{"7d133e2c":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom functools import partial\n#import seaborn as sn\nfrom sklearn.model_selection import train_test_split\n\nfrom random import seed\nseed(1)\nseed = 43\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow import image\nfrom tensorflow import core\nfrom tensorflow.keras import layers\nprint(\"Tensorflow Version: \", tf.__version__)\nprint(\"Keras Version: \",keras.__version__)\n\n\nKAGGLE = 1 # Kaggle path active = 1\nDATA_DIR = \"input\/digit-recognizer\"\n\n\n# change your local path here\nif KAGGLE == 1 :\n    MNIST_PATH= os.path.join('..', DATA_DIR)\nelse:\n    MNIST_PATH= os.path.join(os.getcwd(), \"data\", DATA_DIR)\n\nprint(MNIST_PATH)\n\n\nfor dirname, _, filenames in os.walk(MNIST_PATH): \n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        ","7e97883e":"# Data path and file\nCSV_FILE_TRAIN='train.csv'\nCSV_FILE_TEST='test.csv'\n\ndef load_mnist_data(minist_path, csv_file):\n    csv_path = os.path.join(minist_path, csv_file)\n    return pd.read_csv(csv_path)\n\ndef load_mnist_data_manuel(minist_path, csv_file):\n    csv_path = os.path.join(minist_path, csv_file)\n    csv_file = open(csv_path, 'r')\n    csv_data = csv_file.readlines()\n    csv_file.close()\n    return csv_data\n\ndef split_train_val(data, val_ratio):\n    return \n    \n\ntrain = load_mnist_data(MNIST_PATH,CSV_FILE_TRAIN)\ntest = load_mnist_data(MNIST_PATH,CSV_FILE_TEST)","eb489e39":"y = train['label'].copy()\nX = train.drop(['label'], axis=1)\n\n# competition dataset\nX_test = test.copy()","1ab9f685":"print(\"Shape of the Features: \",X.shape)\nprint(\"Shape of the Labels: \", y.shape)","62bbae5d":"train.value_counts('label')","a1287cb3":"X_train, X_val, y_train, y_val = train_test_split(X, y, random_state=seed, test_size=0.20\n                                                  , stratify=y\n                                                 )","41509675":"print(\"Train - Set Distribution\")\nprint(y_train.value_counts() \/ y_train.value_counts().sum() )\nprint('--------------------------------------------------------------')\nprint('--------------------------------------------------------------')\nprint('--------------------------------------------------------------')\nprint(\"Val - Set Distribution\")\nprint(y_val.value_counts() \/ y_val.value_counts().sum() )\n","726e922c":"print(\"X: \", X.shape)\nprint(\"X_train: \", X_train.shape)\nprint(\"X_val: \", X_val.shape)\n\nprint(\"y_train: \", y_train.shape)\nprint(\"y_val: \", y_val.shape)","48fc5a93":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.preprocessing import StandardScaler\n\npipeline = Pipeline([\n    #('normalizer', Normalizer())\n    ('std_scalar',StandardScaler())\n])","f6d58253":"def random_crop(image):\n    shape = tf.shape(image)\n    min_dim = tf.reduce_min([shape[0], shape[1]]) * 85 \/\/ 100       # croping to 90% of the initial picture \n    return tf.image.random_crop(image, [min_dim, min_dim, 1])\n\n\ndef crop_flip_resize(image, label, flipping = True):\n    if flipping == True:\n        cropped_image = random_crop(image)\n        cropped_image = tf.image.flip_left_right(cropped_image)\n    else:\n        cropped_image = random_crop(image)\n\n    ## final solution\n    resized_image = tf.image.resize(cropped_image, [28,28])\n    final_image = resized_image\n    #final_image = keras.applications.xception.preprocess_input(resized_image)\n    return final_image, label  \n    ","68305d4a":"X_val.shape","f98d13d2":"# converting dataframe format into tensorflow compatible format.\nX_train = X_train.values.reshape(X_train.shape[0], 28, 28, 1)\nX_val = X_val.values.reshape(X_val.shape[0], 28, 28, 1)\n\nX_train_crop = X_train.copy()\nX_val_crop = X_val.copy()","7894b723":"# Creating tensorbased dataset \n\ntraining_dataset = (\n    tf.data.Dataset.from_tensor_slices(\n        (\n            tf.cast(X_train, tf.float32),\n            tf.cast(y_train, tf.int32)\n        )\n    )\n)\n\n\nval_dataset = (\n    tf.data.Dataset.from_tensor_slices(\n        (\n             tf.cast(X_val, tf.float32),\n             tf.cast(y_val, tf.int32)\n        )\n    )\n)\n\n\ntraining_crop_dataset = (\n    tf.data.Dataset.from_tensor_slices(\n        (\n            tf.cast(X_train_crop, tf.float32),\n            tf.cast(y_train, tf.int32)\n        )\n    )\n)\n\n\nval_crop_dataset = (\n    tf.data.Dataset.from_tensor_slices(\n        (\n             tf.cast(X_val_crop, tf.float32),\n             tf.cast(y_val, tf.int32)\n        )\n    )\n)\n","3fd0a82c":"# resizing, croping images via self build function\ntraining_crop_dataset = training_crop_dataset.map(partial(crop_flip_resize, flipping=False))\nval_crop_dataset = val_crop_dataset.map(partial(crop_flip_resize, flipping=False))","839e2128":"# Visualizing a croped, flipped, resized image from new dataset.\nfor X_values, y_values in training_crop_dataset.take(1):\n    for index in range(1):\n        plt.imshow(X_values)","74fe6a91":"# concate the two datasets\ntraining_dataset_all = training_dataset.concatenate(training_crop_dataset)\nval_dataset_all = val_dataset.concatenate(val_crop_dataset)","2890057a":"print(\"training_dataset_all length: \", len(list(training_dataset_all)))\nprint(\"val_dataset_all length: \", len(list(val_dataset_all)))\n","48cf2c8c":"# shuffeling and batching data\ntf.random.set_seed(seed)\n\ntrain_ds = training_dataset_all.shuffle(10000).batch(32).prefetch(1)\nval_ds = val_dataset_all.shuffle(8000).batch(32).prefetch(1)","c3adedb0":"root_logdir = \"..\/..\/tensorboard-logs\"\n\nprint(\"Relative root_logdir: \",root_logdir)\n\ndef get_run_logdir():\n    import time\n    run_id = time.strftime(\"run_%Y_%m_%d-%H_%M_%S\")\n    return os.path.join(root_logdir,run_id)","2c09d6af":"run_logdir = get_run_logdir()\nprint(\"Current run logdir for Tensorboard: \", run_logdir)","fed7d373":"run_logdir","1247afb4":"tensorboard_cb = keras.callbacks.TensorBoard(run_logdir)","698b97cc":"from keras.layers import LeakyReLU\n\ninput_shape=[784]\ninput_shape_notFlattened=[28,28,1]\n\nbatch_shape = []\n\n\nlearning_rt = 1e-03 \nactivation_fn = \"relu\"\ninitializer = \"he_normal\"\nregularizer =  None\n\n# Model building\ndef create_model_struc():  \n    model = keras.models.Sequential()\n\n    model.add(keras.layers.Conv2D(filters=256, kernel_size=6, strides=2, padding='same', input_shape=input_shape_notFlattened))\n    model.add(keras.layers.BatchNormalization())\n    model.add(keras.layers.Activation(activation_fn))\n    model.add(keras.layers.Dropout(rate=0.2))\n    #model.add(keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='valid'))\n    model.add(keras.layers.Conv2D(filters=128, kernel_size=3, strides=2, padding='same'))\n    model.add(keras.layers.BatchNormalization())\n    model.add(keras.layers.Activation(activation_fn))\n    #model.add(keras.layers.MaxPooling2D(pool_size=(3, 3), strides=(2, 2), padding='valid'))\n    model.add(keras.layers.Dropout(rate=0.2))\n    ## \n    model.add(keras.layers.Conv2D(filters=128, kernel_size=3, strides=1, padding='same', activation=activation_fn))\n    model.add(keras.layers.Dropout(rate=0.2))\n    model.add(keras.layers.Conv2D(filters=128, kernel_size=3, strides=1, padding='same', activation=activation_fn))\n\n    model.add(keras.layers.Flatten())\n    model.add(keras.layers.Dense(64, activation=activation_fn))\n    model.add(keras.layers.Dense(64, activation=activation_fn))\n    \n    model.add(keras.layers.Dense(10, activation=\"softmax\"))\n\n    optimizer = keras.optimizers.Adam(learning_rate=learning_rt)\n\n    model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'] )\n    model.build()\n\n    return model   \n","ed84e9b7":"model = create_model_struc()\nmodel.summary()","30b0d08c":"checkpoint_cb = keras.callbacks.ModelCheckpoint(\"my_train_model.h5\", save_best_only=True, save_weights_only=False)","d7ee38ff":"history = model.fit(train_ds, epochs=15, validation_data=val_ds, callbacks=[checkpoint_cb, keras.callbacks.EarlyStopping(patience=8), tensorboard_cb])","816f74a2":"plt.plot(pd.DataFrame(history.history))\nplt.show()","34d13e0a":"model_full = create_model_struc()\nmodel_full.summary()","e46a1204":"# creating a new log dir for tensorboard\ntensorboard_cb_f = keras.callbacks.TensorBoard(get_run_logdir())\ncheckpoint_cb_f = keras.callbacks.ModelCheckpoint(\"my_modell_full.h5\", save_best_only=False, save_weights_only=False)","2b9490fa":"# preparing full features set (X) for the tensorflow data api\n\ntraining_dataset_all = training_dataset.concatenate(training_crop_dataset)\nval_dataset_all = val_dataset.concatenate(val_crop_dataset)\n\ntraining_ds_all = training_dataset_all.concatenate(val_dataset_all)\n\ntraining_ds_all = training_ds_all.shuffle(20000).batch(32).prefetch(1)","bcf2cb68":"# Train the model again pleeeeease with all you got .... especially the new transformed data matrix X \nhistory_full = model_full.fit(training_ds_all, epochs=12, callbacks=[tensorboard_cb_f, checkpoint_cb_f])","f2a7f582":"plt.plot(pd.DataFrame(history_full.history))\nplt.show()","be8df0fa":"# converting dataframe format into tensorflow compatible format.\nX_test = X_test.values.reshape(X_test.shape[0], 28, 28, 1)\n\n\ntest_dataset = (\n    tf.data.Dataset.from_tensor_slices(\n        (\n            tf.cast(X_test, tf.float32)\n        )\n    )\n)","7698f73b":"test_dataset","2007d9fa":"test_ds = test_dataset.batch(32).prefetch(1)","6554dbe9":"mnist_competition_file = pd.DataFrame(columns=['ImageId','Label'])","554b437a":"# Visualizing the image\nplt.figure(figsize=(12, 12))\nfor X_batch in test_ds.take(1):\n    for index in range(1):\n        plt.subplot(3, 3, index + 1)\n        plt.imshow(X_batch[index])\n\nplt.show()","badad3e8":"for element in test_ds.take(1):\n    print(\"Propability of all lables for given pixels: \", model_full.predict(test_ds.take(1))[0])","a2b09859":"print(\"Predicted Digit: \",np.argmax(model_full.predict(test_ds.take(1))[0]))","51a19aaf":"predictions = model_full.predict(test_ds)                                                                           # predict the probability\npredictions = np.argmax(predictions, axis=1)                                                                        # getting the predicted digit numbers based ont the probability of every np element \nmnist_competition_file = pd.DataFrame(predictions)                                                                  # converting into df\nmnist_competition_file.index += 1                                                                                   # index should start at 1\nmnist_competition_file.reset_index(level=0, inplace=True)                                                           # make the index a column \nmnist_competition_file = mnist_competition_file.rename(columns={\"index\": \"ImageId\", 0: \"Label\"}, errors=\"raise\")    # renamen them according to the competition requirements","249cf94b":"mnist_competition_file","8caafd15":"mnist_competition_file.ImageId = mnist_competition_file.ImageId.astype(int)\nmnist_competition_file.Label = mnist_competition_file.Label.astype(int)","57ac76cb":"mnist_competition_file.to_csv('mnist_submission.csv', index=False)","2847c301":"## Train \/ Val Split","511612eb":"### Label Value Count\nVisualizing the label distribution of the full train dataset.","8a6aa451":"## Building Model Architecture","87ab79df":"## Preprocessing Data","859bc30d":"### Keras Callbacks for Tensorboard\nWith Keras there is a way of using Callbacks for the Tensorboard to write log files for the board and visualize the different graphs (loss and val curve)\n","d4dc8432":"# Building a Deep Neural Network","e3663510":"# Introduction - MNIST Training Competition\nThis notebook is a fork or copy of my previous developed notebook for digit recognition. Therefore you will find some parts that look common to the notebook <a href=\"https:\/\/www.kaggle.com\/skiplik\/digit-recognition-with-a-deep-neural-network\">Digit Recognition with a Deep Neural Network<\/a> or <a href=\"https:\/\/www.kaggle.com\/skiplik\/finetuning-hyperparameters-in-deep-neural-network\">Finetuning Hyperparameters in Deep Neural Network<\/a>.\n\nLink to the data topic: https:\/\/www.kaggle.com\/c\/digit-recognizer\/data\n\nAs in the previous notebooks I will use Tensorflow with Keras. I already mentioned in other notebooks, I will skip some explanations about the data set here. Moreover I will use the already discovered knowledge about the data and transform\/prepare the data rightaway.\n\n## Convolutional Neural Networks\nMy focus on this notebook lies in using Convolutional Neural Networks. I worked with them before but since I read different articles and books about its architecture, I got a deeper understanding of the different layers and their result to the rest of the network. \n\nAs in the previous notebooks I will use different architecture \/ layer configurations and submit the results to the Kaggle competition to get a rated accuracy value. This will be an indicator for the used model architecture. The plan is to commit the notebook in Git as well as in Kaggle to versionize the architecture with its accuracy value. This will help me to understand the benefits of the different layers a little and look into the progress of the different architectures later.\n\nThe idea is to use different layers in different combinations. The following layers will be used in this notebook:\n\n- Convolutional layers (Conv2D, Conv3D,...)\n- Max Pooling layers\n- Avg Pooling  \n- Batch Normalization\n- Dropout\n\n\nNot part of this notebook will be the architecture of Transfer-Learning where a pretrained model is used and retrained with a new dataset. I already tried that approach in the following notebook: https:\/\/www.kaggle.com\/skiplik\/picturerecognition-tf-and-transferlearning-resnet\n\n## Best Runs\nThe best run was based on Kaggle version 6 with an accuracy of 99.12% on the kaggle competition \"Digit Recognizer\". For this version the special improvement was (next to the Conv2D layers, the reduction of the epochs for training): https:\/\/www.kaggle.com\/skiplik\/cnn-for-digit-recognition-mnist?scriptVersionId=79696075\n\nRight after that there where an equivalent run with an accuracy of 99.025%. Here happened some architecture changes, added more filters to the Conv-Layers and increased the kernel size. Due to the observation of the training process (via tensorboard) I recognized the validation accuracy starts to get a little bit noisy, therefore I decided to reduce the epochs number to a value where the accuracy still got its none noisy behaviour. In my opinion this is the most important configuration for this accuracy value. The reduction of the epochs just saves the model's capability of giving better answers to totally new, unseen data.\n\n## My other Projects\nIf you are interested in some more clearly analysis of the dataset take a look into my other notebooks about the MNIS-dataset:\n- Finetuning Hyperparameters in Deep Neural Network:\n    - https:\/\/www.kaggle.com\/skiplik\/finetuning-hyperparameters-in-deep-neural-network\n- Digit Recognition with a Deep Neural Network: \n    - https:\/\/www.kaggle.com\/skiplik\/digit-recognition-with-a-deep-neural-network\n- Another MNIST Try:\n    - https:\/\/www.kaggle.com\/skiplik\/another-mnist-try\n- First NN by Detecting Handwritten Characters:\n    - https:\/\/www.kaggle.com\/skiplik\/first-nn-by-detecting-handwritten-characters\n...\n\n\n","84a190ef":"## Creating Competition File","636e6df9":"# Get Data","9c89ed14":"### Model Training with Full Dataset \nIn this part I will train the model with the full dataset. This time I will use the discovered hyperparameters from previous section.","ece2eeff":"## Peparing Test Data\nAs well as previously done, we need to create a TF dataset of the test set as well.","c7021466":"### Data Augmentation with Tensorflow Data Api","19968f2c":"## Model Training","78b01b34":"Comparing the equally splitted train- and val-sets based on the given label y.","d54cefc9":"## Prediction of Testdata","0791135f":"# Image Prediction of Unknown Data (Test Data)","d67a5285":"## Visualizing the Progress","c6ce10b9":"## Preparing Model Visualization with Tensorboard (not for Kaggle)","19983618":"## Model Checkpoints","da7c3c59":"## Building Transforming Piplines"}}