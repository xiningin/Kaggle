{"cell_type":{"9cce4637":"code","39f88982":"code","4528ff6d":"code","c246a846":"code","66f3c773":"code","825b083f":"code","60d1ee2c":"code","8449ada5":"code","4e1e99e5":"code","0339a353":"code","d5b0930c":"code","3d7decbe":"code","f82bd61e":"code","3dca460d":"code","a447d5d5":"code","155848e4":"code","98e76eba":"code","1b8f6172":"markdown","aeeea120":"markdown","fdf4e421":"markdown","409bc632":"markdown","f6b0076d":"markdown","e893efe3":"markdown"},"source":{"9cce4637":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39f88982":"import pandas as pd\nimport numpy as np\nimport torch\nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nimport torch.nn.functional as F\nimport torch.nn as nn \nimport torch.optim as optim","4528ff6d":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\ntorch.manual_seed(777)\nif device == 'cuda':\n    torch.cuda.manual_seed_all(777)","c246a846":"train = pd.read_csv('..\/input\/18011765watermelon-price\/train_water_melon_price.csv')\nprint(train.head(10))\nprint(train.info())","66f3c773":"test = pd.read_csv('..\/input\/18011765watermelon-price\/test_watermelon_price.csv')\nprint(test.head(10))\nprint(test.info())","825b083f":"learning_rate = 0.01\ntraining_epoch = 2000\nbatch_size = 200","60d1ee2c":"x_train = train.iloc[:,1:-1]\ny_train = train.iloc[:,[-1]]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)\n\nprint(x_train.shape)\nprint(y_train.shape)","8449ada5":"train_dataset = torch.utils.data.TensorDataset(x_train,y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle=True,\n                                          drop_last=True)\n\n","4e1e99e5":"class MishFunction(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, x):\n        ctx.save_for_backward(x)\n        return x * torch.tanh(F.softplus(x))   # x * tanh(ln(1 + exp(x)))\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        x = ctx.saved_variables[0]\n        sigmoid = torch.sigmoid(x)\n        tanh_sp = torch.tanh(F.softplus(x)) \n        return grad_output * (tanh_sp + x * sigmoid * (1 - tanh_sp * tanh_sp))\n\nclass Mish(nn.Module):\n    def forward(self, x):\n        return MishFunction.apply(x)\n\ndef to_Mish(model):\n    for child_name, child in model.named_children():\n        if isinstance(child, nn.ReLU):\n            setattr(model, child_name, Mish())\n        else:\n            to_Mish(child)","0339a353":"linear1 = nn.Linear(7,14,bias=True) \nlinear2 = nn.Linear(14,28,bias=True)\nlinear3 = nn.Linear(28,14,bias=True)\nlinear4 = nn.Linear(14,7,bias=True)\nlinear5 = nn.Linear(7,1,bias=True)\nmish = Mish() # activation function\n","d5b0930c":"nn.init.kaiming_normal_(linear1.weight)\nnn.init.kaiming_normal_(linear2.weight)\nnn.init.kaiming_normal_(linear3.weight)\nnn.init.kaiming_normal_(linear4.weight)\nnn.init.kaiming_normal_(linear5.weight)\n","3d7decbe":"model = torch.nn.Sequential(\n    linear1,mish,\n    linear2,mish,\n    linear3,mish,\n    linear4,mish,\n    linear5\n).to(device)","f82bd61e":"loss = nn.MSELoss().to(device)\noptimizer = optim.Adam(model.parameters(),lr=learning_rate)","3dca460d":"total_batch = len(data_loader)\n\nfor epoch in range(training_epoch):\n    avg_cost = 0\n    for X,Y in data_loader:\n        X = X.to(device)\n        Y = Y.to(device)\n\n        optimizer.zero_grad()\n        hypothesis = model(X)\n        cost = loss(hypothesis,Y)\n        cost.backward()\n        optimizer.step()\n\n\n        avg_cost += cost\/total_batch\n    \n    if epoch % 10 == 0:  \n        print('Epoch:', '%d' % (epoch ), 'Cost =', '{:.9f}'.format(avg_cost))\nprint('Learning Finished')","a447d5d5":"test_data = test.iloc[:,1:]\ntest_data = np.array(test_data)\ntest_data = torch.FloatTensor(test_data).to(device)\n\nwith torch.no_grad():\n    predict = model(test_data)\n\npredict","155848e4":"correct_prediction = predict.cpu().numpy().reshape(-1,1)","98e76eba":"submit = pd.read_csv('..\/input\/18011765watermelon-price\/submit_sample.csv')\nfor i in range(len(correct_prediction)):\n  submit['Expected'][i]=correct_prediction[i].item()\nsubmit.to_csv('submit.csv', mode = 'w', index = False, header = True)\nsubmit\n","1b8f6172":"> \ubaa8\ub378 \uc124\uacc4\n\n- x_train\uc758 shape\uc774 [749,7]\uc784\uc744 \ud655\uc778\ud558\uc5ec \uc544\ub798\uc640 \uac19\uc774 linear \ubaa8\ub378\uc744 \uc313\uc544\uc11c \uad6c\ud604\ud568.\n- activation function\uc740 \uc704\uc758 \ub17c\ubb38\uc744 \ucc38\uace0\ud558\uc5ec \ud574\ub2f9 kaggle\uc758 attack \ucf54\ub4dc\uc5d0\uc11c Mish\ub77c\ub294 function\uc744 \uac00\uc838\uc634\n\n- \ucd08\uae30\ud654\ub294 He\uc758 kaiming_normal\uc744 \uc801\uc6a9","aeeea120":"> \ub77c\uc774\ube0c\ub7ec\ub9ac \uc784\ud3ec\ud2b8","fdf4e421":"Mish Activation Function - [Mish \ub17c\ubb38 \ub9c1\ud06c](https:\/\/arxiv.org\/abs\/1908.08681)","409bc632":"> \ubaa8\ub378 \ud559\uc2b5","f6b0076d":"> \ubaa8\ub378 \uc313\uae30\n\nlinear nn\uc640 mish activation function\uc744 \ucc28\ub840\ub85c \uc313\uc544\uc11c \uad6c\uc131\ud568","e893efe3":"> Train,Test \ub370\uc774\ud130 \ub85c\ub4dc"}}