{"cell_type":{"7332ec59":"code","4c9c7990":"code","7150cc4f":"code","66ef6466":"code","4d12c73d":"code","cef7e76f":"code","a5ccd945":"code","1d144d7a":"code","9b1040bd":"code","55b114d9":"code","19925bdd":"code","56a27739":"code","00089ed6":"code","019804fa":"code","ffef14c0":"code","b097f1e3":"code","71c552d6":"code","73fc7110":"code","01abb9bd":"code","c386f1b6":"code","792b6c82":"code","fd79bb95":"code","ee8c6c84":"code","420b8dca":"code","16d17fb5":"code","62304d51":"code","5e329974":"code","a33e54e4":"code","c77d45c3":"code","21bbf8e9":"code","2c04c67b":"code","a1a296e3":"code","1dde83e4":"code","2629f72f":"code","8fd90d16":"code","fd6f5507":"code","487e9115":"code","f0899b10":"code","7a90b4d8":"code","b62f80b6":"code","a04387a3":"code","5fc0489e":"code","29fd70e1":"code","a519f966":"code","600af8de":"code","259e8ec7":"code","2039ed68":"code","8b2c3c57":"code","8e37c8f5":"code","74e79555":"code","9c37c2fe":"code","2ef8a274":"code","0a5344d9":"code","b04c3ded":"code","8e144e83":"code","1e1f3a84":"code","0e5ce946":"code","51304800":"code","b8d89e5b":"code","669a5b4e":"code","aff077b5":"code","e4bdac30":"code","72ea37b5":"code","e41571d1":"code","5e7cd5b6":"code","7e93261b":"code","2e8efb4f":"code","abf7bade":"code","8c680035":"code","c640c400":"code","2a8619f9":"code","b7e0c86f":"code","24122cf0":"code","bda9132c":"code","8a8f1f59":"code","a2b11cc9":"code","112643c1":"code","aec330c2":"code","ae67b318":"code","a662aa99":"code","c7661a07":"code","aa976558":"code","f64c50e9":"code","c83fe101":"code","ae0bc38e":"code","6aacc935":"code","e3eb7f84":"code","5a65cb4f":"code","03b10010":"code","e4501174":"markdown","2c7a1dd6":"markdown","69ae618d":"markdown","fc8b30e3":"markdown","2ba37b49":"markdown","81e7abe6":"markdown","e1d8e900":"markdown","77ebad60":"markdown","d4bdfe76":"markdown","19a25458":"markdown","ce4c835c":"markdown","7aa3f452":"markdown","aa4c24dd":"markdown","58de7815":"markdown","8487a143":"markdown","9c3b7b8b":"markdown","f51f0e9a":"markdown","b16d278c":"markdown","56100c6c":"markdown","8e9ca7e5":"markdown","d58567eb":"markdown","af2a76cf":"markdown","5254502f":"markdown","94ad8fdd":"markdown","1a9f217c":"markdown","c90b91e5":"markdown","58cbed90":"markdown","b5be984a":"markdown","03984b8d":"markdown","c263adee":"markdown","fbf37bc7":"markdown","0dd63fe0":"markdown","7981c088":"markdown","78497e16":"markdown","6271dcb9":"markdown","3192f2ec":"markdown","ac18b917":"markdown","3ef850dd":"markdown","89a4715f":"markdown","9608d80d":"markdown","4ab57b6d":"markdown","e32a2cd0":"markdown","9f2c3c8c":"markdown","190f8b06":"markdown","bfbac95c":"markdown","467085d0":"markdown","1181632e":"markdown","efdee57b":"markdown","d20b44d9":"markdown","160a3e81":"markdown","584971d2":"markdown","7b7078b4":"markdown","ac3421aa":"markdown","099f7cd8":"markdown","9ab4800e":"markdown","13dcd3dc":"markdown","3f7670cf":"markdown","94152dc4":"markdown","51393baa":"markdown","c4c6cc08":"markdown"},"source":{"7332ec59":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nplayers = pd.read_csv('..\/input\/players\/players.csv', encoding='latin1', index_col=0)\n\n# Top column is misaligned.\nplayers.index.name = 'ID'\nplayers.columns = ['First' , 'Last', 'Handidness', 'DOB', 'Country']\n\n# Parse date data to dates.\nplayers = players.assign(DOB=pd.to_datetime(players['DOB'], format='%Y%m%d'))\n\n# Handidness is reported as U if unknown; set np.nan instead.\nimport numpy as np\nplayers = players.assign(Handidness=players['Handidness'].replace('U', np.nan))\n\nplayers.head()","4c9c7990":"\nmatches = pd.read_csv('..\/input\/player\/matches.csv', encoding='latin1', index_col=0)\nmatches.head(5)","7150cc4f":"import pandas as pd\nrankings = pd.read_csv('..\/input\/player\/rankings.csv', encoding='latin1', index_col=0)\nrankings.head(5)","66ef6466":"#Data manipulation libraries : \nimport numpy as np  #numpy\nimport pandas as pd  #pandas\n\n#System libraries\nimport glob #The glob module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell\n\n\n\n#Plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\n#math operations lib \nimport math\nfrom math import pi\n\n#date manipulation \nimport datetime as dt\n\n#Impute missing data\nfrom sklearn.preprocessing import Imputer \n\n\n\n#Splitting data to test and train \nfrom sklearn.model_selection import train_test_split\n\nimport datetime\n\nimport os\n","4d12c73d":"#countrys with moste nomber of players \nplayers.Country.value_counts().head(20).plot.bar(\n    figsize=(12, 6),\n    title='WTA Player Country Representing'\n)","cef7e76f":"\nmatches['winner_ioc'].value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA country with Most Matches Win'\n)","a5ccd945":"#WTA country with Most Matches lost\n\nmatches['loser_ioc'].value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA country with Most Matches lost'\n)","1d144d7a":"pd.concat([matches['winner_name'], matches['loser_name']]).value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA Players with Most Matches Played'\n)","9b1040bd":"matches['winner_name'].value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA Players with Most Matches Won'\n)","55b114d9":"matches['loser_name'].value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA Players with Most Matches Lost'\n)","19925bdd":"import pandas as pd\n\nt11 = pd.read_csv('..\/input\/player\/wta_matches_2011.csv', encoding='latin1', index_col=0)\nt12 = pd.read_csv('..\/input\/player\/wta_matches_2012.csv', encoding='latin1', index_col=0)\nt13 = pd.read_csv('..\/input\/player\/wta_matches_2013.csv', encoding='latin1', index_col=0)\nt14 = pd.read_csv('..\/input\/player\/wta_matches_2014.csv', encoding='latin1', index_col=0)\nt15 = pd.read_csv('..\/input\/player\/wta_matches_2015.csv', encoding='latin1', index_col=0)\nt16 = pd.read_csv('..\/input\/player\/wta_matches_2016.csv', encoding='latin1', index_col=0)\n\nwta = pd.concat([t11, t12,t13,t14,t15,t16])\nwta.head(5)","56a27739":"wta.duplicated().sum()","00089ed6":"players.duplicated().sum()","019804fa":"rankings.shape","ffef14c0":"rankings.duplicated().sum()\n","b097f1e3":"rankings.drop_duplicates(keep='first').shape","71c552d6":"wta.isnull().sum(axis=0)","73fc7110":"wta.shape\n","01abb9bd":"           \nwta['surface'].value_counts(dropna=False)","c386f1b6":"wta['surface'].fillna(value='Hard', inplace=True)","792b6c82":"wta['winner_hand'].fillna(value='R', inplace=True)\n","fd79bb95":"wta['loser_hand'].fillna(value='R', inplace=True)\n","ee8c6c84":"wta['loser_entry'].value_counts(dropna=False)\n","420b8dca":"wta['loser_entry'].fillna(value='S', inplace=True)\n","16d17fb5":"wta['winner_entry'].fillna(value='S', inplace=True)\n","62304d51":"wta = wta.drop('l_SvGms', 1)\n","5e329974":"wta = wta.drop('w_SvGms', 1)\n","a33e54e4":"wta.isnull().sum(axis=0)","c77d45c3":"wta['l_bpFaced'].fillna((wta['l_bpFaced'].mean()), inplace=True)\n","21bbf8e9":"wta['l_bpSaved'].fillna((wta['l_bpSaved'].mean()), inplace=True)\n","2c04c67b":"wta['l_2ndWon'].fillna((wta['l_2ndWon'].mean()), inplace=True)\n","a1a296e3":"wta['l_1stWon'].fillna((wta['l_1stWon'].mean()), inplace=True)\n","1dde83e4":"wta['l_1stIn'].fillna((wta['l_1stIn'].mean()), inplace=True)\n","2629f72f":"wta['l_svpt'].fillna((wta['l_svpt'].mean()), inplace=True)\n","8fd90d16":"wta['l_df'].fillna((wta['l_df'].mean()), inplace=True)\n","fd6f5507":"wta['l_ace'].fillna((wta['l_ace'].mean()), inplace=True)\n","487e9115":"wta['w_bpFaced'].fillna((wta['w_bpFaced'].mean()), inplace=True)\n","f0899b10":"wta['w_bpSaved'].fillna((wta['w_bpSaved'].mean()), inplace=True)\n","7a90b4d8":"wta['w_ace'].fillna((wta['w_ace'].mean()), inplace=True)\n","b62f80b6":"wta['w_df'].fillna((wta['w_df'].mean()), inplace=True)\n","a04387a3":"wta['w_1stIn'].fillna((wta['w_1stIn'].mean()), inplace=True)\n","5fc0489e":"wta['w_svpt'].fillna((wta['w_svpt'].mean()), inplace=True)\n","29fd70e1":"wta['w_1stWon'].fillna((wta['w_1stWon'].mean()), inplace=True)\n","a519f966":"wta['w_2ndWon'].fillna((wta['w_2ndWon'].mean()), inplace=True)\n","600af8de":"matches.isnull().sum(axis=0)","259e8ec7":"matches.shape\n","2039ed68":"matches['loser_rank'].fillna(value='40.0', inplace=True)\n","8b2c3c57":"matches['year'].value_counts(dropna=False)\n","8e37c8f5":"matches['year'].fillna(value='2002.0', inplace=True)\n","74e79555":"matches['round'].value_counts(dropna=False)\n","9c37c2fe":"matches['round'].fillna(value='R32', inplace=True)\n","2ef8a274":"matches['surface'].fillna(value='Hard', inplace=True)\n","0a5344d9":"matches['winner_hand'].fillna(value='R', inplace=True)\n","b04c3ded":"matches['loser_hand'].fillna(value='R', inplace=True)\n","8e144e83":"matches['loser_rank_points'].value_counts(dropna=False)\n","1e1f3a84":"matches['loser_rank_points'].fillna(value='400.0', inplace=True)\n","0e5ce946":"matches['minutes'].fillna((matches['minutes'].mean()), inplace=True)\n","51304800":"matches['winner_ht'].value_counts(dropna=False)\n","b8d89e5b":"matches['winner_ht'].fillna(value='170.0', inplace=True)\n","669a5b4e":"matches['winner_entry'].fillna(value='S', inplace=True)\n","aff077b5":"\nmatches = matches.drop('Unnamed: 32', 1)\n","e4bdac30":"winners = list(np.unique(wta.winner_name))\nlosers = list(np.unique(wta.loser_name))\n\nall_players = winners + losers\nplayers = np.unique(all_players)\n\nplayers_wta = pd.DataFrame()\nplayers_wta['Name'] = players\nplayers_wta['Wins'] = players_wta.Name.apply(lambda x: len(wta[wta.winner_name == x]))\nplayers_wta['Losses'] = players_wta.Name.apply(lambda x: len(wta[wta.loser_name == x]))\n\nplayers_wta['PCT'] = np.true_divide(players_wta.Wins,players_wta.Wins + players_wta.Losses)\nplayers_wta['Games'] = players_wta.Wins + players_wta.Losses\n#%%\nplt.style.use('fivethirtyeight')\nwta['Year'] = wta.tourney_date.apply(lambda x: str(x)[0:4])\nwta['Sets'] = wta.score.apply(lambda x: x.count('-'))\nwta['Rank_Diff'] =  wta['loser_rank'] - wta['winner_rank']\nwta['ind'] = range(len(wta))\nwta['Rank_Diff_Round'] = wta.Rank_Diff.apply(lambda x: 10*round(np.true_divide(x,10)))\nwta = wta.set_index('ind')\n\nsurfaces = ['Hard','Grass','Clay','Carpet']\nfor surface in surfaces:\n    players_wta[surface + '_wins'] = players_wta.Name.apply(lambda x: len(wta[(wta.winner_name == x) & (wta.surface == surface)]))\n    players_wta[surface + '_losses'] = players_wta.Name.apply(lambda x: len(wta[(wta.loser_name == x) & (wta.surface == surface)]))\n    players_wta[surface + 'PCT'] = np.true_divide(players_wta[surface + '_wins'],players_wta[surface + '_losses'] + players_wta[surface + '_wins'])\n    \nserious_players = players_wta[players_wta.Games>40]\nserious_players['Height'] = serious_players.Name.apply(lambda x: list(wta.winner_ht[wta.winner_name == x])[0])\nserious_players['Best_Rank'] = serious_players.Name.apply(lambda x: min(wta.winner_rank[wta.winner_name == x]))\nserious_players['Win_Aces'] = serious_players.Name.apply(lambda x: np.mean(wta.w_ace[wta.winner_name == x]))\nserious_players['Lose_Aces'] = serious_players.Name.apply(lambda x: np.mean(wta.l_ace[wta.loser_name == x]))\nserious_players['Aces'] = (serious_players['Win_Aces']*serious_players['Wins'] + serious_players['Lose_Aces']*serious_players['Losses'])\/serious_players['Games']","72ea37b5":"wta.surface.value_counts(normalize=True).plot(kind='bar')","e41571d1":"wta['Aces'] = wta.l_ace + wta.w_ace\n\nplt.bar(1,np.mean(wta.Aces[wta.surface == 'Hard']))\nplt.bar(2,np.mean(wta.Aces[wta.surface == 'Grass']), color = 'g')\nplt.bar(3,np.mean(wta.Aces[wta.surface == 'Clay']), color ='r')\nplt.bar(4,np.mean(wta.Aces[wta.surface == 'Carpet']), color ='y')\nplt.ylabel('Aces per Match')\nplt.xticks([1,2,3,4], ['Hard','Grass','Clay','Carpet'])\nplt.title('More Aces on Grass')","5e7cd5b6":"wta['df'] = wta.l_df + wta.w_df\n\nplt.bar(1,np.mean(wta.df[wta.surface == 'Hard']))\nplt.bar(2,np.mean(wta.df[wta.surface == 'Grass']), color = 'g')\nplt.bar(3,np.mean(wta.df[wta.surface == 'Clay']), color ='r')\nplt.bar(4,np.mean(wta.df[wta.surface == 'Carpet']), color ='y')\nplt.ylabel('Aces per Match')\nplt.xticks([1,2,3,4], ['Hard','Grass','Clay','Carpet'])\nplt.title('More double faults on  Hard ')","7e93261b":"wta['bps'] = wta.l_bpFaced + wta.w_bpFaced\n\nplt.bar(1,np.mean(wta.bps[wta.surface == 'Hard']))\nplt.bar(2,np.mean(wta.bps[wta.surface == 'Grass']), color = 'g')\nplt.bar(3,np.mean(wta.bps[wta.surface == 'Clay']), color ='r')\nplt.bar(4,np.mean(wta.bps[wta.surface == 'Carpet']), color ='y')\nplt.ylabel('break point saved  per surface')\nplt.xticks([1,2,3,4], ['Hard','Grass','Clay','Carpet'])\nplt.title('easier to break serve on Clay ')","2e8efb4f":"plt.bar(1,np.mean(matches.minutes[matches.surface == 'Hard']))\nplt.bar(2,np.mean(matches.minutes[matches.surface == 'Grass']), color = 'g')\nplt.bar(3,np.mean(matches.minutes[matches.surface == 'Clay']), color ='r')\nplt.bar(4,np.mean(matches.minutes[matches.surface == 'Carpet']), color ='y')\nplt.ylabel('Aces per Match')\nplt.xticks([1,2,3,4], ['Hard','Grass','Clay','Carpet'])\nplt.title('less time  on Grass')","abf7bade":"print('Average time on HARD courts ', np.mean(matches.minutes[matches.surface == 'Hard']))\n","8c680035":"print('Average time on Clay courts ', np.mean(matches.minutes[matches.surface == 'Clay']))\n","c640c400":"print('Average time on Grass courts ', np.mean(matches.minutes[matches.surface == 'Grass']))\n","2a8619f9":"avg_height = []\nyears = np.arange(2011,2016)\nfor year in years:\n    avg_winner = np.mean(wta.winner_ht[wta.Year == str(year)])\n    avg_loser = np.mean(wta.winner_ht[wta.Year == str(year)])\n    avg_height.append(np.mean([avg_winner,avg_loser]))\n\nplt.bar(years,avg_height)\nplt.ylim([165,175])\nplt.xlabel('Year')\nplt.ylabel('Average Height')\nplt.title('Are tennis players getting taller?')","b7e0c86f":"pd.concat([wta['winner_ht'], wta['loser_ht']]).value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA Players height '\n)\n","24122cf0":"wta['loser_ht'].value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA hieght with Most Matches Lost'\n)","bda9132c":"wta['winner_ht'].value_counts().head(20).plot.bar(\n    figsize=(12, 4),\n    title='WTA Players height with Most Matches win'\n)","8a8f1f59":"print('Average winner height on HARD courts ', np.mean(wta.winner_ht[wta.surface == 'Hard']))\nprint('Average winner height on CLAY courts ', np.mean(wta.winner_ht[wta.surface == 'Clay']))\nprint('Average winner height on GRASS courts ', np.mean(wta.winner_ht[wta.surface == 'Grass']))\nprint('Average winner height on CARPET courts ', np.mean(wta.winner_ht[wta.surface == 'Carpet']))","a2b11cc9":"print('Average Player Height', np.mean(serious_players.Height))\nprint('Average Height of no.1 Rank ',np.mean(serious_players.Height[serious_players.Best_Rank == 1]))\n","112643c1":"import numpy as np\n\nplayers.set_index('DOB').resample('Y').count().Country.plot.line(\n    linewidth=1, \n    figsize=(12, 4),\n    title='WTA Player Year of Birth'\n)","aec330c2":"wta.winner_age.plot(kind='hist')","ae67b318":"matchesWon = matches[(matches['round'] == 'F') & \n(matches['tourney_name'] =='US Open')| \\\n(matches['tourney_name'] =='French Open')|(matches['tourney_name'] =='Wimbledon')| \\\n                     (matches['tourney_name'] =='Australian Open')]\nmatchesWon.winner_age.plot(kind='hist',color='gold',label='Age',bins = 150 \\\n                           ,linewidth=0.01,grid=True,figsize = (12,10))\nplt.xlabel('Age')              # label = name of label\nplt.ylabel('No of Wins')\nplt.suptitle('Number of Grandslams wins based on Age of the player', x=0.5, y=.9, ha='center', fontsize='xx-large')","a662aa99":"df70 = wta[(wta.loser_age - wta.winner_age > 0)]\ndf71 = wta[(wta.loser_age - wta.winner_age < 0)]\nlabels = 'the winner is the youngest', 'the winner is the oldest'\nvalues = [6589, 7419]\ncolors = ['red', 'pink']\nexplode = (0.1, 0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=140)\n \nplt.axis('equal')\nplt.show()\n","c7661a07":"plt.bar(1,np.mean(matches.winner_age[matches['round'] == 'R128']))\nplt.bar(2,np.mean(matches.winner_age[matches['round'] == 'R64']), color = 'g')\nplt.bar(3,np.mean(matches.winner_age[matches['round'] == 'QF']), color ='r')\nplt.bar(4,np.mean(matches.winner_age[matches['round'] == 'F']), color ='y')\n\n\nplt.ylabel('Aces per Match')\nplt.xticks([1,2,3,4], ['R128','R64','qF','F'])\nplt.title('age \/ rounds ')","aa976558":"plt.style.use('fivethirtyeight')\n\n(matches\n     .assign(\n         winner_seed = matches.winner_seed.fillna(0).map(lambda v: v if str.isdecimal(str(v)) else np.nan),\n         loser_seed = matches.loser_seed.fillna(0).map(lambda v: v if str.isdecimal(str(v)) else np.nan)\n     )\n     .loc[:, ['winner_seed', 'loser_seed']]\n     .pipe(lambda df: df.winner_seed.astype(float) >= df.loser_seed.astype(float))\n     .value_counts()\n).plot.bar(title='Higher Ranked Seed Won Match')","f64c50e9":"import re\nwta['Set_1'], wta['Set_2'], wta['Set_3'] = wta['score'].str.split(' ',2).str\ncomeback = 0\nfor item,row in wta.iterrows():\n\tif 'R' not in str(row['Set_2']):\n\t\tif 'R' not in str(row['Set_3']) and str(row['Set_3']) != 'nan' and 'u' not in str(row['Set_3']) and str(row['Set_3']) != '6-0 6-1' and 'D' not in str(row['Set_3']):\n\t\t\tset_score_Set_2 = re.sub(\"\\(\\d+\\)\",\" \",row['Set_2'])\n\t\t\tset_score_Set_3 = re.sub(\"\\(\\d+\\)\",\" \",row['Set_3'])\n\t\t\tSet_3 = float(set_score_Set_3.split('-')[0]) - float(set_score_Set_3.split('-')[1])\n\t\t\tSet_2 = float(set_score_Set_2.split('-')[0]) - float(set_score_Set_2.split('-')[1])\n\t\t\tif Set_3 * Set_2 > 0:\n\t\t\t\tcomeback += 1\n\nprint ('Comeback %% = %f'%(100*float(comeback)\/float(len(wta))))\n","c83fe101":"plt.bar(1,np.sum([(wta.surface == 'Hard') & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(2,np.sum([(wta.surface == 'Clay') & ( 'RET' in str(row['score'])  ) ] ), color = 'r')\nplt.bar(3,np.sum([(wta.surface == 'Grass') & ( 'RET' in str(row['score'])  ) ] ), color ='g')\nplt.bar(4,np.sum([(wta.surface == 'Carpet') & ( 'RET' in str(row['score'])  ) ] ), color ='y')\n\n\nplt.ylabel('retirement per surface')\nplt.xticks([1,2,3,4], ['Hard','Clay','Grass','Carpet'])\nplt.title('retirement \/ surface ')","ae0bc38e":"plt.bar(1,np.sum([(wta['round'] == 'R128') & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(2,np.sum([(wta['round'] == 'R64') & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(3,np.sum([(wta['round'] == 'R32') & ( 'RET' in str(row['score'])  ) ] ), color = 'r')\nplt.bar(4,np.sum([(wta['round'] == 'R16') & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(5,np.sum([(wta['round'] == 'QF') & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(6,np.sum([(wta['round'] == 'SF') & ( 'RET' in str(row['score'])  ) ] ), color ='g')\nplt.bar(7,np.sum([(wta['round'] == 'F') & ( 'RET' in str(row['score'])  ) ] ), color ='y')\n\n\nplt.ylabel('retirement per rounds')\nplt.xticks([1,2,3,4,5,6], ['R128','R64','R32','R16','QF','SF','F'])\nplt.title('retirement \/ round ')","6aacc935":"plt.bar(1,np.sum([(wta['loser_rank'] < 30 ) & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(2,np.sum([(wta['loser_rank'] >30   ) & (wta['loser_rank'] <50 ) & ( 'RET' in str(row['score'])  ) ] ))\nplt.bar(3,np.sum([(wta['loser_rank'] >50   ) & (wta['loser_rank'] <100 ) & ( 'RET' in str(row['score'])  ) ] ))\n\nplt.bar(4,np.sum([(wta['loser_rank'] > 100 ) & ( 'RET' in str(row['score'])  ) ] ))\n\n\nplt.ylabel('retirement per rounds')\nplt.xticks([1,2,3,4], ['<30','[30 .. 50]','[50 .. 100]','>100'])\nplt.title('retirement \/ rank ')","e3eb7f84":"plt.bar(1,np.sum (wta['winner_entry'] == 'S'  )  )  \nplt.bar(2,np.sum (wta['winner_entry'] == 'Q'  )  ) \nplt.bar(3,np.sum (wta['winner_entry'] == 'WC'  )  )\nplt.bar(4,np.sum (wta['winner_entry'] == 'LL'  )  ) \nplt.bar(5,np.sum (wta['winner_entry'] == 'ALT'  )  ) \n\n\n\nplt.ylabel('retirement per rounds')\nplt.xticks([1,2,3,4,5], ['S','Q','WC','LL','ALT'])\nplt.title('S , Q , WC and LL matche win ')","5a65cb4f":"plt.bar(1,np.sum([(wta['round'] == 'F') & ( (wta['winner_entry'] == 'S'  )  ) ] ))\nplt.bar(2,np.sum([(wta['round'] == 'F') & ( (wta['winner_entry'] == 'Q'  )  ) ] ))\nplt.bar(3,np.sum([(wta['round'] == 'F') & ( (wta['winner_entry'] == 'WC'  )  ) ] ))\nplt.bar(4,np.sum([(wta['round'] == 'F') & ( (wta['winner_entry'] == 'LL'  )  ) ] ))\nplt.bar(5,np.sum([(wta['round'] == 'F') & ( (wta['winner_entry'] == 'ALT'  )  ) ] ))\n\n\n\nplt.ylabel('retirement per rounds')\nplt.xticks([1,2,3,4,5], ['S','Q','WC','LL','ALT'])\nplt.title('S , Q , WC and LL in finals ')","03b10010":"plt.bar(1,np.sum([(wta['tourney_level'] == 'G') & ( (wta['winner_entry'] == 'S'  )  ) ] ))\nplt.bar(2,np.sum([(wta['tourney_level'] == 'G') & ( (wta['winner_entry'] == 'Q'  )  ) ] ))\nplt.bar(3,np.sum([(wta['tourney_level'] == 'G') & ( (wta['winner_entry'] == 'WC'  )  ) ] ))\nplt.bar(4,np.sum([(wta['tourney_level'] == 'G') & ( (wta['winner_entry'] == 'LL'  )  ) ] ))\nplt.bar(5,np.sum([(wta['tourney_level'] == 'G') & ( (wta['winner_entry'] == 'ALT'  )  ) ] ))\n\n\n\nplt.ylabel('retirement per rounds')\nplt.xticks([1,2,3,4,5], ['S','Q','WC','LL','ALT'])\nplt.title('S , Q , WC and LL in GS ')","e4501174":"This is a fantastic dataset with a lot of exploratory potential. Hopefully this notebook has given you some ideas of further exploration you can do with it!<br>\nthis work some deterministic factors to own the match , some informations that can be usefull for players and some facts .\n","2c7a1dd6":"<h1><b>4.Data Exploration <\/b><\/h1>","69ae618d":"<h1>5.Conclusion <\/h1>","fc8b30e3":"<b>wta and players<\/b> : no duplicated raws ","2ba37b49":"Tennis is a racket sport that can be played individually against a single opponent (singles) or between two teams of two players each (doubles).\nThe object of the game is to maneuver the ball in such a way that the opponent is not able to play a valid return. The player who is unable to return the ball will not gain a point, while the opposite player will.","81e7abe6":"The Women's Tennis Association (WTA), founded in 1973 by Billie Jean King, is the principal organising body of women's professional tennis. It governs the WTA Tour which is the worldwide professional tennis tour for women and was founded to create a better future for women's tennis.","e1d8e900":"<h3> 3.1. duplicated raws <\/h3>","77ebad60":"The WTA rankings are based on a rolling 52-week, cumulative system. A player's ranking is determined by her results at a maximum of 16 tournaments for singles and 11 for doubles and points are awarded based on how far a player advances in a tournament.","d4bdfe76":"<h3><b> Conclusion : <\/b><\/h3><br>\n<li>tennis is becoming more popular <\/li>\n<li>the perfect age of player's carrer is between 22 and 27 <\/li>\n<li>the ideal age to announce your retirement is between 30 and 35 <\/li>\n<li>in the final rounds the youngest player could have more chances to win the match and the tournament <\/li>","19a25458":"Dataset from Kaggle : <a><href>https:\/\/www.kaggle.com\/residentmario\/exploring-wta-players\/notebook<\/href><\/a>\n\n","ce4c835c":"<h1>6.Perspectives<\/h1><br>\n<li>Does the rank correlates with the money earn by the player? <\/li>\n<li>Which player did the most rapidly climb the ranks through the years? <\/li>\n<li>is it the same results with ATP ? <\/li>\n","7aa3f452":"<b>wta : <\/b>","aa4c24dd":"<h3><b>Conclusion : <\/b><\/h3>\n    <li>high number of injuries in clay courts compared to the number of clay court's tournaments <\/li>\n    <li>in early stages of the draw chances of getting injured are higher than final stages <\/li>","58de7815":"<h2><b>4.2 Height<\/b><\/h2>","8487a143":"<h3> 3.2. missing values <\/h3>","9c3b7b8b":"<h2><b>1.3 Tournament categories : <\/h2><\/b>","f51f0e9a":"<h1><B>Women's Tennis Association<\/b> <\/h1>","b16d278c":"<h2><b>2.1 Collect initial data <\/b><\/h2>","56100c6c":"In this project , we will use the CRISP-DM methodology.","8e9ca7e5":"<h2><b>1.2 Ranking method : <\/b><\/h2>\n","d58567eb":"<h2><b> 2.2 Data Description <\/b><\/h2>","af2a76cf":"<li> 5  players from RUS : kusnetsova , sharapova , dementieva , petrova , zvonareva <\/li>\n<li> 2  players from USA  : serena and venus  <\/li>\n<li> facing a player from RUS \/ USA could be a probleme <\/li>\n<li>let's see the players  with most matches lost <\/li>","5254502f":"you need more time to win a match on clay courts ! ","94ad8fdd":"<b>rankings.csv<\/b>\n","1a9f217c":"<h3><b>3.3 column preparation : <\/b><\/h3>","c90b91e5":"<b>let's see the relation between countrys and players : <\/b>","58cbed90":"<li>\nhard \n<\/li>\n<li>\nclay \n<\/li>\n<li>\ngrass\n<\/li>\n<li>carpet <\/li>","b5be984a":"let's try to combine hieghts with surfaces !! ","03984b8d":"we need more informations like serve , aces , winners ... so ! let's add some extra data !!! \n","c263adee":"<b>Informations  : <\/b><br>\n    <li>the tallest w.no1 are dinara safina and lindsy davenport : 1.89<\/li>\n    <li>the smallest w.no1 is tracy austin : 1.65 <\/li>\n    <li> the current hieght oh w.no1 (simona halep ) : 1.68<\/li><br>\n<h3><b>Conclusion : <\/b> <\/h3>\n        <li> player's height don't give a clear vision   <\/li>","fbf37bc7":"<b>choking information !!! <\/b>","0dd63fe0":"<b>importing libraries : <\/b>","7981c088":"<h2><b> 3. DATA PREPARATION <\/b><\/h2>\n","78497e16":"<h3><b>Conlusion : <\/b><\/h3>","6271dcb9":"<h2><b>2. Data understanding<\/b><\/h2>","3192f2ec":"<ul>\n<li>Grand Slam tournaments (4)<\/li>\n<li>Year-ending WTA Tour Championships (1)<\/li>\n<li>Premier (20) <\/li>\n<li>International tournaments (32) <\/li>\n<li>WTA 125k Series <\/li>\n<\/ul>","ac18b917":"<h2> 4.3 Age : <\/h2>","3ef850dd":"<h3>Conclusion : <\/h3><br>\n    <li>lucky losers and Alternatives don't have any impact <\/li>\n        <li>qualifieres and WC  can  makes some trouble <\/li>","89a4715f":"<b>let's see the players with most win\/lost matches : <\/b>","9608d80d":"<h2><b> 1.4 courts   <\/b><\/h2>\n","4ab57b6d":"<b>matches.csv<\/b>","e32a2cd0":"as we said before , most of the matches are on hard courts ! let's see the aces per surface ","9f2c3c8c":"<b>players.csv <\/b>","190f8b06":"<h2><b>4.1 Surfaces :<\/b> <\/h2>","bfbac95c":"<h1><b> 1. Business understanding<\/b><\/h1>","467085d0":"let's see teh performance of S,WC,Q,LL and ALT","1181632e":"let's see <b>Average Player Heigh<\/b> and <b>Average Height of no.1 Rank<\/b>","efdee57b":"some duplicated rows in <b>ranking<\/b>","d20b44d9":"#A look at Comebacks!! <br>\nOverall Comeback Percentage. Ignoring all cases where,<br>\n\none of the players had retired in the second\/third set (characterised by 'RET' in the data - and performing by checking for 'R'\nthe game finished in the second set, characterised by 'nan' in the third set score.<br>\nthird set had 'unfinished'<br>\nthird set had 'DEF'<br>\nUsing re.sub to replace scores that went to tie-break with a '(space)' eg: 6-7(3)","160a3e81":"<h2><b>4.4 upsets : <\/h2><\/b>","584971d2":"<h2>4.6 Seeds : <\/2>","7b7078b4":"<b>matches: <\/b>","ac3421aa":"let's see their performance in GS !!!","099f7cd8":"<b>tennis is getting more popular !<\/b>","9ab4800e":"<h2><b> 4.5 injuries : <\/b><\/h2>","13dcd3dc":"<h2><b>1.1 WTA : <\/b><\/h2>\n","3f7670cf":"<b>most of the players are tall !   <\/b>","94152dc4":"let's see the performance of S , Q , WC and LL in finals !","51393baa":"can we say that they are the the weakest players ? \n<li>grand slam winners : 5 <\/li>\n<li>grand slam finalist : 5 <\/li>\n<li>world number 1  : 1 <\/li>","c4c6cc08":"<li> if you have a good serve probably you are a good grass courts player  <\/li>\n<li>it's not easy to serve on clay courts <\/li>\n<li>matches are longer on clay and hard courts , so you have to be more patient<\/li>"}}