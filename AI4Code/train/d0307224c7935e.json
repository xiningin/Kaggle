{"cell_type":{"7670c120":"code","57cdd7cd":"code","cb09d814":"code","446d1da6":"code","c24af025":"code","2b4aa166":"code","36e5b8c5":"code","39a87400":"code","886cfa09":"code","3fa6f2c0":"code","79c42225":"code","92560856":"code","a3259160":"code","441bc07c":"code","f1dab19d":"code","fc4a3641":"code","6e58ca2a":"code","54247bbb":"code","44f3a138":"code","ca3ca5d1":"code","4d4f6261":"code","3162d2a4":"code","2bda26b8":"code","58b72928":"code","ca609b1b":"code","8ba6badc":"code","7cfc61c1":"code","88c489d7":"code","d0dc4cb6":"code","8ac0634a":"code","7727a80a":"code","f0095c25":"code","277556ec":"code","0d8745ed":"code","debed57a":"code","e49fa87c":"code","2f4c3a58":"code","01651e21":"code","5e1d7864":"code","1e9f799a":"code","db99d593":"code","680be91c":"code","ea26c574":"code","4d197125":"code","048801a6":"markdown","4cfb91b6":"markdown","ee9ccd49":"markdown","14575a2f":"markdown","f16937a1":"markdown","ed1f740a":"markdown","7fb087cc":"markdown","2c87e73c":"markdown","4c280506":"markdown","7293dcf6":"markdown","1b14bb5e":"markdown","b962f5a0":"markdown","914be51e":"markdown","b04ecd15":"markdown","0f06bab8":"markdown","c54a69e8":"markdown","0c7d1a51":"markdown","9a5eb233":"markdown"},"source":{"7670c120":"import os\nfrom typing import List\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\n\nfrom gensim.models import Word2Vec\n\nfrom tqdm import tqdm","57cdd7cd":"train = pd.read_csv('..\/input\/data-science-winter-osaka2\/train.csv')\ntest = pd.read_csv('..\/input\/data-science-winter-osaka2\/test.csv')","cb09d814":"train.head(10)","446d1da6":"type(train['popular_tags'][0])","c24af025":"def eval_data(row):\n    if row == row:\n        return eval(row)\n    else:\n        return np.nan\n\nfor column in ['popular_tags', 'categories', 'minimum_requirements', 'recommended_requirements']:\n    train[column] = train[column].apply(eval_data)\n    test[column] = test[column].apply(eval_data)","2b4aa166":"type(train['popular_tags'][0]), type(train['categories'][0]), type(train['minimum_requirements'][0]), type(train['recommended_requirements'][0])","36e5b8c5":"train.info()","39a87400":"train['release_date'].tail(50)","886cfa09":"train['description'].tolist()[0]","3fa6f2c0":"train['user_reviews'].hist()","79c42225":"#\u2605\u2605\u2605\u2605recommended,minimum_requirements\u306e{}\u3092NaN\u306b\u5909\u66f4\ntrain['recommended_requirements'] = train['recommended_requirements'].replace('{}', np.nan)\ntest['recommended_requirements'] = test['recommended_requirements'].replace('{}', np.nan)\ntrain['minimum_requirements'] = train['minimum_requirements'].replace('{}', np.nan)\ntest['minimum_requirements'] = test['minimum_requirements'].replace('{}', np.nan)","92560856":"#Starter\u306e\u307e\u307e\ntrain['is_train'] = True\ntest['user_reviews'] = np.nan\ntest['is_train'] = False\n\ndf = pd.concat([train, test], axis=0)\ndf = df.reset_index(drop=True)","a3259160":"#\u2605\u2605\u2605\u2605publisher,recommended,minimum_requirements\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306b\u3059\u308b\ndf['publisher'] = df['publisher'].astype(str)\ndf['minimum_requirements'] = df['minimum_requirements'].astype(str)\ndf['recommended_requirements'] = df['recommended_requirements'].astype(str)","441bc07c":"#\u2605\u2605\u2605\u2605'publisher','minimum_requirements','recommended_requirements'\u306eNaN\u306e\u6709\u7121\u3067\u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u3059\u308b\nconditions = [(df['publisher'] == 'nan') & (df['minimum_requirements'] == 'nan')& (df['recommended_requirements'] == 'nan'),\n             (df['publisher'] == 'nan') & (df['minimum_requirements'] == 'nan')& (df['recommended_requirements'] != 'nan'),\n             (df['publisher'] == 'nan') & (df['minimum_requirements'] != 'nan')& (df['recommended_requirements'] == 'nan'),\n             (df['publisher'] != 'nan') & (df['minimum_requirements'] == 'nan')& (df['recommended_requirements'] == 'nan'),\n             (df['publisher'] != 'nan') & (df['minimum_requirements'] != 'nan')& (df['recommended_requirements'] == 'nan'),\n             (df['publisher'] != 'nan') & (df['minimum_requirements'] == 'nan')& (df['recommended_requirements'] != 'nan'),\n             (df['publisher'] == 'nan') & (df['minimum_requirements'] != 'nan')& (df['recommended_requirements'] != 'nan')]\nchoices = ['0','1','2','3','4','5','6']\ndf['Unkown'] = np.select(conditions, choices, default = '9999')","f1dab19d":"#Starter\u306e\u307e\u307e\ndef category_numeric_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    # \u30bf\u30b0\u306e\u6570\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df['popular_tags_len'] = df['popular_tags'].fillna(\"\").apply(len)\n    df['categories_len'] = df['categories'].fillna(\"\").apply(len)\n    \n    # \u5024\u6bb5\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    df = price_preprocess(df)\n    \n    # developer\u3068publisher\u3092label encode\u3059\u308b\u3002\u2605\u2605\u2605\u2605'Unkown'\u3082label encode\u306b\u8ffd\u52a0\n    for column in ['developer', 'publisher','Unkown']:\n        df = apply_label_encode(df, column)\n    \n    # \u5e74\u306b\u3088\u3063\u3066\u8a55\u4fa1\u304c\u5909\u308f\u308b\uff1f\n    # \u6b63\u898f\u8868\u73fe\u3067\u5e74\u3092\u62bd\u51fa\u3059\u308b\u3002\n    df['year'] = df['release_date'].str.extract(r'(\\d{4})')\n    df['year'] = df['year'].astype(float)\n    return df\n\ndef price_preprocess(df: pd.DataFrame) -> pd.DataFrame:\n    df['price'] = df['price'].replace({'free':0})\n    price_null_index = df[df['price']==''].index\n    df.loc[price_null_index, 'price'] = -1\n    df['price'] = df['price'].astype(float)\n    return df\n\ndef apply_label_encode(df:pd.DataFrame, column:str)-> pd.DataFrame:\n    label_df = df[~df[column].isnull()]\n    le = LabelEncoder()\n    le_data = le.fit_transform(label_df[column])\n    label_df_index = label_df.index\n    df.loc[label_df_index, f'{column}_label_encoding'] = le_data\n    return df","fc4a3641":"#Starter\u306e\u307e\u307e\ndf = category_numeric_preprocess(df)","6e58ca2a":"#Starter\u306e\u307e\u307e\ndef tfidf_preprocess(df: pd.DataFrame, column: str, embedding_dim: int=20)-> pd.DataFrame:\n    # tfidf\u3067\u5909\u63db\u3057\u305f\u5f8c\u306b\u3001SVD\u3067\u6642\u9650\u524a\u6e1b\u3059\u308b\u3002\n    tfidf_vec = TfidfVectorizer(ngram_range=(1,2))\n    text_tfidf = tfidf_vec.fit_transform(df[column].fillna('').values.tolist())\n    svd = TruncatedSVD(n_components=embedding_dim, algorithm='arpack',random_state=9999)\n    return svd.fit_transform(text_tfidf)\n\nclass W2VSWEM(object):\n    def __init__(self, word_list: List[str], embedding_dim:int=20):\n        # word2vec\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u3001wrod2vec\u306e\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b\u3002\n        self.word_list = word_list\n        self.embedding_dim = embedding_dim\n        self.__validation_type()\n        self.__train_w2v()\n        \n    def __validation_type(self):\n        if isinstance(self.word_list, pd.Series):\n            self.word_list = self.word_list.tolist()\n        if not isinstance(self.word_list, list):\n            raise TypeError(f'you should use list object, however you are using {type(word_list)}.')\n        \n    #workers=1, seed=71\u3092\u8ffd\u52a0\u3057\u3066\u307e\u3059\n    def __train_w2v(self):\n        self.w2v_model = Word2Vec(self.word_list, vector_size=self.embedding_dim, workers=1, seed=71)\n        self.vocab = self.w2v_model.wv.key_to_index\n        \n    def _get_single_column_vec(self, words) -> np.array:\n        result = []\n        \n        for word in words:\n            if word in self.vocab:\n                \n                vector = self.w2v_model.wv[word]\n                result.append(vector)\n        result = np.array(result)\n        return result\n    \n    def get_result(self):\n        self.swem_result = np.zeros([len(self.word_list), self.embedding_dim])\n        for num, i in enumerate(self.word_list):\n            swem = self._get_single_column_vec(i)\n            if len(swem):\n                swem = np.mean(swem, axis=0)\n            else:\n                swem = np.zeros(self.embedding_dim)\n            self.swem_result[num, :] = swem    ","54247bbb":"# word2vec\u3067tags\u3092encode\u3059\u308b\n#Starter\u306e\u307e\u307e\ntags_df = []\nfor column in ['categories', 'popular_tags']:\n    df[column] = df[column].fillna('')\n    w2v_swem = W2VSWEM(df[column].tolist())\n    w2v_swem.get_result()\n    result = w2v_swem.swem_result\n    _df = pd.DataFrame(result, columns=[f'w2v_{column}_{x}' for x in range(result.shape[1])])\n    tags_df.append(_df)\ntags_df = pd.concat(tags_df, axis=1)","44f3a138":"#Starter\u306e\u307e\u307e\n# \u30b2\u30fc\u30e0\u306e\u8aac\u660e\u3092tfidf\u3067\u7279\u5fb4\u91cf\u306b\u3059\u308b\ntext_svd = tfidf_preprocess(df, 'description')\ntext_svd_df = pd.DataFrame(text_svd, columns=[f'text_svd_{x}' for x in range(text_svd.shape[1])])","ca3ca5d1":"# starter\u305d\u306e\u307e\u307e\nnlp_df = pd.concat([tags_df, text_svd_df], axis=1)","4d4f6261":"#\u2605\u2605\u2605\u2605\u884c\u30fb\u5217\u306e\u8868\u793a\u7bc4\u56f2\u3092\u62e1\u5927\u3057\u3001'Unkown_label_encoding'\u3092\u78ba\u8a8d\npd.set_option(\"display.max_columns\", 300)\npd.set_option(\"display.max_rows\", 300)\n\ndf.head(2)","3162d2a4":"#\u2605\u2605\u2605\u2605use_columns\u306b'Unkown_label_encoding'\u3092\u8ffd\u52a0\nuse_df = df.copy()\nuse_columns = ['name', 'price', 'popular_tags_len', 'categories_len', 'year', 'developer_label_encoding',\n               'publisher_label_encoding', 'user_reviews', 'is_train','Unkown_label_encoding']\nuse_df = use_df[use_columns]\n","2bda26b8":"use_df = pd.concat([use_df, nlp_df], axis=1)","58b72928":"#Groupby\u3067\u96c6\u7d04\u306e\u5143\u306b\u306a\u308b'year'\u30ab\u30e9\u30e0\u3092\u30ab\u30c6\u30b4\u30ea\u5909\u6570\uff08str\uff09\u306b\u3059\u308b\u3002\u6570\u5024\u5909\u6570\uff08float\uff09\u306e\u307e\u307e\u3060\u3068\u3067\u304d\u306a\u3044\n\nuse_df['year_str'] = use_df['year'].astype(object)","ca609b1b":"#Year\u6bce\u306e\u5e73\u5747\u4fa1\u683c\u306e\u7279\u5fb4\u91cf\u8ffd\u52a0\n#'mean'\u306e\u6240\u3092\u5909\u66f4\u3059\u308b\u3068\u69d8\u3005\u306a\u7279\u5fb4\u91cf\u306e\u96c6\u7d04\u30ab\u30e9\u30e0\u3092\u4f5c\u308c\u307e\u3059\u3002\u8907\u6570\u306e\u7279\u5fb4\u91cf\u304c\u8ffd\u52a0\u3067\u304d\u307e\u3059\n#'median'\u306f\u30e1\u30c7\u30a3\u30a2\u30f3\u3001'max'\u306f\u6700\u5927\u3001'min'\u306f\u6700\u5c0f\u3001'sum'\u306f\u5408\u8a08\u3001'std'\u306f\u6a19\u6e96\u504f\u5dee\u3001'var'\u306f\u5206\u6563\u3067\u3059\n\nuse_df['YearPriceMean'] = use_df.groupby(\"year_str\")[\"price\"].transform('mean')","8ba6badc":"#'year_str'\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001Drop\u3057\u3066\u304a\u304d\u307e\u3059\nuse_df = use_df.drop(columns=['year_str'])","7cfc61c1":"#\u4e00\u756a\u53f3\u306b\u3001'YearPriceMean'\u306e\u30ab\u30e9\u30e0\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\nuse_df.head(5)","88c489d7":"train = use_df[use_df['is_train']==True].reset_index(drop=True)\ntest =  use_df[use_df['is_train']!=True].reset_index(drop=True)","d0dc4cb6":"train = train.drop(columns=['is_train'])\ntest = test.drop(columns=['is_train', 'user_reviews'])","8ac0634a":"train.shape, test.shape","7727a80a":"X = train.copy().drop(columns='user_reviews')\ny = train['user_reviews']","f0095c25":"y = y.map({'c0':0, 'c1':1, 'c2':2})","277556ec":"train.head(10)","0d8745ed":"test.head(10)","debed57a":"from typing import Optional, List\n\nimport lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\n\nclass TreeModel:\n    \"\"\"LGB\/XGB\u306eAPI\u3092\u7d71\u4e00\u3057\u305fwrapper\"\"\"\n\n    def __init__(self, model_type: str):\n        self.model_type = model_type\n        self.trn_data = None\n        self.val_data = None\n        self.model = None\n\n    def train(self,\n              params: dict,\n              X_train: pd.DataFrame,\n              y_train: np.ndarray,\n              X_val: pd.DataFrame,\n              y_val: np.ndarray,\n              train_weight: Optional[np.ndarray] = None,\n              val_weight: Optional[np.ndarray] = None,\n              train_params: dict = {}):\n        if self.model_type == \"lgb\":\n            self.trn_data = lgb.Dataset(X_train, label=y_train, weight=train_weight)\n            self.val_data = lgb.Dataset(X_val, label=y_val, weight=val_weight)\n            self.model = lgb.train(params=params,\n                                   train_set=self.trn_data,\n                                   valid_sets=[self.trn_data, self.val_data],\n                                   **train_params)\n        elif self.model_type == \"xgb\":\n            self.trn_data = xgb.DMatrix(X_train, y_train, weight=train_weight, enable_categorical=True)\n            self.val_data = xgb.DMatrix(X_val, y_val, weight=val_weight, enable_categorical=True)\n            self.model = xgb.train(params=params,\n                                   dtrain=self.trn_data,\n                                   evals=[(self.trn_data, \"train\"), (self.val_data, \"val\")],\n                                   **train_params)\n        else:\n            raise NotImplementedError\n        return self.model\n\n    def predict(self, X: pd.DataFrame):\n        if self.model_type == \"lgb\":\n            return self.model.predict(X, num_iteration=self.model.best_iteration)  # type: ignore\n        elif self.model_type == \"xgb\":\n            X_DM = xgb.DMatrix(X)\n            return self.model.predict(X_DM)  # type: ignore\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_names_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_name()\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").keys())\n        else:\n            raise NotImplementedError\n\n    @property\n    def feature_importances_(self):\n        if self.model_type == \"lgb\":\n            return self.model.feature_importance(importance_type=\"gain\")\n        elif self.model_type == \"xgb\":\n            return list(self.model.get_score(importance_type=\"gain\").values())\n        else:\n            raise NotImplementedError","e49fa87c":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import log_loss\n\n\n\nfeature_importances = pd.DataFrame()\nscores=0.0\nnum_fold=5\noof = pd.DataFrame()\n    \nskf = StratifiedKFold(n_splits=num_fold, random_state=1213, shuffle=True)\nfor fold, (trn_idx, val_idx) in enumerate(skf.split(X, y)):\n    print(\"*\" * 100)\n    print(f\"Fold: {fold}\")\n\n    X_trn = X.iloc[trn_idx].drop(columns='name')\n    X_val = X.iloc[val_idx].drop(columns='name')\n    y_trn = y.iloc[trn_idx].reset_index(drop=True)\n    y_val = y.iloc[val_idx].reset_index(drop=True)\n        \n\n    model = TreeModel(model_type='lgb')\n    params = {\n                \"objective\": \"softmax\",\n                \"boosting\": \"gbdt\",\n                \"num_class\":3,\n                \"learning_rate\": 0.1,\n                \"seed\": 1213,\n                'metric': 'multi_logloss',\n                'num_leaves': 5,\n                'verbose': 1,\n                'lambda_l2': 3,\n            }\n    model.train(params=params,\n                X_train=X_trn,\n                y_train=y_trn.values.astype('float32'),\n                X_val=X_val,\n                y_val=y_val.values.astype('float32'),\n                train_params={\n                                \"num_boost_round\": 20000,\n                                \"early_stopping_rounds\": 100,\n                                \"verbose_eval\": 1000,\n                })\n    fi_tmp = pd.DataFrame()\n    fi_tmp[\"feature\"] = model.feature_names_\n    fi_tmp[\"importance\"] = model.feature_importances_\n    fi_tmp[\"fold\"] = fold\n    feature_importances = feature_importances.append(fi_tmp)\n\n    val_pred = model.predict(X_val)\n    score = log_loss(y_val, val_pred)\n    scores += score \/ num_fold\n\n    pred = model.predict(test.drop(columns='name'))\n    if fold == 0:\n        prediction = np.copy(pred) \/ num_fold\n    else:\n        prediction += pred \/ num_fold\n    print(f\"score: {score:.5f}\")\n    oof = oof.append(pd.DataFrame({\"name\": X.loc[val_idx, \"name\"], \"preds_c0\": val_pred[:, 0], \n                                   \"preds_c1\": val_pred[:, 1],\"preds_c2\": val_pred[:, 2]}))\nprint(f'average_score: {scores:.5f}')","2f4c3a58":"oof['prediction'] = np.argmax(np.array(oof.iloc[:, 1:]), axis=1)","01651e21":"from sklearn.metrics import accuracy_score\naccuracy_score(y, oof.sort_index()['prediction'])","5e1d7864":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\n\norder = list(feature_importances.groupby(\"feature\").mean().sort_values(\"importance\", ascending=False).index)\nplt.figure(figsize=(10, 30))\nsns.barplot(x=\"importance\", y=\"feature\", data=feature_importances, order=order)\nplt.title(f\"LGBM importance, average auc score {score}\")\nplt.tight_layout()","1e9f799a":"#\u4e88\u6e2c\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\u3057\u307e\u3059\nprediction","db99d593":"#\uff11\u884c\u306e3\u3064\u306e\u6570\u5b57\u304b\u3089\u4e00\u756a\u5927\u304d\u306a\u3082\u306e\u3092\u9078\u629e\ntest_prediction = np.argmax(prediction, axis=1)\n#DataFlame\u5f62\u5f0f\u306b\u5909\u3057\u307e\u3059\npred_df = pd.DataFrame(test_prediction) \n#\u305d\u306e\u7d50\u679c\u3067C0\u3001C1\u3001C2\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\npred_df = pred_df[0].map({0:'c0', 1:'c1', 2:'c2'})","680be91c":"pred_df","ea26c574":"sub = pd.read_csv('..\/input\/data-science-winter-osaka2\/sample_submission.csv')\nsub['user_reviews'] = pred_df.tolist()\nsub","4d197125":"sub.to_csv('submission.csv', index=False)","048801a6":"## \u30e2\u30c7\u30eb\u4f5c\u6210\naccuracy\u304cmetric\u3067\u3059\u304c\u3001\u4e88\u6e2c\u78ba\u7387\u3092\u51fa\u3057\u30665 fold\u306e\u5e73\u5747\u3092\u53d6\u308a\u305f\u3044\u306e\u3067\u3001log_loss\u3067\u30e2\u30c7\u30eb\u3092\u4e00\u5ea6\u4f5c\u6210\u3057\u307e\u3059\u3002","4cfb91b6":"description\u3082\u898b\u3066\u307f\u307e\u3059","ee9ccd49":"# \u2605\u2605\u2605\u2605\u3053\u3053\u307e\u3067","14575a2f":"call of duty\u306e\u8aac\u660e\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u8aac\u660e\u306e\u6587\u5b57\u5217\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001NLP\u306e\u524d\u51e6\u7406\u304c\u9069\u5fdc\u3067\u304d\u305d\u3046\u3067\u3059\u3002","f16937a1":"# Submisson file\u3092\u4f5c\u308b","ed1f740a":"\u6b20\u640d\u3057\u3066\u306a\u3044\u306e\u306f\u3001\u540d\u524d\u3068\u3001categories, \u753b\u50cf\u3001\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u307f\u3067\u3001\u305d\u308c\u4ee5\u5916\u306f\u6b20\u640d\u304c\u3042\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\nrelease_date\u306e\u6700\u5f8c\u306e\u65b9\u3092\u898b\u3066\u307f\u308b\u3068\u3001","7fb087cc":"\u5024\u6bb5\u3068publisher,\u5e74\u304c\u5927\u304d\u306a\u5f71\u97ff\u3092\u53ca\u307c\u3057\u3066\u3044\u307e\u3059\u3002","2c87e73c":"# \u5b66\u7fd2\u3055\u305b\u308b","4c280506":"target\u306e\u5206\u5e03\u3092\u898b\u3066\u307f\u307e\u3059","7293dcf6":"## CV\u306eaccuracy\u3092\u51fa\u3059","1b14bb5e":"\u4ee5\u4e0a\u3067\u30c7\u30fc\u30bf\u304c\u5143\u306e\u5f62\u3067\u8aad\u307f\u8fbc\u3081\u307e\u3057\u305f\u3002\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u304b\u3081\u307e\u3059\u3002","b962f5a0":"popular_tags\u3068categories\u3001minimum_requirements\u3001recommended_requirements\u306flist\u3068dict\u30c7\u30fc\u30bf\u3063\u307d\u3044\u3002","914be51e":"# \u2605\u2605\u2605\u2605\u6b20\u6e2c\u5024\u304c\u591a\u3044\u30ab\u30e9\u30e0\u306e\u6b20\u6e2c\u5024\u6709\u7121\u3092\u65b0\u898f\u7279\u5fb4\u91cf\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n## \u307e\u305a\u3001\u524d\u51e6\u7406\u3068\u3057\u3066\u6b20\u6e2c\u5024\u3068\u540c\u7b49\u306e\uff5b\uff5d\u3092nan\u306b\u3059\u308b","b04ecd15":"## \u8a00\u8a9e\u7cfb\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u308b","0f06bab8":"\u3068\u6587\u5b57\u5217\u306e\u307f\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u3084\u3001\u5927\u96d1\u628a\u306a\u5b63\u7bc0\u3001\u5e74\u306e\u307f\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u306a\u3069\u5168\u3066\u306b\u65e5\u4ed8\u304c\u5165\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002<br>\n\u65e5\u4ed8\u306b\u3064\u3044\u3066\u306f\u524d\u51e6\u7406\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<br>","c54a69e8":"\u65b0\u3057\u3044Unkow\u7279\u5fb4\u91cf\u3092\u3072\u3068\u307e\u305a\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u8ffd\u52a0\u3059\u308b","0c7d1a51":"# \u2605\u2605\u2605\u2605\u5370\u306e\u9593\u306fStarter with unkown feature\uff08\u65b0\u898f\uff09","9a5eb233":"\u5143\u3005list\u30c7\u30fc\u30bf\u3060\u3063\u305f\u306e\u304c\u3001csv\u306b\u3057\u305f\u3053\u3068\u3067\u6587\u5b57\u5217\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002<br>\n\u5143\u3005\u306e\u30c7\u30fc\u30bf\u306b\u623b\u3059\u305f\u3081\u306b\u3001eval\u95a2\u6570\u3092\u9069\u5fdc\u3057\u3066\u3044\u304d\u307e\u3059\u3002"}}