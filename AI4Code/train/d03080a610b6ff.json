{"cell_type":{"a7be4701":"code","75a0c178":"code","1939ef93":"code","969aaca0":"code","6aadf745":"code","1a966c8c":"code","38dcf621":"code","19f9ef01":"markdown","ca940e81":"markdown","fc7a1a63":"markdown","da383c8c":"markdown","9e2153bf":"markdown","a8b02dad":"markdown","dd191a47":"markdown"},"source":{"a7be4701":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75a0c178":"import tensorflow as tf\n\nmnist = tf.keras.datasets.fashion_mnist\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()","1939ef93":"import matplotlib.pyplot as plt\nplt.imshow(training_images[0])\nprint(training_labels[0])\nprint(training_images[0])","969aaca0":"training_images  = training_images \/ 255.0\ntest_images = test_images \/ 255.0","6aadf745":"model = tf.keras.models.Sequential([tf.keras.layers.Flatten(), \n                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), \n                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)]) # Here 10 represents the no. of classes we have in our dataset.\n                                                                                          # It is the corresponding no. given to each object in the dataset\n                                                                                          # There are two reasons for doing this: Firstly, computer is good with numbers and the second is biasing\n                                                                                          # If i would label it as ankle boot then it would be biased and won't learn anything new.\n","1a966c8c":"model.compile(optimizer = tf.keras.optimizers.Adam(),\n              loss = 'sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(training_images, training_labels, epochs=5)","38dcf621":"model.evaluate(test_images, test_labels)","19f9ef01":"Sequential: That defines a SEQUENCE of layers in the neural network\n\nFlatten: Remember earlier where our images were a square, when you printed them out? Flatten just takes that square and turns it into a 1 dimensional set.\n\nDense: Adds a layer of neurons\n\nEach layer of neurons need an activation function to tell them what to do. There's lots of options, but just use these for now.\n\nRelu effectively means \"If X>0 return X, else return 0\" -- so what it does it it only passes values 0 or greater to the next layer in the network.\n\nSoftmax takes a set of values, and effectively picks the biggest one, so, for example, if the output of the last layer looks like [0.1, 0.1, 0.05, 0.1, 9.5, 0.1, 0.05, 0.05, 0.05], it saves you from fishing through it looking for the biggest value, and turns it into [0,0,0,0,1,0,0,0,0] -- The goal is to save a lot of coding!\n","ca940e81":"*Once it's done training -- you should see an accuracy value at the end of the final epoch. It might look something like 0.8916. This tells you that your neural network is about 89% accurate in classifying the training data. I.E., it figured out a pattern match between the image and the labels that worked 91% of the time.*\n\n*But how would it work with unseen data? That's why we have the test images. We can call model.evaluate, and pass in the two sets, and it will report back the loss for each.*","fc7a1a63":"*You'll notice that all of the values in the number are between 0 and 255. If we are training a neural network, for various reasons it's easier if we treat all values as between 0 and 1, a process called 'normalizing'...and fortunately in Python it's easy to normalize a list like this without looping. You do it like this:*","da383c8c":"The next thing to do, now the model is defined, is to actually build it. You do this by compiling it with an optimizer and loss function as before -- and then you train it by calling *model.fit * asking it to fit your training data to your training labels -- i.e. have it figure out the relationship between the training data and its actual labels, so in future if you have data that looks like the training data, then it can make a prediction for what that data would look like. \n","9e2153bf":"*For me, that returned a accuracy of about .8812, which means it was about 88% accurate. Now, go ahead and try different combinations and let me know in the comment section if you have any problem because that's how an expert learns.BY TRYING!!! and don't forget to vote. THANK YOU!!*","a8b02dad":"*Calling load_data on this object will give you two sets of two lists, these will be the training and testing values for the graphics that contain the clothing items and their labels.*","dd191a47":"**Let's now design the model. There's quite a few new concepts here, but don't worry, you'll get the hang of them.**"}}