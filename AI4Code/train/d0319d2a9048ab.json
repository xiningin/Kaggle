{"cell_type":{"e8f96ce3":"code","77ad1ce5":"code","1fe1ce9b":"code","fd19e5e7":"code","ab6e76ca":"code","6c8ca988":"code","c4fd192c":"code","4a3f56d4":"code","bb88c3e9":"code","2fb88016":"code","a7debf9b":"code","85cbe94a":"code","4fdb2d5c":"code","eb368187":"code","ee302ba8":"code","6fce2170":"code","7f80787b":"code","08f43fe2":"code","8dfce904":"code","7f1d5a7d":"code","f966a84d":"code","2b696f12":"code","02167475":"code","a876d64c":"code","3675d44b":"markdown"},"source":{"e8f96ce3":"import numpy as np\nimport glob \nimport cv2\n\npath_1 = glob.glob(\"..\/input\/catanddog\/null\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(100,100))\n    cv_img.append(n)\narray1 = np.asarray(cv_img)\nprint(array1.shape)\n\npath_2 = glob.glob(\"..\/input\/catanddog\/training_set\/training_set\/dogs\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(100,100))\n    cv_img.append(n)\narray2 = np.asarray(cv_img)\nprint(array2.shape)","77ad1ce5":"import numpy as np\nimport glob \nimport cv2\n\npath_1 = glob.glob(\"..\/input\/catanddog\/test_set\/test_set\/cats\/*.jpg\")\ncv_img = []\nfor img in path_1:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(100,100))\n    cv_img.append(n)\narray3 = np.asarray(cv_img)\nprint(array3.shape)\n\npath_2 = glob.glob(\"..\/input\/catanddog\/test_set\/test_set\/dogs\/*.jpg\")\ncv_img = []\nfor img in path_2:\n    n = cv2.imread(img)\n    n=cv2.resize(n,(100,100))\n    cv_img.append(n)\narray4 = np.asarray(cv_img)\nprint(array4.shape)","1fe1ce9b":"Xtrain = np.concatenate((array1,array2))\nXtest = np.concatenate((array3,array4))\nXtrain.shape,Xtest.shape","fd19e5e7":"labels0 = np.zeros(len(array1))\nlabels1 = np.ones(len(array2))\nprint('Cat labels : ',labels0 ,'Dog labels: ',labels1)\nlen(labels0),len(labels1)","ab6e76ca":"labels0s = np.zeros(len(array3))\nlabels1s = np.ones(len(array4))\nprint('Cat labels : ',labels0s ,'Dog labels: ',labels1s)\nlen(labels0s),len(labels1s)","6c8ca988":"ytrain = np.concatenate((labels0,labels1))\nytest = np.concatenate((labels0s,labels1s))\nytrain.shape,ytest.shape","c4fd192c":"from sklearn.model_selection import train_test_split as tts\nX_train,X_valid,y_train,y_valid = tts(Xtrain,ytrain,test_size = 0.1,shuffle = True)\nX_train.shape,X_valid.shape,y_train.shape,y_valid.shape","4a3f56d4":"X_train_norm = X_train\/255\nX_valid_norm = X_valid\/255\nXtest_norm = Xtest\/255","bb88c3e9":"from keras import models,layers\nimport tensorflow as tf\n\ntf.random.set_seed(2)\ncnv_model = models.Sequential()\ncnv_model.add(layers.Conv2D(32,3,activation='relu',input_shape=(100,100,3)))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Conv2D(64,3,activation = 'relu'))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Flatten())\ncnv_model.add(layers.Dense(16,activation = 'relu'))\ncnv_model.add(layers.Dense(1,activation = 'sigmoid'))\ncnv_model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics=['acc'])\nmodel_history=cnv_model.fit(X_train_norm,y_train,epochs=10,validation_data=(X_valid_norm,y_valid),verbose=1)\nhist_dict =model_history.history","2fb88016":"cnv_model.evaluate(Xtest_norm,ytest)","a7debf9b":"import matplotlib.pyplot as plt\nimport numpy as np\n\nepochs = np.arange(len(hist_dict['acc']))\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training and Validation Accuracy Graph')\nplt.plot(epochs+1,hist_dict['acc'],label = 'Training Accuracy')\nplt.plot(epochs+1,hist_dict['val_acc'],label = 'Validation Accuracy')\nplt.legend(loc = 'best')","85cbe94a":"epochs = np.arange(len(hist_dict['loss']))\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Graph')\nplt.plot(epochs+1,hist_dict['loss'],label = 'Training Loss')\nplt.plot(epochs+1,hist_dict['val_loss'],label = 'Validation Loss')\nplt.legend(loc = 'best')","4fdb2d5c":"from keras import models,layers, regularizers\nimport tensorflow as tf\n\ntf.random.set_seed(2)\ncnv_model = models.Sequential()\ncnv_model.add(layers.Conv2D(32,3,activation='relu',input_shape=(100,100,3)))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Conv2D(64,3,activation = 'relu'))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Conv2D(128,3,activation = 'relu'))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Flatten())\ncnv_model.add(layers.Dense(16,activation = 'relu', kernel_regularizer = 'l2'))\n#cnv_model.add(layers.Dropout(0.25))\ncnv_model.add(layers.Dense(1,activation = 'sigmoid'))\ncnv_model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics=['acc'])\nmodel_history=cnv_model.fit(X_train_norm,y_train,epochs=20,validation_data=(X_valid_norm,y_valid),verbose=1)\nhist_dict =model_history.history","eb368187":"cnv_model.evaluate(Xtest_norm,ytest)","ee302ba8":"from sklearn.utils import shuffle\nXtrain_shuffled,ytrain_shuffled = shuffle(Xtrain,ytrain,random_state = 4)\nXtest_shuffled, ytest_shuffled = shuffle(Xtest, ytest, random_state = 4)","6fce2170":"Xtrain_norm_shf = Xtrain_shuffled\/255\nXtest_norm_shf = Xtest_shuffled\/255","7f80787b":"from sklearn.model_selection import KFold, cross_val_score\nfrom keras import layers,models,regularizers\nimport tensorflow as tf\n\ndef build_model():\n    tf.random.set_seed(2)\n    cnv_model = models.Sequential()\n    cnv_model.add(layers.Conv2D(32,3,activation='relu',input_shape=(100,100,3)))\n    cnv_model.add(layers.MaxPooling2D(3,3))\n    cnv_model.add(layers.Conv2D(64,3,activation = 'relu'))\n    cnv_model.add(layers.MaxPooling2D(3,3))\n    cnv_model.add(layers.Conv2D(128,3,activation = 'relu'))\n    cnv_model.add(layers.MaxPooling2D(3,3))\n    cnv_model.add(layers.Flatten())\n    cnv_model.add(layers.Dense(16,activation = 'relu', kernel_regularizer = 'l2'))\n    #cnv_model.add(layers.Dropout(0.25))\n    cnv_model.add(layers.Dense(1,activation = 'sigmoid'))\n    cnv_model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics=['acc'])\n    return cnv_model","08f43fe2":"from tensorflow.keras.wrappers.scikit_learn import KerasClassifier\nestimator = KerasClassifier(build_fn=build_model, epochs = 10, verbose =0)\nkfold = KFold(n_splits = 5)\nresults = cross_val_score(estimator,Xtrain_norm_shf,ytrain_shuffled,cv=kfold)\nprint(\"Accuracies per K-Fold\", results)\nresults.mean()","8dfce904":"from keras import models,layers\nimport tensorflow as tf\n\ntf.random.set_seed(2)\ncnv_model = models.Sequential()\ncnv_model.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(100,100,3)))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Conv2D(64,(3,3),activation = 'relu'))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Flatten())\ncnv_model.add(layers.Dense(16,activation = 'relu'))\ncnv_model.add(layers.Dense(1,activation = 'sigmoid'))\ncnv_model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics=['acc'])\nmodel_history=cnv_model.fit(X_train_norm,y_train,epochs=10,validation_data=(X_valid_norm,y_valid),verbose=1)\nhist_dict =model_history.history","7f1d5a7d":"cnv_model.evaluate(Xtest_norm,ytest)","f966a84d":"from keras import models,layers\nimport tensorflow as tf\n\ntf.random.set_seed(2)\ncnv_model = models.Sequential()\ncnv_model.add(layers.Conv2D(32,(5,5),activation='relu',input_shape=(100,100,3)))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Conv2D(64,(5,5),activation = 'relu'))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Flatten())\ncnv_model.add(layers.Dense(16,activation = 'relu'))\ncnv_model.add(layers.Dense(1,activation = 'sigmoid'))\ncnv_model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics=['acc'])\nmodel_history=cnv_model.fit(X_train_norm,y_train,epochs=10,validation_data=(X_valid_norm,y_valid),verbose=1)\nhist_dict =model_history.history","2b696f12":"cnv_model.evaluate(Xtest_norm,ytest)","02167475":"from keras import models,layers\nimport tensorflow as tf\n\ntf.random.set_seed(2)\ncnv_model = models.Sequential()\ncnv_model.add(layers.Conv2D(32,(7,7),activation='relu',input_shape=(100,100,3)))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Conv2D(64,(7,7),activation = 'relu'))\ncnv_model.add(layers.MaxPooling2D(3,3))\ncnv_model.add(layers.Flatten())\ncnv_model.add(layers.Dense(16,activation = 'relu'))\ncnv_model.add(layers.Dense(1,activation = 'sigmoid'))\ncnv_model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics=['acc'])\nmodel_history=cnv_model.fit(X_train_norm,y_train,epochs=10,validation_data=(X_valid_norm,y_valid),verbose=1)\nhist_dict =model_history.history","a876d64c":"cnv_model.evaluate(Xtest_norm,ytest)","3675d44b":"As we increase the filter size, the test accuracy decreases gradually because the filter skips certain part."}}