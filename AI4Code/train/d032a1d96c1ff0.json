{"cell_type":{"7681c493":"code","2145e0bd":"code","9a579c6b":"code","25ac271a":"code","442bb158":"code","e78c6871":"code","01aefda2":"code","8e76f188":"code","cb78fb38":"code","fe7357ab":"code","feae4d37":"code","5cbef623":"code","0e9418ec":"code","caaffd6c":"code","deae6bb6":"code","7d54673a":"code","c09100d2":"code","20e5f748":"code","c1ab375b":"code","7b102c16":"code","ee9132ee":"code","386ade90":"code","4b8a2ce8":"code","4584f6af":"code","6de4ea28":"markdown","6345ca7d":"markdown","64f95d52":"markdown","c7545a19":"markdown"},"source":{"7681c493":"#Importing essential packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Conv2D, Flatten, MaxPool2D\nfrom keras.optimizers import adam, RMSprop\nfrom keras.preprocessing.image import img_to_array, ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","2145e0bd":"#importing train & test Data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nsam_sub = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\ntrain[:1]","9a579c6b":"print(\"No. of Null value \",train.isnull().any().sum())\nprint(\"No. of Null value \",test.isnull().any().sum())\nprint(train.shape)\nprint(test.shape)\n#there is no null values","25ac271a":"#seperating features & target values\ny_train = train[\"label\"]\nx_train = train.drop(\"label\",axis=1)\ny_train[:1]","442bb158":"#target variable distribution\nsns.countplot(y_train)","e78c6871":"#scaling values to increase its speed\nscaler = StandardScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\ntest = scaler.transform(test)","01aefda2":"#reshaping\nx_train = x_train.reshape(-1,28,28,1)\ntest = test.reshape(-1,28,28,1)","8e76f188":"#viewing sample value\nplt.imshow(x_train[1][:,:,0])\nplt.title(y_train[1])","cb78fb38":"#converting target value into categorical array\nprint(y_train[:1])\ny_train = to_categorical(y_train,10)\ny_train[:1]","fe7357ab":"X_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train, test_size = 0.1, random_state=7)","feae4d37":"plt.imshow(X_train[0][:,:,0])\nplt.title(Y_train[0])","5cbef623":"model = Sequential()\nmodel.add(Conv2D(filters=44,kernel_size=(3,3),padding=\"same\",activation=\"relu\",input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=33,kernel_size=(3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(.21))\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(Conv2D(filters=55,kernel_size=(3,3),padding=\"same\",activation=\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(.21))\n\nmodel.add(Flatten())\nmodel.add(Dense(256,activation=\"relu\"))\nmodel.add(Dropout(.20))\nmodel.add(Dense(10,activation=\"softmax\"))","0e9418ec":"opt = RMSprop()\nopt1= adam()\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2,\n                              patience=4, min_lr=0.0001)","caaffd6c":"model.compile(optimizer=opt1,loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])","deae6bb6":"model.fit(X_train,Y_train,batch_size=25,epochs=30,callbacks=[reduce_lr])","7d54673a":"y_pred = model.predict(X_test)","c09100d2":"pred = np.argmax(y_pred,axis = 1) \ny_test = np.argmax(Y_test,axis = 1)","20e5f748":"confusion_matrix(pred,y_test)","c1ab375b":"tst_pred = model.predict(test)\npreds = np.argmax(tst_pred,axis = 1)","7b102c16":"rst = pd.DataFrame(preds,columns=[\"Label\"])\nrst[\"ImageId\"] = pd.Series(range(1,(len(preds)+1)))","ee9132ee":"sub = rst[[\"ImageId\",\"Label\"]]\nsub.shape","386ade90":"sub.to_csv(\"submission.csv\",index=False)","4b8a2ce8":"sam_sub[:4]","4584f6af":"sub[:4]","6de4ea28":"## Importing Packages & CSV","6345ca7d":"### Checking for null values","64f95d52":"# CNN - Beginner","c7545a19":"Model Used in NN\n* Activation function: \n\n  ReLu\n  \n  * ReLU is important because it does not saturate; the gradient is always high (equal to 1) if the neuron activates. As long as it is not a dead neuron, successive updates are fairly effective. ReLU is also very quick to evaluate. \n\n  Softmax\n\n  * The softmax activation function is used in neural networks when we want to build a multi-class classifier which solves the problem of assigning an instance to one class when the number of possible classes is larger than two.\n\n* Max Pooling\n\n  * Max pooling is a sample-based discretization process. The objective is to down-sample an input representation (image, hidden-layer output matrix, etc.), reducing its dimensionality and allowing for assumptions to be made about features contained in the sub-regions binned.\n\n* Padding\n\n  * Padding is a term relevant to convolutional neural networks as it refers to the amount of pixels added to an image when it is being processed by the kernel of a CNN. For example, if the padding in a CNN is set to zero, then every pixel value that is added will be of value zero."}}