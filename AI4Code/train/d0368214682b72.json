{"cell_type":{"7cc46118":"code","47af3376":"code","649c9a0a":"code","e1a0b434":"code","95d9c9e7":"code","0fe03934":"code","0c8362ed":"code","ffc5dd1d":"code","24e1eaca":"code","4b6ee2e6":"code","1d382a88":"code","84cb0f0a":"code","61d47b90":"code","2f163592":"code","fa0eee22":"code","ec5fc561":"code","1da2f503":"code","0f5e0476":"code","73774c5f":"code","ea0eaf78":"code","827675df":"code","32517c51":"code","8988ac67":"code","60702277":"code","ad118d9a":"code","76666548":"code","8b9c31e6":"code","3c0ed21c":"code","e3997e84":"code","ef49b581":"code","d0b5c865":"code","1da9dc66":"code","b2244330":"code","80c443e4":"code","64c5586c":"code","cd116d7d":"code","1e41f17f":"code","f0ba1a4d":"code","d32f0238":"code","1cde45f8":"code","410ac2d3":"code","bbdc68b1":"code","df33666f":"code","785e8150":"code","437ba531":"code","1cbb24af":"code","9be4de8c":"code","00f9a77e":"code","f101f39d":"code","76cbe9c2":"code","c8c7cf27":"code","61359c7d":"code","6191c231":"code","65a3e3f4":"code","1522d133":"code","450438c7":"code","4dd31e93":"code","15bafacc":"code","e0bdc3e1":"code","a7b3c3c3":"code","3f458bf4":"code","7b1fd8da":"code","df97c279":"code","8cd8b605":"code","9c420d79":"code","cc9bab8f":"code","91e77274":"code","96898c9e":"code","0c78446f":"code","1ddd6fc5":"code","2ee24e08":"markdown","32fe904c":"markdown","7aa17bd5":"markdown","1345a7da":"markdown","3621cdea":"markdown","e494ed15":"markdown","a6e03c96":"markdown","80a3244e":"markdown","35e482f5":"markdown","e734513b":"markdown","26cd407c":"markdown","6c345e16":"markdown","1981f926":"markdown","0d7632b6":"markdown","5092d06f":"markdown","7a405767":"markdown","cc303b7f":"markdown","cd23a336":"markdown","545ac74b":"markdown","0c2ef725":"markdown","ed9489ce":"markdown","41cca35e":"markdown","182a82ca":"markdown","3e7142c3":"markdown","51364c81":"markdown","4b95b872":"markdown","7b8dc864":"markdown","9f3fbba0":"markdown","5ebcb058":"markdown","617c928b":"markdown","da079c35":"markdown","2668b081":"markdown","b134bdb0":"markdown","39815638":"markdown","37bd1e2e":"markdown","fdb0d7c2":"markdown","798991ee":"markdown","3029d0c7":"markdown"},"source":{"7cc46118":"import numpy as np\nimport pandas as pd\n\npd.set_option('max_columns', 500)\npd.set_option('max_rows', 500)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.rc('font', family='NanumBarunGothic') \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom tqdm import tqdm_notebook\n\nfrom sklearn import preprocessing\nimport category_encoders as ce","47af3376":"path_house = \"..\/input\/house-prices-advanced-regression-techniques\/train.csv\"\ndf = pd.read_csv(path_house)\nprint(df.shape)\ndf.head()","649c9a0a":"df.describe()","e1a0b434":"df.describe(include=['O'])","95d9c9e7":"df.isnull().sum()[:10]","0fe03934":"df = pd.read_csv(path_house)\n\ncols=['Alley', 'PoolQC']\ndf = df.drop(cols, axis=1)","0c8362ed":"df = pd.read_csv(path_house)\ncol = [\"LotFrontage\"]\n\n#zero\ndf[col] = df[col].fillna(0)\n\n# mean\ndf[col] = df[col].fillna(df[col].mean())\n\n# median\ndf[col] = df[col].fillna(df[col].median())\n\n# min\ndf[col] = df[col].fillna(df[col].min())\n\n# max\ndf[col] = df[col].fillna(df[col].max())\n\n#freq(\ucd5c\ube48\uac12)\n# df[col] = df[col].fillna(df[col].mode()[0])","ffc5dd1d":"df = pd.read_csv(path_house)\ncol = [\"LotFrontage\"]\n\n# \ud3c9\uade0\uac12\ndf[col] = df[col].fillna(df.groupby('MSZoning')[col].transform('mean'))\n\n# \uc911\uc559\ndf[col] = df[col].fillna(df.groupby('MSZoning')[col].transform('median'))","24e1eaca":"df = pd.read_csv(path_house)\ncol = [\"LotFrontage\"]\n\n# \uc55e \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf[col] = df[col].fillna(method='ffill')\n\n# \ub4b7 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\ndf[col] = df[col].fillna(method='bfill')","4b6ee2e6":"# \uc2dc\uacc4\uc5f4\ub370\uc774\ud130\uc5d0\uc11c \uc120\ud615\uc73c\ub85c \ube44\ub840\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uacb0\uce21\uac12 \ubcf4\uac04\n\ndf = pd.read_csv(path_house)\n\ndf = df.interpolate() # method='values\ndf = df.interpolate(method='time') # \ub0a0\uc790\uae30\uc900\uc73c\ub85c \ubcf4\uac04\ndf = df.interpolate(method='values', limit=1) #\uc0ac\uc774\uc5d0 \uacb0\uce21\uce58\uac00 \uc5ec\ub7ec\uac1c \uc788\ub354\ub77c\ub3c4 \ud558\ub098\ub9cc \ucc44\uc6b0\uae30\ndf =df.interpolate(method='values', limit=1, limit_direction='backward') #\ubcf4\uac04 \ubc29\ud5a5 \uc124\uc815 \ub4a4\uc5d0\uc11c \uc55e\uc73c\ub85c","1d382a88":"from sklearn.impute import SimpleImputer\nimp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp_mean.fit([[7, 2, 3], [4, np.nan, 6], [10, 5, 9]])\n\nX = [[np.nan, 2, 3], [4, np.nan, 6], [10, np.nan, 9]]\nprint(imp_mean.transform(X))","84cb0f0a":"df = pd.read_csv(path_house)\nplt.scatter(x=df['GrLivArea'], y=df['SalePrice'])\nplt.xlabel('GrLivArea', fontsize=12)\nplt.ylabel('SalePrice', fontsize=12)","61d47b90":"outlier = df[(df['GrLivArea']>4000)&(df['SalePrice']<500000)].index\ndf=df.drop(outlier, axis=0)","2f163592":"df = pd.read_csv(path_house)\ndf.info()","fa0eee22":"df = pd.read_csv(path_house)\ncol = ['MSZoning']\ncols = ['MSZoning', 'Neighborhood']\n\n\n# Object -> Categorical\n\n# 1\uac1c \ubcc0\ud658\ndf[col] = df[col].astype('category')\n\n# \uc5ec\ub7ec\uac1c \ubcc0\ud658\nfor c in cols : \n    df[c] = df[c].astype('category') ","ec5fc561":"df.info()","1da2f503":"# \ub77c\ubca8 \uc778\ucf54\ub529 \nfrom sklearn.preprocessing import LabelEncoder\n\ndf = pd.read_csv(path_house)\ncols = ['SaleType', 'SaleCondition']\n\ndisplay(df[cols].head(1))\n\nfor col in tqdm_notebook(cols):\n    le = LabelEncoder()\n    df[col]=le.fit_transform(df[col])\n\ndisplay(df[cols].head(1))","0f5e0476":"# \uc6d0\ud56b \uc778\ucf54\ub529 \ndf = pd.read_csv(path_house)\ncols = ['SaleType', 'SaleCondition']\n\ndisplay(df.head(1))\n\ndf_oh = pd.get_dummies(df[cols])\ndf = pd.concat([df, df_oh], axis=1)\ndf = df.drop(cols, axis=1)\n\ndisplay(df.head(1))","73774c5f":"# !pip install category_encoders","ea0eaf78":"# \uce74\uc6b4\ud130 \uc778\ucf54\ub529\n\n\ndf = pd.read_csv(path_house)\ncol =['MSZoning']\n\ndisplay(df[col].head(1))\n\nfor col in tqdm_notebook(cols):\n    count_enc = ce.CountEncoder()\n    df[col]=count_enc.fit_transform(df[col])\n\ndisplay(df[col].head(1))","827675df":"def labelcount_encode(X, categorical_features, ascending=False):\n    print('LabelCount encoding: {}'.format(categorical_features))\n    X_ = pd.DataFrame()\n    for cat_feature in categorical_features:\n        cat_feature_value_counts = X[cat_feature].value_counts()\n        value_counts_list = cat_feature_value_counts.index.tolist()\n        if ascending:\n            # for ascending ordering\n            value_counts_range = list(\n                reversed(range(len(cat_feature_value_counts))))\n        else:\n            # for descending ordering\n            value_counts_range = list(range(len(cat_feature_value_counts)))\n        labelcount_dict = dict(zip(value_counts_list, value_counts_range))\n        X_[cat_feature] = X[cat_feature].map(\n            labelcount_dict)\n    X_ = X_.add_suffix('_labelcount_encoded')\n    if ascending:\n        X_ = X_.add_suffix('_ascending')\n    else:\n        X_ = X_.add_suffix('_descending')\n    X_ = X_.astype(np.uint32)\n    return X_","32517c51":"df = pd.read_csv(path_house)\ndf['LotArea'] = labelcount_encode(df, ['LotArea'])\ndf.head(3)","8988ac67":"df = pd.read_csv(path_house)\ny = df['LotArea']\nX = df['MSZoning']\nHashing_encoder = ce.HashingEncoder(cols = ['MSZoning'])\nHashing_encoder.fit_transform(X, y)","60702277":"df = pd.read_csv(path_house)\ny = df['LotArea']\nX = df['MSZoning']\nSum_encoder = ce.SumEncoder(cols = ['MSZoning'])\nSum_encoder.fit_transform(X, y)","ad118d9a":"df = pd.read_csv(path_house)\ny = df['LotArea']\nX = df['SaleCondition']\nce_target = ce.TargetEncoder(cols = ['SaleCondition'])\nce_target.fit(X, y)\nce_target.transform(X, y)","76666548":"# Standard Scaling (\ud3c9\uade0\uc744 0, \ubd84\uc0b0\uc744 1\ub85c \ubcc0\uacbd)\nfrom sklearn.preprocessing import StandardScaler\ndata = [[0, 0], [0, 0], [1, 1], [1, 1]]\nscaler = StandardScaler()\nprint(scaler.fit(data))\nprint(scaler.mean_)\nprint(scaler.transform(data))\nprint(scaler.transform([[2, 2]]))","8b9c31e6":"# MinMax Scaling 0\uacfc 1\uc0ac\uc774\nfrom sklearn.preprocessing import MinMaxScaler\ndata = [[-1, 2], [-0.5, 6], [0, 10], [1, 18]]\nscaler = MinMaxScaler()\nprint(scaler.fit(data))\nprint(scaler.data_max_)\nprint(scaler.transform(data))\nprint(scaler.transform([[2, 2]]))","3c0ed21c":"# Nomalization \uc815\uaddc\ud654\nfrom sklearn.preprocessing import Normalizer\nX = [[4, 1, 2, 2],\n     [1, 3, 9, 3],\n     [5, 7, 5, 1]]\ntransformer = Normalizer().fit(X)  # fit does nothing.\ntransformer\ntransformer.transform(X)","e3997e84":"# Standard\uc640 \uc720\uc0ac \ud558\ub098 \ud3c9\uade0\uacfc \ubd84\uc0b0 \ub300\uc2e0, median\uacfc quartile\uc744 \uc0ac\uc6a9\nfrom sklearn.preprocessing import RobustScaler\nX = [[ 1., -2.,  2.],\n     [ -2.,  1.,  3.],\n     [ 4.,  1., -2.]]\ntransformer = RobustScaler().fit(X)\ntransformer\ntransformer.transform(X)","ef49b581":"# Log Scaling\ndf = pd.read_csv(path_house)\ncol =['SalePrice']\ndisplay(df[col].head(3))\ndf[col].plot(kind='kde')\ndf[col] = np.log1p(df[col]) # \uc6d0\ubcf8 \uac12\ndf[col].plot(kind='kde')\n\ndisplay(df[col].head(3)) # \ub85c\uadf8 \uc2a4\ucf00\uc77c\n\ndisplay(np.expm1(df[col]).head(3)) # expm\uc73c\ub85c \ud658\uc6d0","d0b5c865":"# Quantile binning\ndf = pd.read_csv(path_house)\ncol =['LotArea']\n\nq = df[col].quantile([.1,.5,1])","1da9dc66":"df[col].describe()","b2244330":"q","80c443e4":"#\uc774\uc9c4\ud654 0 \ub610\ub294 1\n\ndf = pd.read_csv(path_house)\ncol =['LotArea']\n\nbinarizer = preprocessing.Binarizer(threshold=10000)\nb = binarizer.transform(df[col])\nb = pd.DataFrame(b)\ndisplay(df[col])\ndisplay(b)","64c5586c":"df = pd.DataFrame({'\uc77c\uc2dc':['2020.7.1 19:00',\n                   '2020.8.1 20:10',\n                   '2021.9.1 21:20',\n                   '2022.10.1 22:30',\n                   '2022.11.1 23:30',\n                   '2022.12.1 23:40',\n                   '2023.1.1 08:30']})\ndf","cd116d7d":"df.info()","1e41f17f":"# \ubb38\uc790\uc5f4\uc744 datetime \ud0c0\uc785\uc73c\ub85c \ubcc0\uacbd\ndf['\uc77c\uc2dc'] = df.\uc77c\uc2dc.apply(pd.to_datetime)","f0ba1a4d":"df.info()","d32f0238":"# s1\ndf = df.assign(\n               year=df.\uc77c\uc2dc.dt.year,\n               month=df.\uc77c\uc2dc.dt.month,\n               day=df.\uc77c\uc2dc.dt.day,\n               hour=df.\uc77c\uc2dc.dt.hour,\n               minute=df.\uc77c\uc2dc.dt.minute,\n    \n               quarter=df.\uc77c\uc2dc.dt.quarter,\n               weekday=df.\uc77c\uc2dc.dt.weekday,\n               weekofyear=df.\uc77c\uc2dc.dt.weekofyear,\n    \n               month_start=df.\uc77c\uc2dc.dt.is_month_start,\n               month_end=df.\uc77c\uc2dc.dt.is_month_end,\n               quarter_start=df.\uc77c\uc2dc.dt.is_quarter_start,\n               quarter_end=df.\uc77c\uc2dc.dt.is_quarter_end,\n    \n               daysinmonth=df.\uc77c\uc2dc.dt.daysinmonth\n               )","1cde45f8":"df.head(7)","410ac2d3":"# datetime \ud0c0\uc785\uc5d0\uc11c \ub144, \uc6d4, \uc77c, \uc2dc\uac04 \ucd94\ucd9c\n#2\ndf['year'] = df.\uc77c\uc2dc.apply(lambda x : x.year)\ndf['month'] = df.\uc77c\uc2dc.apply(lambda x : x.month)\ndf['day'] = df.\uc77c\uc2dc.apply(lambda x : x.day)\ndf['hour'] = df.\uc77c\uc2dc.apply(lambda x: x.hour)\ndf['minute'] = df.\uc77c\uc2dc.apply(lambda x: x.minute)\n\n#3\ndf['weekday'] = df['\uc77c\uc2dc'].dt.weekday\ndf['weekofyear'] = df[\"\uc77c\uc2dc\"].dt.weekofyear\ndf['quarter'] = df[\"\uc77c\uc2dc\"].dt.quarter","bbdc68b1":"# kaggle \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \ub0a0\uc528\ub85c \ub41c \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4! \npath_house = \"..\/input\/austin-weather\/austin_weather.csv\"\nw = pd.read_csv(path_house)\nw.head()","df33666f":"w.info()","785e8150":"w['Date'] = w['Date'].apply(pd.to_datetime)","437ba531":"w.info()","1cbb24af":"w.head(8)","9be4de8c":"df = pd.DataFrame({'date':['2013.12.22 19:00',\n                   '2013.12.23 20:10',\n                   '2013.12.24 21:20',\n                   '2013.12.25 22:30',\n                   '2013.12.26 23:30',\n                   '2013.12.27 23:40',\n                   '2013.12.28 08:30'], \n                   'name':['A',\n                   'B',\n                   'C',\n                   'D',\n                   'E',\n                   'F',\n                   'G']})\ndf['date'] = df.date.apply(pd.to_datetime)\ndf","00f9a77e":"df = df.assign(\n               year=df.date.dt.year,\n               month=df.date.dt.month,\n               day=df.date.dt.day\n               )\ndf.head()","f101f39d":"w = w.assign(\n               year=w.Date.dt.year,\n               month=w.Date.dt.month,\n               day=w.Date.dt.day\n               )\nw.head()","76cbe9c2":"df = pd.merge(df, w, how='left', on=['year','month','day'])\ndf.head()","c8c7cf27":"# house-prices-advanced-regression Data-set\ndf = pd.read_csv(path_house)\ndf.head()","61359c7d":"df.head()","6191c231":"# groupby \uc791\uc131\ubc951\ndf.groupby('MSZoning')['LotArea'].max()\ndf.groupby('MSZoning')['LotArea'].min()\ndf.groupby('MSZoning')['LotArea'].mean()\ndf.groupby(['MSZoning','LotShape'])['LotArea'].count()","65a3e3f4":"# groupby \uc791\uc131\ubc952\ndf_group = df.groupby('MSZoning')\ndf_group['LotArea'].max() ","1522d133":"# \ud53c\ucc98\uc0dd\uc131\ubc29\ubc951\ndf['new_max'] = df.groupby('MSZoning')['LotArea'].transform(lambda x: x.max())\ndf.head()","450438c7":"df_agg = pd.DataFrame()\ndf_agg =  df.groupby('MSZoning')['LotArea'].agg(['max', 'min', 'mean'])","4dd31e93":"# \ud53c\ucc98\uc0dd\uc131\ubc29\ubc952\ndf_all = pd.merge(df, df_agg, how='left', on=['MSZoning'])\ndf_all.head()","15bafacc":"# Real or Not? NLP with Disaster Tweets Data-set\ndf = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')","e0bdc3e1":"df.head(10)","a7b3c3c3":"df[\"length\"] = df[\"text\"].str.len()\ndf.head()","3f458bf4":"df[df['text'].str.contains('911')].head()","7b1fd8da":"df['k'] = 0\ndf.loc[df[df['text'].str.contains('emergency')].index,'k'] = 1\ndf.loc[df[df['text'].str.contains('help')].index,'k'] = 2\ndf.loc[df[df['text'].str.contains('accident')].index,'k'] = 3","df97c279":"df = pd.read_csv('..\/input\/sandp500\/all_stocks_5yr.csv')\nprint(df.shape)\ndf.head()","8cd8b605":"df = df[:300]","9c420d79":"df['ma5'] = df['close'].rolling(window=5).mean()\ndf['ma30'] = df['close'].rolling(window=30).mean()\ndf['ma60'] = df['close'].rolling(window=60).mean()\ndf.tail(6)","cc9bab8f":"plt.plot(df.index, df['ma5'], label = \"ma5\")\nplt.plot(df.index, df['ma30'], label = \"ma30\")\nplt.plot(df.index, df['ma60'], label = \"ma60\")\nplt.plot(df.index, df['close'], label='close')\nplt.legend()\nplt.grid()","91e77274":"# shift(-1) \ubc00\uc5b4\uc11c \ud53c\ucc98 \uc0dd\uc131\ndf['nextClose']= df['close'].shift(-1)\n\n# \uc8fc\uac00\ubcc0\ub3d9\ndf['fluctuation'] = df['nextClose'] - df['close']\ndf['f_rate'] = df['fluctuation'] \/ df['nextClose']\n\ndf.head()","96898c9e":"plt.figure(figsize=(10,6))\nplt.plot(df.index, df['f_rate'])\nplt.axhline(y=0, color='gray', ls = '-')","0c78446f":"# \ubd84\ud3ec \ndf['f_rate'].plot.hist()\n# df['f_rate'].plot.kde()","1ddd6fc5":"df['f_rate'].plot.kde()","2ee24e08":"### \ud2b9\uc815 \uceec\ub7fc\uc744 \uae30\uc900\uc73c\ub85c \ud3c9\uade0\uac12, \uc911\uc559\uac12","32fe904c":"### \uacb0\uce21\uce58 \uc0ad\uc81c","7aa17bd5":"### Target(Mean) encoding","1345a7da":"### \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ud559\uc2b5\ud55c \ub0b4\uc6a9 \uc815\ub9ac\n- \ubcf8 \ub178\ud2b8\ubd81\uc740 \uc9d1\uac12 \uc608\uce21 \ubfd0\uc544\ub2c8\ub77c \uc77c\ubc18\uc801\uc778 \ub370\uc774\ud130 \uc804\ucc98\ub9ac(\ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1)\uc744 \ub2e4\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n- \uc601\uc0c1\uc744 \ud568\uaed8 \ub9cc\ub4e4\uc5c8\uc73c\ub2c8 \ud568\uaed8 \ubcf4\uc2dc\uba74\uc11c \ud559\uc2b5\ud558\uc154\ub3c4 \ub429\ub2c8\ub2e4!","3621cdea":"# Shift","e494ed15":"### \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130: \uc55e\uc5d0 \uac12, \ub4a4\uc5d0 \uac12 \ucc44\uc6b0\uae30","a6e03c96":"### Sum Encoding","80a3244e":"# Weather Feature (join)\n - merge\ub97c \ud1b5\ud574 \uc678\ubd80\ub370\uc774\ud130 \ud569\uce58\uae30","35e482f5":"### RobustScaler","e734513b":"### LabelCount encoding (\ub7ad\ud0b9)","26cd407c":"### zero, mean, median, min, max, freq","6c345e16":"### Label encoding","1981f926":"# TEXT \uad00\ub828 \uac04\ub2e8\ud55c \ud53c\ucc98\uc0dd\uc131 (\ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1)\n- TEXT \uae38\uc774\ub85c \ud53c\ucc98 \uc0dd\uc131\ud558\uae30\n- \ud3ec\ud568\ub41c \ub2e8\uc5b4\ub97c \ucc3e\uc544 \ud53c\ucc98 \uc0dd\uc131\ud558\uae30","0d7632b6":"### \ud0a4\uc6cc\ub4dc(\ub2e8\uc5b4)","5092d06f":"### \uc774\uc9c4\ud654 (0 \ub610\ub294 1)","7a405767":"# Date Feature","cc303b7f":"### Hash encoding","cd23a336":"# Imputation \uacb0\uce21\uce58 \ucc98\ub9ac\n- \uacb0\uce21\uce58 \ud655\uc778\n- \uacb0\uce21\uce58 \uc0ad\uc81c\n- zero, mean, median, min, max, freq\n- groupby \ud65c\uc6a9: \ud2b9\uc815 \uceec\ub7fc\uc744 \uae30\uc900\uc73c\ub85c \ud3c9\uade0\uac12, \uc911\uc559\uac12\n- \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130: \uc55e\uc5d0 \uac12, \ub4a4\uc5d0 \uac12 \ucc44\uc6b0\uae30\n- \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130: \ubcf4\uac04\ubc95\n- sklearn.impute \ud65c\uc6a9","545ac74b":"### Log Scaling","0c2ef725":"### Onehot encoding","ed9489ce":"### Standard Scaling","41cca35e":"### \uc2dc\uac01\ud654","182a82ca":"### \uc774\ub3d9\ud3c9\uade0","3e7142c3":"### Quantile binning","51364c81":"### Count encoding","4b95b872":"### \uacb0\uce21\uce58 \ud655\uc778","7b8dc864":"# Data load & View (house-prices)","9f3fbba0":"### sklearn.impute \ud65c\uc6a9","5ebcb058":"# Moving Average: \uc774\ub3d9\ud3c9\uade0\n- \uc774\ub3d9\ud3c9\uade0 rolling(windows=x): \uc774\uc804 x\uac1c\uc758 \ud3c9\uade0\n- \uc774\ub3d9\ud3c9\uade0 \ud53c\ucc98 \uc0dd\uc131 \ud6c4, \uadf8\ub798\ud504 \uadf8\ub824\ubcf4\uae30","617c928b":"### \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130: \ubcf4\uac04\ubc95","da079c35":"### \ubb38\uc790\uc5f4 \uae38\uc774","2668b081":"# Group by (\ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1)\n - Group by\ub97c \ud1b5\ud574 \ud53c\ucc98\uc0dd\uc131\ud558\uae30","b134bdb0":"# Categorical Features(\ubc94\uc8fc\ud615)\n- Label encoding\n- Onehot encoding\n- Count encoding\n- LabelCount encoding (\ub7ad\ud0b9)\n- Hash encoding\n- Sum Encoding\n- Polynomial Encoder\n- Target(Mean) encoding","39815638":"# index\n\n## \uacb0\uce21\uce58 \n- [\uacb0\uce21\uce58 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/krvH9gdcXw0)\n- dataset-load : house-prices-advanced-regression-techniques\n- \uacb0\uce21\uce58 \ud655\uc778\n- \uacb0\uce21\uce58 \uc0ad\uc81c\n- zero, mean, median, min, max, freq\n- groupby \ud65c\uc6a9: \ud2b9\uc815 \uceec\ub7fc\uc744 \uae30\uc900\uc73c\ub85c \ud3c9\uade0\uac12, \uc911\uc559\uac12\n- \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130: \uc55e\uc5d0 \uac12, \ub4a4\uc5d0 \uac12 \ucc44\uc6b0\uae30\n- \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130: \ubcf4\uac04\ubc95\n- sklearn.impute \ud65c\uc6a9\n-----\n## \uc544\uc6c3\ub77c\uc774\uc5b4 \n- [\uc544\uc6c3\ub77c\uc774\uc5b4 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/5fr_DhUohyE)\n- \uac04\ub2e8\ud55c \uc544\uc6c3\ub77c\uc774\uc5b4 \uc81c\uac70\ubc95\n-----\n## Categorical Features \n- [\ubc94\uc8fc\ud615 \ubcc0\uc218 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/owUHKCcpda0)\n- Label encoding\n- Onehot encoding\n- Count encoding\n- LabelCount encoding (\ub7ad\ud0b9)\n- Hash encoding\n- Sum Encoding\n- Polynomial Encoder\n- Target(Mean) encoding\n-----\n## Numerical Features \n- [\uc218\uce58\ud615 \ubcc0\uc218 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/V5l0z3Uznlw)\n- Scaling\n    - Standard Scaling\n    - MinMax Scaling\n    - Nomalization\n    - Log Scaling\n- Binning\n    - Quantile\n    - \uc774\uc9c4\ud654\n-----\n## Date Feature \n- [\ub0a0\uc9dc\ud615 \ubcc0\uc218 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/VJFZ4kj6oWw)\n- \ub0a0\uc9dc \ub370\uc774\ud130 1\uac1c\ub85c 13\uac1c \ud53c\ucc98 \uc0dd\uc131\ud558\uae30\n\n\n-----\n## Weather Feature (join, merge)\n- [\ub0a0\uc528 \ubcc0\uc218 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/M_KLFxRTiTY)\n- dataset-load : austin-weather\n- \uc678\ubd80\ub370\uc774\ud130(\ub0a0\uc528)\ub97c \ubd88\ub7ec \uc628 \ub4a4 \ub0a0\uc9dc \uae30\uc900\uc73c\ub85c \ub370\uc774\ud130 \ud569\uce58\uae30\n\n\n-----\n## Group by (Feature Generation)\n- [Group by \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/p-b2OoFmstM)\n- Groupby \ud6c4 count, max, min, mean \ud53c\ucc98\uc0dd\uc131 \ubc29\ubc95 2\uac00\uc9c0 (transform, merge)\n\n-----\n## TEXT \uad00\ub828 \uac04\ub2e8\ud55c \ud53c\ucc98\uc0dd\uc131 (\ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1)\n\n- [TEXT\ub97c \ud1b5\ud574 \uac04\ub2e8\ud788 \ud53c\ucc98\uc0dd\uc131 \ubc29\ubc95 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/DTYREoDCyqY)\n- dataset-load : Real or Not? NLP with Disaster Tweets\n- TEXT \uae38\uc774\ub85c \ud53c\ucc98 \uc0dd\uc131\ud558\uae30\n- \ud3ec\ud568\ub41c \ub2e8\uc5b4\ub97c \ucc3e\uc544 \ud53c\ucc98 \uc0dd\uc131\ud558\uae30\n\n-----\n## Moving Average: \uc774\ub3d9\ud3c9\uade0 (\ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1)\n\n- [\uc774\ub3d9\ud3c9\uade0 \ud29c\ud1a0\ub9ac\uc5bc \uc601\uc0c1\ubcf4\uae30](https:\/\/youtu.be\/PNDe8pZXxVU)\n- dataset-load : S&P 500 stock data\n- \uc774\ub3d9\ud3c9\uade0 rolling(windows=x): \uc774\uc804 x\uac1c\uc758 \ud3c9\uade0\n- \uc774\ub3d9\ud3c9\uade0 \ud53c\ucc98 \uc0dd\uc131 \ud6c4, \uadf8\ub798\ud504 \uadf8\ub824\ubcf4\uae30\n- Shift, \ubc00\uc5b4\uc11c \ubcc0\ub3d9\ube44\uc728 \ud53c\ucc98 \uc0dd\uc131\n-----","37bd1e2e":"# Outlier(\uc544\uc6c3\ub77c\uc774\uc5b4)","fdb0d7c2":"### MinMax Scaling","798991ee":"### Nomalization","3029d0c7":"# Numerical Features\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.preprocessing\n\n- Scaling\n    - Standard Scaling\n    - MinMax Scaling\n    - Nomalization\n    - RobustScaler\n    - Log Scaling\n- Binning\n    - Quantile\n    - \uc774\uc9c4\ud654\n"}}