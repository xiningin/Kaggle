{"cell_type":{"8f2e4fd3":"code","2c63b7ef":"code","7bf5d81c":"code","d9354e1d":"code","698b49ac":"code","917c0bb3":"code","0228c80f":"code","8b305c83":"code","71fc4690":"code","d098edc4":"code","b6ea8094":"code","6a339757":"code","afd01435":"code","da08d9b7":"code","992e0176":"code","e86a5525":"code","4dd39d5e":"code","7701af8e":"code","a035871a":"code","35b8d48c":"markdown","7d985d68":"markdown","2d278842":"markdown","06116806":"markdown","66fad018":"markdown","b5ac80ca":"markdown","4d5b6351":"markdown","9930ccb5":"markdown"},"source":{"8f2e4fd3":"%%time\n\n# Refer to https:\/\/www.kaggle.com\/vinhnguyen\/gpu-acceleration-for-lightgbm and\n# https:\/\/medium.com\/@vipulgote4\/how-to-build-and-install-lightgbm-for-gpu-acceleration-2b53f0066c02\n\n!rm -r \/opt\/conda\/lib\/python3.6\/site-packages\/lightgbm\n!git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM","2c63b7ef":"%%time\n\n!apt-get update && apt-get install -y -qq libboost-all-dev","7bf5d81c":"%%time\n\n%%bash\ncd LightGBM && rm -rf build\nmkdir build && cd build\ncmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\nmake -j$(nproc)","d9354e1d":"%%time\n\n!cd LightGBM\/python-package\/;python3 setup.py install --precompile","698b49ac":"%%time\n\n!mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n!rm -r LightGBM","917c0bb3":"%%time\n\nimport os\nimport logging\nimport sys\nimport time\nfrom datetime import timedelta\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport gc\ngc.enable()\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.figure_factory as ff\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\n\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\nxgb.set_config(verbosity=0)\n\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier","0228c80f":"%%time\n\ndata_dir = \"..\/input\/tabular-playground-series-dec-2021\/\"\ncov_dir = \"..\/input\/forest-cover-type-dataset\/\"\n\ntrain  = pd.read_csv(data_dir  + \"train.csv\")\ntest = pd.read_csv(data_dir + \"test.csv\")\nsubmission = pd.read_csv(data_dir + \"sample_submission.csv\")\n\nTARGET = \"Cover_Type\"\nID = \"Id\"\n\n# Refer to https:\/\/www.kaggle.com\/lucamassaron\/baseline-lightgbm-with-covtype-augmentation\/notebook\ncovtype = pd.read_csv(cov_dir + \"covtype.csv\")\ncovtype[ID] = range(len(train), len(train)+len(covtype))\ncovtype = covtype[train.columns].set_index(ID)","8b305c83":"%%time\n\nprint(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape, end=\"\\n\\n\")","71fc4690":"train.head()","d098edc4":"test.head()","b6ea8094":"features = [col for col in train.columns if col not in (ID, TARGET)]\n\nprint(f\"Features ({len(features)}):\")\nfor feature in features:\n    print(feature, end=\", \")","6a339757":"%%time\n\n# Refer to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df, verbose=True):\n    numerics = [\"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print(\"Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)\".format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","afd01435":"%%time\n\ny = train.pop(TARGET)\nX = reduce_mem_usage(train.set_index(ID))\nX_test = reduce_mem_usage(test.set_index(ID))\n\n# Refer to # Refer to https:\/\/www.kaggle.com\/lucamassaron\/baseline-lightgbm-with-covtype-augmentation\/notebook\naug_X = reduce_mem_usage(covtype.loc[covtype[TARGET].isin([4, 5]), X.columns])\naug_y = covtype.loc[covtype[TARGET].isin([4, 5]), TARGET]\n\ndel train\ndel test\ndel covtype","da08d9b7":"%%time\n\ndef predict_with_model(model, verbose=True, splits=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    for fold, (idx_train, idx_valid) in enumerate(skf.split(X, y)):\n        start_time = time.monotonic()\n        \n        X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n        X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n        \n        valid_ids = X_valid.index.values.tolist()\n        \n        # Refer to https:\/\/www.kaggle.com\/lucamassaron\/baseline-lightgbm-with-covtype-augmentation\/notebook\n        X_train = X_train.append(aug_X)\n        y_train = np.concatenate([y_train, aug_y])\n        \n        fit_params = {\n            \"eval_set\": [(X_valid, y_valid)],\n            \"early_stopping_rounds\": 100,\n        }\n        if verbose:\n            # weird, but lightgbm doesn't like this param\n            fit_params[\"verbose\"] = 1000\n\n        model.fit(X_train, y_train, **fit_params)\n        valid_pred = model.predict(X_valid)\n        test_pred = model.predict(X_test)\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = accuracy_score(y_valid, valid_pred)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Fold {fold} | Accuracy: {score} | Took: {dur}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","992e0176":"%%time\n\ndef predict_with_models(models):\n    print(f\"Predicting with {len(models)} models...\", end=\"\\n\\n\")\n    for model_name, model in models:\n        start_time = time.monotonic()\n        \n        verbose = \"lgb\" not in model_name\n        \n        print(\"-\" * 50)\n        print(f\"Using {model_name} model...\")\n        test_preds, valid_preds, scores = predict_with_model(model, verbose=verbose)\n        print(f\"Score: {np.mean(scores)}, Std: {np.std(scores)}\", end=\"\\n\\n\")\n\n        print(\"Saving predictions...\")\n        valid_preds.columns = [ID, model_name]\n        valid_preds.to_csv(f\"{model_name}_train.csv\", index=False)\n\n        test_preds_df = pd.DataFrame({ID: submission[ID], model_name: test_preds})\n        test_preds_df.to_csv(f\"{model_name}_test.csv\", index=False)\n\n        sub = pd.DataFrame({ID: submission[ID], TARGET: test_preds.astype(int)})\n        sub.to_csv(f\"{model_name}_submission.csv\", index=False)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Took: {dur}\")","e86a5525":"%%time\n\nSEED = 42\n\nlgb1_params = {\n    \"random_state\": SEED,\n    \"n_estimators\": 1500,\n    \"objective\" : \"multiclass\",\n    \"verbose\": 0,\n    # gpu\n    \"device\": \"gpu\",\n    \"gpu_platform_id\": 0,\n    \"gpu_device_id\": 0,\n}\n\nxgb1_params = {\n    \"random_state\": SEED,\n    \"n_estimators\": 1500,\n    \"objective\":\"multi:softmax\",\n    \"booster\": \"gbtree\",\n    \"verbose\": 0,\n    # gpu\n    \"gpu_id\": 0,\n    \"tree_method\": \"gpu_hist\",\n    \"predictor\": \"gpu_predictor\"\n}\n\ncb1_params = {\n    \"random_seed\": SEED,\n    \"iterations\": 1500,\n    \"loss_function\": \"MultiClass\",\n    \"verbose\": 0,\n    # gpu\n    \"task_type\" : \"GPU\",\n    \"devices\" : \"0\",\n}\n\n# Model name must be unique\nmodels = [\n    (\"lgb1\", LGBMClassifier(**lgb1_params)),\n    (\"xgb1\", XGBClassifier(**xgb1_params)),\n    (\"cb1\", CatBoostClassifier(**cb1_params)),\n]","4dd39d5e":"%%time\n\npredict_with_models(models)","7701af8e":"def load_viz_data(submission_files):\n    dfs = []\n    for submission_file in submission_files:\n        df = pd.read_csv(submission_file)\n        dfs.append((submission_file, df))\n        \n    hist_data = []\n    for i in range(len(dfs)):\n        _, df = dfs[i]\n        hist_data.append(df[TARGET])\n        \n    return hist_data","a035871a":"%%time\n\nsubmission_files = [f\"{model_name}_submission.csv\" for (model_name, _) in models]\nviz_data = load_viz_data(submission_files)\n\nfig = ff.create_distplot(viz_data, submission_files, show_hist=False, show_rug=False)\nfig.show()","35b8d48c":"## Reduce memory usage","7d985d68":"## LightGBM with GPU support","2d278842":"## TPS Dec. 2021 - Baseline XGBM\/LGBM\/CB with GPU","06116806":"## Visualize","66fad018":"## Predict","b5ac80ca":"## Import libraries","4d5b6351":"## Load datasets","9930ccb5":"## Features"}}