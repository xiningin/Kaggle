{"cell_type":{"d9deaf2f":"code","27207ab9":"code","285df43a":"code","394bb49c":"code","a6e7a11f":"code","420e729e":"code","5b44f19f":"code","184a5d84":"code","465e6af9":"code","11e509e4":"code","f28b2c53":"code","bc4e6400":"code","66f43718":"code","b6563cc0":"code","5fb65b95":"markdown"},"source":{"d9deaf2f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error","27207ab9":"df = pd.read_csv('..\/input\/santa-train\/train_santa.csv')\n\n#df = pd.read_csv('..\/input\/santa-train\/train_santa-1.csv')\n\n#df=df.sample(frac=0.15, replace=False, random_state=1)\n\n#df = df[df['pulls'] > 2]\n\ny = df['target'].values\n\n#df['step'] = df['step'].multiply(.0001)\n\nX = df.drop(['target','step','opp_pull'],axis=1).values\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.05,random_state=42)\n\ndf","285df43a":"#Setup a regressor\nhyper_params = {\n    'task': 'train',\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    'metric': ['l2', 'auc'],\n    'learning_rate': 0.005,\n    'feature_fraction': 0.9,\n    'bagging_fraction': 0.7,\n    'bagging_freq': 10,\n    'verbose': 0,\n    \"max_depth\": 8,\n    \"num_leaves\": 128,  \n    \"max_bin\": 512,\n    \"num_iterations\": 100000,\n    \"n_estimators\": 1000\n}\n\n#reg = lgb.LGBMRegressor()\n\n#model=reg.fit(X_train, y_train)\n\n\n#reg = RandomForestRegressor()\nreg = GradientBoostingRegressor()\nmodel=reg.fit(X_train,y_train)\n\npred = model.predict(X_test)\n#Cost Function\nmse = mean_squared_error(y_test,pred)\nprint (reg.score(X_test,y_test))\nprint (mse)","394bb49c":"!pip install kaggle-environments --upgrade\n\nfrom kaggle_environments import make\n\n!mkdir \/kaggle_simulations\n!mkdir \/kaggle_simulations\/agent\n!mkdir \/kaggle_simulations\/agent\/saved_model","a6e7a11f":"# save the model to disk\nimport pickle\nfilename = '\/kaggle_simulations\/agent\/saved_model\/model.sav'\npickle.dump(model, open(filename, 'wb'))","420e729e":"%%writefile \/kaggle_simulations\/agent\/main.py\n\nimport math\nfrom scipy.stats import beta\nimport numpy as np\nimport random\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n\n# load the model from disk\nimport pickle\nfilename = '\/kaggle_simulations\/agent\/saved_model\/model.sav'\nloaded_model = pickle.load(open(filename, 'rb'))\n\ntotal_reward = 0\n\ndef ucb_agent(observation, configuration):    \n    global wins, pulls, opp_pull, last_bandit, total_reward, opp_bandit\n    \n    if observation.step == 0:\n        wins = [0] * configuration[\"banditCount\"]\n        \n        pulls = [0] * configuration[\"banditCount\"]\n        \n        opp_pull = [0] * configuration[\"banditCount\"]\n        \n        opp_bandit=[]\n        \n        chosen_bandit = random.randint(0,99)\n        last_bandit = chosen_bandit\n        \n        return int(chosen_bandit)\n    \n    if observation.step > 0:\n        \n        player = int(last_bandit == observation.lastActions[1])\n        \n        if player==0:\n            opponent=1\n        else:\n            opponent=0\n        \n        reward = observation.reward - total_reward\n        total_reward += reward\n        \n        if reward == 1:\n            wins[last_bandit] += 1\n        pulls[last_bandit] += 1\n        opp_pull[observation['lastActions'][opponent]] += 1\n        \n        #if observation.step < 500 and reward ==1:\n            #return last_bandit\n        \n        opp_bandit.append(observation['lastActions'][opponent])\n        #'''\n        if len(opp_bandit)>15 and observation.step < 1700:\n            length=len(opp_bandit)\n            if opp_bandit[length-1] == opp_bandit[length-2] and opp_bandit[length-1] != opp_bandit[length-15]:\n                last_bandit=opp_bandit[length-1]\n                return opp_bandit[length-1]\n        #'''\n        best_proba = -1\n        best_agent = None\n        dat=[]\n        for k in range(configuration[\"banditCount\"]):\n            to_append = wins[k],pulls[k]#,opp_pull[k],observation.step\n            dat.append(to_append)\n            \n        proba = loaded_model.predict(dat)\n        \n        chosen_bandit = int(np.argmax(proba))\n        #'''\n        \n        if observation.step <= 800:\n            N = 5\n            res = sorted(range(len(proba)), key = lambda sub: proba[sub])[-N:]\n            chosen_bandit=random.choice(res)\n            \n        #''' \n        last_bandit = int(chosen_bandit)\n        return int(chosen_bandit)","5b44f19f":"%%writefile bayesian_ucb.py\n\nimport numpy as np\nfrom scipy.stats import beta\n\npost_a, post_b, bandit = [None] * 3\ntotal_reward = 0\nc = 3\n\ndef agent(observation, configuration):\n    global total_reward, bandit, post_a, post_b, c\n\n    if observation.step == 0:\n        post_a, post_b = np.ones((2, configuration.banditCount))\n    else:\n        r = (observation.reward - total_reward)\n        total_reward = observation.reward\n        # Update Gaussian posterior\n        post_a[bandit] += r\n        post_b[bandit] += 1 - r\n    \n    bound = post_a \/ (post_a + post_b) + beta.std(post_a, post_b) * c\n    bandit = int(np.argmax(bound))\n    \n    return bandit","184a5d84":"%%writefile vegas_pull2.py\n\nimport numpy as np\nimport pandas as pd\nimport random, os, datetime, math\nfrom collections import defaultdict\n\ntotal_reward = 0\nbandit_dict = {}\n\ndef set_seed(my_seed=42):\n    os.environ['PYTHONHASHSEED'] = str(my_seed)\n    random.seed(my_seed)\n    np.random.seed(my_seed)\n\ndef get_next_bandit():\n    best_bandit = 0\n    best_bandit_expected = 0\n    for bnd in bandit_dict:\n        expect = (bandit_dict[bnd]['win'] - bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp'] - (bandit_dict[bnd]['opp']>0)*1.5 + bandit_dict[bnd]['op_continue']) \\\n                 \/ (bandit_dict[bnd]['win'] + bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp']) \\\n                * math.pow(0.97, bandit_dict[bnd]['win'] + bandit_dict[bnd]['loss'] + bandit_dict[bnd]['opp'])\n        if expect > best_bandit_expected:\n            best_bandit_expected = expect\n            best_bandit = bnd\n    return best_bandit\n\nmy_action_list = []\nop_action_list = []\n\nop_continue_cnt_dict = defaultdict(int)\n\ndef multi_armed_probabilities(observation, configuration):\n    global total_reward, bandit_dict\n\n    my_pull = random.randrange(configuration['banditCount'])\n    if 0 == observation['step']:\n        set_seed()\n        total_reward = 0\n        bandit_dict = {}\n        for i in range(configuration['banditCount']):\n            bandit_dict[i] = {'win': 1, 'loss': 0, 'opp': 0, 'my_continue': 0, 'op_continue': 0}\n    else:\n        last_reward = observation['reward'] - total_reward\n        total_reward = observation['reward']\n        \n        my_idx = observation['agentIndex']\n        my_last_action = observation['lastActions'][my_idx]\n        op_last_action = observation['lastActions'][1-my_idx]\n        \n        my_action_list.append(my_last_action)\n        op_action_list.append(op_last_action)\n        \n        if 0 < last_reward:\n            bandit_dict[my_last_action]['win'] = bandit_dict[my_last_action]['win'] +1\n        else:\n            bandit_dict[my_last_action]['loss'] = bandit_dict[my_last_action]['loss'] +1\n        bandit_dict[op_last_action]['opp'] = bandit_dict[op_last_action]['opp'] +1\n        \n        if observation['step'] >= 3:\n            if my_action_list[-1] == my_action_list[-2]:\n                bandit_dict[my_last_action]['my_continue'] += 1\n            else:\n                bandit_dict[my_last_action]['my_continue'] = 0\n            if op_action_list[-1] == op_action_list[-2]:\n                bandit_dict[op_last_action]['op_continue'] += 1\n            else:\n                bandit_dict[op_last_action]['op_continue'] = 0\n        \n        if last_reward > 0:\n            my_pull = my_last_action\n        else:\n            if observation['step'] >= 4:\n                if (my_action_list[-1] == my_action_list[-2]) and (my_action_list[-1] == my_action_list[-3]):\n                    if random.random() < 0.5:\n                        my_pull = my_action_list[-1]\n                    else:\n                        my_pull = get_next_bandit()\n                else:\n                    my_pull = get_next_bandit()\n            else:\n                my_pull = get_next_bandit()\n    \n    return my_pull","465e6af9":"def print_rounds(file1, file2, N=3):\n    env = make(\"mab\", debug=True)\n    p1_count=0\n    p2_count=0\n    print ('simulating...',N,'games')\n    for i in range(N):\n        game=env.run([file1, file2])\n        p1_score = env.steps[-1][0]['reward']\n        p2_score = env.steps[-1][1]['reward']\n        if p1_score>p2_score:\n            p1_count+=1\n        else:\n            p2_count+=1\n        env.reset()\n        z=i+1\n        #print(f\"Round {i+1}: {p1_score} - {p2_score}\")\n    print (p1_count,'for',z,round(p1_count\/z,3),'.vs',round(p2_count\/z,3))\n    print ('complete')\n    points_est1=[]\n    points_est2=[]\n    \n    for x in range(2000):\n        #print (game[x][1]['reward'])\n        z=x+1\n        points_est1.append(game[x][0]['reward']\/z)\n        points_est2.append(game[x][1]['reward']\/z)\n        \n    plt.plot(points_est1,label='test_bot')\n    plt.plot(points_est2, label='baseline')\n    plt.legend()\n    plt.show()\n    print (sum(points_est2)\/len(points_est2))\n    \n    #n=500\n    #chunked=[points_est2[i:i + n] for i in range(0, len(points_est2), n)]\n    #for i in range(len(chunked)):\n        #print (sum(chunked[i])\/len(chunked[i]))\n        #print(len(chunked[i]))\n        ","11e509e4":"env = make(\"mab\", debug=True)\nenv.run([\"\/kaggle_simulations\/agent\/main.py\", \"bayesian_ucb.py\"])\nenv.render(mode=\"ipython\", width=800, height=400)","f28b2c53":"env = make(\"mab\", debug=True)\nenv.run([\"\/kaggle_simulations\/agent\/main.py\", \"vegas_pull2.py\"])\nenv.render(mode=\"ipython\", width=800, height=400)","bc4e6400":"print('test bot vs bayesian_ucb')\nprint_rounds(\"\/kaggle_simulations\/agent\/main.py\", \"bayesian_ucb.py\")","66f43718":"print('test bot vs vegas_pull2')\nprint_rounds(\"\/kaggle_simulations\/agent\/main.py\", \"vegas_pull2.py\")","b6563cc0":"!cd \/kaggle_simulations\/agent && tar -czvf \/kaggle\/working\/submit.tar.gz main.py saved_model","5fb65b95":"This notebook loads a dataset and trains a gradient boosting regressor to use to predict the thresholds.  The notebook plays a UCB and the vegas pull 2 bot.  It is not a very good bot, but with some work could be.  Commit the note and submit the submit.tar.gz file - it has the notebook and the model in the file."}}