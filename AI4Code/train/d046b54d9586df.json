{"cell_type":{"0ed3732e":"code","44817ea3":"code","c0660a60":"code","1ad30273":"code","e82e91b1":"code","d0889f7a":"code","dcdf0d0e":"code","6ec0f2b5":"code","1b7f6aeb":"code","fd8455f4":"code","3f292e92":"code","c4807ac5":"code","e66c3abd":"code","5ed95749":"code","560ec359":"code","fcd7cad7":"code","b37c8dcf":"code","f20fcae7":"code","4c6962c5":"code","4217e8cb":"code","802cabcc":"code","a0ff869e":"code","35e12e77":"code","9ce03bb4":"code","de591fe1":"code","947be20b":"code","af69f874":"code","6412d9e4":"code","e6e1bf94":"code","c0569fac":"code","aeab330b":"code","77ce79fb":"code","f849d230":"code","07b3ecc4":"code","7f922721":"code","8d07ceef":"code","0a3c372b":"code","4da01f4d":"markdown"},"source":{"0ed3732e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","44817ea3":"from fastai.vision import *","c0660a60":"!unzip -q \/kaggle\/input\/tgs-salt-identification-challenge\/train.zip","1ad30273":"path_img = \"\/kaggle\/working\/images\"\npath_lbl = \"\/kaggle\/working\/masks\"","e82e91b1":"fnames = get_image_files(path_img)\nfnames[:3]","d0889f7a":"lbl_names = get_image_files(path_lbl)\nlbl_names[:3]","dcdf0d0e":"get_y_fn = lambda x: path_lbl + '\/'+ f'{x.stem}{x.suffix}'","6ec0f2b5":"# Function to get label masks is running fine\nx = fnames[0]       \nget_y_fn(x)","1b7f6aeb":"# Load an image\nimg_f = fnames[2]\nimg = open_image(img_f, div=True)\nimg.show(figsize=(5,5))\nprint(img.shape)","fd8455f4":"# Load corresponding masks\n\nmask = open_mask(get_y_fn(img_f))\nmask.show(figsize=(5,5), cmap='gray')\nprint(mask.shape)","3f292e92":"# Check the mask data\nmask.data","c4807ac5":"# Resize all the masks by dividing by 255 and replacing the original masks\nfor i in fnames:\n    mask = open_mask(get_y_fn(i), div=True)\n    mask.save(get_y_fn(i))","e66c3abd":"print(len(fnames))","5ed95749":"i = fnames[8]\nimg = open_image(i)\nimg.show()","560ec359":"\nmask = open_mask(get_y_fn(i))\nmask.show()","fcd7cad7":"mask.data","b37c8dcf":"bs = 4","f20fcae7":"data = (SegmentationItemList.from_folder(path_img)\n       .split_by_rand_pct(0.2)\n       .label_from_func(get_y_fn, classes = ['0','255'])\n       .transform(get_transforms(), tfm_y=True)\n       .databunch(bs = bs)\n       .normalize(imagenet_stats))","4c6962c5":"data.train_ds.x[1].data","4217e8cb":"data.train_ds.y[1].data","802cabcc":"data.show_batch(2, cmap='gray')     # Shows 2 rows and 2 cols","a0ff869e":"data.show_batch(2, figsize=(10,7), ds_type=DatasetType.Valid)   # Display valid data","35e12e77":"metrics = dice\nwd = 1e-2","9ce03bb4":"# learn.destroy()         # If you are reusing the same learner","de591fe1":"learn = unet_learner(data, models.resnet34, metrics=metrics, wd=wd)","947be20b":"learn.lr_find()                \nlearn.recorder.plot()","af69f874":"lr = 3e-4","6412d9e4":"learn.fit_one_cycle(5, slice(lr))","e6e1bf94":"learn.save('stage-1')\nlearn.load('stage-1');","c0569fac":"learn.show_results()  #rows=10, figsize=(8,9), cmap='Gray')","aeab330b":"learn.freeze_to??","77ce79fb":"learn.freeze_to(2)","f849d230":"lrs = slice(lr\/100, lr\/10)\nlrs","07b3ecc4":"learn.fit_one_cycle(3, lrs)","7f922721":"learn.show_results()","8d07ceef":"learn.summary()","0a3c372b":"learn.recorder.plot_losses()","4da01f4d":"After unfreezing the model gets worse. Tried multiple small lr, but it leads to overfitting."}}