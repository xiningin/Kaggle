{"cell_type":{"b32dd4c6":"code","0f9b8b10":"code","95a354c8":"code","93eac992":"code","bb9f8b96":"code","d6c85516":"markdown","1c0d7d97":"markdown","22a0ab13":"markdown","c6889d58":"markdown"},"source":{"b32dd4c6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib notebook\nimport PIL.Image as Image\nfrom PIL import ImageFilter\nfrom mpl_toolkits.mplot3d import Axes3D\n\nimport os\nimport glob","0f9b8b10":"rootFolder = '..\/input\/hrrfaced\/HRRFaceD\/'\nfacesClasses = sorted(glob.glob(rootFolder + '*'))\nfor f in facesClasses:\n    print(f)\n","95a354c8":"# 1 sample, 1 channel, width 180, height 180\ninputData = np.array([1, 180, 180], np.int16)\ncount = 0\nfor i in facesClasses:\n    count += 1\n    if count > 3:\n        break\n    trainFiles = glob.glob(i + '\/train\/*')\n    for img in trainFiles:\n        inImg = Image.open(img)\n        inImg = np.array(inImg)\n        inputData = np.append(inputData, inImg)\n# display the distribution of values\nplt.hist(inputData.reshape(-1), bins=100)\nplt.title('distribution of values 3d depth image')\nplt.annotate('background', xy=(50, 2000000), xytext=(200, 3000000),\n            arrowprops=dict(facecolor='blue'),\n            )\n        ","93eac992":"count = 0\nfor i in facesClasses:\n    trainFiles = sorted(glob.glob(i + '\/train\/*'))\n    testFiles = sorted(glob.glob(i + '\/test\/*'))\n    for img in trainFiles:\n        inImg = Image.open(img)\n        inImg = np.array(inImg)\n        # shift zero level for correct view\n        minDistance = np.median(inImg[(inImg > 500) & (inImg < 900)].reshape(-1))\n        faceStd = np.std(inImg[(inImg > 500) & (inImg < 900)].reshape(-1))\n        inImg[(inImg < 500) | (inImg > minDistance + faceStd * 2)] = minDistance\n        plt.matshow(inImg, cmap='plasma')\n        plt.colorbar()\n        plt.show()\n        count += 1\n        if count >= 3:\n            break\n    break","bb9f8b96":"def getData(subFolder):\n    data = np.empty([0, 180, 180], np.int16)\n    target = np.empty([0, 1], np.int16)\n    for fc in facesClasses:\n        trainFiles = sorted(glob.glob(fc + '\/' + subFolder + '*'))\n        trainDataBuff = np.empty([len(trainFiles), 180, 180], np.int16)\n        trainTargetBuff = np.empty([len(trainFiles), 1], np.int16)\n        for i, e in enumerate(testFiles):\n            inImg = Image.open(img)\n            inImg = np.array(inImg)\n            # shift zero level for correct view\n            minDistance = np.median(inImg[(inImg > 500) & (inImg < 900)].reshape(-1))\n            faceStd = np.std(inImg[(inImg > 500) & (inImg < 900)].reshape(-1))\n            inImg[(inImg < 500) | (inImg > minDistance + faceStd * 2)] = minDistance\n            trainDataBuff[i] = inImg\n            trainTargetBuff[i] = int(fc[-2:])\n        target = np.append(target, trainTargetBuff)\n        data = np.append(data, trainDataBuff, axis=0)\n\n    return [data, target]\n\nprint('load data...')\ntrainData, trainTarget = getData('train\/')\ntestData, testTarget = getData('test\/')\nprint('train data: {}'.format(trainData.shape))\nprint('train target: {}'.format(trainTarget.shape))\nprint('test data: {}'.format(testData.shape))\nprint('test target: {}'.format(testTarget.shape))\nprint('complete')","d6c85516":"## Generate database","1c0d7d97":"# Analysis input data\n## Show class folders","22a0ab13":"## Show 3d map and data normalization","c6889d58":"## Show distribution of values 3d depth image"}}