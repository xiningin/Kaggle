{"cell_type":{"39e356ec":"code","e5755224":"code","2ec5041f":"code","1c5b01d5":"code","4a67dc23":"code","35d834da":"code","d54187c9":"code","5a3bb4fd":"code","51b632a9":"code","dba2639b":"code","ab900868":"code","631201a0":"code","a2d188bf":"code","83d6dbdc":"code","da351e6d":"code","5620f419":"code","42669d26":"code","41396b4b":"code","b3c76b3a":"code","90accb8f":"code","5e3c3e69":"code","19b65869":"code","7cff6c81":"code","f54a8243":"code","bd4a8756":"code","bba4107e":"code","5901780b":"code","d6b17f28":"code","da623374":"code","f1149fc1":"code","9053fea0":"code","92d16a1b":"code","734c1d31":"code","13ed0b74":"code","45558fcc":"code","5c59cb92":"code","8dae16ce":"code","e4bcb7d1":"code","02eb2e76":"code","4c695be9":"code","3b45e1c0":"code","118a8ab8":"code","caccfab9":"code","678e9c23":"code","2e5ca0ce":"code","9f16133d":"code","743020cf":"code","973c7563":"code","c5ca162b":"code","15845d9b":"code","2e34f529":"code","f607fb62":"code","fb7b994d":"code","9db05723":"code","4839d4c0":"code","1b309721":"code","217ea114":"code","d6e4d346":"code","c1ed98cf":"code","29fe0759":"code","a614683c":"code","bdf69f5f":"code","059ce757":"code","1a04087c":"code","2e18391c":"code","dd7fcab3":"code","78e81b9f":"code","493fcc84":"code","dcaf2f68":"code","43545180":"code","df3be2b9":"code","6c2beb3e":"code","fe20c845":"code","0d788ba0":"code","58739f42":"code","a5c04e18":"code","0d443854":"code","5a445dd7":"code","9d21cffa":"code","e45e8946":"code","4f9e4676":"code","2d5c3684":"code","43147e7d":"code","33492ee3":"code","7ad266b9":"code","c179d008":"code","2e86be6a":"code","cead3aad":"code","110019d3":"markdown","b3eaf7c3":"markdown","b5bad93d":"markdown","642e47bc":"markdown","e46c0be6":"markdown","a8ef350f":"markdown","10a7b827":"markdown","33bee1d1":"markdown","60ba1d02":"markdown","82f14898":"markdown","4f2884ba":"markdown","4027eedf":"markdown","133641d1":"markdown","2db64681":"markdown","4d28e8c7":"markdown","82744995":"markdown","b488e6f1":"markdown","ac56c907":"markdown","0a63112d":"markdown","8ffd994c":"markdown","2f90c17a":"markdown","0b87f748":"markdown","1e5e0239":"markdown","b6a838cb":"markdown","53475520":"markdown","bc277b37":"markdown","0d33a32d":"markdown","f4292355":"markdown","cad5fb03":"markdown","2cb2569a":"markdown","8838ee5d":"markdown","e89548e0":"markdown","1dc6ab59":"markdown","ffcca27f":"markdown","237182e3":"markdown","99d717fb":"markdown","e7d8f210":"markdown","f3fd4316":"markdown","84736dc7":"markdown","581f0214":"markdown","70e6d791":"markdown","1a29aa5c":"markdown","e7de3946":"markdown","0bc08799":"markdown"},"source":{"39e356ec":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","e5755224":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","2ec5041f":"train_df.columns # csv dosya ba\u015fl\u0131klar\u0131n\u0131 g\u00f6steriyor.","1c5b01d5":"train_df.head() # csv dosya i\u00e7eri\u011fi","4a67dc23":"train_df.describe() # csv dosya i\u00e7erik ba\u015fl\u0131klar\u0131n\u0131n hesaplamas\u0131 yap\u0131lm\u0131\u015f i\u015flemler g\u00f6z\u00fck\u00fcyor.\n","35d834da":"train_df.info() # bu de\u011fi\u015fkenlerin csv dosya i\u00e7eri\u011fi ve detaylar\u0131n\u0131 sorgulad\u0131k","d54187c9":"def bar_plot(variable):\n\n    var = train_df[variable] # cinsiyet bilgisi \n    varValue = var.value_counts() # cinsiyetten ka\u00e7 tane var. Say\u0131 olarak \u00e7\u0131kt\u0131 verir.\n    \n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","5a3bb4fd":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","51b632a9":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","dba2639b":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","ab900868":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","631201a0":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","a2d188bf":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","83d6dbdc":"# Sibsp vs Survived (yan\u0131ndaki ki\u015fi say\u0131s\u0131 ile hayatta kalma)\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","da351e6d":"# Parch vs Survived (yan\u0131m\u0131zda ebebey veya \u00e7ocuk olursa hayatta kalma olas\u0131l\u0131\u011f\u0131)\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","5620f419":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices) #Counter ile ayn\u0131 verileri say\u0131sal olarak sayar. \n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2) \n    #e\u011fer benim veri setimdeki \u00f6rneklerde ikiden fazla outlayer varsa \u00e7\u0131karma i\u015flemi yap.\n    \n    return multiple_outliers","42669d26":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","41396b4b":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","b3c76b3a":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","90accb8f":"train_df.head()","5e3c3e69":"train_df.columns[train_df.isnull().any()] # train data frame i\u00e7inde hangi \u00f6zelliklerin i\u00e7inde onu tesppit ediyoruz","19b65869":"train_df.isnull().sum() # bu kod ile hangi \u00f6zelliklerin i\u00e7inde ka\u00e7 tane kay\u0131p veri var onu elde ettik. ","7cff6c81":"train_df[train_df[\"Embarked\"].isnull()] # sonuca g\u00f6re 62 ve 830 numaral\u0131 yolcunun nerden bindi\u011fini tespit edemedik. Miissing value tespit edildi.","f54a8243":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()\n\n# C, Q ve S lmanlar\u0131ndan binenlerin \u00f6dedikleri paray\u0131 inceledi\u011fimizde, ortalama de\u011fer bize C istasyonundan tespit edebiliyoruz. ","bd4a8756":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","bba4107e":"train_df[train_df[\"Fare\"].isnull()]\n# 1044 numaral\u0131 yolcunun hayatta kal\u0131p kalmad\u0131\u011f\u0131 bilinmiyor. \"Surviver\" = NaN\n# bu de\u011feri pclass 3 s\u0131n\u0131f k\u0131sm\u0131nda seyehat etmi\u015f, \n# Embarked verisine bakarak \n# pclass 3 olanlar\u0131 ald\u0131k: train_df[train_df[\"Pclass\"] == 3\n# pclass\u0131 3 olanalar\u0131n fare'sine bak\u0131yoruz. train_df[train_df[\"Pclass\"] == 3][\"Fare\"]\n# ve bunlar\u0131n ortalamas\u0131n\u0131 alacag\u0131z. np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"])\n# bu kod ile misssingler ortalam de\u011fer ile dolduruldu. train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\n","5901780b":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","d6b17f28":"train_df[train_df[\"Fare\"].isnull()]","da623374":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","f1149fc1":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","9053fea0":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","92d16a1b":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","734c1d31":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","13ed0b74":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","45558fcc":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","5c59cb92":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","8dae16ce":"train_df[train_df[\"Age\"].isnull()]","e4bcb7d1":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","02eb2e76":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","4c695be9":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","3b45e1c0":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]] # bu veriler string oldu\u011fu i\u00e7in \u00e7evirdik. ","118a8ab8":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","caccfab9":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","678e9c23":"train_df[train_df[\"Age\"].isnull()]","2e5ca0ce":"train_df[\"Name\"].head(10)","9f16133d":"name = train_df[\"Name\"]\n#train_df i\u00e7erisinde bulunan ilk 10 yolcunun isimlerini yazd\u0131rd\u0131k.\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","743020cf":"train_df[\"Title\"].head(10)","973c7563":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()\n#Tablo incelendi\u011finde 700 den fazla Mr, 350'den fazla Mrs var....","c5ca162b":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","15845d9b":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","2e34f529":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","f607fb62":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","fb7b994d":"train_df.head()","9db05723":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","4839d4c0":"train_df.head()\n# SibSp # Parch bu iki \u00f6zelli\u011fi al\u0131p family size isminde bir feture olu\u015fturaca\u011f\u0131z. insanlar\u0131n aileleri ile ilgili featureler.","1b309721":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1\n# +1 dememiz yolcunun kendisini temsil etmektedir. ","217ea114":"train_df.head()","d6e4d346":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()\n# survive ile Fsize aras\u0131ndaki ili\u015fki..","c1ed98cf":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","29fe0759":"train_df.head(10)","a614683c":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","bdf69f5f":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","059ce757":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","1a04087c":"train_df[\"Embarked\"].head()","2e18391c":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","dd7fcab3":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","78e81b9f":"train_df[\"Ticket\"].head(20)\n# yaz\u0131lar\u0131 ay\u0131r\u0131yoruz.","493fcc84":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]\n#\u00f6rnek deneme yap\u0131l\u0131yorz. Yaz\u0131l\u0131m i\u00e7inde ge\u00e7erli de\u011fildir. split ile bo\u015fluklar bulunur.sondaki say\u0131lar\u0131 ortadan kald\u0131raca\u011f\u0131z.","dcaf2f68":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","43545180":"train_df[\"Ticket\"].head(20)","df3be2b9":"train_df.head()","6c2beb3e":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10) # ticket i\u00e7indeki veriler ikategorik halden say\u0131sal verilere \u00e7evriyoruz. prefix = \"T\" T_..... \u015feklinde yeni featureler olu\u015fur. ","fe20c845":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show() # s\u0131n\u0131flardaki yolcular\u0131n say\u0131s\u0131n\u0131 g\u00f6steriyoruz.","0d788ba0":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","58739f42":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()\n# ","a5c04e18":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)\n# Makine \u00f6\u011frenmesi modelinde kullanmak istemedi\u011fimiz veriler ve featureler var. BUnlar\u0131 drop edece\u011fiz. PassengerId ve Cabin \u00e7\u0131kar\u0131yoruz.","0d443854":"train_df.columns","5a445dd7":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","9d21cffa":"train_df_len\n# train data fram\u0131n boyutudur.","e45e8946":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\n# ","4f9e4676":"test.head()","2d5c3684":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train)) #\nprint(\"X_test\",len(X_test)) # \nprint(\"y_train\",len(y_train)) #\nprint(\"y_test\",len(y_test)) #\nprint(\"test\",len(test)) #","43147e7d":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","33492ee3":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","7ad266b9":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","c179d008":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","2e86be6a":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","cead3aad":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)  # seri ismi tan\u0131mland\u0131..\nresults = pd.concat([test_PassengerId, test_survived],axis = 1) #\nresults.to_csv(\"titanic_sonuc.csv\", index = False) #","110019d3":"<a id = \"14\"><\/a><br>\n# Age -- Survived\nSurvived = yolcunun hayatta kal\u0131p kalmad\u0131\u011f\u0131n\u0131n verisidir. 1'se hayatta kal\u0131yor, 0'sa hayatta kalm\u0131yor.\nAge = bir yolcunun seyehat etti\u011fi s\u0131radaki ya\u015f bilgisidir.\n\nGrafikler \u00fczerinde g\u00f6steriliyorki \"Survived\" = 0.0 grafi\u011finde bize hayatta kalmayanlar\u0131n ya\u015f bilgisini, \"Survived\" = 1.0 grafi\u011finde ise bize hayatta kalanlar\u0131n ya\u015f bilgisini vermektedir. \n\n","b3eaf7c3":"train_df i\u00e7erisinde bulunan age feature'nin i\u00e7eri\u011finin tamam\u0131nda bulunan hatalar giderilmi\u015ftir.","b5bad93d":"<a id = \"3\"><\/a><br>\n# De\u011fi\u015fkenlerin csv dosya i\u00e7eri\u011fi ve detaylara g\u00f6re da\u011f\u0131l\u0131m\u0131 \n* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","642e47bc":"<a id = \"25\"><\/a><br>\n# Sex\n","e46c0be6":"Fsize artt\u0131kca hayatta kalma olas\u0131l\u0131\u011f\u0131 art\u0131yor... ","a8ef350f":"<a id = \"30\"><\/a><br>\n# Hyperparameter Tuning -- Grid Search -- Cross Validation\n\nHyperparameter Tuning i\u015flemi ile 5 farkl\u0131 makine \u00f6\u011frenmesi modeli kar\u015f\u0131la\u015ft\u0131r\u0131lacak. Bu modellerin i\u00e7erisinde bulunan en iyi parametreleri aray\u0131p bulacaz. Bu arama i\u015flemini Grid Search ile yapaca\u011f\u0131z. Buldu\u011fumuz parametrelerin en iyi de\u011ferlerini kar\u015f\u0131la\u015ft\u0131r\u0131rken Cross validation kullan\u0131lacak.\n\nDecision Tree\nSVM\nRandom Forest\nKNN\nLogistic Regression","10a7b827":"<a id = \"28\"><\/a><br>\n# Train - Test Split","33bee1d1":"<a id = \"13\"><\/a><br>\n# Pclass -- Survived\nSurvived = yolcunun hayatta kal\u0131p kalmad\u0131\u011f\u0131n\u0131n verisidir. 1'se hayatta kal\u0131yor, 0'sa hayatta kalm\u0131yor.\nPclass = bir yolcunun seyehat etti\u011fi s\u0131n\u0131flar\u0131 g\u00f6stermektedir. \nPclass \u00fczerinde 1 ile g\u00f6sterilen en pahal\u0131 s\u0131n\u0131f seyehat\u0131n\u0131 g\u00f6stermektedir. 2 orta ve 3 en d\u00fc\u015f\u00fck seyehat \u00fc\u00e7retini g\u00f6stermektedir. ","60ba1d02":"<a id = \"22\"><\/a><br>\n# Embarked\n","82f14898":"<a id = \"4\"><\/a><br>\n# Kategorik Veriler\nSurvived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n\n","4f2884ba":"<a id = \"26\"><\/a><br>\n# Drop Passenger ID and Cabin","4027eedf":"<a id = \"21\"><\/a><br>\n# Family Size \n","133641d1":"Kad\u0131nlar erkeklerden daha fazla hayatta kalm\u0131\u015flar..\nCinsiyet ve hayatta kalma birbirleriyle alakal\u0131d\u0131r. \n\nPclass ve embarked survived i\u00e7in bir ili\u015fkidir. Erkekler c liman\u0131nda hayatta kalma olas\u0131l\u0131klar\u0131 daha y\u00fcksek.","2db64681":"<a id = \"20\"><\/a><br>\n# Name -- Title\n","4d28e8c7":"<a id = \"18\"><\/a><br>\n# Fill Missing: Age Feature\n","82744995":"<a id = \"9\"><\/a><br>\n# G\u00f6rselle\u015ftirme","b488e6f1":"<a id = \"1\"><\/a><br>\n# Genel \u0130\u015flemler","ac56c907":"<a id = \"27\"><\/a><br>\n# Modeling","0a63112d":"<a id = \"19\"><\/a><br>\n# Feature Engineering\nyeni feature t\u00fcretme ve i\u015flemlerin tamam\u0131.","8ffd994c":"<a id = \"7\"><\/a><br>\n# Veri Setinden Modeli Bozan Verileri Tespit Etme\n","2f90c17a":"<a id = \"16\"><\/a><br>\n# Embarked -- Sex -- Pclass -- Survived\n\n","0b87f748":"<a id = \"17\"><\/a><br>\n# Embarked -- Sex -- Fare -- Survived","1e5e0239":"<a id = \"12\"><\/a><br>\n# Parch -- Survived\nSurvived = yolcunun hayatta kal\u0131p kalmad\u0131\u011f\u0131n\u0131n verisidir. 1'se hayatta kal\u0131yor, 0'sa hayatta kalm\u0131yor.\nParch = bir yolcunun sahip oldu\u011fu aile ve \u00e7ocuk say\u0131s\u0131d\u0131r. \n\n\u00c7\u0131kan grafikte de g\u00f6z\u00fckt\u00fc\u011f\u00fc \u00fczere;  parch de\u011feri 1,2 ve 3 olan ki\u015filerin hayatta kalma durumu 0,4,5,6,7,8, ki\u015filerine g\u00f6re daha fazla. bireysel veya \u00e7ok aileli 0,4,5,6,7,8, hayatta kalma \u00e7olas\u0131l\u0131\u011f\u0131 1,2,3 de\u011ferlerine g\u00f6re daha d\u00fc\u015f\u00fck.\nbu de\u011ferlendirme de \u00f6nemli olan 1,2 ve 3 numaral\u0131 bireylerin hayatta kalma olas\u0131l\u0131\u011f\u0131nda 3 numaral\u0131 parch de\u011ferine sahip olan bireylerin standanrt sapmas\u0131 daha y\u00fcksektir. \u00e7\u00fcnk\u00fc grafikler i\u00e7erisinde g\u00f6sterilen k\u0131rm\u0131z\u0131, ye\u015fil, sar\u0131, mavi ve kahve rengi bar s\u00fctunlar\u0131n ortas\u0131ndaki siyah renkli yukar\u0131 a\u015fa\u011f\u0131 i\u015faret en \u00e7ok hayatta kalacaklar\u0131n standart sapmadan dolay\u0131 3 numaral\u0131 bireylerin oldu\u011funu bizlere s\u00f6ylemektedir. ","b6a838cb":"Fare feature seems to have correlation with survived feature (0.26).\n\n","53475520":"# Giri\u015f\n\nBu \u00e7al\u0131\u015fma datai team payla\u015f\u0131m\u0131nda yola \u00e7\u0131karak Titanik gemi kazas\u0131 \u00fczerinde yap\u0131lan bir incelemedir. Ama\u00e7 edinilen konu ortaya \u00e7\u0131kar\u0131lacak modelin test verileri ile do\u011fru sonu\u00e7lar verip vermedi\u011fi kontrol edilecektir. A\u015fa\u011f\u0131da s\u0131ras\u0131yla bu i\u015flemler verilmi\u015ftir.\n\n<font color = 'blue'>\n\n1. [Genel \u0130\u015flemler](#1)\n2. [De\u011fi\u015fken A\u00e7\u0131klamas\u0131](#2)\n3. [De\u011fi\u015fkenlerin csv dosya i\u00e7eri\u011fi ve detaylara g\u00f6re da\u011f\u0131l\u0131m\u0131](#3)\n4. [Kategorik Veriler](#4) \n5. [Numerik Veriler](#5)\n6. [Veri Analizi](#6)\n7. [Veri Setinden Modeli Bozan Verileri Tespit Etme](#7)\n8. [Eksik\/Kay\u0131p Verileri Temizleme](#8)\n9. [G\u00f6rselle\u015ftirme](#9)\n10. [Korelasyon Matrisi](#10) ---------------------\n11. [SibSp -- Survived](#11)\n12. [Parch -- Survived](#12)\n13. [Pclass -- Survived](#13)\n14. [Age -- Survived](#14)\n15. [Pclass -- Survived -- Age](#15)\n16. [Embarked -- Sex -- Pclass -- Survived](#16)\n17. [Embarked -- Sex -- Fare -- Survived](#17)\n18. [Fill Missing: Age Feature](#18)\n19. [Feature Engineering](#19) --------------------\n20. [Name -- Title](#20)\n21. [Family Size](#21)\n22. [Embarked](#22)\n23. [Ticket](#23)\n24. [Pclass](#24)\n25. [Sex](#25)\n26. [Drop Passenger ID and Cabin](#26)\n27. [Modeling](#27) --------------------\n28. [Train - Test Split](#28)\n29. [Simple Logistic Regression](#29)\n30. [Hyperparameter Tuning -- Grid Search -- Cross Validation](#30)\n31. [Ensemble Modeling](#31)\n32. [Prediction and Submission](#32)\n\n","bc277b37":"<a id = \"31\"><\/a><br>\n# Ensemble Modeling\n\nVotingClassifier = survived etti\u011finin tahmninne dayal\u0131 olu\u015fturulan classifier (dt, rfc, lr) g\u00f6re sonu\u00e7lar\u0131n\u0131n tahminine dayal\u0131 bir tablosal i\u015flemdir. \nburada \u00f6nemli olan i\u015flem, Ayn\u0131 yolcu \u00fczerinde 3 classifiere g\u00f6re ya\u015fay\u0131p ya\u015famad\u0131\u011f\u0131n\u0131n bulunmas\u0131d\u0131r.  \n\nVoting parametresini hard olarak i\u015faretlersek ve sonu\u00e7lardan biri \"1\" ya\u015f\u0131yor \u015feklinde \u00e7\u0131kar, di\u011ferleri iki taneside \"0\" ya\u015fam\u0131yor \u015feklinde \u00e7\u0131karsa sonu\u00e7 olarak 2>1 diyerek o ki\u015fi i\u00e7in genel sonu\u00e7 ya\u015fam\u0131yor \u015feklinde \u00e7\u0131kar.  \n\nVotingClassifier parametresi soft yap\u0131l\u0131rsa; sonu\u00e7un 0 ve 1 \u00e7\u0131kma olas\u0131l\u0131klar\u0131n\u0131 ele al\u0131r. her sonucun ayr\u0131 ayr\u0131 0 ve 1 \u00e7\u0131kma olas\u0131l\u0131\u011f\u0131n\u0131 ele al\u0131nca ve 3 classifier'e g\u00f6re bu sonu\u00e7lar toplan\u0131r, bu toplam veriler \u00fczerinden bir kar\u015f\u0131la\u015ft\u0131rma yap\u0131l\u0131rsa, \u00e7\u0131kan sonuclardan hangisi b\u00fcy\u00fckse ya\u015fama tahmini ona g\u00f6re belirlenir. ","0d33a32d":"Embarked has 2 missing value\nFare has only 1","f4292355":"<a id = \"10\"><\/a><br>\n# Korelasyon Matrisi\n\nKaggle yar\u0131\u015fmalar\u0131nda en \u00f6nemli a\u015famalardan biri de\u011fi\u015fkenler aras\u0131ndaki korelasyonu anlamakt\u0131r. Bunu yapman\u0131n en kolay yolu Korelasyon Matrisinin g\u00f6rselle\u015ftirilmesidir.\n\nkovaryans: \u0130ki de\u011fi\u015fkenin ili\u015fkili olup olmad\u0131\u011f\u0131n\u0131 \u00f6\u011frenmenin en basit yolu bu iki de\u011fi\u015fkenin birbirlerine g\u00f6re de\u011fi\u015fimini g\u00f6steren kovaryans de\u011ferini hesaplamakt\u0131r.\n\nKovaryans\u0131 varyans form\u00fcl\u00fc: Bir de\u011fi\u015fkenin varyans\u0131 verinin aritmetik ortalamadan ortalama uzakl\u0131\u011f\u0131n\u0131 temsil eder.\n\nSibsp -- Parch -- Age -- Fare -- Survived\n","cad5fb03":"<a id = \"24\"><\/a><br>\n# Pclass","2cb2569a":"<a id = \"23\"><\/a><br>\n# Ticket","8838ee5d":"<a id = \"32\"><\/a><br>\n# Prediction and Submission","e89548e0":"Sat\u0131rlar\u0131m\u0131z Fare, \nBirinci S liman\u0131ndan binenler daha \u00e7ok para \u00f6deyenler, daha az para \u00f6deyenlere g\u00f6re hayatta kalma olas\u0131l\u0131klar\u0131 daha y\u00fcksek. \n\u0130kinci C liman\u0131ndan binenler daha \u00e7ok para \u00f6deyenler, daha az para \u00f6deyenlere g\u00f6re hayatta kalma olas\u0131l\u0131klar\u0131 daha y\u00fcksek. \n\u00dc\u00e7\u00fcnc\u00fc Q liman\u0131ndan binenler daha \u00e7ok para \u00f6deyenler, daha az para \u00f6deyenlere g\u00f6re e\u015fit bir ya\u015fam olas\u0131l\u0131\u011f\u0131 mevcuttur. \n\nLimanlar aras\u0131 en \u00e7ok ya\u015fam olas\u0131l\u0131\u011f\u0131 C, en az Q, orta S'dir. ","1dc6ab59":"<a id = \"11\"><\/a><br>\n# SibSp -- Survived\nSurvived = yolcunun hayatta kal\u0131p kalmad\u0131\u011f\u0131n\u0131n verisidir. 1'se hayatta kal\u0131yor, 0'sa hayatta kalm\u0131yor.\nSibSp = yolcunun sahip oldu\u011fu karde\u015f veya e\u015f say\u0131s\u0131d\u0131r. \n\n\u00c7\u0131kan grafikte de g\u00f6z\u00fckt\u00fc\u011f\u00fc \u00fczere;  SibSp de\u011feri iki ki\u015fiden fazla olunca Survived de\u011feri azal\u0131yor.\n*","ffcca27f":"<a id = \"5\"><\/a><br>\n# Numerik Veriler\nFare, age and passengerId\n\n","237182e3":"<a id = \"6\"><\/a><br>\n# Veri Analizi\n\nBu b\u00f6l\u00fcmde \u00f6zellik incelemesi g\u00f6rece\u011fiz. \n\u00d6ncelikle de\u011fi\u015fkenlerin \u00f6zelliklerini-feature bakacaz.\nbirbirleriyle olan ili\u015fkilerine bakaca\u011f\u0131z.\n\nPclass - Survived\nSex - Survived\nSibSp - Survived\nParch - Survived\n","99d717fb":"1. s\u0131n\u0131f yolcular 2. s\u0131n\u0131ftan, 2. s\u0131n\u0131f 3. s\u0131n\u0131ftan daha ya\u015fl\u0131d\u0131r.","e7d8f210":"<a id = \"8\"><\/a><br>\n# Eksik \/ Kay\u0131p Verileri Temizleme\nKay\u0131p veriler bulmadan \u00f6nce dataframe'leri birle\u015ftirmek gerekiyor. E\u011fitim i\u00e7n kullan\u0131lacak \"train_df\" ve test i\u00e7in kullan\u0131lacak \"test_df\"  her iki veri setininde i\u00e7eri\u011findeki bo\u015f,eksik veya kay\u0131p verileri temizlemezsek; e\u011fitim k\u00fcmesi i\u015flemi sonras\u0131nda test verilerinde hata al\u0131r\u0131z. veya test i\u00e7in olan verleri temizleyip e\u011fitim k\u00fcmesi i\u00e7indekileri temizlemezsek sistem her zaman hatal\u0131 i\u015flem yapacakt\u0131r. ","f3fd4316":"<a id = \"29\"><\/a><br>\n# Simple Logistic Regression","84736dc7":"\nCinsiyet ya\u015f tahmini i\u00e7in bilgilendirici de\u011fildir, ya\u015f da\u011f\u0131l\u0131m\u0131 ayn\u0131 g\u00f6r\u00fcnmektedir.","581f0214":"train_df i\u00e7erisinde bulunan age featurenin bo\u015fluklar\u0131 ve missing valueleri dolduraca\u011f\u0131z.\n","70e6d791":"<a id = \"2\"><\/a><br>\n## De\u011fi\u015fken A\u00e7\u0131klamas\u0131\n\n1. PassengerId: her yolcu i\u00e7in kimlik numaras\u0131\n1. Survived: yolcu hayatta kald\u0131 (1) ya da \u00f6ld\u00fc (0)\n1. Pclass: yolcu s\u0131n\u0131f\u0131\n1. Name: isim\n1. Sex: yolcu cinsyeti\n1. Age: yolcu ya\u015f\u0131\n1. SibSp: karde\u015f \/ e\u015f say\u0131s\u0131\n1. Parch: ebeveyn \/ \u00e7ocuk say\u0131s\u0131\n1. Ticket: Bilet numaras\u0131\n1. Fare: Bilete harcanan para miktar\u0131\n1. Cabin: Kabin Kategorisi\n1. Embarked: yolcunun bindi\u011fi liman (C = Cherbourg, Q = Queenstown, S = Southampton)","1a29aa5c":"K\u00fc\u00e7\u00fck ailelerin hayatta kalma \u015fans\u0131 b\u00fcy\u00fck ailelere g\u00f6re daha fazlad\u0131r.","e7de3946":"<a id = \"15\"><\/a><br>\n# Pclass -- Survived -- Age\n\ngrafik incelendi\u011finde x ekseninde ya\u015flar, \nsat\u0131rlarda ise Pclass de\u011ferleri mevcuttur. \nS\u00fct\u00fcnlarda ise Survived de\u011ferleri mevcuttur.\n","0bc08799":"# Plcass vs Survived \u00e7\u0131kan sonu\u00e7 de\u011ferlendirmesi\n\ndataframeden Pclass, Survived ald\u0131k. ve gruplad\u0131ktan sonra ve ortalama g\u00f6ster.sort_values ile azalan \u015fekilde s\u0131rala.\nolu\u015fan s\u0131ralamada g\u00f6r\u00fcld\u00fc ki, 1. s\u0131n\u0131f yolcular\u0131n hayatta kalma olas\u0131l\u0131\u011f\u0131 daha fazla. s\u0131n\u0131f d\u00fc\u015ft\u00fck\u00e7e hayatta kalma oran\u0131 d\u00fc\u015f\u00fcyor. "}}