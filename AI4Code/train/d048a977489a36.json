{"cell_type":{"7fee92dd":"code","2a0e4d40":"code","038851d6":"code","481b23ce":"code","9034f9cc":"code","50333a81":"code","869c808e":"code","082dafa0":"code","029866fc":"code","067f61cb":"code","eebc57dc":"code","9a123479":"code","9c776880":"code","a7234455":"code","d3272d1c":"code","2dc018e4":"code","b063b62e":"code","0d905159":"code","52efcdb2":"code","4264f964":"code","3d1e9d44":"code","9c2d6ec8":"code","71634653":"code","6afdf22b":"code","50292223":"code","4297406f":"code","aa14eb75":"code","943ead9d":"code","6cf63435":"code","82645c2b":"code","23d140df":"code","994cc971":"code","fa17aa06":"code","a2efbdf4":"code","c38cc41d":"code","4b7c9ee2":"code","391656ee":"code","4b52985d":"code","e822d0d8":"code","ecb650b2":"code","e492eaa8":"code","eb8301a7":"code","75dee4fe":"code","dcb4b062":"code","a20c1bb0":"code","89c3c44b":"code","7969a61d":"code","8eee9b8e":"code","6d330273":"code","b63c0348":"code","522a15db":"markdown","87da6b61":"markdown","d6fb1ba2":"markdown","68871d3f":"markdown","6d5c5af6":"markdown","729b18a9":"markdown","6a116ae4":"markdown","433d1df8":"markdown","bfc1e68f":"markdown","04ff1ffb":"markdown","db1ae27e":"markdown","1bf61e9b":"markdown","3dcf1228":"markdown","0ee6844c":"markdown","2763ec6e":"markdown","f39ca2e8":"markdown","a9ccfefd":"markdown","202cde0e":"markdown","4ee561f4":"markdown","3deb6a64":"markdown","f7d4b552":"markdown","97be5c30":"markdown","1fa964c9":"markdown","4a63deaa":"markdown","91ea4c72":"markdown"},"source":{"7fee92dd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\n\n%matplotlib inline","2a0e4d40":"df_train = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ndf_test = pd.read_csv('..\/input\/used-cars-price-prediction\/test-data.csv')","038851d6":"df_train_orig = df_train.copy()\ndf_test_orig = df_test.copy()","481b23ce":"print(\"Skew \", df_train['Price'].skew())\nprint(\"kurt \", df_train['Price'].kurt())","9034f9cc":"#A trial to check log of target label to avoid skew & kurt\ndf_test1 = np.log1p(df_train['Price'].values)","50333a81":"df_test1 = df_test1.reshape(-1,1)\ndf_test1 = pd.DataFrame(df_test1, columns=['PriceNew'])","869c808e":"print(\"Skew \", df_test1['PriceNew'].skew())\nprint(\"kurt \", df_test1['PriceNew'].kurt())","082dafa0":"df_train.head()","029866fc":"df_test.sample(5)","067f61cb":"print(df_train.shape)\nprint(df_test.shape)","eebc57dc":"df_test.info()","9a123479":"df_train.describe()","9c776880":"miss_percent = (df_train.isnull().sum() \/ len(df_train)) * 100\nmissing = pd.DataFrame({\"percent\":miss_percent, 'count':df_train.isnull().sum()}).sort_values(by=\"percent\", ascending=False)\nmissing.loc[missing['percent'] > 0]","a7234455":"miss_percent = (df_test.isnull().sum() \/ len(df_test)) * 100\nmissing = pd.DataFrame({\"percent\":miss_percent, 'count':df_test.isnull().sum()}).sort_values(by=\"percent\", ascending=False)\nmissing.loc[missing['percent'] > 0]","d3272d1c":"df_train.drop(df_train.columns[0], axis=1, inplace=True)\ndf_test.drop(df_test.columns[0], axis=1, inplace=True)","2dc018e4":"df_train['brand_name'] = df_train['Name'].apply(lambda x: str(x).split(\" \")[0])\ndf_test['brand_name'] = df_test['Name'].apply(lambda x: str(x).split(\" \")[0])","b063b62e":"df_train.drop(columns=[\"Name\"], axis=1, inplace=True)\ndf_test.drop(columns=[\"Name\"], axis=1, inplace=True)","0d905159":"#df_train.loc[df_train['brand_name'] == 'Maruti']['Seats'].mode()[0]\ndef fill_na_with_mode(ds, brandname):\n  fill_value = ds.loc[ds['brand_name'] == brandname]['Seats'].mode()[0]\n  condit = ((ds['brand_name'] == brandname) & (ds['Seats'].isnull()))\n  ds.loc[condit, 'Seats'] = ds.loc[condit, 'Seats'].fillna(fill_value)","52efcdb2":"car_brand = ['Maruti','Hyundai','BMW','Fiat','Land','Ford','Toyota','Honda','Skoda','Mahindra']\nfor c in car_brand:\n  fill_na_with_mode(df_train, c)\n  fill_na_with_mode(df_test, c)","4264f964":"import re\n\ndf_train['Mileage_upd'] = df_train['Mileage'].apply(lambda x: re.sub(r'(\\d+\\.\\d+)\\s(kmpl|km\\\/kg)', r'\\1', str(x)))\ndf_train['Engine_upd'] = df_train['Engine'].apply(lambda x: re.sub(r'(\\d+)\\s(CC)', r'\\1', str(x)))\ndf_train['Power_upd'] = df_train['Power'].apply(lambda x: re.sub(r'(\\d+\\.?\\d+?)\\s(bhp)', r'\\1', str(x)))\n\ndf_test['Mileage_upd'] = df_test['Mileage'].apply(lambda x: re.sub(r'(\\d+\\.\\d+)\\s(kmpl|km\\\/kg)', r'\\1', str(x)))\ndf_test['Engine_upd'] = df_test['Engine'].apply(lambda x: re.sub(r'(\\d+)\\s(CC)', r'\\1', str(x)))\ndf_test['Power_upd'] = df_test['Power'].apply(lambda x: re.sub(r'(\\d+\\.?\\d+?)\\s(bhp)', r'\\1', str(x)))","3d1e9d44":"df_train['Mileage_upd'] = pd.to_numeric(df_train['Mileage_upd'], errors='coerce')\ndf_train['Engine_upd'] = pd.to_numeric(df_train['Engine_upd'], errors='coerce')\ndf_train['Power_upd'] = pd.to_numeric(df_train['Power_upd'], errors='coerce')\n\ndf_test['Mileage_upd'] = pd.to_numeric(df_test['Mileage_upd'], errors='coerce')\ndf_test['Engine_upd'] = pd.to_numeric(df_test['Engine_upd'], errors='coerce')\ndf_test['Power_upd'] = pd.to_numeric(df_test['Power_upd'], errors='coerce')","9c2d6ec8":"df_train.drop(columns=['Mileage', 'Engine', 'Power'], inplace=True)\ndf_test.drop(columns=['Mileage', 'Engine', 'Power'], inplace=True)","71634653":"df_train.drop(df_train[df_train['brand_name'] == 'Smart'].index, axis=0, inplace=True)\ndf_test.drop(df_test[df_test['brand_name'] == 'Hindustan'].index, axis=0, inplace=True)","6afdf22b":"#Function to replace na value with mode of that specific brand\ndef fill_na_with_mode(ds, brandname, colname):\n  fill_value = ds.loc[ds['brand_name'] == brandname][colname].mode()[0]\n  condit = ((ds['brand_name'] == brandname) & (ds[colname].isnull()))\n  ds.loc[condit, colname] = ds.loc[condit, colname].fillna(fill_value)","50292223":"miss_Mileage_col = df_train.loc[df_train['Mileage_upd'].isnull()]['brand_name'].unique()\nmiss_Engine_col = df_train.loc[df_train['Engine_upd'].isnull()]['brand_name'].unique()\nmiss_Power_col = df_train.loc[df_train['Power_upd'].isnull()]['brand_name'].unique()\n\nfor x in miss_Mileage_col:\n  fill_na_with_mode(df_train, x, 'Mileage_upd')\nfor y in miss_Engine_col:\n  fill_na_with_mode(df_train, y, 'Engine_upd')\nfor z in miss_Power_col:\n  fill_na_with_mode(df_train, z, 'Power_upd')","4297406f":"miss_ts_Mileage_col = df_test.loc[df_test['Mileage_upd'].isnull()]['brand_name'].unique()\nmiss_ts_Engine_col = df_test.loc[df_test['Engine_upd'].isnull()]['brand_name'].unique()\nmiss_ts_Power_col = df_test.loc[df_test['Power_upd'].isnull()]['brand_name'].unique()\n\nfor x in miss_ts_Mileage_col:\n  fill_na_with_mode(df_test, x, 'Mileage_upd')\nfor y in miss_ts_Engine_col:\n  fill_na_with_mode(df_test, y, 'Engine_upd')\nfor z in miss_ts_Power_col:\n  fill_na_with_mode(df_test, z, 'Power_upd')","aa14eb75":"zero_mileage_col = df_train.loc[df_train['Mileage_upd'] == 0.0]['brand_name'].unique()\n\nfor m in zero_mileage_col:\n  fill_zero = df_train.loc[df_train['brand_name'] == m]['Mileage_upd'].mode()[0]\n  m1 = ((df_train['brand_name'] == m) & (df_train['Mileage_upd'] == 0.0))\n  df_train.loc[m1, 'Mileage_upd'] = fill_zero","943ead9d":"zero_mileage_col2 = df_test.loc[df_test['Mileage_upd'] == 0.0]['brand_name'].unique()\n\nfor m in zero_mileage_col2:\n  fill_zero = df_test.loc[df_test['brand_name'] == m]['Mileage_upd'].mode()[0]\n  m1 = ((df_test['brand_name'] == m) & (df_test['Mileage_upd'] == 0.0))\n  df_test.loc[m1, 'Mileage_upd'] = fill_zero","6cf63435":"m1 = (df_train['Seats'] == 0.0)\ndf_train.loc[m1, 'Seats'] = 5.0","82645c2b":"plt.figure(figsize=(20,8))\nplt.subplot(1,2,1)\nsns.distplot(df_train['Price'])\n\nplt.subplot(1,2,2)\nsns.boxplot(y=df_train['Price'])\nplt.show()","23d140df":"fig = plt.figure(figsize=(20,18))\nfig.subplots_adjust(hspace=0.2, wspace=0.2)\nfig.add_subplot(2,2,1)\ng1 = sns.countplot(x='brand_name', data=df_train)\nloc,labels = plt.xticks()\ng1.set_xticklabels(labels,rotation=90)\nfig.add_subplot(2,2,2)\ng2 = sns.countplot(x='Fuel_Type', data=df_train)\nloc,labels = plt.xticks()\ng2.set_xticklabels(labels,rotation=0)\nfig.add_subplot(2,2,3)\ng3 = sns.countplot(x='Transmission', data=df_train)\nloc,labels = plt.xticks()\ng3.set_xticklabels(labels,rotation=0)\nfig.add_subplot(2,2,4)\ng4 = sns.countplot(x='Owner_Type', data=df_train)\nloc,labels = plt.xticks()\ng4.set_xticklabels(labels,rotation=0)\nplt.show()","994cc971":"fig = plt.figure(figsize=(15,15))\nfig.subplots_adjust(hspace=0.2, wspace=0.2)\nax1 = fig.add_subplot(2,2,1)\nplt.xlim([0, 100000])\np1 = sns.scatterplot(x=\"Kilometers_Driven\", y=\"Price\", data=df_train)\nloc, labels = plt.xticks()\nax1.set_xlabel('Kilometer')\n\nax2 = fig.add_subplot(2,2,2)\n#plt.xlim([0, 100000])\np2 = sns.scatterplot(x=\"Mileage_upd\", y=\"Price\", data=df_train)\nloc, labels = plt.xticks()\nax2.set_xlabel('Mileage')\n\nax3 = fig.add_subplot(2,2,3)\n#plt.xlim([0, 100000])\np3 = sns.scatterplot(x=\"Engine_upd\", y=\"Price\", data=df_train)\nloc, labels = plt.xticks()\nax3.set_xlabel('Engine')\n\nax4 = fig.add_subplot(2,2,4)\n#plt.xlim([0, 100000])\np4 = sns.scatterplot(x=\"Power_upd\", y=\"Price\", data=df_train)\nloc, labels = plt.xticks()\nax4.set_xlabel('Power')\n\nplt.show()","fa17aa06":"fig = plt.figure(figsize=(18,5))\nfig.subplots_adjust(hspace=0.3, wspace=0.3)\n\nax1 = fig.add_subplot(1,2,1)\nsns.scatterplot(x='Price', y=\"Year\", data=df_train)\nax1.set_xlabel('Price')\nax1.set_ylabel('Year')\nax1.set_title('Year vs Price')\n\nax2 = fig.add_subplot(1,2,2)\nsns.scatterplot(x='Price', y='Kilometers_Driven', data=df_train)\nax2.set_ylabel('kilometer')\nax2.set_xlabel('Price')\nax2.set_title('Kilometer vs Price')\nplt.show()","a2efbdf4":"df_train.drop(df_train[df_train['Kilometers_Driven'] >= 6500000].index, axis=0, inplace=True)","c38cc41d":"df_vis_1 = pd.DataFrame(df_train.groupby('brand_name')['Price'].mean())\ndf_vis_1.plot.bar()\nplt.show()","4b7c9ee2":"fig = plt.figure(figsize=(20,8))\nax1 = fig.add_subplot(1,2,1)\nsns.boxplot(x='Owner_Type', y='Price', data=df_train)\nax1.set_title('Owner vs Price')\n\nax2 = fig.add_subplot(1,2,2)\nsns.boxplot(x='brand_name', y='Price', data=df_train)\nloc,labels = plt.xticks()\nax2.set_xticklabels(labels, rotation=90)\nax2.set_title('Brand vs Price')\nplt.show()","391656ee":"fig = plt.figure(figsize=(18,6))\nax1 = fig.add_subplot(1,3,1)\nsns.boxplot(x='Seats', y='Price', data=df_train)\nax1.set_title('Seats vs Price')\n\nax2 = fig.add_subplot(1,3,2)\nsns.boxplot(x='Transmission', y='Price', data=df_train)\nax2.set_title('Transmission vs Price')\n\nax3 = fig.add_subplot(1,3,3)\nsns.boxplot(x='Fuel_Type', y='Price', data=df_train)\nax3.set_title('Fuel vs Price')\n\nplt.show()","4b52985d":"import datetime\nnow = datetime.datetime.now()\ndf_train['Year_upd'] = df_train['Year'].apply(lambda x : now.year - x)\ndf_test['Year_upd'] = df_test['Year'].apply(lambda x : now.year - x)","e822d0d8":"df_train.drop(columns=['Year'], axis=1, inplace=True)\ndf_test.drop(columns=['Year'], axis=1, inplace=True)","ecb650b2":"df_train.drop(columns=['New_Price'], axis=1, inplace=True)\ndf_test.drop(columns=['New_Price'], axis=1, inplace=True)","e492eaa8":"df_train.drop(columns=['Location'], axis=1, inplace=True)\ndf_test.drop(columns=['Location'], axis=1, inplace=True)","eb8301a7":"df_train_norm = pd.get_dummies(df_train, drop_first=True)\ndf_test_norm = pd.get_dummies(df_test, drop_first=True)","75dee4fe":"df_train_norm['Price_upd'] = np.log1p(df_train_norm['Price'].values)","dcb4b062":"df_train_norm.drop(columns=['Price'], axis=1, inplace=True)","a20c1bb0":"df_train_X = df_train_norm.drop(columns=['Price_upd'], axis=1)\ndf_train_y = df_train_norm[['Price_upd']]","89c3c44b":"df_train_X = (df_train_X - df_train_X.mean())\/df_train_X.std()\ndf_test_norm = (df_test_norm - df_test_norm.mean())\/df_test_norm.std()","7969a61d":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nlm = LinearRegression()\nX_train, X_test, y_train, y_test = train_test_split(df_train_X, df_train_y, test_size=0.22, random_state=1)\nreg = lm.fit(X_train, y_train)","8eee9b8e":"y_predict = reg.predict(X_test)\ny_predict","6d330273":"from sklearn.metrics import r2_score\n\nr2_score(y_predict, y_test)","b63c0348":"reg.score(X_test,y_test)","522a15db":"1. Changed categorical variables to numerical data the both training and test set","87da6b61":"1. Removed the mileage,engine,power columns with updated columns","d6fb1ba2":"1. Price column have outliers","68871d3f":"1. 'Location' column not needed for price prediction.","6d5c5af6":"1. created a new column as 'brand_name'","729b18a9":"1. dropped the unnamed index column","6a116ae4":"1. Removed the km\/kg & km\/l from mileage to make as numeric column\n2. removed the 'CC' and 'bhp' from engine & power columns to change as numeric","433d1df8":"1. 'Newprice' column deleted having most null values, but need to input the price details in future to get better prediction [to do]","bfc1e68f":"1. Replaced 1 zero value of seats with 5.0","04ff1ffb":"1. Price column squweed in right, so label is not properly distributed","db1ae27e":"1. deleted a outlier row from training data.","1bf61e9b":"1. converted the 3 columns to float","3dcf1228":"1. Added new column by getting the year count when it is bought","0ee6844c":"1. Removed 1 row with unique brand having null value for Power.","2763ec6e":"1. New_Price have more than 86% missing need to address, this column seems important to compare price between new car & used car price.\n2. Mileage, Engine, Power, Seats have very few missing this can be addressed by filling mean, median or mode to avoid lossing data","f39ca2e8":"1. Seperated X & y values","a9ccfefd":"1. Replaced 0.0 values with mode for column Mileage_upd","202cde0e":"1. dropped the 'year' column","4ee561f4":"1. Maruti is leading car brand, fueltype both diesel & petrol are almost equal\n2. Manual gear transmission is high, First owernership is high, also have second","3deb6a64":"1. Dropped the 'Name' column from both train & test data","f7d4b552":"Thanks!","97be5c30":"1. Normalized the train and test data","1fa964c9":"1. Replaced all missing values in seats with mode of the specified brand name","4a63deaa":"1. splitted train test split because test set dont have labels to verify accuracy","91ea4c72":"1. add new column after taking logarithm for the dependent variable to avoid high skewness & kurtosis"}}