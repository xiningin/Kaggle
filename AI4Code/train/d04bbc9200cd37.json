{"cell_type":{"74836345":"code","d1c31081":"code","aa5a4f3c":"code","6e828b5e":"code","d7faf3f6":"code","99d6317a":"code","bf3bdb7f":"code","5c3783ee":"code","a2755cba":"code","0793d828":"code","061f767b":"code","cc89b718":"code","fa13539a":"code","73b3bf62":"code","636a6a4d":"code","2c78d7ad":"code","1a071866":"code","a5ba5942":"code","7f69f63e":"code","ea2735a1":"code","6db4f16a":"markdown","d1d5278c":"markdown","02c05d8b":"markdown","aede2cff":"markdown","518a30b3":"markdown","ed438b57":"markdown","fd07645d":"markdown","335281ed":"markdown","89ae23c1":"markdown","dfd51050":"markdown","352c1039":"markdown","f484e123":"markdown","1116ad99":"markdown","b61c00b1":"markdown","72a7565e":"markdown"},"source":{"74836345":"import numpy as np # linear algebra\nimport pandas as pd \n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d1c31081":"from sklearn.preprocessing import LabelEncoder\n\ndef encode_data(df):\n    '''\n    The function does not return, but transforms the input pd.DataFrame\n    \n    Encodes the Costa Rican Household Poverty Level data \n    following studies in https:\/\/www.kaggle.com\/mlisovyi\/categorical-variables-in-the-data\n    and the insight from https:\/\/www.kaggle.com\/c\/costa-rican-household-poverty-prediction\/discussion\/61403#359631\n    \n    The following columns get transformed: edjefe, edjefa, dependency, idhogar\n    The user most likely will simply drop idhogar completely (after calculating houshold-level aggregates)\n    '''\n    \n    yes_no_map = {'no': 0, 'yes': 1}\n    \n    df['dependency'] = df['dependency'].replace(yes_no_map).astype(np.float32)\n    \n    df['edjefe'] = df['edjefe'].replace(yes_no_map).astype(np.float32)\n    df['edjefa'] = df['edjefa'].replace(yes_no_map).astype(np.float32)\n    \n    df['idhogar'] = LabelEncoder().fit_transform(df['idhogar'])","aa5a4f3c":"def drop_features(df):\n    # Drop SQB variables, as they are just squres of other vars \n    df.drop([f_ for f_ in df.columns if f_.startswith('SQB') or f_ == 'agesq'], axis=1, inplace=True)\n    # Drop id's\n    df.drop(['Id', 'idhogar'], axis=1, inplace=True)\n    # Drop repeated columns\n    df.drop(['hhsize', 'female', 'area2'], axis=1, inplace=True)\n    return df","6e828b5e":"def convert_OHE2LE(df):\n    tmp_df = df.copy(deep=True)\n    for s_ in ['pared', 'piso', 'techo', 'abastagua', 'sanitario', 'energcocinar', 'elimbasu', \n               'epared', 'etecho', 'eviv', 'estadocivil', 'parentesco', \n               'instlevel', 'lugar', 'tipovivi',\n               'manual_elec']:\n        if 'manual_' not in s_:\n            cols_s_ = [f_ for f_ in df.columns if f_.startswith(s_)]\n        elif 'elec' in s_:\n            cols_s_ = ['public', 'planpri', 'noelec', 'coopele']\n        sum_ohe = tmp_df[cols_s_].sum(axis=1).unique()\n        #deal with those OHE, where there is a sum over columns == 0\n        if 0 in sum_ohe:\n            print('The OHE in {} is incomplete. A new column will be added before label encoding'\n                  .format(s_))\n            # dummy colmn name to be added\n            col_dummy = s_+'_dummy'\n            # add the column to the dataframe\n            tmp_df[col_dummy] = (tmp_df[cols_s_].sum(axis=1) == 0).astype(np.int8)\n            # add the name to the list of columns to be label-encoded\n            cols_s_.append(col_dummy)\n            # proof-check, that now the category is complete\n            sum_ohe = tmp_df[cols_s_].sum(axis=1).unique()\n            if 0 in sum_ohe:\n                 print(\"The category completion did not work\")\n        tmp_cat = tmp_df[cols_s_].idxmax(axis=1)\n        tmp_df[s_ + '_LE'] = LabelEncoder().fit_transform(tmp_cat).astype(np.int16)\n        if 'parentesco1' in cols_s_:\n            cols_s_.remove('parentesco1')\n        tmp_df.drop(cols_s_, axis=1, inplace=True)\n    return tmp_df","d7faf3f6":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","99d6317a":"train.info(verbose=False)","bf3bdb7f":"def process_df(df_):\n    # fix categorical features\n    encode_data(df_)\n    #fill in missing values based on https:\/\/www.kaggle.com\/mlisovyi\/missing-values-in-the-data\n    for f_ in ['v2a1', 'v18q1', 'meaneduc', 'SQBmeaned']:\n        df_[f_] = df_[f_].fillna(0)\n    df_['rez_esc'] = df_['rez_esc'].fillna(-1)\n    # drop useless columns\n    return drop_features(df_)\n\ntrain = process_df(train)\ntest = process_df(test)","5c3783ee":"def train_test_apply_func(train_, test_, func_):\n    test_['Target'] = 0\n    xx = pd.concat([train_, test_])\n\n    xx_func = func_(xx)\n    train_ = xx_func.iloc[:train_.shape[0], :]\n    test_  = xx_func.iloc[train_.shape[0]:, :].drop('Target', axis=1)\n\n    del xx, xx_func\n    return train_, test_","a2755cba":"train, test = train_test_apply_func(train, test, convert_OHE2LE)","0793d828":"train.info(verbose=False)","061f767b":"X = train.query('parentesco1==1')\n\n# pull out the target variable\ny = X['Target'] - 1\nX = X.drop(['Target'], axis=1)","cc89b718":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=314, stratify=y)","fa13539a":"from sklearn.metrics import f1_score\ndef evaluate_macroF1_lgb(truth, predictions):  \n    # this follows the discussion in https:\/\/github.com\/Microsoft\/LightGBM\/issues\/1483\n    pred_labels = predictions.reshape(len(np.unique(truth)),-1).argmax(axis=0)\n    f1 = f1_score(truth, pred_labels, average='macro')\n    return ('macroF1', f1, True) \n\nimport lightgbm as lgb\nfit_params={\"early_stopping_rounds\":300, \n            \"eval_metric\" : evaluate_macroF1_lgb, \n            \"eval_set\" : [(X_train,y_train), (X_test,y_test)],\n            'eval_names': ['train', 'early_stop'],\n            'verbose': 100,\n            'categorical_feature': 'auto'}","73b3bf62":"opt_parameters = {'colsample_bytree': 0.89, 'min_child_samples': 90, 'num_leaves': 14, 'subsample': 0.96}","636a6a4d":"def train_lgbm_model(X_, y_, random_state_=None, opt_parameters_={}, fit_params_={}, lr_=0.05):\n    clf  = lgb.LGBMClassifier(max_depth=-1, learning_rate=lr_, objective='multiclass',\n                             random_state=random_state_, silent=True, metric='None', \n                             n_jobs=4, n_estimators=5000, class_weight='balanced')\n    clf.set_params(**opt_parameters_)\n    return clf.fit(X_, y_, **fit_params_)\n\nclf_final = train_lgbm_model(X_train, y_train, \n                       random_state_=314, \n                       opt_parameters_=opt_parameters,\n                       fit_params_=fit_params)","2c78d7ad":"from sklearn.metrics import classification_report\ndef print_report(clf_, X_tr, y_tr, X_tt, y_tt):\n    print('------------ Train sample -------------\\n', \n          classification_report(y_tr, clf_.predict(X_tr)))\n    print('------------ Test sample -------------\\n', \n          classification_report(y_tt, clf_.predict(X_tt)))\n\nprint_report(clf_final, X_train, y_train, X_test, y_test) ","1a071866":"def drop_classes(X_, y_, to_drop_=3):\n    XY = pd.concat([X_, y_], axis=1)\n    XY = XY.query('Target != @to_drop_')\n    return XY.drop('Target', axis=1), XY['Target']\n\nX_train_wo3, y_train_wo3 = drop_classes(X_train, y_train, 3)\nX_test_wo3,  y_test_wo3  = drop_classes(X_test, y_test, 3)","a5ba5942":"import copy\nfit_params_wo3 = copy.deepcopy(fit_params)\nfit_params_wo3['eval_set'] = [(X_train_wo3, y_train_wo3), (X_test_wo3, y_test_wo3)]\nfit_params_wo3['verbose'] = 100","7f69f63e":"clf_wo3 = train_lgbm_model(X_train_wo3, y_train_wo3, \n                       random_state_=314, \n                       opt_parameters_=opt_parameters,\n                       fit_params_=fit_params_wo3)","ea2735a1":"print_report(clf_final, X_train_wo3, y_train_wo3, X_test_wo3, y_test_wo3) ","6db4f16a":"# Fit a LGBM classifier","d1d5278c":"# VERY IMPORTANT\n> Note that ONLY the heads of household are used in scoring. All household members are included in test + the sample submission, but only heads of households are scored.","02c05d8b":"# Nope, the model can not well distinguish between the 3 poorest classes","aede2cff":"As we can see:\n\n - in the train sample the the model is able to predict all classes with roughly the same F1 score (the third column)\n - in the test sample only the last class (*\"non vulnerable households\"*) can be predicted reliably, while others have very low precision and recall\n \n Supposedly this is due to poor separation between three poorest classes, as is shown in this kernel: https:\/\/www.kaggle.com\/mlisovyi\/cluster-analysis-tsne-mds-isomap\n \n How can we address it?\n \n \n# Let's try to build a model to distinguish between poor classes only:","518a30b3":"The following categorical mapping originates from [this kernel](https:\/\/www.kaggle.com\/mlisovyi\/categorical-variables-encoding-function).","ed438b57":"Now, let's define `train_test_apply_func` helper function to apply a custom function to a concatenated test+train dataset","fd07645d":"**Drop less important features:**","335281ed":"# Read in the data and clean it up","89ae23c1":"# Model fitting\n\nWe will use LightGBM classifier - LightGBM allows to build very sophysticated models with a very short training time.","dfd51050":"# Do feature engineering to improve LightGBM prediction\nThis kernel closely follows https:\/\/www.kaggle.com\/mlisovyi\/feature-engineering-lighgbm-with-f1-macro, but instead of making accent on precise prediction, we look what is going on under the hood. \n\nThe key points:\n- The main point is **to demonstrate the origin of low F1 scores that we achieve on these data**\n- The studies start here: [Confusion matrix studies](#F1-score-across-different-classes)\n- Spoiler: no magical solution. Any feedback\/advice is welcome","352c1039":"## Use test subset for early stopping criterion\n\nThis allows us to avoid overtraining and we do not need to optimise the number of trees. We also use F1 macro-averaged score to decide when to stop\n","f484e123":"So the final macro F_1 score on the early-stop test sample is `~0.44`\n# F1 score across different classes\nLet's see if all classes show similar performance","1116ad99":"# LightGBM optimal parameters\n\nThe parameters are optimised with a random search in this kernel: https:\/\/www.kaggle.com\/mlisovyi\/lighgbm-hyperoptimisation-with-f1-macro\n","b61c00b1":"# Initial imports and helper functions","72a7565e":"Compare the number of features with `int64` type to the previous info summary. The difference comes from convertion of OHE into LE (`convert_OHE2LE` function)"}}