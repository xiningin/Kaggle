{"cell_type":{"ac7380ec":"code","59625b1d":"code","1165d113":"code","e2fc0cb9":"code","9d2d5fe6":"code","a37b7937":"code","73224fc9":"code","5df3d824":"code","05872675":"code","01d135f1":"code","73a53581":"code","779e6947":"code","e6c45698":"code","e41b1f8c":"code","438e7c08":"code","16af75ef":"markdown","e0472007":"markdown","49e93ace":"markdown"},"source":{"ac7380ec":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","59625b1d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","1165d113":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn import  ensemble,neighbors\nfrom xgboost import XGBClassifier\nimport statsmodels.api as sm\nfrom sklearn import model_selection","e2fc0cb9":"from sklearn.model_selection import GridSearchCV, cross_val_score, learning_curve, train_test_split\nfrom sklearn.metrics import precision_score, recall_score, confusion_matrix, roc_curve, precision_recall_curve, accuracy_score","9d2d5fe6":"#Reading train and test pet data\n\ntrain_pet_adoption=pd.read_csv(\"..\/input\/train\/train.csv\")\n\ntest_pet_adoption=pd.read_csv(\"..\/input\/test\/test.csv\")","a37b7937":"#Looking at training data set\ntrain_pet_adoption.head()","73224fc9":"#Printing column names of train data set\ntrain_pet_adoption.columns = train_pet_adoption.columns.str.replace(' ', '')\n\nmap(str,list(train_pet_adoption.columns))","5df3d824":"#Selecting required columns\ntrain_sel=train_pet_adoption[['Type','Age','Breed1','Breed2','Gender','Color1','Color2','Color3','MaturitySize',\n                             'FurLength','Vaccinated','Dewormed','Sterilized','Health','Fee','State','AdoptionSpeed']]\n\ntest_sel=train_pet_adoption[['Type','Age','Breed1','Breed2','Gender','Color1','Color2','Color3','MaturitySize',\n                             'FurLength','Vaccinated','Dewormed','Sterilized','Health','Fee','State']]","05872675":"#Preparing data for machine learining \ny=train_sel[['AdoptionSpeed']]\nX=train_sel[['Type','Age','Breed1','Breed2','Gender','Color1','Color2','Color3','MaturitySize',\n                             'FurLength','Vaccinated','Dewormed','Sterilized','Health','Fee','State']]","01d135f1":"models = [\n    \n    #Ensemble Methods\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n          \n           \n    #xgboost\n    XGBClassifier()    \n    ]","73a53581":"for model in models:\n    \n    \n    model.fit(X, y.values.ravel())\n    \n  \n            \n    feat_imp = pd.DataFrame({'importance':model.feature_importances_})    \n    feat_imp['feature'] = X.columns\n    feat_imp.sort_values(by='importance', ascending=False, inplace=True)\n    feat_imp = feat_imp.iloc[:X.shape[1]]\n    \n    feat_imp.sort_values(by='importance', inplace=True)\n    feat_imp = feat_imp.set_index('feature', drop=True)\n    feat_imp.plot.barh(title=model.__class__.__name__, figsize=(15,15))\n    plt.xlabel('Feature Importance Score')\n    plt.show()","779e6947":"#Predicting using GBC\ngbc = ensemble.GradientBoostingClassifier(min_samples_split=0.1,max_depth=5,n_estimators =20,learning_rate=0.01)\n\ngbc.fit(X, y)\nprint(gbc.score(X, y))","e6c45698":"#Predicting data\npred_gbc = gbc.predict(test_sel)\npred_gbc=pd.DataFrame(pred_gbc)","e41b1f8c":"test_pet_adoption['AdoptionSpeed']=pred_gbc","438e7c08":"#Submitting results\n\nsub=test_pet_adoption[['PetID','AdoptionSpeed']]\n\nsub.to_csv('submission.csv',index=False)\n","16af75ef":"Libraries for plots","e0472007":"Libraries for machine learning","49e93ace":"Loading Data Processing libraries"}}