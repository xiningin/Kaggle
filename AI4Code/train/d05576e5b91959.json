{"cell_type":{"d96a35d4":"code","e3482170":"code","5ee29a53":"code","9433eda7":"code","74efd98b":"code","79d98a0c":"code","4da1064c":"code","a7d3077b":"code","9fcdf57b":"code","fa369efb":"code","5d720c35":"code","66ce77b4":"code","9b659469":"code","8987bb3e":"code","ef53af77":"code","7f0848b9":"code","b1636e0a":"code","97cb7468":"code","09c25caa":"code","a00f9b60":"code","8b1dae52":"code","d177b7c2":"code","2a36d513":"code","c9bffcb3":"code","2c3924d3":"code","ba6f4577":"code","16663fc2":"code","7c0d26c1":"code","983b7832":"code","77b60414":"code","7719ba38":"code","8f4633ee":"code","dbd0bdd4":"code","054722c8":"code","0f6e86e9":"code","0e06093d":"code","8f35d4b4":"code","94ef8d99":"code","199ebe9e":"code","c5d4cac3":"code","aae2aafe":"code","ae1171de":"code","db76f368":"code","8b47bd74":"code","e3327b9a":"code","82132d1e":"code","afbcf019":"code","28bda3cf":"code","b9e5d94e":"code","c9c933cd":"code","f378b133":"code","36718fdd":"code","4f4f8c90":"code","a00de158":"code","d004967c":"code","a95aa1b2":"code","44c15467":"code","44531be2":"code","3f1d1321":"code","a96d4b3c":"code","aa33673a":"code","024c68c1":"code","f7056dc1":"code","c43e9428":"code","a145db9f":"code","ef5fa9cc":"code","744b9704":"code","5eff05bd":"code","459c508e":"code","87d0aa07":"code","14791834":"code","680cff56":"code","fac164e4":"code","2fcaec16":"code","35a4d816":"code","905c7b24":"code","88e17e3d":"code","25d137d0":"code","859c12da":"code","4fe56654":"code","40435785":"code","fa88cad9":"code","0670f996":"code","2bc03ded":"code","89d209e2":"code","5303d8f2":"code","61607fae":"code","a7a04d23":"code","27ab45ef":"code","e2bb0b95":"code","82eea60e":"code","ace69762":"code","c17bfd2d":"code","a86a114d":"code","0885da53":"code","fcee41d9":"code","63da00ec":"code","baf0cd36":"code","c2429b66":"code","f1c12931":"code","074b040f":"code","21578266":"code","496a5a09":"code","11c49cd8":"code","2232c3c9":"code","83ebcd15":"code","4f952d9b":"code","df2a7a2a":"code","be30e541":"code","7f6e91c8":"code","f8c443ee":"code","ee570971":"code","cce113d4":"code","f18cd130":"code","af10c046":"code","c124b182":"markdown","8d703136":"markdown","778cf7a7":"markdown","7919fb0c":"markdown","4c518fe8":"markdown"},"source":{"d96a35d4":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt","e3482170":"train_df = pd.read_csv(\"..\/input\/danthon2021\/data_train.csv\")\nalerts = pd.read_csv(\"..\/input\/danthon2021\/alerts.csv\")\nirregular = pd.read_csv(\"..\/input\/danthon2021\/irregularities.csv\")","5ee29a53":"train_df.head()","9433eda7":"alerts.head()","74efd98b":"irregular.head()","79d98a0c":"print(len(train_df))\nprint(len(alerts))\nprint(len(irregular))","4da1064c":"def split_columns(df):\n    split = df['Ids'].str.split(\"_\", expand=True)\n    df['token'] = split[0]\n    df['date'] = split[1]\n    df['hours'] = split[2]\n    df.drop(columns=['Ids'], inplace=True)\n    \n    return df\n#     print(split[0])\n","a7d3077b":"train_df_edit = split_columns(train_df)\ntrain_df_edit.head()","9fcdf57b":"def preprocess(df):\n    df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')\n    df['hours'] = df['hours'].astype(int)\n    df['dayName'] = df['date'].dt.day_name()\n    df['dayName'] = df['dayName'].replace({'Monday':0, 'Tuesday':1, 'Wednesday':2, 'Thursday':3, 'Friday':4, 'Saturday':5, 'Sunday':6 }) \n    df['isWeekdays'] = np.where(df['dayName'] >= 5, 1, 0)\n    df['isAm'] = np.where(df['hours'] <= 12, 1, 0)\n    \n    rushHour = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    df['isRushHour'] = df['hours'].apply(lambda x: 1 if x in rushHour else 0)\n    return df","fa369efb":"train_df_edit = preprocess(train_df_edit)","5d720c35":"train_df_edit['hours'].unique()","66ce77b4":"train_df_edit.head(10)","9b659469":"train_df_edit['token'].nunique()","8987bb3e":"train_df_edit.sort_values(by=['date'])","ef53af77":"train_df_edit['Labels'].value_counts()","7f0848b9":"hours_labels = train_df_edit.groupby(['hours', 'Labels']).size().unstack(fill_value=0).sort_values(by=['hours'])","b1636e0a":"hours_labels.plot(kind='bar', figsize=(25,10))","97cb7468":"day_labels = train_df_edit.groupby(['dayName', 'Labels']).size().unstack(fill_value=0).sort_values(by=['dayName'])","09c25caa":"day_labels.plot(kind='bar', figsize=(25,10))","a00f9b60":"dayHours_labels = train_df_edit.groupby(['dayName', 'hours', 'Labels']).size().unstack(fill_value=0).sort_values(by=['dayName', 'hours'])","8b1dae52":"dayHours_labels.plot(kind='bar', figsize=(25,10))","d177b7c2":"alerts.info()","2a36d513":"alerts.head()","c9bffcb3":"alerts_edited = alerts.drop(columns=['report_description', 'subtype', 'report_by_municipality_user', 'longitude', 'latitude'])","2c3924d3":"alerts_edited.head()","ba6f4577":"import datetime\n\ndef convertMs(x):\n    return(datetime.datetime.fromtimestamp(x\/1000.0))\n\n\nalerts_edited['date'] = alerts['pub_millis'].apply(lambda x: convertMs(x).strftime(\"%Y-%m-%d\"))\nalerts_edited['hours'] = alerts['pub_millis'].apply(lambda x: convertMs(x).hour)","16663fc2":"alerts_edited = alerts_edited.drop(columns=['pub_millis'])\nalerts_edited = alerts_edited.drop(columns=['street'])\nalerts_edited = alerts_edited.drop(columns=['magvar'])","7c0d26c1":"alerts_edited.head()","983b7832":"alerts_edited['type'].unique()","77b60414":"alerts_edited['type'] = alerts_edited['type'].replace({'ROAD_CLOSED':1, 'JAM':2, 'WEATHERHAZARD':3, 'ACCIDENT':4}) ","7719ba38":"alerts_edited.info()","8f4633ee":"alerts_grouping = alerts_edited.groupby(['s2token_15', 'date', 'hours', 'road_type', 'type'])[['reliability', 'report_rating', 'confidence']].mean()","dbd0bdd4":"alerts_grouping = alerts_grouping.reset_index()","054722c8":"alerts_grouping = preprocess(alerts_grouping)","0f6e86e9":"alerts_grouping.sort_values(by=['date'])","0e06093d":"alerts_grouping = alerts_grouping.rename(columns={\"s2token_15\": \"token\"}) ","8f35d4b4":"len(alerts_grouping)","94ef8d99":"irregular.head()","199ebe9e":"irr_edited = irregular.drop(columns=['line', 's2id_center'])","c5d4cac3":"irr_edited['date'] = irregular['detection_date_millis'].apply(lambda x: convertMs(x).strftime(\"%Y-%m-%d\"))\nirr_edited['hours'] = irregular['detection_date_millis'].apply(lambda x: convertMs(x).hour)","aae2aafe":"irr_edited.info()","ae1171de":"irr_edited['severity'] = irr_edited['severity'].astype('int')\n# irr_edited['is_highway'] = irr_edited['is_highway'].astype('int')","db76f368":"irr_edited['is_highway'].unique()","8b47bd74":"irr_edited['is_highway'] = irr_edited['is_highway'].replace({'t':1, 'f':0}) ","e3327b9a":"irr_edited['type'] = irr_edited['type'].replace({'Small':1, 'Medium':2, 'Large':3, 'Huge':4 }) ","82132d1e":"# irr_grouping = irr_edited.groupby(['s2token_center', 'date', 'hours']).agg({'speed':['median'], 'delay_seconds':['median'], 'regular_speed':['median'], 'seconds':['median'], 'length':['median'], 'severity':['mean'], 'drivers_count':['median'], 'trend': lambda x: x.value_counts().index[0], 'jam_level': lambda x: x.value_counts().index[0], 'n_thumbs_up': lambda x: x.value_counts().index[0], 'type':lambda x: x.value_counts().index[0], 'is_highway': lambda x: x.value_counts().index[0]})\nirr_grouping = irr_edited.groupby(['s2token_center', 'date', 'hours'])[['speed', 'delay_seconds', 'regular_speed', 'seconds', 'length', 'severity', 'drivers_count', 'trend', 'jam_level', 'n_thumbs_up', 'type', 'is_highway', 'alerts_count']].mean()","afbcf019":"irr_grouping = irr_grouping.reset_index()","28bda3cf":"irr_grouping = preprocess(irr_grouping)","b9e5d94e":"irr_grouping = irr_grouping.rename(columns={\"s2token_center\": \"token\"}) ","c9c933cd":"irr_grouping.info()","f378b133":"train_df_edit.info()","36718fdd":"alerts_grouping.info()","4f4f8c90":"def check_token(x, y):\n    exist, no = 0, 0\n    for i in x.unique():\n        if i in (y):\n            exist+= 1\n        else:\n            no += 1\n    return exist, no","a00de158":"count_token_exist, no_exist = check_token(train_df_edit['token'], list(alerts_grouping['token']))\nprint(count_token_exist, no_exist)","d004967c":"count_token_exist, no_exist = check_token(train_df_edit['token'], list(irr_grouping['token']))\nprint(count_token_exist, no_exist)","a95aa1b2":"# alerts_grouping = alerts_grouping.drop(columns=['hours'])","44c15467":"train_1 = train_df_edit.merge(alerts_grouping, how='inner', on=['token', 'date', 'isRushHour'])","44531be2":"train_2 = train_df_edit.merge(irr_grouping, how='inner', on=['token', 'date', 'isRushHour'])","3f1d1321":"train_2.info()","a96d4b3c":"len(train_df_edit)","aa33673a":"print(len(train_1), len(train_2))","024c68c1":"train_1.head()","f7056dc1":"train_2.head()","c43e9428":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score","a145db9f":"# Random Forest\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 42)\nrf1 = RandomForestClassifier(n_estimators = 1000, random_state = 42)\nrf2 = RandomForestClassifier(n_estimators = 1000, random_state = 42)\ncv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=7)\n\n# Neural Network\nmlp1 = MLPClassifier(alpha=0.0001, max_iter=10000)\nmlp2 = MLPClassifier(alpha=0.0001, max_iter=10000)","ef5fa9cc":"def training(features, labels, model):\n    X = features\n    y = labels\n    scores = cross_val_score(model, X, y, scoring='f1_macro', cv=cv, n_jobs=-1)\n    return(\"F1 Score for BBG is\", round(np.mean(scores),5))","744b9704":"x = train_df_edit[['dayName', 'hours', 'isWeekdays', 'isRushHour']]\ny = train_df_edit['Labels']\nf1 = training(x, y, rf)\nprint(f1)","5eff05bd":"x1 = train_1[['dayName_x', 'hours_x', 'isWeekdays_x', 'isRushHour', 'road_type', 'reliability', 'report_rating', 'confidence', 'type']]\ny1 = train_1['Labels']\nf1_1 = training(x1, y1, rf1)\nprint(f1_1)","459c508e":"# precision_score(y_true, y_pred, average='macro')","87d0aa07":"f1_2 = training(x1, y1, mlp1)\nprint(f1_2)","14791834":"# 'speed', 'delay_seconds', 'regular_speed', 'length', 'drivers_count', 'trend', 'jam_level', 'type', 'severity'\n\n# x2 = train_2[['isWeekdays_x', 'isRushHour', 'drivers_count', 'speed', 'delay_seconds', 'length', 'trend', 'jam_level', 'type', 'severity', 'alerts_count']]\nx2 = train_2[['dayName_x', 'hours_x', 'isWeekdays_x', 'isRushHour', 'drivers_count', 'speed', 'length', 'trend', 'jam_level', 'severity', 'alerts_count', 'is_highway']]\n# , 'speed', 'delay_seconds', 'length', 'trend', 'jam_level', 'type', 'severity', 'alerts_count'\ny2 = train_2['Labels']\nf2_1 = training(x2, y2, rf2)\nprint(f2_1)","680cff56":"f2_2 = training(x2, y2, mlp2)\nprint(f2_2)","fac164e4":"test = pd.read_csv('..\/input\/danthon2021\/data_test.csv')","2fcaec16":"test_real = pd.read_csv('..\/input\/danthon2021\/data_test.csv')","35a4d816":"test = split_columns(test)\ntest = preprocess(test)","905c7b24":"test.head()","88e17e3d":"test.info()","25d137d0":"count_token_exist, no_exist = check_token(test['token'], list(train_1['token']))\nprint(count_token_exist, no_exist)","859c12da":"count_token_exist, no_exist = check_token(test['token'], list(train_2['token']))\nprint(count_token_exist, no_exist)","4fe56654":"len(test)","40435785":"test_1 = test.merge(alerts_grouping, how='inner', on=['token', 'isWeekdays', 'isRushHour'])\ntest_2 = test.merge(irr_grouping, how='inner', on=['token', 'isWeekdays', 'isRushHour'])","fa88cad9":"print(len(test), len(test_1), len(test_2))","0670f996":"test_1.head()","2bc03ded":"test_real.head()","89d209e2":"mlp1.fit(x1,y1)\nrf2.fit(x2,y2)","5303d8f2":"rf.fit(x,y)","61607fae":"test_1 = test_1.drop_duplicates()\ntest_2 = test_2.drop_duplicates()","a7a04d23":"print(len(test), len(test_1), len(test_2))","27ab45ef":"test_1.head","e2bb0b95":"Xtest1 = test_1[['dayName_x', 'hours_x','isWeekdays', 'isRushHour', 'road_type', 'reliability', 'report_rating', 'confidence', 'type']]\nytest1 = mlp1.predict(Xtest1)","82eea60e":"Xtest2 = test_2[['dayName_x', 'hours_x', 'isWeekdays', 'isRushHour', 'drivers_count', 'speed', 'length', 'trend', 'jam_level', 'severity', 'alerts_count', 'is_highway']]\nytest2 = rf2.predict(Xtest2)","ace69762":"test_1['Labels'] = ytest1\ntest_2['Labels'] = ytest2","c17bfd2d":"res1 = test.merge(test_1[['token', 'date_x', 'hours_x', 'Labels']], left_on=['token', 'date', 'hours'], right_on=['token', 'date_x', 'hours_x'])\nres2 = test.merge(test_2[['token', 'date_x', 'hours_x', 'Labels']], left_on=['token', 'date', 'hours'], right_on=['token', 'date_x', 'hours_x'])","a86a114d":"res1.head()","0885da53":"res1 = res1.drop(columns=['date_x', 'hours_x', 'dayName', 'isWeekdays', 'isAm', 'isRushHour'])\nres2 = res2.drop(columns=['date_x', 'hours_x', 'dayName', 'isWeekdays', 'isAm', 'isRushHour'])\n\nunion = res1.merge(res2, how='outer', right_on=['token', 'date', 'hours'], left_on=['token', 'date', 'hours'])\nunion['Labels_x'] = union['Labels_x'].fillna(union['Labels_y'])\nunion.drop(columns=['Labels_y'], inplace=True)\nunion","fcee41d9":"union_grouping = union.groupby(['token', 'date', 'hours', 'Labels_x']).size().unstack(fill_value=0)","63da00ec":"union_grouping","baf0cd36":"union_grouping = union_grouping.reset_index(col_level=0)","c2429b66":"union_grouping[union_grouping[False] == union_grouping[True]]","f1c12931":"union_grouping['Labels'] = np.where(union_grouping[True] >= union_grouping[False], 'True', 'False')","074b040f":"# union = union.drop_duplicates()\nres = test.merge(union_grouping, how='left', left_on=['token', 'date', 'hours'], right_on=['token', 'date', 'hours'])\n","21578266":"res","496a5a09":"res","11c49cd8":"test_3 = res[res['Labels'].isnull()].drop(columns=[False, True, 'Labels'])","2232c3c9":"Xtest3 = test_3[['dayName', 'hours', 'isWeekdays', 'isRushHour']]\nytest3 = rf.predict(Xtest3)","83ebcd15":"test_3['Labels'] = ytest3","4f952d9b":"res['Labels'] = res['Labels'].fillna(test_3['Labels'])","df2a7a2a":"res[res['Labels'].isnull()]","be30e541":"# train_2[train_2['token']=='2e699abbc']","7f6e91c8":"# irr_grouping[irr_grouping['token']=='2e699abbc']","f8c443ee":"# alerts_grouping[alerts_grouping['token']=='2e699abbc']","ee570971":"# train_df_edit[train_df_edit['token']=='2e699abbc']","cce113d4":"len(union), len(test)","f18cd130":"sub = pd.DataFrame(data = {'Ids': test_real['Ids'],'Labels' : res['Labels']})","af10c046":"sub.to_csv('submission.csv', index = False)","c124b182":"# Preprocess","8d703136":"# Predict","778cf7a7":"# **Alerts preprocess**","7919fb0c":"# Modelling","4c518fe8":"# Irregular"}}