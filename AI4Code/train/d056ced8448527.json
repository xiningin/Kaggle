{"cell_type":{"7802c6b1":"code","b0932956":"code","34229eb3":"code","2ed042b5":"code","8eaabd0a":"code","4f2944d4":"code","33580b39":"code","96e8c9b3":"code","bdabbd28":"code","4e695684":"code","0874e9be":"code","6299a1ec":"code","37b3dead":"code","9432472a":"code","192a353b":"code","1f8bc19c":"code","42c5c0da":"code","beafec9f":"code","e8ed01a6":"code","fa76b425":"code","81dbe0ef":"markdown","aa7889d2":"markdown","f153bb57":"markdown","d37e8475":"markdown","44da0a14":"markdown","5fb2c2c6":"markdown","559b1241":"markdown","f9dceb91":"markdown","9e24ddcc":"markdown","658d6134":"markdown","48f67930":"markdown","0879f245":"markdown","b6890882":"markdown","6484c362":"markdown","52dcc6b9":"markdown"},"source":{"7802c6b1":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","b0932956":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-aug-2021\/test.csv\")","34229eb3":"train.head()","2ed042b5":"train.shape","8eaabd0a":"train.describe().transpose()","4f2944d4":"test.describe().transpose()","33580b39":"test.shape","96e8c9b3":"test.head(5)","bdabbd28":"train.pop(\"id\")\ntest_ids = test.pop(\"id\")\n","4e695684":"train.head()","0874e9be":"test.head()","6299a1ec":"#Plan to use different test size\n\nvalidation_split = 0.3 \n\ntrain_features, validation_features = train_test_split(train, test_size=validation_split)\n\ntrain_targets, validation_targets = train_features.pop(\"loss\"),  validation_features.pop(\"loss\")","37b3dead":"train_features.head()","9432472a":"validation_features.head()","192a353b":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor()\nmy_model.fit(train_features, train_targets)","1f8bc19c":"from sklearn.metrics import mean_absolute_error\n\npredictions = my_model.predict(validation_features)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, validation_targets)))","42c5c0da":"model_1=XGBRegressor(n_estimators=100,learning_rate=0.05)\nmodel_2=XGBRegressor(n_estimators=200,learning_rate=0.1)\nmodel_3=XGBRegressor(n_estimators=300,learning_rate=0.5)\nmodel_4=XGBRegressor(n_estimators=300,learning_rate=1, random_state=0)\n\nmodels = [model_1, model_2, model_3, model_4]\n","beafec9f":"def score_model(model):\n    model.fit(train_features, train_targets, early_stopping_rounds=3,eval_set=[(validation_features,validation_targets)],\n             verbose=False)\n    preds = model.predict(validation_features)\n    return mean_absolute_error(validation_targets, preds)\n\nfor i in range(0, len(models)):\n    mae = score_model(models[i])\n    print(\"Model %d MAE: %d\" % (i+1, mae))","e8ed01a6":"ideal_model=model_4.fit(train_features, train_targets, early_stopping_rounds=3,eval_set=[(validation_features,validation_targets)],\n             verbose=False)\nloss_pred=ideal_model.predict(test)\n\n%matplotlib inline\nimport seaborn as sns\n\nsns.lineplot(data=loss_pred, label=test_ids)","fa76b425":"submission = pd.DataFrame({\"id\": test_ids, \"loss\": loss_pred.reshape(-1)})\nsubmission.to_csv(\"submission.csv\", index=False)","81dbe0ef":"## Import Packages","aa7889d2":"## Observe test sample to be plugged into the trained model","f153bb57":"## Model Development\n### Using XG_Boost","d37e8475":"## Tune Hyperparameters","44da0a14":"## Select Best Model To Run","5fb2c2c6":"There isn't an obvious correlation between features and target values.","559b1241":"## Load datasets","f9dceb91":"### Submission","9e24ddcc":"# Tabular Playground Series Prediction","658d6134":"### Model Evaluation","48f67930":"Since only numerical values are present, and no categorical values are obtained. It makes sense to consider regression models for fitting and training purposes.","0879f245":"## Preview Data before Processing","b6890882":"### Train Validation Split","6484c362":"## Data Preprocessing","52dcc6b9":"## Drop id column"}}