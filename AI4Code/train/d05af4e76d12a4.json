{"cell_type":{"55fa144b":"code","d8baa4e0":"code","8cade8f6":"code","3439bb76":"code","692a8cce":"code","d0ae10e4":"code","e8dd5266":"code","3e697ff4":"code","44514192":"code","b64d633b":"code","e69d3845":"code","fc999109":"code","2130c297":"code","d266406e":"code","07dd4b8b":"code","66d42c95":"code","bf6d08b8":"code","64288f43":"code","983e9f6d":"code","0d0f7d47":"code","3c909b3d":"code","26eaca51":"code","9478317a":"code","12f61291":"code","fa6c3c47":"markdown"},"source":{"55fa144b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d8baa4e0":"import pandas as pd\ndata1 = pd.read_csv(\"..\/input\/Expander_data.csv\")\ndata2 = pd.read_csv(\"..\/input\/Weather_data.csv\")","8cade8f6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nimport matplotlib.patches as mpatches\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import LSTM\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\n\nimport os","3439bb76":"data2.columns","692a8cce":"data2.head()","d0ae10e4":"data2['datetime_utc'] = pd.to_datetime(data2['datetime_utc'])\ndata2.set_index('datetime_utc', inplace= True)\ndata2 =data2.resample('D').mean()","e8dd5266":"data2 = data2[[' _tempm' ]]","3e697ff4":"data2.info()","44514192":"data2[' _tempm'].fillna(data2[' _tempm'].mean(), inplace=True) # we will fill the null row","b64d633b":"data2.info()","e69d3845":"data2.head()","fc999109":"plt.figure(figsize=(20,8))\nplt.plot(data2)\nplt.title('Time Series')\nplt.xlabel('Date')\nplt.ylabel('temperature')\nplt.show()","2130c297":"data2=data2.values\ndata2 = data2.astype('float32')","d266406e":"scaler= MinMaxScaler(feature_range=(-1,1))\nsc = scaler.fit_transform(data2)","07dd4b8b":"timestep = 30\n\nX= []\nY=[]\n\n\nfor i in range(len(sc)- (timestep)):\n    X.append(sc[i:i+timestep])\n    Y.append(sc[i+timestep])\n\n\nX=np.asanyarray(X)\nY=np.asanyarray(Y)\n\n\nk = 7000\nXtrain = X[:k,:,:]\nXtest = X[k:,:,:]    \nYtrain = Y[:k]    \nYtest= Y[k:]","66d42c95":"print(Xtrain.shape)\nprint(Xtest.shape)","bf6d08b8":"from keras.layers import Dense,RepeatVector\nfrom keras.layers import Flatten\nfrom keras.layers import TimeDistributed\nfrom keras.layers.convolutional import Conv1D\nfrom keras.layers.convolutional import MaxPooling1D\n","64288f43":"model = Sequential()\nmodel.add(Conv1D(filters=128, kernel_size=2, activation='relu', input_shape=(30,1)))\nmodel.add(Conv1D(filters=128, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(Flatten())\nmodel.add(RepeatVector(30))\nmodel.add(LSTM(100, activation='sigmoid'))\nmodel.add(Dense(100, activation='sigmoid'))\nmodel.add(Dense(1))\nmodel.compile(loss='mse', optimizer='adam')\nmodel.fit(Xtrain,Ytrain,epochs=100, verbose=0 )","983e9f6d":"preds_cnn1 = model.predict(Xtest)\npreds_cnn1 = scaler.inverse_transform(preds_cnn1)\n\n\nYtest=np.asanyarray(Ytest)  \nYtest=Ytest.reshape(-1,1) \nYtest = scaler.inverse_transform(Ytest)\n\n\nYtrain=np.asanyarray(Ytrain)  \nYtrain=Ytrain.reshape(-1,1) \nYtrain = scaler.inverse_transform(Ytrain)\n\nmean_squared_error(Ytest,preds_cnn1)","0d0f7d47":"plt.figure(figsize=(20,9))\nplt.plot(Ytest , 'blue', linewidth=5)\nplt.plot(preds_cnn1,'r' , linewidth=4)\nplt.legend(('Test','Predicted'))\nplt.show()","3c909b3d":"def insert_end(Xin,new_input):\n    for i in range(timestep-1):\n        Xin[:,i,:] = Xin[:,i+1,:]\n    Xin[:,timestep-1,:] = new_input\n    return Xin","26eaca51":"first =0   # this section for unknown future \nfuture=330\nforcast_cnn = []\nXin = Xtest[first:first+1,:,:]\nfor i in range(future):\n    out = model.predict(Xin, batch_size=1)    \n    forcast_cnn.append(out[0,0]) \n    Xin = insert_end(Xin,out[0,0])","9478317a":"forcasted_output_cnn=np.asanyarray(forcast_cnn)   \nforcasted_output_cnn=forcasted_output_cnn.reshape(-1,1) \nforcasted_output_cnn = scaler.inverse_transform(forcasted_output_cnn)","12f61291":"plt.figure(figsize=(16,9))\nplt.plot(Ytest , 'black', linewidth=4)\nplt.plot(forcasted_output_cnn,'r' , linewidth=4)\nplt.legend(('test','Forcasted'))\nplt.show()","fa6c3c47":"**Time Series Forecast using LSTM**"}}