{"cell_type":{"1908464c":"code","289a7fbe":"code","ce15264c":"code","08472ca5":"code","b3a73cfd":"code","b48712ca":"code","d71e7b18":"code","8b69d0ec":"code","a7ba4adf":"code","abd2f5b3":"code","861e6bcd":"code","914da002":"code","b8d812d9":"code","6231a0a3":"code","0aa4f312":"code","4828b7e8":"code","83055b84":"code","14426495":"code","f02b4dcc":"code","6dbfd1e1":"code","4e818ff9":"code","7ac7afd0":"code","47e7e371":"code","8ea50a51":"code","1d0d5bc2":"code","ec822971":"code","34dc9b51":"code","5c5337c0":"code","bbe920bb":"code","50eea532":"code","b24ba621":"code","5244c41e":"code","cf4f20f4":"code","11c78081":"code","b4644769":"code","64cd844b":"code","133e0f59":"code","e1a7ac7c":"code","02b483eb":"code","42431e4f":"code","9c173a25":"code","d644cf8a":"code","72ca1f31":"code","a7da03a8":"code","a6a2e927":"code","77b21431":"markdown","596b2aab":"markdown","49685f77":"markdown","e637d4f4":"markdown","96a7523e":"markdown","1b3603f6":"markdown","f55a3627":"markdown","022b0e4e":"markdown","293285fc":"markdown","7dc71d20":"markdown","cbb120b7":"markdown","cc43d7c0":"markdown","6a28a5ab":"markdown","8251e882":"markdown","8c5611f8":"markdown","aa9784c8":"markdown","c200309d":"markdown","6b8e6cb4":"markdown","1a8b4ebd":"markdown"},"source":{"1908464c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","289a7fbe":"tweet_data = pd.read_csv('\/kaggle\/input\/twitter-airline-sentiment\/Tweets.csv')\nprint(\"data shape:\",tweet_data.shape)\nprint(\"what are columns:\",tweet_data.columns)\ntweet_data.head()","ce15264c":"tweet_data = tweet_data.drop(['tweet_id','retweet_count', 'tweet_coord', 'tweet_created',\n                               'tweet_location','name','user_timezone'],axis = 1)","08472ca5":"tweet_data.head()","b3a73cfd":"tweet_data['negativereason_gold'].unique()","b48712ca":"tweet_data['negativereason'] = tweet_data['negativereason'].fillna('')\ntweet_data['negativereason_confidence'] = tweet_data['negativereason_confidence'].fillna(0)\ntweet_data['airline_sentiment_gold'] = tweet_data['airline_sentiment_gold'].fillna('')\ntweet_data['negativereason_gold'] = tweet_data['negativereason_gold'].fillna('')","d71e7b18":"tweet_data.head()","8b69d0ec":"print(\"different topics of negative reasons are:\",tweet_data['negativereason'].unique())","a7ba4adf":"!pip install contractions","abd2f5b3":"from nltk.corpus import stopwords\nimport string\nimport re\nimport contractions\ndef text_cleaning(text):\n    #not removing the stopwords so that the sentences stay normal.\n    #forbidden_words = set(stopwords.words('english'))\n    if text:\n        text = contractions.fix(text)\n        text = ' '.join(text.split('.'))\n        text = re.sub(r'\\s+', ' ', re.sub('[^A-Za-z0-9]', ' ', text.strip().lower())).strip()\n        text = re.sub(r'\\W+', ' ', text.strip().lower()).strip()\n        text = [word for word in text.split()]\n        return text\n    return []","861e6bcd":"tweet_data['text'] = tweet_data['text'].apply(lambda x: ' '.join(text_cleaning(x)))","914da002":"tweet_data.head(20)","b8d812d9":"import nltk","6231a0a3":"nltk.download([\"names\",\"stopwords\",\"state_union\",\"twitter_samples\",\n              \"movie_reviews\",\"averaged_perceptron_tagger\",\"vader_lexicon\",\n              \"punkt\"])","0aa4f312":"from nltk.sentiment import SentimentIntensityAnalyzer as SIA\nsia = SIA()\nprint(sia.polarity_scores('wow! this nltk library really works'))","4828b7e8":"texts = tweet_data['text'].tolist()\nnegative_scores = []\nneutral_scores = []\npositive_scores = []\ncompound_scores = []\nfinal_tag = []\nfor text in texts:\n    score_dictionary = sia.polarity_scores(text)\n    negative_scores.append(score_dictionary['neg'])\n    positive_scores.append(score_dictionary['pos'])\n    neutral_scores.append(score_dictionary['neu'])\n    compound_scores.append(score_dictionary['compound'])\n    if score_dictionary['compound']>0:\n        final_tag.append('positive')\n    elif score_dictionary['compound']<0:\n        final_tag.append('negative')\n    else:\n        final_tag.append('neutral')\ntweet_data['negative_score'] = negative_scores\ntweet_data['positive_score'] = positive_scores\ntweet_data['neutral_score'] = neutral_scores\ntweet_data['compound_score'] = compound_scores\ntweet_data['final_tag'] = final_tag","83055b84":"tweet_data.head(20)","14426495":"texts[17]","f02b4dcc":"from sklearn.metrics import classification_report as crep\nprint(\"sentiment analysis performance for nltk:\")\nprint(crep(tweet_data['airline_sentiment'],tweet_data['final_tag']))","6dbfd1e1":"!pip install -U textblob\n!python -m textblob.download_corpora","4e818ff9":"from textblob import TextBlob","7ac7afd0":"tb1 = TextBlob('I just am trying textblob first time.')\ntb1","47e7e371":"tb1.words","8ea50a51":"tb1.sentences","1d0d5bc2":"tb1.noun_phrases","ec822971":"tb2=TextBlob(\"Tags will give the Part of speech for all the words.\")\ntb2.tags","34dc9b51":"tb3=TextBlob(\" We are learning cool Library . We are enjoying a lot .\")\ntb3.noun_phrases","5c5337c0":"type(tb3.noun_phrases)","bbe920bb":"doc2=TextBlob(\"We are having fun here\")\ndoc2.polarity","50eea532":"texts = tweet_data['text'].tolist()\ntextblob_score = []\ntextblob_tag = []\nfor text in texts:\n    doc_current = TextBlob(text)\n    score = doc_current.polarity\n    textblob_score.append(score)\n    if score > 0:\n        textblob_tag.append('positive')\n    elif score<0:\n        textblob_tag.append('negative')\n    else:\n        textblob_tag.append('neutral')\ntweet_data['textblob_score'] = textblob_score\ntweet_data['textblob_sentiment_tag'] = textblob_tag","b24ba621":"tweet_data[['airline_sentiment','text','textblob_score','textblob_sentiment_tag']].head(20)","5244c41e":"print(\"sentiment analysis with textblob:\")\nprint(crep(tweet_data['airline_sentiment'],tweet_data['textblob_sentiment_tag']))","cf4f20f4":"from transformers import pipeline\nclassifier = pipeline('sentiment-analysis')\nclassifier(\"I am so happy to use huggingface today!\")[0]['label']","11c78081":"classifier(\"it was a extremely bad movie!\")[0]['label']","b4644769":"classifier(\"it is a statement\")[0]['label']","64cd844b":"tweet_data['bert_based_sentiment'] = tweet_data['text'].apply(lambda x: classifier(x)[0]['label'].lower())\ntweet_data_cut = tweet_data[tweet_data['airline_sentiment']!='neutral']\nprint(crep(tweet_data_cut['airline_sentiment'],tweet_data_cut['bert_based_sentiment']))","133e0f59":"classifier_febu = pipeline('sentiment-analysis',model = 'facebook\/bart-large')\nclassifier_febu(\"I hate it!\")\nclassifier_febu(\"I love you!\")","e1a7ac7c":"def sentiment_analysis(text):\n    sentiment = classifier_febu(text)[0]['label']\n    if sentiment == 'LABEL_0': return 'positive'\n    return 'negative'","02b483eb":"tweet_data['facebook_bert_based_sentiment'] = tweet_data['text'].apply(sentiment_analysis)\ntweet_data_cut = tweet_data[tweet_data['airline_sentiment']!='neutral']\nprint(crep(tweet_data_cut['airline_sentiment'],tweet_data_cut['facebook_bert_based_sentiment']))","42431e4f":"classifier_third = pipeline('sentiment-analysis',model = 'cardiffnlp\/twitter-roberta-base-sentiment')\nprint(classifier_third(\"I hate it!\"))\nprint(classifier_third(\"I love you!\"))\nprint(classifier_third(\"I don't know about the routine\"))\ndef sentiment_analysis_third(text):\n    sentiment = classifier_third(text)[0]['label']\n    if sentiment == 'LABEL_0': return 'negative'\n    elif sentiment == 'LABEL_1': return 'neutral'\n    elif sentiment == 'LABEL_2': return 'positive'\n    return 'neutral'\ntweet_data['facebook_bert_based_sentiment'] = tweet_data['text'].apply(sentiment_analysis_third)\nprint(crep(tweet_data['airline_sentiment'],tweet_data['facebook_bert_based_sentiment']))","9c173a25":"!pip install flair","d644cf8a":"from flair.models import TextClassifier\nfrom flair.data import Sentence\nclassifier = TextClassifier.load('en-sentiment')\nsentence = Sentence('Flair is pretty neat!')\nclassifier.predict(sentence)\n# print sentence with predicted labels\nprint('Sentence above is: ', sentence.labels)","72ca1f31":"print(str(sentence.labels[0]).split(\"(\")[0].lower()[:-1])","a7da03a8":"def sentiment_analysis_flair(text):\n    sentence = Sentence(text)\n    classifier.predict(sentence)\n    return str(sentence.labels[0]).split(\"(\")[0].lower()[:-1]","a6a2e927":"tweet_data['flair_based_sentiment'] = tweet_data['text'].apply(sentiment_analysis_flair)\ntweet_data_cut = tweet_data[tweet_data['airline_sentiment']!='neutral']\nprint(crep(tweet_data_cut['airline_sentiment'],tweet_data_cut['flair_based_sentiment']))","77b21431":"## Flair:\n[Flair NLP](https:\/\/github.com\/flairNLP\/flair) is a very simple NLP framework and contains a number of pretrained models. We will use the library for sentiment analysis in this section.","596b2aab":"## Twitter sentiment analysis of airlines:\n![sentiment analysis: credits: kdnuggets](https:\/\/www.kdnuggets.com\/wp-content\/uploads\/sentiment-hero-480.jpg)<br\/>\nSentiment analysis is a term that refers to the use of natural language processing, text analysis, and computational linguistics in order to ascertain the attitude of a speaker or writer toward a specific topic.<br\/>\n<br\/>\nBasically, it helps to determine whether a text is expressing sentiments that are positive, negative, or neutral. Sentiment analysis is an excellent way to discover how people, particularly consumers, feel about a particular topic, product, or idea.<br\/>\n<br\/>\nThe origin of sentiment analysis can be traced to the 1950s, when sentiment analysis was primarily used on written paper documents. Today, however, sentiment analysis is widely used to mine subjective information from content on the Internet, including texts, tweets, blogs, social media, news articles, reviews, and comments. This is done using a variety of different techniques, including NLP, statistics, and machine learning methods. Organizations then use the information mined to identify new opportunities and better target their message toward their target demographics. The Obama Administration used sentiment analysis to predict public response to its policy announcements.<br\/>  \n## How many types of sentiment analysis are there?\nAccording to [upgrad](https:\/\/www.upgrad.com\/blog\/types-of-sentiment-analysis\/), there are 4 types of sentiment analyses. <br\/>\n### (1) Fine grained sentiment analysis:\nThis analysis gives you an understanding of the feedback you get from customers. You can get precise results in terms of the polarity of the input. However, the process to understand this can be more labor and cost-intensive as compared to other types. <br\/>\n### (2) Emotion Detection Sentiment Analysis\n\nThis is a more sophisticated way of identifying the emotion in a piece of text. Lexicons and machine learning are used to determine the sentiment. Lexicons are lists of words that are either positive or negative. This makes it easier to segregate the terms according to their sentiment. The advantage of using this is that a company can also understand why a customer feels a particular way. This is more algorithm-based and might be complex to understand at first.<br\/>\n\n### (3) Aspect-based analysis\n\nThis type of sentiment analysis is usually for one aspect of a service or product. For example, if a company that sells televisions uses this type of sentiment analysis, it could be for one aspect of televisions \u2013 like brightness, sound, etc. So they can understand how customers feel about specific attributes of the product. <br\/>\n\n### (4) Intent analysis\n\nThis is a deeper understanding of the intention of the customer. For example, a company can predict if a customer intends to use the product or not. This means that the intention of a particular customer can be tracked, forming a pattern, and then used for marketing and advertising. <br\/>\n<br\/>\nIn this notebook, we are going to explore different sentiment analysis procedures but we will not train any new one. For training a sentiment analysis procedure from scratch, follow this [notebook](https:\/\/www.kaggle.com\/shyambhu\/sentiment-classification-using-lstm).<br\/>\n### Here are the contents of this notebook:\n(1) [Data analysis and cleaning for airline data](#dataclean)<br\/>\n(2) [sentiment analysis using NLTK](#nltk)<br\/>\n(3) [sentiment analysis using textblob](#blob)<br\/>\n(4) [sentiment analysis using huggingface](#huggingface)<br\/>\n(5) [sentiment analysis using flair](#flair)<br\/>\n(6) [conclusion](#conclude)<br\/>\n### Resources:\n(1) [upgrad introduction to sentiment analysis](https:\/\/www.upgrad.com\/blog\/types-of-sentiment-analysis\/)<br\/>\n(2) [lexalytics sentiment analysis introduction](https:\/\/www.lexalytics.com\/technology\/sentiment-analysis)<br\/>\n(3) [Contractions, a useful python library](https:\/\/github.com\/kootenpv\/contractions)<br\/>\n(4) [Different sentiment analysis libraries in python](https:\/\/www.iflexion.com\/blog\/sentiment-analysis-python)<br\/>\n(5) [sentiment analysis using NLTK](https:\/\/realpython.com\/python-nltk-sentiment-analysis\/)<br\/>\n(6) [monkeylearn api; not implemented here](https:\/\/app.monkeylearn.com\/main\/classifiers\/cl_pi3C7JiL\/tab\/api\/)<br\/>\n(7) [sentiment analysis using textblob](https:\/\/www.presentslide.in\/2019\/08\/sentiment-analysis-textblob-library.html)<br\/>\n(8) [Using pretrained models for sentiment analysis](https:\/\/medium.com\/@b.terryjack\/nlp-pre-trained-sentiment-analysis-1eb52a9d742c)<br\/>\n(9) [text classification using sentiment analysis](https:\/\/towardsdatascience.com\/text-classification-with-state-of-the-art-nlp-library-flair-b541d7add21f)\n### Acknowledgements:\nI would like to thank [vetrivel-ps](https:\/\/www.kaggle.com\/vetrirah) and [Atif hassan](https:\/\/www.kaggle.com\/atifhassan) for helping me with some of the resources and ideas for improvements.","49685f77":"Let's append this sentiment scores to our original dataset. ","e637d4f4":"So clearly, textblob also follows the normal pipeline format, where we make a textblob object out of the text and then we will be working with this object further for the different processing.","96a7523e":"### tokenization and sentence segmentation:","1b3603f6":"## <a id = 'blob'>Sentiment analysis with Textblob<\/a>:\n","f55a3627":"probably this fails as the negativity is in the sense; but not on any word basis. Let's now try textblob. Let's see if that works.","022b0e4e":"So textblob is also fine and matches most of the airline tags, but doesn't match in a few cases. Interestingly, the case 17th, where it was a sense wise negative sentence, is again missed by textblob as well. Let's check the textblob's accuracy.","293285fc":"## Description of the nltk packages downloaded:\n*     names: A list of common English names compiled by Mark Kantrowitz\n*     stopwords: A list of really common words, like articles, pronouns, prepositions, and conjunctions\n*     state_union: A sample of transcribed State of the Union addresses by different US presidents, compiled by Kathleen Ahrens\n*     twitter_samples: A list of social media phrases posted to Twitter\n*     movie_reviews: Two thousand movie reviews categorized by Bo Pang and Lillian Lee\n*     averaged_perceptron_tagger: A data model that NLTK uses to categorize words into their part of speech\n*     vader_lexicon: A scored list of words and jargon that NLTK references when performing sentiment analysis, created by C.J. Hutto and Eric Gilbert\n*     punkt: A data model created by Jan Strunk that NLTK uses to split full texts into word lists\n","7dc71d20":"As you can see, we get back a dictionary of different scores. The negative, neutral, and positive scores are related: They all add up to 1 and can\u2019t be negative. The compound score is calculated differently. It\u2019s not just an average, and it can range from -1 to 1.<br\/>\n### Question1: comment if you know:\nhow is the compound score calculated as it is clearly not a average?","cbb120b7":"Let's check why some sentences are failing.","cc43d7c0":"Before doing sentiment analysis, let's explore a few attributes.","6a28a5ab":"## <a id= 'huggingface'>Huggingface Transformer based sentiment analysis<\/a>\nIn this section we will do sentiment analysis using pretrained huggingface transformer models. We will also measure their performances and comment on it.<br\/>\n(1) [different sentiment models in huggingface](https:\/\/huggingface.co\/models?search=sentim)<br\/>\n(2) [huggingface quicktour](https:\/\/huggingface.co\/transformers\/quicktour.html)<br\/>\n(3) [possible bug to look for](https:\/\/github.com\/huggingface\/transformers\/issues\/4263)<br\/>\n","8251e882":"### pos tagging:","8c5611f8":"### Polarity:\n\nPolarity as discussed earlier helps us in finding the expression and emotion of the author in the text. The value ranges from -1.0 to +1.0 and they contain float values.<br\/>\n\nLess than 0 denotes Negative<br\/>\nEqual to 0 denotes Neutral<br\/>\nGreater than 0 denotes Positive<br\/>\n<br\/>\nA value near to +1 is more likely to be positive than a value near 0. The same is in the case of negativity.<br\/>","aa9784c8":"## <a id = dataclean> Data Cleaning<\/a>\nNow, our goal in this work is to detect sentiment from the tweet text. So we will drop all the unnecessary columns from the data as well as clean it a bit.","c200309d":"## How to calculate sentiment from nltk:\nNLTK already has a built-in, pretrained sentiment analyzer called VADER (Valence Aware Dictionary and sEntiment Reasoner).\n\nSince VADER is pretrained, you can get results more quickly than with many other analyzers. However, VADER is best suited for language used in social media, like short sentences with some slang and abbreviations. It\u2019s less accurate when rating longer, structured sentences, but it\u2019s often a good launching point.\n\nTo use VADER, first create an instance of nltk.sentiment.SentimentIntensityAnalyzer, then use .polarity_scores() on a raw string:","6b8e6cb4":"## <a id = conclude>Conclusion<\/a>:\nIn this notebook, we preprocessed a airline tweet data set and then used both nltk ( VADER based pretrained system) and textblob to detect, and generate the scores for sentiments for the tweets. We did a bit of superficial observation of the performance of both the systems as well. In both cases, we saw that very implicitly meant negative cases are missed by the models; and hints at the importance of custom sentiment model training.<br\/>\nWe also tried out a number of pretrained models from huggingface for sentiment analysis and the vanilla models didn't function well, while models specifically trained for sentiment performed much better.<br\/>\n### percentage-wise model comparison:\nThe NLTK, textblob performed at 50% around accuracy, and while facebook's bart model seemed to be unfit for the downstream task of sentiment analysis, other two models such as the default huggingface model for sentiment analysis performed at 89% accuracy for positive\/negative sentiment classification and the cardiffnlp's twitter data based roberta model performed at 70% accuracy for the 3 class classification.<br\/>\nWith this, our sentiment analysis concludes. We may add further frameworks in later versions of this work.<br\/>\nIn the comments, please let us know what specific insights could have been made, or what other frameworks we should definitely try in this case. Thanks for reading the notebook. It will be great to see your appreciation if you liked my work.","1a8b4ebd":"## <a id = nltk> Sentiment Analysis with NLTK<\/a>:\nIn this section we will perform sentiment analysis using nltk."}}