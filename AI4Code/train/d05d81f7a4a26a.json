{"cell_type":{"8893995f":"code","3135d412":"code","4410c460":"code","611de083":"code","8d44b6f4":"code","3c5490cc":"code","f112ff4e":"code","d4314dbb":"code","527b4ad4":"code","bc49f1ae":"code","162f82ea":"code","233bb20f":"code","ab6b93d4":"code","41df0d08":"code","133f2de6":"code","3aa31cc8":"code","3de6134f":"code","243e224c":"code","2fe8e224":"code","f9eb8b67":"code","98dc4cf6":"code","efa95810":"code","b670dd53":"code","988c617d":"code","67614b74":"code","6dc9a05c":"code","5f5cfe3d":"markdown","f541547c":"markdown","fb6ab8e2":"markdown","fc5f4b35":"markdown","df6eefbf":"markdown","ca76957e":"markdown"},"source":{"8893995f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import classification_report , confusion_matrix\nfrom sklearn.model_selection import train_test_split","3135d412":"df = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","4410c460":"df.head()","611de083":"df.info()","8d44b6f4":"df.describe()","3c5490cc":"df[\"Potability\"].unique()","f112ff4e":"df1 = df.dropna()","d4314dbb":"train_x = df1.drop(columns = df.columns[-1])\ntrain_y = df1[df.columns[-1]]","527b4ad4":"x_train ,  x_test ,y_train , y_test = train_test_split(train_x , train_y , test_size = 0.3 , random_state = 4)","bc49f1ae":"from sklearn import linear_model\n\nreg = linear_model.RidgeCV(alphas = np.logspace(-6,6 , 13))\nreg.fit(train_x , train_y)","162f82ea":"reg.alpha_","233bb20f":"preds = reg.predict(x_test)\npreds[1:10]","ab6b93d4":"from sklearn.naive_bayes import GaussianNB , CategoricalNB","41df0d08":"Basicgnb = GaussianNB()\ny_pred = gnb.fit(x_train , y_train).predict(x_test)","133f2de6":"print(classification_report(y_pred, y_test , digits=2))","3aa31cc8":"# generate and plot confusion matrix\narray = confusion_matrix(y_pred, y_test)\ndf_cm = pd.DataFrame(array)\nplt.figure(figsize = (5,5))\nsns.heatmap(df_cm, annot=True)","3de6134f":"from sklearn import tree","243e224c":"clf = tree.DecisionTreeClassifier()\nclf = clf.fit(x_train , y_train)\npreds =  clf.predict(x_test)","2fe8e224":"print(classification_report(preds , y_test))","f9eb8b67":"array = confusion_matrix(preds, y_test)\ndf_cm = pd.DataFrame(array)\nplt.figure(figsize = (5,5))\nsns.heatmap(df_cm, annot=True)","98dc4cf6":"from sklearn.metrics import plot_roc_curve\n\nsvs_disp = plot_roc_curve(clf , x_test , y_test , alpha = 0.7)","efa95810":"# Save a photo as image\n#tree.plot_tree(clf)\n\n\n# Save tree as a pdf \nimport graphviz\n\nclass_names = ['Portability0' , 'Portability1']\nfeature_names = x_train.columns.to_list()\ndot_data = tree.export_graphviz(clf , out_file = None , feature_names = feature_names , class_names = class_names,  rounded =True , filled =True , special_characters = True)\n\ngraph = graphviz.Source(dot_data)\ngraph.render(\"WaterPol\")\ngraph","b670dd53":"from sklearn.ensemble import RandomForestClassifier","988c617d":"rfc = RandomForestClassifier(random_state = 42)","67614b74":"rfc.fit(x_train , y_train)\n\nax = plt.gca()\nrfc_disp = plot_roc_curve(rfc , x_test  , y_test , ax =ax , alpha = 0.8)","6dc9a05c":"from sklearn import neighbors, datasets\n\nn_neighbors = 5\n\nfor weights in ['uniform', 'distance']:\n    clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights)\n    clf.fit(x_train, y_train)","5f5cfe3d":"# Decision tree\n\nhttps:\/\/scikit-learn.org\/stable\/modules\/tree.html#classification","f541547c":"# Nearest neighbour","fb6ab8e2":"# Linear model","fc5f4b35":"# Naives bayes classifier","df6eefbf":"# Random Forest","ca76957e":"# Sklearn models\n\nhttps:\/\/scikit-learn.org\/stable\/user_guide.html"}}