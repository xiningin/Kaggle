{"cell_type":{"94fb754a":"code","077de86d":"code","2ae28394":"code","6bae22c7":"code","98e26096":"code","40abd238":"code","52c75752":"code","952aad54":"code","afe696d9":"code","922139c4":"code","d4a5b8e4":"code","1829c5ce":"code","9dd67572":"code","547ab03d":"code","438a8ca4":"code","51420f02":"code","26530bb5":"code","368d822a":"code","4364b786":"code","c8836e3c":"code","b808e446":"code","889f01c0":"code","459000bd":"code","e6515509":"code","474da124":"code","72b74c71":"code","5f5ec374":"code","ca0c47df":"code","3a142be7":"code","b2397121":"code","3e2ffb67":"code","5dfd72b6":"code","f93240bd":"markdown","d77f3f97":"markdown","9e0f8d91":"markdown","ba2cd8ba":"markdown","0972a41e":"markdown"},"source":{"94fb754a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","077de86d":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")","2ae28394":"data.columns","6bae22c7":"data.head()","98e26096":"data.tail()","40abd238":"data.info","52c75752":"data.describe()","952aad54":"data.isnull().any()","afe696d9":"data['class'].unique()","922139c4":"data['class']  = [0 if each ==\"Normal\" else 1 for each in data['class']]","d4a5b8e4":"data.head()","1829c5ce":"data.tail()","9dd67572":"data['class'].unique()","547ab03d":"y = data['class'].values\nx_data = data.loc[:,data.columns != 'class']","438a8ca4":"x = (x_data - np.min(x_data))\/(np.max(x_data)- np.min(x_data))","51420f02":"x","26530bb5":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train ,y_test = train_test_split(x,y ,test_size = 0.2 ,random_state=42 )","368d822a":"x_train.shape","4364b786":"x_test.shape","c8836e3c":"x_train = x_train.T\nx_train.shape","b808e446":"x_test = x_test.T\nx_test.shape","889f01c0":"y_train.shape","459000bd":"y_test.shape","e6515509":"def initialize_weights_and_bias(dimension):\n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b","474da124":"def sigmoid(z):\n    y_head = 1\/(1+ np.exp(-z)) \n    return y_head","72b74c71":"def forward_backward_propagation(w,b,x_train,y_train):\n    z = np.dot(w.t,x_train)+b\n    y_head=sigmoid(z)\n    loss=-y_train*np.log(y_head-(1-y_train)*np.log(1-y_head))\n    cost=(np.sum(loss)\/x_train.shape[1])\n    \n    deriative_weight = np.dot(x_train,((y_head-y_train).T))\/x_train.shape[1]\n    deriative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"deriative_weight\": deriative_weight, \"deriative_bias\": deriative_bias}\n    \n    return cost,gradient","5f5ec374":"def update(w,b,x_train,y_train,learning_rate, number_of_iteration):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    \n    for i in range(number_of_iteration):\n        cost,gradient= forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w = w- learning_rate*gradient[\"deriative_weight\"]\n        b = b- learning_rate*gradient[\"deriative_bias\"]\n        if i %5 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"cost after iteration %i: %f\" %(i,cost))\n    \n    parameters = {\"weight\": w, \"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index, rotation='vertical')\n    plt.xlabel(\"Number of iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    \n    return parameters,gradients,cost_list","ca0c47df":"def predict(w,b,x_test):\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction= np.zeros((1,x_test.shape[1]))\n    \n    for i in range(z.shape[1]):\n        if z[0,i] <=0.5:\n            y_prediction[0,i]=0\n        else :\n            y_prediction[0,i]=1\n    \n    return y_prediction","3a142be7":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\n","b2397121":"print(\"test accuracy {}\".format(lr.score(x_test.T,y_test.T)))","3e2ffb67":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=15)\nknn.fit(x_train.T, y_train.T)\n\nprediction= knn.predict(x_test.T)\nprint(\"{} nn score:{} \".format(15,knn.score(x_test.T,y_test.T)))","5dfd72b6":"score_list=[]\nfor each in range (1,20):\n    knn2= KNeighborsClassifier(n_neighbors=each)\n    knn2.fit(x_train.T,y_train.T)\n    score_list.append(knn2.score(x_test.T,y_test.T))\n\nplt.plot(range(1,20),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"acuuracy\")\nplt.show()","f93240bd":"# Data Train and Test Split","d77f3f97":"# K-Nearest Neighbour(KNN) Classification","9e0f8d91":"# Data Check","ba2cd8ba":"# LR","0972a41e":"# Logistic Regression"}}