{"cell_type":{"c12f078b":"code","796dafd0":"code","f254bff5":"code","05d6aec2":"code","e97432bf":"code","e6a86050":"code","69a66b92":"code","aaf972ab":"code","6962d235":"code","1172e7e9":"code","65aaf93a":"code","df22ae87":"code","bf02bcb0":"code","a86b9243":"code","06948f0c":"code","b0932641":"code","017f8101":"code","96665dd3":"code","0cbe2e07":"code","f1b00d92":"code","62e3efb4":"code","2f0164da":"code","28ed3660":"code","23fe5af1":"code","ab3b66bf":"code","dcb9c324":"code","c0466e69":"code","f53d5468":"code","a1be70dd":"code","67ec07fc":"code","bc6087e2":"code","e9d62d95":"code","2f0f1d08":"code","fb2b2cdf":"code","4903d598":"code","4b607da4":"code","babdecb2":"code","382e858f":"code","8ef1a3d1":"code","1672b220":"code","23b1e816":"code","1f74201a":"code","0eaed079":"code","acd6bbe9":"code","c9ba9c38":"code","9371516e":"code","d3129252":"code","9518f4f6":"code","82f7df54":"code","ffa122f6":"code","2ba67022":"code","0bee15ef":"code","0b2bf0b7":"code","65bd4579":"code","376aa3c1":"code","46024c97":"code","0b2c0b89":"code","512878cc":"markdown","8aaf5eb2":"markdown","ed10f86a":"markdown","a6bbe995":"markdown","b08b7ae2":"markdown","35142aac":"markdown","922b1318":"markdown","a177695f":"markdown","2883f3af":"markdown","ee370836":"markdown","2c6d0cf9":"markdown","eb37dd71":"markdown","e1529be0":"markdown","89c22206":"markdown","fcaf6428":"markdown","0fcd1f4e":"markdown","69817f34":"markdown","c09eb54f":"markdown","922f882a":"markdown","ce2dc1cc":"markdown","ebb52ab6":"markdown","6cb77bb4":"markdown","f6e909ab":"markdown"},"source":{"c12f078b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","796dafd0":"import numpy as np\nimport pandas as pd\nimport math \nimport tensorflow as tf\nimport matplotlib.pyplot as plt","f254bff5":"from tqdm import tqdm\nfrom skimage import feature\nfrom skimage import measure\nfrom sklearn.model_selection import train_test_split\n\nfrom matplotlib import pyplot as plt","05d6aec2":"os.listdir('\/kaggle\/input\/thai-mnist-classification')","e97432bf":"dftrmap = pd.read_csv('\/kaggle\/input\/thai-mnist-classification\/mnist.train.map.csv')","e6a86050":"dftrmap.head() ","69a66b92":"dftrmap.info()","aaf972ab":"import seaborn as sns\n\nsns.countplot(dftrmap['category'])\n#Count number of each classes","6962d235":"import os\nvisual_df = pd.read_csv(os.path.join('..\/input\/thai-mnist-classification','mnist.train.map.csv'))\n","1172e7e9":"import cv2 #for image processing\ndef visual_img(dftrmap, category):\n    \n    fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(5, 5))\n    randompic = dftrmap[dftrmap['category'] == category]['id'].sample(25).values\n\n    for idx, image in enumerate(randompic):\n        final_path = os.path.join('..\/input\/thai-mnist-classification', 'train',image)\n        img = cv2.imread(final_path)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        axes.ravel()[idx].imshow(img)\n        axes.ravel()[idx].axis('off')\n    plt.tight_layout()","65aaf93a":"cat = [x for x in range(10)]","df22ae87":"for i, category in enumerate(cat):\n    visual_img(visual_df,category)","bf02bcb0":"dftrain = pd.read_csv('\/kaggle\/input\/thai-mnist-classification\/train.rules.csv')","a86b9243":"dftrain.head()","06948f0c":"dftrain.info()","b0932641":"dftest = pd.read_csv('\/kaggle\/input\/thai-mnist-classification\/test.rules.csv')","017f8101":"dftest.head()","96665dd3":"dftest.info()","0cbe2e07":"dfdrop= pd.read_csv(\"https:\/\/github.com\/22p23c0146\/SuperAIEngineer\/raw\/22p23c0146-W4HW1\/drop_lists.csv\") \ndrop_lists = dfdrop['id'].values\n\n\n# Remove droplist from label sets\nfilter_df = dftrmap[~dftrmap['id'].isin(drop_lists)]\nfilter_df","f1b00d92":"# Prepare Validation set\ntest_folder_path = \"\/kaggle\/input\/thai-mnist-classification\/test\"\ntest_images = [f for f in os.listdir(test_folder_path) if os.path.isfile(os.path.join(test_folder_path, f))]\nvalid_array = {'id': [], 'category': []}\n\nfor i in range(len(test_images)):\n    valid_array['id'].append(test_images[i])\n    valid_array['category'].append(0)\n    # print(test_images[1])\n\nvalid_df = pd.DataFrame(valid_array , columns=['id','category'])\nvalid_df","62e3efb4":"class getdata():\n    def __init__(self,df, group='train'):\n        self.label_df = df \n        self.group = group\n        self.dataFile = self.label_df['id'].values\n        self.label = self.label_df['category'].values\n        self.n_index = len(self.dataFile)\n        \n    def getImageByIndex(self,index):\n        return self.label_df.iloc[index]['id']\n    \n    def getLabelByIndex(self,index):\n        return self.label_df.iloc[index]['category']\n        \n    def getImage(self,index,mode='rgb',label = False ):\n        image_id = self.label_df.iloc[index]['id']\n        path = f\"..\/input\/thai-mnist-classification\/{self.group}\/{image_id}\"\n        img  = cv2.imread(path)\n        if mode == 'rgb':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        elif mode == 'gray':\n            img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n        if label:\n            return img,self.label_df.iloc[img_index]['category']\n        return img\n        \n        \n    \n    def get1img(self,index,mode='rgb',label = False):\n        image_id = self.label_df.iloc[index]['id']\n        path = f\"..\/input\/thai-mnist-classification\/{self.group}\/{image_id}\"\n        img = cv2.imread(path)\n        if mode == 'rgb':\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        elif mode == 'gray':\n            img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n        if label:\n            return img,self.label_df.iloc[index]['category']\n        return img","2f0164da":"gdt = getdata(filter_df,group='train')\ngdt.dataFile.shape","28ed3660":"gvalid = getdata(valid_df, group='test')\ngvalid.dataFile.shape","23fe5af1":"from skimage.morphology import convex_hull_image\nfrom skimage.util import invert","ab3b66bf":"temp_img = invert(gdt.get1img(60,'gray'))\n# \nfig, [ax1,ax2] = plt.subplots(1, 2)\nax1.imshow(temp_img)\ncvh =  convex_hull_image(temp_img)\nax2.imshow(cvh)","dcb9c324":"def convex_crop(img,pad=20):\n    convex = convex_hull_image(img)\n    r,c = np.where(convex)\n    while (min(r)-pad < 0) or (max(r)+pad > img.shape[0]) or (min(c)-pad < 0) or (max(c)+pad > img.shape[1]):\n        pad = pad - 1\n    return img[min(r)-pad:max(r)+pad,min(c)-pad:max(c)+pad]","c0466e69":"crop_img = convex_crop(temp_img,pad=10)\nplt.imshow(crop_img)","f53d5468":"def convex_resize(img):\n    img = invert(img)\n    img = convex_crop(img,pad=20)\n    img = cv2.resize(img,(32,32))\n    return img","a1be70dd":"def thes_resize(img,thes=40):\n    img = invert(img)\n    img = convex_crop(img,pad=20)\n    img = ((img > thes)*255).astype(np.uint8)\n    if(min(img.shape) > 300):\n        img = cv2.resize(img,(300,300))\n        img = ((img > thes)*255).astype(np.uint8)\n    if(min(img.shape) > 150):\n        img = cv2.resize(img,(150,150))\n        img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(80,80))\n    img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(50,50))\n    img = ((img > thes)*255).astype(np.uint8)\n    img = cv2.resize(img,(32,32))\n    img = ((img > thes)*255).astype(np.uint8)\n    return img","67ec07fc":"# Thesholding Train Data\ntemp_img = gdt.get1img(99,'gray')\nfig, [ax1,ax2] = plt.subplots(1, 2,figsize=(10,7))\nax1.imshow(convex_resize(temp_img))\nax1.set_title('Without thresholding')\nax2.imshow(thes_resize(temp_img))\nax2.set_title('Thresholding')","bc6087e2":"# Thesholding Valid Data\ntemp_valid_img = gvalid.get1img(5,'gray')\nfig, [ax1,ax2] = plt.subplots(1, 2,figsize=(10,7))\nax1.imshow(convex_resize(temp_valid_img))\nax1.set_title('Without thresholding')\nax2.imshow(thes_resize(temp_valid_img))\nax2.set_title('Thresholding')","e9d62d95":"fig, ax = plt.subplots(5, 5, figsize=(15,15))\nfor i in range(5):\n    for j in range(5):\n        img_index = np.random.randint(0,gdt.n_index)\n        ax[i][j].imshow(thes_resize(gdt.get1img(img_index,'gray')))\n        ax[i][j].set_title('Class: '+str(gdt.label[img_index]))\n        ax[i][j].set_axis_off()","2f0f1d08":"X = []\n\nfor i , image_path in enumerate(tqdm(gdt.dataFile)):\n    X.append(thes_resize(gdt.get1img(i,'gray')))\n\nX = np.array(X)   \ny = gdt.label\nX = X.reshape((-1,32,32,1))\nX.shape,y.shape","fb2b2cdf":"X_valid = []\n\nfor i , image_path in enumerate(tqdm(gvalid.dataFile)):\n    image = gvalid.get1img(i,'gray')\n    X_valid.append(thes_resize(image))\n\nX_valid = np.array(X_valid)    \nX_valid = X_valid.reshape((-1,32,32,1))\nX_valid.shape","4903d598":"y_cat = tf.keras.utils.to_categorical(y)\ny_cat.shape","4b607da4":"X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.25, random_state=100)","babdecb2":"X_train = X_train \/ 255.\nX_test = X_test \/ 255.","382e858f":"model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Conv2D(6, (5,5), input_shape=(32, 32, 1), activation='relu'))\nmodel.add(tf.keras.layers.MaxPool2D()) \nmodel.add(tf.keras.layers.Conv2D(16, (5,5), activation='relu')) \nmodel.add(tf.keras.layers.MaxPool2D()) \nmodel.add(tf.keras.layers.Flatten()) \nmodel.add(tf.keras.layers.Dense(120, activation='relu'))\nmodel.add(tf.keras.layers.Dense(84, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['acc'])","8ef1a3d1":"model.summary()","1672b220":"learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.0000001)\n\nearly_stop = tf.keras.callbacks.EarlyStopping(monitor='val_acc', patience=10,verbose=1)","23b1e816":"history = model.fit(X_train, y_train, batch_size=64,validation_data=(X_test,y_test), epochs=200, callbacks=[learning_rate_reduction,early_stop])","1f74201a":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])","0eaed079":"plt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])","acd6bbe9":"# Prepare validation set\nprint(len(X_valid))\n\nprediction = model.predict(X_valid)\nlabel_df = valid_df\n\nprint(len(prediction))\n\n# Prepare blank object\npredict_array = {'id': [], 'category': []}\ncount_error   = 0\n\nid_val = label_df['id'].values\n\n# Prediction\nfor index in range(len(prediction)):\n    result = np.where(prediction[index] == np.amax(prediction[index]))\n    try:\n        predict_label = result[0][0]\n        predict_id    = id_val[index] # label_df['id'].values\n        predict_array['id'].append(predict_id)\n        predict_array['category'].append(predict_label)\n    except:\n        count_error += 1\n\nprint(f\"found ... {count_error} errors\")","c9ba9c38":"### Download predict CSV\npredict_df = pd.DataFrame(predict_array , columns=['id','category'])","9371516e":"predict_df.head()","d3129252":"predict_df[['id', 'category']].to_csv('\/kaggle\/working\/val.csv')","9518f4f6":"from IPython.display import FileLink\nos.chdir(r'\/kaggle\/working')\nFileLink(r'val.csv')","82f7df54":"# Rule controlling\ntest_rule_df = pd.read_csv('\/kaggle\/input\/thai-mnist-classification\/test.rules.csv')\ntest_rule_df.head(5)","ffa122f6":"def translate(val):\n    lock = predict_df.iloc[3]['category']\n    return lock    ","2ba67022":"def translate(x):\n    try:\n        n = predict_df[predict_df['id']==x]\n        return n['category'].values[0]\n    except:\n        return 11","0bee15ef":"test_rule_df['feauture1_trans'] = test_rule_df.apply(lambda x:  translate(x['feature1']) , axis=1)\ntest_rule_df['feauture2_trans'] = test_rule_df.apply(lambda x:  translate(x['feature2']) , axis=1)\ntest_rule_df['feauture3_trans'] = test_rule_df.apply(lambda x:  translate(x['feature3']) , axis=1)\n    \ntest_rule_df","0b2bf0b7":"def calculate(f1,f2,f3):\n    if(f1 == 0):\n        return f2*f3\n    elif(f1 == 1):\n        return abs(f2-f3)\n    elif(f1 == 2):\n        return (f2 + f3)*abs(f2 - f3)\n    elif(f1 == 3):\n        return abs((f3 * (f3 + 1) - f2 * (f2 - 1))\/2)\n    elif(f1 == 4):\n        return 50 + (f2 - f3)\n    elif(f1 == 5):\n        return min([f2 , f3])\n    elif(f1 == 6):\n        return max([f2 , f3])\n    elif(f1 == 7):\n        return ((f2 * f3) % 9) *11\n    elif(f1 == 8):\n        return (((f2 ** 2) + 1) * f2) + (f3 * (f3 + 1)) % 99\n    elif(f1 == 9):\n        return 50 + f2\n    else:\n        return f2 + f3","65bd4579":"test_rule_df['predict'] = test_rule_df.apply(lambda x: calculate(x['feauture1_trans'] , x['feauture2_trans'] , x['feauture3_trans']) , axis=1)\ntest_rule_df","376aa3c1":"test_rule_df.astype({'predict': 'int'}).dtypes\n\nresult = test_rule_df[['id', 'predict']]\n\nresult.head(10)\n","46024c97":"result.to_csv('\/kaggle\/working\/submit.csv')","0b2c0b89":"os.chdir(r'\/kaggle\/working')\nFileLink(r'submit.csv')","512878cc":"# Visualize the data to see the difference","8aaf5eb2":"Plot loss and accuracy to check the efficiency of the model","ed10f86a":"Some data from the picture are not clear so we try to clean the data before using in the model.","a6bbe995":"Split data for training and testing","b08b7ae2":"# Using Lenet5 model","35142aac":"# Predict the result using test data","922b1318":"# Score prediction","a177695f":"# Explore data","2883f3af":"train set mapping consists of 10 classes (0-9) ","ee370836":"Crop Image","2c6d0cf9":"Predict result by classifying function from feature 1 (class 0-9) and operate feature 2 and 3.","eb37dd71":"Drop some data that the value does not match with the picture so it is easier to train the model.","e1529be0":"Import set of train data","89c22206":"I have studied the code from the reference Mr.Chinatip (ID:22p24c002)","fcaf6428":"Visualize data in every class","0fcd1f4e":"# Use function to change all images","69817f34":"Resize Image","c09eb54f":"There are some null data in feature 1 column for both test and train data.\nFeature 1 is the function that operate between feature 2 and 3 to achieve predict result.","922f882a":"Training set image","ce2dc1cc":"Image Convex Hull","ebb52ab6":"# Manange Image before Training","6cb77bb4":"Testing set image","f6e909ab":"Export predict result to csv file."}}