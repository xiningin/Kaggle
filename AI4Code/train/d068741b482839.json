{"cell_type":{"451ab7b7":"code","946624e0":"code","a57cf8b1":"code","13eed256":"code","86e95854":"code","0d5ac484":"code","6a598613":"code","75c73fae":"code","fe33bb70":"code","efeab4e0":"code","20647b5e":"code","fa08c16e":"code","a89b6041":"code","1c6aed17":"code","cdaebd5c":"code","fdef6354":"code","44f9d96d":"code","39e00c02":"code","7b930b8d":"code","501db9d7":"code","665cf6a3":"code","6da4520b":"code","ef3213e5":"markdown","d0cca4a4":"markdown","9d868ff8":"markdown","b86095cb":"markdown","6e4f54c4":"markdown","4c748fea":"markdown","1342038b":"markdown"},"source":{"451ab7b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","946624e0":"df_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_train.head()","a57cf8b1":"df_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\ndf_test.head()","13eed256":"X_train = df_train.drop('label', axis=1)\ny_train = df_train['label']","86e95854":"def viz_num(num):\n    #Reshape the 768 values to a 28x28 image\n    image = X_train.values[num].reshape([28,28])\n    plt.title('Sample: %d  Label: %d' % (num, y_train[num]))\n    plt.imshow(image, cmap=plt.get_cmap('gray'))\n    plt.show()","0d5ac484":"viz_num(1111)","6a598613":"X_train = X_train\/255.0\ndf_test = df_test\/255.0\nX_train = X_train.values.reshape(-1, 28, 28, 1)\ndf_test = df_test.values.reshape(-1, 28, 28, 1)","75c73fae":"from sklearn.model_selection import train_test_split\nimport tensorflow\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom tensorflow.keras.optimizers import RMSprop","fe33bb70":"X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=0.2, random_state=42, stratify=y_train)","efeab4e0":"y_train = keras.utils.to_categorical(y_train)\ny_validation = keras.utils.to_categorical(y_validation)","20647b5e":"model = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(28 ,28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same',))\nmodel.add(Conv2D(64, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same',))\nmodel.add(Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2), padding='same',))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","fa08c16e":"from keras.callbacks import EarlyStopping","a89b6041":"early_stopping = EarlyStopping(min_delta=0.001, patience=5, restore_best_weights=True)","1c6aed17":"history = model.fit(\n    x=X_train, \n    y=y_train, \n    batch_size=32, \n    epochs=20, \n    callbacks=[early_stopping], \n    validation_data=(X_validation, y_validation))","cdaebd5c":"score = (max(history.history['val_accuracy']))\nprint(score)","fdef6354":"sample_submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","44f9d96d":"sample_submission","39e00c02":"y_test = model.predict(df_test)\ny_test = np.argmax(y_test, axis=1)\ny_test","7b930b8d":"submission = pd.DataFrame(columns=['ImageId', 'Label'])","501db9d7":"submission['ImageId'] = range(1, 1+len(df_test))\nsubmission['Label'] = y_test","665cf6a3":"submission","6da4520b":"submission.to_csv('submissions0.csv', index=False)","ef3213e5":"**Train and Test Images**","d0cca4a4":"**Formatting the Data**","9d868ff8":"**Modeling**","b86095cb":"**Visualizing the Data**","6e4f54c4":"**Training Data**","4c748fea":"**Submission**","1342038b":"**Testing Data**"}}