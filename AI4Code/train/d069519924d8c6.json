{"cell_type":{"7ce27e8f":"code","67e7ab15":"code","e768040b":"code","1d43d285":"code","15d8b2ec":"code","672315f4":"code","bf6374c5":"code","5fed450d":"code","cccd5f47":"code","acd9ee75":"code","f97896ce":"code","0cf9fc15":"code","3e1760a7":"code","ffa25d60":"code","c2558154":"code","2edafff7":"code","3bd54d39":"code","41684e85":"code","767ddf24":"code","ca85633e":"code","87b2852c":"code","e93c6794":"code","46170528":"code","1e5ea8b3":"code","615cc0b5":"code","23fe8c54":"markdown"},"source":{"7ce27e8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67e7ab15":"credits = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\nmovies_df = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","e768040b":"credits.head()","1d43d285":"movies_df.head()","15d8b2ec":"credits_renamed = credits.rename(index=str, columns={\"movie_id\": \"id\"})\nmovies_df_merge = movies_df.merge(credits_renamed, on='id')\nmovies_df_merge.head()","672315f4":"movie_df_new = movies_df_merge.drop(columns=['homepage', 'title_x', 'title_y', 'status','production_countries'])","bf6374c5":"movie_df_new.info()","5fed450d":"v=movie_df_new['vote_count']\nR=movie_df_new['vote_average']\nC=movie_df_new['vote_average'].mean()\nm=movie_df_new['vote_count'].quantile(0.70)","cccd5f47":"movie_df_new['weighted_average']=((R*v)+ (C*m))\/(v+m)","acd9ee75":"movie_df_new.head()","f97896ce":"movie_sorted_ranking=movie_df_new.sort_values('weighted_average',ascending=False)\nmovie_sorted_ranking.head()","0cf9fc15":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nweight_average=movie_sorted_ranking\nplt.figure(figsize=(12,6))\naxis1=sns.barplot(x=weight_average['weighted_average'].head(10), y=weight_average['original_title'].head(10), data=weight_average)\nplt.xlim(2, 10)\nplt.title('Best Movies by average votes', weight='bold')\nplt.xlabel('Weighted Average Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\nplt.savefig('best_movies.png')","3e1760a7":"#popularity.head()\nmovie_sorted_ranking=movie_df_new.sort_values('popularity',ascending=False)\nmovie_sorted_ranking.head()","ffa25d60":"k = movie_sorted_ranking['popularity']\nk","c2558154":"import matplotlib.pyplot as plt\nimport seaborn as sns\n#popularity = movie_sorted_ranking['popularity']\nweight_average=movie_sorted_ranking\nplt.figure(figsize=(12,6))\nax=sns.barplot(x=movie_sorted_ranking['popularity'].head(10), y=movie_sorted_ranking['original_title'].head(10), data=k)\nplt.xlim(2, 1000)\nplt.title('Best Movies by average votes', weight='bold')\nplt.xlabel('Weighted Average Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\nplt.savefig('best_movies.png')","2edafff7":"from sklearn.preprocessing import MinMaxScaler\n\nscaling=MinMaxScaler()\nmovie_scaled_df=scaling.fit_transform(movie_df_new[['weighted_average','popularity']])\nmovie_normalized_df=pd.DataFrame(movie_scaled_df,columns=['weighted_average','popularity'])\nmovie_normalized_df.head()","3bd54d39":"movie_df_new[['normalized_weight_average','normalized_popularity']]= movie_normalized_df\nmovie_normalized_df","41684e85":"movie_df_new.head()","767ddf24":"movie_df_new['score'] =movie_df_new['normalized_weight_average'] * 0.5 + movie_df_new['normalized_popularity'] * 0.5\nmovies_scored_df = movie_df_new.sort_values(['score'], ascending=False)\nmovies_scored_df[['original_title', 'normalized_weight_average', 'normalized_popularity', 'score']].head(20)","ca85633e":"scored_df = movies_scored_df\nplt.figure(figsize=(16,6))\nax = sns.barplot(x=scored_df['score'].head(10), y=scored_df['original_title'].head(10), data=scored_df, palette='deep')\n\n#plt.xlim(3.55, 5.25)\nplt.title('Best Rated & Most Popular Blend', weight='bold')\nplt.xlabel('Score', weight='bold')\nplt.ylabel('Movie Title', weight='bold')\nplt.savefig('scored_movies.png')","87b2852c":"from sklearn.feature_extraction.text import TfidfVectorizer\n# Using Abhishek Thakur's arguments for TF-IDF\ntfv = TfidfVectorizer(min_df=3,  max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3),\n            stop_words = 'english')\n# Filling NaNs with empty string\nmovie_df_new['overview'] = movie_df_new['overview'].fillna('')","e93c6794":"# Fitting the TF-IDF on the 'overview' text\ntfv_matrix = tfv.fit_transform(movie_df_new['overview'])","46170528":"from sklearn.metrics.pairwise import sigmoid_kernel\nsig = sigmoid_kernel(tfv_matrix, tfv_matrix)\n# Reverse mapping of indices and movie titles\nindices = pd.Series(movie_df_new.index, index=movie_df_new['original_title']).drop_duplicates()\nindices","1e5ea8b3":"def give_rec(title, sig=sig):\n    # Get the index corresponding to original_title\n    idx = indices[title]\n    # Get the pairwsie similarity scores \n    sig_scores = list(enumerate(sig[idx]))\n    # Sort the movies \n    sig_scores = sorted(sig_scores, key=lambda x: x[1], reverse=True)\n    # Scores of the 10 most similar movies\n    sig_scores = sig_scores[1:11]\n    # Movie indices\n    movie_indices = [i[0] for i in sig_scores]\n    # Top 10 most similar movies\n    return movie_df_new['original_title'].iloc[movie_indices]\n","615cc0b5":"# Testing our content-based recommendation system with the seminal film Spy Kids\ngive_rec('Spy Kids')","23fe8c54":"**refrence**- https:\/\/www.youtube.com\/watch?v=_hf_y-_sj5Y&list=PLZoTAELRMXVN7QGpcuN-Vg35Hgjp3htvi"}}