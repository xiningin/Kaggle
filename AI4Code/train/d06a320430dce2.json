{"cell_type":{"763947af":"code","9d8b4af7":"code","d86e3461":"code","eeebd517":"code","1b70013d":"code","36274049":"code","ca0f5ece":"code","5c0d8d65":"code","0d108d7e":"code","24cea357":"code","06b3bb1c":"code","cfd8a8b1":"code","110dbc1b":"code","7b2beeaf":"code","3182bcf7":"code","9835273a":"code","d8dbbe5a":"code","881ef287":"code","bd7f8433":"code","840da385":"code","f26e6c7f":"code","edc1f6ea":"code","9a8370bd":"code","bc1d6e40":"code","a334e68a":"code","cf43c1eb":"code","dbf20545":"code","fd53f62a":"code","859f2c39":"code","9ed5ff12":"code","26fba0a4":"code","827c4358":"code","3780daf7":"code","eba7fcb1":"code","77e1074c":"code","d9c3f8f0":"code","0ac3d9af":"code","8b423f64":"code","d28e3246":"code","336db9df":"code","a000cd19":"code","7fd589c9":"code","ad743ff5":"markdown","7d1c8e00":"markdown","fbed6cbd":"markdown","fa37452e":"markdown","7aaacb1d":"markdown","826d30c6":"markdown","c540ddf7":"markdown","c6bfc9f1":"markdown","7a8db5ca":"markdown","e25d1947":"markdown","27e6154c":"markdown","3e0bd3ca":"markdown","fa6416b8":"markdown","0bce3a8b":"markdown","c4b5fc00":"markdown","ebd277b9":"markdown","3a70df87":"markdown","b699cde3":"markdown","fb176d9d":"markdown","82de16fc":"markdown","116ce9b5":"markdown","69678deb":"markdown","058f0f39":"markdown","9df056f0":"markdown","b197257f":"markdown","770c6946":"markdown","a1af56e0":"markdown","0765873e":"markdown"},"source":{"763947af":"#Data Rendering\nimport numpy as np\nimport pandas as pd\nimport os\nfrom pandas import Series, DataFrame\n\n#visualization\nimport seaborn as sb\nimport matplotlib.pyplot  as plt\nfrom pylab import rcParams\n\n#Correlation libraries\nimport scipy \nfrom scipy.stats import spearmanr,chi2_contingency\n\n#Machine Learning Libraries\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","9d8b4af7":"%matplotlib inline\nrcParams['figure.figsize']=20,14\nplt.style.use('seaborn-whitegrid')","d86e3461":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eeebd517":"train_address=\"\/kaggle\/input\/titanic\/train.csv\"\ntest_address=\"\/kaggle\/input\/titanic\/test.csv\"\n\ntrain_DF=pd.read_csv(train_address)\ntest_DF=pd.read_csv(test_address)\n\ncombined_DF=[train_DF,test_DF]","1b70013d":"train_DF.head()","36274049":"test_DF.head()","ca0f5ece":"train_DF.describe()","5c0d8d65":"test_DF.describe()","0d108d7e":"survial_count=train_DF['Survived'].value_counts()\nsurvive=survial_count[1]\/(survial_count[0]+survial_count[1])*100\nprint(f'Total % people survied were {survive:0.2f}')","24cea357":"train_DF[['Survived','Sex']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived', ascending=False)","06b3bb1c":"train_DF[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived', ascending=False)","cfd8a8b1":"train_DF[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by='Survived', ascending=False)","110dbc1b":"train_DF[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by='Survived', ascending=False)","7b2beeaf":"train_DF[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived', ascending=False)","3182bcf7":"g = sb.FacetGrid(train_DF, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","9835273a":"train_DF['AgeBand'] = pd.cut(train_DF['Age'], 5)\ntrain_DF[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","d8dbbe5a":"train_DF=train_DF.drop(['PassengerId','Name','Ticket','Fare','Cabin','AgeBand'],axis=1)\ntest_DF=test_DF.drop(['Name','Ticket','Fare','Cabin'],axis=1)\ntrain_DF.head()","881ef287":"train_DF.info()","bd7f8433":"frequent_embarked=train_DF['Embarked'].mode()[0]\nfrequent_embarked","840da385":"#Fill NaN values of Embarked with 'S'\ntrain_DF['Embarked']=train_DF[\"Embarked\"].fillna(frequent_embarked)\n#Fill NaN values of Age with 'median()'\ntrain_DF['Age']=train_DF[\"Age\"].fillna(train_DF['Age'].median())\n##Fill NaN values of Age\n\ntest_DF['Embarked']=test_DF[\"Embarked\"].fillna(frequent_embarked)\ntest_DF['Age']=test_DF[\"Age\"].fillna(test_DF['Age'].median())","f26e6c7f":"title_mapping = {\"male\": 0, \"female\": 1, \"C\": 1, \"Q\": 2, \"S\": 3}\ntrain_DF[\"Sex\"]=train_DF[\"Sex\"].map(title_mapping)\ntrain_DF[\"Embarked\"]=train_DF[\"Embarked\"].map(title_mapping)\ntrain_DF.loc[(train_DF['Age'] <= 16) , 'Age'] = 0\ntrain_DF.loc[(train_DF['Age'] > 16) & (train_DF['Age'] <= 32), 'Age'] = 1\ntrain_DF.loc[(train_DF['Age'] > 32) & (train_DF['Age'] <= 48), 'Age'] = 2\ntrain_DF.loc[(train_DF['Age'] > 48) & (train_DF['Age'] <= 64), 'Age'] = 3\ntrain_DF.loc[ train_DF['Age'] > 64, 'Age'] = 4 \ntest_DF[\"Sex\"]=test_DF[\"Sex\"].map(title_mapping)\ntest_DF[\"Embarked\"]=test_DF[\"Embarked\"].map(title_mapping)\ntest_DF.loc[(test_DF['Age'] <= 16) , 'Age'] = 0\ntest_DF.loc[(test_DF['Age'] > 16) & (test_DF['Age'] <= 32), 'Age'] = 1\ntest_DF.loc[(test_DF['Age'] > 32) & (test_DF['Age'] <= 48), 'Age'] = 2\ntest_DF.loc[(test_DF['Age'] > 48) & (test_DF['Age'] <= 64), 'Age'] = 3\ntest_DF.loc[ test_DF['Age'] > 64, 'Age'] = 4 \ntrain_DF.head()","edc1f6ea":"train_DF['Parch'].value_counts()","9a8370bd":"sb.pairplot(train_DF)","bc1d6e40":"pclass=test_DF[\"Pclass\"]\nsex=test_DF[\"Sex\"]\nage=test_DF[\"Age\"]\nsibsp=test_DF[\"SibSp\"]\nparch=test_DF[\"Parch\"]\nembarked=test_DF[\"Embarked\"]\n\nspearmanr_coefficient,p_value= spearmanr(pclass,sex)\nprint(f'Spearman Rank correlation coefficient {spearmanr_coefficient:0.3f}')","a334e68a":"spearmanr_coefficient,p_value= spearmanr(pclass,age)\nprint(f'Spearman Rank correlation coefficient {spearmanr_coefficient:0.3f}')","cf43c1eb":"spearmanr_coefficient,p_value= spearmanr(pclass,sibsp)\nprint(f'Spearman Rank correlation coefficient {spearmanr_coefficient:0.3f}')","dbf20545":"spearmanr_coefficient,p_value= spearmanr(pclass,parch)\nprint(f'Spearman Rank correlation coefficient {spearmanr_coefficient:0.3f}')","fd53f62a":"spearmanr_coefficient,p_value= spearmanr(pclass,embarked)\nprint(f'Spearman Rank correlation coefficient {spearmanr_coefficient:0.3f}')","859f2c39":"table= pd.crosstab(pclass,sex)\nchi2,p,dof,expected= chi2_contingency(table.values)\nprint(f'Chi-square statistic {chi2:0.3f} p_value{p:0.3f}')","9ed5ff12":"table= pd.crosstab(pclass,age)\nchi2,p,dof,expected= chi2_contingency(table.values)\nprint(f'Chi-square statistic {chi2:0.3f} p_value{p:0.3f}')","26fba0a4":"table= pd.crosstab(pclass,sibsp)\nchi2,p,dof,expected= chi2_contingency(table.values)\nprint(f'Chi-square statistic {chi2:0.3f} p_value{p:0.3f}')","827c4358":"table= pd.crosstab(pclass,parch)\nchi2,p,dof,expected= chi2_contingency(table.values)\nprint(f'Chi-square statistic {chi2:0.3f} p_value{p:0.3f}')","3780daf7":"table= pd.crosstab(pclass,embarked)\nchi2,p,dof,expected= chi2_contingency(table.values)\nprint(f'Chi-square statistic {chi2:0.3f} p_value{p:0.3f}')","eba7fcb1":"train_DF.head()","77e1074c":"X_train = train_DF.drop(\"Survived\", axis=1)\nY_train = train_DF[\"Survived\"]\nX_test  = test_DF.drop(['PassengerId'],axis=1).copy()","d9c3f8f0":"logreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred_log = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","0ac3d9af":"svc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred_svc = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","8b423f64":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred_knn = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","d28e3246":"decision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred_decision = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","336db9df":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred_random = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","a000cd19":"models = pd.DataFrame({\n    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression', \n              'Random Forest',  \n              'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_log, \n              acc_random_forest, acc_decision_tree]})\nmodels.sort_values(by='Score', ascending=False)","7fd589c9":"submission_df=pd.DataFrame({\n    \"PassengerId\": test_DF[\"PassengerId\"],\n    \"Survived\": Y_pred_random\n})\nsubmission_df\n# submission_df.to_csv('.\/submission.csv', index=False)","ad743ff5":"### Decision Tree Model","7d1c8e00":"### Import all required libraries","fbed6cbd":"#### Which ticket class people survived more\n\n- According to below analysis people of Pclass one survived 62% as compared to other class people.","fa37452e":"### KNeighborsClassifier Model","7aaacb1d":"### Random Forest Model","826d30c6":"We data of 891 people out of which \n\nData is classified as shown below:\n- Categorical Columns: Survived, Sex, Embarked\n- Ordinal: Pclass\n- Numeric Columns: Age, Fare\n- MultiData: PassengerId, Name, Cabin\n- Discrete: SibSp, Parch\n\nNow we have to find out relation between all features and Survived","c540ddf7":"### Spearmans Rank Correlation\n\n#### Spearman correlation:\n- If p_value=1 => Strong positive correlation\n- If p_value=0 => No Correlation\n- If p_value=-1 => Strong negative correlation\n\n#### CHI-SQUARE Test\n- To find out weather our features are independent or not we perform CHI-SQUARE Test\n\n#### Observations\n- After performing spearman's rank correlation, we found out that all our feature Pclass,Sex,Age,SibSp,Parch, Embarked are not correlated.\n- After performing CHI-SQAURE Test we found that Pclass,Sex,Age,SibSp,Embarked are correlated while Parch is independent","c6bfc9f1":"### Load training and testing data","7a8db5ca":"### Splitting data in train and test set","e25d1947":"### Creating Models","27e6154c":"### Now we will try to find out relation between Age and Survived\n> So from below results we can say that people of age group 20-40 survived more.","3e0bd3ca":"### Machine Learning Algorithms","fa6416b8":"### LogisticRegression Model","0bce3a8b":"### Data Cleaning","c4b5fc00":"### Observations till now\n\n- Data is now ready and in number format which is required by Machine Learning Model.\n- Now we would perform some tests to check correlation between features.\n- As our features contains ordinal values will be finding Spearman correlation","ebd277b9":"There are missing values in Age and Embarked Column.\n\nSo to fill missing values we will use:\n- Missing age values will be filled by median of all Ages\n- Missing Embarked values will be filled by median of Embarked feature.","3a70df87":"Remove columns that are not required\n- PassengerId,Name,Ticket,Fare,Cabin,AgeBand","b699cde3":"### Setting for Matplotlib figure size","fb176d9d":"We will now one-hotencode features Sex, Embarked and Age\n\n- Sex=> Male=0,female=1\n- Embarked=> C=1,Q=2,S=3\n- Age is binned and values assigned are:\n  - 0-16=0\n  - 16-32=1\n  - 33-48=2\n  - 49-64=3\n  - above 64=4","82de16fc":"### Spearman's Rank Correlation","116ce9b5":"### Support Vector Classifier","69678deb":"### Separating Train and Test Feature","058f0f39":"### Genrating Pairplot","9df056f0":"#### Which Sex people survived\n\n- According to below observtions 74% Female survived whereas 18% Male Survived\n\n\nTotal % of people survied were 38.4% out of which 0.742% were female.Which means female survival rate was more. This shows that survival rate and sex are correlated.","b197257f":"### CHI-SQUARE Test","770c6946":"### Some questions before starting the data analysis process\n\n- Which age group people survived more?\n > Age group between 20-40 survived \n- Which Pclass survived more and how many male and female in that group?\n > Pclass of 1 survived more compared to another classes\n- Which Embarked people survived?\n > People of Embarked C i.e Cherbourg survived more.\n- How SibSp and Parch are correlated?\n > Yes SibSp and Parch are correlated, this proved by using CHI-Square test","a1af56e0":"### References\n\n- I have used below notebooks for reference, it helped me alot. \n    - https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions\n    - https:\/\/www.kaggle.com\/amarkumar2\/titanic-predection-easy-solution\n\nPlease feel free to give your suggestions in comment section, and show your support by upvoting.\n\nP.S: This is my first competition and I am open for feedback and connection.","0765873e":"### Conclusion\n\n- After using various alogirthm, Random Forest and Decison Tree gave same accuracy score, we could be using Random Forest model with score of 86.31%"}}