{"cell_type":{"b5138f8b":"code","efc356ba":"code","9fa436bb":"code","1099a28c":"code","6806cafa":"code","4d101c33":"code","fac4fdeb":"code","ad85fdf1":"code","973904fc":"code","e76928fc":"code","a2f4113a":"code","10247598":"code","876f489d":"code","58463394":"code","f6e071d6":"code","513c350c":"code","12936837":"code","a122bfe1":"code","14b3e66d":"code","931e69d0":"code","acb9d3df":"code","319ed9b6":"code","7f90f99a":"code","802fce44":"code","deb42e2b":"code","892249db":"code","81757df0":"code","220e2e7b":"code","789b3c8e":"code","72f48473":"code","b105acb3":"code","8a3169d2":"code","102fb978":"code","62f0027a":"code","65374012":"markdown","f43e95db":"markdown","e5d4caef":"markdown","28939889":"markdown","62151f04":"markdown","15795710":"markdown","56aa105e":"markdown","945a0716":"markdown","6d60db92":"markdown","a270a259":"markdown","7513ef41":"markdown","12a6175e":"markdown","afa736ce":"markdown","991a17f2":"markdown","9da8f078":"markdown","88ed2e2b":"markdown","bdd52484":"markdown","d1b107a2":"markdown","fa9497e4":"markdown","7265b378":"markdown","370e5f78":"markdown","67f9d470":"markdown"},"source":{"b5138f8b":"!pip install -U pandas-profiling==2.9.0","efc356ba":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nimport graphviz\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nimport pandas_profiling as pp\nfrom pandas_profiling import ProfileReport\n\nimport warnings\nwarnings.filterwarnings('ignore')","9fa436bb":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntest_pid = test['PassengerId']","1099a28c":"train.head()","6806cafa":"train.shape","4d101c33":"test.shape","fac4fdeb":"train.describe()","ad85fdf1":"train.info()","973904fc":"train.isnull().sum()","e76928fc":"test.isnull().sum()","a2f4113a":"ProfileReport(train)","10247598":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train,capsize=.2)\n\n#print percentages of females vs. males that survive\nprint(\"Percentage of females who survived:\", train[\"Survived\"][train[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of males who survived:\", train[\"Survived\"][train[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)","876f489d":"sns.barplot(x=\"Pclass\", y=\"Survived\", data=train,capsize=.2)\n\n#print percentage of people by Pclass that survived\nprint(\"Percentage of Pclass = 1 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 2 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of Pclass = 3 who survived:\", train[\"Survived\"][train[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)","58463394":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train,capsize=.2)\n\n#I won't be printing individual percent values for all of these.\nprint(\"Percentage of SibSp = 0 who survived:\", train[\"Survived\"][train[\"SibSp\"] == 0].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of SibSp = 1 who survived:\", train[\"Survived\"][train[\"SibSp\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of SibSp = 2 who survived:\", train[\"Survived\"][train[\"SibSp\"] == 2].value_counts(normalize = True)[1]*100)","f6e071d6":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train,capsize=.2)\nplt.show()","513c350c":"train[\"Age\"] = train[\"Age\"].fillna(-0.5)\ntest[\"Age\"] = test[\"Age\"].fillna(-0.5)\nbins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\nlabels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\ntrain['AgeGroup'] = pd.cut(train[\"Age\"], bins, labels = labels)\ntest['AgeGroup'] = pd.cut(test[\"Age\"], bins, labels = labels)\n\n#draw a bar plot of Age vs. survival\nplt.figure(figsize=(15,8))\nsns.barplot(x=\"AgeGroup\", y=\"Survived\", data=train,capsize=.2)\nplt.show()","12936837":"train[\"CabinBool\"] = (train[\"Cabin\"].notnull().astype('int'))\ntest[\"CabinBool\"] = (test[\"Cabin\"].notnull().astype('int'))\n\n#calculate percentages of CabinBool vs. survived\nprint(\"Percentage of CabinBool = 1 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Percentage of CabinBool = 0 who survived:\", train[\"Survived\"][train[\"CabinBool\"] == 0].value_counts(normalize = True)[1]*100)\n#draw a bar plot of CabinBool vs. survival\nsns.barplot(x=\"CabinBool\", y=\"Survived\", data=train,capsize=.2)\nplt.show()","a122bfe1":"train[\"Fare\"] = (train[\"Fare\"] - train[\"Fare\"].min()) \/ (train[\"Fare\"].max() - train[\"Fare\"].min())\ntrain['Fare'] = train['Fare'].fillna(-999)\n\ntest[\"Fare\"] = (test[\"Fare\"] - test[\"Fare\"].min()) \/ (test[\"Fare\"].max() - test[\"Fare\"].min())\ntest['Fare'] = test['Fare'].fillna(-999)","14b3e66d":"train[\"Sex\"] = train[\"Sex\"].factorize()[0]\ntest[\"Sex\"] = test[\"Sex\"].factorize()[0]","931e69d0":"train[\"Embarked\"] = train[\"Embarked\"].factorize()[0]\ntest[\"Embarked\"] = test[\"Embarked\"].factorize()[0]","acb9d3df":"for i in range(len(train[\"Name\"])): train[\"Name\"][i] = train[\"Name\"][i].split(',')[0]\ntrain[\"Name\"] = train[\"Name\"].factorize()[0]\n\nfor i in range(len(test[\"Name\"])): test[\"Name\"][i] = test[\"Name\"][i].split(',')[0]\ntest[\"Name\"] = test[\"Name\"].factorize()[0]","319ed9b6":"train[\"Cabin\"] = train[\"Cabin\"].factorize()[0]\ntest[\"Cabin\"] = test[\"Cabin\"].factorize()[0]","7f90f99a":"train[\"Age\"] = (train[\"Age\"] - train[\"Age\"].mean()) \/ train[\"Age\"].std()\ntrain[\"Age\"] = train[\"Age\"].fillna(-999)\n\ntest[\"Age\"] = (test[\"Age\"] - test[\"Age\"].mean()) \/ test[\"Age\"].std()\ntest[\"Age\"] = test[\"Age\"].fillna(-999)","802fce44":"train.drop(['Ticket','AgeGroup'],axis=1,inplace=True)\ntest.drop(['Ticket','AgeGroup'],axis=1,inplace=True)","deb42e2b":"X = train.drop(['Survived'],axis=1)\ny = train['Survived']","892249db":"model = LogisticRegression(random_state=0, max_iter=2500)\nmodel.fit(X,y)","81757df0":"LR = model.predict(test)\nLR = pd.DataFrame({'PassengerId':test_pid,'Survived':LR})\nLR.to_csv('LR.csv',index=False)","220e2e7b":"xgb = XGBClassifier()\nxgb.fit(X,y)","789b3c8e":"xg = xgb.predict(test)","72f48473":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": xg\n    })\n\nsubmission.to_csv('XGB.csv', index=False)","b105acb3":"dt = DecisionTreeClassifier(max_depth=4,\n    min_samples_leaf=2)\ndt.fit(X,y)","8a3169d2":"dtt = dt.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": dtt\n    })\n\nsubmission.to_csv('DT.csv', index=False)","102fb978":"dot_data = export_graphviz(\n    dt,\n    out_file=None,\n    feature_names=X.columns,\n    class_names=['0', '1'],\n    filled=True,\n    rounded=False,\n    special_characters=True,\n    precision=3\n)\ngraph = graphviz.Source(dot_data)\ngraph ","62f0027a":"rf = RandomForestClassifier(n_estimators=100)\nrf.fit(X,y)\nrff=rf.predict(test)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": rff\n    })\n\nsubmission.to_csv('RF.csv', index=False)","65374012":"## Pclass Feature","f43e95db":"# The Notebook is a great example of how sometimes some basic techniques like logistic regression outperform complex techniques like xgboost.","e5d4caef":"### Dropping columns","28939889":"# EDA","62151f04":"# Preprocessing","15795710":"## SibSp Feature","56aa105e":"# Pandas Profiling","945a0716":"# Random Forest","6d60db92":"### Mapping Embarked to int values","a270a259":"### Getting titles from names","7513ef41":"## Age Feature","12a6175e":"## Sex Feature","afa736ce":"### Normalizing Fare","991a17f2":"# Logistic Regression","9da8f078":"### Mapping Cabin to int values","88ed2e2b":"## Cabin Feature","bdd52484":"### Mapping Sex to int values","d1b107a2":"### Standardizing Age","fa9497e4":"# Data Visualization","7265b378":"## Parch feature","370e5f78":"# XGBoost","67f9d470":"# Decision Tree"}}