{"cell_type":{"8b2696c5":"code","b1fdf198":"code","e53300b5":"code","0bba073f":"code","71dcca78":"code","2c89039b":"code","774c5482":"code","712ed19d":"code","f67b013f":"code","bfde61ba":"code","975e9bd1":"code","9d94376f":"code","dc18bc39":"code","f3a611d0":"code","70049996":"code","67651d47":"code","ff1a3bb9":"code","40857a1e":"code","feeda04e":"code","c362a335":"code","cd76739b":"code","bd036819":"code","c7d459df":"code","90c717f3":"code","e6c58630":"code","decee9d4":"markdown","325e67b4":"markdown","7f512e46":"markdown","dddd0455":"markdown","265b260d":"markdown","7445baa3":"markdown","cc560175":"markdown","d8abb19f":"markdown","fb16af40":"markdown","f5e474b3":"markdown","7aaa38e0":"markdown"},"source":{"8b2696c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1fdf198":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head(3)","e53300b5":"train.isnull().any()","0bba073f":"train.isna().sum()","71dcca78":"train.describe()","2c89039b":"import seaborn as sns\n\nsns.countplot(x='Survived', hue='Sex', data=train,  palette='hls') ","774c5482":"sns.countplot(x='Survived', hue='Pclass', data=train,  palette='hls') ","712ed19d":"sns.countplot(x='Embarked', hue='Survived', data=train)","f67b013f":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","bfde61ba":"def new_age(row):\n    age, pcl = row[0], row[1]\n    if pd.isnull(age):\n        if pcl == 1:\n            return 37\n        elif pcl == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return age\n\npcl = train['Pclass'].unique()\ntrain['Age'] = train[['Age','Pclass']].apply(new_age, axis=1)","975e9bd1":"train['Sex'] = train['Sex'].map({'male':0, 'female':1})\ntrain[\"Embarked\"] = train[\"Embarked\"].fillna(\"S\")\ntrain['Embarked'] = train['Embarked'].map({'S':0, 'C':2, 'Q':1})","9d94376f":"corelation = train.corr().round(3)\ncorelation","dc18bc39":"plt.figure(figsize=(15,15))\nsns.heatmap(corelation, annot = True)","f3a611d0":"X = train[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]\ny = train['Survived']","70049996":"X.isnull().any()","67651d47":"from sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier\n\nmodel = [LinearRegression(), LogisticRegression(), GaussianNB(), \n         KNeighborsClassifier(), SVC(), DecisionTreeClassifier(), \n         AdaBoostClassifier(), RandomForestClassifier()]\nmodel_names = ['Linear Regression', 'Logistic Regression', 'Gaussian Naive-Bayes', \n               'K-Neighbors Classifier', 'Support Vector Classifier', \n               'Decision Tree Classifier', 'Ada Boost Classifier', 'Random Forest Classifier']\n\nscores = np.zeros(len(model)).reshape(-1, 1)\n\nfor i, m in enumerate(model):\n    m = m.fit(X, y)\n    scores[i] = m.score(X, y)\n    \nthe_scores = pd.DataFrame(scores, index=model_names, columns=['score'])\nthe_scores","ff1a3bb9":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\npcl = test['Pclass'].unique()\ntest['Age'] = test[['Age','Pclass']].apply(new_age, axis=1)\ntest['Sex'] = test['Sex'].map({'male':0, 'female':1})\ntest[\"Embarked\"] = test[\"Embarked\"].fillna(\"S\")\ntest['Embarked'] = test['Embarked'].map({'S':0, 'C':2, 'Q':1})\ntest_X = test[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']]","40857a1e":"test_X.isnull().any()","feeda04e":"med_fare = train[\"Fare\"].median()\ntest_X[\"Fare\"] = test_X[\"Fare\"].fillna(med_fare)","c362a335":"test_X.isnull().any()","cd76739b":"m\nfor i, m in enumerate(model):\n    predict = m.predict(test_X)\n    print(predict)","bd036819":"test['Survived'] = m.predict(test_X)\nprint(test['Survived'])","c7d459df":"Submit = test[['PassengerId','Survived']]\nSubmit.head()","90c717f3":"Submit.set_index('PassengerId',inplace = True)\nSubmit.head()","e6c58630":"Submit.to_csv('Titanic.csv')","decee9d4":"\u4e0d\u540c\u6578\u64da\u90fd\u6709\u4e0d\u4e00\u6a23\u7684\u76f8\u95dc\u6027","325e67b4":"\u770b\u8d77\u4f86\u5c0d\u65bc\u672c\u8eab\u7684\u8a13\u7df4\u8cc7\u6599\u96c6\u8a13\u7df4\u6548\u679c\u9084\u4e0d\u932f\u3002","7f512e46":"\u5148\u7814\u7a76\u8a13\u7df4\u8cc7\u6599\u548c\u8cc7\u6599\u683c\u5f0f\uff0c\u65b9\u4fbf\u5f8c\u7e8c\u505a\u8cc7\u6599\u8655\u7406\u3002","dddd0455":"\u56e0\u70ba\u7f3a\u5931\u503c\u5f88\u5c11(2\u500b)\uff0c\u6240\u4ee5\u5148\u88dc\u6700\u5e38\u898b\u7684\u6e2f\u53e3s\uff0c\u7136\u5f8c\u8f49\u6578\u5b57\u578b\u614b\uff0c\u96d6\u7136\u4e0d\u597d\u4f46\u5148\u9019\u6a23\uff0c\u7136\u5f8c\u9019\u6a23\u7684\u8a71\u6578\u5b57\u8d8a\u9ad8\u660e\u986f\u8d8a\u5bb9\u6613\u7372\u6551\u3002","265b260d":"\u6e2c\u8a66\u8cc7\u6599\u4e5f\u505a\u4e00\u904d\u9810\u8655\u88e1\u3002","7445baa3":"\u628a\u8cc7\u6599\u8907\u88fd\u51fa\u4f86","cc560175":"\u6709\u9322\u4eba\u7684\u751f\u5b58\u6a5f\u7387\u90844\u6bd4\u8f03\u5927\u3002","d8abb19f":"\u4e0a\u8239\u7684\u6e2f\u53e3\u4e5f\u6709\u5dee\u5225\uff0cc\u751f\u5b58\u7387\u6700\u9ad8\uff0cs\u56e0\u70ba\u6bd4\u8f03\u7aae\u56f0\uff0c\u53ef\u80fd\u8cb7\u4f4e\u50f9\u7968\u6bd4\u8f03\u591a","fb16af40":"\u6211\u662f\u5927\u4fbf\uff0c\u6e2c\u8a66\u8cc7\u6599\u96c6\u5077\u5077\u7d66\u6211\u7f3a\u8cc7\u6599\uff0c\u592a\u8abf\u76ae\u4e86\u5427\uff0c\u96e3\u602a\u9810\u6e2c\u6703\u7206\u3002","f5e474b3":"\u62ff\u5176\u4ed6\u7684\u6771\u897f\u5148\u63a8\u5b9a\u7d66\u4e00\u500b\u5927\u81f4\u7684\u503c\uff0c\u611f\u89ba\u7528\u66f4\u591a\u7d44\u8cc7\u6599\u505a\u7684\u8a71\u6703\u66f4\u597d\uff0c\u4f46\u9084\u6709\u5176\u4ed6\u7f3a\u5931\u503c\uff0c\u63a8\u5b9a\u7684\u60f3\u6cd5\u6bd4\u6211\u7576\u521d\u76f4\u63a5\u7528\u4e2d\u4f4d\u6578\u505a\u5c4c\u591a\u4e86= =","7aaa38e0":"\u54c7\u54c7Age\u3001Cabin\u3001Embarked\u6709\u7f3a\u5931\u503c\uff0c\u90a3\u8981\u600e\u9ebc\u4f86\u505a\u88dc\u503c\u6703\u6bd4\u8f03\u597d\u52d2(?\n\u984d\u6211\u4e4b\u524d\u505a\u6cd5\u662f\u76f4\u63a5\u62ff\u4e2d\u4f4d\u6578\u311b\uff0c\u6211\u597d\u721b"}}