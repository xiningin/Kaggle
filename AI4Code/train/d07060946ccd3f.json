{"cell_type":{"daac97b0":"code","e5477351":"code","e612f0d2":"code","fc117f46":"code","44c8b7b0":"code","dc68a5b8":"code","be6f514b":"code","514069a8":"code","6d0f5f15":"code","443a10cf":"code","23c525e5":"code","0d815bc5":"code","54bf90e4":"code","a4bffd7b":"code","205d8d06":"code","6823b65d":"code","a8aff70b":"code","fbf9fcaa":"code","1ae59105":"code","28ff0da6":"code","61d1dacf":"code","0b285f65":"code","de2dc0e1":"code","73294a1a":"code","99814490":"code","0e918635":"code","3cca9113":"code","11eb2555":"code","a651d69f":"code","a8c1a200":"code","98d50003":"code","757db3f6":"code","6bbe22e6":"code","d3cd672f":"code","f447d891":"code","8b3027b6":"code","02da77a7":"code","68da5029":"code","97c62f61":"code","562e75a8":"code","1ecd1229":"code","9971e5e1":"code","73bc9cff":"code","f5435514":"code","72a1a580":"code","92ce61e5":"code","bb5bab73":"code","545db9bc":"code","e00c9fcc":"code","be2bf39d":"code","30c149a5":"code","85464539":"code","6bacdf08":"code","83d67ecd":"markdown","aec778b9":"markdown","45048d15":"markdown"},"source":{"daac97b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport sklearn\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5477351":"df = pd.read_csv('..\/input\/boston-house-prices\/housing.csv')\ndf.head()","e612f0d2":"df.shape","fc117f46":"column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\ndf = pd.read_csv('..\/input\/boston-house-prices\/housing.csv', header=None, names=column_names, delimiter='\\s+')\ndf.head()","44c8b7b0":"df.shape","dc68a5b8":"df.describe()","be6f514b":"df.info()","514069a8":"corr = df.corr()\nplt.figure(figsize=(15, 12))\nsns.heatmap(corr, linewidths=0.2, annot=True);","6d0f5f15":"sns.scatterplot(data=df, x='MEDV', y='CRIM');","443a10cf":"sns.set_style('darkgrid')","23c525e5":"sns.scatterplot(data=df, x='MEDV', y='CRIM');","0d815bc5":"pg = sns.PairGrid(df)\npg.map_diag(sns.histplot)\npg.map_offdiag(sns.scatterplot)","54bf90e4":"df = df[~(df['MEDV'] >= 50.00)]\ndf.shape","a4bffd7b":"sns.boxplot(data=df, y='CRIM');","205d8d06":"def var_boxplot(df):\n    fig, axs = plt.subplots(ncols=df.shape[1]\/\/2, nrows=2, figsize=(20, 15))\n    \n    index = 0\n    axs = axs.flatten()\n    \n    for k, v in df.items():\n        sns.boxplot(y=k, data=df, ax=axs[index])\n        index += 1\n    plt.tight_layout(pad=0.4, w_pad=0.5, h_pad=5.0)","6823b65d":"var_boxplot(df)","a8aff70b":"def var_distplot(df):\n    fig, axs = plt.subplots(ncols=df.shape[1]\/\/2, nrows=2, figsize=(20, 10))\n    \n    index = 0\n    axs = axs.flatten()\n    \n    for k, v in df.items():\n        sns.distplot(v, ax=axs[index])\n        index += 1\n    plt.tight_layout(pad=0.4, w_pad=1.0, h_pad=5.0);","fbf9fcaa":"import warnings\nwarnings.simplefilter('ignore')\n\nvar_distplot(df)","1ae59105":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","28ff0da6":"X = df.drop('MEDV', axis=1)\ny = df['MEDV']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","61d1dacf":"lin_reg = LinearRegression()\nlin_reg.fit(X_train, y_train)","0b285f65":"coefficients = pd.DataFrame([X_train.columns, lin_reg.coef_]).T\ncoefficients = coefficients.rename(columns={0: 'Attribute', 1: 'Coefficient'})\ncoefficients","de2dc0e1":"y_pred_lin_reg = lin_reg.predict(X_train) ","73294a1a":"# Evaluation\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","99814490":"print('Mean Absolute Error of Linear Regression: {}'.format(mean_absolute_error(y_train, y_pred_lin_reg)))\nprint('Mean Squared Error of Linear Regression: {}'.format(mean_squared_error(y_train, y_pred_lin_reg)))\nprint('R^2 Score of Linear Regression: {}'.format(r2_score(y_train, y_pred_lin_reg)))\nprint('Root Mean Squared Error of Linear Regression: {}'.format(np.sqrt(mean_absolute_error(y_train, y_pred_lin_reg))))","0e918635":"from sklearn.preprocessing import MinMaxScaler\n\nmin_max_scaler = MinMaxScaler()\n\nX_train_scaled = min_max_scaler.fit_transform(X_train)","3cca9113":"y_preds_scaled = lin_reg.predict(X_train_scaled)","11eb2555":"print('Mean Absolute Error of Linear Regression: ', mean_absolute_error(y_train, y_preds_scaled))\nprint('Mean Squared Error of Linear Regression: ', mean_squared_error(y_train, y_preds_scaled))\nprint('R^2 Score of Linear Regression: ', r2_score(y_train, y_preds_scaled))\nprint('Root Mean Squared Error of Linear Regression: ', np.sqrt(mean_absolute_error(y_train, y_preds_scaled)))","a651d69f":"plt.figure(figsize=(15, 12))\nplt.scatter(y_train, y_pred_lin_reg)\nplt.xlabel('Prices')\nplt.ylabel('Predicted Prices')\nplt.title('Prices vs Predicted Prices')\nplt.show();","a8c1a200":"plt.figure(figsize=(15, 12))\nplt.scatter(y_pred_lin_reg, y_train-y_pred_lin_reg)\nplt.title(\"Predicted vs residuals\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"Residuals\")\nplt.show();","98d50003":"plt.figure(figsize=(12, 10))\nsns.distplot(y_train-y_pred_lin_reg)\nplt.title(\"Histogram of Residuals\")\nplt.xlabel(\"Residuals\")\nplt.ylabel(\"Frequency\")\nplt.show();","757db3f6":"y_test_pred_lin_reg = lin_reg.predict(X_test)","6bbe22e6":"print('Mean Absolute Error of Linear Regression on Test Set: {}'.format(mean_absolute_error(y_test, y_test_pred_lin_reg)))\nprint('Mean Squared Error of Linear Regression on Test Set: {}'.format(mean_squared_error(y_test, y_test_pred_lin_reg)))\nprint('R^2 Score of Linear Regression on Test Set: {}'.format(r2_score(y_test, y_test_pred_lin_reg)))\nprint('Root Mean Squared Error of Linear Regression on Test Set: {}'.format(np.sqrt(mean_absolute_error(y_test, y_test_pred_lin_reg))))","d3cd672f":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg_model = RandomForestRegressor()\n\nrf_reg_model.fit(X_train, y_train)","f447d891":"y_pred_rf_reg_model = rf_reg_model.predict(X_train)","8b3027b6":"print('Mean Absolute Error of Random Forest Regression: ', mean_absolute_error(y_train, y_pred_rf_reg_model))\nprint('Mean Squared Error of Random Forest Regression: ', mean_squared_error(y_train, y_pred_rf_reg_model))\nprint('R^2 Score of Random Forest Regression: ', r2_score(y_train, y_pred_rf_reg_model))\nprint('Root Mean Squared Error of Random Forest Regression: ', np.sqrt(mean_absolute_error(y_train, y_pred_rf_reg_model)))","02da77a7":"plt.figure(figsize=(15, 12))\nplt.scatter(y_train, y_pred_rf_reg_model)\nplt.xlabel('Prices')\nplt.ylabel('Predicted Prices')\nplt.title('Prices vs Predicted Prices')\nplt.show();","68da5029":"# check residuals\nplt.figure(figsize=(15, 12))\nplt.scatter(y_pred_rf_reg_model, y_train-y_pred_rf_reg_model)\nplt.xlabel('Predicted')\nplt.ylabel('Residuals')\nplt.title('Predicted vs Residuals')\nplt.show();","97c62f61":"y_test_pred_rf_reg_model = rf_reg_model.predict(X_test)","562e75a8":"print('Mean Absolute Error of Random Forest Regression on Test Set: ', mean_absolute_error(y_test, y_test_pred_rf_reg_model))\nprint('Mean Squared Error of Random Forest Regression on Test Set: ', mean_squared_error(y_test, y_test_pred_rf_reg_model))\nprint('R^2 Score of Random Forest Regression on Test Set: ', r2_score(y_test, y_test_pred_rf_reg_model))\nprint('Root Mean Squared Error of Random Forest Regression on Test Set: ', np.sqrt(mean_absolute_error(y_test, y_test_pred_rf_reg_model)))","1ecd1229":"from xgboost import XGBRegressor","9971e5e1":"xgb_reg = XGBRegressor()","73bc9cff":"xgb_reg.fit(X_train, y_train)","f5435514":"y_pred_xgb_reg = xgb_reg.predict(X_train)","72a1a580":"print('Mean Absolute Error of XGBoost Regression: ', mean_absolute_error(y_train, y_pred_xgb_reg))\nprint('Mean Squared Error of XGBoost Regression: ', mean_squared_error(y_train, y_pred_xgb_reg))\nprint('R^2 Score of XGBoost Regression: ', r2_score(y_train, y_pred_xgb_reg))\nprint('Root Mean Squared Error of XGBoost Regression: ', np.sqrt(mean_absolute_error(y_train, y_pred_xgb_reg)))","92ce61e5":"plt.figure(figsize=(12, 10))\nplt.scatter(y_train, y_pred_xgb_reg)\nplt.xlabel('Prices')\nplt.ylabel('Predicted Prices')\nplt.title('Prices vs Predicted Prices')\nplt.show();","bb5bab73":"plt.figure(figsize=(12, 10))\nplt.scatter(y_pred_xgb_reg, y_train-y_pred_xgb_reg)\nplt.xlabel('Predicted')\nplt.ylabel('Residuals')\nplt.title('Predicted vs Residuals')\nplt.show();","545db9bc":"y_test_pred_xgb_reg = xgb_reg.predict(X_test)","e00c9fcc":"print('Mean Absolute Error of XGBoost Regression on Test Set: ', mean_absolute_error(y_test, y_test_pred_xgb_reg))\nprint('Mean Squared Error of XGBoost Regression on Test Set: ', mean_squared_error(y_test, y_test_pred_xgb_reg))\nprint('R^2 Score of XGBoost Regression on Test Set: ', r2_score(y_test, y_test_pred_xgb_reg))\nprint('Root Mean Squared Error of XGBoost Regression on Test Set: ', np.sqrt(mean_absolute_error(y_test, y_test_pred_xgb_reg)))","be2bf39d":"plt.figure(figsize=(12, 10))\nplt.scatter(y_test, y_test_pred_xgb_reg)\nplt.xlabel('Prices')\nplt.ylabel('Predicted Prices')\nplt.title('Prices vs Predicted Prices')\nplt.show();","30c149a5":"plt.figure(figsize=(12, 10))\nplt.scatter(y_test_pred_xgb_reg, y_test-y_test_pred_xgb_reg)\nplt.xlabel('Predicted')\nplt.ylabel('Residuals')\nplt.title('Predicted vs Residuals')\nplt.show();","85464539":"acc_lin_reg = r2_score(y_test, y_test_pred_lin_reg)\nacc_rf_reg = r2_score(y_test, y_test_pred_rf_reg_model)\nacc_xgb_reg = r2_score(y_test, y_test_pred_xgb_reg)","6bacdf08":"models = pd.DataFrame({\n    'Model': ['Linear Regression', 'Random Forest Regression', 'XGBoost Regression'],\n    'R^2 Score': [acc_lin_reg*100, acc_rf_reg*100, acc_xgb_reg*100]\n})\nmodels.sort_values(by='R^2 Score', ascending=False)","83d67ecd":"### **Random Forest Regressor**","aec778b9":"Here's what our data columns represent:\n\n- **CRIM** - per capita crime rate by town\n- **ZN** - proportion of residential land zoned for lots over 25,000 sq.ft.\n- **INDUS** - proportion of non-retail business acres per town.\n- **CHAS** - Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n- **NOX** - nitric oxides concentration (parts per 10 million)\n- **RM** - average number of rooms per dwelling\n- **AGE** - proportion of owner-occupied units built prior to 1940\n- **DIS** - weighted distances to five Boston employment centres\n- **RAD** - index of accessibility to radial highways\n- **TAX** - full-value property-tax rate per 10,000 dollars\n- **PTRATIO**: pupil-teacher ratio by town\n- **B** - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n- **LSTAT** - % lower status of the population\n- **MEDV** - Median value of owner-occupied homes in $1000's\n\nWe are trying to predict the last column - MEDV (median house value of owner occupied homes in 1000's)","45048d15":"Variable #14 seems to be censored at 50.00 (corresponding to a median price of $50,000). Based on that, values above 50.00 may not help to predict MEDV."}}