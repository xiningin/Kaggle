{"cell_type":{"f361afe7":"code","2ee654dd":"code","3e5279f3":"code","b886a23c":"code","d9e13119":"code","71e04085":"code","14b565a7":"code","7a4f7b22":"code","02635607":"code","874e2fb0":"code","364f939b":"code","9fa6547a":"markdown","ec634072":"markdown","e5058ce1":"markdown","92db3c83":"markdown","58f93771":"markdown","403f8f8e":"markdown","9b522ef3":"markdown","5ab04a8b":"markdown","a4ac333e":"markdown","d2819727":"markdown"},"source":{"f361afe7":"import tensorflow.keras.layers as Layers\nimport tensorflow.keras.activations as Actications\nimport tensorflow.keras.models as Models\nimport tensorflow.keras.optimizers as Optimizer\nimport tensorflow.keras.metrics as Metrics\nimport tensorflow.keras.utils as Utils\nfrom keras.utils.vis_utils import model_to_dot\nimport os\nimport matplotlib.pyplot as plot\nimport cv2\nimport numpy as np\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix as CM\nfrom random import randint\nfrom IPython.display import SVG\nimport matplotlib.gridspec as gridspec","2ee654dd":"def get_images(directory):\n    Images = []\n    Labels = []  # 0 for Building , 1 for forest, 2 for glacier, 3 for mountain, 4 for Sea , 5 for Street\n    label = 0\n    \n    for labels in os.listdir(directory): #Main Directory where each class label is present as folder name.\n        if labels == 'glacier': #Folder contain Glacier Images get the '2' class label.\n            label = 2\n        elif labels == 'sea':\n            label = 4\n        elif labels == 'buildings':\n            label = 0\n        elif labels == 'forest':\n            label = 1\n        elif labels == 'street':\n            label = 5\n        elif labels == 'mountain':\n            label = 3\n        \n        for image_file in os.listdir(directory+labels): #Extracting the file name of the image from Class Label folder\n            image = cv2.imread(directory+labels+r'\/'+image_file) #Reading the image (OpenCV)\n            image = cv2.resize(image,(150,150)) #Resize the image, Some images are different sizes. (Resizing is very Important)\n            Images.append(image)\n            Labels.append(label)\n    \n    return shuffle(Images,Labels,random_state=817328462) #Shuffle the dataset you just prepared.\n\ndef get_classlabel(class_code):\n    labels = {2:'glacier', 4:'sea', 0:'buildings', 1:'forest', 5:'street', 3:'mountain'}\n    \n    return labels[class_code]","3e5279f3":"Images, Labels = get_images('..\/input\/seg_train\/seg_train\/') #Extract the training images from the folders.\n\nImages = np.array(Images) #converting the list of images to numpy array.\nLabels = np.array(Labels)","b886a23c":"print(\"Shape of Images:\",Images.shape)\nprint(\"Shape of Labels:\",Labels.shape)","d9e13119":"f,ax = plot.subplots(5,5) \nf.subplots_adjust(0,0,3,3)\nfor i in range(0,5,1):\n    for j in range(0,5,1):\n        rnd_number = randint(0,len(Images))\n        ax[i,j].imshow(Images[rnd_number])\n        ax[i,j].set_title(get_classlabel(Labels[rnd_number]))\n        ax[i,j].axis('off')","71e04085":"model = Models.Sequential()\n\nmodel.add(Layers.Conv2D(200,kernel_size=(3,3),activation='relu',input_shape=(150,150,3)))\nmodel.add(Layers.Conv2D(180,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(5,5))\nmodel.add(Layers.Conv2D(180,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.Conv2D(140,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.Conv2D(100,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.Conv2D(50,kernel_size=(3,3),activation='relu'))\nmodel.add(Layers.MaxPool2D(5,5))\nmodel.add(Layers.Flatten())\nmodel.add(Layers.Dense(180,activation='relu'))\nmodel.add(Layers.Dense(100,activation='relu'))\nmodel.add(Layers.Dense(50,activation='relu'))\nmodel.add(Layers.Dropout(rate=0.5))\nmodel.add(Layers.Dense(6,activation='softmax'))\n\nmodel.compile(optimizer=Optimizer.Adam(lr=0.0001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\nmodel.summary()\nSVG(model_to_dot(model).create(prog='dot', format='svg'))\nUtils.plot_model(model,to_file='model.png',show_shapes=True)","14b565a7":"trained = model.fit(Images,Labels,epochs=35,validation_split=0.30)","7a4f7b22":"plot.plot(trained.history['acc'])\nplot.plot(trained.history['val_acc'])\nplot.title('Model accuracy')\nplot.ylabel('Accuracy')\nplot.xlabel('Epoch')\nplot.legend(['Train', 'Test'], loc='upper left')\nplot.show()\n\nplot.plot(trained.history['loss'])\nplot.plot(trained.history['val_loss'])\nplot.title('Model loss')\nplot.ylabel('Loss')\nplot.xlabel('Epoch')\nplot.legend(['Train', 'Test'], loc='upper left')\nplot.show()","02635607":"test_images,test_labels = get_images('..\/input\/seg_test\/seg_test\/')\ntest_images = np.array(test_images)\ntest_labels = np.array(test_labels)\nmodel.evaluate(test_images,test_labels, verbose=1)","874e2fb0":"pred_images,no_labels = get_images('..\/input\/seg_pred\/')\npred_images = np.array(pred_images)\npred_images.shape","364f939b":"fig = plot.figure(figsize=(30, 30))\nouter = gridspec.GridSpec(5, 5, wspace=0.2, hspace=0.2)\n\nfor i in range(25):\n    inner = gridspec.GridSpecFromSubplotSpec(2, 1,subplot_spec=outer[i], wspace=0.1, hspace=0.1)\n    rnd_number = randint(0,len(pred_images))\n    pred_image = np.array([pred_images[rnd_number]])\n    pred_class = get_classlabel(model.predict_classes(pred_image)[0])\n    pred_prob = model.predict(pred_image).reshape(6)\n    for j in range(2):\n        if (j%2) == 0:\n            ax = plot.Subplot(fig, inner[j])\n            ax.imshow(pred_image[0])\n            ax.set_title(pred_class)\n            ax.set_xticks([])\n            ax.set_yticks([])\n            fig.add_subplot(ax)\n        else:\n            ax = plot.Subplot(fig, inner[j])\n            ax.bar([0,1,2,3,4,5],pred_prob)\n            fig.add_subplot(ax)\n\n\nfig.show()","9fa6547a":"Lets predict the images from the \"pred\" folder.","ec634072":"I hope you like my kernel. Feel free to ask any question in the comment section. I am looking forward for your **sugestions**!","e5058ce1":"To evaluate a model, there are many methods are proposed to evaluate the model. I use Accuracy to evaluate the performance of my model.","92db3c83":"Now, Create the CNN model to predict the class labels.This is the basic CNN model.","58f93771":"Lets find shape of our traing data.\n\nAs you see, The Training data is in shape of (Number of Training Images, Width of image, Height of image, Channel of image). This shape is very important. If you didnot resize the images to same size. It should be (No. of images,) shape. So, using this shape you cant feed the images to the model.","403f8f8e":"Following image shows the predicted class label on top of the image and probabilities below of the image.","9b522ef3":"Let us look some random images of our dataset.","5ab04a8b":"Now, lets train the model with validation split equal to 30% from training data. Validation split is used to determine that our model is not geting over-fitted.","a4ac333e":"Now, We need to prepare our data to feed into the model. There is a builtin method in [Keras](https:\/\/keras.io\/preprocessing\/image\/) that can extract your images from folders. But, I recommend you to make your own function for this purpose so you can practice the python.\n\nFollowing is the gernalized function used to extract data from the directory.","d2819727":"\nHello, Kagglers!\n\nIn this kernel, i will show you how to build the basic model in Tensorflow Keras. First of all i will use Convolutional Neural Network (CNN) in this kernel to predict upto 6 class labels.\n\nFirst, import the important libraries."}}