{"cell_type":{"3f8cb941":"code","7fd0a5c8":"code","974088bf":"code","89119130":"code","d0b56c2e":"code","195e46d6":"code","03de7b9c":"code","df909eb4":"code","1ce859b8":"code","71e94ba1":"code","b5ce43e1":"code","192ca25b":"code","0e0378ca":"code","750db030":"code","d81574b5":"code","6209e617":"code","e0265387":"code","e39f7c78":"code","a5cdfcde":"code","97e7d206":"code","3b169f86":"code","d1c5d897":"code","4be1a9fd":"code","f1302557":"code","42654e8c":"code","cd67a7cd":"code","83ef098e":"code","2f2397c6":"code","cb722fba":"code","e02b98b6":"code","f02fec93":"code","7f87c352":"code","5b0d19b8":"code","10502ffc":"code","5141bdd0":"code","94d0456c":"code","1b345e30":"code","3199181d":"code","e6dba600":"code","7738401e":"code","173b5e1d":"code","0e2ba440":"code","0c899f75":"code","d5042b94":"code","beff990b":"code","b83993ef":"code","b6b8f684":"code","ec34fcf2":"code","f17e1578":"code","c5316243":"code","827967ef":"code","9a6a957e":"code","ee9072a1":"code","0fe78ffe":"code","b3cad526":"code","4abcad72":"code","d19b722f":"code","cf319b41":"code","9ca4f00b":"code","89d2f52b":"code","3e0123c2":"code","a89b54bf":"code","070369c6":"code","a108caaa":"code","8fc9171e":"code","4bfa5299":"code","bca3d9b6":"code","c3f11856":"code","ec6d4c26":"code","067720bb":"code","b867dc17":"code","c421ea2b":"code","988241d1":"code","1cff74df":"code","9ee49d20":"code","6238ea3f":"code","3c2c3db6":"code","7220a6d8":"code","c8cb2d70":"code","85c28156":"code","3f6e8f13":"code","f4b8e7c3":"code","4447a4c9":"code","868215e0":"code","3007ba10":"markdown","dfd076df":"markdown","eb8246b4":"markdown","3be57a7c":"markdown","0a506b24":"markdown","0d7d66fa":"markdown","8b257607":"markdown","34f7d14d":"markdown","7b1820b3":"markdown","06638a3d":"markdown"},"source":{"3f8cb941":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fd0a5c8":"### Importing the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","974088bf":"#### Read data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","89119130":"## Basic details about data\nprint('Train Data Shape' , train.shape)\nprint('Test Data Shape' , test.shape)\nprint('Submission Data Shape' , submission.shape)\nprint('############################################')\nprint('Train Data Info to check datatypes and NULLs')\nprint(train.info())\nprint('############################################')\nprint('Test Data Info to check datatypes and NULLs')\nprint(test.info())","d0b56c2e":"train.head()","195e46d6":"### Find Numerical and Categorical features\nnumerical = [features for features in train.columns if train[features].dtypes != 'O'] \n\ncategorical = [features for features in train.columns if train[features].dtypes == 'O']\n\nprint('Numerical Features are : ')\nprint(numerical)\nprint('Categorical Features are : ')\nprint(categorical)","03de7b9c":"### Function to plot categorical features\ndef CatBar(data,feature):\n    fig = data[feature].value_counts().plot.bar()\n    fig.set_title(feature)\n    fig.set_ylabel('Number')\n    plt.show()","df909eb4":"for f in categorical:\n    CatBar(train,f)","1ce859b8":"pd.crosstab(index= train['Sex'] , columns=train['Embarked']).plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)","71e94ba1":"pd.crosstab(index= train['Sex'] , columns=train['Survived']).plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)","b5ce43e1":"pd.crosstab(index= train['Embarked'] , columns=train['Survived']).plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)","192ca25b":"train['Cabin'].head()","0e0378ca":"train['Cabin_Start'] = train['Cabin'].str.slice(0,1)\ntest['Cabin_Start'] = test['Cabin'].str.slice(0,1)","750db030":"train['Cabin_Start'].value_counts(dropna=False)","d81574b5":"pd.crosstab(index= train['Embarked'] , columns=train['Cabin_Start']).plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)","6209e617":"train['Cabin_number'] = train['Cabin'].str.slice(1,3)\ntest['Cabin_number'] = test['Cabin'].str.slice(1,3)","e0265387":"train[train['Cabin_Start'] == 'A']['Cabin_number'].sort_values()","e39f7c78":"pd.crosstab(index= train['Sex'] , columns=train['Cabin_Start']).plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)","a5cdfcde":"pd.crosstab(index= train['Cabin_Start'] , columns=train['Survived']).plot(kind=\"bar\", \n                 figsize=(8,8),\n                 stacked=True)","97e7d206":"pd.pivot_table(train, values=['Fare', 'Age'], index=['Cabin_Start' , 'Embarked' , 'Pclass' , 'Sex'],\n                    aggfunc={'Age': [min, max, np.median],\n                             'Fare': [min, max, np.median]})","3b169f86":"x = train[train['Fare'] != 0]\npd.pivot_table(x, values=['Fare', 'Age'], index=['Embarked' , 'Pclass' , 'Sex'],\n                    aggfunc={'Age': [min, max, np.median],\n                             'Fare': [min, max, np.median]})","d1c5d897":"x = train[train['Fare'] != 0]\npd.pivot_table(x, values=['Fare', 'Age'], index=['Pclass' , 'Sex'],\n                    aggfunc={'Age': [min, max, np.median],\n                             'Fare': [min, max, np.median]})","4be1a9fd":"x = train[train['Fare'] != 0]\npd.pivot_table(x, values=['Fare', 'Age'], index=['Pclass' , 'Sex' , 'SibSp'],\n                    aggfunc={'Age': [min, max, np.mean],\n                             'Fare': [min, max, np.mean]})","f1302557":"train[train['Age'].isnull()]","42654e8c":"# Populate Age_Fill\ntrain['Age_notnull'] = train['Age'].groupby([train['Pclass'], train['Sex']]).apply(lambda x: x.fillna(x.mean()))\ntrain.head()                                         ","cd67a7cd":"## Change for test data\ntest['Age_notnull'] = test['Age'].groupby([test['Pclass'], test['Sex']]).apply(lambda x: x.fillna(x.mean()))","83ef098e":"train['Cabin_Start'].value_counts(dropna=False).sort_index()","2f2397c6":"#x = train[train['Cabin'].isnull()]\ntrain.groupby(['Pclass' , 'Cabin_Start'])['Cabin_Start'].count()","cb722fba":"train.groupby(['Embarked' , 'Cabin_Start'])['Cabin_number'].max()","e02b98b6":"train.info()","f02fec93":"train[train['Embarked'].isnull()]","7f87c352":"train[train['Cabin_number'] == '28' ]","5b0d19b8":"# replacing na values in Embarked with S\ntrain[\"Embarked\"].fillna(\"S\", inplace = True)","10502ffc":"train.info()","5141bdd0":"train.Cabin_Start.value_counts(dropna = False).sort_index()","94d0456c":"# replacing na values in Cabin_Start with X\ntrain[\"Cabin_Start\"].fillna(\"X\", inplace = True)","1b345e30":"train.info()","3199181d":"### Apply same to test data\ntest.head()","e6dba600":"# replacing na values in Cabin_Start with X\ntest[\"Cabin_Start\"].fillna(\"X\", inplace = True)\n# replacing na values in Embarked with S\ntest[\"Embarked\"].fillna(\"S\", inplace = True)","7738401e":"test.info()","173b5e1d":"# replacing na values in Fare with mean\ntest[\"Fare\"].fillna(test['Fare'].mean(), inplace = True)","0e2ba440":"test.info()","0c899f75":"### Drop not needed columns\ntrain.drop(['Age' , 'Cabin' , 'Cabin_number'] , axis=1 , inplace=True)\ntest.drop(['Age' , 'Cabin' , 'Cabin_number'] , axis=1 , inplace=True)","d5042b94":"train.shape , test.shape","beff990b":"train.info()","b83993ef":"test.info()","b6b8f684":"train.head()","ec34fcf2":"train['Ticket'].describe()","f17e1578":"train['Ticket'].sort_values()","c5316243":"train[train['Ticket'] == '110152']","827967ef":"train.drop(['Ticket'] , axis=1 , inplace=True)\ntest.drop(['Ticket'] , axis=1 , inplace=True)","9a6a957e":"train.shape , test.shape","ee9072a1":"train.head()","0fe78ffe":"train.columns","b3cad526":"Map = {\"X\": 0, \"A\": 1 , \"B\" : 2 , \"C\": 3 , \"D\" : 4 , \"E\" : 5 , \"F\" : 6 , \"G\" : 7 , \"T\" : 8}\ndata = [train, test]\n\nfor dataset in data:\n    dataset['Cabin_Start'] = dataset['Cabin_Start'].map(Map)","4abcad72":"train.head()","d19b722f":"## Create X and y \nX = train[['Pclass', 'Sex', 'SibSp', 'Parch','Fare', 'Embarked', 'Cabin_Start', 'Age_notnull']]\ny = train['Survived']","cf319b41":"X.shape , y.shape","9ca4f00b":"## Create Dummy variables\nsex = pd.get_dummies(X['Sex'] , drop_first=True)\nembarked = pd.get_dummies(X['Embarked'] , drop_first=True)\n#cs = pd.get_dummies(X['Cabin_Start'] , drop_first=True)","89d2f52b":"X = pd.concat([X,sex,embarked], axis=1)\nX.head()","3e0123c2":"X = X.drop(['Sex' , 'Embarked'] , axis=1)","a89b54bf":"X.head()","070369c6":"##feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)","a108caaa":"X","8fc9171e":"from sklearn.model_selection  import train_test_split\nX_train, X_test , y_train , y_test = train_test_split(X , y , test_size = 0.2 , random_state=0)","4bfa5299":"X_train.shape","bca3d9b6":"## import keras libraries\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU, PReLU , ELU\nfrom keras.layers import Dropout","c3f11856":"### Initialize ANN\nclassifier = Sequential()\n\n## Add input layer and first hidden layer\nclassifier.add(Dense(units=6 , kernel_initializer = 'he_uniform' , activation = 'relu' , input_dim = 9 ))\n## Add second hidden layer\nclassifier.add(Dense(units=6 , kernel_initializer = 'he_uniform' , activation = 'relu' ))\n#classifier.add(Dense(units=4 , kernel_initializer = 'he_uniform' , activation = 'relu' ))\n## Add output layer\nclassifier.add(Dense(units= 1 , kernel_initializer = 'glorot_uniform' , activation = 'sigmoid' ))\n\n## Compiling ANN\nclassifier.compile(optimizer = 'adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'])\n\n## Print Summmary\nprint(classifier.summary())","ec6d4c26":"## Fitting ANN to training data\nmodel_result = classifier.fit(X_train , y_train , validation_split = 0.3 , batch_size=10 , epochs = 100)","067720bb":"### Plot results\nplt.plot(model_result.history['accuracy'])\nplt.plot(model_result.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epochs')\nplt.legend(['train' , 'test'] , loc='upper left')\nplt.show()","b867dc17":"## Predict for test\ny_pred = classifier.predict(X_test)\n\ny_prediction = (y_pred > 0.5)","c421ea2b":"from sklearn.metrics import confusion_matrix\ncm  = confusion_matrix(y_test , y_prediction)\ncm","988241d1":"from sklearn.metrics import accuracy_score\nscore = accuracy_score(y_prediction , y_test)\nscore","1cff74df":"X_test = test[['Pclass', 'Sex', 'SibSp', 'Parch','Fare', 'Embarked', 'Cabin_Start', 'Age_notnull']]\nX_test.head()","9ee49d20":"### Use actual test data\n## Create Dummy variables\nsex = pd.get_dummies(X_test['Sex'] , drop_first=True)\nembarked = pd.get_dummies(X_test['Embarked'] , drop_first=True)\n#cs = pd.get_dummies(X_test['Cabin_Start'] , drop_first=True)\nX_test = pd.concat([X_test,sex,embarked], axis=1)\nX_test = X_test.drop(['Sex' , 'Embarked'] , axis=1)\nX_test.head()","6238ea3f":"sc = StandardScaler()\nX_test = sc.fit_transform(X_test)\nX_test","3c2c3db6":"X_test.shape","7220a6d8":"y_prediction = classifier.predict(X_test)\ny_prediction","c8cb2d70":"y_pred = (y_prediction > 0.5)\ny_pred","85c28156":"y_pred = []\nfor i in y_prediction:\n    if (i >= 0.5):\n        y_pred.append(1)\n    else:\n        y_pred.append(0)\n\ny_pred","3f6e8f13":"submission.head()","f4b8e7c3":"submission['Survived'] = y_pred\nsubmission.head()","4447a4c9":"type(submission)\n        ","868215e0":"submission.to_csv('submission.csv',index=False)\nprint('file Submitted')","3007ba10":"### All NUll Values are removed","dfd076df":"#### Categorical features : Bivariate analysis","eb8246b4":"### Observations\nTrain data\n1. Age has Null data (Contineous Numerical)\n2. Cabin has null data (Categorical)\n3. Embarked has null data (categorical)\nTest Data\n1. Age , Cabin , Embarked has null data\n2. Fare has one record null (Contineous Numerical)","3be57a7c":"#### Observations \n1. More Male passengers than Female\n2. Highest number of passengers in Embarked S than C and D","0a506b24":"As part of bivatiate analysis , check with target numerical feature","0d7d66fa":"#### Observation\nIt is clear that proportion of male who did not survive is very high compaired to Female","8b257607":"Also it is evident that survival was more in C embarked and very less in S. For Q it is almost same","34f7d14d":"#### Categorical features : Univariate analysis","7b1820b3":"## Data Analysis","06638a3d":"### Duplicates are present in Ticket so its better to drop it"}}