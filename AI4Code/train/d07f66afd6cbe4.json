{"cell_type":{"abdb4939":"code","450266c7":"code","45745766":"code","96b0e73c":"code","abd3227a":"code","516a1e06":"code","2d068823":"code","a699d950":"code","3b4f6a37":"code","7cd11fdb":"code","df9dfaf8":"code","782aa8c1":"code","598c0818":"code","9cd00a46":"code","67b33716":"code","cf368e91":"code","8aeee280":"code","75c452f4":"code","ff49aa61":"code","abf44925":"markdown","49905e0c":"markdown","26625d9e":"markdown","25f38e72":"markdown","b9726bd6":"markdown","d56941c4":"markdown"},"source":{"abdb4939":"# Importing all necessary libraries.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","450266c7":"df = pd.read_csv('..\/input\/pokemon\/Pokemon.csv')","45745766":"df.head()","96b0e73c":"df.info()","abd3227a":"df.describe()","516a1e06":"# Dropping non-integer features.\ndf2 = df.drop(['Type 1', 'Type 2'], axis = 1) ","2d068823":"df2.isnull().sum()","a699d950":"# Dropping non-integer features.\ndf3 = df2.drop(['#', 'Name', 'Legendary'], axis = 1) ","3b4f6a37":"df3.dtypes","7cd11fdb":"X = df3.values\n# Using the standard scaler method to standardize all of the features by converting them into values between -3 and +3.\nfrom sklearn.preprocessing import StandardScaler\nX = StandardScaler().fit_transform(X)","df9dfaf8":"# Implementing T-Distributed Stochastic Network Embedding.\nfrom sklearn.manifold import TSNE\ntsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\ntsne_results1 = tsne.fit_transform(X)","782aa8c1":"tsne_results1","598c0818":"# Creating a dataframe featuring the two t-sne components that we acquired through t-SNE.\ntsne_dataset1 = pd.DataFrame(data = tsne_results1, columns = ['component1', 'component2'] )\ntsne_dataset1.head()","9cd00a46":"# Extracting the two features from above in order to add them to the dataframe.\ntsne_component1 = tsne_dataset1['component1']\ntsne_component2 = tsne_dataset1['component2']","67b33716":"# Visualizing the effects of the T-distributed Stochastic Neighbour Embedding.\nplt.figure()\nplt.figure(figsize=(10,10))\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\nplt.title('2 Component TSNE')\nplt.scatter(tsne_component1, tsne_component2)","cf368e91":"# Implementing a dendogram to visualize the euclidean distanced between each data point.\nimport scipy.cluster.hierarchy as sch\ndendrogram = sch.dendrogram(sch.linkage(tsne_results1, method = 'ward'))\nplt.title('Dendrogram')\nplt.xlabel('Data Points')\nplt.ylabel('Euclidean distances')\nplt.show()","8aeee280":"df3.shape","75c452f4":"# Implementing the Hierachical Clustering.\nfrom sklearn.cluster import AgglomerativeClustering\nhc2 = AgglomerativeClustering(n_clusters = 40, affinity = 'euclidean', linkage = 'ward')\ny_hc2 = hc2.fit_predict(tsne_results1)","ff49aa61":"# Plotting the clusters.\nplt.scatter(tsne_results1[y_hc2 == 0, 0], tsne_results1[y_hc2 == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(tsne_results1[y_hc2 == 1, 0], tsne_results1[y_hc2 == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(tsne_results1[y_hc2 == 2, 0], tsne_results1[y_hc2 == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(tsne_results1[y_hc2 == 3, 0], tsne_results1[y_hc2 == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(tsne_results1[y_hc2 == 4, 0], tsne_results1[y_hc2 == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.scatter(tsne_results1[y_hc2 == 5, 0], tsne_results1[y_hc2 == 5, 1], s = 100, c = 'limegreen', label = 'Cluster 6')\nplt.scatter(tsne_results1[y_hc2 == 6, 0], tsne_results1[y_hc2 == 6, 1], s = 100, c = 'lavender', label = 'Cluster 7')\nplt.scatter(tsne_results1[y_hc2 == 7, 0], tsne_results1[y_hc2 == 7, 1], s = 100, c = 'black', label = 'Cluster 8')\nplt.scatter(tsne_results1[y_hc2 == 8, 0], tsne_results1[y_hc2 == 8, 1], s = 100, c = 'dimgray', label = 'Cluster 9')\nplt.scatter(tsne_results1[y_hc2 == 9, 0], tsne_results1[y_hc2 == 9, 1], s = 100, c = 'silver', label = 'Cluster 10')\nplt.scatter(tsne_results1[y_hc2 == 10, 0], tsne_results1[y_hc2 == 10, 1], s = 100, c = 'gainsboro', label = 'Cluster 11')\nplt.scatter(tsne_results1[y_hc2 == 11, 0], tsne_results1[y_hc2 == 11, 1], s = 100, c = 'white', label = 'Cluster 12')\nplt.scatter(tsne_results1[y_hc2 == 12, 0], tsne_results1[y_hc2 == 12, 1], s = 100, c = 'whitesmoke', label = 'Cluster 13')\nplt.scatter(tsne_results1[y_hc2 == 13, 0], tsne_results1[y_hc2 == 13, 1], s = 100, c = 'rosybrown', label = 'Cluster 14')\nplt.scatter(tsne_results1[y_hc2 == 14, 0], tsne_results1[y_hc2 == 14, 1], s = 100, c = 'indianred', label = 'Cluster 15')\nplt.scatter(tsne_results1[y_hc2 == 15, 0], tsne_results1[y_hc2 == 15, 1], s = 100, c = 'firebrick', label = 'Cluster 16')\nplt.scatter(tsne_results1[y_hc2 == 16, 0], tsne_results1[y_hc2 == 16, 1], s = 100, c = 'red', label = 'Cluster 17')\nplt.scatter(tsne_results1[y_hc2 == 17, 0], tsne_results1[y_hc2 == 17, 1], s = 100, c = 'mistyrose', label = 'Cluster 18')\nplt.scatter(tsne_results1[y_hc2 == 18, 0], tsne_results1[y_hc2 == 18, 1], s = 100, c = 'salmon', label = 'Cluster 19')\nplt.scatter(tsne_results1[y_hc2 == 19, 0], tsne_results1[y_hc2 == 19, 1], s = 100, c = 'darksalmon', label = 'Cluster 20')\nplt.scatter(tsne_results1[y_hc2 == 20, 0], tsne_results1[y_hc2 == 20, 1], s = 100, c = 'coral', label = 'Cluster 21')\nplt.scatter(tsne_results1[y_hc2 == 21, 0], tsne_results1[y_hc2 == 21, 1], s = 100, c = 'orangered', label = 'Cluster 22')\nplt.scatter(tsne_results1[y_hc2 == 22, 0], tsne_results1[y_hc2 == 22, 1], s = 100, c = 'sienna', label = 'Cluster 23')\nplt.scatter(tsne_results1[y_hc2 == 23, 0], tsne_results1[y_hc2 == 23, 1], s = 100, c = 'seashell', label = 'Cluster 24')\nplt.scatter(tsne_results1[y_hc2 == 24, 0], tsne_results1[y_hc2 == 24, 1], s = 100, c = 'chocolate', label = 'Cluster 25')\nplt.scatter(tsne_results1[y_hc2 == 25, 0], tsne_results1[y_hc2 == 25, 1], s = 100, c = 'saddlebrown', label = 'Cluster 26')\nplt.scatter(tsne_results1[y_hc2 == 26, 0], tsne_results1[y_hc2 == 26, 1], s = 100, c = 'sandybrown', label = 'Cluster 27')\nplt.scatter(tsne_results1[y_hc2 == 27, 0], tsne_results1[y_hc2 == 27, 1], s = 100, c = 'peachpuff', label = 'Cluster 28')\nplt.scatter(tsne_results1[y_hc2 == 28, 0], tsne_results1[y_hc2 == 28, 1], s = 100, c = 'peru', label = 'Cluster 29')\nplt.scatter(tsne_results1[y_hc2 == 29, 0], tsne_results1[y_hc2 == 29, 1], s = 100, c = 'bisque', label = 'Cluster 30')\nplt.scatter(tsne_results1[y_hc2 == 30, 0], tsne_results1[y_hc2 == 30, 1], s = 100, c = 'linen', label = 'Cluster 31')\nplt.scatter(tsne_results1[y_hc2 == 31, 0], tsne_results1[y_hc2 == 31, 1], s = 100, c = 'darkorange', label = 'Cluster 32')\nplt.scatter(tsne_results1[y_hc2 == 32, 0], tsne_results1[y_hc2 == 32, 1], s = 100, c = 'burlywood', label = 'Cluster 33')\nplt.scatter(tsne_results1[y_hc2 == 33, 0], tsne_results1[y_hc2 == 33, 1], s = 100, c = 'antiquewhite', label = 'Cluster 34')\nplt.scatter(tsne_results1[y_hc2 == 34, 0], tsne_results1[y_hc2 == 34, 1], s = 100, c = 'tan', label = 'Cluster 35')\nplt.scatter(tsne_results1[y_hc2 == 35, 0], tsne_results1[y_hc2 == 35, 1], s = 100, c = 'navajowhite', label = 'Cluster 36')\nplt.scatter(tsne_results1[y_hc2 == 36, 0], tsne_results1[y_hc2 == 36, 1], s = 100, c = 'orange', label = 'Cluster 37')\nplt.scatter(tsne_results1[y_hc2 == 37, 0], tsne_results1[y_hc2 == 37, 1], s = 100, c = 'oldlace', label = 'Cluster 38')\nplt.scatter(tsne_results1[y_hc2 == 38, 0], tsne_results1[y_hc2 == 38, 1], s = 100, c = 'darkgoldenrod', label = 'Cluster 39')\nplt.scatter(tsne_results1[y_hc2 == 39, 0], tsne_results1[y_hc2 == 39, 1], s = 100, c = 'goldenrod', label = 'Cluster 40')\nplt.title('Clusters of Pokemon Characters')\nplt.xlabel('t-SNE Component 1')\nplt.ylabel('t-SNE Component 2')\nplt.show()","abf44925":"# Importing Libraries","49905e0c":"# Hierarchical","26625d9e":"In this notebook I take a look at clustering pokemon characters using hierachical clustering based on the given features in the dataset.","25f38e72":"# Data","b9726bd6":"# Clustering Pokemon using Hierarchical","d56941c4":"# t-SNE"}}