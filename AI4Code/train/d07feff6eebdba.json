{"cell_type":{"934d32e0":"code","0863dcac":"code","da2c9ccf":"code","d675be80":"code","c68ac29d":"code","746eec60":"code","f62af968":"code","67867acf":"code","d0459a10":"code","20cb2ba3":"code","885c2059":"code","88beb5cc":"code","aaab8b89":"code","ef9a4219":"code","779ca61d":"code","ad6a48d2":"code","01c0b813":"code","86dcda77":"code","945b5e54":"code","1d21ed91":"code","4f2ffcf5":"markdown","0f11e7b5":"markdown","8bea6ddb":"markdown"},"source":{"934d32e0":"import numpy as np \nimport pandas as pd \nimport os\nimport cv2\nimport requests","0863dcac":"df = pd.read_csv('..\/input\/bms-molecular-translation\/train_labels.csv')\ndf.head()","da2c9ccf":"inchi = df['InChI'].iloc[0]\ninchi","d675be80":"## you can send a direct request to get the SMILES representation \nHOST = \"http:\/\/www.chemspider.com\"\nOperation = \"\/InChI.asmx\/InChIToInChIKey?inchi=\"\n\nrequest = requests.get('{}{}{}'.format(HOST, Operation, inchi))\nif request.ok:\n    res = str(request.text.replace('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\r\\n<string xmlns=\"http:\/\/www.chemspider.com\/\">', '').replace('<\/string>', '').strip())\nelse:\n    print (\"provide a valid inchi!\")\nprint(res)","c68ac29d":"!pip install bioservices","746eec60":"#get information about the Molecular\nfrom bioservices import *\ninfo = UniChem()\ncid = info.get_src_compound_ids_from_inchikey(res)[0]","f62af968":"# Now let us go to SMILES using another service for FUN \ndef get_smiles_from_inchikey(inchikey):\n    request = requests.get(f'https:\/\/pubchem.ncbi.nlm.nih.gov\/rest\/pug\/compound\/inchikey\/{inchikey}\/property\/CanonicalSMILES\/JSON').json()\n    return request['PropertyTable']['Properties'][0]['CanonicalSMILES']","67867acf":"smiles_pres=get_smiles_from_inchikey(res)\nprint(smiles_pres)","d0459a10":"# new library ))\n!pip install -U chembl_webresource_client","20cb2ba3":"# go back from InChiKey to In Chi\nfrom chembl_webresource_client.unichem import unichem_client as unichem\nret = unichem.inchiFromKey(res)\nprint (ret[0]['standardinchi'])\nprint(inchi)","885c2059":"!wget -c https:\/\/repo.continuum.io\/miniconda\/Miniconda3-py37_4.8.3-Linux-x86_64.sh\n!chmod +x Miniconda3-py37_4.8.3-Linux-x86_64.sh\n!time bash .\/Miniconda3-py37_4.8.3-Linux-x86_64.sh -b -f -p \/usr\/local\n!time conda install -q -y -c conda-forge rdkit\n\nimport sys\nsys.path.append('\/usr\/local\/lib\/python3.7\/site-packages\/')","88beb5cc":"from rdkit import Chem\nfrom rdkit.Chem import Draw\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","aaab8b89":"# ref: https:\/\/www.kaggle.com\/ihelon\/molecular-translation-exploratory-data-analysis \ndef convert_image_id_2_path(image_id: str) -> str:\n    return \"..\/input\/bms-molecular-translation\/train\/{}\/{}\/{}\/{}.png\".format(\n        image_id[0], image_id[1], image_id[2], image_id \n    )","ef9a4219":"#ref: https:\/\/www.kaggle.com\/ihelon\/molecular-translation-exploratory-data-analysis\ndef visualize_train_image(image_id, label):\n    plt.figure(figsize=(8, 8))\n    print(image_id)\n    image = cv2.imread(convert_image_id_2_path(image_id))\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    plt.imshow(image)\n    plt.title(f\"{label}\", fontsize=14)\n    plt.axis(\"off\")\n    \n    plt.show()","779ca61d":"sample_row = df.iloc[0]\nvisualize_train_image(\n        sample_row[\"image_id\"], sample_row[\"InChI\"]\n    )","ad6a48d2":"penicillin_g_smiles = smiles_pres\n\npenicillin_g = Chem.MolFromSmiles(penicillin_g_smiles)\n\nDraw.MolToMPL(penicillin_g, size=(200, 200))","01c0b813":"!pip install py3Dmol","86dcda77":"import py3Dmol","945b5e54":"#Notebook ref: https:\/\/www.kaggle.com\/maunish\/bms-super-cool-eda\ndef show_3d_models(cid):\n    view = py3Dmol.view(width=600, height=1000, query=cid, viewergrid=(2,1), linked=False)\n    view.setStyle({'stick': {}}, viewer=(0,0))\n    view.setStyle({'sphere': {}}, viewer=(1,0))\n    view.setBackgroundColor('#1AD40D', viewer=(0,0))\n    view.setBackgroundColor('#1AD40D', viewer=(1,0))\n    view.show()","1d21ed91":"cid = 'cid:'+cid['src_compound_id']\nshow_3d_models(cid)","4f2ffcf5":"## Data Manpulation\nIn this notebook i will show how to convert the labels to different represntations. As all of you know there is already a pretrained model https:\/\/github.com\/Kohulan\/DECIMER-Image-to-SMILES to Extract SMILES representation from images.","0f11e7b5":"## Note\nUsing DECIMER directly will give a really bad results the first step is to make image denoisying.\nHope it will be useful","8bea6ddb":"## Let us Generate a good images"}}