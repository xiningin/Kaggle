{"cell_type":{"67e4718e":"code","c9afa62b":"code","5b38bc26":"code","c95d8169":"code","13dbd85d":"code","7f47bac9":"code","07a7ad61":"code","a519f209":"code","4b57f033":"code","e814e9ae":"code","48ffc295":"code","1368b555":"markdown","39910a28":"markdown","25fa0494":"markdown"},"source":{"67e4718e":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport string\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom tensorflow.keras.layers.experimental.preprocessing import TextVectorization\nfrom tensorflow.keras.applications import EfficientNetB0\nimport matplotlib.pyplot as plt\nimport seaborn as sns;sns.set()\nimport glob\nimport multiprocessing\nimport os\nimport cuml, cudf, cupy\nfrom cuml.neighbors import NearestNeighbors\nfrom cuml.feature_extraction.text import TfidfVectorizer","c9afa62b":"AUTOTUNE = tf.data.AUTOTUNE\nBATCH_SIZE=16\nIMG_SIZE=256","5b38bc26":"df = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\ndf.head()\nlen(df)","c95d8169":"df['image_path'] = '..\/input\/shopee-product-matching\/test_images' + df['image']\nfiles = df['image_path'].values\ndf.drop(['image'], axis=1, inplace=True)","13dbd85d":"def load_image(img_path):\n    img = tf.io.read_file(img_path)\n    img = tf.image.decode_jpeg(img)\n    img = tf.cast(img, tf.float32)\n    img = tf.image.resize(img, [IMG_SIZE,IMG_SIZE])\n    print(\"Image loaded\")\n    return img\n\ndef image_dataset(file_paths, ordered=True, encoder=None):\n    ds = tf.data.Dataset.from_tensor_slices(file_paths)\n    ds = ds.map(load_image, num_parallel_calls=AUTOTUNE)\n    if not ordered:\n        ds.data.options().experimental_deterministic=False\n    ds = ds.batch(BATCH_SIZE)\n    if encoder:\n        ds = ds.map(encoder.predict)\n    ds = ds.prefetch(AUTOTUNE)\n    \n    return ds","7f47bac9":"def encoder_factory():\n    base = EfficientNetB0(weights='imagenet', include_top=False, pooling='avg')\n    return base","07a7ad61":"def predict_same_image(df,threshold, distances,indexes):\n    match_column = []\n    for i in range(len(df)):\n        matches=indexes[i,distances[i,]<threshold]\n        match_ids = df.loc[matches,'posting_id'].values\n        #matches_string = \" \".join(match_ids)\n        match_column.append(match_ids)\n    \n    return match_column\n\n#matches = predict_same_image(df, 7.08, distances, indexes)\n#df['matches']=matches","a519f209":"df_g = cudf.DataFrame(df)\n\n\nmodel = TfidfVectorizer(stop_words=None,\n                       binary=True,\n                       max_features=25000)\ntext_embeddings = model.fit_transform(df_g.title).toarray()","4b57f033":"\n\npreds = []\nCHUNK = 1024*4\n\nprint('Finding similar titles...')\nCTS = len(df_g)\/\/CHUNK\nif len(df_g)%CHUNK!=0: CTS += 1\nfor j in range( CTS ):\n    \n    a = j*CHUNK\n    b = (j+1)*CHUNK\n    b = min(b,len(df_g))\n    print('chunk',a,'to',b)\n    \n    #COSINE SIMILARITY DISTANCE\n    cts = cupy.matmul(text_embeddings, text_embeddings[a:b].T).T\n    \n    for k in range(b-a):\n        IDX = cupy.where(cts[k,]>0.75)[0]\n        o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n        preds.append(o)\n\ndf['matches'] = preds","e814e9ae":"submission_frame = pd.DataFrame({'posting_id':df['posting_id'], 'matches':df['matches'].str.join(\" \")})\nsubmission_frame.to_csv('.\/submission.csv', index=False)","48ffc295":"submission_frame","1368b555":"KNN = 50 if len(files)>50 else 3\nneighbors = NearestNeighbors(KNN)\nneighbors.fit(encoded)\ndistances, indexes = neighbors.kneighbors(encoded)","39910a28":"from pathlib import Path\nencoder = keras.models.load_model('..\/input\/efficientb0\/model.hdf5')\ndataset = image_dataset(files)\n\n\nencoded = encoder.predict(dataset)\nnp.save('encoded.npy',encoded)\n","25fa0494":"gpus = tf.config.list_physical_devices('GPU')\nif gpus:\n  # Restrict TensorFlow to only allocate 1GB of memory on the first GPU\n  try:\n    tf.config.experimental.set_virtual_device_configuration(\n        gpus[0],\n        [tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1024)])\n    logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n    print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n  except RuntimeError as e:\n    # Virtual devices must be set before GPUs have been initialized\n    print(e)\n"}}