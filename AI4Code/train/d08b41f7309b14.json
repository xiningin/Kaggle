{"cell_type":{"ba424c08":"code","5ffdf787":"code","b69b125f":"code","58d1cccd":"code","43a0cb74":"code","bc3a6bb5":"markdown","877f6352":"markdown","2677a3f5":"markdown","e1325e28":"markdown","ba8c4bc3":"markdown"},"source":{"ba424c08":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQzenkpbOEWHf9fYZfEZU1sRQ7Fgu5amAIuK6w1B6kx1O00z8-4&usqp=CAU',width=400,height=400)","5ffdf787":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b69b125f":"image = cv2.imread('\/kaggle\/input\/plant-pathology-more-data-no-background\/images\/images\/Test_1006.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\nplt.figure(figsize=(20, 20))\nplt.subplot(1, 2, 1)\nplt.title(\"Original\")\nplt.imshow(image)\n\n# Create our shapening kernel, we don't normalize since the \n# the values in the matrix sum to 1\nkernel_sharpening = np.array([[-1,-1,-1], \n                              [-1,9,-1], \n                              [-1,-1,-1]])\n\n# applying different kernels to the input image\nsharpened = cv2.filter2D(image, -1, kernel_sharpening)\n\n\nplt.subplot(1, 2, 2)\nplt.title(\"Image Sharpening\")\nplt.imshow(sharpened)\n\nplt.show()","58d1cccd":"# Load our new image\nimage = cv2.imread('\/kaggle\/input\/plant-pathology-more-data-no-background\/images\/images\/Test_1006.jpg', 0)\n\nplt.figure(figsize=(30, 30))\nplt.subplot(3, 2, 1)\nplt.title(\"Original\")\nplt.imshow(image)\n\n#Values below 127 goes to 0 (black, everything above goes to 255 (white)\nret,thresh1 = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)\n\nplt.subplot(3, 2, 2)\nplt.title(\"Threshold Binary\")\nplt.imshow(thresh1)\n\n# It's good practice to blur images as it removes noise\nimage = cv2.GaussianBlur(image, (3, 3), 0)\n\n# Using adaptiveThreshold\nthresh = cv2.adaptiveThreshold(image, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 3, 5) \n\nplt.subplot(3, 2, 3)\nplt.title(\"Adaptive Mean Thresholding\")\nplt.imshow(thresh)\n\n\n_, th2 = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n\nplt.subplot(3, 2, 4)\nplt.title(\"Otsu's Thresholding\")\nplt.imshow(th2)\n\n\nplt.subplot(3, 2, 5)\n# Otsu's thresholding after Gaussian filtering\nblur = cv2.GaussianBlur(image, (5,5), 0)\n_, th3 = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\nplt.title(\"Guassian Otsu's Thresholding\")\nplt.imshow(th3)\nplt.show()","43a0cb74":"from PIL import Image\nim = Image.open(\"..\/input\/plant-pathology-more-data-no-background\/images\/images\/Test_1006.jpg\")\nplt.imshow(im)\ndisplay(plt.show())","bc3a6bb5":"#Crimson and Clover\n\nAh, now I don't hardly know her\/But I think I could love her\/Crimson and clover\/Ah when she comes walking over\/Now I've been waitin' to show her\/Crimson and clover over and over\/Yeah, my, my such a sweet thing\/I wanna do everything\/What a beautiful feeling\n\nCrimson and clover over and over\/Crimson and clover over and over\/Crimson and clover over and over\/Crimson and clover over and over\/Crimson and clover over and over\n\nFonte: LyricFind\nCompositores: Peter Lucia \/ Tommy James\nLetra de Crimson and Clover \u00a9 Sony\/ATV Music Publishing LLC","877f6352":"Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","2677a3f5":"#Joan Jett - Crimson and Clover 1983.avi","e1325e28":"biotill.saddlebutte.com","ba8c4bc3":"<iframe width=\"706\" height=\"538\" src=\"https:\/\/www.youtube.com\/embed\/xTfHhNg1iII\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>"}}