{"cell_type":{"1c02a01b":"code","35685174":"code","34094f25":"code","ca56cce2":"code","5ae960fb":"code","c88ba726":"code","cd67aebe":"code","098ac94b":"code","ad186e71":"code","182726b0":"code","8efa9427":"code","f6f4aef7":"code","f1c8f85f":"code","38bef741":"code","eada9458":"code","64fa0123":"code","be8eed58":"code","c3497819":"code","c3fde96b":"code","539b56ed":"code","8ec075f1":"code","a0284658":"code","bb7f3240":"code","1291b21c":"code","28fb3c6b":"code","fea1ad91":"markdown","6e3be17e":"markdown"},"source":{"1c02a01b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35685174":"df = pd.read_csv('\/kaggle\/input\/top-datasets-kagglers-ranking\/top20KagglersDatasets.csv')\ndf.head(7)","34094f25":"import plotly.express as px\n","ca56cce2":"countryCounts = df['country'].value_counts()\ncountryCounts","5ae960fb":"fig1bar = px.bar(\n    x=countryCounts.index, \n    y=countryCounts, \n    labels={'x':'Country', 'y':'Count'}, \n    title='Country count'\n)\n\nfig1bar.show()","c88ba726":"fig1pie = px.pie(\n    names=countryCounts.index, \n    values=countryCounts, \n    labels={'x':'Country', 'y':'Count'}, \n    title='Country count'\n)\n\n\nfig1pie.show()","cd67aebe":"fig1scatterGeo = px.scatter_geo(\n    df, \n    locations=countryCounts.index, \n    locationmode ='country names', \n    size=countryCounts,\n    projection=\"natural earth\"\n)\n\nfig1scatterGeo.show()","098ac94b":"tierCounts = df['tier'].value_counts()\ntierCounts","ad186e71":"fig2bar = px.bar(\n    x=tierCounts.index, \n    y=tierCounts, \n    labels={'x':'Tier', 'y':'Count'}, \n    title='Tier count'\n)\n\nfig2bar.show()","182726b0":"fig2pie = px.pie(\n    names=tierCounts.index, \n    values=tierCounts, \n    labels={'x':'Tier', 'y':'Count'}, \n    title='Tier count'\n)\n\nfig2pie.show()","8efa9427":"occupationCounts = df['occupation'].value_counts()\noccupationCounts","f6f4aef7":"fig3pie = px.pie(\n    names=occupationCounts.index, \n    values=occupationCounts, \n    labels={'x':'Occupation', 'y':'Count'}, \n    title='Occupation count'\n)\n\nfig3pie.show()","f1c8f85f":"organizationCounts = df['organization'].value_counts()\norganizationCounts","38bef741":"import fuzzywuzzy\nfrom fuzzywuzzy import process\nmatches = fuzzywuzzy.process.extract(\"nvidia\", organizationCounts.index, limit=20, scorer=fuzzywuzzy.fuzz.token_sort_ratio)\nmatches","eada9458":"# function to replace rows in the provided column of the provided dataframe\n# that match the provided string above the provided ratio with the provided string\ndef replace_matches_in_column(df, column, string_to_match, min_ratio = 47):\n    # get a list of unique strings\n    strings = df[column].unique()\n    \n    # get the top 10 closest matches to our input string\n    matches = fuzzywuzzy.process.extract(string_to_match, strings, \n                                         limit=10, scorer=fuzzywuzzy.fuzz.token_sort_ratio)\n\n    # only get matches with a ratio > 90\n    close_matches = [matches[0] for matches in matches if matches[1] >= min_ratio]\n\n    # get the rows of all the close matches in our dataframe\n    rows_with_matches = df[column].isin(close_matches)\n\n    # replace all rows with close matches with the input matches \n    df.loc[rows_with_matches, column] = string_to_match\n    \n    # let us know the function's done\n    print(\"All done!\")","64fa0123":"replace_matches_in_column(df=df, column='organization', string_to_match=\"Nvidia\")","be8eed58":"organizationCounts = df['organization'].value_counts()\norganizationCounts","c3497819":"fig4pie = px.pie(\n    names=organizationCounts.index, \n    values=organizationCounts, \n    labels={'x':'Organization', 'y':'Count'}, \n    title='Organization count'\n)\n\n\nfig4pie.show()","c3fde96b":"fig5wideFormatBar = px.bar(\n    df, \n    y='displayName', \n    x=['totalGoldMedals', 'totalSilverMedals', 'totalBronzeMedals']\n)\n\nfig5wideFormatBar.show()","539b56ed":"df['numericalTier'] = df['tier']\ndf.head()","8ec075f1":"cleanup_nums = {'numericalTier': {'grandmaster':5, 'master':4, 'expert':3}}","a0284658":"df.replace(cleanup_nums, inplace=True)\n","bb7f3240":"df.head(7)","1291b21c":"import seaborn as sns\nimport matplotlib.pyplot as plt","28fb3c6b":"plt.figure(figsize=(14,12))\ncorrelation = df.corr()\nsns.heatmap(correlation, linewidth=0.5, cmap='Blues', annot=True)","fea1ad91":"### Dataset used in this notebook can be found here: https:\/\/www.kaggle.com\/ajpass\/top-datasets-kagglers-ranking\n### Dataset scrapped with: https:\/\/www.kaggle.com\/ajpass\/data-mining-web-scrapping-vol-66-kaggle-datasets","6e3be17e":"We can see there is two people working on Nvidia but in diferent categories, we will put them together with some data cleaning. The next 3 blocks of code are imported from this tutorial: https:\/\/www.kaggle.com\/alexisbcook\/inconsistent-data-entry\n"}}