{"cell_type":{"62a73291":"code","577f0180":"code","f71241ed":"code","387c2679":"code","9cb56402":"code","b1acbe84":"code","c2a7da15":"code","5770a11b":"code","1e940653":"code","7aa69c29":"code","7053e511":"code","6c3fc0f8":"code","09301b71":"code","7421daf4":"code","06a34ab9":"code","9d27f2dc":"code","f13541fd":"code","19185093":"code","d281ffd7":"code","e5fe57cb":"code","7d0179ba":"code","cf572a0f":"code","e5f0a45e":"code","d5fef319":"code","305cabed":"code","e9642230":"code","780b1c27":"code","3b4d5454":"code","dfefaf88":"code","a6220358":"code","d0c5ba01":"code","9f157ae9":"code","5ddab403":"code","1ee746c7":"code","428c96dd":"code","aa910b77":"code","3b116f70":"code","fe0a2fac":"code","875c9120":"code","eb1214b0":"code","a31d519a":"code","f025c738":"code","b3ea11e1":"code","4361644e":"code","f56645ea":"code","3fb6b098":"code","0bfe8e3e":"code","ce18d5d2":"markdown","2697fd3d":"markdown","4bd26f3f":"markdown","1f4046b0":"markdown","8bcab34f":"markdown","cddec3d9":"markdown","88a5ab96":"markdown","a3f8fc4a":"markdown","f0430322":"markdown","cff46f53":"markdown","987d19ca":"markdown","ea5ccea1":"markdown","bc45aceb":"markdown","3a4b839a":"markdown","1d471195":"markdown","f6cf0958":"markdown","2727c0e4":"markdown","b64bc537":"markdown","05a9c3db":"markdown","31aeb458":"markdown","e215d411":"markdown","0b93eb59":"markdown","2e642728":"markdown","898d444d":"markdown","14ede1e1":"markdown","99e6f1f7":"markdown","7cdc821f":"markdown","bded5b18":"markdown","b9a0117f":"markdown","321a64d2":"markdown","5f90829e":"markdown","850aeac2":"markdown"},"source":{"62a73291":"import numpy as np","577f0180":"my_list = [1, 2, 3, 4]             # Define a list\n\nmy_array = np.array(my_list)       # Pass the list to np.array()\n\ntype(my_array)                     # Check the object's type","f71241ed":"\nsecond_list = [5, 6, 7, 8]\n\ntwo_d_array = np.array([my_list, second_list])\n\nprint(two_d_array)","387c2679":"\ntwo_d_array.shape","9cb56402":"two_d_array.size","b1acbe84":"two_d_array.dtype","c2a7da15":"# np.identity() to create a square 2d array with 1's across the diagonal\n\nnp.identity(n = 5)      # Size of the array","5770a11b":"# np.eye() to create a 2d array with 1's across a specified diagonal\n\nnp.eye(N = 3,  # Number of rows\n       M = 5,  # Number of columns\n       k = 1)  # Index of the diagonal (main diagonal (0) is default)","1e940653":"# np.ones() to create an array filled with ones:\n\nnp.ones(shape= [2,4])","7aa69c29":"# np.zeros() to create an array filled with zeros:\n\nnp.zeros(shape= [4,6])","7053e511":"one_d_array = np.array([1,2,3,4,5,6])\n\none_d_array[3]        # Get the item at index 3","6c3fc0f8":"one_d_array[3:]       # Get a slice from index 3 to the end","09301b71":"one_d_array[::-1]     # Slice backwards to reverse the array","7421daf4":"# Create a new 2d array\ntwo_d_array = np.array([one_d_array, one_d_array + 6, one_d_array + 12])\n\nprint(two_d_array) ","06a34ab9":"# Get the element at row index 1, column index 4\n\ntwo_d_array[1, 4]","9d27f2dc":"# Slice elements starting at row 2, and column 5\n\ntwo_d_array[1:, 4:]","f13541fd":"# Reverse both dimensions (180 degree rotation)\n\ntwo_d_array[::-1, ::-1]","19185093":"np.reshape(a=two_d_array,        # Array to reshape\n           newshape=(6,3))       # Dimensions of the new array","d281ffd7":"np.ravel(a=two_d_array,\n         order='C')         # Use C-style unraveling (by rows)","e5fe57cb":"np.ravel(a=two_d_array,\n         order='F')         # Use Fortran-style unraveling (by columns)","7d0179ba":"two_d_array.flatten()","cf572a0f":"two_d_array.T","e5f0a45e":"np.flipud(two_d_array)","d5fef319":"np.fliplr(two_d_array)","305cabed":"np.rot90(two_d_array,\n         k=1)             # Number of 90 degree rotations","e9642230":"np.roll(a= two_d_array,\n        shift = 2,        # Shift elements 2 positions\n        axis = 1)         # In each row","780b1c27":"np.roll(a= two_d_array,\n        shift = 2)","3b4d5454":"array_to_join = np.array([[10,20,30],[40,50,60],[70,80,90]])\n\nnp.concatenate( (two_d_array,array_to_join),  # Arrays to join\n               axis=1)                        # Axis to join upon","dfefaf88":"two_d_array + 100    # Add 100 to each element","a6220358":"two_d_array - 100    # Subtract 100 from each element","d0c5ba01":"two_d_array * 2      # Multiply each element by 2","9f157ae9":"two_d_array ** 2      # Square each element","5ddab403":"two_d_array % 2       # Take modulus of each element ","1ee746c7":"small_array1 = np.array([[1,2],[3,4]])\n\nsmall_array1 + small_array1","428c96dd":"small_array1 - small_array1","aa910b77":"small_array1 * small_array1","3b116f70":"small_array1 ** small_array1","fe0a2fac":"# Get the mean of all the elements in an array with np.mean()\n\nnp.mean(two_d_array)","875c9120":"# Provide an axis argument to get means across a dimension\n\nnp.mean(two_d_array,\n        axis = 1)     # Get means of each row","eb1214b0":"# Get the standard deviation all the elements in an array with np.std()\n\nnp.std(two_d_array)","a31d519a":"# Provide an axis argument to get standard deviations across a dimension\n\nnp.std(two_d_array,\n        axis = 0)     # Get stdev for each column","f025c738":"\n# Sum the elements of an array across an axis with np.sum()\n\nnp.sum(two_d_array, \n       axis=1)        # Get the row sums","b3ea11e1":"np.sum(two_d_array,\n       axis=0)        # Get the column sums","4361644e":"# Take the log of each element in an array with np.log()\n\nnp.log(two_d_array)","f56645ea":"# Take the square root of each element with np.sqrt()\n\nnp.sqrt(two_d_array)","3fb6b098":"# Take the vector dot product of row 0 and row 1\n\nnp.dot(two_d_array[0,0:],  # Slice row 0\n       two_d_array[1,0:])  # Slice row 1","0bfe8e3e":"# Do a matrix multiply\n\nnp.dot(small_array1, small_array1)","ce18d5d2":"Numpy also offers a variety of [named math functions](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.math.html) for ndarrays. There are too many to cover in detail here, so we'll just look at a selection of some of the most useful ones for data analysis:","2697fd3d":"The \"as np\" after the import statement lets us access the numpy library's functions using the shorthand \"np.\"\n\nCreate an ndarray by passing a list to np.array() function:","4bd26f3f":"## Array Indexing and Slicing","1f4046b0":"Unravel a multi-dimensional into 1 dimension with np.ravel():","8bcab34f":"Alternatively, use ndarray.flatten() to flatten a multi-dimensional into 1 dimension and return a copy of the result:","cddec3d9":"Join arrays along an axis with np.concatenate():","88a5ab96":"To create an array with more than one dimension, pass a nested list to np.array():","a3f8fc4a":"Creating and manipulating arrays is nice, but the true power of numpy arrays is the ability to perform mathematical operations on many values quickly and easily. Unlike built in Python objects, you can use math operators like +, -, \/ and * to perform basic math operations with ndarrays:","f0430322":"The package includes a variety of more advanced [linear algebra functions](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.linalg.html) should you need them.","cff46f53":"Numpy has a variety of built in functions to help you manipulate arrays quickly without having to use complicated indexing operations.\n\nReshape an array into a new array with the same data but different structure with np.reshape():","987d19ca":"The numpy library is one of the core packages in Python's data science software stack. Many other Python data analysis libraries require numpy as a prerequisite, because they use its array data structure as a building block. The Kaggle Python environment has numpy available by default; if you are running Python locally, the Anaconda Python distribution comes with numpy as well.\n\nNumpy implements a data structure called the N-dimensional array or ndarray. ndarrays are similar to lists in that they contain a collection of items that can be accessed via indexes. On the other hand, ndarrays are homogeneous, meaning they can only contain objects of the same type and they can be multi-dimensional, making it easy to store 2-dimensional tables or matrices.\n\nTo work with ndarrays, we need to load the numpy library. It is standard practice to load numpy with the alias \"np\" like so:","ea5ccea1":"Python's built in data structures are great for general-purpose programming, but they lack some specialized features we'd like for data analysis. For example, adding rows or columns of data in an element-wise fashion and performing math operations on two dimensional tables (matrices) are common tasks that aren't readily available with Python's base data types. In this lesson we'll learn about numpy arrays, a data structure available Python's numpy library that implements a variety of useful functions for analyzing data.","bc45aceb":"Rotate an array 90 degrees counter-clockwise with np.rot90():","3a4b839a":"Numpy's ndarray data structure provides many desirable features for working with data, such as element-wise math operations and a variety of functions that work on 2D arrays. Since numpy was built with data analysis in mind, its math operations are optimized for that purpose and are generally faster than what could be achieved if you hand-coded functions to carry out similar operations on lists.\n\nNumpy's arrays are great for performing calculations on numerical data, but most data sets you encounter in real life aren't homogeneous. Many data sets include a mixture of data types including numbers, text and dates, so they can't be stored in a single numpy array. In the next lesson we'll conclude our study of Python data structures with Pandas DataFrames, a powerful data container that mirrors the structure of data tables you'd find in databases and spreadsheet programs like Microsoft Excel.","1d471195":"Leave the axis argument empty to shift on a flattened version of the array (shift across all dimensions):","f6cf0958":"Get the transpose of an array with ndarray.T:","2727c0e4":"## Next Lesson: [Python for Data 9: Pandas DataFrames](https:\/\/www.kaggle.com\/hamelg\/python-for-data-9-pandas-dataframes)\n[back to index](https:\/\/www.kaggle.com\/hamelg\/python-for-data-analysis-index)","b64bc537":"## Numpy and Array Basics","05a9c3db":"If an ndarray has more than one dimension, separate indexes for each dimension with a comma:","31aeb458":"Numpy ndarrays offer numbered indexing and slicing syntax that mirrors the syntax for Python lists:","e215d411":"Take the dot product of two arrays with np.dot(). This function performs an element-wise multiply and then a sum for 1-dimensional arrays (vectors) and matrix multiplication for 2-dimensional arrays.","0b93eb59":"## Array Math Operations","2e642728":"The output above shows that this ndarray is 2-dimensional, since there are two values listed, and the dimensions have length 2 and 4. Check the total size (total number of items) in an array with the size attribute:","898d444d":"## Wrap Up","14ede1e1":"Beyond operating on each element of an array with a single scalar value, you can also use the basic math operators on two arrays with the same shape. When operating on two arrays, the basic math operators function in an element-wise fashion, returning an array with the same shape as the original:","99e6f1f7":"Flip an array vertically or horizontally with np.flipud() and np.fliplr() respectively:","7cdc821f":"Numpy has a variety of special array creation functions. Some handy array creation functions include:","bded5b18":"Check the type of the data in an ndarray with the dtype attribute:","b9a0117f":"Shift elements in an array along a given dimension with np.roll():","321a64d2":"An ndarray is defined by the number of dimensions it has, the size of each dimension and the type of data it holds. Check the number and size of dimensions of an ndarray with the shape attribute:","5f90829e":"## Reshaping Arrays","850aeac2":"# Python for Data 8: Numpy Arrays\n[back to index](https:\/\/www.kaggle.com\/hamelg\/python-for-data-analysis-index)"}}