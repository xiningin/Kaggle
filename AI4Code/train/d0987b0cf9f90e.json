{"cell_type":{"8b8169e5":"code","7f8f796a":"code","4d9e5a3e":"code","02dd7bcb":"code","bfdfd8f8":"code","73e0cb6c":"code","5fef6740":"code","fcd3e258":"code","ead19dde":"code","37ca790b":"code","3bb96523":"code","74f124f8":"code","98ab523d":"code","0f7065a6":"code","91f26d1b":"code","7b2fc375":"code","167593f3":"code","8c2b2fbf":"code","bc050086":"code","34c0e731":"code","216674d4":"code","32ad8710":"markdown","f5c3355c":"markdown","702d092f":"markdown","c0c7f185":"markdown","78679001":"markdown","3e96641f":"markdown","901ad9df":"markdown","bbb1d366":"markdown","7a92a908":"markdown","6d8201f2":"markdown","35574bd1":"markdown","e9181a4a":"markdown","dab3973a":"markdown","ad2cc4f8":"markdown"},"source":{"8b8169e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f8f796a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n#sns.set_style ('dark')\n\n#sns.set_palette('RdYlGn')\ncolors = ['#B90276','#50237F', '#005691', '#008ECF','#E20015', '#00A8B0', '#78BE20', '#006249', '#525F6B']\n\nsns.set_palette(sns.color_palette(colors))","4d9e5a3e":"data = pd.read_csv('\/kaggle\/input\/customer-analytics\/Train.csv', sep = ',')\ndf = pd.DataFrame(data)\ndf.head()","02dd7bcb":"df.info()","bfdfd8f8":"df.isnull().sum()","73e0cb6c":"object1 = df.select_dtypes(include='object').columns\nfloat1 = df.select_dtypes(exclude = 'object').columns\nfloat1","5fef6740":"for col in object1:\n    print(col, '\\n', df[col].unique(),'\\n')","fcd3e258":"plt.title('Count of Reached on time y_N')\nsns.countplot(x ='Reached.on.Time_Y.N',  data = df)","ead19dde":"i = 1\nplt.figure(figsize = (15,10))\nfor col in object1:\n    plt.subplot(2,2,i)\n    sns.countplot(x = 'Reached.on.Time_Y.N',hue = df[col] , data = df)\n    i +=1","37ca790b":"i = 1\nplt.figure(figsize = (15,15))\nfor col in float1:\n    plt.subplot(3,3,i)\n    sns.histplot(x = df[col])\n    i +=1","3bb96523":"plt.figure(figsize=(20,15))\n\nplt.subplot(2,2,1)\nplt.title('Ware house block with Prior Purchase')\nsns.boxplot(x ='Mode_of_Shipment',y='Prior_purchases', hue = 'Reached.on.Time_Y.N', data = df)\n\nplt.subplot(2,2,2)\nplt.title('Ware house block & Discount offered')\nsns.boxplot(x ='Mode_of_Shipment',y='Discount_offered', hue = 'Reached.on.Time_Y.N', data = df)\n\n\nplt.subplot(2,2,3)\nplt.title('Ware house block with weight of packages handled')\nsns.boxplot(x ='Mode_of_Shipment',y='Weight_in_gms', hue = 'Reached.on.Time_Y.N', data = df)\n","74f124f8":"plt.figure(figsize=(10,7))\nfor col in object1:\n    g = sns.FacetGrid(df, col=col, hue=\"Mode_of_Shipment\")\n    g.map(sns.kdeplot, 'Cost_of_the_Product',alpha=.7)\n    #plt.figure(figsize=(15,7))\n    g.add_legend()","98ab523d":"df1 = pd.get_dummies(df)\n","0f7065a6":"from sklearn. preprocessing import LabelEncoder, StandardScaler\n#le = LabelEncoder()\nsc = StandardScaler()\n\n    \ndf1.head()","91f26d1b":"df1= df1.drop(['ID'],1)\n","7b2fc375":"plt.figure(figsize = (15,10))\ncorr = df1.corr()\nsns.heatmap(corr, linewidth = 0.7, cmap = 'RdYlGn')","167593f3":"X = df1.drop(['Reached.on.Time_Y.N'],1)\ny = df1['Reached.on.Time_Y.N']","8c2b2fbf":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 43)","bc050086":"scaler = StandardScaler()\nscaler.fit(X_train, y_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","34c0e731":"from sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import roc_auc_score , plot_roc_curve, accuracy_score\nfrom xgboost import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error\nrf = RandomForestClassifier(random_state=43)\nad = AdaBoostClassifier(base_estimator =rf)\ndt = DecisionTreeClassifier()\nkn = KNeighborsClassifier()\nlr = LogisticRegression(random_state= 43, solver='lbfgs', max_iter=1000)\nrbf = RBF()\ngp = GaussianProcessClassifier(1.0 * RBF(1.0))\nmlp = MLPClassifier(alpha=1, max_iter=1000)\ngnb = GaussianNB()\nsvc = SVC(random_state = 43, C = 10, gamma = 0.1, kernel ='rbf')\n#xgb = XGBClassifier(use_label_encoder=False, random_state = 43)\n\nmodels = [rf,ad, dt, kn, svc, mlp, lr, gnb]\nfor model in models:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    scores = cross_val_score(model, X, y, cv=5).mean().round(3)\n    accuracy = metrics.accuracy_score(y_test, y_pred).round(3)\n    ROC = metrics.roc_auc_score(y_test, y_pred).round(3)\n    #f1score = metrics.f1_score(y_test, y_pred).round(3)\n    print(model, '\\n', 'Accuracy:', accuracy,'\\n', 'mean_CV_score:',scores, '\\n' , 'ROC:', ROC,'\\n')","216674d4":"importances = rf.feature_importances_\nstd = np.std([\n    tree.feature_importances_ for tree in rf.estimators_], axis=0)\nforest_importances = pd.Series(importances, index=['Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product',\n       'Prior_purchases', 'Discount_offered', 'Weight_in_gms',\n       'Warehouse_block_A', 'Warehouse_block_B',\n       'Warehouse_block_C', 'Warehouse_block_D', 'Warehouse_block_F',\n       'Mode_of_Shipment_Flight', 'Mode_of_Shipment_Road',\n       'Mode_of_Shipment_Ship', 'Product_importance_high',\n       'Product_importance_low', 'Product_importance_medium', 'Gender_F',\n       'Gender_M'])\n\nfig, ax = plt.subplots(figsize=(10,7))\nforest_importances.plot.bar(yerr=std, ax=ax)\nax.set_title(\"Feature importances using MDI\")\nax.set_ylabel(\"Mean decrease in impurity\")\nfig.tight_layout()","32ad8710":"# Reached on time = 0, Not reached on time = 1","f5c3355c":"# Preprocessing the data","702d092f":"# If you enjoyed the codes, please UPVOTE, Thanks !!!","c0c7f185":"# What does our target data contain","78679001":"# Fitting different classfication models on our data","3e96641f":"# Visualization","901ad9df":"# Feature Importance","bbb1d366":"***REaching on time has a stromg corelation with the discount offered***","7a92a908":"# Separating Categorical & Float for ease of precessing","6d8201f2":"# Corelation plot","35574bd1":"# Applying Standard Scaler","e9181a4a":"# Finding Null Values","dab3973a":"# TRain Test Split","ad2cc4f8":"# Content\n\n\n1. ID: ID Number of Customers.\n2. Warehouse block: The Company have big Warehouse which is divided in to block such as A,B,C,D,E.\n3. Mode of shipment:The Company Ships the products in multiple way such as Ship, Flight and Road.\n4. Customer care calls: The number of calls made from enquiry for enquiry of the shipment.\n5. Customer rating: The company has rated from every customer. 1 is the lowest (Worst), 5 is the highest (Best).\n6. Cost of the product: Cost of the Product in US Dollars.\n7. Prior purchases: The Number of Prior Purchase.\n8. Product importance: The company has categorized the product in the various parameter such as low, medium, high.\n9. Gender: Male and Female.\n10. Discount offered: Discount offered on that specific product.\n11. Weight in gms: It is the weight in grams.\n12. Reached on time: It is the target variable, where 1 Indicates that the product has NOT reached on time and 0 indicates it has reached on time."}}