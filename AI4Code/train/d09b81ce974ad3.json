{"cell_type":{"690fa07a":"code","dec20d0f":"code","3ec4bdc3":"code","f3214b0b":"code","c8dfd36c":"code","08f67399":"code","bc26274e":"code","72aa937d":"code","4dd7411f":"code","797b45d1":"code","2c55b610":"code","48b2eb5d":"code","84397eb9":"code","00780947":"code","0f753a87":"code","9c4959ac":"code","87846192":"code","65b348c4":"code","b15e3f3d":"code","2998afa4":"code","77490220":"code","6688b610":"code","d3fc1d23":"code","e88e9df6":"code","862f4912":"code","a3e60561":"code","a9aea31a":"code","3c078413":"code","a90d8328":"code","4892f58b":"code","383fcf3a":"code","8f71da8a":"code","a0a80c32":"code","3dba1c45":"code","e2dc470f":"code","bb5ad4c3":"code","58b71554":"code","4dd61e08":"code","6a9706eb":"code","c105f80f":"code","9f43bfdb":"code","cc5c02e2":"code","8e87dc2c":"code","6f7a5e81":"code","02001f7c":"code","8af156d6":"code","65451510":"code","4c297524":"code","dd8ad8a7":"code","e264806e":"code","8354ef83":"markdown","c1803ce1":"markdown","58fda9f1":"markdown","627ff517":"markdown","8e130b04":"markdown","239a5e6a":"markdown","07582899":"markdown","635da1c6":"markdown","9bbe0c64":"markdown","5bf364a2":"markdown","d4bb58a3":"markdown","c79afbbb":"markdown"},"source":{"690fa07a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datetime as dt # time series analysis\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dec20d0f":"import warnings\nwarnings.filterwarnings('ignore')\n\nfile_name = '..\/input\/gtd\/globalterrorismdb_0718dist.csv'\ndf = pd.read_csv(file_name, encoding = 'ISO-8859-1')","3ec4bdc3":"df = df[['iyear', 'imonth', 'iday', 'country_txt', 'provstate', 'success', 'attacktype1_txt', 'targtype1_txt', 'weaptype1_txt']]\ndf = df[df['country_txt'] == 'United States']\ndf.reset_index(drop=True, inplace=True)\ndf.head()","f3214b0b":"df.info()","c8dfd36c":"df['imonth'].unique()","08f67399":"df['iday'].unique()","bc26274e":"df['iyear'].unique()","72aa937d":"# Adds a column containing the month in text form\nmonth_convert = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n\nmonths = []\nfor i in df.index:\n    month = df['imonth'][i]\n    months.append(month_convert[month])\n    \ndf['month_txt'] = months ","4dd7411f":"df_known = df.copy(deep=True)\nfor i in df.index:\n    if df_known['iday'][i] == 0 :\n        df_known.drop([i], inplace=True)","797b45d1":"total_attacks = len(df)\ntotal_known_attacks = len(df_known)\ntotal_unknown_attacks = total_attacks - total_known_attacks\nunknown_ratio = total_unknown_attacks \/ total_attacks\n\nprint('Total number of attacks: ' + str(total_attacks))\nprint('Total number of attacks with unknown dates: ' + str(total_unknown_attacks))\nprint('Total number of attacks with known dates: ' + str(total_known_attacks))\nprint('Percent of attacks with unknown dates: ' + '{:.2%}'.format(unknown_ratio))","2c55b610":"dates = []\nfor i in df_known.index:\n    year = df_known['iyear'][i]\n    month = df_known['imonth'][i]\n    day = df_known['iday'][i]\n    dates.append(dt.datetime(year, month, day))\ndf_known['date'] = dates","48b2eb5d":"for i in df_known.index:\n    df_known['dayofweek'] = df_known['date'].dt.dayofweek","84397eb9":"day_convert = {0:'Monday', 1:'Tuesday', 2:'Wednesday', 3:'Thursday', 4:'Friday', 5:'Saturday', 6:'Sunday'}\n\ndays = []\nfor i in df_known.index:\n    day = df_known['dayofweek'][i]\n    days.append(day_convert[day])\n    \ndf_known['dayofweek_txt'] = days","00780947":"df_known.head()","0f753a87":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(font_scale=2)\n\npre_1993 = [year for year in range(1970, 1993)]\npost_1993 = [year for year in range(1994, 2018)]\nyears = pre_1993 + post_1993","9c4959ac":"fig, ax = plt.subplots(figsize = (24,12))\n\na = sns.countplot(x=df['iyear'], ax=ax)\na.set_xticklabels(a.get_xticklabels(), rotation = 90);\na.set_title('Attacks per Year in the United States');","87846192":"counts = df['iyear'].value_counts()\n\nfig, ax = plt.subplots(figsize = (24,12))\n\na = sns.lineplot(x=counts.index, y=counts.values, ax=ax)\na.set_title('Attacks per Year in the United States');","65b348c4":"fig, ax = plt.subplots(figsize = (24,12))\n\na = sns.countplot(x=df['month_txt'], ax=ax)\na.set_xticklabels(a.get_xticklabels());\na.set_title('Attacks per Month in the United States');","b15e3f3d":"fig, ax = plt.subplots(figsize = (24,12))\n\na = sns.countplot(x=df_known['iday'], ax=ax)\na.set_xticklabels(a.get_xticklabels());\na.set_title('Attacks per Day of the Month in the United States');","2998afa4":"df_first_day = df_known[df_known['iday'] == 1]\n\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nfig, ax = plt.subplots(figsize = (24,12))\n\na = sns.countplot(x=df_first_day['month_txt'], ax=ax, order=months)\na.set_xticklabels(a.get_xticklabels());\na.set_title('Attacks on the First Day of the Month in the United States');","77490220":"days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\nfig, ax = plt.subplots(figsize = (24,12))\n\na = sns.countplot(x=df_known['dayofweek_txt'], ax=ax, order=days)\na.set_xticklabels(a.get_xticklabels());\na.set_title('Attacks per Day of the Week in the United States');","6688b610":"total_success_percent = df['success'].sum() \/ len(df['success'])\nproportions = [total_success_percent, 1-total_success_percent]\nlabels = ['Successful', 'Unsuccessful']\nexplode = [0.1, 0]\n\nfig, ax = plt.subplots(figsize = (12,6))\n\na = ax.pie(proportions, labels=labels, autopct='%1.0f%%', explode=explode, pctdistance=1.2,labeldistance=1.5)\nax.set_title('Breakdown of Total Successful vs Unsuccessful Attacks in the United States');","d3fc1d23":"total_successes = []\ntotal_failures = []\nfor year in years:\n    count = df[df['iyear'] == year]['success'].sum() \n    total_successes.append(count)\n    total_failures.append(len(df[df['iyear'] == year]) - count)","e88e9df6":"df_successfulness = pd.DataFrame({'Year': years, 'Successes': total_successes, 'Failures': total_failures})\ndf_successfulness.head()","862f4912":"fig, ax = plt.subplots(figsize = (24,12))\n\na = df_successfulness.plot(x='Year', kind='bar', stacked=True, ax=ax);\na.set_title('Attacks by Year and Successfulness in the United States');","a3e60561":"success_rates = []\nfailure_rates = []\nfor year in years:\n    rate = df[df['iyear'] == year]['success'].sum() \/ len(df[df['iyear'] == year])\n    success_rates.append(rate)\n    failure_rates.append(1-rate)","a9aea31a":"print('Highest Success Rate Any Year: {:.0%}'.format(max(success_rates)))\nprint('Lowest Success Rate of Any Year: {:.0%}'.format(min(success_rates)))","3c078413":"fig, ax = plt.subplots(figsize = (24,12))\n\na = sns.lineplot(x=years, y=success_rates, ax=ax)\na.set_title('Attack Success Rate per Year in the United States')\na.set_xticklabels(years, rotation=90)\na.set_ylabel('Success Rate')\na.set(xlim=(1970,2018),\n      ylim=(0.55, 1.05),\n      xticks=years,\n      yticks=[i for i in np.arange(0.55, 1.05, 0.05)]);","a90d8328":"fig, ax = plt.subplots(figsize = (24,12))\n\na = sns.histplot(data=success_rates, bins=8, ax=ax, kde=True)\na.set_xlabel('Success Rate')\na.set_title('Distribution of Attack Success Rate per Year in the United States');","4892f58b":"start_year = 1985\ndf_heat = df[df['iyear'] >= start_year]","383fcf3a":"fig, ax = plt.subplots(figsize = (24,12))\n\ndf_crosstab = pd.crosstab(df_heat['attacktype1_txt'], df_heat['iyear'])\na = sns.heatmap(df_crosstab, ax=ax, cmap=\"Reds\", linewidths=1)\na.set_xticklabels(df_heat['iyear'].unique(), rotation=90)\na.set_title('Types of Attacks from ' + str(start_year) + ' to 2017');","8f71da8a":"fig, ax = plt.subplots(figsize = (24,12))\n\ndf_crosstab = pd.crosstab(df_heat['weaptype1_txt'], df_heat['iyear'])\na = sns.heatmap(df_crosstab, linewidths=1, ax=ax, cmap='Reds')\na.set_xticklabels(df_heat['iyear'].unique(), rotation=90)\na.set_title('Types of Weapons Used from ' + str(start_year) + ' to 2017');","a0a80c32":"fig, ax = plt.subplots(figsize = (24,12))\n\ndf_crosstab = pd.crosstab(df_heat['targtype1_txt'], df_heat['iyear'])\na = sns.heatmap(df_crosstab, linewidths=1, ax=ax, cmap='Reds')\na.set_xticklabels(df_heat['iyear'].unique(), rotation=90)\na.set_title('Types of Targets from ' + str(start_year) + ' to 2017');","3dba1c45":"state_names = [\"Alaska\", \"Alabama\", \"Arkansas\", \"American Samoa\", \"Arizona\", \"California\", \"Colorado\", \"Connecticut\", \"District of Columbia\", \"Delaware\", \"Florida\", \"Georgia\", \"Guam\", \"Hawaii\", \"Iowa\", \"Idaho\", \"Illinois\", \"Indiana\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Massachusetts\", \"Maryland\", \"Maine\", \"Michigan\", \"Minnesota\", \"Missouri\", \"Mississippi\", \"Montana\", \"North Carolina\", \"North Dakota\", \"Nebraska\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"Nevada\", \"New York\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Puerto Rico\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\", \"Virginia\", \"Virgin Islands\", \"Vermont\", \"Washington\", \"Wisconsin\", \"West Virginia\", \"Wyoming\"]\nstates_with_attacks = df_heat['provstate'].unique().tolist()","e2dc470f":"# States and territories with no attacks from the starting year to 2017\nset(state_names) - set(states_with_attacks)","bb5ad4c3":"# States ordered by the number of attacks from the starting year to 2017\nstates_by_attacks = df_heat['provstate'].value_counts()\nstates_by_attacks","58b71554":"# Creates a dataframe of all the states that have had greater than or equal to n total attacks from the starting year to 2017\nn = 10\nstates_with_attacks =  states_by_attacks[states_by_attacks.values >= n].index\ndf_heat_states = df_heat[df['provstate'].isin(states_with_attacks)]","4dd61e08":"sns.set(font_scale=1)\n\n# States with at least n attacks during the time period are included\nfig, ax = plt.subplots(figsize = (24,12))\n\ndf_crosstab = pd.crosstab(df_heat_states['provstate'], df_heat_states['iyear'])\na = sns.heatmap(df_crosstab, ax=ax, linewidths=1, annot=False, cmap='Reds');\na.set_xticklabels(df_heat_states['iyear'].unique(), rotation=90)\na.set_title('Number of Attacks by States from ' + str(start_year) + ' to 2017');","6a9706eb":"import holidays\n\nfor day in holidays.UnitedStates(years = 2017).items():\n    print(day)","c105f80f":"us_holidays = holidays.UnitedStates()","9f43bfdb":"holiday = []\nfor i in df_known.index:\n    holiday.append(int(df_known['date'][i] in us_holidays))\n\ndf_known['is_holiday'] = holiday","cc5c02e2":"df_known.head()","8e87dc2c":"holiday_percent = df_known['is_holiday'].sum() \/ len(df_known['is_holiday'])\nproportions = [holiday_percent, 1-holiday_percent]\nlabels = ['Holiday', 'Not a Holiday']\nexplode = [0.2, 0]\n\nsns.set(font_scale=2)\nfig, ax = plt.subplots(figsize = (12,6))\n\na = ax.pie(proportions, labels=labels, autopct='%1.0f%%', explode=explode, pctdistance=1.2,labeldistance=1.5)\nax.set_title('Breakdown of Holiday vs Nonholiday Attacks in the United States');","6f7a5e81":"holiday_attacks = df_known[df_known['is_holiday'] == True]\nnonholiday_attacks = df_known[df_known['is_holiday'] == False]\n\nnum_holiday_attacks = len(holiday_attacks)\nnum_nonholiday_attacks = len(nonholiday_attacks)","02001f7c":"all_holidays = holidays.UnitedStates(years=years)\ntotal_holidays = len(all_holidays)","8af156d6":"start_date = dt.datetime(1970, 1, 1)\nend_date = dt.datetime(2018, 1, 1)\n\n# Doesn't include the end date \ndelta = end_date - start_date\ntotal_days = delta.days\ntotal_nonholidays = total_days - total_holidays","65451510":"holidays_with_attacks = holiday_attacks['date'].unique()\ntotal_holidays_with_attacks = len(holidays_with_attacks)\n\nnonholidays_with_attacks = nonholiday_attacks['date'].unique()\ntotal_nonholidays_with_attacks = len(nonholidays_with_attacks)\n\ndays_with_attacks = df_known['date'].unique()\ntotal_days_with_attacks = len(days_with_attacks)","4c297524":"total_attack_rate = total_days_with_attacks \/ total_days\nholiday_attack_rate = total_holidays_with_attacks \/ total_holidays\nnonholiday_attack_rate = total_nonholidays_with_attacks \/ total_nonholidays\n\nprint('Percent of days that had a terrorist attack in the US from 1970 through 2017: ' + '{:.2%}'.format(total_attack_rate))\nprint('Percent of holidays that had a terrorist attack in the US from 1970 through 2017: ' + '{:.2%}'.format(holiday_attack_rate))\nprint('Percent of nonholidays that had a terrorist attack in the US from 1970 through 2017: ' + '{:.2%}'.format(nonholiday_attack_rate))","dd8ad8a7":"total_holidays = []\ntotal_nonholidays = []\nfor year in years:\n    count = df_known[df_known['iyear'] == year]['is_holiday'].sum() \n    total_holidays.append(count)\n    total_nonholidays.append(len(df_known[df_known['iyear'] == year]) - count)","e264806e":"fig, ax = plt.subplots(figsize = (24,12))\n\ndf_holidays = pd.DataFrame({'Year': years, 'Nonholidays': total_nonholidays, 'Holidays': total_holidays})\na = df_holidays.plot(x='Year', kind='bar', stacked=True, ax=ax);\na.set_title('Attacks by Year and if on a Holiday in the United States');","8354ef83":"* The greatest number of attacks occured at the start and end of the work week \n* The lowest number of attacks occured during the weekend","c1803ce1":"Some attacks in our dataset occured on an unknown day, so any further analysis involving specific days will omit these attacks. \nHowever, these attacks will be included in any analysis that breaks down along monthly or yearly categories.  ","58fda9f1":"# Analysis of Holidays vs Nonholidays","627ff517":"This section does NOT include attacks with unknown days","8e130b04":"# Time Series Visualizations","239a5e6a":"This section includes attacks with unknown days.","07582899":"# Analysis of the Success Rate of Attacks","635da1c6":"While January 1st may be the month with the most attacks, New Year's attacks are not the sole reason why the 1st of the month was the most common day for a terrorist attack to occur. ","9bbe0c64":"Only data from 1985 onwards is used in the section because the 1970s and early 1980s had many more attacks than the rest of the time frame. Thus leading to the heatmaps not be very useful for showing data from more recent years.","5bf364a2":"* It makes sense that the lowest number of attacks occured on the 31st day of the month since only 7 months have 31 days\n* The largest number of attacks occur on the 1st day of the month perhaps because of a large number of New Year's attacks","d4bb58a3":"# Heatmaps","c79afbbb":"Please note that most of the GTD's 1993 data was lost, including the data for all attacks in the United States during that year, so any yearly analysis will not include the year 1993."}}