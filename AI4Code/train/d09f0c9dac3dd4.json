{"cell_type":{"ae8bad1b":"code","9e7c10d4":"code","bc6824b5":"code","f59de4eb":"code","15cba400":"code","089f3a16":"code","bdd782ce":"code","ea08b888":"code","5ad96a82":"code","e5cb7bac":"code","11a297a5":"code","0c929a5e":"code","0d6214a2":"code","7fb2eba3":"code","cb7a8f22":"code","96a59020":"code","6483121f":"code","e2f06794":"code","d599b133":"code","84d7ebf2":"code","99814e79":"code","b12717a3":"code","c25c7142":"code","8f3dbcaa":"code","92893f8c":"code","35667b95":"code","b7411b8f":"code","d37448d9":"code","dbb0e334":"code","6b86ff13":"code","30945e8b":"markdown","afc900cc":"markdown","ae7f7c59":"markdown","e59418ce":"markdown","f0fbcd2b":"markdown","d580e515":"markdown","ef5bfd7a":"markdown","b3f2386a":"markdown"},"source":{"ae8bad1b":"#import\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","9e7c10d4":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bc6824b5":"HR_data= pd.read_csv(\"\/kaggle\/input\/hr-dataset\/HR.csv\")\nHR_data.head()","f59de4eb":"HR_data.shape","15cba400":"HR_data=HR_data.rename(columns={\"sales\": \"department\"})\n# check the columns:\nHR_data.columns","089f3a16":"HR_data.info()","bdd782ce":"#Show unique value for category feature\nprint('department:', HR_data.department.unique())\nprint('salary:', HR_data.salary.unique())","ea08b888":"HR_data.describe()","5ad96a82":"corr=HR_data.corr()\ncorr.style.background_gradient(cmap='coolwarm',axis=None)","e5cb7bac":"#Show how many employee left\nsns.countplot(x='left',data=HR_data)\nprint(HR_data.groupby('left').size())\n","11a297a5":"#Understanding the correlation between salary level and the employee leaving\nfig, ax =plt.subplots(2,1, figsize=(11.7, 9.27))\nsns.countplot(x='salary',hue='left',data=HR_data, ax=ax[0])\nsns.pointplot(x='salary', y='left', data=HR_data, ax=ax[1])\nax[1].set_ylabel('left probability')\n","0c929a5e":"#Understanding the correlation between project number and employee departure\nfig, ax =plt.subplots(2,1, figsize=(11.7, 9.27))\nsns.countplot(x='number_project',hue='left',data=HR_data,ax=ax[0])\nsns.pointplot(x='number_project', y='left', data=HR_data, ax=ax[1])\nax[1].set_ylabel('left probability')","0d6214a2":"#Understanding the correlation between employee's department and the employee leaving\nfig, ax =plt.subplots(2,1, figsize=(11.7, 9.27))\nsns.countplot(x='department',hue='left',data=HR_data,ax=ax[0]);\nsns.pointplot(x='department', y='left', data=HR_data, ax=ax[1])\nax[1].set_ylabel('left probability')\nHR_data.groupby(['department','left']).size()\n","7fb2eba3":"#Understanding the correlation between time spend company and the employee leaving\nfig, ax =plt.subplots(2,1, figsize=(11.7, 9.27))\nsns.countplot(x='time_spend_company',hue='left',data=HR_data,ax=ax[0]);\nsns.pointplot(x='time_spend_company', y='left', data=HR_data, ax=ax[1])\nax[1].set_ylabel('left probability')","cb7a8f22":"#Understanding the correlation between promotion and the employee leaving\nfig, ax =plt.subplots(2,1, figsize=(11.7, 9.27))\nsns.countplot(x='promotion_last_5years',hue='left',data=HR_data,ax=ax[0]);\nsns.pointplot(x='promotion_last_5years', y='left', data=HR_data, ax=ax[1])\nax[1].set_ylabel('left probability')","96a59020":"fig, ax =plt.subplots(figsize=(6.7, 4.27))\nHR_data.pivot(columns='left').satisfaction_level.plot(kind = 'hist', stacked=True, ax=ax)\nax.set_xlabel('satisfaction level')","6483121f":"fig, ax =plt.subplots(2,1, figsize=(7.7, 11.27))\nHR_data.pivot(columns='left').average_montly_hours.plot(kind = 'hist', stacked=True, ax=ax[0])\nax[0].set_xlabel('average montly hours')\nsns.scatterplot(data=HR_data, y=\"promotion_last_5years\", x=\"average_montly_hours\",hue='left', ax=ax[1])\nax[1].set_title('promotion and average montly hours VS left ')","e2f06794":"fig, ax =plt.subplots(figsize=(6.7, 4.27))\nHR_data.pivot(columns='left').last_evaluation.plot(kind = 'hist', stacked=True, ax=ax)\nax.set_xlabel('last evaluation')\n","d599b133":"fig, ax =plt.subplots(2,1, figsize=(11.7, 9.27))\nsns.countplot(x='Work_accident',hue='left',data=HR_data, ax=ax[0])\nsns.pointplot(x='Work_accident', y='left', data=HR_data, ax=ax[1])\n","84d7ebf2":"data= HR_data.copy()\n#Checking of missing values\ndata.isnull().sum()","99814e79":"#Set numeric value to salary col by there value size: low-1, medium-2,high-3\nsalary= dict(zip(HR_data[\"salary\"].unique(), [1,2,3]))\ndata.replace({\"salary\": salary}, inplace=True)\ndata.info()","b12717a3":"# get dummies for departmen\ndummies_department=data['department'].str.get_dummies()\ndata=data.drop(columns=['department'])\ndata=data.join(dummies_department,how=\"outer\")\ndata.head()","c25c7142":"#Normlize average monthly hours by project numbers\ndata['monthly_hours_rate']= data['average_montly_hours']\/data['number_project']\ndata= data.drop(columns=['average_montly_hours'])\n\ndata.head()","8f3dbcaa":"corr=data.corr()\ncorr.style.background_gradient(cmap='coolwarm',axis=None)","92893f8c":"import xgboost as xgb\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, confusion_matrix, precision_recall_fscore_support, accuracy_score\nfrom sklearn.model_selection import cross_validate\nimport numpy as np\n\nx=data.copy()\nx=x.drop(columns=['left'])\ny=data['left']\n\n#split train test by: 0.2 test, 0.8 train\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=13)\n\nprint(len(X_test))\nprint(len(y_train))\n\n","35667b95":"#Fit\ndtree = tree.DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\ny_pred = dtree.predict(X_test)\n\n#Evaluation\nprecision,recall,fscore,split=precision_recall_fscore_support(y_test, y_pred)\nprint(confusion_matrix(y_test, y_pred))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True)\n\n\nprint('Accuracy of Decision Tree Classifier on test set: {:.2f}'\n     .format(dtree.score(X_test, y_test)))\nprint('Precision of Decision Tree Classifier on test set: {:.2f}'\n     .format(np.mean(precision)))\nprint('Recall of Decision Tree Classifier on test set: {:.2f}'\n     .format(np.mean(recall)))\nprint('F score of Decision Tree Classifier on test set: {:.2f}'\n     .format(np.mean(fscore)))\n","b7411b8f":"#Fit\nxg_reg = xgb.XGBClassifier()\nxg_reg.fit(X_train,y_train)\ny_pred = xg_reg.predict(X_test)\n\n#Evaluation\nprecision,recall,fscore,split=precision_recall_fscore_support(y_test, y_pred)\nprint(confusion_matrix(y_test, y_pred))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True)\n\nprint('Accuracy of XGBClassifier on test set: {:.2f}'\n     .format(xg_reg.score(X_test, y_test)))\nprint('Precision of XGBClassifier on test set: {:.2f}'\n     .format(np.mean(precision)))\nprint('Recall of XGBClassifier on test set: {:.2f}'\n     .format(np.mean(recall)))\nprint('F score of XGBClassifier on test set: {:.2f}'\n     .format(np.mean(fscore)))\n\n","d37448d9":"#Fit\nrfo = RandomForestRegressor(n_estimators=5)\nrfo.fit(X_train,y_train)\ny_pred = rfo.predict(X_test)\ny_pred= y_pred.round()\n\n#Evaluation\nprecision,recall,fscore,split=precision_recall_fscore_support(y_test, y_pred)\nprint(confusion_matrix(y_test,y_pred))\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True)\n\n\nprint('Accuracy of Random Forest on test set: {:.2f}'\n     .format(rfo.score(X_test, y_test)))\nprint('Precision of Random Forest on test set: {:.2f}'\n     .format(np.mean(precision)))\nprint('Recall of Random Forest on test set: {:.2f}'\n     .format(np.mean(recall)))\nprint('F score of Random Forest on test set: {:.2f}'\n     .format(np.mean(fscore)))\n","dbb0e334":"import shap\nshap.initjs()\nmodel=xg_reg\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(x)\nshap.summary_plot(shap_values,x, max_display=7)","6b86ff13":"shap.summary_plot(shap_values, X_test.columns, plot_type=\"bar\", max_display=7)","30945e8b":"# Data analysis:\n","afc900cc":"Using XGBoost:","ae7f7c59":"Load the data:","e59418ce":"Using Random Forest:","f0fbcd2b":"# Prediction model and Evaluation","d580e515":"Handle categorical data:","ef5bfd7a":"# Preprocessing","b3f2386a":"Using Decision Tree Classifier:"}}