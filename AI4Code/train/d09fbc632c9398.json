{"cell_type":{"cd29e61d":"code","9869bbc7":"code","9218fbd3":"code","7133bc2e":"code","eaa4aa97":"code","60401657":"code","362563e6":"code","beac255b":"code","3bfadd60":"markdown","1945a0d6":"markdown","10e58ac7":"markdown","449ebe49":"markdown","9b446753":"markdown"},"source":{"cd29e61d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9869bbc7":"# First step, import libraries.\nimport numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt","9218fbd3":"df = pd.read_csv('..\/input\/coinbaseUSD_1-min_data_2014-12-01_to_2018-11-11.csv')\ndf['date'] = pd.to_datetime(df['Timestamp'],unit='s').dt.date\ngroup = df.groupby('date')\nReal_Price = group['Weighted_Price'].mean()","7133bc2e":"# split data\nprediction_days = 30\ndf_train= Real_Price[:len(Real_Price)-prediction_days]\ndf_test= Real_Price[len(Real_Price)-prediction_days:]","eaa4aa97":"# Data preprocess\ntraining_set = df_train.values\ntraining_set = np.reshape(training_set, (len(training_set), 1))\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\ntraining_set = sc.fit_transform(training_set)\nX_train = training_set[0:len(training_set)-1]\ny_train = training_set[1:len(training_set)]\nX_train = np.reshape(X_train, (len(X_train), 1, 1))","60401657":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# Initializing the RNN\nregressor = Sequential()\n\n# Adding the input layers\nregressor.add(LSTM(units=4, activation='sigmoid', input_shape=(None, 1)))\n\n# Adding the output layers\nregressor.add(Dense(units=1))\n\n# Compiling the RNN\nregressor.compile(optimizer='Adam', loss='mean_squared_error')\n\n# Fitting the RNN to the training set\nregressor.fit(X_train, y_train, batch_size=5, epochs=100)","362563e6":"# Making the predictions\ntest_set = df_test.values\ninputs = np.reshape(test_set, (len(test_set), 1))\ninputs = sc.transform(inputs)\ninputs = np.reshape(inputs, (len(inputs), 1, 1))\npredicted_BTC_price = regressor.predict(inputs)\npredicted_BTC_price = sc.inverse_transform(predicted_BTC_price)","beac255b":"# Visualising the results\nplt.figure(figsize=(25,15), dpi=80, facecolor='w', edgecolor='k')\nax = plt.gca()  \nplt.plot(test_set, color = 'red', label = 'Real BTC Price')\nplt.plot(predicted_BTC_price, color = 'blue', label = 'Predicted BTC Price')\nplt.title('BTC Price Prediction', fontsize=40)\ndf_test = df_test.reset_index()\nx=df_test.index\nplt.xlabel('Time', fontsize=40)\nplt.ylabel('BTC Price(USD)', fontsize=40)\nplt.legend(loc=2, prop={'size': 25})\nplt.show()","3bfadd60":"# Building the Model - RNN","1945a0d6":"# Split Data\nWe'll predict the last thirty days so we'll take it as a test set.","10e58ac7":"# Predictions ","449ebe49":"# Visualizing the predictions\nSince Bitcoin is a highly volatile crypto-currency, it has unprecedented fluctuations in time so we can't actually predict properly but we'll give it a try nonetheless.","9b446753":"# Process Data\n\nWe reshape the data since we're using Keras"}}