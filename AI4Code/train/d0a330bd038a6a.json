{"cell_type":{"eacf7e87":"code","706d5b22":"code","395bbe11":"code","b0ff418c":"code","b53ee008":"code","d9528819":"code","49b5ff28":"code","f2b2b6e5":"code","5fd31ba1":"code","51aa3c11":"code","cdddeaa0":"code","3c77393e":"code","d4d1f36e":"code","9679a6db":"code","7ef68237":"code","dcd7e30b":"code","274203fa":"code","def21f95":"markdown","5c4e6b5b":"markdown","282cc9af":"markdown","8ec954b6":"markdown","c83773a8":"markdown","5bb65040":"markdown","cfba3324":"markdown","a7dcbac3":"markdown","209c3ccb":"markdown","d6d5341c":"markdown"},"source":{"eacf7e87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","706d5b22":"from numpy import mean, std\nimport seaborn as sns\nfrom matplotlib import *\nfrom matplotlib import pyplot as plt\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom lightgbm import LGBMClassifier","395bbe11":"train_data = pd.read_csv('\/kaggle\/input\/automobile-customer-segmentation\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/automobile-customer-segmentation\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/automobile-customer-segmentation\/sample_submission.csv')\ntrain_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","b0ff418c":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","b53ee008":"train_data.dtypes","d9528819":"train_data.isnull().sum()","49b5ff28":"# Unique values for all the columns\nfor col in ['gender', 'ever_married', 'graduated', 'profession', 'spending_score', 'family_size', 'var_1']:\n    print(\" Unique Values --> \" + col, ':', len(train_data[col].unique()), ': ', train_data[col].unique())","f2b2b6e5":"# Value counts for the columns\nfor col in ['segmentation', 'gender', 'ever_married', 'graduated', 'profession', 'spending_score', 'family_size', 'var_1']:\n    print(col + \": \\n\", train_data[col].value_counts(), '\\n')","5fd31ba1":"i = 1\nfor column in train_data.columns[~(train_data.columns.isin(['age', 'id', 'work_experience', 'family_size']))].tolist():\n    plt.figure(figsize = (40, 10))\n    plt.subplot(3, 3, i)\n    sns.barplot(x = train_data[column].value_counts().index, y = train_data[column].value_counts())\n    i += 1\n    plt.show()","51aa3c11":"sns.boxplot(x = 'age', data = train_data)\nsns.despine()","cdddeaa0":"plt.figure(figsize = (20, 6))\nsns.barplot(x = train_data.groupby(['profession'])['spending_score'].value_counts().index, y = train_data.groupby(['profession'])['spending_score'].value_counts())\nplt.xticks(rotation = 90)\nsns.despine()","3c77393e":"train_data['type'] = 'train'\ntest_data['type'] = 'test'\ntrain_data = train_data.drop('age', axis = 1)\ntest_data = test_data.drop('age', axis = 1)\nmaster_data = pd.concat([train_data, test_data])\ntrain_seg = train_data[['id', 'segmentation']]\ntrain_seg.columns = ['id', 'assumed_seg']\nmaster_data = master_data.merge(train_seg, on = 'id', how = 'left')\n#master_data = master_data.sort_values(['id', 'type'], ascending = [True, False])\nmaster_data.head(20)","d4d1f36e":"# master_data['age_bckt'] = pd.cut(x = master_data['age'], bins = [0, 22, 32, 42, 52, 62, 90], labels = ['1', '2', '3', '4', '5', '6'])\n\nle = LabelEncoder()\ncat_cols = ['gender', 'ever_married', 'graduated', 'profession', 'spending_score', 'var_1', 'assumed_seg']\n\nfor col in cat_cols:\n    master_data[col] = master_data[col].astype(str)\n    LE = le.fit(master_data[col])\n    master_data[col] = LE.transform(master_data[col])\n    \ntrain_data = master_data.loc[master_data['type'] == 'train']\ntest_data = master_data.loc[master_data['type'] == 'test']\n\ntestIDs = test_data.id.values\n\ntrain_data = train_data.drop(['id', 'type', 'family_size', 'work_experience'], axis = 1)\ntest_data = test_data.drop(['id', 'segmentation', 'type', 'family_size', 'work_experience'], axis = 1)\n\ntrain_data = train_data.fillna('NaN')\ntest_data = test_data.fillna('NaN')\n\n# Partitioning the features and the target\n\nX = train_data[train_data.columns[~(train_data.columns.isin(['segmentation']))].tolist()].values\ny = train_data['segmentation'].values\n\ntrain_data.head()","9679a6db":"model = LGBMClassifier()\ncv = RepeatedStratifiedKFold(n_splits = 10, n_repeats = 3, random_state = 22)\nn_scores = cross_val_score(model, X, y, scoring = 'accuracy', cv = cv, n_jobs = -1, error_score = 'raise')\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))\n# fit the model on the whole dataset\nmodel = LGBMClassifier()\nmodel.fit(X, y)\n# make a single prediction\nyhat = (model.predict(test_data)).ravel()\nprint('Prediction: ', yhat)","7ef68237":"pred = pd.DataFrame()\n#pred['ID'] = test_data['id'].values\npred['ID'] = testIDs\npred['Segmentation'] = pd.Series((model.predict(test_data)).ravel())\npred.to_csv('lgbm_v1.csv', index = None)","dcd7e30b":"kfold, scores = KFold(n_splits = 6, shuffle = True, random_state = 22), list()\nfor train, test in kfold.split(X):\n    X_train, X_test = X[train], X[test]\n    y_train, y_test = y[train], y[test]\n    \n    model = CatBoostClassifier(random_state = 22, max_depth = 6, n_estimators = 200, verbose = 100)\n    model.fit(X_train, y_train, cat_features = [0,1,2,3,4,5,6])\n    preds = model.predict(X_test)\n    score = accuracy_score(y_test, preds)\n    scores.append(score)\n    print('Validation Accuracy:', score)\nprint(\"Average Validation Accuracy: \", sum(scores)\/len(scores))","274203fa":"pred = pd.DataFrame()\n#pred['ID'] = test_data['id'].values\npred['ID'] = testIDs\npred['Segmentation'] = pd.Series((model.predict(test_data)).ravel())\npred.to_csv('catboost_v1.csv', index = None)","def21f95":"## Model Building","5c4e6b5b":"### Label Encoding the columns and removing insignificant columns\n\n--> The work experience and family size is insignificant as per deduced by observing the sorted data","282cc9af":"### LGBM Classifier with RepeatedStratifiedKFold","8ec954b6":"### Found additional info by sorting the data (train + test) by IDs","c83773a8":"<img src='https:\/\/datahack-prod.s3.ap-south-1.amazonaws.com\/__sized__\/contest_cover\/Customer_Segmentation-thumbnail-1200x1200-90.jpg' height=600 width=750\/>","5bb65040":"## Exploratory Data analysis","cfba3324":"## Problem Statement\n\nAn automobile company has plans to enter new markets with their existing products (P1, P2, P3, P4 and P5). After intensive market research, they\u2019ve deduced that the behavior of new market is similar to their existing market. \n\nIn their existing market, the sales team has classified all customers into 4 segments (A, B, C, D ). Then, they performed segmented outreach and communication for different segment of customers. This strategy has work exceptionally well for them. They plan to use the same strategy on new markets and have identified 2627 new potential customers. \n\n- ```You are required to help the manager to predict the right group of the new customers```.","a7dcbac3":"| <font color='blue'><h2>Column Name<\/h2><\/font>                       | <font color='blue'><h2>Description<\/h2><\/font>                                                                                        |\n| ------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------:|\n| Id                       | UniqueID                                                                                                   | \n| Gender                          | \tGender of the customer                                                                  | \n| Ever_Married                            | Marital status of the customer                                                                                    | \n| Age                              | Age of the customer                                                                                 | \n| Graduated                               | Is the customer a graduate?                                                                                   |\n| Profession                               | Profession of the customer                                                                                   |\n|Work_Experience                             |  Work Experience in years                   |\n| Spending_Score                             | Spending score of the customer                                          |\n| Family_Size                             | Number of family members for the customer (including the customer)\n                                         |\n|Var_1                              |   Anonymised Category for the customer        |\n| <b><u>Segmentation<\/u><\/b>         |\t<b><u>(target) Customer Segment of the customer<\/u><\/b>                                                 |","209c3ccb":"### Catboost Regressor with kFold","d6d5341c":"### Public leaderboard score (LGBM): Accuracy - 92%"}}