{"cell_type":{"993988a6":"code","da8739b7":"code","f231969a":"code","262b42af":"code","01423e66":"code","c4a2e2cb":"code","6356980b":"code","965f5767":"code","a2085443":"code","8c9321e8":"code","6b6ac7a2":"code","d4889cd7":"code","516387cb":"code","61af49fc":"code","91847cdc":"code","5675987b":"code","4ac69775":"code","7df688f2":"code","a4ae1271":"code","e8a0de95":"code","6dcc4f5d":"code","9816c263":"code","bf945b44":"markdown","353aeadc":"markdown","8fc5a924":"markdown","1320662a":"markdown","7304c5ad":"markdown","e6c19637":"markdown","cccae0df":"markdown","33397afd":"markdown","4dedfb56":"markdown","cd9c8d8f":"markdown","90e1f63b":"markdown","01284931":"markdown","42dd6777":"markdown","d147a3ea":"markdown","d9ee1c5d":"markdown","beeaf68d":"markdown","2159863b":"markdown","be7a9e26":"markdown"},"source":{"993988a6":"# Importing necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom imblearn.over_sampling import RandomOverSampler\nfrom collections import Counter\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score, classification_report, accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.svm import SVC\n\nfrom xgboost import XGBClassifier","da8739b7":"# Reading the dataset\nheart_data = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nheart_data.head()","f231969a":"print(\"Shape of data: \",heart_data.shape)","262b42af":"heart_data.info()","01423e66":"heart_data['time'].describe()","c4a2e2cb":"heart_data['DEATH_EVENT'].value_counts()","6356980b":"heart_data.columns","965f5767":"var = 'age'\nfig, ax = plt.subplots()\nfig.set_size_inches(20, 8)\nplt.xticks(rotation=90);\nsns.countplot(x = var,palette=\"ch:.4\", data = heart_data)\nax.set_xlabel('AGE', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('AGE Count Distribution', fontsize=15)\nsns.despine()","a2085443":"var = 'DEATH_EVENT'\nfig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.swarmplot(x = var, y ='age', data = heart_data)","8c9321e8":"heart_data['ejection_fraction'].describe()","6b6ac7a2":"var = 'age'\ndata = pd.concat([heart_data['ejection_fraction'], heart_data[var]], axis=1)\nf, ax = plt.subplots(figsize=(20, 10))\nfig = sns.boxplot(x=var, y=\"ejection_fraction\", data=data)\nfig.axis(ymin=0, ymax=90);\nplt.xticks(rotation=90);","d4889cd7":"var = 'anaemia'\nfig, ax = plt.subplots()\nfig.set_size_inches(5,5)\nsns.countplot(x = var, data = heart_data)\nax.set_xlabel('anaemia', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('anaemia Count Distribution', fontsize=15)\nax.tick_params(labelsize=15)\nsns.despine()","516387cb":"fig, ax = plt.subplots()\nfig.set_size_inches(5,5)\nsns.countplot(x='DEATH_EVENT',hue='diabetes', data=heart_data)\nax.set_xlabel('DEATH_EVENT', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('DEATH_EVENT count basis of diabetes', fontsize=10)\nax.tick_params(labelsize=15)\nplt.show() ","61af49fc":"fig, ax = plt.subplots()\nfig.set_size_inches(20, 8)\nsns.countplot(x='ejection_fraction',hue='diabetes', data=heart_data)\nax.set_xlabel('ejection_fraction', fontsize=15)\nax.set_ylabel('Count', fontsize=15)\nax.set_title('ejection_fraction count basis of diabetes', fontsize=10)\nax.tick_params(labelsize=15)\nplt.show() ","91847cdc":"fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows = 2, ncols = 2, figsize = (10,10))\n\nsns.countplot(x='DEATH_EVENT',hue='diabetes', data=heart_data, ax = ax1)\nax1.set_xlabel('DEATH_EVENT')\nax1.set_ylabel('Count')\nax1.set_title('DEATH_EVENT count basis of diabetes', fontsize=10)\nax1.tick_params(labelsize=15)\n\nsns.countplot(x='high_blood_pressure',hue='diabetes', data=heart_data, ax = ax2)\nax2.set_xlabel('high_blood_pressure')\nax2.set_ylabel('Count')\nax2.set_title('DEATH_EVENT count basis of diabetes', fontsize=10)\nax2.tick_params(labelsize=15)\n\nsns.countplot(x='sex',hue='diabetes', data=heart_data, ax = ax3)\nax3.set_xlabel('sex')\nax3.set_ylabel('Count')\nax3.set_title('sex count basis of diabetes', fontsize=10)\nax3.tick_params(labelsize=15)\n\nsns.countplot(x='smoking',hue='diabetes', data=heart_data, ax = ax4)\nax4.set_xlabel('smoking')\nax4.set_ylabel('Count')\nax4.set_title('smoking count basis of diabetes', fontsize=10)\nax4.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.5)\nplt.tight_layout() ","5675987b":"heart_data['platelets'].describe()","4ac69775":"f, ax = plt.subplots(figsize=(15,8))\nsns.distplot(heart_data['platelets'])\nplt.xlim([0,900000])","7df688f2":"plt.figure(figsize=(18,18))\nsns.heatmap(heart_data.corr(),annot=True,cmap='RdYlGn')\n\nplt.show()","a4ae1271":"X = heart_data.drop(['DEATH_EVENT'], axis = 1)\ny = heart_data['DEATH_EVENT']","e8a0de95":"X_train,X_test,y_train,y_test = train_test_split(X , y, test_size=0.2, random_state=25)","6dcc4f5d":"os=RandomOverSampler(1)\nX_train_ns,y_train_ns=os.fit_sample(X_train,y_train)\nprint(\"The number of classes before fit {}\".format(Counter(y_train)))\nprint(\"The number of classes after fit {}\".format(Counter(y_train_ns)))","9816c263":"models = []\nmodels.append(('LR', LogisticRegression(solver='liblinear')))\nmodels.append(('LDA', LinearDiscriminantAnalysis()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('DTC', DecisionTreeClassifier()))\nmodels.append(('SVM', SVC(gamma='auto')))\nmodels.append(('RFC', RandomForestClassifier()))\nmodels.append(('ABC', AdaBoostClassifier()))\nmodels.append(('XGB', XGBClassifier()))\n# evaluate each model in turn\nresults = []\nnames = []\nfor name, model in models:\n    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)\n    cv_results = cross_val_score(model, X_train_ns, y_train_ns, cv=kfold, scoring='accuracy')\n    results.append(cv_results)\n    names.append(name)\n    print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))","bf945b44":"# Data Preprocessing","353aeadc":"# Train Test Split","8fc5a924":"**We have around 2:1 ratio for targeted column, so we would be requiring to work on data imbalance**(worked later)","1320662a":"## Heat Map","7304c5ad":"**So clearly we don't have any null value in any of the column.**","e6c19637":"# Data Visualization + EDA\n\n**Ploting data gives us a brief understanding of data, so let's use it**","cccae0df":"**It's time to EXPLORE**\n\n# Exploration 3: Heart Failure\n\n<font color=\"Green\">KaggleStreak <\/font>\n\nSo, here I continue my **Exploration Series**:\n *\" It consists of Data Pre-processing, Data Visualization, EDA, Feature Engg., Model build and finally Evaluation of model. \"*\n\n**This is 2nd in series**\n\n1)[\ud83d\udd26Exploration : Placement Data](https:\/\/www.kaggle.com\/iabhishekmaurya\/exploration-placement-data)\n\n2)[\ud83d\udd26Exploration :  Microsoft Store](https:\/\/www.kaggle.com\/iabhishekmaurya\/exploration-2-microsoft-store)\n\nComing to the present dataset I a using **[Heart Failure](https:\/\/www.kaggle.com\/andrewmvd\/heart-failure-clinical-data)** dataset\n\nThis dataset was developed by *Larxel*\n\n\nSo, here I start my exploration to the saame dataset.\n\nDo give <font color=\"Red\"> UPVOTE <\/font>","33397afd":"## *var* count basis of diabetes","4dedfb56":"## Death","cd9c8d8f":"## Anaemia","90e1f63b":"## Age","01284931":"# Improving data imbalance","42dd6777":"# Model Evaluation","d147a3ea":"## Ejection Fraction","d9ee1c5d":"First, we need to find list of column name we have","beeaf68d":"## Platelets","2159863b":"\n# Libraries\/Modules Imports","be7a9e26":"## <font style=\"color:#9e7fec\">That's it for today, you could do more work upon it like:<\/font>\n* **Working over Model Selection**: Finding out which model work best.\n* **Working with Model Parameters**: After selecting the best model one could find respective best parameters using RandomSearchCV, GridSearchCv, and others.\n\n**Quotes:**\n\n**\u201cThe purpose of our lives is to be happy.\u201d \u2014 *Dalai Lama***\n\n<font style=\"color:orange;font-size:18px\"><b>A Humble Request: IF you liked my work <\/b><\/font>\n<font style=\"color:red;font-size:18px\"><b>DO GIVE UPVOTE<\/b><\/font>\n\n<font style=\"color:green;font-size:18px\">And Guess What, It won't cost any, instead Motivates ME<\/font>\n\n### Till then:\n <font style=\"color:#7fecde; font-size:20px;line-height:24px;\">My other Work:<ul>\n  <li><a href='https:\/\/www.kaggle.com\/iabhishekmaurya\/used-car-price-prediction'>Used Car Price Pridiction <\/a><a href='https:\/\/used-car-price-pred.herokuapp.com\/'>  (Deployed Link)<\/a><\/li>\n  <li><a href='https:\/\/www.kaggle.com\/iabhishekmaurya\/exploration-placement-data'>Exploration Series Part 1<\/a><\/li>\n  <li><a href='https:\/\/www.kaggle.com\/iabhishekmaurya\/case-study-cholera'>Case Study Series Part 1<\/a><\/li>\n  <li><a href='https:\/\/www.kaggle.com\/iabhishekmaurya\/notebooks'>More NoteBooks<\/a><\/li>\n<\/ul> <\/font>\n<hr>\n\n<font style=\"color:green;font-size:18px\">BE SAFE & HAPPY CODING \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb<\/font>"}}