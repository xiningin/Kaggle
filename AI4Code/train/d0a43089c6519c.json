{"cell_type":{"2f776b3a":"code","579d549e":"code","74499890":"code","9af14add":"code","0af90151":"code","f710501a":"code","4f1569ac":"code","5de3babb":"code","f88a2ecc":"code","f2ac5007":"code","d57f33b9":"code","c8321fb6":"code","75e0c0a2":"code","53914904":"code","9d4a76e9":"code","a26444a0":"code","19f4cf6d":"code","8006d864":"code","3436afdd":"code","254c5819":"code","551e8656":"code","4565d751":"code","dc623428":"code","97100964":"code","7e43a11c":"code","16f584d6":"code","847280a4":"code","0dfe1c07":"code","2447f321":"code","a57b51ae":"code","9bf2f180":"code","c06de492":"code","c6ef70ad":"code","4f92a994":"code","1345fffa":"markdown","35a70790":"markdown","5e140130":"markdown","65e814d7":"markdown","2a29ae6e":"markdown","ee493937":"markdown","f66459a3":"markdown","9c99766a":"markdown","0188b651":"markdown","73802856":"markdown","bbc635de":"markdown","c4f94f43":"markdown","c2ca484f":"markdown","d0683224":"markdown","88379b01":"markdown","34db4fcc":"markdown","63a85601":"markdown","1efa35fe":"markdown","b4e580be":"markdown","cd2c676c":"markdown","a74a04f8":"markdown","9d277926":"markdown","c04ace74":"markdown"},"source":{"2f776b3a":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nSEED = 42","579d549e":"# Loading data\ndf = pd.read_csv(\"\/kaggle\/input\/avocado-prices\/avocado.csv\")\ndf.head(8)","74499890":"df.info()","9af14add":"if df.isnull().sum().any() == False:\n    print(\"there are no missing values\")\nelse:\n    print(\"there are something wrong here\")","0af90151":"# Dropping \"Unnamed: 0\" column\ndf = df.drop([\"Unnamed: 0\"], axis = 1)\n\n# Checking for duplicate rows\nprint(\"number of duplicate rows: \", df.duplicated().sum())","f710501a":"df[\"month\"] = np.nan\nmonths_dict = {\"Jan\" : \"01\",\n               \"Feb\" : \"02\", \n               \"Mar\" : \"03\",\n               \"Apr\" : \"04\",\n               \"May\" : \"05\",\n               \"Jun\" : \"06\",\n               \"Jul\" : \"07\",\n               \"Aug\" : \"08\",\n               \"Sep\" : \"09\",\n               \"Oct\" : \"10\",\n               \"Nov\" : \"11\",\n               \"Dec\" : \"12\"}\n\nmonths_key_list = list(months_dict.keys())\nmonths_value_list = list(months_dict.values())\n\nfor index in range(df.shape[0]):\n    date = df.loc[index, \"Date\"]\n    month = date.split(\"-\")[1]\n    i = months_value_list.index(month)\n    df.loc[index, \"month\"] = months_key_list[i]\n    \n# Checking if the values are correct\ndf[\"month\"].unique()","4f1569ac":"# Dropping \"Date\" column\ndf = df.drop([\"Date\"], axis = 1)","5de3babb":"for position in range(len(df[\"year\"].values)):\n    df.loc[position, \"year\"] = str(df.loc[position, \"year\"])","f88a2ecc":"# Numerical data\ndf.describe().T","f2ac5007":"# Categorical data\ndf.describe(include = \"O\").T","d57f33b9":"sns.set_style(\"whitegrid\")\n\ndf_type = df[\"type\"].value_counts()\n\nplt.figure(figsize = (7, 7))\nplt.pie(data = df_type, x = df_type.values, labels = df_type.index, autopct = \"%.2f%%\", pctdistance = 0.75, startangle = 90, colors = [\"green\", \"lime\"])\ncircle = plt.Circle(xy = (0, 0), radius = 0.55, facecolor = 'white')\nplt.gca().add_artist(circle)\nplt.title(\"% of Each Avocado Type\", size = 16)\nplt.show()","c8321fb6":"print(\"total number of conventinal avocados: {0}\\ntotal number of organic avocados: {1}\".format(df[\"type\"].value_counts()[\"conventional\"], df[\"type\"].value_counts()[\"organic\"]))","75e0c0a2":"plt.figure(figsize = (8, 7))\nsns.histplot(data = df, x = \"AveragePrice\", hue = \"type\", kde = True, palette = [\"green\", \"lime\"])\nplt.title(\"Distribution of Average Prices\", size = 16)\nplt.show()","53914904":"df_conventional = df.loc[df[\"type\"] == \"conventional\"].copy()\ndf_region = df_conventional.groupby([\"region\"])[[\"AveragePrice\"]].mean().sort_values(by = \"AveragePrice\", ascending = False).copy()\n\nplt.figure(figsize = (8, 14))\nsns.barplot(data = df_region, x = \"AveragePrice\", y = df_region.index, color = \"green\")\nplt.title(\"Most Expensive Avocados (Conventional)\", size = 16)\nplt.show()","9d4a76e9":"df_organic = df.loc[df[\"type\"] == \"organic\"].copy()\ndf_region = df_organic.groupby([\"region\"])[[\"AveragePrice\"]].mean().sort_values(by = \"AveragePrice\", ascending = False).copy()\n\nplt.figure(figsize = (8, 14))\nsns.barplot(data = df_region, x = \"AveragePrice\", y = df_region.index, color = \"lime\")\nplt.title(\"Most Expensive Avocados (Organic)\", size = 16)\nplt.show()","a26444a0":"df_visualization = df.loc[df[\"year\"] != \"2018\"].copy()\n\n# Putting months in order for a better visualization\ndf_visualization[\"month\"] = pd.Categorical(df_visualization[\"month\"], categories=[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], ordered = True)","19f4cf6d":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization, x = \"year\", y = \"AveragePrice\", hue = \"type\", palette = [\"green\", \"lime\"])\nplt.title(\"Year x Average Price | for Each Avocado Type\", size = 16)\nplt.show()","8006d864":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization, x = \"year\", y = \"Total Volume\", hue = \"type\", palette = [\"green\", \"lime\"])\nplt.title(\"Year x Total Volume | for Each Avocado Type\", size = 16)\nplt.show()","3436afdd":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization.loc[df[\"year\"] == \"2015\"], x = \"month\", y = \"AveragePrice\", hue = \"type\", palette = [\"green\", \"lime\"])\nplt.title(\"Month x Average Price | for Each Avocado Type (2015)\", size = 16)\nplt.show()","254c5819":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization.loc[df[\"year\"] == \"2016\"], x = \"month\", y = \"AveragePrice\", hue = \"type\", palette = [\"green\", \"lime\"])\nplt.title(\"Month x Average Price | for Each Avocado Type (2016)\", size = 16)\nplt.show()","551e8656":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization.loc[df[\"year\"] == \"2017\"], x = \"month\", y = \"AveragePrice\", hue = \"type\", palette = [\"green\", \"lime\"])\nplt.title(\"Month x Average Price | for Each Avocado Type (2017)\", size = 16)\nplt.show()","4565d751":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization.loc[df[\"type\"] == \"conventional\"], x = \"month\", y = \"AveragePrice\", hue = \"year\", palette = [\"springgreen\", \"seagreen\", \"darkgreen\"])\nplt.title(\"Month x Average Price | for Each Year (Conventional)\", size = 16)\nplt.show()","dc623428":"plt.figure(figsize = (9, 7))\nsns.lineplot(data = df_visualization.loc[df[\"type\"] == \"organic\"], x = \"month\", y = \"AveragePrice\", hue = \"year\", palette = [\"springgreen\", \"seagreen\", \"darkgreen\"])\nplt.title(\"Month x Average Price | for Each Year (Organic)\", size = 16)\nplt.show()","97100964":"X = df.drop([\"AveragePrice\"], axis = 1).copy()\ny = df[\"AveragePrice\"].copy()\n\n# Dummie variables\nX = pd.get_dummies(data = X, columns = [\"type\", \"region\", \"month\", \"year\"], prefix = [\"type\", \"region\", \"month\", \"year\"], drop_first = True)\n\n# Scaling tha data\nss = StandardScaler()\nX = ss.fit_transform(X)\n\n# Splitting the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = SEED, shuffle = True)","7e43a11c":"model_scores = {\"train\" : [],\n                \"test\" : [],\n                \"mae\" : [],\n                \"mse\" : [],\n                \"rmse\" : []}\n\ndef get_results(clf):\n    clf.fit(X_train, y_train)\n    train_score = clf.score(X_train, y_train)\n    model_scores[\"train\"].append(train_score)\n    pred = clf.predict(X_test)\n    test_score = clf.score(X_test, y_test)\n    model_scores[\"test\"].append(test_score)\n    mae = mean_absolute_error(pred, y_test)\n    model_scores[\"mae\"].append(mae)\n    mse = mean_squared_error(pred, y_test)\n    model_scores[\"mse\"].append(mse)\n    rmse = np.sqrt(mse)\n    model_scores[\"rmse\"].append(rmse)\n    print(\"train score: {0:.4f}\\nR2 score: {1:.4f}\\nMAE: {2:.4f}\\nMSE: {3:.4f}\\nRMSE: {4:.4f}\".format(train_score, test_score, mae, mse, rmse))\n    plt.figure(figsize = (13, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(\"y_true x y_pred\", size = 14)\n    plt.scatter(y_test, pred, color = \"mediumseagreen\")\n    plt.xlabel(\"y_true\")\n    plt.ylabel(\"y_pred\")\n    plt.subplot(1, 2, 2)\n    plt.title(\"Residuals (y_true - y_pred)\", size = 14)\n    sns.histplot((y_test-pred), kde = True, color = \"green\")\n    plt.show()","16f584d6":"lr = LinearRegression()\nprint(\"Linear Regression\\n\")\nget_results(lr)","847280a4":"dtr = DecisionTreeRegressor(random_state = SEED)\nprint(\"Decision Tree\\n\")\nget_results(dtr)","0dfe1c07":"rfr = RandomForestRegressor(random_state = SEED)\nprint(\"Random Forest\\n\")\nget_results(rfr)","2447f321":"svr = SVR()\nprint(\"Support Vector Machine (SVM)\\n\")\nget_results(svr)","a57b51ae":"xgbr = XGBRegressor(random_state = SEED)\nprint(\"XGBoost\\n\")\nget_results(xgbr)","9bf2f180":"df_results = pd.DataFrame(data = model_scores, index = [\"Linear Regression\", \"Decision Tree\", \"Random Forest\", \"SVM\", \"XGBoost\"])\nmodels = [\"Linear Regression\", \"Decision Tree\", \"Random Forest\", \"SVM\", \"XGBoost\"]\nplt.figure(figsize = (7, 4))\nsns.barplot(data = df_results, x = \"test\", y = models, color = \"seagreen\")\nsns.barplot(data = df_results, x = \"train\", y = models, color = \"seagreen\", alpha = 0.1)\nplt.title(\"Test Score (R\u00b2)\", size = 16)\nplt.show()","c06de492":"plt.figure(figsize = (7, 4))\nsns.barplot(data = df_results, x = \"mae\", y = models, color = \"seagreen\")\nplt.title(\"Mean Absolute Error (MAE)\", size = 16)\nplt.show()","c6ef70ad":"plt.figure(figsize = (7, 4))\nsns.barplot(data = df_results, x = \"mse\", y = models, color = \"seagreen\")\nplt.title(\"Mean Squared Error (MSE)\", size = 16)\nplt.show()","4f92a994":"plt.figure(figsize = (7, 4))\nsns.barplot(data = df_results, x = \"rmse\", y = models, color = \"seagreen\")\nplt.title(\"Root Mean Squared Error (RMSE)\", size = 16)\nplt.show()","1345fffa":"![image.png](attachment:image.png)","35a70790":"![image.png](attachment:image.png)","5e140130":"Now, seeing all this information together (from the last three graphs):","65e814d7":"![image.png](attachment:image.png)","2a29ae6e":"<font size=\"4\">Preparing the Data<\/font>","ee493937":"While Linear Regression model underffited (the model is to simple to handle all the informations), the Decision Tree model overffited (the model has adapted too much to the data, prun the tree it is one good way to prevent this).\n\nXGBoost seems to be the best model in this case (default hyperparameters were used).","f66459a3":"<font size=\"4\">Duplicate Rows<\/font>","9c99766a":"For this part, the year of 2018 will be removed, because there are only few observations of price in this year.","0188b651":"* **Date** - The date of the observation.\n* **AveragePrice** - The average price of a single avocado.\n* **Total Volume** - Total number of avocados sold.\n* **4046** - Total number of avocados with PLU 4046 sold.\n* **4225** - Total number of avocados with PLU 4225 sold.\n* **4770** - Total number of avocados with PLU 4770 sold.\n* **Total Bags** =  **Small Bags** + **Large Bags** + **XLarge Bags**\t\n* **type** - The avocado type.\n* **year** - The year of the observation.\n* **region** - The region of the observation.","73802856":"![image.png](attachment:image.png)","bbc635de":"<font size=\"4\">Missing Values<\/font>","c4f94f43":"<font size=\"4\">Columns<\/font>","c2ca484f":"![image.png](attachment:image.png)","d0683224":"![image.png](attachment:image.png)","88379b01":"As we can see, there are basically the same quantity of conventional and organic avocados. In numbers:","34db4fcc":"Let's extract only the month in \"Date\" column (we already have a \"year\" column), rename it and create a new column for them, and than drop the \"Date\" column.","63a85601":"<font size=\"4\">Visualizing Data<\/font>","1efa35fe":"Before check for duplicate rows, we need to drop the \"Unnamed: 0\" column.","b4e580be":"![image.png](attachment:image.png)","cd2c676c":"In this notebook, i am going to predict avocados prices using some regression models (Linear Regression, Decision Tree, Random Forest, Support Vector Machine and XGBoost). To evaluate each model, i will split the data 75% into train set and 25% into validation\/test set, and than get all the scores: train, R\u00b2, MAE, MSE and RMSE. But first, an EDA (Exploratory Data Analysis) will be done.","a74a04f8":"As we can see from data frame info, there are no missing values.","9d277926":"![image.png](attachment:image.png)","c04ace74":"![image.png](attachment:image.png)"}}