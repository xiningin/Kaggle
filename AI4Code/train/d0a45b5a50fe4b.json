{"cell_type":{"e7f11539":"code","5def0cd2":"code","631765c9":"code","2524b440":"code","1567ed7c":"code","8a7eb9f9":"code","683db968":"code","835ed079":"code","e5a53525":"code","262bf8d9":"code","4d575792":"code","19b3bd64":"code","829eeeac":"code","57670297":"code","8b249c29":"code","518e59f1":"code","542ade82":"code","bd61e548":"code","f3e10124":"code","fe3d47eb":"code","195c08d8":"code","fe6c4851":"code","e3a49217":"code","edb471c1":"code","3924aba2":"code","2b3a8159":"code","f848d02e":"code","45599d83":"code","15cc1f89":"code","477f212f":"code","7d1b09f1":"code","411e42cf":"code","ebb590ae":"code","46b278ba":"code","e50104bf":"code","4bdccb1a":"code","ef8eaf24":"code","f57c6005":"code","4b72415b":"code","39bce3b5":"code","f7a9f7b4":"code","1dd53a0b":"code","e39a9867":"code","fcc4db58":"code","da192a82":"code","640549f8":"code","9904624f":"code","44c774fd":"code","03b1ce47":"code","575b0720":"code","3a3339e7":"code","3df95fcd":"code","48209e83":"code","b5ed3535":"code","d6e52826":"code","2017bf4d":"code","58acd524":"code","a83e74ce":"code","5da6e3d4":"code","b43cc41b":"code","25b9fb58":"code","380e380b":"code","2551ca3e":"code","6f2f084c":"code","88820434":"code","e360049c":"code","8c6266ae":"code","306be5f1":"code","285fb450":"code","756891fe":"code","3f97b6c7":"code","a3582d5f":"code","89c33ad7":"code","8e8499f6":"code","d1db8d7f":"code","2482507b":"code","88f83fd5":"code","cef96bd8":"code","b69e1690":"code","215eadd0":"code","e9ff1e70":"code","762eb83d":"code","39604af7":"code","b6003b93":"code","7f8581f4":"code","d2e1dcea":"code","22409e17":"code","a56a5e4a":"code","201263cb":"code","ce5aee5e":"code","cce6b6e9":"code","e768cbf6":"code","33131f7a":"code","5966ed01":"code","c90d1695":"code","f4afebfa":"code","2852fec3":"code","080faba6":"code","f450d1cf":"code","9bc61739":"code","69ba21a7":"code","f7ae9e9a":"code","568c8bee":"code","c5d736f1":"code","ac65ca88":"code","37a32f45":"code","19fde04d":"code","a26c0c44":"code","0b341a07":"code","ae0f5012":"code","ac7eaf7a":"code","83d8c492":"code","1f099904":"code","869e36d6":"code","459d5f11":"code","f8e95251":"code","e2e7d501":"code","7b483f20":"code","863f750d":"code","fe1c6484":"code","c676a136":"code","4c5bb10a":"code","81a58630":"markdown","308a4e79":"markdown","a4dc9be8":"markdown","58b988f8":"markdown","5ec09269":"markdown","10ad2c2b":"markdown","70b52348":"markdown","79777d7d":"markdown","ec084aa4":"markdown","2d9211fe":"markdown","8d97dcaf":"markdown","46531a34":"markdown","81651906":"markdown","63fe6fba":"markdown","81495700":"markdown","9257c7c1":"markdown","6816f0ef":"markdown","a2e99624":"markdown","deb6fc60":"markdown","cdea1e14":"markdown","e1c0f1e1":"markdown","8549728f":"markdown","ad640ad5":"markdown","53c607d9":"markdown","fa0a27d8":"markdown","b6fb50d5":"markdown","d01d7c6d":"markdown","1867b724":"markdown","3aff496f":"markdown","28c5eb7b":"markdown","292dc6e6":"markdown","6cc37ff3":"markdown","7a28eb81":"markdown","cd40fd65":"markdown","b5fb58c1":"markdown"},"source":{"e7f11539":"import pandas as pd","5def0cd2":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")","631765c9":"train_df.info()","2524b440":"train_df.head()","1567ed7c":"train_df.describe()","8a7eb9f9":"train_df.describe(include=\"O\")","683db968":"test_df.describe()","835ed079":"test_df.describe(include=\"O\")","e5a53525":"train_df['Cabin_Start'] = train_df['Cabin'].str[0]","262bf8d9":"train_df[['Survived','Cabin_Start']].groupby(['Cabin_Start']).mean()","4d575792":"pd.crosstab(train_df['Survived'],train_df['Cabin_Start'])","19b3bd64":"train_df[['Pclass','Cabin_Start']].groupby(['Cabin_Start']).mean()","829eeeac":"pd.crosstab(train_df['Pclass'],train_df['Cabin_Start'])","57670297":"train_df[['Fare','Cabin_Start']].groupby(['Cabin_Start']).mean()","8b249c29":"combine = [train_df, test_df]","518e59f1":"for dataset in combine:\n    dataset['Cabin'].fillna('0', inplace=True)\n    dataset.loc[ dataset['Cabin'].str[0] == 'A', 'Cabin'] = 1\n    dataset.loc[ dataset['Cabin'].str[0] == 'B', 'Cabin'] = 2\n    dataset.loc[ dataset['Cabin'].str[0] == 'C', 'Cabin'] = 3\n    dataset.loc[ dataset['Cabin'].str[0] == 'D', 'Cabin'] = 4\n    dataset.loc[ dataset['Cabin'].str[0] == 'E', 'Cabin'] = 5\n    dataset.loc[ dataset['Cabin'].str[0] == 'F', 'Cabin'] = 6\n    dataset.loc[ dataset['Cabin'].str[0] == 'G', 'Cabin'] = 7\n    dataset.loc[ dataset['Cabin'].str[0] == 'T', 'Cabin'] = 8\n    dataset['Cabin'] = dataset['Cabin'].astype(int)","542ade82":"train_df.describe()","bd61e548":"train_df.describe(include='O')","f3e10124":"train_df = train_df.drop([\"Cabin_Start\"],axis=1)","fe3d47eb":"train_df = train_df.drop([\"PassengerId\"],axis=1)","195c08d8":"train_df[\"Ticket_Length\"] = train_df[\"Ticket\"].str.len()","fe6c4851":"train_df.head()","e3a49217":"train_df[\"Ticket_Contains_Alpha\"] = train_df[\"Ticket\"].str.contains('^[a-zA-Z]')","edb471c1":"train_df.head()","3924aba2":"train_df[[\"Survived\",\"Ticket_Length\"]].groupby(['Ticket_Length'],as_index=False).mean()","2b3a8159":"pd.crosstab(train_df['Survived'],train_df['Ticket_Length'])","f848d02e":"train_df[[\"Survived\",\"Ticket_Contains_Alpha\"]].groupby(['Ticket_Contains_Alpha']).mean()","45599d83":"pd.crosstab(train_df['Survived'],train_df['Ticket_Contains_Alpha'])","15cc1f89":"train_df[[\"Survived\",\"Ticket_Contains_Alpha\",\"Ticket_Length\"]].groupby([\"Ticket_Contains_Alpha\",\"Ticket_Length\"]).mean()","477f212f":"train_df = train_df.drop([\"Ticket\",\"Ticket_Length\",\"Ticket_Contains_Alpha\"],axis=1)\ntest_df = test_df.drop([\"Ticket\"],axis=1)","7d1b09f1":"train_df.head()","411e42cf":"train_df[[\"Survived\",\"Pclass\"]].groupby([\"Pclass\"],as_index=False).mean()","ebb590ae":"train_df[\"Name_Title\"] = train_df[\"Name\"].str.extract('([A-Za-z]+\\.)',expand=False)","46b278ba":"train_df.head()","e50104bf":"train_df[\"Name_Title\"].unique()","4bdccb1a":"train_df[[\"Survived\",\"Name_Title\"]].groupby([\"Name_Title\"],as_index=False).mean()","ef8eaf24":"pd.crosstab(train_df[\"Survived\"],train_df[\"Name_Title\"])","f57c6005":"train_df[\"Name_Title\"] = train_df[\"Name_Title\"].replace(['Capt.','Don.','Jonkheer.','Rev.'],'Gone.')","4b72415b":"pd.crosstab(train_df[\"Survived\"],train_df[\"Name_Title\"])","39bce3b5":"train_df[\"Name_Title\"] = train_df[\"Name_Title\"].replace(['Countess.','Lady.','Mlle.','Mme.','Ms.','Sir.'],'Left.')","f7a9f7b4":"pd.crosstab(train_df[\"Survived\"],train_df[\"Name_Title\"])","1dd53a0b":"train_df[\"Name_Title\"] = train_df[\"Name_Title\"].replace(['Col.','Dr.','Major.'],'Half.')","e39a9867":"pd.crosstab(train_df[\"Survived\"],train_df[\"Name_Title\"])","fcc4db58":"test_df[\"Name_Title\"] = test_df[\"Name\"].str.extract('([A-Za-z]+\\.)',expand=False)\ntest_df[\"Name_Title\"].unique()","da192a82":"test_df[\"Name_Title\"] = test_df[\"Name_Title\"].replace(['Capt.','Don.','Jonkheer.','Rev.'],'Gone.')\ntest_df[\"Name_Title\"] = test_df[\"Name_Title\"].replace(['Col.','Dr.','Major.'],'Half.')","640549f8":"test_df[\"Name_Title\"].unique()","9904624f":"pd.crosstab(test_df[\"Name_Title\"],test_df[\"Sex\"])","44c774fd":"test_df[\"Name_Title\"] = test_df[\"Name_Title\"].replace(['Dona.','Ms.'],'Mrs.')","03b1ce47":"pd.crosstab(test_df[\"Sex\"],test_df[\"Name_Title\"])","575b0720":"title_mapping = {\"Mr.\": 1, \"Miss.\": 2, \"Mrs.\": 3, \"Master.\": 4, \"Gone.\": 5, \"Half.\": 6, \"Left.\": 7}\ntrain_df['Title_Encoded'] = train_df['Name_Title'].map(title_mapping)\ntrain_df['Title_Encoded'] = train_df['Title_Encoded'].fillna(0)","3a3339e7":"train_df.head()","3df95fcd":"test_df['Title_Encoded'] = test_df['Name_Title'].map(title_mapping)\ntest_df['Title_Encoded'] = test_df['Title_Encoded'].fillna(0)","48209e83":"train_df = train_df.drop([\"Name\",\"Name_Title\"],axis=1)\ntest_df = test_df.drop([\"Name\",\"Name_Title\"],axis=1)","b5ed3535":"train_df.head()","d6e52826":"test_df.head()","2017bf4d":"train_df.describe()","58acd524":"train_df.describe(include='O')","a83e74ce":"pd.crosstab(train_df[\"Survived\"],train_df[\"Sex\"])","5da6e3d4":"train_df[[\"Survived\",\"Sex\"]].groupby([\"Sex\"],as_index=False).mean()","b43cc41b":"train_df[\"Sex\"] = train_df[\"Sex\"].map({'female':1,'male':0}).astype(int)","25b9fb58":"test_df[\"Sex\"] = test_df[\"Sex\"].map({'female':1,'male':0}).astype(int)","380e380b":"train_df.head(10)","2551ca3e":"pd.crosstab(train_df[\"Survived\"],train_df[\"Age\"])","6f2f084c":"train_df[[\"Survived\",\"Age\",\"Pclass\"]].groupby([\"Pclass\"],as_index=False).mean()","88820434":"train_df[[\"Survived\",\"Age\",\"Pclass\",\"Sex\"]].groupby([\"Pclass\",\"Sex\"],as_index=False).mean()","e360049c":"train_df[[\"Survived\",\"Age\",\"Pclass\",\"Sex\",\"Title_Encoded\"]].groupby([\"Pclass\",\"Sex\",\"Title_Encoded\"],as_index=False).mean()","8c6266ae":"train_df[[\"Survived\",\"Age\",\"Sex\",\"Title_Encoded\"]].groupby([\"Sex\",\"Title_Encoded\"],as_index=False).mean()","306be5f1":"train_df[[\"Age\",\"Title_Encoded\"]].groupby([\"Title_Encoded\"],as_index=False).mean()","285fb450":"train_df[[\"Age\",\"Title_Encoded\"]].groupby([\"Title_Encoded\"]).mean()","756891fe":"age_mapping = train_df[[\"Age\",\"Title_Encoded\"]].groupby([\"Title_Encoded\"]).mean().to_dict()","3f97b6c7":"age_mapping","a3582d5f":"age_mapping[\"Age\"]","89c33ad7":"train_df[\"Age\"] = train_df[\"Age\"].fillna(train_df[\"Title_Encoded\"].map(age_mapping[\"Age\"]))","8e8499f6":"train_df.describe()","d1db8d7f":"test_df[\"Age\"] = test_df[\"Age\"].fillna(test_df[\"Title_Encoded\"].map(age_mapping[\"Age\"]))","2482507b":"test_df.describe()","88f83fd5":"train_df.head()","cef96bd8":"train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\ntrain_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean()","b69e1690":"pd.crosstab(train_df[\"Survived\"],train_df[\"AgeBand\"])","215eadd0":"combine = [train_df, test_df]","e9ff1e70":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4 \n    dataset['Age'] = dataset['Age'].astype(int)","762eb83d":"train_df.head()","39604af7":"test_df.head()","b6003b93":"train_df= train_df.drop([\"AgeBand\"],axis=1)","7f8581f4":"train_df.head()","d2e1dcea":"train_df[[\"Survived\",\"SibSp\"]].groupby([\"SibSp\"],as_index=False).mean()","22409e17":"pd.crosstab(train_df[\"Survived\"],train_df[\"SibSp\"])","a56a5e4a":"train_df[[\"Survived\",\"Parch\"]].groupby([\"Parch\"],as_index=False).mean()","201263cb":"pd.crosstab(train_df[\"Survived\"],train_df[\"Parch\"])","ce5aee5e":"train_df[\"FareBand\"] = pd.qcut(train_df[\"Fare\"],10)\ntrain_df[[\"Survived\",\"FareBand\"]].groupby([\"FareBand\"],as_index=False).mean()","cce6b6e9":"pd.crosstab(train_df[\"Survived\"],train_df[\"FareBand\"])","e768cbf6":"test_df[\"Fare\"].fillna(test_df[\"Fare\"].dropna().median(),inplace=True)","33131f7a":"test_df.describe()","5966ed01":"combine = [train_df, test_df]","c90d1695":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.55, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.55) & (dataset['Fare'] <= 7.854), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 7.854) & (dataset['Fare'] <= 8.05), 'Fare']   = 2\n    dataset.loc[(dataset['Fare'] > 8.05) & (dataset['Fare'] <= 10.5), 'Fare']   = 3\n    dataset.loc[(dataset['Fare'] > 10.5) & (dataset['Fare'] <= 14.454), 'Fare']   = 4\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 21.679), 'Fare']   = 5\n    dataset.loc[(dataset['Fare'] > 21.679) & (dataset['Fare'] <= 27), 'Fare']   = 6\n    dataset.loc[(dataset['Fare'] > 27) & (dataset['Fare'] <= 39.688), 'Fare']   = 7\n    dataset.loc[(dataset['Fare'] > 39.688) & (dataset['Fare'] <= 77.958), 'Fare']   = 8\n    dataset.loc[ dataset['Fare'] > 77.958, 'Fare'] = 9\n    dataset['Fare'] = dataset['Fare'].astype(int)","f4afebfa":"train_df.head()","2852fec3":"test_df.head()","080faba6":"train_df = train_df.drop([\"FareBand\"],axis=1)","f450d1cf":"train_df.head()","9bc61739":"train_df[[\"Survived\",\"Embarked\"]].groupby([\"Embarked\"],as_index=False).mean()","69ba21a7":"pd.crosstab(train_df[\"Survived\"],train_df[\"Embarked\"])","f7ae9e9a":"train_df.describe(include=\"O\")","568c8bee":"test_df.describe(include=\"O\")","c5d736f1":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(train_df[\"Embarked\"].dropna().mode()[0])","ac65ca88":"train_df[\"Embarked\"] = train_df[\"Embarked\"].map({\"C\":0,\"Q\":1,\"S\":2}).astype(int)\ntest_df[\"Embarked\"] = test_df[\"Embarked\"].map({\"C\":0,\"Q\":1,\"S\":2}).astype(int)","37a32f45":"train_df.describe()","19fde04d":"test_df.describe()","a26c0c44":"X_train = train_df.drop([\"Survived\"], axis=1)\nY_train = train_df[\"Survived\"]\nX_test  = test_df.drop([\"PassengerId\"], axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","0b341a07":"#from sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn import model_selection,metrics\nfrom sklearn.metrics import confusion_matrix\nimport xgboost\nfrom xgboost import plot_importance\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import GridSearchCV","ae0f5012":"train_x, valid_x, train_y, valid_y = model_selection.train_test_split(X_train, Y_train,\n                                                                    test_size=0.3,stratify=Y_train,random_state=0)","ac7eaf7a":"train_x.head()","83d8c492":"xgboost_model = xgboost.XGBClassifier(objective='binary:logistic',learning_rate=0.1)","1f099904":"eval_set = [(train_x,train_y),(valid_x,valid_y)]","869e36d6":"xgboost_model.fit(train_x,train_y,eval_metric=['error','logloss','auc'],eval_set=eval_set,verbose=True)","459d5f11":"xgboost_model.score(train_x,train_y)","f8e95251":"pred_y = xgboost_model.predict(valid_x)\nmetrics.accuracy_score(valid_y,pred_y)","e2e7d501":"pred_test = xgboost_model.predict(X_test)","7b483f20":"submission = pd.DataFrame({\"PassengerId\":test_df[\"PassengerId\"],\"Survived\":pred_test})","863f750d":"submission.to_csv('submission2.csv', index=False)","fe1c6484":"len(submission[submission.Survived ==1 ])","c676a136":"plot_importance(xgboost_model)\nplt.show()","4c5bb10a":"results = confusion_matrix(valid_y, pred_y) \nprint(results)","81a58630":"    4. Pclass\n    \n    See how Pclass effect survival chances ","308a4e79":"Only 3 unique values & with Pclass 1 with Surival chance of 63 % ","a4dc9be8":"    2. PassengerId  -- Drop PassengerID columns as it is just a counter","58b988f8":"Title Encoded makes more sense to use as it classify the person with master, mr which signify age level","5ec09269":"# Model Training\nImport All required library","10ad2c2b":"    11. Embarked\n    \n    See how Embarked vales effet survival chances","70b52348":"Feature engineering completed now move to Model training","79777d7d":"    8. SibSp\n    \n    See how SibSp effect Survival","ec084aa4":"Import training & test data set","2d9211fe":"Replace all rare survived cases with new type as Left","8d97dcaf":"Age has missing values, compare it with other columns to see which can be used to generate missing values","46531a34":"    7. Age \n       \n    See how it impact survival  ","81651906":"Drop existing Title columns","63fe6fba":"Replace all rare gone cases with new type as gone ","81495700":"    5. Name\n    \n    See how Name effect survival chances\n    \n    First extract title","9257c7c1":"Analyse by fetching information for dataframe","6816f0ef":"    6. Sex","a2e99624":"Do mapping of Name Title with numerical field","deb6fc60":"Replace all rare cases with new type as Half","cdea1e14":"\n    3. Ticket \n    \n    Get Ticket length & check if length or alpha numeric ticket has any impact on survival chances","e1c0f1e1":"    9. Parch\n    \n    See how Parch effect Survival","8549728f":"    Ticket columns doesn't seem to impact much so drop it ","ad640ad5":"Cross tabulation of Title field with Survived Columns","53c607d9":"Describe test data set to see how it differ from training dataset","fa0a27d8":"Female have a higher probability of survival with 74%","b6fb50d5":"As dataset have some additional title use sex code to classify them","d01d7c6d":"Do the same cleaning process for Test dataset","1867b724":"Describe object columns of a dataframe","3aff496f":"Test dataset have missing vale for Fare, complete it before converting it in categorical values","28c5eb7b":"Convert Age level vales in categorical numerical values","292dc6e6":"Import Pandas Library to import dataset & analyse dataset ","6cc37ff3":"View sample records","7a28eb81":"    10. Fare\n    \n    See how Fare influence Survival","cd40fd65":"Drop AgeBand","b5fb58c1":"# Feature Engineering \n\n    1. Cabin  -- Analyse Cabin feature"}}