{"cell_type":{"314f2387":"code","4d495325":"code","39304361":"code","a901f90e":"code","8f250b1e":"code","2038c538":"code","6d8e2a11":"code","34159ced":"code","fca9cebf":"code","c17b7ee8":"code","3384c2c3":"code","1e5faf35":"code","ec64579e":"code","56c96146":"code","15a7edae":"code","dda004ed":"code","3e5da5bf":"code","2fc3a371":"code","55558bae":"code","a3120868":"code","5cbcf416":"code","6d028c89":"code","9ff58b97":"code","957ef173":"code","8bfe8f3e":"code","0763894e":"code","c21110da":"code","016e3bd3":"code","da75f70b":"code","8c42d0b4":"code","2ffc629d":"code","66721d1f":"code","ffcaf4b6":"code","ca985651":"code","5f8fce18":"code","e31ec23e":"code","de4648f5":"code","8a10f93d":"code","4aa6bc0a":"code","5a532303":"code","ff8d4fae":"code","3fb3fb74":"code","49339863":"markdown","a278a2de":"markdown","ba43a770":"markdown"},"source":{"314f2387":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import model_selection,preprocessing,linear_model,metrics\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')","4d495325":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\nsub_data = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","39304361":"train_data.describe()","a901f90e":"train_data.Age.fillna(value = train_data['Age'].mean(),inplace = True)","8f250b1e":"def clean_data(data):\n    data.loc[data['Sex']=='male','Sex'] = 0\n    data.loc[data['Sex']=='female','Sex'] = 1\n    data.loc[data['Embarked']=='S','Embarked'] = 0\n    data.loc[data['Embarked']=='C','Embarked'] = 1\n    data.loc[data['Embarked']=='Q','Embarked'] = 2\n    \n\nclean_data(train_data)","2038c538":"train_data.Survived.value_counts(normalize = True).plot(kind='bar',alpha = 0.6)\nplt.title('Survived')\n\nplt.show()\n\nfemale_color = 'coral'\nmale_color = 'grey'","6d8e2a11":"plt.scatter(train_data.Survived,train_data.Age, alpha = 0.1)\nplt.title('Age wrt Survived')\nplt.show()\n\n","34159ced":"train_data.Pclass.value_counts().plot(kind='bar')","fca9cebf":"for x in [1,2,3]:\n    train_data.Age[train_data.Pclass == x].plot(kind='kde')\nplt.title('Class wrt Age')\nplt.legend(('1st','2nd','3rd'))\nplt.show()","c17b7ee8":"train_data.Survived[train_data.Sex==0].value_counts().plot(kind = 'bar',color = male_color)\nplt.title('Male survived')\nplt.show()","3384c2c3":"train_data.Survived[train_data.Sex==1].value_counts().plot(kind = 'bar',color = female_color)\nplt.title('Female survived')\nplt.show()","1e5faf35":"train_data.Sex[train_data.Survived==1].value_counts().plot(kind='bar',color=(female_color,male_color),alpha = 0.5)\nplt.title('Survived wrt Sex')\nplt.show()","ec64579e":"for x in [1,2,3]:\n    train_data.Survived[train_data.Pclass==x].plot(kind='kde')\nplt.title('Survived wrt Class')\nplt.legend(('1st','2nd','3rd'))\nplt.show()","56c96146":"train_data.Survived[(train_data.Pclass == 1) & (train_data.Sex == 0)].value_counts(normalize = True).plot(kind='bar',color = male_color)\nplt.title('Rich Men Survived')\nplt.show()","15a7edae":"train_data.Survived[(train_data.Pclass == 3) & (train_data.Sex == 0)].value_counts(normalize = True).plot(kind='bar',color = male_color)\nplt.title('Poor Men Survived')\nplt.show()","dda004ed":"train_data.Survived[(train_data.Pclass == 1) & (train_data.Sex == 1)].value_counts(normalize = True).plot(kind='bar',color= female_color,alpha = 0.5)\nplt.title('Rich women Survived')\nplt.show()","3e5da5bf":"train_data.Survived[(train_data.Pclass == 3) & (train_data.Sex == 1)].value_counts(normalize = True).plot(kind='bar',color = female_color,alpha = 0.5)\nplt.title('Poor women Survived')\nplt.show()","2fc3a371":"# Most people embarked at S\ntrain_data['Embarked'].value_counts(normalize = True)","55558bae":"# We can assume the NaN values to be S\ntrain_data.Embarked.fillna(value = 0,inplace=True)","a3120868":"train_data['Age range'] = pd.cut(train_data['Age'],5)\ntrain_data['Age range'].value_counts()","5cbcf416":"def clean_age(data):\n    data.loc[data['Age'] <= 16,'Age'] = 0\n    data.loc[(data['Age'] > 16) & (data['Age'] <= 32),'Age'] = 1\n    data.loc[(data['Age'] > 32) & (data['Age'] <= 48),'Age'] = 2\n    data.loc[(data['Age'] > 48) & (data['Age'] <= 64),'Age'] = 3\n    data.loc[(data['Age'] > 64) & (data['Age'] <= 80),'Age'] = 4\nclean_age(train_data)","6d028c89":"# Shows the survival rate of younger people is higher\ntrain_data[['Age range','Survived']].groupby('Age range').mean()","9ff58b97":"train_data['Fare range'] = pd.cut(train_data['Fare'],5)","957ef173":"train_data['Fare range'].value_counts()","8bfe8f3e":"def clean_Fare(data):\n    data.loc[data['Fare'] <= 102,'Fare'] = 0\n    data.loc[(data['Fare'] > 102) & (data['Fare'] <= 204),'Fare'] = 1\n    data.loc[(data['Fare'] > 204) & (data['Fare'] <= 307),'Fare'] = 2\n    data.loc[(data['Fare'] > 307) & (data['Fare'] <= 409),'Fare'] = 3\n    data.loc[(data['Fare'] > 409),'Fare'] = 4\nclean_Fare(train_data)","0763894e":"train_data[['SibSp','Survived']].groupby('SibSp').mean()","c21110da":"train_data[['Parch','Survived']].groupby('Parch').mean()","016e3bd3":"# Class 1 had higher survival rate than 2 & 3\ntrain_data[['Pclass','Survived']].groupby('Pclass').mean()","da75f70b":"# Final check\ntrain_data.head()","8c42d0b4":"test_data.head()","2ffc629d":"test_data.describe()","66721d1f":"test_data['Age'].fillna(value=test_data['Age'].mean(),inplace=True)\ntest_data['Fare'].fillna(value = 0,inplace=True)","ffcaf4b6":"clean_data(test_data)\nclean_age(test_data)\nclean_Fare(test_data)","ca985651":"target = 'Survived'\n\nfeatures = ['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']","5f8fce18":"regr = linear_model.LogisticRegression()\nregr_model = regr.fit(train_data[features],train_data[target])\nprint(regr_model.score(train_data[features],train_data[target]))","e31ec23e":"regr_pred = regr_model.predict(test_data[features])","de4648f5":"print(metrics.mean_absolute_error(sub_data['Survived'],regr_pred))\n\nprint(metrics.mean_squared_error(sub_data['Survived'],regr_pred))\n\nprint(np.sqrt(metrics.mean_squared_error(sub_data['Survived'],regr_pred)))","8a10f93d":"poly = preprocessing.PolynomialFeatures(degree=2)\npoly_features = poly.fit_transform(train_data[features])\n\nregr_model = regr.fit(poly_features,train_data[target])\nprint(regr_model.score(poly_features,train_data[target]))","4aa6bc0a":"test_poly_features = poly.fit_transform(test_data[features])\npoly_regr_pred = regr_model.predict(test_poly_features)","5a532303":"print(metrics.mean_absolute_error(sub_data['Survived'],poly_regr_pred))\n\nprint(metrics.mean_squared_error(sub_data['Survived'],poly_regr_pred))\n\nprint(np.sqrt(metrics.mean_squared_error(sub_data['Survived'],poly_regr_pred)))","ff8d4fae":"output_regr = pd.DataFrame({'PassengerId':test_data['PassengerId'],'Survived':regr_pred})","3fb3fb74":"output_regr.to_csv('Titanic Prediction.csv',index=0)","49339863":"# Polynomial features","a278a2de":"# Logistic Regression model","ba43a770":"# Clean Test data"}}