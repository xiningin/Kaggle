{"cell_type":{"ec7253f1":"code","25f6489b":"code","920337de":"code","9ec040c1":"code","0bc3bbc9":"markdown","7f9e8ee1":"markdown"},"source":{"ec7253f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport pydicom as pdcm\nimport pylab\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\ninput_path = \"..\/input\/\"\n# Any results you write to the current directory are saved as output.","25f6489b":"def load_dcm_data(filename):\n    # attr = [\"Rows\", \"Columns\", \"PixelSpacing\"]\n    dcm_data = pdcm.read_file(filename)\n    dcmImg = dcm_data.pixel_array\n    dcm_row = int(dcm_data.get(\"Rows\"))\n    dcm_colum = int(dcm_data.get(\"Columns\"))\n    dcm_spacing = dcm_data.get(\"PixelSpacing\")\n    dcm_spacing = [float(dcm_spacing[0]), float(dcm_spacing[1])]\n\n    return dcmImg, [dcm_row, dcm_colum, dcm_spacing[0], dcm_spacing[1]]","920337de":"train_labels_info = pd.read_csv(input_path + 'stage_1_train_labels.csv')\ntrain_ID_list = train_labels_info['patientId'].tolist()\ntrain_target = train_labels_info['Target'].tolist()\ntrain_UniqID = train_labels_info['patientId'].unique().tolist()\n\ntrain_mask_info = []\nfor x, y, w, h in zip(train_labels_info['x'].tolist(), train_labels_info['y'].tolist(), train_labels_info['width'].tolist(), train_labels_info['height'].tolist()):\n    if np.isnan(x):\n        x, y, w, h = 0, 0, 0, 0\n    \n    train_mask_info.append([int(x), int(y), int(w), int(h)])\n# train_mask_info.extend(train_labels_info['x'].tolist())\n# train_mask_info.extend(train_labels_info['y'].tolist())\n# train_mask_info.extend(train_labels_info['width'].tolist())\n# train_mask_info.extend(train_labels_info['height'].tolist())\nprint(train_mask_info[5])","9ec040c1":"t = 0\ntempID = [] #train_ID_list[4] \nzeroMask = np.zeros([1024, 1024])\ntrainImage = np.zeros([1024, 1024])\n\n# for ID, mInfo in zip(train_ID_list, train_mask_info): \nID = train_ID_list[5] \nmInfo = train_mask_info[5]\n\nif ID in tempID:\n    t -= 1\n    zeroMask[int(mInfo[1]):int(mInfo[1] + mInfo[3]),\n            int(mInfo[0]):int(mInfo[0] + mInfo[2])] = 1\n\nelse:\n    filename = \"..\/input\/stage_1_train_images\/\" + ID + '.dcm'\n    train_img, train_info = load_dcm_data(filename)\n\n    trainImage[:,:] = train_img.copy()\n    zeroMask[int(mInfo[1]):int(mInfo[1] + mInfo[3]), \n             int(mInfo[0]):int(mInfo[0] + mInfo[2])] = 1\n\n\ntempID = ID\nt += 1\n\nfig, ax = plt.subplots(1, 2)\nax[0].imshow(train_img)\nax[1].imshow(zeroMask)\n\nplt.show()\n","0bc3bbc9":"# DATA Preprocessing for seamantic segmentation \n* Make Img Data Loader\n* Make label mask for training","7f9e8ee1":"## Data loader with pydicom"}}