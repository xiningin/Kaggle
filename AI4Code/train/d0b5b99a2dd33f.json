{"cell_type":{"83d944b2":"code","05fe6836":"code","197a4158":"code","07a23a06":"code","06f51dee":"code","fa5d752e":"code","639b08d5":"code","b5b01521":"code","700da264":"code","99f1b859":"code","695f73c3":"code","20f75854":"code","faebdc4b":"code","36316e10":"code","2a82b4af":"code","580cf879":"code","0f953d2e":"code","1ae78850":"code","7053b5ce":"code","fe6aaa70":"code","16da3a7e":"code","3209e8af":"code","7c189232":"code","97bb0ff3":"code","bda64c41":"code","419b6e43":"code","91015e82":"code","46ab517f":"markdown","efca2d79":"markdown","c270ee84":"markdown","a9db15d0":"markdown","073e3b1b":"markdown","27bde5ce":"markdown","26954004":"markdown","10fc0a4a":"markdown","754dcfc1":"markdown","6d40098a":"markdown","331d85c3":"markdown","87578a80":"markdown","4cef6b94":"markdown"},"source":{"83d944b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plotting data\n\n!pip install openpyxl","05fe6836":"print(\"bonjour\")","197a4158":"help(print)","07a23a06":"\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06f51dee":"img = plt.imread(\"\/kaggle\/input\/test-carte\/heightMap180Percent.png\")","fa5d752e":"fig, ax = plt.subplots()\nax.imshow(img)","639b08d5":"data = pd.read_excel('\/kaggle\/input\/test-carte\/4a366c5b429cf89d48e2d7a25ac26790-2021.10.20-01.15.50.xlsx')\ndata.head()","b5b01521":"data.describe()","700da264":"data['eventName']","99f1b859":"data['eventName'].unique()","695f73c3":"data['eventName'].value_counts()","20f75854":"data['attributes\/2\/value']","faebdc4b":"data['eventName'] == 'Player_Takes_Damage'","36316e10":"my_filter = data['eventName'] == 'Player_Takes_Damage'\ndata['attributes\/2\/value'][my_filter]","2a82b4af":"data[\"attributes\/2\/value\"].str.split()","580cf879":"data[\"attributes\/2\/value\"].str.replace(\"X=\", \"\")","0f953d2e":"posXYZ = data[\"attributes\/2\/value\"].str.replace(\"X=\",\"\").str.replace(\"Y=\", \"\").str.replace(\"Z=\",\"\")\nposXYZ = posXYZ.str.split()\nposXYZ = pd.DataFrame(tuple(posXYZ), columns=('X', 'Y', 'Z'), dtype=np.float)\ndata = pd.concat([data, posXYZ], axis=1)","1ae78850":"X = data[data.eventName==\"Player_Position\"].X\nprint(X)","7053b5ce":"def sumup(a, b):\n    return a + b\n\nsumup(2,3)","fe6aaa70":"def player_positions(data):\n    X = data[data.eventName==\"Player_Position\"].X\n    Y = data[data.eventName==\"Player_Position\"].Y\n    Z = data[data.eventName==\"Player_Position\"].Z\n    return X, Y, Z","16da3a7e":"def player_damages(data):\n    X = data[data.eventName==\"Player_Takes_Damage\"].X\n    Y = data[data.eventName==\"Player_Takes_Damage\"].Y\n    Z = data[data.eventName==\"Player_Takes_Damage\"].Z\n    return X, Y, Z","3209e8af":"aimingstop = data[data.eventName==\"Aiming_Stop\"]\npd.to_datetime(aimingstop[\"attributes\/1\/value\"]).diff()","7c189232":"pd.to_datetime(aimingstop[\"attributes\/1\/value\"]).diff().mean()\n","97bb0ff3":"pd.to_datetime(aimingstop[\"attributes\/1\/value\"]).diff().mean()\n","bda64c41":"pd.to_datetime(data[\"attributes\/1\/value\"]).diff().mean()","419b6e43":"def scale(data):\n    return data * 8 \/ 100.\n\ndef centerX(data):\n    return data + 8129 \/ 2.\n\ndef centerY(data):\n    return data + 8129 \/ 2.","91015e82":"X, Y, Z = player_positions(data)\nA, B, C = player_damages(data)\n\n# possible markers ('o', 'v', '^', '<', '>', '8', 's', 'p', '*', 'h', 'H', 'D', 'd', 'P', 'X')\n# alpha is ranging from 0 (fully transparent) to 1 (opaque)\n# Hint: alpha might be useful for adding up overlapping data point\nfig, ax = plt.subplots()\nax.imshow(img)\n\nax.scatter(centerX(scale(X)), centerY(scale(Y)), color=\"#ebb734\")\nax.scatter(centerX(scale(A)), centerY(scale(B)), color=\"#FF0000\", alpha=0.05, marker='^')\n\n# zooming-in\nax.set_ylim([3250, 4250])\nax.set_xlim([4000, 4750])\n\nplt.savefig('map_and_events.png', dpi=800)\n","46ab517f":"## Convert JSON to csv\/excel\nhttps:\/\/www.convertcsv.com\/json-to-csv.htm\n\n* Choose Excel file. \n* Upload your files in Kaggle's Notebook.","efca2d79":"## Seeing input files","c270ee84":"## Creating function to work faster","a9db15d0":"## Looking at the map","073e3b1b":"We must correct scale and center against map properties !","27bde5ce":"## Looking at timestamp","26954004":"## Spacestamp and timestamp are not understood due to their format","10fc0a4a":"# Plotting spatial data: useful function with Python","754dcfc1":"## Position data printed on world map","6d40098a":"### Spacestamp","331d85c3":"## Sample position and time data","87578a80":"## Setup of the environment","4cef6b94":"### Information about map\n* The map is 8129px suared size\n* 1 meter is equal to 8px\n* Unreal export position data in centimeters\n* Z is altitude\n* The center of the picture is X=0 and Y=0\n* Python consider X=0 and Y=0 to be in upperleft corner\n"}}