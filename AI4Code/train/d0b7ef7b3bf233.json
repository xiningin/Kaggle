{"cell_type":{"10783e2b":"code","e6955d27":"code","109e4ea9":"code","1eda2884":"code","47592508":"code","0ce32596":"code","e32d2125":"code","0fe500f8":"code","8bee8715":"code","0e3510b4":"code","dfe920a2":"code","e46314b8":"code","b60198aa":"code","0bf57106":"code","e290668d":"code","9f768cf5":"code","410aeefc":"code","00893d8f":"code","3d87172e":"code","9db09f3e":"code","00a05562":"code","056d6471":"code","3e80f084":"code","66e8b595":"code","65ed731f":"code","a1df34dd":"code","b6b03bb6":"code","7ee11bee":"code","53a028dc":"code","d7c82ce6":"code","5ccf8848":"code","b3d66d7b":"code","df4a4abd":"code","9e1665d9":"code","7a64e1ff":"code","4255f0bb":"code","a8321d35":"code","0f2ec84b":"code","508f8976":"code","fc89eee7":"code","b6dadb12":"code","e6b1ea37":"code","7b153c04":"code","246a8999":"code","6bc93bc6":"code","803b3e96":"code","f3a7245a":"code","8f66d113":"code","8d0b4e14":"code","095a7a3e":"code","e15b3913":"code","a123de49":"code","e9dfe717":"code","f0ccfa03":"code","7239856d":"code","e0bb7c06":"code","e94c46ba":"code","a16f4e23":"code","c1b9a87e":"code","e7f4e5ca":"code","9327d945":"code","043269f7":"code","89bc23c7":"code","c0157e75":"code","bcf04bbd":"code","5594f66b":"code","d4a87549":"code","111930d2":"code","6a765971":"code","f254366e":"code","e0abad2a":"code","15efd76a":"code","e54601a7":"code","84d77025":"code","a0452c96":"code","e5e14b8b":"code","646afaf4":"code","e11b04f7":"code","9af6254a":"code","fdb6e878":"code","09d5549e":"code","5d4d79a1":"code","8b7201b9":"code","2f7b1b3a":"code","976ec6d5":"code","5d3604af":"code","5d4ef5b0":"code","58709471":"code","6f2956f6":"code","2760534f":"code","ef5ac376":"code","3d039baa":"code","1960e8cf":"code","d96322ce":"code","33ddf452":"code","d911a5a2":"code","021bfebd":"code","561a3452":"code","ed961a6f":"code","f5e4d753":"code","7f892491":"code","def275a7":"code","23a7cdd6":"code","51a2440d":"code","f1362a02":"code","9da4dad4":"code","d6d1794b":"code","10024d72":"code","af342f7f":"code","12547d7f":"code","e718cb33":"code","ac76a0a9":"code","a8aaf11f":"code","8a1eb8c0":"code","b956c9c8":"code","8fb4347a":"code","b7c04cee":"code","6f7ac46c":"code","2788cfe3":"code","09d89194":"code","46859ff9":"code","45bdf0e9":"code","1b66dc35":"code","51cdd7e9":"code","fdfa8e58":"code","9c300a2f":"code","753fb376":"code","f1c6ff0b":"code","13bddfde":"code","4d7fa8da":"code","3c5da98b":"code","4a05a35b":"code","244c46bf":"code","885afba7":"code","11aaf96c":"code","9056b54a":"code","4854bf99":"code","ae2b1ac7":"code","5d88085e":"code","d33db7fa":"code","0d752592":"code","fbe03f69":"code","7848183d":"code","ba563967":"code","2bc8490d":"code","ee7ceaaf":"code","b860c862":"code","44d50de9":"code","8bc30bfd":"code","754f9367":"code","0622ad49":"markdown","4a60c45b":"markdown","d3e4f1bd":"markdown","78f143ec":"markdown","f9f2df31":"markdown","ed44863a":"markdown","a4c9451c":"markdown","4dca7676":"markdown","281505cf":"markdown","6f1e4c8f":"markdown","96c0405e":"markdown","176bef6f":"markdown","0ac89e79":"markdown","b2809935":"markdown","d9cc21b0":"markdown","40720385":"markdown","e7d2a6ff":"markdown","908e5c31":"markdown","801fe775":"markdown","fdf79006":"markdown","1b25f497":"markdown","8b9bface":"markdown","0c6e2433":"markdown","fcf34fa0":"markdown","337868d7":"markdown","4b0e3d46":"markdown","40d08ed7":"markdown","d2fc0183":"markdown","bf0076da":"markdown","ad6529b9":"markdown","ece3bd50":"markdown","f6c12877":"markdown","940bce1e":"markdown","b0ffb445":"markdown","890654db":"markdown","2a446acf":"markdown","ff9bc0dc":"markdown","94480502":"markdown","18f5f0ec":"markdown","40771883":"markdown","389d9932":"markdown","69929cd8":"markdown","522b68b0":"markdown","d9b4f7cb":"markdown","4e67bce4":"markdown","9cf24a90":"markdown","ebfd1666":"markdown","b8f772ad":"markdown","1a673e65":"markdown","c480ee17":"markdown","cb44de25":"markdown","0f064f9d":"markdown","730de424":"markdown"},"source":{"10783e2b":"import pandas as pd\nimport numpy as np\nimport sklearn\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.pipeline import Pipeline\n%config InlineBackend.figure_format = 'svg'\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score, recall_score, precision_recall_curve,f1_score, fbeta_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, VotingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom mlxtend.classifier import StackingClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import StackingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn import tree\nfrom sklearn.tree import plot_tree\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport random\n\n\n","e6955d27":"df = pd.read_csv('..\/input\/hotel-booking\/hotel_booking.csv')\ndf","109e4ea9":"df.columns","1eda2884":"df.shape","47592508":"df.info()","0ce32596":"#Numeric\nnumerical = df.loc[:, (df.dtypes == 'int64') | (df.dtypes == 'float64')].columns.tolist()\nnumerical","e32d2125":"plt.figure(figsize=(10, 20))\nfor i in range(0, len(numerical)):\n    plt.subplot(10, int(len(numerical)\/9), i+1)\n    sns.distplot(df[numerical[i]], color='#4682B4')\n    plt.tight_layout();","0fe500f8":"#Categorical\ncategorical = df.loc[:, (df.dtypes != 'int64') & (df.dtypes != 'float64')].columns.tolist()\ncategorical","8bee8715":"df[numerical].describe()","0e3510b4":"df.shape","dfe920a2":"df[categorical].describe()","e46314b8":"# Check classes for prediction\ndf['is_canceled'].value_counts()#(normalize=True)","b60198aa":"# Check value counts for catogrical columns\nfor col in categorical:\n    print(f'''Value count column {col}:''')\n    print('-' * 50)\n    print(df[col].value_counts())\n    print()","0bf57106":"# Check Duplicates\ndf.duplicated().sum()","e290668d":"df_Train, df_test = train_test_split(df, test_size=0.2, random_state= 30)\n\ndf_train, df_val = train_test_split(df_Train, test_size=0.2, random_state= 30)\n","9f768cf5":"print(f'Shape of train:', df_train.shape)\nprint(f'Shape of validation:', df_val.shape)\nprint(f'Shape of test:', df_test.shape)","410aeefc":"df_train['is_canceled'].value_counts()","00893d8f":"df_val['is_canceled'].value_counts()","3d87172e":"df_test['is_canceled'].value_counts()","9db09f3e":"df_train.isnull().sum()","00a05562":"df_val.isnull().sum()","056d6471":"df_test.isnull().sum()","3e80f084":"#Delete Irrelevant Features\n\n# for train\ndf_train.drop(['name', 'email', 'phone-number', 'credit_card','reservation_status_date'], axis = 1, inplace=True)\n\n# for val\ndf_val.drop(['name', 'email', 'phone-number', 'credit_card','reservation_status_date'], axis = 1, inplace=True)\n\n# for test\ndf_test.drop(['name', 'email', 'phone-number', 'credit_card','reservation_status_date'], axis = 1, inplace=True)\n","66e8b595":"# for train\ndf_train.drop(df_train.loc[df_train['market_segment']== 'Undefined'].index, inplace=True)\n\n# for val\ndf_val.drop(df_val.loc[df_val['market_segment']== 'Undefined'].index, inplace=True)\n\n# for test\ndf_test.drop(df_test.loc[df_test['market_segment']== 'Undefined'].index, inplace=True)\n","65ed731f":"df_train.market_segment.unique()","a1df34dd":"# for train\ndf_train.drop(df_train.loc[df_train['assigned_room_type']== 'P'].index, inplace=True)\ndf_train.drop(df_train.loc[df_train['assigned_room_type']== 'L'].index, inplace=True)\n\n# for val\ndf_val.drop(df_val.loc[df_val['assigned_room_type']== 'P'].index, inplace=True)\ndf_val.drop(df_val.loc[df_val['assigned_room_type']== 'L'].index, inplace=True)\n\n\n# for test\ndf_test.drop(df_test.loc[df_test['assigned_room_type']== 'P'].index, inplace=True)\ndf_test.drop(df_test.loc[df_test['assigned_room_type']== 'L'].index, inplace=True)\n","b6b03bb6":"df_train.assigned_room_type.unique()","7ee11bee":"# for train\ndf_train.drop(df_train.loc[df_train['meal']== 'Undefined'].index, inplace=True)\n\n# for val\ndf_val.drop(df_val.loc[df_val['meal']== 'Undefined'].index, inplace=True)\n\n# for test\ndf_test.drop(df_test.loc[df_test['meal']== 'Undefined'].index, inplace=True)","53a028dc":"df_train.meal.unique()","d7c82ce6":"# for train\ndf_train.drop(df_train.loc[df_train['distribution_channel']== 'Undefined'].index, inplace=True)\n\n# for val\ndf_val.drop(df_val.loc[df_val['distribution_channel']== 'Undefined'].index, inplace=True)\n\n# for test\ndf_test.drop(df_test.loc[df_test['distribution_channel']== 'Undefined'].index, inplace=True)","5ccf8848":"df_train.distribution_channel.unique()","b3d66d7b":"#Remove rows that have no children data\n\n# for train\ndf_train.dropna(subset=['children'], inplace=True)\n\n# foe val\ndf_val.dropna(subset=['children'], inplace=True)\n\n\n# for test\ndf_test.dropna(subset=['children'], inplace=True)\n","df4a4abd":"#Change value company to 0 and 1\n\n# for train\ndf_train['company'] = df_train['company'].apply(lambda x: 0 if pd.isnull(x) else 1)\ndf_train['company'].value_counts()\n\n# for val\ndf_val['company'] = df_val['company'].apply(lambda x: 0 if pd.isnull(x) else 1)\ndf_val['company'].value_counts()\n\n\n# for test\ndf_test['company'] = df_test['company'].apply(lambda x: 0 if pd.isnull(x) else 1)\ndf_test['company'].value_counts()","9e1665d9":"#Change value agent to 0 and 1\n\n# for train\ndf_train['agent'] = df_train['agent'].apply(lambda x: 0 if pd.isnull(x) else 1)\ndf_train['agent'].value_counts()\n\n# for val\n#Change value agent to 0 and 1\ndf_val['agent'] = df_val['agent'].apply(lambda x: 0 if pd.isnull(x) else 1)\ndf_val['agent'].value_counts()\n\n# for test\n#Change value agent to 0 and 1\ndf_test['agent'] = df_test['agent'].apply(lambda x: 0 if pd.isnull(x) else 1)\ndf_test['agent'].value_counts()","7a64e1ff":"#Fill NaN value in country with the value of mode\n\n# for train\ndf_train['country'].fillna(df_train['country'].mode()[0], inplace = True)\ndf_train['country'].value_counts()\n\n# for val\ndf_val['country'].fillna(df_val['country'].mode()[0], inplace = True)\ndf_val['country'].value_counts()\n\n# for test\ndf_test['country'].fillna(df_test['country'].mode()[0], inplace = True)\ndf_test['country'].value_counts()","4255f0bb":"df_train.isna().sum()","a8321d35":"df_train['adr'].describe()","0f2ec84b":"df_train[df_train.adr < 0]","508f8976":"\n# for train\ndf_train.drop(df_train[df_train['adr'] < 0].index, inplace = True)\n\n# for val\ndf_val.drop(df_val[df_val['adr'] < 0].index, inplace = True)\n\n# for test\ndf_test.drop(df_test[df_test['adr'] < 0].index, inplace = True)","fc89eee7":"df_train['adr'].describe()","b6dadb12":"df_train['adults'].describe()","e6b1ea37":"# for train\ndf_train.drop(df_train[df_train['adults']<1].index, inplace= True)\n\n# for val\ndf_val.drop(df_val[df_val['adults']<1].index, inplace= True)\n\n# for test\ndf_test.drop(df_test[df_test['adults']<1].index, inplace= True)","7b153c04":"df_train['adults'].describe()","246a8999":"# for train\n\n# Changing children to integer type: \ndf_train['children'] = df_train['children'].astype(int)\n\n# Changing reservation status date to datetime type: \ndf_train['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])\n\n# Changing agent to integer type: \ndf_train['agent'] = df_train['agent'].astype(int)\n\n# Changing company to integer type: \ndf_train['company'] = df_train['company'].astype(int)","6bc93bc6":"# for val\n\n# Changing children to integer type: \ndf_val['children'] = df_val['children'].astype(int)\n\n# Changing reservation status date to datetime type: \ndf_val['reservation_status_date'] = pd.to_datetime(df['reservation_status_date']) \n\n# Changing agent to integer type: \ndf_val['agent'] = df_val['agent'].astype(int)\n\n# Changing company to integer type: \ndf_val['company'] = df_val['company'].astype(int)","803b3e96":"# for test\n\n# # Changing children to integer type: \ndf_test['children'] = df_test['children'].astype(int)\n\n# # Changing reservation status date to datetime type: \ndf_test['reservation_status_date'] = pd.to_datetime(df['reservation_status_date'])\n\n# # Changing agent to integer type: \ndf_test['agent'] = df_test['agent'].astype(int)\n\n# # Changing company to integer type: \ndf_test['company'] = df_test['company'].astype(int)","f3a7245a":"df_train.info()","8f66d113":"df_val.info()","8d0b4e14":"df_test.info()","095a7a3e":"# for train\ndf_train['total_stays'] = df_train['stays_in_weekend_nights'] + df_train['stays_in_week_nights']\n\n# for val\ndf_val['total_stays'] = df_val['stays_in_weekend_nights'] + df_val['stays_in_week_nights']\n\n# for test\ndf_test['total_stays'] = df_test['stays_in_weekend_nights'] + df_test['stays_in_week_nights']","e15b3913":"# for train\ndf_train['total_guests'] = df_train['adults'] + df_train['children'] + df_train['babies']\n\n# for val\ndf_val['total_guests'] = df_val['adults'] + df_val['children'] + df_val['babies']\n\n# for test\ndf_test['total_guests'] = df_test['adults'] + df_test['children'] + df_test['babies']","a123de49":"# for train\ndf_train['kids'] = df_train['children'] + df_train['babies']\n\n# for val\ndf_val['kids'] = df_val['children'] + df_val['babies']\n\n# for test\ndf_test['kids'] = df_test['children'] + df_test['babies']","e9dfe717":"# for train\ndf_train['guest_location'] = df_train['country'].apply(lambda x: 'Local' if x == 'PRT' else 'International')\ndf_train['guest_location'].value_counts()\n\n# for val\ndf_val['guest_location'] = df_val['country'].apply(lambda x: 'Local' if x == 'PRT' else 'International')\ndf_val['guest_location'].value_counts()\n\n# for test\ndf_test['guest_location'] = df_test['country'].apply(lambda x: 'Local' if x == 'PRT' else 'International')\ndf_test['guest_location'].value_counts()","f0ccfa03":"# Delete \n\n# for train\ndf_train.drop(['stays_in_weekend_nights', 'stays_in_week_nights', 'children', 'babies','reservation_status_date',\n               'reservation_status','days_in_waiting_list'], axis = 1, inplace=True)\n\n# for val\ndf_val.drop(['stays_in_weekend_nights', 'stays_in_week_nights', 'children', 'babies','reservation_status_date',\n            'reservation_status','days_in_waiting_list'], axis = 1, inplace=True)\n\n#for test\ndf_test.drop(['stays_in_weekend_nights', 'stays_in_week_nights', 'children', 'babies','reservation_status_date',\n             'reservation_status','days_in_waiting_list'], axis = 1, inplace=True)\n","7239856d":"# check Duplicates\ndf_train.duplicated().sum()\n","e0bb7c06":"df_val.duplicated().sum()","e94c46ba":"df_test.duplicated().sum()","a16f4e23":"# drop Duplicates\n# for train\ndf_train.drop_duplicates(inplace=True)\n\n# for val\ndf_val.drop_duplicates(inplace=True)\n\n# for test\ndf_test.drop_duplicates(inplace=True)\n","c1b9a87e":"df_train.duplicated().sum()\n","e7f4e5ca":"df_train['is_canceled'].value_counts()","9327d945":"df_train.dtypes","043269f7":"df.nunique()","89bc23c7":"df.reserved_room_type.value_counts()","c0157e75":"df.assigned_room_type.value_counts()","bcf04bbd":"df1t= df_train.select_dtypes(exclude=['object']).copy() # df_train","5594f66b":"df_obj_train=df_train.loc[:,['hotel','meal','market_segment','distribution_channel','assigned_room_type','deposit_type','customer_type','guest_location']]\n           ","d4a87549":"df1v= df_val.select_dtypes(exclude=['object']).copy()","111930d2":"df_obj_val=df_val.loc[:,['hotel','meal','market_segment','distribution_channel','assigned_room_type','deposit_type','customer_type','guest_location']]\n","6a765971":"df1ts= df_test.select_dtypes(exclude=['object']).copy()","f254366e":"df_obj_test=df_test.loc[:,['hotel','meal','market_segment','distribution_channel','assigned_room_type','deposit_type','customer_type','guest_location']]  ","e0abad2a":"df_dum_tr = pd.get_dummies(df_obj_train, drop_first=True)\n\ndf_train1 = pd.concat([df1t, df_dum_tr], axis=1)\ndf_train1.head(2)","15efd76a":"df_dum_val = pd.get_dummies(df_obj_val, drop_first=True)\n\ndf_val1 = pd.concat([df1v, df_dum_val], axis=1)\ndf_val1.head(2)","e54601a7":"df_dum_test = pd.get_dummies(df_obj_test, drop_first=True)\n\ndf_test1 = pd.concat([df1ts, df_dum_test], axis=1)\ndf_test1.head(2)","84d77025":"df_train1.corr()","a0452c96":"df_train1.info()","e5e14b8b":"# Classes\nplt.figure(figsize=(5, 6))\ncancel_ax = sns.countplot(df_train['is_canceled'])\n\nfor p in cancel_ax.patches:\n    cancel_ax.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')","646afaf4":"labels = ['Confirmed Booking',  'Cancelled Booking']\nmyexplode = [0.2, 0]\ncancel_fig, cancel_ax = plt.subplots(figsize=[10,6])\ncancel_ax.pie(df_train['is_canceled'].value_counts(), autopct='%1.1f%%',\n        shadow=True, startangle=90, explode = myexplode, textprops={'color':\"black\", 'fontsize':20}, labels=labels)\ncancel_ax.axis('equal'); ","e11b04f7":"repeat_ax = pd.crosstab(df_train['is_repeated_guest'], df_train['is_canceled'], normalize = 'index').plot.bar(stacked=True, figsize=(8,8))\nplt.legend(bbox_to_anchor=(1.01, 0.5), title='Is Canceled', fontsize=12, title_fontsize=12, labels=['No','Yes'])\n    \nfor p in repeat_ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    repeat_ax.text(x+width\/2, \n            y+height\/2, \n            '{:.2f} %'.format(height*100), \n            horizontalalignment='center', \n            verticalalignment='center',\n            color='white', fontsize=15)\n    \nplt.title('Cancellation Rate by Repeated Guest', fontsize=20, pad=30)    \nrepeat_ax.set_xticklabels(['No', 'Yes'], rotation=360)\nplt.xlabel('Is Repeated Guest', fontsize=12, labelpad=15)\nplt.ylabel('Percentage (%)', fontsize=12)\nplt.show()","9af6254a":"customer_ax = pd.crosstab(df_train['customer_type'], df_train['is_canceled'], normalize = 'index').plot.bar(stacked=True, figsize=(10,8))\nplt.legend(bbox_to_anchor=(1.01, 0.5), title='Is Canceled', fontsize=12, title_fontsize=12, labels=['No','Yes'])\n    \nfor p in customer_ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    customer_ax.text(x+width\/2, \n            y+height\/2, \n            '{:.2f} %'.format(height*100), \n            horizontalalignment='center', \n            verticalalignment='center',\n            color='white', fontsize=15)\n    \nplt.title('Cancellation Rate by Customer Type', fontsize=20, pad=30)    \nplt.xticks(rotation=360)\nplt.xlabel('Customer Type', fontsize=12, labelpad=15)\nplt.ylabel('Percentage (%)', fontsize=12)\nplt.show()","fdb6e878":"Most_hotel_cancellation = df_train.groupby('hotel').is_canceled.sum()\nMost_hotel_cancellation","09d5549e":"fig = plt.figure(figsize =(7,7))\nc = ['#4682B4','darkorange']\nplt.title('Cancellation rate per hotel', fontsize = 12, weight = 'bold')\n        \n\nplt.pie(Most_hotel_cancellation , labels=Most_hotel_cancellation.index,autopct=\"%0.1f%%\", pctdistance=0.6 ,colors=c,\n       shadow=True, startangle=90, explode = myexplode, textprops={'color':\"black\", 'fontsize':20});\n","5d4d79a1":"hotel_ax = pd.crosstab(df_train['hotel'], df_train['is_canceled'], normalize = 'index').plot.bar(stacked=True, figsize=(8,8))\nplt.legend(bbox_to_anchor=(1.01, 0.5), title='Is Canceled', fontsize=12, title_fontsize=12, labels=['No','Yes'])\n    \nfor p in hotel_ax.patches:\n    width, height = p.get_width(), p.get_height()\n    x, y = p.get_xy() \n    hotel_ax.text(x+width\/2, \n            y+height\/2, \n            '{:.2f} %'.format(height*100), \n            horizontalalignment='center', \n            verticalalignment='center',\n            color='white', fontsize=15)\n    \nplt.title('Cancellation Rate by Hotel Type', fontsize=20, pad=30)    \nplt.xticks(rotation=360)\nplt.xlabel('Hotel Type', fontsize=12)\nplt.ylabel('Percentage (%)', fontsize=12)\nplt.show()","8b7201b9":"plt.figure(figsize=(8,4))\nsns.barplot(y=df_train.booking_changes.index,x=df_train.market_segment\n            ,ci=True,color='#4682B4')\nplt.ylabel('booking_changes')\nplt.xlabel('market segment');\n%config InlineBackend.figure_format = 'svg'","2f7b1b3a":"X_train=df_train1.drop(['is_canceled'], axis=1) \ny_train=df_train1['is_canceled']\nX_val=df_val1.drop(['is_canceled'], axis=1)\ny_val=df_val1['is_canceled']\nX_test=df_test1.drop(['is_canceled'], axis=1)\ny_test=df_test1['is_canceled']","976ec6d5":"\n# define the parameter values that should be searched\nk_range = list(range(1, 10))\nweight_options = ['uniform', 'distance']","5d3604af":"# create a parameter grid: map the parameter names to the values that should be searched\nparam_grid = dict(n_neighbors=k_range, weights=weight_options)","5d4ef5b0":"knn = KNeighborsClassifier()\ngrid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy')\ngrid.fit(X_train, y_train)","58709471":"# examine the best model\nprint(\"Best params: \", grid.best_params_)\nprint(\"Best estimator: \", grid.best_estimator_)\nprint(\"Best score: \", grid.best_score_)","6f2956f6":"KNeighborsClassifier","2760534f":"knn = KNeighborsClassifier(n_neighbors=9 , weights= 'distance' )\nknn.fit(X_train, y_train)","ef5ac376":"print('f1_score for train: ',f1_score(y_train, knn.predict(X_train)))","3d039baa":"print('f1_score for validation: ',f1_score(y_val, knn.predict(X_val)))\nprint('f1_score for test: ',f1_score(y_test, knn.predict(X_test)))","1960e8cf":"Logistic =LogisticRegression(solver ='liblinear') \nLogistic.fit(X_train,y_train)","d96322ce":"print('f1_score for train: ',f1_score(Logistic.predict(X_train), y_train))\nprint('f1_score for validation: ',f1_score(y_val, Logistic.predict(X_val)))\nprint('f1_score for test: ',f1_score(Logistic.predict(X_test), y_test))","33ddf452":"Random_Forest = RandomForestClassifier(n_estimators=15 , random_state=10)\nRandom_Forest.fit(X_train, y_train)","d911a5a2":"print('f1_score for training: ',f1_score(y_train, Random_Forest.predict(X_train)))\nprint('f1_score for validation: ',f1_score(Random_Forest.predict(X_val), y_val))","021bfebd":"print('f1_score for test: ',f1_score(Random_Forest.predict(X_test), y_test))","561a3452":"Decision_Tree = DecisionTreeClassifier(max_depth = 10,random_state=10, criterion = \"gini\", splitter = 'random', max_leaf_nodes = 10, min_samples_leaf = 5)\nDecision_Tree.fit(X_train, y_train)","ed961a6f":"print('f1_score for train: ',f1_score(y_train, Decision_Tree.predict(X_train)))\nprint('f1_score for validation: ',f1_score(y_val, Decision_Tree.predict(X_val)))\nprint('f1_score for test: ',f1_score(y_test, Decision_Tree.predict(X_test)))","f5e4d753":"tree_dot = plot_tree(Decision_Tree,feature_names=X_train.columns)","7f892491":"log=LogisticRegression(solver ='liblinear') \nrnd=RandomForestClassifier()\ndct=DecisionTreeClassifier()\nvoting_classifer = VotingClassifier(estimators=[('lr',log),('rf',rnd),('dt',dct)],voting='hard',n_jobs=-1)\nvoting_classifer.fit(X_train, y_train)","def275a7":"print('f1_score for train: ',f1_score(voting_classifer.predict(X_train), y_train))\nprint('f1_score for val: ',f1_score(voting_classifer.predict(X_val), y_val))\n\nprint('f1_score for test: ',f1_score(voting_classifer.predict(X_test), y_test))","23a7cdd6":"from mlxtend.classifier import StackingClassifier","51a2440d":"lr = LogisticRegression(solver ='liblinear')  # defining meta-classifier\nstacked = StackingClassifier(classifiers =[knn,Decision_Tree, lr], meta_classifier = lr, use_probas = False)","f1362a02":"model_stack = stacked.fit(X_train, y_train)   # training of stacked model\npred_train = model_stack.predict(X_train)       ","9da4dad4":"print('f1_score for train: ',f1_score(y_train, model_stack.predict(X_train) ))\nprint('f1_score for validation: ',f1_score(y_val, model_stack.predict(X_val)))\nprint('f1_score for test: ',f1_score(y_test, model_stack.predict(X_test)))","d6d1794b":"adaboost = AdaBoostClassifier(n_estimators = 50, learning_rate = 0.2,random_state=10)\nadaboost.fit(X_train, y_train)\nscore = adaboost.score(X_train, y_train)","10024d72":"print('f1_score for train: ',f1_score(adaboost.predict(X_train), y_train))\nprint('f1_score for validation: ',f1_score(adaboost.predict(X_val), y_val))\nprint('f1_score for test: ',f1_score(adaboost.predict(X_test), y_test))","af342f7f":"from xgboost import XGBClassifier\nxgboost = XGBClassifier(n_estimators = 1000, learning_rate = 0.05,random_state=10).fit(X_train, y_train, early_stopping_rounds = 5, eval_set = [(X_val, y_val)],verbose = False)\nscore_xgb = xgboost.score(X_train,y_train)","12547d7f":"print('f1_score for train: ',f1_score(xgboost.predict(X_train), y_train))\nprint('f1_score for validation: ',f1_score(xgboost.predict(X_val), y_val))\nprint('f1_score for test: ',f1_score(xgboost.predict(X_test), y_test))","e718cb33":"print(\"kNN confusion matrix: \\n\\n\", confusion_matrix(y_train, knn.predict(X_train)))","ac76a0a9":"#from sklearn.metrics import confusion_matrix\nprint(\"kNN confusion matrix: \\n\\n\", confusion_matrix(y_val, knn.predict(X_val)))","a8aaf11f":"from sklearn.metrics import plot_confusion_matrix\n\n\nloan_confusion = confusion_matrix(y_val, knn.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n           xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","8a1eb8c0":"print(\"kNN precision: \\n\\n\", precision_score(y_val, knn.predict(X_val)))","b956c9c8":"print(\"kNN recall: \\n\\n\", recall_score(y_val, knn.predict(X_val)))","8fb4347a":"print(\"Logistic confusion matrix: \\n\\n\", confusion_matrix(y_train, Logistic.predict(X_train)))","b7c04cee":"print(\"Logistic confusion matrix: \\n\\n\", confusion_matrix(y_val, Logistic.predict(X_val)))","6f7ac46c":"#y_predict = (Logistic.predict_proba(X_val)[:, 1] >= 0.624)\n\nloan_confusion = confusion_matrix(y_val, Logistic.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n          xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","2788cfe3":"print(\"Logstic precision: \\n\\n\", precision_score(y_val, Logistic.predict(X_val)))","09d89194":"print(\"Logstic recall: \\n\\n\", recall_score(y_val, Logistic.predict(X_val)))","46859ff9":"print(\"Random_Forest confusion matrix: \\n\\n\", confusion_matrix(y_train, Random_Forest.predict(X_train)))","45bdf0e9":"print(\"Random_Forest confusion matrix: \\n\\n\", confusion_matrix(y_val, Random_Forest.predict(X_val)))","1b66dc35":"\nloan_confusion = confusion_matrix(y_val, Random_Forest.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n           xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","51cdd7e9":"print(\"Random_Forest precision: \\n\\n\", precision_score(y_val, Random_Forest.predict(X_val)))","fdfa8e58":"print(\"Random_Forest recall: \\n\\n\", recall_score(y_val, Random_Forest.predict(X_val)))","9c300a2f":"print(\"DT confusion matrix: \\n\\n\", confusion_matrix(y_train, Decision_Tree.predict(X_train)))","753fb376":"print(\"Decision Tree confusion matrix: \\n\\n\", confusion_matrix(y_val, Decision_Tree.predict(X_val)))","f1c6ff0b":"loan_confusion = confusion_matrix(y_val, Decision_Tree.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n          xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","13bddfde":"print(\"Decision Tree precision: \\n\\n\", precision_score(y_val, Decision_Tree.predict(X_val)))","4d7fa8da":"print(\"Decision Tree recall: \\n\\n\", recall_score(y_val, Decision_Tree.predict(X_val)))","3c5da98b":"print(\"voting_classifer confusion matrix: \\n\\n\", confusion_matrix(y_train, voting_classifer.predict(X_train)))","4a05a35b":"loan_confusion = confusion_matrix(y_val, voting_classifer.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n          xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","244c46bf":"print(\"voting_classifer confusion matrix: \\n\\n\", confusion_matrix(y_val, voting_classifer.predict(X_val)))","885afba7":"print(\"voting_classifer precision: \\n\\n\", precision_score(y_val, voting_classifer.predict(X_val)))","11aaf96c":"print(\"voting_classifer recall: \\n\\n\", recall_score(y_val, voting_classifer.predict(X_val)))","9056b54a":"print(\"Stacking Classifier confusion matrix: \\n\\n\", confusion_matrix(y_train, model_stack.predict(X_train)))","4854bf99":"loan_confusion = confusion_matrix(y_val, model_stack.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n           xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","ae2b1ac7":"print(\"Stacking Classifier confusion matrix: \\n\\n\", confusion_matrix(y_val, model_stack.predict(X_val)))","5d88085e":"print(\"Stacking Classifier precision: \\n\\n\", precision_score(y_val, model_stack.predict(X_val)))","d33db7fa":"print(\"Stacking Classifier recall: \\n\\n\", recall_score(y_val, model_stack.predict(X_val)))","0d752592":" print(\"AdaBoost confusion matrix: \\n\\n\", confusion_matrix(y_train, adaboost.predict(X_train)))","fbe03f69":"loan_confusion = confusion_matrix(y_val, adaboost.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n          xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","7848183d":"print(\"AdaBoost confusion matrix: \\n\\n\", confusion_matrix(y_val, adaboost.predict(X_val)))","ba563967":"print(\"AdaBoost precision: \\n\\n\", precision_score(y_val, adaboost.predict(X_val)))","2bc8490d":"print(\"AdaBoost recall: \\n\\n\", recall_score(y_val, adaboost.predict(X_val)))","ee7ceaaf":"print(\"XGBClassifier confusion matrix: \\n\\n\", confusion_matrix(y_train, xgboost.predict(X_train)))","b860c862":"loan_confusion = confusion_matrix(y_val, xgboost.predict(X_val))\n\nsns.heatmap(loan_confusion , cmap = 'Blues_r', annot = True , square = True , fmt = 'd',\n          xticklabels = ['Predicted Not Canceled', 'Predicted Canceled'],\n           yticklabels = ['Actually Not Canceled', 'Actually Canceled'])\n\n\nplt.xlabel('prediction')\nplt.ylabel('actual');","44d50de9":"print(\"XGBClassifier confusion matrix: \\n\\n\", confusion_matrix(y_val, xgboost.predict(X_val)))","8bc30bfd":"print(\"XGBClassifier precision: \\n\\n\", precision_score(y_val, xgboost.predict(X_val)))","754f9367":"print(\"XGBClassifier recall: \\n\\n\", recall_score(y_val, xgboost.predict(X_val)))","0622ad49":"Overfit\n\n","4a60c45b":"---\n# voting\n","d3e4f1bd":"# Take a Look at the Data Structure\n---","78f143ec":"City hotels have a higher cancellation rate than resort hotels","f9f2df31":"---\n# Random Forest Evaluation","ed44863a":"---\n# AdaBoost Evaluation","a4c9451c":"# XGBoost (Extreme Gradient Boosting Evaluation)","4dca7676":"---\n# logstic Evaluation\n","281505cf":"## Customer Type and Cancellation","6f1e4c8f":"---\n# EDA","96c0405e":"Repeated guests are less likely to cancel compared to non-repeated guests","176bef6f":"# Split Data\n---","0ac89e79":"Undervite","b2809935":"---\n# Stacking Classifier ","d9cc21b0":"Overfit\n","40720385":"Guest location","e7d2a6ff":"# Hotel Booking Cancellation Prediction\n\n\n\n# Description\n\nPredict whether hotel bookings are included in the category to be canceled or not, based on the available features.\n\n\n# Content\n* Import Libraries\n* Load and Describe Data\n* Split Data\n* Data Pre-Processing:\n1. Delete Irrelevant Features\n2. Check nulls and Duplicates\n3. Fill nulls\n4. Drop Duplicates\n5. Handel incorrect value\n6. Change Type for some features\n* Feature Engineering\n* One Hot Encoding (Get Dummies)\n* Exploratory Data Analysis (EDA)\n* Modelling with:\n1. KNN Model\n2. Logistic Regression\n3. Random Forest\n4. Decision Tree\n5. voting\n6. Stacking Classifier\n7. Boosting\n* Evaluation Models\n* Conclusion\n\n---","908e5c31":"## Repeated Guest and Cancellation\n\n","801fe775":"---\n# Boosting\nAdaBoost","fdf79006":"**Conclusion:**\nIdentifies XGBoost as the best model\n\n","1b25f497":"---\n## Logistic Regression","8b9bface":"---\n# Voting Evaluation","0c6e2433":"---\n## Decision Tree","fcf34fa0":"# Is the number of changes of the reservation affected by (market segment)?","337868d7":"kids","4b0e3d46":"Adults\n","40d08ed7":"## Data Pre-Processing","d2fc0183":"Delete some values","bf0076da":"ADR","ad6529b9":"confusion matrix, precision and recall","ece3bd50":"\n------\n# Evaluation:","f6c12877":"Overfit\n\n","940bce1e":"---\n# Get Dummies ","b0ffb445":"---","890654db":"## Models\n\n---\n\n## KNN Model","2a446acf":"## Cancellation Rate","ff9bc0dc":"\n# knn Evaluation\n","94480502":"Customer type group has the lowest cancellation rate\n","18f5f0ec":"---\n## Random Forest","40771883":"Overfit\n","389d9932":"# Decision Tree Evaluation","69929cd8":"Total Stays\n","522b68b0":"# Handel incorrect value\n---","d9b4f7cb":"---\n## Hotel Type and Cancellation","4e67bce4":"XGBoost (Extreme Gradient Boosting)","9cf24a90":"# Change Type","ebfd1666":"---\n# Stacking Evaluation","b8f772ad":"Total Guests","1a673e65":"# Feature Engineering\n---","c480ee17":"---\n\n---","cb44de25":"# Get the Data\n---","0f064f9d":"# What is the cancellation rate for each hotel?","730de424":"# Import packages\n---\n---"}}