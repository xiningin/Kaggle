{"cell_type":{"df61af9c":"code","b368008a":"code","eff32ef5":"code","4a84f695":"code","d81619a8":"code","032deeb7":"code","a4a9456b":"code","3fb59f48":"code","1ffcbef8":"code","c6dc50b3":"code","dd6c018d":"code","a7a5ff01":"code","ed81f539":"code","8644eb54":"code","708965db":"code","7c427376":"code","874a17ad":"code","9776a0ef":"code","a86f0f83":"code","586923f6":"code","fc87d599":"code","68ae2c67":"code","d08db32c":"code","24f9aa31":"code","f3272952":"code","1cf0e238":"code","9f705fce":"code","7ef86288":"code","56cdfe42":"code","3496cd19":"code","5c5bd2f2":"markdown","db6564e3":"markdown","a73fb8a5":"markdown","02fac93f":"markdown","9c0f6ee8":"markdown","f017049f":"markdown","ce0db857":"markdown","b04dde23":"markdown","e14f24fa":"markdown","e278c98b":"markdown","4a9a7492":"markdown","1c30f369":"markdown","bcdbf91a":"markdown","3b264c38":"markdown","73492722":"markdown","8685a239":"markdown","77abdaa1":"markdown","7cf941d5":"markdown"},"source":{"df61af9c":"import numpy as np\nimport pandas as pd\nimport time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn import svm","b368008a":"traindata = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ntestdata = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")","eff32ef5":"data_train=traindata.iloc[:,1:785]\/ 255.0\nlabel_train=pd.DataFrame([traindata.iloc[:,0]]).T\ndata_test=testdata.iloc[:,0:784]\/ 255.0","4a84f695":"label_train.value_counts()","d81619a8":"categoryMap={0 :'T-shirt\/Top',\n1 :'Trouser',\n2 :'Pullover',\n3 :'Dress',\n4 :'Coat',\n5 :'Sandal',\n6 :'Shirt',\n7 :'Sneaker',\n8 :'Bag',\n9 :'Ankle boot'}\nlabel_train['category']=label_train['label'].map(categoryMap)","032deeb7":"L = 5\nW = 6\nfig, axes = plt.subplots(L, W, figsize = (12,12))\naxes = axes.ravel()\n\nfor i in range(30):\n    axes[i].imshow(data_train.values.reshape((data_train.shape[0], 28, 28))[i], cmap=plt.get_cmap('gray'))\n    axes[i].set_title(\"class \" + str(label_train['label'][i]) + \": \"+ label_train['category'][i])\n    axes[i].axis('off')\nplt.show()","a4a9456b":"print(\"check for data_train:\\n\",data_train.isnull().any().describe(),\"\\n\\ncheck for label_train:\\n\",label_train.isnull().any().describe(),\"\\n\\ncheck for data_test:\\n\",data_test.isnull().any().describe())","3fb59f48":"l_train=pd.DataFrame([traindata.iloc[:,0]]).T\nX_train, X_val, Y_train, Y_val = train_test_split(data_train, l_train, test_size = 0.25, random_state=255)","1ffcbef8":"np.mean(X_train.values),np.std(X_train.values),np.mean(X_val.values),np.std(X_val.values)","c6dc50b3":"X_train=StandardScaler().fit_transform(X_train)\nX_val=StandardScaler().fit_transform(X_val)","dd6c018d":"np.mean(X_train),np.std(X_train),np.mean(X_val),np.std(X_val)","a7a5ff01":"column_name=['pixel'+str(i) for i in range(1,785)]\nX_train = pd.DataFrame(X_train,columns =column_name)\nX_val = pd.DataFrame(X_val,columns =column_name)","ed81f539":"pca = PCA(n_components=0.9,copy=True, whiten=False)\nX_train = pca.fit_transform(X_train)\nX_val = pca.transform(X_val)\nprint(pca.explained_variance_ratio_)","8644eb54":"var=np.cumsum(np.round(pca.explained_variance_ratio_, decimals=3)*100)\nfig = go.Figure(data=go.Scatter(x=list(range(1,len(var)+1)), y=var))\nfig.update_layout(title='PCA Variance Explained',\n                   xaxis_title='# Of Features',\n                   yaxis_title='% Variance Explained')\nfig.show()","708965db":"pcn=X_train.shape[1]","7c427376":"X_train = pd.DataFrame(X_train,columns =column_name[0:pcn])\nX_val = pd.DataFrame(X_val,columns =column_name[0:pcn])","874a17ad":"start_time = time.time()\nknn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train, Y_train.values.ravel())\ny_train_prd = knn.predict(X_train)\ny_val_prd = knn.predict(X_val)\nacc_train_knn=accuracy_score(Y_train,y_train_prd )\nacc_val_knn=accuracy_score(Y_val,y_val_prd)\nprint(\"accuracy on train set:{:.4f}\\naccuracy on validation set:{:.4f}\".format(acc_train_knn,\nacc_val_knn))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","9776a0ef":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on KNN\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","a86f0f83":"start_time = time.time()\nNB = GaussianNB()\nNB.fit(X_train, Y_train.values.ravel())\ny_train_prd = NB.predict(X_train)\ny_val_prd = NB.predict(X_val)\nacc_train_nb=accuracy_score(Y_train,y_train_prd )\nacc_val_nb=accuracy_score(Y_val,y_val_prd)\nprint(\"accuracy on train set:{:.4f}\\naccuracy on validation set:{:.4f}\".format(acc_train_nb,\nacc_val_nb))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","586923f6":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on Gaussian Naive Bayes\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","fc87d599":"start_time = time.time()\nlg = LogisticRegression(solver='liblinear')  \nlg.fit(X_train, Y_train.values.ravel())\ny_train_prd = lg.predict(X_train)\ny_val_prd = lg.predict(X_val)\nacc_train_lg=accuracy_score(Y_train,y_train_prd )\nacc_val_lg=accuracy_score(Y_val,y_val_prd)\nprint(\"accuracy on train set:{:.4f}\\naccuracy on validation set:{:.4f}\".format(acc_train_lg,\nacc_val_lg))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","68ae2c67":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on Logistic Regression\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","d08db32c":"start_time = time.time()\nrfc = RandomForestClassifier( random_state=0)\nrfc.fit(X_train, Y_train.values.ravel())\ny_train_prd = rfc.predict(X_train)\ny_val_prd = rfc.predict(X_val)\nacc_train_rfc=accuracy_score(Y_train,y_train_prd )\nacc_val_rfc=accuracy_score(Y_val,y_val_prd)\nprint(\"accuracy on train set:{:.4f}\\naccuracy on validation set:{:.4f}\".format(acc_train_rfc,\nacc_val_rfc))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","24f9aa31":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on Random Forest Classifier\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","f3272952":"start_time = time.time()\nsvc = svm.SVC(decision_function_shape='ovo')\nsvc.fit(X_train, Y_train.values.ravel())\ny_train_prd = svc.predict(X_train)\ny_val_prd = svc.predict(X_val)\nacc_train_svc=accuracy_score(Y_train,y_train_prd )\nacc_val_svc=accuracy_score(Y_val,y_val_prd)\nprint(\"accuracy on train set:{:.4f}\\naccuracy on validation set:{:.4f}\".format(acc_train_svc,\nacc_val_svc))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","1cf0e238":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on SVM Classifier\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","9f705fce":"start_time = time.time()\nxgb = XGBClassifier()\nxgb.fit(X_train, Y_train.values.ravel())\ny_train_prd = xgb.predict(X_train)\ny_val_prd = xgb.predict(X_val)\nacc_train_xgb=accuracy_score(Y_train,y_train_prd )\nacc_val_xgb=accuracy_score(Y_val,y_val_prd)\nprint(\"accuracy on train set:{:.4f}\\naccuracy on validation set:{:.4f}\".format(acc_train_xgb,\nacc_val_xgb))\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","7ef86288":"con_matrix = pd.crosstab(pd.Series(Y_val.values.flatten(), name='Actual' ),pd.Series(y_val_prd, name='Predicted'))\nplt.figure(figsize = (9,6))\nplt.title(\"Confusion Matrix on XGBoost Classifier\")\nsns.heatmap(con_matrix, cmap=\"Greys\", annot=True, fmt='g')\nplt.show()","56cdfe42":"acc_combine = {'Model':  ['KNN', 'Gaussian Naive Bayes','Logistic Regression','Random Forest Classifier','SVM Classifier','XGBoost'],\n        'Accuracy_Tra': [acc_train_knn, acc_train_nb,acc_train_lg,acc_train_rfc,acc_train_svc,acc_train_xgb],\n        'Accuracy_Val': [acc_val_knn, acc_val_nb,acc_val_lg,acc_val_rfc,acc_val_svc,acc_val_xgb]\n        }","3496cd19":"fig = go.Figure(data=[\n    go.Bar(name='train set', x=acc_combine['Model'], y=acc_combine['Accuracy_Tra'],text=np.round(acc_combine['Accuracy_Tra'],2),textposition='outside'),\n    go.Bar(name='validation set', x=acc_combine['Model'], y=acc_combine['Accuracy_Val'],text=np.round(acc_combine['Accuracy_Val'],2),textposition='outside')\n])\n\nfig.update_layout(barmode='group',title_text='Accuracy Comparison On Different Models',yaxis=dict(\n        title='Accuracy'))\nfig.show()","5c5bd2f2":"<a id='3.5'><\/a>\n## 3.5 SVM Classifier","db6564e3":"<a id='3.7'><\/a>\n## 3.7 Model Comparison","a73fb8a5":"<a id='3.4'><\/a>\n## 3.4  Random Forest Classifier","02fac93f":"<a id='3.6'><\/a>\n## 3.6 XGBoost","9c0f6ee8":"<a id='2'><\/a>\n# 2. Feature Engineer","f017049f":"<a id='1'><\/a>\n# 1. Initialization","ce0db857":"<a id='3.3'><\/a>\n## 3.3 Logistic Regression","b04dde23":"<a id='2.2'><\/a>\n## 2.2 Split training and valdiation set","e14f24fa":"<a id='3.1'><\/a>\n## 3.1 KNN","e278c98b":"<a id='2.1'><\/a>\n## 2.1 Check for null and missing values","4a9a7492":"<a id='3.2'><\/a>\n## 3.2 Gaussian Naive Bayes","1c30f369":"* [1.Initialization](#1)\n    - [1.1 Import package and load data](#1.1)\n    - [1.2 Seperate data and label](#1.2)\n    - [1.3 View image data](#1.3)\n* [2. Feature Engineer](#2)\n    - [2.1 Check for null and missing values](#2.1)\n    - [2.2 Split training and valdiation set](#2.2)\n    - [2.3 Standardizing](#2.3)\n    - [2.4 Dimensionality Reduction](#2.4)\n* [3.Evaluate the model](#3)\n    - [3.1 KNN](#3.1)\n    - [3.2 Gaussian Naive Bayes](#3.2)\n    - [3.3 Logistic Regression](#3.3)\n    - [3.4 Random Forest Classifier](#3.4)\n    - [3.5 SVM Classifier](#3.5)\n    - [3.6 XGBoost](#3.6)\n    - [3.7 Model Comparison](#3.7)","bcdbf91a":"<a id='1.1'><\/a>\n## 1.1 Import package and load data","3b264c38":"<a id='3'><\/a>\n# 3.Evaluate the model","73492722":"<a id='2.4'><\/a>\n## 2.4 Dimensionality Reduction","8685a239":"<a id='1.2'><\/a>\n## 1.2 Seperate data and label","77abdaa1":"<a id='2.3'><\/a>\n## 2.3 Standardizing","7cf941d5":"<a id='1.3'><\/a>\n## 1.3 View image data"}}