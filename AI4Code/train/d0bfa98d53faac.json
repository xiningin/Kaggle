{"cell_type":{"48147071":"code","e877d71c":"code","7fd78aaa":"code","9a2fde80":"code","1eb08feb":"code","cf8a0934":"code","969b0ae2":"code","e7b26ebe":"code","4079e681":"code","6569c022":"code","78105c2f":"code","c994d300":"code","514bae5a":"code","b4ce8a7a":"code","5ca4e51f":"code","676fb0af":"code","d113ecad":"code","5cfcbb5d":"code","dea60791":"code","19251752":"code","af7fa243":"code","a006b310":"code","69be21b1":"code","28b253f1":"code","2fed0c10":"code","a3cd4077":"code","38a5d6e1":"code","de9e0588":"code","ba34ac63":"code","359ba8e8":"code","c3e36a35":"code","3b8068ba":"code","e3a172c5":"code","37516f58":"code","9a8f3f7d":"code","a4e34c5a":"code","b23f6503":"code","c952b985":"code","4691eab0":"code","0966ce0a":"code","5a84ca8d":"code","ac8af3b4":"code","12e7f1f7":"code","28d004d1":"code","1c13f549":"code","68fbd182":"code","286e30e3":"code","81ab52bf":"markdown","c0078bd9":"markdown","86ba7dd6":"markdown","2db760c9":"markdown","468b1054":"markdown"},"source":{"48147071":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","e877d71c":"#import data\nstroke = pd.read_csv('..\/input\/healthcare-dataset-stroke-data\/train_2v.csv')\nstroke.head()","7fd78aaa":"stroke[('stroke')].value_counts()\n##dataset is very unbalanced and will affect the ML accuracy","9a2fde80":"shuffled_data = stroke.sample(frac=1,random_state=4)\nstroke_df = stroke.loc[stroke['stroke'] == 1]\nnon_stroke_df = stroke.loc[stroke['stroke'] == 0].sample(n= 3500,random_state= 101)\n# non-stroke sufferers were reduced to 3500 to balance the data set.","1eb08feb":"normalized_stroke = pd.concat([stroke_df, non_stroke_df])","cf8a0934":"sns.countplot('stroke', data= normalized_stroke, palette= \"colorblind\")\nplt.title('Stroke Analysis')\nplt.show()\n#Dataset split by stroke.","969b0ae2":"sns.countplot(x='stroke', hue = 'gender', data = normalized_stroke, palette = \"Set1\")\nplt.title('Gender Split')\nplt.show()\n#Split by gender","e7b26ebe":"sns.violinplot(x = 'stroke', y = 'age', hue = \"gender\", data=normalized_stroke, palette= \"Set1\")\n#Split by gender and age","4079e681":"plt.figure(figsize=(8,7))\nsns.boxplot(x = 'stroke', y = 'bmi', hue = 'gender', data= normalized_stroke, palette= \"winter\")\nplt.title('Subject BMIs')\nplt.show()\n#The mean BMI across genders was checked.","6569c022":"sns.heatmap(normalized_stroke.isnull(), yticklabels=False, cbar=False, cmap='viridis')","78105c2f":"def input_bmi(cols):\n    bmi = cols[0]\n    stroke = cols [1]\n   \n    \n    if pd.isnull(bmi):\n        return 28.6\n    else:\n        return bmi\n# Ifelse used to fill out missing BMI using the mean BMI 28.6","c994d300":"normalized_stroke['bmi'] = stroke[['bmi', 'stroke']].apply(input_bmi, axis=1)","514bae5a":"sns.heatmap(normalized_stroke.isnull(), yticklabels=False, cbar=False, cmap='viridis')\n# Heatmap showing totall filled BMI numbers.","b4ce8a7a":"sns.countplot(x='stroke', hue = 'Residence_type', data =normalized_stroke, palette = 'GnBu')\nplt.title('Residence Type')\nplt.show()\n# Count plot to check the occurence of stroke across rural and urban areas","5ca4e51f":"sns.countplot(x='ever_married', hue = 'stroke', data = normalized_stroke)\nplt.title('Marital Status')\nplt.show()\n# Count plot to check the occurence of stroke by marital status","676fb0af":"sns.countplot(x='hypertension', hue = 'stroke', data = normalized_stroke)\nplt.title('Hypertension Check')\nplt.show()\n# Count plot to check subjects with\/without hypertension and stroke","d113ecad":"sns.countplot(x='heart_disease', hue = 'stroke', data = normalized_stroke)\nplt.title('Heart Condition')\nplt.show()\n# Count plot to check subjects with\/without heart disease and stroke","5cfcbb5d":"sns.countplot(x='work_type', hue = 'stroke', data = normalized_stroke)\nplt.title('Occupation')\nplt.show()\n# Count plot to check the occurence of stroke by occupation","dea60791":"sns.barplot(x='stroke', y = 'avg_glucose_level', data = normalized_stroke)\nplt.title('Blood Glucose Level')\nplt.show()\n# Count plot to check subjects with\/without blood sugar and stroke","19251752":"residence = pd.get_dummies(normalized_stroke['Residence_type'])\nresidence.head()","af7fa243":"residence = pd.get_dummies(normalized_stroke[\"Residence_type\"], drop_first= True)","a006b310":"normalized_stroke.drop([\"Residence_type\"], axis = 1, inplace = True)","69be21b1":"normalized_stroke = pd.concat([normalized_stroke, residence], axis = 1)","28b253f1":"normalized_stroke.head()\n#Checking feature engineering for Residence_type","2fed0c10":"normalized_stroke.rename(columns={'Urban':'Residence_type'}, \n                 inplace=True)","a3cd4077":"sex = pd.get_dummies(normalized_stroke['gender'])\nsex = pd.get_dummies(normalized_stroke[\"gender\"], drop_first= True)\nnormalized_stroke.drop([\"gender\"], axis = 1, inplace = True)\nnormalized_stroke = pd.concat([normalized_stroke, sex], axis = 1)","38a5d6e1":"marital_status = pd.get_dummies(normalized_stroke['ever_married'])","de9e0588":"marital_status = pd.get_dummies(normalized_stroke[\"ever_married\"], drop_first= True)","ba34ac63":"normalized_stroke.drop([\"ever_married\", \"smoking_status\"], axis = 1, inplace = True)","359ba8e8":"normalized_stroke = pd.concat([normalized_stroke, marital_status], axis = 1)","c3e36a35":"normalized_stroke.rename(columns={'Yes':'marital_status'}, \n                 inplace=True)","3b8068ba":"occupation = pd.get_dummies(normalized_stroke['work_type'])","e3a172c5":"normalized_stroke.drop([\"work_type\"], axis = 1, inplace = True)","37516f58":"normalized_stroke = pd.concat([normalized_stroke, occupation], axis = 1)","9a8f3f7d":"normalized_stroke.drop([\"avg_glucose_level\"], axis = 1, inplace = True)","a4e34c5a":"normalized_stroke.head()\n# Dataset fully engineered to accurately represent the underlying structure of the data and \n# to create the best model.","b23f6503":"normalized_stroke.drop([\"id\"], axis = 1, inplace = True)","c952b985":"from sklearn.model_selection import train_test_split","4691eab0":"X = normalized_stroke.drop('stroke', axis = 1)\ny = normalized_stroke['stroke']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=101)\nfrom sklearn.linear_model import LogisticRegression","0966ce0a":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","5a84ca8d":"predictions = logmodel.predict(X_test)","ac8af3b4":"from sklearn.metrics import classification_report","12e7f1f7":"print(classification_report(y_test,predictions))","28d004d1":"logmodel.score(X_test, y_test)\n#ML Accuracy: 84%. Prediction could improve with a more balanced dataset.","1c13f549":"from sklearn.metrics import confusion_matrix","68fbd182":"print(confusion_matrix(y_test,predictions))","286e30e3":"sns.heatmap(confusion_matrix(y_test,predictions), annot= True, cmap = 'viridis', fmt=\"2\")\nplt.title('Confusion Matrix')\nplt.show()","81ab52bf":"**EXPLORATORY ANALYSIS**","c0078bd9":"**FEATURE ENGINEERING**","86ba7dd6":"**Evaluation**\n\nChecking for precision, recall, f1-score, classification report","2db760c9":"**DATA UNDERSAMPLING PROCESS**\n\nWith data undersampling I sought to randomly reduce the larger category (no stroke column(42,617))","468b1054":"**BUILDING A LOGISTIC REGRESSION MODEL**"}}