{"cell_type":{"05e6269a":"code","e2ceb594":"code","9c73e69f":"code","80cdb076":"code","19d8070a":"code","23e33040":"code","cf8c1cd1":"code","80bab015":"code","a3f4537a":"code","afff86cb":"code","30bacebc":"code","a6cb9497":"code","82364d8b":"code","39b6804b":"code","0397ec69":"code","6132e9e9":"code","1f6309df":"code","4d7af20a":"code","6aa86fc3":"code","84054849":"code","d8a043a5":"code","d225c50d":"code","8c9569f9":"code","194114a6":"code","b5697b50":"code","7c2d0466":"code","f367be52":"code","18281c80":"code","968e0358":"code","275a3f33":"code","7f1ab705":"code","216d12a3":"code","7ffe28ff":"code","40f57d65":"code","e2519724":"code","384860ff":"markdown","e3a92ac7":"markdown","08205fdb":"markdown","528b43ea":"markdown","997757b2":"markdown","74e007c5":"markdown","ae7ab535":"markdown","72738e3e":"markdown","ac62445d":"markdown","84fd5fb0":"markdown","91a08c1c":"markdown","c00fe6c9":"markdown","85128631":"markdown","d94f9ff6":"markdown","5642c1dd":"markdown","e4c0b835":"markdown","9188935f":"markdown","5c0e781c":"markdown","eb6a7447":"markdown","dbcd261a":"markdown","141125c0":"markdown"},"source":{"05e6269a":"from spacy.lang.en import English\nimport pandas as pd\nimport numpy as np\nimport spacy\nfrom spacy.lemmatizer import Lemmatizer\nfrom spacy import displacy\nfrom IPython.display import clear_output\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import metrics\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport copy","e2ceb594":"data=pd.read_csv('..\/input\/mind-news-dataset\/news.tsv',header=None,sep='\\t')\ndata.columns=['News ID',\n\"Category\",\n\"SubCategory\",\n\"Title\",\n\"Abstract\",\n\"URL\",\n\"Title Entities\",\n\"Abstract Entities \"]\n# Copying the dataset\ndf=copy.deepcopy(data)","9c73e69f":"data.head()","80cdb076":"nlp = English()\ntexts=data['Title'].values\n\n#  \"nlp\" Object is used to create documents with linguistic annotations.\nend_text=[]\n# Create list of word tokens\nfor text in texts:\n    my_doc = nlp(text)\n    token_list = []\n    for token in my_doc:\n        token_list.append(token.text)\n    end_text.append(token_list)\ndata['Title']=end_text\n","19d8070a":"# Having a look at the tokenized Titles\ndata['Title']","23e33040":"spacy_stopwords = spacy.lang.en.stop_words.STOP_WORDS","cf8c1cd1":"# How many stopwords are there??\nlen(spacy_stopwords)","80bab015":"final_text=[]\ntexts=data['Title'].values\nfor text in texts:\n    sentence=[]\n    for i in text:\n        if i.lower() in spacy_stopwords:\n            continue\n        else:\n            sentence.append(i)\n    final_text.append(sentence)\ndata['Title']=final_text","a3f4537a":"# You can clearly see the difference between the precious and the present Title Column\ndata['Title']","afff86cb":"# Making a function to lemmatize all the words\nlemmatizer = WordNetLemmatizer() \ndef lemmatize_all(data,name):\n    arr=data[name]\n    a=[]\n    for i in arr:\n        b=[]\n        for j in i:\n            x=lemmatizer.lemmatize(j,pos='a')\n            x=lemmatizer.lemmatize(x)\n            b.append(x)\n        a.append(b)\n    data[name]=a\n","30bacebc":"# Titles after lemmatizing \nlemmatize_all(data,'Title')\ndata['Title']","a6cb9497":"nlp = spacy.load('en')\nnews=nlp(df['Title'][51278])\nentities=[(i, i.label_, i.label) for i in news.ents]\nentities","82364d8b":"displacy.render(news, style = \"ent\",jupyter = True)\n","39b6804b":"news=df['Title'][51278]\nprint('The news headline is :',news)\nnews=nlp(news)\ndisplacy.render(news, style=\"dep\", jupyter= True)\n","0397ec69":"def make_to_sentence(data,name):\n    x=[]\n    for i in data[name].values:\n        p=''\n        for j in i:\n            p+=j.lower()+' '\n        x.append(p)\n    data[name]=x","6132e9e9":"make_to_sentence(data,'Title')","1f6309df":"X=data['Title'].values\ny=data['Category'].values","4d7af20a":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,shuffle=True, random_state=42)","6aa86fc3":"classifier = LogisticRegression()\n","84054849":"tfidf_vector = TfidfVectorizer()","d8a043a5":"pipe = Pipeline([('vectorizer', tfidf_vector),\n                 ('classifier', classifier)])","d225c50d":"pipe.fit(X_train,y_train)","8c9569f9":"# Checking The score of the model\npredicted = pipe.predict(X_test)\n\n# Model Accuracy\nprint(\"Logistic Regression Accuracy:\",metrics.accuracy_score(y_test, predicted))\nprint(\"Logistic Regression Precision:\",metrics.precision_score(y_test, predicted,average='weighted'))\nprint(\"Logistic Regression Recall:\",metrics.recall_score(y_test, predicted,average='weighted'))","194114a6":"xgb=XGBClassifier()","b5697b50":"pipe_xgb = Pipeline([('vectorizer', tfidf_vector),\n                 ('classifier', xgb)])","7c2d0466":"pipe_xgb.fit(X_train,y_train)","f367be52":"# Checking The score of the model\npredicted = pipe_xgb.predict(X_test)\n\n# Model Accuracy\nprint(\"XGBClassifier Accuracy:\",metrics.accuracy_score(y_test, predicted))\nprint(\"XGBClassifier Precision:\",metrics.precision_score(y_test, predicted,average='weighted'))\nprint(\"XGBClassifier Recall:\",metrics.recall_score(y_test, predicted,average='weighted'))","18281c80":"lgbm=LGBMClassifier()","968e0358":"pipe_lgb = Pipeline([('vectorizer', tfidf_vector),\n                 ('classifier', lgbm)])","275a3f33":"pipe_lgb.fit(X_train,y_train)","7f1ab705":"# Checking The score of the model\npredicted = pipe_lgb.predict(X_test)\n\n# Model Accuracy\nprint(\"LGBMClassifer Accuracy:\",metrics.accuracy_score(y_test, predicted))\nprint(\"LGBMClassifer Precision:\",metrics.precision_score(y_test, predicted,average='weighted'))\nprint(\"LGBMClassifer Recall:\",metrics.recall_score(y_test, predicted,average='weighted'))","216d12a3":"rf=RandomForestClassifier()","7ffe28ff":"pipe_rf = Pipeline([('vectorizer', tfidf_vector),\n                 ('classifier', rf)])","40f57d65":"pipe_rf.fit(X_train,y_train)","e2519724":"# Checking The score of the model\npredicted = pipe_rf.predict(X_test)\n\n# Model Accuracy\nprint(\"Random Forest Accuracy:\",metrics.accuracy_score(y_test, predicted))\nprint(\"Random Forest Precision:\",metrics.precision_score(y_test, predicted,average='weighted'))\nprint(\"Random Forest Recall:\",metrics.recall_score(y_test, predicted,average='weighted'))","384860ff":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMWFhUXFxcXFRcXFxgXFxcXFxcXFxUYFxUYHSggGBolHRUXITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGi0mHyUvLS0tLS0tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAKgBLAMBIgACEQEDEQH\/xAAcAAABBQEBAQAAAAAAAAAAAAACAQMEBQYABwj\/xABCEAABAwIDBAcFBQYGAgMAAAABAAIDBBEFEiEGMUFREyJhcYGRoQdyscHwMkJSYtEUI4KSovEVM0NTwuGDshZjc\/\/EABoBAAIDAQEAAAAAAAAAAAAAAAECAAMEBQb\/xAAuEQACAgEEAQEGBQUAAAAAAAAAAQIRAwQSITFBUQUTIkJhcTKBkbHRFCNSofD\/2gAMAwEAAhEDEQA\/APQHOTYC4x35pCDz7\/7reZmF0d0nRLmhx3Jwb0bBSYPQ8lw3J9qbc1CyVXQDB9fqnWMQNYVIYxBsKQIauLbo3hK1LYROjuibTpyFvYpGRYtbq\/cx47fRZix73z0QpIeSEN5qxDE1LFbhok0uvjm+GXEv3+38Ay4nDnwRmssi6NJUSBupIHeQFFdjMbRvLvdF\/U2C1ZM0Ifikl+ZXCMp8JMmFi50appdpB92I\/wARt6C6hTbQzHcGt7hc+qyS9pYI9O\/sjTHR5X4o1AYm3vYz7Tmt7yB8Vi5cSmdvkdbsOUeQURwuVln7XXyx\/UvjoH8zNhPjlO37+bsaCfXcoE20zPuxuPeQPhdZ\/o0hjWaftLO+ml9l\/Nl0dHiXfJcnaZx\/02jxJRR7Qu4sb4EhUJjSAKr+t1H+Q\/8ATYfQ11Ji7XkNIyk7tdD2KblusO2QrX4fU54g69juPePq\/iuv7O1cstwn2c\/WYFjqUeh97dEOQFE92ijZ11DJuQ70IRtiHemHzaeKJxI+vkpTJuiOujSZFFdM7fuXCU9qbawe8iOujKodraroKWaW+rWOt7xFm+pCvOlK889rta4UzIRq6WQCw3kN13e9kUbcYtkVSaR55i37rDqSLjM+WpeONh+5i8LMefFNCK1HBGN88zpD7rLRM9TIUe3rwKswtN208cdO3\/xMAf8A1l6shTXrooOFPFHGeWYNu\/8Are7yWCKtmxvg9E2dpLNaANwC0sUYsqrChZuqtWuXSiqRilJWWrL2BCMhOxDRIRyCpsvobY0cd6IAX0Rhg5JLIWShdULmIgnFCDbWp0MSxsRPna3Q3J5AKrJljBXJ0FRb6AypGt1QSVZ+623fqo7nP4uPhp8Fiye0sUerZYtPN\/QtWZWi7iB3m3omZcTjbuu49g+Zsq4Ackluxef1Gonlm5M3Y8MYqiRJizz9hgHvEn0FlCmnndoXkdjbN+Gqfv2JNVR8Rakl4K11KeK4UysHApGsVsfqBtkD9m7EhogrTo12RWpFe9lQcPCD\/DVddGuEaG1MPvGUrsPTT6A8loOjXdGjsRPesy76Qpl1OVqpKcFQ30aXZQyyWZ5lOVe4CMuZp3GxHwPy8k7HRJ+KEtNwtOkn7vNGX\/clOo+PG0SXtvpbRAIgNydiddK9i9TZykuLI4aP0TxCbY26etoowrkYc1DlAUjIm3AIojQyXAcF5ftRO2bGadrv8umYZ5OQEYMzr8haNg8V6bU6C\/w\/ReH1FbduK1l9XltLEeBEj+tbt6KH+pJmdQ+42LmRQYGP2iuY+T70pmk5WaTLJ6ArUbARmaaaofve4nxccx\/9vRZnAOpBVzcohC33p3ZT\/Q169D9nlDlgZpq7Xz1VOFXIum6RsaaKzbceCkWTscWm5OCJdHcjnOLuy4CUBAxqPKsrNiDG9A4JTzQkXQQWwmJUgRAqAscY5BHJmc5pGosR2g3\/AEQl6SN1pWHg4Fp+I9Qs2rhuxsaEqkSOjSOplObGlyLz042zbFlf+zBR6+SOGN8shsxjS5xsTYDUmw1VvkVBtfVhsJga3pJqgOjjj94ZXPdya0G90ix2x1K2RdnsdgrM\/Qh\/Uyk5220dctINyNbK5\/Z1QezGlbHRmLLlljlkZPzMjXb+7LlstdkRyY0pNLojkQP2ZL+zKdkXZEm0m4g\/s6F1OrEMXZUUmhW7MdjOISRVtHELdFP0rX3AvnawOjseGqvxGqb2iUxFMyoaDmppoptOLQ7K\/wAMrifBStp8ZbS0r6m2awGRt7BxcQG6jhrfuBV6juSoDLDo1xjSYc97oo3SNDXuY1zmg3DXEAkX7FJDUNtC2RzEgdCpeVIQooksiiFEIk\/ZcAjtJZGijsklUkjrHt1+X6KLO1eiwT3wTMU+LQjRogc7kl1QlXiXwOMCCoOlkbHJuSQcFF2Rvgze1mJdDSTSfebG4jeNbWb6kLxPGP3WHUkPGZ8tS8cbX6GHwsx58V6N7Yqy1MyFmrpZGttxs3rf+2XzXm+37wKswtN200cVM3\/xMAf4586q1D5SLMK4sHoSKOniG+omfKfdZaFnr0hXsOzdFZrRyAXmsdLmr4od4poo4zb8TW3f\/XI7yXseCwWbdTAvI2T0JWWyea1OADl6JsC+71WgoqiSx3LROJhj0YkCWSJGQ+Ny6yaY+6IlJQ1hDv1RNQAI2FRksQhPshB63LUd43JuOK57FOYFzPaGp2R93Ht\/sW4Me6W59EgHilQUZ6tuVx5bvSyjYziradmYskkcTZjI2FznO4DQWHeVzYrckzTXNA4xicdPGZJDYaBoG97j9lrRxJWY2K6SWpqpqltqhpY0NP8Apxubna1vn9XKtMIweWWUVdaB0o\/yYQbspweR+9Jzd\/1bp29DiTH7m1MRYeXSRatv2ltgnSSHT8IGli6HEZG7m1MYkA\/+yLqvt\/CQVpLKh2pbldTVH+1MA4\/kl6jvXKr5I0BvpiWSIkiRoAiSyUFZys2piMNW6F13092uu2wD9Q0i\/wBoXB8lFGwpNlziVG2aKSJ32ZGOYe5wI+a83ilNUzDqJ4uY5Xidp5U2gB5ggrUbCYvPMyWKpIM0L7EgAXa4XYbDTn4WWIjqZf8AGal9LkDwXhsbxdshbbpGh1xke7K4g81bCNNr0HS7R6y9iBQ8Ax2OqYS0FkjdJYn6PjdxDhy7UzhmIOfU1UDrfunRlnuPYD6EHzSK\/JW4ssrLgEZCFEUQhIAlKUKEAm0se34\/QUaZuu9TJG3BHZ68FCc64uutoJ3Fr0M2XsaKQu7EDxvQ3OnJdJIzuQ80iyjveLp0MUWp0umiuQSbo8y2ombNjNMx2sdO0zydgjBldfstEweK87wQGpr2Ok+\/KZZO4EyyegctFU1t\/wDFqznlpY+R6V+V1u3o4T\/Ms\/s71Iqub8MPRN96dwZp\/AJFiyu5NmzGqijVez5hmnmqHb3vJ8yXf8vRew0TeqF577NqHJTtO7Nr56r0qkaLWWnGqiVTfIUkVx3JgDv81PsAoEjNf0TxK5quRwhNudYhDM8iyPogd5VtGXdzSH4XgqQ63NVreqdNyfa\/n9eKrlAthkXTJYPoiib9BBCCRvUunjtqd\/BY9RmWGDky+EXNpIdY2ycahRALzM5ynJyl2zoxioqkLSmz3N52cPgfkpN1BcbSMPPqnx3etlOVmCVxr0BNc2cqPbKE9AJWC74Htmb\/AAmzv6SfJXiGRgIII0IIPcdCrrFTp2V+JQippXhv+pHdveRmafOyrf8A5GW0lPI1meWYtjYy9ryah1zwALSpGyUlonQnfBI6PwBu0+R9Fk3DocTgpiOoKiSaPlaZm4dzgUUixLtehrNnscdO6WKWPop4XWewHM0tOrXsPFpCgYziM8tcyhgeIm9EZppcoe4NvlDWB2gJuNSOPZqm1Y\/Z6inrho0HoKjkY3nqk+67j2hNPeIMYL5CGsnpw2N5+zmY5t25uGgv4hSiJeUQfZXUFjKijcbup53Ae448P4mn+ZY7pTG6vadGz9Ll7XRTNdb+Uu81oMBpJRLLiUDXPBqJmvjG+SAkHMwHe4G58OxIzZySrop3Njc2VtVLJCHjKXMcGZm9bgbDsu1Pxdjqk2Xl+gxCCYaR1cLY3cuka0GM95GUean1uycf7x8PUmdK2cPcSQJGnzDTc3HamJ8Gmmw2CMty1ETY3MzEdV8fV1cL72381qY72GbfYX5X4qpsrcvQqMW2dineJQXRTtFmzRHK+3J3B7exwKiYPgE8VU+olqGyZ4wwgR5CS0jK42cRewtorXFcWipwwzOLQ94jacrnddwJAOUG246lRYtoI3VU1LlfmhjbI99hls4A2GtybOHDmhyBN0WzmppzUxg2KxVULZ4STG++UkFp0JBu06jUKYQh0K0R7Lk6WICEwpwUGRtiR238Dr81OUStb1geYI+vNbdFKslepTnXw2Qy\/wBFzRolO9cL6fJdoxJiN0VNtZXiCmml4sjcR3gHKPOyupHLzv2zV+SjEYOsr2tt2N659WjzRuk2Olbo80xb91hlLFxnlmqXX32baCLw6sh8U02G1FBGN9RO6Q+7GBEy\/wDE6TyR7fvAqWwtILaaGGnaQbgljAXnT87nq0bSXr6en4U8MTHcs+XPJ\/XIfJYUrZtPT9mKTKxgG4ALWRnnoqrBorBW4C3eDN5OedbeqbfECbpyS1xfzTT9\/wD2ogMakvySuGiIDtQyNKtRjfqN5Lp+GPs+u9MM0U+kaXfXqhle2NvoGPl\/UkUzFKSAJQvJavUPNO\/Hg7mHHsj9QkQQBGFlLBiuHVuN418lOa64BHEA+ajTNu0osMdeMD8JI\/T0KOB1ka9USX4bJC4oki1lRn4f3WIPbwqIg8dr49Db+E3VV7QsPeHU1ZExz3wStzNYMziwuB3AcCD\/ADK22vicI2VLBd9O8SWG8s3SDy+CuqWobIxsjDdrgHNPMHUIrjksuqZHxnDm1EEkLtz2kdx3tPgQD4Kr2eY6WAQVdOc0Qax3SNDmPIuAWk\/a0AN+1aErroCJ8UNxQtY0NY0NaNA1oAA7gNyO6qsW2jp6d4ZK8hxGY2a5wa29szy0HK2\/EqzbICA4EEEXBB0IO435KEpi3XLHbZB1XPFh7HWDmOmmdyaLiMfzfJZXGMRlmw2CkJcJxMaeQXNyY9GAnjfM3xaioWOoWbjb7D+mopWgEuYBIy2\/MzredgR4qjw+sBrqSq+7W0xifyErLEg+IDVo9iq\/p6GB5NzkyOJ3ks6pv32v4rIOw5zY6mkZfpaSYVVLpvYetlbzsD52RXoGPoXfs3GSGenP+hUSMHu30+BWvWK2Sr2OrpnM0bVQxzgcnN6kje8Oz+S2t0klyLPsSyEtR2SKJCMbypiujuwnlr5b\/S6lFKG30V+N7ZKRXJWqKUfX90jtO1G0WJbxBI8tELmDivQJ3yc5egMhFuxeU+2mpZ0LG21zjLzGhufLTxXqktgvHvbfKLwN5l7vINHzQn+Bl2P8R5Ze1rL0X2e0z3zPnkcXvdqSd5J3nvXn9JAXva0byV7TsXhJjj3b1mxK5GmT4N1h4s0KYD9fRUenFmp8ha2Z7CcLqM866hPAHjYefwTUt77yoiSHo2IZGXSgm6dYE1lFKqI7IbK0pYco7UMFPrc8Nykri+09Zu\/tR\/P+DVpNPT3v8hEqRKAuKdA5EEiIIECI0UfDnWe9vPUeGh+SkqDfLK08zY+KS9s4sZK00WhC5EhXQM4jhcWQxRNaA1oDQNwAAA7gEa5AJyzG0FdKyvoI2yFsUplEjRbrFrQWg3F+K06y+31I4wsqGfbppGzC34QeuO7cfAorsMexnZumbUyV8kguJJXU+v8AtsaGkDle48gsxXzvbQxxTFz20tWIqhjTlzxgksuToBvAubblp\/ZlUdJSvf8AinkcfENPzTtPGIsUmYRdtRA2TUaZmHKR5AnxTdMsvlmf9lkJ6erfk6hyiN2bOGNzOPRB9yHWGXUfhWyn2bpnztqTF+9aQ4OBIBcNzi0GxParSOMAWaABwAFh5BGErduxJSt2jNYFh0tJPLEGF1PK8yRuBb+6cR1muBINtABa\/DttPrcFD6mKpa8skjBa6wBEkZ+46+7XW6tSo89bG17I3SMa998jC4Bz7Ak5Wk3OgO5Bg3NlLW4G2OeCenjDS2RwlDRa7JRZzrdhAK0CZjqLyOZkeMoBzltmOvwa6+pHHRJRVDn5s0T47OLW5iw5wNzxkcbA8AbHsChG2PFJdEQhTpCNigJwIGhGFYkKVGItyy34OAPiND8kD1KxyK7A78JB8DofkobZARp5rs6aW7EvpwYMi2zZFqAF4h7ZakOqo2D7rC4\/xOt\/xXt1VY9\/1f4L579p5JxCS5BFmZbcBl3Htvc+IV2bjGHBzMDYHDTJNmto3Re44NT2G4WXn3s7wwxxNcRq7f3nt7rL1SgiAA5pcUajZbOduh4N5InaWRHfZKQNyZipDbrIMn1\/ZPW7u3+6Qk\/i+aKC0NMGm9TaaMk79OKha37Oaq8U2lkpJGl0RfAdHFv22n8TeDh+X151auU4424dlWCKlJJmuSqLhmIxVEYlheHsPEcDxBG9p7DqpS8o7vk66OXLlyUItkQCQBKoAIKBiI4qeFGrWaKrKriPB8k+J+ZoPMA+aQqLhMl47fhJHzHxUwroY57oplElTaESLkqIBFxaCCDrfSy5KoQj0NDHCzJExsbbk5Wiwud5sqPHerXULufTMPaC1tvitHdZ3Gxmr6Jv4RM8+TQPgiNHs0YXEpCuQFOTbomlwcWjMLgOsLgHfY7wnEhChDkl0qQhMkAVJZKFwTpCsWyUBJZEEwBuoizNc3mCFm6d2m46bxyWme8AXJAHM6LNyPHSPym4JuCO3UroaGbTaM2ohdManaf0Xke1ey5lremvoct221uNBrysvY3tUMYQwuLjqSt+VblRVp3tbZS4Dh+VrRbcFp422CSnpcg0T1lPFDvl2IQlDUj0ROmiAyBIQGInmlI+tEgHb8UURnOiTU9IHCxAI4qU0pVN3gq2LsweJYJPRyGooX5T95m9jxvs9vHv38iFpNlttYqoiJ46Go4xOOjuZjd97u3j1VjMVkNpdm2TDMxuRwNwRpqNxB4G6xaj2fHKrj2Ww1ex1M9GRALzTAts56QiGvDnxjRs4F3t5dI0fbH5hr3716RS1DJGNkjc17HC7XNN2kcwQuBlwyxOpI6EZKStDiVcuVQwoKaqBonAhkGiSXQV2Q8IfZ7m8xfy\/urUqjY\/LM08L289Pmr6yu0buFegMy+KwbJESFaioh4jWGGzy0mP75Au5n5rcW8+W9SoJmvAc1wc07iCCD4hESqifZ9ly6F8kDibnoiA1x5ujILT5IB4LdzgBc6AakncBxN1nMGBqKqSsseiawQ0\/wCZt7vkHYTuPEKYcEzi088kzeLDkYw+82NoLu4kjsVq1oAsAABoANwA4AcFA3QV0l0JKUKIUW64pFyZIAqWyanqGRjNI9rBzc4NHmVnsQ28o4rgPdKeUbbj+Z1h5Epugcs01ktl5hiXtLldpDE1g5uJe7y0A9VlsSx+pnv0sz3D8N7N\/lbYeiKYdjPX8T2qo4Lh8zS4fdZ13eIbe3jZZHFPaWTpTxAD8chufBjdPUrzguQscnVEUDcUmMyzOzSyFx4cAO5o0HktFTTi4t4rE4K7ctZT7hzXT07W0z5I1IvC+\/JGSbaKNSv0Tj1sXJkfDY808EV1Gidru17067kg1TDGVodugaNOKRoTsYSlq5EbF2oXN8fEJ1wTIcOdlEM0G0JHlKAgeTwUEdJEeQ3F\/RMvFzbyv2I5nm1vWyZExAv2rTBMw5JK6HarDI5m2e0a7tyyH7FVYbIZKU5oibvhdfI7mR+B35h433LbU8oI1Phron5Iw4WOoPNZM+COTiSNeDK4Ljoa2Z2pgrGnIS2Rv24naPb2j8TfzDxsdFeLzjHNlLkTQOLJGm7S02cD2EKTs\/t05jhBiAyP3NntZjv\/ANB9w9u73V5\/U6KWJ8dHTx5IzVo34XOCEOvqNRvCIrAywpsRbxV9TyZmNdzAKp8RbopWBS3it+EkfMfFTSusjj6j5VcEyeUiJCV0GZhEhSlVtZjlPH9uVt+QOY+TbpJSS7Yyi30ixuuWTrNuYm\/5cbndriGj5lUNbtpUP+yWxj8oufN11nlqsa+pojpMkvFHpLyALkgDmVU1m0lNHvlBPJnWPmNAvLqvEZJDd73O94k\/HcopeVTLVv5UaI6FfMzdYp7Q2RtLmRmw1u82\/pbe\/msPUe0Cvn16Xomm9mxNDbDh1zd1+4rOYrUmV+Rp6jTr+Z36BFBFYW3rZiUttzfL\/wBFM4Q3VFEyWpe85nuc53NxLj5nVNucjggcdwKnU+ESO4fFWxhJ9ID2pclW5E0LTUuyxcdVd0mygFrhaY6abKHngjAmmcdwTsGFSOOgK9LGz7WncLJ+DDmjgtmPRccsy5NWr4Rk8Kwp4te60kNG6w9f7q3jp2BOdGOC0wxqHBVLJuIFPFaw81NN7WQyWunctxorijuwYDruCcNr7kDRp9fFFfsSseKpBEpU2SAuzIFiOe5Mm3NOXUcyWTIEhxpSPJSLk5mfQ1mA8UO\/j4XXLlelwZHLmh6AaqQ09q5cqZ9miHQTXc1VY7gMdQ0gtF+a5cqZRT4ZfCTXRkqHEavCnZbGal\/2z9pg5xO4e6dO7evSMDxyCrj6SB4cNzhucw\/he3e0\/QXLlwtdp4Qdo6WKblG2O1rdFAwetbG94ebAi\/iP7rly4rm4TUkbMcd8XFg4ntjFH9ljnnwaPM6+izVbt3O77AZGOwZnebtPRcuQlqckvP6GvHpcSXRRVmMzS\/5kjndhJt\/LuUIylcuVLV8s0xilwgblEyInglXIMYm02DyO4KLtHT9CGwt1leL6fcZuzHkTuHjySLls0WJZMqUjDqM8oppFfh+zrtLiwWko9lgLXSrl6jHpodnFnnn0aGiwFgG5W0NAxvBcuWhRS6KXNtWE2AX4KQyNcuTMric+yivcLrlyeCK8rCaeO\/yTl1y5R9jQ6GJSLp+2i5ciyQ8jRPkiLrBcuUrkKfFggowVy5BjxGpXpskLlyiBZ\/\/Z)","e3a92ac7":"# Importing The Dataset","08205fdb":"# Pipeline using RandomForestClassifier","528b43ea":"# Spacy Also Helps Us Know The Dependency Between The Words","997757b2":"# Making XGBClassifier Pipeline","74e007c5":"# Having  a look at the data","ae7ab535":"# Entity Detection Using Spacy","72738e3e":"# Well we got the best accuracy using Logistic Regression :)","ac62445d":"# Importing The Packages","84fd5fb0":"Most text data that we work with is going to contain a lot of words that aren\u2019t actually useful to us. These words, called stopwords, are useful in human speech, but they don\u2019t have much to contribute to data analysis. Removing stopwords helps us eliminate noise and distraction from our text data, and also speeds up the time analysis takes (since there are fewer words to process).","91a08c1c":"# MIND Data Analysis Using Spacy","c00fe6c9":"# Removing StopWords From The Title","85128631":"Lemmatization is a way of dealing with the fact that while words like connect, connection, connecting, connected, etc. aren\u2019t exactly the same, they all have the same essential meaning: connect. The differences in spelling have grammatical functions in spoken language, but for machine processing, those differences can be confusing, so we need a way to change all the words that are forms of the word connect into the word connect itself.","d94f9ff6":"# Making Classification Pipeline","5642c1dd":"# Lemmatizing The Words ","e4c0b835":"# Tokenizing The Data Using Spacy","9188935f":"# Thank you :)","5c0e781c":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAaYAAAB3CAMAAAB\/uhQPAAAAsVBMVEX\/\/\/8ubKQNYJ7m6\/IraqMWYp\/p7vTf5u4YY58laKIgZqHZ4uzI1uRBdqphjbjT3uqVrcr1+PscSpIxcKe3wNVeeauyvdUlT5QvVZd1msBIZ6Hx9fmIp8fFzuAdS5JXhrOpvtVNf6+ettC3ydwAOYoORI9rkrpEeqyww9h+oMMAPoyKqMdeirXBy95Tcaens86PocM0WpoAV5lzibWImr9pga8\/YZ2Ln8SerMoAMogAUpd\/PlFxAAAUBUlEQVR4nO1de1vivBIvpaUXQCiowBaQi0VYdV11X8+e8\/0\/2OklvWUm6YRC8Xl1\/lif1TZJ80smc4+mfdM3fdO\/ktrPi\/jnYtGL\/5NQu\/v87IW\/tZ7b4b\/+86Ib\/3h5WXiXHOzXpdv7eyv84X38\/BX9ZxTTz5eXn\/cRMu\/3f8J\/F\/f3t5r2Mhktl8Hr4MID\/pp0PZr8jn7+mNyEMI2mywSmxWi0iH\/7T\/zMaKBdB9PJKJhMJ53LDvhrUgjTj+gng2n5sngOyRoEo+vwt8tp9Mfb0cTSfkyXv9vWzWT097ID\/pp0PZoG4amUwjTqJr\/2fkabzBpNp+HmeZ9MPS2IN5Y\/iX98U8MUwjSJzp8UpvTomUzeNa03mo7Ck+tm8qFpP6NfaN5r8OuCo\/2yFMI0HWkQpl\/RrnlZTke37IRKYNKemWT4TY1SCNPH6BnC9GcZnkp\/Jh\/LkPe9Rv8E0QPfdCEKYfrP6B8I09\/lq6\/dLP8s37XOJNpSN5Pl74uO9EvT9WjZe534maR3bXW7XSuW7jrex2gRHkvdZSScD0Jh\/ePlW7u9DIU6UftPcFvSm4KQ33WDoO2PXv1pEAIURLaI3sdosvwWxy9DIUxWL5TeeJhCTrcYRL8PrHBjxY96L5NQ8vs+oS5B15GqNA2sXL1dxOY9\/3V0exu8a+\/B4u\/yI336NhQLXy453K9KMUy\/g7+\/OBFC+zV6+Rv81V6Cl9\/LXKMdTCZfSm\/qyMiv1bTXljTd5h6OYbJGPwBM78s\/N8FCew7e30d\/8ud\/TT4Kb4v7UZA1fNl44bh9wtOFqez4vne84KPLyDm62Yge3yRNv3GW0ximcPKnPEy\/RzevgaW1gx83MZ9LnBmhXD4pvP0k7GpNH+9ONt6M8j4pT+dkuk6rv37aHYb7gaU8l4bREpO9VW4vJ8+WNG24KEyh7MDDdD16jcwT3nT6GhvL\/\/sz3lM3k9fC2ztH1JG7Iw\/44EqmIiNCn6JvbhmG4Tiubdp2f7bpqfAqKUzGnUJLPK1sWcsOCpMfAJh6IXKRefzHZLqM9lFievVeE4N69ZSZG+qAD6R5p\/RZTYbjmu563qOyQSlMLb1L\/UZIY+kCwGHS\/pmkkl4v9t5qIbdLbLLvzMWUODLeJ5PCQSWdMp3KEs69m8AcGK5tX+1Jm8p2HUMMlUNnGTxthZsp3vk6DtMiKLkFIyU2mC6jM+n3ZBoLDc8hbEEwmQTFFXSlR58h6M8lHgUzPZoMybyGwzbtvE\/bla9xEhm2M+tVj20zn931DdMVdGge7SNd44vNsXWjf7ebb7jtfnsfe9O9aeJkD2K6j2CaBvfP4Y\/r+yBhc7GTffRaMpD39sPdg2Pik2wYtFNgsF097tYtwVw45vjusNnm3W7ns6f12JadwNE5ZLohRceR6wiG55j9PWmAncHqTken1R2SGkC+WUfHre\/2XRR5v2vFwLWtkNH5FqNofsMf0R88y2LCsL94ecGYeqd3wCfNVTli\/e7mQQetOPoMPfJ9K5w5HChHN2ab7cBqtzvttjXYbuZrWzfRWTaoQIXzs8O51JGy\/hU6X7t6mlgleRsXmwd7ptbM4ImbC\/dBwjgHfaxPd4ec6+3trG9iR6BhPlBjcOYYTjYV5jJZWFuO4mwdQ501Ngv6SrGZYYkZODvpYm0jS9J9FDzs9WY4UPqBuCPukO6MseIHJoQJt4Z75r2U0BM2CSbhmC7RvNCKMa6YQET3kE2bt2lhzNlt0TZUzzzFB0bkY8dwE5spJA8VXmzeOlVFBX3CrBLpPXAQOwf5CysbW8dEHQ+bXOOK+F1FGmIr+kj+qUwddI30FQ\/ZVf4JVZsp3MF8j5X2m87OREZpkhQg0Fv8qroFSkOaOXJfHkOo\/cNRtKh0sh1C4AJgWRK+dYttKPeOsJrmGLuo2L8Y7VGh0T4C7+Oojy03e67WSD51q8pnVwAmgvnG6iM8x11X47RBzSW6skz+gE2T4RCOh86gmqpnAOW5LXOl9BEZayHtDH7OKEehd4UIAwQlD4fJJRsvGTFRhMOKBNP2za4igm+ih6uAuhLXzUx8ejUXAMIXbwsT0BDDqVIYAHs3md8+qcucEsHe2JVxAtZWjMSWwLyd6uXWEZjmKAslo2xLErjJ4EiYtBWCk11l+WEw8SdUpUBapm7S9dgqt0PbTSeBSRsLXlUR9zLWYlc\/ax0LE4pT1a5PRuYMeXb1QOwzoVkMjzvslPem4VJg0gUGStaGYTg2ASZUhmhRGEphKHaKbfWzx8OkDZGFacjfTmDSO7wNQVfJ+WonGrbptzkW6hAkve7j4UpodnZMo383mxPUr7UIagVxLz1vHIKfvgZM2hUUrx35akrYsdnuclq1ktvpMdmSM42Hier30Txr9QDXmGEfetSPF8LUMsk6djeFifDxdWDyeFmrVeXKTPSmkDnx9hYKv0p7TbRre3A8TBEBXmCMFV7HrJOsGZPKGdLhuwS9sQ5MuFwqO0TjUyWSyHg9XmjvhZS8Gh1nPEy2ksd+xjNelbdRcwrDqUWcwQ7zzVK+vRZM4FOrOo2dRNF38KZTwyaLSMnpHdnv2lzvFM08p3aZ8aq5+1NvF+YJcoj6hZ\/OGMEzWg8mxFANIq+KlLD0sQ8BJptNF8mAHS+Cqdy7GkycKUPNbpvAFC44LFrBpVnqfSbVU7T7ejBh0p4rkXWSgUXKBe8jJ8vkyeTGexbApFYjoBzoo2YAZjAZXhcT720SC\/f67OlV9bM1YfKhnmfYYuecmSPCm+WI5u0EXiOWFnhbgKKFvGSYI5kwckp3k6ftsZgMWkwYmwLKPq4JE2aElPDaZI5jPWHD7UPjidRfEryWyP01YSqLMWMlz28OExo6YLiUjZ3CRMC0Lkw+tEWItWq\/ABPwrREMkFkIRGLt4A8GWy2puWw3UvPqFWDS7jA\/qUNAnSlfNmF11YUJE\/aENgUrholp3XxQJ8ntlJgv2EIAMKmZBhdFmBTNv6mkF4GBqY8kJyFTHilMoDZMSHyDcMITOy9jbz1eiCAsQBYTwA5dAJOak7008iNhirdgF3NnE1IAmPLVCEweIkS4AgaSTEyqofDmS4JgyozKLMr0s8CkbdFQnMrPSWEinGO1YcJCsUTcNjkNUrUC+girumJLIt2tAKaV0sBPBxMegVjpnrlqEiaM6wlUp8TdlP4V+NYqv2ufdJUKGx3uUFD0Ap8QJswKXa2KsdOZFNZQGyYYQ8ZkOUiJ9J4J7Py3iV7LKGGTmdvuE8HkYVk8RoWQ3yhMWPyIIPw04Y\/ZbIJ9aMu3PxM6zFTu9nmY1NIGTgmTZmHhAxXiXrMwPcIRCoSXZFz5EcJLHxUBa8mRm0+oz71+SZi0LWaNsKVKxqxRmJDwAkHkWeKlydUbIERIO+8m\/eSsDcBE94ZEdFqYtEc0kUHGh5uFqU3WnNYcTG3eEiEz26ZfpWcMlTcoOheFSXvCxAhZdEizMGHmV1wYSE6xgk0HeNcMsckmsTQVGSO\/m0QCpoBODZOHpyGJxb1mYUICAwy04APDs3BwLXhGIVF92BFY0DLAblKLcj4BTOUYfTTnShIT1jBMSOKeiT3H1NGiOgd2k9Dt5DEoCsITDxMlqKBAJ4cJt0aIxb2GYULsEGjmc5uZtwvDAn4QIS9nboeiCszbqRTzm04Pk\/aI4SSMCWsYJsTnhCrgiYG8FKUO+IQw5DTRHw238CsAk1r1gjPApO3QTMIV3kjDMCHpPmjXbF5KPcD8KnzQjJ+UVKNPCBMuRghYRMMwPSMwYfYEpmCVItsBOxfIAYnvrRwPw8NEdACndA6YUsbOkYGGITYME2J8RWFiu04v\/RLEJpmYoYllJJT3C4BJLV\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\/HPk8JkOCHLXx+2Cumtx8Kk9XVd\/x9+kNeFafA4rKQV9uKpYcpvYq0JU7QtjYjlRseq3p+FApTCKEKavemV9IafnyHhbQ4IbTJSq1VZRaQu6WeTlt99IoDpf6QeoyOzNe6vn2bzzb6nlCKe9dQmkJIgGwJIaTMh9XIxMjpDl3emHRG+Uokddjq+74vW9DedgrxVTJvTrqdv+jfS\/wHFYV8J3YJIIQAAAABJRU5ErkJggg==)","eb6a7447":"# Pipeline Using LGBMClassifier","dbcd261a":"Tokenization is the process of breaking text into pieces, called tokens, and ignoring characters like punctuation marks (,. \u201c \u2018) and spaces. spaCy\u2018s tokenizer takes input in form of unicode text and outputs a sequence of token objects.","141125c0":"## Reference taken from https:\/\/www.dataquest.io\/blog\/tutorial-text-classification-in-python-using-spacy\/    thanks dataquest :)"}}