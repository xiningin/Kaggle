{"cell_type":{"1392cf6d":"code","4b8fde6e":"code","35dba7a5":"code","83ffea02":"code","cb05cca7":"code","eec05ad7":"code","2e8bef5e":"code","a4de6ae4":"code","61fc98f4":"code","554b7694":"code","18b7e8b3":"code","e8d68964":"code","16eb2e01":"code","f7ce853c":"code","e5de1bc9":"code","ab7e34cc":"code","a1add3d3":"code","a7d5158b":"code","76a6c299":"code","393e4acd":"code","904c9713":"code","5eaf0abf":"code","b25d7a57":"code","621758c2":"code","e502c29e":"code","0fcb18d6":"code","3250d925":"code","141a7c6f":"code","7103b826":"code","b7f59d54":"code","6e7b643e":"code","e5b1963d":"code","6f374ef0":"code","563beb0a":"code","b107a25e":"code","4575f5db":"code","99ef7a0e":"code","aae731ad":"code","d10bbe5e":"code","65ae95f2":"code","2f9e19e5":"code","f72d066c":"code","89503acc":"code","042bc0f4":"code","b011c777":"code","16e1066b":"code","4d9a9222":"code","3ff89cd2":"code","57204d72":"code","af96a059":"code","cab6888e":"code","24dd044a":"code","908e57ad":"code","971af312":"code","92737e3f":"code","ffcafd63":"code","2ddf8e99":"code","e041cd4c":"code","f5abfa4d":"code","34e0f5f7":"code","436c5478":"code","53e3f4d3":"code","5fed3c1e":"code","7f8446ae":"code","21268418":"code","4529838c":"code","ea6eec75":"code","e5916cdf":"code","67d8c027":"code","ee7d84d1":"code","614c6562":"code","a019e4c5":"code","2853f47c":"code","9ebf6fd9":"code","86a696d0":"code","39e63a19":"code","dc7313af":"code","805a5839":"code","f5e9a919":"code","7f8c150e":"code","af58843a":"code","a73cfd7d":"code","088a16a2":"code","a556c6ed":"code","bdf2ddbf":"code","f70e356c":"code","d015127d":"code","37b09150":"code","90a72ff8":"code","58b9b7c0":"code","34294d5f":"code","730264aa":"code","cb61f7f8":"code","c72bb7b4":"code","29fbda09":"code","76ab0cda":"code","1ffb1f67":"code","3eb2a091":"code","526bcd6b":"code","4df7008b":"code","7cce240d":"code","7446d09e":"code","5cde87f5":"code","16a3446a":"code","15dd7a6a":"code","0c5dfbff":"code","64722c7d":"code","e5180eef":"code","f440b4e3":"code","866ea4ed":"code","67f47e41":"code","1e158190":"code","8934403e":"code","a83ce5aa":"code","08b6b747":"code","73de2b56":"code","dbb0fd8b":"code","351e5b5e":"code","a0cc17de":"code","ef3d43fa":"code","6b1b78fa":"code","c9e62254":"code","041be3e6":"code","b3fe8f52":"code","87fa138c":"code","812202d4":"code","169496ed":"code","0225974a":"code","d26d32b4":"code","f02b2689":"code","c5df1a13":"code","eeff462a":"code","4dc6b0c8":"code","21bf96af":"code","e05d6d6f":"code","23cdabe5":"code","d30299f2":"code","999cdebd":"code","b986eb1a":"code","6ec04d0a":"code","0d6d2b17":"code","e74c1f45":"code","e8a4a6c6":"code","d71f1d8a":"code","afc1f692":"code","031fd565":"code","1b5a29c6":"code","a82b926c":"code","5eb8b420":"code","7c7b0b2e":"code","705ece46":"code","cad8a277":"code","d092a712":"code","e1d17eb7":"code","c3d1d1f3":"code","3bc7a709":"code","585fa383":"code","99d1f046":"code","1a54c783":"code","9c4103eb":"code","7b3583fd":"code","fd1027fa":"code","1c0de2f8":"code","d7637247":"code","94f996f1":"code","4b7e32cd":"code","925d4c4e":"code","15284716":"code","a3197386":"code","fe746e41":"code","8fbf46bd":"code","43a82551":"code","d3c48cff":"code","fb1b3731":"code","0f6e5d3c":"code","66cd3028":"code","cc411a23":"code","227dad39":"code","f78bdfa8":"code","72101abd":"code","bd7f1936":"code","12c6cd76":"code","a6cbc3b5":"code","f016ccde":"code","8a0c19bc":"code","dfadfff1":"code","d5c9307d":"code","2955908c":"code","60566e7f":"code","4bdf3718":"code","b1ffba42":"code","4ce2552c":"code","7aec9d3b":"code","812418f3":"code","4d28e6da":"code","4fbaf342":"code","c7068683":"code","4af45339":"code","541037ce":"code","00ebcaee":"markdown","49b13918":"markdown","74b953c1":"markdown","fdd10a71":"markdown","40b12906":"markdown","b3c6cb1b":"markdown","e49393ac":"markdown","9d04c823":"markdown","7fb2a0ac":"markdown","a7ce1dd8":"markdown","f7087d08":"markdown","c61ab266":"markdown","4946cdcf":"markdown","cd63adab":"markdown","06e3e6af":"markdown","3e97a886":"markdown","70b0add8":"markdown"},"source":{"1392cf6d":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","4b8fde6e":"# importing librrary\nimport pandas as pd  # pd is the alias name,we can use any name other than pd as well","35dba7a5":"series =pd.Series([3, -10, 7, 4])  \nseries  # By default we have continous numbers,index starts from Zero","83ffea02":"type(series)   #Which return type of series","cb05cca7":"#we can change the index with names as well by using index attribute\nseries =pd.Series([3, -10, 7, 4],index=['a', 'b', 'c', 'd']) \nseries","eec05ad7":"#Creating a dictionary where each key will be a DataFrame column\n\ndata = {\n'person': ['John Smith', 'David jones', 'Juan Carlos','Mike Jones'],\n'first name': ['John', 'David', 'Juan', 'Mike'],\n'Last Name': ['Smith', 'jones', 'Carlos','Jones'],\n'email id': [\"JohnSmith@gmail.com\",\"Davidjones@gmail.com\",\"JuanCarlos@gmail.com\",\"MikeJones@gmail.com\"]  \n        }","2e8bef5e":"data[\"person\"],data[\"first name\"],data['Last Name']","a4de6ae4":"#Converting a dictionary to a data frame \nimport pandas as pd\ndf=pd.DataFrame(data)\ndf   #by default we have a index starting from Zero","61fc98f4":"df.index    # Which returns row index \ndf.columns  # Which returns Columns in a dataframe\ndf.shape    # shape is a attribute which returns dimentions \ntype(df)    # returns type of df\ndf.dtypes   # returns data type of a columns based up on the data it holds\n            # (eg: person column which has all string therefore it returns object data type )\ndf.info()   # info() function gives the details of data frame ","554b7694":"# fetching data from a data frame using loc \n#fetching details of John Smith from a df\ndf.loc[0]                            #forst row details \ndf.loc[0:1]                          # first and second row details \ndf.loc[1:2]                          # Subset from the data frame \ndf.loc[:,\"person\"] \ndf.loc[:,\"person\":\"Last Name\"]","18b7e8b3":"# fetching data from a data frame using iloc\ndf.iloc[0:1] # 0 is inclusive and 1 is exclusive\ndf.iloc[0:1,0:3]   # i stands for indexing \ndf.iloc[0:1,0] # this will return error as iloc doesn't support label concept \n","e8d68964":"#index is always a unique so replacind index with email id by using df.set_index function\ndf.set_index(\"email id\")   # whcih is temparary \ndf\n#set_index\ndf.set_index(\"email id\",inplace=True)  #  used inplace to change permanently\ndf","16eb2e01":"df   #index replaced by email id using set_index and making it permanent fix by using inplace=True","f7ce853c":"# Readinng a CSV file and used index_col to set the index as respondent \n\ndf_csv=pd.read_csv(\"..\/input\/stack-overflow-2018-developer-survey\/survey_results_public.csv\", index_col=\"Respondent\") \ndf_csv.head() # returns first five records from a CSV file\ndf_csv.shape # returns total number of rows and coulmn \n#set_option\npd.set_option('display.max_columns',85)","e5de1bc9":"df_scheme=pd.read_csv(\"..\/input\/stack-overflow-2018-developer-survey\/survey_results_schema.csv\" ,encoding='utf-8', index_col=\"Column\")\ndf_scheme.head()\ndf_scheme.loc[\"Respondent\"]   # which give the detailed discription of Respondent with truncate\npd.set_option('display.max_columns',85)\n","ab7e34cc":"df_scheme.loc[\"Respondent\",\"QuestionText\"]   ","a1add3d3":"pd.set_option('display.max_rows',85)\ndf_scheme.sort_index(ascending=False)","a7d5158b":"df","76a6c299":"filt=(df[\"Last Name\"]==\"Jones\")   # filtering data from a data Frame ","393e4acd":"df[filt]","904c9713":"data = {\n'person': ['John Smith', 'David jones', 'Juan Carlos','Mike Jones'],\n'first name': ['John', 'David', 'Juan', 'Mike'],\n'Last Name': ['Smith', 'jones', 'Carlos','Jones'],\n'email id': [\"JohnSmith@gmail.com\",\"Davidjones@gmail.com\",\"JuanCarlos@gmail.com\",\"MikeJones@gmail.com\"]  \n        }","5eaf0abf":"import pandas as pd\ndf1=pd.DataFrame(data)","b25d7a57":"df1","621758c2":"df1.columns","e502c29e":"df1.columns=[\"Person\",\"First\",\"Last\",\"Email\"]","0fcb18d6":"df1","3250d925":"df1.columns=[x.upper() for x in df1.columns ]","141a7c6f":"df1","7103b826":"df1.columns=[\"PERSON_1\",\"FIRST_Name\",\"LAST_Name\",\"EMAIL_ID\"]","b7f59d54":"df1","6e7b643e":"df1.columns=df1.columns.str.replace('_',\" \")\ndf1","e5b1963d":"df1.columns=df1.columns.str.replace(' ',\"_\")\ndf1","6f374ef0":"# Changing only a specific column using dictionary \ndf1.columns=[x.lower() for x in df1.columns ]\ndf1","563beb0a":"df1.rename(columns={\"person_1\":\"person\",\"first_name\":\"first\",\"last_name\":\"last\"}, inplace=True)\ndf1","b107a25e":"#Updating a specific column using list\ndf1.loc[2]=[\"Mike Jones\",\"Mike\", \"Carlos\",\"MikeJones@gmail.com\"]\ndf1","4575f5db":"df1.at[2,[\"person\",\"first\",\"email_id\"]]=[\"Juan Carlos\",\"Juan\",\"JuanCarlos@gmail.com\"]","99ef7a0e":"df1","aae731ad":"df1.loc[2,[\"person\",\"first\",\"email_id\"]]=[\"Juan Carlos\",\"Juan\",\"JuanCarlos@gmail.com\"]","d10bbe5e":"df1","65ae95f2":"filt = df1[\"email_id\"]==\"MikeJones@gmail.com\"\ndf1[filt][\"last\"]=\"Smith\"    # which is not possible to update the column ","2f9e19e5":"df1","f72d066c":"df1.loc[filt,\"last\"]=\"smith\"","89503acc":"df1","042bc0f4":"df1.loc[filt,\"last\"]=\"Jones\"\ndf1","b011c777":"df1[\"email_id\"]=df1[\"email_id\"].str.lower()   # Changing lower case of a sepcific column using string method \n","16e1066b":"df1","4d9a9222":"#apply is used for call a function\n#map\n#apply map\n#Replace\n","3ff89cd2":"df1[\"person\"].apply(len)    ","57204d72":"def update_email(email_id):\n    return email_id.upper()\n    ","af96a059":"df1[\"email_id\"]=df1[\"email_id\"].apply(update_email)","cab6888e":"df1[\"email_id\"]=[x.lower() for x in df1[\"email_id\"]]","24dd044a":"df1","908e57ad":"df1[\"first\"]=df1[\"first\"].apply(lambda x : x.lower())","971af312":"df1","92737e3f":"df1[\"last\"]=df1[\"first\"].apply(lambda x : x.lower()) ","ffcafd63":"df1","2ddf8e99":"df1.apply(len)","e041cd4c":"df1.apply(len,axis=\"columns\")  ","f5abfa4d":"len(df1[\"person\"])","34e0f5f7":"df1.apply(min)","436c5478":"df1.apply(max)","53e3f4d3":"df1.apply(pd.Series.min)","5fed3c1e":"df1.apply(pd.Series.max)","7f8446ae":"#Lambda works on seriesobject \ndf1.apply(lambda x:x.min())\n","21268418":"df1.applymap(len)","4529838c":"df1.applymap(str.lower)","ea6eec75":"df1[\"person\"].str.upper()","e5916cdf":"df1[\"person\"].apply(str.upper)","67d8c027":"df1","ee7d84d1":"df1[\"first\"].map({\"john\":\"jon\",\"david\":\"doe\"})","614c6562":"df1[\"first\"].replace({\"john\":\"jon\",\"david\":\"doe\"})","a019e4c5":"df1[\"first\"]=df1[\"first\"].replace({\"john\":\"jon\",\"david\":\"doe\"})","2853f47c":"df1","9ebf6fd9":"df_csv=pd.read_csv(\"..\/input\/stack-overflow-2018-developer-survey\/survey_results_public.csv\", index_col=\"Respondent\") \ndf_csv.head() # returns first five records from a CSV file\ndf_csv.shape # returns total number of rows and coulmn \n#set_option\npd.set_option('display.max_columns',85)","86a696d0":"df_scheme=pd.read_csv(\"..\/input\/stack-overflow-2018-developer-survey\/survey_results_schema.csv\", index_col=\"Column\")\ndf_scheme.head()\npd.set_option('display.max_columns',85)\ndf_scheme.loc['Respondent',\"QuestionText\"]","39e63a19":"df_csv.head()","dc7313af":"#Only a particular column\ndf_csv.rename(columns={\"ConvertedComp\":\"SalaryUSD\"}, inplace=True)","805a5839":"df_csv.columns","f5e9a919":"df_csv[\"Hobby\"].map({\"Yes\":\"True\",\"No\":\"False\"})","7f8c150e":"df_csv[\"Hobby\"]=df_csv[\"Hobby\"].map({\"Yes\":\"True\",\"No\":\"False\"})","af58843a":"df_csv.head()","a73cfd7d":"df1","088a16a2":"df1","a556c6ed":"df1[\"Full name\"]=df1[\"first\"]+\" \"+df1[\"last\"]","bdf2ddbf":"df1","f70e356c":"df1.drop(columns=[\"last\"],inplace=True)","d015127d":"df1","37b09150":"df2=[\"john\",\"david\",'juan',\"mike\"]\ndf2=pd.DataFrame(df2)\ndf2.rename(columns={0:\"Last\"},inplace=True)\ndf2[\"Last\"]","90a72ff8":"df1[\"last\"]=df2[\"Last\"]","58b9b7c0":"df1","34294d5f":"df1.drop(columns=[\"last\",\"first\"], inplace=True)","730264aa":"df1[\"person\"].str.split(\" \", expand=True)","cb61f7f8":"df1[[\"first_name\",\"Last_Name\"]]=df1[\"person\"].str.split(\" \", expand=True)\ndf1","c72bb7b4":"df1.drop(columns=\"Full name\", inplace=True)\ndf1","29fbda09":"df1","76ab0cda":"df1=df1.append({\"first_name\":\"Tony\"},ignore_index=True)  \n","1ffb1f67":"df1","3eb2a091":"df1.drop(index=4, inplace=True)","526bcd6b":"df1","4df7008b":"df1.drop(index=df1[df1[\"Last_Name\"]==\"Jones\"].index)\n        ","7cce240d":"df1","7446d09e":"df1.sort_values(by=\"first_name\",  ascending=False)    \n","5cde87f5":"df1.sort_values(by=\"first_name\") ","16a3446a":"df1.sort_values(by=[\"first_name\" ,\"Last_Name\"] , ascending=[False,True], inplace=True) ","15dd7a6a":"df1","0c5dfbff":"df1.sort_index(inplace=True)","64722c7d":"df1","e5180eef":"df_csv=pd.read_csv(\"..\/input\/stack-overflow-2018-developer-survey\/survey_results_public.csv\", index_col=\"Respondent\") \ndf_csv.head()\npd.set_option(\"display.max_columns\",85)\ndf_csv.head(2)","f440b4e3":"df_scheme=pd.read_csv(\"..\/input\/stack-overflow-annual-developer-survey-2019\/survey_results_public.csv\", index_col=\"Column\")\ndf_scheme.head()","866ea4ed":"df_csv.sort_values(by=[\"Country\",\"CompanySize\"],ascending=[True,False],inplace=True)\n","67f47e41":"df_csv[[\"Country\",\"CompanySize\"]].head(10)","1e158190":"df_csv[\"AssessJob1\"].nlargest(10)","8934403e":"df_csv.nsmallest(10,\"AssessJob1\")","a83ce5aa":"df_csv.nlargest(10,\"AssessJob1\")","08b6b747":"df_csv.head(2)","73de2b56":"df_csv[\"AssessJob1\"].median()","dbb0fd8b":"df_csv.median()","351e5b5e":"df_csv.describe()","a0cc17de":"df_csv.columns\ndf_csv[\"Hobby\"].value_counts() ","ef3d43fa":"df_csv[\"SocialMedia\"]","6b1b78fa":"df_scheme.loc[\"SocialMedia\"]","c9e62254":"df_csv[\"SocialMedia\"].value_counts()","041be3e6":"df_csv[\"SocialMedia\"].value_counts(normalize=True)","b3fe8f52":"df_csv[\"Country\"].value_counts()","87fa138c":"Country_GrpBy=df_csv.groupby([\"Country\"])","812202d4":"Country_GrpBy.get_group(\"United States\")","169496ed":"Country_GrpBy[\"SocialMedia\"].value_counts()","0225974a":"Country_GrpBy[\"SocialMedia\"].value_counts(normalize=True).loc[\"China\"]","d26d32b4":"Country_GrpBy[\"ConvertedComp\"].median().loc[\"Germany\"]","f02b2689":"Country_GrpBy[\"ConvertedComp\"].median()","c5df1a13":"Country_GrpBy[\"ConvertedComp\"].mean().loc[\"Germany\"]","eeff462a":"Country_GrpBy[\"ConvertedComp\"].agg([\"median\",\"mean\"])   # by using agg method ","4dc6b0c8":"Country_GrpBy[\"ConvertedComp\"].agg([\"median\",\"mean\"]).loc[\"Canada\"]","21bf96af":"filt=df_csv[\"Country\"]==\"India\"\ndf_csv.loc[filt][\"LanguageWorkedWith\"].str.contains(\"Python\").sum()","e05d6d6f":"Country_GrpBy[\"LanguageWorkedWith\"].apply(lambda x: x.str.contains(\"Python\").sum()).loc[\"India\"]","23cdabe5":"Country_GrpBy[\"LanguageWorkedWith\"].apply(lambda x: x.str.contains(\"Python\")).value_counts(normalize=True)","d30299f2":"Country_Responded=df_csv[\"Country\"].value_counts()\nCountry_Responded","999cdebd":"Country_use_Python=Country_GrpBy[\"LanguageWorkedWith\"].apply(lambda x: x.str.contains(\"Python\").sum())","b986eb1a":"Country_use_Python","6ec04d0a":"python_df=pd.concat([Country_Responded,Country_use_Python,], axis=\"columns\", sort=False)\npython_df","0d6d2b17":"python_df.rename(columns={\"Country\":\"Number_of_respondent\",\"LanguageWorkedWith\":\"PersonKnowsPython\"}, inplace=True)\npython_df","e74c1f45":"python_df[\"PerKnowPython\"]=(python_df['PersonKnowsPython']\/python_df['Number_of_respondent']) * 100\npython_df","e8a4a6c6":"python_df.sort_values(\"PerKnowPython\", ascending=False, inplace=True)\npython_df","d71f1d8a":"python_df.loc[\"Japan\"]","afc1f692":"df1=df1.append({\"first_name\":\"Tom\"}, ignore_index=True)\ndf1","031fd565":"df1","1b5a29c6":"df1.dropna()","a82b926c":"df1","5eb8b420":"df1.dropna(axis='index',how=\"any\")    # by default it has axis= index and how = \"any\"","7c7b0b2e":"df1.dropna(axis='index',how=\"all\", subset=[\"first_name\"])","705ece46":"df1.dropna(axis='index',how=\"any\", subset=[\"first_name\"])","cad8a277":"df1.dropna(axis='index',how=\"any\", subset=[\"email_id\"])","d092a712":"df1.dropna(axis='index',how=\"any\", subset=[\"first_name\",\"email_id\"])","e1d17eb7":"df1","c3d1d1f3":"import numpy as np\nimport pandas as pd\ndata1 = {\n'person': ['Mising', 'NA', 'NAN','Mike Jones'],\n'first': ['John', 'David', 'Juan', 'Mike'],\n'email_id': [\"JohnSmith@gmail.com\",\"Davidjones@gmail.com\",\"Mising\",\"NA\"],\n 'Full name':[\"Missing\",np.nan,None,\"NA\"]   \n        }","3bc7a709":"df2=pd.DataFrame(data1)\ndf2","585fa383":"data = {\n'person': ['John Smith', 'David jones', 'Juan Carlos','Mike Jones'],\n'first name': ['John', 'David', 'Juan', 'Mike'],\n'Last Name': ['Smith', 'jones', 'Carlos','Jones'],\n'email id': [\"JohnSmith@gmail.com\",\"Davidjones@gmail.com\",\"JuanCarlos@gmail.com\",\"MikeJones@gmail.com\"]  \n        }","99d1f046":"df1=pd.DataFrame(data)","1a54c783":"df1","9c4103eb":"df2","7b3583fd":"df1.rename(columns={\"first name\":\"first\",\"email id\":\"email_id\",\"Last Name\":\"Full name\"}, inplace=True)","fd1027fa":"df1=df1.append(df2)","1c0de2f8":"df1","d7637247":"df1","94f996f1":"df1.dropna()","4b7e32cd":"df1 # bydefault axis=\"index\"  and how =\"any\" ","925d4c4e":"df1.replace(\"NA\",np.nan,inplace=True)\ndf1","15284716":"df1.replace([\"Mising\",\"Mising\",\"None\"],np.nan,inplace=True)\ndf1","a3197386":"df1.dropna()","fe746e41":"df1.isna()","8fbf46bd":"df1.fillna(\"MISSING\")","43a82551":"df1.dtypes","d3c48cff":"type(np.nan)","fb1b3731":"df_csv.head(2)","0f6e5d3c":"df_csv[\"YearsCode\"].unique()","66cd3028":"df_csv.replace(\"Less than 1 year\",0,inplace=True)","cc411a23":"df_csv.replace('More than 50 years',51,inplace=True)","227dad39":"df_csv[\"YearsCode\"]=df_csv[\"YearsCode\"].astype(float)","f78bdfa8":"df_csv[\"YearsCode\"].dtypes","72101abd":"df_csv[\"YearsCode\"].mean(),df_csv[\"YearsCode\"].median()","bd7f1936":"df_csv[\"YearsCode\"].mode()","12c6cd76":"import pandas as pd \nd_parse= lambda x: pd.datetime.strptime(x, \"%Y-%m-%d %I-%p\")\ndf_TimeStamp=pd.read_csv(\"..\/input\/time-series-data-set\/ETH_1H.csv\",parse_dates=[\"Date\"],date_parser=d_parse)\ndf_TimeStamp","a6cbc3b5":"df_TimeStamp.head()","f016ccde":"df_TimeStamp[\"DayOfWeek\"]=df_TimeStamp[\"Date\"].dt.day_name()","8a0c19bc":"df_TimeStamp.head()","dfadfff1":"df_TimeStamp[\"Date\"].min()   ,    df_TimeStamp[\"Date\"].max()","d5c9307d":"delta = df_TimeStamp[\"Date\"].max()-df_TimeStamp[\"Date\"].min() \ndelta","2955908c":"filt=(df_TimeStamp[\"Date\"] >=pd.to_datetime(\"2019-01-01\"))& (df_TimeStamp[\"Date\"] <pd.to_datetime(\"2020-01-01\"))\ndf_TimeStamp.loc[filt]","60566e7f":"df_TimeStamp.set_index(\"Date\", inplace=True)","4bdf3718":"df_TimeStamp['2020']","b1ffba42":"df_TimeStamp['2020-01' : '2020-02'][\"Close\"]","4ce2552c":"df_TimeStamp[\"2020-01-01\"][\"High\"].max()","7aec9d3b":"highs=df_TimeStamp[\"High\"].resample(\"D\").max()\nhighs[\"2020-01-01\"]","812418f3":"%matplotlib inline","4d28e6da":"highs.plot()","4fbaf342":"df_TimeStamp.resample(\"W\").mean()","c7068683":"df_TimeStamp[[\"Close\",\"High\",\"Low\",\"Volume\"]].resample(\"w\").agg({\"Close\":\"mean\",\"high\":\"max\",\"Low\":\"min\",\"Volume\":\"sum\"})","4af45339":"df_TimeStamp","541037ce":"df_TimeStamp.resample(\"w\").agg([\"mean\",\"max\",\"min\",\"sum\"]).loc[:,[\"Close\",\"high\",\"Low\",\"Volume\"]]","00ebcaee":"<h1>PANDAS LIBRARY<\/h1>","49b13918":"## Working with Dates and Time Series Data","74b953c1":"### Creating Series","fdd10a71":"##  Sorting Data","40b12906":"## Cleaning Data - Casting Datatypes and Handling Missing Values","b3c6cb1b":"<p> Basic function on Data Frame <\/p>","e49393ac":"<h5> Definition of loc and iloc <\/h5>\n\n<p>Accessing data from a data Frame using iloc and loc\nloc is label-based, which means that we have to specify the name of the rows and columns that we need to filter out.\nOn the other hand, iloc is integer index-based. So here, we have to specify rows and columns by their integer index.<\/p>\n","9d04c823":"## Grouping and Aggregating - Analyzing and Exploring Your Data","7fb2a0ac":"# df_TimeStamp[\"Date\"]=pd.to_datetime(df_TimeStamp[\"Date\"], format=\"%Y-%m-%d %I-%p\")","a7ce1dd8":"<p>A Data Frame is simply a set of Series. It is a 2-dimensional data structure \u2014 columns and rows \u2014 that transforms the data into a beautiful table. Example:<\/p>","f7087d08":"<p>Series is nothing more than an array of 1 dimension. \nYou can also consider a Series as a column of a table.or series of row data with one coulum \nExample below :<\/p>","c61ab266":"### Creating Data Frame","4946cdcf":"## Updating Rows and Columns - Modifying Data Within DataFrames","cd63adab":"## Series and DataFrame ","06e3e6af":"## Add\/Remove Rows and Columns From DataFrames","3e97a886":"## Reading a CSV Files using pandas\n","70b0add8":"## Filtering - Using Conditionals to Filter Rows and Columns"}}