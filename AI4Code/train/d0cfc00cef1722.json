{"cell_type":{"90848515":"code","313ac6e9":"code","07808ef0":"code","4a21538a":"code","90d8b262":"code","5349308d":"code","cb535fa8":"code","118383f2":"code","a568911a":"code","e79e157d":"code","d2589246":"code","7ad06ae0":"code","84331f79":"code","a197b70b":"code","cc0f14be":"code","e7926e13":"code","64af2303":"code","25689e72":"code","fe22b294":"code","da204733":"code","0f4b74a6":"code","d71833e3":"code","113c5e91":"code","6c6a725b":"code","4eceedd1":"code","b8895b42":"code","be21846d":"code","d3148eb3":"code","6153762e":"code","c83abdfd":"code","0ccb0edd":"code","7c8f7eb9":"code","a18d06a6":"code","4c4fba78":"code","d61fe607":"code","3147e01d":"code","93cbf82d":"code","e220a421":"code","e1cfd0c7":"code","92cf3cd9":"code","4b46d40a":"code","0d5b7d81":"code","35124373":"code","89b17c7f":"code","11709c6f":"code","4e444df9":"code","2b10e649":"markdown","a4228f10":"markdown","d4a22575":"markdown","801af414":"markdown","da01d095":"markdown","e362d0bb":"markdown","83ab493c":"markdown","ac26b1fa":"markdown","74c2ecd1":"markdown","b6720fdd":"markdown","78439fda":"markdown","ea991e1d":"markdown"},"source":{"90848515":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","313ac6e9":"from matplotlib import rcParams\nfrom sklearn import model_selection\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn import metrics\nimport lightgbm as lgb\nimport catboost as cb \nimport xgboost as xgb\nimport eli5\nimport plotly.graph_objects as go\nimport plotly.express as px","07808ef0":"train = pd.read_csv(\"\/kaggle\/input\/av-janatahack-machine-learning-in-agriculture\/train_yaOffsB.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/av-janatahack-machine-learning-in-agriculture\/test_pFkWwen.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/av-janatahack-machine-learning-in-agriculture\/sample_submission_O1oDc4H.csv\")","4a21538a":"train.head()","90d8b262":"train.ID.nunique","5349308d":"rcParams[\"figure.figsize\"] = 15,10\ntrain.isna().sum().plot(kind=\"bar\")","cb535fa8":"train.describe()","118383f2":"# value count for the target variable.\ntrain.Crop_Damage.value_counts().plot(kind='bar',title='Crop Damaged',color=['red'])\n","a568911a":"train.groupby('Crop_Type')['Estimated_Insects_Count'].sum()","e79e157d":"# Crop type which is more prone to pests\ntrain.groupby('Crop_Type')['Estimated_Insects_Count'].sum().plot(kind='bar')","d2589246":"rcParams[\"figure.figsize\"] = 10,10\ntrain.groupby('Soil_Type')['Estimated_Insects_Count'].sum().plot(kind='bar')","7ad06ae0":"fig = px.line(data_frame=train[:5000],x=\"ID\",y=\"Estimated_Insects_Count\")\nfig.show()","84331f79":"pesti =  train[\"Pesticide_Use_Category\"].value_counts()\npesti_df = pd.DataFrame({\"pesticide\":pesti.index,\"frequency\":pesti.values})","a197b70b":"fig = px.bar(data_frame=pesti_df,x=\"pesticide\",y=\"frequency\",color = \"pesticide\")\nfig.show()","cc0f14be":"# join test and train data\ntrain['train_or_test']='train'\ntest['train_or_test']='test'\ndf=pd.concat([train,test])","e7926e13":"df.head()","64af2303":"df['Number_Weeks_Used']=df['Number_Weeks_Used'].fillna(df['Number_Weeks_Used'].mode()[0])","25689e72":"df.head()","fe22b294":"\ntrain=df.loc[df.train_or_test.isin(['train'])]\ntest=df.loc[df.train_or_test.isin(['test'])]\ntrain.drop(columns={'train_or_test'},axis=1,inplace=True)\ntest.drop(columns={'train_or_test'},axis=1,inplace=True)","da204733":"train.head()","0f4b74a6":"train.isna().sum()","d71833e3":"test.isna().sum()","113c5e91":"train[\"kfold\"] = -1\ntrain = train.sample(frac=1).reset_index(drop=True)\n\ny = train.Crop_Damage.values\n\nkf =model_selection.StratifiedKFold(n_splits=5)\n\nfor f,(t_,v_) in enumerate(kf.split(X=train,y=y)):\n    train.loc[v_,'kfold'] = f","6c6a725b":"train.head()","4eceedd1":"train = train.drop([\"ID\"],axis=1)\ntest = test.drop([\"ID\",\"Crop_Damage\"],axis=1)","b8895b42":"def run(train,fold):\n    scores = []\n#     lb = preprocessing.LabelEncoder()\n\n    df_train = train[train.kfold !=fold].reset_index(drop=True)\n    df_valid = train[train.kfold == fold].reset_index(drop=True)\n    \n    x_train = df_train.drop([\"Crop_Damage\"],axis=1)\n#     x_train['ID']= lb.fit_transform(x_train['ID']) \n    y_train = df_train[\"Crop_Damage\"].values\n    \n    x_valid = df_valid.drop([\"Crop_Damage\"],axis=1)\n#     x_valid['ID']= lb.fit_transform(x_valid['ID']) \n\n    y_valid = df_valid[\"Crop_Damage\"].values\n    \n    model = lgb.LGBMClassifier(random_state=27, max_depth=6, n_estimators=400)\n    model.fit(x_train, y_train)\n    preds = model.predict(x_valid)\n    score = metrics.accuracy_score(y_valid, preds)\n    print(f\"Fold = {fold}, AUC = {score}\")\n","be21846d":"for fold_ in range(5):\n    run(train=train,fold=fold_)","d3148eb3":"def run(train,fold):\n    scores = []\n#     lb = preprocessing.LabelEncoder()\n    df_train = train[train.kfold !=fold].reset_index(drop=True)\n    df_valid = train[train.kfold == fold].reset_index(drop=True)\n    \n    x_train = df_train.drop([\"Crop_Damage\",\"kfold\"],axis=1)\n#     x_train['ID']= lb.fit_transform(x_train['ID']) \n\n    y_train = df_train[\"Crop_Damage\"].values\n    \n    x_valid = df_valid.drop([\"Crop_Damage\",\"kfold\"],axis=1)\n#     x_valid['ID']= lb.fit_transform(x_valid['ID']) \n    y_valid = df_valid[\"Crop_Damage\"].values\n    \n    model = xgb.XGBClassifier(objective = \"multi:softprob\",\n              num_class = 3,\n              max_depth = 8,\n              eta = 0.01,\n              subsample = 0.7,\n              colsample_bytree = 0.8,\n              min_child_weight = 40,\n              max_delta_step = 3,\n              gamma = 0.3,\n              eval_metric = \"merror\",\n                             )\n    model.fit(x_train, y_train,)\n    preds = model.predict(x_valid)\n    score = metrics.accuracy_score(y_valid, preds)\n    print(f\"Fold = {fold}, AUC = {score}\")\n","6153762e":"for fold_ in range(5):\n    run(train=train,fold=fold_)","c83abdfd":"x_train = train.drop([\"Crop_Damage\",\"kfold\"],axis=1)\ny_train = train[\"Crop_Damage\"].values","0ccb0edd":"x_train.head()","7c8f7eb9":"model = xgb.XGBClassifier(objective = \"multi:softprob\",\n              num_class = 3,\n              max_depth = 8,\n              eta = 0.01,\n              subsample = 0.7,\n              colsample_bytree = 0.8,\n              min_child_weight = 40,\n              max_delta_step = 3,\n              gamma = 0.3,\n              eval_metric = \"merror\")","a18d06a6":"model.fit(x_train,y_train)","4c4fba78":"y_pred_xgb = model.predict_proba(test)\ny_pred_xgb","d61fe607":"sub[\"Crop_Damage\"] = y_pred_xgb\nsub.head()\nsub.to_csv(\"XGB_Model.csv\")","3147e01d":"eli5.explain_weights_xgboost(model,top=10)","93cbf82d":"eli5.show_weights(model,feature_names=x_train.columns.tolist())","e220a421":"eli5.show_prediction(model, x_train.iloc[1], feature_names = x_train.columns.tolist(), \n                show_feature_values=True)","e1cfd0c7":"def run(train,fold):\n    scores = []\n    df_train = train[train.kfold !=fold].reset_index(drop=True)\n    df_valid = train[train.kfold == fold].reset_index(drop=True)\n    \n    x_train = df_train.drop([\"Crop_Damage\",\"kfold\"],axis=1)\n    y_train = df_train[\"Crop_Damage\"].values\n    \n    x_valid = df_valid.drop([\"Crop_Damage\",\"kfold\"],axis=1)\n    y_valid = df_valid[\"Crop_Damage\"].values\n    \n    model = cb.CatBoostClassifier(random_state=27, max_depth=4, task_type=\"CPU\", devices=\"0:1\", n_estimators=1000, verbose=500)\n    model.fit(x_train, y_train)\n    preds_t = model.predict(x_valid)\n    score = metrics.accuracy_score(y_valid, preds_t)\n    print(f\"Fold = {fold}, AUC = {score}\")","92cf3cd9":"for fold_ in range(5):\n    run(train=train,fold=fold_)","4b46d40a":"cat_model = cb.CatBoostClassifier(random_state=27, max_depth=4, task_type=\"CPU\", devices=\"0:1\", n_estimators=1000, verbose=500)\ncat_model.fit(x_train,y_train)","0d5b7d81":"y_pred_cat = cat_model.predict_proba(test)","35124373":"y_pred_cat[:10]","89b17c7f":"predictions = list()\ncb_weight=0.6 # Catboost\nlb_weight=0.4 # LGBM\nfor i, j in zip(y_pred_cat, y_pred_xgb):\n    xx = [(cb_weight * i[0]) + (lb_weight * j[0]),\n          (cb_weight * i[1]) + (lb_weight * j[1]),\n          (cb_weight * i[2]) + (lb_weight * j[2])]\n    predictions.append(xx)\n# print(predictions[:10])\npreds_ensemble=np.argmax(predictions,axis=1)\n","11709c6f":"preds_ensemble[:10]","4e444df9":"sub[\"Crop_Damage\"] = preds_ensemble\nsub.to_csv(\"Ensemble.csv\")\nsub.head()","2b10e649":"# ELI5 Implementation for XGB Model","a4228f10":"from this we can be sure that ther is some pattern in the **Estimated_Insects_Count**","d4a22575":"# LGBM Classifier","801af414":"# Libraries Needed","da01d095":"# XGB CLassifier","e362d0bb":"# Problem Statement\n","83ab493c":"# Exploratiory Data Analysis","ac26b1fa":"# CatBoost Classifier","74c2ecd1":"Recently we have observed the emerging concept of smart farming that makes agriculture more efficient and effective with the help of high-precision algorithms. The mechanism that drives it is Machine Learning \u2014 the scientific field that gives machines the ability to learn without being strictly programmed. It has emerged together with big data technologies and high-performance computing to create new opportunities to unravel, quantify, and understand data intensive processes in agricultural operational environments.\n\nMachine learning is everywhere throughout the whole growing and harvesting cycle. It begins with a seed being planted in the soil \u2014 from the soil preparation, seeds breeding and water feed measurement \u2014 and it ends when neural networks pick up the harvest determining the ripeness with the help of computer vision.\n\nThis weekend get ready to harness the power of ML to solve a problem based in agriculture and get a chance to showcase your skills and win AV points!","b6720fdd":"# Creating folds using StratifiedKFold","78439fda":"Pesticide_Use_Category and Number_Weeks_Used are more important for this model","ea991e1d":"Soil type 0 is more prone to Insects"}}