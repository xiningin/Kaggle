{"cell_type":{"d5539d37":"code","328c53f7":"code","7fe3f4e6":"code","7cd9445b":"code","bf620137":"code","451902c4":"code","4cb907dc":"code","eae41884":"code","8b913971":"code","6591afac":"code","395a42f0":"code","d5385c85":"code","9f5be8f1":"code","3ea2751c":"code","7b8f535b":"code","6a7d872f":"code","709357dd":"code","3776e5d6":"code","d17cdc93":"code","216ed889":"code","5ab09ba3":"code","c62015c2":"code","842f007d":"code","d7997dc1":"code","a957d3e5":"code","cc5fad9d":"code","87cd04ee":"code","4200e24c":"code","6368c0eb":"code","de67be59":"code","1367e502":"code","1ca22711":"code","b31cfe29":"code","e2d3ab5a":"code","2431e523":"code","ef46cac1":"code","d3b27ebc":"code","9d233d32":"code","d83560e6":"code","afbf4c9b":"code","f512facb":"code","308c904f":"code","7ba2be0f":"code","4e34d75e":"code","7c945bd2":"code","6cd67a62":"code","3f5681d4":"code","2fc18bbf":"code","2dcb710f":"code","7676283a":"code","b967aa7e":"code","83cffb8b":"code","a66e2329":"code","2783f805":"code","9bd5f2b1":"code","cdc2c34b":"code","0934cad3":"code","6bb945fa":"code","48c3d60b":"code","5e5be62f":"code","20c73fdf":"code","b72f287a":"code","c84e979c":"code","952ed7a0":"code","6e6b0b60":"code","c1d9151b":"code","c6ba3950":"code","ef762a00":"code","01f8a37b":"code","c2898e22":"code","f546cef5":"code","1d0f6383":"code","821ec3da":"code","8b08fc03":"code","d5431bca":"code","bc1ed2f6":"code","66deeea8":"markdown","930bd436":"markdown","cc811b12":"markdown","d1444b44":"markdown","6ee05a9b":"markdown"},"source":{"d5539d37":"import numpy as np\nimport pandas as pd\nimport os\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom scipy.interpolate import UnivariateSpline\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport collections\n\npd.set_option(\"display.max_column\", 999)\nprint(os.listdir(\"..\/input\"))","328c53f7":"tourney_results = pd.read_csv('..\/input\/WNCAATourneyDetailedResults.csv')\nseeds = pd.read_csv('..\/input\/WNCAATourneySeeds.csv')\nregular_results = pd.read_csv('..\/input\/WRegularSeasonDetailedResults.csv')","7fe3f4e6":"tourney_results.shape","7cd9445b":"seeds.shape","bf620137":"regular_results.shape","451902c4":"regular_results.head()","4cb907dc":"regular_results.groupby('Season').mean()","eae41884":"tourney_results.groupby('Season').mean()","8b913971":"seeds.head()","6591afac":"tourney_results.head()","395a42f0":"all(regular_results.columns == tourney_results.columns)","d5385c85":"regular_results.columns","9f5be8f1":"regular_results_swap = regular_results[[\n    'Season', 'DayNum', 'LTeamID', 'LScore', 'WTeamID', 'WScore', 'WLoc', 'NumOT', \n    'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', \n    'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']]","3ea2751c":"regular_results.head()","7b8f535b":"regular_results_swap.head()","6a7d872f":"regular_results_swap.loc[regular_results['WLoc'] == 'H', 'WLoc'] = 'A'\nregular_results_swap.loc[regular_results['WLoc'] == 'A', 'WLoc'] = 'H'\nregular_results.columns.values[6] = 'location'\nregular_results_swap.columns.values[6] = 'location'","709357dd":"regular_results.head()","3776e5d6":"regular_results_swap.head()","d17cdc93":"regular_results.columns = [x.replace('W','T1_').replace('L','T2_') for x in list(regular_results.columns)]\nregular_results_swap.columns = [x.replace('L','T1_').replace('W','T2_') for x in list(regular_results.columns)]","216ed889":"regular_results.head()","5ab09ba3":"regular_results_swap.head()","c62015c2":"regular_data = pd.concat([regular_results, regular_results_swap]).sort_index().reset_index(drop = True)","842f007d":"regular_data.head(10)","d7997dc1":"tourney_results = pd.read_csv('..\/input\/WNCAATourneyDetailedResults.csv')\nseeds = pd.read_csv('..\/input\/WNCAATourneySeeds.csv')\nregular_results = pd.read_csv('..\/input\/WRegularSeasonDetailedResults.csv')\n\ndef prepare_data(df):\n    dfswap = df[['Season', 'DayNum', 'LTeamID', 'LScore', 'WTeamID', 'WScore', 'WLoc', 'NumOT', \n    'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', \n    'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']]\n\n    dfswap.loc[df['WLoc'] == 'H', 'WLoc'] = 'A'\n    dfswap.loc[df['WLoc'] == 'A', 'WLoc'] = 'H'\n    df.columns.values[6] = 'location'\n    dfswap.columns.values[6] = 'location'    \n      \n    df.columns = [x.replace('W','T1_').replace('L','T2_') for x in list(df.columns)]\n    dfswap.columns = [x.replace('L','T1_').replace('W','T2_') for x in list(dfswap.columns)]\n\n    output = pd.concat([df, dfswap]).reset_index(drop=True)\n    output.loc[output.location=='N','location'] = '0'\n    output.loc[output.location=='H','location'] = '1'\n    output.loc[output.location=='A','location'] = '-1'\n    output.location = output.location.astype(int)\n    \n    output['PointDiff'] = output['T1_Score'] - output['T2_Score']\n    \n    return output","a957d3e5":"regular_data = prepare_data(regular_results)\ntourney_data = prepare_data(tourney_results)","cc5fad9d":"regular_data.shape","87cd04ee":"tourney_data.shape","4200e24c":"regular_data.head()","6368c0eb":"tourney_data.head()","de67be59":"tourney_data.columns","1367e502":"boxscore_cols = ['T1_Score', 'T2_Score', \n        'T1_FGM', 'T1_FGA', 'T1_FGM3', 'T1_FGA3', 'T1_FTM', 'T1_FTA', 'T1_OR', 'T1_DR', 'T1_Ast', 'T1_TO', 'T1_Stl', 'T1_Blk', 'T1_PF', \n        'T2_FGM', 'T2_FGA', 'T2_FGM3', 'T2_FGA3', 'T2_FTM', 'T2_FTA', 'T2_OR', 'T2_DR', 'T2_Ast', 'T2_TO', 'T2_Stl', 'T2_Blk', 'T2_PF', \n        'PointDiff']\n\nboxscore_cols = [\n        'T1_FGM', 'T1_FGA', 'T1_FGM3', 'T1_FGA3', 'T1_OR', 'T1_Ast', 'T1_TO', 'T1_Stl', 'T1_PF', \n        'T2_FGM', 'T2_FGA', 'T2_FGM3', 'T2_FGA3', 'T2_OR', 'T2_Ast', 'T2_TO', 'T2_Stl', 'T2_Blk',  \n        'PointDiff']\n\nfuncs = [np.mean]","1ca22711":"season_statistics = regular_data.groupby([\"Season\", 'T1_TeamID'])[boxscore_cols].agg(funcs)\nseason_statistics.head()","b31cfe29":"season_statistics = regular_data.groupby([\"Season\", 'T1_TeamID'])[boxscore_cols].agg(funcs).reset_index()\nseason_statistics.head()","e2d3ab5a":"season_statistics.columns = [''.join(col).strip() for col in season_statistics.columns.values]\nseason_statistics.head()","2431e523":"season_statistics_T1 = season_statistics.copy()\nseason_statistics_T2 = season_statistics.copy()\n\nseason_statistics_T1.columns = [\"T1_\" + x.replace(\"T1_\",\"\").replace(\"T2_\",\"opponent_\") for x in list(season_statistics_T1.columns)]\nseason_statistics_T2.columns = [\"T2_\" + x.replace(\"T1_\",\"\").replace(\"T2_\",\"opponent_\") for x in list(season_statistics_T2.columns)]\nseason_statistics_T1.columns.values[0] = \"Season\"\nseason_statistics_T2.columns.values[0] = \"Season\"","ef46cac1":"season_statistics_T1.head()","d3b27ebc":"season_statistics_T2.head()","9d233d32":"tourney_data.head()","d83560e6":"tourney_data = tourney_data[['Season', 'DayNum', 'T1_TeamID', 'T1_Score', 'T2_TeamID' ,'T2_Score']]\ntourney_data.head()","afbf4c9b":"tourney_data = pd.merge(tourney_data, season_statistics_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, season_statistics_T2, on = ['Season', 'T2_TeamID'], how = 'left')","f512facb":"tourney_data.head()","308c904f":"last14days_stats_T1 = regular_data.loc[regular_data.DayNum>118].reset_index(drop=True)\nlast14days_stats_T1['win'] = np.where(last14days_stats_T1['PointDiff']>0,1,0)\nlast14days_stats_T1 = last14days_stats_T1.groupby(['Season','T1_TeamID'])['win'].mean().reset_index(name='T1_win_ratio_14d')\n\nlast14days_stats_T2 = regular_data.loc[regular_data.DayNum>118].reset_index(drop=True)\nlast14days_stats_T2['win'] = np.where(last14days_stats_T2['PointDiff']<0,1,0)\nlast14days_stats_T2 = last14days_stats_T2.groupby(['Season','T2_TeamID'])['win'].mean().reset_index(name='T2_win_ratio_14d')","7ba2be0f":"tourney_data = pd.merge(tourney_data, last14days_stats_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, last14days_stats_T2, on = ['Season', 'T2_TeamID'], how = 'left')","4e34d75e":"regular_season_effects = regular_data[['Season','T1_TeamID','T2_TeamID','PointDiff']].copy()\nregular_season_effects['T1_TeamID'] = regular_season_effects['T1_TeamID'].astype(str)\nregular_season_effects['T2_TeamID'] = regular_season_effects['T2_TeamID'].astype(str)\nregular_season_effects['win'] = np.where(regular_season_effects['PointDiff']>0,1,0)\nmarch_madness = pd.merge(seeds[['Season','TeamID']],seeds[['Season','TeamID']],on='Season')\nmarch_madness.columns = ['Season', 'T1_TeamID', 'T2_TeamID']\nmarch_madness.T1_TeamID = march_madness.T1_TeamID.astype(str)\nmarch_madness.T2_TeamID = march_madness.T2_TeamID.astype(str)\nregular_season_effects = pd.merge(regular_season_effects, march_madness, on = ['Season','T1_TeamID','T2_TeamID'])\nregular_season_effects.shape","7c945bd2":"def team_quality(season):\n    formula = 'win~-1+T1_TeamID+T2_TeamID'\n    glm = sm.GLM.from_formula(formula=formula, \n                              data=regular_season_effects.loc[regular_season_effects.Season==season,:], \n                              family=sm.families.Binomial()).fit()\n    \n    quality = pd.DataFrame(glm.params).reset_index()\n    quality.columns = ['TeamID','quality']\n    quality['Season'] = season\n    quality['quality'] = np.exp(quality['quality'])\n    quality = quality.loc[quality.TeamID.str.contains('T1_')].reset_index(drop=True)\n    quality['TeamID'] = quality['TeamID'].apply(lambda x: x[10:14]).astype(int)\n    return quality","6cd67a62":"glm_quality = pd.concat([team_quality(2010),\n                         team_quality(2011),\n                         team_quality(2012),\n                         team_quality(2013),\n                         team_quality(2014),\n                         team_quality(2015),\n                         team_quality(2016),\n                         team_quality(2017),\n                         team_quality(2018)]).reset_index(drop=True)","3f5681d4":"glm_quality_T1 = glm_quality.copy()\nglm_quality_T2 = glm_quality.copy()\nglm_quality_T1.columns = ['T1_TeamID','T1_quality','Season']\nglm_quality_T2.columns = ['T2_TeamID','T2_quality','Season']","2fc18bbf":"tourney_data = pd.merge(tourney_data, glm_quality_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, glm_quality_T2, on = ['Season', 'T2_TeamID'], how = 'left')","2dcb710f":"seeds.head()","7676283a":"seeds['seed'] = seeds['Seed'].apply(lambda x: int(x[1:3]))\nseeds.head()","b967aa7e":"seeds_T1 = seeds[['Season','TeamID','seed']].copy()\nseeds_T2 = seeds[['Season','TeamID','seed']].copy()\nseeds_T1.columns = ['Season','T1_TeamID','T1_seed']\nseeds_T2.columns = ['Season','T2_TeamID','T2_seed']","83cffb8b":"tourney_data = pd.merge(tourney_data, seeds_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, seeds_T2, on = ['Season', 'T2_TeamID'], how = 'left')","a66e2329":"tourney_data[\"Seed_diff\"] = tourney_data[\"T1_seed\"] - tourney_data[\"T2_seed\"]","2783f805":"y = tourney_data['T1_Score'] - tourney_data['T2_Score']\ny.describe()","9bd5f2b1":"features = list(season_statistics_T1.columns[2:999]) + \\\n    list(season_statistics_T2.columns[2:999]) + \\\n    list(seeds_T1.columns[2:999]) + \\\n    list(seeds_T2.columns[2:999]) + \\\n    list(last14days_stats_T1.columns[2:999]) + \\\n    list(last14days_stats_T2.columns[2:999]) + \\\n    [\"Seed_diff\"] + [\"T1_quality\",\"T2_quality\"]\n\nlen(features)","cdc2c34b":"X = tourney_data[features].values\ndtrain = xgb.DMatrix(X, label = y)","0934cad3":"def cauchyobj(preds, dtrain):\n    labels = dtrain.get_label()\n    c = 5000 \n    x =  preds-labels    \n    grad = x \/ (x**2\/c**2+1)\n    hess = -c**2*(x**2-c**2)\/(x**2+c**2)**2\n    return grad, hess","6bb945fa":"param = {} \n#param['objective'] = 'reg:linear'\nparam['eval_metric'] =  'mae'\nparam['booster'] = 'gbtree'\nparam['eta'] = 0.05 #change to ~0.02 for final run\nparam['subsample'] = 0.35\nparam['colsample_bytree'] = 0.7\nparam['num_parallel_tree'] = 3 #recommend 10\nparam['min_child_weight'] = 40\nparam['gamma'] = 10\nparam['max_depth'] =  3\nparam['silent'] = 1\n\nprint(param)","48c3d60b":"xgb_cv = []\nrepeat_cv = 3 # recommend 10\n\nfor i in range(repeat_cv): \n    print(f\"Fold repeater {i}\")\n    xgb_cv.append(\n        xgb.cv(\n          params = param,\n          dtrain = dtrain,\n          obj = cauchyobj,\n          num_boost_round = 3000,\n          folds = KFold(n_splits = 5, shuffle = True, random_state = i),\n          early_stopping_rounds = 25,\n          verbose_eval = 50\n        )\n    )","5e5be62f":"iteration_counts = [np.argmin(x['test-mae-mean'].values) for x in xgb_cv]\nval_mae = [np.min(x['test-mae-mean'].values) for x in xgb_cv]\niteration_counts, val_mae","20c73fdf":"oof_preds = []\nfor i in range(repeat_cv):\n    print(f\"Fold repeater {i}\")\n    preds = y.copy()\n    kfold = KFold(n_splits = 5, shuffle = True, random_state = i)    \n    for train_index, val_index in kfold.split(X,y):\n        dtrain_i = xgb.DMatrix(X[train_index], label = y[train_index])\n        dval_i = xgb.DMatrix(X[val_index], label = y[val_index])  \n        model = xgb.train(\n              params = param,\n              dtrain = dtrain_i,\n              num_boost_round = iteration_counts[i],\n              verbose_eval = 50\n        )\n        preds[val_index] = model.predict(dval_i)\n    oof_preds.append(np.clip(preds,-30,30))","b72f287a":"plot_df = pd.DataFrame({\"pred\":oof_preds[0], \"label\":np.where(y>0,1,0)})\nplot_df[\"pred_int\"] = plot_df[\"pred\"].astype(int)\nplot_df = plot_df.groupby('pred_int')['label'].mean().reset_index(name='average_win_pct')\n\nplt.figure()\nplt.plot(plot_df.pred_int,plot_df.average_win_pct)","c84e979c":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n        \n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    \n    print(f\"logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","952ed7a0":"plot_df = pd.DataFrame({\"pred\":oof_preds[0], \"label\":np.where(y>0,1,0), \"spline\":spline_model[0](oof_preds[0])})\nplot_df[\"pred_int\"] = (plot_df[\"pred\"]).astype(int)\nplot_df = plot_df.groupby('pred_int')['spline','label'].mean().reset_index()\n\nplt.figure()\nplt.plot(plot_df.pred_int,plot_df.spline)\nplt.plot(plot_df.pred_int,plot_df.label)","6e6b0b60":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","c1d9151b":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4)] = 0.0\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","c6ba3950":"#looking for upsets\npd.concat(\n    [tourney_data[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score > tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score > tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score > tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score > tourney_data.T2_Score)]]\n)   \n\n#https:\/\/en.wikipedia.org\/wiki\/NCAA_Division_I_Women%27s_Basketball_Tournament_upsets","ef762a00":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","01f8a37b":"val_cv = []\nspline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    \n    val_cv.append(pd.DataFrame({\"y\":np.where(y>0,1,0), \"pred\":spline_fit, \"season\":tourney_data.Season}))\n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") \n    \nval_cv = pd.concat(val_cv)\nval_cv.groupby('season').apply(lambda x: log_loss(x.y, x.pred))","c2898e22":"sub = pd.read_csv('..\/input\/WSampleSubmissionStage2.csv')\nsub.head()","f546cef5":"sub[\"Season\"] = 2018\nsub[\"T1_TeamID\"] = sub[\"ID\"].apply(lambda x: x[5:9]).astype(int)\nsub[\"T2_TeamID\"] = sub[\"ID\"].apply(lambda x: x[10:14]).astype(int)\nsub.head()","1d0f6383":"sub = pd.merge(sub, season_statistics_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, season_statistics_T2, on = ['Season', 'T2_TeamID'])\nsub = pd.merge(sub, glm_quality_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, glm_quality_T2, on = ['Season', 'T2_TeamID'])\nsub = pd.merge(sub, seeds_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, seeds_T2, on = ['Season', 'T2_TeamID'])\nsub = pd.merge(sub, last14days_stats_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, last14days_stats_T2, on = ['Season', 'T2_TeamID'])\nsub[\"Seed_diff\"] = sub[\"T1_seed\"] - sub[\"T2_seed\"]\nsub.head()","821ec3da":"Xsub = sub[features].values\ndtest = xgb.DMatrix(Xsub)","8b08fc03":"sub_models = []\nfor i in range(repeat_cv):\n    print(f\"Fold repeater {i}\")\n    sub_models.append(\n        xgb.train(\n          params = param,\n          dtrain = dtrain,\n          num_boost_round = int(iteration_counts[i] * 1.05),\n          verbose_eval = 50\n        )\n    )","d5431bca":"sub_preds = []\nfor i in range(repeat_cv):\n    sub_preds.append(np.clip(spline_model[i](np.clip(sub_models[i].predict(dtest),-30,30)),0.025,0.975))\n    \nsub[\"Pred\"] = pd.DataFrame(sub_preds).mean(axis=0)\n\nsub.loc[(sub.T1_seed==1) & (sub.T2_seed==16), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==2) & (sub.T2_seed==15), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==3) & (sub.T2_seed==14), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==4) & (sub.T2_seed==13), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==16) & (sub.T2_seed==1), 'Pred'] = 0.0\nsub.loc[(sub.T1_seed==15) & (sub.T2_seed==2), 'Pred'] = 0.0\nsub.loc[(sub.T1_seed==14) & (sub.T2_seed==3), 'Pred'] = 0.0\nsub.loc[(sub.T1_seed==13) & (sub.T2_seed==4), 'Pred'] = 0.0\n\nsub[['ID','Pred']].to_csv(\"paris-submission.csv\", index = None)","bc1ed2f6":"tourney_results2018 = pd.read_csv('..\/input\/NCAA_2018_Solution_Womens.csv')\ntourney_results2018 = tourney_results2018[tourney_results2018.Pred!=-1].reset_index(drop=True)\ntourney_results2018.columns = ['ID', 'label']\ntourney_results2018 = pd.merge(tourney_results2018, sub, on = 'ID')\nlog_loss(tourney_results2018.label, tourney_results2018.Pred)","66deeea8":"# Load the data!","930bd436":"# Data preparation!","cc811b12":"# Time to build some models!","d1444b44":"# Submission time!","6ee05a9b":"# Feature engineering!"}}