{"cell_type":{"43d45f7d":"code","73ad36fd":"code","d05b88ad":"code","d11dd0dd":"code","f09db67e":"code","51ba3472":"code","68703fa4":"code","9a2abf91":"code","5c8a4fa2":"code","3f60e0ef":"code","42bdf5a8":"code","7b071fc0":"code","5b4d5db4":"code","ab18ceea":"code","2ef313ad":"code","582945aa":"code","944b089d":"code","9efb7a08":"code","5eeed7e6":"code","163c5251":"code","520a0fe0":"code","68382c8d":"code","ebcd896b":"code","41d4805f":"code","d96f2f64":"code","4309da28":"code","0eab3d76":"code","c6179026":"code","6e56b869":"markdown","0672181a":"markdown","95f6b308":"markdown","742cb62c":"markdown","fecd5551":"markdown","a34781ef":"markdown","15574e8c":"markdown","078ffcfd":"markdown","2b0c7559":"markdown","e0421998":"markdown","7569af26":"markdown","26ca5d2f":"markdown","5e648de5":"markdown"},"source":{"43d45f7d":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt","73ad36fd":"# columns of dataset\ncolumns = [\"height\",\"lenght\",\"area\",\"eccen\",\"p_black\",\"p_and\",\"mean_tr\",\"blackpix\",\"blackand\",\"wb_trans\",\"class\"]\n\ndf = pd.read_csv(\"..\/input\/pageblocks\/page-blocks.data\" ,sep=\"\\s+\" ,\n                 names=columns,\n                 header=None,\n                )","d05b88ad":"df.shape  # dimension of dataset","d11dd0dd":"df.head()","f09db67e":"df.info()","51ba3472":"df.isna().sum() #no missing value is present","68703fa4":"df.describe().T  #statistical analysis","9a2abf91":"df['class'].plot(kind='hist') # highly imbalanced dataset","5c8a4fa2":"i=1\nplt.figure(figsize=(20,10))\n\nfor col in df.columns:\n    plt.subplot(3,4,i)\n    plt.hist(df[col],bins=50)\n    plt.tight_layout()\n    plt.title(col,fontsize=15)\n    i+=1","3f60e0ef":"i=1\nplt.figure(figsize=(20,10))\n\nfor col in df.drop(columns='class').columns:\n    plt.subplot(3,4,i)\n    plt.scatter(df['class'],df[col])\n    plt.tight_layout()\n    plt.title(col,fontsize=15)\n    i+=1","42bdf5a8":"i=1\nplt.figure(figsize=(20,10))\n\nfor col in df.columns:\n    plt.subplot(3,4,i)\n    plt.boxplot(df[col])\n    plt.tight_layout()\n    plt.title(col,fontsize=15)\n    i+=1","7b071fc0":"df = df[df['height']<250] \ndf = df[df['area']<35000]\ndf = df[df['eccen']<300]\ndf = df[df['mean_tr']<4000]\ndf = df[df['blackand']<30000]\ndf = df[df['wb_trans']<2000]","5b4d5db4":"i=1\nplt.figure(figsize=(20,10))\n\nfor col in df.columns:\n    plt.subplot(3,4,i)\n    plt.boxplot(df[col])\n    plt.tight_layout()\n    plt.title(col,fontsize=15)\n    i+=1","ab18ceea":"from sklearn.model_selection import cross_val_score\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report","2ef313ad":"from sklearn.utils import shuffle\ndf = shuffle(df)","582945aa":"X = df.drop(columns=['class'])\nY = df['class']","944b089d":"X= (X-X.mean())\/X.std()","9efb7a08":"GBN = GaussianNB()","5eeed7e6":"scores = pd.DataFrame(columns=['MIN','MAX','AVG']) #dataframe for storing scores","163c5251":"score5 = cross_val_score(GBN,X,Y,cv=5,verbose=3)","520a0fe0":"print(\"MIN - \" , score5.min())\nprint(\"AVG - \" , score5.mean())\nprint(\"MAX - \" , score5.max())","68382c8d":"score10 = cross_val_score(GBN,X,Y,cv=10,verbose=3)","ebcd896b":"print(\"MIN - \" , score10.min())\nprint(\"AVG - \" , score10.mean())\nprint(\"MAX - \" , score10.max())","41d4805f":"for i in range(1,20):\n    score = cross_val_score(GBN,X,Y,cv=i+1)\n    scores.loc[i+1] = [score.min() , score.max() , score.mean()]","d96f2f64":"plt.figure(figsize=(20,5))\n\nplt.plot(scores['MIN'],marker='o')\nplt.plot(scores['MAX'],marker='o')\nplt.plot(scores['AVG'],marker='o')\n\nplt.xticks(np.arange(1, 22, 1.0))\nplt.legend(['MIN','MAX','AVG'],fontsize=15)\nplt.title(\"Accuracy Vs N_Split\" ,fontsize=20)","4309da28":"scores2 = pd.DataFrame(columns=['MIN','MAX','AVG']) #dataframe for storing scores","0eab3d76":"#calculate the cross validation score on different split point in stratified k-fold and store into dataframe\nfor i in range(1,20):\n    cv = StratifiedKFold(n_splits=i+1,shuffle=True)\n    score = cross_val_score(GBN,X,Y,cv=cv)               #Crossvalidation\n    scores2.loc[i+1] = [score.min() , score.max() , score.mean()]","c6179026":"plt.figure(figsize=(20,5))\n\nplt.plot(scores2['MIN'],marker='o')\nplt.plot(scores2['MAX'],marker='o')\nplt.plot(scores2['AVG'],marker='o')\n\nplt.xticks(np.arange(1, 22, 1.0))\nplt.legend(['MIN','MAX','AVG'],fontsize=15)\nplt.title(\"Accuracy Vs N_Split\" ,fontsize=20)","6e56b869":"#### 10-Fold Cross-validation","0672181a":"#### Stratified K-Fold\nStratification is the process of rearranging the data so as to ensure that each fold is a good representative of the whole.<br>\nIt is generally a better approach when dealing with both bias and variance. A randomly selected fold might not adequately represent the minor class, particularly in cases where there is a huge class imbalance. ","95f6b308":"### After Removing Outliers ","742cb62c":"### Distribution of all attributes","fecd5551":"### Calculate the cross validation score on different split point in k-fold\n","a34781ef":"   The problem consists in classifying all the blocks of the page\n   layout of a document that has been detected by a segmentation\n   process. This is an essential step in document analysis\n   in order to separate text from graphic areas. Indeed, \n   the five classes are:<br><b>text (1)<br> horizontal line (2)<br>\n   picture (3)<br> vertical line (4)<br> graphic (5)<\/b>\n  \n   <b>Relevant Information Paragraph:<\/b><br\n   The 5473 examples comes from 54 distinct documents. <br>\n   Each observation concerns one block. <br>\n   All attributes are numeric.<br>\n   Data are in a format readable by C4.5.<br>\n\n   <b>Number of Instances: 5473.<\/b>\n\n  <b>Number of Attributes :<\/b><br>\n   <b>height<\/b>:   integer.         | Height of the block.<br>\n   <b>lenght<\/b>:   integer.     | Length of the block. <br>\n   <b>area<\/b>:     integer.    | Area of the block (height * lenght);<br>\n   <b>eccen<\/b>:    continuous.  | Eccentricity of the block (lenght \/ height);<br>\n   <b>p_black<\/b>:  continuous.  | Percentage of black pixels within the block (blackpix \/ area);<br>\n   <b>p_and<\/b>:    continuous.        | Percentage of black pixels after the application of the Run Length Smoothing Algorithm (RLSA) (blackand \/ area);<br>\n   <b>mean_tr<\/b>:  continuous.      | Mean number of white-black transitions (blackpix \/ wb_trans);<br>\n   <b>blackpix<\/b>: integer.    | Total number of black pixels in the original bitmap of the block.<br>\n   <b>blackand<\/b>: integer.        | Total number of black pixels in the bitmap of the block after the RLSA.<br>\n   <b>wb_trans<\/b>: integer.          | Number of white-black transitions in the original bitmap of the block.<br>","15574e8c":"#### Normalization ( z-score )","078ffcfd":"### Removing Outliers ","2b0c7559":"### Relationship between other attributes with target attribute","e0421998":"#### 5-Fold Cross-validation","7569af26":"### Gaussian NB","26ca5d2f":"### Boxplot of all attributes ( Outlier Detection )","5e648de5":"#### K-Fold :\n That method is known as \u201ck-fold cross validation\u201d. It\u2019s easy to follow and implement. Below are the steps for it:\n\n1. Randomly split your entire dataset into k\u201dfolds\u201d\n2. For each k-fold in dataset, build model on k \u2013 1 folds of the dataset. Then, test the model to check the effectiveness for kth fold\n3. Record the error on each of the predictions\n4. Repeat this until each of the k-folds has served as the test set\n5. The average of k recorded errors is called the cross-validation error and will serve as performance metric for the model\n"}}