{"cell_type":{"e2cc6eed":"code","6ccb1909":"code","21290953":"code","6b5fe39a":"code","d08e7a56":"code","dcacad56":"code","78d86d64":"code","5e711bf7":"code","8bcd09f2":"code","f4fd5a1c":"code","311d6cc6":"code","2dd8a34b":"code","4bec41b3":"code","b35fbffd":"code","27cd3cd4":"code","90d20308":"code","d999733b":"code","7c6a50e6":"code","48bcfd21":"code","d4e478fa":"code","ddf98497":"code","a4b56790":"code","2fdd97ee":"code","47bd624e":"code","45215fb3":"code","7c151608":"code","fc7df971":"code","80522f18":"code","aae2e60d":"code","4bb6855e":"code","97225798":"code","f4a969f2":"code","b29e63fd":"code","8c565a91":"code","b497ac52":"code","795fccbb":"code","e863f6d9":"code","a0b8d4c3":"code","d92f2c31":"code","08c17399":"code","2419d053":"code","318a71a1":"code","aed9c292":"code","c71090ba":"code","e9523e5b":"code","f894f06b":"code","0557ef86":"code","e012751d":"code","045900e3":"code","515500a4":"code","221e2409":"code","668fe496":"code","dd4ef169":"code","0189a6f6":"code","0ab1a1f0":"code","0429903a":"code","3b922cf8":"code","da08662e":"code","a4e62da8":"code","bfbf717d":"code","85d833b7":"code","b99f600c":"code","a1a6ef18":"code","065f731f":"code","770a636f":"code","b9b636cb":"code","3cc2a59e":"code","264aec34":"code","e656c081":"code","ee4b6f43":"code","039579ff":"code","12784005":"code","0c4e7c05":"markdown","99c2be8d":"markdown","9d70ce6f":"markdown","1fa0680d":"markdown","de433ca1":"markdown","d0e6e7eb":"markdown","bcdecfd4":"markdown","f768f4ce":"markdown","b2764382":"markdown","fafb7502":"markdown","f35da4c7":"markdown","3eaae186":"markdown","40f34ad6":"markdown","9c824268":"markdown","af9d70d5":"markdown","d6df2aca":"markdown","17b11c5f":"markdown","21f09a25":"markdown","686fed18":"markdown"},"source":{"e2cc6eed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ccb1909":"#Importing Libraries\n#Basic libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n\n#Fetaure Selection\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n#Modelling Algoritm\nfrom sklearn.cluster import KMeans\n\n#Model Evaluation\nfrom yellowbrick.cluster import SilhouetteVisualizer","21290953":"#Load All The Data\nolist_orders = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')\nolist_products = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_products_dataset.csv')\nolist_items = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv')\nolist_customers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_customers_dataset.csv')\nolist_payments = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')\nolist_sellers = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv')\nolist_geolocation = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv')\nolist_reviews = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv')\nolist_product_category_name = pd.read_csv('\/kaggle\/input\/brazilian-ecommerce\/product_category_name_translation.csv') #Untuk menerjemahkan dari bahasa Brazil ke Bahasa Inggris","6b5fe39a":"#Menggabungkan semua data-data \nall_data = olist_orders.merge(olist_items, on='order_id', how='left')\nall_data = all_data.merge(olist_payments, on='order_id', how='inner')\nall_data = all_data.merge(olist_reviews, on='order_id', how='inner')\nall_data = all_data.merge(olist_products, on='product_id', how='inner')\nall_data = all_data.merge(olist_customers, on='customer_id', how='inner')\nall_data = all_data.merge(olist_sellers, on='seller_id', how='inner')\nall_data = all_data.merge(olist_product_category_name,on='product_category_name',how='inner')\n#all_data = all_data.merge(olist_geolocation, on='seller_zip_code_prefix', how='inner')","d08e7a56":"#Melihat berapa persen data yang kosong pad setiap kolomnya\nround((all_data.isnull().sum()\/ len(all_data)*100),2)","dcacad56":"#Melihat info yang ada pada data baik jumlah kolom, input sampai memori\nall_data.info()","78d86d64":"#Meruba tipe data pada kolom tanggal agar seusai tipe datanya \ndate_columns = ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date',\n             'order_estimated_delivery_date', 'shipping_limit_date', 'review_creation_date', 'review_answer_timestamp'] \nfor col in date_columns:\n    all_data[col] = pd.to_datetime(all_data[col], format='%Y-%m-%d %H:%M:%S')","5e711bf7":"#Melihat apakah ada data yang duplikat\nprint('Data yang duplikat: ',all_data.duplicated().sum())","8bcd09f2":"#Membuat kolom Month_order untuk data exploration\nall_data['Month_order'] = all_data['order_purchase_timestamp'].dt.to_period('M').astype('str')","f4fd5a1c":"#Memilih input mulai dari 01-2017 sampai 08-2018\n#Karena terdapat data yang kurang seimbang dengan rata-rata setiap bulan pada data sebelum 01-2017 dan setelah 08-2018\n#berdasarkan data pembelian \/ order_purchase_timestamp\nstart_date = \"2017-01-01\"\nend_date = \"2018-08-31\"\n\nafter_start_date = all_data['order_purchase_timestamp'] >= start_date\nbefore_end_date = all_data['order_purchase_timestamp'] <= end_date\nbetween_two_dates = after_start_date & before_end_date\nall_data = all_data.loc[between_two_dates]","311d6cc6":"#Membagi data berdasarkan tipe datanya\nonly_numeric = all_data.select_dtypes(include=['int', 'float'])\nonly_object = all_data.select_dtypes(include=['object'])\nonly_time = all_data.select_dtypes(include=['datetime', 'timedelta'])","2dd8a34b":"#Melihat berapa persen data yang kosong pad setiap kolomnya\nround((all_data.isnull().sum()\/ len(all_data)*100),2)","4bec41b3":"#Menangani input yang kosong pada kolom order_approved_at \nmissing_1 = all_data['order_approved_at'] - all_data['order_purchase_timestamp']\nprint(missing_1.describe())\nprint('='*50)\nprint('Median dari waktu order sampai approved: ',missing_1.median())\n\n#kita ambil median karena ada yang langsung di approve dari waktu dia order,ada juga yang sampai 60 hari\nadd_1 = all_data[all_data['order_approved_at'].isnull()]['order_purchase_timestamp'] + missing_1.median()\nall_data['order_approved_at']= all_data['order_approved_at'].replace(np.nan, add_1)","b35fbffd":"#Menangani input yang kosong pada kolom order_approved_at \nall_data[['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date']].head()","27cd3cd4":"#Menangani input yang kosong pada kolom order_delivered_carrier_date\nmissing_2 = all_data['order_delivered_carrier_date'] - all_data['order_approved_at']\nprint(missing_2.describe())\nprint('='*50)\nprint('Median dari waktu apporved sampai dikirim: ',missing_2.median())\n\n#kita ambil median karena ada yang di dikirim dalam 21 jam dari waktu dia approved,ada juga yang sampai 107 hari\nadd_2 = all_data[all_data['order_delivered_carrier_date'].isnull()]['order_approved_at'] + missing_2.median()\nall_data['order_delivered_carrier_date']= all_data['order_delivered_carrier_date'].replace(np.nan, add_2)","90d20308":"#Menangani input yang kosong pada kolom order_delivered_customer_date\nmissing_3 = all_data['order_delivered_customer_date'] - all_data['order_delivered_carrier_date']\nprint(missing_3.describe())\nprint('='*50)\nprint('Median dari waktu dikirim sampai diterima customer: ',missing_3.median())\n\n#kita ambil median karena ada yang waktu pengiriman dalam -17 Hari berarti dia outliers,ada juga yang waktu pengiriman sampai 205 hari\nadd_3 = all_data[all_data['order_delivered_customer_date'].isnull()]['order_delivered_carrier_date'] + missing_3.median()\nall_data['order_delivered_customer_date']= all_data['order_delivered_customer_date'].replace(np.nan, add_3)","d999733b":"#Menangani kolom review_comment_title dan review_comment_message\n#Karena jumlah input yang kosong sangat banyak, dan tidak mungkin untuk diisi dikarenakan tidak ada variabel yang dapat\n#digunakan untuk menghitungnya. Karena ini adalah komentar danjudul komentartnya\n#Maka kita akan hilangkan kolom tersebut\n\nall_data = all_data.drop(['review_comment_title', 'review_comment_message'], axis=1)","7c6a50e6":"#Menangani input kosong pada kolom product_weight_g, product_length_cm, product_height_cm, product_width_cm\n#Karena jumlahnya hanya 1, maka kita drop saja\nall_data = all_data.dropna()","48bcfd21":"#Cek kembali apakah masih ada input yang kosong\nround((all_data.isnull().sum()\/len(all_data)*100),2)","d4e478fa":"#Menyesuaikan tipe data dengan input datanya\nall_data = all_data.astype({'order_item_id': 'int64', \n                            'product_name_lenght': 'int64',\n                            'product_description_lenght':'int64', \n                            'product_photos_qty':'int64'})","ddf98497":"#Membuat kolom order_process_time untuk melihat berapa lama waktu yang dibutuhkan dari mulai order sampai\n#barang diterima oleh customer\nall_data['order_process_time'] = all_data['order_delivered_customer_date'] - all_data['order_purchase_timestamp']","a4b56790":"#Membuat kolom order_delivery_time untuk melihat berapa lama waktu pengiriman yang dibutuhkan tiap order\nall_data['order_delivery_time'] = all_data['order_delivered_customer_date'] - all_data['order_delivered_carrier_date']","2fdd97ee":"#Membuat kolom order_time_accuracy untuk melihat apakah dari estimasi waktu sampai ada yang sesuai atau terlambat\n#Jika nilainya + positive, maka dia lebih cepat sampai, jika 0 maka dia tepat waktu, namun jika - negatif maka dia terlambat\nall_data['order_accuracy_time'] = all_data['order_estimated_delivery_date'] - all_data['order_delivered_customer_date'] ","47bd624e":"#Membuat kolom order_approved_time untuk melihat berapa lama waktu yang dibutuhkan mulai dari order sampai approved\nall_data['order_approved_time'] = all_data['order_approved_at'] - all_data['order_purchase_timestamp'] ","45215fb3":"#Membuat kolom review_send_timeuntuk mengetahui berapa lama waktu dikirimnya survey kepuasan setelah barang diterima\nall_data['review_send_time'] = all_data['review_creation_date'] - all_data['order_delivered_customer_date']","7c151608":"#Membuat kolom review_answer_time untuk mengetahui berapa lama waktu yang dibutuhkan untuk mengisi review setelah\n#dikirim survey kepuasan pelanggan.\nall_data['review_answer_time'] = all_data['review_answer_timestamp'] - all_data['review_creation_date']","fc7df971":"#Menggabungkan kolom product_length_cm, product_height_cm, dan product_width_cm untuk membuatnya menjadi volume\n#dengan kolom baru yaitu product_volume\nall_data['product_volume'] = all_data['product_length_cm'] * all_data['product_height_cm'] * all_data['product_width_cm']","80522f18":"#Produk apa yang paling laris?\ntop_20_product_best_seller = all_data['order_item_id'].groupby(all_data['product_category_name_english']).sum().sort_values(ascending=False)[:20]\n#print(top_20_product_best_seller)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_20_product_best_seller.index,x=top_20_product_best_seller.values)\nplt.title('Top 20 Most Selling Product',fontsize=20)\nplt.xlabel('Total Product Sold',fontsize=17)\nplt.ylabel('Product category',fontsize=17)","aae2e60d":"#Kota mana yang paling banyak belanja?\ntop_20_city_shopping = all_data['order_item_id'].groupby(all_data['customer_city']).sum().sort_values(ascending=False)[:20]\n#print(top_20_city_shopping)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_20_city_shopping.index,x=top_20_city_shopping.values)\nplt.title('Top 20 Most City Shopping',fontsize=20)\nplt.xlabel('Total Product',fontsize=17)\nplt.ylabel('City',fontsize=17)","4bb6855e":"#Siapa customer paling banyak belanja berdasarkan jumlah order?\ntop_10_customer_shopping = all_data['order_item_id'].groupby(all_data['customer_id']).count().sort_values(ascending=False)[:10]\n#print(top_10_customer_shopping)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_10_customer_shopping.index,x=top_10_customer_shopping.values)\nplt.title('Top 10 Customer Based on Order Amount',fontsize=20)\nplt.xlabel('Amount of Product',fontsize=17)\nplt.ylabel('Customer ID',fontsize=17)","97225798":"#Siapa customer yang paling banyak pengeluaranya dalam belanja berdasarkan harga?\ntop_10_customer_shopping = all_data['payment_value'].groupby(all_data['customer_id']).sum().sort_values(ascending=False)[:10]\n#print(top_10_customer_shopping)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_10_customer_shopping.index,x=top_10_customer_shopping.values)\nplt.title('Top 10 Customer Based on Spending',fontsize=20)\nplt.xlabel('Spending Amount',fontsize=17)\nplt.ylabel('Customer ID',fontsize=17)","f4a969f2":"#Seller mana yang paling banyak jual?\ntop_10_seller_order = all_data['order_item_id'].groupby(all_data['seller_id']).sum().sort_values(ascending=False)[:10]\n#print(top_10_seller_order)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_10_seller_order.index,x=top_10_seller_order.values)\nplt.title('Top 10 Seller Base on Sold Product',fontsize=20)\nplt.xlabel('Total Product',fontsize=17)\nplt.ylabel('Seller ID',fontsize=17)","b29e63fd":"#Seller mana yang paling banyak penghasilan berdasarkan revenue?\ntop_10_seller_order = all_data['price'].groupby(all_data['seller_id']).sum().sort_values(ascending=False)[:10]\n#print(top_10_seller_order)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_10_seller_order.index,x=top_10_seller_order.values)\nplt.title('Top 10 Seller Based on Revenue',fontsize=20)\nplt.xlabel('Amount of Revenue',fontsize=17)\nplt.ylabel('Seller ID',fontsize=17)","8c565a91":"#Seller mana yang paling banyak penghasilan berdasarkan revenue?\ntop_10_seller_order = all_data[all_data['review_score'] == 5].groupby(all_data['seller_id']).sum().sort_values(by=['review_score'],ascending=False)[:10]\n#print(top_10_seller_order)\n\n#Kita plot untuk visualisasinya\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=top_10_seller_order.index,x=top_10_seller_order.review_score)\nplt.title('Top 10 Seller Based on Review Score',fontsize=20)\nplt.xlabel('Amount of Revenue',fontsize=17)\nplt.ylabel('Seller ID',fontsize=17)","b497ac52":"#Sebaran status order customer\nround(all_data.order_status.value_counts() \/ len(all_data),2)","795fccbb":"#Berapa median waktu dari order sampai diterima yang dibutuhkan dalam setiap order perbulanya?\norder_time_by_month = all_data['order_process_time'].groupby(all_data['Month_order']).median(numeric_only=False) #masukan argumen numeric_only untuk menghitung timedelta\n\n#Membuat visualisasinya\nfig=plt.figure(figsize=(16,9))\nplt.plot(order_time_by_month.index, order_time_by_month.values, marker='o')\nplt.title('Median Order Time By Month',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n#         ['January', 'February', 'March','April', 'Mei', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n          rotation=90)\nplt.ylabel('Time (Day)',fontsize=17)","e863f6d9":"#Berapa median waktu pengiriman yang dibutuhkan dalam setiap order perbulanya?\ndelivery_time_by_month = all_data['order_delivery_time'].groupby(all_data['Month_order']).median(numeric_only=False) #masukan argumen numeric_only untuk menghitung timedelta\n\n#Membuat visualisasinya\nfig=plt.figure(figsize=(16,9))\nplt.plot(delivery_time_by_month.index, delivery_time_by_month.values \/ 86400, marker='o')\nplt.title('Median Delivery Time By Month',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n         # ['January', 'February', 'March','April', 'Mei', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n          rotation=90)\nplt.ylabel('Time (Day)',fontsize=17)","a0b8d4c3":"#Berapa median akurasi waktu dari estimasi pengiriman dan samapi customer dalam setiap order perbulanya?\naccuracy_time_by_month = all_data['order_accuracy_time'].groupby(all_data['Month_order']).median(numeric_only=False) #masukan argumen numeric_only untuk menghitung timedelta\n\n#Membuat visualisasinya\nfig=plt.figure(figsize=(16,9))\nplt.plot(accuracy_time_by_month.index, accuracy_time_by_month.values \/ 86400, marker='o')\nplt.title('Median Accuracy Time By Month',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n          #['January', 'February', 'March','April', 'Mei', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n          rotation=90)\nplt.ylabel('Time (Day)',fontsize=17)","d92f2c31":"#Berapa median lama waktu sampai diapproved dari waktu order dalam setiap order perbulanya?\napproved_time_by_month = all_data['order_approved_time'].groupby(all_data['Month_order']).median(numeric_only=False) #masukan argumen numeric_only untuk menghitung timedelta\n\n#Membuat visualisasinya\nfig=plt.figure(figsize=(16,9))\nplt.plot(approved_time_by_month.index, approved_time_by_month.values \/ 60, marker='o')\nplt.title('Median Approved Time By Month',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n         # ['January', 'February', 'March','April', 'Mei', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n          rotation=90)\nplt.ylabel('Time (Minutes)',fontsize=17)","08c17399":"#10 kategori produk dengan waktu tercepat mulai dari order sampai diterima customer\norder_time_by_category = pd.DataFrame(all_data['order_process_time'].groupby(all_data['product_category_name_english']).median(numeric_only=False).sort_values(ascending=True)[:10])\n\n#Visualiasi\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=order_time_by_category.index, x=order_time_by_category['order_process_time'].dt.days)\nplt.title('Top 10 Fastest Product Category Order Time',fontsize=20)\nplt.xlabel('Order Time (Day)',fontsize=17)\nplt.ylabel('Product Category',fontsize=17)","2419d053":"#10 kategori produk dengan waktu paling lama mulai dari order sampai diterima customer\norder_time_by_category = pd.DataFrame(all_data['order_process_time'].groupby(all_data['product_category_name_english']).median(numeric_only=False).sort_values(ascending=False)[:10])\n\n#Visualiasi\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=order_time_by_category.index, x=order_time_by_category['order_process_time'].dt.days)\nplt.title('Top 10 Slowest Product Category Order Time',fontsize=20)\nplt.xlabel('Order Time (Day)',fontsize=17)\nplt.ylabel('Product Category',fontsize=17)","318a71a1":"#Berapakah Order setiap bulanya?\norder_count_by_month = all_data['order_item_id'].groupby(all_data['Month_order']).sum()\n\n#Visualisasi\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=order_count_by_month.values, x=order_count_by_month.index, color=\"Salmon\")\nplt.title('Monthly Order',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(rotation=90)\nplt.ylabel('Amount Order',fontsize=17)","aed9c292":"#Berapakah Revenue setiap bulanya?\nrevenue_count_by_month = all_data['payment_value'].groupby(all_data['Month_order']).sum()\n\n#Visualisasi\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=revenue_count_by_month.values, x=revenue_count_by_month.index, color=\"Salmon\")\nplt.title('Monthly Revenue',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(rotation=90)\nplt.ylabel('Amount Revenue',fontsize=17)","c71090ba":"#Berapaka customer aktif setiap bulanya?\ncustomer_active_by_month = all_data.groupby('Month_order')['customer_unique_id'].nunique().reset_index()\n\n#Visualisasi\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=customer_active_by_month['customer_unique_id'], x=customer_active_by_month['Month_order'], color=\"Salmon\")\nplt.title('Monthly Active User',fontsize=20)\nplt.xlabel('Month',fontsize=17)\nplt.xticks(rotation=90)\nplt.ylabel('Amount of User',fontsize=17)","e9523e5b":"#melihat tanggal awal dan terakhir pembelian \nprint('Min : {}, Max : {}'.format(min(all_data.order_purchase_timestamp), max(all_data.order_purchase_timestamp)))","f894f06b":"#Menghitung RFM\nimport datetime as dt\npin_date = max(all_data.order_purchase_timestamp) + dt.timedelta(1)\n\n#Membuat dataframe RFM\nrfm = all_data.groupby('customer_unique_id').agg({\n    'order_purchase_timestamp' : lambda x: (pin_date - x.max()).days,\n    'order_item_id' : 'count', \n    'payment_value' : 'sum'})\n\n#Merubah nama kolom\nrfm.rename(columns = {'order_purchase_timestamp' : 'Recency', \n                      'order_item_id' : 'Frequency', \n                      'payment_value' : 'Monetary'}, inplace = True)\n\nrfm.head()","0557ef86":"#Kita akan menggunakan Inter Quartile Range untuk menangani ouliers\n#Menentukan Limit\ndef limit(i):\n    Q1 = rfm[i].quantile(0.5)\n    Q3 = rfm[i].quantile(0.95)\n    IQR = Q3 - Q1\n    \n    #menentukan upper limit biasa dan upper limit ekstim\n    lower_limit = rfm[i].quantile(0.5) - (IQR * 1.5)\n    lower_limit_extreme = rfm[i].quantile(0.5) - (IQR * 3)\n    upper_limit = rfm[i].quantile(0.95) + (IQR * 1.5)\n    upper_limit_extreme = rfm[i].quantile(0.5) + (IQR * 3)\n    print('Lower Limit:', lower_limit)\n    print('Lower Limit Extreme:', lower_limit_extreme)\n    print('Upper Limit:', upper_limit)\n    print('Upper Limit Extreme:', upper_limit_extreme)\n\n#Mengitung persen outliers dari data    \ndef percent_outliers(i):\n    Q1 = rfm[i].quantile(0.5)\n    Q3 = rfm[i].quantile(0.95)\n    IQR = Q3 - Q1\n    \n    #menentukan upper limit biasa dan upper limit ekstim\n    lower_limit = rfm[i].quantile(0.5) - (IQR * 1.5)\n    lower_limit_extreme = rfm[i].quantile(0.5) - (IQR * 3)\n    upper_limit = rfm[i].quantile(0.95) + (IQR * 1.5)\n    upper_limit_extreme = rfm[i].quantile(0.95) + (IQR * 3)\n    #melihat persenan outliers terhadap total data\n    print('Lower Limit: {} %'.format(rfm[(rfm[i] >= lower_limit)].shape[0]\/ rfm.shape[0]*100))\n    print('Lower Limit Extereme: {} %'.format(rfm[(rfm[i] >= lower_limit_extreme)].shape[0]\/rfm.shape[0]*100))\n    print('Upper Limit: {} %'.format(rfm[(rfm[i] >= upper_limit)].shape[0]\/ rfm.shape[0]*100))\n    print('Upper Limit Extereme: {} %'.format(rfm[(rfm[i] >= upper_limit_extreme)].shape[0]\/rfm.shape[0]*100))","e012751d":"#Melihat outliers pada kolom Recency\nsns.boxplot(x=rfm[\"Recency\"])","045900e3":"#Melihat ouliers pada kolom Frequency\nsns.boxplot(x=rfm[\"Frequency\"])","515500a4":"#Melihat ouliers pada kolom Monetary\nsns.boxplot(x=rfm[\"Monetary\"])","221e2409":"print(limit('Monetary'))\nprint('-'*50)\nprint(percent_outliers('Monetary'))","668fe496":"#Menghilangkan outliers pada kolom Monetary yang lebih dari 1500 karena diluar dari 95% batas maksimal atas persebaran data\noutliers1_drop = rfm[(rfm['Monetary'] > 1500)].index\nrfm.drop(outliers1_drop, inplace=True)","dd4ef169":"#Membuat group customer berdasarkan Recency, Frequency, dan Monetary\n#Karena Recency jika semakin sedikit harinya semakin bagus, maka akan membuat urutanya secara terbalik\nr_labels = range(3, 0, -1)\nr_groups = pd.qcut(rfm.Recency, q = 3, labels = r_labels).astype('int')\n\n#Karena Frequency sangat banyak pada nilai 1, maka tidak bisa menggunakan qcut, \n#karena nilainya akan condong ke yang paling banyak\nf_groups = pd.qcut(rfm.Frequency.rank(method='first'), 3).astype('str')\n#rfm['F'] = np.where((rfm['Frequency'] != 1) & (rfm['Frequency'] != 2), 3, rfm.Frequency)\n\nm_labels = range(1, 4)\nm_groups = pd.qcut(rfm.Monetary, q = 3, labels = m_labels).astype('int')","0189a6f6":"#Membuat kolom berdasarkan group yang telah dibuat\nrfm['R'] = r_groups.values\nrfm['F'] = f_groups.values\nrfm['M'] = m_groups.values","0ab1a1f0":"rfm['F'].value_counts()","0429903a":"#Merubah input kolom F menjadi categorical\nrfm['F'] = rfm['F'].replace({'(0.999, 30871.333]' : 1,\n                             '(30871.333, 61741.667]' : 2,\n                             '(61741.667, 92612.0]' : 3}).astype('int')","3b922cf8":"#Menggabungkan ketiga kolom tersebut\nrfm['RFM_Segment'] = rfm.apply(lambda x: str(x['R']) + str(x['F']) + str(x['M']), axis = 1)\nrfm['RFM_Score'] = rfm[['R', 'F', 'M']].sum(axis = 1)\nrfm.head()","da08662e":"#Membuat label berdasarkan RFM_Score\nscore_labels = ['Bronze', 'Silver', 'Gold']\nscore_groups = pd.qcut(rfm.RFM_Score, q=3, labels = score_labels)\nrfm['RFM_Level'] = score_groups.values\nrfm.head()","a4e62da8":"#Visualisasi nilai RFM\nfig, ax = plt.subplots(figsize=(16, 9))\nplt.subplot(3, 1, 1); sns.distplot(rfm.Recency, label = 'Recency')\nplt.subplot(3, 1, 2); sns.distplot(rfm['Frequency'], kde_kws={'bw': 0.1}, label='Frequency')\nplt.subplot(3, 1, 3); sns.distplot(rfm.Monetary, label = 'Monetary')\n\nplt.tight_layout()\nplt.show()","bfbf717d":"#Membuat distribusi data menjadi normal\nfrom scipy import stats\n\nrfm_log = rfm[['Recency', 'Monetary']].apply(np.log, axis = 1).round(3)\nrfm_log['Frequency'] = stats.boxcox(rfm['Frequency'])[0]\nrfm_log.head()","85d833b7":"#Membuat semua data dala ukuran yang sama dengan cara scaling\nscaler = StandardScaler()\nminmax = MinMaxScaler()\nrfm_scaled = scaler.fit_transform(rfm_log)","b99f600c":"#Membuat dataframe baru setelah di-scaling\nrfm_scaled = pd.DataFrame(rfm_scaled, index = rfm.index, columns = rfm_log.columns)\nrfm_scaled.head()","a1a6ef18":"#Visualisasi kembali RFM setalah log transformasi dan scaling\nfig, ax = plt.subplots(figsize=(16, 9))\nplt.subplot(3, 1, 1); sns.distplot(rfm_scaled.Recency, label = 'Recency')\nplt.subplot(3, 1, 2); sns.distplot(rfm_scaled.Frequency, kde_kws={'bw': 0.1}, label='Frequency')\nplt.subplot(3, 1, 3); sns.distplot(rfm_scaled.Monetary, label = 'Monetary')\n\nplt.tight_layout()\nplt.show()","065f731f":"#Mencari titik optimal cluster dengan ELbow Method\nwcss = {}\n\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters= i, init= 'k-means++', max_iter= 300)\n    kmeans.fit(rfm_scaled)\n    wcss[i] = kmeans.inertia_\n    \n#Visualisasi Elbow Method\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.pointplot(x = list(wcss.keys()), y = list(wcss.values()))\nplt.title('Elbow Method')\nplt.xlabel('K Numbers')\nplt.ylabel('WCSS')\nplt.show()","770a636f":"#Memilih n_clusters = 4 sesuai dengan elbow method\nclus = KMeans(n_clusters= 2, n_init=10, init= 'k-means++', max_iter= 300)\nclus.fit(rfm_scaled)","b9b636cb":"#Mausukka hasil cluster ke data rfm awal\nrfm['K_Cluster'] = clus.labels_\nrfm.head()","3cc2a59e":"#Visualisasi Silhouette Analysis\nvisualizer = SilhouetteVisualizer(clus)\n\nvisualizer.fit(rfm_scaled) \nvisualizer.poof() ","264aec34":"#Masukkan semua ke dalam data yang sudah di scaling \nrfm_scaled['K_Cluster'] = clus.labels_\nrfm_scaled['RFM_Level'] = rfm.RFM_Level\nrfm_scaled.reset_index(inplace = True)\nrfm_scaled.head()","e656c081":"#melting data frame yang telah dibuat\nrfm_melted = pd.melt(frame= rfm_scaled, id_vars= ['customer_unique_id', 'RFM_Level', 'K_Cluster'], \n                     var_name = 'Metrics', value_name = 'Value')\nrfm_melted.head()","ee4b6f43":"#Visualisasi snake plot\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.lineplot(x = 'Metrics', y = 'Value', hue = 'RFM_Level', data = rfm_melted)\nplt.title('Snake Plot of RFM')\nplt.legend(loc = 'upper right')","039579ff":"#Visualisasi snake plot dengan K-Means\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.lineplot(x = 'Metrics', y = 'Value', hue = 'K_Cluster', data = rfm_melted)\nplt.title('Snake Plot of K_cluster')\nplt.legend(loc = 'upper right')","12784005":"#Berapaka jumlah customer berdasarkan kategorinya?\nrfm_cus_level = rfm_scaled.groupby('RFM_Level')['customer_unique_id'].nunique().reset_index()\n\n#Visualisasi\nfig=plt.figure(figsize=(16,9))\nsns.barplot(y=rfm_cus_level['customer_unique_id'], x=rfm_cus_level['RFM_Level'], palette=\"Greens_d\")\nplt.title('Customer Based on RFM Level',fontsize=20)\nplt.xlabel('RFMLevel',fontsize=17)\nplt.ylabel('Amount of Customer',fontsize=17)","0c4e7c05":"## **3.3 RFM Percentile** \n\nPada tahapan ini akan dibuat group pelanggan\/customer berdarkan Recency, Frequency, dan Monetary dengan membaginya menjadi 3**** group di setiapnya.","99c2be8d":"Seperti yang kita lihat pada kedua grafik di atas, kita dapat simpulkan berdasarkan cluster:\n1. Bronze (1 & 0): Frequencynya tidak terlalu tinggi dibandingkan nominal transaksinya namun waktu terakhir dia transaksi cepat\n2. Silver (2): Frequencya cukup tinggi dan nominal transaksinya cukup tinggi namun waktu terakhir dia transaksi cukup lama\n3. Gold (3):  Frequency dia untuk belanja itu tinggi dan nominal yang dihabiskannya juga banyak, namun waktu terakhir transaksi lama","9d70ce6f":"# **3. Modelling** \n\nPada tahapan ini akan dilakukan modeling menggunakan algoritma clustering yaitu K-Means berdasarkan RFM (Recency, Frequency, dan Monetary) analysis untuk customer segmentation.","1fa0680d":"# **1. KONTEKS**\n\nDataset ini merupaka dari Olist, yaitu sebuah marketplace terbesar di Brazil. Data ini dikumpulkan dalam rentang waktu tahun 2016 - 2018. Olist menghubungkan usaha kecil dari seluruh Brazil untuk masuk ke dalam jaringan mereka dengan sangat mudah cukup bermodalkan kontrak. Para pengusaha tersebut dapat menjual produk mereka melalui platform Olist dan langsung dikirimkan ke customer mereka dengan kurir yang sudah bekeraja sama dengan Olist.\n\nSetelah customer membeli produknya dari Olist, penjual akan mendapatkan pemberitahuan untuk segera memenuhi pesanan customer. Ketika customer menerima produk, customer dapat memberikan rating kepuasan dan komentar terkait pelayanan yang diberikan penjual memalui email yang dikirimakn.\n\nData yang dikumplan terdapat di 9 file yang berbeda, sehingga perlu digabungkan untuk mendapatkan keseluruhan data berdasarkan parameter yang kita inginkan. Di bawah ini merupakan skema keterhubungan antar datanya untuk dijadikan patokan saat melakuakn penggabungan data","de433ca1":"## **2.4 Data Exploration** \n\nTahapan ini dilakukan eskplorasi data untuk mendapatkan insight atau info yang dapat berguna bagi perusahaan","d0e6e7eb":"## **2.1 Handling Variabel**\n\nTahapan ini bertujuan untuk menyesuaikan tipe data berdasarkan inputnya dan juga menghilangkan duplikasi pada data yang kita punya","bcdecfd4":"##  **3.4 Handling Skewness & Scaling**\n\nUntuk data  yang akan masuk ke dalam algortimna K-Means, diusahakan distribusinya normal karena akan memudahkan pembentukan clusternya kemudian jangan lupa untuk menyamakan skala dari setiap kolom yang ada karena akan diukur berdasarkan jarak antar tiap input.","f768f4ce":"## **3.2 Handling Outliers**\n\nPada tahapan ini akan dilakukan pemberishan data dari input yang mungkin salah atau anomali dari data yang kita miliki.","b2764382":"# **4. KESIMPULAN**\n\nSeoerti tujuan pada project kali ini yaitu memudahkan bagian marketing untuk melakukan campaign atau promosi berdasarkan segmentasi pelanggan, berikut adalah kesimpulanya:\n\n1. Bronze : Pelanggan yang yang tidak terlalu sering melakukan pembelian dan nominal transaksinya rendah namun waktu terakhir dia transaksi cepat. Pelanggan tipe ini ada sebanyak 36000.\n    - Action: Bisa dicoba dengan memberikan diskon atau penawaran dengan nominal yang terjangkau agar convertion ratenya meningkat karena jumlah pelanggan kategori Bronze cukup banyak\n2. Silver : Pelanggan yang cukup sering melakukan pembelian dan nominal transaksinya cukup tinggi namun waktu terakhir dia transaksi cukup lama. Pelanggan tipe ini ada sebanyak 42000.\n    - Action: DIberikan kombinasi antara diskon dan campaign setelah transaksi untuk meningkatkan pembelian dengan menggunakan personilized email yang dapat memberikan sentuhan personal.\n3. Gold : Pelanggan yang sering belanja dan nominal transaksinya juga banyak, namun waktu terakhir transaksi lama. Pelanggan tipe ini ada sebanyak 15000.\n    - Action: Lebih sering diberikan campaign etelah melakukan transaksi agar kembali melakukan pembelian. Bisa juga dengan memebrikan reward karena mereka lebih serng melakukan transaksi dan nominalnya tinggi.","fafb7502":"## **3.6 Evaluation** \n\nSetelah kita membuat model dengan menggunakan KMeans, sekarang kita akan mengevaluasi model tersebut apakah cluster yang dibuatnya benar-benar berbeda dari setiap cluster dengan menggunakan Silhouuette Analysis. Semakin dia mendekati angka 1 maka perbedaan dia dengan clsuter yang lain semakin jelas, jika nilainya mendekati 0, maka dia semakin menyerupai cluster didekatnya dan jika -1 maka dia salah membuat cluster.","f35da4c7":"Kolom Frequency tidak dilakukan penghilangan outliers karena outliers disisni memang kemungkinan pelanggan melkaukan transaksi yang sangat banyak karena data ini diambil dari 2017-2018","3eaae186":"## **3.1 RFM Analysis** \n\nRFM analysis merupakan sebuah metode yang digunakan untuk melihat pola pada pelanggan berdasarkan gaya kebiasaan mereka dalam membeli:\n\n1. Recency = Kapan waktu terakhir kali si pelanggan melakukan transaksi\n \n2. Frequency = Sebarapa sering si pelanggan untuk melakukan pembelian\n\n3. Monetary = Sebarapa banyak pelanggan menghabiskan uang\n","40f34ad6":"## **2.2 Handling Missing Values**\n\nPada tahapan ini dilakukan untuk menghilangkan input-input yang kosong dengan menggunakan feature yang lain atau menggunakan statistika (mean\/median)","9c824268":"## **3.5 K-Means Clustering**\n\nDi sini akan dilakukan clustering dengan menggunakan algoritma K-Means untuk mendapatkan cluster yang optimal dari data RFM","af9d70d5":"## **3.5 Visualization**\n\nKita akan memvisualisasi untuk memudahkan meilhat cluster yang kita buat  dengan cluster dari algortima KMeans. Kita akan menggunakan 'Snake Plot' dalam dunia marketing untuk melihat kategori apa saja yang masuk kedalam sebuah cluster.","d6df2aca":"# **2. DATA PREPROCESSING**\n\nPada tahapan ini,kita akan memberiskan data dari berbagai noise\/gangguan(input yang kosong,outliers dll) agar data yang masuk ke dalam model sudah bersih dan siap dilakukan modelling. ","17b11c5f":"# ****============ CUSTOMER SEGMENTATION =============****\n\nPada notebook ini, saya akan melakukan ekslporasi data dan mencoba membuat segmentasi pelanggan pada sebuah market place di Brazil menggunakan metode RFM Analysis. Tujuan dari project ini adalah untuk membatu tim marketing dalam menentukan target marketnya agar lebih tepat sasaran. \nNotebook ini akan saya bagi menjadi beberapa tahapan sebagai berikut:\n\n1. Konteks\n2. Data Preprocessing\n3. Modelling\n4. Kesimpulan\n\nNotebook ini tidak terlalu dalam membahas teorinya, namun saya akan memberikan alasan-alasan kenapa saya melakukan langkah-langkah tersebut. Mari kita mulai!","21f09a25":"![](https:\/\/i.imgur.com\/HRhd2Y0.png)","686fed18":"## **2.3. Feature Extraction** \n\nPada tahapan ini dilakukan penambahan kolom baru yang berisi perhitungan dari beberapa kolom untuk mendapatkan feature yang baru"}}