{"cell_type":{"1cbb3121":"code","c6a1c066":"code","e310fb67":"code","f1d1922f":"code","9369a9b0":"code","f1282a3e":"code","5fff74d6":"code","fac5b5ce":"code","2601ce8b":"code","3fa5185d":"code","d6b1f27b":"code","416c8fe0":"code","ccd9f5f1":"code","89f10937":"code","8947bd64":"code","aed952a5":"code","58f76ec1":"code","df5fe6fe":"code","eb0827f9":"code","51b030f3":"code","3a6369ed":"code","b7634cdf":"code","3eefc686":"code","44ae2873":"code","7175125a":"code","320041c4":"code","aacdac5f":"code","41240a7c":"code","e532f3dc":"code","32b120e7":"code","c0f13a37":"code","f6a5a8ee":"code","ca9e6662":"code","a5cf30ae":"markdown","01b1e74c":"markdown","84d0ff10":"markdown","b16066ac":"markdown","22bf51b3":"markdown","1ab59d3f":"markdown","0eb6cc95":"markdown","cce46eb6":"markdown","d34d8490":"markdown","5f0dedd8":"markdown","e003bb5c":"markdown","a35a06e5":"markdown","7186bf9c":"markdown","065f2d2b":"markdown","a5eea4dd":"markdown","3872a330":"markdown","63196006":"markdown"},"source":{"1cbb3121":"!pip install -qq transformers","c6a1c066":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom collections import defaultdict\nfrom textwrap import wrap\n\nimport os\nimport transformers\nfrom transformers import BertModel, BertTokenizer, AdamW, get_linear_schedule_with_warmup\nimport tensorflow as tf\n\nimport torch\nfrom torch import nn, optim\nfrom torch.utils.data import Dataset, DataLoader\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\nsns.set(style='whitegrid', palette='muted', font_scale=1.2)\nHAPPY_COLORS_PALETTE = [\"#01BEFE\", \"#FFDD00\", \"#FF7D00\", \"#FF006D\", \"#ADFF02\", \"#8F00FF\"]\nsns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))\nrcParams['figure.figsize'] = 12, 8\n\nRANDOM_SEED = 42\nnp.random.seed(RANDOM_SEED)\ntorch.manual_seed(RANDOM_SEED)\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","e310fb67":"os.listdir('..\/input\/nlp-getting-started')","f1d1922f":"train = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ncombined = pd.concat([train,test], axis=0)\ncombined.drop('target',inplace=True, axis=1)\ncombined.info()","9369a9b0":"y = train.target.copy()\nX = train.drop('target',axis=1)","f1282a3e":"sns.countplot(y)\nplt.show()","5fff74d6":"# There's an uncased version too, uncase\/case refers to word case, but in the case of tweets, upper case words probably carry more disaster sentiment\npre_trainer = 'bert-base-cased'\ntokenizer = BertTokenizer.from_pretrained(pre_trainer)","fac5b5ce":"# Example using sample\nsample_txt = combined.text.iloc[0]\ntokens = tokenizer.tokenize(sample_txt)\ntoken_ids = tokenizer.convert_tokens_to_ids(tokens)\n\nprint(f' Sentence: {sample_txt}')\nprint(f'   Tokens: {tokens}')\nprint(f'Token IDs: {token_ids}')","2601ce8b":"# Special Token IDs\n\n# SEP - marker for ending a sentence\nprint(tokenizer.sep_token, tokenizer.sep_token_id)\n\n# CLS - must be added to the start of each sentence so bert knows we're doing a classification task\nprint(tokenizer.cls_token, tokenizer.cls_token_id)\n\n# PAD - for padding sentences to equal length\nprint(tokenizer.pad_token, tokenizer.pad_token_id)\n\n# UNK - unknown token\nprint(tokenizer.unk_token, tokenizer.unk_token_id)","3fa5185d":"# The above tokens can be added through the encode_plus method\nencoding = tokenizer.encode_plus(\n  sample_txt,\n  max_length=32,\n  truncation=True,\n  add_special_tokens=True, # Add '[CLS]' and '[SEP]'\n  return_token_type_ids=False,\n  padding='max_length',\n  return_attention_mask=True,\n  return_tensors='pt',  # Return PyTorch tensors but you can return tf tensors or np arrays by setting this to tf or np\n)\nencoding.keys()\n# dict_keys(['input_ids', 'attention_mask'])","d6b1f27b":"tokenizer.convert_ids_to_tokens(encoding['input_ids'][0])","416c8fe0":"# get token lengths of each text\ntoken_lens = combined.text.apply(lambda x: len(tokenizer.encode(x, truncation = True, max_length=512)))","ccd9f5f1":"sns.distplot(token_lens)\nplt.xlim([0, 256]);\nplt.xlabel('Token count');","89f10937":"max_len = 100\nbatch_size = 16 # dataset is pretty small","8947bd64":"class DataGenerator(Dataset):\n    def __init__(self, text, targets, tokenizer, max_len):\n        self.text = text\n        self.targets = targets\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n    \n    def __len__(self):\n        return len(self.text)\n    \n    def __getitem__(self, item):\n        text = str(self.text[item])\n        target = self.targets[item]\n        \n        encoding = self.tokenizer.encode_plus(\n            text, \n            add_special_tokens=True,\n            max_length = self.max_len,\n            truncation=True,\n            padding='max_length',\n            return_token_type_ids=False,\n            return_attention_mask=True,\n            return_tensors='pt'\n        )\n        return {\n      'text': text,\n      'input_ids': encoding['input_ids'].flatten(),\n      'attention_mask': encoding['attention_mask'].flatten(),\n      'targets': torch.tensor(target, dtype=torch.long)\n    }\n\ndef data_loader(df, tokenizer, max_len, batch_size):\n    ds = DataGenerator(\n        text=df.text.to_numpy(),\n        targets=df.target.to_numpy(),\n        tokenizer=tokenizer,\n        max_len=max_len\n    )\n    \n    return DataLoader(\n        ds,\n        batch_size=batch_size,\n        num_workers=4)","aed952a5":"train_data_loader = data_loader(train, tokenizer, max_len, batch_size)","58f76ec1":"data = next(iter(train_data_loader))\ndata.keys()","df5fe6fe":"print(data['input_ids'].shape)\nprint(data['attention_mask'].shape)\nprint(data['targets'].shape)","eb0827f9":"# First, a small scale example using our encoder that we created for our sample text\nbert = BertModel.from_pretrained(pre_trainer)\n\n# last_hidden_state is a sequence of hidden states of the last layer of the model\nlast_hidden_state, pooled_output = bert(\n    input_ids=encoding['input_ids'],\n    attention_mask=encoding['attention_mask']\n)\n","51b030f3":"last_hidden_state.shape","3a6369ed":"pooled_output.shape","b7634cdf":"class SentimentClassifier(nn.Module):\n    \n    def __init__(self, n_classes):\n        super(SentimentClassifier, self).__init__()\n        self.bert = BertModel.from_pretrained(pre_trainer)\n        self.drop = nn.Dropout(p=0.5)\n        self.out = nn.Linear(self.bert.config.hidden_size, n_classes)\n        \n    def forward(self, input_ids, attention_mask):\n        _, pooled_output = self.bert(\n        input_ids=input_ids,\n        attention_mask=attention_mask\n        )\n        output = self.drop(pooled_output)\n        return self.out(output)","3eefc686":"model = SentimentClassifier(2) # 2 classes 1 for disaster and 0 for not\nmodel = model.to(device)","44ae2873":"input_ids = data['input_ids'].to(device)\nattention_mask = data['attention_mask'].to(device)\n\nprint(input_ids.shape) # batch size x seq length\nprint(attention_mask.shape) # batch size x seq length","7175125a":"torch.nn.functional.softmax(model(input_ids, attention_mask), dim=1)","320041c4":"EPOCHS = 10\noptimizer = AdamW(model.parameters(), lr=2e-5, correct_bias=False)\ntotal_steps = len(train_data_loader) * EPOCHS\nscheduler = get_linear_schedule_with_warmup(\n  optimizer,\n  num_warmup_steps=0,\n  num_training_steps=total_steps\n)\nloss_fn = nn.CrossEntropyLoss().to(device)","aacdac5f":"def train_epoch(\n  model,\n  data_loader,\n  loss_fn,\n  optimizer,\n  device,\n  scheduler,\n  n_examples\n):\n  model = model.train()\n  losses = []\n  correct_predictions = 0\n  for d in data_loader:\n    input_ids = d[\"input_ids\"].to(device)\n    attention_mask = d[\"attention_mask\"].to(device)\n    targets = d[\"targets\"].to(device)\n    outputs = model(\n      input_ids=input_ids,\n      attention_mask=attention_mask\n    )\n    _, preds = torch.max(outputs, dim=1)\n    loss = loss_fn(outputs, targets)\n    correct_predictions += torch.sum(preds == targets)\n    losses.append(loss.item())\n    loss.backward()\n    # prevents exploding gradients\n    nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n    optimizer.step()\n    scheduler.step()\n    optimizer.zero_grad()\n  return correct_predictions.double() \/ n_examples, np.mean(losses)","41240a7c":"def eval_model(model, data_loader, loss_fn, device, n_examples):\n  model = model.eval()\n  losses = []\n  correct_predictions = 0\n  with torch.no_grad():\n    for d in data_loader:\n      input_ids = d[\"input_ids\"].to(device)\n      attention_mask = d[\"attention_mask\"].to(device)\n      targets = d[\"targets\"].to(device)\n      outputs = model(\n        input_ids=input_ids,\n        attention_mask=attention_mask\n      )\n      _, preds = torch.max(outputs, dim=1)\n      loss = loss_fn(outputs, targets)\n      correct_predictions += torch.sum(preds == targets)\n      losses.append(loss.item())\n  return correct_predictions.double() \/ n_examples, np.mean(losses)","e532f3dc":"%%time\nhistory = defaultdict(list)\nbest_accuracy = 0\nfor epoch in range(EPOCHS):\n  print(f'Epoch {epoch + 1}\/{EPOCHS}')\n  print('-' * 10)\n  train_acc, train_loss = train_epoch(\n    model,\n    train_data_loader,\n    loss_fn,\n    optimizer,\n    device,\n    scheduler,\n    len(train)\n  )\n  print(f'Train loss {train_loss} accuracy {train_acc}')\n  history['train_acc'].append(train_acc)\n  history['train_loss'].append(train_loss)\n    \n  if train_acc > best_accuracy:\n    torch.save(model.state_dict(), 'best_model_state.bin')\n    best_accuracy = train_acc","32b120e7":"plt.plot(history['train_acc'], label='train accuracy')\nplt.title('Training history')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend()\nplt.ylim([0, 1]);","c0f13a37":"encodes = test.text.apply(lambda x: tokenizer.encode_plus(\n            x, \n            add_special_tokens=True,\n            max_length = max_len,\n            truncation=True,\n            padding='max_length',\n            return_token_type_ids=False,\n            return_attention_mask=True,\n            return_tensors='pt'\n        ))\ninput_ids = [i['input_ids'] for i in encodes]\nattention_mask = [i['attention_mask'] for i in encodes]","f6a5a8ee":"predictions = []\nfor i, j in zip(input_ids, attention_mask):\n    i = i.to(device)\n    j = j.to(device)\n    output = model(i, j)\n    _, prediction = torch.max(output, dim=1)\n    predictions.append(prediction.item())","ca9e6662":"submission = pd.concat([test.id, pd.Series(predictions)], axis=1)\nsubmission.rename(columns = {0:'target'}, inplace=True)\nsubmission.to_csv('submission.csv',index=False)","a5cf30ae":"This is the hidden state of each of our 32 tokens. 768 is the number of hidden units in the feedforward-networks. Our pooled output also has 768 hidden units","01b1e74c":"# Model Creation","84d0ff10":"The output is the probabilities that a text is either a 0 or a 1","b16066ac":"### Big thanks to Venelin of Curiousily whose BERT tutorial I used and repurposed to fit this competition. You can find his tutorial [here](https:\/\/curiousily.com\/posts\/sentiment-analysis-with-bert-and-hugging-face-using-pytorch-and-python\/)","22bf51b3":"It seems all of the texts contain less than 100 tokens so we'll use that as our max length","1ab59d3f":"Some recommendations for fine tuning from the BERT paper  \nBatch size: 16, 32  \nLearning rate (Adam): 5e-5, 3e-5, 2e-5  \nNumber of epochs: 2, 3, 4","0eb6cc95":"# Choosing Sequence Length\nHow to choose the max padding length","cce46eb6":"# Data Preprocessing","d34d8490":"Negatives outnumber positives by ~1000","5f0dedd8":"Using this info, we can now create a classifier that uses the BERT model","e003bb5c":"id - a unique identifier for each tweet  \ntext - the text of the tweet  \nlocation - the location the tweet was sent from (may be blank)  \nkeyword - a particular keyword from the tweet (may be blank)  \ntarget - in train.csv only, this denotes whether a tweet is about a real disaster (1) or not (0)  \n\nNo missing values in the most important feature, text, but...  \n87 missing values in keyword  \n3638 missing values in location","a35a06e5":"Our tweets have been tokenized and padded. We can view what our tokens are tokenizing","7186bf9c":"# Test Predictions","065f2d2b":"## Class Imbalance?","a5eea4dd":"## Tokenizing our data","3872a330":"# Training","63196006":"# Dataset Creation"}}