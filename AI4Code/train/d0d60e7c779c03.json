{"cell_type":{"59d4d446":"code","c1209ed8":"code","cba5b89d":"code","b975f25d":"code","7d53d97b":"code","45c50c15":"markdown"},"source":{"59d4d446":"# General IO\nimport os\nimport json\n# For dataset overview and temporary storage.\nimport pandas as pd\n# For decompressing masks\nimport ast\nfrom PIL import Image\nfrom io import BytesIO\n# For debug visualizaiton\nfrom matplotlib import pyplot as plt\n# For tracking progress\nfrom tqdm import tqdm","c1209ed8":"# Directory where dataset is stored.\nDIR = \"\/kaggle\/input\/ocr-data\"","cba5b89d":"# Create a dataframe for giving an overview of a batch\ndef create_data_frame(raw_data):\n    data = {}\n    data[\"filename\"] = []\n    data[\"image_width\"] = []\n    data[\"image_height\"] = []\n    data[\"latex\"] = []\n    data[\"png_masks\"] = []\n    \n    for image in raw_data:\n        data[\"filename\"].append(image[\"filename\"])\n        data[\"image_width\"].append(image[\"image_data\"][\"width\"])\n        data[\"image_height\"].append(image[\"image_data\"][\"height\"])\n        data[\"latex\"].append(image[\"image_data\"][\"full_latex_chars\"])\n        data[\"png_masks\"].append(image[\"image_data\"][\"png_masks\"])\n        \n    df = pd.DataFrame.from_dict(data)\n    return df\n\nprint(\"Loading batch overview.\")\nfile = open(f\"{DIR}\/batch_1\/JSON\/kaggle_data_1.json\")\ndata = json.load(file)\ndf = create_data_frame(data)\nprint(df)","b975f25d":"# Creates output directorys.\nDATASET_DIR = \".\/dataset_semantic_segmentation\"\nINPUTS_DIR = DATASET_DIR + \"\/inputs\"\nTARGETS_DIR = DATASET_DIR + \"\/targets\"\n\nif not os.path.isdir(DATASET_DIR):\n    os.mkdir(DATASET_DIR)\nif not os.path.isdir(INPUTS_DIR):\n    os.mkdir(INPUTS_DIR)\nif not os.path.isdir(TARGETS_DIR):\n    os.mkdir(TARGETS_DIR)","7d53d97b":"# Opens and reformats aida dataset (https:\/\/www.kaggle.com\/aidapearson\/ocr-data) \n#  into practical form used for training.\n# ------------------------------------------------------------------------------------\n\n# File which maps class (e.g. `\"\\alpha\"`) to its label (e.g. `1`).\nclass_to_label_map_file = open(f\"{DIR}\/extras\/visible_char_map.json\")\nclass_to_label_map = json.load(class_to_label_map_file)\n\n# Converts a string representation of bytes back to bytes.\ndef convert_string_to_bytes(string):\n    return ast.literal_eval(string)\n# Unpacks a list of string represented bytes objects and returns a list of bytes objects.\ndef unpack_list_of_masks(string_list):\n    return [convert_string_to_bytes(string) for string in string_list]\ndef convert_mask_bytes_to_luma(mask_bytes, label):\n    # Open the mask.\n    mask = Image.open(BytesIO(mask_bytes))\n    mask = mask.convert(\"L\")\n\n    datas = mask.getdata()\n    newData = [class_to_label_map[label] if item != 0 else 0 for item in datas]\n\n    # mask.putdata(newData)\n    # plt.imshow(mask,cmap=plt.cm.binary)\n    # plt.show()\n    # assert False\n\n    return newData\n\ndef reformat_dataset_batch(subdir_index):\n    subdir = f\"batch_{subdir_index}\"\n    print(subdir,\"started\")\n\n    file = open(f\"{DIR}\/batch_{subdir_index}\/JSON\/kaggle_data_{subdir_index}.json\")\n    data = json.load(file)\n    \n    path = f\"{DIR}\" + '\/' + subdir\n    loop = tqdm(range(0,len(data)))\n    for i in loop:\n        # Get labels\n        labels = data[i]['image_data']['visible_latex_chars']\n\n        # Unpack and convert serialized png's.\n        masks = unpack_list_of_masks(data[i][\"image_data\"][\"png_masks\"])\n\n        # Convert masks to correct colors and to RGBA format, can take a few seconds.\n        luma_masks = [convert_mask_bytes_to_luma(mask,label) for mask,label in zip(masks,labels)]\n\n        # Overlay masks on the image.\n        image_mask = Image.new(\n            mode=\"L\", \n            size=(data[i][\"image_data\"][\"width\"], data[i][\"image_data\"][\"height\"])\n        )\n        base_mask = [0 for _ in range(data[i][\"image_data\"][\"width\"]*data[i][\"image_data\"][\"height\"])]\n        for mask in luma_masks:\n            for index, item in enumerate(mask):\n                if item != 0:\n                    base_mask[index] = item\n        image_mask.putdata(base_mask)\n\n        # plt.imshow(image_mask,cmap=plt.cm.binary)\n        # plt.show()\n        # assert False\n\n        # Save image\n        image_id = data[i]['uuid']\n        image_mask.save(\"{}\/{}.png\".format(TARGETS_DIR,image_id))\n\nprint(\"Reformatting dataset.\")\n# Reformats each batch (i covering 1..10 inclusive).\nfor i in range(1,11,1):\n    reformat_dataset_batch(i)","45c50c15":"### Smplifying Aida\n\nSimplifies the Aida dataset to only need`\/inputs` and `\/targets` directories. Each input is the original image, and each mask is a binary `.png` image with the lumenance value corresponding to the class (in affect simply a 2d array of unsigned 8 bit interegers).\n\nThis will not run in a reasonable time frame online on kaggle, download this and the dataset and run it on your own machine."}}