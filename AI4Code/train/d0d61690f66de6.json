{"cell_type":{"eb1915fb":"code","2559011c":"code","90db7f9b":"code","50f78ff1":"code","c35554e1":"code","4d1dd766":"code","6cc39cc9":"code","6a02634f":"code","c582c26a":"code","1aba6b92":"code","c128b336":"code","479fa163":"code","e6870702":"code","0de44b2d":"code","b5902465":"code","ddef1cce":"code","1b882448":"code","ff79887d":"code","9ef4009e":"code","6beafe86":"code","6248665d":"code","ff28c908":"code","7d56bc16":"code","dd2e0b28":"code","d950a9d1":"code","f8513554":"code","0b7d9e6e":"code","0b39cd7a":"code","8b604cb1":"code","2cab73ee":"code","0bb87531":"code","13d1f00f":"code","7c85ae47":"code","c94bf708":"code","c58ee359":"code","7106fe8b":"code","38fd7dca":"code","6ac280ff":"code","b66fca68":"code","e63954dc":"code","d080f327":"code","7113d840":"code","bd7e61bc":"code","cd8eccd5":"code","1fbfd464":"code","f47484ce":"code","5c279a86":"code","0ef6d769":"code","d492a448":"code","65c53a8d":"code","93a01f81":"code","5de969c2":"code","69236524":"code","47becb49":"code","8557ad8d":"code","9e64b2bd":"markdown","273c5e97":"markdown","ebe6a9b9":"markdown","97567580":"markdown","42fd8fa4":"markdown","1a3ba559":"markdown","d9342059":"markdown","3c344d74":"markdown","3443e6b4":"markdown","65c3694b":"markdown","810b163b":"markdown","b02124d7":"markdown"},"source":{"eb1915fb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport glob\nimport os\nimport random\n\n# visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport seaborn as sns\nimport folium\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\n\nimport datetime","2559011c":"\n#NCOV_data = pd.read_csv(r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/NCOV_data.csv\")\n#covid_19_data = pd.read_csv(r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/covid_19_data.csv\",parse_dates= True, index_col= 'Sno')\n#time_series_covid_19_confirmed = pd.read_csv(r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\n#time_series_covid_19_deaths = pd.read_csv(r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")\n#time_series_covid_19_recovered = pd.read_csv(r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\n#cn_geo_data = (r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/china.json\")\n#world_coordinates = pd.read_csv(r\"C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\/world_coordinates.csv\", index_col= 'Country')\n\n","90db7f9b":"NCOV_data = pd.read_csv('..\/input\/corona\/NCOV_data.csv')\ntime_series_covid_19_confirmed = pd.read_csv('..\/input\/corona\/time_series_covid_19_confirmed.csv')\ntime_series_covid_19_deaths = pd.read_csv('..\/input\/corona\/time_series_covid_19_deaths.csv')\ntime_series_covid_19_recovered = pd.read_csv('..\/input\/corona\/time_series_covid_19_recovered.csv')\nworld_coordinates = pd.read_csv('..\/input\/corona\/world_coordinates.csv')\n","50f78ff1":"NCOV_data.head()","c35554e1":"NCOV_data.tail()","4d1dd766":"NCOV_data.info()","6cc39cc9":"NCOV_data.shape","6a02634f":"NCOV_data.isnull().sum()","c582c26a":"NCOV_data.describe()","1aba6b92":"# Countries affected\n\ncountries = NCOV_data['Country'].unique().tolist()\nprint(countries)\n\nprint(\"\\nTotal countries affected by virus: \",len(countries))","c128b336":"#Combining China and Mainland China cases as they are provided separately\n\nNCOV_data['Country'].replace({'Mainland China':'China'},inplace=True)\ncountries = NCOV_data['Country'].unique().tolist()\nprint(countries)\nprint(\"\\nTotal countries affected by virus: \",len(countries))","479fa163":"# Convert Last Update column to datetime64 format\n\nfrom datetime import date\n\nNCOV_data['Date'] = NCOV_data['Date'].apply(pd.to_datetime)\n#NCOV_data.drop(['Sno'],axis=1,inplace=True)\n\n#Set Date column as the index column.\n#data.set_index('Last Update', inplace=True)\n#NCOV_data.head()\n\n\nd = NCOV_data['Date'][-1:].astype('str')\nyear = int(d.values[0].split('-')[0])\nmonth = int(d.values[0].split('-')[1])\nday = int(d.values[0].split('-')[2].split()[0])\n\n\ndata_latest = NCOV_data[NCOV_data['Date'] > pd.Timestamp(date(year,month,day))]\ndata_latest.head()","e6870702":"NCOV_data.groupby('Date').sum()['Confirmed'].plot()\nplt.grid()","0de44b2d":"NCOV_data.groupby('Date').sum()['Deaths'].plot()\nplt.grid()","b5902465":"country_count = NCOV_data['Country'].value_counts().reset_index()\ncountry_count = country_count.rename(columns={\"index\": \"Country\", \"Country\": \"Count\"})\ncountry_count.head()","ddef1cce":"country_count = pd.DataFrame(NCOV_data.groupby('Country')['Confirmed'].max()).reset_index()\ncountry_count.head()","1b882448":"country_count_wo_mc=country_count[country_count.Country != 'Mainland China']\ncountry_count_wo_mc.head()","ff79887d":"plt.figure(figsize=(20,20))\nfig = go.Figure(data = [go.Pie(labels = country_count_wo_mc.Country,values = country_count_wo_mc.Confirmed)])\nfig.update_layout(title=\"Country-wise distribution except Mainland China\")\nfig.show()","9ef4009e":"state_count = pd.DataFrame(NCOV_data[NCOV_data['Country']=='Mainland China'].groupby('Province\/State').max()['Confirmed']).reset_index()\nfig = go.Figure(data = [go.Pie(labels = state_count['Province\/State'],values = state_count.Confirmed)])\nfig.update_layout(title=\"State-wise distribution of Mainland China\")\nfig.show()","6beafe86":"\ngrowth_country = pd.pivot_table(NCOV_data[NCOV_data.Country!='Mainland China'], values='Confirmed', columns='Country', index='Date')\ngrowth_country.plot(figsize=(18,12))","6248665d":"# Creating a dataframe with total no of confirmed cases for every country\nNumber_of_countries = len(data_latest['Country'].value_counts())\n\n\ncases = pd.DataFrame(data_latest.groupby('Country')['Confirmed'].sum())\ncases['Country'] = cases.index\ncases.index=np.arange(1,Number_of_countries+1)\n\nglobal_cases = cases[['Country','Confirmed']]\n\n\nglobal_cases","ff28c908":"# Importing the world_coordinates dataset\n\n\n# Merging the coordinates dataframe with original dataframe\nworld_data = pd.merge(world_coordinates,global_cases,on='Country')\nworld_data.head()","7d56bc16":"# create map and display it\nworld_map = folium.Map(location=[10, -20], zoom_start=2.3,tiles='Stamen Toner')\n\nfor lat, lon, value, name in zip(world_data['latitude'], world_data['longitude'], world_data['Confirmed'], world_data['Country']):\n    folium.CircleMarker([lat, lon],\n                        radius=10,\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(world_map)\nworld_map","dd2e0b28":"time_series_covid_19_confirmed.head()","d950a9d1":"time_series_covid_19_deaths.head()","f8513554":"time_series_covid_19_recovered.head()","0b7d9e6e":"df= pd.read_csv('..\/input\/corona\/covid_19_data.csv', parse_dates= True, index_col= 'SNo')","0b39cd7a":"#df= pd.read_csv(r'C:\\Code\\Novel Coronavirus\\novel-corona-virus-2019-dataset\\covid_19_data.csv', parse_dates= True, index_col= 'SNo')\ndf['ObservationDate']= pd.to_datetime(df['ObservationDate']).dt.date\ndf['Last Update']= pd.to_datetime(df['Last Update']).dt.date\n#df.set_index('ObservationDate', inplace= True)\ndf.head(5)","8b604cb1":"df.shape","2cab73ee":"df.isnull().sum()","0bb87531":"df.describe()","13d1f00f":"df1= df.rename(columns={'Country\/Region':'Country'})","7c85ae47":"df1.info()","c94bf708":"df1.head()","c58ee359":"df1['Country'].replace({'Mainland China': 'China'}, inplace= True)\nrecent_cp_df= df1.groupby(['Country', 'Province\/State']).last()\nrecent_cp_df","7106fe8b":"recent_cp_df_c= recent_cp_df.groupby('Country').agg({'Confirmed': 'sum', 'Deaths': 'sum', 'Recovered': 'sum'})\nrecent_cp_df_c['Recovery Rate']= recent_cp_df_c['Recovered']\/recent_cp_df_c['Confirmed']\nrecent_cp_df_c['Mortality Rate']= recent_cp_df_c['Deaths']\/recent_cp_df_c['Confirmed']\nrecent_c_df=  df1\n\nfor i in recent_cp_df_c.index:\n    recent_c_df= recent_c_df[(recent_c_df['Country']!=i)]\n    \nrecent_c_df= recent_c_df.groupby(['Country']).last()\nrecent_c_df.drop(['Province\/State', 'Last Update'], axis= 1, inplace= True)\nrecent_c_df['Recovery Rate']= recent_c_df['Recovered']\/recent_c_df['Confirmed']\nrecent_c_df['Mortality Rate']= recent_c_df['Deaths']\/recent_c_df['Confirmed']\n\nrecent_df= pd.concat([recent_cp_df_c, recent_c_df], axis= 0)\nrecent_df","38fd7dca":"# We notice NA values for Brazil, Ivory Coast & Mexico. We can drop them since they have no confirmed cases.\n#Confirmed vs Deaths vs Recovered for all countries except China\nfor i in ['Brazil', 'Ivory Coast', 'Mexico']:\n    df= df1[(df1['Country']!=i)]\n\nrecent_df_nc= recent_df.drop(['China']).sort_values(['Confirmed'], ascending= False)\nrecent_df_nc","6ac280ff":"f, ax = plt.subplots(figsize=(20, 10))\nsns.barplot(x= recent_df_nc[\"Confirmed\"], y= recent_df_nc.index, label=\"Confirmed\", color=\"blue\")\nsns.barplot(x= recent_df_nc[\"Recovered\"], y= recent_df_nc.index, label=\"Recovered\", color=\"green\")\nsns.barplot(x= recent_df_nc[\"Deaths\"], y= recent_df_nc.index, label=\"Deaths\", color=\"red\")\nsns.despine(left= True)\nax.legend(ncol=5, loc=\"lower right\")\nax.set(ylabel=\"Countries\", xlabel=\"Values\")","b66fca68":"print('Globally, these are the total numbers reported yet: ')\nrecent_df.agg({'Confirmed': 'sum', 'Deaths': 'sum', 'Recovered': 'sum', 'Recovery Rate': 'mean', 'Mortality Rate': 'mean'}).to_frame()","e63954dc":"recent_df.sort_values(['Confirmed'], ascending= False)","d080f327":"recent_df.sort_values(['Mortality Rate'], ascending= False)","7113d840":"recent_df.sort_values(['Recovery Rate'], ascending= True)","bd7e61bc":"world_coordinates.head()","cd8eccd5":"recent_df.head()","1fbfd464":"world_coordinates.info()","f47484ce":"recent_df.columns","5c279a86":"recent_df.info()","0ef6d769":"#recent_df= recent_df.join(world_coordinates, how= 'inner')\nrecent_df.drop(['Brazil', 'Mexico'], inplace= True)\nrecent_df","d492a448":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(countries))\nplt.figure(figsize=(20,20))\nplt.pie(recent_c_df['Confirmed'], colors=c)\nplt.legend(countries, loc='best')\nplt.show()","65c53a8d":"world_map = folium.Map(location=[35.861660, 80.195397], zoom_start= 3, tiles='Stamen Toner')\noutbreaks = folium.map.FeatureGroup()\n\nfor lt, ln, nm, cnfrm, rec, mor in zip(recent_df['latitude'], recent_df['longitude'], recent_df.index, recent_df['Confirmed'], recent_df['Recovery Rate'], recent_df['Mortality Rate']):\n    ss= '<b>Country: <\/b>' + nm + '<br><b>#Confirmed: <\/b>' + str(int(cnfrm)) + '<br><b>Recovery rate: <\/b>' + str(round(rec, 2)) + '<br><b>Mortality rate: <\/b>' + str(round(mor, 2))\n    folium.Marker([lt, ln], popup= ss).add_to(world_map) \n    folium.CircleMarker([lt, ln], radius= 0.05*int(cnfrm), color= 'red').add_to(world_map) \n    \nworld_map","93a01f81":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n                x=NCOV_data[\"Country\"],\n                y=NCOV_data[\"Confirmed\"],\n                marker_color='darkorange',\n                marker_line_color='rgb(8,48,107)',\n                marker_line_width=2, \n                opacity=0.7))\n\nfig.update_layout(\n    title_text='Confirmed Cases on Provinces of China (Till February 17, 2020)',\n    height=700, width=800, xaxis_title='Province\/State', yaxis_title='Confirmed')\n\nfig.show()","5de969c2":"fig = go.Figure()\n\nfig.add_trace(go.Bar(\n                x=NCOV_data[\"Province\/State\"],\n                y=NCOV_data[\"Recovered\"],\n                marker_color='mediumturquoise',\n                name=\"Recovered\"))\n\nfig.add_trace(go.Bar(\n                x=NCOV_data[\"Province\/State\"],\n                y=NCOV_data[\"Deaths\"],\n                marker_color='red',\n                name=\"Deaths\"))\n\nfig.update_traces(marker_line_color='rgb(8,48,107)',\n                  marker_line_width=2, opacity=0.7)\n\nfig.update_layout(\n    title_text='Death\/Recovered Rate in the Other China Provinces Except Wuhan',\n    height=600, width=800, xaxis_title='Province\/State')\n\nfig.show()","69236524":"\ntime_series_covid_19_confirmed = np.sum(time_series_covid_19_confirmed.iloc[:,4:time_series_covid_19_confirmed.shape[1]])\ntime_series_covid_19_recovered = np.sum(time_series_covid_19_recovered.iloc[:,4:time_series_covid_19_recovered.shape[1]])\ntime_series_covid_19_deaths = np.sum(time_series_covid_19_deaths.iloc[:,4:time_series_covid_19_deaths.shape[1]])\n\nglobal_mortality = time_series_covid_19_deaths\/(time_series_covid_19_confirmed+time_series_covid_19_recovered+time_series_covid_19_deaths)*100\n\n# defyning plotsize\nplt.figure(figsize=(20,10))\n\n# creating a lineplot for each case variable(suspected, recovered and death)\nplt.plot(global_mortality\n        , color = 'red'\n        , label = 'Mortality Rate'\n        , marker = 'o')\n\n# defyning titles, labels and ticks parameters\nplt.title('Global Mortality Rate Over the Time',size=30)\nplt.ylabel('Rate',size=20)\nplt.xlabel('Updates',size=20)\nplt.xticks(rotation=45,size=15)\nplt.yticks(size=15)\n\n# defyning legend parameters\nplt.legend(loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 1\n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);\n","47becb49":"confirmed = time_series_covid_19_confirmed \nconfirmed.head()","8557ad8d":"# taking cases numbers\nHubei = china_cases[china_cases.index==\"Hubei\"]\nHubei = Hubei.iloc[0]\n\n# difyning plot size\nplt.figure(figsize=(15,15))\n\n# here i use .value_counts() to count the frequency that each category occurs of dataset\nHubei.plot(kind='pie'\n           , colors=['#4b8bbe','lime','red']\n           , autopct='%1.1f%%' # adding percentagens\n           , shadow=True\n           , startangle=140)\n\n# defyning titles and legend parameters\nplt.title('Hubei Cases Distribution',size=30)\nplt.legend(loc = \"upper right\"\n           , frameon = True\n           , fontsize = 15\n           , ncol = 2 \n           , fancybox = True\n           , framealpha = 0.95\n           , shadow = True\n           , borderpad = 1);","9e64b2bd":"### Coronaviruses (CoV) are a large family of viruses that cause illness ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS-CoV) and Severe Acute Respiratory Syndrome (SARS-CoV). A novel coronavirus (nCoV) is a new strain that has not been previously identified in humans.  \n#### Coronaviruses are zoonotic, meaning they are transmitted between animals and people.  Detailed investigations found that SARS-CoV was transmitted from civet cats to humans and MERS-CoV from dromedary camels to humans. Several known coronaviruses are circulating in animals that have not yet infected human.","273c5e97":"With the news coming in that the World Health Organization has declared the novel coronavirus outbreak a public health emergency, it has increased the general fear among the public. A lot of countires have heightened their measures to fight with this virus with the condition in China still senitive..More than 20 countries and territories outside of mainland China have confirmed cases of the virus -- spanning Asia, Europe, North America and the Middle East -- as India, Italy and the Philippines reported their first cases on Thursday.","ebe6a9b9":"\n# <a id='basic'>Growth trend of Corona virus in each Country individually<\/a>","97567580":"## <a id='basic'>1. Basic Exploration<\/a>","42fd8fa4":"# Import DataSet","1a3ba559":"Top Country Affected in this scenario","d9342059":"![coronavirus-graphic-web-feature.jpg](attachment:coronavirus-graphic-web-feature.jpg)\n\nhttps:\/\/www.fda.gov\/emergency-preparedness-and-response\/mcm-issues\/novel-coronavirus-covid-19","3c344d74":"# <a id='basic'>Checking the data set what we have been imported earlier <\/a>","3443e6b4":"\n# <a id='basic'>EDA<\/a>","65c3694b":"### In this notebook I have tried to jot down the basic analysis of Coronavirus learning from various source, Thanks for visiting this notebook. \n#### Your valuable feedback will be appreciated.","810b163b":"\n## <a id='basic'>Let's Fix the datetime<\/a>","b02124d7":"\n# <a id='basic'>Lets visualize where the desease spread geographically<\/a>"}}