{"cell_type":{"023cd6f6":"code","fd164cce":"code","9a0c88b0":"code","87c7fb60":"code","e6f5a5ff":"code","0114bb6f":"code","cec040ea":"code","55056ed9":"code","5b3f5f85":"code","b18666b9":"code","8292ed6d":"code","fce9224f":"code","19d107a9":"code","d991fb52":"code","efb85817":"code","dd5b8293":"code","3e7abc1f":"code","e9b0f52d":"markdown"},"source":{"023cd6f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd164cce":"train_m = pd.read_csv('\/kaggle\/input\/mushroom\/train.csv')\ntest_m = pd.read_csv('\/kaggle\/input\/mushroom\/test.csv')","9a0c88b0":"train_m= train_m[['Id','cap.shape','cap.color','stalk.color.above.ring','stalk.color.below.ring','bruises','population','poisonous']]\ntrain_m\n#cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n#cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n#stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n#stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n#bruises-boolean\n#population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y","87c7fb60":"train_m.isna().sum()","e6f5a5ff":"from sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\nfrom sklearn.tree import plot_tree\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import accuracy_score","0114bb6f":"X = train_m.drop(columns=['poisonous'])\ny = train_m['poisonous']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=8)\n\nX_train = pd.DataFrame(X_train, columns=X.columns)\nX_test = pd.DataFrame(X_test, columns=X.columns)","cec040ea":"num_col= list(X_train.select_dtypes(include=['int64','float64']))\ncat_col=list(X_train.select_dtypes(include=['object']))","55056ed9":"numeric_pipeline = Pipeline(steps=[\n    ('impute', SimpleImputer(strategy='median')),\n    ('scale', MinMaxScaler())])\n\ncategorical_pipeline = Pipeline(steps=[\n    ('impute', SimpleImputer(strategy='most_frequent')),\n    ('ordinal',OneHotEncoder(handle_unknown='ignore'))\n])\nfull_processor = ColumnTransformer(transformers=[\n    ('number', numeric_pipeline, num_col), \n    ('category', categorical_pipeline, cat_col)\n])\n\ntree_pipeline = Pipeline(steps=[\n    ('preprocess', full_processor), \n    ('model', DecisionTreeClassifier())])\n\npd.DataFrame(full_processor.fit_transform(X_train))\ntree_pipeline.fit(X_train, y_train)","5b3f5f85":"accuracy_score(tree_pipeline.predict(X_train), y_train)","b18666b9":"plot_confusion_matrix(tree_pipeline, X_test, y_test, display_labels=['poison', 'no poison'])","8292ed6d":"from sklearn.metrics import confusion_matrix","fce9224f":"def model_check(y_true, y_preds, model):     \n    print('Accuracy: ', accuracy_score(y_true, y_preds))\n    classes = model.named_steps['model'].classes_    \n    tn, fp, fn, tp = confusion_matrix(y_true, y_preds).ravel()\n    plot_confusion_matrix(tree_pipeline, X_test, y_test, display_labels=['poison', 'no poison']);\n    return tn, fp, fn, tp\ntn, fp, fn, tp = model_check(y_test, tree_pipeline.predict(X_test), tree_pipeline)","19d107a9":"from sklearn.metrics import precision_score, recall_score, cohen_kappa_score, f1_score\nprint(f\"\"\"\n    Accuracy: {accuracy_score(tree_pipeline.predict(X_test), y_test)}\n    Recall\/Sensitivity: {recall_score(tree_pipeline.predict(X_test), y_test)}\n    Precision (True Positive Rate): {precision_score(tree_pipeline.predict(X_test), y_test)}\n    Specifity (False Positive Rate): {tn \/ (tn+fp)}\n    F Score: {f1_score(tree_pipeline.predict(X_test), y_test)}\n    Kappa: {cohen_kappa_score(tree_pipeline.predict(X_test), y_test)}\n\"\"\")","d991fb52":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc","efb85817":"y_score= tree_pipeline.predict_proba(X_test)[:,1]\nfalse_positive_rate, true_positive_rate, threshold = roc_curve(y_test, y_score)","dd5b8293":"print('roc_auc_score for DecisionTree: ', roc_auc_score(y_test, y_score))","3e7abc1f":"plt.subplots(1, figsize=(10,10))\nplt.title('ROC - DecisionTree')\nplt.plot(false_positive_rate, true_positive_rate)\nplt.plot([0, 1], ls=\"--\")\nplt.plot([0, 0], [1, 0] , c=\".7\"), plt.plot([1, 1] , c=\".7\")\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","e9b0f52d":"**DECISION TREE**"}}