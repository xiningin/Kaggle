{"cell_type":{"cb91ce9a":"code","3092bdd7":"code","c87198fb":"code","4d81d7ab":"code","9f0f53e3":"code","6a9c106a":"code","5dfe85aa":"code","c10c07f6":"code","c9e16554":"code","6103902b":"code","736f3149":"code","502add9f":"code","0033320e":"code","c5052c8b":"code","818a77a1":"code","ccf57f82":"code","7cb2123d":"code","0e226911":"code","e14e3cfc":"code","7627f855":"code","5f001cdc":"code","e597f5bb":"code","d3031ea5":"code","b4e9052e":"code","1a4294d3":"code","6b1d888e":"code","b0070d10":"code","36712fa5":"code","1cc6063c":"code","baf112ca":"code","02627279":"code","9add7155":"code","7586f6dc":"code","5c210c08":"code","cfc83a3b":"code","828d4770":"code","efde7715":"code","69b68448":"code","a629369f":"code","55d44124":"code","8636bac2":"code","03613f61":"code","2905f43d":"code","2bbf8ae2":"code","87dc9062":"code","433eaf74":"code","92a33fde":"code","4dff606b":"code","7719d573":"code","3a075b8d":"code","633cba6d":"code","18dbb312":"code","acc6b7cb":"code","aafc5434":"code","d68883d6":"code","ee7564dc":"code","3e3083fe":"code","e077a9f1":"code","75e82dfe":"code","db7276da":"code","a6309337":"code","02c216c3":"code","f284ce79":"code","a87a83e6":"code","9bd80fa7":"code","10fba6f8":"code","7515938e":"code","900ca27a":"code","2582a179":"code","a1fc2725":"code","078bf059":"code","884527f7":"code","f6fe6a33":"code","16976e80":"code","b2d22db2":"code","d17af128":"code","b4bdcf87":"code","88f2e337":"code","3da2e7b4":"code","26e316f8":"code","b7b765b8":"code","ce887d4b":"code","2b998ccd":"code","46ad4831":"code","e6c3e99e":"code","2754b96f":"code","0b4c7369":"code","31d1155f":"code","d14986c8":"code","375e97e4":"code","779aabc2":"code","86dd1b79":"code","da4ea684":"code","aa0814f5":"code","6133d609":"code","cb82ba61":"code","c812e80d":"code","6959f19a":"code","074e01c3":"code","9aab4b79":"code","f7c7d669":"code","6047462c":"code","7880c14a":"code","25ed23f5":"code","6a3b251b":"code","74fc419e":"code","d21ac0bf":"code","c5210a45":"code","ad338537":"code","6947b03f":"code","80a34985":"code","a08bb20d":"code","3eef7935":"code","a3744c8e":"code","92271e29":"code","d70a99f4":"code","688665dd":"code","4603b2a4":"code","a8be313e":"code","e070641d":"code","b14d8e91":"code","85b6ab3b":"code","b580cd08":"code","ae06114f":"code","fe82a51f":"code","69f084d8":"code","7c59754b":"markdown","facfc960":"markdown","55489c72":"markdown","27983030":"markdown","435241a0":"markdown","956457b8":"markdown","a98b9b61":"markdown","8ae1e7ea":"markdown","06c5f233":"markdown","591293e4":"markdown","43ef409e":"markdown","39df928f":"markdown","0113295e":"markdown","cfa69692":"markdown","9b4aa561":"markdown","d8a208ce":"markdown","73eed0fe":"markdown","95f30c7b":"markdown","49164a00":"markdown","cbffa678":"markdown","85e9e04f":"markdown","7a5ba388":"markdown","c78a8252":"markdown","7c86e9ce":"markdown","4d268445":"markdown","559566a5":"markdown","cf29f12f":"markdown","86d4129a":"markdown","70718f5e":"markdown","259f9889":"markdown","fbb9bf68":"markdown"},"source":{"cb91ce9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3092bdd7":"# \u041c\u043e\u0438 \u043f\u043e\u0434\u0433\u0440\u0443\u0437\u043a\u0438\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()","c87198fb":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","4d81d7ab":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","9f0f53e3":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","6a9c106a":"df_train.info()","5dfe85aa":"df_train.head(5)","c10c07f6":"df_test.info()","c9e16554":"df_test.head(5)","6103902b":"sample_submission.head(5)","736f3149":"sample_submission.info()","502add9f":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","0033320e":"data.info()","c5052c8b":"data.sample(5)","818a77a1":"data.Reviews[1]","ccf57f82":"# \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u044f \u0432\u043e\u0437\u044c\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Number of Reviews\ndata['Number_of_Reviews_isNAN'] = pd.isna(data['Number of Reviews']).astype('uint8')","7cb2123d":"data['Number_of_Reviews_isNAN'].sample(10)","0e226911":"data[data['Number_of_Reviews_isNAN'] == 1].Reviews.value_counts()\n# \u0418\u043c\u0435\u0435\u043c 2023 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0434\u0432\u0443\u043c\u044f \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438, \u0447\u0442\u043e \u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \n# \u0447\u0442\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0435\u0442 \u0438 \u043f\u043e \u043d\u0438\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c NaN ['Number of Reviews'] = 0","e14e3cfc":"# \u0414\u043b\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 ['Number of Reviews'] \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 2-\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438.\n# \u042d\u0442\u043e \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0438 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","7627f855":"data[(data['Number_of_Reviews_isNAN'] == 1) & (data['Reviews'] != \"[[], []]\")].Reviews.count()\n# 1176 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u0432 \u0433\u0440\u0430\u0444\u0435 ['Reviews']. \u041f\u043e \u0442\u043e\u043c\u0443, \u043a\u0430\u043a\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u044b\u0441\u0432\u0435\u0442\u0438\u043b\u0438\u0441\u044c, \u0442\u043e \u043e\u0442\u0437\u044b\u0432 \u0443 \u0432\u0441\u0435\u0445 \u0431\u044b\u043b 1.\n# \u0417\u043d\u0430\u0447\u0438\u0442 \u0443 \u043a\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432 1, \u0442\u043e\u043c\u0443 \u0441\u0442\u0430\u0432\u0438\u043c 1 \u043e\u0442\u0437\u044b\u0432, \u0435\u0441\u043b\u0438 2, \u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0447\u0442\u043e \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442.","5f001cdc":"# \u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 ['Reviews'] - \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 2-\u043c\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 ['\u043e\u0442\u0437\u044b\u0432\u044b \u0442\u0435\u043a\u0441\u0442', '\u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432']\ndata['Reviews'] = data['Reviews'].apply(lambda s: str(s).replace('[[','[').replace(']]',']').replace(\"], [\",\"]%$[\").replace(\"'\",\"\").split(sep = '%$'))","e597f5bb":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 - \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430 '\u0434\u0430\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u0430' \ndata['Reviews_date'] = data['Reviews'].apply(lambda s: s[1] if len(s) == 2 else 'NaN') \n# \u0412 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 ['Reviews'] \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0437\u044b\u0432\u044b\ndata['Reviews'] = data['Reviews'].apply(lambda s: s[0] if len(s) == 2 else 'NaN')","d3031ea5":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442\u044b\n\ndef date_format(date_str):\n    \"\"\"\u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0434\u0430\u0442\u0443\"\"\"\n    if len(date_str) > 10:\n        dt_1 = date_str[1:11]\n        dt_1 = pd.to_datetime(dt_1)\n               \n    if len(date_str) > 14:\n        dt_2 = date_str[13:23]\n        dt_2 = pd.to_datetime(dt_2)\n          \n    if len(date_str) < 10:\n        return ['NaN', 'NaN']\n    elif 10<len(date_str) < 22:\n        return [dt_1, 'NaN']\n    else:\n        return [dt_1, dt_2]","b4e9052e":"data['date'] = data['Reviews_date'].apply(date_format)\ndata.drop(['Reviews_date'], axis = 1, inplace = True)\ndata['date_1'] = data['date'].apply(lambda d: d[0])\ndata['date_2'] = data['date'].apply(lambda d: d[1])","1a4294d3":"# # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u043c \u0432 Number_of_Reviews \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c Reviews \n# d1 = data[(data['Number_of_Reviews_isNAN'] == 1) & (data['Reviews'] != \"[[], []]\")]['date_1'].isna().count()\n# d1x = data[(data['Number_of_Reviews_isNAN'] == 1) & (data['Reviews'] != \"[[], []]\")]['date_1'].isna().sum()\n# d2 = data[(data['Number_of_Reviews_isNAN'] == 1) & (data['Reviews'] != \"[[], []]\")]['date_2'].isna().count()\n# d2x = data[(data['Number_of_Reviews_isNAN'] == 1) & (data['Reviews'] != \"[[], []]\")]['date_2'].isna().sum()\n# print(f'{d1} - {d1x} = {d1-d1x} - \u041f\u0440\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0435 \u0432 \"Number of Reviews\" \u0435\u0441\u0442\u044c 1 \u043e\u0442\u0437\u044b\u0432' ) \n# print(f'{d2} - {d2x} = {d2-d2x} - \u041f\u0440\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0435 \u0432 \"Number of Reviews\" \u0435\u0441\u0442\u044c 2 \u043e\u0442\u0437\u044b\u0432\u0430') \n# # \u0423 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0438\u043c\u0435\u0435\u0442\u0441\u044f 1 \u043e\u0442\u0437\u044b\u0432 \u043f\u0440\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 ","6b1d888e":"# \u041e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\n# def fill_Number_of_Reviews(row):\n#     \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 ['Number of Reviews']\n#        \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 0 \u0438\u043b\u0438 1\"\"\"\n#     if int(row.loc['Number_of_Reviews_isNAN']) == 1:\n#         if len(str(row.loc['date_1']))>3:\n#             return 1\n#         else:\n#             return 0\n#     else:\n#         return row.loc['Number of Reviews']","b0070d10":"# \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 ['Number of Reviews']\n#data['Number of Reviews'] = data.apply(fill_Number_of_Reviews, axis = 1)","36712fa5":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 (\u041c\u043e\u0436\u0435\u0442 \u043b\u0443\u0447\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442)\n# \u041c\u0410\u0415 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043b\u0443\u0447\u0448\u0435\nmed = data['Number of Reviews'].median()\ndata['Number of Reviews'].fillna(med, inplace = True)\ndata['Number of Reviews'].value_counts()","1cc6063c":"print('\u041c\u0435\u0434\u0438\u0430\u043d\u0430:', data['Number of Reviews'].median())\nprint(\"\u041a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\\n\", data['Number of Reviews'].value_counts(), sep=\"\")","baf112ca":"# \u041e\u0447\u0435\u043d\u044c \u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n# \u0431\u043e\u043b\u044c\u0448\u0435 1000 - \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0437\u044b\u0432\u044b  \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u043d\u0430\u043a\u0440\u0443\u0447\u0435\u043d\u044b, \u0437\u0430\u0434\u0432\u043e\u0438\u0442\u0441\u044f,  \ndata['Number of Reviews'].plot()","02627279":"print('\u0414\u043e\u0445\u043e\u0434\u044f\u0442 \u0434\u043e', round(data['Number of Reviews'].max())) \nprint('\u0420\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 100 \u043e\u0442\u0437\u044b\u0432\u043e\u0432', data[data['Number of Reviews']>100]['Number of Reviews'].count(),\n      '\u0438\u0437', data['Number of Reviews'].count(), '\u0447\u0442\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442', \n      data[data['Number of Reviews']>100]['Number of Reviews'].count()\/data['Number of Reviews'].count()) \n# \u0431\u043e\u043b\u044c\u0448\u0435 100 \u0438\u043c\u0435\u044e\u0442 \u043e\u043a\u043e\u043b\u043e 25%\nprint('\u0420\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u043e\u0442\u0437\u044b\u0432\u043e\u0432', data[data['Number of Reviews']>1000]['Number of Reviews'].count(),\n     '\u0438\u0437', data['Number of Reviews'].count(), '\u0447\u0442\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442', \n      data[data['Number of Reviews']>1000]['Number of Reviews'].count()\/data['Number of Reviews'].count())\n","9add7155":"# \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0443 \u043a\u0430\u0444\u0435 \u0438\u043b\u0438 \u0431\u0430\u0440\u043e\u0432 \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u043d\u0438\u0437\u043a\u043e\u0439 \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c,\u0447\u0435\u043c \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u044b \u0442\u0430\u043a\u0438\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\ndata[data['Number of Reviews']>1000][['Restaurant_id', 'Number of Reviews', 'Cuisine Style', 'City', 'Price Range']]['Price Range'].value_counts()\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b. \u041d\u0438\u043a\u0430\u043a\u043e\u0439 \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0432\u044b\u044f\u0432\u0438\u043b\u0430, \u043a\u0430\u043a \u0432\u043b\u0438\u044f\u044e\u0442 \u0440\u0430\u0437\u043d\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432","7586f6dc":"print('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u0431\u043e\u043b\u0435\u0435 1000')\ndata[data['Number of Reviews']>1000][['Number of Reviews', 'Rating', 'City', 'Price Range']]['Rating'].value_counts(normalize = True)","5c210c08":"print('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \u043c\u0435\u043d\u0435\u0435 1000')\ndata[data['Number of Reviews']<1000][['Number of Reviews', 'Rating', 'City', 'Price Range']]['Rating'].value_counts(normalize = True)","cfc83a3b":"# \u041d\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e \u041c\u0410\u0415\n# # \u0412\u0441\u0435\u0433\u043e 1.5% \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u0438 \u043e\u043d\u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u0430\u0436\u0430\u044e\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u0443 \n# # \u041f\u0440\u0438 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0443 \u043d\u0438\u0445 \u043a\u0430\u043a \u0438 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043c\u0435\u043d\u044c\u0448\u0438\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438\n# # \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0442\u0441\u0435\u0447\u043a\u0443 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (\u0438 \u0432\u0441\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043f\u0440\u0438\u0440\u043e\u0432\u043d\u044f\u0435\u043c \u043a \u044d\u0442\u043e\u0439 \u043e\u0442\u0441\u0435\u0447\u043a\u0438):\n# q1 = data['Number of Reviews'].quantile(q=0.25)\n# q3 = data['Number of Reviews'].quantile(q=0.75)\n# iqr = q3-q1\n# cutoff = q3+iqr*1.5\n# print('\u041e\u0442\u0441\u0435\u0447\u043a\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432', cutoff)","828d4770":"# \u041e\u0442\u0437\u044b\u0432\u044b \u0442\u0438\u043f\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u044f\u0435\u043c \u043a cutoff \n#data['Number of Reviews'] = data['Number of Reviews'].apply(lambda i: cutoff if i > cutoff else i)\n\n# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e\u0442 0 \u0434\u043e 1\ndata['norm Number of Reviews'] = scaler.fit_transform(data[['Number of Reviews']])","efde7715":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 ['Price Range']\ndata['Price_Range_isNAN'] = pd.isna(data['Price Range']).astype('uint8')","69b68448":"data['Price_Range_isNAN'].value_counts(normalize = True)\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 35%. \u042d\u0442\u043e, \u043e\u0434\u043d\u0430\u043a\u043e, \u043c\u043d\u043e\u0433\u043e.","a629369f":"data['Price Range'].value_counts(normalize = True)","55d44124":"# \u0422\u0430\u043a \u043a\u0430\u043a 70% \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 ['Price Range'] - '$$ - $$$' \n# \u0422\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 '$$ - $$$'\ndata['Price Range'].fillna('$$ - $$$', inplace=True)","8636bac2":"data.sample(5)","03613f61":"data.info()","2905f43d":"#data.nunique(dropna=False)","2bbf8ae2":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n# \u042d\u0442\u043e \u0434\u0430\u0435\u0442 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u043e\u0440\u043e\u043d\u044b \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0446\u0438\u044e \u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0437\u043d\u0430\u0447\u0438\u0442 \u0438 \u0441\u043f\u0440\u043e\u0441 \u0432\u044b\u0448\u0435 (\u043b\u044e\u0434\u0435\u0439 \u0431\u043e\u043b\u044c\u0448\u0435, \u0442\u0443\u0440\u0438\u0441\u0442\u044b \u0438 \u043f\u0440. \u0444\u0430\u043a\u0442\u043e\u0440\u044b)\ncity_dict = data['City'].value_counts().to_dict()\ncity_dict","87dc9062":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0438 \u0441\u0440\u0430\u0437\u0443 \u043d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0435\u0435 \ndata['Count restaurants city'] = data['City'].apply(lambda s: city_dict[s])\n\ndata['norm Count restaurants city'] = scaler.fit_transform(data[['Count restaurants city']])","433eaf74":"# \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\ndata['City_'] = data['City'] # \u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u043f\u0438\u044e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b \u043d\u0430\u043c \u043f\u043e\u0442\u043e\u043c \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f\ndata = pd.get_dummies(data, columns=['City_'])","92a33fde":"data.head(5)","4dff606b":"data.sample(5)","7719d573":"data['Price Range'].value_counts()","3a075b8d":"# \u0412\u0430\u0448\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 'Price Range'\ndef PriceRange123(price):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 'Price Range' \u043a \u0432\u0438\u0434\u0443 1 \u0438\u043b\u0438 2 \u0438\u043b\u0438 3\"\"\"\n    \n    if price == '$':\n        return 1\n    elif price == '$$ - $$$':\n        return 2\n    elif price == '$$$$':\n        return 3\n    else:\n        return 0  ","633cba6d":"data['Price Range'] = data['Price Range'].apply(PriceRange123)\ndata['Price Range'].value_counts()","18dbb312":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 One-Hot Encoding, \u0438 \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u0442\u0435\u0441\u0442\u043e\u0432 \u043e\u043d\u0430 \u043e\u043a\u0430\u0437\u0430\u043b\u0430\u0441\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435, \u0447\u0435\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 123 \ndata = pd.get_dummies(data, columns=['Price Range'])","acc6b7cb":"# \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0437\u0430\u0439\u043c\u0435\u043c\u0441\u044f \u043a\u0443\u0445\u043d\u044f\u043c\u0438\n# \u0423 \u043d\u0430\u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 25%\ndata['Cuisine Style'].isna().sum()","aafc5434":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0434\u043b\u044f \u043d\u0430\u043d \u0438 \u043d\u0435 \u043d\u0430\u043d\ndata['Cuisine Style_isNAN'] = pd.isna(data['Cuisine Style']).astype('uint8')","d68883d6":"# \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e \u0441\u0442\u0438\u043b\u044f\u043c\u0438 \u043a\u0443\u0445\u043e\u043d\u044c\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda s: str(s).replace('[', '').replace(']', '').replace(\"'\", \"\").split(sep = ', '))","ee7564dc":"# \u0422\u0430\u043a \u043a\u0430\u043a \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0435\u0437 \u043a\u0443\u0445\u043d\u0438, \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c 1, \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c. \n# \u0427\u0442\u043e \u043b\u0443\u0447\u0448\u0435 \u0437\u0430\u0439\u0434\u0435\u0442","3e3083fe":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0438 \u0441\u0440\u0435\u0434\u043d\u043d\u0435\u0435 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u0443\u0445\u043e\u043d\u044c\nmediana_cuisin = data[data['Cuisine Style_isNAN']==0]['Cuisine Style'].apply(len).median()\nmean_cuisine = data[data['Cuisine Style_isNAN']==0]['Cuisine Style'].apply(len).mean()\nprint(mediana_cuisin,  round(mean_cuisine, 1))\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u0430 3 \u0438 \u0441\u0440\u0435\u0434\u0435\u0435 \u043e\u043a\u043e\u043b\u043e 3\ndata[data['Cuisine Style_isNAN']==0]['Cuisine Style'].apply(len).count()","e077a9f1":"data[data['Cuisine Style_isNAN']==0]['Cuisine Style'].apply(len).value_counts()","75e82dfe":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 (\u043f\u0440\u0438\u0437\u043d\u0430\u043a): \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435. \n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a - \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0438\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u043a 1 \u0432\u0438\u0434. MAE \u0445\u0443\u0436\u0435\n# data['Cuisine Style amount'] = data['Cuisine Style'].apply(len)\n\n# \u041f\u0440\u043e\u043f\u0443\u0441\u043a - \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0438\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u043a \u043c\u0435\u0434\u0438\u0430\u043d\u0430.\ndata['Cuisine Style amount'] = data['Cuisine Style'].apply(lambda s: len(s) if s != ['nan'] else mediana_cuisin)\n\n# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c ['Cuisine Style amount']\ndata['norm Cuisine Style amount'] = scaler.fit_transform(data[['Cuisine Style amount']])\ndata['Cuisine Style amount'].value_counts()","db7276da":"# \u041f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e 13, 15 \u0438 21 \u043a\u0443\u0445\u043d\u0438\nrestaurant_21_cuisine = data[data['Cuisine Style amount'] == 21]['Cuisine Style']\nprint(list(restaurant_21_cuisine))\n# \u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u043e\u0434\u043d\u0430\u043a\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d. \u0418 \u0447\u0442\u0435\u0446, \u0438 \u0436\u043d\u0435\u0446 \u0438 \u043d\u0430 \u0434\u0443\u0434\u0435 \u0438\u0433\u0440\u0435\u0446","a6309337":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438\ncuisine_style_set = set()\nfor i in data['Cuisine Style']:\n    for j in i:\n        cuisine_style_set.add(j)\n\nprint(f'\u0412\u0441\u0435\u0433\u043e {len(cuisine_style_set)} \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438')\nprint(cuisine_style_set)\n","02c216c3":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u0430\u044f \u043a\u0443\u0445\u043d\u044f.\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u0443\u0445\u043e\u043d\u044c:\ncuisine_style_dict = {}\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043b\u044e\u0447\u0430\u043c\u0438 - \u0441\u0442\u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438\nfor i in cuisine_style_set:\n    cuisine_style_dict[i] = 0\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438.\nfor i in data['Cuisine Style']:\n    for j in i:\n        cuisine_style_dict[j] +=1\n\ncuisine_style_dict","f284ce79":"# \u041d\u0435 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435. \u0423\u0436\u0435 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0432\u0438\u0434\u0430\u043c\u0438\n\n# \u0415\u0441\u0442\u044c \u0440\u0435\u0434\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u043a\u0443\u0445\u043d\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043c\u0430\u043b\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432. \n# \u041f\u0440\u0438 get_dummies \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 'other', \u0432\u043e\u043f\u0440\u043e\u0441 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442 \u043a\u0430\u043a\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430.\n#list_value = sorted(list(cuisine_style_dict.values()))\n\n#coefficient = 0.05 # \u0412\u043e\u0437\u044c\u043c\u0435\u043c % \u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\n#summa_for_other = sum(list_value)*coefficient \n#print(coefficient, '\u043e\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442:', summa_for_other)\n\n#search_sum = 0\n#n = -1\n#for i in list_value:\n#    if search_sum > summa_for_other:\n#        break\n#    search_sum += i\n#    n += 1\n    \n#print(f'\u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0432\u044b\u0445 {n}-\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 - ', sum(list_value[0:n]))\n#cutoff = list_value[n+1:][0] # \u0441 444 \u0440\u0430\u0441\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0432 other\n#print(f'\u041e\u0442\u0441\u0435\u0447\u043a\u0430 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043a\u0443\u0445\u043d\u044e - {cutoff}')","a87a83e6":"# \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u0441\u0442\u0438\u043b\u0438 \u043a\u0443\u0445\u043e\u043d\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0433\u0440\u0443\u043f\u043f\u0443 other \u0438 \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\u044b\n#cuisine_other_list = [] # \u042d\u0442\u0438 \u043a\u0443\u0445\u043d\u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0443\u0442\u044c\u0441\u044f \u0432 'other'\n#cuisine_col_list = ['other'] # \u041f\u043e \u044d\u0442\u0438\u043c \u043a\u0443\u0445\u043d\u044f\u043c \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441\u0442\u043e\u043b\u0431\u0446\u044b Dummies\n\n#for key, val in cuisine_style_dict.items():\n#    if val < cutoff:\n#        cuisine_other_list.append(key)\n#    else:\n#        cuisine_col_list.append(key)\n#cuisine_col_list","9bd80fa7":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043a\u0443\u0445\u043d\u044f\u043c\u0438, \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0437\u0430\u043c\u0435\u043d\u044b \u0440\u0435\u0434\u043a\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445 \u043d\u0430 'other'\n#def replace_other(Cuisine_list):\n#    for i in range(len(Cuisine_list)):\n#        for el_other in cuisine_other_list:\n#            if Cuisine_list[i] == el_other:\n#                Cuisine_list[i] = 'other'\n#    return Cuisine_list\n                \n#data['Cuisine Style with other'] = data['Cuisine Style'].apply(replace_other)\n#data['Cuisine Style with other']","10fba6f8":"def find_item(cell):\n    \"\"\"\u0417\u0430\u043f\u043e\u043b\u043b\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043d\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445: \u0435\u0441\u0442\u044c - 1, \u043d\u0435\u0442 - 0\"\"\"\n    if item in cell:\n        return 1\n    return 0\n\n# \u0426\u0438\u043a\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0441\u0442\u0438\u043b\u0435 \u043a\u0443\u0445\u043d\u0435 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435:\nfor item in cuisine_style_set:\n    data[item] = data['Cuisine Style'].apply(find_item)\n","7515938e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u043a\u0443\u0445\u043d\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0438 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u0443\u0435\u043c\ncuisine_in_city = data.groupby(['City'])[['Afghani', 'Turkish', 'Uzbek', 'Fujian', 'Thai', 'Yunnan', \n                             'Sri Lankan', 'Bar', 'Taiwanese', 'Healthy', 'Minority Chinese', \n                             'Russian', 'Pakistani', 'Vegan Options', 'Israeli', 'Austrian', \n                             'Cambodian', 'Scandinavian', 'Cafe', 'Irish', 'American', 'Seafood', \n                             'Danish', 'Vegetarian Friendly', 'Mediterranean', 'Barbecue', 'Pub', \n                             'International', 'Lebanese', 'Chinese', 'Asian', 'Swedish', \n                             'Azerbaijani', 'Fast Food', 'Argentinean', 'Norwegian', 'Polish', \n                             'Japanese', 'Armenian', 'African', 'Caucasian', 'Street Food', \n                             'Indian', 'Latin', 'Southwestern', 'Eastern European', 'Wine Bar', \n                             'Scottish', 'Moroccan', 'Brew Pub', 'Tibetan', 'Hungarian', 'Diner', \n                             'Dutch', 'Filipino', 'Chilean', 'Cuban', 'Caribbean', 'Ukrainian', \n                             'Mongolian', 'Peruvian', 'Vietnamese', 'Brazilian', 'Swiss', \n                             'Contemporary', 'Greek', 'Spanish', 'Delicatessen', 'Salvadoran', \n                             'Ethiopian', 'Mexican', 'German', 'Malaysian', 'Slovenian', 'Georgian', \n                             'nan', 'Gluten Free Options', 'Portuguese', 'Soups', 'Albanian', 'Balti', \n                             'New Zealand', 'Singaporean', 'Polynesian', 'Korean', 'Sushi', \n                             'Central European', 'South American', 'Canadian', 'Kosher', 'Arabic', \n                             'Middle Eastern', 'Hawaiian', 'Italian', 'Ecuadorean', 'Central Asian', \n                             'Welsh', 'Czech', 'Halal', 'Cajun & Creole', 'Gastropub', 'Belgian', \n                             'Colombian', 'Tunisian', 'Jamaican', 'Latvian', 'Central American', \n                             'British', 'Persian', 'Grill', 'Nepali', 'Australian', 'European', \n                             'French', 'Native American', 'Burmese', 'Fusion', 'Indonesian', \n                             'Romanian', 'Xinjiang', 'Bangladeshi', 'Pizza', 'Venezuelan', \n                             'Croatian', 'Egyptian', 'Steakhouse']].sum().T\n\ncuisine_in_city","900ca27a":"# \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\n# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c, \u0442\u043e\u0433\u0434\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u044b\u0441\u0442\u0440\u043e\u044f\u0442\u0441\u044f \u0432 \u0442\u0438\u043f\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0436\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430\nnorm_cuisine_in_city = cuisine_in_city.copy()\nfor el in norm_cuisine_in_city.columns:\n    norm_cuisine_in_city[el] = scaler.fit_transform(norm_cuisine_in_city[[el]])\nnorm_cuisine_in_city","2582a179":"# \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n\ndef popularity_of_cuisine(row, df = norm_cuisine_in_city):\n    ratio = 0\n    for cuisine in row['Cuisine Style']:\n        ratio += df.loc[cuisine, row['City']]\n    return ratio\n\ndata['popularity_of_cuisine'] = data.apply(popularity_of_cuisine, axis = 1)\n# \u041d\u041e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u0441\u0440\u0430\u0437\u0443\ndata['popularity_of_cuisine'] = scaler.fit_transform(data[['popularity_of_cuisine']])","a1fc2725":"# \u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f, \u0442\u043e \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u0433\u043e\u0440\u043e\u0434\u0441\u043a\u043e\u0433\u043e \n# \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442 0 \u0434\u043e 1 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \n\ncity_list = list(data['City'].unique())\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 min - max \u0440\u0430\u043d\u0433\u043e\u043c\ncity_min_max_Ranking = {}\n\nfor i in city_list:\n    city_min_max_Ranking[i] = [data['Ranking'][data['City'] == i].min(), data['Ranking'][data['City'] == i].max()]\n    \ncity_min_max_Ranking","078bf059":"# \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e ['Ranking'] MinMax (\u043e\u0442 0 \u0434\u043e 1) \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\ndef Ranking_norm_0_1(row):\n    city = row['City']\n    x_min = city_min_max_Ranking[city][0]\n    x_max = city_min_max_Ranking[city][1]\n    return (row['Ranking'] - x_min)\/(x_max - x_min)\n\ndata['norm Ranking'] = data.apply(Ranking_norm_0_1, axis = 1)\ndata['norm Ranking']","884527f7":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 Restaurant_id\n\ndata['Restaurant_id'].value_counts()\n# \u0415\u0441\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f id \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 - \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u044d\u0442\u043e \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e. \n# \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438.","f6fe6a33":"id_count_dict = data['Restaurant_id'].value_counts().to_dict()\ndata['Restaurant_id count'] = data['Restaurant_id'].apply(lambda s: id_count_dict[s])\ndata['Restaurant_id count']","16976e80":"# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438 \u043e\u0442 0 \u0434\u043e 1\ndata['norm Restaurant_id count'] = scaler.fit_transform(data[['Restaurant_id count']])","b2d22db2":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c\n\n# \u041e\u043a\u0430\u044b\u0432\u0430\u044e\u0442 \u0442\u0430\u043a\u043e\u0435 \u0436\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043a\u0430\u043a \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0435\u0442\u0438\n# \u0443\u0431\u0435\u0440\u0435\u043c \u0438\u0445\n\n#rect_in_city = data.groupby(['Restaurant_id'])['City'].count().to_dict()\n#data['Restaurant_id count in city'] = data['Restaurant_id'].apply(lambda i: rect_in_city[i])\n# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0440\u0430\u0437\u0443 \u0435\u0433\u043e\n#data['norm Restaurant_id count in city'] = scaler.fit_transform(data[['Restaurant_id count in city']])","d17af128":"# \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438 \ndata['date_delta'] = data['date'].apply(lambda d: int(str(d[0]-d[1]).split()[0]) if (type(d[1]) != str and type(d[1]) != str) else 0)\n\n# \u0421\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0449\u0443\u0449\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0434\u043d\u0438 \u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043b\u0438 \u043a\u043e\u0433\u0434\u0430 \u0432\u044b\u0433\u0440\u0443\u0436\u0430\u043b\u0438. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \ndata['date_delta'] = data['date_delta'].apply(abs)\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c 0. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e \u043d\u0438\u043c \u043d\u0435 \u0431\u044b\u043b\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438\ndate_delta_median = data['date_delta'].median()\ndata['date_delta'] = data['date_delta'].apply(lambda d: date_delta_median if d ==0 else d)\ndata['date_delta'].value_counts()","b4bdcf87":"data['date_delta'].median()","88f2e337":"# \u0423\u0445\u0443\u0434\u0448\u0430\u043b\u043e \u041c\u0410\u0415\n# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c 0. \u0420\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0442\u0441\u0435\u0447\u043a\u0443.\n#q1_d = data['date_delta'].quantile(q=0.25)\n#q3_d = data['date_delta'].quantile(q=0.75)\n#iqr_d = q3_d-q1_d\n#cutoff_d = q3_d+iqr_d*1.5\n#print('\u041e\u0442\u0441\u0435\u0447\u043a\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0434\u043d\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438', cutoff_d)","3da2e7b4":"# \u0447\u0435\u043c \u0431\u043b\u0438\u0436\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439, \u0442\u0435\u043c \u0447\u0430\u0449\u0435 \u043b\u044e\u0434\u0438 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u0434\u0443\u0448\u043d\u044b \u0438 \u0434\u0430\u044e\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 (\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \n# \u0438\u043b\u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u0443\u044e - \u043d\u0430\u0434\u043e \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u043e\u0432)\n# \u041d\u043e \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 0 - \u0430 \u044d\u0442\u043e \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438\u043b\u0438 \u0432\u0441\u0435\u0433\u043e 1 \u043e\u0442\u0437\u044b\u0432 - \u0437\u043d\u0430\u0447\u0438\u0442 \u043d\u0430\u0434\u043e 0 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u043e\u043c\n#data['date_delta'] = data['date_delta'].apply(lambda i: cutoff_d if i > cutoff_d or i == 0 else i)","26e316f8":"# \u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['norm date_delta'] = scaler.fit_transform(data[['date_delta']])","b7b765b8":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 ['ID_TA'] \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043d\u0430 \u041c\u0410\u0415\n# \u0422\u0430\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u0443\u043a\u0432\u0430 d \u0438 \u0446\u0438\u0444\u0440\u044b. \u0423\u0431\u0435\u0440\u0435\u043c \u044d\u0442\u0443 \u0431\u0443\u043a\u0432\u0443\ndata['ID_TA'] = data['ID_TA'].apply(lambda s: int(s.replace('d', '')))\ndata['norm ID_TA'] = scaler.fit_transform(data[['ID_TA']])","ce887d4b":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 MAE\n# \u041f\u0435\u0440\u0435\u0431\u0440\u0430\u0432 \u043a\u0443\u0447\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c\u0441\u044f \u043d\u0430 \u044d\u0442\u0438\u0445:\n#'Restaurant_id count', 'Ranking','Number of Reviews'\ndata['p1'] =  data['Ranking'] * data['Number of Reviews']*data['Restaurant_id count']\ndata['p1'] = scaler.fit_transform(data[['p1']])","2b998ccd":"#'popularity_of_cuisine', 'norm Restaurant_id count'\n#data['p2'] =  data['norm Restaurant_id count']*data['popularity_of_cuisine']\n#data['p2'] = scaler.fit_transform(data[['p2']])","46ad4831":"#data['p3'] =  data['norm Ranking'] * data['norm ID_TA']*data['Restaurant_id count']\n#data['p3'] = scaler.fit_transform(data[['p3']])","e6c3e99e":"#data['p4'] =  data['Ranking'] \/ data['Restaurant_id count']\n#data['p4'] = scaler.fit_transform(data[['p4']])","2754b96f":"#data['p5'] =  data['Restaurant_id count'] \/ data['Ranking']\n#data['p5'] = scaler.fit_transform(data[['p5']])","0b4c7369":"data.info()","31d1155f":"# \u041c\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043a\u0443\u0447\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u043d\u0430\u0448\u0443 \u0431\u0430\u0437\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u0440\u0430\u043d\u0433\u043e\u043c\ndf_train_out = data[data['sample'] == 1]","d14986c8":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train_out['Ranking'].hist(bins=100)","375e97e4":"df_train_out['City'].value_counts(ascending=True).plot(kind='barh')","779aabc2":"df_train_out['Ranking'][df_train_out['City'] =='London'].hist(bins=100)","86dd1b79":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train_out['City'].value_counts())[0:10].index:\n    df_train_out['Ranking'][df_train_out['City'] == x].hist(bins=100)\nplt.show()","da4ea684":"df_train_out['Rating'].value_counts(ascending=True).plot(kind='barh')","aa0814f5":"df_train_out['Ranking'][df_train_out['Rating'] == 5].hist(bins=100)","6133d609":"df_train_out['Ranking'][df_train_out['Rating'] < 4].hist(bins=100)","cb82ba61":"plt.rcParams['figure.figsize'] = (15,10)\n# \u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0438\u0434\u0435\u0442 \u0434\u0443\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u0435\u0433\u043e \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435)\ndf_train_out_corr = df_train_out.drop(['sample', 'ID_TA','Number of Reviews', 'Count restaurants city', \n                                       'Cuisine Style amount', 'Restaurant_id count', 'Ranking', \n                                       'date_delta'], axis=1)\nsns.heatmap(df_train_out_corr.corr(),)","c812e80d":"# \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043d\u0438\u0437\u043a\u0430\u044f. \u0411\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438","6959f19a":"corr = df_train_out_corr.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","074e01c3":"# \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0430\u044f (\u043d\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \n# \u043a\u0440\u043e\u043c\u0435 'norm Ranking' \u0438 'norm Restaurant_id count'). ","9aab4b79":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 ['Rating']\ncorr['Rating'].abs().sort_values(ascending = False)[:10]\n# \u041f\u043e\u043c\u0438\u043c\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043a\u0443\u0445\u043d\u0438 \u0434\u0438\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u0438\u0442\u0430\u043d\u0438\u044f: \u0432\u0435\u0433\u0430\u043d\u0441\u043a\u0438\u0435 \u0438 \u0431\u0435\u0437\u0433\u043b\u044e\u0442\u0435\u043d\u043e\u0432\u044b\u0435","f7c7d669":"# \u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 ['Ranking'] \u043c\u044b \u0432\u0438\u0434\u0438\u043c \u043a\u0443\u0447\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0443\u0441\u043e\u0432. \n# \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041d\u043e \u0435\u0441\u043b\u0438 \u0438\u0445 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0443\u0441\u0430, \u0442\u043e\n# MAE \u043f\u043e\u0432\u044b\u0448\u0430\u0435\u0442\u0441\u044f. \u041c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u043d\u0430\u0448\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u044d\u0442\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u0438 \u043d\u0435 \n# \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u0438\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u043e \u043e\u0442\u0437\u044b\u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u0438\u0434\u0442\u0438 \u043d\u0430\u043a\u0440\u0443\u0442\u043a\u0430 \u0438\u043b\u0438 \u0437\u0430\u0434\u0432\u043e\u0435\u043d\u0438\u0435\ndf_train_out['Ranking'].plot(kind = 'box')\n","6047462c":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0442\u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438\n\nplt.subplots(figsize=(20,20))\nsns.heatmap(cuisine_in_city.sort_index(), cmap=\"YlGnBu\")\n\n# \u041d\u0430 \u0442\u0435\u043f\u043b\u043e\u0432\u043e\u0439 \u043a\u0430\u0440\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u0432\u043e \u0432\u0441\u0435\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445, \u0430 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e\n# \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 (\u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0443\u0445\u043d\u0438). ","7880c14a":"cuisine_in_city.T.sum().sort_values(ascending = False)\n# \u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 Vegetarian Friendly \u0438 European \u043a\u0443\u0445\u043d\u044f\u043c\u0438","25ed23f5":"# \u041f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u0441\u0442\u0438\u043b\u0435\u0439 \u043a\u0443\u0445\u043e\u043d\u044c - \u043f\u0435\u0440\u0432\u0430\u044f 20-\u043a\u0430\ncuisine_in_city.T.sum().sort_values(ascending = False)[:20].plot(kind = 'bar')","6a3b251b":"# \u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0445\u043d\u0438 \u043d\u0430 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (\u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e)\ndf_train_out.plot(x = 'popularity_of_cuisine', y = 'Rating', kind = 'scatter')","74fc419e":"# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0441\u0435\u0442\u0438 - \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u044e\u0442 3-4 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\ndf_train_out.plot(y = 'Restaurant_id count', kind = 'hist',  bins = 21)","d21ac0bf":"# \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439, \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n#df_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\n#df_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\n#df_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\n#df_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n#df_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\n#data = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\n#data.info()","c5210a45":"def preproc_data(df_input):\n#    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()\n    \n    # ################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ############################################################## \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 (\u0412 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 isNAN)\n    df_output.drop(['ID_TA', 'Number of Reviews', 'Count restaurants city','Cuisine Style amount', \n                    'Restaurant_id count', 'Ranking', 'date_delta'], axis = 1, inplace=True)\n    \n    # \u041e\u0427\u0415\u041d\u042c \u0421\u0422\u0420\u0410\u041d\u041d\u041e! \u041d\u043e \u044d\u0442\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u0412 \u0434\u0440\u0443\u0433\u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u043a\u0430\u0445 \u0438\u0445 \u043c\u043e\u0436\u0435\u0442 \u0438 \u043d\u0435 \u0431\u044b\u0442\u044c.\n    # \u041d\u043e \u043e\u043d\u0438 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 MAE \u0438 \u043f\u0440\u0438\u0442\u043e\u043c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0438 \u0432 \u0444\u0430\u0439\u043b\u0435 submission\n    # \u041d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043f\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u043e \u044d\u0442\u043e \u043d\u0430 \u0440\u0430\u0437\u0431\u043e\u0440\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\n    # , 'Cuisine Style_isNAN','Price_Range_isNAN', 'Number_of_Reviews_isNAN' \n    \n    # ################### 2. NAN ############################################################## \n    # \u0414\u0430\u043b\u0435\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438 \u0442\u0434...\n#    df_output['Number of Reviews'].fillna(0, inplace=True)\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 NAN\n    # ....\n    \n    \n    # ################### 3. Encoding ############################################################## \n    # \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\n#    df_output = pd.get_dummies(df_output, columns=[ 'City',], dummy_na=True)\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0435 Encoding \u0444\u0438\u0442\u0447\u0435\u0439\n    # ....\n    \n    \n    # ################### 4. Feature Engineering ####################################################\n    # \u0442\u0443\u0442 \u0432\u0430\u0448 \u043a\u043e\u0434 \u043d\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0442\u0447\u0435\u0439\n    # ....\n    \n    \n    # ################### 5. Clean #################################################### \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \n    # \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441 dtypes \"object\" \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u043c \u0438\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c\n#    object_columns = [s for s in df_output.columns if df_output[s].dtypes == 'object']\n#    df_output.drop(object_columns, axis = 1, inplace=True)\n    l_col = []\n    for i in list(df_output.columns):\n        if (df_output[i].dtypes == 'datetime64[ns]') or (df_output[i].dtypes == 'object'):\n            l_col.append(i)\n   \n    df_output.drop(l_col, axis = 1, inplace=True)\n    \n    return df_output","ad338537":"df_preproc = preproc_data(data)\ndf_preproc.sample(10)","6947b03f":"df_preproc.info()","80a34985":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","a08bb20d":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","3eef7935":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","a3744c8e":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","92271e29":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","d70a99f4":"# \u041e\u043a\u0440\u0443\u0433\u043b\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0434\u043e \u043a\u0440\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u0448\u0430\u0433\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 0.5\ndef round_rating_pred(rating_pred):\n    if rating_pred <= 0.5:\n        return 0.0\n    if rating_pred <= 1.5:\n        return 1.0\n    if rating_pred <= 1.75:\n        return 1.5\n    if rating_pred <= 2.25:\n        return 2.0\n    if rating_pred <= 2.75:\n        return 2.5\n    if rating_pred <= 3.25:\n        return 3.0\n    if rating_pred <= 3.75:\n        return 3.5\n    if rating_pred <= 4.25:\n        return 4.0\n    if rating_pred <= 4.75:\n        return 4.5\n    return 5.0","688665dd":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)\ny_pred = np.array([round_rating_pred(x) for x in y_pred])","4603b2a4":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","a8be313e":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","e070641d":"test_data.sample(10)","b14d8e91":"test_data = test_data.drop(['Rating'], axis=1)","85b6ab3b":"sample_submission","b580cd08":"predict_submission = model.predict(test_data)","ae06114f":"predict_submission = np.array([round_rating_pred(x) for x in predict_submission])","fe82a51f":"predict_submission","69f084d8":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","7c59754b":"\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438?","facfc960":"# Model \n\u0421\u0430\u043c ML","55489c72":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e!\n\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432\u0430\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0434\u0430\u0436\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0430 \u043c\u043e\u0436\u0435\u0442 \u0434\u0430\u0436\u0435 \u0438 \u043d\u0435 \u043e\u0434\u043d\u0443, \u043d\u043e \u0432 \u044d\u0442\u043e\u043c \u0438 \u0435\u0441\u0442\u044c \u0432\u0430\u0448\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u043e\u0434\u0443\u043b\u0435!     \n\u0421\u043b\u0435\u0434\u0443\u044f \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430\u043c \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u0438 \u043f\u0440\u0438\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f.","27983030":"> \u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u041c\u041b \u0434\u0430\u0436\u0435 \u0434\u043b\u044f \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c One-Hot Encoding, \u0438 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u043b\u0435\u0442\u0435\u0442\u044c.","435241a0":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0444\u043e\u0440\u043c\u0430\u0442\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0432\u0435\u0441\u044c\u043c\u0430 \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439! \u0423\u0434\u0430\u0447\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438!\n","956457b8":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","a98b9b61":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","8ae1e7ea":"\u041f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e 'Price Range' \u044d\u0442\u043e - \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.  \n\u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e (\u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a). \u0410 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 1,2,3  \n*\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0443\u0436\u0435 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e!*","06c5f233":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","591293e4":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","43ef409e":"\u0412\u043e\u043e\u0431\u0449\u0435 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u044d\u0442\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n* \u0433\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u041f\u0438\u0446\u0435\u0440\u0438\u0439 \u0432 \u041c\u0430\u0434\u0440\u0438\u0434\u0435 \u0438\u043b\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0435?\n* \u0432 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u043a\u0443\u0445\u043d\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0430?\n\n\u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0438 \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445)","39df928f":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","0113295e":"# DATA","cfa69692":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","9b4aa561":"\u0414\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432:\n* Label Encoding\n* One-Hot Encoding\n* Target Encoding\n* Hashing\n\n\u0412\u044b\u0431\u043e\u0440 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n\u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0441\u0435\u0439\u0447\u0430\u0441 \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u044d\u0442\u0443 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 One-Hot Encoding:\n![](https:\/\/i.imgur.com\/mtimFxh.png)","d8a208ce":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","73eed0fe":"# Cleaning and Prepping Data\n\u041e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u0443\u0447\u0443 \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u044d\u0442\u0430\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0447\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.   \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","95f30c7b":"### \u0418 \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u043e\u0438\u0445 \u043b\u044e\u0431\u0438\u043c\u044b\u0445 - [\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f)\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0443\u0436\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","49164a00":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","cbffa678":"# EDA \n[Exploratory Data Analysis](https:\/\/ru.wikipedia.org\/wiki\/\u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439_\u0430\u043d\u0430\u043b\u0438\u0437_\u0434\u0430\u043d\u043d\u044b\u0445) - \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u043c\u044b \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u0438\u0449\u0435\u043c \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438, \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438.\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0446\u0435\u043b\u044c \u044d\u0442\u043e\u0433\u043e \u044d\u0442\u0430\u043f\u0430 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u043c \u0434\u0430\u0442\u044c \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435, \u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0438, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c, \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435.\n![](https:\/\/miro.medium.com\/max\/2598\/1*RXdMb7Uk6mGqWqPguHULaQ.png)","85e9e04f":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435.\n\n>\u041f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u043a\u0430\u043a \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u042f \u043f\u043e\u043a\u0430\u0436\u0443 \u0432\u0430\u043c \u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438. \u0410 \u0434\u0430\u043b\u0435\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0431\u0435\u0437 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043e\u043a =) \n","7a5ba388":"#### \u0412\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price Range\".","c78a8252":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","7c86e9ce":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","4d268445":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","559566a5":">\u041f\u043e \u0445\u043e\u0440\u043e\u0448\u0435\u043c\u0443, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043a\u043b\u0430\u0441\u0441 \u0438 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u0434\u0444\u0443\u043d\u043a\u0446\u0438\u0438 (\u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u041e\u041e\u041f). ","cf29f12f":"![](https:\/\/cs10.pikabu.ru\/post_img\/2018\/09\/06\/11\/1536261023140110012.jpg)","86d4129a":"# Data Preprocessing\n\u0422\u0435\u043f\u0435\u0440\u044c, \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430, \u0437\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u0432\u0441\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e.","70718f5e":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","259f9889":"# import","fbb9bf68":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n**\u041f\u043e \u0445\u043e\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0438:**\n* \u041f\u0440\u043e\u043a\u0430\u0447\u0430\u0435\u043c\u00a0\u0440\u0430\u0431\u043e\u0442\u0443 \u0441 pandas\n* \u041d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Kaggle Notebooks\n* \u041f\u043e\u0439\u043c\u0435\u043c \u043a\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n* \u041d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (Nan)\n* \u041f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0432\u0438\u0434\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c\u00a0[Feature Engineering](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435_\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) (\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438)\n* \u0418 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0437\u0430\u0442\u0440\u043e\u043d\u0435\u043c ML\n* \u0418 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435...   \n\n\n\n### \u0418 \u0441\u0430\u043c\u043e\u0435 \u0432\u0430\u0436\u043d\u043e\u0435, \u0432\u0441\u0435 \u044d\u0442\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e!\n\n*\u042d\u0442\u043e\u0442 \u041d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u0441\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u043e\u043c\/\u0428\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u043a \u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e (Baseline) \u0438 \u043d\u0435 \u0441\u043b\u0443\u0436\u0438\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c!*   \n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\n> \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 baseline \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0437\u0430\u0447\u0435\u043c \u043e\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0438 \u043f\u043e\u0447\u0435\u043c\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c baseline \u043a \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e \u0441\u0442\u0430\u043b\u043e \u0432\u0430\u0436\u043d\u044b\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u043c \u043d\u0430 kaggle \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0430\u0445.   \n**baseline** \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0430\u043a \u0448\u0430\u0431\u043b\u043e\u043d, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0441 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u041c\u041b \u043d\u0430\u0447\u0438\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430. \u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0441\u0430\u043c\u043e\u043c\u0443 \u041c\u041b, \u0430 \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0446\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0447\u0438\u0441\u0442\u043e \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \n\u0422\u0430\u043a\u0436\u0435 baseline \u044f\u0432\u043b\u044f\u0435\u0442\u044c\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043e\u043f\u043e\u0440\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435. \u0415\u0441\u043b\u0438 \u0442\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0445\u0443\u0436\u0435 baseline - \u0442\u044b \u044f\u0432\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u043e \u0438 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c) \n\n\u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f baseline \u0438\u0434\u0435\u0442 \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0438 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.  \u0412\u043e\u043e\u0431\u0449\u0435 \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u0432\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u043e 2 \u0441\u0430\u043c\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f)."}}