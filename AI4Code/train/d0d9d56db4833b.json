{"cell_type":{"7c7ec7d7":"code","7ef686f1":"code","a54656c8":"code","d87db7ec":"code","9ecdf0f9":"code","48b8e836":"code","962c18f5":"code","f041aebc":"code","c75d7c0e":"code","7c36331a":"code","d38182bf":"code","347e5cb4":"code","1977d6c6":"code","21b26186":"code","f85ddd09":"code","74d53fed":"code","dc2ac52b":"code","072e5026":"code","3cf962ad":"code","d570d90a":"code","56a1e485":"code","903a9dd2":"code","5ee81ee1":"code","c9227b88":"code","e1dbd7cd":"code","3eb36f14":"code","708c70fd":"code","7af6c9c2":"code","e79d8c1f":"code","18c5444c":"code","bd51ec61":"code","af475d50":"code","82262505":"code","0bebd086":"code","af1b89e2":"code","e8aa1d41":"code","5491a250":"code","046cb471":"code","d6b54e55":"code","fe9798d0":"code","9ae5f202":"code","6d334613":"code","c09f0878":"code","2e3ca152":"code","7458b0c7":"code","bbec6aec":"code","b4b88675":"code","9979366d":"code","cb53f191":"code","4db3f0fa":"code","4473fd79":"code","6089e19b":"code","06af0463":"code","98847917":"code","aeb6019e":"code","97e7a3e6":"markdown","979a1360":"markdown","5b2841b2":"markdown","6d37e0ea":"markdown","3a21d42f":"markdown","2c774277":"markdown","53593563":"markdown","00bd3eb3":"markdown","35e3225d":"markdown","165c109c":"markdown","9625ee38":"markdown","536e9420":"markdown","a239c403":"markdown","93ca0e80":"markdown","34fc8368":"markdown","8bb47f9c":"markdown"},"source":{"7c7ec7d7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics","7ef686f1":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf = pd.concat([df_train, df_test])","a54656c8":"df_train.describe()","d87db7ec":"#descriptive statistics summary for SalePrice\ndf_train['SalePrice'].describe()","9ecdf0f9":"#SalePrice histogram\nsns.distplot(df_train['SalePrice'])","48b8e836":"#skewness and kurtosis\nprint(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","962c18f5":"#Finding the columns with more correlation with SalePrice\ndf_train.corr()['SalePrice'].sort_values(ascending = False)","f041aebc":"#scatter plot of Above ground living area vs. saleprice\nvar = 'GrLivArea'\ndf_train.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))\nprint(df_train['SalePrice'].corr(df_train[var]))","c75d7c0e":"#scatter plot of Above ground living area vs. saleprice\nvar = 'GarageArea'\ndf_train.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))\nprint(df_train['SalePrice'].corr(df_train[var]))","7c36331a":"#scatter plot of Total square feet of basement area vs. saleprice\nvar = 'TotalBsmtSF'\ndf_train.plot.scatter(x=var, y='SalePrice', ylim=(0,800000))\nprint(df_train['SalePrice'].corr(df_train[var]))","d38182bf":"#box plot of overallqual vs. saleprice\nvar = 'OverallQual'\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=df_train)\nfig.axis(ymin=0, ymax=800000)","347e5cb4":"#box plot of year-built vs. saleprice\nvar = 'YearBuilt'\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=df_train)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","1977d6c6":"def show_missing(df):\n    #Shows percentage of null values in each column\n    pd.options.display.max_rows = None\n    display(((df.isnull().sum()\/len(df))*100))","21b26186":"show_missing(df)","f85ddd09":"#DROP the columns which has more than 50% null values\ndf_train.drop(['Alley','MiscFeature','PoolQC','Fence','Id'],axis = 1, inplace = True)\ndf_test.drop(['Alley','MiscFeature','PoolQC','Fence', 'Id'],axis = 1, inplace = True)","74d53fed":"df = pd.concat([df_train, df_test])","dc2ac52b":"#Finding numerical data column names\nnum_variables = [ i for i in df.columns if df.dtypes[i]!='object' ]","072e5026":"num_variables","3cf962ad":"df_train.corr()['SalePrice'].sort_values(ascending = False)","d570d90a":"#Get columns with correlation less than 0.1 for removing\nnum_del = [i for i in num_variables if df_train.corr()['SalePrice'][i] < 0.1]\nnum_del","56a1e485":"#Droping the columns and updating the changes in df \ndf_train.drop(num_del,axis = 1 ,  inplace = True)\ndf_test.drop(num_del,axis = 1 ,  inplace = True)\ndf = pd.concat([df_train, df_test])","903a9dd2":"show_missing(df)","5ee81ee1":"def impute_null(df):\n    cat_v=  [ i for i in df.columns if df.dtypes[i]=='object' if df[i].isnull().values.any()]\n    num_v = [ i for i in df.columns if df.dtypes[i]!='object' if df[i].isnull().values.any()]\n    for i in num_v:\n        df[i].fillna(df_train[i].median(), inplace =True)\n    for i in cat_v:\n        df[i].fillna(df_train[i].mode()[0], inplace =True)","c9227b88":"impute_null(df_train)\nimpute_null(df_test)","e1dbd7cd":"df = pd.concat([df_train, df_test])","3eb36f14":"show_missing(df_train)","708c70fd":"show_missing(df_test)","7af6c9c2":"show_missing(df)","e79d8c1f":"cat_variables =  [ i for i in df.columns if df.dtypes[i]=='object' ]\ncat_variables","18c5444c":"#Handling Ordinal categories using LabelEncoder \nord_dict = {\"LotShape\": ['Reg','IR1','IR2','IR3'],\n            \"LandSlope\" : [\"Gtl\", \"Mod\", \"Sev\" ],\n            \"ExterQual\": [  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\" ],\n            \"ExterCond\": [  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\" ],\n            \"BsmtQual\": [  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NB\" ],\n            \"BsmtCond\":[  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NB\" ],\n            \"BsmtExposure\": [\"Gd\", \"Av\", \"Mn\", \"No\", \"NB\"],\n            \"BsmtFinType1\":[ \"GLQ\",\"ALQ\",\"BLQ\",\"Rec\",\"LwQ\",\"Unf\",\"NB\"],\n            \"BsmtFinType2\":[ \"GLQ\",\"ALQ\",\"BLQ\",\"Rec\",\"LwQ\",\"Unf\",\"NB\"],\n            \"HeatingQC\": [  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\"],\n            \"KitchenQual\": [  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\"],\n            \"GarageQual\":[  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NG\"],\n            \"GarageCond\": [  \"Ex\", \"Gd\", \"TA\", \"Fa\", \"Po\", \"NG\" ],\n            \"Utilities\":  ['AllPub','NoSeWa']\n        }\ncols_ord = ord_dict.keys()\nle = LabelEncoder()\n\nfor col in cols_ord:\n    le.fit(ord_dict[col])\n    df_train[col] = le.transform(df_train[col])\n    df_test[col] = le.transform(df_test[col])\n    ","bd51ec61":"df = pd.concat([df_train, df_test])\ndf.head()","af475d50":"#Updating columnn names\ncat_variables =  [ i for i in df.columns if df.dtypes[i]=='object' ]\nnum_variables = [ i for i in df.columns if df.dtypes[i]!='object' ]","82262505":"df_train.describe()","0bebd086":"train_copy = df_train.copy()\nq1 = df_train.quantile(0.25)\nq3 = df_train.quantile(0.75)\niqr = q3 - q1\ncutoff  = 3*iqr\ncols = df_train\nlower, upper = q1 - cutoff, q3+cutoff\n\ndef TotalOutliers(df, columns, l, u):\n    fin= {}\n    for i in columns:\n        a = df[df[i] > u[i]].shape[0]\n        b = df[df[i] < l[i]].shape[0]\n        fin[i] = a+b\n        a = 0\n        b = 0\n    \n    return fin\n        \noutliers = TotalOutliers(train_copy, num_variables, lower, upper)","af1b89e2":"#Printing the number of outliers in each column.\noutliers","e8aa1d41":"#Droping columns which has more outliers \ndf_train.drop(['BsmtFinType2','ExterCond','BsmtCond','GarageQual','GarageCond','ScreenPorch'], axis = 1,inplace  =True)\ndf_test.drop(['BsmtFinType2','ExterCond','BsmtCond','GarageQual','GarageCond','ScreenPorch'], axis = 1, inplace  =True)\ndf = pd.concat([df_train, df_test])","5491a250":"# Log tranformation for SalePrice\ndf_train['SalePrice'] = np.log(df_train['SalePrice'])","046cb471":"sns.distplot(df_train['SalePrice'])","d6b54e55":"sns.distplot(df_train['GrLivArea'])","fe9798d0":"df_train['GrLivArea'] = np.log(df_train['GrLivArea'])\ndf_test['GrLivArea'] = np.log(df_test['GrLivArea'])","9ae5f202":"sns.distplot(df_train['GrLivArea'])","6d334613":"sns.distplot(df_train['TotalBsmtSF'])","c09f0878":"df = pd.concat([df_train, df_test])","2e3ca152":"dff = pd.get_dummies(df)","7458b0c7":"df_tr = dff[dff['SalePrice'].isnull()==False]\ndf_te = dff[dff['SalePrice'].isnull()]","bbec6aec":"df_te.drop(['SalePrice'], axis = 1, inplace = True)","b4b88675":"model = LinearRegression()\n\n#Seperating training dataset into test and train for cross validation purpose\nx_train, x_test, y_train, y_test = train_test_split(df_tr.drop(['SalePrice'], axis = 1), df_tr['SalePrice'], test_size = 0.2, random_state = 0)","9979366d":"model.fit(x_train, y_train)","cb53f191":"r_sq = model.score(x_train, y_train)\nprint('coefficient of determination:', r_sq)","4db3f0fa":"y_pred = model.predict(x_test)","4473fd79":"print('Validation RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","6089e19b":"model.fit(df_tr.drop(['SalePrice'], axis = 1), df_tr['SalePrice'])\npredictions = model.predict(df_te)","06af0463":"#Applying exponent for the predicted values because we have used log transformation\npredictions = np.expm1(predictions)","98847917":"predictions","aeb6019e":"#Submit the predictions\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_submission= pd.DataFrame({'Id':np.asarray(df_test.Id), 'SalePrice':predictions})\nsample_submission.to_csv(\"submission.csv\", index=False)","97e7a3e6":"# Linear Regression Model","979a1360":"#### Label Encoding for ordinal features","5b2841b2":"### Feature Encoding","6d37e0ea":"### Handling Outliers\n**The values which are outside the specified interquartile range are removed**","3a21d42f":"**We could conclude that more money is spent on new houses than on old ones.**","2c774277":"# Data Exploration\nGoal: understand our dataset features and their naturee ans show some visualizations.","53593563":"### Data Imputation","00bd3eb3":"**SalePrice is related to overall quality, where the box plot shows how sales prices increase with the overall quality.**","35e3225d":"#### One Hot Encoding for nominal features","165c109c":"**The SalePrice data is highly right skewed as the skewness > 1 and has heavy outliers(leptokurtic) as the kurtosis > 3**","9625ee38":"### Imputing the missing values in all columns","536e9420":"**From the correlation coefficient and the above graph we conclude that: there is a positive correlation between the above ground living area and the price so as the first increases the second increases accordingly.**","a239c403":"**From the correlation coefficient and the above graph we conclude that: there is a positive correlation between the total square feet of basement area and the price so as the first increases the second increases accordingly.**","93ca0e80":"# Preprocessing\n**Goal: remove some columns which are not going to be usefull for our model and impute null values of the numerical and categorical variables with median and mode.**","34fc8368":"### Feature Transformation\n**Apply log transformation  to transform some important features which contributes more to our model so that they can perform better. Data will be normally distributed which is good for the ML algorithm.**","8bb47f9c":"**We conclude:\n1- It deviates from the normal distribution.\n2- It is right skewed (positive skewness).**"}}