{"cell_type":{"2827b270":"code","dae50bae":"code","17e460e4":"code","bd4b8ea9":"code","05327d56":"code","dbe2cee9":"code","1337c042":"code","eef84647":"code","eb62f8d4":"code","050722ca":"code","47f7c27b":"code","df010a87":"code","d4cce735":"code","e26705b4":"code","c277a838":"code","58107428":"code","58785119":"code","99ae9455":"code","555db4f3":"code","b038a54d":"code","bda3f912":"code","b2af06ba":"code","ef1b1096":"code","b16d29f4":"code","150ef2f8":"code","33a62125":"code","89640431":"code","d887327e":"code","bcd96a97":"code","47d521a8":"code","3bc29ddc":"code","090b18e7":"code","8f817295":"code","380f5412":"code","6070274f":"code","f14a4348":"code","9528cd70":"code","09639c1d":"code","efa9ed5b":"code","2038c4f6":"code","476d4148":"code","19dc682d":"code","7cd6e841":"markdown","87fe4ac2":"markdown","60054c52":"markdown","8270d8b1":"markdown","f50b3779":"markdown","48027282":"markdown","2f5fc507":"markdown","b01616ff":"markdown","94d2db67":"markdown","23d9da99":"markdown","3054bcb8":"markdown","f04d10a9":"markdown","8bfe0a56":"markdown","6bd19d8a":"markdown","9b49f17a":"markdown","8b60d903":"markdown","0f6ab186":"markdown","89ef0fc8":"markdown","4ffb5320":"markdown","434d4497":"markdown","d10d40b3":"markdown","d58e8855":"markdown","1f08c565":"markdown","a6c098eb":"markdown","85cdeeb9":"markdown","a565e93b":"markdown","68cc793a":"markdown","7effe470":"markdown","17962f89":"markdown","6cd60c47":"markdown","13d21ebc":"markdown","0a32ae35":"markdown","3a61a775":"markdown","a89274c6":"markdown","3d27ed16":"markdown","332e4e4a":"markdown","5cbf2ce7":"markdown","14d4da72":"markdown","0b10b113":"markdown","658b88c1":"markdown","07242b21":"markdown"},"source":{"2827b270":"primes = [2, 3, 5, 7]","dae50bae":"planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']","17e460e4":"hands = [\n    ['J', 'Q', 'K'],\n    ['2', '2', '2'],\n    ['6', 'A', 'K'], # (Comma after the last element is optional)\n]\n# (I could also have written this on one line, but it can get hard to read)\nhands = [['J', 'Q', 'K'], ['2', '2', '2'], ['6', 'A', 'K']]","bd4b8ea9":"my_favourite_things = [32, 'raindrops on roses', help]\n# (Yes, Python's help function is *definitely* one of my favourite things)","05327d56":"my_favourite_things[2](int)","dbe2cee9":"# planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanets[0]","1337c042":"planets[1]","eef84647":"planets[-1]","eb62f8d4":"planets[-2]","050722ca":"# planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanets[0:3]","47f7c27b":"planets[:3]","df010a87":"planets[3:]","d4cce735":"# All the planets except the first and last\n# planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nplanets[1:-1]","e26705b4":"# The last 3 planets\nplanets[-3:]","c277a838":"# Start with Mars then end with Earth\nplanets[3:] + planets[:3]","58107428":"planets[3] = 'Malacandra'\nplanets","58785119":"planets[:3] = ['Mur', 'Vee', 'Ur']\nprint(planets)\n# That was silly. Let's give them back their old names\nplanets[:4] = ['Mercury', 'Venus', 'Earth', 'Mars',]\nprint(planets)","99ae9455":"# How many planets are there?\nlen(planets)","555db4f3":"# The planets sorted in alphabetical order\nsorted(planets)","b038a54d":"primes = [2, 3, 5, 7]\nsum(primes)","bda3f912":"max(primes)","b2af06ba":"x = 12\n# x is a real number, so its imaginary part is 0.\nprint(x.imag)\n# Here's how to make a complex number, in case you've ever been curious:\nc = 12 + 3j\nprint(c.imag)","ef1b1096":"x.bit_length","b16d29f4":"x.bit_length()","150ef2f8":"help(x.bit_length)","33a62125":"# Pluto is a planet darn it!\nplanets.append('Pluto')","89640431":"help(planets.append)","d887327e":"planets","bcd96a97":"planets.pop()","47d521a8":"planets","3bc29ddc":"planets.index('Earth')","090b18e7":"planets.index('Pluto')","8f817295":"# Is Earth a planet?\n\"Earth\" in planets","380f5412":"# Is Calbefraques a planet?\n\"Calbefraques\" in planets","6070274f":"help(planets)","f14a4348":"# Extra Notes for Tuple\nRetrieved from ","9528cd70":"t = (1, 2, 3)","09639c1d":"t = 1, 2, 3 # equivalent to above\nt","efa9ed5b":"t[0] = 100","2038c4f6":"x = 0.125\nx.as_integer_ratio()","476d4148":"numerator, denominator = x.as_integer_ratio()\nprint(numerator \/ denominator)","19dc682d":"a = 1\nb = 0\n# Let's see if they are changing the value or changing the address location for the variables\nprint(id(a))\nprint(id(b))\n\na, b = b, a\nprint(a, b)\n\n# Tho the value is changed, but I am curious about the ids \nprint(id(a))\nprint(id(b))\n\n# Conclusion: The ids are swapped not the value","7cd6e841":"Tuples are often used for functions that have multiple return values.\n\nFor example, the ``as_integer_ratio()`` method of float objects returns a numerator and a denominator in the form of a tuple:","87fe4ac2":"## Tuples\n\nTuples are almost exactly the same as lists. They differ in just two ways.\n\n**1:** The syntax for creating them uses parentheses instead of square brackets","60054c52":"## Slicing\n\nWhat are the first three planets? We can answer this question using *slicing*:","8270d8b1":"We can put other types of things in lists:","f50b3779":"Click the \"output\" button to see the full help page. Lists have lots of methods with weird-looking names like `__eq__` and `__iadd__`. Don't worry too much about these for now. (You'll probably never call such methods directly. But they get called behind the scenes when we use syntax like indexing or comparison operators.) The most interesting methods are toward the bottom of the list (`append`, `clear`, `copy`, etc.).","48027282":"What's the next closest planet?","2f5fc507":"`planets[0:3]` is our way of asking for the elements of `planets` starting from index 0 and continuing up to *but not including* index 3.\n\nThe starting and ending indices are both optional. If I leave out the start index, it's assumed to be 0. So I could rewrite the expression above as:","b01616ff":"> **Aside:** You've actually been calling methods already if you've been doing the exercises. In the exercise notebooks `q1`, `q2`, `q3`, etc. are all objects which have methods called `check`, `hint`, and `solution`.\n\nIn the same way that we can pass functions to the `help` function (e.g. `help(max)`), we can also pass in methods:","94d2db67":"## Extra Notes for Tuple\nRetrieved from [Github](https:\/\/github.com\/junwheih\/Hello-World-Of-Everything\/blob\/main\/Python\/Notes\/Python%20Refresh%20Notes.py)\n\n```python\n# TUPLES\n=====\n# More efficient version of list that you cant modify\n# We can say the position inside the tuple has its meaning\n# immutable, cannot be sorted like list\n\n# Creating a tuple\nA = tuple()\nA = ()\n\nx = ('Ali', 'Sarah', 'Abu')\nx[1]\n>> 'Sarah'\n\n# Tuples not allow assignment, cannot be appended   \nx[1] = 'Muthu'\n>> ERROR: TypeError: 'tuple' object does not support item assignment\n\nnum = (55,2,45,122,98)\nprint(num)\n>> (55,2,45,122,98)\n\nprint(max(num))\n>> 122\n\nFUNCTION RETURNING 1 OR MORE VALUES\n=====\n# Returning more than 1 value from a function\ndef convert(seconds):\n\th = seconds \/\/ 3600\n\tm = (seconds - h*3600) \/\/ 60\n\ts = seconds - h*3600 - m*60\n\treturn h, m, s\n\nresult = convert(5000)\ntype(result)\n>> <class 'tuple'>\n\nhrs, mins, secs = result\nprint(hrs, mins, secs)\n>> 1 23 20\n\nFOR LOOP\n=====\nfor n in num:\n\tprint(n)\n\nnum[1] = 12\n>> Traceback error\n\n# Not mutable thats why this allows the data to be stored more densely than lists\n\n# Things NOT to be do with tuples\nx.sort()\nx.append(1)\nx.reverse()\n>> TRACEBACK: error\n\nx = tuple()\ndir(x)\n>> ['count', 'index']\n\nASSIGNMENT\n=====\n(x, y) = (4, 'Fred')\n\nprint(y)\n>> Fred\n\n(a, b) = (213, 345)\nprint(a)\n>> 213\n\n(a, b) = (8)\n>> TRACEBACK: error\n\nITEMS()\n=====\nd = dict()\nd['RM50'] = 3\nd['RM10'] = 10\n\nfor (k, v) in d.items():\n\tprint(k, v)\n\n>> RM50 3\n>> RM10 10\n\ntups = d.items()\nprint(tups)\n>> dict_items([('RM50', 3), ('RM10', 10)])\n\nCOMPARABLE\n=====\n(0,1,2) < (5,1,2)\n>> True\n# Check first one first, 0 < 5? yes then return True and dont see behind anymore\n\n('John', 'Sally') > ('Ali', 'Sam')\n>> True\n\nSORTING LIST OF TUPLES\n=====\nhashmap = {'Ali': 3, 'Abu': 1, 'Sarah': 1, 'Ah Kau': 1}\nhashmap.items()\n>> dict_items([('Ali', 3), ('Abu', 1), ('Sarah', 1), ('Ah Kau', 1)])\n\nsorted(hashmap.items())\n>> [('Abu', 1), ('Ah Kau', 1), ('Ali', 3), ('Sarah', 1)]\n\nSORTED BY KEYS\n=====\nhashmap = {'C': 3, 'B': 123, 'A': -5}\nsorted(hashmap.items())\n>> [('A', -5), ('B', 123), ('C', 3)]\n\nfor k, v in hashmap.items():\n\tprint(k, v)\n\n>> C 3\n>> B 123\n>> A -5\n\nfor k, v in sorted(hashmap.items()):\n\tprint(k, v)\n\n>> A -5\n>> B 123\n>> C 3\n\nSORTED BY VALUES\n=====\nhashmap = {'C': 3, 'B': 123, 'A': -5}\ntmp = list()\nfor k, v in hashmap.items():\n\ttmp.append( (v, k) )\n\nprint(tmp)\n>> [(3, 'C'), (123, 'B'), (-5, 'A')]\n\ntmp = sorted(tmp)\n>> [(-5, 'A'), (3, 'C'), (123, 'B')]\n\ntmp = sorted(tmp, reverse=True)\n>> [(123, 'B'), (3, 'C'), (-5, 'A')]\n\nGET THE TOP 10 WORD FREQUENCY\n=====\nf = open('tomeo.txt')\ncounts = dict()\n\nfor line in f:\n\twords = line.split()\n\tfor word in words:\n\t\tcounts[word] = count.get(word, 0) + 1\n\n# LONG VERSION\nlst = list()\nfor k, v in counts.items():\n\tnewtup = (v, k)\n\tlst.append(newtup)\n\nlst = sorted(lst, reverse=True)\n\nfor v, k in lst[:10]:\n\tprint(k, v)\n\n# SHORTER VERSION\nprint(sorted( [ (v, k) for k, v in c.items() ] ) )\n>> [(-5, 'A'), (3, 'C'), (123, 'B')]\n\n# READUP LIST COMPREHENSION = CREATES A DYNAMIC LIST\n\nlst = ( [ (v, k) for k, v in hashmap.items() ] )\n>> [(3, 'C'), (123, 'B'), (-5, 'A')]\nlst.sort()\n>> [(-5, 'A'), (3, 'C'), (123, 'B')]\n\nENUMERATE WITH TUPLE\n=====\n# The enumerate() function takes a list as a parameter and returns a tuple for each element in the list. The first value of the tuple is the index and the second value is the element itself.\nplayers = [\"Ali\", \"Sarah\", \"Ah Meng\"]\nfor index, person in enumerate(players, start=1):\n\tprint(\"{} - {}\".format(index, person))\n\n'''\n1 - Ali\n2 - Sarah\n3 - Ah Meng\n'''\n\n# Return the tuple (index, character) for the \"Hello\"\nfor character in enumerate(\"Hello\"):\n    print(character)\n'''\n(0, 'H')\n(1, 'e')\n(2, 'l')\n(3, 'l')\n(4, 'o')\n'''\n\n# Indexing each character for the \"Hello\" starting from 0\nfor index, character in enumerate(\"Hello\"):\n    print(str(index) + \" \" + character)\n'''\n0 H\n1 e\n2 l\n3 l\n4 o\n'''\n\n#Indexing each character for the \"Hello\" starting from 100\n# enumerate(iterable, start=0)\nfor index, character in enumerate(\"Hello\", 100):\n    print(str(index) + \" \" + character)\n'''\n100 H\n101 e\n102 l\n103 l\n104 o\n'''\n```","23d9da99":"## Interlude: objects\n\nI've used the term 'object' a lot so far - you may have even read that *everything* in Python is an object. What does that mean?\n\nIn short, objects carry some things around with them. You access that stuff using Python's dot syntax.\n\nFor example, numbers in Python carry around an associated variable called `imag` representing their imaginary part. (You'll probably never need to use this unless you're doing some very weird math.)","3054bcb8":"`list.pop` removes and returns the last element of a list:","f04d10a9":"**2:** They cannot be modified (they are *immutable*).","8bfe0a56":"`sorted` returns a sorted version of a list:","6bd19d8a":"The things an object carries around can also include functions. A function attached to an object is called a **method**. (Non-function things attached to an object, such as `imag`, are called *attributes*).\n\nFor example, numbers have a method called `bit_length`. Again, we access it using dot syntax:","9b49f17a":"We've previously used the `min` and `max` to get the minimum or maximum of several arguments. But we can also pass in a single list argument.","8b60d903":"# EXTRA NOTES\n[Github Ref](https:\/\/github.com\/junwheih\/Hello-World-Of-Everything\/tree\/main\/Python\/Notes)\n\n```python\nLISTS\n=====\n# Creating a list\nA = list()\nA = []\n\n# A COLLECTION\nfriends = ['Ali', 'Ah Kau', 'Muthu']\n\n# A list can be included with diff type of data\nmix = ['Ali', 29, 175.5, 89.2, 'Sarah']\nprint(mix[1]) # 29\nprint(mix[5]) # 'Sarah'\nprint(mix[-1]) # 'Sarah'\nprint(mix[0]) # 'Ali'\nprint(mix[-5]) # 'Ali'\nprint(mix[-6]) # IndexError: list index out of range\nprint(mix[6]) # IndexError: list index out of range\n\n# List in a list\nll = [1, [23,2], 55]\nprint(ll[1][1]) # 2\n\n# Clear the list\nemp = [] # or emp = list()\n\n# Printing the elements of the list using for loop\nfor data in mix:\n\tprint(data, end = \" \") # 'Ali' 29 175.5 89.2 'Sarah'\n\n# Print the list at once\nprint(mix) # ['Ali', 29, 175.5, 89.2, 'Sarah']\n\nPUTTING FUNCTION IN A LIST\n=====\nls = ['Ali', help]\nls[1](int)\n>>> Help on class int in module builtins:\n\nclass int(object)\n |  int([x]) -> integer\n |  int(x, base=10) -> integer\n |\n |  Convert a number or string to an integer, or return 0 if no arguments\n |  are given.  If x is a number, return x.__int__().  For floating point\n |  numbers, this truncates towards zero.\n |\n |  If x is not a number or if...\n\nCREATE A LIST OF NUMBER ASCENDING WIHOUT LOOP\n=====\nnum_list = list(range(100))\nprint(num_list) # [0, 1, 2, ..., 99]\n\nls = list(range(3,8))\nprint(ls) # [3,4,5,6,7]\n\nls = list(range(0, 10, 2))\nprint(ls) # [0, 2, 4, 6, 8]\n\nLOOKING INSIDE THE LISTS\n=====\nfriends = ['Ali', 'Ah Kau', 'Muthu']\nprint(friends[2])\n>> Muthu\n\nprint(friends[:2])\n>> ['Ali', 'Ah Kau']\n\nn = [5,4,3,2,1]\nprint(n[2:4]) # [3,2] NOTE: the [x:y] --> x is inclusive while y is not inclusive\n\nGET THE INDEX OF THE ELEMENT IN A LIST\n=====\ngrocery = ['cookie', 'bacon', 'vege']\nprint(grocery.index('bacon')) # 1\n\nletter = ['a', 'b', 'a']\nprint(letter.index('a')) # 0\n\nnum = [1,2,3]\nprint(num.index(1)) # 0\n\nLISTS ARE MUTABLE\/CHANGEABLE\n=====\nString: immutable\ntest = 'hello'\ntest[1]\n>> e\n\ntest[1] = 'o'\n# TRACEBACK: TypeError: 'str' object does not support item assignment\n\nplayers = [93, 23, 45, 1, 9]\nplayers[2] = 7\n\nplayers\n>> [93, 23, 7, 1, 9]\n\nlen(players)\n>> 5\n\nLIST CONCATENATION\n=====\nls = [1,2,3]\nls *= 2\nprint(ls) # [1,2,3,1,2,3]\n\nls1 = [4,5,6]\nprint(ls + ls1) # [1, 2, 3, 1, 2, 3, 4, 5, 6]\n\nCOUNTING ELEMENT IN A LIST\n=====\nls = [1, 2, 3, 1, 2, 3, 4, 5, 6]\nprint(ls.count(3))\n>> 2\n\nRANGE\n=====\nprint(range(4))\n>> [0, 1, 2, 3]\n\nprint(range(len(players)))\n>> [0, 1, 2, 3, 4]\n\nLOOPS\n=====\nfor f in friends:\n\tprint(f)\n\nfor i in range(len(friends)):\n\tprint(friend[i])\n\nSLICING LISTS\n=====\n# UP TO BUT NOT INCLUDING\ntmp = [1,2,3,4,5,6,7,8]\ntmp[1:3]\n>> [2,3]\n\ntmp[:4]\n>> [1,2,3,4]\n\ntmp[3:]\n>> [4,5,6,7,8]\n\ntmp[:]\n>> [1,2,3,4,5,6,7,8]\n\nLIST FUNCTION\n=====\nx = list()\ny = [1,2,3,4]\nz = list(y)\nprint(z)\n>> [1,2,3,4]\n\ntype(x)\n>> <type 'list'>\ndir(z)\n>> ['append', 'count', 'sort', ...]\n\nAPPEND\n=====\n# Always append at the end of the list unless you want to insert\nthing = list()\nthing.append(99)\nthing.append('apples')\n\nprint(thing)\n>> [99, 'apples']\n\nINSERT\n=====\nfruits = ['apple', 'banana', 'pineapple', 'melon']\nfruits.insert(1, 'orange')\n>> ['apple', 'orange', 'banana', 'pineapple', 'melon']\n\nfruits.insert(999, 'Possible Fruit')\n>> ['apple', 'orange', 'banana', 'pineapple', 'melon', 'Possible Fruit']\n\nREMOVE\n=====\nfruits.remove('Possible Fruit')\n>> ['apple', 'orange', 'banana', 'pineapple', 'melon']\n\nfruits.remove('Pear')\n>> TRACEBACK: ValueError list.remove(x): x not in list\n\nls = [1,5,1,2,3,4,1]\nls.remove(1) # [5, 1, 2, 3, 4, 1]\n\nPOP\n=====\nfruits.pop()\n>> 'melon'\n>> ['apple', 'orange', 'banana', 'pineapple']\n\nCHECK IF AN ITEM IN THE LIST\n=====\nnum = [123, 2, 45, 67, 89]\n2 in num\n>> True\n77 in num\n>> False\n77 not in num\n>> True\n\na = [1,2,3]\nb = [4,5,6]\na.append(b)\nprint(a)\n>> [1, 2, 3, [4, 5, 6]]\n\nSORT\n=====\n# This function modifies the list you chose\nname = ['Sarah', 'John' ,'Ali']\nprint(name)\n>> ['Sarah', 'John' ,'Ali']\nname.sort()\nprint(name)\n>> ['Ali', 'John', 'Sarah']\nname[1]\n>> 'John'\n\n# NOTE: Works for the numbers too\nx = [3,1,2]\nx.sort()\nprint(x) [1,2,3]\n\n# SORTING IN REVERSE ORDER\nn = [1,2,3]\nn.sort(reverse=True)\nprint(n) # [3,2,1]\n\nSORTED\n=====\n# This function return you a new sorted list without modifying the original list\nnames = ['Sarah', 'John' ,'Ali']\nnewList = sorted(names)\nnewList\n>> ['Ali', 'John', 'Sarah']\nnames\n>> ['Sarah', 'John' ,'Ali']\n\nSORTED BY KEY\n=====\n# What if we want to sort the list according to the length of the word\nnames = ['Carlos', 'Pewdiepie' ,'Ali']\nnewList = sorted(names, key=len)\nnewList\n>> ['Ali', 'Carlos', 'Pewdiepie']\n\nBUILD-IN FUNCTION FOR LIST: FIND THE MAX, MIN, SUM, *\n=====\nnums = [12,25,38,49,53,6]\nlen(nums)\n>> 6\nmax(nums)\n>> 53\nmin(nums)\n>> 6\n\n# KEY FOR MIN AND MAX\ndef mod_5(x):\n    \"\"\"Return the remainder of x after dividing by 5\"\"\"\n    return x % 5\n\nprint(\n    'Which number is biggest?',\n    max(100, 51, 14),\n    'Which number is the biggest modulo 5?',\n    max(100, 51, 14, key=mod_5),\n    sep='\\n',\n)\n\nsum(nums)\n>> 183\n\n# To get average\nprint(sum(nums) \/ len(nums))\n\nnumlist = list()\n\nwhile True:\n\tn = input(\"Enter a num: \")\n\tif n == 'done':\n\t\tbreak\n\telse:\n\t\tnumlist.append(float(n))\n\naverage = sum(numlist) \/ len(numlist)\n\nLISTS & STRINGS\n=====\nSPLIT\ntmp = \"ABC with cows\"\n\ntmpList = tmp.split()\n>> ['ABC', 'with', 'cows']\nlen(tmpList)\n>> 3\ntmpList[1]\n>> 'with'\n\nfor w in tmpList:\n\tprint(w)\n>> 'ABC'\n>> 'with'\n>> 'cows'\n\n# SPLIT THE WHITESPACE AS WELL\ntmp = 'hello       there hahaha'\ntmpList = tmp.split()\n>> ['hello', 'there', 'hahaha']\n\ntmp = 'hello;there;world'\ntmpList = tmp.split()\n>> ['hello;there;world']\ntmpList = tmp.split(';')\n>> ['hello', 'there', 'world']\n\n# LIST COMPREHENSION\nmultiples = []\nfor i in range(1, 11):\n\tmultiples.appned(i*7)\n\nprint(multiples)\n>> [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]\n\n# Better version = use list comprehension\nprint([i*7 for i in range(1,11)])\n>> [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]\n\nlanguage = ['Python', 'Java', 'C++', 'Javascript']\nprint([len(x) for x in language])\n>> [6, 4, 3, 10]\n\n# Print number which is divisible by 3\nprint([x for x in range(0, 40) if x % 3 == 0])\n>> [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39]\n\n# MORE LIST METHODS\nlist.reverse() # Reverses the order of items of the list\nx = [1,2,3]\nx.reverse()\nprint(x) # [3,2,1]\n\nlist.clear() # Removes all the items of the list\nlist.copy() # Creates a copy of the list\nlist.extend(other_list) # Appends all the elements of other_list at the end of list\n\nx = [1,2,3]\ny = [4,5]\nx.extend(y)\nprint(x) # [1,2,3,4,5]\n\n# NOTE: If you use append, it will cause list in a list\n# Example\nx = [1,2,3]\ny = [4,5]\nx.append(y)\nprint(x) # [1,2,3,[4,5]]\n```","0f6ab186":"If I leave out the end index, it's assumed to be the length of the list.","89ef0fc8":"Hm, that's quite a mouthful. Let's compensate by shortening the names of the first 3 planets.","4ffb5320":"The `-> None` part is telling us that `list.append` doesn't return anything. But if we check the value of `planets`, we can see that the method call modified the value of `planets`:","434d4497":"Oh, that's right...\n\nTo avoid unpleasant surprises like this, we can use the `in` operator to determine whether a list contains a particular value:","d10d40b3":"## Indexing\n\nYou can access individual list elements with square brackets.\n\nWhich planet is closest to the sun? Python uses *zero-based* indexing, so the first element has index 0.","d58e8855":"Which planet is *furthest* from the sun?\n\nElements at the end of the list can be accessed with negative numbers, starting from -1:","1f08c565":"A list can contain a mix of different types of variables:","a6c098eb":"We can even make a list of lists:","85cdeeb9":"## List functions\n\nPython has several useful functions for working with lists.\n\n`len` gives the length of a list:","a565e93b":"To actually call it, we add parentheses:","68cc793a":"## List methods","7effe470":"These multiple return values can be individually assigned as follows:","17962f89":"`list.append` modifies a list by adding an item to the end:","6cd60c47":"i.e. the expression above means \"give me all the planets from index 3 onward\".\n\nWe can also use negative indices when slicing:","13d21ebc":"# Lists\n\nLists in Python represent ordered sequences of values. Here is an example of how to create them:","0a32ae35":"It comes third (i.e. at index 2 - 0 indexing!).\n\nAt what index does Pluto occur?","3a61a775":"<!-- TODO:\ndir?\nA useful builtin method for interacting with objects is `dir`. `dir` asks: what are the names of all the things (methods, and attributes) that this object is carrying around?\nhelp(x)?\n-->\n\nThe examples above were utterly obscure. None of the types of objects we've looked at so far (numbers, functions, booleans) have attributes or methods you're likely ever to use.\n\nBut it turns out that lists have several methods which you'll use all the time.","a89274c6":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161283) to chat with other Learners.*","3d27ed16":"## Changing lists\n\nLists are \"mutable\", meaning they can be modified \"in place\".\n\nOne way to modify a list is to assign to an index or slice expression.\n\nFor example, let's say we want to rename Mars:","332e4e4a":"Why does the cell above have no output? Let's check the documentation by calling `help(planets.append)`.\n\n> **Aside:** `append` is a method carried around by *all* objects of type list, not just `planets`, so we also could have called `help(list.append)`. However, if we try to call `help(append)`, Python will complain that no variable exists called \"append\". The \"append\" name only exists within lists - it doesn't exist as a standalone name like builtin functions such as `max` or `len`.","5cbf2ce7":"There are a few more interesting list methods we haven't covered. If you want to learn about all the methods and attributes attached to a particular object, we can call `help()` on the object itself. For example, `help(planets)` will tell us about *all* the list methods: ","14d4da72":"# Your Turn\n\nYou learn best by writing code, not just reading it. So try **[the coding challenge](https:\/\/www.kaggle.com\/kernels\/fork\/1275173)** now.","0b10b113":"### Searching lists\n\nWhere does Earth fall in the order of planets? We can get its index using the `list.index` method.","658b88c1":"`sum` does what you might expect:","07242b21":"Finally we have some insight into the classic Stupid Python Trick\u2122 for swapping two variables!"}}