{"cell_type":{"d82c521c":"code","76048602":"code","75e309cc":"code","84eee59b":"code","4f5bb90c":"code","eb51575f":"code","ae3624a0":"code","f7c480a9":"code","2a75b88c":"code","b22c0606":"code","25b8ad6f":"code","f5d5bad4":"code","ff7aa6a2":"code","92c540b1":"code","e880e569":"code","ecd74269":"code","dac7fb5d":"markdown","4eeef809":"markdown","a22192e1":"markdown","4a2df2bd":"markdown","2f8575cf":"markdown","0f493046":"markdown","e602a6a9":"markdown"},"source":{"d82c521c":"import os\nimport numpy as np\nimport pandas as pd","76048602":"\ndir_path = \"..\/input\/training\/\"\n\ndef dataGathering():\n    \"\"\" Get the data from Training directory and transform into key and values pairs \"\"\"\n    data = {}\n\n    for file in os.listdir(dir_path):\n        with open(dir_path+file,\"r\") as f:\n            t = f.read().split(\"\\n\")\n            for j in t:\n                if(j.find(\"circle\")!=-1):\n                    mid,mlists = j.split(\":\")[0].split(\"circle\")[-1],j.split(\":\")[1]\n                    mlists = mlists.split()\n                    keys = (file.split(\".\")[0],mid)\n                    data[keys] = mlists\n\n    return data","75e309cc":"data = dataGathering()","84eee59b":"## get list of all users\nusers = set(np.array(list(data.keys())).reshape((1184,)).tolist())\nusers","4f5bb90c":"def getFriendsForUser(id1):\n    \"\"\" this function get input as user id and return friends\n    list of users id\"\"\"\n    \n    list1 = []\n    for pair in list(data.keys()):\n        if(id1 in pair):\n            value_of_pair = data[pair]\n            list1+=value_of_pair\n    list1 = list(set(list1))\n    return list1\n\n# this dictionary used to maintain key value where key is user id and value stores list of users id who are in friendlist of corresponding user\n# ex : user is \"1\" and friends of user \"1\" are (\"3\",\"7\",\"8\")\n# then {\"1\":[\"3\",\"7\",\"8\"]}\nusers_friends = {}\n\nfor i in users:\n    users_friends[i] = getFriendsForUser(i)\n    \nusers_friends","eb51575f":"def get_friends_of_friends(id1):\n    \"\"\" get user id as input and return list of users id of friends of friend\"\"\"\n    friends = users_friends[id1]\n    friends_of_friends = []\n    for f in friends:\n        if f in users:\n            friends_of_friends+=users_friends[f]\n    friends_of_friends = list(set(friends_of_friends))\n    return friends_of_friends\n\ndef suggestFriendsOfFriends(id1):\n    \"\"\"Gives suggested users id\"\"\"\n    recommendedDict = {}\n    friends = set(users_friends[id1])\n    friend_of_friends = get_friends_of_friends(id1)\n    for j in friend_of_friends:\n        if j in users:\n            friends_of_j = set(users_friends[j])\n            t = friends.intersection(friends_of_j)\n            if(len(t)>0):\n                recommendedDict[j] = len(t)\n    return recommendedDict\nsuggestFriendsOfFriends(\"10395\")","ae3624a0":"## suggest friends of friends\nfor j in users:\n    d = suggestFriendsOfFriends(j)\n    if(len(d)>0):\n        print(j , d)","f7c480a9":"# function which return list of friends who are common between two users\ndef findCommonFriends(id1,id2):\n    friends_of_id1 = users_friends[id1]\n    friends_of_id2 = users_friends[id2]\n    common = list(filter(lambda x : x in friends_of_id2  , friends_of_id1))\n    return [id1,id2,len(common),len(friends_of_id1),len(friends_of_id2)]\n    ","2a75b88c":"## build dataframe of friends\nd3 = []\nfor u1 in users:\n    for u2 in users:\n        if(u1!=u2):\n            c = findCommonFriends(u1,u2)\n            if(c[2]>0):\n                d3+=[c]\ndata3 = pd.DataFrame(d3)\ndata3.columns = [\"user1\",\"user2\",\"count of common friends\",\"Total friends count of user1\",\"Total friends count of user2\"]\ndata3","b22c0606":"## i have observed that there are duplicates entries ( ex users pair =(1,2) and (2,1) both are represents same thing so remove anyone of them\n","25b8ad6f":"t = data3.values[:,:2].tolist()\nd = []\nt1 = []\nsetOfIndexs = []\nfor i in t:\n    if(i not in d) and (i[::-1] not in d):\n        setOfIndexs.append(t.index(i))\n        d.append(i)\ndata4 = data3.loc[setOfIndexs,:].reset_index(drop=True)\nd3 = data4.values.tolist()\n\nfor i in d:\n    if (i[0] not in users_friends[i[1]]) and (i[1] not in users_friends[i[0]]):\n        t1.append(d.index(i))\n    ","f5d5bad4":"data4 = data4.loc[t1,:].reset_index(drop=True).sort_values(by=\"count of common friends\",ascending=False)\ndata4","ff7aa6a2":"# set threshold value for minimum friends count is 20\nd5 = data4[(data4[\"Total friends count of user1\"]>=20)&(data4[\"Total friends count of user2\"]>=20)]\n\n## compute ratio of common friends\/ total friends for suer1 and user2\nd5[\"user1 chances\"] = d5[\"count of common friends\"]*100 \/d5[\"Total friends count of user1\"]\nd5[\"user2 chances\"] = d5[\"count of common friends\"]*100 \/d5[\"Total friends count of user2\"]\nd5[\"user1 chances\"] = d5[\"user1 chances\"].apply(lambda x : np.round(x,2))\nd5[\"user2 chances\"] = d5[\"user2 chances\"].apply(lambda x : np.round(x,2))\nd5","92c540b1":"results = d5[(d5[\"user1 chances\"] > 20)|(d5[\"user2 chances\"] > 20)]","e880e569":"def getSuggestedFriends(id1):\n    \"\"\" This function retuen list of friends and system can those all users on suggestion page\"\"\"\n    t1 = results[(results[\"user1\"]==id1)&(results[\"user1 chances\"]>=20)][\"user2\"].values.tolist()\n    t2 = results[(results[\"user2\"]==id1)&(results[\"user2 chances\"]>=20)][\"user1\"].values.tolist()\n    return t1+t2","ecd74269":"getSuggestedFriends(\"9947\")","dac7fb5d":"# Building Social network suggestion system\n\n### purpose : to suggest \/ recommend users you might linke to connect \/ follow.","4eeef809":"system can suggest user 128 and 190 on the suggestion page of user 9947","a22192e1":"what is shows that \n\nfriends of 1 : [2]\n\nfriends of 2 : [1,3]\n\nfriends of 3 : [2,4,5]\n\nfriends of 4 : []\n\nfriends of 5 : []\n\n\n\nso here 1 and 3 are not friends but they have one mutual friend is 2 then we can suggest user 1 profile to the user 3\nhere we are not suggesting user 4 and user 5 profiles to user 1 because they don't have any mutual friends\n\nin real world we are not suggest one user to other user if they both have only one mutual friend we can set a fixed threshold value = 10 if user1 and user2 are friends of friend and they both have minimum 10 users then only user1 will suggested to user 2","4a2df2bd":"### 2) count mutual friends between any two users and based on it suggest different users","2f8575cf":"Description : Do have any idea how social networking apps like linkedin , instagram and facebook are suggests us people you may know or people you might like to connect\/follow , if you have used social networking app then you know that they shows us page like *suggestion for you* or *People you may know* so in this notebook i have covered two simple methods to build simple social network suggestion system. it's not complex algorithm it's easy and straightforward way  ","0f493046":"We can display user 5212 in the people you know page of user 535 as they both have 104 mutual friends\n(using this approach we got only those users who are the friends of friends)","e602a6a9":"### 1) suggest friend of friend : it is simplest approach just view following image\n![image.png](attachment:aa308d87-5dd8-4729-bf08-d65c02e41860.png)"}}