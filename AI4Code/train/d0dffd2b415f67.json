{"cell_type":{"aa79e1d7":"code","1aafdaf5":"code","b6d0b413":"code","bc9c4f30":"code","e1ff6dd2":"code","ddff4109":"code","ea353628":"code","c8163764":"code","dc74c346":"code","8d0020dd":"code","c3e589b1":"code","efd465a1":"code","07e1072d":"code","a6117791":"code","a7969464":"code","dd297701":"code","aa81f61f":"code","4bcc75d0":"code","6f8ed5a1":"code","11356c95":"code","23b87117":"code","1e814f0c":"code","18045bb3":"code","f43b7a7b":"code","fe35767d":"code","8a011592":"code","d2919130":"code","ace5a3ac":"code","de170d4c":"code","16757ed3":"code","7cc50850":"code","563b1d66":"code","9e52ce2b":"code","73d276f4":"code","25ef326f":"code","575341e7":"code","ee2442c9":"code","3f70b932":"code","7023bca4":"code","a9bea508":"code","dffdc680":"code","e9a26662":"code","e990f36e":"code","97e44cfa":"code","3625b28a":"code","f2c15e11":"code","3c8bcf7a":"code","9ee2e948":"code","0786bc0f":"code","fbd4300c":"code","9077c0b4":"code","fcfd8a2e":"code","0ace46a9":"code","437604be":"code","8977d68a":"code","47603a56":"code","46112cdf":"code","9320016d":"code","cf5095a8":"code","6f059abc":"code","941e1ccc":"code","50cea8bf":"code","12e29014":"code","ca39624f":"code","d03e4f46":"code","91550f5b":"code","7662f25e":"code","8ba6882b":"code","1001506c":"markdown","4dcacf58":"markdown","8874c587":"markdown","607b0141":"markdown","c15a2033":"markdown","307bdcea":"markdown","731a1162":"markdown","b52d9907":"markdown","4a6ae552":"markdown","a05447c8":"markdown","78d5e7b3":"markdown","455f33a2":"markdown","05b8f3cf":"markdown","101204b5":"markdown","329b3200":"markdown","b927b401":"markdown","fac4d3a1":"markdown"},"source":{"aa79e1d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\nfrom collections import Counter\nimport collections as co\nfrom datetime import datetime, timedelta\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1aafdaf5":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","b6d0b413":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","bc9c4f30":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","e1ff6dd2":"df_train.info()","ddff4109":"df_train.head(5)","ea353628":"df_test.info()","c8163764":"df_test.head(5)","dc74c346":"sample_submission.head(5)","8d0020dd":"sample_submission.info()","c3e589b1":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","efd465a1":"#\u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u044b\u0432\u0430\u044e, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0432\u043e\u0438 \u0438\u043c\u0435\u043d\u0430 \u0432 \u043a\u043e\u0434\u0435\ndf = data.copy()","07e1072d":"data.info()","a6117791":"df.sample(5)","a7969464":"df.rename(\n    columns={'Price Range': 'price_range', 'Cuisine Style': 'cuisine_style', 'Number of Reviews': 'n_reviews'}, inplace=True)","dd297701":"# n_reviews \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0435\ndf['n_reviews'].fillna(df['n_reviews'].mean(), inplace=True)\n","aa81f61f":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 price_range \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndf['price_range'].fillna(df['price_range'].mode()[0], inplace=True)","4bcc75d0":"# n_reviews \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0435\ndf['Reviews'].fillna('[[], []]', inplace=True)","6f8ed5a1":"df['Reviews'].head()","11356c95":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0434\u0430\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndf['Reviews1'] = df['Reviews'].apply(lambda x: x.split(\", ['\", 1)[-1][0:-2])","23b87117":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439\ndef custom_r(r):\n    maxi = datetime.strptime('01\/01\/1000', '%m\/%d\/%Y')\n    ss = r.replace(\"'\", '')\n    if (ss != \"\") and (ss != '[[], ['):\n        dd = ss.split(',')\n        for yy in dd:\n            jj = datetime.strptime(yy.strip(), '%m\/%d\/%Y')\n            if maxi < jj:\n                maxi = jj\n    return maxi\n\n\ndf['Reviews2'] = df.apply(lambda x: custom_r(x['Reviews1']), axis=1)","1e814f0c":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439\ndef custom_r(r):\n    mini = datetime.strptime('01\/01\/3000', '%m\/%d\/%Y')\n    ss = r.replace(\"'\", '')\n    if (ss != \"\") and (ss != '[[], ['):\n        dd = ss.split(',')\n        for yy in dd:\n            jj = datetime.strptime(yy.strip(), '%m\/%d\/%Y')\n            if jj < mini:\n                mini = jj\n    return mini\n\n\ndf['Reviews3'] = df.apply(lambda x: custom_r(x['Reviews1']), axis=1)","18045bb3":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u044c\u043d\u043e\u0439 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u043e\u0442\u0437\u044b\u0432\u0430\ndf['Reviews4'] = df['Reviews2']-df['Reviews3']\n# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441 \u0440\u0430\u0437\u043d\u0438\u0446\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u044c\u043d\u043e\u0439 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435\ndf['Reviews4'] = df.apply(lambda x: x.Reviews4.days, axis=1)\n# \u0443\u0431\u0438\u0440\u0430\u044e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ndf['Reviews2'] = df.apply(lambda x: None if x.Reviews2.strftime(\n    \"%Y\") == '1000' else x.Reviews2, axis=1)\n# \u0443\u0431\u0438\u0440\u0430\u044e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ndf['Reviews3'] = df.apply(lambda x: None if x.Reviews3.strftime(\n    \"%Y\") == '3000' else x.Reviews3, axis=1)","f43b7a7b":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043b\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043e\u0447\u043d\u044b\u0439 \u044d\u043b\u0435\u0435\u043d\u0442 (\u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e)\ndf['Reviews2'].fillna(df['Reviews2'][1], inplace=True)\ndf['Reviews3'].fillna(df['Reviews3'][1], inplace=True)","fe35767d":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435\ndf['Reviews5'] = df.apply(lambda x: float(x.Reviews2.asm8), axis=1)","8a011592":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u0430\u0442\u043e\u0439 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435\ndf['Reviews6'] = df.apply(lambda x: float(x.Reviews3.asm8), axis=1)","d2919130":"df.describe()","ace5a3ac":"# City - \u043e\u0441\u0442\u0430\u0432\u0438\u043c 10 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0437\u0430\u043c\u0435\u043d\u0435\u043c \u043d\u0430 'other'\nall_cities = df.City.value_counts().index\ntop_cities = list(df.City.value_counts().sort_values(\n    ascending=False).head(11).index)\ncities_to_throw_away = list(set(all_cities) - set(top_cities))\ndf.loc[df['City'].isin(cities_to_throw_away), 'City'] = 'other'","de170d4c":"# \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 dummies\ndum = pd.get_dummies(df.City, drop_first=True)","16757ed3":"# \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438 \u043a \u0434\u0430\u043d\u043d\u044b\u043c\ndf = pd.concat([df, dum], axis=1)","7cc50850":"# \u0443\u0431\u0440\u0430\u043b\u0438 \u043b\u0438\u0448\u043d\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442, \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0430 'a'\ndf['cuisine_style'] = df['cuisine_style'].map(lambda x: str(x)[1:][:-1])","563b1d66":"# \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0443\u0445\u043e\u043d\u044c\ncuisine_list = []\nfor some in df['cuisine_style']:\n    for in_list in some.split(', '):\n        if in_list != 'a':\n            in_list = in_list[1:-1]\n        cuisine_list.append(in_list)\n# cuisine_list","9e52ce2b":"# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0443\u0445\u043d\u0438 (\u043f\u0440\u043e\u043f\u0443\u0441\u043a 'a' \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0443\u0445\u043d\u0435\u0439), \u043f\u0443\u0441\u0442\u044c \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0431\u0443\u0434\u043d\u0435\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\nlist_rating = co.Counter(cuisine_list).most_common()\n# \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 = \u043b\u0438\u0441\u0442 \u0432 \u043b\u0438\u0441\u0442\u0435\nres = [list(ele) for ele in list_rating]","73d276f4":"# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0443\u0445\u043d\u0438, \u043f\u0435\u0440\u0432\u044b\u0435 10\nlist_rating_dum = co.Counter(cuisine_list).most_common(10)","25ef326f":"# \u043f\u0435\u0440\u0435\u0432\u0435\u043b\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 = \u043b\u0438\u0441\u0442 \u0432 \u043b\u0438\u0441\u0442\u0435\nres_dum = [list(ele) for ele in list_rating_dum]","575341e7":"# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a cuisine_rating_dum \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\ndef cuisine_rating_dum(rating):\n    num = ''\n    list_x = rating.replace(\"'\", '')\n    list_x = list_x.split(',')\n    for yy in list_x:\n        yy = yy.strip()\n        result = [element for element in res_dum if element[0] == yy]\n        if result == []:\n            num = 'other'\n        else:\n            num = result[0][0]\n            break\n    return num\n\n\ndf['cuisine_rating_dum'] = df.apply(\n    lambda x: cuisine_rating_dum(x['cuisine_style']), axis=1)","ee2442c9":"# \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 dum \u0438\u0437 cuisine_rating_dum\ndum = pd.get_dummies(df.cuisine_rating_dum)\n# \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438 \u043a \u0434\u0430\u043d\u043d\u044b\u043c\ndf = pd.concat([df, dum], axis=1)","3f70b932":"def cuisine_rating(rating):\n    num = 0\n    list_x = rating.replace(\"'\", '')\n    list_x = list_x.split(',')\n    for yy in list_x:\n        yy=yy.strip()\n        result = [element for element in res if element[0] == yy]\n        num+=result[0][1]\n    return num\n\ndf['cuisine_rating']=df.apply(\n    lambda x: cuisine_rating(x['cuisine_style']), axis=1)","7023bca4":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a price_range_num\ndef price_range_num(price_range):\n    if price_range == '$':\n        return 1\n    elif price_range == '$$ - $$$':\n        return 2\n    elif price_range == '$$$$':\n        return 3\n    \ndf['price_range_num'] = df['price_range'].apply(price_range_num)","a9bea508":"# \u0441\u043e\u0437\u0434\u0430\u043b\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndum = pd.get_dummies(df.price_range)\n# \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438 \u043a \u0434\u0430\u043d\u043d\u044b\u043c\ndf = pd.concat([df, dum], axis=1)","dffdc680":"df['n_reviews'].value_counts().hist(bins=100)","e9a26662":"#\u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b\nsns.boxplot(df['n_reviews'])","e990f36e":"IQR = df.n_reviews.quantile(0.75) - df.n_reviews.quantile(0.25)\nperc25 = df.n_reviews.quantile(0.25)\nperc75 = df.n_reviews.quantile(0.75)\nprint(\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 absences: [{f}, {l}].\".format(\n    f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))","97e44cfa":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a n_reviews_bool\ndf['n_reviews_bool'] = df.n_reviews.between(\n    perc25 - 1.5*IQR, perc75 + 1.5*IQR)","3625b28a":"# \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a n_reviews_new\nxmean = df['n_reviews'].mean()\ndf['n_reviews_new'] = df.apply(\n    lambda x: x.n_reviews if x.n_reviews_bool == True else xmean, axis=1)","f2c15e11":"# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a n_reviews_bool \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439\ndef n_reviews_bool(booll):\n    if booll == True:\n        return 1.0\n    else:\n        return 2.0\n\ndf['n_reviews_bool'] = df['n_reviews_bool'].apply(n_reviews_bool)","3c8bcf7a":"df.describe()","9ee2e948":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\ndf = df.drop(['City', 'cuisine_rating_dum', 'cuisine_style', 'price_range',\n              'Reviews', 'Reviews1', 'Reviews2', 'Reviews3', 'URL_TA', 'ID_TA'], axis=1)","0786bc0f":"#\u0443\u0431\u0435\u0440\u0443 Ranking, Reviews6, other\ndf = df.drop(['Ranking','other','Reviews6'], axis=1)","fbd4300c":"df['Rating'].value_counts(ascending=True).plot(kind='bar')","9077c0b4":"df.info()","fcfd8a2e":"df.drop(['sample'], axis=1).corr()","0ace46a9":"df = df.drop(['Restaurant_id'], axis=1)","437604be":"# \u0418\u0437 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043f\u0438\u044e \u0438 \u043d\u0430 \u043d\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c\ndf_preproc = df.copy()\ndf_preproc.sample(5)","8977d68a":"df_preproc.info()","47603a56":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","46112cdf":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","9320016d":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","cf5095a8":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","6f059abc":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","941e1ccc":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","50cea8bf":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","12e29014":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","ca39624f":"test_data.sample(10)","d03e4f46":"test_data = test_data.drop(['Rating'], axis=1)","91550f5b":"predict_submission = model.predict(test_data)","7662f25e":"predict_submission","8ba6882b":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","1001506c":"# DATA","4dcacf58":"**\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c dummy \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'cuisine_rating_dum' \u043a\u0443\u0445\u043d\u044f, \u0432\u0445\u043e\u0434\u044f\u0449\u0430\u044f \u0432 10 \u0441\u0430\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u043a\u0443\u0445\u043e\u043d\u044c**","8874c587":"**City**","607b0141":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","c15a2033":"***\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Reviews***","307bdcea":"# Data Preprocessing","731a1162":"**\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f**","b52d9907":"# Submission","4a6ae552":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","a05447c8":"**price_range**","78d5e7b3":"# Cleaning and Prepping Data","455f33a2":"**n_reviews**","05b8f3cf":"**\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'cuisine_rating' \u0438\u0437 \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0443\u0445\u043d\u0438 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435**","101204b5":"# Model \n\u0421\u0430\u043c ML","329b3200":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","b927b401":"# import","fac4d3a1":"**cuisine_style**"}}