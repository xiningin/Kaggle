{"cell_type":{"2bb59e3d":"code","092720a0":"code","8be09df4":"code","71973097":"code","8708042c":"code","b5fcfac2":"code","e5821979":"code","faef9620":"code","e7227aa4":"code","53d756d8":"code","a1914af1":"code","c5e4b645":"code","00297786":"code","71403de1":"code","e4a2587d":"code","77a4cef7":"code","ea324126":"code","7dea9532":"code","6ed8c3f3":"code","4842dd23":"code","0a54544b":"code","f39bcbfe":"code","1c2968df":"code","755fa67e":"code","3224e483":"code","cf9f48b1":"code","3135a1ab":"code","a826ed9d":"code","85995992":"code","bb6a669b":"code","eec79d71":"code","bdfd3c2d":"code","a668d264":"code","a301211f":"code","15486f3a":"code","9fc42903":"code","9c411cad":"code","63d9d5e3":"code","81d0c40f":"code","9d09ff82":"code","e39558d0":"code","33cc6dea":"code","17c2abfd":"code","ed05441c":"code","08caa03b":"code","cb61a801":"code","d4026be2":"code","028f04f7":"code","a56f2e58":"code","ea0567e7":"code","3a92860b":"code","9566c714":"code","407b95c1":"code","3f37fd24":"code","769d5b7f":"code","3a391050":"code","ed93e942":"code","c841a81a":"code","b1717fad":"code","6ac00960":"code","d791bcef":"markdown","73b1ed08":"markdown"},"source":{"2bb59e3d":"!pip install sweetviz","092720a0":"import numpy as np\nimport pandas as pd\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8be09df4":"df_train = pd.read_csv(\"..\/input\/flavours-of-physics-kernels-only\/training.csv.zip\")\ndf_test = pd.read_csv(\"..\/input\/flavours-of-physics-kernels-only\/test.csv.zip\")","71973097":"df_train","8708042c":"df_test","b5fcfac2":"df_train= df_train[['IP', 'IPSig', 'isolatione', 'iso', 'ISO_SumBDT', 'p0_IsoBDT','p1_IsoBDT', 'SPDhits', 'signal']]","e5821979":"df2= df_test[['IP', 'IPSig', 'isolatione', 'iso', 'ISO_SumBDT', 'p0_IsoBDT','p1_IsoBDT', 'SPDhits', ]]","faef9620":"df_train","e7227aa4":"df2","53d756d8":"df_train.info()","a1914af1":"df_test.info()","c5e4b645":"df_train[\"signal\"].value_counts()","00297786":"import sweetviz as sv\nTr_report1 = sv.analyze(df_train)\nTr_report1.show_notebook(w=\"90%\", h=\"full\")\nTr_report1.show_html('Tr_report1.html')","71403de1":"Tr_report1 = sv.analyze(df2)\nTr_report1.show_notebook(w=\"90%\", h=\"full\")\nTr_report1.show_html('Tr_report1.html')","e4a2587d":"df2","77a4cef7":"sns.distplot(df_train['IP'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","ea324126":"sns.distplot(df_train['IPSig'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","7dea9532":"sns.distplot(df_train['isolatione'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","6ed8c3f3":"sns.distplot(df_train['iso'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","4842dd23":"sns.distplot(df_train['ISO_SumBDT'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","0a54544b":"sns.distplot(df_train['p0_IsoBDT'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","f39bcbfe":"sns.distplot(df_train['p0_IsoBDT'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","1c2968df":"sns.distplot(df_train['p1_IsoBDT'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","755fa67e":"sns.distplot(df_train['SPDhits'],hist_kws={ \"linewidth\": 3,\"alpha\": 1, \"color\": \"r\"});","3224e483":"df_train.plot(figsize = (11, 25), subplots = True, linewidth = 0.8, color = \"r\")\nplt.xlabel('')\nplt.show()","cf9f48b1":"df_train['signal'].value_counts()\n\ndf_train['signal'].value_counts() * 100 \/ len(df_train)\n\n\nsns.countplot(x='signal', data=df_train, palette='viridis')","3135a1ab":"from sklearn.utils import resample\n\nnot_fraud = df_train[df_train['signal']== 0]\nfraud = df_train[df_train['signal'] == 1]\n\n#upsample minority\nfraud_upsampled = resample(fraud,\n                          replace=True, # sample with replacement\n                          n_samples=len(not_fraud), # match number in majority class\n                          random_state=27) # reproducible results\n\n#combine majority and upsampled minority\ndf_train = pd.concat([not_fraud, fraud_upsampled])\n\n# check new class counts\ndf_train['signal'].value_counts()","a826ed9d":"sns.countplot(x='signal', data=df_train, palette='viridis')","85995992":"df_train.isnull().sum()","bb6a669b":"df_train.describe()","eec79d71":"df_train.corr()['signal'].sort_values(ascending=False)","bdfd3c2d":"z = df_train.drop('signal', axis=1)\nz.corrwith(df_train['signal']).plot(kind='bar', figsize=(15,10), color=['g'])\nplt.title(\"Correlation Matrix\")\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.show()","a668d264":"plt.figure(figsize=(15,10))\nsns.heatmap(df_train.corr(), annot=True, cbar=False, fmt='.1f', cmap='summer')\nplt.show()","a301211f":"plt.figure(figsize=(15,10))\nsns.boxplot(data=df_train)\nplt.xticks(rotation=90)\nplt.show()","15486f3a":"df_train","9fc42903":"plt.tight_layout()\nsns.boxplot(x=df_train[\"ISO_SumBDT\"], data=df_train)\nplt.show()","9c411cad":"plt.tight_layout()\nsns.boxplot(x=df_train[\"p0_IsoBDT\"], data=df_train)\nplt.show()","63d9d5e3":"plt.tight_layout()\nsns.boxplot(x=df_train[\"SPDhits\"], data=df_train)\nplt.show()","81d0c40f":"plt.tight_layout()\nsns.boxplot(x=df_train[\"IPSig\"], data=df_train)\nplt.show()","9d09ff82":"display(df_train.skew())","e39558d0":"from sklearn.model_selection import train_test_split\nx1 = df_train.drop('signal', axis=1)\ny = df_train['signal']","33cc6dea":"x1","17c2abfd":"y","ed05441c":"from imblearn.over_sampling import SMOTE\n\nx1 = df_train.drop('signal', axis=1)\ny = df_train['signal']\n\n# setting up testing and training sets\nx_train, x_test, y_train, y_test = train_test_split(x1, y, test_size=0.25, random_state=27)\n\nsm = SMOTE(random_state=27)\n\nx1, y = sm.fit_resample(x1, y)","08caa03b":"from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, classification_report, roc_curve, roc_auc_score, auc, precision_recall_curve, precision_score, recall_score\n","cb61a801":"from sklearn.svm import SVC\nsvm= SVC(random_state=2)\nsvm.fit(x_train, y_train)\ny_pred_svm = svm.predict(x_test)","d4026be2":"y_pred_svm = svm.predict(x_test)","028f04f7":"print(\"Accuracy SVC:\", accuracy_score(y_test, y_pred_svm))\nprint(\"Precision SVC:\", precision_score(y_test, y_pred_svm))\nprint(\"Recall SVC:\", recall_score(y_test, y_pred_svm))\nprint(\"F1 Score SVC:\", f1_score(y_test, y_pred_svm))","a56f2e58":"from sklearn.neighbors import KNeighborsClassifier\nKNN = KNeighborsClassifier(algorithm='auto', leaf_size=300, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=100, p=2,\n                     weights='uniform')\nKNN.fit(x1, y)","ea0567e7":"y_pred_KNN = KNN.predict(x_test)","3a92860b":"print(\"Accuracy KNeighborsClassifier:\", accuracy_score(y_test, y_pred_KNN))\nprint(\"Precision KNeighborsClassifier:\", precision_score(y_test, y_pred_KNN))\nprint(\"Recall KNeighborsClassifier:\", recall_score(y_test, y_pred_KNN))\nprint(\"F1 Score KNeighborsClassifier:\", f1_score(y_test, y_pred_KNN))","9566c714":"from sklearn.naive_bayes import GaussianNB\nGNB = GaussianNB(priors=None, var_smoothing=1e-08)\nGNB.fit(x_train, y_train)","407b95c1":"y_pred_GNB = GNB.predict(x_test)","3f37fd24":"print(\"Accuracy GaussianNB:\", accuracy_score(y_test, y_pred_GNB))\nprint(\"Precision GaussianNB:\", precision_score(y_test, y_pred_GNB))\nprint(\"Recall GaussianNB:\", recall_score(y_test, y_pred_GNB))\nprint(\"F1 Score GaussianNB:\", f1_score(y_test, y_pred_GNB))","769d5b7f":"from xgboost import XGBClassifier\nxgb = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.300000012, max_delta_step=0, max_depth=40,\n              min_child_weight=1, monotone_constraints='()',\n              n_estimators=1000, n_jobs=100, num_parallel_tree=1, random_state=0,\n              reg_alpha=2, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)\nxgb.fit(x1, y)","3a391050":"y_pred_xgb = xgb.predict(x_test)\n","ed93e942":"print(\"Accuracy XGBClassifier:\", accuracy_score(y_test, y_pred_xgb))\nprint(\"Precision XGBClassifier:\", precision_score(y_test, y_pred_xgb))\nprint(\"Recall XGBClassifier:\", recall_score(y_test, y_pred_xgb))\nprint(\"F1 Score XGBClassifier:\", f1_score(y_test, y_pred_xgb))","c841a81a":"y_pred_df_tset = xgb.predict(x1)\ny_pred_df_tset","b1717fad":"sub = pd.read_csv('..\/input\/flavours-of-physics-kernels-only\/sample_submission.csv.zip')\nsub[:51758]","6ac00960":"sub[:51758]['prediction'] = y_pred_df_tset\nsub[:51758].to_csv('submission.csv', index=False)","d791bcef":"\n### Data Description\nIn this competition, you are given a list of collision events and their properties. You will then predict whether a \u03c4 \u2192 3\u03bc decay happened in this collision. This \u03c4 \u2192 3\u03bc is currently assumed by scientists not to happen, and the goal of this competition is to discover \u03c4 \u2192 3\u03bc happening more frequently than scientists currently can understand.\n\n\nIt is challenging to design a machine learning problem for something you have never observed before. Scientists at CERN developed the following designs to achieve the goal.\n\n\n* training.csv\nThis is a labelled dataset (the label \u2018signal\u2019 being \u20181\u2019 for signal events, \u20180\u2019 for background events) to train the classifier. Signal events have been simulated, while background events are real data.\n\nThis real data is collected by the LHCb detectors observing collisions of accelerated particles with a specific mass range in which \u03c4 \u2192 3\u03bc can\u2019t happen. We call these events \u201cbackground\u201d and label them 0.\n\n* test.csv\nThe test dataset has all the columns that training.csv has, except mass, production, min_ANNmuon, and signal. \n\nLink dataset\n\n[Here](https:\/\/www.kaggle.com\/c\/flavours-of-physics-kernels-only\/data)\n","73b1ed08":"# Flavours of Physics: Finding \u03c4 \u2192 \u03bc\u03bc\u03bc (Kernels Only)  with EDA & ML (SVM+KNN+GNB+XGB)\n\n<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/10014\/logos\/header.png?t=2018-06-20-19-58-34\" width=\"1000px\">\n\n\n### We got the better score\n* Accuracy XGBClassifier: 0.9999227202472952\n* Precision XGBClassifier: 0.9998466492869191\n* Recall XGBClassifier: 1.0\n* F1 Score XGBClassifier: 0.9999233187638984\n\n\n"}}