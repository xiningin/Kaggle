{"cell_type":{"160ebf03":"code","8d30ba22":"code","7f548251":"code","4b61bfe0":"code","2a295abb":"code","de964019":"code","75ead3db":"code","c6a1e7d2":"code","a1dcd059":"code","db583a4a":"code","08ee322e":"code","6a5afccc":"code","df4a01bb":"code","9e2f0385":"code","4ea34630":"code","a5cb6cb3":"code","d561c49c":"code","a395c6bd":"code","1a04c413":"code","4e490847":"code","45a8f75d":"code","d4abd2d8":"code","16cdc13e":"markdown","9279be4b":"markdown","2e140ddd":"markdown","85d9da02":"markdown","ab186ec0":"markdown"},"source":{"160ebf03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d30ba22":"from sklearn import metrics\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","7f548251":"# Importing House prices  dataset\ntrain_data = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain_data = pd.get_dummies(train_data)\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n#print(train_data)","4b61bfe0":"numbers = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ntrain = train_data.select_dtypes(include=numbers)\ntest = test.select_dtypes(include=numbers)","2a295abb":"d_train = train.fillna((np.mean(train)))","de964019":"target=d_train['SalePrice']","75ead3db":"mean = d_train.mean(axis=0)\nd_train-= mean\nstd = d_train.std(axis=0)\nd_train \/= std\ntest -= mean\ntest \/= std","c6a1e7d2":"from sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(d_train, target, test_size = 0.3, random_state = 0)","a1dcd059":"from keras import models\nfrom keras import layers\n\ndef build_model():\n    # Because we will need to instantiate\n    # the same model multiple times,\n    # we use a function to construct it.\n    model=models.Sequential()\n    model.add(layers.Flatten())\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(128, activation='relu'))# Add the proper output and activation\n    model.add(layers.Dense(1, activation='relu'))# Add the proper output and activation\n    #model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n    return model","db583a4a":"from sklearn.linear_model import LinearRegression\nAH = LinearRegression() \nAH.fit(d_train, target)","08ee322e":"y_predict = AH.predict(d_train)","6a5afccc":"plt.scatter(target, y_predict)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"SalePrices vs Predicted prices\")\nplt.show()","df4a01bb":"from sklearn.linear_model import SGDRegressor\nAH = SGDRegressor() \nAH.fit(d_train, target)","9e2f0385":"y_predict = AH.predict(d_train)","4ea34630":"plt.scatter(target, y_predict)\nplt.xlabel(\"Prices\")\nplt.ylabel(\"Predicted prices\")\nplt.title(\"SalePrices vs Predicted prices\")\nplt.show()","a5cb6cb3":"train.shape","d561c49c":"test.shape","a395c6bd":"# Build the Keras model (already compiled)\nmodel = build_model()\n# Train the model (in silent mode, verbose=0)\nmodel.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])# Add the proper loss\n\nhistory = model.fit(d_train,target,\n                    epochs=20, batch_size=4, verbose=0)","1a04c413":"from sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, \\\nRidgeCV, Lasso, LassoCV, \\\nElasticNet, ElasticNetCV\nrr = Ridge(alpha=0.01)\nrr.fit(d_train, target)\npred_train_rr= rr.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_rr)))\nprint(r2_score(target, pred_train_rr))\npred_test_rr= rr.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_rr)))\nprint(r2_score(target, pred_test_rr))","4e490847":"from sklearn.linear_model import Lasso\nmodel_lasso = Lasso(alpha=0.01)\nmodel_lasso.fit(d_train, target)\npred_train_lasso= model_lasso.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_lasso)))\nprint(r2_score(target, pred_train_lasso))\n\n\n\npred_test_lasso= model_lasso.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_lasso)))\nprint(r2_score(target, pred_test_lasso))","45a8f75d":"from sklearn.linear_model import ElasticNet\nmodelE = ElasticNet(alpha = 0.01)\nmodelE.fit(d_train, target)\npred_train_enet= modelE.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_train_enet)))\nprint(r2_score(target, pred_train_enet))\n\n\n\npred_test_enet= modelE.predict(d_train)\nprint(np.sqrt(mean_squared_error(target,pred_test_enet)))\nprint(r2_score(target, pred_test_enet))","d4abd2d8":"# Import SVM Regressor\nfrom sklearn import svm\nreg = svm.SVR()","16cdc13e":"# D-Ridge, Lasso, Elastic - Add proper regularization\n","9279be4b":"# B- SGDRegressor\n","2e140ddd":"# E- SVM","85d9da02":"# C- Try different batch sizes, lr, ....\n","ab186ec0":"# A- LinearRegression\n"}}