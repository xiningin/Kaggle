{"cell_type":{"e49e9333":"code","22c83917":"code","3ddd5866":"code","6ec19e1c":"code","1b047653":"code","eacd88e6":"code","7d34b3ad":"code","3a843374":"code","1424600e":"code","7d2da0cf":"code","676f395c":"code","9b6f2a92":"code","5736ea58":"code","ff46a257":"code","78a0bdbe":"code","cce6bcae":"code","2b93effd":"code","13317a8a":"code","ecf8fd0d":"code","88de1158":"code","362a4def":"code","a45df397":"code","a963b8c8":"code","d7de31bc":"code","92583d16":"markdown","de9fa8f1":"markdown","a76b6b24":"markdown","3bbe814d":"markdown","484d7517":"markdown","eacb822a":"markdown","92e27f0e":"markdown","1081d0f0":"markdown","ebe4546b":"markdown","ebb307a5":"markdown","ee2b4f4d":"markdown"},"source":{"e49e9333":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","22c83917":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV , GridSearchCV","3ddd5866":"df = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')\ndf.head()","6ec19e1c":"df['species'].value_counts()","1b047653":"# Checking attributes of data and it's dtype\ndf.info()","eacd88e6":"# Checking if there is any null value\ndf.isna().sum()","7d34b3ad":"## now for converting all string values into categorial values\n# turn categorial variables into numbers\nfor label, content in df.items():\n    if not pd.api.types.is_numeric_dtype(content):\n         df[label] = pd.Categorical(content).codes +1","3a843374":"df.head()","1424600e":"df.info()","7d2da0cf":"df['species'].value_counts()","676f395c":"df.head()","9b6f2a92":"# split data into x and y\nx = df.drop('species', axis =1)\ny = df.species\n\nx.head()","5736ea58":"y.head()","ff46a257":"# Split data into train and test\nnp.random.seed(42)\n\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size = 0.2)","78a0bdbe":"# put models in a dictionary\nclf = { 'logistic regressor' : LogisticRegression(),\n         'random forest' : RandomForestClassifier()}\n\n# create a function to fit and score models\ndef fit_and_score(clf, xtrain, xtest, ytrain, ytest):\n    \"\"\"\n    fits and evaluates machine learning models\n    \"\"\"\n    # set random seed\n    \n    np.random.seed(42)\n    # make dictionary to store model scores\n    model_scores = {}\n    # loop through models\n    for name, model in clf.items():\n        # fit the model to the data\n        model.fit(xtrain, ytrain)\n        #evaluate the model and append it's score into model_scores\n        model_scores[name] = model.score(xtest, ytest)\n    return model_scores","cce6bcae":"model_scores = fit_and_score(clf = clf,\n                             xtrain = xtrain,\n                             xtest = xtest, \n                             ytrain = ytrain, ytest=ytest)\nmodel_scores","2b93effd":"# Logistic regression model\nm1 = LogisticRegression()\nm1.fit(xtrain, ytrain)","13317a8a":"# Random forest model\nm2 = RandomForestClassifier()\nm2.fit(xtrain, ytrain)","ecf8fd0d":"# Use the fitted model to make predictions on the test data and\n# save the predictions to a variable called y_preds\ny_preds = m1.predict(xtest) # For logistic regression model","88de1158":"# Use the fitted model to make predictions on the test data and\n# save the predictions to a variable called y_preds\ny_preds = m2.predict(xtest) # For random forest  model","362a4def":"# Logistic Regression\n# Evaluate the fitted model on the training set using the score() function\nm1.score(xtrain, ytrain)","a45df397":"# logistic regression score on test data\nm1.score(xtest, ytest)","a963b8c8":"# Random forest\n# Evaluate the fitted model on the training set using the score() function\nm2.score(xtrain, ytrain)","d7de31bc":"# Random forest score on test data\nm1.score(xtest, ytest)","92583d16":"## Modeling","de9fa8f1":"## Let's first visualise the data","a76b6b24":"We are going to take following aproch to work on this dataset\n1. Problem defination\n2. Data\n3. Evaluation\n\n### 1. Problem Defination\nHave to predict the specie of flower from three species of Iris that is Iris Setosa, Iris virginica, and Iris versicolor\n\n### 2. Data \nThe dataset contains a set of 150 records under 5 attributes - Petal Length, Petal Width, Sepal Length, Sepal width and Class(Species).\n\n###  Evaluation\nIs not difined. But still we can do evaluation\n\n## Preparing Tools","3bbe814d":"# \ud83c\udf39Iris Flower Project\n\nThis project works on Dataset from Kaggle to predict the specie of a flower","484d7517":"## Load data","eacb822a":"## Evaluating our model","92e27f0e":"**hence both logistic regression as well as random forest classifier shows accuracy of 1.0**","1081d0f0":"so we have 3 categories and have 50 rows each","ebe4546b":"### Evaluating a model's predictions\n\nEvaluating predictions is as important making them. Let's check how our model didm by comparing the predictions it made on the test data (`y_preds`) to the ground truth labels (`ytest`).","ebb307a5":"now we have got our data split ito train and test data, now it's time to build a machine learning model\n\nwe'll train it (find patterns) on train set\n\nwe'll test it (using patterns) on test set\n\nWe are going to try 3 different machine learning models:\n1. logistic regression\n2. random forest classifier","ee2b4f4d":"so there's no null value and have only one attribute as object type. \n### so let's convert it into integer"}}