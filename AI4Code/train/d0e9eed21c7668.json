{"cell_type":{"f8f90dde":"code","710f3bc5":"code","4cb3548e":"code","1307dfdb":"code","7beb2cdf":"code","51b27a39":"code","18cc79ab":"code","6e41999f":"code","f4a16a76":"code","d1802a9b":"code","22408f87":"code","9b9793dd":"code","0d351354":"code","f04257ae":"code","ff943e24":"code","323f479d":"code","93b18de3":"code","3b5d88b8":"code","c88181a3":"code","7896889e":"code","dbdc728d":"code","e830f58f":"code","243ce003":"code","48a50acb":"code","76dc4620":"code","a97cd314":"code","4f6020f2":"code","19cf373e":"code","8974b3fd":"code","46498600":"code","79ba00f4":"code","8a66273e":"code","62995ee5":"code","bc25211b":"code","543624e0":"code","f227590a":"code","4b31aeca":"code","46e48485":"code","ffec3c1b":"code","2157ea6d":"code","15eaed05":"code","1bff76e0":"code","77aaa5ee":"code","0da2a7f8":"code","77917807":"code","7046ce40":"code","d0f3d366":"code","46e25d63":"code","6cb6b0f0":"code","320450dc":"code","67943861":"code","a6c048bf":"code","f4ccd3c8":"code","2da0de0c":"code","4ce68519":"code","ace0f9ab":"code","73bf495b":"code","feb1a8f8":"code","69969d9c":"code","057ba2d5":"code","845d2119":"code","01edeeb4":"code","4db4498a":"code","a2abb76c":"code","d579656d":"code","e77374bd":"code","dcd13e0b":"code","5ade1ce4":"code","4c7fce69":"code","5fe86922":"code","19ed4e0c":"code","60345fd8":"code","7f94f170":"code","03bb6526":"code","f3eb7611":"code","5bc549e6":"code","bf37d1a6":"code","e122951a":"code","9cac831c":"markdown","56820624":"markdown","59de8cf1":"markdown","859c81bc":"markdown","bfe08d33":"markdown","e9423ea3":"markdown","5581e959":"markdown","71ed56c5":"markdown","1535aca5":"markdown","fc239f0f":"markdown","fb36ee94":"markdown","36037a29":"markdown","d3db9dbd":"markdown","b844f35f":"markdown","e5cca886":"markdown","43e88d1e":"markdown","6db31acc":"markdown","2c2fee5a":"markdown","0c90a11a":"markdown","becff842":"markdown","0351b7be":"markdown","f60030e7":"markdown","954d41c5":"markdown","7b25e8c0":"markdown","a0897f46":"markdown","6a99667a":"markdown","b169c664":"markdown","d29713d7":"markdown","2ca1aa88":"markdown","0d49d47f":"markdown","19705b1f":"markdown","2445d5b1":"markdown","0997ed14":"markdown","e5bfc36c":"markdown","90d3c8eb":"markdown","fe4b9cd0":"markdown","c40f75cb":"markdown","42d60b3e":"markdown","5b5afd43":"markdown","4b905b90":"markdown","1324c4e5":"markdown","5ac14c66":"markdown","ee4dad3a":"markdown","13051504":"markdown","88a50f7e":"markdown","0f670ffd":"markdown","68ed75ae":"markdown","6a30f1fe":"markdown","ae9744b1":"markdown","1d365c9d":"markdown","2ae3fab6":"markdown","cbf5a4b0":"markdown","ed27e213":"markdown","312b38a7":"markdown","16fa2c78":"markdown","14021d34":"markdown","04ed6675":"markdown","b23f1da5":"markdown","c90f35d0":"markdown","7e6a59ec":"markdown","5b68c88e":"markdown","b0697e66":"markdown","23f70dd5":"markdown","2a7cc01c":"markdown","1525ff38":"markdown","a8c902d8":"markdown","abee23e5":"markdown","c09fa1b0":"markdown","f7fbb62b":"markdown","d1e9ae3d":"markdown","66369e2b":"markdown","554e0bf7":"markdown","78b20b7a":"markdown","5bef39d8":"markdown","eae62440":"markdown","80b8c713":"markdown","30664f0c":"markdown","b9e975a3":"markdown","dcf95148":"markdown","712b42d7":"markdown","5dbc6954":"markdown","c5f877ba":"markdown","621b0938":"markdown","965920de":"markdown","1b853b65":"markdown","863b0839":"markdown","1d6dfff8":"markdown","96ef5f74":"markdown","3b145a15":"markdown","599b4dc3":"markdown","22ce4b05":"markdown","96ec0bff":"markdown"},"source":{"f8f90dde":"import numpy as np\nimport pandas as pd","710f3bc5":"train = pd.read_csv(\"..\/input\/bms-molecular-translation\/train_labels.csv\")\nprint(train.shape)\ntrain.head()","4cb3548e":"print(\"..\/input\/bms-molecular-translation\/train\/0\/0\/0\/000011a64c74.png\")","1307dfdb":"import cv2","7beb2cdf":"train[\"file_path\"] = train[\"image_id\"].apply(lambda x: f\"..\/input\/bms-molecular-translation\/train\/{x[0]}\/{x[1]}\/{x[2]}\/{x}.png\")\nprint(train[\"file_path\"].values[0])","51b27a39":"path = train[\"file_path\"].values[0]\nimage = cv2.imread(path)\nprint(image.shape)","18cc79ab":"import matplotlib.pyplot as plt\nplt.style.use(\"seaborn-white\")\nplt.imshow(image)\nplt.show()","6e41999f":"print(train[\"InChI\"].values[0])","f4a16a76":"words = set()\nfor s in train[\"InChI\"]:\n    words.update(set(s))\nprint(words)","d1802a9b":"vocab = list(words)\nprint(vocab)","22408f87":"vocab.append(\"<sos>\")\nvocab.append(\"<eos>\")\nvocab.append(\"<pad>\")\nprint(vocab)","9b9793dd":"VOCAB_SIZE = len(vocab)\nprint(VOCAB_SIZE)","0d351354":"stoi = {\n    'C': 0,')': 1,'P': 2,'l': 3,'=': 4,'3': 5,\n    'N': 6,'I': 7,'2': 8,'6': 9,'H': 10,\n    '4': 11,'F': 12,'0': 13,'1': 14,'-': 15,\n    'O': 16,'8': 17,',': 18,'B': 19,'(': 20,\n    '7': 21,'r': 22,'\/': 23,'m': 24,'c': 25,\n    's': 26,'h': 27,'i': 28,'t': 29,'T': 30,\n    'n': 31,'5': 32,'+': 33,'b': 34,'9': 35,\n    'D': 36,'S': 37,'<sos>': 38,'<eos>': 39,'<pad>': 40\n}\n\nitos = {item[1]:item[0] for item in stoi.items()}","f04257ae":"inchi = train[\"InChI\"].values[0]\nprint(inchi)\ninchi = [stoi[s] for s in inchi]\nprint(inchi)","ff943e24":"train[\"length\"] = train[\"InChI\"].apply(lambda x: len(x))\nMAX_LEN = train[\"length\"].max()\nprint(MAX_LEN)\ntrain.head()","323f479d":"path = train.loc[train[\"length\"] == MAX_LEN][\"file_path\"].values[0]\nplt.imshow(cv2.imread(path))\nplt.show()\nprint(train.loc[train[\"length\"] == MAX_LEN][\"InChI\"].values[0])","93b18de3":"path = train[\"file_path\"].values[0]\nimage = cv2.imread(path)\nprint(image.shape)","3b5d88b8":"image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nplt.imshow(image)\nplt.show()","c88181a3":"path = train[\"file_path\"].values[1]\nimage = cv2.imread(path)\nprint(image.shape)","7896889e":"import albumentations as A","dbdc728d":"path = train[\"file_path\"].values[0]\nimage = cv2.imread(path)\nimage = A.Resize(256, 256)(image = image)\nprint(image)","e830f58f":"image = image[\"image\"]\nprint(image.shape)","243ce003":"image = A.Normalize()(image = image)[\"image\"]\nprint(image)","48a50acb":"from albumentations.pytorch import ToTensorV2\nimage = ToTensorV2()(image = image)[\"image\"]\nprint(image.shape)","76dc4620":"inchi = train[\"InChI\"].values[0]\nprint(inchi)\ninchi = [stoi[s] for s in inchi]\nprint(inchi)","a97cd314":"inchi.insert(0, stoi[\"<sos>\"])\ninchi.append(stoi[\"<eos>\"])\nprint(inchi)","4f6020f2":"import torch\ninchi = torch.LongTensor(inchi)\nprint(inchi)","19cf373e":"from torch.utils.data import Dataset, DataLoader","8974b3fd":"class TrainDataset(Dataset):\n    def __init__(self, df):\n        self.df = df\n        self.paths = self.df[\"file_path\"].values\n        self.inchi = self.df[\"InChI\"].values\n        \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, idx):\n        path = self.paths[idx]\n        image = cv2.imread(path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image = A.Compose([\n            A.Resize(256, 256),\n            A.Normalize(),\n            ToTensorV2()\n        ])(image = image)[\"image\"]\n        inchi = self.inchi[idx]\n        inchi = [stoi[s] for s in inchi]\n        inchi.insert(0, stoi[\"<sos>\"])\n        inchi.append(stoi[\"<eos>\"])\n        inchi = torch.LongTensor(inchi)\n        return image, inchi","46498600":"ds = TrainDataset(train)","79ba00f4":"print(ds[0])","8a66273e":"print(len(ds[0]))\nprint(ds[0][0].shape, ds[0][1].shape)","62995ee5":"for i in range(5):\n    print(ds[i][0].shape, ds[i][1].shape)","bc25211b":"from torch.nn.utils.rnn import pad_sequence\n\ndef bms_collate(batch):\n    images, labels = [], []\n    for data in batch:\n        images.append(data[0])\n        labels.append(data[1])\n    labels = pad_sequence(labels, batch_first = True, padding_value = stoi[\"<pad>\"])\n    return torch.stack(images), labels","543624e0":"loader = DataLoader(ds, batch_size = 8, collate_fn = bms_collate)","f227590a":"batch = next(iter(loader))\nprint(batch[0].shape, batch[1].shape)","4b31aeca":"for i in range(8):\n    print(batch[1][i])\n    print(\"=\" * 100)","46e48485":"DEBUG = True\nif DEBUG:\n    df = train.sort_values(by = \"length\").reset_index(drop = True).copy()\n    df = df.iloc[:1000, :]\nelse:\n    df = train.copy()\nprint(df.shape)","ffec3c1b":"from sklearn.model_selection import train_test_split\ndf_train, df_valid = train_test_split(df, test_size = 0.1, shuffle = True)\nprint(df_train.shape, df_valid.shape)","2157ea6d":"from tqdm.notebook import tqdm\n\ntrain_data = TrainDataset(df_train)\nvalid_data = TrainDataset(df_valid)\ntrain_loader = DataLoader(train_data, batch_size = 64, shuffle = True, drop_last = True, collate_fn = bms_collate, num_workers = 4)\nvalid_loader = DataLoader(valid_data, batch_size = 64 * 2, shuffle = False, drop_last = False, collate_fn = bms_collate, num_workers = 4)\n\nfor batch in tqdm(train_loader):\n    pass\nfor batch in tqdm(valid_loader):\n    pass","15eaed05":"import torch.nn as nn\nimport torchvision\n\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(DEVICE)","1bff76e0":"resnet = torchvision.models.resnet18()\nfor params in resnet.state_dict():\n    print(params)","77aaa5ee":"modules = list(resnet.children())[:-2]\nresnet = nn.Sequential(*modules)\nfor params in resnet.state_dict():\n    print(params)","0da2a7f8":"batch = next(iter(train_loader))\nimage = batch[0][0]\nprint(image.shape)","77917807":"encoded = resnet(image.unsqueeze(0))\nprint(encoded.shape)","7046ce40":"class Encoder(nn.Module):\n    def __init__(self):\n        super().__init__()\n        resnet = torchvision.models.resnet18()\n        modules = list(resnet.children())[:-2]\n        self.resnet = nn.Sequential(*modules)\n        \n    def forward(self, images):\n        batch_size = images.size(0)\n        features = self.resnet(images)\n        features = features.permute(0, 2, 3, 1)\n        features = features.view(features.size(0), -1, features.size(-1))\n        return features\n    \nencoder = Encoder()\nencoded = encoder(batch[0])\nprint(encoded.shape)","d0f3d366":"inchi = batch[1]\nprint(inchi.shape)\nprint(inchi)","46e25d63":"embedding = nn.Embedding(num_embeddings = VOCAB_SIZE, embedding_dim = 256)\nembeds = embedding(inchi)\nprint(embeds.shape)\nprint(embeds)","6cb6b0f0":"print(encoded.shape)\nencoded = encoded.mean(dim = 1)\nprint(encoded.shape)","320450dc":"print(inchi[0])","67943861":"print(embeds[:, 0].shape)\nprint(encoded.shape)","a6c048bf":"lstm = nn.LSTMCell(input_size = (256 + 512), hidden_size = 512, bias = True)","f4ccd3c8":"init_h = nn.Linear(in_features = 512, out_features = 512)(encoded)\ninit_c = nn.Linear(in_features = 512, out_features = 512)(encoded)\nprint(init_h.shape, init_c.shape)","2da0de0c":"lstm_input = torch.cat((embeds[:, 0], encoded), dim = 1)\nprint(lstm_input.shape)","4ce68519":"h, c = lstm(lstm_input, (init_h, init_c))\nprint(h.shape, c.shape)","ace0f9ab":"lstm_input = torch.cat((embeds[:, 1], encoded), dim = 1)\nh, c = lstm(lstm_input, (h, c))\nprint(h.shape, c.shape)","73bf495b":"class Decoder(nn.Module):\n    def __init__(self, vocab_size, embed_size, encoder_dim, decoder_dim):\n        super().__init__()\n        self.vocab_size = vocab_size\n        self.decoder_dim = decoder_dim\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.init_h = nn.Linear(in_features = encoder_dim, out_features = decoder_dim)\n        self.init_c = nn.Linear(in_features = encoder_dim, out_features = decoder_dim)\n        self.lstm = nn.LSTMCell(input_size = (embed_size + encoder_dim), hidden_size = decoder_dim, bias = True)\n        self.drop = nn.Dropout(p = 0.3)\n        self.linear = nn.Linear(in_features = decoder_dim, out_features = vocab_size)\n        \n    def forward(self, features, inchis): #\u6e21\u3055\u308c\u308b\u306e\u306f\u753b\u50cf\u7279\u5fb4\u91cf\u3068\u5b9f\u969b\u306eInChI\n        embeds = self.embedding(inchis)\n        \n        features = features.mean(dim = 1)\n        h = self.init_h(features) #\u6700\u521d\u306f\u753b\u50cf\u3060\u3051\u304b\u3089h,c\u3092\u4f5c\u308b\n        c = self.init_c(features)\n        \n        seq_length = len(inchis[0]) - 1 #\u6700\u5f8c\u306e\u6587\u5b57\u306b\u306a\u308b\u3068\u7d42\u308f\u308a\u306a\u306e\u3067\uff11\u3060\u3051\u5f15\u304f\n        batch_size = inchis.size(0)\n        preds = torch.zeros(batch_size, seq_length, self.vocab_size).to(DEVICE) #\u4e88\u6e2c\u3057\u305f\u6587\u5b57\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306b\u4f5c\u6210\n        \n        for s in range(seq_length):\n            lstm_input = torch.cat((embeds[:, s], features), dim = 1) #s\u6587\u5b57\u76ee\u3068\u753b\u50cf\u7279\u5fb4\u91cf\u3092\u304f\u3063\u3064\u3051\u308b\n            h, c = self.lstm(lstm_input, (h, c)) #h\u304c\u4e88\u6e2c\u3055\u308c\u305f\u30c7\u30fc\u30bf\n            x = self.drop(h)\n            x = self.linear(x)\n            preds[:, s] = x #s\u6587\u5b57\u76ee\u306e\u6b21\u306e\u6587\u5b57\u306e\u4e88\u6e2c\n        return preds","feb1a8f8":"print(batch[0].shape, batch[1].shape)\nencoded = encoder(batch[0])\nprint(encoded.shape)","69969d9c":"decoder = Decoder(vocab_size = VOCAB_SIZE, embed_size = 256, encoder_dim = 512, decoder_dim = 512)\npreds = decoder(encoded, batch[1])\nprint(preds.shape)","057ba2d5":"print(preds[0].shape)\nprint(preds[0])","845d2119":"if DEBUG:\n    BATCH_SIZE = 16\n    EPOCHS = 5\nelse:\n    BATCH_SIZE = 64\n    EPOCHS = 1","01edeeb4":"train_loader = DataLoader(train_data, batch_size = BATCH_SIZE, shuffle = True, drop_last = True, collate_fn = bms_collate, num_workers = 4)\nvalid_loader = DataLoader(valid_data, batch_size = BATCH_SIZE * 2, shuffle = False, drop_last = False, collate_fn = bms_collate, num_workers = 4)\n\nencoder = Encoder().to(DEVICE)\ndecoder = Decoder(vocab_size = VOCAB_SIZE, embed_size = 256, encoder_dim = 512, decoder_dim = 512).to(DEVICE)\n\nencoder_optimizer = torch.optim.Adam( encoder.parameters(), lr = 1e-4, weight_decay = 1e-6, amsgrad = False)\ndecoder_optimizer = torch.optim.Adam( decoder.parameters(), lr = 1e-4, weight_decay = 1e-6, amsgrad = False)\n\nencoder_scheduler = torch.optim.lr_scheduler.CosineAnnealingLR( encoder_optimizer, T_max = 4, eta_min = 1e-4, last_epoch = -1 )\ndecoder_scheduler = torch.optim.lr_scheduler.CosineAnnealingLR( decoder_optimizer, T_max = 4, eta_min = 1e-4, last_epoch = -1 )\n\ncriterion = nn.CrossEntropyLoss(ignore_index = stoi[\"<pad>\"])","4db4498a":"encoder.train()\ndecoder.train()\nfor images, inchis in tqdm(train_loader):\n    images = images.to(DEVICE)\n    inchis = inchis.to(DEVICE)\n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n    encoded = encoder(images)\n    preds = decoder(encoded, inchis)\n    print(preds.shape, inchis.shape)","a2abb76c":"loss = criterion(preds.permute(0, 2, 1), inchis[:, 1:])\nprint(loss.item())","d579656d":"encoder.train()\ndecoder.train()\nfor images, inchis in tqdm(train_loader):\n    images = images.to(DEVICE)\n    inchis = inchis.to(DEVICE)\n    encoder_optimizer.zero_grad()\n    decoder_optimizer.zero_grad()\n    encoded = encoder(images)\n    preds = decoder(encoded, inchis)\n    loss = criterion(preds.permute(0, 2, 1), inchis[:, 1:])\n    print(loss.item())\n    loss.backward()\n    encoder_optimizer.step()\n    decoder_optimizer.step()","e77374bd":"encoder.eval()\ndecoder.eval()\nvalid_loss = 0\nfor images, inchis in tqdm(valid_loader):\n    images = images.to(DEVICE)\n    inchis = inchis.to(DEVICE)\n    with torch.no_grad():\n        encoded = encoder(images)\n        preds = decoder(encoded, inchis)\n        loss = criterion(preds.permute(0, 2, 1), inchis[:, 1:])\n        print(loss.item())\n        valid_loss += loss.item()\nvalid_loss \/= len(valid_loader)\nprint(\"mean loss : \", valid_loss)","dcd13e0b":"best_loss = np.inf\nfor epoch in range(EPOCHS):\n    encoder.train()\n    decoder.train()\n    for images, inchis in tqdm(train_loader):\n        images = images.to(DEVICE)\n        inchis = inchis.to(DEVICE)\n        encoder_optimizer.zero_grad()\n        decoder_optimizer.zero_grad()\n        encoded = encoder(images)\n        preds = decoder(encoded, inchis)\n        loss = criterion(preds.permute(0, 2, 1), inchis[:, 1:])\n        loss.backward()\n        encoder_optimizer.step()\n        decoder_optimizer.step()\n    encoder.eval()\n    decoder.eval()\n    valid_loss = 0\n    for images, inchis in tqdm(valid_loader):\n        images = images.to(DEVICE)\n        inchis = inchis.to(DEVICE)\n        with torch.no_grad():\n            encoded = encoder(images)\n            preds = decoder(encoded, inchis)\n            loss = criterion(preds.permute(0, 2, 1), inchis[:, 1:])\n            valid_loss += loss.item()\n    valid_loss \/= len(valid_loader)\n    print(f\"[epoch{epoch}] loss:{valid_loss}\")\n    if valid_loss < best_loss:\n        best_loss = valid_loss\n        torch.save(encoder.state_dict(), \"bms_encoder.pth\")\n        torch.save(decoder.state_dict(), \"bms_decoder.pth\")\n        print(\"saved...\")","5ade1ce4":"class Decoder(nn.Module):\n    def __init__(self, vocab_size, embed_size, encoder_dim, decoder_dim):\n        super().__init__()\n        self.vocab_size = vocab_size\n        self.decoder_dim = decoder_dim\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.init_h = nn.Linear(in_features = encoder_dim, out_features = decoder_dim)\n        self.init_c = nn.Linear(in_features = encoder_dim, out_features = decoder_dim)\n        self.lstm = nn.LSTMCell(input_size = (embed_size + encoder_dim), hidden_size = decoder_dim, bias = True)\n        self.drop = nn.Dropout(p = 0.3)\n        self.linear = nn.Linear(in_features = decoder_dim, out_features = vocab_size)\n        \n    def forward(self, features, inchis): #\u6e21\u3055\u308c\u308b\u306e\u306f\u753b\u50cf\u7279\u5fb4\u91cf\u3068\u5b9f\u969b\u306eInChI\n        embeds = self.embedding(inchis)\n        \n        features = features.mean(dim = 1)\n        h = self.init_h(features) #\u6700\u521d\u306f\u753b\u50cf\u3060\u3051\u304b\u3089h,c\u3092\u4f5c\u308b\n        c = self.init_c(features)\n        \n        seq_length = len(inchis[0]) - 1 #\u6700\u5f8c\u306e\u6587\u5b57\u306b\u306a\u308b\u3068\u7d42\u308f\u308a\u306a\u306e\u3067\uff11\u3060\u3051\u5f15\u304f\n        batch_size = inchis.size(0)\n        preds = torch.zeros(batch_size, seq_length, self.vocab_size).to(DEVICE) #\u4e88\u6e2c\u3057\u305f\u6587\u5b57\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306b\u4f5c\u6210\n        \n        for s in range(seq_length):\n            lstm_input = torch.cat((embeds[:, s], features), dim = 1) #s\u6587\u5b57\u76ee\u3068\u753b\u50cf\u7279\u5fb4\u91cf\u3092\u304f\u3063\u3064\u3051\u308b\n            h, c = self.lstm(lstm_input, (h, c)) #h\u304c\u4e88\u6e2c\u3055\u308c\u305f\u30c7\u30fc\u30bf\n            x = self.drop(h)\n            x = self.linear(x)\n            preds[:, s] = x #s\u6587\u5b57\u76ee\u306e\u6b21\u306e\u6587\u5b57\u306e\u4e88\u6e2c\n        return preds\n\n    def predict(self, features, max_len): #\u753b\u50cf\u7279\u5fb4\u91cf\u3001\u6700\u5927\u6587\u5b57\u6570\n        batch_size = features.size(0)\n        features = features.mean(dim = 1)\n        h = self.init_h(features)\n        c = self.init_c(features)\n        \n        word = torch.full((batch_size, 1), stoi[\"<sos>\"]).to(DEVICE) #1\u6587\u5b57\u76ee\u306f\u5fc5\u305a\"sos\"\n        embeds = self.embedding(word)\n        preds = torch.zeros((batch_size, max_len), dtype = torch.long).to(DEVICE) #\u51fa\u529b\u3059\u308b\u4e88\u6e2c\u306e\u67a0\n        preds[:, 0] = word.squeeze() #\uff11\u6587\u5b57\u76ee\u306e\"sos\"\u3092\u5165\u308c\u3066\u304a\u304f\u3060\u3051\n        for i in range(max_len): #\u6700\u5927\u6587\u5b57\u6570\u307e\u3067\u4e88\u6e2c\u3092\u7e70\u308a\u8fd4\u3059\n            lstm_input = torch.cat((embeds[:, 0], features), dim = 1) #\uff11\u3064\u524d\u306e\u6587\u5b57\u3068\u753b\u50cf\u7279\u5fb4\u91cf\u3092\u304f\u3063\u3064\u3051\u308b\n            h, c = self.lstm(lstm_input, (h, c))\n            x = self.drop(h)\n            x = self.linear(x)\n            x = x.view(batch_size, -1)\n            pred_idx = x.argmax(dim = 1) #\u6700\u3082\u5024\u306e\u5927\u304d\u3044\u8a9e\u5f59\u3092\u4e88\u6e2c\u3068\u3059\u308b\n            preds[:, i] = pred_idx #\u51fa\u529b\u30c7\u30fc\u30bf\u306b\u683c\u7d0d\n            embeds = self.embedding(pred_idx).unsqueeze(1) #\u6b21\u306e\u6587\u5b57\u306e\u4e88\u6e2c\u306b\u4f7f\u7528\u3059\u308b\n        return preds","4c7fce69":"encoder = Encoder().to(DEVICE)\ndecoder = Decoder(vocab_size = VOCAB_SIZE, embed_size = 256, encoder_dim = 512, decoder_dim = 512).to(DEVICE)\nencoder.load_state_dict(torch.load(\".\/bms_encoder.pth\", map_location = DEVICE))\ndecoder.load_state_dict(torch.load(\".\/bms_decoder.pth\", map_location = DEVICE))","5fe86922":"encoder.eval()\ndecoder.eval()\npreds = []\nfor images, inchis in tqdm(valid_loader):\n    images = images.to(DEVICE)\n    with torch.no_grad():\n        encoded = encoder(images)\n        pred = decoder.predict(encoded, max_len = MAX_LEN)\n        preds.append(pred)","19ed4e0c":"print(preds[0].shape)\npreds[0][0]","60345fd8":"def generate_inchi(pred):\n    label = [itos[i] for i in pred.to(\"cpu\").numpy()]\n    result = []\n    for i in range(len(label)):\n        if label[i] == \"<eos>\":\n            break\n        result.append(label[i])\n    result = \"\".join(result)\n    return result\n\nresult = generate_inchi(preds[0][0])\nprint(result)\nprint(df_valid[\"InChI\"].values[0])","7f94f170":"test = pd.read_csv(\"..\/input\/bms-molecular-translation\/sample_submission.csv\")\ntest[\"file_path\"] = test[\"image_id\"].apply(\n    lambda x: f\"..\/input\/bms-molecular-translation\/test\/{x[0]}\/{x[1]}\/{x[2]}\/{x}.png\"\n)\nprint(test.shape)\ntest.head()","03bb6526":"class TestDataset(Dataset):\n    def __init__(self, df):\n        self.df = df\n        self.paths = self.df[\"file_path\"].values\n        \n    def __len__(self):\n        return self.df.shape[0]\n    \n    def __getitem__(self, idx):\n        path = self.paths[idx]\n        image = cv2.imread(path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image = A.Compose([\n            A.Resize(256, 256),\n            A.Normalize(),\n            ToTensorV2()\n        ])(image = image)[\"image\"]\n        return image\n    \n#test_data = TestDataset(test.iloc[:200, :])\ntest_data = TestDataset(test)\ntest_loader = DataLoader(test_data, batch_size = BATCH_SIZE * 4, shuffle = False, drop_last = False, num_workers = 4)","f3eb7611":"preds = []\nfor images in tqdm(test_loader):\n    with torch.no_grad():\n        images = images.to(DEVICE)\n        encoded = encoder(images)\n        pred = decoder.predict(encoded, max_len = MAX_LEN)\n        preds.append(pred)","5bc549e6":"generate_inchi(preds[0][0])","bf37d1a6":"submit_preds = []\nfor pred in preds:\n    submit_preds.append([generate_inchi(p) for p in pred])\nsubmit_preds = np.concatenate(submit_preds, axis = 0)\nprint(submit_preds.shape)","e122951a":"#submit = test[[\"image_id\", \"InChI\"]].iloc[:200, :].copy()\nsubmit = test[[\"image_id\", \"InChI\"]].copy()\nsubmit[\"InChI\"] = submit_preds\nsubmit.to_csv(\"submission.csv\", index = False)\nsubmit","9cac831c":"test\u304b\u3089\u63d0\u51fa\u7528\u306e\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nCPU\u3060\u3068\u7d76\u671b\u7684\u306b\u9577\u3044\u306e\u3067GPU\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002","56820624":"# 9. SUBMIT","59de8cf1":"matplotlib\u306f\u30b0\u30e9\u30d5\u4f5c\u6210\u306b\u3088\u304f\u4f7f\u308f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u304c\u3001\u753b\u50cf\u8868\u793a\u306b\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\u6709\u6a5f\u7269\u306e\u69cb\u9020\u5f0f\u3067\u3059\u306d\u3002","859c81bc":"InChI\u306f\"sos\"\u304c\u3044\u3089\u306a\u3044\u306e\u3067\uff11\u4ee5\u964d\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305fpreds\u306f\u73fe\u5728\u306e\u9806\u756a\u3067\u306floss\u304c\u8a08\u7b97\u3067\u304d\u306a\u3044\u306e\u3067\u5165\u308c\u66ff\u3048\u307e\u3057\u305f\u3002\uff08\u30b3\u30b3\u306f\u3042\u3063\u3066\u308b\u304b\u602a\u3057\u3044\u3067\u3059\u3002\u3002\u3002\uff09","bfe08d33":"\u3053\u306evocab\u30ea\u30b9\u30c8\u306b\u3042\u308b\u6587\u5b57\u3092\u4f7f\u3048\u3070\u30c7\u30fc\u30bf\u5185\u306b\u3042\u308b\u3059\u3079\u3066\u306eInChI\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002","e9423ea3":"\u3055\u3063\u304d\u3068\u540c\u3058\u3002","5581e959":"# \u6982\u8981\n\n\u3053\u3093\u306a\u4eba\u5411\u3051\uff1a\u30b3\u30f3\u30da\u521d\u5fc3\u8005\u3002\u4f55\u3057\u305f\u3089\u3044\u3044\u304b\u308f\u304b\u3089\u306a\u3044\u4eba\u3002\n\n\u81ea\u5206\u306e\u5099\u5fd8\u9332\u3082\u517c\u306d\u3066\u3044\u308b\u306e\u3067\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002","71ed56c5":"## \u25c6\u25c7Decoder\u25c7\u25c6\n\nDecoder\u306fEncoder\u3067\u306e\u5909\u63db\u5f8c\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3068InChI\u3092\u5b66\u7fd2\u3055\u305b\u308b\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\nLSTM\u3092\u4f7f\u3046\u3068\u6642\u7cfb\u5217\u306b\u5bfe\u5fdc\u3057\u305f\u5b66\u7fd2\u304c\u53ef\u80fd\u3067\u3059\u3002","1535aca5":"\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u3067\u4e88\u6e2c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3053\u3053\u3067MAX_LEN\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002","fc239f0f":"\u4e88\u6e2c\u3057\u305f\u30e9\u30d9\u30eb\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u306d\u3002","fb36ee94":"cv2\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u3068BGR\u3068\u3044\u3046\u8272\u306e\u9806\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3092RGB\u306b\u76f4\u3059\u305f\u3081\u306b.COLOR_BGR2RGB\u306b\u901a\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u304c\u5b66\u7fd2\u306b\u52b9\u304f\u306e\u304b\u306f\u77e5\u308a\u307e\u305b\u3093\u3002\u79c1\u306f\u6c17\u5206\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002","36037a29":"\u3053\u308c\u3067\u30ea\u30b9\u30c8\u5316\u307e\u3067\u3067\u304d\u307e\u3057\u305f\u3002","d3db9dbd":"cv2\u306f\u753b\u50cf\u51e6\u7406\u306b\u3088\u304f\u4f7f\u308f\u308c\u307e\u3059\u3002","b844f35f":"Dataset\u3067\u30bb\u30c3\u30c8\u3092\u4f5c\u308a\u3001DataLoader\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n\u3053\u3044\u3064\u3089\u306f\u307b\u307c\u5fc5\u9808\u306a\u306e\u3067\u899a\u3048\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002","e5cca886":"\u6a5f\u68b0\u5b66\u7fd2\u306b\u6587\u5b57\u3092\u76f4\u63a5\u3076\u3061\u8fbc\u3080\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u306a\u306e\u3067\u6587\u5b57\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u5b66\u7fd2\u3068\u4e88\u6e2c\u3092\u5b9f\u884c\u3057\u3001\u6700\u5f8c\u306b\u307e\u305f\u6587\u5b57\u306b\u623b\u3059\u4f5c\u696d\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nstoi\u306fstring to index(indices)\u3067\u3082\u3058\u3092\u6570\u5024\u306b\u5909\u3048\u307e\u3059\u3002itos\u306f\u9006\u3002","43e88d1e":"\u6587\u5b57\u30c7\u30fc\u30bf\u3068\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u306f.cat\u3067\u304f\u3063\u3064\u3051\u307e\u3057\u305f\u3002","6db31acc":"torchvision\u304b\u3089resnet18\u3092\u53d6\u308a\u51fa\u3057\u307e\u3057\u305f\u3002","2c2fee5a":"\u6b21\u306b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u6b21\u5143\u6570\u304c\u591a\u3044\u306e\u3067dim = 1\u306b\u304a\u3044\u3066\u5e73\u5747\u3092\u3068\u308a\u307e\u3057\u305f\u3002\n\n\u5e73\u5747\u306b\u3057\u305f\u6df1\u3044\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b5\u30a4\u30ba\u8abf\u6574\u306e\u305f\u3081\u3060\u3051\u3067\u3059\u3002","0c90a11a":"toch.nn.utils.rnn\u306bpad_sequence\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u306ftensor\u578b\u306e\u30c7\u30fc\u30bf\u3092\u30d1\u30c7\u30a3\u30f3\u30b0\u3057\u30b5\u30a4\u30ba\u3092\u7d71\u4e00\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u30d1\u30c7\u30a3\u30f3\u30b0\u306b\u3064\u304b\u3046\u6587\u5b57\u306f\"pad\"\u3067\u3059\u3002\u3053\u3053\u3067\u5f79\u306b\u7acb\u3063\u3066\u304f\u308c\u308b\u308f\u3051\u3067\u3059\u3002","becff842":"\u6587\u5b57\u306e\u59cb\u307e\u308asos\u3068\u7d42\u308f\u308aeos\u3092\u8db3\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002","0351b7be":"\u3053\u308c\u3089\u3092LSTM\u306b\u6e21\u3057\u307e\u3057\u3087\u3046\u3002\u51fa\u529b\u3055\u308c\u308b\u306e\u306f\u4e88\u6e2c\u3057\u305f\u6587\u5b57\u306b\u5f53\u305f\u308bh\u3068\u8a18\u61b6\u72b6\u614b\u3092\u8868\u3059C\u3067\u3059\u3002\n\n\u610f\u5473\u4e0d\u660e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u79c1\u306f\u300c\u3078\u30fc\u300d\u304f\u3089\u3044\u306e\u7406\u89e3\u306b\u3057\u3066\u3044\u307e\u3059\u3002","f60030e7":"\u632f\u308a\u51fa\u3057\u306b\u623b\u308a\u307e\u3059\u304c\u30d0\u30c3\u30c1\u30c7\u30fc\u30bf\u306e\u753b\u50cf\u306f3x256x256\u3067InChI\u304c54\u5404\u6587\u5b57\u3067\u3059\u3002\n\nEncoder\u3067\u753b\u50cf\u304b\u3089\u7279\u5fb4\u91cf\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u304cDecoder\u306e\u5165\u529b\u3068\u306a\u308a\u307e\u3059\u3002","954d41c5":"\u3053\u308c\u3067\u6587\u5b57\u3092\u6574\u7406\u3059\u308b\u4e00\u9023\u306e\u4f5c\u696d\u306f\u7d42\u308f\u308a\u3002\u5408\u8a08\u306741\u7a2e\u306e\u6587\u5b57\u3092\u5229\u7528\u3057\u307e\u3059\u3002","7b25e8c0":"\u6b21\u306b\u6700\u5927\u6587\u5b57\u6570\u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3082\u5f8c\u3005\u5fc5\u8981\u3067\u3059\u3002","a0897f46":"\u3053\u308c\u304b\u3089LSTM\u3067\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\uff11\u500b\u76ee\u306eInChI\u306f38, 7, 31...\u3068\u7d9a\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u6700\u521d\u306e38\u3068\u753b\u50cf\u306e\u7279\u5fb4\u304b\u3089\u6b21\u306e\uff17\u3092\u4e88\u6e2c\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u3002","6a99667a":"set()\u306f\u30e6\u30cb\u30fc\u30af\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306eInChI\u3059\u3079\u3066\u306b\u5bfe\u3057\u3066\u30e6\u30cb\u30fc\u30af\u306a\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3057\u3001words\u3092\u66f4\u65b0\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u5168\u884c\u306e\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u3053\u308d\u306b\u306f\u3059\u3079\u3066\u306eInChI\u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u304cwords\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u3002","b169c664":"LSTMCell\u306fLSTM\u3068\u547c\u3070\u308c\u308b\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u304c\u5b66\u7fd2\u53ef\u80fd\u306a\u5c64\u3067\u3059\u3002\n\n\u8a73\u7d30\u306f\u8a73\u3057\u304f\u8a9e\u308c\u306a\u3044\u306e\u3067\u8abf\u3079\u3066\u304f\u3060\u3055\u3044\u3002\n\ninput_size\u306b\u5165\u529b\u3059\u308b\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\uff11\u3064\u306e\u6587\u5b57\u3092Embedding\u3067\u5909\u63db\u3057\u305f256\u3068\u753b\u50cf\u306e\u7279\u5fb4\u3067\u3042\u308b512\u3092\u8db3\u3057\u305f\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\u3002\n\nLSTM\u306b\u6e21\u3059\u30c7\u30fc\u30bf\u306f\uff11\u3064\u524d\u306e\u6587\u5b57\u3068\u753b\u50cf\u306e\u7279\u5fb4\u3001\u305d\u3057\u3066\uff11\u3064\u524d\u306eLSTM\u304c\u51fa\u529b\u3057\u305f\u623b\u308a\u5024(h, c)\u3067\u3059\u3002","d29713d7":"\u3053\u308c\u304c\u4e0a\u56f3\u69cb\u9020\u5f0f\u306eInChI\u8868\u793a\u3067\u3059\u3002\u753b\u50cf\u304b\u3089InChI\u3092\u4e88\u6e2c\u3059\u308b\u306e\u304c\u4eca\u56de\u306e\u30bf\u30b9\u30af\u3067\u3059\u3002","2ca1aa88":"albumentations\u306f\u753b\u50cf\u52a0\u5de5\u306b\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002","0d49d47f":"\u3053\u3093\u306a\u611f\u3058\u3067\u5404\u6587\u5b57\u306b\u5bfe\u3057\u3066\u5404\u8a9e\u5f59\u306e\u6570\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n41\u6587\u5b57\u306e\u4e2d\u304b\u3089\u3082\u3063\u3068\u3082\u5024\u306e\u5927\u304d\u3044\u6587\u5b57\u3092\u4e88\u6e2c\u3057\u305f\u6587\u5b57\u3068\u3057\u307e\u3057\u3087\u3046\u3002","19705b1f":"numpy\uff1a\u5404\u7a2e\u8a08\u7b97\u306b\u4f7f\u7528\n\npandas\uff1a\u8868\u8a08\u7b97\u3084\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u306b\u4f7f\u7528\n\n\u4e21\u65b9\u3068\u3082\u307b\u307c\u5fc5\u305a\u4f7f\u7528\u3059\u308b\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3082\u3044\u3044\u304f\u3089\u3044\u3067\u3059\u3002","2445d5b1":"optimizer\uff1a\u6700\u9069\u5316\u624b\u6cd5\u3002\u3068\u308a\u3042\u3048\u305aAdam\n\nscheduler\uff1a\u5b66\u7fd2\u7387(lr)\u306e\u8abf\u6574\u3002\u8272\u3005\u3042\u308b\u3051\u3069\u307f\u3093\u306a\u4f7f\u3063\u3066\u308bCosineAnnealingLR\u3002\n\ncriterion\uff1a\u640d\u5931\u95a2\u6570\u3002CrossEntropyLoss\u306fsoftmax\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u8aa4\u5dee\u3092\u8a08\u7b97\u3057\u3066\u304f\u308c\u307e\u3059\u3002\"pad\"\u306f\u5b66\u7fd2\u306b\u95a2\u4fc2\u306a\u3044\u306e\u3067\u9664\u5916\u3057\u307e\u3057\u3087\u3046\u3002","0997ed14":"\u6700\u3082loss\u306e\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u3066\u3044\u308b\u306e\u3067\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002","e5bfc36c":"EPOCH\u306e\u6570\u3060\u3051\u5b66\u7fd2\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3057\u305f\u3002\n\n\u5b66\u7fd2\u3092\u91cd\u306d\u308b\u5ea6\u306bloss\u304c\u6e1b\u308a\u307e\u3059\u304c\u5fc5\u305a\u6e1b\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u306a\u306e\u3067best_loss\u3092\u7121\u9650\u5927\u3067\u5b9a\u7fa9\u3057\u3066\u66f4\u65b0\u3057\u3066\u3044\u304d\u3001\u6700\u3082loss\u306e\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\u3002","90d3c8eb":"\u30c7\u30fc\u30bf\u5206\u5272\u3057\u307e\u3057\u305f\u3002\u5b66\u7fd2\u304c900\u884c\u3067\u8a55\u4fa1\u304c100\u884c\u3067\u3059\u3002","fe4b9cd0":"DataLoader\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba(\uff11\u5ea6\u306b\u4f55\u500b\u53d6\u308a\u51fa\u3059\u304b)\u3001\u3055\u3063\u304d\u306e\u5909\u63db\u95a2\u6570\u3092\u6e21\u3057\u307e\u3059\u3002","c40f75cb":"# 8. INFERENCE\n\u6700\u5f8c\u306b\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u307f\u304b\u3089\u6587\u5b57\u3092\u4f5c\u6210\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u305d\u306e\u305f\u3081\u306bDecoder\u306bpredict\u95a2\u6570\u3092\u8db3\u3057\u307e\u3059\u3002","42d60b3e":"\u4e0a\u624b\u304f\u30e2\u30c7\u30eb\u304c\u4f5c\u6210\u3067\u304d\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3060\u3051\u306a\u3089\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3092\u843d\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u7c21\u5358\u306b\u3057\u305f\u3044\u306e\u3067InChI\u306e\u6587\u5b57\u6570\u304c\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u5b9f\u969b\u306b\u63d0\u51fa\u3059\u308b\u969b\u306fDEBUG\u3092False\u306b\u3057\u307e\u3059\u304c\u3001\uff11\u56de\u306e\u5b66\u7fd2\u306b\uff16\u6642\u9593\u4ee5\u4e0a\u304b\u304b\u308b\u306e\u3067\u5b66\u7fd2\u30b3\u30b9\u30c8\u306f\u304b\u306a\u308a\u53b3\u3057\u3044\u3067\u3059\u3002","5b5afd43":"\u30b5\u30a4\u30ba\u3082\u3042\u3063\u3066\u307e\u3059\u306d\u3002","4b905b90":"\u4e88\u6e2c\u306f\u3053\u3093\u306a\u611f\u3058\u3002","1324c4e5":"Embedding\u306f\u6587\u5b57\u3092\u6570\u5024\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n\u5f15\u6570\u306f\u8a9e\u5f59\u6570(\u4eca\u56de\u306fVOCAB_SIZE)\u3068\u5909\u63db\u5f8c\u306e\u6b21\u5143\u6570\uff08\u9069\u5f53\uff09\u3067\u3059\u3002\u5b58\u5728\u3092\u5fd8\u308c\u3066\u3044\u305fVOCAB_SIZE\u304c\u3053\u3053\u3067\u4f7f\u308f\u308c\u307e\u3059\u3002\n\n\u5909\u63db\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u898b\u308b\u3068256\u306b\u30c7\u30fc\u30bf\u304c\u62e1\u5f35\u3055\u308c\u3066\u3044\u307e\u3059\u3002","5ac14c66":"# 1. LOADING\n\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u3087\u3046\u3002","ee4dad3a":"# 5. CV\n\u30c7\u30fc\u30bf\u5206\u5272\u306f\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067train_test_split\u306b\u3057\u307e\u3059\u3002\n\n\u672c\u6765\u306f\u3082\u3063\u3068\u6b63\u78ba\u306a\u5206\u5272\u3092\u3059\u3079\u304d\u3067\u3059\u3002","13051504":"\u5b66\u7fd2\u3055\u305b\u308b\u3068\u304d\u306f.train()\u3067\u5b66\u7fd2\u30e2\u30fc\u30c9\u306b\u3057\u307e\u3059\u3002\u4f55\u3092\u304b\u3048\u3066\u3044\u308b\u304b\u306f\u77e5\u308a\u307e\u305b\u3093\u3002\n\n\u5404\u5909\u63db\u3092\u7d4c\u3066preds\u3092\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u3053\u3067\u30b5\u30a4\u30ba\u3092\u898b\u3066\u307f\u308b\u3068preds\u306f53\u6587\u5b57\u306b\u5bfe\u3057\u3066\u5b9f\u969b\u306eInChI\u306f\"sos\"\u304c\u3042\u308b\u306e\u306754\u6587\u5b57\u3067\u3059\u3002\n\n\u306a\u306e\u3067loss\u304c\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\u3002","88a50f7e":"# 3. VOCABULARY\n\n\u6587\u5b57\u3092\u4e88\u6e2c\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u3069\u3093\u306a\u6587\u5b57\u304c\u3042\u308b\u306e\u304b\u6574\u7406\u3057\u307e\u3059\u3002","0f670ffd":"predict\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\uff11\u3064\u524d\u306e\u6587\u5b57\u3092Embedding\u3067\u5909\u63db\u3057\u3066\u753b\u50cf\u7279\u5fb4\u91cf\u3068h,c\u304b\u3089\u6b21\u306e\u6587\u5b57h\u3092\u51fa\u529b\u3059\u308b\u51e6\u7406\u3092\u6700\u5927\u6587\u5b57\u6570\u307e\u3067\u7e70\u308a\u8fd4\u3057\u307e\u3057\u3087\u3046\u3002","68ed75ae":"Decoder\u306b\u5165\u308c\u308b\u3068\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba x \u6587\u5b57\u6570-1 x \u8a9e\u5f59\u6570\u3067\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002","6a30f1fe":"\u3053\u3053\u3067\uff13\u3064\u306e\u6587\u5b57\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\nsos\uff1a\u6587\u5b57\u306e\u59cb\u307e\u308a\u3002\n\neos\uff1a\u6587\u5b57\u306e\u7d42\u308f\u308a\u3002\n\npad\uff1a\u30d1\u30c7\u30a3\u30f3\u30b0\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u306e\u8abf\u6574\u3002\n\n\u5f8c\u3067\u5f79\u306b\u7acb\u3061\u307e\u3059\u3002","ae9744b1":"# 6. MODEL","1d365c9d":"\uff11\u500b\u76ee\u306e\u30c7\u30fc\u30bf\u3092\u3068\u308a\u3060\u3057\u307e\u3057\u305f\u3002\n\n\u753b\u50cf\u30c7\u30fc\u30bf\u3068InChI\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002","2ae3fab6":"\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306evalid\u3067loss\u3092\u8a08\u7b97\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u304c\u5b9f\u969b\u306b\u4e88\u6e2c\u3057\u305f\u3068\u304d\u306b\u8fd1\u3044\u8aa4\u5dee\u3067\u3059\u3002\n\n\u3053\u306eloss\u304c\u5c0f\u3055\u3051\u308c\u3070\u5c0f\u3055\u3044\u307b\u3069\uff08\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u5206\u5272\u306b\u304a\u3044\u3066\uff09\u826f\u3044\u30e2\u30c7\u30eb\u3067\u3059\u3002","cbf5a4b0":".Resize\u3067256x256\u306b\u5909\u63db\u3057\u307e\u3057\u305f\u3002\n\n\u6ce8\u610f\u70b9\u306f\u8f9e\u66f8\u578b\u3067\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u3067\u3059\u3002","ed27e213":"# 4. DATASET\n\n\u4eca\u56de\u30e2\u30c7\u30eb\u4f5c\u6210\u306b\u306fpytorch\u3092\u4f7f\u3044\u307e\u3059\u3002\n\npytorch\u3067\u306f\u30e2\u30c7\u30eb\u306b\u8aad\u307f\u8fbc\u307e\u305b\u308b\u30c7\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u6700\u4f4e\u9650\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306f\u753b\u50cf\u3068InChI\u3067\u3059\u3002\n\n\u307e\u305a\u306f\u3069\u3093\u306a\u624b\u9806\u3067\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002","312b38a7":"pandas\u306e.read_csv\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n\u53f3\u7aef\u306e|<\u3068\u3044\u3046\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30d1\u30b9\u3092\u30b3\u30d4\u30fc\u3067\u304d\u307e\u3059\u3002\n\n242\u4e07\u884c\u306e\u30c7\u30fc\u30bf\u3067\u3059\u306d\u3002\n\nimage_id\u306f\u753b\u50cf\u30c7\u30fc\u30bf\u306e\uff29\uff24\u3067InChI\u304c\u4eca\u56de\u4e88\u6e2c\u3057\u305f\u3044\u6587\u5b57\u5217\u3067\u3059\u3002","16fa2c78":"InChI\u3092\u78ba\u304b\u3081\u307e\u3057\u3087\u3046\u3002\n\n\u5168\u3066\u306e\u6587\u5b57\u304c\"sos\"\u306e38\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3057\u3066eos\u306e39\u3067\u7d42\u308f\u308a\u3001\u6b8b\u308a\u6587\u5b57\u6570\u306f\"pad\"\u306e40\u3067\u8abf\u6574\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\uff11\u500b\u3060\u305139\u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3044\u3064\u306e\u6587\u5b57\u6570\u306b\u5408\u308f\u305b\u3066\u30d1\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002","14021d34":"## \u25c6\u25c7DATASET\u25c7\u25c6\n\u3053\u308c\u307e\u3067\u306e\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3057\u307e\u3059\u3002","04ed6675":"\u6700\u5f8c\u306bpytorch\u306e.LongTensor\u3067pytoch\u7528\u306e\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u7d42\u308f\u308a\u3002","b23f1da5":"loss\u3092\u8a08\u7b97\u3067\u304d\u305f\u3089loss.backward\u3068optimizer.step\u3067\u66f4\u65b0\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u306e\u8fba\u308a\u306fpytorch\u306e\u57fa\u790e\u3092\u691c\u7d22\u3059\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\uff11\u56de\u306e\u5b66\u7fd2\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002","c90f35d0":"# 7. TRAINING","7e6a59ec":"## \u25c6\u25c7InChI\u25c7\u25c6\n\u6b21\u306f\u4e88\u6e2c\u3057\u305f\u3044InChI\u306e\u52a0\u5de5\u65b9\u6cd5\u3067\u3059\u3002","5b68c88e":"\u3053\u3053\u3067\u6c17\u3092\u4ed8\u3051\u308b\u3079\u304d\u306f\u753b\u50cf\u30b5\u30a4\u30ba\u3002\n\n\uff11\u679a\u76ee\u306f229x325\u3067\u3057\u305f\u304c\uff12\u679a\u76ee\u306f148x288\u3067\u3059\u3002\n\n\u753b\u50cf\u30b5\u30a4\u30ba\u3092\u7d71\u4e00\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u51e6\u7406\u3057\u307e\u3057\u3087\u3046\u3002","b0697e66":"next(iter())\u3067\u6b21\u306e\u30d0\u30c3\u30c1\u3092\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3092\u898b\u3066\u307f\u308b\u3068\uff18\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002","23f70dd5":"\u3053\u3053\u3067\u30cd\u30c3\u30af\u306a\u306e\u304cInChI\u306e\u6587\u5b57\u6570\u304c\u7d71\u4e00\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3067\u3059\u3002\n\n\u3053\u308c\u304b\u3089DataLoader\u3067\u30d0\u30c3\u30c1(\u307e\u3068\u307e\u308a)\u3054\u3068\u306b\u53d6\u308a\u51fa\u3059\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u969b\u306b\u753b\u50cf\u3068\u540c\u3058\u304fInChI\u306e\u30b5\u30a4\u30ba\u3082\u30d0\u30c3\u30c1\u5185\u3067\u7d71\u4e00\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002","2a7cc01c":"torch.nn\u3068torchvision\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\nDEVICE\u306fCPUorGPU\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nGPU\u304cON\u306b\u306a\u3063\u3066\u3044\u308b\u3068.cuda.is_available\u306fTrue\u3067\u3059\u3002","1525ff38":"test\u3067\u306fInChI\u304c\u306a\u3044\u70b9\u3060\u3051\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002collate_fn\u3082\u4e0d\u8981\u3067\u3059\u3002","a8c902d8":"\u6b21\u306f\u6b63\u898f\u5316\u51e6\u7406\u3067\u3059\u3002\u3053\u308c\u3092\u3057\u3066\u304a\u304f\u3068\u5b66\u7fd2\u304c\u65e9\u304f\u53ce\u675f\u3059\u308b\uff1f\u307f\u305f\u3044\u3067\u3059\u3002","abee23e5":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u30af\u30e9\u30b9\u3067\u4f5c\u308a\u307e\u3059\u3002\n\ninit\uff1a\u521d\u671f\u5316\u6761\u4ef6\u3002df\u306f\u5f8c\u3005\u6e21\u3059\u30c7\u30fc\u30bf\u306b\u306a\u308a\u307e\u3059\u3002\n\nlen\uff1a\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\u5927\u62b5\u306f\u30c7\u30fc\u30bf\u306e\u884c\u6570\u306b\u3057\u307e\u3059\u3002\n\ngetitem\uff1a\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e\u95a2\u6570\u3002\u5f15\u6570\u306b\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\n\n\u6700\u521d\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff13\u56de\u304f\u3089\u3044\u81ea\u4f5c\u3057\u3066\u307f\u308b\u3068\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n\ngetitem\u3067\u306f\u3055\u3063\u304d\u66f8\u3044\u305f\u51e6\u7406\u3092\u5168\u3066\u884c\u3044\u307e\u3057\u3087\u3046\u3002\n\nidx\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u30d1\u30b9\u3084InChI\u3092\u8aad\u307f\u53d6\u3063\u3066\u5909\u63db\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nalbumentations\u306e.Compose\u3092\u4f7f\u3048\u3070\u4e00\u9023\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\n\u6700\u5f8c\u306breturn\u3067\u753b\u50cf\u3068inchi\u3092\u51fa\u3057\u307e\u3057\u3087\u3046\u3002","c09fa1b0":"\u3061\u306a\u307f\u306b\u6700\u9577\u306e\u69cb\u9020\u306f\u3053\u308c\u3067\u3059\u3002\u3053\u3093\u306a\u3082\u306e\u4e88\u6e2c\u3067\u304d\u305f\u3089\u82e6\u52b4\u3057\u307e\u305b\u3093\u306d\u3002","f7fbb62b":"\u5909\u63db\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002","d1e9ae3d":"\u5148\u7a0b\u3068\u540c\u3058\u8981\u9818\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u30c7\u30fc\u30bf\u30ed\u30fc\u30c0\u30fc\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nshuffle\u306f\u30c7\u30fc\u30bf\u30b7\u30e3\u30c3\u30d5\u30eb\u3002drop_last\u306f\u30d0\u30c3\u30c1\u3067\u5207\u3063\u305f\u30c7\u30fc\u30bf\u306e\u6700\u5f8c\u306e\u7aef\u6570\u3092\u5207\u308b\u304b\u3069\u3046\u304b\u3002\n\nnum_workers\u306f\u4e26\u884c\u51e6\u7406\u6570\u3067\u3059\u3002\u5f8c\u3067\u308f\u304b\u308a\u307e\u3059\u304c\u8a08\u7b97\u91cf\u304c\u81a8\u5927\u306a\u306e\u3067GPU\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u70ba\u306b\u51e6\u7406\u6570\u3092\u5897\u3084\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\ntqdm\u3092\u4f7f\u3046\u3068\u9032\u6357\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305apass\u3067\u5168\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3081\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002","66369e2b":"\u6700\u5f8c\u306efc\u5c64\u306f\u4e0d\u8981\u306a\u306e\u3067\u6d88\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002","554e0bf7":"\uff13\u6587\u5b57\u76ee\u306f\uff12\u6587\u5b57\u76ee\u3068\u3055\u3063\u304d\u306e\u623b\u308a\u5024h,c\u3068\u3067\u5165\u529b\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u5168\u6587\u5b57\u6570\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067InChI\u3092\u5b66\u7fd2\u3057\u3066\u3044\u304f\u308f\u3051\u3067\u3059\u3002","78b20b7a":"\u8a66\u3057\u306b\uff11\u3064\u753b\u50cf\u3092\u901a\u3057\u307e\u3059\u3002","5bef39d8":"\"eos\"\u306b\u306a\u308b\u307e\u3067\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3059\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u306b\u4e88\u6e2c\u30e9\u30d9\u30eb\u3092\u5165\u308c\u308b\u3068InChI\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u6587\u5b57\u3068\u6bd4\u3079\u3066\u307f\u308b\u3068\u307e\u3041\u307e\u3041\u304b\u306a\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3002","eae62440":"test\u304b\u3089\"image_id\"\u3068\"InChI\"\u3092\u9802\u6234\u3057\u3066\u3055\u3063\u304d\u306e\u4e88\u6e2c\u30c7\u30fc\u30bf\u3092\"InChI\"\u306b\u5165\u308c\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u308c\u3067\u63d0\u51fa\u304c\u3067\u304d\u307e\u3059\u3002","80b8c713":"\u3053\u306e\u3088\u3046\u306b\u6587\u5b57\u3092\u6570\u5024\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002","30664f0c":"# 2. IMAGE","b9e975a3":"\u63d0\u51fa\u3059\u308btest\u30c7\u30fc\u30bf\u306e\u30d1\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002","dcf95148":"\u753b\u50cf\u306f\u3053\u3093\u306a\u611f\u3058\u3067image_id\u306e1,2,3\u6587\u5b57\u76ee\u3067\u30d5\u30a9\u30eb\u30c0\u5206\u3051\u3055\u308c\u3001\u6700\u5f8c\u306bimage_id.png\u306e\u540d\u524d\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u307e\u3059\u3002","712b42d7":"## \u25c6\u25c7IMAGE\u25c7\u25c6\n\u753b\u50cf\u306f\u3055\u3063\u304d\u3068\u540c\u3058\u8981\u9818","5dbc6954":"## \u25c6\u25c7Encoder\u25c7\u25c6\n\n\u4eca\u56de\u753b\u50cf\u30c7\u30fc\u30bf\u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u30e2\u30c7\u30eb\u3092Encoder\u3068\u3057\u307e\u3059\u3002","c5f877ba":"\uff11\u6587\u5b57\u76ee\u306fembeds\u306e\uff11\u5217\u76ee\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u753b\u50cf\u306e\u7279\u5fb4\u306fEncoder\u3067\u5909\u63db\u3057\u3066.mean\u3067\u30b5\u30a4\u30ba\u8abf\u6574\u3057\u305f\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n\u3053\u308c\u3089\u304b\u3089\uff12\u6587\u5b57\u76ee\u306e\uff17\u3092\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002","621b0938":"image_id\u3092.apply\u3067\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002\uff11\u6587\u5b57\u76ee\u304cx[0],\uff12\u6587\u5b57\u76ee\u304cx[1]...\u3068\u306a\u308a\u30d1\u30b9\u304c\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002","965920de":"Decoder\u3092\u30af\u30e9\u30b9\u3067\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u3053\u308c\u307e\u3067\u306e\u89e3\u8aac\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u6700\u5f8c\u306b\u4e88\u6e2c\u3057\u305fpreds\u3092\u5410\u304d\u51fa\u3057\u305f\u3044\u306e\u3067\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3068\u6587\u5b57\u6570\u3001VOCAB_SIZE\u3067\u67a0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002","1b853b65":"InChI\u306f\u3053\u306e\u3088\u3046\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u306b\u3057\u307e\u3057\u305f\u3002","863b0839":"\u6700\u521d\u306e\u6587\u5b57\u306f\u524d\u306e\u6587\u5b57\u306e\u30c7\u30fc\u30bf\u304c\u306a\u3044\u306e\u3067\u5168\u7d50\u5408\u5c64\u3067h,c\u3092\u4f5c\u308a\u307e\u3059\u3002","1d6dfff8":"albumentations.pytorch.ToTensorV2\u3067torch\u578b\u306b\u5909\u63db\u3057\u307e\u3057\u3087\u3046\u3002\n\npytorch\u3067\u306f\u8272\u3092\u8868\u3059\u30c7\u30fc\u30bf\u3092\uff11\u500b\u76ee\u306b\u4f7f\u3046\u306e\u30673x256x256\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u753b\u50cf\u51e6\u7406\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u4ed6\u306b\u3082albumentations\u3067\u5de6\u53f3\u53cd\u8ee2\u3084\u56de\u8ee2\u306a\u3069\u3055\u305b\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u5272\u611b\u3002","96ef5f74":"\u5909\u63db\u5f8c\u306e\u30b5\u30a4\u30ba\u306f512x8x8\u3067\u3059\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u3067resnet\u3092\u4f7f\u3063\u3066\u753b\u50cf\u306e\u7279\u5fb4\u3092\u3068\u3089\u3048\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002","3b145a15":"\u5404\u4e88\u6e2c\u3092\u307e\u3068\u3081\u307e\u3059\u3002","599b4dc3":"\u5b9f\u969b\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\ninit\u3067\u5b9a\u7fa9\u3057\u305f\u5f15\u6570\u3092\u6e21\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u307f\u3002","22ce4b05":"cv2.imread\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u753b\u50cf\u306f229x325\u3067\u8d64\u7dd1\u9752\uff13\u8272\u3067\u3059\u3002","96ec0bff":"\u30af\u30e9\u30b9\u3067Encoder\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\ninit\u3067\u306fresnet\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nforward\u3067\u306f\u5b9f\u969b\u306b\u884c\u308f\u308c\u308b\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u753b\u50cf\u30c7\u30fc\u30bf\u3092resnet\u306b\u3068\u304a\u3057\u3066\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002\n\n.permute\u306f\u30c7\u30fc\u30bf\u306e\u884c\u5217(\u4f4d\u7f6e)\u3092\u5909\u3048\u308b\u95a2\u6570\u3067\u3059\u3002512\u3092\u6700\u5f8c\u306b\u6301\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6b21\u5143\u6570\u304c\u591a\u3044\u3068\u4e0d\u4fbf\u306a\u306e\u3067.view\u3067\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002-1\u306e\u90e8\u5206\u306f\u4efb\u610f\u306e\u6570\u306b\u306a\u308b\u306e\u30678x8\u306b\u306a\u308a\u307e\u3059\u3002"}}