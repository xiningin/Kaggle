{"cell_type":{"50edeeda":"code","c0da421f":"code","814edd12":"code","25909543":"code","c5bc285b":"code","b29fe6d9":"code","3b79cafd":"code","91196070":"code","047d0509":"code","f267a928":"code","2e3fb917":"code","a8cc1904":"code","d84ca713":"code","6602957e":"code","ce0fac2f":"code","9efeb9c8":"code","3a77affc":"code","e80d5626":"code","9c1d894e":"code","3e1d25ee":"code","2cfc74c4":"code","ef9967b4":"code","8f0d1e32":"code","b3e8609a":"code","7269af43":"code","2ef7940f":"code","e690ccbf":"code","ad4027d7":"code","7d77bfcd":"code","3467d7c5":"code","15346548":"code","0e224ed1":"code","edb972a4":"code","f00cebc0":"code","0136cfcb":"code","1d534511":"code","6df38b7c":"code","c0e51be3":"code","04580678":"code","50b5f880":"code","5bd1ae5b":"code","6da88faf":"markdown","ed55a891":"markdown","8abc1e1d":"markdown","97568e04":"markdown","a7861781":"markdown","bf5d9b98":"markdown","9131813a":"markdown","1e693e46":"markdown"},"source":{"50edeeda":"import numpy as np \nimport pandas as pd\nimport os\nimport csv\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction import DictVectorizer\nimport re \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\n#from dython import nominal\nfrom sklearn.decomposition import PCA\nfrom sklearn.impute import SimpleImputer","c0da421f":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","814edd12":"train","25909543":"test","c5bc285b":"train.isna().sum()","b29fe6d9":"test.isna().sum()","3b79cafd":"# Replace NaN in \"Cabin\" in train and test\ntrain['Cabin'] = train['Cabin'].fillna('U')\ntest['Cabin'] = test['Cabin'].fillna('U')","91196070":"# Replace NaN in Fare\" with mean value\n# Age has too many missing data points\ntest['Fare'] = test['Fare'].replace(np.NaN, test['Fare'].mean())","047d0509":"def surname(data):\n    \"\"\"\n    Get a surname from a 'Name' column \n    \"\"\"\n    name = data['Name'].str.split('\\s|(?<!\\d)[,.](?!\\d)', expand=True)\n    data['Last_name'] = name.iloc[:, 0]\n    return data","f267a928":"def ticket(data):\n    \"\"\"\n    Get a ticket number \n    \"\"\"\n    str_list = data['Ticket']\n    split_list = []\n    for i in str_list:\n        split_str = re.split(\"\\s|(?<!\\d)[,.](?!\\d)\", i)\n        split_list.append(split_str[-1])\n    data['Ticket_number'] = split_list\n    return data    ","2e3fb917":"train = surname(train)\ntrain = ticket(train)","a8cc1904":"#correlation matrix\n\n#corr_df = train.copy().drop(columns = ['PassengerId', 'Name', 'Ticket'])\n\n#nominal.associations(corr_df, nominal_columns=['Sex', 'Cabin', 'Embarked', 'Last_name', 'Ticket_number'],\n#                     figsize=(10,8))","d84ca713":"merged = train.append(test)\nmerged","6602957e":"merged = surname(merged)\nmerged","ce0fac2f":"def ohe(data):\n    \"\"\"\n    One-hot-encodes categorical columns\n    \"\"\"\n    vec_enc = DictVectorizer()\n    vec_enc.fit(data[['Sex', 'Embarked']].to_dict(orient='records'))\n    cats_data = vec_enc.transform(data[['Sex', 'Embarked']].to_dict(orient='records')).toarray()\n    cats_names = vec_enc.get_feature_names()\n    cats = pd.DataFrame(cats_data, columns = cats_names)\n    cats.reset_index(drop = True, inplace = True)\n    data.reset_index(drop = True, inplace = True)\n    data = pd.concat([data, cats], axis = 1)\n    data['Name_label'] = pd.factorize(data['Last_name'])[0]\n    data['Cabin_label'] = pd.factorize(data['Cabin'])[0]\n    data = data.copy().drop(columns = ['Sex', 'Embarked', 'Last_name', 'Cabin'], axis = 1)\n    return data","9efeb9c8":"merged_cat = ohe(merged.copy())\nmerged_cat","3a77affc":"# train = PassengerId ~891\n# test = PassengerId 892~\nmerged_cat = merged_cat.drop(columns = ['Name', 'Ticket', 'Ticket_number'])\nnew_train = merged_cat.loc[merged_cat['PassengerId'] < 892]\nnew_test = merged_cat.loc[merged_cat['PassengerId'] > 891]\nnew_train","e80d5626":"X_train = new_train.copy().drop(columns = ['PassengerId', 'Survived', 'Age'])\ny_train = new_train['Survived']\nX_test = new_test.copy().drop(columns = ['PassengerId', 'Survived', 'Age'])\ny_test = new_test['Survived']","9c1d894e":"print(X_train.shape)\nX_test.shape","3e1d25ee":"pipe_reg = Pipeline([\n        ('scale', StandardScaler()), ('reg', LogisticRegression())])\npipe_reg.get_params().keys()","2cfc74c4":"#grid_params = {\"reg__C\":np.logspace(-3,3,7), \"reg__solver\":[\"newton-cg\", \"lbfgs\", \"liblinear\", \"sag\", \"saga\"]} \ngrid_params = {\"reg__C\": [0.01], \"reg__solver\":[\"newton-cg\"]} \nreg_search = GridSearchCV(pipe_reg, grid_params, verbose=1, cv=5, n_jobs=-1, scoring='accuracy')","ef9967b4":"reg_search.fit(X_train, y_train.values.ravel())\nprint('Best parameters found:')\ndisplay(reg_search.best_params_)\nprint('Score on train data: {}\\n'.format(reg_search.score(X_train,y_train.values.ravel())))\nprint('best cv score:')\ndisplay(reg_search.best_score_)\nprint('mean cv score:')\ndisplay(np.mean(reg_search.cv_results_['mean_test_score']))\nreg_best_estim = reg_search.best_estimator_\nprint(reg_best_estim)","8f0d1e32":"pipe_svc = Pipeline([\n        ('scale', StandardScaler()), ('svc', SVC(kernel='rbf', class_weight='balanced'))])\npipe_svc.get_params().keys()","b3e8609a":"#param_grid = {'svc__C': [1, 5, 10, 50],\n#              'svc__gamma': [0, 0.0001, 0.0005, 0.001, 0.005]}\nparam_grid = {'svc__C': [50],\n              'svc__gamma': [0.005]}\nsvc_search = GridSearchCV(pipe_svc, param_grid, verbose=1, cv=5, n_jobs=-1, scoring='accuracy')","7269af43":"svc_search.fit(X_train, y_train.values.ravel())\nprint('Best parameters found:')\ndisplay(svc_search.best_params_)\nprint('Score on train data: {}\\n'.format(svc_search.score(X_train,y_train.values.ravel())))\nprint('best cv score:')\ndisplay(svc_search.best_score_)\nprint('mean cv score:')\ndisplay(np.mean(svc_search.cv_results_['mean_test_score']))\nsvc_best_estim = svc_search.best_estimator_\nprint(svc_best_estim)","2ef7940f":"pipe_rfc = Pipeline([\n        ('scale', StandardScaler()), ('rfc', RandomForestClassifier(random_state=42))])\npipe_rfc.get_params().keys()","e690ccbf":"#params_grid = { \n#    'rfc__n_estimators': [100, 200, 300],\n#    'rfc__max_features': ['auto', 'sqrt', 'log2'],\n#    'rfc__max_depth' : [7,8,9],\n#    'rfc__criterion' :['gini', 'entropy']\n#}\n\nparams_grid = { \n    'rfc__n_estimators': [100],\n    'rfc__max_features': ['auto'],\n    'rfc__max_depth' : [9],\n    'rfc__criterion' :['entropy']\n}\nrfc_search = GridSearchCV(pipe_rfc, params_grid,verbose=1, cv=5, n_jobs=-1, scoring='accuracy')","ad4027d7":"rfc_search.fit(X_train, y_train.values.ravel())\nprint('Best parameters found:')\ndisplay(rfc_search.best_params_)\nprint('Score on train data: {}\\n'.format(rfc_search.score(X_train,y_train.values.ravel())))\nprint('best cv score:')\ndisplay(rfc_search.best_score_)\nprint('mean cv score:')\ndisplay(np.mean(rfc_search.cv_results_['mean_test_score']))\nrfc_best_estim = rfc_search.best_estimator_\nprint(rfc_best_estim)","7d77bfcd":"pipe_lgbm = Pipeline([\n        ('scale', StandardScaler()), ('lgbm', LGBMClassifier())])\npipe_lgbm.get_params().keys()","3467d7c5":"params_grid = { \n        'lgbm__learning_rate': [0.5],\n        'lgbm__max_depth' : [5],\n        'lgbm__num_leaves':[4],\n        'lgbm__reg_lambda' :[1],\n        'lgbm__random_state': [42]\n}\nlgbm_search = GridSearchCV(pipe_lgbm, params_grid,verbose=1, cv=5, n_jobs=-1, scoring='accuracy')","15346548":"lgbm_search.fit(X_train, y_train.values.ravel())\nprint('Best parameters found:')\ndisplay(lgbm_search.best_params_)\nprint('Score on train data: {}\\n'.format(lgbm_search.score(X_train,y_train.values.ravel())))\nprint('best cv score:')\ndisplay(lgbm_search.best_score_)\nprint('mean cv score:')\ndisplay(np.mean(lgbm_search.cv_results_['mean_test_score']))\nlgbm_best_estim = lgbm_search.best_estimator_\nprint(lgbm_best_estim)","0e224ed1":"pipe_xgb = Pipeline([\n        ('scale', StandardScaler()), ('xgb', XGBClassifier())])\npipe_xgb.get_params().keys()","edb972a4":"#params_grid = { \n#    'xgb__learning_rate': [0.5],\n#    'xgb__reg_lambda' :[10, 20, 30],\n#    'xgb__max_depth' : [4],\n#    'xgb__n_estimators': [200, 300, 400],\n#}\n\nparams_grid = { \n    'xgb__learning_rate': [0.5],\n    'xgb__reg_lambda' :[20],\n    'xgb__max_depth' : [4],\n    'xgb__n_estimators': [300],\n}\n\nxgb_search = GridSearchCV(pipe_xgb, params_grid, verbose=1, cv=5, n_jobs=-1, scoring='accuracy')","f00cebc0":"xgb_search.fit(X_train, y_train.values.ravel())\nprint('Best parameters found:')\ndisplay(xgb_search.best_params_)\nprint('Score on train data: {}\\n'.format(xgb_search.score(X_train,y_train.values.ravel())))\nprint('best cv score:')\ndisplay(xgb_search.best_score_)\nprint('mean cv score:')\ndisplay(np.mean(xgb_search.cv_results_['mean_test_score']))\nxgb_best_estim = xgb_search.best_estimator_\nprint(xgb_best_estim)","0136cfcb":"cat = CatBoostClassifier()\ncat.get_params().keys()","1d534511":"params_grid = { 'iterations': [500],\n          'depth': [6],\n          'loss_function': ['Logloss', 'CrossEntropy'],\n          'l2_leaf_reg': [0.1],\n          'leaf_estimation_iterations': [8],\n          'logging_level':['Silent'],\n          'random_seed': [42]\n}\ncat_search = GridSearchCV(cat, params_grid, verbose=1, cv=5, n_jobs=-1, scoring='accuracy')","6df38b7c":"cat_search.fit(X_train, y_train.values.ravel())\nprint('Best parameters found:')\ndisplay(cat_search.best_params_)\nprint('Score on train data: {}\\n'.format(cat_search.score(X_train,y_train.values.ravel())))\nprint('best cv score:')\ndisplay(cat_search.best_score_)\nprint('mean cv score:')\ndisplay(np.mean(cat_search.cv_results_['mean_test_score']))\ncat_best_estim = cat_search.best_estimator_\nprint(cat_best_estim)","c0e51be3":"X_test","04580678":"ypred = cat_best_estim.predict(X_test)","50b5f880":"pred_df = X_test.copy()\npred_df['PassengerId'] = pred_df.index+1\npred_df['Survived'] = ypred.astype(int)\npred_df = pred_df.drop(columns = ['Pclass', 'SibSp', 'Parch', 'Fare', 'Embarked=C', 'Embarked=Q','Embarked=S','Sex=female',\n                                 'Sex=male','Name_label','Cabin_label'])\npred_df","5bd1ae5b":"pred_df.to_csv('prediction.csv', index=False)","6da88faf":"# Random Forest","ed55a891":"# Support Vector Machine","8abc1e1d":"# LGBMClassifier","97568e04":"- Ticket_number and Last_name are highly correlated.\n- Train and test datasets have different values of Last_name and Cabin. How to solve mismatch in train and test set after categorical encoding:\nhttps:\/\/medium.com\/@vaibhavshukla182\/how-to-solve-mismatch-in-train-and-test-set-after-categorical-encoding-8320ed03552f","a7861781":"# Logistic Regression","bf5d9b98":"# Prediction","9131813a":"# XGBClassifier","1e693e46":"# CatBoostClassifier"}}