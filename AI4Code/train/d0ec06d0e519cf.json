{"cell_type":{"e4867544":"code","50016920":"code","d6392421":"code","b6372c99":"code","0488d904":"code","38b699cf":"code","ce1fac29":"code","b32eba6f":"code","5060d83f":"code","1259d501":"code","da11310f":"code","406d149f":"code","b62f8b53":"code","a4d2225a":"code","cfc7de59":"code","0ad62085":"code","f72b5475":"code","177e64a8":"code","5f187444":"code","68b8e153":"code","e3bb1808":"markdown","80f1996a":"markdown","66be43de":"markdown","3f40a065":"markdown","0e5e3b4d":"markdown","53b053f1":"markdown","c49fb423":"markdown"},"source":{"e4867544":"# Generic Libraries\nfrom PIL import Image\nimport os\nimport pandas as pd\nimport numpy as np\nimport re,string,unicodedata\n\n#Tesseract Library\nimport pytesseract\n\n#Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#Garbage Collection\nimport gc\n\n#Gensim Library for Text Processing\nimport gensim.parsing.preprocessing as gsp\nfrom gensim import utils\n\n#TextBlob Library (Sentiment Analysis)\nfrom textblob import TextBlob, Word\n\n#Plotting Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#WordCloud Generator\nfrom wordcloud import WordCloud,STOPWORDS","50016920":"#Define Directory Path\nsample_images = '..\/input\/detecting-sentiments-dataset\/Sample Data Files\/'\ntest_images = '..\/input\/detecting-sentiments-dataset\/Dataset\/'","d6392421":"#Custom Function to Traverse the folder\ndef traverse(directory):\n    path, dirs, files = next(os.walk(directory))\n    fol_nm = os.path.split(os.path.dirname(path))[-1]\n    print(f'Number of files found in \"{fol_nm}\" : ',len(files))","b6372c99":"#Traversing the folders\ntraverse(sample_images)\ntraverse(test_images)","0488d904":"ex_txt = []   #list to store the extracted text\n\n#Function to Extract Text\ndef TxtExtract(directory):\n    \"\"\"\n    This function will handle the core OCR processing of images.\n    \"\"\"\n    \n    for subdir, dirs, files in os.walk(directory):\n        for file in files:\n            filepath = subdir + os.sep + file\n            text = pytesseract.image_to_string(Image.open(filepath), timeout=5)\n            if not text:\n                ex_txt.extend([[file, \"blank\"]])\n            else:   \n                ex_txt.extend([[file, text]])\n                \n    fol_nm = os.path.split(os.path.dirname(subdir))[-1]\n    \n    print(f\"Text Extracted from the files in '{fol_nm}' folder & saved to list..\")","38b699cf":"#Extracting Text from JPG files in Sample Image Folder\nTxtExtract(sample_images)\n\n#Extracting Text from JPG files in Dataset Folder\nTxtExtract(test_images)","ce1fac29":"#Converting the list to dataframe for further analysis\next_df = pd.DataFrame(ex_txt,columns=['FileName','Text'])","b32eba6f":"#Inspect the dataframe\next_df.head()","5060d83f":"print(\"Total Records: \", ext_df.shape[0])","1259d501":"# Create list of pre-processing func (gensim)\nprocesses = [\n               gsp.strip_tags, \n               gsp.strip_punctuation,\n               gsp.strip_multiple_whitespaces,\n               gsp.strip_numeric,\n               gsp.remove_stopwords, \n               gsp.strip_short, \n               gsp.stem_text\n            ]\n\n# Create func to pre-process text\ndef proc_txt(txt):\n    text = txt.lower()\n    text = utils.to_unicode(text)\n    for p in processes:\n        text = p(text)\n    return text","da11310f":"#Creating a new column with processed text\next_df['Text_Pr'] = ext_df['Text'].apply(lambda x: proc_txt(x))","406d149f":"#Creating a seperate dataframe with non-blank Text \next_df_txt = ext_df[(  ext_df['Text_Pr'] != 'blank'  )]","b62f8b53":"print(\"Total Records in Text Only Dataframe: \", ext_df_txt.shape[0])","a4d2225a":"# Creating a function to analyse the tweet sentiments\n\ndef sentiment_analyzer(text):\n    TB_sentiment_polarity = TextBlob(text).sentiment.polarity\n    \n    # decide sentiment as positive, negative and neutral \n    if TB_sentiment_polarity >= 0.00 : \n        return \"Positive\" \n  \n    elif TB_sentiment_polarity <= 0.00 : \n        return \"Negative\" \n  \n    else : \n        return \"Neutral\"","cfc7de59":"#Analysing the sentiment\next_df_txt['Sentiment'] = ext_df_txt['Text_Pr'].apply(lambda x: sentiment_analyzer(x))","0ad62085":"sentiment_count = ext_df_txt.groupby('Sentiment').size()\n\n# Data to plot\nlabels = 'Negative', 'Positive'\nsizes = [sentiment_count[0], sentiment_count[1]]\ncolors = ['dimgrey', 'lightgray']\nexplode = (0.1, 0)  # explode 1st slice\nfig = plt.figure(figsize=[8, 6])\n\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=140)\n\nplt.axis('equal')\nplt.title(\"Sentiment Distribution (extracted text)\", fontsize=16)\nplt.show()","f72b5475":"# Function to plot word cloud\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, figure_size=(12.0,12.0), \n                   title = None, title_size=18, image_color=False):\n\n    wordcloud = WordCloud(background_color='white',\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    mask = mask)\n    wordcloud.generate(text)\n    \n    plt.figure(figsize=figure_size)\n    \n    if image_color:\n        #image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'center'})\n    plt.axis('off');\n    plt.tight_layout()  \n","177e64a8":"txt = str( ext_df_txt[ext_df_txt['Sentiment'] == 'Negative'].Text_Pr )\nplot_wordcloud(txt, max_words=200, max_font_size=100, \n               title = 'Words with Negative Sentiments', title_size=30)","5f187444":"txt = str( ext_df_txt[ext_df_txt['Sentiment'] == 'Positive'].Text_Pr )\nplot_wordcloud(txt, max_words=200, max_font_size=100, \n               title = 'Words with Positive Sentiments', title_size=30)","68b8e153":"#Free up memory\ngc.collect()","e3bb1808":"## Word Cloud","80f1996a":"## Some Exploration","66be43de":"## Sentiment Analysis","3f40a065":"# Text Extraction from Images - Using OCR Tool (tesseract)\n\nIn this notebook, We will try to learn text extraction from images using [Tesseract](https:\/\/pypi.org\/project\/pytesseract\/) library & then perform sentiment analysis on the extracted text.\n\n**Brief Intro** : Python-tesseract is an optical character recognition (OCR) tool for python. That is, it will recognize and \u201cread\u201d the text embedded in images. For more details please read from the link above.\n\nDoes it sound interesting to you? If so, then don't forget to UPVOTE. So, let's get started !!","0e5e3b4d":"## Extracting Text (the fun stuff !)","53b053f1":"## Libraries","c49fb423":"## Extracted Text Processing"}}