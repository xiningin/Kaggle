{"cell_type":{"dc734081":"code","d6d71a92":"code","dbe71590":"code","df2d5282":"code","1a306712":"code","7e0b93ec":"code","20432e5a":"code","485b48be":"code","83271f9a":"code","152a6f77":"code","c2648e7c":"code","61b70138":"code","c2ab6ee2":"code","40fa8384":"code","4e34928f":"code","b9928937":"code","5812e09c":"code","4430d690":"code","163aa761":"code","5b2f9c29":"code","7861dffb":"code","ad3ff7ad":"code","7ad19e6a":"code","69b31755":"code","8779183f":"code","59709112":"code","21e9dfcb":"code","b9656a86":"code","dcf2a1e9":"code","b40d2cd9":"code","4e2f1244":"code","cb5cb3a0":"code","4f6a260c":"code","29fd0cb5":"code","44a71706":"code","18f0245f":"code","fcf7bd30":"code","0747810e":"code","ba44cd56":"code","f0dd6533":"markdown","722c87d3":"markdown"},"source":{"dc734081":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6d71a92":"# Import all required libraries. Few I have added down wherever it was required.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","dbe71590":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport plotly.express as px\nimport os\nimport cv2\nfrom PIL import Image\nimport keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport tensorflow as tf\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n#from tensorflow.keras.applications import EfficientNetB0, Xception\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.optimizers import Adam","df2d5282":"# First fetch train and test dataset in your notebook\n\ninput_dir = \"..\/input\/cassava-leaf-disease-classification\"\n\ntrain_images_path = os.path.join(input_dir,\"train_images\")\ntest_images_path = os.path.join(input_dir,'test_images')","1a306712":"train_images_path","7e0b93ec":"train = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ntrain.head(10)","20432e5a":"train.shape # Number of images in folder.","485b48be":"train[train['image_id'].str.contains('1001742395')]","83271f9a":"image_list = train['image_id'].to_list()\nlabel_list = train['label'].to_list()\nlen(image_list)","152a6f77":"for i in range(5):\n    print(image_list[i],\"   \",label_list[i])","c2648e7c":"import json\n\nwith open(\"..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json\") as f:\n    class_mapping = json.load(f)\n\nclass_mapping2 ={int(k):v for k,v in class_mapping.items()}\n\nclass_mapping2","61b70138":"plt.figure(figsize=(8,5))\n\nsns.set_style('whitegrid')\n\nax=sns.countplot(data=train, x='label', palette=\"Pastel1\")\n\n\n#  '0': 'Cassava Bacterial Blight (CBB)\n#  '1': 'Cassava Brown Streak Disease (CBSD)\n#  '2': 'Cassava Green Mottle (CGM)\n#  '3': 'Cassava Mosaic Disease (CMD)\n#  '4': 'Healthy","c2ab6ee2":"train2 = train.copy()\ntrain2.replace({\"label\": class_mapping2}, inplace=True)\n\npie_df = train2['label'].value_counts().reset_index()\npie_df.columns = ['label', 'count']\nfig = px.pie(pie_df, values = 'count', names = 'label', hole=.3, color_discrete_sequence = px.colors.qualitative.Pastel1)\nfig.show()","40fa8384":"def plot_samples(class_):\n    \n    print(f'Some Sample Images belonging to Class {class_mapping[f\"{class_}\"]}')\n    \n    sample_images = train[train.label == class_].sample(8)\n    \n    plt.rcParams[\"axes.grid\"] = False\n\n    fig,ax = plt.subplots(nrows=2,ncols=4,figsize=(20,12))\n\n    for e,img in enumerate(sample_images.image_id):\n        image_path = os.path.join(input_dir,f'train_images\/{img}')\n        image = cv2.imread(image_path)\n        ax[e\/\/4][e%4].imshow(image)\n    \n    plt.show()","4e34928f":"plot_samples(0) #Cassava Bacterial Blight","b9928937":"plot_samples(1) #Cassava Brown Streak Disease","5812e09c":"plot_samples(2) #Cassava Green Mottle","4430d690":"plot_samples(3) #Cassava Mosaic Disease","163aa761":"# Cassava Bacterial Blight (CBB) Samples\u00b6\nsample_images = train[train.label == 0].sample(5)\nplt.figure(figsize=(35, 20))\nfor e,img in enumerate(sample_images.image_id):\n    plt.subplot(1, 5, e + 1)\n    img = cv2.imread(os.path.join(input_dir,f'train_images\/{img}'))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    \nplt.show()","5b2f9c29":"# Cassava Brown Streak Disease (CBSD) Samples\nsample_images = train[train.label == 1].sample(5)\nplt.figure(figsize=(35, 20))\nfor e,img in enumerate(sample_images.image_id):\n    plt.subplot(1, 5, e + 1)\n    img = cv2.imread(os.path.join(input_dir,f'train_images\/{img}'))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n\nplt.show()","7861dffb":"# Cassava Green Mottle (CGM) Samples\nsample_images = train[train.label == 2].sample(5)\nplt.figure(figsize=(35, 20))\nfor e,img in enumerate(sample_images.image_id):\n    plt.subplot(1, 5, e + 1)\n    img = cv2.imread(os.path.join(input_dir,f'train_images\/{img}'))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    \nplt.show()","ad3ff7ad":"# Cassava Mosaic Disease (CMD) Samples\nsample_images = train[train.label == 3].sample(5)\nplt.figure(figsize=(35, 20))\nfor e,img in enumerate(sample_images.image_id):\n    plt.subplot(1, 5, e + 1)\n    img = cv2.imread(os.path.join(input_dir,f'train_images\/{img}'))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    \nplt.show()","7ad19e6a":"# Healty Samples\nsample_images = train[train.label == 4].sample(5)\nplt.figure(figsize=(35, 20))\nfor e,img in enumerate(sample_images.image_id):\n    plt.subplot(1, 5, e + 1)\n    img = cv2.imread(os.path.join(input_dir,f'train_images\/{img}'))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.imshow(img)\n    \nplt.show()","69b31755":"# Model Implemetation and Augmentation\nBATCH_SIZE =8 #Mini-Batch Gradient Descent\nSTEPS_PER_EPOCH = len(train)*0.8 \/ BATCH_SIZE\nVALIDATION_STEPS = len(train)*0.2 \/ BATCH_SIZE\nEPOCHS = 20\nTARGET_SIZE = 350","8779183f":"train.label = train.label.astype('str')\nfrom keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(\n                    rotation_range = 40,\n                    width_shift_range = 0.2,\n                    height_shift_range = 0.2,\n                    shear_range = 0.2,\n                    zoom_range = 0.2,\n                    horizontal_flip = True,\n                    vertical_flip = True,\n                    fill_mode = 'nearest')\n\ntrain_generator = train_datagen.flow_from_dataframe(train,\n                         directory = os.path.join('..\/input\/cassava-leaf-disease-classification\/train_images'),\n                         subset = \"training\",\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\",\n                         shuffle= True)\n\n\nvalidation_datagen = ImageDataGenerator(validation_split = 0.2)\n\nvalidation_generator = validation_datagen.flow_from_dataframe(train,\n                         directory = os.path.join('..\/input\/cassava-leaf-disease-classification\/train_images'),\n                         subset = \"validation\",\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")","59709112":"img_path = os.path.join('..\/input\/cassava-leaf-disease-classification\/train_images\/1003442061.jpg')\nimg = image.load_img(img_path, target_size = (TARGET_SIZE, TARGET_SIZE))\nimg_tensor = image.img_to_array(img)\nimg_tensor = np.expand_dims(img_tensor, axis = 0)\nimg_tensor \/= 255.\n\nplt.imshow(img_tensor[0])\nplt.show()","21e9dfcb":"generator = train_datagen.flow_from_dataframe(train.iloc[17:18],\n                         directory = os.path.join('..\/input\/cassava-leaf-disease-classification\/train_images'),\n                         x_col = \"image_id\",\n                         y_col = \"label\",\n                         target_size = (TARGET_SIZE, TARGET_SIZE),\n                         batch_size = BATCH_SIZE,\n                         class_mode = \"sparse\")\n\naug_images = [generator[0][0][0]\/255 for i in range(10)]\nfig, axes = plt.subplots(2, 5, figsize = (20, 10))\naxes = axes.flatten()\nfor img, ax in zip(aug_images, axes):\n    ax.imshow(img)\nplt.tight_layout()\nplt.show()","b9656a86":"def create_model_old():\n    conv_base = Xception(include_top=False, input_tensor=None,\n    pooling=None, input_shape=(TARGET_SIZE, TARGET_SIZE, 3), classifier_activation='softmax')\n                               \n    model = conv_base.output\n    model = layers.GlobalAveragePooling2D()(model)\n    model = layers.Dense(5, activation = \"softmax\")(model)\n    model = models.Model(conv_base.input, model)\n\n    model.compile(optimizer = Adam(lr = 0.001),\n                  loss = \"sparse_categorical_crossentropy\",\n                  metrics = [\"acc\"])\n    return model","dcf2a1e9":"# Check for TensorFlow or Thieno\nfrom keras import backend as K\nimg_width = 150\nimg_height = 150\nif K.image_data_format() == 'channels_first':\n    input_shape = (3, img_width, img_height)\nelse:\n    input_shape = (img_width, img_height, 3)","b40d2cd9":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\n\n","4e2f1244":"def create_model_1():\n    model = Sequential()\n    # Conv2D : Two dimenstional convulational model.\n    # 32 : Input for next layer\n    # (3,3) convulonational windows size\n    model.add(Conv2D(512, (3, 3), input_shape=(TARGET_SIZE, TARGET_SIZE, 3)))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(256, (3, 3)))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Conv2D(128, (3, 3)))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n\n    model.add(Flatten()) # Output convert into one dimension layer and will go to Dense layer\n    #model.add(Dense(512))\n    #model.add(Activation('relu'))\n    #model.add(bias_regularizer('tf.keras.regularizers.L1L2(l1=0.01, l2=0.001)'))\n    model.add(Dense(512, activation = 'relu', bias_regularizer=tf.keras.regularizers.L1L2(l1=0.01, l2=0.001)))\n    model.add(Dropout(0.7))\n    model.add(Dense(5))\n    model.add(Activation('softmax'))\n    return model","cb5cb3a0":"model = create_model_1()\nmodel.summary()","4f6a260c":"#model = create_model()\n#model = create_model_1()\n#import keras\n#from keras import optimizers\n#model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.Adam(lr=.0001), metrics=['accuracy'])\n#model.summary()","29fd0cb5":"# model = keras.models.load_model('..\/input\/xception-best-weights\/Xception_best_weights.h5')","44a71706":"# Submission\nsubmission_file = pd.read_csv(os.path.join('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv'))\nsubmission_file","18f0245f":"preds = []\n\nfor image_id in submission_file.image_id:\n    print(image_id)\n    image = Image.open(os.path.join(f'..\/input\/cassava-leaf-disease-classification\/test_images\/{image_id}'))\n    image\n    image = image.resize((TARGET_SIZE, TARGET_SIZE))\n    image = np.expand_dims(image, axis = 0)\n    model.predict(image)\n    preds.append(np.argmax(model.predict(image)))\n\nsubmission_file['label'] = preds\nsubmission_file","fcf7bd30":"submission_file.to_csv('submission.csv', index = False)","0747810e":"import os\nTEST_DIR = '..\/input\/cassava-leaf-disease-classification\/test_images\/'\ntest_images = os.listdir(TEST_DIR)\npredictions = []\n\nfor image in test_images:\n    img = Image.open(TEST_DIR + image)\n    img = img.resize((TARGET_SIZE, TARGET_SIZE))\n    img = np.expand_dims(img, axis=0)\n    predictions.extend(model.predict(img).argmax(axis = 1))\npredictions","ba44cd56":"sub = pd.DataFrame({'image_id': test_images, 'label': predictions})\ndisplay(sub)","f0dd6533":"# Distribution of Diseases","722c87d3":"# Converting from BGR to RGB"}}