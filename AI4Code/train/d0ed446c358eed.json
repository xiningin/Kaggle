{"cell_type":{"a9d3984a":"code","bc42a6b8":"code","0a0d8fbe":"code","adeb714e":"code","c6ff0aed":"code","c4710f03":"code","d79bed2a":"code","87aad339":"code","e2236110":"code","746894d6":"code","51e805c3":"code","cf96f119":"code","4c2bef38":"code","ab9e4094":"code","d071b31a":"code","734d0a4c":"code","e59208e8":"code","0260b737":"code","7cd8d521":"code","af32f3b6":"code","f27568ad":"code","c60277fd":"code","b742cf6c":"code","5e785ddc":"code","126c7f8b":"code","6a6ea50d":"code","e7c7276a":"code","d4dfeed2":"code","ea19daf3":"code","cba3371c":"code","52b8e99f":"code","7d75c3c4":"code","d824be49":"code","087db270":"code","8444813f":"code","fad89b75":"code","598e9b3a":"code","eb039b9f":"code","046512ab":"code","547ad267":"code","a97193f3":"code","30c3ccc5":"markdown","f3cc1c6e":"markdown","ca6ad087":"markdown","5b969b89":"markdown","84eb01ed":"markdown","edf19f71":"markdown","a799eb6c":"markdown","b4a2fe41":"markdown","40b89a27":"markdown","0198d246":"markdown","1433c7b7":"markdown","7ffffe50":"markdown","e81f3e5a":"markdown","cf30e67d":"markdown","0c1eba84":"markdown","2d0a7641":"markdown","751f1a3a":"markdown","2186f343":"markdown","870c5262":"markdown","42a7f38f":"markdown","f4c81729":"markdown","76589980":"markdown","2b3e21cf":"markdown"},"source":{"a9d3984a":"# import libraries\nimport time\nimport calendar\nimport numpy as np\nimport pandas as pd\nfrom dateutil.parser import parse\nfrom datetime import date, timedelta\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error\n\nimport os\n\n%matplotlib inline\n\n# config\nDATA_DIR = '..\/input\/recruit-restaurant-visitor-forecasting'\n\n# define utility funtions\ndef rmsle(y_test, y_pred):\n    return np.sqrt(mean_squared_error(y_test, y_pred))\n\ncalendar.setfirstweekday(6)\ndef get_week_of_month(date_str):\n    year = int(date_str[:4])\n    month = int(date_str[5:7])\n    day = int(date_str[8:10])\n    x = np.array(calendar.monthcalendar(year, month))\n    week_of_month = np.where(x==day)[0][0] + 1\n    return(week_of_month)\n\ndef save_submission(model, train, y, test, model_name):\n    model.fit(train, y)\n    pred = model.predict(test)\n    pred = np.expm1(pred)\n    \n    data_dir = DATA_DIR\n\n    submission_path = os.path.join(data_dir, \"sample_submission.csv\")\n    submission = pd.read_csv(submission_path)\n    submission['visitors'] = pred\n    print(submission.head())\n    \n    submission_csv_path = '{}\/submission_{}_RMSLE.csv'.format(data_dir, model_name)\n    submission.to_csv(submission_csv_path, index=False)","bc42a6b8":"# \ub370\uc774\ud130 \ub85c\ub4dc\nair_visit = pd.read_csv(os.path.join(DATA_DIR, 'air_visit_data.csv.zip'))\nair_reserve = pd.read_csv(os.path.join(DATA_DIR, 'air_reserve.csv.zip'))\nhpg_reserve = pd.read_csv(os.path.join(DATA_DIR, 'hpg_reserve.csv.zip'))\nair_store = pd.read_csv(os.path.join(DATA_DIR, 'air_store_info.csv.zip'))\nhpg_store = pd.read_csv(os.path.join(DATA_DIR, 'hpg_store_info.csv.zip'))\nstore_id_map = pd.read_csv(os.path.join(DATA_DIR, 'store_id_relation.csv.zip'))\ndate_info = pd.read_csv(os.path.join(DATA_DIR, 'date_info.csv.zip'))\nsubmission = pd.read_csv(os.path.join(DATA_DIR, 'sample_submission.csv.zip'))","0a0d8fbe":"# \uc804\ucc98\ub9ac\ub97c \ud55c\ubc88\uc5d0 \ud558\uae30\uc704\ud574 \uc704\ud574 \ub370\uc774\ud130 \ud569\uce58\uae30\nair_visit_count = len(air_visit)\n\ntrain_data = air_visit.copy()\ntest_data = submission.copy()\n\ntest_data[\"air_store_id\"] = test_data.apply(lambda x: '_'.join(x['id'].split('_')[:2]), axis=1)\ntest_data[\"visit_date\"] = test_data.apply(lambda x:x['id'].split(\"_\")[-1], axis=1)\ntest_data.drop(\"id\",axis=1, inplace=True)\n\nconcat_data = pd.concat([train_data, test_data])\nconcat_data","adeb714e":"# \ud559\uc2b5\uc2dc\ud0ac \ub370\uc774\ud130\uc5d0 holidays \ub370\uc774\ud130 merge\nconcat_data = pd.merge(concat_data, date_info, how=\"left\", left_on=\"visit_date\", right_on=\"calendar_date\")\nconcat_data.drop(\"calendar_date\", axis=1, inplace=True)\nconcat_data.head()","c6ff0aed":"print(len(air_store))\nprint(len(store_id_map))","c4710f03":"concat_data = pd.merge(concat_data, air_store, how=\"left\", on=\"air_store_id\")\nconcat_data = pd.merge(concat_data, store_id_map, how=\"left\", on=\"air_store_id\")","d79bed2a":"concat_data = pd.merge(concat_data, hpg_store, how=\"left\", on=\"hpg_store_id\")\nconcat_data","87aad339":"# \uc608\uc57d\ub370\uc774\ud130\ub294 visit_date \uae30\uc900\uc73c\ub85c air, hpg\uc5d0\uc11c\uc758 \uc608\uc57d\uc774 \uac01\uac01 \uba87\ud300 \uc788\ub294\uc9c0, \uc608\uc57d\uc778\uc6d0\uc740 \uba87\uba85\uc778\uc9c0 \ub370\uc774\ud130\ub97c merge\nair_reserve_data = air_reserve.copy()\nair_reserve_data[\"visit_datetime\"] = air_reserve_data[\"visit_datetime\"].str[:10]\nair_reserve_data = air_reserve_data[[\"air_store_id\", \"visit_datetime\", \"reserve_visitors\"]] \\\n                        .groupby(by=[\"air_store_id\", 'visit_datetime']) \\\n                        .sum() \\\n                        .reset_index()\nair_reserve_data = air_reserve_data.rename(columns = {'reserve_visitors': 'air_reserve_visitors'})\nair_reserve_data = air_reserve_data.rename(columns = {'visit_datetime': 'visit_date'})\n\npd.merge(concat_data, air_reserve_data, how=\"left\", on=['air_store_id', 'visit_date'])\n \nconcat_data = pd.merge(concat_data, air_reserve_data, how=\"left\", on=['air_store_id', 'visit_date'])","e2236110":"hpg_reserve_data = hpg_reserve.copy()\nhpg_reserve_data[\"visit_datetime\"] = hpg_reserve_data[\"visit_datetime\"].str[:10]\nhpg_reserve_data = hpg_reserve_data[[\"hpg_store_id\", \"visit_datetime\", \"reserve_visitors\"]] \\\n                        .groupby(by=[\"hpg_store_id\", 'visit_datetime']) \\\n                        .sum() \\\n                        .reset_index()\nhpg_reserve_data = hpg_reserve_data.rename(columns = {'reserve_visitors': 'hpg_reserve_visitors'})\nhpg_reserve_data = hpg_reserve_data.rename(columns = {'visit_datetime': 'visit_date'})\nhpg_reserve_data[\"visit_date\"] = hpg_reserve_data[\"visit_date\"].str[:10]\n\nconcat_data = pd.merge(concat_data, hpg_reserve_data, how=\"left\", on=['hpg_store_id', 'visit_date'])","746894d6":"print(len(hpg_reserve_data))\nprint(len(air_reserve_data))","51e805c3":"concat_data","cf96f119":"concat_data.isna().sum()","4c2bef38":"concat_data = concat_data.drop([\"hpg_area_name\", \"hpg_genre_name\", \"latitude_y\", \"longitude_y\"], axis=1)","ab9e4094":"query = \"air_reserve_visitors.notnull() and hpg_reserve_visitors.notnull() and air_reserve_visitors!=hpg_reserve_visitors\"\nconcat_data.query(query,engine='python')","d071b31a":"query = \"air_reserve_visitors.notnull() and hpg_reserve_visitors.notnull() and air_reserve_visitors==hpg_reserve_visitors\"\nconcat_data.query(query,engine='python')","734d0a4c":"# \uc608\uc57d\uc790\uac00 \uc5c6\ub294 \ub0a0\uc740 \uc608\uc57d\uc790 \uc218\ub97c 0\uc73c\ub85c \ucc44\uc6b4\ub2e4\nconcat_data[[\"air_reserve_visitors\"]] = concat_data[[\"air_reserve_visitors\"]].fillna(0)\nconcat_data[[\"hpg_reserve_visitors\"]] = concat_data[[\"hpg_reserve_visitors\"]].fillna(0)\n\nconcat_data.isna().sum()","e59208e8":"concat_data.info()","0260b737":"\n\n# concat_data[\"visit_year\"] = concat_data[\"visit_date\"].str[:4].apply(int)\n# concat_data[\"visit_month\"] = concat_data[\"visit_date\"].str[5:7].apply(int)\n# concat_data[\"visit_day\"] = concat_data[\"visit_date\"].str[8:10].apply(int)\n\n# dayofweek : monday(0)~sunday(6)\n# \ub0a0\uc9dc\ub370\uc774\ud130 \ubcc0\ud658\nconcat_data['visit_date'] = pd.to_datetime(concat_data['visit_date'])\nconcat_data['visit_day_of_week'] = pd.to_datetime(concat_data['visit_date']).dt.dayofweek\nconcat_data['day'] = concat_data['visit_date'].dt.day\nconcat_data['dow'] = concat_data['visit_date'].dt.weekday # monday:0, sunday:6\nconcat_data['year'] = concat_data['visit_date'].dt.year\nconcat_data['month'] = concat_data['visit_date'].dt.month\nconcat_data['week'] = concat_data['visit_date'].dt.week\nconcat_data['quarter'] = concat_data['visit_date'].dt.quarter\nconcat_data['visit_date'] = concat_data['visit_date'].dt.date\n\n# \uc8fc\ub9d0 \ub370\uc774\ud130 \ucd94\uac00 \nconcat_data['weekend_flg'] = ((concat_data['visit_day_of_week']>4)).astype(int)\n\n# \uc77c\ubcf8 \ud734\uc77c\uc758 \ud2b9\uc131(\ud574\ud53c\uba3c\ub370\uc774)\uc0c1 \ub0a0\uc9dc\uac00 \ud574\ub2f9 \uc6d4 \uba87\uc9f8\uc8fc\uc778\uc9c0\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4\nconcat_data[\"visit_week_of_month\"] = concat_data[\"visit_date\"].apply(str).apply(get_week_of_month)\n\n# \uc694\uc77c\uc744 \uc6d0\ud56b\uc778\ucf54\ub529\nconcat_data = pd.get_dummies(concat_data, columns = ['day_of_week'], prefix=\"\", prefix_sep='')\n\n# \uc8fc\ub9d0\/\uacf5\ud734\uc77c \uad00\uacc4 \uc5c6\uc774 \uc26c\ub294 \ub0a0\uc5d0 \ub300\ud55c \uceec\ub7fc \ucd94\uac00\nconcat_data['off_day_flg'] = ((concat_data['weekend_flg']==1) | (concat_data['holiday_flg']==1)).astype(int)\n\n# \ub2e4\uc74c\ub0a0\uc774 \ud734\uc77c\uc778\uc9c0 \ud310\ub2e8\ud560 \uc218 \uc788\ub294 \uceec\ub7fc \ucd94\uac00\nconcat_data['next_day_is_off'] = concat_data['off_day_flg'].shift(-1,fill_value=0).astype(int)\n\n# \uace8\ub4e0\uc704\ud06c \ud50c\ub798\uadf8 \ucd94\uac00\n# 2016 \uace8\ub4e0\uc704\ud06c\ub294 4\/29~5\/5\uc77c\n# 2017 \uace8\ub4e0\uc704\ud06c\ub294 4\/29~5\/5\uc77c\nconcat_data['golden_week_flg'] = ( \\\n                                  ((concat_data['visit_date'].apply(str)>='2016-04-29') & (concat_data['visit_date'].apply(str)<='2016-05-05')) | \\\n                                  ((concat_data['visit_date'].apply(str)>='2017-04-29') & (concat_data['visit_date'].apply(str)<='2017-05-05'))\n                                 ).astype(int)\n\nconcat_data.head(1)","7cd8d521":"unique_stores = test_data['air_store_id'].unique()#extract unique stores id from test data\n\nstore_7days = pd.concat([pd.DataFrame({'air_store_id': unique_stores, 'dow': [i]*len(unique_stores)}) \n                    for i in range(7)], axis=0, ignore_index=True).reset_index(drop=True)\n# store_7days\n# air_store_id : \uac01 \uc0c1\uc810\uc758 \uace0\uc720\uac12\n# dow : \uc694\uc77c(0~6)\n\n# store_7days\nstore_sum = pd.DataFrame({'air_store_id': unique_stores})\n\n# mapping concat data dow to stores(test data) - min, mean, median, max, count \ntmp = concat_data.groupby(['air_store_id'], as_index=False)[\n    'visitors'].sum().rename(columns={'visitors':'total_visitors'})\nstore_7days = pd.merge(store_7days, tmp, how='left', on=['air_store_id']) \ntmp = concat_data.groupby(['air_store_id','dow'], as_index=False)[\n    'visitors'].mean().rename(columns={'visitors':'mean_visitors'})\nstore_7days = pd.merge(store_7days, tmp, how='left', on=['air_store_id','dow'])\ntmp = concat_data.groupby(['air_store_id','dow'], as_index=False)[\n    'visitors'].median().rename(columns={'visitors':'median_visitors'})\nstore_7days = pd.merge(store_7days, tmp, how='left', on=['air_store_id','dow'])\ntmp = concat_data.groupby(['air_store_id','dow'], as_index=False)[\n    'visitors'].max().rename(columns={'visitors':'max_visitors'})\nstore_7days = pd.merge(store_7days, tmp, how='left', on=['air_store_id','dow'])\ntmp = concat_data.groupby(['air_store_id','dow'], as_index=False)[\n    'visitors'].count().rename(columns={'visitors':'count_observations'})\nstore_7days = pd.merge(store_7days, tmp, how='left', on=['air_store_id','dow']) \n\n# store_7days\n# concat_data\nconcat_data = pd.merge(concat_data, store_7days, how='left', on=['air_store_id','dow'])\n\nconcat_data[\"total_visitors\"] = concat_data[\"total_visitors\"].fillna(0)\nconcat_data[\"mean_visitors\"] = concat_data[\"mean_visitors\"].fillna(0)\nconcat_data[\"median_visitors\"] = concat_data[\"median_visitors\"].fillna(0)\nconcat_data[\"max_visitors\"] = concat_data[\"max_visitors\"].fillna(0)\nconcat_data[\"count_observations\"] = concat_data[\"count_observations\"].fillna(0)","af32f3b6":"#calculate qoq(QoQ\ub294 Quarter on Quarter,  \uc9c1\uc804 \ubd84\uae30 \ub300\ube44 \uc99d\uac10\uc728)\nqoq= concat_data.groupby(['air_store_id','year','quarter'])['visitors'].sum()\nqoq=qoq.unstack(0)\nqoq=pd.DataFrame(qoq.to_records())\nqoq=qoq.transpose()\nqoq.drop(['year','quarter'],inplace=True)\nqoq['2016Q2']=qoq[1]\/qoq[0]*100\nqoq['2016Q3']=qoq[2]\/qoq[1]*100\nqoq['2016Q4']=qoq[3]\/qoq[2]*100\nqoq['2017Q1']=qoq[4]\/qoq[3]*100\nlst=['2016Q2','2016Q3','2016Q4','2017Q1']\nqoq=qoq[lst]\nqoq['qoq_count']=qoq.apply(lambda x: x.count(), axis=1) \nqoq['qoq_growth']=qoq.apply(lambda x: x[x>100].count(), axis=1)\nqoq['qoq_growth_pct'] = round(qoq['qoq_growth'] \/qoq['qoq_count'],2)\nqoq.index.names=['air_store_id']\nqoq.reset_index(inplace=True)\nqoq = qoq.fillna(0) #change to one for algo training\n\nconcat_data = pd.merge(concat_data, qoq, how='left', on='air_store_id')","f27568ad":"# \uae08\/\ud1a0\uc694\uc77c\uc778\uc9c0? (EDA \ucc38\uace0)\nconcat_data['pre_weekend_flg'] = ((concat_data['visit_day_of_week']>3) & (concat_data['visit_day_of_week']<6)).astype(int)\n\n# \ud734\uc77c\uc758 \uc804 \ub0a0\uc778\uc9c0? (EDA \ucc38\uace0)\nconcat_data['off_day_flg'] = ((concat_data['weekend_flg']==1) | (concat_data['holiday_flg']==1)).astype(int)\nconcat_data['next_day_is_off_day'] = concat_data['off_day_flg'].shift(-1,fill_value=0).astype(int)\n\n# \ub2e4\uc74c \ub0a0\uc774 \ud3c9\uc77c\uc778 \ud734\uc77c\uc778\uc9c0 (EDA \ucc38\uace0)\nconcat_data[\"today_off_next_day_working\"] =  ((concat_data['off_day_flg']==1) | (concat_data['next_day_is_off_day']==0)).astype(int)\n","c60277fd":"# air_genre_name \ucc98\ub9ac\n\n# \uc6d0\ud56b\uc778\ucf54\ub529\nconcat_data = pd.get_dummies(concat_data, columns = ['air_genre_name'], prefix=\"\", prefix_sep='')\n\n# Label Encoding\n# le = LabelEncoder()\n# concat_data[\"en_air_genre_name\"] = le.fit_transform(concat_data['air_genre_name'])\n# concat_data = concat_data.drop(\"air_genre_name\", axis=1)\n# concat_data.head()","b742cf6c":"# air_area_name \ucc98\ub9ac\n\n\nconcat_data[\"area_1\"] = concat_data[\"air_area_name\"].str.split(\" \").str[0]\nconcat_data[\"area_2\"] = concat_data[\"air_area_name\"].str.split(\" \").str[1]\nconcat_data[\"area_3\"] = concat_data[\"air_area_name\"].str.split(\" \").str[2]\n\n\nconcat_data = pd.get_dummies(concat_data, columns = ['area_1'], prefix=\"\", prefix_sep='')\nconcat_data = pd.get_dummies(concat_data, columns = ['area_2'], prefix=\"\", prefix_sep='')\nconcat_data = pd.get_dummies(concat_data, columns = ['area_3'], prefix=\"\", prefix_sep='')\n\n# le1 = LabelEncoder()\n# concat_data[\"en_area_1\"] = le1.fit_transform(concat_data['area_1'])\n# le2 = LabelEncoder()\n# concat_data[\"en_area_2\"] = le2.fit_transform(concat_data['area_2'])\n# le3 = LabelEncoder()\n# concat_data[\"en_area_3\"] = le3.fit_transform(concat_data['area_3'])\n\nconcat_data.head()","5e785ddc":"concat_data.info()","126c7f8b":"# \ub370\uc774\ud130 \ud655\uc778\nconcat_data.describe().transpose()","6a6ea50d":"# visitors\uc758 \ubd84\ud3ec\uac00 \uc57d\uac04 \uc774\uc0c1\ud574 \ubcf4\uc5ec\uc11c \ub370\uc774\ud130\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4\nair_visit.sort_values(by=\"visitors\", ascending=False).head()","e7c7276a":"# air_reserve_visitors\uc758 \ubd84\ud3ec\ub3c4 \uc57d\uac04 \uc774\uc0c1\ud574 \ubcf4\uc5ec\uc11c \ub370\uc774\ud130\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4\nconcat_data.sort_values(\"air_reserve_visitors\").tail()","d4dfeed2":"query = \"air_store_id=='air_e7fbee4e3cfe65c5' and visit_datetime.str.contains('2017-02-05')\"\nair_reserve.query(query, engine=\"python\")","ea19daf3":"sns.kdeplot(concat_data[\"air_reserve_visitors\"])","cba3371c":"# \uc815\uaddc\ud654\n# concat_data[\"norm_air_reserve_visitors\"] = np.log1p(concat_data[\"air_reserve_visitors\"].values)\n# sns.kdeplot(concat_data[\"norm_air_reserve_visitors\"])","52b8e99f":"# hpg_reserve_visitors \ub370\uc774\ud130\ub3c4 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4\nconcat_data.sort_values(\"hpg_reserve_visitors\").tail()","7d75c3c4":"query = \"hpg_store_id=='hpg_08def9f764fcca4c' and visit_datetime.str.contains('2016-12-17')\"\nhpg_reserve.query(query, engine=\"python\")","d824be49":"# \uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\ub9cc \ubd84\ub9ac\ud574\uc90d\ub2c8\ub2e4\nwithout_columns = [\"air_store_id\", \"visit_date\", \"day_of_week\", \"visit_day_of_week\", \"air_area_name\", \"hpg_store_id\", \"area_1\", \"area_2\", \"area_3\"]\nselected_columns = [x for x in concat_data.columns if x not in without_columns]\n# list(concat_data.columns)# - without_columns\ntrain_data = concat_data[selected_columns]\n# train_data = concat_data[]\n# train_data.head()","087db270":"train_data.info()","8444813f":"# train, val, test \ub370\uc774\ud130\ub97c \ub098\ub215\ub2c8\ub2e4\nx_train = train_data[:air_visit_count]\nx_test = train_data[air_visit_count:]\n\ny_train = x_train[\"visitors\"]\nx_train = x_train.drop(\"visitors\", axis=1)\nx_test = x_test.drop(\"visitors\", axis=1)\n\n# validation \ub370\uc774\ud130\uac00 \ud544\uc694\ud560 \uacbd\uc6b0 train_test_split\uc744 \uc0ac\uc6a9\ud574 \ub098\ub220\uc90d\ub2c8\ub2e4\n# x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, shuffle=False, test_size = 0.2)\n\nprint(x_train.head(2))\nprint(\"==============================\")\nprint(y_train.head(2))\nprint(\"==============================\")\n# print(x_val.head(2))\n# print(\"==============================\")\n# print(y_val.head(2))\n# print(\"==============================\")\nprint(x_test.head(2))","fad89b75":"x_test.head()","598e9b3a":"# log\ub97c \uc50c\uc6cc visitors\uc758 \ubd84\ud3ec\ub97c \uc815\uaddc\ud654\n# \uc774\ud6c4 \uc608\uce21\ud55c \uacb0\uacfc\uc5d0 np.expm1()\ub97c \uc801\uc6a9\ud574 \uc8fc\uc5b4\uc57c \ud568 \ny_train = np.log1p(y_train.values)\n\nsns.histplot(y_train, kde=True)","eb039b9f":"from xgboost import XGBRegressor # XGBoost Regressor \ubaa8\ub378\n\nmodel = XGBRegressor(random_state=110, verbosity=0, nthread=23, n_estimators=980, max_depth=4)\nmodel.fit(x_train, y_train)","046512ab":"pred = model.predict(x_test)\nprint(len(pred))\n\n# train_target\uc5d0 log1p\ub97c \uc50c\uc6cc\uc11c \uc815\uaddc\ud654\ub97c \ud574\uc8fc\uc5c8\uae30 \ub54c\ubb38\uc5d0 expm1\ub85c \uac12\uc744 \ubcf5\uad6c\ud574\uc90d\ub2c8\ub2e4\npred = np.expm1(pred)","547ad267":"submission['visitors'] = pred\nsubmission.to_csv('sampleSubmission.csv', index=False)","a97193f3":"first_sub = submission.copy()\nfirst_sub['tmp'] = np.nan\n         \nfirst_sub['air_store_id'] = first_sub.id.map(lambda x: '_'.join(x.split('_')[:-1]))\nfirst_sub['date'] = first_sub.id.map(lambda x: x.split('_')[2])\nfirst_sub['date'] =first_sub['date'].astype('datetime64[ns]')\n\nfirst_sub.loc[first_sub.date=='2017-5-3','tmp'] = np.sqrt(first_sub.loc[first_sub.date=='2017-4-29','visitors'].values*first_sub.loc[first_sub.date=='2017-5-13','visitors'].values)\nfirst_sub.loc[first_sub.date=='2017-5-4','tmp'] = np.sqrt(first_sub.loc[first_sub.date=='2017-4-29','visitors'].values*first_sub.loc[first_sub.date=='2017-5-13','visitors'].values)\nfirst_sub.loc[first_sub.date=='2017-5-5','tmp'] = np.sqrt(first_sub.loc[first_sub.date=='2017-4-29','visitors'].values*first_sub.loc[first_sub.date=='2017-5-13','visitors'].values)\nfirst_sub.loc[first_sub.date=='2017-5-2','tmp'] = np.sqrt(first_sub.loc[first_sub.date=='2017-4-28','visitors'].values*first_sub.loc[first_sub.date=='2017-5-12','visitors'].values)\n\nfirst_sub.loc[first_sub.date=='2017-5-3','visitors'] = first_sub.loc[first_sub.date=='2017-5-3','tmp']\nfirst_sub.loc[first_sub.date=='2017-5-4','visitors'] = first_sub.loc[first_sub.date=='2017-5-4','tmp']\nfirst_sub.loc[first_sub.date=='2017-5-5','visitors'] = first_sub.loc[first_sub.date=='2017-5-5','tmp']\nfirst_sub.loc[first_sub.date=='2017-5-2','visitors'] = first_sub.loc[first_sub.date=='2017-5-2','tmp']\n\nfirst_sub[['id','visitors']]\n# first_sub[['id','visitors']].to_csv('second_sampleSubmission.csv', float_format='%.5f', index=None)","30c3ccc5":"## Merge tables","f3cc1c6e":"## \uc774\uc0c1\uce58 \ud655\uc778","ca6ad087":"### merge air_store_info","5b969b89":"### XGBRegressor","84eb01ed":"* air_reserve_visitors\uc640 hpg_reserve_visitors\uac00 \uac19\uc740 \ub0a0\uc774 \uaf64 \ub9ce\uc740 \uc810\uc774 \uc774\uc0c1\ud558\uc9c0\ub9cc \ub2e4\ub978 \ub0a0\uc774 2\ubc30 \uc774\uc0c1\uc774\uae30 \ub54c\ubb38\uc5d0 \uc77c\ub2e8 \ub118\uc5b4\uac04\ub2e4","edf19f71":"* air_store_id, visit_date, day_of_week, air_genre_name, air_area_name \uceec\ub7fc\uc740 \uc5f0\uc0b0\uc744 \ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130 \ud615\ud0dc\ub85c \ub418\uc5b4\uc788\ub2e4","a799eb6c":"### merge holidays","b4a2fe41":"* \uc2e4\uc81c\ub85c \ub9ce\uc740 \uc778\uc6d0\uc774 \ubc29\ubb38\ud588\ub358 \uac83 \uac19\uc2b5\ub2c8\ub2e4.. 2016\ub144 4\uc6d4\uc5d0 \uc608\uc57d\ud55c \uc0ac\ub78c\ub3c4 \uc788\ub294\uac78 \ubcf4\ub2c8 \uc778\uae30\uc788\ub294 \uc2dd\ub2f9\uc778\uac00\ubd05\ub2c8\ub2e4\n* \ub370\uc774\ud130 \uc911 \ub300\ubd80\ubd84\uc774 0\uc778 \uacbd\uc6b0 nomalization\uc744 \uc5b4\ub5bb\uac8c \ud558\ub294\uac8c \uc88b\uc744\uae4c?","40b89a27":"* air_stor_id\uac00 air_e7fbee4e3cfe65c5 2017\uc6d4 02\uc6d4 05\uc77c\uc5d0 \uc608\uc57d\uc790\uac00 \ub108\ubb34 \ub9ce\uc544\ubcf4\uc785\ub2c8\ub2e4. \uc774\uc0c1\uce58\uc778\uc9c0 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4","0198d246":"* \ud55c \uc0c1\uc810\uc758 \ubc29\ubb38\uc790\ub9cc \ud2b9\ubcc4\ud788 \ub192\ub2e4(\uc774\uc0c1\uce58)\uae30 \ubcf4\ub2e4\ub294 \ubc29\ubb38\uc790\uac00 \ub9ce\uc740 \ub808\uc2a4\ud1a0\ub791\uc774 \uba87 \uacf3 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4   \n    visitors\ub294 \ud0c0\uac9f \ub370\uc774\ud130\uc774\uae30 \ub54c\ubb38\uc5d0 train \/ test \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud55c \ud6c4 \uc815\uaddc\ud654\uac00 \ud544\uc694\ud560 \uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4.","1433c7b7":"### merge reservation","7ffffe50":"## Table of Contents\n[Overvew](#Overview)   \n[Merge tables](#Merge_tables)   \n[\uacb0\uce21\uce58 \ucc98\ub9ac](#\uacb0\uce21\uce58_\ucc98\ub9ac)   \n[\ub370\uc774\ud130 \uc804\ucc98\ub9ac](#\ub370\uc774\ud130_\uc804\ucc98\ub9ac)   \n[\ubaa8\ub378 \uc124\uacc4](#\ubaa8\ub378_\uc124\uacc4)   \n[References](#References)","e81f3e5a":"* log\ub97c \uc50c\uc6cc\ub3c4 \ud3b8\ucc28\uac00 \ub108\ubb34 \uc2ec\ud558\ub2e4","cf30e67d":"## \uacb0\uce21\uce58 \ucc98\ub9ac","0c1eba84":"* \uc5ed\uc2dc \ub2e8\uccb4 \uc190\ub2d8\uc774 \ub9ce\uc558\ub358 \ub0a0\ub85c \uc815\uc0c1\uc801\uc778 \ud14c\uc774\ud130\uc778 \uac83 \ucc98\ub7fc \ubcf4\uc785\ub2c8\ub2e4","2d0a7641":"## References\n* Aiffel Exploration 6 : \ub098\uc758 \uccab \ubc88\uc9f8 \uce90\uae00 \uacbd\uc9c4\ub300\ud68c, \ubb34\uc791\uc815 \ub530\ub77c\ud574\ubcf4\uae30\n* [Kaggle : Recruit Restaurant Visitor Forecasting](https:\/\/www.kaggle.com\/c\/recruit-restaurant-visitor-forecasting)\n* [Kaggle Noetbook : Be my guest - Recruit Restaurant EDA](https:\/\/www.kaggle.com\/headsortails\/be-my-guest-recruit-restaurant-eda)\n* [Kaggle Notebook : holiday trick](https:\/\/www.kaggle.com\/h4211819\/holiday-trick)","751f1a3a":"## Overview\n\uc774 \ub300\ud68c\uc5d0\uc11c\ub294 \uc608\uc57d \ubc0f \ubc29\ubb38 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec **\ubbf8\ub798 \ub0a0\uc9dc\uc758 \ub808\uc2a4\ud1a0\ub791 \ucd1d \ubc29\ubb38\uc790 \uc218\ub97c \uc608\uce21**\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\ud3c9\uac00\uc5d0\ub294 **RMSLE**\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4\n\\\\[ \\sqrt{ \\frac{1}{n} \\sum_{i=1}^{n}{ (\\log( p_i + 1) - \\log(a_i + 1))^2} }\\\\]\n\n\\\\(n\\\\) is \uad00\uce21\ub41c \ucd1d \uc22b\uc790   \n\\\\(p_i\\\\) is \uc608\uc0c1\ud55c \ubc29\ubb38\uc790 \uc218   \n\\\\(a_i\\\\) is \uc2e4\uc81c \ubc29\ubb38\uc790 \uc218   \n\\\\(\\log\ud835\udc65\\\\) is \\\\(x\\\\)\uc758 \uc790\uc5f0\ub85c\uadf8\n\n\n**\uc81c\uacf5\ub418\ub294 \ub370\uc774\ud130\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.**\n* Hot Pepper Gourmet (hpg): \uc0ac\uc6a9\uc790\ub4e4\uc774 \ub808\uc2a4\ud1a0\ub791\uc744 \uac80\uc0c9\ud558\uace0 \uc628\ub77c\uc778 \uc608\uc57d\ud560 \uc218 \uc788\ub294 \uc11c\ube44\uc2a4\n* AirREGI \/ Restaurant Board (air): \ub9e4\uc7a5\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uc608\uc57d\uad00\ub9ac\uc2dc\uc2a4\ud15c (POS)\n* \ud6c8\ub828 \ub370\uc774\ud130\ub294 2016\ub144~2017\ub144 4\uc6d4\uae4c\uc9c0, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub294 2017\ub144 4\uc6d4\uacfc 5\uc6d4 \ub9c8\uc9c0\ub9c9\uc8fc\uae4c\uc9c0 \uc81c\uacf5\ub429\ub2c8\ub2e4\n* \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\ub294 \uace8\ub4e0\uc704\ud06c \uae30\uac04\uc774 \ud3ec\ud568\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.\n* \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc138\ud2b8\uc5d0\ub294 \ub808\uc2a4\ud1a0\ub791\uc774 \ubb38\uc744 \ub2eb\uace0 \ubc29\ubb38\uc790\uac00 \uc5c6\ub294 \ub0a0\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc2a4\ucf54\uc5b4\ub9c1 \uc2dc \ubb34\uc2dc\ub429\ub2c8\ub2e4. \ud6c8\ub828 \uc138\ud2b8\ub294 \ub808\uc2a4\ud1a0\ub791\uc774 \ubb38\uc744 \ub2eb\ub294 \ub0a0\uc744 \uc0dd\ub7b5\ud569\ub2c8\ub2e4.\n\n**air_visit_data.csv**: air \ub808\uc2a4\ud1a0\ub791\uc758 \uacfc\uac70 \ubc29\ubb38 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \ubcf8\uc9c8\uc801\uc73c\ub85c \uc8fc\uc694 \ud6c8\ub828 \ub370\uc774\ud130 \uc138\ud2b8\uc785\ub2c8\ub2e4.  \n**air_reserve.csv** \/ **hpg_reserve.csv**: air \/ hpg \uc2dc\uc2a4\ud15c\uc744 \ud1b5\ud55c \uc608\uc57d.  \n**air_store_info.csv** \/ **hpg_store_info.csv**: \uc7a5\ub974 \ubc0f \uc704\uce58\ub97c \ud3ec\ud568\ud55c air \/ hpg \ub808\uc2a4\ud1a0\ub791\uc5d0 \ub300\ud55c \uc138\ubd80 \uc815\ubcf4\uc785\ub2c8\ub2e4.  \n**store_id_relation.csv**: air\uc640 hpg id\ub97c \uc5f0\uacb0\ud569\ub2c8\ub2e4.\n**date_info.csv**: \uae30\ubcf8\uc801\uc73c\ub85c \uc77c\ubcf8 \uacf5\ud734\uc77c\uc5d0 \ud50c\ub798\uadf8\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4.  \n**sample_submission.csv**: \ud14c\uc2a4\ud2b8 \uc138\ud2b8 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. id\ub294 air id\uc640 \ubc29\ubb38 \ub0a0\uc9dc\ub97c \uacb0\ud569\ud558\uc5ec \uad6c\uc131\ub429\ub2c8\ub2e4.\n\n![Untitled.png](attachment:Untitled.png)","2186f343":"# Restaurant Visitor Forecasting","870c5262":"* air_store\uc640 \ub9e4\uce6d\uc774 \ub418\ub294 hpg_store\uc758 \uac2f\uc218\uac00 150\uac1c\ubc16\uc5d0 \ub418\uc9c0 \uc54a\ub294\ub2e4. \ub098\uc911\uc5d0 \uacb0\uce21\uce58 \ucc98\ub9ac\uac00 \ud544\uc694\ud560 \ub4ef","42a7f38f":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","f4c81729":"### train \/ test \ub370\uc774\ud130 \ubd84\ub9ac","76589980":"## [holiday trick](https:\/\/www.kaggle.com\/h4211819\/holiday-trick)\n\n1.Through EDA, I found a lot restaurants have a simliar vistists between holiday and Saturday.\n\n2.because golden week' Saturday maybe affected by holiday_flag and abnormal peak reservation feature in golden week in model. So I prefer to use last week and next week' Saturday to replace the holiday rather than golden week' Saturday.\n\n3.Because the metric is RMSLE, so I think it's better to do geometric mean than arithmetical average. Maybe np.expm1((np.log1p(last_week)+np.log1p(next_week))\/2) is more reasonable for the metric.\n\nit's a bet.Maybe we can find better solution. I should have add the trick in the lgb model,but I find the trick two day before the competion end and have no time to do it.","2b3e21cf":"## \ubaa8\ub378 \uc124\uacc4"}}