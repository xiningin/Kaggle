{"cell_type":{"49be0591":"code","2449e482":"code","51a8af11":"code","3978db08":"code","632bb06f":"code","41f9f22e":"code","d48491cd":"code","940147af":"code","6eb28064":"code","a57c6ff6":"code","b1c3c82f":"code","efeb00a7":"code","f0f24bd1":"code","785d0bbc":"code","a5484941":"code","f3cd584c":"code","bd7a5063":"code","dca80343":"code","d63a0186":"code","88c164bb":"code","fecde08b":"code","32a44178":"code","e52de29b":"code","08ab39d8":"code","e83eb66b":"code","ab1eab2a":"code","96d021eb":"code","90654462":"code","b8150aa9":"code","021b1048":"code","c86cc19e":"code","60862cb6":"code","7ac61dfa":"code","535d2474":"code","8a93540f":"code","fdd66a98":"code","239af417":"code","262adc2b":"code","d6d3c63e":"code","f0e9e669":"code","04e79bf0":"code","f507c6fb":"code","f58147a5":"code","b63e11bf":"code","343bcadc":"code","37687b3d":"code","fcf04c3c":"code","781ec75f":"code","483f5f57":"markdown","33b4c912":"markdown","6da8eda4":"markdown","9eedd3f1":"markdown","ac87955a":"markdown","9967cdfa":"markdown","ff82a45f":"markdown","f7255e1e":"markdown","f1482d70":"markdown","fcdd4317":"markdown","a496d2d9":"markdown","361b39a7":"markdown"},"source":{"49be0591":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\nfrom dataclasses import dataclass\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\nfrom tqdm import tqdm\nimport librosa\n\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nimport umap\n\nfrom sklearn.neighbors import NearestNeighbors","2449e482":"# Path\u306e\u60c5\u5831\u3092dataclass\u3067\u4fdd\u5b58\u3057\u3066\u304a\u304f\n@dataclass(frozen=True)\nclass DataPath:\n    input_dir: str = '..\/input\/hah-data-science-challenge'\n    train_wav_dir: str = f'{input_dir}\/train\/train'\n    test_wav_dir: str = f'{input_dir}\/test\/test'\n    train_csv: str = f'{input_dir}\/train.csv'\n    test_csv: str = f'{input_dir}\/test.csv'\n\ndata_path = DataPath()","51a8af11":"df_train = pd.read_csv(data_path.train_csv)\ndf_test = pd.read_csv(data_path.test_csv)","3978db08":"df_train['file_path'] = data_path.train_wav_dir +'\/' +df_train['\u30d5\u30a1\u30a4\u30eb']\ndf_test['file_path'] = data_path.test_wav_dir +'\/'+ df_test['\u30d5\u30a1\u30a4\u30eb']","632bb06f":"#df = pd.concat([df_train,df_test],axis=0)\n#df = df.reset_index(drop=True)\n\n# \u5225\u306enotebook\u3067\u4f5c\u6210\u3057\u305f\u6253\u97f3\u5206\u89e3\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndf = pd.read_csv('..\/input\/hah-dsc-exp004\/meta_decomp.csv')","41f9f22e":"# \u540d\u5bc4\u305b\nrecording_map = {\n    'PC\u5185\u81d3': 'PC\u5185\u8535', \n    'PC\u5185\u8535': 'PC\u5185\u8535', \n    'USB1': 'USB1', \n    'USB2': 'USB2', \n    'USB3': 'USB3', \n    'USB4': 'USB4', \n    '\u30b9\u30de\u30db': '\u30b9\u30de\u30db', \n    '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0': '\u30b9\u30de\u30db', \n    '\u5185\u8535\u30de\u30a4\u30af': 'PC\u5185\u8535'\n}\n\ndistance_map = {\n    '10cm': '10cm',\n    '10\u339d': '10cm',\n    '1M': '1m',\n    '20cm': '20cm',\n    '20\u339d': '20cm',\n    '2M': '2m',\n    '2m': '2m',\n    '30cm': '30cm',\n    '30cn': '30cm',\n    '30\u339d': '30cm',\n    '3m': '3m',\n    '40cm': '40cm',\n    '40\u339d': '40cm',\n    '50cm': '50cm',\n    '50\u339d': '50cm',\n    '5cm': '5cm',\n    '8cm': '8cm',\n    '\uff11\uff2d': '1m'\n}\n\ndf['\u9332\u97f3\u65b9\u6cd5'] = df['\u9332\u97f3\u65b9\u6cd5'].replace(recording_map)\ndf['\u30de\u30a4\u30af\u8ddd\u96e2'] = df['\u30de\u30a4\u30af\u8ddd\u96e2'].replace(distance_map)\n#df['Target'] = df['Target'].fillna('\u30e9\u30d9\u30eb\u306a\u3057').replace({0.0:'\u6b63\u5e38', 1.0:'\u7570\u5e38'})","d48491cd":"df['\u9332\u97f3\u65b9\u6cd5'].value_counts()","940147af":"df['\u30de\u30a4\u30af\u8ddd\u96e2'].value_counts()","6eb28064":"def train_test(s):\n    if 'train' in s:\n        y = 'train'\n    else:\n        y= 'test'\n        \n    return y\n\ndf['train_test'] = df['\u30d5\u30a1\u30a4\u30eb'].apply(train_test)","a57c6ff6":"# \u30b0\u30e9\u30d5\u306e\u8272\u3092\u7d20\u6750\u306b\u3088\u3063\u3066\u5909\u3048\u305f\u3044\u306e\u3067\u4f5c\u3063\u3066\u304a\u304f\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)","b1c3c82f":"from typing import List\n\n# \u30d5\u30fc\u30ea\u30a8\u5909\u63db\u7528\u306ehepler\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\nclass FourieTransformHelper:\n    def __init__(self,  \n                 df,\n                 input_dir: str=None):\n        #if isinstance(file_names, list):\n        #    self.file_names = file_names\n        #else:\n        #    raise TypeError(f'file_names type is {type(file_names)} not list!')\n        self.input_dir = input_dir\n        self.spectra, self.frequencies = [], []\n        \n    def _get_spectrum(self, signal, sample_rate):\n        # \u53c2\u8003 https:\/\/medium.com\/analytics-vidhya\/simplifying-audio-data-fft-stft-mfcc-for-machine-learning-and-deep-learning-443a2f962e0e\n        fft = np.fft.fft(signal)\n        spectrum = np.abs(fft)\n        f = np.linspace(0, sample_rate, int(len(spectrum)\/2))\n        spectrum = spectrum[:int(len(spectrum)\/2)]\n        frequency = f[:int(len(spectrum)\/2)]\n        return spectrum, frequency\n    \n    def _get_filename(self, file_name):\n            if self.input_dir:\n                return f'{self.input_dir}\/{file_name}'\n            else:\n                return file_name\n    \n    def get_spectra(self):\n        for i in tqdm(range(len(df))):\n            filepath = df.loc[i, 'filepath']\n            st_time = df.loc[i, 'st_time']\n    \n            y, sr = librosa.load(filepath, offset=st_time, duration=0.2)\n            #audio, sample_rate = librosa.load(file_path)\n            # \u9069\u5f53\u306a\u9577\u3055\u306b\u5207\u308a\u53d6\u308b\u3002\u30ad\u30ea\u306e\u3044\u3044\u6570\u5b57\u306b\u3057\u305f\u3002\n            audio = y[:40000]\n            spectrum, frequency = self._get_spectrum(audio, sr)\n            self.spectra.append(spectrum)\n            self.frequencies.append(frequency)                ","efeb00a7":"#file_names = df['file_path'].tolist()","f0f24bd1":"helper = FourieTransformHelper(df)\nhelper.get_spectra()","785d0bbc":"# \u30d4\u30fc\u30af\u5024\u306f\u97f3\u306e\u5927\u304d\u3055\uff08\u6e2c\u5b9a\u6a5f\u307e\u3067\u306e\u8ddd\u96e2\u306e\u307f\u306b\u95a2\u4fc2\u3059\u308b\u3068\u3057\u3066\uff09\n# \u30b9\u30da\u30af\u30c8\u30eb\u3092\u6a19\u6e96\u5316\u3059\u308b\u3002\nspectra = minmax_scale(np.array(helper.spectra), axis=1)","a5484941":"def visualize_embed(embed: np.array, color: List[str], title: str) -> None:\n    fig = px.scatter(x=embed[:, 0], y=embed[:, 1], color=color, title=title)\n    fig.show()","f3cd584c":"umap_x = np.zeros(len(df))\numap_y = np.zeros(len(df))\n\ndf['umap_x'] = umap_x\ndf['umap_y'] = umap_y","bd7a5063":"threshold =0.5","dca80343":"sub = pd.read_csv('..\/input\/best-lb087586\/submission - 2021-10-14T212615.279.csv')","d63a0186":"sub['Target'] = minmax_scale(sub['Target'])","88c164bb":"sub['Target'].hist()","fecde08b":"sub['Target_KNN'] = np.nan","32a44178":"# \u6b63\u5e38\u306b\u306a\u3044\u6761\u4ef6\u306eid\u3092\u62bd\u51fa\ndf['\u6761\u4ef6'] = df['\u306d\u3058'] + '_' + df['\u30d7\u30ec\u30fc\u30c8'] + '_' + df['\u9332\u97f3\u65b9\u6cd5'] + '_' + df['\u30de\u30a4\u30af\u8ddd\u96e2']\ndf.loc[df['Target']==0, '\u6b63\u5e38'] = 1\ndf['\u6b63\u5e38'] = df['\u6b63\u5e38'].fillna(0)\nset_norm = set(df.loc[df['\u6b63\u5e38']==1, '\u6761\u4ef6'].unique().tolist())\nset_other = set(df.loc[df['\u6b63\u5e38']==0, '\u6761\u4ef6'].unique().tolist())\nother_only = list(set_other - set_norm)\nother_only","e52de29b":"other_only_id = df.loc[df['\u6761\u4ef6'].isin(other_only), 'ID'].tolist()","08ab39d8":"sub.loc[sub['ID'].isin(other_only_id), 'Target']","e83eb66b":"# \u6b63\u5e38\u306b\u306a\u3044\u6761\u4ef6\u306eid\u306b\u30e9\u30d9\u30eb\u3092\u632f\u308b\u3002\nsub.loc[sub['ID'].isin(other_only_id), 'Target_KNN'] = 0.5","ab1eab2a":"sub_anomaly = list(sub.loc[sub['Target_KNN'] == 0.5,'ID'].values)","96d021eb":"df.loc[df['ID'].isin(sub_anomaly),'Target'] = 0.5","90654462":"# \u30b0\u30e9\u30d5\u306e\u8272\u3092\u7d20\u6750\u306b\u3088\u3063\u3066\u5909\u3048\u305f\u3044\u306e\u3067\u4f5c\u3063\u3066\u304a\u304f\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)","b8150aa9":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='\u30b9\u30de\u30db')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state = 42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')\n\ndf.loc[idx,'umap_x'] = umap_embed[:,0]\ndf.loc[idx,'umap_y'] = umap_embed[:,1]\n \nKNN = 1\nmodel = NearestNeighbors(n_neighbors=KNN)\nmodel.fit(df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)][['umap_x','umap_y']])\ndistances, indices = model.kneighbors(df.iloc[idx].loc[df['Target']==0.5][['umap_x','umap_y']])\n\ndf_tmp = df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)].reset_index(drop = True)\ndf_tmp_nan = df.iloc[idx].loc[df['Target']==0.5]\n\ndf_tmp_nan_idx = df_tmp_nan.index\n\nfor i in range(len(distances)):\n    if distances[i] <= threshold:\n        df_tmp_nan['Target'].iloc[i] = df_tmp['Target'].iloc[indices[i]]  \n\ndf.loc[df_tmp_nan_idx,'Target'] = df_tmp_nan['Target'].values","021b1048":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='\u30b9\u30de\u30db')].index\nspectra_subgroup = spectra[idx]\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state = 42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","c86cc19e":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB1')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state = 42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')\n\ndf.loc[idx,'umap_x'] = umap_embed[:,0]\ndf.loc[idx,'umap_y'] = umap_embed[:,1]\n \nKNN = 1\nmodel = NearestNeighbors(n_neighbors=KNN)\nmodel.fit(df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)][['umap_x','umap_y']])\ndistances, indices = model.kneighbors(df.iloc[idx].loc[df['Target']==0.5][['umap_x','umap_y']])\n\ndf_tmp = df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)].reset_index(drop = True)\ndf_tmp_nan = df.iloc[idx].loc[df['Target']==0.5]\n\ndf_tmp_nan_idx = df_tmp_nan.index\n\nfor i in range(len(distances)):\n    if distances[i] <= threshold:\n        df_tmp_nan['Target'].iloc[i] = df_tmp['Target'].iloc[indices[i]]  \n\ndf.loc[df_tmp_nan_idx,'Target'] = df_tmp_nan['Target'].values","60862cb6":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB1')].index\nspectra_subgroup = spectra[idx]\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state = 42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","7ac61dfa":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB4')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","535d2474":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='PC\u5185\u8535')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')\n\ndf.loc[idx,'umap_x'] = umap_embed[:,0]\ndf.loc[idx,'umap_y'] = umap_embed[:,1]\n \nKNN = 1\nmodel = NearestNeighbors(n_neighbors=KNN)\nmodel.fit(df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)][['umap_x','umap_y']])\ndistances, indices = model.kneighbors(df.iloc[idx].loc[df['Target']==0.5][['umap_x','umap_y']])\n\ndf_tmp = df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)].reset_index(drop = True)\ndf_tmp_nan = df.iloc[idx].loc[df['Target']==0.5]\n\ndf_tmp_nan_idx = df_tmp_nan.index\n\nfor i in range(len(distances)):\n    if distances[i] <= threshold:\n        df_tmp_nan['Target'].iloc[i] = df_tmp['Target'].iloc[indices[i]]  \n\ndf.loc[df_tmp_nan_idx,'Target'] = df_tmp_nan['Target'].values","8a93540f":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='PC\u5185\u8535')].index\nspectra_subgroup = spectra[idx]\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","fdd66a98":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB3')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","239af417":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5c0f')&(df['\u9332\u97f3\u65b9\u6cd5']=='\u30b9\u30de\u30db')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","262adc2b":"idx = df[(df['\u306d\u3058']=='\u5927')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5c0f')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB2')].index\nspectra_subgroup = spectra[idx]\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","d6d3c63e":"idx = df[(df['\u306d\u3058']=='\u5c0f')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='\u30b9\u30de\u30db')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","f0e9e669":"idx = df[(df['\u306d\u3058']=='\u5c0f')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB1')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')\n\ndf.loc[idx,'umap_x'] = umap_embed[:,0]\ndf.loc[idx,'umap_y'] = umap_embed[:,1]\n \nKNN = 1\nmodel = NearestNeighbors(n_neighbors=KNN)\nmodel.fit(df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)][['umap_x','umap_y']])\ndistances, indices = model.kneighbors(df.iloc[idx].loc[df['Target']==0.5][['umap_x','umap_y']])\n\ndf_tmp = df.iloc[idx][(df['Target'] ==1) | (df['Target']==0)].reset_index(drop = True)\ndf_tmp_nan = df.iloc[idx].loc[df['Target']==0.5]\n\ndf_tmp_nan_idx = df_tmp_nan.index\n\nfor i in range(len(distances)):\n    if distances[i] <= threshold:\n        df_tmp_nan['Target'].iloc[i] = df_tmp['Target'].iloc[indices[i]]  \n\ndf.loc[df_tmp_nan_idx,'Target'] = df_tmp_nan['Target'].values","04e79bf0":"idx = df[(df['\u306d\u3058']=='\u5c0f')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB1')].index\nspectra_subgroup = spectra[idx]\ndf['\u6761\u4ef6']=df['train_test'] + '_' + df['Target'].astype(str)\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","f507c6fb":"idx = df[(df['\u306d\u3058']=='\u5c0f')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='USB4')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","f58147a5":"idx = df[(df['\u306d\u3058']=='\u5c0f')&(df['\u30d7\u30ec\u30fc\u30c8']=='\u5927')&(df['\u9332\u97f3\u65b9\u6cd5']=='PC\u5185\u8535')].index\nspectra_subgroup = spectra[idx]\ncolor = df.loc[idx, '\u6761\u4ef6'].astype(str).to_list()\n\numap_embed = umap.UMAP(random_state=42).fit_transform(spectra_subgroup)\nvisualize_embed(umap_embed, color, 'UMAP')","b63e11bf":"df['Target'].to_csv('target_knn.csv',index=False)","343bcadc":"#post-processing\ndf_test_label_dup = df.loc[(df['filepath'].str.contains('test')) & (df['Target']==0.0) | (df['filepath'].str.contains('test')) & (df['Target']==1.0)]\ndf_test_label = df_test_label_dup[~df_test_label_dup.duplicated(subset='ID')]\ndf_test_label ","37687b3d":"sub.loc[sub['ID'].isin(df_test_label['ID']),'Target'] = df_test_label['Target'].values ","fcf04c3c":"sub.drop('Target_KNN',axis=1,inplace=True)\nsub.to_csv('submission_postprocessing_knn_label.csv',index=False)\nsub","781ec75f":"sub['Target'].hist()","483f5f57":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5c0f\u3000\u30b9\u30de\u30db","33b4c912":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000USB4\u3000","6da8eda4":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000\u30b9\u30de\u30db","9eedd3f1":"# \u306d\u3058\u5c0f\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000USB1\u3000","ac87955a":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000USB1\u3000","9967cdfa":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000PC\u5185\u8535\u3000","ff82a45f":"# \u306d\u3058\u5c0f\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000PC\u5185\u8535","f7255e1e":"# \u306d\u3058\u5c0f\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000\u30b9\u30de\u30db","f1482d70":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000USB3\u3000","fcdd4317":"# \u306d\u3058\u5c0f\u3000\u30d7\u30ec\u30fc\u30c8\u5927\u3000USB4\u3000","a496d2d9":"# \u306d\u3058\u5927\u3000\u30d7\u30ec\u30fc\u30c8\u5c0f\u3000USB2","361b39a7":"# \u8208\u5473\n<br>\n\u7551\u3055\u3093\u3068\u7af9\u539f\u3055\u3093\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3092\u3082\u3068\u306b\u3001\u30cd\u30b8\u3001\u30d7\u30ec\u30fc\u30c8\u3001\u9332\u97f3\u3001\u30de\u30a4\u30af\u8ddd\u96e2\u3054\u3068\u306b\u3001Target\u306e\u5206\u5e03\u3092\u78ba\u8a8d\u3059\u308b\u3002<br>\n\n\n\u6b63\u5e38\u306e\u30c7\u30fc\u30bf\u304c\u306a\u3044\u30e9\u30d9\u30eb\u3092knn\u3067\u4ed8\u4e0e\u3059\u308b\u3002\n\nKNN\u3067\u30e9\u30d9\u30eb\u4ed8\u4e0e\u3067\u304d\u305d\u3046\u306a\u3089\u4ed8\u4e0e\u3057\u3066\u307f\u308b(th=0.5)\n\ntrain\u3068test\u306e\u5206\u5e03\u5dee\u3082\u78ba\u8a8d\u3059\u308b\u3002"}}