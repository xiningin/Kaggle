{"cell_type":{"050dac83":"code","f58a8de6":"code","5a66c85e":"code","fcc31870":"code","6bfc43c7":"code","5e2193a0":"code","22a6a1a8":"code","7d26a256":"code","867d42c5":"code","0976cb96":"code","48418bc6":"code","5414df6b":"code","0789f486":"code","2fe2b2f7":"code","27b43e49":"code","fd02301e":"code","108eaff7":"code","9f1600dc":"code","2d7b8bbf":"code","24aad66d":"code","79947b0b":"code","e80db0b6":"code","0ba23cc3":"code","0382f51f":"code","d9c2a24c":"code","04c23cd6":"code","e02822d9":"code","7f8c6131":"code","2d97fc2e":"code","9a546908":"code","26cc96fc":"markdown","c959f153":"markdown","48dd8290":"markdown","bbfe0418":"markdown","f5bbb6a0":"markdown","0c5725d6":"markdown","7f81966f":"markdown","1ce9ea87":"markdown","a9518d17":"markdown","81cec603":"markdown","3ae6b750":"markdown","5acf1e2a":"markdown","f6ae5cd1":"markdown","f397d007":"markdown","3300507d":"markdown","f9a51bca":"markdown","9ff3057b":"markdown"},"source":{"050dac83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import SimpleRNN, LSTM, Dense, Flatten, MaxPooling2D\nfrom tensorflow.keras.models import Sequential\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import metrics\nimport helper","f58a8de6":"data_dir = tf.keras.utils.get_file('Friends_Transcript.txt', 'https:\/\/raw.githubusercontent.com\/uragirii\/Friends-Generator\/master\/Data\/Friends_Transcript.txt')\nwith open(data_dir) as f:\n    text = f.readlines()\ntext = [x.strip() for x in text] \nprint(text[:20])","5a66c85e":"text = open(data_dir, 'rb').read().decode(encoding='utf-8')\n# length of text is the number of characters in it\nprint ('Length of text: {} characters'.format(len(text)))","fcc31870":"#Vocablary can be used to get the unique texts in the dataset\nvocab = sorted(set(text))\nprint('The Number of Unique words : {}'.format(len(vocab)))","6bfc43c7":"char_to_idx = {u:i for i, u in enumerate(vocab)}\nidx_to_char = np.array(vocab)\n\ntext_as_int = np.array([char_to_idx[c] for c in text])","5e2193a0":"print('{')\nfor char,_ in zip(char_to_idx, range(25)):\n    print('  {:4s}: {:3d},'.format(repr(char), char_to_idx[char]))\nprint('  ...\\n}')","22a6a1a8":"# Show how the first 13 characters from the text are mapped to integers\nprint ('{} ---- characters mapped to int ---- > {}'.format(repr(text[:13]), text_as_int[:13]))","7d26a256":"#Maximum length of sequence to be taken as a single input in characters\nseq_length = 100\nexamples_per_epochs = len(text)\/\/(seq_length + 1)\n\n# Create training examples \/ targets\nchar_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)\n\nfor i in char_dataset.take(5):\n    print(idx_to_char[i.numpy()])","867d42c5":"sequences = char_dataset.batch(seq_length+1, drop_remainder=True)\n\nfor item in sequences.take(5):\n    print(repr(''.join(idx_to_char[item.numpy()])))","0976cb96":"def split_input_target(chunk):\n    input_text = chunk[:-1]\n    target_text = chunk[1:]\n    return input_text, target_text\n\ndataset = sequences.map(split_input_target)","48418bc6":"for input_example, target_example in  dataset.take(1):\n    print ('Input data: ', repr(''.join(idx_to_char[input_example.numpy()])))\n    print ('Target data:', repr(''.join(idx_to_char[target_example.numpy()])))","5414df6b":"for i, (input_idx, target_idx) in enumerate(zip(input_example[:5], target_example[:5])):\n    print(\"Step {:4d}\".format(i))\n    print(\"  input: {} ({:s})\".format(input_idx, repr(idx_to_char[input_idx])))\n    print(\"  expected output: {} ({:s})\".format(target_idx, repr(idx_to_char[target_idx])))","0789f486":"# Batch size\nBATCH_SIZE = 64\n\n# Buffer size to shuffle the dataset\n# (TF data is designed to work with possibly infinite sequences,\n# so it doesn't attempt to shuffle the entire sequence in memory. Instead,\n# it maintains a buffer in which it shuffles elements).\nBUFFER_SIZE = 10000\n\ndataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)\n\ndataset","2fe2b2f7":"# Length of the vocabulary in chars\nvocab_size = len(vocab)\n\n# The embedding dimension\nembedding_dim = 256\n\n# Number of RNN units\nrnn_units = 1024","27b43e49":"def build_model(vocab_size, embedding_dim, rnn_units, batch_size):\n    model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim,\n                              batch_input_shape=[batch_size, None]),\n    tf.keras.layers.GRU(rnn_units,\n                        return_sequences=True,\n                        stateful=True,\n                        recurrent_initializer='glorot_uniform'),\n    tf.keras.layers.Dense(vocab_size)\n  ])\n    return model","fd02301e":"model = build_model(\n  vocab_size = len(vocab),\n  embedding_dim=embedding_dim,\n  rnn_units=rnn_units,\n  batch_size=BATCH_SIZE)","108eaff7":"model.summary()","9f1600dc":"for input_example_batch, target_example_batch in dataset.take(1):\n    example_batch_predictions = model(input_example_batch)\n    print(example_batch_predictions.shape, \"# (batch_size, sequence_length, vocab_size)\")","2d7b8bbf":"sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)\nsampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()","24aad66d":"sampled_indices","79947b0b":"print(\"Input: \\n\", repr(\"\".join(idx_to_char[input_example_batch[0]])))\nprint()\nprint(\"Next Char Predictions: \\n\", repr(\"\".join(idx_to_char[sampled_indices ])))","e80db0b6":"def loss(labels, logits):\n    return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits = True )\nmodel.compile(optimizer = 'adam', loss = loss)","0ba23cc3":"#saving the model\ncheckpoint_dir = '..\/training_checkpoints'\n# Name of the checkpoint files\ncheckpoint_prefix = os.path.join(checkpoint_dir, \"ckpt_{epoch}\")\n\ncheckpoint_callback=tf.keras.callbacks.ModelCheckpoint(\n    filepath=checkpoint_prefix,\n    save_weights_only=True)","0382f51f":"import shutil\nshutil.rmtree(checkpoint_dir)","d9c2a24c":"epochs = 30\nhistory = model.fit(dataset, epochs=epochs, callbacks=[checkpoint_callback])","04c23cd6":"tf.train.latest_checkpoint(checkpoint_dir)","e02822d9":"model = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)\nmodel.load_weights(tf.train.latest_checkpoint(checkpoint_dir))\nmodel.build(tf.TensorShape([1, None]))\nmodel.summary()","7f8c6131":"plt.figure(figsize=(5,5))\nplt.plot(history.history['loss'], label='Loss')\n\nplt.legend()\nplt.title('Metrics estimations')","2d97fc2e":"def generate_text(model, start_string):\n  # Evaluation step (generating text using the learned model)\n\n  # Number of characters to generate\n    num_generate = 1000\n\n  # Converting our start string to numbers (vectorizing)\n    input_eval = [char_to_idx[s] for s in start_string]\n    input_eval = tf.expand_dims(input_eval, 0)\n\n  # Empty string to store our results\n    text_generated = []\n\n  # Low temperatures results in more predictable text.\n  # Higher temperatures results in more surprising text.\n  # Experiment to find the best setting.\n    temperature = 1.0\n\n  # Here batch size == 1\n    model.reset_states()\n    for i in range(num_generate):\n        predictions = model(input_eval)\n      # remove the batch dimension\n        predictions = tf.squeeze(predictions, 0)\n\n      # using a categorical distribution to predict the character returned by the model\n        predictions = predictions \/ temperature\n        predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()\n\n      # We pass the predicted character as the next input to the model\n      # along with the previous hidden state\n        input_eval = tf.expand_dims([predicted_id], 0)\n\n        text_generated.append(idx_to_char[predicted_id])\n\n    return (start_string + ''.join(text_generated))","9a546908":"print(generate_text(model, start_string=u\"Chandler: \"))","26cc96fc":"# Introduction\nI will be using dataset from [Friends_series](https:\/\/raw.githubusercontent.com\/uragirii\/Friends-Generator\/master\/Data\/Friends_Transcript.txt) to make an RNN based model to generate new scripts for the project.","c959f153":"# Vectorize the Dataset","48dd8290":"**Process flow from the above codes can be visualized here!!**\n![view](https:\/\/www.tensorflow.org\/tutorials\/text\/images\/text_generation_training.png)","bbfe0418":"For each sequence, duplicate and shift it to form the input and target text by using the map method to apply a simple function to each batch:","f5bbb6a0":"**Each index of these vectors are processed as one time step. For the input at time step 0, the model receives the index for \"T\" and trys to predict the index for \"i\" as the next character. At the next timestep, it does the same thing but the RNN considers the previous step context in addition to the current input character.**","0c5725d6":"**Let's predict the text after Decoding the sampled_indices**","7f81966f":"**Generate text**","1ce9ea87":"# Text processing","a9518d17":"# About Friends Series\nIt was an American sitcom that aired from 1994-2004 with 10 seasons produced. It is one of my favorite shows so thought of making a model to generate new scripts for the series. Further info can be seen [from](https:\/\/en.wikipedia.org\/wiki\/Friends)\n\n![friends](https:\/\/pmcvariety.files.wordpress.com\/2020\/02\/friends.jpg?w=681&h=383&crop=1)\n","81cec603":"**Model Layout**\n1. Sequential\n2. Embedding\n3. GRU\n4. Dense","3ae6b750":"# Loading the Dataset","5acf1e2a":"# Analyzing the Script data\nI have taken insights from Shakespeare Dataset which can be found on [tensorflow's official website](https:\/\/www.tensorflow.org\/tutorials\/text\/text_generation)","f6ae5cd1":"# Predictions \nTo make the predictions of next line in the dataset, we first sample the output distribution to get the actual character indices","f397d007":"**Shape of Output**","3300507d":"***Now we have an integer representation for each character. Notice that we mapped the character as indexes from 0 to len(unique).***","f9a51bca":"***Now we start building the model***","9ff3057b":"# Model developement\n***The prediction task***\n\nGiven a character, or a sequence of characters, what is the most probable next character? This is the task we're training the model to perform. The input to the model will be a sequence of characters, and we train the model to predict the output\u2014the following character at each time step.\n\nSince RNNs maintain an internal state that depends on the previously seen elements, given all the characters computed until this moment, what is the next character?\n\n***Create training examples and targets***\n\nNext divide the text into example sequences. Each input sequence will contain seq_length characters from the text.\n\nFor each input sequence, the corresponding targets contain the same length of text, except shifted one character to the right.\n\nSo break the text into chunks of seq_length+1. For example, say seq_length is 4 and our text is \"Hello\". The input sequence would be \"Hell\", and the target sequence \"ello\".\n\nTo do this first use the tf.data.Dataset.from_tensor_slices function to convert the text vector into a stream of character indices."}}