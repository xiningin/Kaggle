{"cell_type":{"c1e59648":"code","09915dd6":"code","dcba407d":"code","bdf3ef05":"code","88895b7b":"code","530f2c5c":"code","d0914fa2":"code","4e92fafb":"code","e68c3d8f":"code","f4d3c476":"code","58018cff":"code","337b0ff7":"code","9045b159":"code","56c4bad5":"code","33125703":"code","ed410c45":"code","afbf19de":"code","c0a549cf":"code","c55c713e":"code","c0b34435":"code","5306b382":"code","c1af4586":"code","ac2a8950":"code","9ced9bc3":"code","976f721d":"code","12ce5152":"code","5eb3a59c":"code","dcfd9c2a":"code","dd96653a":"code","e57f5261":"code","43d73df2":"code","59916e9d":"code","df47885b":"code","673f6780":"code","7998df57":"code","e837153c":"code","4f75e758":"code","88d83949":"code","06278792":"code","6a61c696":"code","1a2133fc":"code","ca6ad608":"code","f372175e":"code","bd9cee3c":"code","e5a05cd2":"code","1dd38392":"code","e2349020":"code","e65c8ec2":"code","5589bb84":"code","dfeb85e5":"code","36c86049":"code","89622f8f":"code","90451c07":"code","38211f97":"code","24cf75fd":"code","1846297e":"code","88a12636":"code","401274a9":"code","54debb23":"code","099789b1":"code","47ff86bc":"code","1ffbc80f":"code","b2cf82d6":"code","198c310c":"code","47016da0":"code","091698ed":"code","c12ed61f":"code","e6163f8b":"code","8a7072b4":"code","3780d0c5":"code","3c91fbf8":"code","3cf9d692":"code","1c901266":"code","ab025ddf":"code","105ce3d8":"code","7a25bb21":"markdown","3a41bbbe":"markdown","1006f768":"markdown","58a8dfca":"markdown","2bfa6760":"markdown","28cfe784":"markdown","c28e5724":"markdown","96626e2a":"markdown","e0063667":"markdown","0e9cf615":"markdown","566375c3":"markdown","b770abd9":"markdown","7c1cd127":"markdown","f44b2d20":"markdown","67f7e234":"markdown","cbfec9ef":"markdown","c6e6940f":"markdown","68eb3eb2":"markdown","09bdac3e":"markdown","d8efd83c":"markdown","83ba4cb1":"markdown","da3c8456":"markdown","154b44af":"markdown","8a9d5bf1":"markdown","214d5b65":"markdown","daa2a952":"markdown"},"source":{"c1e59648":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfrom re import compile , match\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","09915dd6":"from re import compile , match\n\nfrom warnings import filterwarnings\nfilterwarnings(action='ignore')\n\nfrom sklearn.base import BaseEstimator , TransformerMixin\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.impute import SimpleImputer \nfrom sklearn.preprocessing import OrdinalEncoder , OneHotEncoder ,StandardScaler \n# OneHotEncoder and OrdianlEcoder to Transform our Categorical Data Into Numerical Data\n# And Simple imputer to fix Missing or NaN Values\n\nfrom sklearn.compose import ColumnTransformer # To Transform our Data\nfrom sklearn.model_selection import train_test_split # to split our Data into training and test data\n\nfrom sklearn.ensemble import RandomForestRegressor \nfrom sklearn.model_selection import KFold # for Cross validataion\n","dcba407d":"df = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')\n","bdf3ef05":"df.head()","88895b7b":"# lets check the datatype of each column\ndf.info()","530f2c5c":"# function to extract max_power ,torque value from max_power , torque column\ndef extract(string , pat = compile(r'[0-9\\.]+') ):\n    if string is not np.nan:\n        mat = match(pat , string)\n        if mat:\n            return float(string[mat.start() : mat.end()])\n        else:\n            return np.nan\n    else:\n        return np.nan","d0914fa2":"df = df.assign(mileage = df.mileage.apply(lambda x : float(x[:-5]) if x is not np.nan else x ))\ndf = df.assign(max_power = df.max_power.apply(extract))\ndf = df.assign(engine = df.engine.apply(lambda x : float(x[:-3]) if x is not np.nan else x ))\ndf = df.assign(torque = df.torque.apply(extract))","4e92fafb":"df = df.assign(company = df.name.apply(lambda x : x.split()[0]))\n#  = df.name.apply(lambda x : x.split()[0])","e68c3d8f":"new_cols = ['company' ,'name' ,'year' ,'selling_price' ,'km_driven' ,'fuel' ,'seller_type' ,'transmission' ,'owner' ,'mileage' ,'engine' ,'max_power' ,'torque' ,'seats' ]\ndf = df[new_cols]\n\norignal_dataframe = df.copy()\ndf = df.dropna()\n","f4d3c476":"# new datatype of each column\ndf.info()","58018cff":"df.isna().sum()","337b0ff7":"df.shape","9045b159":"# unique cars\ndf.name.unique().size","56c4bad5":"# Average Selling price\nprint(f'Selling Price Mean : {df.selling_price.mean():.2f}' )\nprint(f'Selling Price Median : {df.selling_price.median():.2f}' )","33125703":"# lets check the distribution and skewness of selling_price\nplt.figure(dpi=100 ,figsize=(15,5))\nsns.histplot(df.selling_price,bins=30 , color='green',edgecolor=None , kde=True)\nplt.vlines(df.selling_price.mean() , 0 , 3500 , color='red' , label=f'Mean :{df.selling_price.mean():.2f}')\nplt.vlines(df.selling_price.median() , 0 , 3500 , color='blue' , label=f'Median :{np.median(df.selling_price):.2f}')\nplt.legend(loc='upper center' , edgecolor='black' , facecolor='lightgreen')\nplt.show()","ed410c45":"# Average Selling price\nprint(f'Km Driven Mean : {df.km_driven.mean():.2f}' )\nprint(f'Km Driven Median : {df.km_driven.median():.2f}' )","afbf19de":"# lets check the distribution and skewness of km_driven\nplt.figure(dpi=100 ,figsize=(15,5))\nsns.histplot(df.km_driven,bins=30 , color='green',edgecolor=None , kde=True)\nplt.vlines(df.km_driven.mean() , 0 , 5600 , color='red' , label=f'Mean :{df.km_driven.mean():.2f}')\nplt.vlines(df.km_driven.median() , 0 , 5600 , color='blue' , label=f'Median :{np.median(df.km_driven):.2f}')\nplt.legend(loc='upper center' , edgecolor='black' , facecolor='lightgreen')\nplt.show()","c0a549cf":"# Average Mileage\nprint(f'Mileage Mean : {df.mileage.mean():.2f}' )\nprint(f'Mileage Median : {df.mileage.median():.2f}' )","c55c713e":"# lets check the distribution and skewness of mileage\nplt.figure(dpi=100 ,figsize=(15,5))\nsns.histplot(df.mileage,bins=30 , color='green',edgecolor=None , kde=True)\nplt.vlines(df.mileage.mean() , 0 , 1150 , color='red' , label=f'Mean :{df.mileage.mean():.2f}')\nplt.vlines(df.mileage.median() , 0 , 1150 , color='blue' , label=f'Median :{df.mileage.median():.2f}')\nplt.legend(loc='upper left' , edgecolor='black' , facecolor='lightgreen')\nplt.show()\n# this is a normal distribution","c0b34435":"# Average engine in cc\nprint(f'Engine Mean : {df.engine.mean():.2f}' )\nprint(f'Engine Median : {df.engine.median():.2f}' )","5306b382":"# lets check the distribution and skewness of engine\nplt.figure(dpi=100 ,figsize=(15,5))\nsns.histplot(df.engine,bins=30 , color='green',edgecolor=None , kde=True)\nplt.vlines(df.engine.mean() , 0 , 750 , color='red' , label=f'Mean :{df.engine.mean():.2f}')\nplt.vlines(df.engine.median() , 0 ,1200 , color='blue' , label=f'Median :{df.engine.median():.2f}')\nplt.legend(loc='upper left' , edgecolor='black' , facecolor='lightgreen')\nplt.show()","c1af4586":"# Average max_power bhp(brake horsepower)\nprint(f'Max Power Mean : {df.engine.mean():.2f}' )\nprint(f'Max Power Median : {df.engine.median():.2f}' )","ac2a8950":"# lets check the distribution and skewness of engine\nplt.figure(dpi=100 ,figsize=(15,5))\nsns.histplot(df.max_power,bins=30 , color='green',edgecolor=None , kde=True)\nplt.vlines(df.max_power.mean() , 0 , 1370 , color='red' , label=f'Mean :{df.max_power.mean():.2f}')\nplt.vlines(df.max_power.median() , 0 , 1840 , color='blue' , label=f'Median :{df.max_power.median():.2f}')\nplt.legend(loc='upper left' , edgecolor='black' , facecolor='lightgreen')\nplt.show()","9ced9bc3":"# Average torque nm(newton meter)\nprint(f'Torque Mean : {df.torque.mean():.2f}' )\nprint(f'Torque Median : {df.torque.median():.2f}' )","976f721d":"# lets check the distribution and skewness of torque\nplt.figure(dpi=100 ,figsize=(15,5))\nsns.histplot(df.torque,bins=30 , color='green',edgecolor=None , kde=True)\nplt.vlines(df.torque.mean() , 0 , 650 , color='red' , label=f'Mean :{df.torque.mean():.2f}')\nplt.vlines(df.torque.median() , 0 , 555 , color='blue' , label=f'Median :{df.torque.median():.2f}')\nplt.legend(loc='upper left' , edgecolor='black' , facecolor='lightgreen')\nplt.show()","12ce5152":"df1 = df.groupby('company').agg({'selling_price':'mean' })\ndf1 = df1.sort_values('selling_price')","5eb3a59c":"plt.figure(dpi=100 ,figsize=(30 ,10) , facecolor='black' ,edgecolor='lightgreen')\nplt.title('Average Selling Price of Each Car Company',color='salmon' , size=20)\nplt.plot(df1.index , df1.selling_price ,color='salmon' , marker='o' ,)\nfor idx ,val in zip(range(len(df.index)) , df1.values.flatten()):\n    plt.text(idx-.3 , val+100000 , s=f'{int(val)}',rotation=30)\nplt.xticks(color='salmon' ,rotation=90, size=20)\nplt.ylabel('Selling Price (1e6)',color='salmon' , size=20)\nplt.yticks(color='salmon',size=20)\nplt.grid(ls='--' , lw='.5' , color='red' ,alpha=.6 ,)\nplt.show()","dcfd9c2a":"df1 = df.groupby('company').agg({'selling_price':'max' })\ndf1 = df1.sort_values('selling_price')","dd96653a":"plt.figure(dpi=100 ,figsize=(30 ,10) , facecolor='black' ,edgecolor='lightgreen')\nplt.title('Maximum Selling Price of Each Car Company',color='salmon' , size=20)\nplt.plot(df1.index , df1.selling_price ,color='salmon' , marker='o' ,)\nfor idx ,val in zip(range(len(df.index)) , df1.values.flatten()):\n    plt.text(idx-.3 , val+100000 , s=f'{val}')\nplt.xticks(color='salmon' ,rotation=90, size=20)\nplt.yticks(color='salmon',size=20)\nplt.grid(ls='--' , lw='.5' , color='red' ,alpha=.6 ,)\nplt.show()","e57f5261":"df1 = df.groupby('company').agg({'selling_price':'min' })\ndf1 = df1.sort_values('selling_price')\n\nplt.figure(dpi=100 ,figsize=(30 ,10) , facecolor='black' ,edgecolor='lightgreen')\nplt.title('Minimum Selling Price of Each Car Company',color='salmon' , size=20)\nplt.plot(df1.index , df1.selling_price ,color='salmon' , marker='o' ,)\nfor idx ,val in zip(range(len(df.index)) , df1.values.flatten()):\n    plt.text(idx-.5 , val+100000 , s=f'{val}')\nplt.xticks(color='salmon' ,rotation=90, size=20)\nplt.yticks(color='salmon',size=20)\nplt.grid(ls='--' , lw='.5' , color='red' ,alpha=.6 ,)\nplt.show()\n","43d73df2":"df.head()","59916e9d":"df1 = df.groupby('owner').agg({'owner':'count', 'selling_price':'sum'})\ndf1['avg'] = df1.selling_price \/\/ df1.owner\ndf1","df47885b":"plt.figure(dpi=100 , figsize=(9,4),facecolor='grey')\nplt.bar(df1.index , df1.avg , color='red')\nplt.xticks(rotation=45)\nplt.xlabel('Owner' ,  color='Black' , weight='heavy' ,size=16)\nplt.ylabel('Selling Price of One Car')\nplt.grid(':',color='green',alpha=.5 , lw=.3)\nplt.show()","673f6780":"df1 = df.groupby('transmission').agg({'selling_price':'sum','transmission':'count'})\ndf1['avg'] = (df1.selling_price \/ df1.transmission).astype(dtype=np.int32)\ndf1","7998df57":"df1 =df.groupby('fuel').agg({'selling_price':'mean'})\ndf1","e837153c":"plt.figure(dpi=100)\nsns.barplot(x=df1.index , y = df1.selling_price , data=df1)\nplt.xlabel('Fuel Type' , size=12 , color='red')\nplt.ylabel('Avg Price' , size=12, color='red')","4f75e758":"df1 =df.groupby('fuel').agg({'fuel':'count'})\ndf1","88d83949":"plt.figure(dpi=100)\nsns.barplot(x=df1.index , y = df1.fuel , data=df1)\nplt.xlabel('Fuel Type' , size=14)\nplt.ylabel('Frequency' , size=14)","06278792":"df1 = df.groupby('seats').agg({'selling_price':'mean','seats':'count'})\ndf1","6a61c696":"plt.figure(dpi=100 , figsize=(10,6),frameon=True,facecolor='black')\nplt.title('Selling Price By Seats' , color='red', size=18)\nax = plt.gca()\nplt.barh(np.arange(9) , df1.selling_price,color='lightgreen',height=.5,edgecolor='w')\nax.set_facecolor('black')\nfor i in ['left' , 'bottom']:\n    ax.spines[i].set_color('Yellow')\nplt.yticks(np.arange(9), map(int,df1.index),color='lightgreen')\nplt.xticks(color='lightgreen')\nplt.xlabel('Selling Price',size=15,color='red')\nplt.ylabel('Seats',size=15,color='red')\nplt.show()","1a2133fc":"np.corrcoef(df.selling_price , df.km_driven)","ca6ad608":"plt.figure(dpi=100,figsize=(9,4))\nsns.scatterplot(x='km_driven' , y='selling_price', data=df,hue='fuel')\nplt.show()","f372175e":"np.corrcoef(df.selling_price , df.mileage)[0 ,1]","bd9cee3c":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'mileage',y='selling_price' ,data=df,hue='fuel')\nplt.show()","e5a05cd2":"np.corrcoef(df.selling_price , df.engine)[0 ,1]","1dd38392":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'engine',y='selling_price' ,data=df,hue='fuel')\nplt.show()","e2349020":"np.corrcoef(df.selling_price , df.max_power)[0 ,1]","e65c8ec2":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'max_power',y='selling_price' ,data=df,hue='fuel')\nplt.show()","5589bb84":"np.corrcoef(df.selling_price , df.torque)[0 ,1]","dfeb85e5":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'torque',y='selling_price' ,data=df,hue='fuel')\nplt.show()","36c86049":"np.corrcoef(df.selling_price , df.seats)[0 ,1]","89622f8f":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'seats',y='selling_price' ,data=df,hue='fuel')\nplt.show()","90451c07":"np.corrcoef(df.engine ,df.max_power)","38211f97":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'engine',y='max_power' ,data=df,hue='fuel')\nplt.show()","24cf75fd":"np.corrcoef(df.engine ,df.torque)","1846297e":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'engine',y='torque' ,data=df,hue='fuel')\nplt.show()","88a12636":"np.corrcoef(df.max_power ,df.torque)","401274a9":"plt.figure(dpi=100,figsize=(10,5))\nsns.scatterplot( x = 'max_power',y='torque' ,data=df,hue='fuel')\nplt.show()","54debb23":"np.corrcoef(df.max_power , df.seats)[0 ,1]","099789b1":"plt.figure(dpi=100 , figsize= (10,6))\nsns.scatterplot(x = df.seats , y = df.max_power ,data=df , hue='seats')\nplt.show()","47ff86bc":"o_df = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')\no_df.head()","1ffbc80f":"X = o_df.drop('selling_price' ,axis=1 )\ny = o_df['selling_price']","b2cf82d6":"x_train , x_test , y_train , y_test = train_test_split(X , y , test_size=.2 , random_state=42,)\nprint('x_train shape : ',x_train.shape )\nx_train.head()","198c310c":"class Add_Features(BaseEstimator , TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self ,X , y=None):\n        return self\n    \n    def extract(self ,string , pat = compile(r'^[0-9\\.]+')) :\n        if string is not np.nan:\n            mat = match(pat , string)\n            if mat:\n                return float(string[mat.start() : mat.end()])\n            else:\n                return np.nan\n        else:\n            return np.nan\n\n    def transform(self , X ,y=None):\n        X['name'] = list(map( lambda x : x.split()[0] , X.name))\n        X['torque'] = list(map(self.extract , X.torque))\n        X['mileage'] = list(map( self.extract, X.mileage))\n        X['engine'] = list(map(self.extract, X.engine ))\n        X['max_power'] = list(map(self.extract , X.max_power))\n        return X","47016da0":"# Creating a List of Numerical and Categorical Features\nnum_features = ['year', 'km_driven', 'mileage', 'engine', 'max_power', 'torque', 'seats']\ncat_ord_features = ['fuel' ,'name', 'owner' ,'seller_type', 'transmission']","091698ed":"# Creating Numerical Pipeline to Fix NaN Values and Scale Our Data\nnum_pipeline = Pipeline([\n    ('imputer' , SimpleImputer(strategy='median')),\n    ('scale' , StandardScaler()),\n])","c12ed61f":"# Creating Final Column Transformer  that will Transformers over dData\nfinal_pipeline = ColumnTransformer([\n    ('numerical pipeline' , num_pipeline , num_features),\n    ('categoricat ordinal' , OrdinalEncoder() ,cat_ord_features )\n])","e6163f8b":"obj = Add_Features()\nobj.fit(x_train)\nx_train_tr = obj.transform(x_train)\nx_test_tr = obj.transform(x_test)\nx_train_tr","8a7072b4":"# Final Transformation of Our Data\nfinal_pipeline.fit(x_train_tr)\nx_train_tr2 = final_pipeline.transform(x_train_tr)\nprint('Shape of Final Training Data : ',x_train_tr2.shape)\nx_test_tr2 = final_pipeline.transform(x_test_tr)\nprint('Shape of Final Test Data : ',x_test_tr2.shape)","3780d0c5":"# lets hav ea look at our final data in DataFrame Formate\nprint('Fianl Training Data')\npd.DataFrame(x_train_tr2 , columns=num_features + cat_ord_features)","3c91fbf8":"from sklearn.metrics import mean_squared_error , r2_score\ndef rmse(y , y_hat):\n    return np.sqrt(mean_squared_error(y , y_hat))","3cf9d692":"def Model_Report(models , x_train ,x_test ,y_train , y_test):\n    model.fit(x_train , y_train)\n    y_hat_train = model.predict(x_train)\n    y_hat_test = model.predict(x_test)\n    \n    print(f'Training RMSE Error : {rmse(y_train , y_hat_train):.2f}')\n    print(f'Test RMSE Error   : {rmse(y_test , y_hat_test):.2f}')\n    print()\n    print(f'Training Accuracy : {r2_score(y_train , y_hat_train):.2f}')\n    print(f'Test Accuracy : {r2_score(y_test , y_hat_test):.2f}')\n\n","1c901266":"model = RandomForestRegressor(n_estimators=50) \nModel_Report(model ,x_train_tr2 , x_test_tr2 , y_train , y_test)","ab025ddf":"folds = KFold(n_splits = 5)\nc=1\nfor tr_idx , ts_idx in folds.split(x_train_tr2):\n    print('_'*50)\n    print()\n    print('Fold :',c)\n    print('-'*8)\n    print()\n    train_x = x_train_tr2[tr_idx]\n    test_x = x_train_tr2[ts_idx]\n    train_y = y_train.iloc[tr_idx]\n    test_y = y_train.iloc[ts_idx]\n    Model_Report(model ,train_x ,test_x ,train_y ,test_y)\n    print('_'*50)\n    c+=1","105ce3d8":"model = RandomForestRegressor(n_estimators=50) \nModel_Report(model ,x_train_tr2 , x_test_tr2 , y_train , y_test)","7a25bb21":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 24px;border: 3px solid red;'>Average Selling Price of Each Car Company<\/h2>","3a41bbbe":"<h2 style='background-color:black;color:white;text-align:center;padding: 20px 10px;border-radius: 70px;transition: 0.25s;border: 3px solid red'>\n    Lets Check the Correlation Plots\n<\/h2>\n<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Selling-Price Km-Driven\n<\/h3>","1006f768":"<h2 style='background-color:black;color:white;text-align:center;padding: 20px 50px;border-radius: 50px;border: 3px solid red'>\n    Re-Aranging Features of DataFrame\n      \n<\/h2>","58a8dfca":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Selling-Price and Mileage\n<\/h3>","2bfa6760":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Max Power and Seats\n<\/h3>","28cfe784":"## Splittting Our Data In to Training and Test Data","c28e5724":"      From The Above Data Frame :\n            We can say that Selling Price of one Car having Frist Owner is 783086 \n            While Price of One car having Second Owner is 392964. and if the Car is Having \n            Third ,Fourth or Above is 284015 , 225813** --> \n        \n     So we can say that ownership negatively affects Selling Price of a car\n    ","96626e2a":"<!-- ## Extracting new Features -->\n<h2 style='background-color:black;color:white;text-align:center;padding: 20px 50px;border-radius: 50px;border: 3px solid red'>\n    Extracting New Features \ud83e\udde0\n<\/h2>","e0063667":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 24px;border: 3px solid red'>Maximum Selling Price of Each Car Company<\/h2>","0e9cf615":"<h3>Cross Validation<\/h3>\n<img src=\"https:\/\/scikit-learn.org\/stable\/_images\/grid_search_cross_validation.png\">","566375c3":"\n\n<h2 style='background-color:black;color:white;text-align:center;padding: 20px 50px;border-radius: 50px;border: 3px solid red'>\n    Data Cleaning\ud83e\uddf9\n<\/h2>","b770abd9":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Selling-Price and Engine\n<\/h3>","7c1cd127":"# Creating Custom Transformer to Extract and Pre-Process our Data","f44b2d20":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Engine and Torque\n<\/h3>","67f7e234":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Selling-Price and Max Power\n<\/h3>","cbfec9ef":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Selling-Price and Seats\n<\/h3>","c6e6940f":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 24px;transition: 0.25s;border: 3px solid red'> Lets Check how Avg. of Selling-Price Varies by Transmission<\/h2>","68eb3eb2":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 24px;transition: 0.25s;border: 3px solid red'> Lets Check how Avg. of Selling-Price Varies by Fuel-Type<\/h2>","09bdac3e":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 30px;transition: 0.25s;border: 3px solid red'>\n    Lets Check Average Selling Price by No. Of Seats\n\n<\/h2>","d8efd83c":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Selling-Price and Torque\n<\/h3>","83ba4cb1":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 24px;border: 3px solid red'>Minimum Selling Price of Each Car Company<\/h2>","da3c8456":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Engine and Max Power \n<\/h3>","154b44af":"<h3 style='background-color:lightgreen;text-align:center;padding: 14px 24px;border-radius: 30px;transition: 0.25s;border: 3px solid darkgreen'>\n    Lets Check the Correlation b\/w Max Power and Torque\n<\/h3>","8a9d5bf1":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 24px;border: 3px solid red'>Lets Check How Owner-Type Affects Selling Price<\/h2>","214d5b65":"## Applying Our custom transformer over Training and test Data","daa2a952":"<h2 style='background-color:black;color:white;text-align:center;padding: 14px 50px;border-radius: 30px;transition: 0.25s;border: 3px solid red'>Lets check the Frequency of each Category of Fuel in Our Data-Frame<\/h2>"}}