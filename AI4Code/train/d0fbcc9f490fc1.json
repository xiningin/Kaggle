{"cell_type":{"4b9904e5":"code","4988eac5":"code","9fe9331a":"code","4bcc5cf8":"code","860b5785":"code","0905109f":"code","ed8105ee":"code","fc656bf5":"code","52611980":"code","e3c25e9c":"code","0582e814":"code","2d355b01":"code","488b7cd9":"code","fd46f5d4":"markdown","c5ab009b":"markdown","121db3f8":"markdown"},"source":{"4b9904e5":"# 1 LOAD LIBRARIES\n\nimport pandas as pd\nimport numpy as np\nimport pickle as pk\n\n# for dataset spliting\nfrom sklearn.cross_validation import train_test_split\n#\nfrom sklearn.cross_validation import cross_val_score\n\n\n# visualization\nimport matplotlib.pyplot as plt\n\n#\nfrom pandas.plotting import scatter_matrix\n\n# \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\n\n\n# metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\n","4988eac5":"# 2 LOAD DATA\n\ndata = pd.read_csv('..\/input\/Iris.csv')\ndata.head(2)","9fe9331a":"# 3 Summarization of dataset: Descriptive Stats\ndata.describe().T","4bcc5cf8":"# checking if any null values \ndata.isnull().values.any()","860b5785":"# How manu classes of target col 'class'\ndata['Species'].unique()","0905109f":"data.groupby('Species').size()","ed8105ee":"# Data preprocessing\n\ndef pre_processing(data):\n    X = data[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']]\n    y = data['Species']\n\n    xtrain,xtest, ytrain, ytest = train_test_split(X,y,test_size=0.33)\n    \n    return  xtrain,xtest, ytrain, ytest\n    ","fc656bf5":"# 4 Data visualization\n\ncol_names = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm', 'Species']\n\ndata[col_names].plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)\n\nplt.show()","52611980":"data[col_names].hist()","e3c25e9c":"scatter_matrix(data[col_names])","0582e814":"# 4 Data preprocessing\nxtrain,xtest, ytrain, ytest = pre_processing(data)","2d355b01":"# Building Models for iris flower classification\n\nnp.random.seed(1000)\n# making a list of ml classification models\nmodels = []\n\ndef classification_Models(xtrain,xtest, ytrain, ytest ):\n    \n\n    \n    models.append( ('LR',  LogisticRegression()) )\n    models.append( ('CART',DecisionTreeClassifier()) )\n    models.append( ('KNN', KNeighborsClassifier()) )\n    models.append( ('NB',  GaussianNB()) )\n    models.append( ('LDA',  LinearDiscriminantAnalysis()) )\n    models.append( ('SVM',  SVC()) )\n\n    modeloutcomes = []\n    modelnames = []\n    for name,model in models:\n        v_results = cross_val_score(model, xtrain, ytrain, cv = 3, \n                                     scoring='accuracy', n_jobs = -1, verbose = 0)\n        print(name,v_results.mean())\n        modeloutcomes.append(v_results)\n        modelnames.append(name)\n        \n    print(modeloutcomes)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.set_xticklabels(modelnames)\n    plt.boxplot(modeloutcomes)\n        \nclassification_Models(xtrain,xtest, ytrain, ytest)","488b7cd9":"# Evaluating and predicting models\n\n\nfor name,model in models:\n    trainedmodel = model.fit(xtrain,ytrain)\n    \n    # prediction\n    ypredict = trainedmodel.predict(xtest)\n    \n    acc = accuracy_score(ytest,ypredict)\n    classreport = classification_report(ytest,ypredict)\n    confMat = confusion_matrix(ytest,ypredict)\n    \n    print('\\n****************************'+name)\n    print('The accuracy: {}'.format(acc))\n    print('The Classification Report:\\n {}'.format(classreport))\n    print('The Confusion Matrix:\\n {}'.format(confMat))\n    \n    \n    # save models\n    import pickle as pk\n    \n    with open('model_'+name+'.pickle','wb') as f:\n        pk.dump(trainedmodel,f)\n    ","fd46f5d4":"**Courtesy: Nilimesh Halder**\n\n**Steps in Applied Machine Learning:**\n- Load Library\n- Load Dataset to which Machine Learning Algorithm to be applied Either a) load from a CSV file or b) load from a Database\n- Summarisation of Data to understand dataset (Descriptive Statistics)\n- Visualisation of Data to understand dataset (Plots, Graphs etc.)\n- Data pre-processing & Data transformation (split into train-test datasets)\n- Application of a Machine Learning Algorithm to training dataset a) setup a ML algorithm and parameter settings b) cross validation setup with training dataset\nc) training & fitting Algorithm with training Dataset\nd) evaluation of trained Algorithm (or Model) and result\ne) saving the trained model for future prediction\n- Finalise the trained modela and make prediction","c5ab009b":"**From above it seems svm is winner with some leading results.**","121db3f8":"**IRIS data From UCI Machine Learning**\nThe goal of this exercise is to correctly classify each flower given its attributes. IRIS is a small and well understood dataset for classification problem. Here the author is going to present an end to end predictive modelling machine learning recipe for this classification project using different types of Classifier available in scikit-learn package such as Logistic Regression, Linear Discriminant Analysis, K Nearest Neighbours, Decision Tree, Na\u00efve Bayes and Support Vector Machine.\n\n"}}