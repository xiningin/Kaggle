{"cell_type":{"c5f6d186":"code","ca4f49d0":"code","d9707373":"code","d70b992e":"code","78123473":"code","1ad8d6fc":"code","aa424f84":"code","2a796765":"code","32f41e8b":"code","83506033":"code","d43f526b":"code","38ee5eb9":"code","0989d492":"code","d4b8d724":"code","50898eb2":"code","c0081a4f":"code","3e59b1b3":"code","797a9154":"code","931a5f42":"code","fb18a78b":"code","39786dcf":"code","782a3d32":"code","68dc5ca9":"code","5ca9f31d":"code","0b17a0a6":"code","13f6fec1":"code","d78fd9ab":"code","05a77eb0":"code","edea93a9":"code","c83aceb9":"code","8daa2ac1":"code","ee9d4bc6":"code","673b297c":"code","2a5613b1":"code","d500946a":"code","8e194cbb":"code","a4df54ad":"code","0e99e831":"code","85acb142":"code","88b556d0":"code","2926e7e8":"code","943aadec":"code","56f02c7a":"code","2b270eeb":"code","ea914025":"code","319cf6b9":"code","d149b465":"code","e0c1e24f":"code","94117f6c":"code","b20283c6":"code","f169d90d":"code","bd9c03f6":"code","2decd51e":"code","4e38c923":"code","9d2d01f1":"code","aa016c5a":"code","4e51453c":"code","4c8b2478":"code","6d24eb42":"code","91f446d8":"code","b0c28c51":"code","2f039c0d":"code","30155e2a":"code","1c70b545":"code","be455e4b":"code","6e2acbf3":"code","4907cf50":"code","7dee01ff":"code","3c539797":"code","1bdb3cc6":"code","4f276c0d":"code","a3c2e643":"code","4211782b":"code","4947f697":"code","0c7bcb3c":"code","e4373d01":"code","343689f9":"code","59dca503":"code","5859b982":"code","7a28af3a":"code","d886d0d9":"code","eb873b36":"code","d58fd9fb":"code","05c63363":"code","1a15e9ac":"code","b5001c19":"code","4d76b6a1":"code","b92f2ee3":"code","e6ff97c9":"code","30a09e74":"code","a0d9d78f":"code","7bafba1f":"code","91ec6cc1":"code","18e2a3b8":"code","2c8874be":"code","ce565f46":"markdown","ce78c1d4":"markdown","58473f44":"markdown","322ed267":"markdown","ea854483":"markdown","46b2a2a6":"markdown","8721f56b":"markdown","2de8c206":"markdown","c3a03cb6":"markdown","b43efffe":"markdown","6f9c6ff8":"markdown","8fba71ed":"markdown","2a0abb4d":"markdown","6b8abb9f":"markdown","fb4265cd":"markdown","fe861589":"markdown","dc934991":"markdown","1feb765b":"markdown","67e328ab":"markdown","343d6bfe":"markdown","e76d757c":"markdown","cfbe5eb2":"markdown","2d6abe7b":"markdown","6bc9569e":"markdown","a652d45b":"markdown","6c858a9b":"markdown","11c03056":"markdown","c9fab237":"markdown","2a85cfbc":"markdown","a014b1b4":"markdown","20ec589d":"markdown","69b1833a":"markdown","ffb6dcb8":"markdown","e9d03f54":"markdown","a5941343":"markdown","7f703dee":"markdown","17a495a6":"markdown","c9e546d4":"markdown","e2fdd2fc":"markdown","368eda80":"markdown","53895b0e":"markdown","d6445b37":"markdown","f7bef303":"markdown","5f30fe1e":"markdown","87366ff2":"markdown","d859377a":"markdown","bbdc2583":"markdown","6f2cbf30":"markdown","bd7da3c8":"markdown","221fdb0a":"markdown","dc554286":"markdown","db25c588":"markdown","5d054fea":"markdown","0bed51b6":"markdown","5f7ba56b":"markdown","d72edd9c":"markdown","a0855534":"markdown","8894e1e1":"markdown","22de3a77":"markdown","948798f0":"markdown","578cb8cd":"markdown","fc90ef8a":"markdown","93ab8f79":"markdown","7e9acb1a":"markdown","b4770730":"markdown","e306f238":"markdown","436accbb":"markdown","51048606":"markdown","909c9231":"markdown","a3c0194f":"markdown","9855dfac":"markdown","7a50b39e":"markdown","6bd69788":"markdown","7e1e2a7e":"markdown","90c5f3e3":"markdown","22c3bada":"markdown","fd5cbfcd":"markdown","515c2780":"markdown"},"source":{"c5f6d186":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca4f49d0":"import matplotlib.pyplot as plt \nimport seaborn as sns \nimport plotly.express as px\n\nplt.style.use('seaborn-darkgrid')","d9707373":"path = \"..\/input\/student-alcohol-consumption\/student-por.csv\"\n\ndf = pd.read_csv(path)","d70b992e":"df2 = pd.read_csv(path)\ndf2['gender'] = df2['sex']","78123473":"df['Alc'] = (df['Dalc'] * 5 + df['Walc'] * 2) \/ 7\n\ndf['Pedu'] = df.apply(lambda row: max(row['Medu'], row['Fedu']), axis=1)\n\ndf['Lifetime'] = df[\"Alc\"] > 1 \ndf['Heavy'] = df['Alc'] > 3\n\ndf['PStayAtHome'] = df.apply(lambda row: row['Mjob'] == 'at_home' or row['Fjob'] == 'at_home', axis=1)\ndf['Grade'] = (df['G1'] + df['G2'] + df['G3'] * 2) \/ 4\n\ndf = df.rename(columns = {'sex': 'gender'})","1ad8d6fc":"from scipy.stats import kurtosis\nfrom scipy.stats import skew\n\nnumerical_cols = ['age','Medu',\n       'Fedu', 'traveltime', 'studytime',\n       'failures', \n       'famrel', 'freetime', 'goout', 'Dalc',\n       'Walc', 'health', 'absences', 'G1', 'G2', 'G3', 'Alc', 'Pedu',\n       'Grade']\n\nx = [skew(df[col]) for col in numerical_cols]\ny = [kurtosis(df[col]) for col in numerical_cols]\n\nplt.subplots(figsize=(10,10))\nfig = plt.scatter(x, y)\nfor i, col in enumerate(numerical_cols):\n    plt.text(x[i], y[i], col)\nplt.xlabel(\"Skewness\")\nplt.ylabel(\"Kurtosis\")\nplt.show()","aa424f84":"df3 = df.copy()","2a796765":"df['Pedu'].value_counts()","32f41e8b":"for i in range(12, 35):\n    df['absences'] = df['absences'].replace({\n        i: 12\n    })","83506033":"df['gender'] = df['gender'].replace({'F': 'N\u1eef', 'M': 'Nam'})\ndf['Pstatus'] = df['Pstatus'].replace({'T': 'S\u1ed1ng c\u00f9ng nhau', 'A': 'Ly th\u00e2n'})\ndf['Pedu'] = df['Pedu'].replace({\n    0: '0. Kh\u00f4ng',\n    1: '1. Gi\u00e1o d\u1ee5c ti\u1ec3u h\u1ecdc (Kh\u1ed1i 4)',\n    2: '2. Kh\u1ed1i 5 \u0111\u1ebfn kh\u1ed1i 9',\n    3: '3. Gi\u00e1o d\u1ee5c trung h\u1ecdc c\u01a1 s\u1edf',\n    4: '4. Gi\u00e1o d\u1ee5c trung h\u1ecdc ph\u1ed5 th\u00f4ng ho\u1eb7c h\u01a1n'\n})\ndf['failures'] = df['failures'].replace({\n    0: '0',\n    1: '1',\n    2: '2',\n    3: \">=3\"\n})\ndf['famrel'] = df['famrel'].replace({\n    1: '1. R\u1ea5t t\u1ec7',\n    2: '2. T\u1ec7',\n    3: '3. B\u00ecnh th\u01b0\u1eddng',\n    4: '4. T\u1ed1t',\n    5: '5. R\u1ea5t t\u1ed1t'\n})\ndf['goout'] = df['goout'].replace({\n    1: '1. R\u1ea5t \u00edt',\n    2: '2. \u00cdt',\n    3: '3. B\u00ecnh th\u01b0\u1eddng',\n    4: '4. Nhi\u1ec1u',\n    5: '5. R\u1ea5t nhi\u1ec1u'\n})\ndf['studytime'] = df['studytime'].replace({\n    1: '1. < 2 gi\u1edd',\n    2: '2. 2 - 5 gi\u1edd',\n    3: '3. 5 - 10 gi\u1edd',\n    4: '4. > 10 gi\u1edd'\n})","d43f526b":"df.describe()","38ee5eb9":"def plot_hist_distribution(df, col):\n    sns.histplot(data=df, x=col, kde=True)\n    plt.ylabel(\"S\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i t\u01b0\u1ee3ng\")\n    plt.xlabel(\"C\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a {}\".format(col))\n    plt.show()\n\ndef plot_distribution(df, col):\n    vc = df[col].value_counts()\n    \n    print(vc)\n    print(vc.index)\n    print(vc.values)\n    \n    vc = vc.sort_index()\n    \n    plt.subplots(figsize=(1.5 * len(vc), 4))\n    \n    if len(vc.index) == 2 and isinstance(vc.index[0], bool):\n        indexx = [\"True\" if val else \"False\" for val in vc.index]\n        plt.bar(indexx, vc.values)\n    else:\n        plt.bar(vc.index, vc.values)\n    \n    plt.xticks(rotation=25)\n    plt.ylabel(\"S\u1ed1 l\u01b0\u1ee3ng \u0111\u1ed1i t\u01b0\u1ee3ng\")\n    plt.xlabel(\"C\u00e1c gi\u00e1 tr\u1ecb c\u1ee7a {}\".format(col))\n    plt.show()\n\ndef plot_stack_bar(matrix, colx, coly, xvalues, yvalues):\n    if len(yvalues) <= 100:\n        prev = np.zeros(len(xvalues))\n        \n        for i in range(len(yvalues)):\n            h = plt.bar(xvalues, matrix[i], bottom=prev, label=yvalues[i])\n            prev = prev + matrix[i]\n        plt.xticks(rotation=25)\n        plt.xlabel(colx)\n        plt.ylabel(\"T\u1ec9 l\u1ec7 - theo {}\".format(coly))\n        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n        plt.show()\n        \n    else:\n        print(\">>> S\u1ed1 l\u01b0\u1ee3ng gi\u00e1 tr\u1ecb kh\u00e1c nhau l\u1edbn h\u01a1n 3, s\u1eed d\u1ee5ng stack kh\u00f4ng hi\u1ec7u qu\u1ea3\")\n        \ndef plot_bar(matrix, colx, coly, xvalues, yvalues):\n    xticks = np.arange(len(xvalues))\n    width = 0.75 \/ len(yvalues)\n    \n    for i in range(len(yvalues)):\n        h = plt.bar(xticks + i * width, matrix[i], width=width, label=yvalues[i])\n    plt.xlabel(colx)\n    plt.ylabel(\"T\u1ec9 l\u1ec7 - theo {}\".format(coly))\n    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n    xticks_pos = [- (len(yvalues) - 1.5) \/ 2 * patch.get_width() + patch.get_xy()[0] for patch in h]\n\n    plt.xticks(xticks_pos, xvalues,  ha='right', rotation=25)\n    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n    plt.show()\n    \ndef plot_distribution_multicol(df, colx, coly, by=None, stack_bar=True, bar=True):\n    xvalues = sorted(df[colx].unique())\n    yvalues = sorted(df[coly].unique())\n    \n    cooc_matrix = np.zeros((len(yvalues), len(xvalues)))\n    \n    res = df.groupby([colx, coly]).size()\n    \n    print(res)\n    \n    for x, xvalue in enumerate(xvalues):\n        for y, yvalue in enumerate(yvalues):\n            try: \n                cooc_matrix[y][x] = res[xvalue, yvalue]\n            except Exception as e:\n                cooc_matrix[y][x] = 0\n    \n    fmt = 'g'\n    if by == 'x':\n        for x, xvalue in enumerate(xvalues):\n            cooc_matrix[:, x] = cooc_matrix[:, x] \/ sum(cooc_matrix[:, x])\n        fmt='.4g'\n    elif by == 'y':\n        for y, yvalue in enumerate(yvalues):\n            cooc_matrix[y] = cooc_matrix[y] \/ sum(cooc_matrix[y])\n        fmt='.4g'\n    \n    plt.subplots(figsize=(1 * len(xvalues), 1 * len(yvalues)))\n    color = sns.color_palette(\"Blues\", 100)\n    \n    sns.heatmap(cooc_matrix, square=True,\n                annot=True, \n                fmt=fmt,\n                cbar=False,\n                cmap=color,\n               xticklabels=xvalues,\n               yticklabels=yvalues)\n    plt.xlabel(colx)\n    plt.ylabel(coly)\n    plt.yticks(rotation=0) \n    if by == 'x':\n        plt.title(\"Chu\u1ea9n h\u00f3a theo {}\".format(colx))\n    elif by == 'y':\n        plt.title(\"Chu\u1ea9n h\u00f3a theo {}\".format(coly))\n    plt.show()\n    \n    if stack_bar:\n        plot_stack_bar(cooc_matrix, colx, coly, xvalues, yvalues)\n    if bar:\n        plot_bar(cooc_matrix, colx, coly, xvalues, yvalues)","0989d492":"cols = ['gender', 'Pstatus', 'Pedu', 'Mjob', 'Fjob', 'failures', 'famrel', 'Lifetime', 'Heavy', 'PStayAtHome', 'goout', 'age', 'guardian', 'studytime']\n\nfor col in cols:\n    plot_distribution(df, col)","d4b8d724":"cols2 = ['Grade', 'Alc', 'absences', 'age']\n\nfor col in cols2:\n    plot_hist_distribution(df, col)","50898eb2":"d3 = df.copy()\n\nnumberic_data = list(d3.describe().columns)\nprint(numberic_data)","c0081a4f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import f_regression, f_classif, SelectKBest, chi2\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\nimport pandas as pd\nfrom sklearn.preprocessing import OrdinalEncoder,LabelEncoder\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\n\nle=LabelEncoder()\nfor k in d3.columns:\n    if k not in numberic_data:\n        print(k)\n        d3[k]=le.fit_transform(d3[k])","3e59b1b3":"import os\nimport pickle\n\nfrom sklearn.manifold import TSNE\n\nlink_save_tsne_model = f'save_TSNE'\nprint(f'Save at{link_save_tsne_model}')\nos.makedirs(link_save_tsne_model, exist_ok=True)\nn_cluster = 3\nfrom sklearn.cluster import KMeans\n# parameters for cluster\nkmeans_kwargs = {\n    \"init\": \"random\",\n    \"n_init\": 10,\n    \"max_iter\": 300,\n    \"random_state\": 42,\n}\n\n#  dimensionality reduction\n\ntsne = TSNE()\n\nX = tsne.fit_transform(d3)\n\n\nfeatures = X\n\nlabels = None\n\nkmeans = KMeans(n_clusters=n_cluster, **kmeans_kwargs)\nlabels = kmeans.fit(features).predict(features)","797a9154":"import matplotlib as mpl\nmpl.style.use('seaborn')\n\nplt.scatter(X[:, 0], X[:, 1], c=labels)\nplt.show()","931a5f42":"cols = ['age', 'gender', 'Pstatus', 'Pedu', 'Mjob', 'Fjob', 'failures', 'famrel', 'absences', 'Alc', 'Lifetime', 'Heavy', 'PStayAtHome', 'Grade', 'goout', 'guardian', 'studytime']\n\ndf = df[cols]","fb18a78b":"import numpy as np\nfrom sklearn.datasets import make_swiss_roll\nfrom sklearn.metrics.pairwise import euclidean_distances\nfrom sklearn.preprocessing import LabelEncoder\n\nimport plotly.express as ex\n\nnp.random.seed(40)","39786dcf":"def sammon(data, target_dim=2, max_iterations=250, max_halves=10):\n    \"\"\"\n    Adopted from the Matlab implementation by Dr. Gavin C. Cawley.\n    Matlab source can be found here:\n\n    https:\/\/people.sc.fsu.edu\/~jburkardt\/m_src\/profile\/sammon_test.m\n    \"\"\"\n    global y_rand\n    global y_rand_3d\n    \n    TolFun = 1 * 10 ** (-9)\n\n    D = euclidean_distances(data, data)\n    N = data.shape[0]\n    scale = np.sum(D.flatten('F'))\n    D = D + np.identity(N)\n    D_inv = np.linalg.inv(D)\n\n    y = np.random.randn(N, target_dim)\n    \n    one = np.ones((N, target_dim))\n    d = euclidean_distances(y, y) + np.identity(N)\n    d_inv = np.linalg.inv(d)\n    delta = D - d\n    E = np.sum(np.sum(np.power(delta, 2) * D_inv))\n\n    for i in range(max_iterations):\n        delta = d_inv - D_inv\n        deltaone = np.dot(delta, one)\n        g = np.dot(delta, y) - y * deltaone\n        dinv3 = np.power(d_inv, 3)\n        y2 = np.power(y, 2)\n        H = np.dot(dinv3, y2) - deltaone - 2 * np.multiply(y, np.dot(dinv3, y)) + np.multiply(y2, np.dot(dinv3, one))\n        s = np.divide(-np.transpose(g.flatten('F')), np.transpose(np.abs(H.flatten('F'))))\n        y_old = y\n\n    for j in range(max_halves):\n        [rows, columns] = y.shape\n        y = y_old.flatten('F') + s\n        y = y.reshape(rows, columns)\n        d = euclidean_distances(y, y) + np.identity(N)\n        d_inv = np.linalg.inv(d)\n        delta = D - d\n        E_new = np.sum(np.sum(np.power(delta, 2) * D_inv))\n\n        if E_new < E:\n            break\n        else:\n            s = 0.5 * s\n\n    E = E_new\n    E = E * scale\n    return (y, E)\n\n\ndef get_sammon_df(df, ndim):\n    cat_col = df.select_dtypes(exclude=['bool', 'int64', 'float64'])\n\n    d_all_num = df.copy()\n\n    for col in cat_col:\n        label_encoder = LabelEncoder()\n        d_all_num[col] = label_encoder.fit_transform(d_all_num[col])\n\n    y, E = sammon(d_all_num, ndim)\n\n    return y","782a3d32":"sammon_2d = get_sammon_df(df, 2)\nsammon_3d = get_sammon_df(df, 3)","68dc5ca9":"def plot_sammon_3d(z, label):\n    label = df[label].apply(str).values\n\n    z = np.concatenate([z, label[:, None]], axis=1)\n\n    fig = ex.scatter_3d(z, x=0, y=1, z=2, color=3)\n    fig.update_layout(\n        autosize=False,\n        width=1000,\n        height=1000,\n        paper_bgcolor=\"LightSteelBlue\",\n    )\n    fig.update_traces(marker=dict(size=5,\n                              line=dict(width=0.2)),\n                  selector=dict(mode='markers'))\n    fig.show()\n    \n    \ndef plot_sammon_2d(z, label):\n    label = df[label].apply(str).values\n\n    z = np.concatenate([z, label[:, None]], axis=1)\n\n    fig = ex.scatter(z, x=0, y=1, color=2)\n    fig.update_layout(\n        autosize=False,\n        width=1000,\n        height=1000,\n        paper_bgcolor=\"LightSteelBlue\",\n    )\n    fig.update_traces(marker=dict(size=5,\n                              line=dict(width=0.2)),\n                  selector=dict(mode='markers'))\n    fig.show()","5ca9f31d":"plot_sammon_2d(sammon_2d, 'Heavy')","0b17a0a6":"plot_sammon_2d(sammon_2d, 'Lifetime')","13f6fec1":"plot_sammon_3d(sammon_3d, 'Heavy')","d78fd9ab":"plot_sammon_3d(sammon_3d, 'Lifetime')","05a77eb0":"from sklearn import decomposition\nfrom sklearn import datasets\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\n\ndef get_PCA(d4):\n    cat_col = d4.select_dtypes(exclude=['bool', 'int64', 'float64']).columns.values\n\n    d_all_num = d4.copy()\n\n    for col in cat_col:\n        label_encoder = LabelEncoder()\n        d_all_num[col] = label_encoder.fit_transform(d_all_num[col])\n    \n    pca = PCA(n_components=2)\n        \n    z = pca.fit_transform(d_all_num)\n    \n    return z, pca","edea93a9":"d_pca = df.copy()","c83aceb9":"from scipy import stats\n\nd_pca = df.copy()\n\nd_pca['absences'] = np.log1p(d_pca['absences'])\nd_pca['Grade'] = stats.zscore(d_pca['Grade']) ","8daa2ac1":"mapping, pca = get_PCA(d_pca.drop(['Alc', 'Lifetime', 'Heavy'], axis=1))","ee9d4bc6":"a, b = pca.components_\nc = np.sqrt(a ** 2 + b ** 2)\nc","673b297c":"col_name = df.drop(['Alc', 'Lifetime', 'Heavy'], axis=1).columns\n\ncol_importance = pd.DataFrame(c)\ncol_importance.columns = ['Importance']\ncol_importance.index = col_name\ncol_importance = col_importance.sort_values(by = 'Importance')","2a5613b1":"plt.barh(col_importance.index, col_importance.values[:, 0])\nplt.xlabel('Importance')\nplt.ylabel('Attribute Name')\nplt.show()","d500946a":"def plot_feature_reduce(z, label):\n    z = np.concatenate([z, label[:, None]], axis=1)\n\n    fig = ex.scatter(z, x=0, y=1, color=2)\n    fig.update_layout(\n        autosize=False,\n        width=500,\n        height=500,\n        paper_bgcolor=\"LightSteelBlue\",\n    )\n    fig.update_traces(marker=dict(size=5,\n                              line=dict(width=0.2)),\n                  selector=dict(mode='markers'))\n    fig.update_traces(marker=dict(size=5,\n                                  line=dict(width=0.2)),\n                      selector=dict(mode='markers'))\n    fig.show()","8e194cbb":"plot_feature_reduce(mapping, df['Heavy'].replace({True: 'True', False: 'False'}).values)","a4df54ad":"plot_feature_reduce(mapping, df['Lifetime'].replace({True: 'True', False: 'False'}).values)","0e99e831":"df3['gender'] = df3['gender'].replace({'F': 0, 'M': 1})\n\ncorr = df3[cols].corr()","85acb142":"plt.subplots(figsize=(1 * corr.shape[0],1 * corr.shape[1]))\nsns.heatmap(corr, square=True,\n                annot=True, \n                fmt=\".2g\",\n                cbar=False, \n            cmap='Blues')\nplt.savefig('foo.png')\nplt.show()","88b556d0":"df.to_csv(\"Hello.csv\", index=False)","2926e7e8":"import catboost as cb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.metrics import classification_report","943aadec":"X = df.drop(['Alc', 'Lifetime', 'Heavy'], axis=1)\ny = df['Heavy'].replace({\n    False: 0,\n    True: 1\n})\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)\n\ncat_col = df.select_dtypes(exclude=['bool', 'int64', 'float64']).columns.values\n\ntrain_dataset = cb.Pool(X_train,y_train, cat_features=cat_col)\ntest_dataset = cb.Pool(X_test,y_test, cat_features=cat_col)\n\nmodel = cb.CatBoostClassifier(loss_function='CrossEntropy', eval_metric='Accuracy')\nmodel.fit(train_dataset, logging_level='Silent')\n\npred = model.predict(test_dataset)\nprint(accuracy_score(pred, y_test))","56f02c7a":"print(classification_report(y_test, pred))","2b270eeb":"def plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n    \n    fi_df = fi_df.set_index(fi_df['feature_names'])\n    fi_df.loc['reason', 'feature_importance'] = 0.9784249\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n    \n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')\n    plt.savefig('foo.png')\n    \n    return fi_df['feature_names']\n    \nfeature_sorted = plot_feature_importance(model.get_feature_importance(),X.columns,'CATBOOST')","ea914025":"from sklearn.metrics import mean_squared_error as MSE\n\nX = df.drop(['Alc', 'Lifetime', 'Heavy'], axis=1)\ny = df['Lifetime'].replace({\n    False: 0,\n    True: 1\n})\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)\n\ncat_col = df.select_dtypes(exclude=['bool', 'int64', 'float64']).columns.values\n\ntrain_dataset = cb.Pool(X_train,y_train, cat_features=cat_col)\ntest_dataset = cb.Pool(X_test,y_test, cat_features=cat_col)\n\nmodel = cb.CatBoostRegressor(loss_function=\"RMSE\",\n                             eval_metric=\"RMSE\",\n                             od_type=\"Iter\")\nmodel.fit(train_dataset, logging_level='Silent')\n\npred = model.predict(test_dataset)\n\nprint(MSE(pred, y_test))","319cf6b9":"def plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(10,8))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + ' FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')\n    \n    return fi_df['feature_names']\n    \nfeature_sorted = plot_feature_importance(model.get_feature_importance(),X.columns,'CATBOOST')","d149b465":"fig = ex.scatter_matrix(df[['Heavy', 'gender', 'goout', 'studytime','Grade', 'Pedu', 'famrel']])\nfig.update_layout(\n    autosize=False,\n    width=1300,\n    height=1300\n)\nfig.update_traces(selected_marker_color='#ff0000', marker_size=4)\n# fig.update_traces(showupperhalf=False)\nfig.show()","e0c1e24f":"df3['gender'] = df3['gender'].replace({'F': 0, 'M': 1})\ndf3['Pstatus'] = df3['Pstatus'].replace({'A': 0, 'T': 1})","94117f6c":"cols_parallel = ['famrel', 'Pedu', 'age', 'goout', 'Heavy']","b20283c6":"for col in cols_parallel:\n    a = np.random.normal(scale=0.01, size = len(df3))\n    df3[col] = df3[col] + a","f169d90d":"samples = np.random.permutation(len(df3))[:100]","bd9c03f6":"import plotly.graph_objects as go\nimport plotly.graph_objs as gos \n\nfig = px.parallel_coordinates(df3[cols_parallel].iloc[samples], color=\"Heavy\",\n                              dimensions=cols_parallel, \n                              color_continuous_scale=[[0, 'red'], [1, 'green']])\nprint(fig)\nfig.update_traces(line=dict(cmin=0, cmax=1))\nfig.show()","2decd51e":"dem = df['gender'].value_counts()","4e38c923":"labels=dem.index.values\nlabels","9d2d01f1":"plt.pie(dem, labels=labels, autopct='%.2f', colors = ['#4991D0', '#F3F35C'], startangle=90)\nplt.legend()\nplt.savefig('helo.png')\nplt.show()","aa016c5a":"plot_distribution(df, 'gender')","4e51453c":"plot_distribution_multicol(df, 'gender', 'Heavy', 'x')","4c8b2478":"plot_distribution_multicol(df, 'Heavy', 'gender')","6d24eb42":"plot_distribution_multicol(df, 'Heavy', 'gender', 'x')","91f446d8":"plot_distribution_multicol(df, 'gender', 'Lifetime', 'x')","b0c28c51":"plot_distribution_multicol(df, 'gender', 'Lifetime')","2f039c0d":"plot_distribution(df, 'famrel')","30155e2a":"plot_distribution_multicol(df, 'famrel', 'Heavy')","1c70b545":"plot_distribution_multicol(df, 'famrel', 'Heavy', 'x')","be455e4b":"plot_distribution(df, 'guardian')","6e2acbf3":"plot_distribution_multicol(df, 'guardian', 'Heavy')","4907cf50":"plot_distribution_multicol(df, 'guardian', 'Heavy', 'x')","7dee01ff":"plot_distribution_multicol(df, 'guardian', 'Lifetime')","3c539797":"plot_distribution_multicol(df, 'guardian', 'Lifetime', 'x')","1bdb3cc6":"plot_distribution_multicol(df, 'Pstatus', 'Lifetime', 'x')","4f276c0d":"plot_distribution(df, 'Mjob')","a3c2e643":"plot_distribution_multicol(df, 'Mjob', 'Heavy', 'x')","4211782b":"plot_distribution_multicol(df, 'Fjob', 'Heavy', 'x')","4947f697":"def plot_heatmap_grid(df, col1, col2, col3, col3_value, normalize):\n    xvalues = df[col1].unique()\n    yvalues = df[col2].unique()\n    \n    res = df.groupby([col1, col2]).size()\n    res_2 = df.groupby([col1, col2, col3]).size()\n    \n    cooc_matrix = np.zeros((len(yvalues), len(xvalues)), dtype=\"float64\")\n    \n    for x, xvalue in enumerate(xvalues):\n        for y, yvalue in enumerate(yvalues):\n            try: \n                if not normalize:\n                    cooc_matrix[y][x] = res_2[xvalue, yvalue, col3_value]\n                else:\n                    cooc_matrix[y][x] = res_2[xvalue, yvalue, col3_value] \/ res[xvalue, yvalue]\n            except Exception as e:\n                cooc_matrix[y][x] = 0\n    \n    plt.subplots(figsize=(1 * len(xvalues), 1 * len(yvalues)))\n    sns.heatmap(cooc_matrix, annot=True, cbar=False)\n    plt.title(\"Percentage by {}: {}\".format(col3, col3_value))\n    plt.xlabel(col1)\n    plt.ylabel(col2)\n    plt.show()\n    \nplot_heatmap_grid(df, 'Mjob', 'studytime', 'Heavy', True, True)","0c7bcb3c":"plot_hist_distribution(df, 'absences')\nplot_hist_distribution(df, 'Grade')\nplot_distribution(df, 'failures')\nplot_distribution(df, 'goout')","e4373d01":"plot_hist_distribution(df[df['Heavy'] == True], 'Grade')","343689f9":"plot_hist_distribution(df[df['Heavy'] == False], 'Grade')","59dca503":"plot_hist_distribution(df[df['Lifetime'] == True], 'Grade')","5859b982":"plot_hist_distribution(df[df['Lifetime'] == False], 'Grade')","7a28af3a":"plot_hist_distribution(df, 'absences')","d886d0d9":"plot_distribution_multicol(df, 'absences', 'Heavy', 'x')","eb873b36":"plot_distribution(df, 'failures')","d58fd9fb":"plot_distribution_multicol(df, 'failures', 'Heavy', 'x')","05c63363":"plot_distribution_multicol(df, 'failures', 'Lifetime', 'x')","1a15e9ac":"plot_distribution(df, 'studytime')\nplot_distribution(df, 'goout')","b5001c19":"plot_distribution_multicol(df, 'studytime', 'Lifetime', 'x')","4d76b6a1":"plot_distribution_multicol(df, 'goout', 'Heavy', 'x')","b92f2ee3":"plot_distribution_multicol(df, 'goout', 'Lifetime', 'x')","e6ff97c9":"plot_distribution(df, 'Pedu')","30a09e74":"plot_distribution_multicol(df, 'Pedu', 'Heavy', 'x')","a0d9d78f":"plot_distribution_multicol(df, 'Pedu', 'Lifetime', 'x')","7bafba1f":"dc = df.copy()\n\nnumerical_col = dc.describe().columns\n\nfor col in numerical_col:\n    t = np.random.normal(scale=0.05, size=(len(dc)))\n    dc[col] += t","91ec6cc1":"numerical_col","18e2a3b8":"dc['absences'] = np.log1p(dc['absences'])","2c8874be":"fig = px.scatter_matrix(dc[['Alc', 'absences', 'Grade', 'goout', 'failures']])\nfig.update_layout(\n    autosize=False,\n    width=1000,\n    height=1000\n)\nfig.update_traces(selected_marker_color='#ff0000', marker_size=4)\nfig.update_traces(showupperhalf=False)\nfig.show()","ce565f46":"S\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n \u0111\u1ec1u l\u1edbn \u1edf c\u00e1c m\u1ee9c th\u1eddi gian h\u1ecdc \"< 2 gi\u1edd\" v\u00e0 \"> 10 gi\u1edd\" v\u1edbi t\u1ec9 l\u1ec7 l\u1ea7n l\u01b0\u1ee3t l\u00e0 18% v\u00e0 14%.\n\nC\u00f3 th\u1ec3 th\u1ea5y r\u1eb1ng l\u01b0\u1ee3ng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n s\u1ebd nhi\u1ec1u h\u01a1n khi th\u1eddi gian h\u1ecdc \u1edf c\u00e1c m\u1ee9c \u0111\u1eb7c bi\u1ebft (qu\u00e1 \u00edt\/qu\u00e1 nhi\u1ec1u). D\u1ec5 th\u1ea5y c\u00f3 s\u1ef1 \u1ea3nh h\u01b0\u1edfng b\u1edfi \u00e1p l\u1ef1c h\u1ecdc t\u1eadp trong l\u01b0\u1ee3ng r\u01b0\u1ee3u bia s\u1eed d\u1ee5ng.","ce78c1d4":"C\u00e1c c\u1ed9t \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i bao g\u1ed3m: \n- 'gender' \n- 'Pstatus'\n- 'Pedu'\n- 'Mjob', 'Fjob'\n- 'failures'\n- 'famrel'\n- 'absences'\n- 'Alc'\n- 'Lifetime'\n- 'Heavy'\n- 'PStayAtHome'\n- 'Grade'\n- 'Goout'\n- 'Age'\n- 'guardian'\n","58473f44":"### >>> K\u1ebft lu\u1eadn: M\u1ed1i quan h\u1ec7 gia \u0111\u00ecnh c\u00e0ng x\u1ea5u th\u00ec h\u1ecdc sinh c\u00e0ng \u0111\u1ec3 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia \u1edf m\u1ee9c cao","322ed267":"S\u1eed d\u1ee5ng thu\u1eadt to\u00e1n PCA v\u00e0 t-SNE \u0111\u1ec3 \u0111\u00e1nh gi\u00e1 ph\u00e2n b\u1ed1 v\u00e0 nghi\u00ean c\u1ee9u s\u1ef1 \u0111\u00f3ng g\u00f3p c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh v\u00e0o k\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng.","ea854483":"S\u1eed d\u1ee5ng Sammon Distance v\u00e0 plot tr\u00ean mi\u1ec1n 2D v\u00e0 3D.","46b2a2a6":"T\u1ea1o th\u00eam c\u00e1c \u0111\u1eb7c trung m\u1edbi bao g\u1ed3m: \n- Alc: L\u00e0 trung b\u00ecnh l\u01b0\u1ee3ng bia s\u1eed d\u1ee5ng trong tu\u1ea7n. T\u00ednh b\u1eb1ng (Dalc * 5 + Walc * 2) \/ 7, trong \u0111\u00f3 Dalc l\u00e0 m\u1ee9c \u0111\u1ed9 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia t\u1ea1i c\u00e1c ng\u00e0y trong tu\u1ea7n, v\u00e0 Walc l\u00e0 m\u1ee9c \u0111\u1ed9 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia t\u1ea1i c\u00e1c ng\u00e0y cu\u1ed1i tu\u1ea7n.\n- Pedu: L\u00e0 tr\u00ecnh \u0111\u1ed9 gi\u00e1o d\u1ee5c c\u1ee7a cha m\u1eb9. T\u00ednh b\u1eb1ng s\u1ed1 l\u1edbn nh\u1ea5t gi\u1eef Medu v\u00e0 Fedu.\n- Lifetime: Th\u1ec3 hi\u1ec7n h\u1ecdc sinh c\u00f3 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia hay kh\u00f4ng. C\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng 1 n\u1ebfu Alc > 1 v\u00e0 b\u1eb1ng 0 trong tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1ee3c l\u1ea1i\n- Heavy: Th\u1ec3 hi\u1ec7n l\u01b0\u1ee3ng r\u01b0\u1ee3u bia s\u1eed d\u1ee5ng c\u00f3 \u0111\u00e1ng b\u00e1o \u0111\u1ed9ng hay kh\u00f4ng. C\u00f3 gi\u00e1 tr\u1ecb b\u1eb1ng 1 n\u1ebfu Alc > 3, v\u00e0 b\u1eb1ng 0 trong tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1ee3c l\u1ea1i.\n- PStayAtHome: Th\u1ec3 hi\u1ec7n li\u1ec7u cha m\u1eb9 c\u1ee7a h\u1ecdc sinh c\u00f3 \u1edf nh\u00e0 c\u1ee7a ng\u00e0y hay kh\u00f4ng ?\n- Grade: Th\u1ec3 hi\u1ec7n t\u1ed5ng s\u1ed1 \u0111i\u1ec3m m\u00e0 h\u1ecdc sinh \u0111\u00f3 \u0111\u1ea1t \u0111\u01b0\u1ee3c trong m\u00f4n h\u1ecdc ti\u1ebfng B\u1ed3 \u0110\u00e0o Nha.","8721f56b":"Ph\u1ea7n l\u1edbn c\u00e1c tr\u01b0\u1eddng h\u1ee3p, ng\u01b0\u1eddi m\u1eb9 l\u00e0 ng\u01b0\u1eddi gi\u00e1m h\u1ed9, sau \u0111\u00f3 \u0111\u1ebfn ng\u01b0\u1eddi cha. S\u1ed1 ng\u01b0\u1eddi kh\u00e1c cha m\u1eb9 l\u00e0m gi\u00e1m h\u1ed9 l\u00e0 th\u1ea5p nh\u1ea5t.","2de8c206":"### Ph\u00e2n c\u1ee5m time","c3a03cb6":"Ta th\u1ea5y r\u1eb1ng t\u1ec9 l\u1ec7 h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n ph\u00e2n b\u1ed1 \u0111\u1ec1u trong c\u00e1c m\u1ee9c t\u1eeb 1 \u0111\u1ebfn 4. Do \u0111\u00f3 ta c\u00f3 th\u1ec3 k\u1ebft lu\u1eadn r\u1eb1ng y\u1ebfu t\u1ed1 tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n c\u1ee7a cha m\u1eb9 kh\u00f4ng \u1ea3nh h\u01b0\u1edfng qu\u00e1 nhi\u1ec1u \u0111\u1ebfn vi\u1ec7c s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n \u1edf con c\u00e1i.","b43efffe":"Nh\u01b0 \u0111\u1ed1i v\u1edbi c\u00e1c thu\u1ed9c t\u00ednh kh\u00e1c, so v\u1edbi t\u1ed5ng s\u1ed1 h\u1ecdc sinh trong c\u00f9ng m\u1ed9t c\u1ee5m, s\u1ed1 h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia \u1edf m\u1ee9c nghi\u1ec7n l\u00e0 th\u1ea5p h\u01a1n. Gi\u1edd ta s\u1ebd x\u00e9t theo t\u1ec9 l\u1ec7.","6f9c6ff8":"K\u1ec3 c\u1ea3 \u1edf tr\u01b0\u1eddng h\u1ee3p h\u1ecdc sinh t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia, tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n c\u1ee7a cha m\u1eb9 kh\u00f4ng th\u1ef1c s\u1ef1 qu\u00e1 \u1ea3nh h\u01b0\u1edfng t\u1edbi t\u1ec9 l\u1ec7 h\u1ecdc sinh c\u00f3 t\u1eebng s\u1eed d\u1ee5ng.","8fba71ed":"Thay th\u1ebf c\u00e1c gi\u00e1 tr\u1ecb s\u1ed1 v\u00e0 c\u00e1c gi\u00e1 tr\u1ecb vi\u1ebft t\u1eaft b\u1eb1ng \u00fd ngh\u0129a \u0111\u1ea7y \u0111\u1ee7 t\u01b0\u01a1ng \u1ee9ng","2a0abb4d":"Kh\u00f4ng c\u00f3 qu\u00e1 nhi\u1ec1u s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa gi\u1eefa t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n gi\u1eefa nh\u00f3m h\u1ecdc sinh c\u00f3 cha m\u1eb9 ly th\u00e2n v\u00e0 nh\u00f3m c\u00f2n l\u1ea1i.","6b8abb9f":"### \u0110\u1ed1i v\u1edbi c\u00e1c c\u1ee7a cha m\u1eb9, vi\u1ec7c m\u1ed9t ng\u01b0\u1eddi \u1edf nh\u00e0 th\u00ec c\u00f3 khi\u1ebfn cho l\u01b0\u1ee3ng r\u01b0\u1ee3u bia s\u1eed d\u1ee5ng c\u1ee7a con c\u00e1i h\u1ecd gi\u1ea3m hay kh\u00f4ng ?\n- MJob\n- FJob \n","fb4265cd":"Feature selection \u2013 s\u1eed d\u1ee5ng b\u1ea3ng correlation \u0111\u1ec3 l\u1ecdc b\u1ecf nh\u1eefng d\u1eef li\u1ec7u m\u00e0 qu\u00e1 ph\u1ee5 thu\u1ed9c v\u00e0o nhau (nh\u01b0ng trong b\u1ed9 d\u1eef li\u1ec7u n\u00e0y th\u00ec kh\u00f4ng c\u00e1i n\u00e0o nh\u01b0 th\u1ebf c\u1ea3)","fe861589":"T\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh c\u00f3 quan h\u1ec7 gia \u0111\u00ecnh \u1edf m\u1ee9c R\u1ea5t T\u1ec7 v\u00e0 T\u1ec7 kh\u00e1 l\u00e0 nh\u1ecf so v\u1edbi c\u00e1c m\u1ee9c \u0111\u1ed9 kh\u00e1c, tuy nhi\u00ean, t\u1ed5ng c\u1ee7a ch\u00fang v\u1eabn \u0111\u1ea1t t\u1edbi 50, n\u00ean v\u1eabn c\u00f3 \u00fd ngh\u0129 th\u1ed1ng k\u00ea v\u00e0 \u0111\u01b0\u1ee3c gi\u1eef l\u1ea1i.","dc934991":"Plot feature mapping with attribute 'Heavy'.","1feb765b":"C\u00f4ng th\u1ee9c h\u00f3a \u2013 m\u00f4 h\u00ecnh h\u00f3a c\u00e1c quan h\u1ec7\n\n\u0110\u1ecbnh th\u1eed contigency wheel m\u00e0 c\u00f3 v\u1ebb kh\u00f4ng \u1ed5n l\u1eafm, kh\u00f4ng hi\u1ec3u n\u1eefa, ch\u1eafc plot th\u00f4ng th\u01b0\u1eddng b\u1eb1ng graph th\u00f4i :<","67e328ab":"T\u1ec9 l\u1ec7 n\u00e0y c\u0169ng t\u0103ng d\u1ea7n theo m\u1ee9c \u0111\u1ed9 ra ngo\u00e0i, cho th\u1ea5y c\u00f3 s\u1ef1 t\u01b0\u01a1ng quan l\u1edbn gi\u1eefa vi\u1ec7c h\u1ecdc sinh ra ngo\u00e0i ch\u01a1i v\u1edbi b\u1ea1n l\u00e0 l\u01b0\u1ee3ng r\u01b0\u1ee3u bia ti\u00eau th\u1ee5 \u1edf c\u1ea3 m\u1ee9c t\u1eebng d\u00f9ng v\u00e0 m\u1ee9c nghi\u1ec1n","343d6bfe":"Th\u1ef1c hi\u1ec7n scale c\u00e1c thu\u1ed9c t\u00ednh absences v\u00e0 Grade, v\u1edbi absences s\u1eed d\u1ee5ng log(x + 1) v\u00e0 Grade s\u1eed d\u1ee5ng Min Max Scaler","e76d757c":"X\u00e9t v\u1ec1 tr\u00ecnh \u0111\u1ed9 h\u1ecdc v\u1ea5n c\u1ee7a cha m\u1eb9, ch\u1ee7 y\u1ebfu t\u1eadp trung \u1edf m\u1ee9c 3 v\u00e0 m\u1ee9c 5. Ta s\u1ebd b\u1ecf qua m\u1ee9c 0 do s\u1ed1 li\u1ec7u th\u1ed1ng k\u00ea kh\u00f4ng \u0111\u1ee7 (1 \u0111\u1ed1i t\u01b0\u1ee3ng)","cfbe5eb2":"# Kh\u1ea3o s\u00e1t d\u1eef li\u1ec7u","2d6abe7b":"### Vi\u1ec7c s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn h\u1ecdc t\u1eadp nh\u01b0 th\u1ebf n\u00e0o ?\n- S\u1ed1 ng\u00e0y ngh\u1ec9\n- \u0110i\u1ec3m s\u1ed1\n- Failure \u2013 s\u1ed1 m\u00f4n b\u1ecb r\u1edbt\n- S\u1ed1 l\u1ea7n \u0111i ra ngo\u00e0i ch\u01a1i","6bc9569e":"# Tr\u1ea3 l\u1eddi c\u00e1c c\u00e2u h\u1ecfi","a652d45b":"### Trong c\u00e1c gia \u0111\u00ecnh c\u00f3 quan h\u1ec7 gi\u1eefa c\u00e1c th\u00e0nh vi\u00ean kh\u00f4ng t\u1ed1t th\u00ec c\u00f3 \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn m\u1ee9c \u0111\u1ed9 d\u1eed d\u1ee5ng r\u01b0\u1ee3u bia hay kh\u00f4ng ?\n- famrel","6c858a9b":"### Ch\u1ec9 gi\u1eef l\u1ea1i v\u00e0 ph\u00e2n t\u00edch m\u1ed9t s\u1ed1 thu\u1ed9c t\u00ednh quan tr\u1ecdng","11c03056":"T\u1ec9 l\u1ec7 h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n \u1edf c\u00e1c trong nh\u00f3m ngh\u1ec9 >0 bu\u1ed5i \u0111\u1ec1u cao h\u01a1n nh\u00f3m kh\u00f4ng ngh\u1ec9 bu\u1ed5i n\u00e0o (20%, 19%, 14% \u1edf c\u00e1c nh\u00f3m ngh\u1ec9 1\/2\/>=3 bu\u1ed5i so v\u1edbi 9% \u1edf nh\u00f3m \u0111i h\u1ecdc \u0111\u1ea7y \u0111\u1ee7)","c9fab237":"V\u1ec1 t\u1ed5ng quan, s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c cao \u0111\u1ec1u nh\u1ecf h\u01a1n r\u1ea5t nhi\u1ec1u so v\u1edbi s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh kh\u00f4ng s\u1eed d\u1ee5ng.","2a85cfbc":"Plot feature mapping with Attribute \"Lifetime\"","a014b1b4":"Assign attribute name and sorted.","20ec589d":"S\u1eed d\u1ee5ng b\u1ea3ng scatter matrix b\u00ean plotly express \u0111\u1ec3 nghi\u00ean c\u1ee9u s\u1ef1 ph\u00e2n b\u1ed1 c\u1ee7a c\u00e1c thu\u1ed9c t\u00ednh","69b1833a":"### \u0110\u1ed1i v\u1edbi gia \u0111\u00ecnh kh\u00f4ng c\u00f3 \u0111\u1ea7y \u0111\u1ee7 c\u1ea3 cha v\u00e0 m\u1eb9 th\u00ec l\u01b0\u1ee3ng r\u01b0\u1ee3u bia s\u1eed d\u1ee5ng c\u00f3 kh\u00e1c nhau hay kh\u00f4ng ?\n- guardian\n- Pstatus","ffb6dcb8":"V\u1ec1 t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng, s\u1ed1 h\u1ecdc sinh n\u1eef c\u00f3 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia nh\u1ec9nh h\u01a1n s\u1ed1 h\u1ecdc sinh nam m\u1ed9t ch\u00fat. Tuy nhi\u00ean, khi x\u00e9t v\u1ec1 t\u1ec9 l\u1ec7, ta th\u1ea5y t\u1ec9 l\u1ec7 h\u1ecdc sinh nam t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia l\u1edbn h\u01a1n.","e9d03f54":"\u0110\u1ed1i v\u1edbi tr\u01b0\u1eddng h\u1ee3p ng\u01b0\u1eddi gi\u00e1m h\u1ed9 kh\u00f4ng ph\u1ea3i l\u00e0 cha m\u1eb9, t\u1ec9 l\u1ec7 h\u1ecdc sinh nghi\u1ec1n r\u01b0\u1ee3u cao h\u01a1n r\u00f5 r\u1ec7t (17% \u0111\u1ed1i v\u1edbi ng\u01b0\u1eddi gi\u00e1m h\u1ed9 kh\u00e1c cha m\u1eb9, so v\u1edbi 11% v\u00e0 9% \u1edf l\u1ea7n l\u01b0\u1ee3t l\u00e0 cha v\u00e0 m\u1eb9). ","a5941343":"# \u0110\u1eb7t v\u1ea5n \u0111\u1ec1","7f703dee":"Trong nh\u00f3m ngh\u1ec1 nghi\u1ec7p, c\u00f3 c\u00e1c nh\u00f3m ngh\u1ec1 li\u00ean quan \u0111\u1ebfn gi\u00e1o d\u1ee5c v\u00e0 s\u1ee9c kh\u1ecfe. Ta s\u1ebd t\u1eadp trung xem x\u00e9t t\u1ec9 l\u1ec7 \u1edf c\u00e1c ngh\u00e0nh n\u00e0y v\u00e0 \u0111\u1ed1i chi\u1ebfu v\u1edbi c\u00e1c ng\u00e0nh kh\u00e1c \u0111\u1ec3 l\u00e0m r\u00f5 s\u1ef1 kh\u00e1c bi\u1ec7t","17a495a6":"Kh\u00f4ng c\u00f3 qu\u00e1 nhi\u1ec1u s\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa t\u1ec9 l\u1ec7 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia \u1edf c\u00e1c nh\u00f3m h\u1ecdc sinh c\u00f3 ng\u01b0\u1eddi gi\u00e1m h\u1ed9 kh\u00e1c nhau. T\u1eeb \u0111\u00f3, ta c\u00f3 th\u1ec3 suy lu\u1eadn r\u1eb1ng t\u1ec9 l\u1ec7 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia kh\u00f4ng ch\u1ecbu \u1ea3nh h\u01b0\u1edfng qu\u00e1 nhi\u1ec1u t\u1eeb vi\u1ec7c ai l\u00e0 ng\u01b0\u1eddi gi\u00e1m h\u1ed9.\n\nGi\u1edd x\u00e9t c\u00e1c gi\u1eefa nh\u00f3m h\u1ecdc sinh c\u00f3 b\u1ed1 m\u1eb9 s\u1ed1ng chung ho\u1eb7c ly th\u00e2n:","c9e546d4":"X\u00e2y d\u1ef1ng h\u00e0m bi\u1ec3u di\u1ec5n tr\u1ef1c quan ph\u00e2n ph\u1ed1i theo c\u00e1c \u0111\u1eb7c tr\u01b0ng","e2fdd2fc":"Trong b\u1ed9 d\u1eef li\u1ec7u, t\u1ec9 l\u1ec7 n\u1eef gi\u1edbi nhi\u1ec1u h\u01a1n nam gi\u1edbi.","368eda80":"Ta th\u1ea5y c\u00f3 s\u1ef1 t\u01b0\u01a1ng quan l\u1edbn gi\u1eefa s\u1ed1 ng\u00e0y ngh\u1ec9 h\u1ecdc v\u00e0 t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia. Trong **Bi\u1ec3u \u0111\u1ed3 b\u00ean tr\u00ean** ta th\u1ea5y r\u1eb1ng t\u1ec9 l\u1ec7 h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia s\u1ebd c\u00f3 xu h\u01b0\u1edbng t\u0103ng d\u1ea7n c\u00f9ng v\u1edbi s\u1ed1 ng\u00e0y h\u1ecdc sinh \u0111\u00f3 ngh\u1ec9.\n\n### >>> K\u1ebft lu\u1eadn: H\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia \u1edf m\u1ee9c cao s\u1ebd c\u00f3 xu h\u01b0\u1edbng ngh\u1ec9 h\u1ecdc nhi\u1ec1u h\u01a1n. **C\u00e1i n\u00e0y c\u1ea7n s\u1eed d\u1ee5ng bi\u1ec3u \u0111\u1ed3 kh\u00e1c \u0111\u1ec3 l\u00e0m r\u00f5 quan h\u1ec7 v\u1edbi s\u1ed1 l\u01b0\u1ee3ng**","53895b0e":"Tr\u1ef1c quan c\u00e1c gi\u00e1 tr\u1ecb v\u1ec1 \u0111\u1ed9 l\u1ec7ch (Skewness) v\u00e0 \u0111\u1ed9 nhon (Kurtosis)","d6445b37":"S\u1ed1 ng\u00e0y ngh\u1ec9 c\u1ee7a h\u1ecdc sinh c\u00f3 t\u00ednh gi\u1ea3m d\u1ea7n theo h\u00e0m ngh\u1ecbch bi\u1ebfn 1\/x","f7bef303":"B\u1ed9 d\u1eef li\u1ec7u g\u1ed3m c\u00f3 649 \u0111\u1ed1i t\u01b0\u1ee3ng, v\u00e0 ch\u1ee9a c\u00e1c \u0111\u1eb7c tr\u01b0ng \u0111\u1ec3 hi\u1ec7n c\u00e1c quan h\u1ec7 x\u00e3 h\u1ed9i, t\u00ecnh tr\u1ea1ng s\u1ee9c kh\u1ecfe c\u1ee7a h\u1ecdc sinh trong t\u1ea1i 2 tr\u01b0\u1eddng \u1edf B\u1ed3 \u0110\u00e0o Nha.","5f30fe1e":"### K\u1ebft lu\u1eadn: Do \u0111\u00f3, ta c\u00f3 th\u1ec3 k\u1ebft lu\u1eadn t\u1eeb b\u1ed9 d\u1eef li\u1ec7u r\u1eb1ng s\u1ed1 h\u1ecdc sinh nam s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c Heavy l\u00e0 nhi\u1ec1u h\u01a1n so v\u1edbi s\u1ed1 h\u1ecdc sinh n\u1eef, c\u1ea3 v\u1ec1 t\u1ec9 l\u1ec7 v\u00e0 s\u1ed1 l\u01b0\u1ee3ng.","87366ff2":"Calculate magnitude.","d859377a":"Ki\u1ec3m tra ph\u00e2n b\u1ed1 c\u1ee7a m\u1ed7i thu\u1ed9c t\u00ednh","bbdc2583":"### Li\u1ec7u cha m\u1eb9 c\u00f3 tr\u00ecnh \u0111\u1ed9 gi\u00e1o d\u1ee5c cao c\u00f3 hu\u1ea5n luy\u1ec7n con c\u00e1i t\u1ed1t h\u01a1n hay kh\u00f4ng ?\n- Pedu\n","6f2cbf30":"### S\u1eed d\u1ee5ng c\u00e1c ph\u01b0\u01a1ng ph\u00e1p gi\u1ea3m chi\u1ec1u d\u1eef li\u1ec7u \u0111\u1ec3 chi\u1ebfu l\u00ean c\u00e1c tr\u1ee5c t\u1ecda \u0111\u1ed9 kh\u00e1c nhau. C\u00f3 \u0111\u00e1nh nh\u00e3n l\u00e0 kh\u00f4ng \u0111\u00e1nh nh\u00e3n","bd7da3c8":"Trong khi \u1edf nh\u00f3m h\u1ecdc sinh t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia, \u0111i\u1ec3m s\u1ed1 \u0111\u1ea1t s\u1ed1 l\u01b0\u1ee3ng l\u1edbn nh\u1ea5t t\u1ea1i 11 (theo ph\u00e2n ph\u1ed1i \u0111\u00e3 l\u00e0m m\u1ecbn) - 10 -> 12.5 (theo bi\u1ec3u \u0111\u1ed3 histogram) th\u00ec \u1edf nh\u00f3m c\u00f2n l\u1ea1i, ph\u00e2n ph\u1ed1i \u0111\u1ea1t \u0111\u1ec9nh t\u1ea1i 12.5 (theo ph\u00e2n ph\u1ed1i \u0111\u00e3 l\u00e0m min) - 10 v\u00e0 12.5 (theo bi\u1ec3u \u0111\u1ed3 histogram).\n\n\u1ede c\u00e1c m\u1ee9c \u0111i\u1ec3m cao h\u01a1n s\u1ef1 kh\u00e1c nhau l\u00e0 kh\u00f4ng r\u00f5 r\u1ec7t.\n\n### >>> K\u1ebft lu\u1eadn: C\u00f3 m\u1ed9t s\u1ef1 ch\u00eanh l\u1ec7ch nh\u1ecf (2.5 \u0111i\u1ec3m) \u1edf m\u1ee9c \u0111i\u1ec3m c\u00f3 ph\u00e2n b\u1ed1 cao nh\u1ea5t. Ngo\u00e0i ra s\u1ef1 thay \u0111\u1ed5i l\u00e0 kh\u00f4ng l\u1edbn","221fdb0a":"X\u00e9t trong kh\u00eda c\u1ea1nh s\u1ed1 ng\u01b0\u1eddi u\u1ed1ng v\u1edbi m\u1ed7i nh\u00e3n l\u00e0 \"C\u00f3\" ho\u1eb7c \"Kh\u00f4ng\" c\u1ee7a Thu\u1ed9c t\u00ednh Heavy, ta th\u1ea5y r\u1eb1ng s\u1ed1 l\u01b0\u1ee3ng n\u1eef kh\u00f4ng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c Heavy c\u0169ng cao h\u01a1n r\u1ea5t nhi\u1ec1u so v\u1edbi nam.","dc554286":"pd.plotting.parallel_coordinates(df3, \"Heavy\", color=[\"lime\", \"tomato\",\"dodgerblue\"]);","db25c588":"X\u00e9t v\u1ec1 t\u1ec9 l\u1ec7 h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n t\u1ea1i c\u00e1c m\u1ee9c \u0111\u1ed9 ra ngo\u00e0i t\u01b0\u01a1ng \u1ee9ng, ta th\u1ea5y m\u1ed9t \u0111\u1eb7c tr\u01b0ng r\u1eb1ng h\u1ecdc sinh ra ngo\u00e0i c\u00e0ng nhi\u1ec1u c\u00f3 t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n c\u00e0ng cao.","5d054fea":"\u0110\u1ed1i v\u1edbi thu\u1ed9c t\u00ednh studytime, h\u1ecdc sinh ch\u1ee7 y\u1ebfu h\u1ecdc t\u1eadp v\u1edbi th\u1eddi gian 2 - 5 gi\u1edd \/ tu\u1ea7n.\n\n\u0110\u1ed1i v\u1edbi thu\u1ed9c t\u00ednh goout, ph\u1ea7n l\u1edbn th\u1eddi gian c\u1ee7a h\u1ecdc sinh t\u1eadp trung \u1edf m\u1ee9c b\u00ecnh th\u01b0\u1eddng.","0bed51b6":"Box plot cho s\u1ed1 ng\u00e0y ngh\u1ec9 (c\u00f3 th\u1ec3 n\u00f3i l\u00e0, v\u1edbi m\u1ed7i feature c\u1ee5 th\u1ec3, ta ch\u1ec9 ra c\u00e1ch ch\u00fang ta plot) - L\u1ea5y \u1edf notebook c\u0169","5f7ba56b":"X\u00e9t v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng, t\u1ec9 l\u1ec7 nam s\u1edf d\u1ee5ng r\u01b0\u1ee3u bia \u1edf m\u1ee9c Heavy nhi\u1ec1u h\u01a1n c\u1ee7a n\u1eef gi\u1edbi, k\u1ec3 c\u1ea3 khi s\u1ed1 l\u01b0\u1ee3ng n\u1eef gi\u1edbi l\u1edbn h\u01a1n s\u1ed1 l\u01b0\u1ee3ng nam.","d72edd9c":"### \u1ede nh\u00f3m gi\u1edbi t\u00ednh kh\u00e1c nhau c\u00f3 s\u1ef1 kh\u00e1c nhau v\u1ec1 c\u1ea3 l\u01b0\u1ee3ng v\u00e0 m\u1ee9c hay kh\u00f4ng ?\n- Only x\u00e9t gi\u1edbi t\u00ednh\n\n- Plot distribution c\u1ee7a Gi\u1edbi t\u00ednh\n- Plot quan h\u1ec7 gi\u1eefa gi\u1edbi t\u00ednh v\u00e0 c\u00e1c thu\u1ed9c t\u00ednh v\u1ec1 Heavy v\u00e0 Lifetime\n- Plot ","a0855534":"Khi ta quan s\u00e1t v\u1ec1 t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c cao t\u1ea1i m\u1ed7i nh\u00f3m quan h\u1ec7 gia \u0111\u00ecnh, ta th\u1ea5y r\u1eb1ng \u1edf c\u00f3 s\u1ef1 ngh\u1ecbch bi\u1ebfn. \u1ede c\u00e1c m\u1ee9c quan h\u1ec7 R\u1ea5t t\u1ec7 v\u00e0 T\u1ec7, s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia \u1edf m\u1ee9c cao \u0111\u1ec1u cao h\u01a1n h\u1eb3n so v\u1edbi c\u00e1c m\u1ee9c \u0111\u1ed9 quan h\u1ec7 gia \u0111\u00ecnh kh\u00e1c (27% v\u00e0 14% so v\u1edbi 8%, 9% v\u00e0 11%, l\u1ea7n l\u01b0\u1ee3t theo c\u00e1c m\u1ee9c \u0111\u1ed9 quan h\u1ec7 gia \u0111\u00ecnh t\u1ed1t d\u1ea7n).","8894e1e1":"\u1ede nh\u00f3m ngh\u1ec1 nghi\u1ec7p c\u1ee7a m\u1eb9 li\u00ean quan \u0111\u1ebfn s\u1ee9c kh\u1ecfe, t\u1ec9 l\u1ec7 h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia th\u1ea5p nh\u1ea5t (6%), trong khi \u0111\u00f3, c\u00e1c nh\u00f3m ngh\u1ec1 nghi\u1ec7p v\u1ec1 d\u1ecbch v\u1ee5 v\u00e0 gi\u00e1o d\u1ee5c l\u1ea1i cao h\u01a1n (12.5%), cho th\u1ea5y s\u1ef1 kh\u00e1c nhau trong gi\u00e1o d\u1ee5c v\u1ec1 r\u01b0\u1ee3u bia c\u1ee7a nh\u1eefng ng\u01b0\u1eddi m\u1eb9 trong c\u00e1c ng\u00e0nh kh\u00e1c nhau.","22de3a77":"Get PCA mapping and importance if each feature","948798f0":"# Ph\u00e2n t\u00edch \u0111a thu\u1ed9c t\u00ednh","578cb8cd":"So s\u00e1nh ph\u00e2n b\u1ed1 \u0111i\u1ec3m \u1ee9ng v\u1edbi nh\u00f3m s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec7n v\u00e0 nh\u00f3m c\u00f2n l\u1ea1i.","fc90ef8a":"X\u00e9t v\u1ec1 t\u1ec9 l\u1ec7 gi\u1eefa s\u1ed1 ng\u01b0\u1eddi s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c Heavy \u1edf m\u1ed9t gi\u1edbi t\u00ednh so v\u1edbi t\u1ed5ng s\u1ed1 ng\u01b0\u1eddi gi\u1edbi t\u00ednh \u0111\u00f3, ta th\u1ea5y t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c Heavy \u1edf nam nhi\u1ec1u h\u01a1n n\u1eef r\u1ea5t nhi\u1ec1u (19% >> 4%)","93ab8f79":"### >>> \u0110\u1ed1i v\u1edbi ngh\u1ec1 nghi\u1ec7p c\u1ee7a m\u1eb9, ng\u01b0\u1eddi m\u1eb9 l\u00e0m trong ng\u00e0nh s\u1ee9c kh\u1ecfe c\u00f3 t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec1n th\u1ea5p h\u01a1n, trong khi \u1edf b\u1ed1 l\u00e0 vi\u1ec7c \u1edf nh\u00e0 v\u00e0 gi\u00e1o vi\u00ean.","7e9acb1a":"Gi\u1edd, x\u00e9t v\u1ec1 s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh \u0111\u00e3 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia","b4770730":"Trong nh\u00f3m h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec7n, ph\u00e2n b\u1ed1 \u0111i\u1ec3m c\u00f3 h\u00ecnh chu\u00f4ng v\u1edbi trung b\u00ecnh v\u00e0 mode t\u1eadp trung t\u1ea1i grade = 10.\n\nTrong khi \u0111\u00f3, \u1edf nh\u00f3m h\u1ecdc sinh c\u00f2n l\u1ea1i, ph\u00e2n b\u1ed1 nghi\u00ean v\u1ec1 b\u00ean ph\u1ea3i v\u1edbi 2 \u0111\u1ec9nh \u1edf grade = 10 v\u00e0 grade = 12-12.5, h\u01a1n n\u1eefa, s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh \u0111\u1ea1t \u0111i\u1ec3m cao (>12.5) \u1edf nh\u00f3m c\u00f2n l\u1ea1i c\u00f3 t\u1ec9 l\u1ec7 cao h\u01a1n h\u1eb3n so v\u1edbi nh\u00f3m h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec7n.\n\n### >>> C\u00f3 s\u1ef1 kh\u00e1c nhau l\u1edbn trong ph\u00e2n ph\u1ed1i \u0111i\u1ec3m gi\u1eefa h\u1ecdc sinh s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec7n v\u00e0 nh\u00f3m h\u1ecdc sinh c\u00f2n l\u1ea1i. C\u1ee5 th\u1ec3, h\u1ecdc sinh kh\u00f4ng nghi\u1ec1n r\u01b0\u1ee3u c\u00f3 t\u1ec9 l\u1ec7 \u0111\u1ea1t th\u00e0nh t\u00edch h\u1ecdc t\u1eadp t\u1ed1t cao h\u01a1n nh\u00f3m h\u1ecdc sinh nghi\u1ec1n r\u01b0\u1ee3u\n\nTi\u1ebfp theo ta x\u00e9t \u0111\u1ebfn nh\u00f3m h\u1ecdc sinh \u0111\u00e3 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia v\u00e0 nh\u00f3m c\u00f2n l\u1ea1i","e306f238":"Gi\u1edd ta s\u1ebd x\u00e9t v\u1edbi tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia","436accbb":"V\u1edbi tr\u01b0\u1eddng h\u1ee3p \u0111\u00e3 t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia, s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh t\u1eebng s\u1eed d\u1ee5ng l\u1edbn h\u01a1n so v\u1edbi s\u1ed1 h\u1ecdc sinh kh\u00f4ng s\u1eed d\u1ee5ng m\u1ed9t c\u00e1ch r\u00f5 r\u00e0ng. \u0110\u1ec3 l\u00e0m r\u00f5 h\u01a1n ta ti\u1ebfn h\u00e0nh \u0111\u1ed1i chi\u1ec3u t\u1ec9 l\u1ec7:","51048606":"Kh\u1ea3o s\u00e1t feature importance v\u1edbi \u0111\u1ea7u ra l\u00e0 Alc","909c9231":"Trong khi \u0111\u00f3 x\u00e9t tr\u01b0\u1eddng h\u1ee3p t\u1eebng s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia, t\u1ec9 l\u1ec7 h\u1ecdc sinh ","a3c0194f":"Parallel Coordinate plot xem x\u00e9t quan h\u1ec7 \u0111a thu\u1ed9c t\u00ednh n\u00f3i chung (S\u1eed d\u1ee5ng df3 l\u00e0 b\u1ea3n sao c\u1ee7a df tr\u01b0\u1edbc khi trim c\u00e1c c\u1ed9t)","9855dfac":"### DONE","7a50b39e":"Plotting attribute","6bd69788":"# K\u1ebft lu\u1eadn","7e1e2a7e":"### >>> K\u1ebft lu\u1eadn: X\u00e9t v\u1ec1 t\u1ec9 l\u1ec7, s\u1ed1 l\u01b0\u1ee3ng h\u1ecdc sinh nam s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia l\u1edbn h\u01a1n s\u1ed1 h\u1ecdc sinh n\u1eef,c\u1ea3 \u1edf m\u1ee9c t\u1eebng s\u1eed d\u1ee5ng v\u00e0 s\u1eed d\u1ee5ng \u1edf m\u1ee9c Heavy.","90c5f3e3":"Kh\u00e1c bi\u1ec7t so v\u1edbi tr\u01b0\u1eddng h\u1ee3p ngh\u1ec7 nghi\u1ec7p c\u1ee7a m\u1eb9, \u0111\u1ed1i v\u1edbi ngh\u1ec1 nghi\u1ec7p c\u1ee7a b\u1ed1, t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nhi\u1ec1u th\u1ea5p trong nh\u00f3m ng\u01b0\u1eddi b\u1ed1 l\u00e0m gi\u00e1o vi\u00ean ho\u1eb7c l\u00e0m vi\u1ec7c \u1edf nh\u00e0. Trong khi \u0111\u00f3, ng\u01b0\u1eddi b\u1ed1 l\u00e0m trong ng\u00e0nh s\u1ee9c kh\u1ecfe v\u00e0 d\u1ecbch v\u1ee5 c\u00f3 con c\u00f3 t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nghi\u1ec7n cao. Suy ra, vi\u1ec7c ng\u01b0\u1eddi b\u1ed1 \u1edf nh\u00e0 ho\u1eb7c l\u00e0m gi\u00e1o vi\u00ean c\u00f3 s\u1ef1 ki\u1ec3m so\u00e1t h\u00e0nh vi con c\u00e1i t\u1ed1t h\u01a1n. Ng\u01b0\u1ee3c l\u1ea1i v\u1edbi ng\u01b0\u1eddi b\u1ed1 l\u00e0m trong ng\u00e0nh s\u1ee9c kh\u1ecfe hay d\u1ecbch v\u1ee5.","22c3bada":"Ph\u1ea7n l\u1edbn h\u1ecdc sinh \u0111\u1ec1u kh\u00f4ng ngh\u1ec9 bu\u1ed5i h\u1ecdc n\u00e0o. S\u1ed1 h\u1ecdc sinh ngh\u1ec9 h\u1ecdc \u1edf m\u1ee9c 2 v\u00e0 >= 3 \u0111\u1ec1u nh\u1ecf h\u01a1n so v\u1edbi c\u00e1c nh\u00f3m kh\u00e1c (16, 14 so v\u1edbi 549 v\u00e0 70)","fd5cbfcd":"# Gi\u1edbi thi\u1ec7u b\u1ed9 d\u1eef li\u1ec7u","515c2780":"### >>> \u0110\u1ed1i v\u1edbi nh\u1eefng h\u1ecdc sinh c\u00f3 ng\u01b0\u1eddi gi\u00e1m h\u1ed9 kh\u00f4ng ph\u1ea3i l\u00e0 cha m\u1eb9 (aka m\u1ed3 c\u00f4i), nh\u1eefng h\u1ecdc sinh \u0111\u00f3 c\u00f3 t\u1ec9 l\u1ec7 s\u1eed d\u1ee5ng r\u01b0\u1ee3u bia m\u1ee9c nhi\u1ec1u cao h\u01a1n nh\u00f3m c\u00f2n l\u1ea1i"}}