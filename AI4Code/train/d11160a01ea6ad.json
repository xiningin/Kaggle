{"cell_type":{"b1ea563d":"code","4fe8615d":"code","4d0d0fa1":"code","60dde5e5":"code","8a6c0415":"code","6aa435e3":"code","04add83d":"code","933cb246":"code","84f98626":"code","65499a6f":"code","2725008c":"code","639eeb7d":"code","e9a5acad":"code","1d2a22cd":"code","2eed550a":"code","edaa214c":"code","31686049":"code","b5acd645":"code","69ff7e43":"code","10d55161":"code","29032db8":"markdown","32f5bf87":"markdown","c714b804":"markdown","37d3513a":"markdown","8106ba44":"markdown","df42f788":"markdown","5c0f5ddb":"markdown","0205c344":"markdown","1b4f33fa":"markdown","d0b11c12":"markdown","ecf09947":"markdown","12834b24":"markdown","906444e0":"markdown","3c722423":"markdown","5ee78d7d":"markdown","268195a7":"markdown","8c0ec6f2":"markdown","db2a87bd":"markdown","c6f1d6f9":"markdown","460717c2":"markdown"},"source":{"b1ea563d":"import pandas as pd\nimport numpy as np\nimport random\nimport gc\nimport pickle\nimport functools\nimport networkx as nx\nimport collections\n\nfrom xgboost import XGBClassifier, plot_importance\nfrom sklearn import pipeline, linear_model, model_selection, metrics, utils, preprocessing, decomposition, ensemble\n\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm","4fe8615d":"RANDOM_SEED = 43\nN_EPOCH = 10\nTEST_NEG_EXAMPL_FRAC = 0.1\nDROP_FIXED_DUPLICATE = True\nCACHE_IN_FOLDER = '..\/input\/merge-features\/cache\/'\nCACHE_GRAPH_IN_FOLDER = '..\/input\/social-task-v1\/cache\/'\nCACHE_OUT_FOLDER = '..\/working\/cache\/'\n\n!mkdir -p ..\/working\/cache\/\n\nrandom.seed(RANDOM_SEED)\nnp.random.seed(RANDOM_SEED)","4d0d0fa1":"def compute_metrics(g, metrics, node_pair):\n    node1, node2 = node_pair\n    result = np.zeros(len(metrics), dtype='float32')\n\n    for i, metric in enumerate(metrics):\n        result[i] = np.round(metric(g, node1, node2), 3)\n\n    return result\n\ndef compute_features(g, feature_agg, node_pair):\n    node1, node2 = node_pair\n    res = [agg(feature(g, node1, node2)) for feature, agg in feature_agg]\n    return res\n\ndef common_neighbors_score(g, node1, node2):\n    common_n = _common_neighbors(g, node1, node2)\n    return common_n.shape[0]\n\n@functools.lru_cache()\ndef _common_neighbors(g, node1, node2):\n    node1_n = list(g[node1])\n    node2_n = list(g[node2])\n    common_n = np.intersect1d(node1_n, node2_n, assume_unique=True)\n    return common_n\n\ndef adamic_adar_score(g, node1, node2):\n    common_n = _common_neighbors(g, node1, node2)\n    degrees = _common_degree(g, common_n)\n\n    inv_log = np.divide(1., np.log(degrees + 1e-2))\n    inv_log[inv_log < 0] = 0\n\n    return np.sum(inv_log)\n\ndef _common_degree(g, common):\n    N = common.shape[0]\n    degrees = np.zeros(N, dtype=np.int)\n    degrees[:] = [len(g[node]) for node in common]\n    return degrees\n\ndef res_allocation(g, node1, node2):\n    common_n = _common_neighbors(g, node1, node2)\n    degrees = _common_degree(g, common_n)\n    score = np.sum(np.divide(1., degrees + 1e-2))\n    return score\n\n@functools.lru_cache(maxsize=10)\ndef common_times(g, node1, node2):\n    common = _common_neighbors(g, node1, node2)\n    times = np.array(\n        # get the friendship time for each of common friends\n        [\n            (g[node1][cf][1],\n             g[node2][cf][1]) for cf in common\n        ],\n        dtype='float32'\n    )\n    return times\n\n@functools.lru_cache(maxsize=10)\ndef common_forward_intensities(g, node1, node2):\n    common = _common_neighbors(g, node1, node2)\n    forward_inten = np.array(\n        [\n            (g[node1][cf][2],\n             g[cf][node2][2]) for cf in common\n        ],\n        dtype='float32'\n    )\n    return forward_inten\n\nMETRICS = (\n    common_neighbors_score,\n    adamic_adar_score,\n    res_allocation,\n)\n\nEDGE_FEATURES = (\n    (common_times, functools.partial(np.mean, axis=0)),\n    (common_times, functools.partial(np.min, axis=0)),\n    (common_times, functools.partial(np.median, axis=0)),\n    (common_forward_intensities, functools.partial(np.mean, axis=0)),\n    (common_forward_intensities, functools.partial(np.max, axis=0)),\n    (common_forward_intensities, functools.partial(np.median, axis=0)),\n)\n\ndef get_all_features_for_pairs(g, pairs, edge_features=EDGE_FEATURES, metrics=METRICS):\n    # Calculating edge features\n    edge_features = np.full((len(pairs), len(EDGE_FEATURES), 2), -1, dtype='float32')\n    for idx, row in enumerate(pairs):\n        edge_features[idx] = compute_features(train_g, EDGE_FEATURES, row)\n        \n    edge_features = edge_features.reshape(-1, len(EDGE_FEATURES) * 2)\n    \n    metrics = np.full((len(pairs), len(METRICS)), -1, dtype='float32')\n    for idx, row in enumerate(pairs):\n        metrics[idx] = compute_metrics(g, METRICS, row)\n    \n    return edge_features, metrics\n\ndef assemble_all_features(pairs, edge_features, metrics, target):\n    def get_uniqued_features(pairs, edge_features, metrics, target):\n        num_pairs = pairs.shape[0]\n\n        uniqued_pairs = np.full((num_pairs \/\/ 2, pairs.shape[1]), -1, dtype='int32')\n        uniqued_metrics = np.full((num_pairs \/\/ 2, metrics.shape[1]), -1, dtype='float32')\n        uniqued_target = np.full((num_pairs \/\/ 2), -1, dtype='int8')\n\n        edge_features_num = edge_features.shape[1]\n\n        # Uniqued edge features is 2 times wider than the original edge features,\n        # because we can't just discard it, like metrics.\n        # These features are directed, e.g. edge_features(a, b) != edge_features(b, a).\n        uniqued_edge_features = np.full((num_pairs \/\/ 2, edge_features_num * 2), -1, dtype='float32')\n\n        seen = {}\n        idx = 0\n        for pair, p_metric, p_edge_feature, p_target in zip(pairs, metrics, edge_features, target):\n            sorted_pair = tuple(sorted(pair))\n            if sorted_pair not in seen:\n                uniqued_pairs[idx] = sorted_pair\n                uniqued_metrics[idx] = p_metric\n                uniqued_target[idx] = p_target\n                uniqued_edge_features[idx][:edge_features_num] = p_edge_feature\n                seen[sorted_pair] = idx\n                idx += 1\n            else:\n                seen_idx = seen[sorted_pair]\n                uniqued_edge_features[seen_idx][edge_features_num:] = p_edge_feature\n        \n        return uniqued_pairs, uniqued_edge_features, uniqued_metrics, uniqued_target\n    \n    def get_duplicate_columns(df):\n        '''\n        Get a list of duplicate columns.\n        It will iterate over all the columns in dataframe and find the columns whose contents are duplicate.\n        :param df: Dataframe object\n        :return: List of columns whose contents are duplicates.\n        '''\n        duplicateColumnNames = set()\n        # Iterate over all the columns in dataframe\n        for x in range(df.shape[1]):\n            # Select column at xth index.\n            col = df.iloc[:, x]\n            # Iterate over all the columns in DataFrame from (x+1)th index till end\n            for y in range(x + 1, df.shape[1]):\n                # Select column at yth index.\n                otherCol = df.iloc[:, y]\n                # Check if two columns at x 7 y index are equal\n                if col.equals(otherCol):\n                    duplicateColumnNames.add(df.columns.values[y])\n\n        return list(duplicateColumnNames)\n    \n    \n    pairs, edge_features, metrics, target = get_uniqued_features(pairs, edge_features, metrics, target)\n    gc.collect()\n    \n    # drop duplicate columns of edge_features (there always are some duplicate columns,\n    # because some features of edges are the same in both directions)\n    edge_features = pd.DataFrame(edge_features)\n    if DROP_FIXED_DUPLICATE:\n        duplicate_columns = [12, 13, 14, 15, 16, 17]\n    else:\n        duplicate_columns = get_duplicate_columns(edge_features.iloc[:1000, :])\n    #     print(f'Found duplicate columns: {duplicate_columns}')\n    edge_features = edge_features.drop(columns=duplicate_columns)\n    \n    \n    # merge all features from pieces\n    all_features = pd.DataFrame(pairs).rename(columns={0: 'id1', 1: 'id2'})\n    all_features = pd.concat(\n        (\n            all_features,\n            pd.DataFrame(metrics).rename(columns={0: 'CN', 1: 'AA', 2: 'RA'}),\n            edge_features.add_suffix('_feat'),\n            pd.Series(target, name='target')\n        ), axis=1)\n    \n    return all_features","60dde5e5":"train_g = nx.read_gpickle(CACHE_GRAPH_IN_FOLDER + 'train_graph.pkl')\n\nall_features = pd.read_hdf(CACHE_IN_FOLDER + 'all_features.h5')\n\nclasses = np.unique(all_features['target'])\nclass_weight = utils.class_weight.compute_class_weight('balanced',\n                                                       classes,\n                                                       all_features['target'])\nclass_weight = {class_label: weight for (class_label, weight) in zip(classes, class_weight)}","8a6c0415":"# this block of code looks terrifying, but it just samples 10% of negative examples from 'all_features'\nneg_ex = len(all_features[~all_features['target']])\ntotal_neg_examples = int(neg_ex * TEST_NEG_EXAMPL_FRAC)\nfull_mask = np.ones(len(all_features)).astype('bool')\ntest_neg_mask = np.zeros(total_neg_examples).astype('bool')\nfull_mask[:len(test_neg_mask)] = test_neg_mask\nnp.random.shuffle(full_mask)\nfull_mask = full_mask | all_features['target'].values\n\ntrain = all_features[full_mask]\ntest_neg = all_features[~full_mask]\n\ndel all_features\ngc.collect()","6aa435e3":"test_pos_pairs = pd.read_csv(CACHE_GRAPH_IN_FOLDER + 'test_edges.csv', usecols=['id1', 'id2'])\nprint(\"Calculating all features for pairs\")\ntest_edge_features, test_metrics = get_all_features_for_pairs(train_g, test_pos_pairs.values)\nprint(\"Assembling all features\")\ntest_pos = assemble_all_features(test_pos_pairs.values, test_edge_features, test_metrics, np.ones(test_pos_pairs.shape[0]))\nprint(\"Done\")\ndel test_edge_features, test_metrics, train_g","04add83d":"assert list(test_neg.columns) == list(test_pos.columns)\ntest = pd.concat((test_neg, test_pos), axis=0, ignore_index=True)\ntest.shape","933cb246":"def plot_scores(train_scores, test_scores, epochs):\n    fig, ax = plt.subplots()\n\n    ax.plot(epochs, train_scores, label='train')\n    ax.plot(epochs, test_scores, label='test')\n\n    ax.legend()\n\n    fig.set_figheight(5)\n    fig.set_figwidth(8)\n\n    plt.xlabel('Epoch')\n    plt.ylabel('Eval score')\n    plt.show()\n\ndef plot_roc_auc(fpr, tpr, score, legend):\n    descr = f\"{legend}: {score}\"\n    plt.plot(fpr, tpr, label=descr)\n    plt.xlabel(\"False positive rate\")\n    plt.ylabel(\"True positive rate\")\n    plt.legend(loc=4)\n\ndef plot_prc(fpr, tpr, legend):\n    descr = f\"{legend}\"\n    plt.plot(fpr, tpr, label=descr)\n    plt.xlabel(\"Recall\")\n    plt.ylabel(\"Precision\")\n    plt.legend(loc=1)\n\ndef fit_with_validation(model, eval_period, n_epoch, X_train, y_train, X_test, y_test, classes, scorer_callback):\n    epochs = []\n    test_scores = []\n    train_scores = []\n\n    for epoch in range(n_epoch):\n        print(f\"\\nEpoch: {epoch}\")\n        X_shuffled, y_shuffled = utils.shuffle(X_train, y_train)\n        model.partial_fit(X_shuffled, y_shuffled, classes=classes)\n\n        if epoch % eval_period == 0:\n            epochs.append(epoch)\n\n            test_preds = model.decision_function(X_test)\n            test_score = scorer_callback(y_test, test_preds)\n            test_scores.append(test_score)\n            print(f\"\\nTest score: {test_score}\")\n\n            train_preds = model.decision_function(X_train)\n            train_score = metrics.roc_auc_score(y_train, train_preds)\n            train_scores.append(train_score)\n            print(f\"Train score: {train_score}\")\n    return test_scores, train_scores, epochs\n            \ndef make_report(real, predicted):\n    roc_auc = metrics.roc_auc_score(y_test, predicted)\n    fpr, tpr, roc_thr = metrics.roc_curve(y_test, predicted)\n    prec, rec, pr_thr = metrics.precision_recall_curve(y_test, predicted)\n    return {\n        'roc_auc': roc_auc,\n        'roc': {\n            'fpr': fpr,\n            'tpr': tpr,\n            'thr': roc_thr,\n        },\n        'prec': {\n            'prec': prec,\n            'rec': rec,\n            'thr': pr_thr,\n        }\n    }","84f98626":"X_test = test.drop(['id1', 'id2', 'target'], axis=1)\ny_test = test['target']\nX_train = train.drop(['id1', 'id2', 'target'], axis=1)\ny_train = train['target']\n\ndel train, test","65499a6f":"results = {}\ntest_preds = X_test['RA']\nresults['heur'] = make_report(y_test, test_preds)","2725008c":"scaler = preprocessing.StandardScaler()\nX_train_scal = scaler.fit_transform(X_train)\nX_test_scal = scaler.transform(X_test)","639eeb7d":"sgd_scaling = linear_model.SGDClassifier(n_jobs=-1, class_weight=class_weight,\n                                         verbose=1, random_state=RANDOM_SEED)","e9a5acad":"test_scores, train_scores, epochs = fit_with_validation(model=sgd_scaling,\n                                                        eval_period=5,\n                                                        n_epoch=N_EPOCH,\n                                                        X_train=X_train_scal,\n                                                        y_train=y_train,\n                                                        X_test=X_test_scal,\n                                                        y_test=y_test,\n                                                        classes=classes,\n                                                        scorer_callback=metrics.roc_auc_score)","1d2a22cd":"test_preds = sgd_scaling.decision_function(X_test_scal)\nresults['sgd_scal_less_features'] = make_report(y_test, test_preds)\nplot_scores(train_scores, test_scores, epochs)\n\ndel X_train_scal, X_test_scal\ngc.collect()","2eed550a":"xgb = XGBClassifier(tree_method='gpu_hist',\n                    random_state=RANDOM_SEED + 1,\n                    gpu_id=0)","edaa214c":"_ = xgb.fit(X_train, y_train)","31686049":"test_preds = xgb.predict_proba(X_test)\nresults['xgb'] = make_report(y_test, test_preds[:, 1])\nplot_importance(xgb)","b5acd645":"plt.figure(figsize=(10, 6))\nfor name, item in results.items():\n    plot_roc_auc(item['roc']['fpr'], item['roc']['tpr'], item['roc_auc'], name)","69ff7e43":"plt.figure(figsize=(11, 8))\nfor name, item in results.items():\n    plot_prc(item['prec']['rec'], item['prec']['prec'], name)","10d55161":"with open(CACHE_OUT_FOLDER + 'scaler.pkl', 'wb') as f:\n    pickle.dump(scaler, f)\n\nwith open(CACHE_OUT_FOLDER + 'sgd_svm_scaled.pkl', 'wb') as f:\n    pickle.dump(sgd_scaling, f)\n\nwith open(CACHE_OUT_FOLDER + 'xgb.pkl', 'wb') as f:\n    pickle.dump(xgb, f)","29032db8":"### \u0418\u043c\u043f\u043e\u0440\u0442\u044b","32f5bf87":"#### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a precision-recall","c714b804":"# \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\n### \u0427\u0435\u0440\u0435\u0437 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a\u0443\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \"\u043f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u0438\" (similarity indices) \u0432\u0435\u0440\u0448\u0438\u043d: [Link Prediction In Large-Scale Networks (Hackernoon)](https:\/\/hackernoon.com\/link-prediction-in-large-scale-networks-f836fcb05c88). \u042d\u0442\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u0432\u044f\u0437\u0438: \u0447\u0435\u043c \u0432\u044b\u0448\u0435 \u043f\u043e\u0445\u043e\u0436\u0435\u0441\u0442\u044c, \u0442\u0435\u043c \u0432\u044b\u0448\u0435 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.  \n  \n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u044b \u0432\u0435\u0440\u0448\u0438\u043d \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 <= 2 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0442\u0440\u0438\u043a (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Resource Allocation, Adamic-Adar, Common Neighbors) \u0438 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a\u0443. \u0414\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u0445\u043e\u0440\u043e\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430 [DBLP dataset](https:\/\/snap.stanford.edu\/data\/com-DBLP.html), \u044d\u0442\u043e \u0432\u0438\u0434\u043d\u043e \u043f\u043e \u0440\u0438\u0441 1.\n\n<img src=\"https:\/\/hackernoon.com\/hn-images\/1*W4n2pzavQ36wuElMepJ1Dw.png\" width=\"400px\">\n<center>\u0420\u0438\u0441\u0443\u043d\u043e\u043a 1 - [\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b](https:\/\/hackernoon.com\/link-prediction-in-large-scale-networks-f836fcb05c88) \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 DBLP<\/center>\n\n### \u041d\u0430 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438\n\u0415\u0441\u043b\u0438 \u043c\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0443\u0436\u0435 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u0445 (Resource Allocation, Adamic-Adar, Common Neighbors), \u0442\u043e \u043f\u043e\u0442\u0435\u0440\u044f\u0435\u043c \u0447\u0430\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u0430\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0439 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 ```time``` \u0438 ```intensity``` \u0440\u0435\u0431\u0435\u0440. \u041d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440 \u0432\u0435\u0440\u0448\u0438\u043d (\u044d\u0442\u043e \u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 <= 2).  \n  \n\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043d\u0430\u0441 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0442 ```time, intensity``` \u0434\u043b\u044f \u043e\u0431\u0449\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0434\u0432\u0443\u0445 \u0432\u0435\u0440\u0448\u0438\u043d, \u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435 \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u0440\u0443\u0434\u043d\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0449\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f, \u0438 \u0443 \u043d\u0430\u0441 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0431\u043e\u0440\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b. \u0427\u0442\u043e\u0431\u044b \u043d\u0430\u0431\u043e\u0440\u044b \u0431\u044b\u043b\u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b, \u0430\u0433\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 (mean, max, median).","37d3513a":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0438 ROC","8106ba44":"# \u041f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 -> DS\n## \u041f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u0430\u044f\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2013 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0434\u0440\u0443\u0437\u0435\u0439 \u0432 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0434\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0441 \u043a\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0439 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0440\u0443\u0436\u0438\u0442\u0441\u044f. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u0430\u043c \u0434\u0430\u043d \u0430\u043d\u043e\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0433\u0434\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0434\u0440\u0443\u0437\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u044b\u0445 \u0434\u0432\u0443\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u043a\u0430\u043a \u0434\u0430\u0432\u043d\u043e \u043e\u043d\u0438 \u043f\u043e\u0434\u0440\u0443\u0436\u0438\u043b\u0438\u0441\u044c \u0438 \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0441\u043e\u0446. \u0441\u0435\u0442\u0438, \u043e\u0431\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0438\u0437\u043c\u0435\u0440\u044f\u044e\u0442\u0441\u044f \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u0445. \u0424\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430: uid1, uid2, time, intensity\n\n### DS\n* **\u0427\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043c\u043e\u0434\u0435\u043b\u0438?**  \n  \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0433\u043b\u0430 \u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0439 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0434\u0440\u0443\u0436\u0438\u0442\u0441\u044f.\n* **\u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0430\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0434\u0435\u043b\u0438**  \n  \u041c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u043c\u0435\u0442\u0440\u0438\u043a\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 ROC-AUC \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0441\u0432\u044f\u0437\u0438 (link prediction) \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u0435\u0433\u043e \u0441\u043e\u0441\u0435\u0434\u044f\u043c\u0438 \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0434\u043e 2\u0445 \u0448\u0430\u0433\u043e\u0432. \u0414\u0430\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0435 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u044f \u043f\u043e\u0440\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442 \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0434\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043c (\u043d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441\u0430) \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0431\u0430\u043b\u0430\u043d\u0441\u0430 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u043e\u043b\u043d\u043e\u0442\u044b (precision\/recall tradeoff).","df42f788":"## XGBoost\n\n\u042f \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043d\u043e \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u0447\u0442\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u0430 GridSearch \u043f\u0440\u0438\u0432\u0435\u043b \u043a \u043e\u0432\u0435\u0440\u0444\u0438\u0442\u0443 \u043f\u043e\u0434 test set, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u0434 GPU.","5c0f5ddb":"\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c 1 \u0438 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043d\u0438\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0433\u0440\u0430\u0444\u0430","0205c344":"# \u041d\u0430 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438","1b4f33fa":"#### \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c scaler \u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0438\u043d\u0444\u0435\u0440\u0435\u043d\u0441\u0430","d0b11c12":"### \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","ecf09947":"## \u041d\u0430 \u0447\u0442\u043e \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u043b\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n1. \u041f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0430\u0444\u043e\u0432\u044b\u0435 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438\/\u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438. \u0412\u0440\u043e\u0434\u0435 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0445\u043e\u0440\u043e\u0448\u0430\u044f \u0442\u0435\u043c\u0430, \u0441 SOTA-\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438: [Link](https:\/\/paperswithcode.com\/sota\/link-prediction-on-wn18)\n1. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0433\u043b\u0430 \u0440\u0430\u043d\u0436\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \"\u0434\u0440\u0443\u0437\u0435\u0439 \u0434\u0440\u0443\u0437\u0435\u0439\" \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430 \u0435\u0449\u0435 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043b\u044e\u0434\u0435\u0439 \u0438\u0437 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0432\u044f\u0437\u043d\u043e\u0441\u0442\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u043f. 1)","12834b24":"### Helper functions","906444e0":"### \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0440 \u0432\u0435\u0440\u0448\u0438\u043d \u043d\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0438 <= 2\n\u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 [\u0434\u0440\u0443\u0433\u043e\u043c kernel](https:\/\/www.kaggle.com\/drmatters\/social-task-v1)","3c722423":"\u0417\u0430\u0431\u0435\u0440\u0435\u043c \u0447\u0430\u0441\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c \"0\" \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 (train_neg) \u0438\u0437 all_features, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0432 'test_edges.h5' (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0443\u0431\u0440\u0430\u043b\u0438 \u0438\u0437 \u0433\u0440\u0430\u0444\u0430 \u0435\u0449\u0435 \u0434\u043e \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c \"1\".","5ee78d7d":"Feature importance XGBoost'\u0430 \u0433\u043e\u0432\u043e\u0440\u0438\u0442, \u0447\u0442\u043e Resource Allocation \u0438 Adamic Adar \u043e\u043a\u0430\u0437\u0430\u043b\u0438\u0441\u044c \u043e\u0434\u043d\u0438\u043c\u0438 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0432\u0430\u0436\u043d\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432.","268195a7":"# \u041d\u0430 \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a\u0435","8c0ec6f2":"## SGD with Scaling\n\n\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 SGD \u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0432\u0435\u0441\u043e\u0432 \u0443 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0437\u0430 \u0431\u0435\u0439\u0437\u043b\u0430\u0439\u043d.","db2a87bd":"\u041c\u0435\u0442\u043e\u0434 'fit_with_validation' \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u044d\u043f\u043e\u0445\u0438, \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u044d\u0442\u043e \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a (\u0432 sklearn \u043d\u0435\u043b\u044c\u0437\u044f \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u0442\u043e\u043c \u0432\u0438\u0434\u0435).","c6f1d6f9":"LogReg \u0438 XGBoost \u0434\u0430\u044e\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 (ROC-AUC), \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u0445\u043e\u0434\u0438\u0442 \u043e\u0449\u0443\u0442\u0438\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f.\n\u0421\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u0443 \u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0435 \u0437\u0430\u0442\u0440\u0430\u0442 \u043d\u0430 \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n\n\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 LogReg (\u043f\u043e ROC-AUC), \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 Precision-Recall.","460717c2":"### \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\n\u041a\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0430: \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 train\/test. \u0412 \u0433\u0440\u0430\u0444\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043a \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0430\u043d\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0433\u0440\u0430\u0444 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043b\u0438\u0441\u044c \"\u0431\u0443\u0434\u0443\u0449\u0438\u0435\" \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f (\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0432 [\u043a\u0435\u0440\u043d\u0435\u043b\u0435 - \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445](https:\/\/www.kaggle.com\/drmatters\/social-task-v1))."}}