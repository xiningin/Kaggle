{"cell_type":{"05f76087":"code","130a82ff":"code","c086b636":"code","dcfcf845":"code","55a0e2b5":"code","488e6881":"code","24054217":"code","4e09606a":"code","7c172ac9":"markdown","0d347072":"markdown"},"source":{"05f76087":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n\nif torch.cuda.is_available():\n    dev = torch.device(\"cuda\")\nelse:\n    dev = torch.device(\"cpu\")\n\nimport pickle\n    \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","130a82ff":"pca_components = 60","c086b636":"e_size = 64\nfc_input = pca_components\nh_dims = [512,512,256,128]\ndropout_rate = 0.5\nepochs = 200\nminibatch_size = 100000\n\nclass MarketPredictor(nn.Module):\n    def __init__(self):\n        super(MarketPredictor, self).__init__()\n        \n        self.e = nn.Embedding(2,e_size)\n        self.deep = nn.Sequential(\n            nn.Linear(fc_input,h_dims[0]),\n            nn.BatchNorm1d(h_dims[0]),\n            nn.LeakyReLU(),\n            nn.Dropout(dropout_rate),\n            nn.Linear(h_dims[0],h_dims[1]),\n            nn.BatchNorm1d(h_dims[1]),\n            nn.LeakyReLU(),\n            nn.Dropout(dropout_rate),\n            nn.Linear(h_dims[1],h_dims[2]),\n            nn.BatchNorm1d(h_dims[2]),\n            nn.LeakyReLU(),\n            nn.Dropout(dropout_rate),\n            nn.Linear(h_dims[2],h_dims[3]),\n            nn.BatchNorm1d(h_dims[3]),\n            nn.LeakyReLU(),\n            nn.Dropout(dropout_rate),\n            nn.Linear(h_dims[3],e_size),\n            nn.BatchNorm1d(e_size),\n            nn.LeakyReLU(),\n            nn.Dropout(dropout_rate)\n            )\n        self.reduce = nn.utils.weight_norm(nn.Linear(e_size,1))\n        self.sig = nn.Sigmoid()\n        \n    def forward(self,xi,xf):\n        e_out = self.e(xi)\n        f_out = self.deep(xf)\n        ef_out = self.reduce(e_out+f_out)\n        sig_out = self.sig(ef_out)\n        \n        return sig_out\n        ","dcfcf845":"epochs = 200\npath = '\/kaggle\/input\/pytorch-nn-model\/marketpredictor_state_dict_'+str(epochs)+'epochs.pt'\nmodel = MarketPredictor()\nmodel.load_state_dict(torch.load(path,map_location=dev))\nmodel.to(dev)\nmodel.eval()","55a0e2b5":"with open('\/kaggle\/input\/pytorch-nn-model\/feature_processing.pkl', 'rb') as f:\n    sc, pca, maxindex, fill_val = pickle.load(f)","488e6881":"feature_names = ['feature_'+str(i) for i in range(1,130)]\nexclude = np.where([maxindex[i,1] > 100 and maxindex [i,2] > 1 for i in range(129) ])[0]","24054217":"import janestreet\nenv = janestreet.make_env()\niter_test = env.iter_test()","4e09606a":"for (test_df, sample_prediction_df) in iter_test:\n    if test_df['weight'].item() == 0:\n        sample_prediction_df.action = 0\n    else:\n        test_df_features = test_df[feature_names].to_numpy()\n        for i in exclude:\n            if test_df_features[0,i] == maxindex[i,0]:\n                test_df_features[0,i] = fill_val[i]\n        test_df_int_features = test_df['feature_0'].to_numpy()\n        \n        nans = np.isnan(test_df_features)\n        for i in range(129):\n            if nans[0,i]:\n                test_df_features[0,i] = fill_val[i]\n        test_df_features_scaled = sc.transform(test_df_features)\n        test_df_features_pca=pca.transform(test_df_features_scaled)\n        \n        itensor = torch.tensor((test_df_int_features+1)\/\/2,dtype=torch.long,device=dev)\n        ftensor = torch.tensor(test_df_features_pca,dtype=torch.float,device=dev)\n        \n        s = model(itensor,ftensor).item()\n        sample_prediction_df.action = int(np.round(s))\n        \n    env.predict(sample_prediction_df)\n\n","7c172ac9":"# Defining and importing the model","0d347072":"# Pretrained Neural Network Classifier\nSee [this](https:\/\/www.kaggle.com\/andreasthomasen\/pytorch-nn-model) for implementation details. Here we are running a pretrained version of that model."}}