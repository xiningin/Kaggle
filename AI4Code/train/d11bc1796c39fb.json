{"cell_type":{"4f6fd6bf":"code","91dd4b36":"code","84400ed2":"code","ffe5ea81":"code","3828cbc5":"code","2c55ca76":"code","1bc669c9":"code","b5eb1893":"code","d87d5953":"code","8d4f0398":"code","3248c7b7":"code","195e6a28":"markdown","a84ed11e":"markdown","d77a9943":"markdown","300c8e59":"markdown","aab53ec6":"markdown","576d8cef":"markdown","643fd13e":"markdown"},"source":{"4f6fd6bf":"import numpy as np\nimport pandas as pd","91dd4b36":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv', parse_dates=['Date'])\ntest  = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv',  parse_dates=['Date'])\n\ntrain.rename(columns={\n        'Id': 'id',\n        'Date': 'date',\n        'Province_State':'state',\n        'Country_Region':'country',\n        'ConfirmedCases': 'confirmed',\n        'Fatalities':'deaths',\n        }, inplace=True)\n\ntest.rename(columns={\n        'ForecastId': 'id',\n        'Date': 'date',\n        'Province_State':'state',\n        'Country_Region':'country',\n        }, inplace=True)\n\nvalid = train[train['date'] >= test['date'].min()]\ntrain = train[(train['date'] < test['date'].min()) & (train['date'] > pd.Timestamp('2020-03-01'))]\n\ntrain['date'] = (train['date'] - pd.Timestamp('2020-03-01')).dt.days\nvalid['date'] = (valid['date'] - pd.Timestamp('2020-03-01')).dt.days\ntest['date']  = (test['date'] - pd.Timestamp('2020-03-01')).dt.days\n\ntrain['loc'] = train['country'].astype(str) + '-' + train['state'].astype(str)\nvalid['loc'] = valid['country'].astype(str) + '-' + valid['state'].astype(str)\ntest['loc'] = test['country'].astype(str) + '-' + test['state'].astype(str)","84400ed2":"all_coords = train['loc'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['loc']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['loc']==coords]['confirmed']#.values.reshape(-1,1)\n    \n    X_valid_ = valid[valid['loc']==coords]['date']#.values.reshape(-1,1)\n    y_valid_ = valid[valid['loc']==coords]['confirmed']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_valid_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n        \n    y_preds_ = np.round(X_valid_.apply(pf)).clip(lower=y_linear)\n    \n    predictions[coords] = y_preds_\n    RMSE[coords]=np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n    total_RMSE += np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n\n    \nprint(total_RMSE)","ffe5ea81":"all_coords = train['loc'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['loc']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['loc']==coords]['deaths']#.values.reshape(-1,1)\n    \n    X_valid_ = valid[valid['loc']==coords]['date']#.values.reshape(-1,1)\n    y_valid_ = valid[valid['loc']==coords]['deaths']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_valid_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n    \n    y_preds_ = np.round(X_valid_.apply(pf)).clip(lower=y_linear)\n    predictions[coords] = y_preds_\n    RMSE[coords]=np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n    total_RMSE += np.sqrt(np.sum(np.square(y_preds_-y_valid_)))\n\n    \nprint(total_RMSE)","3828cbc5":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv', parse_dates=['Date'])\ntest  = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv',  parse_dates=['Date'])\n\ntrain.rename(columns={\n        'Id': 'id',\n        'Date': 'date',\n        'Province_State':'state',\n        'Country_Region':'country',\n        'ConfirmedCases': 'confirmed',\n        'Fatalities':'deaths',\n        }, inplace=True)\n\ntest.rename(columns={\n        'ForecastId': 'id',\n        'Date': 'date',\n        'Province_State':'state',\n        'Country_Region':'country',\n        }, inplace=True)\n\ntrain = train[train['date'] > pd.Timestamp('2020-03-01')]\n\ntrain['date'] = (train['date'] - pd.Timestamp('2020-03-01')).dt.days\ntest['date']  = (test['date'] - pd.Timestamp('2020-03-01')).dt.days\n\ntrain['loc'] = train['country'].astype(str) + '-' + train['state'].astype(str)\ntest['loc'] = test['country'].astype(str) + '-' + test['state'].astype(str)","2c55ca76":"submission = pd.DataFrame()\nsubmission['loc'] = test['loc']\nsubmission.reset_index(inplace=True)\n\nsubmission['ConfirmedCases'] = 0\nsubmission['Fatalities'] = 0","1bc669c9":"all_coords = train['loc'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['loc']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['loc']==coords]['confirmed']#.values.reshape(-1,1)\n    \n    X_test_ = test[test['loc']==coords]['date']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_test_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n    \n    y_preds_ = np.round(X_test_.apply(pf)).clip(lower=y_linear)\n        \n    submission.loc[submission['loc']==coords,'ConfirmedCases'] = y_preds_","b5eb1893":"all_coords = train['loc'].unique().tolist()\npredictions = dict()\nRMSE = dict()\ntotal_RMSE = 0\n\nfor coords in all_coords:\n    \n    X_train_ = train[train['loc']==coords]['date']#.values.reshape(-1,1)\n    y_train_ = train[train['loc']==coords]['deaths']#.values.reshape(-1,1)\n    \n    X_test_ = test[test['loc']==coords]['date']#.values.reshape(-1,1)\n    \n    last_diff = y_train_.iloc[-1] - y_train_.iloc[-2]\n    y_linear = y_train_.iloc[-1] + last_diff*np.arange(1,len(X_test_)+1,1)\n    \n    z = np.polyfit(X_train_.values, y_train_.values, 3)\n    pf = np.poly1d(z)\n    \n    y_preds_ = np.round(X_test_.apply(pf)).clip(lower=y_linear)\n    \n    submission.loc[submission['loc']==coords,'Fatalities'] = y_preds_","d87d5953":"submission.drop('loc', axis=1, inplace=True)\nsubmission['index'] = submission['index'] + 1\nsubmission.rename(columns={\n    'index' : 'ForecastId'}, inplace=True)","8d4f0398":"submission","3248c7b7":"submission.to_csv('submission.csv', index=False)","195e6a28":"### Deaths","a84ed11e":"### Confirmed cases","d77a9943":"### Confirmed cases","300c8e59":"##  Data preprocessing","aab53ec6":"### Fatalities","576d8cef":"## Toy model ","643fd13e":"## Full model"}}