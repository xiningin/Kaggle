{"cell_type":{"a5402519":"code","2e3bca87":"code","89c4ef04":"code","7910291f":"code","b6348cda":"code","87d1b2a9":"code","88fd33a5":"code","605d0b25":"code","fa8ef0bf":"code","94ada63f":"code","988991f8":"code","b88a4816":"code","6fa4dc6a":"code","057b3284":"code","a50d6e49":"code","62afab78":"code","3e48cc5c":"markdown","8495aa12":"markdown","bfe198d8":"markdown","bbf2bd4d":"markdown","8765b259":"markdown","0c57e2dd":"markdown","a5d05d3a":"markdown","93c74715":"markdown","f028c793":"markdown","a089ce59":"markdown","6ed21228":"markdown","31a4b7dd":"markdown","1fb14df1":"markdown","19066e3b":"markdown","b02c7a87":"markdown","b959de1c":"markdown","dd0c904e":"markdown","82a10553":"markdown"},"source":{"a5402519":"!echo Y | apt-get install graphviz libgraphviz-dev pkg-config\n!pip install pygraphviz\n!pip install pyvis","2e3bca87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport networkx as nx\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\n\n%matplotlib inline","89c4ef04":"df_jobs_struct = pd.read_csv('..\/input\/2-raw-job-bulletins-to-structured-csv\/jobs.csv')\ndf_jobs_struct[['JOB_CLASS_TITLE', 'JOB_CLASS_NO', 'EXP_JOB_CLASS_TITLE']].head(20)","7910291f":"def get_upper_positions(current_job_title):\n    return df_jobs_struct.loc[\n        df_jobs_struct['EXP_JOB_CLASS_TITLE'].str.upper()\\\n        == current_job_title.upper()]\n\ndef build_graph(job_title,list_relations=None):\n    # job title is the lower position\n    # we will find upper position of this job_title\n    \n    # first get all the position this job_title as a experience\n    \n    \n    upper_positions = get_upper_positions(job_title)\n    \n    if len(upper_positions) == 0:\n        return\n    else:\n        if list_relations is None:\n            list_relations = list(\n                zip(\n                    upper_positions.JOB_CLASS_TITLE.str.upper(),\n                    upper_positions.EXP_JOB_CLASS_TITLE.str.upper()))\n\n            if len(upper_positions) >= 1:\n                for index, row in upper_positions.iterrows():\n                    build_graph(row['JOB_CLASS_TITLE'], list_relations)\n                    break\n            else:\n                return\n        else:\n            temp_list_relations = list(\n                zip(\n                    upper_positions.JOB_CLASS_TITLE.str.upper(),\n                    upper_positions.EXP_JOB_CLASS_TITLE.str.upper()))\n            for t in temp_list_relations:\n                list_relations.append(t)\n                \n            if len(upper_positions) >= 1:\n                for index, row in upper_positions.iterrows():\n                    build_graph(row['JOB_CLASS_TITLE'])\n                    break\n            else:\n                return\n                \n    return list_relations","b6348cda":"network_tuple = build_graph('MANAGEMENT ANALYST')\nnetwork_tuple","87d1b2a9":"%config InlineBackend.figure_format = 'retina'\nfrom networkx.drawing.nx_agraph import write_dot, graphviz_layout\n\nnetwork_tuple = build_graph('MANAGEMENT ANALYST')\n# build a networkx graph\nG = nx.DiGraph() \n# add main node our given job title\nG.add_node('MANAGEMENT ANALYST') \n# add edges of our graph \nif network_tuple is not None:\n    G.add_edges_from(network_tuple)\n    \n    \n# now plot that graph using networkx build in function\nplt.figure(figsize=(20, 20))\npos =graphviz_layout(G, prog='dot')\nnx.draw(G.reverse(), pos,with_labels=False, arrows=True, arrowstyle='simple', arrowsize=18)\ntext = nx.draw_networkx_labels(G,pos)\nfor _,t in text.items():\n    t.set_rotation(45)\n    t.set_fontsize(22)\nplt.show()","88fd33a5":"#########################################\n# function for ploting promotions graph very easily\n#########################################\n\ndef plot_promotion_graph(job_title):\n    network_tuple = build_graph(job_title)\n    # build a networkx graph\n    G = nx.DiGraph() \n    # add main node our given job title\n    G.add_node(job_title) \n    # add edges of our graph \n    if network_tuple is not None:\n        G.add_edges_from(network_tuple)\n\n\n    # now plot that graph using networkx build in function\n    plt.figure(figsize=(20, 20))\n    pos =graphviz_layout(G, prog='dot')\n    nx.draw(G.reverse(), pos,with_labels=False, arrows=True, arrowstyle='simple', arrowsize=18)\n    text = nx.draw_networkx_labels(G,pos)\n    for _,t in text.items():\n        t.set_rotation(45)\n        t.set_fontsize(20)\n    plt.show()","605d0b25":"plot_promotion_graph('SENIOR MANAGEMENT ANALYST')","fa8ef0bf":"plot_promotion_graph(\"DETENTION OFFICER\")","94ada63f":"plot_promotion_graph(\"ANIMAL KEEPER\")","988991f8":"def show_promotion_details(job_title):\n    temp = df_jobs_struct.loc[\n        df_jobs_struct[\"JOB_CLASS_TITLE\"] == job_title.upper()]\n    return temp[['EXP_JOB_CLASS_TITLE', 'EXP_JOB_CLASS_FUNCTION',\n                 'EXPERIENCE_LENGTH', 'EDUCATION_MAJOR', 'EXP_JOB_COMPANY']]","b88a4816":"show_promotion_details('SENIOR MANAGEMENT ANALYST')","6fa4dc6a":"from pyvis.network import Network","057b3284":"def plot_interactive_graph(job_title):\n    network_tuple = build_graph(job_title)\n    # build a networkx graph\n    G = nx.DiGraph() \n    # add main node our given job title\n    G.add_node(job_title) \n    # add edges of our graph \n    if network_tuple is not None:\n        G.add_edges_from(network_tuple)\n\n    nt = Network(height=\"800px\",\n                     width=\"750px\",\n                     directed=True,\n                     notebook=True,\n                     bgcolor=\"#ffffff\",\n                     font_color=False,\n                     layout=True)\n    nt.from_nx(G)\n\n    neighbor_map = nt.get_adj_list()\n    # add neighbor data to node hover data\n    for node in nt.nodes:\n        node[\"title\"] = \"Experience Job Title: \"+ df_jobs_struct.loc[\n            df_jobs_struct['JOB_CLASS_TITLE'].str.upper() == node['title'], 'EXP_JOB_CLASS_TITLE'].str.upper(\n        ).str.cat(sep=', ') + \"; Experience Years: \" + df_jobs_struct.loc[\n            df_jobs_struct['JOB_CLASS_TITLE'].str.upper() == node['title'], 'EXPERIENCE_LENGTH'].str.upper(\n        ).str.cat(sep=', ')\n        node[\"value\"] = len(neighbor_map[node[\"id\"]])\n    return nt\n    ","a50d6e49":"network = plot_interactive_graph('MANAGEMENT ANALYST')\nnetwork.show(\"mygraph.html\")","62afab78":"network = plot_interactive_graph(\"ANIMAL KEEPER\")\nnetwork.show(\"mygraph2.html\")","3e48cc5c":"That's really awesome! This interactive graph is really useful. We can zoom and select any job. If we select any node it will show what experience job and year an employee need to get there. We can get the necessary information for each job by hovering over the jobs. In the interactive plot, **the bigger the node the higher position it is**. We hope this will be really helpful for the City of LA.","8495aa12":"Yes! this is a very simple function but it is very useful. Suppose, in the first promotion graph of MANAGEMENT ANALYST, an employee of this position could see from that graph he\/she can get promotion to SENIOR MANAGEMENT ANALYST and there he has more opportunity to grow. So, with this function, we print out that if he worked 2 years in management analyst in any company, he could get a promotion in SENIOR MANAGEMENT ANALYST. ","bfe198d8":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Build function for easy drawing of promotion graphs<\/font>\nWe previously saw our techniques are working. Now let's make functions to put it all together. We will create a function, that will draw a promotional graph by giving a job title. If the job doesn't have any promotion then it will just plot the job title. ","bbf2bd4d":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Let's get even deeper<\/font>\nNow, let's create an interactive graph like previous graph, but this time when you hover over an job node it will show necessary information to get there. Let's see! ","8765b259":"We defined our functions, let's test the functions. ","0c57e2dd":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Load Dataset<\/font>\nFirst, let's load our structured CSV file. We will use this dataset to find and create our promotional graph. ","a5d05d3a":"<h1 align=\"center\"><font color=\"#5831bc\" face=\"Comic Sans MS\">Jobs Promotional Pathway<\/font><\/h1> ","93c74715":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Build job promotional graph and draw<\/font>\nPreviously, we build functions that return relations to all possible promotional position by given a job. Now we will use that function and create a graph data structure using ```networkX```. NetworkX is a python library which makes very easy to create and drawing graph. We will use that in our solutions. Without further talking, let's get to work. ","f028c793":"YES! That's really awesome! We finally made a way to show a graph that shows all the possible promotions for a given job. Now let's build a function for doing that really easily. ","a089ce59":"***\nThis notebook is a part of the solution for DSG: City of LA competition. The solution splited into 5 parts. Here is the list of notebook in correct order. The part of solution you are currently reading is highlighted in bold.\n\n[1. Introduction to the solution of DSG: City of LA](https:\/\/www.kaggle.com\/niyamatalmass\/1-introduction-to-the-solution-of-dsg-city-of-la)\n\n[2. Raw Job Postings to structured CSV](https:\/\/www.kaggle.com\/niyamatalmass\/2-raw-job-bulletins-to-structured-csv)\n\n[3. Identify biased language](https:\/\/www.kaggle.com\/niyamatalmass\/3-identify-biased-language)\n\n[4. Improve the diversity and quality](https:\/\/www.kaggle.com\/niyamatalmass\/4-improve-the-diversity-and-quality)\n\n[**5. Jobs Promotional Pathway**](https:\/\/www.kaggle.com\/niyamatalmass\/5-jobs-promotional-pathway)\n***","6ed21228":"That looks promising. We can easily use this dataset to create a graph like structure that employee can use to see all the promotional pathway a job has. ","31a4b7dd":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Notebook Overview<\/font>\nFinally, we have to come to our last part. In this notebook, We will try to make it easier to determine which promotions are available to employees in each job class. Put more simply that we have to find all the possible promotional pathway an employer can traverse given a job. \n\nThe solution to this problem is mostly done in part 2 where we extracted the data field and build a structured CSV dataset of the job description. There is a column name ```EXP_JOB_CLASS_TITLE```. It's store the title of the job that one must experience with to have that job. We can use this information to build our promotional graph. Without further talking, let's get started. ","1fb14df1":"Wow! We passed ```MANAGEMENT ANALYST``` in our function and it returns a list of tuples. Each tuple contains promotional information like this ```(PROMOTION JOB TITLE, GIVEN CURRENT JOB TITLE)```. Now we can easily make a network graph using this information for all possible promotional pathways. ","19066e3b":"Alright! Now we see that our promotion graph is working perfectly. This is a very helpful feature. An employee can easily see what promotions are available for his\/her job position. \n\n    This will increase the quality and diversity among the applicants. Because they will be motivated by seeing all possible promotions\/position they can have if they apply for the job. ","b02c7a87":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Conclusion<\/font>\nWe finally came to the end of my solutions. I thank you very much for reading my solutions to this competition. Hope you enjoyed it. I also learned a lot while working on this competition. It has a unique problem that taught different knowledge. \n\nAt last, I want to describe the features of this solution in the lights of grading rubric provided by Kaggle. \n\n<div class=\"alert alert-block alert-info\">\n<p\/>\n<b>Accuracy:<\/b><br\/>\n    \u2022 Successfully converted the folder of job postings into a structured CSV. The quality of the CSV is better than any other CSV shared in the forums. Because in forums, all the people used regex by giving a certain pattern. But there were hundreds of patterns to give. So sometimes it will not work. For randomized and new jobs, using regex will fail at some point, my solutions use NER that can be used for new jobs. <br\/>\n<p\/>\n<b>Documentation:<\/b><br\/>\n    \u2022 Provided comment for most of the code so that it can be understood what it's doing. <br\/>\n    \u2022 Followed industry best coding practices. I build necessary functions and methods for reuse and readability, that can be used in the production of the City of LA. <br\/>\n    \u2022 Also, provided extensive documentation of my methodology. I describe every techniques\/library I used in my solutions. <br\/>\n<p\/>\n<b>Recommendation:<\/b><br\/>\n    \u2022 Used the structured CSV file for doing all my analysis. <br\/>\n    \u2022 Have made extensive EDA on structured CSV and found very insightful stories. I documented those in my solutions and provided recommendations with each of my findings. Also, all the recommendations, are actionable by the City of LA. For example. I found that masculine-coded jobs are higher and find popular masculine coded words, that the City of LA easily can improve on.<br\/>\n    \u2022 Use of machine learning model for identifying biased language also an interesting and useful technique that I shared with my solutions. That easily can use for a more complex identification of biased language. <br\/>\n<\/div>\n\nThis is end of my solutions. Hope you enjoyed it! Feel free to comment, upvote! Thank you very much! ","b959de1c":"<div class=\"alert alert-block alert-info\">\n<p\/>\n<b>RECOMMENDATIONS FOR EXPLICIT PROMOTIONS:<\/b><br\/>\n    \u2022 We saw explicit promotion in this notebook. We used lot of visualization methods to describe our graph. The City of LA can easily take this idea make something more useful. All the code is moduler so that they can use this codes more easily. <br\/>\n    <br\/>\n<b>RECOMMENDATIONS FOR IMPLICIT PROMOTIONS:<\/b><br\/>\n    \u2022 We saw explicit promotion in this notebook. But the City of LA also can easily implement implicit promotion graph. There is a column in structured version of job bulletins ```EXP_JOB_CLASS_FUNCTION```. Using that column value we can easily match with job duties to a given job title and from that we can create promotion graph.\n<p\/>\n<\/div>","dd0c904e":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Define function for finding promotions<\/font>\nIn this section, we will define two important functions for building our graph. It returns a list of tuples containing all the promotional path an employee can traverse given the job title. \n\nIt will return a list of tuples. Each tuple contains promotional information like this pattern ```(PROMOTION JOB TITLE, GIVEN CURRENT JOB TITLE)``` so that we can easily create graph data structure from that. ","82a10553":"# <font color=\"#5831bc\" face=\"Comic Sans MS\">Build function for getting info for the promotion<\/font>\nWe already see our network graph. Now we want to go even further. We want to make a function that takes job title and output a person need to know to get a promotion to that job. This will be helpful, in previous graph employee can see which job avialable for promotions. Now we want to show them what they need. "}}