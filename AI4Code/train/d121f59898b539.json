{"cell_type":{"2aa3c102":"code","ca1c48c2":"code","a10604b4":"code","988ba37c":"code","c9f79219":"code","c2fbe6fd":"code","42200008":"code","82d7f7e4":"code","2fbf610f":"code","ae1fef12":"code","da295503":"code","8f7bab5b":"code","43781379":"code","a43b61e1":"markdown","dd9c4ba2":"markdown","d1dcc9ec":"markdown"},"source":{"2aa3c102":"import pandas as pd","ca1c48c2":"train = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\ntrain.head()","a10604b4":"cat_cols = [x for x in train.columns if x.startswith('cat')]\ncat_cols","988ba37c":"from categorical_transform import CategoricalTransform,IntegerCategoricalTransform\nct = IntegerCategoricalTransform(cat_cols)\nx_train = ct.fit_transform(train)\nx_test = ct.transform(test)","c9f79219":"x_train = train.drop(columns=['id','target'])\ny_train = train['target']","c2fbe6fd":"from sklearn.model_selection import KFold\nkfold = KFold(n_splits=5, shuffle=True)","42200008":"from sklearn.metrics import roc_auc_score\nimport optuna\nimport numpy as np\nfrom sklearn.model_selection import KFold\nfrom catboost import CatBoostClassifier\nfrom sklearn.pipeline import Pipeline\n\ndef objective(trial):\n    params = {'iterations':10000,\n              'depth': trial.suggest_int(\"depth\", 4, 16),\n              'l2_leaf_reg': trial.suggest_float(\"l2_leaf_reg\", 0.0001, 25, log=True),\n              'bagging_temperature': trial.suggest_float(\"bagging_temperature\", 0, 10),\n              'auto_class_weights':trial.suggest_categorical('auto_class_weights', [None,'Balanced','SqrtBalanced']),\n              'grow_policy': 'Lossguide',\n              'early_stopping_rounds':200,\n              'eval_metric':'AUC',\n              'bootstrap_type':'Bayesian',\n              'use_best_model':True,\n              'task_type':'GPU', \n              'cat_features':cat_cols,\n              'verbose':False,\n              'border_count':254              \n             }\n    #'grow_policy': trial.suggest_categorical('grow_policy',['SymmetricTree','Depthwise','Lossguide']),              \n    #if params['grow_policy'] in ['Depthwise','Lossguide']:\n    #    params['min_data_in_leaf'] = trial.suggest_int(\"min_data_in_leaf\", 1, 5000, log=True)\n    #if params['grow_policy'] in ['Lossguide']:\n    #    params['max_leaves'] = trial.suggest_int(\"max_leaves\", 1, 64)\n    \n    cbc = CatBoostClassifier(**params)\n    kf = KFold(n_splits=5, shuffle=True)\n    roc_test = []\n    for train_index, test_index in kf.split(x_train):\n        x_train_fold, x_test_fold = x_train.loc[train_index], x_train.loc[test_index]\n        y_train_fold, y_test_fold = y_train.loc[train_index], y_train.loc[test_index]\n        cbc.fit(x_train_fold, y_train_fold, eval_set=(x_test_fold, y_test_fold))    \n        proba = cbc.predict_proba(x_test_fold)[:,1]\n        roc_test.append(roc_auc_score(y_test_fold, proba))\n    return np.mean(roc_test)","82d7f7e4":"study = optuna.create_study(direction=\"maximize\")\nstudy.optimize(objective, timeout=5*60*60)\nprint(study.best_trial)","2fbf610f":"study.best_params","ae1fef12":"study.best_value","da295503":"len(study.trials)","8f7bab5b":"from optuna.visualization import plot_optimization_history, plot_param_importances\nplot_optimization_history(study)","43781379":"plot_param_importances(study)","a43b61e1":"## Load data","dd9c4ba2":"# CatBoost Optuna","d1dcc9ec":"# Optuna optimization"}}