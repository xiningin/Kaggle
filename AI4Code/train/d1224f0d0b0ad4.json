{"cell_type":{"f844c367":"code","243e19da":"code","d9352f88":"code","65ebd3d4":"code","a4241c10":"code","7e593695":"code","397b14c9":"code","c597950e":"code","a240fdc7":"code","b92f79ab":"code","c4a1beeb":"code","8d27b1cf":"code","7c5d56ed":"code","dec29b7e":"code","31582b15":"code","325e065a":"code","391f685c":"code","be2085b2":"code","5f62887d":"code","9c849bc6":"code","ef5f4855":"code","a13d5570":"code","327d7784":"code","179dbb82":"code","dc3ff830":"code","0735d322":"markdown"},"source":{"f844c367":"#true to get webbased map for background false for standard\nwebproj = False","243e19da":"import geoplot as gplt\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport matplotlib.lines as mlines\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\n\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors","d9352f88":"epsg = 4289\nprojectioncode = \"EPSG:%d\" % epsg\n\nneighborhoodDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Neighborhood_Statistical_Areas\/Neighborhood_Statistical_Areas.shp').to_crs(epsg=epsg)\nneighborhoodDf['Name'] = neighborhoodDf['GNOCDC_LAB'].map(lambda x: x.title().replace(' ',\"\\n\").split('-')[0])","65ebd3d4":"parksDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Parks_-_Polygon\/Parks_-_Polygon.shp').to_crs(epsg=epsg)","a4241c10":"restaurantsDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Restaurants\/Restaurants.shp').to_crs(epsg=epsg)","7e593695":"hospitalsDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Hospitals\/Hospitals.shp').to_crs(epsg=epsg)","397b14c9":"gasStationsDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Gas_Stations\/Gas_Stations.shp').to_crs(epsg=epsg)","c597950e":"schoolsDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Schools\/Schools.shp').to_crs(epsg=epsg)","a240fdc7":"bikeLanesDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Bike_Lanes\/Bike_Lanes.shp').to_crs(epsg=epsg)","b92f79ab":"waterDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/water\/WATER2.SHP')","c4a1beeb":"swbProjDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Sewerage_and_Water_Board_Roadwork_Projects\/Sewerage_and_Water_Board_Roadwork_Projects.shp').to_crs(epsg=epsg)","8d27b1cf":"roadProjDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Dept_of_Public_Works_Roadwork_Projects\/Dept_of_Public_Works_Roadwork_Projects.shp').to_crs(epsg=epsg)","7c5d56ed":"trafficCamDf = gpd.read_file('..\/input\/geospatial-sets-for-new-orleans\/Traffic_Camera_Locations\/Traffic_Camera_Locations.shp').to_crs(epsg=epsg)","dec29b7e":"crscode = 3395 if not webproj else 3857\nneighborhoodDf['centers'] = neighborhoodDf['geometry'].centroid.to_crs(crscode)\n","31582b15":"neighborhoodDf.head(2)","325e065a":"projection = gplt.Mercator() if not webproj else gplt.WebMercator()\nfig, ax = plt.subplots(figsize=(28,18), subplot_kw={'projection': projection})\n\nlabelMask = neighborhoodDf['Shape_Area'] > 3e7\n\n#extent = neighborhoodDf.total_bounds\nextent = (-90.14003111,  29.86560481, -89.87, 30.08)\n\nlegendHandles = []\n\ngplt.polyplot(neighborhoodDf,ax=ax, projection=projection, zorder=10, extent=extent, facecolor='#ffffff')\n\ngplt.polyplot(waterDf,ax=ax, \\\n             zorder=11, projection=projection, extent=extent,edgecolor='#abd3df', facecolor='#abd3df')\n\n\ngplt.pointplot(restaurantsDf,ax=ax,\\\n               color='b', \\\n               alpha=0.2,\n               projection=projection, zorder=11, extent=extent)\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Restaurants Considered Essential During Katrina', \\\n                    color='b', \\\n                    alpha=0.2,\\\n                    linestyle='None',\\\n                    marker='.') )\n\ngplt.pointplot(hospitalsDf,ax=ax,\\\n               color='r', \\\n               alpha=1, \\\n               marker='+',\n               projection=projection, zorder=14, extent=extent)\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Hospitals', \\\n                    color='r', \\\n                    alpha=1, \\\n                    marker='+',\\\n                    linestyle='None') )\n\ngplt.pointplot(gasStationsDf,ax=ax,\\\n               color='y', \\\n               alpha=1, \\\n               marker='+',\n               projection=projection, zorder=12, extent=extent)\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Gas Stations', \\\n                    color='y', \\\n                    alpha=1, \\\n                    marker='.',\\\n                    linestyle='None') )\n\ngplt.pointplot(schoolsDf,ax=ax,\\\n               color='orange', \\\n               alpha=1, \\\n               marker='o',\n               projection=projection, zorder=13, extent=extent)\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Schools', \\\n                    color='orange', \\\n                    alpha=1, \\\n                    marker='o',\\\n                    linestyle='None') )\n\ngplt.polyplot(bikeLanesDf,ax=ax,\\\n               color='g', \\\n               alpha=1,\n               projection=projection, zorder=15, extent=extent)\nlegendHandles.append( \\\n                    mpatches.Patch(label='Bike Lanes', \\\n                    color='g', \\\n                    alpha=1) )\n\n\nif webproj:\n    gplt.webmap(neighborhoodDf, projection=projection,ax=ax, extent=extent)\n\nelse:\n    #show parks if no webmap\n    gplt.polyplot(parksDf, edgecolor=None,facecolor='g', \\\n              alpha=0.4, \\\n              ax=ax,projection=projection,extent=extent, zorder=9)\n    legendHandles.append(\\\n                         mpatches.Patch(color='g',label='Parks', alpha=0.4) \\\n                        )\n    \n    ax.set_facecolor('#ffffce')\n    \n#labeling handled but web project\nfor idx,neighborhood in neighborhoodDf[labelMask].iterrows():\n    pass\n    ax.annotate(text=neighborhood['Name'], xy=(neighborhood['centers'].x,neighborhood['centers'].y), \\\n               va='center',ha='center', xytext=(-20,-12), textcoords='offset points', fontsize=8, zorder=100)\n\nax.set_title('Combined Map of New Orleans (zoom in)')\nax.legend(handles=legendHandles, loc='upper left').set_zorder(50)\n\nfig.tight_layout()\n\nprint(\"Extent:\", extent)\n\nfig.savefig('.\/CombinedMap.jpg')","391f685c":"def countPoints(poly, points):\n    count = 0\n    for point in points:\n        if poly.contains(point):\n            count +=1\n    \n    return count\n\ndef countPointsRestaurants(poly):\n    return countPoints(poly,restaurantsDf['geometry'])\n\nneighborhoodDf['Restaurants'] = neighborhoodDf['geometry'].map(countPointsRestaurants)","be2085b2":"fig, ax = plt.subplots(figsize=(28,18), subplot_kw={'projection': projection})\n\nnorm = colors.LogNorm()\nneighborhoodDf['RestaurantNorm'] = norm(neighborhoodDf['Restaurants'])\n\n\ngplt.choropleth(neighborhoodDf, hue='RestaurantNorm',ax=ax,extent=extent,projection=projection, legend=True, cmap='gist_rainbow_r')\ngplt.polyplot(neighborhoodDf,ax=ax,extent=extent,projection=projection,zorder=10)    \n    \n\ngplt.polyplot(waterDf,ax=ax, \\\n                zorder=11, projection=projection, extent=extent, edgecolor='#abd3df', facecolor='#abd3df')\n    \n    \nlegendHandles = []\nif webproj:\n    gplt.webmap(neighborhoodDf, projection=projection,ax=ax, extent=extent)\n\nelse:\n   \n    ax.set_facecolor('#ffffce')\n    \n#labeling handled but web project\nfor idx,neighborhood in neighborhoodDf.iterrows():\n    pass\n    ax.annotate(text=neighborhood['Name'], xy=(neighborhood['centers'].x,neighborhood['centers'].y), \\\n               va='center',ha='center', xytext=(-20,-12), textcoords='offset points', fontsize=8, zorder=100)\n\nax.set_title('# Restaurants in Neighborhood')\n\ncbar = fig.get_axes()[-1]\ncbar.set_yticklabels([int(x) for x in norm.inverse(cbar.get_yticks())])\ncbar.set_ylabel('Restaurants in Neighborhood Considered Essential During Katrina (LogNorm)')\n\nfig.tight_layout()\n\nfig.savefig('.\/RestaurantsMap.jpg')","5f62887d":"def countIntersects(poly, lines):\n    count = 0\n    for line in lines:\n        if poly.intersects(line):\n            count += 1\n            \n    return count\n    \ndef countPointsSWB(poly):\n    return countIntersects(poly,swbProjDf['geometry'])\n\nneighborhoodDf['SWBProjects'] = neighborhoodDf['geometry'].map(countPointsSWB)\nprint(\"Max\/Mean\", (neighborhoodDf['SWBProjects'].max(),neighborhoodDf['SWBProjects'].mean()))","9c849bc6":"fig, ax = plt.subplots(figsize=(28,18), subplot_kw={'projection': projection})\n\n\ngplt.choropleth(neighborhoodDf, hue='SWBProjects',ax=ax,extent=extent,projection=projection, legend=True, cmap='gnuplot2')\ngplt.polyplot(neighborhoodDf,ax=ax,extent=extent,projection=projection,zorder=10)    \n    \n\ngplt.polyplot(waterDf,ax=ax, \\\n                zorder=11, projection=projection, extent=extent, edgecolor='#abd3df', facecolor='#abd3df')\n    \n    \nlegendHandles = []\nif webproj:\n    gplt.webmap(neighborhoodDf, projection=projection,ax=ax, extent=extent)\n\nelse:\n   \n    ax.set_facecolor('#ffffce')\n    \n#labeling handled but web project\nfor idx,neighborhood in neighborhoodDf.iterrows():\n    c = 'white' if neighborhood['SWBProjects'] < 100 else 'black'\n    ax.annotate(text=neighborhood['Name'], xy=(neighborhood['centers'].x,neighborhood['centers'].y), \\\n               va='center',ha='center', xytext=(-20,-12), textcoords='offset points', fontsize=8, zorder=100,\n               color=c)\n\nax.set_title('# SWB Projects in Neighborhood')\ncbar = fig.get_axes()[-1]\ncbar.set_ylabel('Number of SWB projects intersecting neighboor')\n\nfig.tight_layout()\n\nfig.savefig('.\/SWBMap.jpg')","ef5f4855":"def countPointsRoadProj(poly):\n    return countIntersects(poly,roadProjDf['geometry'])\n\nneighborhoodDf['RoadProjects'] = neighborhoodDf['geometry'].map(countPointsRoadProj)\nprint(\"Max\/Mean\", (neighborhoodDf['RoadProjects'].max(),neighborhoodDf['RoadProjects'].mean()))","a13d5570":"fig, ax = plt.subplots(figsize=(28,18), subplot_kw={'projection': projection})\n\n\ngplt.choropleth(neighborhoodDf, hue='RoadProjects',ax=ax,extent=extent,projection=projection, legend=True, cmap='jet')\ngplt.polyplot(neighborhoodDf,ax=ax,extent=extent,projection=projection,zorder=10)    \n    \n\ngplt.polyplot(waterDf,ax=ax, \\\n                zorder=11, projection=projection, extent=extent, edgecolor='#abd3df', facecolor='#abd3df')\n    \n    \nlegendHandles = []\nif webproj:\n    gplt.webmap(neighborhoodDf, projection=projection,ax=ax, extent=extent)\n\nelse:\n   \n    ax.set_facecolor('#ffffce')\n    \n#labeling handled but web project\nfor idx,neighborhood in neighborhoodDf.iterrows():\n    c = 'black' if neighborhood['RoadProjects'] > 200 and neighborhood['RoadProjects'] < 400 else 'white'\n    ax.annotate(text=neighborhood['Name'], xy=(neighborhood['centers'].x,neighborhood['centers'].y), \\\n               va='center',ha='center', xytext=(-20,-12), textcoords='offset points', fontsize=8, zorder=100,\n               color=c)\n\nax.set_title('# Road Projects in Neighborhood')\ncbar = fig.get_axes()[-1]\ncbar.set_ylabel('Number of Road projects intersecting neighboor')\n\nfig.tight_layout()\n\nfig.savefig('.\/RoadProjectsMap.jpg')","327d7784":"trafficCamDf.head(2)","179dbb82":"#only show working cams\ntrafficCamOperMask = trafficCamDf['Operationa'] == 'Y'\n\nredLightEnforMask = (trafficCamDf['RLCEnforce'] == 'x') & trafficCamOperMask\nspeedEnforMask = ((trafficCamDf['SZEnforcem'] == 'x') | (trafficCamDf['SpeedEnfor'] == 'x')) & trafficCamOperMask\n\nbothEnforMask = redLightEnforMask & speedEnforMask\n\nonlySpeedEnforMask = speedEnforMask & (~redLightEnforMask)\nonlyRedLightMask = redLightEnforMask & (~speedEnforMask)\n","dc3ff830":"projection = gplt.Mercator() if not webproj else gplt.WebMercator()\nfig, ax = plt.subplots(figsize=(28,18), subplot_kw={'projection': projection})\n\n#extent = neighborhoodDf.total_bounds\nextent = (-90.14003111,  29.86560481, -89.87, 30.08)\n\nlegendHandles = []\n\n\ngplt.pointplot(trafficCamDf[bothEnforMask],ax=ax, \\\n             zorder=15, projection=projection, extent=extent,color='magenta')\n\ngplt.pointplot(trafficCamDf[onlyRedLightMask],ax=ax, \\\n             zorder=15, projection=projection, extent=extent,color='red')\n\n\ngplt.pointplot(trafficCamDf[onlySpeedEnforMask],ax=ax, \\\n             zorder=15, projection=projection, extent=extent,color='orange')\n\n\ngplt.pointplot(trafficCamDf[~trafficCamOperMask],ax=ax, \\\n             zorder=15, projection=projection, extent=extent,color='blue')\n\ngplt.pointplot(trafficCamDf,ax=ax, \\\n             zorder=14, projection=projection, extent=extent,color='black')\n\n\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Speed and RLC', \\\n                    color='magenta', \\\n                    alpha=1, \\\n                    marker='.',\\\n                    linestyle='None') )\n\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='RLC only', \\\n                    color='red', \\\n                    alpha=1, \\\n                    marker='.',\\\n                    linestyle='None') )\n\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Speed Enforcement Only', \\\n                    color='orange', \\\n                    alpha=1, \\\n                    marker='.',\\\n                    linestyle='None') )\n\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Busted Traffic Cams', \\\n                    color='blue', \\\n                    alpha=1, \\\n                    marker='.',\\\n                    linestyle='None') )\n\n\nlegendHandles.append( \\\n                    mlines.Line2D([],[],label='Unknown Enforcement but Functional', \\\n                    color='black', \\\n                    alpha=1, \\\n                    marker='.',\\\n                    linestyle='None') )\n\n\nif webproj:\n    gplt.webmap(neighborhoodDf, projection=projection,ax=ax, extent=extent)\n\nelse:\n    #show parks if no webmap\n    gplt.polyplot(parksDf, edgecolor=None,facecolor='g', \\\n              alpha=0.4, \\\n              ax=ax,projection=projection,extent=extent, zorder=12)\n    legendHandles.append(\\\n                         mpatches.Patch(color='g',label='Parks', alpha=0.4) \\\n                        )\n    \n    ax.set_facecolor('#ffffce')\n    \n    #labeling handled but web project\n    for idx,neighborhood in neighborhoodDf.iterrows():\n        ax.annotate(text=neighborhood['Name'], xy=(neighborhood['centers'].x,neighborhood['centers'].y), \\\n                   va='center',ha='center', xytext=(-20,-12), textcoords='offset points', fontsize=8, zorder=100)\n        \n    gplt.polyplot(neighborhoodDf,ax=ax, projection=projection, zorder=10, extent=extent, facecolor='#ffffff')\n\n    gplt.polyplot(waterDf,ax=ax, \\\n             zorder=11, projection=projection, extent=extent,edgecolor='#abd3df', facecolor='#abd3df')\n\nax.set_title('Traffic Camera Locations')\nax.legend(handles=legendHandles, loc='upper left').set_zorder(50)\n\nfig.tight_layout()\n\nprint(\"Extent:\", extent)\n\nfig.savefig('.\/TrafficCam.jpg')","0735d322":"### Description\n\nJust some Maps I made of New Orleans to test GeoPlot.  [Github Project](https:\/\/github.com\/GarysCorner\/NewOrleansMaps)\n\n### Datasets\n- [Neighborhood Statistical Areas](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/neighborhood-statistical-areas?geometry=-90.539%2C29.917%2C-89.229%2C30.125)\n- [Parks Polygon](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/parks-polygon?geometry=-90.682%2C29.878%2C-89.371%2C30.086)\n- [City of New Orleans Essential Restaurants Locations](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/restaurants?geometry=-100.153%2C29.004%2C-89.672%2C30.672)\n- [Hospitals](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/hospitals?geometry=-90.642%2C29.883%2C-89.332%2C30.091)\n- [Gas Stations](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/gas-stations?geometry=-90.653%2C29.926%2C-89.343%2C30.134)\n- [Bike Lanes](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/bike-lanes?geometry=-90.374%2C29.928%2C-89.719%2C30.032)\n- [Lake Pontchartrain Shoreline](https:\/\/pubs.usgs.gov\/of\/1998\/of98-805\/html\/gismeta.htm)\n- [Sewerage and Waterboard Roadwork Projects](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/sewerage-and-water-board-roadwork-projects?geometry=-90.630%2C29.885%2C-89.320%2C30.093)\n- [Dept of Public Works Roadwork Projects](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/dept-of-public-works-roadwork-projects?geometry=-90.627%2C29.882%2C-89.317%2C30.090)\n- [Traffic Camera Locations](https:\/\/portal-nolagis.opendata.arcgis.com\/datasets\/traffic-camera-locations?geometry=-90.375%2C29.919%2C-89.720%2C30.023)"}}