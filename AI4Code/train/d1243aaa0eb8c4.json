{"cell_type":{"6d9a1516":"code","7b063063":"code","510dace9":"code","e3f53f0a":"code","f8b3f698":"code","5c1d672a":"code","9e8d9bd6":"code","f93c10a5":"code","78f657ef":"code","240e4f10":"code","ccb20c10":"code","2042ab15":"markdown","5a919e13":"markdown","6a067695":"markdown","93a7b185":"markdown"},"source":{"6d9a1516":"%config Completer.use_jedi = False","7b063063":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import imshow, imread\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\n\nimport scipy.stats as stats\n\nimport lightgbm as lgb\nimport warnings\n\nimport optuna","510dace9":"R_SEED = 37","e3f53f0a":"submission_ex = pd.read_csv('\/kaggle\/input\/tabular-playground-series-aug-2021\/sample_submission.csv')","f8b3f698":"dat_1_df = pd.read_csv('\/kaggle\/input\/for-00351\/submission_c_mix_1v6.csv')","5c1d672a":"dat_1_df.head()","9e8d9bd6":"train_df = pd.read_csv('\/kaggle\/input\/for-00352ds\/train_df_ivan_0035_1.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/for-00352ds\/test_df_ivan_0035_1.csv')","f93c10a5":"targets_df = train_df[['loss']].copy()\ntrain_df.drop(['id', 'loss'], axis=1, inplace=True) \ntest_df.drop(['id'], axis=1, inplace=True) \ntarg_1_df = dat_1_df[['loss']].copy()","78f657ef":"for_me = submission_ex[['id']].copy()","240e4f10":"my_y = targ_1_df['loss'].values\n\nlr = 0.2\nfor w in range(1):\n    # ----------------------------------------------\n    params_loss_1 = {\n                    'n_estimators': 20000,\n                    'learning_rate': 0.005,\n                    'min_child_samples': 167,\n                    'feature_fraction': 0.3513017494226757,\n                    'bagging_fraction': 0.7786913835450154,\n                    'bagging_freq': 4,\n                    'num_leaves': 178, \n                    }\n\n    lgbm_reg_1 = lgb.LGBMRegressor(\n                                **params_loss_1, \n                                objective='rmse',\n                                metric='rmse',\n                                n_jobs=-1\n                                )\n    \n    lgbm_reg_1.fit(\n                test_df,\n                my_y)\n\n    p_m = lgbm_reg_1.predict(train_df)\n\n    new_y = targets_df['loss'].values - p_m\n    # ----------------------------------------------\n    \n    params_loss_2 = {\n                    'n_estimators': 10000,\n                    'learning_rate': 0.001,\n                    'min_child_samples': 295,\n                    'feature_fraction': 0.2915087392510538,\n                    'bagging_fraction': 0.8549961258824171,\n                    'bagging_freq': 0,\n                    'num_leaves': 105, \n                    }\n\n    lgbm_reg_2 = lgb.LGBMRegressor(\n                                **params_loss_2, \n                                objective='rmse',\n                                metric='rmse',\n                                n_jobs=-1\n                                )\n    \n    lgbm_reg_2.fit(\n                train_df, \n                new_y,\n                )\n\n    p_a = lgbm_reg_2.predict(test_df)\n\n    my_y = my_y + (p_a * lr)\n    # ----------------------------------------------\n    \nfinal_loss = my_y","ccb20c10":"submission_c = submission_ex[['id']].copy()\nsubmission_c['loss'] = final_loss\nsubmission_c.to_csv('submission_c.csv', index=False)","2042ab15":"#### This is whole code (without optuna part). I boost-ed result several time with this notebook until the final score.","5a919e13":"#### My Boost","6a067695":"#### Thanks to @somayyehgholami [[notebook](https:\/\/www.kaggle.com\/somayyehgholami\/3-tps-aug-21-results-rmse-evaluation)] for initial pseudo-labeling data","93a7b185":"#### Thanks to @alexryzhkov [[notebook](https:\/\/www.kaggle.com\/alexryzhkov\/lightautoml-classifier-regressor-mix)] for initial dataset"}}