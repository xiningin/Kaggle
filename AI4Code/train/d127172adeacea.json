{"cell_type":{"b37481da":"code","eebc3086":"markdown","e92fec1b":"markdown","1afd3599":"markdown","722cf377":"markdown","0315d35b":"markdown","c2a6e274":"markdown","5ad53400":"markdown","01514c28":"markdown","712782ed":"markdown","ceb68917":"markdown","b53f604a":"markdown","56f0af7a":"markdown"},"source":{"b37481da":"# Display\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\n# Useful\nimport tqdm\nimport warnings\nwarnings.simplefilter('ignore')\n\n# Data\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\n\n# Visualization\nimport pandas_profiling as pdp\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\n# Preprocessing\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Cross validation\nfrom sklearn.model_selection import StratifiedKFold\n\n# Constants\nSEED = 2019\nN_FOLDS = 10\n\n# Output list of file names given as input\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","eebc3086":"This text is an English version of the following article written in Japanese in December 2019.\n\nhttps:\/\/qiita.com\/daikikatsuragawa\/items\/c946ce4177703ae497ee\n\n\n# Introduction\n\nIn Kaggle notebook, there is \"frequently written code\". In order to reuse this, I put it in a cell as a format that's easy to copy and paste anyway. I hope that by reusing the contents of this cell, we can improve the effectiveness of data analysis in everyone's Kaggle.\n\nThis notebook is written on a subjective basis. Just for reference.\n","e92fec1b":"## Data\n\n```python\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\n```\n\nThis is the code written as the default in notebook. Two essential modules for data analysis, `numpy` for numerical calculation and` pandas` for matrix processing. Also, the description `set_option ('display.max_columns', None)` sets all columns to always be displayed.","1afd3599":"## Display\n\n```python\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n```\n\nThe notebook does not produce the graph you attempted to produce in the middle of the cell (e.g., DataFrame). Using `InteractiveShell`, all the charts that you tried to output in the middle of the cell will be output. However, it must be executed in advance in a cell differentiation from the cell in which the output is attempted. In other words, when you run that cell, it applies to other cells. ","722cf377":"# This is \"one cell\"...\n","0315d35b":"## Useful\n\n```python\nimport tqdm\nimport warnings\nwarnings.simplefilter('ignore')\n```\n\nIn data analysis, there are some processes that require a lot of time. By using `tqdm`, you can check the progress of the process on the progress bar. You may also see warnings that do not affect execution. To ignore this, use the module `warnings`, which handles the display of warnings. To prevent the warning from being displayed, write `warnings.simplefilter ('ignore')`.","c2a6e274":"## Output list of file names given as input\n\n```python\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n```\n\nIt's the default code from notebook. It will first check the given file name.","5ad53400":"## Constants\n\n```python\nSEED = 2019\nN_FOLDS = 10\n```\n\nIn advance, fix the seed of pseudo-random number (`SEED`) and set the number of cross validation divisions (`N_FOLDS`). By assigning these to `StratifiedKFold`, which is a function that implements cross validation, the reproducibility of validation is maintained. An example is shown below.\n\n```python\nskf = StratifiedKFold(n_splits=N_FOLDS, random_state=SEED)\n```\n\nSet `N_FOLDS = 10` based on the subjective opinion that the number of cross validation divisions is frequently 10.","01514c28":"## Cross validation\n\n```python\nfrom sklearn.model_selection import StratifiedKFold \n```\n\nCross validation is necessary to prevent model overfitting (improve generalization performance). By using `Stratified KFold`, which implements stratified K-fold cross validation, you can split the data for training and testing and verify the accuracy of the model while maintaining the distribution ratio.","712782ed":"# Explanation\n\nLet's look at points of the cells above!","ceb68917":"## Visualization\n\n```python\nimport pandas_profiling as pdp\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n```\n\nBy processing `pandas_profiling`, the data type and distribution of each feature, missing values, correlation coefficient, etc. can be output together. Useful for exploratory data analysis (EDA). `matplotlib` is a library used for drawing graphs, and you can draw beautiful graphs by using it in combination with` seaborn`, which operates as a wrapper for it. Data visualization as described above is important for understanding the overall picture of data.","b53f604a":"## Preprocessing\n\n```python\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n```\n\nUsing `SimpleImputer`, you can fill in missing values with one of the mean, median, and mode values.Also, there is `sklearn.preprocessing` as a module implemented for preprocessing. The methods belonging to them can standardize the feature scale by using `StandardScaler` as the preprocessing of numerical values. The feature scale is normalized by using `MinMaxScaler`. Using `LabelEncoder` as preprocessing categorical variables, you can convert a character string to an ID expressed numerically. It can be converted to a vector by using `OneHotEncoder`.\n","56f0af7a":"\n# Conclusion\n\nIf you have any ideas or advice, please let me know!"}}