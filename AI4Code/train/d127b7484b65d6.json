{"cell_type":{"9ecab417":"code","b80c178d":"code","01a21cd9":"code","a02d921a":"code","7d5b711a":"code","e39dd167":"code","82fbbba6":"code","347faac0":"markdown","219392ab":"markdown","1cb1bc1f":"markdown","059ab8c8":"markdown","8fa6f858":"markdown","970cc2a4":"markdown","4bd451f0":"markdown","121f6248":"markdown","0ab5b2c8":"markdown"},"source":{"9ecab417":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b80c178d":"cricket_df = pd.read_csv('\/kaggle\/input\/cricket-chirp-vs-temperature\/Cricket_chirps.csv')\ncricket_df.rename(columns = {'X': 'temperature', 'Y': 'chirps'}, inplace = True)\n\ncricket_df.isna().any()","01a21cd9":"import matplotlib.pyplot as plt\n\n\ndef plot_measure(x, y, xlabel = '', ylabel = '', title = ''):\n    fig, ax = plt.subplots(figsize = (11,7))\n    ax.scatter(x, y)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    \n    \ndef plot_regression_prediction(x, y, x_pred, y_pred, regression, xlabel = '', ylabel = '', title = ''):\n    fig, ax = plt.subplots(figsize = (11,7))\n    ax.scatter(x, y, label = 'real')\n    ax.scatter(x_pred, y_pred, label = 'prediction')\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    abline_plot(model_results = regression, ax = ax)\n\nx = cricket_df['temperature']\ny = cricket_df['chirps']\n\nplot_measure(x, y, xlabel = 'Temperature (Fahrenheit)', ylabel = 'Chirps per Second', title = 'Chirps per second vs. temperature in Fahrenheit')","a02d921a":"lowest_temp = cricket_df['temperature'].min()\nhighest_temp = cricket_df['temperature'].max()\n\nprint(f'The lowest temperature in the dataset is {lowest_temp}, and the highest is {highest_temp}')","7d5b711a":"import statsmodels.api as sm\nfrom statsmodels.graphics.regressionplots import abline_plot\n\n\nlinear_regression = sm.OLS(y, sm.add_constant(x)).fit()\n\nx_right_pred = pd.DataFrame(range(int(highest_temp) + 1, int(highest_temp) + 21))\n\ny_right_pred_raw = linear_regression.predict(sm.add_constant(x_right_pred))\ny_right_pred = pd.DataFrame(y_right_pred_raw).set_index(x_right_pred[0])\n\nplot_regression_prediction(x, y, x_right_pred, y_right_pred, linear_regression, xlabel = 'Temperature (Fahrenheit)', ylabel = 'Chirps per Second', title = 'Chirps per second vs. temperature in Fahrenheit')","e39dd167":"b = linear_regression.params[0]\nslope = linear_regression.params[1]\nintercept_on_y = -b\/slope\nprint(f'The minimum temperature for obtaining zero chirps per second is {intercept_on_y} Fahrenheit')","82fbbba6":"from statsmodels.graphics.regressionplots import abline_plot\n\n\nx_left_pred = pd.DataFrame(range(int(intercept_on_y - 1), int(lowest_temp)))\n\ny_left_pred_raw = linear_regression.predict(sm.add_constant(x_left_pred))\ny_left_pred = pd.DataFrame(y_left_pred_raw).set_index(x_left_pred[0])\n\nplot_regression_prediction(x, y, x_left_pred, y_left_pred, linear_regression, xlabel = 'Temperature (Fahrenheit)', ylabel = 'Chirps per Second', title = 'Chirps per second vs. temperature in Fahrenheit')","347faac0":"## Initial Exploration","219392ab":"## Searching for empty values","1cb1bc1f":"### Left side linear regression behavior\n\nCalculating for temperatures before the lowest, up to the minimum temperature that yields zero chirps per second","059ab8c8":"Obtaining the lowest and highest temperatures","8fa6f858":"## Linear Regression","970cc2a4":"### Right side linear regression behavior\n\nCalculating for next 20 temperatures after the highest","4bd451f0":"## File listing","121f6248":"No empty values. Starting analysis","0ab5b2c8":"# Linear Regression of temperature vs cricket Chirps\n\n\nThis notebook intends to study and predict the behavior of cricket chirp frequency according to environment temperature\n\n![](https:\/\/images.pexels.com\/photos\/237959\/pexels-photo-237959.jpeg?auto=compress&cs=tinysrgb&dpr=3&h=750&w=1260)"}}