{"cell_type":{"7623b5e6":"code","1c2a1633":"code","81e1089b":"code","51d7fc83":"code","1f2ac93a":"code","92ec4edf":"code","3c4faf99":"code","68d256c6":"code","ade45306":"code","f9ec45cc":"code","dc0902e0":"code","7350e0e4":"code","75bc66fc":"code","48c4010f":"code","d70ed225":"code","553470db":"code","a35e9521":"code","38aa653f":"code","07566926":"code","6a4439b3":"code","8df241e5":"code","9d398a18":"code","aefbe958":"code","5b75c48b":"code","20fcad84":"code","7e787382":"code","e3a301ca":"code","1e3299d4":"code","a1dd4e42":"code","82c04bbe":"code","17f44138":"code","46025987":"code","2114f529":"code","7f0b21c7":"code","cfb29b05":"markdown"},"source":{"7623b5e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1c2a1633":"df = pd.read_csv(\"..\/input\/HR-Employee-Attrition.csv\")\ndf.head()","81e1089b":"df.info()","51d7fc83":"df.shape","1f2ac93a":"df.duplicated().sum()","92ec4edf":"df.isna().sum()","3c4faf99":"import pandas_profiling\npandas_profiling.ProfileReport(df)","68d256c6":"\ndf.drop(columns=[\"StandardHours\",\"MonthlyIncome\",\"EmployeeCount\",\"EmployeeNumber\",\"DailyRate\"],inplace=True)\ndf.head()","ade45306":"df.info()","f9ec45cc":"df.Gender.unique()","dc0902e0":"df.Attrition.replace({\"Yes\":1,\"No\":0}, inplace=True)\ndf.OverTime.replace({\"Yes\":1,\"No\":0}, inplace=True)\ndf.Over18.replace({\"Y\":1,\"N\":0}, inplace=True)","7350e0e4":"df_column_numeric = df.select_dtypes(include=np.number).columns\ndf_column_category = df.select_dtypes(exclude=np.number).columns","75bc66fc":"print(\"df_column_numeric\",df_column_numeric)\nprint(\"df_column_category\",df_column_category)","48c4010f":"df_category_onehot = pd.get_dummies(df[df_column_category])","d70ed225":"df_final = pd.concat([df_category_onehot,df[df_column_numeric]], axis = 1)","553470db":"df_final.corr()","a35e9521":"df_final['Attrition'].value_counts()","38aa653f":"%matplotlib inline\npd.crosstab(df.Department,df.Attrition).plot(kind='bar')\nplt.title('Attrition rate based on Department')\nplt.xlabel('Department')\nplt.ylabel('Attrition')","07566926":"%matplotlib inline\npd.crosstab(df.Gender,df.Attrition).plot(kind='bar')\nplt.title('Attrition rate based on Gender')\nplt.xlabel('Gender')\nplt.ylabel('Attrition')","6a4439b3":"%matplotlib inline\npd.crosstab(df.YearsWithCurrManager,df.Attrition).plot(kind='bar')\nplt.title('Attrition rate based on YearsWithCurrManager')\nplt.xlabel('YearsWithCurrManager')\nplt.ylabel('Attrition')","8df241e5":"%matplotlib inline\npd.crosstab(df.JobLevel,df.Attrition).plot(kind='bar')\nplt.title('Attrition rate based on YearsWithCurrManager')\nplt.xlabel('YearsWithCurrManager')\nplt.ylabel('Attrition')","9d398a18":"x= df_final.drop([\"Attrition\"],axis=1)\nx.head()","aefbe958":"y=df[\"Attrition\"]\ny.head()","5b75c48b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","20fcad84":"train_Pred = logreg.predict(X_train)","7e787382":"metrics.confusion_matrix(y_train,train_Pred)","e3a301ca":"metrics.accuracy_score(y_train,train_Pred)","1e3299d4":"test_Pred = logreg.predict(X_test)","a1dd4e42":"metrics.confusion_matrix(y_test,test_Pred)","82c04bbe":"\nmetrics.accuracy_score(y_test,test_Pred)","17f44138":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, test_Pred))","46025987":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","2114f529":"mythreshold=0.7\ntest_Prob = logreg.predict_proba(X_test)\ntest_New_Pred = np.where(test_Prob[:,1] > mythreshold, 1, 0)\nmetrics.confusion_matrix(y_test,test_New_Pred)","7f0b21c7":"metrics.accuracy_score(y_test,test_New_Pred)","cfb29b05":"I have excluded below columns and got 87% for train and 88 % for test,\n\"StandardHours\",\"Over18\",\"MonthlyIncome\",\"EmployeeCount\",\"EducationField\",\"JobRole\",\"Education\",\"EmployeeNumber\"\n\nNow, i am going to exclude \"StandardHours\",\"MonthlyIncome\",\"EmployeeCount\",\"EmployeeNumber\" and got 89% for train and 88 % for test"}}