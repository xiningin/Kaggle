{"cell_type":{"de5d9982":"code","8ee779df":"code","6509de13":"code","906d515e":"code","e714c78f":"code","631e2a0c":"code","2b473883":"code","f466fed8":"code","1db0ebd7":"code","6b06a04d":"code","cbb5c59c":"code","2af643be":"code","58db8257":"code","145fda57":"code","8bc00702":"code","84460735":"code","72df7b71":"code","d046ecb2":"code","2a05173b":"code","91d7736b":"code","38b7a291":"code","f36ec716":"code","714fa42f":"code","f4d4937e":"code","8a679f2b":"code","e4c6f29c":"code","bcc91ed7":"code","c089f92a":"code","f65f8424":"code","74f77cfe":"code","d00f9781":"code","69f15285":"code","9f5d090d":"code","8e4b2780":"code","44e467ed":"code","2fcfe050":"code","db77f2a4":"code","2629dddb":"code","2400ed3c":"code","ccf9cf37":"code","9c03e4df":"code","3edd8a4b":"code","c522d606":"code","fa2a1bc3":"code","7c1dfbdd":"code","1b7a4fc9":"code","cecacd12":"code","f6743ba7":"code","c5d94cae":"code","a310ec29":"code","616b7b1f":"code","ff689b2f":"code","d86df66f":"code","063b3aab":"code","c0a3e95d":"code","3d18a8d7":"code","a1908ea8":"code","a94eeff4":"code","dcae1445":"code","180e57e0":"code","da7c20ca":"code","99d2eb7f":"code","c63c27f5":"code","08ff6e65":"code","d6688fbd":"code","ef06a466":"code","2e5bd8b5":"code","00ead4b0":"code","4d5e27e5":"code","62889424":"code","06b8b566":"code","6c9895e1":"code","c9d142cd":"code","5d782806":"code","8a834ef9":"code","108d03b0":"code","f07ea15e":"code","d38c1b85":"code","58e841ef":"code","a2ba60b3":"code","e2a9eb00":"code","85987038":"code","8e628414":"code","14ceb171":"code","721c7bcb":"code","6e527f6c":"code","27a2ba04":"code","9923a8ff":"code","756d62be":"code","f7b92f81":"code","56d2deba":"code","461fc5a6":"code","8f60a7bd":"code","5c57128d":"code","084b18c0":"code","90ddf16e":"code","398a9359":"code","911b8977":"code","e4dc4662":"code","fe4ae6af":"code","ff11dc0c":"code","1dc3e31a":"code","8cdc42f8":"code","964aa758":"code","61f6cc75":"code","88178ed3":"code","41b32da0":"code","4b0ed0db":"code","85ddfe42":"code","115eb8de":"code","a09b11e8":"code","4558925e":"code","d603b633":"code","50e7d21f":"code","f9f5bdb4":"code","0a35ad2f":"code","a5e6afe8":"code","08a3e3bb":"code","12f94d58":"code","80f6708d":"code","5dc559da":"code","9dc11ea7":"code","e5b9f6cf":"code","3faab836":"code","036529e2":"code","c522c2c2":"code","3eb62904":"code","6525a985":"code","a9261b36":"code","b1f152c9":"code","f22380e8":"code","18e6e843":"code","044b6a58":"code","b0155ce2":"code","562e1d53":"code","f9480020":"code","c08a6a9f":"code","3c0b2141":"code","904c9c6e":"code","3d9b779f":"code","71ceae84":"code","50dda959":"code","494f56ee":"code","a36773ef":"code","a17a7121":"code","fbb899fb":"code","396da3fe":"code","42b38ec6":"code","9f9045af":"code","b52cea9b":"code","0d6627fb":"code","2dbde7ea":"code","68529a73":"code","a7a46b38":"code","789f009f":"code","247be426":"code","4ae67ab3":"code","b311f9ab":"code","5fc2ab22":"code","1d859414":"code","2d89090d":"code","692227f9":"code","8311e1d7":"code","39d57ce4":"code","24c6eb2a":"code","c90bfabf":"markdown","2ec9e866":"markdown","df4a25fb":"markdown","fe2d1abd":"markdown","e0f02f35":"markdown","b97217a9":"markdown","96e5ecf4":"markdown","bb66f6d8":"markdown","66794784":"markdown","b5fb0d6a":"markdown","1cfaf5e2":"markdown","e621c6e7":"markdown","0a3dea8e":"markdown","ba9e2f98":"markdown","0835b67d":"markdown","00d7543b":"markdown","d2f93d91":"markdown","dbee803e":"markdown","3745a30e":"markdown","e4347a57":"markdown","a677a140":"markdown","383bb448":"markdown","8923e69e":"markdown","4545d317":"markdown","676a41cd":"markdown","c136bcef":"markdown","1b86e233":"markdown","fe21c086":"markdown","43d3a2b9":"markdown","f692177e":"markdown","8ada9d74":"markdown","8c11b28a":"markdown","538fe63a":"markdown","0c4ae70d":"markdown","f94e37b3":"markdown","30cbd759":"markdown","1b08e062":"markdown","7d2b9fe3":"markdown","300a729f":"markdown","de9c734f":"markdown","1831face":"markdown","93d697d3":"markdown","a90d9b8a":"markdown","9d08a361":"markdown","dc590d32":"markdown","6aa7b16b":"markdown","744e7fc7":"markdown","60673fb8":"markdown","f11e2697":"markdown","30f2059c":"markdown","cc649d35":"markdown","d63c009c":"markdown","a36c2c34":"markdown","30c8de50":"markdown","5285dfd0":"markdown","c1ab5222":"markdown","56dc242b":"markdown","a408a8d7":"markdown","7611d0c2":"markdown","273c84bb":"markdown","046d05f9":"markdown","4f39c6d8":"markdown","3377daba":"markdown","cbd031cd":"markdown","76dfe91a":"markdown","1d3fd9ba":"markdown","a95269e3":"markdown","b19866ff":"markdown","13a6e436":"markdown","b36318ec":"markdown","b8879059":"markdown","d5b66713":"markdown","37588d9f":"markdown","1c1ac802":"markdown","e7fb3fb2":"markdown","aaa40ff7":"markdown","0f4c2665":"markdown","447cf83e":"markdown","fe71ad8a":"markdown","51209d59":"markdown","100fc6b3":"markdown","5e5f9b70":"markdown","ea0f0de3":"markdown","c5b9c8b3":"markdown","0337eafe":"markdown","cb6fecfe":"markdown","4c37c156":"markdown","ab745d12":"markdown","a452e42c":"markdown","c76c4550":"markdown","4439fb2f":"markdown","e06155e1":"markdown","4929a112":"markdown","1fbf9d96":"markdown","8d451296":"markdown","e5993ddc":"markdown","e80d0998":"markdown","c2f3eadc":"markdown","b3f0226c":"markdown","53cc24be":"markdown","4a5dec18":"markdown","ce149a72":"markdown","3346efef":"markdown","57589104":"markdown","345f1d1b":"markdown","ae921141":"markdown","519f12ba":"markdown","5c43f889":"markdown","838c7b46":"markdown","de7f8b3d":"markdown","e2d100b3":"markdown","b0600c25":"markdown","d882aef3":"markdown","2fb4a18e":"markdown","d1d08d6b":"markdown","bb2159ca":"markdown","50091fcc":"markdown","3084dff4":"markdown","4503827d":"markdown","bf14c67a":"markdown","2d96e2ed":"markdown","b88775df":"markdown","7befc82e":"markdown","c60d3267":"markdown","19f7cefa":"markdown","6c2ae816":"markdown","fef4d576":"markdown","a0d1ea4e":"markdown","9f6f218e":"markdown","0219cc8e":"markdown","012512b7":"markdown","17e6f597":"markdown","37095b7a":"markdown","85914a8f":"markdown","2a82f0af":"markdown"},"source":{"de5d9982":"import math, time, random, datetime","8ee779df":"# \uae30\ubcf8 \ub370\uc774\ud130 \uc815\ub9ac \ubc0f \ucc98\ub9ac\nimport pandas as pd\nimport numpy as np\n\n# \uc2dc\uac01\ud654\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nimport missingno\n\n# \uc804\ucc98\ub9ac \ubc0f \uba38\uc2e0 \ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n# \ubaa8\ub378 \ud29c\ub2dd \ubc0f \ud3c9\uac00\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn import model_selection\n\n# \uacbd\uace0 \uc81c\uac70\nimport sys\nimport warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","6509de13":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","906d515e":"train.head()","e714c78f":"# \ubcd1\ud569 \uc900\ube44\nntrain = train.shape[0]\nntest = test.shape[0]\n\n# \uc544\ub798\ub294 \ub530\ub85c \uc798 \ubaa8\uc154 \ub461\ub2c8\ub2e4.\ny_train = train['Survived'].values\npassId = test['PassengerId']\n\n# \ubcd1\ud568 \ud30c\uc77c \ub9cc\ub4e4\uae30\ndata = pd.concat((train, test))\n\n# \ub370\uc774\ud130 \ud589\uacfc \uc5f4\uc758 \ud06c\uae30\ub294\nprint(\"data size is: {}\".format(data.shape))","631e2a0c":"data.head()","2b473883":"train.head()","f466fed8":"data.describe()","1db0ebd7":"data.columns","6b06a04d":"data.columns[3]","cbb5c59c":"missingno.matrix(data, figsize = (15,8))","2af643be":"data.isnull().sum() #\ube44\uc5b4 \uc788\ub294 \uac12\ub4e4\uc744 \uccb4\ud06c\ud574 \ubcf8\ub2e4.","58db8257":"data.Age.isnull().any()","145fda57":"data.dtypes","8bc00702":"train.head()","84460735":"# Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ncorr = data.corr()\n# \ub9c8\uc2a4\ud06c \uc14b\uc5c5\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n# \uadf8\ub798\ud504 \uc14b\uc5c5\nplt.figure(figsize=(14, 8))\n# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\nplt.title('Overall Correlation of Titanic Features', fontsize=18)\n#  Co-relation \ub9e4\ud2b8\ub9ad\uc2a4 \ub7f0\uce6d\nsns.heatmap(corr, mask=mask, annot=False,cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","72df7b71":"fig = plt.figure(figsize=(10,2))\nsns.countplot(y='Survived', data=train)\nprint(train.Survived.value_counts())","d046ecb2":"f,ax=plt.subplots(1,2,figsize=(15,6))\ntrain['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived',data=train,ax=ax[1])\nax[1].set_title('Survived')\nplt.show()","2a05173b":"def piecount(a):\n    f,ax=plt.subplots(1,2,figsize=(15,6))\n    train[a].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\n    ax[0].set_title(a)\n    ax[0].set_ylabel('')\n    sns.countplot(a,data=train,ax=ax[1])\n    ax[1].set_title(a)\n    plt.show()\n\npiecount('Survived')","91d7736b":"def piecount3(a):\n      f,ax=plt.subplots(1,2,figsize=(15,6))\n      train[a].value_counts().plot.pie(explode=[0,0.0,0],autopct='%0.4f%%',ax=ax[1],shadow=True)\n      ax[1].set_title(a)\n      ax[1].set_ylabel('')\n      sns.countplot(a,data=train,ax=ax[0])\n      ax[0].set_title(a)\n      plt.show()\n\npiecount3(\"Pclass\")","38b7a291":"train.groupby(['Pclass','Survived'])['Survived'].count()","f36ec716":"pd.crosstab(train.Pclass,train.Survived,margins=True).style.background_gradient(cmap='summer_r')","714fa42f":"f,ax=plt.subplots(1,2,figsize=(12,6))\ntrain[['Pclass','Survived']].groupby(['Pclass']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived per Pcalss')\nsns.countplot('Pclass',hue='Survived',data=train,ax=ax[1])\nax[1].set_title('Pcalss Survived vs Not Survived')\nplt.show()","f4d4937e":"piecount3(\"Pclass\")","8a679f2b":"train.groupby('Pclass').Survived.mean()","e4c6f29c":"data.Name.value_counts()","bcc91ed7":"temp = data.copy()\ntemp['Initial']=0\nfor i in train:\n    temp['Initial']=data.Name.str.extract('([A-Za-z]+)\\.')","c089f92a":"pd.crosstab(temp.Initial,temp.Sex).T.style.background_gradient(cmap='summer_r')","f65f8424":"def survpct(a):\n  return temp.groupby(a).Survived.mean()\n\nsurvpct('Initial')","74f77cfe":"pd.crosstab(temp.Initial,temp.Survived).T.style.background_gradient(cmap='summer_r')","d00f9781":"def bag(a,b,c,d):\n  f,ax=plt.subplots(1,2,figsize=(20,8))\n  train[[a,b]].groupby([a]).mean().plot.bar(ax=ax[0])\n  ax[0].set_title(c)\n  sns.countplot(a,hue=b,data=train,ax=ax[1])\n  ax[1].set_title(d)\n  plt.show()\n\nbag('Sex','Survived','Survived per Sex','Sex Survived vs Not Survived')  ","69f15285":"pd.crosstab([train.Sex,train.Survived],train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","9f5d090d":"print('Oldest Passenger was ',data['Age'].max(),'Years')\nprint('Youngest Passenger was ',data['Age'].min(),'Years')\nprint('Average Age on the ship was ',int(data['Age'].mean()),'Years')","8e4b2780":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=train,split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","44e467ed":"data.head()","2fcfe050":"temp.groupby('Initial')['Age'].mean() #\uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839 \uccb4\ud06c","db77f2a4":"temp['Newage']=temp['Age']\n\ndef newage(k,n):\n  temp.loc[(temp.Age.isnull())&(temp.Initial==k),'Newage']= n\n      \nnewage('Capt',int(70.000000))\nnewage('Col',int(54.000000))\nnewage('Countess',int(33.000000))\nnewage('Don',int(40.000000))\nnewage('Dona',int(39.000000))\nnewage('Dr',int(43.571429))\nnewage('Jonkheer',int(38.000000))\nnewage('Lady',int(48.000000))\nnewage('Major',int(48.500000))\nnewage('Master',int(5.482642))\nnewage('Miss',int(21.774238))\nnewage('Mlle',int(24.000000))\nnewage('Mme',int(24.000000))\nnewage('Mr',int(32.252151))\nnewage('Mrs',int(36.994118))\nnewage('Ms',int(28.000000))\nnewage('Rev',int(41.250000))\nnewage('Sir',int(49.000000))\n\n","2629dddb":"temp['Age'][70:80]","2400ed3c":"temp['Newage'][70:80]","ccf9cf37":"survpct('Newage')\n","9c03e4df":"pd.crosstab(temp.Newage,temp.Survived,margins=True).style.background_gradient(cmap='summer_r')","3edd8a4b":"temp['Age_Range']=pd.qcut(temp['Newage'],10)\ndef groupmean(a,b):\n  return temp.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ngroupmean('Age_Range', 'Newage')","c522d606":"groupmean('Age_Range', 'Survived')","fa2a1bc3":"temp.head(10)","7c1dfbdd":"temp['Gender']= temp['Sex']\n\nfor n in range(1,4):\n  temp.loc[(temp['Sex'] == 'male') & (temp['Pclass'] == n),'Gender']= 'm'+str(n)\n  temp.loc[(temp['Sex'] == 'female') & (temp['Pclass'] == n),'Gender']= 'w'+str(n)\n\ntemp.loc[(temp['Gender'] == 'm3'),'Gender']= 'm2'\ntemp.loc[(temp['Gender'] == 'w3'),'Gender']= 'w2'\ntemp.loc[(temp['Age'] <= 1.0),'Gender']= 'baby'\ntemp.loc[(temp['Age'] > 75.0),'Gender']= 'old'\n\n","1b7a4fc9":"groupmean('Gender', 'Survived')","cecacd12":"temp['Agroup']=0\n\ntemp.loc[temp['Newage']<1.0,'Agroup']= 1\ntemp.loc[(temp['Newage']>=1.0)&(temp['Newage']<=3.0),'Agroup']= 2\ntemp.loc[(temp['Newage']>3.0)&(temp['Newage']<11.0),'Agroup']= 7\ntemp.loc[(temp['Newage']>=11.0)&(temp['Newage']<15.0),'Agroup']= 13\ntemp.loc[(temp['Newage']>=15.0)&(temp['Newage']<18.0),'Agroup']= 16\ntemp.loc[(temp['Newage']>=18.0)&(temp['Newage']<= 20.0),'Agroup']= 18\ntemp.loc[(temp['Newage']> 20.0)&(temp['Newage']<=22.0),'Agroup']= 21\ntemp.loc[(temp['Newage']>22.0)&(temp['Newage']<=26.0),'Agroup']= 24\ntemp.loc[(temp['Newage']>26.0)&(temp['Newage']<=30.0),'Agroup']= 28\ntemp.loc[(temp['Newage']>30.0)&(temp['Newage']<=32.0),'Agroup']= 31\ntemp.loc[(temp['Newage']>32.0)&(temp['Newage']<=34.0),'Agroup']= 33\ntemp.loc[(temp['Newage']>34.0)&(temp['Newage']<=38.0),'Agroup']= 36\ntemp.loc[(temp['Newage']>38.0)&(temp['Newage']<=52.0),'Agroup']= 45\ntemp.loc[(temp['Newage']>52.0)&(temp['Newage']<=75.0),'Agroup']= 60\ntemp.loc[temp['Newage']>75.0,'Agroup']= 78","f6743ba7":"groupmean('Agroup', 'Survived')","c5d94cae":"groupmean('Agroup', 'Age')","a310ec29":"temp.head()","616b7b1f":"temp['Alone']=0\n\ntemp.loc[(temp['SibSp']==0)& (temp['Parch']==0),'Alone']= 1","ff689b2f":"temp.head(n=10)","d86df66f":"temp['Family']=0\n\nfor i in temp:\n  temp['Family'] = temp['Parch'] + temp['SibSp'] +1","063b3aab":"temp.head(20)","c0a3e95d":"survpct('Family')","3d18a8d7":"bag('Parch','Survived','Survived per Parch','Parch Survived vs Not Survived') ","a1908ea8":"pd.crosstab([temp.Family,temp.Survived],temp.Pclass,margins=True).style.background_gradient(cmap='summer_r')","a94eeff4":"temp.Ticket.head(n=20)","dcae1445":"temp.Ticket.isnull().any()","180e57e0":"temp['Initick'] = 0\nfor s in temp:\n    temp['Initick']=temp.Ticket.str.extract('^([A-Za-z]+)')\nfor s in temp:\n    temp.loc[(temp.Initick.isnull()),'Initick']='X'\ntemp.head()","da7c20ca":"temp.groupby(['Initick'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')","99d2eb7f":"def groupmean(a,b):\n  return temp.groupby([a])[b].mean().to_frame().style.background_gradient(cmap='summer_r')\n\ngroupmean('Initick', 'Survived')","c63c27f5":"pd.crosstab([temp.Pclass,temp.Survived],temp.Initick == 'X',margins=True).style.background_gradient(cmap='summer_r')","08ff6e65":"train['Tgroup'] = 0\n\ntemp['Tgroup'] = 0\n\ntemp.loc[(temp['Initick']=='X')& (temp['Pclass']==1),'Tgroup']= 1\ntemp.loc[(temp['Initick']=='X')& (temp['Pclass']==2),'Tgroup']= 2\ntemp.loc[(temp['Initick']=='X')& (temp['Pclass']==3),'Tgroup']= 3\ntemp.loc[(temp['Initick']=='Fa'),'Tgroup']= 3\ntemp.loc[(temp['Initick']=='SCO'),'Tgroup']= 4\ntemp.loc[(temp['Initick']=='A'),'Tgroup']= 5\ntemp.loc[(temp['Initick']=='CA'),'Tgroup']= 6\ntemp.loc[(temp['Initick']=='W'),'Tgroup']= 7\ntemp.loc[(temp['Initick']=='S'),'Tgroup']= 8\ntemp.loc[(temp['Initick']=='SOTON'),'Tgroup']= 9\ntemp.loc[(temp['Initick']=='LINE'),'Tgroup']= 10\ntemp.loc[(temp['Initick']=='STON'),'Tgroup']= 11\ntemp.loc[(temp['Initick']=='C'),'Tgroup']= 12\ntemp.loc[(temp['Initick']=='P'),'Tgroup']= 13\ntemp.loc[(temp['Initick']=='WE'),'Tgroup']= 14\ntemp.loc[(temp['Initick']=='SC'),'Tgroup']= 15\ntemp.loc[(temp['Initick']=='F'),'Tgroup']= 16\ntemp.loc[(temp['Initick']=='PP'),'Tgroup']= 17\ntemp.loc[(temp['Initick']=='PC'),'Tgroup']= 17\ntemp.loc[(temp['Initick']=='SO'),'Tgroup']= 18\ntemp.loc[(temp['Initick']=='SW'),'Tgroup']= 19\n","d6688fbd":"groupmean('Tgroup', 'Survived')","ef06a466":"print('Highest Fare was:',temp['Fare'].max())\nprint('Lowest Fare was:',temp['Fare'].min())\nprint('Average Fare was:',temp['Fare'].mean())","2e5bd8b5":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(train[train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fares in Pclass 1')\nsns.distplot(train[train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fares in Pclass 2')\nsns.distplot(train[train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fares in Pclass 3')\nplt.show()","00ead4b0":"temp['Fare_Range']=pd.qcut(train['Fare'],10)\ngroupmean('Fare_Range', 'Fare')","4d5e27e5":"temp['Fgroup']=0\n\ntemp.loc[temp['Fare']<= 7.125,'Fgroup']=5.0\ntemp.loc[(temp['Fare']>7.125)&(temp['Fare']<=7.9),'Fgroup']= 7.5\ntemp.loc[(temp['Fare']>7.9)&(temp['Fare']<=8.03),'Fgroup']= 8.0\ntemp.loc[(temp['Fare']>8.03)&(temp['Fare']<10.5),'Fgroup']= 9.5\ntemp.loc[(temp['Fare']>=10.5)&(temp['Fare']<23.0),'Fgroup']= 16.0\ntemp.loc[(temp['Fare']>=23.0)&(temp['Fare']<=27.8),'Fgroup']= 25.5\ntemp.loc[(temp['Fare']>27.8)&(temp['Fare']<=51.0),'Fgroup']= 38.0\ntemp.loc[(temp['Fare']>51.0)&(temp['Fare']<=73.5),'Fgroup']= 62.0\ntemp.loc[temp['Fare']>73.5,'Fgroup']= 100.0","62889424":"temp.head()","06b8b566":"temp.Cabin.value_counts()","6c9895e1":"temp.Cabin.isnull().sum()","c9d142cd":"temp['Inicab'] = 0\nfor i in temp:\n    temp['Inicab']=temp.Cabin.str.extract('^([A-Za-z]+)')\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 1 )),'Inicab']='X'\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 2 )),'Inicab']='Y'\n    temp.loc[((temp.Cabin.isnull()) & (temp.Pclass.values == 3 )),'Inicab']='Z'\n","5d782806":"temp.head(n=20)","8a834ef9":"temp.Inicab.value_counts()","108d03b0":"temp['Inicab'].replace(['A','B', 'C', 'D', 'E', 'F', 'G','T', 'X', 'Y', 'Z'],[1,2,3,4,5,6,7,8,9,10,11],inplace=True)","f07ea15e":"temp.head()","d38c1b85":"pd.crosstab([temp.Embarked,temp.Pclass],[temp.Sex,temp.Survived],margins=True).style.background_gradient(cmap='summer_r')\n","58e841ef":"sns.factorplot('Embarked','Survived',data=temp)\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","a2ba60b3":"f,ax=plt.subplots(2,2,figsize=(20,15))\nsns.countplot('Embarked',data=temp,ax=ax[0,0])\nax[0,0].set_title('No. Of Passengers Boarded')\nsns.countplot('Embarked',hue='Sex',data=temp,ax=ax[0,1])\nax[0,1].set_title('Male-Female Split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=temp,ax=ax[1,0])\nax[1,0].set_title('Embarked vs Survived')\nsns.countplot('Embarked',hue='Pclass',data=temp,ax=ax[1,1])\nax[1,1].set_title('Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","e2a9eb00":"temp.loc[(temp.Embarked.isnull())]","85987038":"temp.loc[(temp.Ticket == '113572')]","8e628414":"temp.sort_values(['Ticket'], ascending = True)[35:45]","14ceb171":"temp.loc[(train.Embarked.isnull()),'Embarked']='S'","721c7bcb":"temp.sort_values(['Ticket'], ascending = True)[35:45]","6e527f6c":"temp.head()","27a2ba04":"temp.groupby('Initial').Survived.mean()","9923a8ff":"temp['Initial'].replace(['Capt', 'Col', 'Countess', 'Don', 'Dona' , 'Dr', 'Jonkheer', 'Lady', 'Major', 'Master',  'Miss'  ,'Mlle', 'Mme', 'Mr', 'Mrs', 'Ms', 'Rev', 'Sir'],[1, 2, 3, 4, 5, 6, 4, 3, 2, 8, 9, 3, 3, 4, 5, 3, 1, 3 ],inplace=True)","756d62be":"temp.groupby('Initial').Survived.mean()","f7b92f81":"temp.groupby('Embarked').Survived.mean()","56d2deba":"temp[\"Embarked\"].replace(['C','Q', 'S'], [1,2,3], inplace =True )","461fc5a6":"temp[\"Gender\"].replace(['baby','m1', 'm2', 'old', 'w1', 'w2'], [1,2,3,4,5,6], inplace =True )","8f60a7bd":"temp.head()","5c57128d":"missingno.matrix(temp, figsize = (10,5))","084b18c0":"df = pd.DataFrame()","90ddf16e":"def sub(a,b):\n  df[a]=temp[b]\n\nsub('Pclass', 'Pclass')\nsub('Name', 'Initial')\nsub('Sex', 'Gender')\nsub('Age', 'Agroup')\nsub('Alone', 'Alone')\nsub('Family', 'Family')\nsub('Ticket', 'Tgroup')\nsub('Fare', 'Fgroup')\nsub('Cabin', 'Inicab')\nsub('Embarked', 'Embarked')\n\n\ndf.head()","398a9359":"df.isnull().sum()","911b8977":"len(df)","e4dc4662":"df.head()","fe4ae6af":"score = df.copy()","ff11dc0c":"len(score)","1dc3e31a":"score['Survived'] = temp['Survived']","8cdc42f8":"score['Score'] = 0","964aa758":"def see(a):\n  return score.groupby(a).Survived.mean()\n\nsee('Pclass')","61f6cc75":"see('Name')","88178ed3":"see('Sex')","41b32da0":"see('Age')","4b0ed0db":"see('Family')","85ddfe42":"see('Ticket')","115eb8de":"see('Fare')","a09b11e8":"see('Cabin')","4558925e":"see('Embarked')","d603b633":"score['Class'] = 0\nscore['CE'] = 0\nscore['CN'] = 0\nscore['CP'] = 0\n\nfor i in score:\n   score.loc[((score.Embarked.values == 1 )),'CE']=1\n   score.loc[((score.Name.values == 2 )),'CN']=1\n   score.loc[((score.Name.values == 3 )),'CN']=5\n   score.loc[((score.Pclass.values == 1 )),'Class']=1\n   score.loc[((score.Pclass.values == 3 )),'Class']=-1\n\n\nscore['Class'] = score['CE'] + score['CN'] + score['CP']\n\nscore.head(3)","50e7d21f":"score['Wealth'] = 0\nscore['WC'] = 0\nscore['WF'] = 0\nscore['WT'] = 0\n\nfor i in score:\n   score.loc[((score.Cabin.values == 8 )),'WC']=-5\n   score.loc[((score.Cabin.values == 11 )),'WC']=-1\n   score.loc[((score.Cabin.values == 3 )),'WC']=1\n   score.loc[((score.Cabin.values == 6 )),'WC']=1\n   score.loc[((score.Cabin.values == 7 )),'WC']=1\n   score.loc[((score.Cabin.values == 2 )),'WC']=3\n   score.loc[((score.Cabin.values == 4 )),'WC']=3\n   score.loc[((score.Cabin.values == 5 )),'WC']=3\n   score.loc[((score.Fare.values <= 5 )),'WF']=-5\n   score.loc[((score.Fare.values == 9.5 )),'WF']=-3\n   score.loc[((score.Fare.values == 7.5 )),'WF']=-1\n   score.loc[((score.Fare.values == 62 )),'WF']=1\n   score.loc[((score.Fare.values >= 100 )),'WF']=3\n   score.loc[((score.Ticket.values >= 4 ) & (score.Ticket.values <= 7 )),'WT']=-5\n   score.loc[((score.Ticket.values >= 8 ) & (score.Ticket.values <= 9 )),'WT']=-3\n   score.loc[((score.Ticket.values == 10 )),'WT']=-1\n   score.loc[((score.Ticket.values == 1 )),'WT']=1\n   score.loc[((score.Ticket.values >= 13 ) & (score.Ticket.values <= 17 )),'WT']=1\n   score.loc[((score.Ticket.values >= 18)),'WT']=5\n\n\nscore['Wealth'] = score['WC'] + score['WF'] + score['WT'] \n\nscore.head(20)","f9f5bdb4":"score['Priority'] = 0\nscore['PA'] = 0\nscore['PN'] = 0\nscore['PS'] = 0\n\nfor i in score:\n   score.loc[((score.Age.values == 1 )),'PA']=5\n   score.loc[((score.Age.values == 13 )),'PA']=1\n   score.loc[((score.Age.values == 2 )),'PA']=1\n   score.loc[((score.Age.values == 31 )),'PA']=-1\n   score.loc[((score.Age.values == 7 )),'PA']=1\n   score.loc[((score.Age.values == 78 )),'PA']=5\n   score.loc[((score.Name.values == 4 )),'PN']=-1\n   score.loc[((score.Name.values == 5 )),'PN']=3\n   score.loc[((score.Name.values == 8)),'PN']=1\n   score.loc[((score.Name.values == 9 )),'PN']=1\n   score.loc[((score.Sex.values == 1 )),'PS']=3\n   score.loc[((score.Sex.values == 3 )),'PS']=-3\n   score.loc[((score.Sex.values == 4 )),'PS']=5\n   score.loc[((score.Sex.values == 5 )),'PS']=5\n   score.loc[((score.Sex.values >= 6)),'PS']=1\n\n\nscore['Priority'] = score['PA'] + score['PN'] + score['PS'] \n\nscore.head(3)","0a35ad2f":"score['Situation'] = 0\nscore['SA'] = 0\nscore['SF'] = 0\n\n\nfor i in score:\n   score.loc[((score.Age.values == 36 )),'SA']=1\n   score.loc[((score.Family.values == 2 )),'SF']=1\n   score.loc[((score.Family.values == 3 )),'SF']=1\n   score.loc[((score.Family.values == 4)),'SF']=3\n\n\nscore['Situation'] = score['SA'] + score['SF'] \n\nscore.head(20)","a5e6afe8":"score['Sacrificed'] = 0\nscore['SN'] = 0\nscore['FS'] = 0\n\n\nfor i in score:\n   score.loc[((score.Name.values == 1 )),'SN']=-5\n   score.loc[((score.Family.values == 5 )),'FS']=-1\n   score.loc[((score.Family.values == 6 )),'FS']=-3\n   score.loc[((score.Family.values == 8)),'FS']=-5\n   score.loc[((score.Family.values >= 9)),'FS']=-5\n\nscore['Sacrificed'] = score['SN'] + score['FS'] \n\nscore.head(3)","08a3e3bb":"score['Score'] = score['Class'] + score['Wealth'] + score['Priority'] + score['Situation']  + score['Sacrificed'] ","12f94d58":"df_new = pd.DataFrame()","80f6708d":"def ch(a):\n  df_new[a] = score[a]\n\nch('Pclass')\nch('Name')\nch('Sex')\nch('Age')\nch('Embarked')\nch('Cabin')\nch('Score')\nch('Class')\nch('Wealth')\nch('Priority')\nch('Situation')\nch('Sacrificed')\n\ndf_new.head()","5dc559da":"len(df_new)","9dc11ea7":"df_enc = df_new.apply(LabelEncoder().fit_transform)\n                          \ndf_enc.head()","e5b9f6cf":"train = df_enc[:ntrain]\ntest = df_enc[ntrain:]","3faab836":"X_test = test\nX_train = train","036529e2":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","c522c2c2":"X_train","3eb62904":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()\n\n# Prepare lists\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores = []\n\n# Sequentially fit and cross validate all models\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores.append(acc.mean())","6525a985":"# \uacb0\uacfc \ud14c\uc774\ube14\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Score': scores})\n\nresult_df = results.sort_values(by='Score', ascending=False).reset_index(drop=True)\nresult_df.head(11)","a9261b36":"# Plot results\nsns.barplot(x='Score', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.80, 0.84)","b1f152c9":"# \uc911\uc694\ub3c4\ub97c \ubcf4\ub294 \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4.\ndef importance_plotting(data, x, y, palette, title):\n    sns.set(style=\"whitegrid\")\n    ft = sns.PairGrid(data, y_vars=y, x_vars=x, size=5, aspect=1.5)\n    ft.map(sns.stripplot, orient='h', palette=palette, edgecolor=\"black\", size=15)\n    \n    for ax, title in zip(ft.axes.flat, titles):\n    # \uac01 \uadf8\ub798\ud504\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 \ud0c0\uc774\ud2c0\uc744 \uc90d\ub2c8\ub2e4.\n        ax.set(title=title)\n    # \uadf8\ub798\ud504\ub97c \ubc14\ub85c \uc138\uc6cc \ubd05\ub2c8\ub2e4.\n        ax.xaxis.grid(False)\n        ax.yaxis.grid(True)\n    plt.show()","f22380e8":"# \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ud56d\ubaa9 \uc911\uc694\ub3c4\ub97c \ub123\uc2b5\ub2c8\ub2e4.\nfi = {'Features':train.columns.tolist(), 'Importance':xgb.feature_importances_}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","18e6e843":"# \uadf8\ub798\ud504 \uc81c\ubaa9\ntitles = ['The most important features in predicting survival on the Titanic: XGB']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","044b6a58":"# \uc911\uc694\ub3c4\ub97c \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. Logistic regression\uc5d0\uc11c\ub294 \uc911\uc694\ub3c4\ubcf4\ub2e4 coefficients\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \nfi = {'Features':train.columns.tolist(), 'Importance':np.transpose(log.coef_[0])}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","b0155ce2":"importance.head()","562e1d53":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: Logistic Regression']\n\n# \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","f9480020":"# 5\uac00\uc9c0 \ubaa8\ub378\uc5d0 \ub300\ud55c \ud56d\ubaa9 \uc911\uc694\ub3c4 \uc5bb\uae30\ngbc_imp = pd.DataFrame({'Feature':train.columns, 'gbc importance':gbc.feature_importances_})\nxgb_imp = pd.DataFrame({'Feature':train.columns, 'xgb importance':xgb.feature_importances_})\nran_imp = pd.DataFrame({'Feature':train.columns, 'ran importance':ran.feature_importances_})\next_imp = pd.DataFrame({'Feature':train.columns, 'ext importance':ext.feature_importances_})\nada_imp = pd.DataFrame({'Feature':train.columns, 'ada importance':ada.feature_importances_})\n\n# \uc774\ub97c \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c\nimportances = gbc_imp.merge(xgb_imp, on='Feature').merge(ran_imp, on='Feature').merge(ext_imp, on='Feature').merge(ada_imp, on='Feature')\n\n# \ud56d\ubaa9\ub2f9 \ud3c9\uade0 \uc911\uc694\ub3c4\nimportances['Average'] = importances.mean(axis=1)\n\n# \ub7ad\ud0b9 \uc815\ud558\uae30\nimportances = importances.sort_values(by='Average', ascending=False).reset_index(drop=True)\n\n# \ubcf4\uae30\nimportances","c08a6a9f":"# \uc911\uc694\ub3c4\ub97c \ub2e4\uc2dc \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub123\uae30\nfi = {'Features':importances['Feature'], 'Importance':importances['Average']}\nimportance = pd.DataFrame(fi, index=None).sort_values('Importance', ascending=False)","3c0b2141":"# \uadf8\ub798\ud504 \ud0c0\uc774\ud2c0\ntitles = ['The most important features in predicting survival on the Titanic: 5 model average']\n\n# \uadf8\ub798\ud504 \ubcf4\uae30\nimportance_plotting(importance, 'Importance', 'Features', 'Reds_r', titles)","904c9c6e":"# \uc57d\ud55c \ub290\ub08c\uc744 \uc8fc\ub294 \uac83 3\uac1c\ub97c \ube8d\ub2c8\ub2e4.\ntrain = train.drop(['Class', 'Pclass', 'Embarked'], axis=1)\ntest = test.drop(['Class', 'Pclass', 'Embarked'], axis=1)\n\n# \ubaa8\ub378\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc815\uc758\ud558\uace0\nX_train = train\nX_test = test\n\n# \ubc14\uafc9\ub2c8\ub2e4.\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","3d9b779f":"X_train","71ceae84":"X_test","50dda959":"# \ubaa8\ub378 \uc0ac\uc6a9\nran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier(random_state=1)\ngbc = GradientBoostingClassifier(random_state=1)\nsvc = SVC(probability=True)\next = ExtraTreesClassifier(random_state=1)\nada = AdaBoostClassifier(random_state=1)\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v2 = []\n\n# Fit & cross validate\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v2.append(acc.mean())","494f56ee":"# \ud14c\uc774\ube14 \ub9cc\ub4e4\uc5b4\uc11c \ubcf4\uae30\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2})\n\nresult_df = results.sort_values(by='Score with feature selection', ascending=False).reset_index(drop=True)\nresult_df.head(11)","a36773ef":"# \uacb0\uacfc\nsns.barplot(x='Score with feature selection', y = 'Model', data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.75, 0.85)","a17a7121":"# \ud30c\ub77c\ubbf8\ud130 \uc11c\uce58\nCs = [0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 50, 100]\ngammas = [0.001, 0.01, 0.1, 1]\n\n# \ud30c\ub77c\ubbf8\ud130 \uadf8\ub9ac\ub4dc \uc14b\ud305\nhyperparams = {'C': Cs, 'gamma' : gammas}\n\n# \uad50\ucc28\uac80\uc99d\ngd=GridSearchCV(estimator = SVC(probability=True), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# \ubaa8\ub378 fiting \ubc0f \uacb0\uacfc\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","fbb899fb":"learning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [100, 250, 500, 750, 1000, 1250, 1500]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = GradientBoostingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","396da3fe":"penalty = ['l1', 'l2']\nC = np.logspace(0, 4, 10)\n\nhyperparams = {'penalty': penalty, 'C': C}\n\ngd=GridSearchCV(estimator = LogisticRegression(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","42b38ec6":"learning_rate = [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.2]\nn_estimators = [10, 25, 50, 75, 100, 250, 500, 750, 1000]\n\nhyperparams = {'learning_rate': learning_rate, 'n_estimators': n_estimators}\n\ngd=GridSearchCV(estimator = XGBClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","9f9045af":"max_depth = [3, 4, 5, 6, 7, 8, 9, 10]\nmin_child_weight = [1, 2, 3, 4, 5, 6]\n\nhyperparams = {'max_depth': max_depth, 'min_child_weight': min_child_weight}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","b52cea9b":"gamma = [i*0.1 for i in range(0,5)]\n\nhyperparams = {'gamma': gamma}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","0d6627fb":"subsample = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\ncolsample_bytree = [0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]\n    \nhyperparams = {'subsample': subsample, 'colsample_bytree': colsample_bytree}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","2dbde7ea":"reg_alpha = [1e-5, 1e-2, 0.1, 1, 100]\n    \nhyperparams = {'reg_alpha': reg_alpha}\n\ngd=GridSearchCV(estimator = XGBClassifier(learning_rate=0.0001, n_estimators=10, max_depth=3, \n                                          min_child_weight=1, gamma=0, subsample=0.6, colsample_bytree=0.9),\n                                         param_grid = hyperparams, verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","68529a73":"n_restarts_optimizer = [0, 1, 2, 3]\nmax_iter_predict = [1, 2, 5, 10, 20, 35, 50, 100]\nwarm_start = [True, False]\n\nhyperparams = {'n_restarts_optimizer': n_restarts_optimizer, 'max_iter_predict': max_iter_predict, 'warm_start': warm_start}\n\ngd=GridSearchCV(estimator = GaussianProcessClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","a7a46b38":"n_estimators = [10, 25, 50, 75, 100, 125, 150, 200]\nlearning_rate = [0.001, 0.01, 0.1, 0.5, 1, 1.5, 2]\n\nhyperparams = {'n_estimators': n_estimators, 'learning_rate': learning_rate}\n\ngd=GridSearchCV(estimator = AdaBoostClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","789f009f":"n_neighbors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = [1, 2, 3, 4, 5, 10, 15, 20, 25, 30]\n\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\n\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\n# Fitting model and return results\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","247be426":"n_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = RandomForestClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","4ae67ab3":"n_estimators = [10, 25, 50, 75, 100]\nmax_depth = [3, None]\nmax_features = [1, 3, 5, 7]\nmin_samples_split = [2, 4, 6, 8, 10]\nmin_samples_leaf = [2, 4, 6, 8, 10]\n\nhyperparams = {'n_estimators': n_estimators, 'max_depth': max_depth, 'max_features': max_features,\n               'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf}\n\ngd=GridSearchCV(estimator = ExtraTreesClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","b311f9ab":"n_estimators = [10, 15, 20, 25, 50, 75, 100, 150]\nmax_samples = [1, 2, 3, 5, 7, 10, 15, 20, 25, 30, 50]\nmax_features = [1, 3, 5, 7]\n\nhyperparams = {'n_estimators': n_estimators, 'max_samples': max_samples, 'max_features': max_features}\n\ngd=GridSearchCV(estimator = BaggingClassifier(), param_grid = hyperparams, \n                verbose=True, cv=5, scoring = \"accuracy\")\n\ngd.fit(X_train, y_train)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","5fc2ab22":"# \ud29c\ub2dd \ubaa8\ub378 \uc2dc\uc791\nran = RandomForestClassifier(n_estimators=25,\n                             max_depth=3, \n                             max_features=3,\n                             min_samples_leaf=2, \n                             min_samples_split=8,  \n                             random_state=1)\n\nknn = KNeighborsClassifier(algorithm='auto', \n                           leaf_size=1, \n                           n_neighbors=5, \n                           weights='uniform')\n\nlog = LogisticRegression(C=2.7825594022071245,\n                         penalty='l2')\n\nxgb = XGBClassifier(learning_rate=0.0001, \n                    n_estimators=10,\n                    random_state=1)\n\ngbc = GradientBoostingClassifier(learning_rate=0.0005,\n                                 n_estimators=1250,\n                                 random_state=1)\n\nsvc = SVC(probability=True)\n\next = ExtraTreesClassifier(max_depth=None, \n                           max_features=3,\n                           min_samples_leaf=2, \n                           min_samples_split=8,\n                           n_estimators=10,\n                           random_state=1)\n\nada = AdaBoostClassifier(learning_rate=0.1, \n                         n_estimators=50,\n                         random_state=1)\n\ngpc = GaussianProcessClassifier()\n\nbag = BaggingClassifier(random_state=1)\n\n# \ub9ac\uc2a4\ud2b8\nmodels = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores_v3 = []\n\n# Fit & \uad50\ucc28 \uac80\uc99d\nfor mod in models:\n    mod.fit(X_train, y_train)\n    acc = cross_val_score(mod, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores_v3.append(acc.mean())","1d859414":"# \ub7ad\ud0b9 \ud14c\uc774\ube14 \uc0dd\uc131\nresults = pd.DataFrame({\n    'Model': ['Random Forest', 'K Nearest Neighbour', 'Logistic Regression', 'XGBoost', 'Gradient Boosting', 'SVC', 'Extra Trees', 'AdaBoost', 'Gaussian Naive Bayes', 'Gaussian Process', 'Bagging Classifier'],\n    'Original Score': scores,\n    'Score with feature selection': scores_v2,\n    'Score with tuned parameters': scores_v3})\n\nresult_df = results.sort_values(by='Score with tuned parameters', ascending=False).reset_index(drop=True)\nresult_df.head(11)","2d89090d":"# \uacb0\uacfc\nsns.barplot(x=None, y = None, data = result_df, color = 'c')\nplt.title('Machine Learning Algorithm Accuracy Score \\n')\nplt.xlabel('Accuracy Score (%)')\nplt.ylabel('Algorithm')\nplt.xlim(0.75, 0.86)","692227f9":"#\ud29c\ub2dd\ud55c \ud30c\ub77c\ubbf8\ud130\ub85c \ud558\ub4dc\ubcf4\ud305\ngrid_hard = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'hard')\n\ngrid_hard_cv = model_selection.cross_validate(grid_hard, X_train, y_train, cv = 10)\ngrid_hard.fit(X_train, y_train)\n\nprint(\"Hard voting on test set score mean: {:.2f}\". format(grid_hard_cv['test_score'].mean()*100))","8311e1d7":"grid_soft = VotingClassifier(estimators = [('Random Forest', ran), \n                                           ('Logistic Regression', log),\n                                           ('XGBoost', xgb),\n                                           ('Gradient Boosting', gbc),\n                                           ('Extra Trees', ext),\n                                           ('AdaBoost', ada),\n                                           ('Gaussian Process', gpc),\n                                           ('SVC', svc),\n                                           ('K Nearest Neighbour', knn),\n                                           ('Bagging Classifier', bag)], voting = 'soft')\n\ngrid_soft_cv = model_selection.cross_validate(grid_soft, X_train, y_train, cv = 10)\ngrid_soft.fit(X_train, y_train)\n\nprint(\"Soft voting on test set score mean: {:.2f}\". format(grid_soft_cv['test_score'].mean()*100))","39d57ce4":"# Final predictions\npredictions = grid_soft.predict(X_test)\n\nsubmission = pd.concat([pd.DataFrame(passId), pd.DataFrame(predictions)], axis = 'columns')\n\nsubmission.columns = [\"PassengerId\", \"Survived\"]\nsubmission.to_csv('titanic_submission.csv', header = True, index = False)","24c6eb2a":"submission.head()","c90bfabf":"* \uc704\uc758 for \ub8e8\ud504\ub294 11 \uac00\uc9c0 \ubaa8\ub378\uc758 \uad50\ucc28 \uac80\uc99d \ub41c \uc810\uc218\ub97c list 'score'\ub85c \ub123\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc774 \ub370\uc774\ud130\ub97c \uba3c\uc800 \ud14c\uc774\ube14\ub85c \ub9cc\ub4e4\uace0 \uc774 \uadf8\ub798\ud504\ub97c \ud1b5\ud574 \uacb0\uacfc\ub97c \uc54c\uc544 \ubd05\ub2c8\ub2e4.","2ec9e866":"* \uba38\uc2e0\ub7ec\ub2dd \ud234\uc740 \ube48\uce78\uc744 \uc544\uc8fc \uc2eb\uc5b4 \ud569\ub2c8\ub2e4.\n* \ub098\uc911\uc5d0 \uc774\ub97c \uc5b4\ub5bb\uac8c \ud560 \uac83\uc778\uc9c0 \uc880 \uc0dd\uac01\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","df4a25fb":"* Adaboost","fe2d1abd":"* ntrain\uacfc ntest\uc758 shape\uc744 \ud655\ubcf4\ud574\ub193\uc2b5\ub2c8\ub2e4. (\ubcd1\ud569 \ud55c \uac83\uc744 \ub098\uc911\uc5d0 \ub2e4\uc2dc \uac08\ub77c \ub193\uae30 \uc704\ud55c \uc900\ube44)\n* y_train\uc740 \uc54c\ub824\uc9c4 \uacb0\uacfc \uac12\uc774\ub2c8 \ub530\ub85c \ubaa8\uc154 \ub193\uace0\n* \ud14c\uc2a4\ud2b8\uc758 \uc2b9\uac1d \uc544\uc774\ub514\ub294 \ub098\uc911\uc5d0 \ucd5c\uc885 \uacb0\uacfc\uc5d0 \ub123\uc744 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \ub5bc\uc5b4 \ub193\uc2b5\ub2c8\ub2e4.\n* train\uacfc test\ub97c \ubcd1\ud569\ud558\uc5ec data \ub780 \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ubb38\uc790\ub85c \ub41c \uac83\uc744 \uc22b\uc790\ub85c \ubc14\uafbc\ub2e4\ub4e0\uac00.\uc22b\uc790\ub97c \uc778\ud130\ubc1c \ubcc4\ub85c \uadf8\ub8f9\ud654 \ud55c\ub2e4\ub4e0\uac00 \ud560 \ub54c \ud55c\uaebc\ubc88\uc5d0 \ud558\uae30 \uc704\ud574 \ud569\ud574 \ub193\uc2b5\ub2c8\ub2e4. ","e0f02f35":"* \ud30c\uc77c\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","b97217a9":"* \uc774 \uac83\uc740 \ub0a8\uc131\/\uc5ec\uc131\uc744 1,2\ub85c \ub098\ub204\uba74 \ub420 \uac83 \uac19\uc740 \ubed4\ud574 \ubcf4\uc774\ub294 \uac83\uc774\uc9c0\ub9cc \uc880 \ub354 \uc0c8\ubd84\ud654\ud558\uba74 \uc88b\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \uc544\uae30\ub4e4\uc740 \uc544\uae30\uc774\uc9c0, \ub0a8\uc790\uc778\uc9c0 \uc5ec\uc790\uc778\uc9c0 \uad6c\uba85\ubcf4\ud2b8 \ud0dc\uc6b8 \ub54c \uc548 \ubb3c\uc5b4 \ubcfc \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n* \uc624\ud788\ub824 (\ubd88\ud589\ud558\uac8c\ub3c4) \uadc0\uc871 \uc544\uae30\uc778\uc9c0 \uc11c\ubbfc\uc758 \uc544\uae30\uc778\uc9c0\ub294 \ud589\uacfc\ubd88\ud589\uc744 \uac00\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4 \u3160\u3160\n* \uc0dd\uc874 Pclass\ubcc4\ub85c \uc131\ubcc4\uc744 \ubd05\ub2c8\ub2e4.","96e5ecf4":"* \uc790 \uc774\uc81c\ub294 \uc218\uce58\ud654 \ud588\uc73c\ub2c8 \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uc73c\ub85c \uc815\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n* \ud0c0\uc774\ud0c0\ub2c9\uc740 \ubd84\ub958\uc758 \ubb38\uc81c\uc785\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ubd84\ub958\ud558\ub294\uac00\uac00 \uc911\uc694\ud558\uc9c0\uc694.\n* \uc6b0\uc120 \uae30\uc874 \ud56d\ubaa9\uc744 \uc815\ub9ac\ud569\ub2c8\ub2e4.","bb66f6d8":"* Cabin\uc5d0 \ube44\uc5b4 \uc788\ub294 \uac83\uc774 \ub9ce\uc544 \uc774\ub97c \ub2e4\ub978 \ubd84\ub958\ub85c \uc77c\ub2e8 \uc7a1\uace0\n\uae30\uc874 \uac83\uc740 \uc774\ub2c8\uc15c\ub85c \ubd84\ub958\ud569\ub2c8\ub2e4.\n* \ube48 \uac83\uc740 X\ub85c \uad6c\ubd84\ud558\ub824\ub294\ub370 \uc774 \ub610\ud55c 1,2,3 Pclass\uc640 \uc5f0\ub3d9\ub420 \uac83 \uac19\uc73c\ub2c8 \ube44\uc5b4\uc788\uace0 1\ub4f1\uae09\uc740 X, 2\ub4f1\uae09\uc740 Y, 3\ub4f1\uae09\uc740 Z\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.","66794784":"### 4\ub2e8\uacc4 - \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd","b5fb0d6a":"* \uc0dd\uc874 \uc22b\uc790\ub85c \ubd05\ub2c8\ub2e4.","1cfaf5e2":"* x\ub97c \uadf8\ub8f9\ubcc4\ub85c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n","e621c6e7":"* \uac01 \uc5f4\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","0a3dea8e":"* Initial \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ubcf4\uace0 \uc801\uc6a9 \uc2dc\ud0a4\ub294 \uac83\uc774 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","ba9e2f98":"* Priority","0835b67d":"* \uc774\ub97c \ud2b8\ub808\uc778\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ud50c\ub808\uc784\uc758 x\ucd95\uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4.","00d7543b":"* \uc55e\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uac83\ucc98\ub7fc Age \ud56d\ubaa9\uc5d0\ub294 ** 177 ** null \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c NaN \uac12\uc744 \ub300\uccb4\ud558\uae30 \uc704\ud574 \ub370\uc774\ud130 \uc9d1\ud569\uc758 \ud3c9\uade0 \uc218\uba85\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* \uadf8\ub7ec\ub098 \ubb38\uc81c\ub294 \ud3c9\uade0 \uc5f0\ub839\uc774 29 \uc138\ub97c 4\uc138 \uc544\uc774\uc5d0\uac8c \ud560\ub2f9 \ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc2b9\uac1d\uc774 \uc5b4\ub5a4 \uc5f0\ub839\ub300\uc5d0 \uc788\ub294\uc9c0 \uc54c \uc218\uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc744\uae4c\uc694? \uc774\ub984\uc5d0\uc11c \ud78c\ud2b8\ub97c \ucc3e\uc544 \ubd05\ub2c8\ub2e4.\n* Task 5\uc5d0\uc11c \ud574\ubd05\ub2c8\ub2e4.","d2f93d91":"###6\ub2e8\uacc4 - Voting Classfier","dbee803e":"#### \ud569? Just for fun\n","3745a30e":"* KNeighbors","e4347a57":"* Random Forest","a677a140":"* \uc6b0\uc120 age\uc758 \ube48\uce78 \ubd80\ud130 \ud574\uacb0 \ud569\ub2c8\ub2e4.","383bb448":"* \ub3c4\ubb34\uc9c0 \uac10\uc774 \uc548 \uc7a1\ud788\ub294 \ubc30\uc5f4\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \uc5c6\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","8923e69e":"* \ube48\uce78\uc774 \ub450\uac1c \uc788\ub294\ub370 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","4545d317":"## Task 8 - \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30","676a41cd":"* \uc774\uc81c \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc704\ud574 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","c136bcef":"* Age\ub294 Continuous\ud55c \uac12\uc785\ub2c8\ub2e4.\n* \ube48\uce78\uc774 \ub9ce\uc544\uc11c \ube48\uce78\ucc98\ub9ac\uac00 \uacb0\uc815\uc801\uc778 \uc5ed\ud560\uc744 \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n* Age\uc758 \ucd5c\ub300, \ucd5c\uc18c, \uc911\uac04\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","1b86e233":"* Co-relation \ub9e4\ud2b8\ub9ad\uc2a4\ub294 seaborn\uc5d0\uc11c \ubcc0\uc218 \uac04 \uc0c1\uad00 \uacc4\uc218\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ud45c\uc785\ub2c8\ub2e4. \ud45c\uc758 \uac01 \uc140\uc740 \ub450 \ubcc0\uc218 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uc0c1\uad00 \ub9e4\ud2b8\ub9ad\uc2a4\ub294 \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc785\ub825 \ubc0f \uace0\uae09 \ubd84\uc11d\uc5d0 \ub300\ud55c \uc9c4\ub2e8\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc694\uc57d\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\ucc38\uace0: https:\/\/seaborn.pydata.org\/examples\/many_pairwise_correlations.html\n* \uc544\ub798 \ub9c8\uc2a4\ud06c \uc14b\uc5c5\uc740 0\ub85c \ud589\ub82c\uc744 \uc0c1\uad00 \ud589\ub82c\uacfc \uac19\uc740 \ubaa8\uc591\uc73c\ub85c \ub9cc\ub4e0 \ud6c4 \uc5ec\uae30\uc5d0 \ubd88\ub9ac\uc548 \uac12\uc744 \ub123\uace0 \uc774\ub97c \ub2e4\uc2dc True\ub9cc \ub9cc\ub4ed\ub2c8\ub2e4.\n* triu \ub294 \uc6b0\uce21 \uc0c1\ub2e8 \uc0bc\uac01\ud589\ub82c\uc744 \uc758\ubbf8 \n* annot= True\ub294 \uac01 \uc140\uc5d0 \uc22b\uc790\ub97c \ud45c\uc2dc\ud558\ub77c\ub294 \uac83\uc774\uace0, False\ub294 \ud558\uc9c0 \ub9d0\ub77c\ub294 \uac83\uc774\uad6c\uc694\nhttps:\/\/seaborn.pydata.org\/generated\/seaborn.heatmap.html\n*\uc774\uc5b4\uc11c \uc774\ub97c heatmap\uc73c\ub85c \ub7f0\uce6d\ud569\ub2c8\ub2e4.\n","fe21c086":"#### \uad00\ucc30 :\n\n1) Pclass\uc5d0 \ub530\ub77c \uc5b4\ub9b0\uc774 \uc218\uac00 \uc99d\uac00\ud558\uace0 10 \uc138 \ubbf8\ub9cc\uc758 \uc5b4\ub9b0\uc774 (\uc989, \uc5b4\ub9b0\uc774)\uc758 \uc0dd\uc874\uc728\uc740 Pclass\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc591\ud638\ud574 \ubcf4\uc785\ub2c8\ub2e4.\n\n2) Pclass1\uc5d0\uc11c 20-50\uc138\uc758 Passeneger\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub192\uace0 \uc5ec\uc131\uc5d0\uac8c\ub294 \ub354 \uc88b\uc2b5\ub2c8\ub2e4.\n\n3) \ub0a8\uc131\uc758 \uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc740 \ub098\uc774\uac00 \uc99d\uac00\ud568\uc5d0 \ub530\ub77c \uac10\uc18c\ud569\ub2c8\ub2e4.","43d3a2b9":"### Taks 5.5 - \"Cabin\" \ubd84\uc11d","f692177e":"# Kaggle Titanic \uc785\ubb38","8ada9d74":"* \uc774\uc5b4\uc11c Family \uc218\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.","8c11b28a":"* \ube48\uce78\uc774 \ubb34\ucc99 \ub9ce\uc2b5\ub2c8\ub2e4.","538fe63a":"* Wealth","0c4ae70d":"## Task 9 - \ub9c8\uc9c0\ub9c9 \ubaa8\ub378 \uc608\uce21 & \uc81c\ucd9c \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc","f94e37b3":"* \ubcf4\uc2dc\ub2e4\uc2dc\ud53c '\ub098\uc774'\uc640 '\uce90\ube48' \ubc88\ud638\uc5d0\uc11c \uad6c\uba4d\uc774 \ub9ce\uc2b5\ub2c8\ub2e4.\n* \ube48\uce78\uc758 \uc22b\uc790\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","30cbd759":"#### \ud56d\ubaa9\uc758 \uc885\ub958\n\n#### \ubc94\uc8fc\ud615 \ud56d\ubaa9 (Categorical Features)\n\ubc94\uc8fc\ud615 \ubcc0\uc218\ub294 \ub458 \uc774\uc0c1\uc758 \uacb0\uacfc \uc694\uc18c\uac00 \uc788\ub294 \ubcc0\uc218\uc774\uba70 \ud574\ub2f9 \uae30\ub2a5\uc758 \uac01 \uac12\uc744 \ubc94\uc8fc\ubcc4\ub85c \ubd84\ub958 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc131\ubcc4\uc740 \ub450 \uac00\uc9c0 \ubc94\uc8fc (\ub0a8\uc131\uacfc \uc5ec\uc131)\uc758 \ubc94\uc8fc \ud615 \ubcc0\uc218\uc785\ub2c8\ub2e4. ** \uc774\uc0b0\ud615 \ubcc0\uc218(discrete variable) = \ubc94\uc8fc\ud615 \ubcc0\uc218 (categorical variable) \uc758 \ud558\ub098\ub85c \uba85\ubaa9 \ubcc0\uc218 norminal variable **\ub77c\uace0\ub3c4\ud569\ub2c8\ub2e4.\n\n** \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uba85\ubaa9 \ud56d\ubaa9 : Sex, Embark ** \uc774\uba70 \uc6b0\ub9ac\ub294 Name, Ticket \ub4f1\uc744 \uc774\ub85c \ubcc0\ud658\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\nOrdinal Variable :\n\uc21c\uc704 \ubcc0\uc218\ub294 \ubc94\uc8fc \ud615\uc758 \ud558\ub098\uc9c0\ub9cc \uadf8 \ucc28\uc774\uc810\uc740 \uac12 \uc0ac\uc774\uc758 \uc0c1\ub300 \uc21c\uc11c(=\uc11c\uc5f4) \ub610\ub294 \uc815\ub82c\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uac12\uc774 ** Tall, Medium, Short ** \uc778 ** Height **\uc640 \uac19\uc740 \ud53c\ucc98\uac00\uc788\ub294 \uacbd\uc6b0 Height\ub294 \uc11c\uc218 \ubcc0\uc218\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c \ubcc0\uc218\uc5d0 \uc0c1\ub300\uc801\uc778 \uc815\ub82c\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n** \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc21c\uc704 \ud56d\ubaa9 : PClass ** \uc774\uba70 \uc6b0\ub9ac\ub294 Cabin\uc744 \uc774 \ubc94\uc8fc\ub85c \ubcc0\ud658\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n#### \uc5f0\uc18d\ud615 \ud56d\ubaa9 (Continuous Features):\n\uc11c\ub85c \uc5f0\uc18d\ub41c \uac12\uc744 \uac00\uc9c4 \ubcc0\uc218\ub97c \uac00\uc9c4 \ud56d\ubaa9\uc774\uba70 \uc5ec\uae30\uc5d0\uc11c \uc6b0\ub9ac\ub294 \uc5f0\ub839\uc744 \ub300\ud45c\uc801\uc778 \uac83\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n** \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc21c\uc704 \ud56d\ubaa9 : Age ** \uc774\uba70, Age, SipSp, Parch, Fare\ub294 interval variable\ub85c \ub9cc\ub4e4\uc5b4 \uc774\uc5d0 \uc801\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n\n\n####\ud56d\ubaa9 \uc815\ubcf4\n\nhttps:\/\/www.kaggle.com\/c\/titanic\/data\n* \uc704\uc758 \ub9c1\ud06c\uc5d0 \uac00\uba74 \ub370\uc774\ud130 \ud56d\ubaa9\uc758 \ub515\uc1fc\ub108\ub9ac\ub97c \ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n      Variable       Definition                Key\n\n      survival\t    Survival\t             0 = No, 1 = Yes\n\n      pclass\t      Ticket class\t         1 = 1st, 2 = 2nd, 3 = 3rd\n\n      sex\t          Sex\t\n\n      Age\t          Age in years\t\n\n      sibsp\t        # of siblings \/ spouses aboard the Titanic\t\n\n      parch\t        # of parents \/ children aboard the Titanic\t\n\n      ticket\t      Ticket number\t\n\n      fare\t        Passenger fare\t\n\n      cabin\t        Cabin number\t\n\n      embarked\t    Port of Embarkation\t     C = Cherbourg, Q = Queenstown, S = Southampton","1b08e062":"* 'score'\ub780 'accuracy'\ub97c \ub9d0\ud569\ub2c8\ub2e4.. ","7d2b9fe3":"* %\ub294 3\ub4f1\uce78\uc774 \ubc18\uc774 \ub118\uc73c\ub098 \uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c \uc0dd\uc874\uc790\ub294 1\ub4f1\uc11d\uc774 \uac00\uc7a5 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\ub960\uc744 \ubcfc\uae4c\uc694?","300a729f":"* \uc790, \uc774\uc81c \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc9c0\uc694.\n* \uc6b0\uc120 \uc778\ucf54\ub529\ud55c \ud30c\uc77c\uc744 train\uacfc test\ub85c \uc544\uae4c \uad6c\ubd84\ud574 \ub193\uc740 \ud589\uc73c\ub85c \ucabc\uac2d\ub2c8\ub2e4","de9c734f":"* train\ud30c\uc77c \uc21c\uc11c\ub300\ub85c \ub370\uc774\ud130 \ud30c\uc77c\uc758 \uc5f4\ub4e4\uc744 \ubd05\ub2c8\ub2e4.","1831face":"* Extra Trees","93d697d3":"*\uc774\uc81c \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uacfc \uc218\uce58\ub97c \uc90d\ub2c8\ub2e4.\n* \ud56d\ubaa9\uc740 Social Class, Wealth, Priority, Situational Cases, Sacrifice (Cannot leave alone) \uc774\ub807\uac8c \ub2e4\uc12f\uac00\uc9c0\ub85c \ub098\ub204\uace0 \n* \uae0d\uc815 \ud56d\ubaa9\uc5d0 1,3,5\uc810\uc744 \uc8fc\uace0, \uc5ed\uc73c\ub85c \uc791\uc6a9\ud560 \uacbd\uc6b0 -1, -3, -5\ub97c \uc90d\ub2c8\ub2e4.\n* \uac01 \ud56d\ubaa9\uc740 \uae30\uc874 \ud56d\ubaa9 \uac12\uc774 \uc11e\uc5ec \uc788\uc2b5\ub2c8\ub2e4.","a90d9b8a":"## Task 5 - Feature Engineering\n\n### Task 5.1 Age, Name & Sex\n\n*\uc774\ub984\ubd80\ud130 \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4.","9d08a361":"#### describe \ubcf4\uae30","dc590d32":"* \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\uc11c train\ud30c\uc77c\uc744 \ubcf4\uc9c0\uc694","6aa7b16b":"* \ub450 \uc0ac\ub78c\uc758 \ud2f0\ucf13 \ubc88\ud638\uac00 \uac19\uc2b5\ub2c8\ub2e4.\n* \ud639\uc2dc \uac19\uc740 \ud2f0\ucf13 \ubc88\ud638\uac00 \uc788\ub294 \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc788\ub294\uc9c0 \ubd05\ub2c8\ub2e4.","744e7fc7":"* \ubaa9\ucc28\n1. \uc911\uc694 \ubaa8\ub4c8 \uc784\ud3ec\ud2b8 \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n2. \ub370\uc774\ud130 \uc815\ub9ac\n3. \ub370\uc774\ud130 \uacf5\ubd80\n4. Exploratory Data Analysis\n5. Feature Engineering\n6. \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30\n7. \ubaa8\ub378 \uc608\uce21 ","60673fb8":"#### \ucd5c\ucd08 (Wild) Guess\n \n* \ud56d\ubaa9\uc744 \ubcf4\uba74 PClass \ub294 \uac1d\uc2e4\uc758 \ub808\ubca8\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. 1\uc774 \uc81c\uc77c \uc88b\uc740 \uacf3\uc774\uace0 3\uc774 \uc81c\uc77c \ub0ae\uc740 \uacf3\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n* \uc774\ub984\uc740 \ubcc4 \uc758\ubbf8\uac00 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc73c\ub098 \uc911\uac04\uc5d0 Mr. Miss, Mrs \ub4f1\uc774 \uc544\ub2cc master, rev, capt \ub4f1\uc774 \ub098\uc624\ub294\ub370 \uc774\ub294 \uc758\ubbf8\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n* Sex\ub294 \uc911\uc694\ud569\ub2c8\ub2e4. \ubcf4\ub098\ub9c8\ub098 \uc5ec\uc131\uacfc \uc544\uc774\ub4e4\uc744 \uc6b0\uc120\uc801\uc73c\ub85c \uad6c\uba85 \ubcf4\ud2b8\uc5d0 \ud0c0\uac8c \ud588\uc744 \uac83\uc774\ubbc0\ub85c \ub0a8\uc131\uc774\uba74 \uc0ac\ub9dd \ud655\ub960\uc774 \ud6e8\uc52c \ub192\uc9c0\uc694\n* Age\ub3c4 \uc911\uc694\ud569\ub2c8\ub2e4. \uc5b4\ub9b4 \uc218\ub85d \uad6c\uba85 \ubcf4\ud2b8\uc5d0 \ud0d4\uc744 \uac00\ub2a5\uc131\uc774 \ud06c\ub2c8\uae4c\uc694\n* SibSp\ub294 \ubc30\uc6b0\uc790\ub098 \ud615\uc81c\ub4e4\uacfc \uac19\uc774 \ud0c4 \uc989, \uac00\uc871\uc758 \uc22b\uc790\ub97c \ub098\ud0c0\ub0b4\ubbc0\ub85c \uac00\uc871\uc774 \uc788\ub294 \uc0ac\ub78c\uc758 \uc0dd\uc874 \ud655\ub960\uc740 \ucef8\uc744 \uac83\uc774\ub77c \uc0ac\ub8cc \ub429\ub2c8\ub2e4.\n* Parch \ub294 \ubd80\ubaa8, \uc544\uc774\ub4e4\uc774 \uac19\uc774 \ud0c4 \uacbd\uc6b0\ub2c8\uae4c, \uc5ed\uc2dc \uc0dd\uc874 \ud655\ub960\uc774 \uc880 \ub354 \ub192\uc744 \uac83\uc774\ub77c \uc0dd\uac01\ub429\ub2c8\ub2e4.\n* Ticket\uc740 \uc5b4\ub5bb\uac8c \uc758\ubbf8\ub97c \ub450\uc5b4\uc57c \ud560\uc9c0 \uc544\uc9c1 \ud30c\uc545\uc774 \uc548 \ub429\ub2c8\ub2e4. Fare\ub098 Cabin\uacfc \uc5f0\uad00\uc774 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n* Fare\ub294 \ube44\uc300 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc744 \uac00\ub2a5\uc131\uc774 \ud074 \uac83\uc73c\ub85c \uc0dd\uac01\ub429\ub2c8\ub2e4.\n* Cabin\ub3c4 \uc815\ud574\uc9c4 \uce90\ube48\uc5d0\uc11c\uc758 \uc0dd\uc874\ub960\uc774 \ub354 \ub192\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. NaN\uc740 Not a number\ub780 \ub73b\uc778\ub370 \uc544\ub9c8\ub3c4 \ud06c\ub8e8\uc774\uc5c8\uac70\ub098 \uc815\ud655\ud55c \ubc29 \ubc30\uc815\uc774 \uc548 \ub41c \ub2e8\uccb4\ub85c \uc790\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc544\ub2c8\uc5c8\ub098\ub294 \uc0dd\uac01\uc774 \ub4e4\uae30\ub3c4 \ud569\ub2c8\ub2e4.\n* Embarked\ub294 \uc5b4\ub514\uc11c \ud0d4\ub0d0\ub294 \uc774\uc57c\uae30\uc778\ub370, \ud070 \uc694\uc778\uc740 \uc544\ub2d0 \uac83\uc774\ub77c\ub294 \uac83\uc774 \ucd5c\ucd08 \ucd94\uce21\uc774\ub098 \ud604\ub300\uc640 \ub2ec\ub9ac \ubd80\uc790 \uc0ac\ub294 \ub3d9\ub124\ubd80\ud130 \ub178\ub3d9\uc790 \uc0ac\ub294 \ub3d9\ub124\uae4c\uc9c0 \uadf8 \ub2f9\uc2dc\uc5d0\ub294 \ud655\uc5f0\ud788 \ub2ec\ub790\uc744 \uacbd\uc6b0 \uc601\ud5a5\uc774 \uc788\uc744 \uac83\uc774\ub77c \uc0dd\uac01 \ub429\ub2c8\ub2e4.","f11e2697":"### Task 4.5 - \"Age\" \ubd84\uc11d","30f2059c":"### 5\ub2e8\uacc4 - \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd","cc649d35":"### 1\ub2e8\uacc4 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4.\n\n* \uc790 \uc774\uc81c\ub294 11\uac1c\uc758 classifier\ub85c \ubaa8\ub378\uc744 \ub3cc\ub824 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","d63c009c":"## Task 2 - \ub370\uc774\ud130 \uc815\ub9ac\n\n","a36c2c34":"#### Acknowledgement: I have learned a lot from and used a lot of lines from the works created by Joshua Reed, Daniel Bourke, and Ashwini Swain. I could not have completed this if I had not gotten their works and ideas. Many thanks to them.","30c8de50":"* Sacrificed","5285dfd0":"* \uad00\ucc30 :\n1) S\uc5d0\uc11c \ud0d1\uc2b9 \ucd5c\ub300. \ub300\ub2e4\uc218\ub294 Pclass3\n\n2) C\uc758 \uc2b9\uac1d\ub4e4\uc740 \ub9ce\uc740 \ube44\uc728\uc774 \uc0b4\uc544\ub0a8\uc558\uc2b5\ub2c8\ub2e4. \uadf8 \uc774\uc720\ub294 Pclass1 \ubc0f Pclass2 \uc2b9\uac1d\uc774 \ub9ce\uc544\uc11c \uc77c \uac83\uc785\ub2c8\ub2e4\n\n3) Embark S\ub294 \ub300\ubd80\ubd84\uc758 \ubd80\uc790\ub4e4\uc774 \ud0d1\uc2b9\ud55c \ud56d\uad6c\uc9c0\ub9cc \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ub0ae\uc2b5\ub2c8\ub2e4. Pclass3\uc758 \uc2b9\uac1d\ub3c4 \ub9ce\uc558\uc2b5\ub2c8\ub2e4. \n\n4) \ud3ec\ud2b8 Q\ub294 \uc2b9\uac1d\uc758 \uac70\uc758 95 %\uac00 Pclass3","c1ab5222":"* Ticket\uc758 \ud615\ud0dc\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","56dc242b":"* XGB Step 2","a408a8d7":"* \uc5f4 \uc774\ub984\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","7611d0c2":"* \uc774\ub97c \uc131\ubcc4\ub85c \ubd05\ub2c8\ub2e4.","273c84bb":"* \ud30c\uc77c \ubd84\ub9ac \ubc0f \ubcd1\ud569","046d05f9":"* sum \ub9d0\uace0 any\ub97c \uc4f0\uba74 \ud2b9\uc815 \ud589\uc5d0 \ube44\uc5b4 \uc788\ub294 \uac83\uc774 True(=\ube48 \uac83 \uc788\uc74c) False(= \ube48 \uac83 \uc5c6\uc74c)\ub97c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. ","4f39c6d8":"* \ud06c\ub85c\uc2a4 \ud0ed\uc740 \ub2e4\uc2dc \uc2dd\uad6c \ub9ce\uc740 \ucabd\uc740 Pclass3\uc5d0 \uc788\uc74c\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n* \uc5ec\uae30\uc5d0\uc11c\ub3c4 \uacb0\uacfc\ub294 \ub9e4\uc6b0 \ube44\uc2b7\ud569\ub2c8\ub2e4. \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d1\uc2b9 \ud55c \uc2b9\uac1d\uc740 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc22b\uc790\uac00 \uc62c\ub77c \uac08\uc218\ub85d \uc904\uc5b4 \ub4ed\ub2c8\ub2e4.\n\n* \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 \ubc30\uc5d0 1-3 \uba85\uc758 \ubd80\ubaa8\uac00\uc788\ub294 \ub204\uad70\uac00\uc5d0\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \ud63c\uc790 \ub610\ud55c \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \ub0ae\uc740 \uac83\uc73c\ub85c \ud310\uba85\ub418\uace0 \uac00\uc871\uc774 4 \uba85\uc774\uc0c1 \uc788\uc73c\uba74 \uc0dd\uc874 \uac00\ub2a5\uc131\uc774 \uc904\uc5b4 \ub4ed\ub2c8\ub2e4. \uc774\ub294 \uc18c\uc218\uc758 \uac00\uc871\ub4e4\uc774 \uc788\ub294 \uadc0\uc871\uce35\uc774 \uc0dd\uc874\ud558\uace0, \ud63c\uc790\uac00 \ub9ce\uc740 \uc80a\uc740 \uc774\ub4e4\uc740 \uc591\ubcf4\ub97c \ud560 \uc218 \ubc16\uc5d0 \uc5c6\uace0, \uac00\uc871\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4(\ud2b9\ud788 \uadc0\uc871\uc774 \uc544\ub2cc 3\ub4f1\uce78 \uc0ac\ub78c\ub4e4)\uc740 \uc804\uc6d0\uc774 \ud0c0\uc9c0 \ubabb \ud558\uba74 \uc5b4\ub290 \ub204\uad6c\ub3c4 \ud0c8 \uc218\uac00 \uc5c6\ub294 \ube44\uadf9\uc801\uc778 \ub2f9\uc2dc \uc0c1\ud669\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.","3377daba":"* \ubc30\uc5d0 \uc788\ub358 \ub0a8\uc790\uc758 \uc218\ub294 \uc5ec\uc790\uc758 \uc218\ubcf4\ub2e4 \ud6e8\uc52c \ub9ce\uc2b5\ub2c8\ub2e4. \uc5ec\uc804\ud788 \uc0dd\uc874 \uc5ec\uc131 \uc218\ub294 \ub0a8\uc131 \uc218\uc758 \uac70\uc758 \ub450 \ubc30\uc785\ub2c8\ub2e4. ** \uc120\ubc15 \uc5ec\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 75 % \uc778 \ubc18\uba74 \ub0a8\uc131\uc758 \uc0dd\uc874\uc728\uc740 \uc57d 18-19 %\uc785\ub2c8\ub2e4. **","cbd031cd":"### 3\ub2e8\uacc4 - \ubaa8\ub378 \uc7ac \ud2b8\ub808\uc774\ub2dd","76dfe91a":"* \uc6b0\ub9ac \uc5ec\uae30\uc11c \uc778\ub371\uc2f1 \uac19\uc740 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. (\uc9c0\uae08 \ud544\uc694\ud55c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \uc5f0\uc2b5 \uc0bc\uc544, \ud30c\uc774\uc36c \uae30\ucd08 \ubc18 \ub54c \uae30\uc5b5\uc744 \ub418\uc0b4\ub9ac\uba70)","1d3fd9ba":"* qcut\uc73c\ub85c \ub098\uc774 \uadf8\ub8f9\uc744 \ub098\ub204\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","a95269e3":"* Logistic Regression","b19866ff":"* XGB Step 5","13a6e436":"* \uc704\ub97c \ubcf4\uc2dc\uba74 \uc22b\uc790\ub85c \ub41c \uc5f4\ub4e4\uc758 \uae38\uc774, \uc911\uac04 \uac12, \ud45c\uc900\ud3b8\ucc28 \ub4f1\uc774 \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. ","b36318ec":"* \uc774\ub97c \uae30\uc900\uc73c\ub85c Sex\ub85c \ub3cc\uc544\uac11\ub2c8\ub2e4\n* \uc131\ubcc4\uc5d0\uc11c \ub9c8\ubb34\ub9ac\ub97c \ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\n* \uc131\ubcc4\uc744 \ub2e4\uc2dc \ubd05\ub2c8\ub2e4.","b8879059":"* Class","d5b66713":"* \ubb38\uc81c\ub294 \uc704\uc758 \ud568\uc218\uac00 \ub2ec\ub791 \ub450\uac1c\uc758 \uac12\ub9cc \uac00\uc9c4 \uac83\uc5d0 \ud1b5\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc785\ub2c8\ub2e4.\n* \uadf8\ub7fc \uc800 \ud568\uc218\ub97c Pclass\uc5d0 \uc4f0\uba74 3\uac1c \uac12\uc774\ub77c \uc5d0\ub7ec\uac00 \ub0a0 \uac83\uc785\ub2c8\ub2e4.\n* \uc774 \ub54c\ub294 \uc704\ub97c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4\uace0 \ud30c\uc774\uc36c \uc218\uc5c5\uc5d0\uc11c \ubc30\uc6b4 \uc624\ubc84\ub77c\uc774\ub529\uc744 \ud574\uc918\uc57c\uc8e0. \ud558\uc9c0\ub9cc \uc6a9\ub3c4\uc5d0 \ub300\ube44\ud574\uc11c \ub108\ubb34 \uacfc\ub3c4 \ud55c \uc77c\uc774\ub77c 3\uac1c \uc9dc\ub9ac\ub97c \ub2e4\uc2dc \ud55c \ubc88 \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4. \uc0b4\uc9dd\ub9cc \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4. ","37588d9f":"* \ud2f0\ucf13\uc5d0\uc11c \uc601\ubb38\uc788\ub294 \uac83\uacfc \uc22b\uc790\ub9cc \uc788\ub294 \uac83\uc744 \ub530\ubd05\ub2c8\ub2e4.(\uc22b\uc790\ub9cc \uc788\ub294 \uac83\uc740 X\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.)","1c1ac802":"* test \uc5d0 \uc788\ub294 Dona\uc758 \ub098\uc774\ub97c \ubcf4\uace0 \uc5b4\ub514\uc5d0 \ub123\uc744\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* Ms. \ub294 \ud604\ub300\ucc98\ub7fc Miss + Mrs\ub97c \ud569\uce5c \ub9d0\uc774 \uc544\ub2c8\ub77c \ub2f9\uc2dc\uc5d0\ub294 \uadc0\uc871\ubbf8\ub9dd\uc778\uc744 \uc758\ubbf8\ud558\ub294 \uac83\uc774 \uc5c8\uc2b5\ub2c8\ub2e4. Mlle\ub098 Mme\ub4f1\ub3c4 \ub9c8\ub4dc\ubaa8\uc544\uc824\uacfc \ub9c8\ub2f4\uc758 \uc904\uc778\ub9d0\uc77c \uacbd\uc6b0\uc77c \uac83\uc785\ub2c8\ub2e4. \uadc0\uc871 \uc5ec\uc131\ub4e4\ub85c \ubcf4\uc544\uc57c\uaca0\uc8e0.","e7fb3fb2":"*\uc704\uc5d0 \uac83\ub3c4 \ud568\uc218\ub85c \ub9cc\ub4e4\uc8e0","aaa40ff7":"*\uc774\uc81c \ube48 \uac83\uc774 \ubb50\uac00 \uc788\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","0f4c2665":"### Task 4.4 - \"Sex\" \ubd84\uc11d\n\n","447cf83e":"* \ub2e4\uc2dc \ub3cc\uc544\uc640\uc11c Age\ub97c \uadf8\ub8f9\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Agroup\uc774\ub77c\uace0 \uc774\ub984 \uc9d3\uaca0\uc2b5\ub2c8\ub2e4.\n\n* 1\uc0b4 \ubbf8\ub9cc baby -1\n* 1\uc0b4 - 3\uc0b4 Toddler  2\n* 3\uc0b4 \ucd08\uacfc - 11\uc0b4 young kid  - 7\n* 11\uc0b4 \ucd08\uacfc - 15\ubbf8\ub9cc big kid  - 13\n* 15-17 \uc0b4 Boy\/Girl - 16\n* 17\uc774\uc0c1 20\ubbf8\ub9cc Youth - 18\n* 20- 22 Very Young - 21\n* 22- 26 Young man  -24\n* 26 - 30  - 28\n* 30 -32 Active  - 31\n* 32 -34 Manager  - 33\n* 34  - 38 Director  - 36\n* 38 - 52 Mid  - 45\n* 52-75 Old  - 63\n* 75\uc774\uc0c1 Senior  - 80","fe71ad8a":"* Gaussian Process","51209d59":"* \uc0ac\ud68c\ub294 \ubd88\uacf5\ud3c9 \ud588\uc73c\ub098 \ucd5c\uc18c\ud55c \ub0a8\uc790\ub4e4\uc758 \uc2e0\uc0ac\ub3c4\ub294 \uc788\uc5c8\ub2e4\uace0 \ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","100fc6b3":"### Task 5.2 - Family or Alone?\n\n\"SibSp\" + \"Parch\" \ubd84\uc11d\n\n* SibSp - \uc774 \ud56d\ubaa9\uc740 \ud0d1\uc2b9\uc790\uac00 \ud63c\uc790\uc778\uc9c0 \ub610\ub294 \uac00\uc871\uacfc \ud568\uaed8 \uc788\ub294\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\n*Sibling = \ud615\uc81c, \uc790\ub9e4, \uc758\ubd93 \ud615\uc81c, \uc774\ubcf5 \ub204\uc774\n\nSpouse = \ub0a8\ud3b8, \uc544\ub0b4\n\n* Parch\ub294 \ubd80\ubaa8\uc640 \ud568\uaed8 \ud0d4\ub294\uc9c0\ub97c \ubd05\ub2c8\ub2e4.\n\n* \uc774 \uadf8\ub8f9 \ub458\uc744 'Alone\"\uadf8\ub8f9\uacfc \"Family'\uadf8\ub8f9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4.","5e5f9b70":"### 2\ub2e8\uacc4 - \ud56d\ubaa9 \uace0\ub974\uae30","ea0f0de3":"*  \uc774 \uac83\ub3c4 \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \ub193\uc8e0","c5b9c8b3":"## Task 6  - string\uc744 \uc218\uce58\ub85c \ubc14\uafb8\uae30","0337eafe":"* \ud30c\uc774\uadf8\ub798\ud504\ub791 \uce74\uc6b4\ud2b8 \ud50c\ub86f\uc744 \uc11c\ube0c\ud50c\ub86f\uc73c\ub85c \uadf8\ub9bd\ub2c8\ub2e4.\n* \ud589\uc740 \ud558\ub098 \uc5f4\uc740 2\uac1c\uc758 \uc11c\ube0c \ud50c\ub86f\uc785\ub2c8\ub2e4. \uc0ac\uc774\uc988\ub294 \uac00\ub85c 15\uc778\uce58 \uc138\ub85c 6\uc778\uce58\n* 'Survived'\uc758 \uac12\uc744 \uce74\uc6b4\ud2b8\ud574\uc11c \ud30c\uc774\ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \n* explode\ub294 \ud3ed\ubc1c\ud558\ub294 \uac83\uc774\ub2c8\uae4c 1\uc774\uba74 \ud280\uc5b4 \ub098\uac00\ub294 \uac83\uc778\ub370 0\uc744 \uc8fc\uba74 \ubd84\ub9ac\ub9cc \ub418\uace0 \ub3cc\ucd9c\uc740 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc5b4\uc11c 0, 1\uc778 \uac83\uc740 \uccab \ubc88\uc9f8 \uac83\uc740 \uc544\ub2c8\uace0 \ub450\ubc88 \uc9f8 \uac83\uc740 \ubd84\ub9ac\ub41c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* autopercent\ub294 1.1\uc774 \ud45c\ud604\ud558\ub294 \ubd80\ubd84\uc740 \uc18c\uc218\uc810 \ud55c \uc790\ub9ac\uae4c\uc9c0 \ubcf4\uc5ec \uc8fc\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ub4a4\uc5d0 \uc810 \uc774\ud558\uac00 4\uba74 \ub458 \ub2e4 \uc18c\uc218\uc810 4\uc790\ub9ac\uc218 \uae4c\uc9c0 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.\n* ax[0]\uc740 \uccab\ubc88\uc9f8 \uce78\uc785\ub2c8\ub2e4.\n* set_title \uba54\uc18c\ub4dc\ub294 \uc11c\ube0c \ud50c\ub86f\uc758 \uc81c\ubaa9\uc744 \ubcf4\uc5ec \uc90d\ub2c8\ub2e4.   ","cb6fecfe":"* \ud30c\uc77c\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n","4c37c156":"*1\ub4f1\uae09 \uac1d\uc2e4\uc758 \uc0ac\ub78c\ub4e4\uc740 \uc0dd\uc874\uc790\uac00 \ub354 \ub9ce\uace0, 2\ub4f1\uae09\uc740 \uc0dd\uc874\uc790\uc5d0 \ube44\ud574 \uc0ac\ub9dd\uc790\uac00 \uc870\uae08 \ub354 \ub9ce\uc73c\ub098, 3\ub4f1\uae09\uc740 \uc0ac\ub9dd\uc790\uac00 3\ubc30 \uc774\uc0c1 \ub9ce\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","ab745d12":"* cabin \uc758 \uc704\uce58\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \uac83\uc774 \uc788\ub294\uc9c0 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","a452e42c":"* capt.\uc774 70\uc138\uc778 \uac83 \ubcf4\ub2c8 \ub300\uc704 \ucea1\ud2f4\uc774 \uc544\ub2c8\ub77c \uc120\uc7a5 \ucea0\ud2f4\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \n* Dona\ub294 Mrs\ub85c \ub123\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc774\ub2c8\uc15c \ubcc4 \ud3c9\uade0 \uc5f0\ub839\uc744 \ube48\uce78\uc5d0 \ub123\ub3c4\ub85d \ud569\ub2c8\ub2e4.\n","c76c4550":"## Task 1 - \uc911\uc694 \ubaa8\ub4c8 \uc784\ud3ec\ud2b8 \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\n\n* \uc790\ub8cc \ub2e4\uc6b4\ub85c\ub4dc\ud558\uae30\n[\uc790\ub8cc \ub2e4\uc6b4\ub85c\ub4dc](https:\/\/www.kaggle.com\/c\/3136\/download-all)\n\n\uc73c\ub85c \uac00\uc11c \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud55c\ub2e4. (Kaggle note\uc5d0\uc11c \ud560 \ub54c\ub294 \ubd88\ub7ec \uc624\ub294 \uac83\uc774 \uc880 \ub354 \ub2e8\uc21c\ud558\ub098 \uc8fc\ud53c\ud130 \ub178\ud2b8\ubd81\uc5d0\uc11c \ud560 \ub54c\ub294 \ub2e4\uc6b4\ub85c\ub4dc \ubc0f \uc784\ud3ec\ud2b8\ub97c \ud574\uc57c\ud55c\ub2e4.)\n\n* \ud544\uc694\ud55c \uac83\ub4e4\uc744 \uc784\ud3ec\ud2b8 \uc880 \ud574\uc57c\uaca0\uc8e0.\n\n","4439fb2f":"* \uc55e \ub4a4\ub85c \ubaa8\ub450 S\uc774\uace0 Pclass\ub3c4 \ubaa8\ub450 1\uc778 \uac83\uc73c\ub85c \ubd10\uc11c S\uc77c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4.","e06155e1":"* Pclass1\uc758 \uc2b9\uac1d \uc694\uae08\uc5d0\ub294 \ud070 \ubd84\ud3ec\uac00\uc788\ub294 \uac83\uc73c\ub85c \ubcf4\uc774\uba70 \ubd88\uc5f0\uc18d \uac12\uc73c\ub85c \ubcc0\ud658 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","4929a112":"* \ubd88\ud589\ud788\ub3c4 \uc0ac\ub9dd\uc790\uac00 \ud6e8\uc52c \ub9ce\uc544 \ubcf4\uc785\ub2c8\ub2e4.\n* \uc804\uccb4 \uc0ac\ub9dd\uc790 \ube44\uc728\uc744 \uc880 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. ","1fbf9d96":"* XGB Step 3","8d451296":"### Task 5.4 - \"Fare\" \ubd84\uc11d ","e5993ddc":"* \uc0dd\uc874\ub960\ub85c \ubd05\ub2c8\ub2e4.","e80d0998":"\ud0c0\uc774\ud0c0\ub2c9 EDA to Prediction\n\n* \ud0c0\uc774\ud0c0\ub2c9 \ucc4c\ub9b0\uc9c0\ub294 \ub098\uc774, \uc131\ubcc4 \ub610\ub294 \uc2b9\uac1d \ud074\ub798\uc2a4\uc640 \uac19\uc740 \ubcc0\uc218\ub97c \uae30\ubc18\uc73c\ub85c \uc8fc\uc5b4\uc9c4 \uc2b9\uac1d\uc758 \uc0dd\uc874 \ub610\ub294 \uc0ac\ub9dd\uc744 \uc608\uce21\ud558\ub294 \uacbd\uc7c1\uc785\ub2c8\ub2e4.\n* \uc55e\uc5d0\uc11c \uc0ac\uc774\ud0b7\ub7f0\uc744 \uacf5\ubd80\ud558\uae30 \uc704\ud574 \uac19\uc740 \uc0d8\ud50c\uc744 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n* \uc0ac\uc774\ud0b7\ub7f0 \uae30\ubc18\uc73c\ub85c \ubd84\uc11d\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \ubd80\uc871\ud558\uc9c0\ub9cc \ucd08\ubcf4\uc790\ub4e4\uc744 \uc704\ud574 \uc794 \uc124\uba85\ub4e4\ub3c4 \ucd5c\ub300\ud55c \ub9ce\uc774 \ub123\uc5b4 \ubcf4\ub824\uace0 \ub178\ub825\ud569\ub2c8\ub2e4.\n\n","c2f3eadc":"* \ubcc4\ub85c \ub9c8\uc74c\uc5d0 \uc548 \ub4e4\uc5b4\uc11c Age Group\uc744 \uc81c\uac00 \ub098\ub204\uc5b4 \ubd05\ub2c8\ub2e4.\n\n* 1\uc0b4 \ubbf8\ub9cc baby -1\n* 1\uc0b4 - 3\uc0b4 Toddler  2\n* 3\uc0b4 \ucd08\uacfc - 11\uc0b4 young kid  - 7\n* 11\uc0b4 \ucd08\uacfc - 15\ubbf8\ub9cc big kid  - 13\n* 15-17 \uc0b4 Boy\/Girl - 16\n* 17\uc774\uc0c1 20\ubbf8\ub9cc Youth - 18\n* 20- 22 Very Young - 21\n* 22- 26 Young man  -24\n* 26 - 30  - 28\n* 30 -32 Active  - 31\n* 32 -34 Manager  - 33\n* 34  - 38 Director  - 36\n* 38 - 52 Mid  - 45\n* 52-79 Old  - 63\n* 78\uc774\uc0c1 Senior  - 80","b3f0226c":"* \uc774\uc81c \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.","53cc24be":"* Fare\ub97c \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uc5b4 \ub193\uaca0\uc2b5\ub2c8\ub2e4.\n* qcut\uc744 \ud65c\uc6a9\ud558\uba74 \uc6d0\ud558\ub294 \uc870\uac01\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4.","4a5dec18":"### Task 5.6 - \"Embarked\" \ubd84\uc11d","ce149a72":"#### \uc5f4 \ud5e4\ub4dc \ubcf4\uae30","3346efef":"### Task 4.3 - \"Name\" \ubd84\uc11d","57589104":"* XGBoost Step 1","345f1d1b":"\ud760...\uacf5\uc9dc\ud45c\ub3c4 \uc788\uc5c8\uad70\uc694","ae921141":"* Survived\ub294 \uc218\uc790\ub85c \uac12\uc744 \uc8fc\uc9c0\ub9cc Categorical Variable\uc778 \uc148\uc785\ub2c8\ub2e4.\n* \uc8fd\ub358\uc9c0 \uc0b4\ub358\uc9c0 \ub458 \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc90d\ub2c8\ub2e4.\n\n* countplot\uc744 \uadf8\ub824 \ubd05\ub2c8\ub2e4.\n* \uc0ac\uc774\uc988\ub294 \uac00\ub85c 10\uc778\uce58 \uc138\ub85c 2\uc778\uce58\n* \uc0dd\uc874 \uc5ec\ubd80 0\uacfc 1\uc758 \uc22b\uc790\ub97c \uc138\uc5b4 \ubcf8 \ud6c4 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub3c4\ub85d \uba85\ub839\uc744 \ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n* pyplot(plt)\uc758 figure\ub77c\ub294 \uba54\uc18c\ub4dc\ub97c \uc368\uc11c \uadf8\ub9bc\ud310\uc758 \ud06c\uae30\ub97c \uc815\ud558\uace0, seaborn\uc758 \uce74\uc6b4\ud2b8\ud50c\ub86f\uc744 \uadf8\ub9ac\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4.\n* ","519f12ba":"## Label Encoding","5c43f889":"#### missing data \ubcf4\uae30\n\n##### \ube60\uc9c4 \ub370\uc774\ud130\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* \uc774\ub294 \uc911\uc694\ud569\ub2c8\ub2e4.\n* \uc608\ub97c \ub4e4\uc5b4 \ub098\uc774\uac00 \ube60\uc838 \uc788\uc73c\uba74 \uc0ac\ub9dd\uc790\uc77c \ud655\ub960\uc774 \ub192\uc744 \uc218\ub3c4 \uc788\uace0 \ub4f1 \ub4f1\n* \ubb34\uc5c7\ubcf4\ub2e4 \ub370\uc774\ud130\uac00 \uc5c6\uc73c\uba74 \ubd84\uc11d\uc744 \ud560 \uc218\uac00 \uc5c6\uaca0\uc9c0\uc694?\n","838c7b46":"* Gender\ub780 \uc5f4\uc744 \ub9cc\ub4e4\uc5b4 \uc5ec\uae30\uc5d0 \uadc0\uc871 \ub0a8, \uc77c\ubc18\ub0a8, \uadc0\uc871\ub140, \uc77c\ubc18\ub140, \ubca0\uc774\ube44, \ub178\uc778\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n* \uc77c\ub2e8 \ud074\ub798\uc2a4\ub85c \ub0a8\ub140\ub97c \ub098\ub208 \ub2e4\uc74c \uc774\ub4e4\uc744 \ub2e4\uc2dc \uc7ac\ubd84\ub958 \ud569\ub2c8\ub2e4. ","de7f8b3d":"* \uc774\ub984\uc740 \uac70\uc758 \ubaa8\ub450 \ub2e4\ub97c \uac00\ub2a5\uc131\uc774 \ud07d\ub2c8\ub2e4. Family Name, First Name, Middle Name and even Dr. Capt, master and so on \ubaa8\ub450 \uac10\uc548\ud558\uba74...\n* \ubd84\ub958\ub97c \ud55c \ubc88 \ud574 \ubd05\ub2c8\ub2e4.\n* \ub9ac\uc2a4\ud2b8\ub97c \ud55c \ubc88 \uc8fc \uc6b1 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","e2d100b3":"* \uc704\uc758 \uac83\uc744 \uc544\ub798\uc640 \uac19\uc774 \ud568\uc218\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. (\ubb3c\ub860 \uc790\uc8fc \uc4f0\uc774\uc9c0\ub294 \uc54a\uaca0\uc9c0\ub9cc \uc5f0\uc2b5\uc774\ub2c8)","b0600c25":"### Task 4.1 - \"Surived\" \ubd84\uc11d\n\n* \ud55c \uc5f4\uc529 \uac80\ud1a0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n* Survived -  ** Key: (0 - Not Survived, 1- Survived) **","d882aef3":"* \uc774\uc81c \ud558\ub098\uc529 \ud6d3\uc5b4 \ubcf4\uba70 \uc791\uc5c5\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \uc6b0\ub9ac\uc758 \ubaa9\ud45c\ub294 train\uc5d0\uc11c \ubaa8\ub378\uc744 \ubf51\uc544\uc11c test\uc5d0\uc11c \ub204\uac00 \uc0b4\uc544 \ub0a8\uc558\uc744 \ud655\ub960\uc774 \ud070\uac00\ub97c \ubf51\uc544 \ub0b4\ub294 \uac83\uc785\ub2c8\ub2e4.","2fb4a18e":"* \ud074\ub798\uc2dc\ud30c\uc774\uc5b4\ub294 \ud2b9\uc815 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\uc5d0 (\ubc94\uc8fc) \ud074\ub798\uc2a4 \ub808\uc774\ube14\uc744 \ud560\ub2f9\ud558\ub294 \ub370 \uc0ac\uc6a9\ub418\ub294 \uc774\uc0b0 \uac12 \ud568\uc218\uc785\ub2c8\ub2e4.\n* Random Forest -\uacb0\uc815 \ud2b8\ub9ac(decision tree)\ub294 \ub9d0\uadf8\ub300\ub85c \uacb0\uc815\uc744 \ub0b4\ub9ac\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud2b8\ub9ac\ub85c, \uacb0\uc815 \uacfc\uc815\uc744 \uac04\ub2e8\ud55c \ubb38\uc81c\ub4e4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uacc4\uce35 \uad6c\uc870\ub85c \ub098\ub208\ub2e4. \uac04\ub2e8\ud55c \ubb38\uc81c\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\uac1c\ubcc0\uc218(\uc608: \ubaa8\ub4e0 \ub178\ub4dc\uc758 \ud14c\uc2a4\ud2b8 \ub9e4\uac1c\ubcc0\uc218, \uc885\ub2e8 \ub178\ub4dc\uc5d0\uc11c \ub9e4\uac1c\ubcc0\uc218 \ub4f1)\ub97c \uc0ac\uc6a9\uc790\uac00 \uc9c1\uc811 \uc124\uc815\ud560 \uc218 \uc788\uc9c0\ub9cc, \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ubb38\uc81c\uc758 \uacbd\uc6b0 \ud559\uc2b5 \ub370\uc774\ud130\ub85c\ubd80\ud130 \ud2b8\ub9ac \uad6c\uc870\uc640 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubaa8\ub450 \uc790\ub3d9\uc73c\ub85c \ud559\uc2b5\ud55c\ub2e4.\n\ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\uc758 \uac00\uc7a5 \ud070 \ud2b9\uc9d5\uc740 \ub79c\ub364\uc131(randomness)\uc5d0 \uc758\ud574 \ud2b8\ub9ac\ub4e4\uc774 \uc11c\ub85c \uc870\uae08\uc529 \ub2e4\ub978 \ud2b9\uc131\uc744 \uac16\ub294\ub2e4\ub294 \uc810\uc774\ub2e4. \uc774 \ud2b9\uc131\uc740 \uac01 \ud2b8\ub9ac\ub4e4\uc758 \uc608\uce21(prediction)\ub4e4\uc774 \ube44\uc0c1\uad00\ud654(decorrelation) \ub418\uac8c\ud558\uba70, \uacb0\uacfc\uc801\uc73c\ub85c \uc77c\ubc18\ud654(generalization) \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4. \ub610\ud55c, \ub79c\ub364\ud654(randomization)\ub294 \ud3ec\ub808\uc2a4\ud2b8\uac00 \ub178\uc774\uc988\uac00 \ud3ec\ud568\ub41c \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub3c4 \uac15\uc778\ud558\uac8c \ub9cc\ub4e4\uc5b4 \uc900\ub2e4. \ub79c\ub364\ud654\ub294 \uac01 \ud2b8\ub9ac\ub4e4\uc758 \ud6c8\ub828 \uacfc\uc815\uc5d0\uc11c \uc9c4\ud589\ub418\uba70, \ub79c\ub364 \ud559\uc2b5 \ub370\uc774\ud130 \ucd94\ucd9c \ubc29\ubc95\uc744 \uc774\uc6a9\ud55c \uc559\uc0c1\ube14 \ud559\uc2b5\ubc95\uc778 \ubc30\uae45(bagging)\uacfc \ub79c\ub364 \ub178\ub4dc \ucd5c\uc801\ud654(randomized node optimization)\uac00 \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4. \uc774 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc740 \uc11c\ub85c \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ub418\uc5b4 \ub79c\ub364\ud654 \ud2b9\uc131\uc744 \ub354\uc6b1 \uc99d\uc9c4 \uc2dc\ud0ac \uc218 \uc788\ub2e4.\n* randome_state =1\ub85c \ud558\ub294 \uac83\uc740 \uacc4\uc18d \uac19\uc740 \uacb0\uacfc\ub85c \ub098\uc624\uac8c\/ 0\uc73c\ub85c \ud558\uba74 \ub9e4\ubc88 \ub2ec\ub77c\uc9d0\n*  K-neighbors\ub294 \uc27d\uac8c \ud45c\ud604\ud558\uba74 K\uac1c\uc758 \uc774\uc6c3\uc744 \ucc3e\uc2b5\ub2c8\ub2e4.\uc774\uc6c3 \uc810\uc758 \uc778\uc811 \uc9c0\ud45c\uc640 \uac70\ub9ac\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n* Logistic Regression - \uc885\uc18d \ubcc0\uc218\uc640 \ub3c5\ub9bd \ubcc0\uc218 \uc0ac\uc774\uc758 \uad00\uacc4\ub294 \ubbf8\ub798 \uc608\uce21 \ubaa8\ub378\uc5d0 \uc0ac\uc6a9\ub420 \uad6c\uccb4\uc801\uc778 \ud568\uc218\ub85c \ud45c\ud604\ub418\uba70 \ub3c5\ub9bd\uc801\uc778 \ubcc0\uc218\uc758 \uc120\ud615 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uac74\uc758 \uac00\ub2a5\uc131\uc744 \uc608\uce21\ud558\uae30 \uc704\ud574 \ud1b5\uacc4 \uae30\ubc95\uc785\ub2c8\ub2e4. \uc989 \ub3d9\uc804\uc758 \uc55e\ub4b7\uba74, \ub418\ub0d0 \uc548 \ub418\ub294\ub0d0 \uc774\ub7f0 \uc885\ub958\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ud68c\uadc0\ub780 \ub9d0\uc774 \uc0dd\uacbd\ud558\uae30 \ub54c\ubb38\uc5d0 \uac04\ub2e8\ud788 \ub9d0\uc500 \ub4dc\ub9ac\uba74 \uc608\ub97c \ub4e4\uc5b4 \ud0c0\uc774\ud0c0\ub2c9\uc5d0\uc11c 1\ub4f1\uc11d \uc5ec\uc131\ubd80\ud130 \uad6c\uba85\ubcf4\ud2b8\uc5d0 \uba3c\uc800 \ud0dc\uc6e0\ub2e4\uba74 \ub8f0\uc5d0 \ub530\ub77c 1\ub4f1\uc11d \uc5ec\uc131\uc740 \ubaa8\ub450 \uc0b4\uc544\uc57c \ud558\ub294\ub370, \ud604\uc2e4 \uc138\uacc4\uc5d0\uc11c\ub294 \uaf2d \ucf00\uc774\ud2b8\uc708\uc2ac\ub81b\ucc98\ub7fc \ub514\uce74\ud504\ub9ac\uc624 \ub55c\uc5d0 \ub3c4\ub85c \ubc30\ub85c \ub3cc\uc544\uc624\uac70\ub098 \uc544\ub2c8\uba74 \uc2a4\uc2a4\ub85c \ud76c\uc0dd\uc744 \ud0dd\ud558\ub294 \ubd84\ub4e4 \uac19\uc740 \ud3c9\uade0\uac12\uc744 \ubc97\uc5b4\ub098\ub294 \uc77c\ub4e4\uc774 \uc0dd\uae30\uae30 \ub54c\ubb38\uc5d0 \ubcf8\ub798 \ubaa8\ub378\uacfc\uc758 \ucc28\uc774\uac00 \ubc1c\uc0dd\ud558\uac8c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ucc28\ub4e4\uc774 \ud3c9\uade0\uc801\uc778 \uc218\uce58\ub85c \ub3cc\uc544\uc624\uac8c \ub9cc\ub4dc\ub294 \uac83\uc774 \ud68c\uadc0 \ubaa8\ub378\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \uc124\uba85\uc774 \ubd80\uc871\ud558\ub098 \ucd08\ubcf4\uc790\ub4e4\uc740 \uadf8 \uc815\ub3c4\ub9cc \uc774\ud574\ud558\uc2dc\uace0 \ub098\uc911\uc5d0 \uc880 \ub354 \uc774\ud574\ud558\uc2dc\ub294 \uac83\uc73c\ub85c \ud558\uace0 \ub118\uc5b4 \uac11\ub2c8\ub2e4.\n* XGB\ub294 \uc758\uc0ac\uacb0\uc815 \ud2b8\ub9ac\ub97c \ub9ce\uc774 \ub9cc\ub4e4\uc5b4 \uc774\uc758 \uc608\uce21\uac12\uc744 \ub354\ud574\uac00\uba70 \uacb0\uc815\ud558\ub294\ub370 \uc774\ub97c \uc704\ud574 \ub610 \uc794 \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\ub97c \uc124\uc815\ud558\uac8c \ud558\uc5ec \uc880 \ub354 \uc131\ub2a5\uc744 \ub192\uc774\ub294 \ubd80\uc2a4\ud305 \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4.\n* \ucc38\uace0\ub85c \ubd80\uc2a4\ud305\uc740 \ubd84\ub958\ubb38\uc81c\uc5d0\uc11c \uc798 \ubabb \ubd84\ub958\ub41c \uac83\uc744 \uc7ac\ubd84\ub958\ud558\ub294 \uac83\uc744 \ubc18\ubcf5\ud558\uc5ec \uc608\uce21\ubaa8\ub378\uc744 \uac15\ud654 \uc2dc\ud0a4\ub294 \uac83\uc785\ub2c8\ub2e4. \n* \ub610\ud55c \ubc30\uae45\uc774\ub780 \uac83\uc740 \uc5ec\ub7ec\ubc88\uc758 \ubcf5\uc6d0 \uc0d8\ud50c\ub9c1\uc744 \ud1b5\ud574 \uc608\uce21 \ubaa8\ub378\uc758 \ubd84\uc0b0\uc744 \uc904\uc5ec \ubaa8\ub378\uc744 \uac15\ud654\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n* \ub610\ud55c \ubcf4\ud305\uc774\ub780 \ub9d0\uc744 \ub9ce\uc774 \ub4e4\uc73c\uc2e4\ud150\ub370 \ubcf4\ud305\uc740 \ud558\ub4dc\ubcf4\ud305\uacfc \uc18c\ud504\ud2b8\ubcf4\ud305\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ub4dc\ubcf4\ud305\uc740 \ub9d0 \uadf8\ub300\ub85c \ud22c\ud45c\ud55c\ub370\ub85c \uacb0\uacfc\ub97c \ub0b4\ub294 \uac83\uc774\uace0, \uc18c\ud504\ud2b8\ubcf4\ud305\uc740 \uac00\uc911\uce58\ub97c \uc870\uc808\ud558\uc5ec \uc720\uc5f0\ud558\uac8c \ud22c\ud45c\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4.\n* GradientBoosting - \ub79c\ub364 \ud3ec\ub9ac\uc2a4\ud2b8\uac00 \ub9ce\uc740 \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\uc11c \ud574\uacb0\ud558\ub294 \ubc29\ubc95\uc744 \ud0dd\ud55c\ub2e4\uba74 GradientBoosting\uc740 \uc55e\uc5d0 \ud2b8\ub9ac\uc758 \uc624\ucc28\ub97c \uc904\uc5ec\uac00\uba70 \ubcf4\uc644\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud2b8\ub9ac\ub97c \ub9cc\ub4e4\uc5b4 \uac00\ub294 \ubc29\uc2dd\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* SV\u3161 - Support Vector machine\uc740 \ubd84\ub958 \ud560 \ub54c \ubb34\uc6b0 \uc790\ub974\ub4ef\uc774 \uc790\ub974\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ub9c8\uc9c4\uc758 \uacbd\uacc4\uc120\uc744 \uc8fc\uc5b4 \uc81c\ud55c \uc870\uac74\uc744 \ucd94\uac00\ud55c \uac83\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \ub0a8\ubd81\ud55c\uc758 \uba85\ud655\ud55c \uacbd\uacc4\uc120 \ub300\uc2e0 \ube44\ubb34\uc7a5 \uc9c0\ub300 \uc0dd\uac01\ud558\uc2dc\uba74 \uc5b4\ub5a8\uc9c0....\n* ExtraTrees - \ub79c\ub364\ud3ec\ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ud2b8\ub9ac\ub97c \ubb34\uc791\uc704\ub85c \ubd84\ud560\ud558\uc5ec \ub354 \ub9ce\uc740 \ud2b8\ub9ac\ub97c \ub9cc\ub4e0 \ubc29\uc2dd\uc774\ub77c \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* adaboost \uc54c\uace0\ub9ac\uc998\uc740 Adaptive Boost\uc758 \uc900\ub9d0\ub85c \ub370\uc774\ud130\ub97c \ub300\ucda9 \ubd84\ub958\ud574\uc11c \ub3cc\ub9b0 \ud6c4 \uc5ec\uae30\uc11c \ubd84\ub958\ud558\uc9c0 \ubabb \ud558\ub294 \uc624\ub958\ub4e4\uc5d0 \uac00\uc911\uce58\ub97c \uc8fc\uc5b4 \uc815\ud655\ub3c4\ub97c \ub192\uc774\ub294 \uac83\uc744 \uacc4\uc18d \ubc18\ubcf5\ud558\uc5ec \uc2e0\ub8b0\ub3c4\ub97c \ub192\uc778\ub2e4\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n* Gaussian Naive Bayes \uc54c\uace0\ub9ac\uc998\uc740 \ud2b9\uc218\ud55c \uc720\ud615\uc758 NB \uc54c\uace0\ub9ac\uc998\uc785\ub2c8\ub2e4. \uae30\ub2a5\uc5d0 \uc5f0\uc18d \uac12\uc774\uc788\uc744 \ub54c \ud2b9\ud788 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c \ubaa8\ub4e0 \uae30\ub2a5\uc774 \uac00\uc6b0\uc2a4 \ubd84\ud3ec, \uc989 \uc815\uaddc \ubd84\ud3ec\ub97c \ub530\ub974\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.Naive Bayes\ub294 \ud2b9\uc131\ub4e4 \uc0ac\uc774\uc758 \ub3c5\ub9bd\uc744 \uac00\uc815\ud558\ub294 \ubca0\uc774\uc988 \uc815\ub9ac\ub97c \uc801\uc6a9\ud55c \ud655\ub960 \ubd84\ub958 \ubc29\ubc95\uc774\ub2e4. \ubca0\uc774\uc988\uc815\ub9ac - \uc870\uac74\ubd80 \ud655\ub960\n* Gaussian process\ub294 \ud568\uc218\uc758 \ud655\ub960\uc801 \ubd84\ud3ec\ub97c modeling\ud558\ub294\ub370 \uc4f0\uc774\uba70.\uac01\uc790\uc758 joint Guassian distribution\uc744 \uac00\uc9c4 Gaussian \ub79c\ub364 \ubcc0\uc218\uc758 \uc9d1\ud569\uc774\ub2e4. \uc880 \ub354 \uc27d\uac8c \ub9d0\ud560 \uc218 \uc788\ub294 \uac83\uc744 \uc0dd\uac01\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n* \ud06c\ub85c\uc2a4 \ubc38\ub9ac\ub370\uc774\uc158\uc740 \uacb0\uacfc \uac12\uc744 \uc774\ub9ac \ub3cc\ub824\ubcf4\uace0 \uc800\ub9ac \ub3cc\ub824 \ubcf4\uace0\ud574\uc11c \ud55c \uba74\uc5d0\uc11c \ub098\uc628 \uacb0\uacfc \uac12\uc774 \uc544\ub2c8\ub77c \ub2e4\uc591\ud55c \uacbd\uc6b0\ub97c \uacbd\ud5d8\ud558\uac8c \ud55c \uacb0\uacfc \uac12\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uacfc\uc815\uc774\ub77c\uace0 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n\n","d1d08d6b":"## Task 7 \uc0c8\ub85c\uc6b4 \ud615\ud0dc\ub85c \ubc14\uafb8\uae30","bb2159ca":"### Task 5.3 - \"Ticket\"\ubd84\uc11d","50091fcc":"* * Fare\ub97c \uadf8\ub8f9\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Fgroup\uc774\ub77c\uace0 \uc774\ub984 \uc9d3\uaca0\uc2b5\ub2c8\ub2e4.\n\n7.125\uc774\ud558 -> 5.0\n\n7.9 \uc774\ud558 --> 7.5\n\n8.03 \uc774\ud558  --> 8.0\n\n10.5 \ubbf8\ub9cc --> 9.5\n\n23 \ubbf8\ub9cc --> 16.0\n\n27.8 \uc774\ud558 --> 25.5\n\n51 \uc774\ud558 --> 38\n\n73.5 \uc774\ud558 --> 62\n\n73.5 \ucd08\uacfc --> 100\n","3084dff4":"* \uc704\uc5d0 \ub9cc\ub4e0 \ud568\uc218\ub97c \ud55c \ubc88 \uc368 \uba39\uc5b4 \ubcfc\uae4c\uc694?","4503827d":"* \uc774\uc81c \ubb38\uc790\ub85c \ub41c \ud56d\ubaa9\ub4e4 \uc218\uce58\ub85c \ubc14\uafb8\uc5b4 \ubd05\ub2c8\ub2e4.","bf14c67a":"* Gaussian Naive Bayes -  \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc774 \uc548 \ub418\ub294 \ubaa8\ub378\uc774\ub2c8 \uae30\uc874 \uc810\uc218 \uadf8\ub300\ub85c","2d96e2ed":"* Pclass\ub294 \uac12\uc774 \uc22b\uc790\uc774\ub098 \uc11c\uc5f4\uc774 \uc815\ud574\uc9c4 Ordinal Feature\uc774\ub2e4. \n\nKey:1 = 1st, 2= 2nd, 3 = 3rd\n\n* \uac01 \ud074\ub798\uc2a4 \ub2f9 \uc0dd\uc874\uc790\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","b88775df":"* \ud30c\uc77c \uac01 \uc5f4\uc758 \uc0c1\uad00 \uad00\uacc4\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","7befc82e":"## Task 4 -  Exploratory Data Analysis","c60d3267":"* \uc774\ub984\uc740 \uc5b8\ub73b \ubcf4\uc544\uc11c \uac10\uc774 \uc548 \uc635\ub2c8\ub2e4. \uc911\uac04\uc5d0 \uc788\ub294 Mr. \uac19\uc740 \ud638\uce6d\uc744 \ubcfc\uae4c\uc694. \n* ['Initial']\uc774\ub780 \uc5f4\uc744 \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc5ec\uae30\uc5d0 Name\uc5d0\uc11c \ucd94\ucd9c\ud55c Regular Expression\uc744 \ub123\uc2b5\ub2c8\ub2e4.\n* \uc544\ub798\uc5d0\uc11c str.extract('([A-Za-z]+)\\.')\ubd80\ubd84\uc740 str\uc5d0\uc11c \ub300\ubb38\uc790 A~Z, \uc18c\ubb38\uc790 a~z \uc911\uc5d0 \\. \uba85\ub839\uc744 \ud1b5\ud574 .\uc73c\ub85c \ub05d\ub098\ub294 \ubd80\ubd84\uc744 \ucd94\ucd9c\ud574 \ub0b4\ub294 \uac83\uc785\ub2c8\ub2e4.  \n* ('^([A-Za-z]+)')\uc73c\ub85c \ud558\uba74 \ucc98\uc74c\uc5d0 \ub098\uc624\ub294 \ubb38\uc790 \ub369\uc5b4\ub9ac\uac00 \ub420 \uac83\uc774\uace0 +\ub97c \ube7c\uba74 \uccab \uc2a4\ud3a0\ub9c1 \ud55c\uce90\ub9ad\ud130\ub9cc \ucd94\ucd9c\ud569\ub2c8\ub2e4. ","19f7cefa":"* Situation","6c2ae816":"* XGB Step 4","fef4d576":"* Bagging Classifier","a0d1ea4e":"* Gradient Boosting Classifier","9f6f218e":"* \ud3ec\ud2b8 C\uc758 \uc0dd\uc874 \uac00\ub2a5\uc131\uc740 0.55 \uc815\ub3c4\uc774\uba70 S\ub294 \uac00\uc7a5 \ub0ae\uc2b5\ub2c8\ub2e4.","0219cc8e":"* \uac00\uc7a5 \ube44\uc2b7\ud55c \ubc88\ud638\ub97c \ucc3e\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","012512b7":"* StandardScaler\uc758 \uae30\ubcf8 \uac1c\ub150\uc740 \ubd84\ud3ec\uac00 \ud3c9\uade0\uac12 0\uc774\uace0 \ud45c\uc900 \ud3b8\ucc28\uac00 1\uc774\ub418\ub3c4\ub85d \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uae30\ub974\uace0 \uc2a4\ucf00\uc77c\ub7ec\ub97c \uc4f0\uc9c0 \uc54a\uc73c\uba74 \uc544\ub798\uc5d0\uc11c \uc54c\uace0\ub9ac\uc998\uc744 \uc4f8 \ub54c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4. ","17e6f597":"* \uc2b9\uc120 \uc7a5\uc18c \ubcc4\ub85c \uc0dd\uc874 \ud655\ub960","37095b7a":"### Task 4.2 - \"Pclass\" \ubd84\uc11d","85914a8f":"* SVC","2a82f0af":"* \ub098\uc911\uc5d0 \uc624\ube0c\uc81d\ud2b8\ub85c \ub41c \uac83\uc740 \ucef4\ud4e8\ud130\uac00 \ubd84\uc11d\ud558\uae30 \uc88b\uac8c \uc22b\uc790\ub85c \ubc14\uafb8\uc5b4 \uc8fc\uc5b4\uc57c \ud560 \uac83\uc785\ub2c8\ub2e4."}}