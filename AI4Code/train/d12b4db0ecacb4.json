{"cell_type":{"02c2133a":"code","0992808a":"code","efc5e64b":"code","55ed4f3e":"code","b1152781":"code","7ec8511e":"code","3374b60f":"code","1b91d7ae":"code","81863623":"code","f95dcc4d":"code","715afe1c":"code","fc4e3ba2":"code","4912856c":"code","fc8774e8":"code","667a305d":"code","69c3306f":"code","d6b6ee01":"code","3d1f78b3":"code","cc7c1373":"code","d0622435":"code","ee904862":"code","66bbe155":"code","3373eefc":"code","d3d1a09f":"code","81446117":"code","16ee1b64":"code","0bd3eecb":"code","ce37617b":"code","3bbf9e88":"code","d69fb7fa":"code","f59eef2a":"code","b6279571":"code","48bea132":"code","924a2f85":"code","0eca7cde":"code","826e35fe":"code","8aa3357b":"code","34b22d26":"code","6779c3db":"code","9b2b9834":"code","85bca9d5":"code","011395a5":"code","5f368855":"code","a0b8a03d":"code","0768f160":"code","92692e1f":"code","975da491":"code","14286763":"code","dcff2ad5":"code","8ac1469d":"code","86acab26":"code","2f230263":"code","5ce69c76":"code","850175a9":"code","2b76c835":"code","dd207979":"code","eea6b728":"code","fbc7bd73":"code","f03a89c5":"code","f7b82b64":"code","3f58bb8e":"code","684cc9d4":"code","7eb26bdb":"code","082810f8":"code","cdef6185":"code","479e324f":"code","76da4a48":"code","b279e0bc":"code","92a30eaa":"code","f8c89774":"code","d02023e3":"code","4c93b42b":"code","68e02aa5":"code","30175a85":"code","c5d8fdad":"code","6283c4bd":"code","4c91abc5":"code","9e60ed5f":"code","4824ae14":"code","f3d77758":"code","875c1a0d":"code","62f9d5a4":"code","74d12800":"code","b83e5d16":"code","7e6c7a96":"code","ebbdba72":"code","9233f1df":"code","3a7bb631":"code","8a48fab1":"code","a7ee5c90":"code","3ad189f4":"code","4159cf3d":"code","85bb3f14":"code","44e283f9":"code","dc92ace2":"code","611b8df3":"code","44650770":"code","922e1cd1":"code","ac15d336":"code","6eab262d":"code","77dd4f47":"code","8a4f058d":"code","f1ed9d08":"code","4a392eec":"code","2fa8e761":"code","19b4bdfe":"code","e578b96e":"code","695f558b":"code","c4bfeb79":"code","b1b7ef8b":"code","0d180b5c":"code","124e0cbe":"code","ce573b7f":"code","924c7c0c":"code","8802d3eb":"code","a3659894":"code","87d674b3":"code","6f83e016":"code","048a2fe1":"code","ecf474f8":"code","1def7623":"code","3b812f88":"code","d45f74b5":"code","012a0352":"code","0a37e20f":"code","d6daa0d4":"code","2db1830a":"code","807e1c96":"markdown","7311e8c2":"markdown","ab28045d":"markdown","c8421c36":"markdown","cf3d6d0c":"markdown","c83b7a5b":"markdown","b30f2eed":"markdown","288fb01c":"markdown","086f994b":"markdown","1b00fbd5":"markdown","add840a7":"markdown","9bd6e0cc":"markdown","4821174a":"markdown","cf2b74cf":"markdown","34296b60":"markdown","243a52fa":"markdown","8b7f8bd2":"markdown","d6c7a0e5":"markdown","97125fa5":"markdown","049a9f63":"markdown","54fedbca":"markdown","599bec40":"markdown","50579f16":"markdown","b1956593":"markdown","d031b18c":"markdown","9b5f3f03":"markdown","fb078784":"markdown","5e9ef553":"markdown","4c9f2ab9":"markdown","36d1a8c1":"markdown","c7530d87":"markdown","30e042a7":"markdown","4ae19005":"markdown","6f9913f9":"markdown","11101129":"markdown","b697ef5b":"markdown","400ad95f":"markdown","cb8d0346":"markdown","b0261087":"markdown","c4f1d1e7":"markdown","ecd55f8e":"markdown","9f3ebbaa":"markdown","c7fdcfc0":"markdown","757e3cce":"markdown","43b3a44c":"markdown","bac9cbc8":"markdown","26b92fa4":"markdown","00c71d21":"markdown","47c87b23":"markdown","060b08f7":"markdown","91e2fd21":"markdown","3b8ea9bb":"markdown","1e12aa12":"markdown","7bd44162":"markdown","d7b6900a":"markdown","155f5a0d":"markdown","ad580fac":"markdown","2c957e5d":"markdown","361d58f9":"markdown","127dfecc":"markdown","63db8f01":"markdown","2cacf3f7":"markdown","1b8ca12b":"markdown","aa519950":"markdown","5b5b7beb":"markdown","9abca65b":"markdown","a83bc69b":"markdown","a9427f79":"markdown","1c1c47b4":"markdown","6a6e3202":"markdown","4f70e07e":"markdown","4501c76c":"markdown","ca172180":"markdown","989335aa":"markdown","58f47bcf":"markdown","537424d2":"markdown","68e76705":"markdown","cc181733":"markdown","91d9b66d":"markdown","bd91875e":"markdown"},"source":{"02c2133a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score,roc_curve,classification_report,confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n# Import stats from scipy\nfrom scipy import stats","0992808a":"df = pd.read_csv(\"..\/input\/insurance-data\/insurance_part2_data (2).csv\")","efc5e64b":"df.head()","55ed4f3e":"df.info()","b1152781":"# Are there any missing values ?\ndf.isnull().sum()","7ec8511e":"df.describe().T","3374b60f":"## Intital descriptive analysis of the data\n\ndf.describe(percentiles=[.25,0.50,0.75,0.90]).T","1b91d7ae":"df.describe(include='all').T","81863623":"df.head(10)","f95dcc4d":"df.tail(10)","715afe1c":"### data dimensions\n\ndf.shape","fc4e3ba2":"for column in df[['Agency_Code', 'Type', 'Claimed', 'Channel', \n                  'Product Name', 'Destination']]:\n    print(column.upper(),': ',df[column].nunique())\n    print(df[column].value_counts().sort_values())\n    print('\\n')","4912856c":"# Are there any duplicates ?\ndups = df.duplicated()\nprint('Number of duplicate rows = %d' % (dups.sum()))\ndf[dups]","fc8774e8":"print('Range of values: ', df['Age'].max()-df['Age'].min())","667a305d":"#Central values \nprint('Minimum Age: ', df['Age'].min())\nprint('Maximum Age: ',df['Age'].max())\nprint('Mean value: ', df['Age'].mean())\nprint('Median value: ',df['Age'].median())\nprint('Standard deviation: ', df['Age'].std())\nprint('Null values: ',df['Age'].isnull().any())","69c3306f":"#Quartiles\n\nQ1=df['Age'].quantile(q=0.25)\nQ3=df['Age'].quantile(q=0.75)\nprint('spending - 1st Quartile (Q1) is: ', Q1)\nprint('spending - 3st Quartile (Q3) is: ', Q3)\nprint('Interquartile range (IQR) of Age is ', stats.iqr(df['Age']))","d6b6ee01":"#Outlier detection from Interquartile range (IQR) in original data\n\n# IQR=Q3-Q1\n#lower 1.5*IQR whisker i.e Q1-1.5*IQR\n#upper 1.5*IQR whisker i.e Q3+1.5*IQR\nL_outliers=Q1-1.5*(Q3-Q1)\nU_outliers=Q3+1.5*(Q3-Q1)\nprint('Lower outliers in Age: ', L_outliers)\nprint('Upper outliers in Age: ', U_outliers)","3d1f78b3":"print('Number of outliers in Age upper : ', df[df['Age']>57.0]['Age'].count())\nprint('Number of outliers in Age lower : ', df[df['Age']<17.0]['Age'].count())\nprint('% of Outlier in Age upper: ',round(df[df['Age']>57.0]['Age'].count()*100\/len(df)), '%')\nprint('% of Outlier in Age lower: ',round(df[df['Age']<17.0]['Age'].count()*100\/len(df)), '%')","cc7c1373":"plt.title('Age')\nsns.boxplot(df['Age'],orient='horizondal',color='purple')","d0622435":"fig, (ax2,ax3)=plt.subplots(1,2,figsize=(13,5))\n\n#distplot\nsns.distplot(df['Age'],ax=ax2)\nax2.set_xlabel('Age', fontsize=15)\nax2.tick_params(labelsize=15)\n\n#histogram\nax3.hist(df['Age'])\nax3.set_xlabel('Age', fontsize=15)\nax3.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.5)\nplt.tight_layout()","ee904862":"print('Range of values: ', df['Commision'].max()-df['Commision'].min())","66bbe155":"#Central values \nprint('Minimum Commision: ', df['Commision'].min())\nprint('Maximum Commision: ',df['Commision'].max())\nprint('Mean value: ', df['Commision'].mean())\nprint('Median value: ',df['Commision'].median())\nprint('Standard deviation: ', df['Commision'].std())\nprint('Null values: ',df['Commision'].isnull().any())","3373eefc":"#Quartiles\n\nQ1=df['Commision'].quantile(q=0.25)\nQ3=df['Commision'].quantile(q=0.75)\nprint('Commision - 1st Quartile (Q1) is: ', Q1)\nprint('Commision - 3st Quartile (Q3) is: ', Q3)\nprint('Interquartile range (IQR) of Commision is ', stats.iqr(df['Commision']))","d3d1a09f":"#Outlier detection from Interquartile range (IQR) in original data\n\n# IQR=Q3-Q1\n#lower 1.5*IQR whisker i.e Q1-1.5*IQR\n#upper 1.5*IQR whisker i.e Q3+1.5*IQR\nL_outliers=Q1-1.5*(Q3-Q1)\nU_outliers=Q3+1.5*(Q3-Q1)\nprint('Lower outliers in Commision: ', L_outliers)\nprint('Upper outliers in Commision: ', U_outliers)","81446117":"print('Number of outliers in Commision upper : ', df[df['Commision']>43.0875]['Commision'].count())\nprint('Number of outliers in Commision lower : ', df[df['Commision']<-25.8525]['Commision'].count())\nprint('% of Outlier in Commision upper: ',round(df[df['Commision']>43.0875]['Commision'].count()*100\/len(df)), '%')\nprint('% of Outlier in Commision lower: ',round(df[df['Commision']<-25.8525]['Commision'].count()*100\/len(df)), '%')","16ee1b64":"plt.title('Commision')\nsns.boxplot(df['Commision'],orient='horizondal',color='purple')","0bd3eecb":"fig, (ax2,ax3)=plt.subplots(1,2,figsize=(13,5))\n\n#distplot\nsns.distplot(df['Commision'],ax=ax2)\nax2.set_xlabel('Commision', fontsize=15)\nax2.tick_params(labelsize=15)\n\n#histogram\nax3.hist(df['Commision'])\nax3.set_xlabel('Commision', fontsize=15)\nax3.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.5)\nplt.tight_layout()","ce37617b":"print('Range of values: ', df['Duration'].max()-df['Duration'].min())","3bbf9e88":"#Central values \nprint('Minimum Duration: ', df['Duration'].min())\nprint('Maximum Duration: ',df['Duration'].max())\nprint('Mean value: ', df['Duration'].mean())\nprint('Median value: ',df['Duration'].median())\nprint('Standard deviation: ', df['Duration'].std())\nprint('Null values: ',df['Duration'].isnull().any())","d69fb7fa":"#Quartiles\n\nQ1=df['Duration'].quantile(q=0.25)\nQ3=df['Duration'].quantile(q=0.75)\nprint('Duration - 1st Quartile (Q1) is: ', Q1)\nprint('Duration - 3st Quartile (Q3) is: ', Q3)\nprint('Interquartile range (IQR) of Duration is ', stats.iqr(df['Duration']))","f59eef2a":"#Outlier detection from Interquartile range (IQR) in original data\n\n# IQR=Q3-Q1\n#lower 1.5*IQR whisker i.e Q1-1.5*IQR\n#upper 1.5*IQR whisker i.e Q3+1.5*IQR\nL_outliers=Q1-1.5*(Q3-Q1)\nU_outliers=Q3+1.5*(Q3-Q1)\nprint('Lower outliers in Duration: ', L_outliers)\nprint('Upper outliers in Duration: ', U_outliers)","b6279571":"print('Number of outliers in Duration upper : ', df[df['Duration']>141.0]['Duration'].count())\nprint('Number of outliers in Duration lower : ', df[df['Duration']<-67.0]['Duration'].count())\nprint('% of Outlier in Duration upper: ',round(df[df['Duration']>141.0]['Duration'].count()*100\/len(df)), '%')\nprint('% of Outlier in Duration lower: ',round(df[df['Duration']<-67.0]['Duration'].count()*100\/len(df)), '%')","48bea132":"plt.title('Duration')\nsns.boxplot(df['Duration'],orient='horizondal',color='purple')","924a2f85":"fig, (ax2,ax3)=plt.subplots(1,2,figsize=(13,5))\n\n#distplot\nsns.distplot(df['Duration'],ax=ax2)\nax2.set_xlabel('Duration', fontsize=15)\nax2.tick_params(labelsize=15)\n\n#histogram\nax3.hist(df['Duration'])\nax3.set_xlabel('Duration', fontsize=15)\nax3.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.5)\nplt.tight_layout()","0eca7cde":"print('Range of values: ', df['Sales'].max()-df['Sales'].min())","826e35fe":"#Central values \nprint('Minimum Sales: ', df['Sales'].min())\nprint('Maximum Sales: ',df['Sales'].max())\nprint('Mean value: ', df['Sales'].mean())\nprint('Median value: ',df['Sales'].median())\nprint('Standard deviation: ', df['Sales'].std())\nprint('Null values: ',df['Sales'].isnull().any())","8aa3357b":"#Quartiles\n\nQ1=df['Sales'].quantile(q=0.25)\nQ3=df['Sales'].quantile(q=0.75)\nprint('Sales - 1st Quartile (Q1) is: ', Q1)\nprint('Sales - 3st Quartile (Q3) is: ', Q3)\nprint('Interquartile range (IQR) of Sales is ', stats.iqr(df['Sales']))","34b22d26":"#Outlier detection from Interquartile range (IQR) in original data\n\n# IQR=Q3-Q1\n#lower 1.5*IQR whisker i.e Q1-1.5*IQR\n#upper 1.5*IQR whisker i.e Q3+1.5*IQR\nL_outliers=Q1-1.5*(Q3-Q1)\nU_outliers=Q3+1.5*(Q3-Q1)\nprint('Lower outliers in Sales: ', L_outliers)\nprint('Upper outliers in Sales: ', U_outliers)","6779c3db":"print('Number of outliers in Sales upper : ', df[df['Sales']>142.5]['Sales'].count())\nprint('Number of outliers in Sales lower : ', df[df['Sales']<-53.5]['Sales'].count())\nprint('% of Outlier in Sales upper: ',round(df[df['Sales']>142.5]['Sales'].count()*100\/len(df)), '%')\nprint('% of Outlier in Sales lower: ',round(df[df['Sales']<-53.5]['Sales'].count()*100\/len(df)), '%')","9b2b9834":"plt.title('Sales')\nsns.boxplot(df['Sales'],orient='horizondal',color='purple')","85bca9d5":"fig, (ax2,ax3)=plt.subplots(1,2,figsize=(13,5))\n\n#distplot\nsns.distplot(df['Sales'],ax=ax2)\nax2.set_xlabel('Sales', fontsize=15)\nax2.tick_params(labelsize=15)\n\n#histogram\nax3.hist(df['Sales'])\nax3.set_xlabel('Sales', fontsize=15)\nax3.tick_params(labelsize=15)\n\nplt.subplots_adjust(wspace=0.5)\nplt.tight_layout()","011395a5":"sns.countplot(data = df, x = 'Agency_Code')","5f368855":"sns.boxplot(data = df, x='Agency_Code',y='Sales', hue='Claimed')","a0b8a03d":"sns.swarmplot(data = df, x='Agency_Code',y='Sales')","0768f160":"sns.violinplot(data = df, x='Agency_Code',y='Sales')\nsns.swarmplot(data = df, x='Agency_Code',y='Sales', color = 'k', alpha = 0.6)","92692e1f":"sns.countplot(data = df, x = 'Type')","975da491":"sns.boxplot(data = df, x='Type',y='Sales', hue='Claimed')","14286763":"sns.swarmplot(data = df, x='Type',y='Sales')","dcff2ad5":"sns.violinplot(data = df, x='Type',y='Sales')\nsns.swarmplot(data = df, x='Type',y='Sales', color = 'k', alpha = 0.6)","8ac1469d":"sns.countplot(data = df, x = 'Channel')","86acab26":"sns.boxplot(data = df, x='Channel',y='Sales', hue='Claimed')","2f230263":"sns.swarmplot(data = df, x='Channel',y='Sales')","5ce69c76":"sns.violinplot(data = df, x='Channel',y='Sales')\nsns.swarmplot(data = df, x='Channel',y='Sales', color = 'k', alpha = 0.6)","850175a9":"sns.countplot(data = df, x = 'Product Name')","2b76c835":"sns.boxplot(data = df, x='Product Name',y='Sales', hue='Claimed')","dd207979":"sns.swarmplot(data = df, x='Product Name',y='Sales')","eea6b728":"sns.violinplot(data = df, x='Product Name',y='Sales')\nsns.swarmplot(data = df, x='Product Name',y='Sales', color = 'k', alpha = 0.6)","fbc7bd73":"sns.countplot(data = df, x = 'Destination')","f03a89c5":"sns.boxplot(data = df, x='Destination',y='Sales', hue='Claimed')","f7b82b64":"sns.swarmplot(data = df, x='Destination',y='Sales')","3f58bb8e":"sns.violinplot(data = df, x='Destination',y='Sales')\nsns.swarmplot(data = df, x='Destination',y='Sales', color = 'k', alpha = 0.6)","684cc9d4":"sns.pairplot(df[['Age', 'Commision', \n    'Duration', 'Sales']])","7eb26bdb":"# construct heatmap with only continuous variables\nplt.figure(figsize=(10,8))\nsns.set(font_scale=1.2)\nsns.heatmap(df[['Age', 'Commision', \n    'Duration', 'Sales']].corr(), annot=True)","082810f8":"for feature in df.columns: \n    if df[feature].dtype == 'object': \n        print('\\n')\n        print('feature:',feature)\n        print(pd.Categorical(df[feature].unique()))\n        print(pd.Categorical(df[feature].unique()).codes)\n        df[feature] = pd.Categorical(df[feature]).codes","cdef6185":"df.info()","479e324f":"df.head()","76da4a48":"df.Claimed.value_counts(normalize=True)","b279e0bc":"X = df.drop(\"Claimed\", axis=1)\n\ny = df.pop(\"Claimed\")\n\nX.head()","92a30eaa":"# prior to scaling \nplt.plot(X)\nplt.show()","f8c89774":"# Scaling the attributes.\n\nfrom scipy.stats import zscore\nX_scaled=X.apply(zscore)\nX_scaled.head()","d02023e3":"# prior to scaling \nplt.plot(X_scaled)\nplt.show()","4c93b42b":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, train_labels, test_labels = train_test_split(X_scaled, y, test_size=.30, random_state=5)","68e02aa5":"print('X_train',X_train.shape)\nprint('X_test',X_test.shape)\nprint('train_labels',train_labels.shape)\nprint('test_labels',test_labels.shape)","30175a85":"param_grid_dtcl = {\n    'criterion': ['gini'],\n    'max_depth': [10,20,30,50],\n    'min_samples_leaf': [50,100,150], \n    'min_samples_split': [150,300,450],\n}\n\ndtcl = DecisionTreeClassifier(random_state=1)\n\ngrid_search_dtcl = GridSearchCV(estimator = dtcl, param_grid = param_grid_dtcl, cv = 10)","c5d8fdad":"grid_search_dtcl.fit(X_train, train_labels)\nprint(grid_search_dtcl.best_params_)\nbest_grid_dtcl = grid_search_dtcl.best_estimator_\nbest_grid_dtcl\n#{'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 50, 'min_samples_split': 450}","6283c4bd":"param_grid_dtcl = {\n    'criterion': ['gini'],\n    'max_depth': [3, 5, 7, 10,12],\n    'min_samples_leaf': [20,30,40,50,60], \n    'min_samples_split': [150,300,450],\n}\n\ndtcl = DecisionTreeClassifier(random_state=1)\n\ngrid_search_dtcl = GridSearchCV(estimator = dtcl, param_grid = param_grid_dtcl, cv = 10)","4c91abc5":"grid_search_dtcl.fit(X_train, train_labels)\nprint(grid_search_dtcl.best_params_)\nbest_grid_dtcl = grid_search_dtcl.best_estimator_\nbest_grid_dtcl\n#{'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 50, 'min_samples_split': 450}","9e60ed5f":"param_grid_dtcl = {\n    'criterion': ['gini'],\n    'max_depth': [3.5,4.0,4.5, 5.0,5.5],\n    'min_samples_leaf': [40, 42, 44,46,48,50,52,54], \n    'min_samples_split': [250, 270, 280, 290, 300,310],\n}\n\ndtcl = DecisionTreeClassifier(random_state=1)\n\ngrid_search_dtcl = GridSearchCV(estimator = dtcl, param_grid = param_grid_dtcl, cv = 10)","4824ae14":"grid_search_dtcl.fit(X_train, train_labels)\nprint(grid_search_dtcl.best_params_)\nbest_grid_dtcl = grid_search_dtcl.best_estimator_\nbest_grid_dtcl\n#{'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 50, 'min_samples_split': 450}","f3d77758":"param_grid_dtcl = {\n    'criterion': ['gini'],\n    'max_depth': [4.85, 4.90,4.95, 5.0,5.05,5.10,5.15],\n    'min_samples_leaf': [40, 41, 42, 43, 44], \n    'min_samples_split': [150, 175, 200, 210, 220, 230, 240, 250, 260, 270],\n}\n\ndtcl = DecisionTreeClassifier(random_state=1)\n\ngrid_search_dtcl = GridSearchCV(estimator = dtcl, param_grid = param_grid_dtcl, cv = 10)","875c1a0d":"grid_search_dtcl.fit(X_train, train_labels)\nprint(grid_search_dtcl.best_params_)\nbest_grid_dtcl = grid_search_dtcl.best_estimator_\nbest_grid_dtcl\n#{'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 50, 'min_samples_split': 450}","62f9d5a4":"train_char_label = ['no', 'yes']\ntree_regularized = open('tree_regularized.dot','w')\ndot_data = tree.export_graphviz(best_grid_dtcl, out_file= tree_regularized ,\n                                feature_names = list(X_train),\n                                class_names = list(train_char_label))\n\ntree_regularized.close()\ndot_data","74d12800":"print (pd.DataFrame(best_grid_dtcl.feature_importances_, columns = [\"Imp\"], \n                    index = X_train.columns).sort_values('Imp',ascending=False))","b83e5d16":"ytrain_predict_dtcl = best_grid_dtcl.predict(X_train)\nytest_predict_dtcl = best_grid_dtcl.predict(X_test)","7e6c7a96":"ytest_predict_dtcl\nytest_predict_prob_dtcl=best_grid_dtcl.predict_proba(X_test)\nytest_predict_prob_dtcl\npd.DataFrame(ytest_predict_prob_dtcl).head()","ebbdba72":"param_grid_rfcl = {\n    'max_depth': [4,5,6],#20,30,40\n    'max_features': [2,3,4,5],## 7,8,9\n    'min_samples_leaf': [8,9,11,15],## 50,100\n    'min_samples_split': [46,50,55], ## 60,70\n    'n_estimators': [290,350,400] ## 100,200\n}\n\nrfcl = RandomForestClassifier(random_state=1)\n\ngrid_search_rfcl = GridSearchCV(estimator = rfcl, param_grid = param_grid_rfcl, cv = 5)","9233f1df":"grid_search_rfcl.fit(X_train, train_labels)\nprint(grid_search_rfcl.best_params_)\nbest_grid_rfcl = grid_search_rfcl.best_estimator_\nbest_grid_rfcl\n#{'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 50, 'min_samples_split': 450}","3a7bb631":"ytrain_predict_rfcl = best_grid_rfcl.predict(X_train)\nytest_predict_rfcl = best_grid_rfcl.predict(X_test)","8a48fab1":"ytest_predict_rfcl\nytest_predict_prob_rfcl=best_grid_rfcl.predict_proba(X_test)\nytest_predict_prob_rfcl\npd.DataFrame(ytest_predict_prob_rfcl).head()","a7ee5c90":"# Variable Importance\nprint (pd.DataFrame(best_grid_rfcl.feature_importances_, \n                    columns = [\"Imp\"], \n                    index = X_train.columns).sort_values('Imp',ascending=False))","3ad189f4":"param_grid_nncl = {\n    'hidden_layer_sizes': [50,100,200], # 50, 200\n    'max_iter': [2500,3000,4000], #5000,2500\n    'solver': ['adam'], #sgd\n    'tol': [0.01], \n}\n\nnncl = MLPClassifier(random_state=1)\n\ngrid_search_nncl = GridSearchCV(estimator = nncl, param_grid = param_grid_nncl, cv = 10)","4159cf3d":"grid_search_nncl.fit(X_train, train_labels)\ngrid_search_nncl.best_params_\nbest_grid_nncl = grid_search_nncl.best_estimator_\nbest_grid_nncl","85bb3f14":"ytrain_predict_nncl = best_grid_nncl.predict(X_train)\nytest_predict_nncl = best_grid_nncl.predict(X_test)","44e283f9":"ytest_predict_nncl\nytest_predict_prob_nncl=best_grid_nncl.predict_proba(X_test)\nytest_predict_prob_nncl\npd.DataFrame(ytest_predict_prob_nncl).head()","dc92ace2":"# predict probabilities\nprobs_cart = best_grid_dtcl.predict_proba(X_train)\n# keep probabilities for the positive outcome only\nprobs_cart = probs_cart[:, 1]\n# calculate AUC\ncart_train_auc = roc_auc_score(train_labels, probs_cart)\nprint('AUC: %.3f' % cart_train_auc)\n# calculate roc curve\ncart_train_fpr, cart_train_tpr, cart_train_thresholds = roc_curve(train_labels, probs_cart)\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(cart_train_fpr, cart_train_tpr)","611b8df3":"# predict probabilities\nprobs_cart = best_grid_dtcl.predict_proba(X_test)\n# keep probabilities for the positive outcome only\nprobs_cart = probs_cart[:, 1]\n# calculate AUC\ncart_test_auc = roc_auc_score(test_labels, probs_cart)\nprint('AUC: %.3f' % cart_test_auc)\n# calculate roc curve\ncart_test_fpr, cart_test_tpr, cart_testthresholds = roc_curve(test_labels, probs_cart)\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(cart_test_fpr, cart_test_tpr)","44650770":"confusion_matrix(train_labels, ytrain_predict_dtcl)","922e1cd1":"#Train Data Accuracy\ncart_train_acc=best_grid_dtcl.score(X_train,train_labels) \ncart_train_acc","ac15d336":"print(classification_report(train_labels, ytrain_predict_dtcl))","6eab262d":"cart_metrics=classification_report(train_labels, ytrain_predict_dtcl,output_dict=True)\ndf=pd.DataFrame(cart_metrics).transpose()\ncart_train_f1=round(df.loc[\"1\"][2],2)\ncart_train_recall=round(df.loc[\"1\"][1],2)\ncart_train_precision=round(df.loc[\"1\"][0],2)\nprint ('cart_train_precision ',cart_train_precision)\nprint ('cart_train_recall ',cart_train_recall)\nprint ('cart_train_f1 ',cart_train_f1)","77dd4f47":"confusion_matrix(test_labels, ytest_predict_dtcl)","8a4f058d":"#Test Data Accuracy\ncart_test_acc=best_grid_dtcl.score(X_test,test_labels)\ncart_test_acc","f1ed9d08":"print(classification_report(test_labels, ytest_predict_dtcl))","4a392eec":"cart_metrics=classification_report(test_labels, ytest_predict_dtcl,output_dict=True)\ndf=pd.DataFrame(cart_metrics).transpose()\ncart_test_precision=round(df.loc[\"1\"][0],2)\ncart_test_recall=round(df.loc[\"1\"][1],2)\ncart_test_f1=round(df.loc[\"1\"][2],2)\nprint ('cart_test_precision ',cart_test_precision)\nprint ('cart_test_recall ',cart_test_recall)\nprint ('cart_test_f1 ',cart_test_f1)","2fa8e761":"confusion_matrix(train_labels,ytrain_predict_rfcl)","19b4bdfe":"rf_train_acc=best_grid_rfcl.score(X_train,train_labels) \nrf_train_acc","e578b96e":"print(classification_report(train_labels,ytrain_predict_rfcl))","695f558b":"rf_metrics=classification_report(train_labels, ytrain_predict_rfcl,output_dict=True)\ndf=pd.DataFrame(rf_metrics).transpose()\nrf_train_precision=round(df.loc[\"1\"][0],2)\nrf_train_recall=round(df.loc[\"1\"][1],2)\nrf_train_f1=round(df.loc[\"1\"][2],2)\nprint ('rf_train_precision ',rf_train_precision)\nprint ('rf_train_recall ',rf_train_recall)\nprint ('rf_train_f1 ',rf_train_f1)","c4bfeb79":"rf_train_fpr, rf_train_tpr,_=roc_curve(train_labels,best_grid_rfcl.predict_proba(X_train)[:,1])\nplt.plot(rf_train_fpr,rf_train_tpr,color='green')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nrf_train_auc=roc_auc_score(train_labels,best_grid_rfcl.predict_proba(X_train)[:,1])\nprint('Area under Curve is', rf_train_auc)","b1b7ef8b":"confusion_matrix(test_labels,ytest_predict_rfcl)","0d180b5c":"rf_test_acc=best_grid_rfcl.score(X_test,test_labels)\nrf_test_acc","124e0cbe":"print(classification_report(test_labels,ytest_predict_rfcl))","ce573b7f":"rf_metrics=classification_report(test_labels, ytest_predict_rfcl,output_dict=True)\ndf=pd.DataFrame(rf_metrics).transpose()\nrf_test_precision=round(df.loc[\"1\"][0],2)\nrf_test_recall=round(df.loc[\"1\"][1],2)\nrf_test_f1=round(df.loc[\"1\"][2],2)\nprint ('rf_test_precision ',rf_test_precision)\nprint ('rf_test_recall ',rf_test_recall)\nprint ('rf_test_f1 ',rf_test_f1)","924c7c0c":"rf_test_fpr, rf_test_tpr,_=roc_curve(test_labels,best_grid_rfcl.predict_proba(X_test)[:,1])\nplt.plot(rf_test_fpr,rf_test_tpr,color='green')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nrf_test_auc=roc_auc_score(test_labels,best_grid_rfcl.predict_proba(X_test)[:,1])\nprint('Area under Curve is', rf_test_auc)","8802d3eb":"confusion_matrix(train_labels,ytrain_predict_nncl)","a3659894":"nn_train_acc=best_grid_nncl.score(X_train,train_labels) \nnn_train_acc","87d674b3":"print(classification_report(train_labels,ytrain_predict_nncl))","6f83e016":"nn_metrics=classification_report(train_labels, ytrain_predict_nncl,output_dict=True)\ndf=pd.DataFrame(nn_metrics).transpose()\nnn_train_precision=round(df.loc[\"1\"][0],2)\nnn_train_recall=round(df.loc[\"1\"][1],2)\nnn_train_f1=round(df.loc[\"1\"][2],2)\nprint ('nn_train_precision ',nn_train_precision)\nprint ('nn_train_recall ',nn_train_recall)\nprint ('nn_train_f1 ',nn_train_f1)","048a2fe1":"nn_train_fpr, nn_train_tpr,_=roc_curve(train_labels,best_grid_nncl.predict_proba(X_train)[:,1])\nplt.plot(nn_train_fpr,nn_train_tpr,color='black')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nnn_train_auc=roc_auc_score(train_labels,best_grid_nncl.predict_proba(X_train)[:,1])\nprint('Area under Curve is', nn_train_auc)","ecf474f8":"confusion_matrix(test_labels,ytest_predict_nncl)","1def7623":"nn_test_acc=best_grid_nncl.score(X_test,test_labels)\nnn_test_acc","3b812f88":"print(classification_report(test_labels,ytest_predict_nncl))","d45f74b5":"nn_metrics=classification_report(test_labels, ytest_predict_nncl,output_dict=True)\ndf=pd.DataFrame(nn_metrics).transpose()\nnn_test_precision=round(df.loc[\"1\"][0],2)\nnn_test_recall=round(df.loc[\"1\"][1],2)\nnn_test_f1=round(df.loc[\"1\"][2],2)\nprint ('nn_test_precision ',nn_test_precision)\nprint ('nn_test_recall ',nn_test_recall)\nprint ('nn_test_f1 ',nn_test_f1)","012a0352":"nn_test_fpr, nn_test_tpr,_=roc_curve(test_labels,best_grid_nncl.predict_proba(X_test)[:,1])\nplt.plot(nn_test_fpr,nn_test_tpr,color='black')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nnn_test_auc=roc_auc_score(test_labels,best_grid_nncl.predict_proba(X_test)[:,1])\nprint('Area under Curve is', nn_test_auc)","0a37e20f":"index=['Accuracy', 'AUC', 'Recall','Precision','F1 Score']\ndata = pd.DataFrame({'CART Train':[cart_train_acc,cart_train_auc,cart_train_recall,cart_train_precision,cart_train_f1],\n        'CART Test':[cart_test_acc,cart_test_auc,cart_test_recall,cart_test_precision,cart_test_f1],\n       'Random Forest Train':[rf_train_acc,rf_train_auc,rf_train_recall,rf_train_precision,rf_train_f1],\n        'Random Forest Test':[rf_test_acc,rf_test_auc,rf_test_recall,rf_test_precision,rf_test_f1],\n       'Neural Network Train':[nn_train_acc,nn_train_auc,nn_train_recall,nn_train_precision,nn_train_f1],\n        'Neural Network Test':[nn_test_acc,nn_test_auc,nn_test_recall,nn_test_precision,nn_test_f1]},index=index)\nround(data,2)","d6daa0d4":"plt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(cart_train_fpr, cart_train_tpr,color='red',label=\"CART\")\nplt.plot(rf_train_fpr,rf_train_tpr,color='green',label=\"RF\")\nplt.plot(nn_train_fpr,nn_train_tpr,color='black',label=\"NN\")\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower right')","2db1830a":"plt.plot([0, 1], [0, 1], linestyle='--')\nplt.plot(cart_test_fpr, cart_test_tpr,color='red',label=\"CART\")\nplt.plot(rf_test_fpr,rf_test_tpr,color='green',label=\"RF\")\nplt.plot(nn_test_fpr,nn_test_tpr,color='black',label=\"NN\")\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc='lower right')","807e1c96":"# Univariate Analysis","7311e8c2":"# Comparison of the performance metrics from the 3 models","ab28045d":"## Problem 2: CART-RF-ANN\n\nAn Insurance firm providing tour insurance is facing higher claim frequency. The management decides to collect data from the past few years. You are assigned the task to make a model which predicts the claim status and provide recommendations to management. Use CART, RF & ANN and compare the models' performances in train and test sets.","c8421c36":"# Cart Conclusion\n\n### Train Data:\n    - AUC: 82%\n    - Accuracy: 79%\n    - Precision: 70%\n    - f1-Score: 60%\n\n### Test Data:\n    - AUC: 80%\n    - Accuracy: 77%\n    - Precision: 80%\n    - f1-Score: 84%\n\nTraining and Test set results are almost similar, and with the overall measures high, the model is a good model.\n\nChange is the most important variable for predicting diabetes","cf3d6d0c":"# NN Model Performance Evaluation on Training data","c83b7a5b":"# Converting all objects to categorical codes","b30f2eed":"# Destination","288fb01c":"# Loading the Data","086f994b":"# Neural Network Conclusion\n\n\n### Train Data:\n    - AUC: 82%\n    - Accuracy: 78%\n    - Precision: 68%\n    - f1-Score: 59\n\n### Test Data:\n    - AUC: 80%\n    - Accuracy: 77%\n    - Precision: 67%\n    - f1-Score: 57%\n\nTraining and Test set results are almost similar, and with the overall measures high, the model is a good model.","1b00fbd5":"# Sales variable","add840a7":"# 2.2 Data Split: Split the data into test and train, build classification model CART, Random Forest, Artificial Neural Network","9bd6e0cc":"param_grid_rfcl = {\n    'max_depth': [5,10,15],#20,30,40\n    'max_features': [4,5,6,7],## 7,8,9\n    'min_samples_leaf': [10,50,70],## 50,100\n    'min_samples_split': [30,50,70], ## 60,70\n    'n_estimators': [200, 250,300] ## 100,200\n}\n\nrfcl = RandomForestClassifier(random_state=1)\n\ngrid_search_rfcl = GridSearchCV(estimator = rfcl, param_grid = param_grid_rfcl, cv = 5)","4821174a":"# Age variable","cf2b74cf":"##### Observatiom\n\n    - 10 variables\n    - Age, Commision, Duration, Sales are numeric variable\n    - rest are categorial variables\n    - 3000 records, no missing one\n    - 9 independant variable and one target variable - Clamied\n","34296b60":"# Commision variable","243a52fa":"# Building a Decision Tree Classifier","8b7f8bd2":"##### Combine Violin plot and Swarmp plot","d6c7a0e5":"# Categorical Variables ","97125fa5":"##### Observation\n    - Data looks good at first glance","049a9f63":"# 2.1 Data Ingestion: Read the dataset. Do the descriptive statistics and do null value condition check, write an inference on it.","54fedbca":"##### Observation\n\nNo missing valune","599bec40":"# Agency_Code","50579f16":"# CART -AUC and ROC for the test data","b1956593":"# Predicting on Training and Test dataset","d031b18c":"# Check for duplicate data","9b5f3f03":"# Splitting data into training and test set","fb078784":"##### Swarmpot","5e9ef553":"##### ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","4c9f2ab9":"# Removing Duplicates - Not removing them - no unique identifier, can be different customer.","36d1a8c1":"# Getting the Predicted Classes and Probs","c7530d87":"##### ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","30e042a7":"# Duration variable","4ae19005":"# CART Confusion Matrix and Classification Report for the training data","6f9913f9":"# Geting unique counts of all Nominal Variables","11101129":"# Extracting the target column into separate vectors for training set and test set","b697ef5b":"# Checking for Correlations","400ad95f":"I strongly recommended we collect more real time unstructured data and past data if possible. \n\n\nThis is understood by looking at the insurance data by drawing relations between different variables such as day of the incident, time, age group, and associating it with other external information such as location, behavior patterns, weather information, airline\/vehicle types, etc.\n\n\n\n\u2022\tStreamlining online experiences benefitted customers, leading to an increase in conversions, which subsequently raised profits.\n\u2022\tAs per the data 90% of insurance is done by online channel.\n\u2022\tOther interesting fact, is almost all the offline business has a  claimed associated, need to find why?\n\u2022\tNeed to train the JZI agency resources to pick up sales as they are in bottom, need to run promotional marketing campaign or evaluate if we need to tie up with alternate agency\n\u2022\tAlso based on the model we are getting 80%accuracy, so we need customer books airline   tickets or plans, cross sell  the insurance based on the claim data pattern.\n\u2022\tOther interesting fact is more sales happen via Agency than Airlines and the trend shows the claim are processed more at Airline. So we may need to deep dive into the process to understand the workflow and why?\n \nKey performance indicators (KPI)\nThe KPI\u2019s of insurance claims are:\n\u2022\tReduce claims cycle time\n\u2022\tIncrease customer satisfaction\n\u2022\tCombat fraud\n\u2022\tOptimize claims recovery\n\u2022\tReduce claim handling costs\nInsights gained from data and AI-powered analytics could expand the boundaries of insurability, extend existing products, and give rise to new risk transfer solutions in areas like a non-damage business interruption and reputational damage.\n","cb8d0346":"# CART - AUC and ROC for the training data","b0261087":"http:\/\/webgraphviz.com\/","c4f1d1e7":"##### -----------------------------------------------------------------------------------------------------------------------------------------------------------------------","ecd55f8e":"# ROC Curve for the 3 models on the Training data","9f3ebbaa":"# Variable Importance - DTCL\n","c7fdcfc0":"# Importing all required Libraries","757e3cce":"##### Boxplot","43b3a44c":"# 2.3 Performance Metrics: Check the performance of Predictions on Train and Test sets using Accuracy, Confusion Matrix, Plot ROC curve and get ROC_AUC score for each model","bac9cbc8":"# Product Name","26b92fa4":"# Predicting the Training and Testing data","00c71d21":"# Getting the Predicted Classes and Probs","47c87b23":"# Checking the dimensions of the training and test data","060b08f7":"# CONCLUSION :\n    \n   # I am selecting the RF model, as it has better accuracy, precsion, recall, f1 score better than other two CART & NN.","91e2fd21":"# CART Confusion Matrix and Classification Report for the testing data","3b8ea9bb":"# NN Model Performance Evaluation on Test data","1e12aa12":"# Checking pairwise distribution of the continuous variables","7bd44162":"grid_search_rfcl.fit(X_train, train_labels)\nprint(grid_search_rfcl.best_params_)\nbest_grid_rfcl = grid_search_rfcl.best_estimator_\nbest_grid_rfcl\n#{'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 50, 'min_samples_split': 450}","d7b6900a":"# Channel","155f5a0d":"# Building a Random Forest Classifier","ad580fac":"# RF Model Performance Evaluation on Training data","2c957e5d":"# Observation\n\nCategorial code variable maximun unique count is 5","361d58f9":"# Generating Tree","127dfecc":"There are outliers in all the variables, but the sales and commision can be a geneui business value. Random Forest and CART can handle the outliers. Hence, Outliers are not treated for now, we will keep the data as it is. \n\n\nI will treat the outliers for the ANN model to compare the same after the all the steps just for comparsion.","63db8f01":"##### ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------","2cacf3f7":"Though it shows there are 139 records, but it can be of different customers, there is no customer ID or any unique identifier, so I am not dropping them off.","1b8ca12b":"# Building a Neural Network Classifier","aa519950":"# Attribute Information:\n\n1. Target: Claim Status (Claimed)\n2. Code of tour firm (Agency_Code)\n3. Type of tour insurance firms (Type)\n4. Distribution channel of tour insurance agencies (Channel)\n5. Name of the tour insurance products (Product)\n6. Duration of the tour (Duration)\n7. Destination of the tour (Destination)\n8. Amount of sales of tour insurance policies (Sales)\n9. The commission received for tour insurance firm (Commission)\n10. Age of insured (Age)","5b5b7beb":"# Random Forest Conclusion\n\n\n### Train Data:\n    - AUC: 86%\n    - Accuracy: 80%\n    - Precision: 72%\n    - f1-Score: 66%\n\n### Test Data:\n    - AUC: 82%\n    - Accuracy: 78%\n    - Precision: 68%\n    - f1-Score: 62\n\nTraining and Test set results are almost similar, and with the overall measures high, the model is a good model.\n\nChange is again the most important variable for predicting diabetes","9abca65b":"##### Count Plot","a83bc69b":"# Checking the data","a9427f79":"# Type","1c1c47b4":"# 2.4 Final Model: Compare all the model and write an inference which model is best\/optimized.","6a6e3202":"##### Observation\n\n    - Data looks good at first glance","4f70e07e":"# Check for missing value in any column","4501c76c":"# 2.5 Inference: Basis on these predictions, what are the business insights and recommendations","ca172180":"# Proportion of 1s and 0s","989335aa":"# Descriptive Statistics Summary","58f47bcf":"# Variable Importance via RF","537424d2":"# RF Model Performance Evaluation on Test data","68e76705":"# ROC Curve for the 3 models on the Test data","cc181733":"# Predicting the Training and Testing data","91d9b66d":"# Observation\n\n    - duration has negative valu, it is not possible. Wrong entry.\n    - Commision & Sales- mean and median varies signficantly\n    ","bd91875e":"# Getting the Predicted Classes and Probs"}}