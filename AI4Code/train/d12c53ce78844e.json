{"cell_type":{"975e0723":"code","1a4db54f":"code","69c661e4":"code","5483783e":"code","eb1e5c5c":"code","6cfe5ba3":"code","7116076f":"code","41767ac3":"code","e1c7e799":"code","698aa78e":"code","db903122":"code","5dcb9616":"code","a7b3b927":"code","d1c7782c":"code","37ed25d6":"code","c4de1528":"code","3889d77b":"code","4c003b81":"code","a77a5540":"code","10d0f8b0":"code","0c419695":"code","aa1f2a07":"code","00aa525f":"code","3188236c":"code","1bbf213f":"code","86d70d5d":"code","ac8a0bca":"code","21444967":"code","781c29c8":"code","6d464815":"code","bb1abb56":"code","e491d55d":"code","c84da960":"code","2510fdbc":"code","e2c5d5e4":"code","b037da30":"code","cc246418":"code","1b7c7992":"code","579266b7":"code","528a6d6a":"code","0a56ec2a":"code","b8df0bab":"code","d42f1cab":"code","1019f149":"code","d4793852":"code","bbd959a1":"code","e740e829":"code","30a57aa9":"code","7a636748":"code","d52b4fec":"code","ce4f3045":"code","b1533ee1":"code","b9d087f7":"code","e3e7618f":"code","68c95d93":"code","f376329d":"code","ce5f88b1":"code","1640a2df":"code","c40576ab":"code","a43edc13":"code","c0621d33":"code","fc60efdd":"code","0b0e410a":"code","1ee4d17c":"code","f5540baa":"code","f53cff41":"code","8d810223":"code","f79ff715":"code","9181b596":"code","4f783856":"code","48efcb20":"code","8625e97c":"code","d1c3e4a8":"code","898f8b27":"code","dd9e1943":"code","659195d8":"code","b7abf883":"code","3e06a4a5":"code","f9720a20":"code","fdfb8d28":"code","2f2b0561":"code","fa9ea563":"code","765eb13a":"code","46875539":"code","25536437":"code","a767d5a1":"code","57e0f136":"code","d1e0ed97":"code","9f6b40a9":"code","397b404e":"code","7c47ef9d":"code","b29ed1fd":"code","551c15a8":"code","2488fabe":"code","72cf96ba":"code","22b4a1de":"code","cd716c0f":"code","73bbec82":"code","45a22bc6":"code","ef742f24":"code","3e07a7d4":"code","aadb3c12":"code","cca114a0":"code","77eef197":"code","47f7d096":"code","4da34bb6":"code","c7e97bfc":"code","8ecff3d5":"code","3eeb63e2":"code","b1804cbe":"code","4c4b108d":"code","8054eb34":"code","b1e3b08e":"code","b1edf0d7":"code","10a7555b":"code","b38cc652":"code","194fecf4":"code","cca40251":"code","522ae053":"code","5ba7e35e":"code","f690002f":"code","31bab498":"code","c26248e5":"code","25ba2b60":"code","52efe623":"code","c18c1724":"code","b956e833":"code","e9934840":"code","39dc2c00":"code","c039b9e9":"markdown","434308e3":"markdown","0b387e8b":"markdown","e425de3b":"markdown","17ad680b":"markdown","ea095e61":"markdown","fac957cc":"markdown","97010501":"markdown","2c95cef9":"markdown","dc78434e":"markdown","4b30fca0":"markdown","37a10536":"markdown","2839ffac":"markdown","43e366cd":"markdown","cff40c6c":"markdown","91c89cc8":"markdown","6bd55c23":"markdown","15c2b891":"markdown","b7e252f0":"markdown","f379d307":"markdown","713d50bb":"markdown","59f591bc":"markdown","ccf1a18f":"markdown","80505f97":"markdown","6a3e52bb":"markdown","3e3a5b01":"markdown","3d51d989":"markdown","9232d976":"markdown","7a2420e4":"markdown","fd690205":"markdown","b5adb4bd":"markdown","9c7ee28f":"markdown","34603dfd":"markdown","f4682876":"markdown","a63f4100":"markdown","52bc6a73":"markdown","80ccb153":"markdown","e831abed":"markdown","9be1d856":"markdown","018148b3":"markdown","2ad35e09":"markdown","2fa32517":"markdown","e3a3d4df":"markdown","8be2e34f":"markdown","2ab89e42":"markdown","b54abe28":"markdown","de007eb6":"markdown","c01816af":"markdown","e1b8452d":"markdown","35426aae":"markdown","29eefd10":"markdown","9dd58f41":"markdown","c359804d":"markdown","dc9ad034":"markdown","6b6e3098":"markdown","8f3c6ff9":"markdown","d6f6bbe2":"markdown","1a42d6bd":"markdown","3e127440":"markdown","22515e15":"markdown"},"source":{"975e0723":"import pandas as pd","1a4db54f":"pd.DataFrame({'Yes': [50, 21], 'No': [131, 2]})","69c661e4":"pd.DataFrame({'Bob': ['I liked it.', 'It was awful.'], 'Sue': ['Pretty good.', 'Bland.']})","5483783e":"pd.DataFrame({'Bob': ['I liked it.', 'It was awful.'], \n              'Sue': ['Pretty good.', 'Bland.']},\n             index=['Product A', 'Product B'])","eb1e5c5c":"pd.Series([1, 2, 3, 4, 5])","6cfe5ba3":"pd.Series([30, 35, 40], index=['2015 Sales', '2016 Sales', '2017 Sales'], name='Product A')","7116076f":"global_temperatures = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv')","41767ac3":"global_temperatures.shape","e1c7e799":"global_temperatures.tail(10)","698aa78e":"global_temperatures = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalTemperatures.csv', index_col=0)\nglobal_temperatures.head()","db903122":"import matplotlib.pyplot as plt","5dcb9616":"plt.figure(figsize=(16,8))\nplt.plot(global_temperatures['LandAndOceanAverageTemperature'].values);\nplt.grid()","a7b3b927":"plt.figure(figsize=(16,8));\nplt.plot(global_temperatures['LandAverageTemperatureUncertainty'].values, label='Land');\nplt.plot(global_temperatures['LandAndOceanAverageTemperatureUncertainty'].values, label='Land and Ocean');\nplt.legend();\nplt.grid();","d1c7782c":"plt.figure(figsize=(16,8));\nplt.plot(global_temperatures['LandAverageTemperature'].values, label='Land');\nplt.plot(global_temperatures['LandAndOceanAverageTemperature'].values, label='Land and Ocean');\nplt.legend();\nplt.grid();","37ed25d6":"# frutta = ","c4de1528":"# vendite = ","3889d77b":"# ingredienti = ","4c003b81":"#temperatures_country = \n#\n\ntemperatures_country = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCountry.csv')\ntemperatures_country.head()","a77a5540":"temperatures_country.head(10)","10d0f8b0":"global_temperatures.head(20)","0c419695":"global_temperatures.LandAverageTemperature","aa1f2a07":"global_temperatures.LandMinTemperature.tail()","00aa525f":"print(global_temperatures[\"LandAverageTemperature\"])","3188236c":"global_temperatures['LandAverageTemperature']['1980-08-01']","1bbf213f":"global_temperatures.iloc[3000]","86d70d5d":"global_temperatures.shape","ac8a0bca":"global_temperatures.head()","21444967":"global_temperatures.iloc[1,0]","781c29c8":"global_temperatures.iloc[:,0]","6d464815":"global_temperatures.iloc[290:300, 0:3]","bb1abb56":"global_temperatures.iloc[1:3, 0]","e491d55d":"global_temperatures.iloc[[1,2,3,11], 0]","c84da960":"global_temperatures.iloc[-5:, :]","2510fdbc":"global_temperatures.tail()","e2c5d5e4":"global_temperatures.loc['1750-01-01', 'LandAverageTemperature']","b037da30":"global_temperatures.loc['2000-01-01', ['LandMinTemperature', 'LandMaxTemperature']]","cc246418":"global_temperatures.set_index(\"LandMaxTemperature\")","1b7c7992":"global_temperatures.LandMinTemperature > 0","579266b7":"global_temperatures[global_temperatures.LandMinTemperature > 0]","528a6d6a":"global_temperatures[(global_temperatures.LandMinTemperature > 0) & (global_temperatures.LandMinTemperatureUncertainty < 0.1)]","0a56ec2a":"global_temperatures[global_temperatures.LandMinTemperature.isnull()]","b8df0bab":"global_temperatures[global_temperatures.LandMinTemperature.notnull()]","d42f1cab":"global_temperatures['LandDiffTemperature'] = 0\nglobal_temperatures","1019f149":"global_temperatures['LandDiffTemperatures'] = global_temperatures['LandMaxTemperature'] - global_temperatures['LandMinTemperature']\nglobal_temperatures","d4793852":"global_temperatures.LandAverageTemperature.describe()","bbd959a1":"global_temperatures.LandAverageTemperature.hist(bins=41);","e740e829":"global_temperatures.describe()","30a57aa9":"global_temperatures.LandAverageTemperature.mean()","7a636748":"global_temperatures.LandAverageTemperature.iloc[1]","d52b4fec":"global_temperatures.LandAndOceanAverageTemperature.median()","ce4f3045":"global_temperatures.LandAndOceanAverageTemperature.quantile(0.5)","b1533ee1":"global_temperatures.index","b9d087f7":"type(global_temperatures.index[0])","e3e7618f":"global_temperatures.index","68c95d93":"pd.to_datetime(global_temperatures.index)","f376329d":"gt = global_temperatures.set_index(pd.to_datetime(global_temperatures.index))","ce5f88b1":"gt.index[1000]","1640a2df":"type(gt.index[0])","c40576ab":"global_temperatures = global_temperatures.set_index(pd.to_datetime(global_temperatures.index))","a43edc13":"global_temperatures.index","c0621d33":"global_temperatures.index.year","fc60efdd":"global_temperatures.index.month","0b0e410a":"global_temperatures.loc[global_temperatures.index.year == 2001]","1ee4d17c":"temperatures = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCity.csv')","f5540baa":"temperatures.loc[temperatures.City == 'Rome'].AverageTemperature.plot();","f53cff41":"temperatures = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCity.csv')\ntemperatures.head()","8d810223":"temperatures.head()","f79ff715":"# avg_temp = \navg_temp = temperatures.AverageTemperature","9181b596":"type(avg_temp[0])","4f783856":"temperatures.City.iloc[0]","48efcb20":"# first_city =\nfirst_city = temperatures.City.iloc[0]\nprint(first_city)","8625e97c":"# first row = \nfirst_row = temperatures.iloc[0]\nprint(first_row)","d1c3e4a8":"temperatures.dt.iloc[0:10]","898f8b27":"# first_10_dates = \nfirst_10_dates = temperatures.dt.iloc[:10]\nprint(first_10_dates)","dd9e1943":"temperatures.iloc[-10:, :]","659195d8":"last_10_rows = temperatures.iloc[-10:, :]\nprint(last_10_rows)","b7abf883":"temperatures.head()","3e06a4a5":"italian_cities = temperatures.loc[temperatures.Country == 'Italy'].City.unique()\nprint(italian_cities)","f9720a20":"# italian_cities = \n# cagliari_temp = ","fdfb8d28":"cagliari_temp = temperatures.loc[temperatures.City == 'Cagliari'].AverageTemperature","2f2b0561":"cagliari_temp.plot();","fa9ea563":"temperatures['dt'] = pd.to_datetime(temperatures['dt'])","765eb13a":"temperatures.dt","46875539":"cagliari_data = temperatures.loc[temperatures.City == 'Cagliari']","25536437":"cagliari_data","a767d5a1":"cagliari_data.dt","57e0f136":"cd = cagliari_data.set_index('dt')","d1e0ed97":"cd","9f6b40a9":"cagliari_temp = cd.AverageTemperature","397b404e":"cagliari_temp","7c47ef9d":"cagliari_temp.plot();","b29ed1fd":"import matplotlib.pyplot as plt\n%matplotlib inline","551c15a8":"plt.figure(figsize=(16,8))\nplt.plot(cagliari_temp);\nplt.grid();\nplt.title('Temperatura media mensile di Cagliari');\nplt.xlabel('data [anni]');\nplt.ylabel('temperatura [\u00b0C]');\nplt.savefig('tempcag.png', dpi=300)","2488fabe":"plt.figure(figsize=(16,8))\nplt.plot(cagliari_temp.iloc[-120:]);\nplt.grid();\nplt.title('Temperatura media mensile di Cagliari');\nplt.xlabel('data [anni]');\nplt.ylabel('temperatura [\u00b0C]');","72cf96ba":"help(cagliari_temp.rolling)","22b4a1de":"cagliari_clim_temp = cagliari_temp.rolling(30*12).mean()","cd716c0f":"cagliari_clim_temp.tail()","73bbec82":"plt.figure(figsize=(16,8))\n#plt.plot(cagliari_temp, label='media mensile');\nplt.plot(cagliari_clim_temp, label='clima');\nplt.grid();\nplt.title('Temperatura media mensile di Cagliari');\nplt.xlabel('data [anni]');\nplt.ylabel('temperatura [\u00b0C]');\nplt.legend();","45a22bc6":"cagliari_temp_8x = cagliari_temp.loc[(cagliari_temp.index.year >= 1980) & (cagliari_temp.index.year < 1990)]","ef742f24":"cagliari_clim_8x = cagliari_clim_temp.loc[(cagliari_clim_temp.index.year >= 1980) & (cagliari_clim_temp.index.year < 1990)]","3e07a7d4":"plt.figure(figsize=(16,8))\n#plt.plot(cagliari_temp_8x, label='temperatura');\nplt.plot(cagliari_clim_8x, label='clima');\nplt.grid();\nplt.title('Temperatura media mensile di Cagliari (piccola glaciazione)');\nplt.xlabel('data [anni]');\nplt.ylabel('temperatura [\u00b0C]');\nplt.legend();","aadb3c12":"cagliari_temp_01 = cagliari_temp.loc[cagliari_temp.index.month == 1]\ncagliari_temp_02 = cagliari_temp.loc[cagliari_temp.index.month == 2]\ncagliari_temp_03 = cagliari_temp.loc[cagliari_temp.index.month == 3]\ncagliari_temp_04 = cagliari_temp.loc[cagliari_temp.index.month == 4]\ncagliari_temp_05 = cagliari_temp.loc[cagliari_temp.index.month == 5]\ncagliari_temp_06 = cagliari_temp.loc[cagliari_temp.index.month == 6]\ncagliari_temp_07 = cagliari_temp.loc[cagliari_temp.index.month == 7]\ncagliari_temp_08 = cagliari_temp.loc[cagliari_temp.index.month == 8]\ncagliari_temp_09 = cagliari_temp.loc[cagliari_temp.index.month == 9]\ncagliari_temp_10 = cagliari_temp.loc[cagliari_temp.index.month == 10]\ncagliari_temp_11 = cagliari_temp.loc[cagliari_temp.index.month == 11]\ncagliari_temp_12 = cagliari_temp.loc[cagliari_temp.index.month == 12]","cca114a0":"cagliari_temp_01.index = cagliari_temp_01.index.year\ncagliari_temp_02.index = cagliari_temp_02.index.year\ncagliari_temp_03.index = cagliari_temp_03.index.year\ncagliari_temp_04.index = cagliari_temp_04.index.year\ncagliari_temp_05.index = cagliari_temp_05.index.year\ncagliari_temp_06.index = cagliari_temp_06.index.year\ncagliari_temp_07.index = cagliari_temp_07.index.year\ncagliari_temp_08.index = cagliari_temp_08.index.year\ncagliari_temp_09.index = cagliari_temp_09.index.year\ncagliari_temp_10.index = cagliari_temp_10.index.year\ncagliari_temp_11.index = cagliari_temp_11.index.year\ncagliari_temp_12.index = cagliari_temp_12.index.year","77eef197":"plt.figure(figsize=(16,8))\nplt.plot(cagliari_temp_01, label='01');\nplt.plot(cagliari_temp_02, label='02');\nplt.plot(cagliari_temp_03, label='03');\nplt.plot(cagliari_temp_04, label='04');\nplt.plot(cagliari_temp_05, label='05');\nplt.plot(cagliari_temp_06, label='06');\nplt.plot(cagliari_temp_07, label='07');\nplt.plot(cagliari_temp_08, label='08');\nplt.plot(cagliari_temp_09, label='09');\nplt.plot(cagliari_temp_10, label='10');\nplt.plot(cagliari_temp_11, label='11');\nplt.plot(cagliari_temp_12, label='12');\nplt.grid();\nplt.title('Temperatura media mensile di Cagliari');\nplt.xlabel('data [anni]');\nplt.ylabel('temperatura [\u00b0C]');\nplt.legend();","47f7d096":"cagliari_clim_01 = cagliari_temp_01.rolling(30).mean()\ncagliari_clim_02 = cagliari_temp_02.rolling(30).mean()\ncagliari_clim_03 = cagliari_temp_03.rolling(30).mean()\ncagliari_clim_04 = cagliari_temp_04.rolling(30).mean()\ncagliari_clim_05 = cagliari_temp_05.rolling(30).mean()\ncagliari_clim_06 = cagliari_temp_06.rolling(30).mean()\ncagliari_clim_07 = cagliari_temp_07.rolling(30).mean()\ncagliari_clim_08 = cagliari_temp_08.rolling(30).mean()\ncagliari_clim_09 = cagliari_temp_09.rolling(30).mean()\ncagliari_clim_10 = cagliari_temp_10.rolling(30).mean()\ncagliari_clim_11 = cagliari_temp_11.rolling(30).mean()\ncagliari_clim_12 = cagliari_temp_12.rolling(30).mean()","4da34bb6":"plt.figure(figsize=(16,8))\nplt.plot(cagliari_clim_01, label='01');\nplt.plot(cagliari_clim_02, label='02');\nplt.plot(cagliari_clim_03, label='03');\nplt.plot(cagliari_clim_04, label='04');\nplt.plot(cagliari_clim_05, label='05');\nplt.plot(cagliari_clim_06, label='06');\nplt.plot(cagliari_clim_07, label='07');\nplt.plot(cagliari_clim_08, label='08');\nplt.plot(cagliari_clim_09, label='09');\nplt.plot(cagliari_clim_10, label='10');\nplt.plot(cagliari_clim_11, label='11');\nplt.plot(cagliari_clim_12, label='12');\nplt.grid();\nplt.title('Clima mensile di Cagliari');\nplt.xlabel('data [anni]');\nplt.ylabel('temperatura [\u00b0C]');\nplt.legend();","c7e97bfc":"anno = 2012\nanno_prec = anno -30\n\ncagliari_clima_anno = cagliari_clim_temp.loc[cagliari_clim_temp.index.year == anno]\ncagliari_clima_prec = cagliari_clim_temp.loc[cagliari_clim_temp.index.year == anno_prec]","8ecff3d5":"plt.figure(figsize=(16,8))\nplt.plot(cagliari_clima_anno.values, label=anno);\nplt.plot(cagliari_clima_prec.values, label=anno_prec);\nplt.grid();\nplt.title('Clima mensile di Cagliari');\nplt.xlabel('mesi');\nplt.ylabel('temperatura [\u00b0C]');\nplt.legend();","3eeb63e2":"cagliari_temp_01.","b1804cbe":"cagliari_temp_02.index.year","4c4b108d":"cagliari_temp_08.tail()","8054eb34":"temperatures.head()","b1e3b08e":"temperatures.dtypes","b1edf0d7":"T_cagliari = temperatures[(temperatures.City=='Cagliari')].set_index('dt').AverageTemperature","10a7555b":"T_cagliari","b38cc652":"T_cagliari.head()","194fecf4":"import numpy as np","cca40251":"T_cagliari.describe()","522ae053":"T_cagliari.plot();","5ba7e35e":"T_cagliari.loc[T_cagliari.index.year < 1980].mean()","f690002f":"T_cagliari.loc[T_cagliari.index.year >= 1980].mean()","31bab498":"import matplotlib.pyplot as plt","c26248e5":"plt.figure(figsize=(16,8))\nplt.plot(T_cagliari.rolling(30*12).quantile(0.25));\nplt.plot(T_cagliari.rolling(30*12).quantile(0.5));\nplt.plot(T_cagliari.rolling(30*12).quantile(0.75));\n\nplt.grid()\nplt.title('Quantili!');","25ba2b60":"T_cagliari.tail()","52efe623":"t90_1951_2010 = T_cagliari.loc[(T_cagliari.index.year > 1950) & (T_cagliari.index.year < 2011)].quantile(0.90)","c18c1724":"print(t90_1951_2010)","b956e833":"(T_cagliari.loc[(T_cagliari.index.year > 1950) & (T_cagliari.index.year < 1981)] > t90_1951_2010).sum() \/ 30","e9934840":"(T_cagliari.loc[(T_cagliari.index.year > 1980) & (T_cagliari.index.year < 2011)] > t90_1951_2010).sum() \/ 30","39dc2c00":"Tmax = pd.read_csv('..\/input\/cagliaritemperatureminmax\/Tmax.csv')\nTmax['dt'] = pd.to_datetime(Tmax.DATE, format='%Y%m%d')\nT_cagliari = pd.DataFrame()\nT_cagliari['max'] = Tmax['TX']\nT_cagliari['dt'] = pd.to_datetime(Tmax.DATE, format='%Y%m%d')\nT_cagliari.set_index('dt', inplace=True)","c039b9e9":"Essere in grado di creare un DataFrame o una serie a mano \u00e8 comodo. Ma, il pi\u00f9 delle volte, non creeremo i nostri dati a mano. Al contrario, lavoreremo con dati gi\u00e0 esistenti.\n\nI dati possono essere memorizzati in una serie di forme e formati diversi. Di gran lunga il pi\u00f9 elementare di questi \u00e8 l'umile file CSV. Quando si apre un file CSV si ottiene qualcosa che assomiglia a questo:\n\n```\nProdotto A, prodotto B, prodotto C,\n30,21,9,\n35,34,1,\n41,11,11\n```\n\nQuindi un file CSV \u00e8 una tabella di valori separati da virgole. Da qui il nome: \"Comma-Separated Values\", o CSV.\n\nOra mettiamo da parte i nostri dataset giocattolo e vediamo come appare un vero dataset quando lo leggiamo in un DataFrame. Useremo la funzione pd.read_csv() per leggere i dati in un DataFrame. Questo va cos\u00ec:","434308e3":"## Manipolazione dell'indice\n\nLa selezione basata sulle etichette deriva il suo potenziale dalle etichette nell'indice. Purtroppo, l'indice che usiamo non \u00e8 immutabile. Possiamo manipolare l'indice in qualsiasi modo riteniamo opportuno.\n\nIl metodo set_index() pu\u00f2 essere usato per eseguire il compito. Ecco cosa succede quando impostiamo set_index nel campo title:","0b387e8b":"## Indicizzazione in Pandas\n\nL'operatore di indicizzazione e la selezione degli attributi sono simpatici perch\u00e9 funzionano proprio come nel resto dell'ecosistema Python. Da principiante, questo li rende facili da imparare e da usare. Tuttavia, pandas ha i propri operatori di accesso, **loc** e **iloc**. Per le operazioni pi\u00f9 avanzate, sono quelli che si dovrebbero usare.\n\n### Selezione basata su indice\n\nL'indicizzazione di Pandas funziona in uno dei due paradigmi. Il primo \u00e8 la selezione basata sull'indice: la selezione dei dati in base alla loro posizione numerica nei dati. **iloc** segue questo paradigma.\n\nPer selezionare la prima riga di dati in un DataFrame, possiamo usare quanto segue:","e425de3b":"## Quesito 8\n\nCalcola il massimo della temperatura mensile media di Cagliari negli anni 2001, 2002 e 2003. \n\nPotete calcolare i tre valori, assegnarli ad altrettante variabili e mediarle aritmeticamente.\n\nOppure potete definire una serie con le tre variabili e calcolare i valore della serie.\n\nOppure potete definire la serie delle temperature mensili massime di Cagliari negli anni, selezionare gli anni di interesse e determinare il massimo dei valori.\n\nSi pu\u00f2 fare anche con una singola linea di codice, se riuscite a farlo probabilmente non avevate bisogno i questa lezione.","17ad680b":"Possiamo usare l'attributo shape per controllare quanto \u00e8 grande il DataFrame risultante:","ea095e61":"# Esercizi\n\nGli esercizi saranno sul dataset GlobalLandTemperaturesByCity.csv","fac957cc":"Da solo, l'operatore **:**, che proviene anch'esso dal nativo Python, significa **ogni valore**. Se combinato con altri selettori, pu\u00f2 essere usato per indicare un intervallo di valori. Per esempio, per selezionare la colonna 0 solo dalla prima, seconda e terza riga, faremmo:","97010501":"il valore massimo si ottiene con **max()** quello minimo con **min()** ","2c95cef9":"Infine, vale la pena di sapere che i numeri negativi possono essere utilizzati nella selezione. Questo inizier\u00e0 a contare in avanti a partire dalla fine dei valori. Cos\u00ec, per esempio, ecco gli ultimi cinque elementi del set di dati.","dc78434e":"## Metodi nativi\n\nGli oggetti Python nativi forniscono buoni modi per indicizzare i dati. Pandas porta con s\u00e9 tutto questo, il che aiuta a rendere pi\u00f9 facile l'inizio.","4b30fca0":"il tipo di dato \u00e8 cambiato. Modifichiamo l'indice per rendere questa modifica permanente","37a10536":"## Selezione\n\nLa selezione di valori specifici di un DataFrame o di una Series di Pandas su cui lavorare \u00e8 un passo implicito in quasi tutte le operazioni sui dati che eseguirete, quindi una delle prime cose che dovete imparare nel lavoro con i dati in Python \u00e8 come procedere per selezionare i dati che vi interessano in modo rapido ed efficace.","2839ffac":"Questa operazione ha prodotto una serie di booleani Vero \/ Falso in base alla LandMinTemperature di ogni record. \n\nQuesto risultato pu\u00f2 poi essere utilizzato all'interno del loc per selezionare i dati rilevanti:","43e366cd":"# Introduzione a Pandas\n\nAdattamento dell'ottimo [corso](https:\/\/www.kaggle.com\/learn\/pandas) di Aleksey Bilogur","cff40c6c":"Questi sono i due modi per selezionare una Serie specifica da un DataFrame. Nessuno dei due \u00e8 pi\u00f9 o meno valido dal punto di vista sintattico dell'altro, ma l'operatore di indicizzazione [] ha il vantaggio di poter gestire i nomi delle colonne con caratteri riservati (ad esempio, se avessimo una colonna **'Temperatura media'**, l'indicizzazione con **global_temperatures.Temperatura media** non funzionerebbe mentre **global_temperatures['Temperatura media']** s\u00ec.\n\nLa Series di Pandas assomiglia un po' a un dizionario standard di Python. Non c'\u00e8 da stupirsi che, per arrivare a un unico valore specifico, sia sufficiente utilizzare ancora una volta l'operatore di indicizzazione []:","91c89cc8":"Questo \u00e8 utile se si riesce a trovare un indice per il set di dati che sia migliore di quello attuale.","6bd55c23":"Sia **loc** che **iloc** usano un ordine per cui si indica la riga per prima e la colonna per seconda.. Questo \u00e8 l'opposto di ci\u00f2 che facciamo nei Python nativi, dove invece si indica prima la colonna e poi la riga.\n\nQuesto significa che \u00e8 marginalmente pi\u00f9 facile recuperare le righe e marginalmente pi\u00f9 difficile recuperare le colonne. Per ottenere una colonna con **iloc**, possiamo fare quanto segue:","15c2b891":"## Quesito 4\n\nSeleziona le prime dieci date del dataset e assegnale alla variabile first_10_dates ","b7e252f0":"Se si vuole ottenere qualche particolare e semplice statistica riassuntiva su una colonna di un DataFrame o di una Serie, di solito c'\u00e8 una funzione pandas che lo rende possibile.\n\nPer esempio, per vedere la media deidelle temperature medie possiamo usare la funzione **mean()**","f379d307":"Oppure, per selezionare solo la seconda e la terza voce, potremmo fare cos\u00ec:","713d50bb":"\nvolendo selezionare i record relativi all'anno 2001 potremo perci\u00f2 scrivere:","59f591bc":"## Quesito 3\n\nSeleziona la prima riga del dataset e assegna il valore alla variabile first_row","ccf1a18f":"# Esercizi","80505f97":"Abbiamo selezionato 1308 record, meno della met\u00e0 dei 3192 record totali.\n\nSupponiamo di voler selezionare solo i record per i quali la temperatura minima sulla terraferma sia maggiore di 0 e l'incertezza su questo dato sia inferiore a 0.1:","6a3e52bb":"E' anche possibile passare una lista di indici:","3e3a5b01":"per convertire questi dati in date riconoscibili e trattabili con pandas si pu\u00f2 usare la funzione **to_datetime()**","3d51d989":"quale \u00e8 il tipo della variabile avg_temp (ricordate la funzione type())","9232d976":"Restano appena 85 record.\n\nvrete notato che molti record del dataset riportano la dicitura NaN (Not a Number), in questo caso significa che non \u00e8 disponibile la misura in questione, per identificare questi valore esiste un metodo apposito **.isnull** il suo opposto \u00e8 **.notnull()**\n\nPer cui i record non validi per il nostro dataset sono:","7a2420e4":"## DATETIME!\n\nLa definizione di una data \u00e8 abbastanza problematica anche in python e utilizzando una libreria molto potente come pandas.\n\nNel nostro caso le date dei record sono contenute nell'indice e hanno tipo *str*","fd690205":"## Assegnazione dei dati\n\nL'assegnazione dei dati ad un DataFrame \u00e8 facile. Ad esempio si pu\u00f2 assegnare un valore costante:","b5adb4bd":"## Quesito 1\n\nSelezionate la colonna con la temperatura media e assegnatela alla variabile avg_temp","9c7ee28f":"### Selezione basata su etichette\n\nIl secondo paradigma per la selezione degli attributi \u00e8 quello seguito dall'operatore **loc**: la selezione basata sulle etichette. In questo paradigma, \u00e8 il valore dell'indice dei dati, non la sua posizione, che conta.\n\nAd esempio il primo valore della prima colonna del nostro dataset pu\u00f2 essere ricavato cos\u00ec:","34603dfd":"## Selezione condizionale\n\nFinora abbiamo indicizzato vari dati utilizzando le propriet\u00e0 strutturali del DataFrame stesso. Per fare cose interessanti con i dati, tuttavia, spesso abbiamo bisogno di porre domande basate su condizioni.\n\nAd esempio, supponiamo di essere interessati in modo specifico alle temperature minime continentali superiori a 0\u00b0C.","f4682876":"### La scelta tra **loc** e **iloc**\n\nNella scelta o nella transizione tra **loc** e **iloc**, c'\u00e8 un dettaglio che vale la pena di tenere a mente, ovvero che i due metodi utilizzano schemi di indicizzazione leggermente diversi.\n\nL'**iloc** utilizza lo schema di indicizzazione Python stdlib, dove il primo elemento dell'intervallo \u00e8 incluso e l'ultimo \u00e8 escluso. Quindi 0:10 selezioner\u00e0 le voci 0,...,9. \n\n**loc**, invece, gli indici inclusi. Quindi 0:10 selezioner\u00e0 le voci 0,...,10.\n\nPerch\u00e9 questo cambiamento? Ricordate che loc pu\u00f2 indicizzare qualsiasi tipo di stdlib: stringhe, per esempio. Se abbiamo un DataFrame con valori di indice Mele, ..., Patate, ..., e vogliamo selezionare \"tutte le scelte di frutta in ordine alfabetico tra Mele e Patate\", allora \u00e8 molto pi\u00f9 conveniente indicizzare df.loc['Apples': 'Potatoes'] che indicizzare qualcosa come df.loc['Apples', 'Potatoet] (t che viene dopo s nell'alfabeto).\n\nQuesto \u00e8 particolarmente confondente quando l'indice DataFrame \u00e8 un semplice elenco numerico, ad esempio 0,....1000. In questo caso df.iloc[0:1000] restituir\u00e0 1000 voci, mentre df.loc[0:1000] ne restituir\u00e0 1001! Per ottenere 1000 elementi usando loc, dovrete scendere di un livello e chiedere df.loc[0:999].\n\nAltrimenti, la semantica dell'uso di **loc** \u00e8 la stessa di quella di **iloc**.\n","a63f4100":"**iloc** \u00e8 concettualmente pi\u00f9 semplice di **loc** perch\u00e9 ignora gli indici del dataset. Quando usiamo l'**iloc** trattiamo il dataset come una grande matrice (una lista di liste), che dobbiamo indicizzare per posizione. **loc**, invece, usa le informazioni negli indici per fare il suo lavoro. Poich\u00e9 il vostro dataset di solito ha indici significativi, di solito \u00e8 pi\u00f9 facile fare le cose usando **loc**. Per esempio, ecco un'operazione che \u00e8 molto pi\u00f9 facile usando **loc**:","52bc6a73":"La Series e il DataFrame sono intimamente legati. \u00c8 utile pensare ad un DataFrame come ad un gruppo di serie \"incollate insieme\". Ne vedremo di pi\u00f9 nella prossima sezione di questo tutorial.","80ccb153":"In Python, possiamo accedere alla propriet\u00e0 di un oggetto accedendovi come attributo. Un oggetto libro, per esempio, potrebbe avere una propriet\u00e0 titolo, alla quale possiamo accedere chiamando book.title. Le colonne in un DataFrame pandas funzionano pi\u00f9 o meno allo stesso modo.\n\nQuindi per accedere alla propriet\u00e0 **LandAverageTemperature** di **global_temperatures** possiamo utilizzare:","e831abed":"Stiamo usando il costruttore pd.DataFrame() per generare questi oggetti DataFrame. La sintassi per dichiararne uno nuovo \u00e8 un dizionario le cui chiavi sono i nomi delle colonne (Bob e Sue in questo esempio), e i cui valori sono una lista di voci. Questo \u00e8 il modo standard di costruire un nuovo DataFrame, e quello che si incontra pi\u00f9 facilmente.\n\nIl costruttore della lista dei dizionari assegna i valori alle etichette delle colonne, ma usa solo un conteggio ascendente da 0 (0, 1, 2, 3, ...) per le etichette delle righe. A volte questo va bene, ma spesso vorremmo assegnare noi stessi queste etichette.\n\nL'elenco delle etichette delle righe usate in un DataFrame \u00e8 noto come **index**. Possiamo assegnargli dei valori usando un parametro indice nel nostro costruttore:\n","9be1d856":"**importante**\nse le date in formato datetime sono contenute in una colonna e non in un indice si deve usare .dt.year e .dt.month per realizzare le stesse operazioni.","018148b3":"Cos\u00ec il nostro nuovo DataFrame ha 3192 record suddivisi in 9 colonne diverse. Sono quasi 30000 voci. E' un dataset molto piccolo.\n\nPossiamo esaminare il contenuto del DataFrame risultante usando il comando head(), che mostra le prime cinque righe:","2ad35e09":"In questo esempio, la voce \"0, No\" ha il valore 131. La voce \"0, S\u00ec\" ha il valore 50 e cos\u00ec via.\n\nLe voci del DataFrame non sono limitate ai numeri interi. Per esempio, ecco un DataFrame i cui valori sono stringhe:","2fa32517":"##\u00a0Serie\n\nUna serie, invece, \u00e8 una sequenza di valori di dati. Se un DataFrame \u00e8 una tabella, una Serie \u00e8 una lista. E infatti \u00e8 possibile crearne una con nient'altro che una lista:","e3a3d4df":"- 12\n- 30\n- 30*12\n- 30*365","8be2e34f":"La funzione pd.read_csv() \u00e8 ben fornita, con oltre 30 parametri opzionali che si possono specificare. Per esempio, si pu\u00f2 vedere in questo dataset che il file CSV ha un indice integrato, che pandas non ha rilevato automaticamente. Per far s\u00ec che pandas utilizzi quella colonna per l'indice (invece di crearne uno nuovo da zero), possiamo specificare un **index_col**.","2ab89e42":"## Quesito 3\n\nCreare una variabile `ingredienti` con una serie che assomigli a una serie:\n\n```\nFarina 4 tazze\nLatte 1 tazza\nUova 2 grandi\nSpam 1 lattina\nNome: Cena, dtype: oggetto\n```","b54abe28":"Se abbiamo un dizionario Python, possiamo accedere ai suoi valori utilizzando l'operatore di indicizzazione ([]). Possiamo fare lo stesso con le colonne in un DataFrame:","de007eb6":"##\u00a0Introduzione\n\nIn questo micro-corso, imparerete tutto su Pandas, la pi\u00f9 popolare libreria Python per l'analisi dei dati.\n\nIn questo tutorial imparerete a creare i vostri dati e a lavorare con dati gi\u00e0 esistenti.\n\n## Come iniziare\n\nPer utilizzare Pandas, di solito si inizia con la seguente riga di codice.","c01816af":"oppure calcolarlo attraverso operazioni matematiche:","e1b8452d":"i record non validi sono 1200.\n\nSe vogliamo selezionare solo i record validi:","35426aae":"## Quesito 1\n\n\nNella cella sottostante, creare un DataFrame `frutta` che assomigli a questo:\n\n![](https:\/\/i.imgur.com\/Ax3pp2A.png)","29eefd10":"## Creazione di dati\nCi sono due oggetti fondamentali in pandas: il DataFrame e la Serie.\n\n### DataFrame\n\nUn DataFrame \u00e8 una tabella. Contiene un array di singole voci, ognuna delle quali ha un certo valore. Ogni voce corrisponde ad una riga (o record) e ad una colonna.\n\nPer esempio, si consideri il seguente semplice DataFrame:","9dd58f41":"Una **Series** \u00e8, in sostanza, una singola colonna di un **DataFrame**. Quindi si possono assegnare i valori delle colonne alla serie nello stesso modo di prima, usando un parametro indice. Tuttavia, una Serie non ha un nome di colonna, ma solo un nome complessivo:","c359804d":"## Funzioni di sintesi\n\nPandas fornisce molte semplici \"funzioni di sintesi\" (non un nome ufficiale) che ristrutturano i dati in qualche modo utile. Per esempio, si consideri il metodo describe():","dc9ad034":"## Quesito 5\n\nSeleziona le ultime 10 righe del dataset e assegnale alla variabile last_10_rows","6b6e3098":"## Quesito 4\n\nLeggete e mostrate le prime 5 righe del dataset GlobalLandTemperaturesByCountry.csv","8f3c6ff9":"ogni valore dell'indice \u00e8 adesso una data. Per le date \u00e8 possibile, tra le altre cose selezionare l'anno o il mese.","d6f6bbe2":"## Quesito 7\n\nConverti la colonna dt in formato **datetime**","1a42d6bd":"## Quesito 2\n\nCreate a dataframe `vendite` that matches the diagram below:\n\n![](https:\/\/i.imgur.com\/CHPn7ZF.png)","3e127440":"## Quesito 6\n\nSeleziona i dati relativi alle citt\u00e0 italiane, la variabile \u00e8 italian_cities.\n\nDa questa variabile seleziona le temperature di Cagliari.","22515e15":"## Quesito 2\n\n\nSeleziona la prima citt\u00e0 del dataset e assegna il valore alla variabile first_city"}}