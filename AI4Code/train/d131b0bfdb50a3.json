{"cell_type":{"986a94be":"code","3ff1206d":"code","a814e289":"code","e55947d6":"code","79dec840":"code","08d37c0d":"code","22414ba1":"code","5b83dd00":"code","c9980866":"code","8ac48c60":"code","35ba2948":"code","70e8fa2b":"markdown","79e9b75e":"markdown","2a49d866":"markdown","7fdb9ee0":"markdown","7aca68db":"markdown","849a96cc":"markdown"},"source":{"986a94be":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport time\nimport random\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score","3ff1206d":"!pip install pygam","a814e289":"from pygam import LogisticGAM,ExpectileGAM, s, f , te, l,terms","e55947d6":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","79dec840":"skf = StratifiedKFold(n_splits = 4,random_state=0)\n\nID = train['ID_code'].values\ny = train['target'].values\nd_train = {}\nd_val = {}\ni = 0 \nfor train_index, val_index in skf.split(ID,y):\n    d_train = {**d_train, **{i : list(train.loc[train_index,'ID_code'].values) } }\n    d_val = {**d_val, **{i : list(train.loc[val_index,'ID_code'].values) } }\n    i = i + 1 \n    \nindex = {\n    'train' : d_train, \n  'val' : d_val\n}","08d37c0d":"data = pd.read_csv('..\/input\/train.csv')","22414ba1":"train = pd.merge(data, pd.DataFrame(data = {'ID_code' : index['train'][0] } ) , how = 'inner', on = 'ID_code')\n\nx_train = train.drop(columns = ['ID_code','target']).values\ny_train = train['target'].values","5b83dd00":"#For first 6 variables here\nlambda_ = np.concatenate( [np.array(np.logspace(3,3,10),ndmin =2 ).T for i in range(6)] ,axis = 1 )\ngam = LogisticGAM(s(0) +s(1)+s(2)+ s(3)+s(4)+s(5)).gridsearch(\n      x_train, \n    y_train, lam = lambda_)","c9980866":"#Now Plot partial dependence the Logit Function Vs Variable\nk = 0\nfig, ax = plt.subplots(2, 3, figsize = (20,15))\naxi = ax.flatten()\nfor k in range(6):\n    titles = ['var_'+str(k) + ',lam:' + '%.1f' %gam.lam[k][0] + \n              ',LogL:' + '%.2f' %gam.statistics_['loglikelihood'] + \n              ',DoF:' + '%.2f' %gam.statistics_['edof'] + ',pvalue:' \n              + '%.2E' %gam.statistics_['p_values'][k] ]\n\n    XX = gam.generate_X_grid(term = k)\n    pdep, confi = gam.partial_dependence(term=k, width=.95)\n    axi[k].plot(XX[:, k], pdep)\n    axi[k].plot(XX[:, k], confi, c='r', ls='--')\n    axi[k].set_title(titles[0])","8ac48c60":"roc_sc = []\ntest_pred = []\n\ntest = pd.read_csv('..\/input\/test.csv')\nx_test = test.drop(columns = ['ID_code']).values\n\nstate_ = 125\nskf = StratifiedKFold(n_splits = 2,random_state = state_)\n\n## 3 bags for each fold\n# pb_metafeature = pd.DataFrame( columns = ['ID_code', 'pb_gam' ] ) \nfor i in range(4):\n    \n    train = pd.merge(data, pd.DataFrame(data = {'ID_code' : index['train'][i] } ) , how = 'inner', on = 'ID_code')\n    val = pd.merge(data, pd.DataFrame(data = {'ID_code' : index['val'][i] } ) , how = 'inner', on = 'ID_code')\n    x_train = train.drop(columns = ['ID_code','target']).values\n    x_val = val.drop(columns = ['ID_code','target']).values\n    y_train = train['target'].values\n    y_val = val['target'].values\n    \n    y_pred = 0\n    y_test = 0  \n    st = time.time()\n    bag_iter = 0 \n    \n    for _, bag_index  in skf.split(x_train,y_train):\n        y_pred_bag = 0\n        y_test_bag = 0 \n        r = 0 #for models number\n        ##variables cycle\n        for seed_ in [10]:\n            random.seed(int(i+bag_iter+seed_))\n            var_ind = random.sample(range(200),50)\n#             print(var_ind)\n            gam = LogisticGAM(\n                    s(0,n_splines=20, lam=.6 )+s(1,n_splines = 20, lam = .6)+s(2,n_splines=20, lam=.6)+s(3,n_splines = 20, lam=.6)+\n                    s(4,n_splines = 20, lam=.6) +s(5,n_splines = 20, lam=.6) +s(6,n_splines = 20, lam=.6) +s(7,n_splines = 20, lam=.6) +\n                    s(8,n_splines = 20, lam=.6) +s(9,n_splines = 20, lam=.6) +s(10,n_splines = 20, lam=.6) +s(11,n_splines = 20, lam=.6) +\n                    s(12,n_splines = 20, lam=.6) +s(13,n_splines = 20, lam=.6) +s(14,n_splines = 20, lam=.6) +s(15,n_splines = 20, lam=.6) +\n                    s(16,n_splines = 20, lam=.6) +s(17,n_splines = 20, lam=.6) +s(18,n_splines = 20, lam=.6) +s(19,n_splines = 20, lam=.6) +\n                    s(20,n_splines = 20, lam=.6) +s(21,n_splines = 20, lam=.6) +s(22,n_splines = 20, lam=.6) +s(23,n_splines = 20, lam=.6) +\n                    s(24,n_splines = 20, lam=.6) +s(25,n_splines = 20, lam=.6) +s(26,n_splines = 20, lam=.6) +s(27,n_splines = 20, lam=.6) +\n                    s(28,n_splines = 20, lam=.6) +s(29,n_splines = 20, lam=.6) +s(30,n_splines = 20, lam=.6) +s(31,n_splines = 20, lam=.6) +\n                    s(32,n_splines = 20, lam=.6) +s(33,n_splines = 20, lam=.6) +s(34,n_splines = 20, lam=.6) +s(35,n_splines = 20, lam=.6) +\n                    s(36,n_splines = 20, lam=.6) +s(37,n_splines = 20, lam=.6) +s(38,n_splines = 20, lam=.6) +s(39,n_splines = 20, lam=.6) +\n                    s(40,n_splines = 20, lam=.6) +s(41,n_splines = 20, lam=.6) +s(42,n_splines = 20, lam=.6) +s(43,n_splines = 20, lam=.6) +\n                    s(44,n_splines = 20, lam=.6) +s(45,n_splines = 20, lam=.6) +s(46,n_splines = 20, lam=.6) +s(47,n_splines = 20, lam=.6) +\n                    s(48,n_splines = 20, lam=.6) +s(49,n_splines = 20, lam=.6) \n#                     s(50,n_splines=20, lam=.6 )+s(51,n_splines = 20, lam = .6)+s(52,n_splines=20, lam=.6)+s(53,n_splines = 20, lam=.6)+\n#                     s(54,n_splines = 20, lam=.6) +s(55,n_splines = 20, lam=.6) +s(56,n_splines = 20, lam=.6) +s(57,n_splines = 20, lam=.6) +\n#                     s(58,n_splines = 20, lam=.6) +s(59,n_splines = 20, lam=.6) +s(60,n_splines = 20, lam=.6) +s(61,n_splines = 20, lam=.6) +\n#                     s(62,n_splines = 20, lam=.6) +s(63,n_splines = 20, lam=.6) +s(64,n_splines = 20, lam=.6) +s(65,n_splines = 20, lam=.6) +\n#                     s(66,n_splines = 20, lam=.6) +s(67,n_splines = 20, lam=.6) +s(68,n_splines = 20, lam=.6) +s(69,n_splines = 20, lam=.6) +\n#                     s(70,n_splines = 20, lam=.6) +s(71,n_splines = 20, lam=.6) +s(72,n_splines = 20, lam=.6) +s(73,n_splines = 20, lam=.6) +\n#                     s(74,n_splines = 20, lam=.6) +s(75,n_splines = 20, lam=.6) +s(76,n_splines = 20, lam=.6) +s(77,n_splines = 20, lam=.6) +\n#                     s(78,n_splines = 20, lam=.6) +s(79,n_splines = 20, lam=.6) +s(80,n_splines = 20, lam=.6) +s(81,n_splines = 20, lam=.6) +\n#                     s(82,n_splines = 20, lam=.6) +s(83,n_splines = 20, lam=.6) +s(84,n_splines = 20, lam=.6) +s(85,n_splines = 20, lam=.6) +\n#                     s(86,n_splines = 20, lam=.6) +s(87,n_splines = 20, lam=.6) +s(88,n_splines = 20, lam=.6) +s(89,n_splines = 20, lam=.6) +\n#                     s(90,n_splines = 20, lam=.6) +s(91,n_splines = 20, lam=.6) +s(92,n_splines = 20, lam=.6) +s(93,n_splines = 20, lam=.6) +\n#                     s(94,n_splines = 20, lam=.6) +s(95,n_splines = 20, lam=.6) +s(96,n_splines = 20, lam=.6) +s(97,n_splines = 20, lam=.6) +\n#                     s(98,n_splines = 20, lam=.6) +s(99,n_splines = 20, lam=.6) +\n#                     s(100,n_splines=20, lam=.6 )+s(101,n_splines = 20, lam = .6)+s(102,n_splines=20, lam=.6)+s(103,n_splines = 20, lam=.6)+\n#                     s(104,n_splines = 20, lam=.6) +s(105,n_splines = 20, lam=.6) +s(106,n_splines = 20, lam=.6) +s(107,n_splines = 20, lam=.6) +\n#                     s(108,n_splines = 20, lam=.6) +s(109,n_splines = 20, lam=.6) +s(110,n_splines = 20, lam=.6) +s(111,n_splines = 20, lam=.6) +\n#                     s(112,n_splines = 20, lam=.6) +s(113,n_splines = 20, lam=.6) +s(114,n_splines = 20, lam=.6) +s(115,n_splines = 20, lam=.6) +\n#                     s(116,n_splines = 20, lam=.6) +s(117,n_splines = 20, lam=.6) +s(118,n_splines = 20, lam=.6) +s(119,n_splines = 20, lam=.6) +\n#                     s(120,n_splines = 20, lam=.6) +s(121,n_splines = 20, lam=.6) +s(122,n_splines = 20, lam=.6) +s(123,n_splines = 20, lam=.6) +\n#                     s(124,n_splines = 20, lam=.6) +s(125,n_splines = 20, lam=.6) +s(126,n_splines = 20, lam=.6) +s(127,n_splines = 20, lam=.6) +\n#                     s(128,n_splines = 20, lam=.6) +s(129,n_splines = 20, lam=.6) +s(130,n_splines = 20, lam=.6) +s(131,n_splines = 20, lam=.6) +\n#                     s(132,n_splines = 20, lam=.6) +s(133,n_splines = 20, lam=.6) +s(134,n_splines = 20, lam=.6) +s(135,n_splines = 20, lam=.6) +\n#                     s(136,n_splines = 20, lam=.6) +s(137,n_splines = 20, lam=.6) +s(138,n_splines = 20, lam=.6) +s(139,n_splines = 20, lam=.6) +\n#                     s(140,n_splines = 20, lam=.6) +s(141,n_splines = 20, lam=.6) +s(142,n_splines = 20, lam=.6) +s(143,n_splines = 20, lam=.6) +\n#                     s(144,n_splines = 20, lam=.6) +s(145,n_splines = 20, lam=.6) +s(146,n_splines = 20, lam=.6) +s(147,n_splines = 20, lam=.6) +\n#                     s(148,n_splines = 20, lam=.6) +s(149,n_splines = 20, lam=.6) +\n#                     s(150,n_splines=20, lam=.6 )+s(151,n_splines = 20, lam = .6)+s(152,n_splines=20, lam=.6)+s(153,n_splines = 20, lam=.6)+\n#                     s(154,n_splines = 20, lam=.6) +s(155,n_splines = 20, lam=.6) +s(156,n_splines = 20, lam=.6) +s(157,n_splines = 20, lam=.6) +\n#                     s(158,n_splines = 20, lam=.6) +s(159,n_splines = 20, lam=.6) +s(160,n_splines = 20, lam=.6) +s(161,n_splines = 20, lam=.6) +\n#                     s(162,n_splines = 20, lam=.6) +s(163,n_splines = 20, lam=.6) +s(164,n_splines = 20, lam=.6) +s(165,n_splines = 20, lam=.6) +\n#                     s(166,n_splines = 20, lam=.6) +s(167,n_splines = 20, lam=.6) +s(168,n_splines = 20, lam=.6) +s(169,n_splines = 20, lam=.6) +\n#                     s(170,n_splines = 20, lam=.6) +s(171,n_splines = 20, lam=.6) +s(172,n_splines = 20, lam=.6) +s(173,n_splines = 20, lam=.6) +\n#                     s(174,n_splines = 20, lam=.6) +s(175,n_splines = 20, lam=.6) +s(176,n_splines = 20, lam=.6) +s(177,n_splines = 20, lam=.6) +\n#                     s(178,n_splines = 20, lam=.6) +s(179,n_splines = 20, lam=.6) +s(180,n_splines = 20, lam=.6) +s(181,n_splines = 20, lam=.6) +\n#                     s(182,n_splines = 20, lam=.6) +s(183,n_splines = 20, lam=.6) +s(184,n_splines = 20, lam=.6) +s(185,n_splines = 20, lam=.6) +\n#                     s(186,n_splines = 20, lam=.6) +s(187,n_splines = 20, lam=.6) +s(188,n_splines = 20, lam=.6) +s(189,n_splines = 20, lam=.6) +\n#                     s(190,n_splines = 20, lam=.6) +s(191,n_splines = 20, lam=.6) +s(192,n_splines = 20, lam=.6) +s(193,n_splines = 20, lam=.6) +\n#                     s(194,n_splines = 20, lam=.6) +s(195,n_splines = 20, lam=.6) +s(196,n_splines = 20, lam=.6) +s(197,n_splines = 20, lam=.6) +\n#                     s(198,n_splines = 20, lam=.6) +s(199,n_splines = 20, lam=.6) \n                   )\n\n            gam.fit(x_train[bag_index,:][:,var_ind],y_train[bag_index]) \n\n            y_pred_bag = y_pred_bag + gam.predict_proba(x_val[:,var_ind])\n            y_test_bag = y_test_bag + gam.predict_proba(x_test[:,var_ind])\n            print('Random Model {} ROC:'.format(r), round(100*roc_auc_score(y_val,y_pred_bag),4), \n                  'time:', round((time.time()-st)\/60,2))\n            r = r + 1                    \n        y_pred = y_pred + y_pred_bag\/r\n        y_test = y_test + y_test_bag\/r\n        print('Bag {} ROC:'.format(bag_iter), round(100*roc_auc_score(y_val,gam.predict_proba(x_val[:,var_ind])),4),'time:', round((time.time()-st)\/60,2))\n        bag_iter = bag_iter + 1 \n    print('Fold {} ROC:'.format(i),round(100*roc_auc_score(y_val,y_pred),4),\n          'time:', round((time.time()-st)\/60,2))\n    print('-----------------------------------------------')\n    roc_sc.append(roc_auc_score(y_val,y_pred\/2))\n    test_pred.append(y_test\/2)\nprint('mean cross val ROC: {}'.format(round(100*np.mean(roc_sc),4))) \n\n","35ba2948":"submit = pd.DataFrame({'ID_code':test['ID_code'],\n                       'target':np.mean(np.stack(test_pred, axis = 1),axis = 1 )})\nsubmit.to_csv('submission.csv',index = False)","70e8fa2b":"#### Folds","79e9b75e":"GAM is very good choice when we want get some strong and interpretable solution.\nIt catches and shows carefully nonlinearity between dependent variable( in our case it is binary target ) and predictors.\nFor binary case logit function uses as a link function to predictors.\n\nHere is a good link to read more carefully about this approach:\nhttps:\/\/multithreaded.stitchfix.com\/blog\/2015\/07\/30\/gam\/\n\nIn the below cells I will briefly show simple solution based on python library PyGam. \n\np.s. Internet has to be turned on for installing Pygam package.","2a49d866":"s(0) defines splines for variable 0, lam describes penalization for each var. It is possible to look for best lam using gridsearch.","7fdb9ee0":"Playing with number of variables\/number of random models\/number of bags\/number of splines and lam for each variable could lead to more accurate result. I was using 4 bags with 20 variables & 40 random models(default number of splines and lam).\nResult was about ~89( time ~ 2hours ).\nTest probabilities was highly correlated with output of LGBM, less correlation was with Naive Bayes & NN models. ","7aca68db":"Simple \"toy\" Model ~ 20 minutes ( 4 folds from the beginning( to calc cross_val ROC), 2 bags in each fold + 1 random set of 50 variables( 8 models )). number of splines and lam are default ) It is possible to play with these parameters like we do it in different \"trees\" examples.. Sometimes you need make your train sample a bit little to fit it in yout RAM memory.","849a96cc":"Using plot from partial dependence it is clear to see real \"correlation\" between variable and target.. Mostly, it is not linear. One can also uses this plots to make variable transformation, so new transformed variable will have more linear connection with target"}}