{"cell_type":{"f4ea13dc":"code","6eae5c63":"code","8a5497b6":"code","6e9a95d9":"code","e267e37e":"code","caddbc8a":"code","d508f44f":"code","9cea0c7e":"code","53b649af":"code","b9c265f6":"code","10e9a9f7":"code","2d4f6979":"code","b942a93b":"code","f3ddd1b2":"code","ab08df59":"code","0ec910f7":"code","8a057f45":"code","caac66a4":"code","1764e838":"code","2ac11eb4":"code","66022dc4":"code","fd39bcef":"code","c9d10cb2":"code","6178ddb8":"code","f424d63d":"code","d0185b87":"code","4c3bb279":"code","7ffa8842":"code","40ec883a":"code","90e5aae9":"code","f4f8b5f6":"markdown","06e0e0a8":"markdown","2dcb44f4":"markdown","0f8c5a6c":"markdown","40842e95":"markdown","af6c36d1":"markdown","b60a46d0":"markdown","39fd9c13":"markdown","043d4c36":"markdown","ea807390":"markdown","4434f571":"markdown","2d52f978":"markdown","e5943fbb":"markdown","131606f4":"markdown","b87b0167":"markdown","3a67976f":"markdown","2b4714a3":"markdown","8fd26cce":"markdown","c6e662e1":"markdown","99267ac8":"markdown","a99c430a":"markdown","b059e378":"markdown","fb611ca5":"markdown","2148f6f5":"markdown","4a473c0c":"markdown","4f09cf27":"markdown","969dfcd7":"markdown","fe6554ee":"markdown","6e63dd1a":"markdown","2ebf6882":"markdown","67ee56b1":"markdown","613ef5e0":"markdown","8f6a024c":"markdown","1174d7f5":"markdown","42fdefbe":"markdown","565b62b5":"markdown","01313900":"markdown","728eec84":"markdown","47a71a36":"markdown","4c8b6c4e":"markdown","a2de78f9":"markdown","d889dfc8":"markdown","c14aa2dc":"markdown","61f79baf":"markdown","3f2f6cf1":"markdown","59bf6704":"markdown","da807307":"markdown","c64a42f4":"markdown","f51427c6":"markdown"},"source":{"f4ea13dc":"age = 80\n\nif age > 50 and age < 100:\n    print(\"In range\")\n    \nif 50 < age < 100:\n    print(\"In range\")","6eae5c63":"for i in range(1,10):\n    print(\"count : \",i)\nelse:\n    print(\"Complete\")","8a5497b6":"set_1 = {1,2,3,4,5}\nset_2 = {4,5,6,7,8}\n\nprint(\"1. set_1|set_2 : \", set_1|set_2)\nprint(\"2. set_1&set_2 : \", set_1&set_2)\nprint(\"3. set_1^set_2 : \", set_1^set_2)\nprint(\"4. set_1-set_2 : \", set_1-set_2)\nprint(\"5. set_2-set_1 : \", set_2-set_1)\nprint(\"6. set_2^set_1 : \", set_2^set_1)","6e9a95d9":"string = \"Hello My name is JeongBin Park\"\nprint(\"origin: \", string)\nprint(\"reverse: \", string[::-1])","e267e37e":"string_1 =\"JeongBin\"\nstring_2 =\"jeongbin\"\n\nprint(string_1 == string_2)\nprint(string_1.casefold() == string_2.casefold())\n\n# It's same that str.lower()","caddbc8a":"string = \"JB\"\nprint(string.ljust(10,'_'))\nprint(string.center(10,'_'))\nprint(string.rjust(10,'_'))\n\nnum = '10'\nprint(num.zfill(10))","d508f44f":"a_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\nfor index, string in enumerate(a_list):\n    print(index, \" : \", string)","9cea0c7e":"list_1 = [1,2,[3,4]]\nlist_2 = list_1\n\nlist_2[0] = 0\nlist_2[1] = 0\nlist_2[2][0] = 0\nlist_2[2][1] = 0\n\nprint('list_2 : ', list_2)\nprint('list_1 : ', list_1)","53b649af":"import copy\n\nlist_1 = [1,2,[3,4]]\nlist_2 = copy.deepcopy(list_1)\n\nlist_2[0] = 0\nlist_2[1] = 0\nlist_2[2][0] = 0\nlist_2[2][1] = 0\n\nprint('list_2 : ', list_2)\nprint('list_1 : ', list_1)","b9c265f6":"import functools\n\narr = [1,2,3,4,5]\nprint('arr : ', arr)\n\ndef make_sum(a,b):\n    return a+b\n\nprint('sum_all_arr : ',functools.reduce(make_sum, arr))","10e9a9f7":"functools.reduce(lambda x,y : x*y, arr)","2d4f6979":"arr = [1,2,3,4,5]\n\nadd_one_arr = [i+1 for i in arr]\nprint(\"add_one_arr : \",add_one_arr)","b942a93b":"print(\"0 * 0, 0 * 1, 0 * 2, 1 * 1 ...\",[i*j for i in range(0,3) for j in range(0,3)])\n\nprint(\"more than 5 : \", [i for i in range(10) if i >5])","f3ddd1b2":"# 1D array\narr = [0] * 10\nprint(arr)","ab08df59":"# 2D array\narr = []\nfor i in range(10):\n    arr.append([0]*10)\nprint(arr)","0ec910f7":"# make clearly\narr = [[0]*10 for i in range(10)]\nprint(arr)","8a057f45":"string_1 = \"Hello my name is JeongBin,\"\\\n          \"Nice to meet you\"\n\nstring_2 = (\"Hello my name is JeongBin,\"\n          \"Nice to meet you\")\n\nprint(string_1)\nprint(string_2)","caac66a4":"string_list = []\n\nn = ord('a')\nfor i in range(n,n+26):\n    string_list+=chr(i)\n\nprint(\"alphabet_list : \", string_list)\nprint(\"alphabet_string : \",\"\".join(string_list))","1764e838":"a = b = c = d = \"Hello world!\"\nprint(a)\nprint(b)\nprint(c)\nprint(d)","2ac11eb4":"a = 1\nb = 2\ntmp = a \nb = a\na = tmp\n\nprint('a : ',a , \"\\nb : \", b)","66022dc4":"a = 1\nb = 2\na,b = b, a\n\nprint('a : ',a , \"\\nb : \", b)","fd39bcef":"a, *b,c  = 1,2,3,4\nprint('a : ',a, '\\nb : ',b,'\\nc : ', c)","c9d10cb2":"def print_hello():\n    return 'hello'\ndef print_nice():\n    return 'nice'\ndef print_bye():\n    return 'bye'\n    \nfuncs = [print_hello, print_nice, print_bye]\n\na = funcs[0]()\nb = funcs[1]()\nc = funcs[2]()\n\nprint(a,b,c)","6178ddb8":"print(\"hello \"); print(\"nice to meet you\"); print('see you later')","f424d63d":"a, b, c, d, e = range(5)\n\nprint(a,b,c,d,e)","d0185b87":"import time\nstart = time.time()\nfor i in range(1000):\n    print('*',end ='')\nend = time.time()\nprint('\\n',end-start)","4c3bb279":"start = time.time()\nstring = '*'* 1000\nprint(string)\nend = time.time()\nprint(end-start)","7ffa8842":"number = 11_11_11_11_11\n\nprint(number)","40ec883a":"def sum_all(*args):\n    return sum(args)\n\nsum_all(1,2,3,4,5,6)","90e5aae9":"def print_num(**kwargs):\n    for i in kwargs:\n        print(i, kwargs[i])\nprint_num(a=20, b=40, c=60)","f4f8b5f6":"### It's simple without using reverse function","06e0e0a8":"## 14. Multiple assignment","2dcb44f4":"### If you use deep copy function, we can change only one list !","0f8c5a6c":"## 13. Make alphabet list","40842e95":"### Python can make function list","af6c36d1":"### If you want to apply all array, use functools !","b60a46d0":"## 21. *args","39fd9c13":"### Python can multiple assignment !","043d4c36":"## 22. **kwargs","ea807390":"## 10. list comprehention","4434f571":"### you can also using lambda","2d52f978":"#### I changed only list_2 but, list_1 changed too...\n#### Use Deep copy","e5943fbb":"### you can use like this, using **kwargs","131606f4":"### you can use range() ","b87b0167":"### You can fill char, using this function","3a67976f":"## 6. Fill the blank","2b4714a3":"### It's important to least function","8fd26cce":"## for ~ else ~","c6e662e1":"## 5. No consider case Letter","99267ac8":"### If you want not limit parameters function, Using *args ","a99c430a":"### If you use these, Very convinevinet","b059e378":"## 20. Using underbar on number","fb611ca5":"## 4. Reverse String","2148f6f5":"### I don't know it, Even though it's the foundation.\n### I used first way that age > 50 and age < 100","4a473c0c":"## 18. make enum","4f09cf27":"## 19. Use least print func","969dfcd7":"### But, We can make easily using tuple without tmp variance","fe6554ee":"### It's familiar, I added it as a reminder because it's important and useful !","6e63dd1a":"### If you want to compare string, use casefold function. It's similar lower function","2ebf6882":"### We can make alphabet list easily using ASCII code","67ee56b1":"## 17. one line","613ef5e0":"### I've never seen it before. If not break during for, else is executed","8f6a024c":"## 9. functools","1174d7f5":"### It can too, But it's hard to understand \ud83d\ude02\n### I need to trying these to familiar","42fdefbe":"## 8. Deep copy","565b62b5":"## 15. Tuple assignment","01313900":"### If there's anything I want to share, I'll keep adding it.","728eec84":"### Recently, I started study python's basic to prepare coding - test. During study, I learned new things that very useful but, I didn't know. So, I want to share that !","47a71a36":"### If not use tuple, we need to make tmp variance.","4c8b6c4e":"## 12. String connection","a2de78f9":"## 11. Make matrix","d889dfc8":"### Python can one line code like C language.","c14aa2dc":"## 3. Set","61f79baf":"## 7. enumerate","3f2f6cf1":"### Python doesn't recognize underbar on number","59bf6704":"### It's very useful !","da807307":"## 1. a < X < b","c64a42f4":"## 16. function list","f51427c6":"### Use convinient ways "}}