{"cell_type":{"f2493884":"code","55dc96f8":"code","8203850d":"code","767ae3be":"code","0959c039":"code","40dc6563":"code","e0553ad4":"code","9ac010e8":"code","9dbf010d":"code","2fe56fea":"code","d34f6d18":"code","592246b9":"code","2b0ca8f0":"code","9c8a3077":"code","25a9fc04":"markdown"},"source":{"f2493884":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","55dc96f8":"train_df=pd.read_csv(\"..\/input\/seti-breakthrough-listen\/train_labels.csv\")\nsubmission=pd.read_csv(\"..\/input\/seti-breakthrough-listen\/sample_submission.csv\")\nleak_train=pd.read_csv(\"..\/input\/leak-seti\/leak_train.csv\")\nleak_test=pd.read_csv(\"..\/input\/leak-seti\/leak_test.csv\")\n","8203850d":"leak_train","767ae3be":"leak_test","0959c039":"columns = [\"st_mtime\"]\n# leak_train.drop(\"id\",axis=1, inplace=True)\nleak_train = pd.DataFrame(leak_train,columns = columns)\n# leak_test.drop(\"id\",axis=1, inplace=True)\nleak_test = pd.DataFrame(leak_test, columns = columns)","40dc6563":"leak_train.head()","e0553ad4":"leak_test.head()","9ac010e8":"####extract file created time for the numpy files stored in train\/test\n#code to extract the leak - it ONLY WORKS IF YOU DOWNLOAD THE DATA LOCALLY - IT DOES NOT WORK INSIDE THE KERNEL\n# I have provided these files as leak_train.csv and leak_test.csv\n\n\"\"\"\nimport pathlib \n\n#create path column\ntrain_ids=train_df.id.values.tolist()\nnumerical_train=[]\nfor j in range(len(train_ids)):\n            this_id=str(train_ids[j])\n            paths=\"..\/input\/seti-breakthrough-listen\/train\/\" +  this_id[0] +\"\/\" + this_id + \".npy\"\n            fname = pathlib.Path(paths) # <------- extract file created date and other stats related with the file\n            stats=fname.stat()# <------- extract file created date and other stats related with the file\n            stats=[float(j) for j in stats]\n            numerical_train.append(stats)\n            #path_ids.append(paths)\n            \nX=np.array(numerical_train)    \n#train_df[\"path\"]=path_ids\n\n\ntest_ids=submission.id.values.tolist()\nnumerical_test=[]\nfor j in range(len(test_ids)):\n            this_id=str(test_ids[j])\n            paths=\"..\/input\/seti-breakthrough-listen\/test\/\" +  this_id[0] +\"\/\" + this_id + \".npy\"\n            fname = pathlib.Path(paths) # <------- extract file created date and other stats related with the file\n            stats=fname.stat() # <------- extract file created date and other stats related with the file\n            stats=[float(j) for j in stats]            \n            numerical_test.append(stats)\n            \nX_test=np.array(numerical_test) \n\"\"\"","9dbf010d":"y=train_df.target","2fe56fea":"leak_test_values = leak_test.values\nleak_test.values.shape","d34f6d18":"leak_train_values = leak_train.values.transpose([1, 0])\nleak_train_values.shape","592246b9":"results = []","2b0ca8f0":"leak_values = np.abs(leak_test_values[:10000] - leak_train_values)\nleak_values = leak_values.argmin(axis=1)\ntest_preds = y.values[leak_values]\nresults.append(test_preds)\n\n\nleak_values = np.abs(leak_test_values[10000:20000] - leak_train_values)\nleak_values = leak_values.argmin(axis=1)\ntest_preds = y.values[leak_values]\nresults.append(test_preds)\n\nleak_values = np.abs(leak_test_values[20000:] - leak_train_values)\nleak_values = leak_values.argmin(axis=1)\ntest_preds = y.values[leak_values]\nresults.append(test_preds)\n\ntest_preds = np.concatenate(results, axis=0).astype(np.float32)\n\ntest_preds.shape","9c8a3077":"submission[\"target\"]=test_preds\nsubmission.to_csv(\"submission.csv\" , index=False)","25a9fc04":"## based on the work from https:\/\/www.kaggle.com\/kazanova\/leak-submission-lb-0-991"}}