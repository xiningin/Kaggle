{"cell_type":{"b4e6d15f":"code","94336fa3":"code","99e8c075":"code","5bfc6611":"code","40646c96":"code","a779af06":"code","53be8001":"code","077be5fb":"code","7fcabcca":"code","66ef8548":"code","055c6476":"code","06ed3e2b":"code","3366e03e":"code","dd30ed51":"code","fa67ecaf":"code","0c859cf8":"code","1670ee4f":"code","f4dd09b2":"code","b0ff5993":"code","1f3cb262":"code","188e6f7c":"code","60420fe0":"code","5ba9f11d":"code","c03843f8":"code","5648ea5f":"code","0fb7f687":"code","583b672b":"code","a6d24dfb":"code","1d0a5416":"code","5dbd2aae":"code","c07b3f1a":"code","c4d48238":"code","07b9ce91":"code","0c1346da":"code","06e059c9":"code","302bd884":"code","4a449116":"code","cd74a9ce":"code","04f3ea20":"code","455fbe66":"code","f346d7d8":"code","d0dddc86":"code","424a6f11":"code","3d1427f4":"code","a2a66fb7":"code","c3f01fe9":"code","070f7536":"code","1c3cea02":"code","95f21597":"markdown","f24dc57e":"markdown","b7c519d3":"markdown","fbfb45f4":"markdown","2c7b4bdc":"markdown","03742bdc":"markdown","89faf5ca":"markdown","3908dac7":"markdown","de9b297e":"markdown","3d6af91a":"markdown","c8a96a08":"markdown","bba92789":"markdown","d0794aa9":"markdown","90c0ca87":"markdown","32d99d3c":"markdown","77d6ffcb":"markdown","7941a53e":"markdown"},"source":{"b4e6d15f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94336fa3":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","99e8c075":"# reading the data and also checking the computation time\n\n%time data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\n\nprint(data.shape)\ndata.head(10)","5bfc6611":"data.info()","40646c96":"# Weight is an object value, so we have to convert it in to float\n\n# defining a function for cleaning the Weight data\n\ndef extract_value_from(value):\n  out = value.replace('lbs', '')\n  return float(out)\n\n# applying the function to weight column\n#data['value'] = data['value'].apply(lambda x: extract_value_from(x))\ndata['Weight'] = data['Weight'].apply(lambda x : extract_value_from(x))","a779af06":"data.describe()","53be8001":"data.isnull().values.any()","077be5fb":"def null_values(x):\n    y = list(x)\n    \n    for i in y :\n        if x[i].isnull().sum() == 0 :\n            pass\n            \n        elif x[i].isnull().sum() > 0 :\n            #print( column, x[column].isnull().sum())\n            print( i,\"  :  \", x[i].isnull().sum())\n    pass\nnull_values(data)","7fcabcca":"data['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)\ndata['Volleys'].fillna(data['Volleys'].mean(), inplace = True)\ndata['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)\ndata['Curve'].fillna(data['Curve'].mean(), inplace = True)\ndata['FKAccuracy'].fillna(data['FKAccuracy'], inplace = True)\ndata['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)\ndata['BallControl'].fillna(data['BallControl'].mean(), inplace = True)\ndata['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)\ndata['Finishing'].fillna(data['Finishing'].mean(), inplace = True)\ndata['Crossing'].fillna(data['Crossing'].mean(), inplace = True)\ndata['Weight'].fillna('200lbs', inplace = True)\ndata['Contract Valid Until'].fillna(2019, inplace = True)\ndata['Height'].fillna(\"5'11\", inplace = True)\ndata['Loaned From'].fillna('None', inplace = True)\ndata['Joined'].fillna('Jul 1, 2018', inplace = True)\ndata['Jersey Number'].fillna(8, inplace = True)\ndata['Body Type'].fillna('Normal', inplace = True)\ndata['Position'].fillna('ST', inplace = True)\ndata['Club'].fillna('No Club', inplace = True)\ndata['Work Rate'].fillna('Medium\/ Medium', inplace = True)\ndata['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)\ndata['Weak Foot'].fillna(3, inplace = True)\ndata['Preferred Foot'].fillna('Right', inplace = True)\ndata['International Reputation'].fillna(1, inplace = True)\ndata['Wage'].fillna('\u20ac200K', inplace = True)\n\ndata.fillna(0, inplace = True)","66ef8548":"data.isnull().values.any() #confirm any NaN value","055c6476":"def country(x):\n    return data[data['Nationality'] == x][['Name','Age','Overall','Potential','Position']]","06ed3e2b":"country('Brazil')","3366e03e":"def club(x):\n    return data[data['Club'] == x][['Name','Jersey Number','Position','Overall','Nationality','Age','Wage',\n                                    'Value','Contract Valid Until']]","dd30ed51":"club('FC Barcelona')","fa67ecaf":"# Number of players in the club\n\nclub('FC Barcelona').shape","0c859cf8":"# defining functions for various categories to make new columns\n\ndef defending(data):\n    return int(round((data[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean()).mean()))\n\ndef general(data):\n    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((data[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean()).mean()))\n\ndef passing(data):\n    return int(round((data[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((data[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean()).mean()))\ndef power(data):\n    return int(round((data[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean()).mean()))\n\ndef rating(data):\n    return int(round((data[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))","1670ee4f":"# Applying these functions using apply\n\n# renaming a column\ndata.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)\n\n# adding these categories to the data\n\ndata['Defending'] = data.apply(defending, axis = 1)\ndata['General'] = data.apply(general, axis = 1)\ndata['Mental'] = data.apply(mental, axis = 1)\ndata['Passing'] = data.apply(passing, axis = 1)\ndata['Mobility'] = data.apply(mobility, axis = 1)\ndata['Power'] = data.apply(power, axis = 1)\ndata['Rating'] = data.apply(rating, axis = 1)\ndata['Shooting'] = data.apply(shooting, axis = 1)","f4dd09b2":"# comparison of preferred foot over the different players\n\nfig = plt.figure(figsize=(10,5))\nsns.countplot(data['Preferred Foot'], palette = 'Accent')\nplt.title('Most Preferred Foot of the Players', fontsize = 20)\nplt.show()","b0ff5993":"data['International Reputation'].value_counts()","1f3cb262":"labels = ['1', '2', '3', '4', '5']\nsizes = data['International Reputation'].value_counts()\n\nplt.rcParams['figure.figsize'] = (10,10)\nplt.pie(sizes, labels = labels, autopct='%.2f')\nplt.title('International Repuatation for the Football Players', fontsize = 20)\nplt.legend()\nplt.show()","188e6f7c":"labels = ['3', '2', '4', '5', '1'] \nsize = data['Weak Foot'].value_counts()\ncolors = plt.cm.Wistia(np.linspace(0, 1, 10))\nexplode = [0, 0, 0, 0, 0.1]\n\nplt.pie(size, labels = labels, autopct='%.2f')\nplt.title('Distribution of Week Foot among Players', fontsize = 20)\nplt.legend()\nplt.show()","60420fe0":"plt.figure(figsize = (20,12))\n\nax = sns.countplot('Position', data = data, palette = 'Accent')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","5ba9f11d":"# wage column values are objects, so we have to convert them to float\n\n# defining a function for cleaning the wage column\n\ndef extract_value_from(Value):\n    out = Value.replace('\u20ac', '')\n    if 'M' in out:\n        out = float(out.replace('M', ''))*1000000\n    elif 'K' in Value:\n        out = float(out.replace('K', ''))*1000\n    return float(out)\n# applying the function to the wage column\n\n#data['Value'] = data['Value'].apply(lambda x: extract_value_from(x))\ndata['Wage'] = data['Wage'].apply(lambda x: extract_value_from(x))\n\ndata['Wage'].head()","c03843f8":"# Comparing the players' Wages\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (15, 5)\nsns.distplot(data['Wage'], color = 'blue')\nplt.xlabel('Wage Range for Players', fontsize = 16)\nplt.ylabel('Count of the Players', fontsize = 16)\nplt.title('Distribution of Wages of Players', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","5648ea5f":"# Skill Moves of Players\n\nplt.figure(figsize = (10, 8))\nax = sns.countplot(x = 'Skill Moves', data = data, palette = 'Accent')\nax.set_title(label = 'Count of players on Basis of their skill moves', fontsize = 20)\nax.set_xlabel(xlabel = 'Number of Skill Moves', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","0fb7f687":"# Height of Players\n\nplt.figure(figsize = (13, 8))\nax = sns.countplot(x = 'Height', data = data, palette = 'dark')\nax.set_title(label = 'Count of players on Basis of Height', fontsize = 20)\nax.set_xlabel(xlabel = 'Height in Foot per inch', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()","583b672b":"# To show Different body weight of the players participating in the FIFA 2019\n\nplt.figure(figsize = (20, 5))\n\nsns.distplot(data['Weight'], kde = False, color = 'green')\nplt.title('Different Weights of the Players Participating in FIFA 2019', fontsize = 20)\nplt.xlabel('Heights associated with the players', fontsize = 16)\nplt.ylabel('count of Players', fontsize = 16)\nplt.show()","a6d24dfb":"# To show Different Work rate of the players participating in the FIFA 2019\n\nplt.figure(figsize = (15, 7))\n\n\nsns.countplot(x = 'Work Rate', data = data, palette = 'hls')\nplt.title('Different work rates of the Players Participating in the FIFA 2019', fontsize = 20)\nplt.xlabel('Work rates associated with the players', fontsize = 16)\nplt.ylabel('count of Players', fontsize = 16)\nplt.show()","1d0a5416":"# To show Different Speciality Score of the players participating in the FIFA 2019\n\nx = data['Special']\nplt.figure(figsize = (12, 8))\nplt.style.use('tableau-colorblind10')\n\nax = sns.distplot(x, bins = 58, kde = False, color = 'm')\nax.set_xlabel(xlabel = 'Special score range', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of the Players',fontsize = 16)\nax.set_title(label = 'Histogram for the Speciality Scores of the Players', fontsize = 20)\nplt.show()","5dbd2aae":"# To show Different potential scores of the players participating in the FIFA 2019\n\nx = data.Potential\nplt.figure(figsize=(12,8))\nplt.style.use('seaborn-paper')\n\nax = sns.distplot(x, bins = 58, kde = False, color = 'y')\nax.set_xlabel(xlabel = \"Player\\'s Potential Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Potential Scores', fontsize = 20)\nplt.show()","c07b3f1a":"# To show Different overall scores of the players participating in the FIFA 2019\n\nsns.set(style = \"dark\", palette = \"deep\", color_codes = True)\nx = data.Overall\nplt.figure(figsize = (12,8))\nplt.style.use('ggplot')\n\nax = sns.distplot(x, bins = 52, kde = False, color = 'r')\nax.set_xlabel(xlabel = \"Player\\'s Scores\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players Overall Scores', fontsize = 20)\nplt.show()","c4d48238":"# To show number of different nations participating in the FIFA 2019\n\n\ndata['Nationality'].value_counts().head(100).plot.bar(color = 'blue', figsize = (20, 10))\nplt.title('Player of Different Nations Participating in FIFA 2019', fontsize = 30)\nplt.xlabel('Name of The Country')\nplt.ylabel('count')\nplt.show()","07b9ce91":"# Players age data with count\n\nsns.set(style = \"dark\", palette = \"colorblind\", color_codes = True)\nx = data.Age\nplt.figure(figsize = (15,8))\nax = sns.distplot(x, bins = 58, kde = False, color = 'g')\nax.set_xlabel(xlabel = \"Player\\'s age\", fontsize = 16)\nax.set_ylabel(ylabel = 'Number of players', fontsize = 16)\nax.set_title(label = 'Histogram of players age', fontsize = 20)\nplt.show()","0c1346da":"# Comparison of age with overall preferred foot wise \n\n# boxen plot \n\nplt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(data['Overall'], data['Age'], hue = data['Preferred Foot'], palette = 'Accent')\nplt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 20)\nplt.show()","06e059c9":"# selecting some of the interesting and important columns from the set of columns in the given dataset\n\nselected_columns = ['Name', 'Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value',\n                    'Wage', 'Special', 'Preferred Foot', 'International Reputation', 'Weak Foot',\n                    'Skill Moves', 'Work Rate', 'Body Type', 'Position', 'Height', 'Weight',\n                    'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                    'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                    'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                    'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                    'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                    'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                    'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause']\n\ndata_selected = pd.DataFrame(data, columns = selected_columns)","302bd884":"data_selected.sample(5)","4a449116":"# plotting heatmap\nplt.rcParams['figure.figsize'] = (30, 20)\nsns.heatmap(data_selected.corr(), annot = True)\n\nplt.title('Histogram of the Dataset', fontsize = 30)\nplt.show()","cd74a9ce":"# best players per each position with their age, club, and nationality based on their overall scores\n\ndata.iloc[data.groupby(data['Position'])['Overall'].idxmax()][['Overall','Position', 'Name', 'Age', 'Club', 'Nationality']]","04f3ea20":"# best players from each positions with their age, nationality, club based on their potential scores\n\ndata.iloc[data.groupby(data['Position'])['Potential'].idxmax()][['Position', 'Name', 'Age', 'Club', 'Nationality']]","455fbe66":"# picking up the countries with highest number of players\n\ndata['Nationality'].value_counts().head(10)","f346d7d8":"# Every Nations' Player and their Weights\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Weight']]\n\nplt.rcParams['figure.figsize'] = (15, 10)\nax = sns.violinplot(x = data_countries['Nationality'], y = data_countries['Weight'], palette = 'Accent')\nax.set_xlabel(xlabel = 'Countries', fontsize = 14)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 14)\nax.set_title(label = 'Distribution of Weight of players from different countries', fontsize = 20)\nplt.show()","d0dddc86":"# Every Nations' Player and their wages\n\nsome_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')\ndata_countries = data.loc[data['Nationality'].isin(some_countries) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (15, 10)\nax = sns.barplot(x = data_countries['Nationality'], y = data_countries['Wage'], palette = 'Purples')\nax.set_xlabel(xlabel = 'Countries', fontsize = 9)\nax.set_ylabel(ylabel = 'Wage', fontsize = 9)\nax.set_title(label = 'Distribution of Wages of players from different countries', fontsize = 15)\nplt.show()","424a6f11":"# finding the the popular clubs around the globe\n\ndata['Club'].value_counts().head(10)","3d1427f4":"#Distribution of Overall Score in Different popular Clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Overall']]\n\nplt.rcParams['figure.figsize'] = (15, 8)\nax = sns.boxplot(x = data_clubs['Club'], y = data_clubs['Overall'], palette = 'Reds')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Overall Score', fontsize = 9)\nax.set_title(label = 'Distribution of Overall Score in Different popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","a2a66fb7":"# Distribution of Ages in some Popular clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (15, 8)\nax = sns.boxenplot(x = 'Club', y = 'Age', data = data_club, palette = 'magma')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution', fontsize = 10)\nax.set_title(label = 'Disstribution of Ages in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","c3f01fe9":"# Distribution of Wages in some Popular clubs\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_club = data.loc[data['Club'].isin(some_clubs) & data['Wage']]\n\nplt.rcParams['figure.figsize'] = (16, 8)\nax = sns.boxplot(x = 'Club', y = 'Wage', data = data_club, palette = 'Reds')\nax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)\nax.set_ylabel(ylabel = 'Distribution', fontsize = 10)\nax.set_title(label = 'Disstribution of Wages in some Popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","070f7536":"# Distribution of weight\n\nsome_clubs = ('CD Legan\u00e9s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna D\u00fcsseldorf', 'Manchestar City',\n             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')\n\ndata_clubs = data.loc[data['Club'].isin(some_clubs) & data['Weight']]\n\nplt.rcParams['figure.figsize'] = (15, 8)\nax = sns.violinplot(x = 'Club', y = 'Weight', data = data_clubs, palette = 'Reds')\nax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)\nax.set_ylabel(ylabel = 'Weight in lbs', fontsize = 9)\nax.set_title(label = 'Distribution of Weight in Different popular Clubs', fontsize = 20)\nplt.xticks(rotation = 90)\nplt.show()","1c3cea02":"# finding 15 youngest Players from the dataset\n\nyoungest = data.sort_values('Age', ascending = True)[['Name', 'Age', 'Club', 'Nationality']].head(15)\nprint(youngest)","95f21597":"#### To check NaN values","f24dc57e":"#### Data Visualization","b7c519d3":"#### data information ","fbfb45f4":"#### Filling NaN values","2c7b4bdc":"#### Getting Country wise players data\u00b6","03742bdc":"#### plotting a pie chart to represent the share of week foot players","89faf5ca":"#### Comparing the wages","3908dac7":"#### Best Players per each position with their age, club, and nationality based on their Overall Scores\u00b6","de9b297e":"#### Analyzing Club Data","3d6af91a":"#### Best Players from each positions with their age, nationality, club based on their Potential Scores","c8a96a08":"#### Countries with Most Players","bba92789":"#### International Reputation","d0794aa9":"#### Popular clubs","90c0ca87":"#### Function to display Columns with number of NaN values","32d99d3c":"#### data description","77d6ffcb":"#### different positions acquired by the players","7941a53e":"#### Renaming column and making new columns"}}