{"cell_type":{"0689900a":"code","a6881ed2":"code","a199452e":"code","0c487cf8":"code","ea8a3cc6":"code","871f9803":"code","d025c8f9":"code","8d57c666":"code","b4ca6641":"code","7502d672":"code","e91736f3":"code","77ec348e":"code","920d0384":"code","b0a7df43":"code","836fb26a":"markdown","6d6c2882":"markdown"},"source":{"0689900a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\n\n%matplotlib inline","a6881ed2":"np.random.default_rng().uniform(low=0, high=1, size=7)\n","a199452e":"s = np.random.default_rng().uniform(0,1,10000)\nplt.hist(s,20,density=True)\n\nx=[0,1]\ny_uniform = [1,1]\nplt.plot(x, y_uniform, linewidth=2,color='r')\nplt.legend([\"PDF of Standard Uniform Distribution\", \"Histogram of random samples\"])\nplt.show()","0c487cf8":"np.random.default_rng().normal(size=7)\n","ea8a3cc6":"from scipy.stats import norm\n\ns=np.random.default_rng().normal(size=5000)\nplt.hist(s,30,density=True)\n\nx = np.linspace(-5,5,100)\ny_normal = norm.pdf(x)\n\nplt.plot(x,y_normal, linewidth = 2, color = 'g')\nplt.legend([\"PDF of Standard Normal Distribution\",\"Histogram of random samples\"])\nplt.show ()\n","871f9803":"M=10\nX= (np.random.default_rng().uniform(size=M) > 0.5) * 2 - 1\nprint(X)\n\nZi= np.sum(X)\nprint (Zi)\n","d025c8f9":"N =1000\nM =100\n\nZ = np.empty((N))\nfor i in range (N):\n    X = (np.random.default_rng().uniform(size=M) > 0.5)*2-1\n    Z[i] = np.sum(X)\n    \nn_bins = 15\nplt.hist(Z, bins=n_bins, density = True)\nplt.show()\n","8d57c666":"#Importing Stuff\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\n\n%matplotlib inline\n\n#First Question\n#M=32\n\n#Setting variables\nM=[1,4,16,32]\ns=1000\nm_int=int(M[0])\n\n#Building eta array\neta = np.empty((s))\n  \nfor j in range (s):\n    delta = ((np.random.default_rng().uniform(size=m_int) > 0.5)*2-1)\/math.sqrt(m_int)\n    eta[j] = np.sum(delta)\n\n#Creating histogram\nn_bins = 15\nplt.hist(eta, bins=n_bins, density = True)\n\n#Creating pdf line\nx = np.linspace(-m_int,m_int,s)\ny_normal = norm.pdf(x)\n\nplt.plot(x,y_normal, linewidth = 2, color = 'g')\n\nplt.show ()","b4ca6641":"#Importing Stuff\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\n\n%matplotlib inline\n\n#First Question\n#M=32\n\n#Setting variables\nM=[1,4,16,32]\ns=1000\nm_int=int(M[1])\n\n#Building eta array\neta = np.empty((s))\n  \nfor j in range (s):\n    delta = ((np.random.default_rng().uniform(size=m_int) > 0.5)*2-1)\/math.sqrt(m_int)\n    eta[j] = np.sum(delta)\n\n#Creating histogram\nn_bins = 15\nplt.hist(eta, bins=n_bins, density = True)\n\n#Creating pdf line\nx = np.linspace(-m_int,m_int,s)\ny_normal = norm.pdf(x)\n\nplt.plot(x,y_normal, linewidth = 2, color = 'g')\n\nplt.show ()","7502d672":"#Importing Stuff\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\n\n%matplotlib inline\n\n#First Question\n#M=16\n\n#Setting variables\nM=[1,4,16,32]\ns=1000\nm_int=int(M[2])\n\n#Building eta array\neta = np.empty((s))\n  \nfor j in range (s):\n    delta = ((np.random.default_rng().uniform(size=m_int) > 0.5)*2-1)\/math.sqrt(m_int)\n    eta[j] = np.sum(delta)\n\n#Creating histogram\nn_bins = 15\nplt.hist(eta, bins=n_bins, density = True)\n\n#Creating pdf line\nx = np.linspace(-m_int,m_int,s)\ny_normal = norm.pdf(x)\n\nplt.plot(x,y_normal, linewidth = 2, color = 'g')\n\nplt.show ()","e91736f3":"#Importing Stuff\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\n\n%matplotlib inline\n\n#First Question\n#M=32\n\n#Setting variables\nM=[1,4,16,32]\ns=1000\nm_int=int(M[3])\n\n#Building eta array\neta = np.empty((s))\n  \nfor j in range (s):\n    delta = ((np.random.default_rng().uniform(size=m_int) > 0.5)*2-1)\/math.sqrt(m_int)\n    eta[j] = np.sum(delta)\n\n#Creating histogram\nn_bins = 15\nplt.hist(eta, bins=n_bins, density = True)\n\n#Creating pdf line\nx = np.linspace(-m_int,m_int,s)\ny_normal = norm.pdf(x)\n\nplt.plot(x,y_normal, linewidth = 2, color = 'g')\n\nplt.show ()","77ec348e":"#Question 2\n#Importing stuff\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport math\n%matplotlib inline\n\n\n#Variables Given\n\nL0=0.7\nh0=0.03\nb0=0.04\nF0=80\ndelta0=0.008\n\n\n#Creating a cube Function\n\ndef cube(x):\n    return x*x*x\ndef sqrt(x) :\n    return math.sqrt(x)\n\n\n#Beam Stiffness Equations\n\nI0=b0*cube(h0)\/12\nE0=((F0*cube(L0))\/(3*delta0*I0)) #re-arranged to find E\n\n\n#Standard deviations as percent of mean\n\nsdev_L_per=2\nsdev_h_per=10\nsdev_b_per=1\nsdev_F_per=1\nsdev_delta_per=1\n\n\n#Convert to actual values\n\nsL=sdev_L_per*L0\/100\nsh=sdev_h_per*h0\/100\nsb=sdev_b_per*b0\/100\nsF=sdev_F_per*F0\/100\nsdelta=sdev_delta_per*delta0\/100\n\n\n#Simulating this\n#note about normal, normal(mu,sigma,size)\n\n#We have L0,h0,b0,F0,and delta0 but we don't have mu for any of them.\n#Should we just use the known values as mu for the generation?\n\n\nN=10000\narrL     = np.random.default_rng().normal(L0,sL,size=N)\narrh     = np.random.default_rng().normal(h0,sh,size=N)\narrb     = np.random.default_rng().normal(b0,sb,size=N)\narrF     = np.random.default_rng().normal(F0,sF,size=N)\narrdelta = np.random.default_rng().normal(delta0,sdelta,size=N)\n\narrI=arrb*cube(arrh)\/12\narrE=((arrF*cube(arrL))\/(3*arrdelta*arrI))\n\n\n#Ploting a histogram of all E values\n#Creating histogram\n\nn_bins = 50\nprint(arrE) #checking if values are reasonable\nplt.hist(arrE, bins=n_bins, density = True)\n#broken for some reason :\/ Prints way more than just the histogram.\n\n#Checking Experimental E Against E0\n\"\"\"\n#print(E0)\n#Checking Outputs, Printing E in a sensible way\nE_print = \"{:.4e}\".format(E0) #reformats E to scientific notation\nprint(E_print)\n\n\nprint() #Printing a blank line for tidyness\n\naveE=sum(arrE)\/len(arrE) #average E\nE_print = \"{:.4e}\".format(aveE)\nprint(E_print)\n\"\"\"\n\n#print(math.e**(E0+((sE**2)\/2)))\n#This should be closer but I need sE to solve\n\n#These values are not close to each other for some reason?","920d0384":"#Scratchpad Question 2a\n\n#a\nm=(4*cube(L0))\/(delta0*b0*cube(h0))\nprint(\"a is: \" + str(m))\n\n#b\nn=((8*F0*(L0*L0))\/(delta0*b0*cube(h0)))\nprint(\"b is: \" + str(n))\n\n#c\no=((-4*F0*cube(L0))\/((delta0*delta0)*b0*(h0*h0)))\nprint(\"c is: \" + str(o))\n\n#d\np=((-4*F0*cube(L0))\/(delta0*(b0*b0)*cube(h0)))\nprint(\"d is: \" + str(p))\n\n#e\nq=((-12*F0*cube(L0))\/(delta0*b0*h0*cube(h0)))\nprint (\"e is: \" + str(q))\n\nsigpE=math.sqrt(\n    m*m*sF    *sF     + \n    n*n*sL    *sL     + \n    o*o*sdelta*sdelta + \n    p*p*sb    *sb     + \n    q*q*sh    *sh\n    )\nE_print = \"{:.4e}\".format(sigpE)\n\nprint (\"Sigma E is: \" + str(E_print))","b0a7df43":"#Constructing a test for trying to locate the mean value in the E outputs\n\nmu=2\nsigma=4\n\nprint(math.e**(mu+((sigma**2)\/2)))","836fb26a":"Question 1) It seems like as M becomes larger and larger, the data trends towards the PDF normalization.","6d6c2882":"Q2a)\nUsing the standard deviation formula and the starting values\n\na is: 158796296.29629627\nb is: 36296296296.296295\nc is: -47638888888.88888\nd is: -317592592592.5925\ne is: -1270370370370.3699\nSigma E is: 3.8490e+09\n\n\n\n\nQ2b) The plot shows a log normal distribution.\nseems to be averaging at around 1.2e+10\n"}}