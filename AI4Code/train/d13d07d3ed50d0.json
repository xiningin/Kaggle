{"cell_type":{"d94502f9":"code","d63dcdcb":"code","242edb85":"code","fbbfd781":"code","004de313":"code","e0ca9be4":"code","daf90c9a":"code","d213734d":"code","ea74b68b":"code","cd664704":"code","9ab35aaa":"code","eed4002f":"code","1bcd42d0":"code","31a39f95":"code","fb501824":"code","918f9f5c":"code","f605f47d":"code","faa4a6b4":"code","8431d622":"code","70c5d93a":"code","f107e305":"code","fec1ec56":"code","bbd76304":"code","ca74cab6":"code","53294c0d":"code","1b168e1c":"code","e7f063f7":"markdown","793efc6f":"markdown","a197551e":"markdown","1562ec0a":"markdown"},"source":{"d94502f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d63dcdcb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport cudf\nimport cupy","242edb85":"path = '\/kaggle\/input\/tabular-playground-series-feb-2021\/'\ntrain = pd.read_csv(path + 'train.csv')\ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns})\n\ntest = pd.read_csv(path + 'test.csv')\ntest = test.astype({c: np.float32 for c in test.select_dtypes(include='float64').columns})\n\nsample_submission = pd.read_csv(path + 'sample_submission.csv')","fbbfd781":"pd.set_option(\"display.max_columns\", 30)\ntrain.head()","004de313":"pd.set_option(\"display.max_columns\", 30)\ntest.head()","e0ca9be4":"train.shape, test.shape","daf90c9a":"# Since both Train and Test datasets have similar data types, we can check any of the one !!\ntrain.dtypes","d213734d":"train.describe()","ea74b68b":"train.cat0.unique()","cd664704":"from sklearn.preprocessing import OneHotEncoder\noh = OneHotEncoder(handle_unknown='ignore')\n\ncat_cols = train.select_dtypes(exclude=['int', 'float', 'float32']).columns\nohenc = pd.DataFrame(oh.fit_transform(train[cat_cols]).toarray())\nohenctest = pd.DataFrame(oh.transform(test[cat_cols]).toarray())\n\ntrain.drop(cat_cols, axis=1, inplace=True)\ntrain = pd.concat([train, ohenc], axis=1)\n\n\ntest.drop(cat_cols, axis=1, inplace=True)\ntest = pd.concat([test, ohenctest], axis=1)","9ab35aaa":"train.head()","eed4002f":"#from cuml.preprocessing.TargetEncoder import TargetEncoder\n\n#SMOOTH = 0.001\n#SPLIT = 'interleaved'\n#FOLDS = 5\n\n#encoder = TargetEncoder(n_folds=FOLDS, smooth=SMOOTH, split_method=SPLIT)\n#cat_cols = X_train.select_dtypes(exclude = ['int', 'float32']).columns\n\n\n#for col in cat_cols:\n#        X_train[col] = encoder.fit_transform(X_train[col], y_train)\n#        test[col] = encoder.transform(test[col])","1bcd42d0":"X_train = train.drop(columns = ['target', 'id'], axis = 1)\n\ny_train = train['target']\n\nX_test = test.drop('id', axis = 1)","31a39f95":"X_train.head()","fb501824":"y_train.head()","918f9f5c":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=2)","f605f47d":"X_train = pd.DataFrame(X_train)\nX_train = X_train.astype({c: np.float32 for c in X_train.select_dtypes(include='float64').columns})","faa4a6b4":"from xgboost import XGBRegressor\nfrom cuml.ensemble import RandomForestRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.metrics import mean_squared_error","8431d622":"# XGBoost\nxgb = XGBRegressor(tree_method='gpu_hist')\nxgb.fit(X_train, y_train)\npred_xgb = xgb.predict(X_valid)\nprint(\"score : \", mean_squared_error(pred_xgb, y_valid, squared = False))","70c5d93a":"# Random Forest\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\npred_rf = rf.predict(X_test)\n#print(\"score : \", mean_squared_error(pred_rf, y_valid, squared = False))","f107e305":"# LGBM\nlgbm = LGBMRegressor(tree_method='gpu_hist', n_estimators=4000, learning_rate=0.01, max_depth=4)\nlgbm.fit(X_train, y_train)\npred_lgbm = lgbm.predict(X_test)\n# print(\"score : \", np.sqrt(mean_squared_error(pred, y_valid)))","fec1ec56":"def objective(trial, X = X_train, y = y_train):\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, \n                                test_size = 0.2, random_state = 0)\n    params = {\n        'device_type' : 'gpu',\n        'gpu_use_dp' : 'true',\n        'learning_rate' : trial.suggest_categorical(\"learning_rate\",\n            [0.008, 0.009, 0.01, 0.012, 0.014, 0.016 ,0.018, 0.02]),\n        'n_estimators' : trial.suggest_int(\"n_estimators\", 100, 1500),\n        'max_depth' : trial.suggest_int(\"max_depth\", 2, 20),\n        'num_leaves' : trial.suggest_int(\"num_leaves\", 2, 200),\n        #'max_features' : trial.suggest_uniform(\"max_features\", 0.01, 1.0),\n        'random_state' : 0,\n        'lambda': trial.suggest_loguniform('lambda', 1e-3, 10.0),\n        'alpha': trial.suggest_loguniform('alpha', 1e-3, 10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9, 1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'min_child_weight': trial.suggest_int('min_child_weight', 1, 300)\n    }\n    \n    lgbm = LGBMRegressor(**params)\n    lgbm.fit(X_train, y_train, eval_set = [(X_val, y_val)], verbose = False)\n    \n    pred = lgbm.predict(X_val)\n    \n    rmse = mean_squared_error(y_val, pred, squared = False)\n    \n    return rmse","bbd76304":"import optuna\nstudy = optuna.create_study(direction = 'minimize')\nstudy.optimize(objective, n_trials = 100)\nprint ('Total Finished Trials:', len(study.trials))\nprint('Best Trial:', study.best_trial.params)","ca74cab6":"Best_trial = {'learning_rate': 0.018, 'n_estimators': 1450, 'max_depth': 14, 'num_leaves': 72, 'lambda': 0.0024644531179561766, \n              'alpha': 1.863601675701509, 'colsample_bytree': 0.3, 'subsample': 0.8, 'min_child_weight': 276}\n\nlgbm = LGBMRegressor(**Best_trial)\nlgbm.fit(X_train, y_train)\npred_lgbm = lgbm.predict(X_test)","53294c0d":"sample_submission['target'] = pred_lgbm\nsample_submission.to_csv('submission9_LGBM_Using_Optuna_BestTrial2.csv', index = False)","1b168e1c":"#Best Trial No 1: {'learning_rate': 0.02, 'n_estimators': 1447, 'max_depth': 13, 'num_leaves': 20, 'lambda': 0.002497286679888304, \n#             'alpha': 0.0395223334673374, 'colsample_bytree': 0.3, 'subsample': 0.5, 'min_child_weight': 62}\n\n\n# Best_trial No 2 = {'learning_rate': 0.018, 'n_estimators': 1450, 'max_depth': 14, 'num_leaves': 72, 'lambda': 0.0024644531179561766, \n#              'alpha': 1.863601675701509, 'colsample_bytree': 0.3, 'subsample': 0.8, 'min_child_weight': 276}","e7f063f7":"# Model Building","793efc6f":"# Importing Essential Libraries and Datasets","a197551e":"# Train Test Split","1562ec0a":"# Data Preprocessing"}}