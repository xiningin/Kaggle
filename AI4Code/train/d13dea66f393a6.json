{"cell_type":{"6cd1854e":"code","46a0b389":"code","6f57208f":"code","d923ea96":"code","c24c3537":"code","836d0c2b":"code","e5070158":"code","711216d9":"code","eeaafc47":"code","c54978f4":"code","d9a9fefd":"code","0743bcad":"code","c0a8cb5c":"code","f8704ada":"markdown","5a7b03c3":"markdown","0f7a0cc6":"markdown","a7dca1f7":"markdown","d5aeade1":"markdown","1e9909c3":"markdown","2b2ca1c8":"markdown","48a6c27a":"markdown"},"source":{"6cd1854e":"# This needs to be installed inside the notebook for compatibility with Kaggle\n!pip install git+git:\/\/github.com\/neurostuff\/nimare.git@608516ec3034e356326dfe70df5e9ed77efd2be8#egg=nimare","46a0b389":"%matplotlib inline\n\nimport io\nimport requests\nimport pandas as pd\nfrom nilearn.image import resample_to_img, math_img\nfrom nilearn.datasets import load_mni152_template, load_mni152_brain_mask\nimport nibabel as nb\nfrom gzip import GzipFile\nfrom nimare.meta.ibma import stouffers, weighted_stouffers\nfrom nilearn.masking import apply_mask\nfrom nilearn.plotting import plot_roi, plot_stat_map, plot_glass_brain\n\ntemplate_nii = load_mni152_template()\ntemplate_mask_nii = load_mni152_brain_mask()","6f57208f":"def get_images_metadata(collection_ids):\n    images = []\n    for collection_id in collection_ids:\n        url = \"http:\/\/neurovault.org\/api\/collections\/%d\/images\/?format=json\"%collection_id\n        while url:\n            r = requests.get(url)\n            d = r.json()\n            images += d['results']\n            url = d['next']\n    return pd.DataFrame(images)","d923ea96":"collection_ids = [3235]","c24c3537":"all_images_df = get_images_metadata(collection_ids)\nall_images_df.columns","836d0c2b":"ss_images_df = all_images_df[all_images_df.analysis_level == 'single-subject']\nss_images_df.describe()","e5070158":"def perform_metaanalysis(images_df):\n    z_imgs = []\n    for i, row in images_df.iterrows():\n        download_url = row['file']\n        print(\"Downloading %s\"%download_url)\n        r = requests.get(download_url)\n        fp = io.BytesIO(r.content)\n        gzfileobj = GzipFile(filename=\"tmp.nii.gz\", mode='rb', fileobj=fp)\n        nii = nb.Nifti1Image.from_file_map({'image': nb.FileHolder(\"tmp.nii.gz\", gzfileobj)})\n\n        # making sure all images have the same size\n        resampled_nii = resample_to_img(nii, template_nii)\n        z_imgs.append(resampled_nii)\n\n    z_data = apply_mask(z_imgs, template_mask_nii)\n    results = stouffers(z_data, template_mask_nii, inference='ffx', null='theoretical', corr='FWE', two_sided=True)\n    return results","711216d9":"results = perform_metaanalysis(ss_images_df)","eeaafc47":"results.images.keys()","c54978f4":"plot_roi(math_img(formula = '(a < 0.05)*mask', a=results.images['p'], mask=template_mask_nii))","d9a9fefd":"ss_above_18_df = ss_images_df[ss_images_df.age > 18]","0743bcad":"len(ss_above_18_df)","c0a8cb5c":"results = perform_metaanalysis(ss_above_18_df)\nplot_roi(math_img(formula = '(a < 0.05)*mask', a=results.images['p'], mask=template_mask_nii))","f8704ada":"## Defining which images will be used in the metaanalysis\nWe begin by creating a helper function to get metadata for all images that are part of a set of collections we are interested in","5a7b03c3":"The above function downloads the selected maps and resamples them to match dimensions of the MNI template. Let's run it!","0f7a0cc6":"No we can plot the statistically significan ROIs","a7dca1f7":"In this excercise we are coing to use only one collection but this list can be extended to multiple collections","d5aeade1":"This tutorial shows how to use NeuroVault API and NiMARE to perfroma a metaanalysis on a set of single subject maps","1e9909c3":"## Filtering with metadata\nBecause the DataFrame includes metadata we can use them to filter the images going into the metaanalysis. Lets showcase this, by redoing the above metaanalysis only with data from participants over 18 years old.","2b2ca1c8":"## Performing the metaanalysis\nWe begin by defining a helper function that takes a Dataframe of selected images and performs Stouffer's metaanalysis on them.\n\n**Disclaimer: the maps in this example are T maps which is technically incorrect for this technique. Without knowing the first level desing it is impossible to asses the degrees of freedom and convert them to Z maps, but for the sake of this excercise we will assume T == Z**","48a6c27a":"The function returns a Pandas DataFrame with all metadata associated with the images. This way we can filter what images should go into our metaanalysis. We will only use single subject maps from this collection"}}