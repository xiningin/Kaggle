{"cell_type":{"d5f78782":"code","daec3532":"code","e0afd095":"code","0d99329a":"code","4917e152":"code","2a8c8d4f":"code","dbd4817d":"code","43476b67":"code","891d337a":"code","0bc37fc9":"code","d0bd4858":"code","ebdc5c2b":"code","dfe2b10a":"code","7f010abf":"code","23d7d419":"code","7318caa5":"code","37d2aaa9":"code","a2da8d7b":"code","5e6c589c":"code","f2c33dd4":"code","56bc4a12":"code","63c8ff9c":"code","a663d623":"code","7bc85ac6":"code","e5013459":"code","a759c4c2":"code","94977b05":"code","191e41d0":"code","0185abe3":"code","b1e15663":"code","d228c66e":"code","31d96818":"code","7259850e":"code","47d8c381":"code","6d6d7873":"code","83681245":"code","17f1feed":"code","ac10fefb":"code","194c454c":"code","64f83477":"code","90eed42e":"code","65c1c710":"code","f602e84c":"code","4b807fb0":"code","589dc02f":"code","bb0bf996":"code","847d1505":"code","0f067aab":"code","2b2dd8bd":"code","0cdb1e0a":"code","5be6c2f2":"code","33597b6e":"code","0d6afbe6":"code","ad4adb22":"code","665d0ff0":"code","fcb78eba":"code","828abd1a":"code","67338890":"code","aa59ce16":"code","33353b6d":"code","00708495":"code","dcccd896":"code","33f64924":"code","69317407":"code","1d5443be":"markdown","ab2cc647":"markdown","b587e661":"markdown","0a3a1749":"markdown","98e75daa":"markdown","45443e82":"markdown","7595c9fc":"markdown","8b6021af":"markdown","bc8bdbe8":"markdown","ffdd1f28":"markdown","15f32639":"markdown","e4cc70f1":"markdown","bd286b78":"markdown"},"source":{"d5f78782":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","daec3532":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import preprocessing \nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, plot_confusion_matrix\nfrom sklearn.metrics import classification_report, confusion_matrix","e0afd095":"pip install autoviz","0d99329a":"pip install xlrd","4917e152":"df = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\ndf","2a8c8d4f":"df.head()","dbd4817d":"df.tail()","43476b67":"df.dtypes","891d337a":"df.columns","0bc37fc9":"df.shape","d0bd4858":"df.size","ebdc5c2b":"df.info()","dfe2b10a":"df.describe()","7f010abf":"df.duplicated().sum()","23d7d419":"df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1).skew()","7318caa5":"df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1).corr()","37d2aaa9":"plt.figure(figsize=(16,9))\nx = df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1)\nax = sns.heatmap(df.corr(),annot = True,cmap = 'viridis')\nplt.show()","a2da8d7b":"df.drop(['ID'],axis = 1,inplace = True)\ndf","5e6c589c":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz('..\/input\/customer-analytics\/Train.csv')","f2c33dd4":"df['Warehouse_block'].value_counts()","56bc4a12":"sns.countplot(x = 'Warehouse_block',data = df)\nplt.show()","63c8ff9c":"df['Mode_of_Shipment'].value_counts()","a663d623":"sns.countplot(x = 'Mode_of_Shipment',data = df)\nplt.show()","7bc85ac6":"df['Product_importance'].value_counts()","e5013459":"sns.countplot(x = 'Product_importance',data = df)\nplt.show()","a759c4c2":"df['Gender'].value_counts()","94977b05":"sns.countplot(x = 'Gender',data = df)\nplt.show()","191e41d0":"fig = px.histogram(df, 'Cost_of_the_Product',             \n                   color='Warehouse_block',\n                   title=\"<b>Average cost by Warehouse_block<\/b>\")\n\nfig.add_vline(x=df['Cost_of_the_Product'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n# Block F has more products \n# products of cost around 250-274 are more in number\n# products of cost 1-150 and 275-315 are less in number\n# data is distributed almost equally before and after mean","0185abe3":"fig = px.histogram(df, 'Cost_of_the_Product',             \n                   color='Mode_of_Shipment',\n                   title=\"<b>Average cost by mode of shipment<\/b>\")\n\nfig.add_vline(x=df['Cost_of_the_Product'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n# for any cost mode of shipmest is highly done by ship","b1e15663":"fig = px.histogram(df, 'Cost_of_the_Product',             \n                   color='Product_importance',\n                   title=\"<b>Average cost by Product_importance<\/b>\")\n\nfig.add_vline(x=df['Cost_of_the_Product'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n#Even for high cost there is no product importance\n# most of the products are low importance if it is high cost","d228c66e":"fig = px.histogram(df, 'Cost_of_the_Product',             \n                   color='Gender',\n                   title=\"<b>Average cost by Gender<\/b>\")\n\nfig.add_vline(x=df['Cost_of_the_Product'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n# There is no much difference on what gender is buying what cost of product.","31d96818":"fig = px.histogram(df, 'Weight_in_gms',             \n                   color='Warehouse_block',\n                   title=\"<b>Average weight by Warehouse_block<\/b>\")\n\nfig.add_vline(x=df['Weight_in_gms'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n# Most of the products are in weight between 1000-2000 gms and 4000-6000 gms","7259850e":"fig = px.histogram(df, 'Weight_in_gms',             \n                   color='Mode_of_Shipment',\n                   title=\"<b>Average weight by mode of shipment<\/b>\")\n\nfig.add_vline(x=df['Weight_in_gms'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()\n\n# Most of the products have mode of shipment as ship","47d8c381":"fig = px.histogram(df, 'Weight_in_gms',             \n                   color='Product_importance',\n                   title=\"<b>Average weight by Product_importance<\/b>\")\n\nfig.add_vline(x=df['Weight_in_gms'].mean(), line_width=2, line_dash=\"dash\", line_color=\"black\")\n\nfig.show()","6d6d7873":"fig = px.histogram(data_frame = df,\n             x = 'Customer_rating',\n             color='Gender', title=\"<b>Counts of customer ratings<\/b>\",\n             template='plotly_dark')\nfig.update_layout(bargap=0.2)\nfig.show()\n\n# Females given 1,3,4,5 ratings morethan males\n# Males given 2 rating morethan females\n# ratung 3 has been choosen most","83681245":"fig = px.histogram(data_frame = df,x = 'Warehouse_block',color='Reached.on.Time_Y.N',title = \"<b>Warehouse vs Reached on Time or not<\/b>\")\nfig.update_layout(bargap=0.2)\nfig.show()\n\n# Nearly 60% in every block arrived on time","17f1feed":"fig = px.histogram(data_frame = df,x = 'Warehouse_block',color='Customer_rating',title = \"<b>Warehouse vs Customer Rating<\/b>\")\nfig.update_layout(bargap=0.2)\nfig.show()\n\n# Warehouse B got rating 3 more\n# Warehouse A got rating 1 more\n# Warehouse C got rating 3 more\n# Warehouse B got rating 2 more\n# Warehouse F got rating 3 more","ac10fefb":"fig = px.histogram(data_frame = df,x = 'Warehouse_block',color='Customer_care_calls',title = \"<b>Warehouse vs Customer Care Calls<\/b>\")\nfig.update_layout(bargap=0.2)\nfig.show()","194c454c":"df[['Warehouse_block','Discount_offered']].sort_values('Discount_offered').value_counts()","64f83477":"fig = px.histogram(data_frame = df,x = 'Warehouse_block',color='Discount_offered',title = \"<b>Warehouse vs Discount Offered<\/b>\")\nfig.update_layout(bargap=0.2)\nfig.show()","90eed42e":"fig = px.histogram(data_frame = df,x = 'Mode_of_Shipment',color='Reached.on.Time_Y.N',title = \"<b>mode of shipment vs Reached on Time or not<\/b>\")\nfig.update_layout(bargap=0.2)\nfig.show()\n\n# Almost 60% of goods reached on time regardless of any mode of shipment","65c1c710":"fig = px.histogram(data_frame = df,x = 'Product_importance',color='Reached.on.Time_Y.N',title = \"<b>mode of shipment vs Reached on Time or not<\/b>\")\nfig.update_layout(bargap=0.2)\nfig.show()\n","f602e84c":"plt.figure(figsize=(6,8))\nx = df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1)\nfor i in x.columns[:4]:\n    sns.histplot(x[i],kde = True)\n    plt.show()","4b807fb0":"plt.figure(figsize=(6,8))\nx = df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1)\nfor i in x.columns[4:]:\n    sns.histplot(x[i],kde = True)\n    plt.show()","589dc02f":"x = df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')   \n    plt.xlabel(i)\n    plt.show()","bb0bf996":"x = df.drop(['Warehouse_block','Mode_of_Shipment','Product_importance','Gender'],axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x,color = 'yellowgreen')   \n    plt.xlabel(i)\n    plt.show()","847d1505":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in x.columns:\n    count_outliers(df,i)","0f067aab":"df","2b2dd8bd":"n = 'Warehouse_block'\ndf_ohe = df.copy()\nlabel_1 = pd.get_dummies(df_ohe,prefix = n ,columns=[n],drop_first=False)\nlabel_1.insert(loc=1, column=n, value=df[n].values)\nlabel_1.drop([n],axis = 1,inplace = True)\nlabel_1","0cdb1e0a":"n = 'Mode_of_Shipment'\ndf_ohe = df.copy()\nlabel_2 = pd.get_dummies(label_1,prefix = n ,columns=[n],drop_first=False)\nlabel_2.insert(loc=1, column=n, value=df[n].values)\nlabel_2.drop([n],axis = 1,inplace = True)\nlabel_2","5be6c2f2":"n = 'Product_importance'\ndf_ohe = df.copy()\nlabel_3 = pd.get_dummies(label_2,prefix = n ,columns=[n],drop_first=False)\nlabel_3.insert(loc=5, column=n, value=df[n].values)\nlabel_3.drop([n],axis = 1,inplace = True)\nlabel_3","33597b6e":"n = 'Gender'\ndf_ohe = df.copy()\nlabel_4 = pd.get_dummies(label_3,prefix = n ,columns=[n],drop_first=False)\nlabel_4.insert(loc=5, column=n, value=df[n].values)\nlabel_4.drop([n],axis = 1,inplace = True)\nlabel_4","0d6afbe6":"label_4 = label_4[['Customer_care_calls', 'Customer_rating', 'Cost_of_the_Product',\n       'Prior_purchases', 'Discount_offered', 'Weight_in_gms',\n       'Warehouse_block_A', 'Warehouse_block_B',\n       'Warehouse_block_C', 'Warehouse_block_D', 'Warehouse_block_F',\n       'Mode_of_Shipment_Flight', 'Mode_of_Shipment_Road',\n       'Mode_of_Shipment_Ship', 'Product_importance_high',\n       'Product_importance_low', 'Product_importance_medium', 'Gender_F',\n       'Gender_M','Reached.on.Time_Y.N',]]","ad4adb22":"label_4","665d0ff0":"corrmat = label_4.corr()\ntop_corr_features = corrmat.index\n\nplt.figure(figsize=(20,15))\n\n#plot heat map\ng=sns.heatmap(label_4[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","fcb78eba":"sns.pairplot(df)","828abd1a":"plt.figure(figsize=(6,8))\nfor i in label_4.columns:\n    sns.scatterplot(x = 'Reached.on.Time_Y.N',y = i,data = label_4,color = 'Red')\n    plt.show()","67338890":"scaler = StandardScaler()\nX_train, X_test, y_train, y_test = train_test_split(label_4.drop('Reached.on.Time_Y.N',axis = 1),label_4['Reached.on.Time_Y.N'],test_size = 0.25,random_state = 0)\nforest= RandomForestClassifier(n_estimators =40, random_state = 0)\nscaler = StandardScaler()\nscaler.fit(X_train, y_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","aa59ce16":"forest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)\nprint('Accuracy is:',forest.score(X_test,y_test))","33353b6d":"knn = KNeighborsClassifier()","00708495":"knn.fit(X_train,y_train)","dcccd896":"pred = knn.predict(X_test)\npred","33f64924":"print(classification_report(y_test,pred))","69317407":"cmat = confusion_matrix(y_test,pred)\nprint('TN - True Negative {}'.format(cmat[0,0]))\nprint('FP - False Positive {}'.format(cmat[0,1]))\nprint('FN - False Negative {}'.format(cmat[1,0]))\nprint('TP - True Positive {}'.format(cmat[1,1]))\nprint('Accuracy Rate: {}'.format(np.divide(np.sum([cmat[0,0],cmat[1,1]]),np.sum(cmat))))\nprint('Misclassification Rate: {}'.format(np.divide(np.sum([cmat[0,1],cmat[1,0]]),np.sum(cmat))))","1d5443be":"# Data Visualisation Using Autoviz","ab2cc647":"# Exploratory Data Analysis","b587e661":"# Data visualisation","0a3a1749":"# Count Of Outliers","98e75daa":"## Encoding","45443e82":"# Data Preprocessing","7595c9fc":"# Feature Selection, Feature Scaling","8b6021af":"# Basic Data Cleaning","bc8bdbe8":"# Importing Libraries","ffdd1f28":"## Rearranging Columns","15f32639":"# Prediction using KNN Classification","e4cc70f1":"# Prediction Using Random Forest Classification","bd286b78":"# Loading DataSet"}}