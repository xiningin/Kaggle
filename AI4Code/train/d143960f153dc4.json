{"cell_type":{"70f42f91":"code","e6112e86":"code","9a0dcda1":"code","53eba978":"code","c91a0dfa":"code","6b545871":"code","bc4f6152":"code","fb6bb725":"code","5239494c":"code","115e4120":"code","52069af5":"code","08a16cae":"code","7759fdab":"code","3c9cfda3":"code","9f56ede2":"code","33caae0f":"code","307c859e":"code","61078f4c":"code","9d43f423":"code","ce7d0de3":"code","dc86f55c":"code","d5fba9d7":"code","1542a6c6":"code","a55188a7":"code","87e9e2e8":"code","47b60541":"code","1a8845f5":"code","be551ebe":"code","5ec50dc9":"code","b20f2b67":"code","f66439b6":"code","3e4248f6":"code","fa359be4":"code","419b3728":"code","4ceba6ff":"code","fa1046a7":"code","67c5b3af":"code","45f9fad5":"code","a50e50c5":"code","bef56cd5":"code","9fa2fa91":"code","06c13e32":"code","ea61be0a":"code","632fc44c":"code","d03103bc":"code","951489f0":"code","ac884b7c":"code","5a036efa":"code","b5095288":"code","487656de":"code","fd6a2737":"code","513ffe8c":"code","126c9be6":"code","f8daeddf":"code","4ecbfedf":"code","80a568fc":"code","a989ad42":"code","820d8726":"code","df6f0e4e":"code","087720d4":"markdown","6b296b96":"markdown","c1b7818c":"markdown","e4d57ddd":"markdown","93d9c3f1":"markdown","60e05841":"markdown","44a7fc55":"markdown"},"source":{"70f42f91":"# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import datasets","e6112e86":"metadata = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')\nmetadata","9a0dcda1":"metadata.dx.value_counts()","53eba978":"df1 = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_L.csv')\ndf1.head()","c91a0dfa":"df1.label.value_counts()","6b545871":"labels = [\"akiec\",\"bcc\", \"bkl\", \"df\", \"nv\", \"vasc\", \"mel\"]","bc4f6152":"y = df1['label']","fb6bb725":"X = df1.drop(['label'], axis = 1)","5239494c":"X1 = np.array(X)","115e4120":"image = X1[0].reshape(28,28)","52069af5":"n_samples = len(df1.index)\nimages = X1.reshape(n_samples,28,28)","08a16cae":"plt.figure(figsize = (10,20))\nfor i in range(0,50) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap = 'gray_r')\n    plt.title(labels[y[i]])","7759fdab":"# On normalise les valeurs entre 0 et 1\nX = X\/225","3c9cfda3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","9f56ede2":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(hidden_layer_sizes = (200,100,50))\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)","33caae0f":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","307c859e":"Gray_sklearn = mlp_score","61078f4c":"pd.crosstab(y_test, y_mlp, rownames = ['Reel'], colnames = ['Prediction'], margins = True)","9d43f423":"from keras.utils.np_utils import to_categorical","ce7d0de3":"print(y[0])\ny_cat = to_categorical(y)\nprint(y_cat[0])","dc86f55c":"num_classes = y_cat.shape[1]\nprint(num_classes)","d5fba9d7":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=1)","1542a6c6":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","a55188a7":"from keras.models import Sequential\nfrom keras.layers import Dense","87e9e2e8":"model = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","47b60541":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","1a8845f5":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs = 50, verbose=1)","be551ebe":"model.evaluate(X_test,y_test)","5ec50dc9":"a = model.evaluate(X_test,y_test)","b20f2b67":"Gray_Keras = a[1]","f66439b6":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","3e4248f6":"plot_scores(train)","fa359be4":"df2 = pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')\ndf2.head()","419b3728":"y_ = df2['label']","4ceba6ff":"X_ = df2.drop(['label'], axis = 1)","fa1046a7":"X1_ = np.array(X_)","67c5b3af":"image = X1_[0].reshape(28,28,3)","45f9fad5":"plt.imshow(image)","a50e50c5":"n_samples = len(df2.index)\nimages = X1_.reshape(n_samples,28,28,3)","bef56cd5":"plt.figure(figsize = (10,20))\nfor i in range(0,50) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i])\n    plt.title(labels[y[i]])","9fa2fa91":"# On normalise les valeurs entre 0 et 1\nX_ = X_\/225","06c13e32":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_, y_, test_size = 0.2, random_state = 1)","ea61be0a":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(hidden_layer_sizes = (200,100,50))\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)","632fc44c":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","d03103bc":"Colore_sklearn = mlp_score","951489f0":"pd.crosstab(y_test, y_mlp, rownames = ['Reel'], colnames = ['Prediction'], margins = True)","ac884b7c":"print(y_[0])\ny_cat = to_categorical(y_)\nprint(y_cat[0])","5a036efa":"num_classes = y_cat.shape[1]\nprint(num_classes)","b5095288":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_, y_cat, test_size = 0.2, random_state = 1)","487656de":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","fd6a2737":"model = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","513ffe8c":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","126c9be6":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=30, verbose=1)","f8daeddf":"model.evaluate(X_test,y_test)","4ecbfedf":"a = model.evaluate(X_test,y_test)","80a568fc":"Colore_Keras = a[1]","a989ad42":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","820d8726":"plot_scores(train)","df6f0e4e":"print(\"Gray :\")\nprint(\"Sklearn: \", Gray_sklearn)\nprint(\"Keras : \", Gray_Keras)\nprint(\"Color :\")\nprint(\"Sklearn: \", Colore_sklearn)\nprint(\"Keras : \", Colore_Keras)","087720d4":"Import lesion data (gray)","6b296b96":"# *R\u00e9seaux denses (sklearn)*","c1b7818c":"# *Database Gray*","e4d57ddd":"# *R\u00e9seaux denses (Keras\/Tensorflow)*","93d9c3f1":"Import metadata","60e05841":"# *Database color\u00e9*","44a7fc55":"# *R\u00e9seaux denses (Keras\/Tensorflow)*"}}