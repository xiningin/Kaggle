{"cell_type":{"2ac26f41":"code","f41ac7a7":"code","d7401a80":"code","4cc9e3d4":"code","ebff3d0a":"code","14316a63":"code","91f13b4c":"code","09d1e305":"code","195fab20":"code","bee96839":"code","3d89658c":"code","38492de9":"code","c7ff1ebc":"code","10205709":"code","76a505e1":"code","34b7a944":"code","2c8731d9":"code","ed48dfe1":"code","322f0d4c":"code","6669e0c7":"code","656c54cc":"code","15e0160c":"code","fdfba4e2":"code","2cfa6bc8":"code","8a5bb633":"code","6f7f4f2e":"code","b7cb3348":"code","278de2b6":"code","a3aeb8f5":"code","b26cd3fd":"code","fca5d716":"code","f837969d":"code","5f14f18c":"code","e5cf9501":"code","452b7fab":"code","32b2a66a":"code","3dcb7003":"code","b3060571":"code","8f95e618":"code","8537cbfa":"code","df46c103":"code","000f221b":"code","e31747d5":"code","f9217adf":"code","5254d87e":"code","62eb5ed2":"code","309b8379":"code","cd057a8a":"markdown","73084387":"markdown","428ff785":"markdown","8fed4775":"markdown","60b8e404":"markdown","eb24d259":"markdown","453acfdd":"markdown","4256f4f4":"markdown","4c957baa":"markdown","dc434747":"markdown","22ddc8b5":"markdown","f229f418":"markdown","05492284":"markdown","a55d0ae8":"markdown","ebf8d367":"markdown","1cd54b30":"markdown","16aeea85":"markdown"},"source":{"2ac26f41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f41ac7a7":"#load the csv file and make the data frame\nstartup_df = pd.read_csv('..\/input\/startup_funding.csv')","d7401a80":"#display the data frame\nstartup_df","4cc9e3d4":"#display the how many rows and columns\nprint(\"The dataframe has {} rows and {} columns\".format(startup_df.shape[0],startup_df.shape[1]))","ebff3d0a":"#display the data types of columns\nstartup_df.dtypes","14316a63":"#display the informtion of dataframe\nstartup_df.info()","91f13b4c":"#display how many null values are there in each column\nstartup_df.apply(lambda x : sum(x.isnull()))","09d1e305":"#display graphically how many null values are there in each column \nsns.heatmap(startup_df.isnull(),cbar=0)\nplt.show()","195fab20":"#fill the null values of CityLocation column with value NotSpecific\nstartup_df['CityLocation'] = startup_df['CityLocation'].fillna(value = 'NotSpecific')","bee96839":"#fill the null values of IndustryVertical column with value Other\nstartup_df['IndustryVertical'] = startup_df['IndustryVertical'].fillna(value = 'Other')","3d89658c":"#display which CityLocation has more frequency or more startups\nstartup_df['CityLocation'].value_counts()","38492de9":"def convert_to_one_location(x):\n    x = x.lower()\n    if re.search('\/',x):\n        return(x.split('\/')[0].strip())\n    else:\n        return(x.strip())\n    \nstartup_df['CityLocation'] = startup_df['CityLocation'].apply(convert_to_one_location)","c7ff1ebc":"startup_df['CityLocation'].value_counts()","10205709":"startup_df['InvestmentType'].value_counts()","76a505e1":"def align_investment(x):\n    x = str(x).lower()\n    x = x.replace(' ','')\n    return(x)\nstartup_df['InvestmentType'] = startup_df['InvestmentType'].apply(align_investment)","34b7a944":"startup_df['InvestmentType'].value_counts()","2c8731d9":"# now copy this data frame and make new data frame and del unnecessary columns\nnew_startup_df = startup_df.copy()","ed48dfe1":"#display the new data frame\nnew_startup_df","322f0d4c":"del new_startup_df['Remarks']\ndel new_startup_df['SNo']","6669e0c7":"new_startup_df","656c54cc":"#we have to make sure that all date are in proper format(i.e.,DD\/MM\/YYYY)\ndef count_date_proper(x):\n    return(len(x.split('\/')))\nnew_startup_df[new_startup_df['Date'].apply(count_date_proper) != 3]","15e0160c":"new_startup_df['Date'].replace('12\/05.2015','12\/05\/2015',inplace=True)\nnew_startup_df['Date'].replace('13\/04.2015','13\/04\/2015',inplace=True)\nnew_startup_df['Date'].replace('15\/01.2015','15\/01\/2015',inplace=True)\nnew_startup_df['Date'].replace('22\/01\/\/2015','22\/01\/2015',inplace=True)","fdfba4e2":"#now we have to make date to time series\nnew_startup_df['Date'] = pd.to_datetime(new_startup_df['Date'],format='%d\/%m\/%Y')","2cfa6bc8":"new_startup_df['Date'].dtypes","8a5bb633":"new_startup_df['AmountInUSD']","6f7f4f2e":"def convert_amount(x):\n    if(re.search(',',x)):\n        return(x.replace(',',''))\n    else:\n        return(x)\nnew_startup_df['AmountInUSD'] = new_startup_df[new_startup_df['AmountInUSD'].notnull()]['AmountInUSD'].apply(convert_amount).astype('int')","b7cb3348":"#now we have to fill na values in AmountInUSD column with mean values\nnew_startup_df['AmountInUSD'] = new_startup_df['AmountInUSD'].fillna(value = np.mean(new_startup_df['AmountInUSD']))","278de2b6":"new_startup_df['AmountInUSD'] = new_startup_df['AmountInUSD'].astype('int')","a3aeb8f5":"new_startup_df['InvestmentType'].replace('nan',np.NaN,inplace=True)","b26cd3fd":"new_startup_df['InvestmentType'].value_counts()","fca5d716":"#fill the null value of investment type with backward filling method\nnew_startup_df['InvestmentType'].fillna(method='bfill',inplace=True)","f837969d":"#now we will calculate in each startup how many investors are there\ndef count_investors(x):\n    if(re.search(',',x) and x!='empty'):\n        return(len(x.split(',')))\n    elif x != 'empty':\n        return 1\n    else:\n        return -1\nnew_startup_df['NumberOfInvestors'] = new_startup_df['InvestorsName'].replace(np.NaN,'empty').apply(count_investors)","5f14f18c":"#display which startup has maximum investors\nnew_startup_df[new_startup_df['NumberOfInvestors'] == new_startup_df['NumberOfInvestors'].max()]","e5cf9501":"#fill na valus of InvestorsName with None\nnew_startup_df['InvestorsName'] = new_startup_df['InvestorsName'].fillna(value='None')","452b7fab":"#find unique Investors\nInvestors = []\ninvestor_list = new_startup_df['InvestorsName'].apply(lambda x : x.lower().strip().split(','))","32b2a66a":"for i in investor_list:\n    for j in i:\n        if(i!='none' or i!=''):\n            Investors.append(j.strip())\nunique_investors = list(set(Investors))","3dcb7003":"new_startup_df.iloc[:,[1,2,3,4,6]] = new_startup_df.iloc[:,[1,2,3,4,6]].applymap(lambda x:x.lower().replace(' ','')if pd.notnull(x) is True else x)","b3060571":"def check(x):\n    if(pd.notnull(x)):\n        return x.lower()\nnew_startup_df.iloc[:,3] = new_startup_df.iloc[:,3].apply(check)","8f95e618":"#display graphically how many null values are there\nsns.heatmap(new_startup_df.isnull(),cbar=0)\nplt.show()","8537cbfa":"#make a list of unique startupname\nuniquestartupname = list(new_startup_df['StartupName'].unique())","df46c103":"#make a list of all startupname\nstartupname = list(new_startup_df['StartupName'])","000f221b":"#remove ambigous records\nfor i in range(len(uniquestartupname)):\n    for j in range(len(startupname)):\n        if(re.search(uniquestartupname[i],startupname[j])):\n            startupname[j] = uniquestartupname[i]","e31747d5":"#StartupName column without ambigous records\nnew_startup_df['StartupName'] = startupname","f9217adf":"#display how many unique startup are there\nlen(new_startup_df['StartupName'].unique())","5254d87e":"#display 5 number summary of AmountInUSD column\nnew_startup_df['AmountInUSD'].describe().astype('int')","62eb5ed2":"#display top 10 funding startups\nnew_startup_df.groupby(by='StartupName')['AmountInUSD'].sum().sort_values(ascending =False).head(10)","309b8379":"#display top 10 startups which are having more investors\nnew_startup_df.groupby(by='StartupName').sum().sort_values(by='NumberOfInvestors',ascending=False).head(10)","cd057a8a":"so from above we can see there are null values in some columns","73084387":"so from above we can see that it is consider Bangalore and bangalore different and some city location has two location separated by '\/'.","428ff785":"so from above we can see that amount is a string so we have to convert it into int and  we have to remove ',' ","8fed4775":"so 1792 unique startup are there","60b8e404":"so from above we can see paytm is highest funding startup and shopclues at 10 number","eb24d259":"so we make all city location column value to small letter and who is having two city location we are taking first one only. \n\nso from above we can see bangalore has highest number of startups","453acfdd":"so now we ave only four investment type and one null value is there","4256f4f4":"so above what we are doing is we are splitting the date and after splitting length should be 3 if not three that means date is not properly formatted.\n\nso from above we can see not properly formatted dates","4c957baa":"So now all dates are properly formatted","dc434747":"so from above we make records like ola.com as ola or flipkart.com as flipkart","22ddc8b5":"so from above we can see that it is consider Seed funding and SeedFunding as different and other column also like that ","f229f418":"so from above we can see now dates are time series","05492284":"so from above we can see Remarks column has highest null values we can remove that column and SNo column also we can remove","a55d0ae8":"so from above we can see ola has 46 investors","ebf8d367":"so from above we can see Innov8 and MyChild App startup has maximum investors","1cd54b30":"so from above we can see that standard deviation is very large that means data is more dispersed\nand mean>median so it is right skewed","16aeea85":"so from above we can see Remarks column has highest null values"}}