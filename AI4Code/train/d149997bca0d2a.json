{"cell_type":{"beae2546":"code","3db1711b":"code","d0374a2b":"code","af833c3e":"code","da7ffdfd":"code","fab6aeb1":"code","1ac5e317":"code","8a7adf6b":"code","27cb4470":"code","26302473":"code","823b4a12":"code","19ae22fe":"code","6b744659":"code","1e081c31":"code","ae9dc7ef":"code","ac6e8fc8":"code","eeaced7e":"code","90cc1cb4":"code","251a3662":"code","2b9a6b7b":"code","6803ad07":"code","240be802":"code","3987149f":"code","1fa0be7d":"code","b754fa2f":"code","bbf48030":"code","77935ba9":"code","01edf75b":"code","d09a78c2":"code","70e699e9":"code","0f0e9237":"code","7bc24934":"code","cf676c0e":"code","204882ee":"code","b0a39e06":"code","9e1c9916":"code","3ddb559c":"code","5825d716":"code","47e73122":"markdown","a23a27f1":"markdown","bc2d9416":"markdown","356bf207":"markdown","7ac34ac6":"markdown","d0572dd4":"markdown","e7e83946":"markdown","7e0f8cb6":"markdown","d286b5cb":"markdown","ed67dd62":"markdown","24fd4cd6":"markdown"},"source":{"beae2546":"# Reading in data\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3db1711b":"# importing libraries for visualization \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d0374a2b":"game_df = pd.read_csv('\/kaggle\/input\/videogame-metacritic\/metacritic_18.07.2021_csv.csv')\ngame_df.head()","af833c3e":"# Dimension 30,777 rows (data input) and 7 columns\ngame_df.shape","da7ffdfd":"game_df.info()","fab6aeb1":"# Checking for NaN value\n# Resently released Game might be missing metascore and userscore\ngame_df.isna().sum()","1ac5e317":"# Percentage of missing value\nprint('Missing Data Percentage\\n')\nfor col in game_df.columns:\n    print(col,\":\",round(game_df[col].isna().sum() \/ game_df.shape[0] * 100,2),\"%\")","8a7adf6b":"# Convert date to datetime object\ngame_df['date'] = pd.to_datetime(game_df['date'])","27cb4470":"# Looking at the new date column\ngame_df.head()","26302473":"# Checking the Data type of date again\ngame_df.info()","823b4a12":"# Counting unique instances of platforms\ngame_df['platforms'].value_counts()","19ae22fe":"# Checking unique value of platforms \ngame_df['platforms'].unique()","6b744659":"# Cleaning platforms name iOS\/n...(Apple Arcade) to just iOS (Apple Arcade)\ngame_df.loc[game_df['platforms'] == 'iOS\\n                                                                                    \\xa0(Apple Arcade)','platforms'] = 'iOS (Apple Arcade)'","1e081c31":"# Checking the new cleaner unique value of platforms\ngame_df['platforms'].unique()","ae9dc7ef":"# Counting instances of each Platform\nplt.figure(figsize=(15,8))\nax  = sns.countplot(data=game_df,x='platforms',order=game_df['platforms'].value_counts().index,palette='Set2')\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()),\n                    (p.get_x(), p.get_height()+10), fontsize=12)\nplt.xticks(rotation=90)\nplt.show()","ac6e8fc8":"# Top 3 Genre of game on Top 10 Platforms\ntop3_genre = game_df['genre'].value_counts().iloc[:3].index.to_list()\ntop10_plats = game_df['platforms'].value_counts().iloc[:10].index.to_list()\n\nplt.figure(figsize=(15,8))\nax  = sns.countplot(data=game_df[(game_df['genre'].isin(top3_genre)) & (game_df['platforms'].isin(top10_plats))],\n                    x='platforms',order=game_df['platforms'].value_counts().iloc[:10].index,\n                    hue='genre',palette='Set3')\nfor p in ax.patches:\n        ax.annotate('{:.0f}'.format(p.get_height()),\n                    (p.get_x()+0.02, p.get_height()+10), fontsize=10)\nplt.xticks(rotation=90)\nplt.show()","eeaced7e":"# Metascore \ngame_df['metascore'].unique()","90cc1cb4":"game_df['metascore'].value_counts()","251a3662":"game_df.sort_values(by='metascore',ascending=False)","2b9a6b7b":"# Games with highest metascore\ngame_df[game_df['metascore'] == game_df['metascore'].max()]","6803ad07":"plt.figure(figsize=(15,8))\n\nsns.countplot(data=game_df,x='userscore',order=game_df['userscore'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()\n\n# Most of the userscore is \"tbd\"","240be802":"# Number of game released by year\n\ngame_df['year'] = pd.DatetimeIndex(game_df['date']).year\nnum_game_release = game_df.groupby('year').count()['titles'].reset_index()\nnum_game_release.columns = ['Year','Count']\nplt.figure(figsize=(15,8))\nax = sns.lineplot(data=num_game_release,x='Year',y='Count')\nplt.show()","3987149f":"plt.figure(figsize=(15,8))\nsns.barplot(data=num_game_release,x='Year',y='Count',palette='inferno')\nplt.show()","1fa0be7d":"# Genre Distribution\nplt.figure(figsize=(15,8))\nsns.countplot(data=game_df,x='genre',order=game_df['genre'].value_counts().index)\nplt.xticks(rotation=90)\nplt.show()","b754fa2f":"# Meta Score and Platform\n\nmeta_platform = game_df['metascore'].groupby(game_df['platforms']).mean().sort_values(ascending=False)\nmeta_platform","bbf48030":"# Top 5 Average metascore score by Platform\ntop5_platform_rating = meta_platform.head(5).index.to_list()\ntop5_platform_rating","77935ba9":"# Number of game that is not listed in the Top 5 Average metascore list\ngame_df[~game_df['platforms'].isin(top5_platform_rating)].count()['platforms']","01edf75b":"# Metascore and Genre\n\ngame_df['metascore'].groupby(game_df['genre']).mean().sort_values(ascending=False)","d09a78c2":"# New Dataframe grouping by year and platform \nyear_platform = game_df.groupby(['year','platforms']).count()\nyear_platform","70e699e9":"# 2021 - number of title represents the number of game released by particular platform when structure the dataframe like I did\nyear_platform.loc[2021,'titles'].sort_values(ascending=False)","0f0e9237":"# Games under PlayStation Platform\nplaystation_df = game_df[game_df['platforms'].str.contains('PlayStation')]\nplaystation_df.head()","7bc24934":"playstation_df.groupby('platforms').count()['titles'].plot.pie(autopct='%1.2f%%',figsize=(15,8),\n                                                              explode = (0.4,0.05,0.05,0.05,0.2,0.3),startangle=0,cmap='Set3',\n                                                              textprops={'fontweight':'bold','fontsize':12})\nplt.ylabel(\"\")\nplt.show()","cf676c0e":"# Top 10 metascore game among PlayStations \nplaystation_df.sort_values(by='metascore',ascending = False).head(10)","204882ee":"# Genre Count by playstation \nplt.figure(figsize=(15,8))\nsns.countplot(data=playstation_df,x='genre',order=playstation_df['genre'].value_counts().iloc[:10].index,\n             palette='Set2')\nplt.xticks(rotation=90)\nplt.show()","b0a39e06":"# New dataframe only Xbox platforms\nxbox_df = game_df[game_df['platforms'].str.contains(\"Xbox\")]\nxbox_df.head()","9e1c9916":"plt.figure(figsize=(15,8))\nxbox_df.groupby('platforms').count()['titles'].plot.pie(autopct='%1.2f%%',figsize=(15,8),\n                                                              explode = [0.05]*4,startangle=0,cmap='Set2_r',\n                                                              textprops={'fontweight':'bold','fontsize':12})\nplt.ylabel(\"\")\nplt.show()","3ddb559c":"# Top 10 metascore game among Xbox \nxbox_df.sort_values(by='metascore',ascending = False).head(10)","5825d716":"# Genre Count by XBox \nplt.figure(figsize=(15,8))\nsns.countplot(data=xbox_df,x='genre',order=xbox_df['genre'].value_counts().iloc[:10].index,\n             palette='Set1_r')\nplt.xticks(rotation=90)\nplt.show()","47e73122":"# Video Game Visualization","a23a27f1":"# Number of Game releases by year","bc2d9416":"# Platforms","356bf207":"# Xbox","7ac34ac6":"# Overview of the Data","d0572dd4":"# Metascore and Userscore","e7e83946":"# Released Year and Platforms","7e0f8cb6":"# Game Genre Distribution","d286b5cb":"### Genre and Platforms","ed67dd62":"# Thank you for checking out my notebook!","24fd4cd6":"# PlayStation "}}