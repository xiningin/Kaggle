{"cell_type":{"76a481cb":"code","91c62493":"code","5aa66480":"code","d1b131d3":"code","ac689d18":"code","6bd749be":"code","424a95e6":"code","0d77e25e":"code","e325383d":"code","98c255c5":"code","06e3ea31":"code","967afb30":"code","6bf31c59":"code","7ba24e82":"code","81aae437":"code","ba28fb8d":"code","e745e78f":"code","dcfda763":"code","b2b20927":"code","4be5f766":"code","cbe8dce8":"code","75cc8cdb":"code","baee2a1f":"code","b4d6b706":"code","660e29e2":"code","117bdcb1":"code","597ad6b1":"code","b54a62f7":"code","c1b753b5":"code","8dbc2b24":"code","9d4b29c1":"code","4567fa15":"code","05bfee11":"code","bb538e13":"code","1bd0e88d":"code","73a3c803":"code","ff750106":"code","2cd702de":"code","066b7f75":"code","abcc72a4":"code","42a40809":"code","cc190df8":"code","2b71392a":"code","3a6637c2":"code","968f2171":"code","1f301fa9":"code","a12747c5":"code","300321d2":"code","0157775e":"code","0bd90ed0":"code","3270b232":"code","ee5feded":"code","a09f6c09":"code","211d77f4":"code","cecedd63":"code","6d0c5c6a":"code","d3c46047":"code","68e5c1da":"code","16580f0f":"code","d610d602":"code","894efcf6":"code","31d52794":"code","377dd4e6":"code","5308bcad":"code","f2cf1ce9":"code","b03a4e23":"code","0b4ede16":"code","14c6ff43":"code","1b580ada":"code","991d9c95":"code","21e5ade0":"code","0288f00e":"code","b74d885e":"markdown","3b91120f":"markdown","bced376e":"markdown","680b9937":"markdown","53512ce0":"markdown","ea850cec":"markdown","111b88fe":"markdown","3042882d":"markdown","51db6cee":"markdown","52927566":"markdown","729c810a":"markdown","88812ce5":"markdown","587100ad":"markdown","a5107b83":"markdown","617cdab1":"markdown","fd07f306":"markdown","f948db6d":"markdown","64dabd54":"markdown"},"source":{"76a481cb":"import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","91c62493":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt # visualisation of data\nfrom matplotlib.font_manager import FontProperties\nfrom matplotlib import cm\nfrom IPython.display import HTML, display\nfrom scipy.interpolate import make_interp_spline\nfrom math import floor","5aa66480":"races = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/races.csv\", encoding=\"utf8\", engine=\"python\")\ndrivers = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/drivers.csv\", encoding=\"utf8\", engine=\"python\")\nresults = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/results.csv\", encoding=\"utf8\", engine=\"python\")\nqualifying = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/qualifying.csv\", encoding=\"utf8\", engine=\"python\")\nstatus = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/status.csv\", encoding=\"utf8\", engine=\"python\")\ncircuits = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/circuits.csv\", encoding=\"utf8\", engine=\"python\")\nconstructors = pd.read_csv(\"\/kaggle\/input\/formula-1-world-championship-1950-2020\/constructors.csv\", encoding=\"utf8\", engine=\"python\")","d1b131d3":"#END POSITIONSSSS OCON\noconRow = drivers.loc[drivers['driverRef'] == 'ocon']\noconId = oconRow['driverId'][838]\n\nraces2017 = races.loc[races['year'] == 2017]\nraces2018 = races.loc[races['year'] == 2018]\nraces2018['raceId']\nraces2019 = races.loc[races['year'] == 2019]\nraces2019['raceId']\nraces2020 = races.loc[races['year'] == 2020]\nraces2020['raceId']\n\ncourseNames17 = []\ncourseNames18 = []\ncourseNames19 = []\ncourseNames20 = []\n\npositionOcon17 = []\nmeanPositionOcon17 = []\n\npositionOconWI17 = []\npositionOconSucceeded17 = []\nmeanPositionOconSucceeded17 = []\nmeanPositionOconWI17 = []\n\npodiumsOcon17 = 0\npodiumsRaceOcon17 = []\ntopTenOcon17 = 0\n\npositionOcon18 = []\nmeanPositionOcon18 = []\n\npositionOconWI18 = []\npositionOconSucceeded18 = []\nmeanPositionOconSucceeded18 = []\nmeanPositionOconWI18 = []\n\npodiumsOcon18 = 0\npodiumsRaceOcon18 = []\ntopTenOcon18 = 0\n\n\npositionOcon20 = []\nmeanPositionOcon20 = []\n\npositionOconWI20 = []\npositionOconSucceeded20 = []\nmeanPositionOconSucceeded20 = []\nmeanPositionOconWI20 = []\n\npodiumsOcon20 = 0\npodiumsRaceOcon20 = []\ntopTenOcon20 = 0\n\nstatusOcon = []\n\nfor i, r in races2017['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    courseNames17.append(races2017.loc[races2017['raceId'] == r]._get_value(i, 'name'))\n    \n    positionOconWI17.append(positions.loc[positions['driverId'] == oconId]['position'].to_numpy()[0])\n    positionOcon17.append(int(positions.loc[positions['driverId'] == oconId]['positionOrder'].to_numpy()[0]))\n\nfor i, r in races2018['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    courseNames18.append(races2018.loc[races2018['raceId'] == r]._get_value(i, 'name'))\n    \n    positionOconWI18.append(positions.loc[positions['driverId'] == oconId]['position'].to_numpy()[0])\n    positionOcon18.append(int(positions.loc[positions['driverId'] == oconId]['positionOrder'].to_numpy()[0]))\n    \nfor i, r in races2019['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    courseNames19.append(races2019.loc[races2019['raceId'] == r]._get_value(i, 'name'))\n\nfor i, r in races2020['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    courseNames20.append(races2020.loc[races2020['raceId'] == r]._get_value(i, 'name'))\n    \n    positionOconWI20.append(positions.loc[positions['driverId'] == oconId]['position'].to_numpy()[0])\n    positionOcon20.append(int(positions.loc[positions['driverId'] == oconId]['positionOrder'].to_numpy()[0]))\n\ndef getMeanPosition(positions, courseNames):\n    podiums = 0\n    topTen = 0\n    meanPositions = []\n    podiumsRace = []\n    \n    for i in range(0, len(positions)):\n        if positions[i] <= 3:\n            podiums += 1\n            podiumsRace.append(courseNames[i])\n\n        if positions[i] <= 10:\n            topTen += 1\n\n        meanPositions.append(sum(positions[:i + 1]) \/ (i + 1))\n    return meanPositions, podiums, topTen, podiumsRace\n\n#2017\nmeanPositionOcon17, podiumsOcon17, topTenOcon17, podiumsRaceOcon17 = getMeanPosition(positionOcon17, courseNames17)\n        \nfor i in positionOconWI17:\n    if i != '\\\\N':\n        positionOconSucceeded17.append(int(i))\n\nfor i in range(1, len(positionOconSucceeded17) + 1):\n    meanPositionOconSucceeded17.append(sum(positionOconSucceeded17[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionOconWI17)):\n    if positionOconWI17[i] != '\\\\N':\n        meanPositionOconWI17.append(meanPositionOconSucceeded17[j])\n        j += 1\n    else:\n        meanPositionOconWI17.append(meanPositionOconSucceeded17[j - 1])\n\n#2018\nmeanPositionOcon18, podiumsOcon18, topTenOcon18, podiumsRaceOcon18 = getMeanPosition(positionOcon18, courseNames18)\n        \nfor i in positionOconWI18:\n    if i != '\\\\N':\n        positionOconSucceeded18.append(int(i))\n\nfor i in range(1, len(positionOconSucceeded18) + 1):\n    meanPositionOconSucceeded18.append(sum(positionOconSucceeded18[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionOconWI18)):\n    if positionOconWI18[i] != '\\\\N':\n        meanPositionOconWI18.append(meanPositionOconSucceeded18[j])\n        j += 1\n    else:\n        meanPositionOconWI18.append(meanPositionOconSucceeded18[j - 1])\n\n#2020\nmeanPositionOcon20, podiumsOcon20, topTenOcon20, podiumsRaceOcon20 = getMeanPosition(positionOcon20, courseNames20)\n        \nfor i in positionOconWI20:\n    if i != '\\\\N':\n        positionOconSucceeded20.append(int(i))\n\nfor i in range(1, len(positionOconSucceeded20) + 1):\n    meanPositionOconSucceeded20.append(sum(positionOconSucceeded20[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionOconWI20)):\n    if positionOconWI20[i] != '\\\\N':\n        meanPositionOconWI20.append(meanPositionOconSucceeded20[j])\n        j += 1\n    else:\n        meanPositionOconWI20.append(meanPositionOconSucceeded20[j - 1])\n\n    \n#print(positionOcon)\n#print(meanPositionOcon)\n#print(podiums, topTen)\n#print(statusOcon)\n#positions\n#print(meanPositionOconWI)","ac689d18":"#QUALIFYYYYYYYYY\n\nqualifiersPositionsOcon17 = []\nmeanQualifiersPositionOcon17 = []\n\nqualifiersPodiumsOcon17 = 0\nqualifiersTopTenOcon17 = 0\nqualifiersPodiumsRaceOcon17 = []\n\nqualifiersPositionsOcon18 = []\nmeanQualifiersPositionOcon18 = []\n\nqualifiersPodiumsOcon18 = 0\nqualifiersTopTenOcon18 = 0\nqualifiersPodiumsRaceOcon18 = []\n\nqualifiersPositionsOcon20 = []\nmeanQualifiersPositionOcon20 = []\n\nqualifiersPodiumsOcon20 = 0\nqualifiersTopTenOcon20 = 0\nqualifiersPodiumsRaceOcon20 = []\n\nfor i, r in races2017['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsOcon17.append(int(positions.loc[positions['driverId'] == oconId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionOcon17, qualifiersPodiumsOcon17, qualifiersTopTenOcon17, qualifiersPodiumsRaceOcon17 = getMeanPosition(qualifiersPositionsOcon17, courseNames17)\n\nfor i, r in races2018['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsOcon18.append(int(positions.loc[positions['driverId'] == oconId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionOcon18, qualifiersPodiumsOcon18, qualifiersTopTenOcon18, qualifiersPodiumsRaceOcon18 = getMeanPosition(qualifiersPositionsOcon18, courseNames18)\n\n\nfor i, r in races2020['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsOcon20.append(int(positions.loc[positions['driverId'] == oconId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionOcon20, qualifiersPodiumsOcon20, qualifiersTopTenOcon20, qualifiersPodiumsRaceOcon20 = getMeanPosition(qualifiersPositionsOcon20, courseNames20)\n","6bd749be":"#DIFF QUALIFY POSITIONS\n\ndiffTransformationOcon17 = []\nmeanDiffTransformationOcon17 = []\n\ndiffTransformationOconSucceeded17 = []\nmeanDiffTransformationOconSucceeded17 = []\nmeanDiffTransformationOconWI17 = []\n\ndiffTransformationOcon18 = []\nmeanDiffTransformationOcon18 = []\n\ndiffTransformationOconSucceeded18 = []\nmeanDiffTransformationOconSucceeded18 = []\nmeanDiffTransformationOconWI18 = []\n\ndiffTransformationOcon20 = []\nmeanDiffTransformationOcon20 = []\n\ndiffTransformationOconSucceeded20 = []\nmeanDiffTransformationOconSucceeded20 = []\nmeanDiffTransformationOconWI20 = []\n\n#2017\n\nfor i in range(0, len(positionOcon17)):\n    diffTransformationOcon17.append(qualifiersPositionsOcon17[i] - positionOcon17[i])\n    if positionOconWI17[i] != '\\\\N':\n        diffTransformationOconSucceeded17.append(qualifiersPositionsOcon17[i] - int(positionOconWI17[i]))\n    \nfor i in range(1, len(diffTransformationOcon17) + 1):\n    meanDiffTransformationOcon17.append(sum(diffTransformationOcon17[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationOconSucceeded17) + 1):\n    meanDiffTransformationOconSucceeded17.append(sum(diffTransformationOconSucceeded17[:i]) \/ (i))\n\nraceWorstTransformationOconWITemp17 = diffTransformationOconSucceeded17.index(min(diffTransformationOconSucceeded17))\nraceWorstTransformationOconWI17 = raceWorstTransformationOconWITemp17\nj = 0\nfor i in range(0, len(positionOconWI17)):\n    if positionOconWI17[i] != '\\\\N':\n        meanDiffTransformationOconWI17.append(meanDiffTransformationOconSucceeded17[j])\n        j += 1\n        if j - 1 == raceWorstTransformationOconWITemp17:\n            raceWorstTransformationOconWI17 = i\n    else:\n        meanDiffTransformationOconWI17.append(meanDiffTransformationOconSucceeded17[j - 1])\n\nraceWorstTransformationOcon17 = courseNames17[diffTransformationOcon17.index(min(diffTransformationOcon17))]\nraceWorstTransformationOconWI17 = courseNames17[raceWorstTransformationOconWI17]\nraceBestTransformationOcon17 = courseNames17[diffTransformationOcon17.index(max(diffTransformationOcon17))]\n\n#2018\n\nfor i in range(0, len(positionOcon18)):\n    diffTransformationOcon18.append(qualifiersPositionsOcon18[i] - positionOcon18[i])\n    if positionOconWI18[i] != '\\\\N':\n        diffTransformationOconSucceeded18.append(qualifiersPositionsOcon18[i] - int(positionOconWI18[i]))\n    \nfor i in range(1, len(diffTransformationOcon18) + 1):\n    meanDiffTransformationOcon18.append(sum(diffTransformationOcon18[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationOconSucceeded18) + 1):\n    meanDiffTransformationOconSucceeded18.append(sum(diffTransformationOconSucceeded18[:i]) \/ (i))\n\nraceWorstTransformationOconWITemp18 = diffTransformationOconSucceeded18.index(min(diffTransformationOconSucceeded18))\nraceWorstTransformationOconWI18 = raceWorstTransformationOconWITemp18\nj = 0\nfor i in range(0, len(positionOconWI18)):\n    if positionOconWI18[i] != '\\\\N':\n        meanDiffTransformationOconWI18.append(meanDiffTransformationOconSucceeded18[j])\n        j += 1\n        if j - 1 == raceWorstTransformationOconWITemp18:\n            raceWorstTransformationOconWI18 = i\n    else:\n        meanDiffTransformationOconWI18.append(meanDiffTransformationOconSucceeded18[j - 1])\n\nraceWorstTransformationOcon18 = courseNames18[diffTransformationOcon18.index(min(diffTransformationOcon18))]\nraceWorstTransformationOconWI18 = courseNames18[raceWorstTransformationOconWI18]\nraceBestTransformationOcon18 = courseNames18[diffTransformationOcon18.index(max(diffTransformationOcon18))]\n\n#2020\n\nfor i in range(0, len(positionOcon20)):\n    diffTransformationOcon20.append(qualifiersPositionsOcon20[i] - positionOcon20[i])\n    if positionOconWI20[i] != '\\\\N':\n        diffTransformationOconSucceeded20.append(qualifiersPositionsOcon20[i] - int(positionOconWI20[i]))\n    \nfor i in range(1, len(diffTransformationOcon20) + 1):\n    meanDiffTransformationOcon20.append(sum(diffTransformationOcon20[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationOconSucceeded20) + 1):\n    meanDiffTransformationOconSucceeded20.append(sum(diffTransformationOconSucceeded20[:i]) \/ (i))\n\nraceWorstTransformationOconWITemp20 = diffTransformationOconSucceeded20.index(min(diffTransformationOconSucceeded20))\nraceWorstTransformationOconWI20 = raceWorstTransformationOconWITemp20\nj = 0\nfor i in range(0, len(positionOconWI20)):\n    if positionOconWI20[i] != '\\\\N':\n        meanDiffTransformationOconWI20.append(meanDiffTransformationOconSucceeded20[j])\n        j += 1\n        if j - 1 == raceWorstTransformationOconWITemp20:\n            raceWorstTransformationOconWI20 = i\n    else:\n        meanDiffTransformationOconWI20.append(meanDiffTransformationOconSucceeded20[j - 1])\n\nraceWorstTransformationOcon20 = courseNames20[diffTransformationOcon20.index(min(diffTransformationOcon20))]\nraceWorstTransformationOconWI20 = courseNames20[raceWorstTransformationOconWI20]\nraceBestTransformationOcon20 = courseNames20[diffTransformationOcon20.index(max(diffTransformationOcon20))]\n","424a95e6":"#END POSITIONSSSS GASLY\ngaslyRow = drivers.loc[drivers['driverRef'] == 'gasly']\ngaslyId = gaslyRow['driverId'][452]\n\npositionGasly18 = []\npositionGasly19 = []\npositionGasly20 = []\n\nmeanPositionGasly18 = []\nmeanPositionGasly19 = []\nmeanPositionGasly20 = []\nmeanPositionGasly = 0\n\npositionGaslyWI18 = []\npositionGaslySucceeded18 = []\nmeanPositionGaslySucceeded18 = []\nmeanPositionGaslyWI18 = []\n\npositionGaslyWI19 = []\npositionGaslySucceeded19 = []\nmeanPositionGaslySucceeded19 = []\nmeanPositionGaslyWI19 = []\n\npositionGaslyWI20 = []\npositionGaslySucceeded20 = []\nmeanPositionGaslySucceeded20 = []\nmeanPositionGaslyWI20 = []\n\npodiumsGasly18 = 0\npodiumsGasly19 = 0\npodiumsGasly20 = 0\npodiumsRaceGasly18 = []\npodiumsRaceGasly19 = []\npodiumsRaceGasly20 = []\ntopTenGasly18 = 0\ntopTenGasly19 = 0\ntopTenGasly20 = 0\n\nfor i, r in races2018['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    \n    positionGaslyWI18.append(positions.loc[positions['driverId'] == gaslyId]['position'].to_numpy()[0])\n    positionGasly18.append(int(positions.loc[positions['driverId'] == gaslyId]['positionOrder'].to_numpy()[0]))\n\n\nfor i, r in races2019['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    \n    positionGaslyWI19.append(positions.loc[positions['driverId'] == gaslyId]['position'].to_numpy()[0])\n    positionGasly19.append(int(positions.loc[positions['driverId'] == gaslyId]['positionOrder'].to_numpy()[0]))\n\n\nfor i, r in races2020['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    \n    positionGaslyWI20.append(positions.loc[positions['driverId'] == gaslyId]['position'].to_numpy()[0])\n    positionGasly20.append(int(positions.loc[positions['driverId'] == gaslyId]['positionOrder'].to_numpy()[0]))\n\nmeanPositionGasly18, podiumsGasly18, topTenGasly18, podiumsRaceGasly18 = getMeanPosition(positionGasly18, courseNames18)\nmeanPositionGasly19, podiumsGasly19, topTenGasly19, podiumsRaceGasly19 = getMeanPosition(positionGasly19, courseNames19)\nmeanPositionGasly20, podiumsGasly20, topTenGasly20, podiumsRaceGasly20 = getMeanPosition(positionGasly20, courseNames20)\n\nfor i in positionGaslyWI18:\n    if i != '\\\\N':\n        positionGaslySucceeded18.append(int(i))\n\nfor i in range(1, len(positionGaslySucceeded18) + 1):\n    meanPositionGaslySucceeded18.append(sum(positionGaslySucceeded18[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionGaslyWI18)):\n    if positionGaslyWI18[i] != '\\\\N':\n        meanPositionGaslyWI18.append(meanPositionGaslySucceeded18[j])\n        j += 1\n    else:\n        if j == 0:\n            meanPositionGaslyWI18.append(meanPositionGaslySucceeded18[0])\n        else:\n            meanPositionGaslyWI18.append(meanPositionGaslySucceeded18[j - 1])\n            \nfor i in positionGaslyWI19:\n    if i != '\\\\N':\n        positionGaslySucceeded19.append(int(i))\n\nfor i in range(1, len(positionGaslySucceeded19) + 1):\n    meanPositionGaslySucceeded19.append(sum(positionGaslySucceeded19[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionGaslyWI19)):\n    if positionGaslyWI19[i] != '\\\\N':\n        meanPositionGaslyWI19.append(meanPositionGaslySucceeded19[j])\n        j += 1\n    else:\n        if j == 0:\n            meanPositionGaslyWI19.append(meanPositionGaslySucceeded19[0])\n        else:\n            meanPositionGaslyWI19.append(meanPositionGaslySucceeded19[j - 1])\n\nfor i in positionGaslyWI20:\n    if i != '\\\\N':\n        positionGaslySucceeded20.append(int(i))\n\nfor i in range(1, len(positionGaslySucceeded20) + 1):\n    meanPositionGaslySucceeded20.append(sum(positionGaslySucceeded20[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionGaslyWI20)):\n    if positionGaslyWI20[i] != '\\\\N':\n        meanPositionGaslyWI20.append(meanPositionGaslySucceeded20[j])\n        j += 1\n    else:\n        if j == 0:\n            meanPositionGaslyWI20.append(meanPositionGaslySucceeded20[0])\n        else:\n            meanPositionGaslyWI20.append(meanPositionGaslySucceeded20[j - 1])","0d77e25e":"#QUALIFYYYYYYYYY GASLY\nqualifiersPositionsGasly18 = []\nmeanQualifiersPositionGasly18 = []\n\nqualifiersPodiumsGasly18 = 0\nqualifiersTopTenGasly18 = 0\nqualifiersPodiumsRaceGasly18 = []\n\nfor i, r in races2018['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsGasly18.append(int(positions.loc[positions['driverId'] == gaslyId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionGasly18, qualifiersPodiumsGasly18, qualifiersTopTenGasly18, qualifiersPodiumsRaceGasly18 = getMeanPosition(qualifiersPositionsGasly18, courseNames18)\n\nqualifiersPositionsGasly19 = []\nmeanQualifiersPositionGasly19 = []\n\nqualifiersPodiumsGasly19 = 0\nqualifiersTopTenGasly19 = 0\nqualifiersPodiumsRaceGasly19 = []\n\nfor i, r in races2019['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsGasly19.append(int(positions.loc[positions['driverId'] == gaslyId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionGasly19, qualifiersPodiumsGasly19, qualifiersTopTenGasly19, qualifiersPodiumsRaceGasly19 = getMeanPosition(qualifiersPositionsGasly19, courseNames19)\n\nqualifiersPositionsGasly20 = []\nmeanQualifiersPositionGasly20 = []\n\nqualifiersPodiumsGasly20 = 0\nqualifiersTopTenGasly20 = 0\nqualifiersPodiumsRaceGasly20 = []\n\nfor i, r in races2020['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsGasly20.append(int(positions.loc[positions['driverId'] == gaslyId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionGasly20, qualifiersPodiumsGasly20, qualifiersTopTenGasly20, qualifiersPodiumsRaceGasly20 = getMeanPosition(qualifiersPositionsGasly20, courseNames20)\n\n#print(meanQualifiersPositionOcon, qualifiersPodiumsOcon, qualifiersTopTenOcon)","e325383d":"#DIFF QUALIFY POSITIONS GASLY\n\ndiffTransformationGasly18 = []\nmeanDiffTransformationGasly18 = []\n\ndiffTransformationGaslySucceeded18 = []\nmeanDiffTransformationGaslySucceeded18 = []\nmeanDiffTransformationGaslyWI18 = []\n\ndiffTransformationGasly19 = []\nmeanDiffTransformationGasly19 = []\n\ndiffTransformationGaslySucceeded19 = []\nmeanDiffTransformationGaslySucceeded19 = []\nmeanDiffTransformationGaslyWI19 = []\n\ndiffTransformationGasly20 = []\nmeanDiffTransformationGasly20 = []\n\ndiffTransformationGaslySucceeded20 = []\nmeanDiffTransformationGaslySucceeded20 = []\nmeanDiffTransformationGaslyWI20 = []\n\nfor i in range(0, len(positionGasly18)):\n    diffTransformationGasly18.append(qualifiersPositionsGasly18[i] - positionGasly18[i])\n    if positionGaslyWI18[i] != '\\\\N':\n        diffTransformationGaslySucceeded18.append(qualifiersPositionsGasly18[i] - int(positionGaslyWI18[i]))\n    \nfor i in range(1, len(diffTransformationGasly18) + 1):\n    meanDiffTransformationGasly18.append(sum(diffTransformationGasly18[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationGaslySucceeded18) + 1):\n    meanDiffTransformationGaslySucceeded18.append(sum(diffTransformationGaslySucceeded18[:i]) \/ (i))\n\nraceWorstTransformationGaslyWITemp18 = diffTransformationGaslySucceeded18.index(min(diffTransformationGaslySucceeded18))\nraceWorstTransformationGaslyWI18 = raceWorstTransformationGaslyWITemp18\nj = 0\nfor i in range(0, len(positionGaslyWI18)):\n    if positionGaslyWI18[i] != '\\\\N':\n        meanDiffTransformationGaslyWI18.append(meanDiffTransformationGaslySucceeded18[j])\n        j += 1\n        if j - 1 == raceWorstTransformationGaslyWITemp18:\n            raceWorstTransformationGaslyWI18 = i\n    else:\n        meanDiffTransformationGaslyWI18.append(meanDiffTransformationGaslySucceeded18[j - 1])\n\nraceWorstTransformationGasly18 = courseNames18[diffTransformationGasly18.index(min(diffTransformationGasly18))]\nraceWorstTransformationGaslyWI18 = courseNames18[raceWorstTransformationGaslyWI18]\nraceBestTransformationGasly18 = courseNames18[diffTransformationGasly18.index(max(diffTransformationGasly18))]\n\n#2019\nfor i in range(0, len(positionGasly19)):\n    diffTransformationGasly19.append(qualifiersPositionsGasly19[i] - positionGasly19[i])\n    if positionGaslyWI19[i] != '\\\\N':\n        diffTransformationGaslySucceeded19.append(qualifiersPositionsGasly19[i] - int(positionGaslyWI19[i]))\n    \nfor i in range(1, len(diffTransformationGasly19) + 1):\n    meanDiffTransformationGasly19.append(sum(diffTransformationGasly19[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationGaslySucceeded19) + 1):\n    meanDiffTransformationGaslySucceeded19.append(sum(diffTransformationGaslySucceeded19[:i]) \/ (i))\n\nraceWorstTransformationGaslyWITemp19 = diffTransformationGaslySucceeded19.index(min(diffTransformationGaslySucceeded19))\nraceWorstTransformationGaslyWI19 = raceWorstTransformationGaslyWITemp19\nj = 0\nfor i in range(0, len(positionGaslyWI19)):\n    if positionGaslyWI19[i] != '\\\\N':\n        meanDiffTransformationGaslyWI19.append(meanDiffTransformationGaslySucceeded19[j])\n        j += 1\n        if j - 1 == raceWorstTransformationGaslyWITemp19:\n            raceWorstTransformationGaslyWI19 = i\n    else:\n        meanDiffTransformationGaslyWI19.append(meanDiffTransformationGaslySucceeded19[j - 1])\n\nraceWorstTransformationGasly19 = courseNames19[diffTransformationGasly19.index(min(diffTransformationGasly19))]\nraceWorstTransformationGaslyWI19 = courseNames19[raceWorstTransformationGaslyWI19]\nraceBestTransformationGasly19 = courseNames19[diffTransformationGasly19.index(max(diffTransformationGasly19))]\n\n#2020\nfor i in range(0, len(positionGasly20)):\n    diffTransformationGasly20.append(qualifiersPositionsGasly20[i] - positionGasly20[i])\n    if positionGaslyWI20[i] != '\\\\N':\n        diffTransformationGaslySucceeded20.append(qualifiersPositionsGasly20[i] - int(positionGaslyWI20[i]))\n    \nfor i in range(1, len(diffTransformationGasly20) + 1):\n    meanDiffTransformationGasly20.append(sum(diffTransformationGasly20[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationGaslySucceeded20) + 1):\n    meanDiffTransformationGaslySucceeded20.append(sum(diffTransformationGaslySucceeded20[:i]) \/ (i))\n\nraceWorstTransformationGaslyWITemp20 = diffTransformationGaslySucceeded20.index(min(diffTransformationGaslySucceeded20))\nraceWorstTransformationGaslyWI20 = raceWorstTransformationGaslyWITemp20\nj = 0\nfor i in range(0, len(positionGaslyWI20)):\n    if positionGaslyWI20[i] != '\\\\N':\n        meanDiffTransformationGaslyWI20.append(meanDiffTransformationGaslySucceeded20[j])\n        j += 1\n        if j - 1 == raceWorstTransformationGaslyWITemp20:\n            raceWorstTransformationGaslyWI20 = i\n    else:\n        meanDiffTransformationGaslyWI20.append(meanDiffTransformationGaslySucceeded20[j - 1])\n\nraceWorstTransformationGasly20 = courseNames20[diffTransformationGasly20.index(min(diffTransformationGasly20))]\nraceWorstTransformationGaslyWI20 = courseNames20[raceWorstTransformationGaslyWI20]\nraceBestTransformationGasly20 = courseNames20[diffTransformationGasly20.index(max(diffTransformationGasly20))]","98c255c5":"#END POSITIONSSSS LECLERC\nleclercRow = drivers.loc[drivers['driverRef'] == 'leclerc']\nleclercId = leclercRow['driverId'][842]\n\npositionLeclerc18 = []\npositionLeclerc19 = []\npositionLeclerc20 = []\n\nmeanPositionLeclerc18 = []\nmeanPositionLeclerc19 = []\nmeanPositionLeclerc20 = []\nmeanPositionLeclerc = 0\n\npositionLeclercWI18 = []\npositionLeclercSucceeded18 = []\nmeanPositionLeclercSucceeded18 = []\nmeanPositionLeclercWI18 = []\n\npositionLeclercWI19 = []\npositionLeclercSucceeded19 = []\nmeanPositionLeclercSucceeded19 = []\nmeanPositionLeclercWI19 = []\n\npositionLeclercWI20 = []\npositionLeclercSucceeded20 = []\nmeanPositionLeclercSucceeded20 = []\nmeanPositionLeclercWI20 = []\n\npodiumsLeclerc18 = 0\npodiumsLeclerc19 = 0\npodiumsLeclerc20 = 0\npodiumsRaceLeclerc18 = []\npodiumsRaceLeclerc19 = []\npodiumsRaceLeclerc20 = []\ntopTenLeclerc18 = 0\ntopTenLeclerc19 = 0\ntopTenLeclerc20 = 0\n\nfor i, r in races2018['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    \n    positionLeclercWI18.append(positions.loc[positions['driverId'] == leclercId]['position'].to_numpy()[0])\n    positionLeclerc18.append(int(positions.loc[positions['driverId'] == leclercId]['positionOrder'].to_numpy()[0]))\n\n\nfor i, r in races2019['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    \n    positionLeclercWI19.append(positions.loc[positions['driverId'] == leclercId]['position'].to_numpy()[0])\n    positionLeclerc19.append(int(positions.loc[positions['driverId'] == leclercId]['positionOrder'].to_numpy()[0]))\n\n\nfor i, r in races2020['raceId'].iteritems():\n    positions = results.loc[results['raceId'] == r]\n    \n    positionLeclercWI20.append(positions.loc[positions['driverId'] == leclercId]['position'].to_numpy()[0])\n    positionLeclerc20.append(int(positions.loc[positions['driverId'] == leclercId]['positionOrder'].to_numpy()[0]))\n\nmeanPositionLeclerc18, podiumsLeclerc18, topTenLeclerc18, podiumsRaceLeclerc18 = getMeanPosition(positionLeclerc18, courseNames18)\nmeanPositionLeclerc19, podiumsLeclerc19, topTenLeclerc19, podiumsRaceLeclerc19 = getMeanPosition(positionLeclerc19, courseNames19)\nmeanPositionLeclerc20, podiumsLeclerc20, topTenLeclerc20, podiumsRaceLeclerc20 = getMeanPosition(positionLeclerc20, courseNames20)\n\nfor i in positionLeclercWI18:\n    if i != '\\\\N':\n        positionLeclercSucceeded18.append(int(i))\n\nfor i in range(1, len(positionLeclercSucceeded18) + 1):\n    meanPositionLeclercSucceeded18.append(sum(positionLeclercSucceeded18[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionLeclercWI18)):\n    if positionLeclercWI18[i] != '\\\\N':\n        meanPositionLeclercWI18.append(meanPositionLeclercSucceeded18[j])\n        j += 1\n    else:\n        if j == 0:\n            meanPositionLeclercWI18.append(meanPositionLeclercSucceeded18[0])\n        else:\n            meanPositionLeclercWI18.append(meanPositionLeclercSucceeded18[j - 1])\n            \nfor i in positionLeclercWI19:\n    if i != '\\\\N':\n        positionLeclercSucceeded19.append(int(i))\n\nfor i in range(1, len(positionLeclercSucceeded19) + 1):\n    meanPositionLeclercSucceeded19.append(sum(positionLeclercSucceeded19[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionLeclercWI19)):\n    if positionLeclercWI19[i] != '\\\\N':\n        meanPositionLeclercWI19.append(meanPositionLeclercSucceeded19[j])\n        j += 1\n    else:\n        if j == 0:\n            meanPositionLeclercWI19.append(meanPositionLeclercSucceeded19[0])\n        else:\n            meanPositionLeclercWI19.append(meanPositionLeclercSucceeded19[j - 1])\n\nfor i in positionLeclercWI20:\n    if i != '\\\\N':\n        positionLeclercSucceeded20.append(int(i))\n\nfor i in range(1, len(positionLeclercSucceeded20) + 1):\n    meanPositionLeclercSucceeded20.append(sum(positionLeclercSucceeded20[:i]) \/ (i))\n\nj = 0\nfor i in range(0, len(positionLeclercWI20)):\n    if positionLeclercWI20[i] != '\\\\N':\n        meanPositionLeclercWI20.append(meanPositionLeclercSucceeded20[j])\n        j += 1\n    else:\n        if j == 0:\n            meanPositionLeclercWI20.append(meanPositionLeclercSucceeded20[0])\n        else:\n            meanPositionLeclercWI20.append(meanPositionLeclercSucceeded20[j - 1])\n            ","06e3ea31":"#QUALIFYYYYYYYYY LECLERC\nqualifiersPositionsLeclerc18 = []\nmeanQualifiersPositionLeclerc18 = []\n\nqualifiersPodiumsLeclerc18 = 0\nqualifiersTopTenLeclerc18 = 0\nqualifiersPodiumsRaceLeclerc18 = []\n\nfor i, r in races2018['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsLeclerc18.append(int(positions.loc[positions['driverId'] == leclercId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionLeclerc18, qualifiersPodiumsLeclerc18, qualifiersTopTenLeclerc18, qualifiersPodiumsRaceLeclerc18 = getMeanPosition(qualifiersPositionsLeclerc18, courseNames18)\n\nqualifiersPositionsLeclerc19 = []\nmeanQualifiersPositionLeclerc19 = []\n\nqualifiersPodiumsLeclerc19 = 0\nqualifiersTopTenLeclerc19 = 0\nqualifiersPodiumsRaceLeclerc19 = []\n\nfor i, r in races2019['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsLeclerc19.append(int(positions.loc[positions['driverId'] == leclercId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionLeclerc19, qualifiersPodiumsLeclerc19, qualifiersTopTenLeclerc19, qualifiersPodiumsRaceLeclerc19 = getMeanPosition(qualifiersPositionsLeclerc19, courseNames19)\n\nqualifiersPositionsLeclerc20 = []\nmeanQualifiersPositionLeclerc20 = []\n\nqualifiersPodiumsLeclerc20 = 0\nqualifiersTopTenLeclerc20 = 0\nqualifiersPodiumsRaceLeclerc20 = []\n\nfor i, r in races2020['raceId'].iteritems():\n    positions = qualifying.loc[qualifying['raceId'] == r]\n    qualifiersPositionsLeclerc20.append(int(positions.loc[positions['driverId'] == leclercId]['position'].to_numpy()[0]))\n\nmeanQualifiersPositionLeclerc20, qualifiersPodiumsLeclerc20, qualifiersTopTenLeclerc20, qualifiersPodiumsRaceLeclerc20 = getMeanPosition(qualifiersPositionsLeclerc20, courseNames20)\n","967afb30":"#DIFF QUALIFY POSITIONS LECLERC\n\ndiffTransformationLeclerc18 = []\nmeanDiffTransformationLeclerc18 = []\n\ndiffTransformationLeclercSucceeded18 = []\nmeanDiffTransformationLeclercSucceeded18 = []\nmeanDiffTransformationLeclercWI18 = []\n\ndiffTransformationLeclerc19 = []\nmeanDiffTransformationLeclerc19 = []\n\ndiffTransformationLeclercSucceeded19 = []\nmeanDiffTransformationLeclercSucceeded19 = []\nmeanDiffTransformationLeclercWI19 = []\n\ndiffTransformationLeclerc20 = []\nmeanDiffTransformationLeclerc20 = []\n\ndiffTransformationLeclercSucceeded20 = []\nmeanDiffTransformationLeclercSucceeded20 = []\nmeanDiffTransformationLeclercWI20 = []\n\nfor i in range(0, len(positionLeclerc18)):\n    diffTransformationLeclerc18.append(qualifiersPositionsLeclerc18[i] - positionLeclerc18[i])\n    if positionLeclercWI18[i] != '\\\\N':\n        diffTransformationLeclercSucceeded18.append(qualifiersPositionsLeclerc18[i] - int(positionLeclercWI18[i]))\n    \nfor i in range(1, len(diffTransformationLeclerc18) + 1):\n    meanDiffTransformationLeclerc18.append(sum(diffTransformationLeclerc18[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationLeclercSucceeded18) + 1):\n    meanDiffTransformationLeclercSucceeded18.append(sum(diffTransformationLeclercSucceeded18[:i]) \/ (i))\n\nraceWorstTransformationLeclercWITemp18 = diffTransformationLeclercSucceeded18.index(min(diffTransformationLeclercSucceeded18))\nraceWorstTransformationLeclercWI18 = raceWorstTransformationLeclercWITemp18\nj = 0\nfor i in range(0, len(positionLeclercWI18)):\n    if positionLeclercWI18[i] != '\\\\N':\n        meanDiffTransformationLeclercWI18.append(meanDiffTransformationLeclercSucceeded18[j])\n        j += 1\n        if j - 1 == raceWorstTransformationLeclercWITemp18:\n            raceWorstTransformationLeclercWI18 = i\n    else:\n        meanDiffTransformationLeclercWI18.append(meanDiffTransformationLeclercSucceeded18[j - 1])\n\nraceWorstTransformationLeclerc18 = courseNames18[diffTransformationLeclerc18.index(min(diffTransformationLeclerc18))]\nraceWorstTransformationLeclercWI18 = courseNames18[raceWorstTransformationLeclercWI18]\nraceBestTransformationLeclerc18 = courseNames18[diffTransformationLeclerc18.index(max(diffTransformationLeclerc18))]\n\n#2019\nfor i in range(0, len(positionLeclerc19)):\n    diffTransformationLeclerc19.append(qualifiersPositionsLeclerc19[i] - positionLeclerc19[i])\n    if positionLeclercWI19[i] != '\\\\N':\n        diffTransformationLeclercSucceeded19.append(qualifiersPositionsLeclerc19[i] - int(positionLeclercWI19[i]))\n    \nfor i in range(1, len(diffTransformationLeclerc19) + 1):\n    meanDiffTransformationLeclerc19.append(sum(diffTransformationLeclerc19[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationLeclercSucceeded19) + 1):\n    meanDiffTransformationLeclercSucceeded19.append(sum(diffTransformationLeclercSucceeded19[:i]) \/ (i))\n\nraceWorstTransformationLeclercWITemp19 = diffTransformationLeclercSucceeded19.index(min(diffTransformationLeclercSucceeded19))\nraceWorstTransformationLeclercWI19 = raceWorstTransformationLeclercWITemp19\nj = 0\nfor i in range(0, len(positionLeclercWI19)):\n    if positionLeclercWI19[i] != '\\\\N':\n        meanDiffTransformationLeclercWI19.append(meanDiffTransformationLeclercSucceeded19[j])\n        j += 1\n        if j - 1 == raceWorstTransformationLeclercWITemp19:\n            raceWorstTransformationLeclercWI19 = i\n    else:\n        meanDiffTransformationLeclercWI19.append(meanDiffTransformationLeclercSucceeded19[j - 1])\n\nraceWorstTransformationLeclerc19 = courseNames19[diffTransformationLeclerc19.index(min(diffTransformationLeclerc19))]\nraceWorstTransformationLeclercWI19 = courseNames19[raceWorstTransformationLeclercWI19]\nraceBestTransformationLeclerc19 = courseNames19[diffTransformationLeclerc19.index(max(diffTransformationLeclerc19))]\n\n#2020\nfor i in range(0, len(positionLeclerc20)):\n    diffTransformationLeclerc20.append(qualifiersPositionsLeclerc20[i] - positionLeclerc20[i])\n    if positionLeclercWI20[i] != '\\\\N':\n        diffTransformationLeclercSucceeded20.append(qualifiersPositionsLeclerc20[i] - int(positionLeclercWI20[i]))\n    \nfor i in range(1, len(diffTransformationLeclerc20) + 1):\n    meanDiffTransformationLeclerc20.append(sum(diffTransformationLeclerc20[:i]) \/ (i))\n    \nfor i in range(1, len(diffTransformationLeclercSucceeded20) + 1):\n    meanDiffTransformationLeclercSucceeded20.append(sum(diffTransformationLeclercSucceeded20[:i]) \/ (i))\n\nraceWorstTransformationLeclercWITemp20 = diffTransformationLeclercSucceeded20.index(min(diffTransformationLeclercSucceeded20))\nraceWorstTransformationLeclercWI20 = raceWorstTransformationLeclercWITemp20\nj = 0\nfor i in range(0, len(positionLeclercWI20)):\n    if positionLeclercWI20[i] != '\\\\N':\n        meanDiffTransformationLeclercWI20.append(meanDiffTransformationLeclercSucceeded20[j])\n        j += 1\n        if j - 1 == raceWorstTransformationLeclercWITemp20:\n            raceWorstTransformationLeclercWI20 = i\n    else:\n        meanDiffTransformationLeclercWI20.append(meanDiffTransformationLeclercSucceeded20[j - 1])\n\nraceWorstTransformationLeclerc20 = courseNames20[diffTransformationLeclerc20.index(min(diffTransformationLeclerc20))]\nraceWorstTransformationLeclercWI20 = courseNames20[raceWorstTransformationLeclercWI20]\nraceBestTransformationLeclerc20 = courseNames20[diffTransformationLeclerc20.index(max(diffTransformationLeclerc20))]\n","6bf31c59":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames17, qualifiersPositionsOcon17, label=\"Ocon Position for each Qualifiers\")\nplt.plot(courseNames17, meanQualifiersPositionOcon17, label=\"Ocon Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames17)), courseNames17, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2017 - Esteban Ocon Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","7ba24e82":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsOcon17, \n                str(round(qualifiersTopTenOcon17\/len(qualifiersPositionsOcon17) * 10000)\/100) + '%',\n                round(meanQualifiersPositionOcon17[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","81aae437":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames17, positionOcon17, label=\"Ocon Position for each Race\")\nplt.plot(courseNames17, meanPositionOcon17, label=\"Ocon Mean Position\")\nplt.plot(courseNames17, meanPositionOconWI17, label=\"Ocon Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames17)), courseNames17, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2017 - Esteban Ocon Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","ba28fb8d":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsOcon17), \n                str(round(topTenOcon17\/len(positionOcon17) * 10000)\/100) + '%',\n                round(meanPositionOcon17[-1:][0] * 100)\/100,\n                round(meanPositionOconWI17[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()\n\n#pretty_display(oconRaces)","e745e78f":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames17, diffTransformationOcon17, label=\"Ocon Transformation Rate each Race\")\nplt.plot(courseNames17, meanDiffTransformationOcon17, label=\"Ocon Mean Transformation Rate\")\nplt.plot(courseNames17, meanDiffTransformationOconWI17, label=\"Ocon Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationOcon17) - 1, max(diffTransformationOcon17) + 1, 1))\nplt.xticks(np.arange(len(courseNames17)), courseNames17, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2017 - Esteban Ocon Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","dcfda763":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationOcon17[-1:][0] * 100)\/100,\n                round(meanDiffTransformationOconWI17[-1:][0] * 100)\/100,\n                str(min(diffTransformationOcon17)) + ' (' + raceWorstTransformationOcon17 + ')',\n                str(min(diffTransformationOconSucceeded17)) + ' (' + raceWorstTransformationOconWI17 + ')',\n                '+' + str(max(diffTransformationOcon17)) + ' (' + raceBestTransformationOcon17 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","b2b20927":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, qualifiersPositionsOcon18, label=\"Ocon Position for each Qualifiers\")\nplt.plot(courseNames18, meanQualifiersPositionOcon18, label=\"Ocon Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Esteban Ocon Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","4be5f766":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsOcon18, \n                str(round(qualifiersTopTenOcon18\/len(qualifiersPositionsOcon18) * 10000)\/100) + '%',\n                round(meanQualifiersPositionOcon18[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","cbe8dce8":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, positionOcon18, label=\"Ocon Position for each Race\")\nplt.plot(courseNames18, meanPositionOcon18, label=\"Ocon Mean Position\")\nplt.plot(courseNames18, meanPositionOconWI18, label=\"Ocon Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Esteban Ocon Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","75cc8cdb":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsOcon18), \n                str(round(topTenOcon18\/len(positionOcon18) * 10000)\/100) + '%',\n                round(meanPositionOcon18[-1:][0] * 100)\/100,\n                round(meanPositionOconWI18[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()\n\n#pretty_display(oconRaces)","baee2a1f":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, diffTransformationOcon18, label=\"Ocon Transformation Rate each Race\")\nplt.plot(courseNames18, meanDiffTransformationOcon18, label=\"Ocon Mean Transformation Rate\")\nplt.plot(courseNames18, meanDiffTransformationOconWI18, label=\"Ocon Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationOcon18) - 1, max(diffTransformationOcon18) + 1, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Esteban Ocon Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","b4d6b706":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationOcon18[-1:][0] * 100)\/100,\n                round(meanDiffTransformationOconWI18[-1:][0] * 100)\/100,\n                str(min(diffTransformationOcon18)) + ' (' + raceWorstTransformationOcon18 + ')',\n                str(min(diffTransformationOconSucceeded18)) + ' (' + raceWorstTransformationOconWI18 + ')',\n                '+' + str(max(diffTransformationOcon18)) + ' (' + raceBestTransformationOcon18 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","660e29e2":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, qualifiersPositionsOcon20, label=\"Ocon Position for each Qualifiers\")\nplt.plot(courseNames20, meanQualifiersPositionOcon20, label=\"Ocon Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Esteban Ocon Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","117bdcb1":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsOcon20, \n                str(round(qualifiersTopTenOcon20\/len(qualifiersPositionsOcon20) * 10000)\/100) + '%',\n                round(meanQualifiersPositionOcon20[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","597ad6b1":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, positionOcon20, label=\"Ocon Position for each Race\")\nplt.plot(courseNames20, meanPositionOcon20, label=\"Ocon Mean Position\")\nplt.plot(courseNames20, meanPositionOconWI20, label=\"Ocon Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Esteban Ocon Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","b54a62f7":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsOcon20) + ' (' + podiumsRaceOcon20[0] + ')', \n                str(round(topTenOcon20\/len(positionOcon20) * 10000)\/100) + '%',\n                round(meanPositionOcon20[-1:][0] * 100)\/100,\n                round(meanPositionOconWI20[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()\n\n#pretty_display(oconRaces)","c1b753b5":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, diffTransformationOcon20, label=\"Ocon Transformation Rate each Race\")\nplt.plot(courseNames20, meanDiffTransformationOcon20, label=\"Ocon Mean Transformation Rate\")\nplt.plot(courseNames20, meanDiffTransformationOconWI20, label=\"Ocon Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationOcon20) - 1, max(diffTransformationOcon20) + 1, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Esteban Ocon Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","8dbc2b24":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Esteban Ocon']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationOcon20[-1:][0] * 100)\/100,\n                round(meanDiffTransformationOconWI20[-1:][0] * 100)\/100,\n                str(min(diffTransformationOcon20)) + ' (' + raceWorstTransformationOcon20 + ')',\n                str(min(diffTransformationOconSucceeded20)) + ' (' + raceWorstTransformationOconWI20 + ')',\n                '+' + str(max(diffTransformationOcon20)) + ' (' + raceBestTransformationOcon20 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","9d4b29c1":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, qualifiersPositionsGasly18, label=\"Gasly Position for each Qualifiers\")\nplt.plot(courseNames18, meanQualifiersPositionGasly18, label=\"Gasly Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Pierre Gasly Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","4567fa15":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsGasly18, \n                str(round(qualifiersTopTenGasly18\/len(qualifiersPositionsGasly18) * 10000)\/100) + '%',\n                round(meanQualifiersPositionGasly18[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","05bfee11":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, positionGasly18, label=\"Gasly Position for each Race\")\nplt.plot(courseNames18, meanPositionGasly18, label=\"Gasly Mean Position\")\nplt.plot(courseNames18, meanPositionGaslyWI18, label=\"Gasly Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Pierre Gasly Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","bb538e13":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsGasly18), \n                str(round(topTenGasly18\/len(positionGasly18) * 10000)\/100) + '%',\n                round(meanPositionGasly18[-1:][0] * 100)\/100,\n                round(meanPositionGaslyWI18[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","1bd0e88d":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, diffTransformationGasly18, label=\"Gasly Transformation Rate each Race\")\nplt.plot(courseNames18, meanDiffTransformationGasly18, label=\"Gasly Mean Transformation Rate\")\nplt.plot(courseNames18, meanDiffTransformationGaslyWI18, label=\"Gasly Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationGasly18) - 1, max(diffTransformationGasly18) + 1, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Pierre Gasly Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","73a3c803":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationGasly18[-1:][0] * 100)\/100,\n                round(meanDiffTransformationGaslyWI18[-1:][0] * 100)\/100,\n                str(min(diffTransformationGasly18)) + ' (' + raceWorstTransformationGasly18 + ')',\n                str(min(diffTransformationGaslySucceeded18)) + ' (' + raceWorstTransformationGaslyWI18 + ')',\n                '+' + str(max(diffTransformationGasly18)) + ' (' + raceBestTransformationGasly18 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","ff750106":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames19, qualifiersPositionsGasly19, label=\"Gasly Position for each Qualifiers\")\nplt.plot(courseNames19, meanQualifiersPositionGasly19, label=\"Gasly Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames19)), courseNames19, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2019 - Pierre Gasly Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","2cd702de":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsGasly19, \n                str(round(qualifiersTopTenGasly19\/len(qualifiersPositionsGasly19) * 10000)\/100) + '%',\n                round(meanQualifiersPositionGasly19[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","066b7f75":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames19, positionGasly19, label=\"Gasly Position for each Race\")\nplt.plot(courseNames19, meanPositionGasly19, label=\"Gasly Mean Position\")\nplt.plot(courseNames19, meanPositionGaslyWI19, label=\"Gasly Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames19)), courseNames19, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2019 - Pierre Gasly Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","abcc72a4":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsGasly19) + ' (' + podiumsRaceGasly19[0] + ')', \n                str(round(topTenGasly19\/len(positionGasly19) * 10000)\/100) + '%',\n                round(meanPositionGasly19[-1:][0] * 100)\/100,\n                round(meanPositionGaslyWI19[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","42a40809":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames19, diffTransformationGasly19, label=\"Gasly Transformation Rate each Race\")\nplt.plot(courseNames19, meanDiffTransformationGasly19, label=\"Gasly Mean Transformation Rate\")\nplt.plot(courseNames19, meanDiffTransformationGaslyWI19, label=\"Gasly Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationGasly19) - 1, max(diffTransformationGasly19) + 1, 1))\nplt.xticks(np.arange(len(courseNames19)), courseNames19, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2019 - Pierre Gasly Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","cc190df8":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationGasly19[-1:][0] * 100)\/100,\n                round(meanDiffTransformationGaslyWI19[-1:][0] * 100)\/100,\n                str(min(diffTransformationGasly19)) + ' (' + raceWorstTransformationGasly19 + ')',\n                str(min(diffTransformationGaslySucceeded19)) + ' (' + raceWorstTransformationGaslyWI19 + ')',\n                '+' + str(max(diffTransformationGasly19)) + ' (' + raceBestTransformationGasly19 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","2b71392a":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, qualifiersPositionsGasly20, label=\"Gasly Position for each Qualifiers\")\nplt.plot(courseNames20, meanQualifiersPositionGasly20, label=\"Gasly Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Pierre Gasly Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","3a6637c2":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsGasly20, \n                str(round(qualifiersTopTenGasly20\/len(qualifiersPositionsGasly20) * 10000)\/100) + '%',\n                round(meanQualifiersPositionGasly20[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","968f2171":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, positionGasly20, label=\"Gasly Position for each Race\")\nplt.plot(courseNames20, meanPositionGasly20, label=\"Gasly Mean Position\")\nplt.plot(courseNames20, meanPositionGaslyWI20, label=\"Gasly Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Pierre Gasly Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","1f301fa9":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsGasly20) + ' (' + podiumsRaceGasly20[0] + ')' , \n                str(round(topTenGasly20\/len(positionGasly20) * 10000)\/100) + '%',\n                round(meanPositionGasly20[-1:][0] * 100)\/100,\n                round(meanPositionGaslyWI20[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","a12747c5":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, diffTransformationGasly20, label=\"Gasly Transformation Rate each Race\")\nplt.plot(courseNames20, meanDiffTransformationGasly20, label=\"Gasly Mean Transformation Rate\")\nplt.plot(courseNames20, meanDiffTransformationGaslyWI20, label=\"Gasly Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationGasly20) - 1, max(diffTransformationGasly20) + 1, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Pierre Gasly Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","300321d2":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Pierre Gasly']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationGasly20[-1:][0] * 100)\/100,\n                round(meanDiffTransformationGaslyWI20[-1:][0] * 100)\/100,\n                str(min(diffTransformationGasly20)) + ' (' + raceWorstTransformationGasly20 + ')',\n                str(min(diffTransformationGaslySucceeded20)) + ' (' + raceWorstTransformationGaslyWI20 + ')',\n                '+' + str(max(diffTransformationGasly20)) + ' (' + raceBestTransformationGasly20 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","0157775e":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, qualifiersPositionsLeclerc18, label=\"Leclerc Position for each Qualifiers\")\nplt.plot(courseNames18, meanQualifiersPositionLeclerc18, label=\"Leclerc Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Charles Leclerc Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","0bd90ed0":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsLeclerc18, \n                str(round(qualifiersTopTenLeclerc18\/len(qualifiersPositionsLeclerc18) * 10000)\/100) + '%',\n                round(meanQualifiersPositionLeclerc18[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","3270b232":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, positionLeclerc18, label=\"Leclerc Position for each Race\")\nplt.plot(courseNames18, meanPositionLeclerc18, label=\"Leclerc Mean Position\")\nplt.plot(courseNames18, meanPositionLeclercWI18, label=\"Leclerc Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Charles Leclerc Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","ee5feded":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsLeclerc18), \n                str(round(topTenLeclerc18\/len(positionLeclerc18) * 10000)\/100) + '%',\n                round(meanPositionLeclerc18[-1:][0] * 100)\/100,\n                round(meanPositionLeclercWI18[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","a09f6c09":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames18, diffTransformationLeclerc18, label=\"Leclerc Transformation Rate each Race\")\nplt.plot(courseNames18, meanDiffTransformationLeclerc18, label=\"Leclerc Mean Transformation Rate\")\nplt.plot(courseNames18, meanDiffTransformationLeclercWI18, label=\"Leclerc Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationLeclerc18) - 1, max(diffTransformationLeclerc18) + 1, 1))\nplt.xticks(np.arange(len(courseNames18)), courseNames18, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2018 - Charles Leclerc Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","211d77f4":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationLeclerc18[-1:][0] * 100)\/100,\n                round(meanDiffTransformationLeclercWI18[-1:][0] * 100)\/100,\n                str(min(diffTransformationLeclerc18)) + ' (' + raceWorstTransformationLeclerc18 + ')',\n                str(min(diffTransformationLeclercSucceeded18)) + ' (' + raceWorstTransformationLeclercWI18 + ')',\n                '+' + str(max(diffTransformationLeclerc18)) + ' (' + raceBestTransformationLeclerc18 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","cecedd63":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames19, qualifiersPositionsLeclerc19, label=\"Leclerc Position for each Qualifiers\")\nplt.plot(courseNames19, meanQualifiersPositionLeclerc19, label=\"Leclerc Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames19)), courseNames19, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2019 - Charles Leclerc Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","6d0c5c6a":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsLeclerc19, \n                str(round(qualifiersTopTenLeclerc19\/len(qualifiersPositionsLeclerc19) * 10000)\/100) + '%',\n                round(meanQualifiersPositionLeclerc19[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","d3c46047":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames19, positionLeclerc19, label=\"Leclerc Position for each Race\")\nplt.plot(courseNames19, meanPositionLeclerc19, label=\"Leclerc Mean Position\")\nplt.plot(courseNames19, meanPositionLeclercWI19, label=\"Leclerc Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames19)), courseNames19, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2019 - Charles Leclerc Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","68e5c1da":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsLeclerc19), \n                str(round(topTenLeclerc19\/len(positionLeclerc19) * 10000)\/100) + '%',\n                round(meanPositionLeclerc19[-1:][0] * 100)\/100,\n                round(meanPositionLeclercWI19[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","16580f0f":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames19, diffTransformationLeclerc19, label=\"Leclerc Transformation Rate each Race\")\nplt.plot(courseNames19, meanDiffTransformationLeclerc19, label=\"Leclerc Mean Transformation Rate\")\nplt.plot(courseNames19, meanDiffTransformationLeclercWI19, label=\"Leclerc Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationLeclerc19) - 1, max(diffTransformationLeclerc19) + 1, 1))\nplt.xticks(np.arange(len(courseNames19)), courseNames19, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2019 - Charles Leclerc Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","d610d602":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationLeclerc19[-1:][0] * 100)\/100,\n                round(meanDiffTransformationLeclercWI19[-1:][0] * 100)\/100,\n                str(min(diffTransformationLeclerc19)) + ' (' + raceWorstTransformationLeclerc19 + ')',\n                str(min(diffTransformationLeclercSucceeded19)) + ' (' + raceWorstTransformationLeclercWI19 + ')',\n                '+' + str(max(diffTransformationLeclerc19)) + ' (' + raceBestTransformationLeclerc19 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","894efcf6":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, qualifiersPositionsLeclerc20, label=\"Leclerc Position for each Qualifiers\")\nplt.plot(courseNames20, meanQualifiersPositionLeclerc20, label=\"Leclerc Mean Position Qualifiers\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='orange')\nplt.axhline(15.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Charles Leclerc Qualifiers Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","31d52794":"columns = ('Qualifiers Podiums', 'Qualifiers Top 10 (%)', 'Qualifiers Position Mean')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                qualifiersPodiumsLeclerc20, \n                str(round(qualifiersTopTenLeclerc20\/len(qualifiersPositionsLeclerc20) * 10000)\/100) + '%',\n                round(meanQualifiersPositionLeclerc20[-1:][0] * 100)\/100,\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","377dd4e6":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, positionLeclerc20, label=\"Leclerc Position for each Race\")\nplt.plot(courseNames20, meanPositionLeclerc20, label=\"Leclerc Mean Position\")\nplt.plot(courseNames20, meanPositionLeclercWI20, label=\"Leclerc Mean Position Without Technical Incidents GiveUp's (WTI)\")\nplt.axis([None, None, 20, 1])\nplt.yticks(np.arange(1, 20, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(3.1, color='gold')\nplt.axhline(10.1, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Charles Leclerc Place Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","5308bcad":"columns = ('Podiums', 'Top 10 (%)', 'Position Mean', 'Position Mean WTI (No Incidents)')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                str(podiumsLeclerc20) + ' (' + podiumsRaceLeclerc20[0] + ', ' + podiumsRaceLeclerc20[1] + ')', \n                str(round(topTenLeclerc20\/len(positionLeclerc20) * 10000)\/100) + '%',\n                round(meanPositionLeclerc20[-1:][0] * 100)\/100,\n                round(meanPositionLeclercWI20[-1:][0] * 100)\/100\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1, 4)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","f2cf1ce9":"plt.rcParams[\"figure.figsize\"] = (20,10)\n\nplt.scatter(courseNames20, diffTransformationLeclerc20, label=\"Leclerc Transformation Rate each Race\")\nplt.plot(courseNames20, meanDiffTransformationLeclerc20, label=\"Leclerc Mean Transformation Rate\")\nplt.plot(courseNames20, meanDiffTransformationLeclercWI20, label=\"Leclerc Mean Transformation Rate Without Technical Incidents GiveUp's (WTI)\")\n\nplt.yticks(np.arange(min(diffTransformationLeclerc20) - 1, max(diffTransformationLeclerc20) + 1, 1))\nplt.xticks(np.arange(len(courseNames20)), courseNames20, rotation=45)\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle='--')\nplt.axhline(0, color='red')\nplt.ylabel('Place')\nplt.xlabel('Courses')\nplt.suptitle('2020 - Charles Leclerc Place Transformation Variation')\n\nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","b03a4e23":"columns = ('Mean Position Transformation Rate', 'Mean Position Transformation Rate WTI', 'Worst Transformation Rate', 'Worst Transformation Rate WTI', 'Best Transformation Rate')\nrows = ['Charles Leclerc']\n\nax = plt.subplot2grid((1,1), (0,0), colspan=1, rowspan=1)\ntable = ax.table(cellText=[[\n                round(meanDiffTransformationLeclerc20[-1:][0] * 100)\/100,\n                round(meanDiffTransformationLeclercWI20[-1:][0] * 100)\/100,\n                str(min(diffTransformationLeclerc20)) + ' (' + raceWorstTransformationLeclerc20 + ')',\n                str(min(diffTransformationLeclercSucceeded20)) + ' (' + raceWorstTransformationLeclercWI20 + ')',\n                '+' + str(max(diffTransformationLeclerc20)) + ' (' + raceBestTransformationLeclerc20 + ')'\n            ]],\n          cellLoc='left',\n          rowLabels=rows,\n          colLabels=columns,\n          rowColours=plt.cm.Greys([0.1]),\n          colColours=plt.cm.Greys([0.1] * len(columns)),\n          loc=\"lower center\")\ntable.scale(1.25, 3)\ntable.set_fontsize(24)\nax.axis(\"off\")\nplt.show()","0b4ede16":"years = list(range(1950, 2021))\n\nracesItems = []\nstatusForYears = []\nmaxSpeedForYears = []\nprunedMaxSpeedForYears = []\nprunedMaxSpeedForYearsMean = []\ntechnicalProblemsRatio = []\ntechnicalProblemsRatioMean = []\ntechnicalProblemsRatioSmoothedByMean = []\n\n\ndef isTechincalProblem(statusId):\n    return (3 <= statusId <= 10) or (20 <= statusId <= 30) or (32 <= statusId <= 44) or (46 <= statusId <= 49) or (statusId == 51) or (statusId == 56) or (59 <= statusId <= 76) or (78 <= statusId <= 80) or (82 <= statusId <= 87) or (statusId == 89) or (91 <= statusId <= 95) or (98 <= statusId <= 110) or (statusId == 121) or (statusId == 126) or (129 <= statusId <= 132)\n\n\nfor i in years:\n    racesItems.append(races.loc[races['year'] == i]['raceId'].to_numpy())\n\nfor i in racesItems:\n    listOfStatus = []\n    listOfMaxSpeed = []\n    \n    for j in i:\n        listOfStatus = np.concatenate((listOfStatus, results.loc[results['raceId'] == j]['statusId'].to_numpy()))\n        listOfMaxSpeed = np.concatenate((listOfMaxSpeed, results.loc[results['raceId'] == j]['fastestLapSpeed'].to_numpy()))\n    statusForYears.append(listOfStatus)\n    maxSpeedForYears.append(listOfMaxSpeed)\n\n\nfor i in maxSpeedForYears:\n    newListOfMaxSpeed = []\n    \n    for j in i:\n        if j != '\\\\N':\n            newListOfMaxSpeed.append(float(j))\n    \n    prunedMaxSpeedForYears.append(newListOfMaxSpeed)\n    \nfor i in statusForYears:\n    technicalProblemsCount = 0\n    totalStatus = len(i)\n    \n    for j in i:\n        if isTechincalProblem(j):\n            technicalProblemsCount += 1\n\n    technicalProblemsRatio.append(technicalProblemsCount \/ totalStatus * 100)\n\nfor i in prunedMaxSpeedForYears:\n    if len(i) == 0:\n        prunedMaxSpeedForYearsMean.append(0)\n    else:\n        prunedMaxSpeedForYearsMean.append(sum(i) \/ len(i) - 160)\n        \nfor i in range(0, len(technicalProblemsRatio)):\n    technicalProblemsRatioMean.append(sum(technicalProblemsRatio[:i + 1]) \/ (i + 1))\n\nfor i in range(0, floor(len(technicalProblemsRatio) \/ 5 + 1)):\n    if i == floor(len(technicalProblemsRatio) \/ 5 + 1) - 1:\n        technicalProblemsRatioSmoothedByMean.append(technicalProblemsRatio[i * 5])\n    else:\n        meanResult = sum(technicalProblemsRatio[i * 5:i*5 + 5]) \/ 5\n        technicalProblemsRatioSmoothedByMean.append(meanResult)\n        technicalProblemsRatioSmoothedByMean.append(meanResult)\n        technicalProblemsRatioSmoothedByMean.append(meanResult)\n        technicalProblemsRatioSmoothedByMean.append(meanResult)\n        technicalProblemsRatioSmoothedByMean.append(meanResult)\n\n#print(len(prunedMaxSpeedForYearsMean))","14c6ff43":"circuitsNames = circuits['name'].to_numpy()\nprunedCircuitsNames = []\nracesFromCircuits = []\nstatusForCircuits = []\ntechnicalProblemsRatioCircuit = []\nprunedTechnicalProblemsRatioCircuit = []\nprunedTechnicalProblemsRatioCircuitMean = []\n#print(len(circuitsNames))\n\nfor i in circuits['circuitId'].to_numpy():\n    racesFromCircuits.append(races.loc[races['circuitId'] == i]['raceId'].to_numpy())\n\n    \nfor i in racesFromCircuits:\n    listOfStatus = []\n    \n    for j in i:\n        listOfStatus = np.concatenate((listOfStatus, results.loc[results['raceId'] == j]['statusId'].to_numpy()))\n    statusForCircuits.append(listOfStatus)\n\nfor i in statusForCircuits:\n    technicalProblemsCount = 0\n    totalStatus = len(i)\n    \n    for j in i:\n        if isTechincalProblem(j):\n            technicalProblemsCount += 1\n\n    if totalStatus == 0:\n        technicalProblemsRatioCircuit.append(-1)\n    else:\n        technicalProblemsRatioCircuit.append(technicalProblemsCount \/ totalStatus * 100)\n\nfor i in range(0, len(technicalProblemsRatioCircuit)):\n    if (technicalProblemsRatioCircuit[i] != -1):\n        prunedCircuitsNames.append(circuitsNames[i])\n        prunedTechnicalProblemsRatioCircuit.append(technicalProblemsRatioCircuit[i])\n        \nfor i in range(0, len(prunedTechnicalProblemsRatioCircuit)):\n    prunedTechnicalProblemsRatioCircuitMean.append(sum(prunedTechnicalProblemsRatioCircuit[:i + 1]) \/ (i + 1))\n    \n#print(len(prunedCircuitsNames), len(prunedTechnicalProblemsRatioCircuit))\n#print(prunedTechnicalProblemsRatioCircuitMean)","1b580ada":"constructorsNames = constructors['name'].to_numpy()\nprunedConstructorsNames = []\nracesFromConstructors = []\nstatusForConstructors = []\ntechnicalProblemsRatioConstructor = []\nprunedTechnicalProblemsRatioConstructor = []\nprunedTechnicalProblemsRatioConstructorMean = []\n#print(len(circuitsNames))\n\nfor i in constructors['constructorId'].to_numpy():\n    statusForConstructors.append(np.concatenate((listOfStatus, results.loc[results['constructorId'] == i]['statusId'].to_numpy())))\n    \nfor i in statusForConstructors:\n    technicalProblemsCount = 0\n    totalStatus = len(i)\n    \n    for j in i:\n        if isTechincalProblem(j):\n            technicalProblemsCount += 1\n\n    if totalStatus == 0:\n        technicalProblemsRatioConstructor.append(-1)\n    else:\n        technicalProblemsRatioConstructor.append(technicalProblemsCount \/ totalStatus * 100)\n\nfor i in range(0, len(technicalProblemsRatioConstructor)):\n    if (technicalProblemsRatioConstructor[i] != -1):\n        prunedConstructorsNames.append(constructorsNames[i])\n        prunedTechnicalProblemsRatioConstructor.append(technicalProblemsRatioConstructor[i])\n        \nfor i in range(0, len(prunedTechnicalProblemsRatioConstructor)):\n    prunedTechnicalProblemsRatioConstructorMean.append(sum(prunedTechnicalProblemsRatioConstructor[:i + 1]) \/ (i + 1))\n    \n#print(len(prunedConstructorsNames), len(prunedTechnicalProblemsRatioConstructor))\n#print(prunedTechnicalProblemsRatioCircuitMean)","991d9c95":"plt.rcParams[\"figure.figsize\"] = (25,10)\n\nx = np.arange(len(years))  # the label locations\nwidth = 0.66  # the width of the bars\n\ncmap = cm.get_cmap('copper', 10)\n\nplt.plot(x, technicalProblemsRatioMean, label='Mean Evolution of Technical Problems Ratio', color='green')\nplt.plot(x, technicalProblemsRatioSmoothedByMean, label='Evolution of Technical Problems Ratio (Smoothed by Bin Means (5))', color='red')\nplt.scatter(x, prunedMaxSpeedForYearsMean, label='Speed Mean Scattering (MaxSpeed On Fastest Lap - 150)', color='blue', zorder=2)\n\nbars = plt.bar(x, technicalProblemsRatio, width)\n\nfor i in range(0, len(bars)):\n    bars[i].set_color(cmap(i % 10))\n\nplt.gca().margins(x=0)\nplt.ylabel('Percentage of Pilot getting Technical Incidents')\nplt.xlabel('Year')\nplt.title('Evolution of Percentage of Pilot getting Technical Incidents over Time')\nlocs, texts = plt.xticks(x, years, rotation=45)\nplt.grid(axis='y', linestyle='--')\n\nfor i in range(0, len(texts)):\n    texts[i].set_color(cmap(i % 10))\n    \nleg = plt.legend(loc='lower left', shadow=True, fancybox=True)\n\nplt.show()","21e5ade0":"plt.rcParams[\"figure.figsize\"] = (25,10)\n\nwidth = 0.66  # the width of the bars\n\ncmap = cm.get_cmap('copper', 10)\n\nplt.plot(prunedCircuitsNames, prunedTechnicalProblemsRatioCircuitMean, label='Mean Evolution of Technical Problems Ratio', color='green')\n\nbars = plt.bar(prunedCircuitsNames, prunedTechnicalProblemsRatioCircuit, width)\n\nfor i in range(0, len(bars)):\n    bars[i].set_color(cmap(i % 10))\n\nplt.gca().margins(x=0)\nplt.ylabel('Percentage of Pilot getting Technical Incidents')\nplt.xlabel('Circuits')\nplt.title('Evolution of Percentage of Pilot getting Technical Incidents over Circuits')\nlocs, texts = plt.xticks(prunedCircuitsNames, prunedCircuitsNames, rotation=90)\nplt.grid(axis='y', linestyle='--')\n\nfor i in range(0, len(texts)):\n    texts[i].set_color(cmap(i % 10))\n    \nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","0288f00e":"plt.rcParams[\"figure.figsize\"] = (40,10)\n\nwidth = 0.66  # the width of the bars\n\ncmap = cm.get_cmap('copper', 10)\n\nplt.plot(prunedConstructorsNames, prunedTechnicalProblemsRatioConstructorMean, label='Mean Evolution of Technical Problems Ratio', color='green')\n\nbars = plt.bar(prunedConstructorsNames, prunedTechnicalProblemsRatioConstructor, width)\n\nfor i in range(0, len(bars)):\n    bars[i].set_color(cmap(i % 10))\n\nplt.gca().margins(x=0)\nplt.ylabel('Percentage of Pilot getting Technical Incidents')\nplt.xlabel('Constructors')\nplt.title('Evolution of Percentage of Pilot getting Technical Incidents over Constructors')\nlocs, texts = plt.xticks(prunedConstructorsNames, prunedConstructorsNames, rotation=90)\nplt.grid(axis='y', linestyle='--')\n\nfor i in range(0, len(texts)):\n    texts[i].set_color(cmap(i % 10))\n    \nleg = plt.legend(loc='best', shadow=True, fancybox=True)\n\nplt.show()","b74d885e":"# Evolution of Percentage of Pilot getting Technical Incidents over Circuits\nThere are over 76 different circuits that have been registered to F1 competitions. Some of them are more tending to provoke technical incidents due to the shape of the circuit.\n\nThe circuits there that are the most provoking technical incidents are (over 60%) : \nLe Mans\nFair Park\nCircuit Mont Tremblant\nSebring International Raceway\n\nThe circuits there that are the less provoking technical incidents are (less than 15%):\nAutodromo Internactional do Algarve\nValencia Street Circuit\nYas Marina Circuit\nCircuit of the Americas\n","3b91120f":"# Evolution of Percentage of Pilot getting Technical Incidents over Constructors\nThere are over 212 constructors that have been created from 1950 to 2020 in F1.\nFollowing constructors are constructors that got the most technical incidents, and the less technical incidents.\n\nThe constructors that had the most technical incidents are (over 55%) : \nEagle-Weslake\nStewart\nBrabham Alfa-Romeo\nVanwall\n\nThe circuits there that are the less provoking technical incidents are (less than 20%):\nMercedes\nMarussia\nColoni\nManor Marussia\n","bced376e":"# Ocon - 2017","680b9937":"# Gasly - 2018","53512ce0":"# Gasly - 2019","ea850cec":"# Leclerc - 2018","111b88fe":"# Boards of 3 Pilots\n**Esteban Ocon (French), Pierre Gasly (French), Charles Leclerc (Monegasque)**","3042882d":"# Relationships with Status of Pilots according to : Time, Races, Constructors, Fastest Speed.\n","51db6cee":"# Leclerc - 2019","52927566":"# Ocon - 2018","729c810a":"# Evolution of Percentage of Pilot getting Technical Incidents over Time and Speed\n\nWe can see in the graph that there is an evolution about the Percentage of Technical Incidents happening to pilots.\nFrom 2000, Technical Incidents are getting lower and lower as it falls nearly under 20 % of technical incidents over the year.\n\nThe fastest speed also indicates others informations :\nMax Speed mean has been decreased from 2004 to 2010 due to lowering Technical Incidents from races.\nMax Speed rose up between, 2013 and 2020, because Technology has got better and incidents have gotten lower.\n","88812ce5":"# Gasly - 2020","587100ad":"# Ocon - 2020","a5107b83":"# Esteban Ocon\n\nThe young 24 year's old French Pilot. (Three Year of full F1 Competition)\nThrough his boards, we can make the statement that this french Pilot has started greatly his F1 career in 2017. \nWith a great 8th place, and 87 points for his first whole year in F1 competition, he made a statement on the F1 tracks.\nBy looking at the qualifiers results means in 2017, we saw his progress through the whole F1 tournament, leading to better performances for qualifiers, and better positions for competition. His first complete year in F1, prove he deserved his place there. We can definitely say that this first year was his best :\n- 90 % of TOP 10 places in this first year, grabbing in a lot of points for him.\n- A clear tendency of better results in Qualifiers\n- A clear positive transformation rate from Qualifiers to Race Results\n\nIn 2018, he finished the competition 12th with 49 points.\nHe obtained his first podium in Qualifiers, a solid 3rd place in the Belgian Grand Prix.\nBut overall, his performance was worse, as the Top 10 percentage is slightly lower for Qualifications (57%), and way lower for Race Results (48%).\nHowever, he encountered fatal incidents that cost him places lost. Moreover, we can see that without Technical Incidents, Esteban Ocon, wins places according to his starting position. Which is a good sign.\n\nIn 2019, Esteban Ocon was replaced in F1 by another player (Lance Stroll). Therefore he couldn't compete in F1 for this year.\n\nIn 2020, Esteban Ocon came back for his third F1 season. He finished 12th with 62 points.\nIn this year, he obtained his first Podium ever, finishing 2nd, behind Sergio P\u00e9rez, in the Sakhir Grand Prix.\nOverall, his performance was slightly better than in 2018, but still not better than his first year.\nWith lower performance in Qualifications (47% of Top Ten presence), but better Race Results (58% Top Ten presence), it is showing good signs for the next Grand Prix for this young French Pilot.","617cdab1":"Data Preloading","fd07f306":"# Leclerc - 2020","f948db6d":"# Pierre Gasly\n\nThe other young 24 year's old French Pilot. (Three Year of full F1 Competition)\nStarting his first complete season in 2018, Pierre Gasly has made statement through his career.\nIn 2018, he didn't get has good results as Esteban Ocon starting his career. He finished 15th, with only 29 points. In deed, he had a low rate of Top Ten Qualifiers (28%), and his Top Ten presence was made from the same statement (23%).\nBut in this year, what is interesting to keep in mind, are his good transformation rates, leading him to pursue his career in 2019.\n\n2019, Pierre Gasly started to perform.\nHe got his first podium ever, finishing second in the Brazilian Grand Prix.\nOverall, he finished 7th with solid 95 points. He had a way better Top Ten Qualifiers Presence (62%) and an excellent presence in the Top Ten Race Results (67%).\nThis year was his best year in his career so far.\n\n2020, new achievement for Pierre Gasly.\nHe got his first Victory ever in the Italian Grand Prix.\nOverall, he finished 10th with good 75 points. He had a slightly worse compared to 2019 Top Ten Qualifiers Presence (64%) even if it's a lot of 10th, 9th, 8th place and a good enough presence in the Top Ten Race Results (58%).\nThis year was a good achievement year, and consistency remained there.","64dabd54":"# Charles Leclerc\n\nThe young 23 year's old Monegasque Pilot. (3 Years of Competition)\nYounger that the 2 previous pilot, Charles Leclerc is a promising talent. With incredible performances in his 2019 year and good performances 2020, we have great expectations for the 2021 year.\n\nStarting in 2018, Charles started roughly, but got better and better in Qualifications (ascending mean). With only 38% of presence in Top Ten Qualifiers, it's a good career start for the young Monegasque. His Top Ten presence in Race Results was good to continue and pursue his career in F1 (47%). He finished overall, 13th with 39 points.\n\nIn 2019, the young Monegasque performed amazingly.\nHe got his best record of his career in this year : \n- 11 Qualifiers Podiums and 95% Top Ten Presence in Qualifiers Positions (4th place mean)\n- Alike, 10 Race Results Podiums and a 85% Top Ten Presencee in Race Results Position with 4th place mean for results. He got 2 Victories (Belgian Grand Prix and Italian Grand Prix).\n- Transformation was not the best but he got a lot of points through good Qualifiers and maintaining good places.\nHe finished 4th with 264 points.\n\nIn 2020, the young Monegasque performed worse than in 2019, finishing 8th with 98 points.\nHe got 2 podiums in the year, respectively finishing second and third (Autrichian Grand Prix and British Grand Prix).\nWe can mention again very good Qualifiers Top Ten presence (65%) and Race Results presence (59%)\n\n\nThis talent will be promising for the next year of F1 tournament."}}