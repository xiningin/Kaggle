{"cell_type":{"5be700d3":"code","5953c229":"code","18b16bae":"code","f6bcb3c9":"code","ffa4319e":"code","4969fdd2":"code","65b63fa4":"code","b316bbe9":"code","47d01e07":"code","397d09a0":"code","e3f5808a":"code","43aea37a":"code","749fa531":"code","1650ab39":"code","350e0c66":"code","c40adbae":"code","b05f56dd":"code","20844c34":"code","0e780174":"code","ff107d88":"code","1e731870":"code","86b4215d":"code","ff9924e6":"code","461c135b":"code","53f7e393":"code","78a8e965":"code","a82b1dfa":"code","a54ad2e4":"code","45ec97ab":"code","b44a1db1":"code","d27a847c":"code","60ae6248":"code","ba263cca":"code","89a1f323":"code","ac66e649":"code","a51e7ce1":"code","9e83122f":"code","b3b4489a":"code","cf3ae276":"code","eddb0a03":"code","70bd5797":"code","dc09cc45":"code","359e79bf":"code","9741754d":"code","2785fd43":"code","106ba220":"code","f8a3aa50":"code","cd67e68b":"code","28707aac":"code","ac7ceb2c":"code","3b033a22":"code","c8ba92dc":"code","5a3b573e":"code","5f100188":"code","25135da4":"code","147be585":"code","f41a914e":"code","475a08b3":"code","9626a4b3":"code","37e8e4b9":"code","cb12e439":"code","3aa785a6":"code","beefb62b":"code","a865cdff":"code","af2896a0":"code","08533449":"code","7d9a489b":"code","11547706":"code","67f09de5":"code","6e70ddee":"code","f3034dad":"markdown","f7e1335c":"markdown","c55a1ee8":"markdown","cedc26ba":"markdown","e61204fc":"markdown","4512c29f":"markdown","89725506":"markdown","2a4e28fb":"markdown","8e25ee00":"markdown","1f3e8143":"markdown","f48ad1cf":"markdown","76603992":"markdown","dd1b4866":"markdown","5001d226":"markdown","ae524a46":"markdown","14c8873f":"markdown","36e61156":"markdown","a195ea9f":"markdown","1e1dd4f1":"markdown","3620fce6":"markdown","f76d20f0":"markdown","afcbb83a":"markdown","6f178bc4":"markdown","6a4036a0":"markdown","60485ac1":"markdown","9e99ac65":"markdown","a1e9e1c0":"markdown","95486dc9":"markdown","5201b297":"markdown","ecdd1d88":"markdown","a5309c8a":"markdown","615ba712":"markdown","25809bd4":"markdown","1af42ba9":"markdown","d8b44e0c":"markdown","8e210d86":"markdown","ad4a0b6e":"markdown","40c0e715":"markdown","c90eae30":"markdown","e5b08eb3":"markdown","135552e0":"markdown","89802f74":"markdown","f602287e":"markdown","e7d06a54":"markdown","95131217":"markdown","d9cac6d1":"markdown","a2bfc963":"markdown","b69be87f":"markdown"},"source":{"5be700d3":"# data analysis\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nimport math\nfrom scipy import stats\nfrom scipy.stats import norm, skew, mode\nfrom scipy.special import boxcox1p\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.gofplots import qqplot\nimport statsmodels.api as sm\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom wordcloud import WordCloud\n%matplotlib inline\n\n# machine learning\nfrom joblib import parallel_backend\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline, Pipeline, FeatureUnion\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import RobustScaler, LabelEncoder, OneHotEncoder, StandardScaler, MinMaxScaler\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.metrics import confusion_matrix, accuracy_score \nfrom sklearn.metrics import precision_score,f1_score\n\nimport xgboost as xgb\nimport lightgbm as lgb\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier,Pool\n\nimport warnings\nwarnings.filterwarnings('ignore')","5953c229":"#games = pd.read_csv('appstore_games.csv')\ngames=pd.read_csv('..\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv')\ngames.head(3)","18b16bae":"#save icon URl\nicons = games['Icon URL']\ndescriptions = games['Description']","f6bcb3c9":"print(\"Number of rows:\", games.shape[0])\nprint(\"Number of columns:\", games.shape[1])\nprint(\"----------------------------------------------------\")\nprint(games.info())","ffa4319e":"games.describe()","4969fdd2":"total = games.isnull().sum().sort_values(ascending=False)\npercent = (total\/games.isnull().count()).sort_values(ascending=False)*100\ndtype = games.dtypes\nna_table = pd.concat([total,percent,dtype], axis=1, keys=['Total', '%', 'Dtype'])\nna_table","65b63fa4":"games = games.drop(['ID','URL','Subtitle','Icon URL','Description'], axis = 1)","b316bbe9":"total = games.isnull().sum().sort_values(ascending=False)\npercent = (total\/games.isnull().count()).sort_values(ascending=False)*100\ndtype = games.dtypes\nna_table = pd.concat([total,percent,dtype], axis=1, keys=['Total', '%', 'Dtype'])\nna_table","47d01e07":"games[games['Size'].isnull()]\n#games.iloc[16782]","397d09a0":"def na_median(column):\n    return column.fillna(column.median())","e3f5808a":"games['Size']=games['Size'].transform(na_median)","43aea37a":"games['Price']=games['Price'].transform(na_median)","749fa531":"games['Average User Rating']=games['Average User Rating'].transform(na_median)","1650ab39":"games['User Rating Count']=games['User Rating Count'].transform(na_median)","350e0c66":"total = games.isnull().sum().sort_values(ascending=False)\npercent = (total\/games.isnull().count()).sort_values(ascending=False)*100\ndtype = games.dtypes\nna_table = pd.concat([total,percent,dtype], axis=1, keys=['Total', '%', 'Dtype'])\nna_table.head()","c40adbae":"games['Languages'] = games['Languages'].fillna(\"EN\", axis=0)\ngames['In-app Purchases'] = games['In-app Purchases'].fillna(0, axis=0)","b05f56dd":"total = games.isnull().sum().sort_values(ascending=False)\npercent = (total\/games.isnull().count()).sort_values(ascending=False)*100\ndtype = games.dtypes\nna_table = pd.concat([total,percent,dtype], axis=1, keys=['Total', '%', 'Dtype'])\nna_table.head()","20844c34":"games.head(2)","0e780174":"games['Size'] = round(games['Size']\/1000000, 2)\ngames.head(2)","ff107d88":"games['Original Release Date'] = games['Original Release Date'].str.extract(r'\\b(\\w+)$')\ngames['Current Version Release Date'] = games['Current Version Release Date'].str.extract(r'\\b(\\w+)$')\ngames.head(3)","1e731870":"games['Age Rating'] = games['Age Rating'].str.replace('+','').astype(int)\ngames.head(2)","86b4215d":"games['Languages'] = games['Languages'].apply(lambda x: len(x.split(',')))\ngames.head(2)","ff9924e6":"#games['Primary Genre'].unique()\ngames['Genres'].unique()","461c135b":"Primary_Genre = []\nSecondary_Genre = []\nfor x in games['Genres']:\n    Primary_Genre.append(x.split(',')[0])\n    Secondary_Genre.append(x.split(',')[1])\n    \ngames['Primary Genre'] = Primary_Genre\ngames['Genres'] = Secondary_Genre","53f7e393":"games.head(2)","78a8e965":"games.rename(columns={\"Genres\": \"Secondary Genre\"}, inplace = True)","a82b1dfa":"games['In-app Purchases'] = games['In-app Purchases'].apply(lambda x:1 if x!= 0 else 0)","a54ad2e4":"games.tail(2)","45ec97ab":"games['In-app Purchases'].unique()","b44a1db1":"a = []\nb = []\nfor x,y in games['Developer'].value_counts()[:20].iteritems():\n    a.append(x)\n    b.append(y)\n    \n    \nfig = go.Figure([go.Bar(x=a ,y=b, text=b, marker_color='red')])\nfig.update_layout(template='plotly_white',title_text='Top 20 most apps by developer')\nfig.update_yaxes(title_text='Number of apps')\nfig.update_xaxes(title_text='Developer',tickfont_size=12)\nfig.show()","d27a847c":"a = []\nb = []\nfor x,y in games.groupby('Primary Genre')[['Size']].mean().sort_values(by = ['Size'], ascending = False).iteritems():\n    for w,z in y.iteritems():\n        a.append(w)\n        b.append(z)\n        \n        \nfig = go.Figure([go.Bar(x =a ,y = b, marker_color='purple')])\nfig.update_layout(template='plotly_white',title_text='Average app size by Genre')\nfig.update_yaxes(title_text='Size(mb)')\nfig.update_xaxes(title_text='Genre',tickfont_size=15)\nfig.show()        ","60ae6248":"a = []\nb = []\nfor x,y in games['Average User Rating'].value_counts().iteritems():\n    a.append(x)\n    b.append(y)\n    \n     \nfig = go.Figure([go.Bar(x=a, y=b , text=b, textposition='outside', marker_color='darkblue')])\nfig.update_layout(template='plotly_white',title_text='Amount of ratings in the dataset')\nfig.update_yaxes(title_text='Count')\nfig.update_xaxes(title_text='Ratings',tickfont_size=18)\nfig.show()    ","ba263cca":"f,ax= plt.subplots(figsize=(12,7))\ng = sns.heatmap(games.corr(),annot= True)\nbottom, top = g.get_ylim()\ng.set_ylim(bottom+.5, top-.5)\nplt.show()","89a1f323":"games[['Original Release Date','Average User Rating']].groupby('Original Release Date', as_index=False).mean()","ac66e649":"temp1= [x for x in zip(games['Price'], games['In-app Purchases'])]\ntemp2 = []\nfor x,y in temp1:\n    if x == 0.0 and y == 0:\n        temp2.append(1)\n    else:\n        temp2.append(0)\n        ","a51e7ce1":"games['FreeToPlay'] = temp2\ngames.head()","9e83122f":"#games.columns.values\nvariables = ['Name', 'Average User Rating', 'User Rating Count', 'Price',\n       'In-app Purchases', 'Developer', 'Age Rating', 'Languages', 'Size',\n       'Primary Genre', 'Secondary Genre', 'Original Release Date',\n       'Current Version Release Date']\n\nnumerical = games.select_dtypes(exclude=['object']).columns\ncategorical = games.select_dtypes(include=['object']).columns\n\nY = games['Average User Rating']","b3b4489a":"#in app purchase average\nb = []\nfor x,y in games.groupby('In-app Purchases')[['Average User Rating']].mean().sort_values(by = ['Average User Rating'], ascending = False).iteritems():\n    for w,z in y.iteritems():\n        b.append(z)\n        \n        \ntemp = []\nfor x in games['Price']:\n    if x == 0.0:\n        temp.append(0)\n    else:\n        temp.append(1) \n        \n#paid average              \nd = []\nfor x,y in games.groupby(temp)[['Average User Rating']].mean().sort_values(by = ['Average User Rating'], ascending = False).iteritems():\n    for w,z in y.iteritems():\n        d.append(z) \n\n#freetoplay average\nf = []\nfor x,y in games.groupby('FreeToPlay')[['Average User Rating']].mean().sort_values(by = ['Average User Rating'], ascending = False).iteritems():\n    for w,z in y.iteritems():\n        f.append(z)","cf3ae276":"fig = go.Figure(data=[\n    go.Bar(name='Price',x =['Has In-app purchases','Pay to download','Free to play'] ,y = (b[1],d[1],f[0]), text=(b[1],d[1],f[0]))])\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=25)),barmode='relative', template='plotly_dark', title_text='Average user rating per app payment type', font_family=\"Courier New\")\nfig.update_yaxes(title_text='Average user rating')\nfig.update_xaxes(title_text='App payment type',tickfont_size=20)\nfig.show()   ","eddb0a03":"genre_count = games['Primary Genre'].value_counts().sort_values(ascending=False)\nfig = go.Figure(data=[go.Pie(labels=genre_count.index, values=genre_count.values)])\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=25)),\n    title_text=\"Percent of Primary Genres in our dataset\", annotations=[dict(text='Primary Genres',bgcolor='white', font_size=12, showarrow=False)])\nfig.update_traces(hoverinfo='percent', textinfo='label+percent', textfont_size=20,textposition='inside')\nfig.show()","70bd5797":"genre_count = games['Secondary Genre'].value_counts().sort_values(ascending=False)\nfig = go.Figure(data=[go.Pie(labels=genre_count.index, values=genre_count.values)])\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=25)),\n    title_text=\"Percent of Secondary Genres in our dataset\", annotations=[dict(text='Secondary Genres', bgcolor='white', font_size=6, showarrow=False)])\nfig.update_traces(hoverinfo='percent', textinfo='percent', textfont_size=35,textposition='inside')\nfig.show()","dc09cc45":"primary_avg = games.groupby('Primary Genre')[['Average User Rating']].mean().sort_values(by = ['Average User Rating'], ascending = False)\n\nfig = go.Figure(data=[\n    go.Bar(name='Primary', x =primary_avg.index  ,y = primary_avg['Average User Rating'] , text= primary_avg['Average User Rating'], marker_color='darkblue')])\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=25)),barmode='relative', template='plotly_dark', title_text='Average user rating per Primary Genre', font_family=\"Courier New\")\nfig.update_yaxes(title_text='Average user rating', range=[0,5])\nfig.update_xaxes(title_text='Primary Genre',tickfont_size=15)\nfig.show()   ","359e79bf":"secondary_avg = games.groupby('Secondary Genre')[['Average User Rating']].mean().sort_values(by = 'Average User Rating', ascending = False)\n\n\nfig = go.Figure(data=\n    go.Bar(name='secondary', x =secondary_avg.index  ,y = secondary_avg['Average User Rating'], text= secondary_avg['Average User Rating'], marker_color='darkred'))\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=25)),barmode='relative', template='plotly_dark', title_text='Average user rating per Secondary Genre', font_family=\"Courier New\", xaxis_tickangle=-45)\nfig.update_yaxes(title_text='Average user rating', range=[0,5])\nfig.update_xaxes(title_text='Secondary Genre',tickfont_size=12)\nfig.show()  ","9741754d":"more_than_500_reviews = games.loc[(games['User Rating Count'] >= 500)]\ntop_dev_ratings = more_than_500_reviews.groupby('Developer')[['Average User Rating']].mean().sort_values(by = 'Average User Rating', ascending = False).head(15)\nlow_dev_ratings = more_than_500_reviews.groupby('Developer')[['Average User Rating']].mean().sort_values(by = 'Average User Rating', ascending = True).head(15)","2785fd43":"fig = go.Figure(data=[\n    go.Bar(name='Primary', x =top_dev_ratings.index  ,y = top_dev_ratings['Average User Rating'], text= top_dev_ratings['Average User Rating'], marker_color='yellow')])\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=20)),barmode='relative', template='seaborn', title_text='Average user ratings of the top rated 15 developers(over 500 reviews)', font_family=\"Courier New\")\nfig.update_yaxes(title_text='Average user rating', range=[0,5])\nfig.update_xaxes(title_text='Developer',tickfont_size=15)\nfig.show()  ","106ba220":"fig = go.Figure(data=[\n    go.Bar(name='Primary', x =low_dev_ratings.index  ,y =low_dev_ratings['Average User Rating'], text=low_dev_ratings['Average User Rating'], marker_color='darkgreen')])\nfig.update_layout(hoverlabel=dict(font=dict(family='sans-serif', size=20)),barmode='relative', template='seaborn', title_text='Average user ratings of the lowest rated 15 developers(over 500 reviews)', font_family=\"Courier New\")\nfig.update_yaxes(title_text='Average user rating', range=[0,5])\nfig.update_xaxes(title_text='Developer',tickfont_size=15)\nfig.show()  ","f8a3aa50":"f,ax= plt.subplots(figsize=(15,8))\nwordcloud = WordCloud(background_color='white',width=750, height=750).generate(' '.join(descriptions))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most common words in app descriptions')\nplt.show()","cd67e68b":"ord_price = games.groupby('Original Release Date')[['Price']].mean()\nord_size = games.groupby('Original Release Date')[['Size']].mean()\nord_urc = games.groupby('Original Release Date')[['User Rating Count']].mean()\n\nfig, ax = plt.subplots(1, 3, figsize=(26, 7.5))\n\nsns.lineplot(x='Original Release Date', y='Price', data=ord_price, color = 'darkred', ax=ax[0], marker='o', linewidth = 2)\nax[0].set_title('Change in app price though 2008-2019', fontsize = 15)\nax[0].tick_params(labelsize=12.6)\nax[0].set_xlabel('Year',fontsize = 18)\nax[0].set_ylabel('Price',fontsize = 18)\n\nsns.lineplot(x='Original Release Date', y='Size', data=ord_size, color = 'darkblue', ax=ax[1], marker='o', linewidth = 2)\nax[1].set_title('Change in app size though 2008-2019', fontsize = 15)\nax[1].tick_params(labelsize=12.6)\nax[1].set_xlabel('Year',fontsize = 18)\nax[1].set_ylabel('Size',fontsize = 18)\n\nsns.lineplot(x='Original Release Date', y='User Rating Count', data=ord_urc, color = 'darkgreen', ax=ax[2], marker='o', linewidth = 2)\nax[2].set_title('Change in user ratings though 2008-2019', fontsize = 15)\nax[2].tick_params(labelsize=12.6)\nax[2].set_xlabel('Year',fontsize = 18)\nax[2].set_ylabel('User Rating Count',fontsize = 18)\n\nplt.show()","28707aac":"t5a = games.loc[(games['User Rating Count'] >= 100000)]\nt5a2 = t5a.loc[(t5a['Average User Rating'] == 5)]\nt5a3 = t5a2.groupby(['Name']).agg({\"Average User Rating\":\"sum\", \"User Rating Count\":\"sum\"}).sort_values(by = 'User Rating Count', ascending = False).head(5)\nt5a3","ac7ceb2c":"df = games.copy()\ndf['Average User Rating'] = df['Average User Rating'].astype(int)","3b033a22":"label_encoded=df[['User Rating Count', 'Price',  'Size', 'Developer', 'Languages','Primary Genre',\n                     'Secondary Genre', 'Original Release Date', 'Current Version Release Date']]\n                       \nonehot_coded = df[['In-app Purchases', 'FreeToPlay', 'Age Rating']]\n\n#onehotencoded\nenc = OneHotEncoder(handle_unknown='ignore')\ndf_oh = pd.DataFrame(enc.fit_transform(onehot_coded).toarray(), columns = enc.get_feature_names()) #df_oh.columns\n\n\n#labelencoder\ndf_le = label_encoded.apply(LabelEncoder().fit_transform)\ndataframe = df_le.join(df_oh)\ndataframe.head()","c8ba92dc":"Y = pd.DataFrame(df['Average User Rating'])\nX = dataframe","5a3b573e":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1)\n\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.25, random_state=1) ","5f100188":"scaler = MinMaxScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)\nX_test = scaler.transform(X_test)","25135da4":"xstats = dataframe.values\nystats = games.loc[:,'Average User Rating'].values\n\nx1 = sm.add_constant(xstats)\nresults = sm.OLS(ystats,x1).fit()\nresults.summary()","147be585":"rfc_model = RandomForestClassifier(random_state=0).fit(X_train, Y_train)\nperm = PermutationImportance(rfc_model, random_state=1).fit(X_test, Y_test)\neli5.show_weights(perm, feature_names = X.columns.tolist() )# = xperm_test.columns.tolist()","f41a914e":"def validation_predictor(ml): \n    model = ml.fit(X_train,Y_train)\n    print('Model: ',model)\n    print('\\n')\n    global y_pred_val\n    y_pred_val = model.predict(X_val)\n    cm = confusion_matrix(Y_val, y_pred_val)\n    \n    print('Accuracy score on train sets: {}'.format(model.score(X_train,Y_train)))\n    print('Precision score: {}'.format(precision_score(Y_val, y_pred_val, average='micro')))\n    print('F1 score: {}'.format(f1_score(Y_val, y_pred_val, average='macro')))","475a08b3":"validation_predictor(KNeighborsClassifier(n_neighbors = 6, weights = 'uniform', n_jobs=-1, p = 2))","9626a4b3":"validation_predictor(DecisionTreeClassifier(ccp_alpha=0.0001, criterion = 'gini', max_depth=25, random_state = 10))","37e8e4b9":"validation_predictor(CatBoostClassifier(iterations=1550,depth=5, learning_rate=.25, eval_metric='AUC', verbose = 0))","cb12e439":"validation_predictor(RandomForestClassifier(ccp_alpha=0.001,n_estimators=50, max_depth = 25, criterion = 'entropy',\n                                            oob_score =  True, random_state = 4))","3aa785a6":"validation_predictor(xgb.XGBClassifier(eval_metric='mlogloss',learning_rate=0.08,\n                                       max_depth=5, n_estimators=1000, random_state =7, nthread = -1))","beefb62b":"validation_predictor(lgb.LGBMClassifier(objective='multiclass',num_leaves=5, max_depth = -1,\n                              learning_rate=0.15, n_estimators=2300, max_bin = 55))","a865cdff":"def predictor(ml): \n    model = ml.fit(X_train,Y_train)\n    global y_pred\n    y_pred = model.predict(X_test)\n    cm = confusion_matrix(Y_test, y_pred)\n    \n    print('Accuracy score on train sets: {}'.format(model.score(X_train,Y_train)))\n    print('Precision score: {}'.format(precision_score(Y_test, y_pred, average='micro')))","af2896a0":"predictor(KNeighborsClassifier(n_neighbors = 3, weights = 'uniform', n_jobs=-1, p = 5))\n\nKNC = y_pred","08533449":"predictor(DecisionTreeClassifier(ccp_alpha=0.0001, criterion = 'gini', max_depth=25, random_state = 10))","7d9a489b":"predictor(CatBoostClassifier(iterations=1550,depth=5, learning_rate=.25, eval_metric='AUC', verbose = 0))","11547706":"predictor(RandomForestClassifier(ccp_alpha=0.001,n_estimators=50, max_depth = 25, criterion = 'entropy',\n                                 oob_score =  True, random_state = 4))","67f09de5":"predictor(xgb.XGBClassifier(eval_metric='mlogloss',learning_rate=0.08,\n                                       max_depth=5, n_estimators=1000, random_state =7, nthread = -1))","6e70ddee":"predictor(lgb.LGBMClassifier(objective='multiclass',num_leaves=5, max_depth = -1,\n                              learning_rate=0.15, n_estimators=2300, max_bin = 55))","f3034dad":"### XGBoost","f7e1335c":"##### Missing values","c55a1ee8":"### Random forest","cedc26ba":"##### Correlation heatmap","e61204fc":"*Split data*","4512c29f":"Conclusion: Games overtake every other Genre by far. While Strategy games are the most popular form of game, with entertainment coming at second.","89725506":"## 6. EDA","2a4e28fb":"### LGBM","8e25ee00":"Conclusion: The graphs for both Genre categorys show the top rated genres. Food&Drink, News, and Music lead the primary genres, while magazines&newspapers, Medical and Places&Objects lead secondary genres.","1f3e8143":"## 7. Model preparation","f48ad1cf":"### Catboost","76603992":"## 5. Pre-EDA\nWe are all set, the data is now clean and we can take a look at the relationships between variables etc. before we begin our EDA and modeling.","dd1b4866":"### Which developers rack the highest\/lowest average ratings?","5001d226":"Interesting find, as the dates progress so did most the average user ratings:","ae524a46":"### Today we will explore the appstore games dataset from kaggle: \nhttps:\/\/www.kaggle.com\/tristan581\/17k-apple-app-store-strategy-games?select=appstore_games.csv\n\n### We will clean the data, provide visualizations, answer some questions regarding the results we found and finally we will build a ML model. \n### Tasks:\n#### 1. Answer specific questions such as: \n\n* In-app purchase games vs paid games vs free to play\n* What genre and subgenres are the most popular?\n* Which developers rack the highest\/lowest average ratings?\n* What are the most common words used in app descriptions?\n* Change in Price, Size, and User rating count throughout the years.\n* Top 5 apps with the perfect rating and highest rating count.\n* What variable seems to have the most effect on a high rating?\n\n#### 2. Build a model that predicts the rating of a game\n\n### Table of Contents:\n1. [Packages and data preparation](#1.-Packages-and-data-preparation)\n2. [Quick glance at data](#2.-Quick-glance-at-data)\n3. [Clean data pt.1](#3.-Clean-data-pt.1)\n4. [Clean data pt.2](#4.-Clean-data-pt.2)\n5. [Pre-EDA](#5.-Pre-EDA)\n6. [EDA](#6.-EDA)\n7. [Model preparation](#7.-Model-preparation)\n8. [Model validation](#8.-Model-validation)\n9. [Final model build](#9.-Final-model-build)\n10. [Conclusion](#10.-Conclusion)","14c8873f":"### What are the most common words used in app descriptions?","36e61156":"## 2. Quick glance at data","a195ea9f":"In order to have a solid prediction for an app's appstore rating you must consider the following variables to have a big impact on the final average user rating:\n\n-User Rating Count\n\n-Original Release Date\n\n-Current Version Release Date\n\n-Developer\n\n-Size\n\nThe more user ratings an app had the more likely it was to have a higher rating, which is surprising because you'd expect more negative reviews. \n\nWhen predicting future appstore apps, we will use the following classifiers: \n\n-Decision Tree\n\n-Catboost\n\n-XGboost\n\n-LGBM\n\nAll four of these algorithms had the highest overall accuracy and precision. On the otherhand we can blend these four models in one and use the mean to predict future app ratings.\n","1e1dd4f1":"### What genre and subgenres are the most popular? ","3620fce6":"## 3. Clean data pt.1","f76d20f0":"Accuracy score: Overall model score on training sets.\n\nPrecision score: Computes the precision of the model.\n\nF1 score: Weighted average of precision and recall values.","afcbb83a":"### K-Neighbors","6f178bc4":"**Conclusion:** Whether an app has in-app purchases, costs money to download or is totally free to play, there seems to be no impact on the games rating. However, free to play games has a very slight advantage over the other 2.\n","6a4036a0":"#### The columns that contain Null values: Subtitle, Average User Rating, User Rating Count, In-app Purchases, Languages, Price, Size\t","60485ac1":"##### Look at the individual variables","9e99ac65":"###  Change in Price, Size, and User rating count throughout the years.","a1e9e1c0":"Most important variable: User rating count.","95486dc9":"### Decision Tree","5201b297":"## 8. Model validation","ecdd1d88":"##### We have no more NULL values, let's see what else we need to fix.","a5309c8a":"## 4. Clean data pt.2 ","615ba712":"#### Fix NA columns","25809bd4":"##### Dataset info","1af42ba9":"*Scale data*","d8b44e0c":"Before we begin we need to add another column to our games dataframe.","8e210d86":"*Encode the data*","ad4a0b6e":"2 more columns need to be filled, due to lack of information we will fill all missing in-app purchases with 0. Then fill the remaining missing languages to english.","40c0e715":"##### Drop useless columns","c90eae30":"#### The remaining columns that contain Null values:  Average User Rating, User Rating Count,\tIn-app Purchases, Languages, Price, Size.\n#### As we can see the missing values for both rating columns go hand in hand.\nLet's locate the one missing size","e5b08eb3":"# Appstore games: Project by Humberto Mundo","135552e0":"#### Now that the data is cleansed from Null values, we still need to tweak a few more things.\n* converting the size to megabytes\n* fixing the dates\n* fix age rating\n* fix languages\n* fix genres\n* fix in-app purchases","89802f74":"### In-app purchase games vs paid games vs free to play","f602287e":"### Top 5 apps with the perfect rating and highest rating count.","e7d06a54":"- Encode data\n- Split the data\n- Scale data","95131217":"##### X_train, Y_train, X_val, Y_val","d9cac6d1":"## 9. Final model build","a2bfc963":"## 10. Conclusion","b69be87f":"## 1. Packages and data preparation"}}