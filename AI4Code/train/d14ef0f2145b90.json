{"cell_type":{"bc8c01c2":"code","2013baba":"code","56263d57":"code","1a56540a":"code","c57402d4":"code","91c93a55":"code","59e77902":"code","bf0e6dbf":"code","88ead8ad":"code","ec0ed2ad":"code","bc6baf62":"code","0093aa6e":"code","4a9f14be":"code","ed9a9afe":"code","79debf97":"code","5ec248fd":"code","7eebd93f":"code","f3062215":"code","425db812":"code","5b75c550":"code","c97f8c65":"code","5c904ca5":"code","edf2afb6":"code","95a144d8":"code","83b8a69e":"code","d052e1b6":"code","847cdb5a":"code","1a204c44":"code","fc94d785":"code","7a46695b":"code","0a1ee43c":"code","5a89bc80":"code","a112dc10":"code","72825611":"code","9f5b3dbf":"code","40325883":"code","53329c35":"code","950e23bb":"code","fe799389":"code","bcdd4edf":"code","89f3b1e2":"code","c1d50e86":"code","7573007e":"code","afc8d014":"code","4c2be11e":"code","69ead418":"code","dd16bac1":"markdown","1d72c335":"markdown","47642c34":"markdown","e788f238":"markdown","f4c3d27d":"markdown"},"source":{"bc8c01c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2013baba":"os.listdir()","56263d57":"os.listdir('..\/')","1a56540a":"os.listdir('..\/input\/')","c57402d4":"os.listdir('..\/input\/aerial-cactus-identification')","91c93a55":"os.listdir('..\/input\/aerial-cactus-identification\/train\/train')","59e77902":"train_dir = '..\/input\/aerial-cactus-identification\/train\/train'","bf0e6dbf":"csv_path = '..\/input\/aerial-cactus-identification\/train.csv'\ndf = pd.read_csv(csv_path)","88ead8ad":"df.head()","ec0ed2ad":"filenames = df['id']\nfilenames.head()","bc6baf62":"file_paths =[os.path.join(train_dir, fname) for fname in filenames]\nfile_paths[:5]","0093aa6e":"train_df = pd.DataFrame(data ={'id':file_paths, 'has_cactus': df['has_cactus']})\ntrain_df.head()","4a9f14be":"train_df = train_df.astype(np.str)","ed9a9afe":"train_df.head()","79debf97":"sample_csv_path = '..\/input\/aerial-cactus-identification\/sample_submission.csv'\nsample_df = pd.read_csv(sample_csv_path)\nsample_df.head()","5ec248fd":"len(train_df)","7eebd93f":"train_df = train_df[:-500]\ntest_df = train_df[-500:]\nlen(train_df), len(test_df)","f3062215":"path = train_df['id'][0]","425db812":"from tqdm import tqdm_notebook\n\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","5b75c550":"train_dir","c97f8c65":"test_dir = '..\/input\/aerial-cactus-identification\/test\/test'","5c904ca5":"os.listdir(test_dir)","edf2afb6":"len(test_dir)","95a144d8":"path","83b8a69e":"img_pil=Image.open(path)\nimage = np.array(img_pil)\nimage.shape","d052e1b6":"plt.imshow(image)\nplt.show()","847cdb5a":"input_shape = (32,32,3)\nbatch_size = 32\nnum_classes = 2\nnum_epochs =1\nlearning_rate = 0.01","1a204c44":"inputs = layers.Input(input_shape)\nnet = layers.Conv2D(64, (3, 3), padding='same')(inputs)\nnet = layers.Conv2D(64, (3, 3), padding='same')(net)\nnet = layers.Conv2D(64, (3, 3), padding='same')(net)\nnet = layers.BatchNormalization()(net)\nnet = layers.Activation('relu')(net)\nnet = layers.MaxPooling2D(pool_size=(2, 2))(net)\n\nnet = layers.Conv2D(128, (3, 3), padding='same')(net)\nnet = layers.Conv2D(128, (3, 3), padding='same')(net)\nnet = layers.Conv2D(128, (3, 3), padding='same')(net)\nnet = layers.BatchNormalization()(net)\nnet = layers.Activation('relu')(net)\nnet = layers.MaxPooling2D(pool_size=(2, 2))(net)\nnet = layers.Dropout(0.25)(net)\n\nnet = layers.Conv2D(256, (3, 3), padding='same')(net)\nnet = layers.Conv2D(256, (3, 3), padding='same')(net)\nnet = layers.Conv2D(256, (3, 3), padding='same')(net)\nnet = layers.BatchNormalization()(net)\nnet = layers.Activation('relu')(net)\nnet = layers.MaxPooling2D(pool_size=(2, 2))(net)\nnet = layers.Dropout(0.25)(net)\n\nnet = layers.Conv2D(512, (3, 3), padding='same')(net)\nnet = layers.Conv2D(512, (3, 3), padding='same')(net)\nnet = layers.Conv2D(512, (3, 3), padding='same')(net)\nnet = layers.BatchNormalization()(net)\nnet = layers.Activation('relu')(net)\nnet = layers.MaxPooling2D(pool_size=(2, 2))(net)\nnet = layers.Dropout(0.25)(net)\n\nnet = layers.Conv2D(512, (3, 3), padding='same')(net)\nnet = layers.Conv2D(512, (3, 3), padding='same')(net)\nnet = layers.Conv2D(512, (3, 3), padding='same')(net)\nnet = layers.BatchNormalization()(net)\nnet = layers.Activation('relu')(net)\nnet = layers.MaxPooling2D(pool_size=(2, 2))(net)\nnet = layers.Dropout(0.25)(net)\n\nnet = layers.Flatten()(net)\nnet = layers.Dense(512)(net)\nnet = layers.Activation('relu')(net)\nnet = layers.Dropout(0.5)(net)\nnet = layers.Dense(num_classes)(net)\nnet = layers.Activation('softmax')(net)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=net)","fc94d785":"model.compile(loss='sparse_categorical_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(learning_rate),\n              metrics=['accuracy'])","7a46695b":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255.,\n    width_shift_range=0.3,\n    zoom_range=0.2,\n    horizontal_flip=True\n)\n\ntest_datagen = ImageDataGenerator(\n    rescale=1.\/255.\n)","0a1ee43c":"train_generator = train_datagen.flow_from_dataframe(\n    train_df,\n    x_col='id',\n    y_col='has_cactus',\n    target_size=input_shape[:2],\n    batch_size=batch_size,\n    class_mode='sparse'\n)\n\ntest_generator = test_datagen.flow_from_dataframe(\n    test_df,\n    x_col='id',\n    y_col='has_cactus',\n    target_size=input_shape[:2],\n    batch_size=batch_size,\n    class_mode='sparse'\n)","5a89bc80":"model.fit_generator(\n    train_generator,\n    steps_per_epoch=len(train_generator),\n    epochs=num_epochs,\n    validation_data=test_generator,\n    validation_steps=len(test_generator)\n)","a112dc10":"test_dir","72825611":"sample_df.head()","9f5b3dbf":"path = os.path.join(test_dir, sample_df['id'][0])","40325883":"img_pil = Image.open(path)\nimage = np.array(img_pil) # np.array\ud615\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ubc1b\uc544\uc634.\nimage.shape","53329c35":"plt.imshow(image)\nplt.show()","950e23bb":"print(image.dtype)\nprint(image[tf.newaxis, ...].dtype)\nprint(image)\n# dtype uint8 ->float\ud615\uc73c\ub85c \ubc14\uafd4\uc918\uc57c \ubaa8\ub378 pred\ub97c \ubf51\uc744 \uc218 \uc788\uc74c","fe799389":"image = image.astype('float32')\n# \uc774\ub807\uac8c\ud558\uc9c0 \uc54a\uc73c\uba74 input pipeline\uc758 uint8\uc774 output model pred\uc758 float\uc640 \ud638\ud658\ub418\uc9c0 \uc54a\uc544 \uc624\ub958\uac00\ubc1c\uc0dd\ud588\uc5c8\uc74c","bcdd4edf":"pred = model.predict(image[tf.newaxis, ...])\npred","89f3b1e2":"pred = np.argmax(pred)\npred","c1d50e86":"preds = []\n\nfor fname in tqdm_notebook(sample_df['id']):\n    path = os.path.join(test_dir, fname)\n\n    img_pil = Image.open(path)\n    image = np.array(img_pil)\n    image = image.astype('float32') # \uc0c8\ub85c \ucd94\uac00\n\n    pred = model.predict(image[tf.newaxis, ...])\n    pred = np.argmax(pred)\n    preds.append(pred)","7573007e":"submission_df = pd.DataFrame(data={'id': sample_df['id'], 'has_cactus': preds})","afc8d014":"submission_df.head()","4c2be11e":"submission_df.to_csv('submission.csv', index=False)","69ead418":"os.listdir()","dd16bac1":"![\uc815\ub2f5\uc774 \uc548\ub098\uc640\uc788\uc74c](http:\/\/)","1d72c335":" 17500\uac1c\uc911\uc5d0 500\uac1c\ub294 test, \ub098\uba38\uc9c0 train\uc73c\ub85c \ub3cc\ub9bc","47642c34":"**Data \ud655\uc778\n**","e788f238":"Hyperparameter \uc124\uc815","f4c3d27d":"##load packages"}}