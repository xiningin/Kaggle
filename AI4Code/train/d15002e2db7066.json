{"cell_type":{"543ba10c":"code","6150f499":"code","b2afd2e2":"code","87176cbc":"code","364c99ae":"code","6810661c":"code","57141786":"code","91b47c87":"code","01fee360":"code","9d45e86a":"code","ef3b00d2":"code","22cb1814":"code","c6465228":"markdown","b088576b":"markdown","c960237f":"markdown","5a76a725":"markdown","f411b465":"markdown","55ba0a0d":"markdown","f9f0a1f5":"markdown","6c54e3bb":"markdown","675c9aae":"markdown","2898d2b5":"markdown","84dbf3ee":"markdown","cba17980":"markdown"},"source":{"543ba10c":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n","6150f499":"dataset = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n#Creating copies to keep original data\ndata = dataset\ntest_data = test\n","b2afd2e2":"#\ndata = data.drop(['Id'], axis = 1)\ntest_data = test_data.drop(['Id'], axis=1)\n#\ndata = data.drop(['hacapo'], axis = 1)\ntest_data = test_data.drop(['hacapo'], axis=1)\n#\ndata = data.drop(['v14a'], axis = 1)\ntest_data = test_data.drop(['v14a'], axis=1)\n#\ndata = data.drop(['refrig'], axis = 1)\ntest_data = test_data.drop(['refrig'], axis=1)\n# merging v18q and v18q1\ndata = data.drop(['v18q'], axis = 1)\ntest_data = test_data.drop(['v18q'], axis=1)\ndata['v18q1'].fillna(0, inplace = True)\ntest_data['v18q1'].fillna(0, inplace = True)\n#droping unnecessrary columns \ncolms_to_be_dropped = ['r4h3', 'r4m3', 'r4t1', 'r4t2', 'r4t3', 'tamviv', 'rez_esc', 'tamhog', 'abastaguadentro']\ndata = data.drop(colms_to_be_dropped, axis = 1)\ntest_data = test_data.drop(colms_to_be_dropped, axis = 1)\n#dropping columns\ncolms_to_be_dropped = ['public', 'sanitario1', 'energcocinar1', 'elimbasu1']\ndata = data.drop(colms_to_be_dropped, axis = 1)\ntest_data = test_data.drop(colms_to_be_dropped, axis = 1)\n#\ncolms_to_be_dropped =  ['epared1', 'eviv1', 'hogar_nin', 'hogar_adul', 'hogar_mayor', 'hogar_total', 'idhogar']    \ndata = data.drop(colms_to_be_dropped, axis = 1)\ntest_data = test_data.drop(colms_to_be_dropped, axis = 1)\n#\ndata['dependency'] = data['dependency'].replace({'yes': 1, 'no': 0}, regex=True)\ntest_data['dependency'] = test_data['dependency'].replace({'yes': 1, 'no': 0}, regex=True)\ndata['edjefe'] = data['edjefe'].replace({'yes': 1, 'no': 0}, regex=True)\ntest_data['edjefe'] = test_data['edjefe'].replace({'yes': 1, 'no': 0}, regex=True)\ndata['edjefa'] = data['edjefa'].replace({'yes': 1, 'no': 0}, regex=True)\ntest_data['edjefa'] = test_data['edjefa'].replace({'yes': 1, 'no': 0}, regex=True)\n#\ncolms_to_be_dropped = ['meaneduc', 'SQBescolari', 'SQBage', 'SQBhogar_total', 'SQBedjefe', 'SQBhogar_nin', 'SQBovercrowding', 'SQBdependency', 'SQBmeaned', 'agesq']\ndata = data.drop(colms_to_be_dropped, axis = 1)\ntest_data = test_data.drop(colms_to_be_dropped, axis = 1)","87176cbc":"cols_with_missing = [col for col in data.columns \n                                 if data[col].isnull().any()]\ncols_with_missing_test = [col for col in test_data.columns \n                                 if test_data[col].isnull().any()]\n","364c99ae":"from sklearn.preprocessing import Imputer\nimputer = Imputer(missing_values = 'NaN', strategy = 'mean', axis = 0)\nimputer = imputer.fit(data[cols_with_missing])\ndata[cols_with_missing] = imputer.transform(data[cols_with_missing])\ntest_data[cols_with_missing] = imputer.transform(test_data[cols_with_missing])","6810661c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data.drop(['Target'], axis = 1),\n                                                    data['Target'], test_size = 0.2, \n                                                    random_state = 0)\n","57141786":"\"\"\"\"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\ntest_data = sc.transform(test_data)\"\"\"","91b47c87":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier( criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","01fee360":"y_pred = classifier.predict(X_test)","9d45e86a":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))","ef3b00d2":"ans = classifier.predict(test_data)","22cb1814":"my_submission = pd.DataFrame({'Id': test.Id, 'Target': ans})\nmy_submission.to_csv('submission1.csv', index=False)","c6465228":"**Predicting the Test set results**","b088576b":"**Feature Scaling**","c960237f":"**Decision tree Classifier**","5a76a725":"**Importing the libraries**","f411b465":"**Classifying the test data**","55ba0a0d":"**Splitting the dataset into the Training set and Test set**\nto check the accuracy of the classifier","f9f0a1f5":"**Submission in the csv file**","6c54e3bb":"**Accuracy**","675c9aae":"**Droping non use-ful columns**","2898d2b5":"**Taking care of missing data**","84dbf3ee":"**Importing the dataset**","cba17980":"**To check null values**"}}