{"cell_type":{"3d520e48":"code","c0254598":"code","1fc4e268":"code","a8374555":"code","75353be8":"code","8a3337b8":"code","7bc60eef":"code","67be290d":"code","a812cb0f":"code","dcfa3c80":"code","b1098f6c":"code","a40113e5":"code","4ba4a88d":"code","a9701b3a":"code","4277d273":"code","0b2b6852":"code","7cf4699a":"code","aa1c3dbb":"code","c46906f9":"code","abfe19af":"code","70617b44":"code","2e52a89f":"code","0515a641":"markdown","ab6ff07c":"markdown","01036d98":"markdown","42686b26":"markdown","79bf3e89":"markdown","0317e3f7":"markdown","3b3d30cd":"markdown","15281ea4":"markdown"},"source":{"3d520e48":"import sqlite3\nimport pandas as pd\nfrom tqdm.auto import tqdm\nimport seaborn as sns","c0254598":"conn = sqlite3.connect('..\/input\/european-football-database\/european_database.sqlite')\n\nquery = \"\"\"\nSELECT \n    m.*, d.name, d.country\nFROM matchs m \nJOIN divisions d ON d.division == m.Div\n\"\"\"\n\ndf = (\n    pd.read_sql_query(query, conn)\n    .assign(Date = lambda x: pd.to_datetime(x.Date))\n)","1fc4e268":"df.dtypes","a8374555":"df.sample(10)","75353be8":"print(f\"Min date: {df.Date.min()}\")\nprint(f\"Max date: {df.Date.max()}\")","8a3337b8":"def get_club(club, home=True, season=None):\n    if home:\n        win, col = 'H', 'HomeTeam'\n    else:\n        win, col = 'A', 'AwayTeam'\n    if season:\n        df_club = df.copy().query('season == @season')\n    else:\n        df_club = df.copy()\n    df_club = (\n        df_club\n        .query(f'{col} == @club')\n        .assign(points=lambda x: x.FTR.apply(lambda s: 3 if s==win else (1 if s=='D' else 0)))\n    )\n    \n    return df_club\n\ndef get_club_all(club, season=None):\n    df_home = get_club(club, home=True, season=season)\n    df_away = get_club(club, home=False, season=season)\n    df_all = pd.concat([df_home, df_away])\n    return df_all\n\ndef get_points_season(club, season):\n    df_club_season = get_club_all(club, season=season)\n    return df_club_season.points.sum()\n    ","7bc60eef":"psg = get_club_all('Paris SG')\npsg.head()","67be290d":"psg.groupby('season').agg({'points': 'sum'}).plot.bar()","a812cb0f":"def get_season_league(season, league):\n    return df.query(\"season == @season and name == @league\")\n\ndef get_final_classment(season, league):\n    df_season_league = get_season_league(season, league)\n    clubs_h, clubs_a = list(df_season_league.HomeTeam.unique()), list(df_season_league.AwayTeam.unique())\n    clubs_h.sort()\n    clubs_a.sort()\n    \n    assert clubs_h == clubs_a\n    \n    home_points = (\n        df_season_league\n        .groupby('HomeTeam').apply(lambda x: x.FTR.apply(lambda r: 3 if r=='H' else (1 if r==\"D\" else 0))).groupby('HomeTeam').sum()\n    )\n    home_points.name = \"Home\"\n\n    away_points = (\n        df_season_league\n        .groupby('AwayTeam').apply(lambda x: x.FTR.apply(lambda r: 3 if r=='A' else (1 if r==\"D\" else 0))).groupby('AwayTeam').sum()\n    )\n    away_points.name = \"Away\"\n\n    df_season_league_total_home_away = pd.concat([home_points, away_points], axis=1)\n\n    df_season_league_total = (\n        df_season_league_total_home_away\n        .assign(Total = lambda x: x.sum(axis=1))\n        .assign(rank=lambda x: x.Total.rank(ascending=False).astype('int'))\n        .sort_values(by='rank')\n    )\n    \n    return df_season_league_total\n    ","dcfa3c80":"fr_l1_2021_classment = get_final_classment(2021, \"Ligue 1\")\nfr_l1_2021_classment","b1098f6c":"fr_l1_2021_classment.Total.plot.bar()","a40113e5":"fr_l1_2021 = get_season_league(2021, \"Ligue 1\")","4ba4a88d":"fr_l1_2021","a9701b3a":"def get_season_league_journey_points(season, league):\n    df_season_league = get_season_league(season, league)\n    \n    season_league_results_home = (\n        df_season_league\n        .assign(points=lambda x: x.FTR.map(lambda s: 3 if s=='H' else (1 if s=='D' else 0)))\n        .assign(home=1)\n        .rename(columns={'HomeTeam': 'Team', 'AwayTeam': 'Opponent', 'FTHG': 'FTTG', 'FTAG': 'FTOG'})\n    )\n\n    season_league_results_away = (\n        df_season_league\n        .assign(points=lambda x: x.FTR.map(lambda s: 3 if s=='A' else (1 if s=='D' else 0)))\n        .assign(home=0)\n        .rename(columns={'AwayTeam': 'Team', 'HomeTeam': 'Opponent', 'FTHG': 'FTOG', 'FTAG': 'FTTG'})\n    )\n\n    season_league_results = (\n        pd.concat([season_league_results_home, season_league_results_away])\n        .assign(Journey=lambda x: x.groupby('Team')['Date'].rank().astype('int'))\n        .sort_values(by=['Team', 'Journey'])\n        .assign(TotalPoints=lambda x: x.groupby('Team')['points'].cumsum().astype('int'))\n        .assign(Position=lambda x: x.groupby('Journey')['TotalPoints'].rank(ascending=False, method='max').astype(int))\n    )\n    return season_league_results","4277d273":"fr_l1_2021_results = get_season_league_journey_points(2021, \"Ligue 1\")","0b2b6852":"def plot_cumpoints(season, league, clubs=None):\n    season_league_results = get_season_league_journey_points(season, league)\n    if clubs is None:\n        clubs_to_plot = season_league_results.Team.unique()\n    else:\n        clubs_to_plot = clubs\n    (\n        season_league_results.query('Team in @clubs_to_plot')\n        .pivot_table(values='TotalPoints', columns='Team', index='Journey')\n        .plot()\n    )","7cf4699a":"plot_cumpoints(2021, \"Ligue 1\", [\"Lille\", \"Paris SG\", \"Lyon\", \"Monaco\"])","aa1c3dbb":"def plot_positions(season, league, clubs=None):\n    season_league_results = get_season_league_journey_points(season, league)\n    if clubs is None:\n        clubs_to_plot = season_league_results.Team.unique()\n    else:\n        clubs_to_plot = clubs\n    ax = (\n        season_league_results.query('Team in @clubs_to_plot')\n        .pivot_table(values='Position', columns='Team', index='Journey')\n        .plot(figsize=(10,5))\n    )\n    ax.invert_yaxis()\n    ax.set_yticks(list(range(1, 21)))\n    ax.set_ylim((21,0))\n    ax.set_xticks(list(range(1, 39)))\n    ax.plot()","c46906f9":"plot_positions(2021, \"Premier League\", [\"Arsenal\", \"Man City\", \"Chelsea\"])","abfe19af":"all_seasons = df.season.unique()","70617b44":"def get_league_historic(league, formatting=True):\n    all_seasons_league_list = []\n\n    for season in tqdm(all_seasons):\n\n        final_classement_season = (\n            get_final_classment(season, league)\n            .reset_index()\n            .rename(columns={'index': 'club'})\n            .assign(season = season)\n            .assign(rank=lambda x: x.get('rank').astype(int))\n        )\n        all_seasons_league_list.append(final_classement_season)\n\n    all_seasons_league_df = pd.concat(all_seasons_league_list)\n\n    all_seasons_league_ts = all_seasons_league_df.pivot_table(values='rank', index='club', columns='season')\n    if formatting:\n        all_seasons_league_ts = (\n            all_seasons_league_ts\n            .style\n            .set_precision(0)\n            .set_na_rep(\"L2\")\n            .highlight_null(\"black\")\n            .background_gradient(cmap=sns.cubehelix_palette(start=.5, rot=-.5, as_cmap=True))\n        )\n    return all_seasons_league_ts","2e52a89f":"all_seasons_bundesliga = get_league_historic(\"LaLiga\")\nall_seasons_bundesliga","0515a641":"### League historic","ab6ff07c":"## Load data","01036d98":"# Football Analytics","42686b26":"## Settings","79bf3e89":"## Explore","0317e3f7":"### Club history","3b3d30cd":"### League final classment","15281ea4":"### "}}