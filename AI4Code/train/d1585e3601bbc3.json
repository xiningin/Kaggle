{"cell_type":{"97d7d862":"code","e841b8ad":"code","0939f68a":"code","ca08f71b":"code","d05f5bef":"code","57d609b2":"code","6e0cac32":"code","941f1085":"code","df163489":"code","5b1e5ca6":"code","43bd3b1c":"code","3f3dbf5d":"code","7346c684":"code","3a06e4ee":"code","0f24728f":"code","a6825e3e":"code","6099e402":"code","2b4aefdc":"code","b54b0abd":"code","c1603aed":"code","5659c8fa":"code","5339bc8a":"code","d077efd0":"code","3cdd52d3":"code","33973d0e":"code","7f8b167c":"code","fadc0c79":"code","89c693b8":"code","8eb65f73":"code","a9e0a09f":"code","8203cb50":"code","76adc5c8":"code","e08a282b":"code","76f1cd17":"code","c939fda5":"code","aa0e2f09":"code","be746ef0":"code","3b8a93e1":"code","d512d5a5":"code","fd395370":"code","5dc840e7":"code","54ba2aa4":"code","dd803d2a":"code","3d055400":"code","4c37dbe3":"code","c7efd700":"code","b0d69674":"code","962d4c4d":"markdown","ca735c9e":"markdown","de829749":"markdown"},"source":{"97d7d862":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3067\u4fbf\u5229\u306axfeat\u3092pip install\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n!pip install xfeat","e841b8ad":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # \u884c\u5217\u6f14\u7b97\nimport pandas as pd # \u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\npd.set_option(\"display.max_columns\", 100) # \u30ab\u30e9\u30e0\u6570\u8868\u793a\u306e\u4e0a\u9650\u3092100\u306b\u7de9\u548c\nfrom pandas import DataFrame\n\nimport re\nfrom collections import Counter\nimport nltk\nfrom nltk.corpus import stopwords\n\nimport matplotlib.pyplot as plt # \u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\n#plt.style.use('ggplot')\n%matplotlib inline\n\nfrom geopy.distance import geodesic\n\nfrom category_encoders import CountEncoder # \u30ab\u30c6\u30b4\u30ea\u3092\u6570\u5024\u306b\u5909\u63db\uff08\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff09\nfrom xfeat import TargetEncoder\nfrom sklearn.feature_extraction.text import TfidfVectorizer # scikit-learn\u3000python\u3067ML\u3084\u308b\u4e0a\u3067\u306e\u30c7\u30d5\u30a1\u30af\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold\n\nfrom tqdm.notebook import tqdm # \u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\n#from xgboost import XGBRegressor # \u5b66\u7fd2\u5668\uff08\u5f37\u3044\u3084\u3064\uff09\nfrom lightgbm import LGBMRegressor # \u5b66\u7fd2\u5668\uff08\u5f37\u3044\u3084\u3064 \u305d\u306e2\uff09\nimport cv2 #opencv, \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u5404\u7a2e\u51e6\u7406\u306b\u4f7f\u3046","0939f68a":"# \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/train.csv', parse_dates=['latest_saledate'])\ndf_test = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/test.csv', parse_dates=['latest_saledate'])","ca08f71b":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u305d\u308c\u305e\u308c\u306e\u884c\u6570\u3068\u5217\u6570\u78ba\u8a8d\ndf_train.shape, df_test.shape","d05f5bef":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\n# \u3056\u3063\u3068\u307f\u305f\u3068\u3053\u308d\u3067\u306f\u3001\u6570\u5024\u3001\u30ab\u30c6\u30b4\u30ea\u3001\u65e5\u4ed8\u306e\u4ed6\u306b\u3001\u30c6\u30ad\u30b9\u30c8\uff08description\uff09\u3001\u5730\u7406\u7a7a\u9593\uff08latitude\/longitude\u306a\u3069\uff09\u3001\u753b\u50cf(homeImage)\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059\u306d\u3002\n# \u753b\u50cf\u306ffile path\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\ndf_train.head()","57d609b2":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5148\u982d\uff15\u884c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test.head()","6e0cac32":"# \u8aac\u660e\u5909\u6570\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\n# \u30c6\u30ad\u30b9\u30c8\u3068\u753b\u50cf\u4e00\u65e6\u9664\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u3053\u308c\u3089\u306e\u6271\u3044\u306b\u3064\u3044\u3066\u306f\u672c\u30b3\u30f3\u30da\u3092\u901a\u3058\u3066\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n# \u2192\u753b\u50cf\u306f\u3042\u304d\u3089\u3081\u307e\u3057\u305f\u3002\u30c6\u30ad\u30b9\u30c8\u3082\u3001\u30d2\u30f3\u30c8\u3092\u9802\u3044\u3066\u3059\u3050\u306b\u4f7f\u3048\u308b\u3082\u306e\u3060\u3051\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n#y_train\u306f\u5f8c\u307b\u3069\u5206\u96e2\u3059\u308b(X_train\u3067latestPrice\u3092\u4f7f\u3063\u305f\u51e6\u7406\u304c\u7d42\u308f\u3063\u305f\u5f8c)\nX_train = df_train.drop(['homeImage'], axis=1)\nX_test = df_test.drop(['homeImage'], axis=1)","941f1085":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5207\u308c\u76ee\u306e\u65e5\u3092\u57fa\u6e96\u65e50\u3068\u3059\u308b\u3002\uff08\u5f8c\u306b\u51fa\u3066\u304f\u308b\u30c8\u30ec\u30f3\u30c9\u88dc\u6b63\u306e\u8aa4\u5dee\u3092\u5c0f\u3055\u304f\u3059\u308b\u305f\u3081?\uff09\ndef datetime_(date):\n    try:\n        d = date - pd.to_datetime('2019-12-31')\n        d \/= pd.Timedelta('1d')\n    except:\n        d = -9999\n    return d","df163489":"X_train[\"latest_saledate_d\"] = X_train.latest_saledate.apply(datetime_)\nX_test[\"latest_saledate_d\"] = X_test.latest_saledate.apply(datetime_)","5b1e5ca6":"#\u5916\u308c\u5024\u306e\u51e6\u7406\n\n#\u5efa\u7269\u9762\u7a4d\u5f53\u305f\u308a\u306e\u4fa1\u683c\u304c\u7570\u5e38\u306b\u5b89\u3044\u3082\u306e\u3092\u4e00\u65e6drop\nX_train = X_train.drop(X_train[((X_train['latestPrice'] \/ X_train['livingAreaSqFt']) < 10)].index)\n\n#\u571f\u5730\u9762\u7a4d\u5f53\u305f\u308a\u4fa1\u683c\u3001\u5efa\u7269\u9762\u7a4d\u5f53\u305f\u308a\u4fa1\u683c\u304c\u7570\u5e38\u306b\u9ad8\u3044\u3082\u306e\u306f\u4fa1\u683c\u309210\u5206\u306e1\u306b\u3059\u308b\nX_train['latestPrice'][((X_train['latestPrice'] \/ X_train['lotSizeSqFt']) > 1000) & ((X_train['latestPrice'] \/ X_train['livingAreaSqFt']) > 1000)] = X_train['latestPrice'] \/ 10","43bd3b1c":"#\u5358\u7d14\u306a\u7279\u5fb4\u91cf\u8ffd\u52a0\nX_train['age'] = X_train['latest_saleyear'] - X_train['yearBuilt']\nX_test['age'] = X_test['latest_saleyear'] - X_test['yearBuilt']\nX_train['livAreaPerLotSize'] = X_train['livingAreaSqFt'] \/ X_train['lotSizeSqFt']\nX_test['livAreaPerLotSize'] = X_test['livingAreaSqFt'] \/ X_test['lotSizeSqFt']\n\n#\u7121\u610f\u5473\u305d\u3046\u306a\u7279\u5fb4\u91cfdrop ('garageSpaces'\u306f'parkingSpaces'\u3068\u307e\u3063\u305f\u304f\u540c\u5185\u5bb9\u3002numOfPhotos\u306f\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002)\nX_train.drop(['garageSpaces','numOfPhotos'], axis=1, inplace=True)\nX_test.drop(['garageSpaces','numOfPhotos'], axis=1, inplace=True)","3f3dbf5d":"def extract_zestimate_from_description(df_):\n    \"\"\"\n    \u6b63\u898f\u8868\u73fe\u62bd\u51fa\u3067zestimate\u3092\u62bd\u51fa\u3059\u308b\n    \"\"\"\n    df = df_.copy()\n    df['description'] = df['description'].str.lower()\n    df['description'] = df['description'].str.replace(',', '', regex=True)\n    df['description'] = df['description'].str.replace('$', '', regex=True)\n    \n    df['zestimate'] = df['description'].str.extract('the\\szestimate\\sfor\\sthis\\shouse\\sis\\s([0-9]+)?').fillna(-1)\n    df['zestimate'] = pd.to_numeric(df['zestimate'])\n    df['zestimate_month'] = df['description'].str.extract('the\\srent\\szestimate\\sfor\\sthis\\shome\\sis\\s([0-9]+)?').fillna(-1)\n    df['zestimate_month'] = pd.to_numeric(df['zestimate_month'])\n    \n    return df[['zestimate', 'zestimate_month']]","7346c684":"# zestimate\u3068zestimate_month\u3092\u8ffd\u52a0\uff08fillna\u306f-1\u306e\u307e\u307e\u3067\u3088\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3001\u305d\u306e\u307e\u307e\uff09\nX_train = pd.concat([X_train, extract_zestimate_from_description(X_train)], axis=1)\nX_test = pd.concat([X_test, extract_zestimate_from_description(X_test)], axis=1)","3a06e4ee":"X_train_trend = X_train[X_train.zestimate > 0].copy()","0f24728f":"# zestimate\u3092\u7528\u3044\u3066\u4fa1\u683c\u30c8\u30ec\u30f3\u30c9\u3092\u6c42\u3081\u308b\nX_train_trend = X_train[X_train.zestimate > 0].copy()\n\n# zestimate\u306f\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u6700\u7d42\u65e5\u306e\u3059\u3050\u3042\u3068(2021\/2\u6708\u3053\u308d)\u306e\u4fa1\u683c\u3068\u60f3\u5b9a\u3057\u3066\u3001\n# latestPrice\u3068\u306e\u6bd4\u304b\u3089\u30c8\u30ec\u30f3\u30c9\u3092\u63a2\u308b(2019\/12\/31\u304c\u57fa\u6e96\u65e5\u306a\u306e\u30671\u5e74\u3061\u3087\u3063\u3068(400\u65e5\u304f\u3089\u3044)\u3067\u6bd4\u304c1\u306b\u306a\u308b\u306f\u305a)\nX_train_trend['priceRate'] = X_train_trend['latestPrice'] \/ X_train_trend['zestimate'] ","a6825e3e":"# \u307e\u305a\u306f\u30011\u6b21\u76f4\u7dda\u8fd1\u4f3c\u3092\u8a66\u3057\u305f\u3002\u76f4\u7dda\u8fd1\u4f3c\u3060\u3068\u3001zestimate = latestPrice\u306b\u306a\u308b\u306e\u306b1000\u65e5\u304f\u3089\u3044\u304b\u304b\u308b\u306e\u3067\u3001\n# \u4fa1\u683c\u4e0a\u6607\u30c8\u30ec\u30f3\u30c9\u306f\u3082\u3063\u3068\u6025\u6fc0\u3063\u307d\u3044\nx=X_train_trend['latest_saledate_d'][X_train_trend.zestimate > 0].values\ny=X_train_trend['priceRate'][X_train_trend.zestimate > 0].values\n\n# \u76f4\u7dda(1\u6b21)\u8fd1\u4f3c\u306e\u5834\u5408\naa = 0\nbb,cc=np.polyfit(x,y,1)\n\nprint('aa=',aa,'; bb=',bb,'; cc=',cc)\n\n#\u6563\u5e03\u56f3\u3001\u8fd1\u4f3c\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\nx2 = np.arange(-730, 731)\ny2 = aa * x2 ** 2 + bb * x2 + cc\ndf_plot = X_train_trend\nplt.figure(figsize=(20, 10))\nplt.scatter(df_plot[\"latest_saledate_d\"],df_plot[\"priceRate\"])\nplt.plot(x2, y2,color='black')\nplt.xlim(-730,730)\nplt.grid(color='black', linestyle=':')\nplt.xlabel(\"latest_saledate_d\")\nplt.ylabel(\"priceRate\")","6099e402":"# 2\u6b21\u66f2\u7dda\u3067\u8fd1\u4f3c\u3059\u308b\u3068\u3001\u3060\u3044\u305f\u3044400\u65e5\u304f\u3089\u3044\u3067\u6bd4\u304c1\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u3092\u63a1\u7528\n# (latestPrice\u3092\u5168\u6570\u4f7f\u3063\u3066\u50be\u5411\u3092\u898b\u308b\u3060\u3051\u3067\u3082\u30ea\u30fc\u30af\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b)\nx=X_train_trend['latest_saledate_d'][X_train_trend.zestimate > 0].values\ny=X_train_trend['priceRate'][X_train_trend.zestimate > 0].values\n\n# priceRate\u306e2\u6b21\u66f2\u7dda\u8fd1\u4f3c\u3067\u306e\u30c8\u30ec\u30f3\u30c9\u78ba\u8a8d\na,b,c=np.polyfit(x,y,2)\n\nprint('a=',a,'; b=',b,'; c=',c)\n\n#\u6563\u5e03\u56f3\u3001\u8fd1\u4f3c\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\nx2 = np.arange(-730, 731)\ny2 = a * x2 ** 2 + b * x2 + c\ndf_plot = X_train_trend\nplt.figure(figsize=(20, 10))\nplt.scatter(df_plot[\"latest_saledate_d\"],df_plot[\"priceRate\"])\nplt.plot(x2, y2,color='black')\nplt.xlim(-730,730)\nplt.grid(color='black', linestyle=':')\nplt.xlabel(\"latest_saledate_d\")\nplt.ylabel(\"priceRate\")","2b4aefdc":"# latestPrice\u304c\u57fa\u6e96\u65e5\u306e\u6c34\u6e96\u306b\u306a\u308b\u3088\u3046\u306b\u3001\u305d\u308c\u305e\u308c\u306elatest_saledate_d\u65e5\u6570\u3067\u88dc\u6b63\nX_train['latestPriceRemoveTrend'] = X_train['latestPrice'] * c \/ (a * X_train['latest_saledate_d']**2 + b * X_train['latest_saledate_d'] + c)","b54b0abd":"# y_train\u306f\u4e0a\u3067\u88dc\u6b63\u3057\u305f\u4fa1\u683c\u3092\u4f7f\u7528\uff08y_pred\u3082\u4e88\u6e2c\u3057\u305f\u5f8c\u3067\u3001\u4e0a\u306e\u30c8\u30ec\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u88dc\u6b63\u3059\u308b\uff09\ny_train = X_train.latestPriceRemoveTrend\nX_train.drop(['latestPrice','latestPriceRemoveTrend'], axis=1, inplace=True)  # pricePerLiv\u306f\u307e\u3060\u4f7f\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3042\u3068\u3067\u30c9\u30ed\u30c3\u30d7","c1603aed":"# city\u306e\u5185\u5bb9\u78ba\u8a8d\nprint('\u5b66\u7fd2\u30c7\u30fc\u30bf\u306ecity\u306e\u30e6\u30cb\u30fc\u30af\u6570\uff1a%d' % X_train['city'].nunique())\nprint('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306ecity\u306e\u30e6\u30cb\u30fc\u30af\u6570\uff1a%d' % X_test['city'].nunique())\nprint('\u5b66\u7fd2\u30c7\u30fc\u30bf\u306ecity\uff1a', X_train['city'].unique())\nprint('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306ecity\uff1a', X_test['city'].unique())","5659c8fa":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3057\u304b\u306a\u3044city['manchaca','west lake hills','road']\u306f\u5730\u56f3\u4e0a\u3067austin\u306e\u7bc4\u56f2\u5185\u306e\u305f\u3081austin\u3067\u7f6e\u304d\u63db\u3048\u308b\nX_test.city = X_test.city.replace(['manchaca','west lake hills','road'],'austin')\n\n# city\u3092\u30c0\u30df\u30fc\u5909\u6570\u306b\u5909\u63db\nX_train = pd.get_dummies(X_train,columns=['city'],drop_first=True)\nX_test = pd.get_dummies(X_test,columns=['city'],drop_first=True)","5339bc8a":"# homeType\u306e\u5185\u5bb9\u78ba\u8a8d\nprint('\u5b66\u7fd2\u30c7\u30fc\u30bf\u306ehomeType\u306e\u30e6\u30cb\u30fc\u30af\u6570\uff1a%d' % X_train['homeType'].nunique())\nprint('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306ehomeType\u306e\u30e6\u30cb\u30fc\u30af\u6570\uff1a%d' % X_test['homeType'].nunique())\nprint('\u5b66\u7fd2\u30c7\u30fc\u30bf\u306ehomeType\uff1a', X_train['homeType'].unique())\nprint('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306ehomeType\uff1a', X_test['homeType'].unique())","d077efd0":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3057\u304b\u306a\u3044homeType['Residential']\u306f\u30b5\u30a4\u30ba\u611f\u306e\u4f3c\u3066\u3044\u308b'Multiple Occupancy'\u3067\u7f6e\u304d\u63db\u3048\u308b\nX_test.homeType = X_test.homeType.replace(['Residential'],'Multiple Occupancy')\n\n# homeType\u3092\u30c0\u30df\u30fc\u5909\u6570\u306b\u5909\u63db\nX_train = pd.get_dummies(X_train,columns=['homeType'],drop_first=True)\nX_test = pd.get_dummies(X_test,columns=['homeType'],drop_first=True)","3cdd52d3":"# zipcode\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u5c11\u306a\u3044\u3082\u306e\u3092'99999'\u3067\u7f6e\u304d\u63db\u3048\nX_train['zipcode_count'] = X_train['zipcode']\nX_test['zipcode_count'] = X_test['zipcode']\n\nce = CountEncoder(cols='zipcode_count')\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.fit_transform(X_test)\n\nX_train.loc[X_train['zipcode_count'] < 10, ['zipcode']] = 99999\nX_test.loc[X_test['zipcode_count'] < 10, ['zipcode']] = 99999\n\nX_train.drop(['zipcode_count'], axis=1, inplace=True)\nX_test.drop(['zipcode_count'], axis=1, inplace=True)","33973d0e":"# zipcode\u3092pricePerLiv(\u5efa\u7269\u9762\u7a4d\u5f53\u305f\u308a\u306e\u4fa1\u683c\uff1d\u576a\u5358\u4fa1)\u3067Target Encoding\nX_train = pd.concat([X_train, y_train], axis=1)\nX_train['pricePerLiv'] = X_train['latestPriceRemoveTrend'] \/ X_train['livingAreaSqFt']\n\nfold = KFold(n_splits=5, shuffle=True, random_state=71)\n\nencoder = TargetEncoder(input_cols=['zipcode'], \n                        target_col='pricePerLiv', \n                        fold=fold,\n                        output_suffix='_pricePerLiv_mean')\n\nX_train = encoder.fit_transform(X_train)\nX_test = encoder.transform(X_test)\n\nX_train.drop(['latestPriceRemoveTrend','zipcode'], axis=1, inplace=True)\nX_test.drop(['zipcode'], axis=1, inplace=True)","7f8b167c":"# \u4e0a\u3067\u6c42\u3081\u305fzipcode\u3054\u3068\u306e\u5e73\u5747\u5efa\u7269\u576a\u5358\u4fa1\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u9762\u7a4d\u3092\u304b\u3051\u305f\u7279\u5fb4\u91cf\u8ffd\u52a0\nX_train['zipcodePrice'] = X_train['zipcode_pricePerLiv_mean'] * X_train['livingAreaSqFt']\nX_test['zipcodePrice'] = X_test['zipcode_pricePerLiv_mean'] * X_test['livingAreaSqFt']","fadc0c79":"#\u3000\u7def\u5ea6\u3001\u7d4c\u5ea6\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308b\n# \uff08\u3061\u306a\u307f\u306b\u5efa\u7269\u576a\u5358\u4fa1\u3067\u91cd\u307f\u4ed8\u3051\u3057\u3066\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u3082\u307b\u307c\u540c\u3058\u4f4d\u7f6e\u306b\u306a\u3063\u305f\u306e\u3067\u5358\u7d14\u5e73\u5747\u3092\u63a1\u7528\uff09\navglatitude = X_train[\"latitude\"].mean()\navglongitude = X_train[\"longitude\"].mean()","89c693b8":"#\u3000\u5e73\u5747\u304b\u3089\u5404\uff08\u7def\u5ea6\u3001\u7d4c\u5ea6\uff09\u307e\u3067\u306e\u8ddd\u96e2\u3092\"distance\"\u306b\u3068\u3059\u308b\ndatum_tr = (avglatitude,avglongitude)\nX_train[\"distance\"] = X_train.apply(lambda x:geodesic((x[\"latitude\"], x[\"longitude\"]), datum_tr).km, axis=1)\nX_test[\"distance\"] = X_test.apply(lambda x:geodesic((x[\"latitude\"], x[\"longitude\"]), datum_tr).km, axis=1)","8eb65f73":"# \u4f7f\u7528\u6e08\u306epricePerLiv\u3092\u30c9\u30ed\u30c3\u30d7\nX_train = X_train.drop(['pricePerLiv'], axis=1)","a9e0a09f":"# description\u306bwaterfront\u3068\u3044\u3046\u6587\u5b57\u3092\u542b\u3080\u3082\u306e\u3092True\u306b\uff08\u9ad8\u7d1a\u305d\u3046\u306a\u5bb6\u306e\u5199\u771f\u306f\u6c34\u8fba\u306e\u5834\u5408\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u30fb\u30fb\u30fb\u672c\u5f53\u306f\u753b\u50cf\u304b\u3089\u30fb\u30fb\u30fb\uff09\nX_train['desc_waterfront'] = X_train['description'].str.contains('waterfront') \nX_test['desc_waterfront'] = X_test['description'].str.contains('waterfront') ","8203cb50":"# streetAddress\u306f\u8003\u3048\u308b\u6642\u9593\u306a\u3057\u306e\u305f\u3081\u30c9\u30ed\u30c3\u30d7\n# description\u3082zestimate\u3092\u5229\u7528\u3055\u305b\u3066\u3082\u3089\u3063\u305f\u306e\u3067\u30c9\u30ed\u30c3\u30d7\nX_train = X_train.drop(['streetAddress','description'], axis=1)\nX_test = X_test.drop(['streetAddress','description'], axis=1)","76adc5c8":"# \u305d\u306e\u4ed6\u306b\u3082\u8272\u3005\u3084\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3082\u3046\u4e00\u62ec\u3057\u3066\u30a8\u30a4\u30e4\u3067Count Encoding\u3057\u3066\u3057\u307e\u3044\u307e\u3059\n# \u2192\u7d50\u5c40\u306flatestPriceSource\u306e\u307f\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f55\u3082\u898b\u3044\u3060\u305b\u306a\u304b\u3063\u305f\u306e\u3067\u30fb\u30fb\u30fb\uff09\ncats = []\n\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \nce = CountEncoder(cols=cats)\n\nX_train = ce.fit_transform(X_train)\nX_test = ce.transform(X_test)","e08a282b":"# \u4e0d\u8981\u306a\u3082\u306e\u3092\u30c9\u30ed\u30c3\u30d7\u3000latest_saledate\u306f\u65e5\u6570(latest_saledate_d)\u306b\u7f6e\u304d\u63db\u3048\u6e08\u3001zpid\u306f\u610f\u5473\u306a\u3044\u3067\u3059\u3088\u306d\n#\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000latest_salemonth\u3068latest_saleyear\u3082\u7279\u306b\u610f\u5473\u306a\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u30c9\u30ed\u30c3\u30d7\nX_train.drop(['latest_saledate','zpid','latest_salemonth','latest_saleyear'], axis=1, inplace=True)\nX_test.drop(['latest_saledate','zpid','latest_salemonth','latest_saleyear'], axis=1, inplace=True)","76f1cd17":"X_train.drop(['latest_saledate_d'], axis=1, inplace=True)\nX_test_d = X_test[['latest_saledate_d']]\nX_test.drop(['latest_saledate_d'], axis=1, inplace=True)","c939fda5":"X_train.head()","aa0e2f09":"X_test.head()","be746ef0":"# KFold\u4ea4\u5dee\u691c\u5b9a\u3092\u884c\u3044\u3001\u4e88\u6e2c\u7cbe\u5ea6\u3092\u898b\u7a4d\u3082\u308b\n# \u540c\u6642\u306b\u5404\u30e2\u30c7\u30eb\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3057\u3001exp\u3067\u4fa1\u683c\u306b\u623b\u3057\u3066\u304b\u3089\u5e73\u5747\u3092\u3068\u3063\u3066\u4e88\u6e2c\u5024\u3092\u5f97\u308b\ny_pred_train = np.zeros(len(X_train))\ny_pred_test = np.zeros(len(X_test))\nimportances = DataFrame(np.zeros(len(X_train.columns)), index=X_train.columns, columns=['importance'])\nscores = []\n\nn_fold = 5\ncv = KFold(n_splits=n_fold, random_state=71, shuffle=True)\n#cv = TimeSeriesSplit(n_splits=5)\n\nfor i, (train_ix, val_ix) in tqdm(enumerate(cv.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.iloc[train_ix], y_train.iloc[train_ix]\n    X_val, y_val = X_train.iloc[val_ix], y_train.iloc[val_ix]\n\n    model = LGBMRegressor(objective='mae', n_estimators=9999, learning_rate=0.05, random_state=71)\n#    model = LGBMRegressor(objective='mae', n_estimators=9999, learning_rate=0.05)\n    model.fit(X_train_, np.log1p(y_train_), eval_set=[(X_val, np.log1p(y_val))], eval_metric='mae', early_stopping_rounds=30)\n    y_pred_val = np.expm1(model.predict(X_val))\n    y_pred_test += np.expm1(model.predict(X_test))\/n_fold\n    importances['importance'] += model.feature_importances_\/n_fold\n    \n    y_pred_train[val_ix] = y_pred_val\n    #score = mean_absolute_error(y_val, y_pred)\n    score = mean_absolute_error(y_val, y_pred_val)    #\u5909\u66f4\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))","3b8a93e1":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n#np.array(scores).mean()\nprint(\"Overall MAE: %f\u00b1%f\"%(np.mean(scores), np.std(scores)))","d512d5a5":"# \u4e88\u6e2c\u3057\u305f\u4fa1\u683c\u306b\u30c8\u30ec\u30f3\u30c9\u30e9\u30a4\u30f3\u306b\u5408\u308f\u305b\u3066latest_price_d\u65e5\u6570\u3067\u88dc\u6b63\ndf_y_pred_test = pd.DataFrame(data=y_pred_test)\ndf_y_pred_test.rename(columns={0: 'latestPriceRemoveTrend'}, inplace=True)\nX_test = X_test.join(df_y_pred_test)\n\nX_test = pd.concat([X_test, X_test_d], axis=1)\n\nX_test['latestPrice'] = X_test['latestPriceRemoveTrend'] * (a * X_test['latest_saledate_d']**2 + b * X_test['latest_saledate_d'] + c) \/ c\n\nX_test.head()","fd395370":"# zestimate\u306e\u4fa1\u683c\u3068\u6bd4\u8f03\uff08\u53c2\u8003\uff09\nX_test_zes = X_test[['latest_saledate_d','latestPrice','lotSizeSqFt','livingAreaSqFt','zestimate','zestimate_month']][X_test.zestimate > 0]\nX_test_zes['priceRate']= X_test_zes['latestPrice'] \/ X_test_zes['zestimate']\nX_test_zes[['priceRate']].describe()","5dc840e7":"# zestimate\u306b\u5bfe\u3057\u3066\u3001\u4e88\u6e2c\u4fa1\u683c\u304c\u9ad8\u304b\u3063\u305f\u3082\u306e\u9806\u306b\u8868\u793a\nX_test_zes.sort_values(by='priceRate', ascending=False).head(10)","54ba2aa4":"# zestimate\u306b\u5bfe\u3057\u3066\u3001\u4e88\u6e2c\u4fa1\u683c\u304c\u5b89\u304b\u3063\u305f\u3082\u306e\u9806\u306b\u8868\u793a\nX_test_zes.sort_values(by='priceRate', ascending=True).head(10)","dd803d2a":"y_pred_test = X_test['latestPrice'].values","3d055400":"# \u63d0\u51fa\u7528\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-autumn-2021\/sample_submission.csv', index_col=0)\nsubmission.latestPrice = y_pred_test","4c37dbe3":"submission","c7efd700":"# csv\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\nsubmission.to_csv('submission.csv')","b0d69674":"# feature importance \u306e\u30d7\u30ed\u30c3\u30c8\nimportances.sort_values(['importance'], ascending=False, inplace=True)\n\nplt.figure(figsize=(20, 30))\nplt.title(\"Feature Importance\")\nplt.barh(importances.index[::-1], importances.importance[::-1])\nplt.xlabel('importance')\nplt.savefig('feature_importances-01.png')\nplt.show()","962d4c4d":"\u5bfe\u6570\u5909\u63db\u3057\u305f\u306e\u306bovjective\/metricmae\u3068\u3057\u3066mae\u3092\u4f7f\u3063\u3066\u3082\u5f71\u97ff\u306a\u3044\u304b\u3002(y_true-y_pred)\u304c(y_true\/y_pred)\u306b\u306a\u308b\u3068\u601d\u308f\u308c\u308b\u304c\u3002 \u2192\u52c9\u5f37\u4e0d\u8db3\u3067\u5206\u304b\u3089\u305a\u3002\u3068\u308a\u3042\u3048\u305amae\u306e\u307e\u307e\u3002 custom metric\u3084\u3063\u3066\u307f\u305f\u3051\u3069\u3001\u7d50\u679c\u306f\u5927\u3057\u3066\u5909\u308f\u3089\u305a\u3002\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6570\u304c\u5909\u308f\u308b\u3060\u3051\u304b\u3002 def exp_mae(y_pred, y_true): metric = np.mean(np.abs(np.expm1(y_pred)-np.expm1(y_true))) return 'exp_mae', metric, False","ca735c9e":"df_train = df_train.sort_values(by=\"latest_saledate\")","de829749":"a=1000\nb=509029"}}