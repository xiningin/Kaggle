{"cell_type":{"2b9b47e2":"code","520dc611":"code","81360f37":"code","0a325e74":"code","d26865e8":"code","1ff59c09":"code","3ae10d99":"code","ffb07dec":"code","e2ac9f15":"code","0459043b":"code","652f0e03":"code","059d30f7":"code","1c34420f":"code","ee65de61":"code","ce612c50":"markdown","eb4a45f8":"markdown","63e8a25d":"markdown","66158b30":"markdown","c1f4a2e7":"markdown","0f2c132d":"markdown","44a84179":"markdown","25ae00a4":"markdown"},"source":{"2b9b47e2":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nos.listdir('..\/input')","520dc611":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')\n\n# Sex\u306e\u5909\u63db\ngenders = {'female': 0, 'male':1}\ntrain['Sex'] = train['Sex'].map(genders)\ntest['Sex'] = test['Sex'].map(genders)\n\n# Embarked\u306e\u5909\u63db \u4eca\u56de\u306fonehot encoding\u3057\u306a\u3044\nembarked = {'S':0, 'C':1, 'Q':2}\ntrain['Embarked'] = train['Embarked'].map(embarked)\ntest['Embarked'] = test['Embarked'].map(embarked)\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\n","81360f37":"X_train = train.drop('Survived', axis=1)\ny_train = train['Survived']","0a325e74":"X_train.head()","d26865e8":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, y_train, test_size=0.33, random_state=0)\n\n# lab.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train= lgb.Dataset(train_x, train_y, categorical_feature=['Sex', 'Embarked'])\nlgb_valid = lgb.Dataset(valid_x, valid_y, categorical_feature=['Sex', 'Embarked'])\n\nlgbm_params = {'objective': 'binary'}\n\n# lgb.train\u3067\u5b66\u7fd2\ngbm = lgb.train(params=lgbm_params,\n                train_set=lgb_train,\n                valid_sets=[lgb_train, lgb_valid],\n                early_stopping_rounds=20,\n                verbose_eval=-1)\n\noof = gbm.predict(valid_x)\n\npreds = (oof > 0.5).astype(int)\nprint('score', round(accuracy_score(valid_y, preds)*100,2))","1ff59c09":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x)\nprint('score', round(accuracy_score(valid_y, (oof > 0.5).astype(int))*100,2))  # valid\u306escore\n","3ae10d99":"test_pred = (gbm.predict(test) > 0.5).astype(int)\nsample_submission['Survived'] = test_pred\nsample_submission.to_csv('train_test_split.csv', index=False)  # score:75.119\n","ffb07dec":"gbm.feature_importance()\n# importance\u306ftraining data\u306e\u5217\u9806\u306b\u8868\u793a\u3055\u308c\u308b","e2ac9f15":"# \u898b\u3084\u3059\u304f\u3059\u308b\npd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importance()}).sort_values('importance',\n    ascending=False)","0459043b":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importance(importance_type='gain')}).sort_values('importance',\n    ascending=False)","652f0e03":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')  # , importance_type='gain'\n\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y,\n        eval_set = [(train_x, train_y), (valid_x, valid_y)],\n        categorical_feature=['Sex', 'Embarked'],\n        early_stopping_rounds=20,\n        verbose=-1)\n\n# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2));  # valid\u306escore","059d30f7":"# \u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u521d\u671f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u308b\ngbm.get_params()","1c34420f":"# GridSearchCV\u3092import\nfrom sklearn.model_selection import GridSearchCV\n\ngbm = lgb.LGBMClassifier(objective='binary')\n\n# \u8a66\u884c\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7f85\u5217\u3059\u308b\nparams = {\n    'num_leaves': [20, 31, 40, 50],\n    'reg_alpha': [0, 1, 10, 100],\n    'reg_lambda': [0, 1, 10, 100],\n}\n\ngrid_search = GridSearchCV(\n                           gbm,  # \u5206\u985e\u5668\u3092\u6e21\u3059\n                           param_grid=params,  # \u8a66\u884c\u3057\u3066\u307b\u3057\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3059\n                           cv=3,  # 3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3067\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\n                          )\n\ngrid_search.fit(X_train, y_train)  # \u30c7\u30fc\u30bf\u3092\u6e21\u3059\n\nprint(grid_search.best_score_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u3092\u8868\u793a\nprint(grid_search.best_params_)  # \u30d9\u30b9\u30c8\u30b9\u30b3\u30a2\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8868\u793a","ee65de61":"kf = KFold(n_splits=3, shuffle=True, random_state=0)\n\n# \u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list = []\ntest_pred = np.zeros((len(test), 3))\n\nfor fold_, (train_index, valid_index) in enumerate(kf.split(X_train, y_train)):\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = y_train[train_index]\n    valid_y = y_train[valid_index]\n    \n    print(f'fold{fold_ + 1} start')\n\n    gbm = lgb.LGBMClassifier(objective='binary',\n                             num_leaves=20,\n                             reg_alpha=0,\n                             reg_lambda=10)  # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\n    gbm.fit(train_x, train_y,\n            eval_set = [(train_x, train_y), (valid_x, valid_y)],\n            early_stopping_rounds=20,\n            verbose= -1)\n    \n    oof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n    score_list.append(round(accuracy_score(valid_y, oof)*100,2))\n    test_pred[:, fold_] = gbm.predict_proba(test)[:, 1]\n    print(f'fold{fold_ + 1} end\\n' )\nprint(score_list, '\u5e73\u5747score', np.mean(score_list))\npred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\nsample_submission['Survived'] = pred\nsample_submission.to_csv('glid_search.csv', index=False)","ce612c50":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8abf\u6574","eb4a45f8":"## B.4 Scikit-learn interface\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5","63e8a25d":"# \u53c2\u8003","66158b30":"# \u6b21\u306eNotebook\nhttps:\/\/www.kaggle.com\/currypurin\/simple-lightgbm","c1f4a2e7":"* [Santender\u30b3\u30f3\u30da\u3067\u91d1\u30e1\u30c0\u30eb\u3068\u308b\u307e\u3067\u306e\u904e\u7a0b\u30fb\u30b3\u30f3\u30da\u306e\u307e\u3068\u3081](http:\/\/www.currypurin.com\/entry\/santander)\n* [Kaggle\u306eGrandmaster\u3084master\u306e\u6761\u4ef6\u3084\u4eba\u6570\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u306e\u3067\u3001\u8a73\u7d30\u306b\u66f8\u304d\u3068\u3081\u307e\u3059\u3002](http:\/\/www.currypurin.com\/entry\/2018\/02\/21\/011316)\n* [\u3053\u306e\u672c\u3092\u8aad\u3093\u3067\u6a5f\u68b0\u5b66\u7fd2\u3092\u5b66\u3073\u3001Kaggle\u306e\u91d1\u30e1\u30c0\u30eb\u3092\u3068\u308a\u307e\u3057\u305f](https:\/\/note.mu\/currypurin\/n\/n2607e22ccc60)\n* [Python\u306e\u672c\u3092\u6559\u3048\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u304c\u3001\u96e3\u3057\u304f\u611f\u3058\u307e\u3059\u3002\u3069\u3046\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\u3002](https:\/\/note.mu\/currypurin\/n\/n8605b7fd4051)\n* [Kaggle\u3067Silver\u53d6\u308b\u305f\u3081\u306b\u3069\u3046\u3044\u3046\u6bb5\u968e\u3092\u8e0f\u3093\u3067\u3044\u3051\u3070\u3088\u3044\u3067\u3059\u304b\uff1f](https:\/\/note.mu\/currypurin\/n\/n6a3c2bfd27c0)\n\n","0f2c132d":"## B.3 \u91cd\u8981\u5ea6\u306e\u8868\u793a","44a84179":"## B.2 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6307\u5b9a\n","25ae00a4":"importance_type='gain'\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u65bd"}}