{"cell_type":{"6eda15f1":"code","f7ae2f87":"code","b4e7e420":"code","a96c9016":"code","ee4e4dc0":"code","f9f986ec":"code","3f26f8f6":"code","b85e02f7":"code","c709c0f5":"code","076025cf":"code","551e8b08":"code","97e9a28a":"code","7ef19783":"code","092ce63b":"code","a856bc0b":"code","870e46db":"code","d06adbfc":"code","cd2a45a5":"code","523b7afa":"code","5d90c32f":"code","d92690db":"code","7311b93f":"code","26967d00":"code","57d2e901":"code","c07799ba":"code","15dbcda4":"code","6600d309":"code","8b85b8ee":"code","44831ccb":"code","c2516951":"code","f8c6c3df":"code","798f0aad":"code","f5bf06dd":"code","e3057142":"code","4c11355a":"code","f216e57c":"code","3ad08cc2":"code","3a3ef1a3":"code","f803ea17":"code","e2f48bd0":"code","268c6f80":"code","5f4f3ad1":"code","7fd602ff":"code","18cbda39":"code","16d22522":"code","6ccdf9d3":"code","12480886":"code","d177d918":"code","55fb1fe2":"code","c573c52e":"code","18c5cec3":"code","e0fc8e49":"code","a3416a0c":"code","698a0432":"code","78236a5c":"code","0fd33d97":"code","9693fb21":"code","0e1e5242":"code","ba2cb814":"code","f18b2472":"markdown","8ac89c8f":"markdown"},"source":{"6eda15f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7ae2f87":"path = \"..\/input\/covid19-in-india\/AgeGroupDetails.csv\"\nAge = pd.read_csv(path)","b4e7e420":"Age.head()","a96c9016":"Age.columns","ee4e4dc0":"Age.ndim","f9f986ec":"Age.dtypes","3f26f8f6":"Age.tail()","b85e02f7":"Age.isnull().sum()","c709c0f5":"dummies = pd.get_dummies(Age.AgeGroup)\nprint(dummies)","076025cf":"Age_dummies = pd.concat([Age , dummies], axis='columns')\nprint(Age_dummies)","551e8b08":"Age_dummies.drop(['AgeGroup','Percentage', '0-9', '10-19'],axis='columns',inplace=True)","97e9a28a":"Age_dummies","7ef19783":"train, test = train_test_split(Age_dummies, test_size=0.3)","092ce63b":"train.shape","a856bc0b":"test.shape","870e46db":"# split the train and test into X and Y variables\n# ------------------------------------------------\ntrain_x = train.iloc[:,0:3]; train_y = train.iloc[:,3]\ntest_x  = test.iloc[:,0:3];  test_y = test.iloc[:,3]\n","d06adbfc":"train_x","cd2a45a5":"test_x","523b7afa":"print(train_x.shape)\n","5d90c32f":"print(train_y.shape)\n","d92690db":"print(test_x.shape)\n","7311b93f":"print(test_y.shape)\n","26967d00":"train_x.head()","57d2e901":"train_y.head()","c07799ba":"train.head()","15dbcda4":"train.tail()","6600d309":"train.dtypes","8b85b8ee":"lm1 = sm.OLS(train_y, train_x).fit()\npdct1 = lm1.predict(test_x)\nprint(pdct1)\n","44831ccb":"actual = list(test_y.head(5))\ntype(actual)\npredicted = np.round(np.array(list(pdct1.head(5))),2)\nprint(predicted)\ntype(predicted)","c2516951":"df_results = pd.DataFrame({'actual':actual, 'predicted':predicted})\nprint(df_results)\n","f8c6c3df":"from sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(test_y, pdct1))  \nprint('Mean Squared Error:', metrics.mean_squared_error(test_y, pdct1))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, pdct1)))  \n","798f0aad":"path = \"..\/input\/covid19-in-india\/covid_19_india.csv\"\ncovid_india = pd.read_csv(path)","f5bf06dd":"covid_india.head()","e3057142":"dummies = pd.get_dummies(covid_india.Date)\nprint(dummies)\n","4c11355a":"covid_india_dummies = pd.concat([covid_india , dummies], axis='columns')\nprint(covid_india_dummies)\n","f216e57c":"dummies1 = pd.get_dummies(covid_india.ConfirmedIndianNational)\nprint(dummies1)\n","3ad08cc2":"covid_india_dummies1 = pd.concat([covid_india , dummies1], axis='columns')\nprint(covid_india_dummies1)","3a3ef1a3":"dummies2 = pd.get_dummies(covid_india.ConfirmedForeignNational)\nprint(dummies2)\n","f803ea17":"covid_india_dummies2 = pd.concat([covid_india , dummies2], axis='columns')\nprint(covid_india_dummies2)","e2f48bd0":"covid_india_dummies.drop(['Sno','ConfirmedIndianNational','ConfirmedForeignNational','State\/UnionTerritory','Time', 'Date','29\/03\/20','29\/04\/20', '30\/01\/20', '30\/03\/20', '30\/04\/20', '31\/01\/20','31\/03\/20'],axis='columns',inplace=True)\nprint(covid_india_dummies)","268c6f80":"train, test = train_test_split(covid_india_dummies, test_size=0.3)","5f4f3ad1":"train.shape","7fd602ff":"test.shape","18cbda39":"train_x = train.iloc[:,0:3]; train_y = train.iloc[:,3]\ntest_x  = test.iloc[:,0:3];  test_y = test.iloc[:,3]","16d22522":"train_x","6ccdf9d3":"test_x","12480886":"train_x.shape","d177d918":"train_y.shape","55fb1fe2":"test_x.shape","c573c52e":"test_y.shape","18c5cec3":"train_x.head()","e0fc8e49":"train_y.head()","a3416a0c":"train.head()","698a0432":"train.tail()","78236a5c":"train.dtypes","0fd33d97":"pred = sm.OLS(train_y, train_x).fit()\npdct1 = pred.predict(test_x)\nprint(pdct1)","9693fb21":"actual = list(test_y.head(5))\ntype(actual)\npredicted = np.round(np.array(list(pdct1.head(5))),2)\nprint(predicted)\ntype(predicted)","0e1e5242":"df_results = pd.DataFrame({'actual':actual, 'predicted':predicted})\nprint(df_results)","ba2cb814":"from sklearn import metrics  \nprint('Mean Absolute Error:', metrics.mean_absolute_error(test_y, pdct1))  \nprint('Mean Squared Error:', metrics.mean_squared_error(test_y, pdct1))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(test_y, pdct1)))  \n","f18b2472":"# COVID_19_INDIA","8ac89c8f":"# I try to figure out AgeGroupDetails with linearregression and also use pandas, numpy, statsmodels, sklearn libries to predict the values."}}