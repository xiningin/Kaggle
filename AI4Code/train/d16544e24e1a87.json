{"cell_type":{"01beb664":"code","6607a20c":"code","25ea43ea":"code","7a5d7f47":"code","fb544cbc":"code","51b87e3e":"markdown","0edbbb3b":"markdown","ab6a5e6f":"markdown","f25944b0":"markdown","05ae9cd9":"markdown","125e622e":"markdown","239dfc49":"markdown"},"source":{"01beb664":"import os\nimport matplotlib.pyplot as plt\n\n#for loading and visualizing audio files\nimport librosa\nimport librosa.display\n\n#to play audio\nimport IPython.display as ipd\n\naudio_fpath = \"..\/input\/audio\/audio\/\"\naudio_clips = os.listdir(audio_fpath)\nprint(\"No. of .wav files in audio folder = \",len(audio_clips))","6607a20c":"x, sr = librosa.load(audio_fpath+audio_clips[2], sr=44100)\n\nprint(type(x), type(sr))\nprint(x.shape, sr)","25ea43ea":"plt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)","7a5d7f47":"X = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()","fb544cbc":"plt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')\nplt.colorbar()","51b87e3e":"The purpose of creating this kernel is to provide - **not only** a step by step guide on how to convert a given audio clip to spectrogram which will be useful for various other audio analysis **but also** to explain what each step in audio loading and visualiztion is doing.<br>\n\nProvided some links in reference section at the end of the kernel.\n\n** More information to be added","0edbbb3b":"## Step-3: Convert the audio waveform to spectrogram","ab6a5e6f":"## Some information about audio data before we start with audio data processing\n### What are x and y axis in a audio wave representation?\n![Sound wave image](https:\/\/swphonetics.files.wordpress.com\/2012\/03\/wavsin01.jpg)\n- The y-axis represents sound pressure, the x-axis represents time.\n\n### Standard waveforms\n#### Sine waveform\n![Sine wave image](https:\/\/www.electronics-tutorials.ws\/wp-content\/uploads\/2018\/05\/waveforms-tim1.gif)\n\n#### Square waveform\n![Square waveform image](https:\/\/www.electronics-tutorials.ws\/wp-content\/uploads\/2018\/05\/waveforms-tim3.gif)\n\n#### Rectangular waveform\n![Rectangular waveform image](https:\/\/www.electronics-tutorials.ws\/wp-content\/uploads\/2018\/05\/waveforms-tim6.gif)\n\n#### Triangular waveform\n![Triangular waveform image](https:\/\/www.electronics-tutorials.ws\/wp-content\/uploads\/2018\/05\/waveforms-tim8.gif)\n\n#### Sawtooth waveform\n![Sawtooth waveform image](https:\/\/www.electronics-tutorials.ws\/wp-content\/uploads\/2018\/05\/waveforms-tim9.gif)\n\n** More info will be added here","f25944b0":"## Step-4: Applying log transformation on the loaded audio signals","05ae9cd9":"## Step-1: Let's import all the required libraries","125e622e":"## Step-2: Load audio file and visualize its waveform (using librosa)","239dfc49":"### References:\n- https:\/\/towardsdatascience.com\/music-genre-classification-with-python-c714d032f0d8\n- https:\/\/stackoverflow.com\/questions\/44787437\/how-to-convert-a-wav-file-to-a-spectrogram-in-python3\n- https:\/\/swphonetics.com\/praat\/tutorials\/understanding-waveforms\/\n- https:\/\/swphonetics.com\/praat\/tutorials\/understanding-waveforms\/standard-waveforms\/\n- https:\/\/www.electronics-tutorials.ws\/waveforms\/waveforms.html"}}