{"cell_type":{"d64971c3":"code","39a336a7":"code","089a50d1":"code","6f9b9f77":"code","fbd69df1":"code","f95b2156":"code","a23119f9":"code","9d036faa":"code","c32ddca1":"code","74b1ac54":"code","af65eeab":"code","cfdcb52a":"code","d408c7a1":"code","eb1b636d":"code","5bb7101a":"code","45e5e1a0":"code","cf6b8f0c":"code","f3c625d9":"code","c391073b":"code","ccc158c5":"code","2180e7f0":"code","97e6bf17":"code","a6685b48":"code","7f140d80":"code","cd17c161":"code","fc52faae":"code","a68f7dc0":"markdown","273aca02":"markdown","b0e6e8eb":"markdown","2244dd89":"markdown"},"source":{"d64971c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nplt.style.use('seaborn-talk')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","39a336a7":"from pylab import rcParams\nrcParams['figure.figsize'] = 14,6","089a50d1":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score,mean_squared_error","6f9b9f77":"data = pd.read_table('\/kaggle\/input\/gapminder\/gapminder.tsv')\ndata.head()","fbd69df1":"data.loc[data[\"year\"]==2007][\"continent\"].value_counts()","f95b2156":"def find(df,col,eq):\n    return df.loc[df[col]==eq]","a23119f9":"Africa = find(data,\"continent\",\"Africa\")\nAsia = find(data,\"continent\",\"Asia\")\nEurope = find(data,\"continent\",\"Europe\")\nAmericas = find(data,\"continent\",\"Americas\")\nOceania = find(data,\"continent\",\"Oceania\")","9d036faa":"Continent = data.groupby(['continent','year'])['pop'].sum().reset_index()\nWorld = data.groupby(['year'])['pop'].sum().reset_index()\nWorld.index = World[\"year\"]\nWorld = World.drop(\"year\",axis=1)","c32ddca1":"World.style.background_gradient(\"Greens\")","74b1ac54":"sns.swarmplot(data  = data.loc[data[\"year\"]==2007], x=\"continent\",y=\"lifeExp\",color=\"0000\")\nsns.boxenplot(data  = data.loc[data[\"year\"]==2007], x=\"continent\",y=\"lifeExp\")\nplt.title(\"Life expectancy at birth\")\nplt.show()","af65eeab":"sns.swarmplot(data  = data.loc[data[\"year\"]==2007], x=\"continent\",y=\"pop\",color=\"0000\")\nsns.boxenplot(data  = data.loc[data[\"year\"]==2007], x=\"continent\",y=\"pop\")\nplt.title(\"World Population\")\nplt.show()","cfdcb52a":"sns.swarmplot(data  = data.loc[data[\"year\"]==2007], x=\"continent\",y=\"gdpPercap\",color=\"0000\")\nsns.boxenplot(data  = data.loc[data[\"year\"]==2007], x=\"continent\",y=\"gdpPercap\")\nplt.title(\"Per-capita GDP\")\nplt.show()","d408c7a1":"fig = px.scatter(x=data.loc[data['year']==2007][\"gdpPercap\"], y=data.loc[data['year']==2007][\"lifeExp\"], \n                 color=data.loc[data['year']==2007][\"continent\"],\n                 size=data.loc[data['year']==2007][\"pop\"],title=\"x: gdpPercap y:lifeExp size:pop\")\nfig.show()","eb1b636d":"arr = [Africa,Asia,Europe,Americas,Oceania]\n\ntitle = [\"Population of Africa 2007\",\n        \"Population of Asia 2007\",\n        \"Population of Europe 2007\",\n        \"Population of Americas 2007\",\n        \"Population of Oceania 2007\"]\nfor i in range(len(title)):\n    if i==4:\n        plt.figure(figsize=(10,1))\n    else:\n        plt.figure(figsize=(10,15))\n    sns.barplot(y=\"country\",x=\"pop\",data=arr[i].loc[arr[i][\"year\"]==2007].sort_values(\"pop\",ascending=False),\n               palette='Set1')\n    plt.title(title[i])\n    plt.ylabel(\"Country\")\n    plt.xlabel(\"Population\")\n    plt.show()","5bb7101a":"arr = [Africa,Asia,Europe,Americas,Oceania]\n\ntitle = [\"Per-capita GDP of Africa 2007\",\n        \"Per-capita GDP of Asia 2007\",\n        \"Per-capita GDP of Europe 2007\",\n        \"Per-capita GDP of Americas 2007\",\n        \"Per-capita GDP of Oceania 2007\"]\nfor i in range(len(title)):\n    if i==4:\n        plt.figure(figsize=(10,1))\n    else:\n        plt.figure(figsize=(10,15))\n    sns.barplot(y=\"country\",x=\"gdpPercap\",data=arr[i].loc[arr[i][\"year\"]==2007].sort_values(\"gdpPercap\",ascending=False),\n               palette='Set2')\n    plt.title(title[i])\n    plt.ylabel(\"Country\")\n    plt.xlabel(\"Per-capita GDP\")\n    plt.show()","45e5e1a0":"pop100M = data.loc[(data[\"pop\"]>100000000) & (data[\"year\"]==2007)].sort_values(\"pop\",ascending=False)\npop_gdpPercap = data.loc[(data[\"gdpPercap\"]>35000) & (data[\"year\"]==2007)].sort_values(\"gdpPercap\",ascending=False)","cf6b8f0c":"gdp = pd.DataFrame(pop_gdpPercap[\"gdpPercap\"])\ngdp.index = pop_gdpPercap[\"country\"]\ngdp2 = pd.DataFrame(data.loc[data[\"year\"]==2007].sort_values(\"gdpPercap\")[:15][\"gdpPercap\"])\ngdp2.index = data.loc[data[\"year\"]==2007].sort_values(\"gdpPercap\")[:15][\"country\"]\ngdp.columns =  [\"Per-capita GDP\"]\ngdp2.columns =  [\"Per-capita GDP\"]","f3c625d9":"gdp.style.background_gradient(\"Oranges\")","c391073b":"gdp2.style.background_gradient(\"Oranges\")","ccc158c5":"world_continent = data.groupby(['continent'])['pop'].sum().reset_index()\nworld_continent.style.background_gradient(\"coolwarm\")","2180e7f0":"fig = px.pie(pop100M, values='pop', names='country', title='Countries with a population of more than 100M')\nfig.show()","97e6bf17":"fig = px.pie(world_continent, values='pop', names=\"continent\" ,title='World Population 2007')\nfig.show()","a6685b48":"fig = px.bar(Continent, x='year', y='pop',color=\"continent\",title=\"World population by years\")\nfig.show()","7f140d80":"X = np.array(World.index).reshape(-1,1)\ny = np.array(World[\"pop\"]) ","cd17c161":"MODEL = LinearRegression()\nMODEL.fit(X,y)","fc52faae":"pred = MODEL.predict(X)\nplt.scatter(X,y,label=\"Actual\",s=100)\nplt.plot(X,pred,label=\"Regression\",color='r')\nplt.legend()\nplt.grid(True)\nplt.show()\nprint(\"New case for next 3 Yeras:\",MODEL.predict([[2010],[2020],[2030]]))\nprint(\"MSE:\",mean_squared_error(y,pred))\nprint(\"R2 :\",r2_score(y,pred))","a68f7dc0":"**Life expectancy at birth reflects the overall mortality level of a population. It summarizes the mortality pattern that prevails across all age groups - children and adolescents, adults and the elderly. Average number of years that a newborn is expected to live if current mortality rates continue to apply.**","273aca02":"**Per-capita GDP (Gross domestic product) is given in units of international dollars, \u201ca hypothetical unit of currency that has the same purchasing power parity that the U.S. dollar had in the United States at a given point in time\u201d \u2013 2005, in this case.**","b0e6e8eb":"**A linear increase has occurred in the world population over time. I created the Linear Regression Model. I want to in 2010, 2020 and 2030 to estimate how much the world population will be.**","2244dd89":"**The data For each of 142 countries, provides values for life expectancy, GDP per capita, and population, every five years, from 1952 to 2007.**"}}