{"cell_type":{"0560aad5":"code","68ea54d1":"code","146cfdbb":"code","7b747d88":"code","c7d6075e":"code","5e91106d":"code","8b1298c6":"code","e801e9d0":"code","b41ea0cd":"code","1f359923":"code","9dc4f148":"markdown","f5592a65":"markdown","a1c36757":"markdown","f0650601":"markdown","18236023":"markdown","3313b0d5":"markdown","693807c2":"markdown"},"source":{"0560aad5":"%matplotlib inline\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebraimport math\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math","68ea54d1":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","146cfdbb":"# Distribution graphs (histogram\/bar graph) of column data\ncity_data=pd.read_csv('\/kaggle\/input\/world-cities-database\/worldcitiespop.csv')\ncity_data=city_data.drop_duplicates(subset=['City','AccentCity'], keep=False)\ndf=pd.read_csv('..\/input\/black-lives-matter-twitter-dataset\/data.csv')\ndf['City']=df['Location']\ndf.drop(['Location','Sentiment'],axis=1,inplace=True)\ncleaned=df.loc[df['City']!='not given']","7b747d88":"def city_naming(s):\n    splitter=s.split(',')\n    return splitter[0]\n\ndef lowing(str):\n    return str.lower()\ncleaned=cleaned[cleaned['City'].notnull()]\ncleaned=cleaned[cleaned.City.apply(lambda x: str(x).isalpha())]\ncleaned['City']=cleaned['City'].apply(city_naming)\n","c7d6075e":"cleaned['City']=cleaned['City'].apply(lowing)\ncity_data['City']=city_data['City'].apply(lowing)\nmerged=pd.merge(cleaned,city_data,on='City')","5e91106d":"merged['Population'].fillna((merged['Population'].mean()),inplace=True)","8b1298c6":"merged","e801e9d0":"\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\nfrom itertools import chain\n\ndef draw_map(m, scale=0.2):\n    # draw a shaded-relief image\n    m.shadedrelief(scale=scale)\n    \n    # lats and longs are returned as a dictionary\n    lats = m.drawparallels(np.linspace(-90, 90, 13))\n    lons = m.drawmeridians(np.linspace(-180, 180, 13))\n\n    # keys contain the plt.Line2D instances\n    lat_lines = chain(*(tup[1][0] for tup in lats.items()))\n    lon_lines = chain(*(tup[1][0] for tup in lons.items()))\n    all_lines = chain(lat_lines, lon_lines)\n    \n    # cycle through these lines and set the desired style\n    for line in all_lines:\n        line.set(linestyle='-', alpha=0.3, color='w')","b41ea0cd":"lat = merged['Latitude'].values\nlon = merged['Longitude'].values\npopulation =  merged['Population'].values\narea = merged['Population'].values\/merged['Population'].values.min()\ncit=merged['City']","1f359923":"fig = plt.figure(figsize=(15, 15))\nm = Basemap(projection='cyl', resolution=None,\n            llcrnrlat=-90, urcrnrlat=90,\n            llcrnrlon=-180, urcrnrlon=180, )\nm.shadedrelief()\n# 2. scatter city data, with color reflecting population\n# and size reflecting area\nm.scatter(lon, lat, latlon=True,\n          c=np.log10(population), s=area,\n          cmap='Reds', alpha=0.5)\n\n# 3. create colorbar and legend\nplt.colorbar(label=r'$\\log_{10}({\\rm population})$')\nplt.clim(3, 7)\n\n# make legend with dummy points\nfor a in [100, 300, 500]:\n    plt.scatter([], [], c='k', alpha=0.5, s=a,\n                label=str(a) + ' km$^2$')\nplt.legend(scatterpoints=1, frameon=False,\n           labelspacing=1, loc='lower left');\n","9dc4f148":"Result","f5592a65":"Now you're ready to read in the data and use the plotting functions to visualize the data.","a1c36757":"## Conclusion\nBeginning of Geocoding , lot to learn . Happy Kaggling!","f0650601":"## Geo-Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data. Plotting cities according population where is hotspot.","18236023":"# Plotting Time","3313b0d5":"## Introduction\nGreetings , Introducing Geo-location Plotting","693807c2":"Let's take a quick look at what the data looks like:"}}