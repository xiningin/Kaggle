{"cell_type":{"e7cb2bf4":"code","f015e3f5":"code","efc785ab":"code","99c9116e":"code","e846e1d6":"code","79cdac10":"code","020a29e2":"code","48a7ca23":"code","62262531":"code","86d7f582":"code","080fcaa8":"code","1ae51de6":"markdown","63816ec1":"markdown","463efd82":"markdown","90d9f311":"markdown","7c642799":"markdown","63ff088e":"markdown","4ada46b4":"markdown","cfd1d9ec":"markdown","20c62e07":"markdown","b95ce342":"markdown","7b566b18":"markdown","e7b15400":"markdown","b361ab08":"markdown","e6d6fd22":"markdown","091c04e0":"markdown","521001d7":"markdown","28538e2e":"markdown","f422f5d9":"markdown","00a2a05e":"markdown","8e185d7a":"markdown"},"source":{"e7cb2bf4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport pydicom\nfrom glob import glob\nfrom tqdm.notebook import tqdm\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport matplotlib.pyplot as plt\nfrom skimage import exposure\nimport cv2\nimport warnings\nwarnings.filterwarnings('ignore')","f015e3f5":"dataset_dir = '..\/input\/vinbigdata-chest-xray-abnormalities-detection'","efc785ab":"def dicom2array(path, voi_lut=True, fix_monochrome=True):\n    dicom = pydicom.read_file(path)\n    # VOI LUT (if available by DICOM device) is used to\n    # transform raw DICOM data to \"human-friendly\" view\n    if voi_lut:\n        data = apply_voi_lut(dicom.pixel_array, dicom)\n    else:\n        data = dicom.pixel_array\n    # depending on this value, X-ray may look inverted - fix that:\n    if fix_monochrome and dicom.PhotometricInterpretation == \"MONOCHROME1\":\n        data = np.amax(data) - data\n    data = data - np.min(data)\n    data = data \/ np.max(data)\n    data = (data * 255).astype(np.uint8)\n    return data\n        \n    \ndef plot_img(img, size=(7, 7), is_rgb=True, title=\"\", cmap='gray'):\n    plt.figure(figsize=size)\n    plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n\n\ndef plot_imgs(imgs, cols=4, size=7, is_rgb=True, title=\"\", cmap='gray', img_size=(500,500)):\n    rows = len(imgs)\/\/cols + 1\n    fig = plt.figure(figsize=(cols*size, rows*size))\n    for i, img in enumerate(imgs):\n        if img_size is not None:\n            img = cv2.resize(img, img_size)\n        fig.add_subplot(rows, cols, i+1)\n        plt.imshow(img, cmap=cmap)\n    plt.suptitle(title)\n    plt.show()\n    \n# def draw_bboxes(img, boxes, thickness=10, color=(255, 0, 0), img_size=(500,500)):\n#     img_copy = img.copy()\n#     if len(img_copy.shape) == 2:\n#         img_copy = np.stack([img_copy, img_copy, img_copy], axis=-1)\n#     for box in boxes:\n#         img_copy = cv2.rectangle(\n#             img_copy,\n#             (int(box[0]), int(box[1])),\n#             (int(box[2]), int(box[3])),\n#             color, thickness)\n#     if img_size is not None:\n#         img_copy = cv2.resize(img_copy, img_size)\n#     return img_copy","99c9116e":"dicom_paths = glob(f'{dataset_dir}\/train\/*.dicom')\nimgs = [dicom2array(path) for path in dicom_paths[:4]]\nplot_imgs(imgs)","e846e1d6":"imgs = [exposure.equalize_hist(img) for img in imgs]\nplot_imgs(imgs)","79cdac10":"from bokeh.plotting import figure as bokeh_figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel\nfrom bokeh.models.widgets import Tabs\nimport pandas as pd\nfrom PIL import Image\nfrom sklearn import preprocessing\nimport random\nfrom random import randint","020a29e2":"def get_bbox_area(row):\n    return (row['x_max']-row['x_min'])*(row['y_max']-row['y_min'])\n\ntrain_df = pd.read_csv(f'{dataset_dir}\/train.csv')\nle = preprocessing.LabelEncoder()  # encode rad_id\ntrain_df['rad_label'] = le.fit_transform(train_df['rad_id'])\n\nfinding_df = train_df[train_df['class_name'] != 'No finding']\nfinding_df['bbox_area'] = finding_df.apply(get_bbox_area, axis=1)\nfinding_df.head()","48a7ca23":"imgs = []\nimg_ids = finding_df['image_id'].values\nclass_ids = finding_df['class_id'].unique()\n\n# map label_id to specify color\nlabel2color = {class_id:[randint(0,255) for i in range(3)] for class_id in class_ids}\nthickness = 3\nscale = 5\n\n\nfor i in range(8):\n    img_id = random.choice(img_ids)\n    img_path = f'{dataset_dir}\/train\/{img_id}.dicom'\n    img = dicom2array(path=img_path)\n    img = cv2.resize(img, None, fx=1\/scale, fy=1\/scale)\n    img = np.stack([img, img, img], axis=-1)\n    \n    boxes = finding_df.loc[finding_df['image_id'] == img_id, ['x_min', 'y_min', 'x_max', 'y_max']].values\/scale\n    labels = finding_df.loc[finding_df['image_id'] == img_id, ['class_id']].values.squeeze()\n    \n    for label_id, box in zip(labels, boxes):\n        color = label2color[label_id]\n        img = cv2.rectangle(\n            img,\n            (int(box[0]), int(box[1])),\n            (int(box[2]), int(box[3])),\n            color, thickness\n    )\n    img = cv2.resize(img, (500,500))\n    imgs.append(img)\n    \nplot_imgs(imgs, cmap=None)","62262531":"def hist_hover(dataframe, column, color=[\"#94c8d8\", \"#ea5e51\"], bins=30, title=\"\", value_range=None):\n    \"\"\"\n    Plot histogram\n    \"\"\"\n    hist, edges = np.histogram(dataframe[column], bins=bins, range=value_range)\n    hist_frame = pd.DataFrame({\n        column: hist,\n        \"left\": edges[:-1],\n        \"right\": edges[1:]\n    })\n    hist_frame[\"interval\"] = [\"%d to %d\" %\n                              (left, right) for left, right in zip(edges[:-1], edges[1:])]\n    src = ColumnDataSource(hist_frame)\n    plot = bokeh_figure(\n        plot_height=400, plot_width=600,\n        title=title, x_axis_label=column,\n        y_axis_label=\"Count\"\n    )\n    plot.quad(\n        bottom=0, top=column, left=\"left\", right=\"right\",\n        source=src, fill_color=color[0], line_color=\"#35838d\",\n        fill_alpha=0.7, hover_fill_alpha=0.7,\n        hover_fill_color=color[1]\n    )\n    hover = HoverTool(\n        tooltips=[(\"Interval\", \"@interval\"), (\"Count\", str(f\"@{column}\"))]\n    )\n    plot.add_tools(hover)\n    output_notebook()\n    show(plot)\n    \n    \nhist_hover(train_df, column='class_id')","86d7f582":"#Note that a key part of this competition is working with ground truth from multiple radiologists.\nhist_hover(train_df, column='rad_label')","080fcaa8":"## histogram of bbox area\nhist_hover(finding_df, column='bbox_area')","1ae51de6":"## 2.2 Plot histogram","63816ec1":"# 3. Don't forget to upvote :D","463efd82":"![](https:\/\/i.imgur.com\/QWmbhXx.png)","90d9f311":"### Now, we will try some EDA steps to find out important features in this data set","7c642799":"you can see the imbalance between image qualtity of each class","63ff088e":"After some EDA steps, we recognize that the dataset fairly imbalance in many aspects. Maybe, we need to use some augmentation method to resolve the problem.\n","4ada46b4":"# About VinBigData Chest X-ray Abnormalities","cfd1d9ec":"\ub17c\ubb38\ub0b4\uc758 \ubaa8\ub4e0 \ud2b9\uc9d5\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\ub2e4.\n\n- 0 - Aortic enlargement \/ 2348\n- 1 - Atelectasis \/ 62\n- 2 - Calcification \/ 177\n- 3 - Cardiomegaly \/ 1817\n- 4 - Consolidation \/ 121\n- 5 - ILD \/ 152\n- 6 - Infiltration \/ 245\n- 7 - Lung Opacity \/ 547\n- 8 - Nodule\/Mass \/ 410\n- 9 - Other lesion \/ 363\n- 10 - Pleural effusion \/ 634\n- 11 - Pleural thickening \/ 882\n- 12 - Pneumothorax \/ 58\n- 13 - Pulmonary fibrosis \/ 1017","20c62e07":"Maybe, you can try some preprocess like equalize histogram. You can see the difference between before and after","b95ce342":"> \uc774 \ub300\ud68c\uc5d0\uc11c\ub294 \ud749\ubd80 \ubc29\uc0ac\uc120 \ucd2c\uc601\uc5d0\uc11c 14\uac00\uc9c0 \uc720\ud615\uc758 \ud749\ubd80 \uc774\uc0c1\uc744 \uc790\ub3d9\uc73c\ub85c \ud604\uc9c0\ud654\ud558\uace0 \ubd84\ub958\ud569\ub2c8\ub2e4.\n\n> \uc219\ub828\ub41c \ubc29\uc0ac\uc120\uc0ac\uac00 \uc8fc\uc11d\uc744 \ub2e8 18,000\uac1c\uc758 \uc2a4\uce94\uc73c\ub85c \uad6c\uc131\ub41c \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n> 15,000\uac1c\uc758 \ub3c5\ub9bd \ub808\uc774\ube14 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub378\uc744 \uad50\uc721\ud560 \uc218 \uc788\uc73c\uba70 3,000\uac1c\uc758 \uc774\ubbf8\uc9c0 \ud14c\uc2a4\ud2b8 \uc138\ud2b8\uc5d0\uc11c \ud3c9\uac00\ub429\ub2c8\ub2e4. \n\n> \uc774\ub7ec\ud55c \uc8fc\uc11d\ub4e4\uc740 VinBigData\uc758 \uc6f9 \uae30\ubc18 \ud50c\ub7ab\ud3fc\uc778 VinLab\uc744 \ud1b5\ud574 \uc218\uc9d1\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \uc138\ud2b8 \uad6c\ucd95\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ucd5c\uadfc \ub17c\ubb38 \"VinDr-CXR: \ubc29\uc0ac\uc120 \uc804\ubb38\uc758 \uc8fc\uc11d\uc774 \ud3ec\ud568\ub41c \ud749\ubd80 X\uc120\uc758 \uc5f4\ub9b0 \ub370\uc774\ud130 \uc138\ud2b8\"\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. https:\/\/arxiv.org\/pdf\/2012.15029.pdf","7b566b18":"We will try to plot some histograms.  The hist_hover function allows you to interact very well with chart","e7b15400":"## 2.1 Plot bounding box","b361ab08":"DICOM\uc740 \uc758\ub8cc \uc601\uc0c1\uc758 \uad6d\uc81c \ud45c\uc900\uc774\uace0,\nPACS\ub294 '\uc758\ud559\uc601\uc0c1\uc815\ubcf4\uc2dc\uc2a4\ud15c'\uc758 \uc57d\uc790\ub85c \uc758\ub8cc\uc601\uc0c1\uc744 \uad00\ub9ac\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4.  \n\n\uc5ec\ub7ec \ud68c\uc0ac\uc5d0\uc11c \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c PACS\ub97c \uad6c\ud604\ud558\uace0 \uc788\uace0, \ubcd1\uc6d0\uc5d0\uc11c\ub294 \uc790\uae30 \ubd84\uc57c\uc5d0 \ub9de\ub294 PACS\ub97c \uac00\uc838\ub2e4 \uc501\ub2c8\ub2e4.\n\n\uc27d\uac8c\ub9d0\ud574 DICOM\uc740 \ud30c\uc77c \ud615\uc2dd\uc774\uace0, PACS\ub294 DICOM \ud30c\uc77c\uc744 \ubcf4\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc785\ub2c8\ub2e4. \n\uc77c\ubc18\uc778\ub3c4 DICOM \ubdf0\uc5b4\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ubc1b\uc544 DICOM \ud615\uc2dd\uc758 \ud30c\uc77c\uc744 \uc77d\uc5b4\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n","e6d6fd22":"# 1. Dicom to Numpy array","091c04e0":"- image_id -\uace0\uc720 \ud55c \uc774\ubbf8\uc9c0 \uc2dd\ubcc4\uc790\n- class_name -\uac10\uc9c0 \ub41c \uac1c\uccb4\uc758 \ud074\ub798\uc2a4 \uc774\ub984 (\ub610\ub294 \"\ucc3e\uc744 \uc218 \uc5c6\uc74c\")\n- class_id -\uac10\uc9c0 \ub41c \uac1c\uccb4\uc758 \ud074\ub798\uc2a4 ID\n- rad_id -\uad00\ucc30 \ud55c \ubc29\uc0ac\uc120\uacfc \uc758\uc0ac\uc758 ID\n- x_min -\uac1c\uccb4 \uacbd\uacc4 \uc0c1\uc790\uc758 \ucd5c\uc18c X \uc88c\ud45c\n- y_min -\uac1c\uccb4 \uacbd\uacc4 \uc0c1\uc790\uc758 \ucd5c\uc18c Y \uc88c\ud45c\n- x_max -\uac1c\uccb4 \uacbd\uacc4 \uc0c1\uc790\uc758 \ucd5c\ub300 X \uc88c\ud45c\n- y_max -\uac1c\uccb4 \uacbd\uacc4 \uc0c1\uc790\uc758 \ucd5c\ub300 Y \uc88c\ud45c","521001d7":"> All images in dataset are DICOM format. So we need to convert data from DICOM to numpy array. Original dicom2array function in [raddar's notebook](https:\/\/www.kaggle.com\/raddar\/convert-dicom-to-np-array-the-correct-way)","28538e2e":"You can see that: in each image, there are many overlapping boxes. Note that a key part of this competition is working with ground truth from multiple radiologists. I guess it is a key to get best rank in this competition if you handle it skillfully.","f422f5d9":"The imbalance between image qualtity of each radiologist","00a2a05e":"# 2. EDA csv","8e185d7a":"![image.png](attachment:image.png)"}}