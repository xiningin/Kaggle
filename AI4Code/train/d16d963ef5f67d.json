{"cell_type":{"7f23fef3":"code","f599c824":"code","ebc8e313":"code","96ee340b":"code","f2a7e178":"code","cb58e503":"code","04e12a4f":"code","3d3d19c8":"code","037f09b8":"code","42f6853c":"code","997af3d6":"code","f4827eaf":"code","b5505cda":"markdown"},"source":{"7f23fef3":"!pip install missingno","f599c824":"# Make sure we got everything\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import accuracy_score\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold\nimport missingno as msno \nimport matplotlib.pyplot as plot\nfrom sklearn.model_selection import StratifiedKFold\nfrom statsmodels.graphics.mosaicplot import mosaic\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ebc8e313":"#Reading Data\ndata=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nfeature_list = list(data.columns)\nfor feature in feature_list:\n    print(feature, data[feature].isnull().values.any())\n","96ee340b":"data","f2a7e178":"import plotly.graph_objects as px\n\n#EDA here\n#Is the data skewed on survival\nplot.hist(data['Survived'])\nplot.xlabel('Survived')\nplot.ylabel('Number of survivers in dataset')\nplot.show()\n\n#More people in data who have died than survived...\n\n#Interesting... is there a relationship between age and whether they survived?\nSurvivedAgeData = data.loc[data['Survived'] == 1]\nDiedAgeData = data.loc[data['Survived'] == 0]\n\nplot.hist([SurvivedAgeData['Age'], DiedAgeData['Age']], label=['Survived', 'Died'])\nplot.legend(loc='upper left')\nplot.xlabel('Age')\nplot.ylabel('Age of people in dataset')\nplot.show()\n\n","cb58e503":"#Check family \ndata['familyPresent'] = np.where( (data['Parch'] > 0) | (data['SibSp'] > 0)  , '1', '0')\n\ndata['familyPresent']\n","04e12a4f":"mosaic(data, ['Survived', 'familyPresent'])\nplot.show()","3d3d19c8":"#Check ticket groupings \n\n'''\ndata['TicketGrouping'] = data.duplicated(subset = 'Ticket').astype(int)\n\nmosaic(data, ['Survived', 'TicketGrouping'])\nplot.show()\n'''\n","037f09b8":"#How are NANas distributed\nmsno.matrix(data) \nplot.show()\n\n#Cabin is literally absolute shite\ndata = data.drop('Cabin', axis=1)\n\nplot.hist(data['Age'])\nplot.show()\n\n\n#Fill with mean\ndata['Age'] = data['Age'].fillna(data['Age'].mean()).astype(int)\n\ns = pd.value_counts(data['Name'])\ns1 = pd.Series({'nunique': len(s), 'unique values': s.index.tolist()})\ns.append(s1)\n\n\n#Name is not helpful\ndata = data.drop('Name', axis=1)\n\n#Literally two embarks are empty. whatever...\ndata = data.dropna()\n\n#We got ticket groupings so we can drop tickets\ndata = data.drop('Ticket', axis=1)\n","42f6853c":"msno.matrix(data) \n","997af3d6":"#Get features and labels\nlabels = (data['Survived'])\nfeatures = data.drop('Survived', axis=1)\nfeature_list = list(features.columns)\n\n#One hot encoding \nfeatures = pd.get_dummies(features)\n\nprint (features)\n# Split the data into training and testing sets\ntrain_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = 0.25, random_state = 42)\n\n#Set up K Folds \nprint('Training Features Shape:', train_features.shape)\nprint('Training Labels Shape:', train_labels.shape)\nprint('Testing Features Shape:', test_features.shape)\nprint('Testing Labels Shape:', test_labels.shape)\n\n# Instantiate model with 1000 decision trees\n\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 42)# Train the model on training data\nrf.fit(train_features, train_labels);\n\n# Use the forest's predict method on the test data\npredictions = rf.predict(test_features)# Calculate the absolute errors\nerrors = accuracy_score(test_labels, predictions)\nprint(errors)","f4827eaf":"# Making a submission here\ny_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ny_data['Age'] = y_data['Age'].fillna(y_data['Age'].mean()).astype(int)\n\ny_data['familyPresent'] = np.where( (y_data['Parch'] > 0) | (y_data['SibSp'] > 0)  , '1', '0')\n\ny_data = y_data.drop('Name', axis=1)\ny_data = y_data.drop('Cabin', axis=1)\ny_data = y_data.drop('Ticket', axis=1)\ny_data = y_data.dropna()\n\n#Get features and labels\nfeatures_y = y_data\nfeature_list = list(features.columns)\n\n#One hot encoding \nfeatures_y = pd.get_dummies(features_y)\n\npredictions_y = rf.predict(features_y)# Calculate the absolute errors\n\npredictationsFrame = pd.DataFrame(data=predictions_y)\n\n# Get ID and Predictions\nframes = [y_data['PassengerId'], predictationsFrame] \n  \nresult = pd.concat(frames, axis=1) \nresult.columns = ['PassengerId', 'Survived']\ndisplay(result) #Drop rows with empty results\n\nresult.to_csv('\/kaggle\/working\/submission3.csv')","b5505cda":"# Approaching Titanic with caution\n1. I will first start off with an  EDA \n2. Any other questions will be done using my own experiments and scripts\n3. Finish off with an appropiate model"}}