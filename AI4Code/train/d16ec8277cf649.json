{"cell_type":{"82ffcc4e":"code","4840cf07":"code","5e225e4f":"code","7d9fefa7":"code","e27b4cd1":"code","4fdd805f":"code","40148f22":"code","20b275b2":"code","754eef28":"code","ef293fd0":"code","7f52a23f":"code","3c9c3b4f":"code","20a3f5ea":"code","e05603cf":"code","c41c8637":"markdown"},"source":{"82ffcc4e":"#import the libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns ","4840cf07":"df=pd.read_csv(\"..\/input\/Mall_Customers.csv\")\ndf.head(10)","5e225e4f":"# rename the columns for easy use\ndf.rename(columns={'Annual Income (k$)':'annualIncome','Spending Score (1-100)':'spendingScore'},inplace=True)\ndf.columns","7d9fefa7":"# total rows and colums\ndf.shape","e27b4cd1":"# Check any null or not\ndf.isnull().sum()","4fdd805f":"# Age group and number of customers in particular group\nage10_20=df.Age[(df.Age>=10) & (df.Age<=20)].values\nage21_30=df.Age[(df.Age>20) & (df.Age<=30)].values\nage31_40=df.Age[(df.Age>30) & (df.Age<=40)].values\nage41_50=df.Age[(df.Age>40) & (df.Age<=50)].values\nage51_60=df.Age[(df.Age>50) & (df.Age<=60)].values\nage60above=df.Age[(df.Age>60)].values\n\nx = [\"10-20\",\"21-30\",\"31-40\",\"41-50\",\"51-60\",\"60+\"]\ny = [len(age10_20),len(age21_30),len(age31_40),len(age41_50),len(age51_60),len(age60above)]\n\nplt.figure(figsize=(10,5))\nsns.barplot(x=x, y=y, palette=\"rocket\")\nplt.title(\"Number of Customer and Ages\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Number of Customer\")\nplt.show()","40148f22":"# Income group and number customers in particular group\ninc0_25=df.annualIncome[(df.annualIncome>=0) & (df.annualIncome<=25)].values\ninc26_50=df.annualIncome[(df.annualIncome>25) & (df.annualIncome<=50)].values\ninc51_75=df.annualIncome[(df.annualIncome>50) & (df.annualIncome<=75)].values\ninc76_100=df.annualIncome[(df.annualIncome>75) & (df.annualIncome<=100)].values\ninc101_125=df.annualIncome[(df.annualIncome>100) & (df.annualIncome<=125)].values\ninc126_150=df.annualIncome[(df.annualIncome>125) & (df.annualIncome<=150)].values\ninc150Above=df.annualIncome[(df.annualIncome>150)].values\n\nx = [\"$ 0-25,000\",\"$ 25,001-50,000\",\"$ 50,001-75,000\",\"$ 75,001-1,00,000\",\"$ 1,00,001-1,25,000\",\"$ 1,25,001-1,50,000\",\"$ 1,50,000 +\"]\ny = [len(inc0_25),len(inc26_50),len(inc51_75),len(inc76_100),len(inc101_125),len(inc126_150),len(inc150Above)]\n\nplt.figure(figsize=(15,6))\nsns.barplot(x=x, y=y, palette=\"Set2\")\nplt.title(\"Annual Incomes\")\nplt.xlabel(\"Income\")\nplt.ylabel(\"Number of Customer\")\nplt.show()","20b275b2":"# Male Annual Income and Spending Scores\nmaleInc=df[df['Gender']=='Male'].annualIncome.values # (.values) give in array form\nmaleSpend=df[df['Gender']=='Male'].spendingScore.values # (.values) give in array form\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.title('Annual Income & Spending Score of Males', fontsize=15)\nplt.scatter(maleInc,maleSpend)\nplt.show()","754eef28":"# Female Annual Income and Spending Scores\nfemaleInc=df[df['Gender']=='Female'].annualIncome.values\nfemaleSpend=df[df['Gender']=='Female'].spendingScore.values\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.title('Annual Income & Spending Score of Females', fontsize=15)\nplt.scatter(femaleInc,femaleSpend)\nplt.show()","ef293fd0":"# Considering only 2 features (Annual income and Spending Score)\nX=df[['annualIncome','spendingScore']].values","7f52a23f":"# Building the Model\n# KMeans Algorithm to decide the optimum cluster number , KMeans++ using Elbow Mmethod\nfrom sklearn.cluster import KMeans\nwcss=[]\n\n# range(1,30) is random selection because in our dataset there may not be more than 30 cluster (assumption)\nfor i in range(1,30):\n    kmeans = KMeans(n_clusters= i, init='k-means++', random_state=0)\n    kmeans.fit(X)\n    wcss.append(kmeans.inertia_)","3c9c3b4f":"#Visualizing the ELBOW method to get the optimal value of K \nplt.plot(range(1,30), wcss)\nplt.title('The Elbow Method')\nplt.xlabel('no of clusters')\nplt.ylabel('wcss')\nplt.show()","20a3f5ea":"# From Elbow method ,we got that k=5\n# Model Build\nkmeansmodel = KMeans(n_clusters= 5, init='k-means++', random_state=0)\ny_kmeans= kmeansmodel.fit_predict(X)","e05603cf":"#Visualizing all the clusters \n\nplt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'red', label = 'Cluster 1')\nplt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')\nplt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100, c = 'green', label = 'Cluster 3')\nplt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')\nplt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')\nplt.title('Clusters of customers')\nplt.xlabel('Annual Income (k$)')\nplt.ylabel('Spending Score (1-100)')\nplt.legend()\nplt.show()","c41c8637":"##### Model Interpretation \n###### Cluster 1 (Red Color) -> earning high but spending less\n###### Cluster 2 (Blue Color) -> average in terms of earning and spending \n###### Cluster 3 (Green Color) -> earning high and also spending high [TARGET SET]\n###### Cluster 4 (cyan Color) -> earning less but spending more\n###### Cluster 5 (magenta Color) -> Earning less , spending less\n\n##### We can put Cluster 3 into some alerting system where email can be send to them on daily basis"}}