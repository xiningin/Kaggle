{"cell_type":{"a42f45a7":"code","464d62ff":"code","7db25620":"code","60a26645":"code","6d609dc3":"markdown","3906638b":"markdown","43f104b7":"markdown","8ec023ff":"markdown"},"source":{"a42f45a7":"# Clear any logs from previous runs\n!rm -rf .\/logs\/ \n!mkdir .\/logs\/","464d62ff":"# From Github Gist: https:\/\/gist.github.com\/hantoine\/4e7c5bc6748861968e61e60bab89e9b0\nfrom urllib.request import urlopen\nfrom io import BytesIO\nfrom zipfile import ZipFile\nfrom subprocess import Popen\nfrom os import chmod\nfrom os.path import isfile\nimport json\nimport time\nimport psutil\n\ndef launch_tensorboard():\n    tb_process, ngrok_process = None, None\n    \n    # Launch TensorBoard\n    if not is_process_running('tensorboard'):\n        tb_command = 'tensorboard --logdir .\/logs\/ --host 0.0.0.0 --port 6006'\n        tb_process = run_cmd_async_unsafe(tb_command)\n    \n    # Install ngrok\n    if not isfile('.\/ngrok'):\n        ngrok_url = 'https:\/\/bin.equinox.io\/c\/4VmDzA7iaHb\/ngrok-stable-linux-amd64.zip'\n        download_and_unzip(ngrok_url)\n        chmod('.\/ngrok', 0o755)\n\n    # Create ngrok tunnel and print its public URL\n    if not is_process_running('ngrok'):\n        ngrok_process = run_cmd_async_unsafe('.\/ngrok http 6006')\n        time.sleep(1) # Waiting for ngrok to start the tunnel\n    ngrok_api_res = urlopen('http:\/\/127.0.0.1:4040\/api\/tunnels', timeout=10)\n    ngrok_api_res = json.load(ngrok_api_res)\n    assert len(ngrok_api_res['tunnels']) > 0, 'ngrok tunnel not found'\n    tb_public_url = ngrok_api_res['tunnels'][0]['public_url']\n    print(f'TensorBoard URL: {tb_public_url}')\n\n    return tb_process, ngrok_process\n\n\ndef download_and_unzip(url, extract_to='.'):\n    http_response = urlopen(url)\n    zipfile = ZipFile(BytesIO(http_response.read()))\n    zipfile.extractall(path=extract_to)\n\n\ndef run_cmd_async_unsafe(cmd):\n    return Popen(cmd, shell=True)\n\n\ndef is_process_running(process_name):\n    running_process_names = (proc.name() for proc in psutil.process_iter())\n    return process_name in running_process_names\n\n\ntb_process, ngrok_process = launch_tensorboard()","7db25620":"import tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train \/ 255.0, x_test \/ 255.0\n\ndef create_model():\n    return tf.keras.models.Sequential([\n        tf.keras.layers.Flatten(input_shape=(28, 28)),\n        tf.keras.layers.Dense(512, activation='relu'),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ])","60a26645":"import datetime\nmodel = create_model()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nlog_dir = \"logs\/fit\/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nmodel.fit(x=x_train, \n          y=y_train, \n          epochs=10, \n          validation_data=(x_test, y_test), \n          callbacks=[tensorboard_callback])","6d609dc3":"# Create and train model\n\nWe will train a basic neural network on MNIST to check that the learning curves appear on TensorBoard.","3906638b":"# Tensorboard on Kaggle","43f104b7":"While training, come back to the TensorBoard tab, after refreshing, you should be able to see the learning curves","8ec023ff":"# Launch TensorBoard\n\nThe following cell will launch TensorBoard and print the link to access it using an ngrok tunnel.  \nClick on the link to open TensorBoard in a new tab"}}