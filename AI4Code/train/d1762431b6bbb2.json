{"cell_type":{"66f994da":"code","c51bb641":"code","be6f568f":"code","222ecf56":"code","44a8b11d":"code","88db8db1":"code","67e0c36f":"code","0101b0e2":"code","6efb7f3e":"code","e4adc4a5":"code","c8286712":"code","8df4948f":"code","2db503d1":"code","c58f7077":"code","d3dc568b":"code","51f6a7c6":"code","592e86a4":"code","bfd2c6cb":"code","2845d5cb":"code","4743287f":"code","67f7d21a":"code","42ac58bb":"code","8aa338b6":"code","5ea2dd80":"code","c8ddb670":"code","1626942f":"code","675f6ba8":"code","6c43b22c":"code","722c0423":"code","b8ff31ea":"code","177bd345":"code","c43b540f":"code","a59f7567":"code","cc0fa1a0":"code","522c6bca":"code","858bb8cd":"markdown","a435c887":"markdown","1175716e":"markdown","718c028b":"markdown","774ed4f1":"markdown","3ee15e9e":"markdown","039df5d5":"markdown","05857097":"markdown","2d643698":"markdown","3e21f1f9":"markdown","a051b42d":"markdown","b9a69541":"markdown","8977788b":"markdown","84155aa8":"markdown","84947000":"markdown","838bdc8c":"markdown","61b9b128":"markdown","448d9ef6":"markdown","5a918966":"markdown","9feff1dd":"markdown","18cda696":"markdown"},"source":{"66f994da":"import json\nfrom functools import partial\nimport ast\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib import collections  as mc\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","c51bb641":"hex_df = pd.read_csv('..\/input\/train_simplified\/hexagon.csv')\nhex_df['drawing'] = hex_df['drawing'].apply(ast.literal_eval)","be6f568f":"hex_df.head()","222ecf56":"hex_df.loc[0, 'drawing']","44a8b11d":"def to_line_collection(stroke):\n    points = list(zip(stroke[0], [255 - x for x in stroke[1]]))\n    lc = [[points[i], points[i + 1]] for i in range(len(points) - 1)]\n    return mc.LineCollection(lc, linewidth=2)","88db8db1":"def visualise_drawing(drawing, ax):\n    for stroke in drawing:\n        ax.add_collection(to_line_collection(stroke))\n    ax.autoscale()\n    return ax","67e0c36f":"f, ax = plt.subplots(2, 5, figsize=(16, 6))\nfor i in range(10):\n    visualise_drawing(hex_df.loc[i, 'drawing'], ax=ax[i\/\/5, i%5])\n    ax[i\/\/5, i%5].axis('off')\nplt.show()","0101b0e2":"def invert_y(strokes):\n    strokes[:, 1] = 255 - strokes[:, 1]\n    return strokes\n\ndef decompose_drawing(drawing):\n    strokes = [invert_y(np.array(stroke).T) for stroke in drawing]\n    return strokes","6efb7f3e":"def relative_turn_distance(three_points):\n    vector_1 = three_points[1, :] - three_points[0, :]\n    vector_2 = three_points[2, :] - three_points[1, :]\n    distance = np.cross(vector_1, vector_2) \/ (np.linalg.norm(vector_1) * np.linalg.norm(vector_2))\n    return distance if not np.isnan(distance) else 0.","e4adc4a5":"def stroke_relative_turn_distance(stroke):\n    if stroke.shape[0] < 3:\n        distance = 0\n    else:\n        distance = np.sum([relative_turn_distance(stroke[start: start + 3, :]) for start in range(0, stroke.shape[0] - 2)])\n    return distance","c8286712":"def drawing_relative_turn_distance(drawing, connect=False):\n    strokes = decompose_drawing(drawing)\n    if connect:\n        distance = stroke_relative_turn_distance(np.concatenate(strokes, axis=0))\n    else:\n        distance = np.sum([stroke_relative_turn_distance(stroke) for stroke in strokes])\n    return distance","8df4948f":"# per_stroke_score = hex_df['drawing'].apply(partial(drawing_relative_turn_distance, connect=False))\nper_drawing_score = hex_df['drawing'].apply(partial(drawing_relative_turn_distance, connect=True))","2db503d1":"# hex_df['sum_per_stroke_score'] = per_stroke_score\nhex_df['score'] = per_drawing_score","c58f7077":"hex_df.head()","d3dc568b":"f, ax = plt.subplots(2, 5, figsize=(16, 6))\nordered_subset = hex_df.sort_values('score').iloc[:5, :]\nfor i, drawing in enumerate(ordered_subset['drawing']):\n    visualise_drawing(drawing, ax=ax[0, i])\n    ax[0, i].axis('off')\nordered_subset = hex_df.sort_values('score').iloc[-5:, :]\nfor i, drawing in enumerate(ordered_subset['drawing']):\n    visualise_drawing(drawing, ax=ax[1, i])\n    ax[1, i].axis('off')\nplt.show()","51f6a7c6":"hex_df.describe()","592e86a4":"f, ax = plt.subplots(2, 5, figsize=(16, 6))\ntemp = hex_df.copy()\ntemp['dev'] = np.abs(temp['score'] - temp['score'].median())\nordered_subset = temp.sort_values('dev', ascending=True).iloc[:10, :]\nfor i, drawing in enumerate(ordered_subset['drawing']):\n    visualise_drawing(drawing, ax=ax[i\/\/5, i%5])\n    ax[i\/\/5, i%5].axis('off')\nplt.show()","bfd2c6cb":"country_codes = '''\nCountry Name;ISO 3166-1-alpha-2 code\nAFGHANISTAN;AF\n\u00c5LAND ISLANDS;AX\nALBANIA;AL\nALGERIA;DZ\nAMERICAN SAMOA;AS\nANDORRA;AD\nANGOLA;AO\nANGUILLA;AI\nANTARCTICA;AQ\nANTIGUA AND BARBUDA;AG\nARGENTINA;AR\nARMENIA;AM\nARUBA;AW\nAUSTRALIA;AU\nAUSTRIA;AT\nAZERBAIJAN;AZ\nBAHAMAS;BS\nBAHRAIN;BH\nBANGLADESH;BD\nBARBADOS;BB\nBELARUS;BY\nBELGIUM;BE\nBELIZE;BZ\nBENIN;BJ\nBERMUDA;BM\nBHUTAN;BT\nBOLIVIA, PLURINATIONAL STATE OF;BO\nBONAIRE, SINT EUSTATIUS AND SABA;BQ\nBOSNIA AND HERZEGOVINA;BA\nBOTSWANA;BW\nBOUVET ISLAND;BV\nBRAZIL;BR\nBRITISH INDIAN OCEAN TERRITORY;IO\nBRUNEI DARUSSALAM;BN\nBULGARIA;BG\nBURKINA FASO;BF\nBURUNDI;BI\nCAMBODIA;KH\nCAMEROON;CM\nCANADA;CA\nCAPE VERDE;CV\nCAYMAN ISLANDS;KY\nCENTRAL AFRICAN REPUBLIC;CF\nCHAD;TD\nCHILE;CL\nCHINA;CN\nCHRISTMAS ISLAND;CX\nCOCOS (KEELING) ISLANDS;CC\nCOLOMBIA;CO\nCOMOROS;KM\nCONGO;CG\nCONGO, THE DEMOCRATIC REPUBLIC OF THE;CD\nCOOK ISLANDS;CK\nCOSTA RICA;CR\nC\u00d4TE D'IVOIRE;CI\nCROATIA;HR\nCUBA;CU\nCURA\u00c7AO;CW\nCYPRUS;CY\nCZECH REPUBLIC;CZ\nDENMARK;DK\nDJIBOUTI;DJ\nDOMINICA;DM\nDOMINICAN REPUBLIC;DO\nECUADOR;EC\nEGYPT;EG\nEL SALVADOR;SV\nEQUATORIAL GUINEA;GQ\nERITREA;ER\nESTONIA;EE\nETHIOPIA;ET\nFALKLAND ISLANDS (MALVINAS);FK\nFAROE ISLANDS;FO\nFIJI;FJ\nFINLAND;FI\nFRANCE;FR\nFRENCH GUIANA;GF\nFRENCH POLYNESIA;PF\nFRENCH SOUTHERN TERRITORIES;TF\nGABON;GA\nGAMBIA;GM\nGEORGIA;GE\nGERMANY;DE\nGHANA;GH\nGIBRALTAR;GI\nGREECE;GR\nGREENLAND;GL\nGRENADA;GD\nGUADELOUPE;GP\nGUAM;GU\nGUATEMALA;GT\nGUERNSEY;GG\nGUINEA;GN\nGUINEA-BISSAU;GW\nGUYANA;GY\nHAITI;HT\nHEARD ISLAND AND MCDONALD ISLANDS;HM\nHOLY SEE (VATICAN CITY STATE);VA\nHONDURAS;HN\nHONG KONG;HK\nHUNGARY;HU\nICELAND;IS\nINDIA;IN\nINDONESIA;ID\nIRAN, ISLAMIC REPUBLIC OF;IR\nIRAQ;IQ\nIRELAND;IE\nISLE OF MAN;IM\nISRAEL;IL\nITALY;IT\nJAMAICA;JM\nJAPAN;JP\nJERSEY;JE\nJORDAN;JO\nKAZAKHSTAN;KZ\nKENYA;KE\nKIRIBATI;KI\nKOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF;KP\nKOREA, REPUBLIC OF;KR\nKUWAIT;KW\nKYRGYZSTAN;KG\nLAO PEOPLE'S DEMOCRATIC REPUBLIC;LA\nLATVIA;LV\nLEBANON;LB\nLESOTHO;LS\nLIBERIA;LR\nLIBYA;LY\nLIECHTENSTEIN;LI\nLITHUANIA;LT\nLUXEMBOURG;LU\nMACAO;MO\nMACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF;MK\nMADAGASCAR;MG\nMALAWI;MW\nMALAYSIA;MY\nMALDIVES;MV\nMALI;ML\nMALTA;MT\nMARSHALL ISLANDS;MH\nMARTINIQUE;MQ\nMAURITANIA;MR\nMAURITIUS;MU\nMAYOTTE;YT\nMEXICO;MX\nMICRONESIA, FEDERATED STATES OF;FM\nMOLDOVA, REPUBLIC OF;MD\nMONACO;MC\nMONGOLIA;MN\nMONTENEGRO;ME\nMONTSERRAT;MS\nMOROCCO;MA\nMOZAMBIQUE;MZ\nMYANMAR;MM\nNAMIBIA;NA\nNAURU;NR\nNEPAL;NP\nNETHERLANDS;NL\nNEW CALEDONIA;NC\nNEW ZEALAND;NZ\nNICARAGUA;NI\nNIGER;NE\nNIGERIA;NG\nNIUE;NU\nNORFOLK ISLAND;NF\nNORTHERN MARIANA ISLANDS;MP\nNORWAY;NO\nOMAN;OM\nPAKISTAN;PK\nPALAU;PW\nPALESTINE, STATE OF;PS\nPANAMA;PA\nPAPUA NEW GUINEA;PG\nPARAGUAY;PY\nPERU;PE\nPHILIPPINES;PH\nPITCAIRN;PN\nPOLAND;PL\nPORTUGAL;PT\nPUERTO RICO;PR\nQATAR;QA\nR\u00c9UNION;RE\nROMANIA;RO\nRUSSIAN FEDERATION;RU\nRWANDA;RW\nSAINT BARTH\u00c9LEMY;BL\nSAINT HELENA, ASCENSION AND TRISTAN DA CUNHA;SH\nSAINT KITTS AND NEVIS;KN\nSAINT LUCIA;LC\nSAINT MARTIN (FRENCH PART);MF\nSAINT PIERRE AND MIQUELON;PM\nSAINT VINCENT AND THE GRENADINES;VC\nSAMOA;WS\nSAN MARINO;SM\nSAO TOME AND PRINCIPE;ST\nSAUDI ARABIA;SA\nSENEGAL;SN\nSERBIA;RS\nSEYCHELLES;SC\nSIERRA LEONE;SL\nSINGAPORE;SG\nSINT MAARTEN (DUTCH PART);SX\nSLOVAKIA;SK\nSLOVENIA;SI\nSOLOMON ISLANDS;SB\nSOMALIA;SO\nSOUTH AFRICA;ZA\nSOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS;GS\nSOUTH SUDAN;SS\nSPAIN;ES\nSRI LANKA;LK\nSUDAN;SD\nSURINAME;SR\nSVALBARD AND JAN MAYEN;SJ\nSWAZILAND;SZ\nSWEDEN;SE\nSWITZERLAND;CH\nSYRIAN ARAB REPUBLIC;SY\nTAIWAN;TW\nTAJIKISTAN;TJ\nTANZANIA, UNITED REPUBLIC OF;TZ\nTHAILAND;TH\nTIMOR-LESTE;TL\nTOGO;TG\nTOKELAU;TK\nTONGA;TO\nTRINIDAD AND TOBAGO;TT\nTUNISIA;TN\nTURKEY;TR\nTURKMENISTAN;TM\nTURKS AND CAICOS ISLANDS;TC\nTUVALU;TV\nUGANDA;UG\nUKRAINE;UA\nUNITED ARAB EMIRATES;AE\nUNITED KINGDOM;GB\nUNITED STATES;US\nUNITED STATES MINOR OUTLYING ISLANDS;UM\nURUGUAY;UY\nUZBEKISTAN;UZ\nVANUATU;VU\nVENEZUELA, BOLIVARIAN REPUBLIC OF;VE\nVIET NAM;VN\nVIRGIN ISLANDS, BRITISH;VG\nVIRGIN ISLANDS, U.S.;VI\nWALLIS AND FUTUNA;WF\nWESTERN SAHARA;EH\nYEMEN;YE\nZAMBIA;ZM\nZIMBABWE;ZW\n'''\nfrom io import StringIO\ncountry_codes_df = pd.read_csv(StringIO(country_codes), sep=';')\ncountry_codes_df.columns = ['countryname', 'countrycode']","2845d5cb":"country_codes_df.head()","4743287f":"hex_df = pd.merge(hex_df, country_codes_df, on='countrycode', how='left')\ntop_countries = hex_df['countrycode'].value_counts()","67f7d21a":"f, ax = plt.subplots(figsize=(14, 14))\nsubset = hex_df[hex_df['countrycode'].isin(top_countries.index[:40]) & (np.abs(hex_df['score'] < 10))]\nsub_order = subset.groupby('countryname')['score'].mean().sort_values().index\nsns.barplot(data=subset, y='countryname', x='score', order=sub_order)\nplt.show()","42ac58bb":"circle_df = pd.read_csv('..\/input\/train_simplified\/circle.csv')\ncircle_df['drawing'] = circle_df['drawing'].apply(ast.literal_eval)","8aa338b6":"f, ax = plt.subplots(2, 5, figsize=(16, 6))\nfor i in range(10):\n    visualise_drawing(circle_df.loc[i, 'drawing'], ax=ax[i\/\/5, i%5])\n    ax[i\/\/5, i%5].axis('off')\nplt.show()","5ea2dd80":"circle_df['score'] = circle_df['drawing'].apply(partial(drawing_relative_turn_distance, connect=True))\ncircle_df = pd.merge(circle_df, country_codes_df, on='countrycode', how='left')\ntop_countries = circle_df['countrycode'].value_counts()","c8ddb670":"f, ax = plt.subplots(figsize=(14, 14))\nsubset = circle_df[circle_df['countrycode'].isin(top_countries.index[:40]) & (np.abs(circle_df['score'] < 10))]\nsub_order = subset.groupby('countryname')['score'].mean().sort_values().index\nsns.barplot(data=subset, y='countryname', x='score', order=sub_order)\nplt.show()","1626942f":"square_df = pd.read_csv('..\/input\/train_simplified\/square.csv')\nsquare_df['drawing'] = square_df['drawing'].apply(ast.literal_eval)\n\nf, ax = plt.subplots(2, 5, figsize=(16, 6))\nfor i in range(10):\n    visualise_drawing(square_df.loc[i, 'drawing'], ax=ax[i\/\/5, i%5])\n    ax[i\/\/5, i%5].axis('off')\nplt.show()","675f6ba8":"square_df['score'] = square_df['drawing'].apply(partial(drawing_relative_turn_distance, connect=True))\nsquare_df = pd.merge(square_df, country_codes_df, on='countrycode', how='left')\ntop_countries = square_df['countrycode'].value_counts()","6c43b22c":"f, ax = plt.subplots(figsize=(14, 14))\nsubset = square_df[square_df['countrycode'].isin(top_countries.index[:40]) & (np.abs(square_df['score'] < 10))]\nsub_order = subset.groupby('countryname')['score'].mean().sort_values().index\nsns.barplot(data=subset, y='countryname', x='score', order=sub_order)\nplt.show()","722c0423":"octagon_df = pd.read_csv('..\/input\/train_simplified\/octagon.csv')\noctagon_df['drawing'] = octagon_df['drawing'].apply(ast.literal_eval)\n\nf, ax = plt.subplots(2, 5, figsize=(16, 6))\nfor i in range(10):\n    visualise_drawing(octagon_df.loc[i, 'drawing'], ax=ax[i\/\/5, i%5])\n    ax[i\/\/5, i%5].axis('off')\nplt.show()","b8ff31ea":"octagon_df['score'] = octagon_df['drawing'].apply(partial(drawing_relative_turn_distance, connect=False))\noctagon_df = pd.merge(octagon_df, country_codes_df, on='countrycode', how='left')\ntop_countries = octagon_df['countrycode'].value_counts()","177bd345":"f, ax = plt.subplots(figsize=(14, 14))\nsubset = octagon_df[octagon_df['countrycode'].isin(top_countries.index[:40]) & (np.abs(octagon_df['score'] < 10))]\nsub_order = subset.groupby('countryname')['score'].mean().sort_values().index\nsns.barplot(data=subset, y='countryname', x='score', order=sub_order)\nplt.show()","c43b540f":"dfs = [square_df, hex_df, octagon_df, circle_df]\ncombined = pd.concat(dfs, axis=0, sort=False)\ncombined['n_segs'] = combined['drawing'].apply(lambda x: np.sum([len(s[0]) for s in x]))\ncombined['per_seg_score'] = combined['score'] \/ combined['n_segs']\ncombined.groupby('word')['n_segs'].describe()","a59f7567":"combined.groupby('word')['score'].describe()","cc0fa1a0":"f, ax = plt.subplots(figsize=(14, 10))\nfor word in combined['word'].unique():\n    sns.kdeplot(data=combined[(combined['word'] == word) & (np.abs(combined['score']) < 10)]['score'], ax=ax, label=word)\nax.set_xlabel('counterclockwiseness score')\nplt.show()","522c6bca":"f, ax = plt.subplots(figsize=(14, 10))\nfor word in combined['word'].unique():\n    sns.kdeplot(data=combined[(combined['word'] == word) & (np.abs(combined['per_seg_score']) < 2)]['per_seg_score'], ax=ax, label=word)\nax.set_xlabel('counterclockwiseness score per segment')\nplt.show()","858bb8cd":"Let us first visualise a few examples from the hexagon drawings to see what a typical sketch looks like.","a435c887":"Here we see the results for squares. Japan is not the odd one out this time, but we see an interesting pattern here. While most users draw a square counterclockwise, people from European countries are more likely to do so, whereas shapes drawn by Asian users (including Indian and Middle Eastern) seem less likely so. Maybe people from different parts of the world just have specific preferences for each of the common shapes. What about a less common shape like an octagon?","1175716e":"Now let us look at the drawings that are closest to the median score of the drawings. As we see below, having a median score for the 'counterclockwiseness' does not necessarily mean having a drawing closest to a standard shape.","718c028b":"## Octagon:","774ed4f1":"When performing the sum of scores for each drawing, we can treat each strokes separately or treat then as if they were chained to each other head to tail (so the change in position from stroke 1 to stroke 2 is also considered a line segment for the purpose of the analysis). We will mainly be doing our analysis using the 'chained' approach, but the analysis using 'per stoke' produces similar results.","3ee15e9e":"What a surprise! While we see that most user around the world draw a hexagon clockwise (negative score), the average user from Japan actually draws the shape counterclockwise. Also, two nearby countries, Thailand and Viet Nam, share the top two spots on the clockwiseness scale. We do havr to take into account sample size though, as these two countries' score have a rather high variance.","039df5d5":"Let us get back to our original question. Can we expect to observe different patterns from different parts of the world in terms of drawing counterclockwiseness?","05857097":"Look at the samples above. Looks like quite a few users have no idea what an octagon looks like!","2d643698":"#### Define clockwise \/ counterclockwise stroke\nNow we need to find a measure for 'counterclockwiseness'. How do we analyse something so abstract? Intuitively, we know that something goes clockwise if it keeps turning right, and counterclockwise if it keeps going left. Therefore, it would be a good start to compare each segment in a stroke to see if it is going left or right compared to the last segment. To do so, we need to separate segments from a stroke and compare the angles between consecutive segments. However, the angle alone would likely not help us much, as we will then only be counting how many 'loops' there are in the curves drawn, regardless of whether it is a tiny turn, a minor jitter or an entire cirlce around the drawing area. We need to take into account the relative lengths of each line segments. For each turn, we need to know how much it turned left or right compared to the last line segment. The sine of the turn angle is a good candidate for this, as it can be interpreted as the sideways component of the second segment divided by the length of the first segment. It is still not perfect (e.g. a small turn has the same score as a large turn if the length proportions are the same), but it has a few nice properties, such as:\n\n* It can be both positive and negative, and when summed up, equivalent turns in opposite directions cancel each other out\n* It is resistant to tiny jitters, so a brief change in stroke direction will not greatly impact the net score\n* It is bounded between -1 and 1, so one single turn cannot dominate the score of the whole drawing\n\nTo put it simply, **postitive score -> counterclockwise preference, negative score -> clockwise preference**.\n\nHere we calculate the sine score for each turn in the drawings, then sum up the scores by drawings.","3e21f1f9":"## Finally, let us compre the four shapes:","a051b42d":"Let us first look at the most 'unusual' drawings based on the score, from both end of the scale:","b9a69541":"As we see, the most extreme cases are typically random drawings that do not make much sense, so it is likely safe to exclude the most extreme cases in our analysis later. As we see below, most of the score values fall between -5 and 5.","8977788b":"When asked to draw a simple shape, do you usually draw it clockwise or counterclockwise? Does it depend on the shape in question? Does it depend on your cultural background? These are the questions we rarely ask ourselves, but can potentially lead to interesting discoveries. Maybe before reading this notebook, try this yourself. Draw a circle, square and hexagon each, and see instinctively, which direction your hand is going, and then find out below if you draw the same way the majority of people from your region do.\n\nTo determine how people from different parts of the world draw simple shapes, we will be using the QuickDraw dataset, which is a collection of various simple shapes people drew online when asked to do a sketch of a given object. Here we are most interested in how people draw the most basic shapes (circle, square, hexagon). The dataset includes the country code of the user as an attribute, allowing us to perform some geography \/ culture-based analysis on our results.\n\nThe goal of our analysis is to find out if there are any differences in the direction people draw simple shapes around the world. To do so, we will have to come up with a measure of 'counterclockwiseness' for each of the sktches in the dataset. But first, let us look at in what format the drawings appear in the dataset. Let us load the hexagon drawings first:","84155aa8":"We see from below that the drawings are stored as lists of continous strokes, where each stroke is further broken down into line segments and stored as [(x1, x2, x3,...), (y1, y2, y3...)]. We have to remember that image coordinates are different from typical coordinate systems in that the y axis points downwards (so (1, 1) is at the top left corner not bottom left corner). It is easier to process and visualise the data if we convert it to the ordinary coordinate format by setting y = 255 - y.","84947000":"Here we can more clearly see the bimodal \/ trimodal patterns. As most of the shapes drawn complete a full turn from start to finish, as expected, we see similar (absolute) values of the most typical score per segment for all of the shapes.","838bdc8c":"## Circles:","61b9b128":"## Hexagons:","448d9ef6":"## Squares:","5a918966":"We see a much more random pattern here. It looks like the strong preferences only exist for simpler shapes that are drawn often. When it comes to less common shapes, the direction of drawing is less determined by the user's location and the variance in personal perferences become larger.","9feff1dd":"Another purprise! This time, most users around the world tend to draw circles counterclockwise, except Taiwan and (again!) Japan, whose user typically draw it clockwise. We noticed that even for simple shapes like hexagon and circles, the type of the shape still has an impact on the usual direction people draw them. What about other polygons? Are they more like hexagons or are they more like circles? Which of the two shapes above is the norm and which is the exception, or is it just different for each individual shape?\n\nWe also learned that at least for the two tasks above, the Japanese users always do things differently. I wonder why.","18cda696":"We see the distributions of counterclockwiseness for each of the shapes above. We see that for almost of them, there is a divide between the clockwise users vs counterclockwise users, as seen by the bimodal shape of the distributions. However, octagons, we actually see a *trimodal* pattern, with a significant number of drawings showing no particular direction preference. Do people actually draw from both sides and meet in the middle?\n\nThe distibutions of different shapes are slightly shifted away from each other due to the different number of segments for different shapes. If we adjust for number of segments, we see the distribution below:"}}