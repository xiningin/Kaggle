{"cell_type":{"5ed53806":"code","7b5b970e":"code","bc8af218":"code","b72d7c2d":"code","8d62640a":"code","b564c552":"code","c647cfe6":"code","fa5157c8":"code","08da934c":"code","7e1cd7e1":"code","0c43e226":"code","7b9bde3c":"code","09880b11":"code","bb56be92":"code","89b6c7be":"code","58fe9ecd":"code","04fb2920":"code","b3a6799c":"code","671590af":"code","6e6b0138":"code","f88f6c42":"code","c81d87c8":"code","7a3a6409":"code","ddf2bd96":"code","94eea10a":"code","70f049ed":"code","dd8e921b":"code","d2c0eaab":"code","8b54467c":"code","419edb34":"code","e5a8d506":"code","49fedfad":"code","0b0bb07b":"code","50f65bdb":"code","48fbd2bd":"code","9ad479af":"code","5b9e6034":"code","a2296321":"code","b6f72d00":"code","ffd52cf3":"code","153f703a":"code","65145283":"code","ff941cf2":"code","e17ce7df":"code","8cc5c10c":"code","b0bbe95b":"code","5b27360a":"code","c1415932":"code","d8348b4b":"code","91088b42":"code","fb9d2319":"code","41c227ab":"code","006ae1aa":"code","76c46c7e":"code","cc879cc6":"code","cee9d99f":"code","8624fa91":"code","69ce8929":"markdown","df197538":"markdown"},"source":{"5ed53806":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nfrom sklearn.metrics import confusion_matrix\nimport pandas as pd\nimport numpy as np\nimport math \nimport xgboost as xgb\nnp.random.seed(2019)\nfrom scipy.stats import skew\nfrom scipy import stats\n\nimport statsmodels\nfrom sklearn.metrics import accuracy_score\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nprint(\"done\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\ndef read_and_concat_dataset(training_path, test_path):\n    train = pd.read_csv(training_path)\n    train['train'] = 1\n    test = pd.read_csv(test_path)\n    test['train'] = 0\n    data = train.append(test, ignore_index=True)\n    return train, test, data\n\ntrain, test, data = read_and_concat_dataset('\/kaggle\/input\/titanic\/train.csv', '\/kaggle\/input\/titanic\/test.csv')\ndata = data.set_index('PassengerId')\n\n# Any results you write to the current directory are saved as output.","7b5b970e":"data.head(5)","bc8af218":"data.describe()","b72d7c2d":" g = sns.heatmap(data[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr(),annot=True, cmap = \"coolwarm\")","8d62640a":"def comparing(data,variable1, variable2):\n    print(data[[variable1, variable2]][data[variable2].isnull()==False].groupby([variable1], as_index=False).mean().sort_values(by=variable2, ascending=False))\n    g = sns.FacetGrid(data, col=variable2).map(sns.distplot, variable1)","b564c552":"def counting_values(data, variable1, variable2):\n    return data[[variable1, variable2]][data[variable2].isnull()==False].groupby([variable1], as_index=False).mean().sort_values(by=variable2, ascending=False)\ndef counting_values(data, variable1, variable2):\n    return data[[variable1, variable2]][data[variable2].isnull()==False].groupby([variable1], as_index=False).mean().sort_values(by=variable2, ascending=False)","c647cfe6":"comparing(data, 'Parch','Survived')","fa5157c8":"comparing(data, 'SibSp','Survived')","08da934c":"comparing(data, 'Fare','Survived')","7e1cd7e1":"comparing(data, 'Age','Survived')","0c43e226":"counting_values(data, 'Sex','Survived')","7b9bde3c":"data['Women'] = np.where(data.Sex=='female',1,0)\ncomparing(data, 'Women','Survived')","09880b11":"comparing(data, 'Pclass','Survived')","bb56be92":"grid = sns.FacetGrid(data, col='Survived', row='Pclass', size=2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)","89b6c7be":"grid = sns.FacetGrid(data, row='Embarked', col='Survived', size=2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)","58fe9ecd":"data.isnull().sum()","04fb2920":"data.groupby('Pclass').Fare.mean()","b3a6799c":"data.Fare = data.Fare.fillna(0)","671590af":"print(data.Embarked.value_counts())\ndata.Embarked = data.Embarked.fillna('S')","6e6b0138":"data.Cabin = data.Cabin.fillna('Unknown_Cabin')\ndata['Cabin'] = data['Cabin'].str[0]","f88f6c42":"data.groupby('Pclass').Cabin.value_counts()","c81d87c8":"data['Cabin'] = np.where((data.Pclass==1) & (data.Cabin=='U'),'C',\n                                            np.where((data.Pclass==2) & (data.Cabin=='U'),'D',\n                                                                        np.where((data.Pclass==3) & (data.Cabin=='U'),'G',\n                                                                                                    np.where(data.Cabin=='T','C',data.Cabin))))","7a3a6409":"data['Title'] = data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n\npd.crosstab(data['Title'], data['Sex'])\ndata = data.drop('Name',axis=1)","ddf2bd96":"#let's replace a few titles -> \"other\" and fix a few titles\ndata['Title'] = np.where((data.Title=='Capt') | (data.Title=='Countess') | (data.Title=='Don') | (data.Title=='Dona')\n                        | (data.Title=='Jonkheer') | (data.Title=='Lady') | (data.Title=='Sir') | (data.Title=='Major') | (data.Title=='Rev') | (data.Title=='Col'),'Other',data.Title)\n\ndata['Title'] = data['Title'].replace('Ms','Miss')\ndata['Title'] = data['Title'].replace('Mlle','Miss')\ndata['Title'] = data['Title'].replace('Mme','Mrs')","94eea10a":"data[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\nfacet = sns.FacetGrid(data = data, hue = \"Title\", legend_out=True, size = 4.5)\nfacet = facet.map(sns.kdeplot, \"Age\")\nfacet.add_legend();","70f049ed":"sns.boxplot(data = data, x = \"Title\", y = \"Age\")","dd8e921b":"facet = sns.FacetGrid(data, hue=\"Survived\",aspect=3)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, data['Age'].max()))\nfacet.add_legend()","d2c0eaab":"data.groupby('Title').Age.mean()","8b54467c":"data['Age'] = np.where((data.Age.isnull()) & (data.Title=='Master'),5,\n                        np.where((data.Age.isnull()) & (data.Title=='Miss'),22,\n                                 np.where((data.Age.isnull()) & (data.Title=='Mr'),32,\n                                          np.where((data.Age.isnull()) & (data.Title=='Mrs'),37,\n                                                  np.where((data.Age.isnull()) & (data.Title=='Other'),45,\n                                                           np.where((data.Age.isnull()) & (data.Title=='Dr'),44,data.Age)))))) ","419edb34":"data['FamilySize'] = data.SibSp + data.Parch + 1\ndata['Mother'] = np.where((data.Title=='Mrs') & (data.Parch >0),1,0)\ndata['Free'] = np.where(data['Fare']==0, 1,0)\ndata = data.drop(['SibSp','Parch','Sex'],axis=1)","e5a8d506":"import string\nTypeOfTicket = []\nfor i in range(len(data.Ticket)):\n    ticket = data.Ticket.iloc[i]\n    for c in string.punctuation:\n                ticket = ticket.replace(c,\"\")\n                splited_ticket = ticket.split(\" \")   \n    if len(splited_ticket) == 1:\n                TypeOfTicket.append('NO')\n    else: \n                TypeOfTicket.append(splited_ticket[0])\n            \ndata['TypeOfTicket'] = TypeOfTicket\n\ndata.TypeOfTicket.value_counts()\ndata['TypeOfTicket'] = np.where((data.TypeOfTicket!='NO') & (data.TypeOfTicket!='PC') & (data.TypeOfTicket!='CA') & \n                                (data.TypeOfTicket!='A5') & (data.TypeOfTicket!='SOTONOQ'),'other',data.TypeOfTicket)\ndata = data.drop('Ticket',axis=1)","49fedfad":"comparing(data, 'FamilySize','Survived')","0b0bb07b":"counting_values(data, 'Title','Survived')","50f65bdb":"counting_values(data, 'TypeOfTicket','Survived')","48fbd2bd":"data[[\"Survived\",\"SibSp\",\"Parch\",\"Age\",\"Fare\"]].corr()","9ad479af":"counting_values(data, 'Cabin','Survived')","5b9e6034":"comparing(data, 'Mother','Survived')","a2296321":"\ncomparing(data, 'Free','Survived')","b6f72d00":"bins = [0,12,24,45,60,data.Age.max()]\nlabels = ['Child', 'Young Adult', 'Adult','Older Adult','Senior']\ndata[\"Age\"] = pd.cut(data[\"Age\"], bins, labels = labels)","ffd52cf3":"data = pd.get_dummies(data)","153f703a":"from sklearn.model_selection import train_test_split\ntrainX, testX, trainY, testY = train_test_split(data[data.Survived.isnull()==False].drop('Survived',axis=1),data.Survived[data.Survived.isnull()==False],test_size=0.30, random_state=2019)","65145283":"Results = pd.DataFrame({'Model': [],'Accuracy Score': [], 'Recall':[], 'F1score':[]})","ff941cf2":"from sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score","e17ce7df":"from sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier(max_depth=4)\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\nres = pd.DataFrame({\"Model\":['DecisionTreeClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred,testY)],\n                   \"Recall\": [recall_score(testY, y_pred)],\n                   \"F1score\": [f1_score(testY, y_pred)]})\nResults = Results.append(res)","8cc5c10c":"pd.crosstab(testY, y_pred, rownames=['Real data'], colnames=['Predicted'])","b0bbe95b":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=2500, max_depth=4)\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\nfrom sklearn.metrics import accuracy_score\nres = pd.DataFrame({\"Model\":['RandomForestClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred,testY)],\n                   \"Recall\": [recall_score(testY, y_pred)],\n                   \"F1score\": [f1_score(testY, y_pred)]})\nResults = Results.append(res)","5b27360a":"pd.crosstab(testY, y_pred, rownames=['Real data'], colnames=['Predicted'])","c1415932":"from sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\nfrom sklearn.metrics import accuracy_score\nres = pd.DataFrame({\"Model\":['KNeighborsClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred,testY)],\n                   \"Recall\": [recall_score(testY, y_pred)],\n                   \"F1score\": [f1_score(testY, y_pred)]})\nResults = Results.append(res)","d8348b4b":"pd.crosstab(testY, y_pred, rownames=['Real data'], colnames=['Predicted'])","91088b42":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\nfrom sklearn.metrics import accuracy_score\nres = pd.DataFrame({\"Model\":['SVC'],\n                    \"Accuracy Score\": [accuracy_score(y_pred,testY)],\n                   \"Recall\": [recall_score(testY, y_pred)],\n                   \"F1score\": [f1_score(testY, y_pred)]})\nResults = Results.append(res)","fb9d2319":"pd.crosstab(testY, y_pred, rownames=['Real data'], colnames=['Predicted'])","41c227ab":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\nfrom sklearn.metrics import accuracy_score\nres = pd.DataFrame({\"Model\":['LogisticRegression'],\n                    \"Accuracy Score\": [accuracy_score(y_pred,testY)],\n                   \"Recall\": [recall_score(testY, y_pred)],\n                   \"F1score\": [f1_score(testY, y_pred)]})\nResults = Results.append(res)","006ae1aa":"pd.crosstab(testY, y_pred, rownames=['Real data'], colnames=['Predicted'])","76c46c7e":"from xgboost.sklearn import XGBClassifier\nmodel = XGBClassifier(learning_rate=0.001,n_estimators=2500,\n                                max_depth=4, min_child_weight=0,\n                                gamma=0, subsample=0.7,\n                                colsample_bytree=0.7,\n                                scale_pos_weight=1, seed=27,\n                                reg_alpha=0.00006)\nmodel.fit(trainX, trainY)\ny_pred = model.predict(testX)\nfrom sklearn.metrics import accuracy_score\nres = pd.DataFrame({\"Model\":['XGBClassifier'],\n                    \"Accuracy Score\": [accuracy_score(y_pred,testY)],\n                   \"Recall\": [recall_score(testY, y_pred)],\n                   \"F1score\": [f1_score(testY, y_pred)]})\nResults = Results.append(res)","cc879cc6":"pd.crosstab(testY, y_pred, rownames=['Real data'], colnames=['Predicted'])","cee9d99f":"Results","8624fa91":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.model_selection import train_test_split\ntrainX = data[data.Survived.isnull()==False].drop(['Survived','train'],axis=1)\ntrainY = data.Survived[data.Survived.isnull()==False]\ntestX = data[data.Survived.isnull()==True].drop(['Survived','train'],axis=1)\nmodel = XGBClassifier(learning_rate=0.001,n_estimators=2500,\n                                max_depth=4, min_child_weight=0,\n                                gamma=0, subsample=0.7,\n                                colsample_bytree=0.7,\n                                scale_pos_weight=1, seed=27,\n                                reg_alpha=0.00006)\nmodel.fit(trainX, trainY)\ntest = data[data.train==0]\ntest['Survived'] = model.predict(testX).astype(int)\ntest = test.reset_index()\ntest[['PassengerId','Survived']].to_csv(\"submissionXGB.csv\",index=False)\nprint(\"done1\")","69ce8929":"Label Encode ","df197538":"**DATA VISUALIZATION**"}}