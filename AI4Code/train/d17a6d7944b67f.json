{"cell_type":{"a194036b":"code","bde15c70":"code","54a14ddc":"code","eff4af0b":"code","9dc4b937":"code","90409b22":"code","6f181d50":"code","e3897be7":"code","210f2c53":"code","3d99cf52":"code","bc618265":"code","829f09ac":"code","aa4e3531":"code","56f0415f":"code","6cf2f71c":"code","8988e25f":"code","d2e973ba":"code","2b6c58f2":"code","6a58eb62":"code","5d67208f":"code","19c9a45a":"code","c40f2f14":"code","55dad010":"code","99b4687f":"code","18d1a7ab":"code","5c3e67fa":"code","332e7942":"code","9ce2cea4":"code","d79fa945":"code","99396452":"code","6d594553":"code","9f8ad516":"code","900a3b9d":"code","974eed15":"code","1be48a10":"code","1e48ab90":"code","9d09c99d":"code","c62c0a6f":"code","90d6d007":"code","b45f98b6":"markdown","22c9a655":"markdown","e95061b3":"markdown","a98dd4df":"markdown","19c1e5a3":"markdown","d028bbf2":"markdown"},"source":{"a194036b":"import warnings\nwarnings.filterwarnings('ignore')","bde15c70":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","54a14ddc":"df = pd.DataFrame(pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv'))","eff4af0b":"df.head()","9dc4b937":"df.describe()","90409b22":"df.shape","6f181d50":"# Check which column contains object data types\ndf.dtypes","e3897be7":"# Check which column contains null values\ndf.isnull().any()","210f2c53":"fig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(df.corr(), annot = True)","3d99cf52":"# Simple function to get the name of most correlated attributes\ndef get_correlated_col(cor_data, threshold):\n    #cor_data to be column along which corelation to be measured\n    #threshold be the value above which of correlation to be considered\n    feature=[]\n    value=[]\n    \n    for i, index in enumerate(cor_data.index):\n        if abs(cor_data[index]) > threshold:\n            feature.append(index)\n            value.append(cor_data[index])\n    \n    df = pd.DataFrame(data=value, index = feature, columns= ['corr value'])\n    return df","bc618265":"top_correlated_value = get_correlated_col(df.corr()['target'], 0.02)\ntop_correlated_value","829f09ac":"final_df = df[top_correlated_value.index]\nfinal_df","aa4e3531":"cat_df = df.select_dtypes(include=['object'])\ncat_df.head()","56f0415f":"#Changing categorical values(Object) into numerical value using Encoder\nfrom sklearn.preprocessing import LabelEncoder \n\ncat_col = cat_df.columns\nfor i in cat_col:\n    enc = LabelEncoder()\n    cat_df[i] = enc.fit_transform(cat_df[i].astype('str'))","6cf2f71c":"cat_df.head()","8988e25f":"# Adding target column in the cat_df to get the correlation\ncat_df['target'] = df['target'] ","d2e973ba":"cat_df.head()","2b6c58f2":"fig, ax = plt.subplots(figsize=(20,20))\nsns.heatmap(cat_df.corr(), annot = True)","6a58eb62":"top_correlated_value = get_correlated_col(cat_df.corr()['target'], 0.055)\ntop_correlated_value","5d67208f":"#Adding correlated attribute to final_df\nfinal_df['cat1'] = cat_df['cat1']\nfinal_df['cat2'] = cat_df['cat2']\nfinal_df['cat3'] = cat_df['cat3']\n","19c9a45a":"final_df.head()","c40f2f14":"#spliting attributes and target \nX = final_df.drop(['target'], axis=1)\ny = final_df['target']","55dad010":"X.head()","99b4687f":"#Now we'll transform features by scaling each feature to a given range (0 to 1)\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","18d1a7ab":"from sklearn.linear_model import LinearRegression\n\nLinearReg = LinearRegression()\nLinearReg.fit(X, y)","5c3e67fa":"df_test = pd.DataFrame(pd.read_csv('\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv'))","332e7942":"df_test.head()","9ce2cea4":"Id = df_test['id']\ntest_df_columns = final_df.columns.drop('target')","d79fa945":"test_df_columns","99396452":"test_df = df_test[test_df_columns]","6d594553":"test_df","9f8ad516":"#Changing categorical values(Object) into numerical value using Encoder\nfrom sklearn.preprocessing import LabelEncoder \n\ncat_col = ['cat1','cat2','cat3']\nfor i in cat_col:\n    enc = LabelEncoder()\n    test_df[i] = enc.fit_transform(test_df[i].astype('str'))","900a3b9d":"test_df.head()","974eed15":"#Now we'll transform features by scaling each feature to a given range (0 to 1)\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ntest_df = pd.DataFrame(scaler.fit_transform(test_df), columns=test_df.columns)\ntest_df.head()","1be48a10":"#Prediction\ny_pred = LinearReg.predict(test_df)","1e48ab90":"y_pred","9d09c99d":"final_df = pd.DataFrame({'id': Id, 'target': y_pred.flatten()})","c62c0a6f":"final_df.head()","90d6d007":"final_df.to_csv('.\/submission.csv', index=False)","b45f98b6":"#  Data Analysis\n","22c9a655":"# Fitting the Model","e95061b3":"# Prediction ","a98dd4df":"Now we'll find the correlation between the attributes and target variable using heatmap\n\nNow, if we apply heatmap to the whole dataset, it'll create heatmap of columns with dtype int or float (excluding object)","19c1e5a3":"Now lets work with columns with dtype of object","d028bbf2":" # Importing Libraries and Dataset"}}