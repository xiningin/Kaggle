{"cell_type":{"a096a91c":"code","91c0cd7b":"code","3c3ea317":"code","b05297fd":"code","64e94192":"code","ade27c00":"code","d5e95dce":"code","a44ff740":"code","48e056f2":"code","ef714c00":"code","fde77c10":"code","324d954c":"code","c0219190":"code","740bfb21":"markdown"},"source":{"a096a91c":"# Meng-import library yang akan digunakan\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","91c0cd7b":"# Memuat iris data yang terdapat pada sklearn datasets dan menyimpannya dalam DataFrame\n\nfrom sklearn import datasets\n\niris = datasets.load_iris()\n\ndf = pd.DataFrame(data=iris.data, columns=iris.feature_names)\ndf['target'] = iris.target\ndf.head()","3c3ea317":"#Label Name\ntargetNames = iris.target_names\nprint(f\"['0','1','2'] : {targetNames}\")","b05297fd":"# Memisahkan data X dan Y\n\nX = df.drop('target', axis=1)\ny = df.target","64e94192":"# Menghitung jarak antara 2 point\n\ndef minkowski_distance(a, b, p=1):\n    \n    # Menyimpan jumlah dimensi yang ada\n    dim = len(a)\n    \n    # Mengatur jarak awalnya sebesar 0\n    distance = 0\n    \n    # Menghitung Minkowksi Distance menggunakan parameter P\n    for d in range(dim):\n        distance += abs(a[d] - b[d])**p\n        \n    distance = distance**(1\/p)\n    \n    return distance\n\n\n# Melakukan test pada fungsi diatas\n\nminkowski_distance(a=X.iloc[0], b=X.iloc[1], p=1)","ade27c00":"# Menentukan titik uji\n\ntest_pt = [4.8, 2.7, 2.5, 0.7]\n\n# Menghitung Jarak antara titik uji (test_pt) yang ditentukan dengan semua titik X\n\ndistances = []\n\nfor i in X.index:\n    \n    distances.append(minkowski_distance(test_pt, X.iloc[i]))\n    \ndf_dists = pd.DataFrame(data=distances, index=X.index, columns=['dist'])\ndf_dists.head()","d5e95dce":"# Menemukan 5 tetangga terdekat\n\ndf_nn = df_dists.sort_values(by=['dist'], axis=0)[:5]\ndf_nn","a44ff740":"from collections import Counter\n\n# Membuat objek penghitung untuk melacak label\n\ncounter = Counter(y[df_nn.index])\n\n# Mendapatkan label paling umum dari semua tetangga terdekat\n\ncounter.most_common()[0][0]","48e056f2":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Membagi datanya - 75% train, 25% test\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                   random_state=1)\n\n# Mengskala data X\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","ef714c00":"def knn_predict(X_train, X_test, y_train, y_test, k, p):\n    \n    # Counter untuk membantu dengan voting label\n    from collections import Counter\n    \n    # Melakukan prediksi untuk test data\n    # Diperlukan output 1 prediksi per test data point\n    y_hat_test = []\n\n    for test_point in X_test:\n        distances = []\n\n        for train_point in X_train:\n            distance = minkowski_distance(test_point, train_point, p=p)\n            distances.append(distance)\n        \n        # Menyimpan Jarak pada DataFrame\n        df_dists = pd.DataFrame(data=distances, columns=['dist'], \n                                index=y_train.index)\n        \n        # Mengurutkan Jarak, dan hanya mempertimbangkan K titik terdekat\n        df_nn = df_dists.sort_values(by=['dist'], axis=0)[:k]\n\n        # Buat objek penghitung untuk melacak label k tetangga terdekat\n        counter = Counter(y_train[df_nn.index])\n\n        # Mendapatkan label paling umum dari semua tetangga terdekat\n        prediction = counter.most_common()[0][0]\n        \n        # Menambahkan hasil prediksi ke daftar keluaran\n        y_hat_test.append(prediction)\n        \n    return y_hat_test\n\n\n# Melakukan prediksi pada dataset\ny_hat_test = knn_predict(X_train, X_test, y_train, y_test, k=3, p=1)\n\nprint(y_hat_test)","fde77c10":"# Mendapatkan hasil akurasi, confusion matrix, dan klasifikasi report\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nacc = accuracy_score(y_test, y_hat_test)\nprint(f\"Accuracy : {acc}\")\ncfm = confusion_matrix(y_test, y_hat_test)\nprint(\"Confusion Matrix : \")\nprint(cfm)\nprint(\"Classification Report : \")\nclr = classification_report(y_test,y_hat_test, target_names=targetNames)\nprint(clr)","324d954c":"# Melakukan test untuk melihat dan membandingkan hasil bila menggunakan sklearn.neighbors.KNeighborsClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclf = KNeighborsClassifier(n_neighbors=3, p=1)\nclf.fit(X_train, y_train)\ny_pred_test = clf.predict(X_test)\n\nacc_sklearn = accuracy_score(y_test, y_pred_test)\nprint(f\"SKlearn KNN Accuracy : {acc_sklearn}\")\ncfm_sklearn = confusion_matrix(y_test, y_pred_test)\nprint(\"SKlearn KNN Confusion Matrix : \")\nprint(cfm_sklearn)\nclr_sklearn = classification_report(y_test,y_pred_test, target_names=targetNames)\nprint(\"SKlearn KNN Classification Report : \")\nprint(clr_sklearn)","c0219190":"# Mendapatkan skor akurasi dari k\n\naccuracies = []\n\nfor k in range(1,100):\n    y_hat_test = knn_predict(X_train, X_test, y_train, y_test, k, p=1)\n    accuracies.append(accuracy_score(y_test, y_hat_test))\n\n# Plot the results \n\nfig, ax = plt.subplots(figsize=(8,6))\nax.plot(range(1,100), accuracies)\nax.set_xlabel('Numbers of Nearest Neighbors (k)')\nax.set_ylabel('Accuracy (%)');","740bfb21":"**MEMBUAT KNN DARI DASAR MENGGUNAKAN PYTHON**\n\nJulius Cipta Jaya - 18\/428613\/TK\/47115\n"}}