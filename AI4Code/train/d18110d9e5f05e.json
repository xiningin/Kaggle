{"cell_type":{"36e1e6da":"code","0bc946f4":"code","ec729c70":"code","f04803e2":"code","1d751feb":"code","c2950dc6":"code","cf5a1d31":"code","112d37f1":"code","ccb62a71":"code","3f0190c9":"code","4bd46d60":"code","2b8dd955":"code","17a0c0d9":"code","9e627a90":"code","b30ce85f":"code","918700b2":"markdown","7b31c89c":"markdown","5eed1a1a":"markdown","90353eca":"markdown"},"source":{"36e1e6da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0bc946f4":"data=pd.read_csv(\"\/kaggle\/input\/years-of-experience-and-salary-dataset\/Salary_Data.csv\")\ndata.head()","ec729c70":"data.shape","f04803e2":"data.info()","1d751feb":"X= data['YearsExperience'].values\n\nY= data['Salary'].values","c2950dc6":"print(X)","cf5a1d31":"print(Y)","112d37f1":"plt.scatter(X,Y)\nplt.title(\"Line plot between YearsExperience and Salary\")\nplt.xlabel(\"YearsExperience\")\nplt.ylabel(\"Salary\")\nplt.show()","ccb62a71":"class LinearRegression:\n    \n    def __init__ (self):\n        self.slope = 0\n        self.intercept = 0\n    \n    def fit(self, X, Y):\n        mean_x = np.mean(X)\n        mean_y = np.mean(Y)\n        \n        n = 0\n        d = 0\n        for (i,j) in zip(X, Y):\n            n = n + (i-mean_x)*(j-mean_y)\n            d = d + (i-mean_x)*(i-mean_x)\n        \n        self.slope = n\/d\n        self.intercept = mean_y - (self.slope*mean_x)\n        \n        print(\"Slope:\", self.slope)\n        print(\"Intercept:\", self.intercept)\n    \n    def predict(self, value):\n        ans = (self.slope*value) + self.intercept\n        return ans","3f0190c9":"model = LinearRegression()","4bd46d60":"model.fit(X, Y)","2b8dd955":"plt.scatter(X, Y)\nplt.plot([min(X), max(X)], [model.predict(min(X)), model.predict(max(X))], color='red')\nplt.title(\"Line plot between YearsExperience and Salary\")\nplt.xlabel(\"YearsExperience\")\nplt.ylabel(\"Salary\")\nplt.show()","17a0c0d9":"model.predict(4)","9e627a90":"model.predict(7)","b30ce85f":"model.predict(10)","918700b2":"# Showing some random calculations","7b31c89c":"#  Visualizing Linear Model","5eed1a1a":"# Extracting X and Y","90353eca":"# Creating Linear regression model\n"}}