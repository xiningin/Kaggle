{"cell_type":{"942afebb":"code","3bae3c81":"code","8cbd40c9":"code","2a02b0ce":"code","0c07654c":"code","92027db8":"code","66e4a6b8":"code","46bb9a6f":"code","1a2ac696":"code","b6bc7596":"code","43c0c7e9":"code","90d03411":"code","2d414dfb":"code","3a2953c4":"code","075dfed7":"code","4ec1d49d":"code","750e57da":"markdown"},"source":{"942afebb":"import os, sys, time, random\nimport h5py\nimport numpy as np","3bae3c81":"def FreqDict2List(dt):\n\treturn sorted(dt.items(), key=lambda d:d[-1], reverse=True)\n\ndef LoadList(fn):\n\twith open(fn, encoding = \"utf-8\") as fin:\n\t\tst = list(ll for ll in fin.read().split('\\n') if ll != \"\")\n\treturn st\n\ndef LoadCSV(fn):\n\tret = []\n\twith open(fn, encoding='utf-8') as fin:\n\t\tfor line in fin:\n\t\t\tlln = line.rstrip('\\r\\n').split('\\t')\n\t\t\tret.append(lln)\n\treturn ret\n\ndef LoadCSVg(fn):\n\twith open(fn, encoding='utf-8') as fin:\n\t\tfor line in fin:\n\t\t\tlln = line.rstrip('\\r\\n').split('\\t')\n\t\t\tyield lln\n\ndef SaveList(st, ofn):\n\twith open(ofn, \"w\", encoding = \"utf-8\") as fout:\n\t\tfor k in st:\n\t\t\tfout.write(str(k) + \"\\n\")","8cbd40c9":"class TokenList:\n\tdef __init__(self, token_list):\n\t\tself.id2t = ['<PAD>', '<UNK>', '<S>', '<\/S>'] + token_list\n\t\tself.t2id = {v:k for k,v in enumerate(self.id2t)}\n\tdef id(self, x):\treturn self.t2id.get(x, 1)\n\tdef token(self, x):\treturn self.id2t[x]\n\tdef num(self):\t\treturn len(self.id2t)\n\tdef startid(self):  return 2\n\tdef endid(self):    return 3\n\t\ndef pad_to_longest(xs, tokens, max_len=999):\n\tlongest = min(len(max(xs, key=len))+2, max_len)\n\tX = np.zeros((len(xs), longest), dtype='int32')\n\tX[:,0] = tokens.startid()\n\tfor i, x in enumerate(xs):\n\t\tx = x[:max_len-2]\n\t\tfor j, z in enumerate(x):\n\t\t\tX[i,1+j] = tokens.id(z)\n\t\tX[i,1+len(x)] = tokens.endid()\n\treturn X\n\ndef MakeS2SDict(fn=None, min_freq=5, delimiter=' ', dict_file=None):\n\tif dict_file is not None and os.path.exists(dict_file):\n\t\tprint('loading', dict_file)\n\t\tlst = LoadList(dict_file)\n\t\tmidpos = lst.index('<@@@>')\n\t\titokens = TokenList(lst[:midpos])\n\t\totokens = TokenList(lst[midpos+1:])\n\t\treturn itokens, otokens\n\tdata = LoadCSV(fn)\n\twdicts = [{}, {}]\n\tfor ss in data:\n\t\tfor seq, wd in zip(ss, wdicts):\n\t\t\tfor w in seq.split(delimiter): \n\t\t\t\twd[w] = wd.get(w, 0) + 1\n\twlists = []\n\tfor wd in wdicts:\t\n\t\twd = FreqDict2List(wd)\n\t\twlist = [x for x,y in wd if y >= min_freq]\n\t\twlists.append(wlist)\n\tprint('seq 1 words:', len(wlists[0]))\n\tprint('seq 2 words:', len(wlists[1]))\n\titokens = TokenList(wlists[0])\n\totokens = TokenList(wlists[1])\n\tif dict_file is not None:\n\t\tSaveList(wlists[0]+['<@@@>']+wlists[1], dict_file)\n\treturn itokens, otokens\n\ndef MakeS2SData(fn=None, itokens=None, otokens=None, delimiter=' ', h5_file=None, max_len=200):\n\tif h5_file is not None and os.path.exists(h5_file):\n\t\tprint('loading', h5_file)\n\t\twith h5py.File(h5_file) as dfile:\n\t\t\tX, Y = dfile['X'][:], dfile['Y'][:]\n\t\treturn X, Y\n\tdata = LoadCSVg(fn)\n\tXs = [[], []]\n\tfor ss in data:\n\t\tfor seq, xs in zip(ss, Xs):\n\t\t\txs.append(list(seq.split(delimiter)))\n\tX, Y = pad_to_longest(Xs[0], itokens, max_len), pad_to_longest(Xs[1], otokens, max_len)\n\tif h5_file is not None:\n\t\twith h5py.File(h5_file, 'w') as dfile:\n\t\t\tdfile.create_dataset('X', data=X)\n\t\t\tdfile.create_dataset('Y', data=Y)\n\treturn X, Y\n\ndef S2SDataGenerator(fn, itokens, otokens, batch_size=64, delimiter=' ', max_len=999):\n\tXs = [[], []]\n\twhile True:\n\t\tfor ss in LoadCSVg(fn):\n\t\t\tfor seq, xs in zip(ss, Xs):\n\t\t\t\txs.append(list(seq.split(delimiter)))\n\t\t\tif len(Xs[0]) >= batch_size:\n\t\t\t\tX, Y = pad_to_longest(Xs[0], itokens, max_len), pad_to_longest(Xs[1], otokens, max_len)\n\t\t\t\tyield [X, Y], None\n\t\t\t\tXs = [[], []]\n","2a02b0ce":"itokens, otokens = MakeS2SDict('..\/input\/en2de.s2s.txt', 6, dict_file='en2de_word.txt')\nX, Y = MakeS2SData('..\/input\/en2de.s2s.txt', itokens, otokens, h5_file='en2de.h5')","0c07654c":"print(X.shape, Y.shape)","92027db8":"from keras.optimizers import *\nfrom keras.callbacks import *\nfrom keras.models import *\nfrom keras.layers import *\nfrom keras.callbacks import *\nimport tensorflow as tf","66e4a6b8":"itokens, otokens = MakeS2SDict('..\/input\/en2de.s2s.txt', dict_file='.\/en2de_word.txt')\nXtrain, Ytrain = MakeS2SData('..\/input\/en2de.s2s.txt', itokens, otokens, h5_file='.\/en2de.h5')\nXvalid, Yvalid = MakeS2SData('..\/input\/en2de.s2s.valid.txt', itokens, otokens, h5_file='\/\/en2de.valid.h5')","46bb9a6f":"print('seq 1 words:', itokens.num())\nprint('seq 2 words:', otokens.num())\nprint('train shapes:', Xtrain.shape, Ytrain.shape)\nprint('valid shapes:', Xvalid.shape, Yvalid.shape)","1a2ac696":"class Encoder():\n    def __init__(self, i_token_num, latent_dim, layers=3):\n        self.emb_layer = Embedding(i_token_num, latent_dim, mask_zero=True)\n        cells = [GRUCell(latent_dim) for _ in range(layers)]\n        self.rnn_layer = RNN(cells, return_state=True)\n    def __call__(self, x):\n        x = self.emb_layer(x)\n        xh = self.rnn_layer(x)\n        x, h = xh[0], xh[1:]\n        return x, h\n\nclass Decoder():\n    def __init__(self, o_token_num, latent_dim, layers=3):\n        self.emb_layer = Embedding(o_token_num, latent_dim, mask_zero=True)\n        cells = [GRUCell(latent_dim) for _ in range(layers)]\n        self.rnn_layer = RNN(cells, return_sequences=True, return_state=True)\n        self.out_layer = Dense(o_token_num)\n    def __call__(self, x, state):\n        x = self.emb_layer(x)\n        xh = self.rnn_layer(x, initial_state=state)\n        x, h = xh[0], xh[1:]\n        x = TimeDistributed(self.out_layer)(x)\n        return x, h\nclass RNNSeq2Seq():\n    def __init__(self, i_tokens, o_tokens, latent_dim, layers=3):\n        self.i_tokens = i_tokens\n        self.o_tokens = o_tokens\n\n        encoder_inputs = Input(shape=(None,), dtype='int32')\n        decoder_inputs = Input(shape=(None,), dtype='int32')\n\n        encoder = Encoder(i_tokens.num(), latent_dim, layers)\n        decoder = Decoder(o_tokens.num(), latent_dim, layers)\n\n        encoder_outputs, encoder_states = encoder(encoder_inputs)\n\n        dinputs = Lambda(lambda x:x[:,:-1])(decoder_inputs)\n        dtargets = Lambda(lambda x:x[:,1:])(decoder_inputs)\n\n        decoder_outputs, decoder_state_h = decoder(dinputs, encoder_states)\n\n        def get_loss(args):\n            y_pred, y_true = args\n            y_true = tf.cast(y_true, 'int32')\n            loss = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y_true, logits=y_pred)\n            mask = tf.cast(tf.not_equal(y_true, 0), 'float32')\n            loss = tf.reduce_sum(loss * mask, -1) \/ tf.reduce_sum(mask, -1)\n            loss = K.mean(loss)\n            return loss\n\n        def get_accu(args):\n            y_pred, y_true = args\n            mask = tf.cast(tf.not_equal(y_true, 0), 'float32')\n            corr = K.cast(K.equal(K.cast(y_true, 'int32'), K.cast(K.argmax(y_pred, axis=-1), 'int32')), 'float32')\n            corr = K.sum(corr * mask, -1) \/ K.sum(mask, -1)\n            return K.mean(corr)\n\n        loss = Lambda(get_loss)([decoder_outputs, dtargets])\n        self.ppl = Lambda(K.exp)(loss)\n        self.accu = Lambda(get_accu)([decoder_outputs, dtargets])\n\n        self.model = Model([encoder_inputs, decoder_inputs], loss)\n        self.model.add_loss([K.mean(loss)])\n\n        encoder_model = Model(encoder_inputs, encoder_states)\n\n        decoder_states_inputs = [Input(shape=(latent_dim,)) for _ in range(3)]\n\n        decoder_outputs, decoder_states = decoder(decoder_inputs, decoder_states_inputs)\n        decoder_model = Model([decoder_inputs] + decoder_states_inputs,\n                              [decoder_outputs] + decoder_states)\n        self.encoder_model = encoder_model\n        self.decoder_model = decoder_model\n\n    def compile(self, optimizer):\n        self.model.compile(optimizer, None)\n        self.model.metrics_names.append('ppl')\n        self.model.metrics_tensors.append(self.ppl)\n        self.model.metrics_names.append('accu')\n        self.model.metrics_tensors.append(self.accu)\n\n    def decode_sequence(self, input_seq, delimiter=''):\n        input_mat = np.zeros((1, len(input_seq)+3))\n        input_mat[0,0] = self.i_tokens.id('<S>')\n        for i, z in enumerate(input_seq): input_mat[0,1+i] = self.i_tokens.id(z)\n        input_mat[0,len(input_seq)+1] = self.i_tokens.id('<\/S>')\n\n        state_value = self.encoder_model.predict_on_batch(input_mat)\n        target_seq = np.zeros((1, 1))\n        target_seq[0,0] = self.o_tokens.id('<S>')\n\n        decoded_tokens = []\n        while True:\n            output_tokens_and_h = self.decoder_model.predict_on_batch([target_seq] + state_value)\n            output_tokens, h = output_tokens_and_h[0], output_tokens_and_h[1:]\n            sampled_token_index = np.argmax(output_tokens[0,-1,:])\n            sampled_token = self.o_tokens.token(sampled_token_index)\n            decoded_tokens.append(sampled_token)\n            if sampled_token == '<\/S>' or len(decoded_tokens) > 50: break\n            target_seq = np.zeros((1, 1))\n            target_seq[0,0] = sampled_token_index\n            state_value = h\n        return delimiter.join(decoded_tokens[:-1])","b6bc7596":"s2s_model = RNNSeq2Seq(itokens,otokens, 256)\ns2s_model.compile(Adam(0.01, 0.9, 0.98, epsilon=1e-9))\ns2s_model.model.summary() ","43c0c7e9":"model_saver = ModelCheckpoint(\".\/s2s_model.h5\", save_best_only=True, save_weights_only=True,monitor='val_accu',mode='max',verbose=1)\n\ns2s_model.model.fit([Xtrain, Ytrain], None, batch_size=64, epochs=30, validation_data=([Xvalid, Yvalid], None),callbacks=[model_saver],verbose=1)","90d03411":"s2s_model.model.load_weights(\".\/s2s_model.h5\")\nscore = s2s_model.model.evaluate([Xvalid, Yvalid], None,batch_size = 32)\nprint(score)","2d414dfb":"from keras.initializers import *\nclass LayerNormalization(Layer):\n\tdef __init__(self, eps=1e-6, **kwargs):\n\t\tself.eps = eps\n\t\tsuper(LayerNormalization, self).__init__(**kwargs)\n\tdef build(self, input_shape):\n\t\tself.gamma = self.add_weight(name='gamma', shape=input_shape[-1:],\n\t\t\t\t\t\t\t\t\t initializer=Ones(), trainable=True)\n\t\tself.beta = self.add_weight(name='beta', shape=input_shape[-1:],\n\t\t\t\t\t\t\t\t\tinitializer=Zeros(), trainable=True)\n\t\tsuper(LayerNormalization, self).build(input_shape)\n\tdef call(self, x):\n\t\tmean = K.mean(x, axis=-1, keepdims=True)\n\t\tstd = K.std(x, axis=-1, keepdims=True)\n\t\treturn self.gamma * (x - mean) \/ (std + self.eps) + self.beta\n\tdef compute_output_shape(self, input_shape):\n\t\treturn input_shape\n\nclass ScaledDotProductAttention():\n\tdef __init__(self, d_model, attn_dropout=0.1):\n\t\tself.temper = np.sqrt(d_model)\n\t\tself.dropout = Dropout(attn_dropout)\n\tdef __call__(self, q, k, v, mask):\n\t\tattn = Lambda(lambda x:K.batch_dot(x[0],x[1],axes=[2,2])\/self.temper)([q, k])\n\t\tif mask is not None:\n\t\t\tmmask = Lambda(lambda x:(-1e+10)*(1-x))(mask)\n\t\t\tattn = Add()([attn, mmask])\n\t\tattn = Activation('softmax')(attn)\n\t\tattn = self.dropout(attn)\n\t\toutput = Lambda(lambda x:K.batch_dot(x[0], x[1]))([attn, v])\n\t\treturn output, attn\n\nclass MultiHeadAttention():\n\t# mode 0 - big martixes, faster; mode 1 - more clear implementation\n\tdef __init__(self, n_head, d_model, d_k, d_v, dropout, mode=0, use_norm=True):\n\t\tself.mode = mode\n\t\tself.n_head = n_head\n\t\tself.d_k = d_k\n\t\tself.d_v = d_v\n\t\tself.dropout = dropout\n\t\tif mode == 0:\n\t\t\tself.qs_layer = Dense(n_head*d_k, use_bias=False)\n\t\t\tself.ks_layer = Dense(n_head*d_k, use_bias=False)\n\t\t\tself.vs_layer = Dense(n_head*d_v, use_bias=False)\n\t\telif mode == 1:\n\t\t\tself.qs_layers = []\n\t\t\tself.ks_layers = []\n\t\t\tself.vs_layers = []\n\t\t\tfor _ in range(n_head):\n\t\t\t\tself.qs_layers.append(TimeDistributed(Dense(d_k, use_bias=False)))\n\t\t\t\tself.ks_layers.append(TimeDistributed(Dense(d_k, use_bias=False)))\n\t\t\t\tself.vs_layers.append(TimeDistributed(Dense(d_v, use_bias=False)))\n\t\tself.attention = ScaledDotProductAttention(d_model)\n\t\tself.layer_norm = LayerNormalization() if use_norm else None\n\t\tself.w_o = TimeDistributed(Dense(d_model))\n\n\tdef __call__(self, q, k, v, mask=None):\n\t\td_k, d_v = self.d_k, self.d_v\n\t\tn_head = self.n_head\n\n\t\tif self.mode == 0:\n\t\t\tqs = self.qs_layer(q)  # [batch_size, len_q, n_head*d_k]\n\t\t\tks = self.ks_layer(k)\n\t\t\tvs = self.vs_layer(v)\n\n\t\t\tdef reshape1(x):\n\t\t\t\ts = tf.shape(x)   # [batch_size, len_q, n_head * d_k]\n\t\t\t\tx = tf.reshape(x, [s[0], s[1], n_head, d_k])\n\t\t\t\tx = tf.transpose(x, [2, 0, 1, 3])  \n\t\t\t\tx = tf.reshape(x, [-1, s[1], d_k])  # [n_head * batch_size, len_q, d_k]\n\t\t\t\treturn x\n\t\t\tqs = Lambda(reshape1)(qs)\n\t\t\tks = Lambda(reshape1)(ks)\n\t\t\tvs = Lambda(reshape1)(vs)\n\n\t\t\tif mask is not None:\n\t\t\t\tmask = Lambda(lambda x:K.repeat_elements(x, n_head, 0))(mask)\n\t\t\thead, attn = self.attention(qs, ks, vs, mask=mask)  \n\t\t\t\t\n\t\t\tdef reshape2(x):\n\t\t\t\ts = tf.shape(x)   # [n_head * batch_size, len_v, d_v]\n\t\t\t\tx = tf.reshape(x, [n_head, -1, s[1], s[2]]) \n\t\t\t\tx = tf.transpose(x, [1, 2, 0, 3])\n\t\t\t\tx = tf.reshape(x, [-1, s[1], n_head*d_v])  # [batch_size, len_v, n_head * d_v]\n\t\t\t\treturn x\n\t\t\thead = Lambda(reshape2)(head)\n\t\telif self.mode == 1:\n\t\t\theads = []; attns = []\n\t\t\tfor i in range(n_head):\n\t\t\t\tqs = self.qs_layers[i](q)   \n\t\t\t\tks = self.ks_layers[i](k) \n\t\t\t\tvs = self.vs_layers[i](v) \n\t\t\t\thead, attn = self.attention(qs, ks, vs, mask)\n\t\t\t\theads.append(head); attns.append(attn)\n\t\t\thead = Concatenate()(heads) if n_head > 1 else heads[0]\n\t\t\tattn = Concatenate()(attns) if n_head > 1 else attns[0]\n\n\t\toutputs = self.w_o(head)\n\t\toutputs = Dropout(self.dropout)(outputs)\n\t\tif not self.layer_norm: return outputs, attn\n\t\toutputs = Add()([outputs, q])\n\t\treturn self.layer_norm(outputs), attn\n\nclass PositionwiseFeedForward():\n\tdef __init__(self, d_hid, d_inner_hid, dropout=0.1):\n\t\tself.w_1 = Conv1D(d_inner_hid, 1, activation='relu')\n\t\tself.w_2 = Conv1D(d_hid, 1)\n\t\tself.layer_norm = LayerNormalization()\n\t\tself.dropout = Dropout(dropout)\n\tdef __call__(self, x):\n\t\toutput = self.w_1(x) \n\t\toutput = self.w_2(output)\n\t\toutput = self.dropout(output)\n\t\toutput = Add()([output, x])\n\t\treturn self.layer_norm(output)\n\nclass EncoderLayer():\n\tdef __init__(self, d_model, d_inner_hid, n_head, d_k, d_v, dropout=0.1):\n\t\tself.self_att_layer = MultiHeadAttention(n_head, d_model, d_k, d_v, dropout=dropout)\n\t\tself.pos_ffn_layer  = PositionwiseFeedForward(d_model, d_inner_hid, dropout=dropout)\n\tdef __call__(self, enc_input, mask=None):\n\t\toutput, slf_attn = self.self_att_layer(enc_input, enc_input, enc_input, mask=mask)\n\t\toutput = self.pos_ffn_layer(output)\n\t\treturn output, slf_attn\n\nclass DecoderLayer():\n\tdef __init__(self, d_model, d_inner_hid, n_head, d_k, d_v, dropout=0.1):\n\t\tself.self_att_layer = MultiHeadAttention(n_head, d_model, d_k, d_v, dropout=dropout)\n\t\tself.enc_att_layer  = MultiHeadAttention(n_head, d_model, d_k, d_v, dropout=dropout)\n\t\tself.pos_ffn_layer  = PositionwiseFeedForward(d_model, d_inner_hid, dropout=dropout)\n\tdef __call__(self, dec_input, enc_output, self_mask=None, enc_mask=None):\n\t\toutput, slf_attn = self.self_att_layer(dec_input, dec_input, dec_input, mask=self_mask)\n\t\toutput, enc_attn = self.enc_att_layer(output, enc_output, enc_output, mask=enc_mask)\n\t\toutput = self.pos_ffn_layer(output)\n\t\treturn output, slf_attn, enc_attn\n\ndef GetPosEncodingMatrix(max_len, d_emb):\n\tpos_enc = np.array([\n\t\t[pos \/ np.power(10000, 2 * (j \/\/ 2) \/ d_emb) for j in range(d_emb)] \n\t\tif pos != 0 else np.zeros(d_emb) \n\t\t\tfor pos in range(max_len)\n\t\t\t])\n\tpos_enc[1:, 0::2] = np.sin(pos_enc[1:, 0::2]) # dim 2i\n\tpos_enc[1:, 1::2] = np.cos(pos_enc[1:, 1::2]) # dim 2i+1\n\treturn pos_enc\n\ndef GetPadMask(q, k):\n\tones = K.expand_dims(K.ones_like(q, 'float32'), -1)\n\tmask = K.cast(K.expand_dims(K.not_equal(k, 0), 1), 'float32')\n\tmask = K.batch_dot(ones, mask, axes=[2,1])\n\treturn mask\n\ndef GetSubMask(s):\n\tlen_s = tf.shape(s)[1]\n\tbs = tf.shape(s)[:1]\n\tmask = K.cumsum(tf.eye(len_s, batch_shape=bs), 1)\n\treturn mask\n\nclass Encoder():\n\tdef __init__(self, d_model, d_inner_hid, n_head, d_k, d_v, \\\n\t\t\t\tlayers=6, dropout=0.1, word_emb=None, pos_emb=None):\n\t\tself.emb_layer = word_emb\n\t\tself.pos_layer = pos_emb\n\t\tself.layers = [EncoderLayer(d_model, d_inner_hid, n_head, d_k, d_v, dropout) for _ in range(layers)]\n\tdef __call__(self, src_seq, src_pos, return_att=False, active_layers=999):\n\t\tx = self.emb_layer(src_seq)\n\t\tif src_pos is not None:\n\t\t\tpos = self.pos_layer(src_pos)\n\t\t\tx = Add()([x, pos])\n\t\tif return_att: atts = []\n\t\tmask = Lambda(lambda x:GetPadMask(x, x))(src_seq)\n\t\tfor enc_layer in self.layers[:active_layers]:\n\t\t\tx, att = enc_layer(x, mask)\n\t\t\tif return_att: atts.append(att)\n\t\treturn (x, atts) if return_att else x\n\nclass Decoder():\n\tdef __init__(self, d_model, d_inner_hid, n_head, d_k, d_v, \\\n\t\t\t  layers=6, dropout=0.1, word_emb=None, pos_emb=None):\n\t\tself.emb_layer = word_emb\n\t\tself.pos_layer = pos_emb\n\t\tself.layers = [DecoderLayer(d_model, d_inner_hid, n_head, d_k, d_v, dropout) for _ in range(layers)]\n\tdef __call__(self, tgt_seq, tgt_pos, src_seq, enc_output, return_att=False, active_layers=999):\n\t\tdec = self.emb_layer(tgt_seq)\n\t\tpos = self.pos_layer(tgt_pos)\n\t\tx = Add()([dec, pos])\n\n\t\tself_pad_mask = Lambda(lambda x:GetPadMask(x, x))(tgt_seq)\n\t\tself_sub_mask = Lambda(GetSubMask)(tgt_seq)\n\t\tself_mask = Lambda(lambda x:K.minimum(x[0], x[1]))([self_pad_mask, self_sub_mask])\n\t\t\n\t\tenc_mask = Lambda(lambda x:GetPadMask(x[0], x[1]))([tgt_seq, src_seq])\n\n\t\tif return_att: self_atts, enc_atts = [], []\n\t\tfor dec_layer in self.layers[:active_layers]:\n\t\t\tx, self_att, enc_att = dec_layer(x, enc_output, self_mask, enc_mask)\n\t\t\tif return_att: \n\t\t\t\tself_atts.append(self_att)\n\t\t\t\tenc_atts.append(enc_att)\n\t\treturn (x, self_atts, enc_atts) if return_att else x\n\nclass Transformer:\n\tdef __init__(self, i_tokens, o_tokens, len_limit, d_model=256, \\\n\t\t\t  d_inner_hid=512, n_head=4, d_k=64, d_v=64, layers=2, dropout=0.1, \\\n\t\t\t  share_word_emb=False):\n\t\tself.i_tokens = i_tokens\n\t\tself.o_tokens = o_tokens\n\t\tself.len_limit = len_limit\n\t\tself.src_loc_info = True\n\t\tself.d_model = d_model\n\t\tself.decode_model = None\n\t\td_emb = d_model\n\n\t\tpos_emb = Embedding(len_limit, d_emb, trainable=False, \\\n\t\t\t\t\t\t   weights=[GetPosEncodingMatrix(len_limit, d_emb)])\n\n\t\ti_word_emb = Embedding(i_tokens.num(), d_emb)\n\t\tif share_word_emb: \n\t\t\tassert i_tokens.num() == o_tokens.num()\n\t\t\to_word_emb = i_word_emb\n\t\telse: o_word_emb = Embedding(o_tokens.num(), d_emb)\n\n\t\tself.encoder = Encoder(d_model, d_inner_hid, n_head, d_k, d_v, layers, dropout, \\\n\t\t\t\t\t\t\tword_emb=i_word_emb, pos_emb=pos_emb)\n\t\tself.decoder = Decoder(d_model, d_inner_hid, n_head, d_k, d_v, layers, dropout, \\\n\t\t\t\t\t\t\tword_emb=o_word_emb, pos_emb=pos_emb)\n\t\tself.target_layer = TimeDistributed(Dense(o_tokens.num(), use_bias=False))\n\n\tdef get_pos_seq(self, x):\n\t\tmask = K.cast(K.not_equal(x, 0), 'int32')\n\t\tpos = K.cumsum(K.ones_like(x, 'int32'), 1)\n\t\treturn pos * mask\n\n\tdef compile(self, optimizer='adam', active_layers=999):\n\t\tsrc_seq_input = Input(shape=(None,), dtype='int32')\n\t\ttgt_seq_input = Input(shape=(None,), dtype='int32')\n\n\t\tsrc_seq = src_seq_input\n\t\ttgt_seq  = Lambda(lambda x:x[:,:-1])(tgt_seq_input)\n\t\ttgt_true = Lambda(lambda x:x[:,1:])(tgt_seq_input)\n\n\t\tsrc_pos = Lambda(self.get_pos_seq)(src_seq)\n\t\ttgt_pos = Lambda(self.get_pos_seq)(tgt_seq)\n\t\tif not self.src_loc_info: src_pos = None\n\n\t\tenc_output = self.encoder(src_seq, src_pos, active_layers=active_layers)\n\t\tdec_output = self.decoder(tgt_seq, tgt_pos, src_seq, enc_output, active_layers=active_layers)\t\n\t\tfinal_output = self.target_layer(dec_output)\n\n\t\tdef get_loss(args):\n\t\t\ty_pred, y_true = args\n\t\t\ty_true = tf.cast(y_true, 'int32')\n\t\t\tloss = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=y_true, logits=y_pred)\n\t\t\tmask = tf.cast(tf.not_equal(y_true, 0), 'float32')\n\t\t\tloss = tf.reduce_sum(loss * mask, -1) \/ tf.reduce_sum(mask, -1)\n\t\t\tloss = K.mean(loss)\n\t\t\treturn loss\n\n\t\tdef get_accu(args):\n\t\t\ty_pred, y_true = args\n\t\t\tmask = tf.cast(tf.not_equal(y_true, 0), 'float32')\n\t\t\tcorr = K.cast(K.equal(K.cast(y_true, 'int32'), K.cast(K.argmax(y_pred, axis=-1), 'int32')), 'float32')\n\t\t\tcorr = K.sum(corr * mask, -1) \/ K.sum(mask, -1)\n\t\t\treturn K.mean(corr)\n\t\t\t\t\n\t\tloss = Lambda(get_loss)([final_output, tgt_true])\n\t\tself.ppl = Lambda(K.exp)(loss)\n\t\tself.accu = Lambda(get_accu)([final_output, tgt_true])\n\n\t\tself.model = Model([src_seq_input, tgt_seq_input], loss)\n\t\tself.model.add_loss([loss])\n\t\tself.output_model = Model([src_seq_input, tgt_seq_input], final_output)\n\t\t\n\t\tself.model.compile(optimizer, None)\n\t\tself.model.metrics_names.append('ppl')\n\t\tself.model.metrics_tensors.append(self.ppl)\n\t\tself.model.metrics_names.append('accu')\n\t\tself.model.metrics_tensors.append(self.accu)\n\n\tdef make_src_seq_matrix(self, input_seq):\n\t\tsrc_seq = np.zeros((1, len(input_seq)+3), dtype='int32')\n\t\tsrc_seq[0,0] = self.i_tokens.startid()\n\t\tfor i, z in enumerate(input_seq): src_seq[0,1+i] = self.i_tokens.id(z)\n\t\tsrc_seq[0,len(input_seq)+1] = self.i_tokens.endid()\n\t\treturn src_seq\n\n\tdef decode_sequence(self, input_seq, delimiter=''):\n\t\tsrc_seq = self.make_src_seq_matrix(input_seq)\n\t\tdecoded_tokens = []\n\t\ttarget_seq = np.zeros((1, self.len_limit), dtype='int32')\n\t\ttarget_seq[0,0] = self.o_tokens.startid()\n\t\tfor i in range(self.len_limit-1):\n\t\t\toutput = self.output_model.predict_on_batch([src_seq, target_seq])\n\t\t\tsampled_index = np.argmax(output[0,i,:])\n\t\t\tsampled_token = self.o_tokens.token(sampled_index)\n\t\t\tdecoded_tokens.append(sampled_token)\n\t\t\tif sampled_index == self.o_tokens.endid(): break\n\t\t\ttarget_seq[0,i+1] = sampled_index\n\t\treturn delimiter.join(decoded_tokens[:-1])\n\n\tdef make_fast_decode_model(self):\n\t\tsrc_seq_input = Input(shape=(None,), dtype='int32')\n\t\ttgt_seq_input = Input(shape=(None,), dtype='int32')\n\t\tsrc_seq = src_seq_input\n\t\ttgt_seq = tgt_seq_input\n\n\t\tsrc_pos = Lambda(self.get_pos_seq)(src_seq)\n\t\ttgt_pos = Lambda(self.get_pos_seq)(tgt_seq)\n\t\tif not self.src_loc_info: src_pos = None\n\t\tenc_output = self.encoder(src_seq, src_pos)\n\t\tself.encode_model = Model(src_seq_input, enc_output)\n\n\t\tenc_ret_input = Input(shape=(None, self.d_model))\n\t\tdec_output = self.decoder(tgt_seq, tgt_pos, src_seq, enc_ret_input)\t\n\t\tfinal_output = self.target_layer(dec_output)\n\t\tself.decode_model = Model([src_seq_input, enc_ret_input, tgt_seq_input], final_output)\n\t\t\n\t\tself.encode_model.compile('adam', 'mse')\n\t\tself.decode_model.compile('adam', 'mse')\n\n\tdef decode_sequence_fast(self, input_seq, delimiter=''):\n\t\tif self.decode_model is None: self.make_fast_decode_model()\n\t\tsrc_seq = self.make_src_seq_matrix(input_seq)\n\t\tenc_ret = self.encode_model.predict_on_batch(src_seq)\n\n\t\tdecoded_tokens = []\n\t\ttarget_seq = np.zeros((1, self.len_limit), dtype='int32')\n\t\ttarget_seq[0,0] = self.o_tokens.startid()\n\t\tfor i in range(self.len_limit-1):\n\t\t\toutput = self.decode_model.predict_on_batch([src_seq,enc_ret,target_seq])\n\t\t\tsampled_index = np.argmax(output[0,i,:])\n\t\t\tsampled_token = self.o_tokens.token(sampled_index)\n\t\t\tdecoded_tokens.append(sampled_token)\n\t\t\tif sampled_index == self.o_tokens.endid(): break\n\t\t\ttarget_seq[0,i+1] = sampled_index\n\t\treturn delimiter.join(decoded_tokens[:-1])\n\n\tdef beam_search(self, input_seq, topk=5, delimiter=''):\n\t\tif self.decode_model is None: self.make_fast_decode_model()\n\t\tsrc_seq = self.make_src_seq_matrix(input_seq)\n\t\tsrc_seq = src_seq.repeat(topk, 0)\n\t\tenc_ret = self.encode_model.predict_on_batch(src_seq)\n\n\t\tfinal_results = []\n\t\tdecoded_tokens = [[] for _ in range(topk)]\n\t\tdecoded_logps = [0] * topk\n\t\tlastk = 1\n\t\ttarget_seq = np.zeros((topk, self.len_limit), dtype='int32')\n\t\ttarget_seq[:,0] = self.o_tokens.startid()\n\t\tfor i in range(self.len_limit-1):\n\t\t\tif lastk == 0 or len(final_results) > topk * 3: break\n\t\t\toutput = self.decode_model.predict_on_batch([src_seq,enc_ret,target_seq])\n\t\t\toutput = np.exp(output[:,i,:])\n\t\t\toutput = np.log(output \/ np.sum(output, -1, keepdims=True) + 1e-8)\n\t\t\tcands = []\n\t\t\tfor k, wprobs in zip(range(lastk), output):\n\t\t\t\tif target_seq[k,i] == self.o_tokens.endid(): continue\n\t\t\t\twsorted = sorted(list(enumerate(wprobs)), key=lambda x:x[-1], reverse=True)\n\t\t\t\tfor wid, wp in wsorted[:topk]: \n\t\t\t\t\tcands.append( (k, wid, decoded_logps[k]+wp) )\n\t\t\tcands.sort(key=lambda x:x[-1], reverse=True)\n\t\t\tcands = cands[:topk]\n\t\t\tbackup_seq = target_seq.copy()\n\t\t\tfor kk, zz in enumerate(cands):\n\t\t\t\tk, wid, wprob = zz\n\t\t\t\ttarget_seq[kk,] = backup_seq[k]\n\t\t\t\ttarget_seq[kk,i+1] = wid\n\t\t\t\tdecoded_logps[kk] = wprob\n\t\t\t\tdecoded_tokens.append(decoded_tokens[k] + [self.o_tokens.token(wid)]) \n\t\t\t\tif wid == self.o_tokens.endid(): final_results.append( (decoded_tokens[k], wprob) )\n\t\t\tdecoded_tokens = decoded_tokens[topk:]\n\t\t\tlastk = len(cands)\n\t\tfinal_results = [(x,y\/(len(x)+1)) for x,y in final_results]\n\t\tfinal_results.sort(key=lambda x:x[-1], reverse=True)\n\t\tfinal_results = [(delimiter.join(x),y) for x,y in final_results]\n\t\treturn final_results\n\nclass LRSchedulerPerStep(Callback):\n\tdef __init__(self, d_model, warmup=4000):\n\t\tself.basic = d_model**-0.5\n\t\tself.warm = warmup**-1.5\n\t\tself.step_num = 0\n\tdef on_batch_begin(self, batch, logs = None):\n\t\tself.step_num += 1\n\t\tlr = self.basic * min(self.step_num**-0.5, self.step_num*self.warm)\n\t\tK.set_value(self.model.optimizer.lr, lr)\n\nclass LRSchedulerPerEpoch(Callback):\n\tdef __init__(self, d_model, warmup=4000, num_per_epoch=1000):\n\t\tself.basic = d_model**-0.5\n\t\tself.warm = warmup**-1.5\n\t\tself.num_per_epoch = num_per_epoch\n\t\tself.step_num = 1\n\tdef on_epoch_begin(self, epoch, logs = None):\n\t\tself.step_num += self.num_per_epoch\n\t\tlr = self.basic * min(self.step_num**-0.5, self.step_num*self.warm)\n\t\tK.set_value(self.model.optimizer.lr, lr)\n\nclass AddPosEncoding:\n\tdef __call__(self, x):\n\t\t_, max_len, d_emb = K.int_shape(x)\n\t\tpos = GetPosEncodingMatrix(max_len, d_emb)\n\t\tx = Lambda(lambda x:x+pos)(x)\n\t\treturn x\n\n\nadd_layer = Lambda(lambda x:x[0]+x[1], output_shape=lambda x:x[0])\n# use this because keras may get wrong shapes with Add()([])\n\nclass QANet_ConvBlock:\n\tdef __init__(self, dim, n_conv=2, kernel_size=7, dropout=0.1):\n\t\tself.convs = [SeparableConv1D(dim, kernel_size, activation='relu', padding='same') for _ in range(n_conv)]\n\t\tself.norm = LayerNormalization()\n\t\tself.dropout = Dropout(dropout)\n\tdef __call__(self, x):\n\t\tfor i in range(len(self.convs)):\n\t\t\tz = self.norm(x)\n\t\t\tif i % 2 == 0: z = self.dropout(z)\n\t\t\tz = self.convs[i](z)\n\t\t\tx = add_layer([x, z])\n\t\treturn x\n\nclass QANet_Block:\n\tdef __init__(self, dim, n_head, n_conv, kernel_size, dropout=0.1, add_pos=True):\n\t\tself.conv = QANet_ConvBlock(dim, n_conv=n_conv, kernel_size=kernel_size, dropout=dropout)\n\t\tself.self_att = MultiHeadAttention(n_head=n_head, d_model=dim, \n\t\t\t\t\t\t\t\t\t d_k=dim\/\/n_head, d_v=dim\/\/n_head, \n\t\t\t\t\t\t\t\t\t dropout=dropout, use_norm=False)\n\t\tself.feed_forward = PositionwiseFeedForward(dim, dim, dropout=dropout)\n\t\tself.norm = LayerNormalization()\n\t\tself.add_pos = add_pos\n\tdef __call__(self, x, mask):\n\t\tif self.add_pos: x = AddPosEncoding()(x)\n\t\tx = self.conv(x)\n\t\tz = self.norm(x)\n\t\tz, _ = self.self_att(z, z, z, mask)\n\t\tx = add_layer([x, z])\n\t\tz = self.norm(x)\n\t\tz = self.feed_forward(z)\n\t\tx = add_layer([x, z])\n\t\treturn x\n\nclass QANet_Encoder:\n\tdef __init__(self, dim=128, n_head=8, n_conv=2, n_block=1, kernel_size=7, dropout=0.1, add_pos=True):\n\t\tself.dim = dim\n\t\tself.n_block = n_block\n\t\tself.conv_first = SeparableConv1D(dim, 1, padding='same')\n\t\tself.enc_block = QANet_Block(dim, n_head=n_head, n_conv=n_conv, kernel_size=kernel_size, \n\t\t\t\t\t\t\t\tdropout=dropout, add_pos=add_pos)\n\tdef __call__(self, x, mask):\n\t\tif K.int_shape(x)[-1] != self.dim:\n\t\t\tx = self.conv_first(x)\n\t\tfor i in range(self.n_block):\n\t\t\tx = self.enc_block(x, mask)\n\t\treturn x","3a2953c4":"d_model = 512\ns2s = Transformer(itokens, otokens, len_limit=70, d_model=d_model, d_inner_hid=512, \\\n\t\t\t\t   n_head=8, d_k=64, d_v=64, layers=2, dropout=0.1)\n\nmfile = '.\/en2de.model.h5'\n\nlr_scheduler = LRSchedulerPerStep(d_model, 4000)   # there is a warning that it is slow, however, it's ok.\n#lr_scheduler = LRSchedulerPerEpoch(d_model, 4000, Xtrain.shape[0]\/64)  # this scheduler only update lr per epoch\nmodel_saver = ModelCheckpoint(mfile, save_best_only=True, save_weights_only=True)\n\ns2s.compile(Adam(0.01, 0.9, 0.98, epsilon=1e-9))\ns2s.model.summary()\n","075dfed7":"s2s.model.fit([Xtrain, Ytrain], None, batch_size=64, epochs=30, validation_data=([Xvalid, Yvalid], None), callbacks=[lr_scheduler, model_saver])","4ec1d49d":"score = s2s.model.evaluate([Xvalid, Yvalid], None,batch_size = 32)\nprint(score)","750e57da":"## 1. rnn seq2seq"}}