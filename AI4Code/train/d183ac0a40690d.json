{"cell_type":{"195e0876":"code","38644338":"code","e4e30fc5":"code","ba9af42c":"code","d6006b6c":"code","1e772556":"code","7e3a9888":"code","40ca5f6c":"code","e596adf3":"code","a9889247":"code","0c68a160":"code","2a7c3219":"code","df78568e":"code","473efa0a":"code","5ae829e3":"code","6a003956":"code","e3b59fdb":"code","33cd894b":"code","8719bb87":"code","700b928b":"code","0894b30a":"code","8ced47cf":"code","c0824b07":"code","f2cc9950":"code","99c3dedf":"code","d0f471bc":"code","b27159a1":"markdown","7a246bfb":"markdown"},"source":{"195e0876":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","38644338":"import glob\nfn = glob.glob('\/kaggle\/input\/siic-isic-224x224-images\/train\/*.*')\nlen(fn)","e4e30fc5":"!pip install fastai2","ba9af42c":"import pandas as pd\nimport numpy as np\nimport random\nimport geopandas as gpd\nimport rasterio\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nfrom fastai2.torch_basics import *\nfrom fastai2.basics import *\nfrom fastai2.data.all import *\nfrom fastai2.callback.all import *\nfrom fastai2.vision.all import *\nfrom fastai2.test_utils import *\nfrom fastai2.vision.core import *\nfrom fastai2.metrics import *\nfrom sklearn.metrics import roc_auc_score","d6006b6c":"train = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ntrain.shape","1e772556":"train_1 = train[train['target']==1]\ntrain_1.shape","7e3a9888":"train_0 = train[train['target']==0].sample(frac=0.018)\ntrain_0.shape","40ca5f6c":"df = pd.concat([train_0,train_1]).reset_index(drop=True)\ndf.shape","e596adf3":"df.head()","a9889247":"#Read an image\nimg = Image.open('\/kaggle\/input\/siic-isic-224x224-images\/train\/ISIC_0645834.png')\nplt.imshow(np.asarray(img))","0c68a160":"# CHeck shape and number of True labels\ndf.shape, df.target.value_counts()","2a7c3219":"df['file_name'] = df['image_name'].apply(lambda x: f\"\/kaggle\/input\/siic-isic-224x224-images\/train\/{x}\"+\".png\" )","df78568e":"df.head()","473efa0a":"#df['target']=df['target'].apply(lambda x: float(x))\ndf.head()","5ae829e3":"from sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=3,shuffle=True,random_state=42)\nX=df['file_name'].copy()\ny=df['target'].copy()\nfold = 0\nfor train_index, test_index in skf.split(X, y):\n    fold+= 1\n    print('In fold',fold)\n    print(\"TRAIN LENGTH:\", len(train_index), \"VALIDATION LENGTH:\", len(test_index))\n    df[f'fold_{fold}_valid']=False\n    df.loc[test_index,f'fold_{fold}_valid']=True","6a003956":"df.head()","e3b59fdb":"test = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\ntest.shape","33cd894b":"test['file_name'] = test['image_name'].apply(lambda x: f\"\/kaggle\/input\/siic-isic-224x224-images\/test\/{x}\"+\".png\" )","8719bb87":"test.head()","700b928b":"ss = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\nss.shape","0894b30a":"#roc_auc=skm_to_fastai(roc_auc_score)\nroc_auc = RocAuc()\nmetrics = [accuracy,roc_auc]","8ced47cf":"def dataloader(fold):\n    tfm=aug_transforms(do_flip=True, flip_vert=True, max_rotate=45.0, max_zoom=1.1, size=224,max_lighting=0.2, max_warp=0.4, p_affine=0.75, p_lighting=0.75, xtra_tfms=None, mode='bilinear')\n    dls = ImageDataLoaders.from_df(df, fn_col='file_name',label_col='target', valid_col=f'fold_{fold}_valid',path='', folder='\/', seed=42,batch_tfms = [*tfm, Normalize.from_stats(*imagenet_stats)],bs=32,num_workers=0)\n    return dls","c0824b07":"final_preds=np.zeros((ss.shape[0],ss.shape[1]))\nfold = 0\nfor fold in range(3):\n    fold+=1\n    print('In fold:',fold)\n    dls=dataloader(fold)\n    learn = cnn_learner(dls,resnet34,metrics=metrics)\n    learn.fine_tune(10)\n    test_dl=learn.dls.test_dl(test)\n    preds, _ = learn.tta(dl=test_dl)\n    print('Prediction completed in fold: {}'.format(str(fold)))\n    final_preds+=preds.numpy()\n    \n\nfinal_preds=final_preds\/3","f2cc9950":"test['target'] = final_preds[:,1]\ntest.head()","99c3dedf":"ss.head()","d0f471bc":"test[['image_name', 'target']].to_csv('Sub.csv', index=False)","b27159a1":"**Here we follow the strategy of downsampling the class 0 to ensure that the training data has equal number of both samples**","7a246bfb":"# This is a beginner kernel to showcase the use of fastai2 to approach this competition"}}