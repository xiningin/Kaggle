{"cell_type":{"aa329a3d":"code","808ae9e0":"code","383cabe3":"code","e2c95710":"code","877281e3":"code","21fd4c7a":"code","841f5d19":"code","4600145d":"code","545a0f77":"code","c664dc9a":"code","4fa174a8":"code","c4e97a01":"markdown","da33ae96":"markdown","77c5945a":"markdown","53d4b9ad":"markdown","3be8df67":"markdown","6e687fc6":"markdown","06e046cd":"markdown","bdb9a5fd":"markdown","93831a35":"markdown","8f70ca4c":"markdown","8d52228f":"markdown"},"source":{"aa329a3d":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n1. General Purpose\nThe following packages are called for accessing the filesystem and handling the each file.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nimport os, json, random\nfrom PIL import Image\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n2. Data Handling\nThe packages called as below help to handle the array, constructed with number, and tabular data.\nThese packages accelerates result derivation because, numpy supports broadcasting at calculation.\nAlso, pandas, the numpy dependency package, supports accelerated calculation.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nimport numpy as np \nimport pandas as pd \n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n3. Machine \/ Deep Learning\nThis source code uses PyTorch for derivating the results.\nRefer that *PyTorch is one of the deep learning framework like TensorFlow, Keras, or MXNet.\n* https:\/\/pytorch.org\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nimport torch\nimport torch.nn as nn\nimport torchvision\nimport torchvision.transforms as transforms\nfrom torch.utils.data import Dataset, DataLoader\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n4. Device Setting\nWhen using the deep learning framework, GPU acceleration is highly useful for getting result faster.\nIn this source code, using GPU is the default option.\nHowever, when you turn off the 'Accelerator', as 'None' option, the CPU will be used.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nDEVICE = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","808ae9e0":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\nFixing the random seed\nFor making the environment statically, fixing the random seed is needed.\nAlso, it is essential to reproduce the experimental results.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\ndef seed_fix(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_fix()","383cabe3":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n1. Hyperparameters for training the deep learning model.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nBATCH = 16\nEPOCHS = 2\nLR = 0.01\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n# 2. For handling large size data. The original image is lager than 64 x 64.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nIM_SIZE = 64 \nNUM_CLASS = None # set in the below block\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n# 3. Set the path for loading the training and test data.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nTRAIN_DIR = '..\/input\/herbarium-2021-fgvc8\/train\/'\nTEST_DIR = '..\/input\/herbarium-2021-fgvc8\/test\/'","e2c95710":"with open(TRAIN_DIR + 'metadata.json', \"r\", encoding=\"ISO-8859-1\") as file:\n    train = json.load(file)   ","877281e3":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n# 1. Parsing the image and annotations (labels) from the 'train' dictionary.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\ntrain_img = pd.DataFrame(train['images'])\ntrain_ann = pd.DataFrame(train['annotations']).drop(columns='image_id')\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n# 2. Merge the images and annotations as a dataframe.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\ntr_df = train_img.merge(train_ann, on='id')\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n# 3. Confirmation of the training dataset.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nprint(tr_df.shape)\ntr_df.head()","21fd4c7a":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n1, Set number of the class using the training set.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nNUM_CLASS = tr_df['category_id'].max() - tr_df['category_id'].min() + 1\nNUM_CLASS\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n2. Split the input and target from the training set.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nX_Train, Y_Train = tr_df['file_name'].values, tr_df['category_id'].values\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n3. Define the dataset composer\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nTransform = transforms.Compose(\n    [transforms.ToTensor(),\n    transforms.Resize((IM_SIZE, IM_SIZE)),\n    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n4. The class object for using dataset on training process.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nclass GetData(Dataset):\n    def __init__(self, Dir, FNames, Labels, Transform):\n        self.dir = Dir\n        self.fnames = FNames\n        self.transform = Transform\n        self.labels = Labels         \n        \n    def __len__(self):\n        return len(self.fnames)\n\n    def __getitem__(self, index):       \n        x = Image.open(os.path.join(self.dir, self.fnames[index]))\n    \n        if \"train\" in self.dir:             \n            return self.transform(x), self.labels[index]\n        elif \"test\" in self.dir:            \n            return self.transform(x), self.fnames[index]\n        \n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n5. Define the training set via the class 'GetData' and trainloader via the 'DataLoader'.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\ntrainset = GetData(TRAIN_DIR, X_Train, Y_Train, Transform)\ntrainloader = DataLoader(trainset, batch_size=BATCH, shuffle=True)","841f5d19":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n1. Download the pre-defined model, well known as ResNet-18.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nmodel = torchvision.models.resnet18()\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n2. Set the final layer, as used as classifier, for using the dataset in this task.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\nmodel.fc = nn.Linear(512, NUM_CLASS, bias=True)\nmodel = model.to(DEVICE)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=LR)","4600145d":"for epoch in range(EPOCHS):\n    tr_loss = 0.0\n\n    model = model.train()\n\n    for i, (images, labels) in enumerate(trainloader):        \n        images = images.to(DEVICE)\n        labels = labels.to(DEVICE)       \n        logits = model(images.float())       \n        loss = criterion(logits, labels)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        tr_loss += loss.detach().item()\n    \n    model.eval()\n    print('Epoch: %d | Loss: %.4f'%(epoch, tr_loss \/ i))","545a0f77":"\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n1. Preparing the test set.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\n%%time\nwith open(TEST_DIR + 'metadata.json', \"r\", encoding=\"ISO-8859-1\") as file:\n    test = json.load(file)\n\ntest_df = pd.DataFrame(test['images'])\nprint(len(test_df))\ntest_df.head()\n\nX_Test = test_df['file_name'].values\n\ntestset = GetData(TEST_DIR, X_Test, None, Transform)\ntestloader = DataLoader(testset, batch_size=1, shuffle=False)\n\n\n\"\"\" -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-\n2. Inference the ID of the test set.\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*- \"\"\"\n%%time\n\ns_ls = []\n\nwith torch.no_grad():\n    model.eval()\n    for image, fname in testloader: \n        image = image.to(DEVICE)\n        \n        logits = model(image)        \n        ps = torch.exp(logits)        \n        _, top_class = ps.topk(1, dim=1)\n        \n        for pred in top_class:\n            s_ls.append([fname[0].split('\/')[-1][:-4], pred.item()])","c664dc9a":"sub = pd.DataFrame.from_records(s_ls, columns=['Id', 'Predicted'])\nsub.head()","4fa174a8":"sub.to_csv(\"submission.csv\", index=False)","c4e97a01":"# Model","da33ae96":"## Functions","77c5945a":"## Global Variables\nSet the global variables for proceed overall source code.","53d4b9ad":"## Model Preparing","3be8df67":"# Dataset","6e687fc6":"# Ready\n\nThis section presents environmental setting for experiment.","06e046cd":"## Test Procedure","bdb9a5fd":"# Make Submission","93831a35":"# Introduction\n\nWelcome to join the competition, '<a href=\"https:\/\/www.kaggle.com\/c\/herbarium-2021-fgvc8\/overview  \">Herbarium 2021 - Half-Earth Challenge - FGVC8<\/a>'  \nThis notebook provides the easy way to complete the submission.  \nAll of the code blocks contain the comments.  ","8f70ca4c":"## Model Training","8d52228f":"## Python Packages"}}