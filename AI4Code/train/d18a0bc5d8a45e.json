{"cell_type":{"ecd4b82a":"code","6d55de25":"code","f3e604bd":"code","bf514cbc":"code","baa033ae":"code","30aeba36":"code","f7b06d8e":"code","5e0da25c":"code","d0a28356":"code","15d99144":"code","e874ae82":"code","a8f6cb6a":"code","11f81103":"code","997c25d4":"code","c6a7fb01":"code","73f70564":"code","5334f41a":"code","213036d4":"code","32621ce6":"code","70ff93ec":"code","7b2e7688":"code","be06bd4c":"code","23df3e2e":"code","a13d25b2":"code","32fac9e9":"code","039a5f97":"code","1983b69b":"code","45a6a5a9":"code","ecb187a3":"code","403eeb86":"code","233b5eb1":"code","88623ac2":"code","537ac551":"code","056350e1":"code","0e69cc73":"code","f307325c":"code","b5a43fb7":"code","09ec1eb0":"code","1e1d7064":"code","ef83cfef":"code","89f1c787":"markdown","322f136b":"markdown","b4a3304e":"markdown","c1187d15":"markdown","4e22babc":"markdown","bbc711bb":"markdown","38bc6331":"markdown","8ba6741c":"markdown","5b9fc1c0":"markdown","498360e3":"markdown","e3228717":"markdown"},"source":{"ecd4b82a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nsns.set_palette('Set3')\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 18, 8\n","6d55de25":"train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","f3e604bd":"train.tail()","bf514cbc":"train.shape","baa033ae":"train.info()","30aeba36":"test.info()","f7b06d8e":"train.isnull().sum()","5e0da25c":"test.isnull().sum()","d0a28356":"train.describe()","15d99144":"test.describe()","e874ae82":"sample_submission.sample(5)","a8f6cb6a":"# Catgorical column describtion \ntrain.describe(exclude=[np.number])","11f81103":"sns.displot(train.target).set(title='Distripution of Target');\nplt.show();","997c25d4":"corr = train.corr()\ncorr.style.background_gradient(cmap='Blues')\n","c6a7fb01":"sns.boxplot(data = train)","73f70564":"train.head()","5334f41a":"train.columns","213036d4":"%%capture\n!pip install category-encoders\nimport category_encoders as ce\n\n# Ordinally Encoded Train Dataframe\nencoder = ce.OrdinalEncoder()\ntrain_encode = encoder.fit_transform(train)","32621ce6":"train_encode.head()","70ff93ec":"# Ordinally Encoded Test Dataframe \nencoder = ce.OrdinalEncoder()\ntest_encode = encoder.fit_transform(test)","7b2e7688":"test_encode.head()","be06bd4c":"from sklearn.model_selection import train_test_split\n# select split parameter\nx = train_encode.drop(['target'], axis=1)\ny = train_encode.target","23df3e2e":"# splitting into train and test sets for both parameters\nx_train, x_test ,y_train , y_test = train_test_split(x,y, test_size=0.7, random_state= 42)","a13d25b2":"from sklearn.ensemble import RandomForestRegressor\n\n\nrfr = RandomForestRegressor()","32fac9e9":"rfr.fit(x_train, y_train)","039a5f97":"rfr_preds = rfr.predict(x_test)\n\nrfr_preds","1983b69b":"# Evaluate MSE\nfrom sklearn.metrics import mean_squared_error\n\nmean_squared_error(y_test, rfr_preds)","45a6a5a9":"from sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(y_test, rfr_preds)","ecb187a3":"from sklearn.neighbors import KNeighborsRegressor\nknn = KNeighborsRegressor()","403eeb86":"knn.fit(x_train, y_train)","233b5eb1":"knn_preds = knn.predict(x_test)\n\nknn_preds","88623ac2":"# Evaluate MSE\nmean_squared_error(y_test, knn_preds)","537ac551":"# Evaluate MAE\nmean_absolute_error(y_test, knn_preds)","056350e1":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()","0e69cc73":"lr.fit(x_train, y_train)","f307325c":"lr_preds = lr.predict(x_test)\n\nlr_preds","b5a43fb7":"# Evaluate MSE\nmean_squared_error(y_test, lr_preds)","09ec1eb0":"# Evaluate MAE\nmean_absolute_error(y_test, lr_preds)","1e1d7064":"test_preds = rfr.predict(test_encode)\ntest_preds","ef83cfef":"sample_submission['target'] = test_preds\nsample_submission.to_csv('submission.csv', index=False)","89f1c787":"# 3.**LinearRegression**","322f136b":"# 1.**Random Forest Regressor**","b4a3304e":"### Look at data...","c1187d15":"# **Models**","4e22babc":"# **Prepar Data to modling**","bbc711bb":"# Do your stuff...\n\n### Deleverables\n- EDA\n    - What's going on?\n    - Show me the data...\n    - Bonus: Other \/ Etc...\n- Model\n    - [RandomForestRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestRegressor.html)\n    - Bonus: [KNeighborsRegressor()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsRegressor.html)\n    - Bonus: Other \/ Etc...\n- Evaluation\n    - mean_squared_error()\n    - Bonus: [roc_auc_score()](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.roc_auc_score.html)\n    - Bonus: Other \/ Etc...\n- RAPIDS Bonus\n    - Apply RAPIDS ([Starter Notebook](https:\/\/www.kaggle.com\/tunguz\/tps-feb-2021-rapids-starter))\n    - Replace pandas with cuDF & sklearn with cuDF & cuML","38bc6331":"#### Load data...","8ba6741c":"# **Spilt Data**","5b9fc1c0":"# **Pridict on Test Data**","498360e3":"# 2.**KNeighbors Regressor**","e3228717":"# **EDA**"}}