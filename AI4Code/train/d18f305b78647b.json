{"cell_type":{"5836cd76":"code","ae244dd0":"code","a5662882":"code","b148a99d":"code","66570f8c":"code","f1fc4b4a":"code","7c78dcd8":"code","b99fa38a":"code","32bfa066":"code","05fb287a":"code","dd84b2ca":"code","f1eaac8f":"code","3d4ee8e0":"code","5f8b15da":"code","dc47cb32":"code","12b6690a":"code","ea9b7085":"code","4baf48a0":"code","dacd039d":"code","1d55d32c":"code","2bc7fb48":"code","82aab74b":"code","2d6b4471":"markdown","c864d41d":"markdown","c9933ee9":"markdown","26af054e":"markdown","c394d2e2":"markdown","6a81f18c":"markdown","61662d8f":"markdown","013f5a5f":"markdown","19d1ee50":"markdown","e95910db":"markdown","1e120ed4":"markdown","57bc1486":"markdown","ed465e15":"markdown","8dbebc25":"markdown","cb0b2254":"markdown","c51571c5":"markdown","f912dc7c":"markdown"},"source":{"5836cd76":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nimport matplotlib.pyplot as plt\nfrom pandas_profiling import ProfileReport\nimport plotly.express as px\n\n%matplotlib inline","ae244dd0":"# identify file path\nfor dirname, _ , filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        data_path = os.path.join(dirname, filename)\n        print(data_path)\n        \n# import file\ndf_data = pd.read_csv(data_path)","a5662882":"df_data.head()","b148a99d":"df_data.info()\nprint(f'\\nData shape: {df_data.shape}')","66570f8c":"pd.DataFrame({'Features':df_data.isnull().sum().index, 'missing count':df_data.isnull().sum().values, '% missing': np.round(df_data.isnull().sum().values \/ len(df_data) *100, 1)}).set_index('Features')","f1fc4b4a":"missing_data_row = pd.DataFrame({'missing count':df_data.isnull().sum(axis=1), '% missing': df_data.isnull().sum(axis=1) \/ df_data.shape[1] *100})\nmissing_data_row.sort_values(by='% missing', ascending=False)","7c78dcd8":"cat_data = df_data.columns[df_data.dtypes=='O']\nfor col in cat_data:\n    print(f'column {col}: \\nUnique = {df_data[col].unique()}, \\nNumber of Unique = {df_data[col].nunique()}\\n')","b99fa38a":"profile = ProfileReport(df_data, title='Report')\nprofile","32bfa066":"df_copy = df_data.loc[df_data.Year_of_Release.notnull()]\nnum_of_feature_per_year = df_copy.groupby('Year_of_Release')['Name'].agg('count')\nplt.figure(figsize=(25, 10))\nsns.barplot(x=num_of_feature_per_year.index, y=num_of_feature_per_year.values)\nplt.title(f'Total released video-games by year')\nplt.xlabel('Year of Release')\nplt.ylabel(f'Number of Game produce')\nplt.show()","05fb287a":"fig = px.histogram(df_copy.sort_values(by=['Year_of_Release', 'Platform']), \n             x='Platform', \n             range_x=[0, 10], \n             animation_frame='Year_of_Release', \n             range_y=[0, 550], \n             color='Year_of_Release')\nfig.update_layout(title=\"Total released video-games by platform across year\")","dd84b2ca":"Top_platform_produce = {}\nyears = df_copy.Year_of_Release.unique()\nyears.sort()\nfor year in years:\n    top_platform = df_copy.loc[df_copy.Year_of_Release==year].groupby('Platform').agg('count').sort_values(by='Name', ascending=False).reset_index().iloc[0,0]\n    Top_platform_produce[year] = top_platform\ntop_platform_df = pd.DataFrame.from_dict(Top_platform_produce, orient='index', columns=['Highest total released video-games Platform'])\ntop_platform_df","f1eaac8f":"fig02 = px.histogram(df_copy.sort_values(by=['Year_of_Release', 'Genre']), \n             x='Genre', \n             range_x=[0, 12], \n             animation_frame='Year_of_Release', \n             range_y=[0, 300],\n            color='Year_of_Release')\nfig02.update_layout(title=\"Total released video-games by Genre across year\")","3d4ee8e0":"Top_Genre_produce = {}\nyears = df_copy.Year_of_Release.unique()\nyears.sort()\nfor year in years:\n    top_genre = df_copy.loc[df_copy.Year_of_Release==year].groupby('Genre', as_index=False).agg('count').sort_values(by='Name', ascending=False).iloc[0,0]\n    Top_Genre_produce[year] = top_genre\ntop_genre_prod_df = pd.DataFrame.from_dict(Top_Genre_produce, orient='index', columns=['Most Genre type produced'])\ntop_genre_prod_df","5f8b15da":"sale_regions = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']\ndf_sale = df_copy.groupby('Year_of_Release')[sale_regions].agg('sum')\n\nfig, ax = plt.subplots(2, 1, figsize=(25, 10))\nsns.lineplot(data=df_sale, ax=ax[0])\nsns.barplot(x=num_of_feature_per_year.index, y=num_of_feature_per_year.values)\nplt.title('Sale in various regions')\nplt.ylabel('Sale (in millions of units)')\nplt.xlabel('year')","dc47cb32":"d = df_copy.groupby('Year_of_Release').agg({'Global_Sales': ['mean', 'min', 'max']})\nfig, ax = plt.subplots(3, 1, figsize=(25, 10))\nfor idx, col in enumerate(d.Global_Sales.columns):\n    sns.lineplot(data=d.Global_Sales[col], ax=ax[idx])\nplt.show()","12b6690a":"fig, ax = plt.subplots(2, 3, figsize=(25, 10))\nselected_year = [1985, 2000, 2008]\nfor idx, year in enumerate(selected_year):\n    sns.distplot(df_copy[sale_regions + ['Year_of_Release']].loc[df_copy.Year_of_Release == year].Global_Sales, ax=ax[0][idx])\n    ax[0][idx].set_title(year)\nfor idx, year in enumerate(selected_year):\n    sns.boxplot(df_copy[sale_regions + ['Year_of_Release']].loc[df_copy.Year_of_Release == year].Global_Sales, ax=ax[1][idx])\nplt.show()","ea9b7085":"df_sale_total = df_copy.groupby(['Year_of_Release', 'Platform'])['Global_Sales'].agg('sum').reset_index()\nfig03 = px.bar(df_sale_total, x='Platform', range_x=[0, 10], y='Global_Sales', range_y=[0, 200], animation_frame='Year_of_Release', color='Global_Sales')\nfig03.update_layout(title='Global sale for various platform')","4baf48a0":"df_sale_total = df_copy.groupby(['Year_of_Release', 'Genre'])['Global_Sales'].agg('sum').reset_index()\nfig03 = px.bar(df_sale_total, x='Genre', range_x=[0, 12], y='Global_Sales', range_y=[0, 150], animation_frame='Year_of_Release', color='Global_Sales')\nfig03.update_layout(title='Global sale for various Genre')","dacd039d":"sel_year = int(input('Select year to compare (1980 - 2020):'))\nselected_year = [1980, 2000, 2009, sel_year]\nfor idx, year in enumerate(selected_year):\n    df_sale_genre = df_sale_total.loc[df_sale_total.Year_of_Release==year][['Genre', 'Global_Sales']]\n    fig = px.pie(df_sale_genre,\n          values='Global_Sales',\n          names='Genre',\n            width=400,\n            height=300)\n    fig.update_layout(title=year)\n    fig.show()","1d55d32c":"top_genre_dict = {}\ntop_genre_sale = df_copy[['Global_Sales', 'Genre', 'Year_of_Release']].groupby(['Year_of_Release', 'Genre'], as_index=False).agg({'Global_Sales':'max'}).sort_values(by=['Year_of_Release', 'Global_Sales'])\nfor year in df_sale.index:\n    top_genre_dict[year] = top_genre_sale.loc[top_genre_sale.Year_of_Release == year].iloc[-1].Genre\ntop_genre_sale_df = pd.DataFrame.from_dict(top_genre_dict, orient='index', columns=['Top Genre Sale'])\npd.merge(top_genre_prod_df, top_genre_sale_df, how='inner', on=top_genre_sale_df.index).set_index(top_genre_prod_df.index).drop('key_0', axis=1).iloc[-10:,]","2bc7fb48":"top_genre_sale.loc[top_genre_sale.Year_of_Release == 1980].iloc[-1].Genre","82aab74b":"na = pd.DataFrame({'Region': ['NA_Sales']*df_sale.shape[0], 'year':df_sale.index, 'Sales': df_sale['NA_Sales']})\neu = pd.DataFrame({'Region': ['EU_Sales']*df_sale.shape[0], 'year':df_sale.index, 'Sales': df_sale['EU_Sales']})\njp = pd.DataFrame({'Region': ['JP_Sales']*df_sale.shape[0], 'year':df_sale.index, 'Sales': df_sale['JP_Sales']})\nother = pd.DataFrame({'Region': ['Other_Sales']*df_sale.shape[0], 'year':df_sale.index, 'Sales': df_sale['Other_Sales']})\ndf_sale_reverse = pd.concat([na, eu, jp, other]).sort_values(by=['year', 'Region'])\nfig04 = px.bar(df_sale_reverse, x='Region', range_x=[0, 4], y='Sales', range_y=[0, 350], animation_frame='year', color='Region')\nfig04.update_layout(title='Year sale by regions')","2d6b4471":"From year 1980 - 1995, the sale production volume is low compare to year 2005 onward. Thus, a couple of outlier value will cause the mean value to shift dractically. ","c864d41d":"PlayStation(PS) family producing more game (dominant) in the latest year, follow by DS. Some platform has fade-out such as platform 2600 which used to dominant in 1980, but faded out on 1990.","c9933ee9":"- Majority sale from NA_Sales, follow by EU_Sales from past decade","26af054e":"- line plot for different region sale\nNote:\n- NA_Sales = North America \n- EU_Sales = European Union\n- JP_Sales - Japan\n- Other_Sales - In the rest of the world, i.e. Africa, Asia excluding Japan, Australia, Europe\n- Global_Sales - Total sales in the World\n- All sale unit in millions of units","c394d2e2":"import Dataset\n-","6a81f18c":"More genres type was introduced in 1991. Action genre has dominant the market volume for more than decade. ","61662d8f":"<a id=\"3\"><\/a>\n\nData Visualization\n-\n\n- Barplot to show relatioship between number of game produced and year of release","013f5a5f":"- Unique data (Category data)","19d1ee50":"- No suprise as we find the correlation between yearly game production volume and yearly sale (summation)","e95910db":"<a id=\"2\"><\/a>\n\nReport Generation\n-","1e120ed4":"- identify missing value and % of missing (in rows)","57bc1486":"<a id=\"1\"><\/a>\n**First glance of data type and missing value**\n","ed465e15":"- identify missing value and % of missing (in columns)","8dbebc25":"Context\n-\nMotivated by Gregory Smith's web scrape of VGChartz Video Games Sales, this data set simply extends the number of variables with another web scrape from Metacritic. Unfortunately, there are missing observations as Metacritic only covers a subset of the platforms. Also, a game may not have all the observations of the additional variables discussed below. Complete cases are ~ 6,900\n\n* [First glance](#1)\n* [Generate Report](#2)\n* [Data Visualization](#3)","cb0b2254":"- Histogram plot to show various Platform and their game produce (count) across the year","c51571c5":"Sale Analysis\n-","f912dc7c":"Number of game produce show an increasing trend over the year (peak at 2008 and 2009). However, starting from year 2010 it showing down trend. Year 2017 onward data scrapping from website is became unavailable. Still finding solution\/ alternative way to update the data. "}}