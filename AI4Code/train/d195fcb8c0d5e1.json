{"cell_type":{"51a1d948":"code","a3da01d4":"code","84535967":"code","333d05eb":"code","25e6440b":"code","26dc61fc":"code","881aca62":"code","283999f0":"code","27630416":"code","7e32054f":"code","8d74a857":"code","b4460295":"code","02628ff0":"code","dbdff0ba":"code","6208a245":"code","9cc4771b":"code","95480451":"code","539ea0a0":"code","b1f12b3a":"code","2921044f":"code","e70ab5d0":"code","bff8b95d":"code","255a3ec8":"code","cb01e1e2":"code","ab5429a3":"code","19dd1d0f":"code","42a75877":"code","54b9131c":"code","d833e926":"code","35ff3ef0":"code","44ac15b9":"code","6a8be494":"code","5b57e9ab":"code","6a5cb945":"code","ec8f4d1b":"code","653dfefb":"code","4e157355":"code","e70b8e7e":"code","8befb3d7":"code","c9e5273c":"markdown","410ecf09":"markdown","a4adce42":"markdown","f2972732":"markdown","d5b6d968":"markdown","1f67d620":"markdown","94ba9d17":"markdown","f52dcc48":"markdown","0ad4285e":"markdown"},"source":{"51a1d948":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3da01d4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing \nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom category_encoders import *\nfrom sklearn.preprocessing import LabelEncoder\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets, linear_model, metrics\nfrom sklearn.metrics import  confusion_matrix","84535967":"df = pd.read_csv('..\/input\/iris-flower-dataset\/IRIS.csv')\ndf","333d05eb":"df.head()","25e6440b":"df.tail()","26dc61fc":"df.shape","881aca62":"df.size","283999f0":"df.dtypes","27630416":"df.columns","7e32054f":"df.info()","8d74a857":"df.describe()","b4460295":"df.duplicated().sum()","02628ff0":"df.drop(['species'],axis = 1).skew()","dbdff0ba":"df.drop(['species'],axis = 1).corr()","6208a245":"! pip install Autoviz","9cc4771b":"! pip install xlrd","95480451":"from autoviz.AutoViz_Class import AutoViz_Class\nAV = AutoViz_Class()\ndf_av = AV.AutoViz('..\/input\/iris-flower-dataset\/IRIS.csv')","539ea0a0":"df['species'].value_counts()","b1f12b3a":"sns.countplot(x = 'species',data=df)\nplt.show()","2921044f":"plt.figure(figsize=(6,8))\nx = df.drop(['species'],axis = 1)\nfor i in x.columns:\n    sns.histplot(x[i],kde = True)\n    plt.show()","e70ab5d0":"plt.figure(figsize=(16,9))\nax = sns.heatmap(df.corr(),annot = True, cmap = 'viridis')\nplt.show()","bff8b95d":"x = df.drop(['species'],axis = 1)\nfor i in x.columns:\n    sns.boxplot(x = i, data = x,color = 'yellowgreen')   #Sepalwidthcm has outliers\n    plt.xlabel(i)\n    plt.show()","255a3ec8":"x = df.drop(['species'],axis = 1)\nfor i in x.columns:\n    sns.violinplot(x = i, data = x,color = 'yellowgreen')   #Sepalwidthcm has outliers\n    plt.xlabel(i)\n    plt.show()","cb01e1e2":"plt.figure(figsize=(6,8))\nx = 'sepal_length'\nfor i in df.columns[1:-1]:\n    sns.scatterplot(x,i,data = df)\n    plt.show()","ab5429a3":"plt.figure(figsize=(6,8))\nx = 'petal_length'\nfor i in df.columns[:-1]:\n    sns.scatterplot(x,i,data = df)\n    plt.show()","19dd1d0f":"plt.figure(figsize=(6,8))\nx = 'sepal_width'\nfor i in df.columns[:-1]:\n    sns.scatterplot(x,i,data = df)\n    plt.show()","42a75877":"plt.figure(figsize=(6,8))\nx = 'petal_width'\nfor i in df.columns[:-1]:\n    sns.scatterplot(x,i,data = df)\n    plt.show()","54b9131c":"plt.figure(figsize=(6,8))\nsns.scatterplot(x = 'sepal_length' ,y = 'sepal_width', hue = 'species',data = df)\nplt.show()","d833e926":"plt.figure(figsize=(6,8))\nsns.scatterplot(x = 'petal_length' ,y = 'petal_width', hue = 'species',data = df)\nplt.show()","35ff3ef0":"plt.figure(figsize=(6,8))\nsns.scatterplot(x = 'sepal_length' ,y = 'petal_length', hue = 'species',data = df)\nplt.show()","44ac15b9":"plt.figure(figsize=(6,8))\nsns.scatterplot(x = 'sepal_length' ,y = 'petal_width', hue = 'species',data = df)\nplt.show()","6a8be494":"plt.figure(figsize=(6,8))\nsns.scatterplot(x = 'petal_length' ,y = 'sepal_width', hue = 'species',data = df)\nplt.show()","5b57e9ab":"plt.figure(figsize=(6,8))\nsns.scatterplot(x = 'petal_width' ,y = 'sepal_width', hue = 'species',data = df)\nplt.show()","6a5cb945":"def count_outliers(data,col):\n        q1 = data[col].quantile(0.25,interpolation='nearest')\n        q2 = data[col].quantile(0.5,interpolation='nearest')\n        q3 = data[col].quantile(0.75,interpolation='nearest')\n        q4 = data[col].quantile(1,interpolation='nearest')\n        IQR = q3 -q1\n        global LLP\n        global ULP\n        LLP = q1 - 1.5*IQR\n        ULP = q3 + 1.5*IQR\n        if data[col].min() > LLP and data[col].max() < ULP:\n            print(\"No outliers in\",i)\n        else:\n            print(\"There are outliers in\",i)\n            x = data[data[col]<LLP][col].size\n            y = data[data[col]>ULP][col].size\n            a.append(i)\n            print('Count of outliers are:',x+y)\nglobal a\na = []\nfor i in df.columns[:-1]:\n    count_outliers(df,i)","ec8f4d1b":"df","653dfefb":"c1='species'\nlabel_encoder = preprocessing.LabelEncoder()\ndf[c1]= label_encoder.fit_transform(df[c1])\ndf[c1].unique()\ndf","4e157355":"sns.pairplot(df)","e70b8e7e":"X = df.drop(['species'],axis = 1)\nY = df['species']\nX_train,X_test,y_train,y_test = train_test_split(X,Y,test_size = 0.3,random_state=44)\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","8befb3d7":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nforest= RandomForestClassifier(n_estimators =40, random_state = 0)\nscaler = StandardScaler()\nscaler.fit(X_train, y_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nforest.fit(X_train,y_train)  \ny_pred = forest.predict(X_test)\nforest.score(X_test,y_test)","c9e5273c":"# Data Preprocessing","410ecf09":"# Data visualisation using Autoviz","a4adce42":"# Prediction using Random Foresrt","f2972732":"# Exploratory Data Analysis","d5b6d968":"# Count of Outliers","1f67d620":"# Importing Libraries","94ba9d17":"# Data Visualisation","f52dcc48":"# Feature Selection and scaling","0ad4285e":"# Loading DataSet"}}