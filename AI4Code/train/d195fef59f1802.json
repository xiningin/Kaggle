{"cell_type":{"a58fa508":"code","071d7061":"code","ec8fcb18":"code","5c64d0ff":"code","b5aca141":"code","8cfabc6a":"code","61736eda":"code","3d42b3c0":"code","2b903b58":"code","a854a597":"code","86a08a3c":"code","400b1179":"code","e6e22759":"code","d3311fac":"code","0cd6ffa5":"code","d238526b":"code","546eb4bc":"code","0dbbd74e":"code","d2c98a71":"code","982b7084":"code","52f59300":"code","0df5fbb9":"code","bde1e8cb":"code","1b8f4574":"code","f9d2a6b8":"code","be28cea0":"code","e3fc9d0b":"code","5af53964":"code","bfb42e7d":"code","2672a95c":"code","d99bc9a0":"code","193af468":"code","a06d502e":"code","ca5a8443":"code","c5440c7d":"code","684f10ca":"code","9636e956":"code","025bd3c8":"code","9a02b96a":"code","f504067a":"code","f4fe33d6":"code","3e68e212":"code","4030983e":"code","4a8f661b":"code","38552641":"markdown","37738d24":"markdown","819360a8":"markdown","5dfe84f1":"markdown","c16169f1":"markdown","8ac1ba58":"markdown","4dc16374":"markdown","9cbb73f7":"markdown","9875a7e9":"markdown","a442390f":"markdown","d63acfc3":"markdown","1a444088":"markdown"},"source":{"a58fa508":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","071d7061":"reported = pd.read_csv(\"..\/input\/malaria-dataset\/reported_numbers.csv\")","ec8fcb18":"df = pd.DataFrame(reported)\ndf.head(15)","5c64d0ff":"len(df.Country.unique())","b5aca141":"df.Year.value_counts()","8cfabc6a":"df.shape","61736eda":"df.isnull().sum()","3d42b3c0":"df.dropna(inplace=True)","2b903b58":"df.isnull().sum()","a854a597":"df.shape","86a08a3c":"df1 = df.groupby('Country')[\"No. of cases\",\"No. of deaths\"].sum().reset_index()\ndf1.head()","400b1179":"df2 = df1[[\"Country\",\"No. of cases\"]]\ndf2.head()","e6e22759":"df2 = df2.sort_values(\"No. of cases\", ascending = False)","d3311fac":"#the following function allows me to print the data on the top of my bars\ndef data_graph (axis, width, height):\n    axis.spines['top'].set_visible(False)\n    axis.spines['right'].set_visible(False)\n    for p in axis.patches:\n        axis.annotate (\"{0:.1f}\".format(p.get_height()), (p.get_x()+width, p.get_height()+height))","0cd6ffa5":"plt.figure(figsize = (25,10))\nax = sns.barplot(x=\"Country\", y= \"No. of cases\", data=df2[:20] ,palette = \"Spectral\")\nplt.title (\"Top 20 Countries with Most Number of Cases\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"Country\")\nplt.ylabel(\"No. of Cases (1 unit = 10000000)\")\ndata_graph(ax,0.1,10)\nplt.show()","d238526b":"df3 = df1[[\"Country\",\"No. of deaths\"]]\ndf3.head()","546eb4bc":"df3 = df3.sort_values(\"No. of deaths\", ascending = False)","0dbbd74e":"plt.figure(figsize = (25,10))\nax = sns.barplot(x=\"Country\", y= \"No. of deaths\", data=df3[:20] ,palette = \"cubehelix\")\nplt.title (\"Top 20 Countries with Most Number of deaths\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"Country\")\nplt.ylabel(\"No. of deaths\")\ndata_graph(ax,0.1,10)\nplt.show()","d2c98a71":"df4 = df.groupby(\"WHO Region\")[\"No. of cases\",\"No. of deaths\"].sum().reset_index()\ndf4.head()","982b7084":"df5 = df4[[\"WHO Region\",\"No. of cases\"]]\ndf5.head()","52f59300":"plt.figure(figsize = (10,5))\nax = sns.barplot(x=\"WHO Region\", y= \"No. of cases\", data=df5 ,palette = \"icefire\")\nplt.title (\"WHO Regions and amount of cases in each region\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"WHO Regions\")\nplt.ylabel(\"No. of Cases (1 unit = 10000000)\")\ndata_graph(ax,0.1,10)\nplt.show()","0df5fbb9":"df6 = df4[[\"WHO Region\",\"No. of deaths\"]]\ndf6.head()","bde1e8cb":"plt.figure(figsize = (10,5))\nax = sns.barplot(x=\"WHO Region\", y= \"No. of deaths\", data=df6 ,palette = \"coolwarm\")\nplt.title (\"WHO Regions and amount of deaths in each region\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"WHO Regions\")\nplt.ylabel(\"No. of deaths\")\ndata_graph(ax,0.1,10)\nplt.show()","1b8f4574":"df7 = df.groupby(\"Year\")[\"No. of cases\",\"No. of deaths\"].sum().reset_index()\ndf7.head()","f9d2a6b8":"df8 = df7.set_index([\"Year\"])","be28cea0":"plt.figure(figsize = (10,5))\nax = sns.lineplot(data=df8)\nplt.title (\"Year wise Data\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"Year\")\nplt.ylabel(\"(1 unit = 1000000)\")\nplt.show()","e3fc9d0b":"plt.figure(figsize = (10,5))\nax = sns.lineplot(x = \"Year\",y= \"No. of cases\",data=df7)\nplt.title (\"Yearly Cases\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"Year\")\nplt.ylabel(\"No. of Cases (1 unit = 1000000)\")\nplt.show()","5af53964":"plt.figure(figsize = (10,5))\nax = sns.lineplot(x = \"Year\",y= \"No. of deaths\",data=df7)\nplt.title (\"Yearly Deaths\")\nplt.xticks(rotation = 60, ha = 'right')\nplt.xlabel(\"Year\")\nplt.ylabel(\"No. of deaths\")\nplt.show()","bfb42e7d":"pred_df1 = df['Country'].str.get_dummies()\npred_df2 = df['WHO Region'].str.get_dummies()","2672a95c":"frames = [df,pred_df1,pred_df2]\npred_df = pd.concat(frames,axis=1)\npred_df.head()","d99bc9a0":"cols = [\"Country\",\"WHO Region\"]\npred_df.drop(columns = cols, inplace=True)\npred_df.shape","193af468":"x = pred_df.drop(\"No. of deaths\",axis=1)\ny = pred_df[[\"No. of deaths\"]]\n\nfrom sklearn.preprocessing import StandardScaler\nstd = StandardScaler()\nx = std.fit_transform(x)\ny = std.fit_transform(y)\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state = 1)\nprint(\"x_train :\",x_train.shape)\nprint(\"x_test :\",x_test.shape)\nprint(\"y_train :\",y_train.shape)\nprint(\"y_test :\",y_test.shape)","a06d502e":"from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()\nmodel.fit(x_train,y_train)\npreds = model.predict(x_test)","ca5a8443":"from sklearn.metrics import r2_score\nr = r2_score(y_test,preds)\nprint(\"R2score when we predict using Randomn forest is \",r)","c5440c7d":"x = pred_df.drop(\"No. of deaths\",axis=1)\ny = pred_df[[\"No. of deaths\"]]\n\nfrom sklearn import preprocessing\nx = preprocessing.normalize(x)\ny = preprocessing.normalize(y)","684f10ca":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)","9636e956":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=4)\nknn.fit(x_train,y_train)","025bd3c8":"knn.score(x_test,y_test)","9a02b96a":"from sklearn.metrics import confusion_matrix\ny_pred = knn.predict(x_test)\ncon_mat = confusion_matrix(y_test,y_pred)\ncon_mat","f504067a":"import math\ntn = con_mat[0][0]\nfn = con_mat[1][0]\nfp = con_mat[0][1]\ntp = con_mat[1][1]\n\nsensitivity = tp\/(tp+fn)\nspecificity = tn\/(tn+fp)\nprecision = tp\/(fp+tp)\nrecall = tp\/(fn+tp)\naccuracy = (tp+tn)\/(tp+tn+fp+fn)\nf1 = 2*(precision*recall)\/(precision+recall)\nfpr = fp\/(tn+fp)\nfnr = fn\/(tp+fn)\nnpv = tn\/(tn+fn)\nfdr = fp\/(fp+tp)\nmcc = (tp*tn)-(fp*fn)\/math.sqrt((tp+fp)*(tp+fn)*(tn+fp)*(tn+fn))\n\nprint(\"Precision = {}, Accuracy = {}, F1 = {}, FPR = {}, FNR = {}, NPV = {}, FDR = {}, MCC = {}\".format(precision,accuracy,f1,fpr,fnr,npv,fdr,mcc))\nprint()\nprint (\"Sensitivity = {}, Specificity = {}\".format(sensitivity, specificity))","f4fe33d6":"x = pred_df.drop(\"No. of deaths\",axis=1)\ny = pred_df[[\"No. of deaths\"]]\n\nfrom sklearn import preprocessing\nx = preprocessing.normalize(x)\ny = preprocessing.normalize(y)","3e68e212":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)","4030983e":"from sklearn.linear_model import SGDClassifier \n\nfrom sklearn.metrics import roc_curve, auc\n\nmodel = SGDClassifier(loss='hinge', class_weight='balanced')\nmodel.fit(x_train, y_train)\n\ny_train_pred = model.decision_function(x_train)    \ny_test_pred = model.decision_function(x_test) ","4a8f661b":"train_fpr, train_tpr, tr_thresholds = roc_curve(y_train, y_train_pred)\ntest_fpr, test_tpr, te_thresholds = roc_curve(y_test, y_test_pred)\n\nplt.grid()\n\nplt.plot(train_fpr, train_tpr, label=\" AUC TRAIN =\"+str(auc(train_fpr, train_tpr)))\nplt.plot(test_fpr, test_tpr, label=\" AUC TEST =\"+str(auc(test_fpr, test_tpr)))\nplt.plot([0,1],[0,1],'g--')\nplt.legend()\nplt.xlabel(\"True Positive Rate\")\nplt.ylabel(\"False Positive Rate\")\nplt.title(\"AUC(ROC curve)\")\nplt.show()\n","38552641":"### USING KNN AND CONFUSION MATRIX","37738d24":"# WORKING WITH MALARIA DATASET","819360a8":"### ANALYSING AND VISUALISING DATA GROUPED YEAR WISE","5dfe84f1":"### ANALYSING AND VISUALISING DATA GROUPED WHO REGION WISE","c16169f1":"### USING STOCHASTIC GRADIENT DECENT AND ROC CURVE","8ac1ba58":"### ANALYSING AND VISUALISING DATA GROUPED COUNTRY WISE","4dc16374":"## WORKING WITH MODELS","9cbb73f7":"## DATA VISUALISATION AND ANALYSIS","9875a7e9":"## DATA CLEANING","a442390f":"### USING RANDOM FOREST AND FINDING R2 SCORE","d63acfc3":"### ENCODING DATASET TO MAKE IT FIT FOR FITTING INTO MODELS","1a444088":"For our models we use Random Forest, KNN and Stochastic Gradient Decent. With the Random forest algorithm we find the R2 score, by using KNN we use confusion matrix with it, and understand the use of it. For Stochatic Gradient Decent we create a ROC curve in order to calculate the auccracy of our model."}}