{"cell_type":{"f9bbb6fc":"code","5013ec9e":"code","3028c555":"code","8bebc4d0":"code","ef80ad3e":"code","16039ca2":"code","d7954690":"code","0ebe1d59":"code","f833c2b7":"code","5f0c9665":"code","953c1c51":"code","f5beaff5":"code","2b9aa4fc":"code","3bf731f0":"code","0345d6d7":"code","02f26966":"code","d5534936":"code","726046c3":"code","a206d27d":"code","9bd2be05":"code","c67161aa":"code","c86b25d6":"code","64659b86":"code","94bebd0f":"code","9a5fa449":"code","98543e76":"code","cac4faa2":"code","7346e755":"code","2fd26493":"code","b5ba9bab":"code","b6d01f07":"code","f18bfe19":"code","fe535391":"code","0e458e3c":"code","3d417e4a":"code","f8d4c5fd":"code","94bbee36":"code","113ab6ea":"code","674804e7":"code","365680e5":"code","4c62f097":"code","2fc9b379":"markdown","175cc262":"markdown","79984861":"markdown","2e107a86":"markdown","a55fed08":"markdown","693dcc29":"markdown","7cd61cca":"markdown","6ed6e0a4":"markdown","ffbc10ff":"markdown","fc7a5d76":"markdown","ea78cf45":"markdown","8705224a":"markdown","50f40d3c":"markdown"},"source":{"f9bbb6fc":"# Basic Imports\nimport pandas as pd\nimport numpy as np\n\n# Visualisation imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Warnings ignor\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Label encoding\nfrom sklearn.preprocessing import LabelEncoder\n\n# Train test split\nfrom sklearn.model_selection import train_test_split\n\n# Regression Model\n\n## Linear regression\nfrom sklearn.linear_model import LinearRegression\n\n## Random forest\nfrom sklearn.ensemble import RandomForestRegressor\n\n## XGBoost\nfrom xgboost import XGBRegressor\n\n# Score\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom math import sqrt","5013ec9e":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3028c555":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ndf_train","8bebc4d0":"df_test","ef80ad3e":"df_train.isnull().sum().sort_values(ascending=False).head(20)","16039ca2":"df_test.isnull().sum().sort_values(ascending=False).head(20)","d7954690":"df_train = df_train.dropna(axis=1)\ndf_train","0ebe1d59":"df_test = df_test.dropna(axis=1)\ndf_test","f833c2b7":"df_train.isnull().sum().sort_values(ascending=False).head(20)","5f0c9665":"df_test.isnull().sum().sort_values(ascending=False).head(20)","953c1c51":"df_train.corr()['SalePrice'].sort_values(ascending=False).head(25)","f5beaff5":"plt.figure(figsize=(12, 10))\nsns.regplot(x='OverallQual', y='SalePrice', data=df_train)","2b9aa4fc":"plt.figure(figsize=(12, 10))\nsns.regplot(x='GrLivArea', y='SalePrice', data=df_train)","3bf731f0":"plt.figure(figsize=(12, 10))\nsns.regplot(x='GarageCars', y='SalePrice', data=df_train)","0345d6d7":"plt.figure(figsize=(12, 10))\nsns.regplot(x='GarageArea', y='SalePrice', data=df_train)","02f26966":"plt.figure(figsize=(12, 10))\nsns.regplot(x='1stFlrSF', y='SalePrice', data=df_train)","d5534936":"df_train = df_train[df_train.GrLivArea<4000]\ndf_train = df_train[df_train['1stFlrSF']<4000]","726046c3":"plt.figure(figsize=(12, 10))\nsns.regplot(x='GrLivArea', y='SalePrice', data=df_train)","a206d27d":"cat_cols_train = df_train.columns[df_train.dtypes== 'object']\ncat_cols_test = df_test.columns[df_test.dtypes== 'object']\ncat_cols_train","9bd2be05":"encoder = LabelEncoder()\n\nfor i in cat_cols_train:\n    df_train[i] = encoder.fit_transform(df_train[i])\ndf_train.head()","c67161aa":"for i in cat_cols_test:\n    df_test[i] = encoder.fit_transform(df_test[i])\ndf_test.head()","c86b25d6":"df_train.corr()['SalePrice'].sort_values(ascending=False).head(25)","64659b86":"select_cols = ['SalePrice', 'MSSubClass', 'LotArea', 'Street', 'LotShape', 'LandContour',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt',\n       'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'ExterQual', 'ExterCond',\n       'Foundation', 'Heating', 'HeatingQC', 'CentralAir',\n       '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold', 'SaleCondition']","94bebd0f":"df_train = df_train[select_cols]\ndf_train","9a5fa449":"X = df_train.drop(['SalePrice'], axis=1)\ny = df_train['SalePrice']","98543e76":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=9)","cac4faa2":"# Model LR and prediction\nlr = LinearRegression()\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)","7346e755":"# Model Random forest\n\nrfr = RandomForestRegressor()\nrfr.fit(X_train, y_train)\nrfr_pred = rfr.predict(X_test)","2fd26493":"# Model XGBR and prediction\nxgb = XGBRegressor()\nxgb.fit(X_train, y_train)\nxgb_pred = xgb.predict(X_test)","b5ba9bab":"# Features importances Linear regression\n\n# get importances\nimportances = lr.coef_\n\n# Summarize feature importance\nfor i, v in enumerate(importances):\n    print('Feature: %0d, Score: %.5f' % (i,v))","b6d01f07":"# Features importances Random forest regression\n\n# get importances\nimportances = rfr.feature_importances_\n\n# Summarize feature importance\nfor i, v in enumerate(importances):\n    print('Feature: %0d, Score: %.5f' % (i,v))","f18bfe19":"# Features importances XGBoost regression\n\n# get importances\nimportances = xgb.feature_importances_\n\n# Summarize feature importance\nfor i, v in enumerate(importances):\n    print('Feature: %0d, Score: %.5f' % (i,v))","fe535391":"# Score\nmse = mean_squared_error(y_test, lr_pred)\nprint ('Mean squared error:', mse)\nrmse = sqrt(mse)\nprint ('Root mean squared error:', rmse)\nprint ('r2:', r2_score(y_test, lr_pred))","0e458e3c":"# Score\nmse = mean_squared_error(y_test, rfr_pred)\nprint ('Mean squared error:', mse)\nrmse = sqrt(mse)\nprint ('Root mean squared error:', rmse)\nprint ('r2:', r2_score(y_test, rfr_pred))","3d417e4a":"# Score\nmse = mean_squared_error(y_test, xgb_pred)\nprint ('Mean squared error:', mse)\nrmse = sqrt(mse)\nprint ('Root mean squared error:', rmse)\nprint ('r2:', r2_score(y_test, xgb_pred))","f8d4c5fd":"test_cols = ['MSSubClass', 'LotArea', 'Street', 'LotShape', 'LandContour',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt',\n       'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'ExterQual', 'ExterCond',\n       'Foundation', 'Heating', 'HeatingQC', 'CentralAir',\n       '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n       'MoSold', 'YrSold', 'SaleCondition']\ntest = df_test[test_cols]\ntest","94bbee36":"test_pred = xgb.predict(test)","113ab6ea":"test_pred","674804e7":"df_test['SalePrice'] = test_pred\ndf_test","365680e5":"df_final = df_test[['Id', 'SalePrice']]\ndf_final","4c62f097":"df_final.to_csv('submission.csv', index=False)","2fc9b379":"## Delete columns contain missing data","175cc262":"Train test split","79984861":"# Goal of the project:\n    Predict house price:\n        Using creative feature engineering and advance machine learning model","2e107a86":"## Check empty data","a55fed08":"## Features selection\n            \u25e6 Label encoding\n            \u25e6 Check correlation with target","693dcc29":"## Outliers","7cd61cca":"# Regression model","6ed6e0a4":"# Prediction","ffbc10ff":"# Data Input","fc7a5d76":"# Preprocessing\n\n        \u25e6 Check empty data\n        \u25e6 Delete columns contain aproximately higher than 20 % missing data\n        \u25e6 If features has empty cells and less than 20% missing data, delete \/ fill empty entites\n        \u25e6 Check and clean outliers\n        \u25e6 Features selection","ea78cf45":"Feature and Target seperation","8705224a":"### Select columns from feature correlation with target","50f40d3c":"Convert test file according to model trained style"}}