{"cell_type":{"2dada590":"code","90802edd":"code","47fbf7ea":"code","5f051445":"code","86d3d0b6":"code","e0d6d6cd":"code","e4dd612a":"code","de08ad88":"code","31f5007e":"code","78d175a2":"code","246c38d7":"code","a29982ae":"code","f6b0805b":"code","1d2741c6":"code","6c01e72b":"code","0774db61":"code","9234dee7":"code","c8d353e5":"code","b6a4df3b":"code","dbb8da89":"code","12966883":"code","7a76b449":"code","5eefcb8d":"code","013aadf3":"markdown","94ee4495":"markdown","b7ab1a52":"markdown","7055c9e2":"markdown","fcf157c8":"markdown","84856c95":"markdown","a7c4bcbc":"markdown","8cc6799b":"markdown","776fc339":"markdown","a15cdd04":"markdown","60830c36":"markdown"},"source":{"2dada590":"# Input\n\ndir_csv = '..\/input\/rsna-intracranial-hemorrhage-detection'\ndir_train_img = '..\/input\/rsna-train-stage-1-images-png-224x\/stage_1_train_png_224x'\ndir_test_img = '..\/input\/rsna-test-stage-1-images-png-224x\/stage_1_test_png_224x'\n","90802edd":"\n# Parameters\n\nn_classes = 6\nn_epochs = 2\nbatch_size = 64\n","47fbf7ea":"# Installing useful libraries\n\n!git clone https:\/\/github.com\/NVIDIA\/apex && cd apex && pip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" .\/\n    ","5f051445":"# Libraries\n\nfrom apex import amp\nimport os\nimport cv2\nimport glob\nimport pydicom\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.optim as optim\nfrom albumentations import Compose, ShiftScaleRotate, Resize, CenterCrop, HorizontalFlip, RandomBrightnessContrast\nfrom albumentations.pytorch import ToTensor\nfrom torch.utils.data import Dataset\nfrom tqdm import tqdm_notebook as tqdm\nfrom matplotlib import pyplot as plt\nfrom torchvision import transforms","86d3d0b6":"\n# Functions\n\nclass IntracranialDataset(Dataset):\n\n    def __init__(self, csv_file, path, labels, transform=None):\n        \n        self.path = path\n        self.data = pd.read_csv(csv_file)\n        self.transform = transform\n        self.labels = labels\n\n    def __len__(self):\n        \n        return len(self.data)\n\n    def __getitem__(self, idx):\n        \n        img_name = os.path.join(self.path, self.data.loc[idx, 'Image'] + '.png')\n        img = cv2.imread(img_name)   \n        \n        if self.transform:       \n            \n            augmented = self.transform(image=img)\n            img = augmented['image']   \n            \n        if self.labels:\n            \n            labels = torch.tensor(\n                self.data.loc[idx, ['epidural', 'intraparenchymal', 'intraventricular', 'subarachnoid', 'subdural', 'any']])\n            return {'image': img, 'labels': labels}    \n        \n        else:      \n            \n            return {'image': img}\n    \n    \n","e0d6d6cd":"# CSVs\n\ntrain = pd.read_csv(os.path.join(dir_csv, 'stage_1_train.csv'))\ntest = pd.read_csv(os.path.join(dir_csv, 'stage_1_sample_submission.csv'))","e4dd612a":"\n# Split train out into row per image and save a sample\n\ntrain[['ID', 'Image', 'Diagnosis']] = train['ID'].str.split('_', expand=True)\ntrain = train[['Image', 'Diagnosis', 'Label']]\ntrain.drop_duplicates(inplace=True)\ntrain = train.pivot(index='Image', columns='Diagnosis', values='Label').reset_index()\ntrain['Image'] = 'ID_' + train['Image']\ntrain.head()","de08ad88":"undersample_seed=0\ntrain[\"any\"].value_counts()","31f5007e":"num_ill_patients = train[train[\"any\"]==1].shape[0]\nnum_ill_patients","78d175a2":"healthy_patients = train[train[\"any\"]==0].index.values\nhealthy_patients_selection = np.random.RandomState(undersample_seed).choice(\n    healthy_patients, size=num_ill_patients, replace=False\n)\nlen(healthy_patients_selection)","246c38d7":"sick_patients = train[train[\"any\"]==1].index.values\nselected_patients = list(set(healthy_patients_selection).union(set(sick_patients)))\nlen(selected_patients)\/2","a29982ae":"new_train = train.loc[selected_patients].copy()\nnew_train[\"any\"].value_counts()","f6b0805b":"# Some files didn't contain legitimate images, so we need to remove them\n\npng = glob.glob(os.path.join(dir_train_img, '*.png'))\npng = [os.path.basename(png)[:-4] for png in png]\npng = np.array(png)\n\ntrain = train[train['Image'].isin(png)]\ntrain.to_csv('train.csv', index=False)","1d2741c6":"# Also prepare the test data\n\ntest[['ID','Image','Diagnosis']] = test['ID'].str.split('_', expand=True)\ntest['Image'] = 'ID_' + test['Image']\ntest = test[['Image', 'Label']]\ntest.drop_duplicates(inplace=True)\n\ntest.to_csv('test.csv', index=False)","6c01e72b":"# Data loaders\n\ntransform_train = Compose([CenterCrop(200, 200),\n                           #Resize(224, 224),\n                           HorizontalFlip(),\n                           RandomBrightnessContrast(),\n    ShiftScaleRotate(),\n    ToTensor()\n])\n\ntransform_test= Compose([CenterCrop(200, 200),\n                         #Resize(224, 224),\n    ToTensor()\n])\n\ntrain_dataset = IntracranialDataset(\n    csv_file='train.csv', path=dir_train_img, transform=transform_train, labels=True)\n\ntest_dataset = IntracranialDataset(\n    csv_file='test.csv', path=dir_test_img, transform=transform_test, labels=False)\n\ndata_loader_train = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=False, num_workers=4)\ndata_loader_test = torch.utils.data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False, num_workers=4)","0774db61":"len(train_dataset)","9234dee7":"# Plot train example\n\nbatch = next(iter(data_loader_train))\nfig, axs = plt.subplots(1, 5, figsize=(15,5))\n\nfor i in np.arange(5):\n    \n    axs[i].imshow(np.transpose(batch['image'][i].numpy(), (1,2,0))[:,:,0], cmap=plt.cm.bone)\n","c8d353e5":"# Plot test example\n\nbatch = next(iter(data_loader_test))\nfig, axs = plt.subplots(1, 5, figsize=(15,5))\n\nfor i in np.arange(5):\n    \n    axs[i].imshow(np.transpose(batch['image'][i].numpy(), (1,2,0))[:,:,0], cmap=plt.cm.bone)\n","b6a4df3b":"# Model\n\ndevice = torch.device(\"cuda:0\")\nmodel = torch.hub.load('facebookresearch\/WSL-Images', 'resnext101_32x8d_wsl')\nmodel.fc = torch.nn.Linear(2048, n_classes)\n\nmodel.to(device)\n\ncriterion = torch.nn.BCEWithLogitsLoss()\nplist = [{'params': model.parameters(), 'lr': 2e-5}]\noptimizer = optim.Adam(plist, lr=2e-5)\n\nmodel, optimizer = amp.initialize(model, optimizer, opt_level=\"O1\")\n","dbb8da89":"# Train\n\n\nfor epoch in range(n_epochs):\n    \n    print('Epoch {}\/{}'.format(epoch, n_epochs - 1))\n    print('-' * 10)\n\n    model.train()    \n    tr_loss = 0\n    \n    tk0 = tqdm(data_loader_train, desc=\"Iteration\")\n\n    for step, batch in enumerate(tk0):\n\n        inputs = batch[\"image\"]\n        labels = batch[\"labels\"]\n\n        inputs = inputs.to(device, dtype=torch.float)\n        labels = labels.to(device, dtype=torch.float)\n\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n\n        with amp.scale_loss(loss, optimizer) as scaled_loss:\n            scaled_loss.backward()\n\n        tr_loss += loss.item()\n\n        optimizer.step()\n        optimizer.zero_grad()\n        \n        if epoch == 1 and step > 6000:\n            epoch_loss = tr_loss \/ 6000\n            print('Training Loss: {:.4f}'.format(epoch_loss))\n            break\n\n    epoch_loss = tr_loss \/ len(data_loader_train)\n    print('Training Loss: {:.4f}'.format(epoch_loss))","12966883":"# Inference\n\nfor param in model.parameters():\n    param.requires_grad = False\n\nmodel.eval()\n\ntest_pred = np.zeros((len(test_dataset) * n_classes, 1))\n\nfor i, x_batch in enumerate(tqdm(data_loader_test)):\n    \n    x_batch = x_batch[\"image\"]\n    x_batch = x_batch.to(device, dtype=torch.float)\n    \n    with torch.no_grad():\n        \n        pred = model(x_batch)\n        \n        test_pred[(i * batch_size * n_classes):((i + 1) * batch_size * n_classes)] = torch.sigmoid(\n            pred).detach().cpu().reshape((len(x_batch) * n_classes, 1))","7a76b449":"# Submission\n\nsubmission =  pd.read_csv(os.path.join(dir_csv, 'stage_1_sample_submission.csv'))\nsubmission = pd.concat([submission.drop(columns=['Label']), pd.DataFrame(test_pred)], axis=1)\nsubmission.columns = ['ID', 'Label']\n\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","5eefcb8d":"!rm -rf \/kaggle\/working\/apex\n!rm test.csv\n!rm train.csv","013aadf3":"# DataLoaders","94ee4495":"# Submission","b7ab1a52":"# Inference","7055c9e2":"# Setup\n\nNeed to grab a couple of extra libraries\n\n- Nvidia Apex for mixed precision training (https:\/\/github.com\/NVIDIA\/apex)","fcf157c8":"# CSV","84856c95":"# Introduction\n\nThis is a simple fork of my previous kernel (https:\/\/www.kaggle.com\/taindow\/pytorch-efficientnet-b0), except here we make use of ResNeXt and \"weakly supervised pre-training\" as opposed to EfficientNet. See https:\/\/github.com\/facebookresearch\/WSL-Images for model information. Note due to the number of parameters a single sweep of the data will take approx. 4-5h.","a7c4bcbc":"# Parameters","8cc6799b":"# Model","776fc339":"# Training","a15cdd04":"# Sources\n\nWindowing functions for pre-processed data taken from the following:\n\n- https:\/\/www.kaggle.com\/omission\/eda-view-dicom-images-with-correct-windowing ","60830c36":"# Clean Up\n\nHave to clean up since Kaggle limits the number of files that can be output from a kernel"}}