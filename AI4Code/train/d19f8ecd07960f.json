{"cell_type":{"08776f86":"code","5d6a2851":"code","65852de9":"code","0a81900c":"code","03a41430":"code","3f593290":"code","dd768dd6":"code","eb26f878":"code","557eb049":"code","43e29dc6":"code","977e3171":"code","0d96fda9":"code","93916330":"code","5c68aea5":"code","c3ca51fd":"code","2f47e683":"code","35bdc966":"code","86a8d95e":"markdown"},"source":{"08776f86":"import numpy as np # linear algebra\nimport pandas as pd","5d6a2851":"import torch\nfrom transformers import T5ForConditionalGeneration,T5Tokenizer\nimport ast\n\ndef set_seed(seed):\n  torch.manual_seed(seed)\n  if torch.cuda.is_available():\n    torch.cuda.manual_seed_all(seed)\n\nset_seed(42)\n\nmodel = T5ForConditionalGeneration.from_pretrained('..\/input\/magic-notebook')\ntokenizer = T5Tokenizer.from_pretrained('t5-base')\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# print (\"device \",device)\nmodel = model.to(device)","65852de9":"def beam_search_decoding (inp_ids,attn_mask):\n        beam_output = model.generate(input_ids=inp_ids,\n                                         attention_mask=attn_mask,\n                                         max_length=600,\n                                       num_beams=100,\n                                       num_return_sequences=5,\n                                       no_repeat_ngram_size=2,\n                                       early_stopping=True\n                                       )\n        Questions = [tokenizer.decode(out, skip_special_tokens=True, clean_up_tokenization_spaces=True) for out in beam_output]\n        return [Question.strip().capitalize() for Question in Questions]","0a81900c":"def t5_boolean(context,answer):\n    con = \"BooleanContext:%s <s> BooleanAnswer:%s <\/s>\" %(context,answer)\n    encoding = tokenizer.encode_plus(con, return_tensors=\"pt\")\n    input_ids, attention_masks = encoding[\"input_ids\"].to(device), encoding[\"attention_mask\"].to(device)\n    output = beam_search_decoding (input_ids, attention_masks)\n    return output","03a41430":"text = '''Tim is a skilled Software Testing professional. Tim's experience includes test team management, client and vendor \nmanagement, automation test engineering, test infrastructure creation and maintenance. \nTim is an expert in building testing teams from scratch. Tim puts together processes, strategies, tools and frameworks, \nskilled resources for efficient and seamless delivery. \nExpertise in designing and developing test strategy, test plan, test cases and generating test reports and defect reports.\nExtensive experience in coordinating testing effort, responsible for test deliverables,\nstatus reporting to management, issue escalations etc. Have Extensive experience in automating and \ntesting enterprise web applications using Selenium 1.0 and Selenium 2.0 (WebDriver) tool using both Microsoft and JAVA technology stack.\nTim is very good at JAVA, C# and python language programming. Tim has strong experience in C# programming using MS Visual Studio and\nother MS technology stack in particular MSTest unit testing framework. Tim has very good experience in setting up Continuous Integration\nenvironment using Team Foundation Server, creating Build definitions and management etc. Domain experience includes Superannuation, \nTelco, Insurance, Banking, Finance and healthcare domains. Tim's linkedin profile is https:\/\/www.linkedin.com\/in\/timothy-r-alex-ai\/.\nTim's contact phone number is 0470139767. Tim's email address is timothyrajan@gmail.com. \nTim has good exposure to gitlab and github hosting platforms.'''","3f593290":"t5_boolean(text,\"True\")","dd768dd6":"t5_boolean(text,\"False\")","eb26f878":"def t5_squad(context,answer):\n    con = \"SquadPassage:%s <s> SquadAnswerspan:%s <\/s>\" %(context,answer)\n    encoding = tokenizer.encode_plus(con, return_tensors=\"pt\")\n    input_ids, attention_masks = encoding[\"input_ids\"].to(device), encoding[\"attention_mask\"].to(device)\n    output = beam_search_decoding (input_ids, attention_masks)\n    return output","557eb049":"answer= \"test team management, client and vendor\"","43e29dc6":"t5_squad(text,answer)","977e3171":"cosmos = \"It's a very humbling experience when you need someone to dress you every morning, tie your shoes, and put your hair up. Every menial task takes an unprecedented amount of effort. It made me appreciate Dan even more. But anyway I shan't dwell on this (I'm not dying after all) and not let it detact from my lovely 5 days with my friends visiting from Jersey.\"","0d96fda9":"def t5_cosmos(context):\n    con = \"CosmosqaContext: %s <\/s>\" %(context)\n    encoding = tokenizer.encode_plus(con, return_tensors=\"pt\")\n    input_ids, attention_masks = encoding[\"input_ids\"].to(device), encoding[\"attention_mask\"].to(device)\n    output = beam_search_decoding (input_ids, attention_masks)\n    return output","93916330":" t5_cosmos(cosmos)","5c68aea5":"text = \"Nine Men's Morris is a strategy board game for two players dating at least to the Roman Empire.  Twilight Struggle: The Cold War, 1945\u20131989 is a card-driven strategy game for two players, with its theme taken from the Cold War.\"","c3ca51fd":"answer = \"game\"","2f47e683":"def t5_hotpotqa(context,answer):\n    con = \"HotpotqaContext: %s <s> HotpotqaAnswer:%s <\/s>\" %(context,answer)\n    encoding = tokenizer.encode_plus(con, return_tensors=\"pt\")\n    input_ids, attention_masks = encoding[\"input_ids\"].to(device), encoding[\"attention_mask\"].to(device)\n    output = beam_search_decoding (input_ids, attention_masks)\n    return output","35bdc966":"t5_hotpotqa(text,answer)","86a8d95e":"This notebook uses T5 pretrained model on** COSMOS+SQUAD+COQA dataset**. Answers are to the point but are accurate and address the interdependancy of the sentences."}}