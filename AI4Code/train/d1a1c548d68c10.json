{"cell_type":{"2b8e6906":"code","41130f88":"code","49e1ee05":"code","d5af4c37":"code","d936a6af":"code","7ddfe703":"code","cd2398c1":"code","0985bfcb":"code","36688bf7":"code","54c28c9e":"code","939ce7d8":"code","c80d40ec":"code","07a97fcc":"code","b722e5dc":"code","64d506c7":"code","a378214c":"code","dbd31148":"code","57a476b0":"code","d3d55796":"code","3c1f60a4":"code","de62c90c":"code","ba9028ee":"code","b8e02f3e":"code","27e0c9f1":"code","e9ce811b":"code","109ed103":"code","3fcc9740":"code","d27c12ca":"code","a0b98810":"code","3dd8e732":"code","fbc12e9a":"code","aa872afb":"code","c0abdd98":"code","f8bb3013":"code","d231c4ac":"code","c07f38ef":"code","d46078d0":"code","87c00490":"code","3af734d2":"code","f0c22940":"code","cc7da7c8":"code","1b09c5f1":"code","5547981b":"code","4b3c4cbf":"code","772bbd23":"code","d117cc64":"code","0e5dbe01":"code","0cc8ca41":"code","46351610":"code","f77bfdc1":"code","9dff7a8e":"code","76cd7f4b":"code","4dd55687":"code","2275db9b":"code","914f6a1e":"code","803131ad":"code","ea714177":"code","414e6b7b":"code","a2dcbf57":"code","0b313315":"code","d7c873eb":"code","db5ddb37":"code","0cfe6870":"markdown","9b1013b7":"markdown"},"source":{"2b8e6906":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder","41130f88":"df = pd.read_csv('..\/input\/gemstone-price-prediction\/cubic_zirconia.csv')","49e1ee05":"df.head(10)","d5af4c37":"df.drop('Unnamed: 0',axis=1,inplace=True)","d936a6af":"df","7ddfe703":"df.shape","cd2398c1":"df.describe()","0985bfcb":"numerical_feature = [feature for feature in df.columns if df[feature].dtypes != 'O']\ndiscrete_feature=[feature for feature in numerical_feature if len(df[feature].unique())<25]\ncontinuous_feature = [feature for feature in numerical_feature if feature not in discrete_feature]\ncategorical_feature = [feature for feature in df.columns if feature not in numerical_feature]","36688bf7":"print(\"Numerical Features Count {}\".format(len(numerical_feature)))\nprint(\"Discrete feature Count {}\".format(len(discrete_feature)))\nprint(\"Continuous feature Count {}\".format(len(continuous_feature)))\nprint(\"Categorical feature Count {}\".format(len(categorical_feature)))","54c28c9e":"categorical_feature","939ce7d8":"df['cut'].value_counts()","c80d40ec":"df['color'].value_counts()","07a97fcc":"df['clarity'].value_counts()","b722e5dc":"df = df.replace({'Ideal':4,'Premium':3,'Very Good':2,'Good':1,'Fair':0})\ndf","64d506c7":"df['cut'].value_counts()","a378214c":"fig, ax = plt.subplots(figsize=(10,10))\ndata = df.groupby('cut')[['price']].nunique()\ndata = data.reset_index()\nsns.barplot(x = data.cut,y=data.price,ax=ax)\nplt.xticks(rotation=90)\nplt.xlabel('cut')","dbd31148":"e = LabelEncoder()\ndef encode(df,variable):\n  df[variable] = e.fit_transform(df[variable])","57a476b0":"encode(df,'color')\nencode(df,'clarity')","d3d55796":"fig, ax = plt.subplots(figsize=(10,10))\ndata = df.groupby('color')[['price']].nunique()\ndata = data.reset_index()\nsns.barplot(x = data.color,y=data.price,ax=ax)\nplt.xticks(rotation=90)\nplt.xlabel('color')","3c1f60a4":"fig, ax = plt.subplots(figsize=(10,10))\ndata = df.groupby('clarity')[['price']].nunique()\ndata = data.reset_index()\nsns.barplot(x = data.clarity,y=data.price,ax=ax)\nplt.xticks(rotation=90)\nplt.xlabel('clarity')","de62c90c":"df","ba9028ee":"df.isnull().sum()","b8e02f3e":"def impute_nan(df,variable,median):\n    df[variable+\"_median\"]=df[variable].fillna(median)","27e0c9f1":"impute_nan(df,'depth',df.depth.median())","e9ce811b":"df","109ed103":"df.drop('depth',axis=1,inplace=True)\ndf","3fcc9740":"df.isnull().sum()","d27c12ca":"fig, ax = plt.subplots(figsize=(15,15))\nsns.heatmap(df.corr(), cmap=\"YlGnBu\", annot=True,ax=ax)","a0b98810":"sns.boxplot(df.carat)","3dd8e732":"IQR=df.carat.quantile(0.75)-df.carat.quantile(0.25)\nlower_bridge=df.carat.quantile(0.25)-(IQR*1.5)\nupper_bridge=df.carat.quantile(0.75)+(IQR*1.5)\nprint(lower_bridge, upper_bridge)","fbc12e9a":"df.loc[df['carat']>=2.025,'carat']=2.025\ndf.loc[df['carat']<=-0.57,'carat']=-0.57","aa872afb":"sns.boxplot(df.carat)","c0abdd98":"sns.boxplot(df.table)","f8bb3013":"IQR=df.table.quantile(0.75)-df.table.quantile(0.25)\nlower_bridge=df.table.quantile(0.25)-(IQR*1.5)\nupper_bridge=df.table.quantile(0.75)+(IQR*1.5)\nprint(lower_bridge, upper_bridge)","d231c4ac":"df.loc[df['table']>=63.5,'table']=63.5\ndf.loc[df['table']<=51.5,'table']=51.5","c07f38ef":"sns.boxplot(df.table)","d46078d0":"sns.boxplot(df.x)","87c00490":"IQR=df.x.quantile(0.75)-df.x.quantile(0.25)\nlower_bridge=df.x.quantile(0.25)-(IQR*1.5)\nupper_bridge=df.x.quantile(0.75)+(IQR*1.5)\nprint(lower_bridge, upper_bridge)","3af734d2":"df.loc[df['x']>=9.30,'x']=9.30\ndf.loc[df['x']<=1.95,'x']=1.95","f0c22940":"sns.boxplot(df.x)","cc7da7c8":"sns.boxplot(df.y)","1b09c5f1":"IQR=df.y.quantile(0.75)-df.y.quantile(0.25)\nlower_bridge=df.y.quantile(0.25)-(IQR*1.5)\nupper_bridge=df.y.quantile(0.75)+(IQR*1.5)\nprint(lower_bridge, upper_bridge)","5547981b":"df.loc[df['y']>=9.285,'y']=9.285\ndf.loc[df['y']<=1.964,'y']=1.964","4b3c4cbf":"sns.boxplot(df.y)","772bbd23":"sns.boxplot(df.z)","d117cc64":"IQR=df.z.quantile(0.75)-df.z.quantile(0.25)\nlower_bridge=df.z.quantile(0.25)-(IQR*1.5)\nupper_bridge=df.z.quantile(0.75)+(IQR*1.5)\nprint(lower_bridge, upper_bridge)","0e5dbe01":"df.loc[df['z']>=5.75,'z']=5.75\ndf.loc[df['z']<=1.18,'z']=1.18","0cc8ca41":"sns.boxplot(df.z)","46351610":"sns.boxplot(df.depth_median)","f77bfdc1":"IQR=df.depth_median.quantile(0.75)-df.depth_median.quantile(0.25)\nlower_bridge=df.depth_median.quantile(0.25)-(IQR*1.5)\nupper_bridge=df.depth_median.quantile(0.75)+(IQR*1.5)\nprint(lower_bridge, upper_bridge)","9dff7a8e":"df.loc[df['depth_median']>=64.6,'depth_median']=64.6\ndf.loc[df['depth_median']<=59.0,'depth_median']=59.0","76cd7f4b":"sns.boxplot(df.depth_median)","4dd55687":"df","2275db9b":"fig, ax = plt.subplots(3,3,figsize=(17,13))\n\nsns.histplot(df.carat,ax=ax[0,0],bins=10)\n\nsns.histplot(df.cut,ax=ax[0,1],bins=5)\n\nsns.histplot(df.clarity,ax=ax[0,2],bins=5)\n\nsns.histplot(df.color,ax=ax[1,0],bins=5)\n\nsns.histplot(df.table,ax=ax[1,1],bins=10)\n\nsns.histplot(df.x,ax=ax[1,2],bins=10)\n\nsns.histplot(df.y,ax=ax[2,0],bins=10)\n\nsns.histplot(df.z,ax=ax[2,1],bins=10)\n\nsns.histplot(df.depth_median,ax=ax[2,2],bins=10)","914f6a1e":"df.sort_values(by='price',ascending=False).head(10).plot(x = 'price',y=['carat','cut','clarity','color','table','x','y','z','depth_median'],kind='bar', figsize= (15, 15))","803131ad":"from sklearn.model_selection import  GridSearchCV\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split as tts\nfrom sklearn.metrics import r2_score,mean_squared_error","ea714177":"x = df.drop(columns='price',axis=1)\ny = df.iloc[:,-2]","414e6b7b":"train_x,test_x,train_y,test_y = tts(x,y,test_size=0.3,random_state=2)","a2dcbf57":"XGB_REG = XGBRegressor(gamma=0.9, max_depth=7, n_estimators=150,\n             objective='reg:squarederror', random_state=1, reg_alpha=1.1,\n             reg_lambda=0.9,learning_rate=0.1)","0b313315":"XGB_REG.fit(train_x,train_y)","d7c873eb":"y_pred = XGB_REG.predict(test_x)\ny_pred = np.array(y_pred)\ntest_y = np.array(test_y)","db5ddb37":"r2_score(y_pred,test_y)","0cfe6870":"After running a hyperparameter tuning the best regressor is taken","9b1013b7":"# Data Information\n\nCarat -> Carat weight of the cubic zirconia.\n\nCut -> Describe the cut quality of the cubic zirconia. Quality is increasing order Fair, Good, Very Good, Premium, Ideal.\n\nColor -> Colour of the cubic zirconia.With D being the best and J the worst.\n\nClarity\t->\u00a0cubic zirconia Clarity refers to the absence of the Inclusions and Blemishes. (In order from Best to Worst, FL = flawless, I3= level 3 inclusions) FL, IF, VVS1, VVS2, VS1, VS2, SI1, SI2, I1, I2, I3\n\nDepth ->\t\u00a0The Height of a cubic zirconia, measured from the Culet to the table, divided by its average Girdle Diameter.\n\nTable ->\t\u00a0The Width of the cubic zirconia's Table expressed as a Percentage of its Average Diameter.\n\nPrice ->\t\u00a0the Price of the cubic zirconia.\n\nX ->\t\u00a0Length of the cubic zirconia in mm.\n\nY\t->\u00a0Width of the cubic zirconia in mm.\n\nZ ->\t\u00a0Height of the cubic zirconia in mm."}}