{"cell_type":{"15da57f9":"code","b43dca73":"code","f4c01810":"code","df68b4dd":"code","caa3c323":"code","e721da66":"code","66ee6129":"code","44e0ecc7":"code","adc3c0ad":"code","5bcdaacd":"code","e41fcf3f":"code","b2a1df7f":"code","4321caba":"code","383deb43":"code","6b8d3332":"markdown","7e4177dd":"markdown","1ace7d39":"markdown","87374b9c":"markdown","6ea18b3c":"markdown","2c775417":"markdown","fe48a1c6":"markdown","a02f473b":"markdown"},"source":{"15da57f9":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC","b43dca73":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","f4c01810":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","df68b4dd":"train.head()","caa3c323":"train.columns","e721da66":"def getColumnsExceptOneColumn(df,col):\n    return train.loc[:, train.columns != col].columns.tolist()","66ee6129":"target_col = \"Survived\"\ny = train[target_col]\n\nfeatures = getColumnsExceptOneColumn(train,target_col)\n\n\nX = train[features]\nX_test = test[features]","44e0ecc7":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)","adc3c0ad":"str_list","5bcdaacd":"num_list","e41fcf3f":"from sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn import ensemble\nfrom sklearn import model_selection\n\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression","b2a1df7f":"rf_est = ensemble.RandomForestClassifier(\n    n_estimators = 750, \n    criterion = 'gini', \n    max_features = 'sqrt', \n    max_depth = 3, \n    min_samples_split = 4, \n    min_samples_leaf = 2, \n    n_jobs = 50, \n    random_state = 42, \n    verbose = 1)\n\ngbm_est = ensemble.GradientBoostingClassifier(\n    n_estimators = 900, \n    learning_rate = 0.0008, \n    loss = 'exponential', \n    min_samples_split = 3, \n    min_samples_leaf = 2, \n    max_features ='sqrt', \n    max_depth = 3,  \n    random_state = 42, \n    verbose = 1)\n\net_est = ensemble.ExtraTreesClassifier(\n    n_estimators = 750, \n    max_features = 'sqrt', \n    max_depth = 35,  \n    n_jobs = 50, \n    criterion = 'entropy', \n    random_state = 42, \n    verbose = 1)\n\nvoting_est = ensemble.VotingClassifier(\n    estimators = [('rf', rf_est),('gbm', gbm_est),('et', et_est)],\n    voting = 'soft', \n    weights = [1,15,1],\n    n_jobs = -1)\n                                    ","4321caba":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"voting\", voting_est)])\nclf.fit(X, y)\n\npredictions = clf.predict(X_test)","383deb43":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = predictions\nsubmission.to_csv('submission.csv', index=False)","6b8d3332":"# Auto Pipeline","7e4177dd":"# Load Data","1ace7d39":"# Submission","87374b9c":"# Import sklearn library","6ea18b3c":"# Voting Model ","2c775417":"# Set Train data and target \/ Set Test data","fe48a1c6":"# Devide Column ","a02f473b":"# Delete Columns"}}