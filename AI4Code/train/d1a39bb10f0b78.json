{"cell_type":{"8ac999cf":"code","f19a2970":"code","a7554250":"code","3e9a520c":"code","eb0667ad":"code","d2e4f093":"code","c60768ad":"code","190ab867":"code","309ca4ef":"code","adeb2c24":"code","5e62f558":"code","df0b6884":"code","4159ac66":"code","894cbaed":"code","28ab5438":"code","5536a554":"code","e69a05a7":"code","252a11cc":"code","732bb411":"code","5b792c32":"code","a6e422cd":"code","a1ae8959":"code","e1a87834":"code","bfb757c0":"code","aa13c2f8":"code","8df40d2c":"code","eee7eb76":"code","e360dcdc":"code","4c05e445":"code","9bdff890":"code","1873b63e":"code","d72a48c2":"code","df85ea45":"code","9649ed1e":"code","639dc68d":"code","ba5ef997":"code","60d337eb":"code","16a1dab1":"code","cdb78f97":"code","3155693d":"code","697cf54e":"code","57cb50b8":"code","4fb5cc0d":"code","49cbab66":"code","ab68e70a":"code","33e0275b":"code","7499ba4e":"code","bbe3a0d2":"code","3712afe9":"code","e6cb6c56":"code","b092c23d":"code","c18564fe":"code","e731fe22":"code","3cc4c6e7":"code","68892235":"code","a8c47fbb":"code","c3287df0":"code","d8bc976b":"code","e1cde0b2":"code","95a48e36":"code","12e81bb4":"code","9e6a10fb":"code","a3940a95":"code","0eb0b6f1":"code","decac254":"code","82e4bcc5":"code","4c3d54b3":"code","dd0347e5":"code","152a0ceb":"code","2d4f1efc":"code","8a359ad3":"code","8d8f821f":"code","d2811ffe":"code","821d8164":"code","a725e7c7":"code","800b945e":"code","ace45c31":"code","f6ba2769":"code","80ff8873":"code","91e00506":"code","9f7e757b":"code","57e37ec7":"code","eb83481a":"code","b7f6f16d":"code","023d7945":"code","d878a26f":"code","8ea0f52e":"code","c4314faf":"code","7dffe083":"code","d1c79379":"code","d655e546":"code","cea4fc73":"code","1972edff":"code","d43bd36b":"code","bb768f15":"code","52ae9547":"code","5e5deb5a":"code","fa37b819":"markdown","9b596061":"markdown","bd355689":"markdown","1d27c415":"markdown","a7675601":"markdown","e169885f":"markdown","a8ad5a12":"markdown","5e6736d1":"markdown","1d19d3f2":"markdown","f654dccb":"markdown","ace55704":"markdown","2aa46366":"markdown","167cf73a":"markdown","36057530":"markdown","188290cc":"markdown","e05114dc":"markdown","990b90d2":"markdown","c19254b9":"markdown","b3e00d2f":"markdown","d577617c":"markdown"},"source":{"8ac999cf":"## Import","f19a2970":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a7554250":"!pip install pywaffle\n!pip install plotly\n!pip install bokeh","3e9a520c":"netflix = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","eb0667ad":"netflix.shape","d2e4f093":"netflix.head()","c60768ad":"netflix.info()","190ab867":"netflix.isna().sum()","309ca4ef":"netflix = netflix.drop(['director', 'cast', 'description'], axis=1)","adeb2c24":"netflix.columns","5e62f558":"netflix.isna().sum()","df0b6884":"netflix.dtypes","4159ac66":"netflix['type'] = pd.Categorical(netflix['type'])","894cbaed":"netflix['date_added'] = netflix['date_added'].astype('datetime64[ns]')","28ab5438":"netflix['rating'] = pd.Categorical(netflix['rating'])","5536a554":"netflix.dtypes","e69a05a7":"netflix['rating'].cat.categories","252a11cc":"netflix[netflix['rating'] == \"66 min\"]","732bb411":"netflix[netflix['rating'] == \"74 min\"]","5b792c32":"netflix[netflix['rating'] == \"84 min\"]","a6e422cd":"netflix.loc[netflix.rating == \"66 min\", 'duration'] = \"66 min\"","a1ae8959":"netflix.loc[netflix.rating == \"74 min\", 'duration'] = \"74 min\"","e1a87834":"netflix.loc[netflix.rating == \"84 min\", 'duration'] = \"84 min\"","bfb757c0":"netflix[netflix['rating'] == \"84 min\"]","aa13c2f8":"netflix.loc[netflix['rating'] == \"66 min\", 'rating'] = np.nan","8df40d2c":"netflix.loc[netflix['rating'] == \"74 min\", 'rating'] = np.nan","eee7eb76":"netflix.loc[netflix['rating'] == \"84 min\", 'rating'] = np.nan","e360dcdc":"\"\"\"\nratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}\n\"\"\"","4c05e445":"ratings_ages = {\n    'G': 'T',\n    'TV-G': 'T',\n    'TV-Y': 'T',\n    'TV-PG': '6+',\n    'TV-Y7-FV': '6+',\n    'TV-Y7': '6+',\n    'PG': '6+',\n    'TV-14': '14+',\n    'PG-13': '14+',\n    'R': '18+',\n    'TV-MA': '18+',\n    'NC-17': '18+',\n    'UR': '18+',\n    'NR': '18+'\n}","9bdff890":"netflix['target_ages'] = netflix['rating'].replace(ratings_ages)\nnetflix['target_ages'].unique()","1873b63e":"netflix.head()","d72a48c2":"netflix_f = netflix[netflix['type'] == \"Movie\"]","df85ea45":"netflix_f.shape","9649ed1e":"netflix_s = netflix[netflix['type'] == \"TV Show\"] ","639dc68d":"netflix_s.shape","ba5ef997":"netflix_f[['duration_min', 'min']] = netflix_f['duration'].str.split(' ', expand=True)","60d337eb":"netflix_f.head()","16a1dab1":"netflix_f.duration_min = pd.to_numeric(netflix_f.duration_min, errors='coerce')","cdb78f97":"netflix_f[netflix_f.isna()].sum()","3155693d":"netflix_f = netflix_f.drop(['duration', 'min'], axis=1)","697cf54e":"netflix_f.sort_values(by='duration_min')","57cb50b8":"netflix_s[['duration_num', 'seasons']] = netflix_s['duration'].str.split(' ', expand=True)","4fb5cc0d":"netflix_s.head()","49cbab66":"netflix_s.duration_num = pd.to_numeric(netflix_s.duration_num, errors='coerce')","ab68e70a":"netflix_s[netflix_s.isna()].sum()","33e0275b":"netflix_s = netflix_s.drop(['duration', 'seasons'], axis=1)","7499ba4e":"netflix_s.sort_values(by='duration_num')","bbe3a0d2":"from pywaffle import Waffle","3712afe9":"tot_df = 8807\nnum_f = 6131\nnum_s = 2676","e6cb6c56":"perc_films = num_f \/ tot_df * 100\nprint(perc_films)","b092c23d":"perc_tvs = num_s \/ tot_df * 100\nprint(perc_tvs)","c18564fe":"data = {'Movies': 69.62, 'TV Shows': 30.38}\nfig = plt.figure(\n    FigureClass=Waffle,\n    rows=10,\n    values=data,\n    colors=(\"#006400\", \"#A9A9A9\"),\n    title={'label': 'Percentage of Films and TV Shows in the catalogue', 'loc': 'left'},\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(data), 'framealpha': 0}\n)\nfig.gca().set_facecolor(\"#ffffff\")\nfig.set_facecolor(\"#ffffff\")\nplt.show()","e731fe22":"data = {'Movies': 69.62, 'TV Shows': 30.38}\nfig = plt.figure(\n    FigureClass=Waffle,\n    rows=10,\n    values=data,\n    colors=(\"#006400\", \"#A9A9A9\"),\n    title={'label': 'Percentage of Films and TV Shows in the catalogue', 'loc': 'left'},\n    icons='film',\n    font_size=12,\n    icon_legend=True,\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(data), 'framealpha': 0}\n)\nfig.gca().set_facecolor(\"#ffffff\")\nfig.set_facecolor(\"#ffffff\")\nplt.show()","3cc4c6e7":"data = {'Movies': 69.62, 'TV Shows': 30.38}\nfig = plt.figure(\n    FigureClass=Waffle,\n    rows=10,\n    values=data,\n    colors=(\"#006400\", \"#A9A9A9\"),\n    title={'label': 'Percentage of Films and TV Shows in the catalogue', 'loc': 'left'},\n    icons='video',\n    font_size=12,\n    icon_legend=True,\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(data), 'framealpha': 0}\n)\nfig.gca().set_facecolor(\"#ffffff\")\nfig.set_facecolor(\"#ffffff\")\nplt.show()","68892235":"dict_FvsS = {'type':[\"Movies\", \"TV Shows\"],\n             'num':[\"6131\", \"2676\"]}\n\ndf_FvsS = pd.DataFrame(dict_FvsS).set_index('type')\n\ndf_FvsS['num'] = df_FvsS['num'].astype('int')","a8c47fbb":"df_FvsS","c3287df0":"fig = plt.figure(\n    FigureClass=Waffle,\n    rows=10,\n    values=df_FvsS['num'] \/ 100,\n    colors=(\"#006400\", \"#A9A9A9\"),\n    title={'label': 'Percentage of Films and TV Shows in the catalogue', 'loc': 'left'},\n    labels=[\"{0} ({1}%)\".format(k, v) for k, v in data.items()],\n    legend={'loc': 'lower left', 'bbox_to_anchor': (0, -0.4), 'ncol': len(data), 'framealpha': 0}\n\n)","d8bc976b":"film_years = netflix_f.groupby('release_year')['release_year'].count()","e1cde0b2":"film_years.tail(20)","95a48e36":"import plotly.graph_objects as px\nimport plotly.express as go\nimport numpy as np\n\nx = netflix_f['release_year']\ny = netflix_f['duration_min']\n\nplot = px.Figure(data=[px.Scatter(\n    x=x,\n    y=y,\n    mode='markers',)\n])\n\nplot.update_layout(\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1,\n                step=\"year\",\n                stepmode=\"backward\"),\n            ])\n        ),\n        rangeslider=dict(\n            visible=True\n        ),\n    )\n)\n\nplot.show()","12e81bb4":"netflix_f[netflix_f['duration_min'] < 15].count()","9e6a10fb":"netflix_f[netflix_f['duration_min'] < 15][['title', 'release_year', 'duration_min']]","a3940a95":"netflix_last15 = netflix_f[netflix_f['release_year'] > 2006][['title', 'release_year', 'duration_min']]","0eb0b6f1":"grouped_15 = netflix_last15.groupby('release_year')","decac254":"mean_15 = grouped_15.mean()","82e4bcc5":"mean_15 = mean_15.reset_index()","4c3d54b3":"mean_15.head()","dd0347e5":"mean_15.duration_min = mean_15.duration_min.round(2)\nmean_15.head()","152a0ceb":"sns.lineplot(data=mean_15, x='release_year', y='duration_min')","2d4f1efc":"sns.pointplot(data=mean_15, x='release_year', y='duration_min')","8a359ad3":"#creazione nuovo dataframe\ndataframe = pd.DataFrame({\"release_year\":[], \"movies\": [], \"tv_series\":[]})\n#ciclo for per ogni classe d'et\u00e0\nfor item in netflix[\"release_year\"].unique():\n  #query per identificare i record con punteggio peggiorato per la classe d'et\u00e0 in esame\n  queryStringMovies = \"release_year == \"+str(item)+\" and type == 'Movie'\"\n  #query per identificare i record con punteggio migliorato per la classe d'et\u00e0 in esame\n  queryStringTV = \"release_year == \"+str(item)+\" and type == 'TV Show'\"\n\n  #query\n  resMovies = netflix.query(queryStringMovies)\n  resTV = netflix.query(queryStringTV)\n  #inserimento nel dataframe del numero di migliorati o peggiorati per la classe d'et\u00e0 in esame\n  dataframe.loc[len(dataframe.index)] = [str(item), len(resMovies), len(resTV)]\n#ordinamento delle classi d'et\u00e0\ndataframe = dataframe.sort_values(\"release_year\")\n\ndataframe.head()\n","8d8f821f":"dataframe['movies'] = dataframe['movies'].astype('float')\ndataframe['tv_series'] = dataframe['tv_series'].astype('float')\n\ndataframe = pd.eval(\"delta = dataframe.movies - dataframe.tv_series\", target=dataframe)","d2811ffe":"dataframe.head(1)","821d8164":"import plotly.express as px\nfig = px.line(dataframe, x=\"release_year\", y=[\"movies\", \"tv_series\"])\nfig.show()","a725e7c7":"import plotly.express as px\nfig = px.line(dataframe, x=\"release_year\", y=[\"movies\", \"tv_series\"])\nfig.update_xaxes(type=\"log\")\nfig.show()","800b945e":"import plotly.express as px\nfig = px.line(dataframe, x=\"release_year\", y=[\"movies\", \"tv_series\"])\nfig.update_xaxes(type=\"date\")\nfig.show()","ace45c31":"dataframe.dtypes","f6ba2769":"dataframe['release_year'] = dataframe['release_year'].astype('int')","80ff8873":"dataframe.dtypes","91e00506":"# aggiungo decade al df\n\ndataframe.loc[dataframe['release_year'] <= 1930, 'decade'] = 1930\ndataframe.loc[dataframe['release_year'].between(1930,1940), 'decade'] = 1940\ndataframe.loc[dataframe['release_year'].between(1940,1950), 'decade'] = 1950\ndataframe.loc[dataframe['release_year'].between(1950,1960), 'decade'] = 1960\ndataframe.loc[dataframe['release_year'].between(1960,1970), 'decade'] = 1970\ndataframe.loc[dataframe['release_year'].between(1970,1980), 'decade'] = 1980\ndataframe.loc[dataframe['release_year'].between(1980,1990), 'decade'] = 1990\ndataframe.loc[dataframe['release_year'].between(1990,2000), 'decade'] = 2000\ndataframe.loc[dataframe['release_year'].between(2000,2010), 'decade'] = 2010\ndataframe.loc[dataframe['release_year'].between(2010,2020), 'decade'] = 2020\ndataframe.loc[dataframe['release_year'].between(2020,2030), 'decade'] = 2030","9f7e757b":"dataframe['decade'] = pd.Categorical(dataframe['decade'])","57e37ec7":"dataframe_10 = dataframe.loc[dataframe['release_year'] >= 2010]","eb83481a":"import seaborn as sns\nsns.set_theme(style=\"whitegrid\")\nsns.set_style(style='white')","b7f6f16d":"clrs = ['grey' if (x > min(dataframe['delta'])) else 'red' for x in dataframe['delta']]\nax = sns.barplot(x='release_year', y='delta', palette=clrs, data=dataframe)\nsns.despine()\n\nax.set(xticklabels=[])  \nax.set(title='Delta btw Films and TV shows')\nax.set(xlabel=None)\nax.tick_params(bottom=False)  # remove the ticks","023d7945":"# dataframe_10['dPos'] = dataframe_10['delta'] >= 0\nclrs = ['grey' if (x > min(dataframe_10['delta'])) else 'red' for x in dataframe_10['delta']]\nax = sns.barplot(x='release_year', y='delta', palette=clrs, data=dataframe_10)\nsns.despine(trim=True)\n\nax.set(title='Delta btw Films and TV shows')","d878a26f":"netflix_f[netflix_f['release_year'].isna()]","8ea0f52e":"netflix_f[netflix_f['target_ages'].isna()]","c4314faf":"# drop rows with na\n\nnetflix_f2 = netflix_f\nnetflix_f2[\"target_ages\"].unique()","7dffe083":"netflix_f2 = netflix_f2[netflix_f2['target_ages'].notna()]","d1c79379":"netflix_f2[netflix_f2['target_ages'].isna()]","d655e546":"import plotly.express as px\n\nfig = px.scatter(netflix_f2, x='release_year', color='target_ages', symbol='target_ages')\nfig.show()","cea4fc73":"netflix.groupby(netflix['date_added'].dt.year).count()","1972edff":"from bokeh.io import push_notebook, show, output_notebook\nfrom bokeh.layouts import row\nfrom bokeh.plotting import figure\noutput_notebook()","d43bd36b":"def get_data():\n  #creazione nuovo dataframe\n  dataframe = pd.DataFrame({\"release_year\":[], \"quattordici\": [], \"sei\":[], \"diciotto\":[], \"tutti\":[]})\n  #ciclo for per ogni classe d'et\u00e0\n  for item in netflix[\"release_year\"].unique():\n    #query per identificare i record con punteggio peggiorato per la classe d'et\u00e0 in esame\n    quattordici = \"release_year == \"+str(item)+\" and target_ages == '14+'\"\n    #query per identificare i record con punteggio migliorato per la classe d'et\u00e0 in esame\n    sei = \"release_year == \"+str(item)+\" and target_ages == '6+'\"\n    diciotto = \"release_year == \"+str(item)+\" and target_ages == '18+'\"\n    tutti = \"release_year == \"+str(item)+\" and target_ages == 'T'\"\n    #query\n    resMovies = netflix.query(queryStringMovies)\n    resTV = netflix.query(queryStringTV)\n    #inserimento nel dataframe del numero di migliorati o peggiorati per la classe d'et\u00e0 in esame\n    dataframe.loc[len(dataframe.index)] = [str(item), len(netflix.query(quattordici)), len(netflix.query(sei)), len(netflix.query(diciotto)), len(netflix.query(tutti))]\n  #ordinamento delle classi d'et\u00e0\n  dataframe = dataframe.sort_values(\"release_year\")\n  return dataframe","bb768f15":"from bokeh.plotting import figure, show, save, output_file\nfrom bokeh.layouts import layout\nfrom bokeh.models import Div, RangeSlider, Spinner,Span, Label, LabelSet\nfrom bokeh.models.callbacks import CustomJS\n\ndataframe.head()\noutput_file(filename=\"custom_filename.html\")\n\np = figure(title=\"Il numero di serie per anno ad un certo punto ha superato il numero di film\", x_axis_label=\"Anno\", y_axis_label=\"Numero\")\np.line(dataframe[\"release_year\"], dataframe[\"movies\"], legend_label=\"Numero di film per anno\", color=\"#1E88E5\", line_width=2)\np.line(dataframe[\"release_year\"], dataframe[\"tv_series\"], legend_label=\"Numero di serie per anno\", color =\"#FFC107\", line_width=2)\np.line(dataframe[\"release_year\"], dataframe[\"delta\"], legend_label=\"Differenza fra numero di film e serie per anno\", color = \"#D81B60\", line_width=2)\n\np.legend.location = \"top_left\"\np.legend.click_policy=\"hide\"\n\ndelta_inverted = Span(location=2018,\n                              dimension='height', line_color='#009E73',\n                              line_dash='dashed', line_width=3)\np.add_layout(delta_inverted)\nrange_slider = RangeSlider(\n    title=\"Seleziona range date\", # a title to display above the slider\n    start=dataframe.iloc[0][\"release_year\"],  # set the minimum value for the slider\n    end=dataframe.iloc[dataframe.shape[0] -1][\"release_year\"],  # set the maximum value for the slider\n    step=1,  # increments for the slider\n    value=(dataframe.iloc[0][\"release_year\"], dataframe.iloc[dataframe.shape[0] -1][\"release_year\"]),  # initial values for slider\n    margin=(40,40,0,0)\n    )\ndiv = Div(\n    text=\"\"\"\n          <p>Seleziona l'intervallo di date utilizzando lo slider<\/p>\n          \"\"\",\n    width=200,\n    height=30,\n    margin=(0,0,0,0)\n)\n\ncitation = Label(x=2018, y=800, \n                 text='Drop numero Film',\n                 border_line_color='black',\n                 background_fill_color='white')\np.add_layout(citation)\ncallback = CustomJS(args=dict(source=dataframe.to_json(), ref_source=dataframe.to_json()), code=\"\"\"\n    \n    \/\/ print out array of date from, date to\n    console.log(cb_obj.value); \n    \n    \/\/ dates returned from slider are not at round intervals and include time;\n    \/\/const date_from = Date.parse(new Date(cb_obj.value[0]).toDateString());\n    \/\/const date_to = Date.parse(new Date(cb_obj.value[1]).toDateString());\n    \n    \/\/const data = source.data;\n    \/\/const ref = ref_source.data;\n    \n    \/\/const from_pos = ref[\"x\"].indexOf(date_from);\n    \/\/ add + 1 if you want inclusive end date\n    \/\/const to_pos = ref[\"x\"].indexOf(date_to);\n        \n    \/\/ re-create the source data from \"reference\"\n    \/\/data[\"y\"] = ref[\"y\"].slice(from_pos, to_pos);\n    \/\/data[\"x\"] = ref[\"x\"].slice(from_pos, to_pos);\n    \n    \/\/source.change.emit();\n    \"\"\")\n# range_slider.js_on_change(\"value\", callback)\nrange_slider.js_link(\"value\", p.x_range, \"start\", attr_selector=0)\nrange_slider.js_link(\"value\", p.x_range, \"end\", attr_selector=1)\nlayout = layout([\n    [div],[range_slider, p]\n    \n])\n# save(layout)\nshow(layout)\n# netflix_f2.query(\"type == 'Movie'\")[\"type\"]","52ae9547":"from bokeh.plotting import figure, show, save, output_file\nfrom bokeh.layouts import layout\nfrom bokeh.models import Div, RangeSlider, Spinner,Span, Label, LabelSet\nfrom bokeh.models.callbacks import CustomJS\n\ndataframe.head()\noutput_file(filename=\"custom_filename.html\")\ndata = get_data()\np = figure(title=\"Il numero di serie per anno ad un certo punto ha superato il numero di film\", x_axis_label=\"Anno\", y_axis_label=\"Numero\")\np.line(data[\"release_year\"], data[\"quattordici\"], legend_label=\"14+\", color=\"#1E88E5\", line_width=2)\np.line(data[\"release_year\"], data[\"sei\"], legend_label=\"6+\", color =\"#FFC107\", line_width=2)\np.line(data[\"release_year\"], data[\"diciotto\"], legend_label=\"18+\", color = \"#D81B60\", line_width=2)\np.line(data[\"release_year\"], data[\"tutti\"], legend_label=\"T\", color = \"#181B60\", line_width=2)\np.legend.location = \"top_left\"\np.legend.click_policy=\"hide\"\n\ndelta_inverted = Span(location=2018,\n                              dimension='height', line_color='#009E73',\n                              line_dash='dashed', line_width=3)\np.add_layout(delta_inverted)\nrange_slider = RangeSlider(\n    title=\"Seleziona range date\", # a title to display above the slider\n    start=dataframe.iloc[0][\"release_year\"],  # set the minimum value for the slider\n    end=dataframe.iloc[dataframe.shape[0] -1][\"release_year\"],  # set the maximum value for the slider\n    step=1,  # increments for the slider\n    value=(dataframe.iloc[0][\"release_year\"], dataframe.iloc[dataframe.shape[0] -1][\"release_year\"]),  # initial values for slider\n    margin=(40,40,0,0)\n    )\ndiv = Div(\n    text=\"\"\"\n          <p>Seleziona l'intervallo di date utilizzando lo slider<\/p>\n          \"\"\",\n    width=200,\n    height=30,\n    margin=(0,0,0,0)\n)\n\ncitation = Label(x=2018, y=800, \n                 text='Drop numero Film',\n                 border_line_color='black',\n                 background_fill_color='white')\np.add_layout(citation)\ncallback = CustomJS(args=dict(source=dataframe.to_json(), ref_source=dataframe.to_json()), code=\"\"\"\n    \n    \/\/ print out array of date from, date to\n    console.log(cb_obj.value); \n    \n    \/\/ dates returned from slider are not at round intervals and include time;\n    \/\/const date_from = Date.parse(new Date(cb_obj.value[0]).toDateString());\n    \/\/const date_to = Date.parse(new Date(cb_obj.value[1]).toDateString());\n    \n    \/\/const data = source.data;\n    \/\/const ref = ref_source.data;\n    \n    \/\/const from_pos = ref[\"x\"].indexOf(date_from);\n    \/\/ add + 1 if you want inclusive end date\n    \/\/const to_pos = ref[\"x\"].indexOf(date_to);\n        \n    \/\/ re-create the source data from \"reference\"\n    \/\/data[\"y\"] = ref[\"y\"].slice(from_pos, to_pos);\n    \/\/data[\"x\"] = ref[\"x\"].slice(from_pos, to_pos);\n    \n    \/\/source.change.emit();\n    \"\"\")\n# range_slider.js_on_change(\"value\", callback)\nrange_slider.js_link(\"value\", p.x_range, \"start\", attr_selector=0)\nrange_slider.js_link(\"value\", p.x_range, \"end\", attr_selector=1)\nlayout = layout([\n    [div],[range_slider, p]\n    \n])\n# save(layout)\nshow(layout)\n# netflix_f2.query(\"type == 'Movie'\")[\"type\"]","5e5deb5a":"dataframe.tail()","fa37b819":"Check for null values","9b596061":"Dropping unnecessary columns","bd355689":"Division between Film and TV Series","1d27c415":"checked on the web, real duration values","a7675601":"### Line chart between years and duration - last 15 years","e169885f":"### Correlation btw years and target age","a8ad5a12":"### Line Chart - When did Netflix add the most products?","5e6736d1":"Change duration column to numeric [Netflix films]","1d19d3f2":"## Data Visualization","f654dccb":"Change duration column to numeric [Netflix tv series]","ace55704":"TV-Y: This program is designed to be appropriate for all children.\n\nTV-Y7: This program is designed for children age 7 and above.\n\nTV-G: This program is suitable for all ages.\n\nTV-PG: This program contains material that parents may find unsuitable for younger children (hence, Parental Guidance)\n\nTV-14: This program contains some material that many parents would find unsuitable for children under 14 years of age.\n\nTV-MA: This program is specifically designed to be viewed by adults and therefore may be unsuitable for children under 17.\n\nG: This program is suitable for all ages.\n\nNC-17: unsuitable for children under 17.\n\nNR: not rated.\n\nPG: may find unsuitable for younger children. I would say it is the same as TV-PG\n\nPG-13: for children over 13.\n\nR: restricted, only for children over 12.\n\nTV-Y7-FV: Fantasy violence (exclusive to the TV-Y7 rating)\n\nUR: not rated, as in (unrated).\n\nsource: https:\/\/en.wikipedia.org\/wiki\/Television_content_rating_system","2aa46366":"Resolving these 3 issues also resolves the three missing values for the 'duration' column.","167cf73a":"## Data Cleaning","36057530":"### Data Modelling","188290cc":"### Waffle - division between number of films and tv shows in the dataset","e05114dc":"Fix data types","990b90d2":"ITALIA\n\nI film sono classificati in quattro categorie:\n\nT: Film per tutti.\n\n6+: Non adatto ai minori di 6 anni.\n\n14+: Vietato ai minori di 14 anni; spettatori che hanno compiuto i 12 anni sono ammessi alla proiezione se accompagnati da un genitore o da un tutore.\n\n18+: Vietato ai minori di 18 anni; spettatori che hanno compiuto i 16 anni sono ammessi alla proiezione se accompagnati da un genitore o da un tutore.\n\nsource: https:\/\/it.wikipedia.org\/wiki\/Sistemi_di_classificazione_dei_film","c19254b9":"source code: https:\/\/stackoverflow.com\/questions\/41400136\/how-to-do-waffle-charts-in-python-square-piechart","b3e00d2f":"### Correlation between years and duration of films","d577617c":"### Bar chart - difference btw number of movies or tv shows during the years"}}