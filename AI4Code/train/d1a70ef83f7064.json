{"cell_type":{"124890c2":"code","c5212acc":"code","fbc2422e":"code","d668e28a":"code","d16c9fc5":"code","4dc17589":"code","1abc3859":"code","d7c63ed6":"code","9545064a":"code","94176893":"code","7f9596da":"code","ae442f86":"code","dd4f4911":"code","809ab73e":"code","bcdf89f1":"code","d6f1cbcb":"code","98f2eeb6":"code","91feb846":"code","cb4c2f6b":"code","f4dba264":"code","f578da2d":"code","b8f598d1":"code","a5838032":"code","441c06d5":"code","90b62367":"code","02578b3d":"code","7c91eadb":"code","a3af77d0":"code","9bad654e":"code","2b1884bc":"code","a409bb90":"code","150c578f":"code","16b49a48":"code","e1879da0":"code","5689d7fd":"code","29545826":"code","325e23e8":"code","fb0bd057":"code","cef804c6":"code","31eef6b2":"code","77d053c2":"code","09ff35c3":"markdown","6a73d68b":"markdown","1b7c7f77":"markdown","d2c2ae9c":"markdown","6e236c70":"markdown","b6f04e6c":"markdown","816a3ee2":"markdown","0d6d0561":"markdown","2656fb0e":"markdown","6106b4ef":"markdown","f5860ed5":"markdown","1ba28dcf":"markdown","2d2f3775":"markdown","02e3792c":"markdown","b13912eb":"markdown","83ae17dc":"markdown","f0d03c30":"markdown","0122bdb1":"markdown","237c555c":"markdown","e911be61":"markdown","13d69aa6":"markdown","30c8942b":"markdown","98df1d1b":"markdown","92440e87":"markdown","aa3cc3c5":"markdown","97f233a8":"markdown","d245ff24":"markdown","8772aeaf":"markdown","2359660b":"markdown","49c26996":"markdown","781e2097":"markdown","9ef93a61":"markdown","ebee8fe8":"markdown","87db1f83":"markdown","453a11ad":"markdown","2140b2c1":"markdown","2e967a52":"markdown","d4481bf2":"markdown","c79ec0bc":"markdown","8eb0f261":"markdown","86b0a21b":"markdown","c0bca844":"markdown"},"source":{"124890c2":"!pip install chart-studio","c5212acc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# plotly standard imports\nimport plotly.graph_objs as go\nimport chart_studio.plotly as py\n\n# Cufflinks wrapper on plotly\nimport cufflinks as cf\n\n%matplotlib inline\n\n# Options for pandas\npd.options.display.max_columns = 30\n\n# Display all cell outputs\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = 'all'\n\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\ncf.go_offline(connected=True)\n\n# Set global theme\ncf.set_config_file(world_readable=True, theme='pearl')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fbc2422e":"df = pd.read_csv('\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv')","d668e28a":"df.head()","d16c9fc5":"df.columns","4dc17589":"df.isnull().sum()","1abc3859":"df.info()","d7c63ed6":"df[df['Reviews'].str.isnumeric() == False]","9545064a":"df['Reviews']  = df['Reviews'].str.replace('3.0M', '3000000')","94176893":"df['Reviews'] = df['Reviews'].astype(str).astype(int)","7f9596da":"df[df['Installs'].str.isnumeric() == False]","ae442f86":"df['Installs'] = df['Installs'].str.replace(',', '').str.replace('+', '').replace('Free', '0')","dd4f4911":"df['Installs'] = df['Installs'].astype(str).astype(int)","809ab73e":"df['Price'].unique()","bcdf89f1":"df['Price'] = df['Price'].str.replace('$', '').str.replace('Everyone', '0')","d6f1cbcb":"df['Price'] = df['Price'].astype(str).astype(float)","98f2eeb6":"df['Size'].unique()","91feb846":"list_memory =  df['Size']","cb4c2f6b":"mem = []\nfor i in list_memory:\n    #print(i[-1])\n    if i[-1] == 'k':\n        num1 = float(i[:-1])\/1000\n        mem.append(num1)\n    elif i[-1] == 'M':\n        num2 = float(i[:-1])\n        mem.append(num2)\n        #print(num2)\n    else:\n        num3 = 0\n        #print(num3)\n        mem.append(num3)","f4dba264":"df['Size'] = mem","f578da2d":"df['Size'] = df['Size'].astype(str).astype(float)","b8f598d1":"df.info()","a5838032":"df.describe()","441c06d5":"df=df.replace({'Size': {0: df['Size'].mean()},\n              'Installs': {0: df['Installs'].mean()}}) ","90b62367":"df.describe()","02578b3d":"import plotly.figure_factory as ff\ncorrs = df.corr()\n\nfigure = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    colorscale='Aggrnyl',\n    annotation_text=corrs.round(2).values,\n    showscale=True, reversescale=True)\n\nfigure.layout.margin = dict(l=200, t=200)\nfigure.layout.height = 800\nfigure.layout.width = 1000\n\niplot(figure)","7c91eadb":"import plotly.express as px\nfig = px.scatter(df, x=\"Installs\", y=\"Reviews\", color=\"Size\",\n                 title=\"Relation between Reviews and Installs\"\n                )\nfig.show()","a3af77d0":"df_cont = df.groupby('Content Rating', as_index=False).sum()\ndf_cont","9bad654e":"import plotly.express as px\n\nfig = px.scatter(df_cont, x=\"Rating\", y=\"Size\",\n                 size=\"Reviews\", color=\"Installs\",\n                 hover_name=\"Content Rating\", log_x=True, size_max=60,\n                labels={\"Rating\":\"Sum of rating\",\n                       \"Size\":'Sum of size'})\nfig.show()","2b1884bc":"fig = px.bar(df_cont, x='Content Rating', y='Installs')\nfig.show()","a409bb90":"df_gen = df.groupby('Genres', as_index=False).sum()","150c578f":"df_gen.head()","16b49a48":"fig = px.bar(df_gen, x='Genres', y='Reviews',\n             hover_data=['Size', 'Price'], color='Size',\n             labels={'Reviews':'App reviews according to Genres'}, height=400, \n             title ='App Genres with it reviews')\nfig.show()","e1879da0":"fig = px.bar(df_gen, x=\"Genres\", y=[\"Price\", \"Rating\", \"Size\"], title=\"Wide-Form Input\")\nfig.show()","5689d7fd":"df_cat = df.groupby('Category', as_index=False).count()\ndf_cat.head()","29545826":"fig = px.bar(df_cat, x='Category', y='App')\nfig.show()","325e23e8":"df['Type'] = df['Type'].str.replace('0', 'Free')","fb0bd057":"df_type = df.groupby('Type', as_index=False).sum()\ndf_type","cef804c6":"fig = px.bar(df_type, x=\"Type\", y=\"Rating\",\n             color='Reviews',\n             labels={'Rating':'Sum of the ratings'},\n             title = 'App distribution according to their type',\n             height=400)\nfig.show()","31eef6b2":"df_overview = df[['Category', 'Genres', 'App', 'Installs', 'Type', 'Price']]\ndf_overview.head()","77d053c2":"fig = px.sunburst(df_overview, path=['Category', 'Genres', 'App'], values='Installs',\n                 color = 'Price'\n                 )\nfig.show()","09ff35c3":"# Relationship between reviews and Installs","6a73d68b":"From the above graph we can see that 'Action' genres has the maximum size. It can be related as the games app's have more size.","1b7c7f77":"# Determining the categories","d2c2ae9c":"### Change the dtype to int","6e236c70":"We have replaced the column with modified values.","b6f04e6c":"This column contain the type as 0 which has the price of zero. Thus we replaced that type as Free type.","816a3ee2":"# Reading the file.","0d6d0561":"## Price columns\nWe can see $ sign and 'Everyone' as the value in the column. Thus we can replace using the same string method as above.","2656fb0e":"The value in the Size column is given to a variable.","6106b4ef":"# Checking info once again","f5860ed5":"The above is the dataset which contain the numerical and categorical data. ","1ba28dcf":"# Content Rating analysis","2d2f3775":"From above we can see that most of the installs have reviews within the range of 20M","02e3792c":"## Installs column\nWe can see that the column consist of , and + sign. On doing Series.str.isnumeric we can see that it shows the value 'Free'. So we can also replace it.","b13912eb":"From the above graphs we can make following observations:\n1. Most of the apps are free.\n2. Game category is the most installed app followed by Communication genres.\n","83ae17dc":"From the above we can see that Adults only 18+ and Unrated are the free apps. However the category Everyone is having maximum price.","f0d03c30":"### Converting data type\nHere we are converting the datatype to float to match the numeric values.","0122bdb1":"From the above we can see that minimum value for the size and install is zero. We also remember giving some string a zero value. Thus we should replace the zero value with the mean value of the columns","237c555c":"### Conversion\nWe can now convert the type to float as it contain decimal as well.","e911be61":"From the above we can see that installs and reviews have some co-relation between them. Let us further explore these two column","13d69aa6":"From the data frame above we find it bit difficult to see the maximum count. But with the help of vizualization it is within seconds we can tell that FAMILY app is the most usable category.","30c8942b":"# Overview of various columns","98df1d1b":"# Isnull\nWe need to see if there is any null value in our data frame","92440e87":"### Changing the dtype\nAfter replacing all the unwanted portion we can now change the dtype.","aa3cc3c5":"Since we can assume that 'Everyone' in the column must be that app is free for everyone. Thus we replaced it with the value of 0.","97f233a8":"# Type column","d245ff24":"As expected Everyone has maximum number of installs.","8772aeaf":"This file is the walkthrough the pandas and plotly library used for the data science and vizualization. Through the project we will see how the data science can be used for finding different properties of the given data set. Also the vizualization presents the powerful way to see the numbers given in the dataset.","2359660b":"As the sum of reviews for 'Unrated' and 'Adults only 18+' are very less compared to other thus we cannot see their bubbles.","49c26996":"We can see that there is only one row with the non numeric value. Thus we can use Series.str.replace to replace the value.\n","781e2097":"# Co-relation\nLet us see what is the co-relation between the different columns","9ef93a61":"# Info\nThis will tell you if the columns are in correct datatype or some column value has to be changed.","ebee8fe8":"## Reviews Column\nWe can see from above that the Reviews column is object type. But the initial values give integer as output. So to check where the value is not numeric we can use Series.str.isnumeric() function.","87db1f83":"From the above it is clear that app's related to Finance, Entertainment, lifestyle and medicine are more costly as compared to others.","453a11ad":"We can see that people tend to review the free apps more as compared to paid apps. Also the sum of rating of the free apps is way more than the paid ones.","2140b2c1":"# Collecting numeric columns\nWe can see the columns 'Rating', 'Reviews', 'Price', 'Size' and 'Installs' are numeric. But on futher analysis we can see that 'Size', 'Price' and 'Installs' contain some other characters as well.","2e967a52":"The following function replaces M, replace k and convert it into MB. The string value is given a 0 value.","d4481bf2":"## Size Column\nHere we can see there are three types of values.\n\n1. Size in MB\n2. Size in KB\n3. String<br>\nThus we will remove the M and replace k. We will also divide the row value having size in KB to make it MB. Also we will replace the string with 0. This can later be replaced with the mean of the column.","c79ec0bc":"# Genres Analysis","8eb0f261":"From above we can see that even the numeric column are in object datatype. This could present problem during numeric analysis. Hence the change of the column is required.","86b0a21b":"# Determing the columns\nThe colums give a rough idea which are useful for the analysis and which can be not so useful.","c0bca844":"# Describe\nThe describe method gives a quick overview of the statistics of the numeric columns"}}