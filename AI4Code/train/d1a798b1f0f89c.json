{"cell_type":{"2258d048":"code","93f3b4d6":"code","f59b2a9e":"code","49b2cc99":"code","0f5daa37":"code","9a6ae1df":"code","d5734956":"code","fbe3dd35":"code","861c8b1c":"code","371067d9":"code","c5549802":"code","eb79faac":"code","91aedd0c":"code","595d2f59":"code","46b07a22":"code","35644fa9":"code","abe2c18c":"code","662432ef":"code","d6594526":"code","a504eef2":"code","b1529c3c":"code","8edf3c8d":"code","339b4365":"code","b4e38b0d":"code","0f35fd83":"code","918a3802":"code","5ec8c19e":"code","31715f2e":"code","60c34a43":"code","be314b7f":"code","b3f7c8bd":"code","596ec7b2":"markdown","c5262624":"markdown","b26aacb8":"markdown","5284cb56":"markdown"},"source":{"2258d048":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nplt.style.use(\"seaborn-whitegrid\")       \nimport pandas_profiling as pp \n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","93f3b4d6":"df = pd.read_csv(\"\/kaggle\/input\/salary-data-simple-linear-regression\/Salary_Data.csv\")","f59b2a9e":"df.head()","49b2cc99":"df.shape","0f5daa37":"df.info()","9a6ae1df":"df.describe().T","d5734956":"\nsns.scatterplot(x = \"YearsExperience\", y = \"Salary\",hue = \"YearsExperience\",data = df);\n","fbe3dd35":"sns.pairplot(df,kind= \"reg\");","861c8b1c":"sns.jointplot(x=\"YearsExperience\", y=\"Salary\",color = 'blue',kind = \"reg\", data=df,size = 5);","371067d9":"X = df['YearsExperience']\ny = df['Salary']","c5549802":"import statsmodels.api as sm\nX = sm.add_constant(X)\nlm = sm.OLS(y, X)\nmodel = lm.fit()\nmodel.summary()\n\n#You can use stats model to learn statistical details (such as p_value, model parameters ..)\n#You can create a model with using stats model in order to predict values. \n#the stats model is mostly used to look at statistical details, to understand the data and model.","eb79faac":"print(\"f_pvalue: \", \"%.4f\" % model.f_pvalue)","91aedd0c":"model.params","595d2f59":"STM = \"Salary = \" +  str(\"%.4f\" % model.params[0]) + \" + \" + \"YearsExperience*\" + str(\"%.4f\" % model.params[1])\nprint(STM)","46b07a22":"g = sns.regplot(df[\"YearsExperience\"], df[\"Salary\"], ci=None, scatter_kws={'color':'r', 's':9});\ng.set_title(\" Salary = 25321.58 + YearsExperience*9423.82\");\ng.set_ylabel(\"Salary\");\ng.set_xlabel(\"YearsExperience\");\n#plt.xlim(-10,310)\n#plt.ylim(bottom=0)","35644fa9":"X = df['YearsExperience']\ny = df['Salary']","abe2c18c":"\nfrom sklearn.model_selection import train_test_split,cross_val_score\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state= 42)","662432ef":"X_train.shape","d6594526":"X_train = X_train[:,np.newaxis]\nX_test = X_test[:,np.newaxis]\n\n#numpy.newaxis is used to increase the dimension of the existing array by one more dimension, when used once.","a504eef2":"X_train.shape\n\n#After used numpy.newaxis, shape of X_train was change. In order to use fit(), your feature shape must be column vector.","b1529c3c":"X_test.shape","8edf3c8d":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression().fit(X_train,y_train)","339b4365":"model.intercept_","b4e38b0d":"model.coef_ ","0f35fd83":"LR = \"Salary = \" +  str(\"%.2f\" % model.intercept_ ) + \" + YearsExperience\" + \"*\" + str(\"%.2f\" % model.coef_)\nprint(LR)","918a3802":"y_pred_train = model.predict(X_train)\ny_pred_test = model.predict(X_test)","5ec8c19e":"ax1 = sns.distplot(model.predict(X_train), hist=False, color=\"r\", label=\"Actual Train Value\")\nsns.distplot(y_train, hist=False, color=\"b\", label=\"Fitted Train Values\" , ax=ax1);","31715f2e":"ax1 = sns.distplot(model.predict(X_test), hist=False, color=\"r\", label=\"Actual Test Value\")\nsns.distplot(y_test, hist=False, color=\"b\", label=\"Fitted Test Values\" , ax=ax1);","60c34a43":"trainscr = model.score(X_train, y_train)\ntestscr = model.score(X_test, y_test)\n\nprint(\"train score:{}\\ntest score:{}\".format(trainscr,testscr))","be314b7f":"from sklearn.metrics import mean_squared_error, r2_score\n\nrmse = np.sqrt(mean_squared_error(y_train, model.predict(X_train)))\n\n\nrmse1 = np.sqrt(mean_squared_error(y_test, model.predict(X_test)))\n\n\nprint(\"train rmse:{}\\ntest rmse:{}\".format(rmse,rmse1))","b3f7c8bd":"print(STM)\nprint(LR)","596ec7b2":"# 3.Model","c5262624":"## 3.2. LinearRegression","b26aacb8":"#  2. Data Visualization","5284cb56":"## 3.1.Stats Model"}}