{"cell_type":{"9c975ea3":"code","0db41dec":"code","68b0efa4":"code","7951e4da":"code","13ef459b":"code","0472f3f0":"code","0255729b":"code","9a65f89f":"code","7b23fd92":"code","c46fcaeb":"code","06a0d165":"code","759fa4c6":"code","573dfc45":"code","da2569dd":"code","d8a0daab":"code","efbc1dbf":"code","05c1fc49":"code","a7f5bcf7":"code","ab4628e7":"code","361cffcf":"code","87f26a17":"code","3dde8e9b":"code","20d89a5a":"code","152ade90":"markdown","59c355c6":"markdown","e79c7ca7":"markdown","f7f0fadc":"markdown","7cb9107e":"markdown"},"source":{"9c975ea3":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\n%matplotlib inline","0db41dec":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           \nTEST_DIR = DATA_DIR + '\/test'                             \n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       \nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv' \ndata_df = pd.read_csv(TRAIN_CSV)\nprint(data_df.head())\nlabels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","68b0efa4":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\ndef show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    \ndef show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","7951e4da":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","13ef459b":"imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n    T.Resize(size = (224, 224)),\n    T.RandomCrop(size = 200, padding=8, padding_mode='reflect'),\n    T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n    T.RandomHorizontalFlip(), \n    T.RandomRotation(degrees=10),\n    T.ToTensor(), \n#     T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n    T.Resize(size = (224, 224)), \n    T.ToTensor()\n#     T.Normalize(*imagenet_stats)\n])","0472f3f0":"np.random.seed(42)\nmsk = np.random.rand(len(data_df)) < 0.9\n\ntrain_df = data_df[msk].reset_index()\nval_df = data_df[~msk].reset_index()\n\ntrain_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)\n\nshow_sample(*train_ds[1541])\nlen(train_ds), len(val_ds)","0255729b":"batch_size = 64\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, \n                      num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, \n                    num_workers=2, pin_memory=True)\n\nshow_batch(train_dl, invert=True)","9a65f89f":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)\n","7b23fd92":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)    \n        acc = F_score(out, targets)\n        return acc, loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], last_lr: {:.4f}, train_acc: {:.4f}, train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['lrs'][-1], result['train_acc'], result['train_loss'], result['val_loss'], result['val_score']))","c46fcaeb":"class ProteinResnet(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet50(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Sequential(\n                      nn.Linear(num_ftrs, 256),\n                      nn.ReLU(),\n                      nn.Dropout(0.5),\n                      nn.Linear(256, 10)\n                        )\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","06a0d165":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","759fa4c6":"device = get_default_device()\nprint(device)\ntrain_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","573dfc45":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD, max_epochs_stop=3):\n    torch.cuda.empty_cache()\n    history = []\n    valid_loss_min = np.Inf\n    model_file_name = 'proteinmodel.pth'\n    epochs_no_improve =  0\n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n#     sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n#                                                 steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        train_acc = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            acc, loss = model.training_step(batch)\n            train_losses.append(loss)\n            train_acc.append(acc)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n#             sched.step()\n\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['train_acc'] = torch.stack(train_acc).mean().item()\n        result['lrs'] = lrs\n        valid_loss = result['val_loss']\n###################################### Early Stopping ##############################################\n\n\n        if valid_loss<valid_loss_min:\n            torch.save(model.state_dict(), model_file_name)\n            valid_loss_min = valid_loss                                  \n            epochs_no_improve = 0          \n        else:\n            epochs_no_improve += 1\n            if epochs_no_improve > max_epochs_stop:\n                model.epoch_end(epoch, result)\n                history.append(result)\n                return history  \n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","da2569dd":"model = to_device(ProteinResnet(), device)\nhistory = [evaluate(model, val_dl)]\nhistory","d8a0daab":"model.freeze()\nepochs = 40\nlr = 0.0001\ngrad_clip = 0.1\nweight_decay = 1e-3\nopt_func = torch.optim.Adam\nmax_epochs_stop = 5\n# %%time\nhistory += fit_one_cycle(epochs, lr, model, train_dl, val_dl,  \n                         weight_decay, \n                         grad_clip,\n                         opt_func,max_epochs_stop)","efbc1dbf":"model.unfreeze()\n\nlr = 0.0001\nepochs = 20\nhistory += fit_one_cycle(epochs, lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","05c1fc49":"model.load_state_dict(torch.load('.\/proteinmodel.pth'))","a7f5bcf7":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');\nplot_scores(history)","ab4628e7":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');\nplot_losses(history)","361cffcf":"def plot_lrs(history):\n    lrs = np.concatenate([x.get('lrs', []) for x in history])\n    plt.plot(lrs)\n    plt.xlabel('Batch no.')\n    plt.ylabel('Learning rate')\n    plt.title('Learning Rate vs. Batch no.');\nplot_lrs(history)","87f26a17":"# def predict_single(image):\n#     xb = image.unsqueeze(0)\n#     xb = to_device(xb, device)\n#     preds = model(xb)\n#     prediction = preds[0]\n#     print(\"Prediction: \", prediction)\n#     show_sample(image, prediction)\n# predict_single(test_dataset[74][0])","3dde8e9b":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)\ntest_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)\n\n@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","20d89a5a":"test_preds = predict_dl(test_dl, model)\nsubmission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.sample(20)\nsubmission_df.to_csv('submission.csv', index=False)","152ade90":"## Model","59c355c6":"## Dataset Class","e79c7ca7":"### Utility Functions","f7f0fadc":"### Configuration Files","7cb9107e":"## Augmentations"}}