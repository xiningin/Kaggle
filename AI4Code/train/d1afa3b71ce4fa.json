{"cell_type":{"41eff998":"code","7f5f4086":"code","01d44489":"code","9153c7f6":"code","7bbb5a55":"code","3ac55a22":"code","88a9f75f":"code","dd00f074":"code","1596e699":"code","98ebb751":"code","1ef1f192":"code","47114750":"code","cd5b2a15":"code","38d68b8d":"markdown","f16e2adb":"markdown","1cd758a7":"markdown","794aeb18":"markdown","94b07876":"markdown","b19cdc77":"markdown","3bdce077":"markdown","745960d9":"markdown","c330eb1b":"markdown","59b37a6f":"markdown","7ce2b201":"markdown","3c47ef6e":"markdown","29f36920":"markdown","efc8a2ef":"markdown"},"source":{"41eff998":"# Import Required Python Packages :\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Setting up our enviroment\n# Data Viz & Regular Expression Libraries :\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\n# Scientific and Data Manipulation Libraries :\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Import FastAI library \nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.metrics import error_rate\nimport os","7f5f4086":"x  = '\/kaggle\/input\/cat-and-dog\/training_set\/training_set'\npath = Path(x)\npath.ls()\n","01d44489":"\nnp.random.seed(40)\ndata = ImageDataBunch.from_folder(path, train = '.', valid_pct=0.2,\n                                  ds_tfms=get_transforms(), size=224,\n                                  num_workers=4).normalize(imagenet_stats)","9153c7f6":"data.show_batch(rows=4, figsize=(7,6),recompute_scale_factor=True)","7bbb5a55":"data","3ac55a22":"\nprint(data.classes)\nlen(data.classes)\ndata.c","88a9f75f":"learn = cnn_learner(data, models.resnet34, metrics=[accuracy], model_dir = Path('..\/kaggle\/working'),path = Path(\".\"))\n","dd00f074":"learn.lr_find()\nlearn.recorder.plot(suggestions=True)","1596e699":"lr1 = 1e-3\nlr2 = 1e-1\nlearn.fit_one_cycle(4,slice(lr1,lr2))","98ebb751":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()","1ef1f192":"img = open_image('..\/input\/cat-and-dog\/test_set\/test_set\/dogs\/dog.4003.jpg')\nprint(learn.predict(img)[0])\nimg","47114750":"learn.export(file = Path(\"\/kaggle\/working\/export.pkl\"))\n","cd5b2a15":"learn.model_dir = \"\/kaggle\/working\"\nlearn.save(\"stage-1\",return_path=True)","38d68b8d":"### 2.4  Print Classes present in the data\ndata.c \u2014 How many classes are there in our dataset?\n\nlen(data.train_ds) \u2014 What is the size of our training dataset?\n\nlen(data.valid_ds) \u2014 What is the size of our validation dataset?**","f16e2adb":"## 5. Prediction using trained model","1cd758a7":"## Deploying your model (OPTIONAL)\n\nWhen you are ready to put your model in production, export the minimal state of your Learner with:","794aeb18":"### woooho (95% + accuracy) All hail to [Jeremy howard](https:\/\/en.wikipedia.org\/wiki\/Jeremy_Howard_(entrepreneur)[](http:\/\/))","94b07876":"## Steps for Image Classification Using FastAI :\n1. Import required libraries\n\n    * FastAI\n    * Numpy\n    * Pandas\n    * Matplotlib\n    * Os    \n\n\n2. Load and view your data\n\n    * Setting up path for training data\n    * Data Loading For training\n    * Data Explorations\n    * Print Classes present in the data\n    \n    \n3. Create and train a model\n\n     * Create Models\n     * Train Model\n \n \n4. Interpret the results\n5. Prediction Using Trained Model\n","b19cdc77":"## Sources\n* [Fastai MOOC](https:\/\/course.fast.ai\/)\n* [Fastai library](http:\/\/https:\/\/docs.fast.ai\/)\n","3bdce077":"## 2.  Load and view your data\n### 2.1  Setting up path for training data\n\n#### Fun Fact: Number of elements in a list of path is same as number of classes you have\n","745960d9":"## 3.   Create and train a model\n\n* We now use a pre-trained ResNet18 Convolutional Neural Net model, and use transfer learning to learn weights of only the last layer of the network.\n\n* Why Transfer learning? Because with transfer learning, you begin with an existing (trained) neural network used for image recognition \u2014 and then tweak it a bit (or more) here and there to train a model for your particular use case. And why do we do that? Training a reasonable neural network would mean needing approximately 300,000 image samples, and to achieve really good performance, we\u2019re going to need at least a million images.\n\n* In our case, we have approximately 2500 images in our training set \u2014 you have one guess to decide if that would have been enough if were to train a neural net from scratch.\n\n* We use the **create_cnn()** function for loading a pre-trained ResNet18 network, that was trained on around a million images from the ImageNet database.\n","c330eb1b":"## 1.  Importing Required Libraries","59b37a6f":"### 3.2  Training Neural Network\n\nTo find the perfect learning rates we can use the lr_find and recorder.plot methods which create a plot that relates the learning rate with the loss.","7ce2b201":"## 4.  Interpret the results","3c47ef6e":"### 2.2  Data Loading For training\n\nThings to be remember:\n\n* Decide validation percentage ( 0.2 => 20% )\n* Provide path for training data\n* Decide augmentations criteria (optional)\n* Decide image size (which is 224 in my case)\n* Test data can also be added but it's optional","29f36920":"### 3.1. Create Model","efc8a2ef":"### 2.3  Data Explorations\n**Our image dataset is stored as .jpg files in 2 different folders, with each folder bearing the name of model of the images contained in the folder. We use the ImageDataBunch.from_folder() function to load the images and assign labels the images based on the name of the folder they\u2019re read from.**"}}