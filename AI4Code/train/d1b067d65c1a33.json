{"cell_type":{"d29175dc":"code","bd80cb7a":"code","46bc019c":"code","7e6e6a4a":"code","e7244974":"code","238497c7":"code","e31ee8f4":"code","0b5cd25d":"code","ac035955":"code","6b5b7796":"code","97f5d87c":"code","9780f59a":"code","f8cf0544":"code","6f51695e":"code","400d784f":"code","63a2ba15":"code","d1c80621":"code","033a0549":"code","bcfa311e":"code","170942dc":"code","2a3f967c":"code","5491dea3":"code","c21e0833":"code","5ee1e5de":"code","089f53e8":"code","62def0a3":"code","4282ffa6":"code","e3c3c70b":"code","3d6707ed":"code","0b66cd9f":"code","1e4fb444":"code","de3b2edc":"code","83610870":"code","b3f0390e":"code","ec118b25":"code","0c23c2c6":"code","669f04f6":"code","ba7fb996":"code","a3bd3692":"code","8d4e444e":"code","8f3d1b96":"code","2820f6cb":"code","53fcf4ea":"code","045be02e":"markdown","9839c8e9":"markdown","4ad2aa08":"markdown","545927a9":"markdown"},"source":{"d29175dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bd80cb7a":"import matplotlib.pyplot as plt\nimport seaborn as sns","46bc019c":"train= pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest= pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","7e6e6a4a":"train.head()\n","e7244974":"test.head()","238497c7":"print('Dimensions of train data:', train.shape)\nprint('Dimensions of test data:', test.shape)","e31ee8f4":"#labels = train.pop('SalePrice') \n#train.shape\n","0b5cd25d":"null= np.array(train.isnull().sum())\nprint(null)","ac035955":"train.describe()","6b5b7796":"train.isnull().sum()\n","97f5d87c":"dataframe=[train,test]\ndata= pd.concat(dataframe)","9780f59a":"data.isnull().sum()","f8cf0544":"null= np.array(data.isnull().sum())\nplt.hist(null)","6f51695e":"corr= train.corr()\nf, ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(corr,linewidths=.5, vmin=0, vmax=1,)","400d784f":"data['WoodDeckSF'].value_counts()","63a2ba15":"data= data.drop([ 'MiscFeature', 'GarageArea'],axis=1)","d1c80621":"for i in data.columns:\n    print( data[i].isnull().sum())","033a0549":"data._get_numeric_data().columns","bcfa311e":"NaN_columns= data.columns[data.isnull().any()].values\nprint(NaN_columns)","170942dc":"listNumeric= ['BsmtFinSF1','BsmtFinSF2','BsmtFullBath','BsmtHalfBath','BsmtUnfSF','GarageCars','GarageYrBlt','LotFrontage'\n             ,'TotalBsmtSF','MasVnrArea']\n\nfor m in listNumeric:\n    data[m].fillna(data[m].mode()[0], inplace= True)","2a3f967c":"listNA= ['Alley', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'BsmtQual', 'Fence', 'FireplaceQu', 'GarageCond', 'GarageFinish'\n         , 'GarageQual', 'GarageType', 'PoolQC']\nfor j in listNA:\n    data[j].fillna('None', inplace= True)","5491dea3":"listMODE= ['Electrical','Exterior1st','Exterior2nd','Functional','KitchenQual','MSZoning','SaleType','Utilities']\n\nfor k in listMODE:\n    data[k].fillna(data[k].mode()[0], inplace= True)","c21e0833":"m=0\nfor i in data.columns:\n    print( data[i].isnull().sum())\n    if (data[i].isnull().sum()>0):\n        m=m+1\nprint(m)\n","5ee1e5de":"plt.hist(data['LotFrontage'])","089f53e8":"data.info()","62def0a3":"data['MasVnrType'].fillna('None', inplace=True)","4282ffa6":"data.isnull().sum()","e3c3c70b":"data.info()","3d6707ed":"s=np.array(data._get_numeric_data().columns)\nprint(s)\n","0b66cd9f":"df_merged_cat = data.select_dtypes(include = ['object']).astype('category')\n\n\ndf_merged_cat.LotShape.replace(to_replace = ['IR3', 'IR2', 'IR1', 'Reg'], value = [0, 1, 2, 3], inplace = True)\ndf_merged_cat.LandContour.replace(to_replace = ['Low', 'Bnk', 'HLS', 'Lvl'], value = [0, 1, 2, 3], inplace = True)\ndf_merged_cat.Utilities.replace(to_replace = ['NoSeWa', 'AllPub'], value = [0, 1], inplace = True)\ndf_merged_cat.LandSlope.replace(to_replace = ['Sev', 'Mod', 'Gtl'], value = [0, 1, 2], inplace = True)\ndf_merged_cat.ExterQual.replace(to_replace = ['Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3], inplace = True)\ndf_merged_cat.ExterCond.replace(to_replace = ['Po', 'Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3, 4], inplace = True)\ndf_merged_cat.BsmtQual.replace(to_replace = ['None', 'Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3, 4], inplace = True)\ndf_merged_cat.BsmtCond.replace(to_replace = ['None', 'Po', 'Fa', 'TA', 'Gd'], value = [0, 1, 2, 3, 4], inplace = True)\ndf_merged_cat.BsmtExposure.replace(to_replace = ['None', 'No', 'Mn', 'Av', 'Gd'], value = [0, 1, 2, 3, 4], inplace = True)\ndf_merged_cat.BsmtFinType1.replace(to_replace = ['None', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'], value = [0, 1, 2, 3, 4, 5, 6], inplace = True)\ndf_merged_cat.BsmtFinType2.replace(to_replace = ['None', 'Unf', 'LwQ', 'Rec', 'BLQ', 'ALQ', 'GLQ'], value = [0, 1, 2, 3, 4, 5, 6], inplace = True)\ndf_merged_cat.HeatingQC.replace(to_replace = ['Po', 'Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3, 4], inplace = True)\ndf_merged_cat.Electrical.replace(to_replace = ['Mix', 'FuseP', 'FuseF', 'FuseA', 'SBrkr'], value = [0, 1, 2, 3, 4], inplace = True)\ndf_merged_cat.KitchenQual.replace(to_replace = ['Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3], inplace = True)\ndf_merged_cat.Functional.replace(to_replace = ['Sev', 'Maj2', 'Maj1', 'Mod', 'Min2', 'Min1', 'Typ'], value = [0, 1, 2, 3, 4, 5, 6], inplace = True)\ndf_merged_cat.FireplaceQu.replace(to_replace =  ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3, 4, 5], inplace = True)\ndf_merged_cat.GarageFinish.replace(to_replace =  ['None', 'Unf', 'RFn', 'Fin'], value = [0, 1, 2, 3], inplace = True)\ndf_merged_cat.GarageQual.replace(to_replace =  ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3, 4, 5], inplace = True)\ndf_merged_cat.GarageCond.replace(to_replace =  ['None', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], value = [0, 1, 2, 3, 4, 5], inplace = True)\ndf_merged_cat.PavedDrive.replace(to_replace =  ['N', 'P', 'Y'], value = [0, 1, 2], inplace = True)\ndf_merged_cat.PoolQC.replace(to_replace =  ['None', 'Fa', 'Gd', 'Ex'], value = [0, 1, 2, 3], inplace = True)\ndf_merged_cat.Fence.replace(to_replace =  ['None', 'MnWw', 'GdWo', 'MnPrv', 'GdPrv'], value = [0, 1, 2, 3, 4], inplace = True)","1e4fb444":"data=pd.get_dummies(data)\ndata.shape","de3b2edc":"train= data[:1460]\ntest= data[1460:]","83610870":"SPtrain= train.pop('SalePrice')\nSPtest= test.pop('SalePrice')","b3f0390e":"print(train.shape)\nprint(train.shape)","ec118b25":"from sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor as GBR","0c23c2c6":"\"\"\"gsc= GridSearchCV(estimator= GBR(), \n                  param_grid= {'max_depth': range(8,11), \n                              'n_estimators': (150,100),\n                               'subsample': (0.6,0.9)\n                              }, cv=7, scoring= 'neg_mean_squared_error'\n                 , verbose=0, n_jobs= -1)\ngrid_result= gsc.fit(train, SPtrain)\nbest_params= grid_result.best_params_\"\"\"","669f04f6":"gbr= GBR(max_depth=10, n_estimators= 100, random_state=1, subsample= 0.6)","ba7fb996":"gbr.fit(train, SPtrain)","a3bd3692":"predictions= gbr.predict(test)\nSubmission= pd.DataFrame()\nSubmission['SalePrice']= predictions\nSubmission['Id']= test['Id']\nSubmission.head()\n","8d4e444e":"Output2 = Submission.to_csv('Output2.csv', index= False)\n","8f3d1b96":"Submission.to_csv('Output2.csv', index=False)","2820f6cb":"from IPython.display import HTML\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n# create a random sample dataframe\n#df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n\n# create a link to download the dataframe\ncreate_download_link(Submission)\n\n# \u2193 \u2193 \u2193  Yay, download link!","53fcf4ea":"sns.distplot(SPtrain, kde= True, bins= 35)","045be02e":"gsc= GridSearchCV(estimator= RandomForestRegressor(), \n                  param_grid= {'max_depth': range(3,11), \n                              'n_estimators': (10,50,100)\n                              }, cv=5, scoring= 'neg_mean_squared_error'\n                 , verbose=0, n_jobs= -1)\ngrid_result= gsc.fit(train, SPtrain)\nbest_params= grid_result.best_params_","9839c8e9":"rfr= RandomForestRegressor(max_depth= 10, n_estimators= 100, random_state=False, verbose=False)\nscores = -cross_val_score(rfr, train, SPtrain, cv=10, scoring='neg_mean_absolute_error')\nprint(scores.mean())","4ad2aa08":"from IPython.display import HTML\nimport base64\n\n# function that takes in a dataframe and creates a text link to  \n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\n# create a random sample dataframe\n#df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n\n# create a link to download the dataframe\ncreate_download_link(Submission)\n\n# \u2193 \u2193 \u2193  Yay, download link!","545927a9":"The GridSearchCV code is being marked down to prevent the large CPU usage at every iteration."}}