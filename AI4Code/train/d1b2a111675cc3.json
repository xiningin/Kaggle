{"cell_type":{"c388a8b1":"code","a75b0505":"code","ff56573f":"code","b373eda4":"code","1edf2ef4":"code","5e82b314":"code","41245a55":"code","80c0db14":"code","6e8eda22":"code","4925e0e8":"code","2f3ed418":"code","510ba545":"code","b5c92fb3":"code","185aa367":"code","0b493b97":"code","3d22c30c":"code","7031c62c":"code","2fcc3c72":"code","ace0501e":"code","d48b3c5d":"code","0f39efa9":"code","62f6bf21":"code","42cd266c":"code","3452d40e":"code","a965dac3":"code","0a1e36e2":"code","96c91894":"code","1760e442":"markdown","a2b464ca":"markdown","706e2f06":"markdown","2567f850":"markdown","bee6729c":"markdown","891a2ef7":"markdown","8d4077f9":"markdown","b8f5fa64":"markdown","93b431c8":"markdown","f10637a7":"markdown","e82f71fc":"markdown","5f0f8cc4":"markdown","a153ddaf":"markdown","b904af23":"markdown","9548eac3":"markdown","10f1c5c0":"markdown","395ba5d3":"markdown","b337a418":"markdown","73139594":"markdown","7e4c048e":"markdown","1200bb8d":"markdown","67f616fc":"markdown","d45f247b":"markdown"},"source":{"c388a8b1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))","a75b0505":"whr = pd.read_csv(\"..\/input\/2017.csv\")\nwhr2015 = pd.read_csv(\"..\/input\/2015.csv\")\nwhr2016 = pd.read_csv(\"..\/input\/2016.csv\")\nwhr2017 = pd.read_csv(\"..\/input\/2017.csv\")","ff56573f":"whr.head()","b373eda4":"whr.info()","1edf2ef4":"country = list(whr['Country'].unique())\nwhr.drop([\"Freedom\",\"Generosity\",\"Trust..Government.Corruption.\"],axis=1)\nfamily_ratio = []\nfor i in country:\n    x = whr[whr['Country']==i]\n    Family = sum(x.Family)\/len(x)\n    family_ratio.append(Family)\ndata = pd.DataFrame({'country': country,'family_report':family_ratio})\nnew_index = (data['family_report'].sort_values(ascending=False)).index.values\nsorted_data = data.reindex(new_index)\n    \nplt.figure(figsize=(15,10))\nsns.barplot(x=sorted_data[\"country\"][0:10],y=sorted_data[\"family_report\"][0:10])\nplt.xlabel(\"Countries\")\nplt.ylabel(\"Family Report\")\nplt.title(\"Sorting countris depend on family ratio\")\nplt.show()","5e82b314":"country = list(whr['Country'].unique())\nfamily = []\nfreedom = []\ngenerosity = []\nfor i in country:\n    x = whr[whr['Country']==i]\n    family.append(sum(x.Family)\/len(x))\n    freedom.append(sum(x.Freedom) \/ len(x))\n    generosity.append(sum(x.Generosity) \/ len(x))\n    \nf,ax = plt.subplots(figsize = (9,7))\nsns.barplot(x=family[0:15],y=country[0:15],color='green',alpha = 0.5,label='Family' )\nsns.barplot(x=freedom[0:15],y=country[0:15],color='blue',alpha = 0.7,label='Freedom')\nsns.barplot(x=generosity[0:15],y=country[0:15],color='cyan',alpha = 0.6,label='Generosity')\n\nax.legend(loc='lower right',frameon = True)     # legendlarin gorunurlugu\nax.set(xlabel=\"Ratios\", ylabel='Countries',title = \"Family,Freedom and Generosity Ratios for each country\")\nplt.show()","41245a55":"whsker = whr[\"Whisker.low\"]\/max(whr[\"Whisker.low\"])\nfmly = whr[\"Family\"]\/max(whr[\"Family\"])\ng = sns.jointplot(fmly,whsker,kind=\"kde\",height=7)\nplt.savefig(\"graph.png\")\nplt.show()","80c0db14":"whsker = whr[\"Whisker.low\"]\/max(whr[\"Whisker.low\"])\nfmly = whr[\"Family\"]\/max(whr[\"Family\"])\ng = sns.jointplot(fmly,whsker,kind=\"hex\",height=7)\nplt.savefig(\"graph.png\")\nplt.show()","6e8eda22":"sns.lmplot(x=\"Economy..GDP.per.Capita.\",y=\"Happiness.Score\",data=whr)\nplt.xlabel(\"Economy Ratio\")\nplt.ylabel(\"Happiness Score\")\nplt.show()","4925e0e8":"sns.kdeplot(whr[\"Economy..GDP.per.Capita.\"],whr[\"Happiness.Score\"],shade= True,cut=3)\nplt.xlabel(\"Economy Ratio\")\nplt.ylabel(\"Happiness Score\")\nplt.show()","2f3ed418":"family = whr.Family\nfreedom = whr.Freedom\nnew_data = pd.DataFrame({'family': family,'freedom':freedom})\nnew_data.head()","510ba545":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=new_data, palette=pal, inner=\"points\")\nplt.title(\"VIOLIN PLOT\")\nplt.show()","b5c92fb3":"whr.corr()","185aa367":"f,ax = plt.subplots(figsize=(6, 6))\nsns.heatmap(whr.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title(\"HEATMAP\")\nplt.show()","0b493b97":"sns.pairplot(new_data)\nplt.show()","3d22c30c":"dictionary = {\"List1\":[1,np.nan,3,np.nan,5],\n             \"List2\":[1,np.nan,np.nan,3,np.nan],\n             \"List3\":[1,np.nan,3,4,5]}\ndata_msno = pd.DataFrame(dictionary)\n\nimport missingno as msno\nmsno.matrix(data_msno)\nplt.show()","7031c62c":"from pandas.tools.plotting import parallel_coordinates\n\ndropped_whr = whr.drop([\"Generosity\",\"Family\",\"Freedom\",\"Happiness.Rank\",\"Whisker.high\",\"Whisker.low\",\"Trust..Government.Corruption.\"],axis=1)\nplt.figure(figsize=(15,10))\nparallel_coordinates(dropped_whr[0:3], 'Country', colormap=plt.get_cmap(\"Set1\"))\nplt.savefig('graph.png')\nplt.show()","2fcc3c72":"family = whr.Family\nfreedom = whr.Freedom\ngenerosity = whr.Generosity\n\nfrom matplotlib_venn import venn2\nfamily = data.iloc[:,0]\nfreedom = data.iloc[:,1]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(family)-15, len(freedom)-15, 15), set_labels = ('family', 'freedom'))\nplt.show()","ace0501e":"family = whr.Family\nfreedom = whr.Freedom\ngenerosity = whr.Generosity\n#\nfeature_names = \"family\",\"freedom\",\"generosity\"\nfeature_size = [len(family),len(freedom),len(generosity)]\n#\ncircle = plt.Circle((0,0),0.2,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Features\")\nplt.show()","d48b3c5d":"df = whr.loc[:,[\"Happiness.Score\",\"Generosity\",\"Family\",\"Freedom\"]]\ndf1 = whr.Generosity\nx = dict(zip(df1.unique(),\"rgb\"))\nrow_colors = df1.map(x)\ncg = sns.clustermap(df,row_colors=row_colors,figsize=(12, 12),metric=\"correlation\")\nplt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(),rotation = 0,size =8)\nplt.show()","0f39efa9":"data = pd.read_csv('..\/input\/2017.csv')\n\nNorway = data[data.Country == \"Norway\"]\n\nIceland = data[data.Country == \"Iceland\"]\n\ntrace1 = go.Scatter3d(\n    x=Norway.Family,\n    y=Norway.Freedom,\n    z=Norway.Generosity,\n    mode='markers',\n    name = \"Norway\",\n    marker=dict(\n        color='rgb(217, 100, 100)',\n        size=12,\n        line=dict(\n            color='rgb(255, 255, 255)',\n            width=0.1\n        )\n    )\n)\ntrace2 = go.Scatter3d(\n    x=Iceland.Family,\n    y=Iceland.Freedom,\n    z=Iceland.Generosity,\n    mode='markers',\n    name = \"Iceland\",\n    marker=dict(\n        color='rgb(54, 170, 127)',\n        size=12,\n        line=dict(\n            color='rgb(204, 204, 204)',\n            width=0.1\n        )\n    )\n    \n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    title = ' 3D iris_setosa and iris_virginica',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0\n    )\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","62f6bf21":"df = whr.iloc[:100,:]\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(\n                    x = df[\"Happiness.Rank\"],\n                    y = df[\"Happiness.Score\"],\n                    mode = \"lines\",\n                    name = \"Happiness Score\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.Country)\ntrace2 = go.Scatter(\n                    x = df[\"Happiness.Rank\"],\n                    y = df[\"Economy..GDP.per.Capita.\"],\n                    mode = \"lines+markers\",\n                    name = \"Economy\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.Country)\ndata = [trace1, trace2]\nlayout = dict(title = \"Top 100 Happiest Country's Happiness and Economy Scores\",\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","42cd266c":"whr2015 = whr2015[:20]\nwhr2016 = whr2016[:20]\nwhr2017 = whr2017[:20]\n\nimport plotly.graph_objs as go\ntrace1 =go.Scatter(\n                    x = whr2015[\"Happiness Rank\"],\n                    y = whr2015[\"Happiness Score\"],\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 255, 1)'),\n                    text= whr2015.Country)\ntrace2 =go.Scatter(\n                    x = whr2016[\"Happiness Rank\"],\n                    y = whr2016[\"Happiness Score\"],\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(255, 128, 2, 1)'),\n                    text= whr2016.Country)\ntrace3 =go.Scatter(\n                    x = whr2017[\"Happiness.Rank\"],\n                    y = whr2017[\"Happiness.Score\"],\n                    mode = \"markers\",\n                    name = \"2017\",\n                    marker = dict(color = 'rgba(0, 255, 200, 1)'),\n                    text= whr2017.Country)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Happiness Score vs Happiness Rank of top 100 Countries with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'Happiness Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Happiness Score',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","3452d40e":"import plotly.graph_objs as go\n\ntrace1 = go.Bar(\n                x = whr2015[:3].Country,\n                y = whr2015[:3][\"Happiness Score\"],\n                name = \"Happiness Score\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = whr2015[:3].Country)\ntrace2 = go.Bar(\n                x = whr2015[:3].Country,\n                y = whr2015[:3][\"Family\"],\n                name = \"Family\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = whr2015[:3].Country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a965dac3":"import plotly.graph_objs as go\n\nx = whr2015[:3].Country\n\ntrace1 = {\n  'x': x,\n  'y': whr2015[:3][\"Happiness Score\"],\n  'name': 'Happiness Score',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': whr2015[:3][\"Family\"],\n  'name': 'Family',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 Countries'},\n  'barmode': 'relative',\n  'title': 'Happiness and Family of top 3 countries in 2015'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","0a1e36e2":"import plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n\ny_saving = [each for each in whr2017[\"Generosity\"][:5]]\ny_net_worth  = [float(each) for each in whr2017[\"Happiness.Score\"][:5]]\nx_saving = [each for each in whr2017.Country[:5]]\nx_net_worth  = [each for each in whr2017.Country[:5]]\ntrace0 = go.Bar(\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='Generosity',\n                orientation='h',\n)\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='Happiness',\n)\nlayout = dict(\n                title='Generosity and Happiness',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\nannotations = []\ny_s = np.round(y_saving, decimals=2)\ny_nw = np.rint(y_net_worth)\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","96c91894":"data = [\n    {\n        'y': whr2017[\"Generosity\"][:10],\n        'x': whr2017[\"Happiness.Rank\"][:10],\n        'mode': 'markers',\n        'marker': {\n            'color': whr2017[\"Happiness.Score\"],\n            'size': whr2017[\"Happiness.Score\"],\n            'showscale': True\n        },\n        \"text\" :  whr2017[\"Country\"][:10]    \n    }\n]\n\niplot(data)","1760e442":"<p id='3'><h3><b>Bar Plot<\/b><\/h3><\/p>","a2b464ca":"<p id='7'><h3><b>Violin Plot<\/b><\/h3><\/p>","706e2f06":"<p id='10'><h3><b>Missing No<\/b><\/h3><\/p>","2567f850":"<p id='5'><h3><b>Lm Plot<\/b><\/h3><\/p>","bee6729c":"<p id='19'><h3><b>Bubble Charts<\/b><\/h3><\/p>","891a2ef7":"<p id='4'><h3><b>Joint Plot<\/b><\/h3><\/p>","8d4077f9":"<p id='17'><h3><b>Scatter Plot<\/b><\/h3><\/p>","b8f5fa64":"<p id='16'><h3><b>Line Charts<\/b><\/h3><\/p>","93b431c8":"<p id='14'><h3><b>Cluster Map<\/b><\/h3><\/p>","f10637a7":"Correlation.","e82f71fc":"<p id='18'><h3><b>Bar Charts<\/b><\/h3><\/p>","5f0f8cc4":"<p id='12'><h3><b>Venn Plot<\/b><\/h3><\/p>","a153ddaf":"<p id='11'><h3><b>Parallel Plots<\/b><\/h3><\/p>","b904af23":"<p id='2'><h2><b>Visualization<\/b><\/h2><\/p>","9548eac3":"<p id='8'><h3><b>Heatmap<\/b><\/h3><\/p>","10f1c5c0":"> <h1><b>TABLE OF CONTENTS<\/b><\/h1>\n<ul>\n    <a href='#1'><li>Data Overview<\/li><\/a>\n<\/ul>\n<ul>\n    <a href='#2'><li>Visualization<\/li><\/a>\n        <ul>\n             <a href='#3'><li>Bar Plot<\/li><\/a>\n             <a href='#4'><li>Joint Plot<\/li><\/a>\n             <a href='#5'><li>Lm Plot<\/li><\/a>\n             <a href='#6'><li>KDE Plot<\/li><\/a>\n             <a href='#7'><li>Violin Plot<\/li><\/a>\n             <a href='#8'><li>Heatmap<\/li><\/a>\n             <a href='#9'><li>Pair Plot<\/li><\/a>\n             <a href='#10'><li>Missing No<\/li><\/a>\n             <a href='#11'><li>Parallel Plots<\/li><\/a>\n             <a href='#12'><li>Venn Plot<\/li><\/a>\n             <a href='#13'><li>Donut<\/li><\/a>\n             <a href='#14'><li>Cluster Map<\/li><\/a>\n             <a href='#15'><li>Basic 3D Scatter Plot<\/li><\/a>\n             <a href='#16'><li>Line Charts<\/li><\/a>\n             <a href='#17'><li>Scatter Plot<\/li><\/a>\n             <a href='#18'><li>Bar Charts<\/li><\/a>\n             <a href='#19'><li>Bubble Charts<\/li><\/a>\n        <\/ul>\n<\/ul>\n<ul>\n    <a href='#20'><li>Conclusion<\/li><\/a>\n    <a href='#21'><li>References<\/li><\/a>\n<\/ul>","395ba5d3":"<p id='21'><h2><b>Reference<\/b><\/h2><\/p>\n\nhttps:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners","b337a418":"<p id='6'><h3><b>KDE Plot<\/b><\/h3><\/p>","73139594":"<p id='13'><h3><b>Donut<\/b><\/h3><\/p>","7e4c048e":"<p id='20'><h2><b>Conclusion<\/b><\/h2><\/p>\n* In this kernel we used lots of visualization tools.\n* We have learned how to use them.\n* If you like, please upvote!","1200bb8d":"<p id='9'><h3><b>Pair Plot<\/b><\/h3><\/p>","67f616fc":"<p id='1'><h2><b>Data Overview<\/b><\/h2><\/p>\nHappiness rank and scores by country.\n\n* Columns that the dataset contains : \n\n    <b>Country<\/b>: Name of the country.  \n    <b>Region<\/b>: Region the country belongs to.  \n    <b>Happiness Rank<\/b>: Rank of the country based on the Happiness Score.  \n<b>Happiness Score<\/b>: A metric measured in 2015 by asking the sampled people the question: \"How would you rate your happiness on a scale of 0 to 10 where 10 is the happiest.\"  \n<b>Standard Error<\/b>: The standard error of the happiness score.  \n<b>Economy (GDP per Capita)<\/b>: The extent to which GDP contributes to the calculation of the Happiness Score.  \n<b>Family<\/b>: The extent to which Family contributes to the calculation of the Happiness Score  \n<b>Health (Life Expectancy)<\/b>: The extent to which Life expectancy contributed to the calculation of the Happiness Score  \n<b>Freedom<\/b>: The extent to which Freedom contributed to the calculation of the Happiness Score.  \n<b>Trust (Government Corruption)<\/b>: The extent to which Perception of Corruption contributes to Happiness Score.  \n<b>Generosity<\/b>: The extent to which Generosity contributed to the calculation of the Happiness Score.  \n<b>Dystopia Residual<\/b>: The extent to which Dystopia Residual contributed to the calculation of the Happiness Score.","d45f247b":"<p id='15'><h3><b>Basic 3D Scatter Plot<\/b><\/h3><\/p>"}}