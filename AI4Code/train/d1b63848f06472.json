{"cell_type":{"831b52b1":"code","9aab6f70":"code","6ad9087d":"code","2193755f":"code","984a0b2c":"code","5202f886":"code","4696fe27":"code","b63a864c":"code","56dac581":"code","fa0aca50":"code","923118f7":"code","55a6a534":"code","0c49985c":"code","8d942ca0":"code","c44cf9fe":"code","a0239f4e":"code","93c0bf8b":"code","673cda55":"code","f67028e8":"code","da4a97c4":"code","521ccce7":"code","6b0bc6c9":"code","83483059":"code","b1bbdec2":"code","a4bea0e6":"code","e97b91eb":"code","f4f67d72":"code","3d4ad286":"code","71a591ed":"code","30c8176f":"code","fefd917c":"code","f14b552a":"code","d90f27eb":"code","fd06c09e":"code","6a2a5228":"markdown","c4eff099":"markdown","5689c087":"markdown","d97be83d":"markdown","05001d18":"markdown","60174a0d":"markdown","d9392067":"markdown","a71997a0":"markdown","a49184f2":"markdown","253df463":"markdown"},"source":{"831b52b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","9aab6f70":"import numpy as np","6ad9087d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")","2193755f":"%matplotlib inline","984a0b2c":"df = pd.read_csv(\"..\/input\/911.csv\")","5202f886":"df.info()","4696fe27":"df.head(3)","b63a864c":"df['zip'].value_counts().head(5)","56dac581":"df['twp'].value_counts().head(5)","fa0aca50":"df['title'].nunique()","923118f7":"df['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","55a6a534":"df['Reason'].value_counts()","0c49985c":"sns.countplot(x='Reason',data=df,palette='viridis')","8d942ca0":"type(df['timeStamp'].iloc[0])","c44cf9fe":"df['timeStamp'] = pd.to_datetime(df['timeStamp'])","a0239f4e":"df['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)","93c0bf8b":"dmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","673cda55":"df['Day of Week'] = df['Day of Week'].map(dmap)","f67028e8":"sns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","da4a97c4":"sns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","521ccce7":"byMonth = df.groupby('Month').count()\nbyMonth.head()","6b0bc6c9":"# Could be any column\nbyMonth['twp'].plot()","83483059":"sns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","b1bbdec2":"df['Date']=df['timeStamp'].apply(lambda t: t.date())","a4bea0e6":"df.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","e97b91eb":"df[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","f4f67d72":"df[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","3d4ad286":"df[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()","71a591ed":"dayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.head()","30c8176f":"plt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')","fefd917c":"sns.clustermap(dayHour,cmap='viridis')","f14b552a":"dayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.head()","d90f27eb":"plt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')","fd06c09e":"sns.clustermap(dayMonth,cmap='viridis')","6a2a5228":"** Notice how the Day of Week is an integer 0-6. Use the .map() with this dictionary to map the actual string names to the day of the week: **\n\ndmap = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}","c4eff099":"** What is the most common Reason for a 911 call based off of this new column? **","5689c087":"* You can now grab specific attributes from a Datetime object by calling them. For example:**\n\ntime = df['timeStamp'].iloc[0]\ntime.hour\nYou can use Jupyter's tab method to explore the various attributes you can call. Now that the timestamp column are actually DateTime objects, use .apply() to create 3 new columns called Hour, Month, and Day of Week. You will create these columns based off of the timeStamp column, reference the solutions if you get stuck on this step.","d97be83d":"You can continue exploring data, as you see and undertstand it and get meaningful insights...","05001d18":"Looking at the title column, there are about 110 title code","60174a0d":"Below is the code for top 5 township for 911 calls","d9392067":"** In the titles column there are \"Reasons\/Departments\" specified before the title code. These are EMS, Fire, and Traffic. Use .apply() with a custom lambda expression to create a new column called \"Reason\" that contains this string value.**","a71997a0":"** Now let us begin to focus on time information. What is the data type of the objects in the timeStamp column? **","a49184f2":"** You should have seen that these timestamps are still strings. Use [pd.to_datetime](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.to_datetime.html) to convert the column from strings to DateTime objects. **","253df463":"Below are the top 5 zipcodes for 911"}}