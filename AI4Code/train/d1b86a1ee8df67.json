{"cell_type":{"ada36f56":"code","18ccc54c":"code","c59fc904":"code","753d1e86":"code","f9665dc0":"code","8876c2eb":"code","1138d635":"code","4e943eab":"code","46326f98":"code","c64457fe":"code","59f3cb12":"code","d1737349":"code","ba7079a3":"code","f4ab6dbf":"code","6ebf2ffe":"code","86e9fc66":"code","6c25d7b7":"code","4b4583da":"code","5902bed8":"code","7bc4d9b2":"code","9f92393d":"code","23c0f71f":"code","a4e032f2":"code","b281870e":"code","909c00a0":"markdown","4d4b74b5":"markdown","57848b30":"markdown","3b322f36":"markdown"},"source":{"ada36f56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport seaborn as sns\nimport os\nimport matplotlib.pyplot as plt\n\n# Any results you write to the current directory are saved as output.","18ccc54c":"train_data=pd.read_csv('..\/input\/train.csv')\ntest_data=pd.read_csv('..\/input\/test.csv')","c59fc904":"train_data.head()\n","753d1e86":"train_data.describe()\n","f9665dc0":"train_data.info()","8876c2eb":"null_columns=train_data.columns[train_data.isnull().any()]\nnull_columns_sum=train_data[null_columns].isnull().sum()\nprint(null_columns)\n\nprint(null_columns_sum)","1138d635":"percentage_Null=null_columns_sum\/train_data.shape[0]\nprint(percentage_Null)","4e943eab":"train_data.drop(columns=['Alley','PoolQC','Fence','MiscFeature'],axis=1, inplace=True )\ntrain_data.drop(columns=['Id','GarageYrBlt'],axis =1 ,inplace=True)\ntrain_data.dropna(axis=0,inplace=True)","46326f98":"train_data.head()","c64457fe":"corrmat=train_data.corr()\nplt.subplots(figsize=(15,12))\nsns.heatmap(corrmat,vmax=.8)\n","59f3cb12":"train_data['LotFrontage']=train_data['LotFrontage'].fillna(value=train_data['LotFrontage'].mean())\ntrain_data['FireplaceQu'] = train_data['FireplaceQu'].fillna(value='No_FP')\ntrain_data['BsmtCond'] =  train_data['BsmtCond'].fillna(value='No_BS')\ntrain_data['BsmtQual'] =  train_data['BsmtQual'].fillna(value='No_BS')\nfor col in ('BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    train_data[col] = train_data[col].fillna('No_BS')\nfor col in ('GarageQual', 'GarageCond', 'GarageFinish','GarageType'):\n    train_data[col] = train_data[col].fillna('No_Garage')\n    ","d1737349":"train_data = train_data[['MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope',\n       'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle',\n       'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF',\n       'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath',\n       'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageFinish',\n       'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition','SalePrice']]","ba7079a3":"from sklearn.preprocessing import LabelEncoder\nlabelencoder= LabelEncoder()\nfor col in train_data.columns.values:\n    if train_data[col].dtype=='object':\n        labelencoder.fit(train_data[col].values)\n        train_data[col]= labelencoder.transform(train_data[col])","f4ab6dbf":"'''\npd.get_dummies(train_data,columns=['MSZoning', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope','Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1','BsmtFinType2','Heating', 'HeatingQC',\n       'CentralAir', 'Electrical','KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageFinish','GarageQual', 'GarageCond', 'PavedDrive','SaleType',\n       'SaleCondition'],drop_first=True)\n'''","6ebf2ffe":"sns.distplot(train_data['SalePrice'])","86e9fc66":"X = train_data.iloc[:,0:74]\nY = train_data.iloc[:,-1]","6c25d7b7":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=500, random_state=2, oob_score=True)\nregressor.fit(X,Y)\nprint('Out-of-bag score estimate:', (regressor.oob_score_))","4b4583da":"test_data.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)\ntest_data.drop(['Id', 'GarageYrBlt'], axis=1,inplace=True)","5902bed8":"test_data['LotFrontage']=test_data['LotFrontage'].fillna(value=train_data['LotFrontage'].mean())\ntest_data['FireplaceQu'] = test_data['FireplaceQu'].fillna(value='No_FP')\ntest_data['BsmtCond'] =  test_data['BsmtCond'].fillna(value='No_BS')\ntest_data['BsmtQual'] =  test_data['BsmtQual'].fillna(value='No_BS')\nfor col in ('BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    test_data[col] = test_data[col].fillna('No_BS')\nfor col in ('GarageQual', 'GarageCond', 'GarageFinish','GarageType'):\n    test_data[col] = test_data[col].fillna('No_Garage')\n    ","7bc4d9b2":"test_data.dropna(axis=0, inplace=True)\nfor col in test_data.columns.values:\n       # Encoding only categorical variables\n        if test_data[col].dtypes=='object':\n            labelencoder.fit(test_data[col].values)\n            test_data[col]=labelencoder.transform(test_data[col])","9f92393d":"'''\npd.get_dummies(test_data,columns=['MSZoning', 'Street','LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope','Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle',\n       'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType','ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1','BsmtFinType2','Heating', 'HeatingQC',\n       'CentralAir', 'Electrical','KitchenQual', 'TotRmsAbvGrd',\n       'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType', 'GarageFinish','GarageQual', 'GarageCond', 'PavedDrive','SaleType',\n       'SaleCondition'],drop_first=True)\n'''","23c0f71f":"X_test = test_data.iloc[:,0:74]\nY_test = test_data.iloc[:,-1]","a4e032f2":"y_pred = regressor.predict(X_test)\nprint(y_pred)","b281870e":"my_submission = pd.DataFrame({'Id': Y_test, 'SalePrice': y_pred})\nmy_submission.to_csv('submission.csv', index=False)\n''''\nss = pd.read_csv('submission.csv')\nss.loc[:, 'SalePrice'] = y_pred\nss.to_csv('sub.csv',\n          index=False)\n          '''\n","909c00a0":"# Making Submission","4d4b74b5":"# Taking Care of Missing Values","57848b30":"# Prediction","3b322f36":"# Label encoding"}}