{"cell_type":{"3deab126":"code","203e969f":"code","68081cdd":"code","29dfd06d":"code","76f1191c":"code","86c06fdb":"code","7f4bef8b":"code","d7a2654d":"code","95513c73":"code","a63a7291":"code","dec134c4":"code","65ac7839":"code","3b720584":"code","93fcc3ea":"code","96b42c40":"code","ab8fefa5":"code","ef2c3b59":"code","4ad82f63":"code","440133a9":"code","fa56f997":"code","b44e2522":"code","81f6278f":"code","5ed938d2":"code","b97597ee":"code","e40a32f7":"code","56c09895":"code","58aa4aa3":"code","f88a3d6e":"code","139b07b1":"code","6177e6a9":"code","870e61f0":"code","79d0ed42":"code","fbe44719":"code","c3d0a948":"code","773ef9ff":"code","f884243c":"code","0cdd36f1":"code","1fa302fe":"code","ab7d409e":"code","0b501029":"code","63165024":"code","0fa77fea":"code","eb572689":"code","5cd27dba":"code","1b612906":"code","db436cf6":"markdown","9ad9c7c0":"markdown","910dca7e":"markdown","664139a5":"markdown","47600408":"markdown","2357ca31":"markdown","ea7f2cbc":"markdown","10ad0de6":"markdown","40b0ed2d":"markdown","f8f1dfcd":"markdown","5fcb39ac":"markdown","d7f5af6b":"markdown","6bc1ec07":"markdown","aab8f1ca":"markdown","5b958c5a":"markdown","43f344cc":"markdown","73646832":"markdown","94e25d03":"markdown","866e0216":"markdown","1a533c02":"markdown","71b05052":"markdown","35a35364":"markdown","356c8c8f":"markdown","d7460190":"markdown","618bfa2c":"markdown","de9a22df":"markdown","6ded0076":"markdown","c054fee8":"markdown","ff37c06f":"markdown"},"source":{"3deab126":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","203e969f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns","68081cdd":"# Not limiting the column number when displaying dataframe\npd.set_option(\"display.max_columns\", None)","29dfd06d":"df = pd.read_csv(\"..\/input\/bank-marketing-data-set\/bank-direct-marketing-campaigns.csv\", sep = \",\", skipinitialspace = True)\ndf.head()","76f1191c":"df.tail()","86c06fdb":"df.info()","7f4bef8b":"print(df.columns)","d7a2654d":"rows = df.shape[0]\ncols = df.shape[1]\n\nprint(\"Before cleaning, there are \" + str(rows) + \" rows and \" + str(cols) + \" columns in this dataframe.\")","95513c73":"dupRows = df.duplicated().sum()\nprint(\"There are \" + str(dupRows) + \" duplicated rows in the dataframe.\")","a63a7291":"df = df.drop_duplicates()","dec134c4":"dupRows = df.duplicated().sum()\nprint(\"After pre-cleaning, there are \" + str(dupRows) + \" duplicated rows in the dataframe.\")","65ac7839":"df.isnull().sum()","3b720584":"df.nunique()","93fcc3ea":"df.memory_usage()","96b42c40":"df.describe()","ab8fefa5":"plt.figure(figsize = (16, 16))\nplt.title(\"Age Distribution\", fontsize = 20)\nplt.xlabel(\"Age\", fontsize = 16)\nplt.ylabel(\"Number of occurences\", fontsize = 16)\nsns.histplot(df[\"age\"], color = \"gold\")\nplt.show()","ef2c3b59":"plt.figure(figsize = (16, 16))\nplt.title(\"Boxplot Age\", fontsize = 20)\nsns.boxplot(data = df[\"age\"], color = \"gold\")\nplt.show()","4ad82f63":"df.corr()","440133a9":"#cmap = sns.diverging_palette(100, 200, s = 40, l = 65, n = 9)\ncorrmat = df.corr()\nplt.subplots(figsize = (22, 22))\nsns.heatmap(corrmat,cmap = \"cividis\",annot = True, square = True, cbar_kws = {'label': 'Correlation Value', 'orientation': 'horizontal'});","fa56f997":"df = df.replace(\"no\", 0)\ndf = df.replace(\"yes\", 1)","b44e2522":"ycorr = df.corr()[\"y\"]\nycorr = pd.DataFrame(ycorr)\nycorr","81f6278f":"%matplotlib inline\n\nplt.figure(figsize = (16, 12))\nplt.title(\"Correlations between input columns and target column 'y'\", fontsize = 20)\nplt.xlabel(\"Columns\", fontsize = 16)\nplt.ylabel(\"Correlation factor\", fontsize = 16)\nplt.plot(ycorr, color = \"gold\", linestyle = \"\", marker = \"o\")\nplt.show()","5ed938d2":"plt.figure(figsize = (26, 18))\nplt.xlabel(\"Age\", fontsize = 16)\nplt.ylabel(\"Count\", fontsize = 16)\nage = sns.countplot(x = df[\"age\"], hue = df[\"y\"], palette = \"YlOrBr\")\nage.set_title(\"Distribution Of Age regarding the campaign success\", color = \"black\", fontsize = 20)","b97597ee":"plt.figure(figsize = (18, 12))\nsns.kdeplot(x = df[\"age\"], y = df[\"pdays\"], hue = df[\"y\"], palette = \"YlOrBr\")","e40a32f7":"sns.pairplot(df, palette = \"flag\")","56c09895":"df.head()","58aa4aa3":"pd.crosstab(df[\"age\"], df[\"y\"])","f88a3d6e":"ct = pd.crosstab(df[\"age\"], df[\"y\"]) \n\nplt.figure(figsize = (18, 18))\nplt.title(\"Crosstab showing how many successful campaigns were managed at what age levels\", fontsize = 20)\nsns.heatmap(ct, cmap = \"YlOrBr\", annot = True, cbar = True, fmt = \"g\")","139b07b1":"pd.crosstab(df[\"marital\"], df[\"y\"])","6177e6a9":"ct = pd.crosstab(df[\"age\"], df[\"y\"]) \n\nplt.figure(figsize = (18, 18))\nplt.title(\"Crosstab showing how many successful campaigns were managed at what marital states\", fontsize = 20)\nsns.heatmap(ct, cmap = \"cool\", annot = True, cbar = True, fmt = \"g\")","870e61f0":"pd.crosstab(df[\"education\"], df[\"y\"])","79d0ed42":"ct = pd.crosstab(df[\"education\"], df[\"y\"]) \n\nplt.figure(figsize = (18, 18))\nplt.title(\"Crosstab showing how many successful campaigns were managed at what education levels\", fontsize = 20)\nsns.heatmap(ct, cmap = \"cubehelix\", annot = True, cbar = True, fmt = \"g\")","fbe44719":"pip install pandas-profiling[notebook]","c3d0a948":"import pandas_profiling\nfrom pandas_profiling import ProfileReport\n\nprofile = ProfileReport(df, title = \"Pandas Profiling Report\", explorative = True)\n\nprofile.to_widgets()","773ef9ff":"df.head()","f884243c":"df[\"job\"] = df[\"job\"].astype(str)\ndf[\"marital\"] = df[\"marital\"].astype(str)\ndf[\"education\"] = df[\"education\"].astype(str)\ndf[\"default\"] = df[\"default\"].astype(str)\ndf[\"contact\"] = df[\"contact\"].astype(str)\ndf[\"month\"] = df[\"month\"].astype(str)\ndf[\"day_of_week\"] = df[\"day_of_week\"].astype(str)\ndf[\"poutcome\"] = df[\"poutcome\"].astype(str)\ndf[\"housing\"] = df[\"housing\"].astype(str)\ndf[\"loan\"] = df[\"loan\"].astype(str)\n\nfrom sklearn import preprocessing\n\nnumber = preprocessing.LabelEncoder()\n\ndf[\"job\"] = number.fit_transform(df[\"job\"])\ndf[\"marital\"] = number.fit_transform(df[\"marital\"])\ndf[\"education\"] = number.fit_transform(df[\"education\"])\ndf[\"default\"] = number.fit_transform(df[\"default\"])\ndf[\"contact\"] = number.fit_transform(df[\"contact\"])\ndf[\"month\"] = number.fit_transform(df[\"month\"])\ndf[\"day_of_week\"] = number.fit_transform(df[\"day_of_week\"])\ndf[\"poutcome\"] = number.fit_transform(df[\"poutcome\"])\ndf[\"housing\"] = number.fit_transform(df[\"housing\"])\ndf[\"loan\"] = number.fit_transform(df[\"loan\"])\n\ndf.head()","0cdd36f1":"from sklearn.model_selection import train_test_split\n\nX = df.drop([\"y\"], axis = 1)\ny = df[\"y\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.15)","1fa302fe":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver = \"saga\", max_iter = 10000)\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","ab7d409e":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","0b501029":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","63165024":"from sklearn.model_selection import validation_curve\nfrom sklearn.tree import DecisionTreeClassifier\nimport numpy as np\n\nparam_range = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\ntrain_scores, test_scores = validation_curve(DecisionTreeClassifier(), X_train, y_train, param_name = \"max_depth\", param_range = param_range)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (16, 12))\n\nplt.plot(param_range, np.mean(train_scores, axis = 1))\nplt.plot(param_range, np.mean(test_scores, axis = 1))\n\nplt.title(\"How does the tree depth influence the accuracy?\", fontsize = 20)\nplt.xlabel(\"depth levels of model\", fontsize = 15)\nplt.ylabel(\"model accuracy\", fontsize = 15)\n\n# Adding a legend\nplt.legend([\"train\", \"test\"], loc = \"upper left\", fontsize = 12)\n\nplt.show()","0fa77fea":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n\nfrom sklearn.svm import SVC\n\nmodel = SVC(kernel = \"rbf\", gamma = 0.01, C = 5)\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","eb572689":"from sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","5cd27dba":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors = 18)\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","1b612906":"from sklearn.model_selection import learning_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.utils import shuffle\n\nX_train, y_train = shuffle(X_train, y_train)\n\nimport numpy as np\n\ntrain_sizes_abs, train_scores, test_scores = learning_curve(KNeighborsClassifier(), X_train, y_train)\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (16, 12))\n\nplt.plot(train_sizes_abs, np.mean(train_scores, axis = 1))\nplt.plot(train_sizes_abs, np.mean(test_scores, axis = 1))\n\nplt.title(\"Learning Curve KNN\", fontsize = 20)\nplt.xlabel(\"Number of neighbors\", fontsize = 15)\nplt.ylabel(\"Model Accuracy\", fontsize = 15)\n\n# Adding a legend\nplt.legend([\"train\", \"test\"], loc = \"upper right\", fontsize = 12)\n\nplt.show()","db436cf6":"### **<span style = \"color: #2e4053;\">GENERAL OVERVIEW TABULAR<\/span>**","9ad9c7c0":"### **<span style = \"color: #2e4053;\">COLUMNS, NULL VALUES & DATA TYPES<\/span>**","910dca7e":"### **<span style = \"color: #2e4053;\">GAUSSIAN NAIVE BAYES<\/span>**","664139a5":"### **<span style = \"color: #2e4053;\">GENERAL DATAFRAME STATISTICS<\/span>**","47600408":"Feel free to reach out if you have questions...","2357ca31":"# **<span style = \"color:#f4d03f;\">DATA ANALYSIS<\/span>**\n\n<div>\n<img src = \"https:\/\/image.freepik.com\/free-vector\/tiny-people-with-laptop-financial-digital-transformation-open-banking-platform-online-banking-system-finance-digital-transformation-concept-illustration_335657-2529.jpg\" width = \"700\"\/>\n<\/div>","ea7f2cbc":"#### CORRELATION MATRIX OF DATAFRAME","10ad0de6":"#### PAIRPLOT","40b0ed2d":"### **<span style = \"color: #2e4053;\">KNN<\/span>**","f8f1dfcd":"#### KDPLOT","5fcb39ac":"How much do the other columns correlate with the target column \"y\"?","d7f5af6b":"# **<span style = \"color:#f4d03f;\">RESUM\u00c9<\/span>**","6bc1ec07":"### **<span style = \"color: #2e4053;\">SVM WITH RBF-KERNEL<\/span>**","aab8f1ca":"# **<span style = \"color:#f4d03f;\">LOADING & DISPLAYING DATA<\/span>**","5b958c5a":"### **<span style = \"color: #2e4053;\">LOGISTIC REGRESSION<\/span>**","43f344cc":"### **<span style = \"color: #2e4053;\">VISUALIZING COLUMN STATISTICS & DEPENDENCIES<\/span>**","73646832":" # **<span style = \"color:#f4d03f;\">TABLE OF CONTENTS<\/span>**\n \n\n**IMPORTING LIBRARIES**\n\n**LOADING & DISPLAYING DATA**\n\n**DATA ANALYSIS**\n\n**INTERACTIVE PROFILING**\n\n**DATA PREPROCESSING**\n\n**MODEL CONSTURCTION & EXECUTION**\n\n**RESUM\u00c9**\n\n# **<span style = \"color:#f4d03f;\">IMPORTING LIBRARIES<\/span>**","94e25d03":"# <h1 style = \"background: #f4d03f; border:0; color:black\"><center>BANK MARKETING CAMPAIGN<\/center><\/h1>\n\n<div>\n<img src = \"https:\/\/repository-images.githubusercontent.com\/295042181\/50eab680-f6be-11ea-8590-71f0907c9949\" width = \"1200\"\/>\n<\/div>","866e0216":"# **<span style = \"color:#f4d03f;\">DATA PREPROCESSING<\/span>**","1a533c02":"### **<span style = \"color: #2e4053;\">DEFINING X AND Y AND SPLITTING DATA<\/span>**","71b05052":"# **<span style = \"color:#f4d03f;\">INTERACTIVE PROFILING<\/span>**\n\n<div>\n<img src = \"https:\/\/blogs.sw.siemens.com\/wp-content\/uploads\/sites\/14\/2016\/02\/Cash-US-1024x512-1.jpg\" width = \"1200\"\/>\n<\/div>","35a35364":"### **<span style = \"color: #2e4053;\">DECISION TREE<\/span>**","356c8c8f":"#### CROSSTABS","d7460190":"#### COLUMN AGE","618bfa2c":"# **<span style = \"color:#f4d03f;\">MODEL CONSTRUCTION & EXECUTION<\/span>**","de9a22df":"#### AGE REGARDING THE OUTPUT VALUE","6ded0076":"I hope that you enjoyed this notebook. If you did, please upvote!","c054fee8":"### **<span style = \"color: #2e4053;\">TYPE CONVERSIONS<\/span>**","ff37c06f":"### **<span style = \"color: #2e4053;\">RANDOM FOREST<\/span>**"}}