{"cell_type":{"faa2b8ae":"code","53f28faf":"code","c6c87814":"code","af8ffd1f":"code","1aece532":"code","f958993f":"code","dc7ce021":"code","cddad7f0":"code","500542d6":"code","5f87b33b":"code","e6f727bc":"code","524ddc7a":"code","5a96b188":"code","36c141ed":"code","ca6dd2b7":"code","d73701c7":"code","fa2c143e":"code","36f1ce14":"code","4bb4c853":"code","27080b0b":"code","fbf97773":"code","e0e7e194":"code","7feaa01a":"code","51d5fbff":"code","ae152037":"code","94bc85ee":"code","84a53ddc":"code","3ab81448":"code","a82d12d2":"code","4604f6c3":"code","47629098":"code","a8cb62ad":"code","a14cd99a":"code","7331026d":"code","134aaef3":"code","32d90496":"code","e13ae385":"code","83fb97c8":"code","2cbcc0a2":"code","1ca61307":"code","0431c1de":"code","1ef7d6f4":"code","4c1069dd":"code","64f37b93":"code","07eb9996":"code","6df1ee9b":"code","60379204":"code","ef12d67a":"code","d62a2a16":"code","10f7001c":"code","d84e8b6d":"code","fadb8e89":"code","fb4b278d":"code","8a1f7e7a":"code","ab33fc0a":"code","696751af":"code","0ffb19d1":"code","19ba9d4d":"code","f026ec39":"code","4847b6cb":"code","0fb6c60d":"code","23f3e252":"code","83edb696":"code","ae9edc42":"code","271d3d8a":"code","a4ea4237":"code","1c819436":"code","3701aeea":"code","c60e808a":"code","92970c96":"code","9f5d0c38":"code","d9847d7c":"code","d2e41e3d":"code","24826662":"code","c004c99f":"code","132dd135":"code","9a330195":"code","ecb3a4f0":"code","884f8001":"markdown","a5443932":"markdown","9e86d560":"markdown","040f08ab":"markdown","020532ab":"markdown","9f946b66":"markdown","f0f88e22":"markdown","61dd42bc":"markdown","62ceeb43":"markdown","7ac4af01":"markdown","a55d3b86":"markdown","beae2efc":"markdown","96d59726":"markdown","026ce051":"markdown","8826965a":"markdown","c83d7795":"markdown","a7a60c08":"markdown","1b80fd7b":"markdown","7493b68b":"markdown","c7c9a726":"markdown","e3031722":"markdown","94aae1b9":"markdown","a8434200":"markdown"},"source":{"faa2b8ae":"import gc\nimport sys\nimport optuna\nimport datetime\nimport warnings\nimport matplotlib\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.pylab import rcParams\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_squared_log_error\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype","53f28faf":"data = pd.read_csv('..\/input\/ashrae-energy-prediction\/train.csv')\ntrain, test = train_test_split(data, test_size=0.3, random_state=123)","c6c87814":"del data\ngc.collect()","af8ffd1f":"train = train.reset_index(drop=True)\n\nprint(train.shape)\ntrain.head()","1aece532":"test = test.reset_index(drop=True)\n\nprint(test.shape)\ntest.head()","f958993f":"usecols = {'site_id', 'timestamp', 'air_temperature', 'dew_temperature'}","dc7ce021":"weather_data = pd.read_csv('..\/input\/ashrae-energy-prediction\/weather_train.csv', usecols=usecols)\n\nprint(weather_data.shape)\nweather_data.head()","cddad7f0":"usecols = {'site_id', 'building_id', 'primary_use', 'square_feet', 'year_built'}","500542d6":"building = pd.read_csv('..\/input\/ashrae-energy-prediction\/building_metadata.csv', usecols=usecols)\n\nprint(building.shape)\nbuilding.head()","5f87b33b":"lag_cols = ['air_temperature', 'dew_temperature']\n\nfor i in lag_cols:\n    weather_data['DIFF_' + i] = weather_data.groupby(by = ['site_id'])[i].shift(-1)\n    weather_data['PREVIOUS_DIFF_' + i] = np.abs(weather_data[i] - weather_data['DIFF_' + i])\n    weather_data = weather_data.drop(['DIFF_' + i], axis=1)\n    \nweather_data.head()","e6f727bc":"def reduce_mem_usage(df, use_float16=False):\n    \n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","524ddc7a":"# train = reduce_mem_usage(train)\n# test = reduce_mem_usage(test)\n\nweather_data= reduce_mem_usage(weather_data)\nbuilding = reduce_mem_usage(building)","5a96b188":"train = train.merge(building, on='building_id', how='left')\ntest = test.merge(building, on='building_id', how='left')\n\nprint(train.shape)\ntrain.head()","36c141ed":"del building\ngc.collect()","ca6dd2b7":"train = train.merge(weather_data, on=['site_id', 'timestamp'], how='left')\ntest = test.merge(weather_data, on=['site_id', 'timestamp'], how='left')\n\nprint(train.shape)\ntrain.head()","d73701c7":"del weather_data\ngc.collect()","fa2c143e":"# train = reduce_mem_usage(train)\n# test = reduce_mem_usage(test)","36f1ce14":"train = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","4bb4c853":"print(sys.getsizeof(train))\nprint(sys.getsizeof(test))","27080b0b":"train.memory_usage()","fbf97773":"test.memory_usage()","e0e7e194":"print(train.shape)\ntrain.head()","7feaa01a":"train.info()","51d5fbff":"train.nunique()","ae152037":"train.isnull().sum()","94bc85ee":"train.corr()","84a53ddc":"sns.set()","3ab81448":"train['timestamp'] = pd.to_datetime(train['timestamp'])\ntest['timestamp'] = pd.to_datetime(test['timestamp'])","a82d12d2":"fig, axes = plt.subplots(figsize=(8, 4))\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('H').mean()['meter_reading'].plot(ax=axes, label='hour', alpha=0.8).set_ylabel('Meter reading', fontsize=14)\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('D').mean()['meter_reading'].plot(ax=axes, label='day', alpha=0.8).set_ylabel('Meter reading', fontsize=14)\naxes.legend()","4604f6c3":"fig, axes = plt.subplots(figsize=(8, 4))\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('W').mean()['meter_reading'].plot(ax=axes, label='week', alpha=1).set_ylabel('Meter reading', fontsize=14)\ntrain[['timestamp', 'meter_reading']].set_index('timestamp').resample('M').mean()['meter_reading'].plot(ax=axes, label='month', alpha=1).set_ylabel('Meter reading', fontsize=14)\naxes.legend()","47629098":"def to_season(month_num):\n    season = 'winter'\n    if 3 <= month_num <= 5:\n        season = 'spring'\n    elif 6 <= month_num <= 8:\n        season = 'summer'\n    elif 9 <= month_num <= 11:\n        season = 'autumn'\n    return season","a8cb62ad":"train['month'] = train['timestamp'].dt.month\ntrain['season'] = train['month'].apply(lambda x: to_season(x))","a14cd99a":"train = train.drop(train[(train['meter'] == 0) & (train['meter_reading'] == 0)].index, axis=0)","7331026d":"train = train.drop(train[(train['meter'] == 1) & (train['meter_reading'] == 0) & (train['season'] == 'spring')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 1) & (train['meter_reading'] == 0) & (train['season'] == 'summer')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 1) & (train['meter_reading'] == 0) & (train['season'] == 'autumn')].index, axis=0)","134aaef3":"train = train.drop(train[(train['meter'] == 2) & (train['meter_reading'] == 0) & (train['season'] == 'spring')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 2) & (train['meter_reading'] == 0) & (train['season'] == 'autumn')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 2) & (train['meter_reading'] == 0) & (train['season'] == 'winter')].index, axis=0)","32d90496":"train = train.drop(train[(train['meter'] == 3) & (train['meter_reading'] == 0) & (train['season'] == 'spring')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 3) & (train['meter_reading'] == 0) & (train['season'] == 'autumn')].index, axis=0)\ntrain = train.drop(train[(train['meter'] == 3) & (train['meter_reading'] == 0) & (train['season'] == 'winter')].index, axis=0)","e13ae385":"train = train.drop('season', axis=1).reset_index(drop=True)\ngc.collect()\n\ntrain = reduce_mem_usage(train)","83fb97c8":"print(train.shape)\ntrain.head()","2cbcc0a2":"train['hour'] = train['timestamp'].dt.hour\n#train['day'] = train['timestamp'].dt.day\n#train['weekend'] = train['timestamp'].dt.weekday","1ca61307":"train = train.drop(['timestamp', 'site_id'], axis=1)\ngc.collect()\n\ntrain = reduce_mem_usage(train)","0431c1de":"df_group = train.groupby('building_id')['meter_reading']\n\nbuilding_mean = df_group.mean()\nbuilding_median = df_group.median()\nbuilding_std = df_group.std()\n\n# building_min = df_group.min()\n# building_max = df_group.max()","1ef7d6f4":"train['building_mean'] = train['building_id'].map(building_mean)\ntrain['building_median'] = train['building_id'].map(building_median)\ntrain['building_std'] = train['building_id'].map(building_std)\n\n# train['building_min'] = train['building_id'].map(building_min)\n# train['building_max'] = train['building_id'].map(building_max)","4c1069dd":"del df_group\ngc.collect()\n\ntrain = reduce_mem_usage(train)","64f37b93":"print(train.shape)\ntrain.head()","07eb9996":"# drop_col = ['precip_depth_1_hr', 'sea_level_pressure', 'wind_direction', 'wind_speed', 'floor_count']      ","6df1ee9b":"# train = train.drop(drop_col, axis = 1)\n# gc.collect()","60379204":"train['square_feet'] = np.log(train['square_feet'])\ntest['square_feet'] = np.log(test['square_feet'])","ef12d67a":"le = LabelEncoder()\n\ntrain['primary_use'] = le.fit_transform(train['primary_use'])\ntest['primary_use'] = le.fit_transform(test['primary_use'])","d62a2a16":"target = np.log1p(train['meter_reading'])\ntrain = train.drop(['meter_reading'], axis=1)","10f7001c":"del le\ngc.collect()","d84e8b6d":"train = reduce_mem_usage(train)\ntest = reduce_mem_usage(test)","fadb8e89":"train = train.reset_index(drop=True)\ntest = test.reset_index(drop=True)","fb4b278d":"print(sys.getsizeof(train))\nprint(sys.getsizeof(test))","8a1f7e7a":"train.to_pickle('train.pickle')\n\nprint(train.shape)\ntrain.head()","ab33fc0a":"'''\nX_tr, X_val, y_tr, y_val = train_test_split(train, target, test_size=0.2, random_state=666)\n\ndef create_model(trial):\n    num_leaves = trial.suggest_int('num_leaves', 2, 30)\n    n_estimators = trial.suggest_int('n_estimators', 50, 300)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0001, 0.99)\n    max_depth = trial.suggest_int('max_depth', 2, 10)\n    min_child_samples = trial.suggest_int('min_child_samples', 100, 1200)\n    min_data_in_leaf = trial.suggest_int('min_data_in_leaf', 5, 90)\n    bagging_freq = trial.suggest_int('bagging_freq', 1, 7)\n    bagging_fraction = trial.suggest_uniform('bagging_fraction', 0.0001, 1.0)\n    feature_fraction = trial.suggest_uniform('feature_fraction', 0.0001, 1.0)\n    subsample = trial.suggest_uniform('subsample', 0.1, 1.0)\n    colsample_bytree = trial.suggest_uniform('colsample_bytree', 0.1, 1.0)\n    \n    model = lgb.LGBMRegressor(\n        num_leaves=num_leaves,\n        n_estimators=n_estimators,\n        learning_rate=learning_rate,\n        max_depth=max_depth, \n        min_child_samples=min_child_samples, \n        min_data_in_leaf=min_data_in_leaf,\n        bagging_freq=bagging_freq,\n        bagging_fraction=bagging_fraction,\n        feature_fraction=feature_fraction,\n        subsample=subsample,\n        colsample_bytree=colsample_bytree,\n        metric='rsme',\n        random_state=666)\n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X_tr, y_tr)\n    y_pred = model.predict(X_val)\n    rsme = np.sqrt(mean_squared_log_error(y_val, y_pred))\n    return rsme\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=40)\nparams = study.best_params\nprint(params)\n'''","696751af":"params = {'num_leaves': 30,\n          'n_estimators': 270,\n          'learning_rate': 0.7879053219502106,\n          'max_depth': 10,\n          'min_child_samples': 229,\n          'min_data_in_leaf': 29,\n          'bagging_freq': 2,\n          'bagging_fraction': 0.5812963822819995,\n          'feature_fraction': 0.935225000564576,\n          'subsample': 0.5646113055393944,\n          'colsample_bytree': 0.9821303332132698,\n          'random_state': 666}","0ffb19d1":"cls = lgb.LGBMRegressor(**params)\ncls.fit(train, target)","19ba9d4d":"del params\ngc.collect()","f026ec39":"lgb.plot_importance(cls)\nplt.show()","4847b6cb":"y_true = test['meter_reading']\ntimestamp = test['timestamp']\nmeter = test['meter']\n\ntest = test[[col for col in test.columns if col != 'meter_reading']]","0fb6c60d":"test['hour'] = test['timestamp'].dt.hour\n# test['day'] = test['timestamp'].dt.day\n# test['weekend'] = test['timestamp'].dt.weekday\ntest['month'] = test['timestamp'].dt.month","23f3e252":"test = test.drop(['timestamp', 'site_id'], axis=1)\ngc.collect()","83edb696":"test['building_mean'] = test['building_id'].map(building_mean)\ntest['building_median'] = test['building_id'].map(building_median)\ntest['building_std'] = test['building_id'].map(building_std)\n\n# test['building_min'] = test['building_id'].map(building_min)\n# test['building_max'] = test['building_id'].map(building_max)","ae9edc42":"del building_mean, building_median, building_std\ngc.collect()","271d3d8a":"test = test.reset_index(drop=True)\ntest = reduce_mem_usage(test)","a4ea4237":"print(pd.DataFrame([[i for i in dir()], [sys.getsizeof(eval(i)) for i in dir()]],\n                   index=['name','size']).T.sort_values('size', ascending=False).reset_index(drop=True).head(10))","1c819436":"test.to_pickle('test.pickle')\n\nprint(test.shape)\ntest.head()","3701aeea":"y_pred = np.expm1(cls.predict(test))","c60e808a":"del test, cls\ngc.collect()","92970c96":"data = pd.DataFrame(timestamp, columns=['timestamp'])\n\ndata['meter'] = meter\ndata['prediction'] = y_pred\ndata['meter_reading'] = y_true\n\ndata = data.sort_values('timestamp')\ndata = data.reset_index(drop=True)\n\ndata.to_pickle('data.pickle')\ndata.head(10)","9f5d0c38":"del y_pred, y_true, timestamp, meter\ngc.collect()","d9847d7c":"data['timestamp'] = pd.to_datetime(data['timestamp'])","d2e41e3d":"fig, axes = plt.subplots(figsize=(8, 4))\ndata[['timestamp', 'meter_reading']].set_index('timestamp').resample('H').mean()['meter_reading'].plot(ax=axes, label='Meter_reading', alpha=0.8).set_ylabel('Meter_reading', fontsize=14)\ndata[['timestamp', 'prediction']].set_index('timestamp').resample('H').mean()['prediction'].plot(ax=axes, label='Prediction', alpha=0.8).set_ylabel('Prediction', fontsize=14)\naxes.legend()","24826662":"fig, axes = plt.subplots(figsize=(8, 4))\ndata[['timestamp', 'meter_reading']].set_index('timestamp').resample('M').mean()['meter_reading'].plot(ax=axes, label='Meter_reading', alpha=0.8).set_ylabel('Meter_reading', fontsize=14)\ndata[['timestamp', 'prediction']].set_index('timestamp').resample('M').mean()['prediction'].plot(ax=axes, label='Prediction', alpha=0.8).set_ylabel('Prediction', fontsize=14)\naxes.legend()","c004c99f":"data['abnormality'] = data['meter_reading'] \/ data['prediction']\ndata['alert'] = 'nomal'","132dd135":"for i in range(data.shape[0]):\n    if i < 50:\n        if data.iloc[i, 4] <= 1\/2:\n            data.iloc[i, 5] = 'small'\n            print(data.iloc[i, 0], '\u691c\u51fa\u5024\u304c\u5c0f\u3055\u3059\u304e\u307e\u3059')\n            \n        elif data.iloc[i, 4] >= 2:\n            data.iloc[i, 5] = 'big'\n            print(data.iloc[i, 0], '\u691c\u51fa\u5024\u304c\u5927\u304d\u3059\u304e\u307e\u3059')\n            \n        else:\n            pass\n    \n    else:\n        break","9a330195":"data.head(10)","ecb3a4f0":"# data = data.set_index('timestamp')\n# data.head()","884f8001":"# Datasets","a5443932":"# Overview","9e86d560":"\u30fb[\u7570\u5e38\u691c\u77e5\u306e\u624b\u6cd5\uff08\u5916\u308c\u5024\u691c\u51fa\u30fb\u7570\u5e38\u90e8\u4f4d\u691c\u51fa\u30fb\u5909\u5316\u70b9\u691c\u51fa\uff09](https:\/\/www.albert2005.co.jp\/knowledge\/machine_learning\/anomaly_detection_basics\/anomaly_detection_time#hazure)<br>\n\u30fb[Python\u306estatsmodels\u3092\u7528\u3044\u305f\u6642\u7cfb\u5217\u5206\u6790](https:\/\/qiita.com\/hcpmiyuki\/items\/b1783956dee20c6d4700)","040f08ab":"# References","020532ab":"# Stats","9f946b66":"1\u6642\u9593\u3054\u3068\u306e\u30e1\u30fc\u30bf\u5024\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff09<br>\n\u30fbbuilding_id\uff1a\u30d3\u30eb\u306eID<br>\n\u30fbmeter\uff1a0\u306f\u96fb\u529b\u30011\u306f\u51b7\u6c34\u30012\u306f\u30b9\u30c1\u30fc\u30e0\u30013\u306f\u6e29\u6c34<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>\n\u30fbmeter_reading\uff1a\u30e1\u30fc\u30bf\u30fc\u306e\u4f7f\u7528\u91cf\uff08\u76ee\u7684\u5909\u6570\uff09<br>","f0f88e22":"\u30d3\u30eb\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb<br>\n\u30fbsite_id\uff1a\u30d3\u30eb\u306e\u7269\u7406\u7684\u306a\u4f4d\u7f6e<br>\n\u30fbbuilding_id\uff1a\u30d3\u30eb\u306eID<br>\n\u30fbprimary_use\uff1a\u4f7f\u7528\u76ee\u7684<br>\n\u30fbsquare_feet\uff1a\u9762\u7a4d<br>\n\u30fbyear_built\uff1a\u65bd\u5de5\u3057\u305f\u5e74<br>\n\u30fbfloor_count\uff1a\u968e\u6570<br>","61dd42bc":"# Preprocess","62ceeb43":"# Feature Engineering","7ac4af01":"# Lags","a55d3b86":"# Prediction","beae2efc":"\u6c17\u8c61\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb<br>\n\u30fbsite_id\uff1a\u30d3\u30eb\u306e\u7269\u7406\u7684\u306a\u4f4d\u7f6e<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>\n\u30fbair_temperature\uff1a\u6c17\u6e29<br>\n\u30fbdew_temperature\uff1a\u6e7f\u5ea6<br>\n\u30fbprecip_depth\uff1a\u964d\u6c34\u91cf<br>\n\u30fbsea_level_pressure\uff1a\u6d77\u5727<br>\n\u30fbwind_direction\uff1a\u98a8\u5411<br>\n\u30fbwind_speed\uff1a\u98a8\u901f<br>","96d59726":"# Module","026ce051":"# Modeling","8826965a":"# Visualization","c83d7795":"# Alert","a7a60c08":"1448\u68df\u306e\u30d3\u30eb\u306e4\u7a2e\u985e\u306e\u30e1\u30fc\u30bf\u30fc\uff08\u96fb\u529b\u3001\u51b7\u6c34\u3001\u30b9\u30c1\u30fc\u30e0\u3001\u6e29\u6c34\uff09\u306e\u5024\u3092\u4e88\u6e2c\u3059\u308b\u30b3\u30f3\u30da\u3067\u3042\u308b\u3002\n\n\u80cc\u666f\u3068\u3057\u3066\u306f\u3001\u30a8\u30cd\u30eb\u30ae\u30fc\u4f7f\u7528\u91cf\uff084\u7a2e\u985e\u306e\u30e1\u30fc\u30bf\u30fc\u306e\u5024\uff09\u304c\u6b63\u78ba\u306b\u4e88\u6e2c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3067<br>\n\u7701\u30a8\u30cd\u6295\u8cc7\u3092\u6d3b\u767a\u5316\u3055\u305b\u3066\u3001\u74b0\u5883\u554f\u984c\u306b\u8ca2\u732e\u3057\u305f\u3044\u3068\u3044\u3046\u72d9\u3044\u304c\u3042\u308b\u3002\n\n\u30d3\u30eb\u306e\u6240\u6709\u8005\u306f\u3001\u30d3\u30eb\u306e\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u3092\u6539\u5584\u3059\u308b\u3088\u3046\u306a\u6295\u8cc7\u3092\u884c\u3046\u3053\u3068\u3067<br>\n\u30a8\u30cd\u30eb\u30ae\u30fc\u52b9\u7387\u304c\u6539\u5584\u3055\u308c\u305f\u5206\u3001\u30b3\u30b9\u30c8\u3092\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","1b80fd7b":"\u7570\u5e38\u5ea6 = \u5b9f\u6e2c\u5024 \/ \u4e88\u6e2c\u5024 \u3068\u8a2d\u5b9a\u3059\u308b\u3002<br>\n\u5024\u304c0.5\u4ee5\u4e0b\u3067\u3042\u308c\u3070small\u30012\u4ee5\u4e0a\u3067\u3042\u308c\u3070big\u306e\u30a2\u30e9\u30fc\u30c8\u3092\u51fa\u3059\u3002","7493b68b":"# Analytics","c7c9a726":"# Outliers","e3031722":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30b5\u30fc\u30d0\u30fc\u6a5f\u5668\u306e\u30ed\u30b0\u3067\u3042\u308c\u3070\u3001small\u3084big\u306a\u3069\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3042\u3089\u304b\u3058\u3081\u8868\u793a\u3055\u308c\u308b\u306e\u3067<br>\n\u305d\u308c\u3092\u3082\u3068\u306b\u3001\u6761\u4ef6\u5206\u5c90\u3067\u6b21\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u308b\u306e\u304c\u826f\u3044\u3068\u8003\u3048\u3089\u308c\u308b\u3002\n\n\u307e\u305f\u3001\u4ee5\u4e0b2\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u691c\u77e5\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3042\u308b\u3002\n\n\u2460\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u3088\u308b\u691c\u77e5<br>\n\u2461AI\u306e\u7570\u5e38\u5ea6\uff08\u5b9f\u6e2c\u5024\/\u4e88\u6e2c\u5024\uff09\u3092\u6d3b\u7528\u3057\u305f\u691c\u77e5","94aae1b9":"1\u6642\u9593\u3054\u3068\u306e\u30e1\u30fc\u30bf\u5024\u3092\u4fdd\u6301\u3059\u308b\u30c6\u30fc\u30d6\u30eb\uff08\u5b66\u7fd2\u30c7\u30fc\u30bf\uff09<br>\n\u30fbbuilding_id\uff1a\u30d3\u30eb\u306eID<br>\n\u30fbmeter\uff1a0\u306f\u96fb\u529b\u30011\u306f\u51b7\u6c34\u30012\u306f\u30b9\u30c1\u30fc\u30e0\u30013\u306f\u6e29\u6c34<br>\n\u30fbtimestamp\uff1a\u65e5\u4ed8\u3068\u6642\u523b<br>\n\u30fbmeter_reading\uff1a\u30e1\u30fc\u30bf\u30fc\u306e\u4f7f\u7528\u91cf\uff08\u76ee\u7684\u5909\u6570\uff09<br>","a8434200":"# Join"}}