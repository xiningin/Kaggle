{"cell_type":{"c9c2cad3":"code","752f2dda":"code","9297c6d9":"code","57590973":"code","c9420695":"code","2a160da6":"code","3af8a289":"code","864b6b5f":"code","cb2c7b88":"code","00ebee70":"markdown","5414684e":"markdown","3bab69bf":"markdown","5d2538f3":"markdown","7e5b1033":"markdown","db04f4fe":"markdown","56e3c724":"markdown","89df9f59":"markdown"},"source":{"c9c2cad3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","752f2dda":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor","9297c6d9":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nfull=pd.concat([train,test], ignore_index=True)","57590973":"miss = full.isnull().sum()\nmiss[miss>0].sort_values(ascending=True)","c9420695":"pool1 = [\"Electrical\", \"KitchenQual\", \"SaleType\",\"Exterior1st\", \"Exterior2nd\",\"MSZoning\", \"BsmtFullBath\", \"BsmtHalfBath\", \"Utilities\", \"Functional\"]\nfor col in pool1:\n    full[col].fillna(full[col].mode()[0], inplace=True)\n    \npool2=[\"TotalBsmtSF\", \"GarageCars\", \"BsmtFinSF2\",\"MasVnrArea\", \"BsmtUnfSF\", \"GarageArea\",  \"BsmtFinSF1\"]\nfor col in pool2:\n    full[col].fillna(0, inplace=True)   \n    \npool3 = [ \"GarageFinish\", \"GarageYrBlt\",\"Alley\", \"Fence\", \"FireplaceQu\", \"GarageQual\", \"PoolQC\" , \"MiscFeature\",\"GarageCond\", \"GarageType\", \"BsmtExposure\",\"BsmtFinType1\", \"MasVnrType\",\"BsmtCond\", \"BsmtQual\", \"BsmtFinType2\"]\nfor col in pool3:\n    full[col].fillna(\"None\", inplace=True)\n    \nfull[\"LotFrontage\"].fillna(np.mean(full[\"LotFrontage\"]),inplace=True)\n","2a160da6":"full['MSSubClass'] =full['MSSubClass'].astype(str) \npd.get_dummies(full['MSSubClass'], prefix='MSSubClass').head()\nall_dummy_df = pd.get_dummies(full)\nall_dummy_df.head()\n\nfull=all_dummy_df","3af8a289":"test = full[full['SalePrice'].notnull()]\ntrain = full[full['SalePrice'].isnull()]\n","864b6b5f":"Known_Survived_droped = test.drop(['SalePrice'], axis=1)\nUnknown_Survived_droped = train.drop(['SalePrice'], axis=1)\nKnown_Survived_1 = test['SalePrice']\nrf_Survived = RandomForestRegressor(random_state=None, n_estimators=500, n_jobs=-1)\nrf_Survived.fit(Known_Survived_droped, Known_Survived_1)\nrf_Survived.score(Known_Survived_droped, Known_Survived_1)\nfitting_Survived = rf_Survived.predict(Unknown_Survived_droped)\nfull.loc[full['SalePrice'].isnull(), ['SalePrice']] = fitting_Survived\nresult = full[full['Id']>1460]\nresult1 = result[[\"Id\",\"SalePrice\"]]\n","cb2c7b88":"result1.to_csv(\"\/kaggle\/working\/result.csv\",index=False)","00ebee70":"Step1:Input train and test dataset","5414684e":"result","3bab69bf":"# filling missing value ","5d2538f3":"#count of missing value","7e5b1033":"\u0410\u0432\u0442\u043e\u0440 \u042d541 \u0430\u043d\u0434\u044d\u043a \u0423 \u0427\u044d\u043d\u044c\u0445\u0443\u043d","db04f4fe":"#rf method","56e3c724":"#rebuilding test and train","89df9f59":"#Feature Engineering"}}