{"cell_type":{"e8f46602":"code","9400f5c2":"code","51e91905":"code","12d5ec4c":"code","8e14d0a2":"code","1b83ae28":"code","5e783e25":"code","2d642f7b":"code","abf1725b":"code","f9f5f4bb":"code","5b7048c6":"code","d7eb0c07":"code","ef3b7981":"code","5e14425e":"code","4c05a989":"code","997df9ef":"code","e0ab60dc":"code","4a62afc5":"code","ce42bce1":"code","37f098a8":"code","5e5914d4":"code","64539a51":"code","6dcb23b9":"code","94e347b7":"code","c8f63d21":"code","1df7d935":"code","627cccf3":"code","5daa8785":"code","a31ad50b":"markdown","58ed5d7b":"markdown"},"source":{"e8f46602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9400f5c2":"# import libraries\n\nimport math\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns","51e91905":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","12d5ec4c":"train_data.info()","8e14d0a2":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","1b83ae28":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","5e783e25":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","2d642f7b":"\"\"\"This heatmap shows us the gravity of missing values(null rows) for each column \n   the titanic.isnull() function selects all the null values in our column \"\"\"\n\nsns.heatmap(train_data.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","abf1725b":"\"\"\"Here we want to get the percentage of null values for our column Age and Cabin,\n   to do this we take the sum of their null values then divide by the column length\n   and multiply by 100, null values contained in Cabin is too high(above 50 oercent) so we will proceed to drop it\"\"\"\n\nprint(\"Null values for Age Column:\",((train_data['Age'].isnull().sum())\/len(train_data) * 100).round(1))\n\nprint(\"Null values for Cabin column:\",((train_data['Cabin'].isnull().sum())\/len(train_data) * 100).round(1))","f9f5f4bb":"\"\"\"Here is another way of checking the percentage of null values for your columns,\n   we assign tita to a function titanic.columns that holds all our columns\n   then we proceed to loop through each column and calculate its respective null value percentage\"\"\"\n\ntita = train_data.columns\ntita\n\nfor i in tita:\n    x = ((train_data[i].isnull().sum())\/len(train_data) * 100).round(1)\n    print(i, '=', x)","5b7048c6":"\"\"\"This is a simple countplot that shows the amount of people that survived and did not\"\"\"\n\nsns.set_style('darkgrid')\n\nsns.countplot(x = 'Survived', data = train_data, palette = 'dark')","d7eb0c07":"\"\"\"This countplot will show us how many people survived in each sex(male or female)\"\"\"\n\nsns.set_style('darkgrid')\n\nsns.countplot(x = 'Survived', hue = 'Sex', data = train_data, palette = 'dark')","ef3b7981":"\"\"\"In this plot we are getting an idea of how many people survived or did not,\n   depending on the Pclass column(which is the wealth class)\"\"\"\n\nsns.set_style('darkgrid')\n\nsns.countplot(x = 'Survived', hue = 'Pclass', data = train_data, palette = 'dark')","5e14425e":"\"\"\"Now we want to take care of the null values in our Age column,\n   but first we want to know the mean age of the passengers based on the\n   Pclass, using the Pclass provides a better and more accurate way of filling up the age\n   then fill the empty rows with the mean age\"\"\"\n\nnull_age = train_data.groupby(['Pclass']).mean()\nnull_age","4c05a989":"\"\"\"distribution plot is used to check the distribution of numerical data\n   as opposed to countplot which checks for categorical data,\n   the plot shows us the distribution of passengers based on age\"\"\"\n\nsns.distplot(train_data['Age'].dropna(), kde = False, color = 'green', bins=10)","997df9ef":"\"\"\"Here we are introducing boxplot which we will use to identify our outliers,\n   which are represnted by the dots, the boxes are the 50th percentile\n   of the age in each Pclass(1, 2, 3)\"\"\"\n\nplt.figure(figsize = (12,7))\n\nsns.boxplot(x = 'Pclass', y = 'Age', data = train_data, palette = 'rainbow')","e0ab60dc":"\"\"\"As I previously said, we want to know the mean ages as it will help us in dealing with the null values\"\"\"\n\ntrain_data.groupby(['Pclass'])['Age'].mean()","4a62afc5":"\"\"\"the following function fills up the null values of the Age column with the mean age of the Pclass column\"\"\"\n\ndef fill_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        if Pclass == 1:\n            return 38\n        elif Pclass == 2:\n            return 29\n        else: \n            return 25\n    else:\n        return Age","ce42bce1":"\"\"\"Here we will apply the function to the Age column\"\"\"\n\ntrain_data['Age'] = train_data[['Age', 'Pclass']].apply(fill_age, axis = 1)","37f098a8":"sns.heatmap(train_data.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","5e5914d4":"\"\"\"We are dropping the Cabin feature here as it has too many null values\"\"\"\n\ntrain_data.drop('Cabin', axis = 1, inplace = True)","64539a51":"train_data.head()","6dcb23b9":"\"\"\"We check how many null values are in Embarked\n   to give us an insight on how to take care of them\"\"\"\n\ntrain_data['Embarked'].isnull().sum()","94e347b7":"\"\"\"Only two null values are in Embarked so to take care of this we want to check which Value occurs most\n   whether its S, C or Q\"\"\"\n\ntrain_data['Embarked'].value_counts()","c8f63d21":"\"\"\"As we can see S occurs the most, therefore we are filling our 2 null rows with S\"\"\"\n\ntrain_data['Embarked'] = train_data['Embarked'].fillna('S')","1df7d935":"sns.heatmap(train_data.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","627cccf3":"train_data.info()","5daa8785":"# import logistic regression model from sklearn\n\nfrom sklearn.linear_model import LogisticRegression\n\n\"\"\"We want to create an object(log) for the logistic regressor class and fit our train datasets in it\n   n_jobs deals with computational power\n   fit_intercept talks about whether the model will start from either 0 or not\"\"\"\n\n\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nlog = LogisticRegression(n_jobs = 1, fit_intercept = False)\nlog.fit(X, y)\npredictions = log.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","a31ad50b":"# Logistic Regression Model","58ed5d7b":"##### Now we only have Cabin and Embarked left"}}