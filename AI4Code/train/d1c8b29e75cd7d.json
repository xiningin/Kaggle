{"cell_type":{"d7ced1ba":"code","63d0fb65":"code","488662d6":"code","0c264936":"code","94060ee0":"code","ad7243c1":"code","9ecf98df":"markdown","25898e80":"markdown"},"source":{"d7ced1ba":"from kaggle_environments import evaluate, make, utils","63d0fb65":"%%writefile sub.py\nimport copy\n\ndef value_fn(board,player):\n    if player == 1:\n        opp_player = 2\n    elif player ==2:\n        opp_player =1\n    return _value_fn(board,player)-5*_value_fn(board,opp_player)\n    \ndef _value_fn(board,player):\n    score = 0\n    \n    # Value of center column\n    score+= 101*[board[i][3] for i in range(6)].count(player)\n    \n    # Count score for each row\n    for r in range(6):\n        row_array = board[r]\n        for c in range(4):\n#             window = row_array[c:c+4]\n            window = [row_array[i+c] for i in range(4)]\n            score += evaluate_row(window, player,r)\n    \n    # Count score for each column\n    for c in range(7):\n        col_array = [board[i][c] for i in range(6)]\n        for r in range(3):\n#             window = col_array[r:r+4]\n            window = [col_array[i+r] for i in range(4)]\n            score += evaluate_column(window, player)\n    \n    # Count score on each diagonal\n    # Forward Diagonal\n    for r in range(3):\n        for c in range(4):\n            window = [board[r+i][c+i] for i in range(4)]\n            score += evaluate_diagonal(window, player,r)\n    \n    # Backward Diagonal\n    for r in range(3):\n        for c in range(4):\n            window = [board[r+3-i][c+i] for i in range(4)]\n            score += evaluate_diagonal(window, player,r)\n            \n    return score\n\n# @nb.njit(cache=False,parallel=False)\ndef evaluate_diagonal(window,player,r):\n    score = 0\n    # Lower diagonal is better\n    # Doesnt check if empty place == 0 for given row but will do for now\n    inverse_row = 7-r\n    score += inverse_row #ranges from 1-7\n    if window.count(player) == 4:\n        score += 10000\n    elif window.count(player) == 3 and window.count(0)==1:\n        score += 100\n    elif window.count(player) == 2 and window.count(0)==2:\n        score += 10\n    return score\n\n# @nb.njit(cache=False,parallel=False)\ndef evaluate_row(window,player,r):\n    score = 0\n    \n    # Lower row is better\n    inverse_row = 7-r\n    score += inverse_row #ranges from 1-7\n    \n    # Weighs higher on forming rows on odd number rows for player 1\n    # and even rows for player 2 \n    # See connect4 even odd strategy\n    if player == 1 and r%2==0:\n        score +=10\n    if player == 2 and r%2!=0:\n        score +=10\n    \n    if window.count(player) == 4:\n        score += 10000\n    elif window.count(player) == 3 and window.count(0)==1:\n        score += 100\n    elif window.count(player) == 2 and window.count(0)==2:\n        score += 10\n    return score\n\n# @nb.njit(cache=False,parallel=False)\ndef evaluate_column(window,player):\n    score = 0\n    if window.count(player) == 4:\n        score += 10000\n    elif window.count(player) == 3 and window.count(0)==1:\n        score += 100\n    elif window.count(player) == 2 and window.count(0)==2:\n        score += 10\n    return 0.5*score\n\ndef get_valid_actions(board):\n    \"\"\"\n    get possible valid actions\n    \"\"\"\n    return [c for c in range(0,7) if board[0][c]==0]\n\ndef drop_piece(board,col,mark):\n    \"\"\"\n    drop piece at next position\n    \"\"\"\n    board = copy.deepcopy(board)\n    for row in range(6-1, -1, -1):\n        if board[row][col] == 0:\n            break\n    board[row][col] = mark\n    return board\n\ndef check_winner(board):\n    \"\"\"\n    Returns player that wins\n    -1 if draws\n    0 if game has not ended\n    \"\"\"\n    # Check rows for winner\n    for row in range(6):\n        for col in range(4):\n            if (board[row][col] == board[row][col + 1] == board[row][col + 2] ==\\\n                board[row][col + 3]) and (board[row][col] != 0):\n                return board[row][col]  #Return Number that match row\n\n    # Check columns for winner\n    for col in range(7):\n        for row in range(3):\n            if (board[row][col] == board[row + 1][col] == board[row + 2][col] ==\\\n                board[row + 3][col]) and (board[row][col] != 0):\n                return board[row][col]  #Return Number that match column\n\n    # Check diagonal (top-left to bottom-right) for winner\n\n    for row in range(3):\n        for col in range(4):\n            if (board[row][col] == board[row + 1][col + 1] == board[row + 2][col + 2] ==\\\n                board[row + 3][col + 3]) and (board[row][col] != 0):\n                return board[row][col] #Return Number that match diagonal\n\n\n    # Check diagonal (bottom-left to top-right) for winner\n\n    for row in range(5, 2, -1):\n        for col in range(4):\n            if (board[row][col] == board[row - 1][col + 1] == board[row - 2][col + 2] ==\\\n                board[row - 3][col + 3]) and (board[row][col] != 0):\n                return board[row][col] #Return Number that match diagonal\n    c = 0\n    for col in range(7):\n        if board[0][col]!=0:\n            c +=1\n    if c == 7:\n        # This is a draw\n        return -1\n    # No winner: return None\n    return 0\n\ndef alphabeta(node,depth,alpha,beta,max_player,player,ai_player):\n    winner = check_winner(node)\n    if depth == 0 or winner !=0:\n        if winner == ai_player:\n            return None, 999999999\n        elif winner == player:\n            return None, -999999999\n        elif winner == -1:\n            return None,0\n        else:\n            value = value_fn(node,ai_player)\n            return None,value\n    \n    if max_player:\n        best_value = -9999999999999\n        best_action = 3\n        for action in get_valid_actions(node):\n            child = drop_piece(node,action,ai_player)\n            score = alphabeta(child,depth-1,alpha,beta,False,player,ai_player)[1]\n            if score > best_value:\n                best_value = score\n                best_action = action\n            alpha = max(alpha,best_value)\n            if alpha>=beta:\n                break\n#         print(best_action)\n        return best_action,best_value\n    \n    else:\n        worst_value = 9999999999999\n        worst_action = 3\n        for action in get_valid_actions(node):\n            child = drop_piece(node,action,player)\n            score = alphabeta(child,depth-1,alpha,beta,True,player,ai_player)[1]\n            if score < worst_value:\n                worst_value = score\n                worst_action = action\n            beta = min(beta,worst_value)\n            if beta<=alpha:\n                break\n        return worst_action,worst_value\ndef reshape4(arr):\n    \"\"\"\n    reshape into 6x7 without numpy \n    \"\"\"\n    line1 = arr[0:7]\n    line2 = arr[7:14]\n    line3 = arr[14:21]\n    line4 = arr[21:28]\n    line5 = arr[28:35]\n    line6 = arr[35:42]\n    board = [line1, line2 , line3, line4, line5, line6] \n    return board\n\ndef my_agent(observation,config):\n    global value\n    board = reshape4(observation[\"board\"])\n    player = observation[\"mark\"]\n    if player == 1:\n        opp_player =2\n    else:\n        opp_player =1\n    action,value = alphabeta(board,5,-9999999999999,9999999999999,True,opp_player,player)\n    return action","488662d6":"# env = make(\"connectx\", debug=True)\n# env.play([None,my_agent],width=500, height=450)","0c264936":"# def mean_reward(rewards):\n#     return np.round(rewards.count([1,-1])\/len(rewards),2)","94060ee0":"# mean_reward(evaluate(\"connectx\", [\"negamax\", my_agent], num_episodes=10))","ad7243c1":"# mean_reward(evaluate(\"connectx\", [my_agent,\"negamax\"], num_episodes=10))","9ecf98df":"# Minimax with alpha beta pruning\nAims to use pure python implementation.  \nNumba doesnt work for me when submitting.    \nLooping numpy is slower than looping python lists due to type conversion.    ","25898e80":"# The following code uses many heuristics.\nThanks to Keith Galli  https:\/\/www.youtube.com\/watch?v=MMLtza3CZFM for reference implementation and \nhttps:\/\/www.youtube.com\/watch?v=y7AKtWGOPAE for some heuristics for connect4.\n\n# Here are some heuristics used\n1. Count number 'useful' pieces in rows\/columns\/diagonals. Useful means u can place additional pieces to win. \n2. Center Column is the best column. As you can connect to both sides of the board.\n3. Even\/odd strategy to ensure that you win in the late game.\n4. Lower rows\/columns\/diagonals are better than higher up the board.\n5. Columns are worth less than rows and diagonals. This is because columns are the easiest to block.\n\n# Value of a board\nThis is the value_of_my_board- factor*value_of_opp_board. This is done using heuristics above.\nNote factor needs to be more than 1 as it's the opponents turn after u place your piece.\n\n# Algorithm\n Minmax search with Alpha Beta Pruning. Not really hard just go wikipedia see pseudocode. But basically the algorithm goes n-steps ahead pick the best board assuming your opponent plays optimally. Alpha Beta pruning so that you can remove branches early and not search them."}}