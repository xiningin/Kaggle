{"cell_type":{"dc9d4eb9":"code","6bd0857c":"code","758aeb46":"code","8e44e463":"code","7a927c9d":"code","0b2226d8":"code","408372d4":"code","437a6b04":"code","e351c7e4":"code","78c77eb6":"code","54ce39ea":"markdown"},"source":{"dc9d4eb9":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6bd0857c":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntr = train.drop(['Cabin','Name','Ticket','Fare','Embarked','PassengerId'], axis=1)\nte = test.drop(['Cabin','Name','Ticket','Fare','Embarked','PassengerId'], axis=1)\n\ntr.fillna({'Age' : train.Age.mean()}, inplace = True)\nte.fillna({'Age' : train.Age.mean()}, inplace = True)\n\ntr.head()","758aeb46":"dummy_tr = pd.get_dummies(tr.Sex)\ndummy_te = pd.get_dummies(te.Sex)","8e44e463":"tr_new = pd.concat([tr,dummy_tr], axis='columns')\ntr_new = tr_new.drop(['female','Sex'], axis=1)\ntr_new.head()","7a927c9d":"te_new = pd.concat([te,dummy_te], axis='columns')\nte_new = te_new.drop(['female','Sex'], axis=1)\nte_new.head()","0b2226d8":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test =  train_test_split(tr_new.drop(['Survived'],axis=1),tr_new.Survived,test_size=0.25, random_state=10)\nX_train.shape","408372d4":"from sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\nmodel_params = {\n    'svm': {\n        'model': svm.SVC(gamma='auto'),\n        'params' : {\n            'C': [1,10,20],\n            'kernel': ['rbf','linear']\n        }  \n    },\n    'random_forest': {\n        'model': RandomForestClassifier(),\n        'params' : {\n            'n_estimators': [1,5,10]\n        }\n    },\n    'logistic_regression' : {\n        'model': LogisticRegression(solver='liblinear',multi_class='auto'),\n        'params': {\n            'C': [1,5,10]\n        }\n    }\n}\nscores = []\n\nfor model_name, mp in model_params.items():\n    clf =  GridSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False)\n    clf.fit(X_train, y_train)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\n    \ndf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\ndf\n","437a6b04":"X_train = tr_new.drop(['Survived'],axis=1)\ny_train = tr_new.Survived\n\nX_train.head()","e351c7e4":"model = LogisticRegression(solver='liblinear',multi_class='auto', C=1)\nmodel.fit(X_train,y_train)","78c77eb6":"predictions = model.predict(te_new)\noutput = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","54ce39ea":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))"}}