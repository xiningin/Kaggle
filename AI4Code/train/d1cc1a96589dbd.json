{"cell_type":{"07b5cf92":"code","50276cdb":"code","f1e3f123":"code","2ec6b81d":"code","9afb39f0":"code","8d3cbdeb":"code","5f0180e2":"code","ee31f00b":"code","25ad0e5f":"code","c035b1df":"code","ba25fbd4":"code","ecab04c7":"code","24429fcd":"code","a26a23e0":"code","ae54ba55":"code","01fcf3df":"code","ed111b74":"code","6474a3f1":"code","83429af0":"code","314b8592":"code","3a680802":"code","268dc759":"code","7aae22de":"code","58bdce29":"code","2e5ec634":"code","e5b5717d":"code","9ff13ee8":"markdown","87bac92d":"markdown","b1af5aa4":"markdown","dd2db2a6":"markdown","64089521":"markdown"},"source":{"07b5cf92":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","50276cdb":"import numpy as np \nimport pandas as pd \nimport os\nfrom fastai.imports import *\nfrom fastai.torch_imports import *\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *","f1e3f123":"# here we specify  the path for our dataset and our global variables!! \nPATH = '..\/input\/'\nsz = 224 \nbs = 58\narch = resnet50\nprint(os.listdir(PATH))\n# os.makedirs('..\/work')","2ec6b81d":"#labels.. \nlabels_dir = f'{PATH}labels.csv'\nn = len(list(open(labels_dir))) -1 \nval_idxs = get_cv_idxs(n)\nlen(val_idxs)\nn","9afb39f0":"labels = pd.read_csv(labels_dir)\nlabels.head()\nlabels['breed'].value_counts()","8d3cbdeb":"tfms = tfms_from_model(arch, sz, aug_tfms = transforms_side_on, max_zoom = 1.1)\ndata = ImageClassifierData.from_csv(PATH, 'train', csv_fname = labels_dir,test_name = 'test', suffix = '.jpg',val_idxs = val_idxs,tfms=tfms, bs =bs)\n","5f0180e2":"file = PATH + data.trn_ds.fnames[1000]\nfile","ee31f00b":"img = PIL.Image.open(file) \nimg","25ad0e5f":"def get_data(sz, bs):\n    tfms = tfms_from_model(arch, sz, aug_tfms = transforms_side_on, max_zoom = 1.1)\n    data = ImageClassifierData.from_csv(PATH, 'train', csv_fname = labels_dir,test_name = 'test', suffix = '.jpg',val_idxs = val_idxs,tfms=tfms, bs =bs)\n    if sz > 300:\n        return data\n    else:\n        data.resize(340, '\/tmp')\n        return data","c035b1df":"TMP_PATH = \"\/tmp\/tmp\"\nMODEL_PATH = \"\/tmp\/model\/\"","ba25fbd4":"data = get_data(sz, bs)\n# data = data.resize(int(sz*1.3), '\/tmp')\nlearn = ConvLearner.pretrained(arch, data,tmp_name = TMP_PATH, models_name = MODEL_PATH, precompute = True)\n","ecab04c7":"lrf = learn.lr_find()\nlearn.sched.plot()","24429fcd":"%time learn.fit(1e-1,5,cycle_len=1)","a26a23e0":"learn.precompute = False\n%time learn.fit(1e-2,5,cycle_len=1)","ae54ba55":"learn.save(\"224_pre\")\nlearn.load(\"224_pre\")","01fcf3df":"sz = 299 \nlearn.set_data(get_data(sz,bs))\nlearn.freeze()\nlearn.fit(1e-2,3,cycle_len=1)","ed111b74":"learn.fit(1e-2, 3, cycle_len = 1, cycle_mult = 2)","6474a3f1":"from sklearn import metrics\nlog_preds, y = learn.TTA() \nprobs = np.mean(np.exp(log_preds), 0)\naccuracy_np(probs, y), metrics.log_loss(y, probs)","83429af0":"learn.save(\"229_pre\")\nlearn.load(\"229_pre\")","314b8592":"log_preds, y = learn.TTA(is_test= True) \nprobs = np.mean(np.exp(log_preds), 0)","3a680802":"data.classes ","268dc759":"import pandas as pd\ndf = pd.DataFrame(probs)\ndf.columns = data.classes","7aae22de":"df.insert(0, 'id', [o[5:-4] for o in data.test_ds.fnames])","58bdce29":"df.head()","2e5ec634":"df.to_csv(\"Submit.csv\",index = False)\n        ","e5b5717d":"df.head()","9ff13ee8":"**Now we create our model**\n   what we will do : \n        1. create the get data function\n        2. instantiate a learner object \n        3. find a good learning rate \n        4. train for 2-3 epochs \n        5. unfreeze and retrain with cycle_mult = 2 \n        6. increase size, freeze, step4,step5 \n        ","87bac92d":"**Dog breed competition...**","b1af5aa4":"*now we read the csv file and then see what in in, and the count of each class*","dd2db2a6":"**Loading libraries**","64089521":"***In order to visualize our data we need to do some preprocessing first ***"}}