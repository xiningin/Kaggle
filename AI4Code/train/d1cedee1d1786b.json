{"cell_type":{"e01b0ba2":"code","0f979edd":"code","2b9db8fa":"code","2dffbf17":"code","d42acdb7":"code","4d2de504":"code","f533bd5f":"code","d2bdaafd":"code","dfb118ff":"code","d3f8a72b":"code","8f975145":"code","dc1b74ef":"code","8e71de05":"code","09bf2716":"code","96dea363":"code","3dd5154c":"code","81a160fa":"code","6a84f57f":"code","0358dc12":"code","03562858":"code","72beb1c4":"code","9723cf3c":"code","2d988c25":"code","41cfb7d7":"code","9e25d682":"code","d25b16a9":"code","d002786d":"code","160133e4":"markdown","82e41fc4":"markdown","ed171ea6":"markdown","6fa857de":"markdown","9830100e":"markdown","8ccee080":"markdown","b9556cef":"markdown","2f212aa0":"markdown"},"source":{"e01b0ba2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0f979edd":"IDIR = '..\/input\/'\n\nprint('loading prior')\npriors = pd.read_csv(IDIR + 'order_products__prior.csv', dtype={\n            'order_id': np.int32,\n            'product_id': np.uint16,\n            'add_to_cart_order': np.int16,\n            'reordered': np.int8})\n\nprint('loading train')\ntrain = pd.read_csv(IDIR + 'order_products__train.csv', dtype={\n            'order_id': np.int32,\n            'product_id': np.uint16,\n            'add_to_cart_order': np.int16,\n            'reordered': np.int8})\n\nprint('loading orders')\norders = pd.read_csv(IDIR + 'orders.csv', dtype={\n        'order_id': np.int32,\n        'user_id': np.int32,\n        'eval_set': 'category',\n        'order_number': np.int16,\n        'order_dow': np.int8,\n        'order_hour_of_day': np.int8,\n        'days_since_prior_order': np.float32})\n\nprint('loading products')\nproducts = pd.read_csv(IDIR + 'products.csv', dtype={\n        'product_id': np.uint16,\n        'order_id': np.int32,\n        'aisle_id': np.uint8,\n        'department_id': np.uint8},\n        usecols=['product_id', 'aisle_id', 'department_id'])\n\nprint('priors {}: {}'.format(priors.shape, ', '.join(priors.columns)))\nprint('orders {}: {}'.format(orders.shape, ', '.join(orders.columns)))\nprint('train {}: {}'.format(train.shape, ', '.join(train.columns)))\n\n###","2b9db8fa":"print(\"Computing Product f\")\nprods = pd.DataFrame()\nprods['orders'] = priors.groupby(priors.product_id).size().astype(np.int32)\nprods['reorders'] = priors['reordered'].groupby(priors.product_id).sum().astype(np.int32)\nprods['reorder_rate'] = (prods.reorders\/prods.orders).astype(np.float32)\nproducts = products.join(prods, on='product_id')\nproducts.set_index('product_id', drop=False, inplace=True)\nproducts.head()\ndel prods","2dffbf17":"orders.set_index('order_id', inplace=True, drop=False)","d42acdb7":"priors = priors.join(orders, on='order_id', rsuffix='_')","4d2de504":"priors.drop('order_id_', inplace=True, axis=1)","f533bd5f":"priors.head()","d2bdaafd":"print(\"Computing User Features\")\nusr = pd.DataFrame()\nusr['average_days_between_orders'] = orders.groupby('user_id')['days_since_prior_order'].mean().astype(np.float32)\nusr['nb_orders'] = orders.groupby('user_id').size().astype(np.int16)\nusr.head()","dfb118ff":"# Creating features from the customer buying patterns\nusers = pd.DataFrame()\nusers['total_items'] = priors.groupby('user_id').size().astype(np.int16)\nusers['all_products'] = priors.groupby('user_id')['product_id'].apply(set)\nusers['total_distinct_items'] = users.all_products.map(len).astype(np.int16)","d3f8a72b":"users = users.join(usr)\ndel usr","8f975145":"# total_items is the total number of products that were bought by a particular user.\nusers['average_basket'] = users.total_items\/users.nb_orders\nusers.head()\n# The average_basket gives us the average number of product a particular user's basket have.","dc1b74ef":"priors['user_product'] = priors.product_id + priors.user_id * 100000","8e71de05":"priors.head()\n# Each product related to a user gets a unique id - user_product","09bf2716":"d = dict()\n# We make a new DataFrame for each unique combination of user and product\n# We add the number of times that particular product was ordered by the user\n# it's added to cart order and the last ordered item\n\nd= dict()\nfor row in priors.itertuples():\n    z = row.user_product\n    if z not in d:\n        d[z] = (1, (row.order_number, row.order_id),row.add_to_cart_order)\n    else:\n        d[z] = (d[z][0] + 1, max(d[z][1], (row.order_number, row.order_id)), d[z][2] + row.add_to_cart_order)\n","96dea363":"# Converting to DataFrame\nuserXproduct = pd.DataFrame.from_dict(d, orient='index')\ndel d","3dd5154c":"userXproduct.head()","81a160fa":"userXproduct.columns = ['nb_orders', 'last_order_id', 'sum_pos_in_cart']\nuserXproduct.nb_orders = userXproduct.nb_orders.astype(np.int16)\n# Only take the id of the last ordered item.\nuserXproduct.last_order_id = userXproduct.last_order_id.map(lambda x: x[1]).astype(np.int32)\nuserXproduct.sum_pos_in_cart = userXproduct.sum_pos_in_cart.astype(np.int16)\nprint('user X product f', len(userXproduct))\ndel priors","6a84f57f":"userXproduct.head()","0358dc12":"### train \/ test orders ###\nprint('split orders : train, test')\ntest_orders = orders[orders.eval_set == 'test']\ntrain_orders = orders[orders.eval_set == 'train']\n\ntrain.set_index(['order_id', 'product_id'], inplace=True, drop=False)","03562858":"train_orders.head()","72beb1c4":"def features(selected_orders, labels_given=False):\n    print('build candidate list')\n    order_list = []\n    product_list = []\n    labels = []\n    i=0\n    for row in selected_orders.itertuples():\n        i+=1\n        if i%10000 == 0: print('order row',i)\n        order_id = row.order_id\n        user_id = row.user_id\n        user_products = users.all_products[user_id]\n        product_list += user_products\n        # A list with order_id repeated len(user_products) time.\n        order_list += [order_id] * len(user_products)\n        if labels_given:\n            labels += [(order_id, product) in train.index for product in user_products]\n        \n    df = pd.DataFrame({'order_id':order_list, 'product_id':product_list}, dtype=np.int32)\n    labels = np.array(labels, dtype=np.int8)\n    del order_list\n    del product_list\n    \n    print('user related features')\n    df['user_id'] = df.order_id.map(orders.user_id)\n    df['user_total_orders'] = df.user_id.map(users.nb_orders)\n    df['user_total_items'] = df.user_id.map(users.total_items)\n    df['total_distinct_items'] = df.user_id.map(users.total_distinct_items)\n    df['user_average_days_between_orders'] = df.user_id.map(users.average_days_between_orders)\n    df['user_average_basket'] =  df.user_id.map(users.average_basket)\n    \n    print('order related features')\n    # df['dow'] = df.order_id.map(orders.order_dow)\n    df['order_hour_of_day'] = df.order_id.map(orders.order_hour_of_day)\n    df['days_since_prior_order'] = df.order_id.map(orders.days_since_prior_order)\n    df['days_since_ratio'] = df.days_since_prior_order \/ df.user_average_days_between_orders\n    \n    print('product related features')\n    df['aisle_id'] = df.product_id.map(products.aisle_id)\n    df['department_id'] = df.product_id.map(products.department_id)\n    df['product_orders'] = df.product_id.map(products.orders).astype(np.int32)\n    df['product_reorders'] = df.product_id.map(products.reorders)\n    df['product_reorder_rate'] = df.product_id.map(products.reorder_rate)\n\n    print('user_X_product related features')\n    df['z'] = df.user_id * 100000 + df.product_id\n    df.drop(['user_id'], axis=1, inplace=True)\n    df['UP_orders'] = df.z.map(userXproduct.nb_orders)\n    df['UP_orders_ratio'] = (df.UP_orders \/ df.user_total_orders).astype(np.float32)\n    df['UP_last_order_id'] = df.z.map(userXproduct.last_order_id)\n    df['UP_average_pos_in_cart'] = (df.z.map(userXproduct.sum_pos_in_cart) \/ df.UP_orders).astype(np.float32)\n    df['UP_reorder_rate'] = (df.UP_orders \/ df.user_total_orders).astype(np.float32)\n    df['UP_orders_since_last'] = df.user_total_orders - df.UP_last_order_id.map(orders.order_number)\n    df['UP_delta_hour_vs_last'] = abs(df.order_hour_of_day - df.UP_last_order_id.map(orders.order_hour_of_day)).map(lambda x: min(x, 24-x)).astype(np.int8)\n    #df['UP_same_dow_as_last_order'] = df.UP_last_order_id.map(orders.order_dow) == \\\n    #                                              df.order_id.map(orders.order_dow)\n\n    df.drop(['UP_last_order_id', 'z'], axis=1, inplace=True)\n    print(df.dtypes)\n    print(df.memory_usage())\n    return (df, labels)","9723cf3c":"df_train, labels = features(train_orders, labels_given=True)\n","2d988c25":"f_to_use = ['user_total_orders', 'user_total_items', 'total_distinct_items',\n       'user_average_days_between_orders', 'user_average_basket',\n       'order_hour_of_day', 'days_since_prior_order', 'days_since_ratio',\n       'aisle_id', 'department_id', 'product_orders', 'product_reorders',\n       'product_reorder_rate', 'UP_orders', 'UP_orders_ratio',\n       'UP_average_pos_in_cart', 'UP_reorder_rate', 'UP_orders_since_last',\n       'UP_delta_hour_vs_last'] # 'dow', 'UP_same_dow_as_last_order'\n\n","41cfb7d7":"import lightgbm as lgb\nd_train = lgb.Dataset(df_train[f_to_use], \n                     label=labels,\n                     categorical_feature=['aisle_id', 'department_id'])  # , 'order_hour_of_day', 'dow'\ndel df_train","9e25d682":"d_train","d25b16a9":"params = {\n    'task': 'train',\n    'boosting_type': 'gbdt',\n    'objective': 'binary',\n    'metric': {'binary_logloss'},\n    'num_leaves': 96,\n    'max_depth': 10,\n    'feature_fraction': 0.9,\n    'bagging_fraction': 0.95,\n    'bagging_freq': 5\n}\nROUNDS = 100\n\nprint('light GBM train :-)')\nbst = lgb.train(params, d_train, ROUNDS)\n# lgb.plot_importance(bst, figsize=(9,20))\ndel d_train","d002786d":"### build candidates list for test ###\n\ndf_test, _ = features(test_orders)\n\nprint('light GBM predict')\npreds = bst.predict(df_test[f_to_use])\n\ndf_test['pred'] = preds\n\nTRESHOLD = 0.22  # guess, should be tuned with crossval on a subset of train data\n\nd = dict()\nfor row in df_test.itertuples():\n    if row.pred > TRESHOLD:\n        try:\n            d[row.order_id] += ' ' + str(row.product_id)\n        except:\n            d[row.order_id] = str(row.product_id)\n\nfor order in test_orders.order_id:\n    if order not in d:\n        d[order] = 'None'\n\nsub = pd.DataFrame.from_dict(d, orient='index')\n\nsub.reset_index(inplace=True)\nsub.columns = ['order_id', 'products']\nsub.to_csv('sub.csv', index=False)","160133e4":"## User Features","82e41fc4":"## Preprocessing","ed171ea6":"## Merging Priors and Orders","6fa857de":"We add three new columns to the product dataframe that are orders, reorders and reorder_rate, by grouping together the product_id in prior dataframe.","9830100e":"## userXproduct features","8ccee080":"**priors**: Has multiple instances of the orders, that is each product in an order is a separate row.\n\n**orders**: Orders that were made by the user.\n","b9556cef":"## Loading and Preprocessing","2f212aa0":"## Training the LGB model."}}