{"cell_type":{"6f0a9508":"code","b91aad05":"code","279e066f":"code","c71ec2ca":"code","11c9bf4c":"code","a192e662":"markdown"},"source":{"6f0a9508":"## 0. \u914d\u7f6e\u672c\u5730\u73af\u5883\uff1a\u4f9d\u8d56\u3001\u65e5\u5fd7\u7b49\u3002\n!pip install -r \/kaggle\/input\/kubeedge-sedna\/lib\/requirements.txt\nimport sys\nimport logging\nsys.path.append('\/kaggle\/input\/kubeedge-sedna\/lib')\n# !python \/kaggle\/input\/kubeedge-sedna\/examples\/federated_learning\/online_course\/init.py\n\n# for logging not shown in kaggle\nfor handler in logging.root.handlers[:]:\n    logging.root.removeHandler(handler)\nlogging.basicConfig(level=logging.INFO, format='%(filename)s:%(lineno)s %(levelname)s:%(message)s')\n\nimport nest_asyncio\nnest_asyncio.apply()","b91aad05":"## 1. \u914d\u7f6e\u8bad\u7ec3\u8282\u70b9ID\u3001\u805a\u5408\u670d\u52a1ip&port\u3001\u6570\u636e\u96c6\u8def\u5f84\u3001\u8bad\u7ec3\u8d85\u53c2\u6570\nimport os,sys\n\n# aggregation service parameters\nsys.argv.extend(['-i', '1'])  # client id\nos.environ['AGG_IP']=\"159.138.44.120\" # aggregation server ip\nos.environ['AGG_PORT']=\"30363\" # aggregation server websocket port\nos.environ['TRANSMITTER']=\"ws\"\n# os.environ['PARTICIPANTS_COUNT']=\"2\"\n\n\n# datasets parameters\nos.environ['TRAIN_DATASET_URL']=\"\/kaggle\/input\/magnetic-tile-defect-datasets\/1.txt\"\n\n# training parameters\nos.environ['learning_rate']=\"0.001\"\nos.environ['batch_size']=\"32\"\nos.environ['epochs']=\"2\"\n\n# worker parameters.\n# os.environ['DATA_PATH_PREFIX']=\"\/home\/data\"\n# os.environ['LC_SERVER']=\"http:\/\/localhost:9100\"\n# os.environ['HOSTNAME']=\"edge1\"  # client name\nos.environ['MODEL_URL']=\"\/home\/data\/model\"\nos.environ['NAMESPACE']=\"default\"\nos.environ['WORKER_NAME']=\"trainworker-nf8jw\"\nos.environ['JOB_NAME']=\"surface-defect-detection\"\nos.environ['MODEL_NAME']=\"surface-defect-detection-model\"\nos.environ['DATASET_NAME']=\"edge1-surface-defect-detection-dataset\"\n\n","279e066f":"## 2. \u67e5\u770b\u672c\u5730\u6570\u636e\n!ls \/kaggle\/input","c71ec2ca":"## 3. \u7f16\u5199\u8bad\u7ec3\u6a21\u578b\uff0c\u5bfc\u5165\u8bad\u7ec3\u6570\u636e\uff0c\u542f\u52a8\u672c\u5730\u8bad\u7ec3\u3002\n# Copyright 2021 The KubeEdge Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport nest_asyncio\nfrom PIL import Image\nfrom torch import nn\nfrom torch.utils.data import Dataset\nfrom torchvision import transforms\n\nfrom sedna.algorithms.aggregation import FedAvgV2\nfrom sedna.algorithms.client_choose import SimpleClientChoose\nfrom sedna.common.config import BaseConfig\nfrom sedna.common.config import Context\nfrom sedna.core.federated_learning import FederatedLearningV2\nfrom sedna.datasources import TxtDataParse\n\nnest_asyncio.apply()\n\n# os.environ['BACKEND_TYPE'] = 'TORCH'\n\nsimple_chooser = SimpleClientChoose(per_round=2)\n\n# It has been determined that mistnet is required here.\nfedavg = FedAvgV2()\n\n# The function `get_transmitter_from_config()` returns an object instance.\ntransmitter = FederatedLearningV2.get_transmitter_from_config()\n\n\nclass SddDataset(Dataset):\n    def __init__(self, x, y) -> None:\n        self.images = x\n        self.labels = y\n\n    def __len__(self):\n        return len(self.images)\n\n    def __getitem__(self, index):\n        return self.images[index], self.labels[index]\n\n\nclass myDataset:\n    def __init__(self, trainset=None, testset=None) -> None:\n        self.customized = True\n        self.trainset = SddDataset(trainset[0], trainset[1])\n        self.testset = SddDataset(testset[0], testset[1])\n\n\nclass Estimator:\n    def __init__(self) -> None:\n        self.model = self.build()\n        self.pretrained = None\n        self.saved = None\n        self.hyperparameters = {\n            \"type\": \"basic\",\n            \"rounds\": int(Context.get_parameters(\"exit_round\", 5)),\n            \"target_accuracy\": 0.97,\n            \"epochs\": int(Context.get_parameters(\"epochs\", 5)),\n            \"batch_size\": int(Context.get_parameters(\"batch_size\", 32)),\n            \"optimizer\": \"SGD\",\n            \"learning_rate\": float(Context.get_parameters(\"learning_rate\", 0.01)),\n            # The machine learning model\n            \"model_name\": \"sdd_model\",\n            \"momentum\": 0.9,\n            \"weight_decay\": 0.0\n        }\n\n    @staticmethod\n    def build():\n        model = nn.Sequential(\n            nn.Conv2d(in_channels=1, out_channels=64, kernel_size=(3, 3), stride=(2, 2)),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Conv2d(in_channels=64, out_channels=32, kernel_size=(3, 3)),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2),\n            nn.Flatten(),\n            nn.Dropout(p=0.25),\n            nn.Linear(6272, 64),\n            nn.ReLU(),\n            nn.Linear(64, 32),\n            nn.ReLU(),\n            nn.Linear(32, 2))\n\n        return model\n    \n    \ndef readFromTxt(path):\n    data_x = []\n    data_y = []\n    with open(path) as f:\n        lines = f.readlines()\n        for line in lines:\n            x, y = image_process(line)\n            data_x.append(x)\n            data_y.append(y)\n    return data_x, data_y\n\n\ndef image_process(line):\n    file_path, label = line.split(',')\n    original_dataset_url = (\n        BaseConfig.original_dataset_url or BaseConfig.train_dataset_url\n    )\n    root_path = os.path.dirname(original_dataset_url)\n    file_path = os.path.join(root_path, file_path)\n    transform = transforms.Compose([transforms.Resize((128, 128)),\n                                    transforms.PILToTensor()])\n    x = Image.open(file_path)\n    x = transform(x) \/ 255.\n    y = int(label)\n\n    return [x, y]\n\n\ndef main():\n    train_dataset_url = BaseConfig.train_dataset_url\n    # we have same data in the trainset and testset\n    test_dataset_url = BaseConfig.train_dataset_url\n\n#     train_data = TxtDataParse(data_type=\"train\", func=image_process)\n#     train_data.parse(train_dataset_url)\n    train_data = readFromTxt(train_dataset_url)\n    \n    data = myDataset(trainset=train_data, testset=train_data)\n\n\n    estimator = Estimator()\n\n    fl_model = FederatedLearningV2(\n        data=data,\n        estimator=estimator,\n        aggregation=fedavg,\n        transmitter=transmitter)\n\n    fl_model.train()\n\n\nif __name__ == '__main__':\n    main()\n","11c9bf4c":"## 4. \u6a21\u578b\u8bc4\u4f30\u4ee3\u7801\uff08\u8001\u5e08\u53ef\u6dfb\u52a0\u76f8\u5e94\u6a21\u677f\uff09","a192e662":"## \u8054\u90a6\u5b66\u4e60\u6559\u7a0b\n\n\uff08\u76ee\u7684\uff1a\u4ecb\u7ecd\u8054\u90a6\u5b66\u4e60\u8fc7\u7a0b\uff0c\u57fa\u4e8eSedna\uff09\n\n\n### \u4ecb\u7ecd\n- \u8054\u90a6\u5b66\u4e60\u67b6\u6784\n- Sedna \uff08High Level\u4e00\u70b9\u7684\uff0c3~4\u9875\uff09\n    - \u8fb9\u7f18AI\u7684motivation\n    - \u6df1\u5165\u884c\u4e1a\n    - \u8fb9\u7f18AI\u7684\u8981\u505a\u54ea\u4e9b\u4e8b\u60c5\n\n\n### \u603b\u89c8\n\n1. \u914d\u7f6e\u8054\u90a6\u5b66\u4e60       \n    - \u914d\u7f6e\u805a\u5408\u7b97\u6cd5\n    - \u914d\u7f6e\u805a\u5408\u8282\u70b9IP\uff0cPORT\n    - \u914d\u7f6e\u8bad\u7ec3\u8282\u70b9ID\n    \n2. \u67e5\u770b\u672c\u5730\u6570\u636e\n    - \u6570\u636e\u5728Notebook\u4e2d\u5df2\u7ecf\u51c6\u5907\u597d\n\n3. \u542f\u52a8\u8bad\u7ec3\n    - \u8fed\u4ee31\uff1a\u770b\u5230\u672c\u5730\u8bad\u7ec3\u5b8c\u6210\n    - \u8fed\u4ee31\uff1a\u770b\u5230\u6743\u91cd\u4e0a\u4f20\u5230\u4e91\u7aef\n    - \u8fed\u4ee31\uff1a\u770b\u5230\u4e91\u7aef\u89e6\u53d1\u805a\u5408\n    - \u8fed\u4ee31\uff1a\u4e91\u7aef\u6743\u91cd\u66f4\u65b0\u5230\u8fb9\u4fa7\n    - \u8fed\u4ee31\uff1a\u8fb9\u4fa7\u7cbe\u5ea6\u8bc4\u4f30\n    - ...\n    - \u8fed\u4ee3n\uff08\u53ef\u9009\uff09\n\n4. \u8bc4\u4f30\u6a21\u578b\n    \n### \u64cd\u4f5c\u6b65\u9aa4"}}