{"cell_type":{"1517de14":"code","46a63a0b":"code","2635d9a4":"code","fc533b69":"code","d4bc1716":"code","ce09e96b":"code","9e06bb11":"code","8d31748d":"code","ca34c515":"code","5f177711":"code","cd39320c":"code","197ba616":"code","0e968654":"code","8f1aaeb6":"code","69b9e874":"code","34fd0be9":"code","d0d7ef6b":"code","636b5cde":"code","fc5495ab":"code","9c0c9005":"code","16f2697c":"code","1904e860":"code","69d78560":"code","81349fad":"code","13dcee0e":"code","6bbe1311":"code","26ea584f":"code","519d66f5":"code","7554306c":"code","f2030b81":"code","c7138547":"code","44996eff":"code","cbd26fe3":"code","6e0da15a":"code","754d8079":"code","81bf4a56":"code","6c107509":"code","4e59b758":"code","c4f241ad":"code","24391b08":"code","66ba2874":"code","c9c91640":"code","ba383cd1":"code","8a59fce8":"code","7b8d2ecf":"code","3518db64":"code","d309502e":"code","2f1515cf":"code","7b9feae2":"code","f2260b3e":"code","f1454f76":"markdown","f7eeb162":"markdown","60dbf5c0":"markdown","5eb1e409":"markdown","e257b0bf":"markdown","01a8102d":"markdown","fea44873":"markdown","30790c59":"markdown","41f3c2a1":"markdown","c592cb85":"markdown","5f1aa1f4":"markdown","2bfcaf09":"markdown","c9e06519":"markdown","c1af3e85":"markdown","19aa1d2e":"markdown","85ec86ca":"markdown","41c7fb01":"markdown"},"source":{"1517de14":"import gc\nimport sys\nimport warnings\nfrom pathlib import Path\nimport os\nimport ipywidgets as widgets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nwarnings.simplefilter(\"ignore\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","46a63a0b":"example_sample_submission = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_sample_submission.csv\")\nexample_sample_submission","2635d9a4":"example_test = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/example_test.csv\")\nexample_test","fc533b69":"# Helper function to unpack json found in daily data\ndef unpack_json(json_str):\n    return np.nan if pd.isna(json_str) else pd.read_json(json_str)","d4bc1716":"example_test.head(3)","ce09e96b":"unpack_json(example_test[\"games\"].iloc[0])","9e06bb11":"unpack_json(example_test[\"rosters\"].iloc[0])","8d31748d":"training = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/train.csv\")\ntraining['date'] = pd.to_datetime(training['date'], format=\"%Y%m%d\")\ndisplay(training.info())","ca34c515":"training.head(3)","5f177711":"training['date'] = pd.to_datetime(training['date'], format=\"%Y%m%d\")","cd39320c":"nextDayPlayerEngagement = unpack_json(training['nextDayPlayerEngagement'].iloc[0])\nnextDayPlayerEngagement.columns","197ba616":"nextDayPlayerEngagement","0e968654":"games = unpack_json(training['games'].iloc[53])\ngames.columns","8f1aaeb6":"games","69b9e874":"rosters=unpack_json(training['rosters'].iloc[0])\nrosters.columns","34fd0be9":"rosters","d0d7ef6b":"playerBoxScores = unpack_json(training['playerBoxScores'].iloc[87])\nplayerBoxScores.columns","636b5cde":"playerBoxScores","fc5495ab":"teamBoxScores=unpack_json(training['teamBoxScores'].iloc[87])\nteamBoxScores.columns","9c0c9005":"teamBoxScores","16f2697c":"transactions=unpack_json(training['transactions'].iloc[1])\ntransactions.columns","1904e860":"transactions","69d78560":"standings=unpack_json(training['standings'].iloc[87])\nstandings.columns","81349fad":"standings","13dcee0e":"awards=unpack_json(training['awards'].iloc[14])\nawards.columns","6bbe1311":"awards","26ea584f":"events=unpack_json(training['events'].iloc[87])\nevents.columns","519d66f5":"events","7554306c":"playerTwitterFollowers=unpack_json(training['playerTwitterFollowers'].iloc[0])\nplayerTwitterFollowers.columns","f2030b81":"playerTwitterFollowers","c7138547":"teamTwitterFollowers=unpack_json(training['teamTwitterFollowers'].iloc[0])\nteamTwitterFollowers.columns","44996eff":"teamTwitterFollowers","cbd26fe3":"df_names = ['seasons', 'teams', 'players', 'awards']\npath = \"..\/input\/mlb-player-digital-engagement-forecasting\"\nkaggle_data_tabs = widgets.Tab()\nkaggle_data_tabs.children = list([widgets.Output() for df_name in df_names])","6e0da15a":"for index in range(len(df_names)):\n    kaggle_data_tabs.set_title(index, df_names[index])\n    df = pd.read_csv(os.path.join(path,df_names[index]) + \".csv\")\n    with kaggle_data_tabs.children[index]:\n        display(df)\ndisplay(kaggle_data_tabs)","754d8079":"for name in df_names:\n    globals()[name] = pd.read_csv(os.path.join(path,name)+ \".csv\")","81bf4a56":"#### Unnest various nested data within training (daily) data ####\ndaily_data_unnested_dfs = pd.DataFrame(data = {\n  'dfName': training.drop('date', axis = 1).columns.values.tolist()\n  })\ndaily_data_unnested_dfs['df'] = [pd.DataFrame() for row in \n  daily_data_unnested_dfs.iterrows()]\nfor df_index, df_row in daily_data_unnested_dfs.iterrows():\n    nestedTableName = str(df_row['dfName'])\n    date_nested_table = training[['date', nestedTableName]]\n    date_nested_table = (date_nested_table[\n      ~pd.isna(date_nested_table[nestedTableName])\n      ].\n      reset_index(drop = True)\n      )\n    daily_dfs_collection = []\n    for date_index, date_row in date_nested_table.iterrows():\n        daily_df = unpack_json(date_row[nestedTableName])\n        daily_df['dailyDataDate'] = date_row['date']\n        daily_dfs_collection = daily_dfs_collection + [daily_df]\n    unnested_table = pd.concat(daily_dfs_collection,ignore_index = True).set_index('dailyDataDate').reset_index()\n    # Creates 1 pandas df per unnested df from daily data read in, with same name\n    globals()[df_row['dfName']] = unnested_table    \n    daily_data_unnested_dfs['df'][df_index] = unnested_table\ndel training\ngc.collect()\n\n#### Get some information on each date in daily data (using season dates of interest) ####\ndates = pd.DataFrame(data = {'dailyDataDate': nextDayPlayerEngagement['dailyDataDate'].unique()})\ndates['date'] = pd.to_datetime(dates['dailyDataDate'].astype(str))\ndates['year'] = dates['date'].dt.year\ndates['month'] = dates['date'].dt.month\ndates_with_info = pd.merge(\n  dates,seasons,\n  left_on = 'year',right_on = 'seasonId'\n  )\ndates_with_info['inSeason'] = (\n  dates_with_info['date'].between(\n    dates_with_info['regularSeasonStartDate'],\n    dates_with_info['postSeasonEndDate'],\n    inclusive = True\n    )\n  )\ndates_with_info['seasonPart'] = np.select(\n  [ dates_with_info['date'] < dates_with_info['preSeasonStartDate'],  \n    dates_with_info['date'] < dates_with_info['regularSeasonStartDate'],\n    dates_with_info['date'] <= dates_with_info['lastDate1stHalf'],\n    dates_with_info['date'] < dates_with_info['firstDate2ndHalf'],\n    dates_with_info['date'] <= dates_with_info['regularSeasonEndDate'],\n    dates_with_info['date'] < dates_with_info['postSeasonStartDate'],\n    dates_with_info['date'] <= dates_with_info['postSeasonEndDate'],\n    dates_with_info['date'] > dates_with_info['postSeasonEndDate']], \n  [ 'Offseason',\n    'Preseason',\n    'Reg Season 1st Half',\n    'All-Star Break',\n    'Reg Season 2nd Half',\n    'Between Reg and Postseason',\n    'Postseason',\n    'Offseason'], \n  default = np.nan\n  )\n#### Add some pitching stats\/pieces of info to player game level stats ####\nplayer_game_stats = (playerBoxScores.copy().\n  # Change team Id\/name to reflect these come from player game, not roster\n  rename(columns = {'teamId': 'gameTeamId', 'teamName': 'gameTeamName'})\n  )\n# Adds in field for innings pitched as fraction (better for aggregation)\nplayer_game_stats['inningsPitchedAsFrac'] = np.where(\n  pd.isna(player_game_stats['inningsPitched']),\n  np.nan,\n  np.floor(player_game_stats['inningsPitched']) +\n    (player_game_stats['inningsPitched'] -\n      np.floor(player_game_stats['inningsPitched'])) * 10\/3\n  )\n\n# Add in Tom Tango pitching game score (https:\/\/www.mlb.com\/glossary\/advanced-stats\/game-score)\nplayer_game_stats['pitchingGameScore'] = (40\n#     + 2 * player_game_stats['outs']\n    + 1 * player_game_stats['strikeOutsPitching']\n    - 2 * player_game_stats['baseOnBallsPitching']\n    - 2 * player_game_stats['hitsPitching']\n    - 3 * player_game_stats['runsPitching']\n    - 6 * player_game_stats['homeRunsPitching']\n    )\n# Add in criteria for no-hitter by pitcher (individual, not multiple pitchers)\nplayer_game_stats['noHitter'] = np.where(\n  (player_game_stats['gamesStartedPitching'] == 1) &\n  (player_game_stats['inningsPitched'] >= 9) &\n  (player_game_stats['hitsPitching'] == 0),\n  1, 0\n  )\nplayer_date_stats_agg = pd.merge(\n  (player_game_stats.\n    groupby(['dailyDataDate', 'playerId'], as_index = False).\n    # Some aggregations that are not simple sums\n    agg(\n      numGames = ('gamePk', 'nunique'),\n      # Should be 1 team per player per day, but adding here for 1 exception:\n      # playerId 518617 (Jake Diekman) had 2 games for different teams marked\n      # as played on 5\/19\/19, due to resumption of game after he was traded\n      numTeams = ('gameTeamId', 'nunique'),\n      # Should be only 1 team for almost all player-dates, taking min to simplify\n      gameTeamId = ('gameTeamId', 'min')\n      )\n    ),\n  # Merge with a bunch of player stats that can be summed at date\/player level\n  (player_game_stats.\n    groupby(['dailyDataDate', 'playerId'], as_index = False)\n    [['runsScored', 'homeRuns', 'strikeOuts', 'baseOnBalls', 'hits',\n      'hitByPitch', 'atBats', 'caughtStealing', 'stolenBases',\n      'groundIntoDoublePlay', 'groundIntoTriplePlay', 'plateAppearances',\n      'totalBases', 'rbi', 'leftOnBase', 'sacBunts', 'sacFlies',\n      'gamesStartedPitching', 'runsPitching', 'homeRunsPitching', \n      'strikeOutsPitching', 'baseOnBallsPitching', 'hitsPitching',\n      'inningsPitchedAsFrac', 'earnedRuns', \n      'battersFaced','saves', 'blownSaves', 'pitchingGameScore', \n      'noHitter'\n      ]].\n    sum()\n    ),\n  on = ['dailyDataDate', 'playerId'],\n  how = 'inner'\n  )\n#### Turn games table into 1 row per team-game, then merge with team box scores ####\n# Filter to regular or Postseason games w\/ valid scores for this part\ngames_for_stats = games[\n  np.isin(games['gameType'], ['R', 'F', 'D', 'L', 'W', 'C', 'P']) &\n  ~pd.isna(games['homeScore']) &\n  ~pd.isna(games['awayScore'])\n  ]\n# Get games table from home team perspective\ngames_home_perspective = games_for_stats.copy()\n# Change column names so that \"team\" is \"home\", \"opp\" is \"away\"\ngames_home_perspective.columns = [\n  col_value.replace('home', 'team').replace('away', 'opp') for \n    col_value in games_home_perspective.columns.values]\ngames_home_perspective['isHomeTeam'] = 1\n# Get games table from away team perspective\ngames_away_perspective = games_for_stats.copy()\n# Change column names so that \"opp\" is \"home\", \"team\" is \"away\"\ngames_away_perspective.columns = [\n  col_value.replace('home', 'opp').replace('away', 'team') for \n    col_value in games_away_perspective.columns.values]\ngames_away_perspective['isHomeTeam'] = 0\n# Put together games from home\/away perspective to get df w\/ 1 row per team game\nteam_games = (pd.concat([\n  games_home_perspective,\n  games_away_perspective\n  ],\n  ignore_index = True)\n  )\n# Copy over team box scores data to modify\nteam_game_stats = teamBoxScores.copy()\n# Change column names to reflect these are all \"team\" stats - helps \n# to differentiate from individual player stats if\/when joining later\nteam_game_stats.columns = [\n  (col_value + 'Team') \n  if (col_value not in ['dailyDataDate', 'home', 'teamId', 'gamePk',\n    'gameDate', 'gameTimeUTC'])\n    else col_value\n  for col_value in team_game_stats.columns.values\n  ]\n# Merge games table with team game stats\nteam_games_with_stats = pd.merge(\n  team_games,\n  team_game_stats.\n    # Drop some fields that are already present in team_games table\n    drop(['home', 'gameDate', 'gameTimeUTC'], axis = 1),\n  on = ['dailyDataDate', 'gamePk', 'teamId'],\n  # Doing this as 'inner' join excludes spring training games, postponed games,\n  # etc. from original games table, but this may be fine for purposes here \n  how = 'inner'\n  )\nteam_date_stats_agg = (team_games_with_stats.\n  groupby(['dailyDataDate', 'teamId', 'gameType', 'oppId', 'oppName'], \n    as_index = False).\n  agg(\n    numGamesTeam = ('gamePk', 'nunique'),\n    winsTeam = ('teamWinner', 'sum'),\n    lossesTeam = ('oppWinner', 'sum'),\n    runsScoredTeam = ('teamScore', 'sum'),\n    runsAllowedTeam = ('oppScore', 'sum')\n    )\n   )\n# Prepare standings table for merge w\/ player digital engagement data\n# Pick only certain fields of interest from standings for merge\nstandings_selected_fields = (standings[['dailyDataDate', 'teamId', \n  'streakCode', 'divisionRank', 'leagueRank', 'wildCardRank', 'pct'\n  ]].\n  rename(columns = {'pct': 'winPct'})\n  )\n# Change column names to reflect these are all \"team\" standings - helps \n# to differentiate from player-related fields if\/when joining later\nstandings_selected_fields.columns = [\n  (col_value + 'Team') \n  if (col_value not in ['dailyDataDate', 'teamId'])\n    else col_value\n  for col_value in standings_selected_fields.columns.values\n  ]\nstandings_selected_fields['streakLengthTeam'] = (\n  standings_selected_fields['streakCodeTeam'].\n    str.replace('W', '').\n    str.replace('L', '').\n    astype(float)\n    )\n# Add fields to separate winning and losing streak from streak code\nstandings_selected_fields['winStreakTeam'] = np.where(\n  standings_selected_fields['streakCodeTeam'].str[0] == 'W',\n  standings_selected_fields['streakLengthTeam'],\n  np.nan\n  )\nstandings_selected_fields['lossStreakTeam'] = np.where(\n  standings_selected_fields['streakCodeTeam'].str[0] == 'L',\n  standings_selected_fields['streakLengthTeam'],\n  np.nan\n  )\nstandings_for_digital_engagement_merge = (pd.merge(\n  standings_selected_fields,\n  dates_with_info[['dailyDataDate', 'inSeason']],\n  on = ['dailyDataDate'],\n  how = 'left'\n  ).\n  # Limit down standings to only in season version\n  query(\"inSeason\").\n  # Drop fields no longer necessary (in derived values, etc.)\n  drop(['streakCodeTeam', 'streakLengthTeam', 'inSeason'], axis = 1).\n  reset_index(drop = True)\n  )\n#### Merge together various data frames to add date, player, roster, and team info ####\n# Copy over player engagement df to add various pieces to it\nplayer_engagement_with_info = nextDayPlayerEngagement.copy()\n# Take \"row mean\" across targets to add (helps with studying all 4 targets at once)\nplayer_engagement_with_info['targetAvg'] = np.mean(\n  player_engagement_with_info[['target1', 'target2', 'target3', 'target4']],\n  axis = 1)\n# Merge in date information\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  dates_with_info[['dailyDataDate', 'date', 'year', 'month', 'inSeason','seasonPart']],\n  on = ['dailyDataDate'],\n  how = 'left'\n  )\n# Merge in some player information\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  players[['playerId', 'playerName', 'DOB', 'mlbDebutDate', 'birthCity','birthStateProvince', 'birthCountry', 'primaryPositionName']],\n   on = ['playerId'],\n   how = 'left'\n   )\n# Merge in some player roster information by date\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  (rosters[['dailyDataDate', 'playerId', 'statusCode', 'status', 'teamId']].\n    rename(columns = {'statusCode': 'rosterStatusCode','status': 'rosterStatus','teamId': 'rosterTeamId'})\n    ),\n  on = ['dailyDataDate', 'playerId'],\n  how = 'left'\n  )\n# Merge in team name from player's roster team\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  (teams[['id', 'teamName']].\n    rename(columns = {'id': 'rosterTeamId','teamName': 'rosterTeamName'})\n    ),\n  on = ['rosterTeamId'],\n  how = 'left'\n  )\n# Merge in some player game stats (previously aggregated) from that date\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  player_date_stats_agg,\n  on = ['dailyDataDate', 'playerId'],\n  how = 'left'\n  )\n# Merge in team name from player's game team\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  (teams[['id', 'teamName']].\n    rename(columns = {'id': 'gameTeamId','teamName': 'gameTeamName'})\n    ),\n  on = ['gameTeamId'],\n  how = 'left'\n  )\n# Merge in some team game stats\/results (previously aggregated) from that date\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  team_date_stats_agg.rename(columns = {'teamId': 'gameTeamId'}),\n  on = ['dailyDataDate', 'gameTeamId'],\n  how = 'left'\n  )\n# Merge in player transactions of note on that date\n# Merge in some pieces of team standings (previously filter\/processed) from that date\nplayer_engagement_with_info = pd.merge(\n  player_engagement_with_info,\n  standings_for_digital_engagement_merge.\n    rename(columns = {'teamId': 'gameTeamId'}),\n  on = ['dailyDataDate', 'gameTeamId'],\n  how = 'left'\n  )\ndisplay(player_engagement_with_info)","6c107509":"player_engagement_with_info.info()","4e59b758":"player_engagement_with_info.to_pickle(\"player_engagement_with_info.pkl\")","c4f241ad":"t1_median = player_engagement_with_info[\"target1\"].median()\nt2_median = player_engagement_with_info[\"target2\"].median()\nt3_median = player_engagement_with_info[\"target3\"].median()\nt4_median = player_engagement_with_info[\"target4\"].median()","24391b08":"print(t1_median,t2_median,t3_median,t4_median)","66ba2874":"\"\"\"\nif 'kaggle_secrets' in sys.modules:  # only run while on Kaggle\n    import mlb\n\n    env = mlb.make_env()\n    iter_test = env.iter_test()\n\n    for (test_df, sample_prediction_df) in iter_test:\n    \n        # Example: unpack a dataframe from a json column\n        today_games = unpack_json(test_df['games'].iloc[0])\n    \n        # Make your predictions for the next day's engagement\n        sample_prediction_df['target1'] = 100.00\n    \n        # Submit your predictions \n        env.predict(sample_prediction_df)\n\n\n\"\"\"","c9c91640":"if 'kaggle_secrets' in sys.modules:  # only run while on Kaggle\n    import mlb","ba383cd1":"env = mlb.make_env()\niter_test = env.iter_test()","8a59fce8":"for (test_df, sample_prediction_df) in iter_test:\n    display(test_df)\n    display(sample_prediction_df)\n    break","7b8d2ecf":"sample_prediction_df[\"target1\"] = t1_median\nsample_prediction_df[\"target2\"] = t2_median\nsample_prediction_df[\"target3\"] = t3_median\nsample_prediction_df[\"target4\"] = t4_median\nsample_prediction_df","3518db64":"env.predict(sample_prediction_df)","d309502e":"for (test_df, sample_prediction_df) in iter_test:\n    display(test_df)\n    display(sample_prediction_df)\n    break","2f1515cf":"\"\"\"\nif 'kaggle_secrets' in sys.modules:  # only run while on Kaggle\n    import mlb\n\n    env = mlb.make_env()\n    iter_test = env.iter_test()\n\n    for (test_df, sample_prediction_df) in iter_test:\n    \n        # Example: unpack a dataframe from a json column\n        today_games = unpack_json(test_df['games'].iloc[0])\n    \n        # Make your predictions for the next day's engagement\n        sample_prediction_df['target1'] = 100.00\n    \n        # Submit your predictions \n        env.predict(sample_prediction_df)\n\n\n\"\"\"","7b9feae2":"# 2\u56de\u76ee\u306e\u63d0\u51fa\n\nsample_prediction_df[\"target1\"] = t1_median\nsample_prediction_df[\"target2\"] = t2_median\nsample_prediction_df[\"target3\"] = t3_median\nsample_prediction_df[\"target4\"] = t4_median\nenv.predict(sample_prediction_df)","f2260b3e":"# \u6b8b\u308a\u6700\u5f8c\u307e\u3067\n\nfor (test_df, sample_prediction_df) in iter_test:\n    \n        # Example: unpack a dataframe from a json column\n        #today_games = unpack_json(test_df['games'].iloc[0])\n    \n        # Make your predictions for the next day's engagement\n        sample_prediction_df[\"target1\"] = t1_median\n        sample_prediction_df[\"target2\"] = t2_median\n        sample_prediction_df[\"target3\"] = t3_median\n        sample_prediction_df[\"target4\"] = t4_median\n    \n        # Submit your predictions \n        env.predict(sample_prediction_df)","f1454f76":"# 3.10 playerTwitterFollowers\n\u9078\u624b\u306eTwitter\u30d5\u30a9\u30ed\u30ef\u30fc\u6570","f7eeb162":"# 3.2 games\n\u8a66\u5408\u60c5\u5831  \n\u521d\u3081\u306e\u30c7\u30fc\u30bf\u304c2018-2-23\u3067\u3053\u306e\u65e5\u304b\u3089'gameType'\u304cS\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u6625\u5b63\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u308f\u304b\u308b\n","60dbf5c0":"# 3.8 awards\n\u9078\u624b\u306e\u8868\u5f70\u60c5\u5831","5eb1e409":"# 2.\u3069\u3093\u306a\u60c5\u5831\u304b\u3089\u63a8\u6e2c\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b","e257b0bf":"# 1.\u4f55\u3092\u4e88\u6e2c\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b","01a8102d":"# 3.7 standings\n\u30c1\u30fc\u30e0\u306e\u9806\u4f4d\u60c5\u5831\u3067\u516830\u30c1\u30fc\u30e0\u5206\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b","fea44873":"# 3.4 playerBoxScores\n\u9078\u624b\u306e\u8a66\u5408\u6210\u7e3e\n\u8a66\u5408\u3054\u3068\u306b\u96c6\u8a08\u3055\u308c\u3066\u3044\u3066\u30012018-3-29\u304c\u521d\u3081\u3066\u306e\u30c7\u30fc\u30bf\u3060\u304b\u3089\u3001\u3053\u306e\u65e5\u304b\u3089\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u304c\u59cb\u307e\u3063\u305f\u3068\u308f\u304b\u308b\u3002","30790c59":"# 3.6 transactions\n\u9078\u624b\u3084\u30c1\u30fc\u30e0\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3  \n\u4e00\u884c\u76ee\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u9078\u624b\u306e\u30c8\u30ec\u30fc\u30c9\u60c5\u5831\u3060\u3068\u308f\u304b\u308b\u3002","41f3c2a1":"# 3.5 teamBoxScores\n\u30c1\u30fc\u30e0\u3054\u3068\u306e\u8a66\u5408\u60c5\u5831  \n\u305d\u306e\u65e5\u306b\u884c\u308f\u308c\u308b\u8a66\u5408\u6570\u306f\u7570\u306a\u308b\u305f\u3081\u3001\u884c\u6570\u304c\u65e5\u306b\u3088\u3063\u3066\u9055\u3046","c592cb85":"# 3.11 teamTwitterFollowers\n\u5168\uff13\uff10\u30c1\u30fc\u30e0\u516c\u5f0fTwitter\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u30d5\u30a9\u30ed\u30ef\u30fc\u6570","5f1aa1f4":"# 3.9 events\n\u30d5\u30a3\u30fc\u30eb\u30c9\u4e0a\u3067\u8d77\u304d\u305f\u51fa\u6765\u4e8b\u306e\u30c7\u30fc\u30bf","2bfcaf09":"# 0.\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","c9e06519":"# 3.train.csv","c1af3e85":"# 3.1 nextDayPlayerEngagement\n\u76ee\u7684\u5909\u6570(\u4e88\u6e2c\u3057\u305f\u3044\u60c5\u5831)\u3092\u542b\u3093\u3060\u30c7\u30fc\u30bf  \n\u3053\u306etarget1~4\u3092\u4e88\u6e2c\u3057\u307e\u3059","19aa1d2e":"# 3.3 rosters\n\u30c1\u30fc\u30e0\u540d\u7c3f\u60c5\u5831  \n\u30b1\u30ac\u3084\u30de\u30a4\u30ca\u30fc\u3078\u306e\u964d\u683c\u60c5\u5831\u306a\u3069\u78ba\u8a8d\u3067\u304d\u308b","85ec86ca":"\u53c2\u8003\u6587\u732e  \nhttps:\/\/www.kaggle.com\/fumiyakomatsu\/explanation-of-train-csv-each-variable-ver\nhttps:\/\/www.kaggle.com\/chumajin\/eda-of-mlb-for-starter-version","41c7fb01":"# 4.Data Merge"}}