{"cell_type":{"9c8f6ad5":"code","9b1af35c":"code","4373cdc9":"code","4b5c28a8":"code","149168a3":"code","0ecb2525":"code","76f0c3c4":"code","7ac9d5f7":"code","d07c9734":"code","dd345a80":"code","edc2a552":"code","902fc365":"code","b0579539":"code","b7c1ddb8":"code","c6ef3ced":"code","a03fc7ed":"code","dec02e56":"code","47e641e8":"code","940b78ff":"code","622b9e14":"code","b0a6195d":"markdown","9fd2d657":"markdown","5237129a":"markdown","f88f0eaa":"markdown","e048a4b2":"markdown","18606404":"markdown","2e6339ac":"markdown","72bf5681":"markdown","9fa1ca3d":"markdown","4d5da475":"markdown","183f26e7":"markdown","f68f91d5":"markdown","025063c3":"markdown","59f70bbc":"markdown","fd70baca":"markdown","de0797ea":"markdown","0133054c":"markdown","9c0807b3":"markdown"},"source":{"9c8f6ad5":"!pip install pycaret","9b1af35c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport seaborn as sns\nimport warnings\nfrom pandas_profiling import ProfileReport \nfrom pycaret.regression import *\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4373cdc9":"df = pd.read_csv('..\/input\/hackathon\/task_2-owid_covid_data-21_June_2020.csv')\ndf.head()","4b5c28a8":"report_df = ProfileReport(df)\nreport_df","149168a3":"# Numerical features\nNumerical_feat = [feature for feature in df.columns if df[feature].dtypes != 'O']\nprint('Total numerical features: ', len(Numerical_feat))\nprint('\\nNumerical Features: ', Numerical_feat)","0ecb2525":"index_int_float = ['aged_65_older', 'aged_70_older', 'total_tests', 'cvd_death_rate', 'diabetes_prevalence', 'extreme_poverty', 'female_smokers', 'gdp_per_capita', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy', 'male_smokers', 'new_cases', 'new_deaths_per_million', 'new_tests_smoothed_per_thousand', 'new_tests_smoothed', 'new_tests', 'new_tests_per_thousand', 'population', 'population_density', 'stringency_index', 'total_cases_per_million', 'new_cases_per_million', 'total_deaths_per_million', 'total_tests_per_thousand', 'new_tests_per_thousand', 'total_deaths', 'new_deaths', 'median_age']      \n\nplt.figure(figsize=[20,12])\ni = 1\nfor col in index_int_float :\n    plt.subplot(4,10,i)\n    sns.violinplot(x=col, data= df, orient='v')\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()","76f0c3c4":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","7ac9d5f7":"index_str = ['iso_code', 'continent', 'location', 'date', 'tests_units']\n\nplt.figure(figsize=[30,10])\ni = 1\nfor col in index_str :\n    plt.subplot(4,10,i)\n    sns.scatterplot(x=col, y = 'total_tests' ,data= df)\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()","d07c9734":"df.dtypes","dd345a80":"int_features = ['population']\n        \nfloat_features = ['total_cases', 'new_cases', 'total_deaths', 'new_deaths', 'total_cases_per_million', 'new_cases_per_million', 'total_deaths_per_million', 'new_deaths_per_million', 'new_tests', 'total_tests_per_thousand', 'new_tests_per_thousand', 'new_tests_smoothed', 'new_tests_smoothed_per_thousand', 'stringency_index', 'population_density', 'median_age', 'aged_65_older', 'aged_70_older', 'gdp_per_capita', 'extreme_poverty', 'cvd_death_rate', 'diabetes_prevalence', 'female_smokers', 'male_smokers', 'handwashing_facilities', 'hospital_beds_per_thousand', 'life_expectancy']\n\nobj_features = ['iso_code', 'continent', 'location', 'date', 'tests_units']\n\nexp_reg = setup(df, #Train Data\n                target = 'total_tests',  #Target\n                categorical_features = obj_features, # Categorical Features\n                numeric_features = int_features + float_features, # Numeric Features\n                normalize = True, # Normalize Dataset\n                remove_outliers = True, # Remove 5% Outliers\n                remove_multicollinearity = True, # Remove Multicollinearity\n                silent = True # Process Automation\n               )","edc2a552":"compare_models(blacklist = ['tr', 'catboost'], sort = 'RMSLE')","902fc365":"model_br = create_model('br')\nmodel_lightgbm = create_model('lightgbm')\nmodel_xgboost = create_model('xgboost')\nmodel_ridge = create_model('ridge')","b0579539":"tuned_br = tune_model('br')\ntuned_lightgbm = tune_model('lightgbm')\ntuned_xgboost = tune_model('xgboost')\ntuned_ridge = tune_model('ridge')","b7c1ddb8":"plot_model(tuned_br, plot = 'learning')","c6ef3ced":"plot_model(tuned_lightgbm, plot = 'learning')","a03fc7ed":"plot_model(tuned_xgboost, plot = 'learning')","dec02e56":"plot_model(tuned_ridge, plot = 'learning')","47e641e8":"blender = blend_models(estimator_list = [tuned_br, tuned_lightgbm, tuned_xgboost, tuned_ridge])","940b78ff":"display(plot_model(blender, plot = 'learning'))","622b9e14":"predictions = predict_model(blender, data = df)\ndf['total_tests'] = np.expm1(predictions['Label'])\ndf.to_csv('submission.csv',index=False)","b0a6195d":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQzx8LsPCCdFMNWpcDIKJ-dHwhGJLog0PpQkQ&usqp=CAU)\ncheck-in.co","9fd2d657":"#Display Learning Curve","5237129a":"#Display Learning Curve for Blending","f88f0eaa":"#Ridge Regression","e048a4b2":"#Codes from Mehdi G https:\/\/www.kaggle.com\/servietsky\/eazy-way-house-price-pycaret","18606404":"#Models Tuning","2e6339ac":"#Bayesian Ridge","72bf5681":"#Numerical Features\nI'd rather copy from the list than from Pandas Profiling ","9fa1ca3d":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","4d5da475":"#Categorical Features","183f26e7":"#The target column shouln't be in the list, only in TARGET.","f68f91d5":"#Create and Train Models","025063c3":"#Extreme Gradient Boosting","59f70bbc":"#Gradient Boosting Regressor? Why is written lightgbm?:)","fd70baca":"#Compare Models","de0797ea":"#Install Pycaret before All the rest.","0133054c":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRDexVxIEuN0ADsutTNg11CP1fz8A-VmUqIxA&usqp=CAU)\nenvironmentaljusticetv.wordpress.com","9c0807b3":"#Blend Models"}}