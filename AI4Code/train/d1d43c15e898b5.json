{"cell_type":{"bc775f97":"code","6bd19ecb":"code","b754b2b2":"code","67ab7ccc":"code","96c59bfa":"code","0e023c2c":"code","b3c6353c":"code","dc881590":"code","354f1342":"code","3b6c00b1":"code","f69ad9c9":"code","5700a052":"code","6b729ea1":"code","7ba6a8e5":"code","99ac64bf":"code","1677ae50":"code","289022d4":"code","463da9ee":"code","bee04fe8":"code","8f300575":"code","168cd384":"code","d60637a0":"code","3b5d6d2a":"code","4eb04fd7":"code","42292acd":"code","3bf876dc":"code","3ed8e713":"code","ceabac44":"code","07276ef0":"code","6952fd3c":"code","94bc3900":"code","05162395":"code","80d17dce":"code","2cc87a8b":"code","41f0cf98":"code","df92b44a":"code","096ff5b2":"code","e6b8503f":"code","5beca8ad":"code","01a93e39":"code","5e024e2f":"code","37e47b45":"code","1e1a9d03":"code","0697a421":"code","22be04ad":"markdown","06d13d10":"markdown","2a8d6cc0":"markdown","23586381":"markdown","70e44b33":"markdown","e16ceabc":"markdown","37a187f1":"markdown","9104e25a":"markdown","3d25ef64":"markdown","8cab1c05":"markdown","4b181361":"markdown","97cc2bb1":"markdown"},"source":{"bc775f97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_style('whitegrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bd19ecb":"#load the data\n\ntrain = pd.read_csv('..\/input\/titanic\/train.csv', index_col = \"PassengerId\")\n\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\", index_col = \"PassengerId\")\n\ndisplay(train.head(), train.tail(),test.head())","b754b2b2":"#What is the size of our datasets?\n\ndisplay(train.shape,test.shape)\n\n#891 observations for the training set, 418 for the test set","67ab7ccc":"#Investigate the data for missing values:\n\ndisplay(train.isnull().sum(), test.isnull().sum())\n\n#3 columns have missing datas in the train set: Age: 177 values, we will replace them by the mean age\n                               #Cabin: 687 values out of 891, we will drop this column\n                               #Embarked: 2 missing values, categorical variable: will replace by most_frequent\n        \n#No target data missing\n\n#3 columns have missing data in the test set: Age: 86 values, will replace by mean age\n                                             #Fare: 1 value: will replace by the mean\n                                             #Cabin: 327 values out of 418, we will drop this column","96c59bfa":"#Categorical features\ntrain.select_dtypes(include = ['object']).describe()","0e023c2c":"#Numerical features\ntrain.drop('Survived', axis = 1).select_dtypes(exclude = ['object']).describe()","b3c6353c":"#Target column\ntarget = train.Survived.copy()\ntarget.describe()","dc881590":"plt.figure(figsize = (10,7));\nsns.countplot(x = train.Survived, palette = 'Blues_r');","354f1342":"#Numerical variables, repartition\n\nfig = plt.figure(figsize = (15,15))\nfig.add_subplot(3,2,1)\nsns.countplot(x = train.Pclass, color = 'royalblue')\nfig.add_subplot(3,2,2)\nsns.histplot(train.Age, kde = True, color = 'royalblue')\nfig.add_subplot(3,2,3)\nsns.countplot(x = train.SibSp, color = 'royalblue')\nfig.add_subplot(3,2,4)\nsns.countplot(x = train.Parch, color = 'royalblue')\nfig.add_subplot(3,2,5)\nsns.histplot(x = train.Fare, kde = True, color = 'royalblue')","3b6c00b1":"#Fare outliers\ntrain.Fare.sort_values(ascending = False).head(5)","f69ad9c9":"#They all survived, money actually helps?\ntrain.loc[train.Fare == train.Fare.max()]","5700a052":"train.Age.sort_values(ascending = False).head()","6b729ea1":"train.loc[train.Age == train.Age.max()]","7ba6a8e5":"#Let's plot boxplots to get a sense of outliers\n\nfig = plt.figure(figsize = (15,15))\nfig.add_subplot(3,2,1)\nsns.boxplot(x = train.Pclass)\nfig.add_subplot(3,2,2)\nsns.boxplot(x = train.Age)\nfig.add_subplot(3,2,3)\nsns.boxplot(x = train.SibSp)\nfig.add_subplot(3,2,4)\nsns.boxplot(x = train.Parch)\nfig.add_subplot(3,2,5)\nsns.boxplot(x = train.Fare)","99ac64bf":"#Influence of Class and family for the survival\n\nfig = plt.figure(figsize = (15,15))\nfig.add_subplot(2,2,1)\nsns.countplot(x = train.Pclass, palette = 'Blues_r', hue = train.Survived)\nfig.add_subplot(2,2,2)\nsns.countplot(x = train.SibSp, palette = 'Blues_r', hue = train.Survived)\nfig.add_subplot(2,2,3)\nsns.countplot(x = train.Parch, palette = 'Blues_r', hue = train.Survived)","1677ae50":"#What are the correlations between our variables?\nplt.figure(figsize = (10,7))\nsns.heatmap(train.corr(), annot = True, cmap = 'Blues_r', fmt = '.2f')","289022d4":"fig = plt.figure(figsize = (12,7))\nfig.add_subplot(1,2,1)\nsns.countplot(x = train.Sex, palette = 'Blues_r', hue = train.Survived)\nfig.add_subplot(1,2,2)\nsns.countplot(x = train.Embarked, palette = 'Blues_r', hue = train.Survived)","463da9ee":"print(\"Class of Cherbourg Passengers\")\nprint(train[train.Embarked == 'C'].Pclass.value_counts())\nprint(\"Class of Southampton Passengers\")\nprint(train[train.Embarked == 'S'].Pclass.value_counts())\nprint(\"Class of Queenstown Passengers\")\nprint(train[train.Embarked == 'Q'].Pclass.value_counts())","bee04fe8":"train[['Name','Ticket','Cabin']].nunique()","8f300575":"#Split the data into features and target\n\ny = train.Survived.copy()\n\nX = train.drop(['Survived','Ticket'], axis = 1).copy()\n\n#Load the test data\nX_test = test.drop('Ticket', axis = 1).copy()","168cd384":"#Let's calculate the different median age according to the class and the sex for our training set\n\"\"\"\nmedian1m = X[(X.Pclass == 1) & (X.Sex == 'male')].Age.median()\nmedian1f = X[(X.Pclass == 1) & (X.Sex == 'female')].Age.median()\n\nmedian2m = X[(X.Pclass == 2) & (X.Sex == 'male')].Age.median()\nmedian2f = X[(X.Pclass == 2) & (X.Sex == 'female')].Age.median()\n\nmedian3m = X[(X.Pclass == 3) & (X.Sex == 'male')].Age.median()\nmedian3f = X[(X.Pclass == 3) & (X.Sex == 'female')].Age.median()\n\"\"\"","d60637a0":"\"\"\"\nX.loc[(X.Pclass == 1)&(X.Sex == 'male'),'Age'] = X.loc[(X.Pclass == 1)&(X.Sex == 'male'),'Age'].fillna(median1m)\nX.loc[(X.Pclass == 1)&(X.Sex == 'female'),'Age'] = X.loc[(X.Pclass == 1)&(X.Sex == 'female'),'Age'].fillna(median1f)\n\n\nX.loc[(X.Pclass == 2)&(X.Sex == 'male'),'Age'] = X.loc[(X.Pclass == 2)&(X.Sex == 'male'),'Age'].fillna(median2m)\nX.loc[(X.Pclass == 2)&(X.Sex == 'female'),'Age'] = X.loc[(X.Pclass == 2)&(X.Sex == 'female'),'Age'].fillna(median2f)\n\nX.loc[(X.Pclass == 3)&(X.Sex == 'male'),'Age'] = X.loc[(X.Pclass == 3)&(X.Sex == 'male'),'Age'].fillna(median3m)\nX.loc[(X.Pclass == 3)&(X.Sex == 'female'),'Age'] = X.loc[(X.Pclass == 3)&(X.Sex == 'female'),'Age'].fillna(median3f)\n\"\"\"","3b5d6d2a":"X[X.Embarked.isnull()]","4eb04fd7":"#Filling missing cabin values by None\nX.Cabin.fillna('None', inplace = True)\nX_test.Cabin.fillna('None', inplace = True)\n\n#Filling missing Age values by the median age because we have a skewed distribution\nX.Age.fillna(X.Age.median(), inplace = True)\nX_test.Age.fillna(X_test.Age.median(), inplace = True)\n\n#There is 1 missing fare, belonging to a 3rd class passenger embarked in Southampton. Given some passengers have\n#a fare of 0, probably crew members, I assume this one was one too.\nX_test.Fare.fillna(0, inplace = True)\n\n#After checking, the 2 passengers with missing data for embarkation ports embarked from Southampton\nX.Embarked.fillna('S', inplace = True)","42292acd":"#Dropping Age outliers\nage_index = X.loc[X.Age == 80].index\n\nX.drop(age_index, axis = 0, inplace = True)\ny.drop(age_index, axis = 0, inplace = True)","3bf876dc":"#Dropping Fares outliers\nfare_index = X.loc[X.Fare == 512.3292].index\n\nX.drop(fare_index, axis = 0, inplace = True)\ny.drop(fare_index, axis = 0, inplace = True)","3ed8e713":"#We are going to use the cabin letter and fill unknown values with u for unknown\n\nX['CabinLetter'] = X.Cabin.str.split().apply(lambda x: x[-1][0].strip().lower() if x[0] != 'None' else 'u')\nX_test['CabinLetter'] = X_test.Cabin.str.split().apply(lambda x: x[-1][0].strip().lower() if x[0] != 'None' else 'u')\n\ndel X['Cabin'],X_test['Cabin']","ceabac44":"#preprocess cabin letter\n\ncl_col = pd.get_dummies(X[\"CabinLetter\"])\ncl_col_test = pd.get_dummies(X_test[\"CabinLetter\"])\ncl_col_test_t = pd.Series(0,index = X_test.index, name = 't') #to add the column 't' to the cabin letter columns\n\nX = pd.concat([X,cl_col], axis = 1)\nX_test = pd.concat([X_test,cl_col_test, cl_col_test_t], axis = 1)\n\ndel X['CabinLetter'],X_test['CabinLetter']","07276ef0":"#### I want to use the names of the people to extract their title and assign them a social status\n\ndef get_social_status(x):\n    i = x.find(',')+2\n    j = x.find('.')\n    if x[i:j]=='Mr':\n        return 'Mr'    \n    elif x[i:j]=='Mme' or x[i:j]== 'Ms' or x[i:j]== 'Mrs':\n        return 'Mrs' \n    elif x[i:j]=='Master':\n        return 'Master'\n    elif x[i:j]=='Mlle' or x[i:j]=='Miss':\n        return 'Miss'\n    elif x[i:j]=='Capt' or x[i:j]=='Col' or x[i:j]== 'Major' or x[i:j]== 'Dr' or x[i:j]== 'Rev':\n        return 'Officer'\n    else:\n        return 'Royalty'\n\nX['Social_Status'] = X.Name.apply(get_social_status)\nX_test['Social_Status'] = X_test.Name.apply(get_social_status)\n\ndel X['Name'],X_test['Name']","6952fd3c":"#preprocess Social Status\n\nss_col = pd.get_dummies(X['Social_Status'])\nss_col_test = pd.get_dummies(X_test['Social_Status'])\n\nX = pd.concat([X,ss_col], axis = 1)\nX_test = pd.concat([X_test,ss_col_test], axis = 1)\n\ndel X['Social_Status'], X_test['Social_Status']","94bc3900":"#Let's try to create a feature relative to the family size, to see if our assumption about middle sized family\n#can hep the prediction\n\nX['Family_Size'] = X.SibSp + X.Parch + np.ones(len(X))\nX_test['Family_Size'] = X_test.SibSp + X_test.Parch + np.ones(len(X_test))\n\nX.drop(\"Parch\", axis = 1, inplace = True)\nX_test.drop(\"Parch\", axis = 1, inplace = True)\n\ndef family_size(x):\n    if x==1:\n        return \"no family\"\n    elif x==2 or x==3 or x==4:\n        return \"medium\"\n    else:\n        return \"large\"\n\nX.Family_Size = X.Family_Size.apply(family_size)\nX_test.Family_Size = X_test.Family_Size.apply(family_size)","05162395":"#preprocess family size\n\nfs_col = pd.get_dummies(X[\"Family_Size\"])\nfs_col_test = pd.get_dummies(X_test[\"Family_Size\"])\n\nX = pd.concat([X,fs_col], axis = 1)\nX_test = pd.concat([X_test,fs_col_test], axis = 1)\n\ndel X['Family_Size'], X_test['Family_Size']","80d17dce":"#preprocess Sex\n\nsex_col = pd.get_dummies(X.Sex)\nsex_col_test = pd.get_dummies(X_test.Sex)\n\nX = pd.concat([X,sex_col], axis = 1)\nX_test = pd.concat([X_test,sex_col_test], axis = 1)\n\ndel X['Sex'], X_test['Sex']","2cc87a8b":"#preprocess Embarked\n\nembarked_col = pd.get_dummies(X.Embarked)\nembarked_col_test = pd.get_dummies(X_test.Embarked)\n\nX = pd.concat([X,embarked_col], axis = 1)\nX_test = pd.concat([X_test,embarked_col_test], axis = 1)\n\ndel X['Embarked'], X_test['Embarked']","41f0cf98":"#I am going to create categories by age to create a new column instead of the age column\n\ndef ageCat(x):\n    if x<1:\n        return 'infant'\n    elif (x>=1 and x<=11):\n        return 'child'\n    elif (x>=12 and x <=17):\n        return 'teen'\n    elif (x>=18 and x <=64):\n        return 'adult'\n    else:\n        return 'elder'\n    \nX['AgeGroup'] = X.Age.apply(ageCat)\nX_test['AgeGroup'] = X_test.Age.apply(ageCat)\n\ndel X['Age'], X_test['Age']","df92b44a":"#preprocess AgeGroup\n\nage_col = pd.get_dummies(X.AgeGroup)\nage_col_test = pd.get_dummies(X_test.AgeGroup)\n\nX = pd.concat([X,age_col], axis = 1)\nX_test = pd.concat([X_test,age_col_test], axis = 1)\n\ndel X['AgeGroup'], X_test['AgeGroup']","096ff5b2":"X.shape","e6b8503f":"#define the model\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.ensemble import RandomForestClassifier\n\n\"\"\"\nrf = RandomForestClassifier(random_state = 1)\n\nrf_params = {'random_state': [1],\n             'max_depth': [15,16,17,18],\n             'max_features': [13,14,15,16],\n             'min_samples_leaf': [2],\n             'min_samples_split': [4,5,6],\n             'n_estimators': [90,100]}\n\ngrid = GridSearchCV(rf, \n                    rf_params,\n                    cv = 10,   \n                    n_jobs = -1)\n\ngrid.fit(X, y)\n\"\"\"","5beca8ad":"#grid.best_params_","01a93e39":"from sklearn.model_selection import cross_val_score\n\nbest_params = {'max_depth': 16,\n 'max_features': 15,\n 'min_samples_leaf': 2,\n 'min_samples_split': 4,\n 'n_estimators': 100,\n 'random_state': 1}\n\n\n#rf = RandomForestClassifier(**grid.best_params_)\nrf = RandomForestClassifier(**best_params)\n\n\ncv_results = cross_val_score(rf, X, y, cv = 10)\n\nprint(f'All results: {cv_results} \\n\\n' +\n      f'Mean: {cv_results.mean()} \\n\\n' +\n      f'Std: {cv_results.std()}')","5e024e2f":"rf.fit(X,y)","37e47b45":"#Let's calculate the different median age according to the class and the sex for our test set\n\"\"\"\nmedian1mT = X_test[(X_test.Pclass == 1) & (X_test.Sex == 'male')].Age.median()\nmedian1fT = X_test[(X_test.Pclass == 1) & (X_test.Sex == 'female')].Age.median()\n\nmedian2mT = X_test[(X_test.Pclass == 2) & (X_test.Sex == 'male')].Age.median()\nmedian2fT = X_test[(X_test.Pclass == 2) & (X_test.Sex == 'female')].Age.median()\n\nmedian3mT = X_test[(X_test.Pclass == 3) & (X_test.Sex == 'male')].Age.median()\nmedian3fT = X_test[(X_test.Pclass == 3) & (X_test.Sex == 'female')].Age.median()\n\"\"\"","1e1a9d03":"\"\"\"\nX_test.loc[(X_test.Pclass == 1)&(X_test.Sex == 'male'),'Age'] = X_test.loc[(X_test.Pclass == 1)&(X_test.Sex == 'male'),'Age'].fillna(median1mT)\nX_test.loc[(X_test.Pclass == 1)&(X_test.Sex == 'female'),'Age'] = X_test.loc[(X_test.Pclass == 1)&(X_test.Sex == 'female'),'Age'].fillna(median1fT)\n\nX_test.loc[(X_test.Pclass == 2)&(X_test.Sex == 'male'),'Age'] = X_test.loc[(X_test.Pclass == 2)&(X_test.Sex == 'male'),'Age'].fillna(median2mT)\nX_test.loc[(X_test.Pclass == 2)&(X_test.Sex == 'female'),'Age'] = X_test.loc[(X_test.Pclass == 2)&(X_test.Sex == 'female'),'Age'].fillna(median2fT)\n\nX_test.loc[(X_test.Pclass == 3)&(X_test.Sex == 'male'),'Age'] = X_test.loc[(X_test.Pclass == 3)&(X_test.Sex == 'male'),'Age'].fillna(median3mT)\nX_test.loc[(X_test.Pclass == 3)&(X_test.Sex == 'female'),'Age'] = X_test.loc[(X_test.Pclass == 3)&(X_test.Sex == 'female'),'Age'].fillna(median3fT)\n\"\"\"","0697a421":"final_preds = rf.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': X_test.index,\n                       'Survived': final_preds})\noutput.to_csv('submission_RandomForest.csv', index=False)","22be04ad":"# 2. Visualise the data","06d13d10":"# 2.1. Target and numerical data","2a8d6cc0":"There is no more missing values now in both sets","23586381":"# 2.2. Categorical Data","70e44b33":"The high cardinality for the Name, Ticket, Cabin features means we will have to drop these features. However, we might be able to engineer some features from the informations contained in these variables.","e16ceabc":"1. We observed a high correlation between the passenger class and the fare, as expected.\n2. We also observe some correlation between the age and the passenger class, suggesting older people tend to be in higher passenger class.\n3. We observe some correlation between survival and the passenger class, suggesting once again that the passenger class can be an important feature to predict the survival of a passenger.","37a187f1":"# 1. Discover the data","9104e25a":"# Feature Engineering and One-Hot-Encoding","3d25ef64":"1. Most of the passengers are from class 3.\n2. Most of them travel alone, a few with 1 sibling or a spouse while some others with 1 to 2 parents or children. Large families are pretty scarce.\n3. The Age distribution is positively skewed with very few passengers over 60. One outlier is 80 while the next oldest is 74\n4. The Fare distribution is very positively skewed with most of the fares below 100 and 3 outliers over 500! (Further investigation may indicate that this is a group ticket... I don't know how to treat that much)\n","8cab1c05":"1. More men travelled but women had better chance of survival\n2. The bulk of the travellers embarked in Southampton. Travellers from Cherbourg had a higher chance to survive. This makes me wonder if there is a correlation between the passenger class and the embarkment port.","4b181361":"As expected, passengers from Cherbourg were in majority in class 1, which could explain their better chance of survival.","97cc2bb1":"1. We see that there is a class influence on survival: the lower the class, the lesser the chance of survival\n2. From the 2 others family graphs, we could infer that middle size families have somewhat better chance of survival that alone travellers and large families"}}