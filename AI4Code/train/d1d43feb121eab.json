{"cell_type":{"b1b18510":"code","71592c34":"code","bbb91234":"code","0615afb5":"code","3f775f0a":"code","47833f7d":"code","b5c30491":"code","182fdbb2":"code","9afa97c3":"code","8093b43a":"code","22c1e9e4":"code","b83d0c6b":"code","6fd0cfc1":"code","adf665fa":"markdown","6cacc018":"markdown","53e5b9c2":"markdown","67926d7c":"markdown"},"source":{"b1b18510":"\"\"\"\n    Please ignore some typos, my english is not very good =)\n\"\"\"\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom datetime import datetime\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","71592c34":"df = pd.read_csv('..\/input\/glasses.csv', nrows=200000) ## GPU off\n#df = pd.read_csv('..\/input\/glasses.csv')         ## GPU on\ndf.head()","bbb91234":"df['date'] = df['DATE'].apply(lambda x: datetime.strptime(x, '%Y\/%m\/%d %H:%M:%S.%f'))\ndf['seconds'] = df['date'].apply(lambda x: x-df['date'][0])\ndf['seconds'] = df['seconds'].apply(lambda x: x.value\/10**9)\ndf.head()","0615afb5":"df.shape","3f775f0a":"acc_x = np.array(df['ACC_X'].apply(lambda x: x**2))\nacc_y = np.array(df['ACC_Y'].apply(lambda x: x**2))\nacc_z = np.array(df['ACC_Z'].apply(lambda x: x**2))\ntime = np.array(df['seconds'])","47833f7d":"## Reshape the variable\nh=200\ntime = time.reshape((int(time.shape[0]\/h),h))\nacc_x = acc_x.reshape((int(acc_x.shape[0]\/h),h))\nacc_y = acc_y.reshape((int(acc_y.shape[0]\/h),h))\nacc_z = acc_z.reshape((int(acc_z.shape[0]\/h),h))","b5c30491":"\"\"\"\n    Integration by the trapezium method\n\"\"\"\n\ndt = []\nenergy = []\nt0 = 0\nfor i in range(h):\n    t = float(time[-1,i] - time[0,i])#\/10**9\n    t0 += t    \n    dt.append(t0)\n    e = np.trapz(acc_x[:,i], x=time[:,i]) + np.trapz(acc_y[:,i], x=time[:,i]) + np.trapz(acc_z[:,i], x=time[:,i])\n    energy.append(e)\n    \nenergy = np.array(energy)\ndt = np.array(dt)","182fdbb2":"energy_norm = energy\/energy.max()\nn0 = 100\nnf = 145\nplt.plot(dt[:n0], energy_norm[:n0], c='blue')\nplt.plot(dt[n0:nf], energy_norm[n0:nf], c='red')\nplt.plot(dt[nf:], energy_norm[nf:], c='blue')\nplt.ylabel('$Energy$ $Expendire$ (arb. units)', fontsize=12)\nplt.xlabel('$time(s)$', fontsize=12)\nplt.show()","9afa97c3":"sns.distplot(energy_norm)\nplt.show()","8093b43a":"serie = pd.Series(energy_norm)\n\npd.plotting.lag_plot(serie, lag=1)\nplt.xlabel('Energy (t)', fontsize=12)\nplt.ylabel('Energy (t+1)', fontsize=12)\nplt.show()","22c1e9e4":"values = pd.DataFrame(serie.values)\ndataframe = pd.concat([values.shift(1), values], axis=1)\ndataframe.columns = ['t-1', 't']\nresult = dataframe.corr()\nprint(result)","b83d0c6b":"from sklearn.ensemble import IsolationForest\n\nn = 70\nenergy_dt = np.array(dataframe.iloc[1:])\n\nmodel = IsolationForest()       ## Model\nmodel.fit(energy_dt[:n])        ## Fit model\npred = model.predict(energy_dt) ## Predict","6fd0cfc1":"color = ['blue' if p==1 else 'red' for p in pred]\n\nplt.scatter(energy_dt[:,0], energy_dt[:,1], c=color)\nplt.xlabel('Energy (t)')\nplt.ylabel('Energy (t+1)')\nplt.show()","adf665fa":"Energy expenditure is the sum of the square integration of the person's dynamic acceleration during the specified time\n\n$Energy$ $Expendire = \\int_{t_i}^{t_f} \\left(\\left|a_x(t)\\right|^2 + \\left|a_y(t)\\right|^2 + \\left|a_z(t)\\right|^2\\right)dt$\n\nfrom this variable we can identify patterns related to the energy spent, which is related to the rhythm of this person's movement.","6cacc018":"**Any questions or suggestions that will improve this notebook is welcome.**","53e5b9c2":"the red curve shows that there was a change in energy expenditure, which corresponds to a change in the state of the person's movement. this person was roving steadily and then began a more rapid movement in this short time interval.","67926d7c":"We will use the isolation forest method to identify this variation of energy expenditure to identify when there was a change in energy expenditure. For this I will consider that the first n points refers to the \"normal\" situation and outside this pattern refers to an anomaly, ie the person started a movement accelerated compared to what the model was trained."}}