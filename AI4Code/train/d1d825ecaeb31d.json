{"cell_type":{"33b72ffe":"code","6f967ab7":"code","421bdd3a":"code","25dea43f":"code","a53007e2":"code","296df5cf":"code","8774ff21":"code","4345c83c":"code","a55ba5ed":"code","ff1c7b51":"code","e8d7b893":"code","77072790":"code","f5e4218d":"code","4c2d1838":"code","e1932a37":"code","8008dd8e":"code","8c544f11":"code","59a961c9":"code","177b912b":"code","8d5ac48c":"code","fe1dcf50":"code","9c8e48d3":"markdown","82d6b90e":"markdown","3f289422":"markdown","e99f5b8c":"markdown","d020a856":"markdown","e2817314":"markdown","30bf955f":"markdown","338ad3fb":"markdown","06d39d9a":"markdown","12f593b7":"markdown","69e997ca":"markdown","7b7fa27a":"markdown","66629898":"markdown","31cdf439":"markdown","d003379b":"markdown","b126da54":"markdown"},"source":{"33b72ffe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\nfrom datetime import date\nimport holidays\n\n\n\nprint(\"Setup Complete\")\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f967ab7":"train_original = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest_original  = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\ntrain=train_original.copy()\ntest=test_original.copy()","421bdd3a":"print('---------train data types is here-----------')\nprint(train.dtypes)\nprint('---------train data shape is here-----------')\nprint(train.shape)\nprint('---------test data types is here-----------')\nprint(test.dtypes)\nprint('---------test data shape is here-----------')\nprint(test.shape)\nprint('---------train data nique is here-----------')\nprint(train.nunique())\nprint('---------test data nique is here-----------')\nprint(test.nunique())","25dea43f":"for df in [train, test]:\n    df[['year', 'month','day']] = (df[\"date\"].str.split(\"-\", expand=True))\n    df[['year', 'month','day']] = df[['year', 'month','day']].astype(int)\n    df['date'] = pd.to_datetime(df.date)\n    df['day_of_week'] = df[\"date\"].dt.weekday\n    df['country'], country = df['country'].factorize()\n    df['store'], store = df['store'].factorize()\n    df['product'], product = df['product'].factorize()","a53007e2":"print('---------train data types is here-----------')\nprint(train.dtypes)\nprint('---------test data types is here-----------')\nprint(test.dtypes)","296df5cf":"train.head()","8774ff21":"train['more_sold_month'] = 0\ntrain.loc[train['month']==12,'more_sold_month'] = 3\ntrain.loc[train['month']==4,'more_sold_month']  = 2\ntrain.loc[train['month']==1,'more_sold_month']  = 1\ntrain.head()","4345c83c":"train['KaggleHat'] = 0\ntrain.loc[train['product']==1,'KaggleHat'] = 1\ntrain.head()","a55ba5ed":"train['Sat_or_Sun'] = 0\ntrain.loc[train['day_of_week']==5,'Sat_or_Sun'] = 1\ntrain.loc[train['day_of_week']==6,'Sat_or_Sun'] = 1\ntrain.head()","ff1c7b51":"train.loc[train['year']==2015,'year'] = 1\ntrain.loc[train['year']==2016,'year'] = 2\ntrain.loc[train['year']==2017,'year'] = 3\ntrain.loc[train['year']==2018,'year'] = 4\ntrain.head()","e8d7b893":"train['more_sold_day'] = 0\ntrain.loc[train['day']==31,'more_sold_day'] = 2\ntrain.loc[train['day']==30,'more_sold_day'] = 1\ntrain.loc[train['day']==29,'more_sold_day'] = 1\ntrain.loc[train['day']==28,'more_sold_day'] = 1\ntrain.head()","77072790":"from sklearn.model_selection import train_test_split\nX=train.drop(['row_id','date','num_sold'],axis = 1)\ny = train.num_sold\n\n#Separate data into training and validation sets\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.15,random_state=0)","f5e4218d":"X_train.head()","4c2d1838":"y_train.head()","e1932a37":"def df_XGBRegressor(X_train, X_valid, y_train, y_valid):\n    my_model = XGBRegressor(n_estimators=1000, learning_rate=0.02,random_state=0)\n    my_model.fit(X_train, y_train,early_stopping_rounds=5, eval_set=[(X_valid, y_valid)],verbose=False,\n                 eval_metric='mae')\n    predict = my_model.predict(X_valid)\n    return predict,my_model","8008dd8e":"predict,simple_model =df_XGBRegressor(X_train, X_valid, y_train, y_valid)","8c544f11":"def get_smap(predict,y_valid):\n    smape = 100\/len(y_valid) * np.sum(2 * np.abs(predict - y_valid) \/ (np.abs(predict) + np.abs(y_valid)))\n    return smape","59a961c9":"print('smape score is : ',get_smap(predict,y_valid))","177b912b":"test['more_sold_month'] = 0\ntest.loc[test['month']==12,'more_sold_month'] = 3\ntest.loc[test['month']==4,'more_sold_month']  = 2\ntest.loc[test['month']==1,'more_sold_month']  = 1\n\n\ntest['KaggleHat'] = 0\ntest.loc[test['product']==1,'KaggleHat'] = 1\n\n\ntest['Sat_or_Sun'] = 0\ntest.loc[test['day_of_week']==5,'Sat_or_Sun'] = 1\ntest.loc[test['day_of_week']==6,'Sat_or_Sun'] = 1\n\n\ntest.loc[test['year']==2019,'year'] = 5\n\ntest['more_sold_day'] = 0\ntest.loc[test['day']==31,'more_sold_day'] = 2\ntest.loc[test['day']==30,'more_sold_day'] = 1\ntest.loc[test['day']==29,'more_sold_day'] = 1\ntest.loc[test['day']==28,'more_sold_day'] = 1\n","8d5ac48c":"test_data=test.drop(['row_id','date'],axis = 1)\nint_predict = np.round(simple_model.predict(test_data))\nint_predict = int_predict.astype(int)\noutput = pd.DataFrame({'row_id': test.row_id, 'num_sold': int_predict})\noutput.to_csv('submission.csv', index=False)","fe1dcf50":"output.head()","9c8e48d3":"# Introduction\nbefore create model I did EDA with other notebook here (https:\/\/www.kaggle.com\/imnaho\/tps-jan2022-simple-eda)\n\nfrom above notebook I found\n\n**What will I predict for this competition?**\n* how many number would be sold at each country ,store ,product in a day in 2019\n\n**What is nice feature to predict the number of sold ?**\n* It is increasing year by year and new year holiday season is most high number of sold\n* each country has almost same feature with Time series graph\n* December sold most,April is second, January is third\n* when I look at the number of sold only Kaggle Hat, it sold most in April ,not December\n* Saturday and Sunday sold more than other day\n* almost same but day of 31 is sold most","82d6b90e":"Saturday and Sunday sold more than other day","3f289422":"# encode data","e99f5b8c":"# create simple model with XGBRegressor","d020a856":"when I look at the number of sold only Kaggle Hat, it sold most in April ,not December\n\nso I'll add \"KaggleHat\" columns ","e2817314":"# add some features","30bf955f":"# separate data to train_data and valid_data","338ad3fb":"almost same but day of 31 is sold most and 30,29,28 is little bit more sold than other days","06d39d9a":"December sold most,April is second, January is third so I'll add this feature","12f593b7":"split date to year,month,day\n\nfactorize cateorical data country,store,product","69e997ca":"at my EDA notebook it is known \n* they have no missing value\n* training data is only object data when i remove target and id columns (so i have to encode these data to create model and predict)","7b7fa27a":"# check data","66629898":"prepare test data","31cdf439":"It is increasing year by year and new year holiday season is most high number of sold","d003379b":"# check score","b126da54":"# make prediction for submit"}}