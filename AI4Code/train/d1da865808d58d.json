{"cell_type":{"314eb4c5":"code","5fc24263":"code","21ad4c0e":"code","bb6e3597":"code","d674bc97":"code","359e8659":"code","04181c22":"code","83d69297":"code","1bcd2acb":"code","464d7889":"code","334bae8c":"code","2442ba95":"code","4cfeac47":"code","6d0bc901":"code","8b1bd24c":"code","bb59bc77":"code","754bfa67":"code","d855ac79":"code","5021d8dc":"code","f95897e2":"code","7ffd1483":"code","0d7591eb":"code","d175b75c":"code","bceb7b15":"code","0f5a82ac":"code","3e527ad0":"code","10d2dd22":"code","10510e06":"code","bc600005":"code","e004751d":"code","2796bc13":"code","bca9cb89":"code","ac1f8746":"code","16f70e0a":"code","d0029a0a":"code","4f9f23a3":"code","4da404c5":"code","7b09e5ba":"code","d5ded576":"code","436e1418":"code","da56f6d6":"markdown","96e10f5d":"markdown","619baf19":"markdown","4701d923":"markdown","6d4c440d":"markdown","930c1b8f":"markdown","c169f372":"markdown","8eebc68f":"markdown","3fc679d3":"markdown","56db5826":"markdown","4e469ef1":"markdown","6cd3c283":"markdown","74689c78":"markdown","fb4647df":"markdown","0022d4b1":"markdown","d82e6e88":"markdown","dbb48e5c":"markdown","8added19":"markdown","f5a54207":"markdown","3b3a8c6a":"markdown","878cd6e3":"markdown","445403b7":"markdown","b1859a32":"markdown","6f06b6bd":"markdown","da91520a":"markdown","d4207447":"markdown"},"source":{"314eb4c5":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np \n\n\n# import useful tools\nfrom glob import glob\nfrom PIL import Image\nimport cv2\n\n# import data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport seaborn as sns\n\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_notebook, show, output_file\nfrom bokeh.models import ColumnDataSource, HoverTool, Panel\nfrom bokeh.models.widgets import Tabs\n\nfrom tqdm.auto import tqdm\nimport shutil as sh\n\n# import data augmentation\nimport albumentations as albu","5fc24263":"!ls ..\/input\/count-the-number-of-faces-present-in-an-image\/train","21ad4c0e":"# Setup the paths to train and test images\ntrain=pd.read_csv('..\/input\/count-the-number-of-faces-present-in-an-image\/train\/train.csv')\ntest=pd.read_csv('..\/input\/count-the-number-of-faces-present-in-an-image\/test.csv')\n\nImages='..\/input\/count-the-number-of-faces-present-in-an-image\/train\/image_data\/'\n# Glob the directories and get the lists of train and test images\nimg = glob(Images + '*')\n","bb6e3597":"# Compute at the number of images:\nprint('Total Number of images is {}'.format(len(img)))","d674bc97":"print('Number of image in train data are {}'.format(train.shape[0]))\ntrain.head()","359e8659":"print('Number of image in test data are {}'.format(test.shape[0]))\ntest.head()","04181c22":"bbox=pd.read_csv('..\/input\/count-the-number-of-faces-present-in-an-image\/train\/bbox_train.csv')\nbbox.head()","83d69297":"# Merge all train images with the bounding boxes dataframe\n\ntrain_images = train.merge(bbox, on='Name', how='left')","1bcd2acb":"print(train_images.isnull().sum())\nprint(train_images.shape)\ntrain_images","464d7889":"### Let's plot some image examples:\n\ntrain_images.iloc[2].Name","334bae8c":"# First we store all the box dimensions.\ndef get_all_bboxes(df, image_id):\n    image_bboxes = df[df.Name == image_id]\n    \n    bboxes = []\n    for _,row in image_bboxes.iterrows():\n        bboxes.append((row.xmin, row.ymin, row.xmax, row.ymax))\n        \n    return bboxes\n\n# function for box representation on the image.\n\ndef plot_image_with_box(df, rows=3, cols=4, title='Face count images'):\n    fig, axs = plt.subplots(rows, cols, figsize=(20,15))\n    for row in range(rows):\n        for col in range(cols):\n            idx = np.random.randint(len(df), size=1)[0]\n            img_id = df.iloc[idx].Name\n            \n            img = Image.open(Images + img_id)\n            axs[row, col].imshow(img)\n            \n            bboxes = get_all_bboxes(df, img_id)\n            \n            for bbox in bboxes:\n                rect = patches.Rectangle((bbox[0],bbox[1]),bbox[2],bbox[3],linewidth=2,edgecolor='g',facecolor='none')\n                axs[row, col].add_patch(rect)\n            \n            axs[row, col].axis('off')\n            \n    plt.suptitle(title)","2442ba95":"plot_image_with_box(train_images)","4cfeac47":"train","6d0bc901":"# compute the number of bounding boxes per train image\n# train_images['count'] = train_images.loc[:,train_images.columns !='HeadCount'].apply(lambda row: 1 if np.isfinite(row.width) else 0, axis=1)\n\n\n# train_images_count = train_images.loc[:,train_images.columns !='HeadCount'].groupby('Name').sum().reset_index()","8b1bd24c":"# train_images_count['HeadCount']=train['HeadCount']\n# train_images_count.head()","bb59bc77":"# len(train_images_count.Name.unique())","754bfa67":"# See this article on how to plot bar charts with Bokeh:\n# https:\/\/towardsdatascience.com\/interactive-histograms-with-bokeh-202b522265f3\n\ndef hist_hover(dataframe, column, colors=[\"#94c8d8\", \"#ea5e51\"], bins=30, title=''):\n    hist, edges = np.histogram(dataframe[column], bins = bins)\n    \n    hist_df = pd.DataFrame({column: hist,\n                             \"left\": edges[:-1],\n                             \"right\": edges[1:]})\n    hist_df[\"interval\"] = [\"%d to %d\" % (left, right) for left, \n                           right in zip(hist_df[\"left\"], hist_df[\"right\"])]\n\n    src = ColumnDataSource(hist_df)\n    plot = figure(plot_height = 400, plot_width = 600,\n          title = title,\n          x_axis_label = 'Faces in image',\n          y_axis_label = \"Count\")    \n    plot.quad(bottom = 0, top = column,left = \"left\", \n        right = \"right\", source = src, fill_color = colors[0], \n        line_color = \"#35838d\", fill_alpha = 0.7,\n        hover_fill_alpha = 0.7, hover_fill_color = colors[1])\n        \n    hover = HoverTool(tooltips = [('Interval', '@interval'),\n                              ('Count', str(\"@\" + column))])\n    plot.add_tools(hover)\n    \n    output_notebook()\n    show(plot)","d855ac79":"hist_hover(train_images, 'HeadCount', title='Number of faces per image')","5021d8dc":"train_images.head()","f95897e2":"df=train_images\ndf.head()","7ffd1483":"df['x_center'] = df['xmin'] + df['width']\/2\ndf['y_center'] = df['ymin'] + df['height']\/2\ndf['classes'] = 0\n\n\ndf['image_id']=df['Name'].str.replace('.jpg','')\n\ndf = df[['image_id','xmin', 'ymin', 'width', 'height','x_center','y_center','classes']]","0d7591eb":"df.head()","d175b75c":"from IPython.display import Image, clear_output  # to display images","bceb7b15":"# import required dependencies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom tqdm.auto import tqdm\nimport shutil as sh\n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","0f5a82ac":"!git clone https:\/\/github.com\/AIVenture0\/yolov5.git","3e527ad0":"# check for the cloned repo\n!ls -R","10d2dd22":"# move all the files of YOLOv5 to current working directory\n!mv yolov5\/* .\/","10510e06":"# check for all the files in the current working directory\n!ls","bc600005":"!pip install -r requirements.txt","e004751d":"# # read the training data.\n\n\n# df = pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\n# bboxs = np.stack(df['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\n# for i, column in enumerate(['x', 'y', 'w', 'h']):\n#     df[column] = bboxs[:,i]\n# df.drop(columns=['bbox'], inplace=True)\n# df['x_center'] = df['x'] + df['w']\/2\n# df['y_center'] = df['y'] + df['h']\/2\n# df['classes'] = 0\n# from tqdm.auto import tqdm\n# import shutil as sh\n# df = df[['image_id','x', 'y', 'w', 'h','x_center','y_center','classes']]","2796bc13":"# count\nindex = list(set(df.image_id))\nlen(index)\n","bca9cb89":"# code to transform the dataset.\n\nsource = 'train'\nif True:\n    for fold in [0]:\n        val_index = index[len(index)*fold\/\/5:len(index)*(fold+1)\/\/5]\n        for name,mini in tqdm(df.groupby('image_id')):\n            if name in val_index:\n                path2save = 'val2017\/'\n            else:\n                path2save = 'train2017\/'\n            if not os.path.exists('convertor\/fold{}\/labels\/'.format(fold)+path2save):\n                os.makedirs('convertor\/fold{}\/labels\/'.format(fold)+path2save)\n            with open('convertor\/fold{}\/labels\/'.format(fold)+path2save+name+\".txt\", 'w+') as f:\n                row = mini[['classes','x_center','y_center','width','height']].astype(float).values\n                row = row\/1024\n                row = row.astype(str)\n                for j in range(len(row)):\n                    text = ' '.join(row[j])\n                    f.write(text)\n                    f.write(\"\\n\")\n            if not os.path.exists('convertor\/fold{}\/images\/{}'.format(fold,path2save)):\n                os.makedirs('convertor\/fold{}\/images\/{}'.format(fold,path2save))\n            sh.copy(\"..\/input\/count-the-number-of-faces-present-in-an-image\/{}\/image_data\/{}.jpg\".format(source,name),'convertor\/fold{}\/images\/{}\/{}.jpg'.format(fold,path2save,name))","ac1f8746":"print(os.listdir(\"..\/input\/count-the-number-of-faces-present-in-an-image\/train\"))","16f70e0a":"# !ls .\/convertor\n\n!ls .\/convertor\/fold0\/labels\/train2017\/12433.txt","d0029a0a":"# As i am running it for just trial(To save training time and GPU ) \n# So i am considering all the training factors to a limited extent.\n\n# Play with all featuers and see their performance.\n\n\n# !python train.py --img 1024 --batch 20 --epochs 10 --data ..\/input\/yaml-file-for-face-count-data-model\/face_count.yaml --cfg ..\/input\/yaml-file-for-face-count-data-model\/yolov5x.yaml --name yolov5x_fold0_new\n\n\n!python .\/train.py --img 640 --batch 3 --epochs 20 --data ..\/input\/yaml-file-for-face-count-data-model\/face_count.yaml --cfg ..\/input\/yaml-file-for-face-count-data-model\/yolov5x.yaml --name yolov5x_fold0_new","4f9f23a3":"# trained weights are saved by default in the weights folder\n%ls weights\/","4da404c5":"\n!python .\/detect.py --weights .\/weights\/last_yolov5x_fold0_new.pt --img 640 --conf 0.4 --source .\/convertor\/fold0\/images\/val2017","7b09e5ba":"# This will work from your end when you edit this notebook and run it.\nImage(filename='\/kaggle\/working\/inference\/output\/16800.jpg', width=400)","d5ded576":"Image(filename='\/kaggle\/working\/inference\/output\/10185.jpg', width=400)","436e1418":"Image(filename='\/kaggle\/working\/inference\/output\/10118.jpg', width=400)","da56f6d6":"> Clone the github repo\n\n1.\ud83d\udc4c Settings > Internet (set on)","96e10f5d":"# Recreation of YOLOv5 model for Face Detection","619baf19":"- These are the box dimensions around the faces.\n- Let's merge the data set and then see a sample of image with bounding boxes. ","4701d923":"> (Remember to choose GPU in Runtime if not already selected. Runtime --> Change Runtime Type --> Hardware accelerator --> GPU)","6d4c440d":"Here we see the count is equivalent to the HeadCount or we can call it as ```FACECOUNT```","930c1b8f":"# Face Count EDA","c169f372":"-------------------Let me know in the comment section about your results-----------------------------------","8eebc68f":"> Install Dependencies","3fc679d3":"## How gonna we prceed further with this problem using YOLOv5?","56db5826":"### Data Creation\n\n\n- To work with the yolo you need to frame your data in to a particular formate.Because that's how yolo is designed.\n\n> Formate\n\n- converter(main directory)\n    - val2017\n        - labels (contains all the box dimensions)\n        - images (contains images)\n    - train2017\n        - labels\n        - images","4e469ef1":"# Reading the data","6cd3c283":"### Output will look something like this.","74689c78":"<img src=\"https:\/\/i.pinimg.com\/originals\/b2\/13\/7c\/b2137cd75449417bdcb2eb05305d1a1e.png\" height=500 width=600\/>","fb4647df":"## Count the number of faces or bounding boxes \n\n        - That's what we need to predict for the test images.\n        ","0022d4b1":"__________________________\n# <center>Count the number of faces in an Image<\/center>\n__________________________","d82e6e88":"> Training Custom YOLOv5 Detector for Wheat Head\n\nAgain i am saying if you actually want to understand all the concepts of YOLOv5 with deeper intution check [Beginners Notebook On YOLOv5](https:\/\/www.kaggle.com\/vin1234\/gettingstarted-with-yolov5-global-wheat-detection).","dbb48e5c":"- This data is already given but here we are creating a function for bounding box and counting the bounding box we will predict the number of faces in an Image.","8added19":"### <font color='red'>Note:<\/font> \n\n- If you are a beginner or using YOLOv5 for the first time i suggest you check this [Beginners Notebook On YOLOv5](https:\/\/www.kaggle.com\/vin1234\/gettingstarted-with-yolov5-global-wheat-detection).","f5a54207":"### What's in the bbox_train.csv","3b3a8c6a":"### Run Inference With Trained Weights","878cd6e3":"Model prediction is not much appriciable.\n\n- Till now i totally consumed my weekly gpu quota. \n- I leave all up to you guys to practice and and try out different parameters to achieve better result.","445403b7":"## First and Farmost \n\n### Data ","b1859a32":"## Introduction\n\nThe method of face detection in pictures is complicated because of variability present across human faces such as pose, expression, position and orientation, skin colour, the presence of glasses or facial hair, differences in camera gain, lighting conditions, and image resolution.\n\n- YOLOv5 is one of the object detection technique and using this technique we gonna classify the number of object in an image. And for this particular dataset we are treating human faces as an object.","6f06b6bd":"### Important points\n\n- Here we can see that the ```bounding boxes``` data is not only around the face but it also covers other body portion. But the __number of bounding boxes is equivalent__ to the number of __faces__ in the image. \n\n- Here we can see images are take into different lighting condition, and persons have different facial expression in the images. ","da91520a":"### About the dataset","d4207447":"YOLO \u201cYou Only Look Once\u201d is one of the most popular and most favorite algorithms for AI engineers. It always has been the first preference for real-time object detection.\n\nYOLO model are trained on [COCO dataset](https:\/\/cocodataset.org\/), which has around 80 classes.\n\n> So here we gonna use the concept of transfer leanring for object(face) detection. "}}