{"cell_type":{"88bada5c":"code","c37151ac":"code","ba2411bb":"code","e67dc20a":"code","f3c1e97b":"code","6c52cd44":"code","c1cfca9e":"code","4b9e1389":"code","02ea6c6b":"code","24310135":"code","92fda589":"code","44aa63d1":"code","ed05d98c":"code","7b0dd714":"code","616db384":"code","0ffe824e":"code","f5902a6a":"code","a257f929":"code","dcd29c0d":"code","8c445fb0":"code","1b9cd789":"code","d2ab0a93":"code","d68c58a1":"code","6b4a94e5":"code","a552846c":"code","26b017ae":"code","943fbe9b":"code","b4a78fd7":"markdown","c2a0cb61":"markdown","03782be5":"markdown","da654417":"markdown","10783470":"markdown","b3dfa132":"markdown","ab006591":"markdown","4e74def1":"markdown","64901658":"markdown","39107937":"markdown","1f761f19":"markdown","295886a7":"markdown","4329fd57":"markdown","950ae095":"markdown","0f13082c":"markdown","b792c787":"markdown","2ad30908":"markdown","ad53fa26":"markdown"},"source":{"88bada5c":"'''\nAs bibliotecas usadas s\u00e3o:\nrandom\nstatistic\nnumpy.random\nscipy.stats\npandas\nmatplotlib\nstatsmodels\npandas-profiling\n'''\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\n\nimport os\n\npath = os.environ['PATH']\n\nif path.startswith('C'):\n    IN_KAGGLE = False\nelse:\n    IN_KAGGLE = True","c37151ac":"# Para uso com fun\u00e7\u00f5es da biblioteca standard (ex random.randint)\nrandom.seed(1)\n# Para uso com fun\u00e7\u00f5es da biblioteca numpy (ex np.random.randint)\nnp.random.seed(1)\n\n# Quando for passada como par\u00e2metro a seed\nrandom_state = 1","ba2411bb":"# Permuta\u00e7\u00e3o: possibilidades de coloca\u00e7\u00e3o de n objetos em n posi\u00e7\u00f5es = n!\ndef permutacao (n):\n    return math.factorial(n)\n\n# Arranjo: p objetos em n posi\u00e7\u00f5es, ordem importa = n!\/(n-p)!\ndef arranjo (n,p):\n    return math.factorial(n)\/math.factorial(n-p)\n\n# Combina\u00e7\u00e3o: p objetos em n posi\u00e7\u00f5es, ordem n\u00e3o importa = n!\/(n-p)!p!\ndef combinacao (n,p):\n    return math.factorial(n)\/(math.factorial(n-p)*math.factorial(p))\n\n# Varia\u00e7\u00f5es poss\u00edveis havendo n slots e p possibilidades para cada um\ndef possibilidades(n,p):\n    return p**n","e67dc20a":"from scipy.stats import norm\n\nmean = 0\nstd = 1\nrv = norm(loc=mean, scale=std)\nprint('Desvios que englobam 95% dos pontos {}'.format(rv.interval(0.95)    ))\n#ponto = 1.959963984540054\nponto = 1.092\nprint('Probabilidade de ter um ponto al\u00e9m de {} desvios {}'.format(ponto,rv.sf(ponto)))\n\nprint('Probabilidade de ter um ponto al\u00e9m ou aquem de {} desvios {}'.format(ponto,2*rv.sf(ponto)))","f3c1e97b":"from scipy.stats import norm\n\n# desvios que cont\u00eam 95% dos pontos\nmean = 0\nstd = 1\nrvt = t(df=(100-1))\nprint('Desvios que englobam 95% dos pontos {}'.format(rvt.interval(0.95)    ))\n#ponto = 1.959963984540054\nponto = 1.092\nprint('Probabilidade de ter um ponto al\u00e9m de {} desvios {}'.format(ponto,rvt.sf(ponto)))\n\nprint('Probabilidade de ter um ponto al\u00e9m ou aquem de {} desvios {}'.format(ponto,2*rvt.sf(ponto)))\n\n","6c52cd44":"#A popula\u00e7\u00e3o \u00e9 normal com m\u00e9dia 0 e desvio 1\n#Criando amostra com 100 elementos\n\nimport numpy as np\nfrom scipy.stats import t\n\namostra = rv.rvs(size=100)\n#Cria a distribui\u00e7\u00e3o das amostras\ndesvio_distribuicao_amostras = std\/np.sqrt(100)\ndist_amostras = norm(loc=mean, scale=desvio_distribuicao_amostras)\ndist_amostras_t = t(100-1,loc=mean, scale=desvio_distribuicao_amostras)\n\nmedia_amostra = amostra.mean()\n\nnumero_desvios_amostra = np.abs( (media_amostra-0)\/desvio_distribuicao_amostras )\n\nprint('Media {} numero_desvios_amostra {} amostra'.format(media_amostra,\n                                                                    numero_desvios_amostra))","c1cfca9e":"print('Probabilidade de ter um ponto al\u00e9m ou aquem de numero_desvios_amostra {}'.format(\n    2*rv.sf(numero_desvios_amostra)))","4b9e1389":"print('Probabilidade de ter um ponto al\u00e9m ou aquem de numero_desvios_amostra {}'.format(\n    2*rvt.sf(numero_desvios_amostra)))","02ea6c6b":"from scipy import stats\n\n# Two sided\nstats.ttest_1samp(amostra,0)\n","24310135":"from scipy.stats import binom\ntentativas = 30\nrv_honesta = binom(tentativas, 1\/2)\npopulacao_honesta = rv_honesta.rvs(size=1000000, random_state=random_state)\nprint(rv_honesta.mean())\nprint(rv_honesta.std())\n","92fda589":"rv = binom(tentativas, 1\/2.5)\nresultado = rv.rvs(size=100, random_state=random_state)\nprint(np.mean(resultado))","44aa63d1":"amostras = 500\nmedias = np.zeros((amostras,1))\nnp.random.seed(1)\nfor i in range(0,amostras,1):\n    medias[i]=np.mean(populacao_honesta[np.random.randint(0, len(populacao_honesta),100)])\n\nprint(medias.mean())\nprint(medias.std())    \n\nfig, axs = plt.subplots(1, 1, figsize=(14,6))\n\n\naxs.hist(medias, density=True, facecolor='g', alpha=0.75, bins=50)\naxs.grid(True)\naxs.set_title('Distribui\u00e7\u00e3o das m\u00e9dias')\n\nplt.show()","ed05d98c":"rv_norm = stat.norm(loc=medias.mean(), scale=medias.std())","7b0dd714":"rv_norm.cdf(11.76)","616db384":"if IN_KAGGLE:\n    df = pd.read_csv(\"..\/input\/2016.csv\")\nelse:\n    df = pd.read_csv(\"2016.csv\")\ndf.head(20)","0ffe824e":"df.Region.unique()","f5902a6a":"dfWE = df.loc[df.Region == 'Western Europe',['Country', 'Region', 'Happiness Rank', 'Happiness Score',\n       'Lower Confidence Interval', 'Upper Confidence Interval',\n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity',\n       'Dystopia Residual']]\n\ndfLC = df.loc[df.Region == 'Latin America and Caribbean',['Country', 'Region', 'Happiness Rank', 'Happiness Score',\n       'Lower Confidence Interval', 'Upper Confidence Interval',\n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity',\n       'Dystopia Residual']]","a257f929":"fig, axs = plt.subplots(1, 2, figsize=(14,6))\n\naxs[0].hist(dfWE['Happiness Score'], density=True, facecolor='g', alpha=0.75)\naxs[0].grid(True)\naxs[0].set_title('Western Europe')\n\nprint(dfWE['Happiness Score'].mean())\nprint(dfWE['Happiness Score'].std())\n\naxs[1].hist(dfLC['Happiness Score'], density=True, facecolor='g', alpha=0.75)\naxs[1].grid(True)\naxs[1].set_title('Latin America and Caribbean')\n\nprint(dfLC['Happiness Score'].mean())\nprint(dfLC['Happiness Score'].std())","dcd29c0d":"dfWE","8c445fb0":"dfLC","1b9cd789":"from scipy import stats\n\nstats.ttest_ind(dfWE['Happiness Score'].values,dfLC['Happiness Score'].values, equal_var=False)","d2ab0a93":"from scipy import stats \n\nstats.ttest_ind(dfWE['Happiness Score'].values,dfLC['Happiness Score'].values, equal_var=True)\n","d68c58a1":"# Gerando int - biblioteca python standard\nprint(random.randrange(100, 1000, 2))\nprint(random.randint(100, 1000))\n\n# Gerando int - biblioteca numpy\nprint(np.random.randint(100, 1000,2))\n\n# Gerando float - biblioteca python standard\nprint(random.random())\nprint(random.uniform(100, 1000))\nprint(random.normalvariate(1, 1))\n\n# Gerando float - biblioteca numpy\nprint(np.random.random(5))\nprint(np.random.randn(5))\n\nnp.random.random_sample(size=100)","6b4a94e5":"print(np.linspace(0.0,1.0,11))\nprint(np.arange(0.0,10.0,3))\nprint(np.logspace(0.0,10.0,3))\n","a552846c":"# Escolha com reposi\u00e7\u00e3o\n# usando numpy np.random.choice(10,size=10,replace=True)\n\n\nfaces = list(range(1,7))\nlancamentos = 600\npesos = [1\/6,1\/6,0.5\/6,0.5\/6,2\/6,1\/6]\nresultados = random.choices(population=faces, weights=pesos, k=lancamentos)\n#print(resultados)\nfor i in faces:\n    print('Face {}, peso {}, vezes {}'.format(i,pesos[i-1],resultados.count(i)))","26b017ae":"# Escolha sem reposi\u00e7\u00e3o\n# usando numpy np.random.choice(10,size=10,replace=False)\n\n\nlista = list(range(1,7))\nrandom.sample(population=lista, k=len(lista))\n","943fbe9b":"# Embaralhamento\n# usando numpy np.random.choices\n\nlista = list(range(1,7))\nrandom.shuffle(lista)\nlista","b4a78fd7":"## Vamos estudar um segundo exemplo ","c2a0cb61":"<font size=\"6\" color=\"red\">Anexo I - Fun\u00e7\u00f5es \u00dateis<\/font>","03782be5":"## Escolha","da654417":"Pelo resultado acimq, a chance de uma moeda honesta produzir uma amostra cuja m\u00e9dia seja 11.76 ou menor \u00e9 extremamente pequena.\n\nSe estabelecermos nosso n\u00edvel de signific\u00e2ncia em 5% (admitirmos no m\u00e1ximo 5% de possibilidade de erro), podemos afirmar que a moeda \u00e9 desonesta, ou seja, podemos recusar H0 (p=8.72e-29 <= 0.05).\n","10783470":"Supondo agora que nos foi dada uma amostra com o 100 resultados (n\u00famero de caras) de 30 lan\u00e7amentos, cuja m\u00e9dia foi 11,76.\n\nDado que a m\u00e9dia foi menor do que seria esperado de uma moeda HONESTA, podemos afirmar que os resultados foram obtidos com uma moeda n\u00e3o honesta?","b3dfa132":"## Gerando n\u00fameros n\u00e3o aleat\u00f3rios","ab006591":"## Vamos estudar um exemplo passo-a-passo para compreender o conceito\n\nEm 30 lan\u00e7amentos de uma moeda HONESTA, espera-se que ocorram 15 caras, com desvio padr\u00e3o de 2,73\n\nVeja o c\u00e1lculo:","4e74def1":"## Fun\u00e7\u00f5es gerais usadas nos exemplos","64901658":"## O que ser\u00e1 tratado no curso\n\nTeste de hip\u00f3tese","39107937":"A hip\u00f3tese nula (H0) \u00e9 que a moeda seja realmente honesta e que a diferen\u00e7a deva-se a mero acaso.\n\nA hip\u00f3tese alternativa (H1) \u00e9 que a moeda n\u00e3o seja honesta.\n\nComo j\u00e1 aprendemos no teorema do limite central, as amostras de uma moeda HONESTA deveria ter m\u00e9dia 15 e desvio igual ao desvio da popula\u00e7\u00e3o dividido pela raiz do tamanho da amosta. Veja o c\u00e1lculo:","1f761f19":"<font size=\"6\" color=\"red\">Teste de Hip\u00f3tese<\/font>\n\nFonte: https:\/\/machinelearningmastery.com\/statistical-hypothesis-tests-in-python-cheat-sheet\/\n\nO teste de hip\u00f3tese refere-se \u00e0 compara\u00e7\u00e3o entre uma hip\u00f3tese nula (H0) e uma hip\u00f3tese alternativa (H1).\n\nQueremos garantir que, dado que H0 esteja correta, a probabilidade de aceitar H1 seja reduzida, normalmente fixada em 0,05 ou 0,01. A esse valor chamamos p value (n\u00edvel de signific\u00e2ncia).\n\nN\u00e3o rejeitamos H0 quando p>0.05. Rejeitamos H0 quando p<=0.05. Veja que n\u00e3o rejeitar n\u00e3o significa que H0 esteja totalmente certa, apenas n\u00e3o temos argumentos para rejeit\u00e1-la.\n\nSempre haver\u00e1 possibilidade de erro, ou seja, podemos aceitar H1 mesmo quando H0 esteja correta. Por\u00e9m a probabilidade do erro deve ser baixa.\n\nAs hip\u00f3teses s\u00e3o normalmente de dois tipos: \n\n- 1 sided: o valor de uma distribui\u00e7\u00e3o \u00e9 maior ou menor que outra\n\n- 2 sided: o valor de uma distribui\u00e7\u00e3o \u00e9 diferente de outra, ou seja, \u00e9 maior ou menor que outra \n\n","295886a7":"## Embaralhamento","4329fd57":"<font size=\"6\" color=\"red\">Anexo II - Refer\u00eancias<\/font>\n\nTutoriais\n\nhttps:\/\/www.youtube.com\/watch?v=Iq9DzN6mvYA\n\nhttps:\/\/machinelearningmastery.com\/how-to-generate-random-numbers-in-python\/\n\nhttp:\/\/nbviewer.jupyter.org\/url\/norvig.com\/ipython\/Probability.ipynb\n\nhttps:\/\/www.youtube.com\/watch?v=KhAUfqhLakw\n\nhttps:\/\/www.analyticsvidhya.com\/blog\/2017\/09\/6-probability-distributions-data-science\/\n\nhttps:\/\/www.datacamp.com\/community\/tutorials\/python-statistics-data-science\n\nhttps:\/\/machinelearningmastery.com\/\n\n\nDistribui\u00e7\u00f5es de probabilidade\n\nhttp:\/\/blog.cloudera.com\/blog\/2015\/12\/common-probability-distributions-the-data-scientists-crib-sheet\/\n\nhttp:\/\/www.math.wm.edu\/~leemis\/chart\/UDR\/UDR.html\n\nCursos\n\nhttps:\/\/courses.edx.org\/courses\/course-v1:UCSanDiegoX+DSE210x+1T2018\/course\/#block-v1:UCSanDiegoX+DSE210x+1T2018+type@chapter+block@c1c0e5a497924a40b800bf69e96b4004\n\nDocumenta\u00e7\u00e3o bibliotecas Python\n\nhttps:\/\/docs.python.org\/3\/library\/statistics.html\n\nhttps:\/\/docs.python.org\/3\/library\/random.html\n\nDocumenta\u00e7\u00e3o bibliotecas SciPy\n\nhttps:\/\/docs.scipy.org\/doc\/scipy\/reference\/stats.html\n\nDocumenta\u00e7\u00e3o bibliotecas NumPy\n\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.random.html\n\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/routines.statistics.html\n\nDataframe\n\nhttp:\/\/pandas.pydata.org\/pandas-docs\/version\/0.13\/visualization.html\n","950ae095":"## Importa\u00e7\u00e3o de bibliotecas usadas nos exemplos","0f13082c":"## Mantendo a reprodutibilidade dos resultados\n\nAntes da gera\u00e7\u00e3o de n\u00fameros aleat\u00f3rios \u00e9 importante inicializar o gerador de n\u00fameros para que os resultados sejam os mesmos","b792c787":"## Gerando n\u00fameros aleat\u00f3rios\n","2ad30908":"<font size=\"10\" color=\"black\">Teste de Hip\u00f3tese<\/font>\n\nEduardo Chaves Ferreira","ad53fa26":"Conforme previsto, a m\u00e9dia das amostras (14,98) corresponde \u00e0 media da popula\u00e7\u00e3o e o desvio das amostras \u00e9 o da popula\u00e7\u00e3o dividido por 10.\n\nAgora, sendo a moeda honesta, qual a chance de obtermos uma amostra com m\u00e9dia 11.76?\n\nVamos calcular a probabilidade de obtermos um valor que seja 11.76 ou menor com uma moeda honesta:"}}