{"cell_type":{"8af79306":"code","6f903c29":"code","db4f0a14":"code","dcbcd2cb":"code","e2f756ab":"code","23e4d5aa":"code","786e5be5":"code","98e681de":"code","5cdf385f":"code","8973635a":"code","c22befd6":"code","00aebcd6":"code","4b09c155":"code","97f42d8c":"code","1fb5170c":"code","2d4723a3":"code","d003ce68":"code","571c1a88":"code","8a1f7814":"code","5a76b462":"code","7c062127":"code","74b9c758":"code","892e9239":"code","4d6a971d":"code","4804706c":"code","df2b653c":"code","62f001b3":"code","f840f51b":"code","4a075b2b":"code","3ddec6e2":"code","88b61eeb":"code","af51cfe3":"code","a9983ae0":"code","21d24cc9":"code","f308a8b2":"code","5dbe3499":"code","f719244f":"code","76939aa7":"code","327ce487":"code","5d0ef5aa":"code","434c54f1":"code","4b5ea306":"code","564c5bdd":"code","6ae036d2":"code","464f3e22":"code","c380304f":"code","f092cdf0":"markdown"},"source":{"8af79306":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6f903c29":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom scipy import stats\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.neighbors import KNeighborsClassifier","db4f0a14":"df = pd.read_csv('..\/input\/titanic\/train.csv')\ndf","dcbcd2cb":"df.describe()","e2f756ab":"df.info()","23e4d5aa":"df.duplicated().sum()","786e5be5":"df.isna().sum()","98e681de":"df2 = df.drop(['Cabin','Name','Ticket','PassengerId'], 1)\ndf2","5cdf385f":"df2 = df2.dropna()\ndf2","8973635a":"df2['Sex'] = df2.Sex.replace({'male':1, 'female':0})\ndf2","c22befd6":"df2['Embarked'] = df2.Embarked.replace({'C':1, 'Q':2, 'S':3})\ndf2","00aebcd6":"plt.figure(figsize=(16,9))\n\nsns.heatmap(df2.corr(), annot=True)\n\nplt.show()","4b09c155":"X3 = df2","97f42d8c":"X3.describe()","1fb5170c":"X4 = X3.drop(['Survived', 'Age', 'SibSp', 'Parch', 'Embarked'], axis=1)\ny = X3['Survived']","2d4723a3":"scaler = StandardScaler()\nz = scaler.fit_transform(X4)\n\ndata = pd.DataFrame(z, columns=X4.columns)\ndata","d003ce68":"X_train, X_test, y_train, y_test = train_test_split(data, y, test_size=.3)","571c1a88":"logReg = LogisticRegression()\nlogReg.fit(X_train, y_train)","8a1f7814":"y_train_pred = logReg.predict(X_train)","5a76b462":"print(confusion_matrix(y_train, y_train_pred))","7c062127":"print(classification_report(y_train, y_train_pred))","74b9c758":"y_pred = logReg.predict(X_test)\ny_pred","892e9239":"print(confusion_matrix(y_test, y_pred))","4d6a971d":"print(classification_report(y_test, y_pred))","4804706c":"error = []\n\nfor i in range(1, 40):\n    Knn = KNeighborsClassifier(n_neighbors=i)\n    Knn.fit(X_train, y_train)\n    pred_i = Knn.predict(X_test)\n    error.append(np.mean(pred_i != y_test))\n    ","df2b653c":"plt.figure(figsize=(16,9))\n\nplt.plot(range(1,40), error, marker='o')\n\nplt.show()","62f001b3":"classifier = KNeighborsClassifier(n_neighbors=3)\nclassifier.fit(X_train, y_train)","f840f51b":"pred = classifier.predict(X_train)","4a075b2b":"print(confusion_matrix(y_train, pred))","3ddec6e2":"print(classification_report(y_train, pred))","88b61eeb":"pred2 = classifier.predict(X_test)","af51cfe3":"print(confusion_matrix(y_test, pred2))","a9983ae0":"print(classification_report(y_test, pred2))","21d24cc9":"data2 = pd.read_csv('..\/input\/titanic\/test.csv')\ndata2","f308a8b2":"data2.describe()","5dbe3499":"data2.info()","f719244f":"data3 = data2.drop(['Cabin','Name', 'Ticket', 'PassengerId','Age', 'SibSp', 'Parch', 'Embarked'], 1)\ndata3","76939aa7":"data3['Sex'] = data3.Sex.replace({'male':1, 'female':0})\ndata3","327ce487":"data3.isna().sum()","5d0ef5aa":"data3 = data3.fillna(data3.mean())\ndata3","434c54f1":"final = data2[['PassengerId']]\nfinal","4b5ea306":"z = scaler.transform(data3)\nz = pd.DataFrame(z, columns=data3.columns)\nz","564c5bdd":"y_pred2 = logReg.predict(z)\ny_pred2","6ae036d2":"knn_pred = classifier.predict(z)\nknn_pred","464f3e22":"final['Survived'] = knn_pred\nfinal = final.set_index('PassengerId')\nfinal","c380304f":"final.to_csv('submission.csv')","f092cdf0":"### Analyse predictive "}}