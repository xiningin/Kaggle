{"cell_type":{"baad25a6":"code","77fc9de2":"code","b6c380c3":"code","066b6099":"code","a775d55f":"code","e3a2c7c4":"code","794cd9b0":"code","eef94b81":"code","48e35d08":"code","c21322cf":"code","da01fe70":"code","45b61575":"code","bad002d4":"code","ac6a3633":"code","4afea4e4":"code","2a845f4b":"code","cbd582bb":"markdown","9d5efe43":"markdown"},"source":{"baad25a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","77fc9de2":"import numpy as np\nimport pandas as pd\nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport cv2\nimport random\nfrom plotly.subplots import make_subplots\nfrom skimage import data\nimport plotly.graph_objs as go\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, BatchNormalization, Input\nfrom sklearn.metrics import confusion_matrix, f1_score, accuracy_score\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping","b6c380c3":"cherry_PNG_PATH = '..\/input\/ice-cream-dataset\/hd\/images'\ncombo_PNG_PATH = '..\/input\/ice-cream-dataset\/combined\/images\/'\nprint('Number of images in cherry directory: ', len(os.listdir(cherry_PNG_PATH)))\nprint('Number of images in combo directory: ', len(os.listdir(combo_PNG_PATH)))","066b6099":"shapes_set = set()\nimage_names = os.listdir(cherry_PNG_PATH)\nfor img_name in image_names:\n    img = cv2.imread(os.path.join(cherry_PNG_PATH, img_name))\n    shapes_set.add(img.shape)\n\nprint('Number of unique image shapes inside cherry directory: ', len(shapes_set))\nprint('Image shape sizes: ', shapes_set.pop())\n\nshapes_set = set()\nimage_names = os.listdir(combo_PNG_PATH)\nfor img_name in image_names:\n    img = cv2.imread(os.path.join(combo_PNG_PATH, img_name))\n    shapes_set.add(img.shape)\nprint('Number of unique image shapes inside combo directory: ', len(shapes_set))\nprint('Image shape sizes: ', shapes_set.pop())","a775d55f":"def visualize_images(path, n_images, is_random=True, figsize=(16, 16)):\n    plt.figure(figsize=figsize)\n    w = int(n_images ** .5)\n    h = math.ceil(n_images \/ w)\n    \n    all_names = os.listdir(path)\n    image_names = all_names[:n_images]   \n    if is_random:\n        image_names = random.sample(all_names, n_images)\n            \n    for ind, image_name in enumerate(image_names):\n        img = cv2.imread(os.path.join(path, image_name))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n        plt.subplot(h, w, ind + 1)\n        plt.imshow(img)\n        plt.xticks([])\n        plt.yticks([])\n    \n    plt.show()","e3a2c7c4":"visualize_images(cherry_PNG_PATH, 9)","794cd9b0":"visualize_images(combo_PNG_PATH, 9)","eef94b81":"def show_color_histogram(path):\n    image_names = os.listdir(path)\n    image_name = random.choice(image_names)\n    img = cv2.imread(os.path.join(path, image_name))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) \n    fig = make_subplots(1, 2)\n\n    fig.add_trace(go.Image(z=img), 1, 1)\n    for channel, color in enumerate(['red', 'green', 'blue']):\n        fig.add_trace(\n            go.Histogram(\n                x=img[..., channel].ravel(), \n                opacity=0.5,\n                marker_color=color, \n                name='%s channel' %color\n            ), 1, 2)\n    fig.update_layout(height=400)\n    fig.show()","48e35d08":"show_color_histogram(cherry_PNG_PATH)","c21322cf":"show_color_histogram(combo_PNG_PATH)","da01fe70":"X = []\ny = []\n\nimage_names = os.listdir(cherry_PNG_PATH)\nfor img_name in image_names:\n    img = cv2.imread(os.path.join(cherry_PNG_PATH, img_name))\n    X.append(img)\n    y.append(1)\n\nimage_names = os.listdir(combo_PNG_PATH)\nfor img_name in image_names:\n    img = cv2.imread(os.path.join(combo_PNG_PATH, img_name))\n    X.append(img)\n    y.append(0)\n    \nX = np.stack(X)\ny = np.stack(y)","45b61575":"df=pd.read_csv(\"..\/input\/ice-cream-dataset\/hd\/products.csv\")\ndf.head()","bad002d4":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.key)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","ac6a3633":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.ingredients)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set1', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","4afea4e4":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.name)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set2', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","2a845f4b":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#a83a32','#a8324e','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh! @mpwolke' )","cbd582bb":"#Codes by Yaroslav Isaienkov  https:\/\/www.kaggle.com\/ihelon\/monet-eda-and-visualization-techniques\n\nVisualizing some images ","9d5efe43":"#I thought I would\/could make a classification. And I didn't. Oops, I didn't it again\n\nValueError: all input arrays must have the same shape. Conclusion: No Classification since I got that error."}}