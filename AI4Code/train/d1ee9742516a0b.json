{"cell_type":{"439e29c8":"code","969a10a8":"code","de831271":"code","a39f0354":"code","89aef6bc":"code","9ef5fb93":"code","c8ebb04c":"code","275720d4":"code","371be6b9":"code","2a4e61b6":"code","23d448ff":"code","5ed7f288":"code","fe3aa1cc":"code","7c45e969":"code","1e2b24a6":"code","a55f8f32":"code","03f96c80":"code","40ab6ee2":"code","9c6adcb4":"code","612c131a":"code","e91a8a91":"code","4eb2912a":"code","cf881bba":"code","96d7c5d8":"code","df8f2ba3":"code","15dc9105":"code","46190bbf":"code","0e005421":"code","a5893280":"code","0f360a56":"code","f66b95f4":"code","adff8b4c":"code","1a598d39":"code","5410d5ec":"code","c69b7655":"code","4443654a":"code","5b8176c3":"code","b4cdcbc6":"code","6633afe1":"code","f485ae95":"code","63607bc3":"code","05580170":"code","2b11b860":"code","48d55cef":"code","80d02d9b":"code","deef5324":"code","2e353e36":"code","7367b121":"code","1e764014":"code","e92bff89":"code","7c462f62":"code","dc27e9e0":"code","1eba3e72":"code","4ee5d0eb":"code","43e7aae7":"code","b6a6824a":"code","18db6680":"markdown","cf6fba70":"markdown","81bea73d":"markdown","f473e107":"markdown","fbee0f09":"markdown","ff108d4e":"markdown","37ca0cbb":"markdown","c931f2c3":"markdown","e0997e10":"markdown","af76ff91":"markdown","0abd3012":"markdown","1bedad71":"markdown","463bea5f":"markdown","6c93e365":"markdown"},"source":{"439e29c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","969a10a8":"import pandas as pd\nimport numpy as np\nimport random\nimport time\nimport datetime\nfrom itertools import chain\nimport re\nimport json\nfrom tqdm.autonotebook import tqdm\nimport string\nimport collections\nfrom textblob import TextBlob\nfrom pathlib import Path\nimport collections\nimport pickle\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport nltk\nfrom nltk.probability import FreqDist\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.wordnet import WordNetLemmatizer\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, precision_score, recall_score, f1_score, accuracy_score\nfrom sklearn.metrics import confusion_matrix, plot_confusion_matrix\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n\nfrom keras.preprocessing import sequence, text\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import utils\nfrom keras.models import *\nfrom keras.layers import *\nfrom keras.callbacks import *\nfrom keras.models import Sequential\nfrom keras.layers.recurrent import LSTM, GRU\nfrom keras.layers import Dense, Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.utils.vis_utils import plot_model\n\nimport en_core_web_lg\nimport spacy\nfrom spacy.lang.en import English\nfrom spacy.util import minibatch, compounding\nfrom spacy import displacy\n\nimport warnings\nwarnings.filterwarnings('ignore')","de831271":"#define paths\nos.listdir('\/kaggle\/input\/coleridgeinitiative-show-us-the-data\/')\ntrain_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\ntest_path = '..\/input\/coleridgeinitiative-show-us-the-data\/test'","a39f0354":"#define stopwords\nfrom nltk.corpus import stopwords\n\nstopwords_list = stopwords.words('english') + list(string.punctuation)\nstopwords_list += [\"''\", '\"\"', '...', '``']","89aef6bc":"#add callbacks\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\n#define the callbacks\nearly_stopping = [EarlyStopping(monitor = 'val_loss', patience = 5, verbose = 1),\n                 ModelCheckpoint(filepath = 'gru_model.h5', monitor = 'val_loss', save_best_only = True)]","9ef5fb93":"def clean_text(txt):\n     return re.sub('[^A-Za-z0-9.]+', ' ', str(txt).lower())","c8ebb04c":"def text_cleaning(text, flg_stemm = False, flg_lemm = True, lst_stopwords = None):\n    '''\n    Converts all text to lower case, tokenize, remove multiple spaces, stopwords, stemming, lemmatize, \n    then convert all back to string\n    \n    text: string - name of column containing text\n    lst_stopwords: list - list of stopwords to remove\n    flg_stemm: bool - whether stemming is to be applied\n    flg_lemm: bool - whether lemmitisation is to be applied\n    '''\n    \n    #clean (convert to lowercase and remove punctuations and characters and then strip)\n    text = re.sub(r'[^\\w\\s]', '', str(text).lower().strip())\n            \n    #tokenize (convert from string to list)\n    lst_text = text.split()\n    \n    #remove Stopwords\n    if lst_stopwords is not None:\n        lst_text = [word for word in lst_text if word not in \n                    stopwords_list]\n                \n    #stemming (remove -ing, -ly, ...)\n    if flg_stemm == True:\n        ps = nltk.stem.porter.PorterStemmer()\n        lst_text = [ps.stem(word) for word in lst_text]\n                \n    #lemmatisation (convert the word into root word)\n    if flg_lemm == True:\n        lem = nltk.stem.wordnet.WordNetLemmatizer()\n        lst_text = [lem.lemmatize(word) for word in lst_text]\n            \n    #back to string from list\n    text = \" \".join(lst_text)\n    return text","275720d4":"MAX_LENGTH = 64\nOVERLAP = 20\n    \ndef shorten_sentences(sentences):\n    \"\"\"\n    Sentences that have more than MAX_LENGTH words will be split\n    into multiple sentences with overlappings.\n    \"\"\"\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences","371be6b9":"#create a function to get the text from the JSON file and append it to the new column in table\ndef read_json_pub(filename, train_path = train_path, output = 'text'):\n    json_path = os.path.join(train_path, (filename + '.json'))\n    headings = []\n    contents = []\n    combined = []\n    with open(json_path, 'r') as f:\n        json_decode = json.load(f)\n        for data in json_decode:\n            headings.append(data.get('section_title'))\n            contents.append(data.get('text'))\n            combined.append(data.get('section_title'))\n            combined.append(data.get('text'))\n    \n    all_headings = ' '.join(headings)\n    all_contents = ' '.join(contents)\n    all_data = '. '.join(combined)\n    \n    if output == 'text':\n        return all_contents\n    elif output == 'head':\n        return all_headings\n    else:\n        return all_data","2a4e61b6":"#read \ntrain = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/train.csv')\n\n#review\ntrain.head()","23d448ff":"import nltk\n\nDATA = []\nlabel_count = 0\nempty_count = 0\n\nfor idx,row in tqdm(train.iterrows()):\n    pub = \"..\/input\/coleridgeinitiative-show-us-the-data\/train\/\" + row.Id + \".json\"            \n    f = open(pub)  \n    data = json.load(f)      \n\n    balanced = False\n    \n    sentences = [clean_text(sentence) for sentence in nltk.sent_tokenize(str(data))]\n    sentences = shorten_sentences(sentences) # make sentences short\n    sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n    \n    for sentence in sentences:          \n      \n        a = re.search(row.cleaned_label.lower(), sentence)      \n        b = re.search(row.dataset_label.lower(), sentence)\n        c = re.search(row.dataset_title.lower(), sentence)\n        cleaned_label = row.cleaned_label.lower()\n        dataset_label = row.dataset_label.lower()\n        dataset_title = row.dataset_title.lower()\n        \n        if  a != None:\n            DATA.append((sentence, cleaned_label))\n            label_count = label_count + 1\n            balanced = True\n        elif b != None:\n            DATA.append((sentence, dataset_label))\n            label_count = label_count + 1\n            balanced = True\n        elif c != None:\n            DATA.append((sentence, dataset_title))\n            label_count = label_count + 1\n            balanced = True            \n        else:\n            if balanced:\n                empty_count = empty_count + 1\n                balanced = False\n    \nprint('Text with dataset:', label_count)\nprint('Text without dataset:', empty_count)","5ed7f288":"#get dataframe\ntrain_df = pd.DataFrame(DATA)\ntrain_df = train_df.rename({0: 'Sentence', 1: 'Label'}, axis = 1)\n\n#review\ntrain_df.tail(10)","fe3aa1cc":"print(train_df['Sentence'][1000])\nprint('\\n')\nprint(train_df['Label'][1000])","7c45e969":"print(train_df['Sentence'][15689])\nprint('\\n')\nprint(train_df['Label'][15678])","1e2b24a6":"print(train_df['Sentence'][23456])\nprint('\\n')\nprint(train_df['Label'][23456])","a55f8f32":"from sklearn.model_selection import train_test_split\n\nX = train_df['Sentence'].to_numpy()\ny = train_df['Label'].to_numpy()\n\n#split traing data into training a validation sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)","03f96c80":"#check shape\nprint('Train sentences:', X_train.shape, '\\n', \n      'Test sentences:', X_test.shape, '\\n', \n      'Train labels:', y_train.shape, '\\n', \n      'Test labels:', y_test.shape)","40ab6ee2":"#https:\/\/developers.google.com\/machine-learning\/guides\/text-classification\/step-3\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\n#limit on the number of features. We use the top 20K features\ntop_k = 20000\n\n#limit on the length of text sequences. Sequences longer than this will be truncated\nmax_sequence_length = 100\n\n#get max sequence length\nmax_length = len(max(X_train, key = len))\nif max_length > max_sequence_length:\n    max_length = max_sequence_length\n    \n#max_vocab_length = 20000 # max number of words to have in our vocabulary\n\n#method to count the unique words in vocabulary and assign each of those words to indices\ntokenizer = Tokenizer(num_words = top_k)\n\n#create vocabulary with training texts\ntokenizer.fit_on_texts(list(X_train))\n\n#convert text into integer sequences\nX_train_seq = tokenizer.texts_to_sequences(X_train)\nX_test_seq = tokenizer.texts_to_sequences(X_test)\n         \n#fix sequence length to max value. \n#sequences shorter than the length are padded in the beginning and sequences longer are truncated at the beginning\n#this turns our lists of integers into a 2D integer tensor of shape (samples, maxlen)\nX_train_pad  = pad_sequences(X_train_seq, maxlen = max_length)\nX_test_pad = pad_sequences(X_test_seq, maxlen = max_length)","9c6adcb4":"#check shape\nprint('Train sentences:', X_train_pad.shape, '\\n', \n      'Test sentences:', X_test_pad.shape, '\\n', \n      'Train labels:', y_train.shape, '\\n', \n      'Test labels:', y_test.shape)","612c131a":"max_length","e91a8a91":"X_train_pad","4eb2912a":"X_test_pad","cf881bba":"#number of unique words in the training data\nsize_of_vocabulary = len(tokenizer.word_index) + 1 #+1 for padding\nprint(size_of_vocabulary)","96d7c5d8":"#get word index\nword_index = tokenizer.word_index","df8f2ba3":"#get number of distinct characters\nmax_id = len(tokenizer.word_index)","15dc9105":"from sklearn import preprocessing\n\n#use the LabelEncoder to convert text labels to integers, 0, 1, 2, etc.\nencoder = preprocessing.LabelEncoder()\n\n#since we have two different data set (X_train and X_test), \n#we need to fit it on all of our data otherwise there might be some categories in the test set X_test that were not in the train set X_train \n#and we will get errors\nencoder.fit(list(y_train) + list(y_test)) \ny_train = encoder.transform(y_train)\ny_test = encoder.transform(y_test)","46190bbf":"num_classes = train_df['Label'].nunique() + 1\nnum_classes","0e005421":"from keras import utils\n\n#binarize the labels for the neural net\ny_train = utils.to_categorical(y_train, num_classes)\ny_test = utils.to_categorical(y_test, num_classes)","a5893280":"print('X_train shape:', X_train_pad.shape)\nprint('X_test shape:', X_test_pad.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","0f360a56":"y_train","f66b95f4":"#load the whole embedding into memory\nembeddings_index = {}\nf = open('..\/input\/glove840b300dtxt\/glove.840B.300d.txt')\n\nfor line in tqdm(f):\n    values = line.split()\n    word = values[0]\n    try:\n        coefs = np.asarray(values[1:], dtype = 'float32')\n        embeddings_index[word] = coefs\n    except ValueError: #catch the exception where there are strings in the GloVe text file, can be avoided if use glove.42B.300d.txt\n        pass\n    \nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","adff8b4c":"#create an embedding matrix for the words we have in the dataset\nembedding_matrix = np.zeros((len(word_index) + 1, 300))\nfor word, i in tqdm(word_index.items()):\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[i] = embedding_vector","1a598d39":"nonzero_elements = np.count_nonzero(np.count_nonzero(embedding_matrix, axis=1))\nnonzero_elements \/ size_of_vocabulary","5410d5ec":"print('X_train shape:', X_train_pad.shape)\nprint('X_test shape:', X_test_pad.shape)\nprint('y_train shape:', y_train.shape)\nprint('y_test shape:', y_test.shape)","c69b7655":"GRU_model = Sequential()\n\n#embedding layer\nGRU_model.add(Embedding(size_of_vocabulary, 300,\n                        weights = [embedding_matrix],\n                        input_length = X_train_pad.shape[0],\n                        trainable = False)) \n\n#model architecture\nGRU_model.add(SpatialDropout1D(0.3))\nGRU_model.add(GRU(300, dropout = 0.3, recurrent_dropout = 0.3, return_sequences = True))\nGRU_model.add(GRU(300, dropout = 0.3, recurrent_dropout = 0.3))\n\n#fully connected layers\nGRU_model.add(Dense(512, activation = 'relu'))\nGRU_model.add(Dropout(0.3))\n\nGRU_model.add(Dense(128, activation = 'relu')) \nGRU_model.add(Dropout(0.3))\n\nGRU_model.add(Dense(64, activation = 'relu')) \nGRU_model.add(Dropout(0.3))\n\n#output layer\nGRU_model.add(Dense(num_classes, activation = 'softmax')) ","4443654a":"#summary\nGRU_model.summary()","5b8176c3":"#plot\nplot_model(GRU_model, to_file = 'GRU_model_plot.png', show_shapes = True, show_layer_names = True)","b4cdcbc6":"#compile\nGRU_model.compile(optimizer = keras.optimizers.Adam(0.0001), \n                    loss = 'categorical_crossentropy',\n                    metrics = ['acc']) ","6633afe1":"start = datetime.datetime.now()\nbatch_size = 256\n\n#fit\nGRU_history = GRU_model.fit(np.array(X_train_pad), np.array(y_train),\n                            #class_weight = weights, \n                            batch_size = batch_size,\n                            epochs = 30,\n                            validation_data = (np.array(X_test_pad), np.array(y_test)),\n                            steps_per_epoch = X_train_pad.shape[0] \/\/ 256,\n                            validation_steps = X_test_pad.shape[0] \/\/ 256,\n                            verbose = 1,\n                            callbacks = early_stopping)","f485ae95":"end = datetime.datetime.now()\nelapsed = end - start\nprint('Training took a total of {}'.format(elapsed))","63607bc3":"#save model\nGRU_model.save('gru_model.h5')","05580170":"fig , ax = plt.subplots(1,2)\nfig.set_size_inches(20, 8)\n\nGRU_train_acc = GRU_history.history['acc']\nGRU_train_loss = GRU_history.history['loss']\nGRU_val_acc = GRU_history.history['val_acc']\nGRU_val_loss = GRU_history.history['val_loss']\n\nepochs = range(1, len(GRU_train_acc) + 1)\n\nax[0].plot(epochs , GRU_train_acc , 'g-o' , label = 'Training Accuracy')\nax[0].plot(epochs , GRU_val_acc , 'y-o' , label = 'Validation Accuracy')\nax[0].set_title('GRU Model Train & Validation Accuracy')\nax[0].legend(loc = 'lower right')\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('Accuracy')\n\nax[1].plot(epochs, GRU_train_loss , 'g-o' , label = 'Training Loss')\nax[1].plot(epochs, GRU_val_loss , 'y-o' , label = 'Validation Loss')\nax[1].set_title('GRU Model Train & Validation Loss')\nax[1].legend()\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('Accuracy')\n\nplt.show()","2b11b860":"#save\nplt.savefig('gru_acc_loss.png')","48d55cef":"print('Train loss & accuracy:', GRU_model.evaluate(X_train_pad, y_train))\nprint('\\n')\nprint('Test loss & accuracy:', GRU_model.evaluate(X_test_pad, y_test))","80d02d9b":"#make prediction\nGRU_yhat_test = GRU_model.predict(X_test_pad)\n\n#to evaluate accuracy we need a vector of labels\nGRU_yhat_test = np.argmax(GRU_yhat_test, axis = 1)\nGRU_y_test = np.argmax(y_test, axis = 1)\n\n#get classification report\nprint('Model: GRU', '\\n', classification_report(GRU_y_test, GRU_yhat_test))","deef5324":"#summary table\nsummary_table = pd.DataFrame({'Model': [],\n                              'Accuracy': [],\n                              'Precision': [], 'Recall': [], 'F1': []})","2e353e36":"#update summary table\nsummary_table.loc[0] = ['RNN GRU',\n                        round(accuracy_score(GRU_y_test, GRU_yhat_test), 2),\n                        round(precision_score(GRU_y_test, GRU_yhat_test, average = 'macro'), 2), \n                        round(recall_score(GRU_y_test, GRU_yhat_test, average = 'macro'), 2), \n                        round(f1_score(GRU_y_test, GRU_yhat_test, average = 'macro'), 2)]\nsummary_table.head()","7367b121":"#save\nsummary_table.to_csv('gru_summary_table.csv')","1e764014":"#get text\ntqdm.pandas()\ntrain['text'] = train['Id'].progress_apply(read_json_pub)\n\n#clean text\ntrain['text'] = train['text'].progress_apply(clean_text)","e92bff89":"from functools import partial\n\n#read data\nsample_submission = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\n\n#apply the function to submission data\ntqdm.pandas()\nsample_submission['text'] = sample_submission['Id'].progress_apply(partial(read_json_pub, train_path = test_path))\n\n#review\nsample_submission.head()","7c462f62":"temp_1 = [x.lower() for x in train['dataset_label'].unique()]\ntemp_2 = [x.lower() for x in train['dataset_title'].unique()]\ntemp_3 = [x.lower() for x in train['cleaned_label'].unique()]\n\nexisting_labels = set(temp_1 + temp_2 + temp_3)","dc27e9e0":"literal_matching = True\ngru_prediction = True\n\nid_list = []\nlabels_list = []\n\nfor index, row in tqdm(sample_submission.iterrows()):\n\n    sample_text = row['text']\n\n    row_id = row['Id']\n    \n    #takes only the rows where train file is identical to a test file\n    temp_df = train[train['text'] == clean_text(sample_text)]\n    cleaned_labels = temp_df['cleaned_label'].to_list()\n    \n    #literal_matching \n    if literal_matching:\n        for known_label in existing_labels:\n            if known_label in sample_text.lower():    \n                cleaned_labels.append(clean_text(known_label))\n            \n        print('cleaned label:', set(cleaned_labels))   \n    \n    #gru_prediction \n    if gru_prediction:\n        \n        #extract sentences\n        sentences = [clean_text(sentence) for sentence in nltk.sent_tokenize(str(sample_text))]\n        sentences = shorten_sentences(sentences) # make sentences short\n        sentences = [sentence for sentence in sentences if len(sentence) > 10] # only accept sentences with length > 10 chars\n        \n        tokenizer.fit_on_texts(list(sentence))\n        sentence_seq = tokenizer.texts_to_sequences([sentence])\n        sentence_pad  = pad_sequences(sentence_seq, maxlen = max_length)\n            \n        #predict\n        gru_labels = GRU_model.predict(sentence_pad)\n    \n        #get label\n        gru_labels = encoder.inverse_transform([np.argmax(gru_labels)])\n        print('gru label:', set(gru_labels))\n        gru_labels = set(gru_labels)\n        \n    cleaned_labels += gru_labels\n        \n    cleaned_labels = set(cleaned_labels)\n    cleaned_labels = [clean_text(x) for x in cleaned_labels]    \n    labels_list.append('|'.join(cleaned_labels))\n    print('label list:', labels_list)   \n    id_list.append(row_id)\n    print('\\n')","1eba3e72":"#get dataframe\nsample_submission['PredictionString'] = labels_list\nsample_submission.drop(columns = 'text', axis = 1, inplace = True)\nsample_submission","4ee5d0eb":"print(sample_submission['PredictionString'][0])\nprint('\\n')\nprint(sample_submission['PredictionString'][1])\nprint('\\n')\nprint(sample_submission['PredictionString'][2])\nprint('\\n')\nprint(sample_submission['PredictionString'][3])","43e7aae7":"#save\nsample_submission.to_csv('submission.csv', index = False)\n\n#check\nsubmission = pd.read_csv('submission.csv')\nsubmission","b6a6824a":"import os\nimport psutil\nprocess = psutil.Process(os.getpid())\nprint(process.memory_percent())","18db6680":"### Binarize Label","cf6fba70":"# Functions to Prepare Text","81bea73d":"# PREPROCESSING","f473e107":"# PREDICTION","fbee0f09":"# OBTAIN","ff108d4e":"Words in a given dataset are most likely not unique to that dataset. We can thus learn the relationship between the words in our dataset using other dataset(s). To do so, we can transfer an embedding learned from another dataset into our embedding layer. These embeddings are referred to as pre-trained embeddings. Using a pre-trained embedding gives the model a head start in the learning process.\n\nThere are pre-trained embeddings available that have been trained using large corpora, such as GloVe. GloVe has been trained on multiple corpora (primarily Wikipedia). ","37ca0cbb":"# DEEP LEARNING: GRU\n\n* Tokenizes the texts into words\n* Creates a vocabulary using the top 20,000 tokens\n* Converts the tokens into sequence vectors\n* Pads the sequences to a fixed sequence length","c931f2c3":"# GRU","e0997e10":"### Train-Test-Split","af76ff91":"# GRU with GloVe Embedding\n\nGlobal Vectors for Word Representation, or GloVe, is an \u201cunsupervised learning algorithm for obtaining vector representations for words.\u201d Simply put, GloVe allows us to take a corpus of text, and intuitively transform each word in that corpus into a position in a high-dimensional space. This means that similar words will be placed together.","0abd3012":"### Tokenize Features","1bedad71":"### Encode Label","463bea5f":"# Libraries","6c93e365":"### Model Evaluation"}}