{"cell_type":{"5e0d87d0":"code","7eb7dfed":"code","c7cbe189":"code","c6de62bf":"code","91cf71f0":"code","9ebc85a5":"code","04749ba0":"code","42abb5d9":"code","874dc402":"code","713f0863":"code","4aa8a36d":"code","c0378e54":"code","230e9424":"code","d3dc747e":"code","afda611b":"code","ce4285e8":"code","dafb35d8":"code","da3a7f43":"markdown","b0d332e9":"markdown","46743044":"markdown","e3a39669":"markdown","47925e9f":"markdown","75649ac1":"markdown"},"source":{"5e0d87d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7eb7dfed":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub","c7cbe189":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","c6de62bf":"import tokenization","91cf71f0":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","9ebc85a5":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    out = Dense(1, activation='sigmoid')(clf_output)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=2e-6), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","04749ba0":"train = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","42abb5d9":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","874dc402":"vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","713f0863":"train_input = bert_encode(train.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test.text.values, tokenizer, max_len=160)\ntrain_labels = train.target.values","4aa8a36d":"train.shape","c0378e54":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","230e9424":"callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\ntrain_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=20,\n    batch_size=8,\n    callbacks=[callback]\n)\n\nmodel.save('model_bert.h5')","d3dc747e":"prediction= model.predict(test_input)","afda611b":"submission['target'] = prediction.round().astype(int)\nsubmission.to_csv('submission.csv', index=False)","ce4285e8":"submission.shape\n","dafb35d8":"submission.head()","da3a7f43":"# BERT MODEL\nIt is Google\u2019s neural network-based technique for natural language processing (NLP) pre-training. BERT stands for Bidirectional Encoder Representations from Transformers.\n\n# Pipeline\n\n![image.png](attachment:image.png)","b0d332e9":"# Training process","46743044":"Bert is powerful for text classificatin,Q&A,Dialouge system,Autosuggestions also.","e3a39669":"# Model Building Process","47925e9f":"# Tokenizer loaded from Bert layer","75649ac1":"# Bert(Tensorflow-hub)\nI will load the BERT model from TF-Hub, tokenize our sentences using the matching preprocessing model from TF-Hub, then feed in the tokenized sentences to the model."}}