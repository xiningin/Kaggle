{"cell_type":{"c11798f0":"code","8f6ce869":"code","48f6af49":"code","c778adae":"code","bbfe175b":"code","dc04bdd8":"code","51ac146a":"code","91128824":"code","39adad04":"code","f6d768a4":"code","8dddb6e4":"code","aff56e81":"code","557cefd6":"code","ffe17477":"code","4ccafd8f":"code","2c3613ee":"code","dddf2e18":"code","88c9fb29":"code","456be04b":"code","b7db7238":"code","80470b8a":"code","41e1a810":"code","6a548928":"code","a64f48fa":"code","a152934c":"code","ff8aee82":"code","721e18a8":"code","c4722347":"code","b39b6ead":"code","67d1d4aa":"code","09acd470":"code","af91153c":"code","69632f23":"code","07205416":"code","bd1412dd":"code","2c69617f":"code","97b130ac":"code","b4eaeddf":"code","4450e2ee":"code","ea1829a7":"code","8536feec":"code","62678f9b":"markdown","b1fca604":"markdown","c20fe66f":"markdown","f0d2b741":"markdown","4bb05d4a":"markdown","2e669335":"markdown","59db56ea":"markdown","85a88c3f":"markdown","68a9dc64":"markdown","ce4b4743":"markdown","86fddd81":"markdown","b05a08a5":"markdown","03971ad2":"markdown","37f40b51":"markdown","5983a6fc":"markdown","1b088e1c":"markdown","19f3d957":"markdown","3244616f":"markdown","b755945a":"markdown","07979afd":"markdown","91b95c5f":"markdown","77ef21a4":"markdown","9f9be497":"markdown","a54d73b7":"markdown","bec51208":"markdown","5913895d":"markdown","597a120c":"markdown","0013bd7d":"markdown","d85e829a":"markdown","2fc1acad":"markdown","97d95ba5":"markdown","34845e43":"markdown","3e6d232d":"markdown","822f34da":"markdown"},"source":{"c11798f0":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport networkx as nx\nimport numpy as np\nimport math\nfrom random import sample\nfrom IPython.display import display \nimport statistics as stat\nfrom collections import Counter","8f6ce869":"links=pd.read_csv('..\/input\/stack-overflow-tag-network\/stack_network_links.csv')\nnodes=pd.read_csv('..\/input\/stack-overflow-tag-network\/stack_network_nodes.csv')\n\n# display df and check null\ndisplay(links.head(5))\nprint('Contains null =',links.isnull().values.any())\ndisplay(nodes.head(5))\nprint('Contains null =',nodes.isnull().values.any())","48f6af49":"# num of nodes and edges\nnum_links=len(links)\nnum_nodes=len(nodes)\n\nprint('Number of nodes =',num_nodes)\nprint('Number of links =', num_links)","c778adae":"# plot the histogram of the link value and node size\nfigsize=(12,4)\nfig, (ax1, ax2) = plt.subplots(1, 2,figsize=figsize)\nfontsize=14\n\nplt.subplot(1, 2, 1)\nax1=links.value.hist()\nax1.set_title('Link Value Distribution',fontsize=fontsize)\nax1.set_xlabel('link value')\nax1.plot()\n\nplt.subplot(1, 2, 2)\nax2=nodes.nodesize.hist(color='red')\nax2.set_title('Node Size Distribution',fontsize=fontsize)\nax2.set_xlabel('Node Size')","bbfe175b":"group_count=nodes['group'].value_counts()\n\ngroup_name=group_count.index\ngroup_name=group_name.astype(str)\ngroup_cnt=group_count.values\n\nprint('group_name:',group_name)\nprint('group_cnt',group_cnt,'\\n')\nprint('Length check =',len(group_cnt)==len(group_name))","dc04bdd8":"# function for bar plot with numerical label\ndef bar_plt(figsize,title,width,x,y,xlabel,ylabel):\n    fig, ax = plt.subplots(figsize=figsize)\n    # set title\n    ax.set_title(title,fontsize=14)\n    # set x axis label location\n    x_loc=np.arange(len(x))\n    ax.set_xticks(x_loc)\n    # height\n    height=list(y)\n    # bar rectangle\n    rect = ax.bar(x, height, width,color='Lightblue')\n    # set x and y label\n    ax.set_ylabel(ylabel)\n    ax.set_xlabel(xlabel)\n    # set the text for each rect\n    for j in range(len(x_loc)):\n        ax.text(x_loc[j],height[j],str(height[j]),ha='center')\n    ","51ac146a":"# node grpup cout bar plot\nbar_plt(figsize=(15,5),\n        title='Node group count bar plot',\n        width=0.4,\n        x=group_name,\n        y=group_cnt,\n        xlabel='group name',\n        ylabel='count')","91128824":"# input group number, return tags\ndef tags_in_group(group_number):\n    tags=nodes['name'].loc[nodes['group']==group_number]\n    tags=list(tags)\n    print('Number of tags in group',group_number,':',len(tags))\n    return tags","39adad04":"largest_group=group_count.idxmax()\nprint('Largest group is: ',largest_group)\n\ntags_in_group(1)","f6d768a4":"# input tags, return groups belongs to\ndef group_for_tag(tag):\n    group=nodes['group'].loc[nodes['name']==tag].values\n    group=group[0]\n    group_size=len(nodes.loc[nodes['group']==group])\n    \n    print ('The tag',tag,'is in group: ',group)\n    print ('group',group,'size: ',group_size)\n    return group","8dddb6e4":"group_for_tag('python')\ngroup_for_tag('java')\ngroup_for_tag('mysql')","aff56e81":"nodes['nodesize'].describe()","557cefd6":"# node size\nnode_size=nodes['nodesize']\n# adjust the value for better display\nnode_size=pd.Series(node_size).array*100\nnode_size=list(node_size)\n\nprint(type(node_size))\nprint('check length: ',len(node_size)==len(nodes))","ffe17477":"node_size[1]","4ccafd8f":"#set color for graph\n# color = nodes['group']\ncolors=nodes['group']\ncolors=colors.values\n\nprint(type(colors))\nprint('check length: ',len(colors)==len(nodes))","2c3613ee":"colors[1]","dddf2e18":"# links['value'] = widths * constant\nbase=2\nwidths=links['value']\nwidths=widths\/min(widths)\nwidths=base**widths\nwidths=list(widths.values)\n\nprint(type(widths))\nprint('check length: ',len(widths)==len(links))\n","88c9fb29":"# function to generate weighted edges from edges dataframe\ndef edge_weight_gen(link):\n    edges=[]\n    for i in range(len(link)):\n        edge=(link['source'][i],link['target'][i],link['value'][i])\n        edges.append(edge)\n    print('check length: ',len(edges)==len(link))\n    return edges\n  ","456be04b":"edges=edge_weight_gen(links)","b7db7238":"# labels\nnodelist=nodes['name']\nlabels=dict(zip(nodelist,nodelist))\nprint('type of labels: ',type(labels))","80470b8a":"G= nx.DiGraph()\nG.add_weighted_edges_from(edges)\npos = nx.layout.spring_layout(G,k=0.8)\n\nprint('check length: ',len(G.edges())==len(links))\nprint(type(G))","41e1a810":"# sample edge to convert the data type\nsample_edges=sample(G.edges,5)\nprint(sample_edges)\n\n# view the edge attributes\nG.edges[sample_edges[0]]","6a548928":"def draw_graph(figsize,pos,G,node_size,title): # labels could choose 'None'\n    fig = plt.figure(figsize=figsize)\n    pos=pos\n    G=G\n    node_size=node_size\n    \n    nx.draw_networkx_nodes(G,\n                           pos,\n                           node_size=node_size,\n                           node_color=colors,\n                           alpha=1)\n    \n    nx.draw_networkx_edges(G,\n                           pos,\n                           edge_color='r',\n                           width=widths,\n                           alpha=0.5)\n    \n    nx.draw_networkx_labels(G, \n                            pos,\n                            labels=labels,\n                            font_color='blue',\n                            font_size=120,\n                            alpha=1,\n                            verticalalignment='top')\n    plt.title(title,fontsize=80,color='blue')\n","a64f48fa":"draw_graph(figsize=(200,200),\n           pos=pos,\n           G=G,\n           node_size=node_size,\n          title='Whole tag network view')","a152934c":"# average degree of graph\ndegrees=[G.degree(n) for n in G.nodes()]\naverage_degree=stat.mean(degrees)\nprint('the average_degree =',average_degree)","ff8aee82":"degrees_counter=Counter(degrees)\n# The zip() function returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, \n# and then the second item in each passed iterator are paired together etc.\ndegrees,degrees_frequency=zip(*degrees_counter.items())\ndegrees=list(degrees)\n\ndegrees_frequency=list(degrees_frequency)\n\nfig, ax = plt.subplots(figsize=(12,5))\n# set title\nax.set_title('degree distribution',fontsize=14)\nplt.bar(degrees,degrees_frequency,\n        color='green')","721e18a8":"def top_centrality_nodes(degree_cnt):\n    dict_items=degree_cnt.items()\n    dict_items_sorted=sorted(dict_items,key=lambda item:item[1],reverse=True)\n    \n    degree_cnt_sorted={k:v for k,v in dict_items_sorted}\n    most_impt_nodes=list(degree_cnt_sorted)[:10]\n    \n    return most_impt_nodes","c4722347":"# function to plot the top centrality nodes\ndef top_cnt_plot(degree_cnt,cent_type):\n    dict_items=degree_cnt.items()\n    dict_items_sorted=sorted(dict_items,key=lambda item:item[1],reverse=True)\n    # plot the bar chart for the top cnt tags\n    top_10_tag=dict_items_sorted[:10]\n    top_tag=[]\n    top_cnt=[]\n    for tag in top_10_tag:\n        top_tag.append(tag[0])\n        top_cnt.append(tag[1])\n        \n    fig = plt.figure(figsize=(11,4))\n    plt.title('The top 10 '+cent_type+'-centrality tags',fontsize=14)\n    plt.bar(top_tag,top_cnt,color='blue')\n    # plot end","b39b6ead":"degree_cnt_katz=nx.katz_centrality_numpy(G)\ndegree_cnt_in=nx.in_degree_centrality(G)\ndegree_cnt_load=nx.load_centrality(G)\n\nprint('top 10 katz centrality\\n',top_centrality_nodes(degree_cnt_katz))\nprint('top 10 in-degree centrality\\n',top_centrality_nodes(degree_cnt_in))\nprint('top 10 load degree centrality\\n',top_centrality_nodes(degree_cnt_load))\n\nimpt_nodes_katz=top_centrality_nodes(degree_cnt_katz)\nimpt_nodes_in=top_centrality_nodes(degree_cnt_in)\nimpt_nodes_load=top_centrality_nodes(degree_cnt_load)","67d1d4aa":"top_cnt_plot(degree_cnt=degree_cnt_katz,\n             cent_type='katz')\n\ntop_cnt_plot(degree_cnt=degree_cnt_in,\n             cent_type='in')\n\ntop_cnt_plot(degree_cnt=degree_cnt_load,\n             cent_type='load')","09acd470":"# create dic for top 10 tag labels ---  for highlight purpose\ndef impt_labels(impt_nodes,G):\n    impt_labels={}\n    for node in G.nodes():\n        if node in impt_nodes:\n            #set the node name as the key and the label as its value \n            impt_labels[node] = node\n    return impt_labels","af91153c":"impt_labels_load=impt_labels(impt_nodes_load,G)\nimpt_labels_in=impt_labels(impt_nodes_in,G)\nimpt_labels_katz=impt_labels(impt_nodes_katz,G)","69632f23":"def draw_graph_cnt(figsize,pos,graph,node_size,node_list,select_label,title): # labels could choose 'None'\n    fig = plt.figure(figsize=figsize)\n    pos=pos\n    G=graph\n    select_label=select_label\n    nodelist=node_list\n    \n    nx.draw_networkx_nodes(G,\n                           pos,\n                           node_size=node_size,\n                           node_color=colors,\n                           alpha=1)\n    \n    nx.draw_networkx_nodes(G,\n                           pos,\n                           node_color='yellow',\n                           node_size=20000,\n                           nodelist=nodelist,\n                           alpha=1)\n    \n    nx.draw_networkx_edges(G,\n                           pos,\n                           edge_color='r',\n                           width=widths,\n                           alpha=0.1)\n     \n    nx.draw_networkx_labels(G, \n                            pos,\n                            labels=select_label,\n                            font_color='red',\n                            font_size=45,\n                            alpha=1,\n                            verticalalignment='top')\n    plt.title(title,fontsize=65,color='blue')\n    \n","07205416":"draw_graph_cnt(figsize=(60,60),\n               pos=pos,\n               graph=G,\n               node_size=node_size,\n               node_list=impt_nodes_load,\n               select_label=impt_labels_load,\n               title='Top 10 high centrality tags in network -- load centreality')","bd1412dd":"draw_graph_cnt(figsize=(70,70),\n               pos=pos,\n               graph=G,\n               node_size=node_size,\n               node_list=impt_nodes_in,\n               select_label=impt_labels_in,\n               title='Top 10 high centrality tags in network -- in centrality')","2c69617f":"draw_graph_cnt(figsize=(70,60),\n               pos=pos,\n               graph=G,\n               node_size=node_size,\n               node_list=impt_nodes_katz,\n               select_label=impt_labels_katz,\n               title='Top 10 high centrality tags in network -- katz centrality')","97b130ac":"def related_subgraph(select_node):\n    subnodes=[]\n    for source,target in G.edges:\n        if source==select_node:\n            subnodes.append(target)\n            #print(target)\n        if target==select_node:\n            subnodes.append(source)\n            #print(source)\n        subnodes.append(select_node)\n    subnodes=list(set(subnodes))\n    subgraph= G.subgraph(subnodes)\n    return subgraph\n","b4eaeddf":"interest_tags=['python','linux','c++','java','jquery','mysql','javascript','json','asp.net','c']\nsub_G_name=['G_py','G_linux','G_cpp','G_java','G_jq','G_sql','G_javascript','G_json','G_asp.net','G_c']\nsub_G_list=[]\nfor i in range(len(interest_tags)):\n    tag=interest_tags[i]\n    sub_G_list.append(related_subgraph(tag))\n    \nsub_G_dic=dict(zip(sub_G_name,sub_G_list))","4450e2ee":"sub_G_dic","ea1829a7":"# function take input name of graph, the name of interest rate tag\n# e.g. \n# int_graph='G_py'\n# int_tag_name='python'\n\ndef plot_int_tag_graph(int_graph,int_tag_name):\n    # access the G_int\n    G_int=sub_G_dic[int_graph]\n\n    # width of the G_int\n    def width_gen(G_int):\n        # width of the G_int\n        base=10\n        width=nx.get_edge_attributes(G_int, 'weight')\n        width=list(width.values())\n        width=width\/min(width)\n        width=base*width\n        return width\n    width=width_gen(G_int)\n\n    # function to extract nodes df for G_int\n    def int_node_df(G_int):\n        int_nodes=list(G_int.nodes)\n        int_df=nodes[nodes['name'].isin(int_nodes)]\n        return int_df\n    int_df=int_node_df(G_int)\n\n\n    # dict for assign attributes to the node (group and nodesize)\n    int_node_dict=int_df.set_index('name').to_dict(orient='index')\n\n    # set the network node attributes\n    nx.set_node_attributes(G_int,int_node_dict)\n    nx.get_node_attributes(G_int,'group')\n\n    # get node size \n    int_node_size=list(nx.get_node_attributes(G_int,'nodesize').values())\n    int_node_size=pd.Series(int_node_size).array*20\n\n    # get node color\n    int_node_color=list(nx.get_node_attributes(G_int,'group').values())\n\n    # use func to create dict for all labels\n    int_labels=impt_labels(list(G_int.nodes),G_int)\n    \n    def draw_graph_int(figsize,k,graph,node_size,node_color,node_int,edge_width,label,title): # labels could choose 'None'\n        fig = plt.figure(figsize=figsize)\n        G=graph\n        label=label\n        node_int=list(node_int)\n        pos = nx.layout.spring_layout(G,k)\n\n        nx.draw_networkx_nodes(G,\n                               pos,\n                               node_size=node_size,\n                               node_color=node_color,\n                               alpha=1)\n\n        nx.draw_networkx_nodes(G,\n                               pos,\n                               node_color='red',\n                               nodelist=node_int,\n                               alpha=1)\n\n        nx.draw_networkx_edges(G,\n                               pos,\n                               edge_color='blue',\n                               width=edge_width,\n                               alpha=0.1)\n\n        nx.draw_networkx_labels(G, \n                                pos,\n                                labels=label,\n                                font_color='red',\n                                font_size=75,\n                                alpha=1,\n                                verticalalignment='bottom')\n        plt.title(title,fontsize=60,color='blue')\n\n    # draw the graph\n    fig=draw_graph_int(figsize=(50,40),\n                       k=0.1,\n                       graph=G_int,\n                       node_size=int_node_size,\n                       node_color=int_node_color,\n                       node_int=[int_tag_name],\n                       edge_width=width,\n                       label=int_labels,\n                       title=int_graph+' Network')\n","8536feec":"# plot everything in the interest list\nfor i in range(len(interest_tags)):\n    int_tag_name=interest_tags[i]\n    int_graph=sub_G_name[i]\n    plot_int_tag_graph(int_graph,\n                       int_tag_name)","62678f9b":"### Before that, view the whole network","b1fca604":"### 4.3 Plot the top 10 important node in tag network","c20fe66f":"<li>--linux<\/li>\n<li>--python<\/li>\n<li>--mysql<\/li>\n<li>--c++<\/li>\n<li>--java<\/li>\n<li>--jquery<\/li>","f0d2b741":"### 2.2 links['value'] and nodes['nodesize'] distribution hist plot","4bb05d4a":"### 5.1 function find the related nodes to the selcet node and convert it to G_int (interest)","2e669335":"#### ---- construct labels (dict) for graph draw labels","59db56ea":"# 4. Degree analysis","85a88c3f":"### 5.3. Select tag related network plot","68a9dc64":"### 3.1.1 node size = node_size","ce4b4743":"### 3.1 General workflow from dataframe to network","86fddd81":"# Stack overflow tag network","b05a08a5":"#### 2.3.1 Define a function that could:<br>-- input group, return tags contains<br>-- input tags, return group belongs to","03971ad2":"#### group 1 contains tag : python; machine-learning;etc","37f40b51":"### 4.2 degree of centrality ","5983a6fc":"#### 3 types of graph\n<li>select tag as core (tag related graph)---highlight the core solution:construct graph<\/li>\n<li>specific group network(no highlight) solutio: construct graph<\/li>\n<li>whole network--highlight selected<\/li>","1b088e1c":"# 2. EDA","19f3d957":"<li>create a general workflow from dataframe to network<\/li>\n<li>generate multiple dataframes based on need (e.g.:for each group; for specific tag connected tag)<\/li>\n<li>draw graph based on corresponding dataframe<\/li>\n","3244616f":"<li>from df --- node:size=nodes['nodesize']<br>color=nodes['group']<\/li>\n<li>from df --- edge:width=links['value'])<\/li>\n<li>layout algorithm:spring, spiral,pagerank<\/li>\n<li>highlight selected nodes: node_size=input<br>node_color=input?<\/li>\n","b755945a":"### 3.1.4 weighted edges to construct DiGraph","07979afd":"### 2.3 nodes['group'] distribution bar plot","91b95c5f":"### 2.1 number of nodes and edges","77ef21a4":"### 3.1.5 Construct DiGraph","9f9be497":"<li>links['value']= the weight of the edge, the width of the edge<\/li>\n<li>nodes['group']= the color of the node; the closeness of the node<\/li>\n<li>nodes['nodesize']= the node size<\/li>","a54d73b7":"### 4.1 Degree distribution plot --- scale-free graph","bec51208":"# 5. plot selected tag related network","5913895d":"interest_tags=['python','linux','c++','java','jquery','mysql','javascript','json','asp.net']\nsub_G_name=['G_py','G_linux','G_cpp','G_java','G_jq','G_sql','G_javascript','G_json','G_asp.net']\n","597a120c":"# 1. read data to df","0013bd7d":"<li>number of nodes and edges<\/li>\n<li>links['value'] distribution (bar or hist)<\/li>\n<li>nodes['nodesize'] distribution<\/li>\n<li>nodes['group'] statistics<\/li>","d85e829a":"# 3. Subgraph: nodes,edges and attributes construction","2fc1acad":"### 5.2 Functions use to plot the selected tag related network\n    ","97d95ba5":"#### Some key tags that worth study:\n<li>--linux<\/li>\n<li>--python<\/li>\n<li>--mysql<\/li>\n<li>--c++<\/li>\n<li>--java<\/li>\n<li>--.net<\/li>","34845e43":"### 3.1.2 node color = colors","3e6d232d":"### 3.1.3 width of edges = widths","822f34da":"### Set lists for interested tag and create sub graph for them\n#### -- Here you can add your own interest tag into this list"}}