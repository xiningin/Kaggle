{"cell_type":{"9d5d846b":"code","10a62bcb":"code","d12fbeff":"code","31d2d945":"code","d45e015f":"code","1bc52355":"code","cc945f6d":"code","7dda5549":"code","50967d17":"code","237bdc0d":"code","39e25cdb":"code","7305e42b":"code","dba59351":"code","348ad2b9":"code","729433f6":"code","f1c25e1d":"code","458ed1ca":"code","87fd1ac6":"code","a6dcb4b4":"code","ee7b2a47":"code","0e955e5c":"code","1b13c1d7":"code","1772c9d7":"code","097bd95c":"code","91500c6e":"code","791d1efe":"code","c3082ebc":"code","8087ae51":"code","6234358e":"code","2ee7d56c":"code","0738f1f5":"code","4d59627f":"code","db296db4":"code","447b1437":"code","dbb16c50":"code","5edb2db1":"code","f002c301":"code","af35cfe6":"code","8dc9ebf6":"code","957af68c":"code","61f1315e":"code","bc8922d0":"code","428fe087":"code","8441279c":"code","1f30ca94":"code","8b4d9afd":"code","5efcfc06":"code","249ccf45":"code","8cee536d":"markdown","091e7b46":"markdown","35fd12f6":"markdown"},"source":{"9d5d846b":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import norm\nfrom scipy import integrate\nimport itertools \nimport pylab as plt\nimport datetime\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom plotly import tools\nimport string\nimport plotly.offline as py\n# py.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport math\nimport re\nimport h2o\nfrom h2o.estimators.random_forest import H2ORandomForestEstimator\nfrom h2o.grid.grid_search import H2OGridSearch\nfrom string import punctuation\nimport time\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\npd.options.display.max_rows = 4000\n\n\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport sklearn.metrics as mtr\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nimport time\nimport lightgbm as lgb\n\nfrom keras.layers import Dense,Input,Flatten,concatenate,Dropout,Lambda,BatchNormalization,LeakyReLU,PReLU,ELU,ThresholdedReLU,Concatenate\nfrom keras.models import Model\nimport keras.backend as K\nfrom  keras.callbacks import EarlyStopping,ModelCheckpoint\nfrom keras.optimizers import Adam\nimport re\nfrom keras.losses import binary_crossentropy\nfrom  keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, Callback\nimport codecs\nfrom keras.utils import to_categorical\nfrom sklearn.metrics import f1_score\n\nimport datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n\n\n\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 150)","10a62bcb":"def clean_WindDirection(txt):\n    if isinstance(txt, int):\n        return ('NA')\n    elif pd.isna(txt):\n        return ('NA')\n    else:\n        if pd.isna(txt):\n            return np.nan\n        txt = txt.lower()\n        txt = ''.join([c for c in txt if c not in punctuation])\n        txt = txt.replace('from', '')\n        txt = txt.replace(' ', '')\n        txt = txt.replace('north', 'n')\n        txt = txt.replace('south', 's')\n        txt = txt.replace('west', 'w')\n        txt = txt.replace('east', 'e')\n        return txt\ndef transform_WindDirection(txt):\n    if pd.isna(txt):\n        return ('-1')\n    \n    if txt=='n':\n        return 0\n    elif txt=='nne' or txt=='nen':\n        return 1\/8\n    elif txt=='ne':\n        return 2\/8\n    elif txt=='ene' or txt=='nee':\n        return 3\/8\n    elif txt=='e':\n        return 4\/8\n    elif txt=='ese' or txt=='see':\n        return 5\/8\n    elif txt=='se':\n        return 6\/8\n    elif txt=='ses' or txt=='sse':\n        return 7\/8\n    elif txt=='s':\n        return 8\/8\n    elif txt=='ssw' or txt=='sws':\n        return 9\/8\n    elif txt=='sw':\n        return 10\/8\n    elif txt=='sww' or txt=='wsw':\n        return 11\/8\n    elif txt=='w':\n        return 12\/8\n    elif txt=='wnw' or txt=='nww':\n        return 13\/8\n    elif txt=='nw':\n        return 14\/8\n    elif txt=='nwn' or txt=='nnw':\n        return 15\/8 \n    else: return -1\n    return np.nan\ndef clean_StadiumType(txt):\n    if pd.isna(txt):\n        return ('NA')\n    if isinstance(txt, int):\n        return ('NA')\n    else:\n        txt = txt.lower()\n        txt = ''.join([c for c in txt if c not in punctuation])\n        txt = re.sub(' +', ' ', txt)\n        txt = txt.strip()\n        txt = txt.replace('outside', 'outdoor')\n        txt = txt.replace('outdor', 'outdoor')\n        txt = txt.replace('outddors', 'outdoor')\n        txt = txt.replace('outdoors', 'outdoor')\n        txt = txt.replace('oudoor', 'outdoor')\n        txt = txt.replace('indoors', 'indoor')\n        txt = txt.replace('ourdoor', 'outdoor')\n        txt = txt.replace('retractable', 'rtr.')\n        return txt\ndef set_Turf (df):\n    Turf = {'Field Turf':'Artificial', 'A-Turf Titan':'Artificial', 'Grass':'Natural', \n            'UBU Sports Speed S5-M':'Artificial', 'Artificial':'Artificial', \n            'DD GrassMaster':'Artificial', 'Natural Grass':'Natural', 'UBU Speed Series-S5-M':'Artificial', \n            'FieldTurf':'Artificial', 'FieldTurf 360':'Artificial', 'Natural grass':'Natural', 'grass':'Natural',\n            'Natural':'Natural', 'Artifical':'Artificial', 'FieldTurf360':'Artificial', 'Naturall Grass':'Natural', \n            'Field turf':'Artificial', 'SISGrass':'Artificial', 'Twenty-Four\/Seven Turf':'Artificial', \n            'natural grass':'Natural'} \n    df['Turf_type']=df['Turf'].map(Turf)\n    return df\n\ndef GameWeather(df):\n    if isinstance( df['GameWeather'].iloc[0], np.integer):\n        df['GameWeather']='NA'\n        return (df)      \n    else:\n        df['GameWeather'] = df['GameWeather'].str.lower()\n        indoor = \"indoor\"\n        df['GameWeather'] = df['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\n        df['GameWeather'] = df['GameWeather'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\n        df['GameWeather'] = df['GameWeather'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\n        df['GameWeather'] = df['GameWeather'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n    return df","d12fbeff":"def clean_TeamAbbreviations(train_df):\n    # Fix Team Names\n    train_df.loc[train_df.VisitorTeamAbbr == \"ARI\", 'VisitorTeamAbbr'] = \"ARZ\"\n    train_df.loc[train_df.HomeTeamAbbr == \"ARI\", 'HomeTeamAbbr'] = \"ARZ\"\n\n    train_df.loc[train_df.VisitorTeamAbbr == \"BAL\", 'VisitorTeamAbbr'] = \"BLT\"\n    train_df.loc[train_df.HomeTeamAbbr == \"BAL\", 'HomeTeamAbbr'] = \"BLT\"\n\n    train_df.loc[train_df.VisitorTeamAbbr == \"CLE\", 'VisitorTeamAbbr'] = \"CLV\"\n    train_df.loc[train_df.HomeTeamAbbr == \"CLE\", 'HomeTeamAbbr'] = \"CLV\"\n\n    train_df.loc[train_df.VisitorTeamAbbr == \"HOU\", 'VisitorTeamAbbr'] = \"HST\"\n    train_df.loc[train_df.HomeTeamAbbr == \"HOU\", 'HomeTeamAbbr'] = \"HST\"\n    \n    return train_df","31d2d945":"def tag_rusher(train_df):\n    train_df['IsBallCarrier'] = train_df.NflId == train_df.NflIdRusher\n    return train_df","d45e015f":"def get_direction(train_df):\n    train_df['ToLeft'] = train_df.PlayDirection == \"left\"\n    return train_df","1bc52355":"def feet_inch_to_cm(height_fi):\n    foot = 30.48\n    inch = 2.54\n    return int(height_fi.split('-')[0]) * foot + int(height_fi.split('-')[1]) * inch\n\ndef imperial_to_metric(train_df):\n    train_df['PlayerHeight_cm']= train_df['PlayerHeight'].apply(feet_inch_to_cm)\n    train_df['PlayerWeight_kg']= train_df['PlayerWeight']*0.453592\n    return train_df","cc945f6d":"def get_player_age(train_df):\n    train_df['Age']=2019 - pd.DatetimeIndex(train_df['PlayerBirthDate']).year\n    return train_df","7dda5549":"def possession_team(possessionteam, hometeam, visitorteam):\n    if possessionteam == hometeam:\n        return 'home'\n    else:\n        return 'visitor'\ndef leading_team_home_visitor(homescore, visitorscore):\n    if homescore == visitorscore:\n        return 'draw'\n    else:\n        if homescore > visitorscore:\n            return 'home'\n        else:\n            return 'visitor'\n        \ndef leading_team_def_off(team, posessionteam, hometeam, visitorteam, homescore, visitorscore):\n    if homescore == visitorscore:\n        return 'draw'\n    else:\n        if posessionteam == hometeam:\n            if homescore > visitorscore:\n                return 'offense'\n            else:\n                return 'defense'\n        else:\n            if visitorscore > homescore:\n                return 'offense'\n            else:\n                return 'defense'\n\ndef get_leading_team_features(train_df):\n    # Leading team - home\/away\n    train_df['possession_team_home_visitor'] = train_df.apply(lambda row: possession_team(row.PossessionTeam,row.HomeTeamAbbr,row.VisitorTeamAbbr), axis = 1)\n    train_df['leading_by'] = abs(train_df['HomeScoreBeforePlay'] - train_df['VisitorScoreBeforePlay'])\n    train_df['leading_team_defense_offense'] = train_df.apply(lambda row: leading_team_def_off(row.Team,\n                                                                                                row.PossessionTeam,\n                                                                                                row.HomeTeamAbbr,\n                                                                                                row.VisitorTeamAbbr,\n                                                                                                row.HomeScoreBeforePlay,\n                                                                                                row.VisitorScoreBeforePlay), axis = 1)\n    train_df['leading_team_home_visitor'] = train_df.apply(lambda row: leading_team_home_visitor(row.HomeScoreBeforePlay,row.VisitorScoreBeforePlay), axis = 1)\n    train_df['Offense_score']=np.where(train_df['leading_team_defense_offense']=='offense', train_df['leading_by'], -train_df['leading_by'])\n    train_df['Deffense_score']=np.where(train_df['leading_team_defense_offense']=='defense', train_df['leading_by'], -train_df['leading_by'])\n    train_df['Offense_Team'] = train_df['PossessionTeam']\n    train_df['Defense_Team'] = train_df.apply(lambda row: row['HomeTeamAbbr'] if row['PossessionTeam'] != row['HomeTeamAbbr'] else row['VisitorTeamAbbr'],axis=1)\n    return train_df","50967d17":"def get_adjusted_yardline(train_df):\n    train_df['Home_team_play']=np.where(train_df['PossessionTeam']==train_df['HomeTeamAbbr'], 1, 0)\n    train_df['Team_side']=np.where(train_df['PossessionTeam']==train_df['FieldPosition'], 1, 0)\n    train_df['YardLine_adj']=np.where(train_df['Team_side']==1,train_df['YardLine'],100-train_df['YardLine'])\n    \n    return train_df","237bdc0d":"def get_GameClock_features(train_df):\n    train_df['snap_to_handoff']=(pd.to_datetime(train_df['TimeHandoff'])-pd.to_datetime(train_df['TimeSnap'])).dt.total_seconds()\n    # Convert Q,Clocks to bins\n    sec=pd.to_timedelta(train_df['GameClock'])\n    sec=sec.dt.total_seconds()\/60\n    train_df['GameClock_sec']=sec\n    train_df['clock_bin']=np.where(train_df['Quarter']==1,1,np.where(train_df['Quarter']==2,2,np.where(train_df['Quarter']==3,3,\n    np.where(train_df['Quarter']==4,np.where(train_df['GameClock_sec']<=564,4,5),np.where(train_df['GameClock_sec']<=333,6,7)))))\n    return train_df","39e25cdb":"# Break Personal Defense\/Ofense\ndef get_personnel_types(dataset):\n    setups = list(dataset['OffensePersonnel'].unique())\n    setups = ','.join(setups)\n    setups = re.sub(r'\\d+', '', setups).replace(' ','')\n    mylist = list(set(setups.split(',')))\n    offense_column_names = ['Offense_' + s for s in mylist]\n\n    setups = list(dataset['DefensePersonnel'].unique())\n    setups = ','.join(setups)\n    setups = re.sub(r'\\d+', '', setups).replace(' ','')\n    mylist = list(set(setups.split(',')))\n    defense_column_names = ['Defense_' + s for s in mylist]\n    return offense_column_names + defense_column_names\n\ndef extract_personnel_count(whole_personnel, specific_personnel):\n    specific_personnel = specific_personnel.split('_')[1]\n    if specific_personnel in whole_personnel:\n        whole_personnel = whole_personnel.split(',')\n        types = [re.sub(r'\\d+', '', x).replace(' ','') for x in whole_personnel]\n        counts = [[int(s) for s in x.split() if s.isdigit()][0] for x in whole_personnel]\n        dictionary = dict(zip(types, counts))\n        return dictionary[specific_personnel]\n    else:\n        return 0\n\ndef get_split_personnel_types(columns_to_add, train_df):\n    for col in columns_to_add:\n        if col.split('_')[0] == 'Defense':\n            train_df[col] = train_df['DefensePersonnel'].apply(lambda x: extract_personnel_count(x, col))\n        else:\n            train_df[col] = train_df['OffensePersonnel'].apply(lambda x: extract_personnel_count(x, col))\n    return train_df\n\n","7305e42b":"def add_bins_and_generate_stats(train_df):\n    bins=[-99,-0.01,0.01,1.72,4.21,6.7,99]\n    train_df['Yards_Bin'] = pd.cut(train_df['Yards'], bins)\n\n    stats = {}\n    for my_type in ['DisplayName', 'Offense_Team', 'Defense_Team']:\n        per_my_type = train_df[[my_type,'Yards','Yards_Bin']].groupby([my_type,'Yards_Bin']).count().fillna(0).reset_index()\n        per_my_type = per_my_type.merge(per_my_type.groupby(my_type)['Yards'].sum().reset_index(), on=my_type, how='left')\n        per_my_type['Yards_Bin_Rate'] = per_my_type['Yards_x'] \/ per_my_type['Yards_y']\n        per_my_type.rename(columns={'Yards_x':'Bin_Count', 'Yards_y': 'Total_Plays'}, inplace=True)\n        per_my_type = pd.pivot_table(per_my_type, values=['Bin_Count', 'Yards_Bin_Rate'], index=[my_type], columns=['Yards_Bin'])\n        per_my_type.columns = per_my_type.columns.map('{0[0]}_{0[1]}'.format)\n        per_my_type = per_my_type.reset_index()\n        avg_yards = train_df.groupby(my_type)['Yards'].mean().reset_index()\n        std_yards = train_df.groupby(my_type)['Yards'].std().reset_index().fillna(0)\n        counts = train_df.groupby(my_type)['Yards'].count().reset_index()\n        per_type = avg_yards.merge(counts, on=my_type, how='inner').merge(std_yards, on=my_type, how='inner')\n        per_type.rename(columns={'Yards_x':'Avg_Yards', 'Yards_y':'Count', 'Yards':'Std_Yards'}, inplace= True)\n        per_my_type= per_my_type.merge(per_type, on=my_type, how='left')\n        if my_type == 'DisplayName':\n            per_player_enough_plays = per_type[per_type['Count'] >= 10]\n            per_player_not_enough_plays = per_type[per_type['Count'] < 10]\n            per_player_not_enough_plays['rusher_performance_bin'] = 'few_plays'\n            per_player_enough_plays['rusher_performance_bin'] = pd.qcut(per_player_enough_plays['Avg_Yards'], q=[0, 0.2,0.5,0.9,1], labels= ['bottom_20','20-50','50-90','top_10'])\n            per_player = pd.concat([per_player_enough_plays, per_player_not_enough_plays])\n            per_my_type= per_my_type.merge(per_player[[my_type,'rusher_performance_bin']], on=my_type, how='left')\n\n        per_my_type.columns = [per_my_type.columns[0]] + [my_type + '_' + str(col) for col in per_my_type.columns[1:]]\n        stats[my_type] = per_my_type\n        train_df = train_df.merge(per_my_type, on=my_type, how='left')\n    return stats, train_df","dba59351":"def convert_to_cat(df):\n    for col in ['DefensePersonnel','Home_team_play','Team_side','Down','Defense_Team','OffenseFormation','OffensePersonnel',\n                'leading_team_defense_offense','PlayDirection','clock_bin','Defense_DB','Defense_LB','Defense_DL','Offense_WR']:#,'DisplayName_rusher_performance_bin']:\n        df[col] = df[col].astype('category')\n    return df","348ad2b9":"def get_models_columns():\n    player_model_columns = [#'DisplayName_Bin_Count_(-99.0, -0.01]','DisplayName_Bin_Count_(-0.01, 0.01]','DisplayName_Bin_Count_(0.01, 1.72]','DisplayName_Bin_Count_(1.72, 4.21]','DisplayName_Bin_Count_(4.21, 6.7]',\n                            'DisplayName_Bin_Count_(6.7, 99.0]',\n                            'DisplayName_Yards_Bin_Rate_(-99.0, -0.01]',\n                            #'DisplayName_Yards_Bin_Rate_(-0.01, 0.01]',\n                            #'DisplayName_Yards_Bin_Rate_(0.01, 1.72]',\n                            'DisplayName_Yards_Bin_Rate_(1.72, 4.21]',\n                            #'DisplayName_Yards_Bin_Rate_(4.21, 6.7]',\n                            'DisplayName_Yards_Bin_Rate_(6.7, 99.0]',\n                            'DisplayName_Avg_Yards',\n                            #'DisplayName_Count',\n                            'DisplayName_Std_Yards',\n                            'DisplayName_rusher_performance_bin',#'JerseyNumber',\n                            #'Position',\n                            'PlayerCollegeName',\n                            #'PlayerHeight_cm','PlayerWeight_kg','Age','PlayerWeight','PlayerHeight'\n                            ]\n    offense_team_model_columns =['PossessionTeam', 'OffenseFormation','OffensePersonnel',\n                                 #'Offense_Team_Bin_Count_(-99.0, -0.01]','Offense_Team_Bin_Count_(-0.01, 0.01]','Offense_Team_Bin_Count_(0.01, 1.72]','Offense_Team_Bin_Count_(1.72, 4.21]',\n                                 #'Offense_Team_Bin_Count_(4.21, 6.7]','Offense_Team_Bin_Count_(6.7, 99.0]','Offense_Team_Yards_Bin_Rate_(-99.0, -0.01]','Offense_Team_Yards_Bin_Rate_(-0.01, 0.01]','Offense_Team_Yards_Bin_Rate_(0.01, 1.72]','Offense_Team_Yards_Bin_Rate_(1.72, 4.21]','Offense_Team_Yards_Bin_Rate_(4.21, 6.7]',\n                                 'Offense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n                                'Team_side','Offense_Team_Avg_Yards',\n                                'YardLine_adj','Distance','Offense_score',\n                                'clock_bin',\n                                'Offense_WR']\n    defense_team_model_columns = [# 'Defense_Team_Bin_Count_(-99.0, -0.01]','Defense_Team_Bin_Count_(-0.01, 0.01]','Defense_Team_Bin_Count_(0.01, 1.72]',\n                                 #'Defense_Team_Bin_Count_(1.72, 4.21]','Defense_Team_Bin_Count_(4.21, 6.7]','Defense_Team_Bin_Count_(6.7, 99.0]',\n                                 #'Defense_Team_Yards_Bin_Rate_(-99.0, -0.01]','Defense_Team_Yards_Bin_Rate_(-0.01, 0.01]','Defense_Team_Yards_Bin_Rate_(0.01, 1.72]','Defense_Team_Yards_Bin_Rate_(1.72, 4.21]',\n                                 #'Defense_Team_Yards_Bin_Rate_(4.21, 6.7]', 'Defense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n                                'Defense_Team_Avg_Yards',#'Defense_Team_Count','Defense_Team_Std_Yards',\n                                'Defense_DB',#'Defense_LB',#'Defense_OL',\n                                 #'Defense_DL',\n                                'Defense_Team','DefendersInTheBox','DefensePersonnel','YardLine_adj','Distance','Deffense_score',\n                               ]\n#     final_model_columns = ['A',\n#                             'DisplayName',\n#                             'predict_defense',\n#                             'predict_offense',\n#                             'YardLine_adj',\n#                             'Location',\n#                             'DisplayName_Avg_Yards',\n#                             'PlayerCollegeName',\n#                             'S',\n#                             'Stadium',\n#                             #'Season',\n#                             'YardLine',\n#                             'Defense_Team',\n#                             'WindDirection',\n#                             'VisitorTeamAbbr',\n#                             'DisplayName_Yards_Bin_Rate_(6.7, 99.0]',\n#                             'FieldPosition',\n#                             'GameWeather',\n#                             'HomeTeamAbbr',\n#                             'OffensePersonnel',\n#                             'predict_player',\n#                             'DefendersInTheBox',\n#                             'DisplayName_rusher_performance_bin',\n#                             'Dis',\n#                             'DisplayName_Std_Yards',\n#                             'PossessionTeam',\n#                             'Offense_Team',\n#                             'DefensePersonnel'\n#                           ]\n    return {'player': player_model_columns, 'offense':offense_team_model_columns, 'defense':defense_team_model_columns}\n","729433f6":"# def eucl_distance(x1,x2,y1,y2):\n#     dis=np.sqrt((x1-x2).pow(2)+ (y1-y2).pow(2))\n#     return dis\n\ndef euclidean_distance(x1,x2,y1,y2):\n    return np.sqrt((x1-x2)**2 + (y1-y2)**2)\n\ndef norm_x(df):\n    df['Player_o_d']=np.where((df[\"Home_team_play\"] ==1) & (df[\"Team\"] == 'home')|(df[\"Home_team_play\"] ==0) & (df[\"Team\"] == 'away'),'Offense_Player','Defense_Player')\n    df['YardLine_Direction']=np.where(df[\"PlayDirection\"] =='right',df['YardLine_adj'],100-df['YardLine_adj'])\n    df['X_adj']=np.where(df[\"Player_o_d\"] =='Offense_Player',abs(df['YardLine_Direction']+10-df['X']),-abs(df['YardLine_Direction']+10-df['X']))\n    return(df)\n\ndef qb_and_rusher_to_closest_defender(df):\n    play_ids = list(df.PlayId.unique())\n    rows = []\n    for play_id in play_ids:\n        play = df[df['PlayId'] == play_id]\n        rusher = play[play['IsBallCarrier']==True][['X', 'Y']]\n        QB_offense=play[play['Position']=='QB'][['X','Y']]\n        defenders = play[play['Player_o_d']=='Defense_Player'][['X', 'Y']]\n        defenders['rusher_X'] = rusher['X'].iloc[0]\n        defenders['rusher_Y'] = rusher['Y'].iloc[0]\n        try:\n            defenders['qb_X'] = QB_offense['X'].iloc[0]\n            defenders['qb_Y'] = QB_offense['Y'].iloc[0]\n        except:\n            defenders['qb_X'] = 50\n            defenders['qb_Y'] = 50\n        \n        defenders['dist_rusher_to_defender'] = defenders.apply(lambda row: euclidean_distance(row.X,row.rusher_X,row.Y,row.rusher_Y), axis = 1)\n        defenders['dist_qb_to_defender'] = defenders.apply(lambda row: euclidean_distance(row.X,row.qb_X,row.Y,row.qb_Y), axis = 1)\n        #mean_dist_closest_3_defenders = defenders.sort_values(by=dist_rusher_to_defender)['dist_rusher_to_defender'].iloc[:3].mean()\n        rows.append([play_id, defenders['dist_rusher_to_defender'].min(), defenders['dist_qb_to_defender'].min(), euclidean_distance(rusher['X'].iloc[0], defenders['qb_X'].iloc[0], rusher['Y'].iloc[0], defenders['qb_Y'].iloc[0])])\n    rows = pd.DataFrame(rows, columns=['PlayId', 'min_dist_rusher_to_defender', 'min_dist_qb_to_defender', 'dist_rusher_QB'])\n    df = df.merge(rows, on='PlayId', how='left')\n    return df\n        \n# def ruser_qb_dis(df):\n#     QB_offense=df[(df['Position']=='QB') &  (df['Player_o_d']=='Offense_Player')]\n#     rushers=df[df['IsBallCarrier']==True]\n#     rushers=rushers[['PlayId','IsBallCarrier','X_adj','Y',]].merge(QB_offense[['PlayId','X_adj','Y']],on='PlayId', how='left')\n#     rushers.rename(columns={ 'X_adj_x':'X_adj_rusher','Y_x':'Y_rusher','X_adj_y':'X_adj_QB_offense', 'Y_y':'Y_QB_offense'}, inplace= True)\n#     rushers['dis_from_qb_offense']=euclidean_distance(rushers['X_adj_rusher'],rushers['X_adj_QB_offense'],rushers['Y_rusher'],rushers['Y_QB_offense'])\n#     df=df.merge(rushers[['dis_from_qb_offense','PlayId','IsBallCarrier']],on=['PlayId','IsBallCarrier'], how='left')\n#     return(df)\n\ndef Direction_orientation_adj(df):\n    df['dir_adj']=np.where(df[\"Player_o_d\"] =='Offense_Player',np.where(df[\"PlayDirection\"] =='right',df[\"Dir\"],360-df[\"Dir\"]),np.where(df[\"PlayDirection\"] =='right',360-df[\"Dir\"],df[\"Dir\"]))\n    df['Orientation_adj']=np.where(df[\"Player_o_d\"] =='Offense_Player',np.where(df[\"PlayDirection\"] =='right',df[\"Orientation\"],360-df[\"Orientation\"]),np.where(df[\"PlayDirection\"] =='right',360-df[\"Orientation\"],df[\"Orientation\"]))\n    df['dir_to_Orientation']=180 - abs(abs(df['dir_adj'] - df['Orientation_adj']) - 180) \n    return(df)\ndef X_Y_Velocity(df):\n    df['v_x']=np.sin(df['dir_adj'] * np.pi\/180)*df['S']\n    df['v_y']=np.cos(df['dir_adj'] * np.pi\/180)*df['S']\n    #df['v_x_y']=np.sqrt(df['v_x'].pow(2)+df['v_y'].pow(2))\n    df['arc_tan']=np.arctan((df['v_y']\/df['v_x']))*180\/np.pi\n    df['arc_tan_cat']=pd.cut(df['arc_tan'],bins=[-90, -45, 0, 45, 90],labels=False)\n    df['t1_distance']=df['Dis']+df['S']*1+0.5*df['A']*1\n    df['t2_distance']=df['Dis']+df['S']*2+0.5*df['A']*4\n    df['t3_distance']=df['Dis']+df['S']*3+0.5*df['A']*9\n    df['v_x_a1']=np.sin(df['dir_adj'] * np.pi\/180)*(df['S']+df['A']*1)\n    df['v_y_a1']=np.cos(df['dir_adj'] * np.pi\/180)*(df['S']+df['A']*1)\n    df['v_x_a2']=np.sin(df['dir_adj'] * np.pi\/180)*(df['S']+df['A']*2)\n    df['v_y_a2']=np.cos(df['dir_adj'] * np.pi\/180)*(df['S']+df['A']*2)\n    df['v_x_a3']=np.sin(df['dir_adj'] * np.pi\/180)*(df['S']+df['A']*3)\n    df['v_y_a3']=np.cos(df['dir_adj'] * np.pi\/180)*(df['S']+df['A']*3)\n    df['a_x']=np.sin(df['dir_adj'] * np.pi\/180)*df['A']\n    df['a_y']=np.cos(df['dir_adj'] * np.pi\/180)*df['A']\n    return(df)","f1c25e1d":"h2o.init(min_mem_size='16G')","458ed1ca":"def build_and_return_model(train_df, training_columns, name, ntrees, max_depth, min_rows):\n    train = h2o.H2OFrame(train_df)\n    model = H2ORandomForestEstimator(ntrees=ntrees, max_depth=max_depth, min_rows=min_rows, keep_cross_validation_predictions=True, nfolds=10, seed=1)\n    model.train(x=training_columns, y='Yards', training_frame=train)\n    cv_predictions = model.cross_validation_holdout_predictions()\n    train_df = train_df.join(cv_predictions.as_data_frame())\n    train_df.rename(columns={'predict':('predict_' + name)}, inplace=True)\n    return model, train_df","87fd1ac6":"train_df_all = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\ntrain_df_all = clean_TeamAbbreviations(train_df_all)\ntrain_df_all = imperial_to_metric(train_df_all)\ntrain_df_all = tag_rusher(train_df_all)\ntrain_df_all = get_player_age(train_df_all)\ntrain_df_all = get_adjusted_yardline(train_df_all)\ntrain_df_all=norm_x(train_df_all)\ntrain_df_all['dis_from_center']= abs(train_df_all['X_adj'])  #eucl_distance(train_df_all['X_adj'],0,train_df_all['Y'],0)\n#train_df_all=ruser_qb_dis(train_df_all)\ntrain_df_all=Direction_orientation_adj(train_df_all)\ntrain_df_all=X_Y_Velocity(train_df_all)\ntrain_df_all = qb_and_rusher_to_closest_defender(train_df_all)\ntrain_df=train_df_all[train_df_all['NflId']==train_df_all['NflIdRusher']]\ntrain_df.FieldPosition = train_df.FieldPosition.fillna('NA')\ntrain_df = get_direction(train_df)\ntrain_df = get_leading_team_features(train_df)\ntrain_df = get_GameClock_features(train_df)\ntrain_df['StadiumType'] = train_df['StadiumType'].apply(clean_StadiumType)\ntrain_df['WindDirection']=train_df['WindDirection'].apply(clean_WindDirection)\ntrain_df['WindDirection']=train_df['WindDirection'].apply(transform_WindDirection)\ntrain_df=set_Turf(train_df)\ntrain_df=GameWeather(train_df)\npersonnel_columns_to_add = get_personnel_types(train_df) \ntrain_df = get_split_personnel_types(personnel_columns_to_add, train_df)\nplayer_and_team_stats, train_df = add_bins_and_generate_stats(train_df)\n\n\nmodels_columns=get_models_columns()\nmodel_player,train_df = build_and_return_model(train_df, models_columns['player'], 'player', 500, 5, 27)\nmodel_offense,train_df = build_and_return_model(train_df, models_columns['offense'], 'offense', 500, 5, 15)\nmodel_defense,train_df = build_and_return_model(train_df, models_columns['defense'], 'defense', 500, 6, 25)\nmodels = {'player': model_player, 'offense': model_offense,'defense': model_defense}","a6dcb4b4":" training_columns =[\n     'Down',\n     'Age',\n      'Offense_DL',\n     'Offense_QB',\n     'Offense_RB',\n     'Offense_LB',\n     'Offense_DB',\n     'Offense_TE',\n     'Defense_DL',\n     'Defense_OL',\n     'min_dist_rusher_to_defender',\n     'min_dist_qb_to_defender',\n     'dist_rusher_QB',\n    'A',\n    'predict_defense',\n    'predict_offense',\n    'predict_player',\n    'YardLine_adj',\n    'S',\n    'DefendersInTheBox',\n    'Dis',\n    'Distance',\n    'X_adj',\n    'DisplayName_Count',\n    'Defense_DB',\n    'DisplayName_Bin_Count_(1.72, 4.21]',\n    'DisplayName_Bin_Count_(6.7, 99.0]',\n    'DisplayName_Yards_Bin_Rate_(-99.0, -0.01]',\n    'DisplayName_Bin_Count_(0.01, 1.72]',\n    'VisitorScoreBeforePlay',\n    'DisplayName_Bin_Count_(4.21, 6.7]',\n    'clock_bin',\n    'Defense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n    'Offense_WR',\n    'Team_side',\n    'Offense_score',\n    'Deffense_score',\n    'Defense_LB',\n    'DisplayName_Yards_Bin_Rate_(0.01, 1.72]',\n    'Defense_Team_Yards_Bin_Rate_(-0.01, 0.01]',\n    'Defense_Team_Bin_Count_(1.72, 4.21]',\n    'Defense_Team_Avg_Yards',\n    'Offense_OL',\n    'DisplayName_Yards_Bin_Rate_(-0.01, 0.01]',\n    'Defense_Team_Yards_Bin_Rate_(-99.0, -0.01]',\n    'Defense_Team_Bin_Count_(-99.0, -0.01]',\n    'dis_from_center',\n    'dir_adj',\n    'Orientation_adj',\n    'dir_to_Orientation',\n    'v_x',\n    'v_y',\n    'arc_tan',\n    'arc_tan_cat',\n    't1_distance',\n    't2_distance',\n    't3_distance',\n    'v_x_a1',\n    'v_y_a1',\n    'v_x_a2',\n    'v_y_a2',\n    'v_x_a3',\n    'v_y_a3'\n ]\n","ee7b2a47":"categorical_columns = ['DisplayName_rusher_performance_bin', 'Position', 'Stadium','GameWeather','OffensePersonnel','Turf_type','OffenseFormation']\none_hot = pd.get_dummies(train_df[categorical_columns])\ntrain_df = train_df.join(one_hot)","0e955e5c":"training_columns = training_columns + list(one_hot.columns)","1b13c1d7":"train_df_temp=train_df[training_columns].fillna(0)\nX = train_df_temp\nyards = train_df.Yards\n\ny = np.zeros((yards.shape[0], 37))\nfor idx, target in enumerate(list(yards)):\n    if target > 22:\n        y[idx][36] = 1\n    elif target < -14:\n        y[idx][0] = 1\n    else:\n        y[idx][14 + target] = 1\n\nX = np.array(X)","1772c9d7":"# train_df_temp=train_df[training_columns].fillna(0)\n# X = train_df_temp\n# yards = train_df.Yards\n\n# y = np.zeros((yards.shape[0], 199))\n# for idx, target in enumerate(list(yards)):\n#     y[idx][99 + target] = 1\n\n# X = np.array(X)","097bd95c":"# # Calculate CRPS score\n# def crps_score(y_prediction, y_valid, shape=X.shape[0]):\n#     y_true = np.clip(np.cumsum(y_valid, axis=1), 0, 1)\n#     y_pred = np.clip(np.cumsum(y_prediction, axis=1), 0, 1)\n#     val_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * shape)\n#     crps = np.round(val_s, 6)\n    \n#     return crps","91500c6e":"# def get_rf(x_tr, y_tr, x_val, y_val, max_features, min_samples_leaf, min_samples_split, n_estimators, shape):\n#     model = RandomForestRegressor(bootstrap=False, max_features=max_features, min_samples_leaf=min_samples_leaf,\n#                                   min_samples_split=min_samples_split, n_estimators=n_estimators, n_jobs=-1, random_state=42)\n#     model.fit(x_tr, y_tr)\n    \n#     y_pred = model.predict(x_val)\n#     y_valid = y_val\n#     crps = crps_score(y_pred, y_valid, shape=shape)\n    \n#     return model, crps","791d1efe":"# max_features_list = [0.3]\n# min_samples_leaf_list = [10]\n# min_samples_split_list = [20]\n# n_estimators_list = [200]\n\n\n# rows = []\n# fold = 5\n# #models_rf = []\n# i = 0\n# max_i = len(max_features_list)*len(min_samples_leaf_list)*len(min_samples_split_list)*len(n_estimators_list)\n# s_time = time.time()\n# kfold = KFold(fold, random_state = 42, shuffle = True)\n# for max_features in max_features_list:\n#     for min_samples_leaf in min_samples_leaf_list:\n#         for min_samples_split in min_samples_split_list:\n#             for n_estimators in n_estimators_list:\n#                 i = i+1\n#                 print(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n#                 print(f'Grid {i}\/{max_i}')\n#                 print(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\")\n#                 crps_csv_rf = []\n#                 feature_importance = np.zeros([fold, X.shape[1]])\n#                 for k_fold, (tr_inds, val_inds) in enumerate(kfold.split(yards)):\n                    \n#                     print(f' Fold {k_fold+1}\/{fold}')\n#                     print(\"-----------\")\n#                     tr_x, tr_y = X[tr_inds], y[tr_inds]\n#                     val_x, val_y = X[val_inds], y[val_inds]\n\n#                     # Train RF\n#                     rf, crps_rf = get_rf(tr_x, tr_y, val_x, val_y, max_features, min_samples_leaf, min_samples_split, n_estimators, shape=val_x.shape[0])\n#                     #models_rf.append(rf)\n#                     print(\"the %d fold crps (RF) is %f\"%((k_fold+1), crps_rf))\n#                     crps_csv_rf.append(crps_rf)\n\n                    \n\n#                     # Feature Importance\n#                     feature_importance[k_fold, :] = rf.feature_importances_\n#                 rows.append([\n#                     max_features,\n#                     min_samples_leaf,\n#                     min_samples_split,\n#                     n_estimators,\n#                     sum(crps_csv_rf) \/ len(crps_csv_rf),\n#                     np.mean(feature_importance, axis=0)\n#                 ])\n\n# gridsearch = pd.DataFrame(rows, columns = ['max_features', 'min_samples_leaf', 'min_samples_split', 'n_estimators', 'mean_CRPS', 'feature_importance'])","c3082ebc":"# gridsearch.sort_values(by = 'mean_CRPS')","8087ae51":"# feature_imp = list(zip(training_columns, list(gridsearch['feature_importance'].iloc[0]))) # Index of best model\n# feature_imp = [list(elem) for elem in feature_imp]\n# feature_imp = pd.DataFrame(feature_imp, columns=['feature_name', 'importance'])\n# feature_imp.sort_values(by='importance', ascending= False)","6234358e":"final_model = RandomForestRegressor(bootstrap=False, max_features=0.3, min_samples_leaf=10, \n                              min_samples_split=20, n_estimators=200, n_jobs=-1, random_state=42)\nfinal_model.fit(X, y)","2ee7d56c":"def make_my_predictions(test_df_all, sample_prediction_df, models, player_and_team_stats, personnel_columns_to_add, final_model, training_columns, categorical_columns, one_hot_columns):\n    test_df_all = clean_TeamAbbreviations(test_df_all)\n    test_df_all = imperial_to_metric(test_df_all)\n    test_df_all = tag_rusher(test_df_all)\n    test_df_all = get_player_age(test_df_all)\n    test_df_all = get_adjusted_yardline(test_df_all)\n    test_df_all=norm_x(test_df_all)\n    test_df_all['dis_from_center']=abs(train_df_all['X_adj']) #eucl_distance(test_df_all['X_adj'],0,test_df_all['Y'],0)\n    #test_df_all=ruser_qb_dis(test_df_all)\n    test_df_all=Direction_orientation_adj(test_df_all)\n    test_df_all=X_Y_Velocity(test_df_all)\n    test_df_all = qb_and_rusher_to_closest_defender(test_df_all)\n\n    test_df=test_df_all[test_df_all['NflId']==test_df_all['NflIdRusher']]\n    test_df = test_df.fillna(0)\n\n    test_df = get_direction(test_df)\n    test_df = get_leading_team_features(test_df)\n    test_df = get_GameClock_features(test_df)\n    test_df = get_split_personnel_types(personnel_columns_to_add, test_df)\n    for key,value in player_and_team_stats.items():\n        test_df = test_df.merge(value, on=key, how='left').fillna(0)\n        if key == 'DisplayName' and test_df['DisplayName_rusher_performance_bin'].iloc[0] == 0:\n            test_df['DisplayName_rusher_performance_bin'] = 'few_plays'\n#    test_df=convert_to_cat(test_df)\n    test_df=set_Turf(test_df)\n    test_df['StadiumType'] = test_df['StadiumType'].apply(clean_StadiumType)\n    test_df['WindDirection']=test_df['WindDirection'].apply(clean_WindDirection)\n    test_df['WindDirection']=test_df['WindDirection'].apply(transform_WindDirection)\n    test_df=GameWeather(test_df)\n\n    for model_type,model in models.items():\n        test_df_curr = h2o.H2OFrame(test_df)\n        pred=model.predict(test_df_curr)\n        test_df = test_df.join(pred.as_data_frame())\n        test_df.rename(columns={'predict':'predict_' + model_type}, inplace=True)\n\n    one_hot_test = pd.get_dummies(test_df[categorical_columns])\n    one_hot_test_cols = [x for x in one_hot_test if x in one_hot_columns]\n    one_hot_test = one_hot_test[one_hot_test_cols]\n    test_df = test_df.join(one_hot_test)\n    more_to_add = [x for x in one_hot_columns if x not in list(one_hot_test.columns)]\n    for column_to_add in more_to_add:\n        test_df[column_to_add] = 0\n\n    test_df=test_df[training_columns]#.fillna(0)    \n\n    test_X = np.array(test_df)\n    pred = final_model.predict(test_X)\n    pred = np.array([np.concatenate((np.zeros(85), pred[0], np.zeros(77)), axis=0)]) #comment out this line\n    pred = np.clip(np.cumsum(pred, axis=1), 0, 1)\n    pred = pd.DataFrame(data=[list(pred[0])], columns=sample_prediction_df.columns)\n    return pred","0738f1f5":"from kaggle.competitions import nflrush\nenv = nflrush.make_env()\n#h2o.init(min_mem_size='16G')\n# Training data is in the competition dataset as usual\n#train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n\n#player_and_team_stats, personnel_columns_to_add, models = train_my_model(train_df, get_models_columns())\n\nfor (test_df, sample_prediction_df) in env.iter_test():\n    predictions_df = make_my_predictions(test_df, sample_prediction_df, models, player_and_team_stats, personnel_columns_to_add, final_model, training_columns, categorical_columns, list(one_hot.columns))\n    env.predict(predictions_df)\nenv.write_submission_file()","4d59627f":"# test_df_all = test_df2.copy()","db296db4":"# test_df_all = imperial_to_metric(test_df_all)\n# test_df_all = tag_rusher(test_df_all)\n# test_df_all = get_player_age(test_df_all)\n# test_df_all = get_adjusted_yardline(test_df_all)\n# test_df_all=norm_x(test_df_all)\n# test_df_all['euc_dis_from_center']=eucl_distance(test_df_all['X_adj'],0,test_df_all['Y'],0)\n# test_df_all=ruser_qb_dis(test_df_all)\n# test_df_all=Direction_orientation_adj(test_df_all)\n# test_df_all=X_Y_Velocity(test_df_all)\n\n# test_df=test_df_all[test_df_all['NflId']==test_df_all['NflIdRusher']]\n# test_df = test_df.fillna(0)\n\n# test_df = clean_TeamAbbreviations(test_df)\n# test_df = get_direction(test_df)\n# test_df = get_leading_team_features(test_df)\n# test_df = get_GameClock_features(test_df)\n# test_df = get_split_personnel_types(personnel_columns_to_add, test_df)\n# for key,value in player_and_team_stats.items():\n#     test_df = test_df.merge(value, on=key, how='left').fillna(0)\n#     if key == 'DisplayName' and test_df['DisplayName_rusher_performance_bin'].iloc[0] == 0:\n#         test_df['DisplayName_rusher_performance_bin'] = 'few_plays'\n# test_df=convert_to_cat(test_df)\n# test_df=set_Turf(test_df)\n# test_df['StadiumType'] = test_df['StadiumType'].apply(clean_StadiumType)\n# test_df['WindDirection']=test_df['WindDirection'].apply(clean_WindDirection)\n# test_df['WindDirection']=test_df['WindDirection'].apply(transform_WindDirection)\n# test_df=GameWeather(test_df)\n\n# for model_type,model in models.items():\n#     test_df_curr = h2o.H2OFrame(test_df)\n#     pred=model.predict(test_df_curr)\n#     test_df = test_df.join(pred.as_data_frame())\n#     test_df.rename(columns={'predict':'predict_' + model_type}, inplace=True)\n\n\n\n# one_hot_test = pd.get_dummies(test_df[categorical_columns])\n# test_df = test_df.join(one_hot_test)\n# more_to_add = [x for x in one_hot_columns if x not in list(one_hot_test.columns)]\n# for column_to_add in more_to_add:\n#     test_df[column_to_add] = 0\n\n# test_df=test_df[training_columns]#.fillna(0)    \n\n# test_X = np.array(test_df)\n# pred = final_model.predict(test_X)\n# pred = np.clip(np.cumsum(pred, axis=1), 0, 1)\n# pred = pd.DataFrame(data=[list(pred[0])], columns=sample_prediction_df.columns)","447b1437":"# train_df, test_df, portion = train_test_split_random(0.2, train_df, 3)\n\n# for key,value in player_and_team_stats.items():\n#     test_df = test_df.merge(value, on=key, how='left').fillna(0)\n# if key == 'DisplayName' and test_df['DisplayName_rusher_performance_bin'].iloc[0] == 0:\n#     test_df['DisplayName_rusher_performance_bin'] = 'few_plays'\n\n# for model_type,model in models.items():\n#     test_df_curr = h2o.H2OFrame(test_df)\n#     pred=model.predict(test_df_curr)\n#     test_df = test_df.join(pred.as_data_frame())\n#     test_df.rename(columns={'predict':'predict_' + model_type}, inplace=True)","dbb16c50":"# train = h2o.H2OFrame(train_df)\n# validation = h2o.H2OFrame(test_df)\n# model = H2ORandomForestEstimator(ntrees=300, max_depth=5,min_rows=20,seed=55#,keep_cross_validation_predictions=True, nfolds=10\n#                                 )\n# model.train(x=training_columns, y='Yards', training_frame=train, validation_frame = validation )\n# #cv_predictions = model.cross_validation_holdout_predictions()\n# # train=train.as_data_frame().join(cv_predictions.as_data_frame())\n# # train.rename(columns={'predict':'predict_final'}, inplace=True)\n# performance=model.model_performance \n# performance","5edb2db1":"# model.varimp(True)","f002c301":"# # Evalute_CRPS \n# validation = h2o.H2OFrame(test_df)\n# pred=model.predict(validation);pred=pred.as_data_frame()\n# pred['stdv']=model.model_performance().mae()\n# validation=validation.as_data_frame()\n# CRPS=Evalute_CRPS(validation.iloc[:,:],pred.iloc[:,:])\n# CRPS","af35cfe6":"#  training_columns =[#'Team',\n# #                             'X',\n# #                             'Y',\n# #                             'S',\n# #                             'A',\n# #                             'Dis',\n# #                             'Orientation',\n# #                             'Dir',\n# #                             'NflId',\n# #                             'DisplayName',\n# #                             'JerseyNumber',\n# #                             'Season',\n# #                             'YardLine',\n# #                             'Quarter',\n# #                             'GameClock',\n# #                             'PossessionTeam',\n# #                             'Down',\n# #                             'Distance',\n# #                             'FieldPosition',\n# #                             'HomeScoreBeforePlay',\n# #                             'VisitorScoreBeforePlay',\n# #                             'NflIdRusher',\n# #                             'OffenseFormation',\n# #                             'OffensePersonnel',\n# #                             'DefendersInTheBox',\n# #                             'DefensePersonnel',\n# #                             'PlayDirection',\n# #                             'TimeHandoff',\n# #                             'TimeSnap',\n# #                             'PlayerHeight',\n# #                             'PlayerWeight',\n# #                             'PlayerBirthDate',\n# #                             'PlayerCollegeName',\n# #                             'Position',\n# #                             'HomeTeamAbbr',\n# #                             'VisitorTeamAbbr',\n# #                             'Week',\n# #                             'Stadium',\n# #                             'Location',\n# #                             'StadiumType',\n# #                             'Turf',\n# #                             'GameWeather',\n# #                             'Temperature',\n# #                             'Humidity',\n# #                             'WindSpeed', #SAW A CASE WHERE VALUE WAS '6mph'\n# #                             'WindDirection',\n# #                             'PlayerHeight_cm',\n# #                             'PlayerWeight_kg',\n# #                             'IsBallCarrier',\n# #                             'Age',\n# #                             'ToLeft',\n# #                             'possession_team_home_visitor',\n# #                             'leading_by',\n# #                             'leading_team_defense_offense',\n# #                             'leading_team_home_visitor',\n# #                             'Offense_score',\n# #                             'Deffense_score',\n# #                             'Offense_Team',\n# #                             'Defense_Team',\n# #                             'Home_team_play',\n# #                             'Team_side',\n# #                             'YardLine_adj',\n# #                             'snap_to_handoff',\n# #                             'GameClock_sec',\n# #                             'clock_bin',\n# #                             'Offense_DB',\n# #                             'Offense_LB',\n# #                             'Offense_TE',\n# #                             'Offense_QB',\n# #                             'Offense_DL',\n# #                             'Offense_OL',\n# #                             'Offense_WR',\n# #                             'Offense_RB',\n# #                             'Defense_DB',\n# #                             'Defense_LB',\n# #                             'Defense_OL',\n# #                             'Defense_DL',\n# #                             'DisplayName_Bin_Count_(-99.0, -0.01]',\n# #                             'DisplayName_Bin_Count_(-0.01, 0.01]',\n# #                             'DisplayName_Bin_Count_(0.01, 1.72]',\n# #                             'DisplayName_Bin_Count_(1.72, 4.21]',\n# #                             'DisplayName_Bin_Count_(4.21, 6.7]',\n# #                             'DisplayName_Bin_Count_(6.7, 99.0]',\n# #                             'DisplayName_Yards_Bin_Rate_(-99.0, -0.01]',\n# #                             'DisplayName_Yards_Bin_Rate_(-0.01, 0.01]',\n# #                             'DisplayName_Yards_Bin_Rate_(0.01, 1.72]',\n# #                             'DisplayName_Yards_Bin_Rate_(1.72, 4.21]',\n# #                             'DisplayName_Yards_Bin_Rate_(4.21, 6.7]',\n# #                             'DisplayName_Yards_Bin_Rate_(6.7, 99.0]',\n# #                             'DisplayName_Avg_Yards',\n# #                             'DisplayName_Count',\n# #                             'DisplayName_Std_Yards',\n# #                             'DisplayName_rusher_performance_bin',\n# #                             'Offense_Team_Bin_Count_(-99.0, -0.01]',\n# #                             'Offense_Team_Bin_Count_(-0.01, 0.01]',\n# #                             'Offense_Team_Bin_Count_(0.01, 1.72]',\n# #                             'Offense_Team_Bin_Count_(1.72, 4.21]',\n# #                             'Offense_Team_Bin_Count_(4.21, 6.7]',\n# #                             'Offense_Team_Bin_Count_(6.7, 99.0]',\n# #                             'Offense_Team_Yards_Bin_Rate_(-99.0, -0.01]',\n# #                             'Offense_Team_Yards_Bin_Rate_(-0.01, 0.01]',\n# #                             'Offense_Team_Yards_Bin_Rate_(0.01, 1.72]',\n# #                             'Offense_Team_Yards_Bin_Rate_(1.72, 4.21]',\n# #                             'Offense_Team_Yards_Bin_Rate_(4.21, 6.7]',\n# #                             'Offense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n# #                             'Offense_Team_Avg_Yards',\n# #                             'Offense_Team_Count',\n# #                             'Offense_Team_Std_Yards',\n# #                             'Defense_Team_Bin_Count_(-99.0, -0.01]',\n# #                             'Defense_Team_Bin_Count_(-0.01, 0.01]',\n# #                             'Defense_Team_Bin_Count_(0.01, 1.72]',\n# #                             'Defense_Team_Bin_Count_(1.72, 4.21]',\n# #                             'Defense_Team_Bin_Count_(4.21, 6.7]',\n# #                             'Defense_Team_Bin_Count_(6.7, 99.0]',\n# #                             'Defense_Team_Yards_Bin_Rate_(-99.0, -0.01]',\n# #                             'Defense_Team_Yards_Bin_Rate_(-0.01, 0.01]',\n# #                             'Defense_Team_Yards_Bin_Rate_(0.01, 1.72]',\n# #                             'Defense_Team_Yards_Bin_Rate_(1.72, 4.21]',\n# #                             'Defense_Team_Yards_Bin_Rate_(4.21, 6.7]',\n# #                             'Defense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n# #                             'Defense_Team_Avg_Yards',\n# #                             'Defense_Team_Count',\n# #                             'Defense_Team_Std_Yards',\n# #                            'predict_player',\n# #                            'predict_offense',\n# #                            'predict_defense'\n# 'A',\n# #'DisplayName',\n# 'predict_defense',\n# 'predict_offense',\n# 'YardLine_adj',\n# 'Location',\n# #'DisplayName_Avg_Yards',\n# #'PlayerCollegeName',\n# 'S',\n# 'Stadium',\n# #'Season',\n# #'YardLine',\n# 'Defense_Team',\n# 'WindDirection',\n# #'VisitorTeamAbbr',\n# #'DisplayName_Yards_Bin_Rate_(6.7, 99.0]',\n# 'FieldPosition',\n# 'GameWeather',\n# 'HomeTeamAbbr',\n# 'OffensePersonnel',\n# 'predict_player',\n# 'DefendersInTheBox',\n# 'DisplayName_rusher_performance_bin',\n# 'Dis',\n# 'DisplayName_Std_Yards',\n# 'PossessionTeam',\n# 'Offense_Team',\n# 'DefensePersonnel',\n# 'Distance',\n# 'Orientation',\n# 'X',\n# 'DisplayName_Count',\n# 'DisplayName_Yards_Bin_Rate_(1.72, 4.21]',\n# 'Defense_DB',\n# 'OffenseFormation',\n# 'DisplayName_Bin_Count_(1.72, 4.21]',\n# 'DisplayName_Bin_Count_(6.7, 99.0]',\n# 'DisplayName_Yards_Bin_Rate_(-99.0, -0.01]',\n# 'Deffense_score',\n# 'DisplayName_Bin_Count_(0.01, 1.72]',\n# 'Dir',\n# 'Position',\n# 'VisitorScoreBeforePlay',\n# 'Turf',\n# 'StadiumType',\n# 'DisplayName_Bin_Count_(4.21, 6.7]',\n# 'clock_bin',\n# 'DisplayName_Yards_Bin_Rate_(0.01, 1.72]',\n# 'GameClock',\n# 'Defense_Team_Count',\n# 'Defense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n# 'GameClock_sec',\n# 'Offense_WR',\n# 'Down',\n# 'Team_side',\n# 'Defense_Team_Yards_Bin_Rate_(-0.01, 0.01]',\n# 'DisplayName_Yards_Bin_Rate_(-0.01, 0.01]',\n# 'Defense_Team_Bin_Count_(-99.0, -0.01]',\n# 'PlayerHeight',\n# 'Defense_LB',\n# 'Offense_OL',\n# 'Defense_Team_Yards_Bin_Rate_(-99.0, -0.01]',\n# 'Offense_score',\n# 'Y',\n# 'DisplayName_Yards_Bin_Rate_(4.21, 6.7]',\n# 'Defense_Team_Bin_Count_(1.72, 4.21]',\n# 'leading_team_defense_offense',\n# 'Defense_Team_Avg_Yards',\n# 'leading_by',\n# 'WindSpeed'\n\n\n#  ]\n\n\n","8dc9ebf6":"# train = h2o.H2OFrame(train_df)\n# # GBM hyperparameters\n# gbm_params1 = {'ntrees': [300,400],\n#                 'max_depth': [5,6],\n#                 'min_rows': [10,15,20]}\n\n# # Train and validate a cartesian grid of GBMs\n# gbm_grid1 = H2OGridSearch(model=H2ORandomForestEstimator,\n#                           grid_id='gbm_grid99',\n#                           hyper_params=gbm_params1)\n# gbm_grid1.train(x=training_columns, y='Yards',\n#                 training_frame=train,\n#                 seed=1)\n# gbm_gridperf1 = gbm_grid1.get_grid(sort_by='mae')\n# gbm_gridperf1","957af68c":"# def pre_process_train(train_df_all):\n#     train_df_all = imperial_to_metric(train_df_all)\n#     train_df_all = tag_rusher(train_df_all)\n#     train_df_all = get_player_age(train_df_all)\n#     #train_df_all, per_play = get_movement_features(train_df_all)\n#     train_df=train_df_all[train_df_all['NflId']==train_df_all['NflIdRusher']]\n\n#     train_df = clean_TeamAbbreviations(train_df)\n#     train_df = get_direction(train_df)\n#     train_df = get_leading_team_features(train_df)\n#     train_df = get_adjusted_yardline(train_df)\n#     train_df = get_GameClock_features(train_df)\n#     personnel_columns_to_add = get_personnel_types(train_df) #KEEP THIS VARIABLE FOR FUTURE USE\n#     train_df = get_split_personnel_types(personnel_columns_to_add, train_df)\n#     player_and_team_stats, train_df = add_bins_and_generate_stats(train_df)\n#     train_df=convert_to_cat(train_df)\n#     train_df=set_Turf(train_df)\n#     train_df['StadiumType'] = train_df['StadiumType'].apply(clean_StadiumType)\n#     train_df['WindDirection']=train_df['WindDirection'].apply(clean_WindDirection)\n#     train_df['WindDirection']=train_df['WindDirection'].apply(transform_WindDirection)\n#     train_df=GameWeather(train_df)\n#     #train_df = g.cat.add_categories(\"D\").fillna(\"D\")\n#     #train_df=train_df.fillna(0)\n\n#     return player_and_team_stats, personnel_columns_to_add, train_df","61f1315e":"# def build_and_return_model(train_df, training_columns, name, ntrees, max_depth, min_rows):\n#     train = h2o.H2OFrame(train_df)\n#     model = H2ORandomForestEstimator(ntrees=ntrees, max_depth=max_depth, min_rows=min_rows, keep_cross_validation_predictions=True, nfolds=10, seed=1)\n#     model.train(x=training_columns, y='Yards', training_frame=train)\n#     cv_predictions = model.cross_validation_holdout_predictions()\n#     train_df = train_df.join(cv_predictions.as_data_frame())\n#     train_df.rename(columns={'predict':('predict_' + name)}, inplace=True)\n#     return model, train_df","bc8922d0":"# def train_my_model(train_df, models_columns):\n#     player_and_team_stats, personnel_columns_to_add, train_df = pre_process_train(train_df)\n#     model_player,train_df = build_and_return_model(train_df, models_columns['player'], 'player', 300, 5, 27)\n#     model_offense,train_df = build_and_return_model(train_df, models_columns['offense'], 'offense', 300, 5, 15)\n#     model_defense,train_df = build_and_return_model(train_df, models_columns['defense'], 'defense', 300, 6, 25)\n#     model_final,train_df = build_and_return_model(train_df, models_columns['final'], 'final', 300, 6, 20)\n#     return player_and_team_stats, personnel_columns_to_add, {'player':model_player, 'offense':model_offense,'defense':model_defense,'final':model_final}","428fe087":"# def make_my_predictions(test_df_all, sample_prediction_df, models, player_and_team_stats, personnel_columns_to_add):\n#     test_df_all = imperial_to_metric(test_df_all)\n#     test_df_all = tag_rusher(test_df_all)\n#     test_df_all = get_player_age(test_df_all)\n#     test_df_all = get_adjusted_yardline(test_df_all)\n#     test_df_all=norm_x(test_df_all)\n#     test_df_all['euc_dis_from_center']=eucl_distance(test_df_all['X_adj'],0,test_df_all['Y'],0)\n#     test_df_all=ruser_qb_dis(test_df_all)\n#     test_df_all=Direction_orientation_adj(test_df_all)\n#     test_df_all=X_Y_Velocity(test_df_all)\n#     #train_df_all, per_play = get_movement_features(train_df_all)\n\n#     test_df=test_df_all[test_df_all['NflId']==test_df_all['NflIdRusher']]\n#     test_df = test_df.fillna(0)\n\n#     test_df = clean_TeamAbbreviations(test_df)\n#     test_df = get_direction(test_df)\n#     test_df = get_leading_team_features(test_df)\n#     test_df = get_GameClock_features(test_df)\n#     test_df = get_split_personnel_types(personnel_columns_to_add, test_df)\n#     for key,value in player_and_team_stats.items():\n#         test_df = test_df.merge(value, on=key, how='left').fillna(0)\n#         if key == 'DisplayName' and test_df['DisplayName_rusher_performance_bin'].iloc[0] == 0:\n#             test_df['DisplayName_rusher_performance_bin'] = 'few_plays'\n#     test_df=convert_to_cat(test_df)\n#     test_df=set_Turf(test_df)\n#     test_df['StadiumType'] = test_df['StadiumType'].apply(clean_StadiumType)\n#     test_df['WindDirection']=test_df['WindDirection'].apply(clean_WindDirection)\n#     test_df['WindDirection']=test_df['WindDirection'].apply(transform_WindDirection)\n#     test_df=GameWeather(test_df)\n#     #test_df=test_df.fillna(0)\n    \n#     for model_type,model in models.items():\n#         test_df_curr = h2o.H2OFrame(test_df)\n#         try:\n#             pred=model.predict(test_df_curr)\n#             test_df = test_df.join(pred.as_data_frame())\n       \n#         except Exception as e: \n#             print(e)\n#             print(test_df.iloc[0])\n#             test_df['predict'] = 3\n#             pred = pd.DataFrame([[3]], columns=['predict'])\n#         test_df.rename(columns={'predict':'predict_' + model_type}, inplace=True)\n    \n#     #m=models['final'].predict_contributions(h2o.H2OFrame(test_df))\n# #     st=models['final'].model_performance().mae()\n\n# #     #st=1.634490746\n# #     ssx=1.17829300428312*st*4086\n# #     se=[];n=4086\n# #     pred = pd.DataFrame(columns = sample_prediction_df.columns)\n# #     pred.loc[len(pred)] = 0\n# #     x0=test_df['predict_final'].iloc[0]\n# #     x=4.059960841\n# #     std=st*math.sqrt(1+1\/n+(np.float_power(x0-x, 2))\/ssx)\n# #     for j in range(0, sample_prediction_df.shape[1]):  \n# #         pred.iloc[0,j]=norm.cdf(j-99,test_df['predict_final'].iloc[0], std)\n#     return pred","8441279c":"# #train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n# player_and_team_stats, personnel_columns_to_add, train_df = pre_process_train(train_df)","1f30ca94":"# def get_models_columns():\n#     player_model_columns = [#'DisplayName_Bin_Count_(-99.0, -0.01]','DisplayName_Bin_Count_(-0.01, 0.01]','DisplayName_Bin_Count_(0.01, 1.72]','DisplayName_Bin_Count_(1.72, 4.21]','DisplayName_Bin_Count_(4.21, 6.7]',\n#                             'DisplayName_Bin_Count_(6.7, 99.0]',\n#                             'DisplayName_Yards_Bin_Rate_(-99.0, -0.01]',\n#                             #'DisplayName_Yards_Bin_Rate_(-0.01, 0.01]',\n#                             #'DisplayName_Yards_Bin_Rate_(0.01, 1.72]',\n#                             'DisplayName_Yards_Bin_Rate_(1.72, 4.21]',\n#                             #'DisplayName_Yards_Bin_Rate_(4.21, 6.7]',\n#                             'DisplayName_Yards_Bin_Rate_(6.7, 99.0]',\n#                             'DisplayName_Avg_Yards',\n#                             #'DisplayName_Count',\n#                             'DisplayName_Std_Yards',\n#                             'DisplayName_rusher_performance_bin',#'JerseyNumber',\n#                             #'Position',\n#                             'PlayerCollegeName',\n#                             #'PlayerHeight_cm','PlayerWeight_kg','Age','PlayerWeight','PlayerHeight'\n#                             ]\n#     offense_team_model_columns =['PossessionTeam', 'OffenseFormation','OffensePersonnel',\n#                                  #'Offense_Team_Bin_Count_(-99.0, -0.01]','Offense_Team_Bin_Count_(-0.01, 0.01]','Offense_Team_Bin_Count_(0.01, 1.72]','Offense_Team_Bin_Count_(1.72, 4.21]',\n#                                  #'Offense_Team_Bin_Count_(4.21, 6.7]','Offense_Team_Bin_Count_(6.7, 99.0]','Offense_Team_Yards_Bin_Rate_(-99.0, -0.01]','Offense_Team_Yards_Bin_Rate_(-0.01, 0.01]','Offense_Team_Yards_Bin_Rate_(0.01, 1.72]','Offense_Team_Yards_Bin_Rate_(1.72, 4.21]','Offense_Team_Yards_Bin_Rate_(4.21, 6.7]',\n#                                  'Offense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n#                                 'Team_side','Offense_Team_Avg_Yards',\n#                                 'YardLine_adj','Distance','Offense_score',\n#                                 'clock_bin',\n#                                 'Offense_WR']\n#     defense_team_model_columns = [# 'Defense_Team_Bin_Count_(-99.0, -0.01]','Defense_Team_Bin_Count_(-0.01, 0.01]','Defense_Team_Bin_Count_(0.01, 1.72]',\n#                                  #'Defense_Team_Bin_Count_(1.72, 4.21]','Defense_Team_Bin_Count_(4.21, 6.7]','Defense_Team_Bin_Count_(6.7, 99.0]',\n#                                  #'Defense_Team_Yards_Bin_Rate_(-99.0, -0.01]','Defense_Team_Yards_Bin_Rate_(-0.01, 0.01]','Defense_Team_Yards_Bin_Rate_(0.01, 1.72]','Defense_Team_Yards_Bin_Rate_(1.72, 4.21]',\n#                                  #'Defense_Team_Yards_Bin_Rate_(4.21, 6.7]', 'Defense_Team_Yards_Bin_Rate_(6.7, 99.0]',\n#                                 'Defense_Team_Avg_Yards',#'Defense_Team_Count','Defense_Team_Std_Yards',\n#                                 'Defense_DB',#'Defense_LB',#'Defense_OL',\n#                                  #'Defense_DL',\n#                                 'Defense_Team','DefendersInTheBox','DefensePersonnel','YardLine_adj','Distance','Deffense_score',\n#                                ]\n#     final_model_columns = ['A',\n#                             'DisplayName',\n#                             'predict_defense',\n#                             'predict_offense',\n#                             'YardLine_adj',\n#                             'Location',\n#                             'DisplayName_Avg_Yards',\n#                             'PlayerCollegeName',\n#                             'S',\n#                             'Stadium',\n#                             #'Season',\n#                             'YardLine',\n#                             'Defense_Team',\n#                             'WindDirection',\n#                             'VisitorTeamAbbr',\n#                             'DisplayName_Yards_Bin_Rate_(6.7, 99.0]',\n#                             'FieldPosition',\n#                             'GameWeather',\n#                             'HomeTeamAbbr',\n#                             'OffensePersonnel',\n#                             'predict_player',\n#                             'DefendersInTheBox',\n#                             'DisplayName_rusher_performance_bin',\n#                             'Dis',\n#                             'DisplayName_Std_Yards',\n#                             'PossessionTeam',\n#                             'Offense_Team',\n#                             'DefensePersonnel'\n#                           ]\n#     return {'player': player_model_columns, 'offense':offense_team_model_columns, 'defense':defense_team_model_columns, 'final':final_model_columns}\n","8b4d9afd":"# from kaggle.competitions import nflrush\n# env = nflrush.make_env()\n# h2o.init(min_mem_size='16G')\n# # Training data is in the competition dataset as usual\n# train_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n\n# models_columns = get_models_columns()\n\n# player_and_team_stats, personnel_columns_to_add, models = train_my_model(train_df, models_columns)\n\n# for (test_df, sample_prediction_df) in env.iter_test():\n#     predictions_df = make_my_predictions(test_df, sample_prediction_df, models, player_and_team_stats, personnel_columns_to_add)\n#     env.predict(predictions_df)\n# env.write_submission_file()","5efcfc06":" #df=train_df","249ccf45":"# # Split train\/test functions\n# def train_test_split_latest(test_percent, dataset, random_state):\n#     last_games_sample = list(games.iloc[round(len(games) * (1-test_percent)):])\n#     test = dataset[dataset.GameId.isin(last_games_sample)]\n#     train = dataset[~dataset.GameId.isin(last_games_sample)]\n#     portion = test.PlayId.nunique() \/ (dataset.PlayId.nunique())\n#     return train, test, portion\n# def train_test_split_random(test_percent, dataset, random_state):\n#     # Random_state = 3 works\n#     games = dataset.GameId.drop_duplicates()\n#     random_games_sample = list(games.sample(frac=test_percent, random_state=random_state))\n#     test = dataset[dataset.GameId.isin(random_games_sample)]\n#     train = dataset[~dataset.GameId.isin(random_games_sample)]\n#     portion = test.PlayId.nunique() \/ (dataset.PlayId.nunique())\n#     return train, test, portion","8cee536d":"### !!! TEST ZONE BELOW !!!","091e7b46":"# Test submodels here","35fd12f6":"### get_models_columns in hidden cell below"}}