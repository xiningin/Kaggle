{"cell_type":{"96e1b581":"code","c3eab790":"code","54edae6b":"code","300d490d":"code","79cf2d3b":"code","dceb448c":"code","23d77af5":"code","6d584445":"code","3f2cdbbb":"code","f8a21db2":"code","9602eadc":"code","419d90ff":"code","2c21b7d2":"code","1e39dfb0":"code","50daf533":"code","7404dbed":"code","7804bcf8":"code","6b4bee27":"code","0fb41baa":"code","e90fd993":"code","d583b7a2":"code","7096219d":"code","cd62838b":"code","bf97e660":"code","3bcf537c":"code","0c4a8a9c":"code","63cc4bb5":"code","d7c1b1ef":"code","81a8d3be":"code","4bdf0aab":"code","a949c8b4":"code","1d275ee5":"code","21961f49":"code","bbf182a8":"markdown","fbd7b74d":"markdown"},"source":{"96e1b581":"import pandas as pd\nimport numpy as np\nfrom sklearn import preprocessing \nfrom fancyimpute import KNN   \nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import cohen_kappa_score, make_scorer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree\nfrom sklearn.pipeline import Pipeline","c3eab790":"train=pd.read_csv(\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ntest=pd.read_csv(\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","54edae6b":"train.head(2)","300d490d":"#Loan ID is dropped because it is not required\ntrain=train.drop([\"Loan_ID\"],axis=1)\ntest=test.drop([\"Loan_ID\"],axis=1)","79cf2d3b":"print(train.isnull().sum())","dceb448c":"train.info()","23d77af5":"#Credit History and Loan Amount Term are categorical variables\ntrain[\"Credit_History\"]=train[\"Credit_History\"].astype(\"object\")","6d584445":"#KNN imputation\n#Assigning levels to the categories\nlis = []\nfor i in range(0, train.shape[1]):\n    if(train.iloc[:,i].dtypes == 'object'):\n        train.iloc[:,i] = pd.Categorical(train.iloc[:,i])\n        train.iloc[:,i] = train.iloc[:,i].cat.codes \n        train.iloc[:,i] = train.iloc[:,i].astype('object')\n        lis.append(train.columns[i])","3f2cdbbb":"#replace -1 with NA to impute\nfor i in range(0, train.shape[1]):\n    train.iloc[:,i] = train.iloc[:,i].replace(-1, np.nan) ","f8a21db2":"#Apply KNN imputation algorithm\ntrain = pd.DataFrame(KNN(k = 3).fit_transform(train), columns = train.columns)","9602eadc":"#Convert into proper datatypes\nfor i in lis:\n    train.loc[:,i] = train.loc[:,i].round()\n    train.loc[:,i] = train.loc[:,i].astype('object')","419d90ff":"train.head()","2c21b7d2":"#Checking correlation between continuous variable\nnumvar=[\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"]\ndf_corr = train.loc[:,numvar]\nsns.heatmap(df_corr.corr(), annot = True, fmt='.2g',cmap= 'coolwarm')","1e39dfb0":"#Standardizing the numerical variables\ntrain[\"ApplicantIncome\"]= (train[\"ApplicantIncome\"] - train[\"ApplicantIncome\"].mean())\/train[\"ApplicantIncome\"].std()\ntrain[\"CoapplicantIncome\"]= (train[\"CoapplicantIncome\"] - train[\"CoapplicantIncome\"].mean())\/train[\"CoapplicantIncome\"].std()\ntrain[\"LoanAmount\"]= (train[\"LoanAmount\"] - train[\"LoanAmount\"].mean())\/train[\"LoanAmount\"].std()\ntrain[\"Loan_Amount_Term\"]= (train[\"Loan_Amount_Term\"] - train[\"Loan_Amount_Term\"].mean())\/train[\"Loan_Amount_Term\"].std()","50daf533":"X=train.drop([\"Loan_Status\"],axis=1)\nY=train[\"Loan_Status\"]\nY=Y.astype(int)\nx=np.array(X)\ny=np.array(Y)","7404dbed":"decisiontree = tree.DecisionTreeClassifier()\npipe = Pipeline(steps=[('decisiontree', decisiontree)])\ncriterion = ['gini', 'entropy']\nmax_depth = list(range(1,20))\nparameters = dict(decisiontree__criterion=criterion,decisiontree__max_depth=max_depth)\ndt = GridSearchCV(pipe, parameters,cv=5,scoring=\"f1\", n_jobs=-1)\ndt.fit(x,y)\nscores = cross_val_score(dt, x, y,scoring=\"f1\", cv=5)\nprint(\"DT Cross validation f1 score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","7804bcf8":"#Naive Bayes\nparameters = {'priors':[[0.01, 0.99],[0.1, 0.9], [0.2, 0.8], [0.25, 0.75], [0.3, 0.7],[0.35, 0.65], [0.4, 0.6],[0.45,0.55],[0.5,0.5],[0.55,0.45],[0.6,0.4]]}\nnb = GridSearchCV(GaussianNB(), parameters, scoring = 'f1', n_jobs=-1)\nnb.fit(x, y)\nscores = cross_val_score(nb, x, y,scoring = 'f1', cv=5)\nprint(\"NB Cross validation F1 score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","6b4bee27":"number_of_neighbors = range(1,20)\nparams = {'n_neighbors':number_of_neighbors}\nknn = KNeighborsClassifier()\nknnmodel = GridSearchCV(knn, params, cv=5,scoring=\"f1\", n_jobs=-1)\nknnmodel.fit(x,y)\nscores = cross_val_score(knnmodel, x, y,scoring=\"f1\", cv=5)\nprint(\"KNN Cross validation f1 score: {0:.2%} (+\/- {1:.2%})\".format(np.mean(scores), np.std(scores)*2))","0fb41baa":"test[\"Credit_History\"]=test[\"Credit_History\"].astype(\"object\")","e90fd993":"#KNN imputation\n#Assigning levels to the categories\nlis = []\nfor i in range(0, test.shape[1]):\n    if(test.iloc[:,i].dtypes == 'object'):\n        test.iloc[:,i] = pd.Categorical(test.iloc[:,i])\n        test.iloc[:,i] = test.iloc[:,i].cat.codes \n        test.iloc[:,i] = test.iloc[:,i].astype('object')\n        lis.append(test.columns[i])","d583b7a2":"#replace -1 with NA to impute\nfor i in range(0, test.shape[1]):\n    test.iloc[:,i] = test.iloc[:,i].replace(-1, np.nan) ","7096219d":"#Apply KNN imputation algorithm\ntest = pd.DataFrame(KNN(k = 3).fit_transform(test), columns = test.columns)","cd62838b":"#Convert into proper datatypes\nfor i in lis:\n    test.loc[:,i] = test.loc[:,i].round()\n    test.loc[:,i] = test.loc[:,i].astype('object')","bf97e660":"test[\"ApplicantIncome\"]= (test[\"ApplicantIncome\"] - test[\"ApplicantIncome\"].mean())\/test[\"ApplicantIncome\"].std()\ntest[\"CoapplicantIncome\"]= (test[\"CoapplicantIncome\"] - test[\"CoapplicantIncome\"].mean())\/test[\"CoapplicantIncome\"].std()\ntest[\"LoanAmount\"]= (test[\"LoanAmount\"] - test[\"LoanAmount\"].mean())\/test[\"LoanAmount\"].std()\ntest[\"Loan_Amount_Term\"]= (test[\"Loan_Amount_Term\"] - test[\"Loan_Amount_Term\"].mean())\/test[\"Loan_Amount_Term\"].std()","3bcf537c":"x=np.array(test)","0c4a8a9c":"#Prediction\nypred=dt.predict(x)","63cc4bb5":"test=pd.read_csv(\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")\ntest[\"Loan_Status\"]=ypred","d7c1b1ef":"dict = {0 : 'N', 1: 'Y'} ","81a8d3be":"test['Loan_Status']= test['Loan_Status'].map(dict) ","4bdf0aab":"test.columns","a949c8b4":"test=test.drop(['Gender', 'Married', 'Dependents', 'Education',\n       'Self_Employed', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n       'Loan_Amount_Term', 'Credit_History', 'Property_Area'],axis=1)","1d275ee5":"test.head()","21961f49":"test.to_csv(\"submissionfinal.csv\")","bbf182a8":"Doing all the similar pre processing for test data","fbd7b74d":"1: Y\n0: N"}}