{"cell_type":{"e0a16112":"code","57617f78":"code","0c7b757a":"code","07f3e0e1":"code","05117f97":"code","2fd3a9cb":"code","4d4c63a6":"code","98387e9a":"code","9ccd7eb5":"code","280251b9":"code","646a203c":"code","c80b9bd6":"code","ef14e0ba":"code","0bc73c96":"code","6a70d413":"code","730f236f":"code","462a0307":"code","f1d98b9c":"code","ac96b187":"code","d78631ff":"code","6005f008":"code","325d98bd":"code","8aa50c6c":"code","fc6920cc":"code","2209c071":"code","df0f9621":"code","212b01e2":"code","fbcba91a":"code","cdcd6a13":"code","989d8e48":"code","f05d6cf5":"code","04eb76a4":"code","aaa5abc2":"code","219b3707":"code","e85e28be":"code","5cdb72f4":"code","3f820ba1":"code","6a48de4e":"code","9cb5ce90":"code","9d68a6e2":"code","c70d8c87":"code","6646ae9a":"code","85415af9":"code","b9a1d91c":"code","1c8a4f5d":"code","0de6fd22":"code","bc74a41f":"code","34c9a858":"code","ea53d4f8":"code","1c8cbb8b":"code","1e8dba11":"code","aedccafd":"code","ea1eb41d":"code","c6890526":"code","386fd248":"code","f82d5cbd":"code","7c1bf45b":"code","f4005b9f":"code","0475f63f":"code","cf8cdf6d":"code","84c7b2f6":"code","4abe38a5":"code","d79a6295":"code","2f6b8452":"code","2235ce90":"code","e5fdfe42":"code","0caf704c":"code","c3801bea":"code","90e09214":"code","397d6403":"code","b7060364":"code","88eb901c":"code","8e555d6e":"code","48970da2":"code","1e643c08":"code","9ffcfcca":"code","dc184509":"code","94cebd7f":"code","8d7efe63":"code","30645d6e":"code","dcc51766":"code","c8afb06a":"code","bf50466d":"code","c5853c1a":"code","8fd6e69a":"code","2ce432e3":"code","02e46f95":"code","3c555e83":"code","520782c4":"code","dbae07bc":"code","bf4d2380":"code","a3b3d84f":"code","c890ef53":"code","dbd0c5ff":"code","b73fc3f9":"code","1e9fd13b":"code","3df19e11":"code","98b9f01f":"code","92746977":"code","b4dbcbee":"code","a695c070":"code","d88d7899":"code","61132b1a":"code","2d55908e":"code","30be9801":"code","f4b2ee7b":"code","2186c754":"code","96392d05":"code","cf6acd4c":"code","12ab1693":"code","9c688f02":"code","9942f3bb":"code","9b962548":"code","62e33413":"code","a83ca0d4":"code","8fd440b0":"code","5d1bc117":"markdown","16889196":"markdown","0139643f":"markdown","ebc93a5d":"markdown","0fe55832":"markdown","cdabc742":"markdown","bc293917":"markdown","d1261a2b":"markdown","bb04f9b7":"markdown","fa799c3c":"markdown","3e62d48f":"markdown","05e22077":"markdown","8608ca81":"markdown","514440c6":"markdown","ccbb3d77":"markdown","9e3dadc3":"markdown","1f44419b":"markdown","9325f61e":"markdown","c2f9f384":"markdown","69667ec0":"markdown","2ac71484":"markdown","21820dca":"markdown"},"source":{"e0a16112":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time","57617f78":"print(os.listdir('..\/input\/kdd-cup-1999-data'))","0c7b757a":"with open(\"..\/input\/kdd-cup-1999-data\/kddcup.names\",'r') as f:\n    print(f.read())","07f3e0e1":"cols=\"\"\"duration,\nprotocol_type,\nservice,\nflag,\nsrc_bytes,\ndst_bytes,\nland,\nwrong_fragment,\nurgent,\nhot,\nnum_failed_logins,\nlogged_in,\nnum_compromised,\nroot_shell,\nsu_attempted,\nnum_root,\nnum_file_creations,\nnum_shells,\nnum_access_files,\nnum_outbound_cmds,\nis_host_login,\nis_guest_login,\ncount,\nsrv_count,\nserror_rate,\nsrv_serror_rate,\nrerror_rate,\nsrv_rerror_rate,\nsame_srv_rate,\ndiff_srv_rate,\nsrv_diff_host_rate,\ndst_host_count,\ndst_host_srv_count,\ndst_host_same_srv_rate,\ndst_host_diff_srv_rate,\ndst_host_same_src_port_rate,\ndst_host_srv_diff_host_rate,\ndst_host_serror_rate,\ndst_host_srv_serror_rate,\ndst_host_rerror_rate,\ndst_host_srv_rerror_rate\"\"\"\n\ncolumns=[]\nfor c in cols.split(','):\n    if(c.strip()):\n       columns.append(c.strip())\n\ncolumns.append('target')\n#print(columns)\nprint(len(columns))","05117f97":"with open(\"..\/input\/kdd-cup-1999-data\/training_attack_types\",'r') as f:\n    print(f.read())","2fd3a9cb":"attacks_types = {\n    'normal': 'normal',\n'back': 'dos',\n'buffer_overflow': 'u2r',\n'ftp_write': 'r2l',\n'guess_passwd': 'r2l',\n'imap': 'r2l',\n'ipsweep': 'probe',\n'land': 'dos',\n'loadmodule': 'u2r',\n'multihop': 'r2l',\n'neptune': 'dos',\n'nmap': 'probe',\n'perl': 'u2r',\n'phf': 'r2l',\n'pod': 'dos',\n'portsweep': 'probe',\n'rootkit': 'u2r',\n'satan': 'probe',\n'smurf': 'dos',\n'spy': 'r2l',\n'teardrop': 'dos',\n'warezclient': 'r2l',\n'warezmaster': 'r2l',\n}\n","4d4c63a6":"path = \"..\/input\/kdd-cup-1999-data\/kddcup.data_10_percent.gz\"\ndf = pd.read_csv(path,names=columns)\n\n#Adding Attack Type column\ndf['Attack Type'] = df.target.apply(lambda r:attacks_types[r[:-1]])\n\ndf.head()","98387e9a":"df.shape","9ccd7eb5":"df['target'].value_counts()","280251b9":"df['Attack Type'].value_counts()","646a203c":"df.dtypes","c80b9bd6":"df.isnull().sum()","ef14e0ba":"#Finding categorical features\nnum_cols = df._get_numeric_data().columns\n\ncate_cols = list(set(df.columns)-set(num_cols))\ncate_cols.remove('target')\ncate_cols.remove('Attack Type')\n\ncate_cols","0bc73c96":"\ndef bar_graph(feature):\n    df[feature].value_counts().plot(kind=\"bar\")","6a70d413":"bar_graph('protocol_type')","730f236f":"plt.figure(figsize=(15,3))\nbar_graph('service')","462a0307":"bar_graph('flag')","f1d98b9c":"bar_graph('logged_in')","ac96b187":"bar_graph('target')","d78631ff":"bar_graph('Attack Type')","6005f008":"df.columns","325d98bd":"df = df.dropna('columns')# drop columns with NaN\n\ndf = df[[col for col in df if df[col].nunique() > 1]]# keep columns where there are more than 1 unique values\n\ncorr = df.corr()\n\nplt.figure(figsize=(15,12))\n\nsns.heatmap(corr)\n\nplt.show()","8aa50c6c":"df['num_root'].corr(df['num_compromised'])","fc6920cc":"df['srv_serror_rate'].corr(df['serror_rate'])","2209c071":"df['srv_count'].corr(df['count'])","df0f9621":"df['srv_rerror_rate'].corr(df['rerror_rate'])","212b01e2":"df['dst_host_same_srv_rate'].corr(df['dst_host_srv_count'])","fbcba91a":"df['dst_host_srv_serror_rate'].corr(df['dst_host_serror_rate'])","cdcd6a13":"df['dst_host_srv_rerror_rate'].corr(df['dst_host_rerror_rate'])","989d8e48":"df['dst_host_same_srv_rate'].corr(df['same_srv_rate'])","f05d6cf5":"df['dst_host_srv_count'].corr(df['same_srv_rate'])","04eb76a4":"df['dst_host_same_src_port_rate'].corr(df['srv_count'])","aaa5abc2":"df['dst_host_serror_rate'].corr(df['serror_rate'])","219b3707":"df['dst_host_serror_rate'].corr(df['srv_serror_rate'])","e85e28be":"df['dst_host_srv_serror_rate'].corr(df['serror_rate'])","5cdb72f4":"df['dst_host_srv_serror_rate'].corr(df['srv_serror_rate'])","3f820ba1":"df['dst_host_rerror_rate'].corr(df['rerror_rate'])","6a48de4e":"df['dst_host_rerror_rate'].corr(df['srv_rerror_rate'])","9cb5ce90":"df['dst_host_srv_rerror_rate'].corr(df['rerror_rate'])","9d68a6e2":"df['dst_host_srv_rerror_rate'].corr(df['srv_rerror_rate'])","c70d8c87":"#This variable is highly correlated with num_compromised and should be ignored for analysis.\n#(Correlation = 0.9938277978738366)\ndf.drop('num_root',axis = 1,inplace = True)\n\n#This variable is highly correlated with serror_rate and should be ignored for analysis.\n#(Correlation = 0.9983615072725952)\ndf.drop('srv_serror_rate',axis = 1,inplace = True)\n\n#This variable is highly correlated with rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9947309539817937)\ndf.drop('srv_rerror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with srv_serror_rate and should be ignored for analysis.\n#(Correlation = 0.9993041091850098)\ndf.drop('dst_host_srv_serror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9869947924956001)\ndf.drop('dst_host_serror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with srv_rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9821663427308375)\ndf.drop('dst_host_rerror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9851995540751249)\ndf.drop('dst_host_srv_rerror_rate',axis = 1, inplace=True)\n\n#This variable is highly correlated with srv_rerror_rate and should be ignored for analysis.\n#(Correlation = 0.9865705438845669)\ndf.drop('dst_host_same_srv_rate',axis = 1, inplace=True)","6646ae9a":"df.head()","85415af9":"df.shape","b9a1d91c":"df.columns","1c8a4f5d":"df_std = df.std()\ndf_std = df_std.sort_values(ascending = True)\ndf_std","0de6fd22":"df['protocol_type'].value_counts()","bc74a41f":"pmap = {'icmp':0,'tcp':1,'udp':2}\ndf['protocol_type'] = df['protocol_type'].map(pmap)","34c9a858":"df['flag'].value_counts()","ea53d4f8":"fmap = {'SF':0,'S0':1,'REJ':2,'RSTR':3,'RSTO':4,'SH':5 ,'S1':6 ,'S2':7,'RSTOS0':8,'S3':9 ,'OTH':10}\ndf['flag'] = df['flag'].map(fmap)","1c8cbb8b":"df.head()","1e8dba11":"df.drop('service',axis = 1,inplace= True)","aedccafd":"df.shape","ea1eb41d":"df.head()","c6890526":"df.dtypes","386fd248":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import accuracy_score","f82d5cbd":"df = df.drop(['target',], axis=1)\nprint(df.shape)\n\n# Target variable and train set\nY = df[['Attack Type']]\nX = df.drop(['Attack Type',], axis=1)\n\nsc = MinMaxScaler()\nX = sc.fit_transform(X)\n\n# Split test and train data \nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)\nprint(X_train.shape, X_test.shape)\nprint(Y_train.shape, Y_test.shape)","7c1bf45b":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB","f4005b9f":"model1 = GaussianNB()","0475f63f":"start_time = time.time()\nmodel1.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","cf8cdf6d":"print(\"Training time: \",end_time-start_time)","84c7b2f6":"start_time = time.time()\nY_test_pred1 = model1.predict(X_test)\nend_time = time.time()","4abe38a5":"print(\"Testing time: \",end_time-start_time)","d79a6295":"print(\"Train score is:\", model1.score(X_train, Y_train))\nprint(\"Test score is:\",model1.score(X_test,Y_test))","2f6b8452":"#Decision Tree \nfrom sklearn.tree import DecisionTreeClassifier","2235ce90":"model2 = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)","e5fdfe42":"start_time = time.time()\nmodel2.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","0caf704c":"print(\"Training time: \",end_time-start_time)","c3801bea":"start_time = time.time()\nY_test_pred2 = model2.predict(X_test)\nend_time = time.time()","90e09214":"print(\"Testing time: \",end_time-start_time)","397d6403":"print(\"Train score is:\", model2.score(X_train, Y_train))\nprint(\"Test score is:\",model2.score(X_test,Y_test))","b7060364":"from sklearn.ensemble import RandomForestClassifier","88eb901c":"model3 = RandomForestClassifier(n_estimators=30)","8e555d6e":"start_time = time.time()\nmodel3.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","48970da2":"print(\"Training time: \",end_time-start_time)","1e643c08":"start_time = time.time()\nY_test_pred3 = model3.predict(X_test)\nend_time = time.time()","9ffcfcca":"print(\"Testing time: \",end_time-start_time)","dc184509":"print(\"Train score is:\", model3.score(X_train, Y_train))\nprint(\"Test score is:\",model3.score(X_test,Y_test))","94cebd7f":"from sklearn.svm import SVC","8d7efe63":"model4 = SVC(gamma = 'scale')","30645d6e":"start_time = time.time()\nmodel4.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","dcc51766":"print(\"Training time: \",end_time-start_time)","c8afb06a":"start_time = time.time()\nY_test_pred4 = model4.predict(X_test)\nend_time = time.time()","bf50466d":"print(\"Testing time: \",end_time-start_time)","c5853c1a":"print(\"Train score is:\", model4.score(X_train, Y_train))\nprint(\"Test score is:\", model4.score(X_test,Y_test))","8fd6e69a":"from sklearn.linear_model import LogisticRegression","2ce432e3":"model5 = LogisticRegression(max_iter=1200000)","02e46f95":"start_time = time.time()\nmodel5.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","3c555e83":"print(\"Training time: \",end_time-start_time)","520782c4":"start_time = time.time()\nY_test_pred5 = model5.predict(X_test)\nend_time = time.time()","dbae07bc":"print(\"Testing time: \",end_time-start_time)","bf4d2380":"print(\"Train score is:\", model5.score(X_train, Y_train))\nprint(\"Test score is:\",model5.score(X_test,Y_test))","a3b3d84f":"from sklearn.ensemble import GradientBoostingClassifier","c890ef53":"model6 = GradientBoostingClassifier(random_state=0)","dbd0c5ff":"start_time = time.time()\nmodel6.fit(X_train, Y_train.values.ravel())\nend_time = time.time()","b73fc3f9":"print(\"Training time: \",end_time-start_time)","1e9fd13b":"start_time = time.time()\nY_test_pred6 = model6.predict(X_test)\nend_time = time.time()","3df19e11":"print(\"Testing time: \",end_time-start_time)","98b9f01f":"print(\"Train score is:\", model6.score(X_train, Y_train))\nprint(\"Test score is:\", model6.score(X_test,Y_test))","92746977":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier","b4dbcbee":"def fun():\n    model = Sequential()\n    \n    \n    model.add(Dense(30,input_dim =30,activation = 'relu',kernel_initializer='random_uniform'))\n    \n    \n    model.add(Dense(1,activation='sigmoid',kernel_initializer='random_uniform'))\n    \n   \n    model.add(Dense(5,activation='softmax'))\n    \n    \n    model.compile(loss ='categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])\n    \n    return model","a695c070":"\nmodel7 = KerasClassifier(build_fn=fun,epochs=100,batch_size=64)","d88d7899":"start = time.time()\nmodel7.fit(X_train, Y_train.values.ravel())\nend = time.time()","61132b1a":"print('Training time')\nprint((end-start))","2d55908e":"start_time = time.time()\nY_test_pred7 = model7.predict(X_test)\nend_time = time.time()","30be9801":"print(\"Testing time: \",end_time-start_time)","f4b2ee7b":"start_time = time.time()\nY_train_pred7 = model7.predict(X_train)\nend_time = time.time()","2186c754":"accuracy_score(Y_train,Y_train_pred7)","96392d05":"accuracy_score(Y_test,Y_test_pred7)","cf6acd4c":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [87.951,99.058,99.997,99.875,99.352,99.793,99.914]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.ylim(80,102)\nplt.bar(names,values)","12ab1693":"f.savefig('training_accuracy_figure.png',bbox_inches='tight')","9c688f02":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [87.903,99.052,99.969,99.879,99.352,99.771,99.886]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.ylim(80,102)\nplt.bar(names,values)","9942f3bb":"f.savefig('test_accuracy_figure.png',bbox_inches='tight')","9b962548":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [1.04721,1.50483,11.45332,126.96016,56.67286,446.69099,1211.54094]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.bar(names,values)","62e33413":"f.savefig('train_time_figure.png',bbox_inches='tight')","a83ca0d4":"names = ['NB','DT','RF','SVM','LR','GB','ANN']\nvalues = [0.79089,0.10471,0.60961,32.72654,0.02198,1.41416,1.72521]\nf = plt.figure(figsize=(15,3),num=10)\nplt.subplot(131)\nplt.bar(names,values)","8fd440b0":"f.savefig('test_time_figure.png',bbox_inches='tight')","5d1bc117":"Artificial Neural Network","16889196":"MODELLING","0139643f":"FEATURE MAPPING","ebc93a5d":"TESTING TIME","0fe55832":"GRADIENT BOOSTING CLASSIFIER","cdabc742":"LOGISTIC REGRESSION","bc293917":"DECISION TREE","d1261a2b":"This is the second version of my public kernel(Intrusion Detection System). ANN is also trained & tested on the dataset in this version.\nI would really appreciate your feedback.","bb04f9b7":"CATEGORICAL FEATURES DISTRIBUTION","fa799c3c":"> NAIVE BAYES","3e62d48f":"DATA CORRELATION","05e22077":"READING DATASET","8608ca81":"TRAINING ACCURACY","514440c6":"SUPPORT VECTOR MACHINE","ccbb3d77":"TRAINING TIME","9e3dadc3":"DATA PREPROCESSING","1f44419b":"TESTING ACCURACY","9325f61e":"Attack Type(The attack types grouped by attack, it's what we will predict)","c2f9f384":"logged_in (1 if successfully logged in; 0 otherwise): We notice that just 70000 packets are successfully logged in.","69667ec0":"TARGET FEATURE DISTRIBUTION","2ac71484":"Protocol type: We notice that ICMP is the most present in the used data, then TCP and almost 20000 packets of UDP type","21820dca":"RANDOM FOREST"}}