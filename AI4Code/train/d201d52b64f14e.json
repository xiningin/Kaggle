{"cell_type":{"96f2d15d":"code","2c070321":"code","f6cdfb0a":"code","30e811e8":"code","f437b984":"code","0425c351":"code","6636b1a6":"code","a842a14f":"code","a74dfb66":"code","9ac2a858":"code","bc7286e9":"code","9fb073bc":"code","b8a856e7":"code","b81d37bf":"code","0cf13476":"code","dd92876c":"code","c49d8beb":"code","9fd28ce7":"code","ccdf1461":"code","a2130083":"code","18fb5e6b":"code","1d3e06e6":"markdown","4dfdc276":"markdown","b146ff53":"markdown","fdabf693":"markdown","e81180ea":"markdown","71483fc3":"markdown","5ddc015a":"markdown","c0d9928d":"markdown","6a8fca30":"markdown","cc117d85":"markdown","b6dbb4fe":"markdown","7a7bd2fe":"markdown"},"source":{"96f2d15d":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px","2c070321":"def load_csv(base_dir,file_name):\n    \"\"\"Loads a CSV file into a Pandas DataFrame\"\"\"\n    file_path = os.path.join(base_dir,file_name)\n    df = pd.read_csv(file_path,low_memory=False)\n    return df\n\n","f6cdfb0a":"def count_then_return_percent(dataframe,column_name):\n    '''\n    A helper function to return value counts as percentages.\n    \n    It has the following dependencies:\n    numpy: 1.18.5; pandas: 1.1.3\n\n    import numpy as np \n    import pandas as pd \n    '''\n    \n    counts = dataframe[column_name].value_counts(dropna=False)\n    percentages = round(counts*100\/(dataframe[column_name].count()),1)\n    return percentages\n\ndef count_then_return_percent_for_multiple_column_questions(dataframe,list_of_columns_for_a_single_question,dictionary_of_counts_for_a_single_question):\n    '''\n    A helper function to convert counts to percentages.\n    \n    It has the following dependencies:\n    numpy: 1.18.5; pandas: 1.1.3\n\n    import numpy as np \n    import pandas as pd \n    '''\n    \n    df = dataframe\n    subset = list_of_columns_for_a_single_question\n    df = df[subset]\n    df = df.dropna(how='all')\n    total_count = len(df) \n    dictionary = dictionary_of_counts_for_a_single_question\n    for i in dictionary:\n        dictionary[i] = round(float(dictionary[i]*100\/total_count),1)\n    return dictionary \n\ndef create_dataframe_of_counts(dataframe,column,rename_index,rename_column,return_percentages=False):\n    '''\n    A helper function to create a dataframe of either counts \n    or percentages, for a single multiple choice question.\n    \n    It has the following dependencies: \n    numpy: 1.18.5; pandas: 1.1.3\n    \n    import numpy as np \n    import pandas as pd  \n    '''\n    df = dataframe[column].value_counts().reset_index() \n    if return_percentages==True:\n        df[column] = (df[column]*100)\/(df[column].sum())\n    df = pd.DataFrame(df) \n    df = df.rename({'index':rename_index, 'Q3':rename_column}, axis='columns')\n    return df\n\ndef sort_dictionary_by_percent(dataframe,list_of_columns_for_a_single_question,dictionary_of_counts_for_a_single_question): \n    ''' \n    A helper function that can be used to sort a dictionary.\n    \n    It is an adaptation of a similar function\n    from https:\/\/www.kaggle.com\/sonmou\/what-topics-from-where-to-learn-data-science.\n    \n    It has the following dependencies:\n    numpy: 1.18.5; pandas: 1.1.3\n\n    import numpy as np \n    import pandas as pd \n    '''\n    dictionary = count_then_return_percent_for_multiple_column_questions(dataframe,\n                                                                list_of_columns_for_a_single_question,\n                                                                dictionary_of_counts_for_a_single_question)\n    dictionary = {v:k    for(k,v) in dictionary.items()}\n    list_tuples = sorted(dictionary.items(), reverse=False) \n    dictionary = {v:k for (k,v) in list_tuples}   \n    return dictionary","30e811e8":"# Draws bar-chart from python Dictionary\ndef draw_bar_chart(count_dict, title, orientation='v', color='blue'):\n    \n    count_series = pd.Series(count_dict)\n    \n    fig = go.Figure()\n    \n    if (orientation =='h'):\n        angle = 0 \n        ys= count_series.index\n        xs= count_series.values\n    elif (orientation =='v'):\n        angle=-45\n        xs= count_series.index\n        ys= count_series.values\n        \n    trace = go.Bar(\n        x=xs,\n        y=ys,\n        text=count_series.values,\n        textposition='auto',\n        marker=dict(\n            color=color,\n            ),\n        orientation=orientation\n    )\n\n    fig.add_trace(trace)\n    \n    \n    # Set layout properties for title, axis_tick_angle and background color\n    fig.update_layout(\n        autosize=False,\n        width=800,\n        height=500,\n        xaxis_tickangle=angle,\n        \n        plot_bgcolor = 'White',\n        \n        title=dict(\n            text=title,\n            y=0.9,\n            x=0.5,\n            xanchor= 'center',\n            yanchor= 'top'\n        ),\n        \n        font=dict(\n            family=\"Arial\",\n            size=14,\n            color=\"#7f7f7f\"\n        ),\n     )\n\n    fig.show()\n\ndef draw_pie_chart(count_series, title, hole=0):\n    '''\n    This function creates a bar chart.\n    \n    It has the following dependencies:\n    plotly express: 0.4.1\n    \n    import plotly.express as px\n    '''\n    labels = count_series.index\n    sizes = count_series.values\n\n    trace = go.Pie(labels=labels, values=sizes, hole=hole)\n\n    layout = go.Layout(\n        title=dict(\n            text=title,\n            y=0.5,\n            x=0.5,\n            xanchor= 'center',\n            yanchor= 'top'\n        ),\n        \n        font=dict(\n            family=\"Arial\",\n            size=14,\n            color=\"#7f7f7f\"\n        ),\n    )\n\n    data = [trace]\n\n    fig = go.Figure(data=data, layout=layout)\n\n    fig.show()\n    \ndef plotly_bar_chart(response_counts,title,y_axis_title,orientation):\n    '''\n    This function creates a bar chart.\n    \n    It has the following dependencies:\n    plotly express: 0.4.1\n    \n    import plotly.express as px\n    '''\n    response_counts_series = pd.Series(response_counts)\n    fig = px.bar(response_counts_series,\n             labels={\"index\": '',\"value\": y_axis_title},\n             text=response_counts_series.values,\n             orientation=orientation,)\n    fig.update_layout(showlegend=False,\n                      title={'text': title,\n                             'y':0.95,\n                             'x':0.5,})\n    fig.show()\n\ndef plotly_choropleth_map(df, column, title, max_value):\n    '''\n    This function creates a choropleth map.\n    \n    It has the following dependencies:\n    plotly express: 0.4.1\n    \n    import plotly.express as px\n    '''\n    fig = px.choropleth(df, \n                    locations = 'country',  \n                    color = column,\n                    locationmode = 'country names', \n                    color_continuous_scale = 'viridis',\n                    title = title,\n                    range_color = [0, max_value])\n    fig.update(layout=dict(title=dict(x=0.5)))\n    fig.show()\n","f437b984":"def draw_trend(x_data, y_data, labels = ['Male', 'Female'], colors = ['slateblue', 'mediumvioletred'], mode_size=[12, 12], line_size=[4, 4],  mode='lines+markers',title='Trend'):\n    fig = go.Figure()\n    \n    for i in range(0, 2):\n        fig.add_trace(go.Scatter(x=x_data[i], y=y_data[i], mode='lines+markers',\n            name=labels[i],\n            line=dict(color=colors[i], width=line_size[i]),\n            connectgaps=True,\n        ))\n    \n    fig.update_layout(\n        xaxis=dict(\n            showline=True,\n            showgrid=False,\n            linecolor='rgb(204, 204, 204)',\n            linewidth=2,\n            ticks='outside',\n            tickfont=dict(\n                family='Arial',\n                size=12,\n                color='rgb(82, 82, 82)',\n            ),\n         ),\n        yaxis=dict(\n            showgrid=False,\n            showline=False,\n            showticklabels=False,\n        ),\n        showlegend=False,\n        plot_bgcolor='white'\n    )\n\n\n    annotations = []\n\n    # Adding labels\n    for y_trace, label, color in zip(y_data, labels, colors):\n        # labeling the left_side of the plot\n        annotations.append(dict(xref='paper', x=0.05, y=y_trace[0],\n                                  xanchor='right', yanchor='middle',\n                                  text=label + ' {}%'.format(y_trace[0]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n    \n        # labeling the right_side of the plot\n        annotations.append(dict(xref='paper', x=0.95, y=y_trace[2],\n                                  xanchor='left', yanchor='middle',\n                                  text='{}%'.format(y_trace[2]),\n                                  font=dict(family='Arial',\n                                            size=16),\n                                  showarrow=False))\n\n\n    # Title\n    annotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='Trend for last three years',\n                              font=dict(family='Arial',\n                                        size=24,\n                                        color='rgb(37,37,37)'),\n                              showarrow=False))\n    # Source\n    annotations.append(dict(xref='paper', yref='paper', x=0.5, y=-0.1,\n                              xanchor='center', yanchor='top',\n                              text='Year',\n                              font=dict(family='Arial',\n                                        size=14,\n                                        color='rgb(150,150,150)'),\n                              showarrow=False))\n\n    fig.update_layout(annotations=annotations)\n\n    fig.show()\n\n\n\n","0425c351":"from plotly.subplots import make_subplots\n\ndef draw_2_bar_chart(count_dict1,count_dict2, title, orientation='v', color1='mediumvioletred',color2='slateblue'):\n    \n    # Creating two subplots\n    fig = make_subplots(rows=1, cols=2)\n\n    # trace1\n    count_series1 = pd.Series(count_dict1)\n    \n    if (orientation =='h'):\n        angle = 0 \n        ys= count_series1.index\n        xs= count_series1.values\n    elif (orientation =='v'):\n        angle=-45\n        xs= count_series1.index\n        ys= count_series1.values\n        \n    trace1 = go.Bar(\n        x=xs,\n        y=ys,\n        text=count_series1.values,\n        textposition='auto',\n        marker=dict(\n        color='rgba(247, 121, 72, 0.6)',\n        line=dict(color='rgba(247, 121, 72, 1.0)', width=2)\n    ),\n        orientation=orientation\n    )\n\n    fig.add_trace(trace1,1,1)\n    \n    # trace2\n    count_series2 = pd.Series(count_dict2)\n    \n       \n    if (orientation =='h'):\n        angle = 0 \n        ys= count_series2.index\n        xs= count_series2.values\n    elif (orientation =='v'):\n        angle=-45\n        xs= count_series2.index\n        ys= count_series2.values\n        \n    trace2 = go.Bar(\n        x=xs,\n        y=ys,\n        text=count_series2.values,\n        textposition='auto',\n        marker=dict(\n        color='rgba(89, 72, 247, 0.6)',\n        line=dict(color='rgba(89, 72, 247, 1.0)', width=2)\n    ),\n        orientation=orientation\n    )\n\n    fig.add_trace(trace2,1,2)\n    \n    \n    \n\n    # Set layout properties for title, axis_tick_angle and background color\n    fig.update_layout(\n        autosize=False,\n        width=870,\n        height=700,\n        xaxis_tickangle=angle,\n        \n        plot_bgcolor = 'White',\n        \n        title=dict(\n            text=title,\n            y=0.9,\n            x=0.5,\n            xanchor= 'center',\n            yanchor= 'top'\n        ),\n        \n        font=dict(\n            family=\"Arial\",\n            size=14,\n            color=\"#7f7f7f\"\n        ),\n        showlegend=False,\n     )\n\n    fig.show()\n","6636b1a6":"from plotly.subplots import make_subplots\n\ndef draw_side_by_side_bar_chart(count_dict1,count_dict2, title, orientation='v', color1='mediumvioletred',color2='slateblue'):\n    \n    fig = make_subplots(rows=1, cols=1)\n    \n    # trace1\n    count_series1 = pd.Series(count_dict1)\n    \n    if (orientation =='h'):\n        angle = 0 \n        ys= count_series1.index\n        xs= count_series1.values\n    elif (orientation =='v'):\n        angle=-45\n        xs= count_series1.index\n        ys= count_series1.values\n        \n    trace1 = go.Bar(\n        x=xs,\n        y=ys,\n        text=count_series1.values,\n        textposition='auto',\n        marker=dict(\n        color='rgba(247, 121, 72, 0.6)',\n        line=dict(color='rgba(247, 121, 72, 1.0)', width=2)\n    ),\n        orientation=orientation\n    )\n\n    fig.add_trace(trace1,1,1)\n    \n    # trace2\n    count_series2 = pd.Series(count_dict2)\n    \n       \n    if (orientation =='h'):\n        angle = 0 \n        ys= count_series2.index\n        xs= count_series2.values\n    elif (orientation =='v'):\n        angle=-45\n        xs= count_series2.index\n        ys= count_series2.values\n        \n    trace2 = go.Bar(\n        x=xs,\n        y=ys,\n        text=count_series2.values,\n        textposition='auto',\n        marker=dict(\n        color='rgba(89, 72, 247, 0.6)',\n        line=dict(color='rgba(89, 72, 247, 1.0)', width=2)\n    ),\n        orientation=orientation\n    )\n\n    fig.add_trace(trace2,1,1)\n    \n    \n    \n\n    # Set layout properties for title, axis_tick_angle and background color\n    fig.update_layout(\n        autosize=False,\n        width=900,\n        height=900,\n        xaxis_tickangle=angle,\n        \n        plot_bgcolor = 'White',\n        \n        title=dict(\n            text=title,\n            y=0.9,\n            x=0.5,\n            xanchor= 'center',\n            yanchor= 'top'\n        ),\n        \n        font=dict(\n            family=\"Arial\",\n            size=14,\n            color=\"#7f7f7f\"\n        ),\n        showlegend=False,\n     )\n\n    fig.show()\n","a842a14f":"def draw_2_trend_charts(x_data_1, y_data_1, x_data_2, y_data_2, labels = ['Male', 'Female'], colors = ['slateblue', 'mediumvioletred'],\n                 mode_size=[12, 12], line_size=[4, 4],  mode='lines+markers',title='Trend', height = 500):\n    \n    # Creating two subplots\n    fig = make_subplots(rows=1, cols=2, subplot_titles=('Females', 'Males'), shared_yaxes=True,\n                    horizontal_spacing=0.03)\n    \n    for i in range(0, len(y_data_1)):\n        fig.add_trace(go.Scatter(x=x_data_1[i], y=y_data_1[i], mode='lines+markers',\n            name=labels[i],\n            line=dict(color=colors[i], width=line_size[i]),\n            connectgaps=True,\n        ),1,1)\n        \n       \n        \n    for i in range(0, len(y_data_2)):\n        fig.add_trace(go.Scatter(x=x_data_2[i], y=y_data_2[i], mode='lines+markers',\n            name=labels[i],\n            line=dict(color=colors[i], width=line_size[i]),\n            connectgaps=True,\n        ),1,2)\n        \n    \n    # Update xaxis properties\n    fig.update_xaxes(title_text=\"Year\", row=1, col=1, showgrid=False, showline=True, linecolor='rgb(204, 204, 204)', linewidth=2,\n                    ticks='outside', tickfont=dict(family='Arial',size=12, color='rgb(82, 82, 82)',),)\n    fig.update_xaxes(title_text=\"Year\", row=1, col=2, showgrid=False, showline=True, linecolor='rgb(204, 204, 204)', linewidth=2,\n                    ticks='outside', tickfont=dict(family='Arial',size=12, color='rgb(82, 82, 82)',))\n    \n    # Update yaxis properties\n    fig.update_yaxes(title_text=\"% of respondents\", row=1, col=1, showgrid=False, showline=False,)\n    fig.update_yaxes(title_text=\"% of respondents\", row=1, col=2, showgrid=False, showline=False,)\n\n    fig.update_layout(\n        #showlegend=False,\n        plot_bgcolor='white',\n        title_text = title,\n        height=height\n    )\n    \n    fig.show()","a74dfb66":"# Load 2018 data\n\n\nbase_dir = '\/kaggle\/input\/kaggle-survey-2018\/'\nfile_name = 'multipleChoiceResponses.csv'\nsurvey_2018_df = load_csv(base_dir,file_name)\nresponses_2018_df = survey_2018_df[1:]\n\n# Preview 2018 data\n\nprint('Total Number of Responses: ',responses_2018_df.shape[0])\nprint('\\nPreview of the data:')\nresponses_2018_df.head(2)\n","9ac2a858":"# Load 2019 data\n\n\nbase_dir = '\/kaggle\/input\/kaggle-survey-2019\/'\nfile_name = 'multiple_choice_responses.csv'\nsurvey_2019_df = load_csv(base_dir,file_name)\nresponses_2019_df = survey_2019_df[1:]\n\n# Preview 2019 data\n\nprint('Total Number of Responses: ',responses_2019_df.shape[0])\nprint('\\nPreview of the data:')\nresponses_2019_df.head(2)","bc7286e9":"# Load 2020 data\n\nbase_dir = '\/kaggle\/input\/kaggle-survey-2020'\nfile_name = 'kaggle_survey_2020_responses.csv'\nsurvey_2020_df = load_csv(base_dir,file_name)\nresponses_2020_df = survey_2020_df[1:]\n\n\n# Preview 2020 data\n\nprint('Total Number of Responses: ',responses_2020_df.shape[0])\nprint('\\nPreview of the data:')\nresponses_2020_df.head(2)\n\n","9fb073bc":"question_name = 'Q1'#Gender\nsorted_percentages_2018 = count_then_return_percent(responses_2018_df,question_name)\nsorted_percentages_2018","b8a856e7":"question_name = 'Q2'#Gender\nsorted_percentages_2019 = count_then_return_percent(responses_2019_df,question_name)\nsorted_percentages_2019","b81d37bf":"question_name = 'Q2'#Gender\nsorted_percentages_2020 = count_then_return_percent(responses_2020_df,question_name)\n\ntype(sorted_percentages_2020)\nsorted_percentages_2020","0cf13476":"\ny_data = np.array([\n    [ sorted_percentages_2018['Male'], sorted_percentages_2019['Male'], sorted_percentages_2020['Man']],\n    [ sorted_percentages_2018['Female'], sorted_percentages_2019['Female'], sorted_percentages_2020['Woman']],\n    \n])\n\nx_data = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data))\n\ntitle = 'Trend of Number of Females and Males'\n\nlabels = ['Male', 'Female']\n\ncolors = ['rgba(89, 72, 247, 1.0)', 'rgba(247, 121, 72, 1.0)']\n\ndraw_trend(x_data, y_data, labels, colors , title = 'Trend of Number of Females and Males')\n","dd92876c":"female_2018 = responses_2018_df[responses_2018_df['Q1']=='Female']\nmale_2018 = responses_2018_df[responses_2018_df['Q1']=='Male']\n\n\nquestion_name = 'Q6'#Job Titles\n\nsorted_percentages_female_2018 = count_then_return_percent(female_2018,question_name).iloc[::-1]\nsorted_percentages_male_2018 = count_then_return_percent(male_2018,question_name).iloc[::-1]\n\n\ntitle_for_chart = 'Most Common Job Titles for Females and Males in 2018'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n\ndraw_2_bar_chart(sorted_percentages_female_2018, sorted_percentages_male_2018,\n                 title=title_for_chart,\n                 #y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart,\n                 color1 = colors[1],color2=colors[0]) \n\ndraw_side_by_side_bar_chart(sorted_percentages_female_2018, sorted_percentages_male_2018,\n                 title=title_for_chart,\n                 #y_axis_title=title_for_y_axis,\n                 orientation='h',\n                 color1 = 'mediumvioletred',color2='slateblue',\n                ) \n\n\n","c49d8beb":"female_2019 = responses_2019_df[responses_2019_df['Q2']=='Female']\nmale_2019 = responses_2019_df[responses_2019_df['Q2']=='Male']\n\n\nquestion_name = 'Q5'#Job Titles\n\nsorted_percentages_female_2019 = count_then_return_percent(female_2019,question_name).iloc[::-1]\nsorted_percentages_male_2019 = count_then_return_percent(male_2019,question_name).iloc[::-1]\n\n\ntitle_for_chart = 'Most Common Job Titles for Females and Males in 2019'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n\ndraw_2_bar_chart(sorted_percentages_female_2019, sorted_percentages_male_2019,\n                 title=title_for_chart,\n                 #y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart,\n                 color1 = colors[1],color2=colors[0]) \n\ndraw_side_by_side_bar_chart(sorted_percentages_female_2019, sorted_percentages_male_2019,\n                 title=title_for_chart,\n                 #y_axis_title=title_for_y_axis,\n                 orientation='h',\n                 color1 = 'mediumvioletred',color2='slateblue',\n                ) \n","9fd28ce7":"# Split datasets genderwise\n\nmale_2020 = responses_2020_df[responses_2020_df['Q2']=='Man']\nfemale_2020 = responses_2020_df[responses_2020_df['Q2']=='Woman']\n\nquestion_name = 'Q5'#Job Titles\n\nsorted_percentages_female_2020 = count_then_return_percent(female_2020,question_name).iloc[::-1]\nsorted_percentages_male_2020 = count_then_return_percent(male_2020,question_name).iloc[::-1]\n\n\ntitle_for_chart = 'Most Common Job Titles for Females and Males in 2020'\ntitle_for_y_axis = '% of respondents'\norientation_for_chart = 'h'\n\ndraw_2_bar_chart(sorted_percentages_female_2020, sorted_percentages_male_2020,\n                 title=title_for_chart,\n                 #y_axis_title=title_for_y_axis,\n                 orientation=orientation_for_chart,\n                 color1 = colors[1],color2=colors[0]) \n\n\ndraw_side_by_side_bar_chart(sorted_percentages_female_2020, sorted_percentages_male_2020,\n                 title=title_for_chart,\n                 #y_axis_title=title_for_y_axis,\n                 orientation='h',\n                 color1 = 'mediumvioletred',color2='slateblue',\n                ) \n","ccdf1461":"y_data_1 = np.array([\n    [sorted_percentages_female_2018['Student'], sorted_percentages_female_2019['Student'], sorted_percentages_female_2020['Student']],\n    [sorted_percentages_female_2018['Not employed'], sorted_percentages_female_2019['Not employed'], sorted_percentages_female_2020['Currently not employed']],\n    \n])\n\nx_data_1 = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data_1))\n\n\ny_data_2 = np.array([\n    [sorted_percentages_male_2018['Student'], sorted_percentages_male_2019['Student'], sorted_percentages_male_2020['Student']],\n    [sorted_percentages_male_2018['Not employed'], sorted_percentages_male_2019['Not employed'], sorted_percentages_male_2020['Currently not employed']],\n    \n])\n\nx_data_2 = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data_1))\n\ntitle = 'Trend of Students and Not Employed Respondents'\n\ncolors = ['rgba(89, 72, 247, 1.0)', 'rgba(247, 121, 72, 1.0)']\n\nlabels = ['Student', 'Not employed']\n\ndraw_2_trend_charts(x_data_1, y_data_1, x_data_2, y_data_2, labels, colors, title=title)","a2130083":"\n\ny_data_1 = np.array([\n    [sorted_percentages_female_2018['Data Scientist'], sorted_percentages_female_2019['Data Scientist'], sorted_percentages_female_2020['Data Scientist']],\n    [sorted_percentages_female_2018['Software Engineer'], sorted_percentages_female_2019['Software Engineer'], sorted_percentages_female_2020['Software Engineer']],\n    [sorted_percentages_female_2018['Data Analyst'], sorted_percentages_female_2019['Data Analyst'], sorted_percentages_female_2020['Data Analyst']],\n    [sorted_percentages_female_2018['Business Analyst'], sorted_percentages_female_2019['Business Analyst'], sorted_percentages_female_2020['Business Analyst']],\n    [sorted_percentages_female_2018['Research Scientist'], sorted_percentages_female_2019['Research Scientist'], sorted_percentages_female_2020['Research Scientist']],\n    ])\n\n\nx_data_1 = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data_1))\n\ny_data_2 = np.array([\n    [sorted_percentages_male_2018['Data Scientist'], sorted_percentages_male_2019['Data Scientist'], sorted_percentages_male_2020['Data Scientist']],\n    [sorted_percentages_male_2018['Software Engineer'], sorted_percentages_male_2019['Software Engineer'], sorted_percentages_male_2020['Software Engineer']],\n    [sorted_percentages_male_2018['Data Analyst'], sorted_percentages_male_2019['Data Analyst'], sorted_percentages_male_2020['Data Analyst']],\n    [sorted_percentages_male_2018['Business Analyst'], sorted_percentages_male_2019['Business Analyst'], sorted_percentages_male_2020['Business Analyst']],\n    [sorted_percentages_male_2018['Research Scientist'], sorted_percentages_male_2019['Research Scientist'], sorted_percentages_male_2020['Research Scientist']],\n    ])\n\n\nx_data_2 = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data_2))\n\n\ntitle = 'Trend of More Common Job Titles'\n\ncolors = [ 'green','steelblue','deeppink','mediumvioletred', 'maroon']\n\nlabels = ['Data Scientist', 'Software Engineer','Data Analyst','Business Analyst','Research Scientist']\n\nmode_size=[12] * len(y_data_2)\n\nline_size=[3] * len(y_data_2)\n\ndraw_2_trend_charts(x_data_1, y_data_1, x_data_2, y_data_2, labels, colors, mode_size, line_size, title=title)","18fb5e6b":"y_data_1 = np.array([\n    [sorted_percentages_female_2018['Data Engineer'], sorted_percentages_female_2019['Data Engineer'], sorted_percentages_female_2020['Data Engineer']],\n    [sorted_percentages_female_2018['DBA\/Database Engineer'], sorted_percentages_female_2019['DBA\/Database Engineer'], sorted_percentages_female_2020['DBA\/Database Engineer']],\n    [sorted_percentages_female_2018['Statistician'], sorted_percentages_female_2019['Statistician'], sorted_percentages_female_2020['Statistician']],\n    [sorted_percentages_female_2018['Product\/Project Manager'], sorted_percentages_female_2019['Product\/Project Manager'], sorted_percentages_female_2020['Product\/Project Manager']],\n])\n\n\nx_data_1 = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data_1))\n\ny_data_2 = np.array([\n    [sorted_percentages_male_2018['Data Engineer'], sorted_percentages_male_2019['Data Engineer'], sorted_percentages_male_2020['Data Engineer']],\n    [sorted_percentages_male_2018['DBA\/Database Engineer'], sorted_percentages_male_2019['DBA\/Database Engineer'], sorted_percentages_male_2020['DBA\/Database Engineer']],\n    [sorted_percentages_male_2018['Statistician'], sorted_percentages_male_2019['Statistician'], sorted_percentages_male_2020['Statistician']],\n    [sorted_percentages_male_2018['Product\/Project Manager'], sorted_percentages_male_2019['Product\/Project Manager'], sorted_percentages_male_2020['Product\/Project Manager']],\n])\n\n\nx_data_2 = np.vstack((np.array(['2018', '2019', '2020'], dtype='datetime64'),) * len(y_data_2))\n\n\ntitle = 'Trend of Less Common Job Titles'\n\ncolors = [ 'mediumblue', 'tomato',  'orange' ,'peru']\n\nlabels = ['Data Engineer', 'DBA\/Database Engineer','Statistician','Product\/Project Manager']\n\nmode_size=[12] * len(y_data_2)\n\nline_size=[3] * len(y_data_2)\n\ndraw_2_trend_charts(x_data_1, y_data_1, x_data_2, y_data_2, labels, colors, mode_size, line_size, title=title)","1d3e06e6":"# Imports","4dfdc276":"# 2018 Kaggle Survey Data","b146ff53":"# Conclusion\n\n##### More Common Job Profiles\n\n1)For both Female and Male respondents,\n    **Data Scientist** is at FIRST place\n    \n    **Data Analysts and Software Engineers** at SECOND and THIRD place (interchanged for Females and Males),\n    \n    **Research Scientist and Business Analyst** is at FOURTH and FIFTH place for both Females and Males.\n\n2) Among **Female Respondents**, number of **Data Analysts** is greater than Software Engineers. \n\n3) On contrary, among **Male Respondents**, number of **Software Engineers** is greater than number of Data Analysts.\n\n\n##### Less Common Job Profiles\n\n1)For both Female and Male respondents,\n\n    **Product\/Project Manager** is at the TOP ;\n\n    **DBA\/Database Engineer** is at BOTTOM. \n    \n    **Statisticians and Data Engineers** is IN BETWEEN the above two.\n    \n\n2)\nAmong **Female Respondents**, there is **Higher percentage of Statisticians** than Data Engineers.\n\n3)\nWhile, Among **Male Respondents**, there is **Higher percentage of Data Engineers** than Statisticians.","fdabf693":"# Helper Functions","e81180ea":"# Get Sorted Data for Females and Males","71483fc3":"# 2019 Kaggle Survey Data","5ddc015a":"### Observations\n\nThere is clearly very** high percentage**( around 80%) of **Male Respondents** and a small amount ( around 20%) of Female respondents.\n\nThe trend is as follows.\n\nIn year 2019, as compared to previous year 2018, there was **increase** in % of **Male Kagglers** and decrease in % of Female Kagglers.\n\nBut, In year 2020, as compared to previous year 2019, there was **increase** in % of **Female Kagglers** and decrease in % of Female Kagglers.","c0d9928d":"### Observations\n\n#### *More common Job Profiles*\n\nTrend remains same year by year.\n\n###### Females\n\nOrder of Job Profiles among Females is \nData Scientist,*Data Analysts,Software Engineers*,Research Scientist, Business Analyst\n\n###### Males\nWhile Order of Job Profiles among Males is \nData Scientist,*Software Engineers,Data Analysts*,Research Scientist, Business Analyst\n\n\n\nSecond line(Pink) and Third line(Blue) of left chart(Female) is interchanged in right chart (Male). \n\nAmong Female Respondents, number of Data Analysts is greater than Software Engineers. \nOn contrary, among Male Respondents, number of Software Engineers is greater than number of Data Analysts.\n\nOther than that order of Job Profiles remains same among Females and Males for 2018, 2019 and 2020 years.\n\n\n\n\n","6a8fca30":"### Observations\n#### Less common Job Profiles \nTrend varies year by year.\n\n###### Females\n\n###### For year 2018\n\nOrder from Most common to Least common Job Profile is Data Engineer, Statistician, Product\/Project Manager, DBA\/Database Engineer\n\n###### For year 2019\nThere are more of Product Manager Respondents and less of Data Engineer respondents.\n\nBrown Line(Product Manager) went up crossing Blue line(Data Engineer) and Yellow line (Statistician)  as seen in left (Female) chart.\n\nSo, Order from Most common to Least common Job Profile is Product\/Project Manager,Statistician, Data Engineer, DBA\/Database Engineer\n\n###### For year 2020\n\nBlue line(Data Engineer) came even more down ,\nSo, Order from Most common to Least common Job Profile is Product\/Project Manager, Data Engineer, Statistician,  DBA\/Database Engineer\n\n\n###### Males \n\n###### For year 2018\n\nOrder from Most common to Least common Job Profile is Data Engineer, Product\/Project Manager, Statistician, DBA\/Database Engineer\n\n###### For years 2019 and 2020, \nThere are more of Product Manager Respondents and less of Data Engineer respondents.\n\nBrown Line went up and Blue line came down as seen in right (Male) chart.\n\nSo, Order from Most common to Least common Job Profile is  Product\/Project Manager, Data Engineer, Statistician, DBA\/Database Engineer\n\n\n\n\n\n\n","cc117d85":"Thanks for Reading.\n\nIf you liked it, kindly upvote.","b6dbb4fe":"# 2020 Kaggle Survey Data","7a7bd2fe":"# Introduction\n\n\nIn this notebook we are analysing Machine Learning and Data Science Survey data to understand how Job Profile varies for women and men for years 2018, 2019, 2020.\n\nI was surprised to learn that **there are higher number of Female statisticians than Males who have participated in Survey ** which is in contrast to the myth that there are lesser girls in STEM fields.\n\nHope you enjoy the analysis and article.\n\nPlease do upvote if you like it.\n"}}