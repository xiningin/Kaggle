{"cell_type":{"49df93ff":"code","c9dc1f51":"code","d7ae32ca":"code","71a7a389":"code","116825d4":"code","49294b07":"code","bccde6c9":"code","59da896f":"code","3ffd358c":"code","80906299":"code","1db212b5":"code","49861fa9":"code","3d652181":"code","5c839364":"code","1cb9a9c5":"code","f3112d57":"code","d8d1e0d8":"code","c3ff74ff":"code","cc6fe93e":"code","5ca83c31":"code","d2e35f1b":"code","af9db86f":"code","bc4c8b91":"code","4a352b90":"code","6d42234c":"code","a412a1d6":"code","70a1ff5c":"code","5bf8a719":"code","38144bf1":"code","c67b2f49":"code","ebd6a9aa":"code","864683e2":"markdown","2b5118f9":"markdown","61fc3787":"markdown","c72064e1":"markdown","36ddb465":"markdown","b044218f":"markdown","9a911120":"markdown","49b35191":"markdown","236f4c9d":"markdown","d2c35ace":"markdown","a34316f2":"markdown","18b5eeef":"markdown","1447a258":"markdown","21d21db0":"markdown","8a09db47":"markdown","2831037f":"markdown","3fa8b1a9":"markdown","24d5fe46":"markdown","f48463bf":"markdown","2c9b93ee":"markdown","fa0bab5a":"markdown","663e99d8":"markdown","48b94e07":"markdown"},"source":{"49df93ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport plotly.graph_objects as go\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9dc1f51":"xl = pd.read_excel('\/kaggle\/input\/ipl-data-set\/Players.xlsx')\nprint(xl)\nteams = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/teams.csv\")\ndeliveries = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/deliveries.csv\")\nmatches = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/matches.csv\",parse_dates=['date'])\nteamwise_home_and_away = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/teamwise_home_and_away.csv\")\nmost_runs_average_strikerate = pd.read_csv(\"\/kaggle\/input\/ipl-data-set\/most_runs_average_strikerate.csv\")","d7ae32ca":"print(teams.info())\nprint(\"No. of teams: \",teams['team1'].nunique())\nteams['team1'].unique()","71a7a389":"print(deliveries.info())\ndeliveries.tail()","116825d4":"print(matches.info())\nmatches.head()","49294b07":"matches.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)\n\ndeliveries.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)\n","bccde6c9":"print(\"No. of Umpires 1: \",matches['umpire1'].nunique())\nprint(\"No. of Umpires 2: \",matches['umpire2'].nunique())\nprint(\"No. of Umpires 3: \",matches['umpire3'].nunique())\n\nump_set1 = set(matches['umpire1'].unique())               \nump_set2 = set(matches['umpire2'].unique())\nump_set3 = set(matches['umpire3'].unique())\nall_set = ump_set1.intersection(ump_set2)\nall_set = all_set.intersection(ump_set3)\nprint(\"Umpires who umpired as 1st,2nd and 3rd umpires: \",all_set, len(all_set))","59da896f":"plt.subplots(figsize=(14,6))\nax=matches['umpire1'].value_counts().plot.bar(width=0.9,color=sns.color_palette('bright',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.xlabel(\"Umpires\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.title(\"Umpires-1 who have umpired most (from highest to lowest)\", fontsize=20)\nplt.show()","3ffd358c":"plt.subplots(figsize=(14,6))\nax=matches['umpire2'].value_counts().plot.bar(width=0.9,color=sns.color_palette('pastel',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.xlabel(\"Umpires\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.title(\"Umpires-2 who have umpired most (from highest to lowest)\", fontsize=20)\nplt.show()","80906299":"plt.subplots(figsize=(14,6))\nax=matches['umpire3'].value_counts().plot.bar(width=0.9,color=sns.color_palette('Blues'))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.xlabel(\"Umpires\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.title(\"Umpires-3 who have umpired most (from highest to lowest)\", fontsize=20)\nplt.show()","1db212b5":"plt.subplots(figsize=(10,6))\nax=matches['toss_winner'].value_counts().plot.bar(width=0.9,color=sns.color_palette('RdYlGn',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))\nplt.title(\"Teams that won the toss (from highest to lowest)\", fontsize=20)\nplt.xlabel(\"Teams\", fontsize=15)\nplt.ylabel(\"Count\", fontsize=15)\nplt.show()","49861fa9":"plt.subplots(figsize=(10,6))\nsns.countplot(x='Season',hue='toss_decision',data=matches ,palette=sns.color_palette('bright'))\nplt.title(\"Decision to field or bat across seasons\")\nplt.show()","3d652181":"plt.subplots(figsize=(10,6))\nsns.countplot(x='Season',data=matches,palette=sns.color_palette('colorblind'))  #countplot automatically counts the frequency of an item\nplt.title(\"Number of matches played across Seasons\")\nplt.show()","5c839364":"pm = matches.groupby(['player_of_match'])['id'].count().reset_index('player_of_match').rename(columns={'player_of_match':'player','id':'count'})#.sort_values(ascending=False)\npm = pm.sort_values(by=\"count\",ascending=False)\ntop_pm=pm[:10]\n\nfig = go.Figure(data=[go.Scatter(\n    x=top_pm['player'], y=top_pm['count'],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',\n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)','rgb(92, 65, 54)','rgb(150, 65, 54)','rgb(30, 165, 54)',\n              'rgb(100, 180, 120)', 'rgb(200, 90, 89)', 'rgb(225, 78, 124)'],\n        opacity=[1, 0.9, 0.8,0.7, 0.6,0.5,0.45,0.4,0.35,0.3],\n        size=[100, 90, 80, 70,60,50,40,30,20,10],\n    )\n)])\nfig.update_layout(\n    title=\"Players who recieved 'Player of Match' Award most\",\n    xaxis=dict(\n        title='Players',        \n    ),\n    yaxis=dict(\n        title='Number',       \n    ))\nfig.show()","1cb9a9c5":"print(\"Total number of Cities played: \",matches['city'].nunique())\nprint(\"Total number of Venues played: \",matches['venue'].nunique())","f3112d57":"plt.subplots(figsize=(10,15))\nax = matches['venue'].value_counts().sort_values(ascending=True).plot.barh(width=.9,color=sns.color_palette('inferno',40))\nax.set_xlabel('Grounds')\nax.set_ylabel('count')\nplt.title(\"Venues played (from most to least)\")\nplt.show()","d8d1e0d8":"cities = matches.groupby(['Season','city'])['id'].agg('count').reset_index()\ncities.rename(columns={'id':'count'}, inplace=True)\n\nfig = px.bar(cities, x=\"city\", y=\"count\", color='Season')\nfig.show()\n\nprint(matches.columns)\n","c3ff74ff":"not_same = matches[matches['toss_winner'] != matches['winner']]\nsame = matches[matches['toss_winner'] == matches['winner']]\nprint(\"Percentage of matches where toss winner is not same as winner: \",round(not_same.shape[0]\/matches.shape[0],2) *100)\nprint(\"Percentage of matches where toss winner is same as winner: \", round(same.shape[0]\/matches.shape[0],2) * 100)\ntoss_winner = pd.DataFrame({'result':['Yes','No'],'per':[same.shape[0], not_same.shape[0]] })\nprint(\" = \" * 40)\nfield = matches[matches['toss_decision'] == 'field']\nbat = matches[matches['toss_decision'] == 'bat']\nprint(\"Percentage of matches where toss decision is 'field': \",round(field.shape[0]\/matches.shape[0],2) *100)\nprint(\"Percentage of matches where toss decision is 'bat': \",round(bat.shape[0]\/matches.shape[0],2) *100)\nprint(\" = \" * 40)\nnormal = matches[matches['result'] == 'normal']\ntie = matches[matches['result'] == 'tie']\nno_result = matches[matches['result'] == 'no result']\nprint(\"Percentage of matches where result is 'normal': \",round(normal.shape[0]\/matches.shape[0],2) *100)\nprint(\"Percentage of matches where result is 'tie': \",round(tie.shape[0]\/matches.shape[0],2) *100)\nprint(\"Percentage of matches where result is 'no result': \",round(no_result.shape[0]\/matches.shape[0],2) *100)\nresult = pd.DataFrame({'Result':['Normal','Tie','No Result'],'per':[normal.shape[0], tie.shape[0], no_result.shape[0]] })\nprint(\" = \" * 40)\ndl_applied_no = matches[matches['dl_applied'] == 0]\ndl_applied_yes = matches[matches['dl_applied'] == 1]\ndl = pd.DataFrame({'dl_applied':['yes','no'],'per':[dl_applied_yes.shape[0], dl_applied_no.shape[0]] })\nprint(\"Percentage of matches where DL is applied : \",round(dl_applied_yes.shape[0]\/matches.shape[0],2) *100)\nprint(\"Percentage of matches where DL is not applied : \",round(dl_applied_no.shape[0]\/matches.shape[0],2) *100)\n\n# Pie Chart for Whether toss winner is same as match winner\nfig = px.pie(toss_winner, values='per', names='result', color='result', title='Is Match winner same as toss winner?'\n             ,color_discrete_map={'Yes':'lightcyan',\n                                 'No':'royalblue' })\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n\n# Pie Chart for how many matches DL is applied\nfig = px.pie(dl, values='per', names='dl_applied', title='Percentage of matches where DL is applied', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()\n\nlabels = result['Result']\nvalues = result['per']\n\n# Pie Chart for results of the matches played\nfig = go.Figure(data=[go.Pie(labels=labels,title='Result of matches', values=values, pull=[0, 0.2, 0])])\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","cc6fe93e":"matches['date'].min(), matches['date'].max()","5ca83c31":"teamwise_home_and_away.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Rising Pune Supergiant']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','SRH','RPS','KTK','PW','RPS'],inplace=True)\nprint(teamwise_home_and_away.info())\nteamwise_home_and_away.head()","d2e35f1b":"fig = go.Figure(data=[\n    go.Bar(name='Home Win', x=teamwise_home_and_away['team'], y=teamwise_home_and_away['home_win_percentage']),\n    go.Bar(name='Away Win', x=teamwise_home_and_away['team'], y=teamwise_home_and_away['away_win_percentage'])\n])\n\nfig.update_layout(barmode='group',title=\"Team wise - Home\/Away wins\")\nfig.show()","af9db86f":"most_runs_average_strikerate.info()\nmost_runs_average_strikerate.head(10)","bc4c8b91":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ntop15 = most_runs_average_strikerate[:15]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n   y=top15['batsman'],\n    x=top15['out'],\n    name='No. of Matches',\n    orientation='h',\n    marker=dict(\n        color='rgba(80, 100, 67, 0.6)',\n        line=dict(color='rgba(8, 1, 212, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n   y=top15['batsman'],\n    x=top15['strikerate'],\n    name='Strike Rate',\n    orientation='h',\n    marker=dict(\n        color='rgba(8, 1, 212, 0.6)',\n        line=dict(color='rgba(8, 1, 212, 1.0)', width=3)\n    )\n))\nfig.add_trace(go.Bar(\n   y=top15['batsman'],\n    x=top15['average'],\n    name='Average Runs',\n    orientation='h',\n    marker=dict(\n        color='rgba(158, 5, 19, 0.6)',\n        line=dict(color='rgba(158, 5, 19, 1.0)', width=3)\n    )\n))\n\nfig.update_layout(barmode='stack',title=\"Players - No. of matches, Strike Rate, Average Runs\")\nfig.show()","4a352b90":"plt.subplots(figsize=(8,6))\nb = deliveries.groupby(['batsman'])['batsman_runs'].sum()#.sort_values('batsman_runs')\nb = b.sort_values(ascending=False)\nb[100:200]\n\nax=b.sort_values(ascending=False)[:10].plot.bar(width=0.8,color=sns.color_palette('husl',20))\nfor p in ax.patches:\n    ax.annotate(format(p.get_height()), (p.get_x()+0.1, p.get_height()+50),fontsize=15)\nplt.show()","6d42234c":"top_batsman = deliveries.groupby(['batsman','batsman_runs'])['total_runs'].count().reset_index()\ntop_batsman = top_batsman.pivot('batsman','batsman_runs','total_runs')\n\nfig,ax=plt.subplots(3,2,figsize=(18,12))\ntop_batsman[1].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[0,0],color='#45ff45',width=0.8)\nax[0,0].set_title(\"Most 1's\")\nax[0,0].set_ylabel('')\ntop_batsman[2].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[0,1],color='#df6dfd',width=0.8)\nax[0,1].set_title(\"Most 2's\")\nax[0,1].set_ylabel('')\ntop_batsman[4].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[1,0],color='#fbca5f',width=0.8)\nax[1,0].set_title(\"Most 4's\")\nax[1,0].set_ylabel('')\ntop_batsman[6].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[1,1],color='#ffff00',width=0.8)\nax[1,1].set_title(\"Most 6's\")\nax[1,1].set_ylabel('')\ntop_batsman[0].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[2,0],color='#abcd00',width=0.8)\nax[2,0].set_title(\"Most 0's\")\nax[2,0].set_ylabel('')\ntop_batsman[7].sort_values(ascending=False)[:5].plot(kind='barh',ax=ax[2,1],color='#f0debb',width=0.8)\nax[2,1].set_title(\"Most 7's\")\nax[2,1].set_ylabel('')\nplt.show()","a412a1d6":"top_scorers = deliveries.groupby([\"match_id\", \"batsman\",\"batting_team\"])[\"batsman_runs\"].sum().reset_index()\ntop_scorers.sort_values('batsman_runs', ascending=0).head(10)\ntop_scorers.nlargest(10,'batsman_runs')","70a1ff5c":"batsmen = matches[['id','Season']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\n#merging the matches and delivery dataframe by referencing the id and match_id columns respectively\nseason=batsmen.groupby(['Season'])['total_runs'].sum().reset_index()\nseason.set_index('Season').plot(marker='*')\nplt.gcf().set_size_inches(10,8)\nplt.title('Total Runs Across the Seasons')\nplt.show()","5bf8a719":"men = batsmen.groupby(['Season','batsman'])['batsman_runs'].sum().reset_index()\nmen = men.groupby(['Season','batsman'])['batsman_runs'].sum().unstack().T\nmen['Total'] = men.sum(axis=1)\nmen = men.sort_values(by='Total',ascending=False)[:5]\nmen.drop('Total',axis=1,inplace=True)\nmen.T.plot(color=['red','skyblue','#772272','brown','limegreen'],marker='*')\nfig=plt.gcf()\nfig.set_size_inches(16,8)\nplt.show()","38144bf1":"Season_boundaries=batsmen.groupby(\"Season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\na=batsmen.groupby(\"Season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(a,left_on='Season',right_on='Season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})\nSeason_boundaries.set_index('Season')[['6\"s','4\"s']].plot(marker='o')\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","c67b2f49":"matches_played_byteams=pd.concat([matches['team1'],matches['team2']])\nmatches_played_byteams=matches_played_byteams.value_counts().reset_index()\nmatches_played_byteams.columns=['Team','Total Matches']\n\nmatches_played_byteams['wins']=matches['winner'].value_counts().reset_index()['winner']\n\nmatches_played_byteams.set_index('Team',inplace=True)\n\nruns_per_over = deliveries.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over[(matches_played_byteams[matches_played_byteams['Total Matches']>50].index)].plot(color=[\"b\", \"r\", \"#Ffb6b2\", \"g\",'brown','y','#6666ff','black','#FFA500']) #plotting graphs for teams that have played more than 100 matches\nx=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nplt.xticks(x)\nplt.ylabel('total runs scored')\nfig=plt.gcf()\nfig.set_size_inches(16,10)\nplt.show()","ebd6a9aa":"high_scores=deliveries.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index() \n#reset_index() converts the obtained series into a dataframe\nhigh_scores=high_scores[high_scores['total_runs']>=200]\n#nlargest is used to sort the given column\nhigh_scores.nlargest(10,'total_runs')","864683e2":"<a id=\"1\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Cleaning<\/b><\/font><br>","2b5118f9":"<font size=\"+1\" color=\"blue\"><b>Most 1s, 2s, 4s<\/b><\/font><br>","61fc3787":"<a id=\"12\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>200+ scores<\/b><\/font><br>","c72064e1":"<a id=\"intro\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Introduction and Imports<\/b><\/font><br>","36ddb465":"<a id=\"10\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Batsmen Highest Runs, 1s, 2s, 4s <\/b><\/font><br>","b044218f":"\n<font size=\"+1\" color=\"blue\"><b>Total Runs made by teams<\/b><\/font><br>","9a911120":"<a id=\"3\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Winning Teams<\/b><\/font><br>","49b35191":"<a id=\"8\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Team wins<\/b><\/font><br>","236f4c9d":"<a id=\"5\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Matches info<\/b><\/font><br>","d2c35ace":"<font size=\"+4\" color=purple><u><center>IPL Analysis (2008 - 2018)<\/center><\/u><\/font>","a34316f2":"<font size=\"+1\" color=\"blue\"><b>Total runs across the seasons<\/b><\/font><br>","18b5eeef":"<a id=\"4\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Toss Decision<\/b><\/font><br>","1447a258":"This dataset is Indian Premier League from 2008 to 2018.","21d21db0":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of content<\/h3>\n\n* [Introduction](#intro)\n* [Data](#data)\n* [1. Cleaning ](#1)\n* [2. Umpires ](#2)\n* [3. Toss Decisions](#3)\n* [4. Winning Teams](#4)\n* [5. Matches Info](#5)\n* [6. Venues and Cities](#6)\n* [7. Match Results](#7)\n* [8. Team Wins](#8)\n* [9. Batsmen Statistics](#9)\n* [10. Batsmen - Highest run scorers, 1s, 2s, 4s](#10)\n* [11. Runs Statistics](#11)\n* [12. 200+ Runs](#12)","8a09db47":"<a id=\"6\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Venues and Cities<\/b><\/font><br>","2831037f":"<a id=\"data\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Data<\/b><\/font><br>","3fa8b1a9":"<a id=\"7\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Match Results<\/b><\/font><br>","24d5fe46":"<a id=\"11\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Runs <\/b><\/font><br>","f48463bf":"<font size=\"+1\" color=\"blue\"><b>Graphs of 4s and 6s across Seasons<\/b><\/font><br>","2c9b93ee":"<a id=\"9\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Batsmen Statistics<\/b><\/font><br>","fa0bab5a":"<font size=\"+1\" color=\"blue\"><b>Graph of top 5 run scorer batsmen <\/b><\/font><br>","663e99d8":"<font size=\"+1\" color=\"blue\"><b>Top Scorers<\/b><\/font><br>","48b94e07":"<a id=\"2\"><\/a>\n<font size=\"+2\" color=\"blue\"><b>Umpires<\/b><\/font><br>"}}