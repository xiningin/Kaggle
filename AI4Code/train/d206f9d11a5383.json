{"cell_type":{"8bfa2a46":"code","83093900":"code","4135271c":"code","8c24a1b2":"code","d82d1ee1":"code","8c452eb6":"code","ca88e19a":"code","7b72ee96":"code","a71ff988":"code","023a1fb3":"code","5e7581e7":"code","8a0aff14":"code","59215098":"code","330e4579":"code","a12041f8":"code","23a2ccad":"code","4249db2c":"code","5f005598":"code","69c95282":"code","2014e5b4":"code","1a45246d":"code","0f16169c":"code","e7571dc4":"code","e30856f8":"code","14e3125f":"code","23c5a64f":"code","7338635a":"code","e9230261":"code","da49ed0d":"code","2102a5e4":"code","13506827":"code","1610810a":"code","b627cda2":"code","82a67f62":"code","9de87aca":"code","8cac7f88":"code","06aba5ad":"code","58a20b8e":"code","e649b98c":"code","b06a4709":"code","dcb8bad7":"code","171d2a37":"code","3c60104b":"code","4cb0ada6":"code","2653f382":"code","8535c211":"code","ceb4b23a":"code","ac2b51b6":"code","2e1cedb5":"code","f52deb99":"code","cbe07d9b":"code","11b2e60d":"code","861f8908":"code","eed68a97":"code","958895a1":"code","67700bff":"code","780247d7":"code","79d86f5c":"code","53408d58":"code","d3c67ed7":"code","c7f6149f":"code","e7d47eee":"code","d81c1bc2":"code","ba145f37":"code","daedeb71":"code","5deba7f9":"code","c6adea2c":"code","904e0160":"code","a10fd9cd":"code","8e3d1c58":"code","9aa3a61f":"code","3bd36c2c":"code","fddd1420":"code","56d11715":"code","c4749b5c":"code","8f3f6897":"code","b05062e5":"code","40ec486a":"code","dad618ed":"code","662cb51d":"code","d9a2766f":"code","71867941":"code","114e5a6c":"code","eb01ebc7":"code","ec9470a3":"code","28cedfc4":"code","706232a4":"code","ee71282c":"code","81b76935":"code","934dead4":"code","5175920c":"code","02bdac54":"code","5d666a2b":"code","f318a358":"code","40305ded":"code","58f5979c":"code","1c29787f":"code","2756444d":"code","ae79723d":"code","1b272af7":"code","0fe450c6":"code","a3f85007":"code","c2a47357":"markdown","b5af7265":"markdown","3e0711a6":"markdown","d9144e1e":"markdown","e77a727f":"markdown","b56ada36":"markdown","f7772c87":"markdown","12920e9c":"markdown","2281acda":"markdown","3590da0d":"markdown","168167a4":"markdown","249bb6d7":"markdown","4be4ae6a":"markdown","a287348d":"markdown","08f10c6c":"markdown","73e470db":"markdown","083aebdb":"markdown","d003672a":"markdown","7e258a50":"markdown","c6e64ada":"markdown","0dbd567a":"markdown","3d41f1ac":"markdown","c711892a":"markdown","3d0559e8":"markdown","f43ad72e":"markdown","ead1fdfb":"markdown","de0ad611":"markdown","c8b49aeb":"markdown","d225f7dc":"markdown","158874c9":"markdown","9cc415f3":"markdown","493c4467":"markdown","2b4c76bd":"markdown","fb7569cd":"markdown","f349ce66":"markdown","874c7f88":"markdown","42c6d33e":"markdown"},"source":{"8bfa2a46":"import numpy as np \nimport pandas as pd \nimport re\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nfrom scipy import stats\n\n\n%matplotlib inline\n\nrcParams['figure.figsize'] = [9, 6]\nsb.set_style('white')\ncolor = 'mediumslateblue'\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","83093900":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nPassengerId = test['PassengerId']\nsample_sub = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","4135271c":"sample_sub.head(3)","8c24a1b2":"train.head(3)","d82d1ee1":"test.head(3)","8c452eb6":"train.shape, test.shape","ca88e19a":"train.info()\nprint(\"-\"*50)\ntest.info()","7b72ee96":"list(train.columns)","a71ff988":"display(train.isnull().sum().sort_values(ascending=False))\nprint(\"-\"*50)\ndisplay(test.isnull().sum().sort_values(ascending=False))","023a1fb3":"percent_missing = (train.isnull().sum()\/train.isnull().count()) * 100\npercent_missing = percent_missing[percent_missing>0].sort_values(ascending=False)\n\ndisplay(percent_missing.to_frame(name=\"Percent Missing\"))","5e7581e7":"sb.barplot(x=percent_missing.index, y=percent_missing, color=color)","8a0aff14":"train['Cabin'].describe()","59215098":"train = train.drop(['Cabin'], axis=1)\ntest = test.drop(['Cabin'], axis=1)","330e4579":"train['Age'].head()","a12041f8":"for df in [train, test]:\n    age_avg = df['Age'].mean()\n    age_std = df['Age'].std()\n    age_null_count = df['Age'].isnull().sum()\n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    df['Age'][np.isnan(df['Age'])] = age_null_random_list\n    df['Age'] = df['Age'].astype(int)","23a2ccad":"test['Age'].isnull().sum()","4249db2c":"train['Embarked'].head()","5f005598":"train['Embarked'].describe()","69c95282":"train['Embarked'].value_counts()","2014e5b4":"train['Embarked'] = train['Embarked'].fillna('S')","1a45246d":"train.isnull().sum()","0f16169c":"test['Fare'].describe()","e7571dc4":"test['Fare'] = test['Fare'].fillna(test['Fare'].median())","e30856f8":"display(train.isnull().sum().sort_values(ascending=False))\nprint(\"-\"*50)\ndisplay(test.isnull().sum().sort_values(ascending=False))","14e3125f":"display(train['Survived'].value_counts())","23c5a64f":"survive_data = pd.DataFrame()\nsurvive_data['Survived'] = train['Survived'].apply(lambda x:'Died' if x==0 else 'Survived')\nsurvive_data['Pclass'] = train['Pclass']\nsurvive_data['Sex'] = train['Sex']\n\nax = sb.countplot(survive_data['Survived'], color=color)\nax.set(xlabel='Death vs Survived')","7338635a":"train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","e9230261":"ax = sb.countplot(survive_data['Survived'], hue='Sex', palette='spring', data=survive_data)\nax.set(xlabel='Death vs Survived based Sex')","da49ed0d":"train[['SibSp', 'Survived']].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","2102a5e4":"train[['Parch', 'Survived']].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","13506827":"corrmat = train.corr()\n\nsb.heatmap(corrmat, vmax=0.9, cmap=\"spring\", annot=True, square=True, fmt='.2', linewidth='.1')","1610810a":"categorical_features = [col for col in train.columns\n      if train[col].dtype=='object']\n\ncategorical_features","b627cda2":"numerical_features = [col for col in train.columns\n      if train[col].dtype!='object']\n\nnumerical_features","82a67f62":"all_data = [train, test]\n\nfor df in all_data:\n    df['Name_length'] = df['Name'].apply(len)\n    df['Family_size'] = df['SibSp'] + df['Parch'] + 1\n    df['IsAlone'] = df['Family_size'].apply(lambda x:0 if x>1 else 1)","9de87aca":"train.head(4)","8cac7f88":"train.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)","06aba5ad":"train['Fare'] = train['Fare'].astype(int)\ntest['Fare'] = test['Fare'].astype(int)","58a20b8e":"train['Fare'].head()","e649b98c":"def get_person(passenger):\n    age,sex = passenger\n    return 'child' if age < 16 else sex\n    \ntrain['Person'] = train[['Age','Sex']].apply(get_person,axis=1)\ntest['Person'] = test[['Age','Sex']].apply(get_person,axis=1)","b06a4709":"# Drop the 'Sex' variable because we don't need it anymore\ntrain.drop(['Sex'], axis=1, inplace=True)\ntest.drop(['Sex'], axis=1, inplace=True)","dcb8bad7":"for df in all_data:\n    df['Title'] = df['Name'].apply(lambda x: re.search(' ([A-Za-z]+)\\.', x).group(1))","171d2a37":"train.head(3)","3c60104b":"train['Title'].nunique()","4cb0ada6":"train['Title'].value_counts()","2653f382":"# Note that 'Dona' is in test data\n# Ms means miss, Mlle (mademoiselle) means miss, Mme (Madame) means miss\nfor df in all_data:\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace(['Dr', 'Rev', 'Col', 'Major', 'Countess', 'Lady', 'Capt', 'Jonkheer', 'Sir', 'Don', 'Dona'], 'Rare')","8535c211":"train['Title'].value_counts()","ceb4b23a":"train.head(3)","ac2b51b6":"categorical_features = [col for col in train.columns\n      if train[col].dtype=='object']\n\ncategorical_features","2e1cedb5":"train = train.drop(['Name', 'Ticket', 'PassengerId'], axis=1)\ntest = test.drop(['Name', 'Ticket', 'PassengerId'], axis=1)","f52deb99":"train.head()","cbe07d9b":"# Store the target variable and drop it from the train dataset\nX = train.drop(['Survived'], axis=1)\ny = train['Survived']","11b2e60d":"# Filling numerical columns\nnum_cols = [col for col in X.columns if X[col].dtype!='object']\nX.update(X[num_cols].fillna(0))\ntst_num_cols = [col for col in test.columns if X[col].dtype!='object']\ntest.update(test[tst_num_cols].fillna(0))\n\n# Filling categorical columns\ncat_cols = [col for col in X.columns if X[col].dtype=='object']\nX.update(X[cat_cols].fillna('None'))\ntest.update(test[cat_cols].fillna('None'))","861f8908":"# Using pd.get_dummies() to one-hot encode\nX = pd.get_dummies(X)\ntest = pd.get_dummies(test)\nX, test = X.align(test, join='left', axis=1)","eed68a97":"X.head(3)","958895a1":"test.head(3)","67700bff":"cat = [col for col in X.columns\n       if X[col].dtype=='object']\ncat","780247d7":"tmp_all = pd.concat([X, y], axis=1)\ncorrmat = tmp_all.corr()\n\nplt.subplots(figsize=(15, 15))\nsb.heatmap(corrmat, vmax=0.9, square=True, annot=True, cmap='spring', fmt='.1f', linewidth='.1')","79d86f5c":"the_imp_order = corrmat['Survived'].sort_values(ascending=False).head(11).to_frame()\nthe_imp_order","53408d58":"plt.subplots(figsize=(6, 7))\nplt.title('Survival Corrrelation')\nsb.heatmap(the_imp_order, vmax=0.9, annot=True, fmt='.2f', cmap=\"spring\", linewidth='.1')","d3c67ed7":"numerical_data = X.select_dtypes(exclude=['object']).copy()","c7f6149f":"fig = plt.figure(figsize=(17,22))\nfor i in range(len(numerical_data.columns)):\n    fig.add_subplot(9,4,i+1)\n    sb.distplot(numerical_data.iloc[:,i].dropna(), hist=False, kde_kws={'bw':0.1}, color='mediumslateblue')\n    plt.xlabel(numerical_data.columns[i])\nplt.tight_layout()\nplt.show()","e7d47eee":"my_facet = sb.FacetGrid(tmp_all, hue=\"Survived\",aspect=4, palette='seismic')\nmy_facet.map(sb.kdeplot,'Age',shade= True)\nmy_facet.set(xlim=(0, tmp_all['Age'].max()))\nmy_facet.add_legend()","d81c1bc2":"plt.subplots(figsize=(18, 7))\nax = sb.countplot(tmp_all['Age'], hue='Survived', data=tmp_all)","ba145f37":"plt.subplots(figsize=(15, 7))\naverage_age = tmp_all[['Age', 'Survived']].groupby(['Age'], as_index=False).mean()\nsb.barplot(x='Age', y='Survived', data=average_age)","daedeb71":"tmp_all[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","5deba7f9":"plt.subplots(figsize=(11, 5))\nax = sb.countplot(survive_data['Survived'], hue='Pclass', palette='spring', data=survive_data)\nax.set(xlabel='Death vs Survived based on Ticket class')","c6adea2c":"ax = sb.pointplot('Pclass', 'Survived', color=color, data=tmp_all)","904e0160":"display(tmp_all[['Person_female', 'Survived']].groupby(['Person_female'], as_index=False).mean().sort_values(by='Survived', ascending=False))\ndisplay(tmp_all[['Person_male', 'Survived']].groupby(['Person_male'], as_index=False).mean().sort_values(by='Survived', ascending=False))\ndisplay(tmp_all[['Person_child', 'Survived']].groupby(['Person_child'], as_index=False).mean().sort_values(by='Survived', ascending=False))","a10fd9cd":"fig, (axis1,axis2, axis3) = plt.subplots(1,3,sharex=True,figsize=(17,7))\nsb.barplot(tmp_all['Person_female'], tmp_all['Survived'], order=[1,0], ax=axis1, color=color)\nsb.barplot(tmp_all['Person_child'], tmp_all['Survived'], order=[1,0], ax=axis2, color=color)\nsb.barplot(tmp_all['Person_male'], tmp_all['Survived'], order=[1,0], ax=axis3, color=color)","8e3d1c58":"tmp_all[['Family_size', 'Survived']].groupby(['Family_size'], as_index=False).mean().sort_values(by='Survived', ascending=False)","9aa3a61f":"ax = sb.barplot(x=tmp_all['Family_size'], y=tmp_all['Survived'], color=color)\nax.set(xlabel='Size of the Family')","3bd36c2c":"ax = sb.distplot(tmp_all['Family_size'], color=color, bins=20)\nax.set(xlabel='Size of Family', ylabel='Count')","fddd1420":"tmp_all[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean().sort_values(by='Survived', ascending=False)","56d11715":"tmp_all['IsAlone'] = tmp_all['IsAlone'].apply(lambda x: 'Alone' if x==0 else 'Not Alone')\nax = sb.barplot(x=tmp_all['IsAlone'], y=tmp_all['Survived'], color=color)\nax.set(xlabel='Is the person alone or not?')","c4749b5c":"X.head()","8f3f6897":"f = [col for col in X.columns\n    if X[col].dtype!='int64']\nf","b05062e5":"change_ftr = ['Embarked_C',\n 'Embarked_Q',\n 'Embarked_S',\n 'Person_child',\n 'Person_female',\n 'Person_male',\n 'Title_Master',\n 'Title_Miss',\n 'Title_Mr',\n 'Title_Mrs',\n 'Title_Rare']\n\nX[change_ftr] = X[change_ftr].astype(int)\ntest[change_ftr] = test[change_ftr].astype(int)","40ec486a":"tmp_all.columns","dad618ed":"tmp_all = pd.concat([X.copy(), y.copy()], axis=1)\nsb.pairplot(tmp_all[['Survived', 'Pclass', 'Fare', 'Age', 'Name_length', 'Family_size', 'IsAlone']], hue='Survived', height=2, diag_kind='kde')","662cb51d":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom lightgbm import LGBMClassifier\nimport lightgbm as lgb\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom mlxtend.classifier import StackingCVClassifier\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import VotingClassifier","d9a2766f":"def rmse(model, X, y):\n    scores = np.sqrt(-1 * cross_val_score(model, X, y,\n                        cv=10, \n                        scoring='neg_mean_squared_error'))\n    return scores\n\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","71867941":"train_X, valid_X, train_y, valid_y = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=2)","114e5a6c":"Scores = {}","eb01ebc7":"xgb = XGBClassifier(n_estimators=500,\n                   learning_rate=0.01,\n                   colsample_bytree=0.45,\n                   max_depth=3,\n                   gamma=0,\n                   reg_alpha=0,\n                   reg_lambda=0,\n                   objective='reg:squarederror')\n\nscores = rmse(xgb, train_X, train_y)\nprint(\"Root Mean Square Error (RMSE)\", str(scores.mean()))\nprint(\"Error Standard Deviation\", str(scores.std()))\n\nScores['XGB'] = scores.mean()","ec9470a3":"svc = SVC(C= 0.025, kernel='linear')\n\n\nscores = rmse(svc, train_X, train_y)\nprint(\"Root Mean Square Error (RMSE)\", str(scores.mean()))\nprint(\"Error Standard Deviation\", str(scores.std()))\n\nScores['SVR'] = scores.mean()","28cedfc4":"gbr = GradientBoostingClassifier(n_estimators=500,\n                                learning_rate=0.01,\n                                max_depth=5)\n\n\nscores = rmse(gbr, train_X, train_y)\nprint(\"Root Mean Square Error (RMSE)\", str(scores.mean()))\nprint(\"Error Standard Deviation\", str(scores.std()))\n\nScores['GBR'] = scores.mean()","706232a4":"lgb = LGBMClassifier(num_leaves=4,\n                       learning_rate=0.01, \n                       n_estimators=900,\n                       max_bin=200, \n                       bagging_fraction=0.8,\n                       bagging_freq=3, \n                       bagging_seed=5,\n                       feature_fraction=0.5,\n                       feature_fraction_seed=5,\n                       min_sum_hessian_in_leaf = 11,\n                       verbose=-1,\n                       random_state=42)\n\nscores = rmse(lgb, train_X, train_y)\nprint(\"Root Mean Square Error (RMSE)\", str(scores.mean()))\nprint(\"Error Standard Deviation\", str(scores.std()))\n\nScores['LGB'] = scores.mean()","ee71282c":"# vote_set = [('svc', svc),\n#             ('xgb', xgb),\n#             ('lgb', lgb),\n#             ('gbr', gbr),\n#            ]","81b76935":"stack = StackingCVClassifier(classifiers=(gbr, xgb, svc, lgb),\n                            meta_classifier=xgb,\n                            random_state=42)","934dead4":"xgb.fit(train_X, train_y)","5175920c":"svc.fit(train_X, train_y)","02bdac54":"gbr.fit(train_X, train_y)","5d666a2b":"lgb.fit(train_X, train_y)","f318a358":"stack.fit(np.array(train_X), np.array(train_y))","40305ded":"# voting = VotingClassifier(estimators = vote_set , voting = 'hard')\n# voting.fit(train_X, train_y)","58f5979c":"# scores = rmse(voting, train_X, train_y)\n# print(\"Root Mean Square Error (RMSE)\", str(scores.mean()))\n# print(\"Error Standard Deviation\", str(scores.std()))","1c29787f":"def blended_predictions(X):\n    return ((0.15 * svc.predict(X)) + \\\n            (0.15 * gbr.predict(X)) + \\\n            (0.15 * xgb.predict(X)) + \\\n            (0.05 * lgb.predict(X)) + \\\n           (0.4 * stack.predict(np.array(X))))","2756444d":"blended_score = rmsle(valid_y, blended_predictions(valid_X))\n\nScores['Blended'] = blended_score\nblended_score","ae79723d":"preds = np.ceil(blended_predictions(test)).astype(int)","1b272af7":"submission = pd.DataFrame({\n        \"PassengerId\": PassengerId,\n        \"Survived\": preds\n    })\nsubmission.to_csv('titanic.csv', index=False)\n","0fe450c6":"submission.head()","a3f85007":"submission.tail()","c2a47357":"## Is Alone?","b5af7265":"## Ticket Class","3e0711a6":"## AGE","d9144e1e":"# Handling Missing Values","e77a727f":"**Variable**-----------------**Definition**\n\nsurvival------------------Survival\n\npclass------------------Ticket class\n\nsex-------------------------Sex\n\nAge---------------------Age in years\n\nsibsp---------# of siblings \/ spouses aboard the Titanic\n\nparch---------# of parents \/ children aboard the Titanic\n\nticket-----------------Ticket number\n\nfare-------------------Passenger fare\n\ncabin-------------------Cabin number\n\nembarked-------------Port of Embarkation","b56ada36":"pclass: A proxy for socio-economic status (SES)\n1st = Upper\n2nd = Middle\n3rd = Lower\n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\nsibsp: The dataset defines family relations in this way...\n\nSibling = brother, sister, stepbrother, stepsister\n\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way...\n\nParent = mother, father\n\nChild = daughter, son, stepdaughter, stepson\n\nSome children travelled only with a nanny, therefore parch=0 for them.","f7772c87":"Except the top four 'titles', others are present in very few numbers and hence not fit to train the data on such small quantity. We will group them under a new 'title' and call it 'misc'.","12920e9c":"From the countplot above, two things are very clear to us:\n* People with ticket class 3 are more likely to die.\n* People with ticket class 1 are more likely to survive.","2281acda":"Now lets see if the chances of survival increases if the person is alone?","3590da0d":"\n\n## First thing first...","168167a4":"![](attachment:titanic_resize.jpg)","249bb6d7":"### The Fare variable\n\nConvert it to 'int' datatype.","4be4ae6a":"# Visualization","a287348d":"### Adding features to our data.","08f10c6c":"# Feature Engineering ","73e470db":"## Fit the models","083aebdb":"> Okay so here we can see that 'Cabin' has 77% of missing values. We must drop cabin as it will do more bad than good.","d003672a":"Lets double check for any categorical data.","7e258a50":"### The Sex variable\nWe can add a different field in 'Sex' variable as 'Child' if the age is less than 16 years.","c6e64ada":"Alright, we now only have three categorical variables in our data that we need to take care of. We will use one-hot encoding for this purpose.\n\nSo far so good. We have made a good progress in feature engineering. Lets keep moving forward and cleaning our data for processing and modeling. ","0dbd567a":"Now, there is only one missing value inside the 'Fare' column in **test** data.","3d41f1ac":"## Dropping some variables\nWe can drop a few variables from our dataset, as they are no good to us.","c711892a":"### this is a classification problem","3d0559e8":"NO MISSING VALUES TO BOTHER US!!","f43ad72e":"Lets take a quick look at all the categorical data present in our dataset!","ead1fdfb":"## Moving On","de0ad611":"### Now we move on to the 'Name' variable\n\nWe can take out information from the title of the name and then map it to some numerical values.","c8b49aeb":"**Thank You for reading this notebook!!**\n\n**If you find this notebook useful or you just like it, please Upvote it as it would keep me motivated to update this notebook regularly.**\n\n**And if you have any question, or find out something isn't right please comment below.**","d225f7dc":"We have no missing values","158874c9":"## Person","9cc415f3":"## X-y split","493c4467":"# Modeling","2b4c76bd":"Now we dont need the 'SibSp' and 'Parch' variables. So, lets drop em.","fb7569cd":"Well, we don't have any categorical data in our datasets and our data looks good. This puts a smile on my face!\n\nLets keep moving forward!!!","f349ce66":"Based on the data visualization above, we can conclude that 'Female' are more likely to survive than men.","874c7f88":"## Family","42c6d33e":"'Embarked' has only 2 missing values and three unique values in column. We can see that 'S' is the most common value. Hence, we can fill the missing two values with 'S'."}}