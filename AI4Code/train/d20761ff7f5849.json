{"cell_type":{"66d97d9b":"code","f67231b8":"code","3a5d6212":"code","6c41e6f2":"code","67b0bab5":"markdown","af972989":"markdown","9627b35f":"markdown","fb4b0f98":"markdown"},"source":{"66d97d9b":"import numpy as np\nimport matplotlib.pyplot as plt\n\ncolors = {\n    'black': [0.,0.,0.],\n    'white': [1.,1.,1.],\n    'blue': [0.,1.,1.],\n    'red': [1.,0.2,0.]\n}\n\nclass ChessBoard:\n    def __init__(self):\n        self.grid = self.generate_board(8,8)\n        self.red_pieces = {}\n        self.blue_pieces = {}\n    \n    \n    def generate_board(self, rows, columns):\n        board = np.zeros((rows,columns,3))\n        for row_idx, row in enumerate(board):\n            \n            if row_idx % 2:\n                for col_idx, _ in enumerate(row):\n                    if col_idx % 2:\n                        row[col_idx] = colors['white']\n                        \n            else:\n                for col_idx, _ in enumerate(row):\n                    if not col_idx % 2:\n                        row[col_idx] = colors['white']\n                        \n        return board\n    \n    \n    def render(self):\n        plt.imshow(self.grid)\n        \n    \n    def add_red(self, row, column):\n        self.grid[row,column] = colors['red']\n        self.red_pieces['queen'] = [row, column]\n    \n    \n    def add_blue(self, row, column):\n        self.grid[row,column] = colors['blue']\n        self.blue_pieces['queen'] = [row, column]\n    \n    \n    def is_under_attack(self):\n        blue_y, blue_x = self.blue_pieces['queen']\n        red_y, red_x = self.red_pieces['queen']\n        \n        #test horizontal and vertical alignment\n        if red_y == blue_y or red_x == blue_x:\n            return True\n        #test for diagonal alignment using abs of slope\n        elif abs((red_y-blue_y)\/(red_x-blue_x)) == 1:\n            return True\n        \n        return False\n        \n        \n                    ","f67231b8":"#Red under attack by blue diagonally\n\nboard = ChessBoard()\nboard.add_red(0,0)\nboard.add_blue(3,3)\nboard.render()\n\nprint('Red Queen:', board.red_pieces['queen'])\nprint('Blue Queen:', board.blue_pieces['queen'])\n\nprint('Red Under Attack:', board.is_under_attack())","3a5d6212":"#Red not under attack by blue\n\nboard = ChessBoard()\nboard.add_red(1,3)\nboard.add_blue(4,5)\nboard.render()\n\nprint('Red Queen:', board.red_pieces['queen'])\nprint('Blue Queen:', board.blue_pieces['queen'])\n\nprint('Red Under Attack:', board.is_under_attack())","6c41e6f2":"#queens on same row should be \u201cunder attack\u201d\nboard = ChessBoard()\nboard.add_red(3,1)\nboard.add_blue(3,6)\nactual = board.is_under_attack()\nexpected = True\nassert actual == expected\n\n#queens on same column should be \u201cunder attack\u201d\nboard = ChessBoard()\nboard.add_red(2,4)\nboard.add_blue(5,4)\nactual = board.is_under_attack()\nexpected = True\nassert actual == expected\n\n#queens on same diagonal should be \u201cunder attack\u201d\nboard = ChessBoard()\nboard.add_red(1,2)\nboard.add_blue(5,6)\nactual = board.is_under_attack()\nexpected = True\nassert actual == expected\n\n#queens with any other coordinates should NOT be \u201cunder attack\u201d\nboard = ChessBoard()\nboard.add_red(2,4)\nboard.add_blue(6,2)\nactual = board.is_under_attack()\nexpected = False\nassert actual == expected","67b0bab5":"# Chess Board Project\n\n## Problem Domain\n\nRender a chess board using numpy arrays and data analysis tools. The chessboard will include red and blue queens, represented by colored squares.\n\nEach board will have one red and one blue queen at different coordinates. In addition to displaying the board you\u2019ll need to identify if the queens are \u201cunder attack\u201d based on their coordinates.\n\n## Feature list:\n\n- [x] Define a ChessBoard class\n    - [x] should contain an 8x8 grid\n    - [x] Each cell in grid should have a color represented in RGB format.\n    - [x] black = (0,0,0)\n    - [x] white = (1,1,1)\n    - [x] blue = (0,1,1)\n    - [x] red = (1,.2,0)\n- [x] should have add_red method that accepts a row and column as input which colors corresponding cell.\n- [x] should have add_blue method that accepts a row and column as input which colors corresponding cell.\n- [x] should have render method that displays the chess board on screen with red and blue shown in correct locations\n- [x] should have is_under_attack method that return boolean if red is under attack by a blue piece horizontally, vertically or diagonally\n\n## Unit Tests\n\nInclude tests for the following:\n\n- [x] queens on same row should be \u201cunder attack\u201d\n- [x] queens on same column should be \u201cunder attack\u201d\n- [x] queens on same diagonal should be \u201cunder attack\u201d\n- [x] queens with any other coordinates should NOT be \u201cunder attack\u201d\n\n## Stretch Goals\n\n- [ ] Enlarge the chessboard to allow for pixel art drawn pieces. 16x16 ought to be enough.\n- [ ] Add more attacking queens.\n- [ ] Add opacity to cell colors.\n","af972989":"---\n##  Creating a ChessBoard Class","9627b35f":"---\n## Executing and Plotting the Board","fb4b0f98":"---\n## Unit Tests"}}