{"cell_type":{"4cd8d7c3":"code","e22873b5":"code","79f5cccf":"code","4bd46ee8":"code","58aa7253":"code","a9da257e":"code","8e317914":"code","cb6ef0c7":"code","98b0fb6d":"code","533b177b":"markdown","c606ea41":"markdown","c7837f0c":"markdown","9f668bb9":"markdown","47a19e2e":"markdown","055d34ab":"markdown"},"source":{"4cd8d7c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e22873b5":"from kaggle_environments import make, evaluate\n\n# Create the game environment\n# Set debug=True to see the errors if your agent refuses to run\nenv = make(\"connectx\", debug=True)\n\n# List of available default agents\nprint(list(env.agents))","79f5cccf":"# Two random agents play one game round\nenv.run([\"random\", \"random\"])\n\n# Show the game\nenv.render(mode=\"ipython\")","4bd46ee8":"# Selects random valid column\ndef agent_random(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)\n\n# Selects middle column\ndef agent_middle(obs, config):\n    return config.columns\/\/2\n\n# Selects leftmost valid column\ndef agent_leftmost(obs, config):\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return valid_moves[0]","58aa7253":"# Agents play one game round\nenv.run([ agent_leftmost,agent_random])\n\n# Show the game\nenv.render(mode=\"ipython\")","a9da257e":"# Agents play one game round\nenv.run([ agent_middle,agent_random])\n\n# Show the game\nenv.render(mode=\"ipython\")","8e317914":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2))\n    print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n    print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","cb6ef0c7":"get_win_percentages(agent1=agent_middle, agent2=agent_random)","98b0fb6d":"get_win_percentages(agent1=agent_leftmost, agent2=agent_random)","533b177b":"So, what are **obs** and **config**, exactly?\n\n**obs**\n\nobs contains two pieces of information:\n\n* obs.board - the game board (a Python list with one item for each grid location)\n* obs.mark - the piece assigned to the agent (either 1 or 2)\nobs.board is a Python list that shows the locations of the discs, where the first row appears first, followed by the second row, and so on. We use 1 to track player 1's discs, and 2 to track player 2's discs.\n\n\n**config**\n\nconfig contains three pieces of information:\n\n* config.columns - number of columns in the game board (7 for Connect Four)\n* config.rows - number of rows in the game board (6 for Connect Four)\n* config.inarow - number of pieces a player needs to get in a row in order to win (4 for Connect Four)\n","c606ea41":"Which agent do you think performs better against the random agent: the agent that always plays in the middle (agent_middle), or the agent that chooses the leftmost valid column (agent_leftmost)?","c7837f0c":"The outcome of a single game is usually not enough information to figure out how well our agents are likely to perform. To get a better idea, we'll calculate the win percentages for each agent, averaged over multiple games. For fairness, each agent goes first half of the time.\n\nTo do this, we'll use the get_win_percentages() function (defined in a hidden code cell). To view the details of this function, click on the \"Code\" button below.","9f668bb9":"# Evaluating agents","47a19e2e":"# Defining agents\n\nAgent should be implemented as a Python function that accepts two arguments: **obs** and **config**. It returns an integer with the selected column, where indexing starts at zero. So, the returned value is one of 0-6, inclusive.\n\nWe'll start with a few examples, to provide some context. In the code cell below:\n\n* The first agent behaves identically to the \"random\" agent above.\n* The second agent always selects the middle column, whether it's valid or not! Note that if any agent selects an invalid move, it loses the game.\n* The third agent selects the leftmost valid column.","055d34ab":"# Getting started"}}