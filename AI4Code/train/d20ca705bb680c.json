{"cell_type":{"22505bc1":"code","2852e21a":"code","c39fe79b":"code","30edb6f7":"code","3d31c2c5":"code","4e0ffd78":"code","3ff30642":"code","9e4b7b88":"code","3add0817":"code","0a28c1b8":"code","d45c8cf1":"code","b700eab2":"code","93e593ea":"code","8d86a2e9":"code","8292ac61":"code","7c1bff9d":"code","ceaec066":"code","87eb2a01":"code","c9481fb3":"code","138e0851":"code","4700570e":"code","ad4b6c4f":"code","dad2da91":"code","eb85e18b":"code","f5a92cf8":"code","147dfe37":"code","469cd7c2":"code","41ebbb20":"code","97cbf7d1":"code","76e90757":"code","d427efdc":"code","e72c5d62":"code","5f422bde":"code","c305ab28":"code","bf45be65":"code","a75508ed":"markdown","579e73b0":"markdown","c8d071ae":"markdown","606fc747":"markdown","99479b1a":"markdown","c2aefdc6":"markdown","b4350324":"markdown","dddb4fa3":"markdown","e7a66f90":"markdown","67e0d111":"markdown","797f3594":"markdown","79c0b74b":"markdown","73f672e3":"markdown","4fd2fc73":"markdown","20a82ac7":"markdown","bb722d76":"markdown","a072cd73":"markdown","d9407699":"markdown","6027447e":"markdown","4875ebd9":"markdown","4ba163b2":"markdown","ae9f12da":"markdown","6c23904c":"markdown","8175bce7":"markdown","34edc822":"markdown","a9563794":"markdown","cdea4d41":"markdown"},"source":{"22505bc1":"# Basic libraries\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter('ignore')\n\n# Directry check\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2852e21a":"# Visualization\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nsns.set()\n\n# Data preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\n# parameter opimization\nfrom sklearn.model_selection import GridSearchCV\n\n# Validation\nfrom sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score","c39fe79b":"df = pd.read_csv(\"\/kaggle\/input\/income-classification\/income_evaluation.csv\", header=0)","30edb6f7":"df.head()","3d31c2c5":"df.columns = ['age', 'workclass', 'fnlwgt', 'education', 'education_num',\n              'marital_status', 'occupation', 'relationship', 'race', 'sex',\n              'capital_gain', 'capital_loss', 'hours_per_week', 'native_country', 'income']","4e0ffd78":"df[\"income\"].value_counts()","3ff30642":"# data size\ndf.shape","9e4b7b88":"# data info\ndf.info()","3add0817":"# Null value\ndf.isnull().sum()","0a28c1b8":"# Unique values\nfor i in range(15):\n    print(\"-\"*50)\n    print(df.columns[i])\n    print(df.iloc[:,i].value_counts())","d45c8cf1":"# basic statistics balues\n# whole data\ndf.describe()","b700eab2":"# income : <=50K\ndf.query(\"income==' <=50K'\").describe()","93e593ea":"# income : >50K\ndf.query(\"income==' >50K'\").describe()","8d86a2e9":"# Distribution\nfig, ax = plt.subplots(3,2, figsize=(25,20), facecolor=\"lavender\")\nplt.subplots_adjust(wspace=0.2, hspace=0.3)\n\n# age\nsns.distplot(df.query(\"income==' <=50K'\")[\"age\"], ax=ax[0,0], label=\"<=50K\", bins=30, kde=False)\nsns.distplot(df.query(\"income==' >50K'\")[\"age\"], ax=ax[0,0], label=\">50K\", bins=30, kde=False)\nax[0,0].set_title(\"age distribution\")\nax[0,0].set_ylabel(\"count\")\nax[0,0].legend(facecolor=\"white\")\n\n# fnlwgt\nsns.distplot(df.query(\"income==' <=50K'\")[\"fnlwgt\"], ax=ax[0,1], label=\"<=50K\", bins=30, kde=False)\nsns.distplot(df.query(\"income==' >50K'\")[\"fnlwgt\"], ax=ax[0,1], label=\">50K\", bins=30, kde=False)\nax[0,1].set_title(\"fnlwgt distribution\")\nax[0,1].set_ylabel(\"count\")\nax[0,1].legend(facecolor=\"white\")\n\n# capital-gain\nsns.distplot(np.log(df.query(\"income==' <=50K'\")[\"capital_gain\"]+1), ax=ax[1,0], label=\"<=50K\", bins=30, kde=False)\nsns.distplot(np.log(df.query(\"income==' >50K'\")[\"capital_gain\"]+1), ax=ax[1,0], label=\">50K\", bins=30, kde=False)\nax[1,0].set_title(\"capital_gain distribution\")\nax[1,0].set_xlabel(\"log(capital_gain)\")\nax[1,0].set_ylabel(\"count\")\nax[1,0].set_yscale(\"log\")\nax[1,0].legend(facecolor=\"white\")\n\n# capital-loss\nsns.distplot(np.log(df.query(\"income==' <=50K'\")[\"capital_loss\"]+1), ax=ax[1,1], label=\"<=50K\", bins=30, kde=False)\nsns.distplot(np.log(df.query(\"income==' >50K'\")[\"capital_loss\"]+1), ax=ax[1,1], label=\">50K\", bins=30, kde=False)\nax[1,1].set_title(\"capital_loss distribution\")\nax[1,1].set_xlabel(\"log(capital_loss)\")\nax[1,1].set_ylabel(\"count\")\nax[1,1].set_yscale(\"log\")\nax[1,1].legend(facecolor=\"white\")\n\n# education-num\nsns.distplot(df.query(\"income==' <=50K'\")[\"education_num\"], ax=ax[2,0], label=\"<=50K\", bins=30, kde=False)\nsns.distplot(df.query(\"income==' >50K'\")[\"education_num\"], ax=ax[2,0], label=\">50K\", bins=30, kde=False)\nax[2,0].set_title(\"education-num distribution\")\nax[2,0].set_ylabel(\"count\")\nax[2,0].legend(facecolor=\"white\")\n\n# hours-per-week\nsns.distplot(df.query(\"income==' <=50K'\")[\"hours_per_week\"], ax=ax[2,1], label=\"<=50K\", bins=30, kde=False)\nsns.distplot(df.query(\"income==' >50K'\")[\"hours_per_week\"], ax=ax[2,1], label=\">50K\", bins=30, kde=False)\nax[2,1].set_title(\"hours-per-week distribution\")\nax[2,1].set_ylabel(\"count\")\nax[2,1].legend(facecolor=\"white\")","8292ac61":"# scatter plot\ng = sns.PairGrid(df, vars=[\"age\", \"fnlwgt\", \"capital_gain\",\"capital_loss\", \"education_num\", \"hours_per_week\"], hue=\"income\")\ng.map(plt.scatter, alpha=0.8)\ng.add_legend()","7c1bff9d":"# histgram\nfig, ax = plt.subplots(4,2, figsize=(25,30), facecolor=\"lavender\")\nplt.subplots_adjust(wspace=0.2, hspace=0.6)\n\n# workclass\nsns.countplot(\"workclass\", data=df, hue=\"income\", ax=ax[0,0])\nax[0,0].tick_params(axis='x', labelrotation=90)\nax[0,0].legend(loc='upper right', facecolor='white')\nax[0,0].set_xlabel('')\nax[0,0].set_title(\"work class\")\n\n# education\nsns.countplot(\"education\", data=df, hue=\"income\", ax=ax[0,1])\nax[0,1].tick_params(axis='x', labelrotation=90)\nax[0,1].legend(loc='upper right', facecolor='white')\nax[0,1].set_xlabel('')\nax[0,1].set_title(\"education\")\n\n# marital-status\nsns.countplot(\"marital_status\", data=df, hue=\"income\", ax=ax[1,0])\nax[1,0].tick_params(axis='x', labelrotation=90)\nax[1,0].legend(loc='upper right', facecolor='white')\nax[1,0].set_xlabel('')\nax[1,0].set_title(\"marital-status\")\n\n# occupation\nsns.countplot(\"occupation\", data=df, hue=\"income\", ax=ax[1,1])\nax[1,1].tick_params(axis='x', labelrotation=90)\nax[1,1].legend(loc='upper right', facecolor='white')\nax[1,1].set_xlabel('')\nax[1,1].set_title(\"occupation\")\n\n# relationship\nsns.countplot(\"relationship\", data=df, hue=\"income\", ax=ax[2,0])\nax[2,0].tick_params(axis='x', labelrotation=90)\nax[2,0].legend(loc='upper right', facecolor='white')\nax[2,0].set_xlabel('')\nax[2,0].set_title(\"relationship\")\n\n# race\nsns.countplot(\"race\", data=df, hue=\"income\", ax=ax[2,1])\nax[2,1].tick_params(axis='x', labelrotation=90)\nax[2,1].legend(loc='upper right', facecolor='white')\nax[2,1].set_xlabel('')\nax[2,1].set_title(\"race\")\n\n# sex\nsns.countplot(\"occupation\", data=df, hue=\"income\", ax=ax[3,0])\nax[3,0].tick_params(axis='x', labelrotation=90)\nax[3,0].legend(loc='upper right', facecolor='white')\nax[3,0].set_xlabel('')\nax[3,0].set_title(\"occupation\")\n\n# native-country\nsns.countplot(\"native_country\", data=df, hue=\"income\", ax=ax[3,1])\nax[3,1].tick_params(axis='x', labelrotation=90)\nax[3,1].legend(loc='upper right', facecolor='white')\nax[3,1].set_xlabel('')\nax[3,1].set_title(\"native-country\")","ceaec066":"# histgram\nfig, ax = plt.subplots(4,2, figsize=(25,30), facecolor=\"lavender\")\nplt.subplots_adjust(wspace=0.2, hspace=0.6)\n\n# workclass\nsns.boxplot(\"workclass\", \"age\", data=df, hue=\"income\", ax=ax[0,0])\nax[0,0].tick_params(axis='x', labelrotation=90)\nax[0,0].legend(loc='upper right', facecolor='white')\nax[0,0].set_xlabel('')\nax[0,0].set_title(\"work class\")\n\n# education\nsns.boxplot(\"education\", \"age\", data=df, hue=\"income\", ax=ax[0,1])\nax[0,1].tick_params(axis='x', labelrotation=90)\nax[0,1].legend(loc='upper right', facecolor='white')\nax[0,1].set_xlabel('')\nax[0,1].set_title(\"education\")\n\n# marital-status\nsns.boxplot(\"marital_status\", \"age\", data=df, hue=\"income\", ax=ax[1,0])\nax[1,0].tick_params(axis='x', labelrotation=90)\nax[1,0].legend(loc='upper right', facecolor='white')\nax[1,0].set_xlabel('')\nax[1,0].set_title(\"marital-status\")\n\n# occupation\nsns.boxplot(\"occupation\", \"age\", data=df, hue=\"income\", ax=ax[1,1])\nax[1,1].tick_params(axis='x', labelrotation=90)\nax[1,1].legend(loc='upper right', facecolor='white')\nax[1,1].set_xlabel('')\nax[1,1].set_title(\"occupation\")\n\n# relationship\nsns.boxplot(\"relationship\", \"age\", data=df, hue=\"income\", ax=ax[2,0])\nax[2,0].tick_params(axis='x', labelrotation=90)\nax[2,0].legend(loc='upper right', facecolor='white')\nax[2,0].set_xlabel('')\nax[2,0].set_title(\"relationship\")\n\n# race\nsns.boxplot(\"race\", \"age\", data=df, hue=\"income\", ax=ax[2,1])\nax[2,1].tick_params(axis='x', labelrotation=90)\nax[2,1].legend(loc='upper right', facecolor='white')\nax[2,1].set_xlabel('')\nax[2,1].set_title(\"race\")\n\n# sex\nsns.boxplot(\"sex\", \"age\", data=df, hue=\"income\", ax=ax[3,0])\nax[3,0].tick_params(axis='x', labelrotation=90)\nax[3,0].legend(loc='upper right', facecolor='white')\nax[3,0].set_xlabel('')\nax[3,0].set_title(\"occupation\")\n\n# native-country\nsns.boxplot(\"workclass\", \"age\", data=df, hue=\"income\", ax=ax[3,1])\nax[3,1].tick_params(axis='x', labelrotation=90)\nax[3,1].legend(loc='upper right', facecolor='white')\nax[3,1].set_xlabel('')\nax[3,1].set_title(\"native-country\")","87eb2a01":"# histgram\nfig, ax = plt.subplots(4,2, figsize=(25,30), facecolor=\"lavender\")\nplt.subplots_adjust(wspace=0.2, hspace=0.6)\n\n# workclass\nsns.boxplot(\"workclass\", \"capital_gain\", data=df, hue=\"income\", ax=ax[0,0])\nax[0,0].tick_params(axis='x', labelrotation=90)\nax[0,0].legend(loc='upper right', facecolor='white')\nax[0,0].set_xlabel('')\nax[0,0].set_yscale(\"log\")\nax[0,0].set_title(\"work class\")\n\n# education\nsns.boxplot(\"education\", \"capital_gain\", data=df, hue=\"income\", ax=ax[0,1])\nax[0,1].tick_params(axis='x', labelrotation=90)\nax[0,1].legend(loc='upper right', facecolor='white')\nax[0,1].set_xlabel('')\nax[0,1].set_yscale(\"log\")\nax[0,1].set_title(\"education\")\n\n# marital-status\nsns.boxplot(\"marital_status\", \"capital_gain\", data=df, hue=\"income\", ax=ax[1,0])\nax[1,0].tick_params(axis='x', labelrotation=90)\nax[1,0].legend(loc='upper right', facecolor='white')\nax[1,0].set_xlabel('')\nax[1,0].set_yscale(\"log\")\nax[1,0].set_title(\"marital-status\")\n\n# occupation\nsns.boxplot(\"occupation\", \"capital_gain\", data=df, hue=\"income\", ax=ax[1,1])\nax[1,1].tick_params(axis='x', labelrotation=90)\nax[1,1].legend(loc='upper right', facecolor='white')\nax[1,1].set_xlabel('')\nax[1,1].set_yscale(\"log\")\nax[1,1].set_title(\"occupation\")\n\n# relationship\nsns.boxplot(\"relationship\", \"capital_gain\", data=df, hue=\"income\", ax=ax[2,0])\nax[2,0].tick_params(axis='x', labelrotation=90)\nax[2,0].legend(loc='upper right', facecolor='white')\nax[2,0].set_xlabel('')\nax[2,0].set_yscale(\"log\")\nax[2,0].set_title(\"relationship\")\n\n# race\nsns.boxplot(\"race\", \"capital_gain\", data=df, hue=\"income\", ax=ax[2,1])\nax[2,1].tick_params(axis='x', labelrotation=90)\nax[2,1].legend(loc='upper right', facecolor='white')\nax[2,1].set_xlabel('')\nax[2,1].set_yscale(\"log\")\nax[2,1].set_title(\"race\")\n\n# sex\nsns.boxplot(\"sex\", \"capital_gain\", data=df, hue=\"income\", ax=ax[3,0])\nax[3,0].tick_params(axis='x', labelrotation=90)\nax[3,0].legend(loc='upper right', facecolor='white')\nax[3,0].set_xlabel('')\nax[3,0].set_yscale(\"log\")\nax[3,0].set_title(\"occupation\")\n\n# native-country\nsns.boxplot(\"workclass\", \"capital_gain\", data=df, hue=\"income\", ax=ax[3,1])\nax[3,1].tick_params(axis='x', labelrotation=90)\nax[3,1].legend(loc='upper right', facecolor='white')\nax[3,1].set_xlabel('')\nax[3,1].set_yscale(\"log\")\nax[3,1].set_title(\"native-country\")","c9481fb3":"# map dictionary\nmap_workclass = {\" Private\":0, \" Self-emp-not-inc\":1, \" Local-gov\":2, \" ?\":3, \" State-gov\":4, \" Self-emp-inc\":5, \" Federal-gov\":6, \" Without-pay\":7, \" Never-worked\":8}\n\nmap_education = {\" HS-grad\":0, \" Some-college\":1, \" Bachelors\":2, \" Masters\":3, \" Assoc-voc\":4, \" 11th\":5, \" Assoc-acdm\":6, \" 10th\":7,\n                \" 7th-8th\":8, \" Prof-school\":9, \" 9th\":10, \" 12th\":10, \" Doctorate\":11, \" 5th-6th\":12, \" 1st-4th\":13, \" Preschool\":14}\n\nmap_marital_status = {\" Married-civ-spouse\":0, \" Never-married\":1, \" Divorced\":2, \" Separated\":3, \" Widowed\":4, \" Married-spouse-absent\":5, \" Married-AF-spouse\":6}\n\nmap_occupation = {\" Prof-specialty\":0, \" Craft-repair\":1, \" Exec-managerial\":2, \" Adm-clerical\":3, \" Sales\":4, \" Other-service\":5, \" Machine-op-inspct\":6, \" ?\":7,\n                \" Transport-moving\":8, \" Handlers-cleaners\":9, \" Farming-fishing\":10, \" Tech-support\":10, \" Protective-serv\":11, \" Priv-house-serv\":12, \" Armed-Forces\":13}\n\nmap_relationship = {\" Husband\":0, \" Not-in-family\":1, \" Own-child\":2, \" Unmarried\":3, \" Wife\":4, \" Other-relative\":5}\n\nmap_race = {\" White\":0, \" Black\":1, \" Asian-Pac-Islander\":2, \" Amer-Indian-Eskimo\":3, \" Other\":4}\n\nmap_sex = {\" Male\":0, \" Female\":1}\n\n# native-country are many categories, so i group the lower coutory and it is used creation of function and apply function.\ndef native_country_flg(x):\n    if x[\"native_country\"] == \" United-States\":\n        res = 0\n    elif x[\"native_country\"] == \" Mexico\":\n        res = 1\n    elif x[\"native_country\"] == \" ?\":\n        res = 2\n    elif x[\"native_country\"] == \" Philippines\":\n        res = 3\n    else :\n        res = 4\n    return res\n\n# mapping\ndf_class = df.copy()\n\ndf_class[\"workclass\"] = df_class[\"workclass\"].map(map_workclass)\ndf_class[\"education\"] = df_class[\"education\"].map(map_education)\ndf_class[\"marital_status\"] = df_class[\"marital_status\"].map(map_marital_status)\ndf_class[\"occupation\"] = df_class[\"occupation\"].map(map_occupation)\ndf_class[\"relationship\"] = df_class[\"relationship\"].map(map_relationship)\ndf_class[\"race\"] = df_class[\"race\"].map(map_race)\ndf_class[\"sex\"] = df_class[\"sex\"].map(map_sex)\ndf_class[\"native_country\"] = df_class.apply(native_country_flg, axis=1)","138e0851":"# target variables, income\nmap_income = {\" <=50K\":0, \" >50K\":1}\n\ndf_class[\"income\"] = df_class[\"income\"].map(map_income)","4700570e":"df_class.head()","ad4b6c4f":"# Create Target variable and Explanatry variables\nX = df_class.drop(\"income\", axis=1)\ny = df_class[\"income\"]","dad2da91":"# Data split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","eb85e18b":"# Difine class\nforest = RandomForestClassifier(n_estimators=10, random_state=1)\n\n# Gridsearch\nparam_range = [5,10,15,20]\nleaf = [40,50, 60]\ncriterion = [\"entropy\", \"gini\", \"error\"]\nparam_grid = [{\"n_estimators\":param_range, \"max_depth\":param_range, \"criterion\":criterion, \"max_leaf_nodes\":leaf}]\n\ngs = GridSearchCV(estimator=forest, param_grid=param_grid, scoring=\"accuracy\", cv=10, n_jobs=1)\n\n# Fitting\ngs = gs.fit(X_train, y_train)\n\nprint(gs.best_score_)\nprint(gs.best_params_)","f5a92cf8":"# Fitting for forest instance\nforest = RandomForestClassifier(n_estimators=15, random_state=1,\n                               criterion='gini', max_depth=15,\n                               max_leaf_nodes=50)\nforest.fit(X_train, y_train)\n\n# Importance \nimportance = forest.feature_importances_\n\n# index\nindices = np.argsort(importance)[::-1]\n\nfor f in range(X_train.shape[1]):\n    print(\"%2d) %-*s %f\" %(f+1, 30, X.columns[indices[f]], importance[indices[f]]))","147dfe37":"# Visualization\nplt.figure(figsize=(10,6), facecolor=\"lavender\")\n\nplt.title('Feature Importances')\nplt.bar(range(X_train.shape[1]), importance[indices], color='blue', align='center')\nplt.xticks(range(X_train.shape[1]), X.columns[indices], rotation=90)\nplt.xlim([-1, X_train.shape[1]])\nplt.tight_layout()\nplt.show()","469cd7c2":"df_class[\"capital_value\"] = df_class[\"capital_gain\"] - df_class[\"capital_loss\"]\n\ndf_class_4 = df_class[[\"marital_status\", \"capital_gain\", \"education_num\", \"relationship\"]]\ndf_class_9 = df_class[[\"marital_status\", \"capital_value\", \"education_num\", \"relationship\", \"age\", \"occupation\", \"hours_per_week\", \"education\"]]","41ebbb20":"# Data split\nX_train_4, X_test_4, y_train_4, y_test_4 = train_test_split(df_class_4, y, test_size=0.3, random_state=1)\n\n# Difine class\nforest_4 = RandomForestClassifier(n_estimators=10, random_state=1)\n\n# Gridsearch\nparam_range = [5,10,15,20]\nleaf = [40,50,60]\ncriterion = [\"entropy\", \"gini\", \"error\"]\nparam_grid = [{\"n_estimators\":param_range, \"max_depth\":param_range, \"criterion\":criterion, \"max_leaf_nodes\":leaf}]\n\ngs_4 = GridSearchCV(estimator=forest_4, param_grid=param_grid, scoring=\"accuracy\", cv=10, n_jobs=1)\n\n# Fitting\ngs_4 = gs_4.fit(X_train_4, y_train_4)\n\nprint(gs_4.best_score_)\nprint(gs_4.best_params_)","97cbf7d1":"# Data split\nX_train_9, X_test_9, y_train_9, y_test_9 = train_test_split(df_class_9, y, test_size=0.3, random_state=1)\n\n# Difine class\nforest_9 = RandomForestClassifier(n_estimators=10, random_state=1)\n\n# Gridsearch\nparam_range = [15,20, 25]\nleaf = [60,70,80]\ncriterion = [\"entropy\", \"gini\", \"error\"]\nparam_grid = [{\"n_estimators\":param_range, \"max_depth\":param_range, \"criterion\":criterion, \"max_leaf_nodes\":leaf}]\n\ngs_9 = GridSearchCV(estimator=forest_9, param_grid=param_grid, scoring=\"accuracy\", cv=10, n_jobs=1)\n\n# Fitting\ngs_9 = gs_9.fit(X_train_9, y_train_9)\n\nprint(gs_9.best_score_)\nprint(gs_9.best_params_)","76e90757":"# original parameters\nclf = gs.best_estimator_\nprint(\"-\"*50)\nprint(\"Original parameters\")\n\n# Prediction\ny_pred = clf.predict(X_test)\ny_pred_train = clf.predict(X_train)\n\n# Print prediction\nprint(\"confusion_matrix = \\n\", confusion_matrix(y_true=y_test, y_pred=y_pred))\n\nprint(\"*accuracy_train = %.3f\" % accuracy_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"accuracy = %.3f\" % accuracy_score(y_true=y_test, y_pred=y_pred))\n\nprint(\"*precision_train = %.3f\" % precision_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"precision = %.3f\" % precision_score(y_true=y_test, y_pred=y_pred))\n\nprint(\"*recall_train = %.3f\" % recall_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"recall = %.3f\" % recall_score(y_true=y_test, y_pred=y_pred))\n\nprint(\"*f1_score_train = %.3f\" % f1_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"f1_score = %.3f\" % f1_score(y_true=y_test, y_pred=y_pred))\n\n\n# 1st parameters group (4 variables)\nclf_4 = gs_4.best_estimator_\nprint(\"-\"*50)\nprint(\"Original parameters\")\n\n# Prediction\ny_pred = clf_4.predict(X_test_4)\ny_pred_train = clf_4.predict(X_train_4)\n\n# Print prediction\nprint(\"confusion_matrix = \\n\", confusion_matrix(y_true=y_test_4, y_pred=y_pred))\n\nprint(\"*accuracy_train = %.3f\" % accuracy_score(y_true=y_train_4, y_pred=y_pred_train))\nprint(\"accuracy = %.3f\" % accuracy_score(y_true=y_test_4, y_pred=y_pred))\n\nprint(\"*precision_train = %.3f\" % precision_score(y_true=y_train_4, y_pred=y_pred_train))\nprint(\"precision = %.3f\" % precision_score(y_true=y_test_4, y_pred=y_pred))\n\nprint(\"*recall_train = %.3f\" % recall_score(y_true=y_train_4, y_pred=y_pred_train))\nprint(\"recall = %.3f\" % recall_score(y_true=y_test_4, y_pred=y_pred))\n\nprint(\"*f1_score_train = %.3f\" % f1_score(y_true=y_train_4, y_pred=y_pred_train))\nprint(\"f1_score = %.3f\" % f1_score(y_true=y_test_4, y_pred=y_pred))\n\n\n# 2nd parameters group (9 variables)\nclf_9 = gs_9.best_estimator_\nprint(\"-\"*50)\nprint(\"Original parameters\")\n\n# Prediction\ny_pred = clf_9.predict(X_test_9)\ny_pred_train = clf_9.predict(X_train_9)\n\n# Print prediction\nprint(\"confusion_matrix = \\n\", confusion_matrix(y_true=y_test_9, y_pred=y_pred))\n\nprint(\"*accuracy_train = %.3f\" % accuracy_score(y_true=y_train_9, y_pred=y_pred_train))\nprint(\"accuracy = %.3f\" % accuracy_score(y_true=y_test_9, y_pred=y_pred))\n\nprint(\"*precision_train = %.3f\" % precision_score(y_true=y_train_9, y_pred=y_pred_train))\nprint(\"precision = %.3f\" % precision_score(y_true=y_test_9, y_pred=y_pred))\n\nprint(\"*recall_train = %.3f\" % recall_score(y_true=y_train_9, y_pred=y_pred_train))\nprint(\"recall = %.3f\" % recall_score(y_true=y_test_9, y_pred=y_pred))\n\nprint(\"*f1_score_train = %.3f\" % f1_score(y_true=y_train_9, y_pred=y_pred_train))\nprint(\"f1_score = %.3f\" % f1_score(y_true=y_test_9, y_pred=y_pred))","d427efdc":"# age_cate\nage_qua25=df_class[\"age\"].quantile(0.25)\nage_qua50=df_class[\"age\"].quantile(0.5)\nage_qua75=df_class[\"age\"].quantile(0.75)\ndef age_cate(x):\n    if x[\"age\"] < age_qua25:\n        res = 0\n    elif x[\"age\"] < age_qua50 and x[\"age\"] >= age_qua25:\n        res = 1\n    elif x[\"age\"] < age_qua75 and x[\"age\"] >= age_qua50:\n        res = 2\n    else:\n        res = 3\n    return res\n\ndf_class[\"age\"] = df_class.apply(age_cate, axis=1)\n\n# fnlwgt_cate\nfnl_qua25=df_class[\"fnlwgt\"].quantile(0.25)\nfnl_qua50=df_class[\"fnlwgt\"].quantile(0.5)\nfnl_qua75=df_class[\"fnlwgt\"].quantile(0.75)\ndef fnlwgt_cate(x):\n    if x[\"fnlwgt\"] < fnl_qua25:\n        res = 0\n    elif x[\"fnlwgt\"] < fnl_qua50 and x[\"fnlwgt\"] >= fnl_qua25:\n        res = 1\n    elif x[\"fnlwgt\"] < fnl_qua75 and x[\"fnlwgt\"] >= fnl_qua50:\n        res = 2\n    else:\n        res = 3\n    return res  \n\ndf_class[\"fnlwgt\"] = df_class.apply(fnlwgt_cate, axis=1)\n\n# capital-value_cate\ncav_qua25=df_class[\"capital_value\"].quantile(0.25)\ncav_qua50=df_class[\"capital_value\"].quantile(0.5)\ncav_qua75=df_class[\"capital_value\"].quantile(0.75)\ndef capital_value_cate(x):\n    if x[\"capital_value\"] < cav_qua25:\n        res = 0\n    elif x[\"capital_value\"] < cav_qua50 and x[\"capital_value\"] >= cav_qua25:\n        res = 1\n    elif x[\"capital_value\"] < cav_qua75 and x[\"capital_value\"] >= cav_qua50:\n        res = 2\n    else:\n        res = 3\n    return res \n\ndf_class[\"capital_value\"] = df_class.apply(capital_value_cate, axis=1)\n\n# education-num_cate\nedu_qua25=df_class[\"education_num\"].quantile(0.25)\nedu_qua50=df_class[\"education_num\"].quantile(0.5)\nedu_qua75=df_class[\"education_num\"].quantile(0.75)\ndef education_num_cate(x):\n    if x[\"education_num\"] < edu_qua25:\n        res = 0\n    elif x[\"education_num\"] < edu_qua50 and x[\"education_num\"] >= edu_qua25:\n        res = 1\n    elif x[\"education_num\"] < edu_qua75 and x[\"education_num\"] >= edu_qua50:\n        res = 2\n    else:\n        res = 3\n    return res\n\ndf_class[\"education_num\"] = df_class.apply(education_num_cate, axis=1)\n\n# hours-per-week\nhou_qua25=df_class[\"hours_per_week\"].quantile(0.25)\nhou_qua50=df_class[\"hours_per_week\"].quantile(0.5)\nhou_qua75=df_class[\"hours_per_week\"].quantile(0.75)\ndef hours_per_week_cate(x):\n    if x[\"hours_per_week\"] < hou_qua25:\n        res = 0\n    elif x[\"hours_per_week\"] < hou_qua50 and x[\"hours_per_week\"] >= hou_qua25:\n        res = 1\n    elif x[\"hours_per_week\"] < hou_qua75 and x[\"hours_per_week\"] >= hou_qua50:\n        res = 2\n    else:\n        res = 3\n    return res\n\ndf_class[\"hours_per_week\"] = df_class.apply(hours_per_week_cate, axis=1)","e72c5d62":"df_9_cate = df_class[[\"marital_status\", \"capital_value\", \"education_num\", \"relationship\", \"age\", \"occupation\", \"hours_per_week\", \"education\", \"income\"]]","5f422bde":"# Create Target variable and Explanatry variables\nX = df_9_cate.drop(\"income\", axis=1)\ny = df_9_cate[\"income\"]\n\n# Data split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","c305ab28":"# Difine class\nforest = RandomForestClassifier(n_estimators=10, random_state=1)\n\n# Gridsearch\nparam_range = [5,10,15,20]\nleaf = [60,70, 80]\ncriterion = [\"entropy\", \"gini\", \"error\"]\nparam_grid = [{\"n_estimators\":param_range, \"max_depth\":param_range, \"criterion\":criterion, \"max_leaf_nodes\":leaf}]\n\ngs = GridSearchCV(estimator=forest, param_grid=param_grid, scoring=\"accuracy\", cv=10, n_jobs=1)\n\n# Fitting\ngs = gs.fit(X_train, y_train)\n\nprint(gs.best_score_)\nprint(gs.best_params_)","bf45be65":"# original parameters\nclf = gs.best_estimator_\nprint(\"-\"*50)\nprint(\"Original parameters\")\n\n# Prediction\ny_pred = clf.predict(X_test)\ny_pred_train = clf.predict(X_train)\n\n# Print prediction\nprint(\"confusion_matrix = \\n\", confusion_matrix(y_true=y_test, y_pred=y_pred))\n\nprint(\"*accuracy_train = %.3f\" % accuracy_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"accuracy = %.3f\" % accuracy_score(y_true=y_test, y_pred=y_pred))\n\nprint(\"*precision_train = %.3f\" % precision_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"precision = %.3f\" % precision_score(y_true=y_test, y_pred=y_pred))\n\nprint(\"*recall_train = %.3f\" % recall_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"recall = %.3f\" % recall_score(y_true=y_test, y_pred=y_pred))\n\nprint(\"*f1_score_train = %.3f\" % f1_score(y_true=y_train, y_pred=y_pred_train))\nprint(\"f1_score = %.3f\" % f1_score(y_true=y_test, y_pred=y_pred))","a75508ed":"### For performance of prediction, 9 parameters is better than other all params and 4params.\nIt has the effect of reducing the dimension by selecting important features in random forest.","579e73b0":"Change categorical values to numerical<br>\n- workclass: 8 categories<br>\n- education: 16 categories<br>\n- marital-status: 7 categories<br>\n- occupation: 14 categories<br>\n- relationship: 6 categories<br>\n- race: 5 categories<br>\n- sex: 2 categories<br>\n- native-country: 41 categories<br>","c8d071ae":"### Categorical values, split by income\n- workclass: 8 categories<br>\n- education: 16 categories<br>\n- marital-status: 7 categories<br>\n- occupation: 14 categories<br>\n- relationship: 6 categories<br>\n- race: 5 categories<br>\n- sex: 2 categories<br>\n- native-country: 41 categories<br>","606fc747":"High income people are\n- age : older\n- education_num : more education_num\n- capital gain : strong large\n- capital loss : large\n- hours_per_week : longer","99479b1a":"### Data checking","c2aefdc6":"### Libraries","b4350324":"mapping difinition","dddb4fa3":"# Income classification, visualization","e7a66f90":"#### Each feature importance is visualized.","67e0d111":"accuracy : 0.856 <br>\nbest params : {'criterion': 'gini', 'max_depth': 15, 'max_leaf_nodes': 50, 'n_estimators': 15}","797f3594":"### 1. Basic Exploratory Data Analysis<br>\n### 2. Important variables confirmation by random forest<br>\n### 3. Variables selection\u3000important variavles and comparing result before after, by random forest\n### 4. Numerical values \u21d2 Categorical value, prediction reslt","79c0b74b":"Run the random forest by classifying the numerical values into 4 categories in quartiles.\n\n- age: <br>\n- fnlwgt: <br>\n- capital-gain<br>\n- capital-loss<br>\n- education-num: <br>\n- hours-per-week: <br>","73f672e3":"## 4. Numerical values \u21d2 Categorical value, prediction reslt","4fd2fc73":"### Numerical values distribution, split by income\n- age: <br>\n- fnlwgt: <br>\n- capital-gain<br>\n- capital-loss<br>\n- education-num: <br>\n- hours-per-week: <br>","20a82ac7":"Data preprocessing","bb722d76":"*columns name is not proper characoter. So, they are changed.","a072cd73":"### Dataloading","d9407699":"### 2. Important variables confirmation by random forest","6027447e":"### 1. Basic Exploratory Data Analysis","4875ebd9":"### capital_gain","4ba163b2":"1st parameters group : Top 4, \"marital_status\", \"capital_gain\", \"education_num\", \"relationship\"<br>\n\n2nd parameters group : Top 9, Top 4 + \"age\", \"occupation\", \"capital_loss\", \"hours_per_week\", \"education\"<br>\nAnd, Combining variables : capital gain and capital loss can be combined, because same dimension.<br>\nDefine \"capital_value\" = \"capital_gain - capital_loss\"<br>","ae9f12da":"### age","6c23904c":"The result is not very effective., Recall value is issue.","8175bce7":"### Variables\n#### Numerical values\n- age: <br>\n- fnlwgt: <br>\n- education-num: <br>\n- capital-gain: <br>\n- capital-loss: <br>\n- hours-per-week: <br>\n\n#### Categorical values\n- workclass: 8 categories<br>\n Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked.<br>\n- education: 16 categories<br>\n Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool.<br>\n- marital-status: 7 categories<br>\n Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse.<br>\n- occupation: 14 categories<br>\nTech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces.<br>\n- relationship: 6 categories<br>\nWife, Own-child, Husband, Not-in-family, Other-relative, Unmarried.<br>\n- race: 5 categories<br>\nWhite, Asian-Pac-Islander, Amer-Indian-Eskimo, Other, Black.<br>\n- sex: 2 categories<br>\nFemale, Male.<br>\n- native-country: 41 categories<br>\n United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&Tobago, Peru, Hong, Holand-Netherlands.\n\n### Traget value\n- income : 2 categories<br>\n <=50K, >50K ","34edc822":"## About age, capital_gain, box plots is visialaized each categorical value.","a9563794":"### Quick check","cdea4d41":"### 3. Variables selection\u3000important variavles and comparing result before after, by random forest"}}