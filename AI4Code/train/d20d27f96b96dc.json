{"cell_type":{"4b424d08":"code","230f4099":"code","f811ce25":"code","4c7e1fb9":"code","6dcaefdc":"code","877878c1":"code","19b284f9":"code","ad577128":"code","1b8ea0e8":"code","fcff76e1":"code","791887ef":"code","ab789419":"code","f207e7af":"code","8aa4a470":"code","551d7c5d":"code","2acc9655":"code","f488eb56":"markdown","38045ceb":"markdown","d977b817":"markdown","285ea96d":"markdown","8f1c0390":"markdown","a11031ba":"markdown","f0dcfd3b":"markdown","1ae6e167":"markdown","11cb01e3":"markdown","b1537dde":"markdown","c0086c55":"markdown","9892bbf3":"markdown","886a8b86":"markdown","7ab7b1c7":"markdown","a5ed32ba":"markdown","fa65b731":"markdown","92b1f672":"markdown","f9f716f2":"markdown"},"source":{"4b424d08":"# System\nimport os\nfrom os import path\n\n# Numerical Data\nimport numpy as np \nimport pandas as pd\n\n# Tools\nimport itertools\n\n# NLP\nimport re\n\n# Preprocessing\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n\n# Machine Learning Models\nfrom sklearn import svm\nfrom sklearn import metrics \n\n# Evaluation Matrics\nfrom sklearn.metrics import f1_score\n\n# Graph\/ Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Image\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\n\n# Input data\nprint(os.listdir(\"..\/input\"))","230f4099":"df = pd.read_csv(\"..\/input\/wiki_movie_plots_deduped.csv\")","f811ce25":"df.head()","4c7e1fb9":"# df.describe()","6dcaefdc":"def get_params():\n    params = {'legend.fontsize' : 'Large',\n              'figure.figsize'  : figsize,\n              'axes.labelsize'  : 'x-large',\n              'axes.titlesize'  : 'xx-large',\n              'xtick.labelsize' : 'Large',\n              'ytick.labelsize' : 'Large'}\n    return params\n\ndef count_plot(x, y, df=df, figsize=(18, 6)):\n    # sns.set(style=\"ticks\")\n    sns.set(style=\"whitegrid\")\n\n    params = {'legend.fontsize': 'large',\n              'figure.figsize' : figsize,\n              'axes.labelsize' : 'x-large',\n              'axes.titlesize' : 'xx-large',\n              'xtick.labelsize': 'large',\n              'ytick.labelsize': 'large'}\n    plt.rcParams.update(params)\n\n\n    ax = sns.countplot(x=x, y=y, data=df)\n    if y: plt.title(y)\n    else: plt.title(x)\n    plt.xticks(rotation=90)\n\n    plt.show()","877878c1":"# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\n\nfigsize=(18, 30)\nxcol = \"Release Year\"\n\nparams = get_params()\n\nplt.rcParams.update(params)\nplt.tick_params(labelsize=12)\nsns.countplot(y=df[xcol], data=df)\nplt.title(\"Movie Count Per \"+ xcol)\n# plt.xticks(rotation=90)\n# plt.yticks(rotation=90)\nplt.tight_layout()\nplt.show()\n","19b284f9":"# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\n\nfigsize=(18, 10)\nxcol = \"Origin\/Ethnicity\"\n\nparams = get_params()\nplt.tick_params(labelsize=18)\nplt.rcParams.update(params)\nsns.countplot(x=df[xcol], data=df)\nplt.title(\"Movie Count Per \"+ xcol)\n\nplt.xticks(rotation=90)\n# plt.yticks(rotation=90)\n# plt.tight_layout()\nplt.show()\n","ad577128":"# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\n\nfigsize=(20, 8)\nxcol = \"Origin\/Ethnicity\"\nparams = get_params()\nplt.rcParams.update(params)\norg = df[xcol].unique()\nl = len(df[xcol])\ncon = []\nfor country in df[xcol].unique():\n    c = df[df[xcol]==country]\n    if len(c)>l*0.03:\n        x = df[df[xcol]==country][\"Release Year\"].value_counts()\n        sns.lineplot(x.index, x.values)\n        con.append(country)\nplt.legend(con)\nplt.title(\"Movie Count Per \"+ xcol)\n# plt.tight_layout()\nplt.show()","1b8ea0e8":"xcol = \"Director\"\ndf1 = pd.DataFrame({xcol:df[xcol]})\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"Directors: \", \"\", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"Director: \", \"\", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"[\\(\\)]\", \"\", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\" & \", \", \", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\" and \", \", \", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"\/\", \", \", x))\n\nl = list()\nfor index, row in df1.iterrows():\n    t = row[xcol].split(\", \")\n    l.extend([i for i in t if len(i.split(\" \"))>1])\n\ndf1 = pd.DataFrame({xcol:l})\n\nc = df1[xcol].value_counts()\ndf1 = pd.DataFrame({xcol:c.index, \"Count\":c.values})\ndf1 = df1[df1[xcol]!=\"Unknown\"]","fcff76e1":"n_show = 30\ndf2 = df1[df1[\"Count\"]>n_show]\n# print(len(df2))\n\n# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\n\nfigsize=(18, 30)\nxcol = xcol\n\nparams = get_params()\n\nplt.rcParams.update(params)\nsns.barplot(x=df2[\"Count\"], y=df2[xcol])\nplt.title(\"Movie Count Per \"+ xcol)\n# plt.xticks(rotation=90)\n# plt.yticks(rotation=90)\n\nplt.show()\n","791887ef":"xcol = \"Cast\"\ndf1 = pd.DataFrame({xcol:df[xcol]})\ndf1[xcol] = df1[xcol].fillna(\"None\")\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"[\\(\\)]\", \"\", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\" & \", \", \", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\" and \", \", \", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"\/\", \", \", x))\n\nl = list()\nfor index, row in df1.iterrows():\n    t = row[xcol].split(\", \")\n    l.extend([i for i in t if len(i.split(\" \"))>1])\n\ndf1 = pd.DataFrame({xcol:l})\n\nc = df1[xcol].value_counts()\ndf1 = pd.DataFrame({xcol:c.index, \"Count\":c.values})\ndf1 = df1[df1[xcol]!=\"None\"]","ab789419":"n_show = 50\ndf2 = df1[df1[\"Count\"]>n_show]\n# print(len(df2))\n\n# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\n\nfigsize=(18, 30)\nxcol = xcol\n\nparams = get_params()\n\nplt.rcParams.update(params)\nsns.barplot(x=df2[\"Count\"], y=df2[xcol])\nplt.title(\"Movie Count Per \"+ xcol)\n# plt.xticks(rotation=90)\n# plt.yticks(rotation=90)\n# plt.tight_layout()\nplt.show()\n","f207e7af":"xcol = \"Genre\"\ndf1 = pd.DataFrame({xcol:df[xcol]})\ndf1[xcol] = df1[xcol].fillna(\"None\")\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"[\\(\\)]\", \"\", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\" & \", \", \", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\" and \", \", \", x))\ndf1[xcol] = df1[xcol].apply(lambda x: re.sub(\"\/\", \", \", x))\n\nl = list()\nfor index, row in df1.iterrows():\n    t = row[xcol].split(\", \")\n    l.extend([i.strip() for i in t])\n\ndf1 = pd.DataFrame({xcol:l})\n\nc = df1[xcol].value_counts()\ndf1 = pd.DataFrame({xcol:c.index, \"Count\":c.values})\ndf1 = df1[df1[xcol]!=\"None\"]\ndf1 = df1[df1[xcol]!=\"unknown\"]\ndf1[xcol] = df1[xcol].apply(lambda x: x.capitalize())","8aa4a470":"n_show = 50\ndf2 = df1[df1[\"Count\"]>n_show]\n# print(len(df2))\n\n# sns.set(style=\"ticks\")\nsns.set(style=\"whitegrid\")\n\nfigsize=(25, 28)\nxcol = xcol\n\nparams = get_params()\n\nplt.rcParams.update(params)\nplt.tick_params(labelsize=18)\nsns.barplot(x=df2[\"Count\"], y=df2[xcol])\nplt.title(\"Movie Count Per \"+ xcol)\n# plt.xticks(rotation=90)\n# plt.yticks(rotation=90)\n\nplt.show()\n","551d7c5d":"# !pip install wordcloud","2acc9655":"text = df[\"Plot\"].str.cat(sep='. ')\n\nstopwords = set(STOPWORDS)\n\nwc = WordCloud(max_words=2000, stopwords=stopwords)\n\nwc.generate(text)\n\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.figure()\nplt.show()","f488eb56":"## 2. Read Data","38045ceb":"### 3.3. Showing Movie Count per Country\/Ethnicity\/Origin throughout over the past 100+ years","d977b817":"#### 3.5.1  Showing Movie Count for most frequent 50 Genre","285ea96d":"## 1. Import ","8f1c0390":"### 3.1. Showing Movie Count per Year for over 100 Years","a11031ba":"# Exploratry Data Analysis and Regression Model for  Wikipedia Movie Plots","f0dcfd3b":"### 3.6 Movie Count  per Genre","1ae6e167":"### 2.1. Show Data Stats","11cb01e3":"![](https:\/\/boygeniusreport.files.wordpress.com\/2016\/03\/movies-tiles.jpg?quality=98&strip=all)\n\n<!--\n![](https:\/\/i.ytimg.com\/vi\/KPX39PpS1sc\/maxresdefault.jpg)\n![](http:\/\/4.bp.blogspot.com\/-Tz2h4J4VdPw\/UvezidpNOeI\/AAAAAAAAJck\/oHfz4EHTg7o\/s1600\/2013_movies_wallpaper_by_z_designs-d5u94o3.jpg)\n-->","b1537dde":"## 3. Visualization","c0086c55":"### 3.5  Movie Count  per Cast","9892bbf3":"### 3.6 Word Cloud","886a8b86":"### 3.2. Showing Movie Count per Country\/Origin\/Ethnicity","7ab7b1c7":"#### 3.5.1  Showing Movie Count for most frequent 50 Casts","a5ed32ba":"### 3.4  Movie Count  per Director","fa65b731":"### Credit:\n\n1. http:\/\/4.bp.blogspot.com\/-Tz2h4J4VdPw\/UvezidpNOeI\/AAAAAAAAJck\/oHfz4EHTg7o\/s1600\/2013_movies_wallpaper_by_z_designs-d5u94o3.jpg\n2. https:\/\/i.ytimg.com\/vi\/KPX39PpS1sc\/maxresdefault.jpg\n3. https:\/\/boygeniusreport.files.wordpress.com\/2016\/03\/movies-tiles.jpg?quality=98&strip=all","92b1f672":"#### 3.4.1  Showing Movie Count for 30 Most Frequent Directors","f9f716f2":"### 1.1. Import Library"}}