{"cell_type":{"22f00bb4":"code","165e3274":"code","811de28a":"code","2656df61":"code","a7401422":"code","2ecf74a9":"code","2a688634":"code","01e6f5d6":"code","08f3f9cd":"code","7a23894a":"code","6ab3890a":"code","a87c9956":"code","d39fc4c6":"code","c977ec95":"code","2fd7c6bb":"code","d802fdcb":"code","e03f8370":"code","995e2373":"code","5bd6e371":"code","befcdb46":"markdown"},"source":{"22f00bb4":"import os\nos.chdir('\/kaggle\/')\n!ls\nos.system(\"rm -rf \" + 'vic')\n!ls","165e3274":"import os\nos.chdir('\/kaggle\/')\n!ls\nos.system(\"mkdir \" + 'vic')\nos.system(\"chmod 777 \" + 'vic')\n!ls","811de28a":"os.chdir('\/kaggle\/vic')\n!ls\nos.system(\"mkdir \" + 'train_images')\nos.system(\"chmod 777 \" + 'train_images')\n!ls","2656df61":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    n=0\n    for filename in filenames:\n        if n<5:\n            print(os.path.join(dirname, filename))\n            n+=1\n        else:\n            break","a7401422":"import shutil\nimport glob\nimport pandas as pd\n\nos.chdir('\/kaggle\/input\/cassava-leaf-disease-classification')\n\npred = pd.read_csv('train.csv')","2ecf74a9":"ipath = r\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\"\nopath = r\"\/kaggle\/vic\/train_images\"\n\n\n# get the class label limit\nclass_limit = 5\n\n# variables to keep track\nlabel = 0\n\n# class names\nclass_names = [\"0\", \"1\", \"2\", \"3\",\"4\"]\n\n# change the current working directory\nos.chdir(opath)\n\n# creating the directories as required.\nfor x in range(1, class_limit+1):\n    os.system(\"mkdir \" + class_names[label])\n    label += 1\n\n# loop over the images in the dataset    \nos.chdir(ipath)\nfor n in pred['image_id']:\n    try:\n        c=str(pred[pred['image_id']==n].iloc[0,1])\n        shutil.copy(n,opath+\"\/\"+c+\"\/\"+n)\n    except FileNotFoundError:\n        pass","2a688634":"os.chdir('\/kaggle\/vic')\n!ls\nos.system(\"mkdir \" + 'eval_images')\nos.system(\"chmod 777 \" + 'eval_images')\n!ls\nos.chdir('\/kaggle\/vic\/train_images')\n!ls","01e6f5d6":"os.chdir('\/kaggle\/vic\/train_images\/0')\n!ls\npath = r\"\/kaggle\/vic\/train_images\"","08f3f9cd":"eval_path=r\"\/kaggle\/vic\/eval_images\"\nos.chdir(eval_path)\nlabel=0\nfor x in range(1, class_limit+1):\n    os.system(\"mkdir \" + class_names[label])\n    label += 1\nfor i in class_names:\n    p, dirs, files = next(os.walk(path+\"\/\"+i+\"\/\"))\n    arr = os.listdir(path+\"\/\"+i+\"\/\")\n    file_count = len(files)\n    f_2_move=int(file_count*0.2)\n    initial=0\n    while True:\n        os.chdir(path+\"\/\"+i+\"\/\")\n        shutil.move(arr[initial],eval_path+\"\/\"+i+\"\/\"+arr[initial])\n        initial+=1\n        if initial >f_2_move:\n            break","7a23894a":"os.chdir('\/kaggle\/vic\/eval_images\/0')\n!ls","6ab3890a":"import keras\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D,Dropout,Dense,Flatten,BatchNormalization\n\nimport warnings\nwarnings.filterwarnings('ignore')","a87c9956":"model = Sequential()  \nmodel.add(Conv2D(16, (3, 3), input_shape = (64, 64, 3),kernel_initializer='normal', activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(5,activation='softmax'))\n\nada = keras.optimizers.Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)\nsgd = keras.optimizers.SGD(lr=0.05, decay=1e-6, momentum=0.9, nesterov=True)\n#model.compile(loss=\"mean_squared_error\", optimizer=sgd, metrics=['accuracy'])\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=ada, metrics=['accuracy'])","d39fc4c6":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(shear_range = 0.2,\n                                   channel_shift_range = 0.2,\n                                   zoom_range = 0.2,\n                                   rotation_range=10,\n                                   validation_split=0.9,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(validation_split=0.9)","c977ec95":"training_set = train_datagen.flow_from_directory('\/kaggle\/vic\/train_images',\n                                                 target_size = (64, 64),\n                                                 batch_size = 64,\n                                                 shuffle=True,\n                                                 seed=101,\n                                                 #save_to_dir='Augumented\/Train',\n                                                 #save_format='jpeg',\n                                                 interpolation='nearest',\n                                                 class_mode = 'categorical')\n\ntest_set = test_datagen.flow_from_directory('\/kaggle\/vic\/eval_images',\n                                            target_size = (64, 64),\n                                            batch_size = 64,\n                                            shuffle=True,\n                                            seed=101,\n                                            #save_to_dir='Augumented\/Test',\n                                            #save_format='jpeg',\n                                            interpolation='nearest',\n                                            class_mode = 'categorical')\n","2fd7c6bb":"os.chdir('\/kaggle\/vic')\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint\nes = EarlyStopping(monitor='val_accuracy', mode='max', patience=20)\nmc = ModelCheckpoint('best_model.h5', monitor='val_accuracy', mode='max', save_best_only=True)","d802fdcb":"os.chdir('\/kaggle\/vic')\nmodel.fit_generator(training_set,\n                    steps_per_epoch = int(17115\/\/64),\n                    epochs = 100,\n                    validation_data = test_set,\n                    validation_steps = int(4282\/\/64),\n                    class_weight={0:1,1:0.5,2:0.5,3:0.1,4:0.5},\n                    callbacks=[es,mc])","e03f8370":"from keras.models import load_model\nsaved_model = load_model('best_model.h5')","995e2373":"import numpy as np\nimport pandas as pd\nfrom keras.preprocessing import image\ntest_image = image.load_img('\/kaggle\/input\/cassava-leaf-disease-classification\/test_images\/2216849948.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = saved_model.predict(test_image)\nresult","5bd6e371":"data = [['2216849948.jpg', \"3\"]] \n  \n# Create the pandas DataFrame \nsubmission = pd.DataFrame(data, columns = ['image_id', 'label']) \nos.chdir('\/kaggle\/working\/')\nsubmission.to_csv('submission.csv', index=False)","befcdb46":"<a href=\"https:\/\/colab.research.google.com\/github\/VigneshwaraChinnadurai\/Competitions\/blob\/master\/Cassava%20leaf%20disease%20classification\/classifier.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>"}}