{"cell_type":{"67e404d5":"code","d9e0889e":"code","afc4bd21":"code","d0ff49d3":"code","00d6c0f9":"code","323a1694":"code","a16cdeb9":"code","ff880969":"code","d989c5d2":"code","83f4736e":"code","85885865":"code","a0d76481":"code","e7901791":"code","0159b226":"code","c50cf2de":"code","ec6df0a7":"code","df9aeacd":"code","04842c2c":"code","a201c540":"code","a4fdf7ac":"code","59aedd37":"code","0e7e7499":"code","46e62036":"code","827baee7":"code","be34876f":"code","13bf8ead":"code","1773fe9f":"markdown","a49e624d":"markdown","82ff2728":"markdown","6895a5c3":"markdown","ae7ba062":"markdown","694a6ba3":"markdown","77c8f92f":"markdown","8b4ea302":"markdown","9f1a33f0":"markdown","82cf2afb":"markdown"},"source":{"67e404d5":"#import required libraries\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","d9e0889e":"df_train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ndf_train.head()\n#df_test.head()","afc4bd21":"df_test.head()","d0ff49d3":"df_train_pixels = df_train.iloc[:,1:] #slice target column out i.e. 1st column and keep only the pixels\ndf_target = df_train.iloc[:,0]\ndf_train_pixels.head()","00d6c0f9":"#df_target","323a1694":"#pixels of 1st image\nimage_1 = df_train_pixels.values[0].reshape(28,28)\nplt.imshow(image_1, cmap='gray')\n","a16cdeb9":"#pixels of 2nd image\nimage_1 = df_train_pixels.values[1].reshape(28,28)\nplt.imshow(image_1, cmap='gray')","ff880969":"plt.figure(figsize=(20,15))\nfor index, (image, label) in enumerate(zip(df_train_pixels[0:10], \n                                           df_target[0:10])):\n    plt.subplot(3, 5, index + 1)\n    plt.imshow(np.reshape(df_train_pixels.values[index], (28,28)), cmap=plt.cm.gray)\n    plt.title('Label: %i\\n' % label, fontsize = 20);","d989c5d2":"#import sklearn manifold library\nfrom sklearn import manifold","83f4736e":"df_train_pixels[0:10].to_numpy()","85885865":"tsne = manifold.TSNE(n_components=2, random_state=1)\ntransf_data = tsne.fit_transform(df_train_pixels[:10000].to_numpy())","a0d76481":"# The transformed data is of 10000 data points and 2 t-SNE components\ntransf_data.shape","e7901791":"#Lets convert this numpy array to dataframe\ndf_tsne = pd.DataFrame(np.column_stack((transf_data, df_target[:10000])),\n                      columns = [\"X\", \"y\", \"label\"])\ndf_tsne.head()","0159b226":"# Do we need to change is to int\ndf_tsne['label'] = df_tsne.label.astype(int) ","c50cf2de":"fig= plt.figure(figsize=(12,10))\nsns.scatterplot(data=df_tsne, x=\"X\", y=\"y\", hue=\"label\", palette=\"deep\")","ec6df0a7":"df_train = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_train.csv\")\ndf_test = pd.read_csv(\"..\/input\/fashionmnist\/fashion-mnist_test.csv\")\ndf_train.head()","df9aeacd":"df_train_pixels = df_train.iloc[:,1:] #slice target column out i.e. 1st column and keep only the pixels\ndf_target = df_train.iloc[:,0]\ndf_train_pixels.head()","04842c2c":"#pixels of 1st image\nimage_1 = df_train_pixels.values[0].reshape(28,28)\nplt.imshow(image_1, cmap='gray')","a201c540":"plt.figure(figsize=(20,15))\nfor index, (image, label) in enumerate(zip(df_train_pixels[0:10], \n                                           df_target[0:10])):\n    plt.subplot(3, 5, index + 1)\n    plt.imshow(np.reshape(df_train_pixels.values[index], (28,28)), cmap=plt.cm.gray)\n    plt.title('Label: %i\\n' % label, fontsize = 20);","a4fdf7ac":"#import sklearn manifold library\nfrom sklearn import manifold","59aedd37":"df_train_pixels[0:10].to_numpy()","0e7e7499":"tsne = manifold.TSNE(n_components=2, random_state=1)\ntransf_data = tsne.fit_transform(df_train_pixels[:10000].to_numpy())","46e62036":"# The transformed data is of 10000 data points and 2 t-SNE components\ntransf_data.shape","827baee7":"#Lets convert this numpy array to dataframe\ndf_tsne = pd.DataFrame(np.column_stack((transf_data, df_target[:10000])),\n                      columns = [\"X\", \"y\", \"label\"])\ndf_tsne.head()","be34876f":"# Do we need to change is to int\ndf_tsne['label'] = df_tsne.label.astype(int) ","13bf8ead":"fig= plt.figure(figsize=(12,10))\nsns.scatterplot(data=df_tsne, x=\"X\", y=\"y\", hue=\"label\", palette=\"deep\")","1773fe9f":"The results from both data sets are interesting. MNIST data shows clear clusters for all the 10 hand written digits. Nevertheless, tSNE reduction in dimension only captured 7 clusters out of 10 fashion items. Therefore, it can be concluded that using t-SNE does give competitive results but it accuracy depends on the underlining data. ","a49e624d":"**Lets build a facet using matplotlib comprising of top 10 images.** ","82ff2728":"*Loading trainig and test sets*","6895a5c3":"Note: Though, training dataset contains column `label` with ground thruth values, and it can be used to build `supervised` classification model. However, we aim to build a `unsupervised` learning model with help of dimensionality reduction techniques i.e., PCA and t-SNE.","ae7ba062":"Take single row pixel values (784) and reshape it to 28 x 28 2D matrix where each cell has respective pixel values.","694a6ba3":"Let's visulaize some images","77c8f92f":"Reference:\n1. Thakur, Abhishek. Approaching (almost) any machine learning problem. Abhishek Thakur, 2020.","8b4ea302":"## Introduction\n\nThis notebook double checks validtity of un-supervised machine learning model using t-SNE dimentionality reduction technique to show meaningful clusters. \nIn this repsect, thisnotbook uses two popular datasets:\n1. MNIST-digit: 0-9\n2. Fashion MNIST\n\nBoth datasets use pixel of image in csv.\n\n### About Data\nThe MNIST database of handwritten digits, has a training set of 60000 examples, and a test set of 10,000 examples. The training and test dataset rows contain pixels of 28 x 28 handwritten digits flattened into single row i.e. each row has 784 data pixel points.","9f1a33f0":"## Fashion MNIST:\n\nAbove results show, one gets good unsupervised result with t-SNE features for MNIST data set. It would be interesting to double check if t-SNE fails to give meanigful cluster with another data set e.g., Fashin-MNIST. Here, we will be replicating above steps to only double check t-SNE validaity. ","82cf2afb":"## What is in this notebook?\n\nThough, the trainig dataset contains `labels` for the digit representing each data point, this kernel aims to build a un-supervised learning algorithm. \n\nWe use two decomposition techniques to build clusters and plot it using matplotlib and seaborn libraries. "}}