{"cell_type":{"49b75400":"code","4ca7bc1d":"code","150d2e11":"code","046d9101":"code","1d257d3a":"code","7cc772a8":"code","9a3f05db":"code","88c9ebbc":"code","24f1cff2":"code","b952fb44":"code","50cb9376":"code","1772cddf":"code","b8a23e40":"code","8fb03607":"code","fff120a3":"code","1463b2ab":"code","a27793a5":"code","fe2e0551":"code","48c29381":"code","dca627c1":"code","43e061ca":"code","887c96e3":"code","04561aa1":"code","3e231a97":"code","7971ece9":"code","09de3841":"code","0a383047":"code","d80c3591":"code","ac4e1d2f":"code","b5c2e640":"code","830b12dc":"code","a70ccdb7":"code","84ccbd80":"code","1ff6bb10":"code","874fe45b":"code","8be1d215":"code","2ed7ec84":"code","5d5fe4c0":"code","e031b647":"code","aebccdcb":"code","aeede383":"code","1120d237":"code","fa9e09a0":"code","d176a57e":"code","d64798ee":"code","0ba6d1a4":"code","8ac518a3":"code","281e8bca":"code","4ae9b219":"code","bc99eee1":"code","1f6e2557":"code","1f1d7a88":"code","c3950c99":"code","3b364fbb":"code","3743b0b8":"code","41e8fd40":"code","cef28b2f":"code","a04cbc3e":"code","297e70bf":"code","ba814d88":"code","db0b0388":"markdown","03df5482":"markdown","761bb130":"markdown","354d0bfe":"markdown","714c193f":"markdown","f965116a":"markdown","0c1bbb5c":"markdown","b473200a":"markdown","7d5300ba":"markdown","6f4cde9c":"markdown","94445203":"markdown","65149d31":"markdown","3cee780a":"markdown","37e2648f":"markdown","28f0044e":"markdown","7e84e473":"markdown","a9ef84ef":"markdown","b395a63b":"markdown","8ae68c75":"markdown","5270abb3":"markdown"},"source":{"49b75400":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport plotly as py\nimport plotly.graph_objs as go\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\ndata_path = \"..\/input\/\"\ndf = pd.read_csv(data_path+\"SolarPrediction.csv\")\ndf.head()","4ca7bc1d":"data=pd.read_csv('..\/input\/SolarPrediction.csv')","150d2e11":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndata['Radiation'].plot()","046d9101":"df['Radiation'].hist()","1d257d3a":"corrmat = df.corr()\nsns.heatmap(corrmat, vmax=.8, square=True)","7cc772a8":"g = sns.jointplot(x=\"Radiation\", y=\"Temperature\", data=df)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Temp vs. Radiation')","9a3f05db":"g = sns.jointplot(x=\"Radiation\", y=\"Humidity\", data=df)\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Temp vs. Humidity')","88c9ebbc":"#drop low radiation values\ndf = df[df['Radiation'] >= 10]","24f1cff2":"#Covert time to_datetime\n#Add column 'hour'\ndf['Time_conv'] =  pd.to_datetime(df['Time'], format='%H:%M:%S')\ndf['hour'] = pd.to_datetime(df['Time_conv'], format='%H:%M:%S').dt.hour\n\n#Add column 'month'\ndf['month'] = pd.to_datetime(df['UNIXTime'].astype(int), unit='s').dt.month\n\n#Add column 'year'\ndf['year'] = pd.to_datetime(df['UNIXTime'].astype(int), unit='s').dt.year\n\n#Duration of Day\ndf['total_time'] = pd.to_datetime(df['TimeSunSet'], format='%H:%M:%S').dt.hour - pd.to_datetime(df['TimeSunRise'], format='%H:%M:%S').dt.hour\ndf.head()","b952fb44":"ax = plt.axes()\nsns.barplot(x=\"hour\", y='Radiation', data=df, palette=\"BuPu\", ax = ax)\nax.set_title('Mean Radiation by Hour')\nplt.show()","50cb9376":"ax = plt.axes()\nsns.barplot(x=\"month\", y='Radiation', data=df, palette=\"BuPu\", ax = ax, order=[9,10,11,12,1])\nax.set_title('Mean Radiation by Month')\nplt.show()","1772cddf":"ax = plt.axes()\nsns.barplot(x=\"hour\", y='Humidity', data=df, palette=(\"coolwarm\"), ax = ax)\nax.set_title('Humidity by Hour')\nplt.show()","b8a23e40":"ax = plt.axes()\nsns.barplot(x=\"total_time\", y='Radiation', data=df, palette=\"BuPu\", ax = ax)\nax.set_title('Radiation by Total Daylight Hours')\nplt.show()","8fb03607":"from sklearn.cluster import KMeans","fff120a3":"df = pd.read_csv(data_path+\"SolarPrediction.csv\")\nX1 = df[['Temperature' , 'Humidity']].iloc[: , :].values\ninertia = []\nfor n in range(1 , 11):\n    algorithm = (KMeans(n_clusters = n ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\n    algorithm.fit(X1)\n    inertia.append(algorithm.inertia_)","1463b2ab":"plt.figure(1 , figsize = (15 ,6))\nplt.plot(np.arange(1 , 11) , inertia , 'o')\nplt.plot(np.arange(1 , 11) , inertia , '-' , alpha = 0.5)\nplt.xlabel('Number of Clusters') , plt.ylabel('Inertia')\nplt.show()","a27793a5":"algorithm = (KMeans(n_clusters = 4 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') )\nalgorithm.fit(X1)\nlabels = algorithm.labels_\ncentroids = algorithm.cluster_centers_","fe2e0551":"h = 0.02\nx_min, x_max = X1[:, 0].min() - 1, X1[:, 0].max() + 1\ny_min, y_max = X1[:, 1].min() - 1, X1[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = algorithm.predict(np.c_[xx.ravel(), yy.ravel()]) ","48c29381":"plt.figure(1 , figsize = (15 , 7) )\nplt.clf()\nZ = Z.reshape(xx.shape)\nplt.imshow(Z , interpolation='nearest', \n           extent=(xx.min(), xx.max(), yy.min(), yy.max()),\n           cmap = plt.cm.Pastel2, aspect = 'auto', origin='lower')\n\nplt.scatter( x = 'Temperature' ,y = 'Humidity' , data = df , c = labels , \n            s = 200 )\nplt.scatter(x = centroids[: , 0] , y =  centroids[: , 1] , s = 300 , c = 'red' , alpha = 0.5)\nplt.ylabel('Humidity') , plt.xlabel('Temperature')\nplt.show()","dca627c1":"y = df['Radiation']\nX = df.drop(['Radiation', 'Data', 'Time', 'TimeSunRise', 'TimeSunSet'], axis=1)","43e061ca":"scaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)","887c96e3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train,y_train)","04561aa1":"print('Coefficients: \\n', lm.coef_)","3e231a97":"lpredictions = lm.predict( X_test)\nprint(lpredictions)","7971ece9":"plt.scatter(y_test,lpredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","09de3841":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, lpredictions))\nprint('MSE:', metrics.mean_squared_error(y_test, lpredictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lpredictions)))","0a383047":"coeffecients = pd.DataFrame(lm.coef_,X.columns)\ncoeffecients.columns = ['Coeffecient']\ncoeffecients","d80c3591":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn.linear_model import RidgeCV\nridge = RidgeCV(cv=5)\nridge.fit(X_train,y_train)","ac4e1d2f":"print('Coefficients: \\n', ridge.coef_)","b5c2e640":"rpredictions = ridge.predict( X_test)\nprint(rpredictions)","830b12dc":"plt.scatter(y_test,rpredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","a70ccdb7":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, rpredictions))\nprint('MSE:', metrics.mean_squared_error(y_test, rpredictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, rpredictions)))","84ccbd80":"coeffecients = pd.DataFrame(ridge.coef_,X.columns)\ncoeffecients.columns = ['Coeffecient']\ncoeffecients","1ff6bb10":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn import linear_model\nsgd = linear_model.SGDRegressor(max_iter=1000)\nsgd.fit(X_train,y_train)","874fe45b":"print('Coefficients: \\n', sgd.coef_)","8be1d215":"spredictions = sgd.predict(X_test)\nprint(spredictions)","2ed7ec84":"plt.scatter(y_test,spredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","5d5fe4c0":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, spredictions))\nprint('MSE:', metrics.mean_squared_error(y_test, spredictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, spredictions)))","e031b647":"coeffecients = pd.DataFrame(sgd.coef_,X.columns)\ncoeffecients.columns = ['Coeffecient']\ncoeffecients","aebccdcb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\nfrom sklearn.ensemble import AdaBoostRegressor\nabreg = AdaBoostRegressor(random_state=0, n_estimators=100)\nabreg.fit(X_train,y_train)","aeede383":"abpredictions = abreg.predict( X_test)\nprint(abpredictions)","1120d237":"plt.scatter(y_test,abpredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","fa9e09a0":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, abpredictions))\nprint('MSE:', metrics.mean_squared_error(y_test, abpredictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, abpredictions)))","d176a57e":"final_data=data.drop(['UNIXTime','Data','Time','TimeSunRise','TimeSunSet'],axis=1)","d64798ee":"final_y=final_data.pop('Radiation')","0ba6d1a4":"final_x=final_data","8ac518a3":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(final_x, final_y, test_size=0.33, random_state=42)\nimport xgboost as xgb","281e8bca":"xgdmat=xgb.DMatrix(X_train,y_train)\nour_params={'eta':0.1,'seed':0,'subsample':0.8,'colsample_bytree':0.8,'objective':'reg:linear','max_depth':3,'min_child_weight':1}\nfinal_gb=xgb.train(our_params,xgdmat)\ntesdmat=xgb.DMatrix(X_test)\nxpredictions=final_gb.predict(tesdmat)\nprint(xpredictions)","4ae9b219":"plt.scatter(y_test,xpredictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')","bc99eee1":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, xpredictions))\nprint('MSE:', metrics.mean_squared_error(y_test, xpredictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, xpredictions)))","1f6e2557":"Q1 = y.quantile(0.25)\nQ3 = y.quantile(0.75)\nIQR = Q3 - Q1\nOutliers = (y < (Q1 - 1.5 * IQR)) |(y > (Q3 + 1.5 * IQR))\n","1f1d7a88":"from fbprophet import Prophet","c3950c99":"df = pd.DataFrame(data)","3b364fbb":"date_rad = df[['Data', 'Radiation']] ","3743b0b8":"date_rad.plot(x='Data', y='Radiation', kind=\"line\", rot=45)\n","41e8fd40":"date_rad = date_rad.rename(columns={'Data':'ds', 'Radiation':'y'})","cef28b2f":"p = Prophet()\np.fit(date_rad)","a04cbc3e":"future = p.make_future_dataframe(periods=1825)\nforecast = p.predict(future)","297e70bf":"forecast.tail()","ba814d88":"forecastplot = p.plot_components(forecast)","db0b0388":"# Data Visualization","03df5482":"# Investigate Existing Correlations","761bb130":"# Forecast","354d0bfe":"# Cluster Analysis","714c193f":"According to our forecast the radiation level is only going to increase in the nearest future.\n\n\nFeel free to point out the mistakes you`ve found in this kernel.\n\nAny feedback is highly appreciated.\n\nThanks for your time.","f965116a":"# Feature Engineering","0c1bbb5c":"No outliers were found in the dataset which allows us to pick the most accurate model by comparing the mean absolute error values.\n\nAs we can see the XGBoost model seems to have the lowest rate of mean absolute error (MAE) which leads us to a conclusion that the XGBoost model is the most accurate in this kenrel.","b473200a":"**Using SGDRegressor**","7d5300ba":"# Checking Relationship between Radiation and Temp","6f4cde9c":"> **Using AdaBoostRegressor**","94445203":"**Let`s check if there are any outliers in our dataset**","65149d31":"This kernel includes solar radiation prediction using 5 different regression models.\nAlso added a solar radiation level forecast.","3cee780a":"**Using RidgeCV**","37e2648f":"**Using LinearRegression**","28f0044e":"## Solar radiation prediction","7e84e473":"Lets try and make a forecast about the solar radiation level in future.","a9ef84ef":"Special thanks to:\n* https:\/\/www.kaggle.com\/sarahvch\/investigating-solar-radiation\n* https:\/\/www.kaggle.com\/fashionlee\/using-xgboost-for-regression\n* https:\/\/www.kaggle.com\/gilwassermann\/solar-radiation-prediction-nb","b395a63b":"**Using XGBoost**","8ae68c75":"# Prediction","5270abb3":"# Import Data"}}