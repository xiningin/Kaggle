{"cell_type":{"3b5471c0":"code","7bb0d70f":"code","f7e3f84e":"code","e3af7d35":"code","3a481db4":"code","1c42478b":"code","f3034d7c":"code","5bb4febe":"code","0e0c58f2":"code","07f88135":"code","82a90857":"markdown","033950c0":"markdown","a3ae38dc":"markdown","a15815be":"markdown","8830244c":"markdown","11c982df":"markdown","65032618":"markdown"},"source":{"3b5471c0":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\n\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","7bb0d70f":"image_dir = Path('..\/input\/basicshapes\/shapes\/shapes')","f7e3f84e":"filepaths = list(image_dir.glob(r'**\/*.png'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\nimage_df = pd.concat([filepaths, labels], axis=1)\n\ntrain_df, test_df = train_test_split(image_df, train_size=0.7, shuffle=True, random_state=1)","e3af7d35":"train_df","3a481db4":"test_df","1c42478b":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)","f3034d7c":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(28, 28),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(28, 28),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\n\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(28, 28),\n    color_mode='grayscale',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","5bb4febe":"inputs = tf.keras.Input(shape=(28, 28, 1))\nx = tf.keras.layers.Conv2D(filters=6, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPooling2D()(x)\nx = tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPooling2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(3, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.ModelCheckpoint('.\/model.h5', save_best_only=True, save_weights_only=True)\n    ]\n)","0e0c58f2":"model.load_weights('.\/model.h5')","07f88135":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Loss: {:.4f}\".format(results[0]))\nprint(\"Accuracy: {:.2f}%\".format(results[1] * 100))","82a90857":"# Training","033950c0":"# Creating File DataFrame","a3ae38dc":"# Loading Image Data","a15815be":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/XNlxBipm_Kw","8830244c":"# Getting Started","11c982df":"# Results","65032618":"# Task for Today  \n\n***\n\n## Shape Image Classification  \n\nGiven *images of shapes*, let's try to predict which **shape** is present in a given image.\n\nWe will use a TensorFlow\/Keras convolutional neural network to make our predictions."}}