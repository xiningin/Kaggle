{"cell_type":{"6183ae93":"code","5c6fa089":"code","1c8ba8f6":"code","35023b01":"code","55f3006b":"code","41c590b5":"code","bf4e9e3d":"code","61dd2acf":"code","d8bb757c":"code","0f6249d5":"code","2fcd5272":"code","d3f64d00":"code","e2f91637":"code","5825ff6e":"code","83de59c8":"code","e4cffe99":"code","acc3aa46":"code","ff107545":"code","4ac1d136":"code","eb2dacf4":"code","0e95d74b":"code","d8e36ce4":"code","29412409":"code","71c77134":"code","ecc3b95d":"code","3d68da7b":"code","a0974b03":"code","550a6019":"code","9a2ddd34":"code","b63846d8":"code","26cab096":"code","0fcf1b89":"code","ba758c18":"code","34756a05":"code","1b447bf1":"code","86d1845e":"code","bb3fbb68":"code","b480a52d":"code","39b38152":"code","61594b44":"code","397b9643":"code","7218e675":"code","6659da87":"code","b4298ce1":"code","6dc6aecc":"code","c74acfea":"code","647b1b02":"code","cefead6d":"code","900e8de6":"code","a8a56794":"code","4df60cd2":"code","732a0b3b":"code","c162be9e":"code","d9c0f708":"code","7ea6a66e":"code","1ee7d87d":"code","62e75a24":"code","dd3a3c5e":"code","d940a8f8":"code","dbd8e066":"code","38945546":"code","a1009ce3":"code","e29f4b18":"code","e85eb890":"code","2d878a5a":"code","25165223":"code","0a2be4dc":"code","d5a7a5c5":"code","ce5d6d8e":"code","62b44243":"code","16802b72":"code","a9532b31":"code","0f01ec4d":"code","2d56a306":"code","d0657ab1":"code","63949b10":"code","038fe464":"code","149c3c86":"code","54223fde":"code","c877661b":"code","2e3377d7":"code","03e3200b":"code","cf09dc24":"code","4667acfb":"code","660f090b":"code","fc29b947":"code","fa799aa8":"code","16401ea2":"code","01613b4d":"code","bf6e651e":"code","73dfca85":"code","3e1a5008":"markdown"},"source":{"6183ae93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c6fa089":"import matplotlib.pyplot as plt","1c8ba8f6":"data=pd.read_csv('..\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","35023b01":"data.head()","55f3006b":"Age=data['Age'].values\ncage=[]\nfor i in Age:\n    if i<=16:\n        cage.append('Child')\n    elif i<=60:\n        cage.append('Adult')\n    else:\n        cage.append('Old Person')","41c590b5":"data['Age_Category']=cage","bf4e9e3d":"data.head()","61dd2acf":"# WE are gonna find out the survival ratio for different Age Groups ","d8bb757c":"dic={}\nfor i in ['Child','Adult','Old Person']:\n    dic[i]=len(data[(data['Age_Category']==i) & (data['Survived']==1)].values)\/len((data[data['Age_Category']==i] ).values)","0f6249d5":"dic","2fcd5272":"plt.bar(dic.keys(),dic.values())","d3f64d00":"# Checking the survival rate of male to female","e2f91637":"dic={}\nfor i in ['M','F']:\n    dic[i]=len(data[(data['Sex']==i) & (data['Survived']==1)].values)\/len((data[data['Sex']==i] ).values)","5825ff6e":"plt.bar(dic.keys(),dic.values())","83de59c8":"dic={}\nfor i in set(list(data['Category'].values)):\n    dic[i]=len(data[(data['Category']==i) & (data['Survived']==1)].values)\/len((data[data['Category']==i] ).values)","e4cffe99":"dic","acc3aa46":"plt.bar(dic.keys(),dic.values())","ff107545":"dic={}\nfor i in set(list(data['Country'].values)):\n    dic[i]=len(data[(data['Country']==i) & (data['Survived']==1)].values)\/len((data[data['Country']==i] ).values)","4ac1d136":"plt.figure(figsize=(20,10))\nplt.bar(dic.keys(),dic.values())","eb2dacf4":"dic={}\nfor i in set(list(data['Country'].values)):\n    t=[]\n    for j in set(list(data['Age_Category'].values)):\n        t.append(len(data[(data['Country']==i) & (data['Survived']==1) & (data['Age_Category']==j)].values)\/len((data[data['Country']==i] ).values))\n    dic[i]=t\n        \n        ","0e95d74b":"k=dic.values()","d8e36ce4":"k=list(k)","29412409":"k=np.array(k)","71c77134":"bars1=k[:,0]","ecc3b95d":"bars2=k[:,1]","3d68da7b":"bars3=k[:,2]","a0974b03":"bars1","550a6019":"\nfrom matplotlib import rc\n\n \n# y-axis in bold\nrc('font', weight='bold')\n \n\n \n# Heights of bars1 + bars2\nbars = np.add(bars1, bars2).tolist()\n \n# The position of the bars on the x-axis\nr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n \n# Names of group and bar width\nnames = set(list(data['Country'].values))\nbarWidth = 1\nplt.figure(figsize=(20,10))\n# Create brown bars\nplt.bar(r, bars1, color='pink', edgecolor='white', width=barWidth,label='Adults')\n# Create green bars (middle), on top of the firs ones\nplt.bar(r, bars2, bottom=bars1, color='red', edgecolor='white', width=barWidth)\n# Create green bars (top)\nplt.bar(r, bars3, bottom=bars, color='blue', edgecolor='white', width=barWidth)\n \n# Custom X axis\nplt.xticks(r, names, fontweight='bold')\nplt.xlabel(\"group\")\n\n# Show graphic\nplt.show()\n","9a2ddd34":"# We can see that the survival rate of old and children was very low in most of the countries except the norway where i suppose they were given preference instead of\n# the adults","b63846d8":"# now let's try to make a new family column","26cab096":"last=data['Lastname'].values","0fcf1b89":"len(last)-len(set(last))","ba758c18":"print(len(last))","34756a05":"# So from this we know that there are families in the data","1b447bf1":"# Lets make a column tellin if they have any family or not","86d1845e":"df=pd.DataFrame(data)","bb3fbb68":"lastnamedic=df.groupby(['Lastname']).groups","b480a52d":"df","39b38152":"# Showing an example for the family most possibly\ndf[df['Lastname']=='ASTROM']","61594b44":"chit=[]\nfor i in data.Lastname:\n    if len(lastnamedic[i])>1:\n        chit.append(1)\n    else:\n        chit.append(0)","397b9643":"# Here 0 means that the person had no family on the ship and 1 means that the person had a family on the ship","7218e675":"data['Family']=chit","6659da87":"data.head()","b4298ce1":"#Now lets find out the survival rate of the family if there is","6dc6aecc":"dic={}\nfor i in [1,0]:\n    dic[i]=len(data[(data['Family']==i) & (data['Survived']==1)].values)\/len((data[data['Family']==i] ).values)","c74acfea":"plt.bar(dic.keys(),dic.values())","647b1b02":"# Now lets make it stacked with the class :)","cefead6d":"dic={}\nfor i in [0,1]:\n    t=[]\n    for j in set(list(data['Category'].values)):\n        t.append(len(data[(data['Family']==i) & (data['Survived']==1) & (data['Category']==j)].values)\/len((data[data['Family']==i] ).values))\n    dic[i]=t","900e8de6":"k=dic.values()","a8a56794":"k=list(k)","4df60cd2":"k=np.array(k)","732a0b3b":"k","c162be9e":"bars1=k[:,0]","d9c0f708":"bars2=k[:,1]","7ea6a66e":"# y-axis in bold\nrc('font', weight='bold')\n \n\n \n# Heights of bars1 + bars2\nbars = np.add(bars1, bars2).tolist()\n \n# The position of the bars on the x-axis\nr = [0,1]\n \n# Names of group and bar width\nnames = ['No Family On Board','Family On Board']\nbarWidth = 1\nplt.figure(figsize=(20,10))\n# Create brown bars\nplt.bar(r, bars1, color='pink', edgecolor='white', width=barWidth)\n# Create green bars (middle), on top of the firs ones\nplt.bar(r, bars2, bottom=bars1, color='red', edgecolor='white', width=barWidth)\n# Create green bars (top)\n \n# Custom X axis\nplt.xticks(r, names, fontweight='bold')\nplt.xlabel(\"group\")\n\n# Show graphic\nplt.show()","1ee7d87d":"# here pink means that they were in the Crew ccategory and the red means that the people were in the Passenger Category\n# We can also see that the survival rate of the No Family on Board members was much higher than that of the people who where there with family","62e75a24":"# let's apply the logistic regression to the model","dd3a3c5e":"data.head()","d940a8f8":"df=data","dbd8e066":"df.drop(columns=['Firstname','Lastname','PassengerId'],inplace=True,axis=1)","38945546":"df.head()","a1009ce3":"def makenum(text):\n    dic={}\n    count=0\n    for i in set(list(df[text].values)):\n        dic[i]=count\n        count+=1\n    df[text].replace(dic,inplace=True)","e29f4b18":"df.head()","e85eb890":"makenum('Country')","2d878a5a":"makenum('Sex')\nmakenum('Category')\nmakenum('Age_Category')","25165223":"df.head()","0a2be4dc":"X=df.drop(columns=['Survived'],axis=1).values\ny=df['Survived'].values","d5a7a5c5":"from sklearn.model_selection import train_test_split","ce5d6d8e":"train_test_split?","62b44243":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.40, random_state=64)","16802b72":"from sklearn.linear_model import LogisticRegression","a9532b31":"log=LogisticRegression()","0f01ec4d":"log.fit(X_train,y_train)","2d56a306":"y_hat=log.predict(X_test)","d0657ab1":"from sklearn.metrics import accuracy_score","63949b10":"print('The score of the model is:',accuracy_score(y_hat,y_test))","038fe464":"# Well we got a 0.84 score now lets check what will happen to the score without the family column that we added on our own","149c3c86":"X=df.drop(columns=['Survived','Family'],axis=1).values\ny=df['Survived'].values","54223fde":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state=42)","c877661b":"log.fit(X_train,y_train)","2e3377d7":"y_hat2=log.predict(X_test)","03e3200b":"# Well you can see the score is nearly simmilar but the family column put the score off by a pric :(","cf09dc24":"print('The accuracy score without adding the new Family coulumn is:',accuracy_score(y_hat2,y_test))","4667acfb":"# now im pretty sure we can still make it better so lets generalize the data now\n# lets remove the age column and use the age_category totally cause they both are same ","660f090b":"df.drop(columns=['Age'],axis=1,inplace=True)","fc29b947":"X=df.drop(columns=['Survived'],axis=1).values\ny=df['Survived'].values","fa799aa8":"X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.33, random_state=42)","16401ea2":"log.fit(X_train,y_train)","01613b4d":"y_hat3=log.predict(X_test)","bf6e651e":"print('The score without the continous age is:',accuracy_score(y_hat3,y_test))","73dfca85":"#we can see clearly that the score increased :)","3e1a5008":"# Logistic Regression"}}