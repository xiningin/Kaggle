{"cell_type":{"584c57f7":"code","bde772b6":"code","1febbff0":"code","7dc33d3e":"code","a1741c38":"code","00a0c0ca":"code","67b07a48":"code","95898abe":"code","11afdcd0":"code","68968359":"code","2588bc86":"code","bd54208a":"code","255ba57a":"code","f771e3ad":"code","5d48ea94":"code","ad8c0e63":"code","2f0f3e2b":"code","455372c0":"code","7b5cfdb2":"code","70a005e2":"code","d3e14b97":"code","a8aafb90":"code","ac7db4ce":"code","cd288795":"code","68a5923d":"code","1d286aab":"code","7175eb98":"code","24fd1bb2":"code","71855754":"code","6f2181a5":"code","78f570b7":"code","c32d828c":"markdown"},"source":{"584c57f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bde772b6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nimport cufflinks as cf\nimport plotly.express as px\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected = True)\ncf.go_offline() ","1febbff0":"df= pd.read_csv(\"\/kaggle\/input\/health-care-data-set-on-heart-attack-possibility\/heart.csv\")\n","7dc33d3e":"df.head(5)","a1741c38":"df.isnull().sum()","00a0c0ca":"fig = px.histogram(df['age'], nbins=11, labels={'value': \"Age\"} , \n                   title ='5000 Dice RollHistogram',\n                   marginal = 'violin',\n                   color_discrete_sequence=['blue']\n                  )\n\nfig.update_layout(\nxaxis_title_text= 'Age',\nyaxis_title_text = 'Count of People',\nbargap=0.2, showlegend= False)\nfig","67b07a48":"\ndict1 ={ 1 : 'Male' , 0 : 'Female'}\n\ndf['gender'] = df['sex'].map(dict1)\n    \ndf.head()","95898abe":"\npx.box(df, x= 'gender' , y='target')","11afdcd0":"px.bar(df, x= 'age' , y='target', color='gender' , title= 'heart attack patoents age range and sex',\n      labels = { 'output': 'Number of patients', 'Age': 'Age od patient'})","68968359":"fig = plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), annot= True, fmt = '.2f', cmap = 'Blues')","2588bc86":"df_new=df.drop(columns= ['trestbps', 'chol' , 'fbs' , 'restecg' , 'gender'])\ndf_new.head()","bd54208a":"\nFeatures=sns.PairGrid(df_new, hue='target')\n\nFeatures.map_diag(plt.hist)\nFeatures.map_offdiag(plt.scatter)","255ba57a":"X = df_new.drop(columns= ['target'])\ny= df_new['target']","f771e3ad":"from sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score, cross_validate\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","5d48ea94":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import *\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report","ad8c0e63":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","2f0f3e2b":"lgr_pipline  = Pipeline([(\"scaler\", StandardScaler()), (\"LogisticRegression\", LogisticRegression())])\nrfc_pipline = Pipeline([(\"scaler\", StandardScaler()), (\"RandomForestClassifier\", RandomForestClassifier())])\nknn_pipline = Pipeline([(\"scaler\", StandardScaler()), (\"KNeighborsClassifier\", KNeighborsClassifier())])\ngnb_pipline = Pipeline([(\"scaler\", StandardScaler()), (\"GaussianNB\", GaussianNB())])\nsgd_pipline = Pipeline([(\"scaler\", StandardScaler()), (\"SGDClassifier\", SGDClassifier())])\ndt_pipline = Pipeline([(\"scaler\", StandardScaler()), (\"DecisionTreeClassifier\", DecisionTreeClassifier())])\n","455372c0":"pip_dict1 ={0:'Logistic Regression' , 1:'RandomForestClassifier' , 2: 'KNeighborsClassifier' ,\n            3: 'GaussianNB', 4: 'SGDClassifier', 5: 'DecisionTreeClassifier' }","7b5cfdb2":"piplines1=[lgr_pipline, rfc_pipline , knn_pipline, gnb_pipline  , sgd_pipline , dt_pipline ]","70a005e2":"scores_df = pd.DataFrame(columns = [\"Model\", \"CVScores\"])\nfor i, pipe in enumerate(piplines1):\n    score = cross_val_score(pipe, X, y, cv = 10)\n    print(pip_dict1[i], \": \", score.mean())","d3e14b97":"grid_params = [\n    {\"classifier\": [RandomForestClassifier()],\n    \"classifier__n_estimators\": [50,100,150,200,250,300],\n    \"classifier__criterion\": [\"gini\", \"entropy\"],\n    \"classifier__max_features\": [\"auto\", \"sqrt\", \"log2\"],\n    },\n    \n    {\"classifier\": [KNeighborsClassifier()],\n     \"classifier__n_neighbors\": [2,3,4,5,6],\n     \"classifier__algorithm\": ['auto', 'ball_tree', 'kd_tree', 'brute'],\n     \"classifier__leaf_size\": [10,20,30,40,50],\n    \n    },\n    {\"classifier\": [LogisticRegression()],\n     \"classifier__penalty\": ['l1', 'l2', 'elasticnet'],\n     \"classifier__fit_intercept\": [True, False],\n     \"classifier__solver\":[\"newton-cg\", \"lbfgs\", \"liblinear\", \"sag\", \"saga\"],\n     \"classifier__max_iter\": [50, 100, 500, 1000, 2500]\n    }\n    \n    \n]","a8aafb90":"\npipeline_new = Pipeline([(\"scaler\", StandardScaler()), (\"classifier\", RandomForestClassifier())])\n\nrandom_search = RandomizedSearchCV(estimator = pipeline_new, param_distributions = grid_params, scoring = 'neg_mean_absolute_error', n_jobs= -1, cv = 8, verbose = 10, random_state = 42)\n","ac7db4ce":"best_model = random_search.fit(X_train, y_train)","cd288795":"best_model.best_params_","68a5923d":"pipeline_rf = Pipeline([('scaler', StandardScaler()), \n                           ('RandomForest', RandomForestClassifier(max_features='sqrt', n_estimators=200))])","1d286aab":"model = pipeline_rf.fit(X_train, y_train)","7175eb98":"rf_train_predict = pd.DataFrame({'actual' : y_train,\n                                 'predicted' : model.predict(X_train)})\nrf_train_predict.head()","24fd1bb2":"rf_test_predict = pd.DataFrame({'actual' : y_test,\n                                 'predicted' : model.predict(X_test)})\nrf_test_predict.head()","71855754":"print('Accuracy Score for train dataset : ' , metrics.accuracy_score(rf_train_predict.actual, rf_train_predict.predicted))\nprint('Accuracy Score for test dataset : ' , metrics.accuracy_score(rf_test_predict.actual, rf_test_predict.predicted))\n","6f2181a5":"conn_cm_test = metrics.confusion_matrix(rf_test_predict.actual, rf_test_predict.predicted, [1,0])\nsns.heatmap(conn_cm_test, fmt= '.2f', annot=True)","78f570b7":"print(metrics.classification_report(rf_test_predict.actual, rf_test_predict.predicted))","c32d828c":"# Forecasting"}}