{"cell_type":{"704aa215":"code","cd94a6b9":"code","76ae0b3f":"code","6ad649d1":"code","310c59be":"code","462495f6":"code","558558f7":"markdown","5206a98f":"markdown","8414cde6":"markdown","b07a4fa8":"markdown","526a1f53":"markdown","4cce9656":"markdown"},"source":{"704aa215":"!pip install spacy==2.2.2\n!pip install scispacy\n!pip install https:\/\/s3-us-west-2.amazonaws.com\/ai2-s2-scispacy\/releases\/v0.2.4\/en_core_sci_lg-0.2.4.tar.gz\n!pip install https:\/\/med7.s3.eu-west-2.amazonaws.com\/en_core_med7_lg.tar.gz\n# !pip install googletrans\n","cd94a6b9":"import os\nimport scispacy\nimport spacy\nfrom spacy import displacy\nfrom scispacy.abbreviation import AbbreviationDetector\nfrom scispacy.umls_linking import UmlsEntityLinker\n\n\n# nlp = spacy.load(\"en_core_sci_lg\")\nimport en_core_sci_lg\nnlp = en_core_sci_lg.load()\nmed7 = spacy.load(\"en_core_med7_lg\")\n\nlinker = UmlsEntityLinker(resolve_abbreviations=True)\nnlp.add_pipe(linker)\n\n\nabs_link = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        #print(os.path.join(dirname, filename).split(\".\")[1])\n        if os.path.join(dirname, filename).split(\".\")[1] == \"json\":\n            abs_link.append(os.path.join(dirname, filename))\n\n        \n            \n            # Any results you write to the current directory are saved as output.\n\n","76ae0b3f":"# df = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/all_sources_metadata_2020-03-13.csv')\n# df.shape","6ad649d1":"print(abs_link[0])","310c59be":"json_file_list = []\nimport json\n#file_path = '\/kaggle\/input\/CORD-19-research-challenge\/2020-03-13\/noncomm_use_subset\/noncomm_use_subset\/252878458973ebf8c4a149447b2887f0e553e7b5.json'\n\nfor i in range(0,len(abs_link),1):\n#     if i==6:\n#         break\n    with open(abs_link[i]) as json_file:\n         json_file = json.load(json_file)\n    json_file_list.append(json_file)","462495f6":"\nfor i in range(0,len(json_file_list),1):\n    \n#     if i==6:\n#         break\n    \n    if len(json_file_list[i]['abstract']) != 0:\n        print(\"\\n\")\n        print(\"Title: \" +str(json_file_list[i]['metadata']['title']))\n        #print('\\nAbstract: \\n\\n', json_file_list[i]['abstract'])\n        print(\"\\n\")\n        key, val = next(iter(json_file_list[i]['abstract'][0].items()))\n        print(\"Abstract: \"+str(val)) \n        print(\"\\n\")\n        \n        print(\"scispacy Abstract Entities: \")\n        print(\"\\n\")\n        \n        doc = nlp(str(val))\n        print(doc.ents)\n        print(\"\\n\")\n        abbreviation_pipe = AbbreviationDetector(nlp)\n\n#         print(\"Abbreviation\", \"\\t\", \"Definition\")\n#         for abrv in doc._.abbreviations:\n#           print(f\"{abrv} \\t ({abrv.start}, {abrv.end}) {abrv._.long_form}\")\n        \n        \n        entity = doc.ents\n        print(\"scispacy Entities: \")\n        print(\"\\n\")\n        # Each entity is linked to UMLS with a score\n        # (currently just char-3gram matching).\n#         for i in range(len(entity)):\n            \n#             for umls_ent in entity[i]._.umls_ents:\n#                 print(linker.umls.cui_to_entity[umls_ent[0]])\n                \n                \n        for ent in doc.ents:\n            print(ent.text, ent.start_char, ent.end_char, ent.label_)\n#             print(str(ent)+\" \"+ str(ent.label_))\n        \n    \n    \n\n\n        # create distinct colours for labels\n        col_dict = {}\n        seven_colours = ['#e6194B', '#3cb44b', '#ffe119', '#ffd8b1', '#f58231', '#f032e6', '#42d4f4']\n        for label, colour in zip(med7.pipe_labels['ner'], seven_colours):\n            col_dict[label] = colour\n\n        options = {'ents': med7.pipe_labels['ner'], 'colors':col_dict}\n\n        doc_med7 = med7(val)\n\n        print(\"\\n\")\n        \n        print(\"Med7 Entities: \")\n        print(\"\\n\")\n        \n        #spacy.displacy.render(doc, style='ent', jupyter=True, options=options)\n        #spacy.displacy.render(doc_med7, style='ent', jupyter=True, options=options)\n\n        print([(ent.text, ent.label_) for ent in doc_med7.ents])","558558f7":"# **Conclusion**\n\n**Work in progress !! Leave an upvote if you like it, Thank you :)**","5206a98f":"# **Loading Metadata**","8414cde6":"# **scispacy and Med7 for find Entities**","b07a4fa8":"# **R&D Question: **\n\n1. What do we know about vaccines and therapeutics?","526a1f53":"# **Load the Data**\n\n\nCite: Dataset Parsing Code | Kaggle, COVID EDA: Initial Exploration Tool\n\n","4cce9656":"***CORD-19 is a resource of over 24,000 scholarly articles, including over 12,000 with full text, about COVID-19, and the coronavirus group.These are the entities from the Abstracts from the CORD-19 dataset.***"}}