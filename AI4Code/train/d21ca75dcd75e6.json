{"cell_type":{"6f1d974d":"code","86e61e79":"code","df8774a8":"code","f547a9f4":"code","2e33a735":"code","d673c601":"code","be2e7cbd":"code","7ed3c276":"code","4fc03bfa":"code","033d927b":"code","3e704cd1":"code","b950cd79":"code","f74b31c4":"code","a241c16a":"code","00809f70":"code","3d1fbcc8":"code","82bf13cb":"code","a0c034da":"code","bff73d34":"code","d4e37047":"code","8a9623d4":"code","16840041":"markdown"},"source":{"6f1d974d":"import os\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","86e61e79":"os.listdir(\"..\/input\/skin-cancer-malignant-vs-benign\")","df8774a8":"os.listdir(\"..\/input\/skin-cancer-malignant-vs-benign\/train\")","f547a9f4":"ben_dir = \"..\/input\/skin-cancer-malignant-vs-benign\/train\/benign\"\nmalig_dir = \"..\/input\/skin-cancer-malignant-vs-benign\/train\/malignant\"\n\ntrain_dir = \"..\/input\/skin-cancer-malignant-vs-benign\/train\/\"\ntest_dir = \"..\/input\/skin-cancer-malignant-vs-benign\/test\/\"","2e33a735":"print(\"Number of images in benign folder:\",len(os.listdir(\"..\/input\/skin-cancer-malignant-vs-benign\/train\/benign\")))\nprint(\"Number of images in malignant folder:\",len(os.listdir(\"..\/input\/skin-cancer-malignant-vs-benign\/train\/malignant\")))","d673c601":"import random\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom tensorflow.keras.preprocessing.image import load_img\nplt.figure(figsize=(12,7))\nben = random.sample(os.listdir(ben_dir),5)\nmalig = random.sample(os.listdir(malig_dir),5)\n\nfor i,img in enumerate(ben):\n    path = os.path.join(ben_dir,img)\n    img = load_img(path, target_size=(150,150))\n    plt.subplot(1,5,i+1)\n    plt.imshow(img)\n    plt.xlabel(\"Benign\")\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout();\n\nplt.figure(figsize=(12,7))\nfor i,img in enumerate(malig):\n    path = os.path.join(malig_dir,img)\n    img = load_img(path, target_size=(150,150))\n    plt.subplot(1,5,i+1)\n    plt.imshow(img)\n    plt.xlabel(\"Malignant\")\n    plt.xticks([])\n    plt.yticks([])\nplt.tight_layout();","be2e7cbd":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale =(1.\/255),rotation_range=0.2,\n    width_shift_range=0.2,\n    shear_range=0.3,\n    zoom_range=0.3,\n    fill_mode='nearest',\n    horizontal_flip= True)\n\nval_datagen = ImageDataGenerator(rescale =(1.\/255))\n\ntrain_data = train_datagen.flow_from_directory(directory = train_dir, \n                                               target_size =(224,224),\n                                               class_mode = \"binary\",\n                                               batch_size =32)\ntest_data = val_datagen.flow_from_directory(directory = test_dir, \n                                               target_size =(224,224),\n                                               class_mode = \"binary\",\n                                               batch_size =32)","7ed3c276":"from tensorflow.keras.preprocessing import image\nsample_x, sample_y = next(train_data)\nplt.figure(figsize=(16,9))\nfor i in range(5):\n    plt.subplot(1,5,i+1)\n    img = image.img_to_array(sample_x[i])\n    plt.imshow(img)\n    plt.xlabel(np.argmax(sample_y[i]))\n    plt.xticks([])\n    plt.yticks([])\nplt.show()","4fc03bfa":"from tensorflow.keras.applications import DenseNet121\ndense = DenseNet121(weights = \"imagenet\", include_top = False, input_shape=(224,224,3))","033d927b":"for layer in dense.layers[:121]:\n    layer.trainable = False","3e704cd1":"from tensorflow.keras import Sequential\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D,GlobalAveragePooling2D, Flatten, Dropout, BatchNormalization\n\nmodel = Sequential()\nmodel.add(dense)\nmodel.add(MaxPooling2D())\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(512,activation= \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation = \"sigmoid\"))","b950cd79":"model.summary()","f74b31c4":"plot_model(model,\n    to_file='DenseNet.png',\n    show_shapes=False,\n    show_layer_names=True)","a241c16a":"import tensorflow_addons as tfa\nfrom tensorflow.keras import metrics\nfrom tensorflow_addons.metrics import F1Score\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow_addons.metrics import MatthewsCorrelationCoefficient\nmetrics = ['accuracy',\n           metrics.Precision(name='precision'),\n           metrics.Recall(name='recall'),\n           F1Score(num_classes = 1,name = 'f1'),\n           MatthewsCorrelationCoefficient(num_classes = 1,name='mc'),\n           tf.keras.metrics.TruePositives(name= 'tp'),\n           tf.keras.metrics.TrueNegatives(name = 'tn'),\n           tf.keras.metrics.FalseNegatives(name = 'fn'),\n           tf.keras.metrics.FalsePositives(name = 'fp')\n          ]\n\nlr=0.001\nmodel.compile(optimizer = Adam(lr = 0.001), loss = \"binary_crossentropy\", metrics = metrics)","00809f70":"patience = 1\nstop_patience = 3\nfactor = 0.5\n#    tf.keras.callbacks.EarlyStopping(patience=stop_patience, monitor='val_loss', verbose=1),\ncallbacks = [\n    tf.keras.callbacks.ModelCheckpoint(\"densenet121.h5\", save_best_only=True, verbose = 0),\n    tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=factor, patience=patience, verbose=1)\n]","3d1fbcc8":"history = model.fit(train_data, validation_data = test_data, epochs = 15, \n                    verbose = 1, callbacks = callbacks )","82bf13cb":"model.save(\"densenet121.h5\")\nmodel.evaluate(test_data)","a0c034da":"import itertools\ny_pred = model.predict(test_data)\n#y_pred = np.argmax(y_pred, axis=1)\ny_pred = list(itertools.chain.from_iterable(y_pred))\n\npred = []\ndef prediction(label):\n    for i in label:\n        if i > 0.5:\n            pred.append(1)\n        else:\n            pred.append(0)\n    return pred\n       \npredict = prediction(y_pred) #predict = \nprint(predict)","bff73d34":"plt.style.use(\"ggplot\")\nfig = plt.figure(figsize=(12,6))\nepochs = range(1,16)\nplt.subplot(1,2,1)\nplt.plot(epochs,history.history[\"accuracy\"],\"go-\")\nplt.plot(epochs,history.history[\"val_accuracy\"],\"ro-\")\nplt.title(\"Model Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend([\"Train\",\"val\"],loc = \"upper left\")\n#plt.show()\n\nplt.subplot(1,2,2)\nplt.plot(epochs,history.history[\"loss\"],\"go-\")\nplt.plot(epochs,history.history[\"val_loss\"],\"ro-\")\nplt.title(\"Model Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend([\"Train\",\"val\"],loc = \"upper left\")\nplt.show()","d4e37047":"test_data.labels","8a9623d4":"import seaborn as sns\ncm_data = [[history.history['val_tp'][-1], history.history['val_fp'][-1]], [history.history['val_fn'][-1], history.history['val_tn'][-1]]]\nsns.heatmap(cm_data, annot=True, cmap = 'viridis',cbar = False,fmt = 'g')\nplt.xticks([0.5,1.5],[\"Parasitized\",\"Uninfected\"],fontsize=11)\nplt.yticks([0.5,1.5],[\"Parasitized\",\"Uninfected\"],fontsize=11)\nplt.xlabel(\"Actual\",fontsize=12, fontweight=\"bold\")\nplt.ylabel(\"Predicted\",fontsize=12, fontweight=\"bold\")\nplt.show()","16840041":">Augmented Image:"}}