{"cell_type":{"2ab26b26":"code","36d52167":"code","f2599d06":"code","bcd57cfd":"code","1b2c68e0":"code","6674f04b":"code","3d4101c9":"code","dd75f6da":"code","03e691d4":"code","3562c3cd":"code","d84d0c0d":"code","3e0e4237":"code","d22faa73":"code","aa901e21":"code","7299b6dd":"code","485d44c4":"code","78c7e84c":"code","801ab106":"code","ade9151b":"code","fefc2aef":"code","36a8dbf2":"code","3814fba8":"code","1163337c":"code","c29ad09f":"code","420e6111":"code","2d2457fd":"code","38d17b9a":"code","a3a70977":"code","044ac909":"code","32ccb8c1":"code","14513d3a":"code","6fca16a6":"code","bdfcc6a3":"markdown","38224eb1":"markdown","7d91319c":"markdown","f41537df":"markdown","42f93ac8":"markdown","2510f45d":"markdown","a83237d8":"markdown","31f87e0f":"markdown","294cc965":"markdown"},"source":{"2ab26b26":"import numpy as np\nimport pandas as pd\nfrom sklearn.cluster import KMeans\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import silhouette_score","36d52167":"from IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"last\"","f2599d06":"df=pd.read_csv(\"\/kaggle\/input\/fundamentals.csv\")","bcd57cfd":"pd.options.display.max_columns=100\n#set maximum columns to display in the output\n\npd.options.display.max_rows=100\n#set maximum rows to display in the output","1b2c68e0":"df.head()","6674f04b":"df.columns","3d4101c9":"df.columns = df.columns.str.replace(\" \", \"_\")\ndf.columns = df.columns.str.replace(\"&\", \"_\")\ndf.columns = df.columns.str.replace(\"\/\", \"_\")\ndf.columns = df.columns.str.replace(\".\", \"\")\ndf.columns = df.columns.str.replace(\"-\", \"_\")\ndf.columns = df.columns.str.replace(\"'\", \"\")\ndf.columns = df.columns.str.replace(\",\", \"\")\ndf.columns = df.columns.str.replace(\":\", \"\")\ndf.columns = df.columns.str.replace(\"\/\", \"_\")\n\ndf.columns =  re.sub(\"_+\",\"_\",\",\".join(df.columns)).split(\",\")\n","dd75f6da":"df.columns","03e691d4":"grp_tickers=df.groupby(\"Ticker_Symbol\")\ndf_tickers=grp_tickers.mean()","3562c3cd":"df_tickers.head()","d84d0c0d":"df_Gross = df_tickers.sort_values('Gross_Profit')","3e0e4237":"plt.figure(figsize=(50,20))\nplot=sns.barplot(x=df_Gross.head(30).index,y='Gross_Profit',data=df_Gross.head(30))\nplot.set_xticklabels(plot.get_xticklabels(),rotation=90,fontsize=75)\nplot.set_yticklabels(plot.get_yticks(),fontsize=55)\nplot.set_title(\"Bar Plot for least 30 Gross_Profit across tickers\",fontsize=75)\nplot.set_xlabel('Ticker Symbol',fontsize=75)\nplot.set_ylabel('Gross_Profit',fontsize=75)","d22faa73":"plt.figure(figsize=(50,20))\nplot=sns.barplot(x=df_Gross.tail(30).index,y='Gross_Profit',data=df_Gross.tail(30))\nplot.set_xticklabels(plot.get_xticklabels(),rotation=90,fontsize=75)\nplot.set_yticklabels(plot.get_yticks(),fontsize=55)\nplot.set_title(\"Bar Plot for top 30 Gross_Profit across tickers\",fontsize=75)\nplot.set_xlabel('Ticker Symbol',fontsize=75)\nplot.set_ylabel('Gross_Profit',fontsize=75)","aa901e21":"df_tickers['Gross_Cat']=pd.qcut(\n                       df_tickers['Gross_Profit'],\n                        q = 3,\n                       labels = [\"s\", \"m\", \"l\"]\n                      )\ndf_tickers['Gross_Cat'].value_counts()","7299b6dd":"df_tickers[df_tickers['Gross_Cat']=='l'].Gross_Profit.describe()","485d44c4":"df_tickers[df_tickers['Gross_Cat']=='m'].Gross_Profit.describe()","78c7e84c":"df_tickers[df_tickers['Gross_Cat']=='s'].Gross_Profit.describe()","801ab106":"fig = plt.figure(figsize = (10,10))\nsns.boxplot(x=\"Gross_Cat\",y=\"Gross_Profit\",data=df_tickers)","ade9151b":"plt.figure(figsize=(50,20))\nplot=sns.barplot(x=df_tickers.Gross_Cat,y='Gross_Profit',data=df_tickers)\nplot.set_xticklabels(plot.get_xticklabels(),fontsize=75)\nplot.set_yticklabels(plot.get_yticks(),fontsize=55)\nplot.set_title(\"Bar Plot for mean of Gross_Profit across Gross_Cat\",fontsize=75)\nplot.set_xlabel('Gross_Cat',fontsize=75)\nplot.set_ylabel('Gross_Profit',fontsize=75)","fefc2aef":"df_tickers.shape","36a8dbf2":"df_tickers1=df_tickers.copy()\ndf_tickers=df_tickers.dropna(axis='columns')\ndf_tickers.drop(['Unnamed_0'], axis = 'columns', inplace = True)\ndf_tickers.shape","3814fba8":"scaler = StandardScaler()","1163337c":"#df1 temporarily holds numeric only columns from df_tickers\ndf1 = df_tickers.select_dtypes(include = ['float64', 'int64']).copy()","c29ad09f":"#df2 is transformed numpy array of the numeric data\ndfarray=scaler.fit_transform(df1)","420e6111":"dfnum=pd.DataFrame(dfarray,columns=df1.columns)\ndfnum.head()","2d2457fd":"inertia=[]\n\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(dfnum)\n    inertia.append(kmeans.inertia_)\n    \nplt.plot(range(1,11),inertia,marker='*')","38d17b9a":"for i in range(2,11):\n    kmeans = KMeans(n_clusters = i)\n    clust = kmeans.fit(dfnum)\n    print(\"Number of Clusters:\", i, \"Silhouette Score:\", silhouette_score(dfnum, clust.labels_))","a3a70977":"kmeans = KMeans(n_clusters=2)\npred_y = kmeans.fit(dfarray)\nplt.scatter(dfarray[:,0], dfarray[:,1])\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red')\nplt.show()","044ac909":"kmeans = KMeans(n_clusters=3)\ny_means = kmeans.fit(dfarray)\nplt.scatter(dfarray[:,0], dfarray[:,1])\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red')\nplt.show()","32ccb8c1":"from yellowbrick.cluster import SilhouetteVisualizer\nvisualizer = SilhouetteVisualizer(kmeans, colors='yellowbrick')\nvisualizer.fit(dfnum)        \nvisualizer.show()  ","14513d3a":"from sklearn.manifold import TSNE\ntsne_array = TSNE(n_components=2).fit_transform(dfnum)\ndf_tsne = pd.DataFrame(tsne_array, columns=['X','Y'])\ncolorlist = [\"#FF1111\", \"#11FF11\", \"#1111FF\"]\nsns.relplot(x = \"X\",\n            y = \"Y\",\n            hue = y_means.labels_,\n            data = df_tsne,\n            palette=sns.color_palette(colorlist)\n            )\n","6fca16a6":"from yellowbrick.cluster import InterclusterDistance\nvisualizer = InterclusterDistance(kmeans)\nvisualizer.fit(dfnum)        # Fit the data to the visualizer\nvisualizer.show()  ","bdfcc6a3":"## Step 2: To remove the special characters from columnnames","38224eb1":"## Step 4: Plotting\n","7d91319c":"## Step 5: Removing NaNs by dropping those columns which have NaNs","f41537df":"# Gross Profit Categories","42f93ac8":"## Step 8: Perform TSNE visualization (of the dataset) and color points with the clusters discovered above.","2510f45d":"## Step 1: To read the fundamentals.csv file into a data frame","a83237d8":"## Step 7: Perform clustering and check Silhoutte score.","31f87e0f":"## Step 3: Group data by Ticker Symbols and take a mean of all numeric variables","294cc965":"## Step 6: Normalise the data using sklearn's StandardScaler()"}}