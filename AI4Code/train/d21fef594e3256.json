{"cell_type":{"7ed161cf":"code","38053180":"code","2490d4fd":"code","4ca7e6cd":"code","1a03c2b4":"code","75fa8e6d":"code","e4e62296":"code","02222724":"markdown","ec9ff9d0":"markdown","44633684":"markdown","3d793a39":"markdown","3ad92426":"markdown","53710f8b":"markdown","095aa808":"markdown","fec29b07":"markdown","36077617":"markdown","48fce669":"markdown","f3020640":"markdown","d3c7a42b":"markdown","48c63945":"markdown","14bee1a8":"markdown","43c2d453":"markdown"},"source":{"7ed161cf":"# Set your own project id here\nPROJECT_ID = 'bigquerytestdefault'\n\nfrom google.cloud import bigquery\nclient = bigquery.Client(project=PROJECT_ID, location=\"US\")\ndataset = client.create_dataset('bqml_tutorial', exists_ok=True)\n\nfrom google.cloud.bigquery import magics\nfrom kaggle.gcp import KaggleKernelCredentials\nmagics.context.credentials = KaggleKernelCredentials()\nmagics.context.project = PROJECT_ID\n","38053180":"%load_ext google.cloud.bigquery","2490d4fd":"%%bigquery\nCREATE MODEL IF NOT EXISTS `bqml_tutorial.sample_model`\nOPTIONS(model_type='logistic_reg') AS\nSELECT\n  IF(totals.transactions IS NULL, 0, 1) AS label,\n  IFNULL(device.operatingSystem, \"\") AS os,\n  device.isMobile AS is_mobile,\n  IFNULL(geoNetwork.country, \"\") AS country,\n  IFNULL(totals.pageviews, 0) AS pageviews\nFROM\n  `bigquery-public-data.google_analytics_sample.ga_sessions_*`\nWHERE\n  _TABLE_SUFFIX BETWEEN '20160801' AND '20170630'","4ca7e6cd":"%%bigquery\nSELECT\n  *\nFROM\n  ML.TRAINING_INFO(MODEL `bqml_tutorial.sample_model`)","1a03c2b4":"%%bigquery\nSELECT\n  *\nFROM ML.EVALUATE(MODEL `bqml_tutorial.sample_model`, (\n  SELECT\n    IF(totals.transactions IS NULL, 0, 1) AS label,\n    IFNULL(device.operatingSystem, \"\") AS os,\n    device.isMobile AS is_mobile,\n    IFNULL(geoNetwork.country, \"\") AS country,\n    IFNULL(totals.pageviews, 0) AS pageviews\n  FROM\n    `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n  WHERE\n    _TABLE_SUFFIX BETWEEN '20170701' AND '20170801'))","75fa8e6d":"%%bigquery\nSELECT\n  country,\n  SUM(predicted_label) as total_predicted_purchases\nFROM ML.PREDICT(MODEL `bqml_tutorial.sample_model`, (\n  SELECT\n    IFNULL(device.operatingSystem, \"\") AS os,\n    device.isMobile AS is_mobile,\n    IFNULL(totals.pageviews, 0) AS pageviews,\n    IFNULL(geoNetwork.country, \"\") AS country\n  FROM\n    `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n  WHERE\n    _TABLE_SUFFIX BETWEEN '20170701' AND '20170801'))\n  GROUP BY country\n  ORDER BY total_predicted_purchases DESC\n  LIMIT 10","e4e62296":"%%bigquery\nSELECT\n  fullVisitorId,\n  SUM(predicted_label) as total_predicted_purchases\nFROM ML.PREDICT(MODEL `bqml_tutorial.sample_model`, (\n  SELECT\n    IFNULL(device.operatingSystem, \"\") AS os,\n    device.isMobile AS is_mobile,\n    IFNULL(totals.pageviews, 0) AS pageviews,\n    IFNULL(geoNetwork.country, \"\") AS country,\n    fullVisitorId\n  FROM\n    `bigquery-public-data.google_analytics_sample.ga_sessions_*`\n  WHERE\n    _TABLE_SUFFIX BETWEEN '20170701' AND '20170801'))\n  GROUP BY fullVisitorId\n  ORDER BY total_predicted_purchases DESC\n  LIMIT 10","02222724":"Because you performed a logistic regression, the results include the following columns (click to learn more):\n\n+ [`precision`](https:\/\/developers.google.com\/machine-learning\/glossary\/#precision)\n+ [`recall`](https:\/\/developers.google.com\/machine-learning\/glossary\/#recall)\n+ [`accuracy`](https:\/\/developers.google.com\/machine-learning\/glossary\/#accuracy)\n+ [`f1_score`](https:\/\/en.wikipedia.org\/wiki\/F1_score)\n+ [`log_loss`](https:\/\/developers.google.com\/machine-learning\/glossary\/#Log_Loss)\n+ [`roc_auc`](https:\/\/developers.google.com\/machine-learning\/glossary\/#AUC)","ec9ff9d0":"In the next example, you try to predict the number of transactions each website\nvisitor will make. This query is identical to the previous query except for the\n`GROUP BY` clause. Here the `GROUP BY` clause &mdash; `GROUP BY fullVisitorId`\n&mdash; is used to group the results by visitor ID.\n\nTo run the query that predicts purchases per user:","44633684":"Note: `%load_ext` is one of the many Jupyter built-in magic commands. See the\n[Jupyter documentation](https:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/magics.html) for more\ninformation about `%load_ext` and other magic commands.\n\nThe BigQuery client library provides a cell magic,\n`%%bigquery`, which runs a SQL query and returns the results as a Pandas\nDataFrame. Enter the following standard SQL query in the cell. The `#standardSQL`\nprefix is not required for the client library. Standard SQL is the default\nquery syntax.","3d793a39":"## Step two: Create your model\n\nNext, you create a logistic regression model using the Google Analytics sample\ndataset for BigQuery. The model is used to predict whether a\nwebsite visitor will make a transaction. The standard SQL query uses a\n`CREATE MODEL` statement to create and train the model.","3ad92426":"## Step five: Use your model to predict outcomes\n\nNow that you have evaluated your model, the next step is to use it to predict\noutcomes. You use your model to predict the number of transactions made by\nwebsite visitors from each country. And you use it to predict purchases per user.\n\nTo run the query that uses the model to predict the number of transactions:","53710f8b":"## Objectives\n\nIn this tutorial, you use:\n\n+ BQML to create a binary logistic regression model using the\n  `CREATE MODEL` statement\n+ The `ML.EVALUATE` function to evaluate the ML model\n+ The `ML.PREDICT` function to make predictions using the ML model","095aa808":"## Cleanup\nTo avoid incurring charges to your Google Cloud Platform account for the resources used in this tutorial:\n\n+ You can delete the project you created.\n+ Or you can keep the project and delete the dataset.","fec29b07":"## Step three: Get training statistics\n\nTo see the results of the model training, you can use the\n[`ML.TRAINING_INFO`](\/bigquery\/docs\/reference\/standard-sql\/bigqueryml-syntax-train)\nfunction, or you can view the statistics in the BigQuery UI.\nIn this tutorial, you use the `ML.TRAINING_INFO` function.\n\nA machine learning algorithm builds a model by examining many examples and\nattempting to find a model that minimizes loss. This process is called empirical\nrisk minimization.\n\nLoss is the penalty for a bad prediction &mdash; a number indicating\nhow bad the model's prediction was on a single example. If the model's\nprediction is perfect, the loss is zero; otherwise, the loss is greater. The\ngoal of training a model is to find a set of weights that have low\nloss, on average, across all examples.\n\nTo see the model training statistics that were generated when you ran the\n`CREATE MODEL` query, run the following:","36077617":"## Costs\n\nThis tutorial uses billable components of Cloud Platform,\nincluding:\n\n+ BigQuery\n+ BigQuery ML\n\n\nFor more information on BigQuery costs, see the [Pricing](https:\/\/cloud.google.com\/bigquery\/pricing)\npage.\n\nFor more information on BigQuery ML costs, see the [BQML pricing](https:\/\/cloud.google.com\/bigquery\/bqml-pricing)\nsection of the pricing page.","48fce669":"Note: Typically, it is not a best practice to use a `SELECT *` query. Because the model output is a small table, this query does not process a large amount of data. As a result, the cost is minimal.\n\nThe `loss` column represents the loss metric calculated after the given iteration\n    on the training dataset. Since you performed a logistic regression, this column\n    is the [log loss](https:\/\/en.wikipedia.org\/wiki\/Cross_entropy#Cross-entropy_error_function_and_logistic_regression).\n    The `eval_loss` column is the same loss metric calculated on\n    the holdout dataset (data that is held back from training to validate the model).\n\nFor more details on the `ML.TRAINING_INFO` function, see the\n    [BQML syntax reference](https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/bigqueryml-syntax-train).","f3020640":"This tutorial introduces data scientists to BigQuery ML and is based\non the [official documentation tutorial](https:\/\/cloud.google.com\/bigquery\/docs\/bigqueryml-scientist-start). BigQuery ML enables\nusers to create and execute machine learning models in BigQuery\nusing SQL queries. The goal is to democratize machine learning by enabling SQL\npractitioners to build models using their existing tools and to increase\ndevelopment speed by eliminating the need for data movement.\n\nIn this tutorial, you use the sample\n[Google Analytics sample dataset for BigQuery](https:\/\/support.google.com\/analytics\/answer\/7586738?hl=en&ref_topic=3416089)\nto create a model that predicts whether a website visitor will make a\ntransaction. For information on the schema of the Analytics dataset, see\n[BigQuery export schema](https:\/\/support.google.com\/analytics\/answer\/3437719)\nin the Google Analytics Help Center.\n","d3c7a42b":"## Step four: Evaluate your model\n\nAfter creating your model, you evaluate the performance of the classifier using\nthe [`ML.EVALUATE`](\/bigquery\/docs\/reference\/standard-sql\/bigqueryml-syntax-evaluate)\nfunction. You can also use the [`ML.ROC_CURVE`](\/bigquery\/docs\/reference\/standard-sql\/bigqueryml-syntax-roc)\nfunction for logistic regression specific metrics.\n\nA classifier is one of a set of enumerated target values for a label. For\nexample, in this tutorial you are using a binary classification model that\ndetects transactions. The two classes are the values in the `label` column:\n`0` (no transactions) and not `1` (transaction made).\n\nTo run the `ML.EVALUATE` query that evaluates the model, run the following:","48c63945":"The BigQuery Python client library provides a magic command that\nallows you to run queries with minimal code. To load the magic commands from the\nclient library, enter the following code.","14bee1a8":"## Step one: Setup and create your dataset\n\nNext, you create a BigQuery dataset to store your\nML model.","43c2d453":"The query takes several minutes to complete. After the first iteration is\n    complete, your model (`sample_model`) appears in the navigation panel of the\n    BigQuery UI. Because the query uses a `CREATE MODEL` statement to create a\n    table, you do not see query results. The output is an empty string."}}