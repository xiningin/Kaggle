{"cell_type":{"8ddbc0ea":"code","4963a1c3":"code","8080a9e8":"code","59647c82":"code","ffb6c2a2":"code","87db8b2d":"code","8e94e357":"code","46838f42":"code","7ba3651e":"code","679c9589":"code","e5265dfa":"code","957f1170":"code","0d3d67d4":"code","06ce44d4":"markdown","63437ac6":"markdown","315142cb":"markdown"},"source":{"8ddbc0ea":"import os\nimport sys\nimport re\nimport json\nfrom glob import glob\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nsns.set()\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\nfrom plotly.colors import DEFAULT_PLOTLY_COLORS as colors\npy.init_notebook_mode(connected=True)\n\nimport ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual\nfrom IPython.display import display, HTML\n\nSMALL_SIZE = 14\nMEDIUM_SIZE = 16\nBIGGER_SIZE = 24\n\nplt.rc('font', size=SMALL_SIZE)\nplt.rc('axes', titlesize=BIGGER_SIZE)\nplt.rc('axes', labelsize=MEDIUM_SIZE)\nplt.rc('xtick', labelsize=SMALL_SIZE)\nplt.rc('ytick', labelsize=SMALL_SIZE)\nplt.rc('legend', fontsize=SMALL_SIZE)\nplt.rc('figure', titlesize=BIGGER_SIZE)\n\npd.options.display.max_columns = None","4963a1c3":"!ls ..\/input","8080a9e8":"!ls ..\/input\/train_images | head -3","59647c82":"!ls ..\/input\/train_metadata | head -3","ffb6c2a2":"# read data\ndf_train = pd.read_csv(\"..\/input\/train\/train.csv\")\ndf_breed = pd.read_csv(\"..\/input\/breed_labels.csv\")\ndf_color = pd.read_csv(\"..\/input\/color_labels.csv\")\ndf_state = pd.read_csv(\"..\/input\/state_labels.csv\")\n\n# cleaning\ndf_train.loc[df_train[\"Name\"].isnull(), \"Name\"] = np.nan\n\ndf_train.loc[df_train[\"Description\"].isnull(), \"Description\"] = \"\"\n\ndf_train[\"PhotoAmt\"] = df_train[\"PhotoAmt\"].astype(int)\n\nis_breed1_zero = df_train[\"Breed1\"] == 0\ndf_train[\"Breed1\"][is_breed1_zero] = df_train[\"Breed2\"][is_breed1_zero]\ndf_train[\"Breed2\"][is_breed1_zero] = 0\n\n# merge dataframes\ndf_breed = df_breed.append({\"BreedID\": 0, \"Type\": 0, \"BreedName\": \"\"}, ignore_index=True).replace(\"\", np.nan)\ndf_color = df_color.append({\"ColorID\":0, \"ColorName\": \"\"}, ignore_index=True).replace(\"\", np.nan)\n\n# Decode categorical features\ndf_train[\"Breed1\"] = df_breed.set_index(\"BreedID\").loc[df_train[\"Breed1\"]][\"BreedName\"].values\ndf_train[\"Breed2\"] = df_breed.set_index(\"BreedID\").loc[df_train[\"Breed2\"]][\"BreedName\"].values\ndf_train[\"Color1\"] = df_color.set_index(\"ColorID\").loc[df_train[\"Color1\"]][\"ColorName\"].values\ndf_train[\"Color2\"] = df_color.set_index(\"ColorID\").loc[df_train[\"Color2\"]][\"ColorName\"].values\ndf_train[\"Color3\"] = df_color.set_index(\"ColorID\").loc[df_train[\"Color3\"]][\"ColorName\"].values\ndf_train[\"State\"] = df_state.set_index(\"StateID\").loc[df_train[\"State\"]][\"StateName\"].values\n\nmapdict = {\n    \"Type\"        : [\"\", \"Dog\", \"Cat\"],\n    \"Gender\"      : [\"\", \"Male\", \"Female\", \"Mixed\"],\n    \"MaturitySize\": [\"Not Specified\", \"Small\", \"Meidum\", \"Large\", \"Extra Large\"],\n    \"FurLength\"   : [\"Not Specified\", \"Short\", \"Medium\", \"Long\"],\n    \"Vaccinated\"  : [\"\", \"Yes\", \"No\", \"Not Sure\"],\n    \"Dewormed\"    : [\"\", \"Yes\", \"No\", \"Not Sure\"],\n    \"Sterilized\"  : [\"\", \"Yes\", \"No\", \"Not Sure\"],\n    \"Health\"      : [\"Not Specified\", \"Healthy\", \"Minor Injury\", \"Serious Injury\"]\n}\n\nfor k, v in mapdict.items():\n    dummy_df = pd.DataFrame({k: v})\n    df_train[k] = dummy_df.loc[df_train[k]][k].values","87db8b2d":"def read_json(fpath):\n    with open(fpath) as f:\n        return json.load(f)\n\ndef get_sentiment(pet_id, dir_):\n    fpath = f\"..\/input\/{dir_}\/{pet_id}.json\"\n    if not os.path.exists(fpath):\n        return np.nan, np.nan\n    data = read_json(fpath)\n    result = data[\"documentSentiment\"]\n    return result[\"magnitude\"], result[\"score\"]\n\ndef get_image_meta(pet_id, dir_):\n    fpath = f\"..\/input\/{dir_}\/{pet_id}-1.json\"\n#     print(fpath)\n    if not os.path.exists(fpath):\n        return np.nan, np.nan\n    \n    data = read_json(fpath)\n    \n    if not \"labelAnnotations\" in data:\n        return np.nan, np.nan\n    \n    result = data[\"labelAnnotations\"][0]\n    return result[\"description\"], result[\"score\"]","8e94e357":"# merge image metadata\ndf_train[\"ImageDescription\"], df_train[\"ImageDescriptionScore\"] = zip(*df_train[\"PetID\"].map(lambda pet_id: get_image_meta(pet_id, \"train_metadata\")))\n","46838f42":"df_train.sample()","7ba3651e":"def rand_pet_id():\n    return df_train[\"PetID\"].sample(1).values[0]\n\ndef grouped(iterable, n):\n    return zip(*[iter(iterable)]*n)\n\ndef show_pics(pet_id):\n    img_paths = glob(f\"..\/input\/train_images\/{pet_id}*.jpg\")\n    npics = len(img_paths)\n    if npics == 0:\n        print(\"No picture found\")\n        return\n    max_ncols = 5\n    ncols = max_ncols if npics > max_ncols else npics\n    nrows = int(np.ceil(npics \/ max_ncols))\n    fig, axes = plt.subplots(nrows, ncols, figsize=(4*ncols, nrows * 4))        \n    axes = [axes] if npics == 1 else axes.ravel()\n    for ax in axes[npics:]: fig.delaxes(ax)\n    \n    for i, img_path, ax in zip(range(npics), img_paths, axes):\n        ax.imshow(plt.imread(img_path))\n        ax.set_xticks([])\n        ax.set_yticks([])\n    plt.subplots_adjust(wspace=0.1, hspace=0.1)\n\ndef show_pet(pet_id):\n    row_match = df_train[df_train[\"PetID\"] == pet_id]\n    d = {col: ser.iloc[0] for col, ser in row_match.items()}\n    description = d.pop(\"Description\")\n    text = \"\"\n    \n    for k in d.keys():\n        text += f\"{k:22}: {d[k]}\\n\"\n    print(text)\n    print(f\"< Description >\\n{description}\\n\")\n\n    show_pics(pet_id)","679c9589":"show_pet(rand_pet_id())","e5265dfa":"df_train[(df_train[\"Quantity\"] > 10 ) & (df_train[\"PhotoAmt\"] == 1)]","957f1170":"df_train[(df_train[\"Quantity\"] == 1 ) & (df_train[\"Description\"].str.lower().str.contains(\"puppies\"))]","0d3d67d4":"df_train[(df_train[\"Type\"] == \"Cat\") & (df_train[\"ImageDescription\"].str.contains(\"dog\"))]","06ce44d4":"## Conditions to detect outliers\n- `Quantity` == 1 and `Description` contains \"puppies\", \"kitties\", \"kittens\"\n- `Quantity` > 10 and `PhotoAmt` == 1\n- `Type` == \"Dog\" and `ImageDescription` == \"cat\"\n- `Type` == \"Cat\" and `ImageDescription` == \"dog\"\n\n## Outliers I have found so far\n|Pet ID|Reason|\n|:-|:-|\n|6a72cfda7|cat but breed2 is Akita which is dog breed|\n|3c778df64|type is dog but it's obviously a cat|\n|06634513c|gender should be mixed because description says \"3 female, 1 male\"|\n|1ef39cee1|4 dogs but quantity is 3|\n|f8619af42|1 dog but quantity is 20|\n|500327aed|1 dog but quantity is 20|\n|eff316e87|1 dog but quantity is 20|\n|fe481f81c|1 dog but quantity is 20|\n|140ef35de|1 dog but quantity is 20|\n|e9e4424a6|1 dog but quantity is 3|\n|5b5b2c882|multiple cats but quantity is 1|\n|ab13611c9|1 dog but quantity is 10|\n|ae14a91dc|Is she really brown or black?|\n|0ffe99b25|3 kittens and 1 mama cat but age is 2|\n|f102632f6|description says \"he\" is \"2\" years old but gender is female and age is 8|\n|9883a048e|puppies but quantity is 1|\n|3cc84c2f8|4 puppies but quantity is 1|\n|c0ab24656|These puppies|\n|ed6684f3a|4 puppies but quantity is 1|","63437ac6":"### Adoption Speed\n|Value|Description|\n|:-|:-|\n|**0**|Pet was adopted on the same day as it was listed. |\n|**1**|Pet was adopted between 1 and 7 days (1st week) after being listed. |\n|**2**|Pet was adopted between 8 and 30 days (1st month) after being listed. |\n|**3**|Pet was adopted between 31 and 90 days (2nd & 3rd month) after being listed. |\n|**4**|No adoption after 100 days of being listed. (There are no pets in this dataset that waited between 90 and 100 days).|","315142cb":"### Data Fields\n\n|Feature|Description|\n|:-|:-|\n|**PetID**|Unique hash ID of pet profile|\n|**AdoptionSpeed**|Categorical speed of adoption. Lower is faster. This is the value to predict. See below section for more info.|\n|**Type**|Type of animal (1 = Dog, 2 = Cat)|\n|**Name**|Name of pet (Empty if not named)|\n|**Age**|Age of pet when listed, in months|\n|**Breed1**|Primary breed of pet (Refer to BreedLabels dictionary)|\n|**Breed2**|Secondary breed of pet, if pet is of mixed breed (Refer to BreedLabels dictionary)|\n|**Gender**|Gender of pet (1 = Male, 2 = Female, 3 = Mixed, if profile represents group of pets)|\n|**Color1**|Color 1 of pet (Refer to ColorLabels dictionary)|\n|**Color2**|Color 2 of pet (Refer to ColorLabels dictionary)|\n|**Color3**|Color 3 of pet (Refer to ColorLabels dictionary)|\n|**MaturitySize**|Size at maturity (1 = Small, 2 = Medium, 3 = Large, 4 = Extra Large, 0 = Not Specified)|\n|**FurLength**|Fur length (1 = Short, 2 = Medium, 3 = Long, 0 = Not Specified)|\n|**Vaccinated**|Pet has been vaccinated (1 = Yes, 2 = No, 3 = Not Sure)|\n|**Dewormed**|Pet has been dewormed (1 = Yes, 2 = No, 3 = Not Sure)|\n|**Sterilized**|Pet has been spayed \/ neutered (1 = Yes, 2 = No, 3 = Not Sure)|\n|**Health**|Health Condition (1 = Healthy, 2 = Minor Injury, 3 = Serious Injury, 0 = Not Specified)|\n|**Quantity**|Number of pets represented in profile|\n|**Fee**|Adoption fee (0 = Free)|\n|**State**|State location in Malaysia (Refer to StateLabels dictionary)|\n|**RescuerID**|Unique hash ID of rescuer|\n|**VideoAmt**|Total uploaded videos for this pet|\n|**PhotoAmt**|Total uploaded photos for this pet|\n|**Description**|Profile write-up for this pet. The primary language used is English, with some in Malay or Chinese.|"}}