{"cell_type":{"92489fb2":"code","a3166ab6":"code","ce42c96f":"code","c1230b28":"code","9a3ff4be":"code","4df4aa9a":"code","94a09d06":"code","1ec71d14":"code","014e9892":"code","69f0baef":"code","69b114c8":"markdown","4c4bd5a4":"markdown","a7817569":"markdown","5db61fd8":"markdown","65287c30":"markdown","525d03d2":"markdown","28f2bd99":"markdown","9fdb70fb":"markdown","dcbe7382":"markdown"},"source":{"92489fb2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport re\nimport folium\nimport os\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","a3166ab6":"df = pd.read_csv('\/kaggle\/input\/russian-touris-attractions\/tourist_attractions.csv')\ndf.head()","ce42c96f":"df.info()","c1230b28":"def top_5(data, group_col, agg_col, agg, color_top_1, color_other, annotate_x, title, title_x, title_y):\n    group_by = data \\\n        .groupby(group_col, as_index = False) \\\n        .agg({agg_col : agg}) \\\n        .rename(columns = {'name' : 'count'}) \\\n        .sort_values('count', ascending = False) \\\n        .head(5) \\\n        .sort_values('count', ascending = True) \\\n        .reset_index(drop = True) \n\n    plt.figure(figsize = (9, 6))\n\n    plt.barh(y = group_by[group_col][:4], width = group_by['count'][:4], color = color_other)\n    plt.barh(y = group_by[group_col][4], width = group_by['count'][4], color = color_top_1)\n\n    sns.despine(bottom = True)\n\n    plt.tick_params(labelsize = 16, color = 'black', length = 0)\n    plt.xticks([])\n\n    plt.text(group_by['count'][4] + annotate_x, 4, f\"{group_by['count'][4]}\", color = 'black', fontsize = 16)\n    plt.text(group_by['count'][3] + annotate_x, 3, f\"{group_by['count'][3]}\", color = 'black', fontsize = 16)\n    plt.text(group_by['count'][2] + annotate_x, 2, f\"{group_by['count'][2]}\", color = 'black', fontsize = 16)\n    plt.text(group_by['count'][1] + annotate_x, 1, f\"{group_by['count'][1]}\", color = 'black', fontsize = 16)\n    plt.text(group_by['count'][0] + annotate_x, 0, f\"{group_by['count'][0]}\", color = 'black', fontsize = 16)\n\n\n    plt.title(title, color = 'black', fontsize = 28, fontweight = 'bold', x = title_x, y = title_y)\n\n    plt.show()","9a3ff4be":"top_5(\n    data = df,\n    group_col = 'type',\n    agg_col = 'name',\n    agg = 'count',\n    color_top_1 = 'crimson',\n    color_other = '#696969',\n    annotate_x = 20,\n    title = 'Top 5 types of attractions',\n    title_x = -0.17,\n    title_y = 1.1)","4df4aa9a":"top_5(\n    data = df,\n    group_col = 'region',\n    agg_col = 'name',\n    agg = 'count',\n    color_top_1 = 'crimson',\n    color_other = '#696969',\n    annotate_x = 5,\n    title = 'Top 5 regions of attractions',\n    title_x = 0,\n    title_y = 1.1)","94a09d06":"top_df = df \\\n    .query(\"(type in ['Monuments, sculptures, memorials', 'architecture', 'military glory', 'monasteries', 'Granges']) & \\\n           (region in ['St. Petersburg', 'Volgograd region', 'Nizhny Novgorod Region', 'Sverdlovsk region', 'Moscow']) & \\\n           (geolocation != 'Not found')\") \\\n    .reset_index(drop = True)\n\nplt.figure(figsize = (8, 4))\n\nplt.scatter(x = [0, 1], y = [len(df), len(top_df)], color = 'crimson', lw = 7, zorder = 3)\nsns.lineplot(x = [0, 1], y = [len(df), len(top_df)], color = '#696969', lw = 3)\n\nplt.yticks(range(0, 5001, 1000))\nplt.xticks([])\n\nplt.axis('off')\n\nplt.text(0, len(df) + 300, f\"df: {len(df)}\", fontsize = 16, color = 'black', fontweight = 'bold')\nplt.text(1, len(top_df) + 300, f\"top_df: {len(top_df)}\", fontsize = 16, color = 'black', fontweight = 'bold')\n\nplt.title('Number of observations', color = 'black', fontsize = 28, fontweight = 'bold', x = 0.4, y = 1.25)\nplt.show()","1ec71d14":"top_df['lat'] = top_df['geolocation'].apply(lambda x: x.split(' ')[0]).apply(lambda x:re.sub(r\"[(,')]|Decimal\", '', x))\ntop_df['long'] = top_df['geolocation'].apply(lambda x: x.split(' ')[1]).apply(lambda x:re.sub(r\"[(,')]|Decimal\", '', x))\ntop_df.head()","014e9892":"RUS = folium.Map(location = [70.0000, 120.0000], zoom_start = 3)\nfor lat, lng, locality in zip(list(top_df['lat']), list(top_df['long']), list(df['locality'])):\n    folium.Marker([lat, lng], \n                  icon=folium.Icon(color = 'gray'),\n                  popup = locality).add_to(RUS)\nRUS","69f0baef":"group_by_region_and_type = top_df \\\n    .groupby(['region', 'type'], as_index = False) \\\n    .agg({'name' : 'count'}) \\\n    .sort_values(['region', 'name'], ascending = False)\nfinal_df = group_by_region_and_type.pivot(index = 'region', columns = 'type', values = 'name').fillna(0).reset_index()\n\ntrace0 = go.Bar(\n    x = final_df['region'],\n    y = final_df['Granges'],\n    name = 'Granges',\n    text = final_df['Granges'],\n    textposition='outside'\n)\n\ntrace1 = go.Bar(\n    x = final_df['region'],\n    y = final_df['Monuments, sculptures, memorials'],\n    name = 'Monuments, sculptures, memorials',\n    text = final_df['Monuments, sculptures, memorials'],\n    textposition='outside' \n)\n\ntrace2 = go.Bar(\n    x = final_df['region'],\n    y = final_df['architecture'],\n    name = 'architecture',\n    text = final_df['architecture'],\n    textposition='outside' \n)\n\ntrace3 = go.Bar(\n    x = final_df['region'],\n    y = final_df['military glory'],\n    name = 'military glory',\n    text = final_df['military glory'],\n    textposition='outside' \n)\n\ntrace4 = go.Bar(\n    x = final_df['region'],\n    y = final_df['monasteries'],\n    name = 'monasteries',\n    text = final_df['monasteries'],\n    textposition='outside' \n)\n\ndata = [trace0, trace1, trace2, trace3, trace4]\nlayout = dict(\n    title = dict(\n        text = 'Number of attractions by type in regions',\n        font=dict(color='black', size = 28)))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","69b114c8":"**The \"latitude\" and \"longitude\" columns contain incorrect data. A lot of attractions are located outside of Russia.**","4c4bd5a4":"**Now I want to check how many attractions there are by type in the regions.**","a7817569":"**The dataset contains information about:**\n* name - name of attraction;\n* type - type of attraction;\n* region - the region where the attraction is located;\n* locality - the city where the attraction is located;\n* geolocation - latitude and longitude.","5db61fd8":"**After the filter, the number of observations decreased significantly. I will create columns with latitude and longitude.**","65287c30":"![](https:\/\/bigpicture.ru\/wp-content\/uploads\/2013\/10\/10russia05.jpg)","525d03d2":"**In the column \"locality\" ~ 900 null-values.**","28f2bd99":"* there are granges only in Moscow and the Sverdlovsk region, max in Moscow - 12 granges;\n* in all regions except the Sverdlovsk region, the number of monuments, sculptures and memorials is almost the same, max in St. Perersburg - 58;\n* the largest number of architecture in St. Petersburg - 130;\n* the largest number of military glory in Nizhny Novgorod Region - 15;\n* the largest number of monasteries in Nizhny Novgorod Region - 16.","9fdb70fb":"**The largest number of attractions - monnuments, sculptures, memorials, but the number of attractions with the \"architecture\" type is not much less.** ","dcbe7382":"**The largest number of attractions is located in St. Petersburg. St. Petersburg is called the cultural capital of Russia. I will filter the data by top 5 types and top 5 regions and using folium map to visualize the location of attractions.**"}}