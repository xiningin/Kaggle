{"cell_type":{"9e6e17ca":"code","e3f29ef7":"code","366058de":"code","b52a0a87":"code","9a3a82ee":"markdown","3eb5dc62":"markdown","6d4c7aac":"markdown","7500b116":"markdown","8ea9d91b":"markdown","3c20cb87":"markdown","3c92c394":"markdown"},"source":{"9e6e17ca":"import pandas as pd\ndf=pd.read_csv('..\/input\/one-million-seeds-and-map-sizes-for-lux-2021\/lux_seed_sizes.csv')\ndf.groupby('size').count()","e3f29ef7":"df.groupby('size').apply(lambda x: x.sample(n=3, random_state=42)).reset_index(drop = True)","366058de":"def get_seeds_for_sizes(sizes, random_state=1):\n    map_sizes = [12,16,24,32]\n    out = []\n    for map_size, n in zip(map_sizes, sizes[:len(map_sizes)]):\n        out.extend(df[df['size']==map_size].sample(n=n, random_state=random_state).values.tolist())\n    return out","b52a0a87":"get_seeds_for_sizes([1,0,2,3],random_state=42) # random_state for reproducability","9a3a82ee":"Let's make a simple function to sample from the dataset.","3eb5dc62":"Let's take 3 of each size","6d4c7aac":"# Utility - One million seeds with map sizes","7500b116":"The file is a simple csv of seed and size. We'll use pandas to inspect it.","8ea9d91b":"And grab 1x16, 0x16, 2x24, 3x32 maps","3c20cb87":"Getting the map size for a given seed, without running the match, does not appear straightforward.\n\nRather than the mapsize being based on the random seed (sensible?), it is based on the javascript calculated random number generated using that seed (not quite as sensible?).\n\nI used the luxai javascript seed generator to output map sizes for one million seeds.\n\nWhy?\n\nWe might want our local tests to:\n- play equal numbers of [12,16,24,32] matches\n- only play a given size like 12 for speed of evaluation\n- only play a given size to tune against that size\n","3c92c394":"Done!"}}