{"cell_type":{"a4d9eec2":"code","3c8346a1":"code","77d47b09":"code","f9e7c7b1":"code","428b7de9":"code","66fc7ec6":"code","5901062f":"code","3e109acf":"code","7b9f3df5":"code","2f3ef77a":"code","8f3c19c7":"code","3c59c57c":"code","75c0c5b3":"code","58112341":"code","7397d153":"code","a04334c3":"code","48b8ee75":"code","9d9932e8":"code","81e378e8":"markdown","aba1b908":"markdown","9adf4423":"markdown","d3018bfc":"markdown","7263c440":"markdown","0fd38a1b":"markdown","e38a1a7e":"markdown","6d5ada75":"markdown","ec2181c5":"markdown","9df8f941":"markdown"},"source":{"a4d9eec2":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport pycountry\npy.init_notebook_mode(connected=True)\nimport folium \nfrom folium import plugins\nfrom folium.plugins import MarkerCluster\n\n\n# Graphics in retina format \n%config InlineBackend.figure_format = 'retina' \n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\n#plt.rcParams['image.cmap'] = 'viridis'\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')","3c8346a1":"# Reading the dataset\ndata= pd.read_csv(\"\/kaggle\/input\/2020-corona-virus-timeseries\/COVID-19_geo_timeseries_ver_0311.csv\")\ndata.head()","77d47b09":"data = data[data.data_source=='jhu']\n# Convert Last Update column to datetime64 format\ndata['update_time'] = pd.to_datetime(data['update_time'])\nprint(data['update_time'].dtype)\n# Extract date from the timestamp\ndata['update_date'] = data['update_time'].dt.date","f9e7c7b1":"from matplotlib import pyplot as plt\nimport plotly.graph_objects as go\nfrom fbprophet import Prophet\nimport pycountry\nimport plotly.express as px\n\ndf = data[data.data_source=='jhu']\ndf_agg = df.groupby('update_date').agg({'confirmed_cases':'sum','deaths':'sum','recovered':'sum'}).reset_index()","428b7de9":"fig = go.Figure()\nfig.add_trace(go.Bar(x=df_agg['update_date'],\n                y=df_agg['confirmed_cases'],\n                name='Confirmed',\n                marker_color='blue'\n                ))\nfig.add_trace(go.Bar(x=df_agg['update_date'],\n                y=df_agg['deaths'],\n                name='Deaths',\n                marker_color='Red'\n                ))\nfig.add_trace(go.Bar(x=df_agg['update_date'],\n                y=df_agg['recovered'],\n                name='Recovered',\n                marker_color='Green'\n                ))\n\nfig.update_layout(\n    title='Worldwide Corona Virus Cases - Confirmed, Deaths, Recovered',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Number of Cases',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.show()","66fc7ec6":"# Quick glimpse of the data info\ndata.info()","5901062f":"# Countries affected\ncountries = data[(data['country']!='Others') & (data['country']!='Undisclosed')]['country'].unique().tolist()\n# Use this print trick to get more readable list output\nprint(*countries, sep = \"\\n\")\nprint(\"\\nTotal countries affected by COVID-19: \",len(countries))","3e109acf":"# get the latest timestamp\nlatest_date = data['update_time'].max()\n# extract year, month, day from the latest timestamp so we can use it just report the latest data\nyear = latest_date.year\nmonth = latest_date.month\n# adjust for timezone\nday = latest_date.day - 1\n\n# Filter to only include the latest day data\nfrom datetime import date\ndata_latest = data[data['update_time'] > pd.Timestamp(date(year,month,day))]\ndata_latest.head()","7b9f3df5":"# Creating a dataframe with total no of confirmed cases for every country as of the latest available date\naffected_country_latest = data_latest.groupby(['country','country_code','region','latitude','longitude','country_flag']).agg({'update_time': np.max}).reset_index()\nkey = ['country','country_code','region','latitude','longitude','country_flag','update_time']\nglobal_cases = pd.merge(data_latest, affected_country_latest, how='inner', on=key).drop_duplicates().groupby(key).max().sort_values(by=['confirmed_cases'],ascending=False).reset_index()\nglobal_cases.index+=1\nglobal_cases_columns = global_cases.columns.tolist()\nglobal_cases_columns.remove('update_time')\nglobal_cases = global_cases[global_cases_columns]\nglobal_cases","2f3ef77a":"shape_url = '\/kaggle\/input\/python-folio-country-boundaries\/world-countries.json'\nworld_geo = shape_url\n\nm = folium.Map(location=[35.86166,104.195397], zoom_start=3,tiles='Stamen Toner')\n\nfolium.Choropleth(\n    geo_data=world_geo,\n    name='choropleth',\n    data=global_cases,\n    columns=['country', 'confirmed_cases'],\n    key_on='feature.properties.name',\n    fill_color='OrRd',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Number of Confirmed Cases'\n).add_to(m)\n\nfor lat, lon, value, name in zip(global_cases['latitude'], global_cases['longitude'], global_cases['confirmed_cases'], global_cases['country']):\n    folium.CircleMarker(\n        [lat, lon],\n        radius=10,\n        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                 '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),        \n        color='orange',\n        fill=True,\n        fill_color='orange',\n        fill_opacity=0.7\n    ).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm","8f3c19c7":"# Creating a dataframe with total no of confirmed cases for every country for all available dates\nkey1 = ['country','country_code','region','latitude','longitude','country_flag','update_date']\nkey2 = ['country','country_code','region','latitude','longitude','country_flag','update_date','confirmed_cases','deaths','recovered']\nkey3 = ['country','country_code','region','latitude','longitude','country_flag']\ndf_full = data[data.data_source == 'jhu'][key2].drop_duplicates().groupby(key1).max().reset_index()\n# df_full = data[key2].drop_duplicates().groupby(key1).max().sort_values(by=['country','update_date']).groupby(key3).cumsum().sort_values(by=['confirmed_cases','update_date'],ascending=[False,False]).reset_index()\n# df_full = df_full.groupby(key1).agg({'confirmed_cases':np.cumsum, 'deaths':np.cumsum ,'recovered':np.cumsum}).reset_index()\ndf_full[['confirmed_cases','deaths','recovered']] = df_full[['confirmed_cases','deaths','recovered']].fillna(0)\ndf_full['log_confirmed_cases'] = np.log(df_full['confirmed_cases'])\ndf_full.sort_values(by=['confirmed_cases','update_date'],ascending=[False,False]).head(10)","3c59c57c":"import plotly\nimport plotly.graph_objs as go\nfrom datetime import datetime\nfrom datetime import timedelta\n\nscl = [[0.0, '#e7e1ef'],[0.2, '#d4b9da'],[0.4, '#c994c7'], \n       [0.6, '#df65b0'],[0.8, '#dd1c77'],[1.0, '#980043']] # reds\n\ndata_slider = []\nall_dates = df_full['update_date'].sort_values().unique()\nfor m,d in zip(pd.DatetimeIndex(all_dates).month,pd.DatetimeIndex(all_dates).day):\n    df_selected = df_full[(pd.DatetimeIndex(df_full['update_date']).month==m) & (pd.DatetimeIndex(df_full['update_date']).day==d)]\n    df_selected['text'] =   'Date: '+ df_selected['update_date'].astype(str) \\\n                            + '<br>' + 'Confirmed Cases: ' + df_selected['confirmed_cases'].astype(str) \\\n                            + '<br>' + 'Deaths: '+ df_selected['deaths'].astype(str) \\\n                            + '<br>' + 'Recovered: '+ df_selected['recovered'].astype(str)\n    data_one_day = dict(\n        type='choropleth',\n        colorscale = scl,\n        autocolorscale=False,\n        locations = df_selected['country'].tolist(),\n        z = df_selected['log_confirmed_cases'].tolist(),\n        locationmode = 'country names',\n        text = df_selected['text'],\n        colorbar_title = 'Confirmed Cases (Logarithm)'\n    )\n    data_slider.append(data_one_day)\n\nsteps = []\nfor i in range(len(data_slider)):\n    step = dict(method='restyle',\n                args=['visible', [False] * len(data_slider)],\n                label=(datetime.strptime('2020-01-21','%Y-%m-%d') + timedelta(days=i)).strftime('%Y-%m-%d')\n               )\n    step['args'][1][i] = True\n    steps.append(step)\n\nsliders = [dict(active=0, pad={\"t\": 1}, steps=steps)]  \n\nlyt = dict(\n    geo=dict(scope='world'), \n    sliders=sliders, \n    title_text = 'COVID-19 Trend Analysis (World)' + '<br>' + '(Hover for breakdown)'\n)\nfig = dict(data=data_slider, layout=lyt)\nplotly.offline.iplot(fig)","75c0c5b3":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n#Mainland China\nkey = ['province','country']\nChina = data_latest[data_latest['country']=='China'].groupby(key).agg({'confirmed_cases':np.max,'deaths':np.max,'recovered':np.max,'update_date':np.max}).fillna(0).reset_index()\nChina['log_confirmed_cases'] = np.log(China['confirmed_cases'])\nChina['log_recovered'] = np.log(China['recovered'])\nChina['log_deaths'] = np.log(China['deaths'])\nChina['norm_confirmed_cases'] = scaler.fit_transform(China[['confirmed_cases']])\nChina['norm_recovered'] = scaler.fit_transform(China[['recovered']])\nChina['norm_deaths'] = scaler.fit_transform(China[['deaths']])\nChina = China.sort_values(by='confirmed_cases',ascending=False)\nChina","58112341":"f, ax = plt.subplots(figsize=(12, 8))\n\nsns.set_color_codes(\"pastel\")\n\nsns.barplot(x=\"confirmed_cases\", y=\"province\", data=China[1:],\n            label=\"confirmed_cases\", color=\"r\")\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"recovered\", y=\"province\", data=China[1:],\n            label=\"recovered\", color=\"g\")\n\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlim=(0, 1500), ylabel=\"\",xlabel=\"# cases\",title=\"Confirmed vs Recovered\")\nsns.despine(left=True, bottom=True)","7397d153":"# prepare China Mainland data\nchina_coordinates= pd.read_csv(\"..\/input\/chinese-cities\/china_coordinates.csv\")\nchina_coordinates.rename(columns={'admin':'province'},inplace=True)\nchina_coordinates = china_coordinates[(china_coordinates.capital == 'admin') | (china_coordinates.capital == 'primary')]\nchina_merged = China.merge(china_coordinates,on='province', how='left')\n\nkey_china = ['province','lat','lng','confirmed_cases','recovered','deaths','log_confirmed_cases','log_recovered','log_deaths','norm_confirmed_cases','norm_recovered','norm_deaths']\nchina_merged = china_merged[key_china].dropna()\nchina_merged","a04334c3":"import json\nimport branca\nlatitude = 30.86166\nlongitude = 114.195397\n\nchina_shape_url = '\/kaggle\/input\/china-regions-map\/china-provinces.json'\n\nchina_confirmed_colorscale = branca.colormap.linear.YlOrRd_09.scale(0, 2000)\nchina_confirmed_series = china_merged.set_index('province')['confirmed_cases']\n\ndef confirmed_style_function(feature):\n    china_show = china_confirmed_series.get(str(feature['properties']['NAME_1']), None)\n    return {\n        'fillOpacity': 0.5,\n        'weight': 0,\n        'fillColor': '#black' if china_show is None else china_confirmed_colorscale(china_show)\n    }\n\nchina_confirmed_map = folium.Map(location=[latitude, longitude], zoom_start=4.5,tiles='Stamen Toner')\n\nfolium.TopoJson(\n    json.load(open(china_shape_url)),\n    'objects.CHN_adm1',\n    style_function=confirmed_style_function\n).add_to(china_confirmed_map)\n\nfor lat, lon, rd, value, name in zip(china_merged['lat'], china_merged['lng'], china_merged['log_confirmed_cases'], china_merged['confirmed_cases'], china_merged['province']):\n    folium.CircleMarker([lat, lon],\n                        radius=rd*4,\n                        tooltip = ('Province: ' + str(name).capitalize() + '<br>'\n                        'Confirmed Cases: ' + str(f\"{int(value):,}\") + '<br>'),\n                        color='none',\n                        fill_color='purple',\n                        fill_opacity=0.5 ).add_to(china_confirmed_map)\n\nchina_confirmed_map","48b8ee75":"china_deceased_colorscale = branca.colormap.linear.PuRd_09.scale(0, 20)\nchina_deceased_series = china_merged.set_index('province')['deaths']\n\ndef deceased_style_function(feature):\n    china_show = china_deceased_series.get(str(feature['properties']['NAME_1']), None)\n    return {\n        'fillOpacity': 0.5,\n        'weight': 0,\n        'fillColor': '#black' if china_show is None else china_deceased_colorscale(china_show)\n    }\n\nchina_deceased_map = folium.Map(location=[latitude, longitude], zoom_start=4.5,tiles='Stamen Toner')\n\nfolium.TopoJson(\n    json.load(open(china_shape_url)),\n    'objects.CHN_adm1',\n    style_function=deceased_style_function\n).add_to(china_deceased_map)\n\nfor lat, lon, rd, value, name in zip(china_merged['lat'], china_merged['lng'], china_merged['log_deaths'], china_merged['deaths'], china_merged['province']):\n    folium.CircleMarker([lat, lon],\n                        radius=rd*4,\n                        tooltip = ('Province: ' + str(name).capitalize() + '<br>'\n                        'Deaths: ' + str(f\"{int(value):,}\") + '<br>'),\n                        color='red',\n                        fill_color='black',\n                        fill_opacity=0.5 ).add_to(china_deceased_map)\nchina_deceased_map\n","9d9932e8":"china_recovered_colorscale = branca.colormap.linear.YlGn_09.scale(0, 500)\nchina_recovered_series = china_merged.set_index('province')['recovered']\n\ndef recovered_style_function(feature):\n    china_show = china_recovered_series.get(str(feature['properties']['NAME_1']), None)\n    return {\n        'fillOpacity': 0.5,\n        'weight': 0,\n        'fillColor': '#black' if china_show is None else china_recovered_colorscale(china_show)\n    }\n\nchina_recovered_map = folium.Map(location=[latitude, longitude], zoom_start=4.5,tiles='Stamen Toner')\n\nfolium.TopoJson(\n    json.load(open(china_shape_url)),\n    'objects.CHN_adm1',\n    style_function=recovered_style_function\n).add_to(china_recovered_map)\n\nfor lat, lon, rd, value, name in zip(china_merged['lat'], china_merged['lng'], china_merged['log_recovered'], china_merged['recovered'], china_merged['province']):\n    folium.CircleMarker([lat, lon],\n                        radius=rd*4,\n                        tooltip = ('Province: ' + str(name) + '<br>'\n                        'Recovered: ' + str(f\"{int(value):,}\") + '<br>'),\n                        color='none',\n                        fill_color='#6baed6',\n                        fill_opacity=0.5 ).add_to(china_recovered_map)\nchina_recovered_map","81e378e8":"## Generating world map","aba1b908":"# COVID-19 Visual Analysis\n\nOn 31 December 2019, WHO was informed of a cluster of cases of pneumonia of unknown cause detected in Wuhan City, Hubei Province of China. 2019 Novel Coronavirus (COVID-19) is a virus (more specifically, a coronavirus) identified as the cause of an outbreak of respiratory illness first detected in Wuhan, China.\n\nIn addition to providing care to patients and isolating new cases as they are identified, Chinese public health officials have reported that they remain focused on continued contact tracing, conducting environmental assessments at the wholesale market, and investigations to identify the pathogen causing the outbreak. *(source: WHO)","9adf4423":"## Confirmed vs Recovered figures of Provinces of China\nDue to the total number of cases in Hubei Province is much larger than the rest provinces, for better visualization, it's not shown here.","d3018bfc":"# [Interactive] Heat Map of Recovered Cases by China's Provinces","7263c440":"# [Interactive] Heat Map of Deceased Cases by China's Provinces","0fd38a1b":"# Interactive World Map with Time Steps (All Dates)","e38a1a7e":"# [Interactive] Heat Map of Confirmed Cases by China's Provinces","6d5ada75":"# China Visual Analysis by Provinces","ec2181c5":"## Countries affected by the COVID-19","9df8f941":"## Current status worldwide as of Feb 12, 2020"}}