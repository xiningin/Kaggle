{"cell_type":{"1c0ad571":"code","2eb6f7bb":"code","0b8edf1e":"code","2606b058":"code","59b6927d":"code","2843ab1e":"code","cdead4ce":"code","b309cb2d":"code","51aded10":"code","0effbd10":"code","cc4d2ffe":"code","144c3459":"code","1641aab9":"code","558455c3":"code","499a0312":"code","6f2e1f70":"code","f6e90682":"code","10f273e2":"code","bab3c756":"code","cc67ba04":"code","a093ad75":"code","e106ed42":"code","6c879a0d":"markdown","c65322dc":"markdown","e0fe803d":"markdown","985e4e6f":"markdown","e4b79a94":"markdown","00cec65f":"markdown","10b765ac":"markdown","e9773304":"markdown","da0e9fa5":"markdown","8254c22c":"markdown","c6e47772":"markdown","e5f97d57":"markdown","eafe42f9":"markdown","b6dfbd7e":"markdown","ca36dc66":"markdown","b8283ce1":"markdown","4444c9bc":"markdown","0f07fc92":"markdown","e8b2b6fc":"markdown","e33551c3":"markdown"},"source":{"1c0ad571":"#Simple Data processing\nimport numpy as np #linear algebra\nimport pandas as pd # data processing, .csv load\n\n#Feature Selection\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n#Data Visualization\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.ticker import NullFormatter\nimport matplotlib.ticker as ticker\nimport itertools #For Confusion Matrix\n%matplotlib inline\nimport seaborn as sns\n\n# Scaling\nfrom sklearn import preprocessing #For data normalization\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV # For parameterization and splitting data\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics # For Accuracy\n\n#Classification Algorithms\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.linear_model import RidgeClassifier","2eb6f7bb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0b8edf1e":"heart=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nheart","2606b058":"heart.describe()","59b6927d":"heart.info()","2843ab1e":"print(heart.columns.unique)","cdead4ce":"#Separating the data to asses with feature selection \nX_feat=heart[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]\ny_feat=heart['DEATH_EVENT']","b309cb2d":"#Feature Selection\nbestfeatures = SelectKBest(score_func=chi2, k=5)\nfit = bestfeatures.fit(X_feat,y_feat)\ndfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X_feat.columns)\n#concat two dataframes for better visualization \nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Factors','Score']  #naming the dataframe columns\nprint(featureScores.nlargest(5,'Score'))  #print 5 best features","51aded10":"train_accuracy= []\naccuracy_list = []\nalgorithm = []\n\nX_train,X_test,y_train,y_test = train_test_split(heart[['platelets','time','creatinine_phosphokinase','ejection_fraction','age']]\n                                                 ,heart['DEATH_EVENT'],test_size=0.2, random_state=0)\nprint(\"X_train shape :\",X_train.shape)\nprint(\"Y_train shape :\",y_train.shape)\nprint(\"X_test shape :\",X_test.shape)\nprint(\"Y_test shape :\",y_test.shape)","0effbd10":"scaler_ss=preprocessing.StandardScaler()","cc4d2ffe":"X_train_scaled=scaler_ss.fit_transform(X_train)\nX_test_scaled=scaler_ss.transform(X_test)","144c3459":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion Matrix',\n                          cmap=plt.cm.BuGn):\n\n    print(cm)\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","1641aab9":"Log_Reg=LogisticRegression(C=1, class_weight='balanced', dual=False,\n                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',\n                   random_state=0, solver='lbfgs', tol=0.0001, verbose=0,\n                   warm_start=False)\nLog_Reg.fit(X_train_scaled, y_train)\ny_reg=Log_Reg.predict(X_test_scaled)\nprint(\"Train Accuracy {0:.3f}\".format(Log_Reg.score(X_train_scaled, y_train)))\nprint('Test Accuracy' \"{0:.3f}\".format(metrics.accuracy_score(y_test, y_reg)))\ncm = metrics.confusion_matrix(y_test, y_reg)\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cm, classes=['Alive', 'Death'],\n                          title='Logistic Regression')\naccuracy_list.append(metrics.accuracy_score(y_test, y_reg)*100)\ntrain_accuracy.append(Log_Reg.score(X_train_scaled, y_train))\nalgorithm.append('Logistic Regression')","558455c3":"SVC_param={'kernel':['sigmoid','rbf','poly'],'C':[1],'decision_function_shape':['ovr'],'random_state':[0]}\nSVC_pol=SVC()\nSVC_parm=GridSearchCV(SVC_pol, SVC_param, cv=5)\nSVC_parm.fit(X_train_scaled, y_train)\ny_pol=SVC_parm.predict(X_test_scaled)\nprint(\"The best parameters are \",SVC_parm.best_params_)\nprint(\"Train Accuracy {0:.3f}\".format(SVC_parm.score(X_train_scaled, y_train)))\nprint('Test Accuracy' \"{0:.3f}\".format(metrics.accuracy_score(y_test, y_pol)))\ncm = metrics.confusion_matrix(y_test, y_pol)\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cm, classes=['Alive', 'Death'],\n                          title='SVM')\ntrain_accuracy.append(SVC_parm.score(X_train_scaled, y_train))\naccuracy_list.append(metrics.accuracy_score(y_test, y_pol)*100)\nalgorithm.append('SVM')","499a0312":"error = []\n# Calculating error for K values between 1 and 40\nfor i in range(1, 40):\n    K_NN =KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=i, p=2,\n                     weights='distance')\n    K_NN.fit(X_train_scaled, y_train)\n    pred_i = K_NN.predict(X_test_scaled)\n    error.append(np.mean(pred_i != y_test))","6f2e1f70":"plt.figure(figsize=(12, 6))\nplt.plot(range(1, 40), error, color='red', linestyle='dashed', marker='o',\n         markerfacecolor='blue', markersize=10)\nplt.title('Error Rate K Value')\nplt.xlabel('K Value')\nplt.ylabel('Mean Error')","f6e90682":"K_NN =KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=None, n_neighbors=2, p=2,\n                     weights='distance')\nK_NN.fit(X_train_scaled, y_train)\ny_KNN=K_NN.predict(X_test_scaled)\nprint(\"Train Accuracy {0:.3f}\".format(K_NN.score(X_train_scaled, y_train)))\nprint('Test Accuracy' \"{0:.3f}\".format(metrics.accuracy_score(y_test, y_KNN)))\ncm = metrics.confusion_matrix(y_test, y_KNN)\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cm, classes=['Alive', 'Death'],\n                          title='KNN')\ntrain_accuracy.append(K_NN.score(X_train_scaled, y_train))\naccuracy_list.append(metrics.accuracy_score(y_test, y_KNN)*100)\nalgorithm.append('KNN')","10f273e2":"RFC_param={'max_depth':[1,2,3,4,5],'n_estimators':[10,25,50,100,150],'random_state':[None],\n           'criterion':['entropy','gini'],'max_features':[0.5]}\nRFC=RandomForestClassifier()\nRFC_parm=GridSearchCV(RFC, RFC_param, cv=5)\nRFC_parm.fit(X_train_scaled, y_train)\ny_RFC=RFC_parm.predict(X_test_scaled)\nprint(\"The best parameters are \",RFC_parm.best_params_)\nprint(\"Train Accuracy {0:.3f}\".format(RFC_parm.score(X_train_scaled, y_train)))\nprint('Test Accuracy' \"{0:.3f}\".format(metrics.accuracy_score(y_test, y_RFC)))\ncm = metrics.confusion_matrix(y_test, y_RFC)\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cm, classes=['Alive', 'Death'],\n                          title='RFC')\ntrain_accuracy.append(RFC_parm.score(X_train_scaled, y_train))\naccuracy_list.append(metrics.accuracy_score(y_test, y_RFC)*100)\nalgorithm.append('Random Forest')","bab3c756":"GBC_parma={'loss':['deviance','exponential'],'n_estimators':[10,25,50,100,150],'learning_rate':[0.1,0.25, 0.5, 0.75],\n          'criterion':['friedman_mse'], 'max_features':[None],'max_depth':[1,2,3,4,5,10],'random_state':[None]}\nGBC = GradientBoostingClassifier()\nGBC_parm=GridSearchCV(GBC, GBC_parma, cv=5)\nGBC_parm.fit(X_train_scaled, y_train)\ny_GBC=GBC_parm.predict(X_test_scaled)\nprint(\"The best parameters are \",GBC_parm.best_params_)\nprint(\"Train Accuracy {0:.3f}\".format(GBC_parm.score(X_train_scaled, y_train)))\nprint('Test Accuracy' \"{0:.3f}\".format(metrics.accuracy_score(y_test, y_GBC)))\ncm = metrics.confusion_matrix(y_test, y_GBC)\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cm, classes=['Alive', 'Death'],\n                          title='GBC')\ntrain_accuracy.append(GBC_parm.score(X_train_scaled, y_train))\naccuracy_list.append(metrics.accuracy_score(y_test, y_GBC)*100)\nalgorithm.append('GBC')","cc67ba04":"RC_parma={'solver':['svd','lsqr','cholesky'],'alpha':[0,0.5,0.75,1,1.5,2],'normalize':[True,False]}\nRC=RidgeClassifier()\nRC_parm=GridSearchCV(RC, RC_parma, cv=5)\nRC_parm.fit(X_train_scaled, y_train)\ny_RC=RC_parm.predict(X_test_scaled)\nprint(\"The best parameters are \",RC_parm.best_params_)\nprint(\"Train Accuracy {0:.3f}\".format(RC_parm.score(X_train_scaled, y_train)))\nprint('Test Accuracy' \"{0:.3f}\".format(metrics.accuracy_score(y_test, y_RC)))\ncm = metrics.confusion_matrix(y_test, y_RC)\nnp.set_printoptions(precision=2)\nplt.figure()\nplot_confusion_matrix(cm, classes=['Alive', 'Death'],\n                          title='Ridge Classifier')\ntrain_accuracy.append(RC_parm.score(X_train_scaled, y_train))\naccuracy_list.append(metrics.accuracy_score(y_test, y_RC)*100)\nalgorithm.append('Ridge Classifier')","a093ad75":"#Train Accuracy\nf,ax = plt.subplots(figsize = (10,5))\nsns.barplot(x=train_accuracy,y=algorithm,palette = sns.dark_palette(\"blue\",len(accuracy_list)))\nplt.xlabel(\"Accuracy\")\nplt.ylabel(\"Algorithm\")\nplt.title('Algorithm Train Accuracy')\nplt.show()","e106ed42":"#Testing Accuracy\nf,ax = plt.subplots(figsize = (10,5))\nsns.barplot(x=accuracy_list,y=algorithm,palette = sns.dark_palette(\"blue\",len(accuracy_list)))\nplt.xlabel(\"Accuracy\")\nplt.ylabel(\"Algorithm\")\nplt.title('Algorithm Test Accuracy')\nplt.show()","6c879a0d":"<a id=\"1\"><\/a>\n## Importing Libraries","c65322dc":"<a id=\"7.1\"><\/a>\n## Logistic Regression","e0fe803d":"<a id=\"7.4\"><\/a>\n## Random Forest\nBy using GRIDSearchCV the best parameters will be decided for the model.","985e4e6f":"<a id=\"9\"><\/a>\n# Evaluation of Accuracy","e4b79a94":"<a id=\"7\"><\/a>\n# Machine Learning\n<b>Alive is representative of (0) while Death is (1)  <\/b>","00cec65f":"# Confusion Matrix","10b765ac":"<a id=\"7.2\"><\/a>\n## Support Vector Machine\nBy using GRIDSearchCV the best kernel will be decided for the model.","e9773304":"<a id=\"7.3\"><\/a>\n## K-Nearest Neighbor\nFirst we need to select the best value of K for the highest accuracy in the model.","da0e9fa5":"Looking at the error helps decide the best K-Value given the parameters. The lower the error at K the better accuracy there will be.","8254c22c":"<a id=\"7.6\"><\/a>\n## Ridge Classifier\nBy using GRIDSearchCV the best parameters will be decided for the model.","c6e47772":"<a id=\"3\"><\/a>\n# Exploring Data","e5f97d57":"## Table of Contents\n\n[1.Importing Libraries](#1) <br\/>\n[2.Importing Data](#2) <br\/>\n[3.Exploring Data](#3) <br\/>\n[4.Feature Selection](#3) <br\/>\n[5.Splitting the Data](#4) <br\/>\n[6.Feature Scaling (Normalization)](#5) <br\/>\n[7.Machine Learning](#6) <br\/>\n    [7.1.Logistic Regression](#7.1) <br\/>\n    [7.2.Support Vector Machine](#7.2) <br\/>\n    [7.3.K-Nearest Neighbor](#7.3) <br\/>\n    [7.4.Random Forest](#7.4) <br\/>\n    [7.5.Gradient Boosting](#7.5) <br\/>\n    [7.6.Ridge Classifier](#7.6) <br\/>\n[8.Evaluation of Acuracy](#9) <br\/>\n[9.Discussion](#10) <br\/>\n","eafe42f9":"<a id=\"10\"><\/a>\n# Discussion\n- Using the KBest approach with $Chi^{2}$ score can be an effective approach for feature selection.\n- However, other methods for this data set in feature selection should be suggested such as a correlation matrix or tree importance based selection method\n- Training accuracy does not mean the model will predict as well and models with lower training accuracy can predict better\n- Lastly, tree ensembles may be a better selection for this type of data set with the given features used.\n- If this notebook is helpful please provide an upvote!\n- Feed back is also really nice!","b6dfbd7e":"<a id=\"6\"><\/a>\n# Feature Scaling (Normalization)\nTo remove outlier bias the formula $z=(x-u)\/s$ is used first on the training set then applied to the testing set","ca36dc66":"# <u> Death Prediction by Heart Failure<\/u>\n<u> By: Christopher Smith https:\/\/github.com\/CWSmith022\/Learning.git<\/u>\n\nThe published data is from: <u> Davide Chicco, Giuseppe Jurman: Machine learning can predict survival of patients with heart failure from serum creatinine and ejection fraction alone. BMC Medical Informatics and Decision Making 20, 16 (2020). <\/u>\n\nThe .csv file was obtained from: https:\/\/www.kaggle.com\/andrewmvd\/heart-failure-clinical-data\n\n\nHeart disease is the leading cause of death for people in the United States. The development of models for prediction for potential of heart disease related death could be important for saving lives. Here, an approach using tools in the sci-kit learn library will be used for prediction of deaths by heart attacks. The process starts by feature selection with the KBestFunction by $Chi^{2}$ score, then the data is preprocessed to be used for several supervised Machine Learning Algorithms.\n\nThe Algorithms used are:\n\n- Logistic Regression\n- Support Vector Machines\n- K-Nearest Neighbors\n- Random Forest\n- Gradient Boosting\n- Ridge Classifier\n\n## <u> Logistic Regression <\/u> \nA model that is used statistically for binary dependent variables based on the probability of an event occuring. This can be further extended for several variables in a classification setting for multi-class prediction.\n    \n## <u> Support Vector Machines (SVM) <\/u>\nCommonly used for classification tasks, SVM's function by a Kernel which draws points on a hyperplane and uses a set of vectors to separate data points. This separation of data points creates a decision boundary for where a new data point can be predicted for a specific class label. \n\n## <u> K-Nearest Neighbors <\/u>\nSimply, an algorithm that clusters the data and by a measure of distance to the 'k' nearest points votes for a specific class prediction.\n\n## <u> Random Forest <\/u> \nAn ensemble method that estimates several weak decision trees and combines the mean to create an uncorrelated forest at the end. The uncorrelated forest should be able to predict more accurately than an individual tree.\n\n## <u> Gradient Boosting <\/u>\nSimilar to Random Forest, Gradient Boosting builds trees one at a time then ensembles them as each one is built.\n\n## <u> Ridge Classifier <\/u>\nNormalizes data then treats problem as a multi-output regression task.","b8283ce1":"<a id=\"2\"><\/a>\n# Importing Data","4444c9bc":"<a id=\"5\"><\/a>\n# Splitting The Data","0f07fc92":"<a id=\"4\"><\/a>\n# Feature Selection","e8b2b6fc":"<a id=\"7.5\"><\/a>\n## Gradient Boosting Classifier\nBy using GRIDSearchCV the best parameters will be decided for the model.","e33551c3":"By using KBest selection with the $Chi^{2}$ scorer that the top 5 Factors that could be related to 'DEATH_EVENT' are shown above and these will be used here on out for prediction of 'DEATH_EVENT'."}}