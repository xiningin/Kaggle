{"cell_type":{"41b5ab3f":"code","d37e131a":"code","b635ad87":"code","13a01806":"code","f961cdea":"code","7bdd0655":"code","500f2ddb":"code","34172101":"code","e4f6b275":"code","2939491b":"code","ec0ee3cc":"code","6c9ea163":"code","8619fca3":"markdown","cf7ac0cb":"markdown","d391f0af":"markdown","3ce0a52e":"markdown","ed061e6d":"markdown","b714228d":"markdown","14ffd256":"markdown","8a3a2587":"markdown","71d351bb":"markdown","3d59f75a":"markdown","dcaa44f5":"markdown","9c4608a7":"markdown","c986ae2d":"markdown"},"source":{"41b5ab3f":"import pandas as pd\n\ndf = pd.read_csv('..\/input\/heuristic-model\/seattle_weather_1948-2017.csv')\n\nnumrows = 25549 # can be as large as 25549","d37e131a":"heuristic_df = pd.DataFrame({'yesterday':[0.0]*numrows,\n              'today':[0.0]*numrows,\n              'tomorrow':[0.0]*numrows,\n              'guess':[False]*numrows, #logical guess\n              'rain_tomorrow':[False]*numrows, #historical observation\n              'correct':[False]*numrows, #TRUE if your guess matches the historical observation\n              'true_positive':[False]*numrows, #TRUE If you said it would rain and it did\n              'false_positive':[False]*numrows,#TRUE If you sait id would rain and it didn't\n              'true_negative':[False]*numrows, #TRUE if you said it wouldn't rain and it didn't\n              'false_negative':[False]*numrows}) #TRUE if you said it wouldn't raing and it did","b635ad87":"seq = ['yesterday',\n       'today',\n       'tomorrow',\n       'guess',\n       'rain_tomorrow',\n       'correct',\n       'true_positive',\n       'false_positive',\n       'true_negative',\n       'false_negative']\nheuristic_df = heuristic_df.reindex(columns=seq)","13a01806":"df.head()","f961cdea":"heuristic_df.head()","7bdd0655":"for z in range(numrows):\n    #started at time 2 in the data frame\n    i = z + 2\n    # pulling values from the dataframe\n    yesterday = df.iloc[(i-2),1]\n    today = df.iloc[(i-1),1]\n    tomorrow = df.iloc[i,1]\n    rain_tomorrow = df.iloc[(i),1]\n    \n    heuristic_df.iat[z,0] = yesterday\n    heuristic_df.iat[z,1] = today\n    heuristic_df.iat[z,2] = tomorrow\n    heuristic_df.iat[z,3] = False # set guess default to False\n    heuristic_df.iat[z,4] = rain_tomorrow\n    \n    # if it rains today or rained yesterday, it will rain tomorrow\n    if today > 0.0 and yesterday > 0.0:\n        heuristic_df.iat[z,3] = True\n        \n    if heuristic_df.iat[z,3] == heuristic_df.iat[z,4]:\n        heuristic_df.iat[z,5] = True\n        if heuristic_df.iat[z,3] == True:\n            heuristic_df.iat[z,6] = True #true positive\n        else:\n            heuristic_df.iat[z,8] = True #true negative\n    else:\n        heuristic_df.iat[z,5] = False\n        if heuristic_df.iat[z,3] == True:\n            heuristic_df.iat[z,7] = True #false positive\n        else:\n            heuristic_df.iat[z,9] = True #false negative","500f2ddb":"heuristic_df","34172101":"from sklearn.model_selection import train_test_split \nh_train, h_test = train_test_split(heuristic_df, test_size = 0.2, random_state = 0)\nprint(\"for training set:\")\nprint(h_train.shape)\nprint(\"for test set:\")\nprint(h_test.shape)","e4f6b275":"print(\"accuracy for training set:\")\nprint(h_train['correct'].value_counts()\/(h_train.shape[0]))\nprint(\"accuracy for test set:\")\nprint(h_test['correct'].value_counts()\/(h_test.shape[0]))","2939491b":"print(\"precision for training set:\")\nprint((h_train['true_positive'].value_counts()[0])\/\n(h_train['true_positive'].value_counts()[0] + h_train['false_positive'].value_counts()[0]))\n\nprint(\"precision for test set:\")\nprint((h_test['true_positive'].value_counts()[0])\/\n(h_test['true_positive'].value_counts()[0] + h_test['false_positive'].value_counts()[0]))","ec0ee3cc":"print(\"recall for training set:\")\nprint((h_train['true_positive'].value_counts()[0])\/\n(h_train['true_positive'].value_counts()[0] + h_train['false_negative'].value_counts()[0]))\n\nprint(\"recall for test set:\")\nprint((h_test['true_positive'].value_counts()[0])\/\n(h_test['true_positive'].value_counts()[0] + h_test['false_negative'].value_counts()[0]))","6c9ea163":"import warnings\nwarnings.filterwarnings('ignore')\n\nprint(\"SSE for training set:\")\nh_train['square_error'] = (h_train['guess'].astype(int) - h_train['rain_tomorrow'].astype(int)) ** 2\nprint(h_train['square_error'].head(20))\nprint(h_train['square_error'].sum())\n\nprint(\"SSE for test set:\")\nh_test['square_error'] = (h_test['guess'].astype(int) - h_test['rain_tomorrow'].astype(int)) ** 2\nprint(h_test['square_error'].head(20))\nprint(h_test['square_error'].sum())","8619fca3":"# Accuracy of the Predictions:\nThis simple approach is used to see what fraction of predictions our model got right. It is calculated as (true positive + true negative)\/ number of guesses.","cf7ac0cb":"# Precision of the predictions:\nPrecision is the percent of the postive predictions which are correct. More specifically it is calculated as (num true positive)\/(num true positive + num false positive).","d391f0af":"In the following work, I have shown the implementation of \"If it rained yesterday or rains today, it will rain tomorrow\".","3ce0a52e":"# The sum of squared error (SSE) of the predictions:\nSum of squared error (SSE) is the sum of the squares of residuals (deviations of predicted from actual empirical values of data).","ed061e6d":"# Recall of the Predictions:\nRecall is the percent of the time the predictions are correct when predicted positive. More specifically it is calculated (num true positive)\/(num true positive + num false negative).","b714228d":"At first, I have built and populated a hurestic model.","14ffd256":"Now, a loop is built to add the heuristic model guesses as a column to this dataframe. Following is an example loop that populates the dataframe created earlier with the total percip from yesterday and today. Then the guess is set to true if rained both yesterday and today.","8a3a2587":"# Examples:\nSome examples of heuristic models are:\n\n* It will rain tomorrow if it rained more than 1 inch (>1.0 PRCP) today.\n* If rained yesterday it will rain today.\n* If it rained yesterday or the day before it will rain today.\n* If it rained yesterday or rains today, it will rain tomorrow.","71d351bb":"Creating an empty dataframe to hold values:","3d59f75a":"Splitting data into training and testing set:","dcaa44f5":"# Introduction:\nIn this work, I have come up with a heuristic model to predict if it will rain tomorrow. The work has been done on the \"seattle_weather_1948-2017\" dataset. I have followed the time series technique here, which means that we only know what happened historically (before a given date). I have also calculated the accuracy, precision, recall and sum of squared error(SSE) in order to evaluate the performance of the Heuristic model.","9c4608a7":"Sorting columns for convience:","c986ae2d":"# Evaluating the performance of the heuristic model:\nThe following techniques are implemented to evaluate the performance of the model:\n\n* accuracy\n* precision\n* recall\n* sum of sqaured error(SSE)"}}