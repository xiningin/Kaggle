{"cell_type":{"481229e8":"code","6130d60f":"code","591653a6":"code","0628baa7":"code","b9e73871":"code","ca825482":"code","889fbd8a":"code","911567ce":"code","315c2b8d":"code","713ebe33":"code","6e6adc69":"code","3e9c81e9":"code","18567a52":"code","d654ee26":"markdown","b81e9daa":"markdown","0cf4c647":"markdown","ffb31d16":"markdown","5f3f0263":"markdown"},"source":{"481229e8":"import gc\nimport pickle\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom catboost import CatBoostClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import StratifiedKFold","6130d60f":"with open(\"..\/input\/tps-sep-cooking-data\/TPS_Sep_Dataset.txt\", 'rb') as handle: \n    data = handle.read()\n\nprocessed_data = pickle.loads(data)\ntrain_df = processed_data['train_df']\ntest_df = processed_data['test_df']\n\ndel processed_data\ngc.collect()","591653a6":"Xtrain = train_df.loc[:, train_df.columns != 'claim'].copy()\nYtrain = train_df['claim'].copy()\nXtest = test_df.copy()\n\nprint(f\"Xtrain: {Xtrain.shape} \\nYtrain: {Ytrain.shape} \\nXtest: {Xtest.shape}\")\n\ndel train_df, test_df\ngc.collect()","0628baa7":"cat_cols = ['f5_bin','f29_bin','f40_bin','f42_bin','f50_bin','f65_bin',\n            'f70_bin','f74_bin','f75_bin','f91_bin','clusters_k']\n\nXtrain[cat_cols] = Xtrain[cat_cols].astype(int)\nXtest[cat_cols] = Xtest[cat_cols].astype(int)\n\ncat_cols_indices = [Xtrain.columns.get_loc(col) for col in cat_cols]\nprint(cat_cols_indices)","b9e73871":"def plot_confusion_matrix(cm, classes):\n\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion matrix', fontweight='bold', pad=15)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], 'd'),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label', fontweight='bold')\n    plt.xlabel('Predicted label', fontweight='bold')\n    plt.tight_layout()","ca825482":"def cb_train_predict(params, train, test, true_label, FOLD=5, SEEDS=[42]):\n\n    counter = 0\n    oof_score = 0\n    y_pred_final_cb = np.zeros((test.shape[0], len(SEEDS)))\n    y_pred_meta_cb = np.zeros((train.shape[0], len(SEEDS)))\n\n\n    for sidx, seed in enumerate(SEEDS):\n        seed_score = 0\n\n        kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n        for idx, (train_idx, val_idx) in enumerate(kfold.split(train, true_label)):\n            counter += 1\n\n            train_x, train_y = train.iloc[train_idx], true_label.iloc[train_idx]\n            val_x, val_y = train.iloc[val_idx], true_label.iloc[val_idx]\n\n            params['learning_rate']=0.07\n            init_model = CatBoostClassifier(**params)\n\n            init_model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                           early_stopping_rounds=200, verbose=500,\n                           cat_features=cat_cols_indices)\n\n            params['learning_rate']=0.02\n            model = CatBoostClassifier(**params)\n\n            model.fit(train_x, train_y, eval_set=[(train_x, train_y), (val_x, val_y)], \n                      early_stopping_rounds=100, verbose=200,\n                      cat_features=cat_cols_indices, init_model=init_model)\n\n            y_pred = model.predict_proba(val_x)[:,-1]\n            y_pred_meta_cb[val_idx, sidx] += y_pred\n            y_pred_final_cb[:, sidx] += model.predict_proba(test)[:,-1]\n\n            score = roc_auc_score(val_y, y_pred)\n            oof_score += score\n            seed_score += score\n            print(\"\\nSeed-{} | Fold-{} | OOF Score: {}\\n\".format(seed, idx, score))\n\n        print(\"\\nSeed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\n    y_pred_final_cb = y_pred_final_cb \/ float(FOLD)\n    oof_score \/= float(counter)\n    print(\"Aggregate OOF Score: {}\".format(oof_score))\n    \n    return y_pred_meta_cb, y_pred_final_cb, oof_score","889fbd8a":"params1 = {\n    'objective': 'CrossEntropy',\n    'eval_metric': 'AUC',\n    'iterations': 8000,\n    'od_wait': 1144,\n    'use_best_model': True,\n    'bootstrap_type': 'Bernoulli',\n    'reg_lambda': 36.304,\n    'random_strength': 43.756,\n    'depth': 7,\n    'min_data_in_leaf': 11,\n    'leaf_estimation_iterations': 1,\n    'subsample': 0.8228,\n    'random_state': 42\n}\n\ny_pred_meta_cb1, y_pred_final_cb1, oof_score1 = cb_train_predict(params1, Xtrain, Xtest, Ytrain)","911567ce":"params2 = {\n    'objective': 'CrossEntropy',\n    'eval_metric': 'AUC',\n    'iterations': 8000,\n    'od_wait': 1144,\n    'use_best_model': True,\n    'bootstrap_type': 'Bernoulli',\n    'reg_lambda': 3.0,\n    'random_strength': 34.756,\n    'depth': 10,\n    'min_data_in_leaf': 5,\n    'leaf_estimation_iterations': 1,\n    'subsample': 0.85,\n    'random_state': 42\n}\n\ny_pred_meta_cb2, y_pred_final_cb2, oof_score2 = cb_train_predict(params2, Xtrain, Xtest, Ytrain)","315c2b8d":"y_pred_meta_cb = np.concatenate((y_pred_meta_cb1, y_pred_meta_cb2), axis=1)\ny_pred_final_cb = np.concatenate((y_pred_final_cb1, y_pred_final_cb2), axis=1)\nprint(f\"y_pred_meta_cb: {y_pred_meta_cb.shape} \\ny_pred_final_cb: {y_pred_final_cb.shape}\")","713ebe33":"y_pred_meta = np.mean(y_pred_meta_cb, axis=1)\ny_pred = (y_pred_meta>0.5).astype(int)\nprint(classification_report(Ytrain, y_pred))","6e6adc69":"cnf_matrix = confusion_matrix(Ytrain, y_pred, labels=[0, 1])\nnp.set_printoptions(precision=2)\nplt.figure(figsize=(12, 5))\nplot_confusion_matrix(cnf_matrix, classes=[0, 1])","3e9c81e9":"np.savez_compressed('.\/CB_Meta_Features.npz',\n                    y_pred_meta_cb=y_pred_meta_cb, \n                    oof_score1=oof_score1,\n                    oof_score2=oof_score2,\n                    y_pred_final_cb=y_pred_final_cb)","18567a52":"y_pred_final = np.mean(y_pred_final_cb, axis=1)\nsubmit_df = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv\")\nsubmit_df['claim'] = y_pred_final\nsubmit_df.to_csv(\"CB_Submission.csv\", index=False)\nsubmit_df.head(10)","d654ee26":"## CatBoost Model","b81e9daa":"## Helper Function","0cf4c647":"## Import libraries","ffb31d16":"## Load processed datasets","5f3f0263":"## Create submission file"}}