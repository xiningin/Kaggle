{"cell_type":{"ba6c4049":"code","fb010f0c":"code","121afb47":"code","6cc64e5a":"code","dd5502fc":"code","2199eb35":"code","717a7c00":"code","a8b53bea":"code","1f0f0470":"code","b2baa1d4":"code","025e014b":"code","19832216":"code","a4aa1a52":"code","63c3baeb":"code","111af525":"code","17937ac6":"code","ac90747b":"code","f18cb831":"code","ecbc13a3":"code","baa750c3":"code","f2b9f0df":"code","5fa82d57":"code","80946e15":"code","1b5d5f63":"code","541d9e54":"code","883986d8":"code","c122375c":"code","892eaa53":"code","9227d0a4":"code","1e7d795c":"code","23e29146":"markdown","a2be5939":"markdown","202b6d38":"markdown","366aa8dc":"markdown"},"source":{"ba6c4049":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tqdm\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fb010f0c":"pre_train_set = pd.read_csv(\"\/kaggle\/input\/twitter-sentiment\/Sentiment Analysis Dataset 2.csv\", error_bad_lines=False)","121afb47":"pre_train_set.pop(\"ItemID\")\npre_train_set.pop(\"SentimentSource\")","6cc64e5a":"pre_train_set.dropna(inplace=True)","dd5502fc":"tweets = []\nfor idx, row in tqdm.tqdm(pre_train_set.iterrows(), total=len(pre_train_set)):\n    tweets.append(row[\"SentimentText\"])","2199eb35":"import random\nrandom.shuffle(tweets)","717a7c00":"len(tweets)","a8b53bea":"# The training data is separated with one blank line.\nf_train = open(\"data-pretrain-twitter-train\",\"w\")\nf_test = open(\"data-pretrain-twitter-test\",\"w\")\nfor idx, tweet in tqdm.tqdm(enumerate(tweets), total=len(tweets)):\n    if idx < 0.9 * len(tweets):\n        f_train.write(tweet)\n        f_train.write(\"\\n\")\n        f_train.write(\"\\n\")\n    else:\n        f_test.write(tweet)\n        f_test.write(\"\\n\")\n        f_test.write(\"\\n\")","1f0f0470":"!git clone https:\/\/github.com\/huggingface\/transformers","b2baa1d4":"!cd transformers && pip install .","025e014b":"!git clone https:\/\/github.com\/NVIDIA\/apex.git","19832216":"!cd apex && pip install .","a4aa1a52":"!python \/kaggle\/working\/transformers\/examples\/run_language_modeling.py \\\n    --fp16 \\\n    --model_type roberta \\\n    --model_name_or_path roberta-base \\\n    --config_name  \/kaggle\/input\/train-config\/config.json \\\n    --do_lower_case \\\n    --do_train \\\n    --do_eval \\\n    --train_data_file \/kaggle\/working\/data-pretrain-twitter-train \\\n    --eval_data_file=\/kaggle\/working\/data-pretrain-twitter-test \\\n    --learning_rate 5e-5 \\\n    --num_train_epochs 3 \\\n    --max_seq_length 192 \\\n    --doc_stride 64 \\\n    --output_dir results_roberta_pretrain \\\n    --per_gpu_eval_batch_size=8 \\\n    --per_gpu_train_batch_size=8 \\\n    --save_steps=100000 \\\n    --mlm","63c3baeb":"train = pd.read_csv(\"\/kaggle\/input\/folded-dataset\/train_folds.csv\") # Used abhishek's 5-folded dataset for validation. Only fold=0 validation is done for simplicity.\ntest = pd.read_csv(\"\/kaggle\/input\/tweet-sentiment-extraction\/test.csv\")\nss = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv')","111af525":"from sklearn.model_selection import train_test_split\n\ndef get_train_val_with_fold(folded_train, fold, sentiment=None, fake_ratio=None):\n    if fold > 4 or fold < 0:\n        return None, None\n    \n    train = folded_train[folded_train[\"kfold\"] != fold]\n    valid = folded_train[folded_train[\"kfold\"] == fold]\n    \n    train.pop(\"kfold\")\n    valid.pop(\"kfold\")\n    \n    if fake_ratio:\n        if sentiment == None:\n            return None, None\n        \n        positive = train[train[\"sentiment\"] == \"positive\"]\n        fake_negative = positive.sample(n=int(fake_ratio * len(positive)), random_state=None)\n        fake_negative[\"sentiment\"] = \"negative\"\n        \n        negative = train[train[\"sentiment\"] == \"negative\"]\n        fake_positive = negative.sample(n=int(fake_ratio * len(negative)), random_state=None)\n        fake_positive[\"sentiment\"] = \"positive\"\n        \n        train = pd.concat([train, fake_positive, fake_negative])\n        \n    if sentiment:\n        train = train[train[\"sentiment\"] == sentiment]\n    \n    return train, valid","17937ac6":"train_set, valid_set = get_train_val_with_fold(train, 0)","ac90747b":"import json\n\nnp_train = np.array(train_set)\nnp_test = np.array(valid_set)","f18cb831":"def find_all(input_str, search_str):\n    l1 = []\n    length = len(input_str)\n    index = 0\n    while index < length:\n        i = input_str.find(search_str, index)\n        if i == -1:\n            return l1\n        l1.append(i)\n        index = i + 1\n    return l1","ecbc13a3":"!rm -rf data-fold-0","baa750c3":"!mkdir data-fold-0\nDATA_DIR = \"data-fold-0\"","f2b9f0df":"output = {}\noutput[\"version\"] = \"v1.0\"\noutput[\"data\"] = []\n\nfor line in np_train:\n    paragraphs = []\n    context = line[1]\n    \n    qas = []\n    question = line[-1]\n    qid = line[0]\n    answers = []\n    answer = line[2]\n    if type(answer) != str or type(context) != str or type(question) != str:\n        print(context, type(context))\n        print(answer, type(answer))\n        print(question, type(question))\n        continue\n    answer_starts = find_all(context, answer)\n    for answer_start in answer_starts:\n        answers.append({'answer_start': answer_start, 'text': answer})\n    qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n    \n    paragraphs.append({'context': context, 'qas': qas})\n    output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\nwith open(f\"{DATA_DIR}\/train.json\", 'w') as outfile:\n    json.dump(output, outfile)","5fa82d57":"output = {}\noutput['version'] = 'v1.0'\noutput['data'] = []\n\nfor line in np_test:\n    paragraphs = []\n    \n    context = line[1]\n    \n    qas = []\n    question = line[-1]\n    qid = line[0]\n    if type(context) != str or type(question) != str:\n        print(context, type(context))\n        print(answer, type(answer))\n        print(question, type(question))\n        continue\n    answers = []\n    answers.append({'answer_start': 1000000, 'text': '__None__'})\n    qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n    \n    paragraphs.append({'context': context, 'qas': qas})\n    output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\nwith open(f\"{DATA_DIR}\/test.json\", 'w') as outfile:\n    json.dump(output, outfile)","80946e15":"!git clone https:\/\/github.com\/huggingface\/transformers","1b5d5f63":"!cd transformers && pip install .","541d9e54":"!rm -rf \/kaggle\/working\/cached-roberta-large-pretrained\/cache\n!rm -rf results_roberta_large_all","883986d8":"!python \/kaggle\/working\/transformers\/examples\/run_squad.py \\\n--model_type roberta \\\n--model_name_or_path \/kaggle\/working\/results_roberta_pretrain \\\n--config_name  \/kaggle\/input\/train-config\/config.json \\\n--do_lower_case \\\n--do_train \\\n--do_eval \\\n--data_dir .\/data-fold-0 \\\n--cache_dir \/kaggle\/working\/cached-roberta-large-pretrained\/cache \\\n--train_file train.json \\\n--predict_file test.json \\\n--learning_rate 5e-5 \\\n--num_train_epochs 3 \\\n--max_seq_length 192 \\\n--doc_stride 64 \\\n--output_dir results_roberta_large_all \\\n--per_gpu_eval_batch_size=16 \\\n--per_gpu_train_batch_size=16 \\\n--save_steps=100000","c122375c":"def post_process(selected):\n    return \" \".join(set(selected.lower().split())) ","892eaa53":"def jaccard(str1, str2): \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","9227d0a4":"# Copy predictions to submission file.\npredictions = json.load(open('.\/results_roberta_large_all\/predictions_.json', 'r'))\n\njaccards = []\nfor idx, row in valid_set.iterrows():\n    if row['sentiment'] == 'neutral': # neutral postprocessing\n        id_ = row['textID']\n        jaccards.append(jaccard(row[\"text\"], row['selected_text']))\n    else:\n        id_ = row['textID']\n        jaccards.append(jaccard(post_process(predictions[id_]), row['selected_text']))\n\n#     if row['sentiment'] == 'neutral':\n#         continue\n#     else:\n#         id_ = row['textID']\n#         jaccards.append(jaccard(post_process(predictions[id_]), row['selected_text']))\n        \n#     if row['sentiment'] == 'positive': \n#         id_ = row['textID']\n#         jaccards.append(jaccard(post_process(predictions[id_]), row['selected_text']))\n        \n#     if row['sentiment'] == 'negative': \n#         id_ = row['textID']\n#         jaccards.append(jaccard(post_process(predictions[id_]), row['selected_text']))","1e7d795c":"sum(jaccards)\/len(jaccards)","23e29146":"# Pretrain\nPretrain with tweeter sentiment data in https:\/\/www.kaggle.com\/ywang311\/twitter-sentiment","a2be5939":"# Train with pretrained data\n5-folded dataset used from [roberta inference 5 folds](https:\/\/www.kaggle.com\/abhishek\/roberta-inference-5-folds)","202b6d38":"# Simple Validation","366aa8dc":"I am really surprised how people are open to share their codes and findings for the new starters. I am one of the starters and thanks to them, I could save my time quite a lot. So I would like to share one of mine.\n\nThis notebook is for pretraining with another twitter dataset. In this notebook, dataset from https:\/\/www.kaggle.com\/ywang311\/twitter-sentiment is used for pretraining.\n> \n**References:**\nCodes mainly adopted from following notebooks:\n* [RoBERTa Baseline Starter (+ simple postprocessing)](https:\/\/www.kaggle.com\/cheongwoongkang\/roberta-baseline-starter-simple-postprocessing)\n\nand related discussion threads about pretraining with another dataset:\n* [Language Model Pretraining](https:\/\/www.kaggle.com\/c\/tweet-sentiment-extraction\/discussion\/146262)\n* [Ideas Which Should Improve Scores Hopefully](https:\/\/www.kaggle.com\/c\/tweet-sentiment-extraction\/discussion\/142011)\n\nAppreciated if you report anything need to be fixed. :)\n"}}