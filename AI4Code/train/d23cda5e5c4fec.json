{"cell_type":{"a48e8c53":"code","44922404":"code","1e1c25ef":"code","3d515d88":"code","0888c354":"code","e567702d":"code","073820fa":"code","0717bc5a":"code","6ae8e46f":"code","55d88179":"code","50ba1774":"code","308a7622":"code","5895b1c5":"code","036f4015":"code","bc3ffdaf":"code","3b022a70":"code","7b475109":"code","7afdc3aa":"code","23256e47":"code","d84fe319":"code","841218b5":"code","0e901a94":"code","4ace5528":"code","53d10be8":"markdown","2f1b8d94":"markdown","ee293e04":"markdown","082f9922":"markdown","88155aee":"markdown","d8562bd5":"markdown","d34e4919":"markdown","e0d53e24":"markdown","52e97af5":"markdown","fadef16d":"markdown"},"source":{"a48e8c53":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","44922404":"df = pd.read_csv('..\/input\/Train.csv')","1e1c25ef":"df.head()","3d515d88":"df.info()","0888c354":"x_categories = ['Gender', 'Married', 'Education', 'Self_Employed', 'Credit_History', 'Property_Area']\nfor element in x_categories:\n    cat_plot = pd.crosstab(df[element], df['Loan_Status'])\n    cat_plot.plot(kind='bar', stacked=True, color=['red', 'green'])","e567702d":"for category in x_categories:\n    df[category] = df[category].astype('category')","073820fa":"df.info()","0717bc5a":"df.describe()","6ae8e46f":"numeric_categories = ['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount', 'Loan_Amount_Term']\nfor element in numeric_categories:\n    x = df[element]\n    x.plot(kind='hist', bins = 30, fontsize = 20, figsize= (20,10), edgecolor='black', linewidth=1.2)\n    plt.xlabel(element, fontsize=30)\n    plt.ylabel('Frequency', fontsize=30)\n    plt.show()","55d88179":"total_income = df['ApplicantIncome'] + df['CoapplicantIncome']","50ba1774":"df['total_income_log'] = np.log(total_income)\ndf['LoanAmount_log'] = np.log(df['LoanAmount'])\n\ndf['total_income_log'].plot(kind='hist', bins = 30, fontsize = 20, figsize= (20,10), edgecolor='black', linewidth=1.2)\nplt.xlabel(element, fontsize=30)\nplt.ylabel('Frequency', fontsize=30)\nplt.show()\n\ndf['LoanAmount_log'].plot(kind='hist', bins = 30, fontsize = 20, figsize= (20,10), edgecolor='black', linewidth=1.2)\nplt.xlabel(element, fontsize=30)\nplt.ylabel('Frequency', fontsize=30)\nplt.show()","308a7622":"df.drop(['Loan_ID', 'Loan_Amount_Term', 'ApplicantIncome', 'CoapplicantIncome', 'LoanAmount'], axis=1, inplace=True)","5895b1c5":"df['Dependents'].replace('0', 'none', inplace=True)\ndf['Dependents'].replace('1', 'one', inplace=True)\ndf['Dependents'].replace('3+', 'three+', inplace=True)","036f4015":"df.head()","bc3ffdaf":"df.info()","3b022a70":"df_dummies = pd.get_dummies(df, columns = ['Gender', 'Dependents', 'Education', 'Self_Employed', 'Property_Area'])","7b475109":"df_dummies.Married.replace(('Yes', 'No'), (1,0), inplace=True)\ndf_dummies.Loan_Status.replace(('Y', 'N'), (1,0), inplace=True)\ndf_dummies.head()","7afdc3aa":"df_dummies['total_income_log'].fillna(df_dummies['total_income_log'].mean(), inplace=True)\ndf_dummies['LoanAmount_log'].fillna(df_dummies['LoanAmount_log'].mean(), inplace=True)\ndf_dummies['Credit_History'].fillna(df_dummies['Credit_History'].value_counts().index[0], inplace=True)\ndf_dummies['Married'].fillna(df_dummies['Married'].value_counts().index[0], inplace=True)\ndf_dummies['Credit_History'] = df_dummies['Credit_History'].astype('float64')\ndf_dummies.info()","23256e47":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split","d84fe319":"X = df_dummies.drop('Loan_Status', axis=1).values\ny = df_dummies['Loan_Status'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)","841218b5":"c_space = np.logspace(-5, 8, 15)\nparam_grid = {'C': c_space}\nlogreg = LogisticRegression()\n\nlogreg_cv = GridSearchCV(logreg, param_grid, cv=5)","0e901a94":"logreg_cv.fit(X_train, y_train)","4ace5528":"print(\"Tuned log reg parameter {}\".format(logreg_cv.best_params_))\nprint(\"Highest score {}\".format(logreg_cv.best_score_))","53d10be8":"- Logistic Regression","2f1b8d94":"# Running ML Algorithms","ee293e04":"# Handling missing data","082f9922":"# Converting data to dummies for ML algorithms to be able to process","88155aee":"# Log transforming total income & loan amount to normalize","d8562bd5":"# readying dependents to be more readable in (get dummies)","d34e4919":"# Import libraries & read csv file","e0d53e24":"# EDA","52e97af5":"# Dropping useless columns","fadef16d":"# Combining Applicant & CoapplicantIncome to one relevant feature"}}