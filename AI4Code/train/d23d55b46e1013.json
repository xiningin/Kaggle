{"cell_type":{"e4dba25c":"code","122c89e2":"code","bc0f6d79":"code","7e989f75":"code","56bb3b77":"code","38c1fd41":"code","01f9ad48":"code","57bb7f68":"code","7da596bb":"code","b2fd60dc":"code","77a97683":"code","05890239":"code","ab7038e8":"code","b359367b":"code","6d3bc117":"code","e63e45cd":"code","ec77fd62":"code","103ac55c":"code","6af54be0":"code","ae4fd91c":"code","0ec05c25":"code","6695cab5":"code","e3e66b26":"code","b61b0ecb":"code","4185ace4":"code","0b680b15":"code","679c8e87":"code","a1858c1a":"code","cb37160f":"code","d7edfa1a":"code","b7f2ee7c":"code","397ece8d":"code","406aff76":"code","ee12aabe":"code","2108b95c":"code","3216f75a":"code","d2a6ae97":"markdown","d23cf6ae":"markdown","06131acc":"markdown","8c0c310e":"markdown","3c810980":"markdown","3acfdaa1":"markdown","28d97f6a":"markdown","7beb114e":"markdown","a293d482":"markdown","e8a6eb67":"markdown","34da9713":"markdown","24aa9918":"markdown","2375b12d":"markdown","bf9146db":"markdown","b2ae4421":"markdown","2c79c24e":"markdown","e5a295f8":"markdown","a566efec":"markdown","0465cfd9":"markdown","4efe876d":"markdown","125bff4c":"markdown","10dd1bd4":"markdown","debdf6c5":"markdown","824e7627":"markdown","c87879fe":"markdown","1c8a4ce4":"markdown","dfa7bdb8":"markdown","ad4922dc":"markdown","cffba5f7":"markdown","bf4bbde6":"markdown","ea37dc6a":"markdown","879b9a4c":"markdown","b8bd5a7c":"markdown","4063afef":"markdown","e40c2bce":"markdown","70a22526":"markdown"},"source":{"e4dba25c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline","122c89e2":"train = pd.read_csv('\/kaggle\/input\/novartis-data\/Train.csv')\ntest = pd.read_csv('\/kaggle\/input\/novartis-data\/Test.csv')\ntest1 = pd.read_csv('\/kaggle\/input\/novartis-data\/Test.csv')","bc0f6d79":"train.head()","7e989f75":"train.shape, test.shape","56bb3b77":"train.X_12.fillna(2, inplace=True)\ntest.X_12.fillna(2, inplace=True)","38c1fd41":"train['DATE'] = pd.to_datetime(train['DATE'], format='%d-%b-%y')\ntest['DATE'] = pd.to_datetime(test['DATE'], format='%d-%b-%y')\ntest1['DATE'] = pd.to_datetime(test1['DATE'], format='%d-%b-%y')","01f9ad48":"for i in (train, test):\n    i['YEAR'] = i.DATE.dt.year\n    i['MONTH'] = i.DATE.dt.month\n    i['DAY'] = i.DATE.dt.day\n    i['WEEKDAY'] = i.DATE.dt.dayofweek","57bb7f68":"YEAR = pd.crosstab(train['YEAR'],train['MULTIPLE_OFFENSE'])\nYEAR.div(YEAR.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","7da596bb":"MONTH = pd.crosstab(train['MONTH'],train['MULTIPLE_OFFENSE'])\nMONTH.div(MONTH.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","b2fd60dc":"DAY = pd.crosstab(train['DAY'],train['MULTIPLE_OFFENSE'])\nDAY.div(DAY.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","77a97683":"WEEKDAY = pd.crosstab(train['WEEKDAY'],train['MULTIPLE_OFFENSE'])\nWEEKDAY.div(WEEKDAY.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","05890239":"X_1 = pd.crosstab(train['X_1'],train['MULTIPLE_OFFENSE'])\nX_1.div(X_1.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","ab7038e8":"X_2 = pd.crosstab(train['X_2'],train['MULTIPLE_OFFENSE'])\nX_2.div(X_2.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","b359367b":"X_3 = pd.crosstab(train['X_3'],train['MULTIPLE_OFFENSE'])\nX_3.div(X_3.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","6d3bc117":"X_4 = pd.crosstab(train['X_4'],train['MULTIPLE_OFFENSE'])\nX_4.div(X_4.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","e63e45cd":"X_5 = pd.crosstab(train['X_5'],train['MULTIPLE_OFFENSE'])\nX_5.div(X_5.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","ec77fd62":"X_6 = pd.crosstab(train['X_6'],train['MULTIPLE_OFFENSE'])\nX_6.div(X_6.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","103ac55c":"X_7 = pd.crosstab(train['X_7'],train['MULTIPLE_OFFENSE'])\nX_7.div(X_7.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","6af54be0":"X_8 = pd.crosstab(train['X_8'],train['MULTIPLE_OFFENSE'])\nX_8.div(X_8.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","ae4fd91c":"X_9 = pd.crosstab(train['X_9'],train['MULTIPLE_OFFENSE'])\nX_9.div(X_9.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","0ec05c25":"X_10 = pd.crosstab(train['X_10'],train['MULTIPLE_OFFENSE'])\nX_10.div(X_10.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","6695cab5":"X_11 = pd.crosstab(train['X_11'],train['MULTIPLE_OFFENSE'])\nX_11.div(X_11.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(25,8))","e3e66b26":"X_12 = pd.crosstab(train['X_12'],train['MULTIPLE_OFFENSE'])\nX_12.div(X_12.sum(1).astype(float), axis=0).plot(kind=\"bar\", figsize=(15,6))","b61b0ecb":"train = train.sort_values(['DATE']).reset_index(drop=True)\ntest = test.sort_values(['DATE']).reset_index(drop=True)\ntrain.head()","4185ace4":"sorted_test_dates = test['DATE']\nsorted_test_ids = test['INCIDENT_ID']\ntrain = train.drop(['INCIDENT_ID', 'DATE'], axis=1)\ntest = test.drop(['INCIDENT_ID', 'DATE'], axis=1)\ntrain.head()","0b680b15":"test.head()","679c8e87":"from xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import confusion_matrix, recall_score","a1858c1a":"err = []\ny_pred_tot_lgm = []\n\nfold = KFold(n_splits=5)\ni = 1\n\nX = train.drop(['MULTIPLE_OFFENSE'], axis=1)\ny = train['MULTIPLE_OFFENSE']\nX_test = test\n\nfor train_index, test_index in fold.split(X, y):\n    x_train, x_val = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_val = y[train_index], y[test_index]\n    m = LGBMClassifier(boosting_type='gbdt',\n                       max_depth=5,\n                       learning_rate=0.01,\n                       n_estimators=5000,\n                       min_child_weight=0.01,\n                       colsample_bytree=0.5,\n                       random_state=1994)\n    m.fit(x_train, y_train,\n          eval_set=[(x_train,y_train),(x_val, y_val)],\n          early_stopping_rounds=200,\n          verbose=0)\n    pred_y = m.predict(x_val)\n    print(i, \" err_lgm: \", round(recall_score(y_val, pred_y), 3))\n    err.append(recall_score(y_val, pred_y))\n    pred_test = m.predict(X_test)\n    pred_test_prob = m.predict_proba(X_test)[:,-1]\n    i = i + 1\n    y_pred_tot_lgm.append(pred_test_prob)\n    \nplgbm_test = np.mean(y_pred_tot_lgm, 0)","cb37160f":"errxgb = []\ny_pred_tot_xgb = []\n\nfold = KFold(n_splits=5)\ni = 1\nfor train_index, test_index in fold.split(X, y):\n    x_train, x_val = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_val = y[train_index], y[test_index]\n    m = XGBClassifier(max_depth=5,\n                      learning_rate=0.07,\n                      n_estimators=5000,\n                      random_state=1994)\n    m.fit(x_train, y_train,\n          eval_set=[(x_train,y_train),(x_val, y_val)],\n          early_stopping_rounds=200,\n          verbose=0)\n    pred_y = m.predict(x_val)\n    print(i, \" err_xgb: \", round(recall_score(y_val, pred_y), 3))\n    errxgb.append(recall_score(y_val, pred_y))\n    pred_test = m.predict(X_test)\n    pred_test_prob = m.predict_proba(X_test)[:,-1]\n    i = i + 1\n    y_pred_tot_xgb.append(pred_test_prob)\n\npxgb_test = np.mean(y_pred_tot_xgb, 0)","d7edfa1a":"(np.mean(err, 0) + np.mean(errxgb)) \/ 2","b7f2ee7c":"pred_test = (pxgb_test+plgbm_test)\/2","397ece8d":"pred_test = np.array([round(i) for i in pred_test])\nsubmission = pd.DataFrame({'DATE':sorted_test_dates,\n                           'INCIDENT_ID': sorted_test_ids,\n                           'MULTIPLE_OFFENSE':pred_test})\nsubmission.head()","406aff76":"submission = pd.merge(test1[['DATE','INCIDENT_ID']], \n                      submission, \n                      on=['DATE','INCIDENT_ID'], how='outer')[['INCIDENT_ID', \n                                                  'MULTIPLE_OFFENSE']]\nsubmission.head()","ee12aabe":"submission['MULTIPLE_OFFENSE'].value_counts()","2108b95c":"test.shape, submission.shape","3216f75a":"submission.to_csv('submission.csv', index=False)","d2a6ae97":"train_df.drop(train_df[(train_df['X_6']==19)].index, inplace=True)\ntest_df.drop(test_df[(test_df['X_6']==19)].index, inplace=True)","d23cf6ae":"train_df.drop(train_df[(train_df['X_3']==0) | \n                       (train_df['X_3']==1) | \n                       (train_df['X_3']==9) | \n                       (train_df['X_3']==10) | \n                       (train_df['X_3']==13) |\n                       (train_df['X_3']==29) | \n                       (train_df['X_3']==32) | \n                       (train_df['X_3']==36)].index, inplace=True)","06131acc":"    Predict if the server will be hacked\n\nAll the countries across the globe have adapted to means of digital payments and with the increased volume of digital payments, hacking has become a pretty common event wherein the hacker can try to hack your details just with your phone number linked to your bank account. However, there is data with some anonymized variables based on which one can predict that the hack is going to happen.\n\nYour work is to build a predictive model which can identify a pattern in these variables and suggest that a hack is going to happen so that the cyber security can somehow stop it before it actually happens. You have to predict the column: \"MALICIOUS OFFENSE.","8c0c310e":"test_df.drop(test_df[(test_df['X_2']==0) | \n                       (test_df['X_2']==1) | \n                       (test_df['X_2']==9) | \n                       (test_df['X_2']==10) | \n                       (test_df['X_2']==13) |\n                       (test_df['X_2']==29) | \n                       (test_df['X_2']==31) | \n                       (test_df['X_2']==33)].index, inplace=True)","3c810980":"    Stacking of the predicted probabilities on test set","3acfdaa1":"train_df.drop(train_df[(train_df['X_5']==2)].index, inplace=True)\ntest_df.drop(test_df[(test_df['X_5']==2)].index, inplace=True)","28d97f6a":"After extracting the features from the date parameter next step is to sort the data by \"Date\", because shuffling is set to false in the cross valiation.","7beb114e":"# Importing libraries and data","a293d482":"train_df.drop(train_df[(train_df['X_12']==7.0) | \n                       (train_df['X_12']==11.0) | \n                       (train_df['X_12']==12.0) | \n                       (train_df['X_12']==17.0) | \n                       (train_df['X_12']==20.0) |\n                       (train_df['X_12']==30.0) | \n                       (train_df['X_12']==40.0) | \n                       (train_df['X_12']==50.0) | \n                       (train_df['X_12']==58.0) | \n                       (train_df['X_12']==90.0)].index, inplace=True)","e8a6eb67":"test_df.drop(test_df[(test_df['X_3']==0) | \n                       (test_df['X_3']==1) | \n                       (test_df['X_3']==9) | \n                       (test_df['X_3']==10) | \n                       (test_df['X_3']==13) |\n                       (test_df['X_3']==29) | \n                       (test_df['X_3']==32) | \n                       (test_df['X_3']==36)].index, inplace=True)","34da9713":"    LGBMClassifier","24aa9918":"submission.isnull().sum()\nsubmission.fillna(1.0, inplace=True)","2375b12d":"test_df.drop(test_df[(test_df['X_12']==7.0) | \n                       (test_df['X_12']==11.0) | \n                       (test_df['X_12']==12.0) | \n                       (test_df['X_12']==17.0) | \n                       (test_df['X_12']==20.0) |\n                       (test_df['X_12']==30.0) | \n                       (test_df['X_12']==40.0) | \n                       (test_df['X_12']==50.0) | \n                       (test_df['X_12']==58.0) | \n                       (test_df['X_12']==90.0)].index, inplace=True)","bf9146db":"train_df.drop(train_df[(train_df['X_1']==2) | (train_df['X_1']==3) | (train_df['X_1']==4)].index, inplace=True)\ntest_df.drop(test_df[(test_df['X_1']==2) | (test_df['X_1']==3) | (test_df['X_1']==4)].index, inplace=True)","b2ae4421":"train_df.drop(train_df[(train_df['X_7']==9)].index, inplace=True)\ntest_df.drop(test_df[(test_df['X_7']==9)].index, inplace=True)","2c79c24e":"train_df.drop(train_df[(train_df['X_8']==9) | \n                       (train_df['X_8']==13) | \n                       (train_df['X_8']==14) | \n                       (train_df['X_8']==16) | \n                       (train_df['X_8']==21) |\n                       (train_df['X_8']==22) | \n                       (train_df['X_8']==30) | \n                       (train_df['X_8']==50) | \n                       (train_df['X_8']==99)].index, inplace=True)","e5a295f8":"    Test Set submission","a566efec":"train_df.drop(train_df[(train_df['X_9']==4)].index, inplace=True)","0465cfd9":"In the below code, date parameter is segregrated into year, month, day and weekday so that it can improve the performance of machine learning model.","4efe876d":"    XGBClassifier","125bff4c":"train_df.drop(train_df[(train_df['X_11']==0) | \n                       (train_df['X_11']==126) | \n                       (train_df['X_11']==162) | \n                       (train_df['X_11']==169) | \n                       (train_df['X_11']==208) |\n                       (train_df['X_11']==218) | \n                       (train_df['X_11']==225) | \n                       (train_df['X_11']==231) | \n                       (train_df['X_11']==236) | \n                       (train_df['X_11']==241) | \n                       (train_df['X_11']==243) | \n                       (train_df['X_11']==244) | \n                       (train_df['X_11']==248) | \n                       (train_df['X_11']==249) |\n                       (train_df['X_11']==270) | \n                       (train_df['X_11']==277) | \n                       (train_df['X_11']==285) | \n                       (train_df['X_11']==292) | \n                       (train_df['X_11']==295) | \n                       (train_df['X_11']==297) | \n                       (train_df['X_11']==299) | \n                       (train_df['X_11']==310) | \n                       (train_df['X_11']==313) |\n                       (train_df['X_11']==316) | \n                       (train_df['X_11']==321) | \n                       (train_df['X_11']==322) | \n                       (train_df['X_11']==323) | \n                       (train_df['X_11']==325) |\n                       (train_df['X_11']==327) | \n                       (train_df['X_11']==329) | \n                       (train_df['X_11']==330) | \n                       (train_df['X_11']==332)].index, inplace=True)","10dd1bd4":"In order to model the data, two ensemble techniques are used i.e. Light Gradient Boosting and Extreme Gradient Boosting with the Startified K-Fold cross validation (K=5 without shuffling) so that it covers the maximum feature from the data. Also, both the models are tuned w.r.t. the data and their probabilities are predicted.","debdf6c5":"# Visualization on date features","824e7627":"train_df = train.copy()\ntest_df = test.copy()","c87879fe":"test_df.drop(test_df[(test_df['X_8']==9) | \n                       (test_df['X_8']==13) | \n                       (test_df['X_8']==14) | \n                       (test_df['X_8']==16) | \n                       (test_df['X_8']==21) |\n                       (test_df['X_8']==22) | \n                       (test_df['X_8']==30) | \n                       (test_df['X_8']==50) | \n                       (test_df['X_8']==99)].index, inplace=True)","1c8a4ce4":"train_df.drop(train_df[(train_df['X_2']==0) | \n                       (train_df['X_2']==1) | \n                       (train_df['X_2']==9) | \n                       (train_df['X_2']==10) | \n                       (train_df['X_2']==13) |\n                       (train_df['X_2']==29) | \n                       (train_df['X_2']==31) | \n                       (train_df['X_2']==33)].index, inplace=True)","dfa7bdb8":"# Understanding the data","ad4922dc":"# Feature Engineering and Data Preprocessing","cffba5f7":"Dropping few columns from the train and test data","bf4bbde6":"train_df.drop(train_df[(train_df['X_4']==5)].index, inplace=True)\ntest_df.drop(test_df[(test_df['X_4']==5)].index, inplace=True)","ea37dc6a":"train_df.drop(train_df[(train_df['X_10']==11) | \n                       (train_df['X_10']==17) | \n                       (train_df['X_10']==19) | \n                       (train_df['X_10']==20) | \n                       (train_df['X_10']==30) |\n                       (train_df['X_10']==40) | \n                       (train_df['X_10']==50) | \n                       (train_df['X_10']==58) | \n                       (train_df['X_10']==90)].index, inplace=True)","879b9a4c":"test_df.drop(test_df[(test_df['X_11']==0) | \n                       (test_df['X_11']==126) | \n                       (test_df['X_11']==162) | \n                       (test_df['X_11']==169) | \n                       (test_df['X_11']==208) |\n                       (test_df['X_11']==218) | \n                       (test_df['X_11']==225) | \n                       (test_df['X_11']==231) | \n                       (test_df['X_11']==236) | \n                       (test_df['X_11']==241) | \n                       (test_df['X_11']==243) | \n                       (test_df['X_11']==244) | \n                       (test_df['X_11']==248) | \n                       (test_df['X_11']==249) |\n                       (test_df['X_11']==270) | \n                       (test_df['X_11']==277) | \n                       (test_df['X_11']==285) | \n                       (test_df['X_11']==292) | \n                       (test_df['X_11']==295) | \n                       (test_df['X_11']==297) | \n                       (test_df['X_11']==299) | \n                       (test_df['X_11']==310) | \n                       (test_df['X_11']==313) |\n                       (test_df['X_11']==316) | \n                       (test_df['X_11']==321) | \n                       (test_df['X_11']==322) | \n                       (test_df['X_11']==323) | \n                       (test_df['X_11']==325) |\n                       (test_df['X_11']==327) | \n                       (test_df['X_11']==329) | \n                       (test_df['X_11']==330) | \n                       (test_df['X_11']==332)].index, inplace=True)","b8bd5a7c":"# Problem Statement - Novartis ML Challenge","4063afef":"# Ensemble Modelling","e40c2bce":"test_df.drop(test_df[(test_df['X_10']==11) | \n                       (test_df['X_10']==17) | \n                       (test_df['X_10']==19) | \n                       (test_df['X_10']==20) | \n                       (test_df['X_10']==30) |\n                       (test_df['X_10']==40) | \n                       (test_df['X_10']==50) | \n                       (test_df['X_10']==58) | \n                       (test_df['X_10']==90)].index, inplace=True)","70a22526":"test_df.drop(test_df[(test_df['X_9']==4)].index, inplace=True)"}}