{"cell_type":{"67b9a161":"code","b2fb9cdf":"code","601a9cf8":"code","f851f1f8":"code","911893d2":"code","37c066df":"code","0a941e4b":"code","942b28c6":"code","10c493a7":"code","c99a44e0":"code","bd6acf1c":"code","51306c8d":"code","1a0b8edc":"code","3ca9c4cd":"code","f79c0082":"code","b47448ba":"code","c899e44a":"code","3965adff":"code","701ca073":"code","e5d141c6":"code","05cbe245":"code","393b15c2":"code","4d8dc470":"code","83e0427f":"code","2304fc78":"code","590cd644":"code","690f974c":"code","f06d7671":"code","74407ad2":"code","d0a230ce":"code","16502aad":"code","b38b3d90":"code","67c6f2e0":"code","589ab27b":"code","a12bad84":"code","a4dce9b7":"code","655a4a68":"code","d6349099":"code","00c2f71b":"code","016378ef":"code","9ebe8a2b":"code","23ff65a7":"code","640579d0":"code","df9bb19c":"code","a47580ad":"code","b5ff0b3c":"code","1e9846ba":"code","f7c64542":"code","ba309568":"code","bc8e582d":"code","1951f862":"code","756317ad":"code","f064e2e2":"code","618faa05":"code","3c3c9cc4":"code","d62f9232":"code","8ae60f5b":"code","206a7c2f":"code","4225a436":"code","af18b442":"code","948b2e3d":"code","ceddf199":"code","c5cf3628":"code","a148bc41":"code","2f50a0da":"code","c1a3cff2":"code","4a9a728d":"code","c6f5aabe":"code","59f9b7b9":"code","1a99dec9":"code","aa732529":"code","8792a986":"code","6826d5c9":"code","2fd9baa1":"code","d1800c3d":"code","7e69eede":"code","ef698593":"code","4a0b84cd":"code","4fd8cf60":"code","b87dcc2c":"code","59740022":"code","6bd0a1f4":"code","584fae90":"code","965e9c04":"markdown","b541e175":"markdown","81472ef8":"markdown","a179956e":"markdown","d57f09d0":"markdown","693b8dfa":"markdown","ff9086f8":"markdown","6a5e6fd3":"markdown","70e9a453":"markdown","cff0a88e":"markdown","d91c39f1":"markdown","7ccd3cd0":"markdown","bfa01e89":"markdown","afefe25f":"markdown","36657ada":"markdown","a7cbac27":"markdown","e8674aa6":"markdown","2989ddc4":"markdown","632543a9":"markdown","08cf2d2d":"markdown","1b6dd330":"markdown","dec2076d":"markdown","cd129967":"markdown","5754a784":"markdown","168c70be":"markdown","7946e542":"markdown","20d01596":"markdown","1dcfef1b":"markdown","f0b769d4":"markdown","f4125b6f":"markdown","72013b80":"markdown","3f6b38c8":"markdown","8e615f12":"markdown","9c9adcbb":"markdown","44e52296":"markdown","e3ebab5e":"markdown","0163f1c6":"markdown","224dff10":"markdown","a621028f":"markdown","7d9a1dca":"markdown","82f01a35":"markdown","fb413c1b":"markdown","d18f3a73":"markdown","56f09428":"markdown","4f054158":"markdown","412b4480":"markdown","6aaaf14b":"markdown","cdea9691":"markdown","5c8f1759":"markdown","b129dd50":"markdown","104c3a74":"markdown","db72a954":"markdown","56c57b31":"markdown","5e230819":"markdown","a41dbab9":"markdown","f6b21be3":"markdown","85b5efde":"markdown","4b7a813b":"markdown","cb0369be":"markdown","32296da3":"markdown","5defb7a6":"markdown","a824ca72":"markdown","819c3d9f":"markdown","7c1f2b38":"markdown","22ee9ecd":"markdown","21d2d9e1":"markdown","05b071d8":"markdown","ac746195":"markdown"},"source":{"67b9a161":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2fb9cdf":"import warnings\nwarnings.simplefilter(\"ignore\")","601a9cf8":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f851f1f8":"df = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')\ndf.head()","911893d2":"df.isnull().sum()","37c066df":"df.shape","0a941e4b":"df.info()","942b28c6":"sns.set_style('darkgrid')\nfig, ax = plt.subplots(figsize=(10,4))\nsns.countplot(x='model',data=df,ax=ax,palette='Paired')\nplt.title('Countplot of all Models',y=1.0, pad=20,fontsize=14,fontweight='bold')","10c493a7":"labels='Manual Transmission','Semi-Automatic Transmission','Automatic Transmission'\nsizes=list(df['transmission'].value_counts())\ncolors=['#8da5f7','lightcoral', '#E9DAB4']\nplt.pie(sizes,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('Transmission Breakdown',y=1.0, pad=20,fontsize=14,fontweight='bold')\nplt.legend(loc=\"right\", bbox_to_anchor=(1.5, 1))\nplt.show()","c99a44e0":"labels='Diesel','Petrol','Hybrid'\nsizes=list(df['fuelType'].value_counts())\ncolors=['#8da5f7','lightcoral', '#E9DAB4']\nplt.pie(sizes,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True)\nplt.axis('equal')\nplt.title('Fuel Type Breakdown',y=1.0, pad=40,fontsize=14,fontweight='bold')\nplt.legend(loc=\"right\", bbox_to_anchor=(1.5, 1))\nplt.show()","bd6acf1c":"fig, ax = plt.subplots(figsize=(15,4))\nsns.barplot(x='model',y='price',data=df,ax=ax,palette='Set1',estimator=np.mean)\nplt.title('Barplot of Mean Price of each Model',y=1.0, pad=20,fontsize=14,fontweight='bold')","51306c8d":"price_mean=df.groupby('year').price.mean()\ncount=0\nyear=[[1997], [1998], [2002], [2003], [2004], [2005], [2006], [2007], [2008], [2009], [2010],\n       [2011], [2012], [2013], [2014], [2015], [2016], [2017], [2018], [2019], [2020]]\nfor i in price_mean:\n    year[count].append(i)\n    count=count+1","1a0b8edc":"sns.lineplot(x=[i[0] for i in year],y=price_mean,color='r')\nplt.title('Line Plot of Mean Price of all Years',y=1.0, pad=20,fontsize=14,fontweight='bold')","3ca9c4cd":"def line(model):\n    df_model=df.loc[df['model']==model]\n    model_year=df_model['year'].unique()\n    model_year.sort()\n    mean_all=[i[1] for i in year if i[0] in model_year]\n    sns.lineplot(x=model_year,y=mean_all,label='All Model',color='r')\n    mean_price_model=df_model.groupby('year').price.mean()\n    sns.lineplot(x=model_year,y=mean_price_model,label=model)\n    plt.title('Line Plot between Mean Price of Model'+model+' and Mean Price of all Models in that particular time span',y=1.0, pad=20,fontsize=14,fontweight='bold')","f79c0082":"line(' A1')","b47448ba":"line(' A3')","c899e44a":"line(' A4')","3965adff":"line(' A5')","701ca073":"line(' A6')","e5d141c6":"line(' A7')","05cbe245":"line(' A8')","393b15c2":"line(' Q2')","4d8dc470":"line(' Q3')","83e0427f":"line(' Q5')","2304fc78":"line(' Q7')","590cd644":"line(' Q8')","690f974c":"line(' RS4')","f06d7671":"line(' RS5')","74407ad2":"line(' R8')","d0a230ce":"line(' SQ5')","16502aad":"line(' S8')","b38b3d90":"line(' SQ7')","67c6f2e0":"line(' S3')","589ab27b":"line(' S5')","a12bad84":"sns.catplot(kind='bar',x='transmission',y='price',data=df)\nplt.title('Barplot of Mean Price of each Tranmission type',y=1.0, pad=20,fontsize=14,fontweight='bold')","a4dce9b7":"fig, ax = plt.subplots(figsize=(20,5))\nsns.barplot(x='model',y='price',hue='transmission',data=df,ax=ax,palette='Set1')\nplt.title('Barplot of Mean Price of each Model for each Transmission Type',y=1.0, pad=20,fontsize=14,fontweight='bold')","655a4a68":"sns.catplot(kind='bar',x='fuelType',y='price',data=df)\nplt.title('Barplot of Mean Price of each Fuel Type',y=1.0, pad=20,fontsize=14,fontweight='bold')","d6349099":"fig, ax = plt.subplots(figsize=(20,5))\nsns.barplot(x='model',y='price',hue='fuelType',data=df,ax=ax,palette='Set1')\nplt.title('Barplot of Mean Price of each Model for each Fuel Type',y=1.0, pad=20,fontsize=14,fontweight='bold')","00c2f71b":"sns.distplot(df['price'],color='b')\nplt.title('Distribution of Price',y=1.0, pad=10,fontsize=14,fontweight='bold')","016378ef":"a=sns.FacetGrid(df,palette='bright',hue='transmission',aspect=9\/5,height=4)\na.map(sns.distplot,'price')\nplt.title('Distribution of Price w.r.t. Transmission',y=1.0, pad=10,fontsize=14,fontweight='bold')\na.add_legend(fontsize=12)","9ebe8a2b":"sns.boxplot(x='transmission',y='price',data=df)\nplt.title('Boxplot of Price for each Tranmission type',y=1.0, pad=20,fontsize=14,fontweight='bold')","23ff65a7":"sns.violinplot(x='transmission',y='price',data=df)\nplt.title('Violinplot of Price for each Tranmission type',y=1.0, pad=20,fontsize=14,fontweight='bold')","640579d0":"a=sns.FacetGrid(df,palette='bright',hue='fuelType',aspect=9\/5,height=4)\na.map(sns.distplot,'price')\nplt.title('Distribution of Price w.r.t. Fuel Type',y=1.0, pad=10,fontsize=14,fontweight='bold')\na.add_legend(fontsize=12)","df9bb19c":"sns.boxplot(x='fuelType',y='price',data=df)\nplt.title('Boxplot of Price for each Fuel type',y=1.0, pad=20,fontsize=14,fontweight='bold')","a47580ad":"sns.violinplot(x='transmission',y='price',data=df)\nplt.title('Violinplot of Price for each Tranmission type',y=1.0, pad=20,fontsize=14,fontweight='bold')","b5ff0b3c":"sns.distplot(df['mileage'],color='b')\nplt.title('Distribution of Mileage',y=1.0, pad=10,fontsize=14,fontweight='bold')","1e9846ba":"sns.distplot(df['tax'],color='b')\nplt.title('Distribution of Tax',y=1.0, pad=10,fontsize=14,fontweight='bold')","f7c64542":"sns.distplot(df['mpg'],color='b')\nplt.title('Distribution of MPG',y=1.0, pad=10,fontsize=14,fontweight='bold')","ba309568":"sns.distplot(df['engineSize'],color='b')\nplt.title('Distribution of Engine Size',y=1.0, pad=10,fontsize=14,fontweight='bold')","bc8e582d":"sns.pairplot(df,palette='bright')","1951f862":"df.corr()","756317ad":"sns.heatmap(df.corr())","f064e2e2":"def remove_outlier(col):\n    sorted(col)\n    Q1,Q3=col.quantile([0.25,0.75])\n    IQR=Q3-Q1\n    lower_range=Q1-(1.5*IQR)\n    upper_range=Q3+(1.5*IQR)\n    return lower_range,upper_range","618faa05":"sns.boxplot(y='price',data=df)\nplt.title('Boxplot of Price',y=1.0, pad=20,fontsize=14,fontweight='bold')","3c3c9cc4":"lower,upper=remove_outlier(df['price'])\ndf['price']=np.where(df['price']>upper,upper,df['price'])\ndf['price']=np.where(df['price']<lower,lower,df['price'])\nsns.boxplot(y='price',data=df)\nplt.title('Boxplot of Price after removal of outliers',y=1.0, pad=20,fontsize=14,fontweight='bold')","d62f9232":"sns.boxplot(y='mileage',data=df)\nplt.title('Boxplot of Mileage',y=1.0, pad=20,fontsize=14,fontweight='bold')","8ae60f5b":"lower,upper=remove_outlier(df['mileage'])\ndf['mileage']=np.where(df['mileage']>upper,upper,df['mileage'])\ndf['mileage']=np.where(df['mileage']<lower,lower,df['mileage'])\nsns.boxplot(y='mileage',data=df)\nplt.title('Boxplot of Mileage after removal of outliers',y=1.0, pad=20,fontsize=14,fontweight='bold')","206a7c2f":"sns.boxplot(y='tax',data=df)\nplt.title('Boxplot of Tax',y=1.0, pad=20,fontsize=14,fontweight='bold')","4225a436":"lower,upper=remove_outlier(df['tax'])\ndf['tax']=np.where(df['tax']>upper,upper,df['tax'])\ndf['tax']=np.where(df['tax']<lower,lower,df['tax'])\nsns.boxplot(y='tax',data=df)\nplt.title('Boxplot of Tax after removal of outliers',y=1.0, pad=20,fontsize=14,fontweight='bold')","af18b442":"df_encoded=pd.get_dummies(df, drop_first=True)\ndf_encoded=df_encoded.astype('float64')\ndf_encoded.head()","948b2e3d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_scaler = scaler.fit_transform(df_encoded)\ndf_scaler = pd.DataFrame(df_scaler, columns = df_encoded.columns)\ndf_scaler.head()","ceddf199":"from sklearn.model_selection import train_test_split\nX=df_scaler.drop('price',axis=1)\ny=df_scaler['price']\n# Test Set Not to be used till final model selection\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)","c5cf3628":"X=X_train\ny=y_train\nX_train_filter, X_test_filter, y_train_filter, y_test_filter = train_test_split(X,y,test_size=0.3,random_state=42)","a148bc41":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2,f_regression \nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\n\ncolumn_names = df_encoded.drop(columns = ['price']).columns\n\nno_of_features = []\nr_squared_test = []\n\nfor k in range(3, 35):\n    selector = SelectKBest(score_func=f_regression, k = k)\n    X_train_transformed_filter = selector.fit_transform(X_train_filter, y_train_filter)\n    X_test_transformed_filter = selector.transform(X_test_filter)\n    regressor = LinearRegression()\n    regressor.fit(X_train_transformed_filter, y_train_filter)\n    no_of_features.append(k)\n    r_squared_test.append(regressor.score(X_test_transformed_filter, y_test_filter))\n    \n\n\nax=sns.lineplot(x=no_of_features,y=r_squared_test)\nax.set(xlabel=\"No of Features\", ylabel = \"R2 Score\")\nplt.title('No of features vs R2 score',y=1.0, pad=20,fontsize=14,fontweight='bold')","2f50a0da":"selector = SelectKBest(score_func=f_regression, k = 24)\nX_train_transformed_filter = selector.fit_transform(X_train_filter, y_train_filter)\nX_test_transformed_filter = selector.transform(X_test_filter)\ncolumn_names[selector.get_support()]","c1a3cff2":"from sklearn.tree import DecisionTreeRegressor \nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\ndef regression_model(model):\n    regressor = model\n    regressor.fit(X_train_transformed_filter, y_train_filter)\n    score = regressor.score(X_test_transformed_filter, y_test_filter)\n    return regressor, score","4a9a728d":"model_performance = pd.DataFrame(columns = [\"Model\", \"Score\"])\n\nmodels_to_evaluate = [LinearRegression(),DecisionTreeRegressor(), RandomForestRegressor(),LGBMRegressor(), XGBRegressor()]\n\nfor model in models_to_evaluate:\n    regressor, score = regression_model(model)\n    model_performance = model_performance.append({\"Model\": model, \"Score\": score}, ignore_index=True)\n\nmodel_performance","c6f5aabe":"X_train=X_train[column_names[selector.get_support()]]\nX_test=X_test[column_names[selector.get_support()]]","59f9b7b9":"from sklearn.metrics import r2_score\n\nreg=XGBRegressor()\nreg.fit(X_train,y_train)\ny_pred=reg.predict(X_test)\ns=r2_score(y_test,y_pred)\nprint('R2 Score before Tuning:',s)","1a99dec9":"reg=XGBRegressor(learning_rate =0.1,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\nreg.fit(X_train,y_train)\ny_pred=reg.predict(X_test)\ns=r2_score(y_test,y_pred)\nprint(s)","aa732529":"from sklearn.model_selection import GridSearchCV\n\nparam_grid_1={'booster':['gbtree','gblinear','dart']}\n\nreg=XGBRegressor(learning_rate =0.1,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid1=GridSearchCV(reg,param_grid_1, cv=5)\ngrid1.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid1.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid1.best_score_))","8792a986":"param_grid_2={ 'max_depth':range(3,10,2),\n 'min_child_weight':range(1,6,2)}\n\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid2=GridSearchCV(reg,param_grid_2, cv=5)\ngrid2.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid2.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid2.best_score_))","6826d5c9":"param_test2 = {\n 'max_depth':[8,9,10],\n 'min_child_weight':[2,3,4]\n}\n\n\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid3=GridSearchCV(reg,param_test2, cv=5)\ngrid3.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid3.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid3.best_score_))","2fd9baa1":"param_test3 = {\n 'max_depth':[10,11,12]\n}\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=5,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid4=GridSearchCV(reg,param_test3, cv=5)\ngrid4.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid4.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid4.best_score_))","d1800c3d":"param_grid_3 = {\n 'gamma':[i\/10.0 for i in range(0,5)]\n}\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid5=GridSearchCV(reg,param_grid_3, cv=5)\ngrid5.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid5.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid5.best_score_))","7e69eede":"param_grid_4 = {\n 'subsample':[i\/10.0 for i in range(6,10)],\n 'colsample_bytree':[i\/10.0 for i in range(6,10)]\n}\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid6=GridSearchCV(reg,param_grid_4, cv=5)\ngrid6.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid6.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid6.best_score_))","ef698593":"param_test5 = {\n 'subsample':[i\/100.0 for i in range(75,90,5)],\n 'colsample_bytree':[i\/100.0 for i in range(75,90,5)]\n}\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid7=GridSearchCV(reg,param_test5, cv=5)\ngrid7.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid7.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid7.best_score_))\n","4a0b84cd":"param_test6 = {\n 'reg_alpha':[1e-5, 1e-2, 0.1, 1, 100]\n}\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid8=GridSearchCV(reg,param_test6, cv=5)\ngrid8.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid8.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid8.best_score_))","4fd8cf60":"param_test7 = {\n 'reg_alpha':[1e-6,1e-5,5e-6,1e-4]\n}\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid9=GridSearchCV(reg,param_test7, cv=5)\ngrid9.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid9.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid9.best_score_))","b87dcc2c":"param_test8={'reg_lambda': [1e-5, 1e-2, 0.1, 1, 100]}\n\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n reg_alpha= 1e-06,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid10=GridSearchCV(reg,param_test8, cv=5)\ngrid10.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid10.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid10.best_score_))","59740022":"param_test9={'reg_lambda': [0.5, 1, 3, 5, 10]}\n\nreg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n reg_alpha= 1e-06,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid11=GridSearchCV(reg,param_test9, cv=5)\ngrid11.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid11.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid11.best_score_))","6bd0a1f4":"param_test10={'learning_rate': [0.01, 0.5, 0.1, 0.2, 0.3]}\n\nreg=XGBRegressor(booster='gbtree', learning_rate =0.01,\n max_depth=10,\n reg_alpha= 1e-06,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\n\ngrid12=GridSearchCV(reg,param_test10, cv=5)\ngrid12.fit(X_train,y_train)\n\nprint(\"Tuned Parameter: {}\".format(grid12.best_params_))\nprint(\"Tuned Accuracy: {}\".format(grid12.best_score_))","584fae90":"reg=XGBRegressor(booster='gbtree', learning_rate =0.1,\n max_depth=10,\n reg_alpha= 1e-06,\n min_child_weight=4,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n nthread=4,\n scale_pos_weight=1,\n seed=27)\nreg.fit(X_train,y_train)\ny_pred=reg.predict(X_test)\ns=r2_score(y_test,y_pred)\nprint('R2 score after tuning:',s)","965e9c04":"Observations from the Barplot\n1. Model R8 has the highest Mean price for Petrol fuel type\n2. Model Q8 has the highest Mean price for Diesel fuel type\n3. Model Q5 has the highest Mean price for Hybrid fuel type\n4. Models RS3, RS5, R8, S8, S3, S5, RS7 don't have Diesel Fuel Type\n5. Models Q7, A2 don't have Petrol Fuel Type\n6. Only Models A3, Q5, Q7 have Hybrid Fuel Type\n","b541e175":"Observation from the Lineplot\n1. The prices for Model A5 increased with Years but with some minor drops\n2. The prices for Model A5 were similar to the mean prices for all models","81472ef8":"Observations from the Lineplot\n\n1. The Prices for Model RS5 has increased with Years\n2. The Prices for Model RS5 were above the mean price","a179956e":"Tuning Learning Rate","d57f09d0":"Observations from the Lineplot\n\n1. The Prices for Model RS4 has increased with Years\n2. The Prices for Model RS4 were above the mean price","693b8dfa":"Observations from the Distribution Plot\n1. Most of the prices are between 16000-18000","ff9086f8":"Observation from the Boxplot\n1. There are many outliers we need to remove it","6a5e6fd3":"Observations from the Lineplot\n\n1. The Prices for Model Q3 has increased with Years\n2. The Prices for Model Q3 were similar to the mean price","70e9a453":"Observation from the Lineplot\n\n1. The Prices for Model A6 had increased significantly in 2004\n2. The Prices for Model A6 were almost same till 2006\n3. The Prices for Model A6 dropped significantly in 2007\n4. The Prices for Model A6 were almost same till 2008, from then on the prices increased with year \n5. The prices for Model A3 were above the mean prices for all models from 2003 to 2006\n6. The prices for Model A3 were below the mean prices for all models from 2006 to 2010\n7. The prices for Model A3 were similar to the mean prices for all models from 2010 ","cff0a88e":"Observations from the Lineplot\n\n1. The Prices for Model A8 has increased with Years\n2. The Prices for Model A8 were similar to mean price till 2010 from then on the prices were above the mean\n","d91c39f1":"Observations from the Line Plot\n\n1.  Price increases with Year","7ccd3cd0":"XGBoost has the highest R2 score, so XGBoost is the selected model","bfa01e89":"Selecting the best booster","afefe25f":"Tuning Gamma\n","36657ada":"Observation\n1. There are 10668 datapoints\n2. There are 9 Columns","a7cbac27":"Observations from the Lineplot\n\n1. The Prices for Model S3 has increased with Years\n2. The Prices for Model S3 were above the mean price","e8674aa6":"Tuning Max depth and min child weight","2989ddc4":"Tuning Subsample and colsample_bytree","632543a9":"Observations from the Lineplot\n1. The Prices for Model A7 has increased with Years\n2. The Prices for Model A7 were above the mean price for all model","08cf2d2d":"Observations from the Lineplot\n\n1. The Prices for Model Q8 has increased with Years\n2. The Prices for Model Q8 were above the mean price","1b6dd330":"Observations from the Barplot\n1. Hybrid Fuel Type cars have the highest mean price but this should be ignored since only 0.3% of the dataset is has Hybrid Fuel Type\n2. Petrol and Diesel Fuel type have almost the same mean price but Diesel's mean price is slightly higher","dec2076d":"### Hyper Parameter Tuning","cd129967":"Observations from the Lineplot\n\n1. The Prices for Model Q7 has increased with Years with some minor drops\n2. The Prices for Model Q7 were above the mean price","5754a784":"Finding number of best features","168c70be":"Observations from the Lineplot\n\n1. The Prices for Model S5 has increased with Years\n2. The Prices for Model S5 were above the mean price","7946e542":"Observation \n1. There are 4 Categorical Variables\n2. There are 5 Numerical Variables","20d01596":"Observations from the Distribution Plot\n1. The Distribution for Petrol and Diesel overlap so Fuel type doesn't effect hte prices\n2. Hydrid Fuel Type can be ignored since there are only 0.3% of the data points have Fuel Type Hybrid ","1dcfef1b":"#### 1. Filter Method","f0b769d4":"Observation from the Boxplot\n1. There are many outliers we need to remove it","f4125b6f":"#### Tuning","72013b80":"Observations from the Piechart\n\n1.  52.3% of the Audi Cars are on Diesel Engine\n2.  47.5% of the Audi Cars are on Petrol Engine\n3.  0.3% of the Audi Cars are on Hybrid Engine and it can be dropped from the dataset","3f6b38c8":"Spliting the X_train data","8e615f12":"##### Encoding Data","9c9adcbb":"Observations from the Lineplot\n\n1. The Prices for Model Q5 has increased with Years\n2. The Prices for Model Q5 were above the mean price","44e52296":"Observations from the Piechart\n\n1. 41.0% of the  Audi Cars are Manual Transmission\n2. 33.7% of the  Audi Cars are Semi-Automatic Transmission\n3. 24.5% of the  Audi Cars are Semi-Automatic Transmission","e3ebab5e":"Observations from the Lineplot\n\n1. The Prices for Model SQ7 has increased with Years\n2. The Prices for Model SQ7 were above the mean price","0163f1c6":"Observations from the Lineplot\n\n1. The Prices for Model S8 has increased with Years\n2. The Prices for Model S8 were above the mean price","224dff10":"Observations from the Countplot\n\n1. Model A3 has the highest count\n2. Model Q3 has the second highest count\n3. Model A4 has the third highest count","a621028f":"Observation from the Barplot\n1. Mean price for Automatic Transmission is highest\n2. Mean Price for Automatic and Semi-Auto Transmission have only a slight difference in thier mean prices","7d9a1dca":"Features Selected are 'year', 'mileage', 'tax', 'mpg', 'engineSize', 'model_ A3', 'model_ A4',\n       'model_ A5', 'model_ A7', 'model_ A8', 'model_ Q5', 'model_ Q7',\n       'model_ Q8', 'model_ R8', 'model_ RS3', 'model_ RS4', 'model_ RS5',\n       'model_ RS6', 'model_ S4', 'model_ SQ5', 'model_ SQ7',\n       'transmission_Manual', 'transmission_Semi-Auto', 'fuelType_Hybrid'","82f01a35":"Tuning the above parameters to 0.5 decimal","fb413c1b":"Observations from the Lineplot\n\n1. The Prices for Model SQ5 has increased with Years with some minor drops\n2. The Prices for Model SQ5 were above the mean price","d18f3a73":"Observation from the Boxplot\n1. There are many outliers we need to remove it","56f09428":"### Feature Selection","4f054158":"##### Creating a test set","412b4480":"Tuning Lambda","6aaaf14b":"Observations from the Lineplot\n\n1. The Prices for Model R8 has increased with Years\n2. The Prices for Model R8 were above the mean price","cdea9691":"Checking for max_depth 10,11,12 since we didn't check for values above 10","5c8f1759":"Observation from the Boxplot and Violin Plot\n1. Fuel Type has no effect on the Price","b129dd50":"Observations from the Line Plot\n1. The prices for Model A1 had dropped in 2011\n2. By 2014 the prices for Model A1 were back to 2010 levels\n3. From 2014 the prices for Model A1 had increased every year\n4. Prices for Model A1 were below the Mean Prices for all Models expect for year 2010","104c3a74":"Model after Tuning","db72a954":"##### Standardizing the Data","56c57b31":"Observations from the Line Plot\n1. The prices for Model A3 had dropped constantly till 2003 \n2. The prices for Model A3 had briefly rised to 1998 levels in 2004 but had again dropped in 2005\n3. From 2005 the prices for Model A3 increased with Years but with some minor drops\n4. Except for 1998 & 2004 the prices for Model A3 were below the mean prices for all models.","5e230819":"Observations from the Lineplot\n\n1. The Prices for Model Q2 has increased with Years\n2. The Prices for Model Q2 were below the mean price","a41dbab9":"checking for Max_depth 8,9,10 & min_child_weight 2,3,4 since we skipped them in the above cell","f6b21be3":"Observations from Pairplot, Correlation Matrix and Correlation Heatmap\n1. Price has Large Positive Correleation with Engine Size\n2. Price has Medium Positive Correlation with Year, Tax\n3. Price has Large Negative Correleation with Mileage, MPG\n4. MPG has high correlation with all the other features and should be dropped from the Dataset\n5. Mileage and Price also have Strong Negative correlation\n6. Tax and Engine Size have Medium Positive Correlation","85b5efde":"Observation from the barchart\n1. Models R8 has the highest mean price for all Transmission types\n2. Models S4, SQ5, S8, A2, RS7 have no Semi-auto Transmission cars\n3. Models Q7, RS6, A8, Q8, RS5, SQ5, S8, SQ7, S5, RS7 have no Manual Transmission cars\n4. Model A2 has no Automatic Transmission cars","4b7a813b":"Observations from the Barplot\n\n1. R8 has the highest Mean Price\n2. Q8 has the second Mean Price\n3. RS6 has the third Mean Price","cb0369be":"Observation\n1. No Null values","32296da3":"### The R2 score increased from 96.1% to 96.3%","5defb7a6":"Tuning Alpha","a824ca72":"#### Before Tuning","819c3d9f":"Removing Outliers","7c1f2b38":"Observation from the Boxplot and Violinplot\n1. Manual transmission has effect on the price\n2. Automatic & Semi-Automatic tranmission same effect on the price. ","22ee9ecd":"Giving initial values to the parameter","21d2d9e1":"24 features seems to be best since the value of r2 becomes nearly constant","05b071d8":"Observation from the Distribution Plot\n1. Manual Transmission has effect on the Price\n2. Semi-Auto and Automatic transmission overlap each other they have the same effect on the price.","ac746195":"Observation from the Lineplot \n1. The prices for Model A3 increased with Years\n2. The prices for Model A3 were similar to the mean prices for all models "}}