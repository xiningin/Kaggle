{"cell_type":{"50c29148":"code","5f616892":"code","42be83f5":"code","1e8ec10b":"code","15fcf214":"code","11c54bcb":"code","69b28855":"code","eb0d572b":"code","1a702210":"code","bd672a8d":"code","a0d1e245":"code","e5187d8f":"code","f9082e82":"code","370a60f0":"code","a146f4d2":"code","3bd5fec9":"code","f726cd04":"code","524f7074":"code","fe11c551":"code","ab25ef82":"code","50c4a38b":"code","622aa77f":"markdown","473a2c2a":"markdown","fec628bf":"markdown","a0f57e81":"markdown","18e4995b":"markdown","371d257e":"markdown","49be1fca":"markdown","0ef409f9":"markdown","62aeffa4":"markdown","f2de0ded":"markdown","bf41390d":"markdown","5d30828b":"markdown","63525c4a":"markdown","376aca38":"markdown","b9aaf4a3":"markdown","14c0eb6d":"markdown","deef0f9b":"markdown","ed22aff0":"markdown","40a956b1":"markdown","3a870b06":"markdown"},"source":{"50c29148":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5f616892":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\n%matplotlib inline ","42be83f5":"df = pd.read_csv('..\/input\/googleplaystore.csv')\ndf1= pd.read_csv('..\/input\/googleplaystore_user_reviews.csv')","1e8ec10b":"len(df.App.unique())","15fcf214":"df.head()","11c54bcb":"#Lets take a look to missing data.\ndf.info()\npd.concat([df.isnull().sum(), 100 * df.isnull().sum()\/len(df)], \n              axis=1).rename(columns={0:'Missing Records', 1:'Percentage (%)'})","69b28855":"df.Size.value_counts()","eb0d572b":"df['Category'].value_counts()","1a702210":"#data manupitaion and data clearance\ndf.Size = df.Size.str.replace(\"M\", \"MB\")\ndf.Size = df.Size.str.replace(\"k\", \"KB\")\ndf = df[~(df.Category.isin(['1.9']))]\ndf = df[~(df.Rating.isin(['NaN']))]\n\ndf.Installs = df.Installs.str.replace(\"+\", \"\")\ndf.Installs = df.Installs.str.replace(\",\", \"\")\ndf.Installs = df.Installs.astype(\"float\")\n\ndf[\"categoryInstallSum\"] = df.groupby('Category').Installs.transform('sum')\ndf[\"categoryCount\"] = df.groupby('Category').Installs.transform('count')\ndf['meanInstall'] = df['categoryInstallSum'] \/ df['categoryCount']","bd672a8d":"colors = ['aqua', 'lightgrey', 'lightgreen', '#D0F9B1', 'khaki', 'grey']\n\n\nCategory = df['Category'].value_counts()[:15]\nlabel = Category.index\nsize = Category.values\n\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=colors))\n\ndata = [trace]\nlayout = go.Layout(title=' App Category Distribution')\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","a0d1e245":"colors = ['aqua', 'lightgrey', 'lightgreen', '#D0F9B1', 'khaki', 'grey']\n\n\ndf_cat_user = df.drop_duplicates('Category')[['Category', 'meanInstall']].sort_values('meanInstall', \n                                                                                      \n                                                                                      ascending=False)[:15]\nlabel = df_cat_user.Category\nsize = df_cat_user.meanInstall\n\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=colors))\n\ndata = [trace]\nlayout = go.Layout(title='User Pie Distribution')\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","e5187d8f":"Content = df['Content Rating'].str.split(',')\nContent_set = []\nfor i in Content.dropna():\n    Content_set.extend(i)\n    Content = pd.Series(Content_set).value_counts()[:6] \n    \nlabel = Content.index\nsize = Content.values\n\ncolors = ['#FEBFB3', 'skyblue', '#96D38C', '#D0F9B1', 'tan', 'lightgrey']\n\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=colors)\n              )\n\ndata = [trace]\nlayout = go.Layout(\n    title='User Audience ', \n    legend=dict(orientation=\"h\")\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f9082e82":"Type = df['Type'].value_counts()\nlabel = Type.index\nsize = Type.values\ncolors = ['skyblue', 'lightgreen']\n\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=colors)\n              )\n\ndata = [trace]\nlayout = go.Layout(title='Type',\n                   legend=dict(orientation=\"h\")\n                  )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","370a60f0":"df.Reviews = df.Reviews.astype(\"float\")\ndata = df[df.Reviews>1000000][['Reviews','Rating']]\ndata[\"index\"] = np.arange(len(data))\n\nfig = ff.create_scatterplotmatrix(data, diag='box', index='index',size= 3,\n                               height=700, width=700, colormap='RdBu')\npy.iplot(fig)","a146f4d2":"plt.figure(figsize=(15,6))\nsns.boxplot(x = \"Category\", y = \"Rating\",palette=\"tab20\", data= df)\nplt.xticks(rotation=80)\nplt.show()","3bd5fec9":"plt.figure(figsize=(15,6))\n\nsns.kdeplot(df[df.Category=='FAMILY'].Rating,label=\"FAMILY\")\nsns.kdeplot(df[df.Category=='GAME'].Rating,label=\"GAME\")\nsns.kdeplot(df[df.Category=='TOOLS'].Rating,label=\"TOOLS\")\nsns.kdeplot(df[df.Category=='MEDICAL'].Rating,label=\"MEDICAL\")\nsns.kdeplot(df[df.Category=='COMMUNICATION'].Rating,label=\"COMMUNICATION\")\n\n\nplt.legend();","f726cd04":"Rating = round(df['Rating'].value_counts(normalize=True), 4)\ntrace = go.Bar(\n    x=Rating.index,\n    y=Rating.values,\n    marker=dict(\n        color = Rating.values,\n        colorscale='Reds',\n        showscale=True)\n)\n\ndata = [trace]\nlayout = go.Layout(title='Rating distribution', \n                       yaxis = dict(title = '% of App')\n                  )\n\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(dict(title = 'Rating', \n                                   tickfont = dict(size = 12)))\npy.iplot(fig)","524f7074":"hist_data = [df[df.Type == 'Paid'].Rating, df[df.Type == 'Free'].Rating]\n\nlabels = ['Paid', 'Free']\ncolors = ['navy', 'red']\n\nfig = ff.create_distplot(hist_data, labels, colors=colors,\n                         show_hist=False, bin_size=.2)\n\n\nfig['layout'].update(title='Rating by Type')\npy.iplot(fig)","fe11c551":"dfchart = df.groupby(['Category', 'Type']).agg({'App' : 'count'}).reset_index()\n\nouter_circle = ['GAME', 'FAMILY', 'MEDICAL', 'TOOLS']\nouter_circle_values = [len(df[df.Category == category]) for category in outer_circle]\n\na,b,c,d =[plt.cm.Blues, plt.cm.Reds, plt.cm.Greens, plt.cm.Purples]\n\ninner_circle_names = ['Paid', 'Free'] * 4\ninner_circle_values = []\n\nfor category in outer_circle:\n    for t in ['Paid', 'Free']:\n        x = dfchart[dfchart.Category == category]\n        try:\n            inner_circle_values.append(int(x.App[x.Type == t].values[0]))\n        except:\n            inner_circle_values.append(0)\n\nexplode = (0.015,0.015,0.015,0.015)\n\n# Outer ring\nfig, ax = plt.subplots(figsize=(10,10))\nax.axis('equal')\nmypie, texts, _ = ax.pie(outer_circle_values, radius=1.5, labels=outer_circle, autopct='%1.1f%%', pctdistance=1.1,\n                                 labeldistance= 0.75,  explode = explode, colors=[a(0.6), b(0.6), c(0.6), d(0.6)], textprops={'fontsize': 12})\nplt.setp( mypie, width=1, edgecolor='black')\n \n# Inner ring\nmypie2, _ = ax.pie(inner_circle_values, radius=0.7, labels=inner_circle_names, labeldistance= 0.7, \n                   textprops={'fontsize': 12}, colors = [a(0.4), a(0.2), b(0.4), b(0.2), c(0.4), c(0.2), d(0.4), d(0.2)])\nplt.setp( mypie2, width=0.7, edgecolor='black')\n \nplt.show()","ab25ef82":"dflast = pd.merge(df, df1, on = \"App\", how = \"inner\")\ndflast = dflast.dropna(subset=['Sentiment', 'Translated_Review'])","50c4a38b":"grouped_sentiment_category_count = dflast.groupby(['Category', 'Sentiment']).agg({'App': 'count'}).reset_index()\ngrouped_sentiment_category_sum = dflast.groupby(['Category']).agg({'Sentiment': 'count'}).reset_index()\n\ndf_review = pd.merge(grouped_sentiment_category_count, grouped_sentiment_category_sum, on=[\"Category\"])\n\ndf_review['Sentiment_Normalized'] = df_review.App\/df_review.Sentiment_y\ndf_review = df_review.groupby('Category').filter(lambda x: len(x) ==3)\n\ndf_review\n\ntrace1 = go.Bar(\n    x=list(df_review.Category[::3])[6:-5],\n    y= df_review.Sentiment_Normalized[::3][6:-5],\n    name='Negative',\n    marker=dict(color = 'Red')\n)\n\ntrace2 = go.Bar(\n    x=list(df_review.Category[::3])[6:-5],\n    y= df_review.Sentiment_Normalized[1::3][6:-5],\n    name='Neutral',\n    marker=dict(color = 'seashell')\n)\n\ntrace3 = go.Bar(\n    x=list(df_review.Category[::3])[6:-5],\n    y= df_review.Sentiment_Normalized[2::3][6:-5],\n    name='Positive',\n    marker=dict(color = 'Green')\n)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    title = 'Review analysis',\n    barmode='stack',\n    xaxis = {'tickangle': -45},\n    yaxis = {'title': 'Breakdown of reviews'}\n)\n\nfig = go.Figure(data=data, layout=layout)\n\nplotly.offline.iplot({'data': data, 'layout': layout})","622aa77f":"## Data Cleaning and Manupilation\n - Convert all app sizes to MB and KB.\n - Remove non-numeric characters from Installs and change data type into float.\n - Create new columns to calculate approximate user value for each category.","473a2c2a":"## Distribution among Top Categories and Type","fec628bf":"# Category Rating Breakdown","a0f57e81":"- **FAMILY** category have the highest market prevelance (24%) it only takes up 1.34% as users,\n- While **COMMUNICATION** category generates only 4.5% of the store, with 22.7% of users.","18e4995b":"# Review Analysis","371d257e":"In order to better see the binary connection between Reviews and Rating, I have chosen the **Reviews** data over a certain number.","49be1fca":"## User \/ Category\n We found the pie data for categories but when we look at the user per categories the data changes obviously.","0ef409f9":"## Rating Distribution","62aeffa4":"# Ratings \/ Reviews","f2de0ded":"- While the percentage of **Positive** comments has the highest rate on EDUCATION category; we see the GAME category in the percentage of negative comments.\n\n- For **FAMILY** and **EDUCATION** categories, where Neutral is the least; users can rate their experience as 'good' or 'bad'.","bf41390d":"Content restrictions of the applications in the Store are as follows;\n- 79.2% 'Everyone'\n- 11.6% 'Teen'\n- 4.92% 'Mature'\n- 4.24% 'Everyone +10'","5d30828b":"### Data exploration","63525c4a":"On type breakdown for store we see that most of the applications for free (93.1%).","376aca38":"### Category - Play Store Pie Data","b9aaf4a3":"## Import libraries","14c0eb6d":"Merge Review data; ","deef0f9b":"#KDE-Plot","ed22aff0":"- When we look at the 'Rating' distribution in terms of categories, almost all categories have a certain performance.\n- While categories such as **TOOLS**, **FINANCE**, **GAME** contains much outlier datas; **ART_AND_DESIGN** and **EVENTS** almost negligible.\n- **BOOKS_AND_REFERENCES** and **HEALTH_AND_FITNESS** categories performs with averaging 4.5 rating.","40a956b1":"## Rating Breakdown by Type","3a870b06":"## Market breakdown by Type\nFree vs Paid"}}