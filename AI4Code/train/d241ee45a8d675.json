{"cell_type":{"57fc293d":"code","8cdd81e6":"code","c585f678":"code","63d17687":"code","8cb2b96e":"code","f83bf4c3":"code","dbd31e82":"code","2fa67534":"code","bdc54219":"code","fd84af7a":"code","d3dc614e":"code","53aa1556":"code","ba7fc8a7":"code","55e6d219":"code","fabb8246":"code","59858e70":"code","39478a0b":"code","13832f36":"code","0897add1":"code","ad5ebdf3":"code","441ee525":"code","9db9df7e":"code","233cbf69":"code","03825c8d":"code","9c54862e":"markdown","8597bfa3":"markdown","3b5e1b02":"markdown","1fe66c97":"markdown","373bf688":"markdown","8d2dfc05":"markdown","afa0d714":"markdown","2694c4ee":"markdown","d8a27d01":"markdown"},"source":{"57fc293d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8cdd81e6":"from datetime import datetime, timedelta\n\nimport plotly.graph_objects as go\nimport plotly.express as px","c585f678":"df = pd.read_csv(\"\/kaggle\/input\/taiwanweeklyboxoffice\/box_office.csv\", parse_dates=[\"week\", \"release_date\"])\ndf.tail()","63d17687":"latest_week = df.week.max()\ndf_latest = df[df.week == latest_week].copy().sort_values(\"revenue\", ascending=False)\nprint(f\"{df_latest.shape[0]} movies this week\")\ndf_latest.head()","8cb2b96e":"fig = px.scatter(df_latest.iloc[:30], x=\"revenue\", y=\"theaters\", color=\"country\", hover_data=['name'])\nfig.update_layout(\n    title_text=f\"{latest_week.strftime('%Y%m%d')} Box Office (Top 30)\", \n    xaxis_title_text='Revenue ($\/TWD in log scale)', # xaxis label\n    yaxis_title_text='Theaters', # yaxis label\n    width=800,\n    height=400,\n    xaxis_type=\"log\",\n    margin=dict(l=20, r=20, t=50, b=50),\n    template=\"plotly_white\"\n)\nfig.show()","f83bf4c3":"df[df.name == \"\u5c4d\u901f\u5217\u8eca\uff1a\u611f\u67d3\u534a\u5cf6\"]","dbd31e82":"df[df.name == \"\u6211\u7684A\u7d1a\u79d8\u5bc6\"]","2fa67534":"df[df.name == \"\u7d42\u6975\u8ffd\u6bba\u4ee4\"]","bdc54219":"print(df[[\"name\"]].drop_duplicates().shape[0])\nprint(df[[\"name\", \"agent\"]].drop_duplicates().shape[0])\nprint(df[[\"name\", \"publisher\"]].drop_duplicates().shape[0])\nprint(df[[\"name\", \"agent\", \"publisher\"]].drop_duplicates().shape[0])","fd84af7a":"df_tmp = df[df.release_date >= \"2017-11-01\"].sort_values(\"week\").groupby([\"name\", \"publisher\"], as_index=False).first()\n# No movie was released on Monday\nprint(df_tmp.shape[0], df_tmp[df_tmp.week == df_tmp.release_date].shape[0])","d3dc614e":"df_tmp.head(3)","53aa1556":"tmp = []\nfor _, row in df_tmp.iterrows():\n    row = row.copy()\n    row[\"total_revenue\"] = row[\"total_revenue\"] - row[\"revenue\"]\n    row[\"total_tickets\"] = row[\"total_tickets\"] - row[\"tickets\"]\n    row[\"revenue\"] = row[\"total_revenue\"]\n    row[\"tickets\"] = row[\"total_tickets\"]\n    assert (row[\"revenue\"] >= 0) and (row[\"tickets\"] >= 0)\n    row[\"week\"] = row[\"week\"] - timedelta(days=7)\n    tmp.append(row)\ndf_recovered = pd.DataFrame(tmp)\ndf_recovered.head(3)","ba7fc8a7":"df = pd.concat([df, df_recovered], axis=0, ignore_index=True).sort_values([\"week\", \"revenue\"], ascending=[True, False]).reset_index(drop=True)\ndf.head(3)","55e6d219":"print(\"Problematic entries:\")\ncnt = df.groupby([\"name\", \"publisher\", \"week\"])[\"week\"].count()\nprint(cnt[cnt > 1])\n# throw away a random row for now\nprint(df.shape[0])\ndf = df.drop_duplicates([\"name\", \"publisher\", \"week\"])\nprint(df.shape[0])","fabb8246":"df[df.name == \"\u6211\u7684A\u7d1a\u79d8\u5bc6\"]","59858e70":"df[df.name == \"\u5c4d\u901f\u5217\u8eca\uff1a\u611f\u67d3\u534a\u5cf6\"]","39478a0b":"df[\"quarter\"] = df[\"week\"].apply(lambda x: datetime(x.year, (x.month - 1) \/\/ 3 * 3 + 1, 1))\ndf.quarter.unique()","13832f36":"df_quarterly = df.groupby(\"quarter\", as_index=False)[[\"tickets\", \"revenue\"]].sum()","0897add1":"fig = go.Figure(data=[\n    go.Bar(\n        x=df_quarterly.quarter.dt.date,\n        y=df_quarterly.revenue.values\n    )\n])\nfig.update_layout(\n    title_text=\"Quarterly Box Office Revenue in Taiwan\", \n    xaxis_title_text='Quarter', # xaxis label\n    yaxis_title_text='Revenue ($\/TWD)', # yaxis label\n    width=800,\n    height=400,\n    bargap=0.2, \n    barmode=\"stack\",\n    margin=dict(l=20, r=20, t=50, b=50),\n    template=\"plotly_white\"\n)\nfig.show()","ad5ebdf3":"df_2019 = df[(df.week >= \"2019-01-01\") & (df.week < \"2020-01-01\")]\ndf_2019_sums = df_2019.groupby([\"name\", \"country\"], as_index=False)[\"tickets\", \"revenue\"].sum().sort_values(\"revenue\", ascending=False)\ndf_2019_sums","441ee525":"fig = go.Figure(data=[\n    go.Bar(\n        x=df_2019_sums.iloc[:20].name.values,\n        y=df_2019_sums.iloc[:20].revenue.values\n    )\n])\nfig.update_layout(\n    title_text=\"Top 20 Movies in 2019\", \n    xaxis_title_text='Quarter', # xaxis label\n    yaxis_title_text='Revenue ($\/TWD)', # yaxis label\n    width=800,\n    height=400,\n    bargap=0.2, \n    barmode=\"stack\",\n    margin=dict(l=20, r=20, t=50, b=50),\n    template=\"plotly_white\"\n)\nfig.show()","9db9df7e":"df_tmp = df_2019_sums.iloc[:20].sort_values(\"tickets\", ascending=False)\nfig = go.Figure(data=[\n    go.Bar(\n        x=df_tmp .name.values,\n        y=df_tmp .tickets.values\n    )\n])\nfig.update_layout(\n    title_text=\"Top 20 Movies in 2019\", \n    xaxis_title_text='Quarter', # xaxis label\n    yaxis_title_text='Tickets Sold', # yaxis label\n    width=800,\n    height=400,\n    bargap=0.2, \n    barmode=\"stack\",\n    margin=dict(l=20, r=20, t=50, b=50),\n    template=\"plotly_white\"\n)\nfig.show()","233cbf69":"pd.DataFrame({\"Ticket Ranking\": df_tmp.name.values, \"Revenue Ranking\": df_2019_sums.iloc[:20].name.values})","03825c8d":"df_2019[df_2019.name == \"\u9a5a\u5947\u968a\u9577\"]","9c54862e":"Hello! I'm @ceshine. Someone mentioned this open dataset about weekly movie box office numbers in Taiwan, and I've found it very interesting (albeit quite noisy at the same time). I scraped the data from the website and put it on Kaggle. \n\nThis is a preliminary notebook exploring this dataset. We'll quickly browse the dataset, highlight some of the problems of this dataset, and make some visualizations in this notebook.","8597bfa3":"## The Data Collection Issue\n\nThe data collector made a decision to only publish numbers of movies that were in theater for the whole 7 days in that week. That means **a lot of the opening week\/weekend data (a lot of movies release on Friday or Saturday) will not be in the dataset**. This is a major problem, as a large portion of the tickets sales happens in the opening week.\n\nTo demonstrate, let's check out this movie that were released on 2020\/07\/15. We only have one row of data, but you can see that `tickets != total_tickets` and `revenue != total_revenue`. That's because its sales data from 2020\/07\/15 to 2020\/07\/19 did not appear in the weekly data from 2020\/07\/13 to 2020\/07\/19.","3b5e1b02":"\"Wait! This is easy to solve. We can get the sales number by subtracting the numbers of the following full week from the total numbers!\" You might say at this point. But it's more complicated than it seems.\n\nThere are quite a few old move got re-released into the theaters, and the number of this kind of movies are higher during the COVID crisis. Because most of these movies were release before the start of this dataset (Oct 2017), and we have no data on when the movie was re-released, we have no way to recover numbers for the opening week\/weekend of the re-release.\n\nFollowing is an example of this situation. The `total_tickets` and `total_revenue` columns include all sales since 2016\/11\/25, and we have no way to recover the numbers for the opening week (possibly around 2020\/05\/01) of this re-release.","1fe66c97":"Here's another example. You can see that this movie sold more tickets in its opening weekend than the next whole week:","373bf688":"## Top Movies in the Latest Week Available","8d2dfc05":"### Recover the opening week data\n\nWe can still recover the data if the movie was release after Oct 2017). Let's salvage what we can (BTW, the number of theaters couldn't be recovered so we can only assume it's the same as in the next week):","afa0d714":"## Quartly Gross Revenue\n\n(As explained in the previous section, this data is note 100% accurate because it does not include the opening week of the re-released movies.)","2694c4ee":"The above example also highlights another problem of this dataset \u2014 **the `release_date` column is inconsistent!** This is really annoying. A way to mitigate this is to use the combination of the name of the movie and the agent\/publisher as the unique identifier.","d8a27d01":"## Top Movies in 2019"}}