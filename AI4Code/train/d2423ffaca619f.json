{"cell_type":{"830ab52c":"code","be79966e":"code","0d0bba6f":"code","094fc46d":"code","3f25bba8":"code","c5f27396":"code","f8add8fb":"code","fd8dddce":"code","f51b8901":"code","a106a037":"code","8c5606bf":"code","1c8d95a5":"code","5e6661b6":"code","945fd616":"markdown","666d10e3":"markdown","ca2a4f66":"markdown","ec55eb81":"markdown","97cbafa7":"markdown"},"source":{"830ab52c":"import numpy as np\nimport pandas as pd\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nimport itertools","be79966e":"train = pd.read_json('..\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('..\/input\/stanford-covid-vaccine\/test.json', lines=True)","0d0bba6f":"def preprocess(df, train_df=True):\n    df_data = []\n    for mol_id in df['id'].unique():\n        sample_data = df.loc[df['id'] == mol_id]\n        sample_seq_length = sample_data.seq_length.values[0]\n\n        # bpp\n        bpp = np.load(f'..\/input\/stanford-covid-vaccine\/bpps\/{mol_id}.npy')\n\n        rng = 68 if train_df else sample_seq_length\n        for i in range(rng):\n            # mean of bpp for position i\n            bpp_i = bpp[:, i]\n            aux = [bi for ix, bi in enumerate(bpp_i)]\n            sum_bpp = np.sum(aux)\n\n            # top 3 values in bpp\n            top_3_ix = bpp_i.argsort()[-3:][::-1]\n            \n            if train_df:\n                sample_dict = {'id' : sample_data['id'].values[0],\n                               'id_seqpos' : sample_data['id'].values[0] + '_' + str(i),\n                               'sequence' : sample_data['sequence'].values[0][i],\n                               'structure' : sample_data['structure'].values[0][i],\n                               'predicted_loop_type' : sample_data['predicted_loop_type'].values[0][i],\n                               'sum_bpp': sum_bpp,\n                               'sum_bpp_top1': np.sum([bi for ix, bi in enumerate(bpp[:, top_3_ix[-1]]) if ix != top_3_ix[-1]]),\n                               'sum_bpp_top2': np.sum([bi for ix, bi in enumerate(bpp[:, top_3_ix[-2]]) if ix != top_3_ix[-2]]),\n                               'sum_bpp_top3': np.sum([bi for ix, bi in enumerate(bpp[:, top_3_ix[-3]]) if ix != top_3_ix[-3]]),\n                               'sequence_top1': sample_data['sequence'].values[0][top_3_ix[-1]],\n                               'sequence_top2': sample_data['sequence'].values[0][top_3_ix[-2]],\n                               'sequence_top3': sample_data['sequence'].values[0][top_3_ix[-3]],\n                               'reactivity' : sample_data['reactivity'].values[0][i],\n        #                        'reactivity_error' : sample_data['reactivity_error'].values[0][i],\n                               'deg_Mg_pH10' : sample_data['deg_Mg_pH10'].values[0][i],\n        #                        'deg_error_Mg_pH10' : sample_data['deg_error_Mg_pH10'].values[0][i],\n                               'deg_pH10' : sample_data['deg_pH10'].values[0][i],\n        #                        'deg_error_pH10' : sample_data['deg_error_pH10'].values[0][i],\n                               'deg_Mg_50C' : sample_data['deg_Mg_50C'].values[0][i],\n        #                        'deg_error_Mg_50C' : sample_data['deg_error_Mg_50C'].values[0][i],\n                               'deg_50C' : sample_data['deg_50C'].values[0][i],\n        #                        'deg_error_50C' : sample_data['deg_error_50C'].values[0][i]\n                }\n            else:\n                sample_dict = {'id' : sample_data['id'].values[0],\n                               'id_seqpos' : sample_data['id'].values[0] + '_' + str(i),\n                               'sequence' : sample_data['sequence'].values[0][i],\n                               'structure' : sample_data['structure'].values[0][i],\n                               'predicted_loop_type' : sample_data['predicted_loop_type'].values[0][i],\n                               'sum_bpp': sum_bpp,\n                               'sum_bpp_top1': np.sum([bi for ix, bi in enumerate(bpp[:, top_3_ix[-1]]) if ix != top_3_ix[-1]]),\n                               'sum_bpp_top2': np.sum([bi for ix, bi in enumerate(bpp[:, top_3_ix[-2]]) if ix != top_3_ix[-2]]),\n                               'sum_bpp_top3': np.sum([bi for ix, bi in enumerate(bpp[:, top_3_ix[-3]]) if ix != top_3_ix[-3]]),\n                               'sequence_top1': sample_data['sequence'].values[0][top_3_ix[-1]],\n                               'sequence_top2': sample_data['sequence'].values[0][top_3_ix[-2]],\n                               'sequence_top3': sample_data['sequence'].values[0][top_3_ix[-3]],\n                }\n\n            shifts = [1, 2, 3]\n            shift_cols = ['sequence', 'structure', 'predicted_loop_type']\n            for shift,col in itertools.product(shifts, shift_cols):\n                if i - shift >= 0:\n                    sample_dict['b'+str(shift)+'_'+col] = sample_data[col].values[0][i-shift]\n                else:\n                    sample_dict['b'+str(shift)+'_'+col] = -1\n\n                if i + shift <= sample_seq_length - 1:\n                    sample_dict['a'+str(shift)+'_'+col] = sample_data[col].values[0][i+shift]\n                else:\n                    sample_dict['a'+str(shift)+'_'+col] = -1\n\n\n            df_data.append(sample_dict)\n    df_data = pd.DataFrame(df_data)\n    \n    return df_data","094fc46d":"train_data = preprocess(train)\ntest_data = preprocess(test, train_df=False)","3f25bba8":"train_data.head()","c5f27396":"targets = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']\nnum_feats = ['sum_bpp', 'sum_bpp_top1', 'sum_bpp_top2', 'sum_bpp_top3']\nnot_use_cols = ['id', 'id_seqpos']\nfeatures = [f for f in train_data.columns if f not in not_use_cols if f not in targets]\ncat_feats = [f for f in features if f not in num_feats]","f8add8fb":"# label_encoding\nsequence_encmap = {'A': 0, 'G' : 1, 'C' : 2, 'U' : 3}\nstructure_encmap = {'.' : 0, '(' : 1, ')' : 1}\nlooptype_encmap = {'S':0, 'E':1, 'H':2, 'I':3, 'X':4, 'M':5, 'B':6}\n\nenc_targets = ['sequence', 'a1_sequence', 'a2_sequence', 'a3_sequence',\n               'b1_sequence', 'b2_sequence', 'b3_sequence',\n               'sequence_top1', 'sequence_top2', 'sequence_top3',\n               'structure', 'a1_structure', 'a2_structure', 'a3_structure',\n               'b1_structure', 'b2_structure', 'b3_structure',\n               'predicted_loop_type', 'a1_predicted_loop_type', 'a2_predicted_loop_type',\n               'a3_predicted_loop_type', 'b1_predicted_loop_type', 'b2_predicted_loop_type',\n               'b3_predicted_loop_type']\nenc_maps = [sequence_encmap, sequence_encmap, sequence_encmap, sequence_encmap,\n            sequence_encmap, sequence_encmap, sequence_encmap,\n            sequence_encmap, sequence_encmap, sequence_encmap,\n            structure_encmap, structure_encmap, structure_encmap, structure_encmap,\n            structure_encmap, structure_encmap, structure_encmap,\n            looptype_encmap, looptype_encmap, looptype_encmap,\n            looptype_encmap, looptype_encmap, looptype_encmap,\n            looptype_encmap,]\n\nfor t, m in zip(enc_targets, enc_maps):\n    print(t)\n    train_data[t] = train_data[t].apply(lambda x: m[x] if x in m else -1)\n    test_data[t] = test_data[t].apply(lambda x: m[x] if x in m else -1)","fd8dddce":"train_data.head()","f51b8901":"import lightgbm as lgb","a106a037":"# params\nseed = 2020\nparams = {\n    'objective': 'regression',\n    'boosting': 'gbdt',\n    'metric': 'rmse',\n    'num_leaves': 32,\n    'max_bin': 512,\n    'reg_lambda': 0.5,\n    'subsample': 0.7,\n    'colsample_bytree': 0.7,\n    'learning_rate': 0.08,\n    'min_data_in_leaf': 200,\n    'seed' : seed,\n    'n_jobs': -1,\n}\n\n# cv\ncv_results = dict()\nmodels = dict()\npreds = dict()\nfor tgt in targets:\n    print('-'*30, tgt, '-'*30,)\n    DTrain = lgb.Dataset(train_data[features], train_data[tgt], categorical_feature=cat_feats)\n    m = lgb.cv(params, DTrain, num_boost_round=300, \n               nfold=10, stratified=False, verbose_eval=100,\n               early_stopping_rounds=30)\n    cv_results[tgt] = m['rmse-mean'][-1]\n    \n    # train\n    DTrain = lgb.Dataset(train_data[features], train_data[tgt], categorical_feature=cat_feats)\n    model = lgb.train(params, DTrain, num_boost_round=len(m['rmse-mean']))\n    # predict test\n    test_data[tgt] = model.predict(test_data[features])\n    # store model\n    models[tgt] = model\n    \ncv_results","8c5606bf":"# feature_importances\nfor tgt in targets:\n    tmp = pd.Series(models[tgt].feature_importance('gain'), index=features)\n\n    fig, ax = plt.subplots(figsize=(10, 5))\n    tmp.sort_values(ascending=False).plot.barh(ax=ax)\n    ax.set_title(tgt)\n    fig.tight_layout()","1c8d95a5":"submission = pd.read_csv('\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv', usecols=['id_seqpos'])\nsubmission = submission.merge(test_data[['id_seqpos'] + targets], on='id_seqpos')\n\nsubmission.head()","5e6661b6":"submission.to_csv('submission.csv', index=False)","945fd616":"# Feature importances","666d10e3":"# Train","ca2a4f66":"# Submission","ec55eb81":"Adapted from https:\/\/www.kaggle.com\/t88take\/openvaccine-simple-lgb-baseline","97cbafa7":"# Load data"}}