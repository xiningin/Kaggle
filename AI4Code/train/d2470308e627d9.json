{"cell_type":{"1433013e":"code","850f4427":"code","7a46dd17":"code","cff2e6bb":"code","b5166a69":"code","dfd1ca07":"code","ce5353d3":"code","141cdf5e":"code","ddea22fe":"code","68373ee1":"code","1c84acbc":"code","4d9d7010":"code","e8faf4d3":"code","7f0dc44b":"code","07066c73":"code","d1187e7b":"code","4616816d":"code","c0221b54":"code","f2779f8d":"code","10d80ac4":"code","963acd8c":"code","9f726e29":"code","2f117008":"code","ea95b5d0":"code","77ace398":"code","f039b367":"code","c8b89a14":"code","0e901c28":"code","612e5402":"code","92eb32b7":"code","f645827c":"code","1d4a0f61":"code","c76276ee":"code","beee805c":"code","3ff64b66":"code","93a0e04d":"code","9fc422fd":"code","917bcdc0":"code","b111c433":"code","549e06ec":"code","faa365db":"code","302f207f":"markdown","f1663403":"markdown","b3158f22":"markdown","04051726":"markdown","0f48383c":"markdown","fb84c869":"markdown","bffdf46d":"markdown","f6d2cba9":"markdown","fe578052":"markdown","f308a7fa":"markdown","2a395d52":"markdown","41788fc8":"markdown","c72375f5":"markdown","2f073a6c":"markdown"},"source":{"1433013e":"import torch\nimport pandas as pd\nfrom tqdm.notebook import tqdm","850f4427":"df = pd.read_csv('\/kaggle\/input\/smile-annotations-final.csv', names=['id', 'text', 'category'])\ndf.set_index('id', inplace=True)","7a46dd17":"df.head()","cff2e6bb":"df.category.value_counts()","b5166a69":"df = df[~df.category.str.contains('\\|')]","dfd1ca07":"df = df[df.category != 'nocode']","ce5353d3":"df.category.value_counts()","141cdf5e":"possible_labels = df.category.unique()","ddea22fe":"label_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index","68373ee1":"df['label'] = df.category.replace(label_dict)","1c84acbc":"df.head()","4d9d7010":"from sklearn.model_selection import train_test_split","e8faf4d3":"X_train, X_val, y_train, y_val = train_test_split(df.index.values, \n                                                  df.label.values, \n                                                  test_size=0.15, \n                                                  random_state=17, \n                                                  stratify=df.label.values)","7f0dc44b":"df['data_type'] = ['not_set']*df.shape[0]","07066c73":"df.loc[X_train, 'data_type'] = 'train'\ndf.loc[X_val, 'data_type'] = 'val'","d1187e7b":"df.groupby(['category', 'label', 'data_type']).count()","4616816d":"from transformers import BertTokenizer\nfrom torch.utils.data import TensorDataset","c0221b54":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', \n                                          do_lower_case=True)","f2779f8d":"encoded_data_train = tokenizer.batch_encode_plus(\n    df[df.data_type=='train'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\nencoded_data_val = tokenizer.batch_encode_plus(\n    df[df.data_type=='val'].text.values, \n    add_special_tokens=True, \n    return_attention_mask=True, \n    pad_to_max_length=True, \n    max_length=256, \n    return_tensors='pt'\n)\n\n\ninput_ids_train = encoded_data_train['input_ids']\nattention_masks_train = encoded_data_train['attention_mask']\nlabels_train = torch.tensor(df[df.data_type=='train'].label.values)\n\ninput_ids_val = encoded_data_val['input_ids']\nattention_masks_val = encoded_data_val['attention_mask']\nlabels_val = torch.tensor(df[df.data_type=='val'].label.values)","10d80ac4":"dataset_train = TensorDataset(input_ids_train, attention_masks_train, labels_train)\ndataset_val = TensorDataset(input_ids_val, attention_masks_val, labels_val)","963acd8c":"len(dataset_train)","9f726e29":"len(dataset_val)","2f117008":"from transformers import BertForSequenceClassification","ea95b5d0":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\n","77ace398":"from torch.utils.data import DataLoader, RandomSampler, SequentialSampler","f039b367":"batch_size = 32\n\ndataloader_train = DataLoader(dataset_train, \n                              sampler=RandomSampler(dataset_train), \n                              batch_size=batch_size)\n\ndataloader_validation = DataLoader(dataset_val, \n                                   sampler=SequentialSampler(dataset_val), \n                                   batch_size=batch_size)","c8b89a14":"from transformers import AdamW, get_linear_schedule_with_warmup","0e901c28":"optimizer = AdamW(model.parameters(),\n                  lr=1e-5, \n                  eps=1e-8)","612e5402":"epochs = 10\n\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps=0,\n                                            num_training_steps=len(dataloader_train)*epochs)","92eb32b7":"import numpy as np","f645827c":"from sklearn.metrics import f1_score","1d4a0f61":"def f1_score_func(preds, labels):\n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return f1_score(labels_flat, preds_flat, average='weighted')","c76276ee":"def accuracy_per_class(preds, labels):\n    label_dict_inverse = {v: k for k, v in label_dict.items()}\n    \n    preds_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n\n    for label in np.unique(labels_flat):\n        y_preds = preds_flat[labels_flat==label]\n        y_true = labels_flat[labels_flat==label]\n        print(f'Class: {label_dict_inverse[label]}')\n        print(f'Accuracy: {len(y_preds[y_preds==label])}\/{len(y_true)}\\n')","beee805c":"import random\n\nseed_val = 17\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","3ff64b66":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel.to(device)\n\nprint(device)","93a0e04d":"def evaluate(dataloader_val):\n\n    model.eval()\n    \n    loss_val_total = 0\n    predictions, true_vals = [], []\n    \n    for batch in tqdm(dataloader_val):\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }\n\n        with torch.no_grad():        \n            outputs = model(**inputs)\n            \n        loss = outputs[0]\n        logits = outputs[1]\n        loss_val_total += loss.item()\n\n        logits = logits.detach().cpu().numpy()\n        label_ids = inputs['labels'].cpu().numpy()\n        predictions.append(logits)\n        true_vals.append(label_ids)\n    \n    loss_val_avg = loss_val_total\/len(dataloader_val) \n    \n    predictions = np.concatenate(predictions, axis=0)\n    true_vals = np.concatenate(true_vals, axis=0)\n            \n    return loss_val_avg, predictions, true_vals","9fc422fd":"for epoch in tqdm(range(1, epochs+1)):\n    \n    model.train()\n    \n    loss_train_total = 0\n\n    progress_bar = tqdm(dataloader_train, desc='Epoch {:1d}'.format(epoch), leave=False, disable=False)\n    for batch in progress_bar:\n\n        model.zero_grad()\n        \n        batch = tuple(b.to(device) for b in batch)\n        \n        inputs = {'input_ids':      batch[0],\n                  'attention_mask': batch[1],\n                  'labels':         batch[2],\n                 }       \n\n        outputs = model(**inputs)\n        \n        loss = outputs[0]\n        loss_train_total += loss.item()\n        loss.backward()\n\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        optimizer.step()\n        scheduler.step()\n        \n        progress_bar.set_postfix({'training_loss': '{:.3f}'.format(loss.item()\/len(batch))})\n         \n        \n    torch.save(model.state_dict(), f'finetuned_BERT_epoch_{epoch}.model')\n        \n    tqdm.write(f'\\nEpoch {epoch}')\n    \n    loss_train_avg = loss_train_total\/len(dataloader_train)            \n    tqdm.write(f'Training loss: {loss_train_avg}')\n    \n    val_loss, predictions, true_vals = evaluate(dataloader_validation)\n    val_f1 = f1_score_func(predictions, true_vals)\n    tqdm.write(f'Validation loss: {val_loss}')\n    tqdm.write(f'F1 Score (Weighted): {val_f1}')","917bcdc0":"model = BertForSequenceClassification.from_pretrained(\"bert-base-uncased\",\n                                                      num_labels=len(label_dict),\n                                                      output_attentions=False,\n                                                      output_hidden_states=False)\n\nmodel.to(device)","b111c433":"#we have save the model for each epoch of out training loop. Here we can load them and see which one gives the best results for the different classes\nmodel.load_state_dict(torch.load('\/kaggle\/working\/finetuned_BERT_epoch_10.model', map_location=device))","549e06ec":"_, predictions, true_vals = evaluate(dataloader_validation)","faa365db":"accuracy_per_class(predictions, true_vals)","302f207f":"## Defining our Performance Metrics","f1663403":"## Creating Data Loaders","b3158f22":"We will use the SMILE Twitter dataset.\n\n_Wang, Bo; Tsakalidis, Adam; Liakata, Maria; Zubiaga, Arkaitz; Procter, Rob; Jensen, Eric (2016): SMILE Twitter Emotion dataset. figshare. Dataset. https:\/\/doi.org\/10.6084\/m9.figshare.3187909.v2_","04051726":"# Sentiment Analysis with Deep Learning using BERT","0f48383c":"## Creating our Training Loop","fb84c869":"## Exploratory Data Analysis and Preprocessing","bffdf46d":"## Loading Tokenizer and Encoding our Data","f6d2cba9":"## Training\/Validation Split","fe578052":"## Introduction","f308a7fa":"## Setting Up Optimiser and Scheduler","2a395d52":"Accuracy metric approach originally used in accuracy function in [this tutorial](https:\/\/mccormickml.com\/2019\/07\/22\/BERT-fine-tuning\/#41-bertforsequenceclassification).","41788fc8":"### What is BERT\n\nBERT is a large-scale transformer-based Language Model that can be finetuned for a variety of tasks.\n\nFor more information, the original paper can be found [here](https:\/\/arxiv.org\/abs\/1810.04805). \n\n[HuggingFace documentation](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html)\n\n[Bert documentation](https:\/\/characters.fandom.com\/wiki\/Bert_(Sesame_Street) ;)","c72375f5":"## Setting up BERT Pretrained Model","2f073a6c":"Approach adapted from an older version of HuggingFace's `run_glue.py` script. Accessible [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128)."}}