{"cell_type":{"806f5472":"code","967fb284":"code","be8d30cd":"code","517875dc":"code","a14c13c1":"code","91bb9e21":"code","5816eab5":"code","9957f4d2":"code","9f2e7add":"code","4a96540c":"code","cebcc553":"code","ddc9f422":"code","dd2dd521":"code","f015bcca":"code","3a76fdad":"code","f88f74d3":"code","1842ef80":"code","cf018f40":"code","412285ed":"code","e5968251":"code","9668b527":"code","6edafc1f":"code","17f511e8":"code","e50d01fe":"code","b2f80a3a":"code","993573d0":"code","12f2e50b":"code","5b2c43ea":"code","ab1ce4b3":"code","4ec41213":"code","69f28511":"code","9fa6fb59":"code","1362dac2":"markdown","e9639c0e":"markdown","d2e031ff":"markdown","39ef9b07":"markdown","d62064bf":"markdown","16c3477b":"markdown","286f060e":"markdown","5d33a374":"markdown","ab5e5f32":"markdown","8fcd21a7":"markdown","0dedc197":"markdown","0c0b38a8":"markdown","8f2370bb":"markdown","1b3aa910":"markdown","f207cd63":"markdown","2721e816":"markdown","aa097d83":"markdown","6de32763":"markdown","50647062":"markdown"},"source":{"806f5472":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='Survived', id_name='PassengerId')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","967fb284":"# 7\uc2dc 37\ubd84 ~\n# \uc81c\ucd9c \ud3ec\ub9f7: PassengerID \/ Survived  => model.predict(X_test)\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\n\n# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 -> \uc0dd\ub7b5","be8d30cd":"# head\n# print('X_train:\\n', X_train.head())\n# print('y_train:\\n', y_train.head())\n# print('X_test:\\n', X_test.head())\n# print('y_test:\\n', y_test.head())\n\n# shape\n# print('X_train: ', X_train.shape)\n# print('y_train: ', y_train.shape)\n# print('X_test: ', X_test.shape)\n# print('y_test: ', y_test.shape)\n\n# \uacb0\uce21\uac12 \ud83d\udd3a\n# print('X_train:\\n', X_train.isnull().sum())  # 'Age', 'Cabin', 'Embarked' (137, 542, 1) \n# print('y_train:\\n', y_train.isnull().sum())  # Not null\n# print('X_test:\\n', X_test.isnull().sum())    # 'Age', 'Cabin', 'Embarked' (40, 145, 1) \n# print('y_test:\\n', y_test.isnull().sum())    # Not null\n\n# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud83d\udd3a\ncols = ['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked']\n# print('X_train:\\n', X_train.info())\n# print('y_train:\\n', y_train.info())\n# print('X_test:\\n', X_test.info())\n# print('y_test:\\n', y_test.info())\n\n# \uae30\ucd08\ud1b5\uacc4 & label \uac12\nprint('X_train:\\n', X_train.describe())\nprint('X_train:\\n', X_train.describe(include='object'))\n\nprint('X_test:\\n', X_test.describe())\nprint('X_test:\\n', X_test.describe(include='object'))\n\nprint('y_train:\\n', y_train['Survived'].value_counts())\nprint('y_test:\\n', y_test['Survived'].value_counts())","517875dc":"# \uacb0\uce21\uac12 \ucc98\ub9ac\n# 'Age', 'Cabin', 'Embarked' \/\/ X_train: (137, 542, 1) , X_test: (40, 145, 1)\n# 1. 'Age'   -> \ud3c9\uade0\uac12\uc73c\ub85c \ucc44\uc6c0\n# print(X_train['Age'].describe())\n# print(X_test['Age'].describe())\n\nX_train['Age'] = X_train['Age'].fillna(round(X_train['Age'].mean(),0))  # \uc815\uc218\uac12\uc73c\ub85c \ucc44\uc6c0\nX_test['Age'] = X_test['Age'].fillna(round(X_test['Age'].mean(),0))  # \uc815\uc218\uac12\uc73c\ub85c \ucc44\uc6c0\nprint(X_train.isnull().sum())\nprint(X_test.isnull().sum())","a14c13c1":"# 2. 'Cabin'    ->  \uc784\uc758\uc758 \uac12\uc73c\ub85c \ucc44\uc6c0('N') _ \uae30\uc874 \uace0\uc720\uac12\uc774\ub791 \uacb9\uce58\uc9c0 \uc54a\ub294 \uac12\uc73c\ub85c !\n# print(X_train['Cabin'].unique())\n# print(X_train['Cabin'].describe())\n\nX_train['Cabin'] = X_train['Cabin'].fillna('N')\nX_test['Cabin'] = X_test['Cabin'].fillna('N')\n\nprint(X_train.isnull().sum())\nprint(X_test.isnull().sum())\n\n# print(X_train['Cabin'].unique())\n# print(X_train['Cabin'].describe())","91bb9e21":"# 3. 'Embarked' -> \uacb0\uce21\uac12 \uac2f\uc218\uac00 1\uac1c\uc529\uc73c\ub85c \uc801\uc74c. \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6c0\n# print(X_train['Embarked'].value_counts())  # \ucd5c\ube48\uac12: S\n# print(X_test['Embarked'].value_counts())   # \ucd5c\ube48\uac12: S\nX_train['Embarked'] = X_train['Embarked'].fillna('S')\nX_test['Embarked'] = X_test['Embarked'].fillna('S')\nprint(X_train.isnull().sum())\nprint(X_test.isnull().sum())","5816eab5":"# \ud6c8\ub828\ub370\uc774\ud130\uc5d0 \ud544\uc694\uc5c6\ub294 \uceec\ub7fc \uc0ad\uc81c (ID, target \uc0ad\uc81c)\nprint(X_train.shape)\nprint(X_test.shape)\n\nX_train = X_train.drop('PassengerId', axis=1)\nX_test = X_test.drop('PassengerId', axis=1)\n\nprint(X_train.shape)\nprint(X_test.shape)","9957f4d2":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ucc98\ub9ac\n# \ubc29\ubc95 1>> \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658 (LabelEncoder)\n# cols = ['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked']\n\nprint(X_train.info())\nprint(X_test.info())\n\nfrom sklearn.preprocessing import LabelEncoder\ncols = ['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked']\nle = LabelEncoder()\nfor col in cols:\n    X_train[col] = le.fit_transform(X_train[col])\n    X_test[col] = le.fit_transform(X_test[col])\n    \nprint(X_train.info())\nprint(X_test.info())","9f2e7add":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ucc98\ub9ac\n# \ubc29\ubc95 2>> \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \uc0ad\uc81c\n","4a96540c":"# X_train, y_train\uc744 \ud6c8\ub828&\uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ud560\nfrom sklearn.model_selection import train_test_split\n\nprint('X_train, y_train: ', X_train.shape, y_train.shape)\n# \ud83d\udc9b \uc21c\uc11c \uc911\uc694 \ud83d\udc9b\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['Survived'],\n                                           test_size=0.2, shuffle=True, random_state=777)\nprint('X_tr, y_tr, X_val, y_val:\\n', X_tr.shape, y_tr.shape, X_val.shape, y_val.shape)","cebcc553":"# \uc5ec\ub7ec\uac00\uc9c0 \ubaa8\ub378 \uc131\ub2a5 \ube44\uad50\n'''\n1. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0 \n2. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 - \ubd84\ub958\n3. \uc758\uc0ac\uacb0\uc815\ub098\ubb34 - \ubd84\ub958\n4. xgboost - \ubd84\ub958\n5. svm\n6. KNN -\ubd84\ub958\n'''\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# # 1. => \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \uc218\uce58\ud615\uc73c\ub85c \uc2a4\ucf00\uc77c\ub9c1\ud558\uba74, \uc624\ub958\ub0a8! \n# (\uc0ad\uc81c\ud558\uae30\uc5d0\ub294 \ub9ac\uc2a4\ud06c\uac00 \ud06c\uae30\ub54c\ubb38\uc5d0 \ubaa8\ub378\uc5d0\uc11c \uc81c\uc678) \n# model = LogisticRegression()\n# model.fit(X_tr, y_tr)\n# print('LogisticRegression: ', round(model.score(X_val, y_val)*100, 2))\n\n# 2.\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\nmodel.fit(X_tr, y_tr)\nprint('RandomForestClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 3.\nmodel = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nprint('DecisionTreeClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 4.\nmodel = XGBClassifier()\nmodel.fit(X_tr, y_tr)\nprint('XGBClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 5.\nmodel = SVC()\nmodel.fit(X_tr, y_tr)\nprint('SVC: ', round(model.score(X_val, y_val)*100, 2))\n\n# 6.\nmodel = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nprint('KNeighborsClassifier: ', round(model.score(X_val, y_val)*100, 2))","ddc9f422":"# \ucd5c\uc885 \ubaa8\ub378 \uc120\ud0dd\n## \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier()\n\n## \ud559\uc2b5\nmodel.fit(X_train, y_train['Survived'])\n\n## \uc608\uce21\npred = model.predict(X_test)\nprint('\uc608\uce21\uac12: ', pred)","dd2dd521":"y_test","f015bcca":"# \uacb0\uacfc \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30\noutput = pd.DataFrame({'PassengerId':y_test['PassengerId'],\n                      'Survived': pred})","3a76fdad":"output","f88f74d3":"output.to_csv('211203.csv', index=False)\nprint(pd.read_csv('211203.csv'))","1842ef80":"print(round(model.score(X_test, y_test['Survived'])*100, 2))","cf018f40":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='Survived', id_name='PassengerId')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n\n###################### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 ######################\n# 10:20 ~ \nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\n# \ub370\uc774\ud130 \uac00\uc838\uc624\uae30 -> pass\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)\n\n######################             EDA           ######################\n# head \ud83d\udd3a\n# print('X_train: \\n', X_train.head())  # 'PassengerId' \uc0ad\uc81c \ud544\uc694\n# print('y_train: \\n', y_train.head())\n# print('X_test: \\n', X_test.head())    # 'PassengerId' \uc0ad\uc81c \ud544\uc694\n# print('y_test: \\n', y_test.head())\n\n# shape\n# print('X_train: ', X_train.shape)\n# print('y_train: ', y_train.shape)\n# print('X_test: ', X_test.shape)\n# print('y_test: ', y_test.shape)\n\n# \uacb0\uce21\uce58 \ud83d\udd3a\n# 'Age','Cabin','Embarked'\n# print('X_train: \\n', X_train.isnull().sum())  # 'Age','Cabin','Embarked' (137, 542, 1)\n# print('y_train: \\n', y_train.isnull().sum())\n# print('X_test: \\n', X_test.isnull().sum())    # 'Age','Cabin','Embarked' (40, 145, 1)\n# print('y_test: \\n', y_test.isnull().sum())\n\n# \uae30\ucd08\ud1b5\uacc4 & label \uac12\n# print('X_train: \\n', X_train.describe())\n# print('X_train: \\n', X_train.describe(include='object'))  # cols=['Name','Sex','Ticket','Cabin Embarked']\n# print('X_test: \\n', X_test.describe())    \n# print('X_test: \\n', X_test.describe(include='object')) \n# print('y_train: \\n',y_train['Survived'].value_counts())\n# print('y_test: \\n',y_test['Survived'].value_counts())\n\n# \ub370\uc774\ud130 \ud0c0\uc785 (\ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778) \ud83d\udd3a\n# cols=['Name','Sex','Ticket','Cabin','Embarked']\n# print('X_train: \\n', X_train.info())  \n# print('y_train: \\n', y_train.info())\n# print('X_test: \\n', X_test.info())    \n# print('y_test: \\n', y_test.info())\n\n\n######################         \ub370\uc774\ud130 \uc804\ucc98\ub9ac       ######################\n# \uacb0\uce21\uce58 \ud83d\udd3a\n# 'Age','Cabin','Embarked' X_train: (137, 542, 1) , X_test: (40, 145, 1)\n# print('X_train: \\n', X_train.isnull().sum())\n# print('X_test: \\n', X_test.isnull().sum())\n\n# 'Age'       -> \ud3c9\uade0\uac12\uc73c\ub85c \ucc44\uc6c0\nX_train['Age'] = X_train['Age'].fillna(round(X_train['Age'].mean(),0))\nX_test['Age'] = X_test['Age'].fillna(round(X_test['Age'].mean(), 2))\n# print('X_train: \\n', X_train.isnull().sum())\n# print('X_test: \\n', X_test.isnull().sum())\n\n# 'Cabin'     -> \uace0\uc720\uac12\uacfc \uacb9\uce58\uc9c0 \uc54a\ub294 \uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n# print(X_train['Cabin'].unique())\nX_train['Cabin'] = X_train['Cabin'].fillna('N')\nX_test['Cabin'] = X_test['Cabin'].fillna('N')\n# print('X_train: \\n', X_train.isnull().sum())\n# print('X_test: \\n', X_test.isnull().sum())\n\n# 'Embarked'  -> \ucd5c\ube48\uac12\uc73c\ub85c \ucc44\uc6b0\uae30\n# print(X_train['Embarked'].describe())  # \ucd5c\ube48\uac12: 'S'\n# print(X_test['Embarked'].describe())  # \ucd5c\ube48\uac12: 'S'\n\nX_train['Embarked'] = X_train['Embarked'].fillna('S')\nX_test['Embarked'] = X_test['Embarked'].fillna('S')\n\n# print('X_train: \\n', X_train.isnull().sum())\n# print('X_test: \\n', X_test.isnull().sum())\n\n\n# X_train, X_test \ub370\uc774\ud130\uc14b\uc5d0\uc11c ID, target \uceec\ub7fc \uc0ad\uc81c \ud83d\udd3a\n# print(X_train.info())\n# print(X_train.shape)\nX_train = X_train.drop('PassengerId', axis = 1)\n# print(X_train.shape)\n\n# print(X_test.info())\n# print(X_test.shape)\nX_test = X_test.drop('PassengerId', axis = 1)\n# print(X_test.shape)\n\nprint(X_train.shape, X_test.shape)\n\n# y_train, y_test \ub370\uc774\ud130\uc14b\uc5d0 ID, target \uc788\ub294\uc9c0 \ud655\uc778 -> OK\n\n######################        \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1      ######################\n# \uc815\uaddc\ud654 -> pass\n\n# \ub808\uc774\ube14 \uc778\ucf54\ub529 \ud83d\udd3a\n\nfrom sklearn.preprocessing import LabelEncoder\ncols=['Name','Sex','Ticket','Cabin','Embarked']\nle = LabelEncoder()\nfor col in cols:\n    X_train[col] = le.fit_transform(X_train[col])\n    X_test[col] = le.fit_transform(X_test[col])\n# print(X_train.info())\n# print(X_test.info())\n\n################  \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14  ##################\n# X_train, y_train \ub370\uc774\ud130\ub97c \ud3c9\uac00&\uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ud560\nfrom  sklearn.model_selection import train_test_split\n\nprint('X_train , y_train: ', X_train.shape, y_train.shape)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['Survived'], \n                                            test_size=0.3, shuffle=True, random_state=777)\n\nprint('X_tr, X_val, y_tr, y_val: ',X_tr.shape, X_val.shape, y_tr.shape, y_val.shape )\n\n# \uc5ec\ub7ec\uac00\uc9c0 \ubaa8\ub378\uc758 \uc131\ub2a5 \ube44\uad50\n'''\n1. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8\n2. \uc758\uc0ac\uacb0\uc815\ub098\ubb34\n3. xgboost\n4. svm\n5. KNN\n'''\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# 1\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\nmodel.fit(X_tr, y_tr)\nprint('RandomForestClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 2\nmodel = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nprint('DecisionTreeClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 3\nmodel = XGBClassifier()\nmodel.fit(X_tr, y_tr)\nprint('XGBClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 4\nmodel = SVC()\nmodel.fit(X_tr, y_tr)\nprint('SVC: ', round(model.score(X_val, y_val)*100, 2))\n\n# 5\nmodel = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nprint('KNeighborsClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# \ucd5c\uc885 \ubaa8\ub378 \uc120\ud0dd\n# >> 83.18 score\uac00 \uac00\uc7a5 \ub192\uc74c (83.18)\n\n# \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\n\n# \ud559\uc2b5\nmodel.fit(X_train, y_train['Survived'])\n\n# \uc608\uce21\npred = model.predict(X_test)\n# print('\uc608\uce21\uac12: ', pred)\n\n# \uacb0\uacfc \ub370\uc774\ud130\ud504\ub808\uc784 \uc0dd\uc131\n# print(y_test)\noutput = pd.DataFrame({'PassengerId': y_test['PassengerId'],\n                      'Survived': pred})\n# print(output)\n\n######################       csv \uc0dd\uc131 \ubc0f \ud655\uc778     ######################\noutput.to_csv('1203.csv', index=False)\nprint(pd.read_csv('1203.csv'))\n\n######################            \uac00\ucc44\uc810         ######################\nprint('\uac00\ucc44\uc810: ', round(model.score(X_test, y_test['Survived'])*100,2))","412285ed":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='Survived', id_name='PassengerId')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","e5968251":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\nimport pandas as pd","9668b527":"# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 (\uc0dd\ub7b5)\nX_train.shape, y_train.shape, X_test.shape","6edafc1f":"X_train.head()","17f511e8":"# float64(2), int64(3), object(5)\nX_train.info()","e50d01fe":"y_train.head()","b2f80a3a":"# \uc0dd\uc874 \ube44\uc728\ny_train['Survived'].value_counts()","993573d0":"y = y_train[\"Survived\"]\n\n# sex\ub9cc \uc6d0\ud56b\uc778\ucf54\ub529 \ub428\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(X_train[features])\ntest = pd.get_dummies(X_test[features])","12f2e50b":"X.shape, test.shape","5b2c43ea":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=200, max_depth=7, random_state=2021)\nmodel.fit(X, y)\npredictions = model.predict(test)","ab1ce4b3":"model.score(X, y)","4ec41213":"output = pd.DataFrame({'PassengerId': X_test.PassengerId, 'Survived': predictions})\noutput.head()","69f28511":"# \uc218\ud5d8\ubc88\ud638.csv\ub85c \ucd9c\ub825\noutput.to_csv('1234567.csv', index=False)","9fa6fb59":"model.score(test, y_test['Survived'])","1362dac2":"# \uac00\ucc44\uc810","e9639c0e":"# csv \uc0dd\uc131 & \ud655\uc778","d2e031ff":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","39ef9b07":"## \ubaa8\ub378 \ubc0f \ud3c9\uac00","d62064bf":"# \ud83d\udc93\ud83d\udc28 \uc5f0\uc2b5_01 \ud83d\udc28\ud83d\udc93","16c3477b":"# EDA","286f060e":"# \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774 \ud83d\udca5\ud83d\udca5\ud83d\udca5","5d33a374":"## EDA","ab5e5f32":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","8fcd21a7":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","0dedc197":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","0c0b38a8":"# \ud83d\udc93\ud83d\udc28 \uc5f0\uc2b5_02 \ud83d\udc28\ud83d\udc93","8f2370bb":"## Start","1b3aa910":"### RandomForestClassifier\uc758 score\uac00 \uac00\uc7a5 \ub192\uc74c (81.12)","f207cd63":"# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","2721e816":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","aa097d83":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","6de32763":"## \uc0dd\uc874\uc5ec\ubd80 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30\n### \ud559\uc2b5\uc6a9 \ub370\uc774\ud130 (X_train, y_train)\uc744 \uc774\uc6a9\ud558\uc5ec \uc0dd\uc874 \uc608\uce21 \ubaa8\ud615\uc744 \ub9cc\ub4e0 \ud6c4, \uc774\ub97c \ud3c9\uac00\uc6a9 \ub370\uc774\ud130(X_test)\uc5d0 \uc801\uc6a9\ud558\uc5ec \uc5bb\uc740 \uc608\uce21\uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc758 CSV\ud30c\uc77c\ub85c \uc0dd\uc131\ud558\uc2dc\uc624(\uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 accuracy \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810)\n\n(\uac00) \uc81c\uacf5 \ub370\uc774\ud130 \ubaa9\ub85d\n- y_train: \uc0dd\uc874\uc5ec\ubd80(\ud559\uc2b5\uc6a9)\n- X_trian, X_test : \uc2b9\uac1d \uc815\ubcf4 (\ud559\uc2b5\uc6a9 \ubc0f \ud3c9\uac00\uc6a9)\n\n(\ub098) \ub370\uc774\ud130 \ud615\uc2dd \ubc0f \ub0b4\uc6a9\n- y_trian (712\uba85 \ub370\uc774\ud130)\n\n**\uc2dc\ud5d8\ud658\uacbd \uc138\ud305\uc740 \uc608\uc2dc\ubb38\uc81c\uc640 \ub3d9\uc77c\ud55c \ud615\ud0dc\uc758 X_train, y_train, X_test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud568\uc784**\n\n### \uc720\uc758\uc0ac\ud56d\n- \uc131\ub2a5\uc774 \uc6b0\uc218\ud55c \uc608\uce21\ubaa8\ud615\uc744 \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \ubd84\ub958\uc54c\uace0\ub9ac\uc998, \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ubaa8\ud615 \uc559\uc0c1\ube14 \ub4f1\uc774 \uc218\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- \uc218\ud5d8\ubc88\ud638.csv\ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud55c\ub2e4.\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 accuracy\ub85c \ud3c9\uac00\ud568\n\ncsv \ucd9c\ub825\ud615\ud0dc\n\n![image.png](attachment:de1920de-121e-47c3-a61f-e905386713bf.png)","50647062":"# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1"}}