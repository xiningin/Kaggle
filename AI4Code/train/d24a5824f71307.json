{"cell_type":{"1d0b894e":"code","cd1f0556":"code","95f47a5c":"code","86bfcac3":"code","7a6c93a9":"code","1ab6b0d7":"code","8c5b95d5":"code","bb9bdaa5":"code","837bbc3e":"code","3cf4e3b5":"code","405aef1a":"code","fbaacdbd":"code","e8f6e340":"code","bfc88acf":"code","06c159d7":"code","aaf9b01e":"code","bee5e461":"code","9dbeabe4":"code","57a03d22":"code","9434b493":"code","1c61bddf":"code","8b44d295":"code","007e9013":"code","b30c8523":"code","ac1d2b38":"code","4f089845":"code","ce71a7f2":"code","8a0e688f":"code","be752b3b":"code","dc2f042c":"code","8003eeae":"code","467a7245":"code","d898fcf2":"code","c0729833":"code","0bdb204f":"code","6d23c390":"code","65861dd7":"code","5f852c43":"code","2c41a595":"code","8538ffc4":"code","3247fe7b":"code","6e01ea2d":"code","a80b2c3a":"code","4c36c2d0":"code","519dd43c":"code","dd6ffa22":"code","f5bf2f24":"code","ee2a2162":"code","43184de9":"code","ededd9bd":"code","104647c7":"code","2491e8e5":"code","56cfe13b":"code","e7353c74":"code","37d7779d":"code","205a7a70":"code","6d30fbe8":"code","e5d98011":"code","e0367613":"code","bfa46ac6":"code","f7646c9e":"code","e8dcf01a":"code","db1ae408":"code","8bedd852":"code","3710e7bd":"code","09983d2d":"code","900ed367":"code","70fa5069":"code","aeeaa596":"code","06b5dff1":"code","fea4a2ce":"code","08bb8a45":"code","3a89adfd":"markdown"},"source":{"1d0b894e":"#importing the libraries \nimport numpy as np \nimport matplotlib.pyplot as plt\nimport pandas as pd\n","cd1f0556":"#importing the train and test data \ntrain_data=pd.read_csv(\"..\/input\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/test.csv\")","95f47a5c":"train_data.head()","86bfcac3":"test_data.head()","7a6c93a9":"#shape of train and test data \\\ntrain_data.shape,test_data.shape","1ab6b0d7":"#take care of missing data in training set\ntrain_data.isnull().sum()[train_data.isnull().sum()>0]","8c5b95d5":"\n\n#take care of missing data in test set\ntest_data.isnull().sum()[test_data.isnull().sum()>0]\n\n","bb9bdaa5":"#draw a correlation matrices b\/w the variables \ncorr=train_data.corr()\nplt.figure(figsize=(10,10))\n#importing seaborn library \nimport seaborn as sns\nsns.heatmap(train_data[corr.index[abs(corr['SalePrice'])>0.4]].corr(),annot=True)\n\n\n","837bbc3e":"#filling the missing values \nfillnull={'Alley':'No Alley','PoolQC':'NoPool','Fence':'NoFence','MiscFeature':'NoMisc','FireplaceQu':'NoFire'}\ntrain_data.fillna(fillnull,inplace=True)\ntest_data.fillna(fillnull,inplace=True)","3cf4e3b5":"train_data.head()","405aef1a":"test_data.head()","fbaacdbd":"\n#Detection of outlier\nplt.scatter(train_data['Id'],train_data['GrLivArea'],color='red')\n#train_data.drop(train)","e8f6e340":"train_data.drop(train_data[train_data.GrLivArea>4000].index.values,inplace=True)","bfc88acf":"train_data.shape\n#shape is reduced","06c159d7":"#checking for outliers \nplt.figure(figsize=(5,5))\nplt.scatter(train_data['Id'],train_data['MSSubClass'],color='blue')","aaf9b01e":"plt.scatter(train_data['LotFrontage'],train_data['LotArea'],color='green')\nplt.xlabel('LotFrontage')\nplt.ylabel('LotArea')","bee5e461":"train_data.drop(train_data[train_data.LotFrontage>250].index.values,inplace=True)\ntrain_data.drop(train_data[train_data.LotArea>100000].index.values,inplace=True)\ntrain_data.shape","9dbeabe4":"plt.scatter(train_data['LotFrontage'],train_data['LotArea'],color='green')\nplt.xlabel('LotFrontage')\nplt.ylabel('LotArea')","57a03d22":"from sklearn.preprocessing import Imputer\nimputer=Imputer(missing_values='NaN',strategy='mean',axis=0)\ntrain_data['LotFrontage']=imputer.fit_transform(train_data['LotFrontage'].values.reshape(-1,1))\ntest_data['LotFrontage']=imputer.fit_transform(test_data['LotFrontage'].values.reshape(-1,1))\n","9434b493":"test_data.GarageYrBlt.describe()","1c61bddf":"test_data[test_data.GarageYrBlt>2018].GarageYrBlt","8b44d295":"test_data.GarageYrBlt.replace({2207:2007},inplace=True)","007e9013":"fillnull={'BsmtQual':'NoBsmt','BsmtCond':'NoBsmt','BsmtExposure':'NoBsmt','BsmtFinType1':'NoBsmt','BsmtFinSF1':'NoBsmt','BsmtFinType2':'NoBsmt','GarageType':'NoGrg','GarageFinish':'NoGrg','GarageQual':'NoGrg','GarageCond':'NoGrg'}\ntrain_data.fillna(fillnull,inplace=True)\ntest_data.fillna(fillnull,inplace=True)","b30c8523":"train_data.MasVnrType.fillna('None',inplace=True)\ntest_data.MasVnrType.fillna('None',inplace=True)\ntrain_data.MasVnrArea.fillna(0,inplace=True)\ntest_data.MasVnrArea.fillna(0,inplace=True)\ntrain_data.Electrical.fillna('SBrkr',inplace=True)","ac1d2b38":"fillwithmode=['MSZoning','Utilities','Exterior1st','Exterior2nd','KitchenQual','Functional','SaleType']\nfor column in fillwithmode:\n    mode=train_data[column].mode()[0]\n    test_data[column].fillna(mode,inplace=True)\nfillwithzero=['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath']\nfor column in fillwithzero:\n    test_data[column].fillna(0,inplace=True)\nfillwithmean=['GarageArea','GarageCars']\nfor column in fillwithmean:\n    mean=train_data[column].mean()\n    test_data[column].fillna(mean,inplace=True)\ntest_data.isnull().sum()[test_data.isnull().sum()>0]","4f089845":"train_data.isnull().sum()[train_data.isnull().sum()>0]","ce71a7f2":"#Labeling, creating dummies and feature engineering\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndummies=pd.get_dummies(train_data.MSZoning,prefix='MSZoning')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.MSZoning,prefix='MSZoning')\ntest_data=pd.concat([test_data,dummies],axis=1)\ntrain_data.loc[:,'Street']=le.fit_transform(train_data.Street.values)\ntest_data.loc[:,'Street']=le.fit_transform(test_data.Street.values)\nmapping={'No Alley':0,'Grvl':1,'Pave':2}\ntrain_data.Alley.replace(mapping,inplace=True)\ntest_data.Alley.replace(mapping,inplace=True)","8a0e688f":"\nmapping={'Low':0,'HLS':1,'Bnk':2,'Lvl':3}\ntrain_data.LandContour.replace(mapping,inplace=True)\ntest_data.LandContour.replace(mapping,inplace=True)\nmapping={'AllPub':3,'NoSewr':2,'NoSeWa':1,'ELO':0}\ntrain_data.Utilities.replace(mapping,inplace=True)\ntest_data.Utilities.replace(mapping,inplace=True)\ndummies=pd.get_dummies(train_data.LotConfig,prefix='LotConfig')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.LotConfig,prefix='LotConfig')\ntest_data=pd.concat([test_data,dummies],axis=1)","be752b3b":"mappingg={'IR3':0,'IR2':1,'IR1':2,'Reg':3}\ntrain_data.LotShape.replace(mapping,inplace=True)\ntest_data.LotShape.replace(mapping,inplace=True)","dc2f042c":"\ndummies=pd.get_dummies(train_data.Neighborhood,prefix='Neighborhood')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Neighborhood,prefix='Neighborhood')\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.Condition1,prefix='Cond1')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Condition1,prefix='Cond1')\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.Condition2,prefix='Cond2')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Condition2,prefix='Cond2')\ntest_data=pd.concat([test_data,dummies],axis=1)\n\n","8003eeae":"mapping={'Gtl':0,'Mod':1,'Sev':2}\ntrain_data.LandSlope.replace(mapping,inplace=True)\ntest_data.LandSlope.replace(mapping,inplace=True)","467a7245":"dummies=pd.get_dummies(train_data.BldgType,prefix='BldgType')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.BldgType,prefix='BldgType')\ntest_data=pd.concat([test_data,dummies],axis=1)","d898fcf2":"dummies=pd.get_dummies(train_data.HouseStyle,prefix='HouseStyle')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.HouseStyle,prefix='HouseStyle')\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.RoofStyle,prefix='RoofStyle')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.RoofStyle,prefix='RoofStyle')\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.RoofMatl,prefix='RoofMatl')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.RoofMatl,prefix='RoofMatl')\ntest_data=pd.concat([test_data,dummies],axis=1)\n","c0729833":"train_data.Exterior1st.unique()","0bdb204f":"test_data.Exterior1st.unique()","6d23c390":"train_data.Exterior2nd.unique()","65861dd7":"test_data.Exterior2nd.unique()","5f852c43":"#we can see some wrong spell data in Exterior2nd attributes\nmapping={ 'Wd Shng':'WdShing','Brk Cmn': 'BrkComm','CmentBd': 'CemntBd'}\ntrain_data.Exterior2nd.replace(mapping,inplace=True)\ntest_data.Exterior2nd.replace(mapping,inplace=True)\na=train_data.Exterior1st.value_counts()\nb=train_data.Exterior2nd.value_counts()\nc=pd.concat([a,b],axis=1,sort=True)\nc.plot.bar(stacked=False)","2c41a595":"a=test_data.Exterior1st.value_counts()\nb=test_data.Exterior2nd.value_counts()\nc=pd.concat([a,b],axis=1,sort=True)\nc.plot.bar(stacked=False)","8538ffc4":"dummies=pd.get_dummies(train_data.Exterior1st,prefix='Ext1')\ntrain_data['Ext1_Other']=0\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Exterior1st,prefix='Ext1')\ndummies['Ext1_ImStucc']=0\ndummies['Ext1_Stone']=0\ndummies['Ext1_Other']=0\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.Exterior2nd,prefix='Ext2')\ndummies['Ext2_Other']=0\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Exterior2nd,prefix='Ext2')\ntest_data=pd.concat([test_data,dummies],axis=1)","3247fe7b":"dummies=pd.get_dummies(train_data.MasVnrType,prefix='MasVnrType')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.MasVnrType,prefix='MasVnrType')\ntest_data=pd.concat([test_data,dummies],axis=1)","6e01ea2d":"plt.scatter(train_data['Id'],train_data['MasVnrArea'],color='yellow')\nplt.show()","a80b2c3a":"train_data.drop(train_data[train_data.MasVnrArea>1200].index.values,inplace=True)\ntrain_data.shape","4c36c2d0":"mapping={'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1 }\ntrain_data.ExterQual.replace(mapping,inplace=True)\ntest_data.ExterQual.replace(mapping,inplace=True)\ntrain_data.ExterCond.replace(mapping,inplace=True)\ntest_data.ExterCond.replace(mapping,inplace=True)\ndummies=pd.get_dummies(train_data.Foundation,prefix='Foundation')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Foundation,prefix='Foundation')\ntest_data=pd.concat([test_data,dummies],axis=1)\ntrain_data['NoBsmt']=(train_data.BsmtQual=='NoBsmt')*1\ntest_data['NoBsmt']=(test_data.BsmtQual=='NoBsmt')*1\nmapping={'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5,'NoBsmt':0}\ntrain_data.BsmtCond.replace(mapping,inplace=True)\ntest_data.BsmtCond.replace(mapping,inplace=True)\nmapping={'Po':1,'Fa':2,'TA':3,'Gd':4,'Ex':5,'NoBsmt':0}\ntrain_data.BsmtQual.replace(mapping,inplace=True)\ntest_data.BsmtQual.replace(mapping,inplace=True)\nmapping={'Gd':4,'Av':3,'Mn':2,'No':1,'NoBsmt':0}\ntrain_data.BsmtExposure.replace(mapping,inplace=True)\ntest_data.BsmtExposure.replace(mapping,inplace=True)","519dd43c":"mapping={'GLQ':6,'ALQ':5,'BLQ':4,'Rec':3,'LwQ':2,'Unf':1,'NoBsmt':0}\ntrain_data.BsmtFinType1.replace(mapping,inplace=True)\ntest_data.BsmtFinType1.replace(mapping,inplace=True)\ntrain_data.BsmtFinType2.replace(mapping,inplace=True)\ntest_data.BsmtFinType2.replace(mapping,inplace=True)","dd6ffa22":"dummies=pd.get_dummies(train_data.Heating,prefix='Heating')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Heating,prefix='Heating')\ntest_data=pd.concat([test_data,dummies],axis=1)\nmapping={ 'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1 }\ntrain_data.HeatingQC.replace(mapping,inplace=True)\ntest_data.HeatingQC.replace(mapping,inplace=True)","f5bf2f24":"train_data.loc[:,'CentralAir']=le.fit_transform(train_data.CentralAir.values)\ntest_data.loc[:,'CentralAir']=le.fit_transform(test_data.CentralAir.values)","ee2a2162":"dummies=pd.get_dummies(train_data.Electrical,prefix='Electrical')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.Electrical,prefix='Electrical')\ntest_data=pd.concat([test_data,dummies],axis=1)\n","43184de9":"mapping={ 'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1 }\ntrain_data.KitchenQual.replace(mapping,inplace=True)\ntest_data.KitchenQual.replace(mapping,inplace=True)","ededd9bd":"mapping= {'Maj1':2,'Maj2':1,'Min1':5,'Min2':4,'Mod':3,'Sev':0,'Typ':6}\ntrain_data.Functional.replace(mapping,inplace=True)\ntest_data.Functional.replace(mapping,inplace=True)","104647c7":"mapping={ 'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1 ,'NoFire':0}\ntrain_data.FireplaceQu.replace(mapping,inplace=True)\ntest_data.FireplaceQu.replace(mapping,inplace=True)","2491e8e5":"train_data['GarageType']=(train_data.GarageType=='NoGrg')*1\ntest_data['GarageType']=(test_data.GarageType=='NoGrg')*1\ndummies=pd.get_dummies(train_data.GarageType,prefix='GarageType')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.GarageType,prefix='GarageType')\ntest_data=pd.concat([test_data,dummies],axis=1)\nmapping={'Fin':3,'RFn':2,'Unf':1,'NoGrg':0}\ntrain_data.GarageFinish.replace(mapping,inplace=True)\ntest_data.GarageFinish.replace(mapping,inplace=True)\nmapping={ 'Ex':5,'Gd':4,'TA':3,'Fa':2,'Po':1 ,'NoGrg':0}\ntrain_data.GarageQual.replace(mapping,inplace=True)\ntest_data.GarageQual.replace(mapping,inplace=True)\ntrain_data.GarageCond.replace(mapping,inplace=True)\ntest_data.GarageCond.replace(mapping,inplace=True)","56cfe13b":"mapping={'Y':3,'P':2,'N':1}\ntrain_data.PavedDrive.replace(mapping,inplace=True)\ntest_data.PavedDrive.replace(mapping,inplace=True)","e7353c74":"mapping={'Ex':3,'Gd':2,'Fa':1,'NoPool':0}\ntrain_data.PoolQC.replace(mapping,inplace=True)\ntest_data.PoolQC.replace(mapping,inplace=True)\nmapping={'GdPrv':4,'MnPrv':3,'GdWo':2,'MnWw':1,'NoFence':0}\ntrain_data.Fence.replace(mapping,inplace=True)\ntest_data.Fence.replace(mapping,inplace=True)","37d7779d":"dummies=pd.get_dummies(train_data.MiscFeature,prefix='MiscFeature')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.MiscFeature,prefix='MiscFeature')\ntest_data=pd.concat([test_data,dummies],axis=1)","205a7a70":"dummies=pd.get_dummies(train_data.SaleType,prefix='SaleType')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.SaleType,prefix='SaleType')\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.SaleCondition,prefix='SaleCondition')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.SaleCondition,prefix='SaleCondition')\ntest_data=pd.concat([test_data,dummies],axis=1)\ndummies=pd.get_dummies(train_data.YrSold,prefix='YrSold')\ntrain_data=pd.concat([train_data,dummies],axis=1)\ndummies=pd.get_dummies(test_data.YrSold,prefix='YrSold')\ntest_data=pd.concat([test_data,dummies],axis=1)","6d30fbe8":"train_data['BsmtQual'].unique","e5d98011":"\ntrain_data.head()","e0367613":"column_drop=['Id','MSZoning','LotConfig','LotShape','BsmtFinSF1','ExterCond','Fence','PoolQC','GarageCond','PavedDrive','GarageQual','Functional','GarageFinish','KitchenQual','FireplaceQu','HeatingQC','BsmtQual','BsmtCond','BsmtFinType2','BsmtFinType1','BsmtExposure','Foundation','Condition1','Condition2','HouseStyle','RoofStyle','Exterior1st','Exterior2nd','ExterQual','MasVnrType','Foundation','Electrical','GarageType','MiscFeature','YrSold','SaleType','SaleCondition','GarageYrBlt','Neighborhood','BldgType','RoofMatl','Heating','MoSold']\ntrain_data.drop(column_drop,axis=1,inplace=True)\ntest_data.drop(column_drop,axis=1,inplace=True)\nY=train_data.SalePrice\ntrain_data.drop('SalePrice',axis=1,inplace=True)\n","bfa46ac6":"plt.hist(Y,normed=True,bins=30)\nplt.xlabel('SalePrice')\nplt.ylabel('Frequency_count')","f7646c9e":"from scipy.stats import skew\nskew(Y)","e8dcf01a":"#we can see our dependent variable is higly positively skewed\nY=np.log1p(Y)","db1ae408":"skew(Y)","8bedd852":"plt.hist(Y,normed=True,bins=30)\nplt.xlabel('SalePrice')\nplt.ylabel('Frequency_count')\ntrain_data.head()\n","3710e7bd":"lst=list(range(56))\nto_extend=[153,165]\nlst.extend(to_extend)\nskew_features=train_data.iloc[:,lst].apply(lambda train_data:skew(train_data)).sort_values(ascending=False)\nskew_features_test=test_data.iloc[:,lst].apply(lambda test_data:skew(test_data)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skew_features})\nskewness_test = pd.DataFrame({'Skew' :skew_features_test})\nskewness.head()\n\nfrom scipy.special import boxcox1p\nskewness = skewness[abs(skewness) > 0.5].dropna()\nfeats=skewness.index.values.tolist()\nlam=0.1\nfor feat in feats:\n    train_data[feat]=boxcox1p(train_data[feat].index.values.tolist(), lam)\n    test_data[feat]=boxcox1p(test_data[feat].index.values.tolist(), lam)","09983d2d":"train_data.shape,test_data.shape","900ed367":"X=train_data\nX_test=test_data\nfor column in X.columns:\n    if column not in X_test.columns:\n        X.drop([column], axis=1, inplace=True)","70fa5069":"for column in X_test.columns:\n    if column not in X.columns:\n        X_test.drop([column], axis=1, inplace=True)","aeeaa596":"train_data.shape,test_data.shape","06b5dff1":"# Gradient Boosting Regression :-\nfrom sklearn.model_selection import GridSearchCV,KFold,cross_val_score\nfrom sklearn.ensemble import GradientBoostingRegressor\n#parameters = {'max_depth':[2,3,4],'n_estimators':[2800,3000,3200],'max_features':['sqrt'],'loss':['huber'],'min_samples_leaf':[14,15,16],'min_samples_split':[9,10,11],'random_state':[0]}\nparameters = {'max_depth':[3],'n_estimators':[3000],'max_features':['sqrt'],'loss':['huber'],'min_samples_leaf':[15],'min_samples_split':[10],'random_state':[0]}\nmodel=GridSearchCV(GradientBoostingRegressor(),parameters,scoring='neg_mean_squared_error',cv=KFold(n_splits=7))\nmodel.fit(train_data,Y)\nY_test1=model.predict(test_data)\nY_test1=np.exp(Y_test1)-1\n((model.best_score_)*(-1))**0.5","fea4a2ce":"# Lasso Regression :-\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import  RobustScaler\nmodel=make_pipeline(RobustScaler(),Lasso(0.0004,random_state=0))\nrmslerror=(-cross_val_score(model,train_data,Y,scoring='neg_mean_squared_error',cv=KFold(n_splits=7)))**0.5\nprint(rmslerror.mean())\nmodel.fit(train_data,Y)\nY_test2=np.expm1(model.predict(test_data))","08bb8a45":"Y_test=(Y_test1+Y_test2)\/2\nsubmission=pd.DataFrame({'Id':range(1461,2920),'SalePrice':Y_test})\nsubmission.to_csv('submit.csv',index=False)","3a89adfd":"Suggestions are welcome\n\nthanks...:)"}}