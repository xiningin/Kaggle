{"cell_type":{"694d0ea0":"code","3b077d8a":"code","967d334b":"code","51015ed1":"code","e226bc52":"code","426cde62":"code","84da41b2":"code","42801a64":"code","c98e0479":"markdown"},"source":{"694d0ea0":"import os\nimport math\nimport random\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\nfrom transformers import AdamW\nfrom transformers import AutoTokenizer\nfrom transformers import AutoModel\nfrom transformers import AutoConfig\nfrom transformers import get_cosine_schedule_with_warmup\n\nfrom sklearn.model_selection import KFold\n\nimport gc\ngc.enable()","3b077d8a":"NUM_FOLDS = 5\nNUM_EPOCHS = 3\nBATCH_SIZE = 32\nMAX_LEN = 248\nEVAL_SCHEDULE = [(0.50, 16), (0.49, 8), (0.48, 4), (0.47, 2), (-1., 1)]\nROBERTA_PATH = \"..\/input\/robertalarge\/\"\nTOKENIZER_PATH = \"..\/input\/robertalarge\/\"\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"","967d334b":"train_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/train.csv\")\n\n# Remove incomplete entries if any.\ntrain_df.drop(train_df[(train_df.target == 0) & (train_df.standard_error == 0)].index,\n              inplace=True)\ntrain_df.reset_index(drop=True, inplace=True)\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/test.csv\")\nsubmission_df = pd.read_csv(\"\/kaggle\/input\/commonlitreadabilityprize\/sample_submission.csv\")\n\ntokenizer = AutoTokenizer.from_pretrained(TOKENIZER_PATH)","51015ed1":"class LitDataset(Dataset):\n    def __init__(self, df, inference_only=False):\n        super().__init__()\n\n        self.df = df\n        self.inference_only = inference_only\n        self.text = df.excerpt.tolist()\n        # self.text = [text.replace(\"\\n\", \" \") for text in self.text]\n\n        if not self.inference_only:\n            self.target = torch.tensor(df.target.values, dtype=torch.float32)\n\n        self.encoded = tokenizer.batch_encode_plus(\n            self.text,\n            padding='max_length',\n            max_length=MAX_LEN,\n            truncation=True,\n            return_attention_mask=True\n        )\n\n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, index):\n        input_ids = torch.tensor(self.encoded['input_ids'][index])\n        attention_mask = torch.tensor(self.encoded['attention_mask'][index])\n\n        if self.inference_only:\n            return (input_ids, attention_mask)\n        else:\n            target = self.target[index]\n            return (input_ids, attention_mask, target)\n\n\nclass LitModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n        config = AutoConfig.from_pretrained(ROBERTA_PATH)\n        config.update({\"output_hidden_states\": True,\n                       \"hidden_dropout_prob\": 0.0,\n                       'num_hidden_layers': 25,\n                       \"layer_norm_eps\": 1e-09})\n\n        self.roberta = AutoModel.from_pretrained(ROBERTA_PATH, config=config)\n\n        self.layer_norm = nn.LayerNorm(1024)\n\n\n        self.regressor = nn.Sequential(\n            nn.Linear(1024, 1)\n        )\n        # self._init_weights(self.regressor)\n\n    def _init_weights(self, module):\n        if isinstance(module, nn.Linear):\n            module.weight.data.normal_(mean=0.0, std=0.02)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=0.02)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n        elif isinstance(module, nn.LayerNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n\n    def forward(self, input_ids, attention_mask):\n        roberta_output = self.roberta(input_ids=input_ids,\n                                      attention_mask=attention_mask\n                                      ,output_hidden_states=True\n                                      )\n\n        last_hidden_state = roberta_output.hidden_states[-1]\n\n        input_mask_expanded = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n        sum_embeddings = torch.sum(last_hidden_state * input_mask_expanded, 1)\n        sum_mask = input_mask_expanded.sum(1)\n        sum_mask = torch.clamp(sum_mask, min=1e-9)\n        mean_embeddings = sum_embeddings \/ sum_mask\n        norm_mean_embeddings = self.layer_norm(mean_embeddings)\n        logits = self.regressor(norm_mean_embeddings)\n\n        logits = logits.squeeze(-1).squeeze(-1)\n\n        return logits\n","e226bc52":"def predict(model, data_loader):\n    \"\"\"Returns an np.array with predictions of the |model| on |data_loader|\"\"\"\n    model.eval()\n\n    result = np.zeros(len(data_loader.dataset))    \n    index = 0\n    \n    with torch.no_grad():\n        for batch_num, (input_ids, attention_mask) in enumerate(data_loader):\n            input_ids = input_ids.to(DEVICE)\n            attention_mask = attention_mask.to(DEVICE)\n                        \n            pred = model(input_ids, attention_mask)                        \n\n            result[index : index + pred.shape[0]] = pred.flatten().to(\"cpu\")\n            index += pred.shape[0]\n\n    return result","426cde62":"test_dataset = LitDataset(test_df, inference_only=True)","84da41b2":"all_predictions = np.zeros((NUM_FOLDS, len(test_df)))\n\ntest_dataset = LitDataset(test_df, inference_only=True)\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE,\n                         drop_last=False, shuffle=False, num_workers=2)\nmodel_dir='..\/input\/test-2021-final-1\/roberta_large_pseudo\/'\nfor index in range(NUM_FOLDS):            \n    model_path = f\"{model_dir}model_{index + 1}.pth\"\n    print(f\"\\nUsing {model_path}\")\n                        \n    model = LitModel()\n    model.load_state_dict(torch.load(model_path))    \n    model.to(DEVICE)\n    \n    all_predictions[index] = predict(model, test_loader)\n    \n    del model\n    gc.collect()","42801a64":"predictions = all_predictions.mean(axis=0)\nsubmission_df.target = predictions\nprint(submission_df)\nsubmission_df.to_csv(\"submission.csv\", index=False)","c98e0479":"## Roberta large model which was trained on some pseudo label dataset(created by 0.448 lb blending models)\n"}}