{"cell_type":{"3e64ac16":"code","5839b531":"code","8cf32f95":"code","dde1d5a4":"code","8fac1034":"code","32f852ac":"code","8d33277c":"code","8b58bbed":"code","099c77f3":"code","553d5ca4":"code","c45b11c3":"code","f317b32d":"code","6547c85d":"code","4f734668":"code","067dec1a":"code","f4e43e86":"code","8a0a2a94":"code","a45739f8":"code","dd70d8e6":"code","38c8d309":"code","9ef98b86":"code","60dd4cef":"markdown","50d11b66":"markdown","1a640411":"markdown","584976bb":"markdown","bbc57e25":"markdown","77669e76":"markdown"},"source":{"3e64ac16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5839b531":"data = pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")\n                   \ndata2= pd.read_csv(\"\/kaggle\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")","8cf32f95":"data.head()","dde1d5a4":"data.info()","8fac1034":"data.tail()","32f852ac":"Counter(data[\"class\"])","8d33277c":"H = data[data[\"class\"]==\"Hernia\"]\nSl = data[data[\"class\"]==\"Spondylolisthesis\"]\nN = data[data[\"class\"]==\"Normal\"]","8b58bbed":"plt.scatter(x=H.pelvic_radius, y =H.sacral_slope,color=\"Red\",label =\"Hernia\")\nplt.scatter(x=Sl.pelvic_radius, y =Sl.sacral_slope,color=\"Green\",label =\"Spondylolisthesis\")\nplt.scatter(x=N.pelvic_radius, y =N.sacral_slope,color=\"Yellow\",label = \"Normal\")\nplt.xlabel(\"pelvic_radius\")\nplt.ylabel(\"sacral_slope,color\")\nplt.legend()\nplt.show()","099c77f3":"plt.scatter(x=H.pelvic_tilt, y =H.sacral_slope,color=\"Red\")\nplt.scatter(x=Sl.pelvic_tilt, y =Sl.sacral_slope,color=\"Green\")\nplt.scatter(x=N.pelvic_tilt, y =N.sacral_slope,color=\"Yellow\")\nplt.xlabel(\"pelvic_tilt\")\nplt.ylabel(\"sacral_slope,color\")\nplt.show()","553d5ca4":"H.describe()","c45b11c3":"Sl.describe()","f317b32d":"N.describe()","6547c85d":"plt.scatter(x=H.lumbar_lordosis_angle, y =H.sacral_slope,color=\"Red\")\nplt.scatter(x=Sl.lumbar_lordosis_angle, y =Sl.sacral_slope,color=\"Green\")\nplt.scatter(x=N.lumbar_lordosis_angle, y =N.sacral_slope,color=\"Yellow\")\nplt.xlabel(\"lumbar_lordosis_angle\")\nplt.ylabel(\"sacral_slope,color\")\nplt.show()","4f734668":"data[\"class\"] = [2 if each==\"Hernia\" else 1 if  each==\"Spondylolisthesis\" else 0 for each in data[\"class\"]]\ny = data[\"class\"].values\nx_data = data.drop([\"class\"],axis=1)","067dec1a":"x = ((x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)))","f4e43e86":"from sklearn.model_selection import train_test_split\nx_train , x_test, y_train , y_test = train_test_split(x,y,test_size=0.3,random_state=42)","8a0a2a94":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(prediction)\nknn.score(x_test,y_test)","a45739f8":"score_list = []\na=0\nb=0\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\n    if knn2.score(x_test,y_test)>a:\n        a=knn2.score(x_test,y_test)\n        b=i\nplt.plot(range(1,20),score_list,color=\"green\")\nplt.show()\nprint(b)\n  \n    ","dd70d8e6":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = b)\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(prediction)\nknn.score(x_test,y_test)","38c8d309":"def knn(x_train, x_test, y_train,y_test,number_of_try):\n    a=0\n    b=0\n    score_list=[]\n    for i in range(1,number_of_try):\n        knn2 = KNeighborsClassifier(n_neighbors = i)\n        knn2.fit(x_train,y_train)\n        score_list.append(knn2.score(x_test,y_test))\n        if knn2.score(x_test,y_test)>a:\n            a=knn2.score(x_test,y_test)\n            b=i\n    knn = KNeighborsClassifier(n_neighbors = b)\n    knn.fit(x_train,y_train)\n    plt.plot(range(1,number_of_try),score_list)\n    return knn.score(x_test,y_test),b\n    ","9ef98b86":"knn(x_train, x_test, y_train,y_test,100)","60dd4cef":"Function for KNN and Specify The Best # of n_neighbors  ","50d11b66":"Prepare Data","1a640411":"1. [Load and Check Data](#1)\n2. [KNN Part](#2)","584976bb":"Normalize Data","bbc57e25":"<a id=\"1\">\n    \n # Load and Check Data","77669e76":"<a id =\"2\" >\n    \n# KNN Part"}}