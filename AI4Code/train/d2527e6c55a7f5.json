{"cell_type":{"57896310":"code","21d6c855":"code","8ee6a8ff":"code","2e0e7f57":"code","6fdfa2d7":"code","44596cd5":"code","d9fdb78a":"code","5f849a00":"code","eb22bd9e":"code","3d39af94":"code","2d84c4a6":"code","a9a214ea":"code","f0bb77c3":"code","69e5d4d8":"code","96c91e54":"code","a8ced1fb":"code","4edb3cb6":"code","6642d926":"code","309402b0":"code","3b3f7cdc":"code","68af0f57":"code","4cf2b542":"code","015d1840":"code","2db589fe":"code","9a43b084":"code","c052b9e9":"code","ee9ceec0":"code","eebe871f":"code","7af6542c":"code","fe5a68f9":"code","54015faa":"code","a24eabf0":"code","77c14f78":"code","2b095e7b":"code","0bb56b9f":"markdown","cfeb6edd":"markdown","29b1f444":"markdown"},"source":{"57896310":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport random\nfrom tqdm import tqdm\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score\nimport matplotlib.pyplot as plt","21d6c855":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.python.ops.numpy_ops import np_utils\nfrom tensorflow.keras.utils import to_categorical","8ee6a8ff":"train_dir = '..\/input\/petfinder-pawpularity-score\/train'\ntest_dir = '..\/input\/petfinder-pawpularity-score\/test'","2e0e7f57":"path0='..\/input\/petfinder-pawpularity-score\/train\/0007de18844b0dbbb5e1f607da0606e0.jpg'\nimage=cv2.imread(path0)\nprint(image.shape)\nplt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))","6fdfa2d7":"image2=cv2.resize(image,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\nprint(image2.shape)\nplt.imshow(cv2.cvtColor(image2, cv2.COLOR_BGR2RGB))","44596cd5":"train=pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ntrain","d9fdb78a":"train['Pawpularity'].unique()","5f849a00":"N0=list(range(100)) \nN1=list(range(1,101)) \nnormal_mapping=dict(zip(N1,N0)) \nreverse_mapping=dict(zip(N0,N1)) ","eb22bd9e":"train[train['Id']=='0007de18844b0dbbb5e1f607da0606e0']['Pawpularity'].tolist()[0]","3d39af94":"trainimg0=[]\ntrainlabel0=[]\nfor im in tqdm(os.listdir(train_dir)):\n    image=cv2.imread(os.path.join(train_dir,im))\n    image2=cv2.resize(image,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    trainimg0+=[image2]\n    trainlabel0+=[train[train['Id']==im[0:-4]]['Pawpularity'].tolist()[0]]","2d84c4a6":"trainlabel1=pd.Series(trainlabel0).map(normal_mapping)","a9a214ea":"trainimg=np.array(trainimg0)\ntrainlabel=np.array(trainlabel1)","f0bb77c3":"m=len(trainimg)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)","69e5d4d8":"trainX=trainimg[M[0:(m\/\/4)*3]]\ntrainY0=trainlabel[M[0:(m\/\/4)*3]]\n\ntestX=trainimg[M[(m\/\/4)*3:]]\ntestY0=trainlabel[M[(m\/\/4)*3:]]","96c91e54":"labels1=to_categorical(trainY0)\ntrainY=np.array(labels1)","a8ced1fb":"trainx,testx,trainy,testy=train_test_split(trainX,trainY,test_size=0.2,random_state=44)","4edb3cb6":"print(trainx.shape)\nprint(testx.shape)\nprint(trainy.shape)\nprint(testy.shape)","6642d926":"model = Sequential()\nmodel.add(Conv2D(32,(4,4),input_shape = (60,60,3),activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(64,(3,3),activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(400, activation='relu'))\nmodel.add(Dense(100, activation='softmax'))","309402b0":"model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])","3b3f7cdc":"model.summary()","68af0f57":"his = model.fit(trainx, trainy, validation_split=0.2, epochs=30, batch_size=92, verbose=2)","4cf2b542":"y_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))","015d1840":"get_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']\nget_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\n\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","2db589fe":"epochs = range(len(get_loss))\nplt.plot(epochs, get_loss, 'r', label='Loss of Training data')\nplt.plot(epochs, validation_loss, 'b', label='Loss of Validation data')\nplt.title('Training vs validation loss')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","9a43b084":"pred2=model.predict(testX)\nprint(pred2.shape)\n\nPRED=[]\nfor item in pred2:\n    value2=np.argmax(item)      \n    PRED+=[value2]\nprint(pd.Series(PRED).value_counts())","c052b9e9":"ANS=testY0\nprint(pd.Series(ANS).value_counts())\naccuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","ee9ceec0":"import seaborn as sns\nfig, ax = plt.subplots(figsize=(14,5))\nsns.histplot(ANS,label='ANS',ax=ax,color='black',bins=100)\nsns.histplot(PRED,label='PRED',ax=ax,color='C1',bins=100)\nax.legend()\nax.grid()\nplt.show()","eebe871f":"fig, axs = plt.subplots(3,3,figsize=(12,12))\nfor i in range(9):\n    r=i\/\/3\n    c=i%3\n    img1 = testX[i]\n    ax=axs[r][c].axis(\"off\")\n    actual=reverse_mapping[testY0[i]]\n    predict=reverse_mapping[PRED[i]]    \n    ax=axs[r][c].set_title(str(actual)+'=='+str(predict))\n    ax=axs[r][c].imshow(img1)\nplt.show()","7af6542c":"TESTX=[]\ntestim=[]\nfor im in tqdm(os.listdir(test_dir)):\n    image=cv2.imread(os.path.join(test_dir,im))\n    image2=cv2.resize(image,dsize=(60,60),interpolation=cv2.INTER_CUBIC)\n    TESTX+=[image2]\n    testim+=[im[0:-4]]","fe5a68f9":"TESTX=np.array(TESTX)\nprint(TESTX.shape)","54015faa":"test_pred2=model.predict(TESTX)\n\nTESTPRED=[]\nfor item in test_pred2:\n    value=np.argmax(item)      \n    value2=reverse_mapping[value]\n    TESTPRED+=[float(value2)]\nprint(pd.Series(TESTPRED).value_counts())","a24eabf0":"sample=pd.read_csv('..\/input\/petfinder-pawpularity-score\/sample_submission.csv')\nsample","77c14f78":"result=pd.DataFrame(testim)\nresult[1]=TESTPRED\nresult.columns=['Id','Pawpularity']\nresult2=result.sort_values('Id')\nresult2","2b095e7b":"result2.to_csv('submission.csv',index=False)","0bb56b9f":"# Model","cfeb6edd":"# Train\/Validation Splitting using Train data","29b1f444":"# Test Data Predict "}}