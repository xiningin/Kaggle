{"cell_type":{"0de6a4f9":"code","cb261fd2":"code","74557b1e":"code","4be8a267":"code","c6094094":"code","fc13e51c":"code","b6bd4a3c":"code","45a0a99d":"code","9691a78e":"code","bddd119b":"code","9e3a26f3":"code","35cc434c":"code","a58d1538":"code","d61ed1fa":"code","5976095a":"code","2e7cca6c":"code","34296a4d":"code","32a9b01f":"code","546ed244":"code","fd5cd661":"code","3960cde1":"code","6f326f14":"code","b8600377":"code","9640aa86":"code","45d40376":"code","b9d60ef1":"code","e8539758":"code","d55ffffa":"code","a88b47e4":"code","2b72a345":"code","30b25d92":"code","2a1d45a1":"code","4b41e20d":"code","6029e092":"code","0399d7f7":"code","d7c7a96e":"code","e6e962b4":"code","62c8d629":"code","93c1a213":"code","2c223e18":"code","f226be21":"code","6bdc4989":"code","4d2b1a8a":"code","8425bbc3":"code","14dbc1ae":"code","d9e8ef52":"code","8bf584b3":"code","739347ad":"code","7f515622":"code","b9b9029f":"code","ca51b1cd":"code","a057978b":"code","4bcec4a7":"code","d583866a":"code","95681551":"code","dc0a6eda":"code","ca286046":"code","a54f5d91":"code","0e135835":"code","8b85350e":"code","e1e92a31":"code","f3793d1c":"code","a8b59ad7":"code","7a8a3aa5":"code","5d75190f":"code","ab00b538":"markdown","918b0b24":"markdown","c85ad37f":"markdown","4f7e7946":"markdown","d83745ba":"markdown","dd1c33b5":"markdown","d85a2f1a":"markdown","c882cf94":"markdown","312766ce":"markdown"},"source":{"0de6a4f9":"# For Python 2 \/ 3 compatability\nfrom __future__ import print_function","cb261fd2":"# Toy dataset.\n# Format: each row is an example.\n# The last column is the label.\n# The first two columns are features.\n# Feel free to play with it by adding more features & examples.\n# Interesting note: I've written this so the 2nd and 5th examples\n# have the same features, but different labels - so we can see how the\n# tree handles this case.\ntraining_data = [\n    ['Green', 3, 'Apple'],\n    ['Yellow', 3, 'Apple'],\n    ['Red', 1, 'Grape'],\n    ['Red', 1, 'Grape'],\n    ['Yellow', 3, 'Lemon'],\n]","74557b1e":"# Column labels.\n# These are used only to print the tree.\nheader = [\"color\", \"diameter\", \"label\"]","4be8a267":"def unique_vals(rows, col):\n    \"\"\"Find the unique values for a column in a dataset.\"\"\"\n    return set([row[col] for row in rows])","c6094094":"#######\n# Demo:\nunique_vals(training_data, 0)\n# unique_vals(training_data, 1)\n#######","fc13e51c":"def class_counts(rows):\n    \"\"\"Counts the number of each type of example in a dataset.\"\"\"\n    counts = {}  # a dictionary of label -> count.\n    for row in rows:\n        # in our dataset format, the label is always the last column\n        label = row[-1]\n        if label not in counts:\n            counts[label] = 0\n        counts[label] += 1\n    return counts","b6bd4a3c":"#######\n# Demo:\nclass_counts(training_data)\n#######","45a0a99d":"def is_numeric(value):\n    \"\"\"Test if a value is numeric.\"\"\"\n    return isinstance(value, int) or isinstance(value, float)","9691a78e":"#######\n# Demo:\nis_numeric(7)\n# is_numeric(\"Red\")\n#######","bddd119b":"class Question:\n    \"\"\"A Question is used to partition a dataset.\n\n    This class just records a 'column number' (e.g., 0 for Color) and a\n    'column value' (e.g., Green). The 'match' method is used to compare\n    the feature value in an example to the feature value stored in the\n    question. See the demo below.\n    \"\"\"\n\n    def __init__(self, column, value):\n        self.column = column\n        self.value = value\n\n    def match(self, example):\n        # Compare the feature value in an example to the\n        # feature value in this question.\n        val = example[self.column]\n        if is_numeric(val):\n            return val >= self.value\n        else:\n            return val == self.value\n\n    def __repr__(self):\n        # This is just a helper method to print\n        # the question in a readable format.\n        condition = \"==\"\n        if is_numeric(self.value):\n            condition = \">=\"\n        return \"Is %s %s %s?\" % (\n            header[self.column], condition, str(self.value))","9e3a26f3":"#######\n# Demo:\n# Let's write a question for a numeric attribute\nQuestion(1, 3)","35cc434c":"# How about one for a categorical attribute\nq = Question(0, 'Green')\nq","a58d1538":"# Let's pick an example from the training set...\nexample = training_data[0]\n# ... and see if it matches the question\nq.match(example) # this will be true, since the first example is Green.\n#######","d61ed1fa":"def partition(rows, question):\n    \"\"\"Partitions a dataset.\n\n    For each row in the dataset, check if it matches the question. If\n    so, add it to 'true rows', otherwise, add it to 'false rows'.\n    \"\"\"\n    true_rows, false_rows = [], []\n    for row in rows:\n        if question.match(row):\n            true_rows.append(row)\n        else:\n            false_rows.append(row)\n    return true_rows, false_rows","5976095a":"#######\n# Demo:\n# Let's partition the training data based on whether rows are Red.\ntrue_rows, false_rows = partition(training_data, Question(0, 'Red'))\n# This will contain all the 'Red' rows.\ntrue_rows","2e7cca6c":"# This will contain everything else.\nfalse_rows\n#######","34296a4d":"def gini(rows):\n    \"\"\"Calculate the Gini Impurity for a list of rows.\n\n    There are a few different ways to do this, I thought this one was\n    the most concise. See:\n    https:\/\/en.wikipedia.org\/wiki\/Decision_tree_learning#Gini_impurity\n    \"\"\"\n    counts = class_counts(rows)\n    impurity = 1\n    for lbl in counts:\n        prob_of_lbl = counts[lbl] \/ float(len(rows))\n        impurity -= prob_of_lbl**2\n    return impurity","32a9b01f":"#######\n# Demo:\n# Let's look at some example to understand how Gini Impurity works.\n#\n# First, we'll look at a dataset with no mixing.\nno_mixing = [['Apple'],\n              ['Apple']]\n# this will return 0 - 0% chance of misclassifying\ngini(no_mixing)","546ed244":"# Now, we'll look at dataset with a 50:50 apples:oranges ratio\nsome_mixing = [['Apple'],\n               ['Orange']]\n# this will return 0.5 - meaning, there's a 50% chance of misclassifying\n# a random example we draw from the dataset.\ngini(some_mixing)","fd5cd661":"# Now, we'll look at a dataset with many different labels\nlots_of_mixing = [['Apple'],\n                  ['Orange'],\n                  ['Grape'],\n                  ['Grapefruit'],\n                  ['Blueberry']]\n# This will return 0.8\ngini(lots_of_mixing)\n#######","3960cde1":"def info_gain(left, right, current_uncertainty):\n    \"\"\"Information Gain.\n\n    The uncertainty of the starting node, minus the weighted impurity of\n    two child nodes.\n    \"\"\"\n    p = float(len(left)) \/ (len(left) + len(right))\n    return current_uncertainty - p * gini(left) - (1 - p) * gini(right)","6f326f14":"#######\n# Demo:\n# Calculate the uncertainy of our training data.\ncurrent_uncertainty = gini(training_data)\ncurrent_uncertainty","b8600377":"# How much information do we gain by partioning on 'Green'?\ntrue_rows, false_rows = partition(training_data, Question(0, 'Green'))\ninfo_gain(true_rows, false_rows, current_uncertainty)","9640aa86":"# What about if we partioned on 'Red' instead?\ntrue_rows, false_rows = partition(training_data, Question(0,'Red'))\ninfo_gain(true_rows, false_rows, current_uncertainty)","45d40376":"# It looks like we learned more using 'Red' (0.37), than 'Green' (0.14).\n# Why? Look at the different splits that result, and see which one\n# looks more 'unmixed' to you.\ntrue_rows, false_rows = partition(training_data, Question(0,'Red'))\n\n# Here, the true_rows contain only 'Grapes'.\ntrue_rows","b9d60ef1":"# And the false rows contain two types of fruit. Not too bad.\nfalse_rows","e8539758":"# On the other hand, partitioning by Green doesn't help so much.\ntrue_rows, false_rows = partition(training_data, Question(0,'Green'))\n\n# We've isolated one apple in the true rows.\ntrue_rows","d55ffffa":"# But, the false-rows are badly mixed up.\nfalse_rows\n#######","a88b47e4":"def find_best_split(rows):\n    \"\"\"Find the best question to ask by iterating over every feature \/ value\n    and calculating the information gain.\"\"\"\n    best_gain = 0  # keep track of the best information gain\n    best_question = None  # keep train of the feature \/ value that produced it\n    current_uncertainty = gini(rows)\n    n_features = len(rows[0]) - 1  # number of columns\n\n    for col in range(n_features):  # for each feature\n\n        values = set([row[col] for row in rows])  # unique values in the column\n\n        for val in values:  # for each value\n\n            question = Question(col, val)\n\n            # try splitting the dataset\n            true_rows, false_rows = partition(rows, question)\n\n            # Skip this split if it doesn't divide the\n            # dataset.\n            if len(true_rows) == 0 or len(false_rows) == 0:\n                continue\n\n            # Calculate the information gain from this split\n            gain = info_gain(true_rows, false_rows, current_uncertainty)\n\n            # You actually can use '>' instead of '>=' here\n            # but I wanted the tree to look a certain way for our\n            # toy dataset.\n            if gain >= best_gain:\n                best_gain, best_question = gain, question\n\n    return best_gain, best_question","2b72a345":"#######\n# Demo:\n# Find the best question to ask first for our toy dataset.\nbest_gain, best_question = find_best_split(training_data)\nbest_question\n# FYI: is color == Red is just as good. See the note in the code above\n# where I used '>='.\n#######","30b25d92":"class Leaf:\n    \"\"\"A Leaf node classifies data.\n\n    This holds a dictionary of class (e.g., \"Apple\") -> number of times\n    it appears in the rows from the training data that reach this leaf.\n    \"\"\"\n\n    def __init__(self, rows):\n        self.predictions = class_counts(rows)","2a1d45a1":"class Decision_Node:\n    \"\"\"A Decision Node asks a question.\n\n    This holds a reference to the question, and to the two child nodes.\n    \"\"\"\n\n    def __init__(self,\n                 question,\n                 true_branch,\n                 false_branch):\n        self.question = question\n        self.true_branch = true_branch\n        self.false_branch = false_branch","4b41e20d":"def build_tree(rows):\n    \"\"\"Builds the tree.\n\n    Rules of recursion: 1) Believe that it works. 2) Start by checking\n    for the base case (no further information gain). 3) Prepare for\n    giant stack traces.\n    \"\"\"\n\n    # Try partitioing the dataset on each of the unique attribute,\n    # calculate the information gain,\n    # and return the question that produces the highest gain.\n    gain, question = find_best_split(rows)\n\n    # Base case: no further info gain\n    # Since we can ask no further questions,\n    # we'll return a leaf.\n    if gain == 0:\n        return Leaf(rows)\n\n    # If we reach here, we have found a useful feature \/ value\n    # to partition on.\n    true_rows, false_rows = partition(rows, question)\n\n    # Recursively build the true branch.\n    true_branch = build_tree(true_rows)\n\n    # Recursively build the false branch.\n    false_branch = build_tree(false_rows)\n\n    # Return a Question node.\n    # This records the best feature \/ value to ask at this point,\n    # as well as the branches to follow\n    # dependingo on the answer.\n    return Decision_Node(question, true_branch, false_branch)","6029e092":"def print_tree(node, spacing=\"\"):\n    \"\"\"World's most elegant tree printing function.\"\"\"\n\n    # Base case: we've reached a leaf\n    if isinstance(node, Leaf):\n        print (spacing + \"Predict\", node.predictions)\n        return\n\n    # Print the question at this node\n    print (spacing + str(node.question))\n\n    # Call this function recursively on the true branch\n    print (spacing + '--> True:')\n    print_tree(node.true_branch, spacing + \"  \")\n\n    # Call this function recursively on the false branch\n    print (spacing + '--> False:')\n    print_tree(node.false_branch, spacing + \"  \")","0399d7f7":"my_tree = build_tree(training_data)","d7c7a96e":"print_tree(my_tree)","e6e962b4":"def classify(row, node):\n    \"\"\"See the 'rules of recursion' above.\"\"\"\n\n    # Base case: we've reached a leaf\n    if isinstance(node, Leaf):\n        return node.predictions\n\n    # Decide whether to follow the true-branch or the false-branch.\n    # Compare the feature \/ value stored in the node,\n    # to the example we're considering.\n    if node.question.match(row):\n        return classify(row, node.true_branch)\n    else:\n        return classify(row, node.false_branch)","62c8d629":"#######\n# Demo:\n# The tree predicts the 1st row of our\n# training data is an apple with confidence 1.\nclassify(training_data[0], my_tree)\n#######","93c1a213":"def print_leaf(counts):\n    \"\"\"A nicer way to print the predictions at a leaf.\"\"\"\n    total = sum(counts.values()) * 1.0\n    probs = {}\n    for lbl in counts.keys():\n        probs[lbl] = str(int(counts[lbl] \/ total * 100)) + \"%\"\n    return probs","2c223e18":"#######\n# Demo:\n# Printing that a bit nicer\nprint_leaf(classify(training_data[0], my_tree))\n#######","f226be21":"#######\n# Demo:\n# On the second example, the confidence is lower\nprint_leaf(classify(training_data[1], my_tree))\n#######","6bdc4989":"# Evaluate\ntesting_data = [\n    ['Green', 3, 'Apple'],\n    ['Yellow', 4, 'Apple'],\n    ['Red', 2, 'Grape'],\n    ['Red', 1, 'Grape'],\n    ['Yellow', 3, 'Lemon'],\n]","4d2b1a8a":"for row in testing_data:\n    print (\"Actual: %s. Predicted: %s\" %\n           (row[-1], print_leaf(classify(row, my_tree))))","8425bbc3":"import numpy as np \nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier","14dbc1ae":"df = pd.read_csv(\"..\/input\/drugsets\/drug200.csv\")\ndf[0:5]","d9e8ef52":"X = df[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values\nX[0:5] #Remove the column containing the target name","8bf584b3":"from sklearn import preprocessing\nle_sex = preprocessing.LabelEncoder()\nle_sex.fit(['F','M'])\nX[:,1] = le_sex.transform(X[:,1]) \n\n\nle_BP = preprocessing.LabelEncoder()\nle_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])\nX[:,2] = le_BP.transform(X[:,2])\n\n\nle_Chol = preprocessing.LabelEncoder()\nle_Chol.fit([ 'NORMAL', 'HIGH'])\nX[:,3] = le_Chol.transform(X[:,3]) \n\nX[0:5]\n","739347ad":"# Target variable\ny = df[\"Drug\"]\ny[0:5]","7f515622":"from sklearn.model_selection import train_test_split\nX_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)","b9b9029f":"drugTree = DecisionTreeClassifier(max_depth = 4)\ndrugTree # it shows the default parameters","ca51b1cd":"drugTree.fit(X_trainset,y_trainset)","a057978b":"print(f'Decision tree has {drugTree.tree_.node_count} nodes with maximum depth {drugTree.tree_.max_depth}.')","4bcec4a7":"print(f'Model Accuracy: {drugTree.score(X, y)}')","d583866a":"y.unique()","95681551":"from sklearn.tree import export_graphviz\n\n# Export as dot\nexport_graphviz(drugTree, 'tree1.dot', rounded = True, \n                feature_names = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K'], \n                class_names = y.unique(), filled = True)","dc0a6eda":"from subprocess import call\n# Convert to png\ncall(['dot', '-Tpng', 'tree1.dot', '-o', 'tree1.png', '-Gdpi=100']);","ca286046":"from IPython.display import Image\nImage('tree1.png')","a54f5d91":"# Predict\ny_pred = drugTree.predict(X_testset)","0e135835":"print (y_pred[0:5])\nprint (y_testset [0:5].values)","8b85350e":"# Accuracy\nfrom sklearn.metrics import jaccard_score\nimport matplotlib.pyplot as plt\nprint(\"DecisionTrees's Accuracy: \", jaccard_score(y_testset, y_pred, average='micro'))\nprint(\"DecisionTrees's Accuracy: \", jaccard_score(y_testset, y_pred, average='macro'))\nprint(\"DecisionTrees's Accuracy: \", jaccard_score(y_testset, y_pred, average=None))","e1e92a31":"drugTree = DecisionTreeClassifier(max_depth = 3)\ndrugTree.fit(X_trainset,y_trainset)\nprint(f'Decision tree has {drugTree.tree_.node_count} nodes with maximum depth {drugTree.tree_.max_depth}.')\nprint(f'Model Accuracy: {drugTree.score(X, y)}')","f3793d1c":"# Export as dot\nexport_graphviz(drugTree, 'tree2.dot', rounded = True, \n                feature_names = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K'], \n                class_names = y.unique(), filled = True)\nfrom subprocess import call\n# Convert to png\ncall(['dot', '-Tpng', 'tree2.dot', '-o', 'tree2.png', '-Gdpi=100']);\nfrom IPython.display import Image\nImage('tree2.png')","a8b59ad7":"y_pred = drugTree.predict(X_testset)","7a8a3aa5":"print (y_pred[0:5])\nprint (y_testset [0:5].values)","5d75190f":"# Accuracy\nfrom sklearn.metrics import jaccard_score\nimport matplotlib.pyplot as plt\nprint(\"DecisionTrees's Accuracy: \", jaccard_score(y_testset, y_pred, average='micro'))\nprint(\"DecisionTrees's Accuracy: \", jaccard_score(y_testset, y_pred, average='macro'))\nprint(\"DecisionTrees's Accuracy: \", jaccard_score(y_testset, y_pred, average=None))","ab00b538":"Using <b>my_data<\/b> as the Drug.csv data read by pandas, declare the following variables: <br>\n\n<ul>\n    <li> <b> X <\/b> as the <b> Feature Matrix <\/b> (data of my_data) <\/li>\n    <li> <b> y <\/b> as the <b> response vector (target) <\/b> <\/li>\n<\/ul>","918b0b24":"## Without libraries using Gini","c85ad37f":"### Train Test split","4f7e7946":"The Gini Impurity represents the probability that a randomly selected sample from the node will be incorrectly classified according to the distribution of samples in the node. At the top, there is a 67% chance that a randomly selected point would be incorrectly classified. The Gini Impurity is how the decision tree makes splits. It splits the samples based on the value of a feature that reduces the Gini Impurity by the largest amount. ","d83745ba":"Though in this case the accuracy for test data is high for tree size of 4 and low for tree size of 3, because of the nature of simplicity of the data and it's size.\n\nWhat we have above is an overfitted model which might have a bad accuracy for some other test data.\n\nThe reason the decision tree is prone to overfitting when we don\u2019t limit the maximum depth is because it has unlimited flexibility, meaning that it can keep growing until it has exactly one leaf node for every single observation, perfectly classifying all of them. \n\nAs an alternative to limiting the depth of the tree, which reduces variance (good) and increases bias (bad), we can combine many decision trees into a single ensemble model known as the random forest.","dd1c33b5":"<div id=\"about_dataset\">\n    <h2>About the dataset<\/h2>\n    Imagine that you are a medical researcher compiling data for a study. You have collected data about a set of patients, all of whom suffered from the same illness. During their course of treatment, each patient responded to one of 5 medications, Drug A, Drug B, Drug c, Drug x and y. \n    <br>\n    <br>\n    Part of your job is to build a model to find out which drug might be appropriate for a future patient with the same illness. The feature sets of this dataset are Age, Sex, Blood Pressure, and Cholesterol of patients, and the target is the drug that each patient responded to.\n    <br>\n    <br>\n    It is a sample of binary classifier, and you can use the training part of the dataset \n    to build a decision tree, and then use it to predict the class of a unknown patient, or to prescribe it to a new patient.\n<\/div>","d85a2f1a":"## Using sklearn and real data set","c882cf94":"Our model no longer gets perfect accuracy on the training data. However, it probably would do better on the testing data since we have limited the maximum depth to prevent overfitting. This is an example of the bias - variance tradeoff in machine learning. A model with high variance has learned the training data very well but often cannot generalize to new points in the test set. On the other hand, a model with high bias has not learned the training data very well because it does not have enough complexity. This model will also not perform well on new points.\n\nLimiting the depth of a single decision tree is one way we can try to make a less biased model. Another option is to use an entire forest of trees, training each one on a random subsample of the training data. The final model then takes an average of all the individual decision trees to arrive at a classification. This is the idea behind the random forest.","312766ce":"The following code and concept has been very well explained in \nhttps:\/\/www.youtube.com\/watch?v=LDRbO9a6XPU"}}