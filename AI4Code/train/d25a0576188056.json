{"cell_type":{"c9e356c7":"code","c6d59582":"code","d032618d":"code","a11b005d":"code","64be772f":"code","89c453a0":"code","2f70faf6":"code","9525aec0":"code","e36ca9cd":"code","747b9e8e":"code","f8128ed1":"code","1e1443e3":"code","8993501b":"code","c26e335d":"code","a4e0e63f":"code","2af278b0":"code","d7ac753d":"code","198e84fe":"code","7f7b08e5":"code","c4acdf73":"code","238d5cad":"code","38a93efe":"markdown","3159e214":"markdown","26e58825":"markdown","27a5cc36":"markdown","c4328cd9":"markdown","766f1e07":"markdown","87629324":"markdown","030e2924":"markdown","06fcc31c":"markdown","d5a83288":"markdown","7d8cdab6":"markdown","bc64fb2a":"markdown","64b6dfe4":"markdown","a44edf8c":"markdown","88b73d6d":"markdown","6c60d472":"markdown"},"source":{"c9e356c7":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","c6d59582":"path_confirmed = \"..\/input\/covid-19-cssegisanddata\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\npath_deaths = \"..\/input\/covid-19-cssegisanddata\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\npath_recovered = \"..\/input\/covid-19-cssegisanddata\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"","d032618d":"death_cases = pd.read_csv(path_deaths)\nrecovered_cases = pd.read_csv(path_recovered)\n\ndf = pd.read_csv(path_confirmed)\ndf.drop( labels = [\"Province\/State\",\"Country\/Region\",\"Lat\",\"Long\"], inplace = True , axis = 1)\ndf","a11b005d":"data = df.sum().to_frame(name='cases').to_numpy()\ndata","64be772f":"from sklearn.preprocessing import MinMaxScaler\n\n#fit and transform or fit_transform\nscaler = MinMaxScaler(feature_range=(-1, 1))\ndata = scaler.fit_transform(data)\n\n\nprint(\"data normalizada = \" + str(data.shape))","89c453a0":"plt.plot(data)\nplt.title(\"Covid-19\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Confirmed Cases\")\nplt.show()","2f70faf6":"def makeXy(data,time_step,forecasting):\n    \n    X = []\n    Y = []\n    dataset = []\n    \n    i = 0\n    step = time_step\n    step_y = time_step\n    \n    if(forecasting == \"single\"):\n        step_y = 1\n        \n        \n\n    while((step+7) <= len(data)):\n    \n        for tmp in range(i,step):\n            \n            X.append(data[tmp])\n        \n       \n        for tmp in range(step,step+step_y):\n            \n            Y.append(data[tmp])\n            \n        #Aqui um ciclo acaba\n        dataset.append([X,Y])\n        X = []\n        Y = []\n        \n        i = i + 1\n        step = step + 1\n    \n    #Agora colocar esta list em numpy array\n   \n    X = np.array([case[0] for case in dataset]).reshape(len(dataset),time_step)\n    y = np.array([case[1] for case in dataset]).reshape(len(dataset),step_y)\n        \n    #Reshape para ser poss\u00edvel passar \u00e0 LSTM\n    X = X.reshape(len(X),len(X[0]),1)\n    y = y.reshape(len(y),len(y[0]),1)\n    \n    return X,y\n\nX,y = makeXy(data,time_step = 7, forecasting = \"single\")\n#dataset","9525aec0":"print(X[0:2])\n\nprint(\"\\n-------------------\\n\")\n\nprint(y[0:1])","e36ca9cd":"def show_history(history):\n    print(history.history.keys())\n\n    # summarize history for accuracy\n    #plt.plot(history.history['mean_squared_error'])\n    #plt.title('model accuracy with 128 units')\n    #plt.ylabel('accuracy')\n    #plt.xlabel('epoch')\n    #plt.show()\n    # summarize history for loss\n    plt.plot(history.history['loss'],'r')\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.show()","747b9e8e":"def build_model(forecasting,time_steps,nr_features,units):\n    \n    #tf.keras.backend.clear_session()\n    model = tf.keras.Sequential()\n    \n    model.add(tf.keras.layers.LSTM(units = units, input_shape= (time_steps, nr_features), return_sequences = False))\n    \n    if(forecasting == \"multi\"):\n    \n        #model.add(tf.keras.layers.LSTM(units = units, return_sequences = False))\n    \n        model.add(tf.keras.layers.Dense(64,activation='linear'))\n        \n        model.add(tf.keras.layers.Dense(time_steps,activation='linear'))    \n        #model.add(tf.keras.layers.TimeDistributed(tf.keras.layers.Dense(1,activation='linear')))\n\n    if(forecasting == \"single\"):\n        \n        #model.add(tf.keras.layers.LSTM(units = units, return_sequences = False))\n    \n        model.add(tf.keras.layers.Dense(64,activation='linear'))\n        \n        model.add(tf.keras.layers.Dense(1,activation='linear'))        \n        \n    opt = tf.keras.optimizers.Adam()\n    \n    model.compile(optimizer=\"adam\",loss = \"mse\")# metrics=[tf.keras.metrics.MeanSquaredError()])\n    \n    return model\n\n\nfrom keras.callbacks.callbacks import EarlyStopping\n\ndef fit(epochs,model,X,y):\n    \n    callbacks = [\n        EarlyStopping(\n            monitor='loss',\n            patience=3,\n            verbose=2,\n            mode='min'\n        )\n    ]\n    \n    history = model.fit(X,y,shuffle=False,verbose=2,epochs=epochs)#callbacks=callbacks)\n    \n    return history","f8128ed1":"X,y = makeXy(data,7,\"multi\")\nmodel_multi_step  = build_model(\"multi\",7, 1, 128)\nmodel_multi_step.summary()\nhistory = fit(300,model_multi_step,X,y)","1e1443e3":"show_history(history)","8993501b":"X,y = makeXy(data,7,\"single\")\nmodel_single_step  = build_model(\"single\",7, 1, 128)\nmodel_single_step.summary()\nhistory = fit(100,model_single_step,X,y)","c26e335d":"show_history(history)","a4e0e63f":"def predict_data(data,model,forecasting,time_step):\n    m = len(data)\n    i = 0\n    predicted_array = []\n    \n    #dou sempre append dos primeiros 7 valores, s\u00e3o os \u00fanicos que n\u00e3o s\u00e3o previstos\n    for i in range(time_step):\n        predicted_array.append(data[i])\n    \n    \n    if(forecasting == \"multi\"):\n        \n        while(i+time_step < m):\n            \n            #da 7 valores\n            predict = model.predict([[data[i:i+time_step]]])[0]\n            \n            for value in predict:\n    \n                predicted_array.append(value)\n\n            i = i + time_step\n    if(forecasting == \"single\"):\n        \n        while(i+time_step < m):\n            \n            #da 1 valor\n            predict = model.predict([[data[i:i+time_step]]])[0]\n            \n            predicted_array.append(predict[0])\n\n            i = i + 1\n            \n    \n    return np.asarray(predicted_array)","2af278b0":"def return_results(time_step,model1,model2):\n\n    # Multi Step\n    time_step = time_step\n\n    predicted_x_train_multi = predict_data(data,model1,\"multi\",time_step) #preve nos dados de treino\n    predicted_days_multi = model1.predict([[data[-time_step:]]])[0]#preve os 7 dias seguintes\n\n\n    #Single Step\n    predicted_x_train_single = predict_data(data,model2,\"single\",time_step) #preve nos dados de treino\n    predicted_days_single = np.zeros(shape=(time_step,1))\n\n    tmp = 0\n    for i in data[-time_step:]:\n        predicted_days_single[tmp][0] = i\n        tmp = tmp + 1\n    \n\n    #preve os proximos 7 dias\n    for i in range(time_step):\n        value = model2.predict([[predicted_days_single]])[0]#preve os 7 dias seguintes\n   \n        for i in range(0,len(predicted_days_single)-1):\n        \n            predicted_days_single[i] = predicted_days_single[i+1]\n        \n        \n        predicted_days_single[i+1] = value\n        \n    dt1 =  []\n    dt2 = []\n\n    for i in data:\n        dt1.append(i[0])\n        dt2.append(i[0])\n    for i in predicted_days_multi:\n        dt1.append(i)\n    for i in predicted_days_single:\n        dt2.append(i[0])\n        \n    return predicted_x_train_multi,dt1,predicted_x_train_single,dt2\n\npredicted_x_train_multi,predicted_days_multi,predicted_x_train_single, predicted_days_single = return_results(7,model_multi_step,model_single_step)","d7ac753d":"from matplotlib.pyplot import figure\n\nplt.figure(figsize=(15,10))\n    \nplt.plot(predicted_x_train_single,'k')\nplt.plot(predicted_x_train_multi,'r')\nplt.plot(predicted_days_multi,'b')\nplt.plot(predicted_days_single,'c')\nplt.plot(data,'g')\n\nplt.title(\"Number of Confirmed cases with Covid-19\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Covid-19\")\nplt.legend(['Predicted on the same data using forecasting single step',\n            'Predicted on the same data using forecasting multi step(7)',\n            'Predicted on 7 days using multi step',\n            'Predicted on 7 days using single step',\n            'Real Data'],loc = 'upper left')\nplt.legend\nplt.show()","198e84fe":"actual_value = scaler.inverse_transform(np.asarray(data[-1:]).reshape(1,-1))[0][0]\nmax_value1 = scaler.inverse_transform(np.asarray(predicted_days_single[-1:]).reshape(1,-1))[0][0]\nmax_value2 = scaler.inverse_transform(np.asarray(predicted_days_multi[-1:]).reshape(1,-1))[0][0]\n\n\nprint(\"Valor atual de casos confirmados = \" + str(actual_value))\nprint(\"Valor atual de casos 7 dias depois segundo o model single step = \" + str(max_value1))\nprint(\"Valor atual de casos 7 dias depois segundo o model multi step = \" + str(max_value2))\n","7f7b08e5":"X,y = makeXy(data,4,\"multi\")\nmodel_ms  = build_model(\"multi\",4, 1, 128)\nmodel_ms.summary()\nhistory = fit(100,model_ms,X,y)\n\nX,y = makeXy(data,4,\"single\")\nmodel_ss  = build_model(\"single\",4, 1, 128)\nmodel_ss.summary()\nhistory = fit(100,model_ss,X,y)","c4acdf73":"predicted_x_train_multi,predicted_days_multi,predicted_x_train_single,predicted_days_single = return_results(4,model_ms,model_ss)","238d5cad":"from matplotlib.pyplot import figure\n\nplt.figure(figsize=(15,10))\n    \nplt.plot(predicted_x_train_single,'k')\nplt.plot(predicted_x_train_multi,'r')\nplt.plot(predicted_days_multi,'b')\nplt.plot(predicted_days_single,'c')\nplt.plot(data,'g')\n\nplt.title(\"Number of Confirmed cases with Covid-19\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Covid-19\")\nplt.legend(['Predicted on the same data using forecasting single step',\n            'Predicted on the same data using forecasting multi step(7)',\n            'Predicted on 7 days using multi step',\n            'Predicted on 7 days using single step',\n            'Real Data'],loc = 'upper left')\nplt.legend\nplt.show()","38a93efe":"## Esta fun\u00e7\u00e3o serve para preparar o dataset, respetivamente prepara os dados de treino e os respetivos labels da seguinte forma:\n\n> Imaginemos x = [1,2,3,4,5,6] e um timestep de 2\n\n> Ent\u00e3o x =\u00a0[1,2],[2,3].. e y = [3,4],[4,5]..\n\n\n> Forecasting ou \u00e9 single ou multi, contendo impacto nos labels, caso seja multi y =[3,4], caso seja single y = [3]","3159e214":"## Packages utilizados","26e58825":"## Model utilizado para forecasting multi step ou single step\n### A fun\u00e7\u00e3o necessita dos seguintes argumentos:\n\n1. Forecasting, que representa a previs\u00e3o da rede, single step ou multi step\n2. time_steps, n\u00famero de dias que v\u00eam em cada elemento do x_train\n3. nr_features, representa o n\u00famero de features, neste caso s\u00f3 temos 1 feature\n3. units, representa o n\u00famero de unidades para serem utilizadas na LSTM\n\n#### Este modelo \u00e9 constitu\u00eddo por:\n\n    > LSTM -> Dense -> Dense","27a5cc36":"> Dataframe correspondente aos casos confirmados","c4328cd9":"## Some plots to check if's everything ok\n\n#### Como foi referido, foram utilizados dois modelos, um modelo de multi step e outro modelo single step\n#### Ambos estes modelos conseguem convergir e os resultados s\u00e3o apresentados na figura abaixo\n\n1. A reta a preta representa a previs\u00e3o do modelo single step no x_train, \u00e9 como se fosse uma m\u00e9trica de avalia\u00e7\u00e3o, mas visual\n2. A reta vermelha representa a previs\u00e3o do modelo multi step no x_train\n\n> Decidi fazer o plot destas duas previs\u00f5es para ver a diferen\u00e7a do comportamento dos dois modelos nos dados de treino, consegue-se observar que ambos os modelos conseguem generalizar, sendo que o modelo single step apresenta uma varia\u00e7\u00e3o menos reduzida\n\n3. A reta a azul mostra a previs\u00e3o nos pr\u00f3ximos 7 dias utilizando o modelo multi step\n4. A reta azul clara mostra a previs\u00e3o nos pr\u00f3ximos 7 dias utilizando o modelo single step\n\n5. A reta verda representa o n\u00famero de casos confirmados relativamento ao covid-19","766f1e07":"> Esta fun\u00e7\u00e3o faz a previs\u00e3o nos dados de treino.\n> Fa\u00e7o isto para conseguir avaliar visualmente como o modelo se comporta com os dados de treino, ver se est\u00e1 a dar overfitting ou consegue generalizar","87629324":"## Esta fun\u00e7\u00e3o devolve todos os resultados referentes aos modelos\n\n1. Devolve a previs\u00e3o nos dados de treino\n2. Devolve a previs\u00e3o nos 7 dias seguintes\n\n\n> Model1 representa o model multi step\n\n> Model2 representa o model single step","030e2924":"### Todo este processo \u00e9 relativo \u00e0 leitura do csv confirmed cases e algumas transforma\u00e7\u00f5es de modo a que tenhamos o n\u00famero confirmado de casos com Covid-19 por dia\n\n   1.  Apenas precisamos dos casos confirmados\n   2.  Apenas queremos o n\u00famero de casos por dia\n   3.  Tudo num numpy array em vez de um dataframe","06fcc31c":"### Normaliza\u00e7\u00e3o dos dados atrav\u00e9s do min-max\n\n> Scaler cont\u00e9m a normaliza\u00e7\u00e3o, a escala m\u00e1xima e m\u00ednima e consegue desnormalizar","d5a83288":"### Single Step model","7d8cdab6":"> O que consigo concluir neste exerc\u00edsio \u00e9 que modelos com multi-step muito altos apresentam um mau desempanho comparados com single-steps predictions, dado esta previs\u00e3o t\u00e3o elevado no multi-step\n\n> Modelos com time-step menor conseguem generalizar melhor, mas normalmente o single step consegue ter previs\u00f5es mais cred\u00edveis.","bc64fb2a":"> Como podemos observar pelo o seguinte gr\u00e1fico, o crescimento do Covid-19 \u00e9 semelhante a um crescimento linear, e nos ultimos 10 dias, \u00e9 semelhante a um crescimento exponencial, pelo que a previs\u00e3o dos 7 dias seguintes deve ser parecido a um crescimento exponencial","64b6dfe4":"# Mudando o n\u00famero de time_Steps consegue-se observar uma diferen\u00e7a nos modelos","a44edf8c":"### Com um time step de 4 consegue-se observar um diferen\u00e7a na previs\u00e3o\n### Visualmente qualquer um dos modelos parece correto\n\n> Apesar de que o modelo single step continua a apresentar sempre uma maior vari\u00e2ncia","88b73d6d":"### Multi step model","6c60d472":"## Function to check the loss"}}