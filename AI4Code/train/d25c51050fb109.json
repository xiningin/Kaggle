{"cell_type":{"8fa42c43":"code","af60312d":"code","bede8129":"code","e818666e":"code","7e79f933":"code","8bbe8139":"code","1d907955":"code","c334e9bd":"code","ee2e2e2c":"markdown","55009a91":"markdown","10303cc0":"markdown","def53d15":"markdown","3827bc2f":"markdown"},"source":{"8fa42c43":"# Generic Libraries\nimport numpy as np\nimport os, gc , warnings, time\nwarnings.filterwarnings(\"ignore\")\n\n# Imaging & Ploting Libraries\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# TensorFlow Libraries\nimport tensorflow as tf\nimport tensorflow_hub as hub","af60312d":"# Download Image from internet\n!wget 'https:\/\/lh4.googleusercontent.com\/-Anmw5df4gj0\/AAAAAAAAAAI\/AAAAAAAAAAc\/6HxU8XFLnQE\/photo.jpg64' -O original.jpg","bede8129":"# Model URL & Image Path\nmodel_url = 'https:\/\/tfhub.dev\/captain-pool\/esrgan-tf2\/1'\nimage_path = '.\/original.jpg'","e818666e":"# Pre-Process Image\ndef preprocess_image(image_path):\n    hr_image = tf.image.decode_image(tf.io.read_file(image_path))\n    \n    # If PNG, remove the alpha channel. The model only supports images with 3 color channels.\n    if hr_image.shape[-1] == 4:\n        hr_image = hr_image[...,:-1]\n        \n    hr_size = (tf.convert_to_tensor(hr_image.shape[:-1]) \/\/ 4) * 4\n    hr_image = tf.image.crop_to_bounding_box(hr_image, 0, 0, hr_size[0], hr_size[1])\n    hr_image = tf.cast(hr_image, tf.float32)\n    return tf.expand_dims(hr_image, 0)\n\n# Saves unscaled Tensor Images\ndef save_image(image, filename):\n    if not isinstance(image, Image.Image):\n        image = tf.clip_by_value(image, 0, 255)\n        image = Image.fromarray(tf.cast(image, tf.uint8).numpy())\n    image.save(\"%s.jpg\" % filename)\n    print(\"Saved as %s.jpg\" % filename)\n    \n# Plots images from image tensors\ndef plot_image(image, title=\"\"):\n    image = np.asarray(image)\n    image = tf.clip_by_value(image, 0, 255)\n    image = Image.fromarray(tf.cast(image, tf.uint8).numpy())\n    plt.imshow(image)\n    plt.axis(\"off\")\n    plt.title(title)","7e79f933":"# Load Model\nmodel = hub.load(model_url)","8bbe8139":"# Load, Plot & Save Original Image\nlr_image = preprocess_image(image_path)\nplot_image(tf.squeeze(lr_image), title=\"Low Resolution\")\n#save_image(tf.squeeze(lr_image), filename=\"Original Image\")","1d907955":"# Enhance Resolution\nstart = time.time()           # start timer\nhr_image = model(lr_image)\nhr_image = tf.squeeze(hr_image)\nend = time.time()           # end timer\n\nprint(\"Time Taken: %f sec\" % (end - start))","c334e9bd":"# Plotting High Resolution Image\nplot_image(tf.squeeze(hr_image), title=\"High Resolution\")","ee2e2e2c":"# Setup","55009a91":"# Enhance Resolution","10303cc0":"# Enhancing Image Resolution using ESRGAN TensorFlow Model\n\nWhen working with a Image-Data problem, we can come across images with different resolutions, especially images that have a resolution of 128 x 128 or even less. Consider a scenario where you only have such low-resolution images for training your model. If you find yourself in such sticky situation then TensorFlow Hub is here for your rescue.\n\nThere is a pre-trained model in TensorFlow Hub called [ESRGAN](https:\/\/tfhub.dev\/captain-pool\/esrgan-tf2\/1) that can enhance the resolution of a low-res image. The fancy looking **ESRGAN** is an acronym for **Enhanced Super Resolution Generative Adversarial Network**. This model is trained on DIV2K Dataset (on bicubically downsampled images) on image patches of size 128 x 128\n\nPlease read the [paper](https:\/\/arxiv.org\/pdf\/1809.00219.pdf) by Xintao Wang for more details about this model.\n\n\nWe shall now get cracking with the implementation of this model. Let's get started :-) ..","def53d15":"# Utility Functions","3827bc2f":"I hope this little tutorial was helpful, if it was then please do consider it to UPVOTE :-). "}}