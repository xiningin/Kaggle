{"cell_type":{"9a38080e":"code","3db033ea":"code","72867c40":"code","24b0b7f2":"code","8459cc19":"code","d3fc9bc5":"code","5edc7ea2":"code","f43dae60":"code","ff8a40d8":"code","9a85cf01":"code","0251f62d":"code","596f103f":"code","456a55b2":"code","bdbb6848":"code","a3317afd":"code","5c2f94c2":"code","569a3d05":"code","6a27b572":"code","e1dd11ec":"code","b650ee34":"code","019fa670":"code","9a518535":"code","5c60bbf8":"code","ed18023c":"code","11ed07f3":"code","26398b96":"code","95b840db":"code","e3eae0af":"code","21f047cd":"code","8fa82c05":"code","7c5bef2b":"code","25b91d7f":"markdown","1b5157dc":"markdown","bd79d993":"markdown","627fe9c2":"markdown","c74fc25a":"markdown","0a6b952a":"markdown"},"source":{"9a38080e":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np\nimport pandas as pd\nimport torch\nimport re\nimport torch\nfrom tqdm import notebook\nfrom itertools import combinations\nfrom transformers import AutoTokenizer, AutoModel\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom scipy.spatial.distance import cdist, cosine\nfrom scipy.stats.stats import pearsonr\n\nfrom sklearn.cluster import KMeans\nimport seaborn as sns\nimport matplotlib.pyplot as plt","3db033ea":"BERT = '..\/input\/deeppavlov-rubertbasecased'","72867c40":"# \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0435 10 \u0441\u0442\u0440\u043e\u043a\ndf = pd.read_csv('..\/input\/housedata\/data.csv')\n\ndf = df[['bedrooms','bathrooms','sqft_living','sqft_lot',\n        'floors','waterfront','view','sqft_above','sqft_basement','yr_built','yr_renovated']]\n\ndf_10 = df[:10]\ndf_10","24b0b7f2":"# \u043a\u043e\u044d\u0444\u0438\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0432 Pandas\ndf_10.loc[0].corr(df.loc[9]), df_10.loc[0].corr(df.loc[6])","8459cc19":"# \u043a\u043e\u044d\u0444\u0438\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0421\u043f\u0438\u0440\u043c\u0435\u043d\u0430 \u0438 (\u0442\u0430\u0443) \u041a\u0435\u043d\u0434\u0435\u043b\u043b\u0430\ndf_10.loc[0].corr(df_10.loc[9], method='spearman'), df_10.loc[0].corr(df_10.loc[6], method='kendall')","d3fc9bc5":"# \u043a\u043e\u044d\u0444\u0438\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0432 Scipy\npearsonr(df_10.loc[0], df_10.loc[9])","5edc7ea2":"# \u043a\u043e\u044d\u0444\u0438\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0432 Numpy\nnp.corrcoef(df_10.loc[0], df_10.loc[9])","f43dae60":"# \u0442\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430. \u0421\u0442\u0440\u043e\u043a\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438, \u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438.\ndf_10.T","ff8a40d8":"# \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u041f\u0438\u0440\u0441\u043e\u043d\u0430 \u0441 \u0446\u0432\u0435\u0442\u043e\u0432\u043e\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439\ndf_10.T.corr().style.background_gradient(cmap='YlOrBr')","9a85cf01":"# \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c 10 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0441\u043f\u0438\u0441\u043a\u0430\n\n# \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0435\u043c\nidx = np.random.randint(0,4600)\n# \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430 \u0432\u044b\u043f\u0430\u043b \u0438\u043d\u0434\u0435\u043a\u0441 574. \u041e\u043d \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0434\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441\u0442\u0430\u0442\u044c\u0438.\nidx = 574\nobj = df.loc[idx]\n\nprint(obj)","0251f62d":"%%time\n# \u043f\u0440\u0438\u043c\u0435\u043c \u043f\u043e\u0440\u043e\u0433 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0432\u043d\u044b\u043c 0.995\nTHRES = 0.995\n\n# \u043e\u0442\u0432\u0435\u0442 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\n# \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0440\u0435\u043c\u0430 \u0441 \u043d\u0443\u043b\u044f - \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0435\u0433\u043e \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0435\u0439\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b\ndf_recommend = df.head(0).copy()\n\n# \u043f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c\u0441\u044f \u0446\u0438\u043a\u043b\u043e\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0432 \u043f\u0440\u043e\u0434\u0430\u0436\u0435, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\u043e\u0433\u043e\nfor row in df.index:\n    # \u0432\u044b\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438\n    corr = obj.corr(df.loc[row])\n    # \u0435\u0441\u043b\u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043f\u043e\u0440\u043e\u0433\u0430 - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u043d\u043e\u0432\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u043c\n    if corr >= THRES: \n        df_recommend = pd.concat([df_recommend, df.query('index == @row')])\n        df_recommend.loc[row, 'corr_coef'] = corr\n\n# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u0435\u0441\u044f\u0442\u043a\u0443 \u043b\u0443\u0447\u0448\u0438\u0445 + \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u043e\u0432\u0430\u044f\ndf_recommend.sort_values(by='corr_coef', ascending=False, inplace=True)\ndf_recommend = df_recommend.head(11)\n\ndf_recommend","596f103f":"%%time\n# \u0431\u043e\u043b\u0435\u0435 \"\u043f\u0438\u0442\u043e\u043d\u0438\u0441\u0442\u044b\u0439\", \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u0438 \u0431\u044b\u0441\u0442\u0440\u044b\u0439 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0443\u0442\u044c. \n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0446\u0430.\n# \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0435\u0441\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041f\u0435\u0440\u0432\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0440\u0430\u0432\u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0435 - \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0431\u0440\u0430\u0437\u0446\u0430.\n# \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043b\u0443\u0447\u0448\u0438\u0445 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u044d\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u043e\u0431\u0449\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b.\nobj = df.loc[574]\ncorrs = df.T.corr()[idx].sort_values(ascending=False)[:11].rename('corrs')\ndf_res = df.query('index in @corrs.index')\n\n# \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f\ndf_res = df_res.join(corrs)\ndf_res.sort_values('corrs', ascending=False)","456a55b2":"# \u043c\u0435\u0442\u043e\u0434 pandas.corr() \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438. \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0435\u0437 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\nx = pd.Series([1,2,3,4,5])\ny = pd.Series([np.nan, np.nan,5,6,6])\n\nx.corr(y)","bdbb6848":"# \u0434\u043b\u044f \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0442\u044b\u0441\u044f\u0447\u0443 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0441 \u043f\u043e\u0440\u0442\u0430\u043b\u043e\u0432 lenta.ru \u0438 ria.ru\ndf_news = pd.read_csv('..\/input\/russian-news-2020\/news.csv', encoding='utf8')[['title', 'rubric']][:1000]\ndf_news.head()","a3317afd":"# \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0432\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\n# \u0442\u043e\u043a\u0435\u043d\u0430\u0439\u0437\u0435\u0440 - \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u043b\u043e\u0432 \u0432 \u0442\u043e\u043a\u0435\u043d\u044b - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \n# \u0438 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0432 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438\n\ntokenizer = AutoTokenizer.from_pretrained(BERT)\nmodel = AutoModel.from_pretrained(BERT)","5c2f94c2":"# \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0430\u0442\u0435\u0439 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u043d\u0438\u0436\u043d\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\ncorpus = df_news['title'].str.lower().values\n\n# \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f\ncorpus_new = []\nfor text in corpus:\n    text = re.sub(r'\\xa0', ' ', text)\n    text = re.sub(r'\u00ab\u00bb,:', '', text)\n    corpus_new.append(text)\n\n# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u044b\n# \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\ntokenized = []\nfor i in corpus_new:\n    tokenized.append(tokenizer.encode(i, add_special_tokens=True))\n\n# \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u043c\u0430\u0441\u043a\u0438 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f\nmax_len = 0\nfor i in tokenized:\n    if len(i) > max_len:\n        max_len = len(i)\n\n# \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u043a\u0443 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b \u043a \u0435\u0434\u0438\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u0435\npadded = np.array([i + [0]*(max_len - len(i)) for i in tokenized])\nattention_mask = np.where(padded != 0, 1, 0)\n\n# \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0437\u0430 \u043e\u0434\u043d\u0443 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e\nbatch_size = 1\n\n# c \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0438 BERT \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438\nembeddings = []\nfor i in notebook.tqdm(range(padded.shape[0] \/\/ batch_size)):\n        batch = torch.LongTensor(padded[batch_size * i : batch_size * (i + 1)]) \n        attention_mask_batch = torch.LongTensor(attention_mask[batch_size * i : batch_size * (i + 1)])\n        \n        with torch.no_grad():\n            batch_embeddings = model(batch, attention_mask=attention_mask_batch)\n        \n        embeddings.append(batch_embeddings[0][:,0,:].numpy())","569a3d05":"df_news.loc[10]","6a27b572":"corpus_new = []\nfor text in corpus:\n    text = re.sub(r'\\xa0', ' ', text)\n    corpus_new.append(text)","e1dd11ec":"# \u0442\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435\ncorpus_new[18]","b650ee34":"# \u0442\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 \u0442\u043e\u043a\u0435\u043d\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435\ntokenized[18]","019fa670":"# \u0442\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043f\u0435\u0440\u0432\u044b\u0435 10 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0430 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f\nembeddings[10][0][:10]","9a518535":"# \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432\nprint(df_news.loc[17, 'title'])\nprint(df_news.loc[420, 'title'])\n\nfrom sklearn.metrics.pairwise import cosine_similarity\ncosine_similarity(embeddings[419], embeddings[420])","5c60bbf8":"# \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u043d\u043e\u0432\u043e\u0441\u0442\u0438\nexample = embeddings[18]\n\n# \u0434\u0432\u0430 \u0441\u043f\u0438\u0441\u043a\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0435\u043c \u043e\u0442\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0440\u0435\u0442\u0435\u043d\u0434\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u043e\u043a\u0430\u0437\nidx = []\ncos_sim = []\n\n# \u043f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c\u0441\u044f \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0430\u043c \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0442\u0435, \u0433\u0434\u0435 \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043e\u0442 \u043e\u0431\u0440\u0430\u0437\u0446\u0430 \u043c\u0435\u043d\u0435\u0435 15%. \n# \u0438\u043b\u0438 \u0433\u0434\u0435 \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u0430\u044f \u0441\u0445\u043e\u0436\u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 85%\nfor i, j in enumerate(embeddings):\n    if cosine_similarity(example, j) >= 0.85:\n        idx.append(i)\n        cos_sim.append(cosine_similarity(example, j)[0][0])\n\n# \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0432 \u043d\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043d\u0438\u0441\u0443\u0441\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0442\u043e\u043f-11 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432\n# \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u043e \u0441\u0445\u043e\u0436\u0435\u0441\u0442\u044c\u044e 1 - \u043e\u0431\u0440\u0430\u0437\u0435\u0446\ncos_sim = pd.Series(cos_sim, name='cos_sim', index=idx)\nres = df_news.query('index in @idx').copy()\nres = res.join(cos_sim)\n\nres = res.sort_values(by='cos_sim', ascending=False)[:11]\n\nres","ed18023c":"# \u0414\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0442\u0431\u0435\u0440\u0435\u043c 300 \u0434\u043e\u043c\u043e\u0432\ndf_300 = df[:300]\ndf_300.head()","11ed07f3":"# \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 20\ndistortion = []\nK = range(1, 20) \n# \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e \u0432\u0441\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\nfor k in K:\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(df_300)\n    distortion.append(kmeans.inertia_) ","26398b96":"# \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432\n# \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043c\u0435\u0441\u0442\u0435, \u0433\u0434\u0435 \u0433\u0440\u0430\u0444\u0438\u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \"\u043b\u043e\u043c\u0430\u0435\u0442\u0441\u044f\". \u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 - \u044d\u0442\u043e 4.\nplt.figure(figsize=(12, 8))\nsns.lineplot(\n    data=distortion,\n    marker=\"o\")\n\nplt.xlabel('\u0427\u0438\u0441\u043b\u043e \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432')\nplt.tick_params(\n    axis='x',          \n    bottom=False, labelbottom=False)\nplt.ylabel('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438');","95b840db":"kmeans = KMeans(n_clusters=4, random_state=42)\nkmeans.fit(df_300)\n\ndf_300['label'] = kmeans.labels_","e3eae0af":"df_300['label'] = kmeans.labels_","21f047cd":"df_300['label'].value_counts()","8fa82c05":"df_300.query('label == 1').head(10)","7c5bef2b":"df_300.query('label == 2').head(10)","25b91d7f":"### \u041a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435","1b5157dc":"### \u041a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f","bd79d993":"### \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438","627fe9c2":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0433\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430.  \n\u0414\u0432\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 - \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439, \u043d\u043e \u0434\u043e\u043b\u0433\u0438\u0439 \u043f\u0440\u043e\u0442\u0438\u0432 \u043a\u0440\u0430\u0442\u043a\u043e\u0433\u043e \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e.","c74fc25a":"## \u0414\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c, \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0434\u0440\u0443\u0437\u044c\u044f!\n\n\u042d\u0442\u043e\u0442 \u043d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043a \u0441\u0442\u0430\u0442\u044c\u0435 **\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c** \u043d\u0430 \u043f\u043e\u0440\u0442\u0430\u043b\u0435 **NTA**.  \n\n\u0412 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043f\u043e\u0438\u0441\u043a\u0443 \u0441\u0445\u043e\u0436\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u0434\u0435\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c. \u0415\u0441\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.  \n\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437\u0443\u0447\u0430\u044e\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 python, \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u043c data-scientist\u2019\u0430\u043c.   \n\n\u0420\u0430\u0437\u0434\u0435\u043b\u044b \u043a\u043e\u0434\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0433\u043b\u0430\u0432\u0430\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0435. ","0a6b952a":"\u041d\u0443\u0436\u043d\u043e \u043b\u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0442\u043e\u043f-\u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439?  \n\u0415\u0441\u043b\u0438 \u0432\u043e\u043f\u0440\u043e\u0441 \u0441\u0442\u0430\u0432\u0438\u0442 \u0432\u0430\u0441 \u0432 \u0442\u0443\u043f\u0438\u043a, \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0442\u0435\u0441\u044c \u0441 [\u044d\u0442\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435\u0439](https:\/\/medium.com\/@bigdataschool\/%D0%BF%D1%80%D0%B5%D0%B4%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%B2-nlp-82c164bb7416). \u041f\u043e \u043e\u043f\u044b\u0442\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043e\u0442\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u043e\u0431\u044b\u0447\u043d\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a \u0437\u0430\u0434\u0430\u0447\u0435.  "}}