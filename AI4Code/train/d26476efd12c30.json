{"cell_type":{"8417cba0":"code","f6a5b229":"code","24173eae":"code","ed88647a":"code","ab1aefef":"code","583978c5":"code","6054a971":"code","ecbbb025":"code","15aef42a":"code","b1136cef":"code","185ed9eb":"code","ff4b374f":"code","ffa3d9b2":"code","2db14c35":"code","f7a115bc":"code","a02f801e":"code","e5ba19d6":"markdown","073ab99c":"markdown","b89e4751":"markdown","b045c343":"markdown","0cb8e992":"markdown","e80e164a":"markdown","97ba27c9":"markdown","bb6ee352":"markdown","b6b8403e":"markdown","88542711":"markdown","e49160fc":"markdown","3af300cc":"markdown","56beff00":"markdown","9a6c4ff7":"markdown","ad1b2ab8":"markdown","ea5c9020":"markdown","62459c91":"markdown","1d271cac":"markdown"},"source":{"8417cba0":"import pandas as pd\nimport folium\nimport branca.colormap as cm\nimport geopandas as gpd\nfrom folium.plugins import Search\nimport plotly\nimport branca\nimport random\nimport requests\nimport warnings; warnings.filterwarnings('ignore')","f6a5b229":"print(\"geopandas version\", gpd.__version__)\nprint(\"folium    version\", folium.__version__)\nprint(\"branca    version\", branca.__version__)\nprint(\"plotly    version\", plotly.__version__)","24173eae":"url = 'https:\/\/raw.githubusercontent.com\/ronakchittora\/Python\/master\/data_india_shapefile_stanford\/stanford-sh819zz8121-geojson.json'\ndistricts = gpd.read_file(url, driver='GeoJSON')\ndistricts.crs = \"EPSG:4326\"","ed88647a":"print(districts.shape, \"\\n\")\ndistricts.head(2)","ab1aefef":"districts = districts[['id', 'coc', 'nam', 'laa', 'geometry']]","583978c5":"# Getting the state boundries from file ('dissolve' same as 'groupby' in pandas, grouping on state names)\nstates = districts.dissolve(by='nam')\nstates.reset_index(inplace=True)\nstates.head(2)","6054a971":"# We may have multiple polygons (multiple records) for each district in our dataset and \n# so we will first get the list of unique districts and \n# we will create a pandas dataframe with id, District and State fields\n\ndf_population = pd.DataFrame.from_dict({'id':districts['id'].values.tolist()\n                                        , 'District':districts['laa'].values.tolist()\n                                        , 'State':districts['nam'].values.tolist()})\n\ndf_temp = df_population.drop_duplicates(subset=['State', 'District'], keep='first')\ndf_temp.drop(columns=['id'], inplace=True)\nprint('Distinct districts in data %d' %(df_temp.shape[0]))\n\n# now we have a dataframe with unique districts by state, we will generate a random population for each of them\nrandomlist = []\nfor i in range(0,df_temp.shape[0]):\n  n = random.randint(10000,1000000)\n  randomlist.append(n)\n\ndf_temp['Random Population'] = randomlist\n\n\n# Joining with df_population to get population values corresponding to each district\ndf_population = df_population.merge(df_temp, how='left', on=['State','District'])\nprint(df_population.info(), \"\\n\")\n\n\n# Also add population values to geopandas dataframe -  districts\ndistricts = districts.merge(df_population[['id', 'Random Population']], how='inner', on='id')\nprint(\"\\n\", districts.shape)","ecbbb025":"districts[districts['laa']=='MUMBAI SUBURBAN'].head(3)","15aef42a":"# Getting the coordinates to center the map\nx_map=states.centroid.x.mean()\ny_map=states.centroid.y.mean()\nprint(x_map,y_map)","b1136cef":"# getting the color bar\ncolormap = branca.colormap.LinearColormap(\n    colors=['#39C694','#88D9C1','#EAE0C7','#7AA7E1', '#5B83D8'],\n    index=districts['Random Population'].quantile([0.2,0.4,0.6,0.8]),\n    vmin=districts['Random Population'].min(),\n    vmax=districts['Random Population'].max()\n)\n\ncolormap.caption=\"Population of district\"\n\ncolormap","185ed9eb":"# Creating a map centered on coordinates we got before\nm = folium.Map(location=[y_map, x_map], zoom_start=4, tiles=None)\nfolium.TileLayer('CartoDB positron',name=\"Light Map\",control=False).add_to(m)\n\n# Plot States\nstategeo = folium.GeoJson(states,\n                          name='India States',\n                          style_function=lambda x: {'color': 'black', 'weight':1, 'fillOpacity':0},\n                          ).add_to(m)\n\n# Plot Districts\ndistgeo = folium.GeoJson(districts,\n                          name='India Districts',\n                          style_function=lambda x: {'fillColor': colormap(x['properties']['Random Population']), 'color': 'black',\n                                                    'weight':0.5, 'fillOpacity':0.5},\n                          tooltip=folium.GeoJsonTooltip(fields=['nam', 'laa', 'Random Population'], \n                                            aliases=['State', 'District', 'Population'], \n                                            localize=True)\n                         ).add_to(m)\n\n# Add the searchbar for States\nstatesearch = Search(layer=stategeo, \n                     geom_type='Polygon', \n                     placeholder=\"Search for a State\", \n                     collapsed=False, \n                     search_label='nam',\n                     weight=2\n                    ).add_to(m)\n\n# Add the searchbar for districts\ndistsearch = Search(layer=distgeo, \n                    geom_type='Polygon', \n                    placeholder=\"Search for a District\", \n                    collapsed=True, \n                    search_label='laa'\n                   ).add_to(m)\n\n# Add layer control\nfolium.LayerControl().add_to(m)\n\n# Add color bar\ncolormap.add_to(m)\n\n# Finally show the map\nm","ff4b374f":"data = requests.get(url)\nIndia = data.json()","ffa3d9b2":"India['features'][0]","2db14c35":"# We will use same random population data which we generated before with Plotly too\ndf_population.head(2)","f7a115bc":"import plotly.express as px\n\nfig = px.choropleth(df_population, geojson=India, locations='id', #featureidkey='properties.laa',\n                    color='Random Population',\n                    center={'lat':y_map, 'lon':x_map},\n                    color_continuous_scale=['#39C694','#88D9C1','#EAE0C7','#7AA7E1', '#5B83D8'],\n                    range_color=(df_population['Random Population'].min(), df_population['Random Population'].max()),\n                    hover_data=['State','District']\n                    )\n\nfig.update_geos(fitbounds=\"locations\", visible=False) #visible set to False to not view rest of the world map\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","a02f801e":"fig = px.choropleth_mapbox(df_population, geojson=India, locations='id', color='Random Population',\n                           color_continuous_scale=['#39C694','#88D9C1','#EAE0C7','#7AA7E1', '#5B83D8'],\n                           range_color=(df_population['Random Population'].min(), df_population['Random Population'].max()),\n                           mapbox_style=\"carto-positron\",\n                           zoom=3, center = {\"lat\": y_map, \"lon\": x_map},\n                           opacity=0.6,\n                           hover_data=['State', 'District']\n                          )\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","e5ba19d6":"Let's now verify everything went well with generating population, checking that each district has a same population value across multiple records","073ab99c":"We will do group by on data at state level to create a dataframe with state names and their boundries (later we will use this information for properly zooming in to each state)","b89e4751":"# Interactive Choropleth Maps in Python Using Foilum and Plotly\n","b045c343":"There is more then one way to create maps in plotly.\n1. We can hide the world map and just show India (using px.choropleth, Plotly Express)\n2. We can show India on the world map using px.choropleth_mapbox function (rest of the things remain same)\n\n<br>\n\nWe will draw map using both these ways","0cb8e992":"With plotly, we don't need to read data in geopandas dataframe. We can read json as it is","e80e164a":"**Now to the final step - <u>creating a map<\/u>**\n\nWe will plot two layers (States and Districts)\n\nFirst we will plot the **States** with a thicker (weight = 1) black colored line.  \nThis has two benefits -  \n1. We are able to visually separate one state with another  \n2. When we search for a state using state bar, we correctly zoom to that state and not any random district in that state (would happen if we don't use this layer)  \n<br>\n\nNext, we will plot the **districts** and color each of them based on the their population (random number we generated before). We will also create a tooltip for each distric so that when we hover over them we see the name and population values","97ba27c9":"As we can see, there are 1210 records in geojson file and we have id (unique), coc (country), nam (States), laa (Districts), geometry (Polygon coordinates) and some other information which is not required.  \n\nLet's remove the column which are not needed","bb6ee352":"Let's check if it is read correctly  \nWe will see data for a first record (district)","b6b8403e":"**This is beautiful map with great features.**\n* Districts are colored according to their population\n* We can hover over any district to see complete information accurately\n* We can search for a particular State or District easily and automatically zooms over it\n\n---\n","88542711":"Creating interactive maps in Python isn't quite straightforward as compared to other regular plots and can be tricky at times when required to plot information at a more granular level (e.g. plotting county level information in USA or district level information in India etc.)  \n<br>\nRecently I worked on a project which required creating an interactive choropleth map for plotting district level information on ammap of India and for that I explored two libraries **Folium** and **Plotly** (as per my requirements). I spent quite significant amount of time experimenting with these and searching online for resolving issues I was facing and so I wanted to put together the things I learned into a notebook to help others save their precious time.  \nHoping you find it useful. Let me know the feedback in comments.\n\n<br>\n\n**Contents:-**\n* [Using Folium](#Using-Folium)\n* [Using Plotly](#Using-Plotly)\n\n\nOther libaries which are used in this notebook-\n* [geopandas](https:\/\/pypi.org\/project\/geopandas\/) (make sure all the required dependecies are installed too)\n* [folium](https:\/\/pypi.org\/project\/folium\/)\n* [branca](https:\/\/pypi.org\/project\/branca\/)\n* pandas, random, requests, warnings  \n\nMake sure you have the same version number installed","e49160fc":"Generating a colormap bar for coloring the districts based on population, darker for more population and lighter color for less population","3af300cc":"I have downloaded a district level GeoJSON data for India from mit website and have placed it on my github repository for easier access. Link for downloading the data - https:\/\/geodata.mit.edu\/catalog\/stanford-sh819zz8121  \n\n\nWe will read the data using Geopandas read_file function and also assign a crs (Coordinate Reference System) to avoid any errors later while plotting","56beff00":"This is a great map plotting only the boundries we want to focus on and hiding everything else.  \nNow, let's try second method","9a6c4ff7":"### Using Folium\n\nFirst we will use Folium to create interactive map and then we will move to plotly to create similar maps\n\n","ad1b2ab8":"To create a colorful interactive choropleth map we also need a column with some values (colors varying with value in that column)  \n<br>\nSince we do not have any such column, we will create a `Population` column with some random values for population (you can instead use actual values too but getting correct population district wise is another difficult task and I will leave that to you)","ea5c9020":"get the x,y coordinates (longitude, latitude) for centering the map","62459c91":"## Using Plotly\n\nNow, lets create a similar map using plotly library (Plotly Express)","1d271cac":"Plots created using plotly look equally good but I personally like the Folium (leaflet) map as it looks better and also provides some additional features like placing search boxes)\n<br>\nReference:- <br>\n1. https:\/\/nbviewer.jupyter.org\/github\/python-visualization\/folium\/blob\/e26d044bbcb911ba16809154aeb0f611636ab11d\/examples\/plugin-Search.ipynb\n2. Folium offical examples - https:\/\/nbviewer.jupyter.org\/github\/python-visualization\/folium\/tree\/e26d044bbcb911ba16809154aeb0f611636ab11d\/examples\/\n3. Plotly (Method 1)- https:\/\/plotly.com\/python\/choropleth-maps\/\n4. Plotly (Method 2)- https:\/\/plotly.com\/python\/mapbox-county-choropleth\/\n\n<br>\nHope you found it useful. Upvote if you found it helpful, Also check out my other notebooks.\n<br>"}}