{"cell_type":{"dbd606e5":"code","c01702dd":"code","a8f762bd":"code","29d58098":"code","072538cb":"code","77edcb45":"code","ef2314df":"code","72a8b163":"code","1c4d02da":"code","9edf9c70":"code","df185285":"code","225bed32":"code","26090ef1":"code","60acc151":"code","4a05dbb8":"code","00e6d6f6":"code","3e7d7d94":"code","a364d9a6":"code","9189d6d9":"code","e71caa3a":"code","3f2bb1e9":"code","87eec981":"code","c6a2190d":"code","5deb0c39":"code","2bd2ae18":"code","b7f8bb8f":"code","2b2c0613":"code","dd3d05f0":"code","a34d2f28":"code","af18d48e":"code","f16e93ad":"code","47a1f69b":"code","b94fa053":"markdown","3f0b894a":"markdown","54236010":"markdown","61549cb4":"markdown","76aaf551":"markdown","a4b8c1b8":"markdown","91586a28":"markdown","f9a19a0b":"markdown","13653e14":"markdown","93c20ead":"markdown","060b9dd9":"markdown","97a1b8a1":"markdown","98f3b7c8":"markdown"},"source":{"dbd606e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c01702dd":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()","a8f762bd":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ndf = train.copy()","29d58098":"df.head()","072538cb":"test.head()","77edcb45":"print('shape of train data', df.shape)\nprint('shape of test data', test.shape)","ef2314df":"df.info()","72a8b163":"# Checking if there are any duplicate values\ndf.duplicated().any()","1c4d02da":"# Checking the null values\nround(100*df.isnull().sum()\/len(df), 2)","9edf9c70":"# Checking summary statistics\ndf.describe()","df185285":"# Checking the distribution of the target variable\nd_tv = round(100 * df['Survived'].value_counts(normalize = True), 2)\nd_tv","225bed32":"# Visualizing distribution of target variable\nsns.barplot(x = d_tv.index, y = d_tv.values)\nplt.xlabel('Survived')\nplt.ylabel('Percentage Survived')\nplt.show()","26090ef1":"# Separating numeric and categorical features\ndf_num = [columns for columns in df.columns if df[columns].dtypes != 'O']\ndf_cat = [columns for columns in df.columns if df[columns].dtypes == 'O']","60acc151":"print('Number of numeric features: ', len(df_num))\nprint('Number of categorical features: ', len(df_cat))","4a05dbb8":"print('Numeric features: ', df_num)\nprint('Categorical features', df_cat)","00e6d6f6":"# Visualize distribution of numeric features\nfor i in df_num:\n    sns.displot(x = i, data = df)\n    plt.show()","3e7d7d94":"# Separating discrete numeric features as categorical features\ndis_num_cat = set(df_num) - set(['Age', 'Fare']) - set(['PassengerId', 'Survived'])\ndis_num_cat","a364d9a6":"# Visualizing categorical features\nfor i in df_cat:\n    sns.countplot(x = i, data = df)\n    plt.show()","9189d6d9":"# Checking counts for Sex and Embarked features\ncat = ['Sex', 'Embarked']\nfor i in cat:\n    print(round(100*df[i].value_counts(normalize = True), 2))\n    print('-' * 100)\n    ","e71caa3a":"# Visualizing discrete numeric features\nfor i in dis_num_cat:\n    print(round(100*df[i].value_counts(normalize = True), 2))\n    sns.countplot(x = i, data = df)\n    plt.show()","3f2bb1e9":"cat = ['Sex', 'Embarked']\nfor i in cat:\n    print(pd.crosstab(df[i], df['Survived']))","87eec981":"df.groupby(['Sex', 'Survived'])['Age'].mean()","c6a2190d":"es = df.groupby(['Embarked', 'Survived'])['Age'].mean()\nes","5deb0c39":"df.groupby('Survived')['Age'].mean()","2bd2ae18":"df.groupby('Survived')['Fare'].mean()","b7f8bb8f":"df.groupby('Survived')['Fare'].median()","2b2c0613":"for i in dis_num_cat:\n    print(pd.crosstab(df[i], df['Survived']))\n    print('-' * 100)","dd3d05f0":"for i in dis_num_cat:\n    print(df.groupby([i, 'Survived'])['Age'].mean())\n    print('-' * 100)","a34d2f28":"for i in dis_num_cat:\n    print(df.groupby([i, 'Survived'])['Fare'].mean())\n    print('-' * 100)","af18d48e":"# Checking boxplot for Age and Fare variable\nsns.boxplot(x = 'Age', data = df)\nplt.show()","f16e93ad":"sns.boxplot(x = 'Fare', data = df)\nplt.show()","47a1f69b":"# Correlation matrix\nplt.figure(figsize = (20, 20))\nsns.heatmap(df.corr(), cbar=True, fmt='.1f', annot=True, cmap='Blues')\nplt.show()","b94fa053":"1. Sex and Embarked features seem to be useful","3f0b894a":"Fare feature seems to be right skewed as the mean value is more than double of its median value(50th percentile 50%)","54236010":"Please upvote if you like my effort.","61549cb4":"There are no duplicate rows","76aaf551":"1. Passenger Id just uniquely differentiates each passenger for which index can also be used so PassengerId feature will be dropped.\n2. Except Age and Fare other features have just a few distinct values which can be considered as categorical features only.\n3. Fare as we had expected from the summary statistics is right skewed and would be normalized before feeding it to the ML model.\n4. Age seems to be fairly normally distributed.","a4b8c1b8":"There are a substantial number of outliers in Fare feature which explains for its right skew and a few outliers in Age feature too.","91586a28":"1. Those survived had paid an average fair of 48 which is more than double of those who didn't survive.","f9a19a0b":"1. There are 12 features of which 1 Survived is the target feature\n2. Some of the features have null values which need to dealt with.\n3. Some features are numeric while some are non numeric.","13653e14":"There is class imbalance in the dataset. Not Survived are approx 62% while survived are only 38%.","93c20ead":"Even the median Fare for those survived was more than double of those who didn't survive.","060b9dd9":"## Bivariate Analysis","97a1b8a1":"1. 76% of the passengers had 0 parents\/children aboard the ship.\n2. Almost half of passengers had 3rd class ticket.\n3. Almost 70% of passengers had 0 siblings\/spouses aboard the titanic.","98f3b7c8":"20% of the values in Age feature are null, whereas almost 80% of the data is missing in Cabin feature and Embarked has a mere 0.22% data missing."}}