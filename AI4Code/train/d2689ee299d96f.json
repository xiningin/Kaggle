{"cell_type":{"0f82697c":"code","dc63bac1":"code","3f029a82":"code","2f616d75":"code","07b4ff6d":"code","bc572224":"code","0236ec05":"code","e8e6114a":"code","fc1de49c":"code","cf3b653a":"code","2582d258":"code","d1bd6930":"code","87501106":"code","22b37121":"code","a313d26f":"code","cd650b00":"code","df1e47fc":"code","bf454bae":"code","60a34049":"code","89675709":"code","c9b51caa":"code","57b86a9e":"code","175a07d9":"code","26352763":"code","d8b01304":"code","3b3efb76":"markdown","3f95aca7":"markdown"},"source":{"0f82697c":"import numpy as np \nimport pandas as pd\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split \nimport seaborn as sns\nfrom sklearn import tree\nfrom sklearn.metrics import f1_score\nfrom sklearn.tree import plot_tree\nimport matplotlib.pyplot as plt\nimport time\nfrom copy import deepcopy as d\nimport tqdm","dc63bac1":"!pip install pydotplus","3f029a82":"df = pd.read_csv(\"\/kaggle\/input\/star-type-classification\/Stars.csv\")","2f616d75":"df.head()","07b4ff6d":"target = 'Type'\ny = df[target]\nX = df.drop(columns=[target])\nX = pd.get_dummies(X)","bc572224":"class_names=['Red Dwarf', 'Brown Dwarf', 'White Dwarf','Main Sequence','Super Giants','Hyper Giants']\nfeature_names = X.columns.tolist()","0236ec05":"models = [DummyClassifier(random_state=42, strategy='most_frequent'),\n          DecisionTreeClassifier(random_state=42),\n          RandomForestClassifier(random_state=42)]","e8e6114a":"def evaluate_model(model,X,y,seeds=10):\n    scores = []\n    initial_time = time.time()\n    for i in range(seeds):\n        model_ = d(model)\n        (X_train, X_test, y_train, y_test) = train_test_split(\n            X,\n            y,\n            test_size=0.33,\n            random_state=i,\n            stratify=y,\n            shuffle=True,\n            )\n        model_.fit(X_train, y_train)\n        yhat = model_.predict(X_test)\n        score = f1_score(y_test, yhat, average='weighted')\n        scores.append(score)\n\n    return (np.array(scores), model_, (time.time() - initial_time)\n            \/ seeds)","fc1de49c":"results = {}\nfor model in tqdm.tqdm(models):\n    model_name = model.__class__.__name__\n    score ,model, time_taken = evaluate_model(model,X,y,seeds = 300)\n    result_dict  = {\n        'score': score.mean(),\n        'time_taken': time_taken,\n        'model': model\n    }\n    results[model_name] = result_dict","cf3b653a":"results","2582d258":"(X_train, X_test, y_train, y_test) = train_test_split(\n    X,\n    y,\n    test_size=0.33,\n    random_state=42,\n    stratify=y,\n    shuffle=True,\n    )","d1bd6930":"model = results['DecisionTreeClassifier']['model']","87501106":"fig = plt.figure(figsize=(25,20))\n_= plot_tree(model,filled=True,feature_names = feature_names,class_names=class_names)","22b37121":"text_representation = tree.export_text(model,feature_names=feature_names)\nprint(text_representation)","a313d26f":"features = X.columns.tolist()\nimportances = model.feature_importances_\nindices = np.argsort(importances)\nfig = plt.figure(figsize=(25,20))\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","cd650b00":"forest_model = results['RandomForestClassifier']['model']","df1e47fc":"features = feature_names\nimportances = forest_model.feature_importances_\nindices = np.argsort(importances)\nfig = plt.figure(figsize=(25,20))\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","bf454bae":"text_representation = tree.export_text(model,feature_names=feature_names)\nprint(text_representation)\n","60a34049":"plt.figure(figsize=(20,20))\n_ = tree.plot_tree(forest_model.estimators_[1], filled=True,feature_names = feature_names,class_names=class_names)\n","89675709":"decision_index = 0\ndecision_paths = model.decision_path(X_test.iloc[decision_index:decision_index+1].values)","c9b51caa":"import pydotplus\ndot_data = tree.export_graphviz(model, out_file=None,\n                                feature_names = feature_names,class_names=class_names,\n                                filled=True)\n\ngraph = pydotplus.graph_from_dot_data(dot_data)\nfor decision_path in decision_paths:\n    for n, node_value in enumerate(decision_path.toarray()[0]):\n        if node_value == 0:\n            continue\n        node = graph.get_node(str(n))[0]            \n        node.set_fillcolor('green')\n        labels = node.get_attributes()['label'].split('<br\/>')\n        for i, label in enumerate(labels):\n            if label.startswith('samples = '):\n                labels[i] = 'samples = {}'.format(int(label.split('=')[1]) + 1)\n\n        node.set('label', '<br\/>'.join(labels))","57b86a9e":"filename = 'tree2.png'\n_ = graph.write_png(filename)","175a07d9":"class_name = class_names[y_test.iloc[decision_index:decision_index+1].values[0]]","26352763":"decision_paths.toarray()","d8b01304":"import matplotlib.image as mpimg\nplt.figure(figsize=(20,20))\nplt.imshow(mpimg.imread(filename))\nplt.title(f'Predicted path for actual class {class_name}')\nplt.plot()","3b3efb76":"# Gini index  \nIndeks Giniego mierzy stopie\u0144 lub prawdopodobie\u0144stwo b\u0142\u0119dnej klasyfikacji okre\u015blonej zmiennej wybranej w losowy spos\u00f3b\nS\u0142u\u017cy on mi\u0119dzy innymi do obliczania wagi cech.\n$$\nG_{ini}= 1 - \\sum_{i=1}^{n} (p_{i})^2\n$$","3f95aca7":"Features:\n- Temperature -- K\n- L -- L\/Lo\n- R -- R\/Ro\n- AM -- Mv\n- Color -- General Color of Spectrum\n- Spectral_Class -- O,B,A,F,G,K,M \/ SMASS - https:\/\/en.wikipedia.org\/wiki\/Asteroid_spectral_types\n- Type -- Red Dwarf, Brown Dwarf, White Dwarf, Main Sequence , Super Giants, Hyper Giants\n\n\nLo = 3.828 x 10^26 Watts \\\n(Avg Luminosity of Sun) \\\nRo = 6.9551 x 10^8 m \\\n(Avg Radius of Sun) \n\n\nTARGET:\nType\n\nClasses from 0 to 5\n\n- Red Dwarf - 0\n- Brown Dwarf - 1\n- White Dwarf - 2\n- Main Sequence - 3\n- Super Giants - 4\n- Hyper Giants - 5\n"}}