{"cell_type":{"33de4e0e":"code","95003ad9":"code","629b93b2":"code","5a38eac4":"code","25591d8c":"code","7d2a8b9b":"code","ab9cf2f4":"code","e7a77af7":"code","a3caa420":"code","9f64de4c":"code","a8446270":"code","6556a991":"code","84699c26":"code","42e9d432":"code","8c5618e9":"code","dbed8bff":"code","21161ac6":"code","490fd7fe":"markdown","c4c32fdc":"markdown","37a904be":"markdown","63ae6115":"markdown"},"source":{"33de4e0e":"# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.model_selection import GroupKFold, KFold\nimport gc\nimport json\npd.set_option('display.max_columns', 1000)\nfrom sklearn import metrics\n\n\nfrom bayes_opt import BayesianOptimization\n","95003ad9":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","629b93b2":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code","5a38eac4":"def get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    last_game_time_title = {'lgt_' + title: 0 for title in assess_titles}\n    ac_game_time_title = {'agt_' + title: 0 for title in assess_titles}\n    ac_true_attempts_title = {'ata_' + title: 0 for title in assess_titles}\n    ac_false_attempts_title = {'afa_' + title: 0 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                    \n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(title_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_game_time_title.copy())\n            features.update(ac_game_time_title.copy())\n            features.update(ac_true_attempts_title.copy())\n            features.update(ac_false_attempts_title.copy())\n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            \n            # ----------------------------------------------\n            ac_true_attempts_title['ata_' + session_title_text] += true_attempts\n            ac_false_attempts_title['afa_' + session_title_text] += false_attempts\n            \n            \n            last_game_time_title['lgt_' + session_title_text] = session['game_time'].iloc[-1]\n            ac_game_time_title['agt_' + session_title_text] += session['game_time'].iloc[-1]\n            # ----------------------------------------------\n            \n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","25591d8c":"def get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","7d2a8b9b":"# function that creates more features\ndef preprocess(reduce_train, reduce_test):\n    for df in [reduce_train, reduce_test]:\n        \n        df['installation_session_count'] = df.groupby(['installation_id'])['Clip'].transform('count')\n        df['installation_duration_mean'] = df.groupby(['installation_id'])['duration_mean'].transform('mean')\n        df['installation_title_nunique'] = df.groupby(['installation_id'])['session_title'].transform('nunique')\n        \n        df['sum_event_code_count'] = df[[2050, 4100, 4230, 5000, 4235, 2060, 4110, 5010, 2070, 2075, 2080, 2081, 2083, 3110, 4010, 3120, 3121, 4020, 4021, \n                                        4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, \n                                        2040, 4090, 4220, 4095]].sum(axis = 1)\n        \n        df['installation_event_code_count_mean'] = df.groupby(['installation_id'])['sum_event_code_count'].transform('mean')\n        \n    features = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\n    features = [x for x in features if x not in ['accuracy_group', 'installation_id']]\n    return reduce_train, reduce_test, features","ab9cf2f4":"# thanks to Andrew\ndef get_label(vector):\n    vector[vector <= 1.12232214] = 0\n    vector[np.where(np.logical_and(vector > 1.12232214, vector <= 1.73925866))] = 1\n    vector[np.where(np.logical_and(vector > 1.73925866, vector <= 2.22506454))] = 2\n    vector[vector > 2.22506454] = 3\n    return vector\n    \ndef cohen_kappa(y_pred, y):\n    y = y.get_label().astype(\"int\")\n    y_pred = get_label(y_pred)\n    loss = cohen_kappa_score(y, y_pred, weights = 'quadratic')\n    return \"cohen kappa score\", loss, True","e7a77af7":"def run_feature_selection(reduce_train, reduce_test, features, new_features, categoricals):\n    \n    # define lgbm hyperparammeters\n    params = {\n            'learning_rate': 0.1,\n            'feature_fraction': 0.75,\n            'subsample': 0.75,\n            'n_jobs': -1,\n            'seed': 50,\n            'max_depth': 10\n        }\n    \n    # define a GroupKFold strategy because we are predicting unknown installation_ids\n    kf = GroupKFold(n_splits = 5)\n    target = 'accuracy_group'\n    oof_pred = np.zeros(len(reduce_train))\n    \n    # train a baseline model and record the cohen cappa score as our best score\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, groups = reduce_train['installation_id'])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[features].iloc[tr_ind], reduce_train[features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature = categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature = categoricals)\n        \n        model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 100, \n                         valid_sets = [train_set, val_set], verbose_eval = 500, feval = cohen_kappa)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        \n    # calculate loss\n    loss_score = cohen_kappa_score(reduce_train[target], get_label(oof_pred), weights = 'quadratic')\n    score = loss_score\n        \n    usefull_features = []\n    for i in new_features:\n        print('Our best cohen kappa score is :', score)\n        oof_pred = np.zeros(len(reduce_train))\n        print('Evaluating feature :', i)\n        best_features = features + usefull_features + [i]\n        print('Training with {} features'.format(len(best_features)))\n        for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, groups = reduce_train['installation_id'])):\n            print('Fold {}'.format(fold + 1))\n            x_train, x_val = reduce_train[best_features].iloc[tr_ind], reduce_train[best_features].iloc[val_ind]\n            y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n            train_set = lgb.Dataset(x_train, y_train, categorical_feature = categoricals)\n            val_set = lgb.Dataset(x_val, y_val, categorical_feature = categoricals)\n\n            model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 100, \n                                valid_sets=[train_set, val_set], verbose_eval = 500, feval = cohen_kappa)\n            oof_pred[val_ind] = model.predict(x_val)\n              \n        loss_score = cohen_kappa_score(reduce_train[target], get_label(oof_pred), weights = 'quadratic')\n        print('Our new cohen kappa score is : {}'.format(loss_score))\n        \n        if loss_score > score:\n            print('Feature {} is usefull, adding feature to usefull feature list'.format(i))\n            usefull_features.append(i)\n            score = loss_score\n        else:\n            print('Feature {} is useless'.format(i))\n        gc.collect()\n        print('-'*50)\n              \n    usefull_features = features + usefull_features\n    print('The best feature are: ', usefull_features)\n    print('Our best cohen kappa score :', score)\n              \n    return usefull_features","a3caa420":"def run_lgb(reduce_trian, reduce_test, usefull_features, params):\n    \n    # define a GroupKFold strategy because we are predicting unknown installation_ids\n    kf = GroupKFold(n_splits = 5)\n    target = 'accuracy_group'\n    oof_pred = np.zeros(len(reduce_train))\n    y_pred = np.zeros(len(reduce_test))\n    \n    # train a baseline model and record the cohen cappa score as our best score\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, groups = reduce_train['installation_id'])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 100, \n                         valid_sets = [train_set, val_set], verbose_eval = 100, feval = cohen_kappa)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        \n        y_pred += model.predict(reduce_test[usefull_features]) \/ kf.n_splits\n        \n    # calculate loss\n    loss_score = cohen_kappa_score(reduce_train[target], get_label(oof_pred), weights = 'quadratic')\n    print('Our oof cohen kappa score is :', loss_score)\n    return y_pred\n\n\ndef run_lgb_bayesian(num_leaves, max_depth, lambda_l1, lambda_l2, bagging_fraction, bagging_freq, colsample_bytree, learning_rate):\n    \n    params = {\n        'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'regression',\n        'n_jobs': -1,\n        'seed': 42,\n        'num_leaves': int(num_leaves),\n        'learning_rate': learning_rate,\n        'max_depth': int(max_depth),\n        'lambda_l1': lambda_l1,\n        'lambda_l2': lambda_l2,\n        'bagging_fraction': bagging_fraction,\n        'bagging_freq': int(bagging_freq),\n        'colsample_bytree': colsample_bytree,\n        'verbose': 0\n    }\n    \n    # define a GroupKFold strategy because we are predicting unknown installation_ids\n    kf = GroupKFold(n_splits = 5)\n    target = 'accuracy_group'\n    oof_pred = np.zeros(len(reduce_train))\n    y_pred = np.zeros(len(reduce_test))\n    \n    # train a baseline model and record the cohen cappa score as our best score\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(reduce_train, groups = reduce_train['installation_id'])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = reduce_train[usefull_features].iloc[tr_ind], reduce_train[usefull_features].iloc[val_ind]\n        y_train, y_val = reduce_train[target][tr_ind], reduce_train[target][val_ind]\n        train_set = lgb.Dataset(x_train, y_train)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 100, \n                         valid_sets = [train_set, val_set], verbose_eval = False, feval = cohen_kappa)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        \n        y_pred += model.predict(reduce_test[usefull_features]) \/ kf.n_splits\n        \n    # calculate loss\n    loss_score = cohen_kappa_score(reduce_train[target], get_label(oof_pred), weights = 'quadratic')\n    return loss_score\n\n\ndef predict(sample_submission, y_pred):\n    sample_submission['accuracy_group'] = get_label(y_pred)\n    sample_submission['accuracy_group'] = sample_submission['accuracy_group'].astype(int)\n    sample_submission.to_csv('submission.csv', index = False)\n    print(sample_submission['accuracy_group'].value_counts(normalize = True))","9f64de4c":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)\n# call feature engineering function\nreduce_train, reduce_test, features = preprocess(reduce_train, reduce_test)","a8446270":"# old features, were extracted with the feature selection function\nfeatures = ['Assessment', 'Game', 'acc_Cauldron Filler (Assessment)', 'acc_Chest Sorter (Assessment)', 'acc_Mushroom Sorter (Assessment)', 'acc_Cart Balancer (Assessment)', 4100, 4230, 5000, 4235, 2060, 4110, 5010, 2070, \n            2075, 2080, 2081, 2083, 4010, 3120, 3121, 4020, 4021, 4022, 4025, 4030, 4031, 3010, 4035, 4040, 3020, 3021, 4045, 2000, 4050, 2010, 2020, 4070, 2025, 2030, 4080, 2035, 2040, 4090, 4220, 4095, \n            'Dino Drink', 'Egg Dropper (Activity)', 'Tree Top City - Level 3', 'Leaf Leader', 'Dino Dive', \"Pirate's Tale\", 'Sandcastle Builder (Activity)', 'Bottle Filler (Activity)', 'Bird Measurer (Assessment)', \n            'Chicken Balancer (Activity)', 'Mushroom Sorter (Assessment)', 'Ordering Spheres', 'All Star Sorting', 'Slop Problem', 'Scrub-A-Dub', 'Cauldron Filler (Assessment)', 'Chest Sorter (Assessment)', 'Treasure Map', \n            'Magma Peak - Level 1', 'Watering Hole (Activity)', 'Bubble Bath', 'Crystal Caves - Level 3', 'Rulers', 'Bug Measurer (Activity)', 'Lifting Heavy Things', 'Tree Top City - Level 2', 'Pan Balance', \n            'Magma Peak - Level 2', 'Chow Time', 'Tree Top City - Level 1', 'Costume Box', 'Crystal Caves - Level 2', 'Crystals Rule', 'Happy Camel', 'Welcome to Lost Lagoon!', 'Crystal Caves - Level 1', \n            'Air Show', '12 Monkeys', 'Balancing Act', 'Fireworks (Activity)', 'Flower Waterer (Activity)', 'lgt_Cauldron Filler (Assessment)', 'lgt_Chest Sorter (Assessment)', 'lgt_Mushroom Sorter (Assessment)', \n            'lgt_Cart Balancer (Assessment)', 'lgt_Bird Measurer (Assessment)', 'agt_Cauldron Filler (Assessment)', 'agt_Chest Sorter (Assessment)', 'agt_Mushroom Sorter (Assessment)', 'agt_Cart Balancer (Assessment)', \n            'agt_Bird Measurer (Assessment)', 'ata_Cauldron Filler (Assessment)', 'ata_Chest Sorter (Assessment)', 'ata_Mushroom Sorter (Assessment)', 'ata_Cart Balancer (Assessment)', 'ata_Bird Measurer (Assessment)', \n            'afa_Cauldron Filler (Assessment)', 'afa_Chest Sorter (Assessment)', 'afa_Mushroom Sorter (Assessment)', 'afa_Cart Balancer (Assessment)', 'afa_Bird Measurer (Assessment)', 'session_title', \n            'accumulated_correct_attempts', 'accumulated_uncorrect_attempts', 'duration_mean', 'accumulated_accuracy', 0, 1, 2, 3, 'accumulated_accuracy_group', 'accumulated_actions', 'installation_session_count', \n            'installation_duration_mean', 'installation_title_nunique', 'installation_event_code_count_mean', 'sum_event_code_count']\nevent_id_features = list(reduce_train.columns[95:479])\ntitle_event_code_cross = list(reduce_train.columns[479:882])\n# get categories with more than 50 unique values\nid_over = list(reduce_train[event_id_features].nunique()[reduce_train[event_id_features].nunique()>50].index)\ntitle_event_over = list(reduce_train[title_event_code_cross].nunique()[reduce_train[title_event_code_cross].nunique()>50].index)\nprint('We are using {} features from event_id counts'.format(len(id_over)))\nprint('We are using {} features from title_event_cross counts'.format(len(title_event_over)))\nfeatures = features + id_over + title_event_over","6556a991":"def run_av(reduce_train, reduce_test, usefull_features):\n    \n    tr_data = reduce_train.copy()\n    tst_data = reduce_test.copy()\n    tr_data['target'] = 0 \n    tst_data['target'] = 1\n    av_data = pd.concat([tr_data[[col for col in tr_data.columns if col not in ['accuracy_group']]], tst_data[[col for col in tst_data.columns if col not in ['accuracy_group']]]], axis = 0)\n    \n    # undersample majority class\n    positive = av_data[av_data['target']==1]\n    negative = av_data[av_data['target']==0]\n    negative = negative.sample(int(negative.shape[0] * 0.5), random_state = 42)\n    av_data = pd.concat([negative, positive], axis = 0)\n    \n    # reset index and shuffle\n    av_data.reset_index(drop = True)\n    from sklearn.utils import shuffle\n    av_data = shuffle(av_data)\n        \n    params = {\n            'learning_rate': 0.05, \n            'n_jobs': -1,\n            'seed': 50,\n            'objective':'binary',\n            'boosting_type':'gbdt',\n            'is_unbalance': True,\n            'metric': 'auc',\n        }\n    \n    # define a KFold strategy\n    kf = GroupKFold(n_splits = 5)\n    target = 'target'\n    oof_pred = np.zeros(len(av_data))\n    important_features = pd.DataFrame()\n    fold_auc = []\n    \n    \n    for fold, (tr_ind, val_ind) in enumerate(kf.split(av_data, groups = av_data['installation_id'])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = av_data[usefull_features].iloc[tr_ind], av_data[usefull_features].iloc[val_ind]\n        y_train, y_val = av_data[target].iloc[tr_ind], av_data[target].iloc[val_ind]\n        train_set = lgb.Dataset(x_train, y_train)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 20, \n                         valid_sets = [train_set, val_set], verbose_eval = 100)\n        \n        fold_importance = pd.DataFrame()\n        fold_importance['features'] = usefull_features\n        fold_importance['importance'] = model.feature_importance()\n        important_features = pd.concat([important_features, fold_importance], axis = 0)\n        \n        oof_pred[val_ind] = model.predict(x_val)\n        fold_auc.append(metrics.roc_auc_score(y_train, model.predict(x_train)))\n        \n    print('Our mean train roc auc score is :', np.mean(fold_auc))\n    print('Our oof roc auc score is :', metrics.roc_auc_score(av_data[target], oof_pred))\n    return important_features\n\nimportant_features = run_av(reduce_train, reduce_test, features)","84699c26":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize = (12,15))\nimportant_features = important_features.groupby('features')['importance'].mean().reset_index().sort_values('importance')\nsns.barplot(important_features['importance'][-80:], important_features['features'][-80:])","42e9d432":"av_features = [col for col in list(important_features['features']) if col not in ['installation_session_count', 'installation_duration_mean', 'installation_title_nunique', 'installation_event_code_count_mean']]\nimportant_features = run_av(reduce_train, reduce_test, av_features)\nplt.figure(figsize = (12,15))\nimportant_features = important_features.groupby('features')['importance'].mean().reset_index().sort_values('importance')\nsns.barplot(important_features['importance'][-80:], important_features['features'][-80:])","8c5618e9":"def run_av_check(reduce_train, reduce_test, usefull_features):\n    \n    tr_data = reduce_train.copy()\n    tst_data = reduce_test.copy()\n    tr_data['target'] = 0 \n    tst_data['target'] = 1\n    av_data = pd.concat([tr_data[[col for col in tr_data.columns if col not in ['accuracy_group']]], tst_data[[col for col in tst_data.columns if col not in ['accuracy_group']]]], axis = 0)\n    \n     # undersample majority class\n    positive = av_data[av_data['target']==1]\n    negative = av_data[av_data['target']==0]\n    negative = negative.sample(int(negative.shape[0] * 0.5), random_state = 42)\n    av_data = pd.concat([negative, positive], axis = 0)\n    \n    # reset index and shuffle\n    av_data.reset_index(drop = True)\n    from sklearn.utils import shuffle\n    av_data = shuffle(av_data)\n        \n        \n    params = {\n            'learning_rate': 0.05, \n            'n_jobs': -1,\n            'seed': 50,\n            'objective':'binary',\n            'boosting_type':'gbdt',\n            'is_unbalance': True,\n            'metric': 'auc'\n        }\n    \n    # define a KFold strategy\n    kf = GroupKFold(n_splits = 5)\n    target = 'target'\n    \n    oof_pred = np.zeros(len(av_data))\n    for fold, (tr_ind, val_ind) in enumerate(kf.split(av_data, groups = av_data['installation_id'])):\n        print('Fold {}'.format(fold + 1))\n        x_train, x_val = av_data[usefull_features].iloc[tr_ind], av_data[usefull_features].iloc[val_ind]\n        y_train, y_val = av_data[target].iloc[tr_ind], av_data[target].iloc[val_ind]\n        train_set = lgb.Dataset(x_train, y_train)\n        val_set = lgb.Dataset(x_val, y_val)\n        \n        model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 20, \n                         valid_sets = [train_set, val_set], verbose_eval = 100)\n    \n        \n        oof_pred[val_ind] = model.predict(x_val)\n    \n    score = metrics.roc_auc_score(av_data[target], oof_pred)\n    \n    iter_features = usefull_features[::-1].copy()\n    drop_features = []\n    for i in iter_features:\n        oof_pred = np.zeros(len(av_data))\n        check_features = [col for col in iter_features if col not in drop_features + [i]]\n        print('Checking feature:', i)\n        for fold, (tr_ind, val_ind) in enumerate(kf.split(av_data, groups = av_data['installation_id'])):\n            x_train, x_val = av_data[check_features].iloc[tr_ind], av_data[check_features].iloc[val_ind]\n            y_train, y_val = av_data[target].iloc[tr_ind], av_data[target].iloc[val_ind]\n            train_set = lgb.Dataset(x_train, y_train)\n            val_set = lgb.Dataset(x_val, y_val)\n\n            model = lgb.train(params, train_set, num_boost_round = 100000, early_stopping_rounds = 20, \n                             valid_sets = [train_set, val_set], verbose_eval = False)\n\n\n            oof_pred[val_ind] = model.predict(x_val)\n            \n        rauc = metrics.roc_auc_score(av_data[target], oof_pred)\n            \n        if rauc < score:\n            print('Dropping feature: ', i)\n            score = rauc\n            drop_features.append(i)\n        else:\n            print('Feature {} is usefull'.format(i))\n            \n        print('Out best roc auc score is :', score)\n            \n        print('-'*50)\n        print('_'*50)\n            \n    usefull_features = [col for col in usefull_features if col not in drop_features]\n    return usefull_features\n\nusefull_features = run_av_check(reduce_train, reduce_test, list(important_features['features']))","dbed8bff":"# run bayezian optimization with optimal features\n\nbounds_lgb = {\n    'num_leaves': (20, 300),\n    'max_depth': (8, 12),\n    'lambda_l1': (0, 5),\n    'lambda_l2': (0, 5),\n    'bagging_fraction': (0.4, 1),\n    'bagging_freq': (1, 10),\n    'colsample_bytree': (0.4, 1),\n    'learning_rate': (0.025, 0.1)\n}\n\nlgb_bo = BayesianOptimization(run_lgb_bayesian, bounds_lgb, random_state = 236)\nlgb_bo.maximize(init_points = 20, n_iter = 20, acq = 'ucb', xi = 0.0, alpha = 1e-6)\n\nparams = {\n    'boosting_type': 'gbdt',\n    'metric': 'rmse',\n    'objective': 'regression',\n    'eval_metric': 'cappa',\n    'n_jobs': -1,\n    'seed': 42,\n    'num_leavs': lgb_bo.max['params']['num_leaves'],\n    'learning_rate': lgb_bo.max['params']['learning_rate'],\n    'max_depth': int(lgb_bo.max['params']['max_depth']),\n    'lambda_l1': lgb_bo.max['params']['lambda_l1'],\n    'lambda_l2': lgb_bo.max['params']['lambda_l2'],\n    'bagging_fraction': lgb_bo.max['params']['bagging_fraction'],\n    'bagging_freq': int(lgb_bo.max['params']['bagging_freq']),\n    'colsample_bytree': lgb_bo.max['params']['colsample_bytree']}","21161ac6":"# train with usefull features\ny_pred = run_lgb(reduce_train, reduce_test, usefull_features, params)\n# call predict function\npredict(sample_submission, y_pred)","490fd7fe":"Much better, our model can still detect train and test. On the other hand check training roc_auc and val roc_auc (the model is overfitting big time).\n\nNevertheless want to try and check the results.\n\nLet's build a function that drop one feature and check if the oof validation falls, if it falls we drop it.","c4c32fdc":"Let's make another filter and use adversarial validation to eliminate features. The main idea of adversarial validations is to train a ml model and check if the model can figure out if the data is from the train or test set.\n\nIf it can, this means that the data comes from another distribution and that's not a good thing.","37a904be":"# Objective\n\n* Try adversarial validation\n* All comments are appreciated","63ae6115":"Let's drop the features that are usefull for detecting the target variable and run adversarial validatation again. I believe that installation features can be a reason."}}