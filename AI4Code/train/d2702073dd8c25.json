{"cell_type":{"ba628b01":"code","d98fdd3e":"code","4af5ee86":"code","93e5d1d7":"code","d6109e15":"code","ef3cbb76":"code","89daf90d":"code","ce613541":"code","0ce120b9":"code","82691ee9":"code","a0b13104":"code","5c02dd55":"code","4530af5e":"code","534bd326":"code","7aa9a293":"code","075347f3":"code","37f460fc":"code","a8dad864":"code","ea7e69e1":"code","efdd7e18":"code","cc99ce01":"code","7d517481":"code","1bac6002":"code","316555b2":"code","7603c1e5":"code","d2ab01f8":"code","58c63345":"markdown","bc686ffe":"markdown","631edc4e":"markdown","0c3cf60b":"markdown","e2a80adb":"markdown","05c427e0":"markdown","d953bff8":"markdown","dc4910fe":"markdown","dae11fe6":"markdown","c09fcc8e":"markdown","c6c45667":"markdown","b2434f00":"markdown","82d15376":"markdown","50e98de1":"markdown","8157b632":"markdown","ffbe6894":"markdown","b29f3344":"markdown","a874f94e":"markdown","7fdf65c5":"markdown","b98d6523":"markdown","09c35bb8":"markdown","072e8c3b":"markdown","ac966e29":"markdown","d71dbba1":"markdown","9244845d":"markdown","f733e3bb":"markdown","116560b2":"markdown","f6e29009":"markdown","602dba93":"markdown","92b3a864":"markdown","2507d7ab":"markdown","b4a486a3":"markdown"},"source":{"ba628b01":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set_style('darkgrid')","d98fdd3e":"N = 10 # Number of countries to analyse\ngamma = 500_000 # starting criteria threshold - at least 1 in a 500.000 infected\nM = 50\noffset = 0\nfactor = 1_000_000 # one in a million","4af5ee86":"df_pivot = pd.read_csv(r'..\/input\/covid-current-dataset\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv') # r'..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')#, error_bad_lines=False)\nprint(df_pivot.describe())\ndf = df_pivot.melt(id_vars=['Province\/State','Country\/Region','Lat','Long'], var_name='date', value_name='cumulative_cases')\ndf = df.assign(date = pd.to_datetime(df['date']), format='%d\/%m\/%y', inplace=True)\nassert isinstance(df.date.iloc[0],pd._libs.tslibs.timestamps.Timestamp)\ndf.rename(columns={'Country\/Region': 'country','Province\/State': 'province'}, inplace=True)","93e5d1d7":"df_country = df.groupby(['country','date'])['cumulative_cases'].sum().reset_index()\ndf_province = df.groupby(['province','date'])['cumulative_cases'].sum().reset_index()","d6109e15":"print('First date available in dataset is:', str(df.date.min()))","ef3cbb76":"data_path = r'..\/input\/historical-covid-cases\/COVID-19-geographic-disbtribution-worldwide-6-march-2020.xls' # COVID-19-geographic-disbtribution-worldwide-6-march-2020.xls'\ndf_extra = pd.read_excel(data_path)\ndf_extra.rename(columns={'CountryExp': 'country', 'DateRep': 'date', 'NewConfCases': 'cases'}, inplace=True)\nprint('SHAPE')\nprint(df_extra.shape) \nprint('COLUMNS')\nprint(df_extra.columns)\nprint('DATATYPES')\nprint(df_extra.dtypes)\nprint('SUMMARY STATISTICS')\nprint(df_extra.describe())","89daf90d":"print('First date available in ECDC dataset is:',df_extra.date.min())","ce613541":"# Quick'n'Dirty - EARLY HUBEI ESTIMATE \ndf_hubei = df_extra[df_extra['country'] == 'China']\ndf_hubei = df_hubei.assign(cases = np.round(df_hubei['cases'] * 0.8))\ndf_hubei = df_hubei.assign(country = 'Hubei')\ndf_extra = df_extra.append(df_hubei)\ndf_extra = df_extra.sort_values(by=['country', 'date']).reset_index(drop=True)\ndf_extra['cumulative_cases'] = df_extra.groupby('country')['cases'].transform(pd.Series.cumsum)\ndf_extra_in_scope = df_extra[df_extra['date'] < df.date.min()] # CUT-OFF date\n#df_extra_in_scope.date.max()\n\n# Do some renaming to get aligned\ndf_extra_in_scope['country'] = df_extra_in_scope['country'].replace(['China', 'United States of America', 'United Kingdom', 'Cases on an international conveyance Japan'], ['Mainland China', 'US', 'UK', 'Other'])\ndf_extra_in_scope = df_extra_in_scope[['country', 'date', 'cumulative_cases']]\n#df_extra_in_scope[df_extra_in_scope['country'] == 'Mainland China'].sort_values(by='cumulative_cases', ascending=False)\ndf_extra_in_scope","0ce120b9":"# Enrich John Hopkins dataset\ndf_country = df_country.append(df_extra_in_scope[df_extra_in_scope['country'] != 'Hubei'])\ndf_province = df_province.append(df_extra_in_scope[df_extra_in_scope['country'] == 'Hubei'].rename(columns={'country': 'province'}))","82691ee9":"print('Total number of cases')\ntotal_cases = df_country.groupby('country').max()['cumulative_cases'].sum()\nprint(total_cases) #.sum())\n\nprint('Number of cases registered in a sub-province')\nprovince_cases =  df_province.groupby('province').max()['cumulative_cases'].sum()\nprint(province_cases)","a0b13104":"df_country.groupby('country').max().sort_values(by=['cumulative_cases'], ascending=False).head(N)","5c02dd55":"df_province.groupby('province').max().sort_values(by='cumulative_cases', ascending=False).head(N)","4530af5e":"fig, ax = plt.subplots(figsize=(8,6))\ndf_country.groupby('date').sum().sort_values(by='date')[['cumulative_cases']].plot(title='Evolution of total number cases over time', ax=ax)\n#print(df_country.groupby('date').sum().sort_values(by='date')[['cumulative_cases']].iloc[-1])\nplt.show()","534bd326":"def log_cases(df, groupby_cols, input_col='cumulative_cases', output_col='log_cumulative_cases'):\n    df_temp = df.groupby(groupby_cols).sum().sort_values(by=groupby_cols, ascending=True).reset_index(drop=False)\n    df_temp[output_col] = np.log(1+df_temp[input_col])\n    return df_temp\n\ndef adjusted_cases(df, input_col='cumulative_cases', adjust_col='population', output_col='adj_cumulative_cases', factor=1_000_000):\n        df[output_col] = df[input_col] * factor \/ df[adjust_col]\n        return df\n\ndef plot_simple_evolution(df):\n    df[['log_cumulative_cases']].plot(title='Log evolution of total number cases over time')\n    plt.show()\n\ndef plot_evolution(ax, df, x, y, hue='country', exclusion_list=None, inclusion_list=['Italy', 'South Korea', 'Mainland China'], marker='.', alpha=0.8):\n    \n    # Filter on inclusion list\n    if inclusion_list is not None:\n        df = df[df[hue].isin(inclusion_list)]\n\n    if exclusion_list:\n        df = df[~df[hue].isin(exclusion_list)]\n        \n    # Linear plot\n    sns.lineplot(x=x, y=y, hue=hue, data=df, ax=ax, marker=marker, alpha=alpha)\n    \n    title_text = f'{y} over time {x} by {hue}'\n    if exclusion_list is not None:\n        title_text += ' w\/o ' + ', '.join(exclusion_list)\n    ax.set_title(label=title_text)\n\n    return ax #plt.show()\n","7aa9a293":"df_temp = log_cases(df_country, groupby_cols=['date'])\nplot_simple_evolution(df_temp)\n\ntopNcountries = df_country.groupby('country').max().sort_values('cumulative_cases', ascending=False).index[offset:N+offset].values.tolist()\ntop5province = df_province.groupby('province').max().sort_values('cumulative_cases', ascending=False).index[:5].values.tolist()\n\ndf_country_temp = log_cases(df_country, input_col='cumulative_cases', output_col='log_cumulative_cases', groupby_cols=['date', 'country'])\ndf_province_temp = log_cases(df_province, input_col='cumulative_cases', output_col='log_cumulative_cases', groupby_cols=['date', 'province'])\n\n\n# Plots\nfig, ax = plt.subplots(figsize=(20,6), ncols=3)\nplot_evolution(ax=ax[1], df=df_country_temp, x='date', y='cumulative_cases', inclusion_list=topNcountries)\nplot_evolution(ax=ax[0], df=df_country_temp, x='date', y='cumulative_cases', inclusion_list=topNcountries, exclusion_list=['Mainland China'])\nplot_evolution(ax=ax[2], df=df_country_temp, x='date', y='log_cumulative_cases', inclusion_list=topNcountries)\nplt.suptitle('Countries')\nplt.show()\n\n\n# Plots\nfig, ax = plt.subplots(figsize=(12,6), ncols=2)\nplot_evolution(ax=ax[0], df=df_province_temp, x='date', y='cumulative_cases', hue='province', inclusion_list=top5province)\nplot_evolution(ax=ax[1], df=df_province_temp, x='date', y='log_cumulative_cases', hue='province', inclusion_list=top5province)\nplt.suptitle('Provinces')\nplt.show()","075347f3":"pop_data_path = r'..\/input\/historical-covid-cases\/population-figures-by-country-csv_csv.csv' # get a 403 forbidden error when trying to download directly from link; so needed to store it locally first\ndf_pop = pd.read_csv(pop_data_path)\ndf_pop['Country'] = df_pop['Country'].replace(['China', 'Korea, Rep.', 'United States', 'Iran, Islamic Rep.', 'United Kingdom'], ['Mainland China', 'South Korea', 'US', 'Iran', 'UK']) # Align naming of south korea\ndf_pop['population'] = df_pop['Year_2016']\ndf_pop = df_pop[['Country','population']]\n# We need to add a few regions manually by looking up the number on Google :-) \ndf_pop_added = pd.DataFrame([('Hubei', 60_000_000),\n                             ('Guangdong', 113_000_000),\n                             ('Henan', 94_000_000),\n                             ('Zhejiang ', 57_000_000),\n                             ('Hunan', 67_000_000),\n                             ('Hong Kong', 7_000_000),\n                             ('Taiwan', 23_780_000),\n                            ], columns=['Country', 'population'])\ndf_pop = df_pop.append(df_pop_added).reset_index(drop=True)","37f460fc":"df_country_pop = df_country.merge(df_pop[['Country', 'population']], left_on=['country'], right_on=['Country'])\ndf_province_pop = df_province.merge(df_pop[['Country', 'population']], left_on=['province'], right_on=['Country'])","a8dad864":"df_country_temp = adjusted_cases(df_country_pop, input_col='cumulative_cases', adjust_col='population', output_col='adj_cumulative_cases', factor=1_000_000)\ndf_province_temp = adjusted_cases(df_province_pop, input_col='cumulative_cases', adjust_col='population', output_col='adj_cumulative_cases', factor=1_000_000)\ndf_country_temp = log_cases(df_country_temp, input_col='adj_cumulative_cases', output_col='log_adj_cumulative_cases', groupby_cols=['date', 'country'])\ndf_province_temp = log_cases(df_province_temp, input_col='adj_cumulative_cases', output_col='log_adj_cumulative_cases', groupby_cols=['date', 'province'])\n","ea7e69e1":"df_country_temp[df_country_temp['country'].isin(topNcountries)].groupby('country').max().sort_values(by='adj_cumulative_cases', ascending=False)","efdd7e18":"# Plots\nfig, ax = plt.subplots(figsize=(20,6), ncols=3)\nplot_evolution(ax=ax[0], df=df_country_temp, x='date', y='adj_cumulative_cases', inclusion_list=topNcountries)\nplot_evolution(ax=ax[1], df=df_country_temp, x='date', y='adj_cumulative_cases', inclusion_list=topNcountries, exclusion_list=['Mainland China'])\nplot_evolution(ax=ax[2], df=df_country_temp, x='date', y='log_adj_cumulative_cases', inclusion_list=topNcountries)\nplt.suptitle('Countries')\nplt.show()\n\n# Plots\nfig, ax = plt.subplots(figsize=(12,6), ncols=2)\nplot_evolution(ax=ax[0], df=df_province_temp, x='date', y='adj_cumulative_cases', hue='province', inclusion_list=top5province)\nplot_evolution(ax=ax[1], df=df_province_temp, x='date', y='log_adj_cumulative_cases', hue='province', inclusion_list=top5province)\nplt.suptitle('Provinces')\nplt.show()","cc99ce01":"df_country_temp['ratio_infected'] = df_country_temp['cumulative_cases'] \/ df_country_temp['population']\nprint(f'Countries - Number of persons infected per {factor} capita')\nprint((df_country_temp.groupby('country')['ratio_infected'].max().sort_values(ascending=False) * factor).head(N))\n\ndf_province_temp['ratio_infected'] = df_province_temp['cumulative_cases'] \/ df_province_temp['population']\nprint(f'Provinces - Number of persons infected per {factor} capita')\nprint((df_province_temp.groupby('province')['ratio_infected'].max().sort_values(ascending=False) * factor))","7d517481":"# Countries - thresholds\nfirst_case_dates = df_country_temp[df_country_temp['cumulative_cases'] > 0].groupby('country')['date'].min().reset_index()\nfirst_m_cases_dates = df_country_temp[df_country_temp['cumulative_cases'] > M].groupby('country')['date'].min().reset_index()\nat_least_1_in_gamma_infected_dates = df_country_temp[gamma * df_country_temp['cumulative_cases'] > df_country_temp['population'] ].groupby('country')['date'].min().reset_index()\n# rename the columns \nfirst_case_dates = first_case_dates.rename(columns={'date': 'date_first_case'})\nfirst_m_cases_dates.rename(columns={'date': f'date_first_{M}_case'}, inplace=True)\nat_least_1_in_gamma_infected_dates.rename(columns={'date': f'date_1_in_{gamma}_infected'}, inplace=True)\n\n# Merge dates on the dataframe\ndf_country_temp = df_country_temp.merge(first_case_dates, how='left', on='country') \\\n                   .merge(first_m_cases_dates, how='left', on='country') \\\n                   .merge(at_least_1_in_gamma_infected_dates, how='left', on='country') \\\n                   #.merge(first_death_dates, how='left', on='country')\n\n\n#####\n\n#print('SOME EXAMPLES')\n#print('Date of first case')\n#print(first_case_dates[first_case_dates['country'].isin(topNcountries)])\n#print(f'First date where number of cases in country exceeded {M} infected people')\n#print(first_m_cases_dates[first_m_cases_dates['country'].isin(topNcountries)])\nprint(f'Date where at least 1 in {gamma} in the country was infected')\nprint(at_least_1_in_gamma_infected_dates[at_least_1_in_gamma_infected_dates['country'].isin(topNcountries)])\n#print(at_least_1_in_gamma_infected_dates[at_least_1_in_gamma_infected_dates['country'].isin(topNcountries)].reset_index(drop=True).to_markdown())\nprint(f'Number of contries with at least 1 in {gamma} persons infected.')\nprint(at_least_1_in_gamma_infected_dates.shape[0])\n\n\n###\n\n# Provinces - thresholds \nfirst_case_dates = df_province_temp[df_province_temp['cumulative_cases'] > 0].groupby('province')['date'].min().reset_index()\nfirst_m_cases_dates = df_province_temp[df_province_temp['cumulative_cases'] > M].groupby('province')['date'].min().reset_index()\nat_least_1_in_gamma_infected_dates = df_province_temp[gamma * df_province_temp['cumulative_cases'] > df_province_temp['population'] ].groupby('province')['date'].min().reset_index()\n# rename the columns \nfirst_case_dates = first_case_dates.rename(columns={'date': 'date_first_case'})\nfirst_m_cases_dates.rename(columns={'date': f'date_first_{M}_case'}, inplace=True)\nat_least_1_in_gamma_infected_dates.rename(columns={'date': f'date_1_in_{gamma}_infected'}, inplace=True)\n\n# Merge dates on the dataframe\ndf_province_temp = df_province_temp.merge(first_case_dates, how='left', on='province') \\\n                   .merge(first_m_cases_dates, how='left', on='province') \\\n                   .merge(at_least_1_in_gamma_infected_dates, how='left', on='province') \\\n                  \n","1bac6002":"starting_criteria = 'date_1_in_500000_infected' #  date_first_case\t date_first_50_case\tdate_1_in_1000000_infected\tdate_first_death\n\n# Countries\nmask = df_country_temp[starting_criteria].notnull()\ndf_country_in_scope = df_country_temp[mask]\ndf_country_in_scope = df_country_in_scope.assign(days=df_country_in_scope['date'] - df_country_in_scope[starting_criteria])\ndf_country_in_scope['days'] = df_country_in_scope['days'].apply(lambda x: x.days)\n#print(df_country_in_scope.columns, df_country_in_scope.shape)\n\n# Provinces\nmask = df_province_temp[starting_criteria].notnull()\ndf_province_in_scope = df_province_temp[mask]\ndf_province_in_scope = df_province_in_scope.assign(days=df_province_in_scope['date'] - df_province_in_scope[starting_criteria])\ndf_province_in_scope['days'] = df_province_in_scope['days'].apply(lambda x: x.days)\n#print(df_province_in_scope.columns, df_province_in_scope.shape)\n","316555b2":"# Prepare for plots\nfig, ax = plt.subplots(figsize=(12, 8), nrows=1)\nplot_evolution(ax=ax, df=df_country_in_scope[df_country_in_scope['days'] > -10], x='days', y='log_adj_cumulative_cases', hue='country', inclusion_list=topNcountries)\n#plot_evolution(ax=ax[1], df=df_province_in_scope[df_province_in_scope['days'] > -10], x='days', y='log_adj_cumulative_cases', hue='province', inclusion_list=top5province)\nplt.show()","7603c1e5":"#df_country_in_scope[df_country_in_scope['days'] == 0]","d2ab01f8":"df_in_scope = df_country_in_scope.append(df_province_in_scope.rename(columns={'province': 'country'}))\n\n#print(df_country_in_scope.country.unique())\n#print(df_province_in_scope.province.unique())\n#print(df_in_scope.country.unique())\n\n# plot\nfig, ax = plt.subplots(figsize=(12, 8), nrows=1)\nplot_evolution(ax=ax, df=df_in_scope[df_in_scope['days'] > -10], x='days', y='log_adj_cumulative_cases', hue='country', inclusion_list=topNcountries+top5province)\n\n# LOCKDOWNS\n# 23\/01\/2020 - China (Wuhan) - https:\/\/www.businessinsider.com\/transit-wuhan-china-shut-down-coronavirus-2020-1?r=US&IR=T\n# 08\/03\/2020 - Italy (Milan, Lombardia and more regions in Nothern Italy) - https:\/\/www.bloomberg.com\/news\/articles\/2020-03-07\/italy-to-impose-virtual-ban-on-entry-to-lombardy-corriere?srnd=premium-europehttps:\/\/www.bloomberg.com\/news\/articles\/2020-03-07\/italy-to-impose-virtual-ban-on-entry-to-lombardy-corriere?srnd=premium-europe\n\ndf_in_scope.loc[df_in_scope['country'] == 'China', 'lockdown'] = pd.to_datetime('23-01-2020', format='%d-%m-%Y')\ndf_in_scope.loc[df_in_scope['country'] == 'Hubei', 'lockdown'] = pd.to_datetime('23-01-2020', format='%d-%m-%Y')\ndf_in_scope.loc[df_in_scope['country'] == 'Italy', 'lockdown'] = pd.to_datetime('07-03-2020', format='%d-%m-%Y')\ndf_in_scope.loc[df_in_scope['country'] == 'China', 'lockdown_text'] = 'Hubei\/Wuhan lockdown'\ndf_in_scope.loc[df_in_scope['country'] == 'Hubei', 'lockdown_text'] = 'Hubei\/Wuhan lockdown'\ndf_in_scope.loc[df_in_scope['country'] == 'Italy', 'lockdown_text'] = 'Northern Italy lockdown'\nlockdowns = df_in_scope[df_in_scope['date'] == df_in_scope['lockdown']]\n#print(lockdowns)\n\nsns.regplot(x='days', y='log_adj_cumulative_cases', data=lockdowns, ax=ax, fit_reg=False, color='red', marker='^')\nfor index, row in lockdowns.iterrows():\n    ax.annotate('<-' + row['lockdown_text'], (row['days']+0.5, row['log_adj_cumulative_cases']-0.1))\n\n\n\n\nplt.show()","58c63345":"# Load main dataset data","bc686ffe":"# Populations adjusted timeseries","631edc4e":"# Parameters","0c3cf60b":"After re-adjusting the time-series we can plot the time-series again with the above definition of day \"0\".","e2a80adb":"Now we can adjust the starting point of each timeseries by the \"starting criteria\" above.","05c427e0":"# Introduction","d953bff8":"Next we can to a log-transformation of the number of cases, and further we can plot the evolution of cases by country (top 10) and Chinese provinces (top 5).","dc4910fe":"\"There is a striking similarity in the evolution of log-population-normalized cases between Hubei and Italy, Iran and up until recently South Korea. But if we take a look a tad earlier on the graph it also seems that France, Germany and Spain might be, at least for now, on a similar path. France, Germany and Spain are all around day \"6\" right now whereas Italy has reached day \"14\". Can we expect to see similar measures in France, Germany and Spain as those taken in Italy if a similar density of coronavirus is reached or exceeded in those countries? If the growth continues with the same speed as Italy then that might happen in about a week or so.\"\n\n---\n\nThe full analysis of the results can be read in this article:\n* https:\/\/www.linkedin.com\/pulse\/covid-19-next-lockdown-goes-nicolaj-schmit\/?trackingId=LYcZqVdhRSum9YPUJcGiOA%3D%3D","dae11fe6":"# Imports","c09fcc8e":"Next up we can have a look at the evolution over time at an aggregate level:","c6c45667":"# Summary statistics","b2434f00":"The purpose of this notebook is to analyse the time series of the covid-19 outbreak for each country. In the notebook we will have a quick look at the overall evolution of cases and then work our way towards normalising and adjusting the time series to make them comparable across countries. The analysis consists of two main components: \n* Normalizing the time series of each country by population and splitting China into some of it's regions.\n* Realigning the timeseries by setting the time \"0\" of each time series to be the day which is the answer to the following question: Which day was the first day that at least 1 in 500.000 in the given country\/province was infected with the coronavirus?\n\nThe main result in this notebook is the final graph showing a log-normalized population and timeline-adjusted for the 8 countries with the most coronavirus cases as of 9. March 2020 plotted along with four of the five Chinese provinces with the most coronavirus cases.\n\n---\nThe full analysis of the results can be read in this article:\n* https:\/\/www.linkedin.com\/pulse\/covid-19-next-lockdown-goes-nicolaj-schmit\/?trackingId=LYcZqVdhRSum9YPUJcGiOA%3D%3D","82d15376":"Having adjusted for population we can plot the updated time-series:","50e98de1":"Now we have enrichmentdata available for Hubei and on a country level we enrich the John Hopkins coronavirus dataset","8157b632":"And the list of countries with the most cases are:","ffbe6894":"# Helper functions","b29f3344":"# Country og province evolution","a874f94e":"Having joined the data let's have a quick look at the total number of cases","7fdf65c5":"# Analysis and lockdowns","b98d6523":"# Enrichment of data","09c35bb8":"Now stack the provinces into the same dataframe as countries, assuming the provinces are \"countries themselves\". In addition we add the Wuhan lockdown and the Northern Italy lockdown dates to the plot.","072e8c3b":"# Re-aligning the timeseries","ac966e29":"Having loaded the populations, we now adjust the coronavirus timeseries with the population of the country\/province","d71dbba1":"We will now work towards realigning the time series by setting day \"0\" for each country in the following way::\n        \nThe timeseries are realigned by setting the time \"0\" of each time series to be the day which is the answer to the following question: Which day was the first day that at least 1 in 500.000 in the given country\/province was infected with the coronavirus?","9244845d":"We will also be interested in the evolution in cases in the affected areas in China. Before the 2020-01-20 only Hubei had a significant amount; we will make a rough estimate that 80% of all registered cases in China during that period was registered in Hubei.","f733e3bb":"To make the graphs more comparable we will normalize the number of corona cases in a given country\/province by normalizing with the population of the country\/province. The data set used for population size as of 2016 can be found here: https:\/\/datahub.io\/JohnSnowLabs\/population-figures-by-country#resource-population-figures-by-country-csv","116560b2":"The countries with the highest ratio of infected populations are:","f6e29009":"The data set used to enrich goes all the way back to the beginning, i.e. last day of 2019","602dba93":"|    | country        | date_1_in_500000_infected   |\n|---:|:---------------|:----------------------------|\n|  0 | France         | 2020-03-02 00:00:00         |\n|  1 | Germany        | 2020-03-03 00:00:00         |\n|  2 | Iran           | 2020-02-27 00:00:00         |\n|  3 | Italy          | 2020-02-23 00:00:00         |\n|  4 | Japan          | 2020-03-01 00:00:00         |\n|  5 | Mainland China | 2020-01-27 00:00:00         |\n|  6 | South Korea    | 2020-02-20 00:00:00         |\n|  7 | Spain          | 2020-03-02 00:00:00         |\n","92b3a864":"The population adjusted and the log-population adjusted number are given below:","2507d7ab":"Provinces with most cases","b4a486a3":"The first date available in the John Hopkins University data set is 2020-01-22. Hence, we will enrich the dataset with data from European Centre for Disease Prevention and Control (https:\/\/www.ecdc.europa.eu\/en\/geographical-distribution-2019-ncov-cases)"}}