{"cell_type":{"2797ace6":"code","abd9c922":"code","c1b2fc15":"code","9cc70667":"code","1a7dd6f4":"code","86a79bcd":"code","43f7e746":"code","e4e4dda7":"code","9d19694d":"code","6cde8f5c":"code","649e71b2":"code","4b3f1922":"code","6d7ea1f2":"code","cbfa851e":"markdown","b4259d19":"markdown","f4d6e9fb":"markdown","e5818f86":"markdown","a9f81860":"markdown","e78bbba2":"markdown","3abaa3a5":"markdown","06d25f9d":"markdown","5704c2d6":"markdown","bb6fa469":"markdown","9dbd457a":"markdown","3874689d":"markdown"},"source":{"2797ace6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","abd9c922":"dataset = pd.read_csv(\"..\/input\/train.csv\")\n\ndataset.head()","c1b2fc15":"dataset.Sex = dataset.Sex.replace(\"female\", 0)\ndataset.Sex = dataset.Sex.replace(\"male\", 1)","9cc70667":"y = dataset.Survived\n\nfeatures = [\"Sex\", \"Age\", \"Parch\", \"SibSp\"]\nX = dataset[features]","1a7dd6f4":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X, y, random_state = 0)","86a79bcd":"from sklearn.pipeline import Pipeline\nfrom xgboost import XGBRegressor\n\nmy_model = XGBRegressor(n_estimators = 1000, learning_rate = 0.01)\n\nmy_pipeline = Pipeline(steps=[\n    (\"model\", my_model)\n])","43f7e746":"my_pipeline.fit(X_tr, y_tr, model__early_stopping_rounds = 10, model__eval_set = [(X_val, y_val)], model__verbose = False)\n\npreds = my_pipeline.predict(X_val)","e4e4dda7":"from sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(y_val, preds)","9d19694d":"dataset2 = pd.read_csv(\"..\/input\/test.csv\")\n\ndataset2.Sex = dataset2.Sex.replace(\"female\", 0)\ndataset2.Sex = dataset2.Sex.replace(\"male\", 1)\n\nX = dataset2[features]\n\npreds2 = my_pipeline.predict(X)","6cde8f5c":"survivors  = pd.Series(preds2, name = \"Survived\")\n\nsurvivors.head()","649e71b2":"def is_alive(x):\n    if x > 0.5:\n        return 1\n    else:\n        return 0\n\nsurvivors = survivors.map(lambda x: is_alive(x))\n\nsurvivors.head()","4b3f1922":"submission = dataset2.PassengerId.to_frame().join(survivors)\nsubmission.describe()","6d7ea1f2":"submission.to_csv('submission.csv', index=False)","cbfa851e":"Combining PassengerId and prediction values into dataframe.","b4259d19":"Creating Series with prediction values.","f4d6e9fb":"Splitting data.","e5818f86":"Importing test data, preprocessing it and making prediction.","a9f81860":"Changing prediction values to 0 or 1, based on which one of them they are closer to. ","e78bbba2":"Fitting model and making prediction.","3abaa3a5":"Defining model and pipeline. Using small learning rate, because of small dataset.","06d25f9d":"This is code from 3rd commit, which gave me best result. I tried diffrent attempts in later versions, but couldn't get my score any higher. \n\nI will probably create a new kernel for this competition once I get better.","5704c2d6":"Selecting features (kinda randomly).","bb6fa469":"Validation.","9dbd457a":"Preprocessing \"Sex\" column.","3874689d":"Making submission."}}