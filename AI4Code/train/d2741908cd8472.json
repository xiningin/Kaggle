{"cell_type":{"6c2cd049":"code","85ea7046":"code","bf35817a":"code","7ba19af1":"code","4c544218":"code","dc92a65e":"code","8c59879a":"code","1c858a31":"code","7b4b4af4":"code","9f2a4833":"code","4876852e":"code","6f463342":"code","80e458c3":"code","617e66d9":"code","6406e844":"code","9931ad35":"code","263f7c5d":"code","79c60c7b":"markdown","e5209e47":"markdown","7df86e6d":"markdown","e313ea72":"markdown","301fad45":"markdown","a23f8768":"markdown"},"source":{"6c2cd049":"from IPython.display import Image\nprint(\"[Source: https:\/\/www.eweek.com\/enterprise-apps\/organizations-need-to-be-prepared-for-quantum-computing-threats]\")\nImage(\"..\/input\/quantumimage\/grover_list.jpg\")","85ea7046":"# installing necessary pakages\n\n!pip install qiskit # Quantum Qiskit Library\n!pip install pylatexenc # Quantum circuit visualization library. More info: https:\/\/github.com\/phfaist\/pylatexenc","bf35817a":"# declaring list which we will use as database for search. There are 13 elements.\n\nmy_list=[1,2,3,5,9,11,15,18,44,66,34,7,98]\n# my_list=[1,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,,2,3,5,9,11,15,18,44,66,34,98,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,34,2,3,5,9,11,15,18,44,66,7,34]\n# We will search 7 in the example belo","7ba19af1":"# function to search\ndef the_oracle(my_input):\n    winner=7\n    if my_input is winner:\n        response = True\n    else:\n        response = False\n    return response","4c544218":"for index, trial_number in enumerate(my_list):\n    if the_oracle(trial_number) is True:\n        print('Winner found at index %i' %index)\n        print('%i calls to the oracle used' %(index+1))\n        break","dc92a65e":"# importing libraries\n\nfrom qiskit import *\nfrom qiskit.visualization import *\nfrom qiskit.tools.monitor import *\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n%matplotlib inline","8c59879a":"# define the oracle circuit\n\noracle = QuantumCircuit(2,name='oracle')\noracle.cz(0,1)\noracle.to_gate()\noracle.draw(output='mpl')\n","1c858a31":"# creating Grover's circiut\n\n# creating backend\nbackend = Aer.get_backend('statevector_simulator')\n\n# creating Grover's circuit with 2 quantum and 2 classical bit\ngrover_circ = QuantumCircuit(2,2)\n\n# applying Hadamard gate on both the quit of Grover's circuit\ngrover_circ.h([0,1])\n\n# appending circuit\ngrover_circ.append(oracle,[0,1])\n\n# drawing the Grover's circuit\ngrover_circ.draw(output='mpl')","7b4b4af4":"# creating job for Grover's circuit\n\njob = execute(grover_circ,backend)\nresult = job.result()\nprint(result)","9f2a4833":"# getting state vector and rouding all the element of the array\n\nsv = result.get_statevector()\nnp.around(sv,2)","4876852e":"# creating reflection circuit\n\nreflection = QuantumCircuit(2,name='reflection')\nreflection.h([0,1])\nreflection.z([0,1])\nreflection.cz(0,1)\nreflection.h([0,1])\nreflection.to_gate()\nreflection.draw(output='mpl')","6f463342":"# appending Reflection circuit to Grover's circuit\n\ngrover_circ.append(reflection,[0,1])\ngrover_circ.measure([0,1],[0,1])\ngrover_circ.draw(output='mpl')","80e458c3":"# executing the Grover's circuit for the search on statevector_simulator\n\njob=execute(grover_circ,backend,shots=1)\nresult=job.result()\ncounts=result.get_counts()\n\nprint(counts)\n\n# shwoing counts on graphs\nplot_histogram(counts)","617e66d9":"# we will run this circuit on actual quantum computer available at IBM\n\n# Connecting to the real quantum computers\nfrom qiskit import IBMQ\n\n# provider = IBMQ.load_account() # We load our account \n\nIBMQ.save_account('d86d309ce2f1cee1177b9ae1455a4445ec6c02578154623d71c75db323329ffbb7226ab6b6fc24e0aee77b8f5119e2c622d3e8591fcb98cff17ad52dadda472b',overwrite=True)  #save your creds\nIBMQ.load_account()\n\nprovider = IBMQ.get_provider() # We load our account \nprovider.backends() # We retrieve the backends to check their status\n\nfor b in provider.backends():\n    print(b.status().to_dict())","6406e844":"# Executing on the IBMQ Experience simulator: ibmq_qasm_simulator\n\n# seleting backend\nbackend_qasm = provider.get_backend('ibmq_qasm_simulator')\n\n# executing the Grover's circuit for the search; we will run circuit for Once and we will get result in 11 state\njob=execute(grover_circ,backend_qasm,shots=1)\nresult=job.result()\ncounts=result.get_counts()\n\nprint(\"We only used %s call to the Oracle to find our result. Here '11' is the state and '1' is the count.\" % (counts))\n\n# shwoing counts on graphs\nplot_histogram(counts)","9931ad35":"# Executing on actual Quantum machine at: ibmq_santiago\n\n# selecting backend. We have selected IBMQ machine: ibmq_quito\nbackend_Santiago = provider.get_backend('ibmq_quito') # selecting ibmq_quito machine as backend\n\n# executing the Grover's circuit for the search; we will run circuit for Once and we will get result in 11 state\njob=execute(grover_circ,backend_Santiago,shots=1)\nresult=job.result()\ncounts=result.get_counts()\n\nprint(\"We only used %s call to the Oracle to find our result. Here '11' is the state and '1' is the count.\" % (counts))\n\n# shwoing counts on graphs\nplot_histogram(counts)","263f7c5d":"print(\"Notebook completed!\")","79c60c7b":"# Quantum Computing: Grover's Algorithm\n\nIn this notebook, I have tried explain implementing Grover's Search Algorithm using Qiskit. It is quantum algorithm deviced in 1996. It searches unsorted database. It searches from N number of element in root(N) evaluations using Oracle. Oracle is a black box where you can pass queries to it and get the answers from it.\n\nYou have likely heard that one of the many advantages a quantum computer has over a classical computer is its superior speed searching databases. Grover's algorithm demonstrates this capability. This algorithm can speed up an unstructured search problem quadratically, but its uses extend beyond that; it can serve as a general trick or subroutine to obtain quadratic run time improvements for a variety of other algorithms. This is called the amplitude amplification trick.\n\n[Source: https:\/\/qiskit.org\/textbook\/ch-algorithms\/grover.html]\n\nGrover's serch algorithm solves the problem of an untructured search. When there is N number of possible input values, the classical algorithm requries O(N) evaluations while the Grover's algorithm requires roughly O($\\sqrt{N}$) evaluations. The algorithm can be considered generic as it does not use list's internal structure which gives a quadratic speed. The algorithm consists of the following steps:\n\n1. Initialization of the qubits in the \u22230\u27e9 state \n1. Uniform Superposition of all basis inputs\n1. Execution of the Oracle\n1. Application of Grover's diffusion operator (inversion about the mean)\n1. Repetitions of step 3 and 4\n1. Measurement","e5209e47":"## Executing circuit on ibmq_qasm_simulator","7df86e6d":"# Executing Circuit on actual IBM Computer","e313ea72":"## Executing circuit on actual Quantum machine at ibmq_quito","301fad45":"**References:**\n1. https:\/\/qiskit.org\/textbook\/ch-algorithms\/grover.html\n1. https:\/\/www.quantum-inspire.com\/kbase\/grover-algorithm\/\n1. https:\/\/www.youtube.com\/watch?v=EoH3JeqA55A\n1. https:\/\/www.youtube.com\/watch?v=0RPFWZj7Jm0\n1. https:\/\/www.youtube.com\/watch?v=hK6BBluTGhU","a23f8768":"# Executing circuit on statevector_simulator"}}