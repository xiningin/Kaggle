{"cell_type":{"77aa4044":"code","28a3b291":"code","804824d1":"code","58da2cea":"code","6d9bb6dc":"code","eb225f8f":"code","5ed8ca75":"code","bdfaeba4":"code","91018ca8":"code","5b1f0ed2":"code","2f08dc9e":"code","27142fe0":"code","d5f4c0c1":"code","2f642770":"code","1f21750f":"code","9ddfc230":"code","54b6563d":"code","31b2e85d":"code","73169637":"code","d24c2c34":"code","ec24b305":"code","b10ab210":"code","a2fd4d8b":"code","5a4024f7":"code","595275e5":"code","bfdcd31b":"code","1983a007":"code","9274c261":"code","160bd80c":"code","6b007601":"code","9f13662b":"code","6c2aa584":"code","e0226bed":"code","e050c996":"code","24fa24e9":"markdown"},"source":{"77aa4044":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","28a3b291":"df = pd.read_csv('..\/input\/train.csv')","804824d1":"type(df)","58da2cea":"df.head(2)","6d9bb6dc":"df.shape","eb225f8f":"df.shape[0]","5ed8ca75":"df.columns","bdfaeba4":"df.describe()","91018ca8":"df['Age'].describe()","5b1f0ed2":"df['Age'] > 10","2f08dc9e":"children = df['Age'] <= 10\nchildren.sum()","27142fe0":"df['Age'].plot.hist()","d5f4c0c1":"df['Fare'].plot.hist(bins=50)","2f642770":"df['Survived'].value_counts()","1f21750f":"df['Embarked'].value_counts()","9ddfc230":"df['Pclass'].value_counts()","54b6563d":"class_count = df['Pclass'].value_counts()\ngraph = class_count.plot.pie()","31b2e85d":"survived_count = df['Survived'].value_counts()\ngraph = survived_count.plot.bar()","73169637":"filter_by_survived = df['Survived'] == 1 \n#filter_by_survived.head()","d24c2c34":"filtered_df = df[filter_by_survived]\n#filtered_df.head()","ec24b305":"class_count = filtered_df['Pclass'].value_counts()\ngraph = class_count.sort_index().plot.bar()","b10ab210":"class_count.sort_index()","a2fd4d8b":"df['Sex'].value_counts()","5a4024f7":"314\/(577+314)","595275e5":"sex_count = filtered_df['Sex'].value_counts()\ngraph = sex_count.plot.bar()","bfdcd31b":"def age_to_ageclass(age):\n    if age <= 10:\n        return 'child'\n    if age <= 45:\n        return 'adult'\n    else:\n        return 'elderly'","1983a007":"df['Age'].fillna(df['Age'].mean(), inplace=True)","9274c261":"df['Ageclass'] = df['Age'].apply(age_to_ageclass)","160bd80c":"df.head(10)","6b007601":"filtered_df = df[filter_by_survived]","9f13662b":"age_count = filtered_df['Ageclass'].value_counts()\ngraph = age_count.plot.bar()","6c2aa584":"grouped = df.groupby(['Pclass', 'Survived']).size().unstack()","e0226bed":"import seaborn ","e050c996":"seaborn.heatmap(grouped, cmap='bone_r')","24fa24e9":"This is awesome"}}