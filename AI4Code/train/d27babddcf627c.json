{"cell_type":{"7ef50ef2":"code","00a9137a":"code","ee7192bf":"code","c7620e12":"code","55f826b9":"code","49d26db0":"code","e49fbf30":"code","d99e670b":"markdown","57210f6d":"markdown"},"source":{"7ef50ef2":"import re\nimport os\nimport numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n\ndef list_dataset():\n    for dirname, _, filenames in os.walk('\/kaggle\/input'):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n\n            \n# Add class name prefix to each path based on class name include in filename\ndef add_class_name_prefix(df, col_name):\n    df[col_name] = df[col_name].apply(lambda x: x[:re.search(\"\\d\",x).start()] + '\/' + x)\n    return df\n\n\ndef class_id_to_label(id):\n    label_map = {1: 'glass', 2: 'paper', 3: 'cardboard', 4: 'plastic', 5: 'metal', 6: 'trash'}\n    return label_map[id]\n    \n\nIMAGES_DIR = '\/kaggle\/input\/garbage-classification\/Garbage classification\/Garbage classification\/'\n    \ntrain_file = '\/kaggle\/input\/garbage-classification\/one-indexed-files-notrash_train.txt'\nval_file   = '\/kaggle\/input\/garbage-classification\/one-indexed-files-notrash_val.txt'\ntest_file  = '\/kaggle\/input\/garbage-classification\/one-indexed-files-notrash_test.txt'\n\ndf_train = pd.read_csv(train_file, sep=' ', header=None, names=['rel_path', 'label'])\ndf_valid = pd.read_csv(val_file,   sep=' ', header=None, names=['rel_path', 'label'])\ndf_test  = pd.read_csv(val_file,   sep=' ', header=None, names=['rel_path', 'label'])\n\ndf_train = add_class_name_prefix(df_train, 'rel_path')\ndf_valid = add_class_name_prefix(df_valid, 'rel_path')\ndf_test  = add_class_name_prefix(df_test,  'rel_path')\n\ndf_train['label'] = df_train['label'].apply(class_id_to_label)\ndf_valid['label'] = df_valid['label'].apply(class_id_to_label)\ndf_test['label']  = df_test['label'].apply(class_id_to_label)\n\nprint(f'Found {len(df_train)} training, {len(df_valid)} validation and {len(df_test)} samples.')","00a9137a":"df_train.head()","ee7192bf":"datagen = ImageDataGenerator()\n\ndatagen_train = datagen.flow_from_dataframe(\n    dataframe=df_train,\n    directory=IMAGES_DIR,\n    x_col='rel_path',\n    y_col='label',\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=32,\n    shuffle=True,\n    seed=7,\n)\n\ndatagen_valid = datagen.flow_from_dataframe(\n    dataframe=df_valid,\n    directory=IMAGES_DIR,\n    x_col='rel_path',\n    y_col='label',\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=32,\n    shuffle=True,\n    seed=7,\n)","c7620e12":"def build_model(num_classes):\n    base_model = ResNet50(weights='imagenet', include_top=False)\n\n    x = base_model.output\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n    x = tf.keras.layers.Dense(1024, activation='relu')(x)\n    predictions = tf.keras.layers.Dense(num_classes, activation='softmax')(x)\n\n    model = tf.keras.Model(inputs=base_model.input, outputs=predictions)\n\n    for layer in base_model.layers:\n        layer.trainable = False\n        \n    return model\n\n\nnet = build_model(num_classes=6)\n\nnet.compile(optimizer='Adam',\n            loss='categorical_crossentropy',\n            metrics=[tf.keras.metrics.categorical_accuracy])\n\nnet.summary()","55f826b9":"early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, verbose=1, restore_best_weights=True)\n\nhistory = net.fit_generator(\n    generator=datagen_train,\n    validation_data=datagen_valid,\n    epochs=30,\n    validation_freq=1,\n    callbacks=[early_stop]\n)","49d26db0":"import matplotlib.pyplot as plt\n\nfig, axs = plt.subplots(nrows=1, ncols=2, figsize=(20, 4))\n\naxs[0].plot(history.history['loss'], label='loss')\naxs[0].plot(history.history['val_loss'], label='val_loss')\n\naxs[1].plot(history.history['categorical_accuracy'], label='acc')\naxs[1].plot(history.history['val_categorical_accuracy'], label='val_acc')\n\nplt.legend();\nplt.show();","e49fbf30":"test_generator = datagen.flow_from_dataframe(\n    dataframe=df_test,\n    directory=IMAGES_DIR,\n    x_col='rel_path',\n    y_col='label',\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=1,\n    shuffle=False,\n    seed=7\n)\n\n# y_pred = net.predict(test_generator, batch_size=None, verbose=0, steps=None, callbacks=None, max_queue_size=10, workers=1, use_multiprocessing=False)\n\nfilenames = test_generator.filenames\nnb_samples = len(filenames)\n\nnet.evaluate_generator(test_generator, nb_samples)","d99e670b":"## Training","57210f6d":"## Model"}}