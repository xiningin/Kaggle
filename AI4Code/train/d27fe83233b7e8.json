{"cell_type":{"a3c3d19a":"code","bd6ab605":"code","88bb0e84":"code","31b82626":"code","a2433e55":"code","122764d7":"code","47341d2b":"code","c54bf623":"code","87417c3e":"code","c45ff123":"code","dbb0e108":"markdown","8e313c03":"markdown"},"source":{"a3c3d19a":"import numpy as np\n\ndef remove_overlapping_pixels(mask, other_mask):\n    if np.sum(np.logical_and(mask, other_mask)) > 0:\n        mask[np.logical_and(mask, other_mask)] = 0\n    return mask","bd6ab605":"import matplotlib.pyplot as plt\n\nm1 = np.zeros((520, 704))\nm1[100:200, 100:200] = 1\nplt.imshow(m1);","88bb0e84":"m2 = np.zeros((520, 704))\nm2[180:280, 180:280] = 1\nplt.imshow(m2);","31b82626":"plt.imshow(m1)\nplt.imshow(m2, alpha=0.5)\nplt.show()","a2433e55":"plt.imshow(m1[170:210, 170:210])\nplt.imshow(m2[170:210, 170:210], alpha=0.5)\nplt.show()","122764d7":"m1_clean = remove_overlapping_pixels(m1, m2)","47341d2b":"plt.imshow(m1_clean);","c54bf623":"plt.imshow(m2);","87417c3e":"plt.imshow(m1_clean)\nplt.imshow(m2, alpha=0.5)\nplt.show();","c45ff123":"plt.imshow(m1_clean[170:210, 170:210])\nplt.imshow(m2[170:210, 170:210], alpha=0.5)\nplt.show();","dbb0e108":"## Usage demonstration","8e313c03":"# Simple overlap-removing function\n\nHello community,\n\nBelow you can find a 3-line overlap-removing function. \nIt takes two 2D numpy arrays as arguments and returns the first one (`mask`) with all the pixeles that overlapped with the second parameter (`other_mask`) removed.\n\n\nIt is just a modified version of the one used in the kernel [\ud83e\udda0 Sartorius - Starter Torch Mask R-CNN [LB=0.056]](https:\/\/www.kaggle.com\/julian3833\/sartorius-starter-torch-mask-r-cnn-lb-0-056).\n\n\nPlease **do upvote** if you find this useful."}}