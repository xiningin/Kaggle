{"cell_type":{"c8c53527":"code","8cffd627":"code","d3b83716":"code","9ff5b075":"code","80af92e3":"code","d1369bd2":"code","cf7093be":"code","b8f3ef62":"code","4be98264":"code","af46d228":"code","46c0485e":"code","74e50a86":"code","e0b9216e":"code","0aab62e9":"code","69b306d5":"code","315f09a9":"code","fbc66d04":"code","dc6d2d91":"code","6bdc8221":"code","943dca29":"code","935bc452":"code","4490f154":"markdown","3033aae3":"markdown","746c5a4a":"markdown","3a6d14b0":"markdown","b4d78bd5":"markdown","eec7afe6":"markdown","0335f605":"markdown","d09266c1":"markdown","80c790c2":"markdown"},"source":{"c8c53527":"## Settings:\n    \n# some config values \nembed_size = 300 # how big is each word vector\nmax_features = 50000 # how many unique words to use (i.e num rows in embedding vector)\nmaxlen = 100 # max number of words in a question to use\n\nS_DROPOUT = 0.4\nDROPOUT = 0.1","8cffd627":"import os\nimport time\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nimport gc\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation, CuDNNGRU, Conv1D, CuDNNLSTM, concatenate\nfrom keras.layers import Bidirectional, GlobalMaxPool1D, Dropout, SpatialDropout1D, GlobalAveragePooling1D, GlobalMaxPooling1D\nfrom keras.models import Model\nfrom keras import initializers, regularizers, constraints, optimizers, layers","d3b83716":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"Train shape : \",train_df.shape)\nprint(\"Test shape : \",test_df.shape)","9ff5b075":"## split to train and val\ntrain_df, val_df = train_test_split(train_df, test_size=0.1, random_state=2018)\n\n## fill up the missing values\ntrain_X = train_df[\"question_text\"].fillna(\"_na_\").values\nval_X = val_df[\"question_text\"].fillna(\"_na_\").values\ntest_X = test_df[\"question_text\"].fillna(\"_na_\").values\n\n## Tokenize the sentences\ntokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(train_X))\ntrain_X = tokenizer.texts_to_sequences(train_X)\nval_X = tokenizer.texts_to_sequences(val_X)\ntest_X = tokenizer.texts_to_sequences(test_X)\n\n## Pad the sentences \ntrain_X = pad_sequences(train_X, maxlen=maxlen)\nval_X = pad_sequences(val_X, maxlen=maxlen)\ntest_X = pad_sequences(test_X, maxlen=maxlen)\n\n## Get the target values\ntrain_y = train_df['target'].values\nval_y = val_df['target'].values","80af92e3":"EMBEDDING_FILE = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE))\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix_1 = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix_1[i] = embedding_vector\n\ndel embeddings_index; gc.collect() ","d1369bd2":"EMBEDDING_FILE = '..\/input\/embeddings\/wiki-news-300d-1M\/wiki-news-300d-1M.vec'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE) if len(o)>100)\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix_2 = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix_2[i] = embedding_vector\n        \ndel embeddings_index; gc.collect()         ","cf7093be":"EMBEDDING_FILE = '..\/input\/embeddings\/paragram_300_sl999\/paragram_300_sl999.txt'\ndef get_coefs(word,*arr): return word, np.asarray(arr, dtype='float32')\nembeddings_index = dict(get_coefs(*o.split(\" \")) for o in open(EMBEDDING_FILE, encoding=\"utf8\", errors='ignore') if len(o)>100)\n\nall_embs = np.stack(embeddings_index.values())\nemb_mean,emb_std = all_embs.mean(), all_embs.std()\nembed_size = all_embs.shape[1]\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix_3 = np.random.normal(emb_mean, emb_std, (nb_words, embed_size))\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None: embedding_matrix_3[i] = embedding_vector\n\ndel embeddings_index; gc.collect()         ","b8f3ef62":"# https:\/\/www.kaggle.com\/strideradu\/word2vec-and-gensim-go-go-go\nfrom gensim.models import KeyedVectors\n\nEMBEDDING_FILE = '..\/input\/embeddings\/GoogleNews-vectors-negative300\/GoogleNews-vectors-negative300.bin'\nembeddings_index = KeyedVectors.load_word2vec_format(EMBEDDING_FILE, binary=True)\n\nword_index = tokenizer.word_index\nnb_words = min(max_features, len(word_index))\nembedding_matrix_4 = (np.random.rand(nb_words, embed_size) - 0.5) \/ 5.0\nfor word, i in word_index.items():\n    if i >= max_features: continue\n    if word in embeddings_index:\n        embedding_vector = embeddings_index.get_vector(word)\n        embedding_matrix_4[i] = embedding_vector\n        \ndel embeddings_index; gc.collect()         ","4be98264":"embedding_matrix = np.concatenate((embedding_matrix_1, embedding_matrix_2, embedding_matrix_3, embedding_matrix_4), axis=1)  \ndel embedding_matrix_1, embedding_matrix_2, embedding_matrix_3, embedding_matrix_4\ngc.collect()\nnp.shape(embedding_matrix)","af46d228":"# https:\/\/www.kaggle.com\/sudalairajkumar\/a-look-at-different-embeddings\n# https:\/\/www.kaggle.com\/strideradu\/word2vec-and-gensim-go-go-go\n\ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size * 4, weights=[embedding_matrix])(inp)\nx = SpatialDropout1D(S_DROPOUT)(x)\nx = Bidirectional(CuDNNGRU(128, return_sequences=True))(x)\navg_pool = GlobalAveragePooling1D()(x)\nmax_pool = GlobalMaxPooling1D()(x)\nconc = concatenate([avg_pool, max_pool])\nx = Dense(16, activation=\"relu\")(conc)\nx = Dropout(DROPOUT)(x)\nx = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","46c0485e":"model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","74e50a86":"pred_val_lstm_y = model.predict([val_X], batch_size=1024, verbose=1)","e0b9216e":"pred_test_lstm_y = model.predict([test_X], batch_size=1024, verbose=1)","0aab62e9":"del all_embs, model, inp, x\nimport gc; gc.collect()\ntime.sleep(10)","69b306d5":"# https:\/\/www.kaggle.com\/yekenot\/2dcnn-textclassifier\nfrom keras.layers import Input, Embedding, Dense, Conv2D, MaxPool2D\nfrom keras.layers import Reshape, Flatten, Concatenate, Dropout, SpatialDropout1D\n\nfilter_sizes = [1,2,3,5]\nnum_filters = 36\n\ninp = Input(shape=(maxlen,))\nx = Embedding(max_features, embed_size * 4, weights=[embedding_matrix])(inp)\nx = SpatialDropout1D(S_DROPOUT)(x)\nx = Reshape((maxlen, embed_size * 4, 1))(x)\n\nmaxpool_pool = []\nfor i in range(len(filter_sizes)):\n    conv = Conv2D(num_filters, kernel_size=(filter_sizes[i], embed_size * 4),\n                                 kernel_initializer='he_normal', activation='elu')(x)\n    maxpool_pool.append(MaxPool2D(pool_size=(maxlen - filter_sizes[i] + 1, 1))(conv))\n\nz = Concatenate(axis=1)(maxpool_pool)   \nz = Flatten()(z)\nz = Dropout(DROPOUT)(z)\n\noutp = Dense(1, activation=\"sigmoid\")(z)\n\nmodel = Model(inputs=inp, outputs=outp)\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","315f09a9":"model.fit(train_X, train_y, batch_size=512, epochs=2, validation_data=(val_X, val_y))","fbc66d04":"pred_val_cnn_y = model.predict([val_X], batch_size=1024, verbose=1)","dc6d2d91":"pred_test_cnn_y = model.predict([test_X], batch_size=1024, verbose=1)","6bdc8221":"# del word_index, embedding_matrix, model, inp, x\nimport gc; gc.collect()\ntime.sleep(10)","943dca29":"pred_val_y = 0.6 * pred_val_lstm_y + 0.4 * pred_val_cnn_y  # two random numbers :)\npred_test_y = 0.6 * pred_test_lstm_y + 0.4 * pred_test_cnn_y \n\nthresholds = []\nfor thresh in np.arange(0.1, 0.501, 0.01):\n    thresh = np.round(thresh, 2)\n    res = metrics.f1_score(val_y, (pred_val_y > thresh).astype(int))\n    thresholds.append([thresh, res])\n    print(\"F1 score at threshold {0} is {1}\".format(thresh, res))\n    \nthresholds.sort(key=lambda x: x[1], reverse=True)\nbest_thresh = thresholds[0][0]\nprint(\"Best threshold: \", best_thresh)","935bc452":"pred_test_y = (pred_test_y > best_thresh).astype(int)\nout_df = pd.DataFrame({\"qid\":test_df[\"qid\"].values})\nout_df['prediction'] = pred_test_y\nout_df.to_csv(\"submission.csv\", index=False)","4490f154":"**LSTM:**","3033aae3":"**References:**\n\n1. https:\/\/www.kaggle.com\/jhoward\/improved-lstm-baseline-glove-dropout","746c5a4a":"**Word2vec Embeddings:**","3a6d14b0":"**Wiki News FastText Embeddings:**","b4d78bd5":"**Glove Embeddings:**","eec7afe6":"**CNN**","0335f605":"* Based on SRK's kernel: https:\/\/www.kaggle.com\/sudalairajkumar\/a-look-at-different-embeddings\n* Concatenate embeddings instead of blending predictions. Added SpatialDropout1D.\n* Added word2vec from https:\/\/www.kaggle.com\/strideradu\/word2vec-and-gensim-go-go-go.\n* Combined Vladimir Demidov's 2DCNN textClassifier: https:\/\/www.kaggle.com\/yekenot\/2dcnn-textclassifier\n* Modified the code to choose best threshold","d09266c1":"**Paragram Embeddings:**","80c790c2":"** Combine :**"}}