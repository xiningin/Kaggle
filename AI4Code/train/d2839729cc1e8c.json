{"cell_type":{"f3694802":"code","5120792c":"code","fa745dfe":"code","aba1e5d8":"code","ffcde369":"code","12ea00e8":"code","22a7a583":"code","ece9c6f6":"code","3af596be":"code","e807d9f2":"code","b0379741":"code","d9ff805b":"code","45da06d5":"code","b8328110":"code","656fceb6":"code","53ee20f3":"code","ad547122":"code","ea2ab001":"code","a1f34509":"code","fe2506f4":"code","d0ce89b5":"code","b01e8ae2":"code","49dfe294":"code","1bf38fa2":"code","20d492ca":"code","8b7285d8":"code","4f0f0dd7":"code","9d8a671c":"code","9f15ede1":"code","f00ff73d":"code","0569be56":"code","b4e50170":"code","54c601ba":"code","4564e842":"code","7f8320b2":"code","7e3537d4":"code","2a2bd5e6":"code","34856cc2":"code","3f39e88c":"code","77aafd64":"code","9406eef4":"code","c34e1edb":"code","cfba9f90":"code","92ebb3d6":"code","f617b21a":"code","a5f240b0":"code","7ac8c239":"code","27b2d0c9":"code","b2f5ee03":"code","9d0a4542":"code","e4032b17":"code","c6a47b71":"code","b1eae6b9":"code","382873c9":"code","635036e6":"code","4b82cb71":"code","3d7a3d02":"code","b7ddec34":"code","8988ca28":"code","681c64ee":"code","48f949cd":"code","955775ec":"code","76166e84":"code","4339fc1f":"code","a2757dd0":"code","232ecbb5":"code","86e57724":"code","b0e5c409":"code","a1c4ec3a":"code","399a4b0a":"code","00c2e604":"code","e7bb5507":"code","f6fa3d95":"code","0f9b28dd":"code","0bbd5491":"code","949da087":"code","0a66d380":"markdown","1fcbe898":"markdown","606f8dc9":"markdown","a975fef9":"markdown","3ed70dd8":"markdown","e11a4499":"markdown","34ba64f8":"markdown","1f61259b":"markdown","0ca1d2b7":"markdown","a9e6865f":"markdown","81387ec7":"markdown","b81fc775":"markdown"},"source":{"f3694802":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5120792c":"raw_2015 = pd.read_csv(r'..\/input\/world-happiness\/2015.csv') \nraw_2016 = pd.read_csv(r'..\/input\/world-happiness\/2015.csv') \nraw_2017 = pd.read_csv(r'..\/input\/world-happiness\/2016.csv') \nraw_2018 = pd.read_csv(r'..\/input\/world-happiness\/2017.csv') \nraw_2019 = pd.read_csv(r'..\/input\/world-happiness\/2019.csv') \n\nraw_2016","fa745dfe":"raw_2018.describe()","aba1e5d8":"sorted_2015 = raw_2015.sort_values('Country')\nc2015 = sorted_2015['Country']\nc15 = c2015.to_frame().reset_index()\n\nsorted_2016 = raw_2016.sort_values('Country')\nc2016 = sorted_2016['Country']\nc16 = c2016.to_frame().reset_index()\n\nsorted_2017 = raw_2017.sort_values('Country')\nc2017 = sorted_2017['Country']\nc17 = c2017.to_frame().reset_index()\n\nsorted_2018 = raw_2018.sort_values('Country')\nc2018 = sorted_2018['Country']\nc18 = c2018.to_frame().reset_index()\n\nsorted_2019 = raw_2019.sort_values('Country or region')\nc2019 = sorted_2019['Country or region']\nc19 = c2019.to_frame().reset_index()","ffcde369":"c15 = c15.set_index('Country')\nc16 = c16.set_index('Country')\nc17 = c17.set_index('Country')\ncountry_15_16 = c15.join(c16, lsuffix='_2015', how='outer', rsuffix='_2016')\ncountry_15_16\n\ncountry_15_16_17 = country_15_16.join(c17, how='outer', rsuffix='_2017')\ncountry_15_16_17\n\nc18 = c18.set_index('Country')\nc18\n\ncountry_15_16_17_18 = country_15_16_17.join(c18, how='outer', rsuffix='_2018')\ncountry_15_16_17_18\n\nc19['Country'] = c19['Country or region'] \nc19 = c19.drop(['Country or region'], axis = 1)\nc19 = c19.set_index('Country')\nc19\n\ncountry_15_16_17_18_19 = country_15_16_17_18.join(c19, how='outer', rsuffix='_2019')\ncountry_15_16_17_18_19","12ea00e8":"missing_countries = country_15_16_17_18_19[country_15_16_17_18_19.isna().any(axis=1)]\nmissing_countries = missing_countries.rename(columns={\"index\": \"index_2017\"})\n\nisnull_color = 'yellow'\nmissing_countries.style.applymap(lambda x: 'background-color: %s' % isnull_color if pd.isnull(x) else '')","22a7a583":"cols_2015 = raw_2015.columns.to_frame().rename(columns={0: \"2015\"})\n\ncols_2016 = raw_2016.columns.to_frame().rename(columns={0: \"2016\"})\n\ncols_15_16 = cols_2015.join(cols_2016, how='outer')\ncols_15_16\n\n\nraw_2017 = raw_2017.rename(columns={'Whisker.high': \"Upper Confidence Interval\",\n                                   'Whisker.low': \"Lower Confidence Interval\",\n                                   'Economy..GDP.per.Capita.': \"Economy (GDP per Capita)\",\n                                   'Trust..Government.Corruption.': \"Trust (Government Corruption)\",\n                                   'Health..Life.Expectancy.': \"Health (Life Expectancy)\",\n                                   'Dystopia.Residual': \"Dystopia Residual\",\n                                   'Happiness.Rank': \"Happiness Rank\",\n                                   'Happiness.Score': \"Happiness Score\"})\n\ncols_2017 = raw_2017.columns.to_frame().rename(columns={0: \"2017\"})\ncols_2017\n\ncols_15_16_17 = cols_15_16.join(cols_2017, how='outer')\ncols_15_16_17\n\n\nraw_2018 = raw_2018.rename(columns={'Country or region': \"Country\",\n                                    'Health..Life.Expectancy.': \"Health (Life Expectancy)\",\n                                    'Perceptions of corruption': \"Trust (Government Corruption)\",\n                                    'Score': \"Happiness Score\",\n                                    'Overall rank': \"Happiness Rank\",\n                                    'Freedom to make life choices': \"Freedom\",\n                                    'Economy..GDP.per.Capita.': \"Economy (GDP per Capita)\",\n                                    'Happiness.Rank': \"Happiness Rank\",\n                                    'Happiness.Score': \"Happiness Score\",\n                                    'Dystopia.Residual': \"Dystopia Residual\",\n                                    'Trust..Government.Corruption.': \"Trust (Government Corruption)\",\n                                    'Whisker.high': \"Upper Confidence Interval\",\n                                    'Whisker.low': \"Lower Confidence Interval\"})\n \ncols_2018 = raw_2018.columns.to_frame().rename(columns={0: \"2018\"})\ncols_2018\n\ncols_15_16_17_18 = cols_15_16_17.join(cols_2018, how='outer')\ncols_15_16_17_18\n\n\nraw_2019 = raw_2019.rename(columns={'Perceptions of corruption': \"Trust (Government Corruption)\",\n                                    'Score': \"Happiness Score\",\n                                    'Overall rank': \"Happiness Rank\",\n                                    'Country or region': \"Country\",\n                                    'Healthy life expectancy': \"Health (Life Expectancy)\",\n                                    'GDP per capita': \"Economy (GDP per Capita)\",\n                                    'Freedom to make life choices': \"Freedom\",\n                                    'Social support': \"Family\",\n                                    'Whisker.high': \"Upper Confidence Interval\",\n                                    'Whisker.low': \"Lower Confidence Interval\"})\ncols_2019 = raw_2019.columns.to_frame().rename(columns={0: \"2019\"})\ncols_2019\n\ncols_15_16_17_18_19 = cols_15_16_17_18.join(cols_2019, how='outer')\nmissing_cols = cols_15_16_17_18_19","ece9c6f6":"missing_cols","3af596be":"raw_2017 = raw_2017.rename(columns={'Whisker.high': \"Upper Confidence Interval\",\n                                   'Whisker.low': \"Lower Confidence Interval\",\n                                   'Economy..GDP.per.Capita.': \"Economy (GDP per Capita)\",\n                                   'Trust..Government.Corruption.': \"Trust (Government Corruption)\",\n                                   'Health..Life.Expectancy.': \"Health (Life Expectancy)\",\n                                   'Dystopia.Residual': \"Dystopia Residual\",\n                                   'Happiness.Rank': \"Happiness Rank\",\n                                   'Happiness.Score': \"Happiness Score\"})\nraw_2017","e807d9f2":"isnull_color = 'yellow'\nmissing_cols.style.applymap(lambda x: 'background-color: %s' % isnull_color if pd.isnull(x) else '')","b0379741":"raw_2015['Year'] = 2015\nraw_2016['Year'] = 2016\nraw_2017['Year'] = 2017\nraw_2018['Year'] = 2018\nraw_2019['Year'] = 2019","d9ff805b":"append_data = raw_2015.append((raw_2016, raw_2017, raw_2018, raw_2019), ignore_index=True)\n\nappend_data = append_data.replace(['Hong Kong S.A.R., China','Somaliland Region' ,'Somaliland region','Taiwan Province of China','Trinidad & Tobago'],\n                                  ['Hong Kong','Somalia','Somalia','Taiwan','Trinidad and Tobago'])\nappend_data","45da06d5":"index_country = append_data.set_index('Country')\nindex_country","b8328110":"region_2015= raw_2015.set_index('Country')\nindex_country = index_country.join(region_2015['Region'], how='left', rsuffix =\"_2\")\nindex_country","656fceb6":"index_country.Region_2","53ee20f3":"m = index_country[index_country['Region_2'].isna()]\nm.index.unique()\n\ndf = index_country.copy()","ad547122":"index_country.columns","ea2ab001":"#index_country = \nindex_country.Region_2.loc['Belize'] = 'Latin America and Caribbean'","a1f34509":"index_country.Region_2.loc['Belize']","fe2506f4":"index_country.Region_2.loc['Gambia'] = 'Sub-Saharan Africa'\nindex_country.Region_2.loc['Namibia'] = 'Sub-Saharan Africa'\nindex_country.Region_2.loc['North Macedonia'] = 'Central and Eastern Europe'\nindex_country.Region_2.loc['Northern Cyprus'] = 'Western Europe'\nindex_country.Region_2.loc['Puerto Rico'] = 'Latin America and Caribbean'\nindex_country.Region_2.loc['Somalia'] = 'Sub-Saharan Africa'\nindex_country.Region_2.loc['South Sudan'] = 'Sub-Saharan Africa'","d0ce89b5":"index_country[index_country['Region_2'].isna()]","b01e8ae2":"index_country = index_country.drop('Region', axis =1)\n\nindex_country = index_country.replace(to_replace='Southeastern Asia', value='Southern Asia')\nindex_country","49dfe294":"np.unique(index_country['Region_2'].values)","1bf38fa2":"data = index_country.reset_index()\n\ndf_15 = data[data['Year'] == 2015]\ndf_16 = data[data['Year'] == 2016]\ndf_17 = data[data['Year'] == 2017]\ndf_18 = data[data['Year'] == 2018]\ndf_19 = data[data['Year'] == 2019]","20d492ca":"avg_score_15 = df_15[['Region_2','Happiness Score', 'Year']].groupby(['Region_2', 'Year'])['Happiness Score'].mean()\navg_score_16 = df_16[['Region_2','Happiness Score', 'Year']].groupby(['Region_2', 'Year'])['Happiness Score'].mean()\navg_score_17 = df_17[['Region_2','Happiness Score', 'Year']].groupby(['Region_2', 'Year'])['Happiness Score'].mean()\navg_score_18 = df_18[['Region_2','Happiness Score', 'Year']].groupby(['Region_2', 'Year'])['Happiness Score'].mean()\navg_score_19 = df_19[['Region_2','Happiness Score', 'Year']].groupby(['Region_2', 'Year'])['Happiness Score'].mean()\n\navg_scores = avg_score_15.append([avg_score_16, avg_score_17, avg_score_18, avg_score_19]).to_frame()\n\navg_scores = avg_scores.reset_index()\navg_scores = avg_scores.set_index('Region_2')\n\navg_scores","8b7285d8":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\na = avg_scores.index.unique()\nb = (['ANZ', 'CEEU', 'EA', 'AMS', 'MENA', 'US', 'SA','S_SA', 'WEU'])","4f0f0dd7":"for i,e in zip(a,b):\n    print(e+\"_avg_hap = avg_scores.loc['\"+i+\"']\")","9d8a671c":"ANZ_avg_hap = avg_scores.loc['Australia and New Zealand']\nCEEU_avg_hap = avg_scores.loc['Central and Eastern Europe']\nEA_avg_hap = avg_scores.loc['Eastern Asia']\nAMS_avg_hap = avg_scores.loc['Latin America and Caribbean']\nMENA_avg_hap = avg_scores.loc['Middle East and Northern Africa']\nUS_avg_hap = avg_scores.loc['North America']\nSA_avg_hap = avg_scores.loc['Southern Asia']\nS_SA_avg_hap = avg_scores.loc['Sub-Saharan Africa']\nWEU_avg_hap = avg_scores.loc['Western Europe']","9f15ede1":"for i in b:\n    print(\"x_\"+i,\" = \"+i+\"_avg_hap['Year']\")","f00ff73d":"for i in b:\n    print(\"y_\"+i,\" = \"+i+\"_avg_hap['Happiness Score']\")","0569be56":"ANZ_avg_hap = ANZ_avg_hap.set_index('Year')\nCEEU_avg_hap = CEEU_avg_hap.set_index('Year')\nEA_avg_hap = EA_avg_hap.set_index('Year')\nAMS_avg_hap = AMS_avg_hap.set_index('Year')\nMENA_avg_hap = MENA_avg_hap.set_index('Year')\nUS_avg_hap = US_avg_hap.set_index('Year')\nSA_avg_hap = SA_avg_hap.set_index('Year')\nS_SA_avg_hap = S_SA_avg_hap.set_index('Year')\nWEU_avg_hap = WEU_avg_hap.set_index('Year')\n\n#x_ANZ  = ANZ_avg_hap.index\n#x_CEEU  = CEEU_avg_hap.index\n#x_EA  = EA_avg_hap.index\n#x_AMS  = AMS_avg_hap.index\n#x_MENA  = MENA_avg_hap.index\n#x_US  = US_avg_hap.index\n#x_SA  = SA_avg_hap.index\n#x_S_SA  = S_SA_avg_hap.index\n#x_WEU  = WEU_avg_hap.index\n\ny_ANZ  = ANZ_avg_hap['Happiness Score']\ny_CEEU  = CEEU_avg_hap['Happiness Score']\ny_EA  = EA_avg_hap['Happiness Score']\ny_AMS  = AMS_avg_hap['Happiness Score']\ny_MENA  = MENA_avg_hap['Happiness Score']\ny_US  = US_avg_hap['Happiness Score']\ny_SA  = SA_avg_hap['Happiness Score']\ny_S_SA  = S_SA_avg_hap['Happiness Score']\ny_WEU  = WEU_avg_hap['Happiness Score']","b4e50170":"fig, (ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9) = plt.subplots(1, 9, sharey=True, figsize=(35,10))\n#fig.suptitle('Horizontally stacked subplots')\n\n#plot #1\ndf_ANZ_shifted = ANZ_avg_hap.shift()\ndf_ANZ_shifted.iloc[0] = df_ANZ_shifted.iloc[1]\nmask_inc = ANZ_avg_hap >= df_ANZ_shifted\nANZ_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in ANZ_avg_hap.iterrows():\n    ax1.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax1.set_title('Australia and New Zealand', fontsize=15)\n\n#plot #2\ndf_CEEU_shifted = CEEU_avg_hap.shift()\ndf_CEEU_shifted.iloc[0] = df_CEEU_shifted.iloc[1]\nmask_inc = CEEU_avg_hap >= df_CEEU_shifted\nCEEU_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in CEEU_avg_hap.iterrows():\n    ax7.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax7.set_title('Central and Eastern Europe', fontsize=15)\n\n#plot #3\ndf_EA_shifted = EA_avg_hap.shift()\ndf_EA_shifted.iloc[0] = df_EA_shifted.iloc[1]\nmask_inc = EA_avg_hap >= df_EA_shifted\nEA_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in EA_avg_hap.iterrows():\n    ax5.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax5.set_title('Eastern Asia', fontsize=15)\n\n\n#plot #4\ndf_AMS_shifted = AMS_avg_hap.shift()\ndf_AMS_shifted.iloc[0] = df_AMS_shifted.iloc[1]\nmask_inc = AMS_avg_hap >= df_AMS_shifted\nAMS_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in AMS_avg_hap.iterrows():\n    ax4.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax4.set_title('LATAM', fontsize=15)\n\n#plot #5\ndf_MENA_shifted = MENA_avg_hap.shift()\ndf_MENA_shifted.iloc[0] = df_MENA_shifted.iloc[1]\nmask_inc = MENA_avg_hap >= df_MENA_shifted\nMENA_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in MENA_avg_hap.iterrows():\n    ax6.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax6.set_title('MENA', fontsize=15)\n\n#plot #6\ndf_US_shifted = US_avg_hap.shift()\ndf_US_shifted.iloc[0] = df_US_shifted.iloc[1]\nmask_inc =US_avg_hap >= df_US_shifted\nUS_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in US_avg_hap.iterrows():\n    ax2.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax2.set_title('North America', fontsize=15)\n\n#plot #7\ndf_SA_shifted = SA_avg_hap.shift()\ndf_SA_shifted.iloc[0] = df_SA_shifted.iloc[1]\nmask_inc = SA_avg_hap >= df_SA_shifted\nSA_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in SA_avg_hap.iterrows():\n    ax8.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax8.set_title('Southern Asia', fontsize=15)\n\n#plot #8\ndf_S_SA_shifted = S_SA_avg_hap.shift()\ndf_S_SA_shifted.iloc[0] = df_S_SA_shifted.iloc[1]\nmask_inc = S_SA_avg_hap >= df_S_SA_shifted\nS_SA_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in S_SA_avg_hap.iterrows():\n    ax9.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax9.set_title('Sub-Saharan Africa', fontsize=15)\n\n#plot #9\ndf_WEU_shifted = WEU_avg_hap.shift()\ndf_WEU_shifted.iloc[0] = df_WEU_shifted.iloc[1]\nmask_inc = WEU_avg_hap >= df_WEU_shifted\nWEU_avg_hap['Increase'] = mask_inc['Happiness Score'].astype(int)\n\n\ncolor = {True: 'green', False: 'red'}\nfor index, row in WEU_avg_hap.iterrows():\n    ax3.plot(index, row['Happiness Score'], 'o', color=color[row['Increase']])\nax3.set_title('Western Europe', fontsize=15)\n\n\nplt.ylim(0,10)\n","54c601ba":"index_country.columns","4564e842":"preprocessing = index_country.rename(columns={'Region_2': \"R\", 'Happiness Score' : \"HS\", \n                  'Economy (GDP per Capita)': \"Economy\", \n                  'Health (Life Expectancy)' : \"Health\", \n                  'Trust (Government Corruption)': \"Trust\",}).drop(['Standard Error', \n                                                                    \"Dystopia Residual\", \n                                                                    \"Lower Confidence Interval\", \n                                                                    \"Upper Confidence Interval\",\n                                                                    \"Happiness Rank\"], axis = 1)\npreprocessing","7f8320b2":"filtered_df = preprocessing[preprocessing['R'].isnull()]","7e3537d4":"filtered_df = filtered_df['R'].to_frame()\nfiltered_df","2a2bd5e6":"filtered_df.loc['Belize'] = 'Sub-Saharan Africa'\nfiltered_df.loc['Namibia'] = 'Sub-Saharan Africa'\nfiltered_df.loc['Gambia'] = 'Sub-Saharan Africa'\nfiltered_df.loc['North Macedonia'] = 'Central and Eastern Europe'\nfiltered_df.loc['Northern Cyprus'] = 'Western Europe'\nfiltered_df.loc['Puerto Rico'] = 'Latin America and Caribbean'\nfiltered_df.loc['Somalia'] = 'Sub-Saharan Africa'\nfiltered_df.loc['South Sudan'] = 'Sub-Saharan Africa'","34856cc2":"filtered_df","3f39e88c":"preprocessing = preprocessing.combine_first(filtered_df)\npreprocessing[preprocessing['R'].isnull()]","77aafd64":"prepro = preprocessing.groupby(by=[\"R\",'Year']).mean().reset_index().set_index('R')","9406eef4":"ANZ = prepro.loc['Australia and New Zealand']\nCEEU = prepro.loc['Central and Eastern Europe']\nEA = prepro.loc['Eastern Asia']\nAMS = prepro.loc['Latin America and Caribbean']\nMENA = prepro.loc['Middle East and Northern Africa']\nUS = prepro.loc['North America']\nSA = prepro.loc['Southern Asia']\nS_SA = prepro.loc['Sub-Saharan Africa']\nWEU = prepro.loc['Western Europe']","c34e1edb":"ANZ","cfba9f90":"%matplotlib inline\nfig, (ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8, ax9) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig.suptitle('Economy')\n\n\nax1.bar(ANZ['Year'],ANZ['Economy'])\nax1.set_title('Australia and New Zealand', fontsize=15)\nax1.axhline(y=(1.25), color='r', linestyle='--')\n\nax2.bar(US['Year'],US['Economy'])\nax2.set_title('North America', fontsize=15)\nax2.axhline(y=1.25, color='r', linestyle='--')\n\nax3.bar(WEU['Year'],WEU['Economy'])\nax3.set_title('Western Europe', fontsize=15)\nax3.axhline(y=1.25, color='r', linestyle='--')\n\nax4.bar(AMS['Year'],AMS['Economy'])\nax4.set_title('LATAM', fontsize=15)\nax4.axhline(y=1.25, color='r', linestyle='--')\n\nax5.bar(EA['Year'],EA['Economy'])\nax5.set_title('Eastern Asia', fontsize=15)\nax5.axhline(y=1.25, color='r', linestyle='--')\n\nax6.bar(MENA['Year'],MENA['Economy'])\nax6.set_title('MENA', fontsize=15)\nax6.axhline(y=1.25, color='r', linestyle='--')\n\nax7.bar(CEEU['Year'],CEEU['Economy'])\nax7.set_title('Central and Eastern Europe', fontsize=15)\nax7.axhline(y=1.25, color='r', linestyle='--')\n\nax8.bar(SA['Year'],SA['Economy'])\nax8.set_title('Southern Asia', fontsize=15)\nax8.axhline(y=1.25, color='r', linestyle='--')\n\nax9.bar(S_SA['Year'],S_SA['Economy'])\nax9.set_title('Sub-Saharan Africa', fontsize=15)\nax9.axhline(y=1.25, color='r', linestyle='--')\n","92ebb3d6":"fig_f, (ax1_f, ax2_f, ax3_f, ax4_f, ax5_f, ax6_f, ax7_f, ax8_f, ax9_f) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig_f.suptitle('Family')\n\nax1_f.bar(ANZ['Year'],ANZ['Family'])\nax1_f.set_title('Australia and New Zealand', fontsize=15)\nax1_f.axhline(y=(1.25), color='r', linestyle='--')\n\nax2_f.bar(US['Year'],US['Family'])\nax2_f.set_title('North America', fontsize=15)\nax2_f.axhline(y=1.25, color='r', linestyle='--')\n\nax3_f.bar(WEU['Year'],WEU['Family'])\nax3_f.set_title('Western Europe', fontsize=15)\nax3_f.axhline(y=1.25, color='r', linestyle='--')\n\nax4_f.bar(AMS['Year'],AMS['Family'])\nax4_f.set_title('LATAM', fontsize=15)\nax4_f.axhline(y=1.25, color='r', linestyle='--')\n\nax5_f.bar(EA['Year'],EA['Family'])\nax5_f.set_title('Eastern Asia', fontsize=15)\nax5_f.axhline(y=1.25, color='r', linestyle='--')\n\nax6_f.bar(MENA['Year'],MENA['Family'])\nax6_f.set_title('MENA', fontsize=15)\nax6_f.axhline(y=1.25, color='r', linestyle='--')\n\nax7_f.bar(CEEU['Year'],CEEU['Family'])\nax7_f.set_title('Central and Eastern Europe', fontsize=15)\nax7_f.axhline(y=1.25, color='r', linestyle='--')\n\nax8_f.bar(SA['Year'],SA['Family'])\nax8_f.set_title('Southern Asia', fontsize=15)\nax8_f.axhline(y=1.25, color='r', linestyle='--')\n\nax9_f.bar(S_SA['Year'],S_SA['Family'])\nax9_f.set_title('Sub-Saharan Africa', fontsize=15)\nax9_f.axhline(y=1.25, color='r', linestyle='--')","f617b21a":"fig_f, (ax1_f, ax2_f, ax3_f, ax4_f, ax5_f, ax6_f, ax7_f, ax8_f, ax9_f) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig_f.suptitle('Freedom')\n\nax1_f.bar(ANZ['Year'],ANZ['Freedom'])\nax1_f.set_title('Australia and New Zealand', fontsize=15)\nax1_f.axhline(y=(1.25), color='r', linestyle='--')\n\nax2_f.bar(US['Year'],US['Freedom'])\nax2_f.set_title('North America', fontsize=15)\nax2_f.axhline(y=1.25, color='r', linestyle='--')\n\nax3_f.bar(WEU['Year'],WEU['Freedom'])\nax3_f.set_title('Western Europe', fontsize=15)\nax3_f.axhline(y=1.25, color='r', linestyle='--')\n\nax4_f.bar(AMS['Year'],AMS['Freedom'])\nax4_f.set_title('LATAM', fontsize=15)\nax4_f.axhline(y=1.25, color='r', linestyle='--')\n\nax5_f.bar(EA['Year'],EA['Freedom'])\nax5_f.set_title('Eastern Asia', fontsize=15)\nax5_f.axhline(y=1.25, color='r', linestyle='--')\n\nax6_f.bar(MENA['Year'],MENA['Freedom'])\nax6_f.set_title('MENA', fontsize=15)\nax6_f.axhline(y=1.25, color='r', linestyle='--')\n\nax7_f.bar(CEEU['Year'],CEEU['Freedom'])\nax7_f.set_title('Central and Eastern Europe', fontsize=15)\nax7_f.axhline(y=1.25, color='r', linestyle='--')\n\nax8_f.bar(SA['Year'],SA['Freedom'])\nax8_f.set_title('Southern Asia', fontsize=15)\nax8_f.axhline(y=1.25, color='r', linestyle='--')\n\nax9_f.bar(S_SA['Year'],S_SA['Freedom'])\nax9_f.set_title('Sub-Saharan Africa', fontsize=15)\nax9_f.axhline(y=1.25, color='r', linestyle='--')","a5f240b0":"fig_f, (ax1_f, ax2_f, ax3_f, ax4_f, ax5_f, ax6_f, ax7_f, ax8_f, ax9_f) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig_f.suptitle('Generosity')\n\nax1_f.bar(ANZ['Year'],ANZ['Generosity'])\nax1_f.set_title('Australia and New Zealand', fontsize=15)\nax1_f.axhline(y=(1.25), color='r', linestyle='--')\n\nax2_f.bar(US['Year'],US['Generosity'])\nax2_f.set_title('North America', fontsize=15)\nax2_f.axhline(y=1.25, color='r', linestyle='--')\n\nax3_f.bar(WEU['Year'],WEU['Generosity'])\nax3_f.set_title('Western Europe', fontsize=15)\nax3_f.axhline(y=1.25, color='r', linestyle='--')\n\nax4_f.bar(AMS['Year'],AMS['Generosity'])\nax4_f.set_title('LATAM', fontsize=15)\nax4_f.axhline(y=1.25, color='r', linestyle='--')\n\nax5_f.bar(EA['Year'],EA['Generosity'])\nax5_f.set_title('Eastern Asia', fontsize=15)\nax5_f.axhline(y=1.25, color='r', linestyle='--')\n\nax6_f.bar(MENA['Year'],MENA['Generosity'])\nax6_f.set_title('MENA', fontsize=15)\nax6_f.axhline(y=1.25, color='r', linestyle='--')\n\nax7_f.bar(CEEU['Year'],CEEU['Generosity'])\nax7_f.set_title('Central and Eastern Europe', fontsize=15)\nax7_f.axhline(y=1.25, color='r', linestyle='--')\n\nax8_f.bar(SA['Year'],SA['Generosity'])\nax8_f.set_title('Southern Asia', fontsize=15)\nax8_f.axhline(y=1.25, color='r', linestyle='--')\n\nax9_f.bar(S_SA['Year'],S_SA['Generosity'])\nax9_f.set_title('Sub-Saharan Africa', fontsize=15)\nax9_f.axhline(y=1.25, color='r', linestyle='--')","7ac8c239":"fig_f, (ax1_f, ax2_f, ax3_f, ax4_f, ax5_f, ax6_f, ax7_f, ax8_f, ax9_f) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig_f.suptitle('HS')\n\nax1_f.bar(ANZ['Year'],ANZ['HS'])\nax1_f.set_title('Australia and New Zealand', fontsize=15)\nax1_f.axhline(y=7, color='r', linestyle='--')\n\nax2_f.bar(US['Year'],US['HS'])\nax2_f.set_title('North America', fontsize=15)\nax2_f.axhline(y=7, color='r', linestyle='--')\n\nax3_f.bar(WEU['Year'],WEU['HS'])\nax3_f.set_title('Western Europe', fontsize=15)\nax3_f.axhline(y=7, color='r', linestyle='--')\n\nax4_f.bar(AMS['Year'],AMS['HS'])\nax4_f.set_title('LATAM', fontsize=15)\nax4_f.axhline(y=7, color='r', linestyle='--')\n\nax5_f.bar(EA['Year'],EA['HS'])\nax5_f.set_title('Eastern Asia', fontsize=15)\nax5_f.axhline(y=7, color='r', linestyle='--')\n\nax6_f.bar(MENA['Year'],MENA['HS'])\nax6_f.set_title('MENA', fontsize=15)\nax6_f.axhline(y=7, color='r', linestyle='--')\n\nax7_f.bar(CEEU['Year'],CEEU['HS'])\nax7_f.set_title('Central and Eastern Europe', fontsize=15)\nax7_f.axhline(y=7, color='r', linestyle='--')\n\nax8_f.bar(SA['Year'],SA['HS'])\nax8_f.set_title('Southern Asia', fontsize=15)\nax8_f.axhline(y=7, color='r', linestyle='--')\n\nax9_f.bar(S_SA['Year'],S_SA['HS'])\nax9_f.set_title('Sub-Saharan Africa', fontsize=15)\nax9_f.axhline(y=7, color='r', linestyle='--')","27b2d0c9":"fig_f, (ax1_f, ax2_f, ax3_f, ax4_f, ax5_f, ax6_f, ax7_f, ax8_f, ax9_f) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig_f.suptitle('Health')\n\nax1_f.bar(ANZ['Year'],ANZ['Health'])\nax1_f.set_title('Australia and New Zealand', fontsize=15)\nax1_f.axhline(y=(1.25), color='r', linestyle='--')\n\nax2_f.bar(US['Year'],US['Health'])\nax2_f.set_title('North America', fontsize=15)\nax2_f.axhline(y=1.25, color='r', linestyle='--')\n\nax3_f.bar(WEU['Year'],WEU['Health'])\nax3_f.set_title('Western Europe', fontsize=15)\nax3_f.axhline(y=1.25, color='r', linestyle='--')\n\nax4_f.bar(AMS['Year'],AMS['Health'])\nax4_f.set_title('LATAM', fontsize=15)\nax4_f.axhline(y=1.25, color='r', linestyle='--')\n\nax5_f.bar(EA['Year'],EA['Health'])\nax5_f.set_title('Eastern Asia', fontsize=15)\nax5_f.axhline(y=1.25, color='r', linestyle='--')\n\nax6_f.bar(MENA['Year'],MENA['Health'])\nax6_f.set_title('MENA', fontsize=15)\nax6_f.axhline(y=1.25, color='r', linestyle='--')\n\nax7_f.bar(CEEU['Year'],CEEU['Health'])\nax7_f.set_title('Central and Eastern Europe', fontsize=15)\nax7_f.axhline(y=1.25, color='r', linestyle='--')\n\nax8_f.bar(SA['Year'],SA['Health'])\nax8_f.set_title('Southern Asia', fontsize=15)\nax8_f.axhline(y=1.25, color='r', linestyle='--')\n\nax9_f.bar(S_SA['Year'],S_SA['Health'])\nax9_f.set_title('Sub-Saharan Africa', fontsize=15)\nax9_f.axhline(y=1.25, color='r', linestyle='--')","b2f5ee03":"fig_f, (ax1_f, ax2_f, ax3_f, ax4_f, ax5_f, ax6_f, ax7_f, ax8_f, ax9_f) = plt.subplots(1, 9, sharey=True, figsize=(35,5))\n\nfig_f.suptitle('Trust')\n\nax1_f.bar(ANZ['Year'],ANZ['Trust'])\nax1_f.set_title('Australia and New Zealand', fontsize=15)\nax1_f.axhline(y=(1.25), color='r', linestyle='--')\n\nax2_f.bar(US['Year'],US['Trust'])\nax2_f.set_title('North America', fontsize=15)\nax2_f.axhline(y=1.25, color='r', linestyle='--')\n\nax3_f.bar(WEU['Year'],WEU['Trust'])\nax3_f.set_title('Western Europe', fontsize=15)\nax3_f.axhline(y=1.25, color='r', linestyle='--')\n\nax4_f.bar(AMS['Year'],AMS['Trust'])\nax4_f.set_title('LATAM', fontsize=15)\nax4_f.axhline(y=1.25, color='r', linestyle='--')\n\nax5_f.bar(EA['Year'],EA['Trust'])\nax5_f.set_title('Eastern Asia', fontsize=15)\nax5_f.axhline(y=1.25, color='r', linestyle='--')\n\nax6_f.bar(MENA['Year'],MENA['Trust'])\nax6_f.set_title('MENA', fontsize=15)\nax6_f.axhline(y=1.25, color='r', linestyle='--')\n\nax7_f.bar(CEEU['Year'],CEEU['Trust'])\nax7_f.set_title('Central and Eastern Europe', fontsize=15)\nax7_f.axhline(y=1.25, color='r', linestyle='--')\n\nax8_f.bar(SA['Year'],SA['Trust'])\nax8_f.set_title('Southern Asia', fontsize=15)\nax8_f.axhline(y=1.25, color='r', linestyle='--')\n\nax9_f.bar(S_SA['Year'],S_SA['Trust'])\nax9_f.set_title('Sub-Saharan Africa', fontsize=15)\nax9_f.axhline(y=1.25, color='r', linestyle='--')","9d0a4542":"prepro.columns","e4032b17":"\nprepro = prepro.reset_index()\ntable_means = prepro[['R', 'Year', 'HS', 'Family', 'Economy', 'Health', 'Freedom', 'Generosity', 'Trust']]\ntable_means.style.background_gradient(cmap='Blues', subset=[ 'Economy', 'Family', 'Freedom', 'Generosity', 'HS', 'Health',\n       'Trust'])","c6a47b71":"preprocessing.groupby(by=[\"R\"]).mean().drop('Year', axis= 1).sort_values(by = 'HS', ascending = False).style.bar(subset=[ 'Economy', 'Family', 'Freedom', 'Generosity', 'HS', 'Health','Trust'], color='#d65f5f')","b1eae6b9":"df = preprocessing.copy()","382873c9":"df.columns","635036e6":"df['R']","4b82cb71":"import pandas as pd\nfrom sklearn import preprocessing\n\nR = df['R']\nx = df[['Economy', 'Family', 'Freedom', 'Generosity', 'HS', 'Health', 'Trust', 'Year']].values \nmin_max_scaler = preprocessing.MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\nnormalized = pd.DataFrame(x_scaled, columns = ['Economy', 'Family', 'Freedom', 'Generosity', 'HS', 'Health', 'Trust', 'Year'])\n\nnormalized ","3d7a3d02":"normalized['R'] = df['R'].values\nnormalized","b7ddec34":"corr = normalized.corr().round(2)\n\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nf, ax = plt.subplots(figsize=(11, 9))\n\nsns.heatmap(corr, mask=mask, cmap='Blues',annot = True, vmax=.3,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","8988ca28":"RandFor = normalized.reset_index()","681c64ee":"from sklearn.ensemble import RandomForestClassifier\n\ncodes, uniques = pd.factorize(RandFor['R'], sort=True)\n#y = pd.factorize(df['R'])[0]\nRandFor['R_codes'] = codes\n\ny = RandFor[['R', 'R_codes']]\nX = RandFor[['Economy', 'Family', 'Freedom', 'Generosity', 'HS', 'Health', 'Trust', 'Year']]","48f949cd":"import numpy as np\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","955775ec":"print('Number of observations in the training data:', len(X_train))\nprint('Number of observations in the test data:',len(X_test))","76166e84":"clf = RandomForestClassifier(n_jobs=2, random_state=0)\n\nclf.fit(X_train, y_train['R_codes'])","4339fc1f":"clf.predict(X_test)","a2757dd0":"clf.predict_proba(X_test)[0:10]","232ecbb5":"preds = uniques[clf.predict(X_test)]\npreds","86e57724":"pd.crosstab(y_test['R'], preds.values, rownames=['Actual Region'], colnames=['Predicted Region'])","b0e5c409":"RandomForest_featureimp = pd.DataFrame(list(zip(X_train, clf.feature_importances_)), columns = ['KPI', 'importance']).sort_values(by='importance', ascending = False)\nRandomForest_featureimp","a1c4ec3a":"RandFor = RandFor.set_index('R')","399a4b0a":"ANZ = RandFor.loc['Australia and New Zealand']\nCEEU = RandFor.loc['Central and Eastern Europe']\nEA = RandFor.loc['Eastern Asia']\nAMS = RandFor.loc['Latin America and Caribbean']\nMENA = RandFor.loc['Middle East and Northern Africa']\nUS = RandFor.loc['North America']\nSA = RandFor.loc['Southern Asia']\nS_SA = RandFor.loc['Sub-Saharan Africa']\nWEU = RandFor.loc['Western Europe']","00c2e604":"fig, (ax1, ax2, ax3, ax4, ax5, ax6, ax7) = plt.subplots(1, 7, sharey=True, figsize=(35,5))\n\nax1.scatter(ANZ['HS'], ANZ['Health'], c = 'lightpink')\nax1.scatter(CEEU['HS'], CEEU['Health'], c = 'palegreen')\nax1.scatter(EA['HS'], EA['Health'], c = 'violet')\nax1.scatter(AMS['HS'], AMS['Health'], c = 'salmon')\nax1.scatter(MENA['HS'], MENA['Health'], c = 'aquamarine')\nax1.scatter(US['HS'], US['Health'], c = 'cornflowerblue')\nax1.scatter(SA['HS'],SA['Health'], c = 'lime')\nax1.scatter(S_SA['HS'], S_SA['Health'], c = 'gold')\nax1.scatter(WEU['HS'],WEU['Health'], c = 'darkkhaki')\n\nax2.scatter(ANZ['HS'], ANZ['Economy'], c = 'lightpink')\nax2.scatter(CEEU['HS'], CEEU['Economy'], c = 'palegreen')\nax2.scatter(EA['HS'], EA['Economy'], c = 'violet')\nax2.scatter(AMS['HS'], AMS['Economy'], c = 'salmon')\nax2.scatter(MENA['HS'], MENA['Economy'], c = 'aquamarine')\nax2.scatter(US['HS'], US['Economy'], c = 'cornflowerblue')\nax2.scatter(SA['HS'],SA['Economy'], c = 'lime')\nax2.scatter(S_SA['HS'], S_SA['Economy'], c = 'gold')\nax2.scatter(WEU['HS'],WEU['Economy'], c = 'darkkhaki')\n\nax3.scatter(ANZ['HS'], ANZ['Trust'], c = 'lightpink')\nax3.scatter(CEEU['HS'], CEEU['Trust'], c = 'palegreen')\nax3.scatter(EA['HS'], EA['Trust'], c = 'violet')\nax3.scatter(AMS['HS'], AMS['Trust'], c = 'salmon')\nax3.scatter(MENA['HS'], MENA['Trust'], c = 'aquamarine')\nax3.scatter(US['HS'], US['Trust'], c = 'cornflowerblue')\nax3.scatter(SA['HS'],SA['Trust'], c = 'lime')\nax3.scatter(S_SA['HS'], S_SA['Trust'], c = 'gold')\nax3.scatter(WEU['HS'],WEU['Trust'], c = 'darkkhaki')\n\nax4.scatter(ANZ['HS'], ANZ['Freedom'], c = 'lightpink')\nax4.scatter(CEEU['HS'], CEEU['Freedom'], c = 'palegreen')\nax4.scatter(EA['HS'], EA['Freedom'], c = 'violet')\nax4.scatter(AMS['HS'], AMS['Freedom'], c = 'salmon')\nax4.scatter(MENA['HS'], MENA['Freedom'], c = 'aquamarine')\nax4.scatter(US['HS'], US['Freedom'], c = 'cornflowerblue')\nax4.scatter(SA['HS'],SA['Freedom'], c = 'lime')\nax4.scatter(S_SA['HS'], S_SA['Freedom'], c = 'gold')\nax4.scatter(WEU['HS'],WEU['Freedom'], c = 'darkkhaki')\n\nax5.scatter(ANZ['HS'], ANZ['Generosity'], c = 'lightpink')\nax5.scatter(CEEU['HS'], CEEU['Generosity'], c = 'palegreen')\nax5.scatter(EA['HS'], EA['Generosity'], c = 'violet')\nax5.scatter(AMS['HS'], AMS['Generosity'], c = 'salmon')\nax5.scatter(MENA['HS'], MENA['Generosity'], c = 'aquamarine')\nax5.scatter(US['HS'], US['Generosity'], c = 'cornflowerblue')\nax5.scatter(SA['HS'],SA['Generosity'], c = 'lime')\nax5.scatter(S_SA['HS'], S_SA['Generosity'], c = 'gold')\nax5.scatter(WEU['HS'],WEU['Generosity'], c = 'darkkhaki')\n\nax6.scatter(ANZ['HS'], ANZ['Family'], c = 'lightpink')\nax6.scatter(CEEU['HS'], CEEU['Family'], c = 'palegreen')\nax6.scatter(EA['HS'], EA['Family'], c = 'violet')\nax6.scatter(AMS['HS'], AMS['Family'], c = 'salmon')\nax6.scatter(MENA['HS'], MENA['Family'], c = 'aquamarine')\nax6.scatter(US['HS'], US['Family'], c = 'cornflowerblue')\nax6.scatter(SA['HS'],SA['Family'], c = 'lime')\nax6.scatter(S_SA['HS'], S_SA['Family'], c = 'gold')\nax6.scatter(WEU['HS'],WEU['Family'], c = 'darkkhaki')\n\nax7.scatter(ANZ['HS'], ANZ['Year'], c = 'lightpink')\nax7.scatter(CEEU['HS'], CEEU['Year'], c = 'palegreen')\nax7.scatter(EA['HS'], EA['Year'], c = 'violet')\nax7.scatter(AMS['HS'], AMS['Year'], c = 'salmon')\nax7.scatter(MENA['HS'], MENA['Year'], c = 'aquamarine')\nax7.scatter(US['HS'], US['Year'], c = 'cornflowerblue')\nax7.scatter(SA['HS'],SA['Year'], c = 'lime')\nax7.scatter(S_SA['HS'], S_SA['Year'], c = 'gold')\nax7.scatter(WEU['HS'],WEU['Year'], c = 'darkkhaki')\n\nax1.set_title('Health', fontsize=15)\nax2.set_title('Economy', fontsize=15)\nax3.set_title('Trust', fontsize=15)\nax4.set_title('Freedom', fontsize=15)\nax5.set_title('Generosity', fontsize=15)\nax6.set_title('Family', fontsize=15)\nax7.set_title('Year', fontsize=15)","e7bb5507":"LinReg = RandFor.reset_index().drop(['R', 'R_codes', 'index'], axis = 1)\nLinReg.columns","f6fa3d95":"from sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nX = LinReg[['Economy', 'Family', 'Freedom', 'Generosity', 'Health', 'Trust','Year']]\ny = LinReg['HS']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\nregr = linear_model.LinearRegression()\nregr.fit(X_train, y_train)","0f9b28dd":"y_pred = regr.predict(X_test)","0bbd5491":"print('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n      % r2_score(y_test, y_pred))","949da087":"RegCoefs = pd.DataFrame(X.columns, columns = ['KPI'])\nRegCoefs['coefficient'] = pd.DataFrame(regr.coef_)\nRegCoefs.sort_values(by = 'coefficient', ascending = False)","0a66d380":"## 2015-2019 years in one dataframe with unified country names","1fcbe898":"splitting preprocessed dataset ","606f8dc9":"## Deep Dive - Regions one by one","a975fef9":"## all regions are filled now","3ed70dd8":"## Correlation Matrix","e11a4499":"adding Region to each row","34ba64f8":"## Missing countries throughout the years\n","1f61259b":"Scatter plots for Happiness Score VS other variables","0ca1d2b7":"## Random Forest classifier","a9e6865f":"## Labels are unified, missing column are highlighted with yellow","81387ec7":"## Unification of columns and append all years","b81fc775":"## Linear regression"}}