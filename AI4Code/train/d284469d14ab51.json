{"cell_type":{"9c81bf71":"code","8ef262e7":"code","6ede42ff":"code","e76bc3aa":"code","2c44247c":"code","54d0f28f":"code","d55ec270":"code","b2bcf3dc":"code","258b63f0":"code","7694ee9d":"code","666e2b4a":"code","918bc017":"code","d89f1df4":"code","56e1d80b":"code","01ac234b":"code","a4bc4107":"code","469aa47c":"code","28ec1e19":"code","589cb910":"code","ad99f1db":"code","8c22830b":"code","8c6340ff":"code","429ef135":"code","129289a7":"code","0e63b146":"code","6f84b26c":"code","9ab63394":"code","05f19485":"code","fa23901c":"code","dcbad086":"code","9343bd8f":"code","6bfa34fa":"markdown","82878b08":"markdown"},"source":{"9c81bf71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport seaborn as sns\nimport datetime as dt\nfrom datetime import timedelta\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split \nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom statsmodels.tsa.api import Holt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","8ef262e7":"covid = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid.head(10)","6ede42ff":"covid.tail()","e76bc3aa":"covid.shape","2c44247c":"rng = np.random.RandomState(42)\nser = pd.Series(rng.rand(5))\nser","54d0f28f":"print(\"Size\/Shape of dataset\", covid.shape)\nprint(\"===================================\")\nprint(\"checking for null values\", covid.isnull().sum())\nprint(\"===================================\")\nprint(\"checking data-type\", covid.dtypes)","d55ec270":"covid.drop([\"SNo\"],1, inplace=True)\n","b2bcf3dc":"covid.isnull().sum()","258b63f0":"covid[\"ObservationDate\"] = pd.to_datetime(covid[\"ObservationDate\"])","7694ee9d":"covid[\"ObservationDate\"] ","666e2b4a":"datewise = covid.groupby([\"ObservationDate\"]).agg({\"Confirmed\":\"sum\",\"Recovered\":\"sum\",\"Deaths\":\"sum\"})","918bc017":"print(\"Basic Information\")\nprint(\"Total number of Confirmed cases around the world :\", datewise[\"Confirmed\"].iloc[-1])\nprint(\"Total number of Recovered cases around the world :\", datewise[\"Recovered\"].iloc[-1])\nprint(\"Total number of Deaths cases around the world    :\", datewise[\"Deaths\"].iloc[-1])\nprint(\"Total number of Active cases around the world    :\", (datewise[\"Confirmed\"].iloc[-1]-datewise[\"Recovered\"].iloc[-1]-datewise[\"Deaths\"].iloc[-1]))\nprint(\"Total number of Closed cases around the world    :\", (datewise[\"Recovered\"].iloc[-1]+datewise[\"Deaths\"].iloc[-1]))","d89f1df4":"plt.figure(figsize=(30,10))\nsns.barplot(x=datewise.index.date,y=datewise[\"Confirmed\"]-datewise[\"Recovered\"]-datewise[\"Deaths\"])\nplt.title(\"Covid-19 Active Cases\")\nplt.xticks(rotation=90)","56e1d80b":"plt.figure(figsize=(30,10))\nsns.barplot(x=datewise.index.date,y=datewise[\"Recovered\"]+datewise[\"Deaths\"])\nplt.title(\"Covid-19 Closed Cases\")\nplt.xticks(rotation=90)","01ac234b":"datewise[\"WeekofYear\"]= datewise.index.weekofyear\nweek_num = []\nweekwise_confirmed = []\nweekwise_recovered = []\nweekwise_deaths = []\nw = 1\nfor i in list(datewise[\"WeekofYear\"].unique()):\n    weekwise_confirmed.append(datewise[datewise[\"WeekofYear\"]==i][\"Confirmed\"].iloc[-1])\n    weekwise_recovered.append(datewise[datewise[\"WeekofYear\"]==i][\"Recovered\"].iloc[-1])\n    weekwise_deaths.append(datewise[datewise[\"WeekofYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num.append(w)\n    w=w+1\n    \nplt.figure(figsize=(8,5))\nplt.plot(week_num,weekwise_confirmed,linewidth=3)\nplt.plot(week_num,weekwise_recovered,linewidth=3)\nplt.plot(week_num,weekwise_deaths,linewidth=3)\nplt.xlabel(\"Week of Number\")\nplt.ylabel(\"Number of cases\")\nplt.title(\"Weekly Progress of different type of cases\")\nplt.show()","a4bc4107":"fig,(ax1,ax2) = plt.subplots(1,2,figsize=(17,4))\nsns.barplot(x= week_num,y=pd.Series(weekwise_confirmed).diff().fillna(0),ax=ax1)\nsns.barplot(x= week_num,y=pd.Series(weekwise_deaths).diff().fillna(0),ax=ax2)\nax1.set_xlabel(\"Week Number\")\nax2.set_xlabel(\"Week Number\")\nax1.set_ylabel(\"Number of Confirmed cases\")\nax2.set_ylabel(\"Number of Deaths cases\")\nax1.set_title(\"Weekly increase in number of Confirmed cases\")\nax2.set_title(\"Weekly increase in number of Deaths cases\")\nplt.show()","469aa47c":"print(\"Average increase in number of Confirmed cases everyday:\",np.round(datewise[\"Confirmed\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Recovered cases everyday:\",np.round(datewise[\"Recovered\"].diff().fillna(0).mean()))\nprint(\"Average increase in number of Deaths cases everyday:\",np.round(datewise[\"Deaths\"].diff().fillna(0).mean()))\n\nplt.figure(figsize=(10,6))\nplt.plot(datewise[\"Confirmed\"].diff().fillna(0),label=\"daily increase in confirmed cases\",linewidth=3)\nplt.plot(datewise[\"Recovered\"].diff().fillna(0),label=\"daily increase in recovered cases\",linewidth=3)\nplt.plot(datewise[\"Deaths\"].diff().fillna(0),label=\"daily increase in deaths cases\",linewidth=3)\n\nplt.xlabel(\"Timestamp\")\nplt.ylabel(\"Daily increase\")\nplt.title(\"Daily increase\")\nplt.legend()\nplt.xticks(rotation=90)","28ec1e19":"#Country wise analysis\n#Calculating Country wise Mortality rate\n\ncountrywise=covid[covid[\"ObservationDate\"]==covid[\"ObservationDate\"].max()].groupby([\"Country\/Region\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'}).sort_values([\"Confirmed\"],ascending=False)\ncountrywise[\"Mortality\"]=(countrywise[\"Deaths\"]\/countrywise[\"Confirmed\"])*100\ncountrywise[\"Recovery\"]=(countrywise[\"Recovered\"]\/countrywise[\"Confirmed\"])*100","589cb910":"fig,(ax1,ax2)=plt.subplots(1,2,figsize=(25,10))\ntop_20confirm = countrywise.sort_values([\"Confirmed\"],ascending=False).head(20)\ntop_20deaths = countrywise.sort_values([\"Deaths\"],ascending=False).head(20)\n\nsns.barplot(x=top_20confirm[\"Confirmed\"],y=top_20confirm.index,ax=ax1)\nax1.set_title(\"Top 20 Countries as per number of confirmed cases\")\nsns.barplot(x=top_20deaths[\"Deaths\"],y=top_20confirm.index,ax=ax2)\nax2.set_title(\"Top 20 Countries as per number of deaths cases\")\n","ad99f1db":"#Data Analysis for Indonesian\n\nindonesia_data = covid[covid[\"Country\/Region\"]==\"Indonesia\"]\ndatewise_indonesia = indonesia_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_indonesia.iloc[-1])\nprint(\"=====================================\")\nprint(\"Total Active Cases\", datewise_indonesia[\"Confirmed\"].iloc[-1]-datewise_indonesia[\"Recovered\"].iloc[-1]-datewise_indonesia[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases\", datewise_indonesia[\"Recovered\"].iloc[-1]+datewise_indonesia[\"Deaths\"].iloc[-1])","8c22830b":"#Data Analysis for US\n\nUS_data = covid[covid[\"Country\/Region\"]==\"US\"]\ndatewise_US = US_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nprint(datewise_US.iloc[-1])\nprint(\"=====================================\")\nprint(\"Total Active Cases\", datewise_US[\"Confirmed\"].iloc[-1]-datewise_US[\"Recovered\"].iloc[-1]-datewise_US[\"Deaths\"].iloc[-1])\nprint(\"Total Closed Cases\", datewise_US[\"Recovered\"].iloc[-1]+datewise_US[\"Deaths\"].iloc[-1])","8c6340ff":"#WEEKLY DATA ON INDONESIAN\n\ndatewise_indonesia[\"WeekofYear\"] = datewise_indonesia.index.weekofyear\nweek_num_ina = []\nweekwise_confirmed_ina = []\nweekwise_recovered_ina = []\nweekwise_deaths_ina = []\nw = 1\nfor i in list(datewise_indonesia[\"WeekofYear\"].unique()):\n    weekwise_confirmed_ina.append(datewise_indonesia[datewise_indonesia[\"WeekofYear\"]==i][\"Confirmed\"].iloc[-1])\n    weekwise_recovered_ina.append(datewise_indonesia[datewise_indonesia[\"WeekofYear\"]==i][\"Recovered\"].iloc[-1])\n    weekwise_deaths_ina.append(datewise_indonesia[datewise_indonesia[\"WeekofYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num_ina.append(w)\n    w=w+1\n    \nplt.figure(figsize=(8,5))\nplt.plot(week_num_ina,weekwise_confirmed_ina,linewidth=3)\nplt.plot(week_num_ina,weekwise_recovered_ina,linewidth=3)\nplt.plot(week_num_ina,weekwise_deaths_ina,linewidth=3)\nplt.xlabel(\"Week of Number in Indonesian\")\nplt.ylabel(\"Number of cases in Indonesian\")\nplt.title(\"Weekly Progress of different type of cases in Indonesian\")\nplt.show()","429ef135":"#WEEKLY DATA ON US\n\ndatewise_US[\"WeekofYear\"] = datewise_US.index.weekofyear\nweek_num_us = []\nweekwise_confirmed_us = []\nweekwise_recovered_us = []\nweekwise_deaths_us = []\nw = 1\nfor i in list(datewise_US[\"WeekofYear\"].unique()):\n    weekwise_confirmed_us.append(datewise_US[datewise_US[\"WeekofYear\"]==i][\"Confirmed\"].iloc[-1])\n    weekwise_recovered_us.append(datewise_US[datewise_US[\"WeekofYear\"]==i][\"Recovered\"].iloc[-1])\n    weekwise_deaths_us.append(datewise_US[datewise_US[\"WeekofYear\"]==i][\"Deaths\"].iloc[-1])\n    week_num_us.append(w)\n    w=w+1\n    \nplt.figure(figsize=(8,5))\nplt.plot(week_num_us,weekwise_confirmed_us,linewidth=3)\nplt.plot(week_num_us,weekwise_recovered_us,linewidth=3)\nplt.plot(week_num_us,weekwise_deaths_us,linewidth=3)\nplt.xlabel(\"Week of Number in US\")\nplt.ylabel(\"Number of cases in US\")\nplt.title(\"Weekly Progress of different type of cases in US\")\nplt.show()","129289a7":"max_ina = datewise_indonesia[\"Confirmed\"].max()\nchina_data = covid[covid[\"Country\/Region\"]==\"Mainland China\"]\nsouthKor_data = covid[covid[\"Country\/Region\"]==\"South Korea\"]\ngermany_data = covid[covid[\"Country\/Region\"]==\"Germany\"]\nUS_data = covid[covid[\"Country\/Region\"]==\"US\"]\nitaly_data = covid[covid[\"Country\/Region\"]==\"Italy\"]\nspain_data = covid[covid[\"Country\/Region\"]==\"Spain\"]\n\nchina = china_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nsouthKorea = southKor_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\ngermany = germany_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nUS = US_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nitaly = italy_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\nspain = spain_data.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'})\n\nprint(\"It took\", datewise_indonesia[datewise_indonesia[\"Confirmed\"]>0].shape[0],\"days in Indonesian to reach\",max_ina,\"Confirmed Cases\")\nprint(\"It took\", china[(china[\"Confirmed\"]>0)&(china[\"Confirmed\"]<=max_ina)].shape[0],\"days in  China to reach number of Confirmed Cases\")\nprint(\"It took\", southKorea[(southKorea[\"Confirmed\"]>0)&(southKorea[\"Confirmed\"]<=max_ina)].shape[0],\"days in  South Korea to reach number of Confirmed Cases\")\nprint(\"It took\", germany[(germany[\"Confirmed\"]>0)&(germany[\"Confirmed\"]<=max_ina)].shape[0],\"days in  Germany to reach number of Confirmed Cases\")\nprint(\"It took\", US[(US[\"Confirmed\"]>0)&(US[\"Confirmed\"]<=max_ina)].shape[0],\"days in  US to reach number of Confirmed Cases\")\nprint(\"It took\", italy[(italy[\"Confirmed\"]>0)&(italy[\"Confirmed\"]<=max_ina)].shape[0],\"days in  Italy to reach number of Confirmed Cases\")\nprint(\"It took\", spain[(spain[\"Confirmed\"]>0)&(spain[\"Confirmed\"]<=max_ina)].shape[0],\"days in  Spain to reach number of Confirmed Cases\")","0e63b146":"datewise[\"Days Since\"] = datewise.index-datewise.index[0]\ndatewise[\"Days Since\"] = datewise[\"Days Since\"].dt.days\ntrain = datewise.iloc[:int(datewise.shape[0]*0.95)]\nvalid =  datewise.iloc[:int(datewise.shape[0]*0.95)]\nmodel_scores=[]","6f84b26c":"reg = LinearRegression(normalize=True)\nsvm = SVR(C=1,degree=5,kernel='poly',epsilon=0.001)\nreg.fit(np.array(train[\"Days Since\"]).reshape(-1,1),np.array(train[\"Confirmed\"]).reshape(-1,1))\nsvm.fit(np.array(train[\"Days Since\"]).reshape(-1,1),np.array(train[\"Confirmed\"]).reshape(-1,1))\n","9ab63394":"prediction_valid_reg = reg.predict(np.array(valid[\"Days Since\"]).reshape(-1,1))\nprediction_valid_svm = svm.predict(np.array(valid[\"Days Since\"]).reshape(-1,1))","05f19485":"new_date = []\nnew_predict_lr = []\nnew_predict_svm = []\nfor i in range(1,18):\n    new_date.append(datewise.index[-1]+timedelta(days=i))\n    new_predict_lr.append(reg.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0][0])\n    new_predict_svm.append(svm.predict(np.array(datewise[\"Days Since\"].max()+i).reshape(-1,1))[0])\npd.set_option(\"display.float_format\",lambda x: '%.f' % x)\nmodel_predict = pd.DataFrame(zip(new_date,new_predict_lr,new_predict_svm),columns = [\"Dates\",\"LR\",\"SVR\"])\nmodel_predict.head(10)","fa23901c":"model_train = datewise.iloc[:int(datewise.shape[0]*0.95)]\nvalid = datewise.iloc[int(datewise.shape[0]*0.85):]","dcbad086":"holt = Holt(np.asarray(model_train[\"Confirmed\"])).fit(smoothing_level=1.4,smoothing_slope=0.2)\ny = valid.copy()\ny[\"Holt\"] = holt.forecast(len(valid))","9343bd8f":"holt_new_date=[]\nholt_new_predict=[]\n\nfor i in range(1,18):\n    holt_new_date.append(datewise.index[-1]+timedelta(days=i))\n    holt_new_predict.append(holt.forecast((len(valid)+i)) [-1])\n\nmodel_predict[\"Holts Linear Model Predictions\"]=holt_new_predict\nmodel_predict.head()","6bfa34fa":"# DIFFERENT COUNTRY ANALYSIS","82878b08":"# # DATEWISE DAYS SINCE WITH LINEAR REGRESSION"}}