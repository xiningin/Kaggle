{"cell_type":{"306aef88":"code","869492ca":"code","0b0025ce":"code","4f35f9dd":"code","20ed599c":"code","fb913ffc":"code","6ead26ad":"code","f0d6aa8b":"code","021bdca0":"code","1645fd0d":"code","ca7dec00":"code","2f55832d":"code","6ae197e0":"code","7a153ee8":"code","b1a58ac2":"code","14341a06":"code","a8e34209":"code","5adac473":"markdown","6924ddc4":"markdown","f19799fa":"markdown","0eaec67a":"markdown","b982238a":"markdown","1ca06b6c":"markdown","81dde505":"markdown","d5ddbd5a":"markdown","1c870c92":"markdown","f9aa97d6":"markdown","3521b1ca":"markdown","fb78064b":"markdown","537e847a":"markdown","bdce4779":"markdown","a2a63f30":"markdown","6af6dcac":"markdown","d2400bbe":"markdown","c0d0969b":"markdown","37276772":"markdown","2d6c5d6e":"markdown"},"source":{"306aef88":"!pip install toloka-kit==0.1.11\n!pip install crowd-kit==0.0.5\n!pip install pandas\n\nimport datetime\nimport sys\nimport time\nimport logging\n\nimport pandas\nimport numpy as np\n\nimport toloka.client as toloka\nimport toloka.client.project.template_builder as tb\nfrom crowdkit.aggregation import DawidSkene\n\nlogging.basicConfig(\n    format='[%(levelname)s] %(name)s: %(message)s',\n    level=logging.INFO,\n    stream=sys.stdout,\n)","869492ca":"toloka_client = toloka.TolokaClient(input(\"Enter your token:\"), 'PRODUCTION')  # Or switch to 'SANDBOX'\nprint(toloka_client.get_requester())","0b0025ce":"project = toloka.Project(\n    public_name='Is it a male or female speaker?',\n    public_description='Listen to the audio and determine if it is a male or female speaker.',\n)","4f35f9dd":"audio_viewer = tb.AudioViewV1(\n    tb.InputData('path'),\n    validation=tb.PlayedConditionV1(hint='you need to listen to the audio'),\n)\n\nradio_group_field = tb.ButtonRadioGroupFieldV1(\n    tb.OutputData('result'),\n    [\n        tb.GroupFieldOption('female', 'Female'),\n        tb.GroupFieldOption('male', 'Male'),\n    ],\n    label='Is it a male or female speaker?',\n    validation=tb.RequiredConditionV1(),\n)\n\ntask_width_plugin = tb.TolokaPluginV1(\n    layout=tb.TolokaPluginV1.TolokaPluginLayout(\n        kind='scroll', \n        task_width=300,\n    )\n)\n\nhot_keys_plugin = tb.HotkeysPluginV1(\n    key_1=tb.SetActionV1(tb.OutputData('result'), 'female'),\n    key_2=tb.SetActionV1(tb.OutputData('result'), 'male'),\n)\n\nproject_interface = toloka.project.TemplateBuilderViewSpec(\n    view=tb.ListViewV1([audio_viewer, radio_group_field]),\n    plugins=[task_width_plugin, hot_keys_plugin],\n)","20ed599c":"input_specification = {'path': toloka.project.UrlSpec()}\noutput_specification = {'result': toloka.project.StringSpec()}\n\nproject.task_spec = toloka.project.task_spec.TaskSpec(\n    input_spec=input_specification,\n    output_spec=output_specification,\n    view_spec=project_interface,\n)","fb913ffc":"project.public_instructions = \"\"\"Listen to the short audio clip and determine whether it is a male or female speaking.\"\"\"","6ead26ad":"project = toloka_client.create_project(project)","f0d6aa8b":"!curl https:\/\/tlk.s3.yandex.net\/ext_dataset\/emov-db-mp3\/emov_db.tsv --output emov_db.tsv\n\ndataset = pandas.read_csv('emov_db.tsv', sep='\\t')\nprint(dataset)\n\ndataset = dataset.sample(frac=1).reset_index(drop=True)\ngolden_dataset, main_dataset, _ = np.split(dataset, [20, 120], axis=0)\n\nprint(f'\\ngolden_dataset - {len(golden_dataset)}')\nprint(f'\\nmain_dataset - {len(main_dataset)}')","021bdca0":"pool = toloka.Pool(\n    project_id=project.id,\n    # Give the pool any convenient name. You are the only one who will see it.\n    private_name='Is it a male or female speaker',\n    may_contain_adult_content=False,\n    # Set the price per task page.\n    reward_per_assignment=0.01,\n    will_expire=datetime.datetime.utcnow() + datetime.timedelta(days=365),\n    # Overlap. This is the number of users who will complete the same task.\n    defaults=toloka.Pool.Defaults(default_overlap_for_new_task_suites=3),\n    # Time allowed for completing a task page\n    assignment_max_duration_seconds=1200,\n    filter=(\n        (toloka.filter.Languages.in_('EN')) &\n        (\n            (toloka.filter.ClientType == 'TOLOKA_APP') | \n            (toloka.filter.ClientType == 'BROWSER')\n        )\n    ),\n)","1645fd0d":"pool.quality_control.add_action(\n    collector=toloka.collectors.GoldenSet(history_size=10),\n    conditions=[\n        toloka.conditions.GoldenSetCorrectAnswersRate <= 80.0,\n        toloka.conditions.GoldenSetAnswersCount >= 1\n    ],\n    action=toloka.actions.RestrictionV2(\n        scope='POOL',\n        duration=3,\n        duration_unit='DAYS',\n        private_comment='bad quality'\n    )\n)","ca7dec00":"pool.set_mixer_config(\n    real_tasks_count=4,\n    golden_tasks_count=1,\n)","2f55832d":"pool = toloka_client.create_pool(pool)","6ae197e0":"golden_tasks = [\n    toloka.task.Task(\n        pool_id=pool.id,\n        input_values={'path': row['url']},\n        known_solutions = [\n            toloka.task.BaseTask.KnownSolution(\n                output_values={'result': row['sex']}\n            )\n        ],\n        infinite_overlap=True,\n    )\n    for _, row in golden_dataset.iterrows()\n]\ntasks = [\n    toloka.task.Task(\n        pool_id=pool.id,\n        input_values={'path': row['url']},\n    )\n    for _, row in main_dataset.iterrows()\n]\ncreated_tasks = toloka_client.create_tasks(golden_tasks + tasks, allow_defaults=True)\nprint(len(created_tasks.items))","7a153ee8":"pool = toloka_client.open_pool(pool.id)\nprint(pool.status)","b1a58ac2":"pool_id = pool.id\n\ndef wait_pool_for_close(pool_id, minutes_to_wait=1):\n    sleep_time = 60 * minutes_to_wait\n    pool = toloka_client.get_pool(pool_id)\n    while not pool.is_closed():\n        op = toloka_client.get_analytics([toloka.analytics_request.CompletionPercentagePoolAnalytics(subject_id=pool.id)])\n        op = toloka_client.wait_operation(op)\n        percentage = op.details['value'][0]['result']['value']\n        print(\n            f'   {datetime.datetime.now().strftime(\"%H:%M:%S\")}\\t'\n            f'Pool {pool.id} - {percentage}%'\n        )\n        time.sleep(sleep_time)\n        pool = toloka_client.get_pool(pool.id)\n    print('Pool was closed.')\n\nwait_pool_for_close(pool_id)","14341a06":"answers = []\n\nfor assignment in toloka_client.get_assignments(pool_id=pool_id, status='ACCEPTED'):\n    for task, solution in zip(assignment.tasks, assignment.solutions):\n        if not task.known_solutions:\n            answers.append([task.input_values['path'], solution.output_values['result'], assignment.user_id])\n\nprint(f'answers count: {len(answers)}')","a8e34209":"# Prepare dataframe\nanswers_df = pandas.DataFrame(answers, columns=['task', 'label', 'performer'])\n# Run aggregation\npredicted_answers = DawidSkene(n_iter=20).fit_predict(answers_df)\n\nprint(predicted_answers)","5adac473":"Create task interface.\n> Check the [Interface section](https:\/\/toloka.ai\/knowledgebase\/interface) of our Knowledge Base for more tips on interface design.","6924ddc4":"Create pool","f19799fa":"Set up [Quality control](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/control.html):\n  - Ban performers who give incorrect responses to control tasks. Since tasks such as these have an answer that can be used as ground truth, we can use standard quality control rules like golden sets.\n\nRead more about [quality control principles](https:\/\/toloka.ai\/knowledgebase\/quality-control) in our Knowledge Base or check out [control tasks settings](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/goldenset.html) in the Requester\u2019s Guide.","0eaec67a":"# Audio classification\n\nWe have a set of voice recordings from different people. We need to get these classified according to the speaker\u2019s gender. We ask performers to listen to the recordings and decide whether it is a man or a woman speaking.","b982238a":"## Create the main pool\nA pool is a set of paid tasks grouped into task pages. These tasks are sent out for completion at the same time. \n\n>Note: All tasks within a pool have the same settings (price, quality control, etc.)\n\nAudio classification tasks are normally paid as basic tasks (e.g. binary classification) because these tasks do not take much time. Read more about [pricing principles](https:\/\/toloka.ai\/knowledgebase\/pricing) in our Knowledge Base.\n\nSets an overlap of 3 to get a more confident final label. To understand [how this rule works](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/mvote.html), go to the Requester\u2019s Guide.\n\nLet's add language filter so performers who speak English will be invited to complete this task. Then choose Toloka web version and Toloka for mobile clients. These filters will make it possible for performers to complete your task on their computers or mobile devices.","1ca06b6c":"Specifications are a description of input data that will be used in a project and the output data that will be collected from the performers.\n\n> Read more about [input and output data specifications](https:\/\/yandex.ru\/support\/toloka-tb\/operations\/create-specs.html?lang=en) in the Requester\u2019s Guide.","81dde505":"Aggregation results using the Dawid-Skene model. We use this aggregation model because our questions are of comparable difficulty, and we don't have many control tasks.\n\nRead more about the [Dawid-Skene model](https:\/\/yandex.com\/support\/toloka-requester\/concepts\/result-aggregation.html#aggr__dawid-skene) in the Requester\u2019s Guide or get at an overview of different [aggregation models](https:\/\/toloka.ai\/knowledgebase\/aggregation) our Knowledge Base.\n\nMore aggregation models in [Crowd-Kit](https:\/\/github.com\/Toloka\/crowd-kit#crowd-kit-computational-quality-control-for-crowdsourcing).","d5ddbd5a":"## Preparing and uploading tasks\n\n> Note: Control tasks are tasks that already contain the correct response. They are used for checking the quality of responses from performers. The performer's response is compared to the response you provided. If they match, it means the performer answered correctly.`","1c870c92":"For performers, our interface will look like this.\n\n<table  align=\"center\">\n  <tr><td>\n    <img src=\"https:\/\/github.com\/Toloka\/toloka-kit\/blob\/main\/examples\/3.audio_analysis\/audio_classification\/img\/tasks_preview.png?raw=true\"\n         alt=\"Task page\"  width=\"1000\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n    <b>Figure 1.<\/b> What the task page can looks like.\n  <\/td><\/tr>\n<\/table>","f9aa97d6":"Write comprehensive instructions.\n> Get more tips on [designing instructions](https:\/\/toloka.ai\/knowledgebase\/instruction) in our Knowledge Base.","3521b1ca":"\u0421reate toloka-client instance. All api calls will go through it. More about OAuth token in our [Learn the basics example](https:\/\/github.com\/Toloka\/toloka-kit\/tree\/main\/examples\/0.getting_started\/0.learn_the_basics) [![Open In Colab](https:\/\/colab.research.google.com\/assets\/colab-badge.svg)](https:\/\/colab.research.google.com\/github\/Toloka\/toloka-kit\/blob\/main\/examples\/0.getting_started\/0.learn_the_basics\/learn_the_basics.ipynb)","fb78064b":"## Create a project\nEnter a clear project name and description.\n> Note: The project name and description will be visible to the performers.","537e847a":"## Receiving responses","bdce4779":"Prepare environment and import all we'll need.","a2a63f30":"Start the pool.\n\n**Important.** Remember that real Toloka performers will complete the tasks.\nDouble check that everything is correct\nwith your project configuration before you start the pool","6af6dcac":"Create a project.","d2400bbe":"## Preparing data\nThis example uses [EmoV-DB dataset](https:\/\/github.com\/numediart\/EmoV-DB).\n\nBibTex:\n```\n@article{adigwe2018emotional,\n  title={The emotional voices database: Towards controlling the emotion dimension in voice generation systems},\n  author={Adigwe, Adaeze and Tits, No{\\'e} and Haddad, Kevin El and Ostadabbas, Sarah and Dutoit, Thierry},\n  journal={arXiv preprint arXiv:1806.09514},\n  year={2018}\n}\n```\n\nLet's load this dataset and split it into two parts.","c0d0969b":"Specify\tthe number of tasks per page. We recommend putting as many tasks on one page as a performer can complete in 1 to 5 minutes. That way, performers are less likely to get tired, and they won\u2019t lose a significant amount of data if a technical issue occurs.\n\nTo learn more about [grouping tasks](https:\/\/yandex.com\/support\/search-results\/?service=toloka-requester&query=smart+mixing) into suites, read the Requester\u2019s Guide. ","37276772":"Get responses\n\nWhen all the tasks are completed, look at the responses from performers.","2d6c5d6e":"Wait until the pool is completed."}}