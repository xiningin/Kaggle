{"cell_type":{"80e70eb5":"code","a3d0647c":"code","c9995281":"code","ddf608ed":"code","6be46a7f":"code","94133386":"code","1bcef072":"code","05b33160":"code","2ad580ef":"code","e390d880":"code","680d8cb2":"code","f039c3e8":"code","532d52d3":"code","819b3db1":"code","86d44c05":"code","0fe6bfa9":"code","7e4ee17f":"code","9e017d0d":"code","3e33e9aa":"code","6ac1cd33":"code","9b43562e":"code","472f7b09":"code","344668c1":"code","c9372fcf":"code","2976ca4d":"code","433e7734":"code","ed083ce6":"code","7c14254e":"code","07d63aff":"code","e09cf45d":"code","fbfb29c7":"code","77db2cd1":"code","d38e63a0":"code","8a2aec2c":"code","2d450871":"code","37705b7a":"code","7501c05d":"code","0b7dc94d":"code","99a90982":"code","146c85b4":"code","5881fad3":"code","f6457229":"code","0bdb99dc":"code","6edd5534":"code","20d3544f":"code","8a0b9530":"code","04ff413c":"code","98288c28":"code","3c562f8a":"code","e57d4c25":"code","22f833dd":"code","15a1a5ea":"code","345420eb":"code","fad4fa3a":"code","8dd985f4":"code","4b5e0205":"code","801afd12":"code","45199491":"code","1639195c":"code","fb95b861":"code","e86f7f73":"code","31d1beba":"code","5c2e4cca":"code","e2891ac3":"code","9a3ae0e2":"code","ae618a45":"code","640d9c97":"code","9a00993b":"code","9be4bcc4":"code","32a17a8d":"code","e349b9da":"code","7f742aca":"code","4cc17593":"code","a83fa905":"code","a4376854":"code","8ac2eb24":"code","7727403e":"code","72aa36cf":"code","aaa81719":"code","5824b873":"code","5aa5ac86":"code","30a1020c":"code","2cfbeed5":"code","0d543ea0":"code","238f62b5":"code","f81eb41d":"code","57b84d4a":"code","573dbd33":"code","d1619390":"code","88d70c01":"code","7bb8b4a4":"code","2185368b":"code","43ad2047":"code","4b915757":"code","1c60e403":"code","8506bcc0":"code","b7100649":"code","d6938c1c":"code","0b25304d":"code","23ce8765":"code","db0386b2":"code","0ad729c2":"code","39cdf5dc":"code","f2706691":"markdown","22e90ee6":"markdown","a223ddae":"markdown","2e94f945":"markdown","71b6f697":"markdown","4bbca1ea":"markdown","99fe1806":"markdown"},"source":{"80e70eb5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a3d0647c":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nimport optuna\nimport gc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom optuna.integration import _lightgbm_tuner as tuner","c9995281":"PATH = \"..\/input\/ncaam-march-mania-2021\/\"","ddf608ed":"RegularSeason_DetailedResults = pd.read_csv(PATH + \"MRegularSeasonDetailedResults.csv\")\nTourney_Detailed_Results = pd.read_csv(PATH + \"MNCAATourneyDetailedResults.csv\")","6be46a7f":"RegularSeason_DetailedResults = pd.read_csv(PATH + \"MRegularSeasonDetailedResults.csv\")\nTourney_Detailed_Results = pd.read_csv(PATH + \"MNCAATourneyDetailedResults.csv\")","94133386":"test_df = pd.read_csv(PATH + \"MSampleSubmissionStage1.csv\")","1bcef072":"#ID\u304b\u3089\u30b7\u30fc\u30ba\u30f3\u3001\u30c1\u30fc\u30e0ID\u3092\u62bd\u51fa\u3002Pred\u306f\u30c1\u30fc\u30e0ID\u304c\u82e5\u3044\u65b9\u304c\u52dd\u3066\u30701\u3001\u8ca0\u3051\u30670\n\ntest_df[\"Season\"] = test_df[\"ID\"].map(lambda x: int(x[:4]))\ntest_df[\"WTeamID\"] = test_df[\"ID\"].map(lambda x: int(x[5:9]))\ntest_df[\"LTeamID\"] = test_df[\"ID\"].map(lambda x: int(x[10:14]))\ntest_df","05b33160":"#ID\u304b\u3089\u30b7\u30fc\u30ba\u30f3\u3001\u30c1\u30fc\u30e0ID\u3092\u62bd\u51fa\u3002Pred\u306f\u30c1\u30fc\u30e0ID\u304c\u82e5\u3044\u65b9\u304c\u52dd\u3066\u30701\u3001\u8ca0\u3051\u30670\n\ntest_df[\"Season\"] = test_df[\"ID\"].map(lambda x: int(x[:4]))\ntest_df[\"WTeamID\"] = test_df[\"ID\"].map(lambda x: int(x[5:9]))\ntest_df[\"LTeamID\"] = test_df[\"ID\"].map(lambda x: int(x[10:14]))\ntest_df = test_df.drop([\"ID\",\"Pred\"],axis=1)\ntest_df","2ad580ef":"#\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u306e\u7d50\u679c\n\nTourney_Detailed_Results.head()","e390d880":"#\u4e88\u6e2c\u306e\u969b\u306b\u4e0e\u3048\u3089\u308c\u308b\u5909\u6570\u306e\u307f\u306b\u3059\u308b\n#\u5404\u5909\u6570\u306e\u76f8\u95a2\u3092\u898b\u305f\u3044\u305f\u3081\uff0c\u5f97\u5931\u70b9\u306f\u6b8b\u3057\u3066\u304a\u304f\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f2015~2019\u5e74\u306e\u305f\u3081\uff0c2014\u5e74\u4ee5\u524d\u306e\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u3059\u308b\n\nTourney_Detailed_Results = Tourney_Detailed_Results[(Tourney_Detailed_Results[\"Season\"] < 2015)][[\"Season\",\"WTeamID\",\"LTeamID\",\"WScore\",\"LScore\"]]\nTourney_Detailed_Results[\"Result\"] = 1\nTourney_Detailed_Results","680d8cb2":"all_df = pd.concat((Tourney_Detailed_Results, test_df), sort=False).reset_index(drop=True)\nall_df","f039c3e8":"#\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u306e\u7d50\u679c\n\nRegularSeason_DetailedResults.head()","532d52d3":"Tourney_Seeds = pd.read_csv(PATH + \"MNCAATourneySeeds.csv\")","819b3db1":"#\u4e21\u30c1\u30fc\u30e0\u306e\u30b7\u30fc\u30c9\u3092\u8ffd\u52a0\n\nall_df = pd.merge(all_df, Tourney_Seeds, left_on=[\"Season\", \"WTeamID\"], right_on=[\"Season\", \"TeamID\"], how=\"left\")\nall_df.rename(columns={\"Seed\":\"WinningSeed\"}, inplace=True)\nall_df = all_df.drop([\"TeamID\"], axis=1)\n\nall_df = pd.merge(all_df, Tourney_Seeds, left_on=[\"Season\", \"LTeamID\"], right_on=[\"Season\", \"TeamID\"], how=\"left\")\nall_df.rename(columns={\"Seed\":\"LosingSeed\"}, inplace=True)\nall_df = all_df.drop([\"TeamID\"], axis=1)\n\nall_df","86d44c05":"#\u30b7\u30fc\u30c9\u304b\u3089\uff0c\u30db\u30fc\u30e0\u306e\u533a\u5206\u306e\u8a18\u53f7\u3092\u62bd\u51fa\n#\u30b3\u30d4\u30fc\u3057\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u4ee3\u5165\u3059\u308b\u3068\u51fa\u308b\u8b66\u544a\u304c\u3042\u308b\u304c\uff0c\u5b9f\u884c\u7d50\u679c\u306b\u554f\u984c\u304c\u306a\u3044\u305f\u3081\uff0c\u4e00\u65e6\u4fdd\u7559\n\nall_df[\"WinningHome_sym\"] = all_df[\"WinningSeed\"].str.extract('([A-Z])',expand=True)\nall_df[\"LosingHome_sym\"] = all_df[\"LosingSeed\"].str.extract('([A-Z])',expand=True)\n\nall_df","0fe6bfa9":"MSeasons = pd.read_csv(PATH + \"MSeasons.csv\")","7e4ee17f":"MSeasons.head()","9e017d0d":"#\u305d\u308c\u305e\u308c\uff0c\u51fa\u73fe\u56de\u6570\u304c\u5c11\u306a\u3044\u5730\u57df\u3092other\u3068\u3057\u3066\u4ee3\u5165\n\nMSeasons.loc[(MSeasons[\"RegionW\"]!=\"East\"),\"RegionW\"] = \"OtherW\"\nMSeasons.loc[(MSeasons[\"RegionX\"].str.contains(\"^(?!.*(West|Midwest|Southeast|South)).*$\")),\"RegionX\"] = \"OtherX\"\nMSeasons.loc[(MSeasons[\"RegionY\"].str.contains(\"^(?!.*(Midwest|Southeast|South)).*$\")),\"RegionY\"] = \"OtherY\"\nMSeasons.loc[(MSeasons[\"RegionZ\"].str.contains(\"^(?!.*(West)).*$\")),\"RegionZ\"] = \"OtherZ\"\n\nMSeasons = MSeasons.drop([\"DayZero\"],axis=1)","3e33e9aa":"#\u30db\u30fc\u30e0\u3092\u8868\u3059\u8a18\u53f7(W,X,Y,Z)\u304c\u793a\u3059\uff0c\u5730\u57df\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\n\nfig, axes = plt.subplots(2, 2, figsize=(20, 10))\nsns.countplot(ax=axes[0][0], data=MSeasons, x='RegionW')\nsns.countplot(ax=axes[0][1], data=MSeasons, x='RegionX')\nsns.countplot(ax=axes[1][0], data=MSeasons, x='RegionY')\nsns.countplot(ax=axes[1][1], data=MSeasons, x='RegionZ')\nplt.show()","6ac1cd33":"#\u5730\u57df\u3054\u3068\u306b\u5272\u308a\u632f\u3089\u308c\u305f\u8a18\u53f7\u3054\u3068\u306b\uff0c\u30b7\u30fc\u30ba\u30f3\u3068\u5730\u57df\u540d\u306e\u5909\u6570\u3092\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u3059\u308b\n\nMseasons_w = MSeasons[[\"Season\",\"RegionW\"]].copy()\nMseasons_x = MSeasons[[\"Season\",\"RegionX\"]].copy()\nMseasons_y = MSeasons[[\"Season\",\"RegionY\"]].copy()\nMseasons_z = MSeasons[[\"Season\",\"RegionZ\"]].copy()\n\nMseasons_w.rename(columns={\"RegionW\":\"Region\"},inplace=True)\nMseasons_x.rename(columns={\"RegionX\":\"Region\"},inplace=True)\nMseasons_y.rename(columns={\"RegionY\":\"Region\"},inplace=True)\nMseasons_z.rename(columns={\"RegionZ\":\"Region\"},inplace=True)\n\nMseasons_w[\"sym\"] = \"W\"\nMseasons_x[\"sym\"] = \"X\"\nMseasons_y[\"sym\"] = \"Y\"\nMseasons_z[\"sym\"] = \"Z\"\n\nMseasons_home = pd.concat((Mseasons_w, Mseasons_x, Mseasons_y, Mseasons_z)).reset_index(drop=True)","9b43562e":"#\u5bfe\u6226\u30c7\u30fc\u30bf\u306b\u4e21\u30c1\u30fc\u30e0\u306e\u30db\u30fc\u30e0\u306e\u5730\u57df\u3092\u8ffd\u52a0\n\nall_df = pd.merge(all_df, Mseasons_home, left_on=[\"Season\", \"WinningHome_sym\"], right_on=[\"Season\", \"sym\"], how=\"left\")\nall_df = all_df.drop([\"WinningHome_sym\",\"sym\"],axis=1)\nall_df.rename(columns={\"Region\":\"WinningRegion\"}, inplace=True)\n\nall_df = pd.merge(all_df, Mseasons_home, left_on=[\"Season\", \"LosingHome_sym\"], right_on=[\"Season\", \"sym\"], how=\"left\")\nall_df = all_df.drop([\"LosingHome_sym\",\"sym\"],axis=1)\nall_df.rename(columns={\"Region\":\"LosingRegion\"}, inplace=True)","472f7b09":"#\u30b7\u30fc\u30c9\u756a\u53f7\u3092\u62bd\u51fa\n\nall_df[\"WinningSeed\"] = all_df[\"WinningSeed\"].str.extract(\"(\\d+)\",expand=True)\nall_df[\"LosingSeed\"] = all_df[\"LosingSeed\"].str.extract(\"(\\d+)\", expand=True)\n\nall_df","344668c1":"RegularSeason_Detailed_Results = pd.read_csv(PATH + \"MRegularSeasonDetailedResults.csv\")","c9372fcf":"RegularSeason_Detailed_Results.head()","2976ca4d":"#\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u306e\u8a66\u5408\u306e\u8a73\u7d30\u306e\u30ab\u30e9\u30e0\n\nRegularSeason_Detailed_Results.columns","433e7734":"#\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u306e\u8a66\u5408\u306e\u8a73\u7d30\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\uff0c\u5404\u8a66\u5408\u3067\u306e\u30c1\u30fc\u30e0\u306e\u5404\u7a2e\u30b9\u30b3\u30a2\u306b\u5909\u63db\n\nW_columns = [\"Season\",\"WTeamID\",\"WFGM\",\"WFGA\",\"WFGM3\",\"WFGA3\",\"WFTM\",\"WFTA\",\"WOR\",\"WDR\",\"WAst\",\"WTO\",\"WStl\",\"WPF\"]\nL_columns = [\"Season\",\"LTeamID\",\"LFGM\",\"LFGA\",\"LFGM3\",\"LFGA3\",\"LFTM\",\"LFTA\",\"LOR\",\"LDR\",\"LAst\",\"LTO\",\"LStl\",\"LPF\"]\ncolumns_name = [\"Season\", \"TeamID\", \"FGM\", \"FGA\", \"FGM3\", \"FGA3\", \"FTM\", \"FTA\", \"OR\", \"DR\", \"Ast\", \"TO\", \"Stl\", \"PF\"]\n\nseason_winning_team = RegularSeason_Detailed_Results[W_columns]\nseason_winning_team_count = RegularSeason_Detailed_Results[[\"Season\",\"WTeamID\",\"WFGA\"]].copy()\nseason_winning_team_count = season_winning_team_count.groupby([\"Season\",\"WTeamID\"]).count()\nseason_losing_team = RegularSeason_Detailed_Results[L_columns]\nseason_losing_team_count = RegularSeason_Detailed_Results[[\"Season\",\"LTeamID\",\"LFGA\"]].copy()\nseason_losing_team_count = season_losing_team_count.groupby([\"Season\",\"LTeamID\"]).count()\nseason_winning_team.columns = columns_name\nseason_winning_team_count.index.names = [\"Season\",\"TeamID\"]\nseason_winning_team_count.columns = [\"Wcount\"]\nseason_losing_team.columns = columns_name\nseason_losing_team_count.index.names = [\"Season\",\"TeamID\"]\nseason_losing_team_count.columns = [\"Lcount\"]\n\nRegularSeason_Detailed_Results = pd.concat((season_winning_team, season_losing_team)).reset_index(drop=True)\nRegularSeason_Detailed_Results = pd.merge(RegularSeason_Detailed_Results, season_winning_team_count, on=[\"Season\",\"TeamID\"], how=\"left\")\nRegularSeason_Detailed_Results = pd.merge(RegularSeason_Detailed_Results, season_losing_team_count, on=[\"Season\",\"TeamID\"], how=\"left\")\nRegularSeason_Detailed_Results","ed083ce6":"#\u30b7\u30fc\u30ba\u30f3\uff0c\u30c1\u30fc\u30e0\u3054\u3068\u306e\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u306e\u5404\u7a2e\u30b9\u30b3\u30a2\u5408\u8a08\n\nRegularSeason_Detailed_Results = RegularSeason_Detailed_Results.groupby([\"Season\",\"TeamID\"]).sum()\nRegularSeason_Detailed_Results","7c14254e":"#\u5404\u7a2e\u30b7\u30e5\u30fc\u30c8\u7387\uff08\u30d5\u30ea\u30fc\u30b9\u30ed\u30fc\uff0c2p\u30b7\u30e5\u30fc\u30c8\uff0c3p\u30b7\u30e5\u30fc\u30c8\uff09\uff0c\u52dd\u7387\u3092\u8ffd\u52a0\n\nRegularSeason_Detailed_Results[\"FG_suc_ratio\"] = RegularSeason_Detailed_Results[\"FGM\"]\/RegularSeason_Detailed_Results[\"FGA\"]\nRegularSeason_Detailed_Results[\"FG3_suc_ratio\"] = RegularSeason_Detailed_Results[\"FGM3\"]\/RegularSeason_Detailed_Results[\"FGA3\"]\nRegularSeason_Detailed_Results[\"FT_suc_ratio\"] = RegularSeason_Detailed_Results[\"FTM\"]\/RegularSeason_Detailed_Results[\"FTA\"]\nRegularSeason_Detailed_Results[\"W_rate\"] = RegularSeason_Detailed_Results[\"Wcount\"]\/(RegularSeason_Detailed_Results[\"Wcount\"] + RegularSeason_Detailed_Results[\"Lcount\"])\n\nRegularSeason_Detailed_Results = RegularSeason_Detailed_Results.drop([\"Wcount\",\"Lcount\"], axis=1)\nRegularSeason_Detailed_Results","07d63aff":"RegularSeason_Compact_Results = pd.read_csv(PATH + \"MRegularSeasonCompactResults.csv\")","e09cf45d":"#RegularSeason_Compact_Results\u3092\u52dd\u6557\u95a2\u4fc2\u306a\u304f\u3001\u5404\u8a66\u5408\u306e\u30c1\u30fc\u30e0\u3054\u3068\u306e\u5f97\u5931\u70b9\u3068\u30b7\u30fc\u30ba\u30f3\u306b\u3002\n\nseason_winning_team = RegularSeason_Compact_Results[[\"Season\",\"WTeamID\",\"WScore\",\"LScore\"]].copy()\nseason_losing_team = RegularSeason_Compact_Results[[\"Season\",\"LTeamID\",\"LScore\",\"WScore\"]].copy()\nseason_winning_team.rename(columns={\"WTeamID\":\"TeamID\",\"WScore\":\"Score\",\"LScore\":\"LosingScore\"}, inplace=True)\nseason_losing_team.rename(columns={\"LTeamID\":\"TeamID\",\"LScore\":\"Score\",\"WScore\":\"LosingScore\"}, inplace=True)\nRegularSeason_Compact_Results = pd.concat((season_winning_team, season_losing_team),sort=False).reset_index(drop=True)\n\nRegularSeason_Compact_Results.head()","fbfb29c7":"#\u5404\u30c1\u30fc\u30e0\u306e\u30b7\u30fc\u30ba\u30f3\u3054\u3068\u306e\u30b9\u30b3\u30a2\u306e\u5408\u8a08\n#\u5e73\u5747\u3067\u306f\u306a\u304f\u5408\u8a08\u306a\u306e\u306f\u8a66\u5408\u6570\u306e\u60c5\u5831\u3092\u5185\u5305\u3055\u305b\u308b\u305f\u3081\n\nRegularSeason_Compact_Results_Final = RegularSeason_Compact_Results.groupby([\"Season\",\"TeamID\"])[[\"Score\",\"LosingScore\"]].sum().reset_index()\nRegularSeason_Compact_Results_Final.head()","77db2cd1":"#\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u306e\u5404\u7a2e\u5408\u8a08\u30b9\u30b3\u30a2\u3084\u30b7\u30e5\u30fc\u30c8\u7387\u306e\u30b9\u30b3\u30a2\u3092\uff0c\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u3067\u306e\u5bfe\u6226\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\n\nall_df = pd.merge(all_df, RegularSeason_Detailed_Results, left_on=[\"Season\",\"WTeamID\"], right_on=[\"Season\", \"TeamID\"], how=\"left\")\nall_df.rename(columns={\"OR\":\"TWOR\",\"DR\":\"TWDR\",\"Ast\":\"TWAst\",\"TO\":\"TWTO\",\"Stl\":\"TWStl\",\"PF\":\"TWPF\",\"FGA\":\"TWFGA\",\"FGM\":\"TWFGM\",\"FGA3\":\"TWFGA3\",\"FGM3\":\"TWFGM3\",\"FTA\":\"TWFTA\",\"FTM\":\"TWFTM\",\"FG_suc_ratio\":\"WFG_suc_ratio\",\"FG3_suc_ratio\":\"WFG3_suc_ratio\",\"FT_suc_ratio\":\"WFT_suc_ratio\",\"W_rate\":\"WW_rate\"}, inplace=True)\nall_df = pd.merge(all_df, RegularSeason_Detailed_Results, left_on=[\"Season\",\"LTeamID\"], right_on=[\"Season\", \"TeamID\"], how=\"left\")\nall_df.rename(columns={\"OR\":\"TLOR\",\"DR\":\"TLDR\",\"Ast\":\"TLAst\",\"TO\":\"TLTO\",\"Stl\":\"TLStl\",\"PF\":\"TLPF\",\"FGA\":\"TLFGA\",\"FGM\":\"TLFGM\",\"FGA3\":\"TLFGA3\",\"FGM3\":\"TLFGM3\",\"FTA\":\"TLFTA\",\"FTM\":\"TLFTM\",\"FG_suc_ratio\":\"LFG_suc_ratio\",\"FG3_suc_ratio\":\"LFG3_suc_ratio\",\"FT_suc_ratio\":\"LFT_suc_ratio\",\"W_rate\":\"LW_rate\"}, inplace=True)\n\nall_df = pd.merge(all_df, RegularSeason_Compact_Results_Final, left_on=[\"Season\",\"WTeamID\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df.rename(columns={\"Score\":\"WScoreT\",\"LosingScore\":\"WLosingScoreT\"}, inplace=True)\nall_df= all_df.drop([\"TeamID\"],axis=1)\nall_df = pd.merge(all_df, RegularSeason_Compact_Results_Final, left_on=[\"Season\",\"LTeamID\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df.rename(columns={\"Score\":\"LScoreT\",\"LosingScore\":\"LLosingScoreT\"}, inplace=True)\nall_df = all_df.drop([\"TeamID\"],axis=1)\n\nall_df.head()","d38e63a0":"#\u30b7\u30fc\u30c9\u3092\u6570\u5024\u578b\u306b\u3059\u308b\n\nall_df[\"WinningSeed\"] = all_df[\"WinningSeed\"].astype(int)\nall_df[\"LosingSeed\"] = all_df[\"LosingSeed\"].astype(int)","8a2aec2c":"from sklearn.preprocessing import LabelEncoder","2d450871":"#\u30db\u30fc\u30e0\u306e\u5730\u57df\u3092\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u3059\u308b\n\ncategories = all_df.columns[all_df.dtypes == \"object\"]\n\nfor cat in categories:\n    le = LabelEncoder()\n    print(cat)\n    if all_df[cat].dtypes == \"object\":\n        le = le.fit(all_df[cat])\n        all_df[cat] = le.transform(all_df[cat])","37705b7a":"all_df[categories] = all_df[categories].astype(\"category\")","7501c05d":"#\u30ab\u30e9\u30e0\u540d\u3092\u5909\u66f4\n#\u5909\u6570\"Result\"\u306b\u52dd\u6557\u306e\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\uff080->Seed2\u306e\u30c1\u30fc\u30e0\u304c\u52dd\u5229\uff0c1->Seed1\u306e\u30c1\u30fc\u30e0\u304c\u52dd\u5229\uff09\n\ncolumns_name_win = {\"WinningSeed\":\"Seed1\",\n                \"WinningRegion\":\"Region1\",\n                \"TWOR\":\"TOR1\",\n                \"TWDR\":\"TDR1\",\n                \"TWAst\":\"TAst1\",\n                \"TWTO\":\"TTO1\",\n                \"TWStl\":\"TStl1\",\n                \"TWPF\":\"TPF1\",\n                \"TWFGA\":\"TFGA1\",\n                \"TWFGM\":\"TFGM1\",\n                \"TWFGA3\":\"TFGA31\",\n                \"TWFGM3\":\"TFGM31\",\n                \"TWFTA\":\"TFTA1\",\n                \"TWFTM\":\"TFTM1\",\n                \"WFG_suc_ratio\":\"FG_suc_ratio1\",\n                \"WFG3_suc_ratio\":\"FG3_suc_ratio1\",\n                \"WFT_suc_ratio\":\"FT_suc_ratio1\",\n                \"WTeamID\":\"TeamID1\",\n                \"WScore\":\"Score1\",\n                \"WW_rate\":\"W_rate1\",\n                \"WScoreT\":\"ScoreT1\",\n                \"WLosingScoreT\":\"LosingScoreT1\",\n                \"LosingSeed\":\"Seed2\",\n                \"LosingRegion\":\"Region2\",\n                \"TLOR\":\"TOR2\",\n                \"TLDR\":\"TDR2\",\n                \"TLAst\":\"TAst2\",\n                \"TLTO\":\"TTO2\",\n                \"TLStl\":\"TStl2\",\n                \"TLPF\":\"TPF2\",\n                \"TLFGA\":\"TFGA2\",\n                \"TLFGM\":\"TFGM2\",\n                \"TLFGA3\":\"TFGA32\",\n                \"TLFGM3\":\"TFGM32\",\n                \"TLFTA\":\"TFTA2\",\n                \"TLFTM\":\"TFTM2\",\n                \"LFG_suc_ratio\":\"FG_suc_ratio2\",\n                \"LFG3_suc_ratio\":\"FG3_suc_ratio2\",\n                \"LFT_suc_ratio\":\"FT_suc_ratio2\",\n                \"LTeamID\":\"TeamID2\",\n                \"LScore\":\"Score2\",\n                \"LW_rate\":\"W_rate2\",\n                \"LScoreT\":\"ScoreT2\",\n                \"LLosingScoreT\":\"LosingScoreT2\"\n               }\n\nall_df_win = all_df.copy()\nall_df_win.rename(columns=columns_name_win,inplace=True)","0b7dc94d":"all_df_win","99a90982":"all_df_win.columns","146c85b4":"#\u5404\u7a2e\u30b9\u30b3\u30a2\u3092\u5165\u308c\u66ff\u3048\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u8ffd\u52a0\n\ncolumns_name_lose = {\"WinningSeed\":\"Seed2\",\n                \"WinningRegion\":\"Region2\",\n                \"TWOR\":\"TOR2\",\n                \"TWDR\":\"TDR2\",\n                \"TWAst\":\"TAst2\",\n                \"TWTO\":\"TTO2\",\n                \"TWStl\":\"TStl2\",\n                \"TWPF\":\"TPF2\",\n                \"TWFGA\":\"TFGA2\",\n                \"TWFGM\":\"TFGM2\",\n                \"TWFGA3\":\"TFGA32\",\n                \"TWFGM3\":\"TFGM32\",\n                \"TWFTA\":\"TFTA2\",\n                \"TWFTM\":\"TFTM2\",\n                \"WFG_suc_ratio\":\"FG_suc_ratio2\",\n                \"WFG3_suc_ratio\":\"FG3_suc_ratio2\",\n                \"WFT_suc_ratio\":\"FT_suc_ratio2\",\n                \"WTeamID\":\"TeamID2\",\n                \"WScore\":\"Score2\",\n                \"WW_rate\":\"W_rate2\",\n                \"WScoreT\":\"ScoreT2\",\n                \"WLosingScoreT\":\"LosingScoreT2\",\n                \"LosingSeed\":\"Seed1\",\n                \"LosingRegion\":\"Region1\",\n                \"TLOR\":\"TOR1\",\n                \"TLDR\":\"TDR1\",\n                \"TLAst\":\"TAst1\",\n                \"TLTO\":\"TTO1\",\n                \"TLStl\":\"TStl1\",\n                \"TLPF\":\"TPF1\",\n                \"TLPF\":\"TPF1\",\n                \"TLFGA\":\"TFGA1\",\n                \"TLFGM\":\"TFGM1\",\n                \"TLFGA3\":\"TFGA31\",\n                \"TLFGM3\":\"TFGM31\",\n                \"TLFTA\":\"TFTA1\",\n                \"TLFTM\":\"TFTM1\",\n                \"LFG_suc_ratio\":\"FG_suc_ratio1\",\n                \"LFG3_suc_ratio\":\"FG3_suc_ratio1\",\n                \"LFT_suc_ratio\":\"FT_suc_ratio1\",\n                \"ScoreT1\":\"ScoreT2\",\n                \"ScoreT2\":\"ScoreT1\",\n                \"LTeamID\":\"TeamID1\",\n                \"LScore\":\"Score1\",\n                \"LW_rate\":\"W_rate1\",\n                \"LScoreT\":\"ScoreT1\",\n                \"LLosingScoreT\":\"LosingScoreT1\",\n               }\n\nall_df_lose = all_df[(~all_df[\"Result\"].isnull())].copy()\nall_df_lose.rename(columns=columns_name_lose,inplace=True)\nall_df_lose[\"Result\"] = 0","5881fad3":"all_df_lose","f6457229":"all_df_lose.columns","0bdb99dc":"#\u4e0a\u306e2\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7d50\u5408\n#\u30c1\u30fc\u30e0\u3092\u5165\u308c\u66ff\u3048\u305f\u5bfe\u6226\u30c7\u30fc\u30bf\u3092Result\u304c0\uff08TeamID1\u304c\u8ca0\u3051\uff09\u306e\u5bfe\u6226\u3068\u3057\u3066\u8ffd\u52a0\u3057\u305f\n\nall_df = pd.concat((all_df_win,all_df_lose),sort=False).reset_index(drop=True)\nall_df.head()","6edd5534":"#\u4e00\u5ea6\uff0c\u3053\u306e\u6642\u70b9\u3067LightGBM\u3067\u5b66\u7fd2\u3055\u305b\u305f\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\uff09\n\n#\u5404\u7a2e\u30b9\u30b3\u30a2\u306e\u5dee\u3092\u53d6\u3089\u306a\u304b\u3063\u305f\u969b\u306e\u7d50\u679c -> 0.58767\n#\u5404\u7a2e\u30b9\u30b3\u30a2\u306e\u5dee\u3092\u53d6\u3063\u305f\u969b\u306e\u7d50\u679c -> 0.58363\n\n\n#\u5404\u7a2e\u30b9\u30b3\u30a2\u306e\u5dee\u3092\u3068\u308b\n\ndiff_columns = [\"Seed\",\"TOR\",\"TDR\",\"TAst\",\"TTO\",\"TStl\",\"TPF\",\"FG_suc_ratio\",\"FG3_suc_ratio\",\"FT_suc_ratio\",\"ScoreT\",\"LosingScoreT\",\"W_rate\",\"Score\"]\n\nfor col in diff_columns:\n    all_df[col+\"_diff\"] = all_df[col+\"1\"] - all_df[col+\"2\"]\n\nall_df.head()","20d3544f":"Cities = pd.read_csv(PATH + \"Cities.csv\")\nConference = pd.read_csv(PATH + \"Conferences.csv\")\nMConferenceTourneyGames = pd.read_csv(PATH + \"MConferenceTourneyGames.csv\")\nMGameCities = pd.read_csv(PATH + \"MGameCities.csv\")\nMMasseyOrdinals = pd.read_csv(PATH + \"MMasseyOrdinals.csv\")\nMNCAATourneySeedRoundSlots = pd.read_csv(PATH + \"MNCAATourneySeedRoundSlots.csv\")\nMNCAATourneySlots = pd.read_csv(PATH + \"MNCAATourneySlots.csv\")\nMSecondaryTourneyCompactResults = pd.read_csv(PATH + \"MSecondaryTourneyCompactResults.csv\")\nMSecondaryTourneyTeams = pd.read_csv(PATH + \"MSecondaryTourneyTeams.csv\")\nMTeamCoaches = pd.read_csv(PATH + \"MTeamCoaches.csv\")\nMTeamConferences = pd.read_csv(PATH + \"MTeamConferences.csv\")\nMTeamSpellings = pd.read_csv(PATH + \"MTeamSpellings.csv\", encoding=\"shift-jis\")\nMTeams = pd.read_csv(PATH + \"MTeams.csv\")","8a0b9530":"#\u90fd\u5e02\u306e\u5dde\uff0c\u5730\u57df\u3092\u5bfe\u6226\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u6e08\u307f\u306e\u305f\u3081\u4e00\u65e6\u4fdd\u7559\n\nCities.head()","04ff413c":"#\u4f1a\u8b70\u306e\u7565\u8a9e\u3068\u540d\u524d\uff0e\u3044\u3089\u306a\u3044\uff0e\n\nConference.head()","98288c28":"#\u5404\u4f1a\u8b70\u304c\u5b9f\u65bd\u3057\u305f\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u306e\u52dd\u6557\n\nMConferenceTourneyGames.head()","3c562f8a":"#\u5168\u3066\u306e\u8a66\u5408\u306e\u52dd\u6557\uff0cCRType\u3067\u305d\u308c\u305e\u308c\u7d50\u679c\u306e\u52dd\u6557\u3092\u4ed6\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u78ba\u8a8d\u3067\u304d\u308b\n#\u30ec\u30ae\u30e5\u30e9\u30fc\u30b7\u30fc\u30ba\u30f3\u306e\u8a66\u5408\u7d50\u679c\u3068\u5408\u308f\u305b\u3066\uff0cNCAAM\u306e\u7d50\u679c\u3092\u4e88\u6e2c\u3059\u308b\u6307\u6a19\u306b\u3067\u304d\u305d\u3046\n\nMGameCities.head()","e57d4c25":"#\u5404\u30c1\u30fc\u30e0\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3068\u4e88\u6e2c\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u65e5\n#\u78ba\u5b9f\u306b\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u306e\u4e88\u6e2c\u306b\u4f7f\u3048\u308b\u30e9\u30f3\u30ad\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u3092\u4f7f\u3046\n\nMMasseyOrdinals.head()","22f833dd":"#\u4e00\u3064\u306e\u30c1\u30fc\u30e0\u306e\u4e00\u3064\u306e\u30b7\u30fc\u30ba\u30f3\u306b\u30e9\u30f3\u30ad\u30f3\u30b0\u304c\u3044\u304f\u3064\u3082\u3042\u308b\n\nMMasseyOrdinals.groupby([\"Season\",\"TeamID\"]).count()","15a1a5ea":"#\u4e00\u3064\u306e\u30c1\u30fc\u30e0\u306e\u4e00\u3064\u306e\u30b7\u30fc\u30ba\u30f3\u306b\u540c\u3058\u30e9\u30f3\u30ad\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u304c\u4f55\u5ea6\u3082\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u4ed8\u3051\u76f4\u3057\u3066\u3044\u308b\n#RankingDayNum\u304c\u305d\u308c\u305e\u308c\u4e00\u756a\u5927\u304d\u3044\u6642\u306eOrdinalRank\u3092\u4f7f\u3048\u3070\u826f\u3044\u306f\u305a\n\nMMasseyOrdinals.groupby([\"Season\",\"TeamID\",\"SystemName\"]).count()","345420eb":"#\u3069\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3082\u9045\u304f\u3066133\u65e5\u76ee\u306b\u308f\u304b\u308b\n#\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u306f134\u65e5\u76ee\u4ee5\u964d\u306e\u8a66\u5408\u3057\u304b\u306a\u3044\u305f\u3081\uff0c\u30e9\u30f3\u30ad\u30f3\u30b0\u306f\u5168\u3066\u4f7f\u7528\u53ef\u80fd\u3068\u898b\u3066\u3044\u3044\n\nMMasseyOrdinals[\"RankingDayNum\"].describe()","fad4fa3a":"#\u30b7\u30fc\u30ba\u30f3\uff0c\u30c1\u30fc\u30e0\u3054\u3068\u306e\u9806\u4f4d\u306e\u5e73\u5747\u3092\u51fa\u3059\n#RankingDayNum\u304c100\u4ee5\u4e0a\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u307f\u4f7f\u7528\u3059\u308b\u3068\uff0c\u82e5\u5e72\u30b9\u30b3\u30a2\u304c\u6539\u5584\n#\u30c1\u30fc\u30e0\u3054\u3068\u306b\u51fa\u308b\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u7a2e\u985e\u6570\u304c\u9055\u3046\u306e\u3067\u5408\u8a08\u3067\u306f\u306a\u304f\u5e73\u5747\n#\u8abf\u3079\u305f\u7d50\u679c\u3044\u304f\u3064\u304b\u7cbe\u5ea6\u306e\u9ad8\u3044\u30e9\u30f3\u30ad\u30f3\u30b0\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u5225\u9014\u5909\u6570\u306b\u304a\u3053\u3059\n\nRank_columns = [\"MOR\",\"POM\"]\n\nNew_Ordinals_tmp = MMasseyOrdinals[(MMasseyOrdinals[\"RankingDayNum\"] >= 100)].groupby([\"Season\",\"TeamID\",\"SystemName\"]).last()\nNew_Ordinals_tmp = New_Ordinals_tmp.unstack(level=\"SystemName\")\nNew_Ordinals = pd.DataFrame(New_Ordinals_tmp[[\"OrdinalRank\"]].mean(axis=1))\n\nfor col in Rank_columns:\n    New_Ordinals[col] = New_Ordinals_tmp[[(\"OrdinalRank\",col)]]\n    \nNew_Ordinals.rename(columns={0:\"OrdinalRank\"},inplace=True)\nNew_Ordinals","8dd985f4":"#\u5bfe\u6226\u30c7\u30fc\u30bf\u306b\u9806\u4f4d\u306e\u5408\u8a08\u3092\u8ffd\u52a0\n\nall_df = pd.merge(all_df, New_Ordinals, left_on=[\"Season\",\"TeamID1\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df.rename(columns={\"OrdinalRank\":\"OrdinalRank1\"}, inplace=True)\n\nall_df = pd.merge(all_df, New_Ordinals, left_on=[\"Season\",\"TeamID2\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df.rename(columns={\"OrdinalRank\":\"OrdinalRank2\"}, inplace=True)\n\nfor col in Rank_columns:\n    all_df.rename(columns={col+\"_x\":col+\"1\"}, inplace=True)\n    all_df.rename(columns={col+\"_y\":col+\"2\"}, inplace=True)","4b5e0205":"#\u9806\u4f4d\u306e\u5dee\u3092\u3068\u308b\n\nall_df[\"OrdinalRank_diff\"] = all_df[\"OrdinalRank1\"] - all_df[\"OrdinalRank2\"]\n\nfor col in Rank_columns:\n    all_df[col+\"_diff\"] = all_df[col+\"1\"] - all_df[col+\"2\"]","801afd12":"all_df.head()","45199491":"#\u30b7\u30fc\u30c9,\u30b2\u30fc\u30e0\u30e9\u30a6\u30f3\u30c9\u3054\u3068\u306e\u6700\u901f\u306e\u65e5\u7a0b\u3068\u4e00\u756a\u9045\u3044\u65e5\u7a0b\n#\u3044\u3089\u306a\u3055\u305d\u3046\n\nMNCAATourneySeedRoundSlots.head()","1639195c":"#\u30b7\u30fc\u30ba\u30f3\uff0c\u30b2\u30fc\u30e0\u30b9\u30ed\u30c3\u30c8\u3054\u3068\u306e\u30b7\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\n#\u3044\u3089\u306a\u3055\u305d\u3046\n\nMNCAATourneySlots.head()","fb95b861":"#NCAAM\u3068\u540c\u6642\u9032\u884c\u3055\u308c\u308b\u4ed6\u306e\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\n#\u57fa\u672c\u7684\u306b\u30c1\u30fc\u30e0\u30e1\u30f3\u30d0\u30fc\u306e\u4e3b\u529b\u306f\u6bce\u5e74\u5165\u308c\u66ff\u308f\u308b\u306f\u305a\u3060\u304b\u3089\uff0c\u7d50\u679c\u3092\u4e88\u6e2c\u3059\u308b\u5bfe\u6226\u3088\u308a\u524d\u306e\u5e74\u306b\u884c\u308f\u308c\u305f\u5bfe\u6226\u306f\u5165\u529b\u5024\u306b\u4f7f\u308f\u306a\u3044\u3067\u304a\u304f\n\nMSecondaryTourneyCompactResults.head()","e86f7f73":"MSecondaryTourneyTeams.head()","31d1beba":"MTeamCoaches.head()","5c2e4cca":"MTeamCoaches.describe()","e2891ac3":"#\u30b3\u30fc\u30c1\u304cSeason\u307e\u3067\u306b\u4f55\u5ea6\u30b3\u30fc\u30c1\u3092\u3057\u3066\u304d\u305f\u304b\u3092\u5909\u6570\u3068\u3057\u3066\u8ffd\u52a0\n\nMTeamCoaches[\"Coaching_count\"] = np.nan\n\nfor y in range(1985,2021):\n    Coaches_counts = pd.DataFrame(MTeamCoaches[(MTeamCoaches[\"Season\"]<y)][\"CoachName\"].value_counts())\n    \n    Coaches_counts.index.names = [\"CoachName\"]\n    Coaches_counts.columns = [\"Coaching_count_tmp\"]\n    \n    Coaches_counts[\"Season\"] = y\n    MTeamCoaches = pd.merge(MTeamCoaches, Coaches_counts, on=[\"Season\",\"CoachName\"], how=\"left\")\n    \n    MTeamCoaches.loc[(MTeamCoaches[\"Coaching_count\"].isnull()),\"Coaching_count\"] = MTeamCoaches[\"Coaching_count_tmp\"]\n    MTeamCoaches = MTeamCoaches.drop([\"Coaching_count_tmp\"], axis=1)\n\nMTeamCoaches = MTeamCoaches.fillna(0)","9a3ae0e2":"MTeamCoaches.head()","ae618a45":"MTeamCoaches.groupby([\"Season\",\"TeamID\"]).count().describe()","640d9c97":"MTeamCoaches_max = MTeamCoaches[[\"Season\",\"TeamID\",\"LastDayNum\"]].groupby([\"Season\",\"TeamID\"]).max()\nMTeamCoaches_max.columns = [\"MaxLastDayNum\"]\nMTeamCoaches = pd.merge(MTeamCoaches, MTeamCoaches_max, on=[\"Season\",\"TeamID\"], how=\"left\")\nMTeamCoaches = MTeamCoaches[(MTeamCoaches[\"LastDayNum\"] == MTeamCoaches[\"MaxLastDayNum\"])]","9a00993b":"MTeamCoaches = MTeamCoaches.drop([\"MaxLastDayNum\"],axis=1)\nMTeamCoaches.groupby([\"Season\",\"TeamID\"]).count().describe()","9be4bcc4":"#\u4e21\u30c1\u30fc\u30e0\u306e\u30b3\u30fc\u30c1\u306e\u4eca\u307e\u3067\u306e\u30b3\u30fc\u30c1\u3092\u7d4c\u9a13\u3057\u305f\u56de\u6570\n\nall_df = pd.merge(all_df, MTeamCoaches.drop([\"CoachName\"],axis=1), left_on=[\"Season\",\"TeamID1\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df.rename(columns={\"Coaching_count\":\"Coaching_count1\",\"FirstDayNum\":\"CoachFirstDayNum1\",\"LastDayNum\":\"CoachLastDayNum1\"},inplace=True)\nall_df = all_df.drop([\"TeamID\"],axis=1)\n\nall_df = pd.merge(all_df, MTeamCoaches.drop([\"CoachName\"],axis=1), left_on=[\"Season\",\"TeamID2\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df.rename(columns={\"Coaching_count\":\"Coaching_count2\",\"FirstDayNum\":\"CoachFirstDayNum2\",\"LastDayNum\":\"CoachLastDayNum2\"},inplace=True)\nall_df = all_df.drop([\"TeamID\"],axis=1)\n\nall_df[\"Coaching_count_diff\"] = all_df[\"Coaching_count1\"] - all_df[\"Coaching_count2\"]\nall_df = all_df.drop([\"Coaching_count1\",\"Coaching_count2\"],axis=1)\n\nall_df","32a17a8d":"#\u30b7\u30fc\u30ba\u30f3,\u30c1\u30fc\u30e0\u3054\u3068\u306e\u4f1a\u8b70\n\nMTeamConferences.head()","e349b9da":"#\u4f1a\u8b70\u306e\u6570\u304c\u591a\u3059\u304e\u3066\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3067\u5bfe\u6226\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u3057\u3066\u3082\u5927\u304d\u306a\u5f79\u5272\u306f\u898b\u8fbc\u3081\u306a\u3044\uff08\u3068\u601d\u308f\u308c\u308b\uff09\n#\u8ffd\u52a0\u3057\u3066\u307f\u3066\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d\u5f8c\uff0c\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5404\u4f1a\u8b70\u306e\u30c1\u30fc\u30e0\u306e\u6226\u7e3e\u3092\u8ffd\u52a0\n\nMTeamConferences[\"ConfAbbrev\"].value_counts()","7f742aca":"MTeamConferences","4cc17593":"#\u5404\u4f1a\u8b70\u3054\u3068\u306e1\u30b7\u30fc\u30ba\u30f3\u306e\u30c1\u30fc\u30e0\u306e\u6570\n\nMTeamConferences_count = MTeamConferences[[\"Season\",\"TeamID\",\"ConfAbbrev\"]].groupby([\"Season\",\"ConfAbbrev\"]).count().unstack()\nMTeamConferences_count.describe()","a83fa905":"MTeamConferences.columns","a4376854":"categories = MTeamConferences.columns[(MTeamConferences.dtypes==\"object\")]\n\nfor cat in categories:\n    le = LabelEncoder()\n    le = le.fit(MTeamConferences[cat])\n    MTeamConferences[cat] = le.transform(MTeamConferences[cat])","8ac2eb24":"all_df = pd.merge(all_df, MTeamConferences, left_on=[\"Season\",\"TeamID1\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df = all_df.drop([\"TeamID\"],axis=1)\nall_df.rename(columns={\"ConfAbbrev\":\"ConfAbbrev1\"}, inplace=True)\n\nall_df = pd.merge(all_df, MTeamConferences, left_on=[\"Season\",\"TeamID2\"], right_on=[\"Season\",\"TeamID\"], how=\"left\")\nall_df = all_df.drop([\"TeamID\"],axis=1)\nall_df.rename(columns={\"ConfAbbrev\":\"ConfAbbrev2\"}, inplace=True)","7727403e":"all_df.head()","72aa36cf":"#\u30c1\u30fc\u30e0\u540d\u306e\u30b9\u30da\u30eb\uff0e\u3044\u3089\u306a\u3044\n\nMTeamSpellings.head()","aaa81719":"#Division-1\u306b\u306a\u3063\u305f\u5e74\u3068\u5916\u308c\u305f\u5e74\n#\u8a66\u5408\u6642\u70b9\u3067Division-1\u3067\u3042\u308b\u3053\u3068\u306f\u5206\u304b\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u5bfe\u6226\u30c7\u30fc\u30bf\u306bFirstD1Season\u306e\u307f\u3092\u8ffd\u52a0\u3057\uff0c\u305d\u306e\u5dee\u3092\u3068\u308b\n\nMTeams = MTeams.drop([\"TeamName\"],axis=1)\nMTeams.describe()","5824b873":"all_df = pd.merge(all_df, MTeams, left_on=[\"TeamID1\"], right_on=[\"TeamID\"], how=\"left\")\nall_df = all_df.drop([\"TeamID\",\"LastD1Season\"],axis=1)\nall_df.rename(columns={\"FirstD1Season\":\"FirstD1Season1\"},inplace=True)\n\nall_df = pd.merge(all_df, MTeams, left_on=[\"TeamID2\"], right_on=[\"TeamID\"], how=\"left\")\nall_df = all_df.drop([\"TeamID\",\"LastD1Season\"],axis=1)\nall_df.rename(columns={\"FirstD1Season\":\"FirstD1Season2\"},inplace=True)\n\nall_df[\"FirstD1Season_diff\"] = all_df[\"FirstD1Season1\"] - all_df[\"FirstD1Season2\"]\nall_df = all_df.drop([\"FirstD1Season1\",\"FirstD1Season2\"],axis=1)\n","5aa5ac86":"all_df[[\"ConfAbbrev1\",\"ConfAbbrev2\"]] = all_df[[\"ConfAbbrev1\",\"ConfAbbrev2\"]].astype(\"category\")","30a1020c":"#\u6307\u6a19\u306e\u5206\u5e03\u3092\u78ba\u8a8d\n#\u5dee\u3092\u53d6\u3063\u305f\u5909\u6570\u306f\u3069\u308c\u3082\u6b63\u898f\u5206\u5e03\u3067\u3042\u308b\u305f\u3081\u975e\u7dda\u5f62\u5909\u63db\u306e\u5fc5\u8981\u6027\u306f\u306a\u3044\u3068\u601d\u308f\u308c\u308b\n\nfor col in all_df.columns[all_df.dtypes != \"category\"]:\n    fig, axes = plt.subplots(1, 1, figsize=(20, 5))\n    sns.histplot(ax=axes, data=all_df, x=col)\n    plt.show()","2cfbeed5":"all_df.columns","0d543ea0":"all_df_corr = all_df.corr()\nplt.figure(figsize=(50,50))\nsns.heatmap(all_df_corr,-1,1,annot=True)","238f62b5":"#OrdinalRank\u3068ScoreT\u3068Seed\u3068W_rate\u4ee5\u5916\uff0c\u307b\u3068\u3093\u3069\u76f8\u95a2\u304c\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\n\nhide_columns = [\"Season\",\"TeamID1\",\"TeamID2\",\"Score1\",\"Score2\",\"Result\",\"Score_diff\"]\n\nfor col1 in all_df.columns:\n    if not col1 in hide_columns:\n        all_df.plot.scatter(x=col1,y=\"Score_diff\",alpha=0.8)","f81eb41d":"train_columns = [\"Seed_diff\",\"TOR_diff\",\"TDR_diff\",\"TAst_diff\",\"TStl_diff\",\"FG_suc_ratio_diff\",\"ScoreT_diff\",\"W_rate_diff\",\"OrdinalRank_diff\",\"Coaching_count_diff\",\"FirstD1Season_diff\",\"MOR_diff\",\"POM_diff\"]\n\nX = all_df[(~all_df[\"Result\"].isnull())][train_columns]\ny = all_df[(~all_df[\"Result\"].isnull())].Result\ntest_df = all_df[(all_df[\"Result\"].isnull())][train_columns]","57b84d4a":"lgb_num_leaves_max = 255\nlgb_in_leaf = 50\nlgb_lr = 0.0001\nlgb_bagging = 7","573dbd33":"params_lgb = {\"num_leaves\": lgb_num_leaves_max,\n             \"min_data_in_leaf\":lgb_in_leaf,\n             \"objective\":\"binary\",\n             \"max_depth\":-1,\n             \"learning_rate\":lgb_lr,\n             \"boosting_type\":\"gbdt\",\n             \"bagging_seed\":lgb_bagging,\n             \"metric\":\"logloss\",\n             \"verbosity\":-1,\n             \"random_state\": 42,\n             }","d1619390":"#LightGBM\u3067\u5b66\u7fd2\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\uff09\n#\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u8a2d\u5b9a\u306e\u3068\u3053\u308d\u3067\u8b66\u544a\u304c\u51fa\u3066\u3044\u308b\u304c\uff0c\u539f\u56e0\u306f\u4e0d\u660e\nNFOLDS = 10\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\ny_preds_lgb = np.zeros(test_df.shape[0])\ny_train_lgb = np.zeros(X.shape[0])\ny_oof = np.zeros(X.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances[\"feature\"] = columns\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print(\"Fold:\", fold_n+1)\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    dtrain = lgb.Dataset(X_train, label=y_train)\n    dvalid = lgb.Dataset(X_valid, label=y_valid, reference=dtrain)\n    \n    clf = lgb.train(params_lgb, dtrain, num_boost_round=10000, valid_sets = [dtrain, dvalid], verbose_eval=200)\n    importance = pd.DataFrame(clf.feature_importance(), index=X_train.columns, columns=[\"importance\"]).sort_values(by=\"importance\",ascending=True)\n    importance.plot.barh()\n    \n    feature_importances[f'fold_{fold_n +1}'] = clf.feature_importance()\n    \n    y_pred_valid = clf.predict(X_valid)\n    y_oof[valid_index] = y_pred_valid\n    \n    y_train_lgb += clf.predict(X) \/ NFOLDS\n    y_preds_lgb += clf.predict(test_df) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","88d70c01":"# Score -> \n\nsubmission_df = pd.read_csv(PATH + \"MSampleSubmissionStage1.csv\")\ny_preds = y_preds_lgb\nsubmission_df[\"Pred\"] = y_preds\nsubmission_df.to_csv(\"submission01.csv\", index=False)","7bb8b4a4":"#\u7d50\u679c\u306b\u307b\u307c\u5f71\u97ff\u3057\u306a\u3044\u5909\u6570\u3092\u524a\u9664\n#\u305d\u3082\u305d\u3082\u3069\u306e\u30c7\u30fc\u30bf\u3082\u307b\u3068\u3093\u3069\u540c\u3058\u5024\u3060\u3063\u305f\u3068\u8003\u3048\u3089\u308c\u308b\n#\u30b3\u30fc\u30c1\u306e\u65e5\u306b\u3061\u306e\u5909\u6570\u306f\u9014\u4e2d\u3067\u30b3\u30fc\u30c1\u304c\u5909\u308f\u3063\u305f\u308a\u3057\u305f\u304b\u306e\u5909\u6570\u306b\u5909\u3048\u308c\u3070\u826f\u3044\u304b\u3082\n\nall_df = all_df.drop([\"FirstD1Season_diff\"],axis=1)","2185368b":"train_columns = [\"Seed_diff\",\"TOR_diff\",\"TDR_diff\",\"TAst_diff\",\"TStl_diff\",\"FG_suc_ratio_diff\",\"ScoreT_diff\",\"W_rate_diff\",\"OrdinalRank_diff\",\"Coaching_count_diff\",\"MOR_diff\",\"POM_diff\"]\n\nX = all_df[(~all_df[\"Result\"].isnull())][train_columns]\ny = all_df[(~all_df[\"Result\"].isnull())].Result\ntest_df = all_df[(all_df[\"Result\"].isnull())][train_columns]","43ad2047":"params_lgb = {\"objective\":\"binary\",\n             \"metric\":\"binary_logloss\"}","4b915757":"#Optuna\u3067\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\uff0e\n#\u8272\u3005\u3057\u305f\u7d50\u679c\uff0c\u30c1\u30e5\u30fc\u30ca\u30fc\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u304c\u4e00\u756a\u7cbe\u5ea6\u304c\u9ad8\u3044\n\nNFOLDS = 10\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\ny_preds_lgb = np.zeros(test_df.shape[0])\ny_train_lgb = np.zeros(X.shape[0])\ny_oof = np.zeros(X.shape[0])\n#categories = [\"Region1\",\"Region2\",\"ConfAbbrev1\",\"ConfAbbrev2\"]\n\nfeature_importances = pd.DataFrame()\nfeature_importances[\"feature\"] = columns\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print(\"Fold:\", fold_n+1)\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    dtrain = lgb.Dataset(X_train, label=y_train)\n    dvalid = lgb.Dataset(X_valid, label=y_valid, reference=dtrain)\n    \n    clf = tuner.train(params_lgb,\n                    dtrain,\n                    valid_sets=[dtrain, dvalid],\n                    num_boost_round=50000,\n                    early_stopping_rounds=500,\n                    verbose_eval=50)\n    \n    importance = pd.DataFrame(clf.feature_importance(), index=X_train.columns, columns=[\"importance\"]).sort_values(by=\"importance\",ascending=True)\n    importance.plot.barh()\n    \n    feature_importances[f'fold_{fold_n +1}'] = clf.feature_importance()\n    \n    y_pred_valid = clf.predict(X_valid)\n    y_oof[valid_index] = y_pred_valid\n    \n    y_train_lgb += clf.predict(X) \/ NFOLDS\n    y_preds_lgb += clf.predict(test_df) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","1c60e403":"#\u30b9\u30b3\u30a2 -> 0.53814\n\nsubmission_df = pd.read_csv(PATH + \"MSampleSubmissionStage1.csv\")\ny_preds = y_preds_lgb\nsubmission_df[\"Pred\"] = y_preds\nsubmission_df.to_csv(\"submission02.csv\", index=False)","8506bcc0":"train_columns = [\"Seed_diff\",\"TOR_diff\",\"TDR_diff\",\"TAst_diff\",\"TStl_diff\",\"FG_suc_ratio_diff\",\"ScoreT_diff\",\"W_rate_diff\",\"OrdinalRank_diff\",\"Coaching_count_diff\",\"MOR_diff\",\"POM_diff\"]\n\nX = all_df[(~all_df[\"Result\"].isnull())][train_columns]\ny = all_df[(~all_df[\"Result\"].isnull())].Result\ntest_df = all_df[(all_df[\"Result\"].isnull())][train_columns]","b7100649":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=1234, shuffle=False, stratify=None)","d6938c1c":"def logloss(valid, pred, eps=1e-15):\n    p = np.clip(pred, eps, 1-eps)\n    logloss_valid_df = pd.DataFrame(valid)\n    logloss_pred_df = pd.DataFrame(p)\n    logloss_df = pd.concat((logloss_valid_df, logloss_pred_df), axis=1)\n    logloss_df.columns = [\"valid\",\"pred\"]\n    logloss_df.loc[(logloss_df[\"valid\"]==0),\"pred\"] = 1 - logloss_df[\"pred\"]\n    \n    return -np.log(logloss_df[\"pred\"]).mean()","0b25304d":"def objective(trial):\n    xgb_params = {\"objective\":\"binary:logistic\",\n                  \"learning_rate\":0.0001,\n                  \"seed\":1234,\n                  \"eval_metric\":\"logloss\",\n                  'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 1e3),\n                  'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 1e3),\n                  \"min_child_weight\":trial.suggest_uniform(\"min_child_weight\",0.2,2.0),\n                  \"max_depth\":trial.suggest_int(\"max_depth\",10,20),\n                  \"colsample_bytree\":trial.suggest_uniform(\"colsample_bytree\",0.4,0.99),\n                  \"subsample\":trial.suggest_uniform(\"subsample\",0.2,0.99),\n                  \"lambda\":trial.suggest_uniform(\"lambda\",0.1,2.0)\n                 }\n    \n    xgb_train = xgb.DMatrix(X_train, label=y_train)\n    xgb_eval = xgb.DMatrix(X_valid, label=y_valid)\n    evals = [(xgb_train, \"train\"), (xgb_eval, \"eval\")]\n    \n    model_xgb = xgb.train(xgb_params, xgb_train,\n                         evals=evals,\n                         num_boost_round=20000,\n                         early_stopping_rounds=200,\n                         verbose_eval=100)\n    \n    y_pred = model_xgb.predict(xgb_eval)\n    score = logloss(y_valid, y_pred)\n    \n    return score","23ce8765":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=500)\nstudy.best_params","db0386b2":"params_xgb = {\n    \"objective\":\"binary:logistic\",\n    \"learning_rate\":0.0001,\n    \"seed\":1234,\n    \"eval_metric\":\"logloss\",\n    'reg_lambda': 0.5313661324133436,\n 'reg_alpha': 56.043547449902384,\n 'min_child_weight': 1.4353416333650515,\n 'max_depth': 18,\n 'colsample_bytree': 0.9133588762737089,\n #'subsample': 0.6804555526846559,\n #'lambda': 0.7632659497765832\n}","0ad729c2":"#XGBoost\u3067\u5b66\u7fd2\uff08\u30af\u30ed\u30b9\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\uff09\n\nNFOLDS = 10\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\ny_preds_xgb = np.zeros(test_df.shape[0])\ny_train_xgb = np.zeros(X.shape[0])\ny_oof = np.zeros(X.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances[\"feature\"] = columns\n\nxgb_X = xgb.DMatrix(X, label=y)\nxgb_test = xgb.DMatrix(test_df)\n\nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print(\"Fold:\", fold_n+1)\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    xgb_train = xgb.DMatrix(X_train, label=y_train)\n    xgb_valid = xgb.DMatrix(X_valid, label=y_valid)\n    evals = [(xgb_train, \"train\"), (xgb_valid, \"eval\")]\n    \n    model_xgb = xgb.train(params_xgb,\n                          xgb_train,\n                          evals=evals,\n                          num_boost_round=20000,\n                          early_stopping_rounds=200,\n                          verbose_eval=200)\n    \n    y_pred_valid = model_xgb.predict(xgb_valid)\n    y_oof[valid_index] = y_pred_valid\n    \n    y_train_xgb += model_xgb.predict(xgb_X) \/ NFOLDS\n    y_preds_xgb += model_xgb.predict(xgb_test) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","39cdf5dc":"#\u30b9\u30b3\u30a2 -> 0.64211\n#\u3069\u3053\u304b\u9593\u9055\u3063\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\n\nsubmission_df = pd.read_csv(PATH + \"MSampleSubmissionStage1.csv\")\ny_preds = y_preds_xgb\nsubmission_df[\"Pred\"] = y_preds\nsubmission_df.to_csv(\"submission03.csv\", index=False)","f2706691":"Optuna\u3067\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316","22e90ee6":"\u30c8\u30fc\u30bf\u30eb\u306e\u5f97\u5931\u70b9\u3001\u30a2\u30b7\u30b9\u30c8\u3001\u30ea\u30d0\u30a6\u30f3\u30c9\uff08OF,DF\uff09\u3001\u30b7\u30e5\u30fc\u30c8\u7387(FG,FG3,FT)\u3001\u30bf\u30fc\u30f3\u30aa\u30fc\u30d0\u30fc\u3001\u30b9\u30c1\u30fc\u30eb\u3001\u30d6\u30ed\u30c3\u30af\u3001\u30d5\u30a1\u30fc\u30eb\uff0c\u30c1\u30fc\u30e0\u306e\u30b7\u30fc\u30c9\u3001\u30db\u30fc\u30e0\u5730\u3092\u8ffd\u52a0","a223ddae":"\u30fb\u30e9\u30f3\u30ad\u30f3\u30b0\u306f\u3084\u3063\u3071\u308a\u5f37\u3044\n\n\u30fb\u5024\u304c\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u5909\u6570\u306e\u91cd\u8981\u5ea6\u304c\u4f4e\u304f\u306a\u3063\u3066\u3044\u308b","2e94f945":"XGBoost\u3067\u5b66\u7fd2","71b6f697":"\u5f97\u5931\u70b9\u5dee\u3068\u3042\u308b\u7a0b\u5ea6\u306e\u76f8\u95a2\u304c\u3042\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u5909\u6570\n\nSeed1,TFGM1,TFGA1,TOR1,TDR1,TAst1,FG_suc_ratio1,W_rate1,ScoreT1\nSeed2,TFGM2,TFGA2,TOR2,TDR2,TAst2,FG_suc_ratio2,W_rate2,ScoreT2\nSeed_diff,TOR_diff,TDR_diff,TAst_diff,TStl_diff,FG_suc_ratio_diff,ScoreT_diff,W_rate_diff,OrdinalRank_diff,Coaching_count_diff,FirstD1Season_diff,MOR_diff,POM_diff\n\n\u5dee\u3092\u53d6\u3063\u305f\u5909\u6570\u306e\u307f\u3067\u5341\u5206\u3060\u3068\u601d\u308f\u308c\u308b","4bbca1ea":"\u53c2\u8003\uff1a \n\u30fbhttps:\/\/www.kaggle.com\/kamalnaithani\/ncaam-simple-model-copy \n\n\u30fbhttps:\/\/www.kaggle.com\/junichiromorita\/ncaam-2021-eda-english-japanese\n\n\u30fbhttps:\/\/www.kaggle.com\/junichiromorita\/ncaam-2021-eda-english-japanese\n\n\u30fbhttps:\/\/qiita.com\/Derek\/items\/70dea0482c943c66c050\n\n\u30fb\u300e[Kaggle\u30c7\u30fc\u30bf\u5206\u6790\u5165\u9580](https:\/\/www.amazon.co.jp\/Python\u3067\u52d5\u304b\u3057\u3066\u5b66\u3076-Kaggle\u30c7\u30fc\u30bf\u5206\u6790\u5165\u9580-AI-TECHNOLOGY-\u7be0\u7530\/dp\/4798165239\/ref=sr_1_1?dchild=1&qid=1615682817&s=books&sr=1-1&text=\u7be0\u7530+\u88d5\u4e4b)\u300f\uff08\u8457\uff1a\u7be0\u7530 \u88d5\u4e4b\uff09\n\n\u30fb\u300e[Kaggle\u3067\u52dd\u3064\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6280\u8853](https:\/\/www.amazon.co.jp\/Kaggle\u3067\u52dd\u3064\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6280\u8853-\u9580\u8107-\u5927\u8f14-ebook\/dp\/B07YTDBC3Z\/ref=sr_1_1?__mk_ja_JP=\u30ab\u30bf\u30ab\u30ca&crid=11EOG1XUISJRX&dchild=1&keywords=kaggle\u3067\u52dd\u3064\u30c7\u30fc\u30bf\u5206\u6790\u306e\u6280\u8853&qid=1615682901&s=books&sprefix=Kaggle\u3067%2Cstripbooks%2C269&sr=1-1)\u300f\uff08\u8457\uff1a\u9580\u8107 \u5927\u8f14\uff09","99fe1806":"\u25c6 \u8ffd\u52a0\u3057\u3066\u3044\u306a\u3044\u6307\u6a19\u3092\u8ffd\u52a0\u3059\u308b\n\n\u30fb\u8a66\u5408\u6642\u70b9\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30e9\u30f3\u30ad\u30f3\u30b0\uff08\u7cbe\u5ea6\u304c\u826f\u3044\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u5dee\u306e\u5408\u8a08\u306e\u307f\u8ffd\u52a0\u3059\u308c\u3070\u826f\u3044\u304b\u3082\uff09\n\n\u30fb\u4e21\u30c1\u30fc\u30e0\u306e\u30b3\u30fc\u30c1\u306e\u529f\u7e3e\uff08\u6700\u521d\u306f\u30b3\u30fc\u30c1\u3092\u3057\u305f\u56de\u6570\u306e\u307f\u306b\u3057\u3066\u307f\u308b\uff09\n\n\u30fb\u6240\u5c5e\u4f1a\u8b70\u306e\u8ffd\u52a0\n\n\u30fbDivision-1\u306b\u306a\u3063\u305f\u5e74\u3068\u5916\u308c\u305f\u5e74\n\n\u5f97\u5931\u70b9\u5dee\u3068\u76f8\u95a2\u304c\u898b\u3089\u308c\u306a\u3044\u30c7\u30fc\u30bf\u306f\u524a\u9664\u3057\u3066\u304a\u304f\n\n\u25c6 \u8a66\u3059\u3053\u3068\n\n\u8fd1\u5e74\u306e\u30c7\u30fc\u30bf\u3067\u306e\u30e2\u30c7\u30eb\u3068\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\uff08\u307e\u3060\uff09\n\nXGBoost\u3067\u306e\u5b66\u7fd2\n\n\u6642\u7cfb\u5217\u306b\u6cbf\u3063\u305f\u30af\u30ed\u30b9\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\uff08\u307e\u3060\uff09"}}