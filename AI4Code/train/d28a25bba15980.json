{"cell_type":{"ffaa9537":"code","1642be88":"code","87bb2799":"code","a5d94942":"code","a0e6aae1":"code","fe10780d":"code","eab8fb3c":"code","dda8f96e":"code","14ad118c":"code","69ee8850":"code","389a7193":"code","764a8b8c":"code","7b541a81":"code","d6f94e55":"code","7d440d46":"code","a9372152":"code","80c569be":"code","925b0999":"code","5a8f73cc":"code","4b262e93":"code","5f85e99a":"code","09835cb0":"code","0c7d16da":"code","862ff483":"code","fcb6737f":"code","2a18e86b":"code","8d822e21":"code","984c5e87":"code","cdf11d3e":"code","2d78e326":"code","d463feb0":"code","8b667fa7":"code","e0232dfe":"code","aad9a284":"code","96d2c683":"code","5b736056":"code","1415b5e8":"code","7c695e12":"code","4e10b2f0":"code","ca0da7be":"code","a7f8320a":"code","5f25babe":"code","1d2e3f9e":"code","e91953ba":"code","ca24abc6":"markdown","65d1dc51":"markdown","5e01b2fd":"markdown"},"source":{"ffaa9537":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \n\n# Any results you write to the current directory are saved as output.","1642be88":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport cv2\n \n# imageio library will be used for image input\/output\nimport imageio\nimport pandas as pd\nimport numpy as np\nimport re\nimport os\nimport glob\n# this library is needed to read XML files for converting it into CSV\nimport xml.etree.ElementTree as ET\nimport shutil","87bb2799":"data=pd.read_csv(\"\/kaggle\/input\/new-csv\/train_sort_img.csv\")\n#read csv file as pd dataframe","a5d94942":"for i in range(len(data)):\n    data['imageName'][i]='\/kaggle\/input\/resimg\/iml'+data['imageName'][i][3:]\ndata['imageName']\n# rename image name to their image paths","a0e6aae1":"data.head()","fe10780d":"data=data.rename(columns={'h':'ymax','w':'xmax','height':'width','width':'height'})\n#rename columns","eab8fb3c":"data['xmax']=data['xmax']+data['xmin']\ndata['ymax']=data['ymax']+data['ymin']\n# change format of bbox coordinates","dda8f96e":"#change format of bbox coordinates\nx_scale=416\/data['width'] \ny_scale=416\/data['height']\ndata['xmin'] = (np.round(data['xmin'] *x_scale))\ndata['ymin'] = (np.round(data['ymin'] * y_scale))\ndata['xmax'] = (np.round(data['xmax']*x_scale ))\ndata['ymax'] = (np.round(data['ymax']* y_scale))\ndata['height']=416\ndata['width']=416\ndata\n\n     \n\n","14ad118c":"# defining global variable path\nimage_path = \"\/kaggle\/input\/resimg\/iml\"\n\n \ndef loadImages(path):\n    # Put files into lists and return them as one list of size 4\n\n    image_files = sorted([os.path.join(path, '', file)\n         for i in range(len(data))\n                          for file in os.listdir(path) if      file.endswith('{}'.format(data['imageName'][i][35:]))])\n \n    return image_files","69ee8850":"image_file=loadImages(image_path)\nimage_file","389a7193":"#return a np array of resized images \ndef processing(data):\n    img = [cv2.imread(i, cv2.IMREAD_UNCHANGED) for i in data[:]]\n    height = 416\n    width = 416\n    dim = (width, height)\n    res_img = []\n    for i in range(len(img)):\n        res = cv2.resize(img[i], dim, interpolation=cv2.INTER_LINEAR)\n        res_img.append(res)\n\n     \n\n    \n \n    #no_noise = []\n    \n    #for i in range(len(res_img)):\n        #blur = cv2.GaussianBlur(res_img[i], (5, 5), 0)\n        #no_noise.append(blur)\n \n\n\n    \n    \n    return res_img","764a8b8c":"image_file=np.asarray(image_file)\n# converts list to np array","7b541a81":"# makes np array of unique images and gets rid of repititions\nimage_file=np.unique(image_file)\nimage_file\n","d6f94e55":"no_noise_images=processing(image_file)","7d440d46":"no_noise_images=np.asarray(no_noise_images)","a9372152":"#makes dictionary of image path assigned with its np array\nprocessed_images={}\nfor A, B in zip(image_file, no_noise_images):\n    processed_images[A] = B\n\nprint(processed_images)\n","80c569be":"# try out on one image if our operations are correct\ncv2.rectangle(processed_images['\/kaggle\/input\/resimg\/iml\/00_00.jpg'],(int(data['xmin'][0]),int(data['ymin'][0])),(int(data['xmax'][0]),int(data['ymax'][0])),(0,255,0),2)","925b0999":"plt.imshow(processed_images['\/kaggle\/input\/resimg\/iml\/00_00.jpg'])\n# shows image","5a8f73cc":"\nlabels=np.zeros((len(image_file),9,5))\nn=0\nfor i in image_file:\n    df= data[(data['imageName'] == i)]\n    row_list=[]\n    for rows in df.itertuples(): \n        \n    # Create list for the current row \n        my_list =[1, rows.xmin, rows.ymin,rows.xmax,rows.ymax] \n        row_list.append(my_list) \n    # append the list to the final list \n        p=0\n        for m in row_list:\n            labels[n,p]=m\n            p=p+1\n    n=n+1\n  \n \n    \n\n     ","4b262e93":"data1=data.copy()\n# makes a variable data1 which is the copy of data since we want to modify the format and keep the original one intact","5f85e99a":"data1['tag']='text'\ndata1.drop(['width','height','lex','address'],inplace=True,axis=1)\ndata1=data1[['imageName','xmin','ymin','xmax','ymax','tag']]\n#performing some format modifications so as to make image files in format of pretrained detection model","09835cb0":"data1 = data1.astype({\"xmin\": int, \"ymin\": int,'xmax':int,'ymax':int}) # assinging datatypes to columns\ndata1","0c7d16da":"import keras\nkeras.__version__","862ff483":"ANNOTATIONS_FILE='annotations.csv'\nCLASSES_FILE='classes.csv'\n# file names are stored as variables","fcb6737f":"data1.to_csv(ANNOTATIONS_FILE,index=False,header=None) # storing annotations from data1 as csv file","2a18e86b":"classes = set(['text'])\n\nwith open(CLASSES_FILE, 'w') as f:\n    for i, line in enumerate(sorted(classes)):\n        f.write('{},{}\\n'.format(line,i))","8d822e21":"!head annotations.csv","984c5e87":"!git clone https:\/\/github.com\/fizyr\/keras-retinanet.git # cloning github repository","cdf11d3e":"%cd keras-retinanet\/\n\n!pip install .","2d78e326":"!python setup.py build_ext --inplace","d463feb0":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom pandas.plotting import register_matplotlib_converters\nfrom sklearn.model_selection import train_test_split\nimport urllib\nimport os\nimport csv\nimport cv2\nimport time\nfrom PIL import Image\n\nfrom keras_retinanet import models\nfrom keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image\nfrom keras_retinanet.utils.visualization import draw_box, draw_caption\nfrom keras_retinanet.utils.colors import label_color\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\nregister_matplotlib_converters()\nsns.set(style='whitegrid', palette='muted', font_scale=1.5)\n\nrcParams['figure.figsize'] = 22, 10\n\nRANDOM_SEED = 42\n\nnp.random.seed(RANDOM_SEED)\ntf.random.set_seed(RANDOM_SEED)","8b667fa7":"os.makedirs(\"snapshots\", exist_ok=True)","e0232dfe":"PRETRAINED_MODEL = '.\/snapshots\/_pretrained_model.h5'\n\nURL_MODEL = 'https:\/\/github.com\/fizyr\/keras-retinanet\/releases\/download\/0.5.1\/resnet50_coco_best_v2.1.0.h5'\nurllib.request.urlretrieve(URL_MODEL, PRETRAINED_MODEL)\n\nprint('Downloaded pretrained model to ' + PRETRAINED_MODEL)","aad9a284":"!ls snapshots # viewing contents of snapshot folder created","96d2c683":"model_path = '\/kaggle\/input\/resnet50-weights\/resnet50_csv_10.h5' # downloaded model\n#model_path = os.path.join('snapshots', sorted(os.listdir('snapshots'), reverse=True)[0]) ","5b736056":"print(model_path)","1415b5e8":"model = models.load_model(model_path, backbone_name='resnet50') #loading the model so that it can be used\nmodel = models.convert_model(model)","7c695e12":"labels_to_names = pd.read_csv('\/kaggle\/input\/anotoo\/classes.csv', header=None).T.loc[0].to_dict()","4e10b2f0":"labels_to_names","ca0da7be":"def predict(image):\n    image = preprocess_image(image.copy())\n    image, scale = resize_image(image)\n\n    boxes, scores, labels = model.predict_on_batch(\n    np.expand_dims(image, axis=0)\n    )\n\n    boxes \/= scale\n\n    return boxes, scores, labels","a7f8320a":"#THRES_SCORE = 1.0\n\ndef draw_detections(image, boxes, scores, labels):\n    THRES_SCORE = 0.2\n    for box, score, label in zip(boxes[0], scores[0], labels[0]):\n        if score < THRES_SCORE:\n            break\n\n        color = label_color(label)\n\n        b = box.astype(int)\n        draw_box(image, b, color=color)\n\n        caption = \"{} {:.3f}\".format(labels_to_names[label], score)\n        draw_caption(image, b, caption)\n","5f25babe":"def show_detected_objects(image_row,processed_images):\n    img_path = image_row.imageName\n  \n    image = processed_images[img_path]\n\n    boxes, scores, labels = predict(image)\n\n    draw = image.copy()\n    draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)\n\n    true_box = [\n    image_row.xmin, image_row.ymin, image_row.xmax, image_row.ymax\n    ]\n    #draw_box(draw, true_box, color=(255, 255, 0))\n\n    #draw_detections(draw, boxes, scores, labels)\n\n    plt.axis('off')\n    #plt.imshow(draw[boxes[:,0,2]:boxes[:,0,3],boxes[:,0,0]:boxes[:,0,1]])\n    plt.imshow(draw)\n    plt.show()\n    print(boxes[:,0,:])\n    print(scores[0][0])\n    print(draw.shape)\n    #return draw[135:192,164:250]","1d2e3f9e":"img=show_detected_objects(data1.iloc[0],processed_images)\n# will show the bounding box proposals after applying a certain thrshold to their scores ","e91953ba":"# functon to find iou b\/w two rectangular bounding boxes\n\ndef iou(boxA, boxB):\n    # determine the (x, y)-coordinates of the intersection rectangle\n    xA = max(boxA[0], boxB[0])\n    yA = max(boxA[1], boxB[1])\n    xB = min(boxA[2], boxB[2])\n    yB = min(boxA[3], boxB[3])\n\n    # compute the area of intersection rectangle\n    interArea = abs(max((xB - xA, 0)) * max((yB - yA), 0))\n    if interArea == 0:\n        return 0\n    # compute the area of both the prediction and ground-truth\n    # rectangles\n    boxAArea = abs((boxA[2] - boxA[0]) * (boxA[3] - boxA[1]))\n    boxBArea = abs((boxB[2] - boxB[0]) * (boxB[3] - boxB[1]))\n\n    # compute the intersection over union by taking the intersection\n    # area and dividing it by the sum of prediction + ground-truth\n    # areas - the interesection area\n    iou = interArea \/ float(boxAArea + boxBArea - interArea)\n\n    # return the intersection over union value\n    return iou","ca24abc6":"*preprocessed images is dict having all train files path and nd array, data is pd dataframe with ordered img paths and bounding boxes with tags*","65d1dc51":"now data1 is ready for retina net format\n","5e01b2fd":"!keras_retinanet\/bin\/train.py \\\n  --freeze-backbone \\\n  --random-transform \\\n  --weights {PRETRAINED_MODEL} \\\n  --batch-size 16 \\\n  --steps 100 \\\n  --epochs 10 \\\n  csv \/kaggle\/input\/anotoo\/annotations.csv \/kaggle\/input\/anotoo\/classes.csv"}}