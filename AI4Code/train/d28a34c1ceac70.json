{"cell_type":{"5d27a6fb":"code","f0baa95c":"code","e0ab5b2c":"code","8768b2f1":"code","f1f226aa":"code","117754ba":"code","8da16df4":"code","7cd67564":"code","c6910983":"code","15708dab":"code","b1465314":"code","4f827ec5":"code","4e1c7c0c":"code","6e32c451":"code","45dfc05f":"code","0d6ae291":"code","86f94383":"code","c26fbb47":"code","a81879d0":"markdown","219e71b0":"markdown","eba420ee":"markdown","8d6d1ee8":"markdown"},"source":{"5d27a6fb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nimport tensorflow as tf\nimport keras","f0baa95c":"print('tf version:',tf.__version__,'\\n' ,'keras version:',keras.__version__,'\\n' ,'numpy version:',np.__version__)","e0ab5b2c":"# read the data file\nsolarpower = pd.read_csv(\"..\/input\/solarpanelspower\/PV_Elec_Gas3.csv\",header = None,skiprows=1 ,\n                    names = ['date','cum_power','Elec_kW', 'Gas_mxm'], sep=',',usecols = [0,1,2,3],\n                     parse_dates={'dt' : ['date']}, infer_datetime_format=True,index_col='dt')\nprint(solarpower.head(2))","8768b2f1":"# make cum_power stationary\n\nsolarpower2 = solarpower.shift(periods=1, freq='D', axis=0)\nsolarpower['cum_power_shift'] = solarpower2.loc[:,'cum_power']\nsolarpower['day_power'] = solarpower['cum_power'].values - solarpower['cum_power_shift']\nsolarpower.iloc[0:1].day_power.value = 0.\nA = solarpower.dropna()\ndel A['cum_power'], A['cum_power_shift']\nsolarpower = A","f1f226aa":"solarpower.head(2), solarpower.tail(2)","117754ba":"# add a feature\nsolarpower['Gas_plus_Elek'] = solarpower.Gas_mxm + solarpower.Elec_kW","8da16df4":"year1 = solarpower['2011-10-27':'2012-10-26'].copy()\nyear2 = solarpower['2012-10-27':'2013-10-26'].copy()\nyear3 = solarpower['2013-10-27':'2014-10-26'].copy()\nyear4 = solarpower['2014-10-27':'2015-10-26'].copy()\nyear5 = solarpower['2015-10-27':'2016-10-26'].copy()\nyear6 = solarpower['2016-10-27':'2017-10-26'].copy()\nyear7 = solarpower['2017-10-27':'2018-10-26'].copy()\nyear8 = solarpower['2018-10-27':'2019-10-26'].copy()\nyear9 = solarpower['2019-10-27':].copy()","7cd67564":"from scipy import optimize\n\ndef test_func(x, a, b, c, d):\n    return (a + b * np.cos(c + np.pi*(360 * x \/ 365)\/180)) * np.cos(d) ","c6910983":"def plot_optimized(x_data, y_data, params):\n    plt.figure(figsize=(4, 2))\n    plt.scatter(x_data, y_data, c='y',label='Data')\n    cosinus = test_func(x_data, params[0], params[1], params[2] , params[3] )\n    plt.plot(x_data, cosinus, c='r',\n         label='Fitted function')\n    plt.legend(loc='best')\n    plt.show()\n    return cosinus","15708dab":"for year in [year1, year2, year3, year4, year5, year6, year7, year8, year9]:  \n    x_data = year.index.dayofyear\n    y_data = year['day_power'].values\n    params, params_covariance = optimize.curve_fit(test_func, x_data, y_data)\n    print(params)\n    cosinus = plot_optimized(x_data, y_data, params)\n    year['cosinus'] = cosinus","b1465314":"solarpower3 = pd.concat([year1,year2,year3,year4,year5,year6,year7,year8, year9], axis='rows')","4f827ec5":"solarpower3.head(3), solarpower3.tail(3)","4e1c7c0c":"X_train = solarpower3[:]\n#X_valid = solarpower3['2018-10-27':] # is 365 days\n#X_train.shape, X_valid.shape","6e32c451":"# we devide the series into multiple input and output patterns\n\ndef my_split_window(array, y_series, window_in, window_out):\n    '''\n    the Pandas dataframe is split into output sequences of length window_in and \n    output sequences of lenght window_out\n    returns arrays X, y\n    '''\n    X = []\n    y = []\n    n_steps = array.shape[0] - window_in + 1\n    #print('n_steps', n_steps)\n    for step in range(n_steps):\n        if (step + window_in + window_out -1) > (len(y_series)):\n            break\n        X_w = []\n        for i in range(window_in):\n            X_w.append(array[i+step])\n            y_w = []\n            for j in range(window_out):\n                n = i + j + step\n                y_w.append(y_series[n])\n        X_w = np.array(X_w)\n        X.append(X_w)\n        y_w = np.array(y_w)\n        y.append(y_w)   \n    X = np.array(X)\n    y = np.array(y)\n    return X, y","45dfc05f":"# apply my_split_window on daily solar power with a window of 365 days (we do not make account for leap years)\n\nwindow_in = 365\nwindow_out = 365\nfeatures = ['day_power','Elec_kW', 'Gas_mxm', 'Gas_plus_Elek', 'cosinus']\ny_series = X_train.day_power.values\nX, y = my_split_window(np.array(X_train[features]) , y_series ,  window_in, window_out)\nprint('X.shape', X.shape, 'y.shape', y.shape)\n# print a sample\nfor i in range(2):\n    print(X[i][-2:], y[i][-2:])","0d6ae291":"# vector output model:\n# model for univariate series input and prediction of  timestep vector\n# we have an input shape = (number of windows, window_in) \n#  and we have a window size of one year (365 days)\n# the output vector is of shape(number of window_out)\nwindow_in = 365\nwindow_out = 365\nn_features = X.shape[2]\nprint('n_features',n_features)\nfeatures = ['day_power', 'Elec_kW', 'Gas_mxm', 'Gas_plus_Elek', 'cosinus']\n# define model\ndef multi_step_output_model(window_in, window_out, n_features):\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.BatchNormalization())\n    model.add(tf.keras.layers.Conv1D(filters=32, kernel_size=2, activation='relu', \n                                 input_shape=(window_in, n_features)))\n    model.add(tf.keras.layers.MaxPooling1D(pool_size=2))\n    model.add(tf.keras.layers.Flatten())\n    model.add(tf.keras.layers.BatchNormalization())    \n    model.add(tf.keras.layers.Dense(50, activation='relu'))\n    model.add(tf.keras.layers.Dropout(0.2))\n    model.add(tf.keras.layers.Dense(window_out))\n    return model\n\nmodel = multi_step_output_model(window_in, window_out, window_out)\nepochs=12000\nrange1 = 4\ny_hat_dict = {}\nfor steps in range(range1):\n    # compile the model:\n    model.compile(optimizer='adam', loss='mae')\n    # fit model\n    history = model.fit(X, y, epochs=epochs, verbose=0)\n    X_input = np.array(X_train[features][-365:].values)\n    X_input = X_input.reshape(1, window_in, n_features)\n    y_hat = model.predict(X_input, verbose=0)\n    name = '107_I_y_hat_10000e' + str(steps)\n    y_hat_dict[name]=y_hat[0]\n    file = name + 'range' + str(range1) + '.npy'\n    np.save(file, y_hat[0])\n    print('step', steps, 'done')","86f94383":"# funcion to reverse make stationary\ndef cumulate(series, start=0):\n    '''\n    start is the starting cumulative power, the series is the daily solar power\n    a list with daily cumulative power is the result\n    '''\n    cum = [start]\n    for i in range(len(series)):\n        sum_plus = cum[i] + series[i]\n        cum.append(sum_plus)\n    return cum","c26fbb47":"#y_true = X_valid.day_power.values\n\n#plt.plot(y_true, label='true_power')\nfor key, value in y_hat_dict.items()  :\n    plt.plot(value, label=key)\n    plt.legend()\n    #first_r2_score = r2_score(y_true, value) # Best possible score is 1.0 \n    #first_mae = mean_absolute_error(y_true, value)\n    #print('r2_score %.5f' % first_r2_score)\n    #print('mae %.2f' % first_mae)\nplt.legend()\nplt.show()\n\n#y_true_cumulative = cumulate(y_true)\n#plt.plot(y_true_cumulative, label='true_power')\nfor key, value in y_hat_dict.items()  :\n    y_predicted_cumulative = cumulate(value)\n    plt.plot(y_predicted_cumulative, label='predicted_power')\n    #true_cumulative_power_after_one_year = int(y_true_cumulative[-1])\n    predicted_cumulative_power_after_one_year = int(y_predicted_cumulative[-1])\n    #print('true cumulative power after one year:', true_cumulative_power_after_one_year)\n    #print('predicted cumulative power after one year:', predicted_cumulative_power_after_one_year)\n    #acc_one_year = 1- (true_cumulative_power_after_one_year - predicted_cumulative_power_after_one_year)\/true_cumulative_power_after_one_year\n    #acc_one_year = acc_one_year * 100\n    #print('accuracy after one year: %.2f' %  acc_one_year,'%')\n    #print('r2 score %.2f ' % r2_score(y_true_cumulative, y_predicted_cumulative))\n    #print('mae  %.2f' % mean_absolute_error(y_true_cumulative, y_predicted_cumulative))\n    \nplt.legend()\nplt.show()","a81879d0":"test 107 : test prediction solarpower with multivariate multiple input multi-step output cnn and feature engineering\n","219e71b0":"# Adding features\n","eba420ee":"This notbook uses :\ntf version: 2.1.0-rc0 ; keras version: 2.3.1 ; numpy version: 1.17.4","8d6d1ee8":"The daily solar energy follows a modulated cosine function. We can fit a function to the yearly data and use it as an extra feature"}}