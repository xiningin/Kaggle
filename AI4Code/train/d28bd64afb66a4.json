{"cell_type":{"8ac60ef7":"code","2a261b2f":"code","575b1919":"code","a07e4ba7":"code","5c61270c":"code","1dd49a67":"code","2521e122":"code","4cde200b":"code","835ab49d":"code","d553cfe4":"code","f4bc94c9":"code","a829acb5":"code","d6a52b5f":"code","06d8b6d3":"code","189964a0":"code","f194e2bc":"code","3679e315":"code","db3c9a8d":"code","c648cd78":"code","1e9ba2ba":"code","1251630b":"code","6862b69f":"code","b2a1f12e":"code","49fbec92":"code","7e32f02a":"code","574d1c0d":"code","8018c12f":"code","34b3d911":"code","bd00446b":"code","8819b7e6":"code","e7100de9":"code","33c7a8a5":"code","2ba54e1f":"code","2ff05409":"code","3d0585d6":"code","eaedda52":"code","90a8c8e1":"code","81a4ecf2":"code","2155be94":"code","e891f348":"code","f10ebbc4":"code","e8c0493f":"code","a5f60f62":"code","7bc5c460":"code","2e1eb508":"code","6436606b":"code","802af01e":"code","dd47e689":"code","e00a2c7c":"code","ae3f22a3":"code","41bdb7a7":"code","adcd511c":"code","5366891a":"code","5f319194":"code","9a6200bd":"code","76d9382e":"code","db8e5fc3":"code","f5ee5d31":"code","935d1879":"code","2d783132":"code","7e9f67a2":"code","dc8f0ab4":"code","b7328dd6":"code","fb245d80":"code","a1d9a534":"code","ee8bb2fe":"code","142019d1":"code","26a3817c":"code","5a9528ed":"code","be754692":"code","4965b5b3":"code","a8d03886":"code","2fd0c4b9":"code","3d9ce0dc":"code","b135b56d":"code","e88145ab":"code","bf6e3b6b":"code","076c6c61":"code","e5271701":"code","6e941a29":"markdown","82b38043":"markdown","569c1835":"markdown","f17f3b6c":"markdown","c6ff6ffe":"markdown","1351565b":"markdown","d9b1e906":"markdown","7e3c5980":"markdown","be9e055d":"markdown","43fccd9f":"markdown","055c1f5e":"markdown","0b944f17":"markdown","7ea79696":"markdown","57ae61cf":"markdown","8aeee27d":"markdown","b5eee20d":"markdown","330230a8":"markdown","525e5fb2":"markdown","bb9ab597":"markdown","261e0e65":"markdown","e556dee8":"markdown","0dff7ab9":"markdown","03cd3a70":"markdown","ea17e9fa":"markdown","6f069771":"markdown","4e6d1200":"markdown","ef63b4a3":"markdown","108f216a":"markdown","10dc5d8b":"markdown","944a1cd4":"markdown","7ccbb324":"markdown","b4d4b0cc":"markdown","1202d705":"markdown","258eb62a":"markdown","94c2fbe3":"markdown","5f870616":"markdown","b8534843":"markdown","9d8fecf5":"markdown","b96e1ce8":"markdown","7afa5048":"markdown","70479daf":"markdown","9a2665eb":"markdown","3038e8b9":"markdown","5015cb8c":"markdown","abc2313b":"markdown","5a57eae4":"markdown","70956bf7":"markdown","23c29df7":"markdown"},"source":{"8ac60ef7":"# Imports\nfrom pathlib import Path\nfrom pprint import pprint\nimport json\nfrom datetime import datetime\nfrom calendar import monthrange\nfrom math import sqrt, pi, exp, sin, cos\n\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom scipy.interpolate import UnivariateSpline\nimport pandas as pd\nfrom shapely.geometry import Point\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as ticker\nimport seaborn as sns\nimport rasterio as rio\nfrom rasterstats import zonal_stats\nfrom affine import Affine\nfrom tqdm.notebook import tqdm\nimport folium\nimport branca\n\nsns.set() # For pretty charts","2a261b2f":"# Paths\nroot = Path(\"\/kaggle\/input\/\")\nadmin_path = root \/ \"world-geo-data\" \/ \"ne_10m_admin_1_states_provinces.shp\"  # admin boundaries\nviirs_path = root \/ \"viirs-dnb-annual-puertorico\" \/ \"viirs-pr-2019.tif\"  # night lights\neia_path = root \/ \"eia923-pr-2018\" \/ \"EIA923_PR_2018.csv\"  # plant generation data\neie = root \/ \"ds4g-environmental-insights-explorer\" \/ \"eie_data\"\ns5p_path = eie \/ \"s5p_no2\"  # Sentinel 5P\ngldas_path = eie \/ \"gldas\"  # Land Data\ngfs_path = eie \/ \"gfs\"  # forecast\ngppd_path = eie \/ \"gppd\" \/ \"gppd_120_pr.csv\"  # power plants","575b1919":"# Load the administrative boundary\nadmin = gpd.read_file(admin_path)\nadmin = admin.loc[admin.name == \"Puerto Rico\"]","a07e4ba7":"fossil_fuels = [\n    \"Oil\",\n    \"Gas\",\n    \"Coal\"\n]","5c61270c":"def show_gppd_summary(gppd):\n    \"\"\"\n    Display a quick summary of power plants, broken down by fuel.\n    \"\"\"\n    \n    sns.set_style(\"whitegrid\")\n    tot_mw = gppd.capacity_mw.sum()\n    fossil_mw = gppd.loc[(gppd.primary_fuel.isin(fossil_fuels))].capacity_mw.sum()\n    print(f\"{100*fossil_mw\/tot_mw:.0f}% of total capacity is fossil fuel-based\")\n\n    fuel_tots = gppd.groupby('primary_fuel')['capacity_mw'].sum().sort_values(ascending=False)\n\n    fig, ax = plt.subplots(figsize=(18,6))\n    fuel_tots.plot.bar(\n        ax=ax,\n        color=['gray', 'darkblue', 'black', 'orange','green','blue']\n    )\n    ax.set_title(\"Total capacity by fuel\", fontsize=16)\n    ax.set_ylabel(\"Total capacity (MW)\", fontsize=16)\n    ax.set_xlabel(\"Fuel\", fontsize=16)\n    ax.set_xlabel(\"Fuel\")\n    ax.xaxis.grid(False)\n    ax.set_ylim([0, 5000])\n    ax.tick_params(axis='both', which='both', labelsize=12)\n    sns.despine()\n    plt.show()","1dd49a67":"gppd = pd.read_csv(gppd_path)\nshow_gppd_summary(gppd)","2521e122":"min_capacity = 150\nprint(\"Fossil-fuel plants above 150 MW capacity:\")\nprint(\", \".join(gppd.loc[(gppd.primary_fuel.isin(fossil_fuels)) & (gppd.capacity_mw > min_capacity)][\"name\"].to_list()))","4cde200b":"key_plants = {\n    \"Cambalache\": \"Cambalache Plant\",\n    \"San Juan CC\": \"Central San Juan Plant\",\n    \"Palo Seco\": \"Palo Seco Plant\",\n    \"Mayag\u00fcez\": \"Mayaguez Plant\",\n    \"EcoEl\u00e9ctrica\": \"EcoElectrica\",\n    \"Costa Sur\": \"Costa Sur Plant\",\n    \"Aguirre\": \"Aguirre Plant\",\n    \"A.E.S. Corp.\": \"AES Puerto Rico\"\n}\nprint(\"GPPD name\\t\\tEIA name\")\nprint(\"-\" * 46)\nfor k, v in key_plants.items():\n    print(f\"{k}:\\t\\t{v}\")","835ab49d":"def merge_power_data(eia, gppd):\n    \"\"\"\n    Merge together the main fossil fuel plant data from bata datasets.\n    \"\"\"\n    \n    eia = eia.dropna(axis=\"index\", how=\"any\", thresh=4)  # get rid of rows with too much NaN data\n    eia_gr = eia.groupby([\"Plant_Name\"]).sum()  # and combine plants with the same name (separate sub-units listed independently)\n    eia_gr[\"Fuel_Code\"] = eia.groupby([\"Plant_Name\"])[\"Fuel_Code\"].apply(lambda x: \", \".join(x))  # keeping all fuel codes\n    eia_gr = eia_gr.loc[eia_gr.index.isin(key_plants.values())]  # keep only main plants\n\n    # simplify GPPD data before joining\n    gppd_extra = gppd.groupby(\"name\").first()\n    gppd_join = gppd.groupby(\"name\").sum().reset_index()[[\"name\", \"capacity_mw\"]]\n    gppd_join[\".geo\"] = gppd_extra[\".geo\"].to_list()\n    gppd_join[\"primary_fuel\"] = gppd_extra[\"primary_fuel\"].to_list()\n    gppd_join = gppd_join.loc[gppd_join[\"name\"].isin(key_plants.keys())]\n    gppd_join[\"name_join\"] = gppd_join.apply(lambda row: key_plants[row[\"name\"]], axis=1)\n\n    # join on names\n    plants = eia_gr.merge(gppd_join, how=\"left\", left_on=\"Plant_Name\", right_on=\"name_join\")\n    plants = plants.set_index(\"name\").drop(columns=[\"name_join\"])\n    plants[\"xy\"] = plants[\".geo\"].apply(lambda geo: json.loads(geo)[\"coordinates\"])  # extract x, y coords\n    plants = plants.drop(columns=\".geo\")\n    plants[\"generation_hourly\"] = plants[\"Netgen_Total\"] \/ (24 * 365)  # convert from yearly to hourly\n    plants[\"capacity_factor\"] = plants[\"generation_hourly\"] \/ plants[\"capacity_mw\"]  # calc capacity factor\n    plants = gpd.GeoDataFrame(plants, geometry=plants[\"xy\"].map(lambda x: Point(x[0], x[1])))\n    \n    return plants","d553cfe4":"def pretty_cols(plants):\n    \"\"\"Create some prettier column names for displaying.\"\"\"\n    plants[\"Capacity (MW)\"] = plants[\"capacity_mw\"].astype(int)\n    plants[\"Hourly Generation (MWh)\"] = plants[\"generation_hourly\"].apply(lambda x: f\"{x:.0f}\")\n    plants[\"Capacity Factor\"] = plants[\"capacity_factor\"].apply(lambda x: f\"{100*x:.0f}%\")\n    plants[\"Primary Fuel\"] = plants[\"primary_fuel\"]\n    return plants","f4bc94c9":"plants = pd.read_csv(eia_path)\nplants = merge_power_data(plants, gppd)\nplants = pretty_cols(plants)\nplants[[\"Primary Fuel\", \"Capacity (MW)\", \"Hourly Generation (MWh)\", \"Capacity Factor\"]]","a829acb5":"print(f\"Included plants account for {(100 * plants.capacity_mw.sum() \/ gppd.capacity_mw.sum()):.0f}% of the total system.\")","d6a52b5f":"def map_plants(df):\n    \"\"\"\n    Draw a Folium map of GPPD data.\n    \"\"\"\n    \n    colors = {\n        \"Oil\": \"gray\",\n        \"Gas\": \"darkblue\",\n        \"Coal\": \"black\",\n        \"none\": \"green\"\n    }\n    \n    m = folium.Map(\n        location=(18.2, -66.3),\n        zoom_start=9,\n        tiles=\"Stamen Terrain\",\n        zoom_control=True,\n    )\n    \n    folium.features.GeoJson(\n        admin.to_json(),\n        style_function=lambda x: {'fillColor': '#FFFFFF', 'lineColor': '#00FFFFFF'},\n    ).add_to(m)\n    \n    for idx, row in df.iterrows():\n        lon, lat = row[\"xy\"]\n        icon = folium.Icon(\n            color=colors[row.primary_fuel.split(\",\")[0]],\n            icon_color=\"white\",\n            icon=\"bolt\",\n            prefix=\"fa\"\n        )\n        tooltip = f\"<p><strong>{row.name}<\/strong><\/p><p>Fuel: {row.primary_fuel}<p><p>Cap: {row.capacity_mw:.0f} MW<\/p><p>Gen: {row.generation_hourly:.0f} MWh\/h<\/p>\"\n        folium.Marker(\n            (lat, lon),\n            color=colors[row.primary_fuel.split(\",\")[0]],\n            icon=icon,\n            tooltip=tooltip,\n        ).add_to(m)\n    return m","06d8b6d3":"m = map_plants(plants)\nprint(\"You can mouse over the points to see their name and other details.\")\nm","189964a0":"def flipud(raster, affine):\n    \"\"\"\n    Flip raster N-S and fix affine.\n    Corrects upside down S5P data.\n    Adapted from here: https:\/\/github.com\/perrygeo\/python-rasterstats\/issues\/98#issuecomment-471136551\n    \"\"\"\n    \n    raster = np.flipud(raster)\n    affine = Affine(\n        affine.a,\n        affine.b,\n        affine.c,\n        affine.d,\n        -1 * affine.e,\n        affine.f + (affine.e * (raster.shape[0]-1))\n    )\n    return raster, affine","f194e2bc":"def calc_no2(arr, aff, admin):\n    \"\"\"\n    Get mean of mol\/m2, mutiply by total area of PR.\n    Then convert to grams\/tons.\n    \"\"\"\n    \n    no2_mol_mass = 46.006  # g\/mol source: https:\/\/pubchem.ncbi.nlm.nih.gov\/compound\/Nitrogen-dioxide\n    total_area = 9104 * 1e6  # m^2 area of PR source: https:\/\/en.wikipedia.org\/wiki\/Puerto_Rico\n    no2_col_mean = zonal_stats(\n        admin,\n        arr,\n        affine=aff,\n        nodata=-999,\n    )[0][\"mean\"]\n    no2_mol = no2_col_mean * total_area\n    no2_g = no2_mol * no2_mol_mass\n    no2_ton = no2_g \/ 1e6\n    return no2_ton","3679e315":"def average_s5p_cf(f, band=7):\n    \"\"\"\n    Get S5P cloud-cover fraction.\n    \"\"\"\n    \n    with rio.open(f) as rd:\n        arr = rd.read(band)\n    return np.nanmean(arr)","db3c9a8d":"def calc_tot_no2(f, admin, band=1):\n    \"\"\"\n    Calculate total NO2 over an area.\n    \"\"\"\n    with rio.open(f) as rd:\n        arr = rd.read(band)\n        aff = rd.transform\n    arr, aff = flipud(arr, aff)\n    no2_ton = calc_no2(arr, aff, admin)\n    return no2_ton","c648cd78":"def s5_to_df(s5p_path, admin, disable_tqdm=False):\n    \"\"\"\n    Create a DF with time-series S5P data for the main values.\n    Total NO2, strat, trop and CF.\n    \"\"\"\n    \n    s5p_data = []\n    for f in tqdm(list(s5p_path.iterdir()), disable=disable_tqdm):\n        s5p_data.append({\n            \"date\": f.stem.split(\"no2_\")[1].split(\"T\")[0],\n            \"trop_no2\": calc_tot_no2(f, admin, band=2),\n            \"strat_no2\": calc_tot_no2(f, admin, band=3),\n            \"cf\": average_s5p_cf(f),\n        })\n    s5p_df = pd.DataFrame(s5p_data)\n    s5p_df[\"date\"] = pd.to_datetime(s5p_df[\"date\"])\n    s5p_df = s5p_df.sort_values(by=\"date\")\n    s5p_df = s5p_df.set_index(\"date\")\n    return s5p_df","1e9ba2ba":"def plot_total_no2(s5p_df, max_cf=0.3):\n    \"\"\"\n    Create a plot of total NO2 levels.\n    \"\"\"\n    \n    sns.set_style(\"whitegrid\")\n    s5p_df_cloudfree = s5p_df.loc[s5p_df.cf < max_cf]\n    no2_strat_ts = s5p_df_cloudfree[[\"strat_no2\"]]\n    no2_trop_ts = s5p_df_cloudfree[[\"trop_no2\"]]\n    cf_ts = s5p_df[[\"cf\"]]\n\n    fig, ax1 = plt.subplots(figsize=(20,10))\n    no2_strat_ts.plot(ax=ax1)\n    no2_trop_ts.plot(ax=ax1, color=\"green\", linewidth=4)\n    ax1.set_xlabel(\"Date\", fontsize=16)\n    ax1.set_ylabel(\"Total NO2 (tons)\", color=\"green\", fontsize=16)\n    ax1.set_ylim([0, 25])\n    ax1.legend([\"Stratospheric\", \"Tropospheric\"], loc=\"upper left\", prop={'size': 16})\n    ax1.set_title(\"Annual variation in total NO2 levels\", fontsize=16)\n    ax1.xaxis.grid(False)\n    ax1.tick_params(axis='both', which='both', labelsize=12)\n\n    ax2 = ax1.twinx()\n    cf_ts.plot(\n        linewidth=0.1,\n        color=\"black\",\n        ax=ax2,\n        legend=True,\n    )\n    ax2.set_ylabel(\"Cloud cover fraction\", color=\"black\", fontsize=16)\n    ax2.set_ylim([0, 1])\n    ax2.legend([\"Cloud cover fraction\"], prop={'size': 16})\n\n    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))\n    fig.autofmt_xdate()\n    sns.despine(left=True)\n    plt.show()","1251630b":"s5p_df = s5_to_df(s5p_path, admin)\nprint(\"This plot shows troposheric NO2 in green, with days above 30% cloudy excluded.\\nStratospheric NO2 and cloud fraction are included for information.\")\nplot_total_no2(s5p_df)","6862b69f":"def rad2com(rad):\n    \"\"\"Convert mathematical polar radians to compass direction.\"\"\"\n    com = 90 - rad * 180\/pi\n    com = com if com > 0 else com + 360\n    return com","b2a1f12e":"def com2rad(com):\n    \"\"\"Convert compass direction to mathematical polar radians.\"\"\"\n    rad = (90 - com) * pi \/ 180\n    rad = rad if rad > -pi else rad + 2 * pi\n    return rad","49fbec92":"def get_wind_data_point(gfs_path, x=-66.75, y=18, disable_tqdm=False):\n    \"\"\"\n    Create wind time-series at a point.\n    Calcualte magnitude and math + compass direction.\n    \"\"\"\n    \n    gfs_data = []\n    for f in tqdm(list(gfs_path.iterdir()), disable=disable_tqdm):\n        date = f.stem.split(\"gfs_\")[1]\n        with rio.open(f) as rd:\n            u, v = next(rd.sample(xy=[(x, y)], indexes=[4, 5]))  # 4 and 5 are the u and v bands\n            gfs_data.append({\n                \"date\": datetime(int(date[:4]), int(date[4:6]), int(date[6:8]), int(date[8:])),\n                \"u\": u,\n                \"v\": v,\n            })\n    gfs_df = pd.DataFrame(gfs_data)\n    gfs_df = gfs_df.sort_values(by=\"date\")\n    gfs_df = gfs_df.set_index(\"date\")\n    gfs_df[\"mag\"] = np.sqrt(gfs_df.u ** 2 + gfs_df.v ** 2)\n    gfs_df[\"dir\"] = np.arctan2(-gfs_df.v, -gfs_df.u)  # negative so we get the FROM direction!\n    gfs_df[\"compass\"] = gfs_df[\"dir\"].map(rad2com)\n    return gfs_df","7e32f02a":"x, y = plants.loc[\"San Juan CC\"].xy\ngfs_df = get_wind_data_point(gfs_path, x=x, y=y)\nprint(\"Let's have a quick look at a sample of wind data from this point to make sure our maths made sense!\")\ngfs_df.head(5)","574d1c0d":"def make_rose(df):\n    \"\"\"\n    Convert wind data to wind rose data.\n    Adapted from https:\/\/gist.github.com\/phobson\/41b41bdd157a2bcf6e14.\n    \"\"\"\n    \n    def speed_labels(bins, units):\n        labels = []\n        for left, right in zip(bins[:-1], bins[1:]):\n            if left == bins[0]:\n                labels.append('calm'.format(right))\n            elif np.isinf(right):\n                labels.append('>{} {}'.format(left, units))\n            else:\n                labels.append('{} - {} {}'.format(left, right, units))\n        return labels\n\n    total_count = len(df)\n    calm_count = len(df.loc[df.mag == 0.0])\n    speed_bins = [-1, 0, 1, 2, 3, 4, 5, np.inf]\n    speed_labs = speed_labels(speed_bins, units=\"m\/s\")\n    dir_bins = np.arange(-7.5, 370, 15)\n    dir_labels = (dir_bins[:-1] + dir_bins[1:]) \/ 2\n    \n    rose = (\n        df.assign(\n            speed_bins=lambda df: pd.cut(df[\"mag\"], bins=speed_bins, labels=speed_labs, right=True)\n        ).assign(\n            dir_bins=lambda df: pd.cut(df['compass'], bins=dir_bins, labels=dir_labels, right=False)\n        ).replace({'dir_bins': {360: 0}})\n        .groupby(by=['speed_bins', 'dir_bins'])\n        .size()\n        .unstack(level='speed_bins')\n        .fillna(0)\n        .assign(calm=lambda df: calm_count \/ df.shape[0])\n        .sort_index(axis=1)\n        .applymap(lambda x: x \/ total_count * 100)\n    )\n    \n    # Fill empty rows in rose DF where no wind was recorded in that direction\n    # Otherwise plotting complains\n    empty = {k: 0 for k, v in rose.loc[0].to_dict().items()}\n    for d in np.arange(0, 360, 15):\n        if d not in rose.index:\n            s = pd.Series(empty)\n            s.name = d\n            rose = rose.append(s)\n    rose = rose.sort_index()\n    \n    return rose","8018c12f":"def draw_rose(rose, size=10):\n    \"\"\"\n    Draw a wind rose.\n    Adapted from: https:\/\/gist.github.com\/phobson\/41b41bdd157a2bcf6e14\n    \"\"\"\n    \n    def convert_dir(directions):\n        N = directions.shape[0]\n        barDir = directions * np.pi\/180. - np.pi\/N\n        barWidth = 2 * np.pi \/ N\n        return barDir, barWidth\n    \n    palette = sns.color_palette('inferno', n_colors=rose.shape[1])\n    bar_dir, bar_width = convert_dir(np.arange(0, 360, 15))\n\n    fig, ax = plt.subplots(figsize=(size, size), subplot_kw=dict(polar=True))\n    ax.set_theta_direction('clockwise')\n    ax.set_theta_zero_location('N')\n\n    for n, (c1, c2) in enumerate(zip(rose.columns[:-1], rose.columns[1:])):\n        if n == 0:\n            # first column only\n            ax.bar(bar_dir, rose[c1].values, \n                   width=bar_width,\n                   color=palette[0],\n                   edgecolor='none',\n                   label=c1,\n                   linewidth=0)\n\n        # all other columns\n        ax.bar(bar_dir, rose[c2].values, \n               width=bar_width, \n               bottom=rose.cumsum(axis=1)[c1].values,\n               color=palette[n+1],\n               edgecolor='none',\n               label=c2,\n               linewidth=0)\n\n    leg = ax.legend(loc=(0.75, 0.95), ncol=2)\n    xtl = ax.set_xticklabels(['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'])\n    ax.yaxis.set_major_formatter(ticker.PercentFormatter(decimals=0))\n    ax.tick_params(axis='both', which='both', labelsize=14)\n    \n    return fig, ax","34b3d911":"w_mean = gfs_df.mean()[\"mag\"]\nrose = make_rose(gfs_df)\nprint(f\"Mean wind speed is {w_mean:.2f} m\/s\")\nfig = draw_rose(rose)","bd00446b":"def s5p_arr_timeseries(s5p_path, gfs_df, max_cf=0.3, disable_tqdm=False):\n    \"\"\"\n    Create a timeseries of S5P arrays showing NO2 column density.\n    Output a list of dicts, including wind magnitude so we can filter with that.\n    \"\"\"\n    \n    s5p_arrs = []\n    for f in tqdm(list(s5p_path.iterdir()), disable=disable_tqdm):\n        date, time = f.stem.split(\"no2_\")[1].split(\"_\")[0].split(\"T\")\n        date = datetime(int(date[:4]), int(date[4:6]), int(date[6:8]), int(time[:2]), int(time[2:4]), int(time[4:]))\n        mean_wind_mag = gfs_df.loc[gfs_df.index.date == date.date()][\"mag\"].mean()\n        with rio.open(f) as rd:\n            cf = np.nanmean(rd.read(7))  # cloud\n            cf = cf <= max_cf\n            arr = rd.read(2)  # tropo\n            aff = rd.transform\n\n            arr = arr * cf  # only include relatively cloud free days\n            arr, aff = flipud(arr, aff)  # fix the upside down data!\n        s5p_arrs.append({\"date\": date, \"wind\": mean_wind_mag, \"arr\": arr, \"aff\": aff})\n    return s5p_arrs, aff","8819b7e6":"print(\"Loading wind data.\")\ns5p_arrs, s5p_aff = s5p_arr_timeseries(s5p_path, gfs_df)","e7100de9":"wind_cutoff = 3  # this is pretty arbitrary!\ns5p_wind = [w[\"arr\"] for w in s5p_arrs if w[\"wind\"] >= wind_cutoff]\ns5p_calm = [w[\"arr\"] for w in s5p_arrs if w[\"wind\"] < wind_cutoff]\ns5p_wind_mean = np.nanmean(np.stack(s5p_wind), axis=0)\ns5p_calm_mean = np.nanmean(np.stack(s5p_calm), axis=0)\nprint(f\"Number of windy days: {len(s5p_wind)}\")\nprint(f\"Number of calm days: {len(s5p_calm)}\")","33c7a8a5":"def cm2rgb(hexcm):\n    \"\"\"Create an RGB (scale 0-1) version of the provided hex colormap function.\"\"\"\n    def rgbcm(x):\n        h = hexcm(x).lstrip('#')\n        return tuple(int(h[i:i+2], 16)\/255 for i in (0, 2, 4))\n    return rgbcm","2ba54e1f":"def add_no2_to_map(arr, m):\n    \"\"\"\n    Add a raster image to a Folium map.\n    \"\"\"\n    \n    arr = arr.copy() * 1e6  # becomes mol\/km2 instead of mol\/m2\n    no2cm = branca.colormap.linear.YlOrRd_09.scale(0, 20)\n    no2cm.caption = 'Tropospheric NO2 density in mol\/km2'\n    no2cm.add_to(m)\n\n    folium.raster_layers.ImageOverlay(\n        image=arr,\n        bounds=[[18.6,-67.3,],[17.9,-65.2]],\n        colormap=cm2rgb(no2cm),\n        opacity=0.7,\n    ).add_to(m)\n    return m","2ff05409":"m = map_plants(plants)\nm = add_no2_to_map(s5p_wind_mean, m)\nm","3d0585d6":"def compare_no2_fields(arr_wind, arr_calm):\n    \"\"\"Plot comparison of windy to calm days.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, figsize=(20, 8))\n    ax1.imshow(arr_wind, cmap=\"YlOrRd\", vmin=0, vmax=2e-5)\n    ax1.set_title(\"Windy\", fontsize=16)\n    ax2.imshow(arr_calm, cmap=\"YlOrRd\", vmin=0, vmax=2e-5)\n    ax2.set_title(\"Calm\", fontsize=16)\n    sns.despine()\n    ax1.xaxis.grid(False)\n    ax1.yaxis.grid(False)\n    ax2.xaxis.grid(False)\n    ax2.yaxis.grid(False)\n    ax1.axis(\"off\")\n    ax2.axis(\"off\")\n    plt.show()","eaedda52":"compare_no2_fields(s5p_wind_mean, s5p_calm_mean)","90a8c8e1":"median_wind_direction = gfs_df.loc[gfs_df.mag > 3].compass.median()\nprint(f\"Median wind direction: {median_wind_direction:.0f}\u00b0\")","81a4ecf2":"def merge_close_plants(plants, dist_deg=0.05):\n    \"\"\"\n    Merge plants that are close together.\n    Sum numerical values, list others.\n    \"\"\"\n    \n    buff = plants.copy()\n    buff.geometry = buff.geometry.buffer(dist_deg)\n    buff = gpd.GeoDataFrame(geometry=[p for p in buff.unary_union])\n    buff[\"centroid\"] = buff.geometry.centroid\n\n    plants = gpd.sjoin(plants, buff, op=\"within\")\n\n    grouped = plants.groupby(\"index_right\").sum()\n    grouped[\"geometry\"] = plants.groupby([\"index_right\"])[\"centroid\"].first()\n    grouped[\"primary_fuel\"] = plants.groupby([\"index_right\"])[\"primary_fuel\"].apply(lambda x: \", \".join(x))\n    grouped[\"name\"] = plants.reset_index().groupby([\"index_right\"])[\"index\"].apply(lambda x: \", \".join(x))\n    grouped = grouped.set_index(\"name\")\n    grouped[\"capacity_factor\"] = grouped[\"generation_hourly\"] \/ grouped[\"capacity_mw\"]\n    \n    grouped = gpd.GeoDataFrame(grouped)\n    grouped[\"xy\"] = grouped.geometry.apply(lambda geom: [float(g[0]) for g in geom.coords.xy])\n    \n    return grouped","2155be94":"plants = merge_close_plants(plants)\nplants = pretty_cols(plants)\nplants[\"wind_dir\"] = \"\"\nplants.at[\"San Juan CC, Palo Seco\", \"wind_dir\"] = 90\nplants[[\"Primary Fuel\", \"Capacity (MW)\", \"Hourly Generation (MWh)\", \"Capacity Factor\", \"wind_dir\"]]","e891f348":"def coords2pixel(aff, x, y):\n    \"\"\"\n    Convert x, y in degrees to pixel coordinates in the array.\n    Returned in row, col format as expected by numpy.\n    Useful reference: https:\/\/www.perrygeo.com\/python-affine-transforms.html\n    \"\"\"\n    \n    col, row = ~aff * (x, y)\n    col, row = int(col), int(row)\n    return row, col","f10ebbc4":"def get_line_density(arr, aff, x, y, length=100, width=20, angle=0):\n    \"\"\"\n    Calculate line density plot for given image and x, y coordinates.\n    Length and width are in km, angle is mathematical angle.\n    (i.e. N=pi\/2, E=0, S=-pi\/2, W=pi=-pi)\n    \"\"\"\n    \n    arr_lines = np.zeros_like(arr)\n    row1, col1 = coords2pixel(aff, x, y)\n    samples = []\n    up = int(length*1e3 \/ 2)\n    for x_move in range(-up, up + 1, 100):\n        line = []\n        side = int(width*1e3 \/ 2)\n        for y_move in range(-side, side + 1, 100):\n            x_new = x + (x_move * cos(angle) - y_move * sin(angle)) * 1e-5\n            y_new = y + (y_move * cos(angle) + x_move * sin(angle)) * 1e-5\n            row, col = coords2pixel(aff, x_new, y_new)\n            if row < 0 or col < 0:\n                continue\n            try:\n                line.append(arr[row, col])\n                arr_lines[row, col] = 1\n                arr_lines[row, col] = 1\n            except IndexError:\n                pass\n        if len(line) > 0:\n            line_mean = np.mean(line) * width * 1e3  # to go from mol\/m2 to mol\/m\n            samples.append({\"x\": x_move, \"val\": line_mean})\n    line_df = pd.DataFrame(samples)\n    line_df = line_df.set_index(\"x\")\n    return line_df, arr_lines","e8c0493f":"x, y = plants.at[\"San Juan CC, Palo Seco\", \"xy\"]\nline_df, sample_loc = get_line_density(s5p_wind_mean, s5p_aff, x, y, length=160, width=40, angle=0)\nxx = np.array(line_df.index.to_list())","a5f60f62":"def draw_sample_area(arr_no2, arr_sample):\n    \"\"\"Plot NO2 data with sample area overlaid.\"\"\"\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.imshow(arr_no2, cmap=\"YlOrRd\", vmin=0, vmax=2e-5)\n    ax.imshow(arr_sample, cmap=ListedColormap([(0, 0, 0, 0), (0, 0, 0, .2)]))\n    ax.grid(False)\n\n    ax.set_title(\"NO2 with sample area\", fontsize=16)\n    sns.despine()\n    ax.xaxis.grid(False)\n    ax.yaxis.grid(False)\n    ax.axis(\"off\")\n    plt.show()","7bc5c460":"draw_sample_area(s5p_wind_mean, sample_loc)","2e1eb508":"def plot_density(measured, fit_xx=None, fit_yy=None, size=12):\n    \"\"\"Plot NO2 density versus profile position.\"\"\"\n    \n    sns.set_style(\"whitegrid\")\n    fig, ax = plt.subplots(figsize=(size, size\/2))\n    x = measured.index\n    spl = UnivariateSpline(x, measured.val)\n    spl.set_smoothing_factor(0.005)\n    ax.plot(x, spl(x), label=\"Measured\", linewidth=4)\n    ax.set_ylabel(\"NO2 line density (mol\/m)\", fontsize=16)\n    ax.set_xlabel(\"x (km)\", fontsize=16)\n    ax.set_title(\"Line density profile (positive x is upwind)\", fontsize=16)\n    ax.set_xlim([-80e3 ,80e3])\n    ticks = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x*1e-3))\n    ax.xaxis.set_major_formatter(ticks)\n    ax.set_ylim([0, 0.5])\n    ax.arrow(20e3, 0.1, -40e3, 0, head_width=0.03, head_length=5e3, fc='k', ec='k')\n    ax.text(-18e3, 0.12, \"wind direction\", fontsize=20)\n    \n    if fit_xx is not None:\n        ax.plot(fit_xx, fit_yy, c=\"red\", linewidth=4)\n        ax.legend([\"Measured\", \"Fit\"])\n        \n    ax.xaxis.grid(False)\n    ax.tick_params(axis='both', which='both', labelsize=12)\n    sns.despine(left=True)\n    plt.show()","6436606b":"plot_density(line_df)","802af01e":"e = np.vectorize(lambda x, x0, X: np.exp((x+X)\/x0) if x <= -X else 0)\nG = lambda x, std: np.exp(-(x**2)\/(2*(std**2)))\/(np.sqrt(2*np.pi)*std)\nM = lambda x, E, B, X, x0, std: E * np.convolve(e(x, x0, X), G(x, std), mode=\"same\") + B","dd47e689":"def fit_model(M, xx, yy):\n    p, cov = curve_fit(\n        f=M,\n        xdata=xx,\n        ydata=yy,\n        p0=(30, 0.25, 1e3, 5e4, 1e4),\n        bounds=(\n            (0, 0, -np.inf, -np.inf, -np.inf),\n            (np.inf, np.inf, np.inf, np.inf, np.inf)\n        ),\n        method=\"trf\",\n    )\n    return p","e00a2c7c":"E, B, X, x0, std = fit_model(M, xx, line_df.val.to_list())","ae3f22a3":"print(\n    f\"And these are our values!\\nE:\\t{E:.2f} mol\/s\"\n    f\"\\nB:\\t{B:.3f} mol\/m\"\n    f\"\\nX:\\t{X:.0f} m\"\n    f\"\\nx0:\\t{x0:.0f} m\"\n    f\"\\nstd:\\t{std:.0f}\"\n)","41bdb7a7":"yy = M(x=xx, E=E, B=B, X=X, x0=x0, std=std)\nplot_density(line_df, xx, yy)","adcd511c":"sec_per_hour = 3600\nno2_mol_mass = 46e-3  # kg\/mol\n\ntau = (x0 \/ w_mean) \/ sec_per_hour  # to convert to hours\nprint(f\"NO2 decay time: {tau:.2f} hours\")","5366891a":"Ekghr = E * sec_per_hour * no2_mol_mass\nprint(f\"NO2 output is {Ekghr:.0f} kg\/hr\")","5f319194":"emission_fac = Ekghr \/ plants.loc[\"San Juan CC, Palo Seco\", \"generation_hourly\"]\nprint(f\"Naive emissions factor: {emission_fac:.2f} kg\/MWh\")","9a6200bd":"plants = plants.loc[plants.generation_hourly > 100]\nplants.loc[\"Caguas\"] = {c: 0 for c in plants.columns}\nplants.at[\"Caguas\", \"xy\"] = [-66.04, 18.24]\nplants.at[\"Caguas\", \"geometry\"] = Point([-66.04, 18.24])\nplants.at[\"Caguas\", \"Primary Fuel\"] = plants.at[\"Caguas\", \"primary_fuel\"] = \"none\"\nplants.at[\"Caguas\", \"wind_dir\"] = \"\"\nplants[[\"Primary Fuel\", \"Capacity (MW)\", \"Hourly Generation (MWh)\", \"Capacity Factor\", \"wind_dir\"]]","76d9382e":"print(f\"Still our included plants account for {(100 * plants.capacity_mw.sum() \/ gppd.capacity_mw.sum()):.0f}% of the total system capacity.\")","db8e5fc3":"plants_buff = plants.copy()\nplants_buff.geometry = plants_buff.geometry.buffer(0.05)\n\nm = map_plants(plants)\nfolium.features.GeoJson(\n    plants_buff.to_json(),\n    style_function=lambda x: {\n        \"fillOpacity\": 0.5,\n        \"weight\": 0,\n        \"fillColor\": \"red\",\n    },\n).add_to(m)\nm","f5ee5d31":"with rio.open(viirs_path) as rd:\n    viirs = rd.read(1)\n    viirs[np.isnan(viirs)] = 0\n    viirs_aff = rd.transform\nfig, ax = plt.subplots(figsize=(20, 10))\nax.imshow(viirs, vmin=0, vmax=30)\nplt.show()","935d1879":"ntl_sums = zonal_stats(\n    plants_buff,\n    viirs,\n    affine=viirs_aff,\n    stats=[\"sum\"],\n    nodata=-999,\n)\nplants[\"NTL\"] = [int(n[\"sum\"]) for n in ntl_sums]\nplants[[\"NTL\"]]","2d783132":"for idx, row in plants.iterrows():\n    print(\"Site:\", idx)\n    x, y = row[\"xy\"]\n    gfs_df = get_wind_data_point(gfs_path, x=x, y=y, disable_tqdm=True)\n    rose = make_rose(gfs_df)\n    fig, ax = draw_rose(rose, size=5)\n    plt.show()","7e9f67a2":"plants[\"wind_dir\"] = 90\nplants[[\"wind_dir\"]]","dc8f0ab4":"def get_E_value(x, y, sample_length=160):\n    gfs_df = get_wind_data_point(gfs_path, x=x, y=y, disable_tqdm=True)\n    \n    s5p_arrs, aff = s5p_arr_timeseries(s5p_path, gfs_df, disable_tqdm=True)\n    wind_cutoff = 2.5\n    s5p_wind = [w[\"arr\"] for w in s5p_arrs if w[\"wind\"] >= wind_cutoff]\n    s5p_wind_mean = np.nanmean(np.stack(s5p_wind), axis=0)\n    \n    line_df, sample_loc = get_line_density(s5p_wind_mean, s5p_aff, x, y, length=sample_length, width=40)\n    xx = np.array(line_df.index.to_list())\n    E, B, X, x0, std = fit_model(M, xx, line_df.val.to_list())\n    yy = M(x=xx, E=E, B=B, X=X, x0=x0, std=std)\n    plot_density(line_df, xx, yy, size=6)\n    \n    return E","b7328dd6":"plants[\"E_kghr\"] = 0\nfor idx, row in plants.iterrows():\n    print(\"Site:\", idx)\n    x, y = row[\"xy\"]\n    E = get_E_value(x, y)\n    plants.at[idx, \"E_kghr\"] = E * sec_per_hour * no2_mol_mass","fb245d80":"plants = plants.drop([\"Costa Sur, EcoEl\u00e9ctrica\"])\nplants[[\"E_kghr\"]]","a1d9a534":"f_other = float(plants.at[\"Caguas\", \"E_kghr\"] \/ plants.at[\"Caguas\", \"NTL\"])\nprint(f\"f_other = {f_other:.4f}\")","ee8bb2fe":"plants[\"E_elec_kghr\"] = (plants[\"E_kghr\"] - f_other * plants[\"NTL\"]).astype(int)\nplants[[\"Capacity (MW)\", \"Hourly Generation (MWh)\", \"NTL\", \"E_kghr\", \"E_elec_kghr\"]]","142019d1":"plants[\"EF\"] = round(plants[\"E_elec_kghr\"] \/ plants[\"generation_hourly\"], 2)\nplants.at[\"Caguas\", \"EF\"] = 0\nplants[[\"Primary Fuel\", \"Capacity (MW)\", \"Hourly Generation (MWh)\", \"EF\"]]","26a3817c":"EF_mean = np.average(plants[\"EF\"], weights=plants[\"generation_hourly\"])\nprint(f\"Weighted average EF is {EF_mean:.2f} kg\/MWh\")","5a9528ed":"eia = pd.read_csv(eia_path)\neia[\"generation_hourly\"] = eia[\"Netgen_Total\"] \/ (265 * 24)\ntotal_gen = eia.generation_hourly.sum()\nfossil_codes = [\"NG\", \"BIT\", \"DFO\", \"RFO\"]\ntotal_fossil_gen = eia.loc[eia.Fuel_Code.isin(fossil_codes)].generation_hourly.sum()\ncaptured_gen = plants.generation_hourly.sum()","be754692":"print(f\"Total average hourly generation for Puerto Rico:\\t{total_gen:.0f} MWh\")\nprint(f\"Of which, the amount that is polluting:\\t\\t\\t{total_fossil_gen:.0f} MWh\\t({(100*total_fossil_gen\/total_gen):.0f}% of total)\")\nprint(f\"Of which, the amount included in the analysis:\\t\\t{captured_gen:.0f} MWh\\t\\t({(100*captured_gen\/total_gen):.0f}% of total)\")","4965b5b3":"EF_oil = plants.at[\"San Juan CC, Palo Seco\", \"EF\"]\nprint(f\"EF for oil: {EF_oil:.2f} kg\/MWh\")\n\ngen_coal = int(eia.loc[eia.Plant_Name == \"AES Puerto Rico\", \"generation_hourly\"])\ngen_oil = int(eia.groupby(\"Plant_Name\").sum().at[\"Aguirre Plant\", \"generation_hourly\"])\nEF_coal = (((plants.at[\"A.E.S. Corp., Aguirre\", \"EF\"]) * (gen_coal + gen_oil)) - (gen_oil * EF_oil))\/gen_coal\nprint(f\"EF for coal: {EF_coal:.2f} kg\/MWh\")\n\nEF_gas = EF_oil \/ 5\nprint(f\"EF for gas: {EF_gas:.2f} kg\/MWh\")","a8d03886":"def calc_emissions(row):\n    if row.Fuel_Code in [\"NG\"]:\n        return EF_gas * row[\"generation_hourly\"]\n    elif row.Fuel_Code in [\"BIT\"]:\n        return EF_coal * row[\"generation_hourly\"]\n    elif row.Fuel_Code in [\"DFO\", \"RFO\"]:\n        return EF_oil * row[\"generation_hourly\"]\n    else:\n        return 0\neia[\"emissions_kghr\"] = eia.apply(calc_emissions, axis=\"columns\")","2fd0c4b9":"EF_method3 = eia.emissions_kghr.sum() \/ eia.generation_hourly.sum()\nprint(f\"EF if we extrapolate to other plants: {EF_method3:.2f} kg\/MWh\")\nprint(\"This is probably the best estimate!\")","3d9ce0dc":"gen_gas = eia.loc[eia.Fuel_Code == \"NG\"].Netgen_Total.sum()\ngen_oil = eia.loc[eia.Fuel_Code.isin([\"RFO\", \"DFO\"])].Netgen_Total.sum()\nEF_marginal = (EF_gas * gen_gas + EF_oil * gen_oil)\/(gen_gas + gen_oil)\nprint(f\"Marginal EF: {EF_marginal:.2f} kg\/MWh\")","b135b56d":"def calc_monthly(x, y):\n    gfs_df = get_wind_data_point(gfs_path, x=x, y=y, disable_tqdm=True)\n    s5p_arrs, aff = s5p_arr_timeseries(s5p_path, gfs_df, disable_tqdm=True)\n    \n    s5p_arrs = sorted(s5p_arrs, key=lambda x: x[\"date\"])\n    s5p_monthly = {}\n    for d in s5p_arrs:\n        year = d[\"date\"].year\n        month = d[\"date\"].month\n        ym =  f\"{year}-{month:02}\"\n        if ym not in s5p_monthly.keys():\n            s5p_monthly[ym] = []\n        s5p_monthly[ym].append(d)\n    \n    results = {}\n    for month, vals in s5p_monthly.items():\n        wind_cutoff = 2.5\n        s5p_wind = [w[\"arr\"] for w in vals if w[\"wind\"] >= wind_cutoff]\n        s5p_wind_mean = np.nanmean(np.stack(s5p_wind), axis=0)\n        line_df, sample_loc = get_line_density(s5p_wind_mean, aff, x, y, length=160, width=40)\n        xx = np.array(line_df.index.to_list())\n        try:\n            E, B, X, x0, std = fit_model(M, xx, line_df.val.to_list())\n        except RuntimeError:\n            E = np.nan\n        results[month] = int(E * sec_per_hour * no2_mol_mass)\n    return results","e88145ab":"x, y = plants.at[\"San Juan CC, Palo Seco\", \"xy\"]\nE_monthly = calc_monthly(x, y)\nprint(\"Monthly emissions for San Juan area (from all sources!)\")\nmonthly = pd.DataFrame(E_monthly.values(), index=E_monthly.keys(), columns=[\"E_kghr\"])\nmonthly.index = pd.to_datetime(monthly.index)\nmonthly.head()","bf6e3b6b":"monthly[\"EF_high\"] = np.nan\nfor idx, row in monthly.iterrows():\n    month = idx.strftime(\"%B\")\n    monthly.at[idx, \"EF_high\"] = round(row[\"E_kghr\"] \/ (eia[f\"Netgen_{month}\"].sum() \/ (24 * 365)), 2)\nmonthly[\"EF\"] = (monthly[\"EF_high\"] * EF_method3 \/ monthly[\"EF_high\"].mean()).round(2)","076c6c61":"def plot_monthly_EF(df):\n    sns.set_style(\"whitegrid\")\n    fig, ax = plt.subplots(figsize=(16,6))\n    df[[\"EF\"]].plot(ax=ax, linewidth=4)\n    ax.set_ylim([0, 3])\n    ax.set_title(\"Emissions Factor (EF) by date\", fontsize=16)\n    ax.set_ylabel(\"EF (kg\/MWh)\", fontsize=16)\n    ax.set_xlabel(\"Date\", fontsize=16)\n    ax.tick_params(axis='both', which='both', labelsize=12)\n    \n    ax.xaxis.grid(False)\n    ax.legend()\n    sns.despine(left=True)\n    plt.show()","e5271701":"plot_monthly_EF(monthly)","6e941a29":"Now we can use *f_other* and *NTL* to calculate *Eelec* for each of the other stations","82b38043":"## Now we get the total night lights in each circle\nFirst our night time lights. Seems to make sense - hot spots around San Juan and other towns.","569c1835":"There's no single way to deal with this, but we can do our best. We can either:\n1. Assume our EF above applies to all energy produced on the island;\n2. Assume the rest have no emissions;\n3. Assume they follow general trends of pollution for their fuel type (coal, oil, or gas).\n\nNumber 1 is the number we already calculated, which is probably an overestimate, while number 2 will be significantly lower and is probably an under-estimate. Let's quickly try method 3 and see what it gives us.\n\nAll the emissions from the two San Juan plants are oil. Therefore we can take that site's EF as the Puerto Rico EF for oil. The other site we measured was a mix of coal and oil. Using the oil EF we calculate, we can use the weighted generation (by oil and by coal) to calculate the EF for coal. We have no information about gas... But luckily it doesn't account for much of Puerto Rico's generation. Going by our generic EF values from way up top, let's say it's five times lower than EF for oil. Thus we have for all three:","f17f3b6c":"And then we just use the estimated generation for each plant to calculate its emissions factor and then we can get a weighted emissions factor!","c6ff6ffe":"## So let's set up the model function\nThese are the functions *e*, *G* and *M* explained before.","1351565b":"## Great, now let's have a look at these on a map\nI've also included the administrative boundary of Puerto Rico in blue just so it's clear what I'm talking about!","d9b1e906":"They're all pretty similar, and all just about majority easterly wind, although the sites on the south coast do have a bit of a northerly component, and a bit weaker pverall. for simplicity let's just do all our wind profiles east-west. And let's set this decision into our table (remember 90\u00b0 is east!).","7e3c5980":"# Exploring Total NO<sub>2<\/sub> Levels\n## Now let's have a look at a year in NO<sub>2<\/sub> levels\nThe NO<sub>2<\/sub> data comes from the [Sentinel-5 Precursor](https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/COPERNICUS_S5P_OFFL_L3_NO2) mission, which provides NO<sub>2<\/sub> columns in mol\/m<sup>2<\/sup>. The readings are provided daily, although there will be some days with too much cloud cover to be useful.\n\nTo make it a bit more understandable, I'm going to convert from mols\/m<sup>2<\/sup> to tons. To do this, I'll use the molar mass of NO<sub>2<\/sub> (46.006  g\/mol [source](https:\/\/pubchem.ncbi.nlm.nih.gov\/compound\/Nitrogen-dioxide)) and the total surface area of Puerto Rico (9104 km2 [source](https:\/\/en.wikipedia.org\/wiki\/Puerto_Rico)).\n\nAlthough the satellite data includes stratospheric NO<sub>2<\/sub>, for this challenge we're mostly interested in *tropospheric* levels of NO<sub>2<\/sub> (the layer closest to the surface of the earth) as these will more directly indicate outputs from power stations and other sources.","be9e055d":"Now we're finally ready to start our in-depth investigation!","43fccd9f":"Clearly there is something wrong with the Costa Sur\/EcoElectrica site! The line density profile makes no sense and there's no clear jump in NO2 behind the power plants. Either it is emitting very little NO2, or it just isn't showing up for some reason. Unfortunately I'll have to exclude it from our analysis for now.\n\nLet's have a look at the values for E in kg\/hr for the remaining sites (remember this is the *total* E at each point, for electricity and other sources):","055c1f5e":"## Now we can solve for the unknown values\nWe have\n\n*E = E_elec + f_other x NTL*\n\nfor each of the points. And we know Caguas has *E_elec = 0* which let's us solve for *f_other*:\n\n*f_other = (E - E_elec)\/NTL = E\/NTL*","0b944f17":"And this is what it looks like!","7ea79696":"## And what does the wind tell us?\nPuerto Rico is windy! The wind rose shows that the wind in San Juan almost always blows from the east, which confirms our guess that no pollution will be blown into Puerto Rico (assuming the wind is similar all over the island). There wasn't a single day with wind blowing from another direction than easterly, and very few days with less than about 3 m\/s of wind (6 knots for the nautically inclined, otherwise 11 km\/h).\n\nBased on this, we expect NO<sub>2<\/sub> plumes to be blown out to the west, and in general we don't expect NO<sub>2<\/sub> to hang around for very long before being blown off Puerto Rico altogether.\n\n# Investigating Plumes\n## Let's see what Puerto Rico looks like on more and less windy days\nFinally we're going to look at the raw-ish NO<sub>2<\/sub> satellite data and see if we can intuitively tell what's going on.\n\nThis should tell us something about the plumes of NO<sub>2<\/sub>. If we define 'calm' as 3 m\/s (not that calm!), we can get a different picture for days above and below that cut-off.","57ae61cf":"<span style=\"font-size: 20px; color: white; background-color: #008ABC\">(ignore this \u2934 warning about deleted datasets!)<\/span>\n\n# An Analytical Approach to NO<sub>2<\/sub> Emissions\n**TL;DR: I take an analytical approach, measuring a line density of NO2 on windy days at each point and fitting a distribution function to this line. This function gives the emissions in kg\/hr. I use night time lights satellite imagery as a proxy for human activity to separate power and non-power emissions and then use the generation at each site with this value to calculate an emissions factor in kg\/MWh.**\n\n## Overview\nWe need to calculate the emissions factor in kg\/MWh (or some equivalent) averaged for one year of Puerto Rico's energy production.\nBonus points if we can calculate sub-annual and marginal emissions factors.\n\nSo we need to figure out the following system:\n![pr-system.png](attachment:pr-system.png)\n\nPuerto Rico's wind blows mainly from the east, so there won't be any pollution blown in. But the rest still need to be accounted for.\n\nThis problem definitely seems to want an analytical approach (rather than statistics\/machine learning) so I'm going to go with that (and check if it makes sense along the way). In addition, I'm going to keep the data sources as simple as possible! There are several places where I could improve the accuracy by including more data from Google Earth Engine and other sources, but as this is a demonstration of a method, I'm going to keep it simple. For example, as I'm going to focus on the troposphere as a whole, I should probably use several wind fields that apply to the whole troposphere, instead of just the GFS data near the ground.\n\n## Emissions factor\nSimplifying from the [EPA formula](https:\/\/www.epa.gov\/air-emissions-factors-and-quantification\/basic-information-air-emissions-factors-and-quantification#About%20Emissions%20Factors):  \n*EF = E \/ G*\n\nwhere:\n- EF: emissions factor (kg\/MWh)\n- E: emissions (kg\/hr)\n- G: generation (MWh\/hr)\n\nSo if I can determine the *emissions* that are attributable to electricity generation, and if I know the *generation*, then I can calculate the emissions factor!\n\nQuick explanation that may be useful: a plant's *capacity*, usually measured in MW (megawatts) is the maximum instantaneous power it can output, while it's *generation*, often in MWh (megawatt-hours) is the amount of energy actually produced in a given time period. If the plant runs at full capacity non-stop (i.e. capacity factor equals 100%) then the generation will be a simple multiple of capacity. Normally, however, plants produce much less, and have a capacity factor below 100%. It might be 30% for wind and solar, 50-60% for fossil fuels, and 80%+ for nuclear power.","8aeee27d":"As expected, high NTL from San Juan and Caguas, but much less from the other plant sites that aren't in major towns.","b5eee20d":"## It looks pretty good!\nNow let's convert this *E* value to something more intelligible than mol\/s and check some other things.\n\nFirstly, the NO<sub>2<\/sub> decay time, *\u03c4*, which is by dividing the *x<sub>0<\/sub>* distance by the mean wind speed.","330230a8":"At this point we could repeat the above procedure, using NTL each month (NTL data is available as monthly composites!) to disaggregate power and non-power emissions, and using the monthly generation from each plant to determine a monthly EF factor. However, I think this is sufficient as a demonstration of the potential of this method, Anyway I think we might start stretching our assumptions a bit thin to keep going without stopping for a validity check on how we've done so far!\n\nTo get a quick answer out of this, let's just divide the emissions each month by Puerto Rico's total generation for that month (remembering that the generation is from 2018, whereas our NO2 data is from 2018-2019, but we assume each month has similar characteristics regardless of year). Then we'll just normalise the results to have a mean equal to the annual EF we already calculated!","525e5fb2":"## Is that it!??\nThis is quite above the expected range of 2 - 3 kg\/MWh, but I've forgotten one thing...\n\n## Cars!!\nIf I can find a way to account for cars (and other sources of NO<sub>2<\/sub>), I should be able to calculate the real value! According to [this random source](http:\/\/www.apis.ac.uk\/overview\/pollutants\/overview_nox.htm) from the UK, road traffic can account for more than 30% of emissions.\n\nBut how do we calculate which portion comes from cars and which from other sources?\n\n# Modelling All the Emissions Sites\n## The plan\nI'll select a bunch of sites and then perform the curve-fitting procedure on each one. Except this time, I'll add an extra factor to account for other sources of emission. I'm also going to include a site with *no* power generation, so help solve for the unknown. I'll take total [night time lights](https:\/\/www.nasa.gov\/topics\/earth\/earthday\/gall_earth_night.html) emissions in a radius around each point and take that as an indicator of non-power-plant NO<sub>2<\/sub> emissions. Then I can disaggregate our *E* factor into two terms:\n\n*E = E_elec + f_other x NTL*\n\nwhere\n- *E* is the total emissions\n- *E_elec* is the emissions just from the power plants (what we're after!)\n- *f_other* is some multiplier of emissions per light-output that we need to discover\n- *NTL* is the known total light emissions for the area","bb9ab597":"Now that we know what the different plumes represent, let's compare windy to calm days.","261e0e65":"I'm also going to have a look at reported monthly generation for 2018, using EIA data that was uncovered in [this discussion](https:\/\/www.kaggle.com\/c\/ds4g-environmental-insights-explorer\/discussion\/131395). This will be crucial to calculate the emissions factor, as the GPPD numbers are a bit suspect, and (as discussed above) capacity on its own isn't enough. The plant names in this dataset are slightly different from those above, so I manually put together the following mapping between the two plant-naming systems:","e556dee8":"which agrees pretty well with the literature range of 3 - 8 hours.\n\nThen we convert *E* in mol\/s to output in kg\/hr","0dff7ab9":"The plot below shows the extents of sampling, up- and down-wind and to either side.","03cd3a70":"## Now we use a curve fit to find the parameters\nThis will give the values of *E*, *B*, *X*, *x<sub>0<\/sub>*, and *\u03c3* that make the model best fit the data.","ea17e9fa":"Let's plot this model fit against the measured data and see how it looks.","6f069771":"So this is actually slightly south of exactly west, but let's stick to a east-west cross-section for our analysis. I suspect if I took into account the higher impact of windier days (which may have a stronger than linear impact) I'd end up concluding the median wind *effect* is due west. Why? Because the NO<sub>2<\/sub> plume is going straight east! Note: I could also rotate the NO<sub>2<\/sub> fields on each day to line up with the wind direction for that day, but as the wind is already basically directly east-west, this probably isn't necessary. In a location with more varied wind directions, one could either calculate a separate profile for each direction, or do this NO<sub>2<\/sub> field rotation.\n\nI want to quickly codify this in our list of power plants. However, to avoid double work, I'm going to take another step in simplifying our plants list by merging those that are right next to each other, as they'll be indistinguishable in terms of satellite imagery.\n\nThe table now has five entries, and those where multiple plants were close together have both names listed as well as both fuel types. I've also entered the primary wind direction for our first investigation.","4e6d1200":"Before going on, let's just check how much of the power system I've excluded with our filtering steps.","ef63b4a3":"Which I think is fine. I've included the bulk of power capacity in our analysis. The remaining part can be accounted for at the end, and will be within the margins of error in any case.\n\nImportant note: this power data is January - December of 2018, whereas the satellite and weather data is July 2018 - June 2019. I'm going to ignore this and assume October behaves like October and so on... but it would be a big improvement to use the correct atmospheric data for the correct generation data!","108f216a":"## Now what?\nThere isn't a huge pattern in tropospheric NO<sub>2<\/sub>. So any hopes of correlating with activity levels at a large scale or something else are probably out the window. However, this was an average for the whole of Puerto Rico, so it's probably time to start looking at specific sites.","10dc5d8b":"## Let's choose our points and see what happens!\nI selected the following points. These are the main fossil-fuel power plants, plus a large city near San Juan called Caguas. For this city, we know that *E_elec* will be exactly zero.\nUsing these locations, along with some knowledge of the fuels and generation activity of each plant, we have enough data points to solve the different unknown *E_elec* values along with the constant *f_other* factor that accounts for non-power NO<sub>2<\/sub> emissions.\n\nI'm also going to exclude the Cambalache and Mayag\u00fcez plants: they are both very small producers (less than 1.5% of our selected sites) and the first is directly under San Juan's plume and won't be detectable, and the second is hovering on the edge of our satellite image, so we won't see its full plume. (It would be trivial to get more data to deal with this, but we're trying to keep things as simple as possible for now!)\n\nSo let's see the table with the latest chops and changes.","944a1cd4":"It seems to... negative *u* is wind to the west, and negative *v* is wind to the south. So with both negative, that wind is blowing to the south-west, i.e. *from* the north-east. So we expect an angle between 0\u00b0 (due north) and 90\u00b0 (due east), and that is just what we see!","7ccbb324":"## So there we have it, final answer!\nOr a bit lower if we assume the other plants don't pollute, or a bit higher if we assume uniform emissions.\n\n# Bonus Points\n## We can now calculate the marginal emissions factor\nFor a marginal emissions factor to be meaningful, we'd need a lot more generation data, down to daily or better resolution. This would enable an understanding of, at each point in time, what the environmental impact of a decision to use electricity would be. Even an average factor would need to take into account which plants are historically at the margin of additional power demand. Since we don't have that, let's just assume that marginal power comes from fossil fuel plants. There are quite a few ways we could go about this in the absence of data...\n\nLet's say that coal is unlikely to be on the margin (oil and gas are hapipier being ramped up and down), so our marginal power will come from either gas or oil. Then we can calculate aan average (weighted by generation) of the emission factors of each of these fuels.","b4d4b0cc":"## What does this tell us?\nAverage NO<sub>x<\/sub> emissions factor in the US is 0.36 kg\/MWh ([source](https:\/\/www.eia.gov\/electricity\/state\/unitedstates\/index.php)). We should expect the value for Puerto Rico to be significantly higher, around 1 kg\/MWh, as it relies much more on fossil fuels than the US as a whole.\n\nSome rough emissions factors by fuel ([source](https:\/\/www3.epa.gov\/ttnchie1\/conference\/ei19\/session10\/gpouliot.pdf))\n- coal: 11 - 45 kg\/MWh\n- oil: 1.6 - 3.2 kg\/MWh\n- gas: 0.16 - 0.32 kg\/MWh\n\nAs Puerto Rico mostly runs on oil, the emissions factor could be higher still.\n\nFor the majority of this investigation, I'm going to focus on these oil, gas and coal power plants, as these will be responsible for the bulk of pollution. I'll have to bring the others back in to get the total (and marginal!) emissions factors. For now, I'm going a step further, and only including the larger fossil fuel plants (above 150 MW), as these are the only ones likely to make a significant individual, measurable contribution to NO2 pollution. I'll assess these steps later to understand if I'm introducing any inaccuracies by simplifying like this!\n\nThat gives us the following plants:","1202d705":"## And this is what the profile looks like!","258eb62a":"## And now we're seriously done!\n\n# Caveats and Recommendations\nAs mentioned, I decided to keep it as simple as possible for this demonstration. There is also quite a long chain of assumptions that could build up to several inaccuracies.\n\nThe most obvious improvement would be to include a larger patch of wind and NO<sub>2<\/sub> data, extending much further to each side of Puerto Rico (especially downwind!). This should give much more freedom in creating our wind profiles. As mentioned, we should also use atmospheric data that matches month for month with our generation data, but this isn't always possible if we want the latest numbers! (I haven't managed to find 2019 generation numbers for Puerto Rico, but they probably exist at the end of the right email address).\n\nOne big assumption was assuming non-power pollution scales linearly with night time lights (NTL). We should also investigate other data sources such as population distribution, road networks etc, and explore the possibility of a nonlinear relationship (e.g. more night time lights in one area indicates more intensive industry, which could create a much more than linear increase in NO<sub>2<\/sub> emissions). Our choice of NTL sampling area (circle with 5 km radius) was also essentially random and needs to be investigated.\n\nWe were lucky that Puerto Rico's wind is so well behaved. A more general analysis would require rotating the NO<sub>2<\/sub> fields (as has been done in the literature) or separatingly sampling along major wind directions (which I wrote the code for above but didn't use). The line density profile also assumes a near point source of emissions, but we know that isn't the case. We might need to investigate including multiple model functions to fit one density line, each representing a different emission source (this might allow us to model the plants further west under San Juan's plume).\n\nWe should also look into additional effects on NO<sub>2<\/sub>, such as temperature, humidity, precipitation etc (in this analysis I haven't even touched the [GLDAS](https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/NASA_GLDAS_V021_NOAH_G025_T3H) dataset). However, without decent training data it will be difficult to include these other data sources that aren't as easy to analyse with a simple, logical approach.\n\nTo apply this method in other areas, there are a few things which would need to be considered (in addition to those mentioned above). The assumption about no wind blowing in would generally not be true, though this shouldn't affect the line density procedure much unless the plumes are very close. For areas with more variable wind, the analysis would either have to be done separately for different wind directions, or the NO<sub>2<\/sub> fields rotated according to each day's wind. The process of disaggregating power and non-power pollution would need to be assessed, and in dense areas it is likely that many plants would be under the plumes of others, in which case the suggestion above of multiple model functions should be explored.","94c2fbe3":"Now that I'm able to calculate the capacity factors, and, as expected, they're all well below 100% (see below)! Good thing I didn't just rely on the max capacities of these plants.","5f870616":"## A bit lower, but just because we left out coal\nThis really requires a bit more knowledge about Puerto Rico's daily generation and price-demand curves!\n\n## What about calculating the EF on a monthly basis?\nIn theory easy (just apply the method to only a month of data at a time), but as there's only one NO2 image per day, we start to stretch it a bit thin. Will do it and we can see what the results look like and if they correlate with anything. No expectation that they will change dramatically, as renewable (wind, solar, hydro) penetration isn't high enough (~6%) to drastically change the proportion of electricity coming from fossil (polluting) sources.\n\nLet's see how we would do this just for San Juan. First we create a new dict with separate NO2 and wind data for each month.","b8534843":"# Power System Overview\n## Before going any further, let's look at the power system\nThis data comes from the WRI's [Global Power Plant Database](https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/WRI_GPPD_power_plants), which has relatively detailed data on most of the power plants in the world.\n\nFun fact: I contributed some of the GPPD data and sources for Bolivia!","9d8fecf5":"## And how does it look overlaid on Puerto Rico?\nBefore comparing, let's take a look at the windy mean on a map of Puerto Rico for some context. As expected, big plumes behind San Juan and some of the other power stations, and mostly lower levels elsewhere. Surprisingly little behind the Costa Sur and EcoElectrica stations (south west), which produced the most energy in 2018.","b96e1ce8":"## Now the curve fit procedure for each site\nWhich gives the emissions (*E*) for each site in kg\/hr.","7afa5048":"## Pollution hangs around when it's less windy!\nUnsurprisingly...The cutoff of 3 m\/s is pretty high, so even on the 'calm' days there is quite a plume to the west. Unfortunately there weren't enough real calm days to do otherwise! As will become clear below, this is quite an important part of our analysis. Running this analysis in different areas will require careful consideration of wind distributions. First step: make a wind rose!\n\n## Does this tell us anything about emissions?\n**Yes!**\n\n# Using NO<sub>2<\/sub> Line Density to Determine Emissions\nWorking from the [paper](https:\/\/scihub.bban.top\/10.1126\/science.1207824) *Megacity Emissions and Lifetimes of Nitrogen Oxides Probed from Space* by Beirle et al. (published in Science), I can use the characteristics of the plume on windy days to determine the emissions of NO<sub>x<\/sub> in kg\/hr! Two useful additional sources: [supporting material](https:\/\/science.sciencemag.org\/content\/sci\/suppl\/2011\/09\/21\/333.6050.1737.DC1\/Beirle.SOM.pdf) and a [follow-up paper](https:\/\/www.atmos-chem-phys.net\/16\/5283\/2016\/acp-16-5283-2016.pdf).\n\nThey propose to integrate the line-density along a line extending up- and down-wind of the point of interest, taking the average mol\/m over a line stretching perpendicular to the wind direction. This can then be fit with the following model function\n\n![2020-03-20_16-40-35.png](attachment:2020-03-20_16-40-35.png)\n\nwhere\n- *M* is the overall fit\n- *E* is the emissions scaling factor in mol\/s - **this is what we want!**\n- *x* is the location of the measurement\n- *X* is the virtual source location (may be up- or down-wind from the actual source)\n- *x<sub>0<\/sub>* is the folding distance, which controls how quickly the plume decays\n- *G* is a Gaussian smoothing function and *\u03c3* is it's standard deviation\n\n## So if we can measure this line density and fit the function, we get the emission rate!\nLet's get to it.\n\nI'll go 50 km up- and down-wind, and at each point get the line density for a swath 40 km wide.\nIdeally I should convert to a projected [CRS](https:\/\/docs.qgis.org\/3.4\/en\/docs\/gentle_gis_introduction\/coordinate_reference_systems.html) or use the [Haversine formula](https:\/\/en.wikipedia.org\/wiki\/Haversine_formula) but for now let's just rely on the fact that, near the equator 1 km ~= 0.01 degrees. This will make my life a bit easier, and I'm anyway only sampling at the resolution of the provided raster data, so won't be losing much (or any) accuracy.\n\nFrom inspection of the wind rose from earlier, the median wind direction is directly westerly. Let's quickly check this:","70479daf":"To understand the wind data in a more intuitive way, let's create a [wind rose](https:\/\/en.wikipedia.org\/wiki\/Wind_rose). This shows, for each wind direction (remember: where the wind comes *from*!), what percentage of days the wind blew that direction (how far out the petal stretches) and what the wind speed was on those days (the petal's colour).","9a2665eb":"## Is that it?? Are we done yet?\nJust about. We must bring back in the excluded power plants, some of which have emissions that we couldn't measure, and others which have no emissions.","3038e8b9":"## Now let's check the wind roses for each site","5015cb8c":"Now we're ready to extrapolate our total emissions.","abc2313b":"Now we see the total light emitted for each area:","5a57eae4":"Great! So let's stick a 5 km buffer around each of our chosen sites and see what it looks like (in red below). Note also the new green marker at the town of Caguas.","70956bf7":"# Wind to the Rescue\n\nLet's first have a look at the capital, San Juan, which has two fossil fuel stations and loads of people driving around. Puerto Rico seems super windy, so before going any further with NO<sub>2<\/sub>, let's see how that will affect the results.\n\nThe wind data comes from the [Global Forecast System](https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/NOAA_GFS0P25), and there are forecasts every six hours for that moment (i.e. the model's forecast of the moment the model runs, which is the most accurate).\n\nThe GFS data provides many values (temperature, humidity, etc) but for now I'm interested in wind: the U component (east-west) and V component (north-south). In order to convert these to magnitude and direction, I'll follow [these](http:\/\/colaweb.gmu.edu\/dev\/clim301\/lectures\/wind\/wind-uv) handy instructions.\n\n*magnitude = sqrt(u<sup>2<\/sup> + v<sup>2<\/sup>)*  \n*angle = [arctan2](https:\/\/en.wikipedia.org\/wiki\/Atan2)(u, v)*\n\nThen I need to get compass bearing (not mathematical angle) of the direction where the wind *comes from*:  \n*bearing = 270 - angle x 180\/\u03c0*  \nand subtract 360 if the result is above 360!","23c29df7":"The total hourly electricity generation of the San Juan area is 416 MWh\/h. We can use this with the emissions above to calculate the emissions factor in kg\/MWh!"}}