{"cell_type":{"5d2a824a":"code","a9901876":"code","a9341948":"code","5725c9da":"code","74b5d35a":"code","9088c0f5":"code","9e7f8ca7":"code","e112edda":"code","02d4e137":"code","a929e234":"code","ad2b4977":"code","7358d031":"code","93cd543d":"code","b3e648dc":"markdown","0f968bae":"markdown","2f81dd9b":"markdown"},"source":{"5d2a824a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2 as cv\nfrom xgboost import XGBClassifier\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.svm import SVC\nfrom sklearn import metrics\nfrom sklearn.decomposition import PCA","a9901876":"import os\npaths = []\nlabels = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        paths.append(os.path.join(dirname, filename))\n        labels.append(dirname.split('\/')[-1])","a9341948":"df = pd.DataFrame({'filename': paths, 'label': labels})\ndf.head()","5725c9da":"fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(10, 10))\nfor i in range(0, 12):\n    im = cv.imread(df.filename[i])\n    axes.flatten()[i].imshow(cv.cvtColor(im, cv.COLOR_BGR2GRAY), cmap='Blues')","74b5d35a":"im_arr = None\nfor row in df.filename:\n    im = np.asarray(cv.imread(row))\n    im = cv.cvtColor(im, cv.COLOR_BGR2GRAY)\n    im = im.reshape(28, 28)\n    if im_arr is None:\n        im_arr = im\n    else:\n        im_arr = np.append(im_arr, im, axis=0)\n        \nX = pd.DataFrame(im_arr.reshape((len(df), -1))) \/ 255\ny = df.label","9088c0f5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","9e7f8ca7":"svc = SVC(C=1, gamma=0.1, kernel='rbf')\nsvc.fit(X_train, y_train)\nsvc_pred = svc.predict(X_test)","e112edda":"print(metrics.classification_report(y_train, svc.predict(X_train)))","02d4e137":"print(metrics.classification_report(y_test, svc_pred))","a929e234":"sns.heatmap(metrics.confusion_matrix(y_test, svc_pred), annot=True, cmap='Blues')","ad2b4977":"xgb = XGBClassifier(max_depth=7, n_estimators=9)\nxgb.fit(X_train, y_train)","7358d031":"xgb_pred = xgb.predict(X_test)\nprint(metrics.classification_report(y_test, xgb_pred))","93cd543d":"confusion = metrics.confusion_matrix(y_test, xgb_pred)\nsns.heatmap(confusion, annot=True, cmap='Blues')","b3e648dc":"## Classification report on test set","0f968bae":"## Show a few of the images","2f81dd9b":"## Classification report on training set"}}