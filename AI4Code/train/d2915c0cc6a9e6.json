{"cell_type":{"343d1034":"code","db249310":"code","ab6e3015":"code","01f94e9f":"code","3cb505bc":"code","237f60b4":"code","9442a715":"code","2479b77f":"code","c9463886":"code","0dd97d82":"code","e79775a1":"code","c595434d":"code","b43ef744":"code","e8aca4b4":"code","9b096de6":"code","afb40ceb":"code","20fb5b41":"code","2396c9a5":"code","3b49a739":"code","77b5f730":"markdown","1b015ece":"markdown","342d5c2e":"markdown","a99e5363":"markdown","0f210450":"markdown","247434f4":"markdown","34d05aa1":"markdown","dfe1a2db":"markdown","2b5902f8":"markdown","6c092b5e":"markdown","19cf3321":"markdown","e090196a":"markdown","ad3041e2":"markdown","51c48d72":"markdown","8905a9eb":"markdown","0b21f1dc":"markdown","7a1f24ae":"markdown"},"source":{"343d1034":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport scipy","db249310":"movies_df = pd.read_csv('\/kaggle\/input\/movie-lens-small-latest-dataset\/movies.csv', usecols=['movieId', 'title'], dtype = {'movieId':'int32', 'title':'str'})\nrating_df = pd.read_csv('\/kaggle\/input\/movie-lens-small-latest-dataset\/ratings.csv', usecols = ['userId', 'movieId', 'rating'],dtype={'userId': 'int32', 'movieId': 'int32', 'rating': 'float32'})","ab6e3015":"movies_df.head()","01f94e9f":"rating_df.head()","3cb505bc":"df = pd.merge(rating_df,movies_df,on='movieId')\ndf.head()","237f60b4":"# Subset parameter defines in which columns to look for missing values.\ncombine_movie_rating = df.dropna(axis=0, subset=['title'])\nmovie_ratingCount = (combine_movie_rating.groupby(by=['title'])['rating'].count().reset_index().rename(columns={'rating':'totalRatingCount'}))[['title','totalRatingCount']]\nmovie_ratingCount.head()","9442a715":"# We here do left join based on title column in combine_movie_rating (as left dataframe) and title column in movie_ratingCount (as right dataframe)\nrating_with_totalRatingCount = combine_movie_rating.merge(movie_ratingCount, left_on = 'title', right_on='title', how= 'left')\nrating_with_totalRatingCount.head()","2479b77f":"rating_with_totalRatingCount.sample(5)","c9463886":"# Describing the totalRatingCount column statistically\npd.set_option('display.float_format', lambda x: '%.3f' %x)\nprint(movie_ratingCount['totalRatingCount'].describe())","0dd97d82":"#movie_ratingCount.hist(column = 'totalRatingCount', bins =50, figsize=(20,5))\nfig, ax = plt.subplots(figsize=(17,8))\nplt.axvline(x=50,ymax=0.95, c='red', label = 'Threshold (50)');\nsns.histplot(ax=ax, data = movie_ratingCount['totalRatingCount'], log_scale=True);\nplt.legend(fontsize=25);","e79775a1":"popularity_threshold = 50\nrating_popular_movie = rating_with_totalRatingCount.query('totalRatingCount >= @popularity_threshold')\nrating_popular_movie.head()","c595434d":"# Sampling the results of the query\nrating_popular_movie.sample(5)","b43ef744":"# Dimensions of my data\nrating_popular_movie.shape","e8aca4b4":"movie_features_df=rating_popular_movie.pivot_table(index='title',columns='userId',values='rating').fillna(0)\nmovie_features_df.head()","9b096de6":"from scipy.sparse import csr_matrix # To convert pivot table to array matrix\nmovie_features_df_matrix = csr_matrix(movie_features_df.values)","afb40ceb":"# Remember this is not K - Nearest Neighbors classifier or regressor. It's NearestNeighbors\nfrom sklearn.neighbors import NearestNeighbors\n# Generally, we use KNN to find similar vectors based on euclidean distance, but here we use the distance metric as cosine score\nmodel_knn = NearestNeighbors(metric = 'cosine', algorithm = 'brute')\nmodel_knn.fit(movie_features_df_matrix)","20fb5b41":"movie_features_df.shape","2396c9a5":"# movie_features_df.shape[0] samples a vector\nquery_index = np.random.choice(movie_features_df.shape[0])\nprint(query_index)\n# Getting euclidean distance based on cosine metric and indices of respective neighbors which are nearest\ndistances, indices = model_knn.kneighbors(movie_features_df.iloc[query_index,:].values.reshape(1,-1), n_neighbors=6)","3b49a739":"# .flatten() returns a copy of the array collapsed into one dimension (row major).\nfor i in range(0, len(distances.flatten())):\n    if i == 0:\n        print('Recommendations for {0}:\\n'.format(movie_features_df.index[query_index]))\n    else:\n        print('{0}: {1}, with distance of {2}:'.format(i, movie_features_df.index[indices.flatten()[i]], distances.flatten()[i]))","77b5f730":"***We have 606 vectors to count the similarities(item-item) between each other***","1b015ece":"We will now merge this result to the 'combine_movie_rating' dataframe that we created","342d5c2e":"Sampling the view for better representation","a99e5363":"[Sklearn distance metrics documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.DistanceMetric.html#sklearn.neighbors.DistanceMetric)","0f210450":"### ***Here we can see we have randomly selected a movieId as 447. We then find its Nearest Neighbors (Item-Item collaborative filtering).*** \n\n### ***In actual scenario, our API will get a GET request in the form of movieID and our model will have to find its Nearest Neighbors***","247434f4":"***Let's consider a popularity threshold rating for movie recommendations as 50***","34d05aa1":"# Nearest Neighbor ***User based*** collaborative filtering","dfe1a2db":"<img src=\"https:\/\/dataaspirant.com\/wp-content\/uploads\/2015\/04\/cosine.png\"> <\/img>","2b5902f8":"Let's find a movie rating count","6c092b5e":"# ***Results***","19cf3321":"***For cos (0 deg), similarity is 1***\n\n***For cos (90 deg), similarity is 0***","e090196a":"## Training Nearest Neighbors ML Model","ad3041e2":"## Concept of Cosine Similarity","51c48d72":"## ***Recommendations for Being John Malkovich (1999):***\n\n### ***1: Knocked Up (2007), with distance of 0.353415846824646***\n### ***2: 40-Year-Old Virgin, The (2005), with distance of 0.4131535291671753***\n### ***3: Meet the Parents (2000), with distance of 0.4245836138725281***\n### ***4: Anchorman: The Legend of Ron Burgundy (2004), with distance of 0.4388437271118164***\n### ***5: Zoolander (2001), with distance of 0.4485795497894287***","8905a9eb":"[Differences between .flatten() and .ravel()](https:\/\/www.geeksforgeeks.org\/differences-flatten-ravel-numpy\/)","0b21f1dc":"<img src = \"https:\/\/miro.medium.com\/max\/950\/1*0ygb2uJknG6FdYT1vZqnsg.png\"> <\/img>","7a1f24ae":"## Creating Pivot Table"}}