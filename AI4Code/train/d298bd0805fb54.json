{"cell_type":{"81b9edb0":"code","a136e625":"code","8fcfa000":"code","56f56c76":"code","faf42495":"code","f844e41c":"code","7c9e31e7":"code","966991b8":"code","ce23e127":"code","d1de0b4f":"markdown","7e239181":"markdown","4e3ceb6d":"markdown","33a64d76":"markdown","25745516":"markdown","e86007a2":"markdown","248885f1":"markdown","1f5a079a":"markdown","e0afc050":"markdown","e649fd01":"markdown","15591f38":"markdown","acfd1be2":"markdown","f64fd98b":"markdown"},"source":{"81b9edb0":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\n\nfrom time import localtime\nimport time\nfrom datetime import datetime, timedelta,date\nimport gc\n\nfrom sklearn.decomposition import PCA","a136e625":"RANDOM_SEED = 631\nnp.random.seed(RANDOM_SEED)","8fcfa000":"!ls ..\/input\ntrain = pd.read_csv('..\/input\/train.csv', index_col=0)\ntest = pd.read_csv('..\/input\/test.csv', index_col=0)\n\nprice_raw = train['price']\nprice_raw_log = np.log1p(price_raw)\ntrain.drop('price', axis = 1, inplace=True)","56f56c76":"for i in test.columns:\n    tyty = test[i].dtype    \n    if not tyty == 'int64' and not tyty == 'float64':\n        print(f'feature: {i}, type: {str(tyty)}')","faf42495":"def clean_data(dataset):\n    dataset['data_y'] = ''\n    dataset['data_m'] = ''\n    dataset['data_y'] = dataset['date'].apply(lambda x : str(x[:4])).astype(int)\n    dataset['data_m'] = dataset['date'].apply(lambda x : str(x[4:6])).astype(int)\n    dataset.drop('date', axis=1, inplace=True)\n    return dataset\n\ncleaned_train = clean_data(train)\ncleaned_test = clean_data(test)","f844e41c":"def geogege(data):\n    data['zipcode'] = data['zipcode'].astype(str)  \n    data['zipcode-3'] = data['zipcode'].apply(lambda x : str(x[2:3])).astype(int)\n    data['zipcode-4'] = data['zipcode'].apply(lambda x : str(x[3:4])).astype(int)\n    data['zipcode-5'] = data['zipcode'].apply(lambda x : str(x[4:5])).astype(int)\n    data['zipcode-34'] = data['zipcode'].apply(lambda x : str(x[2:4])).astype(int)\n    data['zipcode-45'] = data['zipcode'].apply(lambda x : str(x[3:5])).astype(int)\n    data['zipcode-35'] = data['zipcode'].apply(lambda x : str(x[2:5])).astype(int)\n    data.drop('zipcode', axis=1, inplace=True)\n    return data\n\ngeoge_train = geogege(cleaned_train)\ngeoge_test = geogege(cleaned_test)","7c9e31e7":"def latlong_pca(trainset, testset):\n    pca2 = PCA(n_components=2)\n    coord = trainset[['lat','long']]\n    coord_test = testset[['lat','long']]\n    \n    principalComponents_updated = pca2.fit_transform(coord)\n    trainset['coord_pca1']= ''\n    trainset['coord_pca2']= ''\n    trainset['coord_pca1']= principalComponents_updated[:, 0]\n    trainset['coord_pca2']= principalComponents_updated[:, 1]\n\n    principalComponents_updated_test = pca2.transform(coord_test)\n    testset['coord_pca1']= ''\n    testset['coord_pca2']= ''\n    testset['coord_pca1']= principalComponents_updated_test[:, 0]\n    testset['coord_pca2']= principalComponents_updated_test[:, 1]\n    return trainset, testset\n\npcaed_train, pcaed_test = latlong_pca(geoge_train, geoge_test)","966991b8":"def all_pca(trainset, testset):\n    pca1 = PCA(n_components=2)\n\n    principalComponents_updated = pca1.fit_transform(trainset)\n    trainset['pca1']= ''\n    trainset['pca2']= ''\n    trainset['pca1']= principalComponents_updated[:, 0]\n    trainset['pca2']= principalComponents_updated[:, 1]\n\n    principalComponents_updated_test = pca1.transform(testset)\n    testset['pca1']= ''\n    testset['pca2']= ''\n    testset['pca1']= principalComponents_updated_test[:, 0]\n    testset['pca2']= principalComponents_updated_test[:, 1]\n    return trainset, testset\n\npcaed_train1, pcaed_test1 = all_pca(pcaed_train, pcaed_test)","ce23e127":"x_train = pcaed_train1\ny_train = price_raw_log\nx_test = pcaed_test1\n\ntrain_columns = list(x_train.columns)\n\nxgb_params_add1 ={\n    'seed': RANDOM_SEED,\n    'learning_rate': 0.05,\n    'max_depth': 5,\n    'subsample': 0.9,\n    'colsample_bytree': 0.4,\n    'silent': True,\n    'n_estimators':5000,\n    'refit' : True\n}\n","d1de0b4f":"\uac00\uc7a5 \uc911\uc694\ud55c \uba54\uc9c1\ub118\ubc84 \ub79c\ub364\uc2dc\ub4dc \uc815\uc758\ud574\ub193\uae30!","7e239181":"**\ub300\ub2e8\ud55c \uc810\uc218\uc640 \uc2e4\ub825\uc774 \uc544\ub2c8\uc9c0\ub9cc**   \n**`\ub2e8\uc77c \ubaa8\ub378`\ub85c `\uc815\uaddc\ud654`, `\ub85c\uadf8\ud654` \uc5c6\uc774 \uc720\uc758\ubbf8\ud55c \uacb0\uacfc\ub97c \ub0b4\ubcf8 \uc800\uc758 \uacbd\ud5d8\uc744 \uacf5\uc720\ud569\ub2c8\ub2e4.**\n* \uc544\ub798 \uc791\uc131\ud55c \uac04\ub2e8\ud55c \ucf54\ub4dc\uc640 \ud30c\ub77c\uba54\ud130, \uadf8\uac78 \uc0ac\uc6a9\ud55c xgb \ub2e8\uc77c\ubaa8\ub378\ub9cc \uac00\uc9c0\uace0 public 20\uc704\uc5d0 \uc62c\ub790\uc2b5\ub2c8\ub2e4.\n* \ud2b9\uc131\uc740 date\uc640 zipcode \ub9cc \uac74\ub4dc\ub838\uc2b5\ub2c8\ub2e4.\n* PCA\ub85c \uc704\ub3c4\uacbd\ub3c4 \ubb36\uc5b4\uc11c 2\uac1c, \uc804\uccb4\ub370\uc774\ud130 \ubb36\uc5b4\uc11c 2\uac1c, \ucd1d4\uac1c \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.\n* \uc2a4\ucf00\uc77c\ub9c1, \ub178\uba40\ub77c\uc774\uc9d5 \ubaa8\ub450 **\ube90**\uc2b5\ub2c8\ub2e4. (\ud3c9\uac00\uacb0\uacfc\uac00 \ud6e8\uc52c \ub354 \ub192\uc558\uc2b5\ub2c8\ub2e4)\n\n# 1. \uc9c4\ud589\ubc29\ubc95\n1. \ucd5c\ucd08 xgb \ubaa8\ub378 \uae30\uc900\uc73c\ub85c \ub370\uc774\ud130 \ud2b9\uc9d5\uc774 \ubcc0\uacbd\ub418\uac70\ub098 \ucd94\uac00\ubcc0\uc218(\ud30c\uc0dd\ubcc0\uc218) \ub098\uc62c \ub54c\ub9c8\ub2e4 \ud3c9\uac00 \ud6c4 \uc801\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n2. \uad1c\ucc2e\uc73c\uba74 \uc801\uc6a9\uc2dc\ud0a4\uace0 \uc548 \uc88b\uc73c\uba74 \uc717\ub2e8 \uc544\ub7ab\ub2e8 \uc791\uc5c5\uc21c\uc11c\ub97c \ubc14\uafd4\uac00\uba74\uc11c \ud3c9\uac00\ud588\uc2b5\ub2c8\ub2e4.\n3. \uc5b4\ub290 \uc815\ub3c4 \uc810\uc218\uac00 \uc62c\ub77c\uc654\uc744 \ub54c \ubaa8\ub378 \ud30c\ub77c\ubbf8\ud130\ub97c GridSearch\uc640 \uc218\uc791\uc5c5(?)\uc73c\ub85c \ucc3e\uc544\ub2e4\ub154\uc2b5\ub2c8\ub2e4.\n4. \ubaa8\ub378\uc740 XGB, LGBM, GBR \uc138 \uac00\uc9c0\ub97c \ube44\uad50 \ubd84\uc11d\ud588\uc2b5\ub2c8\ub2e4.\n    * XGBoost\n    * LGBM\n    * GradientBoostingRegression\n\n----\n# 2. \uacb0\ub860\uc815\ub9ac\n## 1. \ud2b9\uc131\n### Date\n* \ud2b9\uc131\uc740 `object` \ud0c0\uc785\uc774\ub77c \ubc14\uafd4\uc918\uc57c \ud588\ub358 `date`\ub97c `\ub144\ub3c4`\uc640 `\ub2ec`\ubcc4\ub85c \ucabc\uac1c\uc11c \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.\n* \ud3c9\uac00\uacb0\uacfc `118848` \uae4c\uc9c0 \uc654\uc2b5\ub2c8\ub2e4.\n\n### \uc9c0\uc5ed\uc815\ubcf4 zipcode\n* \uc0c1\uc2dd\uc801\uc73c\ub85c \uc9d1\uac12\uc5d0 \ud575\uc2ec\uc740 \uc9c0\uc5ed\uc774\ub780 \uc0dd\uac01\uc73c\ub85c \uc811\uadfc\ud588\uc2b5\ub2c8\ub2e4.\n* `zipcode` \ubcc4\ub85c \ubb36\uc5b4\uc11c \uce74\ud14c\uace0\ub9ac 0 ~ 10\uae4c\uc9c0 \ud2b9\uc131\uc744 \ucd94\uac00\ud588\uc5c8\ub294\ub370 [\ube44\uc2b7\ud558\uace0 \ub610 \ub354 \uae54\ub054\ud558\uac8c \uc815\ub9ac\ud558\uc2e0 \ud5c8\ud0dc\uba85\ub2d8 \ucee4\ub110\uc744 \ubcf4\uace0 \uc218\uc815](https:\/\/www.kaggle.com\/tmheo74\/geo-data-eda-and-feature-engineering#PCA-Transformation---Lat,-Long)\ud588\uc2b5\ub2c8\ub2e4.\n* \ud3c9\uac00\uacb0\uacfc `116464` \uae4c\uc9c0 \uc654\uc2b5\ub2c8\ub2e4.\n\n## 2. \ubcc0\ud615\n\ub2f9\uc5f0\ud558\ub4ef \uc9c4\ud589\ud574\uc654\ub358 \ud1b5\uacc4\uc801 \ubd84\uc11d\uacfc\uc815\ub4e4\uc5d0 \ub300\ud574 \ud3c9\uac00\uc810\uc218\uac00 \uc88b\uc9c0 \uc54a\uc544 \uacfc\uac10\ud788 \ube90\uc2b5\ub2c8\ub2e4.\n\n### Scaler\n* \ud2b9\uc774\ud558\uac8c\ub3c4 \uc2a4\ucf00\uc77c\ub9c1 \ud558\ub2c8\uae4c \uc810\uc218\uac00 \ub098\ube74\uc2b5\ub2c8\ub2e4.\n* `MinMaxScaler`, `MaxAbsScaler`, `StandardScaler`, `RobustScaler` \ubaa8\ub450 \ube44\uad50\ubd84\uc11d\ud588\uc2b5\ub2c8\ub2e4.\n* `MaxAbsScaler` \uac00 \uc810\uc218\uac00 \ubbf8\ube44\ud558\uac8c \uc88b\uc558\uc9c0\ub9cc \ub098\uc911\uc5d0 \ud6c4\ubc18\uc73c\ub85c \uac00\uba74\uc11c \ube44\uc2b7\ud574\uc838 \ubaa8\ub450 \uc81c\uc678\ud588\uc2b5\ub2c8\ub2e4.\n\n### log\n* \ubd84\ud3ec\uac00 \uc815\uaddc\ubd84\ud3ec\uadf8\ub798\ud504\ub85c \uba4b\uc9c0\uac8c \uadf8\ub824\uc9c0\uc9c0 \uc54a\uace0 \uc3e0\ub824\uc788\uc73c\uba74 \ub300\ubd80\ubd84 log\ub97c \uc50c\uc6cc\uc11c \uadf8\ub798\ud504\ub97c \uc774\uc058\uac8c \ub9cc\ub4dc\ub294\ub370\n* \ud3c9\uac00\uacb0\uacfc\uac00 \ud6e8\uc52c \uc88b\uc9c0 \ubabb\ud588\uc2b5\ub2c8\ub2e4.\n* \uc218\uce58\ud615 \ud2b9\uc131\ub4e4\uc5d0 \ub300\ud574\uc11c \ub610 \ud06c\uac8c \uc3e0\ub824\uc788\ub294 \ud2b9\uc131\ub4e4\uc5d0 \ub300\ud574\uc11c \uc774\ub9ac\uc800\ub9ac \uc2dc\ub3c4\ud588\uc9c0\ub9cc \ub9c8\ucc2c\uac00\uc9c0\ub85c \ubcc4\ub85c\uc600\uc2b5\ub2c8\ub2e4.\n\n\ub450 \uacfc\uc815 \ubaa8\ub450 \uc21c\uc11c\ub3c4 \ubc14\uafd4\ubcf4\uace0 \uc774\ub9ac\uc800\ub9ac \ud574\ubd24\uc9c0\ub9cc\n* \ud3c9\uac00\uacb0\uacfc `180000` \uae4c\uc9c0 \ub098\ube60\uc838 \uacfc\uac10\ud788 \uc81c\uc678\ud588\uc2b5\ub2c8\ub2e4.\n\n\n## 3. PCA\n### \uc9c0\uc5ed\uc815\ubcf4 lat, long\n* \uc704\uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc9d1\uac12\uc758 \ud575\uc2ec\uc740 \uc9c0\uc5ed\uc774\ub780 \uc0dd\uac01\uc5d0 PCA\ub85c \ud074\ub7ec\uc2a4\ud130\ub9c1 \uc811\uadfc\ud588\uc2b5\ub2c8\ub2e4. \n* \uc81c \ucf54\ub4dc\ubcf4\ub2e4 \ub354 \uae54\ub054\ud558\uac8c \uc815\ub9ac\ud558\uc2e0 [\ud5c8\ud0dc\uba85\ub2d8 \ucee4\ub110 \ucc38\uace0\ud558\uc5ec \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.](https:\/\/www.kaggle.com\/tmheo74\/geo-data-eda-and-feature-engineering#PCA-Transformation---Lat,-Long)\n* \ucc28\uc6d0\ucd95\uc18c 2\uac1c\uc5d0\uc11c 1\uac1c\uae4c\uc9c0 \ub123\uc5b4\ubcf4\uba74\uc11c \ud3c9\uac00\uc810\uc218 \ube44\uad50\ud588\uc2b5\ub2c8\ub2e4.\n* \ud3c9\uac00\uacb0\uacfc 2000 \uc815\ub3c4 \uc88b\uc544\uc84c\uc2b5\ub2c8\ub2e4.\n\n### \uc804\ud56d\ubaa9 PCA \n* \ubaa8\ub4e0 \ud2b9\uc131\ub4e4\uc5d0 \ub300\ud574 PCA \ud074\ub7ec\uc2a4\ud130\ub9c1\uc744 \ud1b5\ud574 \ucc28\uc6d0\ucd95\uc18c\ub97c \ud588\uc2b5\ub2c8\ub2e4.  \n* `\uae30\uc874\ud2b9\uc131\ub4e4+2\ucc28\uc6d0\ucd95\uc18c` \uc5d0\uc11c `\uae30\uc874\ud2b9\uc131\ub4e4+18\ucc28\uc6d0` \uae4c\uc9c0 \ube44\uad50\ud588\uc2b5\ub2c8\ub2e4.\n* 2\ucc28\uc6d0\ubd80\ud130 18\ucc28\uc6d0\uae4c\uc9c0 \ube44\uad50\ud560 \ub54c 2\ucc28\uc6d0 \uc774\ud6c4\ubd80\ud130 \uc0c1\uc2b9\ud3ed\uc774 \ud06c\uc9c0 \uc54a\uc544 2\ucc28\uc6d0\uc73c\ub85c \ucd95\uc18c\ud574\uc11c \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.\n* \ud3c9\uac00\uacb0\uacfc 2000 \uc815\ub3c4 \uc88b\uc544\uc84c\uc2b5\ub2c8\ub2e4.\n\n## 4. \ubaa8\ub378\n### \uc18d\uc131\n\uc74c.. \uc774\uac78 \uc5b4\ub5bb\uac8c \uc124\uba85\uc744..... \ub300\ubd80\ubd84 \uc774\uac70 \ucc3e\ub294\ub370 \ucef4\ud4e8\ud130 \uc790\uc6d0\uc744 \ub9ce\uc774 \uc3df\uc740\uac70 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\ub4dc\uc11c\uce58\ub85c \ub108\ubb34 \uc624\ub798\uac78\ub838\uace0 \uadf8\ub798\uc11c \uc218\uc791\uc5c5 \ud55c\ub540\ud55c\ub540 \ucc3e\uc73c\ub7ec \ub2e4\ub2c8\uae30\ub3c4 \ud588\uace0.. \uadf8\ub0e5 \uc88b\ub2e4\ub294\uac70 \ub0a8\ub4e4 \ub2e4 \ud558\ub294\uac70, \uadf8\ub9ac\uace0 \uc0c1\uc2dd\uc801\uc73c\ub85c \uc88b\uc544\uc9c8\uac70 \uac19\uc740\uac70 \ub2e4 \ud574\ubd24\uc2b5\ub2c8\ub2e4.\n* \ub2f9\uc5f0\ud788 \ub192\uc73c\uba74 \uc88b\uc744\uaebc\ub77c \uc0dd\uac01\ud588\ub358 \uc18d\uc131\uc5d0 \ub300\ud574\uc11c \ub2e4\uc2dc\uae08 \uc0dd\uac01\ud558\uac8c \ub410\uc2b5\ub2c8\ub2e4. \n\n```python\nnum_rounds = 20000\nealry_stopping = 500\nverbose_eval = 300\n\nxgb_params_add1 ={\n    'seed': RANDOM_SEED,\n    'learning_rate': 0.05,\n    'max_depth': 5,\n    'subsample': 0.9,\n    'colsample_bytree': 0.4,\n    'silent': True,\n    'n_estimators':5000}\n```\n\n\n### \ubaa8\ub378\n* \ud3c9\uac00\uacb0\uacfc `XGB` >> `LGBM` > `GBR`\n* Average CV-Score\n  * 111400.48654607737 - `XGB`\n  * 115003.96471292987 - `LGBM`\n  * 116762.99081471628 - `GBR`\n* XGB\uac00 \uc6d4\ub4f1\ud788 \ub192\uc9c4 \uc54a\uc558\uc9c0\ub9cc \uadf8\ub798\ub3c4 \uc5ed\uc2dc\ub098 \ub192\uc558\uc2b5\ub2c8\ub2e4.\n\n\n## 5. seed\n* \uac1c\uc778\uc801\uc73c\ub85c \ub2e4\ub978 \uacf3\uc5d0\uc11c \uc5b5\uc9c0\ub85c \ub04c\uc5b4\uc62c\ub9ac\ub358 \uc810\uc218\ub97c `seed` \ud558\ub098 \ubc14\uafc8\uc73c\ub85c \uacb0\uacfc\uac00 \ud655\ud655 \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4.\n* \uc810\uc218 4000, 5000 \uc774 \uc624\ub974\ub77d \ub0b4\ub9ac\ub77d..\n* \uadf8\ub798\uc11c seed \uac12\ub3c4 \ud3c9\uac00\uc810\uc218 \ub192\uc740 \uac78 \ucc3e\uae30 \uc704\ud574 \uc218\uc791\uc5c5\ud588\uc2b5\ub2c8\ub2e4. \u314e\u314e\n* \ub2e4\uc2dc \ub9d0\uc500\ub4dc\ub9ac\uc9c0\ub9cc \uc800\ub294 seed\ub85c \ub192\uc544\uc84c\uc744\ubfd0, \uadf8\uc800 \uc81c \ub9ac\ub354\ubcf4\ub4dc \uc21c\uc704\ub294 \uc6b0\uc5f0\uc774\uc5c8\uc744\ubfd0..\n* \uc815\ub9d0 \ucd5c\uace0\uc0ac\ub791 631.... \uc81c \ucee4\ub110, \uc81c \uc21c\uc704\uc758 \ud575\uc2ec.. \ube44\uae30.. \n```python\nRANDOM_SEED = 631\nnp.random.seed(RANDOM_SEED)\n```\n\n----\n# 3. \uacfc\uc815","4e3ceb6d":"\ubd88\ub7ec\uc624\uace0 price \ube7c\ub193\uae30","33a64d76":"\uac01 \ud53c\uccd0 \ud0c0\uc785 \ud655\uc778\ud574\uc11c \uc815\ub9ac\ud560\uac70 \ud655\uc778","25745516":"PCA \ubaa8\ub4e0 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c. ","e86007a2":"* PCA \n* lat, long 2\uac1c \ud53c\uccd0\ub4e4 \ucc28\uc6d0\ucd95\uc18c\ub294 \ud558\uc9c0 \ub9d0\uace0 \uadf8\ub300\ub85c \ub2e4\uc2dc 2\uac1c\ub85c \ubcc0\ud615\ud574\uc11c \ucd94\uac00","248885f1":"\ub77c\uc774\ube0c\ub7ec\ub9ac \uc778\ud48b!","1f5a079a":"zipcode \ud53c\uccd0 \ubd84\ud574\ud574\uc11c 6\uac1c\ub85c \ucabc\uac1c\uae30","e0afc050":"\uc5ec\uae30\uae4c\uc9c0 \ubd10\uc8fc\uc154\uc11c \uac10\uc0ac\ud569\ub2c8\ub2e4.\n\ub2e4\uc2dc \ub9d0\uc500\ub4dc\ub9ac\uc9c0\ub9cc \uc800\uc758 \ube44\ubc95\uc740 `RANDOM_SEED = 631` \uc785\ub2c8\ub2e4 ^^ ","e649fd01":"* \uaf2d \ubc14\uafd4\uc57c\ud558\ub294 object \ud0c0\uc785 \ud53c\uccd0\uac00 1\uac1c\n* Date \ud53c\ucc98\ub97c \ub144\uacfc \ub2ec\ub85c \ucabc\uac1c\uc8fc\uace0 int \ud0c0\uc785\uc73c\ub85c \ubc14\uafd4\uc8fc\uace0 \uae30\uc874 Date \uc0ad\uc81c","15591f38":"\uc815\ub9d0 \ub108\ubb34 \uae30\ub9c9\ud788\uac8c \uc798 \uc815\ub9ac\ud574\uc8fc\uc2e0, [\uadf8\ub798\uc11c \ub9ce\uc774 \ubcf4\uace0 \ub530\ub77c\ud55c \uc5f0\ubbfc\ub2d8 \uce90\uae00 \ub9ce\uc774 \ucc38\uc870\ud558\uc600\uc2b5\ub2c8\ub2e4.](https:\/\/www.kaggle.com\/yeonmin\/default-eda-stacking-introduction) \n* \ucf54\ub4dc\ub97c \ub108\ubb34 \uae54\ub054\ud558\uac8c \uc815\ub9ac\ud574\uc11c \uc5f4\uc5b4\uc8fc\uc2e0 \uc5f0\ubbfc\ub2d8 \ucee4\ub110\uc5d0 \ub2e4\uc2dc \uac10\ud0c4\uacfc \uc874\uacbd\uacfc \uac10\uc0ac\ub97c \ud45c\ud569\ub2c8\ub2e4!\n\n\n```python\nRANDOM_SEED = 631\nnp.random.seed(RANDOM_SEED)\n\nnum_rounds = 20000\nealry_stopping = 500\nverbose_eval = 300\n\nNFOLDS=5\n\nxgb_params_add1 ={\n    'seed': RANDOM_SEED,\n    'learning_rate': 0.05,\n    'max_depth': 5,\n    'subsample': 0.9,\n    'colsample_bytree': 0.4,\n    'silent': True,\n    'n_estimators':5000,\n}\n```","acfd1be2":"\uc804\uccb4\uc801\uc73c\ub85c \uadf8\ub798\ud504\ub791 \ub3c4\ud45c, \uadf8\ub9ac\uace0 \ud30c\ub77c\uba54\ud130 \ucc3e\uc544\uac00\ub294 \uacfc\uc815\uc740 \ucc28\ucc28 \uc5c5\ub383 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub108\ubb34 \uc774\uac83\uc800\uac83 \uac74\ub4dc\ub9ac\uace0 \ub110\ub824\ub193\uc740\uac8c \ub9ce\uc544\uc11c \uc815\ub9ac\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.","f64fd98b":"\uc774\ub807\uac8c \ud588\ub354\ub2c8 \uacb0\uacfc\uac00 20\uc704\uad8c\uc73c\ub85c..."}}