{"cell_type":{"b8f26e59":"code","159e9be1":"code","91b25566":"code","7d103b01":"code","2f70a153":"code","77971625":"code","36f974d3":"code","3793eecf":"code","aa0d4628":"code","f44beb93":"code","5cf263d0":"code","b781f7b6":"code","a4daa7db":"code","167c1126":"code","bd4ebb08":"code","312aeaf2":"code","d2b74be9":"code","cd67f2cc":"code","57f1efdd":"code","8c57ba83":"code","7dc2c63e":"code","9a0320e9":"code","0bc48e05":"code","14f206d7":"code","6aab1908":"code","7411830b":"code","9453e29d":"code","f55a202f":"code","e6085225":"code","7e5f4592":"code","e1fcdda1":"code","3a00b45c":"code","d68aeca0":"code","6aac2d5c":"code","de130796":"markdown","a1461b21":"markdown","7aa3284d":"markdown"},"source":{"b8f26e59":"#Import all Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, Ridge, Lasso, ElasticNet\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error, mean_absolute_error, mean_squared_log_error","159e9be1":"#Dataset\ntrain_data = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\ntest_data = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","91b25566":"#print shape\nprint('Train Shape: ', train_data.shape)\nprint('Test Shape: ', test_data.shape)","7d103b01":"train_data.sample(5)","2f70a153":"X = train_data.iloc[:, 0:9]\nY = train_data['count']\n\nprint('Train X Shape: ', X.shape)\nprint('Train Y Shape: ', Y.shape)\nprint('Test Shape: ', test_data.shape)","77971625":"#check missing values\ntrain_data.isna().sum(axis=0)","36f974d3":"sns.displot(Y, kde=True)","3793eecf":"sns.displot(np.log(Y), kde=True)","aa0d4628":"sns.histplot(X.season, bins=4)","f44beb93":"sns.displot(X.temp, kde=True)","5cf263d0":"sns.displot(X.atemp, kde=True)","b781f7b6":"sns.displot(X.windspeed, kde=True)","a4daa7db":"sns.displot(X.humidity, kde=True)","167c1126":"from sklearn.base import BaseEstimator, TransformerMixin\nimport calendar\nfrom datetime import datetime\n\nclass ProcessDateTime(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Transforming datetime...')\n        \n        x_copy = X.copy()\n        x_copy['month'] = x_copy.datetime.apply(lambda x : calendar.month_name[datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").weekday()])\n        x_copy['weekday'] = x_copy.datetime.apply(lambda x : calendar.day_name[datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").weekday()])\n        x_copy['hour'] = x_copy.datetime.apply(lambda x : datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").hour)\n        x_copy['minute'] = x_copy.datetime.apply(lambda x : datetime.strptime(x,\"%Y-%m-%d %H:%M:%S\").minute)\n        x_copy = x_copy.drop(['datetime'], axis=1)\n        \n        return x_copy","bd4ebb08":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime())\n])\n\npipeline.fit_transform(X)","312aeaf2":"class ProcessSeasonWeather(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Transforming season and weather...')\n        x_copy = X.copy()\n        x_copy['season'] = x_copy['season'].map({\n            1: 'Spring',\n            2: 'Summer',\n            3: 'Fall',\n            4: 'Winter'\n        })\n        x_copy['weather'] = x_copy['weather'].map({\n            1: \"Clear+FewClouds+PartlyCloudy,PartlyCloudy\",\n            2: \"Mist+Cloudy,Mist+BrokenClouds,Mist+FewClouds,Mist\",\n            3: \"LightSnow,LightRain+Thunderstorm+ScatteredClouds,LightRain+ScatteredClouds\",\n            4: \"HeavyRain+IcePallets+Thunderstorm+Mist,Snow+Fog\" \n        })\n        return x_copy","d2b74be9":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather())\n])","cd67f2cc":"pipeline.fit_transform(X)","57f1efdd":"class DummyEncoding(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Dummy encoding...')\n        x_copy = X.copy()\n        x_copy = pd.get_dummies(x_copy)\n        return x_copy\n\n    \nclass RemoveFeature(BaseEstimator, TransformerMixin):\n    def __init__(self, features=[]):\n        self._features = features\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        print('Removing features...')\n        x_copy = X.copy()\n        for f in self._features:\n            if f in x_copy.columns:\n                x_copy = x_copy.drop([f], axis=1)\n        return x_copy","8c57ba83":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather()),\n    ('dummyencode', DummyEncoding()),\n    ('removefeature', RemoveFeature(features=['windspeed']))\n])","7dc2c63e":"pipeline.fit_transform(X)","9a0320e9":"from sklearn.preprocessing import StandardScaler","0bc48e05":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather()),\n    ('dummyencode', DummyEncoding()),\n    ('removefeature', RemoveFeature(features=['windspeed'])),\n    ('scaler', StandardScaler())\n])","14f206d7":"pipeline.fit_transform(X)","6aab1908":"pipeline = Pipeline([\n    ('datetime', ProcessDateTime()),\n    ('seasonweather', ProcessSeasonWeather()),\n    ('dummyencode', DummyEncoding()),\n    ('removefeature', RemoveFeature(['windspeed'])),\n    ('scaler', MinMaxScaler())\n])\n\npipeline.fit(X)\nX = pipeline.transform(X)\nX_test = pipeline.transform(test_data)","7411830b":"print(X.shape)\nprint(X_test.shape)","9453e29d":"pd.DataFrame(X)","f55a202f":"lr = LinearRegression()\nsgd = SGDRegressor()\nrr = Ridge()\nls = Lasso()\nen = ElasticNet()","e6085225":"import sklearn","7e5f4592":"sklearn.metrics.SCORERS.keys()","e1fcdda1":"cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=27)\n\ngrid_ridge_lasso = {\n    'alpha': np.arange(0, 1, 0.05)\n}\n\ngrid_elastic = {\n    'alpha': np.arange(0, 1, 0.05),\n    'l1_ratio': np.arange(0, 1, 0.05)\n}\n\nlr_score = cross_val_score(lr, X, np.log(Y+0.0001), cv=cv, scoring='neg_mean_squared_log_error')\nsgd_score = cross_val_score(sgd, X, np.log(Y+0.0001), cv=cv, scoring='neg_mean_squared_log_error')\n\nrr_search = GridSearchCV(rr, grid_ridge_lasso, cv=cv, scoring='neg_mean_squared_log_error')\nrr_score = rr_search.fit(X, np.log(Y+0.0001))\n\nls_search = GridSearchCV(ls, grid_ridge_lasso, cv=cv, scoring='neg_mean_squared_log_error')\nls_score = ls_search.fit(X, np.log(Y+0.0001))\n\nen_search = GridSearchCV(en, grid_elastic, cv=cv, scoring='neg_mean_squared_log_error')\nen_score = en_search.fit(X, np.log(Y+0.0001))","3a00b45c":"print(np.mean(lr_score))\nprint(np.mean(sgd_score))\n\nprint(rr_score.best_score_)\nprint(ls_score.best_score_)\nprint(en_score.best_score_)","d68aeca0":"predictions = np.exp(rr_score.best_estimator_.predict(X_test))\npredictions = predictions.astype('int')","6aac2d5c":"pd.DataFrame({\n    'datetime': test_data.datetime,\n    'count': predictions\n}).to_csv('\/kaggle\/working\/submission_file.csv', index=False)","de130796":"**Preprocessing & Feature Engineering**\n","a1461b21":"ID: 181-35-2475","7aa3284d":"MODEL FIT"}}