{"cell_type":{"4a8b4c80":"code","1d659b05":"code","4a5cb5c1":"code","1964d9cf":"code","863da51c":"code","043d005f":"code","28bf6e70":"code","264b7b91":"code","2a30b72d":"code","8411e144":"code","791a5dd8":"code","f3414220":"code","4ce694e7":"code","9374b7fc":"code","93b1eb75":"code","b16b0909":"code","35bbd811":"code","01ba4308":"code","84c87c5b":"code","1a387912":"code","26d5aa04":"code","1d49e911":"code","4f5dfa09":"code","b67c0695":"code","71da986f":"code","0b9ba078":"code","b6501fcc":"code","0744bcde":"code","79cc1acb":"code","5706f461":"code","d97b2158":"code","a0eb7e21":"code","d939b38d":"code","334875f7":"code","9295c4c8":"code","695a2183":"code","d8998e7e":"markdown","f226cbb7":"markdown","a4d320b7":"markdown","7eadc9c7":"markdown","525da2d0":"markdown","e88d8842":"markdown","36027f75":"markdown","ebe09a5e":"markdown","aa6a8088":"markdown","194310d2":"markdown","5494dcb6":"markdown","439d1393":"markdown","033bafd1":"markdown","f2769eef":"markdown","439f4d6f":"markdown","2cab3a5e":"markdown","56423946":"markdown","ae44a3ff":"markdown","0a12b239":"markdown","8734d347":"markdown","25c730ef":"markdown","78294ebb":"markdown","6efdda44":"markdown","be58f157":"markdown","3da24820":"markdown","895b728c":"markdown","32899fa5":"markdown","bdc78873":"markdown","03024ef4":"markdown","d9da670b":"markdown","2ccf7d8b":"markdown","4dc7fb03":"markdown","4a446fff":"markdown","ec0923ef":"markdown","c20a01d0":"markdown","3ef0dd89":"markdown","ec3379b6":"markdown","f6f5de75":"markdown","e8f92b00":"markdown","45bc358d":"markdown","7d5f27c7":"markdown","a9ab9ac9":"markdown","f1d06bb7":"markdown","d32d18be":"markdown","70edc6be":"markdown"},"source":{"4a8b4c80":"import tensorflow as tf\n\n# Get the GPU device name.\ndevice_name = tf.test.gpu_device_name()\n\n# The device name should look like the following:\nif device_name == '\/device:GPU:0':\n    print('Found GPU at: {}'.format(device_name))\nelse:\n    raise SystemError('GPU device not found')","1d659b05":"import torch\n\n# If there's a GPU available...\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available.' % torch.cuda.device_count())\n\n    print('We will use the GPU:', torch.cuda.get_device_name(0))\n\n# If not...\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")","4a5cb5c1":"!pip install pytorch-pretrained-bert pytorch-nlp","1964d9cf":"## Installing the Hugging Face Library\n\n!pip install transformers","863da51c":"import pandas as pd","043d005f":"df = pd.read_csv(\"..\/input\/cola-the-corpus-of-linguistic-acceptability\/cola_public\/raw\/in_domain_train.tsv\", delimiter='\\t', header=None, names=['sentence_source', 'label', 'label_notes', 'sentence'])","28bf6e70":"df.shape","264b7b91":"df.sample(10)","2a30b72d":"df.loc[df.label == 0].sample(5)[['sentence', 'label']]","8411e144":"# Get the lists of sentences and their labels.\nsentences = df.sentence.values\nlabels = df.label.values","791a5dd8":"from transformers import BertTokenizer\n\n# Load the BERT tokenizer.\nprint('Loading BERT tokenizer...')\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","f3414220":"tokenizer","4ce694e7":"# Print the original sentence.\nprint(' Original: ', sentences[0])\n\n# Print the sentence split into tokens.\nprint('Tokenized: ', tokenizer.tokenize(sentences[0]))\n\n# Print the sentence mapped to token ids.\nprint('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))","9374b7fc":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    encoded_sent = tokenizer.encode(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n\n                        # This function also supports truncation and conversion\n                        # to pytorch tensors, but we need to do padding, so we\n                        # can't use these features :( .\n                        #max_length = 128,          # Truncate all sentences.\n                        #return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.\n    input_ids.append(encoded_sent)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original: ', sentences[0])\nprint('Token IDs:', input_ids[0])","93b1eb75":"print('Max sentence length: ', max([len(sen) for sen in input_ids]))","b16b0909":"# We'll borrow the `pad_sequences` utility function to do this.\nfrom keras.preprocessing.sequence import pad_sequences\n\n# Set the maximum sequence length.\n# I've chosen 64 somewhat arbitrarily. It's slightly larger than the\n# maximum training sentence length of 47...\nMAX_LEN = 64\n\nprint('\\nPadding\/truncating all sentences to %d values...' % MAX_LEN)\n\nprint('\\nPadding token: \"{:}\", ID: {:}'.format(tokenizer.pad_token, tokenizer.pad_token_id))\n\n# Pad our input tokens with value 0.\n# \"post\" indicates that we want to pad and truncate at the end of the sequence,\n# as opposed to the beginning.\ninput_ids = pad_sequences(input_ids, maxlen=MAX_LEN, dtype=\"long\", \n                          value=0, truncating=\"post\", padding=\"post\")\n\nprint('\\nDone.')","35bbd811":"# Create attention masks\nattention_masks = []\n\n# For each sentence...\nfor sent in input_ids:\n    \n    # Create the attention mask.\n    #   - If a token ID is 0, then it's padding, set the mask to 0.\n    #   - If a token ID is > 0, then it's a real token, set the mask to 1.\n    att_mask = [int(token_id > 0) for token_id in sent]\n    \n    # Store the attention mask for this sentence.\n    attention_masks.append(att_mask)","01ba4308":"# Use train_test_split to split our data into train and validation sets for\n# training\nfrom sklearn.model_selection import train_test_split\n\n# Use 90% for training and 10% for validation.\ntrain_inputs, validation_inputs, train_labels, validation_labels = train_test_split(input_ids, labels, \n                                                            random_state=2018, test_size=0.1)\n# Do the same for the masks.\ntrain_masks, validation_masks, _, _ = train_test_split(attention_masks, labels,\n                                             random_state=2018, test_size=0.1)","84c87c5b":"# Convert all inputs and labels into torch tensors, the required datatype \n# for our model.\ntrain_inputs = torch.tensor(train_inputs)\nvalidation_inputs = torch.tensor(validation_inputs)\n\ntrain_labels = torch.tensor(train_labels)\nvalidation_labels = torch.tensor(validation_labels)\n\ntrain_masks = torch.tensor(train_masks)\nvalidation_masks = torch.tensor(validation_masks)","1a387912":"from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n\n# The DataLoader needs to know our batch size for training, so we specify it \n# here.\n# For fine-tuning BERT on a specific task, the authors recommend a batch size of\n# 16 or 32.\n\nbatch_size = 32\n\n# Create the DataLoader for our training set.\ntrain_data = TensorDataset(train_inputs, train_masks, train_labels)\ntrain_sampler = RandomSampler(train_data)\ntrain_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n\n# Create the DataLoader for our validation set.\nvalidation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)\nvalidation_sampler = SequentialSampler(validation_data)\nvalidation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)","26d5aa04":"from transformers import BertForSequenceClassification, AdamW, BertConfig\n\n# Load BertForSequenceClassification, the pretrained BERT model with a single \n# linear classification layer on top. \nmodel = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\", # Use the 12-layer BERT model, with an uncased vocab.\n    num_labels = 2, # The number of output labels--2 for binary classification.\n                    # You can increase this for multi-class tasks.   \n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Tell pytorch to run this model on the GPU.\nmodel.cuda()","1d49e911":"# Get all of the model's parameters as a list of tuples.\nparams = list(model.named_parameters())\n\nprint('The BERT model has {:} different named parameters.\\n'.format(len(params)))\n\nprint('==== Embedding Layer ====\\n')\n\nfor p in params[0:5]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== First Transformer ====\\n')\n\nfor p in params[5:21]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))\n\nprint('\\n==== Output Layer ====\\n')\n\nfor p in params[-4:]:\n    print(\"{:<55} {:>12}\".format(p[0], str(tuple(p[1].size()))))","4f5dfa09":"# Note: AdamW is a class from the huggingface library (as opposed to pytorch) \n# I believe the 'W' stands for 'Weight Decay fix\"\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5\n                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.\n                )","b67c0695":"from transformers import get_linear_schedule_with_warmup\n\n# Number of training epochs (authors recommend between 2 and 4)\nepochs = 4\n\n# Total number of training steps is number of batches * number of epochs.\ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0, # Default value in run_glue.py\n                                            num_training_steps = total_steps)\nscheduler","71da986f":"import numpy as np\n\n# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)","0b9ba078":"import time\nimport datetime\n\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))","b6501fcc":"import random\n\n# This training code is based on the `run_glue.py` script here:\n# https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L128\n\n\n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)\n\n# Store the average loss after each epoch so we can plot them.\nloss_values = []\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # This will return the loss (rather than the model output) because we\n        # have provided the `labels`.\n        # The documentation for this `model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n        outputs = model(b_input_ids, \n                    token_type_ids=None, \n                    attention_mask=b_input_mask, \n                    labels=b_labels)\n        \n        # The call to `model` always returns a tuple, so we need to pull the \n        # loss value out of the tuple.\n        loss = outputs[0]\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over the training data.\n    avg_train_loss = total_loss \/ len(train_dataloader)            \n    \n    # Store the loss value for plotting the learning curve.\n    loss_values.append(avg_train_loss)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(format_time(time.time() - t0)))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    eval_loss, eval_accuracy = 0, 0\n    nb_eval_steps, nb_eval_examples = 0, 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Add batch to GPU\n        batch = tuple(t.to(device) for t in batch)\n        \n        # Unpack the inputs from our dataloader\n        b_input_ids, b_input_mask, b_labels = batch\n        \n        # Telling the model not to compute or store gradients, saving memory and\n        # speeding up validation\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # This will return the logits rather than the loss because we have\n            # not provided labels.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # The documentation for this `model` function is here: \n            # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n            outputs = model(b_input_ids, \n                            token_type_ids=None, \n                            attention_mask=b_input_mask)\n        \n        # Get the \"logits\" output by the model. The \"logits\" are the output\n        # values prior to applying an activation function like the softmax.\n        logits = outputs[0]\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n        \n        # Calculate the accuracy for this batch of test sentences.\n        tmp_eval_accuracy = flat_accuracy(logits, label_ids)\n        \n        # Accumulate the total accuracy.\n        eval_accuracy += tmp_eval_accuracy\n\n        # Track the number of batches\n        nb_eval_steps += 1\n\n    # Report the final accuracy for this validation run.\n    print(\"  Accuracy: {0:.2f}\".format(eval_accuracy\/nb_eval_steps))\n    print(\"  Validation took: {:}\".format(format_time(time.time() - t0)))\n\nprint(\"\")\nprint(\"Training complete!\")","0744bcde":"import matplotlib.pyplot as plt\n\n\nimport seaborn as sns\n\n# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(loss_values, 'b-o')\n\n# Label the plot.\nplt.title(\"Training loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\n\nplt.show()","79cc1acb":"loss_values","5706f461":"import plotly.express as px\n\nf = pd.DataFrame(loss_values)\nf.columns=['Loss']\nfig = px.line(f, x=f.index, y=f.Loss)\nfig.update_layout(title='Training loss of the Model',\n                   xaxis_title='Epoch',\n                   yaxis_title='Loss')\nfig.show()","d97b2158":"import pandas as pd\n\n# Load the dataset into a pandas dataframe.\ndf = pd.read_csv(\"..\/input\/cola-the-corpus-of-linguistic-acceptability\/cola_public\/raw\/out_of_domain_dev.tsv\", delimiter='\\t', header=None, names=['sentence_source', 'label', 'label_notes', 'sentence'])\n\n# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(df.shape[0]))\n\n# Create sentence and label lists\nsentences = df.sentence.values\nlabels = df.label.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    encoded_sent = tokenizer.encode(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                   )\n    \n    input_ids.append(encoded_sent)\n\n# Pad our input tokens\ninput_ids = pad_sequences(input_ids, maxlen=MAX_LEN, \n                          dtype=\"long\", truncating=\"post\", padding=\"post\")\n\n# Create attention masks\nattention_masks = []\n\n# Create a mask of 1s for each token followed by 0s for padding\nfor seq in input_ids:\n  seq_mask = [float(i>0) for i in seq]\n  attention_masks.append(seq_mask) \n\n# Convert to tensors.\nprediction_inputs = torch.tensor(input_ids)\nprediction_masks = torch.tensor(attention_masks)\nprediction_labels = torch.tensor(labels)\n\n# Set the batch size.  \nbatch_size = 32  \n\n# Create the DataLoader.\nprediction_data = TensorDataset(prediction_inputs, prediction_masks, prediction_labels)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","a0eb7e21":"# Prediction on test set\n\nprint('Predicting labels for {:,} test sentences...'.format(len(prediction_inputs)))\n\n# Put model in evaluation mode\nmodel.eval()\n\n# Tracking variables \npredictions , true_labels = [], []\n\n# Predict \nfor batch in prediction_dataloader:\n  # Add batch to GPU\n  batch = tuple(t.to(device) for t in batch)\n  \n  # Unpack the inputs from our dataloader\n  b_input_ids, b_input_mask, b_labels = batch\n  \n  # Telling the model not to compute or store gradients, saving memory and \n  # speeding up prediction\n  with torch.no_grad():\n      # Forward pass, calculate logit predictions\n      outputs = model(b_input_ids, token_type_ids=None, \n                      attention_mask=b_input_mask)\n\n  logits = outputs[0]\n\n  # Move logits and labels to CPU\n  logits = logits.detach().cpu().numpy()\n  label_ids = b_labels.to('cpu').numpy()\n  \n  # Store predictions and true labels\n  predictions.append(logits)\n  true_labels.append(label_ids)\n\nprint('DONE.')","d939b38d":"print('Positive samples: %d of %d (%.2f%%)' % (df.label.sum(), len(df.label), (df.label.sum() \/ len(df.label) * 100.0)))","334875f7":"from sklearn.metrics import matthews_corrcoef\n\nmatthews_set = []\n\n# Evaluate each test batch using Matthew's correlation coefficient\nprint('Calculating Matthews Corr. Coef. for each batch...')\n\n# For each input batch...\nfor i in range(len(true_labels)):\n  \n  # The predictions for this batch are a 2-column ndarray (one column for \"0\" \n  # and one column for \"1\"). Pick the label with the highest value and turn this\n  # in to a list of 0s and 1s.\n  pred_labels_i = np.argmax(predictions[i], axis=1).flatten()\n  \n  # Calculate and store the coef for this batch.  \n  matthews = matthews_corrcoef(true_labels[i], pred_labels_i)                \n  matthews_set.append(matthews)","9295c4c8":"matthews_set","695a2183":"# Combine the predictions for each batch into a single list of 0s and 1s.\nflat_predictions = [item for sublist in predictions for item in sublist]\nflat_predictions = np.argmax(flat_predictions, axis=1).flatten()\n\n# Combine the correct labels for each batch into a single list.\nflat_true_labels = [item for sublist in true_labels for item in sublist]\n\n# Calculate the MCC\nmcc = matthews_corrcoef(flat_true_labels, flat_predictions)\n\nprint('MCC: %.3f' % mcc)","d8998e7e":"Let's extract the sentences and labels of our training set as numpy ndarrays.","f226cbb7":"### BERT Tokenizer\nTo feed our text to BERT, it must be split into tokens, and then these tokens must be mapped to their index in the tokenizer vocabulary.\n\nThe tokenization must be performed by the tokenizer included with BERT--the below cell will download this for us. We'll be using the \"uncased\" version here.","a4d320b7":"Now that we have our model loaded we need to grab the training hyperparameters from within the stored model.\n\nFor the purposes of fine-tuning, the authors recommend choosing from the following values:\n\nBatch size: 16, 32 (We chose 32 when creating our DataLoaders).\nLearning rate (Adam): 5e-5, 3e-5, 2e-5 (We'll use 2e-5).\nNumber of epochs: 2, 3, 4 (We'll use 4).\nThe epsilon parameter eps = 1e-8 is \"a very small number to prevent any division by zero in the implementation\" (from [here](https:\/\/machinelearningmastery.com\/adam-optimization-algorithm-for-deep-learning\/)).\n\nYou can find the creation of the AdamW optimizer in run_glue.py [here](https:\/\/github.com\/huggingface\/transformers\/blob\/5bfcd0485ece086ebcbed2d008813037968a9e58\/examples\/run_glue.py#L109).","7eadc9c7":"In order for torch to use the GPU, we need to identify and specify the GPU as the device. Later, in our training loop, we will load data onto the device.","525da2d0":"\nThe two properties we actually care about are the the sentence and its label, which is referred to as the \"acceptibility judgment\" (0=unacceptable, 1=acceptable).\n\nHere are five sentences which are labeled as not grammatically acceptible. Note how much more difficult this task is than something like sentiment analysis!","e88d8842":"### 1.6 When can we use it? <a id=\"A16\"><\/a> <br>\n\nBERT outperformed the state-of-the-art across a wide variety of tasks under general language understanding like\n\n* **Natural Language Inference**\n* **Sentiment Analysis**\n* **Question Answering** \n* **Paraphrase detection**\n* **Linguistic Acceptability**","36027f75":"## 4. Conclusion <a id=\"A4\"><\/a> <br>\n### I hope you have a good understanding on how to use BERT by now .\n\n## Please do leave your comments \/suggestions and if you like this notebook please do <font color='red'>UPVOTE","ebe09a5e":"### Train Our Classification Model\nNow that our input data is properly formatted, it's time to fine tune the BERT model.","aa6a8088":"### 1.5 How does it work? <a id=\"A15\"><\/a> <br>\nBERT relies on a Transformer (the attention mechanism that learns contextual relationships between words in a text). A basic Transformer consists of an encoder to read the text input and a decoder to produce a prediction for the task. Since BERT\u2019s goal is to generate a language representation model, it only needs the encoder part. The input to the encoder for BERT is a sequence of tokens, which are first converted into vectors and then processed in the neural network. But before processing can start, BERT needs the input to be massaged and decorated with some extra metadata:\n\n* **Token embeddings**: A  token is added to the input word tokens at the beginning of the first sentence and a  token is inserted at the end of each sentence.\n* **Segment embeddings**: A marker indicating Sentence A or Sentence B is added to each token. This allows the encoder to distinguish between sentences.\n* **Positional embeddings**: A positional embedding is added to each token to indicate its position in the sentence.\n![](https:\/\/towardsml.files.wordpress.com\/2019\/09\/input.png?w=810)\nThe input representation for BERT: The input embeddings are the sum of the token embeddings, the segmentation embeddings and the position embeddings.\n \n\nEssentially, the Transformer stacks a layer that maps sequences to sequences, so the output is also a sequence of vectors with a 1:1 correspondence between input and output tokens at the same index. And as we learnt earlier, BERT does not try to predict the next word in the sentence. \n\nBERT is pre-trained on two NLP tasks:\n\n**1. Masked Language Modeling (MLM)**\n\nBERT is designed as a deeply bidirectional model. The network effectively captures information from both the right and left context of a token from the first layer itself and all the way through to the last layer.\n\nTraditionally, we had language models either trained to predict the next word in a sentence (right-to-left context used in GPT) or language models that were trained on a left-to-right context. This made our models susceptible to errors due to loss in information.\n\nLet us take an example to understand it better\n\nLet\u2019s say we have a sentence \u2013 \u201cI love to read data science blogs on Kaggle\u201d. We want to train a bi-directional language model. Instead of trying to predict the next word in the sequence, we can build a model to predict a missing word from within the sequence itself.\n\nLet\u2019s replace \u201cKaggle\u201d with \u201c[MASK]\u201d. This is a token to denote that the token is missing. We\u2019ll then train the model in such a way that it should be able to predict \u201cKaggle\u201d as the missing token: \u201cI love to read data science blogs on [MASK].\u201d\n\nThis is the crux of a Masked Language Model. The authors of BERT also include some caveats to further improve this technique:\n\nTo prevent the model from focusing too much on a particular position or tokens that are masked, the researchers randomly masked 15% of the words.\n\nThe masked words were not always replaced by the masked tokens [MASK] because the [MASK] token would never appear during fine-tuning.\n\nSo, the researchers used the below technique:\n\n* 80% of the time the words were replaced with the masked token [MASK]\n* 10% of the time the words were replaced with random words\n* 10% of the time the words were left unchanged\n\n\n**2. Next Sentence Prediction (NSP)**\n\n**Masked Language Models (MLMs)** learn to understand the relationship between words. Additionally, BERT is also trained on the task of Next Sentence Prediction for tasks that require an understanding of the relationship between sentences.\n\nIn order to understand relationship between two sentences, BERT training process also uses next sentence prediction. A pre-trained model with this kind of understanding is relevant for tasks like question answering. During training the model gets as input pairs of sentences and it learns to predict if the second sentence is the next sentence in the original text as well.\n\nAs we have seen earlier, BERT separates sentences with a special [SEP] token. During training the model is fed with two input sentences at a time such that:\n\n* 50% of the time the second sentence comes after the first one.\n* 50% of the time it is a a random sentence from the full corpus.\n\nBERT is then required to predict whether the second sentence is random or not, with the assumption that the random sentence will be disconnected from the first sentence:\n![](https:\/\/towardsml.files.wordpress.com\/2019\/09\/nsp-1.png)\n\nTo predict if the second sentence is connected to the first one or not, basically the complete input sequence goes through the Transformer based model, the output of the [CLS] token is transformed into a 2\u00d71 shaped vector using a simple classification layer, and the IsNext-Label is assigned using softmax.\n\nThe model is trained with both Masked LM and Next Sentence Prediction together. This is to minimize the combined loss function of the two strategies \u2014 \u201ctogether is better\u201d.","194310d2":"## 2. Use Case - Sentence Classification using BERT <a id=\"A2\"><\/a> <br>\n","5494dcb6":"When we actually convert all of our sentences, we'll use the tokenize.encode function to handle both steps, rather than calling tokenize and convert_tokens_to_ids separately.\n\nBefore we can do that, though, we need to talk about some of BERT's formatting requirements.","439d1393":"\nJust for curiosity's sake, we can browse all of the model's parameters by name here.\n\nIn the below cell, I've printed out the names and dimensions of the weights for:\n\n1. The embedding layer.\n2. The first of the twelve transformers.\n3. The output layer.","033bafd1":"Next, let's install the transformers package from Hugging Face which will give us a pytorch interface for working with BERT. (This library contains interfaces for other pretrained language models like OpenAI's GPT and GPT-2.) We've selected the pytorch interface because it strikes a nice balance between the high-level APIs (which are easy to use but don't provide insight into how things work) and tensorflow code (which contains lots of details but often sidetracks us into lessons about tensorflow, when the purpose here is BERT!).\n\nAt the moment, the Hugging Face library seems to be the most widely accepted and powerful pytorch interface for working with BERT. In addition to supporting a variety of different pre-trained transformer models, the library also includes pre-built modifications of these models suited to your specific task. For example, in this tutorial we will use BertForSequenceClassification.\n\nThe library also includes task-specific classes for token classification, question answering, next sentence prediciton, etc. Using these pre-built classes simplifies the process of modifying BERT for your purposes.","f2769eef":"### Sentences to IDs\n\nThe tokenizer.encode function combines multiple steps for us:\n\n1. Split the sentence into tokens.\n2. Add the special [CLS] and [SEP] tokens.\n3. Map the tokens to their IDs.\n4. Oddly, this function can perform truncating for us, but doesn't handle padding.","439f4d6f":"Let's take a look at our training loss over all batches:","2cab3a5e":"Given that, let's choose MAX_LEN = 64 and apply the padding.","56423946":"### Load Dataset:\n\nI will be using **The Corpus of Linguistic Acceptability (CoLA) dataset** for single sentence classification. \n\nIt's a set of sentences labeled as grammatically correct or incorrect. The data is as follows:\n\nColumn 1: the code representing the source of the sentence.\n\nColumn 2: the acceptability judgment label (0=unacceptable, 1=acceptable).\n\nColumn 3: the acceptability judgment as originally notated by the author.\n\nColumn 4: the sentence.","ae44a3ff":"### 1.2 Architecture <a id=\"A12\"><\/a> <br>\nThe original BERT model was developed and trained by Google using TensorFlow. BERT is released in two sizes **BERTBASE** and **BERTLARGE**. \n\nThe BASE model is used to measure the performance of the architecture comparable to another architecture and the LARGE model produces state-of-the-art results that were reported in the research paper.\n\nOne of the main reasons for the good performance of BERT on different NLP tasks was the use of **Semi-Supervised Learning**. This means the model is trained for a specific task that enables it to understand the patterns of the language. After training the model (BERT) has language processing capabilities that can be used to empower other models that we build and train using supervised learning.\n\n**BERT** is basically an Encoder stack of transformer architecture. A transformer architecture is an encoder-decoder network that uses self-attention on the encoder side and attention on the decoder side. \n\n**BERTBASE** has 12 layers in the Encoder stack while **BERTLARGE** has 24 layers in the Encoder stack. These are more than the Transformer architecture described in the original paper (6 encoder layers). \n\n**BERT** architectures (BASE and LARGE) also have larger feedforward-networks (768 and 1024 hidden units respectively), and more attention heads (12 and 16 respectively) than the Transformer architecture suggested in the original paper. It contains 512 hidden units and 8 attention heads. \n\n**BERTBASE** contains 110M parameters while BERTLARGE has 340M parameters.\n\nSo in summary\n* **BERT-Base**: 12 layer Encoder \/ Decoder, d = 768, 110M parameters\n* **BERT-Large**: 24 layer Encoder \/ Decoder, d = 1024, 340M parameters\n\nwhere d is the dimensionality of the final hidden vector output by BERT. Both of these have a Cased and an Uncased version (the Uncased version converts all words to lowercase).\n\n![](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20200407004114\/bert-base-and-large.jpg)\n\nThis model takes CLS token as input first, then it is followed by a sequence of words as input. Here CLS is a classification token. It then passes the input to the above layers. Each layer applies self-attention, passes the result through a feedforward network after then it hands off to the next encoder.\n\nThe model outputs a vector of hidden size (768 for BERT BASE). If we want to output a classifier from this model we can take the output corresponding to CLS token.\n![](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20200407005130\/BERT-embedding-output.jpg)","0a12b239":"### 1.1 What is BERT? <a id=\"A11\"><\/a> <br>\n\n**BERT** stands for **B**idirectional **E**ncoder **R**epresentations from **T**ransformers. Let us understand this in detail each word .\n\n* **Bidirectional** - to understand the text you\u2019re looking you\u2019ll have to look back (at the previous words) and forward (at the next words)\n* **Transformers** - [The Attention Is All You Need](https:\/\/arxiv.org\/pdf\/1706.03762.pdf) paper presented the Transformer model. The Transformer reads entire sequences of tokens at once. In a sense, the model is non-directional, while LSTMs read sequentially (left-to-right or right-to-left). The attention mechanism allows for learning contextual relations between words (e.g. his in a sentence refers to Jim).\n* **(Pre-trained) contextualized word embeddings** - [The ELMO paper](https:\/\/arxiv.org\/pdf\/1802.05365v2.pdf) introduced a way to encode words based on their meaning\/context. Nails has multiple meanings - fingernails and metal nails.\n\nBERT was trained by masking 15% of the tokens with the goal to guess them. An additional objective was to predict the next sentence.","8734d347":"### Optimizer & Learning Rate Scheduler","25c730ef":"### Required Formatting\nThe above code left out a few required formatting steps that we'll look at here.\n\nSide Note: The input format to BERT seems \"over-specified\" to me... We are required to give it a number of pieces of information which seem redundant, or like they could easily be inferred from the data without us explicity providing it. But it is what it is, and I suspect it will make more sense once I have a deeper understanding of the BERT internals.\n\nWe are required to:\n\n1. Add special tokens to the start and end of each sentence.\n2. Pad & truncate all sentences to a single constant length.\n3. Explicitly differentiate real tokens from padding tokens with the \"attention mask\".\n\n#### Special Tokens\n**[SEP]**\n\nAt the end of every sentence, we need to append the special **[SEP]** token.\n\nThis token is an artifact of two-sentence tasks, where BERT is given two separate sentences and asked to determine something (e.g., can the answer to the question in sentence A be found in sentence B?).\n\nI am not certain yet why the token is still required when we have only single-sentence input, but it is!\n\n**[CLS]**\n\nFor classification tasks, we must prepend the special **[CLS]** token to the beginning of every sentence.\n\nThis token has special significance. BERT consists of 12 Transformer layers. Each transformer takes in a list of token embeddings, and produces the same number of embeddings on the output (but with the feature values changed, of course!).\n\n![687474703a2f2f7777772e6d63636f726d69636b6d6c2e636f6d2f6173736574732f424552542f434c535f746f6b656e5f353030783630362e706e67.png](attachment:687474703a2f2f7777772e6d63636f726d69636b6d6c2e636f6d2f6173736574732f424552542f434c535f746f6b656e5f353030783630362e706e67.png)\n\nOn the output of the final (12th) transformer, only the first embedding (corresponding to the [CLS] token) is used by the classifier.\n\n> \"The first token of every sequence is always a special classification token (**[CLS]**). The final hidden state corresponding to this token is used as the aggregate sequence representation for classification tasks.\" (from the [BERT paper](https:\/\/arxiv.org\/pdf\/1810.04805.pdf))\n\nI'm not sure why the authors took this strategy instead of some kind of pooling of all the final vectors, but I'm sure that if pooling were better they would have gone that route.\n\nAlso, because BERT is trained to only use this [CLS] token for classification, we know that the model has been motivated to encode everything it needs for the classification step into that single 768-value embedding vector.\n\n### Sentence Length & Attention Mask\n\nThe sentences in our dataset obviously have varying lengths, so how does BERT handle this?\n\nBERT has two constraints:\n\n1. All sentences must be padded or truncated to a single, fixed length.\n2. The maximum sentence length is 512 tokens.\n3. Padding is done with a special [PAD] token, which is at index 0 in the BERT vocabulary. The below illustration demonstrates padding out to a \"MAX_LEN\" of 8 tokens.\n\n![687474703a2f2f7777772e6d63636f726d69636b6d6c2e636f6d2f6173736574732f424552542f70616464696e675f616e645f6d61736b2e706e67.png](attachment:687474703a2f2f7777772e6d63636f726d69636b6d6c2e636f6d2f6173736574732f424552542f70616464696e675f616e645f6d61736b2e706e67.png)\n\nThe \"Attention Mask\" is simply an array of 1s and 0s indicating which tokens are padding and which aren't (seems kind of redundant, doesn't it?! Again, I don't currently know why).\n\nI've experimented with running this notebook with two different values of MAX_LEN, and it impacted both the training speed and the test set accuracy.\n\nWith a Tesla K80 and:\n\nMAX_LEN = 128  -->  Training epochs take ~5:28 each, score is 0.535\nMAX_LEN = 64   -->  Training epochs take ~2:57 each, score is 0.566\nThese results suggest to me that the padding tokens aren't simply skipped over--that they are in fact fed through the model and incorporated in the results (thereby impacting both model speed and accuracy). I'll have to dig into the architecture more to understand this.","78294ebb":"### 1.7 How to fine-tune BERT? <a id=\"A17\"><\/a> <br>\n![](https:\/\/www.researchgate.net\/publication\/340295341\/figure\/fig1\/AS:874992090771456@1585625779336\/BERT-architecture-1.jpg)\nUsing BERT for a specific task is relatively straightforward:\n\nBERT can be used for a wide variety of language tasks, while only adding a small layer to the core model:\n1. Classification tasks such as sentiment analysis are done similarly to Next Sentence classification, by adding a classification layer on top of the Transformer output for the [CLS] token.\n1. In Question Answering tasks (e.g. SQuAD v1.1), the software receives a question regarding a text sequence and is required to mark the answer in the sequence. Using BERT, a Q&A model can be trained by learning two extra vectors that mark the beginning and the end of the answer.\n![](https:\/\/blog.scaleway.com\/content\/images\/2019\/08\/squadbert.jpeg)\n1. In Named Entity Recognition (NER), the software receives a text sequence and is required to mark the various types of entities (Person, Organization, Date, etc) that appear in the text. Using BERT, a NER model can be trained by feeding the output vector of each token into a classification layer that predicts the NER label.\n1. In the fine-tuning training, most hyper-parameters stay the same as in BERT training, and the paper gives specific guidance on the hyper-parameters that require tuning. The BERT team has used this technique to achieve state-of-the-art results on a wide variety of challenging natural language tasks.","6efdda44":"### Performance On Test Set\n\nNow we'll load the holdout dataset and prepare inputs just as we did with the training set. Then we'll evaluate predictions using Matthew's correlation coefficient because this is the metric used by the wider NLP community to evaluate performance on CoLA. With this metric, +1 is the best score, and -1 is the worst score. This way, we can see how well we perform against the state of the art models for this specific task.","be58f157":"### 1.4 Core Idea of BERT <a id=\"A14\"><\/a> <br>\n\nWhat is language modeling really about? Which problem are language models trying to solve? Basically, their task is to \u201cfill in the blank\u201d based on context. For example, given\n\n\u201cThe woman went to the store and bought a _____ of shoes.\u201d\n\na language model might complete this sentence by saying that the word \u201ccart\u201d would fill the blank 20% of the time and the word \u201cpair\u201d 80% of the time.\n\nIn the pre-BERT world, a language model would have looked at this text sequence during training from either left-to-right or combined left-to-right and right-to-left. This one-directional approach works well for generating sentences \u2014 we can predict the next word, append that to the sequence, then predict the next to next word until we have a complete sentence.\n\nNow enters BERT, a language model which is bidirectionally trained (this is also its key technical innovation). This means we can now have a deeper sense of language context and flow compared to the single-direction language models.\n\nInstead of predicting the next word in a sequence, BERT makes use of a novel technique called **Masked LM** (MLM): it randomly masks words in the sentence and then it tries to predict them. Masking means that the model looks in both directions and it uses the full context of the sentence, both left and right surroundings, in order to predict the masked word. Unlike the previous language models, it takes both the previous and next tokens into account at the same time. The existing combined left-to-right and right-to-left LSTM based models were missing this \u201csame-time part\u201d. (It might be more accurate to say that BERT is non-directional though.)\n\nBut why is this non-directional approach so powerful? \n\nPre-trained language representations can either be context-free or context-based. Context-based representations can then be unidirectional or bidirectional. Context-free models like word2vec generate a single word embedding representation (a vector of numbers) for each word in the vocabulary.\n\nFor example, the word \u201cbank\u201d would have the same context-free representation in \u201cbank account\u201d and \u201cbank of the river.\u201d On the other hand, context-based models generate a representation of each word that is based on the other words in the sentence. For example, in the sentence \u201cI accessed the bank account,\u201d a unidirectional contextual model would represent \u201cbank\u201d based on \u201cI accessed the\u201d but not \u201caccount.\u201d However, BERT represents \u201cbank\u201d using both its previous and next context \u2014 \u201cI accessed the \u2026 account\u201d \u2014 starting from the very bottom of a deep neural network, making it deeply bidirectional.\n![](https:\/\/i0.wp.com\/mlexplained.com\/wp-content\/uploads\/2019\/01\/Screen-Shot-2019-01-03-at-11.22.11-AM.png?fit=750%2C192)\n\nIt\u2019s evident from the above image: BERT is bi-directional, GPT is unidirectional (information flows only from left-to-right), and ELMO is shallowly bidirectional.\n\nBERT is based on the Transformer model architecture, instead of LSTMs. We will very soon see the model details of BERT, but in general:\n\nA Transformer works by performing a small, constant number of steps. In each step, it applies an attention mechanism to understand relationships between all words in a sentence, regardless of their respective position. For example, given the sentence,  \u201cI arrived at the bank after crossing the river\u201d, to determine that the word \u201cbank\u201d refers to the shore of a river and not a financial institution, the Transformer can learn to immediately pay attention to the word \u201criver\u201d and make this decision in just one step.","3da24820":"### Tokenization & Input Formatting","895b728c":"### Training Loop\n\nBelow is our training loop. There's a lot going on, but fundamentally for each pass in our loop we have a trianing phase and a validation phase. At each pass we need to:\n\nTraining loop:\n\nUnpack our data inputs and labels\nLoad data onto the GPU for acceleration\nClear out the gradients calculated in the previous pass.\nIn pytorch the gradients accumulate by default (useful for things like RNNs) unless you explicitly clear them out.\nForward pass (feed input data through the network)\nBackward pass (backpropagation)\nTell the network to update parameters with optimizer.step()\nTrack variables for monitoring progress\nEvalution loop:\n\nUnpack our data inputs and labels\nLoad data onto the GPU for acceleration\nForward pass (feed input data through the network)\nCompute loss on our validation data and track variables for monitoring progress\nSo please read carefully through the comments to get an understanding of what's happening. If you're unfamiliar with pytorch a quick look at some of their [beginner tutorials](https:\/\/pytorch.org\/tutorials\/beginner\/blitz\/cifar10_tutorial.html#sphx-glr-beginner-blitz-cifar10-tutorial-py) will help show you that training loops really involve only a few simple steps; the rest is usually just decoration and logging.\n\nDefine a helper function for calculating accuracy.","32899fa5":"![](attachment:GoogleBert-1-1024x576.jpg)<a id=\"TOC1\"><\/a> <br>\n\n# BERT: Bidirectional Encoder Representations from Transformers\n\n## Table of Contents\n1. [**Introduction**](#A1)\n\n    1.1 [**What is BERT?**](#A11)\n    \n    1.2 [**Architecture**](#A12)\n    \n    1.3 [**Why we needed BERT?**](#A13)\n    \n    1.4 [**Core Idea of BERT**](#A14)\n    \n    1.5 [**How does it work**](#A15)\n    \n    1.6 [**When can we use it?**](#A16)\n    \n    1.7 [**How to fine-tune it?**](#A17)\n     \n1. [**Use Case - Sentence Classification using BERT**](#A2)\n    \n1. [References](#A3)  \n\n1. [Conclusion](#A4) ","bdc78873":"### Converting to PyTorch Data Types\nOur model expects PyTorch tensors rather than numpy.ndarrays, so convert all of our dataset variables.","03024ef4":"Let's apply the tokenizer to one sentence just to see the output.","d9da670b":"### 1.3 Why we needed BERT? <a id=\"A13\"><\/a> <br>\n\nOne of the biggest challenges in NLP is the **lack of enough training data**. Overall there is enormous amount of text data available, but if we want to create task-specific datasets, we need to split that pile into the very many diverse fields. And when we do this, we end up with only a few thousand or a few hundred thousand human-labeled training examples. Unfortunately, in order to perform well, deep learning based NLP models require much larger amounts of data \u2014  they see major improvements when trained on millions, or billions, of annotated training examples. \n\nTo help bridge this gap in data, researchers have developed various techniques for training general purpose language representation models using the enormous piles of unannotated text on the web (this is known as pre-training). These general purpose pre-trained models can then be fine-tuned on smaller task-specific datasets, e.g., when working with problems like question answering and sentiment analysis. This approach results in great accuracy improvements compared to training on the smaller task-specific datasets from scratch. BERT is a recent addition to these techniques for NLP pre-training; it caused a stir in the deep learning community because it presented state-of-the-art results in a wide variety of NLP tasks, like question answering.\n\nThe best part about BERT is that it can be download and used for free \u2014  we can either use the  BERT models to extract high quality language features from our text data, or we can fine-tune these models on a specific task, like sentiment analysis and question answering, with our own data to produce state-of-the-art predictions.\n\nIn **summary** the following are the main benefits of using BERT:\n\n**Easy Training**\n\nFirst, the pre-trained BERT model weights already encode a lot of information about our language. As a result, it takes much less time to train our fine-tuned model - it is as if we have already trained the bottom layers of our network extensively and only need to gently tune them while using their output as features for our classification task. In fact, the authors recommend only 2-4 epochs of training for fine-tuning BERT on a specific NLP task (compared to the hundreds of GPU hours needed to train the original BERT model or a LSTM from scratch!).\n\n**Less Data**\n\nIn addition and perhaps just as important, because of the pre-trained weights this method allows us to fine-tune our task on a much smaller dataset than would be required in a model that is built from scratch. A major drawback of NLP models built from scratch is that we often need a prohibitively large dataset in order to train our network to reasonable accuracy, meaning a lot of time and energy had to be put into dataset creation. By fine-tuning BERT, we are now able to get away with training a model to good performance on a much smaller amount of training data.\n\n**Good Results**\n\nSecond, this simple fine-tuning procedure (typically adding one fully-connected layer on top of BERT and training for a few epochs) was shown to achieve state of the art results with minimal task-specific adjustments for a wide variety of tasks: classification, language inference, semantic similarity, question answering, etc. Rather than implementing custom and sometimes-obscure architetures shown to work well on a specific task, simply fine-tuning BERT is shown to be a better (or at least equal) alternative.\n\n**A Shift in NLP**\n\nThis shift to transfer learning parallels the same shift that took place in computer vision a few years ago. Creating a good deep learning network for computer vision tasks can take millions of parameters and be very expensive to train. Researchers discovered that deep networks learn hierarchical feature representations (simple features like edges at the lowest layers with gradually more complex features at higher layers). Rather than training a new network from scratch each time, the lower layers of a trained network with generalized image features could be copied and transfered for use in another network with a different task. It soon became common practice to download a pre-trained deep network and quickly retrain it for the new task or add additional layers on top - vastly preferable to the expensive process of training a network from scratch. For many, the introduction of deep pre-trained language models in 2018 (ELMO, BERT, ULMFIT, Open-GPT, etc.) signals the same shift to transfer learning in NLP that computer vision saw.\n","2ccf7d8b":"Cool! In about half an hour and without doing any hyperparameter tuning (adjusting the learning rate, epochs, batch size, ADAM properties, etc.) we are able to get a good score.","4dc7fb03":"The final score will be based on the entire test set, but let's take a look at the scores on the individual batches to get a sense of the variability in the metric between batches.\n\nEach batch has 32 sentences in it, except the last batch which has only (516 % 32) = 4 test sentences in it.","4a446fff":"### Padding & Truncating\n\nPad and truncate our sequences so that they all have the same length, MAX_LEN.\n\nFirst, what's the maximum sentence length in our dataset?","ec0923ef":"### Attention Masks\nThe attention mask simply makes it explicit which tokens are actual words versus which are padding.\n\nThe BERT vocabulary does not use the ID 0, so if a token ID is 0, then it's padding, and otherwise it's a real token.","c20a01d0":"## 1. Introduction <a id=\"A1\"><\/a> <br>\nAt the end of 2018 researchers at Google AI Language open-sourced a new technique for Natural Language Processing (NLP) called BERT (Bidirectional Encoder Representations from Transformers) \u2014  a major breakthrough which took the Deep Learning community by storm because of its incredible performance.","3ef0dd89":"### Data Preparation\nWe'll need to apply all of the same steps that we did for the training data to prepare our test data set.","ec3379b6":"## 3. References <a id=\"A3\"><\/a> <br>\n\n* https:\/\/towardsml.com\/2019\/09\/17\/bert-explained-a-complete-guide-with-theory-and-tutorial\/\n* https:\/\/www.analyticsvidhya.com\/blog\/2019\/09\/demystifying-bert-groundbreaking-nlp-framework\/\n* https:\/\/towardsdatascience.com\/bert-for-dummies-step-by-step-tutorial-fb90890ffe03\n* https:\/\/towardsml.com\/2019\/09\/17\/bert-explained-a-complete-guide-with-theory-and-tutorial\/","f6f5de75":"We'll also create an iterator for our dataset using the torch DataLoader class. This helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory.","e8f92b00":"Let us setup and install the pytorch interface for BERT by Hugging Face. (This library contains interfaces for other pretrained language models like OpenAI's GPT and GPT-2.) I have selected the pytorch interface because it strikes a nice balance between the high-level APIs and tensorflow code .","45bc358d":"![bert.png](attachment:bert.png)","7d5f27c7":"### BertForSequenceClassification\nFor this task, we first want to modify the pre-trained BERT model to give outputs for classification, and then we want to continue training the model on our dataset until that the entire model, end-to-end, is well-suited for our task.\n\nThankfully, the huggingface pytorch implementation includes a set of interfaces designed for a variety of NLP tasks. Though these interfaces are all built on top of a trained BERT model, each has different top layers and output types designed to accomodate their specific NLP task.\n\nHere is the current list of classes provided for fine-tuning:\n\n* BertModel\n* BertForPreTraining\n* BertForMaskedLM\n* BertForNextSentencePrediction\n* BertForSequenceClassification - The one we'll use.\n* BertForTokenClassification\n* BertForQuestionAnswering\n\nThe documentation for these can be found under [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html).\n\nWe'll be using [BertForSequenceClassification](https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#bertforsequenceclassification). This is the normal BERT model with an added single linear layer on top for classification that we will use as a sentence classifier. As we feed input data, the entire pre-trained BERT model and the additional untrained classification layer is trained on our specific task.\n\nOK, let's load BERT! There are a few different pre-trained BERT models available. \"bert-base-uncased\" means the version that has only lowercase letters (\"uncased\") and is the smaller version of the two (\"base\" vs \"large\").\n\nThe documentation for from_pretrained can be found [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/model.html#transformers.PreTrainedModel.from_pretrained), with the additional parameters defined [here](https:\/\/huggingface.co\/transformers\/v2.2.0\/main_classes\/configuration.html#transformers.PretrainedConfig).","a9ab9ac9":"Accuracy on the CoLA benchmark is measured using the \"[Matthews correlation coefficient](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.matthews_corrcoef.html)\" (MCC).\n\nWe use MCC here because the classes are imbalanced:","f1d06bb7":"### Training & Validation Split\nDivide up our training set to use 90% for training and 10% for validation.","d32d18be":"### Evaluate on Test Set\nWith the test set prepared, we can apply our fine-tuned model to generate predictions on the test set.","70edc6be":"In this section, we'll transform our dataset into the format that BERT can be trained on."}}