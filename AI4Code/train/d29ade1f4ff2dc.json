{"cell_type":{"73fc5739":"code","c5ab735c":"code","33e6c883":"code","5efd9117":"code","a56a1241":"code","9405550a":"code","6e839dc5":"code","6733a65f":"code","6da337cb":"code","04b5dc5b":"code","7de56072":"code","0d34a539":"code","39a38ef2":"code","b15bf7fc":"markdown","b950784c":"markdown","60d7b4ac":"markdown"},"source":{"73fc5739":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.preprocessing import PolynomialFeatures\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file = os.path.join(dirname, filename) \n        print(file)","c5ab735c":"# Read from CSV\ndf = pd.read_csv(file)\ndf.head()\n\n# Create total pay  \ndf['TotalPay'] = df['BasePay'] + df['Bonus']\n\n# Change Gender and Dept to numerical (Dummy Coding)\ngender_dummies = pd.get_dummies(df['Gender'])\ndept_dummies = pd.get_dummies(df['Dept'])\ndf = df.join(gender_dummies)\ndel df['Gender']\ndel df['Male']  # We can delete this one because all the information is in Female (1 = Female, 0 = Male)\n\n# Switch from Education(College, High School, ...) to just College (or more) yes\/no \ndf['Education'] = np.where(df['Education'].isin(['College', 'Masters', 'PhD']), 1, 0)\n\ndf.head()","33e6c883":"# Feature sets\nX = df[['Age']].values\ny = df['TotalPay'].values\n\n# Split in train and test\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","5efd9117":"# Model\nregr = linear_model.LinearRegression()\nregr.fit (X_train, y_train)\n\n# The coefficients\nprint (f'Coefficients: {regr.coef_}')\nprint (f'Intercept: {regr.intercept_}')","a56a1241":"# Train data points and line that fits the train data\nplt.scatter(X_train, y_train,  color='blue')\nplt.plot(X_train, regr.coef_[0] * X_train + regr.intercept_, '-r')  # gradient * x + intercept\nplt.xlabel(\"Age\")\nplt.ylabel(\"Total pay per year\")","9405550a":"# Evaluation of the predictions with the test data\ny_test_pred = regr.predict(X_test)\n\nprint(f'Mean Squared Error (MSE): {mean_squared_error(y_test, y_test_pred)}')\nprint(f'R2 Score: {r2_score(y_test , y_test_pred)}')","6e839dc5":"# Feature sets\nX = df.loc[:, ~df.columns.isin(['BasePay', 'Bonus', 'JobTitle', 'Dept', 'TotalPay'])].values\ny = df['TotalPay'].values\n\nprint('Independent variables: {}'.format(df.loc[:, ~df.columns.isin(['BasePay', 'Bonus', 'JobTitle', 'Dept', 'TotalPay'])].columns.values))\n\n# Split in train and test\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","6733a65f":"# Model\nregr = linear_model.LinearRegression()\nregr.fit (X_train, y_train)\n\n# The coefficients\nprint (f'Coefficients: {regr.coef_}')\nprint (f'Intercept: {regr.intercept_}')","6da337cb":"# Model\n# Evaluation of the predictions with the test data\ny_test_pred = regr.predict(X_test)\n\nprint(f'Mean Squared Error (MSE): {mean_squared_error(y_test, y_test_pred)}')\nprint(f'R2 Score: {r2_score(y_test , y_test_pred)}')","04b5dc5b":"# Predict with manually created data: 27 years, 5 performance evaluation score, > college education, 3 years of experience, Female\n\nemployee_data = [[27, 5, 1, 3, 1]]\nsalary = regr.predict(employee_data)\nprint(f'Estimated salary: {salary[0]:.2f} USD')","7de56072":"# Feature sets\nX = df[['Age']].values\ny = df['TotalPay'].values\n\n# Split in train and test\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)\n\n# Generate polynomial features --> Will give us multiple values, we can use them for Multiple Linear Regression\npoly = PolynomialFeatures(degree=2)\nX_train_poly = poly.fit_transform(X_train)\nprint ('Train set polynomial:', X_train_poly.shape,  y_train.shape)","0d34a539":"# From now on it will be like a Multiple Linear Regression\n# Model\nregr = linear_model.LinearRegression()\nregr.fit (X_train_poly, y_train)\n\n# The coefficients\nprint (f'Coefficients: {regr.coef_}')\nprint (f'Intercept: {regr.intercept_}')","39a38ef2":"# Train data points and polynomial line that fits the train data\nplt.scatter(X_train, y_train,  color='blue')\nplt.plot(X_train, regr.intercept_ + regr.coef_[1] * X_train + regr.coef_[2] * np.power(X_train, 2), '-r') # \u0177 = interc + coef1 * x + coef2 * x^2\nplt.xlabel(\"Age\")\nplt.ylabel(\"Total pay per year\")","b15bf7fc":"## Multiple Linear Regression\n--> Total pay per age, gender, ...","b950784c":"## Polynomial Regression","60d7b4ac":"## Simple Linear Regression\n--> Total pay by[](http:\/\/) age"}}