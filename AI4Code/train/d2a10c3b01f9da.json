{"cell_type":{"ddbb5b07":"code","1f8b943c":"code","dd06fd5d":"code","385e39e6":"code","083e3df5":"code","877023ce":"code","f88af312":"code","1eec52ba":"code","ab13c867":"code","1f45b45f":"code","e75ca788":"code","175817f5":"markdown","ac914b21":"markdown","f90f5e7d":"markdown","e80397f8":"markdown"},"source":{"ddbb5b07":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\nimport optuna\nfrom optuna.samplers import TPESampler\nfrom sklearn.model_selection import KFold\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1f8b943c":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data","dd06fd5d":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","385e39e6":"print('Part of missing values for train data')\nprint(train_data.isnull().sum() \/ len(train_data))\nprint('Part of missing values for test data')\nprint(test_data.isnull().sum() \/ len(test_data))\n# Because there are lots of Na values in  Age column and Cabin these column could not be features\n\n# Although Embarked value have Na in train data, the test data is clean.\n# The fare is clean in Train and have a little NA in test_data\n# I delete the Na row in train data and use embarked as a feature to predict\nprint(type(train_data))\ntrain_data = train_data.dropna(subset=[\"Embarked\"])\ntest_data[\"Fare\"] = test_data[\"Fare\"].fillna(test_data['Fare'].mean())\n","083e3df5":"# Check the NA\nprint('Part of missing values for train data')\nprint(train_data.isnull().sum() \/ len(train_data))\nprint('Part of missing values for test data')\nprint(test_data.isnull().sum() \/ len(test_data))","877023ce":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","f88af312":"# Try to fix the Age feature\n# In this part, I think that men and women will have different reason not to fill in the age information, so I take a closer look for each gender.\nagena = train_data.loc[train_data['Age'].isna()]\nagmen = agena.loc[agena.Sex == 'male']\nagwomen = agena.loc[agena.Sex == 'female']\nprint(len(agmen))\nprint(len(agwomen))\n# Surprisingly more man's age is a secret.","1eec52ba":"# At the begging I just want to fill Age by mean value\n#train_data[\"Age\"] = train_data[\"Age\"].fillna(train_data['Age'].mean())\n#test_data[\"Age\"] = test_data[\"Age\"].fillna(test_data['Age'].mean())\n\n#Now, I want to print out the mean age value of each gender and fill them in to the NA\nprint(train_data.loc[train_data.Sex == 'male'].mean())\nprint(train_data.loc[train_data.Sex == 'female'].mean())\n#Use group by to fill na by each gender\ntrain_data[\"Age\"] = train_data.groupby(['Sex'],sort=False)[\"Age\"].fillna(train_data['Age'].mean())\ntest_data[\"Age\"] = test_data.groupby(['Sex'],sort=False)[\"Age\"].fillna(train_data['Age'].mean())\n#Double check does it works\nprint(train_data.loc[train_data.Sex == 'male'].mean())\nprint(train_data.loc[train_data.Sex == 'female'].mean())","ab13c867":"# Check the NA\nprint('Part of missing values for train data')\nprint(train_data.isnull().sum() \/ len(train_data))\nprint('Part of missing values for test data')\nprint(test_data.isnull().sum() \/ len(test_data))","1f45b45f":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Embarked\", \"Fare\",\"Age\"]\nX = pd.get_dummies(train_data[features])\ny = train_data[\"Survived\"]\nX_test = pd.get_dummies(test_data[features])","e75ca788":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions_rfc = model.predict(X_test)\n\npredictions=predictions_rfc\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions })\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","175817f5":"# ML_day1_Titanic","ac914b21":"## Model training","f90f5e7d":"## Read data","e80397f8":"## Show more data information"}}