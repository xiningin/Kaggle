{"cell_type":{"ea3520f6":"code","0b95b731":"code","7a51e413":"code","d9671156":"code","544b555b":"code","a5619b1f":"code","5a7fd1d0":"code","f74505d3":"code","b8d35f1a":"code","d067c93c":"code","bbe12d58":"code","4df9f47d":"code","400d4e77":"code","268b9a8a":"code","1a4164fe":"code","ed9f3caa":"code","f215e417":"code","b9df0fd3":"code","1bd7566d":"code","cd70fdd3":"code","586dd00b":"code","a00bbc30":"code","9fc5b123":"code","67a25989":"code","e8e91c5e":"code","99aba819":"code","f2f1798f":"code","4499a983":"code","bb44c2a2":"code","04831501":"code","1b4e76e6":"code","72f84a64":"code","4735688d":"code","f2a83157":"code","6b6532d2":"code","66ddb720":"code","881a1f28":"code","7698daff":"code","53a0c41f":"code","8d7e0c31":"code","f008032d":"code","028a92fa":"code","30db6c8d":"code","92c7c675":"code","43fb4166":"code","0770454e":"code","dc716863":"code","9571dd45":"code","5fdb553a":"code","9afda1d9":"code","7fc32d9c":"code","0f259c52":"code","c042a9b4":"code","35fd1d77":"code","c5507f88":"code","9246e505":"code","7baad5b7":"code","d99a70a3":"code","5fcf9312":"code","7e678474":"code","140c7fd2":"code","9767c60a":"code","0a0135cf":"code","2fdd6c37":"code","dcaa9397":"code","ce22686b":"code","a4ddcb48":"code","760cdc59":"code","0d514ecb":"code","61aed067":"code","499720b2":"code","7b355ab3":"code","2779deab":"code","e22ac029":"code","45078f57":"code","73b5e8e4":"code","903e2a84":"code","91460ffa":"code","907bed53":"code","3a6c3e6d":"code","61b0f96e":"code","640c6ad3":"code","aade2af5":"code","4175a6dd":"code","338c10c7":"code","f1307c10":"code","19e8bc61":"code","f9d4a089":"code","460e34f1":"code","595fda12":"code","0bfb34c2":"code","7ac0c107":"code","560c5094":"code","d80d2a17":"code","db7b69d6":"code","f14701a9":"code","b91ce7ea":"code","2a4d2c80":"code","95497e15":"code","7dc7db22":"code","5969c691":"code","ff413a25":"code","d5ff4d5e":"code","87e7c35e":"code","5c008482":"markdown","e2998d6e":"markdown","7ea1e464":"markdown","c1605777":"markdown","48ccd13a":"markdown","6f1345e9":"markdown","ec19c609":"markdown","05d4d162":"markdown","4a6c3d7b":"markdown","b8d9c9ee":"markdown","7ff151f8":"markdown","ed02800e":"markdown","c1dd6903":"markdown","c2fce34b":"markdown","2bd29d5e":"markdown","c4f7ded0":"markdown","d1cdc8cc":"markdown","04ae69a2":"markdown","538f36ca":"markdown","990b4893":"markdown","57dcfd87":"markdown","071102ca":"markdown","4c350a3d":"markdown","c5ac05b7":"markdown","73cafb02":"markdown","ae360052":"markdown","72fb4bc3":"markdown","b980318e":"markdown","a18f1b15":"markdown","b8000e5d":"markdown","68bd115b":"markdown","bc7c8d0e":"markdown","68c309b3":"markdown","7e4563ec":"markdown","a9c67922":"markdown","7e02158f":"markdown","b3e066bc":"markdown","780c1513":"markdown"},"source":{"ea3520f6":"%%time\nimport numpy as np \nimport pandas as pd\nimport warnings \nwarnings.filterwarnings(\"ignore\")\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0b95b731":"train=pd.read_csv(\"..\/input\/train.csv\")","7a51e413":"train.head()\n","d9671156":"train.describe()","544b555b":"train.describe(include=['O'])","a5619b1f":"train.hist(figsize=(10,8))","5a7fd1d0":"train.info()","f74505d3":"train.Age.hist(bins=20)","b8d35f1a":"sns.boxplot(x='Pclass',y='Age',data=train,hue='Survived')","d067c93c":"print (train.groupby(['Pclass']).get_group(1).Age.mean())\nprint (train.groupby(['Pclass']).get_group(2).Age.mean())\nprint (train.groupby(['Pclass']).get_group(3).Age.mean())","bbe12d58":"train['Age']=train.groupby(['Pclass','Survived'])['Age'].transform(lambda x:x.fillna(x.mean()))","4df9f47d":"train.info()","400d4e77":"sns.stripplot(y='Fare',x='Pclass',hue='Survived',data=train)","268b9a8a":"train.groupby(['Pclass','Survived'])['Fare'].mean()","1a4164fe":"plt.hist(train.Fare,bins=30)\nplt.xlabel('Fare')\nplt.ylabel('count')","ed9f3caa":"train.Fare=np.ceil(train.Fare)\ntrain['fare']=pd.cut(train.Fare,bins=[0,8,13,20,30,50,80,600],labels=['a','b','c','d','e','f','g'],right=False)","f215e417":"sns.countplot(x='fare',hue='Survived',data=train)","b9df0fd3":"sns.countplot(x='SibSp',hue='Survived',data=train)","1bd7566d":"sns.countplot(x='Parch',hue='Survived',data=train)","cd70fdd3":"train['members']=train['SibSp']+train['Parch']","586dd00b":"sns.countplot(x='members',hue='Survived',data=train)","a00bbc30":"train.members.value_counts()","9fc5b123":"train[train.members>6].Survived.value_counts()\n","67a25989":"train.members.replace({10:7},inplace=True)","e8e91c5e":"train.head()","99aba819":"attributes=['Survived','Pclass','Sex','Age','Embarked','fare','members']","f2f1798f":"train=train[attributes]","4499a983":"train.head()","bb44c2a2":"sns.countplot(x='Embarked',hue='Survived',data=train)","04831501":"train[train.Embarked.isnull()]","1b4e76e6":"sns.catplot(kind='point',x='Embarked',y='Pclass',hue='Sex',data=train)","72f84a64":"train.groupby(['Pclass','Sex']).get_group((1,'female')).Embarked.value_counts()","4735688d":"train.Embarked.fillna('C',inplace=True)","f2a83157":"train.info()","6b6532d2":"def func(x):\n    if(x.dtype=='O'):\n        x=x.astype('category')\n    return(x)","66ddb720":"train=train.apply(func,axis=0)","881a1f28":"train.info()","7698daff":"train.members=train.members.astype('category')\ntrain.Survived=train.Survived.astype('category')\ntrain.Pclass=train.Pclass.astype('category')\ntrain.Age=train.Age.astype('int64')","53a0c41f":"train.info()","8d7e0c31":"df_label=train.Survived\ndel train['Survived']\ndf=pd.get_dummies(train)","f008032d":"from sklearn.preprocessing import StandardScaler","028a92fa":"scaled=StandardScaler().fit_transform(df)\ndf=pd.DataFrame(scaled,index=df.index,columns=df.columns)\n","30db6c8d":"df=pd.concat([df,df_label],axis=1)","92c7c675":"df.head()","43fb4166":"train=df\ntrain.shape","0770454e":"index=np.random.permutation(891)\ntrain=train.loc[index,:]\ntrain.shape","dc716863":"train_label=train.Survived\ndel train['Survived']","9571dd45":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_predict","5fdb553a":"from sklearn.linear_model import SGDClassifier\nsgd=SGDClassifier(n_iter=200,penalty='l1',epsilon=1e-20,random_state=8349)\nscore=cross_val_predict(sgd,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","9afda1d9":"from sklearn.metrics import accuracy_score\nacc_lc=accuracy_score(train_label,score)\nacc_lc","7fc32d9c":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(random_state=73289471,class_weight='balanced')\nscore=cross_val_predict(lr,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","0f259c52":"from sklearn.metrics import accuracy_score\nacc_lr=accuracy_score(train_label,score)\nacc_lr","c042a9b4":"from sklearn.neighbors import KNeighborsClassifier\nvalue=[]\nfor k in range(1,20):\n    knn=KNeighborsClassifier(k,algorithm='brute')\n    score=cross_val_predict(knn,train,train_label,cv=10)\n    value.append(accuracy_score(train_label,score))","35fd1d77":"df=pd.DataFrame(value,index=range(1,20),columns=['accuracy'])","c5507f88":"df.set_index='K value'\ndf.sort_values(ascending=False,by='accuracy')","9246e505":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(7,algorithm='brute')\nscore=cross_val_predict(knn,train,train_label,cv=10)\nacc_knn=accuracy_score(train_label,score)\nacc_knn","7baad5b7":"from sklearn.tree import DecisionTreeClassifier\ndtc=DecisionTreeClassifier(random_state=1341)\nscore=cross_val_predict(dtc,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","d99a70a3":"acc_dtc=accuracy_score(train_label,score)\nacc_dtc","5fcf9312":"from sklearn.svm import SVC\nsvm=SVC(kernel='rbf',C=20,gamma=0.05,random_state=2317)\nscore=cross_val_predict(svm,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","7e678474":"acc_svm=accuracy_score(train_label,score)\nacc_svm","140c7fd2":"from sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(n_estimators=200,random_state=167123)\nscore=cross_val_predict(rf,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","9767c60a":"acc_rf=accuracy_score(train_label,score)\nacc_rf","0a0135cf":"from sklearn.ensemble import ExtraTreesClassifier\netc=ExtraTreesClassifier(n_estimators=200,random_state=67)\nscore=cross_val_predict(etc,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","2fdd6c37":"acc_etc=accuracy_score(train_label,score)\nacc_etc","dcaa9397":"from sklearn.ensemble import AdaBoostClassifier\nada=AdaBoostClassifier(dtc,n_estimators=200,\nalgorithm='SAMME.R',learning_rate=0.01,random_state=13247)\nscore=cross_val_predict(ada,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","ce22686b":"acc_ada=accuracy_score(train_label,score)\nacc_ada","a4ddcb48":"from sklearn.ensemble import GradientBoostingClassifier\ngb=GradientBoostingClassifier(n_estimators=200,learning_rate=0.01,random_state=11233)\nscore=cross_val_predict(gb,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","760cdc59":"acc_gb=accuracy_score(train_label,score)\nacc_gb","0d514ecb":"from sklearn.ensemble import BaggingClassifier\nbp=BaggingClassifier(SVC(kernel='rbf',C=20,gamma=0.05,random_state=87),n_estimators=200, bootstrap=False ,\n                     n_jobs=-1,random_state=82139 )\nscore=cross_val_predict(bp,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","61aed067":"acc_bp=accuracy_score(train_label,score)\nacc_bp","499720b2":"df=pd.DataFrame([acc_lc*100,acc_lr*100,acc_knn*100,acc_dtc*100,acc_svm*100,acc_rf*100,\n             acc_etc,acc_ada*100,acc_gb*100,acc_bp*100],\n            index=['Linear Classifier','Logistic','KNN','Decision Tree','SVM','Random Forest',\n                  'Extra Trees','ADA boost','Gradient Boost','Bagging and pasting'],columns=['Accuracy'])","7b355ab3":"df=df.sort_values(ascending=False,by='Accuracy')","2779deab":"color=sns.color_palette\nsns.barplot(data=df, y=df.index,x='Accuracy')\n#plt.xticks(rotation=90)","e22ac029":"from sklearn.model_selection import RandomizedSearchCV\ndef r_search(classifier,param,data,data_label,fold):\n    rs=RandomizedSearchCV(classifier,param_distributions=param,cv=fold,n_jobs=-1)\n    rs.fit(data,data_label)\n    return(rs.best_params_ , rs.best_score_, rs.best_estimator_)","45078f57":"param={'max_features':[7,9,13,],'max_depth':[5,7,9,12],'min_samples_split':[25,40,55],\n       'min_samples_leaf':[3,5,13,23],'max_leaf_nodes':[3,7,13,19],\n      'n_estimators':[100,200,500,1000],'learning_rate':[1,0.1,0.01,0.001]}\nbest_param , best_score , best_estimator= r_search(GradientBoostingClassifier(random_state=9248309),\n                                 param,train,train_label,10)","73b5e8e4":"print(best_param,'\\n' ,best_score)","903e2a84":"gb=best_estimator","91460ffa":"from sklearn.ensemble import VotingClassifier\nvc=VotingClassifier(estimators=[('rf',svm),('gb',gb),\n                                ('svm',lr)],voting='hard')\nscore=cross_val_predict(vc,train,train_label,cv=10)\nconfusion_matrix(train_label,score)","907bed53":"acc_vc=accuracy_score(train_label,score)\nacc_vc","3a6c3e6d":"gb.fit(train,train_label)","61b0f96e":"test=pd.read_csv('..\/input\/test.csv')","640c6ad3":"test.head()","aade2af5":"attributes=['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']\ntest=test[attributes]","4175a6dd":"test.info()","338c10c7":"test['Age']=test.groupby('Pclass')['Age'].transform(lambda x:x.fillna(x.mean()))","f1307c10":"test.Embarked.fillna('C',inplace=True)","19e8bc61":"test.info()","f9d4a089":"test['members']=test['SibSp']+test['Parch']\ndel test['SibSp']\ndel test['Parch']","460e34f1":"test.members.replace({10:7},inplace=True)","595fda12":"test.Fare=np.ceil(test.Fare)\ntest['fare']=pd.cut(test.Fare,bins=[0,8,13,20,30,50,80,600],labels=['a','b','c','d','e','f','g'],right=False)","0bfb34c2":"test.members=test.members.astype('category')\ntest.Pclass=test.Pclass.astype('category')\ntest.Age=test.Age.astype('int64')\ntest.fare=test.fare.astype('category')\ntest.Embarked=test.Embarked.astype('category')","7ac0c107":"test.info()","560c5094":"test.fare.value_counts()","d80d2a17":"test.fare.fillna('b',inplace=True)\ntest.info()","db7b69d6":"del test['Fare']","f14701a9":"test.head()","b91ce7ea":"test=pd.get_dummies(test)","2a4d2c80":"scaled=StandardScaler().fit_transform(test)\ntest=pd.DataFrame(scaled,index=test.index,columns=test.columns)\ntest.head()","95497e15":"test.shape","7dc7db22":"prediction=gb.predict(test)","5969c691":"sample=pd.read_csv('..\/input\/gender_submission.csv')","ff413a25":"sample.head()","d5ff4d5e":"s=pd.DataFrame({'PassengerId':sample.PassengerId,'Survived':prediction})\ns.head()","87e7c35e":"s.to_csv('submission.csv',index=False)","5c008482":"## Importing and exploring data","e2998d6e":"## Thanks and don't forget to upvote it :)","7ea1e464":"## Two missing values belong to same Pclass and Same Sex with same Fare category ie g. Lets explore further more","c1605777":"# 7 Extra Tree","48ccd13a":"## Thats look nice!!! As Fare increases (a to g) chances of survival increases.\n## Fare really wanted to tell us something :)","6f1345e9":"## So column Age, Cabin, Embarked have missing values. Let's Start with Age column","ec19c609":"# Now we have to import test file and process it before prediction","05d4d162":"## Wait !!! Embarked also have 2 mising values. So lets do filling. But first we need to explore Embarked column","4a6c3d7b":"# Now lets take a look at Fare column. May be it want to something to us","b8d9c9ee":"## Members with head count of more than 6 never survived in our train dataset so lets make 6+ members that is 7 and 10 members as 7 members","7ff151f8":"## So with above exploration we can say that female which belong to Pclass 1 have C Embarked most probably. Lets fill it","ed02800e":"# Gradient Boost","c1dd6903":"## Lets see now SibSp and Parch Columns","c2fce34b":"# 10.Voting Classifier","2bd29d5e":"# 5. SVM","c4f7ded0":"# 3. KNN","d1cdc8cc":"# 6.Random Forest","04ae69a2":"## We can fill missing age with mean but age varies for each Pclass so filling missing age with mean will not be proper. Lets fill Age according to Pclass ","538f36ca":"# 1. Linear Classifier","990b4893":"## Most of the people paid 0-80 Fare. Fare varies based on Pclass and Survival. Survived people paid higher fare than people who died. So we need to utilise fare column. Since Fare as an integer column will not be usefull. Lets make it Categorical ","57dcfd87":"# Prediction Time","071102ca":"# 9. Gradient Boosting","4c350a3d":"## Now lets choose our feature attributes. Name is not giving us any proper info so lets drop it. Cabin column have various missing values and filling it may affect our prediction so drop it to. Ticket also not needed so drop it.","c5ac05b7":"# 8. ADA BOOSTING","73cafb02":"## Age distribution is positive skewed. Need more information to fill missing data. Let's plot Age with PClass","ae360052":"# 2. logistic Regression","72fb4bc3":"# Now Random Search on Best Models","b980318e":"## So KNN give best result when k=7. lets train with k=7","a18f1b15":"## No missing value finally. Now lets do type conversion","b8000e5d":"## From above figure we can say that people who paid higher got 1st Pclass and there chanced of survival are better than other Pclass. \n## Let's see average Fare based on class","68bd115b":"# So Finally we got our best algorithm with accuracy of 84.73% Gradient Boosting","bc7c8d0e":"## Don't forget to explore object type columns","68c309b3":"## Lets combine both columns. As both column represent members","7e4563ec":"# 4. Decision Tree","a9c67922":"# Titanic Survival Prediction \n### In this i have covered most of ensemble models. Hope you guys like it. Don't forget to give Upvote :)\n\n","7e02158f":"# 9. Bagging And Pasting","b3e066bc":"# Now our data is ready now its time to use it for model building and prediction","780c1513":"## Now lets convert categorical values into dummy variable and Scaling "}}