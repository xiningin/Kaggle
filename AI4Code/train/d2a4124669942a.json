{"cell_type":{"f1845449":"code","740ee67d":"code","1358f19e":"code","ce7820da":"code","0a23ce82":"code","1a6ac12c":"code","a1c96ff3":"code","cbe851ef":"code","53c984b4":"code","f186a89e":"code","a8f792c5":"code","6c264af7":"code","6b717401":"code","7c8fa482":"code","8c85f790":"code","a070d0f3":"code","07a39b00":"code","b319599f":"code","370126b0":"code","c61eacca":"code","cf60e287":"code","39217692":"code","1f2d83bc":"code","e16ad6d5":"code","fd5e8ad6":"markdown","d7b903ba":"markdown","2477a42a":"markdown","eec3b49f":"markdown","c0bec701":"markdown","561d3f75":"markdown","5027ae73":"markdown","f91e3eec":"markdown","e6e21113":"markdown","21992682":"markdown","65e88d7a":"markdown","c18e4fc3":"markdown","0f80530b":"markdown","26bcdcb2":"markdown","4096af26":"markdown","5d35a742":"markdown","88e9c2b6":"markdown","819320dc":"markdown","05cf3fa0":"markdown","970176be":"markdown","7370a777":"markdown","b911731a":"markdown","9a742b6c":"markdown","fde0577d":"markdown"},"source":{"f1845449":"#import pandas relevant libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport numpy as np\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n#display numbers without scientific notation\npd.set_option('display.float_format', lambda x: '%.5f' % x) ","740ee67d":"#Define functions for this dataset\n#define function to replace null values. compatible with the rest of the yt datasets\ndef null_desc(df):\n    \"\"\"\n    replace null video descriptions\n    with 'No Description'\n    \"\"\"\n    \n    df['description'].replace(np.nan, 'No Description', inplace=True)\n    \n    print ('Null count\\n{}'.format(df.isnull().sum()))\n\n#define function to drop duplicate titles, keeping first or most recent trending date\ndef title_dup_rmv(df,kp):\n    \"\"\"\n    drop duplicate titles\n    and keep the data from\n    the last or first posted date\n    use 'first' or 'last' as kp\n    \"\"\"\n    clean_df= df.sort_values('trending_date', ascending=True).drop_duplicates('title', keep=kp)\n    clean_df= clean_df.sort_values('trending_date', ascending=False)\n    return(clean_df)","1358f19e":"filep = '..\/input\/youtube-trending-video-dataset\/US_youtube_trending_data.csv'\nyt_us = pd.read_csv(filep,\n                   parse_dates=['publishedAt','trending_date'])\nyt_us.head()","ce7820da":"yt_us.info()","0a23ce82":"yt_us.describe()","1a6ac12c":"#display how many nulls are in each column\npx.bar(yt_us.isnull().sum()\n       ,title='Nulls Per Column'\n       ,color=yt_us.isnull().sum().index)","a1c96ff3":"#replace all null description with \"No Description\"\nnull_desc(yt_us)","cbe851ef":"yt_top = title_dup_rmv(yt_us,'last') #remove duplicate titles, keeping the most recent trending date entry.\nyt_top_l = yt_top.sort_values('likes', ascending= False)\nyt_top_v = yt_top.sort_values('view_count',ascending = False)\nyt_top_c = yt_top.sort_values('comment_count', ascending = False)","53c984b4":"#initialize interactive graph object\nfig = go.Figure()\n\n#add each of the graph traces for likes, views and comments\nfig.add_trace(\n    go.Bar(\n        y=yt_top_l['title'].head(5),\n        x=yt_top_l['likes'].head(5),\n        hovertext=yt_top_l['channelTitle'],\n        orientation='h',\n        name= 'Likes',\n        marker=dict(color = '#298523')))\n\nfig.add_trace(\n    go.Bar(\n        y=yt_top_v['title'].head(5),\n        x=yt_top_v['view_count'].head(5),\n        hovertext=yt_top_v['channelTitle'],\n        orientation='h',\n        name= 'Views',\n        visible=False,\n        marker=dict(color = '#E38D1E')))\n\nfig.add_trace(\n    go.Bar(\n        y=yt_top_c['title'].head(5),\n        x=yt_top_c['comment_count'].head(5),\n        hovertext=yt_top_c['channelTitle'],\n        orientation='h',\n        name= 'Comments',\n        visible= False,\n        marker= dict(color = '#1E39E3')))\n\n#update layout with buttons, corresponding to each trace\nfig.update_layout(\n    {\n    'title' : {\n        'font_size' : 20,\n        'text' : 'Top 5 Trending Videos by Likes, Views or Comments'}},\n    yaxis = {'title' : 'Video Title'},\n    updatemenus= [dict(\n        type='buttons',\n        direction='right',\n        active=0,\n        y=1.1,\n        x=0.8,\n        buttons=list([\n            dict(label='Likes'\n                ,method='update'\n                ,args=[{'visible' : [True,False,False]},\n                     {'title' : 'Top 5 Trending Videos by Likes',\n                     'xaxis': {'title': 'Likes'}}]),\n            dict(label='Views'\n                ,method='update'\n                ,args=[{'visible' : [False,True,False]},\n                    {'title' : 'Top 5 Trending Videos by Views',\n                     'xaxis': {'title': 'Views'}}]),\n            dict(label='Comments'\n                ,method='update'\n                ,args=[{'visible' : [False,False,True]},\n                {'title' : 'Top 5 Trending Videos by Comments',\n                'xaxis': {'title': 'Comments'}}])\n        ])\n        )])\n#display figure\nfig.show()","f186a89e":"corr_us = yt_us[['title','channelTitle','view_count','likes',\\\n                 'dislikes','comment_count','comments_disabled',\\\n                 'trending_date','tags']].copy()","a8f792c5":"#define comment filter for titles that have comments enabled but have 0 comments\ncmt_err_mask = (corr_us['comments_disabled'] == False)&(corr_us['comment_count'] == 0)\n\n#if erroneous entries are detected, here we drop all rows where comments are enabled AND the comment count is 0 \ncorr_us.drop(corr_us[cmt_err_mask].index, inplace=True)\n\n#define filter for titles where comments are disabled\ncmt_dis_mask = corr_us['comments_disabled'] == True\n#drop rows where comments are disabled\ncorr_us.drop(corr_us[cmt_dis_mask].index, inplace=True)\n\n#drop all rows with 0 likes\ncorr_us.drop(corr_us[corr_us['likes'] == 0].index, inplace=True)\n\n#remove duplicate titles while keeping the most recent data about each video\ncorr_us = title_dup_rmv(corr_us,'last')\n","6c264af7":"#use pearson correlation\ngo_corr = corr_us[['view_count','likes','dislikes','comment_count']].corr()\ngo_corr","6b717401":"#initialize plotly express figure\nfig= px.imshow(go_corr\n               ,title='Correlation Between Trending Youtube Videos Attributes')\nfig.update_layout(\n    title_font_family=\"Times New Roman\",\n    title_font_color=\"#2D3A39\",\n    font_size = 16)\nfig.show()","7c8fa482":"#plotly express figure\npx.scatter(corr_us,'likes','comment_count'\n           ,title='Correlation between Comment Count and Likes in Trending Videos')","8c85f790":"#lets analyze the tags of trending videos\ntags = yt_us.copy()\ntags = title_dup_rmv(tags,'last') #remove duplicate titles\ntags = tags[['tags']]\n\n#we'll ignore videos without tags and join tags with space using '-'\nmask = tags['tags'] != '[None]'\ntags = tags['tags'][mask].str.replace(' ','-').to_frame()\ntags = tags['tags'][mask].str.replace('|',' ')\n\n#prepare the tags for word processing\ntext = list(set(tags)) \nwordcloud = WordCloud(max_font_size=50,\n                      background_color='black',\n                      scale=3,\n                      max_words=20\n                     ).generate(str(text))","a070d0f3":"#initialize image for wordcloud word processing\nfig = px.imshow(wordcloud)\nfig.update_layout({\n    'xaxis': {\n        'visible': False},\n    'yaxis': {\n        'visible': False},\n    'title': {\n        'text' : 'Top 20 Tags from Trending Youtube Videos',\n        'font_size' : 25\n    }})\nfig.show()\n","07a39b00":"#create a copy of the dataframe for further manipulation\nyt_disliked = yt_us[['likes','dislikes','title','trending_date','channelTitle']].copy()","b319599f":"#define filters \nmask = yt_disliked['likes'] < yt_disliked['dislikes']\n\nyt_disliked = yt_disliked[mask]\nyt_disliked = title_dup_rmv(yt_disliked,'last') #remove duplicate titles\nyt_disliked['ratio'] = yt_disliked['dislikes']\/yt_disliked['likes'] #assign a 'ratio' column that shows the level of dislike\n\n#define ratio filters\nmost_disliked = yt_disliked['ratio'] > 1.6\nmost_controversial = yt_disliked['ratio'] <=1.6\n\n#shows the most disliked videos\ndislike_data = yt_disliked[most_disliked]\n\n#shows the most controversial videos\ncon_data = yt_disliked[most_controversial]\n\n#define dislike threshold - only show titles that have over 200 dislikes\ndd_dt = dislike_data['dislikes'] > 200 \ncd_dt = con_data['dislikes'] > 200\n\n#top 5 disliked and controversial videos\ndislike_data = dislike_data[dd_dt].sort_values('ratio', ascending=False).head(5)\ncon_data = con_data[cd_dt].sort_values('ratio', ascending=False).head(5)","370126b0":"#initialize interactive graph object\nfig = go.Figure()\n\n#add bar graph for most disliked videos\nfig.add_trace(go.Bar(\n    x= dislike_data['ratio']\n    ,y= dislike_data['title']\n    ,name='Top 5 Most Disliked Videos'\n    ,orientation='h'\n    ,hovertext= 'Channel Name: '+con_data['channelTitle']\n    ,marker=dict(\n        color=dislike_data['dislikes'],\n        colorscale=\"sunsetdark\",\n        colorbar= {'title' : 'Dislikes'})))\n\n#add bar graph for most controversial videos\nfig.add_trace(go.Bar(\n    x= con_data['ratio']\n    ,y= con_data['title']\n    ,name='Top 5 Most Controversial Videos'\n    ,visible= False\n    ,orientation='h'\n    ,hovertext= 'Channel Name: '+con_data['channelTitle']\n    ,marker=dict(\n        color=dislike_data['dislikes'],\n        colorscale=\"sunsetdark\",\n        colorbar= {'title' : 'Dislikes'})))\n\n#update title and axis labels and assign buttons for the different traces\nfig.update_layout({\n    'title' : {'text' : 'Top 5 Most Disliked or Controversial Videos'},\n    'xaxis' : {\n        'title' : {'text':'Dislike\/Like Ratio',\n                  'font_size' : 17}},\n    'yaxis' : {\n        'title' : {'text' : 'Video Title',\n                  'font_size' : 17}\n    }},\n    updatemenus= [dict(\n    type='buttons',\n    direction='right',\n    active=0,\n    x=0.9,\n    y=1.12,\n    buttons=list([\n        dict(label='Most Disliked'\n            ,method='update'\n            ,args=[{'visible' : [True,False]},\n                 {'title' : 'Top 5 Most Disliked Videos'}]),\n        dict(label='Most Controversial'\n            ,method='update'\n            ,args=[{'visible' : [False,True]},\n                {'title' : 'Top 5 Most Controversial Videos'}])\n    ])\n)])\n\nfig.show()","c61eacca":"#top 5 repeat trended videos\ntrend_vd = yt_us[['title','channelTitle']].\\\n    assign(trended_count= 1).\\\n    groupby(['title','channelTitle'],as_index=False).\\\n    count().\\\n    sort_values('trended_count',ascending=False).head(5).sort_values('trended_count')","cf60e287":"#top 5 repeat trended channels\ntrend_ch = yt_us[['channelTitle']].\\\n    assign(trended_count= 1).\\\n    groupby(['channelTitle'], as_index=False).\\\n    count().\\\n    sort_values('trended_count',ascending=False).head(5).sort_values('trended_count')","39217692":"#initialize interactive graph object\nfig = go.Figure()\n\n#add bar graph for top 5 trended videos\nfig.add_trace(go.Bar(\n    x= trend_vd['trended_count']\n    ,y= trend_vd['title']\n    ,visible= False\n    ,orientation='h'\n    ,hovertext= 'Channel Name: '+trend_vd['channelTitle']\n    ,marker=dict(color = '#CF5818')))\n\n#add bar graph for top 10 repeat trended channels\nfig.add_trace(go.Bar(\n    x= trend_ch['trended_count']\n    ,y= trend_ch['channelTitle']\n    ,orientation='h'\n    ,marker=dict(color = '#228EB7')))\n\n#update graph layout and add buttons for each trace\nfig.update_layout({\n    'title' : {\n        'font_size' : 20,\n        'text' : 'Top 5 Repeated Trending Channels and Videos'},\n    'xaxis' : {\n        'title' : {'text':'Number of Times Trended',\n                  'font_size' : 17}},\n    'yaxis' : {\n        'title' : {'text' : 'Video Title',\n                  'font_size' : 17}\n    }},\n    updatemenus= [dict(\n    type='buttons',\n    direction='right',\n    active=1,\n    x=1,\n    y=1.12,\n    buttons=list([\n        dict(label='Videos'\n            ,method='update'\n            ,args=[{'visible' : [True,False]},\n                 {'title' : 'Top 5 Repeating Trended Videos'}]),\n        dict(label='Channels'\n            ,method='update'\n            ,args=[{'visible' : [False,True]},\n                {'title' : 'Top 5 Repeating Trended Channels'}])\n    ])\n    )])\n\nfig.show()","1f2d83bc":"### Last trending date will be marked with dtl\n\n#remove duplicate titles and keep the most recent data from each title\ndtl_c = title_dup_rmv(yt_us,'last')\n\n#remove d,h,m from published date to match trending date data format.\ndtl_comp = dtl_c[['trending_date','publishedAt']].\\\n                assign(date_gap = dtl_c['trending_date'] - pd.to_datetime(dtl_c['publishedAt']).\\\n                dt.floor('d')).\\\n                sort_values('date_gap', ascending=False)\n\n#convert days calculation to int\ndtl_comp['date_gap'] = dtl_comp.date_gap.apply(lambda x: x.days)\n\n#calculate mean value and standard deviation\ndtl_md = dtl_comp['date_gap'].mean()\ndtl_std = dtl_comp['date_gap'].std()\n\n#group by the date gap (days passed from publication up to the MOST RECENT trending date)\ndtl_dist = dtl_comp[['date_gap','trending_date']]\\\n                    .groupby('date_gap', as_index=False)\\\n                    .count()\\\n                    .rename(columns= {'trending_date' : 'count'})\n\n\n### First trending date will be marked with dtf\n\n#remove duplicate titles and keep the first occurring entry from each title\ndtf_c = title_dup_rmv(yt_us,'first')\n\n#remove d,h,m from published date to match trending date data format.\ndtf_comp = dtf_c[['trending_date','publishedAt']]\\\n                .assign(date_gap = dtf_c['trending_date'] - pd.to_datetime(dtf_c['publishedAt'])\\\n                .dt.floor('d'))\\\n                .sort_values('date_gap', ascending=False)\n\n#convert days calculation to int\ndtf_comp['date_gap'] = dtf_comp.date_gap.apply(lambda x: x.days)\n\n#calculate mean value and standard deviation\ndtf_md = dtf_comp['date_gap'].mean()\ndtf_std = dtf_comp['date_gap'].std()\n\n#group by the date gap (days passed from publication up to the FIRST trending date)\ndtf_dist = dtf_comp[['date_gap','trending_date']]\\\n                    .groupby('date_gap', as_index=False)\\\n                    .count()\\\n                    .rename(columns= {'trending_date' : 'count'})\n","e16ad6d5":"#initialize interactive graph object\nfig = go.Figure()\n\n#add bar graph for last trending date\nfig.add_trace(go.Bar(\n    x=dtl_dist['date_gap'],\n    y=dtl_dist['count'],\n    visible= False,\n    marker=dict(\n        color=dtl_dist['date_gap'],\n        cmin=dtl_md-dtl_std,\n        cmax=dtl_md+dtl_std,\n        cmid=dtl_md,\n        colorbar= {'title' : 'Distance From Mean'},\n        colorscale=[\n            [0,'rgb(195, 155, 206)'],\n            [0.25,'rgb(253, 109, 114)'],\n            [0.5,'rgb(235, 116, 30)'],\n            [0.75,'rgb(253, 109, 114)'],\n            [1,'rgb(195, 155, 206)']])\n))\n\n#add bar graph for first trending date\nfig.add_trace(go.Bar(\n    x=dtf_dist['date_gap'],\n    y=dtf_dist['count'],\n    marker=dict(\n        color=dtf_dist['date_gap'],\n        cmin=dtf_md-dtf_std,\n        cmax=dtf_md+dtf_std,\n        cmid=dtf_md,\n        colorbar= {'title' : 'Distance From Mean'},\n        colorscale=[\n            [0,'rgb(195, 155, 206)'],\n            [0.25,'rgb(253, 109, 114)'],\n            [0.5,'rgb(235, 116, 30)'],\n            [0.75,'rgb(253, 109, 114)'],\n            [1,'rgb(195, 155, 206)']])\n))\n\n#add indicator for last trending date mean \nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = dtl_md,\n    visible= False,\n    title = {'text': \"Mean\",'font': {'color': 'red','size':20}},\n    number={'font':{'color': 'gray','size':30}},\n    domain = {'x': [0.8,0.9], 'y': [0.5,1]}\n))\n\n#add indicator for last trending date std \nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = dtl_std,\n    visible= False,\n    title = {'text': \"Standard Deviation\",'font': {'color': 'red','size':20}},\n    number={'font':{'color': 'gray','size':30}},\n    domain = {'x': [0.8,0.9], 'y': [0.2,0.8]}\n))\n\n#add indicator for first trending date mean \nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = dtf_md,\n    title = {'text': \"Mean\",'font': {'color': 'red','size':20}},\n    number={'font':{'color': 'gray','size':30}},\n    domain = {'x': [0.8,0.9], 'y': [0.5,1]}\n))\n\n#add indicator for first trending date std\nfig.add_trace(go.Indicator(\n    mode = \"number\",\n    value = dtf_std,\n    title = {'text': \"Standard Deviation\",'font': {'color': 'red','size':20}},\n    number={'font':{'color': 'gray','size':30}},\n    domain = {'x': [0.8,0.9], 'y': [0.2,0.8]}\n))\n\n#update graph layout and add buttons for each trace\nfig.update_layout(\n    title='Days Passed From Publication to Date Trending - First and Last',\n    xaxis_title='Days Elapsed Since Publication',\n    yaxis_title='Total Videos',\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 1,\n        tickangle = 0),\n    yaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 500),\n    updatemenus= [dict(\n    type='buttons',\n    direction='right',\n    active=1,\n    x=1,\n    y=1.12,\n    buttons=list([\n        dict(label='Last Trending Date'\n            ,method='update'\n            ,args=[{'visible' : [True,False,True,True,False,False]},\n                 {'title' : 'Days Passed From Publication to Last Day Trended'}]),\n        dict(label='First Trending Date'\n            ,method='update'\n            ,args=[{'visible' : [False,True,False,False,True,True]},\n                {'title' : 'Days Passed From Publication to First Day Trended'}])]))])\n\nfig.show()","fd5e8ad6":"Trending videos on youtube are popular videos which appear on the main page.<br> Trending videos are selected, according to Google by answering several criterias:\n\n* Are appealing to a wide range of viewers\n* Are not misleading, clickbaity or sensational\n* Capture the breadth of what\u2019s happening on YouTube and in the world\n* Showcase a diversity of creators\n* Ideally, are surprising or novel\n\nIn addition they are determined by:\n\n* View count\n* How quickly the video is generating views (i.e. \u201ctemperature\u201d)\n* Where views are coming from, including outside of YouTube\n* The age of the video\n* How the video performs compared to other recent uploads from the same channel\n\nIn this analysis we will be diving into the different properties of trending videos.<br> We will explore the relationship between the different parameters and try to understand what type of genres have a place in the youtube Trending section in the US.<br> \nThis notebook is compatible with mounting the data from the other countries as well.","d7b903ba":"<hr style=\"width:100%;height:5px;border-width:0;color:gray;background-color:gray\">\n\n<h1 style=\"text-align:center\">\n    <font \"color = #2D3A39\";\"size=20\">\n        <span style=\"font-family:Helvetica Neue Condensed\">\n            Thank You!\n        <\/span> \n    <\/font>\n<\/h1>\n","2477a42a":"<div class=\"alert alert-block alert-info\">\n    <font color = #2D3A39 ; size=4>\n    <span style='font-family:Georgia, Times, Times New Roman'>\n        <b>Insight: <\/b><br>\n        We can see that the first trending date for most videos is usually within 1 day of publication.<br>\n        We also see that the last trending date seems to be between 5 and 7 days, which shows us that most videos that trend\n        keep trending for around a week before they are no longer eligible for the trending section.\n    <\/span>\n    <\/font>\n<\/div>","eec3b49f":"<a id=\"nulls\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            2.3.1 Null Evaluation and Imputation\n            <\/span>   \n        <\/font>    \n<\/h3>","c0bec701":"<a id=\"intro\"><\/a>\n<h2>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            1. Introduction\n            <\/span>   \n        <\/font>    \n<\/h2>","561d3f75":"<h1 style=\"text-align:center\">\n    <font \"color = #2D3A39\";\"size=20\">\n        <span style=\"font-family:Helvetica Neue Condensed\">\n            Youtube US Trending Videos Explorative Data Analysis\n        <\/span> \n    <\/font>\n<\/h1>\n<hr style=\"width:100%;height:5px;border-width:0;color:gray;background-color:gray\">\n<center><img src=\"https:\/\/boostlikes-bc85.kxcdn.com\/blog\/wp-content\/uploads\/2017\/09\/Trending-on-YouTube.jpg\"><\/center>","5027ae73":"<div class=\"alert alert-block alert-info\">\n    <font color = #2D3A39 ; size=4>\n    <span style='font-family:Georgia, Times, Times New Roman'>\n        <b>At the time of this analysis: <\/b><br>\n        We can see, the most repeat trended videos is the Starlink Mission video which is related to major relevant news, we also see music videos, sport events and social media personalities.<br>\n        In the channel category we see multiple sport related channels, a gaming channel and its counterpart vlog channel.\n    <\/span>\n    <\/font>\n<\/div>","f91e3eec":"<a id=\"eda\"><\/a>\n<h2>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3. Exploratory Data Analysis\n            <\/span>   \n        <\/font>    \n<\/h2>","e6e21113":"<h2>   \n      <font color = blue ; size= 6>\n            <span style='font-family:Georgia'>\n            Table of Contents:\n            <\/span>   \n        <\/font>    \n<\/h2>\n<span style='font-family:Georgia'>\n    <ul>\n        <li><a href='#intro'>1. Introduction<\/a><\/li>\n    <\/ul>\n    <ul>\n        <li><a href='#reading'>2. Reading and Manipulating the Data<\/a><\/li>\n        <ul>\n        <li><a href='#import'>2.1 Libraries and Functions<\/a><\/li>\n        <li><a href='#data'>2.2 Import Data<\/a><\/li> \n        <li><a href='#properties'>2.3 Data Properties<\/a><\/li>\n            <ul>\n            <li><a href='#nulls'>2.3.1 Null Evaluation and Imputation<\/a><\/li>\n            <\/ul>\n           <\/ul>\n        <\/ul>\n        <ul>\n        <li><a href='#eda'>3. Exploratory Data Analysis<\/a><\/li>\n        <ul>\n        <li><a href='#topcat'>3.1 Overall Top Trending Videos by Likes, Views and Comments<\/a><\/li>\n        <li><a href='#corr'>3.2 Correlation Between Trending Video Properties<\/a><\/li>\n        <li><a href='#wordcloud'>3.3 Wordcloud Analysis<\/a><\/li>\n        <li><a href='#disliked'>3.4 Most Disliked or Controversial Trending Videos<\/a><\/li>\n        <li><a href='#repeat'>3.5 Repeat Trending Videos and Channels<\/a><\/li>\n        <li><a href='#delta'>3.6 Time Passed Since Published<\/a><\/li>\n        <\/ul> \n     <\/ul>      \n<\/span>","21992682":"<div class=\"alert alert-block alert-info\">\n    <font color = #2D3A39 ; size=4>\n    <span style='font-family:Georgia, Times, Times New Roman'>\n        <b>Results: <\/b><br>\n        We see that the only columns with nulls is the description columns, indicating that some\n        videos simply have no description input by the user. In this case we will simply replace\n        the nulls with \"No Description\"\n    <\/span>\n    <\/font>\n<\/div>","65e88d7a":"<a id=\"delta\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3.6 Time Passed Since Published\n            <\/span>   \n        <\/font>    \n<\/h3>\n\n We know, by google's criteria, that the age of a video affects the likelihood of it becoming a trending video.<br>\n In this part of the analysis we will check how many days passed since publishing of the video up to the date\n it trended for the first time, as well as its most recent trending date.","c18e4fc3":"<div class=\"alert alert-block alert-info\">\n    <font color = #2D3A39 ; size=4>\n    <span style='font-family:Georgia, Times, Times New Roman'>\n        <b>Insight: <\/b><br>\n        we can see that there is a strong correlation between all the different values (0.5+), and specifically between\nlikes and view_count which is expected - typically users must view a video before liking\/ disliking or commenting on it.<br>\nwe also see a strong correlation between comment_count and likes which indicates that people who like a video are more likely\nto comment on it.\n    <\/span>\n    <\/font>\n<\/div>","0f80530b":"<div>\n    <font color = #2D3A39 ; size=4>\n        <span style='font-family:Georgia, Times, Times New Roman'>\n            Thank you for taking the time to peruse this analysis!<br>\n            It was very interesting to see the different facets of the data and I hope you found it interesting as well!<br>\n            Any feedback is welcome.\n        <\/span> \n    <\/font>\n<\/div>","26bcdcb2":"<a id=\"topcat\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3.1 Overall Top Trending Videos by Likes, Views and Comments\n            <\/span>   \n        <\/font>    \n<\/h3>","4096af26":"<a id=\"data\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            2.2 Import Data\n            <\/span>   \n        <\/font>    \n<\/h3>","5d35a742":"<a id=\"reading\"><\/a>\n<h2>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            2. Reading and Manipulating the Data\n            <\/span>   \n        <\/font>    \n<\/h2>","88e9c2b6":"<a id=\"corr\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3.2 Correlation Between Trending Video Properties\n            <\/span>   \n        <\/font>    \n<\/h3>\n\n We'll use Pearson correlation to examine the relation between likes, dislikes, views, and comments. <br>\n Since we know that some of the videos have comments and\/or likes disabled we will remove them from this part of the analysis","819320dc":"<a id=\"import\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            2.1 Import python Libraries and define functions\n            <\/span>   \n        <\/font>    \n<\/h3>","05cf3fa0":"<a id=\"wordcloud\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3.3 Wordcloud Analysis\n            <\/span>   \n        <\/font>    \n<\/h3>\n\n We want to see which tags appear most in youtube trending videos","970176be":"<div class=\"alert alert-block alert-info\">\n    <font color = #2D3A39 ; size=4>\n    <span style='font-family:Georgia, Times, Times New Roman'>\n        <b>Results:<\/b><br>\n        As we can see, the reasons these videos are not recieved well is sometimes obvious from the title and sometimes rather\n        obscure.<br> I encourage you to check some of these out, it's rather fascinating finding out why they are so hated or controversial! \n    <\/span>\n    <\/font>\n<\/div>\n","7370a777":"<div class=\"alert alert-block alert-info\">\n    <font color = #2D3A39 ; size=4>\n    <span style='font-family:Georgia, Times, Times New Roman'>\n        <b>Insight: <\/b><br>\n           At the time of this analysis: we can see that the top tags are from:<br> gaming (Among Us) and music related tags such as Music Video,\n            and Hip hop.\n    <\/span>\n    <\/font>\n<\/div>\n","b911731a":"<a id=\"disliked\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3.4 Most Disliked or Controversial Trending Videos\n            <\/span>   \n        <\/font>    \n<\/h3>\n\n We want to see which videos were overwhelmingly disliked over liked, which we will call \"Disliked\".<br> \n We also want to look at videos that had a balanced like to dislike ratio which we will call \"Controversial\".","9a742b6c":"<a id=\"repeat\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            3.5 Repeat Trending Videos and Channels\n            <\/span>   \n        <\/font>    \n<\/h3>\n\n While working with the data we've seen that many videos trend multiple times.<br>\n We want to check which videos and which channels trended the most times.","fde0577d":"<a id=\"properties\"><\/a>\n<h3>   \n      <font color = #2D3A39 >\n            <span style='font-family:Georgia'>\n            2.3 Data Properties\n            <\/span>   \n        <\/font>    \n<\/h3>"}}