{"cell_type":{"7437a943":"code","c2d96482":"code","2ef76496":"code","991c8f2c":"code","d647736e":"code","6c55b1f8":"code","5521dbeb":"code","4c82f249":"code","4dcaa7e2":"code","016ed080":"code","f9f67f73":"code","2e8ec197":"code","a8b4ce91":"code","d633b3ce":"code","88ae71ee":"code","5500a781":"code","f7f35627":"code","6ed70fdb":"code","bd52921d":"code","96a031b5":"code","51194e48":"code","0e0d2d1d":"code","9470693c":"code","d201a51a":"code","e210947f":"code","a1615992":"code","77149cf1":"code","d5a773d9":"code","2012cdd8":"code","c96a3389":"code","00b026bc":"code","ce4d572f":"markdown","df37df9d":"markdown"},"source":{"7437a943":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c2d96482":"import matplotlib.pyplot as plt\n%matplotlib inline","2ef76496":"df = pd.read_csv('..\/input\/mall-customers\/Mall_Customers.csv')","991c8f2c":"df.columns  = ['id','gender','age','salary','score']","d647736e":"df.head()","6c55b1f8":"import seaborn as sns\nsns.countplot(x = 'gender',data = df)","5521dbeb":"import plotly.express as px\npx.box(df,y = 'score',x = 'gender',points = 'all')","4c82f249":"px.box(df,y = 'age',x = 'gender',points = 'all')","4dcaa7e2":"sns.distplot(df['age'])","016ed080":"sns.distplot(df['score'])","f9f67f73":"plt.scatter(df['age'],df['score'], s=100, c='red')","2e8ec197":"def flip(x):\n    if(x == 'Male'):\n        return 0\n    else:\n        return 1\ndf['gender'] = df['gender'].apply(lambda x : flip(x))","a8b4ce91":"df.head()","d633b3ce":"df.shape","88ae71ee":"df = df[['gender','age','salary','score']]\nfrom sklearn.model_selection import train_test_split\n","5500a781":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=4)\ny_hc = kmeans.fit_predict(df)","f7f35627":"y_hc","6ed70fdb":"print(kmeans.cluster_centers_.shape)","bd52921d":"print(kmeans.cluster_centers_)","96a031b5":"points = df","51194e48":"plt.scatter(points[y_hc ==0]['age'], points[y_hc ==0]['score'], s=100, c='red')\nplt.scatter(points[y_hc ==1]['age'], points[y_hc ==1]['score'], s=100, c='black')\nplt.scatter(points[y_hc ==2]['age'], points[y_hc ==2]['score'], s=100, c='blue')\nplt.scatter(points[y_hc ==3]['age'], points[y_hc ==3]['score'], s=100, c='cyan')\n","0e0d2d1d":"import scipy.cluster.hierarchy as sch\nfrom sklearn.cluster import AgglomerativeClustering\n","9470693c":"# create dendrogram\ndendrogram = sch.dendrogram(sch.linkage(df, method='ward'))\n# create clusters\nhc = AgglomerativeClustering(n_clusters=4, affinity = 'euclidean', linkage = 'ward')\n# save clusters for chart\ny_hc = hc.fit_predict(df)\n","d201a51a":"from sklearn.mixture import GaussianMixture \ngmm_model = GaussianMixture(n_components = 4).fit(points)\ny_hc = gmm_model.predict(points)","e210947f":"y_hc","a1615992":"plt.scatter(points[y_hc ==0]['age'], points[y_hc ==0]['score'], s=100, c='red')\nplt.scatter(points[y_hc ==1]['age'], points[y_hc ==1]['score'], s=100, c='black')\nplt.scatter(points[y_hc ==2]['age'], points[y_hc ==2]['score'], s=100, c='blue')\nplt.scatter(points[y_hc ==3]['age'],\n            points[y_hc ==3]['score'], s=100, c='cyan')","77149cf1":"import scipy.spatial.distance\nfrom sklearn.cluster import DBSCAN\n","d5a773d9":"can = DBSCAN(eps=7, min_samples=2).fit_predict(df)\n#can = DBSCAN(eps=10, min_samples=2,metric= 'manhattan').fit_predict(df)\n#can = DBSCAN(eps=7, min_samples=2,metric = 'l1').fit_predict(df\n#can = DBSCAN(eps=1, min_samples=2,metric = 'dice').fit_predict(df)","2012cdd8":"len(list(set(can)))","c96a3389":"can","00b026bc":"#clustering for the first eight clusters , -1 means no cluster made for them uptil now.\nplt.scatter(df[can ==0]['age'], df[can == 0]['score'], s=100, c='red')\nplt.scatter(df[can ==-1]['age'], df[can == -1]['score'], s=100, c='black')\nplt.scatter(df[can ==1]['age'], df[can == 2]['score'], s=100, c='blue')\nplt.scatter(df[can ==3]['age'], df[can == 3]['score'], s=100, c='green')\nplt.scatter(df[can ==4]['age'], df[can == 4]['score'], s=100, c='pink')\nplt.scatter(df[can ==5]['age'], df[can == 5]['score'], s=100, c='orange')\nplt.scatter(df[can ==6]['age'], df[can == 6]['score'], s=100, c='grey')\nplt.scatter(df[can ==7]['age'], df[can == 7]['score'], s=100, c='violet')","ce4d572f":"We have three columns of use age ,income ,score.","df37df9d":"Implementing Agglomerative Hierarchical Clustering"}}