{"cell_type":{"99ebe588":"code","385e9f79":"code","f2398035":"code","dd98a32f":"code","7dd637e4":"code","f4f4ea8d":"code","7c568b83":"code","aa2aed3d":"code","38afc6df":"code","0a86eb50":"code","f7dad543":"code","7103b6e4":"code","f7f9028a":"code","71bce746":"code","94f6ac81":"code","77b69075":"code","657e7c45":"code","2890ef97":"code","837a213c":"code","730bf988":"code","0a999be2":"code","9421dc18":"code","30e2876e":"code","c89e45f4":"code","958dc9a1":"code","03e677f3":"code","9b7f2e94":"code","e387d678":"code","978f88c2":"code","838324d3":"code","f29c721b":"code","681933d5":"code","9830a473":"code","a22c2d2d":"code","1f995b00":"code","9c7f08e7":"code","c542a828":"code","b592568c":"code","4a5fb13a":"code","8e5b0cc3":"code","4f97fbf3":"code","9b24074c":"code","0bb46c90":"code","12378338":"code","fbd63fb9":"code","3cf0f524":"code","b7d9132d":"code","20578de5":"code","a623ba08":"code","3c648e54":"code","aad805c7":"code","aecde74f":"code","af0c5d0f":"code","6d25c786":"code","bb9e1d56":"code","dff35e02":"code","7439fabb":"code","463bccd7":"code","0d0d17e4":"code","0e5feb68":"code","2ed4cea1":"code","b5e1b58f":"code","48debd55":"code","fe2d874b":"code","4e3a85d4":"code","1c20e407":"code","9fcc8697":"code","8f453e30":"code","7935e1dd":"code","b36480a1":"code","b6768a9f":"code","8050fa9f":"code","f76f17fe":"code","89abfe3c":"code","374dc5f7":"code","e5274d04":"code","7ffde115":"code","081ea781":"code","5749a8da":"code","26a09c43":"code","09a826df":"code","f95c60c4":"code","11d48bf3":"code","c5bc9554":"code","4fa0832a":"code","1bbf791c":"code","53ec15e2":"code","d1fedc53":"code","03638360":"code","d46cb494":"code","c0071da1":"code","84b9d8f7":"code","b591698c":"code","1ce089fc":"code","5565faab":"code","8e27a212":"code","b7ff1688":"code","47e095a5":"code","20789fc1":"code","6fd64b79":"code","cfff6671":"code","42c6ace5":"markdown","6a7be9db":"markdown","3fffa90a":"markdown","18e46eb4":"markdown","c29c0970":"markdown","58c327bf":"markdown","bfeb0c6c":"markdown","9ad71b8e":"markdown","280499f1":"markdown","e0f97638":"markdown","c4f00f43":"markdown","e9419587":"markdown","6a0e7cd7":"markdown","15674775":"markdown","7bb63d69":"markdown","b94df70d":"markdown","af56575c":"markdown","e0058385":"markdown","941dd090":"markdown","9f152598":"markdown","9af2e060":"markdown","b0cb447c":"markdown","956e3c36":"markdown","740874c0":"markdown","00b27a4c":"markdown","4d01edd7":"markdown","2e62dad0":"markdown","297a00fe":"markdown","bf40da70":"markdown","22c15f2b":"markdown","f5743df7":"markdown","df5ec2aa":"markdown","d3ae399a":"markdown","f329f21b":"markdown","28869a7c":"markdown","f306cd2b":"markdown","27f05e41":"markdown","982638d9":"markdown","77f714d2":"markdown","1df6c2c0":"markdown","a20ca005":"markdown","7bf94328":"markdown","f99566b2":"markdown","57a52e6d":"markdown","b12f5945":"markdown","0733f5f7":"markdown","549a2cc4":"markdown","9bf9f334":"markdown","b7d27bfc":"markdown","9cde8f62":"markdown","2e02634f":"markdown","8d118ea6":"markdown","c65e1e43":"markdown","ad9438f3":"markdown","dd7790a9":"markdown","55cb90b0":"markdown","fd78246e":"markdown","bf638193":"markdown","874b3b67":"markdown","52769012":"markdown","c61f7fce":"markdown","787597cd":"markdown","0e4e5018":"markdown","1d6eb80f":"markdown","8b07b557":"markdown","14d4f7d1":"markdown","4a397140":"markdown","e18fc360":"markdown","25da65d0":"markdown","a134f677":"markdown","3d65ea4e":"markdown","f683d30f":"markdown","37eaccca":"markdown","1bd27fdb":"markdown","4b4ac41a":"markdown","1ecf5811":"markdown","32a1cf82":"markdown","1480e3d7":"markdown","ce916fe3":"markdown"},"source":{"99ebe588":"#to work with dataframes\/tables\nimport pandas as pd\n\n#to work with multidimensional numerical arrays with some maths functions\nimport numpy as np  \n\n#for visualization purpose\nimport matplotlib.pyplot as plt    \nimport seaborn as sns\n\n#regular expression to work with strings\nimport re\n\n#to convert categorical features into numerical features\nfrom sklearn.preprocessing import LabelEncoder\n\n#to split our data set into training set and testing set\nfrom sklearn.model_selection import cross_val_score,train_test_split\n\n#training algorithms\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n# metrics to evaluate our model\nfrom sklearn.metrics import accuracy_score\n\n#to avoid future warnings\nimport warnings\nwarnings.filterwarnings('ignore')","385e9f79":"train=pd.read_csv('..\/input\/titanic\/train.csv') #dataset with labels(survived column)\ntest=pd.read_csv('..\/input\/titanic\/test.csv')  #dataset without labels","f2398035":"train.head()","dd98a32f":"test.head()","7dd637e4":"#setting index column\ntrain=train.set_index('PassengerId')\ntest=test.set_index('PassengerId')","f4f4ea8d":"#checking shapes of training & testing set\nprint('Training set has {} rows\/observations and {} features\/columns'.format(train.shape[0],train.shape[1]))\nprint('Testing set has {} rows\/observations and {} features\/columns'.format(test.shape[0],test.shape[1]))","7c568b83":"#checking for null values\nprint('Nulls in training set\\n\\n',train.isna().sum())\nprint('********************************')\nprint('\\nNulls in testing set\\n\\n',test.isna().sum())","aa2aed3d":"df=pd.concat([train,test],axis=0,sort=False)","38afc6df":"print(df.shape)","0a86eb50":"print(df.isna().sum())","f7dad543":"df1=df.copy()","7103b6e4":"df1_train=df1.loc[train.index]\ndf1_test=df1.loc[test.index]","f7f9028a":"#checking survival rate distribution group by Sex and Pclass\npd.pivot_table(df1_train,index=['Sex'],columns=['Pclass'],values=['Survived'],aggfunc='mean')","71bce746":"#extracting title from name\ndf1_train['title']=df1_train['Name'].apply(lambda x:re.split('[.,]',x)[1].strip())\n\ndf1_test['title']=df1_test['Name'].apply(lambda x:re.split('[.,]',x)[1].strip())","94f6ac81":"df1_train['title'].value_counts()","77b69075":"df1_test['title'].value_counts()","657e7c45":"#checking Survival rate group by title,Sex and Pclass\npd.pivot_table(df1_train,index=['Sex','title'],columns=['Pclass'],values=['Survived'])","2890ef97":"#creating new feature for title==Master\ndf1_train['Master']=df1_train['title']=='Master'\n\ndf1_test['Master']=df1_test['title']=='Master'","837a213c":"# a female can be a single mom or a girl if she has no sibling\/spouse and 1 parent\/child\ndf1_train['girlOrSingleMum']=(df1_train['Sex']=='female')&(df1_train['SibSp']==0)&(df1_train['Parch']==1)\n\ndf1_test['girlOrSingleMum']=(df1_test['Sex']=='female')&(df1_test['SibSp']==0)&(df1_test['Parch']==1)","730bf988":"pd.pivot_table(df1_train,index=['girlOrSingleMum'],columns=['Sex','Pclass'],values=['Survived'])","0a999be2":"#checking Survival rate group by Embarked, Sex and Pclass\npd.pivot_table(df1_train,columns=['Embarked'],index=['Sex','Pclass'],values=['Survived'])","9421dc18":"#creating new feature on the basis of above info\ndf1_train['Fembarked_Q']=(df1_train['Sex']=='female')&(df1_train['Embarked']=='Q')&(df1_train['Pclass']==3)\n\ndf1_test['Fembarked_Q']=(df1_test['Sex']=='female')&(df1_test['Embarked']=='Q')&(df1_test['Pclass']==3)","30e2876e":"df1_train.Ticket.nunique()","c89e45f4":"df1_train.columns","958dc9a1":"x=df1_train.drop(['Survived','Name','SibSp','Parch','Ticket','Fare','Age','Cabin','title'],axis=1)\ndf1_test=df1_test.drop(['Survived','Name','SibSp','Parch','Ticket','Age','Fare','Cabin','title'],axis=1)","03e677f3":"x.head()","9b7f2e94":"y=df1_train['Survived']","e387d678":"le=LabelEncoder()\nx['Master']=le.fit_transform(x['Master'])\nx['girlOrSingleMum']=le.fit_transform(x['girlOrSingleMum'])\nx['Fembarked_Q']=le.fit_transform(x['Fembarked_Q'])\n\ndf1_test['Master']=le.fit_transform(df1_test['Master'])\ndf1_test['girlOrSingleMum']=le.fit_transform(df1_test['girlOrSingleMum'])\ndf1_test['Fembarked_Q']=le.fit_transform(df1_test['Fembarked_Q'])","978f88c2":"#Creating dummy columns\nx=pd.get_dummies(x,drop_first=True)\ndf1_test=pd.get_dummies(df1_test,drop_first=True)","838324d3":"x.head()","f29c721b":"df1_test.head()","681933d5":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","9830a473":"dt=DecisionTreeClassifier()\n\ndt.fit(x_train,y_train)\n\ny_pred=dt.predict(x_test)\nprint('Testing accuracy ',accuracy_score(y_test,y_pred))\n\nypred=dt.predict(x_train)\nprint('training accuracy ',accuracy_score(y_train,ypred))\n\nscore=cross_val_score(dt,x,y,cv=5)\nprint('\\nCross validation scores \\n',score)\nprint('\\n',score.mean())","a22c2d2d":"#training our model for all the observations\ndt.fit(x,y)","1f995b00":"prediction=dt.predict(df1_test).astype('i')","9c7f08e7":"dft=pd.read_csv('..\/input\/titanic\/test.csv')","c542a828":"pred_file1=pd.DataFrame({'PassengerId':dft['PassengerId'],\n                       'Survived':prediction})","b592568c":"pred_file1.head()","4a5fb13a":"plt.figure(figsize=(10,8))\nsns.heatmap(df.corr(),annot=True,cmap='RdYlBu',annot_kws={'size':14})","8e5b0cc3":"#median age of different pclass according to sex\ndf.groupby(['Sex','Pclass']).Age.median()","4f97fbf3":"df['Age']=df.groupby(['Sex','Pclass'])['Age'].apply(lambda x:x.fillna(x.median()))","9b24074c":"df[df.Fare.isna()]","0bb46c90":"df['Fare']=df.groupby(['Pclass','SibSp','Parch'])['Fare'].apply(lambda x:x.fillna(x.median()))","12378338":"df[df.Embarked.isna()]","fbd63fb9":"df['Embarked']=df['Embarked'].fillna('S')","3cf0f524":"plt.figure(figsize=(20,4))\nsns.countplot(df.Cabin)","b7d9132d":"sns.heatmap(df.isnull(),yticklabels=False,cmap='viridis')","20578de5":"#Creating a new feature to extract deck data from Cabin\n#later, we can drop the Cabin column\ndf['deck']=df['Cabin'].apply(lambda x:x[0] if pd.notnull(x) else 'M')","a623ba08":"plt.figure(figsize=(5,10))\nsns.countplot(data=df,x='deck',hue='Pclass')","3c648e54":"pd.crosstab(df['deck'],df['Pclass'])","aad805c7":"#checking survival rate deck-wise\nsns.countplot(data=df,x='deck',hue='Survived')","aecde74f":"df['deck']=df['deck'].replace(['A','B','C','T'],'ABC')\ndf['deck']=df['deck'].replace(['G','F'],'GF')\ndf['deck']=df['deck'].replace(['D','E'],'DE')\n\ndf['deck'].value_counts()","af0c5d0f":"df.isna().sum()","6d25c786":"plt.figure(figsize=(8,5))\nx1=sns.distplot(df[df['Survived']==0]['Fare'],color='#e74c3c',label='not survived')\nsns.distplot(df[df['Survived']==1]['Fare'],color='#2ecc71',ax=x1,label='survived')\nx1.legend(loc='upper right',prop={'size':15})","bb9e1d56":"plt.figure(figsize=(6,4))\nx1=sns.distplot(df[df['Survived']==0]['Age'],color='#e74c3c',label='not survived')\nsns.distplot(df[df['Survived']==1]['Age'],color='#2ecc71',ax=x1,label='survived')\nx1.legend(loc='upper right',prop={'size':15})","dff35e02":"cat_features = ['Embarked', 'Parch', 'Pclass', 'Sex', 'SibSp', 'deck']\n\nplt.figure(figsize=(10,10))\n\nfor i, feature in enumerate(cat_features):    \n    plt.subplot(2, 3, i+1)\n    sns.countplot(x=feature, hue='Survived', data=df)\n    plt.title(feature)\n    plt.tight_layout()\n\nplt.show()","7439fabb":"#binning Fare - this feature has higher survival rate on right tail\n# Also binning helps in dealing with the outliers\ndf['Fare']=pd.qcut(df['Fare'],13)","463bccd7":"plt.figure(figsize=(10,4))\nsns.countplot(data=df,x='Fare',hue='Survived')\nplt.xticks(rotation=45);","0d0d17e4":"# binnig Age - binning age for the same reason as fare\n# Age feature has higher survival rate on the left tail\ndf['Age']=pd.qcut(df['Age'],10)","0e5feb68":"plt.figure(figsize=(10,4))\nsns.countplot(data=df,x='Age',hue='Survived')\nplt.xticks(rotation=45);","2ed4cea1":"# creating new feature using Sibsp and Parch, as they have simlilar characteristics\ndf['Family']=df['SibSp']+df['Parch']","b5e1b58f":"sns.countplot(df['Family'])","48debd55":"sns.countplot(data=df,x='Family',hue='Survived')","fe2d874b":"#binning Family as they have different Survival rate in different ranges\nmapping={0:'alone',1:'small',2:'small',3:'small',4:'medium',5:'medium',6:'large',7:'large',10:'large'}\ndf['Family_type']=df['Family'].map(mapping)","4e3a85d4":"sns.countplot(df['Family_type'])","1c20e407":"sns.countplot(data=df,x='Family_type',hue='Survived')","9fcc8697":"df['Ticket_shared']=df.groupby('Ticket')['Ticket'].transform('count')","8f453e30":"sns.countplot(df['Ticket_shared'],hue=df['Survived'])","7935e1dd":"df['Title']=df['Name'].apply(lambda x:re.split(r'[.,]',x)[1].strip() )","b36480a1":"df['Title'].value_counts()","b6768a9f":"plt.figure(figsize=(15,6))\nsns.countplot(df['Title'])","8050fa9f":"df['Title']=df['Title'].replace(['Miss','Ms','Lady','Dona','Mme','Mlle','the Countess'],'ladies')\ndf['Title']=df['Title'].replace(['Dr','Col','Major','Jonkheer','Capt','Sir','Don','Rev'],'others')","f76f17fe":"plt.figure(figsize=(10,6))\nsns.countplot(df['Title'])","89abfe3c":"# creating Lastname feature\ndf['Lastname']=df['Name'].apply(lambda x:re.split(r'[.,]',x)[0].strip() )","374dc5f7":"df_train=df.loc[train.index]\ndf_test=df.loc[test.index]","e5274d04":"# creating list of common surname present in both training and test set\ncommon_lastname=[x for x in df_train['Lastname'].unique() if x in df_test['Lastname'].unique()]\n\n#Median Survival rate from training set group by Lastname\ntrain_lastname_survival_rate=df_train.groupby(['Lastname','Family'])['Survived'].median()\n\n\ncommon_lastname_survival_rate={}\n\nfor i in range(len(train_lastname_survival_rate)):\n    \n    if train_lastname_survival_rate.index[i][0] in common_lastname and train_lastname_survival_rate.index[i][1]>0:\n        \n        common_lastname_survival_rate[train_lastname_survival_rate.index[i][0]]=train_lastname_survival_rate.iloc[i]","7ffde115":"common_ticket=[x for x in df_train['Ticket'].unique() if x in df_test['Ticket'].unique()]\n\ntrain_ticket_survival_rate=df_train.groupby(['Ticket','Ticket_shared'])['Survived'].median()\n\ncommon_ticket_survival_rate={}\n\nfor i in range(len(train_ticket_survival_rate)):\n    \n    if train_ticket_survival_rate.index[i][0] in common_ticket and train_ticket_survival_rate.index[i][1]>1:\n        \n        common_ticket_survival_rate[train_ticket_survival_rate.index[i][0]]=train_ticket_survival_rate.iloc[i]","081ea781":"mean_survival_rate=np.mean(df_train['Survived'])\n\ntrain_lastname_survival_rate=[]\ntrain_lastname_survival_rate_NA=[]\n\nfor i in range(len(df_train)):\n    \n    if df_train['Lastname'].iloc[i] in common_lastname_survival_rate:\n        \n        train_lastname_survival_rate.append(common_lastname_survival_rate[df_train['Lastname'].iloc[i]])\n        train_lastname_survival_rate_NA.append(1)\n        \n    else:\n        \n        train_lastname_survival_rate.append(mean_survival_rate)\n        train_lastname_survival_rate_NA.append(0)\n\ndf_train['lastname_survival_rate']=train_lastname_survival_rate\ndf_train['lastname_survival_rate_NA']=train_lastname_survival_rate_NA","5749a8da":"test_lastname_survival_rate=[]\ntest_lastname_survival_rate_NA=[]\n\nfor i in range(len(df_test)):\n    \n    if df_test['Lastname'].iloc[i] in common_lastname_survival_rate:\n        \n        test_lastname_survival_rate.append(common_lastname_survival_rate[df_test['Lastname'].iloc[i]])\n        test_lastname_survival_rate_NA.append(1)\n        \n    else:\n        \n        test_lastname_survival_rate.append(mean_survival_rate)\n        test_lastname_survival_rate_NA.append(0)\n        \ndf_test['lastname_survival_rate']=test_lastname_survival_rate\ndf_test['lastname_survival_rate_NA']=test_lastname_survival_rate_NA","26a09c43":"train_ticket_survival_rate=[]\ntrain_ticket_survival_rate_NA=[]\n\nfor i in range(len(df_train)):\n    \n    if df_train['Ticket'].iloc[i] in common_ticket_survival_rate:\n        \n        train_ticket_survival_rate.append(common_ticket_survival_rate[df_train['Ticket'].iloc[i]])    \n        train_ticket_survival_rate_NA.append(1)\n        \n    else:\n        \n        train_ticket_survival_rate.append(mean_survival_rate)\n        train_ticket_survival_rate_NA.append(0)\n        \ndf_train['ticket_survival_rate']=train_ticket_survival_rate\ndf_train['ticket_survival_rate_NA']=train_ticket_survival_rate_NA","09a826df":"test_ticket_survival_rate=[]\ntest_ticket_survival_rate_NA=[]\n\nfor i in range(len(df_test)):\n    \n    if df_test['Ticket'].iloc[i] in common_ticket_survival_rate:\n        \n        test_ticket_survival_rate.append(common_ticket_survival_rate[df_test['Ticket'].iloc[i]])    \n        test_ticket_survival_rate_NA.append(1)\n        \n    else:\n        \n        test_ticket_survival_rate.append(mean_survival_rate)\n        test_ticket_survival_rate_NA.append(0)\n        \ndf_test['ticket_survival_rate']=test_ticket_survival_rate\ndf_test['ticket_survival_rate_NA']=test_ticket_survival_rate_NA","f95c60c4":"for table in [df_train,df_test]:\n    \n    table['survival_rate']=(table['lastname_survival_rate']+table['ticket_survival_rate'])\/2\n    table['survival_rate_NA']=(table['lastname_survival_rate_NA']+table['ticket_survival_rate_NA'])\/2","11d48bf3":"df=pd.concat([df_train,df_test],axis=0,sort=False)","c5bc9554":"df.columns","4fa0832a":"df.drop(['Name','SibSp','Parch','Cabin','Ticket','Family','Lastname',\n         'lastname_survival_rate','lastname_survival_rate_NA',\n         'ticket_survival_rate','ticket_survival_rate_NA'],axis=1,inplace=True)","1bbf791c":"df['Age']=le.fit_transform(df['Age'])\ndf['Fare']=le.fit_transform(df['Fare'])","53ec15e2":"df=pd.get_dummies(df,drop_first=True)","d1fedc53":"df.head()","03638360":"df_train=df.loc[train.index]\ndf_test=df.loc[test.index]\ndf_test.drop('Survived',axis=1,inplace=True)","d46cb494":"x=df_train.drop('Survived',axis=1)\ny=df_train['Survived']","c0071da1":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","84b9d8f7":"sbm = RandomForestClassifier(criterion='gini', \n                                           n_estimators=1100,\n                                           max_depth=5,\n                                           min_samples_split=4,\n                                           min_samples_leaf=5,\n                                           max_features='auto',\n                                           oob_score=True,\n                                           n_jobs=-1)\n\nsbm.fit(x_train,y_train)\n\ny_pred=sbm.predict(x_test)\nprint('Accuracy Score: ',accuracy_score(y_test,y_pred))\n\nypred=sbm.predict(x_train)\nprint('training accuracy: ',accuracy_score(y_train,ypred))\n\nscore=cross_val_score(sbm,x,y,cv=5)\nprint('\\nCross validation score :\\n',score)\nprint('\\nMean cross validation score: ',score.mean())","b591698c":"#Training the with with complete data\nsbm.fit(x,y)","1ce089fc":"prediction=sbm.predict(df_test)","5565faab":"pred_file2=pd.DataFrame({'PassengerId':dft['PassengerId'],\n                       'Survived':prediction})\n\npred_file2['Survived']=pred_file2['Survived'].astype('i')","8e27a212":"pred_file2.head()","b7ff1688":"#importing gender_submission file\npred_file3=pd.read_csv('..\/input\/titanic\/gender_submission.csv')\npred_file3.head()","47e095a5":"df_ensemble=pred_file1.copy()","20789fc1":"x='Survived'\nx1=0.3\nx2=0.3\nx3=0.4","6fd64b79":"df_ensemble[x]=x1*pred_file1[x]+x2*pred_file2[x]+x3*pred_file3[x]\ndf_ensemble[x]=df_ensemble[x].apply(lambda y : 1 if y>=0.5 else 0)\ndf_ensemble.head()","cfff6671":"df_ensemble.to_csv('ensemble(top3).csv',index=False)","42c6ace5":"## 5. Ensemble","6a7be9db":"There are lots of null values in this column, so we have two options\n- to drop this column\n\n**OR**\n- to replace Null values with a category 'M' means missing\nSince this feature can be related to survival rate, I will go with the second option.\nAlso, the first letter of the **Cabin** name represents the deck name","3fffa90a":"- **Survived** column has null values because there is no survived column in testing set","18e46eb4":"Dropping the following features :\n- **Name** - **Title** is extracted from this feature\n- **Cabin** - **deck** is extracted from this feature\n- **SibSp, Parch and Family** - **Family_type** is extracted from this feature\n- **Ticket, Lastname** - **survival_rate** is created from this feature\n- **lastname_survival_rate, ticket_survival_rate** - **survival_rate** is created from this feature.\n- **lastname_survival_rate_NA, ticket_survival_rate_NA** - **survival_rate_NA** is created from this feature","c29c0970":"## 3. Approach 1","58c327bf":"### 4.6 Model Selection","bfeb0c6c":"As ticket has too many unique values, creating new feature such as ticket_shared can help to identify the groups of people who travelled together","9ad71b8e":"### 3.4 Model selection","280499f1":"## 4. Approach 2","e0f97638":"- **Age** & **Fare** are highly correlated to **Pclass**","c4f00f43":"- Ticket column has too many unique values so we may need to drop this","e9419587":"## 2. Importing datasets","6a0e7cd7":"- **Females** of **class 3** has higher survival rate who **embarked** from **Q**","15674775":"Similarly, **train_ticket_survival_rate** is calculated with the help of **Ticket** feature","7bb63d69":"#### Continuous Features","b94df70d":"### 4.2 Feature Engineering","af56575c":"# Titanic - Machine Learning from Disaster","e0058385":"### Exploratory Data Analysis","941dd090":"Now we will take mean of **ticket_survival_rate** and **lastname_survival_rate** to create a single **survival_rate** column. Similarly for **survival_rate_NA**","9f152598":"So far we have created dictionaries of **common_lastname_survival_rate**, which contains common **lastname** as keys, and survival rate as their values. Now we need to create a new feature called as **train_lastname_survival_rate** by mapping survival rate values with their corresponding **lastname**.For **Lastname** which do not exist in the **common_lastname_survival_rate** dictionary, we will use mean value of survival rate.","9af2e060":"### 3.2 Feature Selection","b0cb447c":"#### If you have any suggestion or question, please feel free to leave it in the comment section.","956e3c36":"### 4.4 Feature Selection","740874c0":"This notebook will use ensemble method to give the predictions. First, a model will be created using a decision tree without any hyperparameter tuning. Then a second model will be created using random forest classifier with some optimized parameters. Than the output of these 2 models will be ensembled with the gender_submission.csv file to give the final output.","00b27a4c":"- Survival rate is higher at the left tail, that means survival rate is higher for young people","4d01edd7":"<img src='https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/1446111\/2391878\/southampton.png?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20210703%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210703T154125Z&X-Goog-Expires=345599&X-Goog-SignedHeaders=host&X-Goog-Signature=a7d8479da3e561835827932bbd86b67aff3995dd34af837a0f7bc46d7cf086596e8f67df258b6af2a0f4ec0aad398b5dbd64a4251051f208cede4b4bdaae16e7431dc15b6d3c5c110cf82525d3619e6ef274ce703350cd910be2b8c73430da0507e92a9ca0f39ffc1485f0bdbe4eb3d9872777e3790070172ba0ecc84de60d1bcedc8d1b324e0a023b90d5db6d3aa6d9b364e7d2e346878fb7bc2026d9a5192587349b104cad6ac026d705793a4a18947fdeb5b4639ccf1771cae18db077cb1121a1de32cbec16aec72c6f1a948aa5502a804ea85b88317b4e78720d58a35ad63af5da241c912e2d8edc2c973ce4861c87bfb8c4a238df71cfb29640fcbe1d6d'>","2e62dad0":"A new feature is created with the help of Target\/y_label. This is done by looking for categorical features which have high cardinality(**Ticket, Lastname**). Now in these features, look for the categories which are common in both training and test set. Then survival rate is calculated for these categories in training set with the help of y_label and since these categories are common in testing set as well, same value is used in testing set for these common categories.","297a00fe":"#### Embarked","bf40da70":"- Survival rate of **girlsOrSingleMum** of class 3 is better than those who are not **girlOrSingleMums**","22c15f2b":"- Survival rate of **Master** is 100% in class 1 and 2\n- Either the survival rate is poor for other male titles or the count is very less\n- Survival rate of **Miss and Mrs** is higher in class and 1 and 2\n- Remaining other categories are very small in number.","f5743df7":"similarly, this is done for testing set","df5ec2aa":"## 1. Importing libraries","d3ae399a":"- There are lots of unique values(High Cardinality) in **Cabin** so it will be difficut to impute null values","f329f21b":"Also, an additional feature called as **train_lastname_survival_rate_NA** will be used. This will be set to **1** for those having common **lastname** in **train** and **test** set, and **0** for those who dont have common **lastname** in both the sets. This feature will help to proiritize those survival rates which are calculated from common **lastname**","28869a7c":"Testing score of this model is : **79.90%**","f306cd2b":"Similarly **train_ticket_survival_rate** and **train_ticket_survival_rate_NA** is created for both training and test set","27f05e41":"- Fare feature is right skewed because of outliers\n- Fare feature has higher survival rate on tail side, that means people with very high fare have higher survival rate","982638d9":"### 3.1 Creating pivot tables or cross tables","77f714d2":"### 3.3 Label Encoding","1df6c2c0":"### 4.5 Label Encoding","a20ca005":"**lastname** feature is created by extracting surname from **Name** feature. Then, a list : **common_lastname** is created containing surnames which are present in both training and test set.","7bf94328":"Since **Age** is highly correlated with **Pclass**, we will impute null values of age with median age, group by different **Pclass** and with different **Sex**","f99566b2":"Extracting title to get some more information like is there any special title who get priority for survival or about the marrital status of women","57a52e6d":"### Imputing missing values","b12f5945":"- **Miss, Ms, Mlle, Lady, Mme, the Countess, Dona** are all females so they will be grouped together\n- **Mlle, Mme and Dona** are names but categorized as title because of our function used to extract title\n- **Mrs** are married woman\n- **Dr, Col, Major, Jonkheer, Capt, Sir, Don and Rev** are grouped together because of similar characteristics\n- **Master** are the males below age 26. They have high Survival rate","0733f5f7":"Our Model for this approach will be a tuned **RandomForestClassifier**","549a2cc4":"#### Decision Tree","9bf9f334":"In this approach, we will create some new features and develop our first model on the basis of those features.\n\nOur first model will be DecisionTreeClassifier","b7d27bfc":"#### Cabin","9cde8f62":"- **deck B, C, D and E** have higher survival rate","2e02634f":"**Embarked** column has only 2 missing values","8d118ea6":"**train_lastname_survival_rate** is calculated from training set as **Survived** column is only present in training set. This is done by extracting median Survival rate for family>0 by grouping training data by lastname. Then this survival rate will be mapped to the testing set for the **common lastname** in both the sets.","c65e1e43":"**image reference**  : <a href=\"https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/martha-evelyn-stone.html\">Embarked info of Mrs Stone<\/a>","ad9438f3":"### 4.1 Exploratory Data Analysis","dd7790a9":"### Correlation","55cb90b0":"- **Females** have higher Survival rate in class 1 and 2\n- Survival rate of **Males** is poor irrespective of their class","fd78246e":"####  Age","bf638193":"- Both the passengers have same **Ticket** number, **Fare** & **Cabin** number\n- After searching on the web, it can be found that both of these passengers **Embarked** from Southampton","874b3b67":"#### concatenating both the datasets\n   - As train and test data are both could be from different samples, combining them can give the whole distribution\n   - This will help us to deal with missing values in a better way","52769012":"- This feature has similar characteeristics of Family feature","c61f7fce":"###  Shape of the data","787597cd":"**References**  : \n\n- <a href=\"https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial\">Titanic-Advanced Feature Engineering Tutorial<\/a>\n- <a href=\"https:\/\/www.kaggle.com\/stever4\/titanic-top-5-0-8-with-simple-rules-no-ml\">Titanic: Top 5% (>0.8) with simple rules (no ML)<\/a>\n- <a href=\"https:\/\/www.kaggle.com\/imoore\/titanic-the-only-notebook-you-need-to-see\">Titanic-The Only Notebook You Need To See<\/a>","0e4e5018":"There is only one null value in fare column","1d6eb80f":"#### Train test split","8b07b557":"<img src='https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/1446111\/2391878\/titanic.jpg?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=databundle-worker-v2%40kaggle-161607.iam.gserviceaccount.com%2F20210703%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20210703T154145Z&X-Goog-Expires=345599&X-Goog-SignedHeaders=host&X-Goog-Signature=794ff57af6f90377b9ac831a658af6e120729e6bdf7f000d743df3d393b04e82fbecac893606401b6d8821fbc5b77a4b417234d3afc3b721335985479f594df519deb946f65bff946d699921c0cf5dde6df3e49ab2c1191ffbb79320332c08f7f1aa258ca12ef8baa3ff928c5a5716e31e2428372f8eaacc5e942d1e187feb3cde307e24a5b077d8144ebc1aacd844862cec7924d2bf03268eda1a768a6a2e25111e4d85e206f621701fc6766dfaaca0be544ab986db0c3f2896fa99e074dbb7fb74eedd762abea3d0133d096778cc26f7ef3631a3f80bb8465c99086a9ba67ec01b155f103aef08c47ec2856fb091ba16ef2be48d0b627edd9621c213368add'>","14d4f7d1":"### Final Model:\n- **Females** of **class 1 and 2** have higher survival rate\n- **Females** of **class 3** have higher survival rate who **Embarked** from **Q**\n- Girls or Single mothers have higher survival rate\n- Those with the title **Master** have higher survival rate","4a397140":"Since **Fare** is highly correlated with **Pclass** and assuming **Fare** is also correlated with family size, we will impute null **Fare** with median **Fare** of **Male** of **Pclass** 3 with no family(**SIbSp, Parch** = 0)","e18fc360":"### 4.3 Target Encoding","25da65d0":"#### Fare","a134f677":"Merging categories with similar characteristics into single category \n- Merging **A, B, C and T** in **ABCT** as all these decks belong to first class\n- Merging **D and E** in **DE** as both of them have similar survival rate and similar **Pclass** distribution\n- Merging **G and F** in **GF** because of the same reason","3d65ea4e":"- people **Embarked** from **southampton** have low survival rate\n- **Sibsp and Parch** have similar plots.people with either **no family** member or **more than 2 Sibsp\/Parch** have low survival rate\n- people from **Pclass** 3 have low survival rate\n- **Females** have high Survival rate\n- Survival rate is lowest for the **Missing(M)** values","f683d30f":"In this approach, we will create some new features and also use target encoding to build our model.\n\nTarget encoding is used to create some new features on the basis of target(y_label). Although it is not a usual practice in real life projects, but it is very common in kaggle competitions.\n\nFinally we will train RandomForestClassifier from our modified data.","37eaccca":"###  Missing Values","1bd27fdb":"- Triaing set has missing values in **Age, Cabin** & **Embarked** columns\n- Testing set has missing values in **Age, Fare** & **Cabin** columns","4b4ac41a":"Based on the above model following features will be selected :\n   - **Pclass, Sex & Embarked**\n   \nNew features created :\n   - **Master, girlOrSingleMum, Fembarked_Q**","1ecf5811":"#### This model gives 78.9% accuracy on testing set","32a1cf82":"Points that can be inferred from the above two plots\n- **A, B, C & T** decks belong to first **Pclass** people\n- Deck **D** has **40** people from **first Pclass** and **6** from **second Pclass**\n- Deck **E** has **34** people from **first Pclass**, **4** from **second Pclass** and **3** from **third Pclass**\n- Deck **F** has **13** people from **second Pclass** and **8** people from **third Pclass**\n- **G** deck has people from **third Pclass**\n- people with missing **Cabin\/deck** values are mostly from **third Pclass**","1480e3d7":"#### Categorical Features","ce916fe3":"- family size=0 have low survival rate\n- family size=1,2,3 have high survival rate\n- family size=4,5 have low survival rate\n- family size=6,7,10 have very low survival rate"}}