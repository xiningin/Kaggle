{"cell_type":{"6240bf79":"code","5121607f":"code","cf3bdff7":"code","af8fc282":"code","20b4812a":"code","e6f987f2":"code","4479f6f8":"code","3aa02be3":"code","43b38284":"code","e9d3b8b4":"code","4a3c878d":"code","e3f1f3aa":"code","40312f7d":"code","510f901a":"code","bbbccf74":"code","58522167":"code","dcf09e5c":"code","e17ae33d":"code","09d8446f":"code","f4d70374":"code","123b26b9":"code","1eea8684":"code","ec261ebf":"code","10dbb4d5":"code","3137451f":"code","922cdd91":"code","b03f2eaa":"code","68fd84c0":"code","ad28b6d6":"code","1f5eb924":"code","3f5438d6":"code","ba834f24":"code","45bb8546":"code","4da1a2a2":"code","1aca2c6b":"code","bbdb4fc7":"code","6ec7e7cd":"code","6511762c":"code","480f71ce":"code","f284d51b":"code","10299038":"code","4a113a5f":"code","30d75084":"code","61a5b7ce":"code","4f8a2eec":"code","b821311c":"code","080fb554":"code","1870493b":"code","6d98996b":"code","2c845185":"code","0389df48":"code","bf153a38":"code","d02c2f53":"code","e9649b6f":"code","01b2ac27":"code","1c0523c1":"code","9f129763":"code","9f211f76":"code","474a4a52":"code","ef929d66":"code","a4eb5b20":"code","249ff2c8":"code","7751c0f9":"code","a157cc8d":"code","2d5ac2ca":"code","78ca27de":"code","b912a75d":"code","1b086c50":"code","28636a2a":"code","e8099147":"code","9473a07f":"code","074ebfec":"code","70baad89":"code","8cf4de20":"code","0d2d3c5e":"code","fe924ec7":"code","e630bf1a":"code","8cd12a29":"code","069b87f4":"code","071da7d1":"code","42df6e70":"code","683c38bc":"code","15097681":"code","8613418f":"code","2d066caf":"code","671d7c95":"code","b7597b24":"code","17c9ff0d":"code","61038da2":"code","92f97bcb":"code","89fdf6f5":"code","e76a5a4a":"code","1f53a809":"code","9e29defb":"code","623e3e20":"code","5e9b8355":"code","9e91677f":"code","55a65e1c":"code","59afd793":"code","28d8fe3f":"code","809bdf1b":"code","e41eada9":"code","8dc94d00":"code","d38c1b30":"code","19084573":"code","3636e5db":"code","78a14319":"code","41ca67f3":"code","7e244931":"code","f4f1a7ca":"code","32f1cb9d":"code","99ae3c3b":"code","f8e3210d":"code","3c1606f1":"code","cc660c8c":"code","df6c1b9e":"code","c2524b56":"code","0cd9c399":"code","88cd05dc":"code","1b0c50ee":"code","fb1fd6a1":"code","62ff0a2c":"code","1c567024":"code","11b3dc2b":"code","d4fce8fa":"code","0b681c54":"code","5002b81e":"code","082043e6":"code","bea1bbe1":"code","bffa896b":"code","f9cabd3a":"code","13fce59e":"code","f445dd30":"code","6fe9bae0":"code","fd8f397c":"code","a2242afb":"code","8cf75f8e":"code","9f2ece5f":"code","af38ea97":"code","9c89ebb3":"code","92d73b81":"code","f2ed7be3":"code","b93feb1a":"code","06dcbc6a":"code","946756f0":"code","7e9bb9b8":"code","eacf28ed":"code","7d72f212":"code","95c71d4a":"code","50713d30":"code","d4ea9861":"code","98642ad3":"code","8aedf9ad":"code","cb946b71":"code","8bb222aa":"code","a1eb1846":"code","21aa5f79":"code","bad5faa6":"code","32a5d12f":"code","30411510":"code","73457527":"markdown","a9f4f468":"markdown","86a47810":"markdown","49b2edd9":"markdown","074db286":"markdown","98b346c2":"markdown","49d3dee8":"markdown","17e8092e":"markdown","bd038e25":"markdown","82c83426":"markdown","8c21d4fb":"markdown","0334a24b":"markdown","0b8d5213":"markdown","e640c190":"markdown","0668799a":"markdown","4a9c6e73":"markdown","059c9aa1":"markdown","41c92eeb":"markdown","52d6808c":"markdown","a65b7d3f":"markdown","807e59b8":"markdown","b8523ca4":"markdown","78bf405e":"markdown","9b8a7455":"markdown","a67b122c":"markdown","f234d9d0":"markdown","54c5fbed":"markdown","5564fb8b":"markdown","8233bf3f":"markdown","c505c3f1":"markdown"},"source":{"6240bf79":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.preprocessing import scale \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn import neighbors\nfrom sklearn.svm import SVR\nimport xgboost\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n","5121607f":"from warnings import filterwarnings\nfilterwarnings('ignore')","cf3bdff7":"hitters = pd.read_csv('..\/input\/hitters-baseball-data\/Hitters.csv')\nhitters.head()","af8fc282":"hitters.info()","20b4812a":"hitters.isnull().sum()","e6f987f2":"dummies = pd.get_dummies(hitters[['League', 'Division', 'NewLeague']]) \ndummies.head()","4479f6f8":"X_ = hitters.drop(['League', 'Division', 'NewLeague'], axis=1).astype('float64') \n\nhitters = pd.concat([X_, dummies[['League_N', 'Division_W', 'NewLeague_N']]], axis=1) \n\nhitters.info()","3aa02be3":"hitters.describe().T","43b38284":"df_1 = hitters.dropna()\ndf_1.head()","e9d3b8b4":"df_1.info()","4a3c878d":"df = hitters.copy()\ndf['Salary'].fillna(df['Salary'].mean(), inplace = True) \ndf_2 = df.copy()\ndf_2.info()","e3f1f3aa":"hitters.head()","40312f7d":"null = hitters[hitters['Salary'].isnull()] #Eksik veri bar\u0131nd\u0131ran g\u00f6zlemlerin se\u00e7ilmesi\nnull.head()","510f901a":"df = hitters.dropna() #Eksik veri bar\u0131nd\u0131ran g\u00f6zlemlerin silinmesi\nX_train = df.drop('Salary', axis = 1) #Train setinin tan\u0131mlanmas\u0131\nX_train.head()","bbbccf74":"y_train = df[['Salary']] #Train setinin ba\u011f\u0131ml\u0131 de\u011fi\u015fkeninin belirlenmesi\ny_train.head()","58522167":"X_test = null.drop('Salary', axis = 1) # Veri setindeki eksik veri bar\u0131nd\u0131ran g\u00f6zlemlerin test seti olarak tan\u0131mlanmas\u0131\nX_test.head()","dcf09e5c":"gbm_model = GradientBoostingRegressor().fit(X_train, y_train)\ngbm_model_pred_test = gbm_model.predict(X_test)\ngbm_model_pred_test","e17ae33d":"X_test['Salary'] = gbm_model_pred_test","09d8446f":"df_3 = pd.concat([df, X_test], ignore_index = True)\ndf_3.head()","f4d70374":"df_3.info()","123b26b9":"df_3.describe().T","1eea8684":"df_3.info()","ec261ebf":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df_3)\ndf_scores = clf.negative_outlier_factor_\ndf_scores[0:20]","10dbb4d5":"np.sort(df_scores)\n","3137451f":"np.sort(df_scores)[16]","922cdd91":"esik_deger = np.sort(df_scores)[16]\nesik_deger","b03f2eaa":"aykiri_df = df_scores > esik_deger\n","68fd84c0":"df_3[df_scores == esik_deger]\n","ad28b6d6":"baski_degeri = df_3[df_scores == esik_deger]","1f5eb924":"aykirilar = df_3[~aykiri_df] \n","3f5438d6":"aykirilar.to_records(index=False)","ba834f24":"res = aykirilar.to_records(index=False)\n","45bb8546":"res[:] = baski_degeri.to_records(index = False)\n","4da1a2a2":"naykiri = df_3[aykiri_df]\nnaykiri.describe().T","1aca2c6b":"aykiri = pd.DataFrame(res, index = df_3[~aykiri_df].index)\naykiri.describe().T","bbdb4fc7":"df_4 = pd.concat([naykiri, aykiri], ignore_index = True)\ndf_4.describe().T","6ec7e7cd":"df_3.info()","6511762c":"df_5 = df_3[df_scores > esik_deger]\ndf_5.info()","480f71ce":"df.info()","f284d51b":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)\ndf6_scores = clf.negative_outlier_factor_\ndf6_scores[0:20]","10299038":"np.sort(df6_scores)\n","4a113a5f":"np.sort(df6_scores)[8]","30d75084":"esik_deger6 = np.sort(df6_scores)[8]\nesik_deger6","61a5b7ce":"aykiri_df6 = df6_scores > esik_deger6\naykiri_df6","4f8a2eec":"df[df6_scores == esik_deger6]\n","b821311c":"baski_degeri6 = df[df6_scores == esik_deger6]","080fb554":"aykirilar6 = df[~aykiri_df6] \n","1870493b":"aykirilar6.to_records(index=False)","6d98996b":"res6 = aykirilar6.to_records(index=False)\n","2c845185":"res6[:] = baski_degeri6.to_records(index = False)\n","0389df48":"naykiri6 = df[aykiri_df6]\nnaykiri6.describe().T","bf153a38":"aykiri6 = pd.DataFrame(res6, index = df[~aykiri_df6].index)\naykiri6.describe().T","d02c2f53":"df_6 = pd.concat([naykiri6, aykiri6], ignore_index = True)\ndf_6.describe().T","e9649b6f":"df_7 = naykiri6\ndf_7.info()","01b2ac27":"df_8 = hitters.copy()\ndf_8.info()","1c0523c1":"cat_df = df_8.select_dtypes(include=[\"uint8\"])\ncat_df.head()","9f129763":"print(cat_df.League_N.unique())\nprint(cat_df[\"League_N\"].value_counts().count())\nprint(cat_df[\"League_N\"].value_counts())\nprint(df_8[\"League_N\"].value_counts().plot.barh())\ndf_8.groupby('League_N')['Salary'].mean()","9f211f76":"print(cat_df.Division_W.unique())\nprint(cat_df[\"Division_W\"].value_counts().count())\nprint(cat_df[\"Division_W\"].value_counts())\nprint(df_8[\"Division_W\"].value_counts().plot.barh())\ndf_8.groupby('Division_W')['Salary'].mean()","474a4a52":"print(cat_df.NewLeague_N.unique())\nprint(cat_df[\"NewLeague_N\"].value_counts().count())\nprint(cat_df[\"NewLeague_N\"].value_counts())\nprint(df_8[\"NewLeague_N\"].value_counts().plot.barh())\ndf_8.groupby('NewLeague_N')['Salary'].mean()","ef929d66":"Experience = []\nfor ex in df_8['Years']:\n    if ex < 5:\n        Experience.append(1)\n    elif (ex >= 5) & (ex < 10):\n        Experience.append(2)\n    elif (ex >= 10) & (ex < 15):\n        Experience.append(3)\n    elif (ex >= 15) & (ex < 20):\n        Experience.append(4)\n    else:\n        Experience.append(5)\ndf_8['Experience'] = Experience","a4eb5b20":"df_8.groupby(['League_N', 'Division_W', 'NewLeague_N'])['Salary'].mean()","249ff2c8":"df_8.groupby(['League_N', 'Division_W', 'NewLeague_N', 'Experience'])['Salary'].mean()","7751c0f9":"df_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 1), \"Salary\"] = 145.961538\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 2), \"Salary\"] = 774.434536\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 3), \"Salary\"] = 918.073533\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 4), \"Salary\"] = 614.375000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 2), \"Salary\"] = 850.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 3), \"Salary\"] = 833.333333\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 1), \"Salary\"] = 203.821429\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 2), \"Salary\"] = 528.108696\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 3), \"Salary\"] = 786.916700\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 4), \"Salary\"] = 479.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 1), \"Salary\"] = 96.666667\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 0) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 3), \"Salary\"] = 825.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 1), \"Salary\"] = 70.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 2), \"Salary\"] = 525.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 3), \"Salary\"] = 500.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 4), \"Salary\"] = 1050.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 1), \"Salary\"] = 313.753320\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 2), \"Salary\"] = 776.095190\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 3), \"Salary\"] = 949.010143\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 0) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 4), \"Salary\"] = 486.111000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 1), \"Salary\"] = 565.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 2), \"Salary\"] = 405.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 0) & (df_8['Experience'] == 3), \"Salary\"] = 250.000000\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 1), \"Salary\"] = 188.138889\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 2), \"Salary\"] = 538.114053\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 3), \"Salary\"] = 723.452429\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 4), \"Salary\"] = 763.666600\ndf_8.loc[(df_8[\"Salary\"].isnull()) & (df_8[\"League_N\"] == 1) & (df_8['Division_W'] == 1) & (df_8[\"NewLeague_N\"] == 1) & (df_8['Experience'] == 5), \"Salary\"] = 475.000000\n","a157cc8d":"df_8.info()","2d5ac2ca":"df_8['AtBat_rate'] = df_8[\"CAtBat\"] \/ df_8[\"Years\"]\ndf_8['Hits_rate'] = df_8[\"CHits\"] \/ df_8[\"Years\"]\ndf_8['HmRun_rate'] = df_8[\"CHmRun\"] \/ df_8[\"Years\"]\ndf_8['Runs_rate'] = df_8[\"CRuns\"] \/ df_8[\"Years\"]\ndf_8['RBI_rate'] = df_8[\"CRBI\"] \/ df_8[\"Years\"]\ndf_8['Walks_rate'] = df_8[\"CWalks\"] \/ df_8[\"Years\"]\n\ndf_8['1986_AtBat_rate'] = df_8[\"AtBat\"] \/ df_8[\"CAtBat\"]\ndf_8['1986_Hits_rate'] = df_8[\"Hits\"] \/ df_8[\"CHits\"]\ndf_8['1986_HmRun_rate'] = df_8[\"HmRun\"] \/ df_8[\"CHmRun\"]\ndf_8['1986_Runs_rate'] = df_8[\"Runs\"] \/ df_8[\"CRuns\"]\ndf_8['1986_RBI_rate'] = df_8[\"RBI\"] \/ df_8[\"CRBI\"]\ndf_8['1986_Walks_rate'] = df_8[\"Walks\"] \/ df_8[\"CWalks\"]\n\n","78ca27de":"df_8.info()","b912a75d":"df_8 = df_8.dropna()","1b086c50":"df_8.info()","28636a2a":"def compML(df, y, alg):\n    #train-test ayrimi\n    y = df[y]\n    X = df.drop('Salary', axis=1)\n    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=46)\n    #modelleme\n    model = alg().fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    RMSE = np.sqrt(mean_squared_error(y_test, y_pred))\n    model_ismi = alg.__name__\n    print(\"  veri seti i\u00e7in  \", model_ismi, \"  Modeli Test Hatas\u0131:   \",RMSE)\n    \n    ","e8099147":"models = [LinearRegression,\n          Ridge,\n          Lasso,\n          ElasticNet,\n          LGBMRegressor, \n          XGBRegressor, \n          GradientBoostingRegressor, \n          RandomForestRegressor, \n          DecisionTreeRegressor,\n          MLPRegressor,\n          KNeighborsRegressor, \n          SVR]\n","9473a07f":"for i in models:\n    compML(df_1, \"Salary\", i)","074ebfec":"for i in models:\n    compML(df_2, \"Salary\", i)","70baad89":"for i in models:\n    compML(df_3, \"Salary\", i)","8cf4de20":"for i in models:\n    compML(df_4, \"Salary\", i)","0d2d3c5e":"for i in models:\n    compML(df_5, \"Salary\", i)","fe924ec7":"for i in models:\n    compML(df_6, \"Salary\", i)","e630bf1a":"for i in models:\n    compML(df_7, \"Salary\", i)","8cd12a29":"for i in models:\n    compML(df_8, \"Salary\", i)","069b87f4":"df_4.head()","071da7d1":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","42df6e70":"knn_model = KNeighborsRegressor().fit(X_train, y_train)","683c38bc":"knn = KNeighborsRegressor()\nknn_params = {\"n_neighbors\": np.arange(1,30,1)}","15097681":"knn_cv_model = GridSearchCV(knn, knn_params, cv = 10).fit(X_train, y_train)","8613418f":"knn_cv_model.best_params_","2d066caf":"knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"]).fit(X_train, y_train)","671d7c95":"knn_tuned_y_pred = knn_tuned.predict(X_test)","b7597b24":"knn_tuned_RMSE = np.sqrt(mean_squared_error(y_test, knn_tuned_y_pred))\nknn_tuned_RMSE","17c9ff0d":"df_4.head()","61038da2":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","92f97bcb":"svr_model = SVR(\"linear\") ","89fdf6f5":"svr_params = {\"C\": [0.1,0.5,1,3]}","e76a5a4a":"svr_cv_model = GridSearchCV(svr_model, svr_params, cv = 5, verbose = 2, n_jobs = -1).fit(X_train, y_train)","1f53a809":"svr_cv_model.best_params_","9e29defb":"svr_tuned = SVR(\"linear\", C = 3).fit(X_train, y_train)","623e3e20":"svr_model_y_pred = svr_tuned.predict(X_test)","5e9b8355":"svr_model_tuned_RMSE = np.sqrt(mean_squared_error(y_test, svr_model_y_pred))\nsvr_model_tuned_RMSE","9e91677f":"df_4.head()","55a65e1c":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","59afd793":"scaler = StandardScaler()","28d8fe3f":"scaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)","809bdf1b":"scaler.fit(X_test)\nX_test_scaled = scaler.transform(X_test)","e41eada9":"mlp_model = MLPRegressor().fit(X_train_scaled, y_train)","8dc94d00":"mlp_params = {\"alpha\": [0.1, 0.01, 0.02, 0.001, 0.0001], \n             \"hidden_layer_sizes\": [(10,20), (5,5), (100,100)]}","d38c1b30":"mlp_cv_model = GridSearchCV(mlp_model, mlp_params, cv = 10, verbose = 2, n_jobs = -1).fit(X_train_scaled, y_train)","19084573":"mlp_cv_model.best_params_","3636e5db":"mlp_tuned = MLPRegressor(alpha = 0.001, hidden_layer_sizes = (100,100)).fit(X_train_scaled, y_train)","78a14319":"mlp_y_pred = mlp_tuned.predict(X_test_scaled)","41ca67f3":"mlp_tuned_RMSE = np.sqrt(mean_squared_error(y_test, mlp_y_pred))\nmlp_tuned_RMSE","7e244931":"df_4.head()","f4f1a7ca":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","32f1cb9d":"cart_model = DecisionTreeRegressor()","99ae3c3b":"cart_model.fit(X_train, y_train)","f8e3210d":"cart_params = {\"max_depth\": [2,3,4,5,10,20],\n              \"min_samples_split\": [2,10,5,30,50,10]}","3c1606f1":"cart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10, verbose = 2, n_jobs = -1).fit(X_train, y_train)","cc660c8c":"cart_cv_model.best_params_","df6c1b9e":"cart_tuned = DecisionTreeRegressor(max_depth = 4, min_samples_split = 2).fit(X_train, y_train)","c2524b56":"cart_model_y_pred = cart_tuned.predict(X_test)\ncart_tuned_RMSE = np.sqrt(mean_squared_error(y_test, cart_model_y_pred))\ncart_tuned_RMSE","0cd9c399":"df_4.head()","88cd05dc":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","1b0c50ee":"rf_model = RandomForestRegressor(random_state = 46).fit(X_train, y_train)\nrf_model","fb1fd6a1":"rf_params = {\"max_depth\": [5,8,10],\n            \"max_features\": [2,5,10],\n            \"n_estimators\": [200, 500, 1000, 2000],\n            \"min_samples_split\": [2,10,80,100]}","62ff0a2c":"rf_cv_model = GridSearchCV(rf_model, rf_params, cv = 10, n_jobs = -1, verbose = 2).fit(X_train, y_train)","1c567024":"rf_cv_model.best_params_","11b3dc2b":"rf_model = RandomForestRegressor(random_state = 46, \n                                 max_depth = 8,\n                                max_features = 5,\n                                min_samples_split = 2,\n                                 n_estimators = 500)\nrf_tuned = rf_model.fit(X_train, y_train)","d4fce8fa":"rf_y_pred = rf_tuned.predict(X_test)\nrf_tuned_RMSE = np.sqrt(mean_squared_error(y_test, rf_y_pred))\nrf_tuned_RMSE","0b681c54":"rf_tuned.feature_importances_*100","5002b81e":"Importance = pd.DataFrame({'Importance':rf_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","082043e6":"df_4.head()","bea1bbe1":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","bffa896b":"gbm_model = GradientBoostingRegressor().fit(X_train, y_train)\ngbm_model","f9cabd3a":"gbm_params = {\"learning_rate\": [0.001,0.1,0.01],\n             \"max_depth\": [3,5,8],\n             \"n_estimators\": [100,200,500],\n             \"subsample\": [1,0.5,0.8],\n             \"loss\": [\"ls\",\"lad\",\"quantile\"]}","13fce59e":"gbm_cv_model = GridSearchCV(gbm_model, \n                            gbm_params, \n                            cv = 10, \n                            n_jobs=-1, \n                            verbose = 2).fit(X_train, y_train)","f445dd30":"gbm_cv_model.best_params_","6fe9bae0":"gbm_tuned = GradientBoostingRegressor(learning_rate = 0.1,\n                                     loss = \"lad\",\n                                     max_depth = 3,\n                                     n_estimators = 100,\n                                     subsample = 1).fit(X_train, y_train)","fd8f397c":"gbm_tuned_y_pred = gbm_tuned.predict(X_test)\ngbm_tuned_RMSE = np.sqrt(mean_squared_error(y_test, gbm_tuned_y_pred))\ngbm_tuned_RMSE","a2242afb":"Importance = pd.DataFrame({'Importance':gbm_tuned.feature_importances_*100}, \n                          index = X_train.columns)\n\n\nImportance.sort_values(by = 'Importance', \n                       axis = 0, \n                       ascending = True).plot(kind = 'barh', \n                                              color = 'r', )\n\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","8cf75f8e":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","9f2ece5f":"xgb = XGBRegressor()\nxgb","af38ea97":"xgb_params = {\"learning_rate\": [0.1,0.01,0.5],\n             \"max_depth\": [2,3,4,5,8],\n             \"n_estimators\": [100,200,500,1000],\n             \"colsample_bytree\": [0.4,0.7,1]}","9c89ebb3":"xgb_cv_model  = GridSearchCV(xgb,xgb_params, cv = 10, n_jobs = -1, verbose = 2).fit(X_train, y_train)","92d73b81":"xgb_cv_model.best_params_","f2ed7be3":"xgb_tuned = XGBRegressor(colsample_bytree = 0.4, \n                         learning_rate = 0.1, \n                         max_depth = 4, \n                         n_estimators = 100).fit(X_train, y_train)","b93feb1a":"xgb_tuned_y_pred = xgb_tuned.predict(X_test)\nxgb_tuned_RMSE = np.sqrt(mean_squared_error(y_test, xgb_tuned_y_pred))\nxgb_tuned_RMSE","06dcbc6a":"df_4.head()","946756f0":"y = df_4['Salary']\nX = df_4.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","7e9bb9b8":"lgb_model = LGBMRegressor()\nlgb_model","eacf28ed":"lgbm_params = {\"learning_rate\": [0.01, 0.1, 0.5, 1],\n              \"n_estimators\": [20,40,100,200,500,1000],\n              \"max_depth\": [1,2,3,4,5,6,7,8,9,10]}","7d72f212":"lgbm_cv_model = GridSearchCV(lgb_model, \n                             lgbm_params, \n                             cv = 10, \n                             n_jobs = -1, \n                             verbose =2).fit(X_train, y_train)","95c71d4a":"lgbm_cv_model.best_params_","50713d30":"lgbm_tuned = LGBMRegressor(learning_rate = 0.1, \n                          max_depth = 2, \n                          n_estimators = 200).fit(X_train, y_train)","d4ea9861":"lgbm_tuned_y_pred = lgbm_tuned.predict(X_test)\nlgbm_tuned_RMSE = np.sqrt(mean_squared_error(y_test, lgbm_tuned_y_pred))\nlgbm_tuned_RMSE","98642ad3":"cat_df = df_4","8aedf9ad":"y = cat_df['Salary']\nX = cat_df.drop('Salary', axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=46)","cb946b71":"catb_model = CatBoostRegressor()","8bb222aa":"catb_params = {\"iterations\": [200,500,100],\n              \"learning_rate\": [0.01,0.1],\n              \"depth\": [3,6,8]}","a1eb1846":"catb_cv_model = GridSearchCV(catb_model, \n                           catb_params, \n                           cv = 5, \n                           n_jobs = -1, \n                           verbose = 2).fit(X_train, y_train)","21aa5f79":"catb_cv_model.best_params_","bad5faa6":"catb_tuned = CatBoostRegressor(depth = 6, iterations = 500, learning_rate = 0.01).fit(X_train, y_train)","32a5d12f":"catb_tuned_y_pred = catb_tuned.predict(X_test)","30411510":"catb_tuned_RMSE = np.sqrt(mean_squared_error(y_test, catb_tuned_y_pred))\ncatb_tuned_RMSE","73457527":"## 6.3. Yapay Sinir A\u011flar\u0131\n\n\n","a9f4f468":"## 2. Veri Setinin Okunup G\u00f6r\u00fcnt\u00fclenmesi:","86a47810":"### Veri setinde \u00fc\u00e7 tane 'Object' t\u00fcr\u00fcnde de\u011fi\u015fken oldu\u011fu ve'Salary' de\u011fi\u015fkeni i\u00e7erisinde 59 eksik veri bulundu\u011fu g\u00f6zlemlendi. \n\n\u0130lk olarak 'get.dummies' i\u015flemi ile 'Object' olarak g\u00f6r\u00fclen de\u011fi\u015fkenlerden kurtuluyoruz. ","49b2edd9":"## 6.2. Destek Vekt\u00f6r Regresyonu (Support Vector Regression)\n\n","074db286":"### 'League_N', 'Division_W', 'NewLeague_N', 'Experience' de\u011fi\u015fkenleri groupby yap\u0131larak 'Salary' de\u011f\u015fikeninin ortalamas\u0131 al\u0131n\u0131yor ve 'Salary' de\u011fi\u015fkenindeki eksik de\u011ferlerin yerine bu ortalamalar atan\u0131yor.","98b346c2":"### 3.6. Eksik Veriler Silinip Ayk\u0131r\u0131 Veriler Bask\u0131lanarak 'df_6' Olu\u015fturuluyor:","49d3dee8":"### 3.7.  Eksik ve Ayk\u0131r\u0131 Veriler Silinip 'df_7' Veri Seti Olu\u015fturuluyor:","17e8092e":"## 6.5. Random Forests\n\n\n","bd038e25":"## De\u011fi\u015fken \u00d6nem D\u00fczeyi:","82c83426":"## 6.9.  CatBoost","8c21d4fb":"# 6. Hiperparametre Optimizasyonlar\u0131\n\n\n\n### Yap\u0131lan ilk tahmin i\u015fleminde en ba\u015far\u0131l\u0131 olan veri seti df_4 idi. Bu y\u00fczden hiperparametre optimizasyon i\u015flemleri bu veri seti \u00fczerinde yap\u0131lacak. \n\n\n\n\n## 6.1. KNN","0334a24b":"### 4.2. De\u011fi\u015fken Ekleme:\n\nVeri setinde oyuncular\u0131n 1986 y\u0131l\u0131ndaki ve t\u00fcm kariyerleri boyunca elde ettikleri veriler ile ka\u00e7 y\u0131ll\u0131k tecr\u00fcbelerinin oldu\u011fu bilgileri yer al\u0131yor. Bu verilerin y\u0131ll\u0131k ortalamal\u0131r\u0131n\u0131 ve 1986 y\u0131l\u0131ndaki verilerin t\u00fcm performansa oran\u0131n\u0131 ekliyoruz.  ","0b8d5213":"### 'Years' de\u011fi\u015fkeni 1 ile 24 say\u0131lar\u0131 aras\u0131ndaki de\u011ferlerden olu\u015fuyor. Bunu 0-4, 5-9, 10-19, 20-24 \u015feklinde 1'den 5'e kadar rakamlarla numaraland\u0131rd\u0131k.","e640c190":"## 6.4. CART (Classification and Regression Tree)\n\n\n","0668799a":"### 3.5. Eksik Veriler Tahminlerle Doldurulup Ayk\u0131r\u0131 Veriler Silinerek 'df_5' Olu\u015fturuluyor:","4a9c6e73":"### Hiperparametre optimizasyonu yap\u0131lmadan ger\u00e7ekle\u015ftirilen tahminlerde yukar\u0131daki sonu\u00e7lar al\u0131nm\u0131\u015ft\u0131r. \n\n\n","059c9aa1":"## 4. De\u011fi\u015fken M\u00fchendisli\u011fi:\n\n","41c92eeb":"### 3.3.  Eksik Veriler Gradient Boosting Regression Tahmin Sonu\u00e7lar\u0131 ile Doldurulup 'df_3' adl\u0131 veri seti olu\u015fturuluyor:","52d6808c":"# SONU\u00c7:\n\n### 'Hitters' veri seti \u00fczerinde yap\u0131lan 'Maa\u015f Tahmin' \u00e7al\u0131\u015fmas\u0131nda toplam 8 tane veri seti olu\u015fturulmu\u015ftur:\n\n### df_1: Hitters veri setindeki eksik verilerin bulundu\u011fu g\u00f6zlemler silinerek olu\u015fturulmu\u015ftur.\n\n### df_2: Hitters veri setindeki eksik veriler bulunduklar\u0131 'Salary' de\u011fi\u015fkeninin ortalamas\u0131 ile doldurularak olu\u015fturulmu\u015ftur.\n\n### df_3: Hitters veri setindeki eksik veriler GradientBoostingMashine modeli ile tahmin edilerek doldurulmu\u015ftur.\n\n### df_4: df_3 veri setindeki LocalOutlierFactor ile belirlenen ayk\u0131r\u0131 de\u011ferler bask\u0131lanarak olu\u015fturulmu\u015ftur.\n\n### df_5: df_3 veri setindeki LocalOutlierFactor ile belirlenen ayk\u0131r\u0131 de\u011feler silinerek olu\u015fturulmu\u015ftur.\n\n### df_6: Hitters veri setindeki eksik verilerin bulundu\u011fu g\u00f6zlemler silinip ayr\u0131k\u0131 de\u011ferler bask\u0131lanarak olu\u015fturulmu\u015ftur.\n\n### df_7: Hitters veri setindeki eksik veriler ve ayk\u0131r\u0131 de\u011ferler silinerek olu\u015fturulmu\u015ftur.\n\n### df_8: Veri setine yeni de\u011fi\u015fkenler eklenerek olu\u015fturulmu\u015ftur. Years de\u011fi\u015fkenindeki de\u011ferler b\u00f6l\u00fcnm\u00fc\u015f, 'Experience' de\u011fi\u015fkeni olu\u015fturulmu\u015f, oyuncular\u0131n performanslar\u0131n\u0131n y\u0131ll\u0131k ortalamas\u0131 ile 1986 y\u0131l\u0131ndaki performanslar\u0131n\u0131n t\u00fcm kariyerlerine oran\u0131 de\u011fi\u015fken olarak eklenmi\u015ftir. \n\n\n\n## Daha sonra t\u00fcm 'Regresyon Modelleri'i\u00e7in bir fonksiyon yaz\u0131lm\u0131\u015f ve veri setleri \u00fczerinde tek tek t\u00fcm modellerle tahmin i\u015flemi yap\u0131lm\u0131\u015ft\u0131r.\n\n## Son olarak Hiperparametre optimizasyonlar\u0131 ile model tuning i\u015flemleri yap\u0131lm\u0131\u015f ve final modelleri kurulmu\u015ftur. \n","a65b7d3f":"## 3. Maa\u015f tahmini i\u00e7in uygulayaca\u011f\u0131m\u0131z farkl\u0131 senaryolar i\u00e7in farkl\u0131 veri setleri olu\u015fturaca\u011f\u0131z. \n\n\n### 3.1. De\u011fi\u015fkenler \u00fczerinde hi\u00e7bir de\u011fi\u015fiklik yapmadan sadece eksik verileri silerek 'df_1' adl\u0131 veri setini olu\u015frutuyoruz:","807e59b8":"### 3.4. Eksik Veriler Tahminlerle Doldurulup  Ayk\u0131r\u0131 De\u011ferler Bask\u0131lanarak 'df_4' olu\u015fturuluyor:","b8523ca4":"## De\u011fi\u015fken \u00d6nem D\u00fczeyi","78bf405e":"### LocalOutlierFactor ile de\u011fi\u015fkenlerin ayk\u0131r\u0131 de\u011ferleri belirlenecek.","9b8a7455":"\n\n\n# Hitters Veri Seti \u00dczerinde Maa\u015f Tahmini:\n\n\n## Veri Setinin Hikayesi:\n    \n###    \"Hitters\" Veri seti Amerika'da bir baseball tak\u0131m\u0131n\u0131n oyuncular\u0131n\u0131n 1986 y\u0131l\u0131na ait performans ve maa\u015f bilgilerini i\u00e7eriyor. \n### Orijinal veri seti 322 g\u00f6zlem ve 20 de\u011fi\u015fkenden olu\u015fuyor. \n    \n### De\u011fi\u015fkenler:\n**    AtBat:  Oyuncunun 1986 y\u0131l\u0131nda yapt\u0131\u011f\u0131 toplam vuru\u015flar.\n\n**    Hits:   Oyuncunun 1986 y\u0131l\u0131nda yapt\u0131\u011f\u0131 isabetli vuru\u015flar.\n\n**    HmRun:  Oyuncunun 1986 y\u0131l\u0131nda yapt\u0131\u011f\u0131 'Home Run' say\u0131s\u0131. Vurucunun topu oyun alan\u0131 d\u0131\u015f\u0131na yollamas\u0131d\u0131r. Bir vurucunun tak\u0131m\u0131na sa\u011flayabilece\u011fi en b\u00fcy\u00fck yarar say\u0131 turudur. \u00c7\u00fcnk\u00fc normal bir ko\u015fuda bir vurucu ancak bir say\u0131 kazand\u0131rabilirken, say\u0131 turunda sahada ne kadar ko\u015fucu varsa bir o kadar daha say\u0131 kazand\u0131rm\u0131\u015f olur.\n\n**    Runs: Oyuncunun 1986 y\u0131l\u0131nda yapt\u0131\u011f\u0131 'Run' say\u0131s\u0131. Say\u0131 (Ko\u015fucunun oyundan \u00e7\u0131kmadan t\u00fcm kaleleri dola\u015f\u0131p sonu\u00e7ta merkez kale levhas\u0131na dokunup say\u0131 yapmas\u0131d\u0131r.)\n\n**    RBI:  1986 y\u0131l\u0131nda vuru\u015f yap\u0131lan ko\u015fu say\u0131s\u0131.\n\n**    Walks: Y\u00fcr\u00fctmek (Kendisine, vuru\u015f b\u00f6lgesi (Strike Zone) d\u0131\u015f\u0131na giden d\u00f6rt ball at\u0131lan vurucuya verilen birinci kaleye gitme \u00f6d\u00fcl\u00fcd\u00fcr. Bu \u00f6d\u00fcl sonucu s\u00f6z konusu vurucu, vuru\u015f yapmas\u0131na gerek kalmadan birinci kaleye y\u00fcr\u00fcr. Bir nevi teknik faul.)\n\n**    Years: Oyuncunun tecr\u00fcbesi (y\u0131l olarak).\n\n**    ('C' harfi ile ba\u015flayan de\u011fi\u015fkenler, oyuncunun kariyeri boyunca yapt\u0131klar\u0131n\u0131 ifade eder.)\n\n**    League:   1986 sonunda oyuncu ligini g\u00f6steren A ve N de\u011ferlerine sahip bir fakt\u00f6r.\n\n**    Division:  1986 sonunda oyuncunun ayr\u0131lmas\u0131n\u0131 g\u00f6steren E ve W de\u011ferlerine sahip bir fakt\u00f6r.\n\n**    PutOuts:  Oyuncunun 1986 y\u0131l\u0131ndaki putouts say\u0131s\u0131.\n\n**    Assists: Oyuncunun 1986 y\u0131l\u0131ndaki assist say\u0131s\u0131.\n\n**    Errors: Oyuncunun 1986 y\u0131l\u0131ndaki hata say\u0131s\u0131.\n\n**    Salary: Oyuncunun akt\u00fcel maa\u015f\u0131.\n\n**    NewLeague: 1987 ba\u015f\u0131nda oyuncunun ligini g\u00f6steren A ve N de\u011ferlerine sahip bir fakt\u00f6r.\n    \n    \n    \n## 1. Gerekli import i\u015flemleri:","a67b122c":"## 6.8.  LightGBM\n\n\n","f234d9d0":"### 3.2. Eksik verilerin yerine bulunduklar\u0131 'Salary' de\u011fi\u015fkeninin ortalamas\u0131 atanarak 'df_2' adl\u0131 veri seti olu\u015fturuluyor:","54c5fbed":"### 4.1.  Kategorik de\u011fi\u015fkenler \"League_N, Division_W, NewLeague_N\" ","5564fb8b":"##  6.6. Gradient Boosting Machines\n\n\n\n","8233bf3f":"\n## 5. Tahmin:\n\n### Elimizde 8 adet veri var. Bunlar\u0131n her biri i\u00e7in a\u015fa\u011f\u0131daki modellerle tamin yap\u0131lacak. \n\n\n### Modeller:\n\n          Linear Regression\n          Ridge Regression\n          Lasso Regression\n          ElasticNet Regression\n          LightGBM Regression\n          XGBoost Regression\n          GradientBoosting Regression \n          RandomForest Regression \n          DecisionTree Regression\n          MLP Regression\n          KNeighbors Regression\n          SupportVector Regression\n          \n\n### \u0130lk \u00f6nce hiperparametre optimizasyonu yapmadan tahminler yap\u0131lacak.\n### Veri setleri '%80 train seti' ve '%20 test seti' olmak \u00fczere ikiye ayr\u0131lacak ve 'random_state = 46' olarak ayarlanacak.\n","c505c3f1":"## 6.7. XGBoost\n\n\n"}}