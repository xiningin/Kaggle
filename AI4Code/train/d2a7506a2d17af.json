{"cell_type":{"4b6b455d":"code","93c9cbee":"code","3be9fdd8":"code","b7d441db":"code","d4f2bfc6":"code","7a0a602a":"code","6566268e":"code","bc442fbe":"code","a900bd49":"code","6fca3ac2":"code","432dbd9a":"code","1faf503a":"code","bc5ccc8a":"code","901e42fe":"code","ddedf66b":"code","b2cb6c73":"code","e168580b":"code","531c4de0":"code","69a65ae8":"code","9b77c8d1":"code","0898fa29":"code","cbad495d":"code","4c027cc6":"code","bb0cfb23":"code","ab402964":"code","7903646e":"code","efd17672":"code","3f62af54":"code","5f48d376":"code","9d3e5bc9":"code","5962906d":"code","cbf81f59":"code","50d17bbc":"code","1129fb01":"code","8776b42a":"code","20b401e0":"code","31f75d6a":"code","8ef69c79":"code","78d883f6":"code","a358688e":"code","68d7b71b":"markdown","459250a2":"markdown","b611d139":"markdown","bb1d7e32":"markdown","25f42b2c":"markdown","4dd6525a":"markdown","0724ce45":"markdown","a0e72db3":"markdown","db851277":"markdown","eb0b0b86":"markdown","d7f26bdb":"markdown","4fba3296":"markdown","57fd44ab":"markdown","b31387b1":"markdown"},"source":{"4b6b455d":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport sklearn\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import r2_score","93c9cbee":"dataset = pd.read_csv('..\/input\/position-salaries-polynomial-linear-regression\/position_salaries.csv')","3be9fdd8":"type(dataset)","b7d441db":"dataset.shape","d4f2bfc6":"dataset.dtypes","7a0a602a":"dataset","6566268e":"# dataset.info()","bc442fbe":"# dataset.describe()","a900bd49":"dataset.columns","6fca3ac2":"X = dataset.iloc[:, 1:-1].values","432dbd9a":"y = dataset.iloc[:, -1].values","1faf503a":"X.shape","bc5ccc8a":"# from sklearn.linear_model import LinearRegression","901e42fe":"lin_reg_model = LinearRegression()","ddedf66b":"lin_reg_model.fit(X, y)","b2cb6c73":"y_pred1 = lin_reg_model.predict(X)","e168580b":"# Visualising the Linear Regression results\nplt.scatter(X, y, color='green', label='')\nplt.plot(X, y_pred1, color=\"blue\", label='', marker='+')\nplt.title(\"Truth or Bluff (Linear Regression)\")\nplt.xlabel('Position Level')\nplt.ylabel('Salary')\nplt.show()","531c4de0":"# from sklearn.preprocessing import PolynomialFeatures","69a65ae8":"from sklearn.preprocessing import PolynomialFeatures","9b77c8d1":"poly_reg = PolynomialFeatures(degree=3)","0898fa29":"X_poly = poly_reg.fit_transform(X)","cbad495d":"X_poly","4c027cc6":"lin_reg_model2 = LinearRegression()","bb0cfb23":"lin_reg_model2.fit(X_poly, y)","ab402964":"y_pred2 = lin_reg_model2.predict(X_poly)","7903646e":"y_pred2","efd17672":"# Visualising the Polynomial Regression results\nplt.scatter(X, y, color='green', label='')\nplt.plot(X, y_pred2, color=\"blue\", label='')\nplt.title(\"Truth or Bluff (Polynomial Regression)\")\nplt.xlabel('Position level')\nplt.ylabel('Salry')\nplt.show()","3f62af54":"# Visualising the Polynomial Regression results \n# (for higher resolution and smoother curve)","5f48d376":"x_grid = np.arange(min(X), max(X), 0.1)","9d3e5bc9":"x_grid","5962906d":"x_grid.shape","cbf81f59":"x_grid = x_grid.reshape(len(x_grid), 1)","50d17bbc":"x_grid.shape","1129fb01":"plt.scatter(X, y, color='green')\nplt.plot(x_grid, lin_reg_model2.predict(poly_reg.fit_transform(x_grid)), color=\"blue\")\nplt.title(\"Truth or Bluff (Polynomial Regression)\")\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","8776b42a":"# SLR","20b401e0":"lin_reg_model.predict([[6.5]])  # Salary","31f75d6a":"# PLR","8ef69c79":"lin_reg_model2.predict(poly_reg.fit_transform([[6.5]]))   # Salary","78d883f6":"plotting_xs = np.linspace(X.min(), X.max(), 1000)","a358688e":"for i in range(1, 11):\n    # Applying Train Test Split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n    \n    # Creating Polynomial object\n    poly_reg = PolynomialFeatures(degree=i)\n    \n    # Trasforming the training and testing data to required Polynomial degree\n    X_train = poly_reg.fit_transform(X_train.reshape(X_train.shape[0], 1))\n    X_test = poly_reg.fit_transform(X_test.reshape(X_test.shape[0], 1))\n    \n    # Model\n    reg = LinearRegression()\n    \n    # Fitting\n    reg.fit(X_train,y_train)\n    \n    # Predicting\n    y_pred = reg.predict(X_test)\n    \n    # Generating predictions for 1000 points which will help in plotting the curve of regression\n    xs = poly_reg.fit_transform(plotting_xs.reshape(plotting_xs.shape[0], 1))\n    plotting_ys = reg.predict(xs)\n    \n    # Plotting\n    plt.title(f'Degree: {i}, R2 score: {r2_score(y_pred,y_test)}')\n    \n    # Plotting the training data \n    plt.scatter(X, y, label='Training Data')\n    \n    # Plotting the curve of regression\n    plt.plot(plotting_xs, plotting_ys, label='Curve of Regression')\n    plt.legend()\n    plt.show()","68d7b71b":"### Question 1:","459250a2":"### Question 2:","b611d139":"## Happy Machine Learning :)","bb1d7e32":"<b><i>Predicting a new result with Polynomial Regression<\/i><\/b>","25f42b2c":"#### 3 - EDA","4dd6525a":"Position level: 6.5","0724ce45":"<b><i>Predicting a new result with Linear Regression<\/i><\/b>","a0e72db3":"### Polynomial Linear Regression (PLR)","db851277":"Position level: 6.5","eb0b0b86":"#### 4 - Training the Linear Regression model on the whole dataset","d7f26bdb":"### Machine Learning Algorithm - Regression","4fba3296":"#### 2 - Importing the dataset","57fd44ab":"#### 5 - Training the Polynomial Regression model on the whole dataset","b31387b1":"#### 1 - Importing the libraries"}}