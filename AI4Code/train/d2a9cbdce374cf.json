{"cell_type":{"ea459739":"code","d1148135":"code","a78a9308":"code","8745334c":"code","4a6039d5":"code","000dc4c5":"code","3c3e9221":"code","efe043b5":"code","e5ab74f2":"code","adc4864f":"code","e66a19a0":"code","dec6add0":"code","97cc4f9d":"code","526dec40":"code","524ed5ca":"code","2f8db8dc":"markdown"},"source":{"ea459739":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1148135":"import pandas as pd","a78a9308":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.head()","8745334c":"colums=['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','SaleType','SaleCondition','Fence','MiscFeature','PoolQC','Alley']\ncat_df = df[colums]\nencoded_cat_df = pd.DataFrame({col: df[col].astype('category').cat.codes for col in cat_df}, index=df.index)","4a6039d5":"clean_df = df.drop(colums,axis=1)\nframes = [encoded_cat_df,clean_df]","000dc4c5":"clean_df = pd.concat(frames,axis=1)","3c3e9221":"clean_df.head()","efe043b5":"from sklearn.feature_selection import SelectKBest, f_classif\n\nclean_df = clean_df.fillna(0)\nx = clean_df.drop(['SalePrice'],axis=1)\nselector = SelectKBest(f_classif, k=10)\n\nselected_data = selector.fit_transform(x, clean_df['SalePrice'])\ny_train = df['SalePrice']","e5ab74f2":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(selected_data, y_train)","adc4864f":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.shape","e66a19a0":"cat_df = test[colums]\ncat_tes_df = pd.DataFrame({col: cat_df[col].astype('category').cat.codes for col in cat_df}, index=cat_df.index)\nclean_xtest = test.drop(colums,axis=1)\nframes = [cat_tes_df,clean_xtest]\nclean_test = pd.concat(frames,axis=1)","dec6add0":"x_test = selector.transform(clean_test.fillna(0))","97cc4f9d":"y_pred = regressor.predict(x_test)","526dec40":"out = pd.DataFrame(y_pred,columns=['SalePrice'])","524ed5ca":"out['Id'] = test['Id']\nout.to_csv('.\/pred.csv',index=False)","2f8db8dc":"## Random Forest"}}