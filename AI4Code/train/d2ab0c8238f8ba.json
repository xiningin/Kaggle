{"cell_type":{"23aca739":"code","4228d149":"code","f1875440":"code","00593881":"code","474e8222":"code","a6666dbb":"code","f76a4be7":"code","21369237":"code","17ecfa76":"code","4d79c187":"code","31574320":"code","069898eb":"code","9c151ab9":"code","84a0e19d":"code","f3c6f6fd":"code","4fb3327f":"code","9d4e79e1":"markdown","88374e08":"markdown","f6055b6c":"markdown","92b41031":"markdown","c62159f9":"markdown","279d9c43":"markdown","67ed2663":"markdown"},"source":{"23aca739":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4228d149":"# Visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f1875440":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","00593881":"data.head()","474e8222":"data.info()","a6666dbb":"data.describe()","f76a4be7":"data.Species.value_counts()","21369237":"# Making the copy of the data so that real data do not get messed up\ndf = data.copy()","17ecfa76":"sns.pairplot(df.drop('Id', axis=1), hue='Species')","4d79c187":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ndf['Species'] = encoder.fit_transform(df['Species'])","31574320":"X = df.drop(['Id', 'Species'], axis=1)\ny = df['Species']","069898eb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","9c151ab9":"from sklearn.neighbors import KNeighborsClassifier\n\nscores = []\nfor i in range(1,10):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    scores.append(knn.score(X_test, y_test))","84a0e19d":"sns.set_style('whitegrid')\nsns.lineplot(x=range(1,10), y=scores, marker='o',)","f3c6f6fd":"final_knn = KNeighborsClassifier(n_neighbors=5)\nfinal_knn.fit(X_train, y_train)\npred = knn.predict(X_test)","4fb3327f":"from sklearn.metrics import classification_report, confusion_matrix\nsns.heatmap(confusion_matrix(y_test, pred), annot=True, cmap='viridis', cbar=False, annot_kws={'size':15})\nplt.title('confusion matrix', fontsize=20)\nplt.show()\nprint('classification report: \\n{}'.format(classification_report(y_test, pred)))","9d4e79e1":"# Preprocessing","88374e08":"# Basic Imports","f6055b6c":"# Data Import","92b41031":"# Model Building","c62159f9":"# Quick Look ","279d9c43":"# Evaluation","67ed2663":"# Exploratory Data Analysis"}}