{"cell_type":{"44a55344":"code","9bf006a9":"code","57f12dde":"code","48f43196":"code","00a18d2b":"code","ce5cf48a":"code","6eb8070d":"code","9f8738a2":"code","5ce37bce":"code","17468ca6":"code","a4d8df1a":"code","0df16fce":"code","a3f65f73":"code","995b2059":"code","3d3115b0":"code","eb5d805a":"markdown","93fb158c":"markdown","fa2a5a7e":"markdown","5a8b5a16":"markdown","1c91ac45":"markdown","9969ecb4":"markdown","b66bc128":"markdown","54cb828c":"markdown"},"source":{"44a55344":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import OrdinalEncoder # To encode data\nfrom sklearn.model_selection import train_test_split #Split features and target into train and test data\nfrom sklearn.ensemble import RandomForestRegressor # Model used to predict target\nfrom xgboost import XGBRegressor #boosting model\nfrom sklearn.metrics import mean_squared_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bf006a9":"train_data = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\",index_col=0)\ntrain_data.head()","57f12dde":"train_data.describe()","48f43196":"train_data.info()","00a18d2b":"test_data = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\",index_col=0)\ntest_data.head()","ce5cf48a":"test_data.describe()","6eb8070d":"test_data.info()","9f8738a2":"features = train_data.drop([\"target\"],axis=\"columns\")\nfeatures.head()","5ce37bce":"target = train_data[\"target\"]\ntarget.head()","17468ca6":"cols = [column for column in features.columns if \"cat\" in column]\ncols","a4d8df1a":"x = features.copy()\nx_test = test_data.copy()\n\nordinal_encoder = OrdinalEncoder()\nx[cols] = ordinal_encoder.fit_transform(features[cols])\nx_test[cols] = ordinal_encoder.transform(test_data[cols])\n\nx.head()","0df16fce":"x_train,x_valid,y_train,y_valid = train_test_split(x,target,test_size=0.2)\nprint(x_train.shape)\nprint(x_valid.shape)\nprint(y_train.shape)\nprint(y_valid.shape)","a3f65f73":"model = RandomForestRegressor(n_estimators=50)\nmodel.fit(x_train,y_train)\npred = model.predict(x_valid)\nprint(mean_squared_error(y_valid,pred))","995b2059":"xgb = XGBRegressor(n_estimators=200, learning_rate=0.05)\nxgb.fit(x_train,y_train)\nxgb.score(x_valid,y_valid)","3d3115b0":"predictions = xgb.predict(x_test)\n\noutput = pd.DataFrame({'Id': x_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","eb5d805a":"# Building a model","93fb158c":"**So we have string in our features, from cat0 to cat9**\n\n**Using OrdinalEncoder lets fit and transform all string to integers**\n\n**Now let's take column from cat0 to cat9 and encode it**","fa2a5a7e":"# Taking features and target","5a8b5a16":"# Splitting X and target into training and testing data","1c91ac45":"# Making submission file","9969ecb4":"# Reading training and testing data","b66bc128":"# Importing all required libraries","54cb828c":"# Using xgboost"}}