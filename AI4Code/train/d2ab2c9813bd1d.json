{"cell_type":{"b979a6af":"code","32d6f8c5":"code","ff3563ca":"code","8357492e":"code","7615a857":"code","5407ef09":"code","08cbfb7a":"code","edbbfa97":"code","ea59d424":"markdown","83d00557":"markdown","f74d03b3":"markdown","e8f654b7":"markdown"},"source":{"b979a6af":"import gc\nimport pickle\nimport numpy as np\nimport pandas as pd\nimport lightgbm as lgb\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold","32d6f8c5":"with open(\"..\/input\/tps-june-data-preprocess\/TPS_June_Dataset_Set1.txt\", 'rb') as handle: \n    data = handle.read()\n\nprocessed_data = pickle.loads(data)\ntrain_df = processed_data['train_df']\ntest_df = processed_data['test_df']\n\nYtrain_oh = pd.get_dummies(train_df['target']).values\n\ndel processed_data\ngc.collect()","ff3563ca":"Xtrain = train_df.loc[:, train_df.columns != 'target'].values\nYtrain = train_df['target'].values\nYtrain_oh = pd.get_dummies(train_df['target']).values\nXtest = test_df.values\n\nprint(\"Xtrain: {} \\nYtrain: {} \\nYtrain_oh: {} \\nXtest: {}\".format(Xtrain.shape, Ytrain.shape, \n                                                                   Ytrain_oh.shape, Xtest.shape))\n\ndel train_df\ndel test_df\ngc.collect()","8357492e":"params = {}\nparams[\"objective\"] = 'multiclass'\nparams['metric'] = 'multi_logloss'\nparams['boosting'] = 'gbdt'\n#params[\"device_type\"] = 'gpu'\nparams['num_class'] = 9\nparams['is_unbalance'] = True\nparams[\"learning_rate\"] = 0.02\nparams[\"lambda_l2\"] = 0.0256\nparams[\"num_leaves\"] = 52\n#params[\"max_depth\"] = 10\nparams[\"feature_fraction\"] = 0.503\nparams[\"bagging_fraction\"] = 0.741\nparams[\"bagging_freq\"] = 8\nparams[\"bagging_seed\"] = 10\nparams[\"min_data_in_leaf\"] = 10\nparams[\"verbosity\"] = -1\nnum_rounds = 5000","7615a857":"FOLD = 10\nNUM_SEED = 3\n\n# Prediction Clipping Thresholds\np_min = 0.025\np_max = 1 - p_min\n\nnp.random.seed(3)\nseeds = np.random.randint(0, 100, size=NUM_SEED)\n\noof_score = 0\ny_pred_meta_lgb = np.zeros((Ytrain.shape[0], 9))\ny_pred_final_lgb = np.zeros((Xtest.shape[0], 9))\ncounter = 0\n\n\nfor sidx, seed in enumerate(seeds):\n    seed_score = 0\n    \n    kfold = StratifiedKFold(n_splits=FOLD, shuffle=True, random_state=seed)\n\n    for idx, (train, val) in enumerate(kfold.split(Xtrain, Ytrain)):\n        counter += 1\n\n        train_x, train_y, train_y_oh = Xtrain[train], Ytrain[train], Ytrain_oh[train]\n        val_x, val_y, val_y_oh = Xtrain[val], Ytrain[val], Ytrain_oh[val]\n\n        lgtrain = lgb.Dataset(train_x, label=train_y.ravel())\n        lgvalidation = lgb.Dataset(val_x, label=val_y.ravel())\n\n        model = lgb.train(params, lgtrain, num_rounds, \n                          valid_sets=[lgtrain, lgvalidation], \n                          #categorical_feature=cat_cols_indices,\n                          early_stopping_rounds=200, verbose_eval=100)\n\n        y_pred = model.predict(val_x, num_iteration=model.best_iteration)\n        #y_pred = np.clip(y_pred, p_min, p_max)\n        y_pred_meta_lgb[val] += y_pred\n        y_pred_final_lgb += model.predict(Xtest, num_iteration=model.best_iteration)\n        \n        score = log_loss(val_y_oh, y_pred)\n        oof_score += score\n        seed_score += score\n        print(\"Seed-{} | Fold-{} | OOF Score: {}\".format(seed, idx, score))\n    \n    print(\"\\nSeed: {} | Aggregate OOF Score: {}\\n\\n\".format(seed, (seed_score \/ FOLD)))\n\n\ny_pred_meta_lgb = y_pred_meta_lgb \/ float(NUM_SEED)\ny_pred_final_lgb = y_pred_final_lgb \/ float(counter)\noof_score \/= float(counter)\nprint(\"Aggregate OOF Score: {}\".format(oof_score))","5407ef09":"np.savez_compressed('.\/LGB_Meta_Features.npz',\n                    y_pred_meta_lgb=y_pred_meta_lgb, \n                    oof_score=oof_score,\n                    y_pred_final_lgb=y_pred_final_lgb)","08cbfb7a":"#y_pred_final_lgb = np.clip(y_pred_final_lgb, p_min, p_max)\n\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/test.csv\")\nsubmit_df = pd.DataFrame()\nsubmit_df['id'] = test_df['id']\nsubmit_df['Class_1'] = y_pred_final_lgb[:,1]\nsubmit_df['Class_2'] = y_pred_final_lgb[:,2]\nsubmit_df['Class_3'] = y_pred_final_lgb[:,3]\nsubmit_df['Class_4'] = y_pred_final_lgb[:,4]\nsubmit_df['Class_5'] = y_pred_final_lgb[:,5]\nsubmit_df['Class_6'] = y_pred_final_lgb[:,6]\nsubmit_df['Class_7'] = y_pred_final_lgb[:,7]\nsubmit_df['Class_8'] = y_pred_final_lgb[:,8]\nsubmit_df['Class_9'] = y_pred_final_lgb[:,0]\nsubmit_df.head()","edbbfa97":"submit_df.to_csv(\".\/LGB_submission.csv\", index=False)","ea59d424":"## Build and validate the model","83d00557":"## Create submission file","f74d03b3":"## Import libraries","e8f654b7":"## Prepare data for model training"}}