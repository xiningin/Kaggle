{"cell_type":{"bae3ef5d":"code","7188e331":"code","4bfac126":"code","aeabe9a8":"code","29ed041f":"code","ab10f8a3":"code","d087d394":"code","cc6c0975":"code","8f1db92c":"code","034b7c76":"code","92e19570":"markdown","a0c5f074":"markdown","5f5776f1":"markdown","3bccb19b":"markdown","a324ae87":"markdown","7b5b2ab3":"markdown","9ae8fd1c":"markdown","5e7de3c8":"markdown","3a39e278":"markdown","a1146fd2":"markdown"},"source":{"bae3ef5d":"import numpy as np # linear algebra\nimport pandas as pd #\nimport numpy as np\nimport os\nimport re\nimport gensim\nimport spacy\nimport string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem.snowball import SnowballStemmer\n\nbiorxiv = pd.read_csv(\"\/kaggle\/input\/clean-csv\/biorxiv_clean.csv\")\nbiorxiv.shape\nbiorxiv.head()\n\nbiorxiv = biorxiv[['paper_id','title','text']].dropna().drop_duplicates()\npmc = pd.read_csv('\/kaggle\/input\/clean-csv-new\/clean_pmc.csv')\npmc = pmc[['paper_id','title','text']].dropna().drop_duplicates()\n\nbiorxiv = pd.concat([biorxiv,pmc]).drop_duplicates()\n\nbiorxiv = biorxiv.sample(n=300)\n\nbiorxiv.head()\n","7188e331":"biorxiv_split = pd.concat([pd.Series(row['paper_id'], row['text'].split('.')) for _, row in biorxiv.iterrows()]).reset_index()","4bfac126":"biorxiv_split.columns = ['sentences','paper_id']\nbiorxiv_split = biorxiv_split.replace('\\n','', regex=True)","aeabe9a8":"! python -m spacy download en_core_web_sm\nimport spacy\nimport en_core_web_sm\nnlp = en_core_web_sm.load()","29ed041f":"\nstemmer = SnowballStemmer(\"english\")\n\ndef text_clean_tokenize(article_data):\n    \n    review_lines = list()\n\n    lines = article_data['text'].values.astype(str).tolist()\n\n    for line in lines:\n        tokens = word_tokenize(line)\n        tokens = [w.lower() for w in tokens]\n        table = str.maketrans('','',string.punctuation)\n        stripped = [w.translate(table) for w in tokens]\n        # remove remaining tokens that are not alphabetic\n        words = [word for word in stripped if word.isalpha()]\n        stop_words = set(stopwords.words('english'))\n        words = [w for w in words if not w in stop_words]\n        words = [stemmer.stem(w) for w in words]\n\n        review_lines.append(words)\n    return(review_lines)\n    \n    \nreview_lines = text_clean_tokenize(biorxiv)","ab10f8a3":"model =  gensim.models.Word2Vec(sentences = review_lines,\n                               size=1000,\n                               window=2,\n                               workers=4,\n                               min_count=2,\n                               seed=42,\n                               iter= 50)\n\nmodel.save(\"word2vec.model\")","d087d394":"import spacy\nnlp = en_core_web_sm.load()\ndef tokenize(sent):\n    doc = nlp.tokenizer(sent)\n    return [token.lower_ for token in doc if not token.is_punct]\n\nnew_df = (biorxiv_split['sentences'].apply(tokenize).apply(pd.Series))\n\nnew_df = new_df.stack()\nnew_df = (new_df.reset_index(level=0)\n                .set_index('level_0')\n                .rename(columns={0: 'word'}))\n\nnew_df = new_df.join(biorxiv_split,how='left')\n\nnew_df = new_df[['word','paper_id','sentences']]\nword_list = list(model.wv.vocab)\nvectors = model.wv[word_list]\nvectors_df = pd.DataFrame(vectors)\nvectors_df['word'] = word_list\nmerged_frame = pd.merge(vectors_df, new_df, on='word')\nmerged_frame_rolled_up = merged_frame.drop('word',axis=1).groupby(['paper_id','sentences']).mean().reset_index()\ndel merged_frame\ndel new_df\ndel vectors","cc6c0975":"questions = {\n    'questions' : [\"What is known about transmission, incubation, and environmental stability of COVID?\",\n                \"What do we know about COVID risk factors?\",\"What do we know about virus genetics, origin, and evolution of COVID?\",\"What do we know about vaccines and therapeutics for COVID?\"]\n}\nquestions = pd.DataFrame(questions)","8f1db92c":"new_df = (questions['questions'].apply(tokenize).apply(pd.Series))\n\nnew_df = new_df.stack()\nnew_df = (new_df.reset_index(level=0)\n                .set_index('level_0')\n                .rename(columns={0: 'word'}))\n\nnew_df = new_df.join(questions,how='left')\n\nnew_df = new_df[['word','questions']]\nword_list = list(model.wv.vocab)\nvectors = model.wv[word_list]\nvectors_df = pd.DataFrame(vectors)\nvectors_df['word'] = word_list\nmerged_frame = pd.merge(vectors_df, new_df, on='word')\nquestion2vec = merged_frame.drop('word',axis=1).groupby(['questions']).mean().reset_index()","034b7c76":"from numpy import dot\nfrom numpy.linalg import norm\n\n\nfor i in range(len(question2vec)):\n    tmp = question2vec.iloc[[i]]\n    tmp = tmp.drop('questions',axis=1)\n    a = np.array(tmp.values)\n    list_of_scores = []\n    for j in range(len(merged_frame_rolled_up)):\n        tmp_ = merged_frame_rolled_up.iloc[[j]]\n        tmp_ = tmp_.drop(['paper_id','sentences'],axis=1)\n        b = np.array(tmp_.values)\n        b = b.T\n        cos_sim = dot(a, b)\/(norm(a)*norm(b))\n        list_of_scores.append(float(cos_sim))\n    df_answer = pd.DataFrame()\n    df_answer['sentence'] = merged_frame_rolled_up['sentences'].tolist()\n    df_answer['scores'] = list_of_scores\n    df_answer['question'] = question2vec.iloc[i]['questions']\n    df_answer.sort_values(by='scores',ascending=False,inplace=True)\n    print('---------------------------- \\n')\n    print('\\n Answers for question: \\n')\n    print(question2vec.iloc[i]['questions'])\n    print(df_answer.head(10)['sentence'].values)\n        \n        ","92e19570":"Before feeding the data into the word2vector (skip-gram) model, the text data is converted to a list object that is passed. The following code snippet removes stopwords, punctuations and stems words so as to remove noise.","a0c5f074":"## Changes\n* Using more advanced techniques to imitate a Q & A bot.\n* Using Decoder & Encoder methodologies to get results in form of an answer. \n* Getting a single paragraph answer with sentences that are connected to each other.\n\nThanks for reading!","5f5776f1":"The resulting list is then passed to the `gensim.models.Word2Vec()` function. Each word is represented by a vector that is 1000 elements long.And at a time, four words surrounding the context word is used to train the model.","3bccb19b":"## Sentence breakdown\n\nAs we look for answers in sentences,we break down each article into its sentence constituents.","a324ae87":"After the numeric vector representation of each word is obtained, these are used to create numeric representations of papers, sentence-wise. For each paper, the word2vec representations of each constituent words is found and the word2vec representation of each sentence is found by averaging.","7b5b2ab3":"To ease text processing for english words, the spacy's english module library is used. This helps in tackling tokenization","9ae8fd1c":"\n## Introduction\n\nI imported the clean biorxiv file from the data conversion and cleaning kernel by xhlulu. https:\/\/www.kaggle.com\/xhlulu\/cord-19-eda-parse-json-and-generate-clean-csv.\n\n## Word2Vec\nWord2Vec is a method to represent words in a numerical - vector format such that words that are closely related to each other are close to each other in numeric vector space. This method was developed by Thomas Mikolov in 2013 at Google.\n\nEach word in the corpus is modeled against surrounding words, in such a way that the surrounding words get maximum probabilities of occurence. The mapping that allows this to happen , becomes the word2vec representation of the word. The number of surrounding words can be chosen through a model parameter called \"window size\". The length of the vector representation is chosen using the parameter 'size'.\n\nIn this notebook, the library gensim is used to construct the word2vec models\n\n## Reading Comprehension\n\nReading comprehension is a way to answer questions with respect to the given text. This is same as the English tests we used to get back in school, where a paragraph would be given about a certain subject and related questions are asked.\n\nOne of the naive ways to answer the questions was to look at the question and to find the paragraph\/sentence that closely resembled the question semantically. We are going to do that here, using word2vec representations\n\n## Library Load\n\nIn the following code snippet, we look at the cleaned csv data and take a random sample of 300 articles for the sake of memory.","5e7de3c8":"After we get the questions, each question is converted to its word2vec representation.","3a39e278":"## Questions\nWe get the list of questions as mentioned by the providers of this dataset. The questions are stored in a dataframe format.","a1146fd2":"For each question, the cosine similarity is calculated against all the sentences. The sentences with top 10 scores are printed as the answers."}}