{"cell_type":{"679df008":"code","50265e25":"code","415cbe07":"code","b1fd0eee":"code","3ac8149e":"code","c5cbc4df":"code","857c9422":"code","0ebc5e02":"code","7a075bc2":"code","75ba6939":"code","a5a6328d":"code","407d9d9e":"code","2e3d792d":"code","63330e5f":"code","824f200c":"code","a9c494e8":"code","03e048f8":"code","03ff3ef4":"code","1371128d":"code","54d85bde":"code","6f13fe18":"code","06dcb7bb":"code","c6051d28":"code","00ed812a":"code","c8e85765":"code","58e3f403":"code","a07b3f7a":"code","6324bbd8":"code","d9dd2133":"code","a206767d":"code","fa6e9166":"code","2fab2cf7":"code","c90f7964":"code","a8734ea9":"code","ff31667c":"code","d194c09d":"code","64472854":"code","21bc228a":"code","97ab304e":"code","3c3a980d":"code","065c7b7f":"code","2875c054":"code","297d8d73":"code","89a43cb7":"code","3b485697":"code","c93f7858":"code","3abf9ca6":"code","c44c9668":"code","2840de4a":"code","e078ba7b":"code","725ef133":"code","c6ea839e":"code","f465d64c":"code","696d439d":"code","4479959a":"code","3891074c":"code","1550db3b":"code","8ab04862":"code","e07a690e":"code","cb1e95b9":"code","69a5e9bb":"code","93663bb4":"code","ff96fbdd":"code","69de6758":"code","5c1f9b53":"code","ce185c9c":"code","3f5290b7":"code","725d50e8":"code","f60417ae":"code","39c5eb1b":"code","c2ca3d0f":"code","d2c8bf8c":"code","6cb3a95a":"code","b1957c93":"code","c15776fb":"code","3a1f2778":"markdown","1020196c":"markdown","d32049be":"markdown","8c17f4f2":"markdown","80dd38e6":"markdown","12bf614b":"markdown","be0aa014":"markdown","9a1bffe4":"markdown","ee7760cb":"markdown","b88d5fb3":"markdown","643d342b":"markdown","089ab8d6":"markdown","dba52274":"markdown","306ea321":"markdown","bd3a8328":"markdown","9541f036":"markdown","a97b9a18":"markdown","a1bcc4c1":"markdown","1db3066f":"markdown","1540ea27":"markdown","960aa839":"markdown","a1aba755":"markdown","df6e8032":"markdown","ba70d3c5":"markdown","ca01d5cd":"markdown","3b97176f":"markdown","f605976b":"markdown","1bab43cf":"markdown","2d29eeb0":"markdown","8e30ad1d":"markdown","1b051bbf":"markdown","e1c75782":"markdown","8dd67a40":"markdown","f59eba17":"markdown","cbaa354f":"markdown","6c1d8ec0":"markdown","b2a41934":"markdown","993c577a":"markdown","1a295026":"markdown","a67b5c99":"markdown","46f0c5b1":"markdown"},"source":{"679df008":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n%matplotlib inline\nfrom pylab import rcParams\nfrom plotly import tools\n#import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport seaborn as sns\nimport math as math\nimport datetime as dt\nimport sklearn\nimport fbprophet\n\nimport statsmodels.api as sm\nfrom numpy.random import normal, seed\nfrom scipy.stats import norm\nfrom statsmodels.tsa.arima_model import ARMA\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.arima_process import ArmaProcess\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom sklearn.metrics import mean_squared_error\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\npd.set_option('precision', 5)\npd.options.display.float_format = '{:20,.2f}'.format\nnp.set_printoptions(suppress =True)\n\nimport os\nprint(os.listdir(\"..\/input\"))","50265e25":"google = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/GOOGL_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\ngoogle.head()","415cbe07":"humidity = pd.read_csv('..\/input\/historical-hourly-weather-data\/humidity.csv', index_col='datetime', parse_dates=['datetime'])\nhumidity.tail(2)","b1fd0eee":"humidity = humidity.iloc[1:]\nhumidity = humidity.fillna(method='ffill')\nhumidity.head(2)","3ac8149e":"humidity[\"Kansas City\"].asfreq('M').plot() # asfreq method is used to convert a time series to a specified frequency. Here it is monthly frequency.\nplt.title('Humidity in Kansas City over time(Monthly frequency)')\nplt.show()","c5cbc4df":"google['2008':'2010'].plot(subplots=True, figsize=(10,12))\nplt.title('Google stock attributes from 2008 to 2010')\nplt.savefig('stocks.png')\nplt.show()","857c9422":"# Creating a Timestamp\ntimestamp = pd.Timestamp(2017, 1, 1, 12)\ntimestamp","0ebc5e02":"# Creating a period\nperiod = pd.Period('2017-01-01')\nperiod","7a075bc2":"# Checking if the given timestamp exists in the given period\nperiod.start_time < timestamp < period.end_time","75ba6939":"# Converting timestamp to period\nnew_period = timestamp.to_period(freq='H')\nnew_period","a5a6328d":"print([w for w in dir(timestamp) if not w.startswith('_')])","407d9d9e":"print([w for w in dir(period) if not w.startswith('_')])","2e3d792d":"# Converting period to timestamp\nnew_timestamp = period.to_timestamp(freq='H', how='start')\nnew_timestamp","63330e5f":"# Creating a datetimeindex with daily frequency\ndr1 = pd.date_range(start='1\/1\/18', end='1\/9\/18')\ndr1","824f200c":"# Creating a datetimeindex with monthly frequency\ndr2 = pd.date_range(start='1\/1\/18', end='1\/1\/19', freq='M')\ndr2","a9c494e8":"# Creating a datetimeindex without specifying start date and using periods\ndr3 = pd.date_range(end='1\/4\/2014', periods=8)\ndr3","03e048f8":"# Creating a datetimeindex specifying start date , end date and periods\ndr4 = pd.date_range(start='2013-04-24', end='2014-11-27', periods=3)\ndr4","03ff3ef4":"df = pd.DataFrame({'year': [2015, 2016], 'month': [2, 3], 'day': [4, 5]})\ndf","1371128d":"df = pd.to_datetime(df)\ndf","54d85bde":"df = pd.to_datetime('01-01-2017')\ndf","6f13fe18":"humidity[\"Vancouver\"].asfreq('M').plot(legend=True)\nshifted = humidity[\"Vancouver\"].asfreq('M').shift(10).plot(legend=True)\nshifted.legend(['Vancouver','Vancouver_lagged'])\nplt.show()","06dcb7bb":"# Let's use pressure data to demonstrate this\npressure = pd.read_csv('..\/input\/historical-hourly-weather-data\/pressure.csv', index_col='datetime', parse_dates=['datetime'])\npressure.tail()","c6051d28":"pressure = pressure.iloc[1:]\npressure = pressure.fillna(method='ffill')\npressure.tail()","00ed812a":"pressure = pressure.fillna(method='bfill')\npressure.head()","c8e85765":"# Shape before resampling(downsampling)\npressure.shape","58e3f403":"# We downsample from hourly to 3 day frequency aggregated using mean\npressure = pressure.resample('3D').mean()\n# Shape after resampling(downsampling)\ndisplay(pressure.shape)\npressure.head()","a07b3f7a":"# Much less rows are left. Now, we will upsample from 3 day frequency to daily frequency\npressure = pressure.resample('D').pad()\n# Shape after resampling(upsampling)\ndisplay(pressure.shape)\npressure.head()","6324bbd8":"google['Change'] = google.High.div(google.High.shift())\ngoogle['Change'].plot(figsize=(20,8))","d9dd2133":"google['Return'] = google.Change.sub(1).mul(100)\ngoogle['Return'].plot(figsize=(20,8))","a206767d":"google.High.pct_change().mul(100).plot(figsize=(20,6)) # Another way to calculate returns","fa6e9166":"google.High.diff().plot(figsize=(20,6))","2fab2cf7":"# We choose microsoft stocks to compare them with google\nmicrosoft = pd.read_csv('..\/input\/stock-time-series-20050101-to-20171231\/MSFT_2006-01-01_to_2018-01-01.csv', index_col='Date', parse_dates=['Date'])\nmicrosoft.head(2)","c90f7964":"# Plotting before normalization\ngoogle.High.plot()\nmicrosoft.High.plot()\nplt.legend(['Google','Microsoft'])\nplt.show()","a8734ea9":"# Normalizing and comparison\n# Both stocks start from 100\nnormalized_google = google.High.div(google.High.iloc[0]).mul(100)\nnormalized_microsoft = microsoft.High.div(microsoft.High.iloc[0]).mul(100)\nnormalized_google.plot()\nnormalized_microsoft.plot()\nplt.legend(['Google','Microsoft'])\nplt.show()","ff31667c":"# Rolling window functions\nrolling_google90 = google.High.rolling('90D').mean()\n#rolling_google60 = google.High.rolling('60D').mean()\n#rolling_google30 = google.High.rolling('30D').mean()\ngoogle.High.plot()\nrolling_google90.plot()\n#rolling_google60.plot()\n#rolling_google30.plot()\nplt.legend(['High','Rolling Mean 90D'])\n#plt.legend(['High','Rolling Mean 90D', 'Rolling Mean 60D', 'Rolling Mean 30D'])\n# Plotting a rolling mean of 90 day window with original High attribute of google stocks\nplt.show()","d194c09d":"# Expanding window functions\nmicrosoft_mean = microsoft.High.expanding().mean()\nmicrosoft_std = microsoft.High.expanding().std()\nmicrosoft.High.plot()\nmicrosoft_mean.plot()\nmicrosoft_std.plot()\nplt.legend(['High','Expanding Mean','Expanding Standard Deviation'])\nplt.show()","64472854":"# OHLC chart of June 2008\ntrace = go.Ohlc(x=google['06-2008'].index,\n                open=google['06-2008'].Open,\n                high=google['06-2008'].High,\n                low=google['06-2008'].Low,\n                close=google['06-2008'].Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","21bc228a":"# OHLC chart of 2008\ntrace = go.Ohlc(x=google['2008'].index,\n                open=google['2008'].Open,\n                high=google['2008'].High,\n                low=google['2008'].Low,\n                close=google['2008'].Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","97ab304e":"# OHLC chart of 2008\ntrace = go.Ohlc(x=google.index,\n                open=google.Open,\n                high=google.High,\n                low=google.Low,\n                close=google.Close)\ndata = [trace]\niplot(data, filename='simple_ohlc')","3c3a980d":"# Candlestick chart of march 2008\ntrace = go.Candlestick(x=google['03-2008'].index,\n                open=google['03-2008'].Open,\n                high=google['03-2008'].High,\n                low=google['03-2008'].Low,\n                close=google['03-2008'].Close)\ndata = [trace]\niplot(data, filename='simple_candlestick')","065c7b7f":"# Candlestick chart of 2008\ntrace = go.Candlestick(x=google['2008'].index,\n                open=google['2008'].Open,\n                high=google['2008'].High,\n                low=google['2008'].Low,\n                close=google['2008'].Close)\ndata = [trace]\niplot(data, filename='simple_candlestick')","2875c054":"# Candlestick chart of 2006-2018\ntrace = go.Candlestick(x=google.index,\n                open=google.Open,\n                high=google.High,\n                low=google.Low,\n                close=google.Close)\ndata = [trace]\niplot(data, filename='simple_candlestick')","297d8d73":"# Autocorrelation of humidity of San Diego\nplot_acf(humidity[\"San Diego\"],lags=55,title=\"San Diego\")\nplt.show()","89a43cb7":"# Partial Autocorrelation of humidity of San Diego\nplot_pacf(humidity[\"San Diego\"],lags=25)\nplt.show()","3b485697":"# Partial Autocorrelation of closing price of microsoft stocks\nplot_pacf(microsoft[\"Close\"],lags=25)\nplt.show()","c93f7858":"# Let's take Google stocks High for this\ngoogle[\"High\"].plot(figsize=(16,8))","3abf9ca6":"# Now, for decomposition...\nrcParams['figure.figsize'] = 11, 9\ndecomposed_google_volume = sm.tsa.seasonal_decompose(google[\"High\"],freq=360) # The frequncy is annual\nfigure = decomposed_google_volume.plot()\nplt.show()","c44c9668":"# Plotting white noise\nrcParams['figure.figsize'] = 16, 6\nwhite_noise = np.random.normal(loc=0, scale=1, size=1000)\n# loc is mean, scale is variance\nplt.plot(white_noise)","2840de4a":"# Plotting autocorrelation of white noise\nplot_acf(white_noise,lags=20)\nplt.show()","e078ba7b":"# Augmented Dickey-Fuller test on volume of google and microsoft stocks \nadf = adfuller(microsoft[\"Volume\"])\nprint(\"p-value of microsoft: {}\".format(float(adf[1])))\nadf = adfuller(google[\"Volume\"])\nprint(\"p-value of google: {}\".format(float(adf[1])))","725ef133":"seed(42)\nrcParams['figure.figsize'] = 16, 6\nrandom_walk = normal(loc=0, scale=0.01, size=1000)\nplt.plot(random_walk)\nplt.show()","c6ea839e":"fig = ff.create_distplot([random_walk],['Random Walk'],bin_size=0.001)\niplot(fig, filename='Basic Distplot')","f465d64c":"# The original non-stationary plot\ndecomposed_google_volume.trend.plot()","696d439d":"# The new stationary plot\ndecomposed_google_volume.trend.diff().plot()","4479959a":"# AR(1) MA(1) model:AR parameter = +0.9\nrcParams['figure.figsize'] = 16, 12\nplt.subplot(4,1,1)\nar1 = np.array([1, -0.9]) # We choose -0.9 as AR parameter is +0.9\nma1 = np.array([1])\nAR1 = ArmaProcess(ar1, ma1)\nsim1 = AR1.generate_sample(nsample=1000)\nplt.title('AR(1) model: AR parameter = +0.9')\nplt.plot(sim1)\n# We will take care of MA model later\n# AR(1) MA(1) AR parameter = -0.9\nplt.subplot(4,1,2)\nar2 = np.array([1, 0.9]) # We choose +0.9 as AR parameter is -0.9\nma2 = np.array([1])\nAR2 = ArmaProcess(ar2, ma2)\nsim2 = AR2.generate_sample(nsample=1000)\nplt.title('AR(1) model: AR parameter = -0.9')\nplt.plot(sim2)\n# AR(2) MA(1) AR parameter = 0.9\nplt.subplot(4,1,3)\nar3 = np.array([2, -0.9]) # We choose -0.9 as AR parameter is +0.9\nma3 = np.array([1])\nAR3 = ArmaProcess(ar3, ma3)\nsim3 = AR3.generate_sample(nsample=1000)\nplt.title('AR(2) model: AR parameter = +0.9')\nplt.plot(sim3)\n# AR(2) MA(1) AR parameter = -0.9\nplt.subplot(4,1,4)\nar4 = np.array([2, 0.9]) # We choose +0.9 as AR parameter is -0.9\nma4 = np.array([1])\nAR4 = ArmaProcess(ar4, ma4)\nsim4 = AR4.generate_sample(nsample=1000)\nplt.title('AR(2) model: AR parameter = -0.9')\nplt.plot(sim4)\nplt.show()","3891074c":"model = ARMA(sim1, order=(1,0))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={} ,\u03d5={}\".format(result.params[0],result.params[1]))","1550db3b":"# Predicting simulated AR(1) model \nresult.plot_predict(start=900, end=1010)\nplt.show()","8ab04862":"rmse = math.sqrt(mean_squared_error(sim1[900:1011], result.predict(start=900,end=999)))\nprint(\"The root mean squared error is {}.\".format(rmse))","e07a690e":"# Predicting humidity level of Montreal\nhumid = ARMA(humidity[\"Montreal\"].diff().iloc[1:].values, order=(1,0))\nres = humid.fit()\nres.plot_predict(start=1000, end=1100)\nplt.show()","cb1e95b9":"rmse = math.sqrt(mean_squared_error(humidity[\"Montreal\"].diff().iloc[900:1000].values, result.predict(start=900,end=999)))\nprint(\"The root mean squared error is {}.\".format(rmse))","69a5e9bb":"# Predicting closing prices of google\nhumid = ARMA(google[\"Close\"].diff().iloc[1:].values, order=(1,0))\nres = humid.fit()\nres.plot_predict(start=900, end=1010)\nplt.show()","93663bb4":"rcParams['figure.figsize'] = 16, 6\nar1 = np.array([1])\nma1 = np.array([1, -0.5])\nMA1 = ArmaProcess(ar1, ma1)\nsim1 = MA1.generate_sample(nsample=1000)\nplt.plot(sim1)","ff96fbdd":"model = ARMA(sim1, order=(0,1))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={} ,\u03b8={}\".format(result.params[0],result.params[1]))","69de6758":"# Forecasting and predicting montreal humidity\nmodel = ARMA(humidity[\"Montreal\"].diff().iloc[1:].values, order=(0,3))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={} ,\u03b8={}\".format(result.params[0],result.params[1]))\nresult.plot_predict(start=1000, end=1100)\nplt.show()","5c1f9b53":"rmse = math.sqrt(mean_squared_error(humidity[\"Montreal\"].diff().iloc[1000:1101].values, result.predict(start=1000,end=1100)))\nprint(\"The root mean squared error is {}.\".format(rmse))","ce185c9c":"# Forecasting and predicting microsoft stocks volume\nmodel = ARMA(microsoft[\"Volume\"].diff().iloc[1:].values, order=(3,3))\nresult = model.fit()\nprint(result.summary())\nprint(\"\u03bc={}, \u03d5={}, \u03b8={}\".format(result.params[0],result.params[1],result.params[2]))\nresult.plot_predict(start=1000, end=1100)\nplt.show()","3f5290b7":"rmse = math.sqrt(mean_squared_error(microsoft[\"Volume\"].diff().iloc[1000:1101].values, result.predict(start=1000,end=1100)))\nprint(\"The root mean squared error is {}.\".format(rmse))","725d50e8":"# Predicting the microsoft stocks volume\nrcParams['figure.figsize'] = 16, 6\nmodel = ARIMA(microsoft[\"Volume\"].diff().iloc[1:].values, order=(2,1,0))\nresult = model.fit()\nprint(result.summary())\nresult.plot_predict(start=700, end=1000)\nplt.show()","f60417ae":"rmse = math.sqrt(mean_squared_error(microsoft[\"Volume\"].diff().iloc[700:1001].values, result.predict(start=700,end=1000)))\nprint(\"The root mean squared error is {}.\".format(rmse))","39c5eb1b":"# Predicting closing price of Google and microsoft\ntrain_sample = pd.concat([google[\"Close\"].diff().iloc[1:],microsoft[\"Close\"].diff().iloc[1:]],axis=1)\nmodel = sm.tsa.VARMAX(train_sample,order=(2,1),trend='c')\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=1000)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample.iloc[1:1002].values, predicted_result.values))\nprint(\"The root mean squared error is {}.\".format(rmse))","c2ca3d0f":"# Predicting closing price of Google'\ntrain_sample = google[\"Close\"].diff().iloc[1:].values\nmodel = sm.tsa.SARIMAX(train_sample,order=(4,0,4),trend='c')\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=500)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample[1:502], predicted_result))\nprint(\"The root mean squared error is {}.\".format(rmse))","d2c8bf8c":"plt.plot(train_sample[1:502],color='red')\nplt.plot(predicted_result,color='blue')\nplt.legend(['Actual','Predicted'])\nplt.title('Google Closing prices')\nplt.show()","6cb3a95a":"# Predicting closing price of Google'\ntrain_sample = google[\"Close\"].diff().iloc[1:].values\nmodel = sm.tsa.UnobservedComponents(train_sample,'local level')\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=500)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample[1:502], predicted_result))\nprint(\"The root mean squared error is {}.\".format(rmse))","b1957c93":"plt.plot(train_sample[1:502],color='red')\nplt.plot(predicted_result,color='blue')\nplt.legend(['Actual','Predicted'])\nplt.title('Google Closing prices')\nplt.show()","c15776fb":"# Predicting closing price of Google and microsoft\ntrain_sample = pd.concat([google[\"Close\"].diff().iloc[1:],microsoft[\"Close\"].diff().iloc[1:]],axis=1)\nmodel = sm.tsa.DynamicFactor(train_sample, k_factors=1, factor_order=2)\nresult = model.fit(maxiter=1000,disp=False)\nprint(result.summary())\npredicted_result = result.predict(start=0, end=1000)\nresult.plot_diagnostics()\n# calculating error\nrmse = math.sqrt(mean_squared_error(train_sample.iloc[1:1002].values, predicted_result.values))\nprint(\"The root mean squared error is {}.\".format(rmse))","3a1f2778":"## Window functions\n#### Window functions are used to identify sub periods, calculates sub-metrics of sub-periods.\n> Rolling - Same size and sliding<br\/>\n> Expanding - Contains all prior values","1020196c":"### Stationarity\nA stationary time series is one whose statistical properties such as mean, variance, autocorrelation, etc. are all constant over time.\n\n> Strong stationarity: is a stochastic process whose unconditional joint probability distribution does not change when shifted in time. Consequently, parameters such as mean and variance also do not change over time.<br\/>\n\n> Weak stationarity: is a process where mean, variance, autocorrelation are constant throughout the time\nStationarity is important as non-stationary series that depend on time have too many parameters to account for when modelling the time series. diff() method can easily convert a non-stationary series to a stationary series.<br\/>\n\nWe will try to decompose seasonal component of the above decomposed time series.","d32049be":"#### First, we used ffill parameter which propagates last valid observation to fill gaps. Then we use bfill to propogate next valid observation to fill gaps.","8c17f4f2":"ARMA model shows much better results than AR and MA models.\n\n## ARIMA models\nAn autoregressive integrated moving average (ARIMA) model is a generalization of an autoregressive moving average (ARMA) model. Both of these models are fitted to time series data either to better understand the data or to predict future points in the series (forecasting). ARIMA models are applied in some cases where data show evidence of non-stationarity, where an initial differencing step (corresponding to the \"integrated\" part of the model) can be applied one or more times to eliminate the non-stationarity. ARIMA model is of the form: ARIMA(p,d,q): p is AR parameter, d is differential parameter, q is MA parameter\n\nARIMA(1,0,0)\nyt = a1yt-1 + \u03f5t\n\nARIMA(1,0,1)\nyt = a1yt-1 + \u03f5t + b1\u03f5t-1\n\nARIMA(1,1,1)\n\u0394yt = a1\u0394yt-1 + \u03f5t + b1\u03f5t-1 where \u0394yt = yt - yt-1\n\n### Prediction using ARIMA model","80dd38e6":"> https:\/\/www.statsmodels.org\/dev\/user-guide.html\n\n> https:\/\/www.statsmodels.org\/dev\/tsa.html\n\n> https:\/\/www.statsmodels.org\/dev\/statespace.html\n\n> https:\/\/www.statsmodels.org\/dev\/vector_ar.html","12bf614b":"### SARIMA models\nSARIMA models are useful for modeling seasonal time series, in which the mean and other statistics for a given season are not stationary across the years. The SARIMA model defined constitutes a straightforward extension of the nonseasonal autoregressive-moving average (ARMA) and autoregressive integrated moving average (ARIMA) models presented","be0aa014":"## Unobserved components\nA UCM decomposes the response series into components such as trend, seasons, cycles, and the regression effects due to predictor series. The following model shows a possible scenario:\n\n> http:\/\/support.sas.com\/documentation\/cdl\/en\/etsug\/66840\/HTML\/default\/viewer.htm#etsug_ucm_details01.htm","9a1bffe4":"\u03d5 is around 0.9 which is what we chose as AR parameter in our first simulated model.\n\n### Predicting the models","ee7760cb":"## Stock Returns","b88d5fb3":"## Percent Change","643d342b":"## Autocorrelation and Partial Autocorrelation\n> Autocorrelation - The autocorrelation function (ACF) measures how a series is correlated with itself at different lags.<br\/>\n\n> Partial Autocorrelation - The partial autocorrelation function can be interpreted as a regression of the series against its past lags. The terms can be interpreted the same way as a standard linear regression, that is the contribution of a change in that particular lag while holding others constant.\n\n### Autocorrelation","089ab8d6":"## Time series decomposition and Random walks\n### Trends, seasonality and noise\n\n<h5>These are the components of a time series<\/h5>\n\n> Trend - Consistent upwards or downwards slope of a time series<br\/>\n> Seasonality - Clear periodic pattern of a time series(like sine funtion)<br\/>\n> Noise - Outliers or missing values<br\/>","dba52274":"### Note the inbuilt functions accessible for a Period object","306ea321":"> Now, observe that rolling mean plot is a smoother version of the original plot.","bd3a8328":"Now, for ARMA models.\n\n## ARMA models\nAutoregressive\u2013moving-average (ARMA) models provide a parsimonious description of a (weakly) stationary stochastic process in terms of two polynomials, one for the autoregression and the second for the moving average. It's the fusion of AR and MA models.\n\nARMA(1,1) model\nRt = \u03bc + \u03d5Rt-1 + \u03f5t + \u03b8\u03f5t-1\nBasically, Today's return = mean + Yesterday's return + noise + yesterday's noise.\n\n### Prediction using ARMA models\nI am not simulating any model because it's quite similar to AR and MA models. Just forecasting and predictions for this one.","9541f036":"## State Space methods\nA general state space model is of the form\n\ny(t)=Z(t)\u03b1(t)+d(t)+\u03b5(t)\n\n\u03b1(t)=T(t)\u03b1(t)\u22121+c(t)+R(t)\u03b7(t)\n\nwhere y(t) refers to the observation vector at time t, \u03b1t refers to the (unobserved) state vector at time t, and where the irregular components are defined as\n\n\u03b5t\u223cN(0,Ht)\n\n\u03b7t\u223cN(0,Qt)\n\nThe remaining variables (Z(t),d(t),H(t),T(t),c(t),R(t),Q(t)) in the equations are matrices describing the process. Their variable names and dimensions are as follows\n\nZ : design (k_endog\u00d7k_states\u00d7nobs)\n\nd : obs_intercept (k_endog\u00d7nobs)\n\nH : obs_cov (k_endog\u00d7k_endog\u00d7nobs)\n\nT : transition (k_states\u00d7k_states\u00d7nobs)\n\nc : state_intercept (k_states\u00d7nobs)\n\nR : selection (k_states\u00d7k_posdef\u00d7nobs)\n\nQ : state_cov (k_posdef\u00d7k_posdef\u00d7nobs)\n\nIn the case that one of the matrices is time-invariant (so that, for example, Z(t)=Z(t)+1 \u2200 t), its last dimension may be of size 1 rather than size nobs.\n\nThis generic form encapsulates many of the most popular linear time series models (see below) and is very flexible, allowing estimation with missing observations, forecasting, impulse response functions, and much more.","a97b9a18":"# Shifting and lags\n#### We can shift index by desired number of periods with an optional time frequency. This is useful when comparing the time series with a past of itself","a1bcc4c1":"There are always better models.\n\n## MA models\nThe moving-average (MA) model is a common approach for modeling univariate time series. The moving-average model specifies that the output variable depends linearly on the current and various past values of a stochastic (imperfectly predictable) term.\n\nMA(1) model\nRt = \u03bc + \u03f5t1 + \u03b8\u03f5t-1\n\nIt translates to Today's returns = mean + today's noise + yesterday's noise\n\nAs there is only 1 lagged value in RHS, it is an MA model of order 1\n### Simulating MA(1) model","1db3066f":"# This entire kernel is completely forked. I am trying create a \"Everything in Time Series\" kernel. \n# In the coming months, I will include my own codes and modules for Deep Learning with Time Series(RNN|LSTM|GRU), Reinforcemnet Learning based methods, Prophet (facebook's library for time series), to create a comparison between Traditional vs Latest Methods and when to use which. Please ignore this Workbook until then. ","1540ea27":"### Comparing two or more time series\n#### We will compare 2 time series by normalizing them. This is achieved by dividing each time series element of all time series by the first element. This way both series start at the same point and can be easily compared.","960aa839":"### Absolute change in successive rows","a1aba755":"### Prediction using MA models","df6e8032":"# Using date_range\n#### What is date_range and how is it useful?\n#### date_range is a method that returns a fixed frequency datetimeindex. It is quite useful when creating your own time series attribute for pre-existing data or arranging the whole data around the time series attribute created by you.\n","ba70d3c5":"### Before Running this notebook, to get an association, watch this video \n> https:\/\/www.youtube.com\/watch?v=_vQ0W_qXMxk","ca01d5cd":"Taking the slight lag into account, this is a fine model.\n\n## VAR models\nVector autoregression (VAR) is a stochastic process model used to capture the linear interdependencies among multiple time series. VAR models generalize the univariate autoregressive model (AR model) by allowing for more than one evolving variable. All variables in a VAR enter the model in the same way: each variable has an equation explaining its evolution based on its own lagged values, the lagged values of the other model variables, and an error term. VAR modeling does not require as much knowledge about the forces influencing a variable as do structural models with simultaneous equations: The only prior knowledge required is a list of variables which can be hypothesized to affect each other intertemporally.\n\n### Links \n> http:\/\/www.ams.sunysb.edu\/~zhu\/ams586\/VAR_Lecture2.pdf\n> https:\/\/www2.bc.edu\/matteo-iacoviello\/teach\/0809\/EC751_files\/var.pdf\n> https:\/\/faculty.washington.edu\/ezivot\/econ584\/notes\/varModels.pdf\n> http:\/\/statmath.wu.ac.at\/~hauser\/LVs\/FinEtricsQF\/FEtrics_Chp2.pdf\n> http:\/\/jerrydwyer.com\/pdf\/lectvar.pdf\n> https:\/\/www.frbatlanta.org\/-\/media\/documents\/research\/publications\/economic-review\/1999\/vol84no1_robertson-tallman.pdf\n> https:\/\/en.wikipedia.org\/wiki\/Vector_autoregression","3b97176f":"### Forecasting the simulated MA model","f605976b":"### Candlestick charts\nThis type of chart is used as a trading tool to visualise and analyse the price movements over time for securities, derivatives, currencies, stocks, bonds, commodities, etc. Although the symbols used in Candlestick Charts resemble a Box Plot, they function differently and therefore, are not to be confused with one another.\n\nCandlestick Charts display multiple bits of price information such as the open price, close price, highest price and lowest price through the use of candlestick-like symbols. Each symbol represents the compressed trading activity for a single time period (a minute, hour, day, month, etc). Each Candlestick symbol is plotted along a time scale on the x-axis, to show the trading activity over time.\n\nThe main rectangle in the symbol is known as the real body, which is used to display the range between the open and close price of that time period. While the lines extending from the bottom and top of the real body is known as the lower and upper shadows (or wick). Each shadow represents the highest or lowest price traded during the time period represented. When the market is Bullish (the closing price is higher than it opened), then the body is coloured typically white or green. But when the market is Bearish (the closing price is lower than it opened), then the body is usually coloured either black or red.\n\nCandlestick Charts are great for detecting and predicting market trends over time and are useful for interpreting the day-to-day sentiment of the market, through each candlestick symbol's colouring and shape. For example, the longer the body is, the more intense the selling or buying pressure is. While, a very short body, would indicate that there is very little price movement in that time period and represents consolidation.\n\nCandlestick Charts help reveal the market psychology (the fear and greed experienced by sellers and buyers) through the various indicators, such as shape and colour, but also by the many identifiable patterns that can be found in Candlestick Charts. In total, there are 42 recognised patterns that are divided into simple and complex patterns. These patterns found in Candlestick Charts are useful for displaying price relationships and can be used for predicting the possible future movement of the market. You can find a list and description of each pattern here.\n\nPlease bear in mind, that Candlestick Charts don't express the events taking place between the open and close price - only the relationship between the two prices. So you can't tell how volatile trading was within that single time period.","1bab43cf":"### Partial Autocorrelation","2d29eeb0":"> https:\/\/www.statsmodels.org\/dev\/statespace.html\n>","8e30ad1d":"### Forecasting a simulated model","1b051bbf":"### Note the inbuilt functions accessible for a Timestamp object","e1c75782":"# Timestamps and Periods\n#### What are timestamps and periods and how are they useful?\n#### Timestamps are used to represent a point in time. Periods represent an interval in time. Periods can used to check if a specific event in the given period. They can  also be converted to each other's form.\n\n","8dd67a40":"> There is clearly an upward trend in the above plot.<br\/>\n> You can also see the uniform seasonal change.<br\/>\n> Non-uniform noise that represent outliers and missing values<br\/>\n\n### White noise\nWhite noise has...\n\n> Constant mean<br\/>\n> Constant variance<br\/>\n> Zero auto-correlation at all lags<br\/>","f59eba17":"## Modelling using statstools\n### AR models\nAn autoregressive (AR) model is a representation of a type of random process; as such, it is used to describe certain time-varying processes in nature, economics, etc. The autoregressive model specifies that the output variable depends linearly on its own previous values and on a stochastic term (an imperfectly predictable term); thus the model is in the form of a stochastic difference equation.\n\nAR(1) model\nRt = \u03bc + \u03d5Rt-1 + \u03b5t\n\nAs RHS has only one lagged value(Rt-1)this is called AR model of order 1 where \u03bc is mean and \u03b5 is noise at time t\nIf \u03d5 = 1, it is random walk. Else if \u03d5 = 0, it is white noise. Else if -1 < \u03d5 < 1, it is stationary. If \u03d5 is -ve, there is men reversion. If \u03d5 is +ve, there is momentum.\n\nAR(2) model\nRt = \u03bc + \u03d51Rt-1 + \u03d52Rt-2 + \u03b5t\n\nAR(3) model\nRt = \u03bc + \u03d51Rt-1 + \u03d52Rt-2 + \u03d53Rt-3 + \u03b5t\n\n### Simulating AR(1) model","cbaa354f":"See how all lags are statistically insigficant as they lie inside the confidence interval(shaded portion).\n\n## Random Walk\nA random walk is a mathematical object, known as a stochastic or random process, that describes a path that consists of a succession of random steps on some mathematical space such as the integers.\n\nIn general if we talk about stocks, Today's Price = Yesterday's Price + Noise\n\nPt = Pt-1 + \u03b5t\nRandom walks can't be forecasted because well, noise is random.\n\nRandom Walk with Drift(drift(\u03bc) is zero-mean)\n\nPt - Pt-1 = \u03bc + \u03b5t\n\nRegression test for random walk\n\nPt = \u03b1 + \u03b2Pt-1 + \u03b5t\nEquivalent to Pt - Pt-1 = \u03b1 + \u03b2Pt-1 + \u03b5t\n\nTest:\n\nH0: \u03b2 = 1 (This is a random walk)\nH1: \u03b2 < 1 (This is not a random walk)\n\nDickey-Fuller Test:\n\nH0: \u03b2 = 0 (This is a random walk)\nH1: \u03b2 < 0 (This is not a random walk)\n\n### Augmented Dickey-Fuller test\nAn augmented Dickey\u2013Fuller test (ADF) tests the null hypothesis that a unit root is present in a time series sample. It is basically Dickey-Fuller test with more lagged changes on RHS.","6c1d8ec0":"### Dynamic Factor models\nDynamic-factor models are flexible models for multivariate time series in which the observed endogenous variables are linear functions of exogenous covariates and unobserved factors, which have a vector autoregressive structure. The unobserved factors may also be a function of exogenous covariates. The disturbances in the equations for the dependent variables may be autocorrelated.","b2a41934":"## OHLC charts\n> An OHLC chart is any type of price chart that shows the open, high, low and close price of a certain time period. Open-high-low-close Charts (or OHLC Charts) are used as a trading tool to visualise and analyse the price changes over time for securities, currencies, stocks, bonds, commodities, etc. OHLC Charts are useful for interpreting the day-to-day sentiment of the market and forecasting any future price changes through the patterns produced.<br\/>\n\n> The y-axis on an OHLC Chart is used for the price scale, while the x-axis is the timescale. On each single time period, an OHLC Charts plots a symbol that represents two ranges: the highest and lowest prices traded, and also the opening and closing price on that single time period (for example in a day). On the range symbol, the high and low price ranges are represented by the length of the main vertical line. The open and close prices are represented by the vertical positioning of tick-marks that appear on the left (representing the open price) and on right (representing the close price) sides of the high-low vertical line.<br\/>\n\n> Colour can be assigned to each OHLC Chart symbol, to distinguish whether the market is \"bullish\" (the closing price is higher then it opened) or \"bearish\" (the closing price is lower then it opened).","993c577a":"# Resampling\n#### Upsampling - Time series is resampled from low frequency to high frequency(Monthly to daily frequency). It involves filling or interpolating missing data. \n#### Downsampling - Time series is resampled from high frequency to low frequency(Weekly to monthly frequency). It involves aggregation of existing data.","1a295026":"As microsoft has p-value 0.0003201525 which is less than 0.05, null hypothesis is rejected and this is not a random walk.\n\nNow google has p-value 0.0000006510 which is more than 0.05, null hypothesis is rejected and this is not a random walk.\n\n### Generating a random walk","a67b5c99":"### While reading use parse_dates to convert into pandas datetime format \n> https:\/\/honingds.com\/blog\/pandas-read_csv\/#ftoc-parse_dates","46f0c5b1":"# Using to_datetime\n#### pandas.to_datetime() is used for converting arguments to datetime. Here, a DataFrame is converted to a datetime series."}}