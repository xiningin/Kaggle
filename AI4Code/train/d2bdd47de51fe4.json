{"cell_type":{"1f9a5a95":"code","a714e90e":"code","43f48a60":"code","cf18212c":"code","69ca7c0c":"code","089686d4":"code","a602c6fc":"code","7d48dd47":"code","afb5561d":"code","4b706716":"code","5303de9c":"code","b66359ff":"code","2ab3f78f":"code","8e052d0a":"code","008bb62c":"code","e0275458":"code","0a7ab657":"markdown","347e833e":"markdown","48d20195":"markdown","35f1e060":"markdown","ae3e4c90":"markdown","cbea4eda":"markdown","c595c2aa":"markdown","cb9dbfd4":"markdown","35a259bf":"markdown"},"source":{"1f9a5a95":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a714e90e":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport pytorch_lightning as pl\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nfrom pytorch_lightning.callbacks.early_stopping import EarlyStopping","43f48a60":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","cf18212c":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use\ntrain.fillna(train.mean(),inplace=True)\ntrain = train.query('weight > 0').reset_index(drop = True)\n\ntrain['action'] =  (  (train['resp_1'] > 0 ) & (train['resp_2'] > 0 ) & (train['resp_3'] > 0 ) & (train['resp_4'] > 0 ) &  (train['resp'] > 0 )   ).astype('int')\nfeatures = [c for c in train.columns if 'feature' in c]\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']\n\nX = train[features].values\ny = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T #Multitarget\n\nf_mean = np.mean(train[features[1:]].values,axis=0)","69ca7c0c":"class AE_Dataset:\n    def __init__(self, dataset, targets):\n        self.dataset = dataset\n        self.targets = targets\n\n    def __len__(self):\n        return self.dataset.shape[0]\n\n    def __getitem__(self, item):\n        return {\n            'x': torch.tensor(self.dataset[item, :], dtype=torch.float),\n            'y': torch.tensor(self.targets[item], dtype=torch.float)\n        }\n\n#-------------------------------------------------------------------    \n\nclass AE_DataModule(pl.LightningDataModule):\n    def __init__(self, data, targets, BATCH_SIZE, fold = None):\n        super().__init__()\n        self.BATCH_SIZE = BATCH_SIZE\n        self.data = data\n        self.targets = targets\n        self.fold = fold\n        \n    def preapre_data(self):\n        pass\n    \n    def setup(self, stage=None):\n        pass\n         \n        \n    def train_dataloader(self):\n        self.train_dataset = AE_Dataset(dataset = self.data,targets = self.targets)\n        \n        return torch.utils.data.DataLoader(\n            self.train_dataset, batch_size=self.BATCH_SIZE)\n    \n    def valid_dataloader(self):\n        return None\n    \n    def test_dataloader(self):\n        return None\n\n#-------------------------------------------------------------------\n# Encoder\nclass LitAutoEncoder(pl.LightningModule):\n\n    def __init__(self, input_shape):\n        super().__init__()\n        \n        self.encoder = nn.Sequential(\n            nn.BatchNorm1d(input_shape),\n            nn.Linear(input_shape, 64),\n            nn.ReLU(),\n            nn.Linear(64, 32))\n        \n        self.decoder = nn.Sequential(\n            #nn.Dropout(.2),\n            nn.Linear(32, 64),\n            nn.ReLU(),\n            nn.Linear(64, input_shape))\n\n    def forward(self, x):\n        # in lightning, forward defines the prediction\/inference actions\n        embedding = self.encoder(x)\n        return embedding\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch['x'], batch['y']\n        z = self.encoder(x)\n        x_hat = self.decoder(z)\n        loss = F.mse_loss(x_hat, x)\n        return loss\n\n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)\n        return optimizer","089686d4":"train_mode = False\n\nEPOCHS = 10\nGPU = 0\nBATCH_SIZE = 4096\nNUM_FEATURES = X.shape[1]\n\n\nif train_mode:\n    \n    early_stop_callback = EarlyStopping(\n        monitor='train_loss', min_delta=0.00, patience=3, verbose=True, mode='min')\n    \n    DataLoader = AE_DataModule(data=X, targets=y, BATCH_SIZE=BATCH_SIZE)\n    trainer = pl.Trainer(gpus=GPU, max_epochs=EPOCHS, weights_summary='full', callbacks=[early_stop_callback])\n\n    AEncoder = LitAutoEncoder(input_shape=NUM_FEATURES)\n    \n    trainer.fit(AEncoder, DataLoader)\n    torch.save(AEncoder.state_dict(), 'encoder.pkl')\n\nelse:\n    # https:\/\/blog.csdn.net\/u012436149\/article\/details\/68948816 \n    AEncoder = LitAutoEncoder(input_shape=NUM_FEATURES)\n    AEncoder.load_state_dict(torch.load('..\/input\/pytorch-jsprediction-freezed-at-v20\/encoder.pkl',map_location=torch.device('cpu')))","a602c6fc":"class MLP_Dataset:\n    def __init__(self, dataset, targets):\n        self.dataset = dataset\n        self.targets = targets\n\n    def __len__(self):\n        return self.dataset.shape[0]\n\n    def __getitem__(self, item):\n        return {\n            'x': torch.tensor(self.dataset[item, :], dtype=torch.float),\n            'y': torch.tensor(self.targets[item], dtype=torch.float)\n        }\n\n#-------------------------------------------------------------------    \n\nclass MLP_DataModule(pl.LightningDataModule):\n    def __init__(self, data, targets, BATCH_SIZE, fold = None):\n        super().__init__()\n        self.BATCH_SIZE = BATCH_SIZE\n        self.data = data\n        self.targets = targets\n        self.fold = fold\n        \n    def preapre_data(self):\n        pass\n    \n    def setup(self, stage=None):\n        pass\n        \n    def train_dataloader(self):\n        \n        dataset = MLP_Dataset(dataset = self.data, targets = self.targets)\n        train_loader = torch.utils.data.DataLoader(dataset, batch_size=self.BATCH_SIZE)\n        return train_loader\n    \n    def valid_dataloader(self):\n        dataset = MLP_Dataset(dataset = self.data, targets = self.targets)\n        valid_loader = torch.utils.data.DataLoader(dataset,batch_size=self.BATCH_SIZE)\n        return valid_loader\n\n    \n    def test_dataloader(self):\n        return None\n","7d48dd47":"# define mlp model\nclass MLP(nn.Module):\n    def __init__(self, config, AEncoder): \n        super(MLP, self).__init__()\n        \n        self.criterion = nn.BCELoss()\n        self.AEncoder = AEncoder\n        self.lr = config[\"lr\"]\n        input_shape = 260\n        \n        \n        drop_out = [config[key] for key, v in config.items() if 'dropout' in key]\n        hidden_size = [config[key] for key,v in config.items() if 'layer' in key]\n        layers = [] \n        \n        for i in range(len(hidden_size)): \n            \n            out_shape = hidden_size[i]\n                # define layers\n            layers.append(nn.Dropout(drop_out[i]))\n            layers.append(nn.Linear(input_shape, out_shape))\n            layers.append(nn.BatchNorm1d(out_shape))\n            layers.append(nn.SiLU())  # SiLU aka swish\n                # update input shape\n            input_shape = out_shape\n        \n            # define the final layer\n        layers.append(nn.Dropout(drop_out[-1]))\n        layers.append(nn.Linear(input_shape, 5))\n        layers.append(nn.Sigmoid())\n        \n        self.model = torch.nn.Sequential(*layers)\n    \n    def encoder_decoder(self, x):\n        self.AEncoder.eval()\n        encoded = self.AEncoder(x)\n        decoded = self.AEncoder.decoder(encoded)\n        return decoded\n\n    def forward(self, x):\n        decoded = self.encoder_decoder(x)\n        x = torch.cat((x, decoded), dim=1)\n        x = self.model(x)\n        return x","afb5561d":"def Train(params, num_epochs=30, batch_size=4096, patience=3):\n    loss_fn = nn.BCELoss().to(device)\n    config = {**params}\n    \n    Val_Loss = 0\n    N_Samples = 0\n    for fold, (train_idx, valid_idx) in enumerate(splits[2:]):\n        print('Fold : {}'.format(fold))\n        \n    # Prepare datasets\n        # train\n        tr_x, tr_y = X[train_idx], y[train_idx]\n        train_loader = MLP_DataModule(data=tr_x, targets=tr_y, BATCH_SIZE=batch_size).train_dataloader()     \n        \n        # valid\n        val_x, val_y = X[valid_idx], y[valid_idx]\n        val_loader = MLP_DataModule(data=val_x, targets=val_y, BATCH_SIZE=batch_size).valid_dataloader()\n\n        \n        # define model\n        model = MLP(config, AEncoder).to(device) #AEncoder\n        optimizer = torch.optim.Adam(model.parameters(), lr=config['lr']) \n\n        # define control variables\n        the_last_loss = 100\n        trigger_times=0\n        \n    # Training \n        for epoch in range(num_epochs):   \n            running_loss = 0.0\n            model.train()\n        \n            for batch in train_loader:\n                inputs, labels = batch['x'].to(device), batch['y'].to(device) \n                optimizer.zero_grad()\n                with torch.set_grad_enabled(True):\n                    outputs = model(inputs)\n                    loss = loss_fn(outputs, labels)\n                    loss.backward()\n                    optimizer.step()\n                    \n            # update local train loss\n                running_loss += loss.item() * inputs.size(0)\n            \n            # update global train loss\n            epoch_loss = running_loss \/ len(train_loader.dataset)\n            print(' Training: Epoch({}) - Loss: {:.4f}'.format(epoch, epoch_loss))\n\n    # Validation \n            model.eval()\n            vrunning_loss = 0.0\n            num_samples = 0\n        \n            for batch in val_loader:\n                data, labels = batch['x'].to(device), batch['y'].to(device) \n                data = data.to(device)\n                labels = labels.to(device)\n                optimizer.zero_grad()\n                with torch.no_grad():\n                    outputs = model(data)\n                    loss = loss_fn(outputs, labels)\n            \n                vrunning_loss += loss.item() * data.size(0)\n                num_samples += labels.size(0)\n\n        # update epoch loss\n            vepoch_loss = vrunning_loss\/num_samples\n            print(' Validation({}) - Loss: {:.4f}'.format(epoch, vepoch_loss))\n        \n        # Check if Early Stopping\n            if vepoch_loss > the_last_loss:\n                trigger_times += 1\n                if trigger_times >= patience:\n                    print('Meet Early stopping!')\n                    ##torch.save(model.state_dict(), f'model_{fold}.pkl')\n                    break\n            else:\n                trigger_times = 0\n                the_last_loss = vepoch_loss\n        # Save model for the best version so far\n                torch.save(model.state_dict(), f'model_{fold}.pkl')\n        \n    \n        # Update global loss\n        Val_Loss += vepoch_loss * num_samples\n\n        # Update global # of samples \n        N_Samples += num_samples\n        \n        # Save model if don't meet early stopping\n        torch.save(model.state_dict(), f'model_{fold}.pkl')\n\n    return Val_Loss\/N_Samples","4b706716":"FOLDS=5\ngkf = PurgedGroupTimeSeriesSplit(n_splits = FOLDS, group_gap=20)\nsplits = list(gkf.split(y, groups=train['date'].values))","5303de9c":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\ndevice","b66359ff":"# Defining config\nconfig = {\n    \"layer_1_size\": 260,\n    \"layer_2_size\": 730,\n    \"layer_3_size\": 800,\n    \"layer_4_size\": 800,\n    \"layer_5_size\": 260,\n    \n    \"dropout_1\":0.1,\n    \"dropout_2\":0.7,\n    \"dropout_3\":0.8,\n    \"dropout_4\":0.45,\n    \"dropout_5\":0.60,\n    \"dropout_output\":0.5,\n    \"lr\": 1e-3\n}\n\ntrain_mode = False\n\nif train_mode:\n    model_loss = Train(config)\n    print(model_loss)\n    \nelse:\n    models = []\n    for i in range(len(splits)):\n        mlp = MLP(config, AEncoder)\n        mlp.load_state_dict(torch.load(f'..\/input\/pytorch-jsprediction-freezed-at-v20\/model_{i}.pkl',map_location=torch.device('cpu')))\n        models.append(mlp)","2ab3f78f":"# fit function\ndef fit(model, x):\n    x = torch.tensor(x, dtype=torch.float)\n    model.eval()\n    pred = model(x)\n    return pred.detach().numpy()","8e052d0a":"# test the predict call\nmlp.eval()\nfit(mlp, X[0:1,:])","008bb62c":"import janestreet\nenv = janestreet.make_env()\nenv_iter = env.iter_test()","e0275458":"opt_th = 0.5\n\nif not train_mode:\n    for (test_df, pred_df) in env_iter:\n        \n        if test_df['weight'].item() > 0:\n            test_df = test_df.loc[:, features].values\n            if np.isnan(test_df[:, 1:].sum()):\n                test_df[:, 1:] = np.nan_to_num(test_df[:, 1:]) + np.isnan(test_df[:, 1:]) * f_mean\n\n            pred_vector = np.mean([fit(model, test_df) for model in models],axis=0)\n            pred = np.mean(pred_vector)\n            pred_df.action = (pred_vector > opt_th).astype(int) \n            \n\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","0a7ab657":"## 1. PurgedGroupTimeSeriesSplit\nFrom [here](https:\/\/www.kaggle.com\/gogo827jz\/jane-street-ffill-xgboost-purgedtimeseriescv), thx for sharing","347e833e":"### 4-2 Define Model and Train function","48d20195":"## 3. AutoEncoder\nTHX for sharing [this great work](https:\/\/www.kaggle.com\/snippsy\/bottleneck-encoder-mlp-keras-tuner)","35f1e060":"### 3-1  AutoEncoder Training","ae3e4c90":"### 4-1 Define Data Modules","cbea4eda":"### 4-3 Begin training","c595c2aa":"## 4. MLP","cb9dbfd4":"## Submission","35a259bf":"## 2. Preprocessing"}}