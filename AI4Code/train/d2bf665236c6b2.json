{"cell_type":{"cefc0587":"code","9226f535":"code","312fa2e5":"code","b8a515b6":"code","6dac21e1":"code","7b287385":"code","0eb102e9":"code","4bcfccc4":"code","73ba1597":"code","0092f24f":"code","79b81d0a":"code","cf62271f":"code","20b96f07":"code","3b294800":"code","9ef3e6eb":"code","e6de1d06":"code","ac80b839":"code","66c4d7d6":"code","5f77255f":"code","80b58d93":"code","ba090d37":"markdown","61e12058":"markdown","317ba5a9":"markdown","8c0e7b9e":"markdown"},"source":{"cefc0587":"import numpy as np\nimport pandas as pd \nimport os\n\nimport matplotlib.pyplot as plt\n\nimport pathlib\nimport PIL\n\nfrom pathlib import Path","9226f535":"train = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/example_sample_submission.csv\")\n\npath = Path('..\/input\/tensorflow-great-barrier-reef\/train_images')\nfilepaths = list(path.glob(r'**\/*.jpg'))\norigianalFilePaths = filepaths.copy()","312fa2e5":"train.head()","b8a515b6":"# train = train.loc[train[\"annotations\"] != \"[]\"]\ntrain.head()","6dac21e1":"test.head()","7b287385":"sub.head()","0eb102e9":"train.shape , test.shape","4bcfccc4":"train.info()","73ba1597":"train.isnull().sum()","0092f24f":"(train.isnull().sum()\/ len(train))*100 ","79b81d0a":"train[\"video_frame\"].unique().sum()","cf62271f":"train[\"sequence\"].unique().sum()","20b96f07":"def getLastFolderName(x): \n    pathwithoutFilename = os.path.split(x)[0] \n    lastFolderName = pathwithoutFilename.split(\"\/\")[-1] \n    lastFolderName = lastFolderName.replace(\"video_\",\"\")\n    return lastFolderName\n\ndef getFileName(x): \n    pathwithoutFilename = os.path.split(x)[1] \n    lastFolderName = pathwithoutFilename.split(\".\")[0] \n    return lastFolderName\n\n\ndef getImageId(x): \n    imageId = getLastFolderName(x) + \"-\" + getFileName(x)\n    return imageId\n\nfilePaths = filepaths.copy()\nfileNames = list(map(lambda x: getFileName(x),filepaths)) \nfileTypes = list(map(lambda x: getLastFolderName(x),filepaths)) \nimage_ids = list(map(lambda x: getImageId(x),filepaths)) \nprint(fileTypes[:5])\nprint(fileNames[:5])\nprint(filepaths[:5])\nprint(image_ids[:5])","3b294800":"data = {'imagePaths': origianalFilePaths, 'ImageName': fileNames,'ImageType':fileTypes ,\"image-id\":image_ids}\n\nimage_df = pd.DataFrame(data)\n# train= train.sample(frac = 1).reset_index(drop=True) # all shuffle\nimage_df.head()","9ef3e6eb":"image_df.info()","e6de1d06":"image_df = image_df.astype({'ImageName': 'int32'})\nimage_df = image_df.astype({'ImageType': 'int32'})\nimage_df.head()","ac80b839":"image_df.info()","66c4d7d6":"image_df = image_df.sort_values([\"ImageType\",\"ImageName\"])\nimage_df = image_df.reset_index(drop=True)\nimage_df.head()","5f77255f":"train.head(500)","80b58d93":"f,a = plt.subplots(nrows=4, ncols=4,figsize=(15, 10),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(a.flat):\n    ax.imshow(plt.imread(image_df.imagePaths[i]))\n    ax.set_title(str(image_df.ImageType[i]))\n    \nplt.tight_layout()\nplt.show()","ba090d37":"# make train dataframe","61e12058":"# get folder name => Target ","317ba5a9":"# annotations != \"[]\"","8c0e7b9e":"# draw images"}}