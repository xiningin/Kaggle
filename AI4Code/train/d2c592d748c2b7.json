{"cell_type":{"736d1aab":"code","59724d12":"code","86c0ded2":"code","6300b7fd":"code","68e28a8f":"code","b70798f5":"code","00f96217":"code","7f092629":"code","4184363a":"code","d4f003eb":"code","e3b9a98b":"code","40770da5":"code","a34b13fe":"code","76a4b995":"code","4707b922":"code","aadebc43":"code","39bbec9c":"code","0aaafff4":"code","17170c35":"code","b2707588":"code","4109b7c1":"markdown","ad04d63a":"markdown","9753e11a":"markdown","7d71fcc9":"markdown","0f5029a6":"markdown","54b4f610":"markdown","1ef32c89":"markdown","140b781c":"markdown"},"source":{"736d1aab":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","59724d12":"# Load October Data (keep only needed Columns)\ndf = pd.read_csv('\/kaggle\/input\/ecommerce-events-history-in-cosmetics-shop\/2019-Oct.csv',\n                 usecols=[\"event_time\", \"event_type\", \"user_session\"])","86c0ded2":"# Get a random sample of events\ndf.sample(10)","6300b7fd":"# Make sure columns do not have NAN elements\ndf.isna().sum()","68e28a8f":"# drop rows with NAN user_session\ndf.dropna(inplace=True)","b70798f5":"# Check validity of user_session. It seems to be a uuid, an therefore every session id should have the same number of characters\ndf['tmp_session_len'] = df['user_session'].apply(len)\ndf['tmp_session_len'].value_counts()","00f96217":"# Check validity of event_type. It should be factorial with 4 different events\ndf['event_type'].value_counts()","7f092629":"# replace remove_from_cart with remove (str too long for good visualization)\ndf['event_type'].replace(['remove_from_cart'], ['remove'], inplace = True) ","4184363a":"# Convert event_time in real datetime type\ndf['event_time'] = pd.to_datetime(df['event_time'],infer_datetime_format=True)","d4f003eb":"# Check event_time. Are all days represented?\ndf[\"event_time\"].groupby(df[\"event_time\"].dt.day).count().plot(kind=\"line\")","e3b9a98b":"# Check hour of the day... are all hours represented?\ndf[\"event_time\"].groupby(df[\"event_time\"].dt.hour).count().plot(kind=\"bar\")","40770da5":"# Factorize session id to save some RAM\ndf['user_session'] = pd.factorize(df.user_session)[0]","a34b13fe":"# Create a collect_list of events, partitioned by user_session & ordered by date_time ascending\ngrouped_df = df.sort_values(['event_time'],ascending=True).groupby('user_session')['event_type'].apply(list).to_frame(name='sequences')","76a4b995":"# Add 'end' to the end of the array for each sequence\n# This is done to finalize sequences with less than 6 diferent touch points\ngrouped_df['sequences'] = grouped_df.apply(lambda x: x['sequences'] + ['end'], axis=1)","4707b922":"# Constrain sequences to a maximum of 6 touchpoints\n# Sequences with less than 6 touchpoints will finalize with 'end'\ngrouped_df['sequences'] = grouped_df.apply(lambda x: x['sequences'][:6], axis=1)","aadebc43":"# Keep only sequences with at least one purchase\ngrouped_df = grouped_df[grouped_df.sequences.apply(lambda x: np.any(np.in1d(x, ['purchase'])))]","39bbec9c":"# Transform array into a str (- separated). This is the format expected by d3\ngrouped_df['sequences'] = ['-'.join(map(str, l)) for l in grouped_df['sequences']]","0aaafff4":"# Create a df with the top N sequences by count of appearence\ntop_sequences = grouped_df['sequences'].value_counts().nlargest(100).to_frame(name='occurences')","17170c35":"# Export resulting dataframe into a csv file\ntop_sequences.to_csv('top_sequences.csv', header=False)","b2707588":"# Display final output\ntop_sequences","4109b7c1":"### Import needed packages","ad04d63a":"As specified previously, the longest sequence length I want to analyze is 6 (I do not want to go deeper with the analysis). You can change it easily within the next code","9753e11a":"### Create a new feature, sequences, which will be the base of the final output\n\nIf you are familiar with `SQL`, I am going to do a `collect_list` of all event_types, `partitioned` by the session id and `ordered by` the event_time. This sequences will include all events done in the user flow in chronological order. Imagine, a user's flow in a particular session is composed of (in chronological order, from older to newer):\n\n* A product view\n* Another product view\n* A cart addition\n* Another product view\n* Another cart addition\n* A cart removal\n* A purchase\n\nThe final sequence for this user session will be this array:\n\n`['view', 'view', 'cart', 'view', 'cart', 'remove', 'purchase']`","7d71fcc9":"### Start Data Cleansing & Manipulation","0f5029a6":"### Create initial dataFrame from October's data","54b4f610":"Per specification, all sequences should have an \"end\" marker as the last element, unless it has been truncated because it is longer than the maximum sequence length (6, in the example). The purpose of the \"end\" marker is to distinguish a true end point (e.g. the user left the site) from an end point that has been forced by truncation.","1ef32c89":"### Generate the final output file","140b781c":"### Introduction\n\nThis notebook allows you to create the data (in the expected format) to elaborate [d3 sunburst visualizations](https:\/\/bl.ocks.org\/kerryrodden\/7090426) like this one:\n\n![Sunburst Visualization](https:\/\/analista-digital.com\/wp-content\/uploads\/2021\/02\/showcase_sunburst.png)\n\nFor this particular case, I only picked sequences including a purchase, because I was interested to see which flows lead to purchases more often."}}