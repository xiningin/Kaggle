{"cell_type":{"571a5e5f":"code","46be08c9":"code","4abd76be":"code","90493318":"code","3ee1c5ba":"code","b6ea5966":"code","02f7892e":"code","f5e4549b":"code","d56512ae":"code","ec8da0f1":"code","abbb2486":"code","da3828c4":"code","09b693a4":"code","b81aa200":"code","2979c842":"code","47b8305b":"code","8e789257":"code","b91445c0":"code","de02cc61":"code","ace1d73e":"code","154db37b":"markdown","1efa6434":"markdown","d916d140":"markdown","6d8945ea":"markdown"},"source":{"571a5e5f":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\n\n\nimport optuna\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","46be08c9":"df = pd.read_csv('..\/input\/parkinsonsdataset\/parkinsons.csv')\ndf.head()","4abd76be":"# there are no null data\n# number of entries is 195 (it is a tiny dataset)\ndf.info()","90493318":"# heatmap shows a bunch of feature each other correlated each other:\n# some analisys can be done here to understand which are really useful and which can be dropped\nsns.heatmap(df.corr());","3ee1c5ba":"# show in details which feature is correlated with\n\nCORR_THRESHOLD = 0.6 # threshold can be changed here\n\ncorr_data = df.corr()\n\nhighly_correlated_features = []\n\nfor feature in df.columns:\n    if feature == 'status' or feature == 'name':\n        continue\n    for feature_index in df.columns:\n        if feature_index == 'status' or feature_index == 'name':\n            continue\n        if feature == feature_index:\n            continue\n        if corr_data[feature][feature_index] > CORR_THRESHOLD:\n            tupla = (feature,feature_index)\n            reversed_tupla = (feature_index, feature)\n            if reversed_tupla in highly_correlated_features:\n                continue\n            highly_correlated_features.append((feature,feature_index))\n            \nhighly_correlated_features","b6ea5966":"# this code can be enabled if you want to remove from datease the correlations computed above\n\n#features_to_be_removed = set()\n\n#for feature_tuple in highly_correlated_features:\n#   features_to_be_removed.add(feature_tuple[1])\n\n#df.drop(features_to_be_removed,inplace=True, axis=1)","02f7892e":"# mutual info classification\nfrom sklearn.feature_selection import mutual_info_classif\n\nX = df.drop(['name','status'], axis=1)\ny = df['status']\n\nmutual_info = mutual_info_classif(X,y)\n# print of mutual_info\nfrom matplotlib.pyplot import figure\n\nfigure(figsize=(28, 6), dpi=80)\nsns.barplot(X.columns, mutual_info);","f5e4549b":"# some feature shows outliers: more analysis and trials can be done here\n\nfor feature in df.columns:\n    if feature == 'name' or feature == 'status':\n        continue\n    plt.figure()\n    sns.boxplot(x=\"status\", y=feature, data=df)","d56512ae":"# prepare features and target\nX = df.drop(['name','status'], axis=1)\ny = df['status']","ec8da0f1":"# scale data\nfrom sklearn.preprocessing import RobustScaler\n\nrobustScaler = RobustScaler()\nrobustScaler.fit(X)\nrobustScaler.transform(X)","abbb2486":"# split in train and test set\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, shuffle=True, stratify=y, random_state=0)","da3828c4":"# use DecisionTree classifier\nclassifier = DecisionTreeClassifier(random_state=0)\nclassifier.fit(X_train,y_train)\nprint((classifier.score(X_train, y_train), classifier.score(X_test,y_test)))","09b693a4":"# plot confusion matrix for train set\nplot_confusion_matrix(classifier, X_train, y_train, normalize='true', cmap='Blues',display_labels=[\"Healthy\",\"Parkinson\"]);","b81aa200":"# plot confusion matrix for test set\n#\n# result is quite good and confusion matrix is balanced\n# if \"Parkinson\" is considered as \"positive (P)\", since we are talking about an illness\n# it is nice that agorithm predicted more FP (predict \"Parkinson\" to \"healthy\")\n# rather than TN (\"Healthy\" to \"Parkinson\")\nplot_confusion_matrix(classifier, X_test, y_test,normalize='true', cmap='Blues',display_labels=[\"Healthy\",\"Parkinson\"]);","2979c842":"def objective(trial):\n    classifier_name = trial.suggest_categorical(\"classifier\", [\"DecisionTree\"])\n    c_criterion = trial.suggest_categorical(\"criterion\", [\"gini\",\"entropy\"])\n    c_splitter = trial.suggest_categorical(\"splitter\", [\"best\",\"random\"])\n    c_max_depth = trial.suggest_int(\"max_depth\", 2, 32, log=True)\n    c_min_samples_split = trial.suggest_int(\"min_samples_split\", 2, 20, log=True)\n    classifier_obj = DecisionTreeClassifier(criterion=c_criterion, splitter=c_splitter,\n        max_depth=c_max_depth, min_samples_split = c_min_samples_split, random_state=0)\n\n    score = cross_val_score(classifier_obj, X, y, n_jobs=-1, cv=10)\n    accuracy = score.mean()\n    return accuracy\n\n\nif __name__ == \"__main__\":\n    study = optuna.create_study(direction=\"maximize\")\n    study.optimize(objective, n_trials=100)\n    print(study.best_trial)","47b8305b":"# plot best params found\nstudy.best_params","8e789257":"# classifier with best parameters from optuna\nclassifier = DecisionTreeClassifier(\n    criterion=study.best_params['criterion'],\n    splitter=study.best_params['splitter'],\n    max_depth=study.best_params['max_depth'],\n    min_samples_split=study.best_params['min_samples_split'],\n    random_state=0)\nclassifier.fit(X_train,y_train)\nprint((classifier.score(X_train, y_train), classifier.score(X_test,y_test)))","b91445c0":"# this is the best result out of Optuna's study on my pc\n# (skip this to plot confusion matrix with parameter found)\nclassifier = DecisionTreeClassifier(\n    criterion='entropy',\n    splitter='best',\n    max_depth=28,\n    min_samples_split=2,\n    random_state=0)\nclassifier.fit(X_train,y_train)\nprint((classifier.score(X_train, y_train), classifier.score(X_test,y_test)))","de02cc61":"# plot confusion matrix for train set again\nplot_confusion_matrix(classifier, X_train,y_train, normalize='true', cmap='Blues',display_labels=[\"Healthy\",\"Parkinson\"]);","ace1d73e":"# plot confusion matrix for test set again\n# results are slightly better than the original run\nplot_confusion_matrix(classifier, X_test, y_test,normalize='true', cmap='Blues',display_labels=[\"Healthy\",\"Parkinson\"]);","154db37b":"# Use Optuna to optimize hyperparameters","1efa6434":"# First run with a classifier","d916d140":"# Load the dataset and explore","6d8945ea":"# Try again with hyperparameters found with Optuna"}}