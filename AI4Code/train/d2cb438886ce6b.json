{"cell_type":{"465b0db8":"code","1b61bbc7":"code","850badc0":"code","94b255df":"code","174c2565":"code","1950b772":"code","44986df3":"code","2113c3c2":"code","cdb08450":"code","b1cde009":"markdown","9e2dedf1":"markdown","fa6ebb4d":"markdown","b9ddc939":"markdown","fdba8aaf":"markdown","a097506f":"markdown","31d1ca9c":"markdown","0692cc65":"markdown"},"source":{"465b0db8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndata = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\n\nedu = pd.read_csv('.kaggle\/input\/datacours2\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\n\n","1b61bbc7":"#edu\n#edu.tail()\n#edu[10:14]\nedu.head()\n#edu.describe()\n","850badc0":"edu.describe()\n","94b255df":"edu.head(3)","174c2565":"edu.tail()","1950b772":"edu.describe()","44986df3":"edu.iloc[90:94][['TIME','GEO']]\n","2113c3c2":"edu[edu['Value'] > 6.5]","cdb08450":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\n\n\n\npivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","b1cde009":"The result shows various informations about the table, when the column is composed of numbers. There are some errors about the time, because we usually have integer values.","9e2dedf1":"There are 4 columns","fa6ebb4d":"The parameter ascending=false permet de dire qu'on veut trier en d\u00e9croissant. On remplacerait false par true si on voulait trier en croissant.","b9ddc939":"It shows all the rows from edu, when the value of the row is superior to 6.5\nIt shows a serie.","fdba8aaf":"It shows the columns TIME and GEO from the rows 90 to 93. The index 90 to 94 is the slice of rows we want to see. The index TIME, GEO is the columns we want to see.","a097506f":"The function tail shows the 5 last rows","31d1ca9c":"Wee only see the 3 first rows","0692cc65":"There are 384 rows"}}