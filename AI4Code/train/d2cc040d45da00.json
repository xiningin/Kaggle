{"cell_type":{"aac1417b":"code","5e15a3cc":"code","a5e46d88":"code","9e6c91e1":"code","056fbf92":"code","8c0efc86":"code","a83e7888":"code","59451a7b":"code","2fbd0fba":"code","7e0655a0":"code","ff018ced":"code","c3db9658":"code","6054f805":"code","7476bf2d":"code","88f55f9f":"code","6c24d621":"code","f0854d24":"code","36264a5a":"code","6136f734":"code","7fb6c833":"code","c84a9a8c":"code","8382a761":"code","c6057b9c":"code","f47bb302":"code","f3df0d55":"code","3deacc14":"code","39527d44":"code","3391a83d":"code","d36c0269":"code","1d5b242b":"code","4dd4f843":"code","f97dc37a":"code","20eb3507":"code","de6efa6d":"code","cb352f70":"code","3f13cc70":"code","79041afe":"code","c821f090":"code","4007fc07":"code","5c30f63d":"markdown","4f7f621a":"markdown","8abee9d7":"markdown","1197c96f":"markdown","b452d5ad":"markdown","a458a668":"markdown","5138a98d":"markdown","cf38a2d1":"markdown","239093da":"markdown","bf399dd3":"markdown","2451d3db":"markdown","87057bfc":"markdown","6be79373":"markdown","1266b508":"markdown","6a405b21":"markdown","d9db1e35":"markdown","96575dfe":"markdown","19d1a1af":"markdown","934f2b56":"markdown","48a34422":"markdown","99245dc1":"markdown","90144a3f":"markdown","57f02bb8":"markdown","39cccb59":"markdown","6230cda3":"markdown","3f0cc363":"markdown","fa7e4d8b":"markdown","72a0402f":"markdown","cce48542":"markdown","1c54ef00":"markdown","bdd95cef":"markdown","38e11e80":"markdown","57f6ff39":"markdown","85849ffb":"markdown","4a73cda1":"markdown","c2f3f108":"markdown","be8387df":"markdown","bc0524bb":"markdown","3a203138":"markdown","672450e4":"markdown","b0568889":"markdown","f9dd3ce9":"markdown","98be3246":"markdown","35a4be85":"markdown"},"source":{"aac1417b":"# packages\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\n\n# plot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n# display HTML, Js apps\nfrom IPython.core.display import display, HTML, Javascript\n\n# scaling\nfrom sklearn.preprocessing import StandardScaler\n\n# SMOTE\nfrom imblearn.over_sampling import SMOTE\n\n# keras\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n# model Evaluation\nfrom sklearn import metrics\n \n# model explainablity\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\n# plotly offline\nfrom plotly.offline import download_plotlyjs,init_notebook_mode\ninit_notebook_mode(connected=True)\n\n# MISC\nimport warnings\nwarnings.filterwarnings(\"ignore\")","5e15a3cc":"# import data\ndf = pd.read_csv('..\/input\/telecom-users-dataset\/telecom_users.csv',index_col=0)","a5e46d88":"# drop unnamed column\ndf = df.reset_index()\ndf = df.drop(['index','customerID'],axis=1)\n\ndf.head()","9e6c91e1":"df.info()","056fbf92":"# stats\ndf[df['Churn']=='Yes'][['tenure','MonthlyCharges']].describe().T","8c0efc86":"# stats \ndf[df['Churn']=='No'][['tenure','MonthlyCharges']].describe().T","a83e7888":"# pairplot\nplt.style.use('seaborn-dark')\nsns.pairplot(df[['tenure','MonthlyCharges','Churn']],hue='Churn',palette='Dark2');\nplt.tight_layout();","59451a7b":"# Churn\nchurn_plot = df['Churn'].value_counts().reset_index()\nchurn_plot.columns = ['Churn?',\"Number_of_customers\"]\n\n# plot\npx.pie(churn_plot,values =\"Number_of_customers\",names='Churn?',title='Churn',template='none')","2fbd0fba":"%%HTML\n<div class='tableauPlaceholder' id='viz1617687716045' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Te&#47;Telecom_Customer_Churn_prediction&#47;Telecom_churn_dashboard_1&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='Telecom_Customer_Churn_prediction&#47;Telecom_churn_dashboard_1' \/><param name='tabs' value='yes' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Te&#47;Telecom_Customer_Churn_prediction&#47;Telecom_churn_dashboard_1&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='en' \/><param name='useGuest' value='true' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1617687716045');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.minHeight='2400px';vizElement.style.maxHeight=(divElement.offsetWidth*1.77)+'px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","7e0655a0":"# churn Fiber optic users\nprint('Total Fiber optic users',df[df['InternetService'] =='Fiber optic']['InternetService'].count())\nprint('\\n')\nprint('No. of Fiber optic users Not Churn',df[(df['Churn'] =='No')& (df['InternetService'] =='Fiber optic')]['InternetService'].count())\nprint('\\n')\nprint('No. of Fiber optic users Churned',df[(df['Churn'] =='Yes')& (df['InternetService'] =='Fiber optic')]['InternetService'].count())","ff018ced":"print('Median monthly charges of staying customers',df[(df['Churn'] =='No')& (df['InternetService'] =='Fiber optic')]['MonthlyCharges'].median())\nprint('Median monthly charges of churned customers',df[(df['Churn'] =='Yes')& (df['InternetService'] =='Fiber optic')]['MonthlyCharges'].median())","c3db9658":"%%HTML\n<div class='tableauPlaceholder' id='viz1617689871779' style='position: relative'><noscript><a href='#'><img alt=' ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Te&#47;Telecom_Customer_Churn_prediction&#47;Telecom_churn_dashboard_2&#47;1_rss.png' style='border: none' \/><\/a><\/noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' \/> <param name='embed_code_version' value='3' \/> <param name='site_root' value='' \/><param name='name' value='Telecom_Customer_Churn_prediction&#47;Telecom_churn_dashboard_2' \/><param name='tabs' value='yes' \/><param name='toolbar' value='yes' \/><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Te&#47;Telecom_Customer_Churn_prediction&#47;Telecom_churn_dashboard_2&#47;1.png' \/> <param name='animate_transition' value='yes' \/><param name='display_static_image' value='yes' \/><param name='display_spinner' value='yes' \/><param name='display_overlay' value='yes' \/><param name='display_count' value='yes' \/><param name='language' value='en' \/><\/object><\/div>                <script type='text\/javascript'>                    var divElement = document.getElementById('viz1617689871779');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='100%';vizElement.style.height=(divElement.offsetWidth*0.75)+'px';} else { vizElement.style.width='100%';vizElement.style.minHeight='2400px';vizElement.style.maxHeight=(divElement.offsetWidth*1.77)+'px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https:\/\/public.tableau.com\/javascripts\/api\/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                <\/script>","6054f805":"# missing values\nmissing_value = 100* df.isnull().sum()\/len(df)\nmissing_value = missing_value.reset_index()\nmissing_value.columns = ['variables','missing values in percentage']\nmissing_value = missing_value.sort_values('missing values in percentage',ascending=False)\n\n# barplot\nfig = px.bar(missing_value, y='missing values in percentage',x='variables',title='Missing values % in each column',\n             template='ggplot2',text='missing values in percentage');\nfig.update_traces(texttemplate='%{text:.2s}', textposition='inside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')\n\nfig.show()","7476bf2d":"# categorical columns\n\ncat_columns = ['gender', 'SeniorCitizen', 'Partner', 'Dependents',\n       'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity',\n       'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',\n       'StreamingMovies', 'Contract', 'PaperlessBilling', 'PaymentMethod',\n       'Churn']","88f55f9f":"# numerical columns\n\nnum_columns = ['TotalCharges','MonthlyCharges','tenure']","6c24d621":"#\"\"\"\n\nfor feature in df[cat_columns].columns:\n    print('\\n ')\n    print('*************','Column name:',feature,'*************')\n    print('1. Unique vlaues:',df[feature].unique())\n    print(' ')\n    print('2. Min values:',df[feature].min())\n    print(' ')\n    print('3. value counts:',df[feature].value_counts(1)*100)\n    print(' ')\n    print('**************************************************')\n    print('***************-end-******************************')\n    print('\\n ')\n\n#\"\"\"","f0854d24":"# num., columns\n\nfor feature in df[num_columns].columns:\n    print('*******','Column name:',feature,'*******')\n    \n    print('Min values:',df[feature].min())\n    print('Max values:',df[feature].max())\n    \n    print('***********-end-***********')\n    print('\\n')","36264a5a":"# we found the empty space or empty string here \n\ndf['TotalCharges'].min()","6136f734":"# empty space rows in Totalcharges \n\ndf[df['TotalCharges'] == df['TotalCharges'].min()][0:3]","7fb6c833":"# replace empty space with median\n\ndf['TotalCharges'] =  df['TotalCharges'].replace(' ',2298.06)# replace empty string with median of total charges","c84a9a8c":"# change data type to float\n\ndf['TotalCharges'] =  df['TotalCharges'].astype(float)","8382a761":"df[df['tenure']==0][0:3]","c6057b9c":"# replacing zero with median\ndf['tenure'] =  df['tenure'].replace(0,29)","f47bb302":"# plot\nplt.figure(figsize=(8,4))\nsns.set_context(context='notebook',font_scale=1.2)\nsns.heatmap(df[['TotalCharges','MonthlyCharges']].corr('pearson'),annot=True,cmap='Blues');\nplt.title('Pearson correlation');\nplt.tight_layout();","f3df0d55":"# convert categorical to numerical\nfor features in df[cat_columns].columns:\n    df[features] = pd.Categorical(df[features]).codes ","3deacc14":"# plot outliers\nplt.style.use('fivethirtyeight')\ndf.plot(kind='box',figsize=(12,4))\nplt.xticks(rotation=70);\nplt.title('Outliers check');","39527d44":"#\"\"\"\ndef treat_outlier(x):\n    sorted(x)\n    q1,q3=np.percentile(x,[25,75])\n    iqr=q3-q1\n    l_r=q1-(1.5*iqr)\n    u_r=q3+(1.5*iqr)\n    return l_r,u_r  \n#\"","3391a83d":"#\"\"\"\n\nfor i in df[num_columns].columns:\n    lr,ur = treat_outlier(df[i])\n    df[i] = np.where(df[i]>ur,ur,df[i])\n    df[i] = np.where(df[i]<lr,lr,df[i])\n#\"\"\"","d36c0269":"X= df.drop('Churn',axis=1)\ny= df.pop('Churn')","1d5b242b":"from sklearn.model_selection import train_test_split\n\nX_train, X_test,y_train,y_test = train_test_split(X,y,test_size=30,random_state =1)","4dd4f843":"## Scaling data\n\nsc = StandardScaler()\n\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","f97dc37a":"## SMOTE oversampling\n\nSMOTE_oversample = SMOTE(random_state=1)\nX_train,y_train = SMOTE_oversample.fit_resample(X_train, y_train.ravel())","20eb3507":"from sklearn.tree import DecisionTreeClassifier\n\nDT_model= DecisionTreeClassifier(max_features= 5,max_depth= 10,min_samples_split= 90,min_samples_leaf= 30,random_state=1)\n\n# fit the model\nDT_model.fit(X_train,y_train)\n\n# model score\npredict_train_DT = DT_model.predict(X_train)\npredict_test_DT = DT_model.predict(X_test)\n\n# accuracy score\nDT_train_score = DT_model.score(X_train,y_train)\nDT_test_score = DT_model.score(X_test,y_test)\n\n# f1-score\nDT_f1_score = metrics.f1_score(y_test, predict_test_DT)\n\nprint('Accuracy on Train set',DT_train_score)\nprint('Accuracy on Test set',DT_test_score)\nprint('F1-score on Test set:',DT_f1_score)\nprint('\\n')\nprint(metrics.classification_report(y_test, predict_test_DT))\nprint('\\n')\n\n# confusion matrix\nmetrics.plot_confusion_matrix(DT_model,X_test,y_test,cmap='Blues');\nplt.grid(False)\nplt.title('Confusion Matrix on test set');","de6efa6d":"# Random forest\nfrom sklearn.ensemble import RandomForestClassifier\n\n# create object model\nRF_model = RandomForestClassifier(n_estimators= 600,min_samples_split= 90,min_samples_leaf= 20,\n                                  max_features= 5,max_depth= 10)# RF model tuned\n\n# fit the model\nRF_model.fit(X_train,y_train)\n\n# model score\npredict_train_RF = RF_model.predict(X_train)\npredict_test_RF = RF_model.predict(X_test)\n\n# accuracy score\nRF_train_score = RF_model.score(X_train,y_train)\nRF_test_score = RF_model.score(X_test,y_test)\n\n# f1-score\nRF_f1_score = metrics.f1_score(y_test,predict_test_RF)\n\nprint('Accuracy on Train set',RF_train_score)\nprint('Accuracy on Test set',RF_test_score)\nprint('F1-score on Test set:',RF_f1_score)\nprint('\\n')\nprint(metrics.classification_report(y_test,predict_test_RF))\nprint('\\n')\n\n# confusion matrix\nmetrics.plot_confusion_matrix(RF_model,X_test,y_test,cmap='Blues');\nplt.grid(False)\nplt.title('Confusion Matrix on test set');","cb352f70":"# Xgboost\nimport xgboost as xgb\n\n# create object model\nXgboost_model = xgb.XGBClassifier(learning_rate=0.01,verbosity=0)\n\n# fit the model\nXgboost_model.fit(X_train,y_train)\n\n# model score\npredict_train_Xgb = Xgboost_model.predict(X_train)\npredict_test_Xgb = Xgboost_model.predict(X_test)\n\n# accuracy score\nXgb_train_score = Xgboost_model.score(X_train,y_train)\nXgb_test_score = Xgboost_model.score(X_test,y_test)\n\n# f1-score\nXgb_f1_score = metrics.f1_score(y_test,predict_test_Xgb)\n\nprint('Accuracy on Train set',Xgb_train_score)\nprint('Accuracy on Test set',Xgb_test_score)\nprint('F1-score on Test set:',Xgb_f1_score)\nprint('\\n')\nprint(metrics.classification_report(y_test,predict_test_Xgb))\nprint('\\n')\n\n# confusion matrix\nmetrics.plot_confusion_matrix(Xgboost_model,X_test,y_test,cmap='Blues');\nplt.grid(False)\nplt.title('Confusion Matrix on test set');","3f13cc70":"# permutation importance for Random forest model\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\npermutation = PermutationImportance(RF_model,random_state=1,scoring='f1').fit(X_test,y_test)# I use scoring as F1 score instead of accuracy\neli5.show_weights(permutation, feature_names = df.columns.tolist())","79041afe":"# permutation importance for Xgboost model\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\npermutation = PermutationImportance(Xgboost_model,random_state=1,scoring='f1').fit(X_test,y_test)# I use scoring as F1 score instead of accuracy\neli5.show_weights(permutation, feature_names = df.columns.tolist())","c821f090":"models_list = [Xgboost_model,RF_model,DT_model]\nrecall =[]\nprecision =[]\ntest_acc = []\ntrain_acc = []\nf1score = []\n\nfor model in models_list:\n    predict_test = model.predict(X_test)\n    predict_train = model.predict(X_train)\n    f1s = metrics.f1_score(y_test, predict_test)\n    pre = metrics.precision_score(y_test, predict_test)\n    rec = metrics.recall_score(y_test, predict_test)\n    acc_test = model.score(X_test,y_test)\n    acc_train = model.score(X_train,y_train)\n    \n    recall.append(rec)\n    precision.append(pre)\n    test_acc.append(acc_test)\n    train_acc.append(acc_train)\n    f1score.append(f1s)\n    \nmodel_compare = pd.DataFrame({\n'Models':['Xgboost','Random_forest','Decision_Tree'],\n'recall':recall,\n'Precision':precision,\n'f1score':f1score,\n'Accuracy on Test':test_acc,\n'Accuracy on Train':train_acc\n})\n","4007fc07":"model_compare.style.background_gradient(cmap='Blues')","5c30f63d":"* <span style=\"font-family: Arial;font-size:1.1em;color:#3366ff\">Permutation importance is stated to be the decrease in a model Accuracy or any user-defined metrics when a single Independent variable is randomly shuffled\n* <span style=\"font-family: Arial;font-size:1.1em;color:#3366ff\">This process followed for all the Independent variable and note down the Accuracy of the model when each Independent variable is shuffled and we can use any scoring metrics for this process to know what are feature given importance by the model","4f7f621a":"## i. Basic model\n   * <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Decision Tree","8abee9d7":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">ii. Data cleaning","1197c96f":"## iii. Boosting\n * <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Xgboost ","b452d5ad":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Model Comparison\n<\/p>\n<\/div>","a458a668":"* https:\/\/xgboost.readthedocs.io\/en\/latest\/tutorials\/model.html\n* https:\/\/www.kaggle.com\/dansbecker\/permutation-importance referred Permutation Importance from Dan Becker's Notebook\n* Tableau Tutorial https:\/\/www.youtube.com\/watch?v=6mBtTNggkUk","5138a98d":"## ","cf38a2d1":"# Preprocessing","239093da":"## ii. bagging\n   * <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Random Forest","bf399dd3":"# Permutation Importance","2451d3db":"*  <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">we can use Xgboost model for the prediction and it has balance of precision and recall","87057bfc":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Vii. Oversampling","6be79373":"# <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Telecom Customer churn prediction","1266b508":"# EDA","6a405b21":"# <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Thank you!!","d9db1e35":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Exploratory data analysis\n<\/p>\n<\/div>","96575dfe":"# Model comparison","19d1a1af":"* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">No missing values found in the dataset but we need to search for empty string and spaces","934f2b56":"* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">objective is to select model with good metrics, we can use metrics of F1 score and recall with good precision\n* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">f1 score is harmonic mean of precision and recall","48a34422":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">i. Missing Values ","99245dc1":"# Packages","90144a3f":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">vi. Scaling","57f02bb8":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Index\n<\/p>\n<\/div>","39cccb59":"<span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Objective:-\n\n* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Predict the Telecom customer who is going churn in near future","6230cda3":"* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">If we click yes filter the churned customer on the above tableau dashboard we can observe that most of the Monthly charges are higher than the existing customers\n* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">If we observe closely we can see that Internet service Fiber Optic user are most who left the telecom service and out of 2627 Fiber optic users 1091 Fiber optic users 41% are left the telecom service\n","3f0cc363":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Preprocessing\n<\/p>\n<\/div>","fa7e4d8b":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Modeling\n<\/p>\n<\/div>","72a0402f":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Tableau Dashboard\n<\/p>\n<\/div>","cce48542":"# Tableau Dashboard","1c54ef00":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Reference\n<\/p>\n<\/div>","bdd95cef":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">iii. Correlation","38e11e80":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">Feel free to post your suggestion","57f6ff39":"### In the above pie chart we can see that there is a class imbalance in data set, instance of chrun is only 26.5% and normal is 73.5%","85849ffb":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Permutation Importance\n<\/p>\n<\/div>","4a73cda1":"# Reference","c2f3f108":"* <span style=\"font-family: Arial;font-size:1.1em;color:#3366ff\">Monthly charges slightly positively correlated with total charges","be8387df":"## Insights\n* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">if we closely observe the Monthly charges mean of 74.16 and median of 79.5 for customers who are churned\n* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">if we compare with the Monthly charges mean of 61.42 and median of 64.75 for customers who are not churned\n* <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">we can see that monthly charges of churned customers are higher than the customers who not churn","bc0524bb":"# Index\n* <a href=\"#Packages\">1.1.Packages<\/a>\n* <a href=\"#EDA\">1.2.EDA<\/a>\n* <a href=\"#Tableau-Dashboard\">1.3.Tableau Dashboard<\/a>\n* <a href=\"#Preprocessing\">1.4.Preprocessing<\/a>\n* <a href=\"#Modeling\">1.5.Modeling<\/a>\n* <a href=\"#Permutation-Importance\">1.6.Permutation Importance<\/a>\n* <a href=\"#Model-comparison\">1.7.Model comparison<\/a>\n* <a href=\"#Reference\">1.8.Reference<\/a>","3a203138":"# Modeling","672450e4":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">iv. Outliers","b0568889":"### for modeling we are going use \n* basic model\n    * <span style=\"font-family: Arial;font-size:1.1em;color:#3366ff\">Decision Tree\n* bagging\n    * <span style=\"font-family: Arial;font-size:1.1em;color:#3366ff\">Random forest\n* boosting\n    * <span style=\"font-family: Arial;font-size:1.1em;color:#3366ff\">XGboost\n","f9dd3ce9":"<div style=\"color:white;\n           display:fill;\n           border-radius:50px;\n           background-color:#E8B60B;\n           font-size:300%;\n           font-family:Arial;\n           letter-spacing:0.10px\">\n<p style=\"padding: 10px;\n          color:black;\n          text-align:center;\">Packages\n<\/p>\n<\/div>","98be3246":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">ii. Data encoding","35a4be85":"## <span style=\"font-family: Arial;font-size:1.2em;color:#3366ff\">v. data split"}}