{"cell_type":{"dadef28f":"code","19a76f01":"code","b5758771":"code","5b538a3a":"code","31a9914a":"code","dac41787":"code","4f1ffef1":"code","5fba434c":"code","69014c37":"code","1a9afc8a":"code","3136a3d3":"code","0ceac874":"code","c596a448":"code","e4a7f808":"code","66404add":"code","11137d53":"code","f7329ace":"code","57b2e508":"code","5b11eabb":"code","0bb9556d":"code","7358fdee":"code","9421f908":"code","c589969c":"code","ca346b60":"code","cf5a2e21":"code","3f5597c9":"code","d4d87fb1":"code","8d2e48d2":"code","25b2f1d1":"code","68a43c50":"code","1fdee112":"code","f92dd9c8":"code","3e7d7b7b":"code","da5d8190":"code","3ab618c4":"code","0734b549":"code","f9484e63":"code","b6cba586":"code","c62c437d":"code","e138c993":"code","1f870aab":"code","e1084c55":"code","d9a2d561":"code","5806b6d4":"code","6ab10b3d":"code","6d6a9700":"code","71b60e2b":"code","e11312a1":"markdown","5bb02756":"markdown","b7fcc2a2":"markdown","1c44dc57":"markdown","ff582ed4":"markdown","139800f9":"markdown","cb970b9f":"markdown","9e482f8c":"markdown","fa61ee77":"markdown","ac87597f":"markdown","552d6977":"markdown","9bde2f7f":"markdown","8c2dcc07":"markdown","95d2957a":"markdown","a9a6c154":"markdown","b8b7adf5":"markdown","f4ab5275":"markdown","2c100f50":"markdown","8b475699":"markdown","3ac67c8d":"markdown","4239b440":"markdown","102f94e5":"markdown","e0ae058c":"markdown","49f04ccb":"markdown","6654a168":"markdown","8137e17b":"markdown","fe534913":"markdown","1bcfb244":"markdown","3c932d98":"markdown","7bb6fa33":"markdown","bf13c7cc":"markdown","5d3a6bd6":"markdown","79a17420":"markdown","b57952f1":"markdown","9a64fab6":"markdown","97dfd7ab":"markdown","327b428f":"markdown","f72f7251":"markdown","2a600bb3":"markdown","a5833267":"markdown","a4554e72":"markdown","bb50d7b3":"markdown","fbf9846c":"markdown","eadc0049":"markdown","ad0102f1":"markdown","7706f283":"markdown","4870b331":"markdown","8f46718d":"markdown","8ba07922":"markdown","c2433c2b":"markdown","a501e27c":"markdown"},"source":{"dadef28f":"cmaps = ['Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'crest', 'crest_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'flare', 'flare_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r']","19a76f01":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# seaborn - fotn style set\nplt.style.use('seaborn')\nsns.set(font_scale=1.5)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n\n%cd ..\/input\/titanic","b5758771":"def load_dataset():\n    \"\"\"\n    1.dataset load\n    2.Descriptive statistics\n    3.Feature info\n    \"\"\"\n    train = pd.read_csv(\"train.csv\")\n    test  = pd.read_csv(\"test.csv\")\n    \n    display(train.head(n=3))\n    \n    print(\"\\n\")\n    display(\"featue info : \", train.info())\n    \n    print(\"\\n\")\n    display(\"Technical Statistics :\", train.describe())\n    \n    print(\"\\n\")\n    display(\"dataset shape:\", train.shape)\n    \n    return train, test\n\n# revoke\ntrain, test = load_dataset()","5b538a3a":"def null_data_check(df):\n    \"\"\"\n    NaN data check\n    \"\"\"\n    for col in df.columns:\n        msg = \"column : {0:>10} \\t Percent of null value : {1:.2f}\".format(col, 100 * train[col].isnull().sum() \/ train.shape[0])\n        display(msg)\n        \n# call\nnull_data_check(train)","31a9914a":"for col in train.columns:\n    display(\"column : {0:>10} \\t Percent of null value : {1:.2f}\".format(col, 100 * train[col].isnull().sum() \/ train.shape[0]))","dac41787":"#\ub110 \uccb4\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c\uc11c \ub110\ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud574\uc11c \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774 \uac00\ub2a5\nimport missingno as msno\ndef visualize_null_data(df, opt='matrix'):\n    \"\"\"\n    \ud574\ub2f9 \ub370\uc774\ud130\uc14b\uc758 \ub110\uac12\uc5d0 \ub300\ud55c \uc2dc\uac01\ud654\n    \"\"\"\n    if opt=='matrix':\n        # \ub9e4\ud2b8\ub9ad\uc2a4\ub85c \ud45c\uc2dc\n        msno.matrix(df.iloc[:, :], figsize=(8, 4), color=(0.8, 0.5, 0.3))\n    else:\n        msno.bar(df.iloc[:, :], figsize=(8, 4), color=(0.8, 0.5, 0.3))\n        \n        \n# \ub110\uac12\uc774 \uc788\ub294 \uceec\ub7fc\uc758 \uacbd\uc6b0\uc5d4 \uad70\ub370 \uad70\ub370 \ud770\uc0c9\uae54\ub8cc \ud45c\uc2dc\ub418\ub294 \ubd80\ubd84\uc774 \ub110\uac12\uc774 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8.\n# Cabin\ud53c\ucc98\uc758 \uacbd\uc6b0\ub97c \ubcf4\uba74 \ud770\uc0c9\uc73c\ub85c \ubcf4\uc774\ub294 \ubd80\ubd84\ub4e4\uc774 \ub110\uac12.\nvisualize_null_data(train)        ","4f1ffef1":"# bar\ucc28\ud2b8\ub85c \ubcf4\uba74, \ub9c9\ub300\uadf8\ub798\ud504\ub85c \ubcf4\uc774\ub294 \uac83\uc774 \ub110\uc774 \uc544\ub2cc \uac2f\uc218\ub97c \uc758\ubbf8.\ucd1d \ud589\uc758 \uac2f\uc218\uac00 891\uc774\uba74, \n# cabin\uc744 \ubd24\uc744\ub300 204\uac1c\uac00 \ub110\uc774 \uc544\ub2cc \uac83\uc774\uace0, \ub098\uba38\uc9c0\ub294 \ub110\uc774\ub77c\uace0 \ubcf4\uba74 \ub428\nvisualize_null_data(train, opt='bar')","5fba434c":"# \ub110\uccb4\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac \nimport missingno as msno\n# color = (R, G, B)\nmsno.matrix(train.iloc[:, :], figsize=(8, 4), color=(0.8, 0.5, 0.3))","69014c37":"msno.bar(train.iloc[:, :], figsize=(7, 4), color=(0.3, 0.8, 0.2))","1a9afc8a":"def visualization_target(df):\n    \"\"\"\n    Target\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ubd84\ud3ec\ub3c4 \uc2dc\uac01\ud654\n    \"\"\"\n    f, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 6))\n    survived = df['Survived'].value_counts()\n    survived.plot.pie(explode = [0, 0.1], autopct='%1.1f%%', ax = ax[0], shadow=True)\n    ax[0].set_title(\"Pie Plot - Survived\")\n    ax[0].set_ylabel('')\n    sns.countplot(x='Survived', data = df, ax = ax[1], palette='Paired')\n    ax[1].set_title(\"Count Plot - Survived\")\n    plt.tight_layout()\n    plt.show()\n    \n# \ud0c0\uac9f\uac12\uc5d0 \ub300\ud55c \uc2dc\uac01\ud654\nvisualization_target(train)","3136a3d3":"f, ax = plt.subplots(nrows = 1, ncols=2, figsize=(14, 6))\nsurvived = train[\"Survived\"].value_counts()\n\nsurvived.plot.pie(explode=[0, 0.1], autopct='%1.1f%%', ax = ax[0], shadow=True)\nax[0].set_title(\"Pie Plot Survived\")\nax[0].set_ylabel(\"\")\n\nsns.countplot(x=\"Survived\", data= train, palette=cmaps[np.random.randint(0, 178)], ax=ax[1])\nax[1].set_title(\"Count plot Survived\")\n\nplt.tight_layout()\nplt.show()","0ceac874":"# as_index=True\uc635\uc158\uc740 Groupby \ud53c\ucc98\uac00 \uc778\ub371\uc2a4\ub808\ubca8\ub85c \ub5a8\uc5b4\uc9d0\ntrain[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=True).count()","c596a448":"# as_index=False\uc635\uc158\uc740 \ub450 \ud53c\ucc98\uac00 \uceec\ub7fc\ub808\ubca8\ub85c \uc62c\ub77c\uac10\ntrain[['Pclass', 'Survived']].groupby(['Pclass'], as_index = False).count()","e4a7f808":"train[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=True).sum()","66404add":"# margins=True - All\ud53c\ucc98\uac00 \uc0dd\uc131\npd.crosstab(index = train[\"Pclass\"], columns=train[\"Survived\"], margins=True).style.background_gradient(cmap=cmaps[np.random.randint(0, 178)])","11137d53":"# margin\uc635\uc158 - False - All\ud30c\uc0dd\ubcc0\uc218\uac00 \uc5c6\ub2e4.\npd.crosstab(index = train['Pclass'], columns=train['Survived'], margins=False).style.background_gradient(cmap=\"prism_r\")","f7329ace":"survived_pclass = train[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index=True).mean()\ndisplay(survived_pclass)\n\nsurvived_desc = survived_pclass.sort_values(by='Survived', ascending=False)\nsurvived_desc.plot.bar()","57b2e508":"def visualize_survive_ratio(df):\n    \"\"\"\n    \uc88c\uc11d\ub4f1\uae09\ubcc4 \uc0dd\uc874\ub960 \uc2dc\uac01\ud654\n    \"\"\"\n    y_position = 1.02\n\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\n    pclass_cnt = df['Pclass'].value_counts()\n    pclass_cnt.plot.bar(color = ['#CD7F32','#FFDF00','#D3D3D3'], ax = ax[0])\n    ax[0].set_title(\"Numer of Passengers by Pclass\",y = y_position)\n    ax[0].set_ylabel(\"Count\")\n    ax[0].set_xlabel(\"Pclass\")\n    \n    sns.countplot(\"Pclass\", hue='Survived', data = df, ax = ax[1], palette=cmaps[np.random.randint(0, 178)])\n    ax[1].set_title(\"Pclass : Survived v.s Dead\", y= y_position)\n    plt.tight_layout()\n    plt.show()\n\n# \uc88c\uc11d\ub4f1\uae09\ubcc4 \uc0dd\uc874\ub960 \uc2dc\uac01\ud654\nvisualize_survive_ratio(train)","5b11eabb":"y_position = 1.02\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\npclass_cnt = train[\"Pclass\"].value_counts()\npclass_cnt.plot.bar(ax=ax[0], color=['#CD7F32','#FFDF00','#D3D3D3'])\n\nax[0].set_title(\"Number of Passengers by Pclass\", y= y_position)\nax[0].set_ylabel(\"Count\")\nax[0].set_xlabel(\"Pclass\")\n\nsns.countplot(x=\"Pclass\", data = train, ax=ax[1], hue=\"Survived\", palette=cmaps[np.random.randint(50, 178)])\nax[1].set_title(\"Pclass: Survived v.s Dead.\", y = y_position)\nplt.tight_layout()\nplt.show()","0bb9556d":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(18, 8))\nsurvived_mean_sex = train[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index=True).mean()\n\nprint(\"\\n \uc0dd\uc874\ub960 \ud3c9\uade0\")\ndisplay(survived_mean_sex)\n\nsurvived_mean_sex.plot.bar(ax = ax[0])\nax[0].set_title(\"Survived v.s Sex\")\n\nsns.countplot(x=\"Sex\", hue=\"Survived\", data =train, ax=ax[1])\nax[1].set_title(\"Sex : Survived v.s Dead\")\nplt.tight_layout()\nplt.show()","7358fdee":"train[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index=True).mean().sort_values(by=\"Survived\", ascending=False)","9421f908":"pd.crosstab(index = train[\"Sex\"], columns=train[\"Survived\"], margins=True).style.background_gradient(cmap=cmaps[np.random.randint(0, 179)])","c589969c":"# \uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc131\ubcc4\ub85c \ubcf4\ub294 \uc0dd\uc874\ub960\n# \ubc94\uc8fc\ud615 \ud53c\ucc98\ub4e4\uac04\uc758 \ube44\uad50\nsns.catplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train)\nplt.show()","ca346b60":"# size\uc635\uc158\uc740 \uadf8\ub798\ud504\uc758 \ud06c\uae30\n# aspect\uc635\uc158\uc740 \uadf8\ub798\ud504 \ub108\ube44\uc758 \ud06c\uae30 \uc870\uac85\n# Deprecated API\nsns.factorplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=train, size=5, aspect=1.5)","cf5a2e21":"sns.factorplot(x=\"Sex\", y=\"Survived\", col=\"Pclass\", data=train, size=6, aspect=1.5)","3f5597c9":"def show_age_information(df):\n    \"\"\"\n    1.\ucd5c\uc5f0\uc7a5\uc790\uc640 \ucd5c\uc5f0\uc18c \ub098\uc774 \ubc0f \ud3c9\uade0\uc2b9\uc120\uc790\uc758 \uc5f0\ub839\n    2.\uc5f0\ub839\ubcc4 \uc0dd\uc874\ub960 \ube44\uad50\n    3.\uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc5f0\ub839\ub300 \ube44\uad50\n    4.\ub098\uc774\ub97c \uc99d\uac00\uc2dc\ud0a4\uba74\uc11c \uc0dd\uc874\ub960 \ube44\uad50 \uc2dc\uac01\ud654\n    \"\"\"\n    display(\"\ucd5c\uc5f0\uc7a5\uc790 \ub098\uc774 : {}\".format(df[\"Age\"].max()))\n    print(\"\\n\", \"\ucd5c\uc5f0\uc18c \ub098\uc774\")\n    display(df[\"Age\"].min())\n    print(\"\\n\", \"\ud3c9\uade0 \uc2b9\uc120\uc790 \uc5f0\ub839 {}\".format(train[\"Age\"].mean()))\n    \n    # 2.\uc5f0\ub839\ubcc4 \uc0dd\uc874\ub960 \ube44\uad50\n    fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 5))\n    sns.kdeplot(df[df[\"Survived\"]== 1][\"Age\"], ax = ax)\n    sns.kdeplot(df[df[\"Survived\"]== 0][\"Age\"], ax = ax)\n    plt.legend([\"Survived == 1\", \"Survived == 0\"])\n    \n    # 3.\uc2b9\uac1d\uc758 \uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc5f0\ub839\ub300 \ubd84\ud3ec\n    cond1 = df[\"Pclass\"]==1\n    cond2 = df[\"Pclass\"]==2\n    cond3 = df[\"Pclass\"]==3\n    \n    plt.figure(figsize=(12, 5))\n    df[cond1][\"Age\"].plot(kind='kde')\n    df[cond2][\"Age\"].plot(kind='kde')\n    df[cond3][\"Age\"].plot(kind='kde')\n    plt.xlabel(\"Age\")\n    \n    plt.title(\"Age Distribution within Pclass\")\n    plt.legend([\"1st class\", \"2nd class\", \"3rd class\"])    \n    plt.show()\n    \n    # 4.\uc5f0\ub839\ubcc4 \ub204\uc801 \uc0dd\uc874\ub960 \ube44\uad50\n    y_position = 1.02\n    cumulative_survivor_ratio = []\n    \n    for i in range(1, 80):\n        cond1 = df[\"Age\"] < i\n        survivor_ratio = df[cond1][\"Survived\"].sum() \/ len(df[cond1][\"Survived\"])\n        cumulative_survivor_ratio.append(survivor_ratio)\n        \n    plt.figure(figsize=(12, 5))\n    plt.plot(cumulative_survivor_ratio)\n    plt.xlabel(\"Range of Age from 0 to 80\")\n    plt.ylabel(\"Cumulative Survivor Ratio\")\n    plt.title(\"Cumulative Survivor Ratio as getting old\", y = y_position)\n    plt.show()","d4d87fb1":"show_age_information(train)","8d2e48d2":"# \uc0dd\uc874\uc5d0 \ub530\ub978 \uc5f0\ub839 \ud788\uc2a4\ud1a0\uadf8\ub7a8\ncond1 = train['Survived']==1\ncond0 = train['Survived']==0\nfig, ax = plt.subplots(1, 1,figsize=(12, 5))\nsns.kdeplot(train[cond1]['Age'], ax = ax)\nsns.kdeplot(train[cond0]['Age'], ax = ax)\nplt.legend(['Survived == 1', 'Survived==0'])\nplt.show()","25b2f1d1":"# \uc2b9\uc120\uac1d\uc758 \uac1d\uc2e4\ub4f1\uae09\ubcc4 \uc5f0\ub839\ub300 \ubd84\ud3ec\ncond1 = train['Pclass']==1\ncond2 = train['Pclass']==2\ncond3 = train['Pclass']==3\n\nplt.figure(figsize=(12, 5))\ntrain['Age'][cond1].plot(kind='kde')\ntrain['Age'][cond2].plot(kind='kde')\ntrain['Age'][cond3].plot(kind='kde')\nplt.xlabel('Age')\nplt.title(\"Age Distribution within classes\")\nplt.legend(['1st Class', '2nd Class', '3rd Class'])\nplt.show()","68a43c50":"# \ub098\uc774\uc758 \ubc94\uc704\ub300\ub97c \ub113\ud600\uac00\uba70 \uc0dd\uc874\ub960 \ube44\uad50\ncumulative_survival_ratio = []\ny_position = 1.02\nfor i in range(1, 80):\n    survival_ratio = train[train['Age'] < i]['Survived'].sum() \/ len(train[train['Age'] < i]['Survived'])\n    cumulative_survival_ratio.append(survival_ratio)\n    \nplt.figure(figsize=(12, 5))\nplt.plot(cumulative_survival_ratio)\nplt.title(\"Survival Ratio change depending on the range of age\", y = y_position, size=15)\nplt.ylabel(\"Survival Ratio\", size=15)\nplt.xlabel(\"Range of Age(From 0 to 80)\", size = 15)\nplt.show()","1fdee112":"fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 8))\nsns.violinplot(x=\"Pclass\", y=\"Age\", hue=\"Survived\", data=train, ax= ax[0], scale='count', split=True)\nax[0].set_title(\"Pclass and Age v.s Survived\")\nax[0].set_yticks(range(0, 110, 10))\n\n\n# split=True|False\uc635\uc158\uc744 \ub208\uc5ec\uaca8 \ubcfc\uac83\n# cale = 'count' | 'area'\nsns.violinplot(x=\"Sex\", y=\"Age\", hue=\"Survived\", ax=ax[1], scale='count', split=True, data=train)\nax[1].set_title(\"Sex and Age v.s Survived\")\nax[1].set_yticks(range(0, 110, 10))\n\nplt.show()","f92dd9c8":"def visualization_violinplot(df, split=True):\n    \"\"\"\n    violin\ud50c\ub86f\uc744 \uc774\uc6a9\ud55c \uba40\ud2f0 \ud53c\ucc98 \ube44\uad50\n    \"\"\"\n    y_position = 1.02\n    fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(14, 8))\n    \n    sns.violinplot(x='Pclass', y= 'Age', data = df, ax = ax[0], scale='count', split=split, hue='Survived')\n    ax[0].set_title(\"Pclass and Age v.s Survived\", y = y_position)\n    ax[0].set_yticks(range(0, 110, 10))\n    \n    sns.violinplot(x='Sex', y='Age', data = df, ax=ax[1], scale='count', split=split, hue='Survived')\n    ax[1].set_title(\"Sex and Age v.s Survived\")\n    ax[1].set_yticks(range(0, 110, 10))\n    \n    plt.show()\n    \n# \uc218\ud589\nvisualization_violinplot(train, split=True)","3e7d7b7b":"visualization_violinplot(train, split=False)","da5d8190":"fig, ax = plt.subplots(1, 1, figsize=(14, 8))\n\nembarked_survived_mean = train[[\"Embarked\", \"Survived\"]].groupby([\"Embarked\"], as_index=True).mean()\ndisplay(embarked_survived_mean)\n\n# \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c\nembarked_survived_mean_sort = embarked_survived_mean.sort_values(by=[\"Survived\"], ascending=False)\ndisplay(embarked_survived_mean_sort)\n\nembarked_survived_mean_sort.plot.bar(ax= ax, color=(1, 0.4, 0.5))","3ab618c4":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 15))\n\nsns.countplot(x=\"Embarked\", data = train, ax=ax[0, 0])\nax[0,0].set_title(\"1. Nbr of Passengers boarded on ship\")\n\nsns.countplot(x=\"Embarked\", hue=\"Sex\", data=train, ax = ax[0, 1])\nax[0, 1].set_title(\"2. Male-Female Split for Embarked\")\n\nsns.countplot(x=\"Embarked\", hue=\"Survived\", data=train, ax=ax[1,0])\nax[1, 0].set_title(\"3. Embarked v.s Survived\")\n\nsns.countplot(x=\"Embarked\", hue=\"Pclass\", data=train, ax=ax[1,1])\nax[1,1].set_title(\"4. Embarked v.s Pclass\")\n\n\n# wspace - \uceec\ub7fc\uac04\uc758 \uac04\uaca9\n# hspace - \ud589\uac04\uc758 \uac04\uaca9\nplt.subplots_adjust(wspace=0.2, hspace=0.3)\n\nplt.show()","0734b549":"# \ud53c\ucc98 \ucd94\uac00 \ntrain[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","f9484e63":"train.head(n=3)","b6cba586":"def feature_engineering(train, test, logT=False):\n    \"\"\"\n    \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\n    1.FamilySize\uceec\ub7fc \ucd94\uac00 - \uac00\uc871\uc218\n    2.Fare feature\uc758 \ub110\uac12 \ucc98\ub9ac \n    3.\ud3b8\ud5a5\ub418\uc5b4 \uc788\ub294 Fare\ud53c\ucc98\uc5d0 \ub300\ud574\uc11c \ub85c\uadf8\ubcc0\ud658(np.log1p)\n    \"\"\"\n    \n    # \ud53c\ucc98 \ucd94\uac00\ub85c \uc778\ud574 \ubd88\ud544\uc694\ud574\uc9c4 \uceec\ub7fc \uc0ad\uc81c \n    print(\"\\n \uc0ad\uc81c\uc804\")\n    display(train.head(n= 3))\n    train = train.drop([\"SibSp\", \"Parch\"], axis=1, inplace=False, errors=\"ignore\")\n    test = test.drop([\"SibSp\", \"Parch\"], axis=1, inplace=False, errors=\"ignore\")\n    \n    print(\"\\n \uc0ad\uc81c\ud6c4 \")\n    display(train.head(n=3))\n    \n    display(\"\uac00\uc7a5 \ub9ce\uc740 \uac00\uc871\uc218 {0} \uc640 \uac00\uc7a5 \uc801\uc740 \uac00\uc871\uc218 {1}\".format(train[\"FamilySize\"].max(), train[\"FamilySize\"].min()))\n    \n    # \uacb0\uce21\uce58 \ucc98\ub9ac \n    train[\"Fare\"] = train[\"Fare\"].fillna(value = train[\"Fare\"].mean(), axis=0)\n    test[\"Fare\"] = test[\"Fare\"].fillna(value = test[\"Fare\"].mean(), axis=0)\n    \n    # \ud3b8\ud5a5\ub418\uc5b4 \uc788\ub294 Fare\uac12 \ub85c\uadf8\ubcc0\ud658 \n    if logT:\n        train[\"Fare\"] = train[\"Fare\"].apply(lambda x: np.log1p(x))\n        test[\"Fare\"] = test[\"Fare\"].apply(lambda x: np.log1p(x))\n        \n    return train, test\n\n# \uc218\ud589 \ntrain, test = feature_engineering(train, test)","c62c437d":"y_position = 1.02\n\nfig, ax = plt.subplots(nrows=1, ncols=3, figsize=(40, 10))\nsns.countplot(x=\"FamilySize\", data=train, ax= ax[0])\nax[0].set_title(\"1.Nbr of Passengers boarde on Ship\", y=y_position)\n\nsns.countplot(x=\"FamilySize\", hue=\"Survived\", data=train, ax = ax[1])\nax[1].set_title(\"2.Survivor countPlot depending on Family size\", y=y_position)\n\nfamilysize_survived_mean = train[[\"FamilySize\", \"Survived\"]].groupby([\"FamilySize\"], as_index=True, squeeze=False).mean()\ndisplay(familysize_survived_mean)\n\nfamilysize_survived_mean.sort_values(by=\"Survived\", ascending=False).plot.bar(ax= ax[2])\nax[2].set_title(\"3.Survivor Ratio depending on Family Size.\")\nplt.subplots_adjust(wspace= 0.2, hspace=0.5)\nplt.show()","e138c993":"fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(8, 8))\n\nfare_data = train[\"Fare\"]\ng = sns.distplot(a=fare_data, color=\"r\", label=\"skewness : {:.2f}\".format(fare_data.skew()), ax = ax)\ng.legend(loc='best')\nplt.grid(True)\nplt.show()","1f870aab":"def visualization_distplot(df):\n    \"\"\"\n    hist\uc640 kdeplot\uc744 \ud569\uce5c \uadf8\ub798\ud504 \n    \"\"\"\n    fig, ax = plt.subplots(1, 1, figsize=(8, 8))\n    \n    fare_data = df['Fare']\n    g = sns.distplot(a=fare_data, color='r', label=\"skewness: {:.2f}\".format(fare_data.skew()), ax=ax)\n    g.legend(loc='best')\n    plt.grid(True)\n    plt.show()","e1084c55":"#Fare\ud53c\ucc98\uc5d0 \ub300\ud55c \ub85c\uadf8\ubcc0\ud658 \uc804 \nvisualization_distplot(train)","d9a2d561":"# \ub85c\uadf8\ubcc0\ud658 \ubc0f \ub110\uac12 \ucc98\ub9ac \ubd80\ubd84 \ucd94\uac00\ud558\uc5ec \uc7ac\uc218\ud589\ntrain, test = feature_engineering(train, test, logT=True)","5806b6d4":"# \ub85c\uadf8\ubcc0\ud658 \ud6c4 \ud3b8\ud5a5\ub3c4\uac00 0.39\ub85c \uac10\uc18c\nvisualization_distplot(train)","6ab10b3d":"cabin_null_ratio = train[\"Cabin\"].isnull().sum() \/ train.shape[0]\ndisplay(\"Cabin\ud53c\ucc98\uc758 \ub110\uac12 \ube44\uc728 : {:.2f} %\".format(cabin_null_ratio * 100))","6d6a9700":"train.Ticket.value_counts()","71b60e2b":"train[['Ticket','Survived']].groupby('Ticket').mean()","e11312a1":"### 2.1 PClass","5bb02756":"## Color Maps","b7fcc2a2":"* \uc5f0\ub839\uc758 \uc0dd\uc874\ub960 \ube44\uad50","1c44dc57":"### 2.8 Fare\n* \uc694\uae08\ub300\ub85c \uc54c\uc544\ubcf4\ub294 \uc0dd\uc874\ub960","ff582ed4":"* \uc0ac\uc6b0\uc2a4\ud584\ud2bc\ud56d\uad6c\uc5d0 \ud0d1\uc2b9\ud55c \uc2b9\uac1d\uc758 \uc2b9\uc120\ube44\uc728\ub3c4 \ub9ce\uace0, \ub610\ud55c \uac1d\uc2e4\ub4f1\uae09\uc774 3\ub4f1\uae09\uc774 \uac00\uc7a5 \ub9ce\uc740\uac83\uc73c\ub85c \ubcf4\uc544, \uc18c\ub4dd\uc218\uc900\uc774 \ub5a8\uc5b4\uc9c0\ub294 \ud558\uce35\ubbfc\uc758 \uc774\uc8fc \ubaa9\uc801\uc774 \uc544\ub2c8\uc5c8\uc744\uac83\uc73c\ub85c \ucd94\uce21\ud574\ubcfc\uc218 \uc788\uc74c\n* \uc0ac\ub9dd\ube44\uc728\ub610\ud55c \uc0ac\uc6b0\uc2a4\ud584\ud2bc\uc5d0\uc11c \ud0d1\uc2b9\ud55c \uc2b9\uac1d\uc758 \ube44\uc728\uc774 \uac00\uc7a5 \ub9ce\uc74c","139800f9":"* \uc694\uae08\uc774 0 ~ 50\uc0ac\uc774\uc5d0 \uc9d1\uc911\ub418\uc5b4 \uc788\uc73c\uba70 \ud3b8\ud5a5\ub41c \ubd84\ud3ec\ub97c \ubcf4\uc778\ub2e4. \uc774\uc9c4\ubd84\ub958\uc778 \uacbd\uc6b0\uc5d0\ub294 \ub85c\uadf8\ubcc0\ud658\uc744 \ud1b5\ud574 \uc815\uaddc\ud654\ubd84\ud3ec\ub97c \ub9cc\ub4e4\uace0 \uc608\uce21\ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294\uac83\uc774 \ud544\uc694\ud574 \ubcf4\uc784","cb970b9f":"* \uc131\ubcc4\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960\uc774 \ub192\uc740 \uc21c\uc73c\ub85c \uc815\ub82c","9e482f8c":"## library load","fa61ee77":"### 2.10 Ticket","ac87597f":"![data_Analysis_process.PNG](attachment:34377631-b7c5-4ed0-8596-2c42035636c8.PNG)","552d6977":"* \uac00\uc871\uc218\uc640 \uc0dd\uc874\ub960\uc758 \uad00\uacc4\n* [squeeze\uc635\uc158 \uad00\ub828](https:\/\/www.inflearn.com\/questions\/160111)","9bde2f7f":"### 1.1 Null Data Check","8c2dcc07":"## Data Analysis Process Layout","95d2957a":"* \uc88c\uc11d\ubcc4 \ud3c9\uade0 \uc0dd\uc874\uc728\n1\ub4f1\uae09 \uc88c\uc11d\uc77c\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c(so sad)","a9a6c154":"* \uc5ec\uc131\uacfc \uc0ac\ud68c\uc801 \uc57d\uc790 \uadf8\ub9ac\uace0 \ub098\uc774 \uc5b4\ub9b0 \uc544\uc774\ub4e4\uc774 \uc0dd\uc874\ub960\uc774 \ub192\ub2e4.","b8b7adf5":"### 2.2 Sex\n* \uc131\ubcc4\uc774\ub77c\ub294 \ud53c\ucc98\uac00 \ud0c0\ub2c8\ud0c0\ub2c9 \ud574\uc0c1 \uc7ac\ub09c\uc0ac\uace0\uc5d0\uc11c \uc0dd\uc874\ub960\uc5d0 \uc911\uc694\ud55c \ud53c\ucc98\uc778\uac00?","f4ab5275":"### 2.3 Both Sex and Pclass\n* seaborn\uc758 factorplot\uc774\uc6a9\ud558\uc5ec 3\uac1c\uc758 \ucc28\uc6d0\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uadf8\ub798\ud504 \n* \ubc94\uc8fc\ud615 \ud53c\ucc98\uac04\uc758 \uc0c1\uad00\uad00\uacc4 \ube44\uad50 \uac00\ub2a5","2c100f50":"* bar\ucc28\ud2b8\uc640 countplot\uc73c\ub85c \uc88c\uc11d\ub4f1\uae09\ubcc4 \uc0dd\uc874\ub960 \ube44\uad50","8b475699":"* Embarked\ub85c \uc54c\uc544\ubcf4\ub294 \uc0dd\uc874\ub960","3ac67c8d":"### 2.9 Cabin","4239b440":"* Moulization","102f94e5":"* \uac1d\uc2e4\ub4f1\uae09\uc774 \ub0ae\uc73c\uba74, \uc131\ubcc4\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc0ac\ub9dd\ub960\uc774 \ub192\uc544\uc9d0\uc744 \uc54c\uc218\uc788\ub2e4.\n* \uac1d\uc2e4\ub4f1\uae09\uc774 \ub192\uc73c\uba74, \uc131\ubcc4\uc5d0 \uc0c1\uad00\uc5c6\uc774 \uc0dd\uc874\ub960\uc774 \ub192\uc544\uc9d0.\n* \uac1d\uc2e4\ub4f1\uae09\uacfc\ub294 \uc0c1\uad00\uc5c6\uc774 \uc5ec\uc131\uc758 \uc0dd\uc874\ube44\uc728\uc774 \ud6e8\uc52c \ub192\ub2e4","e0ae058c":"### 2.7 Sibsp, Parch\n* \ub450 \ud53c\ucc98\ub97c \ud569\uce5c \uc0c8\ub85c\uc6b4 \ud53c\ucc98 \uc0dd\uc131\ud560\uac83(FamilySize)\n* \uac00\uc7a5 \uac00\uc871\uc218\uac00 \ub9ce\uc740 \uac83\uacfc \uac00\uc7a5 \uc801\uc740 \uac83 \ubcf4\uc5ec\uc918","49f04ccb":"* Countplot\uc73c\ub85c \ubcf4\ub354\ub77c\ub3c4, \uc88c\uc11d\ub4f1\uae09\uc774 1\ub4f1\uae09\uc778 \uacbd\uc6b0\uac00 \uc0ac\ub9dd\ub960\uc774 \ud6e8\uc52c \ub2e4\ub978 \uc88c\uc11d\uc5d0 \ube44\ud574 \ub0ae\uc74c\uc744 \uc54c \uc218\uc788\ub2e4. \uc774\ub85c \ubbf8\ub8e8\uc5b4 \ubcfc\ub54c \uc0dd\uc874\ub960 \uc608\uce21 \ubaa8\ub378\uc2dc\uc5d0\ub294 \ud574\ub2f9 \ud53c\ucc98\uac00 \uc911\uc694 \uacb0\uc815\uc778\uc790\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc74c\uc744 \ubcf4\uc5ec\uc900\ub2e4\n* \uadf8\uc678\uc758 \uac1d\uc2e4\ub4f1\uae09\uc740 \uc0ac\ub9dd\uc790\uc218\uac00 \uc0dd\uc874\uc790\ub97c \uc218\ub97c \ucd08\uacfc\ud55c\ub2e4.","6654a168":"* Read Evaluate Loop Print","8137e17b":"* sum\uc744 \ud558\uba74 \uc88c\uc11d\ub4f1\uae09\ubcc4\ub85c \uc0dd\uc874\uc790 \uc9d1\uacc4\uac00\ub2a5","fe534913":"* \uc88c\uc11d\ub4f1\uae09\uc5d0 \ub530\ub978 \uc2b9\uac1d\uc758 \uc218","1bcfb244":"* Read Evaluate Print Loop","3c932d98":"### 2.5 Pclass, Sex ,Age\n* violin plot\uc744 \uc774\uc6a9\ud55c \uba40\ud2f0 \ud53c\ucc98 \ube44\uad50\n* [violinplot \ucc38\uc870](https:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html#seaborn.violinplot)","7bb6fa33":"* \uac00\uc871 \uc218\uac00 \ub9ce\ub2e4\uace0 \ud574\uc11c \uc0dd\uc874\ub960\uc774 \ub192\uc740\uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, 2\uba85~4\uba85\uc0ac\uc774\uc758 \uc0dd\uc874\ub960\uc774 \uc81c\uc77c \ub192\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4.\n* 11\uba85\uc758 \ub300\uac00\uc871\uc778 \uacbd\uc6b0\uc5d4, \ube44\uadf9\uc774\uc9c0\ub9cc \ube44\uc0c1\uc0c1\ud669\uc2dc\uc5d0 \uc774\ub3d9\uc131\uc5d0 \ubb38\uc81c\uac00 \uc788\uc744 \uc218\ub3c4 \uc788\uc74c\uc5d0 \uc720\uc758\ubbf8 \uc758\ubbf8\uac00 \uc788\uc74c.\n* 1\uba85\uc778 \uacbd\uc6b0\uc758 \uc0dd\uc874\ub960\uc774 \uc758\uc678\ub85c \ub192\uc9c0 \uc54a\uc74c\uc5d0 \uc8fc\ubaa9(\uc0ac\ub9dd\uc790 \uc218 - 350\uba85\uc774 \ud6e8\uc52c \uc0c1\ud68c\ud568)","bf13c7cc":"### 1.2 Target Label \ud655\uc778\n* \ud0c0\uac9f\uac12\uc758 \ubd84\ud3ec\ub3c4\ub97c \ud655\uc778\ud558\uc5ec \ud3b8\ud5a5\ub41c \ubd84\ud3ec\ub3c4\ub97c \uac16\ub294\uc9c0 \ud655\uc778\uc774 \ud544\uc694\n* \uc774\uc9c4\ubd84\ub958(binary classification)\uc758 \uacbd\uc6b0 1\uacfc 0\uc758 \ubd84\ud3ec\ub3c4\uc5d0 \ub530\ub77c \ud3c9\uac00\ubc29\ubc95\uc774 \ub2ec\ub77c\uc9c8\uc218 \uc788\uc74c","5d3a6bd6":"* REPL(Read Evaluation Print Loop)","79a17420":"\ub0a8\uc790\uc640 \uc5ec\uc790\uc758 \uc0dd\uc874\ub960\uc774 \uaca9\ucc28\uac00 \ud070 \uac83\ubcf4\uc544 \ud310\ub2e8\ud560\ub54c \uc131\ubcc4 \ud53c\ucc98\ub3c4 \uc911\uc694\ud55c \uacb0\uc815\uc778\uc790\uc784\uc744 \uc54c\uc218 \uc788\ub2e4.","b57952f1":"* **Ticket feature\ub85c\ubd80\ud130 \uc0c8\ub86d\uac8c \ub3c4\ucd9c\ud560 \uc218 \uc788\ub294 \ud53c\ucc98\ub294?**","9a64fab6":"* REPL","97dfd7ab":"* \uc5f0\ub839\ub300","327b428f":"* Read Evaluate Print Loop","f72f7251":"# Titanic Tutorial Alive People Prediction","2a600bb3":"### Feature Description\n* Pclass - \uac1d\uc2e4 \ub4f1\uae09\n* SibSp - Siblings + Spouse ( \uc790\uc190 \ubc0f \ubc30\uc6b0\uc790)\n* Parch - Parents + Children(\ubd80\ubaa8\uc640 \ub3d9\ubc18\ud55c \uc544\uc774\uc218)\n* Embarked - \uacbd\uc720\ud55c \ud56d\uad6c\n* Survived - \uc0dd\uc874\uc5ec\ubd80(1 - \uc0dd\uc874,  0 - \uc0ac\ub9dd)\n* Age - \uc5f0\ub839\n* Ticket - \ud2f0\uac9f\ubc88\ud638\n* Cabin - \uc120\uc2e4\ubc88\ud638\n* Fare - \uc694\uae08","a5833267":"### 2.4 Age","a4554e72":"* 1 - \uc0dd\uc874\uc790 - 38.4\ud37c\uc13c\ud2b8, 0 - \uc0ac\ub9dd\uc790 61.6\ud37c\uc13c\ud2b8","bb50d7b3":"## Datasets confirmation","fbf9846c":"* crosstab\uc744 \uc774\uc6a9","eadc0049":"* \uacbd\uc720\ud56d\uad6c(Embarked port)\uc640 \uc5f0\uad00\uc9c0\uc5b4\uc11c \ud53c\ucc98 \uc0b4\ud53c\uae30","ad0102f1":"* \uc5f0\ub839\ub300\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc740\uac83\uc73c\ub85c \ubcfc\ub54c , \ub098\uc774 \ub610\ud55c \uc911\uc694\ud55c \ud53c\ucc98\uc784\uc744 \uc54c \uc218 \uc788\ub2e4.","7706f283":"**\uc601\uad6d\uc758 SouthHampton\uc5d0\uc11c \uc2b9\uc120\ud55c \uc2b9\uac1d\uc758 \uc0ac\ub9dd\ub960\uc774 \ub2e4\ub978 \uacbd\uc720\ud56d\uad6c\ubcf4\ub2e4 \ub192\ub2e4(immigrants to North America?)**","4870b331":"## EDA(Exploratory Data Analysis)","8f46718d":"### 2.6 Embarked","8ba07922":"#### REPL","c2433c2b":"* Read Evaluate Print Loop","a501e27c":"* Cabin\ud53c\ucc98\uc758 \uacbd\uc6b0\ub294 \ub110\uac12\uc758 \ube44\uc728\uc774 80\ud37c\uc13c\ud2b8\uc5d0 \uc721\ubc15\ud558\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub378\uc5d0 \ud3ec\ud568\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4."}}