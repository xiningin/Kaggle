{"cell_type":{"cfeebd4c":"code","023b8e83":"code","444c1319":"code","57ba091e":"code","3c626ba7":"code","fd3f33bb":"code","15a46f14":"code","405abff5":"code","8ceabed4":"code","0f4bb6c6":"code","cc0f1780":"code","437f9ff5":"code","d4983625":"code","04f5c789":"code","127a0bf4":"markdown","adec2716":"markdown","3308578c":"markdown","07ca0337":"markdown","72287bbe":"markdown","f131dfd3":"markdown","fd172921":"markdown","6713adf6":"markdown","a03493e1":"markdown","b9c5802c":"markdown"},"source":{"cfeebd4c":"!pip install nb_black -q","023b8e83":"%load_ext nb_black","444c1319":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport pandas_datareader.data as web\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score","57ba091e":"data = web.DataReader(\"TSLA\", data_source=\"yahoo\", start=\"2010-06-29\", end=\"2020-11-25\")\ndata = data.round(3)\ndata.head()","3c626ba7":"fig = px.line(\n    data.reset_index(), x=\"Date\", y=\"Close\", title=\"Tesla Stock Price - Close\"\n)\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","fd3f33bb":"def create_dataset(dataset, look_back=60):\n    dataX, dataY = [], []\n    for i in range(len(dataset) - look_back):\n        a = dataset[i : (i + look_back), 0]\n        dataX.append(a)\n        dataY.append(dataset[i + look_back, 0])\n    return pd.DataFrame(np.array(dataX)), np.array(dataY)\n\n\nX_close, Y_close = create_dataset(data[[\"Close\"]].values)\naux = X_close\naux[\"Target\"] = Y_close\naux","15a46f14":"del aux","405abff5":"def split_dataset(X, Y):\n    X_train = X[:-100].values\n    y_train = Y[:-100]\n\n    X_test = X[-100:].values\n    y_test = Y[-100:]\n    return X_train, y_train, X_test, y_test\n\n\n# Close dataset\nX_train_close, y_train_close, X_test_close, y_test_close = split_dataset(\n    X_close, Y_close\n)","8ceabed4":"from sklearn.preprocessing import MinMaxScaler\n\nsc_close_x = MinMaxScaler()\nsc_close_y = MinMaxScaler()\n\n# X Scale\nX_train_close_scaled = sc_close_x.fit_transform(X_train_close).reshape(\n    *X_train_close.shape, 1\n)\nX_test_close_scaled = sc_close_x.transform(X_test_close).reshape(*X_test_close.shape, 1)\n\n# Y Scale\ny_train_close_scaled = sc_close_y.fit_transform(y_train_close.reshape(-1, 1)).reshape(\n    -1\n)\ny_test_close_scaled = sc_close_y.transform(y_test_close.reshape(-1, 1)).reshape(-1)","0f4bb6c6":"print(X_train_close_scaled.shape)\nprint(y_train_close_scaled.shape)","cc0f1780":"%%time \n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\n\ndef gen_model():\n    rnn = Sequential()\n    rnn.add(LSTM(units=360, return_sequences=True, input_shape=(X_train_close_scaled.shape[1], 1)))\n    rnn.add(Dropout(0.2))\n    rnn.add(LSTM(units=360, return_sequences=True))\n    rnn.add(Dropout(0.2))\n    rnn.add(LSTM(units=360, return_sequences=True))\n    rnn.add(Dropout(0.2))\n    rnn.add(LSTM(units=360, return_sequences=True))\n    rnn.add(Dropout(0.2))\n    rnn.add(LSTM(units=360, return_sequences=True))\n    rnn.add(Dropout(0.2))\n    rnn.add(LSTM(units=360))\n    rnn.add(Dropout(0.2))\n    rnn.add(Dense(units=1,activation='relu'))\n    rnn.compile(optimizer=\"adam\", loss=[\"mean_squared_error\",'cosine_similarity'])\n    callback = keras.callbacks.EarlyStopping(\n        monitor=\"val_loss\",\n        min_delta=0,\n        patience=0,\n        verbose=False,\n        mode=\"auto\",\n        baseline=None,\n        restore_best_weights=False,\n    )\n    return rnn\n\nrnn = gen_model()\nhistory = rnn.fit(X_train_close_scaled, y_train_close_scaled,validation_data=(X_test_close_scaled,y_test_close_scaled), epochs=40, batch_size=32)","437f9ff5":"history_df = pd.DataFrame(history.history)\ngo.Figure() \\\n.add_trace(go.Scatter(x=history_df.index, y=history_df.loss, mode=\"lines\", name=\"Train Loss\")) \\\n.add_trace(go.Scatter(x=history_df.index, y=history_df.val_loss, mode=\"lines\", name=\"Validation Loss\")) \\\n.update_layout(\n    title=\"Train Metrics\",\n    xaxis_title=\"Epochs\",\n    yaxis_title=\"Loss\",\n)\n","d4983625":"# Model\ny_pred = rnn.predict(X_test_close_scaled)\ny_true = y_test_close_scaled\ntest_dates = data.reset_index()[\"Date\"][-100:]\n\n# Original values\ny_pred_original = sc_close_y.inverse_transform(y_pred.reshape(-1, 1)).reshape(-1)\ny_true_original = sc_close_y.inverse_transform(y_true.reshape(-1, 1)).reshape(-1)","04f5c789":"# Create traces\ngo.Figure().add_trace(\n    go.Scatter(x=test_dates, y=y_true_original, mode=\"lines\", name=\"Real Close\",)\n).add_trace(\n    go.Scatter(x=test_dates, y=y_pred_original, mode=\"lines\", name=\"Predicted Close\",)\n).update_layout(\n    title=\"Stock price - Tesla Motors\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"Stock price ($)\",\n).show()\n\nprint(\"r2_score close :\", r2_score(y_true, y_pred))\nprint(\"mean_squared_error close:\", mean_squared_error(y_true, y_pred))","127a0bf4":"Just take a look at time serie.","adec2716":"Predictions and take the real values.","3308578c":"# T-delay\n\nCreating the dataset to be used by RNN.\n\n<img src=\"https:\/\/www.tensorflow.org\/tutorials\/structured_data\/images\/split_window.png\" align=\"left\"  \/>","07ca0337":"Using MixMaxScaler on feature.","72287bbe":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/b\/bd\/Tesla_Motors.svg)\n\n\n\n\nTesla, Inc. (formerly Tesla Motors, Inc.) is an American electric vehicle and clean energy company based in Palo Alto, California. Tesla's current products include electric cars (the Model S, Model 3, Model X, and Model Y), battery energy storage from home to grid scale (the Powerwall, Powerpack, and Megapack), solar products (solar panels and solar roof tiles) and related products and services.\n\n[The dataset!](https:\/\/www.kaggle.com\/rpaguirre\/tesla-stock-price)\n\nSource - [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Tesla,_Inc.)","f131dfd3":"# RNN\nCreating and traing the RNN.\n\n<br\/>\n<img src=\"https:\/\/miro.medium.com\/max\/770\/1*xTKE0g6XNMLM8IQ4aFdP0w.png\" width='800px' align=\"left\" \/>","fd172921":"The predicted curve looks more smooth than real, lika a 'trend'.","6713adf6":"# Plot results and evaluation\nJust using R2 and MSE to mensure the RNN performace and ploting the graph to compare predict values and real values as well.","a03493e1":"# The dataset","b9c5802c":"## Reshaping\nThe dimensions is (n_sample, t_delays, 1).\n\nDivide between train and test.\n"}}