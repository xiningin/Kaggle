{"cell_type":{"4cad4318":"code","d2a5fbe4":"code","9a2991c8":"code","823448e5":"code","0bfa1463":"code","9a7be29c":"code","710ac39d":"code","038b4ebc":"code","4f801de6":"code","d6418bea":"code","3775b6a9":"code","e927804f":"code","20c023c0":"code","17a22d83":"code","88c072e1":"code","3eaf04f4":"code","cf578709":"code","223fe6e6":"code","e4625dae":"code","12958f7f":"code","09156682":"code","66a8ef79":"code","e44e1144":"code","864694a4":"code","95cdbf73":"code","af5c774a":"code","bbbb867b":"code","bc745284":"code","ec2ebedf":"code","7e31ede7":"code","cf98fb00":"code","a31d0518":"code","a533861c":"markdown","635d6a41":"markdown","4889c27d":"markdown","592ce2df":"markdown","17b25048":"markdown","81ae9cfb":"markdown","cf0a9c85":"markdown","cba6de0a":"markdown","0d9fb6c9":"markdown","30283297":"markdown","efc0c08c":"markdown","aa20b821":"markdown","518eba83":"markdown","faac3ead":"markdown","40e60d1a":"markdown","e9374ada":"markdown","03316f3d":"markdown","3e79ac2f":"markdown","3580200e":"markdown","e7d8b449":"markdown","219a4186":"markdown","5e04a73d":"markdown","49dc69c3":"markdown","6df1472e":"markdown","7472b480":"markdown","a5a65115":"markdown","fa338a20":"markdown","8ccbf002":"markdown","37f71ec1":"markdown","d4166886":"markdown","3b3a95f1":"markdown","53a3a5d3":"markdown","28d7d78a":"markdown","629822bb":"markdown","21fb8444":"markdown","a25f216d":"markdown","861b88cb":"markdown","a3fff784":"markdown","8c991dab":"markdown","8a984fef":"markdown","20085c58":"markdown"},"source":{"4cad4318":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px","d2a5fbe4":"!pip install NitroFe","9a2991c8":"data = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv') \nasset_details = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv') ","823448e5":"btc = data[data[\"Asset_ID\"]==1].reset_index(drop = True)\nbtc['timestamp'] = pd.to_datetime(btc['timestamp'], unit='s')\nbtc = btc.set_index('timestamp')[-500:]","0bfa1463":"from NitroFE import SeriesWeightedMovingFeature\nob = SeriesWeightedMovingFeature(lookback_period=8, operation= np.mean)\nres = ob.fit(btc['Close'][-500:],btc['Volume'][-500:],first_fit=True)['Close'][-100:]\n\nfrom NitroFE import ExponentialMovingFeature\nob = ExponentialMovingFeature(span=8)\nres2 = ob.fit(btc['Close'][-500:], first_fit=True)[-100:]","9a7be29c":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\n\ncandlestick.add_trace(go.Scatter(x=data.index, y=res.values,mode='lines',line=dict(color='royalblue', width=5),name='Volume Weighted Closing Moving Feature'))\ncandlestick.add_trace(go.Scatter(x=data.index, y=res2.values,mode='lines',line=dict(color='yellow', width=5),name='Exponential Moving Feature'))\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1500,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()","710ac39d":"from NitroFE import PercentageValueOscillator\nob=PercentageValueOscillator(fast_period=15, slow_period=10,smoothing_period=20)\nres=ob.fit(btc['Close'][-500:],first_fit=True)[-100:]","038b4ebc":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\nfeaturefig=go.Figure(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values>=0,res.values, 0),mode='lines', fill='tonexty', line_color='green'))\nfeaturefig.add_trace(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values<0,res.values,0),mode='lines',fill='tonexty',line_color='red'))\n\nfeaturefig.update_layout(title = {'text': 'Percentage Value Oscillator','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","4f801de6":"from NitroFE import MovingAverageConvergenceDivergence\nob=MovingAverageConvergenceDivergence(fast_period=26, slow_period=12, smoothing_period=9)\nres=ob.fit(btc['Close'][-500:],first_fit=True)[-100:]","d6418bea":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\nfeaturefig=go.Figure(data = go.Bar(x=data.index, y=res.values,\n                             marker_color=pd.Series(res.values).rolling(2,min_periods=2).agg(lambda x: 1 if x[-1:].values[0]>=x[-2:].values[0] else 0 ).\\\n                             fillna(1).replace(1,'green').replace(0,'red').values))\nfeaturefig.update_layout(title = {'text': 'Moving Average Convergence Divergence Chart','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","3775b6a9":"from NitroFE import TypicalValue\nob = TypicalValue(lookback_period=32)\nres = ob.fit(btc['Close'][-500:],first_fit=True)[-100:]","e927804f":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\n\ncandlestick.add_trace(go.Scatter(x=data.index, y=res.values,mode='lines',line=dict(color='royalblue', width=5),name='Typical Value'))\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1500,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()","20c023c0":"from NitroFE import KaufmanEfficiency\nob = KaufmanEfficiency(lookback_period=12)\nres = ob.fit(btc['Close'][-500:], first_fit=True)[-100:]","17a22d83":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\nfeaturefig=go.Figure(data = go.Scatter(x=data.index, y=res.values,mode='lines',line=dict(color='yellow', width=5)))\nfeaturefig.update_layout(title = {'text': 'Kaufman Efficiency','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","88c072e1":"from NitroFE import AverageDirectionalMovementIndex\nob = AverageDirectionalMovementIndex(\n    directional_movement_lookback_period=8,\n    directional_movement_smoothing_period=8,\n    average_directional_movement_smoothing_period=8,\n    directional_movement_smoothing_min_periods=0,\n    true_range_lookback=8,\n    average_true_range_span=8,\n    average_directional_movement_min_periods=None)\nres = ob.fit(btc['Close'][-500:], first_fit=True)['Close'][-100:]","3eaf04f4":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\nfeaturefig=go.Figure(data = go.Bar(x=data.index, y=res.values,\n                             marker_color=pd.Series(res.values).rolling(2,min_periods=2).agg(lambda x: 1 if x[-1:].values[0]>=x[-2:].values[0] else 0 ).\\\n                             fillna(1).replace(1,'green').replace(0,'red').values))\nfeaturefig.update_layout(title = {'text': 'Average Directional Movement Index','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","cf578709":"from NitroFE import HullMovingFeature\nob = HullMovingFeature(window=20,operation=np.sum)\nres = ob.fit(btc['Close'][-500:], first_fit=True)[-100:]\n\nfrom NitroFE import KaufmanAdaptiveMovingAverage\nob = KaufmanAdaptiveMovingAverage(kaufman_efficiency_lookback_period=8,kaufman_efficiency_min_periods=0)\nres2 = ob.fit(btc['Close'][-500:], first_fit=True)['Close'][-100:]","223fe6e6":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\n\ncandlestick.add_trace(go.Scatter(x=data.index, y=res.values,mode='lines',line=dict(color='royalblue', width=5),name='Hull Moving Average'))\ncandlestick.add_trace(go.Scatter(x=data.index, y=res2.values,mode='lines',line=dict(color='yellow', width=5),name='Kaufman Adaptive Moving Average'))\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1500,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()","e4625dae":"from NitroFE import RelativeStrengthIndex\nob = RelativeStrengthIndex(lookback_period=8)\nres = ob.fit(btc['Close'][-500:], first_fit=True)['Close'][-100:]","12958f7f":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\n#featurefig=go.Figure(data = go.Scatter(x=data.index, y=res.values,mode='lines'))\n#fig.add_trace(go.Scatter(x=data.index,y=[50]*len(data.index),mode='lines'))\n\nfeaturefig=go.Figure(go.Scatter(x=data.index,y=[50]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values>=50,res.values, 50),mode='lines', fill='tonexty', line_color='green'))\nfeaturefig.add_trace(go.Scatter(x=data.index,y=[50]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values<50,res.values,50),mode='lines',fill='tonexty',line_color='red'))\n\nfeaturefig.update_layout(title = {'text': 'Relative Strength Index','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","09156682":"from NitroFE import InverseFisherRelativeStrengthIndex\nob = InverseFisherRelativeStrengthIndex(lookback_period=8,lookback_for_inverse_fisher=8)\nres = ob.fit(btc['Close'][-500:], first_fit=True)['Close'][-100:]","66a8ef79":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\n#featurefig=go.Figure(data = go.Scatter(x=data.index, y=res.values,line=dict(color='yellow', width=5)))\n\nfeaturefig=go.Figure(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values>=0,res.values, 0),mode='lines', fill='tonexty', line_color='green'))\nfeaturefig.add_trace(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values<0,res.values,0),mode='lines',fill='tonexty',line_color='red'))\n\nfeaturefig.update_layout(title = {'text': 'Inverse Fisher Relative Strength Index','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","e44e1144":"from NitroFE import AroonOscillator\nob = AroonOscillator(lookback_period=8)\nres = ob.fit(btc['Close'][-500:], first_fit=True)[-100:]","864694a4":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\n#featurefig=go.Figure(data = go.Scatter(x=data.index, y=res.values,line=dict(color='yellow', width=5)))\n\nfeaturefig=go.Figure(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values>=0,res.values, 0),mode='lines', fill='tonexty', line_color='green'))\nfeaturefig.add_trace(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values<0,res.values,0),mode='lines',fill='tonexty',line_color='red'))\n\n\nfeaturefig.update_layout(title = {'text': 'Aroon Oscillator','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","95cdbf73":"from NitroFE import TripleExponentialMovingAverageOscillator\nob = TripleExponentialMovingAverageOscillator(span=8)\nres = ob.fit(btc['Close'][-500:], first_fit=True)[-100:]","af5c774a":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\n#featurefig=go.Figure(data = go.Scatter(x=data.index, y=res.values,line=dict(color='yellow', width=5)))\n\nfeaturefig=go.Figure(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values>=0,res.values, 0),mode='lines', fill='tonexty', line_color='green'))\nfeaturefig.add_trace(go.Scatter(x=data.index,y=[0]*len(data.index),mode='lines'))\nfeaturefig.add_trace(go.Scatter(x=data.index, y=np.where(res.values<0,res.values,0),mode='lines',fill='tonexty',line_color='red'))\n\nfeaturefig.update_layout(title = {'text': 'Triple Exponential Moving Average Oscillator','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","bbbb867b":"from NitroFE import TypicalValue\nob = TypicalValue(lookback_period=32)\nres = ob.fit(btc['Close'][-500:],first_fit=True)\n\n\nfrom NitroFE import MovingAverageConvergenceDivergence\nob=MovingAverageConvergenceDivergence(fast_period=26, slow_period=12, smoothing_period=9)\nres=ob.fit(res,first_fit=True)[-100:]","bc745284":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\nfeaturefig=go.Figure(data = go.Bar(x=data.index, y=res.values,\n                             marker_color=pd.Series(res.values).rolling(2,min_periods=2).agg(lambda x: 1 if x[-1:].values[0]>=x[-2:].values[0] else 0 ).\\\n                             fillna(1).replace(1,'#1f77b4').replace(0,'#9467bd').values))\nfeaturefig.update_layout(title = {'text': 'Typical Value Moving Average Convergence Divergence Chart','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","ec2ebedf":"from NitroFE import TypicalValue\nob = TypicalValue(lookback_period=32)\nres = ob.fit(btc['Close'][-500:],first_fit=True)\n\nfrom NitroFE import SeriesWeightedMovingFeature\nob = SeriesWeightedMovingFeature(lookback_period=8, operation= np.mean)\nres = ob.fit(res,btc['Volume'][-500:],first_fit=True)['Close'][-100:]\n\nfrom NitroFE import ExponentialMovingFeature\nob = ExponentialMovingFeature(span=8)\nres2 = ob.fit(btc['Close'][-500:], first_fit=True)[-100:]","7e31ede7":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\n\ncandlestick.add_trace(go.Scatter(x=data.index, y=res.values,mode='lines',line=dict(color='#1f77b4', width=5),name='Typical Value Volume Weighted Moving Average'))\ncandlestick.add_trace(go.Scatter(x=data.index, y=res2.values,mode='lines',line=dict(color='#9467bd', width=5),name='Exponential Moving Feature'))\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1500,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()","cf98fb00":"from NitroFE import TypicalValue\nob = TypicalValue(lookback_period=32)\nres = ob.fit(btc['Volume'][-500:],first_fit=True)\n\n\nfrom NitroFE import MovingAverageConvergenceDivergence\nob=MovingAverageConvergenceDivergence(fast_period=26, slow_period=12, smoothing_period=9)\nres=ob.fit(res,first_fit=True)[-100:]","a31d0518":"data=btc[-100:]\ncandlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                           open = data[('Open')], \n                                           high = data[('High')], \n                                           low = data[('Low')], \n                                           close = data[('Close')])])\ncandlestick.update_xaxes(title_text = 'Time',\n                         rangeslider_visible = True)\n\ncandlestick.update_layout(title = {'text': 'BTC Candelstick Chart','y':0.90,'x':0.5} , template=\"plotly_white\",autosize=False,width=1200,height=500)\ncandlestick.update_yaxes(title_text = 'Price in USD')\ncandlestick.show()\n\nfeaturefig=go.Figure(data = go.Bar(x=data.index, y=res.values,\n                             marker_color=pd.Series(res.values).rolling(2,min_periods=2).agg(lambda x: 1 if x[-1:].values[0]>=x[-2:].values[0] else 0 ).\\\n                             fillna(1).replace(1,'#1f77b4').replace(0,'#9467bd').values))\nfeaturefig.update_layout(title = {'text': 'Volume Moving Average Convergence Divergence','y':0.90,'x':0.5},autosize=False,width=1200,height=500 ,template=\"plotly_white\")\nfeaturefig.update_yaxes(title_text = 'Feature Value')\nfeaturefig.show()","a533861c":"<span id=\"Relative-Strength-Index\"><h2><center>Relative Strength Index<\/center><\/h2><\/span>","635d6a41":"<span id=\"Preparing-data\"><h1><center>Preparing data<\/center><\/h1><\/span>","4889c27d":"## Update \n- [Volume-Moving-Average-Convergence-Divergence](#Volume-Moving-Average-Convergence-Divergence)\n- [Typical Value Moving Average Convergence Divergence](#Typical-Value-Moving-Average-Convergence-Divergence)    \n- [Typical Value Volume Weighted Moving Average](#Typical-Value-Volume-Weighted-Moving-Average)\n- [Typical Value](#Typical-Value)\n- [Percentage Value Oscillator](#Percentage-Value-Oscillator)\n- [Kaufman Efficiency](#Kaufman-Efficiency)\n","592ce2df":"$$ Typical \\ Value[t]= \\frac{ \\max{(dataframe[(t-lookback \\ period) \\to t])} +\\min{(dataframe[(t-lookback \\ period) \\to t])} + dataframe[t] }{3} $$","17b25048":"<hr >\n\n\n<span id=\"Installing-NitroFe\"><h1><center>Installing NitroFe<\/center><\/h1><\/span>","81ae9cfb":"\ud83d\udcda To read more about Zoofs you can visit the documentation page https:\/\/jaswinder9051998.github.io\/zoofs\/.\n\nYou can find examples for feature selection using all six available algorithms.\n\n\n\ud83c\udf1f Like this Project? Give us a star on GitHub","cf0a9c85":"<span id=\"Typical-Value-Moving-Average-Convergence-Divergence\"><h2><center>Typical Value Moving Average Convergence Divergence<\/center><\/h2><\/span>","cba6de0a":"<span id=\"Moving-Average-Convergence-Divergence\"><h2><center>Moving Average Convergence Divergence<\/center><\/h2><\/span>","0d9fb6c9":"$$ Fast \\ exponential \\ moving \\ feature \\ (FEMF) = Exponential \\ moving \\ feature \\ of \\ 'fast \\ period' \\ span $$\n\n$$ Slow \\ exponential \\ moving \\ feature \\ (SEMF) = Exponential \\ moving \\ feature \\ of \\ 'slow \\ period' \\ span $$\n\n$$ Raw \\ Percentage \\ Value \\ Oscillator = \\frac{SEMF - FEMF}{FEMF} $$\n\n$$ Percentage \\ Value \\ Oscillator = Exponential \\ moving \\ feature \\ of \\ 'smoothing \\ period' \\ span \\ over \\ 'Raw \\ Percentage \\ Value \\ Oscillator' $$","30283297":"<span id=\"Inverse-Fisher-Relative-Strength-Index\"><h2><center>Inverse Fisher Relative Strength Index<\/center><\/h2><\/span>","efc0c08c":"<h2><center>Do check out the feature selection library \"Zoofs\" as well !<\/center><\/h2>","aa20b821":"\ud83d\udcda To read more about NitroFe you can visit the documentation page https:\/\/github.com\/NITRO-AI\/NitroFE.\n\n\n\n\ud83c\udf1f Like this Project? Give us a star on GitHub\n<hr >","518eba83":"<span id=\"IMPORTS\"><h1><center>IMPORTS<\/center><\/h1><\/span>","faac3ead":"<span id=\"Moving-average-Features\"><h2><center>Moving average Features<\/center><\/h2><\/span>","40e60d1a":"<span id=\"Combination-Features\"><h1><center>Combination Features<\/center><\/h1><\/span>","e9374ada":"Here are a few examples of the complex features you can make with the combination of the basic set of features !","03316f3d":"$$ Current \\ value[t] = dataframe[t] $$\n<br>\n$$ ER[t] = Kaufman \\ Efficiency \\ Ratio[t] $$\n<br>\n$$ fast \\ ema \\ alpha = \\frac{2}{1+fast \\ ema \\ span} $$\n<br>\n$$ slow \\ ema \\ alpha = \\frac{2}{1+slow \\ ema \\ span} $$\n<br>\n$$ Smoothing \\ Constant[t] = (ER[t] * (fast \\ ema \\ alpha - slow \\ ema \\ alpha ) + slow \\ ema \\ alpha)^{2} $$\n<br>\n$$ KAMA[t]= KAMA[t-1] + Smoothing \\ Constant[t] * ( Current \\ value[t] - KAMA[t-1] ) $$","3e79ac2f":"$$ Triple \\ Exponential \\ Moving \\ Average \\ Oscillator[t] = \\frac{Triple \\ Exponential \\ Moving \\ Average[t]-Triple \\ Exponential \\ Moving \\ Average[t-1]}{Triple \\ Exponential \\ Moving \\ Average[t-1]} $$","3580200e":"$$ Difference \\ value[t] (DFV) = dataframe[t] - dataframe[t-1] $$\n<br>\n$$ Upwards \\ movement[t] (UM) = DFV[t] \\ if \\ DFV[t]>0 \\ else \\ 0 $$\n<br>\n$$ Downward \\ movement[t] (DM) = |DFV[t]| \\ if \\ DFV[t]<0 \\ else \\ 0 $$\n<br>\n$$ RS = \\frac{Smoothed \\ moving \\ average \\ of \\ UM \\ over \\ 'lookback \\ period' \\ period }{Smoothed \\ moving \\ average \\ of \\ DM \\ over \\ 'lookback \\ period' \\ period} $$\n<br>\n$$ RSI = 100 -\\frac{100}{1+RS} $$","e7d8b449":"$$ RSI = Relative \\ Strength \\ Index $$\n<br>\n$$ ranged \\ RSI = 0.1 * (RSI - 50) $$\n<br>\n$$ wRSI = weighted \\ moving \\ average \\ of ranged \\ RSI \\ of \\ size \\ 'lookback \\ for \\ inverse \\ fisher' $$\n<br>\n$$ IFRSI = \\frac{\\exp(2wRSI)-1}{\\exp(2wRSI)+1} $$","219a4186":"$$ Kaufman \\ Efficiency[t]= \\frac{|dataframe[t]-dataframe[t-lookback \\ period]|}{\\sum_{i=t-lookback \\ period+1}^{t}|dataframe[i]-dataframe[i-1]|} $$","5e04a73d":"<span id=\"Volume-Moving-Average-Convergence-Divergence\"><h2><center>Volume Moving Average Convergence Divergence<\/center><\/h2><\/span>","49dc69c3":"<span id=\"Typical-Value\"><h2><center>Typical Value<\/center><\/h2><\/span>","6df1472e":"<span id=\"Aroon-Oscillator\"><h2><center>Aroon Oscillator<\/center><\/h2><\/span>","7472b480":"<span id=\"Kaufman-Efficiency\"><h2><center>Kaufman Efficiency<\/center><\/h2><\/span>","a5a65115":"<span id=\"Typical-Value-Volume-Weighted-Moving-Average\"><h2><center>Typical Value Volume Weighted Moving Average<\/center><\/h2><\/span>","fa338a20":"<hr >\n\n\n<span id=\"Creating-Features\"><h1><center>Creating Features<\/center><\/h1><\/span>","8ccbf002":"<span id=\"Percentage-Value-Oscillator\"><h2><center>Percentage Value Oscillator<\/center><\/h2><\/span>","37f71ec1":"<span id=\"Triple-Exponential-Moving-Average-Oscillator\"><h2><center>Triple Exponential Moving Average Oscillator<\/center><\/h2><\/span>","d4166886":"<hr >\n\n# <span class=\"title-section w3-xxlarge\" id=\"outline\">Table Of Content \ud83d\udcd1<\/span>\n\n\n1. [IMPORTS](#IMPORTS) \n\n2. [Installing NitroFe](#Installing-NitroFe) \n\n3. [Creating Features](#Creating-Features)\n    \n    3.1 [Series Weighted Moving Feature](#Series-Weighted-Moving-Feature)\n    \n    3.2 [Percentage Value Oscillator](#Percentage-Value-Oscillator)\n\n    3.3 [Moving Average Convergence Divergence](#Moving-Average-Convergence-Divergence)\n    \n    3.4 [Typical Value](#Typical-Value)\n    \n    3.5 [Kaufman Efficiency](#Kaufman-Efficiency)\n    \n    3.6 [Average Directional Movement Index](#Average-Directional-Movement-Index)\n    \n    3.7 [Moving average Features](#Moving-average-Features)\n    \n    3.8 [Relative Strength Index](#Relative-Strength-Index)\n    \n    3.9 [Inverse Fisher Relative Strength Index](#Inverse-Fisher-Relative-Strength-Index)\n    \n    3.10 [Aroon Oscillator](#Aroon-Oscillator)\n    \n    3.11 [Triple Exponential Moving Average Oscillator](#Triple-Exponential-Moving-Average-Oscillator)\n    \n4. [Combination Features](#Combination-Features)\n\n    4.1 [Typical Value Moving Average Convergence Divergence](#Typical-Value-Moving-Average-Convergence-Divergence)\n    \n    4.2 [Typical Value Volume Weighted Moving Average](#Typical-Value-Volume-Weighted-Moving-Average)\n    \n    4.3 [Volume-Moving-Average-Convergence-Divergence](#Volume-Moving-Average-Convergence-Divergence)\n\n\n<hr >","3b3a95f1":"<h4>Created by Jaswinder Singh<\/h4>\n<h1><center>\ud83d\udcb8G-Research\ud83d\udcb8 Indicators \ud83d\udd27plug and play\ud83d\udd27 features !<\/center><\/h1>\n","53a3a5d3":"$$ \\operatorname{WMA_(\\frac{window}{2})} = Weighted \\ Moving \\ Average \\ of \\ length \\ \\frac{window}{2} \\ over \\ dataframe $$\n\n$$ \\operatorname{WMA_(window)} = Weighted \\ Moving \\ Average \\ of \\ length \\ window \\ over \\ dataframe $$\n\n$$ \\operatorname{Raw \\ Hull \\ Moving \\ Average} = 2*\\operatorname{WMA_(\\frac{window}{2})} - \\operatorname{WMA_(window)} $$\n\n$$ \\operatorname{Hull \\ Moving \\ Average} = Weighted \\ Moving \\ Average \\ of \\ length \\ \\sqrt(window) over \\operatorname{Raw \\ Hull \\ Moving \\ Average} $$","28d7d78a":"$$ Series \\ Weighted \\ Moving \\ Feature[t] = \\frac{\\operatorname{operation} (dataframe[(t-'lookback \\ period') \\to t] * dataframe \\ for \\ weight[(t-'lookback \\ period') \\to t])}{\\operatorname{operation} (dataframe \\ for \\ weight[(t-'lookback \\ period') \\to t])} $$","629822bb":"<span id=\"Average-Directional-Movement-Index\"><h2><center>Average Directional Movement Index<\/center><\/h2><\/span>","21fb8444":"$$ Aroon \\ Up[t] = \\frac{'lookback \\ period'- Period \\ since \\ 'lookback \\ period' \\ High }{'lookback \\ period'} $$\n<br>\n$$ Aroon \\ Down[t] = \\frac{'lookback \\ period'- Period \\ since \\ 'lookback \\ period' \\ Low }{'lookback \\ period'} $$\n<br>\n$$ Aroon \\ Oscillator[t] = Aroon \\ Up[t] - Aroon \\ Down[t] $$","a25f216d":" ## Philosophy\n The goal here is to provide you basic-elements\/lego pieces, such that you can stack them to create your own features ! \n \n \n You can create a volume weighted moving average out of typical value  or create MACD out of a hull moving average, so on and so forth !","861b88cb":"<h4>Kaufman Adaptive Moving Average<\/h4>","a3fff784":"$$ Moving \\ average \\ convergence \\ divergence \\ (MACD) = Exponential \\ moving \\ average \\ of \\ (Absolute \\ Price \\ Oscillator) $$\n\n<br>\n\n$$ Moving average \\ convergence \\ divergence \\ histogram = (Absolute \\ Price \\ Oscillator)- (Exponential \\ moving \\ average \\ of \\ (Absolute \\ Price)) $$","8c991dab":"<span id=\"Series-Weighted-Moving-Feature\"><h2><center>Series Weighted Moving Feature<\/center><\/h2><\/span>","8a984fef":"<h4>Hull moving average<\/h4>","20085c58":"$$ Raw \\ Positive \\ Directional \\ Movement[t] = \\max{(dataframe[(t-directional \\ movement \\ lookback \\ period ) \\to t])} - \\max{(dataframe[(t-2*directional\\ movement \\ lookback \\ period) \\to (t-directional \\ movement \\ lookback \\ period)])} $$\n\n<br>\n\n$$ Raw \\ Negative \\ Directional \\ Movement[t] = \\min{(dataframe[(t-2*directional \\ movement \\ lookback \\ period) \\to (t-directional \\ movement \\ lookback \\ period)])} - \\min{(dataframe[(t-directional \\ movement \\ lookback \\ period) \\to t)} $$\n\n<br>\n\n$$ Positive \\ Directional \\ Movement[t] \\ (+DM) = if (Raw \\ Positive \\ Directional_Movement[t] > Raw \\ Negative \\ Directional \\ Movement[t]) \\ and \\ (Raw \\ Positive \\ Directional \\ Movement[t] >0), then \\ Raw \\ Positive \\ Directional \\ Movement[t] \\ else \\ 0 $$\n\n<br>\n\n$$ Negative \\ Directional \\ Movement[t] \\ (-DM) = if (Raw \\ Negative \\ Directional \\ Movement[t] > Raw \\ Positive \\ Directional \\ Movement[t]) \\ and \\ (Raw \\ Negative \\ Directional \\ Movement[t] >0), then \\ Raw \\ Negative \\ Directional \\ Movement[t] \\ else \\ 0 $$\n\n<br>\n\n$$ Positive \\ Directional \\ Index \\ (+DI) = 100*\\frac{Smoothed \\ moving \\ average \\ of \\ Positive \\ Directional \\ Movement \\ with \\ length \\ 'directional \\ movement \\ smoothing \\ period' }{Average \\ True \\ Range \\ of \\ dataframe} $$\n\n<br>\n\n$$ Negative_Directional_Index \\ (-DI) = 100*\\frac{Smoothed \\ moving \\ average \\ of \\ Negative\\ Directional \\ Movement \\ with \\ length \\ 'directional \\ movement \\ smoothing \\ period' }{Average \\ True \\ Range \\ of \\ dataframe} $$\n\n<br>\n\n$$ average \\ directional \\ index \\ (ADX) = Smoothed \\ moving \\ average \\ of \\ 100*\\frac{+DI - -DI}{+DI + -DI} \\ with \\ length \\ 'average \\ directional \\ movement \\ smoothing \\ period' $$"}}