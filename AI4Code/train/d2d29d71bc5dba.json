{"cell_type":{"610f5559":"code","a465c37f":"code","aa3f29af":"code","53707a71":"code","7f1fa7fe":"code","cb13c323":"code","962d26b5":"code","6c4567e2":"code","0d033c7e":"code","15019b0e":"code","a3fe8458":"code","35e56272":"code","950057d2":"code","996f4edc":"code","3f03537a":"code","6c2e760c":"code","07392cf3":"code","60b702ab":"code","9bc32615":"code","272321d2":"code","0b7ac4e3":"code","cb1f4d3e":"code","6d6c04dc":"code","907243bc":"code","a646fcab":"code","4ad9cdfc":"code","a8fd7c21":"code","7b127e15":"code","256aceaf":"code","4343b482":"code","9dc651b1":"code","df6c701b":"code","300acb4d":"code","bf8605b4":"code","c509374b":"code","041aa1aa":"code","f11cbaec":"code","3927aaef":"code","f2daa704":"code","cef7d347":"code","423b01f5":"code","6afbb125":"code","71413cb9":"code","e1929ed7":"code","2a1bce51":"code","7d740fdd":"code","c20486c0":"code","191a6571":"code","f568e04b":"code","df02c120":"code","52328541":"code","df72f9a9":"code","deee7cc6":"code","0089ace5":"code","d87a3d8b":"code","fb253161":"code","ac12c112":"code","0db06b8b":"code","6725b1a0":"code","51d6bff9":"code","2a4a7738":"code","ec00d055":"code","b80c4865":"code","fc17a0d9":"code","d29be987":"code","8b65b843":"code","b22487a9":"code","2d925b07":"code","aa09ceb2":"code","9a842a62":"code","112b21ea":"code","fc6a4883":"code","8431c2a3":"code","1665c0a4":"code","9a3dd74d":"code","b45952f9":"code","a5e1fa70":"code","14650d26":"code","cd900910":"code","6fa042b9":"markdown","310aa9e8":"markdown","4a86d182":"markdown","fc2be60a":"markdown","8ca5d2a2":"markdown","4a0d15ea":"markdown","3f548e00":"markdown","4c20bf49":"markdown","ca1cf303":"markdown","d06756b1":"markdown"},"source":{"610f5559":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\ndf=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/train.csv\")\ndf1=pd.read_csv(r\"..\/input\/analytics-vidhya-loan-prediction\/test.csv\")","a465c37f":"train_original=df.copy()\ntest_original=df1.copy()","aa3f29af":"df.head(10)","53707a71":"#COUNT THE NUMBER OF ROWS AND COLUMNS IN THE DATA SET.","7f1fa7fe":"df.shape","cb13c323":"df1.shape","962d26b5":"#GET SOME STATISTICS","6c4567e2":"df.describe()","0d033c7e":"df.info()","15019b0e":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","a3fe8458":"#VIEWING THE TEST DATASET\n\n\ndf1.head()","35e56272":"df1.info()","950057d2":"df1.isnull().sum()","996f4edc":"data=[df,df1]\nfor dataset in data:\n    #FILTER CATEGORICAL VARIABLES\n    categorical_columns=[x for x in dataset.dtypes.index if dataset.dtypes[x]=='object']\n    #EXCLUDE ID COLS AND SOURCE:\n    categorical_columns =[x for x in categorical_columns if x not in['Loan_ID']]\n    \n    \n    #PRINT FREQUENCY OF CATEGORIES\nfor col in categorical_columns:\n    print('\\nFrequency of categories for variable %s'%col)\n    print(df[col].value_counts())\n    \n    ","3f03537a":"#GENDER\n\nsns.countplot(df['Gender'])","6c2e760c":"pd.crosstab(df.Gender, df.Loan_Status, margins=True)","07392cf3":"#DEPENDENDANTS\n\nplt.figure(figsize=(6,6))\nlabels=['0','1','2','3+']\nexplode=(0.05,0,0,0)\nsize=[345,102,101,51]\nplt.pie(size,explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nplt.axis('equal')\nplt.show()","60b702ab":"#GET THE COUNT OF THE NUMBER OF DEPENDENTS\n\ndf.Dependents.value_counts()","9bc32615":"pd.crosstab(df.Dependents,df.Loan_Status,margins=True)","272321d2":"#CREDIT HISTORY\n\nsns.countplot(df['Credit_History'])","0b7ac4e3":"pd.crosstab(df.Credit_History,df.Loan_Status, margins=True)","cb1f4d3e":"#SELF EMPLOYED\n\nsns.countplot(df['Self_Employed'])","6d6c04dc":"pd.crosstab(df.Self_Employed, df.Loan_Status, margins=True)","907243bc":"#MARRIED\n\nsns.countplot(df.Married)","a646fcab":"pd.crosstab(df.Married, df.Loan_Status, margins=True)","4ad9cdfc":"#LOAN AMOUNT \n\nsns.displot(df['LoanAmount'])","a8fd7c21":"#EDUCATION\n\nsns.countplot(df.Education)","7b127e15":"#PROPERTY AREA\n\n\nsns.countplot(df.Property_Area)","256aceaf":"# APPLICANT INCOME\n\ndf['ApplicantIncome'].hist(bins=50)","4343b482":"df.boxplot(column='ApplicantIncome')","9dc651b1":"# APPLICANT INCOME AND EDUCATION\n\ndf.boxplot(column='ApplicantIncome',by='Education')\n","df6c701b":"temp1=df['Credit_History'].value_counts(ascending=True)\ntemp2=df.pivot_table(values='Loan_Status',index=['Credit_History'],aggfunc= lambda x: x.map({'Y':1,'N':0}).mean())\nprint('Frequency Table for Credit History:')\nprint(temp1)\nprint('\\n probability of getting loan for each credit history class:')\nprint(temp2)","300acb4d":"import matplotlib.pyplot as plt\nfig=plt.figure(figsize=(8,4))\nax1=fig.add_subplot(121)\nax1.set_xlabel('Credit_History')\nax1.set_ylabel('Count of applicants')\nax1.set_title(\"Applicants by credit_History\")\ntemp1.plot(kind='bar')\nax2=fig.add_subplot(122)\ntemp2.plot(kind='bar')\nax2.set_xlabel('Credit_History')\nax2.set_ylabel('Probability of getting loan')\nax2.set_title(\"Probability of getting loan by credit history\")","bf8605b4":"temp3=pd.crosstab(df['Credit_History'],df['Loan_Status'])\ntemp3.plot(kind='bar',stacked=True, color=['red','blue'],grid=False)","c509374b":"df.apply(lambda x: sum(x.isnull()),axis=0)","041aa1aa":"df['LoanAmount'].fillna(df['LoanAmount'].mean(),inplace=True)","f11cbaec":"df[\"Self_Employed\"].value_counts()","3927aaef":"# HEATMAP REPRESENTATION OF THE CORRELATION\n\nmatrix=df.corr()\nf,ax=plt.subplots(figsize=(9,6))\nsns.heatmap(matrix,vmax=.8,square=True,cmap=\"BuPu\")","f2daa704":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf.isnull().sum()","cef7d347":"df.head()","423b01f5":"#CONVERTING STRING VALUES(CATEGORICAL VALUES) TO INTEGER\n\ndf.Gender=df.Gender.map({\"Female\":0,\"Male\":1})\ndf.Married=df.Married.map({\"No\":0,\"Yes\":1})\ndf.Self_Employed=df.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf.Education=df.Education.map({\"Not\":1,\"Graduate\":0})\ndf.Property_Area=df.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf.Loan_Status=df.Loan_Status.map({\"N\":0,\"Y\":1})\ndf.Dependents=df.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","6afbb125":"df.head()","71413cb9":"#CONVERTING STRING VALUES(CATEGORICAL VALUES)TO INTEGER\n\ndf1.Gender=df1.Gender.map({\"Female\":0,\"Male\":1})\ndf1.Married=df1.Married.map({\"No\":0,\"Yes\":1})\ndf1.Self_Employed=df1.Self_Employed.map({\"No\":0,\"Yes\":1})\ndf1.Education=df1.Education.map({\"Not\":1,\"Graduate\":0})\ndf1.Property_Area=df1.Property_Area.map({\"Urban\":0,\"Rural\":1})\ndf1.Dependents=df1.Dependents.map({\"3+\":3,\"0\":0,\"1\":1,\"2\":2})\n\n","e1929ed7":"df1.head()","2a1bce51":"df[\"Gender\"].fillna(df[\"Gender\"].mode()[0],inplace=True)\ndf[\"Married\"].fillna(df[\"Married\"].mode()[0],inplace=True)\ndf[\"Dependents\"].fillna(df[\"Dependents\"].mode()[0],inplace=True)\ndf[\"Self_Employed\"].fillna(df[\"Self_Employed\"].mode()[0],inplace=True)\ndf[\"Credit_History\"].fillna(df[\"Credit_History\"].mode()[0],inplace=True)\ndf[\"Education\"].fillna(df[\"Education\"].mode()[0],inplace=True)\ndf[\"Property_Area\"].fillna(df[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","7d740fdd":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\n\ndf[\"Loan_Amount_Term\"].value_counts()","c20486c0":"df[\"Loan_Amount_Term\"].fillna(df[\"Loan_Amount_Term\"].mode()[0],inplace=True)","191a6571":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf[\"LoanAmount\"].fillna(df[\"LoanAmount\"].median(),inplace=True)","f568e04b":"df.isnull().sum()","df02c120":"#COUNT THE EMPTY VALUES IN EACH COLUMNS\n\ndf1.isnull().sum()","52328541":"df1[\"Gender\"].fillna(df1[\"Gender\"].mode()[0],inplace=True)\ndf1[\"Married\"].fillna(df1[\"Married\"].mode()[0],inplace=True)\ndf1[\"Dependents\"].fillna(df1[\"Dependents\"].mode()[0],inplace=True)\ndf1[\"Self_Employed\"].fillna(df1[\"Self_Employed\"].mode()[0],inplace=True)\ndf1[\"Credit_History\"].fillna(df1[\"Credit_History\"].mode()[0],inplace=True)\ndf1[\"Education\"].fillna(df1[\"Education\"].mode()[0],inplace=True)\ndf1[\"Property_Area\"].fillna(df1[\"Property_Area\"].mode()[0],inplace=True)\n\n\n","df72f9a9":"#FIND THE MISSING VALUES IN LOAN AMOUNT TERM TO FILL\ndf1[\"Loan_Amount_Term\"].value_counts()","deee7cc6":"df1[\"Loan_Amount_Term\"].fillna(df1[\"Loan_Amount_Term\"].mode()[0],inplace=True)","0089ace5":"#FILLING THE NULL VALUES USING THE MEDIAN IN LOANAMOUNT\ndf1[\"LoanAmount\"].fillna(df1[\"LoanAmount\"].median(),inplace=True)","d87a3d8b":"\n\ndf1.isnull().sum()","fb253161":"df['Total_Income']=df[\"ApplicantIncome\"]+df['CoapplicantIncome']\ndf1['Total_Income']=df1[\"ApplicantIncome\"]+df1['CoapplicantIncome']","ac12c112":"sns.displot(df[\"Total_Income\"])","0db06b8b":"df['Total_Income_log']=np.log(df[\"Total_Income\"])\ndf1['Total_Income_log']=np.log(df1[\"Total_Income\"])","6725b1a0":"sns.displot(df1[\"Total_Income_log\"])","51d6bff9":"df['EMI']=df[\"LoanAmount\"]\/df['Loan_Amount_Term']\ndf1['EMI']=df1[\"LoanAmount\"]\/df1['Loan_Amount_Term']","2a4a7738":"sns.displot(df[\"EMI\"])","ec00d055":"sns.displot(df[\"EMI\"])","b80c4865":"#MULTIPLYING BY 1000 TO MAKE THE UITS EQUAL\n\ndf['Balance Income']=df[\"Total_Income\"]-(df['EMI']*1000)\ndf1['Balance Income']=df1[\"Total_Income\"]-(df1['EMI']*1000)","fc17a0d9":"sns.displot(df[\"Balance Income\"])","d29be987":"sns.displot(df[\"Balance Income\"])","8b65b843":"df=df.drop([\"Loan_ID\",\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\ndf","b22487a9":"#LOOK AT THE DATA TYPES\n\ndf.dtypes","2d925b07":"df1=df1.drop([\"ApplicantIncome\",\"CoapplicantIncome\",\"LoanAmount\",\"Loan_Amount_Term\"],axis=1)\n","aa09ceb2":"df1=df1.drop(\"Loan_ID\",axis=1)\ndf1","9a842a62":"#LOOK AT THE DATA TYPES\ndf1.dtypes","112b21ea":"#LETS PREPARE THE DATA FOR FEEDING IN TO THE MODELS\n#SAVE THE TARGET VARIABLE IN SEPARATE\n\nx=df.drop(\"Loan_Status\",1)\ny=df.Loan_Status","fc6a4883":"x=pd.get_dummies(x)\ndf=pd.get_dummies(df)","8431c2a3":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=102)","1665c0a4":"#USE KNEIGHBOR CLASSIFIER\n\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train,y_train)\npred_knn=knn.predict(x_test)\nacc_knn=accuracy_score(y_test,pred_knn)*100\nacc_knn\n","9a3dd74d":"pred_test=knn.predict(df1)","b45952f9":"loancsv=pd.DataFrame({\"Loan_ID\":test_original[\"Loan_ID\"],\"Loan_Status\":pred_test})","a5e1fa70":"loancsv","14650d26":"loancsv[\"Loan_Status\"].replace(0,\"N\",inplace=True)\nloancsv[\"Loan_Status\"].replace(1,\"Y\",inplace=True)","cd900910":"loancsv","6fa042b9":"# REPLACING THE CATEGORICAL VALUES","310aa9e8":"# DROPPING THE VARIABLES","4a86d182":"# FILLING MISSING VALUES IN TEST DATA","fc2be60a":"# FILLING MISSING VALUES\n","8ca5d2a2":"# CORRELATION BETWEEN ALL THE NUMERICAL VARIABLES\n","4a0d15ea":"# EXPLORING AND PREPARING THE DATA","3f548e00":"# FEATURE ENGINEERING","4c20bf49":"# READING THE DATA","ca1cf303":"# IMPORTING PACKAGES","d06756b1":"# K NEIGHBORS CLASSIFIER"}}