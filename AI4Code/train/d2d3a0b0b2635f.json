{"cell_type":{"6ae9b32a":"code","80320c21":"code","a89228e4":"code","0effb0e7":"code","97a5639c":"code","41cbe115":"code","0d510b9c":"code","9b3e80bb":"code","b68953ee":"code","4d1f955d":"code","fc1c4ae8":"code","35842293":"code","c14bccdb":"code","2820d14e":"code","6390b747":"code","8a3d9809":"code","50705a8d":"code","f231a1d3":"code","d43da55d":"markdown","a95496d8":"markdown","1a90b063":"markdown"},"source":{"6ae9b32a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport math\nfrom textwrap import wrap\nwarnings.filterwarnings('ignore')\nsns.set_palette('Set2')\nsns.set_style('darkgrid')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80320c21":"df = pd.read_csv('..\/input\/emoji-data-descriptions-codepoints\/emoji_df.csv', encoding='utf8')\ndf.head()","a89228e4":"#Code by Mohammad Imran Shaikh https:\/\/www.kaggle.com\/shikhnu\/covid19-tweets-eda-visualization-wordcloud\n\nunique_df = pd.DataFrame()\nunique_df['Features'] = df.columns\nunique=[]\nfor i in df.columns:\n    unique.append(df[i].nunique())\nunique_df['Uniques'] = unique\n\nf, ax = plt.subplots(1,1, figsize=(15,7))\n\nsplot = sns.barplot(x=unique_df['Features'], y=unique_df['Uniques'], alpha=0.8)\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center',\n                   va = 'center', xytext = (0, 9), textcoords = 'offset points')\nplt.title('Bar plot for number of unique values in each column',weight='bold', size=15)\nplt.ylabel('#Unique values', size=12, weight='bold')\nplt.xlabel('Features', size=12, weight='bold')\nplt.xticks(rotation=90)\nplt.show()","0effb0e7":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.group)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set1', background_color=\"purple\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","97a5639c":"sum=df['name'].str.len()\nprint(sum)","41cbe115":"# let's check the length of name, the average length is 20 characters.\ndf['name length'] = df['name'].apply(len)\ndf['name length'].describe()","0d510b9c":"sns.boxplot(x='group', y=df['name length'], data=df)","9b3e80bb":"sum=df['emoji'].str.len()\nprint(sum)","b68953ee":"# let's check the length of emojis, the average length is 20 characters.\ndf['emoji length'] = df['emoji'].apply(len)\ndf['emoji length'].describe()","4d1f955d":"sns.boxplot(x='group', y=df['emoji length'], data=df)","fc1c4ae8":"#pd.set_option('display.max_colwidth', -1)\n#df_NA = pd.DataFrame(data=[df.isna().sum().tolist(), [\"{:.2f}\".format(i)+'%' for i in (df.isna().sum()\/df.shape[0]*100).tolist()]], \n           # columns=df.columns, index=['NA_Count', 'NA_Percent']).transpose()\n#df_NA[df_NA['NA_Count']>0].transpose()","35842293":"s = (df.isna().sum()\/df.shape[0]*100)<50\ndf_modified = df[s.index[s].tolist()]\nprint (df_modified.shape)\ndf_modified.head()","c14bccdb":"plt.rcParams['font.size'] = 14\nfig, ax = plt.subplots(3, 2, figsize=(20,20))\nfor col, ax in zip(['emoji','name','group','sub_group','codepoints'], ax.flat):\n    dict_ = df_modified[col].value_counts().head(10).to_dict()\n    if ('Not Available' in dict_.keys()):\n        dict_.pop('Not Available')\n    labels = []\n    for i in dict_.keys():\n        i = i.split(' ')\n        if (len(i) > 6):\n            i[math.ceil(len(i)\/2)-1] += '\\n'\n            labels.append(' '.join(i))\n        else:\n            labels.append(' '.join(i))\n    ax.pie(x=list(dict_.values()), labels=labels, shadow=True, startangle=0)\n    \n    col = (' '.join(col.split('_'))).upper()\n    ax.set_title(col, weight='bold', fontsize=18)\nplt.tight_layout()\nplt.show()","2820d14e":"#Code by Savita Nair https:\/\/www.kaggle.com\/savitanair\/hr-analytics\n\nprint(f'Dataset has {len(df.group.unique())} unique groups')\nprint('*'*20)\nprint(f'And the top 10 counts are :')\nprint(df.group.value_counts().head(10))\nprint('*'*20)\n\nc = df.group.value_counts().head(10)\nfig, ax = plt.subplots(1,1,figsize=(12,6))\nax.bar(c.index, c.values, width=0.8, color='y')\nplt.xticks(rotation=45)","6390b747":"#Code by Savita Nair https:\/\/www.kaggle.com\/savitanair\/hr-analytics\n\nprint(f'Dataset has {len(df.emoji.unique())} unique emojis')\nprint('*'*20)\nprint(f'And the top 10 counts are :')\nprint(df.emoji.value_counts().head(10))\nprint('*'*20)\n\nc = df.emoji.value_counts().head(10)\nfig, ax = plt.subplots(1,1,figsize=(12,6))\nax.bar(c.index, c.values, width=0.8, color='r')","8a3d9809":"#Code by Savita Nair https:\/\/www.kaggle.com\/savitanair\/hr-analytics\n\nprint(f'Dataset has {len(df.name.unique())} unique names')\nprint('*'*20)\nprint(f'And the top 10 counts are :')\nprint(df.name.value_counts().head(10))\nprint('*'*20)\n\nc = df.name.value_counts().head(10)\nfig, ax = plt.subplots(1,1,figsize=(12,6))\nax.bar(c.index, c.values, width=0.8, color='b')\nplt.xticks(rotation=45)","50705a8d":"colunas = ['emoji', 'name', 'group', 'sub_group', 'codepoints']\nfor i in colunas:\n  fig, ax = plt.subplots(1,1, figsize=(15, 6))\n  sns.countplot(y = df[i][1:],data=df.iloc[1:], order=df[i][1:].head(10).value_counts().index, palette='Blues_r')\n  fig.text(0.1, 0.95, f'{df[i][0].split(\"(\")[0]}', fontsize=16, fontweight='bold', fontfamily='serif')\n  plt.xlabel(' ', fontsize=20)\n  plt.ylabel('')\n  plt.yticks(fontsize=13)\n  plt.box(False)","f231a1d3":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Be patient. Mar\u00edlia Prata, @mpwolke was Here Looping.' )","d43da55d":"#Codes by YiYuan https:\/\/www.kaggle.com\/latong\/food-review-text-summarization\/notebook","a95496d8":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTOuC-bvw2CEvxTV76VThnoWV_EZmsHvn36ig&usqp=CAU)twinkl.com.br","1a90b063":"EMOJI\n\nEmoji  are ideograms and smileys used in electronic messages and web pages. Some examples of emoji are \ud83d\ude03, \ud83e\uddd8\ud83c\udffb\u200d\u2642\ufe0f, \ud83c\udf0d, \ud83c\udf5e, \ud83d\ude97, \ud83d\udcde, \ud83c\udf89, \u2665\ufe0f, and \ud83c\udfc1. Emoji exist in various genres, including facial expressions, common objects, places and types of weather, and animals. They are much like emoticons, but emoji are pictures rather than typographic approximations; the term \"emoji\" in the strict sense refers to such pictures which can be represented as encoded characters, but it is sometimes applied to messaging stickers by extension.\nhttps:\/\/en.wikipedia.org\/wiki\/Emoji"}}