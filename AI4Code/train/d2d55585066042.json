{"cell_type":{"adbac1eb":"code","8819ed1b":"code","e77d57c2":"code","a6be4979":"code","b3e931ff":"code","8824aa4b":"code","3f97e331":"code","d353bdbf":"code","0d0cc752":"code","30308626":"code","b2d72d9b":"code","7ec9fe50":"code","ea29533b":"code","13034029":"code","8f3072cf":"code","87f44144":"code","71ed8ceb":"code","dac0ec8b":"code","7a12d81f":"code","015831c4":"code","10713143":"code","c7022af2":"code","48fd02e9":"code","10c48584":"code","5070a70c":"code","aaa6f5eb":"code","ea331dad":"code","077a05ae":"code","0e5e80c6":"code","c5e60d10":"code","03ba039f":"code","6399fccc":"code","0ca98473":"code","79daf50b":"code","8800067d":"code","d8d0cee0":"code","594ca141":"code","42dd0290":"code","c3c73da4":"code","9c045e27":"code","d915a646":"code","891d64b8":"code","fe4f7624":"code","7ef12156":"code","a4d92263":"code","464f0cb9":"code","ff638b96":"code","6f0663cd":"code","0be34a59":"code","9b102a7c":"code","1a26c2ab":"code","d823791f":"code","1b70c949":"code","4e96b823":"code","16bcc11c":"code","c3e0a880":"code","6741fb7a":"code","1fde23d6":"code","1dd3d42e":"code","24f21548":"code","33e338a6":"code","fc5a4e08":"code","39c4895a":"code","2b5123b5":"code","76559798":"code","f67f9d5c":"code","ddaaef7d":"code","8639b43e":"code","42606b13":"code","de34ef75":"code","8010cc6f":"code","178a6ce1":"code","e9229bd9":"code","df504bcc":"code","8f9a389a":"code","4ce95050":"code","53ff194e":"code","6eef1429":"code","fc60d04c":"code","a4515e16":"code","2bb097c9":"code","6a11a17f":"code","f89d65d2":"code","db854c34":"code","73f51d62":"code","cb639d8c":"code","1f0128e0":"code","b3631339":"markdown","940e4e76":"markdown","5365a310":"markdown","6178c07d":"markdown","e243e027":"markdown","7f4f6e0d":"markdown","9c046d57":"markdown","725a7df6":"markdown","122db567":"markdown","f3e02d39":"markdown","b7920eb6":"markdown","77966e6b":"markdown","a223b71e":"markdown","9c5d8bd3":"markdown","683ae9f0":"markdown","19843f5e":"markdown","38167657":"markdown","583b9272":"markdown","7f445c9c":"markdown","f5277953":"markdown","84621a91":"markdown","49bd5b55":"markdown","1794499e":"markdown","7fe4d8b8":"markdown","5c619346":"markdown","9d452559":"markdown","5f5e8add":"markdown","6d47b11f":"markdown","0ff7e9f0":"markdown","7a429800":"markdown","3c76491a":"markdown","81bf603a":"markdown","d468588e":"markdown","827416d6":"markdown","045ed4d8":"markdown","ec58dcff":"markdown","bfe6e4f1":"markdown","e3db2b0f":"markdown","fd93fd9e":"markdown","7bf90040":"markdown","ff64af50":"markdown","ea6044d7":"markdown","1e55da90":"markdown","030d080a":"markdown","5f2ab46c":"markdown","fb8afbff":"markdown","25a8ec2a":"markdown","896c64c3":"markdown","0e94ef6f":"markdown","6eabad87":"markdown","dd11b879":"markdown","b7964faf":"markdown","3e901bbf":"markdown","10badfe7":"markdown","37dc9f89":"markdown"},"source":{"adbac1eb":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","8819ed1b":"countries = pd.read_csv('..\/input\/olympic-games\/dictionary.csv')\ncountries.head()","e77d57c2":"countries.describe()","a6be4979":"countries.info()","b3e931ff":"# Renaming column for easy merging with summer and winter csvs\ncountries['Country'] = countries['Country'].apply(str)\ncountries['Code'] = countries['Code'].apply(str)\ncountries = countries.rename(columns={\n    'Country': 'Country_name',\n    'Code': 'Country'\n})\ncountries.info()","8824aa4b":"summer = pd.read_csv('..\/input\/olympic-games\/summer.csv')\nsummer.head()","3f97e331":"summer.info()","d353bdbf":"summer.describe(include=['O'])","0d0cc752":"winter = pd.read_csv('..\/input\/olympic-games\/winter.csv')\nwinter.head()","30308626":"winter.info()","b2d72d9b":"winter.describe(include=['O'])","7ec9fe50":"# Merging countries and summer csvs\nsummer_games = pd.merge(countries, summer, on=\"Country\", how='left')\nsummer_games.info()","ea29533b":"#Checking NaN values:\nnrows = len(summer_games)\nprint(\"Number of rows : \", nrows)\nsummer_games.isna().sum()","13034029":"year_na = summer_games[summer_games['Year'].isna()]\nyear_na.head()","8f3072cf":"print(\"Total number of rows with NaN Year column : \", len(year_na))\n\nyear_na.isna().sum()","87f44144":"summer_games = summer_games.dropna(subset=['Year'])\nprint(\"Number of rows dropped = \", (nrows - len(summer_games)))\nsummer_games.isna().sum()","71ed8ceb":"# Changing float year column to int\nsummer_games['Year'] = summer_games['Year'].astype(int)\nsummer_games.head(15)","dac0ec8b":"summer_games.Athlete = summer_games.Athlete.apply(lambda x: x.capitalize().replace(',', ''))\nsummer_games.Athlete.head(10)","7a12d81f":"### Check the different characters present in Athlete names.\n# import re\n# extra_chars=set()\n# for name in summer_games.Athlete.values:\n#     extra_chars.update(list(re.sub(\"[A-Za-z0-9]\",\"\",name)))\n# print(extra_chars)","015831c4":"# Summer Game Gender distribution :\nM, F = summer_games.Gender.value_counts()\nprint(\"Gender distribution : \\nMale --------------- : \", M,\"\\nFemale ------------- :  \", F, \"\\n\\nTotal Athltete Count : \", M + F)\n\nfig = px.pie(pd.DataFrame({'Gender': [\"Male\", \"Female\"],'Counts': [M, F]}),\n             values='Counts',\n             names='Gender',\n             width=600,\n             height=600,\n             color='Gender',\n             color_discrete_map={\n                 \"Male\": \"#67001F\",\n                 \"Female\": \"#B2182B\"\n             },\n             title='Athlete Gender distribution - Summer Games')\nfig.show()","10713143":"print(\"Total Athltete Count : \", M + F)\n\nfig = px.bar(pd.DataFrame({ 'Gender': [\"Male\", \"Female\"], 'Counts': [M, F]}),\n             x='Gender',\n             y='Counts',\n             width=600,\n             height=600,\n             color=[\"#67001F\", \"#B2182B\"],\n             color_discrete_map=\"identity\",\n             hover_name=\"Counts\",\n             text='Counts',\n             title=\"Athlete Gender distribution - Summer Games\")\nfig.show()","c7022af2":"print(\"Total number of distict countries : \",len(summer_games.Country_name.unique()))","48fd02e9":"country_wise_medals = summer_games.groupby(['Country_name', 'Medal'])['Gender'].count().reset_index()\ncountry_wise_medals = country_wise_medals.pivot_table(index='Country_name',\n                                                      columns='Medal',\n                                                      values='Gender',\n                                                      aggfunc=np.sum,\n                                                      fill_value=0)\n# rearranging Medal column order to : Gold, Silver, Bronze\nrearranged_col_index = country_wise_medals.columns.reindex(['Gold', 'Silver', 'Bronze'])\ncountry_wise_medals = country_wise_medals.reindex(columns=rearranged_col_index[0])\ncountry_wise_medals = pd.concat([country_wise_medals, country_wise_medals.sum(axis=1)],axis=1)\ncountry_wise_medals = country_wise_medals.sort_values(by=0, ascending=False).rename(columns={0: 'Total'})\n\nprint(\"\\nTop 20 Countries with highest overall Medals won in Summer Olympics: \")\ncountry_wise_medals.iloc[:20]","10c48584":"top_20 = country_wise_medals.drop(columns='Total')[:20]  #.sort_values(by=country_wise_medals.columns.tolist(),ascending=True)\nfig = px.bar(\n    top_20,\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    },\n    width=1200,\n    height=600,\n    labels={\"Country_name\": \"Countries\",\"value\": \"Medals\"},\n    title='Top 20 Countries with highest overall Medals won in Summer Olympics:'\n)\n\nfig.update_layout(title={'x': .5}, font={\"family\": \"roboto\"}, hovermode='x')\nfig.show()\n# vertical plot\n# top_20 = country_wise_medals[:20].sort_values(by=country_wise_medals.columns.tolist(),ascending=True)\n# fig = px.bar(top_20,orientation='v',title='Top 20 Countries with highest Medals won in Summer Olympics:')\n# fig.show()","5070a70c":"top_20 = country_wise_medals[:20]  #.sort_values(by=country_wise_medals.columns.tolist(),ascending=True)\nfig = px.bar(\n    top_20,\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\",\n        \"Total\": \"#fded81\"\n    },\n    width=1200,\n    height=600,\n    labels={\"Country_name\": \"Top 20 Countries\",\"value\": \"Medals Earned\"},\n    title='Top 20 Countries with highest Medals won in Summer Olympics:')\nfig.update_layout(hovermode='x')\nfig.show()","aaa6f5eb":"# Top 20 Country names :\ntop20_country_names = list(country_wise_medals[:20].index)\ntop20_country_names","ea331dad":"country_wise_medals = summer_games.groupby(['Country_name', 'Medal'])['Gender'].count().reset_index()\ncountry_wise_medals = country_wise_medals.pivot_table(index='Country_name',\n                                                      columns='Medal',\n                                                      values='Gender',\n                                                      aggfunc=np.sum,\n                                                      fill_value=0)\n# Sorting by Gold Medals\ncountry_wise_medals = country_wise_medals.sort_values(by=['Gold'],ascending=False)\n# rearranging Medal column order to : Gold, Silver, Bronze\nrearranged_col_index = country_wise_medals.columns.reindex(['Gold', 'Silver', 'Bronze'])\ncountry_wise_medals = country_wise_medals.reindex(columns=rearranged_col_index[0])\n\nprint(\"\\nTop 20 Countries with sorted by Gold Medal wins in Summer Olympics: \")\ncountry_wise_medals.iloc[:20]","077a05ae":"top_10 = country_wise_medals[:10]\nfig = px.bar(\n    top_10,\n    orientation='v',\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    },\n    width=1000,\n    height=600,\n    labels={\"Country_name\": \"Top 10 Countries\",\"value\": \"Medal Wins\"},\n    title='Top 10 Countries sorted by highest Gold Medal wins in Summer Olympics:')\nfig.show()","0e5e80c6":"medal_year_country = summer_games.groupby(['Year','Country_name'])['Medal'].count()\nmedal_year_country = pd.DataFrame(medal_year_country)\n# medal_year_country = medal_year_country.groupby(level=0).apply(lambda df : df.sort_index(ascending=False)[:20])\n# medal_year_country.index = medal_year_country.index.droplevel(0)\nmedal_year_country = medal_year_country.reset_index()\ntop20_medal_year_country = medal_year_country[medal_year_country['Country_name'].isin(top20_country_names)]  #.reset_index(drop=True)\ntop20_medal_year_country = pd.pivot_table(top20_medal_year_country,\n                                          index='Year',\n                                          columns='Country_name',\n                                          values='Medal')\ntop20_medal_year_country.head()","c5e60d10":"# Top 20 Countries\nfig = px.line(\n    top20_medal_year_country,\n    template=\"plotly_dark\",\n    title='Top 20 Country wise Medal distribution over the years for Summer Olympics'\n)\nfig.update_layout(plot_bgcolor=\"#1f1c1c\", title={'x': 0.5})\n\nfig.show()","03ba039f":"# First Top 10 Countries:\ntop10_medal_year_country = medal_year_country[medal_year_country['Country_name'].isin(top20_country_names[:10])].reset_index(drop=True)\ntop10_medal_year_country = pd.pivot_table(top10_medal_year_country,\n                                          index='Year',\n                                          columns='Country_name',\n                                          values='Medal')\n\nfig = px.line(\n    top10_medal_year_country,\n    template=\"plotly_dark\",\n    title='Top 10 Country wise Medal distribution over the years for Summer Olympics'\n)\n\nfig.show()","6399fccc":"# Overall Summer top 20 Athlete's Medal achievement\nprint(\"Overall Summer top 20 Athelete's with their Medal achievement : \")\nbest_athlete_summer = pd.DataFrame(summer_games.groupby('Athlete')['Medal'].count().sort_values(ascending=False))\nbest_athlete_summer[:20]","0ca98473":"fig = px.bar(\n    best_athlete_summer[:20].reset_index(),\n    x='Athlete',\n    y='Medal',\n    hover_name=\"Athlete\",\n    color='Athlete',\n    template='plotly_white',\n    width=800,\n    height=600,\n    title=\"Overall Top 20 Athlete Medal achievement distribution across all the years (Summer Olympics)\"\n)\nfig.show()","79daf50b":"men_summer = summer_games[summer_games['Gender'] == 'Men']\nplayer_wise_medal_men = men_summer[['Athlete', 'Medal','Gender']].groupby(['Athlete','Medal']).count()\nmen_summer = pd.DataFrame(men_summer.groupby('Athlete')['Medal'].count().sort_values(ascending=False)).reset_index()\nbest_men = men_summer.iloc[0]['Athlete']\nprint(\"Top Men Athlete with highest medal achievement : \\n\\nAthlete Name     : \",best_men, \"\\nTotal Medals Won : \", men_summer.iloc[0]['Medal'])\nprint(\"\\nMedal Distribution - \\nGold   : \",int(player_wise_medal_men.loc[best_men].loc['Gold']))\nprint(\"Silver :  \", int(player_wise_medal_men.loc[best_men].loc['Silver']))\nprint(\"Bronze :  \", int(player_wise_medal_men.loc[best_men].loc['Bronze']))","8800067d":"women_summer = summer_games[summer_games['Gender'] == 'Women']\nplayer_wise_medal_women = women_summer[['Athlete', 'Medal', 'Gender']].groupby(['Athlete','Medal']).count()\nwomen_summer = pd.DataFrame(women_summer.groupby('Athlete')['Medal'].count().sort_values(ascending=False)).reset_index()\nbest_women = women_summer.iloc[0]['Athlete']\n\nprint(\"Top Women Athlete with highest medal achievement : \\n\")\nprint(\"1.\\nAthlete Name     : \", best_women, \"\\nTotal Medals Won : \",women_summer.iloc[0]['Medal'])\nprint(\"Medal Distribution : \\nGold   : \",int(player_wise_medal_women.loc[best_women].loc['Gold']))\nprint(\"Silver : \", int(player_wise_medal_women.loc[best_women].loc['Silver']))\nprint(\"Bronze : \", int(player_wise_medal_women.loc[best_women].loc['Bronze']))\n\nbest_women = women_summer.iloc[1]['Athlete']\nprint(\"\\n2.\\nAthlete Name     : \", best_women, \"\\nTotal Medals Won : \",women_summer.iloc[1]['Medal'])\nprint(\"Medal Distribution : \\nGold   : \",\n      int(player_wise_medal_women.loc[best_women].loc['Gold']))\nprint(\"Silver : \", int(player_wise_medal_women.loc[best_women].loc['Silver']))\nprint(\"Bronze : \", int(player_wise_medal_women.loc[best_women].loc['Bronze']))\n\nbest_women = women_summer.iloc[2]['Athlete']\nprint(\"\\n3.\\nAthlete Name     : \", best_women, \"\\nTotal Medals Won : \",women_summer.iloc[2]['Medal'])\nprint(\"Medal Distribution : \\nGold   : \",int(player_wise_medal_women.loc[best_women].loc['Gold']))\nprint(\"Silver : \", int(player_wise_medal_women.loc[best_women].loc['Silver']))\nprint(\"Bronze : \", int(player_wise_medal_women.loc[best_women].loc['Bronze']))","d8d0cee0":"fig = px.bar(men_summer.iloc[:20],\n             x='Athlete',\n             y='Medal',\n             color='Athlete',\n             template='seaborn',\n             title=\"Top 20 Men Athlete Medal achievement across the years (Summer Olympics)\")\nfig.show()","594ca141":"fig = px.bar(women_summer.iloc[:20],\n             x='Athlete',\n             y='Medal',\n             color='Athlete',\n             template='seaborn',\n             title=\"Women Athlete achievement across the years (Summer Olympics)\",\n             hover_name='Medal')\nfig.show()","42dd0290":"fig = make_subplots(rows=1, cols=2, shared_yaxes=True)\n\ncustom_data = np.transpose([\n    list(men_summer.iloc[:10]['Athlete'].values),\n    list(men_summer.iloc[:10]['Medal'].values)\n])\nfig.add_trace(go.Bar(x=list(men_summer.iloc[:10]['Athlete'].values),\n                     y=list(men_summer.iloc[:10]['Medal'].values),\n                     text=list(men_summer.iloc[:10]['Medal'].values),\n                     textposition='auto',\n                     name=\"Men\",\n                     marker_color=\"#0B3C49\",\n                     customdata=custom_data,\n                     hovertemplate=\"<br>\".join([\n                         \"Athlete: %{customdata[0]}\",\n                         \"Medal : %{customdata[1]}\",\n                     ])),\n              row=1,\n              col=1)\n\ncustom_data = np.transpose([\n    list(women_summer.iloc[:10]['Athlete'].values),\n    list(women_summer.iloc[:10]['Medal'].values)\n])\nfig.add_trace(go.Bar(x=list(women_summer.iloc[:10]['Athlete'].values),\n                     y=list(women_summer.iloc[:10]['Medal'].values),\n                     text=list(women_summer.iloc[:10]['Medal'].values),\n                     textposition='auto',\n                     name=\"Women\",\n                     marker_color=\"#731963\",\n                     customdata=custom_data,\n                     hovertemplate=\"<br>\".join([\n                         \"Athlete: %{customdata[0]}\",\n                         \"Medal : %{customdata[1]}\",\n                     ])),\n              row=1,\n              col=2)\n\nfig.update_traces(marker_line_color=\"#000000\",\n                  marker_line_width=1,\n                  opacity=0.7)\nfig.update_yaxes(tickvals=list(range(0, 25, 2)), gridcolor='#A1BDCE')\nfig.update_layout(height=600,\n                  width=1000,\n                  xaxis_tickangle=30,\n                  xaxis_tickfont_size=12,\n                  title_text=\"Top 10 Men and Women medal achievers (Summer Olympics)\",\n                  uniformtext=dict(mode=\"hide\", minsize=10),\n                  legend=dict(orientation=\"h\",\n                              yanchor=\"bottom\",\n                              y=1.01,\n                              xanchor=\"left\",\n                              x=0,\n                              bgcolor=\"#fcf7ff\",\n                              borderwidth=0.5))\nfig['layout']['xaxis1'].update(title='MEN ATHLETE')\nfig['layout']['xaxis2'].update(title='WOMEN ATHLETE')\nfig.show()","c3c73da4":"top_10_men = list(men_summer.iloc[:10]['Athlete'].values)\ntop_10_women = list(women_summer.iloc[:10]['Athlete'].values)\n\nplayer_wise_medal_men = player_wise_medal_men.reset_index()\nplayer_wise_medal_women = player_wise_medal_women.reset_index()","9c045e27":"top_10_medal_distribution_men = pd.pivot_table(\n    player_wise_medal_men[player_wise_medal_men.Athlete.isin(top_10_men)],\n    columns='Medal',\n    index=\"Athlete\",\n    fill_value=0,\n    values='Gender')\n# Sorting by Gold Medals\ntop_10_medal_distribution_men = top_10_medal_distribution_men.sort_values(by=['Gold'], ascending=False)\n# Rearranging Medal column order to : Gold, Silver, Bronze\nnew_col = top_10_medal_distribution_men.columns.reindex(['Gold', 'Silver', 'Bronze'])\ntop_10_medal_distribution_men = top_10_medal_distribution_men.reindex(columns=new_col[0])\n\ntop_10_medal_distribution_women = pd.pivot_table(player_wise_medal_women[player_wise_medal_women.Athlete.isin(top_10_women)],\n                                                 columns='Medal',\n                                                 index=\"Athlete\",\n                                                 fill_value=0,\n                                                 values='Gender')\n# Sorting by Gold Medals\ntop_10_medal_distribution_women = top_10_medal_distribution_women.sort_values(by=['Gold'], ascending=False)\n# Rearranging Medal column order to : Gold, Silver, Bronze\nnew_col = top_10_medal_distribution_women.columns.reindex(['Gold', 'Silver', 'Bronze'])\ntop_10_medal_distribution_women = top_10_medal_distribution_women.reindex(columns=new_col[0])\ntop_10_medal_distribution_women","d915a646":"men_Y = list(zip(top_10_medal_distribution_men['Gold'].tolist(),top_10_medal_distribution_men['Silver'].tolist(),top_10_medal_distribution_men['Bronze'].tolist()))\nwomen_Y = list(zip(top_10_medal_distribution_women['Gold'].tolist(),top_10_medal_distribution_women['Silver'].tolist(),top_10_medal_distribution_women['Bronze'].tolist()))","891d64b8":"fig = make_subplots(rows=2, cols=1, shared_yaxes=True)\n\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_men.index.values),\n    y=[x[0] for x in men_Y],\n    name=\"Men - Gold\",\n    marker_color=\"#FFCC00\",\n    text=[x[0] for x in men_Y],\n    textposition='auto',\n),\n              row=1,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_men.index.values),\n    y=[x[1] for x in men_Y],\n    name=\"Men - Silver\",\n    marker_color=\"#CCCCCC\",\n    text=[x[1] for x in men_Y],\n    textposition='auto',\n),\n              row=1,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_men.index.values),\n    y=[x[2] for x in men_Y],\n    name=\"Men - Bronze\",\n    marker_color=\"#CC6633\",\n    text=[x[2] for x in men_Y],\n    textposition='auto',\n),\n              row=1,\n              col=1)\n\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_women.index.values),\n    y=[x[0] for x in women_Y],\n    name=\"Women - Gold\",\n    marker_color=\"#FFCC00\",\n    text=[x[0] for x in women_Y],\n    textposition='auto',\n),\n              row=2,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_women.index.values),\n    y=[x[1] for x in women_Y],\n    name=\"Women - Silver\",\n    marker_color=\"#CCCCCC\",\n    text=[x[1] for x in women_Y],\n    textposition='auto',\n),\n              row=2,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_women.index.values),\n    y=[x[2] for x in women_Y],\n    name=\"Women - Bronze\",\n    marker_color=\"#CC6633\",\n    text=[x[2] for x in women_Y],\n    textposition='auto',\n),\n              row=2,\n              col=1)\n\nfig.update_layout(\n    height=1000,\n    width=800,\n    barmode='stack',\n    legend=dict(bgcolor=\"#fcf7ff\", borderwidth=0.5),\n    title_text=\"Top 10 Men and Women medal achievers (Summer Olympics)\",\n    template='ggplot2',\n)\nfig['layout']['xaxis1'].update(title='MEN ATHLETES')\nfig['layout']['xaxis2'].update(title='WOMEN ATHLETES')\nfig.show()","fe4f7624":"top10_countries = summer_games[summer_games.Country_name.isin(top20_country_names[:10])]\ntop10_countries = pd.DataFrame(top10_countries.groupby(['Country_name', 'Sport'])['Medal'].count())\ntop10_countries = top10_countries.reindex(axis='index', level=0, labels=top20_country_names[:10]).reset_index()\ntop10_countries[:10]","7ef12156":"fig = px.bar(\n    top10_countries,\n    x=\"Country_name\",\n    y=\"Medal\",\n    color=\"Sport\",\n    hover_name=\"Medal\",\n    template='ggplot2',\n    labels={\n        \"Country_name\": \"Top 10 Countries\",\n        \"Medal\": \"Medals earned\"\n    },\n    title=\"Medals achieved by countries distributed across Sport Events (Summer Olympics)\")\nfig.show()","a4d92263":"fig = px.imshow(\n    pd.pivot_table(top10_countries,\n                   index='Country_name',\n                   values='Medal',\n                   columns='Sport'),\n    labels=dict(y=\"Top 10 Countries\", x=\"Olympics sports events\"),\n    title=\"Medals achieved by countries distributed across Sport Events (Summer Olympics)\")\nfig.show()","464f0cb9":"# Merging countries and winter csvs\nwinter_games = pd.merge(countries, winter, on=\"Country\", how='left')\nwinter_games.info()","ff638b96":"#Checking Na values:\nnrows = len(winter_games)\nprint(\"Number of rows : \", nrows)\nwinter_games.isna().sum()","6f0663cd":"year_na = winter_games[winter_games['Year'].isna()]\nyear_na.head()","0be34a59":"print(\"Total number of rows with NaN Year column : \", len(year_na))\n\nyear_na.isna().sum()","9b102a7c":"winter_games = winter_games.dropna(subset=['Year'])\nprint(\"Number of rows dropped = \", (nrows - len(winter_games)))\nwinter_games.isna().sum()","1a26c2ab":"# Changing float year column to int\nwinter_games['Year'] = winter_games['Year'].astype(int)\nwinter_games.head(5)","d823791f":"winter_games.Athlete = winter_games.Athlete.apply(lambda x: x.capitalize().replace(',', ''))\nwinter_games.Athlete.head(10)","1b70c949":"# Winter Game Gender distribution :\nM, F = winter_games.Gender.value_counts()\nprint(\"Gender distribution : \\nMale --------------- : \", M,\"\\nFemale ------------- : \", F, \"\\n\\nTotal Athltete Count : \", M + F)","4e96b823":"women_winter = winter_games[winter_games['Gender'] == 'Women']\nplayer_wise_medal_women = women_winter[['Athlete', 'Medal', 'Gender']].groupby(['Athlete','Medal']).count()\nwomen_winter = pd.DataFrame(women_winter.groupby('Athlete')['Medal'].count().sort_values(ascending=False)).reset_index()\nbest_women = women_winter.iloc[0]['Athlete']\nprint(\"Top Women Athlete with highest medal achievement : \\n\")\nprint(\"Athlete Name     : \", best_women, \"\\nTotal Medals Won : \",women_winter.iloc[0]['Medal'])\nprint(\"Medal Distribution : \\nGold   : \",int(player_wise_medal_women.loc[best_women].loc['Gold']))\nprint(\"Silver : \", int(player_wise_medal_women.loc[best_women].loc['Silver']))\nprint(\"Bronze : \", int(player_wise_medal_women.loc[best_women].loc['Bronze']))","16bcc11c":"# Winter Game Gender distribution :\nM, F = winter_games.Gender.value_counts()\nprint(\"Gender distribution : \\nMale --------------- : \", M,\"\\nFemale ------------- : \", F, \"\\n\\nTotal Athltete Count : \", M + F)\n\nfig = make_subplots(rows=1,\n                    cols=2,\n                    shared_xaxes=False,\n                    shared_yaxes=False,\n                    subplot_titles=[\"Athlete Counts\", \"Athlete Percentage\"],\n                    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]])\n\ngender_counts = pd.DataFrame({'Gender': [\"Male\", \"Female\"], 'Counts': [M, F]})\nfig.add_trace(go.Bar(\n    x=list(gender_counts['Gender'].values),\n    y=list(gender_counts['Counts'].values),\n    text=list(gender_counts['Counts'].values),\n    textposition='auto',\n    name=\"Bar chart\",\n    marker_color=px.colors.sequential.RdBu,\n),\n              row=1,\n              col=1)\n\nfig.add_trace(go.Pie(\n    labels=list(gender_counts['Gender'].values),\n    values=list(gender_counts['Counts'].values),\n    textposition='auto',\n    textinfo='label+percent',\n    marker_colors=px.colors.sequential.RdBu,\n    name=\"Pie chart\",\n),\n              row=1,\n              col=2)\n\nfig.update_traces(marker_line_color=\"#000000\",\n                  marker_line_width=1,\n                  opacity=0.8)\nfig.update_yaxes(tickvals=list(range(0, 3300, 400)), gridcolor='#A1BDCE')\nfig.update_layout(height=600,\n                  width=1000,\n                  xaxis_tickangle=30,\n                  xaxis_tickfont_size=12,\n                  title_text=\"Top 10 Men and Women medal achievers (Winter Olympics)\",\n                  template=\"ggplot2\",\n                  uniformtext=dict(mode=\"hide\", minsize=10))\nfig['layout']['xaxis1'].update(title='Gender')\nfig.show()","c3e0a880":"print(\"Total number of distict countries : \",len(winter_games.Country_name.unique()))","6741fb7a":"country_wise_medals = winter_games.groupby(['Country_name', 'Medal'])['Gender'].count().reset_index()\ncountry_wise_medals = country_wise_medals.pivot_table(index='Country_name',\n                                                      columns='Medal',\n                                                      values='Gender',\n                                                      aggfunc=np.sum,\n                                                      fill_value=0)\n# rearranging Medal column order to : Gold, Silver, Bronze\nrearranged_col_index = country_wise_medals.columns.reindex(['Gold', 'Silver', 'Bronze'])\ncountry_wise_medals = country_wise_medals.reindex(columns=rearranged_col_index[0])\ncountry_wise_medals = pd.concat([country_wise_medals, country_wise_medals.sum(axis=1)],axis=1,\n)\ncountry_wise_medals = country_wise_medals.sort_values(by=0, ascending=False).rename(columns={0: 'Total'})\n\nprint(\"\\nTop 20 Countries with highest Medals won in Winter Olympics: \")\ncountry_wise_medals.iloc[:20]","1fde23d6":"top_20 = country_wise_medals.drop(columns='Total')[:20]\nfig = px.bar(\n    top_20,\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    },\n    width=1200,\n    height=600,\n    labels={\n        \"Country_name\": \"Top 20 Countries\",\n        \"value\": \"Medals Earned\"\n    },\n    template='ggplot2',\n    title='Top 20 Countries with highest Medals won in Winter Olympics:')\nfig.show()","1dd3d42e":"top_20 = country_wise_medals[:\n                             20]  #.sort_values(by=country_wise_medals.columns.tolist(),ascending=True)\nfig = px.bar(\n    top_20,\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\",\n        \"Total\": \"#fded81\"\n    },\n    width=1200,\n    height=600,\n    labels={\n        \"Country_name\": \"Top 20 Countries\",\n        \"value\": \"Medals\"\n    },\n    title='Top 20 Countries with highest Medals won in Winter Olympics:')\nfig.show()","24f21548":"# Country names :\ntop20_country_names = list(country_wise_medals[:20].index)\ntop20_country_names","33e338a6":"country_wise_medals = winter_games.groupby(['Country_name', 'Medal'])['Gender'].count().reset_index()\ncountry_wise_medals = country_wise_medals.pivot_table(index='Country_name',\n                                                      columns='Medal',\n                                                      values='Gender',\n                                                      aggfunc=np.sum,\n                                                      fill_value=0)\n# Sorting by Gold Medals\ncountry_wise_medals = country_wise_medals.sort_values(by=['Gold'],ascending=False)\n# rearranging Medal column order to : Gold, Silver, Bronze\nrearranged_col_index = country_wise_medals.columns.reindex(['Gold', 'Silver', 'Bronze'])\ncountry_wise_medals = country_wise_medals.reindex(columns=rearranged_col_index[0])\n\nprint(\"\\nTop 20 Countries with highest Medals won in Winter Olympics: \")\ncountry_wise_medals.iloc[:20]","fc5a4e08":"top_20 = country_wise_medals[:10]\nfig = px.bar(\n    top_20,\n    orientation='v',\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    },\n    width=1200,\n    height=600,\n    labels={\n        \"Country_name\": \"Top 10 Countries\",\n        \"value\": \"Medal Wins\"\n    },\n    title='Top 20 Countries with highest Medals won in Winter Olympics:')\nfig.show()","39c4895a":"medal_year_country = winter_games.groupby(['Year','Country_name'])['Medal'].count()\nmedal_year_country = pd.DataFrame(medal_year_country)\nmedal_year_country = medal_year_country.reset_index()\ntop20_medal_year_country = medal_year_country[medal_year_country['Country_name'].isin(top20_country_names)].reset_index(drop=True)\ntop20_medal_year_country = pd.pivot_table(top20_medal_year_country,\n                                          index='Year',\n                                          columns='Country_name',\n                                          values='Medal')\ntop20_medal_year_country.head()","2b5123b5":"# Top 20 Countries\nfig = px.line(\n    top20_medal_year_country,\n    template=\"plotly_dark\",\n    title='Top 20 Country wise Medal distribution over the years for Winter Olympics'\n)\nfig.show()","76559798":"# First Top 5 Countries:\ntop10_medal_year_country = medal_year_country[medal_year_country['Country_name'].isin(top20_country_names[:5])].reset_index(drop=True)\ntop10_medal_year_country = pd.pivot_table(top10_medal_year_country,\n                                          index='Year',\n                                          columns='Country_name',\n                                          values='Medal')\n\nfig = px.line(\n    top10_medal_year_country,\n    template=\"plotly_dark\",\n    title='Top 5 Country-wise Medal distribution over the years for Winter Olympics')\nfig.show()","f67f9d5c":"# Overall Winter top 20 Athlete's Medal achievement\nprint(\"Overall Winter top 20 Athelete's with their Medal achievement : \")\nbest_athlete_winter = pd.DataFrame(winter_games.groupby('Athlete')['Medal'].count().sort_values(ascending=False))\nbest_athlete_winter[:20]","ddaaef7d":"fig = px.bar(\n    best_athlete_winter[:20].reset_index(),\n    x='Athlete',\n    y='Medal',\n    hover_name=\"Athlete\",\n    color='Athlete',\n    template='plotly_white',\n    width=800,\n    height=600,\n    title=\"Winter Overall Top 20 Athlete Medal achievement distribution (Winter Olympics)\")\nfig.show()","8639b43e":"men_winter = winter_games[winter_games['Gender'] == 'Men']\nplayer_wise_medal_men = men_winter[['Athlete', 'Medal','Gender']].groupby(['Athlete','Medal']).count()\nmen_winter = pd.DataFrame(men_winter.groupby('Athlete')['Medal'].count().sort_values(ascending=False)).reset_index()\nbest_men = men_winter.iloc[0]['Athlete']\nprint(\"Top Men Athlete with highest medal achievement : \\n\\nAthlete Name     : \",best_men, \"\\nTotal Medals Won : \", men_winter.iloc[0]['Medal'])\nprint(\"\\nMedal Distribution - \\nGold    : \",int(player_wise_medal_men.loc[best_men].loc['Gold']))\nprint(\"Silver :  \", int(player_wise_medal_men.loc[best_men].loc['Silver']))\nprint(\"Bronze :  \", int(player_wise_medal_men.loc[best_men].loc['Bronze']))","42606b13":"women_winter = winter_games[winter_games['Gender'] == 'Women']\nplayer_wise_medal_women = women_winter[['Athlete', 'Medal', 'Gender']].groupby(['Athlete','Medal']).count()\nwomen_winter = pd.DataFrame(women_winter.groupby('Athlete')['Medal'].count().sort_values(ascending=False)).reset_index()\nbest_women = women_winter.iloc[0]['Athlete']\nprint(\"Top Women Athlete with highest medal achievement : \\n\\nAthlete Name     : \",best_women, \"\\nTotal Medals Won : \", women_winter.iloc[0]['Medal'])\nprint(\"\\nMedal Distribution - \\nGold   : \",int(player_wise_medal_women.loc[best_women].loc['Gold']))\nprint(\"Silver : \", int(player_wise_medal_women.loc[best_women].loc['Silver']))\nprint(\"Bronze : \", int(player_wise_medal_women.loc[best_women].loc['Bronze']))","de34ef75":"fig = make_subplots(rows=1, cols=2, shared_yaxes=True)\n\ncustom_data = np.transpose([\n    list(men_winter.iloc[:10]['Athlete'].values),\n    list(men_winter.iloc[:10]['Medal'].values)\n])\nfig.add_trace(go.Bar(x=list(men_winter.iloc[:10]['Athlete'].values),\n                     y=list(men_winter.iloc[:10]['Medal'].values),\n                     text=list(men_winter.iloc[:10]['Medal'].values),\n                     textposition='auto',\n                     name=\"Men\",\n                     marker_color=\"#413620\",\n                     customdata=custom_data,\n                     hovertemplate=\"<br>\".join([\n                         \"Athlete: %{customdata[0]}\",\n                         \"Medal : %{customdata[1]}\",\n                     ])),\n              row=1,\n              col=1)\n\ncustom_data = np.transpose([\n    list(women_winter.iloc[:10]['Athlete'].values),\n    list(women_winter.iloc[:10]['Medal'].values)\n])\nfig.add_trace(go.Bar(x=list(women_winter.iloc[:10]['Athlete'].values),\n                     y=list(women_winter.iloc[:10]['Medal'].values),\n                     text=list(women_winter.iloc[:10]['Medal'].values),\n                     textposition='auto',\n                     name=\"Women\",\n                     marker_color=\"#9c6615\",\n                     customdata=custom_data,\n                     hovertemplate=\"<br>\".join([\n                         \"Athlete: %{customdata[0]}\",\n                         \"Medal : %{customdata[1]}\",\n                     ])),\n              row=1,\n              col=2)\n\nfig.update_traces(marker_line_color=\"#000000\",\n                  marker_line_width=1,\n                  opacity=0.8)\nfig.update_yaxes(tickvals=list(range(0, 25, 2)), gridcolor='#A1BDCE')\nfig.update_layout(height=600,\n                  width=1000,\n                  xaxis_tickangle=30,\n                  xaxis_tickfont_size=12,\n                  title_text=\"Top 10 Men and Women medal achievers (Winter Olympics)\",\n                  uniformtext=dict(mode=\"hide\", minsize=10),\n                  legend=dict(orientation=\"h\",\n                              yanchor=\"bottom\",\n                              y=1.01,\n                              xanchor=\"left\",\n                              x=0,\n                              bgcolor=\"#fcf7ff\",\n                              borderwidth=0.5))\nfig['layout']['xaxis1'].update(title='MEN ATHLETE')\nfig['layout']['xaxis2'].update(title='WOMEN ATHLETE')\nfig.show()","8010cc6f":"top_10_men   = list(men_winter.iloc[:10]['Athlete'].values)\ntop_10_women = list(women_winter.iloc[:10]['Athlete'].values)\n\nplayer_wise_medal_men   = player_wise_medal_men.reset_index()\nplayer_wise_medal_women = player_wise_medal_women.reset_index()","178a6ce1":"top_10_medal_distribution_men = pd.pivot_table(\n    player_wise_medal_men[player_wise_medal_men.Athlete.isin(top_10_men)],\n    columns='Medal',\n    index=\"Athlete\",\n    fill_value=0,\n    values='Gender')\n# Sorting by Gold Medals\ntop_10_medal_distribution_men = top_10_medal_distribution_men.sort_values(by=['Gold'], ascending=False)\n# Rearranging Medal column order to : Gold, Silver, Bronze\nnew_col = top_10_medal_distribution_men.columns.reindex(['Gold', 'Silver', 'Bronze'])\ntop_10_medal_distribution_men = top_10_medal_distribution_men.reindex(columns=new_col[0])\n\ntop_10_medal_distribution_women = pd.pivot_table(player_wise_medal_women[player_wise_medal_women.Athlete.isin(top_10_women)],\n                                                 columns='Medal',\n                                                 index=\"Athlete\",\n                                                 fill_value=0,\n                                                 values='Gender')\n# Sorting by Gold Medals\ntop_10_medal_distribution_women = top_10_medal_distribution_women.sort_values(by=['Gold'], ascending=False)\n# Rearranging Medal column order to : Gold, Silver, Bronze\nnew_col = top_10_medal_distribution_women.columns.reindex(['Gold', 'Silver', 'Bronze'])\ntop_10_medal_distribution_women = top_10_medal_distribution_women.reindex(columns=new_col[0])\ntop_10_medal_distribution_women","e9229bd9":"men_Y = list(\n    zip(top_10_medal_distribution_men['Gold'].tolist(),\n        top_10_medal_distribution_men['Silver'].tolist(),\n        top_10_medal_distribution_men['Bronze'].tolist()))\nwomen_Y = list(\n    zip(top_10_medal_distribution_women['Gold'].tolist(),\n        top_10_medal_distribution_women['Silver'].tolist(),\n        top_10_medal_distribution_women['Bronze'].tolist()))","df504bcc":"fig = make_subplots(rows=2, cols=1, shared_yaxes=True)\n\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_men.index.values),\n    y=[x[0] for x in men_Y],\n    name=\"Men - Gold\",\n    marker_color=\"#FFCC00\",\n    text=[x[0] for x in men_Y],\n    textposition='auto',\n),\n              row=1,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_men.index.values),\n    y=[x[1] for x in men_Y],\n    name=\"Men - Silver\",\n    marker_color=\"#CCCCCC\",\n    text=[x[1] for x in men_Y],\n    textposition='auto',\n),\n              row=1,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_men.index.values),\n    y=[x[2] for x in men_Y],\n    name=\"Men - Bronze\",\n    marker_color=\"#CC6633\",\n    text=[x[2] for x in men_Y],\n    textposition='auto',\n),\n              row=1,\n              col=1)\n\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_women.index.values),\n    y=[x[0] for x in women_Y],\n    name=\"Women - Gold\",\n    marker_color=\"#FFCC00\",\n    text=[x[0] for x in women_Y],\n    textposition='auto',\n),\n              row=2,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_women.index.values),\n    y=[x[1] for x in women_Y],\n    name=\"Women - Silver\",\n    marker_color=\"#CCCCCC\",\n    text=[x[1] for x in women_Y],\n    textposition='auto',\n),\n              row=2,\n              col=1)\nfig.add_trace(go.Bar(\n    x=list(top_10_medal_distribution_women.index.values),\n    y=[x[2] for x in women_Y],\n    name=\"Women - Bronze\",\n    marker_color=\"#CC6633\",\n    text=[x[2] for x in women_Y],\n    textposition='auto',\n),\n              row=2,\n              col=1)\n\nfig.update_layout(height=1000,\n                  width=800,\n                  barmode='stack',\n                  template='ggplot2',\n                  legend=dict(bgcolor=\"#fcf7ff\", borderwidth=0.5),\n                  title_text=\"Top 10 Men and Women medal achievers (Winter Olympics)\")\nfig['layout']['xaxis1'].update(title='MEN ATHLETES')\nfig['layout']['xaxis2'].update(title='WOMEN ATHLETES')\nfig.show()","8f9a389a":"top10_countries = winter_games[winter_games.Country_name.isin(top20_country_names[:10])]\ntop10_countries = pd.DataFrame(top10_countries.groupby(['Country_name', 'Sport'])['Medal'].count())\ntop10_countries = top10_countries.reindex(axis='index', level=0, labels=top20_country_names[:10]).reset_index()\ntop10_countries.head()","4ce95050":"fig = px.bar(\n    top10_countries,\n    x=\"Country_name\",\n    y=\"Medal\",\n    color=\"Sport\",\n    hover_name=\"Medal\",\n    template='ggplot2',\n    labels={\n        \"Country_name\": \"Top 10 Countries\",\n        \"Medal\": \"Medals earned\"\n    },\n    title=\"Medals achieved by countries distributed across Sport Events (Winter)\")\nfig.show()","53ff194e":"fig = px.imshow(\n    pd.pivot_table(top10_countries,\n                   index='Country_name',\n                   values='Medal',\n                   columns='Sport'),\n    labels=dict(y=\"Top 10 Countries\", x=\"Olympics sports events\"),\n    title=\"Medals achieved by countries distributed across Sport Events\")\nfig.show()","6eef1429":"sport_medals_summer = summer_games.groupby(['Sport', 'Medal'])['Athlete'].count().reset_index()\nsport_medals_summer = pd.pivot_table(sport_medals_summer,\n                                     index='Sport',\n                                     columns='Medal',\n                                     values='Athlete')\n# Rearranging Medal in order to : Gold, Silver, Bronze\nnew_col = sport_medals_summer.columns.reindex(['Gold', 'Silver', 'Bronze'])\nsport_medals_summer = sport_medals_summer.reindex(columns=new_col[0]).sort_values('Gold', ascending=False)\nsport_medals_summer.head()","fc60d04c":"# Top 20 Sports\nfig = px.bar(\n    sport_medals_summer[:20],\n    orientation='v',\n    barmode='group',\n    template='ggplot2',\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    },\n    width=1000,\n    height=600,\n    labels={\n        \"Country_name\": \"Top 10 Countries\",\n        \"value\": \"Medal Wins\"\n    },\n    title='Summer Olympics : Top 20 Sports Medal distribution sorted by Gold Medals')\nfig.show()","a4515e16":"sport_medals_winter = winter_games.groupby(['Sport', 'Medal'])['Athlete'].count().reset_index()\nsport_medals_winter = pd.pivot_table(sport_medals_winter,\n                                     index='Sport',\n                                     columns='Medal',\n                                     values='Athlete')\n# Rearranging Medal in order to : Gold, Silver, Bronze\nnew_col = sport_medals_winter.columns.reindex(['Gold', 'Silver', 'Bronze'])\nsport_medals_winter = sport_medals_winter.reindex(columns=new_col[0]).sort_values('Gold', ascending=False)\nsport_medals_winter.head()","2bb097c9":"fig = px.bar(\n    sport_medals_winter,\n    orientation='v',\n    barmode='group',\n    template='ggplot2',\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    },\n    width=1000,\n    height=600,\n    labels={\n        \"Country_name\": \"Top 10 Countries\",\n        \"value\": \"Medal Wins\"\n    },\n    title='Winter Olympics : Sports Medal distribution sorted by Gold Medals')\nfig.show()","6a11a17f":"medals_trend = pd.pivot_table(summer_games.groupby(['Year', 'Medal'])['Country'].count().reset_index(),\n                              index='Year',\n                              columns='Medal',\n                              values='Country')\n\nfig = px.line(\n    medals_trend,\n    template='ggplot2',\n    hover_name='value',\n    title=\"Trend of Medals achieved per year by athletes in Summer Olympics\",\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    })\nfig.update_xaxes(tickvals=list(range(1890, 2014, 5)), gridcolor='#A1BDCE')\nfig.update_yaxes(title_text='Medals count')\n\nfig.show()","f89d65d2":"medals_trend = pd.pivot_table(winter_games.groupby(['Year', 'Medal'])['Country'].count().reset_index(),\n                              index='Year',\n                              columns='Medal',\n                              values='Country')\n\nfig = px.line(\n    medals_trend,\n    template='ggplot2',\n    hover_name='value',\n    title=\"Trend of Medals achieved per year by athletes in Winter Olympics\",\n    color_discrete_map={\n        \"Gold\": \"#FFCC00\",\n        \"Silver\": \"#CCCCCC\",\n        \"Bronze\": \"#CC6633\"\n    })\nfig.update_xaxes(tickvals=list(range(1920, 2016, 5)), gridcolor='#A1BDCE')\nfig.update_yaxes(title_text='Medals count')\nfig.show()","db854c34":"country_medal_overall = pd.DataFrame(summer_games.groupby(['Year','Country'])['Medal'].count()).reset_index()\nfig = px.choropleth(\n    country_medal_overall,\n    locations=\"Country\",\n    color='Medal',\n    hover_name='Medal',\n    animation_frame='Year',\n    template='plotly_white',\n    title=\"Country wise Medal Distribution Per Year (Summer Olympic Games)\",\n    color_continuous_scale=px.colors.sequential.Sunsetdark)\n\nfig.show()","73f51d62":"country_medal_overall = pd.DataFrame(summer_games.groupby('Country')['Medal'].count()).reset_index()\nfig = px.choropleth(\n    country_medal_overall,\n    locations=\"Country\",\n    color='Medal',\n    hover_name='Medal',\n    template='plotly_white',\n    title=\"Overall Medal country wise distribution for Summer Olympic Games over all the years\",\n    color_continuous_scale=px.colors.sequential.Sunsetdark)\n\nfig.show()","cb639d8c":"country_medal_overall = pd.DataFrame(winter_games.groupby(['Year','Country'])['Medal'].count()).reset_index()\nfig = px.choropleth(\n    country_medal_overall,\n    locations=\"Country\",\n    color='Medal',\n    animation_frame='Year',\n    template='plotly_white',\n    title=\"Country wise Medal Distribution Per Year (Winter Olympic Games)\",\n    color_continuous_scale=px.colors.sequential.Sunsetdark)\n\nfig.show()","1f0128e0":"country_medal_overall = pd.DataFrame(winter_games.groupby('Country')['Medal'].count()).reset_index()\nfig = px.choropleth(\n    country_medal_overall,\n    locations=\"Country\",\n    color='Medal',\n    hover_name='Medal',\n    template='plotly_white',\n    title=\"Overall Medal country wise distribution for Winter Olympic Games over all the years\",\n    color_continuous_scale=px.colors.sequential.Sunsetdark)\nfig.show()","b3631339":"## Trend of Medals achieved per year by athletes overall across the years :","940e4e76":"#### Comparison by Medals [Gold, Silver, Bronze] earned :","5365a310":"Gender distribution in Summer games :","6178c07d":"### Top 20 Countries Medals wins sorted by total overall medal wins :","e243e027":"**Selecting all rows with only na values in Year column:**","7f4f6e0d":"## Top athlete acivement gender wise :\n\n### MEN : ","9c046d57":"## Overall Top 20 Athlete Medal achievement distribution across the years :","725a7df6":"**Since the rest of the fields contain NaN values, its safe to remove these rows :**","122db567":"#### Overall Medal country wise distribution for Summer Olympic Games over all the years :","f3e02d39":"#### Comparison by Medals [Gold, Silver, Bronze] earned :","b7920eb6":"## Country wise medals distribution over the Year for top 20 countries  : ","77966e6b":"# Interactive Visualizations and EDA : Olympic Sports and Medals, 1896-2014\n","a223b71e":"## Top Countries with highest Medals won in Summer Olympics: ","9c5d8bd3":"# Summer Game Olympics Analysis:\n\n## Merging and Data cleaning :","683ae9f0":"#### Overall Medal country wise distribution for Winter Olympic Games over all the years :","19843f5e":"**Top 10 Countries Medal distribution over the years:**","38167657":"### Top 10 Men and Women Medal achievement comparison : \n#### Comparison by overall Medals earned :","583b9272":"### Winter Trend :","7f445c9c":"OR","f5277953":"### Top 20 Men and Women achiever :","84621a91":"## Top Countries with highest Medals won in Winter Olympics: \n\n### Top Countries Medals wins sorted by total overall medal wins :","49bd5b55":"## Medals Distribution over the Year for top 20 countries  : ","1794499e":"**Plot with total medal wins per country :**","7fe4d8b8":"OR","5c619346":"## Importing neccessary modules : ","9d452559":"### Top Countries Medals wins sorted by highest Gold Medal wins :","5f5e8add":"## Top athlete acivement gender wise :\n\n### MEN : ","6d47b11f":"**Top 5 Country-wise Medal distribution over the years for Winter Olympics :**","0ff7e9f0":"# Summer and Winter Olympics comparisons :\n## Which Sport has the highest Medals ? ","7a429800":"Selecting all rows with only na values in Year column:","3c76491a":"#### Country wise Medal Distribution Per Year(slider) :","81bf603a":"### Athlete Gender distribution :","d468588e":"### Summer Trend :","827416d6":"### Summer :","045ed4d8":"## Reading the data :\n### Countries :","ec58dcff":"# Winter Game Analysis :\n## Merging and Data cleaning : ","bfe6e4f1":"### WOMEN :","e3db2b0f":"1. #### Country wise Medal Distribution Per Year(slider) :","fd93fd9e":"## Medals achieved by countries distributed across Sport Events : ","7bf90040":"*You have reached the end of this Notebook!*\n<hr>","ff64af50":"**Lets convert the Athelete names to lower case and remove the comma between the last name and first name :**","ea6044d7":"## Overall Medal country wise distribution for Summer and Winter Olympic Games over all the years :\n\n### Summer :","1e55da90":"### Winter:","030d080a":"**Plot with total medal wins per country :**","5f2ab46c":"### WOMEN :","fb8afbff":"**Since the rest of the fields contain NaN values, its safe to remove these rows :**","25a8ec2a":"## Visualizing winter game dataset :","896c64c3":"### Top Countries Medals wins sorted by highest Gold Medal wins :","0e94ef6f":"## Medals achieved by countries distributed across Sport Events : ","6eabad87":"### Athlete Gender distribution :","dd11b879":"## Visualizing summer game dataset :","b7964faf":"## Overall Winter top 20 Athlete Medal achievement  :","3e901bbf":" ### Winter :","10badfe7":"**Lets convert the Athelete names to lower case and remove the comma between the last name and first name :**","37dc9f89":"### Top 10 Men and Women Medal achievement comparison : \n#### Comparison by overall Medals earned :"}}