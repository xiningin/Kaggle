{"cell_type":{"b0ea8211":"code","abfa141a":"code","d8b8f2fe":"code","b227f971":"code","197470d0":"code","dee98545":"code","376e757d":"code","51b6b83c":"code","60f15ff2":"code","dbf71327":"code","9faab9d2":"markdown","cd625be9":"markdown","9cc37925":"markdown","4d33745a":"markdown","d5296e19":"markdown","15f7b733":"markdown","2349668d":"markdown","c81e2e60":"markdown","c9b4795f":"markdown","df6d1bbf":"markdown","2f367623":"markdown"},"source":{"b0ea8211":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfrom lightgbm import LGBMRegressor\n!pip install sklearn-contrib-py-earth\nfrom pyearth import Earth\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n        \n# Hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n        \n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","abfa141a":"train_df = pd.read_csv('..\/input\/preprocessed-tabular-playground-series-february\/preprocessed_train.csv')\ntest_df = pd.read_csv('..\/input\/preprocessed-tabular-playground-series-february\/preprocessed_test.csv')\ndisplay(train_df.head())\ntrain_df.describe()\nprint(train_df.columns)","d8b8f2fe":"X = train_df.drop(columns=['target'])\ny = train_df['target']","b227f971":"cat_features = [feature for feature in X.columns if 'ordinal_' in feature]","197470d0":"PARAMS={'learning_rate': [0.01, 0,1, 0.4],\n         'max_depth': [5, 10, 20],\n         'num_leaves': [10, 15, 25],\n         'feature_fraction': [0.5, 0.8, 0.9],\n         'subsample': [0.1, 0.2, 0.4]}\n\n\n\nlgbmr = LGBMRegressor(random_state=42, \n                      objective='regression', \n                      metric='mean_absolute_error', \n                      boosting='gbdt',\n                      num_boost_round=300)\n\ngs = RandomizedSearchCV(\n    estimator=lgbmr, \n    param_distributions=PARAMS, \n    n_iter = 100, \n    cv = 2, \n    scoring='neg_mean_absolute_error',\n    verbose=10, \n    random_state=42)\n\n#gs.fit(X, y)\n#print('Best score reached: {} with params: {} '.format(gs.best_score_, gs.best_params_))","dee98545":"PARAMS = {\n    'max_terms': [400, 200, 100], \n    'max_degree': [1, 2],\n    'penalty': [2.5, 3.0, 3.5]\n}\n\nearth = Earth(allow_missing=True, use_fast=True)\n\ngs = RandomizedSearchCV(\n    estimator=earth, \n    param_distributions=PARAMS, \n    n_iter = 100, \n    cv = 2, \n    scoring='neg_mean_absolute_error',\n    verbose=10, \n    random_state=42)\n\n##gs.fit(X, y)\n#print('Best score reached: {} with params: {} '.format(gs.best_score_, gs.best_params_))","376e757d":"# Test the non-PCA features\nkf = KFold(n_splits=2)\n\nscores = []\nfor train_index, test_index in kf.split(train_df):\n    \n    train_X = X.iloc[train_index, :]\n    test_X = X.iloc[test_index, :]\n    \n    train_target = y.iloc[train_index]\n    test_target = y.iloc[test_index]\n    \n    # LGBM Regressor\n    lgbmr = LGBMRegressor(random_state=42, \n                          objective='regression', \n                          metric='mean_absolute_error',\n                          subsample=0.2, \n                          num_leaves=10, \n                          max_depth=5, \n                          learning_rate=0.4, \n                          feature_fraction=0.5)\n    lgbmr.fit(train_X, \n              train_target, \n              eval_set=[(test_X, test_target)], \n              verbose=False)\n    lgbmr_preds = lgbmr.predict(test_X)\n\n    # Earth Splines\n    earth = Earth(allow_missing=True,\n                  penalty=2.5, \n                  max_terms=400, \n                  max_degree=2)\n    earth.fit(train_X, train_target)\n\n    earth_preds = earth.predict(test_X)\n    \n    # Average the predictions\n    ensemble_preds = (lgbmr_preds + earth_preds) \/ 2\n    \n    score = mean_squared_error(test_target, ensemble_preds)\n    print('mean_squared_error: ', score)\n    scores.append(score)\n\nprint('The average mean_squared_error: ', np.mean(scores))\n    \n","51b6b83c":"# Test the non-PCA features\nkf = KFold(n_splits=2)\n\nscores = []\nfor train_index, test_index in kf.split(train_df):\n    train_X = X.iloc[train_index, :]\n    test_X = X.iloc[test_index, :]\n\n    train_target = y.iloc[train_index]\n    test_target = y.iloc[test_index]\n\n    # LGBM Regressor\n    lgbmr = LGBMRegressor(random_state=42, \n                          objective='regression', \n                          metric='mean_absolute_error',\n                          subsample=0.2, \n                          num_leaves=10, \n                          max_depth=5, \n                          learning_rate=0.4, \n                          feature_fraction=0.5)\n    lgbmr.fit(train_X, \n              train_target, \n              eval_set=[(test_X, test_target)], \n              verbose=False)\n    lgbmr_preds = lgbmr.predict(test_X)\n\n    # Earth Splines\n    earth = Earth(allow_missing=True,\n                  penalty=2.5, \n                  max_terms=400, \n                  max_degree=2)\n    earth.fit(train_X, train_target)\n    earth_preds = earth.predict(test_X)\n\n    # Ensemble the two predictions\n    combined_preds = np.vstack((lgbmr_preds,earth_preds)).T\n    reg = LinearRegression().fit(combined_preds, test_target)\n\n    ensemble_preds = reg.predict(combined_preds)\n\n    score = mean_squared_error(test_target, ensemble_preds)\n    print('mean_squared_error: ', score)\n    scores.append(score)\n\nprint('The average mean_squared_error: ', np.mean(scores))\n    \n","60f15ff2":"train_X, test_X, train_target, test_target = train_test_split(X, y, test_size=0.2, random_state=42)\n\n\n# LGBM Regressor\nlgbmr = LGBMRegressor(random_state=42, \n                      objective='regression', \n                      metric='mean_absolute_error',\n                      subsample=0.2, \n                      num_leaves=10, \n                      max_depth=5, \n                      learning_rate=0.4, \n                      feature_fraction=0.5)\nlgbmr.fit(train_X, \n          train_target, \n          eval_set=[(test_X, test_target)], \n          verbose=False)\n\nlgbmr_preds = lgbmr.predict(test_X)\n\n# Earth Splines\nearth = Earth(allow_missing=True,\n              penalty=2.5, \n              max_terms=400, \n              max_degree=2)\nearth.fit(train_X, train_target)\nearth_preds = earth.predict(test_X)\n\n# Ensemble the two predictions\ncombined_preds = np.vstack((lgbmr_preds,earth_preds)).T\nreg = LinearRegression().fit(combined_preds, test_target)\n\nensemble_preds = reg.predict(combined_preds)\n\nscore = mean_squared_error(test_target, ensemble_preds)\nprint('mean_squared_error: ', score)","dbf71327":"test_X = test_df.drop(columns=['id'])\n\nlgbmr_preds = lgbmr.predict(test_X)\nearth_preds = earth.predict(test_X)\ncombined_preds = np.vstack((lgbmr_preds, earth_preds)).T\nensemble_preds = reg.predict(combined_preds)\n\nmy_submission = pd.DataFrame({'id': test_df.id, 'target': ensemble_preds})\n# you could use any filename. We choose submission here\nmy_submission.to_csv('submission.csv', index=False)","9faab9d2":"# Splines + LGMRegressor Ensemble Model\n\nHere I will clean the data (as shown in more detail here https:\/\/www.kaggle.com\/tjcdev\/baselines-with-eda-and-feature-engineering\/edit\/run\/54393091)\n\nBefore creating an ensemble model and submitting a prediction.","cd625be9":"**From Previous Run**\n\nBest score reached: -0.7168645242498474 with params: {'subsample': 0.2, 'num_leaves': 10, 'max_depth': 5, 'learning_rate': 0.4, 'feature_fraction': 0.5} ","9cc37925":"### Averaging Results","4d33745a":"### Neural Network    ","d5296e19":"### Splines","15f7b733":"**From Previous Run**\n\nBest score reached: -0.7217770759004736 with params: {'penalty': 2.5, 'max_terms': 400, 'max_degree': 2} ","2349668d":"### LGBM Regressor","c81e2e60":"# Load the Data\n\n**Note:** I preprocessed the data in the notebook linked at the top of this notebook. ","c9b4795f":"# Submit Predictions\n\nFrom above we can actually see that the best performing ensemble model is a simple average of the two models. And so we can make our predictions using this model and submit it.","df6d1bbf":"# Hyperparameter Tuning","2f367623":"# Ensemble Model"}}