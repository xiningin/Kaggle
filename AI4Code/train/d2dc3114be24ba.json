{"cell_type":{"b5dce79e":"code","d99ee520":"code","9cde1184":"code","0cf3aaff":"code","70e0c357":"code","6c43d561":"code","e85bcbed":"code","25be6314":"code","b2cb6d71":"code","294e850b":"code","bdc930fc":"code","aef7a810":"code","61315db2":"code","ed307ef0":"code","ab439b14":"code","1df8fa96":"code","19bd0f12":"code","b4f2deb8":"code","f96c1af5":"code","4ceedf24":"code","afa71795":"code","6bef728a":"markdown","2e8f9d64":"markdown","ead7d7de":"markdown","ff311446":"markdown","a3ee7c2f":"markdown","b623500d":"markdown","7bc53e42":"markdown","8bb27723":"markdown","0311f04f":"markdown","b9f7b195":"markdown","bc7add4a":"markdown","19b0bddc":"markdown","048a9864":"markdown","4035a493":"markdown","a7871f80":"markdown","2ae662ce":"markdown","5d022fbe":"markdown"},"source":{"b5dce79e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d99ee520":"# python list\npython_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# numpy array\nnumpy_array = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(\"Python listesi :\")\nprint(python_list)\nprint(\"Numpy dizisi :\")\nprint(numpy_array)","9cde1184":"numpy_array1 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(numpy_array1.ndim)\nnumpy_array2 = np.array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])\nprint(numpy_array2.ndim)\n","0cf3aaff":"numpy_array1 = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(numpy_array1.shape) #10 tane elemandan olu\u015fan 1 boyutlu bir dizi(vekt\u00f6r).\nprint(numpy_array1.ndim)","70e0c357":"numpy_array2 = np.array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])\nprint(numpy_array2.ndim)\nprint(numpy_array2.shape)\n# 1 sat\u0131r ve 10 s\u00fctundan olu\u015fan 2 boyutlu bir dizi(matris).","6c43d561":"numpy_array = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(numpy_array.reshape(1,10))\nprint(numpy_array.reshape(10,1))\nprint(numpy_array.reshape(5,2))\nprint(numpy_array.reshape(2,5))\n","e85bcbed":"np.arange(0,10,3)\nnp.arange(10)\nnp.arange(0,10,1)","25be6314":"numpy_array= np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(5,2)\nprint(numpy_array)\n\n#Dizinin herhangi bir sat\u0131r\u0131n\u0131 se\u00e7mek\n#1.sat\u0131r\nfirst_row = numpy_array[0]\n#1. ve 2. sat\u0131r \nfirst_and_second_rows = numpy_array[0:2]\nprint(first_row)\nprint(first_and_second_rows)\n\n#Dizinin herhangi bir kolonunu se\u00e7mek\n#1. s\u00fctun\nfirst_column = numpy_array[:,0]\n#1. ve 2. s\u00fctun\nfirst_and_second_column = numpy_array[:,0:2]\nprint(first_column)\nprint(first_and_second_column)\n\n#Dizinin herhangi bir eleman\u0131n\u0131 se\u00e7mek\nselecting_item = numpy_array[3,1]\nprint(selecting_item)\n","b2cb6d71":"numpy_array = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(5,2)\n\nprint(numpy_array)\nprint(numpy_array[::-1])\n","294e850b":"print(np.zeros((5,4)))\n#np.ones(): zeros() fonksiyonuna benzer \u015feklide verilen b\u00fcy\u00fckl\u00fckte 1'lerden olu\u015fan bir matris d\u00f6nd\u00fcr\u00fcr.\nprint(np.ones((3,3,3)))\n","bdc930fc":"print(np.eye(4))","aef7a810":"numpy_array = np.array([0,1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(5,2)\n\n#Sat\u0131r bazl\u0131 birle\u015ftirme\nprint(np.concatenate([numpy_array, numpy_array], axis =0))\n\n#S\u00fctun bazl\u0131 birle\u015ftirme\nprint(np.concatenate([numpy_array, numpy_array], axis =1))","61315db2":"numpy_array = np.array([0,1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(5,2)\nprint(numpy_array)\n\nprint(numpy_array.max())\n\nprint(numpy_array.min())\n\nprint(numpy_array.sum())\n\n#Sat\u0131rlar\u0131n toplam\u0131\nprint(numpy_array.sum(axis = 1))\n\n#S\u00fctunlar\u0131n toplam\u0131\nprint(numpy_array.sum(axis = 0))","ed307ef0":"numpy_array = np.array([0,1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(numpy_array.mean())\nprint(np.median(numpy_array))\nprint(numpy_array.var())\nprint(numpy_array.std())\n\n#!!! Median kullan\u0131m\u0131n\u0131n di\u011ferlerinden farkl\u0131 oldu\u011fu dikkatinizi \u00e7ekmi\u015f olabilir.\n#Bunun sebebi ndarray nesnesinin np.median(ndarray) fonksiyonuna sahip olmas\u0131 fakat ndarray.median() metoduna sahip olmamas\u0131d\u0131r.","ab439b14":"numpy_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(3,3)\n#dizimizi 3x3 l\u00fck, 2 boyutlu bir matrise d\u00f6n\u00fc\u015ft\u00fcrd\u00fck.\n\nprint(numpy_array)\n\nprint(numpy_array + numpy_array)\n\nprint(numpy_array - numpy_array)\n\nprint(numpy_array * numpy_array)\n\nprint(numpy_array \/ numpy_array)\n\nprint(numpy_array + 5)\n\nprint(numpy_array * 2)\n\n","1df8fa96":"numpy_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(3,3)\n#dizimizi 3x3 l\u00fck, 2 boyutlu bir matrise d\u00f6n\u00fc\u015ft\u00fcrd\u00fck.\nprint(np.sin(numpy_array))\nprint(np.cos(numpy_array))\nprint(np.sqrt(numpy_array)) \nprint(np.exp(numpy_array))\nprint(np.log(numpy_array))","19bd0f12":"numpy_array = np.array([0,1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array1 = numpy_array.reshape(5,2)\nnumpy_array2 = numpy_array.reshape(2,5)\nprint(np.dot(numpy_array1,numpy_array2))","b4f2deb8":"numpy_array = np.array([0,1, 2, 3, 4, 5, 6, 7, 8, 9])\nnumpy_array = numpy_array.reshape(5,2)\nprint(numpy_array)","f96c1af5":"print(numpy_array.T)","4ceedf24":"dizin=np.full((2,3),8)\ndizin","afa71795":"import numpy as np\nliste=[1,2,3] #normal python listesi\nnumpyliste=np.array([1,2,3]) #numpy dizisi\nfor e in liste:\n print(e)\n \nfor e in numpyliste:\n print(e)\n\n\n\n\nimport numpy as np\nliste=[1,2,3]\nnumpyliste=np.array([1,2,3])\nprint(liste+liste)\nprint(numpyliste+numpyliste)\n#listeler topland\u0131\u011f\u0131nda yan yana yazar string gibi kabul eder\n#numpy diziler topland\u0131\u011f\u0131nda ise matematiksel olarak toplar\n\nimport numpy as np\nliste=[1,2,3]\nnumpyliste=np.array([1,2,3])\nprint(3*liste)\nprint(3*numpyliste)\n\nimport numpy as np\na= np.array([5,6,9])\nprint(a[0])\nprint(a[1])\n\nimport numpy as np\na=np.array([[1,2],[3,4],[5,6]])\nprint(a.ndim)\nb=np.array([5,6,9])\nprint(b.ndim)\n\nimport numpy as np\na=np.array([[1,2],[3,4],[5,6]])\nprint(a.shape)\nprint(a.reshape(2,3))\n\nimport numpy as np\nprint(np.linspace(3,18,15))\n# 3 ile 18 dahil 3-18 aras\u0131nda 15 adet say\u0131 \u00fcretir\n\nimport numpy as np\na=np.array([[1,2],[3,4],[5,6]])\nprint(a.ravel())\n\n\nimport numpy as np\na=np.array([[1,2],[3,4],[5,6]])\nprint(a.min())\nprint(a.max())\nprint(a.sum())\n#axis matristeki verilerin s\u00fctunlar\u0131n\u0131 toplar\nprint(a.sum(axis=0))\n#axis matristeki verilerin sat\u0131rlar\u0131n\u0131 toplar\nprint(a.sum(axis=1))\n#t\u00fcm elemanlar\u0131n kare k\u00f6klerini al\u0131r.\nprint(np.sqrt(a))\n#t\u00fcm elemanlar\u0131n standart sapmas\u0131n\u0131 al\u0131r\nprint(np.std(a))\n\n\nimport numpy as np\na=np.array([[1,2],[3,4]])\nb=np.array([[5,6],[7,8]])\nprint(a+b)\n\nimport numpy as np\na=np.array([[1,2],[3,4]])\nb=np.array([[5,6],[7,8]])\nprint(a*b)\n\n\n\n\n\n","6bef728a":"# np.arange()\n\n**np.arange() \u2192Python\u2019daki range() fonksiyonuna benzer. Belirtilen ba\u015flang\u0131\u00e7 de\u011ferinden ba\u015flay\u0131p, her seferinde ad\u0131m say\u0131s\u0131 kadar artt\u0131rarak ,biti\u015f de\u011ferine kadar olan say\u0131lar\u0131 bulunduran bir numpy dizisi d\u00f6d\u00fcr\u00fcr.\nNot: Biti\u015f de\u011ferinin diziye dahil edilmedi\u011fine dikkat edelim.\nGenel kullan\u0131m :\nnp.arange(ba\u015flang\u0131\u00e7,biti\u015f,ad\u0131m say\u0131s\u0131)\nnp.arange(biti\u015f) \u2192 bu kullan\u0131mda default ba\u015flang\u0131\u00e7 de\u011feri 0 , ad\u0131m say\u0131s\u0131 ise 1 olarak kabul edilir. Yani asl\u0131nda yukar\u0131da ki formatta ifade edecek olursak np.arange(0,biti\u015f,1) \u015feklinde yazabiliriz.\n**","2e8f9d64":"# mean, median, varyans ve standart sapma hesaplamak","ead7d7de":"# \u00d6zet Bilgiler","ff311446":"# Diziyi ters \u00e7evirmek\n","a3ee7c2f":"# Matrisin transpozu\n\nMatrisin sat\u0131rlar\u0131n\u0131 s\u00fctun, s\u00fctunlar\u0131n\u0131 sat\u0131r yapma i\u015flemi numpy ile \u201c .T\u201d yazmak kadar kolay.","b623500d":"# Dizinin elemanlar\u0131n\u0131 se\u00e7mek\n\n**Genel kullan\u0131m : ndarray [rows,columns]\nNot: ndarray [:,:] \u2192 buradaki \u201c:\u201d kullan\u0131m\u0131 t\u00fcm sat\u0131r ve s\u00fctunlar\u0131 se\u00e7memizi sa\u011flar.**","7bc53e42":"# \u00d6zel foksiyonlar ile i\u015flemler\n\n\nNumpy toplama, \u00e7\u0131karma gibi basit matematiksel i\u015flemlerin yan\u0131nda trigonometrik, logaritmik,\u00fcstel fonksiyonlar\u2026 gibi daha kompleks fonksiyonlarla da \u00e7al\u0131\u015fma imkan\u0131 sa\u011flar.","8bb27723":"# Dizinin sat\u0131r ve s\u00fctun say\u0131s\u0131n\u0131 de\u011fi\u015ftirmek : ndarray.reshape()\n\n**Numpy array\u2019i yeniden \u015fekillendirmek istedi\u011fimizde yani sat\u0131r ve s\u00fctun say\u0131s\u0131n\u0131 de\u011fi\u015ftirmek istedi\u011fimizde reshape() metodunu kullanabiliriz.**\n","0311f04f":"# Birim matris olu\u015fturmak : np.eye()\n\n**np.eye() \u2192 Belirlenen boyutlarda birim matris olu\u015fturmam\u0131z\u0131 sa\u011flayan fonksiyon.**","b9f7b195":"# Dizinin sat\u0131r ve s\u00fctun say\u0131s\u0131n\u0131 bulmak: ndarray.shape\n\n**.shape \u2192Numpy array nesnesinin ka\u00e7 sat\u0131r ve s\u00fctundan olu\u015ftu\u011funu g\u00f6steren bir tupple nesnesi d\u00f6nd\u00fcr\u00fcr.**","bc7add4a":"# Dizinin boyutunu bulmak : ndarray.ndim\n\n**.ndim \u2192numpy array nesnesinin boyutunu d\u00f6nd\u00fcr\u00fcr.**","19b0bddc":"# Matrislerin \u00e7arp\u0131m\u0131\nBu b\u00f6l\u00fcme ,iki matris \u00e7arp\u0131l\u0131rken ilk matrisin s\u00fctun say\u0131s\u0131n\u0131n ikinci matrisin sat\u0131r say\u0131s\u0131na e\u015fit olmas\u0131 gerekti\u011fini hat\u0131rlayarak ba\u015flayal\u0131m.","048a9864":"# 0 matrisi olu\u015fturmak : np.zeros()\n\n**np.zeros() \u2192Bu fonksiyon belirtilen sat\u0131r ve s\u00fctuna sahip 0'lardan olu\u015fan bir matris d\u00f6nd\u00fcr\u00fcr.**","4035a493":"# Matrislerde aritmetik i\u015flemler\n\nMatrislerden hat\u0131rlayaca\u011f\u0131m\u0131z \u00fczere toplama, \u00e7\u0131karma vb. i\u015flemler yapabilmek i\u00e7in i\u015flem yap\u0131lacak matrislerin sat\u0131r ve s\u00fctun say\u0131lar\u0131n\u0131n e\u015fit olmas\u0131 gerekiyordu.\n\n\n\n","a7871f80":"# # Numpy ile Matematiksel \u0130\u015flemler\n\n# sum(toplam), max ve min de\u011ferlerini hesaplamak\n","2ae662ce":"# np.full() kullan\u0131m\u0131\n\n**np.full() metodu ba\u015fl\u0131ca 2 parametre al\u0131r. \u0130lki istenilen dizinin boyutu, ikincisi ise dizinin hangi say\u0131dan olu\u015faca\u011f\u0131. Yukar\u0131daki \u00f6rnekte olu\u015fturdu\u011fumuz (2,3)\u2019l\u00fck bir matrisin sadece 8 de\u011ferini i\u00e7ermesini istedik ve np.full() metotu bunu bizim i\u00e7in yapt\u0131.**","5d022fbe":"# Matrisleri birle\u015ftirmek"}}