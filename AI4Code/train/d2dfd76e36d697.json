{"cell_type":{"fe417330":"code","e9b17039":"code","a496bd27":"code","ca78dbb1":"code","4ab30f54":"code","4b02bcf0":"code","36397dca":"code","6016712c":"code","5fbbe725":"code","c6aa805f":"code","df9df52a":"code","4a831f39":"code","03358aae":"code","8309928c":"code","4f89e2a6":"code","b6625323":"code","c6467a2a":"code","58fef8b1":"code","24f9ee3d":"code","55300641":"code","3412a45f":"code","434b9bdb":"code","6c5d141e":"code","aa97176b":"code","708170f9":"code","b777236b":"code","371b2e0d":"code","ca59a892":"code","14cd3c64":"code","4a40767d":"code","65fef2ba":"code","09875311":"code","a362dfd5":"code","fe042533":"code","ef8862c2":"code","36e496ee":"code","9dbe3361":"code","e63ea280":"code","d25ac8d2":"code","7e8f28ce":"code","1578bd93":"code","a26745e4":"code","f1cf4355":"code","4bf82f37":"code","1f50ffe6":"code","42116ac9":"code","217748e2":"code","79b497fb":"code","e6a50984":"code","7b627be1":"code","c9d7cd36":"code","de70f423":"code","0ef87994":"code","8afa22d2":"code","4e4463e5":"code","f3357adc":"code","0073a378":"code","e3b7a8f8":"code","1592e86e":"code","7275f1ab":"code","b9188aea":"code","1ae30662":"code","f392bab5":"code","707f9357":"code","f9516c5f":"code","847afc75":"code","bbc4bead":"code","a2d7a289":"code","a9a23bca":"code","27d7370d":"code","4bfd0220":"code","efc82217":"markdown","fbdd9c72":"markdown","b4143dce":"markdown","747da9a6":"markdown","6f217adc":"markdown","5d107f11":"markdown","25528535":"markdown","57815077":"markdown","cd9f7231":"markdown","f11ed301":"markdown","04de22e3":"markdown","daa12a1c":"markdown","d89ea193":"markdown","f8cfc154":"markdown","573250b1":"markdown","6994e5ec":"markdown","f8308ffa":"markdown","61c24727":"markdown","d030a93a":"markdown","0c60ed05":"markdown","9f029d70":"markdown","f83af59f":"markdown","c04a4c16":"markdown","07e8e12e":"markdown","2ef7c558":"markdown","b242ac50":"markdown","74d2f1ad":"markdown","24b31cfb":"markdown","049a378b":"markdown","ed31472a":"markdown","5e952ed4":"markdown","a32dd58c":"markdown","d8dc226f":"markdown","722875a6":"markdown","9973a01d":"markdown","d77f84f3":"markdown","34d57ccf":"markdown","c1500cbf":"markdown","0fc566ed":"markdown","f2e219c7":"markdown","47331eb6":"markdown"},"source":{"fe417330":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9b17039":"# import liberaries\nimport pandas as pd\nimport numpy as np  \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","a496bd27":"df_train= pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv')","ca78dbb1":"df_train.head()","4ab30f54":"df_train.info()","4b02bcf0":"df_train.describe()","36397dca":"print(df_train.columns.values)\n","6016712c":"sns.set()\ncols = ['enrollee_id','city_development_index','training_hours','target']\nsns.pairplot(df_train[cols], size = 3)\nplt.show();","5fbbe725":"print('Number of Missing Values: ' + str(sum(df_train['target'].isnull())))\n","c6aa805f":"ds = df_train['target'].value_counts().reset_index()\nds.columns = ['target', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"target\", \n    title='target Pie chart', \n)\n\nfig.show()","df9df52a":"print('Number of cities: ' + str(df_train['city'].nunique()))","4a831f39":"print('Number of Missing Values: ' + str(sum(df_train['city'].isnull())))\n","03358aae":" print((df_train['city'].value_counts()))","8309928c":"print('Number of Missing Values: ' + str(sum(df_train['city_development_index'].isnull())))\n","4f89e2a6":"cd = df_train['city_development_index'].value_counts().reset_index()\ncd.columns = ['city_development_index', 'count']\ncd['city_development_index'] = cd['city_development_index'].astype(str) + '-'\ncd = cd.sort_values(['count']).tail(50)\n\nfig = px.bar(\n    cd, \n    y='count', \n    x='city_development_index', \n    orientation='v', \n    title='Count of City development index', \n    width=1000,\n    height=900 \n)\n\nfig.show()","b6625323":"print('Number of Missing Values: ' + str(sum(df_train['gender'].isnull())))\n","c6467a2a":"ds = df_train['gender'].value_counts().reset_index()\nds.columns = ['gender', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"gender\", \n    title='gender Pie chart', \n)\n\nfig.show()","58fef8b1":"print('Number of Missing Values: ' + str(sum(df_train['relevent_experience'].isnull())))","24f9ee3d":"ds = df_train['relevent_experience'].value_counts().reset_index()\nds.columns = ['relevent_experience', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"relevent_experience\", \n    title='relevent_experience Pie chart', \n)\n\nfig.show()","55300641":"print('Number of Missing Values: ' + str(sum(df_train['enrolled_university'].isnull())))","3412a45f":"ds = df_train['enrolled_university'].value_counts().reset_index()\nds.columns = ['enrolled_university', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"enrolled_university\", \n    title='enrolled_university Pie chart', \n)\n\nfig.show()","434b9bdb":"print('Number of Missing Values: ' + str(sum(df_train['education_level'].isnull())))","6c5d141e":"ds = df_train['education_level'].value_counts().reset_index()\nds.columns = ['education_level', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"education_level\", \n    title='education_level Pie chart', \n)\n\nfig.show()","aa97176b":"print('Number of Missing Values: ' + str(sum(df_train['major_discipline'].isnull())))","708170f9":"ds = df_train['major_discipline'].value_counts().reset_index()\nds.columns = ['major_discipline', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"major_discipline\", \n    title='major_discipline Pie chart', \n)\n\nfig.show()","b777236b":"print('Number of Missing Values: ' + str(sum(df_train['experience'].isnull())))","371b2e0d":"ds = df_train['experience'].value_counts().reset_index()\nds.columns = ['experience', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"experience\", \n    title='experience Pie chart', \n)\n\nfig.show()","ca59a892":"print('Number of Missing Values: ' + str(sum(df_train['company_size'].isnull())))","14cd3c64":"ds = df_train['company_size'].value_counts().reset_index()\nds.columns = ['company_size', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"company_size\", \n    title='company_size Pie chart', \n)\n\nfig.show()","4a40767d":"print('Number of Missing Values: ' + str(sum(df_train['company_type'].isnull())))","65fef2ba":"ds = df_train['company_type'].value_counts().reset_index()\nds.columns = ['company_type', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"company_type\", \n    title='company_type Pie chart', \n)\n\nfig.show()","09875311":"print('Number of Missing Values: ' + str(sum(df_train['last_new_job'].isnull())))","a362dfd5":"ds = df_train['last_new_job'].value_counts().reset_index()\nds.columns = ['last_new_job', 'count']\n\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"last_new_job\", \n    title='last_new_job Pie chart', \n)\n\nfig.show()","fe042533":"print('Number of Missing Values: ' + str(sum(df_train['training_hours'].isnull())))","ef8862c2":"fig = go.Figure()\nfig.add_trace(go.Histogram(\n    x = df_train['training_hours'],\n    xbins=dict(\n        start=1,\n        end=336,\n        size=5\n    ),\n    marker_color='Blue',\n    opacity=1\n))\n\nfig.update_layout(\n    title_text='training_hours Distribution',\n    xaxis_title_text='training_hours',\n    yaxis_title_text='COUNT', \n    bargap=.05,\n\n)\n\nfig.show()","36e496ee":"sns.FacetGrid(df_train,hue='target',height=8).map(sns.distplot,'training_hours').set_axis_labels('training_hours',\n'target').add_legend()\nplt.show()","9dbe3361":"# Dictionaries of ordinal features\n\ngender_ctg = {\n        'Female': 2,\n        'Male': 1,\n        'Other': 0\n         }\n\nrelevent_experience_ctg = {\n    'Has relevent experience':  1,\n    'No relevent experience':    0\n}\n\nenrolled_university_ctg = {\n    'no_enrollment'   :  0,\n    'Full time course':    1, \n    'Part time course':    2 \n}\n    \neducation_level_ctg = {\n    'Primary School' :    0,\n    'Graduate'       :    2,\n    'Masters'        :    3, \n    'High School'    :    1, \n    'Phd'            :    4\n    } \n    \nmajor_ctg ={ \n    'STEM'                   :    0,\n    'Business Degree'        :    1, \n    'Arts'                   :    2, \n    'Humanities'             :    3, \n    'No Major'               :    4, \n    'Other'                  :    5 \n}\n    \nexperience_ctg = {\n    '<1'      :    0,\n    '1'       :    1, \n    '2'       :    2, \n    '3'       :    3, \n    '4'       :    4, \n    '5'       :    5,\n    '6'       :    6,\n    '7'       :    7,\n    '8'       :    8, \n    '9'       :    9, \n    '10'      :    10, \n    '11'      :    11,\n    '12'      :    12,\n    '13'      :    13, \n    '14'      :    14, \n    '15'      :    15, \n    '16'      :    16,\n    '17'      :    17,\n    '18'      :    18,\n    '19'      :    19, \n    '20'      :    20, \n    '>20'     :    21\n} \n    \ncompany_type_ctg = {\n    'Pvt Ltd'               :    0,\n    'Funded Startup'        :    1, \n    'Early Stage Startup'   :    2, \n    'Other'                 :    3, \n    'Public Sector'         :    4, \n    'NGO'                   :    5\n}\n\ncompany_size_ctg = {\n    '<10'          :    0,\n    '10\/49'        :    1, \n    '100-500'      :    2, \n    '1000-4999'    :    3, \n    '10000+'       :    4, \n    '50-99'        :    5, \n    '500-999'      :    6, \n    '5000-9999'    :    7\n}\n    \nlast_new_job_ctg = {\n    'never'        :    0,\n    '1'            :    1, \n    '2'            :    2, \n    '3'            :    3, \n    '4'            :    4, \n    '>4'           :    5\n}\n","e63ea280":"# Transforming Categorical features into numarical features\n\ndf_train.loc[:,'education_level'] = df_train['education_level'].map(education_level_ctg)\ndf_train.loc[:,'company_size'] = df_train['company_size'].map(company_size_ctg)\ndf_train.loc[:,'company_type'] = df_train['company_type'].map(company_type_ctg)\ndf_train.loc[:,'last_new_job'] = df_train['last_new_job'].map(last_new_job_ctg)\ndf_train.loc[:,'major_discipline'] = df_train['major_discipline'].map(major_ctg)\ndf_train.loc[:,'enrolled_university'] = df_train['enrolled_university'].map(enrolled_university_ctg)\ndf_train.loc[:,'relevent_experience'] = df_train['relevent_experience'].map(relevent_experience_ctg)\ndf_train.loc[:,'gender'] = df_train['gender'].map(gender_ctg)\ndf_train.loc[:,'experience'] = df_train['experience'].map(experience_ctg)\n","d25ac8d2":"# initialize LabelEncoder\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\n# dealing with City features\ndf_train.loc[:,'city'] = label_encoder.fit_transform(df_train.loc[:,'city']) \n","7e8f28ce":"df_train","1578bd93":"df_train.isnull()","a26745e4":"df_train.isnull().sum()","f1cf4355":"df_train['gender'] = df_train['gender'].fillna((df_train['gender'].median()))\ndf_train['enrolled_university'] = df_train['enrolled_university'].fillna((df_train['enrolled_university'].median()))\ndf_train['education_level'] = df_train['education_level'].fillna((df_train['education_level'].median()))\ndf_train['major_discipline'] = df_train['major_discipline'].fillna((df_train['major_discipline'].median()))\ndf_train['company_size'] = df_train['company_size'].fillna((df_train['company_size'].median()))\ndf_train['company_type'] = df_train['company_type'].fillna((df_train['company_type'].median()))\ndf_train['last_new_job'] = df_train['last_new_job'].fillna((df_train['last_new_job'].median()))\ndf_train['experience'] = df_train['experience'].fillna((df_train['experience'].median()))\n\n","4bf82f37":"df_train.isnull().sum()","1f50ffe6":"df_train.head(20)","42116ac9":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=.8, annot=True);","217748e2":"#Select feature column names and target variable we are going to use for training\n\nfeatures =[\"enrollee_id\",\"city\",\"city_development_index\",\"gender\",\n           \"relevent_experience\",\"enrolled_university\",\"education_level\",\n           \"major_discipline\",\"experience\",\"company_size\",\"company_type\",\n           \"last_new_job\",\"training_hours\"]\ntarget = 'target'","79b497fb":"#This is input which our classifier will use as an input.\ndf_train[features].head(10)","e6a50984":"#Display first 10 target variables\ndf_train[target].head(100).values","7b627be1":"df_test= pd.read_csv('..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv')","c9d7cd36":"df_test","de70f423":"gender_ctg = {\n        'Female': 2,\n        'Male': 1,\n        'Other': 0\n         }\n\nrelevent_experience_ctg = {\n    'Has relevent experience':  1,\n    'No relevent experience':    0\n}\n\nenrolled_university_ctg = {\n    'no_enrollment'   :  0,\n    'Full time course':    1, \n    'Part time course':    2 \n}\n    \neducation_level_ctg = {\n    'Primary School' :    0,\n    'Graduate'       :    2,\n    'Masters'        :    3, \n    'High School'    :    1, \n    'Phd'            :    4\n    } \n    \nmajor_ctg ={ \n    'STEM'                   :    0,\n    'Business Degree'        :    1, \n    'Arts'                   :    2, \n    'Humanities'             :    3, \n    'No Major'               :    4, \n    'Other'                  :    5 \n}\n    \nexperience_ctg = {\n    '<1'      :    0,\n    '1'       :    1, \n    '2'       :    2, \n    '3'       :    3, \n    '4'       :    4, \n    '5'       :    5,\n    '6'       :    6,\n    '7'       :    7,\n    '8'       :    8, \n    '9'       :    9, \n    '10'      :    10, \n    '11'      :    11,\n    '12'      :    12,\n    '13'      :    13, \n    '14'      :    14, \n    '15'      :    15, \n    '16'      :    16,\n    '17'      :    17,\n    '18'      :    18,\n    '19'      :    19, \n    '20'      :    20, \n    '>20'     :    21\n} \n    \ncompany_type_ctg = {\n    'Pvt Ltd'               :    0,\n    'Funded Startup'        :    1, \n    'Early Stage Startup'   :    2, \n    'Other'                 :    3, \n    'Public Sector'         :    4, \n    'NGO'                   :    5\n}\n\ncompany_size_ctg = {\n    '<10'          :    0,\n    '10\/49'        :    1, \n    '100-500'      :    2, \n    '1000-4999'    :    3, \n    '10000+'       :    4, \n    '50-99'        :    5, \n    '500-999'      :    6, \n    '5000-9999'    :    7\n}\n    \nlast_new_job_ctg = {\n    'never'        :    0,\n    '1'            :    1, \n    '2'            :    2, \n    '3'            :    3, \n    '4'            :    4, \n    '>4'           :    5\n}\n","0ef87994":"# Transforming Categorical features into numarical features\n\ndf_test.loc[:,'education_level'] = df_test['education_level'].map(education_level_ctg)\ndf_test.loc[:,'company_size'] = df_test['company_size'].map(company_size_ctg)\ndf_test.loc[:,'company_type'] = df_test['company_type'].map(company_type_ctg)\ndf_test.loc[:,'last_new_job'] = df_test['last_new_job'].map(last_new_job_ctg)\ndf_test.loc[:,'major_discipline'] = df_test['major_discipline'].map(major_ctg)\ndf_test.loc[:,'enrolled_university'] = df_test['enrolled_university'].map(enrolled_university_ctg)\ndf_test.loc[:,'relevent_experience'] = df_test['relevent_experience'].map(relevent_experience_ctg)\ndf_test.loc[:,'gender'] = df_test['gender'].map(gender_ctg)\ndf_test.loc[:,'experience'] = df_test['experience'].map(experience_ctg)","8afa22d2":"# initialize LabelEncoder\n# dealing with City features\ndf_test.loc[:,'city'] = label_encoder.fit_transform(df_test.loc[:,'city']) ","4e4463e5":"df_test","f3357adc":"df_test.isnull()","0073a378":"df_test.isnull().sum()","e3b7a8f8":"df_test['gender'] = df_test['gender'].fillna(df_test['gender'].mode()[0])\ndf_test['enrolled_university'] = df_test['enrolled_university'].fillna(df_test['enrolled_university'].mode()[0])\ndf_test['education_level'] = df_test['education_level'].fillna(df_test['education_level'].mode()[0])\ndf_test['major_discipline'] = df_test['major_discipline'].fillna(df_test['major_discipline'].mode()[0])\ndf_test['company_size'] = df_test['company_size'].fillna(df_test['company_size'].mode()[0])\ndf_test['company_type'] = df_test['company_type'].fillna(df_test['company_type'].mode()[0])\ndf_test['last_new_job'] = df_test['last_new_job'].fillna(df_test['last_new_job'].mode()[0])\ndf_test['experience'] = df_test['experience'].fillna(df_test['experience'].mode()[0])","1592e86e":"df_test.isnull().sum()","7275f1ab":"df_test","b9188aea":"# Splitting the dataset into training set and test set\nfrom sklearn.model_selection import train_test_split\nY = df_train['target']\nX = df_train.drop(columns=['target'])\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.10,random_state=42)","1ae30662":"\n# build the model\nfrom catboost import CatBoostRegressor, Pool\nmodel = CatBoostRegressor(objective='RMSE')\n\n# We train model\nmodel.fit(X_train, Y_train)","f392bab5":"#Applying the K-Fold Cross Validation for CatBoostRegressor\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\naccuracies = cross_val_score(estimator = model, X = X_train, y = Y_train, cv = 7)\nprint(\"Accuracy:{:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation:{:.2f} %\".format(accuracies.std()*100))","707f9357":"#Make predictions using the features from the test data set\npred = model.predict(df_test[features])\npred","f9516c5f":"# We predict target values (Split 15% from training data)\nY_pred = model.predict(X_test)\nY_pred","847afc75":"# We predict target values (GridSearchCV)\nY_pred1 = best_param.predict(X_test)\nY_pred1","bbc4bead":"from sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(df_train[target],  model.predict(df_train[features]))\nmetrics.auc(fpr, tpr)","a2d7a289":"#Test (Split 15% from training data)\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(Y_test, Y_pred)\nmetrics.auc(fpr, tpr)","a9a23bca":"#Test (Split 15% from training data)GridSearchCV \nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(Y_test, Y_pred1)\nmetrics.auc(fpr, tpr)","27d7370d":"#Create a  DataFrame\nsubmission = pd.DataFrame({'enrollee_id':df_test['enrollee_id'],'target':pred})\n                        \n\n#Visualize the first 10 rows\nsubmission.head(10)","4bfd0220":"#Convert DataFrame to a csv file that can be uploaded\n#This is saved in the same directory as your notebook\nfilename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","efc82217":"#### *0 \u2013 Not looking for job change\n#### *1 \u2013 Looking for a job change","fbdd9c72":"### Experience","b4143dce":"## education_level","747da9a6":"# Dealing With Missing Values","6f217adc":"## Feature selection","5d107f11":"# Data Preprocessing","25528535":"## major_discipline","57815077":"#### Now we are ready to build a model\n","cd9f7231":"### Gender","f11ed301":"## Dealing With Categorical Data","04de22e3":"# Testing Data","daa12a1c":"### Heat Map Correlation","d89ea193":"## Data Visualization","f8cfc154":"## About Data","573250b1":"## target ","6994e5ec":"### Let's start with the output feature\n","f8308ffa":"# Training Data","61c24727":" ####  ***Imputation Using (Mean\/Median\/Mode) Values :*** This works by calculating the mean\/median of the non-missing values in a column and then replacing the missing values within each column separately and independently from the others. It can only be used with numeric data.\n","d030a93a":"### city_development_index\n","0c60ed05":"# Please upvote for my kernal if you like it\n","9f029d70":"## training_hours","f83af59f":"> ### Categorical data is simply information aggregated into groups rather than being in numeric formats, such as Gender,relevent_experience,education_level,major_descipline....etc,They are present in almost all real-life datasets, yet the current algorithms still struggle to deal with them. such as LabelEncoder\n","c04a4c16":"### import liberaries","07e8e12e":"#### Get ready for what you're about to see. I must confess that the first time I saw these scatter plots I was totally blown away! So much information in so short space... It's just amazing","2ef7c558":"# Let's Go","b242ac50":"### Visualize data for each component separately","74d2f1ad":"## company_type","24b31cfb":"## enrolled_university","049a378b":"# Features \n1. enrollee_id : Unique ID for candidate\n2. city: City code\n3. citydevelopmentindex: Developement index of the city (scaled)\n4. gender: Gender of enrolee\n5. relevent_experience: Relevent experience of enrolee\n6. enrolled_university: Type of University course enrolled if any\n7. education_level: Education level of enrolee\n8. major_discipline :Education major discipline of enrolee\n9. experience: Enrolee total experience in years\n10. company_size: No of employees in current employer's company\n11. company_type : Type of current employer\n12. lastnewjob: Difference in years between previous job and current job\n13. training_hours: training hours completed\n14. target: 0 \u2013 Not looking for job change, 1 \u2013 Looking for a job change","ed31472a":"## import Tools","5e952ed4":"> # Thank you. I hope that I have succeeded in doing something good that befits your insights and comments","a32dd58c":"## Check Missing Values","d8dc226f":"# Build Models","722875a6":"### City","9973a01d":"## last_new_job","d77f84f3":"## import Dataset","34d57ccf":"### Categorical Data","c1500cbf":"## About Data","0fc566ed":"## company_size","f2e219c7":"## Data Preprocessing For Test Data","47331eb6":"## relevent_experience"}}