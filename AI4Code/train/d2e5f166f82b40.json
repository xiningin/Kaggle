{"cell_type":{"45c154b0":"code","594b8af0":"code","1fddfc23":"code","ff76b494":"code","ba53ade2":"code","3e48bc13":"code","643bc154":"code","b2748db3":"code","ab8b6bfe":"code","c1398bfa":"code","b33be9bd":"code","46b821e3":"code","c0788975":"code","169ab2fc":"code","d30e22d8":"code","d826425c":"code","37e940d9":"code","39d4e162":"code","de4c83d6":"code","5a029d86":"code","a1f7a682":"code","ef76d860":"code","d34c9ef9":"markdown","8138104e":"markdown","f9a24459":"markdown","bc8b5d4b":"markdown","358e4ee1":"markdown","048709e3":"markdown","aa7575e6":"markdown","b48b4dbf":"markdown","1b1f4589":"markdown","53afc469":"markdown","4ab433ba":"markdown","4089d5f5":"markdown","e0b82f5a":"markdown","8b662b33":"markdown","3c5696fa":"markdown","0284cd80":"markdown","02eecb03":"markdown","44893107":"markdown","5a0d12b6":"markdown"},"source":{"45c154b0":"import pandas as pd\nimport numpy as np\n\npd.options.display.max_columns = None\n\ndf_sub = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WSampleSubmissionStage2.csv',sep=',',header=0,index_col=None)\ndf_T = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WNCAATourneyDetailedResults.csv',sep=',',header=0,index_col=None)\ndf_R = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WRegularSeasonDetailedResults.csv',sep=',',header=0,index_col=None)\ndf_seed = pd.read_csv('..\/input\/ncaaw-march-mania-2021\/WDataFiles_Stage2\/WNCAATourneySeeds.csv',sep=',',header=0,index_col=None)","594b8af0":"# regular season stats\ndf_R.head()","1fddfc23":"# tournament stats\ndf_T.head()","ff76b494":"# seed data\ndf_seed.head()","ba53ade2":"#submission format\ndf_sub.head()","3e48bc13":"# seed\ndf_seed.Seed = df_seed.Seed.apply(lambda x: int(x[1:3]))\ndf_seed.head()","643bc154":"# select basic features: one game can generate two rows of features by reversing team1 and team2\nr1 = df_R[[\"Season\", \"DayNum\", \"WTeamID\", \"WScore\", \"LTeamID\", \"LScore\", \"WFGM\",\"WFGA\", 'WFGM3', 'WFGA3','WFTM', 'WFTA','WOR', 'WDR', \"WAst\",'WTO',     \"LFGM\", \"LFGA\", 'LFGM3', 'LFGA3','LFTM', 'LFTA','LOR', 'LDR',\"LAst\",'LTO']]\nr2 = df_R[[\"Season\", \"DayNum\", \"LTeamID\", \"LScore\", \"WTeamID\", \"WScore\", \"LFGM\",\"LFGA\", 'LFGM3', 'LFGA3','LFTM', 'LFTA','LOR', 'LDR', \"LAst\",'LTO',     \"WFGM\", \"WFGA\", 'WFGM3', 'WFGA3','WFTM', 'WFTA','WOR', 'WDR',\"WAst\",'WTO']]\n# rename features\nr1.columns=[\"Season\", \"DayNum\", \"T1\", \"T1_Points\", \"T2\", \"T2_Points\", \"T1_fgm\",\"T1_fga\", \"T1_fgm3\",\"T1_fga3\",\"T1_ftm\", \"T1_fta\",\"T1_or\",\"T1_dr\", \"T1_ast\",\"T1_to\",   \"T2_fgm\", \"T2_fga\", \"T2_fgm3\",\"T2_fga3\",\"T2_ftm\", \"T2_fta\",\"T2_or\",\"T2_dr\", \"T2_ast\",\"T2_to\"]\nr2.columns=[\"Season\", \"DayNum\", \"T1\", \"T1_Points\", \"T2\", \"T2_Points\", \"T1_fgm\",\"T1_fga\", \"T1_fgm3\",\"T1_fga3\",\"T1_ftm\", \"T1_fta\",\"T1_or\",\"T1_dr\", \"T1_ast\",\"T1_to\",   \"T2_fgm\", \"T2_fga\", \"T2_fgm3\",\"T2_fga3\",\"T2_ftm\", \"T2_fta\",\"T2_or\",\"T2_dr\", \"T2_ast\",\"T2_to\"]\n# merge 2 tables\ndf_regular = pd.concat([r1,r2])\ndf_regular.head()","b2748db3":"# true shooting percentage\ndf_regular['T1_ts'] = df_regular['T1_Points']\/(2*(df_regular['T1_fga']+0.475*df_regular['T1_fta']))\ndf_regular['T2_ts'] = df_regular['T2_Points']\/(2*(df_regular['T2_fga']+0.475*df_regular['T2_fta']))\n\n# winning of last 14 days before tournament\ndf_regular['last14'] = df_regular['DayNum'].apply(lambda x: 1 if x>118 else 0)\ndf_regular['Wlast14'] = np.where(df_regular['last14'] & (df_regular['T1_Points']>df_regular['T2_Points']), 1, 0) \n\n# point difference\ndf_regular['Pdiff'] = df_regular['T1_Points'] - df_regular['T2_Points']\n\ndf_regular.head()","ab8b6bfe":"# T1 target team, T2 opponent team\n# introducing points std to represent stability\ngroup = df_regular.groupby(['Season','T1'])\ndf_features = group.agg({'T1_Points':['mean','std'],'T2_Points':['mean','std'],'T1_or':'mean','T1_dr':'mean','T1_ast':'mean','T1_to':'mean','T1_ts':'mean',\n           'T2_or':'mean','T2_dr':'mean','T2_ast':'mean','T2_to':'mean','T2_ts':'mean','Pdiff':'mean',\n          'last14':'sum','Wlast14':'sum'}) \n\n# win rate of last 14 days before tournament\ndf_features['14winrate'] = df_features['Wlast14']\/df_features['last14']\ndf_features.head()","c1398bfa":"#rename\ndf_features.columns = ['T1_Points', 'T1_PointsStd', 'T2_Points', 'T2_PointsStd', 'T1_or', 'T1_dr', 'T1_ast', 'T1_to', 'T1_ts',\n       'T2_or', 'T2_dr', 'T2_ast', 'T2_to', 'T2_ts', 'Pdiff', 'last14',\n       'Wlast14', '14winrate']\ndf_features.drop(['last14','Wlast14'], axis=1,inplace = True)\ndf_features","b33be9bd":"# two candidate tables of regular seaon for merging, T1 and T2\ndf_train1 = df_features.copy()\ndf_train2 = df_features.copy()\ndf_train1.columns=['T1_Points','T1_Pstd', 'T1op_Points','T1op_Pstd', 'T1_or', 'T1_dr', 'T1_ast', 'T1_to', 'T1_ts',\n       'T1op_or', 'T1op_dr', 'T1op_ast', 'T1op_to', 'T1op_ts', 'T1_Pdiff', 'T1_14winrate']\ndf_train2.columns=['T2_Points','T2_Pstd', 'T2op_Points','T2op_Pstd', 'T2_or', 'T2_dr', 'T2_ast', 'T2_to', 'T2_ts',\n       'T2op_or', 'T2op_dr', 'T2op_ast', 'T2op_to', 'T2op_ts', 'T2_Pdiff', 'T2_14winrate']","46b821e3":"# preprocess tournament table\nt1 = df_T[[\"Season\", \"DayNum\", \"WTeamID\", \"LTeamID\", \"WScore\", \"LScore\"]]\nt2 = df_T[[\"Season\", \"DayNum\", \"LTeamID\", \"WTeamID\", \"LScore\", \"WScore\"]]\n# t1['ResultDiff'] = t1[\"WScore\"]-t1[\"LScore\"]\n# t2['ResultDiff'] = t2[\"LScore\"]-t2[\"WScore\"]\n\nt1.columns=[\"Season\", \"DayNum\", \"T1\", \"T2\", \"T1_Points\", \"T2_Points\"]\nt2.columns=[\"Season\", \"DayNum\", \"T1\", \"T2\", \"T1_Points\", \"T2_Points\"]\n\ndf_tourney = pd.concat([t1,t2])\ndf_tourney","c0788975":"# merging seed \ndf_seed1 = pd.merge(df_tourney, df_seed, how='left', left_on=['Season','T1'], right_on = ['Season','TeamID'])\ndf_seed1.rename(columns={'Seed':'Seed1'}, inplace =True)\ndf_seed1.drop('TeamID',axis=1, inplace =True)\n\ndf_seed2 = pd.merge(df_seed1, df_seed, how='left', left_on=['Season','T2'], right_on = ['Season','TeamID'])\ndf_seed2.rename(columns={'Seed':'Seed2'}, inplace =True)\ndf_seed2.drop('TeamID',axis=1, inplace =True)\n\ndf_seed2['Seed_diff']=df_seed2['Seed1'] - df_seed2['Seed2']","169ab2fc":"# merging all\ndf_final = pd.merge(df_seed2, df_train1, how='left', left_on=['Season','T1'], right_on = ['Season','T1'])\ndf_final = pd.merge(df_final, df_train2, how='left', left_on=['Season','T2'], right_on = ['Season','T1'])\ndf_final['Label'] = (df_final['T1_Points_x']-df_final['T2_Points_x']).apply(lambda x:1 if x >0 else 0)\ndf_final.head()","d30e22d8":"import numpy as np\nimport pandas as pd\nimport pickle\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error","d826425c":"# train & test set split\nX = df_final.drop(['T1_Points_x','T2_Points_x','Season','DayNum','T1','T2','Label'], axis=1)\ny = df_final['Label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)","37e940d9":"# Gridsearch for best hyper parameter\nmodel_lgb = lgb.LGBMClassifier(class_weight='balanced',num_leaves=50,\n                              learning_rate=0.02, n_estimators=100, max_depth=3\n                              ,min_child_samples = 20,min_child_weight = 0.001,\n)\n\nparameters={  'max_depth': range(3,8,2),  'num_leaves':range(50, 170, 30)}\n\nclf  = GridSearchCV(estimator=model_lgb, param_grid=parameters, cv=StratifiedKFold(n_splits=5).split(X_train, y_train), verbose=0, n_jobs=4)\nclf.fit(X_train, y_train)\n\nprint(clf.best_params_)\ny_pred = clf.predict(X_test)\nprint(classification_report(y_test, y_pred))\n","39d4e162":"# save model\n# pickle.dump(clf, open('LGB.weight', 'wb'))\n\n# load model\n# clf = pickle.load(open('LGB.weight', 'rb'))","de4c83d6":"df_sub['Season'] = df_sub['ID'].apply(lambda x: x.split('_')[0])\ndf_sub['Team1'] = df_sub['ID'].apply(lambda x: x.split('_')[1])\ndf_sub['Team2'] = df_sub['ID'].apply(lambda x: x.split('_')[2])\ndf_sub['Season']=df_sub['Season'].astype('int64')\ndf_sub['Team1']=df_sub['Team1'].astype('int64')\ndf_sub['Team2']=df_sub['Team2'].astype('int64')\ndf_sub","5a029d86":"# get full features for prediction\ndf_sub1 = pd.merge(df_sub, df_seed, how='left', left_on=['Season','Team1'], right_on = ['Season','TeamID'])\ndf_sub1.rename(columns={'Seed':'Seed1'}, inplace =True)\ndf_sub1.drop('TeamID',axis=1, inplace =True)\n\ndf_sub2 = pd.merge(df_sub1, df_seed, how='left', left_on=['Season','Team2'], right_on = ['Season','TeamID'])\ndf_sub2.rename(columns={'Seed':'Seed2'}, inplace =True)\ndf_sub2.drop('TeamID',axis=1, inplace =True)\n\ndf_sub2['Seed_diff']=df_sub2['Seed1'] - df_sub2['Seed2']\ndf_sub3 = pd.merge(df_sub2, df_train1, how='left', left_on=['Season','Team1'], right_on = ['Season','T1'])\ndf_sub4 = pd.merge(df_sub3, df_train2, how='left', left_on=['Season','Team2'], right_on = ['Season','T1'])\n\ndf_sub4.head()","a1f7a682":"# prediction\npredict_features = df_sub4[df_sub4.columns[5:]].values\ndf_final_sub = df_sub4\ndf_final_sub['Pred'] = clf.predict_proba(predict_features)[:,1]\ndf_final_sub.head()","ef76d860":"# submission file\ndf_final_sub[['ID','Pred']]\ndf_final_sub[['ID','Pred']].set_index('ID').to_csv('submissionW_stage2_LGB.csv')","d34c9ef9":"## Data\n1. Team ID's and Team Names\n2. Tournament seeds since 1997-98 season\n3. Final scores of all regular season, conference tournament, and NCAA\u00ae tournament games since 1997-98 season\n4. **Game-by-game stats at a team level (free throws attempted, defensive rebounds, turnovers, etc.) for all regular season, conference tournament, and NCAA\u00ae tournament games since the 2009-10 season.**\n5. Example submission ","8138104e":"### Data viewing","f9a24459":"#### 6. Final table","bc8b5d4b":"### Feature engineering","358e4ee1":"#### 1. Seed","048709e3":"#### 2. Basic features","aa7575e6":"## Introduction: \n  Competition URL: [March Machine Learning Mania 2021 - NCAAW](https:\/\/www.kaggle.com\/c\/ncaaw-march-mania-2021\/overview)\n","b48b4dbf":"## Evaluation\nSubmissions are scored on the log loss: <p>\nLogLoss = $-\\frac{1}{n}\\sum_{i-1}^n[y_i\\log{(\\hat{y_i})}+(1-y_i)\\log{(1-\\hat{y_i})}]$\n    \nwhere\n\n $n$ is the number of games played <p>\n $\\hat{y_i}$ is the predicted probability of team 1 beating team 2<p>\n ${y_i}$ is 1 if team 1 wins, 0 if team 2 wins<p>\n $\\log$ is the natural logarithm<p>","1b1f4589":"## Task:\nMarch Machine Learning Mania challenges data scientists to predict winners and losers of the women's 2021 NCAA basketball tournament.","53afc469":"Feature engineering: WRegularSeasonDetailedResults.csv & WNCAATourneySeeds.csv <p>\nGround Truth(Labels): WNCAATourneyDetailedResults.csv <p>\nSubmission format: WSampleSubmissionStage2.csv","4ab433ba":"#### 4. Grouping by team and season","4089d5f5":"### Load data","e0b82f5a":"#### Modeling","8b662b33":"~-------------------------------------------------------------------------------------------~\n## Code","3c5696fa":"## Modeling idea:\n**Label:**  Game results of NCAA tournaments (ground truth) <p>\n**Basic Features:**  Average regular season stats grouping by team and year<p>\n**Advanced Features:**  Helpful features for prediction generated from Basic Features<p>\n**Model:**  LightGBM\n    ","0284cd80":"#### 3. Adding advanced features","02eecb03":"#### Submission","44893107":"#### 5. Merging with tournament table","5a0d12b6":"# March Machine Learning Mania 2021 - NCAAW prediction (LightGBM)"}}