{"cell_type":{"a5376482":"code","7dfff1b3":"code","07db6dcc":"code","c309fabf":"code","9885ebb1":"code","7ef937bb":"code","67409e28":"code","eaf63665":"code","97270c84":"code","bdde2bf6":"code","9ea6aa7d":"code","46e83f39":"code","a44ab249":"code","702b5257":"code","33f9c1ea":"code","6bec28d4":"code","b00d2b1b":"code","bf8ac2ee":"code","9a9e9397":"code","3e95a982":"code","524aba52":"code","0ffea620":"code","fdc67a25":"code","041884a7":"code","6810f5a2":"code","b1aea95e":"markdown","ce93a809":"markdown","5a97436c":"markdown","312be945":"markdown","3469ecec":"markdown","8e6a6e22":"markdown","e68ce1c4":"markdown","c4e0675d":"markdown","51df971e":"markdown","37d795c0":"markdown","a3dca838":"markdown","52264651":"markdown","ca7c37c2":"markdown","b6006947":"markdown","1f4d2c4a":"markdown","8afe54ef":"markdown","adf335fd":"markdown","2a0e2ec2":"markdown","8d197a1c":"markdown","de1e2c42":"markdown","01376342":"markdown","bf137787":"markdown","eb40ae11":"markdown","031b2dc0":"markdown","621bc2bf":"markdown","f9374282":"markdown","4792f9ec":"markdown","c9984a3d":"markdown","51ac82e2":"markdown","a0e1b32e":"markdown","52b30f1b":"markdown","bff1ddfc":"markdown","70e343fc":"markdown","e3617108":"markdown","a50d0e2a":"markdown","f87ce59e":"markdown","bf715151":"markdown"},"source":{"a5376482":"import scipy.stats\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\nimport csv, os\nfrom datetime import datetime","7dfff1b3":"cerveza_df_or = pd.read_csv('..\/input\/beer-consumption-sao-paulo\/Consumo_cerveja.csv')\ncerveza_df_or","07db6dcc":"cerveza_df_or.dtypes","c309fabf":"cerveza_df_or.columns","9885ebb1":"def csv_as_dictionary(file):\n    with open(beer_csv, mode=\"r\", encoding='utf-8', newline='') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        header = next(csv_reader)\n        \n        column_data = ''\n        data_date = []\n        av_temp = []\n        min_temp = []\n        max_temp = []\n        precipitation = []\n        was_a_weekend = []\n        beer_consumed = []\n        \n        for row in csv_reader:\n            #No 'problem'\n    \n            if row[0]!= '': data_date.append(datetime.strptime(row[0], '%Y-%m-%d'))\n                \n            if row[5] != '': was_a_weekend.append(bool(int(row[5])))\n            \n            #Comma problem\n            if row[1] != '': av_temp.append(float(row[1].replace(',','.')))\n            if row[2] != '': min_temp.append(float(row[2].replace(',','.')))\n            if row[3] != '': max_temp.append(float(row[3].replace(',','.')))\n            if row[4] != '': precipitation.append(float(row[4].replace(',','.')))\n            \n            #Period Problem\n            if row[6] != '': beer_consumed.append(int(row[6].replace('.','')))\n            \n    csv_file.close()\n\n    dictionary = {\n        'date': data_date,\n        'av_temp': av_temp,\n        'min_temp': min_temp,\n        'max_temp': max_temp,\n        'precipitation': precipitation,\n        'was_a_weekend': was_a_weekend,\n        'beer_consumed': beer_consumed\n    }\n    return dictionary","7ef937bb":"beer_csv = '..\/input\/beer-consumption-sao-paulo\/Consumo_cerveja.csv'\ncerveza_dict = csv_as_dictionary(beer_csv)\ncerveza_df = pd.DataFrame(cerveza_dict)\ncerveza_df","67409e28":"cerveza_df.dtypes","eaf63665":"plt.figure(figsize=(15,3))\nplt.plot('date','max_temp', data=cerveza_df, color='r')\nplt.show\n\nplt.figure(figsize=(15,3))\nplt.plot('date', 'av_temp', data=cerveza_df, color='k')\nplt.show\n\nplt.figure(figsize=(15,3))\nplt.plot('date', 'min_temp', data=cerveza_df, color='b')\nplt.show\n\nplt.figure(figsize=(15,3))\nplt.plot('date', 'precipitation', data=cerveza_df, color='darkblue')\nplt.show\n\nplt.figure(figsize=(15,3))\nplt.plot('date', 'beer_consumed', data=cerveza_df, color='orange')\nplt.show","97270c84":"plt.figure(figsize=(15,3))\nplt.plot('date','max_temp', data=cerveza_df, color='r')\nplt.plot('date', 'av_temp', data=cerveza_df, color='k')\nplt.plot('date', 'min_temp', data=cerveza_df, color='b')\n\nplt.axhline(np.mean(cerveza_df['min_temp']), c='cyan', linestyle='--', label = 'mean min_temp')\nplt.axhline(np.mean(cerveza_df['av_temp']), c='gray', linestyle='--', label = 'mean av_temp')\nplt.axhline(np.mean(cerveza_df['max_temp']), c='m', linestyle='--', label = 'mean max_temp')\n\nplt.legend(loc='best', bbox_to_anchor=(1,1), ncol=1)\n\nplt.show()","bdde2bf6":"fig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(12,3), sharey=True, sharex=True)\nn_bins = 40\n\nax1.hist(cerveza_df['min_temp'], align = 'mid', bins = n_bins)\nax1.set_xlabel('Min Temperatures (C)')\nax1.set_ylabel('Count')\n\nax2.hist(cerveza_df['av_temp'], align = 'mid', color='k', bins = n_bins)\nax2.set_xlabel('Average Temperatures (C)')\n\nax3.hist(cerveza_df['max_temp'], align = 'mid', color='r', bins = n_bins)\nax3.set_xlabel('Max Temperatures (C)')\n\nplt.show()\n\nkwargs = dict(alpha=0.5, bins = 40, density=True, stacked = True)\n\nplt.figure(figsize=(12,6))\n\nx1=cerveza_df['min_temp']\nx2=cerveza_df['av_temp']\nx3=cerveza_df['max_temp']\n\nplt.gca().set(title='Histogram of temperatures (C)', ylabel='Count')\n\nplt.axvline(np.mean(x1), c='darkblue', linestyle='--', label = 'mean min temperature')\nplt.axvline(np.mean(x2), c='gray', linestyle='--', label = 'mean average temperature')\nplt.axvline(np.mean(x3), c='darkred', linestyle='--', label = 'mean max temperature')\n\nsns.distplot(x1, bins=40, color='darkblue')\nsns.distplot(x2, bins=40, color='k')\nsns.distplot(x3, bins=40, color='darkred')\n\nplt.legend()","9ea6aa7d":"x=cerveza_df['beer_consumed']\ny=cerveza_df['av_temp']\nfig = cerveza_df.plot(kind=\"scatter\", x = 'beer_consumed', y = 'av_temp',c = 'orange')\n\nplt.axvline(np.mean(x)-np.std(x), c = 'r', linestyle = ':', label = '-1 desv. std. sells')\nplt.axvline(np.mean(x), c = 'darkgreen', linestyle = '--', label = 'Sells average')\nplt.axvline(np.mean(x)+np.std(x), c = 'g', linestyle = ':', label = '+1 desv. std. sells')\n\nplt.axhline(np.mean(y)-np.std(y), c = 'b', linestyle = ':', label = '-1 desv. std. av_temp')\nplt.axhline(np.mean(y), c = 'darkred', linestyle = '--', label = 'Mean av_temp')\nplt.axhline(np.mean(y)+np.std(y), c = 'r', linestyle = ':', label = '+1 desv. std. av_temp')\n\nplt.legend(loc='best', bbox_to_anchor=(1,1), ncol=2)\n\nplt.show()","46e83f39":"x=cerveza_df['beer_consumed']\ny=cerveza_df['precipitation']\nfig = cerveza_df.plot(kind=\"scatter\", x = 'beer_consumed', y = 'precipitation',c = 'darkblue')\n\nplt.axvline(np.mean(x)-np.std(x), c = 'r', linestyle = (0, (5, 2, 1, 2)), label = '-1 desv. std. sells')\nplt.axvline(np.mean(x), c = 'grey', linestyle = '-', label = 'Sells average')\nplt.axvline(np.mean(x)+np.std(x), c = 'g', linestyle = (0, (5, 2, 1, 2)), label = '+1 desv. std. sells')\n\nplt.axhline(np.mean(y), c = 'y', linestyle = '--',linewidth=3 , label = 'Mean precipitation')\nplt.axhline(np.mean(y)+np.std(y), c = 'b', linestyle = ':', label = '+1 desv. std. precipitation')\n\nplt.legend(loc='best', bbox_to_anchor=(1,1), ncol=2)\n\nplt.show()","a44ab249":"def csv_as_arrays(file):\n    with open(beer_csv, mode=\"r\", encoding='utf-8', newline='') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        header = next(csv_reader)\n        \n        column_data = ''\n        data_date = []\n        av_temp = []\n        min_temp = []\n        max_temp = []\n        precipitation = []\n        was_a_weekend = []\n        beer_consumed = []\n        \n        for row in csv_reader:\n            #No 'problem'\n    \n            if row[0]!= '': data_date.append(datetime.strptime(row[0], '%Y-%m-%d'))\n                \n            if row[5] != '': was_a_weekend.append(bool(int(row[5])))\n            \n            #Comma problem\n            if row[1] != '': av_temp.append(float(row[1].replace(',','.')))\n            if row[2] != '': min_temp.append(float(row[2].replace(',','.')))\n            if row[3] != '': max_temp.append(float(row[3].replace(',','.')))\n            if row[4] != '': precipitation.append(float(row[4].replace(',','.')))\n            \n            #Period Problem\n            if row[6] != '': beer_consumed.append(int(row[6].replace('.','')))\n            \n    csv_file.close()\n\n    return data_date, was_a_weekend, av_temp, min_temp, max_temp, precipitation, beer_consumed","702b5257":"data_date, was_a_weekend, av_temp, min_temp, max_temp, precipitation, beer_consumed = csv_as_arrays(beer_csv)","33f9c1ea":"def ub_match_cases(array_filter, array):\n  ub_match_cases = []\n\n  #Creating Support dictionaries\n  wanted_cases = set(array_filter)\n  \n  for ub in range(len(array)):\n    val = array[ub]\n    if val in wanted_cases: ub_match_cases.append(ub)\n      \n  return ub_match_cases\n\ndef top_condisioned(array, start_value):\n  helper_array = sorted_set(array.copy())\n  helpers_end = len(helper_array) - 1\n  ubication =  binary_search(helper_array, 0, helpers_end, start_value)\n  \n  top_condisioned = []\n  for i in range(ubication, helpers_end):\n    top_condisioned.append(helper_array[i])\n\n  return top_condisioned\n\ndef sorted_set(array):\n  reduced_set = set(array)\n  reduced_array = []\n  for element in reduced_set:\n    reduced_array.append(element)\n  reduced_array = merge_sort(reduced_array)\n\n  return reduced_array\n\ndef binary_search(array, start, end, search_value):\n  if start > end:\n    return end\n  \n  middle = (start + end) \/\/ 2\n\n  if array[middle] == search_value:\n    return middle\n  elif array[middle] < search_value:\n    return binary_search(array, middle + 1, end, search_value)\n  else:\n    return binary_search(array, start, middle - 1, search_value)\n\ndef merge_sort(array):\n  if len(array) > 1:\n    middle = len(array) \/\/ 2\n    left = array[:middle]\n    right = array[middle:]\n\n    merge_sort(left)\n    merge_sort(right)\n    \n    \"\"\"SubArrays Iterators\"\"\"\n    i = 0\n    j = 0\n    \"\"\"MainArray Iterator\"\"\"\n    k = 0\n\n    while i < len(left) and j < len(right):\n      if left[i] < right[j]:\n        array[k] = left[i]\n        i += 1\n      else:\n        array[k] = right[j]\n        j += 1\n      \n      k += 1\n\n    while i < len(left):\n      array[k] = left[i]\n      i += 1\n      k += 1\n\n    while j < len(right):\n      array[k] = right[j]\n      j += 1\n      k += 1\n\n  return array\n\ndef boolean_clasification(array):\n  true_array = []\n  false_array = []\n\n  for i in range(len(array)):\n    if array[i] == True:\n      true_array.append(array[i])\n    else: false_array.append(array[i])\n  \n  return true_array, false_array\n\ndef extract_matches(array_filter, array):\n    match_cases = []\n\n    #Creating Support dictionaries\n    wanted_cases = set(array_filter)\n\n    for ub in range(len(array)):\n        val = array[ub]\n        if val in wanted_cases: match_cases.append(array[ub])\n    return match_cases\n\ndef all_major_cases(array, value):\n    major_cases = []\n\n    for ub in range(len(array)):\n        if array[ub] >= value: major_cases.append(array[ub])\n\n    return major_cases\n\ndef all_minor_cases(array, value):\n    minor_cases = []\n\n    for ub in range(len(array)):\n        if array[ub] <= value: minor_cases.append(array[ub])\n\n    return minor_cases","6bec28d4":"gta_sells = top_condisioned(beer_consumed,np.mean(beer_consumed))\nub_gta_sells = ub_match_cases(gta_sells, beer_consumed)\ngta_av_temp = []\ngta_week_day = []\ngta_precipitation = []\n\nfor i in range(len(ub_gta_sells)):\n  match = ub_gta_sells[i]\n  gta_av_temp.append(av_temp[match])\n  gta_week_day.append(was_a_weekend[match])\n  gta_precipitation.append(precipitation[match])\n\ngta_lens = f'''len of gta_av_temp: {len(gta_av_temp)}\nlen of gta_week_day: {len(gta_week_day)}\nlen of gta_precipitation: {len(gta_precipitation)}'''\n\nprint(gta_lens)","b00d2b1b":"pls_std_best_sells = np.mean(beer_consumed)+np.std(beer_consumed)\nbest_sells_values = top_condisioned(beer_consumed,pls_std_best_sells)\nub_best_sells = ub_match_cases(best_sells_values, beer_consumed)\n\nbest_sells = []\nbest_av_temp = []\nbest_week_day = []\nbest_precipitation = []\n\nfor i in range(len(ub_best_sells)):\n  match = ub_best_sells[i]\n  best_av_temp.append(av_temp[match])\n  best_week_day.append(was_a_weekend[match])\n  best_precipitation.append(precipitation[match])\n  best_sells.append(beer_consumed[match])\n\nbest_sells_lens = f'''best_av_temp: {len(best_av_temp)}\nbest_week_day: {len(best_week_day)}\nbest_precipitation: {len(best_precipitation)}\nbest_sells: {len(best_sells)}'''\n\nprint(best_sells_lens)","bf8ac2ee":"weekend_sells = [0,0]\nweek_sells = [0,0]\n\ngta_weekend_sells, gta_middle_week_sells = boolean_clasification(gta_week_day)\nweekend_sells[0], week_sells[0] = len(gta_weekend_sells), len(gta_middle_week_sells)\n\nbest_weekend_sells, best_middle_week_sells = boolean_clasification(best_week_day)\nweekend_sells[1], week_sells[1] = len(best_weekend_sells), len(best_middle_week_sells)","9a9e9397":"labels = ['Mayor al Promedio', 'Mayor a Promedio + 1Desv. std.']\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots(figsize=(7,5))\nrects1 = ax.bar(x - width\/2, weekend_sells, width, label='Fin de Semana', color = '#43a047')\nrects2 = ax.bar(x + width\/2, week_sells, width, label='Entre semana', color = '#1f618d')\n\nax.set_title('Mejores ventas de Cerveza. Fin de Semana vs Entre semana')\nax.set_ylabel('Veces que las ventas superaron el promedio')\nax.set_xlabel('Promedio y mayor a una desviaci\u00f3n est\u00e1ndar')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend(loc='best')\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 5 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rects1)\nautolabel(rects2)\n\nfig.tight_layout()\n\nplt.show()","3e95a982":"def bool_and_major_matches(bool_array, bool_wanted, numeric_array, start_limit):\n    if len(bool_array) == len(numeric_array):\n        match_cases = []\n\n        #Creating Support dictionaries\n        \n        for ub in range(len(bool_array)):\n            bool_val = bool_array[ub]\n            numeric_val = numeric_array[ub]\n            if bool_val == bool_wanted and numeric_val >= start_limit:\n                match_cases.append(ub)\n            \n        return match_cases\n    else: pass\n\ndef bool_and_minor_matches(bool_array, bool_wanted, numeric_array, end_limit):\n    if len(bool_array) == len(numeric_array):\n        match_cases = []\n\n        #Creating Support dictionaries\n        \n        for ub in range(len(bool_array)):\n            bool_val = bool_array[ub]\n            numeric_val = numeric_array[ub]\n            if bool_val == bool_wanted and numeric_val <= end_limit:\n                match_cases.append(ub)\n            \n        return match_cases\n    else: pass\n\ndef amount_cases_bool_numeric(bool_array, numeric_array , minor_limit, increment):\n    '''Returned data:\n    1) amount_c1 = number of cases that are True and minor_limit + increment\n    1) amount_c2 = number of cases that are True and minor_limit\n    1) amount_c3 = number of cases that are False and minor_limit + increment\n    1) amount_c4 = number of cases that are False and minor_limit'''\n    \n    if len(bool_array)==len(numeric_array):\n        search_value = minor_limit + increment\n        amount_cases = [0,0,0,0]\n\n        amount_cases[0] = len(bool_and_major_matches(bool_array, True, numeric_array, search_value))\n        amount_cases[1] = len(bool_and_minor_matches(bool_array, True, numeric_array, minor_limit))\n        \n        amount_cases[2] = len(bool_and_major_matches(bool_array, False, numeric_array, search_value))\n        amount_cases[3] = len(bool_and_minor_matches(bool_array, False, numeric_array, minor_limit))\n\n        return amount_cases\n    else: pass","524aba52":"taw_best_sells = amount_cases_bool_numeric(best_week_day, best_av_temp, np.mean(av_temp), 0.01)\nhot_bs_days = [0,0]\ncold_bs_days = [0,0]\n\nhot_bs_days[0],hot_bs_days[1] = taw_best_sells[0], taw_best_sells[2]\ncold_bs_days[0],cold_bs_days[1] = taw_best_sells[1], taw_best_sells[3]","0ffea620":"#Making of labels\ntaw_labels = [0,0,0,0]\ntaw_labels[0]= 'Fin de semana caluroso: ' + str(taw_best_sells[0])\ntaw_labels[1]= 'Fin de semana fresco\/fr\u00edo: ' + str(taw_best_sells[1])\ntaw_labels[2]= 'Entre semana, caluroso: ' + str(taw_best_sells[2])\ntaw_labels[3]= 'Entre semana, fresco\/fr\u00edo: ' + str(taw_best_sells[3])\n\n#colors\npie_colors = ['#7b241c', '#2e86c1','#c0392b','#85c1e9']\n\n#Creating plot\nfig, ax = plt.subplots(figsize=(6,6), subplot_kw=dict(aspect=\"equal\"))\n\nwedges, texts = ax.pie(taw_best_sells, wedgeprops=dict(width=.3), startangle=-40, colors=pie_colors)\n\nbbox_props = dict(boxstyle=\"square,pad=1.25\", fc=\"w\", ec=\"k\", lw=1)\nkw = dict(arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    \n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    \n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    \n    ax.annotate(taw_labels[i], xy=(x, y), xytext=(1.2*np.sign(x), 1.1*y),\n                horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Mejores ventas Considerando Temperatura y si era fin de semana\")\n\nplt.show()","fdc67a25":"category = []\n\nfor i in range(len(beer_consumed)):\n    if beer_consumed[i] >= (np.mean(beer_consumed) + np.std(beer_consumed)):\n        #Hot Cases\n        if av_temp[i] >= np.mean(av_temp) and was_a_weekend[i] == True:\n            category.append('Hot Weekend')\n        elif av_temp[i] >= np.mean(av_temp) and was_a_weekend[i] == False:\n            category.append('Hot and Not Weekend')\n\n        #Cold Cases\n        elif av_temp[i] <= np.mean(av_temp) and was_a_weekend[i] == True:\n            category.append('Cold\/Fresh Weekend')\n        elif av_temp[i] <= np.mean(av_temp) and was_a_weekend[i] == False:\n            category.append('Cold\/Fresh and Not Weekend')\n    else:\n        category.append('N\/A')\n\nprint(np.mean(av_temp))\ncerveza_df.insert(7,'category',category)\ncerveza_df.head()","041884a7":"x=cerveza_df['beer_consumed']\ny=cerveza_df['av_temp']\ngroups=cerveza_df.groupby('category')\n#[,N\/A]\nscatter_colors = ['#85c1e9','#2e86c1','#c0392b','#7b241c', 'orange']\nfrom mlxtend.plotting import category_scatter\n\nfig = category_scatter(x = 'beer_consumed', y = 'av_temp', label_col='category',\n                       data=cerveza_df, colors=scatter_colors)\n\nplt.axvline(np.mean(x), c = 'k', linestyle = '--', label = 'Sells average')\nplt.axvline(np.mean(x)+np.std(x), c = 'g', linestyle = ':', label = '+1 desv. std. sells')\n\nplt.axhline(np.mean(y), c = 'r', linestyle = '--', label = 'Mean av_temp')\nplt.axhline(np.mean(y)+np.std(y), c = 'm', linestyle = ':', label = '+1 desv. std. sells')\n\nplt.legend(loc='best', bbox_to_anchor=(1,1), ncol=2)\n\nplt.show()","6810f5a2":"x=cerveza_df['beer_consumed']\ny=cerveza_df['precipitation']\ngroups=cerveza_df.groupby('category')\n#[,N\/A]\nscatter_colors = ['#85c1e9','#2e86c1','#c0392b','#7b241c', 'grey']\nfrom mlxtend.plotting import category_scatter\n\nfig = category_scatter(x = 'beer_consumed', y = 'precipitation', label_col='category',\n                       data=cerveza_df, colors=scatter_colors)\n\nplt.axvline(np.mean(x), c = 'k', linestyle = '--', label = 'Sells average')\nplt.axvline(np.mean(x)+np.std(x), c = 'g', linestyle = ':', label = '+1 desv. std. sells')\n\nplt.legend(loc='best', bbox_to_anchor=(1,1), ncol=2)\n\nplt.show()","b1aea95e":"Dado que poseemos tres ejes temporales, podemos realizar una comparaci\u00f3n de ellos, con el objetivo de reducir nuestros objetos a analizar. Para ello, se juntar\u00e1n los tres gr\u00e1ficos de temperatura, y se le anexaran los promedios de cada uno, para ver si la columna del promedio puede ser considerada como una representante de las otras dos.","ce93a809":"Lo anterior, se hizo para los an\u00e1lisis futuros. A continuaci\u00f3n se muestran los resultados del coteno de las ventas mayores al promedio, as\u00ed como las mejores ventas (mayores al promedio con una desviaci\u00f3n est\u00e1ndar)","5a97436c":"## Pr\u00f3logo","312be945":"### Gr\u00e1fico de Dona con Intersecci\u00f3n de 3 condiciones.","3469ecec":"### Scatters","8e6a6e22":"### Scatter Plot de temperatura considerando categor\u00edas","e68ce1c4":"### Visualizaci\u00f3n de la informaci\u00f3n.","c4e0675d":"Como es posible observar, las mejores ventas del fin de semana sucedieron en los d\u00edas de extremo calor. Cabe resaltar, que conforme aument\u00f3 la temperatura, las ventas entre semana aumentaban considerablemente. Si quieres saber el n\u00famero de cada uno de los grupos, puedes revisar las etiquetas del gr\u00e1fico de la dona ;)","51df971e":"### Scatter Plot de precipitaciones considerando categor\u00edas","37d795c0":"<h1>Beer Stadistics<\/h1>\nUna forma de explicar la aplicaci\u00f3n de conceptos estad\u00edsticos, desarrollo de funciones y uso de gr\u00e1ficas con Python.","a3dca838":"## Conclusiones","52264651":"Funciones implementadas:","ca7c37c2":"Extracci\u00f3n de los valores mayores al promedio y una desviaci\u00f3n est\u00e1ndar.","b6006947":"## Analizando 3 dimensiones en gr\u00e1ficos 2D: Mejores ventas, Fines de semana y calor.","1f4d2c4a":"Ya que se considera la temperatura promedio como representativa de las temperaturas; podemos resolver un problema con el gr\u00e1fico lineal:\nNo se puede correlacionar las ventas con la temperatura al tener una relaci\u00f3n con el tiempo cada una.\nPor ello, consideraremos ahora como el eje 'x' los litros vendidos, mientras que en el eje 'y' puede ser la temperatura promedio o la cantidad de lluvia de esos d\u00edas.","8afe54ef":"Para extraer todos los array necesarios:","adf335fd":"### Gr\u00e1ficos de barras","2a0e2ec2":"Una de las primeras cosas que debemos de realizar es la selecci\u00f3n de la visualizaci\u00f3n de nuestros datos. Dado que son datos con un eje temporal, a continuaci\u00f3n se muestran los gr\u00e1ficos resultantes de todas las variables con respecto al tiempo.","8d197a1c":"Con estos gr\u00e1ficos, es posible apreciar que su tendencia se debe a que las temperaturas m\u00ednimas se encuentran m\u00e1s concentradas que las m\u00e1ximas, sin embargo, las m\u00e1ximas tienen un mayor rango muestral. Por ello, se considerar\u00e1 a la Serie de la temperatura promedio como representativa de las otras dos.","de1e2c42":"Con este gr\u00e1fico podemos conirmar una cosa, es m\u00e1s probable que una buen volumen de venta se haya hecho en un d\u00eda sin lluvia a uno con lluvia.\n\nAhora solo queda una consideraci\u00f3n por contemplar: El fin de semana.\n\nDado que son datos booleanos (Verdadero-Falso), para ello se requeriran del uso de otros gr\u00e1ficos.","01376342":"Remarcando que, dado la visualizaci\u00f3n de los datos en el DataFrame, tienen esta naturaleza y deber\u00e1n de ser los valores obtenidos de la funci\u00f3n al momento de analizar los tipos de las Series en el Data Frame: \n\n<ol>\n<li>Data = fecha<\/li>\n<li>Temperatura Media (C) = flotante<\/li>\n<li>Temperatura Minima (C) = flotante<\/li>\n<li>Temperatura Maxima (C) = flotante<\/li>\n<li>Precipitacao (mm) = flotante<\/li>\n<li>Final de Semana = booleano<\/li>\n<li>Consumo de cerveja (litros) = entero<\/li>\n<\/ol>","bf137787":"Como es posible de observar, existe una ligera tendencia del promedio hacia el fr\u00edo, para entender esto, se analizar\u00e1n los histogramas de frecuencia de las tres Series.","eb40ae11":"Con esto podemos empezar a realizar los an\u00e1lisis correspondientes.","031b2dc0":"Si eres un mercad\u00f3logo que trabaja en Sao Paulo, y buscas aumentar tus vol\u00famenes de venta de cerveza, recuerda que la gente prefiere beber cerveza en:\n<ol>\n<li>d\u00edas calurosos,<\/li>\n<li>fines de semana,<\/li>\n<li>donde no llueva mucho (menos de 20 mm)<\/li>\n<\/ol>\n\nPor lo que deber\u00e1s de considerar esto para tus estrategias de promoci\u00f3n para los meses de invierno; y de log\u00edstica y distribuci\u00f3n para los meses de primavera y verano si no quieres quedarte sin abasto.","621bc2bf":"Si uno quiere realizar una campa\u00f1a de publicidad, debe de considerar ciertas variables aparte de la venta y la regi\u00f3n. En este caso, alguien se di\u00f3 a la tarea de analizar las ventas en Sao Paulo, Brasil, junto con la temperatura m\u00ednima, m\u00e1xima y promedio de esos d\u00edas, agregando la variable de la lluvia. Con ello y los d\u00edas, solo queda una cosa por confirmar: \u00bfse vende m\u00e1s en los fines de semana o en entre semana? Para simplificar esto, gracias al dato de los d\u00edas, el creador de este archivo decidi\u00f3 agregar la columna del fin de semana. Un \"True\" se considera como fin de semanay un \"False\" como lo que \u00e9l considera d\u00eda normal de la semana.\n\nC\u00f3mo buena pr\u00e1ctica, antes de hacer arreglos, verificaremos el estado de la informaci\u00f3n, ya que al ser un archivo csv, de otro pa\u00eds, existe la posibilidad de tener errores en los datos. De igual forma, se inicializan el chunck con las librer\u00edas que se necesitar\u00e1n.","f9374282":"En este gr\u00e1fico, es posible apreciar una clara tendencia hacia arriba (positiva), confirmando una idea que es compartida por muchos amigos y conocidos:\n\nMientras m\u00e1s caliente sea el d\u00eda, m\u00e1s cerveza se consumir\u00e1.\n\nCon esto en mente, podr\u00edamos hacernos la misma pregunta con las lluvias:\n\n\u00bfSe vender\u00e1 m\u00e1s cerveza en un d\u00eda con lluvia?","4792f9ec":"Con esta funci\u00f3n, ya podemos interactuar de forma id\u00f3nea con nuestros datos del DataFrame. Hago la aclaraci\u00f3n de que se manejar\u00e1 como \"cerveza_df\" al objeto, para resaltar que no es un arreglo u objeto de an\u00e1lisis. Conforme avance el ejercicio, esto quedar\u00e1 m\u00e1s claro.","c9984a3d":"Como ex-catedr\u00e1tico y asesor en tiempos libres de materias relacionadas a las matem\u00e1ticas, la frase que m\u00e1s me ha podido molestar entre la gente es \"las matem\u00e1ticas no se usan\". He de reconocer, que este pensamiento se debe a la falta de empat\u00eda que han tenido algunos docentes a la hora de ense\u00f1ar. En lo personal, yo las veo como un juego, como la b\u00fasqueda de un tesoro a trav\u00e9s de pistas, y llegar al resulto me da la misma emoci\u00f3n que haber concluido el nivel de alg\u00fan videojuego.\n\nHace unos a\u00f1os, d\u00ed clases a adultos que quer\u00edan obtener un t\u00edtulo t\u00e9cnico en servicios de perforaci\u00f3n para la industria del petr\u00f3leo. Entre ellos, resaltaba \"Don Nato\", un se\u00f1or de 67 a\u00f1os que acab\u00f3 hasta la secundaria por necesidad de trabajar. Se insert\u00f3 en la industria del petr\u00f3leo, en el \u00e1rea de perforaci\u00f3n y, cuando lleg\u00f3 la crisis, decidi\u00f3 titularse en la carrera que ejerci\u00f3 por m\u00e1s de 30 a\u00f1os. C\u00f3mo es de imaginar, \u00e9l resaltaba sobre todo el grupo, y ten\u00eda ciertas limitaciones a la hora de repasar la teor\u00eda. Treinta a\u00f1os sin ver teor\u00eda matem\u00e1tica no es algo que despreciar.\n\nDado que no era el \u00fanico con estas carencias, arrastradas desde la escuela, procuraba siempre hacer las clases din\u00e1micas y aplicables a su d\u00eda cotidiano. El hecho de agregar tem\u00e1ticas como fiestas y borracheras con un an\u00e1lisis estad\u00edstico y\/o matem\u00e1tico fue algo que les gustaba mucho, ya que sacar costos y relaci\u00f3n entre vol\u00famenes se volvi\u00f3 su m\u00e9todo para pr\u00e1cticar por excelencia.\n\nPor todo lo anterior, y la pasi\u00f3n que compartimos por el an\u00e1lisis de los datos, te invito a que me acompa\u00f1es en este an\u00e1lisis estad\u00edstico, no como un art\u00edculo formal, sino como una charla entre curiosos por saber c\u00f3mo prefieren beber la cerveza en Sao Paulo. Si quieres acompa\u00f1arme con una, eres bien recibido.","51ac82e2":"Extracci\u00f3n de los valores mayores al promedio, unicamente.","a0e1b32e":"Una ventaja de este gr\u00e1fico, y a c\u00f3mo se pudo observar con el de temperatura, es que la mayor\u00eda de las ventas se hicieron en d\u00edas con poca lluvia, por ende, en este tipo de climas, d\u00edas m\u00e1s calurosos.","52b30f1b":"## Quality check de la informaci\u00f3n","bff1ddfc":"Una de las ventajas de est gr\u00e1fico, es que estamos usando la teor\u00eda de grupos para analizar 3 dimensiones en una sola. Recapitulando desde la \u00faltima agregada hasta la primera:\n<ol>\n<li>\u00bfEs fin de semana?: z = Boool<\/li>\n<li>\u00bfHacia calor ese d\u00eda?: Av_temp considerando que {y>=promedio(av_temp) = caliente | y<=promedio(av_temp) = fresco\/fr\u00edo<\/li>\n<li>\u00bfEra una de las mejores ventas?: x>= promedio(beer_consumed) + 1desv.std <\/li>\n<\/ol>\n\nConsiderando esto, podemos agregar esta clasificaci\u00f3n booleana y condisionante sobre la temperatura para analizar con mejor resoluci\u00f3n los gr\u00e1ficos de temperatura y precipitaciones.","70e343fc":"Como es posible observar, existen celdas con informaci\u00f3n nula, as\u00ed como el uso de la coma decimal. El chunck anterior, nos permite ver que la mayor\u00eda de las Series del DataFrame objeto; que el final de semana no es un valor booleano, aunque maneje solo '1' y '0'; y el consumo de la cerveza lo est\u00e1 considerando como \"unas decenas\" y no \"los miles\" de litros que son. Por ello, tendremos que editar la informaci\u00f3n a trav\u00e9s de una funci\u00f3n dise\u00f1ada para este caso en espec\u00edfico.\n\nSobre el nombre los arreglos y como conseguirlos, se puede usar de gu\u00eda el nombre de las columnas. Como recordatorio, el siguiente chunck lo tendr\u00e1, y se dejar\u00e1 a consideraci\u00f3n del lector si usarlos o no.","e3617108":"Gracias a este gr\u00e1fico, podemos observar que de no ser por la consideraci\u00f3n de la desviaci\u00f3n est\u00e1ndar, estar\u00edamos creyendo que casi no hay diferencia entre las ventas mayores al promedio. En otras palabras, que la gente no tiene una preferencia tan clara entre un fin de semana del resto de la semana para comprar cerveza.\n\nGracias al gr\u00e1fico de la derecha, es posible ver que las mejores ventas (prom. + 1 desv. std.), mayoritariamente (2\/3 de ellas) se realizan los fines de semana.","a50d0e2a":"### Gr\u00e1fico de l\u00ednea e histogramas","f87ce59e":"Los gr\u00e1ficos de barras son m\u00e1s empleados para hacer comparativos, aunque, de forma personal, prefiero usarlos para comparar casos y situaciones.\nEn los casos previos, es posible observar cuando un valor de venta es mayor o menor al promedio. Al agregar desviaciones est\u00e1ndar positivas o negativas al promedio, lo que podemos dimensionar el impacto que tienen esas ventas con respecto al resto. Ah\u00ed podemos apreciar algo alto y fuera del rango de lo \"normal\".\n\nPara reducir el uso de chuncks. A continuaci\u00f3n se muestra un comparativo de c\u00f3mo ser\u00eda considerar solo el promedio y considerando una desviaci\u00f3n est\u00e1ndar. Ambos en la misma regla para que la dimensionalidad no se vea afectada.\n\nAntes de ello, al tener datos Booleanos, se ejecutaran las funciones necesarias para obtener los datos necesarios.","bf715151":"Ahora, podr\u00edan surgir gente que alegue que eso se debe al calor. Y es normal, y es una hip\u00f3tesis v\u00e1lida que las ventas de los fines de semana sean mayores a causa del calor, pero... \u00bfqu\u00e9 tanto?, \u00bfser\u00e1 algo considerable?\nAfortunadamente para ustedes, amigos lectores, fan\u00e1ticos de la cerveza y la estad\u00edstica, aqu\u00ed traigo la soluci\u00f3n a esa inc\u00f3gnita.\n\nPara ello, se requerir\u00e1n de m\u00e1s funciones dise\u00f1adas a modo, por lo que, si no es de tu inter\u00e9s analizarlas, te invito a saltar hasta el gr\u00e1fico de dona."}}