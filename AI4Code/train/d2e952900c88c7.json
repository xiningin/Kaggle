{"cell_type":{"9baf6203":"code","083a36b2":"code","037a708e":"code","ca0aa402":"code","0656d803":"code","44dc29db":"code","2a63580f":"code","2832f52d":"code","3a1a2e3d":"code","231d9f7b":"code","5516a1ae":"code","11c7aa71":"code","03c6775f":"code","d0c9cea9":"code","e6707f90":"code","87217149":"code","b8396926":"code","01090cf5":"markdown","7abf4b78":"markdown","e331d2f2":"markdown","5c36a430":"markdown","f0b5004a":"markdown","2b826959":"markdown","717513dc":"markdown","5e612257":"markdown","caca70f1":"markdown","6af46fa6":"markdown","d5728bdd":"markdown","71c93de7":"markdown","cd77771d":"markdown","8c049af5":"markdown","02444158":"markdown","2c954fe8":"markdown"},"source":{"9baf6203":"# One ring to handle numbers\nimport pandas as pd\nimport scipy.stats as stats\n# One ring to handle time\nimport datetime as dt\nfrom datetime import date\nimport time\n# One ring to draw reality\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# and One ring to rule them all ;)\n# from matplotlib.dates import date2num","083a36b2":"AM_LIMIT = 10\nPM_LIMIT = 16\n# LOGNAME = 'data\/bp_log.csv' # data file locally\nLOGNAME = '..\/input\/blood-pressure-readings\/bp_log.csv' # on Kaggle\n# https:\/\/www.kaggle.com\/rjalexander\/blood-pressure-circadian","037a708e":"def partofday(hour):\n    if hour <= AM_LIMIT:\n        return 'AM'\n    elif hour > AM_LIMIT and hour <= PM_LIMIT:\n        return 'MID'\n    else:\n        return 'PM'","ca0aa402":"df = pd.read_csv(LOGNAME)\ndf.head()","0656d803":"df['partofday'] = df.apply(lambda row: partofday(pd.to_datetime(row['Measurement Date']).hour), axis=1)","44dc29db":"# show a sample of the dataframe with the partofday column added\ndf.sample(5)","2a63580f":"description = stats.describe(df[\"SYS\"])\nprint(f\"Systolic orthostatic arm blood pressure at rest has been measured {description[0]} times with a mean value of {description[2]:.2f} (min={description[1][0]}, max={description[1][1]})\")\ndescription = stats.describe(df[\"DIA\"])\nprint(f\"Diastolic orthostatic arm blood pressure at rest has been measured {description[0]} times with a mean value of {description[2]:.2f} (min={description[1][0]}, max={description[1][1]})\")","2832f52d":"# do a scatterplot of all SYS and DIA values and also superimpose a transparent boxplot to show the 25, 50 (median) and 75th percentiles\nsns.set_theme(style=\"whitegrid\")\nboxplot_width = .35 # thinner to make room for having swarmplot beside\nplt.figure(figsize=(8, 8), dpi=80)\nax = sns.swarmplot(y=df[\"SYS\"],data=df)\nsns.boxplot(y=df[\"SYS\"],width=boxplot_width, showcaps=False,boxprops={'facecolor':'None'},\n                 showfliers=False,whiskerprops={'linewidth':0}, ax=ax, data=df)\nsns.swarmplot(y=df[\"DIA\"], color=\"green\", data=df, ax=ax)\nsns.boxplot(y=df[\"DIA\"],width=boxplot_width, showcaps=False,boxprops={'facecolor':'None'},\n                 showfliers=False,whiskerprops={'linewidth':0}, ax=ax, data=df)\nax.set_ylabel('Orhostatic arm blood pressure at rest')","3a1a2e3d":"plt.figure(figsize=(8, 8), dpi=80)\nax = sns.boxplot(x=df[\"partofday\"], y=df[\"SYS\"],hue=df[\"partofday\"],data=df, order=[\"AM\",\"MID\",\"PM\"])\nax = sns.swarmplot(x=df[\"partofday\"], y=df[\"SYS\"],hue=df[\"partofday\"],data=df, order=[\"AM\",\"MID\",\"PM\"])\nax.legend_.remove()","231d9f7b":"plt.figure(figsize=(8, 8), dpi=80)\nax = sns.boxplot(x=df[\"partofday\"], y=df[\"DIA\"],hue=df[\"partofday\"],data=df, order=[\"AM\",\"MID\",\"PM\"])\nax = sns.swarmplot(x=df[\"partofday\"], y=df[\"DIA\"],hue=df[\"partofday\"],data=df, order=[\"AM\",\"MID\",\"PM\"])\nax.legend_.remove()","5516a1ae":"stats.ttest_ind(df['SYS'][df['partofday'] == 'AM'], df['SYS'][df['partofday'] == 'PM'])","11c7aa71":"stats.ttest_ind(df['DIA'][df['partofday'] == 'AM'], df['DIA'][df['partofday'] == 'PM'])","03c6775f":"stats.ttest_ind(df['SYS'][df['partofday'] == 'AM'], df['SYS'][df['partofday'] == 'MID'])","d0c9cea9":"stats.ttest_ind(df['DIA'][df['partofday'] == 'AM'], df['DIA'][df['partofday'] == 'MID'])","e6707f90":"df['date_ordinal'] = pd.to_datetime(df['Measurement Date']).apply(lambda date: date.timestamp())","87217149":"plt.figure(figsize=(14,6))\nax1 = df.SYS.plot(x='timestamp', color='blue', grid=True, label='SYS')\nax1 = df.DIA.plot(x='timestamp', color='green', grid=True, label='DIA')\nplt.legend()\nplt.legend(loc='upper left')\nplt.xticks(rotation=25)\nax1.set_xlabel('date (days)')\nplt.show()","b8396926":"plt.figure(figsize=(14,6))\nax = sns.regplot(x=\"date_ordinal\", y=\"SYS\", data=df, label=\"SYS\")\nax = sns.regplot(x=\"date_ordinal\", y=\"DIA\", color=\"green\", data=df, label=\"DIA\")\n# create some whitespace horizontally around the plot values\nax.set_xlim(df['date_ordinal'].min() - 100000, df['date_ordinal'].max() + 100000)\n# now convert the epoch values back to a YYYY-MM-DD string for the x labels\n# localtime converts the epoch into a datetime object abd strftime converts it into a string\nnew_labels = [time.strftime('%Y-%m-%d',time.localtime(item)) for item in ax.get_xticks()]\nax.set_xticklabels(new_labels)\n# set some visuals\nax.set_xlabel('date')\nplt.xticks(rotation=25)\nplt.legend()\nplt.show()","01090cf5":"Print decriptive statistics of the systolic and diastolic blood pressure readings","7abf4b78":"With the data provided for instance you can form the hypothesis that the pressure in the afternoon\/evening is better that in the morning\/central part of the day and for instance you could act shifting the time of your pressure medication from the evening to the morning to better control the daily values.","e331d2f2":"### Add a date_ordinal column converting the datetime value to an epoch (seconds till 01\/01\/70)\n","5c36a430":"### Conclusion: from this initial assessment of the data you could hypothesize that the systolic pressure is slightly better (lower) in the evening and therefore you could reccomend this patient to take her medication in the morning as opposed to the evening. The difference between AM and MIDday is not significant.","f0b5004a":"Import needed libraries","2b826959":"### This very simple notebook will take a blood pressure reading log (the provided example data is produced by an OMRON Smart X reader), allocate the readings to three sections of the day (AM, MID and PM) and draw a boxplot to perform a first rough estimate about the presence of a trend.","717513dc":"Now plot the line graph using \"timestamp\" datetime as the time-series x value","5e612257":"Now plot a scatterplot with a linear regression fit. To do so as the scattterplot does not accept a datetime timestamp as the x values, I am using the epoch (seconds from 01-jan-1970) contained in the \"date_ordinal\" column","caca70f1":"Define a function to generate a \"partofday\" categorical label based on the hour of the blood pressure reading and the limits we set above","6af46fa6":"### Let's now plot the BP values and see what's the temporal trend in time","d5728bdd":"Read and take a peek at the data as read in a dataframe","71c93de7":"Set the (arbitrary) limits to divide the day in an AM, MID(day) and PM areas and the name of data file","cd77771d":"Add a new \"partofday\" categorical new column in the dataframe","8c049af5":"Now let's perform a t-test to see if there's a statistically significant difference in the average  systolic BP between AM and PM","02444158":"Now let's perform a t-test to see if there's a statistically significant difference in the average systolic BP between AM and MIDday","2c954fe8":"Now plot the SYS(tolic) and then the DIA(stolic) pressure values divided in the three sections of the day"}}