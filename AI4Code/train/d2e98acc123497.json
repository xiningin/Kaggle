{"cell_type":{"ee72668e":"code","b92c15ab":"code","4b1f4fa0":"code","6f656097":"code","2c37b06d":"code","056db779":"code","8a3ba543":"code","e1964960":"code","b8fa2293":"code","63875194":"code","6975b6c8":"code","716803ef":"code","fc181d08":"code","312a22a4":"code","0100b9de":"code","e4b1423d":"code","5dcb34a9":"code","8785832c":"markdown","e8f7d3a8":"markdown","80c38431":"markdown"},"source":{"ee72668e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b92c15ab":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nfrom plotly import tools\nimport plotly.figure_factory as ff\nimport plotly.express as px","4b1f4fa0":"data  = pd.read_csv('\/kaggle\/input\/who-suicide-statistics\/who_suicide_statistics.csv')\n\ndata.head()","6f656097":"data.info()","2c37b06d":"# renaming columns\n\ndata.rename({'sex':'gender' , 'suicides_no':'suicides'} , inplace = True , axis = 1)","056db779":"# lets check missing values\n\ncheck = data.isnull().sum()\/data.shape[0]\nprint(check*100)","8a3ba543":"# let's check what all category we have for age group\n\ndata['age'].unique()","e1964960":"# lets check the countries with more than 5000 suicides in age groupb 15-24 years \n\ncheck = data[(data['age'] == '15-24 years') & (data['suicides'] >=5000)][['country',  'suicides' , 'gender' , 'year']].sort_values('suicides' , ascending = False)\ncheck.style.background_gradient(cmap = 'PuBu')\n","b8fa2293":"# Top 10 Countries wrt Suicides\n\ndata[['country' , 'suicides']].groupby(['country']).agg('sum').sort_values('suicides' , ascending = False).head(5).style.background_gradient('PuBu')","63875194":"# lets check in which year we highest no. of suicides\n\ndata[['suicides',\n      'year']].groupby(['year']).agg('sum').sort_values(by = 'suicides',\n                                                        ascending = False).head(10).style.background_gradient(cmap = 'PuBu')\n","6975b6c8":"# filling missing values\n\ndata['suicides'].fillna(0, inplace = True)\n# data['population'].mean()\ndata['population'].fillna(data['population'].mean(), inplace = True)\n\n# checking if there is any null value left\ndata.isnull().sum().sum()\n\n# converting these attributes into integer format\ndata['suicides'] = data['suicides'].astype(int)\ndata['population'] = data['population'].astype(int)","716803ef":"data.isnull().sum()","fc181d08":"df = px.data.gapminder()\ndf.head()","312a22a4":"x = pd.merge(data, df, on = 'country')\nx = x[['country', 'suicides','gender','age','year_x','population','iso_alpha']]\nx.head()","0100b9de":"fig = px.choropleth(\n    x,\n    locations='iso_alpha',\n    color = 'suicides',\n    hover_name='country',\n    animation_frame= 'year_x',\n    height=500,\n    width=500\n\n         \n\n)\n\n\nfig.show()","e4b1423d":"check = data[['country' , 'suicides']].groupby(['country']).agg('sum').reset_index().sort_values('suicides' , ascending = False).head(10)\nfig = px.bar(\n    check,\n    x = 'country',\n    y = 'suicides',\n    color = 'suicides',\n    height = 500,\n    width  = 500,\n    title = 'Top 10 countries by number of Suicides'\n\n\n)\n\nfig.show()\n\n","5dcb34a9":"check = x[['year_x' , 'suicides']].groupby(['year_x']).agg('sum').reset_index().sort_values('year_x' , ascending = True)\nfig = px.line(\n    check,\n    x = 'year_x',\n    y = 'suicides',\n    height = 500,\n    width = 900,\n    title = 'Suicide Trend'\n\n)\n\nfig.show()","8785832c":"### WHO Suicide Analysis and Visualizations\n\n![](https:\/\/thelogicalindian.com\/h-upload\/2020\/06\/17\/175193-suicideweb-2.jpg)\n","e8f7d3a8":"## Data Vizualization","80c38431":"### Importing Libraries and Dataset"}}