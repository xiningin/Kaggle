{"cell_type":{"e0842913":"code","6596b0a9":"code","52dd1070":"code","4f9178a7":"code","f97dc36b":"code","b2e34961":"code","92ef6004":"code","d63187b0":"code","4e8ca81c":"code","503a169b":"code","a4884645":"code","4e933635":"code","10436734":"code","a3e908f8":"code","757f46cd":"code","dd2bdfd6":"code","a36a25f1":"code","564cada5":"code","866f7f5a":"code","086867df":"code","b59641f8":"code","49a7dc2a":"code","ec374476":"code","1a4e110a":"code","a14c2cdf":"code","97983c32":"code","c7082ae2":"code","b97862e0":"code","4f42e564":"code","fed8d557":"code","b30e1ffd":"code","35286185":"code","f60d3e22":"code","093d2508":"code","47e290fd":"code","6777879a":"markdown","760bff4a":"markdown"},"source":{"e0842913":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6596b0a9":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nimport time\nimport math\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","52dd1070":"df = pd.read_csv(\"..\/input\/solar-radiation\/Solar_Prediction.csv\")\ndf.head()","4f9178a7":"df.info()","f97dc36b":"working_df = df.copy()","b2e34961":"working_df.isnull().sum()","92ef6004":"\nworking_df[\"Data\"] = pd.to_datetime(working_df[\"Data\"])\nworking_df[\"Time\"] = pd.to_datetime(working_df[\"Time\"])\nworking_df[\"TimeSunRise\"] = pd.to_datetime(working_df[\"TimeSunRise\"])\nworking_df[\"TimeSunSet\"] = pd.to_datetime(working_df[\"TimeSunSet\"])\n\n# working_df = convert_to_datetime(working_df, to_dt_list)\n# working_df[\"Year\"] = working_df[\"Data\"].dt.year\n# working_df[\"Month\"] = working_df[\"Data\"].dt.year\n# working_df[\"Day\"] = working_df[\"Data\"].dt.year\n# working_df[\"Hour\"] = working_df[\"Time\"].dt.hour\n# working_df[\"Minute\"] = working_df[\"Time\"].dt.minute\n# working_df[\"Second\"] = working_df[\"Time\"].dt.second\n\nworking_df[\"Rise_Hour\"] = working_df[\"TimeSunRise\"].dt.hour\nworking_df[\"Rise_Minute\"] = working_df[\"TimeSunRise\"].dt.minute\nworking_df[\"Rise_Second\"] = working_df[\"TimeSunRise\"].dt.second\nworking_df[\"Set_Hour\"] = working_df[\"TimeSunSet\"].dt.hour\nworking_df[\"Set_Minute\"] = working_df[\"TimeSunSet\"].dt.minute\nworking_df[\"Set_Second\"] = working_df[\"TimeSunSet\"].dt.second\n\nworking_df.drop(columns=[\"Data\", \"Time\", \"UNIXTime\", \"TimeSunRise\", \"TimeSunSet\"], axis=1, inplace=True)\n\nworking_df.head()","d63187b0":"def plot_columns(df, column_name):\n    plt.figure(figsize=(16, 9))\n    sns.distplot(df[column_name])\n    plt.title(\"Distribution of {}\".format(str(column_name)))\n    plt.show()\n    ","4e8ca81c":"plot_columns(working_df, \"Radiation\")","503a169b":"plot_columns(working_df, \"Temperature\")","a4884645":"plot_columns(working_df, \"Pressure\")","4e933635":"plot_columns(working_df, \"Humidity\")","10436734":"plot_columns(working_df, \"Speed\")","a3e908f8":"plot_columns(working_df, \"WindDirection(Degrees)\")","757f46cd":"working_df.head()","dd2bdfd6":"sns.pairplot(working_df[[\"Temperature\", \"Humidity\", \"Pressure\", \"Speed\", \"Radiation\", \"WindDirection(Degrees)\"]])\nplt.show()","a36a25f1":"corr_df = working_df.corr()\nplt.figure(figsize=(16, 9))\nplt.title(\"HEATMAP\")\nsns.heatmap(corr_df)\nplt.show()","564cada5":"corr_df2 = pd.DataFrame(corr_df[\"Radiation\"]).reset_index()\ncorr_df2 = corr_df2.rename(columns={\"index\": \"variable\", \"Radiation\": \"correlation\"})\ncorr_df2","866f7f5a":"plt.figure(figsize=(16, 9))\nsns.barplot(x=\"variable\", y=\"correlation\", data=corr_df2.iloc[1:, :])\nplt.xticks(rotation=90)\nplt.title(\"Correlation of Variables with Radiation\")\nplt.show()","086867df":"transformed_df = working_df.copy()\ntransformed_df[\"log_Temperature\"] = np.log(transformed_df[\"Temperature\"])\ntransformed_df[\"log_Humidity\"] = np.log(transformed_df[\"Humidity\"])\ntransformed_df[\"log_Pressure\"] = np.log(transformed_df[\"Pressure\"])\ntransformed_df[\"log_Speed\"] = np.log(transformed_df[\"Speed\"])\ntransformed_df[\"log_WindDirection(Degrees)\"] = np.log(transformed_df[\"WindDirection(Degrees)\"])","b59641f8":"plt.figure(figsize=(7, 5))\nsns.scatterplot(y=\"Radiation\", x=\"log_Temperature\", data=transformed_df)\nplt.show()","49a7dc2a":"plt.figure(figsize=(7, 5))\nsns.scatterplot(y=\"Radiation\", x=\"log_Pressure\", data=transformed_df)\nplt.show()","ec374476":"plt.figure(figsize=(7, 5))\nsns.scatterplot(y=\"Radiation\", x=\"log_Humidity\", data=transformed_df)\nplt.show()","1a4e110a":"X, y = working_df[[\"Temperature\", \"Pressure\", \"Humidity\", \"WindDirection(Degrees)\", \"Speed\"]], working_df[\"Radiation\"]\n# X, y = working_df[[\"Temperature\", \"Humidity\", \"WindDirection(Degrees)\"]], working_df[\"Radiation\"]","a14c2cdf":"X.head()","97983c32":"y.head()","c7082ae2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, shuffle=True, random_state=7)","b97862e0":"print(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","4f42e564":"from sklearn.preprocessing import StandardScaler","fed8d557":"for col in X.columns:\n    scaler = StandardScaler()\n    scaler.fit(pd.DataFrame(X_train[col]))\n    X_train[col] = scaler.transform(pd.DataFrame(X_train[col]))\n    X_test[col] = scaler.transform(pd.DataFrame(X_test[col]))","b30e1ffd":"X_train.head()","35286185":"print(\"Fitting Random Forest Regressor...\")\nstart = time.time()\nrfr = RandomForestRegressor(max_features='sqrt',\n                            min_samples_split=2,\n                            min_samples_leaf=2,\n                            n_estimators=200,\n#                             max_depth=25,\n                            random_state=7)\nrfr.fit(X_train, y_train)\nprint(\"Done!\")\nprint(\"Time Taken: {:.5f}\".format(time.time()-start))","f60d3e22":"y_preds = rfr.predict(X_test)\nmse = mean_squared_error(y_test, y_preds)\nrmse = math.sqrt(mse)\nnorm_rmse = rmse\/(max(y_test)-min(y_test))\nr2s = r2_score(y_test, y_preds)\n\nprint(\"MSE: {:.5f},\\nRMSE: {:.5f},\\nNormalized RMSE: {:.5f}\".format(mse, rmse, norm_rmse))\nprint(\"R-Squared Score: {:.5f}\".format(r2s))","093d2508":"cols = list(X.columns)\nfeat_imp = list(rfr.feature_importances_)\n\n# print(\"Feature Importances\")\n# print(\"======================\\n\")\n# for c, i in zip(cols, feat_imp):\n#     print(\"{}: {:.5f}\".format(c, i))\n\nfeat_imp_df = pd.DataFrame({\"Variables\": cols, \"Importance\": feat_imp})\nfeat_imp_df","47e290fd":"plt.figure(figsize=(9, 7))\nsns.barplot(x=\"Variables\", y=\"Importance\", data=feat_imp_df)\nplt.xticks(rotation=90)\nplt.title(\"Feature Importances\")\nplt.show()","6777879a":"We dont see a clear linear relationship between Radiation and other variables. Hence, we will not use Linear Models.","760bff4a":"## PLOTTING DISTRIBUTION OF VARIABLES"}}