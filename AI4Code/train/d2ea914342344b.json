{"cell_type":{"68a929fa":"code","8f452e9e":"code","621a1c22":"code","17e2f54b":"code","437dc6be":"code","15549c91":"code","a371d008":"code","71556c77":"code","46c7fd9f":"code","5d55ed02":"code","788f3357":"code","42599323":"code","3f62b221":"code","1c0d4dc9":"code","0128a21a":"code","71278245":"code","02cf4b00":"code","bcc20852":"code","7f2839ba":"code","a2195759":"code","341f94b8":"code","d02ddd67":"code","e900b818":"code","a692ab72":"code","f24f8311":"code","6339f21a":"code","43ae6e91":"code","66d26edf":"code","94780da4":"code","984ac9d5":"code","62670f2f":"code","1d3a29a9":"markdown","9ce7edfb":"markdown","4972dd6c":"markdown","37e960ce":"markdown","b9d1ec65":"markdown","237a2c89":"markdown","d5d27979":"markdown","48a20304":"markdown","c7ad4153":"markdown","89c96b5c":"markdown","ea25df65":"markdown","065ba139":"markdown","bfbce05c":"markdown","26d00fe8":"markdown","ddb621ba":"markdown","c7facfe0":"markdown","f7dfff12":"markdown"},"source":{"68a929fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport seaborn as sns \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f452e9e":"df=pd.read_csv(\"\/kaggle\/input\/churn-prediction\/Churn_Modelling.csv\")\ndf.head()","621a1c22":"df[\"Gender\"].unique()","17e2f54b":"df[\"Geography\"].unique()","437dc6be":"df=df.drop([\"RowNumber\",\"CustomerId\",\"Surname\"],axis=1)","15549c91":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndf[\"Geography\"]=le.fit_transform(df[\"Geography\"])","a371d008":"df[\"Gender\"]=le.fit_transform(df[\"Gender\"])","71556c77":"df.head()","46c7fd9f":"df.info()","5d55ed02":"df.describe()","788f3357":"df.isnull().sum()","42599323":"corr=df.corr()","3f62b221":"plt.figure(figsize=(10,10))\nsns.heatmap(corr,annot=True)","1c0d4dc9":"for i in df:\n    g = sns.FacetGrid(df, col='Exited')\n    g = g.map(sns.kdeplot, i)","0128a21a":"sns.pairplot(data=df,hue=\"Exited\")","71278245":"plt.figure(figsize=(20,10))\nsns.countplot(df[\"Age\"])","02cf4b00":"sns.countplot(df[\"Tenure\"])","bcc20852":"plt.figure(figsize=(10,10))\nsns.violinplot(x='Exited', y='Tenure', data=df,\n               hue='Gender', split=True)","7f2839ba":"X=df.iloc[:,:-1].values\ny=df.iloc[:,-1].values","a2195759":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","341f94b8":"from sklearn.preprocessing import StandardScaler\nimport tensorflow as tf\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","d02ddd67":"print(X_train)","e900b818":"print(X_test)","a692ab72":"ann = tf.keras.models.Sequential()","f24f8311":"ann.add(tf.keras.layers.Dense(units=6, activation='relu'))","6339f21a":"ann.add(tf.keras.layers.Dense(units=6, activation='relu'))","43ae6e91":"ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))","66d26edf":"ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","94780da4":"ann.fit(X_train, y_train, batch_size = 32, epochs = 100)","984ac9d5":"y_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","62670f2f":"from sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","1d3a29a9":"Compiling the ANN","9ce7edfb":"Adding the input layer and the first hidden layer","4972dd6c":"**Making the Confusion Matrix**","37e960ce":"**IMPORTING DATASET**","b9d1ec65":"Initializing the ANN","237a2c89":"**Predicting the Test set results**","d5d27979":"Adding the output layer","48a20304":"**Splitting the dataset into dependent and independet variable**","c7ad4153":"**SPLITTING DATASET INTO TRAINING AND TEST SET**","89c96b5c":"Training the ANN on the Training set","ea25df65":"**BUILDING THE ANN MODEL**","065ba139":"**SCALING THE VALUES TO MAKE THEM COME UNDER A SAME RANGE**","bfbce05c":"As we have seen that some of the rows are of categorical category. So we label encode them","26d00fe8":"****Part 3 - Training the ANN****","ddb621ba":"**DATA PREPROCESSING**","c7facfe0":"**DATA VISUALISATION**","f7dfff12":"Adding the second hidden layer"}}