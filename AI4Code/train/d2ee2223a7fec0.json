{"cell_type":{"fac7cefb":"code","342a180f":"code","07d1d94f":"code","95ed69d6":"code","1b2160d4":"code","22f9f137":"code","f3e7b917":"code","e93b8bae":"code","adc22142":"code","b117ae07":"code","1d0d3d3f":"code","8257bc92":"code","9654b185":"code","b39ad410":"code","a4c25405":"code","53e47ba2":"code","b2a4f768":"code","601ebe03":"code","87660f2e":"code","ac8b463d":"code","76aa928d":"code","fa0a0179":"code","7c290f4d":"code","440fa0d5":"markdown","775f3cb7":"markdown","69b907ad":"markdown","9b35ef52":"markdown","8bd89552":"markdown","f64ed23b":"markdown","e1e97bf0":"markdown","5222c068":"markdown","da3d89f7":"markdown","112f247c":"markdown"},"source":{"fac7cefb":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, confusion_matrix, auc\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.compose import ColumnTransformer\nfrom imblearn.over_sampling import RandomOverSampler\n","342a180f":"\nfrom collections import Counter","07d1d94f":"train_data = pd.read_csv(\"..\/input\/kepler-labelled-time-series-data\/exoTrain.csv\") \ntest_data=pd.read_csv('..\/input\/kepler-labelled-time-series-data\/exoTest.csv')\ntrain_data.head()","95ed69d6":"train_data['LABEL'].value_counts()","1b2160d4":"train_data.info()","22f9f137":"nulls = train_data.isnull().sum()\nnulls[nulls > 0]","f3e7b917":"x_train=train_data.drop('LABEL',axis=1)\ny_train=train_data[['LABEL']]","e93b8bae":"os=RandomOverSampler(0.8)\nx_train_ns,y_train_ns=os.fit_sample(x_train,y_train)","adc22142":"y_train_ns['LABEL'].value_counts()","b117ae07":"print(\"The number of classes before fit {}\".format(Counter(y_train)))\nprint(\"The number of classes after fit {}\".format(Counter(y_train_ns)))","1d0d3d3f":"x_test=test_data.drop('LABEL',axis=1)\ny_test=test_data[['LABEL']]","8257bc92":"def model(algo):\n    algo_model = algo.fit(x_train_ns, y_train_ns)\n    global y_prob, y_pred\n    y_prob = algo.predict_proba(x_test)\n    y_pred = algo_model.predict(x_test)\n\n    print('Accuracy Score: {}\\n\\nConfusion Matrix:\\n {}'\n      .format(accuracy_score(y_test,y_pred), confusion_matrix(y_test,y_pred),roc_auc_score(y_test,y_pred)))","9654b185":"print('Decision Tree\\n')\nmodel(DecisionTreeClassifier(max_depth = 12))","b39ad410":"print('Decision Tree\\n')\nmodel(DecisionTreeClassifier(max_depth = 6))","a4c25405":"print('Random Forest\\n')\nmodel(RandomForestClassifier())","53e47ba2":"from xgboost import XGBClassifier\n\nxgb_classifier = XGBClassifier()\nxgb_classifier.fit(x_train_ns, y_train_ns)\ny_pred_xgb = xgb_classifier.predict(x_test)\naccuracy_xgb = accuracy_score(y_test, y_pred_xgb)\nprint(accuracy_xgb)","b2a4f768":"xgb_params={\n \"learning_rate\" : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\" : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\" : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ] \n}","601ebe03":"from xgboost import XGBClassifier\n\nxgb_classifier = XGBClassifier()","87660f2e":"from sklearn.model_selection import RandomizedSearchCV\n\nxgb_random_search = RandomizedSearchCV(xgb_classifier, param_distributions = xgb_params,\n                                       scoring= 'roc_auc',\n                                       n_jobs= -1, verbose= 3)\n\nxgb_random_search.fit(x_train_ns, y_train_ns)","ac8b463d":"xgb_random_search.best_params_","76aa928d":"tuned_xgb_classifier = XGBClassifier(min_child_weight = 5,\n                                     max_depth = 3,\n                                     learning_rate = 0.05,\n                                     gamma = 0.3,\n                                     colsample_bytree = 0.3)\ntuned_xgb_classifier.fit(x_train_ns, y_train_ns)","fa0a0179":"y_pred_tuned_xgb = tuned_xgb_classifier.predict(x_test)\naccuracy_tuned_xgb = accuracy_score(y_test, y_pred_tuned_xgb)\nprint(accuracy_tuned_xgb)","7c290f4d":"print(\"Done\")","440fa0d5":"So, No Null values :)","775f3cb7":"# Defining Model Function","69b907ad":"# Import of required libraries ","9b35ef52":"## Random Forest","8bd89552":"# Load of Dataset","f64ed23b":"## Decision Tree","e1e97bf0":"# Split in datasets","5222c068":"So, it's clearly seems it contains 3197 Flux Values and 1 column for Label\n\nReading the description I found : \n*\"Each star has a binary label of 2 or 1. 2 indicated that that the star is confirmed to have at least one exoplanet in orbit; some observations are in fact multi-planet systems\"\n*","da3d89f7":"Great!! That's a very good accuracy","112f247c":"## XGBoost"}}