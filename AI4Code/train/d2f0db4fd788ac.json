{"cell_type":{"1443559b":"code","70ea34db":"code","9e6e96bd":"code","5094f93c":"code","ad64e791":"code","b8af33e5":"code","3795f13b":"code","43011866":"code","27a9063c":"code","35f97b9d":"code","436fe8ad":"code","418b2c15":"code","a1310280":"code","94e3dd7d":"code","823c0526":"code","ffd146a6":"code","337e4044":"code","1e9044c3":"code","6b45e131":"code","cb05b31e":"code","3a082bdf":"code","55921959":"code","c8fff235":"code","890f1b9c":"code","4c98c0e0":"code","53cc54d6":"code","693c76b5":"code","8db437fd":"code","e2748816":"code","2def0bdb":"code","34315a3e":"code","b96b0db2":"code","0e396779":"code","db53c253":"code","a5395466":"code","51c4a11d":"code","3365b613":"code","6c1344c3":"code","9c434e87":"code","54a768b2":"code","9a7b46f7":"code","06fbfc3f":"code","533d2677":"code","eeae7ef8":"code","e8c4c131":"code","502882ad":"code","9c004116":"code","24743977":"code","302ec104":"code","9bd11cfa":"code","98b23d33":"code","a75ede3a":"code","f3d06787":"code","76947cb2":"code","644dfd23":"code","4e9ffc1c":"code","b6d3d2e2":"code","703e5ed4":"code","26f0a27d":"code","e87e9693":"code","c897e0f7":"code","a4e9e57e":"code","5e6972df":"code","24bbfe79":"code","ca98c293":"code","ec83a8dc":"code","b200b025":"code","317a0889":"code","65b9e65e":"code","c689d0f8":"code","c40f94c8":"code","85f3f2b0":"code","09096d60":"code","1e4ed5be":"code","8b7f768e":"code","b51f8f35":"code","b62b288e":"code","e4968454":"code","385749bc":"code","dd56d3d5":"code","3a35979a":"code","e357d6ef":"code","adf83cd4":"code","51f97cd7":"code","9fa48488":"code","2ce6d119":"code","8ec905e1":"code","82b73cc4":"markdown","605dfe75":"markdown","40028dd0":"markdown","5b7e8e27":"markdown","03e22999":"markdown","845acd46":"markdown","9b1c924b":"markdown","91877970":"markdown","d80fa558":"markdown","5446a403":"markdown","1003aebe":"markdown","20915183":"markdown","25174510":"markdown"},"source":{"1443559b":"from bokeh.io import output_notebook, show\noutput_notebook()","70ea34db":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.periodic_table import elements\nfrom bokeh.transform import dodge, factor_cmap\n\noutput_file(\"periodic.html\")\n\nperiods = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\ngroups = [str(x) for x in range(1, 19)]\n\ndf = elements.copy()\ndf[\"atomic mass\"] = df[\"atomic mass\"].astype(str)\ndf[\"group\"] = df[\"group\"].astype(str)\ndf[\"period\"] = [periods[x-1] for x in df.period]\ndf = df[df.group != \"-\"]\ndf = df[df.symbol != \"Lr\"]\ndf = df[df.symbol != \"Lu\"]\n\ncmap = {\n    \"alkali metal\"         : \"#a6cee3\",\n    \"alkaline earth metal\" : \"#1f78b4\",\n    \"metal\"                : \"#d93b43\",\n    \"halogen\"              : \"#999d9a\",\n    \"metalloid\"            : \"#e08d49\",\n    \"noble gas\"            : \"#eaeaea\",\n    \"nonmetal\"             : \"#f1d4Af\",\n    \"transition metal\"     : \"#599d7A\",\n}\n\nsource = ColumnDataSource(df)\n\np = figure(plot_width=950, plot_height=500, title=\"Periodic Table (omitting LA and AC Series)\",\n           x_range=groups, y_range=list(reversed(periods)), toolbar_location=None, tools=\"hover\")\n\np.rect(\"group\", \"period\", 0.90, 0.90, source=source, fill_alpha=0.6, legend=\"metal\",\n       color=factor_cmap('metal', palette=list(cmap.values()), factors=list(cmap.keys())))\n\ntext_props = {\"source\": source, \"text_align\": \"left\", \"text_baseline\": \"middle\"}\n\nx = dodge(\"group\", -0.4, range=p.x_range)\n\nr = p.text(x=x, y=\"period\", text=\"symbol\", **text_props)\nr.glyph.text_font_style=\"bold\"\n\nr = p.text(x=x, y=dodge(\"period\", 0.3, range=p.y_range), text=\"atomic number\", **text_props)\nr.glyph.text_font_size=\"8pt\"\n\nr = p.text(x=x, y=dodge(\"period\", -0.35, range=p.y_range), text=\"name\", **text_props)\nr.glyph.text_font_size=\"5pt\"\n\nr = p.text(x=x, y=dodge(\"period\", -0.2, range=p.y_range), text=\"atomic mass\", **text_props)\nr.glyph.text_font_size=\"5pt\"\n\np.text(x=[\"3\", \"3\"], y=[\"VI\", \"VII\"], text=[\"LA\", \"AC\"], text_align=\"center\", text_baseline=\"middle\")\n\np.hover.tooltips = [\n    (\"Name\", \"@name\"),\n    (\"Atomic number\", \"@{atomic number}\"),\n    (\"Atomic mass\", \"@{atomic mass}\"),\n    (\"Type\", \"@metal\"),\n    (\"CPK color\", \"$color[hex, swatch]:CPK\"),\n    (\"Electronic configuration\", \"@{electronic configuration}\"),\n]\n\np.outline_line_color = None\np.grid.grid_line_color = None\np.axis.axis_line_color = None\np.axis.major_tick_line_color = None\np.axis.major_label_standoff = 0\np.legend.orientation = \"horizontal\"\np.legend.location =\"top_center\"\n\nshow(p)","9e6e96bd":"# Plot a complex chart with intearctive hover in a few lines of code\n\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg_clean as df\nfrom bokeh.transform import factor_cmap\n\ndf.cyl = df.cyl.astype(str)\ndf.yr = df.yr.astype(str)\n\ngroup = df.groupby(('cyl', 'mfr'))\nsource = ColumnDataSource(group)\n\np = figure(plot_width=800, plot_height=300, title=\"Mean MPG by # Cylinders and Manufacturer\",\n           x_range=group, toolbar_location=None, tools=\"\")\n\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"Manufacturer grouped by # Cylinders\"\np.xaxis.major_label_orientation = 1.2\n\nindex_cmap = factor_cmap('cyl_mfr', palette=['#2b83ba', '#abdda4', '#ffffbf', '#fdae61', '#d7191c'], \n                         factors=sorted(df.cyl.unique()), end=1)\n\np.vbar(x='cyl_mfr', top='mpg_mean', width=1, source=source,\n       line_color=\"white\", fill_color=index_cmap, \n       hover_line_color=\"black\", hover_fill_color=index_cmap)\n\np.add_tools(HoverTool(tooltips=[(\"MPG\", \"@mpg_mean\"), (\"Cyl, Mfr\", \"@cyl_mfr\")]))\n\nshow(p)","5094f93c":"# Create and deploy interactive data applications\n\nfrom IPython.display import IFrame\nIFrame('https:\/\/demo.bokehplots.com\/apps\/sliders', width=900, height=500)","ad64e791":"from IPython import __version__ as ipython_version\nfrom pandas import __version__ as pandas_version\nfrom bokeh import __version__ as bokeh_version\nprint(\"IPython - %s\" % ipython_version)\nprint(\"Pandas - %s\" % pandas_version)\nprint(\"Bokeh - %s\" % bokeh_version)","b8af33e5":"# create a new plot with default tools, using figure\np = figure(plot_width=800, plot_height=400)\n\n# add a circle renderer with a size, color, and alpha\np.diamond([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], size=15, line_color= \"orange\", fill_color=\"orange\", fill_alpha=0.5)\n\nshow(p) # show the results","3795f13b":"# create a new plot using figure\np = figure(plot_width=800, plot_height=400)\n\n# add a square renderer with a size, color, alpha, and sizes\np.square([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], size=[10, 15, 20, 25, 30], color=\"firebrick\", alpha=0.6)\n\nshow(p) # show the results","43011866":"# create a new plot (with a title) using figure\np = figure(plot_width=800, plot_height=400, title=\"My Line Plot\")\n\n# add a line renderer\np.line([1, 2, 3, 4, 5], [6, 7, 2, 4, 5], line_width=2)\n\nshow(p) # show the results","27a9063c":"from __future__ import division\nimport numpy as np\n\n# set up some data\nN = 20\nimg = np.empty((N,N), dtype=np.uint32)\nview = img.view(dtype=np.uint8).reshape((N, N, 4))\nfor i in range(N):\n    for j in range(N):\n        view[i, j, 0] = int(i\/N*255) # red\n        view[i, j, 1] = 158          # green\n        view[i, j, 2] = int(j\/N*255) # blue\n        view[i, j, 3] = 255          # alpha\n        \n# create a new plot (with a fixed range) using figure\np = figure(x_range=[0,10], y_range=[0,10],plot_width=800, plot_height=400)\nfigure()\n\n# add an RGBA image renderer\np.image_rgba(image=[img], x=[0], y=[0], dw=[10], dh=[10])\n\nshow(p) # show the results","35f97b9d":"# set up some data\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 8, 7, 3]\n\n# create a new plot with figure\np = figure(plot_width=800, plot_height=400)\n\n# add both a line and circles on the same plot\np.line(x, y, line_width=2)\np.circle(x, y, fill_color=\"black\", size=8)\n\nshow(p) # show the results","436fe8ad":"from bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure","418b2c15":"output_notebook()","a1310280":"# create a new plot with a title\np = figure(plot_width=800, plot_height=400)\np.outline_line_width = 7\np.outline_line_alpha = 0.3\np.outline_line_color = \"navy\"\n\np.circle([1,2,3,4,5], [2,5,8,2,7], size=10)\n\nshow(p)","94e3dd7d":"p = figure(plot_width=800, plot_height=400)\n\n# keep a reference to the returned GlyphRenderer\nr = p.circle([1,2,3,4,5], [2,5,8,2,7])\n\nr.glyph.size = 50\nr.glyph.fill_alpha = 0.3\nr.glyph.line_color = \"firebrick\"\nr.glyph.line_dash = [5, 2]\nr.glyph.line_width = 2\n\nshow(p)","823c0526":"p = figure(plot_width=800, plot_height=400, tools=\"tap\", title=\"Select a circle\")\nrenderer = p.circle([1, 2, 3, 4, 5], [2, 5, 8, 2, 7], size=50,\n\n                    # set visual properties for selected glyphs\n                    selection_color=\"firebrick\",\n\n                    # set visual properties for non-selected glyphs\n                    nonselection_fill_alpha=0.2,\n                    nonselection_fill_color=\"grey\",\n                    nonselection_line_color=\"firebrick\",\n                    nonselection_line_alpha=1.0)\n\nshow(p)","ffd146a6":"# from bokeh.plotting import figure, output_file, show\n# from bokeh.models import HoverTool\n# from bokeh.sampledata.glucose import data\n\n# # output_file(\"styling_hover.html\")\n\n# subset = data.loc['2010-10-06']\n\n# x, y = subset.index.to_series(), subset['glucose']\n\n# # Basic plot setup\n# plot = figure(plot_width=600, plot_height=300, x_axis_type=\"datetime\", tools=\"\",\n#               toolbar_location=None, title='Hover over points')\n\n# plot.line(x, y, line_dash=\"4 4\", line_width=1, color='gray')\n\n# cr = plot.circle(x, y, size=20,\n#                 fill_color=\"grey\", hover_fill_color=\"firebrick\",\n#                 fill_alpha=0.05, hover_alpha=0.3,\n#                 line_color=None, hover_line_color=\"white\")\n\n# plot.add_tools(HoverTool(tooltips=None, renderers=[cr], mode='hline'))\n\n# show(plot)\n\nimport networkx as nx\n\nfrom bokeh.io import show, output_file\nfrom bokeh.models import Plot, Range1d, MultiLine, Circle, HoverTool, TapTool, BoxSelectTool\nfrom bokeh.models.graphs import from_networkx, NodesAndLinkedEdges, EdgesAndLinkedNodes\nfrom bokeh.palettes import Spectral4\n\nG=nx.karate_club_graph()\n\nplot = Plot(plot_width=400, plot_height=400,\n            x_range=Range1d(-1.1,1.1), y_range=Range1d(-1.1,1.1))\nplot.title.text = \"Graph Interaction Demonstration\"\n\nplot.add_tools(HoverTool(tooltips=None), TapTool(), BoxSelectTool())\n\ngraph_renderer = from_networkx(G, nx.circular_layout, scale=1, center=(0,0))\n\ngraph_renderer.node_renderer.glyph = Circle(size=15, fill_color=Spectral4[0])\ngraph_renderer.node_renderer.selection_glyph = Circle(size=15, fill_color=Spectral4[2])\ngraph_renderer.node_renderer.hover_glyph = Circle(size=15, fill_color=Spectral4[1])\n\ngraph_renderer.edge_renderer.glyph = MultiLine(line_color=\"#CCCCCC\", line_alpha=0.8, line_width=5)\ngraph_renderer.edge_renderer.selection_glyph = MultiLine(line_color=Spectral4[2], line_width=5)\ngraph_renderer.edge_renderer.hover_glyph = MultiLine(line_color=Spectral4[1], line_width=5)\n\ngraph_renderer.selection_policy = NodesAndLinkedEdges()\ngraph_renderer.inspection_policy = EdgesAndLinkedNodes()\n\nplot.renderers.append(graph_renderer)\n\noutput_file(\"interactive_graphs.html\")\nshow(plot)","337e4044":"from math import pi\n\np = figure(plot_width=800, plot_height=400)\np.x([1,2,3,4,5], [2,5,8,2,7], size=10, line_width=2)\n\np.xaxis.major_label_orientation = pi\/4\np.yaxis.major_label_orientation = \"vertical\"\n\nshow(p)","1e9044c3":"import numpy as np\nfrom bokeh.models.annotations import Span\n\nx = np.linspace(0, 20, 200)\ny = np.sin(x)\n\np = figure(y_range=(-2, 2),plot_width=800, plot_height=400)\np.line(x, y)\n\nupper = Span(location=1, dimension='width', line_color='olive', line_width=4)\np.add_layout(upper)\n\nlower = Span(location=-1, dimension='width', line_color='firebrick', line_width=4)\np.add_layout(lower)\n\nshow(p)","6b45e131":"import numpy as np\nfrom bokeh.models.annotations import BoxAnnotation\n\nx = np.linspace(0, 20, 200)\ny = np.sin(x)\n\np = figure(y_range=(-2, 2),plot_width=800, plot_height=400)\np.line(x, y)\n\n# region that always fills the top of the plot\nupper = BoxAnnotation(bottom=1, fill_alpha=0.1, fill_color='olive')\np.add_layout(upper)\n\n# region that always fills the bottom of the plot\nlower = BoxAnnotation(top=-1, fill_alpha=0.1, fill_color='firebrick')\np.add_layout(lower)\n\n# a finite region\ncenter = BoxAnnotation(top=0.6, bottom=-0.3, left=7, right=12, fill_alpha=0.1, fill_color='navy')\np.add_layout(center)\n\nshow(p)","cb05b31e":"from bokeh.models.annotations import Label\nfrom bokeh.plotting import figure\n\np = figure(x_range=(0,10), y_range=(0,10),plot_width=800, plot_height=400)\np.circle([2, 5, 8], [4, 7, 6], color=\"olive\", size=10)\n\nlabel = Label(x=5, y=7, x_offset=12, text=\"Second Point\", text_baseline=\"middle\")\np.add_layout(label)\n\nshow(p)","3a082bdf":"from bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource, LabelSet\n\n\nsource = ColumnDataSource(data=dict(\n    temp=[166, 171, 172, 168, 174, 162],\n    pressure=[165, 189, 220, 141, 260, 174],\n    names=['A', 'B', 'C', 'D', 'E', 'F']))\n\np = figure(x_range=(160, 175),plot_width=800, plot_height=500)\np.scatter(x='temp', y='pressure', size=8, source=source)\np.xaxis.axis_label = 'Temperature (C)'\np.yaxis.axis_label = 'Pressure (lbs)'\n\nlabels = LabelSet(x='temp', y='pressure', text='names', level='glyph',\n                  x_offset=5, y_offset=5, source=source, render_mode='canvas')\n\n\np.add_layout(labels)\n\nshow(p)","55921959":"from bokeh.models.annotations import Arrow\nfrom bokeh.models.arrow_heads import OpenHead, NormalHead, VeeHead\n\np = figure(plot_width=800, plot_height=700)\n\np.circle(x=[0, 1, 0.5], y=[0, 0, 0.7], radius=0.1,\n         color=[\"navy\", \"yellow\", \"red\"], fill_alpha=0.1)\n\np.add_layout(Arrow(end=OpenHead(line_color=\"firebrick\", line_width=4),\n                   x_start=0, y_start=0, x_end=1, y_end=0))\n\np.add_layout(Arrow(end=NormalHead(fill_color=\"orange\"),\n                   x_start=1, y_start=0, x_end=0.5, y_end=0.7))\n\np.add_layout(Arrow(end=VeeHead(size=35), line_color=\"red\",\n                   x_start=0.5, y_start=0.7, x_end=0, y_end=0))\n\nshow(p)","c8fff235":"import numpy as np\n\nx = np.linspace(0, 4*np.pi, 100)\ny = np.sin(x)\n\np = figure(height=400, width = 800)\n\np.circle(x, y, legend=\"sin(x)\")\np.line(x, 2*y, legend=\"2*sin(x)\", line_dash=[4, 4], line_color=\"orange\", line_width=2)\n\nshow(p)","890f1b9c":"from bokeh.sampledata.autompg import autompg\nfrom bokeh.models import LinearColorMapper, ColorBar\nfrom bokeh.palettes import Viridis256\n\nsource = ColumnDataSource(autompg)\ncolor_mapper = LinearColorMapper(palette=Viridis256, low=autompg.weight.min(), high=autompg.weight.max())\n\np = figure(x_axis_label='Year', y_axis_label='MPG', tools='', toolbar_location='above',plot_width=800, plot_height=400)\np.circle(x='yr', y='mpg', color={'field': 'weight', 'transform': color_mapper}, size=20, alpha=0.6, source=source)\n\ncolor_bar = ColorBar(color_mapper=color_mapper, label_standoff=12, location=(0,0), title='Weight')\np.add_layout(color_bar, 'right')\n\nshow(p)","4c98c0e0":"from bokeh.models import ColumnDataSource","53cc54d6":"source = ColumnDataSource(data={\n    'x' : [1, 2, 3, 4, 5],\n    'y' : [3, 7, 8, 5, 1],\n})","693c76b5":"p = figure(plot_width=800, plot_height=400)\np.circle('x', 'y', size=20, source=source)\nshow(p)","8db437fd":"from bokeh.sampledata.iris import flowers as df\n\nsource = ColumnDataSource(df)","e2748816":"p = figure(plot_width=800, plot_height=400)\np.circle('petal_length', 'petal_width', source=source)\nshow(p)","2def0bdb":"from bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\n\noutput_notebook()","34315a3e":"x = list(range(11))\ny0, y1, y2 = x, [10-i for i in x], [abs(i-5) for i in x]","b96b0db2":"from bokeh.layouts import row\n\n# create a new plot\ns1 = figure(width=250, plot_height=250)\ns1.circle(x, y0, size=10, color=\"navy\", alpha=0.5)\n\n# create another one\ns2 = figure(width=250, height=250)\ns2.triangle(x, y1, size=10, color=\"firebrick\", alpha=0.5)\n\n# create and another\ns3 = figure(width=250, height=250)\ns3.square(x, y2, size=10, color=\"olive\", alpha=0.5)\n\n# show the results in a row\nshow(row(s1, s2, s3))","0e396779":"from bokeh.layouts import gridplot\n\n# create a new plot\ns1 = figure(width=250, plot_height=250)\ns1.circle(x, y0, size=10, color=\"navy\", alpha=0.5)\n\n# create another one\ns2 = figure(width=250, height=250)\ns2.triangle(x, y1, size=10, color=\"firebrick\", alpha=0.5)\n\n# create and another\ns3 = figure(width=250, height=250)\ns3.square(x, y2, size=10, color=\"olive\", alpha=0.5)\n\n# put all the plots in a gridplot\np = gridplot([[s1, s2], [s3, None]], toolbar_location=None)\n\n# show the results\nshow(p)","db53c253":"from bokeh.layouts import gridplot\n\nx = list(range(11))\ny0, y1, y2 = x, [10-i for i in x], [abs(i-5) for i in x]\n\nplot_options = dict(width=250, plot_height=250, tools='pan,wheel_zoom')\n\n# create a new plot\ns1 = figure(**plot_options)\ns1.circle(x, y0, size=10, color=\"navy\")\n\n# create a new plot and share both ranges\ns2 = figure(x_range=s1.x_range, y_range=s1.y_range, **plot_options)\ns2.triangle(x, y1, size=10, color=\"firebrick\")\n\n# create a new plot and share only one range\ns3 = figure(x_range=s1.x_range, **plot_options)\ns3.square(x, y2, size=10, color=\"olive\")\n\np = gridplot([[s1, s2, s3]])\n\n# show the results\nshow(p)","a5395466":"from bokeh.models import ColumnDataSource\n\nx = list(range(-20, 21))\ny0, y1 = [abs(xx) for xx in x], [xx**2 for xx in x]\n\n# create a column data source for the plots to share\nsource = ColumnDataSource(data=dict(x=x, y0=y0, y1=y1))\n\nTOOLS = \"box_select,lasso_select,help\"\n\n# create a new plot and add a renderer\nleft = figure(tools=TOOLS, width=250, height=300)\nleft.circle('x', 'y0', source=source)\n\n# create another new plot and add a renderer\nright = figure(tools=TOOLS, width=350, height=300)\nright.circle('x', 'y1', source=source)\n\np = gridplot([[left, right]])\n\nshow(p)","51c4a11d":"from bokeh.models import HoverTool\n\nsource = ColumnDataSource(\n        data=dict(\n            x=[1, 2, 3, 4, 5],\n            y=[2, 5, 8, 2, 7],\n            desc=['A', 'b', 'C', 'd', 'E'],\n        )\n    )\n\nhover = HoverTool(\n        tooltips=[\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"desc\", \"@desc\"),\n        ]\n    )\n\np = figure(plot_width=800, plot_height=400, tools=[hover], title=\"Mouse over the dots\")\n\np.circle('x', 'y', size=20, source=source)\n\nshow(p)","3365b613":"from bokeh.layouts import widgetbox\nfrom bokeh.models.widgets import Slider\n\n\nslider = Slider(start=0, end=10, value=1, step=.1, title=\"foo\")\n\nshow(widgetbox(slider))","6c1344c3":"from bokeh.models import TapTool, CustomJS, ColumnDataSource\n\ncallback = CustomJS(code=\"alert('hello world')\")\ntap = TapTool(callback=callback)\n\np = figure(plot_width=800, plot_height=300, tools=[tap])\n\np.circle(x=[1, 2, 3, 4, 5], y=[2, 5, 8, 2, 7], size=20)\n\nshow(p)","9c434e87":"from bokeh.layouts import column\nfrom bokeh.models import CustomJS, ColumnDataSource, Slider\n\nx = [x*0.0005 for x in range(0, 201)]\n\nsource = ColumnDataSource(data=dict(x=x, y=x))\n\nplot = figure(plot_width=800, plot_height=400)\nplot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)\n\nslider = Slider(start=0.1, end=6, value=1, step=.1, title=\"power\")\n\nupdate_curve = CustomJS(args=dict(source=source, slider=slider), code=\"\"\"\n    var data = source.get('data');\n    var f = slider.value;\n    x = data['x']\n    y = data['y']\n    for (i = 0; i < x.length; i++) {\n        y[i] = Math.pow(x[i], f)\n    }\n    source.change.emit();\n\"\"\")\nslider.js_on_change('value', update_curve)\n\n\nshow(column(slider, plot))","54a768b2":"from random import random\n\nx = [random() for x in range(500)]\ny = [random() for y in range(500)]\ncolor = [\"navy\"] * len(x)\n\ns = ColumnDataSource(data=dict(x=x, y=y, color=color))\np = figure(plot_width=800, plot_height=400, tools=\"lasso_select\", title=\"Select Here\")\np.circle('x', 'y', color='color', size=8, source=s, alpha=0.4)\n\ns2 = ColumnDataSource(data=dict(xm=[0,1],ym=[0.5, 0.5]))\np.line(x='xm', y='ym', color=\"orange\", line_width=5, alpha=0.6, source=s2)\n\ns.callback = CustomJS(args=dict(s2=s2), code=\"\"\"\n    var inds = cb_obj.get('selected')['1d'].indices;\n    var d = cb_obj.get('data');\n    var ym = 0\n    \n    if (inds.length == 0) { return; }\n    \n    for (i = 0; i < d['color'].length; i++) {\n        d['color'][i] = \"navy\"\n    }\n    for (i = 0; i < inds.length; i++) {\n        d['color'][inds[i]] = \"firebrick\"\n        ym += d['y'][inds[i]]\n    }\n    \n    ym \/= inds.length\n    s2.get('data')['ym'] = [ym, ym]\n    \n    cb_obj.trigger('change');\n    s2.trigger('change');\n\"\"\")\n\nshow(p)","9a7b46f7":"from bokeh.io import show, output_notebook\nfrom bokeh.plotting import figure\n\noutput_notebook()","06fbfc3f":"# Here is a list of categorical values (or factors)\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\n\n# Set the x_range to the list of categories above\np = figure(x_range=fruits, plot_width=1000, plot_height=400, title=\"Fruit Counts\")\n\n# Categorical values can also be used as coordinates\np.vbar(x=fruits, top=[5, 3, 4, 2, 4, 6], width=0.9)\n\n# Set some properties to make the plot look better\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","533d2677":"from bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\ncounts = [5, 3, 4, 2, 4, 6]\n\nsource = ColumnDataSource(data=dict(fruits=fruits, counts=counts, color=Spectral6))\n\np = figure(x_range=fruits, plot_width=1000, plot_height=400, y_range=(0, 9), title=\"Fruit Counts\")\np.vbar(x='fruits', top='counts', width=0.9, color='color', legend=\"fruits\", source=source)\n\np.xgrid.grid_line_color = None\np.legend.orientation = \"horizontal\"\np.legend.location = \"top_center\"\n\nshow(p)","eeae7ef8":"from bokeh.core.properties import value\nfrom bokeh.io import show, output_file\nfrom bokeh.plotting import figure\n\noutput_file(\"stacked.html\")\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = [\"2015\", \"2016\", \"2017\"]\ncolors = [\"#c9d9d3\", \"#718dbf\", \"#e84d60\"]\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 4, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\np = figure(x_range=fruits, plot_height=250, title=\"Fruit Counts by Year\",\n           toolbar_location=None, tools=\"hover\", tooltips=\"$name @fruits: @$name\")\n\np.vbar_stack(years, x='fruits', width=0.9, color=colors, source=data,\n             legend=[value(x) for x in years])\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\np.axis.minor_tick_line_color = None\np.outline_line_color = None\np.legend.location = \"top_left\"\np.legend.orientation = \"horizontal\"\n\nshow(p)","e8c4c131":"from bokeh.core.properties import value\nfrom bokeh.io import show, output_file\nfrom bokeh.models import ColumnDataSource, FactorRange\nfrom bokeh.plotting import figure\n\noutput_file(\"bar_stacked_grouped.html\")\n\nfactors = [\n    (\"Q1\", \"jan\"), (\"Q1\", \"feb\"), (\"Q1\", \"mar\"),\n    (\"Q2\", \"apr\"), (\"Q2\", \"may\"), (\"Q2\", \"jun\"),\n    (\"Q3\", \"jul\"), (\"Q3\", \"aug\"), (\"Q3\", \"sep\"),\n    (\"Q4\", \"oct\"), (\"Q4\", \"nov\"), (\"Q4\", \"dec\"),\n\n]\n\nregions = ['east', 'west']\n\nsource = ColumnDataSource(data=dict(\n    x=factors,\n    east=[ 5, 5, 6, 5, 5, 4, 5, 6, 7, 8, 6, 9 ],\n    west=[ 5, 7, 9, 4, 5, 4, 7, 7, 7, 6, 6, 7 ],\n))\n\np = figure(x_range=FactorRange(*factors), plot_height=250,\n           toolbar_location=None, tools=\"\")\n\np.vbar_stack(regions, x='x', width=0.9, alpha=0.5, color=[\"blue\", \"red\"], source=source,\n             legend=[value(x) for x in regions])\n\np.y_range.start = 0\np.y_range.end = 18\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\np.legend.location = \"top_center\"\np.legend.orientation = \"horizontal\"\n\nshow(p)\n","502882ad":"from bokeh.palettes import GnBu3, OrRd3\n\nyears = ['2015', '2016', '2017']\n\nexports = {'fruits' : fruits,\n           '2015'   : [2, 1, 4, 3, 2, 4],\n           '2016'   : [5, 3, 4, 2, 4, 6],\n           '2017'   : [3, 2, 4, 4, 5, 3]}\nimports = {'fruits' : fruits,\n           '2015'   : [-1, 0, -1, -3, -2, -1],\n           '2016'   : [-2, -1, -3, -1, -2, -2],\n           '2017'   : [-1, -2, -1, 0, -2, -2]}\n\np = figure(y_range=fruits, plot_width=1000, plot_height=250, x_range=(-16, 16), title=\"Fruit import\/export, by year\")\n\np.hbar_stack(years, y='fruits', height=0.9, color=GnBu3, source=ColumnDataSource(exports),\n             legend=[\"%s exports\" % x for x in years])\n\np.hbar_stack(years, y='fruits', height=0.9, color=OrRd3, source=ColumnDataSource(imports),\n             legend=[\"%s imports\" % x for x in years])\n\np.y_range.range_padding = 0.1\np.ygrid.grid_line_color = None\np.legend.location = \"center_left\"\n\nshow(p)","9c004116":"from bokeh.models import FactorRange\n\nfruits = ['Apples', 'Pears', 'Nectarines', 'Plums', 'Grapes', 'Strawberries']\nyears = ['2015', '2016', '2017']\n\ndata = {'fruits' : fruits,\n        '2015'   : [2, 1, 4, 3, 2, 4],\n        '2016'   : [5, 3, 3, 2, 4, 6],\n        '2017'   : [3, 2, 4, 4, 5, 3]}\n\n# this creates [ (\"Apples\", \"2015\"), (\"Apples\", \"2016\"), (\"Apples\", \"2017\"), (\"Pears\", \"2015), ... ]\nx = [ (fruit, year) for fruit in fruits for year in years ]\ncounts = sum(zip(data['2015'], data['2016'], data['2017']), ()) # like an hstack\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts))\n\np = figure(x_range=FactorRange(*x), plot_height=250, plot_width = 1000, title=\"Fruit Counts by Year\")\n\np.vbar(x='x', top='counts', width=0.9, source=source)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","24743977":"from bokeh.transform import factor_cmap\n\np = figure(x_range=FactorRange(*x), plot_height=250, plot_width= 1000, title=\"Fruit Counts by Year\")\n\np.vbar(x='x', top='counts', width=0.9, source=source, line_color=\"white\",\n\n# use the palette to colormap based on the the x[1:2] values\nfill_color=factor_cmap('x', palette=['firebrick', 'olive', 'navy'], factors=years, start=1, end=2))\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","302ec104":"factors = [(\"Q1\", \"jan\"), (\"Q1\", \"feb\"), (\"Q1\", \"mar\"),\n           (\"Q2\", \"apr\"), (\"Q2\", \"may\"), (\"Q2\", \"jun\"),\n           (\"Q3\", \"jul\"), (\"Q3\", \"aug\"), (\"Q3\", \"sep\"),\n           (\"Q4\", \"oct\"), (\"Q4\", \"nov\"), (\"Q4\", \"dec\")]\n\np = figure(x_range=FactorRange(*factors), plot_height=250, plot_width = 1000)\n\nx = [ 10, 12, 16, 9, 10, 8, 12, 13, 14, 14, 12, 16 ]\np.vbar(x=factors, top=x, width=0.9, alpha=0.5)\n\nqs, aves = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"], [12, 9, 13, 14]\np.line(x=qs, y=aves, color=\"red\", line_width=3)\np.circle(x=qs, y=aves, line_color=\"red\", fill_color=\"white\", size=10)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xgrid.grid_line_color = None\n\nshow(p)","9bd11cfa":"from bokeh.sampledata.autompg import autompg_clean as df\n\ndf.cyl = df.cyl.astype(str)\ndf.head()","98b23d33":"from bokeh.io import show, output_file\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral5\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.autompg import autompg as df\nfrom bokeh.transform import factor_cmap\n\noutput_file(\"groupby.html\")\n\ndf.cyl = df.cyl.astype(str)\ngroup = df.groupby('cyl')\n\nsource = ColumnDataSource(group)\n\ncyl_cmap = factor_cmap('cyl', palette=Spectral5, factors=sorted(df.cyl.unique()))\n\np = figure(plot_height=350, x_range=group, title=\"MPG by # Cylinders\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='cyl', top='mpg_mean', width=1, source=source,\n       line_color=cyl_cmap, fill_color=cyl_cmap)\n\np.y_range.start = 0\np.xgrid.grid_line_color = None\np.xaxis.axis_label = \"some stuff\"\np.xaxis.major_label_orientation = 1.2\np.outline_line_color = None\n\nshow(p)","a75ede3a":"import pandas as pd\n\nfrom bokeh.io import output_file, show\nfrom bokeh.models import BasicTicker, ColorBar, ColumnDataSource, LinearColorMapper, PrintfTickFormatter\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.unemployment1948 import data\nfrom bokeh.transform import transform\n\noutput_file(\"unemploymemt.html\")\n\ndata.Year = data.Year.astype(str)\ndata = data.set_index('Year')\ndata.drop('Annual', axis=1, inplace=True)\ndata.columns.name = 'Month'\n\n# reshape to 1D array or rates with a month and year for each row.\ndf = pd.DataFrame(data.stack(), columns=['rate']).reset_index()\n\nsource = ColumnDataSource(df)\n\n# this is the colormap from the original NYTimes plot\ncolors = [\"#75968f\", \"#a5bab7\", \"#c9d9d3\", \"#e2e2e2\", \"#dfccce\", \"#ddb7b1\", \"#cc7878\", \"#933b41\", \"#550b1d\"]\nmapper = LinearColorMapper(palette=colors, low=df.rate.min(), high=df.rate.max())\n\np = figure(plot_width=800, plot_height=300, title=\"US Unemployment 1948\u20142016\",\n           x_range=list(data.index), y_range=list(reversed(data.columns)),\n           toolbar_location=None, tools=\"\", x_axis_location=\"above\")\n\np.rect(x=\"Year\", y=\"Month\", width=1, height=1, source=source,\n       line_color=None, fill_color=transform('rate', mapper))\n\ncolor_bar = ColorBar(color_mapper=mapper, location=(0, 0),\n                     ticker=BasicTicker(desired_num_ticks=len(colors)),\n                     formatter=PrintfTickFormatter(format=\"%d%%\"))\n\np.add_layout(color_bar, 'right')\n\np.axis.axis_line_color = None\np.axis.major_tick_line_color = None\np.axis.major_label_text_font_size = \"5pt\"\np.axis.major_label_standoff = 0\np.xaxis.major_label_orientation = 1.0\n\nshow(p)","f3d06787":"from bokeh.io import show, output_file\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.sprint import sprint\n\noutput_file(\"sprint.html\")\n\nsprint.Year = sprint.Year.astype(str)\ngroup = sprint.groupby('Year')\nsource = ColumnDataSource(group)\n\np = figure(y_range=group, x_range=(9.5,12.7), plot_width=400, plot_height=550, toolbar_location=None,\n           title=\"Time Spreads for Sprint Medalists (by Year)\")\np.hbar(y=\"Year\", left='Time_min', right='Time_max', height=0.4, source=source)\n\np.ygrid.grid_line_color = None\np.xaxis.axis_label = \"Time (seconds)\"\np.outline_line_color = None\n\nshow(p)","76947cb2":"from numpy import linspace\nfrom scipy.stats.kde import gaussian_kde\n\nfrom bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FixedTicker, PrintfTickFormatter\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.perceptions import probly\n\nimport colorcet as cc\n\noutput_file(\"ridgeplot.html\")\n\ndef ridge(category, data, scale=20):\n    return list(zip([category]*len(data), scale*data))\n\ncats = list(reversed(probly.keys()))\n\npalette = [cc.rainbow[i*15] for i in range(17)]\n\nx = linspace(-20,110, 500)\n\nsource = ColumnDataSource(data=dict(x=x))\n\np = figure(y_range=cats, plot_width=700, x_range=(-5, 105), toolbar_location=None)\n\nfor i, cat in enumerate(reversed(cats)):\n    pdf = gaussian_kde(probly[cat])\n    y = ridge(cat, pdf(x))\n    source.add(y, cat)\n    p.patch('x', cat, color=palette[i], alpha=0.6, line_color=\"black\", source=source)\n\np.outline_line_color = None\np.background_fill_color = \"#efefef\"\n\np.xaxis.ticker = FixedTicker(ticks=list(range(0, 101, 10)))\np.xaxis.formatter = PrintfTickFormatter(format=\"%d%%\")\n\np.ygrid.grid_line_color = None\np.xgrid.grid_line_color = \"#dddddd\"\np.xgrid.ticker = p.xaxis[0].ticker\n\np.axis.minor_tick_line_color = None\np.axis.major_tick_line_color = None\np.axis.axis_line_color = None\n\np.y_range.range_padding = 0.12\n\nshow(p)","644dfd23":"from bokeh.models import ColumnDataSource, Whisker\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.autompg import autompg as df\n\ncolors = [\"red\", \"olive\", \"darkred\", \"goldenrod\", \"skyblue\", \"orange\", \"salmon\"]\n\np = figure(plot_width=700, plot_height=300, title=\"Years vs mpg with Quartile Ranges\")\n\nbase, lower, upper = [], [], []\n\nfor i, year in enumerate(list(df.yr.unique())):\n    year_mpgs = df[df['yr'] == year]['mpg']\n    mpgs_mean = year_mpgs.mean()\n    mpgs_std = year_mpgs.std()\n    lower.append(mpgs_mean - mpgs_std)\n    upper.append(mpgs_mean + mpgs_std)\n    base.append(year)\n\nsource_error = ColumnDataSource(data=dict(base=base, lower=lower, upper=upper))\n\np.add_layout(\n    Whisker(source=source_error, base=\"base\", upper=\"upper\", lower=\"lower\")\n)\n\nfor i, year in enumerate(list(df.yr.unique())):\n    y = df[df['yr'] == year]['mpg']\n    color = colors[i % len(colors)]\n    p.circle(x=year, y=y, color=color)\n\nshow(p)","4e9ffc1c":"from bokeh.sampledata.commits import data\n\ndata.head()","b6d3d2e2":"from bokeh.transform import jitter\n\nDAYS = ['Sun', 'Sat', 'Fri', 'Thu', 'Wed', 'Tue', 'Mon']\n\nsource = ColumnDataSource(data)\n\np = figure(plot_width=1000, plot_height=300, y_range=DAYS, x_axis_type='datetime', \n           title=\"Commits by Time of Day (US\/Central) 2012\u20142016\")\n\np.circle(x='time', y=jitter('day', width=0.6, range=p.y_range),  source=source, alpha=0.3)\n\np.xaxis[0].formatter.days = ['%Hh']\np.x_range.range_padding = 0\np.ygrid.grid_line_color = None\n\nshow(p)","703e5ed4":"from bokeh.io import show, output_notebook\nfrom bokeh.plotting import figure\n\noutput_notebook()","26f0a27d":"import networkx as nx\n\nG = nx.desargues_graph()","e87e9693":"from bokeh.models.graphs import from_networkx\nfrom bokeh.models import Range1d, Plot\n\n# We could use figure here but don't want all the axes and titles\nplot = Plot(x_range=Range1d(-1.1,1.1), y_range=Range1d(-1.1,1.1),plot_width=700, plot_height=600)\n\n# Create a Bokeh graph from the NetworkX input using nx.spring_layout\ngraph = from_networkx(G, nx.spring_layout, scale=2, center=(0,0))\nplot.renderers.append(graph)\n\n# Set some of the default node glyph (Circle) properties\ngraph.node_renderer.glyph.update(size=20, fill_color=\"orange\")\n\nshow(plot)","c897e0f7":"import math\n\nfrom bokeh.io import show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import GraphRenderer, StaticLayoutProvider, Oval\nfrom bokeh.palettes import Spectral8\n\nN = 8\nnode_indices = list(range(N))\n\nplot = figure(title='Graph Layout Demonstration', x_range=(-1.1,1.1), y_range=(-1.1,1.1),\n              tools='', toolbar_location=None,plot_width=800, plot_height=600)\n\ngraph = GraphRenderer()\n\ngraph.node_renderer.data_source.add(node_indices, 'index')\ngraph.node_renderer.data_source.add(Spectral8, 'color')\ngraph.node_renderer.glyph = Oval(height=0.1, width=0.2, fill_color='color')\n\ngraph.edge_renderer.data_source.data = dict(\n    start=[0]*N,\n    end=node_indices)\n\n### start of layout code\ncirc = [i*2*math.pi\/8 for i in node_indices]\nx = [math.cos(i) for i in circ]\ny = [math.sin(i) for i in circ]\n\ngraph_layout = dict(zip(node_indices, zip(x, y)))\ngraph.layout_provider = StaticLayoutProvider(graph_layout=graph_layout)\n\nplot.renderers.append(graph)\n\noutput_file('graph.html')\nshow(plot)","a4e9e57e":"import math\n\nfrom bokeh.io import show, output_file\nfrom bokeh.plotting import figure\nfrom bokeh.models import GraphRenderer, StaticLayoutProvider, Oval\nfrom bokeh.palettes import Spectral8\n\nN = 8\nnode_indices = list(range(N))\n\nplot = figure(title=\"Graph Layout Demonstration\", x_range=(-1.1,1.1), y_range=(-1.1,1.1),\n              tools=\"\", toolbar_location=None,plot_width=800, plot_height=600)\n\ngraph = GraphRenderer()\n\ngraph.node_renderer.data_source.add(node_indices, 'index')\ngraph.node_renderer.data_source.add(Spectral8, 'color')\ngraph.node_renderer.glyph = Oval(height=0.1, width=0.2, fill_color=\"color\")\n\ngraph.edge_renderer.data_source.data = dict(\n    start=[0]*N,\n    end=node_indices)\n\n### start of layout code\ncirc = [i*2*math.pi\/8 for i in node_indices]\nx = [math.cos(i) for i in circ]\ny = [math.sin(i) for i in circ]\ngraph_layout = dict(zip(node_indices, zip(x, y)))\ngraph.layout_provider = StaticLayoutProvider(graph_layout=graph_layout)\n\n### Draw quadratic bezier paths\ndef bezier(start, end, control, steps):\n    return [(1-s)**2*start + 2*(1-s)*s*control + s**2*end for s in steps]\n\nxs, ys = [], []\nsx, sy = graph_layout[0]\nsteps = [i\/100. for i in range(100)]\nfor node_index in node_indices:\n    ex, ey = graph_layout[node_index]\n    xs.append(bezier(sx, ex, 0, steps))\n    ys.append(bezier(sy, ey, 0, steps))\ngraph.edge_renderer.data_source.data['xs'] = xs\ngraph.edge_renderer.data_source.data['ys'] = ys\n\nplot.renderers.append(graph)\n\noutput_file(\"graph.html\")\nshow(plot)","5e6972df":"from bokeh.models.graphs import NodesAndLinkedEdges\nfrom bokeh.models import Circle, HoverTool, MultiLine\n\nG = nx.karate_club_graph()\n\n# We could use figure here but don't want all the axes and titles\nplot = Plot(x_range=Range1d(-1.1,1.1), y_range=Range1d(-1.1,1.1),plot_width=800, plot_height=600)\n# Create a Bokeh graph from the NetworkX input using nx.spring_layout\ngraph = from_networkx(G, nx.spring_layout, scale=2, center=(0,0))\nplot.renderers.append(graph)\n\n# Blue circles for nodes, and light grey lines for edges\ngraph.node_renderer.glyph = Circle(size=25, fill_color='#2b83ba')\ngraph.edge_renderer.glyph = MultiLine(line_color=\"#cccccc\", line_alpha=0.8, line_width=2)\n\n# green hover for both nodes and edges\ngraph.node_renderer.hover_glyph = Circle(size=25, fill_color='#abdda4')\ngraph.edge_renderer.hover_glyph = MultiLine(line_color='#abdda4', line_width=4)\n\n# When we hover over nodes, highlight adjecent edges too\ngraph.inspection_policy = NodesAndLinkedEdges()\n\nplot.add_tools(HoverTool(tooltips=None))\n\nshow(plot)","24bbfe79":"import networkx as nx\n\nfrom bokeh.io import show, output_file\nfrom bokeh.models import Plot, Range1d, MultiLine, Circle, HoverTool, BoxZoomTool, ResetTool\nfrom bokeh.models.graphs import from_networkx\nfrom bokeh.palettes import Spectral4\n\n# Prepare Data\nG = nx.karate_club_graph()\n\nSAME_CLUB_COLOR, DIFFERENT_CLUB_COLOR = \"black\", \"red\"\nedge_attrs = {}\n\nfor start_node, end_node, _ in G.edges(data=True):\n    edge_color = SAME_CLUB_COLOR if G.nodes[start_node][\"club\"] == G.nodes[end_node][\"club\"] else DIFFERENT_CLUB_COLOR\n    edge_attrs[(start_node, end_node)] = edge_color\n\nnx.set_edge_attributes(G, edge_attrs, \"edge_color\")\n\n# Show with Bokeh\nplot = Plot(plot_width=800, plot_height=400,\n            x_range=Range1d(-1.1, 1.1), y_range=Range1d(-1.1, 1.1))\nplot.title.text = \"Graph Interaction Demonstration\"\n\nnode_hover_tool = HoverTool(tooltips=[(\"index\", \"@index\"), (\"club\", \"@club\")])\nplot.add_tools(node_hover_tool, BoxZoomTool(), ResetTool())\n\ngraph_renderer = from_networkx(G, nx.spring_layout, scale=1, center=(0, 0))\n\ngraph_renderer.node_renderer.glyph = Circle(size=15, fill_color=Spectral4[0])\ngraph_renderer.edge_renderer.glyph = MultiLine(line_color=\"edge_color\", line_alpha=0.8, line_width=1)\nplot.renderers.append(graph_renderer)\n\noutput_file(\"interactive_graphs.html\")\nshow(plot)","ca98c293":"from bokeh.io import output_notebook, show\noutput_notebook()","ec83a8dc":"from bokeh.plotting import figure\nfrom bokeh.models import WMTSTileSource\n\n# web mercator coordinates\nUSA = x_range,y_range = ((-13884029,-7453304), (2698291,6455972))\n\np = figure(tools='pan, wheel_zoom', x_range=x_range, y_range=y_range,plot_width=1000, plot_height=500)\np.axis.visible = False","b200b025":"url = 'http:\/\/a.basemaps.cartocdn.com\/dark_all\/{Z}\/{X}\/{Y}.png'\nattribution = \"Tiles by Carto, under CC BY 3.0. Data by OSM, under ODbL\"\n\np.add_tile(WMTSTileSource(url=url, attribution=attribution))","317a0889":"show(p)","65b9e65e":"import pandas as pd\nimport numpy as np\n\ndef wgs84_to_web_mercator(df, lon=\"lon\", lat=\"lat\"):\n    \"\"\"Converts decimal longitude\/latitude to Web Mercator format\"\"\"\n    k = 6378137\n    df[\"x\"] = df[lon] * (k * np.pi\/180.0)\n    df[\"y\"] = np.log(np.tan((90 + df[lat]) * np.pi\/360.0)) * k\n    return df\n\ndf = pd.DataFrame(dict(name=[\"Austin\", \"NYC\"], lon=[-97.7431,-74.0059], lat=[30.2672,40.7128]))\nwgs84_to_web_mercator(df)","c689d0f8":"p.circle(x=df['x'], y=df['y'], fill_color='yellow', size=10)\nshow(p)","c40f94c8":"from bokeh.plotting import figure, show, output_file\nfrom bokeh.tile_providers import CARTODBPOSITRON\n\noutput_file(\"tile.html\")\n\n# range bounds supplied in web mercator coordinates\np = figure(x_range=(-2000000, 6000000), y_range=(-1000000, 7000000),\n           x_axis_type=\"mercator\", y_axis_type=\"mercator\", plot_width=1000, plot_height=500)\np.add_tile(CARTODBPOSITRON)\n\nshow(p)","85f3f2b0":"from bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, GMapOptions\nfrom bokeh.plotting import gmap\n\noutput_file(\"gmap.html\")\n\nmap_options = GMapOptions(lat=30.2861, lng=-97.7394, map_type=\"roadmap\", zoom=11)\n\n# For GMaps to function, Google requires you obtain and enable an API key:\n#\n#     https:\/\/developers.google.com\/maps\/documentation\/javascript\/get-api-key\n#\n# Replace the value below with your personal API key:\np = gmap(\"GOOGLE_API_KEY\", map_options, title=\"Austin\")\n\nsource = ColumnDataSource(\n    data=dict(lat=[ 30.29,  30.20,  30.29],\n              lon=[-97.70, -97.74, -97.78])\n)\n\np.circle(x=\"lon\", y=\"lat\", size=25, fill_color=\"blue\", fill_alpha=0.8, source=source)\n\nshow(p)","09096d60":"import pandas as pd\nimport bokeh.sampledata\nbokeh.sampledata.download()\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.stocks import AAPL\ndf = pd.DataFrame(AAPL)\ndf['date'] = pd.to_datetime(df['date'])","1e4ed5be":"from bokeh.io import output_notebook, show\noutput_notebook()","8b7f768e":"p = figure(plot_width=700, plot_height=250, x_axis_type=\"datetime\")\np.line(df['date'], df['close'], color='navy', alpha=0.5)\n\nshow(p)","b51f8f35":"from bokeh.io import output_file, show\noutput_notebook()","b62b288e":"output_file(\"plot.html\")","e4968454":"p = figure(plot_width=700, plot_height=250, x_axis_type=\"datetime\")\np.line(df['date'], df['close'], color='navy', alpha=0.5)\n\nshow(p)   # save(p) will save without opening a new browser tab","385749bc":"from bokeh.io import reset_output\noutput_notebook()\nreset_output()","dd56d3d5":"import jinja2\nfrom bokeh.embed import components","3a35979a":"# IMPORTANT NOTE!! The version of BokehJS loaded in the template should match \n# the version of Bokeh installed locally.\n\ntemplate = jinja2.Template(\"\"\"\n<!DOCTYPE html>\n<html lang=\"en-US\">\n\n<link\n    href=\"http:\/\/cdn.pydata.org\/bokeh\/dev\/bokeh-0.12.7rc3.min.css\"\n    rel=\"stylesheet\" type=\"text\/css\"\n>\n<script \n    src=\"http:\/\/cdn.pydata.org\/bokeh\/dev\/bokeh-0.12.7rc3.min.js\"\n><\/script>\n\n<body>\n\n    <h1>Hello Bokeh!<\/h1>\n    \n    <p> Below is a simple plot of stock closing prices <\/p>\n    \n    {{ script }}\n    \n    {{ div }}\n\n<\/body>\n\n<\/html>\n\"\"\")","e357d6ef":"p = figure(plot_width=700, plot_height=250, x_axis_type=\"datetime\")\np.line(df['date'], df['close'], color='navy', alpha=0.5)\n\nscript, div = components(p)","adf83cd4":"from IPython.display import HTML\nHTML(template.render(script=script, div=div))","51f97cd7":"from flask import Flask\napp = Flask(__name__)\n\n@app.route('\/')\ndef hello_bokeh():\n    return template.render(script=script, div=div)","9fa48488":"# from bokeh.io import export_png\n\n# p = figure(plot_width=1000, plot_height=250, x_axis_type=\"datetime\")\n# p.line(df['date'], df['close'], color='navy', alpha=0.5)\n\n# export_png(p, filename=\"plot.png\")","2ce6d119":"# from IPython.display import Image\n# Image('plot.png')","8ec905e1":"# from bokeh.io import export_svgs\n\n# p = figure(plot_width=800, plot_height=250, x_axis_type=\"datetime\", output_backend='svg')\n# p.line(df['date'], df['close'], color='navy', alpha=0.5)\n\n# export_svgs(p, filename=\"plot.svg\")","82b73cc4":"# Linking and Interactions","605dfe75":"# Data Sources and Transformations","40028dd0":"# Annotation","5b7e8e27":"# Styling and theming","03e22999":"# Presentation Layouts","845acd46":"---\n### 10 Min of Bokeh Graphs\n---\n* [Periodic Table](#Periodic-Table)\n* [Basic Plot](#Basic-Plot)\n* [Styling and theming](#Styling-and-theming)\n* [Annotation](#Annotation)\n* [Data Sources and Transformations](#Data-Sources-and-Transformations)\n* [Presentation Layouts](#Presentation-Layouts)\n* [Linking and Interactions](#Linking-and-Interactions)\n* [Bar and Catrgorical Data](#Bar-and-Catrgorical-Data)\n* [Graph and Network Plots](#Graph-and-Network-Plots)\n* [Geographic Plots](#Geographic-Plots)\n* [Exporting and Embedding](#Exporting-and-Embedding)\n\n---","9b1c924b":"# Periodic Table","91877970":"# Graph and Network Plots","d80fa558":"# Bar and Catrgorical Data","5446a403":"# Exporting and Embedding","1003aebe":"# Basic Plot","20915183":"![](https:\/\/github.com\/bokeh\/bokeh-notebooks\/raw\/49fe8c2d3a06dd2d51c465e1ee6578cc61d6a339\/tutorial\/assets\/bokeh-transparent.png) \n<h2 style=\"text-align:center;\">Bokeh Tutorial<\/h2>","25174510":"# Geographic Plots"}}