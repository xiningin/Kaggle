{"cell_type":{"e05a4b2d":"code","1112a46e":"code","ce93df62":"code","c71a8d84":"code","ee916c3e":"code","a3eab89a":"code","64fa9be6":"code","165029a0":"code","1c6642f1":"code","c43fd5ea":"code","68130e3f":"code","0f5e234e":"code","d1eb863a":"code","3fbe5540":"code","97c05384":"code","cd1c8ea5":"code","82091d7e":"code","1df1d83c":"code","c0f331e3":"code","b97a92c4":"code","f428b36c":"markdown","f2479284":"markdown","2004d77a":"markdown","44f80433":"markdown","7b63696e":"markdown","be9f7ae6":"markdown","54ffcfc4":"markdown","9f8a2a16":"markdown","a575138c":"markdown","091cba29":"markdown"},"source":{"e05a4b2d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1112a46e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA\n\n# #Reading all data files....\ndfs = pd.read_excel('\/kaggle\/input\/irisdata\/Test Analyse de donnes v2.xlsx', sheet_name=\"Data\")\n","ce93df62":"dfs['PR'] = (dfs['Client Value']\/dfs['Panel Value'])*100\ndfs['Dis\/PV'] = dfs['Distance Meter']\/dfs['Panel Value']\ndfs.rename(columns={\"Distance Meter\": \"Distance_Meter\"}, inplace=True)","c71a8d84":"def cat(x):\n    if x<=1000 and x>=0:\n        return \"0-1000\"\n    if x<=2000 and x>1000:\n        return \"1001-2000\"\n    if x<=3000 and x>2000:\n        return \"2001-3000\"  \n    if x<=4000 and x>3000:\n        return \"3001-4000\"  \n    if x<=5000 and x>4000:\n        return \"4001-5000\"  \n    if x<=6000 and x>5000:\n        return \"5001-6000\"  \n    if x<=7000 and x>6000:\n        return \"6001-7000\"  \n    if x<=8000 and x>7000:\n        return \"7001-8000\"  \n    if x<=9000 and x>8000:\n        return \"8001-9000\"\n    if x<=10000 and x>9000:\n        return \"9001-10000\"\n\ndfs['dist_group'] = dfs['Distance_Meter'].apply(lambda x: cat(x))\ndfs.head()","ee916c3e":"dist_client_dfs = dfs.groupby(\"dist_group\",as_index=False)[\"Client Value\"].sum()\nfig = px.bar(dist_client_dfs, x=\"dist_group\", y=\"Client Value\", orientation='v',text=\"Client Value\")\nfig.show()","a3eab89a":"# plt.scatter(dfs['Distance Meter'],dfs['Client Value'])\nfig = px.scatter(dfs, x=\"Distance_Meter\", y=\"Client Value\")\nfig.show()","64fa9be6":"dist_panel_dfs = dfs.groupby(\"dist_group\",as_index=False)[\"Panel Value\"].sum()\n\nfig = px.bar(dist_panel_dfs, x=\"dist_group\", y=\"Panel Value\", orientation='v',text=\"Panel Value\")\nfig.show()","165029a0":"fig = px.scatter(dfs, x=\"Distance_Meter\", y=\"Panel Value\")\nfig.show()","1c6642f1":"df1 = dfs.drop(['Iris Name','Iris Code','PR','Dis\/PV','dist_group'],axis=1)\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(df1)\nkmeans_model = KMeans(n_clusters=3, max_iter=100)\nX = kmeans_model.fit(X_scaled)\nlabels=kmeans_model.labels_.tolist()\nl = kmeans_model.fit_predict(X_scaled)\ndfs['Cluster_Segment'] = l\ndfs.head()","c43fd5ea":"pca = PCA(n_components=2).fit(X_scaled)\ndatapoint = pca.transform(X_scaled)\nget_ipython().run_line_magic('matplotlib', 'inline')\nplt.figure\nlabel1 = [\"#FFFF00\", \"#008000\",\"#0000FF\"]\ncolor = [label1[i] for i in labels]\nplt.scatter(datapoint[:, 0], datapoint[:, 1], c=color)\ncentroids = kmeans_model.cluster_centers_\ncentroidpoint = pca.transform(centroids)\nplt.scatter(centroidpoint[:, 0], centroidpoint[:, 1], marker='^', s=150,c='#000000')\nplt.show()","68130e3f":"# Grouping Penetration rate on the basis of Cluster_Segment\navg_PR_df = dfs.groupby(\"Cluster_Segment\",as_index=False)[\"PR\"].mean()\navg_PR_df.head()","0f5e234e":"# Plotting Penetration rate v\/s Cluster_Segment \nfig = px.bar(avg_PR_df, x=\"Cluster_Segment\", y=\"PR\", orientation='v',text=\"PR\")\nfig.show()","d1eb863a":"# Grouping Client Value on the basis of Cluster_Segment\nclient_share_df = dfs.groupby(\"Cluster_Segment\",as_index=False)[\"Client Value\"].sum()\nclient_share_df.head()","3fbe5540":"# Plotting percentage share of CLient Value across Cluster_Segment\nfig = px.pie(client_share_df, values='Client Value', names='Cluster_Segment', title='Client share across segments')\nfig.show()","97c05384":"dfs['Dis\/PV'].hist(bins=100)","cd1c8ea5":"Disposable_dfs = pd.read_excel('\/kaggle\/input\/irisrevenue\/BASE_TD_FILO_DISP_IRIS_2014.xls',header=5)\nDeclared_dfs = pd.read_excel('\/kaggle\/input\/irisrevenue\/BASE_TD_FILO_DEC_IRIS_2014.xls',header=5)","82091d7e":"merged_df = Disposable_dfs.append(Declared_dfs, ignore_index=True, sort=False)\nmerged_income_df=merged_df[[\"IRIS\",\"LIBIRIS\",\"DISP_MED14\",\"DEC_MED14\"]]\nmerged_income_df['DISP_MED14'].fillna(0,inplace=True)\nmerged_income_df['DEC_MED14'].fillna(0,inplace=True)","1df1d83c":"province_income_df = merged_income_df.groupby(\"LIBIRIS\",as_index=False)[\"DISP_MED14\",\"DEC_MED14\"].sum()","c0f331e3":"sum_column = province_income_df[\"DISP_MED14\"] + province_income_df[\"DEC_MED14\"]\nprovince_income_df[\"total_median_income\"] = sum_column\nile_de_france_df=province_income_df.loc[province_income_df['LIBIRIS'] == 'Ile de France']\nile_de_france_modified=ile_de_france_df.total_median_income\nile_de_france_df.head()","b97a92c4":"def income(x):\n    if int(x) > int(ile_de_france_modified):\n        return \"1\"\n    else:\n        return \"0\"\n\nprovince_income_df['province_Exceding_iledefrance'] = province_income_df['total_median_income'].apply(lambda x: income(x))\nprovince_income_df.head()","f428b36c":"####  Explanation\n   - Province (LIBIRIS) having '1' in \"province_Exceding_iledefrance\" have median income more than \"ile-de-France\" province.\n   - Province (LIBIRIS) having '0' in \"province_Exceding_iledefrance\" have median income less than \"ile-de-France\" province.","f2479284":"### 2.a. Taux de p\u00e9n\u00e9tration moyen pour chaque zone","2004d77a":"# 1. Repr\u00e9senter la r\u00e9partition des clients dans l'espace","44f80433":"###  2.b. Client r\u00e9sidant pour chaque zone","7b63696e":"### Client Value v\/s Distance","be9f7ae6":"#  2. Regrouper les IRIS en 3 zones (primaire, secondaire et tertiaire)","54ffcfc4":"# 3. Identifier les IRIS dont le revenu median est sup\u00e9rieur au revenu median de l'Ile-de-France","9f8a2a16":"####  Explanation\n   - Addition of one field in data tab to assign 'Cluster_Segment' number to each data entry.","a575138c":"# **Import Libraries and Reading Dataset**","091cba29":"### Panel Value v\/s Distance"}}