{"cell_type":{"209603e1":"code","d189cdd5":"code","9fba6284":"code","a8206a44":"code","5fa238d0":"code","68d99e09":"code","f91cfd26":"markdown","b3b76f34":"markdown","a6d3549c":"markdown","42b5e344":"markdown"},"source":{"209603e1":"pip install flaml","d189cdd5":"def reduce_dtypes(df, verbose=True):\n    \"\"\"\n    reduces the datatype of numerical columns to smallest possible. \n    dtypes: \"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"\n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    \n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    int_types = [np.int8, np.int16, np.int32, np.int64]\n    float_types = [np.float16, np.float32, np.float64]\n    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                for int_type in int_types:\n                    if c_min > np.iinfo(int_type).min and c_max < np.iinfo(int_type).max:\n                        df[col] = df[col].astype(int_type)\n                        break\n            else:\n                for float_type in float_types:\n                    if c_min > np.finfo(float_type).min and c_max < np.finfo(float_type).max:\n                        df[col] = df[col].astype(float_type)\n                        break\n    if verbose:\n        end_mem = df.memory_usage().sum() \/ 1024 ** 2\n        print(f\"Mem. usage decreased to {end_mem:.2f} Mb ({100*(start_mem - end_mem)\/start_mem:.1f}% reduction)\")\n    return df","9fba6284":"import numpy as np\nimport pandas as pd\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv', index_col='id')\n\nreduce_dtypes(train)\nreduce_dtypes(test)\n\nX_train, y_train = train.drop('target', axis=1), train[['target']].values.flatten()\nX_test = test","a8206a44":"X_train.head()","5fa238d0":"from flaml import AutoML\n\nautoml = AutoML()\n\nautoml_settings = {\n    \"time_budget\": 60 * 60, # 60 min\n    \"metric\": 'roc_auc',\n    \"task\": 'classification',\n    \"log_file_name\": \"nov.log\",\n    \"estimator_list\": ['lgbm', 'xgboost', 'catboost', 'rf', 'extra_tree'],\n    \"ensemble\": True,\n    \"seed\": 1337,\n    \"n_jobs\": 1, # stacking crashes with -1\n}\n\nautoml.fit(X_train=X_train, y_train=y_train, **automl_settings)","68d99e09":"preds = automl.predict_proba(X_test)\n\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')\nsubmission[\"target\"] = preds[:, -1]\nsubmission.to_csv(\"submission.csv\", index=False)","f91cfd26":"## Load the data","b3b76f34":"## Predict","a6d3549c":"# Quick low effort AutoML Solution using FLAML\nFor this minimal solution, I entered the data as is into FLAML and let the library run different models for 20 minutes to find a solid solution. This allows a quick submission which is close to best submissions and requires nearly no effort.","42b5e344":"# Fit the Model"}}