{"cell_type":{"78467c1c":"code","a93444eb":"code","26e0b3f8":"code","f2b30247":"code","110796ae":"code","35b8c24a":"code","2d4f5b90":"code","2038dfa8":"code","66a42922":"code","16bc8522":"code","260d11c9":"code","26dbbcb6":"code","4f90b5fa":"code","f251b7ae":"code","927dd63c":"code","62e417ed":"code","4ec5d15e":"code","fb9bf186":"code","e1943628":"code","32fa8396":"code","29dd17bc":"code","ec080b79":"code","721fd77a":"code","271b1cfe":"code","79889c5c":"code","106cdf9e":"code","e4deb683":"code","14894167":"markdown","ad0f63c8":"markdown","0c01301e":"markdown","7447b1a5":"markdown"},"source":{"78467c1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nprint('Numpy imported.')\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nprint('Panda imported.')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a93444eb":"train_passenger_info = pd.read_csv('..\/input\/titanic\/train.csv')\nprint(\"\\'train.csv imported.'\")","26e0b3f8":"train_passenger_info.head()","f2b30247":"train_passenger_info.info()","110796ae":"df_passenger = train_passenger_info.iloc[:, [1, 2, 4, 5, 6, 7, 9, 10, 11]]\ndf_passenger.head()","35b8c24a":"passenger_survival = df_passenger.pop('Survived')\npassenger_survival.head()","2d4f5b90":"df_passenger.info()","2038dfa8":"from sklearn.impute import SimpleImputer\nsimputer_age = SimpleImputer(strategy = 'mean')\ndf_passenger['Age'] = simputer_age.fit_transform(np.array(df_passenger['Age']).reshape(-1 ,1))","66a42922":"simputer_embarked = SimpleImputer(strategy = 'most_frequent')\ndf_passenger['Embarked'] = simputer_embarked.fit_transform(np.array(df_passenger['Embarked']).reshape(-1 ,1))","16bc8522":"df_passenger.drop('Cabin', axis = 1, inplace = True)","260d11c9":"passenger_embarked = df_passenger.pop('Embarked')\ndf_passenger['Embarked'] = passenger_embarked\ndf_passenger.head()","26dbbcb6":"from sklearn.preprocessing import LabelEncoder\nlencoder_sex = LabelEncoder()\ndf_passenger['Sex'] = lencoder_sex.fit_transform(df_passenger['Sex'])\ndf_passenger.head()","4f90b5fa":"lencoder_embarked = LabelEncoder()\ndf_passenger['Embarked'] = lencoder_embarked.fit_transform(df_passenger['Embarked'].astype('str'))\ndf_passenger.head()","f251b7ae":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(df_passenger, passenger_survival, train_size = 0.7)","927dd63c":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier()\nrfc.fit(x_train, y_train)\ny_pred = rfc.predict(x_test)","62e417ed":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","4ec5d15e":"test_passenger_info = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_passenger_info.head()","fb9bf186":"df_test_passenger = test_passenger_info.iloc[:, [1, 3, 4, 5, 6, 8, 9, 10]]\ndf_test_passenger.head()","e1943628":"df_test_passenger.info()","32fa8396":"df_test_passenger['Age'] = simputer_age.transform(np.array(df_test_passenger['Age']).reshape(-1 ,1))","29dd17bc":"simpute_fare = SimpleImputer()\ndf_test_passenger['Fare'] = simpute_fare.fit_transform(np.array(df_test_passenger['Fare']).reshape(-1, 1))","ec080b79":"df_test_passenger.drop('Cabin', axis = 1, inplace = True)\ndf_test_passenger.head()","721fd77a":"passenger_embarked = df_test_passenger.pop('Embarked')\ndf_test_passenger['Embarked'] = passenger_embarked\ndf_test_passenger.head()","271b1cfe":"df_test_passenger['Sex'] = lencoder_sex.transform(df_test_passenger['Sex'])\ndf_test_passenger.head()","79889c5c":"df_test_passenger['Embarked'] = lencoder_embarked.transform(df_test_passenger['Embarked'].astype('str'))\ndf_test_passenger.head()","106cdf9e":"rfc.fit(df_passenger, passenger_survival)\nprediction = rfc.predict(df_test_passenger)\nprint(prediction)","e4deb683":"output = pd.DataFrame({'PassengerId': test_passenger_info.iloc[:, 0], 'Survived': prediction})\noutput.to_csv('my_submission.csv', index = False)\nprint(output)","14894167":"*Hi, Kaggler.*\n\nI am Raymond.\n\nI am currently learning how to programme and all data science related matters through internet and online materials. I have heard that Kaggle is one of the largest platforms for the data scientists and analysts around the world from the very beginning of my studies, and I hope that I could learn from the best in the world. (no wonder all of you are one of the best.)\n\nI am sorry that my model is not the best one, but please give me some advices on how I could build up my model as well as how to present the problem graphically. From time to time, I will revise my notebook and be more accurate and more user-friendly.\n\nThe Titanic Problem is the very first (definitely not the easliest) problem on Kaggle, as one of the starting problem to let us familiar with the platform.\n\nReading the competition's description carefully, [Titanic: Machine Learning from Disaster](https:\/\/www.kaggle.com\/c\/titanic), is a good practice for any data project. Make sure that you know what you need to do and predict.\n\nLet see what I have done for this problem.\n\n*Spoiler Alert: I only got 0.74880 in accuracy score.*","ad0f63c8":"*pd.info()*\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.info.html","0c01301e":"# Newcomer Challenge: The Titanic Problem","7447b1a5":"**Exploratory Data Analysis (EDA)**\n\n[*pd.head()*](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.head.html)\n\n\n\nI use the code - *pd.head()* to show the first 5 rows in the dataset, and see what the data actually looks like.\n\nAs shown, there are a total of 12 columns provided in the dataset, and could be separated as the features and the label. The column of 'Survived' is absence in the test.csv, so it should be the label in this test, the column to be predicted. By contrast, the columns other than 'Survived', e.g. the columns of 'Passenger Class', 'Sex' and 'Age', should be the features in this test, and may have some relations on their survival rate.\n\nMore than counting how many columns the file has, we could also use this to see how these personal particulars are recorded and presented. There are 3 columns which are too personal for data analysis, namely the columns of 'Passenger ID', 'Name' and 'Ticket'. \"Passenger ID\" is just a serial number for recording purposes, and it is a common practice for the database administrator and user to use this to refer a single row (a passenger). It shall not contain any information in relation to the passengers' survival rate. \"Name\", the name the passenger has may sometimes change your survival rate, depending on your social status. But, it is very hard to generalize a rule for this column since everyone has a difficult name.\n\nFinally, for the 'Ticket' column, we could see that the 'Ticket' column is recorded in a more complicated manner than the usual one, e.g. Area Number (A, B, C, ...) and Room Number (01, 02, 03, ...). It could be much more difficult than we thought in pre-processing, given varying formats in the way of recording.\n\nTherefore, I will exclude the columns of 'Passenger ID', 'Name' and 'Ticket'."}}