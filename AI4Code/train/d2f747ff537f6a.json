{"cell_type":{"edbeb2ef":"code","82d6d846":"code","0fef5131":"code","27923d62":"code","1834cd3f":"code","a2d64a7d":"code","0de3bda8":"code","5063507b":"code","651d851e":"code","b2b2b1f6":"code","a5701186":"markdown","307f0bff":"markdown","f1d5d1ce":"markdown","de8e8005":"markdown","098fb8d2":"markdown"},"source":{"edbeb2ef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        pass\n# Any results you write to the current directory are saved as output.","82d6d846":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport pandas as pd\nimport seaborn as sns","0fef5131":"data = pd.read_csv('\/kaggle\/input\/severstal-steel-defect-detection\/train.csv')\nprint(data.head())","27923d62":"ImageId = []\nClassId = []\nfor i in data.ImageId_ClassId:\n    ImageId.append(i.split('_')[0])\n    ClassId.append(i.split('_')[1])\nEncodedPixels =  list(data.EncodedPixels)\ndata2 = pd.DataFrame({'ImageId':ImageId,'ClassId':ClassId,'EncodedPixels':EncodedPixels})\ndata2.head()","1834cd3f":"data2.fillna(0,inplace=True)\ndata2['ClassId'] = data2['ClassId'].astype(int)\ndata2.head()\n","a2d64a7d":"sns.countplot(data2.ClassId[data2.EncodedPixels!=0])\nplt.show()","0de3bda8":"data2['ClassId'].dtype","5063507b":"Imagecount = []\nfor i in range(1,5):\n    counter = 0\n    for j in range(data2.shape[0]):\n        if data2.EncodedPixels[j]!=0:\n            if data2.ClassId[j]==i:\n                counter+=1\n    Imagecount.append(counter)\nprint(Imagecount)","651d851e":"def rleToMask(rleString,height,width):\n    rows,cols = height,width\n    rleNumbers = [int(numstring) for numstring in rleString.split(' ')]\n    rlePairs = np.array(rleNumbers).reshape(-1,2)\n    img = np.zeros(rows*cols,dtype=np.uint8)\n    for index,length in rlePairs:\n        index -= 1\n        img[index:index+length] = 255\n    img = img.reshape(cols,rows)\n    img = img.T\n    return img","b2b2b1f6":"img = cv2.imread(os.path.join('\/kaggle\/input\/severstal-steel-defect-detection\/train_images',data2.ImageId[0]))\nimg = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\nmask = rleToMask(data2.EncodedPixels[0],img.shape[0],img.shape[1])\n\nmasked_image = cv2.addWeighted(img,0.8,mask,1,1)\nplt.imshow(masked_image,cmap='gray')\nplt.show()\n","a5701186":"Importing the necessary libraries, I've tried to be as simple and basic as I can for a better understanding of the data for everyone.","307f0bff":"Decoding the Encoded Pixels and creating a mask. The rle to mask code snippet can be found here https:\/\/www.kaggle.com\/robertkag\/rle-to-mask-converter","f1d5d1ce":"below I count total number of instances for each class of images","de8e8005":"We have 4 class of defects labeled 1-4, and for each image the presence of the defect is given in encoded pixels (if the value in encoded pixels is a series of numbers then the defect is present at those pixels, if its NaN then that defect is not present in the image)\n\nI've replaced NaN with 0 for simplicity\nand converted the datatype of ClassId to integer","098fb8d2":"Let's separate the image IDs and Class IDs, so that we can read the images and corresponding encodings. I've created an entire new dataframe (by doing this I will be able to store a backup of original data)"}}