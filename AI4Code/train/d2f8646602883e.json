{"cell_type":{"64d65cc7":"code","e60d5887":"code","88e95d6d":"code","8c4e7f62":"code","0bc8051d":"code","cd459657":"code","0bc08829":"code","7a6be082":"code","f5308ffd":"code","d5f46246":"code","387137d9":"code","afc0b42d":"code","7a374aa8":"code","1f6f6020":"code","9b7801fd":"code","ffa4f88d":"code","8f161ab0":"code","73fc7e06":"code","bddf26c6":"code","5281d67e":"code","08cccc0a":"code","88aa9450":"code","0be697be":"code","e815a4c3":"code","bcb35278":"code","2852794b":"markdown","98a98684":"markdown","65bb5f3b":"markdown"},"source":{"64d65cc7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e60d5887":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","88e95d6d":"import zipfile\n\nfiles_to_unzip = ['test1' , 'train']\n\nfor zip_file in files_to_unzip:\n    with zipfile.ZipFile(\"..\/input\/dogs-vs-cats\/{}.zip\".format(zip_file), \"r\") as z:\n        z.extractall(\".\")\n        print(\"{} unzipped\".format(zip_file))","8c4e7f62":"filenames = os.listdir(\"..\/working\/train\")\n\ncategories = []\n\nfor file_name in filenames:\n    if file_name.split('.')[0] == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n        \ndf = pd.DataFrame({\n    'filename' : filenames,\n    'category' : categories\n})\n\ndf.head()","0bc8051d":"import seaborn as sns\n\nsns.countplot(x = 'category', data = df)","cd459657":"from tensorflow.keras.preprocessing.image import load_img, ImageDataGenerator\nimport random\nimport matplotlib.pyplot as plt\n\nsample = random.choice(filenames)\n\nsample_image = load_img(\"..\/working\/train\/\" + sample)\n\nplt.imshow(sample_image)","0bc08829":"image_size = 128\n\ninput_shape = (image_size, image_size, 3)\n\n","7a6be082":"simple_model = keras.Sequential([\n    \n    layers.Conv2D(filters = 32, kernel_size = 3, activation = 'relu', input_shape = input_shape),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(),\n    layers.Dropout(0.25),\n    \n    layers.Conv2D(filters = 64, kernel_size = 3, activation = 'relu'),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(),\n    layers.Dropout(0.25),\n    \n    layers.Conv2D(filters = 128, kernel_size = 3, activation = 'relu'),\n    layers.BatchNormalization(),\n    layers.MaxPool2D(),\n    layers.Dropout(0.25),\n    \n    layers.Flatten(),\n    \n    layers.Dense(512, activation = 'relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.25),\n    \n    layers.Dense(1, activation = 'sigmoid'),\n    \n    \n])\n\nsimple_model.summary()","f5308ffd":"simple_model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])","d5f46246":"\n\ndf[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) \n\n","387137d9":"from sklearn.model_selection import train_test_split\n\ntrain_df, validate_df = train_test_split(df, test_size = 0.2)\ntrain_df = train_df.reset_index()\nvalidate_df = validate_df.reset_index()","afc0b42d":"train_datagen = ImageDataGenerator(\n    \n    rescale = 1.\/255,\n    rotation_range = 15, \n    shear_range = 0.1,\n    zoom_range = 0.2,\n    horizontal_flip = True,\n    width_shift_range = 0.1,\n    height_shift_range = 0.1,\n)","7a374aa8":"validation_datagen = ImageDataGenerator(rescale = 1.\/255)","1f6f6020":"batch_size = 150","9b7801fd":"train_generator = train_datagen.flow_from_dataframe(train_df, \n                                                    \"..\/working\/train\/\", \n                                                    x_col = 'filename', \n                                                    y_col = 'category',\n                                                    class_mode = 'binary',\n                                                    target_size = (128, 128), \n                                                    batch_size = batch_size,\n                                                   )","ffa4f88d":"validation_generator = validation_datagen.flow_from_dataframe(validate_df, \n                                                    \"..\/working\/train\/\", \n                                                    x_col = 'filename', \n                                                    y_col = 'category',\n                                                    class_mode = 'binary',\n                                                    target_size = (128, 128), \n                                                    batch_size = batch_size,\n                                                   )","8f161ab0":"example_df = train_df.sample(n=1).reset_index(drop = True)\n\nexample_generator = train_datagen.flow_from_dataframe(example_df,\n                                                      \"..\/working\/train\",\n                                                     x_col = 'filename',\n                                                     y_col = 'category',\n                                                    \n                                                     )\n\n","73fc7e06":"plt.figure(figsize=(12, 12))\nfor i in range(0, 9):\n    plt.subplot(3, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","bddf26c6":"from tensorflow.keras.callbacks import EarlyStopping\n\nearlystop = EarlyStopping(patience=10)\n\ncallbacks = [earlystop]\n","5281d67e":"\n\nhistory = simple_model.fit(train_generator,\n                                epochs=5,     # 20\n                                validation_data = validation_generator,\n                                validation_steps = validate_df.shape[0]\/\/batch_size,     \n                                steps_per_epoch = train_df.shape[0]\/\/batch_size,\n                                callbacks = callbacks\n                                )\n\n","08cccc0a":"history_frame = pd.DataFrame(history.history)\n\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['accuracy', 'val_accuracy']].plot()","88aa9450":"from tensorflow.keras.applications.vgg16 import VGG16\n\npretrained_base = VGG16(input_shape = input_shape, include_top = False, weights = 'imagenet')\n\npretrained_base.trainable = False","0be697be":"x = layers.Flatten()(pretrained_base.output)\n\nx = layers.Dense(512, activation = 'relu')(x)\n\nx = layers.Dropout(0.5)(x)\n\nx = layers.Dense(1, activation = 'sigmoid')(x)\n\nmodel = keras.models.Model(pretrained_base.input, x)\n\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\nmodel.summary()","e815a4c3":"history_vgg = model.fit(train_generator,\n                    epochs = 10,     # 20\n                    validation_data = validation_generator,\n                    validation_steps = validate_df.shape[0]\/\/batch_size,     \n                    steps_per_epoch = train_df.shape[0]\/\/batch_size,\n                    callbacks = callbacks\n                    )","bcb35278":"history_vgg_frame = pd.DataFrame(history_vgg.history)\n\nhistory_vgg_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_vgg_frame.loc[:, ['accuracy', 'val_accuracy']].plot()","2852794b":"## VGG16","98a98684":"### See some sample images","65bb5f3b":"### Will show a random sample image from train set"}}