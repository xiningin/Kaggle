{"cell_type":{"0657847d":"code","6fd34a27":"code","bc9f50b8":"code","2d9d061e":"code","c4956b07":"code","1ec7ba56":"code","93b17543":"code","6e0b9509":"code","5f6837c5":"code","81463cb7":"code","31c5ce20":"code","823673bf":"code","96d0e580":"code","7bdd7c49":"code","afc8705b":"code","930678a4":"markdown","9fa6663d":"markdown","bdd89431":"markdown"},"source":{"0657847d":"# Para os CSVs\nimport pandas as pd","6fd34a27":"# Para o modelo usaremos FASTAI\nfrom fastai.vision.all import *\nfrom fastai.callback.tracker import SaveModelCallback","bc9f50b8":"# Para acessar os arquivos\nimport os","2d9d061e":"# Salvamos o caminho padr\u00e3o em uma vari\u00e1vel:\npath = Path('..\/input\/cassava-leaf-disease-classification')","c4956b07":"df_train = pd.read_csv(path\/'train.csv')\ndf_train.head()","1ec7ba56":"# Carregar o DataSet e redimensionar as imagens \ndls = ImageDataLoaders.from_df(df_train, path=path, folder='train_images', item_tfms=Resize(224), valid_pct=0.1, seed=42, bs=64, batch_tfms=aug_transforms())\ndls.show_batch()","93b17543":"# cria modelo e uma callback para verificar e salvar o melhor modelo ap\u00f3s cada \u00e9poca\nlearn = cnn_learner(dls, resnet18, metrics=[error_rate,accuracy], pretrained=False, path='..\/Learner')\nsave_callback = SaveModelCallback(fname='best_model', with_opt=True, monitor='valid_loss', reset_on_fit=False) \n# o par\u00e2metro monitor informa como se deve se verificar se um modelo \u00e9 melhor que outro\n# valid_loss - para menor loss no cjto de valida\u00e7\u00e3o\n#train_loss - para menor loss no cjto de treino","6e0b9509":"# caso for reiniciar uma execu\u00e7\u00e3o\n# carregando os melhores pesos\n#learn = learn.load('best_model')\n# carregando os \u00faltimos pesos\n#learn = learn.load('last_model')","5f6837c5":"# treinamento, verificando se obteve um melhor modelo a cada \u00e9poca e salvando caso for um melhor modelo como best_model\nnr_epochs = 25\nlearn.fit(nr_epochs, cbs=save_callback)","81463cb7":"# plota um gr\u00e1fico de loss\nlearn.recorder.plot_loss()","31c5ce20":"# salva os ultimos pesos (n\u00e3o necessariamente o melhor)\nlearn.save('last_model')","823673bf":"learn.save('best_model')","96d0e580":"learn.export(\".\/export.pth\")","7bdd7c49":"submission_df = pd.read_csv(path\/'sample_submission.csv')\n\ntest_data_path = submission_df['image_id'].apply(lambda x: path\/'test_images'\/x)\ntst_dl = learn.dls.test_dl(test_data_path)\npredictions = learn.tta(dl = tst_dl, n=10)\n\nsubmission_df['label'] = np.argmax(predictions[0],axis=1)\nsubmission_df","afc8705b":"submission_df.to_csv('submission.csv',index=False)","930678a4":"Ap\u00f3s alguns testes iniciais e compara\u00e7\u00e3o entre os modelos Alexnet, Resnet50 e Resnet18, constatou-se que o modelo que apresentou melhores resultados nas primeiras \u00e9pocas foi o Resnet18. Portanto, procederemos o treinamento de mais \u00e9pocas com este modelo.","9fa6663d":"Iniciamos importando as principais bibliotecas que ser\u00e3o usadas durante a execu\u00e7\u00e3o.","bdd89431":"S\u00e3o executadas **25** \u00e9pocas de treinamento. Ap\u00f3s estes treinamentos, o modelo come\u00e7a a convergir e n\u00e3o apresenta melhoras consider\u00e1veis."}}