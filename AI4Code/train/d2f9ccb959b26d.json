{"cell_type":{"c0c3abc0":"code","8af83dcb":"code","b080634f":"code","daaec002":"code","ae229877":"code","07112009":"code","8278ce5d":"code","bb90ed33":"code","1cd83545":"code","6559e8d7":"code","e0020bec":"code","bd6d8f3b":"code","c9990e49":"code","63109cee":"code","fd0f05aa":"code","4c82c3e0":"code","1cd0d31c":"code","87930354":"code","680fa143":"code","29c3e39f":"code","e9133d4f":"code","ea5952b2":"code","612e69ae":"code","1be46be5":"code","ed1a844f":"code","4b9f9bf5":"code","8374de0e":"code","37b3b429":"code","8250eff8":"code","13735a25":"code","a490e54f":"code","5cf70fe7":"code","513ef4a5":"code","641fbdfc":"code","46db78d5":"code","7d6a9f77":"markdown","17fed612":"markdown"},"source":{"c0c3abc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8af83dcb":"import pandas as pd\nimport numpy as np\n\ndato = pd.DataFrame(pd.read_csv(\"..\/input\/train_V2.csv\"))","b080634f":"genData = dato.select_dtypes(include=['int64','int32','float64','float32'])\ngenData = genData.dropna(axis=0)\nY = genData['winPlacePerc']","daaec002":"genData = genData.drop(['winPlacePerc'],axis = 1).copy()\nselectedFeatures = genData.columns.values.tolist()\nprint(selectedFeatures)","ae229877":"genData = np.array(genData)","07112009":"for i in range(0,len(genData.T)):\n  genData.T[i] = genData.T[i]+1","8278ce5d":"genData = pd.DataFrame(genData)","bb90ed33":"X = genData\n","1cd83545":"print(X.head(),Y.head())","6559e8d7":"def line(m,X):\n  return np.dot(m,X.T)\ndef cost(m,X,Y):\n  return np.mean((line(m,X)-Y)**2)\nY = np.array(Y)\nY = np.reshape(Y,[1,len(Y)])","e0020bec":"def derivative(m,X,Y):\n  same = 2*(line(m,X)-Y)\n  return np.dot(same,X)\n","bd6d8f3b":"iters = 100\nlr = 0.000000000000009\nerror = 0\naccPlot = []\nm = np.random.randn(1,len(X.T))\/1000000\nfor i in range(iters):\n    m = m-lr*derivative(m,X,Y)\n#     error.append(cost(m,X,Y))\n    if(i%10==0):\n        predictions = line(m,X)\n        error = cost(m,X,Y)\n        acc = 100 - (error\/np.mean(Y**2))*100\n        accPlot.append(int(acc*10))\n        print(\"Accuracy: \",acc,\"%\", 'Iter: ',i)\n    #     if(i%10==0):\n    #         print(\"Error: \",error[i],\"Iter: \",i)\n  \nimport matplotlib.pyplot as plt\nplt.plot(accPlot)","c9990e49":"predictions = line(m,X)\nerror = cost(m,X,Y)\nacc = 100 - (error\/np.mean(Y**2))*100\nprint(\"Accuracy: \",acc,\"%\")","63109cee":"testData = pd.DataFrame(pd.read_csv(\"..\/input\/test_V2.csv\"))\nID = testData['Id']","fd0f05aa":"testData = testData[selectedFeatures]","4c82c3e0":"testData = np.array(testData)\nfor i in range(0,len(testData.T)):\n  testData.T[i] = testData.T[i]+1","1cd0d31c":"testingPrediction = line(m,testData)","87930354":"testingPrediction.shape","680fa143":"testingPrediction = np.reshape(testingPrediction,[len(testingPrediction.T)])\nsubDataFrame = pd.DataFrame({\n    'Id':ID,\n    'winPlacePerc':testingPrediction\n})","29c3e39f":"subDataFrame.to_csv(\"PUBGSubmission.csv\",encoding='utf-8',index=False)","e9133d4f":"subDataFrame","ea5952b2":"test = pd.DataFrame(pd.read_csv(\"PUBGSubmission.csv\"))","612e69ae":"print(Y)","1be46be5":"import tensorflow as tf\n","ed1a844f":"NumNeurons = len(X.T)\nDataIn = tf.placeholder(tf.float64,[None,NumNeurons])\nLabel = tf.placeholder(tf.float64,[None,1])\nW1 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW1Out = tf.nn.sigmoid(tf.matmul(DataIn,W1))\nW2 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW2Out = tf.nn.sigmoid(tf.matmul(W1Out,W2))\nW3 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW3Out = tf.nn.sigmoid(tf.matmul(W2Out,W3))\nW4 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW4Out = tf.nn.sigmoid(tf.matmul(W3Out,W4))\nW5 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW5Out = tf.nn.sigmoid(tf.matmul(W4Out,W5))\nW6 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW6Out = tf.nn.sigmoid(tf.matmul(W5Out,W6))\nW7 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW7Out = tf.nn.sigmoid(tf.matmul(W6Out,W7))\nW8 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW8Out = tf.nn.sigmoid(tf.matmul(W7Out,W8))\nW9 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW9Out = tf.nn.sigmoid(tf.matmul(W8Out,W9))\nW10 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW10Out = tf.nn.sigmoid(tf.matmul(W9Out,W10))\nW11 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW11Out = tf.nn.sigmoid(tf.matmul(W10Out,W11))\nW12 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW12Out = tf.nn.sigmoid(tf.matmul(W11Out,W12))\nW13 = tf.Variable(np.random.randn(NumNeurons,NumNeurons))\nW13Out = tf.nn.sigmoid(tf.matmul(W12Out,W13))\nW14 = tf.Variable(np.random.randn(NumNeurons,1))\nFinalOut = tf.nn.sigmoid(tf.matmul(W13Out,W14))\nprint(FinalOut.shape,Label.shape)","4b9f9bf5":"CostFunction = tf.reduce_mean(tf.square(FinalOut-Label))\nOptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(CostFunction)","8374de0e":"Init = tf.global_variables_initializer()","37b3b429":"X = pd.DataFrame(X)\nY = pd.DataFrame(Y)\nY = Y.T\nwith tf.Session() as S:\n    Epochs = 900\n    S.run(Init)\n    error = []\n    for i in range(Epochs):\n        RandomIndice = np.random.randint(0,len(X),size = 20000)\n        Data2Feed = {DataIn:np.array(X.iloc[RandomIndice]),\n                    Label:np.array(Y.iloc[RandomIndice]).reshape(20000,1)}\n        S.run(Optimizer,feed_dict = Data2Feed)\n        CE = S.run([CostFunction],feed_dict=Data2Feed)\n        if(i%100==0):\n            print(\"Error: \",CE,\"Iters: \",i)\n        error.append(CE)\n        \n        TrainedThetas = S.run([W1,W2,W3,W4,W5,W6,W7,W8,W9,W10,W11,W12,W13,W14])\n        \nplt.plot(error)\nplt.show()","8250eff8":"\ndef sigmoid(x):\n    return 1\/(1+np.exp(x))\nHL1Out = sigmoid(np.dot(testData,TrainedThetas[0]))\nHL2Out = sigmoid(np.dot(HL1Out,TrainedThetas[1]))\nHL3Out = sigmoid(np.dot(HL2Out,TrainedThetas[2]))\nHL4Out = sigmoid(np.dot(HL3Out,TrainedThetas[3]))\nHL5Out = sigmoid(np.dot(HL4Out,TrainedThetas[4]))\nHL6Out = sigmoid(np.dot(HL5Out,TrainedThetas[5]))\nHL7Out = sigmoid(np.dot(HL6Out,TrainedThetas[6]))\nHL8Out = sigmoid(np.dot(HL7Out,TrainedThetas[7]))\nHL9Out = sigmoid(np.dot(HL8Out,TrainedThetas[8]))\nHL10Out = sigmoid(np.dot(HL9Out,TrainedThetas[9]))\nHL11Out = sigmoid(np.dot(HL10Out,TrainedThetas[10]))\nHL12Out = sigmoid(np.dot(HL11Out,TrainedThetas[11]))\nHL13Out = sigmoid(np.dot(HL12Out,TrainedThetas[12]))\nFOut = sigmoid(np.dot(HL13Out,TrainedThetas[13]))\n\nprint(np.shape(FOut))","13735a25":"testingPrediction = FOut\ntestingPrediction = np.reshape(testingPrediction,[len(testingPrediction)])\nsubDataFrame = pd.DataFrame({\n    'Id':ID,\n    'winPlacePerc':testingPrediction\n})\n","a490e54f":"subDataFrame.to_csv(\"PUBGSubmissionNeuralNet.csv\",encoding='utf-8',index=False)","5cf70fe7":"Y.head()","513ef4a5":"import numpy as np\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X, Y)\nllSKPrd = reg.predict(testData)","641fbdfc":"testingPrediction = llSKPrd\ntestingPrediction = np.reshape(testingPrediction,[len(testingPrediction)])\nsubDataFrame = pd.DataFrame({\n    'Id':ID,\n    'winPlacePerc':testingPrediction\n})\n","46db78d5":"subDataFrame.to_csv(\"PUBGSubmissionLinRegSL.csv\",encoding='utf-8',index=False)","7d6a9f77":"# Testing","17fed612":"## Creating Neural Network | Till 1.00 AM"}}