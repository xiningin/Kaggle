{"cell_type":{"76733442":"code","6d3ab050":"code","9308be55":"code","b59cb6e1":"code","5dee1de4":"code","2fd77297":"code","3bf7067c":"code","b6afd127":"code","076f3f51":"code","df40940e":"code","b811ca88":"code","8c8eec2c":"code","1f73264a":"code","b5a61168":"code","c5b43c62":"code","14a3d35d":"code","c2ddcd94":"markdown","659097d5":"markdown","82b559f2":"markdown","924c18ee":"markdown","f9e5c9f5":"markdown","f5cf8d89":"markdown","c00ac72f":"markdown","3b1181f9":"markdown","4bacdec3":"markdown","97e7286a":"markdown","04a444bd":"markdown","b517f848":"markdown","d8e20a36":"markdown","5c5e2c4c":"markdown","b1586382":"markdown","653b2239":"markdown","33e0e634":"markdown","2981a809":"markdown","b2933ae3":"markdown","86007feb":"markdown","81c25b3b":"markdown","822d3113":"markdown","7f06146c":"markdown","728189bd":"markdown","2ac821d6":"markdown","a168a912":"markdown","18548fd4":"markdown","042da495":"markdown"},"source":{"76733442":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport cv2\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array, array_to_img\nfrom keras.models import Model\n\ntrain = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\n\nimages = pd.DataFrame()\ndef split_dataset(x,x_train):\n    train_sub = train[train['label']==x].sample(4) #I will only be using 4 examples from each number\n    x_train = x_train.append(train_sub,ignore_index=True)\n    return x_train\n\nfor i in range (10):\n    images = split_dataset(i,images)\n\nprint(images.head(4))\n\nimages = images.drop(['label'],axis = 1)\nimages = images.values.reshape([-1,28,28,1]) ","6d3ab050":"def display_one (a):\n    plt.imshow(a,cmap = 'gray')\n    plt.axis('off') \n    plt.show()\ndef display(images):\n    y = 0\n    for i in range (10):\n        plt.subplot(141), plt.imshow(images[y],cmap='gray')\n        plt.axis('off')\n        plt.subplot(142), plt.imshow(images[y+1],cmap='gray')\n        plt.axis('off')\n        plt.subplot(143), plt.imshow(images[y+2],cmap='gray')\n        plt.axis('off')\n        plt.subplot(144), plt.imshow(images[y+3],cmap='gray')\n        plt.axis('off')\n        y+=4\n        plt.show()\n\ndef display_change (images, func):\n    y = 0\n    for i in range (10):\n        plt.subplot(181), plt.imshow(images[y],cmap='gray')\n        plt.axis('off')\n        plt.subplot(182), plt.imshow(images[y+1],cmap='gray')\n        plt.axis('off')\n        plt.subplot(183), plt.imshow(images[y+2],cmap='gray')\n        plt.axis('off')\n        plt.subplot(184), plt.imshow(images[y+3],cmap='gray')\n        plt.axis('off')\n        plt.subplot(185), plt.imshow(func(images[y]),cmap='gray')\n        plt.axis('off')\n        plt.subplot(186), plt.imshow(func(images[y+1]),cmap='gray')\n        plt.axis('off')\n        plt.subplot(187), plt.imshow(func(images[y+2]),cmap='gray')\n        plt.axis('off')\n        plt.subplot(188), plt.imshow(func(images[y+3]),cmap='gray')\n        plt.axis('off')\n        y+=4\n        plt.show()\ndef size(img):\n    img = array_to_img(img, scale = False)\n    img = img.resize((100,100))\n    img = img.convert(mode = 'RGB')\n    img = img_to_array(img)\n    return img.astype(np.float64)\n    \nresized = []\nfor i in images:\n    resized.append(size(i))\n    \ndisplay(resized)","9308be55":"resized = np.array(resized)\ndef normalized (img):\n    return img\/255.0\n\ndisplay_change(resized,normalized)","b59cb6e1":"def averaging(img):\n    return cv2.blur(img,(5,5))\n\ndisplay_change(resized,averaging)","5dee1de4":"def gaussian(img):\n    return cv2.GaussianBlur(img,(5,5),0)\n\ndisplay_change(resized,gaussian)","2fd77297":"def median(img):\n    return cv2.medianBlur(np.float32(img),3)\n\ndisplay_change(resized, median)","3bf7067c":"def bilateral(img):\n    return cv2.bilateralFilter(img.astype(np.uint8),9,75,75)\n\ndisplay_change(resized,bilateral)","b6afd127":"kernel = np.ones((5,5),np.uint8)\n\ndef dilation(img):\n    return cv2.dilate(img,kernel,iterations = 1)\n\ndisplay_change(resized,dilation)","076f3f51":"def dilation_1(img):\n    return cv2.dilate(img,kernel,iterations = 5)\n\ndisplay_change(resized,dilation_1)","df40940e":"kernel = np.ones((10,10),np.uint8)\n\n\ndisplay_change(resized,dilation)","b811ca88":"kernel = np.ones((5,5), np.uint8) \n\ndef erosion(img):\n    return cv2.erode(img,kernel,iterations = 1)\n\ndisplay_change(resized,erosion)","8c8eec2c":"def erode_1(img):\n    return cv2.erode(img,kernel,iterations = 2)\n\ndisplay_change(resized,erode_1)","1f73264a":"kernel = np.ones((10,10),np.uint8)\n\n\ndisplay_change(resized,erosion)","b5a61168":"kernel = np.ones((5,5),np.uint8)\n\ndef closing(img):\n    return erosion(dilation(img))\n\ndisplay_change(resized,closing)","c5b43c62":"def opening(img):\n    return dilation(erosion(img))\n\ndisplay_change(resized,opening)","14a3d35d":"kernel_sharpening = np.array([[-2,-2,-2],\n                             [-2,25,-2],\n                             [-2,-2,-2]])\n\ndef sharpening(img):\n    return cv2.filter2D(img,-1,kernel_sharpening)\n\ndisplay_change(resized,sharpening)","c2ddcd94":"**Thank you. Hopefully this helped you out. Feel free to comment below on any suggestions, comments, or concerns.**","659097d5":"And finally, edge sharpening is a useful tool, especially if your dataset has many labelled images with very similar features and edge sharpening can help make them more defined. Here, edge sharpening uses the function filter2D, by passing the kernel through, which increases the difference between the central element and its surrounding elements, making the distinction. This distinction can be more helpful for image EDAs and understanding the data better or possibly for feature engineering.\n\n![](https:\/\/static.packt-cdn.com\/products\/9781785283932\/graphics\/B04554_02_11.jpg)","82b559f2":"**Compound Operations**","924c18ee":"# **Importing Libraries and Establishing the Dataframe**","f9e5c9f5":"There are also examples of compound opeartions in morphology. The two main ones are opening and closing and image, which are a combination of a dilation and an erosion. \n\n* Closing is a way of filling in holes and solidifying images, increasing generalization and decreasing the importance of smaller marks or details. An erosion is performed first and then a dilation is performed.\n* Opening is a way of decreasing small details in an image to \"open\" up larger details and forgo smaller, unimportant details. A dilation is performed first and then an erosion is performed. Any pixels that \"survive\" after the erosion are restroed after the dilation.\n\nOpening and closing can also be applied, which ultimately closes larger objects and forgoes smaller details that are not connected to the main content of the image.\n\n![](https:\/\/i.ytimg.com\/vi\/1owu136z1zI\/maxresdefault.jpg)","f5cf8d89":"And finally, bilateral filtering utilizes Gaussian filtering twice in order to preserve edge detail while also effectively removing noise. First, a Gaussian filter is taken in space, but a second one is taken as a function of the pixel difference. The first Gaussian function ensures only nearby pixels are blurred, while the second Gaussian function ensures that only pixels whose values are close to the central element are blurred, rather than elements with greater differences, which could indicate an edge.\n\n![](https:\/\/www.researchgate.net\/profile\/Fatih_Porikli\/publication\/221361504\/figure\/fig1\/AS:305607526633472@1449873920125\/Bilateral-filter-has-spatial-and-range-components.png)","c00ac72f":"Normalizing image arrays between 0 and 1 is very beneficial when training deep learning models, because it helps the models converge and train faster. ","3b1181f9":"First off, dilation monitors \"hits\" or contrasts to the pixels, and adds an extra layer of pixels to the inner and outer boundaries of the shapes. \n\n![](https:\/\/homepages.inf.ed.ac.uk\/rbf\/HIPR2\/figs\/diltbin.gif)","4bacdec3":"# **Simple Image Preprocessing Techniques Using MINST Data**","97e7286a":"**Bilateral Filtering**","04a444bd":"Next, we will take a look at image blurring. Image blurring is a way of to reduce the detail and noise in an image, making it more blurry, but helping reduce overfitting and improve generalization in training deep learning models. Small, minute details in certain images may cause the models to depend on those details, making them ineffective against variation in other images. We will use OpenCV in order to apply averaging, Gaussian filtering, median filtering, and bilateral filtering.","b517f848":"Median filtering, which is very similar to averaging, changes the central element of the kernel area to the median of the values in the kernel space. This is very effective against salt-and-pepper noise and the kernel size should always be a positive odd number.\n\n![](https:\/\/www.southampton.ac.uk\/~msn\/book\/new_demo\/median\/Picture1.png)\n\nNote: The image passing through the medianBlur function must be of dtype float32.","d8e20a36":"**Gaussian Filtering**","5c5e2c4c":"# **Image Blurring**","b1586382":"**Median Filtering**","653b2239":"# **Image Normalization**","33e0e634":"# **Edge Sharpening**","2981a809":"# **Morphological Operations**","b2933ae3":"In Gaussian Filtering, instead of using a normalized box filter, a Gaussian kernel is used instead. This method is especially effective in removing Gaussian noise, which is noise that has a probability density function equal to the normal distribution. \n\n![](https:\/\/lh3.googleusercontent.com\/proxy\/Z7zDMAdZgJp8m-K-PPpC6H_b6HwGFfb-Q-TlWR1a_eoTi54mfWuIauHiLkivxnkV6brBVWdVFY9D8piidguQ57R0od2ouyggwg9jhWgEgYZvUXki8p928w)\n\nHere, the width and height are specificed again (But this time they have to be odd), and the standard deviation must be specified. \n\n![](https:\/\/www.researchgate.net\/profile\/Oleg_Shipitko\/publication\/325768087\/figure\/fig2\/AS:637519863508992@1529007988866\/Discrete-approximation-of-the-Gaussian-kernels-3x3-5x5-7x7.png)","86007feb":"# **Plotting Functions and Resizing Images**","81c25b3b":"**Averaging**","822d3113":"Next, we will discuss morphological operations, which are a collection of nonlinear operations that deal with the shape (or morphology) of the image. These techniques are less concerned with the pixel values, such as the smoothing techniques presented above, rather the relative ordering of the pixel values (According to [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Morphological_image_processing)). These techniques utilize structuring elements, which are positioned throughout the image at different locations, where the operation figures out the correlation with the structuring elements with its surrounding elements. Some operations test whether they \"fit\" while others test contrast and \"hits\".\n\n![](https:\/\/www.cs.auckland.ac.nz\/courses\/compsci773s1c\/lectures\/ImageProcessing-html\/morph-probing.gif)\n\nWith each morphological operation, I will provide examples of a change in kernel size and a change in iterations, in order to encompass those hyperparameters. In general, though, a larger kernel size works in larger steps while larger iterations tend increase the effect of the operation.","7f06146c":"**Dilation**","728189bd":"**Please upvote if you find this helpful and comment any improvements or questions! Feel free to check out some of my other notebooks! **","2ac821d6":"Image preprocessing is an important step in any computer vision task, especially as the data becomes more complicated, noisy, and diverse. Good preprocessing could make the difference between a good model and an excellent model, impacting the final score greatly. Below, I will go over several very simple preprocessing techniques using the MINST digits dataset. (Disclaimer: By no means are these the ONLY preprocessing techniques available.)\n\n* Importing Libraries and Setting Up the Dataframe\n* Plotting Functions and Resizing Images\n* Image Normalization\n* Image Blurring\n* Morphological Operations\n* Edge Sharpening\n\nFor the preprocessed images, I will display the original four first and then the preprocessed four.","a168a912":"Averaging is done by convoling an image with a normalized box filter, by taking the mean of the pixels in the kernel area and replacing the middle\/central element. For example, a 3x3 normalized box filter would look like this.\n\n![Screenshot%20%2860%29.png](attachment:Screenshot%20%2860%29.png)\n\nThe box filter's width and height can be changed in the blur function, where a bigger box filter would lead to higher generationlization and a greater loss in higher level details.","18548fd4":"Erosion is the opposite of dilation, where it scans for \"fits\" among the boundaries, and strips a layer from the inner and outer boundaries of the shape. This can be used to sharpen edges or increase constrast between two very similar images.\n\n![](https:\/\/homepages.inf.ed.ac.uk\/rbf\/HIPR2\/figs\/erodbin.gif)","042da495":"**Erosion**"}}