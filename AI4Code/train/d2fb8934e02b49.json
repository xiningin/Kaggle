{"cell_type":{"bb6fd708":"code","f2314e30":"code","128930f0":"code","a5a05ef4":"code","1f5fbc88":"code","ea0d0141":"code","6cb74625":"code","99d76c10":"code","d10ff41d":"code","7baff8b1":"code","1d78451c":"code","e7678706":"code","5c8b6cea":"code","eb27f40e":"code","6cc58db5":"markdown","34c6364d":"markdown","128ba690":"markdown","a2caaef1":"markdown","10263150":"markdown","2db480c5":"markdown","d9ab29f1":"markdown","e621fc60":"markdown","995be198":"markdown","b1f50978":"markdown","edc1c879":"markdown","11a749a3":"markdown","c80d2e2a":"markdown","d9f4a29b":"markdown","7504636b":"markdown","df6dd4a3":"markdown","20ca63d7":"markdown","4c486ba7":"markdown","25577ea1":"markdown","72873bdf":"markdown","ed7646d2":"markdown","02013f80":"markdown"},"source":{"bb6fd708":"import pandas as pd","f2314e30":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","128930f0":"df = pd.read_csv('\/kaggle\/input\/demographic.csv')\npd.set_option('display.max_columns', None)\ndf.head()","a5a05ef4":"genre = [\"Animation\", \"Comedy\"] \nduration = (60, 150)\nyear = (2000, 2019)\ntopk = 10","1f5fbc88":"def demographic_filter(df, genre=None, duration=None, year=None):\n        df = df.copy()\n        \n        if genre is not None:\n            df = df[df[genre].all(axis=1)]\n        if duration is not None:\n            df = df[df.runtime.between(duration[0], duration[1])]\n        if year is not None:\n            df = df[df.release_year.between(year[0], year[1])]\n        return df","ea0d0141":"df_filtered = demographic_filter(df, genre = [\"Animation\", \"Comedy\"],\n                                     duration = (60, 150), \n                                     year = (2000, 2019) )\ndf_filtered.head()","6cb74625":"recommendation = df_filtered.loc[:, :\"release_year\"] # buang kolom yang tidak perlu, agar lebih rapi\nrecommendation = recommendation.sort_values('vote_average', ascending=False).head(topk) # Sorting berdasrakan vote_average\nrecommendation","99d76c10":"df['vote_count'].describe()","d10ff41d":"df['vote_count'].hist(bins=15)","7baff8b1":"df['vote_count'].quantile(0.925)","1d78451c":"C = (df['vote_average'] * df['vote_count']).sum() \/ df['vote_count'].sum()\nC","e7678706":"def imdb_score(df, q=0.925):\n    df = df.copy()\n    \n    m = df['vote_count'].quantile(q)\n    C = (df['vote_average'] * df['vote_count']).sum() \/ df['vote_count'].sum()\n    \n    df = df[df['vote_count'] >= m]\n    df[\"score\"] = df.apply(lambda x: (x['vote_average'] * x['vote_count'] + C*m) \/ (x['vote_count'] + m), axis=1)\n    return df ","5c8b6cea":"df_imdb = imdb_score(df_filtered)\ndf_imdb.head()","eb27f40e":"recommendation = df_imdb.loc[:, \"title\": \"release_year\"]\nrecommendation = recommendation.sort_values(\"vote_average\", ascending=False).head(topk)\nrecommendation","6cc58db5":"## Step 1: Filtering","34c6364d":"# Demographic Filtering\n\nHalo teman-teman, bagaimana kabar kalian semua? saya harap kalian semua baik-baik saja ya. Dikesempatan kali ini saya ingin mendemonstrasikan cara membuat Recommendation System berdasarkan kondisi demografinya (Demographic Filtering).\n\nDemographic Filtering adalah teknik rekomendasi sistem yang sifatnya general (tidak sepenuhnya personalized). Contohnya, ketika kita ingin menonton film di internet, biasanya kita melihat adanya fitur filter yang bisa diatur sesuka kita kan, kita mau menonton film tahun berapa, genre apa, durasi filmnya, dll, itu semua bisa kita atur. Dan fitur itulah yang akan kita buat kali ini, yaitu Movies Recommendation System. \n\nDemographic Filtering ini hanya menggunakan filter berdasarkan fitur demographic, seperti genre, durasi, dll. Jadi kalau mau lebih personalised, jangan pakai Demographic Filtering ya. oh ya, Demographic Filtering ini merupakan teknik sistem rekomendasi yang paling simpel dibandingkan teknik yang lainnya.\n\nOke, tanpa banyak basa basi, kita langsung ke materinya saja ya.","128ba690":"### Cari Nilai $C$\n\n\ud835\udc36 : rata-rata rating semua film \n\nBerikut cara menghitung rata-ratanya: ","a2caaef1":"Setelah dibuat syaratnya, kita bisa langsung masuk ke step filtering.\n\nUntuk melakukan Filtering kita bisa buat function sesuai dengan kebutuhan.","10263150":"Rata-rata ratingnya 6.7 , tidak mengejutkan sih, dan cukup normal bagi saya.\n\nAda banyak faktor yang bisa mempengaruhi nilai rating, salah satunya karena adanya troller yang memberikan rating jelek kepada film yang benar-benar bagus (semoga saja orang-orang seperti ini termasuk outlier ya). Dan kalau boleh jujur, saya sendiri biasanya jadi troller sih, hehehe *loh. \n\nSelanjutnya kita rangkai rumus IMDB Score menjadi sebuah function","2db480c5":"Bisa dilihat, sekarang rekomendasinya jadi lebih tepat, banyak judul film yang judulnya terdengar familiar (terkenal), tidak seperti sebelumnya. Hal ini terjadi karena sebelumnya kita hanya mengandalkan vote average sebagai dasar penilaian rating.","d9ab29f1":"## Step 3: Sorting","e621fc60":"Nilai $m$ sudah didapat, sekarang kita lanjut cari nilai $C$","995be198":"## Step 2: Scoring\n\nStep scoring ini digunakan sebagai indikator layak tidaknya film untuk direkomendasikan, semakin besar nilainya semakin besar kemungkinan film itu untuk direkomendasikan. Untuk melakukan scoring, idealnya kita harus membuat rumus perhitungan score sendiri. Karena kebetulan dataset ini sudah ada variabel scoring (vote_average), maka kita akan gunakan variabel itu untuk scoring, namun kita hanya akan menggunakannya untuk sementara, nantinya kita akan gunakan teknik scoring yang lebih baik lagi.","b1f50978":"Bisa dilihat, mayoritas film jumlah votersnya berada dikisaran angka 0-500, dan kita akan gunakan angka itu sebagai patokan. \n\nKenapa memangnya kalau menggunakan angka yang lebih tinggi dari itu? Jika kita gunakan angka yang lebih tinggi, efeknya film yang direkomendasikan nanti jadi sedikit, dan kita tidak mau itu terjadi, kita mau angka yang seimbang dan representatif.\n\nOke sekarang kita cari kira2 quantile berapa yang mendekati angka 0-500, atau kita gunakan 250 saja sebagai angka tengah.","edc1c879":"## Kesimpulan\n\nDemographic Filtering adalah cara yang mudah untuk merekomendasikan item berdasarkan data demographic, selain itu teknik filetering ini sifatnya fleksibel, hampir bisa diterapkan disemua industri. Misal kalian ingin berjualan pakaian secara online, dan kalian memutuskan untuk membuat website, demographic filtering ini bisa kalian manfaatkan untuk menambah fitur website. \n\nKelemahan Demographic Filtering adalah tidak bisa digunakan untuk membuat filter yang lebih personal. Untuk membuat filtering yang lebih personilezed kita akan gunakan teknik yang berbeda, yang kemungkinan besar akan saya bahas dilain kesempatan\n\nMungkin itu saja dari saya, jika ada pertanyaan atau masukan, bisa kalian tulis di kolom komentar atau boleh japri di ig saya: al.fath.terry\n\nDan... mohon di upvote ya jika dirasa bermanfaat.\n\nTerimakasih :)","11a749a3":"Sebelum masuk ke filtering, kita akan merumuskan dulu syarat\/kondisi film yang diinginkan, karena kalau tidak ada syaratnya, apa yang mau difilter? hehe. Let say kita menginginkan film dengan syarat sebagai sebagai berikut (multiple condition):\n\n- genre = Animasi dan Comedy \n- durasi = (60 - 150)\n- tahun = (2000 - 2019)\n- jumlah rekomendasi yang diinginkan = 10","c80d2e2a":"## Modeling\n\nSecara garis besar, berikut adalah step-step yang dilakukan dalam membuat Recommendation System (Demographic Filtering):\n\n- step 1, Filtering\n- step 2, Scoring\n- step 3, Sorting","d9f4a29b":"Selanjutnya, kita aplikasikan syarat yang sudah kita buat ke dalam function.","7504636b":"Lalu tinggal di aplikasikan deh.","df6dd4a3":"## Sorting setelah menggunakan IMDB Score","20ca63d7":"## Import Data","4c486ba7":"## Import package","25577ea1":"Wow, ada film yang max vote nya sebanyak 1.4k voters, film apakah itu? nanti kita cari tahu ya, sekarang fokus untuk cari nilai komponen rumus IMDB Score dulu, hehe.\n\nKita buat histogramnya yuk.","72873bdf":"## Scoring menggunakan IMDB Score\n\nKita cari terlebih dahulu nilai dari empat komponen pembentuk rumus IMDB Score, yait; \ud835\udc63, \ud835\udc5a, \ud835\udc45, \ud835\udc36.\n\nKarena $v$ (vote count) dan $R$ (vote average) sudah diketahui, maka kita tinggal mencari $m$ dan $C$. ","ed7646d2":"Teknik scoring diatas masih memiliki kelemahan, yaitu tidak memperdulikan variabel yang lain, sehingga hasil scoringnya menjadi tidak adil. \n\nFilm \"Rocks in my Pockets\" memiliki nilai vote_average 9.4, padahal vote_countnya hanya 5. \nBandingkan dengan film \"Inside Out\" yang memiliki vote_average 7.9 dengan vote_count 6737. \nDari kedua film tersebut menurut kalian manakah yang lebih baik?.\n\nUntuk menentukan mana yang lebih baik, kita bisa membuat rumus perhitungan score sendiri, berhubung dataset yang kita miliki adalah kumpulan film, maka kita akan menggunakan rumus \"IMDB Weighted Rating\" :\n\n\n\\begin{equation}\nWR = \\frac{Rv+Cm}{v+m}\n\\end{equation}\n\n- $v$: jumlah voting film tersebut -> (vote_count)\n- $m$: syarat minimum vote -> kita akan pakai quantile\n- $R$: rata-rata rating film itu -> (vote_average)\n- $C$: rata-rata rating semua film -> bisa dihitung","02013f80":"### Cari Nilai $m$\n\n\ud835\udc5a : syarat minimum vote (Harus ada berapa voters agar sebuah film layak untuk direkomendasikan)\n\nBagaimana cara mencari nilai $m$? caranya, bebas. kenapa bebas? karena tidak ada aturan yang pasti dalam mencari nilai $m$, benar atau salah semuanya tergantung subjektifitas kita dalam menilai data. Namun kali ini kita akan gunakan quantile sebagai alat untuk mecari nilai $m$. Sebetulnya bisa saja kita memberikan angka pasti secara langsung, kita berikan 100 atau 200 misalkan, atau memakai angka sedikit dibawah mean atau median sebagai batas, itu juga tidak salah.\n\nOke, bagaimana cara menggunakan quantile? pertama kita cek terlebih dahulu kondisi kolom vote_count."}}