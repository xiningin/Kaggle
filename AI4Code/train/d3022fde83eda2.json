{"cell_type":{"d715f996":"code","0c20271c":"code","675109ce":"code","920ff84c":"code","a6fc3470":"code","03256aa8":"code","fc5a91d2":"code","5b9c1dd1":"code","bdf91231":"code","9a0d37ca":"code","2a5f4828":"code","c25d6f40":"code","feffd4ef":"code","3c118873":"code","e1ada328":"code","3512010f":"code","c9e6f1cc":"code","04d1a671":"code","15a4965c":"code","9906aca2":"code","dc590657":"code","fba8671d":"markdown","9cc372fa":"markdown","f46e878c":"markdown","75406f75":"markdown","1cd5ef04":"markdown","3f9b631d":"markdown","b91af959":"markdown","8c8f71c8":"markdown","ebb187ad":"markdown","a607eb14":"markdown","0f07666b":"markdown","ef25437d":"markdown","857cda51":"markdown","c39b3d1a":"markdown"},"source":{"d715f996":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c20271c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler","675109ce":"#load dataset\ndf = pd.read_csv(\"\/kaggle\/input\/customer-personality-analysis\/marketing_campaign.csv\", sep=\"\\t\")\ndf.head()","920ff84c":"df.info()","a6fc3470":"df.nunique()","03256aa8":"#drop ID since it is of no use for segmentation\ndf.drop(\"ID\", axis = 1, inplace=True)\n#convert Dt_Customer to datetime\ndf[\"Dt_Customer\"] = pd.to_datetime(df[\"Dt_Customer\"])\n#since the Dt_Customer is the date on which a customer enrolled, \n#it should be converted to # days before 21-12-2016 (I just choose this day randomly)\ndf[\"N_Dt_Customer\"] = (pd.to_datetime(\"31-12-2016\") - df[\"Dt_Customer\"]).dt.days\n#also, converting Year_Birth to Age \ndf[\"Age\"] = 2016 - df[\"Year_Birth\"] ","fc5a91d2":"#checking out people features\nfig, ax = plt.subplots(4,2, figsize = (20,16))\ndf[\"Age\"].plot(kind=\"box\", vert=False, ax=ax[0,0])\ndf[\"Income\"].plot(kind=\"box\", vert=False, ax=ax[0,1])\nsns.countplot(\"Marital_Status\", data=df, ax=ax[1,0])\nsns.countplot(\"Education\", data=df, ax=ax[1,1])\nsns.countplot(\"Kidhome\", data=df, ax=ax[2,0])\nsns.countplot(\"Teenhome\", data=df, ax=ax[2,1])\ndf[\"N_Dt_Customer\"].plot(kind=\"box\", vert=False, ax=ax[3,0])\ndf[\"Recency\"].plot(kind=\"box\", vert=False, ax=ax[3,1])\nplt.show()","5b9c1dd1":"df[\"TotalConsumption\"] = df[[\"MntWines\",\"MntFruits\",\"MntMeatProducts\", \"MntFishProducts\", \"MntSweetProducts\", \"MntGoldProds\" ]].sum(axis=1)\n\nfig, ax = plt.subplots(3,2, figsize=(25,10))\ndf[\"TotalConsumption\"].plot(kind=\"box\", vert=False, ax=ax[0,0])\ndf[\"NumDealsPurchases\"].plot(kind=\"box\", vert=False, ax=ax[0,1])\ndf[\"NumWebPurchases\"].plot(kind=\"box\", vert=False, ax=ax[1,0])\ndf[\"NumCatalogPurchases\"].plot(kind=\"box\", vert=False, ax=ax[1,1])\ndf[\"NumStorePurchases\"].plot(kind=\"box\", vert=False, ax=ax[2,0])\nsns.countplot(\"Response\", data=df, ax=ax[2,1])\nplt.show()","bdf91231":"#Replace outliers with mean value of each feature\n#Year_birth\nQ1 = df['Age'].quantile(0.25)\nQ3 = df['Age'].quantile(0.75)\nIQR = Q3 - Q1\n\nfor index in df[df[\"Age\"] > Q3 + 1.5*IQR].index:\n    df.loc[index,\"Age\"] = int(df[\"Age\"].mean())\n\n#Income\nQ1_ = df['Income'].quantile(0.25)\nQ3_ = df['Income'].quantile(0.75)\nIQR_ = Q3_ - Q1_\nmean_income = df[\"Income\"].mean()\nfor index in df[df[\"Income\"] > Q3_ + 1.5*IQR_].index:\n    df.loc[index, \"Income\"] = mean_income\n\n#also, fill NA values of Income with mean\ndf[\"Income\"].fillna(mean_income, inplace=True)\n\n# #NumDealsPurchases\n# # I replace outliers with Q3 values since that means these outliers represents those customers who conduct more DealsPurchases than avg.\n# Q1__ = df['NumDealsPurchases'].quantile(0.25)\n# Q3__ = df['NumDealsPurchases'].quantile(0.75)\n# IQR__ = Q3__ - Q1__\n# for index in df[df[\"NumDealsPurchases\"] > Q3__ + 1.5*IQR__].index:\n#     df.loc[index, \"NumDealsPurchases\"] = Q3__\n\n#clean up categorical variables\n#Marital_Status\ndf[\"Marital_Status\"].replace(dict.fromkeys([\"Divorced\", \"Alone\", \"Absurd\", \"Widow\", \"YOLO\"], 'Single'),\n    regex=True, inplace=True)\ndf[\"Marital_Status\"].replace(dict.fromkeys([\"Together\", \"Married\"], \"Relationship\"),\n    regex=True, inplace=True)\n#Education\ndf['Education'].replace({'Basic':'Undergraduate','2n Cycle':'Undergraduate',\n                                             'Graduation':'Postgraduate','Master':'Postgraduate','PhD':'Postgraduate'}, inplace=True)","9a0d37ca":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score","2a5f4828":"X = df[[\"Age\",\"Income\", \"Marital_Status\", \"Education\", \"Kidhome\", \"Teenhome\", \"N_Dt_Customer\", \"TotalConsumption\"\n        , \"NumDealsPurchases\", \"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\", \"Response\"]].copy()","c25d6f40":"from sklearn.preprocessing import OneHotEncoder\nX_label = X.copy()","feffd4ef":"encode = OneHotEncoder()\nen = encode.fit_transform(X_label[[\"Kidhome\", \"Teenhome\"]]).toarray()\nt = encode.get_feature_names([\"Kidhome\", \"Teenhome\"])\nX_label = pd.concat((X_label,pd.DataFrame(en, columns=t)), axis=1)\nX_label[\"Marital_Status\"] = X_label[\"Marital_Status\"].factorize(sort=True)[0]\nX_label[\"Education\"] = X_label[\"Education\"].factorize(sort=True)[0]\nX_label.drop([\"Kidhome\", \"Teenhome\"],axis=1, inplace=True)","3c118873":"# pair = X_label[\"Age\",\"Income\", \"Marital_Status\", \"Education\", \"TotalConsumption\", \"Response\"].copy()\nsns.pairplot(X_label[[\"Age\",\"Income\", \"Marital_Status\", \"Education\", \"TotalConsumption\", \"Response\"]])","e1ada328":"#normalize data\nscaler = MinMaxScaler()\nX_label = scaler.fit_transform(X_label)\n#fit to model\ndistortion = []\nsilhouette = []\nfor k in range(2,10):\n    kmeans_label = KMeans(n_clusters=k, max_iter=1000, random_state=203)\n    kmeans_label.fit(X_label)\n    distortion.append(kmeans_label.inertia_)\n    silhouette.append(silhouette_score(X_label, kmeans_label.fit_predict(X_label)))","3512010f":"#plot distortion\nplt.figure(figsize = (10,5))\nplt.plot(range(2,10), distortion, 'bx-')\nplt.show()\nfor index, score in enumerate(silhouette):\n    print(f\"Silhouette Score for k = {index+2} is {score}\")\nbest_K = silhouette.index(max(silhouette))+2\nprint(f\"The highest silhouette score is k = {best_K}\")","c9e6f1cc":"model = KMeans(n_clusters = best_K)\nX[\"Label\"] = model.fit_predict(X_label)","04d1a671":"sns.countplot(x=\"Label\", data=X)\nplt.show()","15a4965c":"num = [\"Age\",\"Income\", \"N_Dt_Customer\", \"TotalConsumption\"\n        , \"NumDealsPurchases\", \"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\"]\ncat = [\"Education\", \"Marital_Status\", \"Response\",\"Kidhome\", \"Teenhome\",]","9906aca2":"fig = plt.figure(figsize=(20,15))\ntotal_subs = len(num)\ncols = 3\nrows = total_subs\/\/cols\nrows += total_subs%cols\nposition = range(1, total_subs+1)\nfor index,column in enumerate(num):\n    ax = fig.add_subplot(rows, cols, position[index])\n    sns.boxplot(y=column, x=\"Label\", data=X, ax=ax)\nplt.show()","dc590657":"fig = plt.figure(figsize=(20,15))\ntotal_subs = len(num)\ncols = 3\nrows = total_subs\/\/cols\nrows += total_subs%cols\nposition = range(1, total_subs+1)\nfor index,column in enumerate(cat):\n    ax = fig.add_subplot(rows, cols, position[index])\n    sns.countplot(x=column, hue=\"Label\", data=X, ax=ax)\nplt.show()","fba8671d":"# About\nCheck out the link of this dataset [here](https:\/\/www.kaggle.com\/imakash3011\/customer-personality-analysis)\n\n**Context**\n\nProblem Statement\n\nCustomer Personality Analysis is a detailed analysis of a company\u2019s ideal customers. It helps a business to better understand its customers and makes it easier for them to modify products according to the specific needs, behaviors and concerns of different types of customers.\n\nCustomer personality analysis helps a business to modify its product based on its target customers from different types of customer segments. For example, instead of spending money to market a new product to every customer in the company\u2019s database, a company can analyze which customer segment is most likely to buy the product and then market the product only on that particular segment.\n\n**Content**\nAttributes\n\nPeople\n\n\n* ID: Customer's unique identifier\n* Year_Birth: Customer's birth year\n* Education: Customer's education level\n* Marital_Status: Customer's marital status\n* Income: Customer's yearly household income\n* Kidhome: Number of children in customer's household\n* Teenhome: Number of teenagers in customer's household\n* Dt_Customer: Date of customer's enrollment with the company\n* Recency: Number of days since customer's last purchase\n* Complain: 1 if customer complained in the last 2 years, 0 otherwise\n\nProducts\n\n* MntWines: Amount spent on wine in last 2 years\n* MntFruits: Amount spent on fruits in last 2 years\n* MntMeatProducts: Amount spent on meat in last 2 years\n* MntFishProducts: Amount spent on fish in last 2 years\n* MntSweetProducts: Amount spent on sweets in last 2 years\n* MntGoldProds: Amount spent on gold in last 2 years\n\nPromotion\n\n* NumDealsPurchases: Number of purchases made with a discount\n* AcceptedCmp1: 1 if customer accepted the offer in the 1st campaign, 0 otherwise\n* AcceptedCmp2: 1 if customer accepted the offer in the 2nd campaign, 0 otherwise\n* AcceptedCmp3: 1 if customer accepted the offer in the 3rd campaign, 0 otherwise\n* AcceptedCmp4: 1 if customer accepted the offer in the 4th campaign, 0 otherwise\n* AcceptedCmp5: 1 if customer accepted the offer in the 5th campaign, 0 otherwise\n* Response: 1 if customer accepted the offer in the last campaign, 0 otherwise\n\nPlace\n\n* NumWebPurchases: Number of purchases made through the company\u2019s web site\n* NumCatalogPurchases: Number of purchases made using a catalogue\n* NumStorePurchases: Number of purchases made directly in stores\n* NumWebVisitsMonth: Number of visits to company\u2019s web site in the last month\n\n**Target**\n\nNeed to perform clustering to summarize customer segments.\n\nSolution\nYou can take help from following link to know more about the approach to solve this problem.\nVisit [this URL](https:\/\/thecleverprogrammer.com\/2021\/02\/08\/customer-personality-analysis-with-python\/)","9cc372fa":"Here I want to add ```NumDealsPurchases``` and a column representing the total number of goods spent in the last 2 years ```TotalComsumption``` before clustering","f46e878c":"The customers can be divided into 4 groups:\n- Group 0: Old customers with high income, but low on consumption. Their purchase channel is mostly through stores\n- Group 1: Young customers with low income and low consumption\n- Group 2: Customers with high income and consumption, these customers don't have kid and are better response to offers. Their purchase channel is mostly through stores and catalog\n- Group 3: Old customers with medium income, have both kids and teens and low consumption\n\n","75406f75":"# Clustering","1cd5ef04":"## KMeans clustering with Simple Encoder for categorical variables","3f9b631d":"Our distribution of labels","b91af959":"|Group  \t|0  \t|1  \t|2  \t|3  \t|\n|---\t|---\t|---\t|---\t|---\t|\n|Age  \t|Old  \t|Young  \t|Broad range  \t|Old  \t|\n|Income  \t|High  \t|Low  \t|High  \t|Medium  \t|\n|Total Consumption  \t|Medium  \t|Low  \t|High  \t|Low  \t|\n|Response  \t|  \t|  \t|Better response to offers \t|  \t|\n|Children  \t|Only have teen  \t|Only have kid  \t|Have no kids  \t|Have both  \t|\n|Purchase Channel  \t|Store  \t|  \t|Store, Catalog  \t|  \t|\n","8c8f71c8":"So the number of clusters should be 4","ebb187ad":"# Conclusion","a607eb14":"# Data Preprocessing ","0f07666b":"The table below sums up some prominent characteristics of each Group","ef25437d":"Now let's try to interpret the four clusters that we found","857cda51":"Here I use these features: ```\"Age\",\"Income\", \"Marital_Status\", \"Education\", \"Kidhome\", \"Teenhome\", \"N_Dt_Customer\", \"TotalConsumption\", \"NumDealsPurchases\", \"NumWebPurchases\", \"NumCatalogPurchases\", \"NumStorePurchases\", \"Response\"``` in KMeans Clustering algorithm","c39b3d1a":"From the chart above it can be seen that:\n - Year_Birth & Income have some outliers to be cleaned\n - In Marital_Status & Education Some answers need to be cleaned and regrouped"}}