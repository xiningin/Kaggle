{"cell_type":{"11efd021":"code","175d551d":"code","18db7cd2":"code","596d57b6":"code","e603e36a":"code","56436f6c":"code","5872e50f":"code","5c8b48b5":"code","5bc7d788":"code","d8824052":"code","b6ad4b12":"code","b6378e05":"code","a255b031":"code","bcd68193":"code","df609d0d":"code","f9d42e83":"code","587bc05a":"code","7612548f":"code","0a247c84":"code","98618f01":"code","aef79714":"code","ef4e3e69":"code","706bc704":"code","689d5de6":"code","b46bd567":"code","d90deb06":"code","c37dfa5c":"code","055e978e":"code","ecdaa2ea":"code","6dd49087":"markdown","e7511ad4":"markdown","cdad4ed4":"markdown","55ec3276":"markdown","5ff9843a":"markdown","a18d06f0":"markdown","7f0e865e":"markdown","69b5c47e":"markdown","cd45b9a7":"markdown"},"source":{"11efd021":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('ggplot')\npd.set_option('display.max_columns', None)  \npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (20.0, 15.0)\n\n#using the cleaned marketing funnel data to merge with sellers\nfunnel_df = pd.read_csv(\"..\/input\/adnuolist-analysis\/cleaned_marketing_funnel.csv\")","175d551d":"#Lets see the business segments and lead types and compare them over SRs in closed deals\nsegment_df = funnel_df.groupby([\"sr_id\",\"business_segment\"]).count().seller_id.reset_index(name=\"count\")\nlead_df = funnel_df.groupby([\"sr_id\",\"lead_type\"]).count().seller_id.reset_index(name=\"count\")\n\n#ordering and cleaning data of NaN\/NA values\nsegment_df = segment_df.pivot(index= \"sr_id\", columns= \"business_segment\", values= \"count\").fillna(0)\nlead_df= lead_df.pivot(index= \"sr_id\", columns= \"lead_type\", values= \"count\").fillna(0)\n\n#summarising groupby totals for better stack graph visualization\nsegment_df[\"total\"] = segment_df.sum(axis=1)\nsegment_df = segment_df.sort_values(\"total\",ascending= True).drop([\"total\"],axis=1)\n\nlead_df[\"total\"] = lead_df.sum(axis=1)\nlead_df = lead_df.sort_values(\"total\",ascending= True).drop([\"total\"],axis=1)\n","18db7cd2":"sns.set()\nsns.palplot(sns.color_palette(\"Paired\"))","596d57b6":"#for segments plot\n\nplt.rcParams['figure.figsize'] = (15.0, 20.0)\n\nsegment_df.plot.barh(stacked= True).legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\nplt.title(\"SR and Segment Closed Deals\",fontsize=25)\nplt.xlabel(\"Closed deal count\")\nplt.tight_layout()\n\n#plt.savefig(\"sr_segment_analysis.png\")","e603e36a":"#for lead type plot\nplt.rcParams['figure.figsize'] = (15.0, 20.0)\nlead_df.plot.barh(stacked= True).legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)\nplt.title(\"SR and Lead Type - Closed Deals\",fontsize=25)\nplt.xlabel(\"Closed deal count\")\nplt.tight_layout()\n\n#plt.savefig(\"charts\/sr_lead_type_analysis.png\")","56436f6c":"orders_df = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv\")\norders_df.describe(include=\"all\")","5872e50f":"quantity_df = orders_df.groupby(['order_id', 'product_id','seller_id','price'])['order_item_id'].agg({\"quantity\":\"max\"}).reset_index()\nquantity_df['order_price'] = quantity_df['price']*quantity_df['quantity']\nquantity_df","5c8b48b5":"#multiple product quantity summary\ntdf= quantity_df.quantity.value_counts().sort_values()\ntdf = pd.DataFrame({'quantity':tdf.index, 'order_counts':tdf.values}).sort_values(\"order_counts\",ascending=False) \ntdf.head()","5bc7d788":"quantity_df[quantity_df[\"quantity\"]>1]","d8824052":"#Aggregating total revenue per seller\ntotal_revenue_df = quantity_df.groupby(['seller_id'])['order_price'].agg('sum').reset_index()\ntotal_revenue_df","b6ad4b12":"#merging funnel df and total revenue df (379 out of 841 leads have seller data)\nfunnel_df.first_contact_date = pd.to_datetime(funnel_df.first_contact_date) #normalizing contact date\nfunnel_df[\"contact_month\"] = funnel_df.first_contact_date.dt.month\nfinal_df_left = funnel_df.merge(total_revenue_df, on='seller_id', how=\"left\")\nfinal_df_inner = funnel_df.merge(total_revenue_df, on='seller_id', how=\"inner\")\n\n\nfinal_df_inner","b6378e05":"print(\"Declared monthly revenue of seller(count) in all closed leads dataset - \",len(final_df_left[final_df_left.declared_monthly_revenue>0]))\nprint(\"Declared monthly revenue of seller(count) in closed leads dataset merged with calculated revenue from orders data - \",len(final_df_inner[final_df_inner.declared_monthly_revenue>0]))\n","a255b031":"#converting timedelta to numeric day count for input to classifier\nfinal_df_inner[\"close_duration\"]= pd.to_timedelta(final_df_inner.close_duration)\nfinal_df_inner[\"closing_days\"] = final_df_inner.close_duration.values\/np.timedelta64(1, 'D')","bcd68193":"from sklearn import preprocessing\ncolumn_list = ['business_segment','lead_type','lead_behaviour_profile','business_type','landing_page_id','origin']\n\nfor column in column_list:\n    encoder = preprocessing.LabelEncoder()\n    encoder.fit(final_df_inner[column])\n    final_df_inner[column] = encoder.transform(final_df_inner[column])\n","df609d0d":"from sklearn.model_selection import train_test_split\n\nfeatures = column_list + ['contact_month','closing_days']\ntarget = ['order_price']\n\nX = final_df_inner[features].values\ny = final_df_inner[target].values\nsplit_test_size = 0.10\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = split_test_size, random_state=8)\n\nprint('Training Features Shape:', X_train.shape)\nprint('Training Labels Shape:', X_test.shape)\nprint('Testing Features Shape:', y_train.shape)\nprint('Testing Labels Shape:', y_test.shape)\n","f9d42e83":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nrf_model = RandomForestRegressor(n_estimators=16, min_samples_split=2, random_state = 8)\nrf_model.fit(X_train, np.ravel(y_train,order='C'))","587bc05a":"from sklearn.metrics import mean_absolute_error\nrf_predict_train = rf_model.predict(X_train)\nrf_predict_test = rf_model.predict(X_test)\n\nprint(\"Mean Absolute error in predicting revenue amount (Training):-\",mean_absolute_error(y_train,rf_predict_train))\nprint(\"Mean Absolute error in predicting revenue amount (Testing):-\",mean_absolute_error(y_test,rf_predict_test))","7612548f":"feature_imp = pd.Series(rf_model.feature_importances_,index=features).sort_values(ascending=False)\nfeature_imp","0a247c84":"#Trying TPOT automl\n# from tpot import TPOTRegressor\n# tpot = TPOTRegressor(generations=10, population_size=100, verbosity=2, random_state=8,n_jobs=10)\n# tpot.fit(X_train, np.ravel(y_train,order='C'))\n# print(tpot.score(X_test, np.ravel(y_test,order='C')))\n# tpot.export('tpot_revenue_pipeline.py')","98618f01":"leads_df = pd.read_csv(\"..\/input\/marketing-funnel-olist\/olist_marketing_qualified_leads_dataset.csv\")\nleads_df","aef79714":"#converting timedelta to numeric day count for input to classifier\nfinal_df_left[\"close_duration\"]= pd.to_timedelta(final_df_left.close_duration)\nfinal_df_left[\"closing_days\"] = final_df_left.close_duration.values\/np.timedelta64(1, 'D')\nfinal_df_left[\"contact_year\"] = final_df_left.first_contact_date.dt.year","ef4e3e69":"final_df_left.head()","706bc704":"from sklearn import preprocessing\ncolumn_list = ['landing_page_id','origin'] #'contact_month','contact_year']\n\nfor column in column_list:\n    encoder = preprocessing.LabelEncoder()\n    encoder.fit(final_df_left[column])\n    final_df_left[column] = encoder.transform(final_df_left[column])\n    \n    ","689d5de6":"from sklearn.model_selection import train_test_split\n\nfeatures = column_list + ['contact_month','contact_year']\ntarget = ['closing_days']\n\nX = final_df_left[features].values\ny = final_df_left[target].values\nsplit_test_size = 0.15\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = split_test_size, random_state=8)\n\nprint('Training Features Shape:', X_train.shape)\nprint('Training Labels Shape:', X_test.shape)\nprint('Testing Features Shape:', y_train.shape)\nprint('Testing Labels Shape:', y_test.shape)","b46bd567":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\nrf_model_leadclose = RandomForestRegressor(n_estimators=50, min_samples_split=2, random_state = 8)\nrf_model_leadclose.fit(X_train, np.ravel(y_train,order='C'))","d90deb06":"from sklearn.metrics import mean_absolute_error\nrf_predict_train = rf_model_leadclose.predict(X_train)\nrf_predict_test = rf_model_leadclose.predict(X_test)\n\nprint(\"Mean Absolute error in predicting closing days (Training):-\",mean_absolute_error(y_train,rf_predict_train))\nprint(\"Mean Absolute error in predicting closing days (Testing):-\",mean_absolute_error(y_test,rf_predict_test))","c37dfa5c":"feature_imp = pd.Series(rf_model_leadclose.feature_importances_,index=features).sort_values(ascending=False)\nfeature_imp","055e978e":"import xgboost as xgb\nclf = xgb.XGBRegressor()\nclf.fit(X_train,y_train)","ecdaa2ea":"print(clf.score(X_train,y_train))\nprint(clf.score(X_test,y_test))\n# import os\n# os.environ[\"PATH\"] += os.pathsep + 'C:\/Program Files (x86)\/Graphviz2.38\/bin\/'\n\nxgb.to_graphviz(clf, num_trees=4)","6dd49087":"We take a look at the order items dataset which gives us a lumpsum idea as to how much revenue those closed deals might be getting us\n- `112650` **orders** data with `98666` unique order ids (meaning ~12% (13984) orders contains more than one item).\n- `32951` unique **products** which are ordered.\n- `3095` unique **sellers**.\n- Mean average **cost per order** is `120` with minimum order amount being `0.8` and maximum being `6735`.\n- Mean average **frieght value** amount per order is `20` with minimum value at `15.8` and maximum going to `401`.\n","e7511ad4":"Let's predict `closing days` by selecting features which are there in mql table namely\n- landing_page_id\n- origin\n- contact_month\n- contact_year\n\n","cdad4ed4":"## For Q2 - Leads close or not\n\nLets see the datasets mql_leads, closed_leads\n\nMQL has first_contact_date, landing_page_id and origin","55ec3276":"This shows that revenue depends a lot on closing_day (Turnaround time) and business segment of the seller and partially on lead_behaviour profile and landing_page","5ff9843a":"## For Q1, SR\/SDR Optimization","a18d06f0":"## From these plots, it is evident that\n1. SRs aren't assigned only specific business segments as they are getting exposed to all segments. They are given leads as and when they come.\n2. This also shows that some SRs are just good at selling anything irrespective of the lead type or business segment.\n\nEg - SR_id - `4ef15afb4b2723d8f3d81e51ec7afefe` has 133 closed deals ranging in myriad of business segments which are unrelated and from all types of leads (online,offline,email,industry,etc)\n\n3. From 2017 to 2018 we have a significant rise in leads and therefore also a significant rise in closed leads \n\nThough, the significant rise is not due to a more effective process, rather because more leads fill in the forms on the landing pages.\n- We see two landing pages holding ~50% of the closed deals out of a total of 495 landing pages.\n\n","7f0e865e":"## For Q3, Revenue Prediction","69b5c47e":"This shows that declared_monthly revenue is not useful in the dataset","cd45b9a7":"# Modelling and Predicting\n\nAnswering the core questions for this assignment\n\n`Q1` - **SR\/SDR Optimization** - Which SR or SDR should talk with each kind of lead?\n\n`Q2` - **Closing Prediction** - Which deals will be closed? Comes under SR\/SDR\n\n`Q3` - **Customer Lifetime Value** - How much a customer will bring in future revenue?\n"}}