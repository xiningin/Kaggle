{"cell_type":{"100b521b":"code","532ee177":"code","3cecf73c":"code","2899e004":"code","27e419f6":"code","fbeac7c1":"code","19dbb059":"code","b0434787":"code","416a5bc8":"code","f49b86c9":"code","88922c4e":"code","62ef014d":"code","d12be6d4":"code","1a894cd5":"code","856bbfbc":"code","0b3db98e":"markdown","a2d7008d":"markdown","5a30528d":"markdown","6a573cfc":"markdown"},"source":{"100b521b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n!pip install flood_forecast\nfrom flood_forecast.trainer import train_function","532ee177":"import pandas as pd\nsolar_data = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\")\nweather_data = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv\")","3cecf73c":"solar_data.groupby(\"SOURCE_KEY\").count()","2899e004":"solar_data.head()","27e419f6":"solar_data[solar_data[\"SOURCE_KEY\"]==\"1BY6WEcLGh8j5v7\"].groupby(\"DC_POWER\").count()","fbeac7c1":"weather_data.head()","19dbb059":"solar_data.head()","b0434787":"weather_data[\"DATE_TIME\"] = pd.to_datetime(weather_data[\"DATE_TIME\"])\nsolar_data[\"DATE_TIME\"] = pd.to_datetime(solar_data[\"DATE_TIME\"])","416a5bc8":"mrged_df = solar_data.merge(weather_data, left_on=\"DATE_TIME\", right_on=\"DATE_TIME\", how=\"left\")\nmrged_df","f49b86c9":"solar_data.merge(weather_data, left_on=\"DATE_TIME\", right_on=\"DATE_TIME\", how=\"left\").to_csv(\"merged_file.csv\")\n","88922c4e":"dropped = mrged_df[mrged_df[\"SOURCE_KEY_x\"]==\"1BY6WEcLGh8j5v7\"].dropna()\ndropped[\"datetime\"] = dropped[\"DATE_TIME\"]\ndropped.to_csv(\"example.csv\")","62ef014d":"def make_config_file(flow_file_path, gage_id, station_id, weight_path=None, pretrained=[]):\n  run = wandb.init(project=\"solar_tutorial\")\n  wandb_config = run.config\n  the_wandb_c = run.config\n  print(wandb_config)\n  the_config4 = {\"model_name\": \"DARNN\",\n        \"model_type\": \"PyTorch\",\n        \"model_params\": {\n        \"n_time_series\":7,\n        \"forecast_history\":wandb_config[\"forecast_history\"],\n        \"hidden_size_encoder\":wandb_config[\"hidden_encoder\"],\n        \"decoder_hidden_size\": wandb_config[\"hidden_decoder\"],\n        \"out_feats\": 1,\n        \"dropout\": wandb_config[\"dropout\"],\n        \"gru_lstm\": False},\n       \"dataset_params\":{\"class\": \"default\",\n       \"num_workers\":2,\n       \"pin_memory\": True,\n       \"training_path\": flow_file_path,\n       \"validation_path\": flow_file_path,\n       \"test_path\": flow_file_path,\n       \"batch_size\":wandb_config[\"batch_size\"],\n       \"forecast_history\":wandb_config[\"forecast_history\"] - 1,\n       \"forecast_length\":wandb_config[\"forecast_length\"],\n       \"scaler\": \"StandardScaler\",\n       \"interpolate\": False,\n       \"train_start\":0,\n       \"train_end\": 1500,\n       \"valid_start\":1501,\n       \"valid_end\": 1750,\n       \"sort_column\": \"DATE_TIME\",\n       \"test_start\": 1751,\n       \"test_end\":2099,\n       \"target_col\": [\"DC_POWER\"],\n       \"relevant_cols\": [\"DC_POWER\", \"AMBIENT_TEMPERATURE\", \"MODULE_TEMPERATURE\", \"IRRADIATION\"], \n      \"feature_param\":\n          {\n            \"datetime_params\":{\n            \"hour\":\"numerical\",\n            \"day_of_week\":\"numerical\",\n            \"month\": \"numerical\"\n            }\n          }\n       },\n    \"training_params\":\n    {\n       \"criterion\":\"MSE\",\n       \"optimizer\": \"SGD\",\n       #\"criterion_params\":{\"baseline_method\":\"mean\"},\n    \"optim_params\":{\n       \"lr\": the_wandb_c[\"lr\"]\n    },\n       \"epochs\": 12,\n       \"batch_size\":wandb_config[\"batch_size\"]\n    },\n    \"early_stopping\":{\n        \"patience\":3\n    },\n    \"GCS\": False,\n    \"sweep\":True,\n    \"wandb\":False,\n    \"forward_params\":{},\n   \"metrics\":[\"MSE\", \"MAPE\"],\n   \"inference_params\":\n   {     \n         \"datetime_start\":\"2020-06-17\",\n          \"hours_to_forecast\":30, \n          \"num_prediction_samples\": 20,\n          \"test_csv_path\":flow_file_path,\n          \"decoder_params\":{\n            \"decoder_function\": \"simple_decode\", \n            \"unsqueeze_dim\": 1},\n          \"dataset_params\":{\n             \"file_path\": flow_file_path,\n             \"interpolate_param\": False,\n             \"sort_column\": \"DATE_TIME\",\n             \"scaling\": \"StandardScaler\",\n             \"forecast_history\": wandb_config[\"forecast_history\"] - 1,\n             \"forecast_length\":wandb_config[\"forecast_length\"],\n             \"relevant_cols\": [\"DC_POWER\", \"AMBIENT_TEMPERATURE\", \"MODULE_TEMPERATURE\", \"IRRADIATION\"],\n             \"target_col\": [\"DC_POWER\"],\n            \"feature_params\":{\n                \n         \"datetime_params\":{\n            \"hour\":\"numerical\",\n            \"day_of_week\":\"numerical\",\n            \"month\": \"numerical\"\n         \n     }\n             }\n          }\n          } \n    }\n\n      \n  if weight_path:\n    the_config4[\"weight_path\"] = weight_path\n  wandb.config.update(the_config4)\n  print(\"config made\")\n  return the_config4\n  \nwandb_sweep_config_full = {\n  \"name\": \"Default sweep\",\n  \"method\": \"grid\",\n  \"parameters\": {\n        \"forecast_length\":{\n            \"values\":[1]}\n            ,\n        \"batch_size\": {\n            \"values\": [10, 20, 40]\n        },\n        \"lr\":{\n            \"values\":[0.001, 0.0001, .01]\n        },\n        \"forecast_history\":{\n            \"values\":[14, 20, 24, 48]\n        },\n        \"out_seq_length\":{\n            \"values\":[1]\n        },\n        \"hidden_encoder\":\n        {\n            \"values\":[32, 64, 128, 256]\n        },\n        \"hidden_decoder\":\n        {\n            # 32, 64, 128 \n            \"values\":[32, 64, 128, 256]\n        }, \n        \"dropout\":\n        {\n            \"values\": [0.1, 0.3, 0.5, 0.8]\n        }\n  \n    }\n}","d12be6d4":"import wandb\nsweep_id = wandb.sweep(wandb_sweep_config_full, project=\"solar_tutorial\")\nfile_path = \"example.csv\"\nwandb.agent(sweep_id, lambda: train_function(\"PyTorch\", make_config_file(file_path, \"1BY6WEcLGh8j5v7\", \"s\", None)))","1a894cd5":"def make_config_file(flow_file_path, gage_id, station_id, weight_path=None, pretrained=[]):\n  run = wandb.init(project=\"solar_tutorial\")\n  wandb_config = run.config\n  the_wandb_c = run.config\n  print(wandb_config)\n  the_config4 = {\"model_name\": \"DARNN\",\n        \"model_type\": \"PyTorch\",\n        \"model_params\": {\n        \"n_time_series\":7,\n        \"forecast_history\":14,\n        \"hidden_size_encoder\":32,\n        \"decoder_hidden_size\": 32,\n        \"out_feats\": 1,\n        \"dropout\": 0.1,\n        \"gru_lstm\": False},\n       \"dataset_params\":{\"class\": \"default\",\n       \"num_workers\":2,\n       \"pin_memory\": True,\n       \"training_path\": flow_file_path,\n       \"validation_path\": flow_file_path,\n       \"test_path\": flow_file_path,\n       \"batch_size\":20,\n       \"forecast_history\":14 - 1,\n       \"forecast_length\":1,\n       \"scaler\": \"StandardScaler\",\n       \"train_start\":0,\n       \"train_end\": 1500,\n       \"valid_start\":1501,\n       \"valid_end\": 1750,\n       \"sort_column\": \"DATE_TIME\",\n       \"test_start\": 1751,\n       \"test_end\":2099,\n       \"target_col\": [\"DC_POWER\"],\n       \"relevant_cols\": [\"DC_POWER\", \"AMBIENT_TEMPERATURE\", \"MODULE_TEMPERATURE\", \"IRRADIATION\"], \n       \"interpolate\": False,\n      \"feature_param\":\n          {\n            \"datetime_params\":{\n            \"hour\":\"numerical\",\n            \"day_of_week\":\"numerical\",\n            \"month\": \"numerical\"\n            }\n          }\n       },\n    \"training_params\":\n    {\n       \"criterion\":\"MSE\",\n       \"optimizer\": \"SGD\",\n       #\"criterion_params\":{\"baseline_method\":\"mean\"},\n    \"optim_params\":{\n       \"lr\": 0.01\n    },\n       \"epochs\": 12,\n       \"batch_size\":10\n    },\n    \"early_stopping\":{\n        \"patience\":3\n    },\n    \"GCS\": True,\n    \"sweep\":True,\n    \"wandb\":False,\n    \"forward_params\":{},\n   \"metrics\":[\"MSE\", \"MAPE\"],\n   \"inference_params\":\n   {     \n         \"datetime_start\":\"2020-06-17 08:00:00\",\n          \"hours_to_forecast\":30, \n          \"num_prediction_samples\": 20,\n          \"test_csv_path\":flow_file_path,\n          \"decoder_params\":{\n            \"decoder_function\": \"simple_decode\", \n            \"unsqueeze_dim\": 1},\n          \"dataset_params\":{\n             \"file_path\": flow_file_path,\n             \"sort_column\": \"DATE_TIME\",\n             \"scaling\": \"StandardScaler\",\n             \"forecast_history\": 14 - 1,\n             \"forecast_length\":1,\n             \"relevant_cols\": [\"DC_POWER\", \"AMBIENT_TEMPERATURE\", \"MODULE_TEMPERATURE\", \"IRRADIATION\"],\n             \"target_col\": [\"DC_POWER\"],\n             \"interpolate\": False,\n            \"feature_params\":{\n                \n         \"datetime_params\":{\n            \"hour\":\"numerical\",\n            \"day_of_week\":\"numerical\",\n            \"month\": \"numerical\"\n         \n     }\n             }\n          }\n          } \n    }\n\n      \n  if weight_path:\n    the_config4[\"weight_path\"] = weight_path\n  wandb.config.update(the_config4)\n  print(\"config made\")\n  return the_config4","856bbfbc":"train_function(\"PyTorch\", make_config_file(file_path, \"1BY6WEcLGh8j5v7\", \"s\", None))","0b3db98e":"## Solar Energy Forecasting with Flow Forecast\n\nIn this notebook we will walk through using Flow Forecast to forecast solar energy generation at several power-plants in India. ","a2d7008d":"## Simple Forecast with Flow Forecast","5a30528d":"## Debugging COnfing","6a573cfc":"## Data Preprocessing\n\nIn order to get the data in a usable format we need to join the station data to the weather data."}}