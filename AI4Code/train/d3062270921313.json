{"cell_type":{"2e65e445":"code","15fe3e28":"code","716b1ba1":"code","47c743d3":"code","963bf897":"code","54ccc39c":"code","693997cf":"code","5855ef30":"code","160f851a":"code","53f4be75":"code","c9ee34a3":"code","4ee4abaa":"code","0ae24711":"code","052bb427":"code","ddc8a986":"code","e904899b":"code","c49c231e":"code","1f05b5fa":"code","5e82a246":"code","e50c30ce":"code","ed57296c":"code","59b64458":"code","b0329310":"code","06a582a8":"code","a5ac3326":"code","cef3e05e":"code","f022222f":"code","8bc7de4a":"code","ee4bde5e":"code","e1f17c7b":"code","47bf7b59":"code","89b57a71":"code","30d69e2d":"code","936b7b8d":"code","4a1459d2":"code","6b0e93f8":"code","278a1ba8":"code","2d9fc8c9":"code","212a9b99":"code","df15e657":"code","818502ba":"code","f56f36e7":"code","aaecc0a1":"code","0779a6f7":"code","34f16a2e":"code","306625b0":"code","103a5145":"code","8d149ac5":"code","44ca9653":"code","23ca2af7":"code","4e42262c":"code","dfff883e":"code","522cf265":"code","abc72c9b":"code","08939f3c":"code","5db4431c":"code","b32cb646":"code","ef6ebda5":"code","b7c1a9c6":"code","f54c3c2d":"code","0069e72c":"code","ff45aea9":"code","89f52933":"code","602b8400":"code","47dbdf3d":"code","8a30b3d1":"code","004947cf":"code","40624f6a":"code","1d9ac5f5":"code","389bd323":"code","0eaebbaa":"code","cb803ae4":"code","b1d45a01":"code","4ea76c66":"markdown","3506d112":"markdown","b95c7b45":"markdown","4d255560":"markdown","2580def0":"markdown","99e2847a":"markdown","7cdebf7d":"markdown","2faee5ba":"markdown","bef45b5b":"markdown","0bc8eb3a":"markdown","38a348f2":"markdown","77452565":"markdown","7bdbb180":"markdown","91b55a86":"markdown","67aa2d47":"markdown","efc1c08e":"markdown","adb1054b":"markdown","9776931e":"markdown","d37f7ad3":"markdown","c11041bc":"markdown","f2488980":"markdown","669d21bd":"markdown","1c6d2e63":"markdown","2ddb79f1":"markdown","fd30188f":"markdown","6e93bcab":"markdown","4e0e6d25":"markdown","e7333262":"markdown","4108cb68":"markdown","1bf5fe6f":"markdown","ecc09d72":"markdown","f8f12bbc":"markdown","05d95879":"markdown","55439bb7":"markdown","5125b796":"markdown","de7bb1bc":"markdown","0ce43a26":"markdown","e8342c66":"markdown","b1e3c8b6":"markdown","b8bf4f0c":"markdown","6e6aac94":"markdown","7a7295ab":"markdown"},"source":{"2e65e445":"import pandas as pd\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","15fe3e28":"train.head(5)","716b1ba1":"test.head(5) #survived \uce7c\ub7fc\ub9cc \uc5c6\ub2e4. \uc65c\ub0d0? \ud0c0\uac9f\uc774\uae30 \ub54c\ubb38(\uc885\uc18d\ubcc0\uc218 = \uc608\uce21\ud574\uc57c\ud558\ub294 \uac83\uc774\uae30 \ub54c\ubb38)","47c743d3":"train.shape","963bf897":"test.shape #\uce7c\ub7fc \ud55c\uac1c\uac00 \uc801\ub2e4 = survived","54ccc39c":"train.info() #\ucd1d 891\uac1c\uac00 \uc788\uc5b4\uc57c \uacb0\uce21\uac12(NaN) \uc5c6\ub294 \uac83, \uadf8\ub7ec\ub098 Age, Cabin\uac19\uc740\uacbd\uc6b0 NaN\uc774 \ub9ce\ub2e4 ","693997cf":"test.info()","5855ef30":"train.isnull().sum() #\uc774\ub807\uac8c NaN(Null) \uac12\uc744 \ud45c\uc2dc\ud560 \uc218\ub3c4 \uc788\ub2e4","160f851a":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() #setting seaborn default for plots - \ub514\ud3f4\ud2b8 \uac12\uc73c\ub85c \uc124\uc815","53f4be75":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts() #feature\uc5d0 \ub530\ub77c \uc0dd\uc874\ud55c value(\uc0ac\ub78c) \uce74\uc6b4\ud2b8\n    dead = train[train['Survived']==0][feature].value_counts() #feature\uc5d0 \ub530\ub77c \uc8fd\uc740 value(\uc0ac\ub78c) \uce74\uc6b4\ud2b8 \n    df = pd.DataFrame([survived,dead]) #\ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubb36\uace0\n    df.index = ['Survived','Dead'] #\uc778\ub371\uc2a4 \ub2ec\uc544\uc8fc\uace0 \n    df.plot(kind='bar',stacked=True, figsize=(10,5)) #\ucc28\ud2b8\uadf8\ub9ac\uae30 ","c9ee34a3":"bar_chart('Sex') #\uc131\ubcc4\uc5d0 \ub530\ub77c\uc11c \uc8fd\uc5c8\ub294\uc9c0 \uc0b4\uc558\ub294\uc9c0 ","4ee4abaa":"bar_chart('Pclass') #\ud074\ub798\uc2a4\uc5d0 \ub530\ub77c\uc11c \uc8fd\uc5c8\ub294\uc9c0 \uc0b4\uc558\ub294\uc9c0 - \uc704 Data dictionary \ucc38\uc870","0ae24711":"bar_chart('SibSp') #\uac00\uc871\uc218\uc5d0 \ub530\ub77c\uc11c \uc8fd\uc5c8\ub294\uc9c0 \uc0b4\uc558\ub294\uc9c0 - \uc704 Data dictionary \ucc38\uc870","052bb427":"bar_chart('Embarked') #\uc2b9\uc120\ud55c \uc120\ucc29\uc7a5\uc5d0 \ub530\ub77c\uc11c \uc8fd\uc5c8\ub294\uc9c0 \uc0b4\uc558\ub294\uc9c0 - \uc704 Data dictionary \ucc38\uc870","ddc8a986":"train.head(5)","e904899b":"train_test_data = [train, test] # train\uacfc test set \ud569\uce68","c49c231e":"train_test_data #train(891 rows) + test(418 rows)\uac00 \ud569\uccd0\uc9c4\uac83 \ud655\uc778","1f05b5fa":"for dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)\n    ","5e82a246":"train['Title'].value_counts()","e50c30ce":"test['Title'].value_counts()","ed57296c":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    \n    #\uc704 Title Dictionary\uc5d0 \ub9de\uac8c \uc22b\uc790\ub97c mapping \ud574\uc900\ub2e4. \uc22b\uc790\ub85c \ubc14\uafb8\ub294 \uc774\uc720\ub294 \uc544\uae4c \ub9d0\ud588\ub358 \uac83\ucc98\ub7fc\n    #\ub300\ubd80\ubd84 \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\ub4e4\uc740 \ud14d\uc2a4\ud2b8\ub97c \uc77d\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38 ","59b64458":"train.head(5)","b0329310":"test.head(5)","06a582a8":"train.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","a5ac3326":"train.head(5)","cef3e05e":"test.head(5)","f022222f":"bar_chart('Title')","8bc7de4a":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","ee4bde5e":"bar_chart('Sex')","e1f17c7b":"train.head(5)","47bf7b59":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\n\n#train\uc758 Age \uce7c\ub7fc\uc758 nan\uac12\uc744 train\uc758 title\ub85c gourp\uc744 \uc9c0\uc5b4\uc11c \ud574\ub2f9 \uadf8\ub8f9\uc758 age\uce7c\ub7fc\uc758 median\uac12\uc73c\ub85c \ub300\uccb4\ud558\uaca0\ub2e4.\n#0 = Mr, 1 = Mrs, 2 = Miss, 3 = Others\n","89b57a71":"test[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\n#test \uac12\uc744 ~ \uc704\uc640\ub3d9\uc77cF\n","30d69e2d":"train.head(5)","936b7b8d":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","4a1459d2":"train.head(5)","6b0e93f8":"bar_chart('Age')","278a1ba8":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\n\n#Embarked \uce7c\ub7fc\uc5d0\uc11c Pclass\uac00 1\uc778 \uc778\uc2a4\ud134\uc2a4\uc758 \uac2f\uc218\ub97c \uce74\uc6b4\ud2b8\ud558\uc5ec Pclass1 \ubcc0\uc218\uc5d0 \ub2f4\ub294\ub2e4\n#2, 3\ub3c4 \ubc18\ubcf5\n","2d9fc8c9":"df = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","212a9b99":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","df15e657":"train.head(5)","818502ba":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","f56f36e7":"train.head(5) #\ub9c8\ucc2c\uac00\uc9c0\ub85c text\ub294 \ubabb\uc77d\uc73c\ub2c8 \uc22b\uc790\ub85c \ub9e4\ud551\ud574\uc900\ub2e4","aaecc0a1":"# Nan\uc778 \uc778\uc2a4\ud134\uc2a4\uac00 \uc18d\ud55c Pclass\uc758 median\uac12\uc744 \ud574\ub2f9 \uacb0\uce21\uc9c0\ub97c \uac00\uc9c4 \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub123\uc5b4\uc900\ub2e4. \uc544\uae4c Age\ub791 \ub3d9\uc77c\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\n","0779a6f7":"train.head(5)","34f16a2e":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","306625b0":"train.head(5)","103a5145":"train.Cabin.value_counts()","8d149ac5":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","44ca9653":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts() #Pclass=1\uc5d0 \ud574\ub2f9\ud558\ub294 Cabin \uac12\uc744 \uce74\uc6b4\ud2b8\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts() #\ubc18\ubcf5\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","23ca2af7":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","4e42262c":"#Pclass\uc758 median\uc73c\ub85c Cabin \uacb0\uce21\uce58 \ub300\uccb4\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","dfff883e":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1 #sib = \ud615\uc81c\uc790\ub9e4, Parch = \ubd80\ubaa8\uc790\uc2dd\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1 #\uc989 \ud615\uc81c\uc790\ub9e4 \uc218 + \ubd80\ubaa8\uc790\uc2dd\uc218 + \ub098 = \uc6b0\ub9ac\uac00\uc871\uc218 \n","522cf265":"train[\"FamilySize\"].max()","abc72c9b":"test[\"FamilySize\"].max()","08939f3c":"#FamilySize\uc758 \ubc94\uc704\ub294 1~11\uc774\ub2e4. \ub530\ub77c\uc11c \uc704\uc5d0\uc11c \uc124\uba85\ud55c \ube44\ub2dd \ubc29\uc2dd\uc73c\ub85c \uc815\uaddc\ud654\ub97c \ud574\uc900\ub2e4\n\nfamily_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","5db4431c":"train.head(5)","b32cb646":"#\ud2f0\ucf13\ubc88\ud638, \ud615\uc81c\uc790\ub9e4\uc218, \ubd80\ubaa8\uac00\uc871\uc218 \uce7c\ub7fc\uc740 \ub4dc\ub78d\ud558\ub3c4\ub85d \ud55c\ub2e4\nfeatures_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1) #\uc778\ub371\uc2a4 \ud544\uc694\uc5c6\uc74c ","ef6ebda5":"train.head(5)","b7c1a9c6":"#train.to_csv('train_dropnulll.csv', index=False)","f54c3c2d":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape #survived\ub97c \ub54c\uc11c target\uac12\uc73c\ub85c \uc900\ub2e4 ","0069e72c":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\n\nimport numpy as np","ff45aea9":"train.info()","89f52933":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\n#use 10 fold cross validation\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0) #10\uac1c\uc758 fold\ub85c \ub098\ub208\ub2e4\n","602b8400":"RFC = RandomForestClassifier()\n\n\n## Search grid for optimal parameters\nrf_param_grid = {\"max_depth\": [None],\n              \"max_features\": [3, 8, 8],\n              \"min_samples_split\": [2, 3, 8],\n              \"min_samples_leaf\": [1, 3, 8],\n              \"bootstrap\": [False],\n              \"n_estimators\" :[100,300],\n              \"criterion\": [\"gini\"]}\n\n\ngsRFC = GridSearchCV(RFC, rf_param_grid, cv=k_fold, scoring=\"accuracy\",  verbose = 1)\n#print(score)\n\ngsRFC.fit(train_data,target)\n\nRFC_best = gsRFC.best_estimator_\n\n# Best score\ngsRFC.best_score_\n \n","47dbdf3d":"GBC = GradientBoostingClassifier()\ngb_param_grid = {'loss' : [\"deviance\"],\n              'n_estimators' : [100,200,300],\n              'learning_rate': [0.1, 0.05, 0.01],\n              'max_depth': [4, 8],\n              'min_samples_leaf': [100,150],\n              'max_features': [0.3, 0.1] \n              }\n\ngsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv=k_fold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsGBC.fit(train_data,target)\n\nGBC_best = gsGBC.best_estimator_\n\n# Best score\ngsGBC.best_score_","8a30b3d1":"### SVC classifier\nSVMC = SVC(probability=True)\nsvc_param_grid = {'kernel': ['rbf'], \n                  'gamma': [ 0.001, 0.01, 0.1, 1],\n                  'C': [1, 10, 50, 100,200,300, 1000]}\n\ngsSVMC = GridSearchCV(SVMC,param_grid = svc_param_grid, cv=k_fold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsSVMC.fit(train_data,target)\n\nSVMC_best = gsSVMC.best_estimator_\n\n# Best score\ngsSVMC.best_score_","004947cf":"gsSVMC.best_estimator_","40624f6a":"XGBC = XGBClassifier()\nxgb_param_grid = {'max_depth':[3,5,7],\n                  'min_child_weight':[3,5,6],\n                  'gamma': [ 0, 0.001, 0.01, 0.1, 1],\n                  'learning_rate':[0.1, 0.05, 0.01]}\n\ngsXGBC = GridSearchCV(XGBC,param_grid = xgb_param_grid, cv=k_fold, scoring=\"accuracy\", n_jobs= 4, verbose = 1)\n\ngsXGBC.fit(train_data,target)\n\nXGBC_best = gsXGBC.best_estimator_\n\n# Best score\ngsXGBC.best_score_\n\n\n","1d9ac5f5":"votingC = VotingClassifier(estimators=[('rfc', RFC_best), \n('svc', SVMC_best),('gbc',GBC_best), ('xgb', XGBC_best)], voting='hard', n_jobs=4)\n\nvotingC = votingC.fit(train_data, target)","389bd323":"votingC.predict","0eaebbaa":"test_data = test.drop(\"PassengerId\", axis=1).copy()","cb803ae4":"prediction = votingC.predict(test_data) ","b1d45a01":"#\ucf00\uae00\uc5d0 \uc81c\ucd9c\ud560 csv\ud30c\uc77c \uc800\uc7a5\n#submission = pd.DataFrame({\n#        \"PassengerId\": test[\"PassengerId\"],\n#        \"Survived\": prediction\n#    })\n\n#submission.to_csv('submission.csv', index=False)","4ea76c66":"\uacb0\uacfc\ub97c \ubcfc \ub54c, Q\uc9c0\uc5ed\uc740 \uc880 \ubabb\uc0ac\ub294 \uacf3\uc778\uac83 \uac19\uc740\ub370.. \uadf8 \uc678\ub294 \ud30c\uc545\ud558\uae30 \ud798\ub4e4\ub2e4. \ud558\uc9c0\ub9cc \uc804\uccb4 \ud0d1\uc2b9\uac1d\uc911 S\uc758 \ube44\uc728\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub192\uae30 \ub54c\ubb38\uc5d0, Embarked\uac00 Nan\uc774\uba74 \uadf8\ub0e5 S\ub77c\uace0 \ud574\ub3c4 \ubb34\ubc29\ud558\ub2e4\ub294 \uac00\uc815\uc744 \ud560 \uc218 \uc788\ub2e4.","3506d112":"- RF Classifier\n- GB Classifier\n- SVM Classifier\n- XGB Classifier","b95c7b45":"# <h3> 2-5. Embarked","4d255560":"<h5> Voting Classifier","2580def0":"\uc55e\uc5d0 \uc54c\ud30c\ubcb3\ub9cc \ub530\uc640\ubcf4\ub3c4\ub85d \ud55c\ub2e4","99e2847a":"# <h3> 2-4. Age_Binning","7cdebf7d":"age dictionary::\n<br>\nchild: 0<br>\nyoung: 1<br>\nadult: 2<br>\nmid-age: 3<br>\nsenior: 4<br>\n\n16\uc138 \uc774\ud558\ub294 0(child), 17~26\uc138\ub294 1(young) \ub4f1\ub4f1.. \uc73c\ub85c \ubcc0\ud658\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4.\n<br>","2faee5ba":"http:\/\/scikit-learn.org\/stable\/index.html","bef45b5b":"\ub0a8\uc790\uac00 \ub9ce\uc774 \uc8fd\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4 - \uc5ec\uc790\ub4e4\uc774 \ub354 \ub9ce\uc774 \uc0b4\uc544\ub0a8\uc558\ub2e4.","0bc8eb3a":"Title dictionary::<br>\nMr = 0<br>\nMrs = 1<br>\nMrs = 2<br>\nOthers = 3<br>\n\n\ucc38\uace0\ub85c \uc704 \uc22b\uc790\ub294 order \uad00\uacc4\uac00 \uc544\ub2c8\ub2e4(\uc6b0\uc120\uc21c\uc704, \uc21c\uc11c\uac00 \uc5c6\ub2e4)","38a348f2":"# 2. Feature Engerning \ub370\uc774\ud130 \uc804\ucc98\ub9ac","77452565":"<h2> We will use Voting Classifier ","7bdbb180":"# 1. Titanic data explore","91b55a86":"\uc560\ub9e4\ud558\uae34 \ud558\uc9c0\ub9cc S\uc5d0\uc11c \ud0d4\uc744 \uacbd\uc6b0 \ub354 \ub9ce\uc774 \uc8fd\uc744 \uac00\ub2a5\uc131\uc774 \uc788\ub2e4.","67aa2d47":"\ud63c\uc790 \ud0c4 \uacbd\uc6b0 \uc870\uae08 \ub354 \ub9ce\uc774 \uc8fd\uc5c8\ub2e4","efc1c08e":"# <h3>1-2. Data Visualization \ub370\uc774\ud130 \uc2dc\uac01\ud654 #","adb1054b":"# <h3> 2-1. Name","9776931e":"<h5> RF","d37f7ad3":"# 3. Modeling","c11041bc":"# <h3> 2-7. Cabin","f2488980":"<h5>XGB Classifier","669d21bd":"# Reference","1c6d2e63":"https:\/\/www.youtube.com\/channel\/UCxP77kNgVfiiG6CXZ5WMuAQ","2ddb79f1":"Nan\uac12\uc744 \ucc44\uc6cc\uc57c \ud55c\ub2e4. \uc774 \ub54c Title\uc744 \ubc14\ud0d5\uc73c\ub85c 0\uc740 0\ub098\uc774\uc758 \ud3c9\uade0(\ub0a8\uc790 \ub098\uc774\uc758 \ud3c9\uade0), 1\uc740 1\ub098\uc774\uc758 \ud3c9\uade0(\uae30\ud63c \uc5ec\uc131\uc774\uba74 \uae30\ud63c \uc5ec\uc131\uc758 \ud3c9\uade0) \ubbf8\ud63c\uc5ec\uc131\uc740 \ubbf8\ud63c\uc5ec\uc131\uc758 \ud3c9\uade0..\ub4f1 Title\ubcc4\ub85c group\uc744 \uc9c0\uc5b4\uc11c \ud574\ub2f9 group\uc5d0 \uc18d\ud558\ub294 \ud3c9\uade0\uc744 Nan\uac12\uc5d0 \ub123\ub294\ub2e4","fd30188f":"have to deal with null values.\n\n1. \uc77c\ubc18\uc801\uc73c\ub85c \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc740 text\ub97c \uc798 \uc77d\uc9c0 \ubabb\ud55c\ub2e4. \uadf8\ub798\uc11c \uc774\ub97c \uc22b\uc790\ub85c \ubc14\uafd4\uc8fc\ub294 \uacfc\uc815\uc744 \uc9c4\ud589\ud55c\ub2e4 - one hot encoding \ub4f1\n\n2. Nan(null\uac12)\uc744 \ucc44\uc6cc\uc904 \ubc29\ubc95\uc774 \ud544\uc694\ud558\ub2e4. \ud3c9\uade0\uac12\uc73c\ub85c \ub300\uccb4\ud558\uac70\ub098 null\uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 row\ub97c drop\ud558\ub294 \ub4f1 \ub2e4\uc591\ud55c \ubc29\ubc95\uc774 \uc788\ub2e4.","6e93bcab":"<h5> SVC ","4e0e6d25":"\uc774\uc81c Name \uce7c\ub7fc\uc744 \uc0ad\uc81c\ud558\uc790","e7333262":"Age\uc758 NaN\uac12\uc774 \uc81c\uac70\ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.","4108cb68":"Titnaic intro","1bf5fe6f":"1\ub4f1\uc11d\uc5d0\ub294 ABCDE\ub85c \uc2dc\uc791\ud558\ub294 cabin\uc774 \ub9ce\uc9c0\ub9cc 2\ub4f1\uc11d 3\ub4f1\uc11d\uc740 \uc544\uc608 \uc5c6\ub2e4.","ecc09d72":"3\ub4f1\uc11d(\uac12 \uc2fc \uc88c\uc11d)\uc77c\uc218\ub85d \ub9ce\uc774\uc8fd\uc5c8\ub2e4","f8f12bbc":"# <h3> 2-8. Familysize","05d95879":"\uc5ed\uc2dc \ub0a8\uc790(=0) \uc774 \ub9ce\uc774 \uc8fd\uc5c8\ub2e4","55439bb7":"\uc774\ub984\ud0ed\uc5d0\uc11c \uc774\ub984 \uc790\uccb4\ub294 \ud070 \uc601\ud5a5\uc774 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc Mr, Mrs, Miss \ub4f1 \uc131\ubcc4, \uacb0\ud63c \uc720\ubb34\ub97c \uc54c \uc218 \uc788\ub294 \ud0c0\uc774\ud2c0\uc740 \ub9e4\uc6b0 \uc911\uc694\ud55c \uc815\ubcf4\uac00 \ub420 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \ud0c0\uc774\ud2c0\uc744 \ucd94\ucd9c\ud55c \ud6c4 \uc774\ub984 \uce7c\ub7fc\uc744 \uc0ad\uc81c\ud55c\ub2e4.","5125b796":"# <h3> 2-6. Fare","de7bb1bc":"\uc774\uc81c \uc880 \ub354 \uae54\ub054\ud558\uac8c \ubcf4\uc778\ub2e4","0ce43a26":"Age\uc758 scale\uc774 \ub113\uae30 \ub54c\ubb38\uc5d0 Scale\uc744 \uc870\uc808\ud558\uae30\ub85c \ud55c\ub2e4. \n\uc815\uad50\ud654 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc774\ubc88\uc5d0\ub294 \uc2ed\ub300 \uc774\uc2ed\ub300 \uc0bc\uc2ed\ub300 \ub4f1 \uad6c\uac04\uc744 \uc815\ud558\uace0\n\uadf8 \uad6c\uac04\ubcc4\ub85c \uadf8\ub8f9\ud654\ud558\ub3c4\ub85d \ud55c\ub2e4.\n\n\ucf54\ub529 \ucc98\uc74c\ubc30\uc6b8\ub54c \uc810\uc218\uc5d0\ub530\ub77c \ud559\uc810 \ubd80\uc5ec\ud558\ub294 while\ubb38, switch\ubb38 \ub4f1\uc744 \uc0dd\uac01\ud558\uba74 \ub41c\ub2e4.","e8342c66":"<h5> GB","b1e3c8b6":"embarked\ub294 \ud0d1\uc2b9\ud55c \uc120\ucc29\uc7a5\uc5d0 \uad00\ud55c \uc815\ubcf4\uc774\ub2e4. \uace0\uc18c\ub4dd \uac70\uc8fc\uc790 \uc9c0\uc5ed\uc5d0\uc11c \ud0d1\uc2b9\ud558\uc600\uc73c\uba74 1\ub4f1\uc11d\uc77c \ud655\ub960\uc774 \ub192\uace0 \uc0dd\uc874\ud560 \ud655\ub960\uc774 \ub192\uc544\uc9c0\uaca0\uc9c0\ub9cc, \uadf8 \ubc18\ub300\ub77c\uba74 \ub0ae\uc544\uc9c0\uc9c0 \uc54a\uc744 \uac00\ub2a5\uc131\uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc5b4\ub290\uc815\ub3c4 \uc720\uc758\ubbf8\ud55c \ubcc0\uc218\ub77c \ud560 \uc218 \uc788\ub2e4.","b8bf4f0c":"Fare\ub3c4 \uc5ed\uc2dc Scale \ud574\uc900\ub2e4","6e6aac94":"# <h3> 2-2. Sex","7a7295ab":"# <h3> 2-3. Age"}}