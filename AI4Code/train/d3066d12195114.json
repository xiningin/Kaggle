{"cell_type":{"c84979e0":"code","ea8cf7b1":"code","d4541a8e":"code","95a781c2":"code","07e6d79b":"code","0ec1f74c":"code","a4615735":"code","40bd2576":"code","24956926":"code","a079d47b":"code","b4e995e0":"code","3a40019a":"code","2be0d73e":"code","cfca15a5":"code","6d3f1ae1":"code","9be32045":"code","aaa7212e":"code","35b33f0d":"code","9e04fa18":"code","ccbed556":"code","2d16d1a0":"code","3869ed6d":"code","8ee91794":"code","ab5db459":"code","6c61985f":"code","5247d809":"code","96a9791f":"code","42f18967":"code","788ae54d":"code","196b840b":"code","a305c81c":"code","bcb5fed9":"code","2b69b2a2":"code","4b0dbb14":"code","a91c9e3d":"code","a62b456f":"code","aa22caba":"code","75b507f5":"code","9412e5c5":"code","8de1084a":"code","c2b56b06":"code","01798c84":"code","930a8f46":"code","755abe54":"code","5239021a":"markdown","2e93a3e7":"markdown","4e51d0b6":"markdown","feec69c3":"markdown","653ee848":"markdown","2363597e":"markdown","8e570568":"markdown","69f9b493":"markdown","0cb3a089":"markdown","6a10d3bd":"markdown","37cfb9e7":"markdown","91739f66":"markdown","41e1f0f1":"markdown","4a9db416":"markdown","94899d92":"markdown","6df42fb8":"markdown","d6d7e7de":"markdown","13710557":"markdown","29a3a471":"markdown","9ca404ec":"markdown","895b7a62":"markdown","f4df6bd6":"markdown","74f479ab":"markdown","f7bd1502":"markdown","dbf7515a":"markdown","f09ea4a6":"markdown","0103128d":"markdown","595edd51":"markdown","10546651":"markdown","0a2a9991":"markdown","0e2a2bdd":"markdown","6423d128":"markdown","d6bafd42":"markdown","fef803a0":"markdown","d8c53618":"markdown","f39a50c4":"markdown","cf24e6a2":"markdown","641f253a":"markdown"},"source":{"c84979e0":"# Data filter\nfinish_data = 2014 # no leaks\n#finish_data = 2019 # all data\n\n# LGB\nlgb_num_leaves_max = 200\nlgb_in_leaf = 10\nlgb_lr = 0.001\nlgb_bagging = 7\n\n# XGB\nxgb_max_depth = 7\nxgb_min_child_weight = 75\nxgb_lr = 0.0004\nxgb_num_boost_round_max = 3000\n\n# Set weight of models\nw_lgb = 0.4\nw_xgb = 0.5\nw_logreg = 1 - w_lgb - w_xgb\nw_logreg","ea8cf7b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport eli5\n\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import GridSearchCV, KFold, train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix\nimport lightgbm as lgb\nimport xgboost as xgb\n\nimport gc\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","d4541a8e":"tourney_result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WNCAATourneyCompactResults.csv')\nif finish_data == 2014:\n    tourney_result = tourney_result[tourney_result['Season'] < 2015]\ntourney_seed = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WNCAATourneySeeds.csv')\nif finish_data == 2014:\n    tourney_seed = tourney_seed[tourney_seed['Season'] < 2015]\ntourney_result = tourney_result.drop(['DayNum', 'WScore', 'LScore', 'WLoc', 'NumOT'], axis=1)\ntourney_result = pd.merge(tourney_result, tourney_seed, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Seed':'WSeed'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result = pd.merge(tourney_result, tourney_seed, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Seed':'LSeed'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)","95a781c2":"tourney_seed","07e6d79b":"def get_seed(x):\n    return int(x[1:3])\n\ntourney_result['WSeed'] = tourney_result['WSeed'].map(lambda x: get_seed(x))\ntourney_result['LSeed'] = tourney_result['LSeed'].map(lambda x: get_seed(x))","0ec1f74c":"season_result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WRegularSeasonCompactResults.csv')\nif finish_data == 2014:\n    season_result = season_result[season_result['Season'] < 2015]\nseason_win_result = season_result[['Season', 'WTeamID', 'WScore']]\nseason_lose_result = season_result[['Season', 'LTeamID', 'LScore']]\nseason_win_result.rename(columns={'WTeamID':'TeamID', 'WScore':'Score'}, inplace=True)\nseason_lose_result.rename(columns={'LTeamID':'TeamID', 'LScore':'Score'}, inplace=True)\nseason_result = pd.concat((season_win_result, season_lose_result)).reset_index(drop=True)\nseason_score = season_result.groupby(['Season', 'TeamID'])['Score'].sum().reset_index()","a4615735":"tourney_result = pd.merge(tourney_result, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Score':'WScoreT'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)\ntourney_result = pd.merge(tourney_result, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntourney_result.rename(columns={'Score':'LScoreT'}, inplace=True)\ntourney_result = tourney_result.drop('TeamID', axis=1)","40bd2576":"tourney_win_result = tourney_result.drop(['Season', 'WTeamID', 'LTeamID'], axis=1)\ntourney_win_result.rename(columns={'WSeed':'Seed1', 'LSeed':'Seed2', 'WScoreT':'ScoreT1', 'LScoreT':'ScoreT2'}, inplace=True)","24956926":"tourney_lose_result = tourney_win_result.copy()\ntourney_lose_result['Seed1'] = tourney_win_result['Seed2']\ntourney_lose_result['Seed2'] = tourney_win_result['Seed1']\ntourney_lose_result['ScoreT1'] = tourney_win_result['ScoreT2']\ntourney_lose_result['ScoreT2'] = tourney_win_result['ScoreT1']","a079d47b":"tourney_win_result['Seed_diff'] = tourney_win_result['Seed1'] - tourney_win_result['Seed2']\ntourney_win_result['ScoreT_diff'] = tourney_win_result['ScoreT1'] - tourney_win_result['ScoreT2']\ntourney_lose_result['Seed_diff'] = tourney_lose_result['Seed1'] - tourney_lose_result['Seed2']\ntourney_lose_result['ScoreT_diff'] = tourney_lose_result['ScoreT1'] - tourney_lose_result['ScoreT2']","b4e995e0":"tourney_win_result['result'] = 1\ntourney_lose_result['result'] = 0\ntrain_df = pd.concat((tourney_win_result, tourney_lose_result)).reset_index(drop=True)\ntrain_df","3a40019a":"season_result","2be0d73e":"tourney_result","cfca15a5":"test_df = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WSampleSubmissionStage1_2020.csv')\nsub = test_df.copy()","6d3f1ae1":"test_df","9be32045":"test_df['Season'] = test_df['ID'].map(lambda x: int(x[:4]))\ntest_df['WTeamID'] = test_df['ID'].map(lambda x: int(x[5:9]))\ntest_df['LTeamID'] = test_df['ID'].map(lambda x: int(x[10:14]))","aaa7212e":"tourney_seed = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WNCAATourneySeeds.csv')\nif finish_data == 2014:\n    tourney_seed = tourney_seed[tourney_seed['Season'] > 2014]","35b33f0d":"season_result = pd.read_csv('..\/input\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament\/WDataFiles_Stage1\/WRegularSeasonCompactResults.csv')\nif finish_data == 2014:\n    season_result = season_result[season_result['Season'] > 2014]\nseason_win_result = season_result[['Season', 'WTeamID', 'WScore']]\nseason_lose_result = season_result[['Season', 'LTeamID', 'LScore']]\nseason_win_result.rename(columns={'WTeamID':'TeamID', 'WScore':'Score'}, inplace=True)\nseason_lose_result.rename(columns={'LTeamID':'TeamID', 'LScore':'Score'}, inplace=True)\nseason_result = pd.concat((season_win_result, season_lose_result)).reset_index(drop=True)\nseason_score = season_result.groupby(['Season', 'TeamID'])['Score'].sum().reset_index()","9e04fa18":"test_df = pd.merge(test_df, tourney_seed, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Seed':'Seed1'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, tourney_seed, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Seed':'Seed2'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, season_score, left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Score':'ScoreT1'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)\ntest_df = pd.merge(test_df, season_score, left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID'], how='left')\ntest_df.rename(columns={'Score':'ScoreT2'}, inplace=True)\ntest_df = test_df.drop('TeamID', axis=1)","ccbed556":"test_df['Seed1'] = test_df['Seed1'].map(lambda x: get_seed(x))\ntest_df['Seed2'] = test_df['Seed2'].map(lambda x: get_seed(x))\ntest_df['Seed_diff'] = test_df['Seed1'] - test_df['Seed2']\ntest_df['ScoreT_diff'] = test_df['ScoreT1'] - test_df['ScoreT2']\ntest_df = test_df.drop(['ID', 'Pred', 'Season', 'WTeamID', 'LTeamID'], axis=1)\ntest_df","2d16d1a0":"X = train_df.drop('result', axis=1)\ny = train_df.result","3869ed6d":"print(sum(y), np.mean(y), np.std(y))","8ee91794":"X","ab5db459":"y","6c61985f":"params_lgb = {'num_leaves': lgb_num_leaves_max,\n              'min_data_in_leaf': lgb_in_leaf,\n              'objective': 'binary',\n              'max_depth': -1,\n              'learning_rate': lgb_lr,\n              \"boosting_type\": \"gbdt\",\n              \"bagging_seed\": lgb_bagging,\n              \"metric\": 'logloss',\n              \"verbosity\": -1,\n              'random_state': 42,\n             }","5247d809":"NFOLDS = 5\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\ny_preds_lgb = np.zeros(test_df.shape[0])\ny_train_lgb = np.zeros(X.shape[0])\ny_oof = np.zeros(X.shape[0])\n\nfeature_importances = pd.DataFrame()\nfeature_importances['feature'] = columns\n  \nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print('Fold:',fold_n+1)\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    dtrain = lgb.Dataset(X_train, label=y_train)\n    dvalid = lgb.Dataset(X_valid, label=y_valid)\n\n    clf = lgb.train(params_lgb, dtrain, 10000, valid_sets = [dtrain, dvalid], verbose_eval=200)\n    \n    feature_importances[f'fold_{fold_n + 1}'] = clf.feature_importance()\n    \n    y_pred_valid = clf.predict(X_valid)\n    y_oof[valid_index] = y_pred_valid\n    \n    y_train_lgb += clf.predict(X) \/ NFOLDS\n    y_preds_lgb += clf.predict(test_df) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","96a9791f":"print(min(y_preds_lgb),max(y_preds_lgb))\nprint(min(y_train_lgb),max(y_train_lgb))","42f18967":"params_xgb = {'max_depth': xgb_max_depth,\n              'objective': 'binary:logistic',\n              'min_child_weight': xgb_min_child_weight,\n              'learning_rate': xgb_lr,\n              'eta'      : 0.3,\n              'subsample': 0.8,\n              'eval_metric': 'logloss',\n              'colsample_bylevel': 1\n              }","788ae54d":"# Thanks to https:\/\/www.kaggle.com\/khoongweihao\/ncaam2020-xgboost-lightgbm-k-fold-baseline\nNFOLDS = 5\nfolds = KFold(n_splits=NFOLDS)\n\ncolumns = X.columns\nsplits = folds.split(X, y)\n\ny_preds_xgb = np.zeros(test_df.shape[0])\ny_train_xgb = np.zeros(X.shape[0])\ny_oof_xgb = np.zeros(X.shape[0])\n\ntrain_df_set = xgb.DMatrix(X)\ntest_set = xgb.DMatrix(test_df)\n  \nfor fold_n, (train_index, valid_index) in enumerate(splits):\n    print('Fold:',fold_n+1)\n    X_train, X_valid = X[columns].iloc[train_index], X[columns].iloc[valid_index]\n    y_train, y_valid = y.iloc[train_index], y.iloc[valid_index]\n    \n    train_set = xgb.DMatrix(X_train, y_train)\n    val_set = xgb.DMatrix(X_valid, y_valid)\n    \n    clf = xgb.train(params_xgb, train_set, num_boost_round=xgb_num_boost_round_max, evals=[(train_set, 'train'), (val_set, 'val')], verbose_eval=100)\n    \n    y_train_xgb += clf.predict(train_df_set) \/ NFOLDS\n    y_preds_xgb += clf.predict(test_set) \/ NFOLDS\n    \n    del X_train, X_valid, y_train, y_valid\n    gc.collect()","196b840b":"test_df.head()","a305c81c":"%%time\n# Standardization for regression models\nscaler = StandardScaler()\ntrain_log = pd.DataFrame(\n    scaler.fit_transform(X),\n    columns=X.columns,\n    index=X.index\n)\ntest_log = pd.DataFrame(\n    scaler.transform(test_df),\n    columns=test_df.columns,\n    index=test_df.index\n)","bcb5fed9":"# Logistic Regression\n\nlogreg = LogisticRegression()\nlogreg.fit(train_log, y)\ncoeff_logreg = pd.DataFrame(train_log.columns.delete(0))\ncoeff_logreg.columns = ['feature']\ncoeff_logreg[\"score_logreg\"] = pd.Series(logreg.coef_[0])\ncoeff_logreg.sort_values(by='score_logreg', ascending=False)","2b69b2a2":"# Eli5 visualization\neli5.show_weights(logreg)","4b0dbb14":"y_logreg_train = logreg.predict(train_log)\ny_logreg_pred = logreg.predict(test_log)","a91c9e3d":"# Showing Confusion Matrix\n# Thanks to https:\/\/www.kaggle.com\/marcovasquez\/basic-nlp-with-tensorflow-and-wordcloud\ndef plot_cm(y_true, y_pred, title, figsize=(7,6)):\n    y_pred = y_pred.round().astype(int)\n    cm = confusion_matrix(y_true, y_pred, labels=np.unique(y_true))\n    cm_sum = np.sum(cm, axis=1, keepdims=True)\n    cm_perc = cm \/ cm_sum.astype(float) * 100\n    annot = np.empty_like(cm).astype(str)\n    nrows, ncols = cm.shape\n    for i in range(nrows):\n        for j in range(ncols):\n            c = cm[i, j]\n            p = cm_perc[i, j]\n            if i == j:\n                s = cm_sum[i]\n                annot[i, j] = '%.1f%%\\n%d\/%d' % (p, c, s)\n            elif c == 0:\n                annot[i, j] = ''\n            else:\n                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n    cm = pd.DataFrame(cm, index=np.unique(y_true), columns=np.unique(y_true))\n    cm.index.name = 'Actual'\n    cm.columns.name = 'Predicted'\n    fig, ax = plt.subplots(figsize=figsize)\n    plt.title(title)\n    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax)","a62b456f":"# Showing Confusion Matrix for LGB model\nplot_cm(y, y_train_lgb, 'Confusion matrix for LGB model')","aa22caba":"# Showing Confusion Matrix for XGB model\nplot_cm(y, y_train_xgb, 'Confusion matrix for XGB model')","75b507f5":"# Showing Confusion Matrix for Logistic Regression\nplot_cm(y, y_logreg_train, 'Confusion matrix for Logistic Regression')","9412e5c5":"y_preds = w_lgb*y_preds_lgb + w_xgb*y_preds_xgb + w_logreg*y_logreg_pred","8de1084a":"# Showing Confusion Matrix for Merging solution\ny_train_preds = w_lgb*y_train_lgb + w_xgb*y_train_xgb + w_logreg*y_logreg_train\nplot_cm(y, y_train_preds, 'Confusion matrix for Merging solution')","c2b56b06":"sub['Pred'] = y_preds\nsub.head()","01798c84":"sub.info()","930a8f46":"sub['Pred'].hist()","755abe54":"sub.to_csv('submission.csv', index=False)","5239021a":"# Preparing testing data","2e93a3e7":"### Commit 4\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.8\n* w_xgb = 0.1\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.12234**","4e51d0b6":"## 1.1. Commit now <a class=\"anchor\" id=\"1.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","feec69c3":"## 2. Import libraries <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","653ee848":"# Acknowledgements\n\nThis kernel uses such good kernels for NCAAM: \n* [Merging FE & Prediction - xgb, lgb, logr, linr](https:\/\/www.kaggle.com\/vbmokin\/merging-fe-prediction-xgb-lgb-logr-linr)\n* [Basic Starter Kernel](https:\/\/www.kaggle.com\/addisonhoward\/basic-starter-kernel-ncaa-men-s-dataset-2019)\n* [2020 Basic Starter Kernel](https:\/\/www.kaggle.com\/hiromoon166\/2020-basic-starter-kernel)\n* [March Madness 2020 NCAAM EDA and baseline](https:\/\/www.kaggle.com\/artgor\/march-madness-2020-ncaam-eda-and-baseline)\n* [March Madness 2020 NCAAM:Simple Lightgbm on KFold](https:\/\/www.kaggle.com\/ratan123\/march-madness-2020-ncaam-simple-lightgbm-on-kfold)\n* [NCAAM2020: XGBoost + LightGBM K-Fold (Baseline)](https:\/\/www.kaggle.com\/khoongweihao\/ncaam2020-xgboost-lightgbm-k-fold-baseline)","2363597e":"### Commit 6\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.7\n* w_xgb = 0.2\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.51345**","8e570568":"## 1.2. Previous commits: no leaks <a class=\"anchor\" id=\"1.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","69f9b493":"## 7. Submission <a class=\"anchor\" id=\"7\"><\/a>\n\n[Back to Table of Contents](#0.1)","0cb3a089":"## This kernel use my kernel from NCAAM (2020) [MM NCAAM [No leaks]: LGB, XGB, LogReg](https:\/\/www.kaggle.com\/vbmokin\/mm-ncaam-no-leaks-lgb-xgb-logreg)","6a10d3bd":"## 5. Showing Confusion Matrices <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","37cfb9e7":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [My upgrade](#1)\n    -  [Commit now](#1.1)\n    -  [Previous commits: no leaks](#1.2)\n    -  [Previous commits: all data](#1.3)\n1. [Import libraries](#2)\n1. [Download data & FE](#3)\n1. [Models tuning](#4)\n    -  [LGB](#4.1)\n    -  [XGB](#4.2)    \n    -  [Logistic Regression](#4.3)\n1. [Showing Confusion Matrices](#5)\n1. [Comparison and merging solutions](#6)\n1. [Submission](#7)","91739f66":"### 4.3 Logistic Regression <a class=\"anchor\" id=\"4.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","41e1f0f1":"### 4.1 LGB <a class=\"anchor\" id=\"4.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","4a9db416":"### 4.2 XGB <a class=\"anchor\" id=\"4.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","94899d92":"### Confusion Matrix","6df42fb8":"## Prepare Training Data","d6d7e7de":"## 6. Comparison and merging solutions <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","13710557":"### Commit 12\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.005\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 10\n* xgb_lr = 0.0001\n* xgb_n_estimators = 4000\n\n\n* Set weight of models\n* w_lgb = 0.6\n* w_xgb = 0.3\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.50948**","29a3a471":"<a class=\"anchor\" id=\"0\"><\/a>\n# [Google Cloud & NCAA\u00ae ML Competition 2020-NCAAW](https:\/\/www.kaggle.com\/c\/google-cloud-ncaa-march-madness-2020-division-1-womens-tournament)","9ca404ec":"I hope you find this kernel useful and enjoyable.","895b7a62":"### Merging solutions","f4df6bd6":"### Commit 13\n\n* LGB \n* lgb_num_leaves_max = 300\n* lgb_in_leaf = 10\n* lgb_lr = 0.005\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 10\n* xgb_min_child_weight = 10\n* xgb_lr = 0.0001\n* xgb_n_estimators = 4000\n\n\n* Set weight of models\n* w_lgb = 0.6\n* w_xgb = 0.3\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.50949**","74f479ab":"### Commit 2\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.6\n* w_xgb = 0.3\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.49740**","f7bd1502":"### Commit 1\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.5\n* w_xgb = 0.4\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.48951**","dbf7515a":"## Commits 1, 2, 5, 6, 11, 12, 13, 15 - no leaks\n## Commits 3, 4, 7, 8, 10 - all data (experiment with leaks)\nCommit 9, 14 - not good","f09ea4a6":"## 4. Model tuning <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","0103128d":"### Commit 3\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.5\n* w_xgb = 0.4\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.24694**","595edd51":"### Commit 15\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 3000\n\n\n* Set weight of models\n* w_lgb = 0.45\n* w_xgb = 0.45\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.48206**","10546651":"## 3. Download data & FE <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","0a2a9991":"## 1. My upgrade<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","0e2a2bdd":"## 1.3. Previous commits: all data <a class=\"anchor\" id=\"1.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","6423d128":"Your comments and feedback are most welcome.","d6bafd42":"## In this notebook, I'm just training some models (LGB, XGB etc.).","fef803a0":"### Commit 11\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 10\n* xgb_lr = 0.0004\n* xgb_n_estimators = 4000\n\n\n* Set weight of models\n* w_lgb = 0.6\n* w_xgb = 0.3\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.50674**","d8c53618":"[Go to Top](#0)","f39a50c4":"### Commit 7\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.7\n* w_xgb = 0.2\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.16190**","cf24e6a2":"Thanks to:\n* [March Madness 2020 NCAAM EDA and baseline](https:\/\/www.kaggle.com\/artgor\/march-madness-2020-ncaam-eda-and-baseline)\n* [March Madness 2020 NCAAM:Simple Lightgbm on KFold](https:\/\/www.kaggle.com\/ratan123\/march-madness-2020-ncaam-simple-lightgbm-on-kfold)","641f253a":"### Commit 5\n\n* LGB \n* lgb_num_leaves_max = 200\n* lgb_in_leaf = 10\n* lgb_lr = 0.001\n* lgb_bagging = 7\n\n\n* XGB\n* xgb_max_depth = 7\n* xgb_min_child_weight = 75\n* xgb_lr = 0.0004\n* xgb_n_estimators = 2000\n\n\n* Set weight of models\n* w_lgb = 0.8\n* w_xgb = 0.1\n* w_logreg = 1 - w_lgb - w_xgb\n* w_logreg\n\n\n**LB = 0.54354**"}}