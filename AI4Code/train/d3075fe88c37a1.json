{"cell_type":{"eca5f50c":"code","61014104":"code","d50f95e0":"code","e09cb40b":"code","503dbd8f":"code","1f881811":"code","88551dd8":"code","8311e798":"code","7bd1cc6f":"code","31316e04":"code","34a0f455":"code","6df81d70":"code","00d2d8fa":"markdown","aaf673f6":"markdown","fc193fd7":"markdown","6936760f":"markdown","0cff0af8":"markdown","9859b252":"markdown","ebf9fc04":"markdown","80026c78":"markdown","cc2d28fc":"markdown","af65ada6":"markdown"},"source":{"eca5f50c":"from IPython.display import clear_output\n!pip install mljar-supervised --user\nclear_output()","61014104":"import numpy as np \nimport pandas as pd\nimport gc\nfrom supervised import AutoML\n\nDEFAULT_RANDOM_SEED = 2021\n\nimport os \nimport random\ndef seedBasic(seed=DEFAULT_RANDOM_SEED):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    \nseedBasic()","d50f95e0":"def getNonNAColumnList(df):\n    sumData_df = pd.DataFrame(df.isnull().sum())\n    sumData_df.columns = [\"na_count\"]\n    non_na_data = sumData_df[sumData_df[\"na_count\"] == 0]\n    \n    return non_na_data.index.to_list()\n\ndef getNAColumnList(df):\n    sumData_df = pd.DataFrame(df.isnull().sum())\n    sumData_df.columns = [\"na_count\"]\n    na_data = sumData_df[sumData_df[\"na_count\"] != 0]\n    \n    return na_data.index.to_list()","e09cb40b":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","503dbd8f":"train.shape,test.shape","1f881811":"drop_elements = [\"Id\"]\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)","88551dd8":"NAN_COL_TEST = getNonNAColumnList(test)\nNAN_COL_TRAIN = NAN_COL_TEST.copy()\nNAN_COL_TRAIN.append(\"SalePrice\")\n\ntrain = train[NAN_COL_TRAIN]\ntest = test[NAN_COL_TEST]","8311e798":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in test.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","7bd1cc6f":"train.shape,test.shape","31316e04":"from sklearn.preprocessing import MinMaxScaler\n\ncol = test.columns \nscaler = MinMaxScaler()\nscaled_train = scaler.fit_transform(train[col])\nscaled_test = scaler.transform(test[col])\n\nscaled_train = pd.DataFrame(scaled_train,columns=test.columns)\nscaled_train[\"SalePrice\"] = train[\"SalePrice\"]\nscaled_test = pd.DataFrame(scaled_test,columns=test.columns)","34a0f455":"TARGET = 'SalePrice'\nFEATURES = test.columns \n\nautoml = AutoML() \nautoml.fit(scaled_train[FEATURES], train[TARGET])\n\ntest_pred = automl.predict(scaled_test)\ntest_pred[:5]","6df81d70":"submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission.SalePrice = test_pred\nsubmission.to_csv(\"submission.csv\",index=False)\nsubmission.head()","00d2d8fa":"# submit","aaf673f6":"# one hot encoding","fc193fd7":"# Scaling(MinMaxScaler)","6936760f":"# import libraries","0cff0af8":"# load data","9859b252":"# functions","ebf9fc04":"# build model ","80026c78":"# get non N\/A columns","cc2d28fc":"# delete id column","af65ada6":"# install mljar-supervised"}}