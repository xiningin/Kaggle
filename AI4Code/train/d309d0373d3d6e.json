{"cell_type":{"2359e64d":"code","5a326196":"code","df5883b0":"code","ce3bc48c":"code","108e4b3c":"code","4e7d6e0a":"code","fa4daf3d":"code","3ac1f255":"code","6d01dfd7":"code","0d6b5bb2":"code","db00c99c":"code","f5317f89":"code","c58fc1f7":"code","aecc7c41":"code","b7371145":"code","7d28da2c":"code","44e7350e":"code","21e77d56":"code","d190b440":"code","bbc6339f":"code","0e5fae58":"code","1ee009c4":"code","7ed0cd4d":"code","d46059b4":"code","8e3296a6":"code","a892be2c":"code","6f9e6be4":"code","d564662f":"code","d94605e9":"code","afa863ff":"code","6c1a6f17":"code","77b4c2f8":"code","dc9027ea":"code","6477c304":"code","8c91c052":"code","79cf4631":"code","211fd190":"code","dc924f61":"code","e4e00418":"code","cc9a1a8f":"code","10745041":"code","b44dc1ce":"code","18694093":"code","4cafc87b":"code","8cbd4002":"code","e3412259":"code","0914bcf2":"code","7ba1967e":"code","134da874":"code","7325c4c2":"code","bd41028c":"markdown","958ba728":"markdown","c8a088ae":"markdown","1b30142d":"markdown","1978067f":"markdown","f9ceeaeb":"markdown","339a1192":"markdown","0b103c46":"markdown","638ad332":"markdown","de121a13":"markdown","5f01a66c":"markdown","eaef0d49":"markdown","2135ea04":"markdown","bb60627d":"markdown","7fb109ce":"markdown","08a669a5":"markdown","ab08bd00":"markdown","e5b3192d":"markdown","9ee6989c":"markdown","fa2b6f72":"markdown","8564811a":"markdown","4c9d80a9":"markdown","8ac89ee7":"markdown","56866951":"markdown","a8f7d459":"markdown","9fb13d74":"markdown","5ed82a9c":"markdown","a54169e6":"markdown","b69fa7cf":"markdown","e05f5bbe":"markdown","457255f0":"markdown","0116cfe4":"markdown","4ce37cad":"markdown","13b45208":"markdown","fdfdad5c":"markdown","9e4ba940":"markdown","2094f9a0":"markdown","a56b1759":"markdown"},"source":{"2359e64d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5a326196":"player_data= pd.read_csv(\"..\/input\/fifa19\/data.csv\")","df5883b0":"player_data.head()","ce3bc48c":"def value_to_int(df_value):\n    try:\n        value = float(df_value[1:-1])\n        suffix = df_value[-1:]\n\n        if suffix == 'M':\n            value = value * 1000000\n        elif suffix == 'K':\n            value = value * 1000\n    except ValueError:\n        value = 0\n    return value\n\nplayer_data['Value'] = player_data['Value'].apply(value_to_int)\nplayer_data['Wage'] = player_data['Wage'].apply(value_to_int)","108e4b3c":"player_data= player_data.drop(player_data.columns[[0, 1, 4, 6, 10]], axis=1)","4e7d6e0a":"player_data.head()","fa4daf3d":"player_data.describe()","3ac1f255":"Overall = go.Scatter(\n    x=player_data.Name,\n    y=player_data['Overall'].where(player_data['Overall'] > 85)\n)\nPotential = go.Scatter(\n    x=player_data.Name,\n    y=player_data['Potential'].where(player_data['Potential'] > 85)\n   \n)\nValue = go.Scatter(\n    x=player_data.Name,\n    y=player_data.Value\n   \n)\nWages = go.Scatter(\n    x=player_data.Name,\n    y=player_data.Wage\n   \n)\nfig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Overall', 'Potential',\n                                                          'Value', 'Wage'))\n\nfig.append_trace(Overall, 1, 1)\nfig.append_trace(Potential, 1, 2)\nfig.append_trace(Value, 2, 1)\nfig.append_trace(Wages, 2, 2)\n\nfig['layout'].update(height=600, width=600, title='Players compared' +\n                                                  ' on different parameters')\n\npy.iplot(fig, filename='make-subplots-multiple-with-titles')","6d01dfd7":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","0d6b5bb2":"plotPerColumnDistribution(player_data, 84, 5)","db00c99c":"Agility = go.Scatter(\n    x=player_data['Name'],\n    y=player_data['Agility'].where(player_data['Agility'] > 85)\n)\nBalance = go.Scatter(\n    x=player_data.Name,\n    y=player_data['Balance'].where(player_data['Balance'] > 85)\n   \n)\nDribbling = go.Scatter(\n    x=player_data.Name,\n    y=player_data['Dribbling'].where(player_data['Dribbling'] > 85)\n   \n)\nSprint = go.Scatter(\n    x=player_data.Name,\n    y=player_data['SprintSpeed'].where(player_data['SprintSpeed'] > 85)\n   \n)\nfig = tools.make_subplots(rows=2, cols=2, subplot_titles=('Agility', 'Balance',\n                                                          'Dribbling', 'Sprint'))\n\nfig.append_trace(Agility, 1, 1)\nfig.append_trace(Balance, 1, 2)\nfig.append_trace(Dribbling, 2, 1)\nfig.append_trace(Sprint, 2, 2)\n\nfig['layout'].update(height=600, width=600, title='Players compared' +\n                                                  ' on different parameters whose ratings >85')\n\npy.iplot(fig, filename='make-subplots-multiple-with-titles')","f5317f89":"some_clubs = ('Juventus', 'Real Madrid', 'Paris Saint-Germain', 'FC Barcelona', 'FC Bayern M\u00fcnchen', 'Manchester City', 'Chelsea')\noverall_club = player_data.loc[player_data['Club'].isin(some_clubs) & player_data['Overall']] ","c58fc1f7":"import random\ndef random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color","aecc7c41":"data = [go.Bar(\n    x = overall_club.Club,\n    y = overall_club.Overall,\n    marker = dict(color = random_colors(25))\n)]\nlayout = dict(\n         title= \"Overall Ratings Distribution by Clubs \"\n)\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False )","b7371145":"position_count = player_data['Position'].value_counts()\ntrace = go.Pie(labels=position_count.index, values=position_count.values, hole=0.6,textinfo= \"none\")\nlayout = go.Layout(\n    title='Percentage of players by position'\n)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig, filename=\"plotting-library\")","7d28da2c":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\nfrom math import pi","44e7350e":"idx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in player_data.groupby(player_data['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(10, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1 ","21e77d56":"trace1 = go.Scatter3d(\n    x=player_data['Dribbling'].where(player_data['Dribbling'] > 85),\n    y=player_data['SprintSpeed'].where(player_data['SprintSpeed'] > 85),\n    z=player_data['Finishing'].where(player_data['Finishing'] > 85),\n    text = player_data.Name,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=random_colors(50),                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)\n\ndata = [trace1]\nlayout=go.Layout(width=800, height=800, title = 'Top players through which you can dribble past whole defense ',\n              scene = dict(xaxis=dict(title='Dribbling',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='SprintSpeed',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Finishing',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-scatter-colorscale')","d190b440":"trace1 = go.Scatter3d(\n    x=player_data['Value'].where(player_data['Value'] > 85),\n    y=player_data['Composure'].where(player_data['Composure'] > 85),\n    z=player_data['Finishing'].where(player_data['Finishing'] > 85),\n    text = player_data.Name,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=random_colors(50),                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)\n\ndata = [trace1]\nlayout=go.Layout(width=800, height=800, title = 'Top players market value due to their finishing ',\n              scene = dict(xaxis=dict(title='Value',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='Composure',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Finishing',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-scatter-colorscale')","bbc6339f":"trace1 = go.Scatter3d(\n    x=player_data['Wage'].where(player_data['Wage'] > 85),\n    y=player_data['Potential'].where(player_data['Potential'] > 85),\n    z=player_data['Overall'].where(player_data['Overall'] > 85),\n    text = player_data.Name,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=random_colors(50),                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)\n\ndata = [trace1]\nlayout=go.Layout(width=800, height=800, title = 'Top players with high market values  ',\n              scene = dict(xaxis=dict(title='Value',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='Potential',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Overall',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-scatter-colorscale')","0e5fae58":"trace1 = go.Scatter3d(\n    x=player_data['Value'].where(player_data['Value'] > 85),\n    y=player_data['GKDiving'].where(player_data['GKDiving'] > 85),\n    z=player_data['GKReflexes'].where(player_data['GKReflexes'] > 85),\n    text = player_data.Name,\n    mode='markers',\n    marker=dict(\n        size=12,\n        color=random_colors(50),                # set color to an array\/list of desired values\n        colorscale='Viridis',   # choose a colorscale\n        opacity=0.8\n    )\n)\n\ndata = [trace1]\nlayout=go.Layout(width=800, height=800, title = 'Top Goalkeepers who can save goals ',\n              scene = dict(xaxis=dict(title='Value',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='GKDiving',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='GKReflexes',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='3d-scatter-colorscale')","1ee009c4":"trace1 = go.Scatter3d(\n    x = player_data['HeadingAccuracy'].where(player_data['HeadingAccuracy'] > 85),\n    y = player_data['Jumping'].where(player_data['Jumping'] > 85),\n    z = player_data['Finishing'].where(player_data['Finishing'] > 85),\n    text = player_data.Name,\n    mode = 'markers',\n    marker = dict(\n        color = random_colors(50),\n        )\n)\ndata=[trace1]\n\nlayout=go.Layout(width=800, height=800, title = 'Players through which you can score header goals ',\n              scene = dict(xaxis=dict(title='Headingaccuracy',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='Jumping',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Finishing',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='solar_system_planet_size')","7ed0cd4d":"trace1 = go.Scatter3d(\n    x = player_data['StandingTackle'].where(player_data['StandingTackle'] > 85),\n    y = player_data['SlidingTackle'].where(player_data['SlidingTackle'] > 85),\n    z = player_data['Strength'].where(player_data['Strength'] > 85),\n    text = player_data.Name,\n    mode = 'markers',\n    marker = dict(\n        color = random_colors(50),\n        )\n)\ndata=[trace1]\n\nlayout=go.Layout(width=800, height=800, title = 'Players through which you can make fine tackle ',\n              scene = dict(xaxis=dict(title='StandingTackle',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='SlidingTackle',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Strength',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='solar_system_planet_size')","d46059b4":"trace1 = go.Scatter3d(\n    x = player_data['StandingTackle'].where(player_data['StandingTackle'] > 85),\n    y = player_data['SlidingTackle'].where(player_data['SlidingTackle'] > 85),\n    z = player_data['Marking'].where(player_data['Marking'] > 85),\n    text = player_data.Name,\n    mode = 'markers',\n    marker = dict(\n        color = random_colors(50),\n        )\n)\ndata=[trace1]\n\nlayout=go.Layout(width=800, height=800, title = 'Players through which you can make fine tackle ',\n              scene = dict(xaxis=dict(title='StandingTackle',\n                                      titlefont=dict(color='Orange')),\n                            yaxis=dict(title='SlidingTackle',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            zaxis=dict(title='Marking',\n                                       titlefont=dict(color='rgb(220, 220, 220)')),\n                            bgcolor = 'rgb(20, 24, 54)'\n                           )\n             )\n\nfig=go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='solar_system_planet_size')","8e3296a6":"country_count = player_data.Nationality.value_counts().reset_index()\ncountry_count.columns = ['country', 'players']","a892be2c":"locations = go.Bar(x=country_count.values[0:10],y=country_count.index[0:10], marker=dict(color='#CF1020'))","6f9e6be4":"# I use dataset from plotly to get country codes, which are required to plot the data.\ncountry_code = pd.read_csv('..\/input\/plotly-country-code-mapping\/2014_world_gdp_with_codes.csv')\ncountry_code.columns = [i.lower() for i in country_code.columns]\ncountry_count.loc[country_count['country'] == 'United States of America', 'country'] = 'United States'\ncountry_count.loc[country_count['country'] == 'United Kingdom of Great Britain and Northern Ireland', 'country'] = 'United Kingdom'\ncountry_count.loc[country_count['country'] == 'South Korea', 'country'] = '\"Korea, South\"'\ncountry_count.loc[country_count['country'] == 'Viet Nam', 'country'] = 'Vietnam'\ncountry_count.loc[country_count['country'] == 'Iran, Islamic Republic of...', 'country'] = 'Iran'\ncountry_count.loc[country_count['country'] == 'Hong Kong (S.A.R.)', 'country'] = 'Hong Kong'\ncountry_count.loc[country_count['country'] == 'Republic of Korea', 'country'] = '\"Korea, North\"'\ncountry_count = pd.merge(country_count, country_code, on='country')","d564662f":"data = [ dict(\n        type = 'choropleth',\n        locations = country_count['code'],\n        z = country_count['players'],\n        text = country_count['country'],\n        colorscale = 'Viridis',\n        autocolorscale = True,\n        reversescale = True,\n        marker = dict(\n            line = dict (\n                color = 'rgb(120,120,120)',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            title = 'Players'),\n      ) ]\n\nlayout = dict(\n    title = 'Players by country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = False,\n        projection = dict(\n             type = 'Mercator'\n        )\n    )\n)\n\nfig = dict( data=data, layout=layout )\niplot( fig, validate=False, filename='d3-world-map' )","d94605e9":"# Top 5 Vision players\nprint('Top 5 players with vision: \\n',\n      player_data[player_data['Vision'] > 90][['Name','Vision']].head())","afa863ff":"# Top 5 Vision players\nprint('Top 5 players with shortpassing ability:\\n', player_data[player_data['ShortPassing'] > 90][['Name','ShortPassing']].head())","6c1a6f17":"print('Top 5 players with Dribbling ability:\\n', player_data[player_data['Dribbling'] > 90][['Name','Dribbling']].head())","77b4c2f8":"print('Top 5 players with Free kick accuracy:\\n',player_data[player_data['FKAccuracy'] > 90][['Name','FKAccuracy']].head())","dc9027ea":"position_player = player_data.iloc[player_data.groupby(player_data['Position'])['Overall'].idxmax()][['Name', 'Position']]","6477c304":"value_player = player_data.iloc[player_data.groupby(player_data['Value'])['Potential'].idxmax()][['Name', 'Position','Potential','Value']]","8c91c052":"position_player","79cf4631":"value_player","211fd190":"cheap_players= value_player[value_player['Name'].notnull() & (value_player['Value'] < 30000000.0)]","dc924f61":"cheap_players= cheap_players.sort_values(['Potential'], ascending=[False])","e4e00418":"pd.set_option('display.max_rows', None)","cc9a1a8f":"cheap_players","10745041":"cheap_players1= value_player[value_player['Name'].notnull() & (value_player['Value'] < 50000000.0)]","b44dc1ce":"cheap_players1= cheap_players1.sort_values(['Potential'], ascending=[False])","18694093":"cheap_players1","4cafc87b":"def load_layout():\n    \"\"\"\n    Returns a dict for a Football themed Plot.ly layout \n    \"\"\"\n    layout = dict(\n        title = \"Players Position\",\n        plot_bgcolor='darkseagreen',\n        showlegend=True,\n        xaxis=dict(\n            autorange=False,\n            range=[0, 120],\n            showgrid=False,\n            zeroline=False,\n            showline=True,\n            linecolor='black',\n            linewidth=1,\n            mirror=True,\n            ticks='',\n            tickmode='array',\n            tickvals=[10,110],\n            ticktext=['Goal', 'Goal'],\n            showticklabels=True\n        ),\n        yaxis=dict(\n            title='',\n            autorange=False,\n            range=[-3.3,56.3],\n            showgrid=False,\n            zeroline=False,\n            showline=True,\n            linecolor='black',\n            linewidth=1,\n            mirror=True,\n            ticks='',\n            showticklabels=False\n        ),\n        shapes=[\n            dict(\n                type='line',\n                layer='below',\n                x0=0,\n                y0=0,\n                x1=120,\n                y1=0,\n                line=dict(\n                    color='white',\n                    width=2\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=0,\n                y0=53.3,\n                x1=120,\n                y1=53.3,\n                line=dict(\n                    color='white',\n                    width=2\n                )\n            ),\n             dict(\n                type='line',\n                layer='below',\n                x0=50,\n                y0=0,\n                x1=50,\n                y1=53.3,\n                line=dict(\n                    color='white'\n                )\n            ),\n            dict(\n                type='line',\n                layer='below',\n                x0=10,\n                y0=0,\n                x1=10,\n                y1=53.3,\n                line=dict(\n                    color='white',\n                    width=10\n                )\n            ),\n           \n            dict(\n                type='line',\n                layer='below',\n                x0=110,\n                y0=0,\n                x1=110,\n                y1=53.3,\n                line=dict(\n                    color='white',\n                    width=10\n                )\n            )\n        ]\n    )\n    return layout\n\nlayout = load_layout()","8cbd4002":"CB= position_player['Name'].where(position_player['Position'] == 'CB')\nGK= position_player['Name'].where(position_player['Position'] == 'GK')\nRB= position_player['Name'].where(position_player['Position'] == 'RB')\nRCB= position_player['Name'].where(position_player['Position'] == 'RCB')\nLCB= position_player['Name'].where(position_player['Position'] == 'LCB')\nLB= position_player['Name'].where(position_player['Position'] == 'LB')\nCDM= position_player['Name'].where(position_player['Position'] == 'CDM')\nLDM= position_player['Name'].where(position_player['Position'] == 'LDM')\nRDM= position_player['Name'].where(position_player['Position'] == 'RDM')\nLF= position_player['Name'].where(position_player['Position'] == 'LF')\nLWB= position_player['Name'].where(position_player['Position'] == 'LWB')\nRWB= position_player['Name'].where(position_player['Position'] == 'RWB')\nLCM= position_player['Name'].where(position_player['Position'] == 'LCM')\nRCM= position_player['Name'].where(position_player['Position'] == 'RCM')\nLAM= position_player['Name'].where(position_player['Position'] == 'LAM')\nCAM= position_player['Name'].where(position_player['Position'] == 'CAM')\nRF= position_player['Name'].where(position_player['Position'] == 'RF')\nRS= position_player['Name'].where(position_player['Position'] == 'RS')\nRM= position_player['Name'].where(position_player['Position'] == 'RM')\nRAM= position_player['Name'].where(position_player['Position'] == 'RAM')\nRW= position_player['Name'].where(position_player['Position'] == 'RW')\nLS= position_player['Name'].where(position_player['Position'] == 'LS')\nLW= position_player['Name'].where(position_player['Position'] == 'LW')\nST= position_player['Name'].where(position_player['Position'] == 'ST')","e3412259":"CB= CB.dropna()\nGK= GK.dropna()\nRB = RB.dropna()\nRCB = RCB.dropna()\nLCB = LCB.dropna()\nLB = LB.dropna()\nCDM = CDM.dropna()\nLDM = LDM.dropna()\nRDM = RDM.dropna()\nLF = LF.dropna()\nLWB = LWB.dropna()\nRWB = RWB.dropna()\nLCM = LCM.dropna()\nRCM = RCM.dropna()\nLAM = LAM.dropna()\nCAM= CAM.dropna()\nRF= RF.dropna()\nRS= RS.dropna()\nRM= RM.dropna()\nLS= LS.dropna()\nRAM= RAM.dropna()\nRW= RW.dropna()\nLW= LW.dropna()\nST= ST.dropna()","0914bcf2":"trace1 = {\"x\": [12], \n          \"y\": [25], \n          \"marker\": {\"color\": \"pink\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": GK[0:1],\n          \"name\": \"GK\",\n          \"type\": \"scatter\"\n}\ntrace2 = {\"x\": [30], \n          \"y\": [20], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LCB[0:1],\n          \"name\": \"LCB\",\n          \"type\": \"scatter\"\n}\ntrace3 = {\"x\": [30], \n          \"y\": [40], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RCB[0:1],\n          \"name\": \"RCB\",\n          \"type\": \"scatter\"\n}\ntrace4 = {\"x\": [40], \n          \"y\": [2], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RB[0:1],\n          \"name\": \"RB\",\n          \"type\": \"scatter\"\n}\ntrace5 = {\"x\": [40], \n          \"y\": [48], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LB[0:1],\n          \"name\": \"RB\",\n          \"type\": \"scatter\"\n}\ntrace6 = {\"x\": [50], \n          \"y\": [25], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CDM[0:1],\n          \"name\": \"CDM\",\n          \"type\": \"scatter\"\n}\ntrace7 = {\"x\": [60], \n          \"y\": [5], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RCM[0:1],\n          \"name\": \"RCM\",\n          \"type\": \"scatter\"\n}\ntrace8 = {\"x\": [60], \n          \"y\": [45], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LCM[0:1],\n          \"name\": \"LCM\",\n          \"type\": \"scatter\"\n}\ntrace9 = {\"x\": [80], \n          \"y\": [2], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RF[0:1],\n          \"name\": \"RF\",\n          \"type\": \"scatter\"\n}\ntrace10 = {\"x\": [80], \n          \"y\": [48], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LW[0:1],\n           \"name\": \"LW\",\n          \"type\": \"scatter\"\n}\ntrace11 = {\"x\": [90], \n          \"y\": [25], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": ST[0:1],\n           \"name\": \"ST\",\n          \"type\": \"scatter\"\n}\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10, trace11]\n\nfig=go.Figure(data= data,layout=layout)\npy.iplot(fig)","7ba1967e":"trace1 = {\"x\": [12], \n          \"y\": [25], \n          \"marker\": {\"color\": \"pink\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": GK[0:1],\n          \"name\": \"GK\",\n          \"type\": \"scatter\"\n}\ntrace2 = {\"x\": [30], \n          \"y\": [20], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LCB[0:1],\n          \"name\": \"LCB\",\n          \"type\": \"scatter\"\n}\ntrace3 = {\"x\": [30], \n          \"y\": [40], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RCB[0:1],\n          \"name\": \"RCB\",\n          \"type\": \"scatter\"\n}\ntrace4 = {\"x\": [30], \n          \"y\": [25], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CB[0:1],\n          \"name\": \"CB\",\n          \"type\": \"scatter\"\n}\ntrace5 = {\"x\": [50], \n          \"y\": [50], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LWB[0:1],\n          \"name\": \"LWB\",\n          \"type\": \"scatter\"\n}\ntrace6 = {\"x\": [60], \n          \"y\": [25], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CDM[0:1],\n          \"name\": \"CDM\",\n          \"type\": \"scatter\"\n}\ntrace7 = {\"x\": [50], \n          \"y\": [2], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RWB[0:1],\n          \"name\": \"RWB\",\n          \"type\": \"scatter\"\n}\ntrace8 = {\"x\": [70], \n          \"y\": [25], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CAM[0:1],\n          \"name\": \"CAM\",\n          \"type\": \"scatter\"\n}\ntrace9 = {\"x\": [80], \n          \"y\": [2], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RF[0:1],\n          \"name\": \"RF\",\n          \"type\": \"scatter\"\n}\ntrace10 = {\"x\": [80], \n          \"y\": [49], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LW[0:1],\n           \"name\": \"LW\",\n          \"type\": \"scatter\"\n}\ntrace11 = {\"x\": [90], \n          \"y\": [25], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": ST[0:1],\n           \"name\": \"ST\",\n          \"type\": \"scatter\"\n}\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10, trace11]\n\nfig=go.Figure(data= data,layout=layout)\npy.iplot(fig)","134da874":"trace1 = {\"x\": [12], \n          \"y\": [25], \n          \"marker\": {\"color\": \"pink\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": GK[0:1],\n          \"name\": \"GK\",\n          \"type\": \"scatter\"\n}\ntrace2 = {\"x\": [30], \n          \"y\": [20], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LCB[0:1],\n          \"name\": \"LCB\",\n          \"type\": \"scatter\"\n}\ntrace3 = {\"x\": [30], \n          \"y\": [40], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RCB[0:1],\n          \"name\": \"RCB\",\n          \"type\": \"scatter\"\n}\ntrace4 = {\"x\": [30], \n          \"y\": [25], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CB[0:1],\n          \"name\": \"CB\",\n          \"type\": \"scatter\"\n}\ntrace5 = {\"x\": [50], \n          \"y\": [50], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LWB[0:1],\n          \"name\": \"LWB\",\n          \"type\": \"scatter\"\n}\ntrace6 = {\"x\": [60], \n          \"y\": [30], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RDM[0:1],\n          \"name\": \"RDM\",\n          \"type\": \"scatter\"\n}\ntrace7 = {\"x\": [50], \n          \"y\": [2], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RWB[0:1],\n          \"name\": \"RWB\",\n          \"type\": \"scatter\"\n}\ntrace8 = {\"x\": [70], \n          \"y\": [25], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CAM[0:1],\n          \"name\": \"CAM\",\n          \"type\": \"scatter\"\n}\ntrace9 = {\"x\": [90], \n          \"y\": [20], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RS[0:1],\n          \"name\": \"RS\",\n          \"type\": \"scatter\"\n}\ntrace10 = {\"x\": [90], \n          \"y\": [30], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LS[0:1],\n           \"name\": \"LS\",\n          \"type\": \"scatter\"\n}\ntrace11 = {\"x\": [60], \n          \"y\": [20], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LDM[0:1],\n           \"name\": \"LDM\",\n          \"type\": \"scatter\"\n}\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10, trace11]\n\nfig=go.Figure(data= data,layout=layout)\npy.iplot(fig)","7325c4c2":"trace1 = {\"x\": [12], \n          \"y\": [25], \n          \"marker\": {\"color\": \"pink\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": GK[0:1],\n          \"name\": \"GK\",\n          \"type\": \"scatter\"\n}\ntrace2 = {\"x\": [30], \n          \"y\": [20], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LCB[0:1],\n          \"name\": \"LCB\",\n          \"type\": \"scatter\"\n}\ntrace3 = {\"x\": [30], \n          \"y\": [40], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RCB[0:1],\n          \"name\": \"RCB\",\n          \"type\": \"scatter\"\n}\ntrace4 = {\"x\": [30], \n          \"y\": [25], \n          \"marker\": {\"color\": \"red\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CB[0:1],\n          \"name\": \"CB\",\n          \"type\": \"scatter\"\n}\ntrace5 = {\"x\": [50], \n          \"y\": [50], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LAM[0:1],\n          \"name\": \"LAM\",\n          \"type\": \"scatter\"\n}\ntrace6 = {\"x\": [60], \n          \"y\": [30], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RDM[0:1],\n          \"name\": \"RDM\",\n          \"type\": \"scatter\"\n}\ntrace7 = {\"x\": [50], \n          \"y\": [2], \n          \"marker\": {\"color\": \"blue\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RAM[0:1],\n          \"name\": \"RAM\",\n          \"type\": \"scatter\"\n}\ntrace8 = {\"x\": [70], \n          \"y\": [25], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": CAM[0:1],\n          \"name\": \"CAM\",\n          \"type\": \"scatter\"\n}\ntrace9 = {\"x\": [90], \n          \"y\": [20], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": RS[0:1],\n          \"name\": \"RS\",\n          \"type\": \"scatter\"\n}\ntrace10 = {\"x\": [90], \n          \"y\": [30], \n          \"marker\": {\"color\": \"green\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LS[0:1],\n           \"name\": \"LS\",\n          \"type\": \"scatter\"\n}\ntrace11 = {\"x\": [60], \n          \"y\": [20], \n          \"marker\": {\"color\": \"yellow\", \"size\": 12}, \n          \"mode\": \"markers\", \n          \"text\": LDM[0:1],\n           \"name\": \"LDM\",\n          \"type\": \"scatter\"\n}\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8, trace9, trace10, trace11]\n\nfig=go.Figure(data= data,layout=layout)\npy.iplot(fig)","bd41028c":"# Top players who can score goals from corner or crosses","958ba728":"# Top players who's market value is high due to their finishing ability","c8a088ae":"# Important columns descriptions\n\n(Taken from https:\/\/www.kaggle.com\/mrisdal\/starter-fifa-19-complete-player-54855b15-c)","1b30142d":"# Top goalkeepers based on their traits","1978067f":"![](https:\/\/the18.com\/sites\/default\/files\/styles\/feature_image_with_focal\/public\/feature-images\/GettyImages-634168108.jpg?itok=n0PCOHG4)","f9ceeaeb":"![](https:\/\/www.dw.com\/image\/45423223_303.jpg)","339a1192":"# Total number of players from each country","0b103c46":"![](https:\/\/i.ytimg.com\/vi\/irzVbJlcXJg\/maxresdefault.jpg)","638ad332":"# Top players who don't leave space and defend tightly","de121a13":"# Top players who earn according to their potential and ability","5f01a66c":"# Description of all numerical columns in statistical terms.","eaef0d49":"# 3-4-3 (Inverted fullback formation)","2135ea04":"![](http:\/\/www.bettingrunner.com\/blog\/wp-content\/uploads\/2017\/06\/messi2.png)","bb60627d":"# Top players with 85+ ratings in Overall, potential with their earnings","7fb109ce":"# **4-3-3 Cruyff Formation**","08a669a5":"# Top players which you can buy under 30M","ab08bd00":"# 3-5-2 Formation (Uruguay National Team formation)","e5b3192d":"# Top formations according to player's best position","9ee6989c":"\n**FIFA 19\nCover art featuring Cristiano Ronaldo\nDeveloper(s)\tEA Vancouver\nEA Romania \nPublisher(s)\tEA Sports\nComposer(s)\tHans Zimmer\nLorne Balfe\nSeries\tFIFA\nEngine\tFrostbite 3 (PS4, XOne, Windows)\nPlatform(s)\t\nMicrosoft Windows\nPlayStation 3\nPlayStation 4\nXbox 360\nXbox One\nNintendo Switch\nRelease\t28 September 2018\nGenre(s)\tSports\nMode(s)\tSingle-player, multiplayer\nFIFA 19 is a football simulation video game developed by EA Vancouver as part of Electronic Arts' FIFA series. Announced on 6 June 2018 for its E3 2018 press conference, it was released on 28 September 2018 for PlayStation 3, PlayStation 4, Xbox 360, Xbox One, Nintendo Switch, and Microsoft Windows. It is the 26th installment in the FIFA series. As with FIFA 18, Cristiano Ronaldo appears as the cover athlete of the regular edition.**\n\n**The game features the UEFA club competitions for the first time, including the UEFA Champions League. Martin Tyler and Alan Smith return as regular commentators, while the new commentary team of Derek Rae and Lee Dixon feature in the UEFA competitions mode. Composer Hans Zimmer and rapper Vince Staples recorded a new remix of the UEFA Champions League anthem specifically for the game. The character Alex Hunter, who first appeared in FIFA 17 returns for the third and final installment of \"The Journey\", entitled, \"The Journey: Champions\".**","fa2b6f72":"![](https:\/\/media.playstation.com\/is\/image\/SCEA\/fifa-19-champions-edition-box-01-ps4-us-02oct18?$native_nt$)","8564811a":"![](http:\/\/d2x51gyc4ptf2q.cloudfront.net\/content\/uploads\/2016\/09\/DEBruyne-Whoscored.jpg)","4c9d80a9":"![](https:\/\/i.dailymail.co.uk\/i\/pix\/2015\/11\/24\/20\/2EC7879D00000578-0-image-a-17_1448397858137.jpg)","8ac89ee7":"**Of course Leo Messi tops this chart with 94 overall and potential while earning  565K Euros**","56866951":"# Upvote If you liked more to follow up soon","a8f7d459":"![](https:\/\/cdn.images.express.co.uk\/img\/dynamic\/67\/590x\/Man-City-Champions-League-draw-890798.jpg)","9fb13d74":"# Top players which you can buy under 50M","5ed82a9c":"![](http:\/\/www2.pictures.zimbio.com\/gi\/Sergio+Ramos+Spain+v+Italy+UEFA+EURO+2012+DNr7lf5uNZ7l.jpg)","a54169e6":"# Top players due to different abilities and earnings.","b69fa7cf":"![](https:\/\/ichef.bbci.co.uk\/news\/660\/cpsprodpb\/86A0\/production\/_96846443_0355d5c5-c9d7-4dd7-a17f-174d42b418db.jpg)","e05f5bbe":"# Top players who can defend a player or two moving towards goal  ","457255f0":"# Players main features according to their position\n\n(Source: https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis)","0116cfe4":"![](https:\/\/i.ytimg.com\/vi\/LEqMiQcxXAM\/maxresdefault.jpg)","4ce37cad":"![](https:\/\/givemesport.azureedge.net\/images\/18\/10\/24\/3cb1d8cf3e2204346a6fc4eab4ce8102\/960.jpg)","13b45208":"![](https:\/\/t.resfu.com\/media\/img_news\/imagen-de-la-parada-de-de-gea-ante-el-manchester-city--twitter.jpg)","fdfdad5c":"![](https:\/\/images.performgroup.com\/di\/library\/GOAL_INTERNATIONAL\/ca\/c9\/lionel-messi-barcelona-priceless_pxl1zxyenorn1eq99f1emz5iw.jpg?t=-522399025)","9e4ba940":"# 3-5-2 (Attacking formation)","2094f9a0":"![](https:\/\/i.ytimg.com\/vi\/LFMRDX9irSI\/maxresdefault.jpg)","a56b1759":"# Players position percentage"}}