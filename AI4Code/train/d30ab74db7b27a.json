{"cell_type":{"539908f8":"code","c4197cdc":"code","7ac4f175":"code","13752fe7":"code","0624a86b":"code","523299a4":"code","b33ba393":"code","79dd39a4":"code","5963285a":"code","4f23cc79":"code","397a3993":"code","d914c204":"code","c7563d0c":"code","bbe40938":"code","f7c5a9b7":"code","aff8aa62":"code","1435096e":"code","2f8bbb2b":"code","889f3ebf":"code","9e525ba1":"code","aa8b8bad":"code","17e83b45":"code","c5c7184a":"code","3eb79183":"code","18712b7f":"code","38d57d28":"code","65bbe21b":"markdown","00d967c0":"markdown","7bda6bcc":"markdown","5092d456":"markdown","2af2a7e2":"markdown","d556c359":"markdown","bdcc618a":"markdown","bf7d968b":"markdown","41f394e1":"markdown","5d9b5314":"markdown","701fc1c9":"markdown","bd7ee5ac":"markdown","0b27c8d4":"markdown","e60aaa45":"markdown","f4c22b57":"markdown","4218f7e0":"markdown","cedc22ad":"markdown","7d4eaa5e":"markdown","71a8553e":"markdown","49759bf7":"markdown","e8469d4a":"markdown","8bf476c7":"markdown","2c1cde25":"markdown","c1de4251":"markdown","f541e96b":"markdown","bdc4c869":"markdown","2f2032af":"markdown","310a4151":"markdown","b20de943":"markdown","2d9eb5ca":"markdown","9099a903":"markdown","efe3b7c1":"markdown","960988a1":"markdown","3a4c5c89":"markdown","2043e47f":"markdown","222d2239":"markdown","732bf138":"markdown","78fe7d37":"markdown","8634d241":"markdown","b56e7cba":"markdown","4a52cde3":"markdown","073ec50f":"markdown","f7fd8899":"markdown"},"source":{"539908f8":"import pandas as pd \r\nimport numpy as np \r\nimport plotly.graph_objects as go \r\nimport plotly.express as px ","c4197cdc":"\r\ndf = px.data.stocks()\r\ndf.head()","7ac4f175":"## Single plot \r\nfig = px.line(\r\n    df, \r\n    x = 'date',\r\n    y = 'GOOG'\r\n)\r\n\r\nfig.update_layout(\r\n    title = 'Stock Price', # adding the title \r\n    xaxis_title = 'Dates', # title for x axis \r\n    yaxis_title = 'Prices', # title for y axis \r\n    xaxis = dict(           # attribures for x axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Calibri'\r\n        )\r\n    ),\r\n    yaxis = dict(           # attribures for y axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Times New Roman'\r\n        )\r\n    ),\r\n    plot_bgcolor = 'white'  # background color for the graph\r\n)\r\n\r\nfig","13752fe7":"## Multiple plots \r\nfig = px.line(\r\n    df, \r\n    x = 'date',\r\n    y = [\r\n        'GOOG',\r\n        'AAPL'\r\n    ]\r\n)\r\n\r\nfig.update_layout(\r\n    title = 'Stock Price', # adding the title \r\n    xaxis_title = 'Dates', # title for x axis \r\n    yaxis_title = 'Prices', # title for y axis \r\n    xaxis = dict(           # attribures for x axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Calibri'\r\n        )\r\n    ),\r\n    yaxis = dict(           # attribures for y axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Times New Roman'\r\n        )\r\n    ),\r\n    plot_bgcolor = 'white'  # background color for the graph\r\n)\r\n\r\nfig","0624a86b":"## Complex plot\r\nfig = go.Figure()\r\n# graph 1\r\nfig.add_trace(\r\n    go.Scatter(\r\n        x = df['date'],\r\n        y = df['GOOG'],\r\n        mode = 'lines',  # line type  \r\n        name = 'Google',\r\n        line = {         # line attributes\r\n            'color': 'red'\r\n        }\r\n    )\r\n)\r\n\r\n# graph 2\r\nfig.add_trace(\r\n    go.Scatter(\r\n        x = df['date'],\r\n        y = df['AAPL'],\r\n        mode = 'lines', # line type \r\n        name = 'Apple',\r\n        line = {        # line attributes\r\n            'color': 'black'\r\n        }\r\n    )\r\n)\r\n\r\n# graph 3 \r\nfig.add_trace(\r\n    go.Scatter(\r\n        x = df['date'],\r\n        y = df['AMZN'],\r\n        mode = 'lines', # line type \r\n        name = 'Amazon',\r\n        line = {        # line attributes\r\n            'color': 'blue'\r\n        }\r\n    )\r\n)\r\n\r\n# changing the features of the plot \r\nfig.update_layout(\r\n    title = 'Stock Price', # adding the title \r\n    xaxis_title = 'Dates', # title for x axis \r\n    yaxis_title = 'Prices', # title for y axis \r\n    xaxis = dict(           # attribures for x axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Calibri'\r\n        )\r\n    ),\r\n    yaxis = dict(           # attribures for y axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Times New Roman'\r\n        )\r\n    ),\r\n    plot_bgcolor = 'white'  # background color for the graph\r\n)","523299a4":"df = px.data.gapminder()\r\ndf = df[df['country'] == 'United States'].drop(['country', 'continent', 'iso_alpha'], axis = 1)\r\ndf","b33ba393":"# simple bar graph\r\nfig = px.bar(           # replace line with bar in line chart code \r\n    df, \r\n    x = 'year',\r\n    y = 'pop',\r\n    color = 'year' # changes the color as per the changes in the column \r\n)\r\n\r\nfig.update_layout(\r\n    title = 'US population',\r\n    xaxis_title = 'Year',\r\n    yaxis_title = 'Population',\r\n    xaxis = dict(           # attribures for x axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Calibri'\r\n        )\r\n    ),\r\n    yaxis = dict(           # attribures for y axis \r\n        showline = True,\r\n        showgrid = True,\r\n        linecolor = 'black',\r\n        tickfont = dict(\r\n            family = 'Times New Roman'\r\n        )\r\n    ),\r\n    plot_bgcolor = 'white' \r\n)\r\nfig","79dd39a4":"## Stacked bar chart \r\n## one on the top of the other \r\ndf = px.data.tips()\r\n\r\nfig = px.bar(\r\n    df, \r\n    x = 'day',\r\n    y = 'tip',\r\n    color = 'sex'    # changes the color of the bars as per the changes in the specified columns \r\n)\r\n\r\nfig.update_layout(\r\n    title = 'Days v\/s Tips',\r\n    xaxis_title = 'Day',\r\n    yaxis_title = 'Tip',\r\n    xaxis = dict(\r\n        showline = True, \r\n        linecolor = 'black'\r\n    ),\r\n    yaxis = dict(\r\n        showline = True, \r\n        linecolor = 'black'\r\n    ),\r\n    plot_bgcolor = 'white'\r\n)\r\n\r\nfig","5963285a":"## bars next to each other \r\nfig = px.bar(\r\n    df, \r\n    x = 'day',\r\n    y = 'total_bill',\r\n    color = 'sex',\r\n    barmode = 'group',   # adds the property of bars being next to each other \r\n    title = 'Days v\/s Tips',\r\n    labels = {\r\n        'x': 'Days',\r\n        'y': 'Tips'\r\n    }\r\n)\r\n\r\nfig","4f23cc79":"## another type of bar chart \r\ndf = px.data.gapminder()\r\ndf = df[df['continent'] == 'Europe'].drop('continent', axis = 1)\r\ndf = df[df['year'] == 2007].drop('year', axis = 1)\r\n\r\n## assign the bar function to a variable to that we can update the layouts and all later using other functions \r\nfig = px.bar(    \r\n    df, \r\n    x = 'country',\r\n    y = 'pop',\r\n    text = 'pop',\r\n    title = 'Population in 2007',\r\n    color = 'country',\r\n    labels = {\r\n        'x': 'Countries',\r\n        'y': 'Populations'\r\n    }\r\n)\r\n\r\n## for beautifying the graph \r\nfig.update_traces(\r\n    texttemplate = '%{text:0.2s}', \r\n    textposition = 'outside'\r\n)\r\n\r\nfig.update_layout(\r\n    plot_bgcolor = 'white',\r\n    xaxis_tickangle = -60, ## rotating the ticks \r\n    yaxis = dict(\r\n        showgrid = False,\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black'\r\n    )\r\n)\r\n\r\nfig ","397a3993":"## the iris dataset \r\ndf = px.data.iris()\r\n\r\nfig = px.scatter(\r\n    df,\r\n    x = 'sepal_width',\r\n    y = 'sepal_length',\r\n    size = 'petal_length', # size of the dots will be proportional to petal_length\r\n    color = 'species',\r\n    hover_data = ['petal_length', 'petal_width'] # additional info when hovered over a dot \r\n)\r\nfig.update_layout(\r\n    xaxis = dict(\r\n    showline = True,\r\n    linecolor = 'black',\r\n    showgrid = False),\r\n    yaxis = dict(\r\n        showline = True,\r\n        showgrid = False,\r\n        linecolor = 'black'\r\n    ),\r\n    plot_bgcolor = 'white'\r\n)\r\nfig ","d914c204":"## adding some more styling to the scatter plots \r\nfig = go.Figure()\r\nfig.add_trace(\r\n    go.Scatter(\r\n        # specifying the values for x and y axis \r\n        x = df['sepal_width'], \r\n        y = df['sepal_length'],\r\n        \r\n        # specifying the markers attributes\r\n        mode = 'markers',\r\n        marker_color = df['petal_width'],\r\n        marker = dict(showscale = True),\r\n        \r\n        # adding the text attribute\r\n        text = df['species'],\r\n    )\r\n)\r\n\r\nfig.update_traces(\r\n    marker_line_width = 2,\r\n    marker_size = 10\r\n)\r\n\r\nfig.update_layout(\r\n    title = 'Sepal width vs Sepal length',\r\n    xaxis_title = 'sepal_width',\r\n    yaxis_title = 'sepal_length',\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black',\r\n        showgrid = False),\r\n    yaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black',\r\n        showgrid = False),\r\n    plot_bgcolor = 'white'\r\n)\r\n\r\nfig ","c7563d0c":"df = px.data.gapminder()\r\ndf = df[df['continent'] == 'Asia'].drop('continent', axis = 1)\r\n\r\ndf = df[df['year'] == 2007].drop('year', axis = 1)\r\n\r\ndf.head()","bbe40938":"# plotting the pie chart\r\nfig = px.pie(\r\n    df,\r\n    values = 'pop',\r\n    names = 'country',\r\n    title = 'Population of Asian Countries in 2007',\r\n    color_discrete_sequence = px.colors.sequential.Magma\r\n)\r\n\r\nfig","f7c5a9b7":"dice_1 = np.random.randint(1,7,5000)\r\ndice_2 = np.random.randint(1,7,5000)\r\n\r\ndice_sum = dice_1 + dice_2","aff8aa62":"fig = px.histogram(\r\n    dice_sum, \r\n    nbins = 11, # number of bins\r\n    labels = {\r\n        'value': 'Dice rolls', # x axis label in histogram is value \r\n        'count': 'Counts' # y axis label in histogram is count \r\n    },\r\n    title = 'five thousand dice',\r\n    marginal = 'violin', # for violin above the histogram\r\n    color_discrete_sequence = ['black'] # color of the graph \r\n)\r\n\r\nfig.update_layout(\r\n    xaxis = dict(\r\n        showgrid = False,\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    yaxis = dict(\r\n        showgrid = False,\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    plot_bgcolor = 'white',\r\n    bargap = 0.2, # gaps between bars  \r\n    showlegend = False # for not displaying the legend \r\n)\r\n\r\nfig","1435096e":"## Stacked histogram\r\ndf = px.data.tips()\r\ndf.head()","2f8bbb2b":"fig = px.histogram(\r\n    df,\r\n    x = 'tip',\r\n    color = 'sex',\r\n    title = 'Tips',\r\n    labels = {\r\n        'count': 'Count'\r\n    }\r\n)\r\n\r\nfig","889f3ebf":"df = px.data.tips()\r\ndf.head()","9e525ba1":"## basic box plot\r\nfig = px.box(\r\n    df, \r\n    x = 'sex',\r\n    y = 'tip',\r\n    title = 'Tips by Sex',\r\n    points = 'all', # will display dots next to the boxes \r\n    labels = {\r\n        'x': 'Sex',\r\n        'y': 'Tips'\r\n    }\r\n)\r\n\r\nfig.update_layout(\r\n    plot_bgcolor = 'white',\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    \r\n    yaxis = dict(\r\n        showline = True,\r\n        showgrid = False,\r\n        linecolor = 'black'\r\n    )\r\n    \r\n)\r\n\r\nfig ","aa8b8bad":"# another example \r\nfig = px.box(\r\n    df,\r\n    x = 'day',\r\n    y = 'tip',\r\n    title = 'tips per day',\r\n    color = 'sex',\r\n    labels = {\r\n        'day': 'Days',\r\n        'tip': 'Tips'\r\n    }\r\n)\r\nfig.update_layout(\r\n    plot_bgcolor = 'white',\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    \r\n    yaxis = dict(\r\n        showline = True,\r\n        showgrid = False,\r\n        linecolor = 'black'\r\n    )\r\n    \r\n)\r\nfig ","17e83b45":"## using Graph objects \r\nfig = go.Figure()\r\n\r\nfig.add_trace(go.Box(\r\n    x = df['sex'],\r\n    y = df['tip'],\r\n    marker_color = 'black',\r\n    boxmean = 'sd'\r\n))\r\n\r\nfig.update_layout(\r\n        plot_bgcolor = 'white',\r\n        xaxis = dict(\r\n            showline = True,\r\n            linecolor = 'black'\r\n        ),\r\n\r\n        yaxis = dict(\r\n            showline = True,\r\n            showgrid = False,\r\n            linecolor = 'black'\r\n        ))\r\nfig ","c5c7184a":"## simple violin plot \r\ndf = px.data.tips()\r\n\r\nfig = px.violin(\r\n    df,\r\n    y = 'total_bill',\r\n    box = True,\r\n    points = 'all'\r\n)\r\nfig.update_layout(\r\n    plot_bgcolor = 'white',\r\n    title = 'Total Bills',\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    yaxis = dict(\r\n        showline = True,\r\n        showgrid = False,\r\n        linecolor = 'Black'\r\n    )\r\n)\r\n\r\nfig","3eb79183":"# adding some more details \r\nfig = px.violin(\r\n    df, \r\n    x = 'smoker',\r\n    y = 'total_bill',\r\n    color = 'sex',\r\n#     points = 'all',\r\n    box = True,\r\n    title = 'Bills vs Smoking',\r\n    hover_data = df.columns\r\n)\r\n\r\nfig.update_layout(\r\n    plot_bgcolor = 'white',\r\n    title = 'Total Bills',\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    yaxis = dict(\r\n        showline = True,\r\n        showgrid = False,\r\n        linecolor = 'Black'\r\n    )\r\n)\r\n\r\nfig","18712b7f":"## complex violin plot with graph_objects \r\nfig = go.Figure()\r\n\r\nfig.add_trace(go.Violin(\r\n    x = df['day'][df['smoker'] == 'Yes'],\r\n    y = df['total_bill'][df['smoker'] == 'Yes'],\r\n    legendgroup = 'Yes',\r\n    scalegroup = 'Yes',\r\n    name = 'Yes',\r\n    side = 'negative',\r\n    line_color = 'black'\r\n))\r\n\r\nfig.add_trace(go.Violin(\r\n    x = df['day'][df['smoker'] == 'No'],\r\n    y = df['total_bill'][df['smoker'] == 'No'],\r\n    legendgroup = 'No',\r\n    scalegroup = 'No',\r\n    name = 'No',\r\n    side = 'positive',\r\n    line_color = 'yellow'\r\n))\r\n\r\nfig.update_layout(\r\n    plot_bgcolor = 'white',\r\n    title = 'Total Bills',\r\n    xaxis = dict(\r\n        showline = True,\r\n        linecolor = 'black'\r\n    ),\r\n    yaxis = dict(\r\n        showline = True,\r\n        showgrid = False,\r\n        linecolor = 'Black'\r\n    )\r\n)\r\n\r\nfig\r\n","38d57d28":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/mwaskom\/seaborn-data\/master\/flights.csv')\r\n\r\nfig = px.density_heatmap(\r\n    df, \r\n    x = 'year',\r\n    y = 'month',\r\n    z = 'passengers',\r\n    title = 'Heatmap',\r\n#     color_continuous_scale = px.colors.diverging.BrBG, # not to be used with marginal_x and marginal_y\r\n    marginal_x = 'histogram',\r\n    marginal_y = 'histogram'\r\n)\r\n\r\n\r\nfig","65bbe21b":"## References \r\n \r\n\r\n","00d967c0":"## Introduction \r\n","7bda6bcc":"---","5092d456":"### Density Heatmaps\r\nA heatmap (aka heat map) depicts values for a main variable of interest across two axis variables as a grid of colored squares. The axis variables are divided into ranges like a bar chart or histogram, and each cell\u2019s color indicates the value of the main variable in the corresponding cell range\r\n\r\nDataset used: `flights` from seaborn library","2af2a7e2":"### Multiple line graph","d556c359":"## Imports","bdcc618a":"Bar graphs are used to plot categorical v\/s numerical data. For horizontal bar graph, the categories are on the X-axis and numerical range is on the Y-axis. \r\n\r\nTo plot the bar graph, we will be using the `gapminder` dataset. In this dataset, each row represents a country on a given year. ","bf7d968b":"---","41f394e1":"A box and whisker plot\u2014also called a box plot\u2014displays the five-number summary of a set of data. The five-number summary is the minimum, first quartile, median, third quartile, and maximum.\r\n\r\nA box and whisker plot is a way of summarizing a set of data measured on an interval scale. It is often used in explanatory data analysis. This type of graph is used to show the shape of the distribution, its central value, and its variability.\r\n\r\nWe will be using the `tips` dataset to plot the Box plot","5d9b5314":"---","701fc1c9":"## Scatter Plot","bd7ee5ac":"---","0b27c8d4":"Following references were used in making this notebook.\r\n* https:\/\/youtu.be\/GGL6U0k8WYA\r\n* https:\/\/plotly.com\/python\/plotly-express\/","e60aaa45":"\r\nA violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.\r\n\r\nWe will be again using the `tips` dataset for violin plot","f4c22b57":"A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.\r\n\r\nWe will use the `gapminder` dataset again for pie chart","4218f7e0":"A scatter plot (aka scatter chart, scatter graph) uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables.\r\n\r\nWe will use the famous `iris` dataset to plot the scatter plot","cedc22ad":"### Basic box plot","7d4eaa5e":"# Plotly: an incredible Python library to plot interactive graphs","71a8553e":"### Pie Chart","49759bf7":"---","e8469d4a":"### Single line graph","8bf476c7":"---","2c1cde25":"---","c1de4251":"### Another example","f541e96b":"## Violin Plot \r\n","bdc4c869":"### Simple Violin plot","2f2032af":"### Stacked bar chart\r\n\r\nA stacked bar graph (or stacked bar chart)  is a chart that uses bars to show comparisons between categories of data, but with ability to break down and compare parts of a whole. Each bar in the chart represents a whole, and segments in the bar represent different parts or categories of that whole.\r\n\r\nStacked bars do a good job of featuring the total and also providing a hint as to how the total for each category value is divided into parts.","310a4151":"## THANK YOU SO MUCH!!  ","b20de943":"## Bar Chart","2d9eb5ca":"### Stacked Histogram","9099a903":"### Another example","efe3b7c1":"---","960988a1":"**That brings us to the end of this notebook**\r\n\r\nI think we learned a lot. We started with the basic definitions of the graphs. We also learned how to plot them using the Plotly python library. We also got to know which graphs to use as per the data available to us. \r\n\r\nStill there are many other types of plots we haven't yet covered. (plots like 3-D plots, animation plots, polar plots etc.)\r\n\r\nThose will be covered in next notebook. so stay tuned!!","3a4c5c89":"### Simple bar graph","2043e47f":"## Box Plot","222d2239":"### A Complex Line graph","732bf138":"## Line graphs","78fe7d37":"### Complex violin plot","8634d241":"Line graphs are used to plot the data which changes with time. If you want to plot your expenses on weekly, monthly or yearly basis, line graph is your best option\r\n\r\nWe will import the `stocks` dataset which comes with the plotly to demonstrate the line graphs","b56e7cba":"### Histogram\r\n\r\nA histogram is an approximate representation of the distribution of numerical data. Similar in appearance to a bar graph, the histogram condenses a data series into an easily interpreted visual by taking many data points and grouping them into logical ranges or bins.\r\n\r\nTo plot the histogram, we will create custom range of values and plot them. We will also use the `tips` dataset for a later example. \r\n","4a52cde3":"**Great Job!**\r\n\r\nWe have plotted our first plotly graph. Now, if we try to hover over the line, information such as date and company becomes visible. Also if we take a look at the top right corner of the graph, We will be able to see some options such as download graph as png, zoom-in, zoom-out, compare data on hover etc.","073ec50f":"**Why do we need graphs?**\r\n\r\nGraphs are visual representation of data. Just by looking at the graphs, we are able to understand the patterns in the data, which are very difficult to understand with tabular or textual representation. Graphs display information in a manner that is very easy for most people to understand. In data analytics, graphs are used to understand the relationship between variables\/columns to gain insights about the data. \r\nGraphs come in very different forms with equally different uses. The type of graphs is dependent on the type of data that is being conveyed. \r\n\r\nPlotly is a free open source library for plotting graphs. It is used to create data visualisation that can be displayed in jupyter notebooks. It provides with variety of graphing options, right from line chart to 3-D charts. It also works offline. \r\n\r\nTo install plotly, run the following command in your terminal or inside the code cell of your jupyter notebook\r\n\r\n`pip install plotly`\r\n\r\nWe will also need another python library, pandas, to read the example datasets into the jupyter notebooks. To install pandas, run the following command\r\n\r\n`pip install pandas`\r\n\r\n**Enough theory, let's jump into coding!!**","f7fd8899":"**if you click on the labels in the legend, parts of the pie chart corresponding to that label will be ommited**"}}