{"cell_type":{"5059498f":"code","097aed39":"code","53be3a96":"code","33b2aa47":"code","ac421779":"code","83cb574a":"code","2e3320f1":"code","8b7a882a":"code","57c96be7":"code","4be6d167":"code","d59a4fce":"code","b869e504":"code","1e0ade92":"code","61079b5a":"code","16f16baf":"code","d48e8575":"code","5cff8525":"code","112db237":"code","07f7ce89":"code","e73ec4ea":"code","8a21d581":"code","dbec234c":"code","d1403e6d":"code","bd0dd256":"code","c1c8ad83":"code","3e2d738b":"markdown","3b56b1ef":"markdown","f8d2a732":"markdown","a8c9e40f":"markdown","1afe0370":"markdown","10d05697":"markdown","44512055":"markdown","04f12eac":"markdown"},"source":{"5059498f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nimport tensorflow as tf","097aed39":"data = pd.read_csv('..\/input\/white-wine-quality\/winequality-white.csv', delimiter=';')","53be3a96":"data","33b2aa47":"corr = data.corr()\n\nplt.figure(figsize=(12, 10))\nsns.heatmap(corr, annot=True, vmin=-1.0, vmax=1.0)\nplt.show()","ac421779":"data.info()","83cb574a":"print(\"Total null values:\", data.isna().sum().sum())","2e3320f1":"data['quality'].unique()","8b7a882a":"encoder = LabelEncoder()\n\ndata['quality'] = encoder.fit_transform(data['quality'])\n{index: label for index, label in enumerate(encoder.classes_)}","57c96be7":"y = data['quality']\nX = data.drop('quality', axis=1)","4be6d167":"scaler = StandardScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","d59a4fce":"X","b869e504":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=34)","1e0ade92":"num_features = X.shape[1]\nprint(num_features)","61079b5a":"num_classes = len(y.unique())\nprint(num_classes)","16f16baf":"inputs = tf.keras.Input(shape=(num_features,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 32\nepochs = 100\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()]\n)","d48e8575":"fig = px.line(\n    history.history,\n    y=['loss', 'val_loss'],\n    labels={'x': \"Epoch\", 'y': \"Loss\"},\n    title=\"Loss Over Time\"\n)\n\nfig.show()","5cff8525":"model.evaluate(X_test, y_test)","112db237":"data['quality'].value_counts()","07f7ce89":"pd.qcut(data['quality'], q=2, labels=[0,1]).value_counts()","e73ec4ea":"y = pd.qcut(data['quality'], q=2, labels=[0,1])\nX = data.drop('quality', axis=1)","8a21d581":"scaler = StandardScaler()\n\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","dbec234c":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=34)","d1403e6d":"inputs = tf.keras.Input(shape=(num_features,))\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 32\nepochs = 100\n\nhistory = model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    callbacks=[tf.keras.callbacks.ReduceLROnPlateau()]\n)","bd0dd256":"fig = px.line(\n    history.history,\n    y=['loss', 'val_loss'],\n    labels={'x': \"Epoch\", 'y': \"Loss\"},\n    title=\"Loss Over Time\"\n)\n\nfig.show()","c1c8ad83":"model.evaluate(X_test, y_test)","3e2d738b":"# Re-structure the task:\n\nLet's try quantile-splitting the outputs into two categories: high quality wines and low quality wines.","3b56b1ef":"# Visualization","f8d2a732":"# Getting Started","a8c9e40f":"# Preprocessing","1afe0370":"# Modeling and Training","10d05697":"# Results","44512055":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/gybAf1Jv2M8","04f12eac":"# Task for Today  \n\n***\n\n## White Wine Quality Prediction  \n\nGiven *data about various white wines*, let's try to predict the **quality** of a particular wine, according to experts.  \n  \nWe will use a TensorFlow ANN to make our predictions."}}