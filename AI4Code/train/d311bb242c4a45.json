{"cell_type":{"b22aaa7a":"code","6e6a3b9e":"code","66dfca3f":"code","f4cd92ca":"code","a13cf280":"code","071e4b0a":"code","e7134d48":"code","70b423a4":"code","84a15b06":"code","6cb0e0aa":"code","6957a7b7":"code","34ec8122":"code","87ea8e07":"code","b3181d4c":"code","f5b7bbf0":"code","c0c34178":"code","145ba4bf":"code","dd4aa450":"code","79a9feaa":"code","86c57e2b":"code","d9934685":"code","3e1af0d9":"code","0f47cb8b":"code","a06b4368":"code","4c08834c":"code","eb89c6eb":"markdown","ec59fdc5":"markdown","dbd86f74":"markdown"},"source":{"b22aaa7a":"from transformers import MarianTokenizer, AutoModelForSeq2SeqLM","6e6a3b9e":"text = '\u4f60\u8ddf\u6211\u4e00\u8d77\u53bb\u5417\uff1f' # its will you come with me\nmname = \"Helsinki-NLP\/opus-mt-zh-en\"\ntokenizer = MarianTokenizer.from_pretrained(mname)\nmodel = AutoModelForSeq2SeqLM.from_pretrained(mname)\ninput_ids = tokenizer.encode(text, return_tensors=\"pt\")\n","66dfca3f":"outputs = model.generate(input_ids)\ndecoded = tokenizer.decode(outputs[0], skip_special_tokens=True)\nprint(decoded)","f4cd92ca":"def translate_chinese(text):\n    mname = \"Helsinki-NLP\/opus-mt-zh-en\"\n    tokenizer = MarianTokenizer.from_pretrained(mname)\n    model = AutoModelForSeq2SeqLM.from_pretrained(mname)\n    input_ids = tokenizer.encode(text, return_tensors=\"pt\")\n    outputs = model.generate(input_ids)\n    decoded = tokenizer.decode(outputs[0], skip_special_tokens=True)\n    print(decoded)\n    return decoded\n","a13cf280":"import pytesseract\nimport shutil\nimport os\nimport random\nfrom PIL import Image\n","071e4b0a":"!wget --output-document=image.jpg \"https:\/\/i.pinimg.com\/550x\/3c\/e0\/0b\/3ce00be6f0390717cbcc8391267227db.jpg\"","e7134d48":"path = '.\/image.jpg'","70b423a4":"im = Image.open(path)","84a15b06":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.imshow(im)","6cb0e0aa":"#extracted_information = pytesseract.image_to_string(im)","6957a7b7":"#extracted_information","34ec8122":"!wget \"https:\/\/github.com\/tesseract-ocr\/tessdata\/raw\/main\/chi_sim.traineddata\"","87ea8e07":"custom_config = r'--oem 3 --psm 6 -l chi_sim --tessdata-dir .\/'","b3181d4c":"imgrey = im.convert('L')\nimgrey.show()\ntext=pytesseract.image_to_string(imgrey, config=custom_config)\n \nprint(text)\n","f5b7bbf0":"pytesseract.image_to_boxes(im).split('\\n')","c0c34178":"import matplotlib.patches as patches\n\n# Create figure and axes\nfig, ax = plt.subplots()\n\n# Display the image\nax.imshow(im)\n\n# Create a Rectangle patch\nrect = patches.Rectangle((361,435), 50, 40, linewidth=1, edgecolor='r', facecolor='none')\n\n# Add the patch to the Axes\nax.add_patch(rect)\n\nplt.show()\n\n# I dont know how to make sense of it.","145ba4bf":"translate_chinese(text)","dd4aa450":"\ndef translate_image(path):\n    im = Image.open(path)\n    plt.imshow(im)\n    plt.show()\n    custom_config = r'--oem 3 --psm 6 -l chi_sim --tessdata-dir .\/'\n    imgrey = im.convert('L')\n    imgrey.show()\n    text = pytesseract.image_to_string(imgrey, config=custom_config)\n    print('extracted text: ', text)\n    print('extractedtext size: ', len(text))\n    \n    if len(text) > 500:\n        translate_chinese(text[:500])\n    else: \n        translate_chinese(text)\n","79a9feaa":"!wget --output-document=new_image.png \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/9\/97\/Chineselanguage.svg\/200px-Chineselanguage.svg.png\"","86c57e2b":"translate_image('new_image.png')","d9934685":"!wget --output-document=newer_image.jpg \"https:\/\/static01.nyt.com\/newsgraphics\/2019\/10\/21\/xinjiang-article\/13c819960fa0d589a50c0179792cdbf8c4b72c5b\/top-page-02.jpg\"","3e1af0d9":"translate_image('newer_image.jpg')","0f47cb8b":"!pip install googletrans==4.0.0-rc1\n","a06b4368":"from googletrans import Translator\ntranslator = Translator()\n\ndef translate_image_googletrans(path):\n    im = Image.open(path)\n    plt.imshow(im)\n    plt.show()\n    custom_config = r'--oem 3 --psm 6 -l chi_sim --tessdata-dir .\/'\n    imgrey = im.convert('L')\n    imgrey.show()\n    text = pytesseract.image_to_string(imgrey, config=custom_config)\n    print('extracted text: ', text)\n    print('extractedtext size: ', len(text))\n    \n    if len(text) > 500:\n        translate_chinese(text[:500])\n        print('Google translate: ')\n        print(translator.translate(text[:500]))\n    else: \n        translate_chinese(text)\n        print('Google translate: ')\n        print(translator.translate(text))","4c08834c":"translate_image_googletrans('newer_image.jpg')","eb89c6eb":"### trying with open cv and tesseract","ec59fdc5":"lets try an create a function out of it.","dbd86f74":"https:\/\/muthu.co\/all-tesseract-ocr-options\/"}}