{"cell_type":{"739444b6":"code","859bb8bb":"code","9238bab9":"code","c8e91aae":"code","7f14c021":"code","b7ebd799":"code","b3f127a9":"code","f23fde5c":"markdown","2eb50100":"markdown","e781b563":"markdown","f76780af":"markdown"},"source":{"739444b6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import RobustScaler, normalize\nfrom sklearn.model_selection import train_test_split\nfrom scipy.signal import butter,filtfilt\nfrom pickle import dump","859bb8bb":"train_ori = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')","9238bab9":"%%writefile VFE.py\n\nimport numpy as np\nimport pandas as pd\n\n# feature engineering\n# from: https:\/\/www.kaggle.com\/cdeotte\/ensemble-folds-with-median-0-153\ndef add_features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_out__max'] = df.groupby(['breath_id'])['u_out'].transform('max')\n    \n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    return df","c8e91aae":"from VFE import add_features\n\ntrain = add_features(train_ori)\ntargets = train[['pressure']].to_numpy().reshape(-1, 80)\ntrain.drop(['pressure', 'id', 'breath_id'], axis=1, inplace=True)","7f14c021":"# normalise the dataset\nRS = RobustScaler()\ntrain = RS.fit_transform(train)\n\n# Reshape to group 80 timesteps for each breath ID\ntrain = train.reshape(-1, 80, train.shape[-1])","b7ebd799":"dump(RS, open('RS.pkl', 'wb'))","b3f127a9":"np.save('x_train.npy', train)\nnp.save('y_train.npy', targets)","f23fde5c":"Save to Numpy.","2eb50100":"Feature engineering in this notebook is modified and copied and from [Improvement base on Tensor Bidirect LSTM](https:\/\/www.kaggle.com\/kensit\/improvement-base-on-tensor-bidirect-lstm-0-173\/notebook) by [Ken Sit](https:\/\/www.kaggle.com\/kensit). Which is further improved by [Chris Deotte](https:\/\/www.kaggle.com\/cdeotte) in [Ensemble Folds with MEDIAN - [0.153]](https:\/\/www.kaggle.com\/cdeotte\/ensemble-folds-with-median-0-153). It is saved to a python file for use in other notebooks.","e781b563":"The scaler is saved here to pickle, for use in other notebooks.","f76780af":"# Feature engineering\nOne soon realize that in these kind of competitions where many different models are trained on the same data and featureset and compared against each other that is is very usefult to keep feature engineering in a separate notebook."}}