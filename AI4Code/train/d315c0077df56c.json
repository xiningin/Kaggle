{"cell_type":{"e856b44d":"code","f1b1971c":"code","b81cdefa":"code","6dc97b5d":"code","3261f3e1":"code","8c60c0f0":"code","39fecafe":"code","cfcb8418":"code","14d634eb":"code","9cb59ebb":"code","d2f801cf":"code","c138f0a1":"code","587c5cbe":"code","532ac452":"code","35bda0ff":"code","47520b32":"code","f361b1ab":"code","dcc7b4c2":"code","d32767e7":"code","f36e30d1":"code","a787704b":"code","3acbfa4e":"code","6b1a2cfa":"code","a18397d2":"code","c1b609e2":"code","2e5915d5":"code","e2459adf":"markdown","cafb9801":"markdown","bde817f7":"markdown","e5bb6ded":"markdown","20899e43":"markdown","878c3775":"markdown","8f404aa0":"markdown","e62215aa":"markdown","b242825f":"markdown","082257b3":"markdown","1347657d":"markdown","31ee0a66":"markdown","7bd5f517":"markdown","e1c4b2fe":"markdown","724fe457":"markdown","eba0c9bc":"markdown","a132d8c5":"markdown","750c76a6":"markdown","94320312":"markdown","0c74d354":"markdown","6c806ea1":"markdown","ee8a17a4":"markdown","db14ad6b":"markdown","d44347ce":"markdown","8e1e8e51":"markdown","6476e5a0":"markdown","bdb10d9e":"markdown","22191042":"markdown","a2cc4cc4":"markdown","8eb850d9":"markdown","4197f26f":"markdown","9e1ef436":"markdown","6e9efdd1":"markdown","99485960":"markdown","8a5339d9":"markdown","eb7c34d8":"markdown","f3f72219":"markdown","fd9efe7c":"markdown"},"source":{"e856b44d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport datetime\nfrom datetime import date\nimport calendar\nimport dateutil\nimport os","f1b1971c":"## Check files\nprint(os.listdir(\"..\/input\/elo-merchant-category-recommendation\"))","b81cdefa":"file_path = '..\/input\/elo-merchant-category-recommendation\/train.csv'\ntrain = pd.read_csv(file_path)\ntrain.head()","6dc97b5d":"## check the correlation of each feature and target\ntrain.corr()","3261f3e1":"train.target.describe()","8c60c0f0":"file_path = '..\/input\/elo-merchant-category-recommendation\/test.csv'\ntest = pd.read_csv(file_path)\ntest.head()","39fecafe":"history = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/historical_transactions.csv')\nhistory.head()","cfcb8418":"## Month_lag\nfig = plt.figure(figsize=(14,6))\nax = sns.distplot(history.month_lag)\nax.set_xlabel('Month_lag', size=12)\nax.set_ylabel('Frequency', size=12)\nax.set_title('Month_lag', size=15)","14d634eb":"history['month_lag'].describe()","9cb59ebb":"fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(16,8))\ntemp1 = history.groupby('city_id')['purchase_amount'].mean()\ntemp2 = history.groupby('state_id')['purchase_amount'].mean()\n\nax = [ax1, ax2]\ntemp = [temp1, temp2]\nx_labels = ['city_id', 'state_id']\ntitles = ['Average City purchase amount', 'Average State purchase amount']\nscale = [100, 10000]\n\nfor i in range(2):\n    ax[i].scatter(x=temp[i].index, y=temp[i].values, c=temp[i].values, s=temp[i].values*scale[i], alpha=0.8)\n    ax[i].set_xlabel(x_labels[i], size=12)\n    ax[i].set_ylabel('Purchase amount', size=12)\n    ax[i].set_title(titles[i], size=15)","d2f801cf":"## parse purchase_date and divide it into day, week, time session and see how important they will be\nhistory['purchase_weekday'] = pd.to_datetime(history['purchase_date']).dt.day_name()\nhistory['purchase_month'] = pd.to_datetime(history['purchase_date']).dt.month_name()","c138f0a1":"## Define a day session\n## Morning: 5am to 12pm (05:00 to 11:59)\n## Afternoon: 12pm to 5pm (12:00 to 16:59)\n## Evening: 5pm to 9pm (17:00 to 20:59)\n## Night: 9pm to 5am (21:00 to 04:59)\n\ndef time_session(time):\n    \n    if time >= 5 and time < 12:\n        return 'Morning'\n    elif time >=12 and time < 17:\n        return 'Afternoon'\n    elif time >=17 and time < 21:\n        return 'Evening'\n    else:\n        return 'Night'","587c5cbe":"history['temp'] = pd.to_datetime(history['purchase_date']).dt.hour\nhistory['purchase_time_session'] = history['temp'].apply(lambda x : time_session(x))","532ac452":"## Make categorical data has specific order\nweekday_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nhistory['purchase_weekday'] = pd.Categorical(history['purchase_weekday'], categories=weekday_labels, ordered=True)\n\nmonth_labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n                'September', 'October', 'November', 'December']\nhistory['purchase_month'] = pd.Categorical(history['purchase_month'], categories=month_labels, ordered=True)\n\nsession_labels = ['Morning', 'Afternoon', 'Evening', 'Night']\nhistory['purchase_time_session'] = pd.Categorical(history['purchase_time_session'], categories=session_labels, ordered=True)","35bda0ff":"f, (ax1, ax2, ax3) = plt.subplots(nrows=3, ncols=1, figsize=(14,10))\ntemp1 = history.groupby('purchase_weekday')['purchase_amount'].mean()\ntemp2 = history.groupby('purchase_month')['purchase_amount'].mean()\ntemp3 = history.groupby('purchase_time_session')['purchase_amount'].mean()\n\na = sns.lineplot(x=temp1.index, y=temp1.values, data=history, ax=ax2)\nb = sns.lineplot(x=temp2.index, y=temp2.values, data=history, ax=ax1)\nc = sns.lineplot(x=temp3.index, y=temp3.values, data=history, ax=ax3)\n\nplt.xlabel('Purchase time', size=12)\nplt.ylabel('Purchase amount', size=12)\nf.suptitle('Time Series Analysis', size=15)","47520b32":"mer = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/merchants.csv')\nmer.head()","f361b1ab":"f, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(16,8))\ntemp1 = mer.groupby('city_id')['avg_sales_lag3'].sum()\ntemp2 = mer.groupby('city_id')['avg_sales_lag6'].sum()\ntemp3 = mer.groupby('city_id')['avg_sales_lag12'].sum()\n\nax = [ax1, ax2, ax3]\ntemp = [temp1, temp2, temp3]\ny_labels = ['Total avg sales lag3', 'Total avg sales lag6', 'Total avg sales lag12']\n\nfor i in range(3):\n    ax[i].scatter(x=temp[i].index, y=temp[i].values, s=temp[i].values\/100, c=temp[i].values, alpha=0.8)\n    ax[i].set_xlabel('City id', fontsize=12)\n    ax[i].set_ylabel(y_labels[i])\n    ax[i].set_title(y_labels[i] + ' in each city')","dcc7b4c2":"f, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(16,8))\ntemp1 = mer.groupby('city_id')['avg_purchases_lag3'].sum()\ntemp2 = mer.groupby('city_id')['avg_purchases_lag6'].sum()\ntemp3 = mer.groupby('city_id')['avg_purchases_lag12'].sum()\n\nax = [ax1, ax2, ax3]\ntemp = [temp1, temp2, temp3]\ny_labels = ['Total avg purchases lag3', 'Total avg purchases lag6', 'Total avg purchases lag12']\n\nfor i in range(3):\n    ax[i].scatter(x=temp[i].index, y=temp[i].values, s=temp[i].values\/100, c=temp[i].values, alpha=0.8)\n    ax[i].set_xlabel('City id', fontsize=12)\n    ax[i].set_ylabel(y_labels[i])\n    ax[i].set_title(y_labels[i] + ' in each city')","d32767e7":"new_mer = pd.read_csv('..\/input\/elo-merchant-category-recommendation\/new_merchant_transactions.csv')\nnew_mer.head()","f36e30d1":"train = pd.read_csv('..\/input\/elo-combined-data\/X.csv')\ntrain.drop('Unnamed: 0', axis=1, inplace=True)","a787704b":"test = pd.read_csv('..\/input\/elo-combined-data\/X_test.csv')\ntest.drop('Unnamed: 0', axis=1, inplace=True)","3acbfa4e":"y = pd.read_csv('..\/input\/elo-combined-data\/y.csv', header=None)\ny.drop(0, axis=1, inplace=True)\ny.rename({1: 'target'}, axis=1, inplace=True)","6b1a2cfa":"not_use_col = ['first_active_month', 'card_id']\nuse_cols = [col for col in train.columns if col not in not_use_col]\nX = train[use_cols]\nX_test = test[use_cols]","a18397d2":"features = list(train[use_cols].columns)\ncategorical_feat = [col for col in features if 'feature_' in col]","c1b609e2":"def model():\n    lgb_params = {\n              'objective': 'regression',\n              'metric': 'rmse',\n              'max_depth': 11,\n              'min_chil_samples': 20,\n              'min_data_in_leaf': 200,\n              'reg_alpha': 1,\n              'reg_lambda': 1,\n              'num_leaves': 140,\n              'learning_rate': 0.07,\n              'subsample': 0.8,\n              'colsample_bytress': 0.9,\n              'verbosity': -1}\n    \n    folds = KFold(n_splits=10, shuffle=True, random_state=1)\n    oof = np.zeros(len(X))\n    predictions = np.zeros(len(X_test))\n    \n    for fold_, (trn_idx, val_idx) in enumerate(folds.split(X.values, y.values)):\n        print(\"LGB\" + str(fold_) + '*' * 50)\n        trn_data = lgb.Dataset(X.iloc[trn_idx][use_cols], label=y.iloc[trn_idx], categorical_feature=categorical_feat)\n        val_data = lgb.Dataset(X.iloc[val_idx][use_cols], label=y.iloc[val_idx], categorical_feature=categorical_feat)\n\n        num_round=1000\n\n        clf = lgb.train(lgb_params, trn_data, valid_sets=[trn_data, val_data], verbose_eval=100, early_stopping_rounds=600)\n        oof[val_idx] = clf.predict(X.iloc[val_idx][use_cols], num_iteration = clf.best_iteration)\n        predictions += clf.predict(X_test[use_cols], num_iteration=clf.best_iteration) \/ folds.n_splits\n\n    print(\"CV score: {:<8.5f}\".format(mean_squared_error(oof, y)**0.5))","2e5915d5":"model()","e2459adf":"From the contents of merchants.csv, we can know it contains some columns which could be found on history file. In addition, there are some new columns could be found on merchants file, like ave_sales_lag3. ","cafb9801":"***Merchants.csv***","bde817f7":"### Convert categorical data into numerical data if there are less than two classes\nhistory['authorized_flag'] = history['authorized_flag'].map({'Y': 1, 'N': 0}) \n\nnew_mer['authorized_flag'] = new_mer['authorized_flag'].map({'Y': 1, 'N': 0})","e5bb6ded":"## Select a suitable model\n\nIn this kernel, we are focusing on ***LightGBM***, which is a gradient boosting framework that uses tree based learning algorithms. To better understand this algorithm, you should do more research about it. What's more inmportant, you should try to understand the thoery behind it and play with it. \n\n#### Reference\n* [LightGBM\u2019s documentation!](https:\/\/lightgbm.readthedocs.io\/en\/latest\/)\n* [What is LightGBM, How to implement it? How to fine tune the parameters?](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.rename.html)\n* [LightGBM, Light Gradient Boosting Machine](https:\/\/github.com\/Microsoft\/LightGBM)\n\n**For Faster Speed:**\n* Use bagging by setting bagging_fraction and bagging_freq\n* Use feature sub-sampling by setting feature_fraction\n* Use small max_bin\n* Use save_binary to speed up data loading in future learning\n* Use parallel learning, refer to parallel learning guide.\n\n**For better accuracy:**\n* Use large max_bin (may be slower)\n* Use small learning_rate with large num_iterations\n* Use large num_leaves(may cause over-fitting)\n* Use bigger training data\n* Try dart\n* Try to use categorical feature directly\n\n**To deal with over-fitting:**\n* Use small max_bin\n* Use small num_leaves\n* Use min_data_in_leaf and min_sum_hessian_in_leaf\n* Use bagging by set bagging_fraction and bagging_freq\n* Use feature sub-sampling by set feature_fraction\n* Use bigger training data\n* Try lambda_l1, lambda_l2 and min_gain_to_split to regularization\n* Try max_depth to avoid growing deep tree","20899e43":"From train and test data sets,  except the target column, they have the same number of columns with the same column names. So we can know, card_id is something related to other provided files. ","878c3775":"#### Modified the time data so that they could be easily recognized by the machine. \nnew_trans_agg['new_purchase_date_diff_days'] = pd.to_datetime(new_trans_agg['new_purchase_date_max']).dt.day - pd.to_datetime(new_trans_agg['new_purchase_date_min']).dt.day\n\nnew_trans_agg.drop(['new_purchase_date_max', 'new_purchase_date_min'], axis=1, inplace=True)\n\nnew_trans_agg = new_trans_agg.rename(columns={'new_purchase_date_<lambda>': 'new_purchase_date_diff'})\n\nnew_trans_agg['new_purchase_date_diff'] = new_trans_agg['new_purchase_date_diff'].dt.total_seconds()","8f404aa0":"The mean of the target is about 0,  and 25% and 75% are closed to 0, but the min and max values are much higher than that. We should pay attention to these since these might be wrong labels. ","e62215aa":"From the list above, there are a total of 7 files. In additon, we can uderstand the meaning of each current given data by Data_Dictionary.xlsx. ","b242825f":"#### process the train and test data set\ndef read_data(input_file):\n    df = pd.read_csv(input_file)\n   \n   df['first_active_month'] = pd.to_datetime(df['first_active_month'])\n    \n   df['elapsed_time'] = (datetime.date(2018, 2, 1) - df['first_active_month'].dt.date).dt.days\n    \n   return df","082257b3":"***Test.csv***","1347657d":"#### def aggregate_merchants(data):\n    \n    agg_fun={\n        'avg_sales_lag3': ['mean'],\n        'avg_purchases_lag3': ['mean'],\n        'active_months_lag3': ['mean'],\n        'avg_sales_lag6': ['mean'],\n        'avg_purchases_lag6': ['mean'],\n        'active_months_lag6': ['mean'],\n        'avg_sales_lag12': ['mean'],\n        'avg_purchases_lag12': ['mean']\n    }\n    \n    agg_mer = data.groupby('merchant_id').agg(agg_fun)\n    agg_mer.columns = ['mer_' + '_'.join(col).strip() for col in agg_mer.columns.values]\n    \n    agg_mer.reset_index(inplace=True)\n    \n    return agg_mer","31ee0a66":"## Prepare features","7bd5f517":"From the table above, it shows that feature_1 has a stronger correlation with feature_3, while all features have a weak correlation with target. Which means we need more other features so that we can predict target accurately. ","e1c4b2fe":"***new_merchant_transactions.csv***","724fe457":"From the historical_transactions file, we know authorized_flag, category_1 and category_3 are categorical features except card_id and merchant_id, they should be tranformed to numerical data or dummies later. \nOur job is to help understand customer loyalty. At first glance, purchase_amount, month_lag, purchase_date, city_id, and state_id are important in this task. Let's check their relations. ","eba0c9bc":"mer_agg = aggregate_merchants(mer)","a132d8c5":"### **Group new merchant transactions dataset**","750c76a6":"**Hello, guys. This is my first Kernel at Kaggle. I hope you find it useful. **\n\nHere are steps of problem solving process:\n\n1.  Understand the problem set; \n    - if you don't have any domain knowledge, you should do more research online or ask your friends for help\n2.  Analyze each data set before using them;\n    - Check Relationships of data\n    - Drop any redundant data\n    - Explore New Features from current features\n3.  Merge data sets by primary keys; \n    - Understand the relations among datasets\n4.  Select a suitable model;\n    - Prepare data for the model\n    - Set up the model\n    - Tune parameters\n ","94320312":"As we know, a data scientist spends much time analyzing data. What's more important, he or she needs to uderstand the problem first. Then he\/she needs to think about what could be got from current given data, how to use these data, what kinds of useful features could be created from these given data sets, and what kinds of models that we can try to solve the problem. \n\n#### Reference:  \n[Elo world by FabienDaniel](https:\/\/www.kaggle.com\/fabiendaniel\/elo-world)","0c74d354":"#### Merge the all aggregate files with train and test dataset, so that they contain the same number of features.\ntrain = pd.merge(train, history_agg, on='card_id', how='left')\n\ntest = pd.merge(test, history_agg, on='card_id', how='left')\n\ntrain = pd.merge(train, new_trans_agg, on='card_id', how='left')\n\ntest = pd.merge(test, new_trans_agg, on='card_id', how='left')","6c806ea1":"***Train.csv***","ee8a17a4":"new_trans_agg = aggregate_new_merchant_transaction(new_mer)","db14ad6b":"#### Merge history dateset with merchant_agg dataset by using 'merchant_id'\nhistory = pd.merge(history, mer_agg, on='merchant_id', how='left', suffixes=('_hist', '_mer'))","d44347ce":"#### def aggregate_new_merchant_transaction(data):\n    \n    agg_fun={\n        'authorized_flag': ['sum'],\n        'merchant_id': ['nunique'],\n        'installments': ['sum', 'max', 'mean'],\n        'month_lag': ['sum', 'mean'],\n        'purchase_amount': ['sum', 'mean', 'max', 'min'],\n        'purchase_date': ['max', 'min', lambda x : max(x) - min(x)]\n    }\n    \n    agg_new_mer = data.groupby('card_id').agg(agg_fun)\n    agg_new_mer.columns = ['new_' + '_'.join(col).strip() for col in agg_new_mer.columns.values]\n    \n    agg_new_mer.reset_index(inplace=True)\n    \n    return agg_new_mer","8e1e8e51":"### Change type of purchase date, so that we can get extra useful information from them\nhistory['purchase_date'] = pd.DatetimeIndex(history['purchase_date'])\n\nnew_mer['purchase_date'] = pd.DatetimeIndex(new_mer['purchase_date'])","6476e5a0":"#### Seperate the target values from train dataset and delete the target values from it.\ny = train['target']\n\ndel train['target']","bdb10d9e":"#### Modified the time data so that they could be easily recognized by the machine. \nhistory_agg['hist_purchase_date_diff_day'] = pd.to_datetime(history_agg['hist_purchase_date_max']).dt.day - pd.to_datetime(history_agg['hist_purchase_date_min']).dt.day\n\nhistory_agg.drop(['hist_purchase_date_max', 'hist_purchase_date_min'], axis=1, inplace=True)\n\nhistory_agg = history_agg.rename(columns={\"hist_purchase_date_<lambda>\": \"hist_purchase_date_diff\"})\n\nhistory_agg['hist_purchase_date_diff'] = history_agg['hist_purchase_date_diff'].dt.total_seconds()","22191042":"***Historical_transactions.csv***","a2cc4cc4":"From the graphs above, we can see that purchase date contains some useful information. It is better to think about a way to convert the purchase date into categorical data or a numerical number. ","8eb850d9":"The graph and the table show that the 75% of month_lag are less than -2.","4197f26f":"From these two graphs, it is obvious to see that some cities or states contributed more to the Elo. So, I bet city_id and state_id are quite important to the project. ","9e1ef436":"### **Group merchants dataset **","6e9efdd1":"history_agg = aggregate_history_transactions(history)","99485960":"## **Analyze each data set before using them**","8a5339d9":"According to average sales graphs, we can know that some cities have higher total average sales lag than other cities. However, the majority of cities have lower total average purchases lag. ","eb7c34d8":"From the table above, we can know that new merchant transactions contain some useful features, like purchase amount, and purchase date. \n\n#### Due to kaggle kernel died for many times while merging datasets, so I have to process these data on Jupyter Notebook, and save the final files and uploaded them to Kaggle.  \n\n#### Please check the appendix of this kernel for details. ","f3f72219":"## Appendix\n\n### Data preprocessing and cleaning:","fd9efe7c":"#### def aggregate_history_transactions(history):\n    \n    agg_fun = {\n        'authorized_flag': ['sum', 'mean'],\n        'city_id': ['nunique'],\n        'installments': ['sum', 'max', 'mean', 'std'],\n        'merchant_category_id': ['nunique'],\n        'month_lag': ['mean', 'min'],\n        'purchase_amount': ['sum', 'mean', 'max', 'min', 'std'],\n        'state_id': ['nunique'],\n        'subsector_id': ['mean', 'max', 'min'],\n        'purchase_date': ['max', 'min', lambda x: max(x) - min(x)],\n        'category_1': ['nunique'],\n        'category_3': ['nunique'],\n        'category_2': ['mean'],\n        'mer_avg_sales_lag3_mean_mer': ['sum', 'mean'],\n        'mer_avg_purchases_lag3_mean_mer': ['sum', 'mean'],\n        'mer_active_months_lag3_mean_mer': ['sum'],\n        'mer_avg_sales_lag6_mean_mer': ['sum', 'mean'], \n        'mer_avg_purchases_lag6_mean_mer': ['sum', 'mean'],\n        'mer_active_months_lag6_mean_mer': ['sum'], \n        'mer_avg_sales_lag12_mean_mer': ['sum', 'mean'],\n        'mer_avg_purchases_lag12_mean_mer': ['sum', 'mean']\n    }\n    \n    agg_history = history.groupby(['card_id']).agg(agg_fun)\n    agg_history.columns = ['hist_' + '_'.join(col).strip() for col in agg_history.columns.values]\n    agg_history.reset_index(inplace=True)\n    \n    df = (history.groupby('card_id').size().reset_index(name='hist_transactions_count'))\n    \n    agg_history = pd.merge(df, agg_history, on='card_id', how='left')\n    \n    return agg_history"}}