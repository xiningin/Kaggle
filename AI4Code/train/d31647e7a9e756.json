{"cell_type":{"fbe25e70":"code","64bdb670":"code","46ad30ed":"code","d4bb16db":"code","a00a0b89":"code","d964d6e0":"code","83a70ff7":"code","f80af85e":"code","5c06014f":"code","2d5a49f2":"code","b3967fb3":"code","9582634b":"code","de73d368":"code","714d94c2":"code","332879fa":"code","97223c6d":"code","e3073854":"code","7ece5dbd":"code","9fb439a0":"code","1c63b779":"code","f719495b":"code","834cc337":"code","c8378793":"code","5a454ab5":"code","dcb1fa83":"code","5881cec6":"code","e036a5c0":"code","f7675795":"code","4af66ed9":"code","4c9ca754":"code","ad12d836":"code","51ce0623":"code","e2fa7953":"code","7406139f":"markdown","166a1123":"markdown"},"source":{"fbe25e70":"import tensorflow as tf\nimport pandas as pd\nimport os\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras import Sequential\nfrom keras import layers\nfrom keras import backend as K\nfrom keras.layers.core import Dense\nfrom keras import regularizers\nfrom keras.layers import Dropout\nfrom keras.constraints import max_norm","64bdb670":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nimport warnings\nimport gc\nimport time\nimport sys\nimport datetime\nimport PIL, os, numpy as np, math, collections, threading, json,  random, scipy, cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm\nfrom sklearn.metrics import mean_squared_error\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nfrom sklearn import metrics\n# Plotly library\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)\npd.set_option('display.max_columns', 500)\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold, KFold, TimeSeriesSplit\nfrom sklearn.metrics import mean_squared_error, roc_auc_score\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn import metrics\nimport gc\nfrom catboost import CatBoostClassifier\nfrom tqdm import tqdm_notebook\nimport plotly.offline as py","46ad30ed":"# Import data\ntrain = pd.read_csv('..\/input\/train.csv')\n","d4bb16db":"train.shape","a00a0b89":"#Check num of cases in label \nprint(train.target.value_counts())\nprint(train.target.value_counts()[1]\/train.target.value_counts()[0])","d964d6e0":"gc.collect()","83a70ff7":"train_features = train.drop(['target', 'ID_code'], axis=1)\ntrain_targets = train['target']\n","f80af85e":"train.describe()","5c06014f":"train_features= pd.DataFrame(train_features)","2d5a49f2":"from sklearn.preprocessing import power_transform\nfeatures = [c for c in train.columns if c not in ['ID_code', 'target']]\nfor feature in features:\n    train_features['mean_'+feature] = (train_features[feature].mean()-train_features[feature])\n    train_features['z_'+feature] = (train_features[feature] - train_features[feature].mean())\/train_features[feature].std(ddof=0)\n    train_features['sq_'+feature] = (train_features[feature])**2\n    train_features['sqrt_'+feature] = (train_features['sq_'+feature])**(1\/4)\n    train_features['log_'+feature] = np.log(train_features['sq_'+feature]+10)\/2","b3967fb3":"train_features.head()","9582634b":"# Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler\nsc = StandardScaler()\ntrain_features = sc.fit_transform(train_features)\n","de73d368":"gc.collect()","714d94c2":"# Add RUC metric to monitor NN\ndef auc(y_true, y_pred):\n    auc = tf.metrics.auc(y_true, y_pred)[1]\n    K.get_session().run(tf.local_variables_initializer())\n    return auc","332879fa":"input_dim = train_features.shape[1]\ninput_dim","97223c6d":"from keras import callbacks\nfrom sklearn.metrics import roc_auc_score\n\nclass printAUC(callbacks.Callback):\n    def __init__(self, X_train, y_train):\n        super(printAUC, self).__init__()\n        self.bestAUC = 0\n        self.X_train = X_train\n        self.y_train = y_train\n        \n    def on_epoch_end(self, epoch, logs={}):\n        pred = self.model.predict(np.array(self.X_train))\n        auc = roc_auc_score(self.y_train, pred)\n        print(\"Train AUC: \" + str(auc))\n        #pred = self.model.predict(self.validation_data[0])\n        #auc = roc_auc_score(self.validation_data[1], pred)\n        #print (\"Validation AUC: \" + str(auc))\n        if (self.bestAUC < auc) :\n            self.bestAUC = auc\n            self.model.save(\"bestNet.h5\", overwrite=True)\n        return","e3073854":"from keras.layers import Dense,Dropout,BatchNormalization\nfrom keras import regularizers\nimport keras\nfrom keras.callbacks import LearningRateScheduler,EarlyStopping\nimport tensorflow as tf\nfrom keras import backend as K\nfrom sklearn.model_selection import train_test_split\nfrom keras.constraints import max_norm","7ece5dbd":"def step_decay(epoch):\n   initial_lrate = 0.1\n   drop = 0.5\n   epochs_drop = 10.0\n   lrate = initial_lrate * math.pow(drop,  \n           math.floor((1+epoch)\/epochs_drop))\n   return lrate\nlrate = LearningRateScheduler(step_decay)","9fb439a0":"class LossHistory(keras.callbacks.Callback):\n    def on_train_begin(self, logs={}):\n       self.losses = []\n       self.lr = []\n \n    def on_epoch_end(self, batch, logs={}):\n       self.losses.append(logs.get('loss'))\n       self.lr.append(step_decay(len(self.losses)))","1c63b779":"import random\nfrom keras import models\nfrom keras import regularizers\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.layers.advanced_activations import PReLU,LeakyReLU\nkernel_regularizer=regularizers.l2(0.01)\nmodel = models.Sequential()\nmodel.add(Dense(128, activation='relu', input_shape=(train_features.shape[1],)))\n#model.add(PreLU(alpha=.001))\nmodel.add(Dropout(0.6))\nmodel.add(BatchNormalization())\nmodel.add(Dense(64,activation='relu'))\n#model.add(PreLU(alpha=.001))\nmodel.add(Dropout(0.6))\nmodel.add(BatchNormalization())\nmodel.add(Dense(32,activation='relu'))\n#model.add(PreLU(alpha=.001))\nmodel.add(Dropout(0.5))\nmodel.add(BatchNormalization())\nmodel.add(Dense(1,activation='sigmoid'))\n\nannealer = LearningRateScheduler(lambda x: 1e-2 * 0.95 ** x)","f719495b":"model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy',auc])\n","834cc337":"gc.collect()","c8378793":"from sklearn.model_selection import StratifiedShuffleSplit\nloss_history = LossHistory()\nlrate = LearningRateScheduler(step_decay)\ncallbacks_list = [EarlyStopping(monitor='val_auc', patience=10,mode='max'),loss_history, annealer]\nsss = StratifiedShuffleSplit(n_splits=10)\nfor train_index, test_index in sss.split(train_features, train_targets):\n    X_train, X_val = train_features[train_index], train_features[test_index]\n    Y_train, Y_val = train_targets[train_index], train_targets[test_index]\n#    print(\"{} iteration\".format(i+1))\n    history= model.fit(X_train,Y_train,batch_size=512,epochs=50,callbacks=callbacks_list,verbose=1,validation_data=(X_val,Y_val))\n    del X_train, X_val, Y_train, Y_val\n    gc.collect()","5a454ab5":"# Try early stopping\n#from keras.callbacks import EarlyStopping\n#callback = EarlyStopping(monitor='loss', min_delta=0, patience=10, verbose=0, mode='auto', baseline=None, restore_best_weights=True)","dcb1fa83":"train_features.shape","5881cec6":"del train, train_features\ngc.collect()","e036a5c0":"test = pd.read_csv('..\/input\/test.csv')\ntest_features = test.drop(['ID_code'], axis=1)","f7675795":"for feature in features:\n    test_features['mean_'+feature] = (test_features[feature].mean()-test_features[feature])\n    test_features['z_'+feature] = (test_features[feature] - test_features[feature].mean())\/test_features[feature].std(ddof=0)\n    test_features['sq_'+feature] = (test_features[feature])**2\n    test_features['sqrt_'+feature] = (test_features['sq_'+feature])**(1\/4)\n    test_features['log_'+feature] = np.log(test_features['sq_'+feature]+10)\/2","4af66ed9":"test_features = sc.transform(test_features)","4c9ca754":"id_code_test = test['ID_code']\n# Make predicitions\npred = model.predict(test_features)\npred_ = pred[:,0]","ad12d836":"print(train['target'].mean())\npred.mean()","51ce0623":"# To CSV\nmy_submission = pd.DataFrame({\"ID_code\" : id_code_test, \"target\" : pred_})","e2fa7953":"my_submission.to_csv('submission.csv', index = False, header = True)","7406139f":"def auc(y_true, y_pred):\n    return tf.py_func(metrics.roc_auc_score, (y_true, y_pred), tf.double)","166a1123":"Forked from @VisheshShrivastav. Using the basic framework from vishesh's Kernel "}}