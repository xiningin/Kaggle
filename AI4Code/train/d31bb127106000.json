{"cell_type":{"e5806117":"code","2ce40ef8":"code","c401a751":"code","b5858dec":"code","cd5692e8":"code","b717e3d9":"code","e5602f1c":"code","afe53b65":"code","f736d552":"code","1dadf18d":"code","ea2cd604":"code","8a5c65a6":"code","b27788d0":"code","59c6ee6a":"code","63df323e":"code","027f0ad6":"code","82c618a7":"code","d71420db":"code","3c6da98c":"code","00e9457f":"code","15b93e0d":"code","d04011fb":"code","cdb0fa87":"code","028abb71":"code","b33ab1df":"code","38c2d294":"code","8a1a8442":"code","05d28560":"code","90ed49f9":"code","39888ed1":"code","08a945bf":"code","e5c8313b":"code","ae1ab67a":"code","89410dc8":"code","51572673":"code","345e60b6":"code","a77c1dae":"code","083da3eb":"code","ebb5e359":"code","b4a48736":"code","36f3bdbf":"code","1a7182bc":"code","2bb528ff":"code","cfce9c2c":"code","82770ac0":"code","a210b3e0":"code","26d9740a":"code","0f963aa5":"code","0eeb7afd":"code","96940572":"code","22f6104f":"code","350b283b":"code","0332e94d":"markdown","4ea48369":"markdown","30839d8e":"markdown","f008667c":"markdown","ca224df6":"markdown","61898c3b":"markdown","e6b12d73":"markdown","891f3714":"markdown","bda62463":"markdown","55e0a3fc":"markdown","d13d8600":"markdown","86854fab":"markdown","e8781d8c":"markdown","217d24f5":"markdown","3fc16ee1":"markdown","5b0ecb85":"markdown","d6c3dce7":"markdown","a4ced33f":"markdown","03cc64ba":"markdown","a92557a1":"markdown","a075e18d":"markdown","7f0777ce":"markdown","14c1b957":"markdown","c84a04e4":"markdown","7d964566":"markdown","510cb5cb":"markdown","38364f78":"markdown","ddb281b5":"markdown","321592f4":"markdown","d73257ab":"markdown","544f48da":"markdown","c74fbe49":"markdown","53ca1790":"markdown","d8a33e21":"markdown","4e0236a5":"markdown","788d97e9":"markdown","11a3fe2a":"markdown","7d48d688":"markdown","46199fb0":"markdown","125e3811":"markdown","296b14f1":"markdown","04934eb7":"markdown","1a55c843":"markdown","7daa7d20":"markdown","6390be8a":"markdown","74d6fef6":"markdown","4f4ebc0c":"markdown","26d12e8c":"markdown","afd6f617":"markdown","b1829492":"markdown","078fa1bf":"markdown","90d8e909":"markdown","6409dde7":"markdown","30e37b71":"markdown","464f174f":"markdown","962f086c":"markdown","9971a1fc":"markdown","895f1220":"markdown","115c4c97":"markdown","80f679cb":"markdown","7b3bae25":"markdown","f8fc1f66":"markdown","ba6a4d2f":"markdown","8aadb15f":"markdown","aef264a0":"markdown","8fcc0baa":"markdown","9017646d":"markdown","4b10dd86":"markdown"},"source":{"e5806117":"import pandas as pd # to dataframes\nimport matplotlib.pyplot as plt #to define plot parameters\nimport seaborn as sns #to graphical plots\nimport numpy as np #to math \n\nplt.style.use('ggplot') # to plot graphs with gggplot2 style\n\n# To NLP and Word Cloud\nfrom wordcloud import WordCloud, STOPWORDS\nimport nltk.tokenize as word_tokenize\nimport re\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nimport string\nimport re\nfrom nltk.stem.porter import *\nfrom nltk.tokenize import sent_tokenize\nfrom sklearn.feature_extraction import stop_words","2ce40ef8":"#Reading the dataset on pandas\nstrains = pd.read_csv(\"..\/input\/cannabis.csv\")","c401a751":"# Veryfing the shape, if have any null numbers and looking how the data is\nprint(strains.shape)\nprint(strains.isnull().sum())\nprint(strains.info())\nstrains.head(n=6)","b5858dec":"strains['Type'] = strains.Type.astype(str)\n#Here looking though the data to see the structure\nprint(strains.nunique())","cd5692e8":"#First, I will look the distribuition of Types\ntotal = len(strains)\nplt.figure(figsize=(10,6))\n\ng = sns.countplot(x=\"Type\", data=strains, \n                  palette='hls', color='blue')\ng.set_title(\"Cannabis Species Count \", fontsize=22)\ng.set_xlabel('Species', fontsize=18)\ng.set_ylabel('Count', fontsize=18)\nsizes=[]\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=14) \ng.set_ylim(0, max(sizes) * 1.10)\n\nplt.show()\n","b717e3d9":"plt.figure(figsize=(12,6))\n\n#Total rating distribuition\ng = sns.distplot(strains[\"Rating\"],\n                 bins=50)\ng.set_title(\"Rating distribuition\", \n            size = 20)\ng.set_xlabel('Rating',\n             fontsize=15)\n\nplt.show()","e5602f1c":"print(\"Rating Distribuition by Species Type\")\npd.crosstab(strains[strains.Rating > 3.0]['Rating'], strains.Type).T\n","afe53b65":"plt.figure(figsize=(16,10))\n\nplt.suptitle('Rating Distributions by Cannabis Species', fontsize=22)\n\n#Let's look the Rating distribuition by Type.\ng = plt.subplot(231)\ng = sns.distplot(strains[(strains.Type == 'hybrid') & \n                               (strains.Rating > 0)][\"Rating\"],\n                 color='y')\ng.set_xlabel(\"Rating\", fontsize=15)\ng.set_ylabel(\"Probability\", fontsize=15)\ng.set_title(\"Distribuition Hybrids\", fontsize=20)\n\ng1 = plt.subplot(232)\ng1 = sns.distplot(strains[(strains.Type == 'sativa') & \n                               (strains.Rating > 0)][\"Rating\"],\n                  color='g')\ng1.set_xlabel(\"Rating\", fontsize=15)\ng1.set_ylabel(\"Probability\", fontsize=15)\ng1.set_title(\"Distribuition Sativas\",\n             fontsize=20)\n\ng2 = plt.subplot(233)\ng2 = sns.distplot(strains[(strains.Type == 'indica') & \n                               (strains.Rating > 0)][\"Rating\"], color='r')\ng2.set_xlabel(\"Rating\", fontsize=15)\ng2.set_ylabel(\"Probability\", fontsize=15)\ng2.set_title(\"Distribuition Indicas\", \n             fontsize=20)\n\ng3 = plt.subplot(212)\n\nmy_pal = {\"hybrid\": \"y\", \"sativa\": \"g\", \"indica\":\"r\"}\n\n#I will now explore the Rating distribuition by Type\ng3 = sns.boxplot(x=\"Type\",y=\"Rating\",  palette=my_pal,\n                data=strains[strains[\"Rating\"] > 2])\ng3.set_title(\"Boxplot of Distribuition by Species Type\", \n            fontsize=20)\ng3.set_xlabel(\"Species\", fontsize=17)\ng3.set_ylabel(\"Rating\", fontsize=17)\n\nplt.subplots_adjust(wspace = 0.3, hspace = 0.4,top = 0.85)\n\nplt.show()","f736d552":"#I will extract the values in Effects and Flavor and pass to a new column\ndf_effect = pd.DataFrame(strains.Effects.str.split(',',4).tolist(),\n             columns = ['Effect_1','Effect_2','Effect_3','Effect_4','Effect_5'])\n\ndf_flavors = pd.DataFrame(strains.Flavor.str.split(',',n=2,expand=True).values.tolist(),\n                          columns = ['Flavor_1','Flavor_2','Flavor_3'])","1dadf18d":"#Concatenating the new variables with strains\nstrains = pd.concat([strains, df_effect], axis=1)\nstrains = pd.concat([strains, df_flavors], axis=1)\n\n#Looking the result\nstrains.head()\n\nstrains.columns","ea2cd604":"print(\"The top 5 First Effects related\")\nprint(strains['Effect_1'].value_counts()[:5])\n\nplt.figure(figsize=(13,6))\n\ng = sns.boxplot(x = 'Effect_1', y=\"Rating\",\n                hue=\"Type\",\n                data=strains[strains[\"Rating\"] > 3],\n                palette=\"hls\")\ng.set_xlabel(\"Related Effect\", fontsize=15)\ng.set_ylabel(\"Rating Distribuition\", fontsize=15)\ng.set_title(\"First Effect Related x Rating by Species Type\",\n            fontsize=20)\n\nplt.show()","8a5c65a6":"print(\"The top 5 Second related Effects\")\nprint(strains['Effect_2'].value_counts()[:5])\n\nplt.figure(figsize=(13,6))\n\ng = sns.boxplot(x = 'Effect_2', y=\"Rating\",\n                hue=\"Type\",\n                data=strains[strains[\"Rating\"] > 3],\n                palette=\"hls\")\ng.set_xlabel(\"Related Effect\", fontsize=15)\ng.set_ylabel(\"Rating Distribuition\", fontsize=15)\ng.set_title(\"Second Effect Related x Rating by Species Type\",\n            fontsize=20)\n\nplt.show()","b27788d0":"plt.figure(figsize=(14,6))\nsns.countplot('Flavor_1', data=strains)\nplt.xticks(rotation=90)\nplt.xlabel('First Related Flavors', fontsize=15)\nplt.ylabel('Frequency', fontsize=15)\nplt.title(\"General Cannabis First flavors described \",\n          fontsize=20)\nplt.show()","59c6ee6a":"#Whats the type with most strains with rating 5?\ntotal_rat5 = len(strains[strains[\"Rating\"] == 5])\n\nplt.figure(figsize=(10,6))\ng = sns.countplot(x=\"Type\",data=strains[strains[\"Rating\"] == 5])\ng.set_xlabel('Species', fontsize=15)\ng.set_ylabel('Frequency', fontsize=15)\ng.set_title(\"Distribuition of Types by Rating 5.0  \", \n            fontsize=20)\nsizes = []\nfor p in g.patches:\n    height = p.get_height()\n    sizes.append(height)\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total_rat5 * 100),\n            ha=\"center\", fontsize=15) \ng.set_ylim(0,max(sizes)*1.15)\n\nplt.show()","63df323e":"strains_top = strains[strains[\"Rating\"] == 5]\n\nplt.figure(figsize=(16,11))\n\nplt.subplot(211)\ng = sns.countplot(x ='Effect_1',data = strains_top,hue=\"Type\",\n              palette='hls')\ng.set_title(\"Effects distribution by Cannabis Species with Rating 5.0\", fontsize=20)\ng.set_xlabel('First Effect Related', fontsize=16)\ng.set_ylabel('count', fontsize=16)\n\nplt.subplot(212)\ng1 = sns.countplot(x ='Flavor_1',data = strains_top,hue=\"Type\",\n              palette='hls')\ng1.set_title(\"Flavors distribution by Cannabis Species with Rating 5.0\", fontsize=20)\ng1.set_xlabel('First Flavor Related', fontsize=16)\ng1.set_ylabel('count', fontsize=16)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\n\nplt.subplots_adjust(hspace = 0.5)\n\nplt.show()","027f0ad6":"#Let's create subsets by each type and explore their Flavors and Effects\nhibridas = strains[strains.Type == 'hybrid']\nindicas = strains[strains.Type == 'indica']\nsativas = strains[strains.Type == 'sativa']","82c618a7":"#Now we can delete some columns that will not be useful\ndel strains[\"Effects\"]\ndel strains[\"Flavor\"]","d71420db":"#Creating the spliter -- by LiamLarsen -- \ndef get_effects(dataframe):\n    ret_dict = {}\n    for list_ef in dataframe.Effects:\n        effects_list = list_ef.split(',')\n        for effect in effects_list:\n            if not effect in ret_dict:\n                ret_dict[effect] = 1\n            else:\n                ret_dict[effect] += 1\n    return ret_dict","3c6da98c":"#Runing flavors counts to sativas\nsativa_effects = get_effects(sativas)\nsativa_effects = pd.DataFrame.from_dict(sativa_effects,\n                                        orient='index').reset_index().rename(columns={'index': 'effects', \n                                                                                      0:'count'})\n\n# Geting Indicas flavors\nindica_effects = get_effects(indicas)\nindica_effects = pd.DataFrame.from_dict(indica_effects,\n                                        orient='index').reset_index().rename(columns={'index': 'effects', \n                                                                                      0:'count'})\n\n#Getting hibridas flavors\nhibridas_effects = get_effects(hibridas)\nhibridas_effects = pd.DataFrame.from_dict(hibridas_effects,\n                                          orient='index').reset_index().rename(columns={'index': 'effects',\n                                                                                        0:'count'})","00e9457f":"plt.figure(figsize=(16,12))\n\nplt.suptitle('FIRST EFFECTS RELATED BY CANNABIS SPECIIES', fontsize=23)\n\nplt.subplot(131)\ng = sns.barplot(y='effects', x='count', order=sativa_effects.effects.values,\n                data=sativa_effects, orient='h')\ng.set_xlabel(\"Count\", fontsize=12)\ng.set_ylabel(\"Most related Effeects\", fontsize=16)\ng.set_title(\"Sativa Effeects distribution\", fontsize=16)\n\n\nplt.subplot(132)\ng1 = sns.barplot(y='effects', x='count', order=sativa_effects.effects.values,\n                data=indica_effects, orient='h')\ng1.set_xlabel(\"Count\", fontsize=12)\ng1.set_ylabel(\"\",fontsize=12)\ng1.set_title(\"Indica Effeects distribution\", fontsize=16)\n\n\nplt.subplot(133)\ng2 = sns.barplot(y='effects', x='count', order=sativa_effects.effects.values, \n                data=hibridas_effects, orient='h')\nplt.xlabel(\"Count\", fontsize=12)\nplt.ylabel(\"\", fontsize=12)\nplt.title(\"Hibrid Effects distribution\", fontsize=16)\n\nplt.subplots_adjust(wspace = 0.4,top = 0.90)\n\nplt.show()","15b93e0d":"#Creating flavors to cut each flavor by row -- inspired in LiamLarsen --\ndef flavors(df):\n    ret_dict = {}\n    for list_ef in df.Flavor.dropna():\n        flavors_list = list_ef.split(',')\n        for flavor in flavors_list:\n            if not flavor in ret_dict:\n                ret_dict[flavor] = 1\n            else:\n                ret_dict[flavor] += 1\n    return ret_dict","d04011fb":"#Runing flavors counts to sativas\nsativa_flavors = flavors(sativas)\nsativa_flavors = pd.DataFrame.from_dict(sativa_flavors,\n                                        orient='index').reset_index().rename(columns={'index': 'flavors', \n                                                                                      0:'count'})\n\n# Geting Indicas flavors\nindica_flavors = flavors(indicas)\nindica_flavors = pd.DataFrame.from_dict(indica_flavors,\n                                        orient='index').reset_index().rename(columns={'index': 'flavors', \n                                                                                      0:'count'})\n\n#Getting hibridas flavors\nhibridas_flavors = flavors(hibridas)\nhibridas_flavors = pd.DataFrame.from_dict(hibridas_flavors,\n                                          orient='index').reset_index().rename(columns={'index': 'flavors',\n                                                                                        0:'count'})","cdb0fa87":"plt.figure(figsize=(16,14))\nplt.suptitle('FIRST FLAVORS RELATED BY CANNABIS SPECIIES', fontsize=23)\nplt.subplot(131)\ng = sns.barplot(y='flavors', x='count', order=sativa_flavors.flavors.values,\n                data=sativa_flavors, orient='h')\ng.set_xlabel(\"Count\", fontsize=12)\ng.set_ylabel(\"Most related flavors\", fontsize=16)\ng.set_title(\"Sativa flavors distribution\", fontsize=16)\n\n\nplt.subplot(132)\ng1 = sns.barplot(y='flavors', x='count', order=sativa_flavors.flavors.values,\n                data=indica_flavors, orient='h')\ng1.set_xlabel(\"Count\", fontsize=12)\ng1.set_ylabel(\"\",fontsize=12)\ng1.set_title(\"Indica flavors distribution\", fontsize=16)\n\n\nplt.subplot(133)\ng2 = sns.barplot(y='flavors', x='count', order=sativa_flavors.flavors.values,\n                data=hibridas_flavors, orient='h')\nplt.xlabel(\"Count\", fontsize=12)\nplt.ylabel(\"\", fontsize=12)\nplt.title(\"Hibrid flavors distribution\", fontsize=16)\n\nplt.subplots_adjust(wspace = 0.4,top = 0.90)\n\nplt.show()","028abb71":"# geting total words in review\nstrains['count_word'] = strains[\"Description\"].apply(lambda x: len(str(x).split()))\n\n# geting total letters in review\nstrains['count_letters'] = strains[\"Description\"].apply(lambda x: len(str(x)))\n\n# geting mean lenght of words\nstrains[\"mean_word_len\"] = strains[\"Description\"].apply(lambda x: np.mean([len(w) for w in str(x).split()]))","b33ab1df":"plt.figure(figsize=(15,17))\n\ng = plt.subplot(311)\ng = sns.boxplot(x='Rating', y='count_word', \n                hue='Type', data=strains[strains['Rating'] >= 3.5])\ng.set_xlabel(\"Rating\", fontsize=17)\ng.set_ylabel(\"Count Word Distribution\", fontsize=17)\ng.set_title(\"Total Word Distribution by Rating and Species\", \n             fontsize=20)\n\ng1 = plt.subplot(312)\ng1 = sns.boxplot(x='Rating', y='count_letters', \n                 hue='Type', data=strains[strains['Rating'] >= 3.5])\ng1.set_xlabel(\"Rating\", fontsize=17)\ng1.set_ylabel(\"Count Letter Distribution\", fontsize=17)\ng1.set_title(\"Total Letters Distribution by Rating and Species\", \n             fontsize=20)\n\ng2 = plt.subplot(313)\ng2 = sns.boxplot(x='Rating', y='mean_word_len',\n                 hue='Type', data=strains[strains['Rating'] >= 3.5])\ng2.set_xlabel(\"Rating\", fontsize=17)\ng2.set_ylabel(\"Mean Word Len Dist\", fontsize=17)\ng2.set_title(\"Mean Word Len by Rating and Species\", \n             fontsize=20)\n\nplt.subplots_adjust(hspace = 0.4,top = 0.99)\n\nplt.show()","38c2d294":"stopwords = set(STOPWORDS)\nnewStopWords = ['strain','effect', 'genetic', 'effects','flavor',\n                'dominant','known','cross']\nstopwords.update(newStopWords)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          max_words=1500,\n                          max_font_size=200, \n                          width=1000, height=600,\n                          random_state=42,\n                         ).generate(\" \".join(strains['Description'].astype(str)))\n\nfig = plt.figure(figsize = (12,12))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - DESCRIPTION\", fontsize=25)\nplt.axis('off')\nplt.show()","8a1a8442":"stopwords = set(STOPWORDS)\nnewStopWords = ['strain','effect', 'genetic', 'sativa', 'effects',\n                'aroma','flavor','dominant','known','cross','genetics']\nstopwords.update(newStopWords)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          max_words=1500,\n                          max_font_size=200, \n                          width=1000, height=600,\n                          random_state=42,\n                         ).generate(\" \".join(strains[strains.Type == 'sativa']['Description'].astype(str)))\n\nfig = plt.figure(figsize = (12,12))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - SATIVAS\", fontsize=25)\nplt.axis('off')\nplt.show()","05d28560":"stopwords = set(STOPWORDS)\nnewStopWords = ['strain','effect', 'genetic', 'indica', 'effects','aroma', \n                'genetics','flavor','dominant','known','cross']\nstopwords.update(newStopWords)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          max_words=1500,\n                          max_font_size=150, \n                          width=1000, height=600,\n                          random_state=42,\n                         ).generate(\" \".join(strains[strains.Type == 'indica']['Description'].astype(str)))\n\nfig = plt.figure(figsize = (12,12))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - INDICAS\", fontsize=25)\nplt.axis('off')\nplt.show()","90ed49f9":"stopwords = set(STOPWORDS)\nnewStopWords = ['strain','effect', 'genetic', 'hybrid', 'effects', 'aroma',\n                'genetics', 'flavor', 'genetics','cross','dominant','known']\nstopwords.update(newStopWords)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          max_words=1500,\n                          max_font_size=150, \n                          width=1000, height=600,\n                          random_state=42,\n                         ).generate(\" \".join(strains[strains.Type == 'hybrid']['Description'].astype(str)))\n\nfig = plt.figure(figsize = (12,12))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - HYBRIDS\", fontsize=25)\nplt.axis('off')\nplt.show()","39888ed1":"stopwords = set(STOPWORDS)\nnewStopWords = ['strain','effect', 'genetic','effects','cross','genetics',\n                'aroma','consumer','known','dominant']\nstopwords.update(newStopWords)\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          stopwords=stopwords,\n                          max_words=1500,\n                          max_font_size=150, \n                          width=1000, height=600,\n                          random_state=42,\n                         ).generate(\" \".join(strains[strains.Rating == 5]['Description'].astype(str)))\n\nfig = plt.figure(figsize = (12,12))\nplt.imshow(wordcloud)\nplt.title(\"WORD CLOUD - RATING 5\", fontsize=25)\nplt.axis('off')\nplt.show()","08a945bf":"#Transformin the Type in numerical \nstrains[\"Type\"] = pd.factorize(strains[\"Type\"])[0]\ndel strains[\"Description\"]\n# Now we have 3 numerical Types\n# 0 - Hybrid\n# 1 - Sativa\n# 2 - Indica","e5c8313b":"dummy = pd.get_dummies(strains[['Effect_1','Effect_2','Effect_3','Effect_4','Effect_5','Flavor_1','Flavor_2','Flavor_3']])","ae1ab67a":"#Concatenating the result and droping the used variables \nstrains = pd.concat([strains, dummy], axis=1)\n\nstrains = strains.drop(['Strain','Effect_1','Effect_2','Effect_3','Effect_4',\n                        'Effect_5','Flavor_1','Flavor_2','Flavor_3'], axis=1)\n\nstrains.shape","89410dc8":"#Importing the auxiliar and preprocessing librarys \nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.model_selection import train_test_split, KFold, cross_validate\nfrom sklearn.metrics import accuracy_score\n\n#Models\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import RidgeClassifier, SGDClassifier, LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier, BaggingClassifier, VotingClassifier, RandomTreesEmbedding","51572673":"# setting X and y\nX = strains.drop(\"Type\",1)\ny = strains[\"Type\"]\nfeature_name = X.columns.tolist()\nX = X.astype(np.float64, copy=False)\ny = y.astype(np.float64, copy=False)","345e60b6":"#Spliting the variables in train and test \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)\n\nprint(\"X_train Shape: \", X_train.shape)\nprint(\"X_test Shape: \", X_test.shape)","a77c1dae":"thresh = 5 * 10**(-3.5)\nmodel = GradientBoostingClassifier()\nmodel.fit(X_train, y_train)\n#select features using threshold\nselection = SelectFromModel(model, threshold=thresh, prefit=True)\n\nX_important_train = selection.transform(X_train)\nX_important_test = selection.transform(X_test)","083da3eb":"print(\"X_important_train Shape: \", X_important_train.shape)\nprint(\"X_important_test Shape: \", X_important_test.shape)\n","ebb5e359":"clfs = []\nseed = 3\n\nclfs.append((\"LogReg\", \n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"LogReg\", LogisticRegression())])))\n\nclfs.append((\"XGBClassifier\",\n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"XGB\", XGBClassifier())]))) \nclfs.append((\"KNN\", \n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"KNN\", KNeighborsClassifier())]))) \n\nclfs.append((\"DecisionTreeClassifier\", \n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"DecisionTrees\", DecisionTreeClassifier())]))) \n\nclfs.append((\"RandomForestClassifier\", \n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"RandomForest\", RandomForestClassifier())]))) \n\nclfs.append((\"GradientBoostingClassifier\", \n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"GradientBoosting\", GradientBoostingClassifier(max_features=15, n_estimators=150))]))) \n\nclfs.append((\"RidgeClassifier\", \n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"RidgeClassifier\", RidgeClassifier())])))\n\nclfs.append((\"BaggingRidgeClassifier\",\n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"BaggingClassifier\", BaggingClassifier())])))\n\nclfs.append((\"ExtraTreesClassifier\",\n             Pipeline([(\"Scaler\", StandardScaler()),\n                       (\"ExtraTrees\", ExtraTreesClassifier())])))\n\n#'neg_mean_absolute_error', 'neg_mean_squared_error','r2'\nscoring = 'accuracy'\nn_folds = 7\n\nresults, names  = [], [] \n\nfor name, model  in clfs:\n    kfold = KFold(n_splits=n_folds, random_state=seed)\n    cv_results = cross_val_score(model, X_important_train, y_train, cv= 5, scoring=scoring, n_jobs=-1)    \n    names.append(name)\n    results.append(cv_results)    \n    msg = \"%s: %f (+\/- %f)\" % (name, cv_results.mean(),  cv_results.std())\n    print(msg)\n    \n# boxplot algorithm comparison\nfig = plt.figure(figsize=(15,6))\nfig.suptitle('Classifier Algorithm Comparison', fontsize=22)\nax = fig.add_subplot(111)\nsns.boxplot(x=names, y=results)\nax.set_xticklabels(names)\nax.set_xlabel(\"Algorithmn\", fontsize=20)\nax.set_ylabel(\"Accuracy of Models\", fontsize=18)\nax.set_xticklabels(ax.get_xticklabels(),rotation=45)\nplt.show()","b4a48736":"from sklearn.model_selection import GridSearchCV\n\nparams_ridge = {'alpha':[0.001, 0.1, 1.0],\n                'tol':[0.1, 0.01, 0.001], \n                'solver':['auto', 'svd', 'cholesky','lsqr', 'sparse_cg', 'sag', 'saga']}\n\nridge = RidgeClassifier()\n    \nRidge_model = GridSearchCV(estimator = ridge, param_grid=params_ridge, \n                           verbose=1, n_jobs = -1, \n                           cv=5)\n\n# Fit the random search model\nRidge_model.fit(X_important_train, y_train)","36f3bdbf":"# Printing the Training Score\nprint(\"Training score data: \")\nprint(Ridge_model.score(X_important_train, y_train) )\nprint(\"Ridge Best Parameters: \")\nprint(Ridge_model.best_params_ )","1a7182bc":"# Predicting with X_test\nRidge_model = RidgeClassifier(solver='sparse_cg', tol=0.001, alpha=1.0)\nRidge_model.fit(X_important_train, y_train)\ny_pred = Ridge_model.predict(X_important_test)\n\n# Print the results\nprint(accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","2bb528ff":"param_xgb = {\n 'n_estimators':[100,150,200],\n 'max_depth':[3,4,5,6],\n 'min_child_weight':[2,3,4,5],\n 'colsample_bytree':[.1, 0.2, 0.3,0.6,0.7,0.8],\n 'colsample_bylevel':[0.2,0.6,0.8]\n}","cfce9c2c":"xgb = XGBClassifier()\n\nxgb_model = GridSearchCV(estimator = xgb, \n                        param_grid = param_xgb, \n                        scoring='accuracy',\n                        cv=3,\n                        verbose = 1)\n\nxgb_model.fit(X_important_train, y_train)","82770ac0":"print(\"Results of the GridSearchCV of XGB: \")\n\nprint(xgb_model.best_params_)\n\nprint(xgb_model.score(X_important_train, y_train))","a210b3e0":"# let's set the best parameters to our model and fit again\nxgb = XGBClassifier(colsample_bylevel=0.1, colsample_bytree=.8,\n                    objective='multi', max_depth= 4, min_child_weight= 2, \n                    n_estimators= 150)\n\nxgb.fit(X_important_train, y_train)\n\n# Predicting with X_test\ny_pred = xgb.predict(X_important_test)\n\n# Print the results\nprint(\"METRICS \\nAccuracy Score: \", accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","26d9740a":"param_gb = {\n    'n_estimators':[50, 125, 150],\n    'max_depth':[2,3,4],\n    'max_features':[3,4,5,6],\n    'learning_rate':[0.0001, 0.001, 0.01,0.1,1]\n}\n\ngb = GradientBoostingClassifier()\n\ngb_model = GridSearchCV(estimator = gb, \n                        param_grid = param_gb, \n                        scoring='accuracy',\n                        cv=5,\n                        verbose = 1)\n\ngb_model.fit(X_important_train, y_train)","0f963aa5":"print(\"Results of the GridSearchCV of Gradient Boosting Classifier: \")\nprint(gb_model.best_params_)\nprint(gb_model.score(X_important_train, y_train))","0eeb7afd":"gb = GradientBoostingClassifier(learning_rate=.1, max_depth= 3, max_features=3, n_estimators= 150)\ngb.fit(X_important_train, y_train)\n\n# Predicting with X_test\ny_pred = gb.predict(X_important_test)\n\n# Print the results\nprint(\"METRICS \\nAccuracy Score: \", accuracy_score(y_test,y_pred))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","96940572":"# Importing the necessary library\nfrom tpot import TPOTClassifier","22f6104f":"#Creating the model and setting some parameters \ntpot = TPOTClassifier(verbosity=2, max_time_mins=2, \n                      scoring='accuracy', \n                      max_eval_time_mins=2, \n                      memory='auto', generations=5, \n                      population_size=15, random_state=3,\n                      early_stop = 3)\n","350b283b":"# Fitting the Auto TPOTClassifier \ntpot.fit(X_important_train, y_train)\n\n# Evaluating the results\nprint(\"Accuracy is {}%\".format(tpot.score(X_important_test, y_test) * 100))","0332e94d":"<h2>Now, let's check the flavors <br><\/h2>\nI will use the same loop to known the most related flavors","4ea48369":"We can see that ","30839d8e":"## I will select the top 3 models and set some hyperParameters to try increase their prediction power.\n- The top 3 will be:\n -   GradientBoostingClassifier\n -   XGBClassifier\n -   RidgeClassifier","f008667c":"# 5. Sativas effects","ca224df6":"<a id=\"Explore\"><\/a> <br> \n# **4. Data Exploration:** ","61898c3b":"Cool!!! For example, we can note that Indica's with talkative effects, has highest mean than other species.","e6b12d73":"###  will implement an simple TPOTClassifier, just to do a ","891f3714":"Cool! Better value than another models score. \n\nNow lets fit a model with this parameters and them do the prediction","bda62463":"<h2>Some observations:<\/h2>  <br> \nWe can clearly see that Happy, Uplified, Relaxed, Euphoric have a high ranking at all 3 types <br>\n<br>\nIts interesting that almost 350 people of 440 in <b>Sativas<\/b> related Happy and Uplifted Effects <br> \n- 'Happy': 342<br> \n- 'Uplifted': 328<br> \n- 'Euphoric': 276<br> \n- 'Energetic': 268<br> \n\n78% has described Happy to Sativas strains<br>\n \n<b>Indicas<\/b> we have 699 votes and Relaxed with most frequency at distribuition:  <br> \n- 'Relaxed': 628<br> \n- 'Happy': 562<br> \n- 'Euphoric': 516<br> \n- 'Sleepy': 468 <br>\n\n90% has described Relaxed to Indica strains <br>\n\n<b>Hybrids<\/b> We have 1212 votes and distribuition of effects is \n- 'Happy': 967\n- 'Relaxed': 896\n- 'Uplifted': 848\n- 'Euphoric': 843\n\n80% has described Happy and 74% related Relaxed to Hybrids strains <br>\n<b>Very Interesting!<\/b>        \n<br>\nWe also need to remember that's possible to vote in more than 1 effect or flavor in each vote. ","55e0a3fc":"<h1>The first most related effects and respective Rating","d13d8600":"Most frequent flavors in Sativas: <br>\nSweet: 207 <br>\nEarthy: 178 <br>\nCitrus: 143 <br>","86854fab":"Almost all species have rating higher than 4<br>\n\nNow I will Look the distribuition separted by Species","e8781d8c":"<h1>Now let's see the first Flavor related  <\/h1><br>\n- We have 33 flavors in total","217d24f5":"We can se the Effects and Flavors are in separated columns... Now I will explore the main related effects","3fc16ee1":"### Let's fit our automated model and see the output result","5b0ecb85":"### Getting dummy features","d6c3dce7":"    Legend of the prediction\n    - 0 hybrid\n    - 1 sativa\n    - 2 Indica\n\nThis result was better than the Ridge Model. The recall of Hybrids increases and of Sativas decreases in XgBoost model\n\n## Now let's fit and predict with Gradient Boosting Classifier model","a4ced33f":"- We got a nice improvement in our model compared with the first model without HyperParameters.\n\n### Now, let's Predict with this model","03cc64ba":"<h1>We will try understand the data set with questions like this<\/h1>\n- Are the Species distribuition of our dataset equal?\n- The all types of strains have the same rating distribuition?\n- Whats the first word in description to each species? \n- Are the Flavor important to the rating ?\n- Are the Effect important to the rating? \n- Are some difference in Effects and Flavors related by specie? \n\n","a92557a1":"## Feature Selection","a075e18d":"## Distribution of Species (Types)\nWe have 3 principal type of cannabis:\n- Indicas\n- Sativas\n- Hybrid\n","7f0777ce":"NOTE: English is not my first language so sorry for any error. \n","14c1b957":"<h2>Exploring the principal effects and Flavors Related in Rating five strains<\/h2>","c84a04e4":"<h1>Reggae colors looks nice on this dataset LOL :D<\/h1>","7d964566":"cool! We can compare the strains with rating equal 5 to the distribution of the species... <br>\n- 51.55% of hybrids in our dataset, and 48.5% of strains with rating 5.  <br>\n- 18.72% of sativas in our dataset, and 18.10% of strains with rating 5.  <br>\n- 29.73% of indica in our dataset, and 33.33% of strains with rating 5.  <br>\n\nAltought we have similar percentual to each category, maybe we can infer that indica's has a better quality in general. ","510cb5cb":"Not so bad Results! \n\nThe precision of Hybrid and Indica are the same and are higher than Sativa.... In Recall the Hybrid have the highest values. \n\n## Now, I will evaluate the best params to XGBoost model","38364f78":":(\n\n      Legend\n     - 0 hybrid\n     - 1 sativa\n     - 2 Indica\n\nAltough we got a highest score values in Gradient Boosting with train dataset, we got better results in model XGBoosting Classifier that gives the 62.75% of prediction ","ddb281b5":"<h1>The second most related effects and respective Rating","321592f4":"Wow!!! It's a very interesting Chart.<br>\nWe can note that the patterns are differents based on Rating and Types, but it's not so different from each other.<br>\nWould be very interesting to understand it further. <br>\n> Now, let's see the word clouds\n","d73257ab":"# Table of Contents:\n\n**1. [Objective and Introduction](#Introduction)** <br>\n**2. [Librarys](#Librarys)** <br>\n**3. [First Look](#Known)** <br>\n**4. [Explorations](#Explore)** <br>\n**5. [Observations](#Observations)** <br>\n**6. [EDA Flavors and Effects](#FlavandEffect)** <br>\n**7. [Preprocessing](#Preprocess)** <br>\n**8. [Modeling](#Modeling)** <br>\n**9. [Evaluation](#Evaluation)** <br>\n\n<b>Let's start this Analysis.<\/b>\n","544f48da":"\n\n<a id=\"Librarys\"><\/a> <br> \n# **2. Librarys and import:** ","c74fbe49":"<h2>Looking the distribuition of Rating and type by Rating<\/h2>","53ca1790":"<a id=\"Known\"><\/a> <br> \n# **3. Knowning the Data:** ","d8a33e21":"Once your dataset is cleaned and ready to be used, TPOT will help you with the following steps of your ML pipeline:\n- Feature preprocessing\n- Feature construction and selection\n- Model selection\n- Hyperparameter optimization <br>\n\nOnce TPOT is done with its experimentation, it will provide you with the best performing pipeline.\n","4e0236a5":"Most frequent values in indicas <br>\nEarthy: 378 <br>\nSweet: 312 <br>\nPungent: 157 <br> \nBerry: 145 <br>","788d97e9":"\n# **1. Introduction:** <a id=\"Introduction\"><\/a> <br> ","11a3fe2a":"<h2>Sativas Flavors<\/h2>","7d48d688":"## <font color=\"red\">Please, if think the kernel useful <b>UPVOTE<\/b> the kernel and give me your feedback =)<\/font>\n\nLet's start work on this amazing dataset","46199fb0":"The most frequent values in Hybrid type is: <br>\nEarthy: 549<br>\nSweet: 534<br>\nCitrus: 301   <br>","125e3811":"### Concating dummies into principal df","296b14f1":"We have a lot of features, and might could be important to us select the most important features.... So let's try do it. ","04934eb7":"<a id=\"Modeling\"><\/a> <br> \n# **8. Importing Sklearn and Modeling:** ","1a55c843":"## Descriptive Rating by Cannabis Species","7daa7d20":"<h1>Let's explore the Strains with Rating 5","6390be8a":"<a id=\"FlavandEffect\"><\/a> <br> \n# **6. Exploring general Flavors and Effects:** ","74d6fef6":"\n<h3>This exploration wants discover the effects and flavors related to cananbis types. I will use the Rating column as guide to exploration.<\/h3>\n\n<b><h1>Introduction<\/h1><\/b>\n\n<b>Cannabis<\/b>, also known as marijuana among other names,[n 1] is a psychoactive drug from the Cannabis plant intended for medical or recreational use. The main psychoactive part of cannabis is tetrahydrocannabinol (THC); one of 483 known compounds in the plant, including at least 65 other cannabinoids. Cannabis can be used by smoking, vaporizing, within food, or as an extract.\n\nCannabis is often used for its <b>mental and physical effects<\/b>, such as a <b>\"high\" or \"stoned\" <\/b>feeling, a general change in perception, euphoria (heightened mood), and an increase in appetite.Onset of effects is within minutes when smoked, and about 30 to 60 minutes when cooked and eaten.They last for between two and six hours. Short-term side effects may include a decrease in short-term memory, dry mouth, impaired motor skills, red eyes, and feelings of paranoia or anxiety. Long-term side effects may include addiction, decreased mental ability in those who started as teenagers, and behavioral problems in children whose mothers used cannabis during pregnancy. Studies have found a strong relation between cannabis use and the risk of psychosis,though the cause-and-effect relationship is debated.","4f4ebc0c":"# TPOT\n\nTree-Based Pipeline Optimization Tool (TPOT) is using genetic programming to find the best performing ML pipelines, and it is built on top of scikit-learn.\n","26d12e8c":"<h2>Word Cloud Indicas<\/h2>","afd6f617":"TPOT is very user-friendly as it's similar to using scikit-learn's API, so it's very easy to implement an model. ","b1829492":"<h2>Word Cloud Rating 5 Strains<\/h2>","078fa1bf":"<h1>Description - Word Clouds<\/h1>","90d8e909":"Sativa and Indica have a similar rating distribuition, and we can see that almost of all species in dataset have rating higher than 4. <br>\nThe Sativa rating is slightly small than Hybrids and Indicas. ","6409dde7":"<a id=\"Preprocess\"><\/a> <br> \n# **7. Preprocessing dataset:** ","30e37b71":"Now I will Explore the total Effects and Flavors related to each strain","464f174f":"<h2>Word Cloud Sativas<\/h2>","962f086c":"### Encoding the target","9971a1fc":"<b> Curious! <\/b> <br>\nWe can see that in all types, the most related flavors are Sweet and Earthly. <br>\nIs important to remember that we have alot of another flavors that are related with this Sweet and Earthly tastes. <br>\n\nWe can also remember that the first cannabis strain was Skunk #1, that have a high earthly and pungent taste. <br>\n\nThe distribuition total of data set is almost nearly of this values: <br>\n- hybrid    51.55\n- indica    29.73\n- sativa    18.72","895f1220":"Cool!! As more than 50% strains are hybrids we can see that hybrids are dominating almost all ratings values. ","115c4c97":"\nvery interesting and meaningful Word clouds \n","80f679cb":"## Visualizing Rating Distribution by Different Species\n- I think that visualizations are the better way to build a instuition about our data. So Let's plot the distributions by Species. ","7b3bae25":"# Description Feature","f8fc1f66":"# Stay tuned because I will continue improving these models\n## <font color=\"red\">Pleeeease, don't forget to <b>UPVOTE<\/b> the kernel !!! =D <\/font>","ba6a4d2f":"    Legend\n    - 0 hybrid\n    - 1 sativa\n    - 2 Indica","8aadb15f":"Very cool results. Now, let's start modeling","aef264a0":"### I will start by the RidgeClassifier","8fcc0baa":"<h2>Word Cloud Hybrids<\/h2>","9017646d":"# Getting Effects of Strains","4b10dd86":"## Let's take a look at some models and compare their score\n\n- We will explore the models with the best results"}}