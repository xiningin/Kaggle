{"cell_type":{"e98f8506":"code","444126b1":"code","34b14872":"code","05d313ae":"code","8d884727":"code","1630c3a1":"code","97826cd0":"code","4063dd63":"code","a3e702c6":"code","cee2295b":"code","c8b7dbdd":"code","ceaef044":"code","529ab1f3":"code","c18ac697":"code","b4f12123":"code","428cb8b2":"code","f89dbaae":"code","a82c6e9b":"code","7e0381a7":"markdown","dbc308b3":"markdown","3fa4d13a":"markdown","ca71c550":"markdown","1cc86ab1":"markdown","54dacc54":"markdown","1649859a":"markdown","1c959e84":"markdown","c725647a":"markdown","924d58d8":"markdown","9d440618":"markdown"},"source":{"e98f8506":"import numpy as np\nimport pandas as pd\nimport os, sys, gc, time, warnings, pickle, psutil, random\nfrom math import ceil\nfrom sklearn.preprocessing import LabelEncoder\n\nwarnings.filterwarnings('ignore')\npd.set_option(\"display.max_columns\", 500)","444126b1":"#\u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u3092\u8abf\u3079\u308b\u3002\ndef get_memory_usage():\n    process_id   = os.getpid()                #\u81ea\u5206\u306e\u30d7\u30ed\u30bb\u30b9\u756a\u53f7\n    process      = psutil.Process(process_id) #\u30d7\u30ed\u30bb\u30b9\u3092\u6307\u5b9a\n    memory_usage = process.memory_info()[0]\/2. ** 30\n    memory_usage = np.round(memory_usage, 2)\n    return memory_usage\n\n\n#\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u8abf\u6574\u3059\u308b\u3002\ndef sizeof_fmt(num, suffix='B'):\n    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n        if abs(num) < 1024.0:\n            return \"{:3.1f}{unit}{suffix}\".format(num, unit=unit, suffix=suffix)\n        num \/=  1024.0\n    return \"{:.1f}{unit}{suffix}\".format(num, unit='Yi', suffix=suffix)\n\n\n#\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u7bc0\u7d04\u3059\u308b\u3002\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                       df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f} % reduction)'.format(end_mem, (start_mem - end_mem) * 100 \/ start_mem))\n    return df","34b14872":"# 2\u3064\u306edf\u3092\u7e4b\u3052\u308b\u3002\ndef merge_by_concat(df1, df2, merge_on):\n    merged_gf = df1[merge_on]\n    merged_gf = merged_gf.merge(df2, on=merge_on, how='left')\n    new_columns = [col for col in list(merged_gf) if col not in merge_on]\n    df1 = pd.concat([df1, merged_gf[new_columns]], axis=1)\n    return df1","05d313ae":"TARGET = 'sales'         \nEND_TRAIN = 1913         \nMAIN_INDEX = ['id','d'] ","8d884727":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\ntrain_df    = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nprices_df   = pd.read_csv('..\/input\/m5-forecasting-accuracy\/sell_prices.csv')\ncalendar_df = pd.read_csv('..\/input\/m5-forecasting-accuracy\/calendar.csv')","1630c3a1":"# train_df\u3092melt\u3059\u308b\u3002\nindex_columns = ['id','item_id','dept_id','cat_id','store_id','state_id']\ngrid_df = pd.melt(train_df, \n                  id_vars = index_columns, \n                  var_name = 'd', \n                  value_name = TARGET)\nprint('Train rows: {} to {} '.format(len(train_df), len(grid_df)))\n\n\n# predict\u7528\u306e\u30011914\u65e5\u76ee\u304b\u30891942\u65e5\u76ee\u306erow\u3092\u8ffd\u52a0\u3002\nadd_grid = pd.DataFrame()\nfor i in range(1,29):\n    temp_df = train_df[index_columns]\n    temp_df = temp_df.drop_duplicates()\n    temp_df['d'] = 'd_'+ str(END_TRAIN+i)\n    temp_df[TARGET] = np.nan\n    add_grid = pd.concat([add_grid,temp_df])\n\ngrid_df = pd.concat([grid_df,add_grid])\ngrid_df = grid_df.reset_index(drop=True)\n\n\n# \u30e1\u30e2\u30ea\u306e\u7bc0\u7d04\u306e\u305f\u3081\u3001\u2460\u4eca\u5f8c\u4f7f\u308f\u306a\u3044df\u3092\u524a\u9664\u3002\u2461columns\u306etype: 'object' \u2192 'category'\u306b\u5909\u66f4\ndel temp_df, add_grid, train_df\n\nprint(\"{:>20}: {:>8}\".format('Original grid_df',sizeof_fmt(grid_df.memory_usage(index=True).sum())))\nfor col in index_columns:\n    grid_df[col] = grid_df[col].astype('category')\nprint(\"{:>20}: {:>8}\".format('Reduced grid_df',sizeof_fmt(grid_df.memory_usage(index=True).sum())))","97826cd0":"# \u5404\u5e97\u8217\u3067\u306e\u5404\u5546\u54c1\u306e\u767a\u58f2\u65e5(release)\u3092\u8abf\u3079\u308b\u3002\nrelease_df = prices_df.groupby(['store_id', 'item_id'])['wm_yr_wk'].agg(['min']).reset_index()\nrelease_df.columns = ['store_id', 'item_id', 'release']\ngrid_df = merge_by_concat(grid_df, release_df, ['store_id','item_id'])\ndel release_df\n\n\n# release\u3088\u308a\u524d\u306e\u60c5\u5831\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3001\u524a\u9664\u3059\u308b\u3002\ngrid_df = merge_by_concat(grid_df, calendar_df[['wm_yr_wk', 'd']], ['d'])\ngrid_df = grid_df[grid_df['wm_yr_wk']>=grid_df['release']]\ngrid_df = grid_df.reset_index(drop=True)\n\n\n# release\u30ab\u30e9\u30e0\u306f\u3001\u5dee\u5206\u3060\u3051\u4fdd\u6301\u3059\u308b\u3053\u3068\u3067\u3001\u30e1\u30e2\u30ea\u3092\u7bc0\u7d04\u3059\u308b\u3002\nprint(\"{:>20}: {:>8}\".format('Original grid_df',sizeof_fmt(grid_df.memory_usage(index=True).sum())))\ngrid_df['release'] = grid_df['release'] - grid_df['release'].min()\ngrid_df['release'] = grid_df['release'].astype(np.int16)\nprint(\"{:>20}: {:>8}\".format('Reduced grid_df',sizeof_fmt(grid_df.memory_usage(index=True).sum())))","4063dd63":"grid_df.to_pickle('grid_part_1.pkl')\nprint('Size:', grid_df.shape)","a3e702c6":"prices_df['price_max']     = prices_df.groupby(['store_id','item_id'])['sell_price'].transform('max')\nprices_df['price_min']     = prices_df.groupby(['store_id','item_id'])['sell_price'].transform('min')\nprices_df['price_std']     = prices_df.groupby(['store_id','item_id'])['sell_price'].transform('std')\nprices_df['price_mean']    = prices_df.groupby(['store_id','item_id'])['sell_price'].transform('mean')\nprices_df['price_norm']    = prices_df['sell_price']\/prices_df['price_max']\nprices_df['price_nunique'] = prices_df.groupby(['store_id','item_id'])['sell_price'].transform('nunique')\nprices_df['item_nunique']  = prices_df.groupby(['store_id','sell_price'])['item_id'].transform('nunique')\n\n# \u77ac\u9593\u306e\u3001\u6708\u6bce\u306e\u3001\u5e74\u6bce\u306e\u3001\u4fa1\u683c\u306e\u5909\u52d5\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u52a0\u3048\u305f\u3044\u3002\u305d\u306e\u305f\u3081\u306b\u3001calendar_df\u304b\u3089\u3001month, year\u3092\u6301\u3063\u3066\u304f\u308b\u3002\ncalendar_prices = calendar_df[['wm_yr_wk','month','year']]\ncalendar_prices = calendar_prices.drop_duplicates(subset=['wm_yr_wk'])\nprices_df = prices_df.merge(calendar_prices[['wm_yr_wk','month','year']], on=['wm_yr_wk'], how='left')\ndel calendar_prices\n\nprices_df['price_momentum']   = prices_df['sell_price']\/prices_df.groupby(['store_id','item_id'])['sell_price'].transform(lambda x: x.shift(1))\nprices_df['price_momentum_m'] = prices_df['sell_price']\/prices_df.groupby(['store_id','item_id','month'])['sell_price'].transform('mean')\nprices_df['price_momentum_y'] = prices_df['sell_price']\/prices_df.groupby(['store_id','item_id','year'])['sell_price'].transform('mean')\n\ndel prices_df['month'], prices_df['year']","cee2295b":"original_columns = list(grid_df)\ngrid_df = grid_df.merge(prices_df, on=['store_id','item_id','wm_yr_wk'], how='left')\nkeep_columns = [col for col in list(grid_df) if col not in original_columns]\ngrid_df = grid_df[MAIN_INDEX + keep_columns]\ngrid_df = reduce_mem_usage(grid_df)\ngrid_df.to_pickle('grid_part_2.pkl')\nprint('Size:', grid_df.shape)\ndel prices_df","c8b7dbdd":"grid_df = pd.read_pickle('grid_part_1.pkl')","ceaef044":"grid_df = grid_df[MAIN_INDEX]\n\n\n# merge\nicols = ['date',\n         'd',\n         'event_name_1',\n         'event_type_1',\n         'event_name_2',\n         'event_type_2',\n         'snap_CA',\n         'snap_TX',\n         'snap_WI']\ngrid_df = grid_df.merge(calendar_df[icols], on=['d'], how='left')\n\n\n# \u30e1\u30e2\u30ea\u306e\u7bc0\u7d04\nicols = ['event_name_1',\n         'event_type_1',\n         'event_name_2',\n         'event_type_2',\n         'snap_CA',\n         'snap_TX',\n         'snap_WI']\nfor col in icols:\n    grid_df[col] = grid_df[col].astype('category')\n    \n    \n# \u65b0\u3057\u3044\u7279\u5fb4\u91cf\u306e\u4f5c\u6210\ngrid_df['date']  = pd.to_datetime(grid_df['date'])\ngrid_df['tm_d']  = grid_df['date'].dt.day.astype(np.int8)\ngrid_df['tm_w']  = grid_df['date'].dt.week.astype(np.int8)\ngrid_df['tm_m']  = grid_df['date'].dt.month.astype(np.int8)\ngrid_df['tm_y']  = grid_df['date'].dt.year\ngrid_df['tm_y']  = (grid_df['tm_y'] - grid_df['tm_y'].min()).astype(np.int8)\ngrid_df['tm_wm'] = grid_df['tm_d'].apply(lambda x: ceil(x\/7)).astype(np.int8) #\u6708\u306e\u4f55\u5468\u76ee\u304b\u30027\u65e5:1\u5468\u76ee\u30018\u65e5:\uff12\u5468\u76ee\ngrid_df['tm_dw'] = grid_df['date'].dt.dayofweek.astype(np.int8) #\u66dc\u65e5\u3002\u6708\u66dc\u65e5:0\u3001\u65e5\u66dc\u65e5:6\ngrid_df['tm_w_end'] = (grid_df['tm_dw']>=5).astype(np.int8) #\u9031\u672b\u304b\u3069\u3046\u304b\u3002\u795d\u65e5\u3082\u52a0\u3048\u305f\u3044\u3002\n\ndel grid_df['date']  ","529ab1f3":"grid_df.to_pickle('grid_part_3.pkl')\nprint('Size:', grid_df.shape)\n\ndel calendar_df, grid_df","c18ac697":"# \u30d1\u30fc\u30c81\u306e\u30e1\u30e2\u30ea\u3092\u3055\u3089\u306b\u6e1b\u3089\u3059\u3002\ngrid_df = pd.read_pickle('grid_part_1.pkl')\ngrid_df['d'] = grid_df['d'].apply(lambda x: x[2:]).astype(np.int16)\n\ndel grid_df['wm_yr_wk']\ngrid_df.to_pickle('grid_part_1.pkl')\n\ndel grid_df","b4f12123":"grid_df = pd.concat([pd.read_pickle('grid_part_1.pkl'),\n                     pd.read_pickle('grid_part_2.pkl').iloc[:,2:],\n                     pd.read_pickle('grid_part_3.pkl').iloc[:,2:]],\n                     axis=1)\n\nprint(\"{:>20}: {:>8}\".format('Full Grid',sizeof_fmt(grid_df.memory_usage(index=True).sum())))\nprint('Size', grid_df.shape)","428cb8b2":"# 2.4GB\u306f\u5b66\u7fd2\u306b\u6271\u3046\u306e\u306b\u5927\u304d\u3059\u304e\u308b\u3002\n# state_id, shop_id\u3067\u533a\u5207\u3063\u3066\u3001\u5b66\u7fd2\u3059\u308c\u3070\u3001\u3088\u308a\u30e1\u30e2\u30ea\u3092\u6e1b\u3089\u305b\u308b\u3002\n\nstate_id = 'CA'\ngrid_df = grid_df[grid_df['state_id']==state_id]\nprint(\"{:>20}: {:>8}\".format('Full Grid',sizeof_fmt(grid_df.memory_usage(index=True).sum())))\n\nstore_id = 'CA_1'\ngrid_df = grid_df[grid_df['store_id']==store_id]\nprint(\"{:>20}: {:>8}\".format('Full Grid',sizeof_fmt(grid_df.memory_usage(index=True).sum())))","f89dbaae":"grid_df.head()","a82c6e9b":"grid_df.info()","7e0381a7":"# train\u30c7\u30fc\u30bf\u306e\u6574\u5f62\u3068\u4fdd\u5b58\n","dbc308b3":"# \u95a2\u6570\u306e\u5b9a\u7fa9\n- \u30e1\u30e2\u30ea\u3092\u6271\u3046\u95a2\u6570\n    - get_memory_usage: \u30e1\u30e2\u30ea\u306e\u4f7f\u7528\u91cf\u3092\u8abf\u3079\u308b\u3002\n    - sizeof_fmt: \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u306e\u5358\u4f4d\u3092\u8abf\u6574\u3059\u308b\u3002\n    - reduce_mem_usage: \u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u7bc0\u7d04\u3059\u308b\u3002\n- dataframe\u306e\u7d50\u5408\u3092\u6271\u3046\u95a2\u6570\n    - merge_by_concat: 2\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7d50\u5408\u3059\u308b\u3002\u30ab\u30e9\u30e0\u3092\u5897\u3084\u3059\u30a4\u30e1\u30fc\u30b8\u3002\n","3fa4d13a":"# \u5b9a\u6570\u306e\u8a2d\u5b9a\u3068\u3001\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n","ca71c550":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","1cc86ab1":"https:\/\/www.kaggle.com\/kyakovlev\/m5-simple-fe \u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002","54dacc54":"### \u30d1\u30fc\u30c82: prices\u30c7\u30fc\u30bf\u3092merge\u3059\u308b\u3002\n\u30e1\u30e2\u30ea\u304c\u30ae\u30ea\u30ae\u30ea\u306a\u306e\u3067\u3001\u5fc5\u8981\u6700\u4f4e\u9650\u306e\u30ab\u30e9\u30e0\u3060\u3051\u4fdd\u6301\u3057\u3066\u4fdd\u5b58\u3002\u6700\u5927\u306715.5GB\u304f\u3089\u3044\u307e\u3067\u3044\u304f\u3002","1649859a":"- id                  \n    - item_id             \n        - dept_id             \n        - cat_id              \n    - store_id            \n        - state_id            \n- d                   \n- sales               :target\u3001\u58f2\u308a\u4e0a\u3052\n- release             :\u767a\u58f2\u3055\u308c\u3066\u304b\u3089\u306e\u671f\u9593(\u9031)\n- sell_price          :\u5024\u6bb5\n    - price_max           \n    - price_min           \n    - price_std           \n    - price_mean          \n    - price_norm      :sell_price \/ price_max\u3002\u5024\u6bb5\u304c\u4e00\u756a\u9ad8\u3044\u6642\u3068\u6bd4\u3079\u305f\u6642\u306e\u6bd4\u7387\u3002\n    - price_nunique   :\u305d\u306e\u304a\u5e97\u306e\u3001\u305d\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u3001\u671f\u9593\u4e2d\u306e\u3001\u5024\u6bb5\u306e\u500b\u6570\n    - item_nunique    :\u305d\u306e\u5024\u6bb5\u306e\u3001\u305d\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u3001\u671f\u9593\u4e2d\u306e\u3001\u30a2\u30a4\u30c6\u30e0\u306e\u500b\u6570\n    - price_momentum      :sell_price \/ \u6628\u65e5\u306esell_price\n    - price_momentum_m    :sell_price \/ 1\u30f6\u6708\u306esell_price\u306e\u5e73\u5747\n    - price_momentum_y    :sell_price \/ 1\u5e74\u306esell_price\u306e\u5e73\u5747\n- event_name_1        category\n- event_type_1        category\n- event_name_2        category\n- event_type_2        category\n- snap_CA             category\n- snap_TX             category\n- snap_WI             category\n    - tm_d                :\u65e5\u306b\u3061\n    - tm_w                :\u305d\u306e\u5e74\u306e\u3001\u9031\u76ee\n    - tm_m                :\u6708\n    - tm_y                :\u5e74\n    - tm_wm               :\u6708\u306e\u4f55\u5468\u76ee\u304b\u30027\u65e5:1\u5468\u76ee\u30018\u65e5:\uff12\u5468\u76ee\n    - tm_dw               :\u66dc\u65e5\u3002\u6708\u66dc\u65e5:0\u3001\u65e5\u66dc\u65e5:6\n    - tm_w_end            :\u9031\u672b\u304b\u3069\u3046\u304b\u3002\u795d\u65e5\u3082\u52a0\u3048\u305f\u3044\u3002","1c959e84":"### \u30d1\u30fc\u30c81: train\u30c7\u30fc\u30bf\u3092melt\u3057\u3066\u3001release\u3088\u308a\u524d\u306e\u60c5\u5831\u306f\u3001\u5fc5\u8981\u306a\u3044\u305f\u3081\u524a\u9664\u3059\u308b\u3002","c725647a":"### \u30d1\u30fc\u30c83: calendar\u30c7\u30fc\u30bf\u3092merge\u3059\u308b\u3002","924d58d8":"### \u30d1\u30fc\u30c8\u304a\u307e\u3051: \u3055\u3089\u306b\u30e1\u30e2\u30ea\u3092\u7bc0\u7d04\u3059\u308b\u3002","9d440618":"# \u307e\u3068\u3081"}}