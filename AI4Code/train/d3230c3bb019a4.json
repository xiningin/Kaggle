{"cell_type":{"927545ec":"code","909535d7":"code","8b610160":"code","27e209e0":"code","afdee2d8":"code","d73cb361":"code","e5ea8d62":"code","170d5d48":"code","3f71f2f5":"markdown"},"source":{"927545ec":"import pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport gc\n\nfrom sklearn.model_selection import KFold\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras import *\nfrom tensorflow.keras.callbacks import *","909535d7":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ntrain","8b610160":"train = train.drop(columns = 'id')\ntest = test.drop(columns = 'id')","27e209e0":"train['RC_sum'] = train['R'] + train['C']\ntrain['RC_div'] = train['R'] \/ train['C']\ntrain['u_in_cumsum'] = (train['u_in']).groupby(train['breath_id']).cumsum()\ntrain['time_lag'] = train['time_step'].shift(1).fillna(0)\ntrain['u_in_lag'] = train['u_in'].shift(1).fillna(0)\ntrain['u_out_lag'] = train['u_out'].shift(1).fillna(0)\ntrain['time_lag'] = train['time_step'].shift(2).fillna(0)\n\ntest['RC_sum'] = test['R'] + test['C']\ntest['RC_div'] = test['R'] \/ test['C']\ntest['u_in_cumsum'] = (test['u_in']).groupby(test['breath_id']).cumsum()\ntest['time_lag'] = test['time_step'].shift(1).fillna(0)\ntest['u_in_lag'] = test['u_in'].shift(1).fillna(0)\ntest['u_out_lag'] = test['u_out'].shift(1).fillna(0)\ntest['time_lag'] = test['time_step'].shift(2).fillna(0)\n\ntrain['R'] = train['R'].astype(str)\ntrain['C'] = train['C'].astype(str)\n\ntest['R'] = test['R'].astype(str)\ntest['C'] = test['C'].astype(str)\n\ntrain = pd.get_dummies(train)\ntest = pd.get_dummies(test)\n\ny = train['pressure'].to_numpy().reshape(-1, 80)\n\ntrain.drop(columns = ['pressure', 'breath_id'], inplace = True)\ntest.drop(columns = 'breath_id', inplace = True)","afdee2d8":"from sklearn.preprocessing import RobustScaler\n\nrb = RobustScaler()\n\nrb.fit(train)\ntrain2 = rb.transform(train)\ntest2 = rb.transform(test)","d73cb361":"train3 = train2.reshape(75450, 80, 15)\ntest3 = test2.reshape(50300, 80, 15)\n\ndel train, test, train2, test2, rb\ngc.collect","e5ea8d62":"kf = KFold(n_splits=5, shuffle=True, random_state=42)\n\ntest_preds = []\n\nfor fold, (train_idx, test_idx) in enumerate(kf.split(train3, y)):\n    X_train, X_valid = train3[train_idx], train3[test_idx]\n    y_train, y_valid = y[train_idx], y[test_idx]\n    \n    scheduler = tf.keras.optimizers.schedules.ExponentialDecay(1e-3, 200*((len(train3)*0.8)\/1024), 1e-5)\n    \n    model = Sequential([\n        Input(shape=(80, 15)),\n        Bidirectional(LSTM(200, return_sequences=True)),\n        Bidirectional(LSTM(150, return_sequences=True)),\n        Bidirectional(LSTM(100, return_sequences=True)),\n        Dense(100, activation='relu'),\n        Dropout(0.2),\n        Dense(1),\n    ])\n    \n    model.compile(optimizer=\"adam\", loss=\"mae\")\n    model.fit(X_train, y_train, validation_data=(X_valid, y_valid), epochs=200, batch_size = 512, callbacks = [tf.keras.callbacks.LearningRateScheduler(scheduler)])\n\n    test_preds.append(model.predict(test3).squeeze().reshape(-1, 1).squeeze())\n    \n    del X_train, X_valid, y_train, y_valid, model\n    gc.collect()","170d5d48":"submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nsubmission[\"pressure\"] = sum(test_preds)\/5\nsubmission.to_csv('submission.csv', index=False)\nsubmission","3f71f2f5":"# LSTM Model with using Tensorflow"}}