{"cell_type":{"c31915b6":"code","bf372171":"code","8fe56fcc":"code","0240ad87":"code","016ab034":"code","d4490df1":"code","d7bd4596":"code","f840ac08":"code","00ae5db7":"code","0de42b4b":"code","2db60f8c":"code","1941dee7":"code","a7463ffa":"code","8961826c":"code","a07df999":"code","b47b3b6e":"code","7e1d22b9":"code","1ab3147d":"code","33b952b8":"code","1985c03c":"code","6b9bcc3a":"code","e0f31005":"code","625e97ee":"code","405ba339":"code","8a480a1d":"code","4327ebe6":"code","bb88b400":"code","99b3152c":"code","cf8fc174":"code","3dbe03c4":"code","e47ff392":"code","d7766bba":"code","9d92f5d3":"code","5e5a10ee":"code","4c147e52":"code","bcadb5ba":"code","d9c8e82e":"code","70f5bd45":"code","efa5f413":"code","a55b8786":"code","848e3450":"code","d3a32819":"code","f81a85f5":"code","4c06af0a":"code","9ccb410b":"code","309594c7":"code","b64299c6":"code","dedc52fe":"code","fd0e9aef":"code","82e84cfe":"code","be095a05":"code","46d5fe2a":"code","4b055033":"code","8a50c2d3":"code","c102fb99":"code","7d7ccf45":"code","292b1395":"code","d9872970":"code","8bbd4f18":"code","21080273":"code","de7608d4":"code","73403dac":"code","94166113":"code","76b6018b":"code","2f612323":"code","da199cd2":"code","a2e4c116":"code","dc5ef7e5":"code","52558696":"code","56c7b212":"code","863f4102":"code","7b81047c":"code","ac5a8d0b":"code","60c6de6b":"code","62e67d32":"code","b89cf9a0":"code","e8047099":"code","3c482bf3":"code","42c98fba":"code","393478d0":"code","208f80f9":"code","5ba8ff5e":"code","6787da59":"code","bf25ae87":"code","35154057":"code","1d215541":"code","8c9f9f78":"code","a1acf17d":"code","4fc49a51":"code","cf0261ce":"code","24e79751":"code","46314545":"code","34c03f97":"code","d09cb919":"code","d562f598":"code","ceb3ee41":"code","bbcc7ed5":"code","d879ea30":"code","8484a1f2":"code","b0e7b740":"code","e4d958b7":"code","4aeaffec":"code","2acad411":"code","72f2c771":"code","6f356eee":"code","a83b58d6":"code","101ad00c":"code","ac1827b0":"code","fa2f1f7b":"code","fef367d2":"code","410fd65c":"code","c0419825":"code","58986055":"code","5dde2d33":"code","30dccae4":"code","bb705073":"code","d2e520a0":"code","6a4274e8":"code","3846e633":"code","9d178da0":"code","e8a603f1":"code","a01c0e7c":"code","d9b67fa4":"code","d7b5f389":"code","6ed2b2d9":"markdown","588ee85a":"markdown","2813d7b1":"markdown","732d865e":"markdown","cab0e155":"markdown","da9d6a0b":"markdown","646e9db0":"markdown","edbdec99":"markdown","bbf2add6":"markdown","d4e157fd":"markdown","08f28749":"markdown","64f6baf0":"markdown","f9b022a0":"markdown","d6256c86":"markdown","e8e74907":"markdown","b091960f":"markdown","a90ffc5e":"markdown","51e79c2b":"markdown","6685061b":"markdown","1861cbd5":"markdown","526cb1a2":"markdown","c54a1fd1":"markdown","c43aa097":"markdown","7bf7fe93":"markdown","26577770":"markdown"},"source":{"c31915b6":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt","bf372171":"df=pd.read_csv(\"..\/input\/usedcar-price-prediction\/Used car-Train.csv\")\ndf_test=pd.read_csv(\"..\/input\/usedcar-price-prediction\/Used car-Test.csv\")\ndf.shape,df_test.shape","8fe56fcc":"df.tail()","0240ad87":"df.isnull().sum()","016ab034":"df_test.isnull().sum()","d4490df1":"df.drop('New_Price',axis=1,inplace=True)\ndf","d7bd4596":"df.drop(['Unnamed: 0'],axis=1,inplace=True)\ndf_test.drop(['Unnamed: 0'],axis=1,inplace=True)","f840ac08":"df_test.shape,df.shape","00ae5db7":"df['Fuel_Type'].value_counts()","0de42b4b":"df['Transmission'].value_counts()","2db60f8c":"df['Owner_Type'].value_counts()","1941dee7":"df['Seats'].value_counts()","a7463ffa":"df[df['Seats']==0]","8961826c":"df[df['Mileage']=='0.0 kmpl']\n","a07df999":"df[(df['Power'].isnull())]","b47b3b6e":"df.loc[(df['Power'].isnull()),'Power']='0 bhp'\ndf[(df['Power']=='0 bhp')]","7e1d22b9":"df[(df['Power']=='0 bhp')]","1ab3147d":"df[(df['Mileage'].isnull())]","33b952b8":"df[(df['Engine'].isnull())]","1985c03c":"df.loc[(df['Engine'].isnull()),'Engine']='0 CC'\ndf[(df['Engine']=='0 CC')]","6b9bcc3a":"df.shape","e0f31005":"#  SPlitting the data so as to convert it to float\nlist1=['Mileage','Engine','Power']\nfor j in list1:\n    list2=[]\n    for i in df[j]:\n        i=i.split(\" \")[0]\n        if(i=='null' or i=='0.0'):\n            i='0'\n        list2.append(i)\n    df[j]=list2 \n","625e97ee":"df[(df['Mileage'].isnull())]","405ba339":"df[(df['Engine']=='0') | (df['Mileage']=='0')]","8a480a1d":"df.info()","4327ebe6":"df_test.info()","bb88b400":"# Lets convert Mileage,Engine and Power  to float64\nfor i in list1:      \n    df[i]=df[i].astype(float)\n","99b3152c":"# Combining test and train to df_combine an dthen performing null value imputation","cf8fc174":"df_combine=pd.concat([df,df_test],axis=0,sort=False)","3dbe03c4":"df_combine.head()","e47ff392":"df_combine=df_combine.reset_index()\ndf_combine.drop('index',axis=1,inplace=True)\ndf_combine","d7766bba":"df_combine.info()","9d92f5d3":"# Based on Engine we are imputing Mileage and Power wwith median value\nvalues=dict(list(df_combine.groupby('Engine')))\nfor i in values:\n    df2=pd.DataFrame()\n    df2=values[i]\n    df_combine.loc[(df_combine['Engine']==i) & (df_combine['Mileage']==0),'Mileage']=df2['Mileage'].median()\n\n\nfor i in values:\n    df2=pd.DataFrame()\n    df2=values[i]\n    df_combine.loc[(df_combine['Engine']==i) & (df_combine['Power']==0.0),'Power']=df2['Power'].median()","5e5a10ee":"# We have missing values for  power and Mileage yet and we have to impute for Engine as well","4c147e52":"df_combine[(df_combine['Power']==0.0)]","bcadb5ba":"df_combine[(df_combine['Mileage']==0.0)]","d9c8e82e":"df_combine[(df_combine['Engine']==0)]","70f5bd45":"# Manually imputing few values\n\ndf_combine.loc[(df_combine['Name']=='Mahindra Jeep MM 540 DP')  & (df_combine['Power']==0.0),'Power']=62\ndf_combine.loc[(df_combine['Name']=='Skoda Superb 3.6 V6 FSI')  & (df_combine['Mileage']==0.0),'Mileage']=7\ndf_combine.loc[(df_combine['Name']=='Porsche Cayman 2009-2012 S tiptronic')  & (df_combine['Power']==0.0),'Power']=325\ndf_combine.loc[(df_combine['Name']=='Maruti 1000 AC')  & (df_combine['Power']==0.0),'Power']=37\ndf_combine.loc[(df_combine['Name']=='Audi A4 3.2 FSI Tiptronic Quattro')  & (df_combine['Power']==0.0),'Power']=255\ndf_combine.loc[(df_combine['Name']=='Mahindra Jeep MM 540 DP')  & (df_combine['Power']==0.0),'Power']=62\ndf_combine.loc[(df_combine['Name']=='Mahindra Jeep MM 540 DP')  & (df_combine['Mileage']==0.0),'Mileage']=18\ndf_combine.loc[(df_combine['Name']=='Porsche Cayman 2009-2012 S')  & (df_combine['Power']==0.0),'Power']=315\ndf_combine.loc[(df_combine['Name']=='Fiat Siena 1.2 ELX')  & (df_combine['Power']==0.0),'Power']=57\ndf_combine.loc[(df_combine['Name']=='Nissan Teana 230jM')  & (df_combine['Power']==0.0),'Power']=179.5\ndf_combine.loc[(df_combine['Name']=='Fiat Petra 1.2 EL')  & (df_combine['Power']==0.0),'Power']=57\ndf_combine.loc[(df_combine['Name']=='Skoda Superb 3.6 V6 FSI')  & (df_combine['Mileage']==0.0),'Mileage']=7\ndf_combine.loc[(df_combine['Name']=='Maruti Swift 1.3 VXi')  & (df_combine['Engine']==0.0),'Engine']=1248\ndf_combine.loc[(df_combine['Name']=='Maruti Swift 1.3 VXi')  & (df_combine['Power']==0.0),'Power']=74\n\n\n# df_combine.loc[(df_combine['Name']=='Audi A4 3.2 FSI Tiptronic Quattro')  & (df_combine['Seats']==0.0),'Seats']=\"5.0\"","efa5f413":"df_combine[(df_combine['Engine']==0) | (df_combine['Mileage']==0) | (df_combine['Power']==0)]","a55b8786":"# df_combine.loc[df_combine['Mileage']==0,'Mileage']=df_combine['Mileage'].median()\n# df_combine.loc[df_combine['Power']==0,'Power']=df_combine['Power'].median()","848e3450":"df_combine.info()","d3a32819":"# Imputing for Seats","f81a85f5":"df_combine.loc[(df_combine['Seats']==0),'Seats']=df_combine['Seats'].mode()","4c06af0a":"df_combine[df_combine['Seats']==0]","9ccb410b":"df=df_combine.loc[0:6018,:].copy(deep=True)\ndf_test=df_combine.loc[6019:].copy(deep=True)","309594c7":"sns.distplot(df['Price'])","b64299c6":"from scipy.stats import boxcox\ndf['Price'],lambda_value=boxcox(df['Price'])","dedc52fe":"sns.distplot(df['Price'])","fd0e9aef":"df['Price'].skew()","82e84cfe":"sns.boxplot(df['Price'])","be095a05":"df['Price'].describe()","46d5fe2a":"Q1=1.137597\nQ3=1.929845\nIQR=Q3-Q1\nv1=Q1-1.5*IQR\nv2=Q3+1.5*IQR","4b055033":"df[df['Price']<=v1]","8a50c2d3":"df[df['Price']>=v2]","c102fb99":"cat=[\"Transmission\",\"Fuel_Type\",'Owner_Type','Seats']\nfor i in cat:\n    sns.boxplot(df[i],df['Price'])\n    plt.show()","7d7ccf45":"# We have to predict the price of the car based on following features Year,Kilometers_Driven,Fuel_Type,Transmission,Owner_Type,Mileage,Engine,Power,Seats rather than name and Location\n# Hence Droping name and Location column.","292b1395":"df_combine.drop(['Name','Location'],axis=1,inplace=True)\ndf.drop(['Name','Location'],axis=1,inplace=True)\ndf_test.drop(['Name','Location'],axis=1,inplace=True)\n","d9872970":"df.head()","8bbd4f18":"df_test.head()","21080273":"df['Seats']=df['Seats'].astype(object)\ndf_test['Seats']=df_test['Seats'].astype(object)\ndf_combine['Seats']=df_combine['Seats'].astype(object)\n","de7608d4":"#df_original 'y' variable has no transformation done\ndf_original=df_combine.loc[0:6018,:]\ndf_test_original=df_combine.loc[6019:]","73403dac":"plt.figure(figsize=(20,10))\nplt.xticks(rotation=90)\nplt.xticks(np.arange(1998,2020))\nsns.scatterplot(df['Year'],df['Price'],hue=df['Owner_Type'])","94166113":"plt.figure(figsize=(20,10))\nplt.xticks(np.arange(1998,2020))\nplt.yticks(np.arange(0,180,10))\nsns.boxplot(df['Year'],df['Price'],hue=df['Owner_Type'])","76b6018b":"plt.figure(figsize=(10,5))\nsns.boxplot(df['Owner_Type'],df['Price'],hue=df['Fuel_Type'])","2f612323":"plt.figure(figsize=(10,5))\nsns.boxplot(df['Price'],df['Transmission'])","da199cd2":"plt.figure(figsize=(10,5))\nplt.xticks(rotation=90)\nsns.scatterplot(df['Engine'],df['Price'],hue=df['Transmission'])","a2e4c116":"km1=df_original[df_original['Transmission']=='Manual']\nplt.figure(figsize=(10,5))\nplt.xticks(rotation=90)\nplt.yticks(np.arange(0,170,5))\nplt.xticks(np.arange(0,600,10))\nsns.scatterplot(km1['Power'],km1['Price'])","dc5ef7e5":"km2=df_original[df_original['Transmission']=='Automatic']\n# km2[km2['Kilometers_Driven']>6000000]\nkm2.drop(index=60,inplace=True)\nplt.figure(figsize=(20,10))\nplt.xticks(rotation=90)\nplt.yticks(np.arange(0,170,5))\nplt.xticks(np.arange(0,700,10))\n\nsns.scatterplot(km2['Power'],km2['Price'])","52558696":"df_combine=pd.concat([df,df_test],axis=0,sort=False)","56c7b212":"df_dummies=pd.get_dummies(df_combine[[\"Transmission\",\"Fuel_Type\",'Owner_Type','Seats']],drop_first=True)\ndf_final=pd.concat([df_dummies,df_combine],axis=1)\ndf_final.drop([\"Transmission\",\"Fuel_Type\",'Owner_Type','Seats'],axis=1,inplace=True)","863f4102":"df_final.shape","7b81047c":"\ndf=df_final.loc[0:6018,:].copy(deep=True)\ndf_test=df_final.loc[6019:].copy(deep=True)","ac5a8d0b":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot=True)","60c6de6b":"df.corr()['Price']","62e67d32":"from sklearn.preprocessing import StandardScaler\nX=df.drop('Price',axis=1)\ny=df['Price']\nstd=StandardScaler()\ndf1=std.fit_transform(X)\ndf_multi_scaled=pd.DataFrame(df1,columns=X.columns)\ndf_multi_scaled.head()","b89cf9a0":"df_test.drop('Price',axis=1,inplace=True)\ndf2=std.transform(df_test)\ndf_multi_scaled_test=pd.DataFrame(df2,columns=df_test.columns)\ndf_multi_scaled_test.head()","e8047099":"df.shape,df_multi_scaled.shape,df_test.shape,df_multi_scaled_test.shape","3c482bf3":"import warnings \nwarnings.filterwarnings('ignore')\nimport statsmodels.api as sm\n\nX_constant = sm.add_constant(df_multi_scaled)\nlin_reg = sm.OLS(y,X_constant).fit()\nlin_reg.summary()","42c98fba":"cols=list(df_multi_scaled.columns)\npmax = 1\nwhile (len(cols)>0):\n    p= []\n    X_1 = df_multi_scaled[cols]\n    X_constant = sm.add_constant(X_1)\n    model = sm.OLS(y,X_constant).fit()\n    p = pd.Series(model.pvalues.values[1:],index = cols)      \n    pmax = max(p)\n    feature_with_p_max = p.idxmax()\n    if(pmax>0.05):\n        cols.remove(feature_with_p_max)\n    else:\n        break\nselected_features_BE = cols\nprint(selected_features_BE)","393478d0":"df_multi_scaled=df_multi_scaled[selected_features_BE]\ndf_multi_scaled_test=df_multi_scaled_test[selected_features_BE]","208f80f9":"df_multi_scaled.shape,df_multi_scaled_test.shape","5ba8ff5e":"df_combine=pd.concat([df_multi_scaled,df_multi_scaled_test],axis=0)\ndf_combine","6787da59":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n[variance_inflation_factor(df_combine.values, j) for j in range(1, df_combine.shape[1])]","bf25ae87":"def calculate_vif(x):\n    thresh = 5.0\n    output = pd.DataFrame()\n    k = x.shape[1]\n    vif = [variance_inflation_factor(x.values, j) for j in range(x.shape[1])]\n    for i in range(1,k):\n        a = np.argmax(vif)\n        if vif[a] <= thresh :\n            break\n        if i == 1 :          \n            output = x.drop(x.columns[a], axis = 1)\n            vif = [variance_inflation_factor(output.values, j) for j in range(output.shape[1])]\n        elif i > 1 :\n            output = output.drop(output.columns[a],axis = 1)\n            vif = [variance_inflation_factor(output.values, j) for j in range(output.shape[1])]\n    return(output)","35154057":"Xnew=calculate_vif(df_combine)\nXnew.head()","1d215541":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n[variance_inflation_factor(Xnew.values, j) for j in range(1, Xnew.shape[1])]","8c9f9f78":"Xnew=Xnew.reset_index()\nXnew.drop('index',axis=1,inplace=True)\nXnew","a1acf17d":"df=Xnew.loc[0:6018,:].copy(deep=True)\ndf_test=Xnew.loc[6019:,:].copy(deep=True)","4fc49a51":"df.shape,df_test.shape","cf0261ce":"from sklearn.linear_model import LinearRegression\nfrom sklearn import model_selection\nfrom sklearn.linear_model import Ridge,ElasticNet,Lasso\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor,RandomForestRegressor,VotingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor","24e79751":"ridge=Ridge(max_iter=100,random_state=0)\nlasso=Lasso(max_iter=100,random_state=0)\n\nvariance=[]\nmeans=[]\nfor n in np.arange(1,500,1):\n    ridge=Ridge(alpha=n,random_state=0)\n    kfold = model_selection.KFold(shuffle=True,n_splits=3,random_state=0)\n    scores=model_selection.cross_val_score(ridge,df,y,cv=kfold,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    means.append(np.mean(rmse))\n    variance.append(np.std(rmse,ddof=1))\nx_axis=np.arange(1,500,1)\nplt.plot(x_axis,variance) \n","46314545":"np.argmin(variance),variance[np.argmin(variance)],means[np.argmin(variance)]","34c03f97":"np.argmin(means),variance[np.argmin(means)],means[np.argmin(means)]","d09cb919":"from sklearn.linear_model import ElasticNetCV, ElasticNet\ncv_model = ElasticNetCV(l1_ratio=np.arange(1,2), fit_intercept=True, max_iter=100,n_jobs=-1, random_state=0)\ncv_model.fit(df_multi_scaled,y)\nprint('Optimal alpha: %.8f'%cv_model.alpha_)\nprint('Optimal l1_ratio: %.3f'%cv_model.l1_ratio_)\nprint('Number of iterations %d'%cv_model.n_iter_)","d562f598":"# 3)tunning k value\nknn=KNeighborsRegressor()\nknn_params={'n_neighbors':np.arange(1,100),'weights':['uniform','distance']}\nrandomsearch=RandomizedSearchCV(knn,knn_params,cv=3,scoring='neg_mean_squared_error',random_state=0)\nrandomsearch.fit(df_multi_scaled,y)\nrandomsearch.best_params_","ceb3ee41":"means_knn=[]\nvariance_knn=[]\nfor n in np.arange(1,50):\n    KNN=KNeighborsRegressor(weights='distance',n_neighbors=n)\n    kfold = model_selection.KFold(shuffle=True,n_splits=3,random_state=0)\n    value=model_selection.cross_val_score(KNN,df_multi_scaled,y,cv=kfold,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(value))\n    variance_knn.append(np.std(rmse,ddof=1))\n    means_knn.append(np.mean(rmse))\n    \nx_axis=np.arange(len(means_knn))\nplt.plot(x_axis,means_knn)","bbcc7ed5":"np.argmin(means_knn),means_knn[np.argmin(means_knn)],variance_knn[np.argmin(means_knn)]","d879ea30":"# Lets perform Random Forest\n\nvariance_rf=[]\nmeans_rf=[]\nfor n in np.arange(1,150):\n    RF=RandomForestRegressor(criterion='mse',n_estimators=n,random_state=0)\n    kfold = model_selection.KFold(shuffle=True,n_splits=3,random_state=0)\n    scores=cross_val_score(RF,df_multi_scaled,y,cv=kfold,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    means_rf.append(np.mean(rmse))\n    variance_rf.append(np.std(rmse,ddof=1))\n    \n\nx_axis=np.arange(len(variance_rf))\nplt.plot(x_axis,variance_rf) ","8484a1f2":"print(np.argmin(variance_rf),variance_rf[np.argmin(variance_rf)],means_rf[np.argmin(variance_rf)])\nprint(np.argmin(means_rf),variance_rf[np.argmin(means_rf)],means_rf[np.argmin(means_rf)])","b0e7b740":"# Bagging of LR\nLR=LinearRegression()\nmeans_Bag_LR=[]\nvariance_Bag_LR=[]\nfor n in np.arange(1,40):\n    Bag=BaggingRegressor(base_estimator=LR,n_estimators=n,random_state=0)\n    scores=cross_val_score(Bag,df_multi_scaled ,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    means_Bag_LR.append(np.mean(rmse))\n    variance_Bag_LR.append(np.std(rmse,ddof=1))\nx_axis=np.arange(len(variance_Bag_LR))\nplt.plot(x_axis,variance_Bag_LR)","e4d958b7":"np.argmin(variance_Bag_LR),variance_Bag_LR[np.argmin(variance_Bag_LR)],means_Bag_LR[np.argmin(variance_Bag_LR)]","4aeaffec":"np.argmin(means_Bag_LR),variance_Bag_LR[np.argmin(means_Bag_LR)],means_Bag_LR[np.argmin(means_Bag_LR)]","2acad411":"knn_grid=KNeighborsRegressor(n_neighbors=3,weights='distance')\nknn_cust=KNeighborsRegressor(n_neighbors=5,weights='distance')\nmeans_Bag_KNN=[]\nvariance_Bag_KNN=[]\nfor n in np.arange(1,50):\n    Bag=BaggingRegressor(base_estimator=knn_grid,n_estimators=n,random_state=0)\n    scores=cross_val_score(Bag,df_multi_scaled ,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    means_Bag_KNN.append(np.mean(rmse))\n    variance_Bag_KNN.append(np.std(rmse,ddof=1))\nx_axis=np.arange(len(variance_Bag_KNN))\nplt.plot(x_axis,variance_Bag_KNN)","72f2c771":"knn_cust=KNeighborsRegressor(n_neighbors=5,weights='distance')\n\nmeans_Bag_KNNcust=[]\nvariance_Bag_KNNcust=[]\nfor n in np.arange(1,50):\n    Bag=BaggingRegressor(base_estimator=knn_cust,n_estimators=n,random_state=0)\n    scores=cross_val_score(Bag,df_multi_scaled ,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    means_Bag_KNNcust.append(np.mean(rmse))\n    variance_Bag_KNNcust.append(np.std(rmse,ddof=1))\nx_axis=np.arange(len(variance_Bag_KNNcust))\nplt.plot(x_axis,variance_Bag_KNNcust)","6f356eee":"np.argmin(means_Bag_KNNcust),variance_Bag_KNNcust[np.argmin(means_Bag_KNNcust)],means_Bag_KNNcust[np.argmin(means_Bag_KNNcust)]","a83b58d6":"DT=DecisionTreeRegressor()\nmeans_Bag_DT=[]\nvariance_Bag_DT=[]\nfor n in np.arange(1,50):\n    Bag=BaggingRegressor(base_estimator=DT,n_estimators=n,random_state=0)\n    scores=cross_val_score(Bag,df_multi_scaled ,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    means_Bag_DT.append(np.mean(rmse))\n    variance_Bag_DT.append(np.std(rmse,ddof=1))\nx_axis=np.arange(len(variance_Bag_DT))\nplt.plot(x_axis,variance_Bag_DT)","101ad00c":"np.argmin(variance_Bag_DT),variance_Bag_DT[np.argmin(variance_Bag_DT)],means_Bag_DT[np.argmin(variance_Bag_DT)]","ac1827b0":"np.argmin(means_Bag_DT),variance_Bag_DT[np.argmin(means_Bag_DT)],means_Bag_DT[np.argmin(means_Bag_DT)]","fa2f1f7b":"rmse_ada_DT=[]\nvariance_ada_DT=[]\nfor n in np.arange(1,50):\n    AB=AdaBoostRegressor(n_estimators=n,random_state=0)\n    scores=cross_val_score(AB,df_multi_scaled,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    rmse_ada_DT.append(np.mean(rmse))\n    variance_ada_DT.append((np.std(rmse,ddof=1)))\nx_axis=np.arange(len(rmse_ada_DT))\nplt.plot(x_axis,rmse_ada_DT)","fef367d2":"np.argmin(rmse_ada_DT),rmse_ada_DT[np.argmin(rmse_ada_DT)],variance_ada_DT[np.argmin(rmse_ada_DT)]","410fd65c":"LR=LinearRegression()\nrmse_ada_LR=[]\nvariance_ada_LR=[]\nfor n in np.arange(1,60):\n    AB=AdaBoostRegressor(base_estimator=LR,n_estimators=n,random_state=0)\n    scores=cross_val_score(AB,df_multi_scaled,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    rmse_ada_LR.append(np.mean(rmse))\n    variance_ada_LR.append((np.std(rmse,ddof=1)))\nx_axis=np.arange(len(rmse_ada_LR))\nplt.plot(x_axis,rmse_ada_LR)","c0419825":"LR=LinearRegression()\nrmse_ada_LR=[]\nvariance_ada_LR=[]\nfor n in np.arange(1,60):\n    AB=AdaBoostRegressor(base_estimator=LR,n_estimators=n,random_state=0)\n    scores=cross_val_score(AB,df_multi_scaled,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    rmse_ada_LR.append(np.mean(rmse))\n    variance_ada_LR.append((np.std(rmse,ddof=1)))\nx_axis=np.arange(len(rmse_ada_LR))\nplt.plot(x_axis,rmse_ada_LR)","58986055":"randomforest=RandomForestRegressor(n_estimators=114,random_state=0)\nrmse_ada_RF=[]\nvariance_ada_RF=[]\nfor n in np.arange(1,60):\n    AB=AdaBoostRegressor(base_estimator=randomforest,n_estimators=n,random_state=0)\n    scores=cross_val_score(AB,df_multi_scaled,y,cv=3,scoring='neg_mean_squared_error')\n    rmse=np.sqrt(np.abs(scores))\n    rmse_ada_RF.append(np.mean(rmse))\n    variance_ada_RF.append((np.std(rmse,ddof=1)))\nx_axis=np.arange(len(rmse_ada_RF))\nplt.plot(x_axis,rmse_ada_RF)","5dde2d33":"np.argmin(rmse_ada_RF),rmse_ada_RF[np.argmin(rmse_ada_RF)],variance_ada_RF[np.argmin(rmse_ada_RF)]","30dccae4":"np.argmin(variance_ada_RF),rmse_ada_RF[np.argmin(variance_ada_RF)],variance_ada_RF[np.argmin(variance_ada_RF)]","bb705073":"LR=LinearRegression()\nridge=Ridge(alpha=368,random_state=0)\nelasticnet = ElasticNet(l1_ratio= 1, alpha =0.00220166,  fit_intercept=True)\nrandomforest=RandomForestRegressor(n_estimators=114,random_state=0)\nBagged_DT=BaggingRegressor(base_estimator=DT,n_estimators=4,random_state=0)\nknn_grid=KNeighborsRegressor(n_neighbors=3,weights='distance')\nknn_cust=KNeighborsRegressor(n_neighbors=5,weights='distance')\nrandomfored_ada=AdaBoostRegressor(base_estimator=randomforest,n_estimators=32,random_state=0)\nstacked = VotingRegressor(estimators = [('ADAboost randomFOrest',randomfored_ada),('KNN_grid', knn_grid), ('KNN_customized', knn_cust)])\n","d2e520a0":"models = []\nmodels.append(('LinearRegression', LR))\nmodels.append(('Ridge', ridge))\n# models.append(('Lasso',lasso))\nmodels.append(('ElasticNet',elasticnet))\nmodels.append(('Random Forest',randomforest))\nmodels.append(('Bagged DT',Bagged_DT))\nmodels.append(('KNN_grid',knn_grid))\nmodels.append(('KNN_customized',knn_cust))\nmodels.append(('ADAboost randomFOrest',randomfored_ada))\nmodels.append(('Stacked',stacked))","6a4274e8":"means=[]\nrmse=[]\nnames=[]\nvariance=[]\ndf_result=pd.DataFrame()\nfor name,model in models:\n    kfold=model_selection.KFold(shuffle=True,n_splits=3,random_state=0)\n    cv_result=model_selection.cross_val_score(model,df_multi_scaled,y,cv=kfold,scoring='neg_mean_squared_error')\n    value=np.sqrt(np.abs(cv_result))\n    means.append(value)\n    names.append(name)\n    rmse.append(np.mean(value))\n    variance.append(np.std((value),ddof=1))\ndf_result['Names']=names\ndf_result['RMSE']=rmse\ndf_result['Variance']=variance\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(means)\nax.set_xticklabels(names)\nplt.show()\n","3846e633":"df_result","9d178da0":"df_result.sort_values('RMSE',ascending=True)","e8a603f1":"df_result.sort_values(by='Variance',ascending=True)","a01c0e7c":"stacked.fit(df_multi_scaled,y)\npredicted_values=stacked.predict(df_multi_scaled_test)","d9b67fa4":"from scipy.special import inv_boxcox","d7b5f389":"predicted=inv_boxcox(predicted_values,lambda_value)\npredicted","6ed2b2d9":"BaggedLR is not giving a better score as compared to other.","588ee85a":"In Seats column we have a row with '0' seats,which is not possible.\nWhereas power and Engine  column shows null\n","2813d7b1":"The above are extreme values.\nDeleting these values will lead to loss of information","732d865e":"# TrainData has no kmpl,CC,bhp for Mileage,Engine and Power as suffix\nRemoving all suffix","cab0e155":"Above adaboost with default DT is not giving better bias error.Hence not considering the above model","da9d6a0b":"Overall stacked ADAboostrandomForest ,KNN_grid,KNN_customized are giving better performance","646e9db0":"Whether it is Any type of owner, Diesel cars are costlier followed by petrol,CNG anf LPG and Electric","edbdec99":"Removing multicollinearity","bbf2add6":"# Modelling","d4e157fd":"Cars with Automatic Transmission are costlier as comparred to manual.\n","08f28749":"# WORKING WITH OULIERS","64f6baf0":"# Linear Model -OLS","f9b022a0":"# ------------------------------------------------------------------------------------------------------","d6256c86":"# Changing categorical values to numeric","e8e74907":"Droping New_price column as we can see total rows in above dataset are 6019 and New_price has 5195 missing values, that is, almost 85% of data is missing. Hence Drop New_price column.\n","b091960f":"The cars that have been been launched after the year 2013 are mainly of owner type 1 and 2.\n\nWe can see a linear graph between the years and car price.if the car has launchyear recently(after 2015) the car will be sold at a higher price as compared to the car that have launchyear very old(till 2007).\n\n\nDataset has models of launch year 2007 and 2008 which are of owner type fourth and above","a90ffc5e":"categorical variables are:\n\nFuel_Type,Transmission,Owner_type,Seats","51e79c2b":"Maximum cars that have manual transmission are having power from 35 to 200 and its price ranges from 1L to 30L","6685061b":"# Imputing those values","1861cbd5":"we have better model that are giving variance error less that 0.007 hence considering n_estimator as 114","526cb1a2":"Not giving better bias error","c54a1fd1":"Looking at the graphs,lets do one_hot encoding for fuel type,owner type and seats as all these are not linear to dependent variable.","c43aa097":"Multicollinearity is removed","7bf7fe93":"Maximum cars having automation transmission are having power from 65 to 300 and 2.5L to 80L\nAutmation Trasmission cars have high power as compared to manual transmission.","26577770":"Multicollinearity is present between :\n    \n1)Fuel_Type_petrol and  Fuel_Type_Diesel\n\n2)Power and transmission manual.\n\n3)Engine and Fuel_type_Petrol\n\n4)Engine and mileage\n\n5)Power and mileage\n\n6)power and engine\n\n7)Engine and Fuel_type_Diesel\n\n8)Seats5 and seats 8\n\n9)Engine and seats 5\n\nPower,Engine,Transmission_Manual,Year Fuel_Type_Petrol and Fuel_Type_Diesel and Price are highly correlated.\n"}}