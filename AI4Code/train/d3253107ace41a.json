{"cell_type":{"a7953dbe":"code","0513497c":"code","a1219cb1":"code","bcc49485":"code","c67a08a5":"code","c4dcb154":"code","26f6dc38":"code","16c8038a":"code","5afa0b62":"code","e788b71d":"code","8f05ded6":"code","e8fd7ced":"code","c8861a78":"code","de3655d2":"code","0cac15d0":"code","c87f945a":"code","fc78afbb":"code","fd8bf0f5":"code","d339735b":"code","ecfac784":"code","c3ec3cb8":"code","20875880":"code","0ed45601":"code","7a58d2f8":"code","bc9753be":"code","4ece5e55":"code","ff00d334":"code","a06431bf":"code","279937de":"code","51e0c573":"code","c3818c0f":"code","825cb46b":"markdown","6afd832a":"markdown","835c25f3":"markdown","2f8e3c5d":"markdown","3e853bf8":"markdown","e1fb23d3":"markdown"},"source":{"a7953dbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0513497c":"data = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndata.head()","a1219cb1":"data.shape","bcc49485":"data = data.drop_duplicates(keep='first')\ndata.shape","c67a08a5":"sns.heatmap(data.corr(),annot =True,fmt = '.1f',mask =np.triu(data.corr()) )","c4dcb154":"data.isnull().sum()","26f6dc38":"feature = data.drop('DEATH_EVENT',axis=1)\nplt.figure(figsize=(15,15))\nfor i in enumerate(feature.columns):\n    plt.subplot(4,3,i[0]+1)\n    sns.distplot(feature[i[1]])","16c8038a":"feature = data.drop('DEATH_EVENT',axis=1)\nplt.figure(figsize=(15,15))\nfor i in enumerate(feature.columns):\n    plt.subplot(4,3,i[0]+1)\n    sns.boxplot(feature[i[1]])","5afa0b62":"data.describe()","e788b71d":"def remove(data):\n  Q1 = np.percentile(data, 25, interpolation = 'midpoint')\n  \n# Third quartile (Q3)\n  Q3 = np.percentile(data, 75, interpolation = 'midpoint')\n  iqr = Q3 - Q1\n  percentile25 = data.quantile(0.25)\n  percentile75 = data.quantile(0.75)\n\n  upper_limit = percentile75 + 1.5 * iqr\n  lower_limit = percentile25 - 1.5 * iqr\n  data = np.where(\n    data > upper_limit,upper_limit,\n    np.where(\n        data < lower_limit,\n        lower_limit,\n        data\n    )\n  )\n  return data","8f05ded6":"feature.columns","e8fd7ced":"li = ['creatinine_phosphokinase','ejection_fraction','platelets','serum_creatinine','serum_sodium']\nfor i in li:\n    feature[i] = remove(feature[i])","c8861a78":"#feature = data.drop('DEATH_EVENT',axis=1)\nplt.figure(figsize=(15,15))\nfor i in enumerate(feature.columns):\n    plt.subplot(4,3,i[0]+1)\n    sns.boxplot(feature[i[1]])","de3655d2":"#feature = data.drop('DEATH_EVENT',axis=1)\nplt.figure(figsize=(15,15))\nfor i in enumerate(feature.columns):\n    plt.subplot(4,3,i[0]+1)\n    sns.distplot(feature[i[1]])","0cac15d0":"from sklearn.model_selection import train_test_split\n\ntrainF,testF,trainL,testL  = train_test_split(feature,data['DEATH_EVENT'],random_state=42)","c87f945a":"from sklearn.ensemble import RandomForestClassifier","fc78afbb":"model = RandomForestClassifier()","fd8bf0f5":"model.fit(trainF,trainL)\nmodel.score(testF,testL)","d339735b":"model = RandomForestClassifier(random_state=42)\nmodel.fit(trainF,trainL)\nmodel.score(testF,testL)","ecfac784":"feature.columns","c3ec3cb8":"from sklearn.preprocessing import quantile_transform\n\nli = ['age','creatinine_phosphokinase','ejection_fraction','serum_creatinine','time']\n\nfor i in feature.columns:\n    feature[i] = quantile_transform(feature[[i]]\n                                    ,output_distribution = 'normal')","20875880":"plt.figure(figsize=(15,15))\nfor i in enumerate(feature.columns):\n    plt.subplot(4,3,i[0]+1)\n    sns.distplot(feature[i[1]])","0ed45601":"data['DEATH_EVENT'].value_counts()","7a58d2f8":"\ntrainF,testF,trainL,testL = train_test_split(feature, data['DEATH_EVENT'],random_state =42,test_size=.3)","bc9753be":"data['DEATH_EVENT'].value_counts()","4ece5e55":"model = RandomForestClassifier(random_state=42)","ff00d334":"model.fit(trainF,trainL)","a06431bf":"model.score(testF,testL)","279937de":"pred = model.predict(testF)\nfrom sklearn.metrics import classification_report\nprint(classification_report(testL,pred))","51e0c573":"def print_result(result):\n  print('Best params : {} ---->{} \\n'.format(result.best_params_,result.best_score_))\n  means = result.cv_results_['mean_test_score']\n  stds = result.cv_results_['std_test_score']\n  for mean, std , params in zip(means, stds,result.cv_results_['params']):\n    print('{} (+\/- {}) for {} '.format(round(mean*100,3),round(std*2,3),params))\n\n\nfrom sklearn.model_selection import GridSearchCV\n\nparameters ={\n    'criterion' : ['gini','entropy'],\n    'n_estimators': [i**2 for i in range(3,10)],\n    'random_state' : [None,42,100],\n     'n_jobs':[None,-1]\n    \n}\n \ncv = GridSearchCV(model,parameters,cv=5)\ncv.fit(trainF,trainL)\nprint_result(cv)\n","c3818c0f":"finalmodel = RandomForestClassifier(criterion=  'entropy', n_estimators= 25, n_jobs= None, random_state= None)\nfinalmodel.fit(trainF,trainL)\npred = finalmodel.predict(testF)\nprint(classification_report(testL,pred))","825cb46b":"### Find relation among all columns","6afd832a":"### Transform Data using Quantile","835c25f3":"### Visualization using distplot","2f8e3c5d":"### Again Trying to fit model","3e853bf8":"### Parameter Tuning","e1fb23d3":"### Visualization of Outliers"}}