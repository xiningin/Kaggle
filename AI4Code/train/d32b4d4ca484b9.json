{"cell_type":{"45f46728":"code","0218be9c":"code","be035d78":"code","cd0c46b3":"code","bd7e2ded":"code","0ce8b5a3":"code","1144aa9a":"code","65ee1931":"code","28ef2175":"code","11c0eeb2":"code","33fe9aac":"code","8138783d":"code","9aae52ac":"code","14127348":"code","3e960e0d":"code","47a92ba3":"code","5c28f8fd":"code","a15dc800":"code","c66852ba":"code","8d226f36":"code","acc84783":"code","3eb6fa9f":"code","f06aaf15":"code","d304674f":"code","1494ef70":"code","fe0e0ec8":"code","9fe610e3":"code","1d99e2c1":"code","29981ca1":"code","d0abe542":"code","64aea9fa":"code","173256ac":"code","59b2c637":"code","a2ecbbdd":"code","b652c103":"code","4e288993":"code","f8246cd4":"markdown"},"source":{"45f46728":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0218be9c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\nstyle.use(\"seaborn-darkgrid\")\nimport spacy","be035d78":"data = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")","cd0c46b3":"data.head()","bd7e2ded":"data.info()","0ce8b5a3":"data.drop(\"worker\", axis=1, inplace=True)","1144aa9a":"np.random.rand()","65ee1931":"data[\"target\"] = np.ones(shape=(data.shape[0],))","28ef2175":"for i in range(data.shape[0]):\n    r = np.random.rand()\n    if r < 0.5:\n        data.loc[i,\"less_toxic\"], data.loc[i,\"more_toxic\"] = data.loc[i,\"more_toxic\"], data.loc[i,\"less_toxic\"]\n        data.loc[i, \"target\"] = 0","11c0eeb2":"plt.figure(figsize=(18,8))\nsns.countplot(x=data[\"target\"], palette=\"winter\")\nplt.show()","33fe9aac":"x = data.drop(\"target\", axis=1)\ny = data[\"target\"]","8138783d":"from nltk.stem import WordNetLemmatizer\n \nlemmatizer = WordNetLemmatizer()","9aae52ac":"l = [\"a\", 'b', \"a\", 'a', \"k\"]\nwhile True:\n    if \"a\" in l:\n        l.remove(\"a\")\n    else:\n        break\nprint(l)","14127348":"stopwords = ['a','this','the','and','is','are', 'have', 'has', 'had', 'to']\nfor i in range(x.shape[0]):\n    less = x.iloc[i,0].replace('\"','').split()\n    more = x.iloc[i,1].replace('\"','').split()\n    for c in range(len(less)):\n        for pun in [\"?\", \"!\", \".\", \",\", \":\", \";\"]:\n            if pun in less[c]:\n                less[c] = less[c].replace(pun, \"\")\n                break\n        if less[c] in stopwords:\n            less[c] = \"\"\n        less[c] = lemmatizer.lemmatize(less[c].lower())\n    for c in range(len(more)):\n        for pun in [\"?\", \"!\", \".\", \",\", \":\", \";\"]:\n            if pun in more[c]:\n                more[c] = more[c].replace(pun, \"\")\n        if more[c] in stopwords:\n            more[c] = \"\"\n        more[c] = lemmatizer.lemmatize(more[c].lower())\n    while True:\n        if \"\" in less:\n            less.remove(\"\")\n        else:\n            break\n    while True:\n        if \"\" in more:\n            more.remove(\"\")\n        else:\n            break\n    x.iloc[i,0] = less\n    x.iloc[i,1] = more","3e960e0d":"len(\"yes of course\")","47a92ba3":"x.head()","5c28f8fd":"from sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.1)","a15dc800":"from tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences","c66852ba":"tok = Tokenizer()\ntok.fit_on_texts(list(xtrain.iloc[:,0])+list(xtrain.iloc[:,1]))","8d226f36":"len(tok.word_index)","acc84783":"tok = Tokenizer(num_words = 40000, oov_token=\"oov\")\ntok.fit_on_texts(list(xtrain.iloc[:,0])+list(xtrain.iloc[:,1]))","3eb6fa9f":"xtrain.iloc[:,0] = tok.texts_to_sequences(xtrain.iloc[:,0])\nxtrain.iloc[:,1] = tok.texts_to_sequences(xtrain.iloc[:,1])\n\nxtest.iloc[:,0] = tok.texts_to_sequences(xtest.iloc[:,0])\nxtest.iloc[:,1] = tok.texts_to_sequences(xtest.iloc[:,1])","f06aaf15":"xtrain.shape","d304674f":"xtrain.iloc[:,0]","1494ef70":"xtrain.columns","fe0e0ec8":"xtr1 = pad_sequences(sequences=xtrain[\"less_toxic\"], maxlen=300)\nxtr2 = pad_sequences(sequences=xtrain[\"more_toxic\"], maxlen=300)\n\nxts1 = pad_sequences(sequences=xtest[\"less_toxic\"], maxlen=300)\nxts2 = pad_sequences(sequences=xtest[\"more_toxic\"], maxlen=300)","9fe610e3":"xts1.shape","1d99e2c1":"import tensorflow as tf\nfrom keras import layers, Model\nfrom tensorflow.compat.v1.keras.layers import CuDNNGRU as gru\nfrom tensorflow.compat.v1.keras.layers import CuDNNLSTM as lstm","29981ca1":"def encoder(inp,d,reg):\n    x = layers.Embedding(40000, 256)(inp)\n    x = layers.Dropout(d)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Bidirectional(gru(128,\n                             return_sequences=True,\n                             kernel_regularizer=tf.keras.regularizers.l1(reg),\n                             activity_regularizer=tf.keras.regularizers.l1(reg),\n                             recurrent_regularizer=tf.keras.regularizers.l1(reg)))(x)\n    x = layers.Dropout(d)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Bidirectional(gru(128,\n                             kernel_regularizer=tf.keras.regularizers.l1(reg),\n                             activity_regularizer=tf.keras.regularizers.l1(reg),\n                             recurrent_regularizer=tf.keras.regularizers.l1(reg)))(x)\n    x = layers.Dropout(d)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Dense(64, activation=\"relu\")(x)\n    x = layers.Dropout(d)(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Dense(64, activation=\"relu\")(x)\n    return x","d0abe542":"def build_model(d,reg):\n    sen1 = layers.Input(shape=(300,))\n    sen2 = layers.Input(shape=(300,))\n    enc1 = encoder(sen1, d, reg)\n    enc2 = encoder(sen2, d, reg)\n    enc = layers.concatenate([enc1, enc2])\n    enc = layers.Dropout(d)(enc)\n    enc = layers.BatchNormalization()(enc)\n    enc = layers.Dense(64, activation=\"relu\")(enc)\n    enc = layers.Dropout(d)(enc)\n    enc = layers.BatchNormalization()(enc)\n    out = layers.Dense(1, activation=\"sigmoid\")(enc)\n    return Model(inputs=[sen1,sen2], outputs=out)","64aea9fa":"model = build_model(0.2, 0.01)","173256ac":"from keras.utils.vis_utils import plot_model","59b2c637":"plot_model(model, to_file='.\/model.png', show_shapes=False, show_layer_names=False)","a2ecbbdd":"model.summary()","b652c103":"model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])","4e288993":"model.fit(x=[xtr1,xtr2], y=ytrain, validation_data=([xts1,xts2], ytest), batch_size=32, epochs=20)","f8246cd4":"The code in the following cell is an excruciatingly ugly way to remove punctuations and certain stopwords.  \nIn general we would use nltk and regular expressions, but oh well, it works."}}