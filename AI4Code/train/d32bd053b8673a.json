{"cell_type":{"82e0026f":"code","535c684f":"code","ee7d567a":"code","b47a216f":"code","196b5ea0":"code","62e200bd":"code","1057a1f9":"code","4657b28e":"code","9404bfac":"code","42ed5cf9":"code","a2462d7a":"code","714061ce":"code","db40964f":"code","31906b79":"code","4d25f778":"code","31b64bc2":"code","886c9c91":"code","e8b5be2b":"code","42c82586":"code","7051a505":"code","d8466f3a":"code","290a17b0":"code","75555e39":"code","5b9cd20e":"code","763b1a97":"code","57f6470f":"code","c984de1b":"code","f888cbf7":"code","4603f145":"code","468bcb93":"code","124c6db1":"code","3973c142":"code","49962682":"code","540aaf51":"code","983cefd9":"code","2d9cd70e":"code","11cbda28":"code","8a824c9d":"code","582d7b67":"code","3f282fb6":"code","041d0601":"code","d20c5288":"code","517363ab":"code","459ee6a4":"code","68267b10":"code","ba1c38ee":"code","f462b04a":"code","871a45e2":"code","b391f86e":"code","f2eb2ca1":"code","1bf4020f":"code","87c311db":"code","c8d9c1bc":"markdown","cf4398a2":"markdown","52bdd5af":"markdown","d05b667a":"markdown","6695a288":"markdown","884d690b":"markdown","f09a9440":"markdown","f11dabc9":"markdown","94d0eba3":"markdown","7b27a6fd":"markdown","38fa1059":"markdown","6f6d27d3":"markdown","b1d1a2f9":"markdown","ee84bc5f":"markdown","afe50c99":"markdown"},"source":{"82e0026f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","535c684f":"import pandas as pd\nimport numpy as np\n\nimport missingno as msno\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","ee7d567a":"df=pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","b47a216f":"df.shape","196b5ea0":"df.head(10)","62e200bd":"df.isnull().sum()","1057a1f9":"df.info()","4657b28e":"df.columns","9404bfac":"df.describe()","42ed5cf9":"msno.matrix(df)","a2462d7a":"msno.bar(df)","714061ce":"corr=df.corr()\nfigure, axis=plt.subplots(figsize=(10,10))\nsns.heatmap(corr, annot=True)","db40964f":"sns.pairplot(df, hue=\"output\")","31906b79":"df['output'].agg(['count', 'size', 'nunique'])","4d25f778":"pd.value_counts(df['output'])","31b64bc2":"sns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.countplot(x=\"output\", data=df, palette='magma');","886c9c91":"\nplt.figure(figsize=(18, 10))\nplt.style.use(\"ggplot\")\nsns.countplot(x=df[\"age\"]);  # using countplot\nplt.title(\"Age to Count Plot\", fontsize=20)\nplt.xlabel(\"AGE\", fontsize=20)\nplt.ylabel(\"COUNT\", fontsize=20)\nplt.show()","e8b5be2b":"df.columns","42c82586":"sns.catplot(x=\"sex\", data=df, kind=\"count\", hue=\"output\")","7051a505":"sns.catplot(x=\"cp\", data=df, kind=\"count\", hue=\"output\")","d8466f3a":"sns.catplot(x=\"fbs\", data=df, kind=\"count\", hue=\"output\")\nsns.catplot(x=\"restecg\", data=df, kind=\"count\", hue=\"output\")\nsns.catplot(x=\"exng\", data=df, kind=\"count\", hue=\"output\")\nsns.catplot(x=\"slp\", data=df, kind=\"count\", hue=\"output\")\nsns.catplot(x=\"caa\", data=df, kind=\"count\", hue=\"output\")\nsns.catplot(x=\"thall\", data=df, kind=\"count\", hue=\"output\");","290a17b0":"sns.catplot(x=\"output\", y=\"age\", data=df, kind=\"box\")\nsns.catplot(x=\"output\", y=\"trtbps\", data=df, kind=\"box\")\nsns.catplot(x=\"output\", y=\"chol\", data=df, kind=\"box\")\nsns.catplot(x=\"output\", y=\"thalachh\", data=df, kind=\"box\")\nsns.catplot(x=\"output\", y=\"oldpeak\", data=df, kind=\"box\");","75555e39":"chest_pain_count = df[\"cp\"].value_counts().reset_index()\nchest_pain_count","5b9cd20e":"plt.figure(figsize=(20, 10))\nplt.style.use(\"ggplot\")\nsns.barplot(x=chest_pain_count[\"index\"], y=chest_pain_count[\"cp\"])\nplt.title(\"TYPE OF CHEST PAIN WITH NUMBER OF PATIENTS\", fontsize=20)\nplt.xlabel(\"CHEST PAIN TYPE\", fontsize=20)\nplt.ylabel(\"COUNT\", fontsize=20)\nplt.show()","763b1a97":"Age_count = df[\"age\"].value_counts().reset_index()\nAge_count","57f6470f":"plt.figure(figsize=(12, 8))\nplt.style.use(\"ggplot\")\nsns.histplot(data=df, x='age', hue='output')\nplt.title(\"AGE EFFECT ON THE HEART-ATTACK\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nplt.show()","c984de1b":"plt.style.use(\"ggplot\")\nsns.displot(df[\"trtbps\"], color=\"y\")   #using displot here\nplt.title(\"DISTRIBUTION OF BLOOD PRESSURE AMONG PATIENTS\",fontsize=18)\nplt.xlabel(\"BLOOD PRESSURE\",fontsize=20)\nplt.ylabel(\"COUNT\",fontsize=20)\nplt.show()","f888cbf7":"plt.style.use(\"ggplot\")\nsns.set_color_codes()\nsns.displot(df[\"chol\"], color=\"r\")\nplt.title(\"DISTRIBUTION OF CHOLESTROL LEVEL AMONG PATIENTS\", fontsize=18)\nplt.xlabel(\"CHOLESTROL LEVEL\", fontsize=20)\nplt.ylabel(\"COUNT\", fontsize=20)\nplt.show()","4603f145":"plt.style.use(\"ggplot\")\nsns.displot(df[\"thalachh\"], color=\"green\")\nplt.title(\"DISTRIBUTION OF HEART RATE AMONG PATIENTS\", fontsize=18)\nplt.xlabel(\"HEART RATE\", fontsize=20)\nplt.ylabel(\"COUNT\", fontsize=20)\nplt.show()","468bcb93":"df.drop_duplicates(inplace=True)\ndf.reset_index(drop=True, inplace=True)","124c6db1":"#dividing data\nX = df.drop(\"output\",axis = 1)\ny = df.output","3973c142":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","49962682":"#importing train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.33,random_state=42,shuffle=True, stratify=y)","540aaf51":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","983cefd9":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\nRFclfModel = RandomForestClassifier()\n#Train the model using the training sets y_pred=clf.predict(X_test)\nRFclfModel.fit(X_train,y_train)\n\npredict1=RFclfModel.predict(X_test)","2d9cd70e":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy for the random forest =:\",metrics.accuracy_score(y_test,predict1))","11cbda28":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred_RFclfModel)\npd.crosstab(y_test, predict1, rownames=['True'], colnames=['Predicted'], margins=True)","8a824c9d":"sns.heatmap(confusion_matrix(y_test,predict1), annot=True)\nplt.show()","582d7b67":" from sklearn.metrics import classification_report\nprint(\"classification report for the random forest =\\r\", classification_report(y_test, predict1))","3f282fb6":"from sklearn.neighbors import KNeighborsClassifier\nKNNModel = KNeighborsClassifier(1)\nKNNModel.fit(X_train,y_train)\npredict2=KNNModel.predict(X_test)\n","041d0601":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy for the KNN Model =:\",metrics.accuracy_score(y_test, predict2))","d20c5288":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred_KNNModel)\npd.crosstab(y_test,predict2, rownames=['True'], colnames=['Predicted'], margins=True)","517363ab":"sns.heatmap(confusion_matrix(y_test,predict2), annot=True)\nplt.show()","459ee6a4":" from sklearn.metrics import classification_report\nprint(\"classification report for the random forest =\\r\", classification_report(y_test, predict2))","68267b10":"from sklearn.svm import SVC\nsvc_model = SVC()\nsvc_model.fit(X_train, y_train)\npredict3 = svc_model.predict(X_test)","ba1c38ee":"print(\"Confusion Matrix: \\n\", confusion_matrix(y_test,predict3))\nprint(\"\\n\")\nprint(classification_report(y_test, predict3))","f462b04a":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predict3)\npd.crosstab(y_test,predict3, rownames=['True'], colnames=['Predicted'], margins=True)","871a45e2":"sns.heatmap(confusion_matrix(y_test,predict3), annot=True)\nplt.show()","b391f86e":"from sklearn.naive_bayes import GaussianNB\nnaive = GaussianNB()\nnaive.fit(X_train, y_train)\npredict4 = naive.predict(X_test)","f2eb2ca1":"print(\"Confusion Matrix: \\n\", confusion_matrix(y_test, predict4 ))\nprint(\"\\n\")\nprint(classification_report(y_test, predict4 ))","1bf4020f":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predict4)\npd.crosstab(y_test,predict4, rownames=['True'], colnames=['Predicted'], margins=True)","87c311db":"sns.heatmap(confusion_matrix(y_test,predict4), annot=True)\nplt.show()","c8d9c1bc":"![493ss_thinkstock_rf_heart_illustration.jpg](attachment:2f5f2497-6fe6-44bd-8df0-7b3c885b0ab6.jpg)","cf4398a2":"## **Visualising Numerical Data**","52bdd5af":"## **Age count**","d05b667a":"**Problem statement:** Predict the Heart Attack based on the features provided.\n\n**Objective:** The features are provided with output feature as 0 & 1, 0 is the no heart attack and 1 is yes to heart attack. since it is medical related information. Our object is to minimize the False Negative (model predicting the actual patient as \"no\")","6695a288":"#   **Classification Models**","884d690b":"## **Cholestrol distribution vs patients count**","f09a9440":"## **chest pain count**","f11dabc9":"## **Blood Pressure distribution among patients**","94d0eba3":"## **Heart rate vs patient count**","7b27a6fd":"## **Random Forest**","38fa1059":"# **Data Preprocessing**","6f6d27d3":"## **support vector machine**","b1d1a2f9":"## **naive bayes**","ee84bc5f":"## **K Neighbors Classifier**","afe50c99":"## **Visualising Categorical Data**"}}