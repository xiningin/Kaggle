{"cell_type":{"b40d373c":"code","800478cb":"code","3625a1c2":"code","4a4061fd":"code","0d0e46d1":"code","656682fd":"code","52bb102e":"code","bfa960ba":"code","2b1204cc":"code","1de67545":"code","dfbbfdc8":"code","f1d27498":"code","59c409d0":"code","573e5aa5":"code","c97a6735":"code","ff83c089":"code","6291b361":"code","1af14641":"code","fbf298de":"code","31f1fcee":"code","b41737fc":"code","6e7d14c9":"code","b7caa3f3":"markdown","31acb7e3":"markdown","85f06ca9":"markdown","0ef29061":"markdown","98d9d3ed":"markdown"},"source":{"b40d373c":"from fastai.vision.all import *\nimport os\nimport PIL\nimport numpy as np\nimport pandas as pd","800478cb":"PATH=\"\/kaggle\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/\"\nsz=224\nbs=58","3625a1c2":"## get_image_files helps us get all the files inside a subfolder\nfnames = get_image_files(PATH)","4a4061fd":"## creating an empty DataBlock object\ndblock = DataBlock()\n\n## converting the DataBlocks to DataSets\ndsets = dblock.datasets(fnames)","0d0e46d1":"## let look at one of the label names\nparent_label(fnames[0])","656682fd":"lbl_dict = dict(\n    MildDemented='mildDem',\n    ModerateDemented='moderateDem',\n    NonDemented='nonDem',\n    VeryMildDemented='verymildDem'\n)","52bb102e":"def label_func(fname):\n    return lbl_dict[parent_label(fname)]","bfa960ba":"dblock = DataBlock(get_items = get_image_files,\n                   get_y     = label_func)\n\ndsets = dblock.datasets(PATH)\ndsets.train[0]","2b1204cc":"dblock = DataBlock(blocks    = (ImageBlock, CategoryBlock),\n                   get_items = get_image_files,\n                   get_y     = label_func)\n\ndsets = dblock.datasets(PATH)\ndsets.train[0]","1de67545":"dsets.vocab","dfbbfdc8":"dblock = DataBlock(blocks    = (ImageBlock, CategoryBlock),\n                   get_items = get_image_files,\n                   get_y     = label_func,\n                   splitter  = GrandparentSplitter())\n\ndsets = dblock.datasets(PATH)\ndsets.train[0]","f1d27498":"dblock = DataBlock(blocks    = (ImageBlock, CategoryBlock),\n                   get_items = get_image_files,\n                   get_y     = label_func,\n                   splitter  = GrandparentSplitter(),\n                   item_tfms = RandomResizedCrop(128, min_scale=0.35), \n                   batch_tfms=Normalize.from_stats(*imagenet_stats))","59c409d0":"dls = dblock.dataloaders(PATH)\ndls.show_batch()","573e5aa5":"data = ImageDataLoaders.from_folder(PATH, valid_pct=0.2,size=sz,bs=bs)","c97a6735":"data.show_batch()","ff83c089":"learn = cnn_learner(data, resnet34, metrics=error_rate)\nlearn.fine_tune(6)","6291b361":"learn.show_results()","1af14641":"interp = Interpretation.from_learner(learn)","fbf298de":"interp.plot_top_losses(9, figsize=(15,10))","31f1fcee":"learn.model_dir = \"\/kaggle\/working\"\nlearn.save(\"alzheimers\")\n#learn.export()","b41737fc":"from matplotlib import pyplot as plt\nfrom matplotlib.pyplot import figure\nfigure(num=None, figsize=(10, 10), dpi=80, facecolor='w', edgecolor='k')\npath = '..\/input\/alzheimer-dementia\/4ee4c494df07ac6c3ecd9b2c622c75_gallery.jpg'\npred = learn.predict(path)\ntest_img = Image.open(path)\nplt.imshow(test_img)\nplt.axis(\"off\")\naccuracy_rate = np.round(max(pred[2]).item()*100.0,2)\nplt.title(\"Prediction : {}\\nAccuracy : {} %\".format(pred[0],accuracy_rate))","6e7d14c9":"learn.export(os.path.abspath('.\/export.pkl'))","b7caa3f3":"### Loading the data with a factory method","31acb7e3":"### Setting the PATH to all the images, the size of each image and batch size","85f06ca9":"### Loading the data with data block API -  which is an implementation of High Level API.","0ef29061":"### Importing the required packages","98d9d3ed":"### Importing external data and predicting with accuracy percentage"}}