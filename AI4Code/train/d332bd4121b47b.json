{"cell_type":{"b543487b":"code","94e33770":"code","0811ddd3":"code","b86ffd24":"code","522b8f96":"code","6ccc5e01":"code","9970c1da":"code","0ac65b8a":"code","05c768ee":"code","cda8db5b":"code","975a627e":"code","c9bd07e0":"code","e783b402":"code","d37268fc":"code","43dfa325":"markdown","a17a04f9":"markdown","cbd89e62":"markdown","894d7086":"markdown","442ed330":"markdown","5e262783":"markdown","aff14440":"markdown"},"source":{"b543487b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","94e33770":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom random import random\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport gc\nimport fbprophet\nfrom fbprophet.plot import add_changepoints_to_plot","0811ddd3":"features = ['Province_State','Country_Region','Date','ConfirmedCases','Fatalities']\ndf=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\",usecols=features)\ndf.fillna(' ',inplace=True)\ndf['Lat']=df['Province_State']+df['Country_Region']\ntop10=df\ndf['ConfirmedCases_cum'] = df.groupby(['Country_Region','Date'])['ConfirmedCases'].transform(pd.Series.sum)\ntop10 = df.groupby(['Country_Region']).agg({ 'Country_Region':'min','ConfirmedCases': 'sum'})\ncountries_list=df.Lat.unique()\n\n#read in test file \ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntest.fillna(' ',inplace=True)\ntest['Lat']=test['Province_State']+test['Country_Region']\n\n# Read additional live data \nlive=pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\nlive.fillna(' ',inplace=True)\nlive = live.rename(columns={'Lat': 'Latitude'})\nlive['Lat']=live['Province\/State']+live['Country\/Region']\n# Do date conversion\nlive['Date']=pd.to_datetime(df['Date'])","b86ffd24":"def add_recoveries(row):\n    liveRw =live[(live['Date']==row['Date']) & (live['Lat']==row['Lat'])]\n    #print(row['Lat'],row['Date'],liveRw)\n    if not liveRw.empty:\n            recovered=liveRw['Recovered'].values[0]\n    else:\n            recovered=0\n    return recovered        \n\ndf['Recovered'] = df.apply(add_recoveries, axis=1)    \ndf['Recovered_cum'] = df.groupby(['Country_Region','Date'])['Recovered'].transform(pd.Series.sum)\ndisplay(df.head(4))","522b8f96":"top10Countries = top10.sort_values(['ConfirmedCases'],ascending=False)['Country_Region'].head(10).to_numpy()\ndisplay(top10Countries)","6ccc5e01":"# Plot the data with Matplotlib defaults\nsns.set() \ndf_top=df.loc[df['Country_Region'].isin(top10Countries)]\ndf_top=df_top.drop('Lat',axis=1 )\n#display(df_top )\nplt.figure(figsize=(16, 6))\n#sns.set_context(\"talk\")\nsns.set_style(\"whitegrid\")\nax = sns.lineplot(x=\"Date\", y=\"ConfirmedCases_cum\", hue=\"Country_Region\",\n                   estimator=None, lw=1, \n                  data=df_top)\nplt.draw()\ngobble=ax.set_xticklabels(ax.get_xticklabels(), rotation=75, ha='right')","9970c1da":"def is_Off_Season(ds,start=8,end=11):\n    date = pd.to_datetime(ds)\n    return (date.month > start or date.month < end)\n\ndef applyRegressor(ds,reg,df):\n    date = ds.strftime(\"%Y-%m-%d\")\n    val = df[df['ds']==date][reg]\n    if val.empty:\n        return 0;\n    else:\n        return df[df['ds']==date][reg].values[0]\n\n#### Forecaster\ndef forecast(df,ds,y,reg1='Recovered',y_label='y',title=\"Projection\", plot=False,flexibility=0.01,fourier_order=4,prior_scale=0.1,changepoints = [],reg2 = \"\"):\n    if len(reg2) == 0:\n        if len(reg1) == 0:\n            df = df[[ds, y]]\n        else:\n            df = df[[ds, y, reg1]]\n    else:\n        if len(reg1) == 0:\n            df = df[[ds, y, reg2]]\n        else:\n            df = df[[ds, y, reg1, reg2]]\n    df=df.rename(columns={ds: 'ds', y: 'y'})\n    prophet = fbprophet.Prophet(changepoint_prior_scale=flexibility, seasonality_mode='additive', \\\n            weekly_seasonality=False, \\\n            daily_seasonality=False )\n    ## Add sesionality\n    df['off_season'] = df['ds'].apply(is_Off_Season)\n    prophet.add_seasonality(name='off_season', period=120, prior_scale=prior_scale, fourier_order=fourier_order, \\\n                            condition_name='off_season')\n    ## Add regressors\n    if len(reg1) != 0:\n        prophet.add_regressor(reg1)\n    if len(reg2) != 0:\n        prophet.add_regressor(reg2)\n    \n    prophet.fit(df)\n    forecast = prophet.make_future_dataframe(periods=240, freq='D')\n    forecast['off_season'] = forecast['ds'].apply(is_Off_Season)\n    # add the regressors observed over the future DataFrame period\n    forecast[reg1] = forecast['ds'].apply(lambda x: applyRegressor(x,reg1,df))\n    if len(reg2) != 0:\n        forecast[reg2] = forecast['ds'].apply(lambda x: applyRegressor(x,reg2,df))\n    # Predict the future\n    forecast = prophet.predict(forecast)\n    # Avoid negative\n    forecast[\"yhat\"] = np.where(forecast[\"yhat\"]<0,0,forecast[\"yhat\"])\n    forecast[\"yhat_lower\"] = np.where(forecast[\"yhat_lower\"]<0,0,forecast[\"yhat_lower\"])\n    forecast[\"yhat_upper\"] = np.where(forecast[\"yhat_upper\"]<0,0,forecast[\"yhat_upper\"])\n    if plot :\n        fig=prophet.plot(forecast, xlabel = 'Date', ylabel = y_label)\n        a = add_changepoints_to_plot(fig.gca(), prophet, forecast)\n        prophet.plot_components(forecast)\n        plt.title(title);\n    return (forecast,prophet)","0ac65b8a":"def dateplot(x, y, **kwargs):\n    ax = plt.gca()\n    data = kwargs.pop(\"data\")\n    data.plot(x=x, y=y, ax=ax, grid=False, **kwargs)\n\n#display(df[df.Country_Region == \"US\"].head(10))\ng = sns.FacetGrid(df[df.Country_Region == \"US\"], col=\"Country_Region\", col_wrap=2, height=3.5, aspect=2)\ng = g.map_dataframe(dateplot, \"Date\", \"ConfirmedCases\")","05c768ee":"## Using profit to get trends for us \nmodelDs = df_top [df_top['Country_Region'].str.find(\"US\")!=-1][['Date', 'ConfirmedCases_cum','Recovered_cum' ]]\nforecast(modelDs,'Date','ConfirmedCases_cum','Recovered_cum','Confirmed Cases','Confirmed Cases US',True,fourier_order=5) \n#del df_top\ngc.collect()","cda8db5b":"#collect residual garbage\ngc.collect()\n#display(df [df['Lat'].str.find(\"US\")!=-1].head(2))\n#groupByLat = df[df['Lat'].str.find(\"Massachusetts\")!=-1].groupby('Lat')\ngroupByLat = df.groupby('Lat')\ncols = ['Lat','ConfirmedCase_Forecast','Fatalities_Forecast']\nsub_cols= ['ForecastId','Date','ConfirmedCases','Fatalities']\nsubmissions= pd.DataFrame(columns=sub_cols)\nresults = pd.DataFrame(columns=cols)\ni=1;\nfor name, group in groupByLat:\n    print(\"Forecasting for group : %s:%s\"%(i,name))\n    forecast_cc = forecast(group,'Date','ConfirmedCases','Recovered',flexibility=0.35,fourier_order=5,prior_scale=0.20) \n    forecast_fat = forecast(group,'Date','Fatalities','Recovered',flexibility=0.35,fourier_order=5,prior_scale=0.19) \n    # Populate test data set \n    for index, row in test[test['Lat']==name].iterrows():\n        cc=forecast_cc[0][forecast_cc[0]['ds']==row['Date']][\"yhat\"].values[0]\n        f=forecast_fat[0][forecast_fat[0]['ds']==row['Date']][\"yhat\"].values[0]\n        submissions=submissions.append(pd.Series([int(row['ForecastId']),row['Date'],round(cc),round(f)],index=sub_cols),ignore_index=True )\n    results = results.append(pd.Series([name,forecast_cc[0],forecast_fat[0]],index=cols),ignore_index=True )\n    del forecast_cc\n    del forecast_fat\n    gc.collect()\n    #for index, row in group.iterrows():\n    #    results = results.append(pd.Series([name,row['ConfirmedCases'],row['Fatalities']],index=cols),ignore_index=True )\n    i=i+1\ndel groupByLat","975a627e":"## Create submission File\n#os.remove(\"\/kaggle\/working\/submission.csv\")\n#pd.options.display.float_format = '{:,.0f}'.format\n# Convert forecast Id to Integer\nsubmissions[\"ForecastId\"] =submissions.ForecastId.astype('int64')\ndisplay(submissions)\n# Drop Date to Prepare Submission\nsubmissions=submissions.drop('Date',axis=1 )\nsubmissions.to_csv('submission.csv', index=False)  ","c9bd07e0":"# see forecast for Massachussets \ngroupByLat = df[df['Lat'].str.find(\"Massachusetts\")!=-1].groupby('Lat')\nfor name, group in groupByLat:\n    forecast_cc = forecast(group,'Date', 'ConfirmedCases','Recovered','ConfirmedCases Massachusetts', 'ConfirmedCases',True,flexibility=0.35,fourier_order=5,prior_scale=0.20) \n    forecast_fat = forecast(group,'Date','Fatalities','Recovered','Fatalities Massachusetts', 'Fatalities',True,flexibility=0.35,fourier_order=5,prior_scale=0.20) \n    ","e783b402":"# see forecast for NY \ngroupByLat = df[df['Lat'].str.find(\"New York\")!=-1].groupby('Lat')\nfor name, group in groupByLat:\n    forecast_cc = forecast(group,'Date', 'ConfirmedCases','Recovered','ConfirmedCases New York', 'ConfirmedCases',True,flexibility=0.35,fourier_order=6,prior_scale=0.20) \n    forecast_fat = forecast(group,'Date','Fatalities','Recovered','Fatalities New York', 'Fatalities',True,flexibility=0.35,fourier_order=6,prior_scale=0.20)  ","d37268fc":"# India Forecast\ngroupByLat = df[df['Lat'].str.find(\" India\")!=-1].groupby('Lat')\nfor name, group in groupByLat:\n    forecast_cc = forecast(group,'Date', 'ConfirmedCases','Recovered','ConfirmedCases India', 'ConfirmedCases',True,flexibility=0.25,fourier_order=5,prior_scale=0.20) \n    forecast_fat = forecast(group,'Date','Fatalities','Recovered','Fatalities India', 'Fatalities',True,flexibility=0.25,fourier_order=5,prior_scale=0.20,reg2=\"ConfirmedCases\")","43dfa325":"**Merge with Recovery stats**","a17a04f9":"# **Predicted US trend**","cbd89e62":"# Forecast for India","894d7086":"# Run model on test data","442ed330":"# Forecast for MA and NY","5e262783":"# **Visualize Country Curves Top 10 Countries by confirmed cases**","aff14440":"#  Define Prophet Model\n\nAssumptions\n\nAssuming seasonal pattern\n* Need to see if can include population density\n* Added recoveries as a regressor to fatalities\n* Added Confirmed cases as a regressor to fatalities\n* Need to see if can include impact of social distancing by a regressor"}}