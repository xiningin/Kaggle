{"cell_type":{"eb759484":"code","aef6337b":"code","aaf22837":"code","9a2a8111":"code","5fe93106":"code","401542eb":"code","608c00cf":"code","adafd0d1":"code","fab0f24a":"code","c426f474":"code","68731204":"code","c473052f":"code","6905e5a1":"code","a09fa6af":"code","f2fbb5ef":"code","d8b6526d":"code","66c28772":"code","d4c8c15a":"code","7bbb63f8":"code","6fead50f":"code","c9ebe0c1":"code","62079b6e":"code","7a802349":"code","3a4f4984":"code","6cfdfd2f":"code","93a642a2":"code","a5650569":"code","67bf3120":"code","26ce2dcd":"code","49b76ef8":"code","15e7c7e7":"code","66f876c7":"code","32b1ecb0":"code","e427074c":"code","f127d687":"code","e0f37fbe":"code","01db56de":"code","1b1c5793":"code","caebc5b0":"code","8e00b365":"code","78b10395":"code","11cd7b23":"code","94816b43":"code","83d6f12b":"code","8067a184":"code","d5f42db3":"code","b764d50a":"code","5fe7b98c":"code","64f23b8e":"code","7aeb920f":"code","3d90a192":"code","a3149ad8":"code","fdee63bc":"code","305fa86f":"code","ecbf940a":"code","45e0ef00":"code","8f85acef":"code","7d56eff7":"code","02a7465e":"code","a2f4e7d6":"code","299714df":"code","87a9af17":"code","7343168a":"code","e2d2448c":"code","34ebca48":"code","278e4807":"code","3c6f7887":"code","81a9e65e":"code","fc492ef5":"code","724e6288":"code","87d94bde":"code","cb8f9df2":"code","6d47a612":"code","9b2b1b63":"code","dba4f2f8":"code","f639d5b2":"code","d4873cdc":"code","68330ab6":"code","50afbf48":"code","17688db8":"code","fb448e83":"code","4e680ad0":"code","4ab09bc7":"code","89b362d0":"code","f747990b":"code","b414db50":"code","64ad6f23":"code","b32d87e8":"code","cd105484":"code","ef0e403d":"code","cb97e3cb":"code","afa4e55b":"code","984d7937":"code","cf7e45ed":"code","89a2f510":"code","0b633b06":"code","2abcc298":"code","af9979fa":"code","50415d41":"code","fbd9260e":"code","9fdb584d":"code","fc9f43d1":"code","acde6c15":"code","78c0d005":"code","2cfd9383":"code","5c08bb16":"code","422a6afc":"code","1977fd55":"code","817f78f1":"code","4551cb2d":"code","41ad68e1":"markdown","6ab2c71d":"markdown","b87442ba":"markdown","70f948bd":"markdown","1ffff967":"markdown","e6cc85a6":"markdown","62ee6b0a":"markdown","168e3ed8":"markdown","3df37579":"markdown","70a2f545":"markdown","10c02c3a":"markdown","9516f3da":"markdown","24fb8658":"markdown","3faeb968":"markdown","7b2b68ef":"markdown","a1c867ed":"markdown","0cb67cd2":"markdown","21c224f6":"markdown","463ea29d":"markdown","a39d8c8a":"markdown","24083aaa":"markdown","48a54e2c":"markdown","49a9e4d2":"markdown","502e8756":"markdown","8b1f34d6":"markdown","3288ee73":"markdown","0e2d37a6":"markdown","a3f3565b":"markdown","a51bd61b":"markdown","228894ba":"markdown","f2008caf":"markdown","ef6c1e01":"markdown","214a02fe":"markdown","33b1c736":"markdown","54b342f7":"markdown","d8cf82f9":"markdown","9f2a467e":"markdown","b28bd743":"markdown","42f2d3fd":"markdown","ec48afdb":"markdown","02537524":"markdown","4dfbdc9d":"markdown","dd20228e":"markdown","0c040b42":"markdown","425f7b06":"markdown","5ea4ec96":"markdown","a50ce13c":"markdown","c71c939a":"markdown","28fb9a00":"markdown","625ea087":"markdown","46ab3b7f":"markdown","627ada96":"markdown","ea9c5351":"markdown","dddc08a6":"markdown","1559c161":"markdown"},"source":{"eb759484":"import numpy as np\nimport matplotlib.pyplot as plt\nimport math\nimport random\nimport pandas as pd\nimport scipy.stats as stat\nimport seaborn as sns\nimport os\nimport pandas\nimport sklearn\n\nfrom IPython.display import Image\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nfrom sklearn.decomposition import PCA\nfrom sklearn import preprocessing\n\nfrom sklearn.preprocessing import MinMaxScaler\n\n\n# Para ter repetibilidade nos resultados\nrandom_state = 1\n\n# Tratar valores infinitos como np.NaN\npandas.options.mode.use_inf_as_na = True\n\n# IMPORTANTE para tornar figuras interativas\n%matplotlib notebook\n\n# Tamanho padr\u00e3o das figuras\nfigsize=(10,6)\n\n# Verifica\u00e7\u00e3o do local para carga de dados\npath = os.environ['PATH']\n\nif path.startswith('C'):\n    IN_KAGGLE = False\nelse:\n    IN_KAGGLE = True\n    \n\n# Bibliotecas espec\u00edficas do livro Introduction to Machine Learning with Python\n# https:\/\/github.com\/amueller\/introduction_to_ml_with_python\n# pip install mglearn\n\nimport mglearn\n\n\n# Configura\u00e7\u00e3o do n\u00famero de linhas e colunas a serem apresentadas em listagens\npd.set_option('display.max_row', 1000)\n\npd.set_option('display.max_columns', 50)\n","aef6337b":"os.listdir('..\/input')","aaf22837":"# Fun\u00e7\u00e3o de convers\u00e3o de dados copiada de https:\/\/github.com\/shakedzy\/dython\/blob\/master\/dython\/_private.py\n# Autor Shaked Zychlinski\n\ndef convert(data, to):\n    converted = None\n    if to == 'array':\n        if isinstance(data, np.ndarray):\n            converted = data\n        elif isinstance(data, pd.Series):\n            converted = data.values\n        elif isinstance(data, list):\n            converted = np.array(data)\n        elif isinstance(data, pd.DataFrame):\n            converted = data.as_matrix()\n    elif to == 'list':\n        if isinstance(data, list):\n            converted = data\n        elif isinstance(data, pd.Series):\n            converted = data.values.tolist()\n        elif isinstance(data, np.ndarray):\n            converted = data.tolist()\n    elif to == 'dataframe':\n        if isinstance(data, pd.DataFrame):\n            converted = data\n        elif isinstance(data, np.ndarray):\n            converted = pd.DataFrame(data)\n    else:\n        raise ValueError(\"Unknown data conversion: {}\".format(to))\n    if converted is None:\n        raise TypeError('cannot handle data conversion of type: {} to {}'.format(type(data),to))\n    else:\n        return converted","9a2a8111":"if IN_KAGGLE:\n    world_happiness = pd.read_csv(\"..\/input\/world-happiness\/2016.csv\")\nelse:\n    world_happiness = pd.read_csv(\"2016.csv\")\n\n# Conjunto completo\nworld_happiness = world_happiness.loc[:,['Country', 'Region', 'Happiness Rank', 'Happiness Score',\n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity',\n       'Dystopia Residual']]\n\n\n\n#world_happiness = shuffle(world_happiness).reset_index(drop=True)\n\n# Conjunto resumido para treinamento de modelos\nworld_happiness_resumido = world_happiness.loc[:,[ 'Happiness Score',\n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity']]\n\n# Cria vari\u00e1veis para treinamento de modelos\n\ncolunas_fonte = [ \n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity'\n]\n\ncolunas_objetivo = [ \n       'Happiness Score'\n]\n\nworld_happiness_resumido_X = world_happiness_resumido.loc[:,colunas_fonte] \nworld_happiness_resumido_Y = world_happiness_resumido.loc[:,colunas_objetivo]\n\n\nworld_happiness.head(35)","5fe93106":"if IN_KAGGLE:\n    tips = pd.read_csv('..\/input\/snstips\/tips.csv')\n    if 'Unnamed: 0' in tips.columns:\n        tips.drop(['Unnamed: 0'], inplace=True, axis=1)\nelse:\n    tips = sns.load_dataset('tips')\n\ntips.head()\n","401542eb":"tips2 = tips.copy();","608c00cf":"tips2.columns = ['Valor_Conta','Gorjeta','Sexo','Fumante','Tempo','Hor\u00e1rio','Clientes']\ntips2.Valor_Conta = tips2.Valor_Conta*4\ntips2.Gorjeta = tips2.Gorjeta*4\ntips2.head()","adafd0d1":"from sklearn.datasets import load_breast_cancer\n\ncancer = load_breast_cancer()\n\ncancer_data = cancer['data']\n# 1 benigno, 0 maligno\ncancer_target = cancer['target']\ncancer_target_names  = cancer['target_names']\ncancer_feature_names = cancer['feature_names']","fab0f24a":"cancer_data_DF = pd.DataFrame(cancer_data,columns=cancer_feature_names) \ncancer_data_DF.head()","c426f474":"cancer_target_DF = pd.DataFrame(cancer_target,columns=['target']) \ncancer_target_DF.head()","68731204":"# Estat\u00edsticas b\u00e1sicas\n# Verificar m\u00ednimos e m\u00e1ximos para garantir se est\u00e3o dentro dos limites esperados\n# Verificar intervalo de varia\u00e7\u00e3o da medida\n# Verificar poss\u00edveis outliers\n\nworld_happiness.describe()","c473052f":"# Verificar tipos de dados\n\nworld_happiness.dtypes","6905e5a1":"# Verificar nulos\n\nworld_happiness.info()","a09fa6af":"# Verificar nulos\npandas.options.mode.use_inf_as_na = True\nworld_happiness.isnull().sum()","f2fbb5ef":"# Para listar dados nulos\n\ndf = pd.DataFrame([[0, np.NaN, 2], \n                   [3, 4, np.NaN], \n                   [6, 7, 8]])\n\n\ndf[df.isnull().any(axis=1)]","d8b6526d":"world_happiness.Region.value_counts()","66c28772":"world_happiness.head()","d4c8c15a":"world_happiness.groupby(['Region']).agg({'Country' : 'count', 'Happiness Rank' : 'mean', 'Happiness Score' : 'mean'}).sort_values(by=['Happiness Score'], ascending=False)\n","7bbb63f8":"# Observar a duplicidade de valores\n\nworld_happiness['Happiness Rank'].value_counts().head()","6fead50f":"\nDescribeResult = stats.describe(world_happiness_resumido_X)\nminmax = DescribeResult[1]\nmean = DescribeResult[2]\nvariance = DescribeResult[3]\nskewness = DescribeResult[4]\nkurtosis = DescribeResult[5]\n\nkurtosis","c9ebe0c1":"tips.info()","62079b6e":"tips.describe()","7a802349":"tips.isnull().sum()","3a4f4984":"tips.day.value_counts()","6cfdfd2f":"tips.time.value_counts()","93a642a2":"tips.sex.value_counts()","a5650569":"tips.smoker.value_counts()","67bf3120":"cancer_data_DF.info()","26ce2dcd":"cancer_data_DF.describe()","49b76ef8":"cancer_data_DF.isnull().sum()","15e7c7e7":"DescribeResult = stats.describe(cancer.data)\nminmax = DescribeResult[1]\nmean = DescribeResult[2]\nvariance = DescribeResult[3]\nskewness = DescribeResult[4]\nkurtosis = DescribeResult[5]\n\nkurtosis","66f876c7":"cancer_target_DF.target.value_counts()","32b1ecb0":"# Dados para plotagem\nx = np.linspace(0, 10, 100)\nx_ = np.linspace(0, 10, 10)","e427074c":"\nimport matplotlib.pyplot as plt\n\n##### FORMA 1 -  Cria figura com m\u00faltiplas imagens sem trabalhar com eixos\nfig = plt.figure(figsize=figsize)\n\n# Seleciona local para plot\nplt.subplot(2, 1, 1)\n\n# Linha colorida\nplt.plot(x, np.sin(x), color='blue', linestyle='-', label='sin(x)')\n# T\u00edtulos\nplt.title('Seno')\nplt.xlabel('x')\nplt.ylabel('sen')\n\n# Limites de plotagem\nplt.xlim(-1, 11)\nplt.ylim(-1.5, 1.5)\n\n# Seleciona local para plot\nplt.subplot(2, 1, 2)\n\n# Linha gray scale\nplt.plot(x, np.cos(x), color='0.4', linestyle='--', label='sin(x)')\nplt.title('Cosseno')\nplt.xlabel('x')\nplt.ylabel('cos')\n\n# Limites de plotagem\nplt.xlim(-1, 11)\nplt.ylim(-1.5, 1.5)\n\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\n\n\nplt.tight_layout()\n# plt.axis('tight')\n\nplt.show()\n\n","f127d687":"##### FORMA 2 -  Cria figura com m\u00faltiplas imagens trabalhando com eixos\nfig, ax = plt.subplots(2, 1, figsize=figsize)\n\nax[0].plot(x, np.sin(x))\nax[0].set_xlabel('x')\nax[0].set_ylabel('sin')\nax[0].set_title('Sin')\n\nax[1].plot(x, np.cos(x))\nax[1].set_xlabel('x')\nax[1].set_ylabel('cos')\nax[1].set_title('cos')\n\nplt.tight_layout()\nplt.show()\n\n","e0f37fbe":"##### FORMA 3 -  Cria figura simples \nfig = plt.figure(figsize=figsize)\nax = plt.axes()\n\nplt.plot(x, np.sin(x), color='blue', linestyle='-', label='sin(x)', linewidth=1)\nplt.errorbar(x_, np.sin(x_), yerr=0.1, fmt='.k')\nplt.fill_between(x, 1.1*np.sin(x), 0.9*np.sin(x), color='gray', alpha=0.2)\n\n\nplt.plot(x, np.cos(x), color='0.4', linestyle='--', label='cos(x)', linewidth=4)\nplt.scatter(x_, np.cos(x_), marker='o')\n\n# Limites de plotagem\nplt.xlim(-1, 11)\nplt.ylim(-1.5, 1.5)\n\n# T\u00edtulos\nplt.title('Seno Cosseno')\nplt.xlabel('x')\nplt.ylabel('sen cos')\n\n# Anota\u00e7\u00f5es\nstyle = dict(size=15, color='gray')\nplt.text(6, np.cos(6)+0.2, \"Teste\", **style)\n\n\n# Torna legenda vis\u00edvil\nplt.legend()\n\n# Grid\nplt.grid(True) \n\n# Rotaciona labels\nplt.xticks(rotation=60)\n\nplt.tight_layout()\nplt.show()\n\n","01db56de":"plt.subplots(figsize=figsize)\nplt.plot(range(len(world_happiness)), \n         world_happiness.loc[:,['Happiness Score']],\n         'r.'\n         )\nplt.xlabel('\u00cdndice')\nplt.ylabel('Happiness Score')\nplt.title('Plot \u00ecndice X valor')\nplt.grid(True)\nplt.show()\nplt.tight_layout()","1b1c5793":"plt.subplots(figsize=figsize)\nplt.plot(range(len(tips)), \n         tips.tip,\n         'r.'\n         )\nplt.xlabel('\u00cdndice')\nplt.ylabel('Tips')\nplt.title('Plot \u00ecndice X Tips')\nplt.grid(True)\nplt.show()\nplt.tight_layout()","caebc5b0":"plt.subplots(figsize=figsize)\nplt.plot(range(len(cancer_target_DF)), \n         cancer_target_DF.target,\n         'r.'\n         )\nplt.xlabel('\u00cdndice')\nplt.ylabel('Target')\nplt.title('Plot \u00ecndice X Target')\nplt.grid(True)\nplt.show()\nplt.tight_layout()","8e00b365":"plt.subplots(figsize=figsize)\n\nwh_ = world_happiness.loc[:,['Economy (GDP per Capita)','Happiness Score']].values\n\nplt.plot(wh_[:,0], \n         wh_[:,1],\n         'r.'\n         )\n\nplt.xlabel('Economy (GDP per Capita)')\nplt.ylabel('Happiness Score')\nplt.title('Economy (GDP per Capita) X Happiness Score')\nplt.grid(True)\nplt.show()\nplt.tight_layout()","78b10395":"# joinplot \u00e9 limitado em argumentos, preferencialmente usar scatter plot\n# h\u00e1, por\u00e9m, a vantagem de apresentar as distribui\u00e7\u00f5es das vari\u00e1veis em an\u00e1lise\nwh_ = world_happiness.loc[:,['Economy (GDP per Capita)','Happiness Score']].values\nwith sns.axes_style(\"whitegrid\"):\n    g = sns.jointplot(x=wh_[:,0], y=wh_[:,1], height=figsize[0])\n    g.set_axis_labels('Economy (GDP per Capita)','Happiness Score')\n","11cd7b23":"fig = plt.figure(figsize=figsize)\n\nwh_ = world_happiness.loc[:,['Economy (GDP per Capita)','Happiness Score']].values\n\nplt.scatter(wh_[:,0], wh_[:,1], c=wh_[:,1], s=wh_[:,0]*100, alpha=0.3,\n                   cmap='viridis')\nplt.colorbar()\nplt.xlabel('Economy (GDP per Capita)')\nplt.ylabel('Happiness Score')\nplt.title('Economy (GDP per Capita) X Happiness Score')\nplt.grid(True) \nplt.show()","94816b43":"tips2.head()","83d6f12b":"plt.subplots(figsize=figsize)\n\ntips_ = tips2.loc[:,['Valor_Conta','Gorjeta']].values\n\nplt.plot(tips_[:,0], \n         tips_[:,1],\n         'k.'\n         )\n\nplt.xlabel('Valor_Conta')\nplt.ylabel('Gorjeta')\nplt.title('Valor_Conta X Gorjeta')\nplt.grid(True)\nplt.show()\nplt.tight_layout()","8067a184":"np.var(tips2.Valor_Conta, ddof=1)","d5f42db3":"np.cov(tips2.Valor_Conta,tips2.Gorjeta, ddof=1)","b764d50a":"np.corrcoef(tips2.Valor_Conta,tips2.Gorjeta)","5fe7b98c":"from sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(np.reshape(tips2.Valor_Conta.values,(len(tips2.Valor_Conta.values),1)),tips2.Gorjeta.values)\n\n# Make predictions using the testing set\ntips_pred = regr.predict(np.reshape(tips2.Valor_Conta.values,(len(tips2.Valor_Conta.values),1)))\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_, regr.intercept_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n      % mean_squared_error(tips2.Gorjeta, tips_pred))\nprint('Soma dos erros: {}'.format(np.sum(tips2.Gorjeta-tips_pred)))\nplt.subplots(figsize=figsize)\nplt.scatter(tips2.Valor_Conta,tips2.Gorjeta,  color='black')\nplt.plot(tips2.Valor_Conta, tips_pred, color='black', linewidth=3)\n\n\n\nplt.xlabel('Valor_Conta')\nplt.ylabel('Gorjeta')\nplt.title('Valor_Conta X Gorjeta')\nplt.grid(True)\nplt.show()\nplt.tight_layout()","64f23b8e":"\ntips_ = tips.loc[:,['total_bill','tip']].values\n\ng = sns.jointplot(x=tips_[:,0], y=tips_[:,1], height=figsize[0])\ng.set_axis_labels('total_bill','tip')\n","7aeb920f":"fig = plt.figure(figsize=figsize)\n\ntips_ = tips.loc[:,['total_bill','tip']].values\n\n\nplt.scatter(tips_[:,0], tips_[:,1], c=tips_[:,1], s=tips_[:,0]*10, alpha=0.3,\n                   cmap='viridis')\nplt.colorbar()\nplt.xlabel('total_bill')\nplt.ylabel('tip')\nplt.title('total_bill X tip')\nplt.grid(True) \nplt.show()","3d90a192":"fig = plt.figure(figsize=figsize)\n\ntips_ = cancer_data_DF.loc[:,['mean radius','mean compactness']].values\n\n\nplt.scatter(tips_[:,0], tips_[:,1], c=cancer_target_DF.target, s=(cancer_target_DF.target+1)*50, alpha=0.3,\n                   cmap='viridis')\nplt.colorbar()\nplt.xlabel('total_bill')\nplt.ylabel('tip')\nplt.title('total_bill X tip')\nplt.grid(True) \nplt.show()","a3149ad8":"fig, ax = plt.subplots(1, 1, figsize=figsize)\ntips.sex.value_counts().plot(kind='pie', ax=ax)","fdee63bc":"fig, ax = plt.subplots(figsize = figsize)\n\nsize = 0.3\n\n\n\nday_counts = tips.day.value_counts()\n\n\ncmap = plt.get_cmap(\"tab20c\")\nouter_colors = cmap(np.arange(len(day_counts))*5)\n\nax.pie(\n    day_counts, \n    radius=1, \n    colors=outer_colors,\n    labels = day_counts.index.values,\n       wedgeprops=dict(width=size, edgecolor='w'))\n\n#ax.pie(benford, radius=1-size, colors=outer_colors,\n#       wedgeprops=dict(width=size, edgecolor='w'))\n\nax.set(aspect=\"equal\", title='Refei\u00e7\u00f5es por dia da semana')\nplt.show()","305fa86f":"fig, ax = plt.subplots(1, 1, figsize=figsize)\ntips.time.value_counts().plot(kind='bar', ax=ax)","ecbf940a":"fig, ax = plt.subplots(1, 1, figsize=figsize)\nsns.barplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, ax=ax)","45e0ef00":"fig, ax = plt.subplots(1, 1, figsize=figsize)\ntips.day.value_counts().plot(kind='area', ax=ax)\ncontadores = tips.day.value_counts()\n_ = plt.xticks(range(len(contadores)), contadores.index.values, rotation='vertical')","8f85acef":"fig, ax = plt.subplots(2, 2, figsize=figsize)\n\n\n\ntips_ = tips.groupby(['smoker'])['tip'].sum()\nax_ = ax[0,0]\ntips_.plot(kind='bar', ax=ax_)\nax_.set_xlabel('Smoker')\nax_.set_ylabel('Tip')\nax_.set_title('Tip X Smoker')\n\ntips_ = tips.groupby(['sex'])['tip'].sum()\nax_ = ax[0,1]\ntips_.plot(kind='barh', ax=ax_)\nax_.set_xlabel('Tip')\nax_.set_ylabel('Sex')\nax_.set_title('Tip X Sex')\n\ntips_ = tips.groupby(['day'])['tip'].sum()\nax_ = ax[1,0]\ntips_.plot(kind='pie', ax=ax_)\nax_.set_xlabel('Day')\nax_.set_ylabel('Tip')\nax_.set_title('Tip X Day')\n\ntips_ = tips.groupby(['time'])['tip'].sum()\nax_ = ax[1,1]\ntips_.plot(kind='area', ax=ax_)\nax_.set_xlabel('Time')\nax_.set_ylabel('Tip')\nax_.set_title('Tip X Time')\ncontadores = tips.time.value_counts()\n_ = plt.xticks(range(len(contadores)), contadores.index.values, rotation='vertical')\n\nfig.subplots_adjust(hspace=0.6, wspace=0.4)\nplt.show()","7d56eff7":"tips.groupby(['day','time'])['tip'].count()","02a7465e":"from statsmodels.graphics.mosaicplot import mosaic\n\nfig, ax = plt.subplots(1, 1, figsize=figsize)\n\n\n_=mosaic(tips.loc[:,['day','time']], index =['day','time'], ax=ax, statistic=False, gap=0.01, title='Distribui\u00e7\u00e3o de refei\u00e7\u00f5es')\n","a2f4e7d6":"import statsmodels\nprint(statsmodels.__version__)","299714df":"from statsmodels.graphics.mosaicplot import mosaic\n\nfig, ax = plt.subplots(1, 1, figsize=figsize)\n\n\n_=mosaic(tips.loc[:,['day','smoker']], index =['day','smoker'], ax=ax, statistic=False, gap=0.01, title='Distribui\u00e7\u00e3o de refei\u00e7\u00f5es')\n","87a9af17":"# Histograma dos dados\n\nfig, ax = plt.subplots(1, 1, figsize=figsize)\n\nworld_happiness_resumido.hist(bins=30, color='steelblue', edgecolor='black', linewidth=1.0,\n           xlabelsize=8, ylabelsize=8, grid=False, ax=ax)    \nplt.tight_layout()   ","7343168a":"fig, axes = plt.subplots(6, 1, figsize=figsize)\nruins = world_happiness_resumido.loc[world_happiness_resumido['Happiness Score']<=5.5,:]\nbons = world_happiness_resumido.loc[world_happiness_resumido['Happiness Score']>5.5,:]\nax = axes.ravel()\nfor i in range(6):\n    _, bins = np.histogram(world_happiness_resumido.loc[:,colunas_fonte[i]], bins=50)\n    ax[i].hist(ruins.loc[:,colunas_fonte[i]], bins=bins, color=mglearn.cm3(0), alpha=.5)\n    ax[i].hist(bons.loc[:,colunas_fonte[i]], bins=bins, color=mglearn.cm3(2), alpha=.5)\n    ax[i].set_title(colunas_fonte[i],size = 6)\n    ax[i].set_yticks(())\n\nax[0].legend([\"tristes\", \"felizes\"], loc=\"best\")\n","e2d2448c":"x_train, x_test, y_train, y_test = train_test_split(\n    world_happiness_resumido_X, world_happiness_resumido_Y, test_size=0.3, random_state=random_state,shuffle =True)","34ebca48":"f, ax = plt.subplots(1, 1, figsize=figsize)\nplt.hist(y_train.T, bins=20, alpha=0.5, label='train')\nplt.hist(y_test.T, bins=20, alpha=0.5, label='test')\nf.suptitle('Happiness Score - Train Test')\nplt.legend(loc='upper right')\nplt.show()\nplt.tight_layout()","278e4807":"fig, ax = plt.subplots(1, 1, figsize=figsize)\n\n_ = tips.hist(bins=30, color='steelblue', edgecolor='black', linewidth=1.0,\n           xlabelsize=8, ylabelsize=8, grid=False, ax=ax)    \nplt.tight_layout()   ","3c6f7887":"fig, ax = plt.subplots(1, 1, figsize=figsize)\n\n_ = cancer_data_DF.hist(bins=30, color='steelblue', edgecolor='black', linewidth=1.0,\n           xlabelsize=8, ylabelsize=8, grid=False, ax=ax)    \nplt.tight_layout()   ","81a9e65e":"fig, axes = plt.subplots(15, 2, figsize=figsize)\nmalignant = cancer.data[cancer.target == 0]\nbenign = cancer.data[cancer.target == 1]\nax = axes.ravel()\nfor i in range(30):\n    _, bins = np.histogram(cancer.data[:, i], bins=50)\n    ax[i].hist(malignant[:, i], bins=bins, color=mglearn.cm3(0), alpha=.5)\n    ax[i].hist(benign[:, i], bins=bins, color=mglearn.cm3(2), alpha=.5)\n    ax[i].set_title(cancer.feature_names[i],size = 6)\n    ax[i].set_yticks(())\nax[0].set_xlabel(\"Feature magnitude\",size = 6)\nax[0].set_ylabel(\"Frequency\",size = 6)\nax[0].legend([\"malignant\", \"benign\"], loc=\"best\")\n","fc492ef5":"f, ax = plt.subplots(1, 1, figsize=figsize)\nf.suptitle('Happiness Score')\n\nsns.boxplot(x=\"Region\", y=\"Happiness Score\", data=world_happiness,  ax=ax)\nax.set_xlabel(\"Region\",size = 12,alpha=0.8)\nax.set_ylabel(\"Happiness Score\",size = 12,alpha=0.8)\nplt.xticks(rotation=60)\nplt.tight_layout()","724e6288":"f, ax = plt.subplots(1, 1, figsize=figsize)\nf.suptitle('world_happiness')\n\nsns.boxplot(data=world_happiness_resumido,  ax=ax)\nax.set_xlabel(\"Atributos\",size = 12,alpha=0.8)\nax.set_ylabel(\"Valores\",size = 12,alpha=0.8)\nplt.xticks(rotation=60)\nplt.tight_layout()","87d94bde":"f, ax = plt.subplots(1, 1, figsize=figsize)\nf.suptitle('Tips', fontsize=14)\n\nsns.boxplot(x=\"time\", y=\"tip\", data=tips,  ax=ax)\nax.set_xlabel(\"time\",size = 12,alpha=0.8)\nax.set_ylabel(\"tip\",size = 12,alpha=0.8)\nplt.xticks(rotation=60)\nplt.tight_layout()","cb8f9df2":"fig, ax = plt.subplots(1, 1, figsize=figsize)\ntips.boxplot('tip','sex',figsize=figsize, ax=ax)","6d47a612":"fig, ax = plt.subplots(1, 1, figsize=figsize)\ntips.boxplot('tip','smoker',figsize=figsize, ax=ax)","9b2b1b63":"f, ax = plt.subplots(1, 1, figsize=figsize)\nf.suptitle('Tips', fontsize=14)\n\nsns.boxplot(data=tips,  ax=ax)\nax.set_xlabel(\"Atributos\",size = 12,alpha=0.8)\nax.set_ylabel(\"Valores\",size = 12,alpha=0.8)\nplt.xticks(rotation=60)\nplt.tight_layout()","dba4f2f8":"f, ax = plt.subplots(1, 1, figsize=figsize)\nf.suptitle('Cancer data', fontsize=14)\n\nsns.boxplot(data=cancer_data_DF,  ax=ax)\nax.set_xlabel(\"Atributos\",size = 12,alpha=0.8)\nax.set_ylabel(\"Valores\",size = 12,alpha=0.8)\nplt.xticks(rotation=60)\nplt.tight_layout()","f639d5b2":"# Correla\u00e7\u00e3o entre dados\n\nf, ax = plt.subplots(figsize=figsize)\ncorr = world_happiness_resumido.corr()\nhm = sns.heatmap(round(corr,2), annot=True, ax=ax, cmap=\"coolwarm\",fmt='.2f',\n                 linewidths=.05)\nf.subplots_adjust(top=0.93)\nt= f.suptitle('Correla\u00e7\u00e3o entre vari\u00e1veis', fontsize=14)","d4873cdc":"f, ax = plt.subplots(figsize=figsize)\n_ = pd.plotting.scatter_matrix(world_happiness_resumido, ax=ax)\n\n","68330ab6":"# Correla\u00e7\u00e3o entre dados\n\npp = sns.pairplot(world_happiness_resumido, size=1.8, aspect=1.8,\n                  plot_kws=dict(edgecolor=\"k\", linewidth=0.5),\n                  diag_kind=\"kde\", diag_kws=dict(shade=True))\n\nfig = pp.fig \nfig.subplots_adjust(top=0.93, wspace=0.3)\nt = fig.suptitle('world_happiness', fontsize=14)","50afbf48":"# Correla\u00e7\u00e3o entre dados\n\nf, ax = plt.subplots(figsize=figsize)\ncorr = tips.corr()\nhm = sns.heatmap(round(corr,2), annot=True, ax=ax, cmap=\"coolwarm\",fmt='.2f',\n                 linewidths=.05)\nf.subplots_adjust(top=0.93)\nt= f.suptitle('Correla\u00e7\u00e3o entre vari\u00e1veis', fontsize=14)","17688db8":"# Correla\u00e7\u00e3o entre dados\n\nf, ax = plt.subplots(figsize=figsize)\ncorr = pd.concat([cancer_data_DF, cancer_target_DF], axis=1).corr()\nhm = sns.heatmap(round(corr,1), annot=True, ax=ax, cmap=\"coolwarm\",fmt='.0f',\n                 linewidths=.05)\nf.subplots_adjust(bottom=0.3)\nt= f.suptitle('Correla\u00e7\u00e3o entre vari\u00e1veis', fontsize=14)","fb448e83":"from pandas.plotting import parallel_coordinates\nfig, ax = plt.subplots(1, 1, figsize=figsize)\n\nparallel_coordinates(frame=world_happiness, class_column='Region'\n                     #, color = ('r','g','b','y','w')\n                     , ax = ax, cols=['Happiness Score',\n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity',\n       'Dystopia Residual'])\nplt.xticks(rotation=40)\nplt.subplots_adjust(bottom=0.30)","4e680ad0":"from pandas.plotting import parallel_coordinates\nfig, ax = plt.subplots(1, 1, figsize=figsize)\n\nparallel_coordinates(frame=pd.concat([cancer_data_DF, cancer_target_DF], axis=1), \n                     class_column='target'\n                     , ax = ax, )\nplt.xticks(rotation=60)\nfig.subplots_adjust(bottom=0.3)","4ab09bc7":"# Vis\u00e3o 3D dos dados\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=figsize)\nax = fig.add_subplot(111, projection='3d')\n\nxs = world_happiness_resumido['Economy (GDP per Capita)']\nys = world_happiness_resumido['Family']\nzs = world_happiness_resumido['Health (Life Expectancy)']\nax.scatter(xs, ys, zs, s=world_happiness_resumido['Happiness Score']**3, alpha=0.6, edgecolors='w')\n\nax.set_xlabel('Economy (GDP per Capita)')\nax.set_ylabel('Family')\nax.set_zlabel('Health (Life Expectancy)')\nplt.tight_layout()","89b362d0":"# Vis\u00e3o 3D dos dados\n\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=figsize)\nax = fig.add_subplot(111, projection='3d')\n\nxs = tips['total_bill']\nys = tips['size']\nzs = tips['tip']\nax.scatter(xs, ys, zs, s=tips['tip']*10, alpha=0.6, edgecolors='w')\n\nax.set_xlabel('total_bill')\nax.set_ylabel('size')\nax.set_zlabel('tip')\nplt.tight_layout()","f747990b":"#from sklearn.datasets import fetch_lfw_people\n#people = fetch_lfw_people(min_faces_per_person=100, resize=1)\n# people = people.images[0]\npeople = np.load('..\/input\/imagenp\/imagem.numpy.npy')","b414db50":"fig = plt.figure(figsize=(5,5))\nax = plt.axes()\nax.imshow(people)\nax.set_title('teste')","64ad6f23":"plt.imshow(people, cmap=\"hot\")","b32d87e8":"plt.imshow(people, cmap=\"Greys\")","cd105484":"image_shape = people.shape\nprint(image_shape)\n# linspace(start, stop, num)\nx = np.linspace(0, image_shape[1], image_shape[1])\n# multiplica por -1 caso contr\u00e1rio imagem fica invertida\ny = -1*np.linspace(0, image_shape[0], image_shape[0])","ef0e403d":"fig = plt.figure(figsize=(9,12))\n\nplt.contour(x,y,people, 30, cmap='RdGy')\nplt.tight_layout()","cb97e3cb":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(9,9))\n\nax = plt.axes(projection='3d')\n# meshgrid cria matriz bidimensional cruzando todos os valores de x com y\n# X repete x tantas linhas quanto a dimens\u00e3o de y\nX, Y = np.meshgrid(x, y)\n# usa log para atenuar profundidade das curvas\nax.contour3D(X, Y, np.log(people), 100)\n# \u00c2ngulo de vis\u00e3o superior e rota\u00e7\u00e3o da imagem\nax.view_init(80, -60)\n\nplt.tight_layout()","afa4e55b":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(9,9))\n\nax = plt.axes(projection='3d')\n\nX, Y = np.meshgrid(x, y)\n\nax.plot_wireframe(X, Y, np.log(people))\n\nax.view_init(80, -60)\n\nplt.tight_layout()","984d7937":"from mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(figsize=(9,9))\n\nax = plt.axes(projection='3d')\n\nX, Y = np.meshgrid(x, y)\n\nax.plot_surface(X, Y, np.log(people), rstride=1, cstride=1,\n                       cmap='viridis', edgecolor='none')\n\nax.view_init(80, -60)\n\nplt.tight_layout()","cf7e45ed":"# Copiado de https:\/\/matplotlib.org\/gallery\/mplot3d\/3d_bars.html\n\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import\n\n\n# setup the figure and axes\nfig = plt.figure(figsize=figsize)\nax1 = fig.add_subplot(121, projection='3d')\n\n\n# fake data\n_x = np.arange(4)\n_y = np.arange(5)\n_xx, _yy = np.meshgrid(_x, _y)\nx, y = _xx.ravel(), _yy.ravel()\n\ntop = x + y\nbottom = np.zeros_like(top)\nwidth = depth = 1\n\nax1.bar3d(x, y, bottom, width, depth, top, shade=True)\nax1.set_title('Shaded')\n\n\nplt.show()","89a2f510":"import mpl_toolkits.basemap\nmpl_toolkits.basemap.__version__","0b633b06":"\nfrom mpl_toolkits.basemap import Basemap\n","2abcc298":"fig = plt.figure(figsize=(15, 8))\nm = Basemap(projection='lcc', resolution='c',\n            lat_0=-17, lon_0=-47.92,\n            width=8000000, height=5000000)\nm.shadedrelief()\nm.drawcoastlines(color='gray')\nm.drawcountries(color='gray')\nm.drawstates(color='gray')\nx, y = m(-47.92, -15.78)\nplt.plot(x, y, 'ok', markersize=5)\nplt.text(x, y, 'Brasilia', fontsize=12)","af9979fa":"os.listdir('..\/input')","50415d41":"municipios = pd.read_csv('..\/input\/municipiosbrasileiros\/municipios_brasileiros.csv')\nif 'Unnamed: 0' in municipios.columns:\n    municipios.drop(['Unnamed: 0'], inplace=True, axis=1)\n    \nmunicipios_capital = municipios.loc[municipios.capital==1,:]\nmunicipios_capital.reset_index(inplace=True)\nmunicipios_capital.head()","fbd9260e":"fig = plt.figure(figsize=(15, 8))\nm = Basemap(projection='lcc', resolution='c',\n            lat_0=-17, lon_0=-47.92,\n            width=8000000, height=5000000)\nm.shadedrelief()\nm.drawcoastlines(color='gray')\nm.drawcountries(color='gray')\nm.drawstates(color='gray')\nfor index, row in municipios_capital.iterrows():\n    x, y = m(row['longitude'], row['latitude'])\n    plt.plot(x, y, 'ok', markersize=1)\n    plt.text(x, y, row['nome_municipio'], fontsize=10)","9fdb584d":"\n##### Salva figura\nfig.savefig('teste.png')\n\n# Carrega figura\nImage('teste.png')    ","fc9f43d1":"# https:\/\/www.datacamp.com\/community\/tutorials\/wordcloud-python\n\nfrom wordcloud import WordCloud","acde6c15":"texto = world_happiness.Region.str.cat(sep=' ')\n","78c0d005":"from collections import Counter\nconta_palavras = Counter(texto.split())\nconta_palavras = dict(conta_palavras)\ndel conta_palavras['and']\nconta_palavras","2cfd9383":"wordcloud = WordCloud(max_font_size=50, repeat=False, background_color=\"white\").generate_from_frequencies(conta_palavras)","5c08bb16":"# https:\/\/github.com\/amueller\/word_cloud\n\n#wordcloud = WordCloud(max_font_size=50, repeat=False, background_color=\"white\").generate(texto)\nplt.figure(figsize=figsize)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","422a6afc":"world_happiness_ = world_happiness.loc[:,['Region', \n       'Economy (GDP per Capita)', 'Family', 'Health (Life Expectancy)',\n       'Freedom', 'Trust (Government Corruption)', 'Generosity',\n       'Dystopia Residual']]\n\nworld_happiness_.head()\n","1977fd55":"# copiado de https:\/\/python-graph-gallery.com\/390-basic-radar-chart\/\n\n\nfrom math import pi\n \ndef radar_chart(df):\n    # number of variable\n    categories=list(df)[1:]\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values=df.loc[0].drop('Region').values.flatten().tolist()\n    values += values[:1]\n    values\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(111, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n\n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.ylim(0,3)\n\n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n","817f78f1":"plt.figure(figsize=figsize)\nradar_chart(world_happiness_)","4551cb2d":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pyplot as plt\n \n# Build a dataframe with 4 connections\ndf = pd.DataFrame({ 'from':['A', 'B', 'C','A'], 'to':['D', 'A', 'E','C']})\ndf\n \n# Build your graph\nG=nx.from_pandas_edgelist(df, source='from', target='to')\nplt.figure(figsize=figsize)\n# Plot it\nnx.draw(G, with_labels=True)\nplt.show()\n","41ad68e1":"## Plotagem de vari\u00e1veis categ\u00f3ricas","6ab2c71d":"## Histogramas de treinamento e teste\n\nQuando recebemos bases de treinamento e teste j\u00e1 prontas (ex. competi\u00e7\u00f5es Kaggle) ou quando montamos nossas bases, \u00e9 importante verificar se pertencem a mesma distribui\u00e7\u00e3o\n","b87442ba":"# 1- Importa\u00e7\u00e3o de bibliotecas e fun\u00e7\u00f5es gerais usadas no caderno","70f948bd":"## Por que fazer EDA?\n\n1- Ter uma melhor compreens\u00e3o dos dados\n\n2- Compreendendo, estabelecer padr\u00f5es\n\n3- Baseado nos padr\u00f5es, propor hip\u00f3teses e confirm\u00e1-las (ou n\u00e3o)\n\n\nAlgumas vezes n\u00e3o \u00e9 necess\u00e1rio criar modelos de minera\u00e7\u00e3o, a simples an\u00e1lise explorat\u00f3ria \u00e9 suficiente para extrair as informa\u00e7\u00f5es que buscamos. \n\n\n","1ffff967":"## O que ser\u00e1 tratado no curso\n\nO curso apresenta uma introdu\u00e7\u00e3o \u00e0 an\u00e1lise explorat\u00f3ria de dados (EDA), constitu\u00edda por: \n\n- visualiza\u00e7\u00e3o\n- an\u00e1lise estat\u00edstica de dados\n\n\n","e6cc85a6":"## Plotar vari\u00e1vel X \u00edndice\n\nPode trazer informa\u00e7\u00f5es interessantes de tend\u00eancia se plotarmos vari\u00e1vel X \u00edndice, mesmo que n\u00e3o trabalhemos com s\u00e9ries temporais. \n\nNo m\u00ednimo verificaremos se os dados foram embaralhados","62ee6b0a":"## Contornos 3D","168e3ed8":"## Histogramas","3df37579":"## Visualiza\u00e7\u00e3o usando Matplotlib ou Seaborn?\n\nMatplotlib \u00e9 a biblioteca mais usada para plotagem. R\u00e1pida e f\u00e1cil de usar. Produz gr\u00e1ficos simples rapidamente e permite a cria\u00e7\u00e3o de gr\u00e1ficos sofisticados.\n\nhttps:\/\/matplotlib.org\/\n\nhttps:\/\/matplotlib.org\/tutorials\/introductory\/sample_plots.html\n\nSeaborn \u00e9 uma biblioteca baseada na Matplotlib, com recusrsos visuais mais sofisticados, principalmente para an\u00e1lise estat\u00edstica.\n\nhttps:\/\/seaborn.pydata.org\/\n\nhttps:\/\/seaborn.pydata.org\/tutorial.html#tutorial\n\nUsaremos ambas no curso\n","70a2f545":"## Imagens","10c02c3a":"<font size=\"10\" color=\"black\">An\u00e1lise explorat\u00f3ria de dados<\/font>\n\n(Exploratory data analysis - EDA)\n\nEduardo Chaves Ferreira\n\n","9516f3da":"## Contagem de valores (categ\u00f3ricos ou num\u00e9ricos)","24fb8658":"## Correla\u00e7\u00f5es","3faeb968":"# 2- Carga de dados\n","7b2b68ef":"<br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO<\/font>\n\nFa\u00e7a as an\u00e1lises acima para cancer_data.\n\nUse value_counts para verificar os valores de target","a1c867ed":"# Scatter plot","0cb67cd2":"## Dados de exemplo\n\nWorld happiness report (http:\/\/worldhappiness.report\/).\n\nSomente vari\u00e1veis num\u00e9ricas","21c224f6":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Plotagem de vari\u00e1veis categ\u00f3ricas<\/font>\n\nPara tips plotar, na mesma figura, gr\u00e1ficos de barras horizontais, barras verticais, pizza e \u00e1rea para total de tips por smoker, day, sex e time","463ea29d":"## Histograma comparando dados de entrada com objetivo","a39d8c8a":"### Lista de colormaps\nhttps:\/\/matplotlib.org\/users\/colormaps.html","24083aaa":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Boxplot<\/font>\n\nPara tips e cancer_data realizar as seguintes an\u00e1lises:\n- Boxplot dos dados\n- No caso de tips, boxplot de tip agrupado por time, sex e smoker\n","48a54e2c":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Correla\u00e7\u00f5es<\/font>\n\nPara tips e cancer_data realizar as seguintes an\u00e1lises:\n- Correla\u00e7\u00f5es (heatmap) entre dados num\u00e9ricos de tips e cancer_data\n","49a9e4d2":"## Plotar vari\u00e1vel X vari\u00e1vel","502e8756":"## Contornos 2D","8b1f34d6":"## Nuvem de palavras","3288ee73":"Data set de gorgetas com vari\u00e1veis categ\u00f3ricas","0e2d37a6":"## Salvando e recuperando imagens","a3f3565b":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Coordenadas paralelas<\/font>\n\nPara tips e cancer_data realizar as seguintes an\u00e1lises:\n- Para cancer_data gr\u00e1fico de coordenadas paralelas (class_column = target)\n","a51bd61b":"# 4.1 - Visualiza\u00e7\u00e3o B\u00e1sica\n\nO m\u00ednimo necess\u00e1rio para o desenho de gr\u00e1ficos\n\nhttps:\/\/www.oreilly.com\/library\/view\/python-data-science\/9781491912126\/ch04.html\n","228894ba":"## Wire Frame","f2008caf":"# 4- Visualiza\u00e7\u00e3o de Dados","ef6c1e01":"## Barras 3D","214a02fe":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Plotar vari\u00e1vel X vari\u00e1vel<\/font>\n\nPara tips, plotar tip X bill. Fazer joinplot com mesmas vari\u00e1veis. Fazer scatter com as mesmas vari\u00e1veis, ajustando tamanho e cor por tip.\n\nPara cancer_data, plotar mean radius X mean compactness, ajustando tamanho e cor por target ","33b1c736":"<br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO<\/font>\n\nFa\u00e7a as an\u00e1lises acima para tips.\n\nUsando value_counts, verifique os valores presentes nas vari\u00e1veis categ\u00f3ricas","54b342f7":"## Mapas\n\nNecess\u00e1rio instalar biblioteca basemap\n\nconda install basemap\nhttps:\/\/www.oreilly.com\/library\/view\/python-data-science\/9781491912126\/ch04.html","d8cf82f9":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Mosaico<\/font>\n\nPara tips, cruzar day e smoker","9f2a467e":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Histogramas<\/font>\n\nPara tips e cancer_data realizar as seguintes an\u00e1lises:\n- Histograma dos dados\n- Para cancer_data, plotar histograma das vari\u00e1veis de entrada separando cada gr\u00e1fico em dois histogramas (maligno e benigno)\n","b28bd743":"## Coordenadas paralelas","42f2d3fd":"## Mosaico","ec48afdb":"## Estat\u00edsticas gerais\n\nObserva\u00e7\u00e3o sobre medidas de forma: \nCurtose (achatamento, onde 0 caracteriza a normal, maior que 0 representa afunilamento e menor que 0 achatamento) e \nAssimetria (skewness, onde 0 caracteriza simetria, maior que 0 caracteriza maior distribui\u00e7\u00e3o \u00e0 direira e menor que 0 caracteriza maior distribui\u00e7\u00e3o \u00e0 esquerda)","02537524":"## Vis\u00e3o 3D dos dados","4dfbdc9d":"## Verificando dados ausentes\n\nDados ausentes s\u00e3o representados como np.NaN\n\nS\u00e3o dados nulos ou n\u00e3o preenchidos\n\nA fun\u00e7\u00e3o isnull verifica se os dados existem (True) ou n\u00e3o (False)\n\nH\u00e1 tamb\u00e9m a fun\u00e7\u00e3o isna, que \u00e9 id\u00eantica a isnull\n\nCUIDADO: al\u00e9m de dados nulos h\u00e1 tamb\u00e9m dados que tendem ao infinito (inf ou -inf), fruto, por exemplo, de divis\u00e3o por zero. Para que sejam considerados nulos usar pandas.options.mode.use_inf_as_na = True","dd20228e":"# 3 - Obtendo informa\u00e7\u00f5es gerais sobre os dados","0c040b42":"## Carrega dados para exerc\u00edcio\n","425f7b06":"# Refer\u00eancias\n\nLivros usados como refer\u00eancia:\n\nIntroduction to Machine Learning with Python\n\nPython Data Science Handbook (https:\/\/www.oreilly.com\/library\/view\/python-data-science\/9781491912126\/)\n\nVisualiza\u00e7\u00e3o:\n\nhttps:\/\/python-graph-gallery.com\/\n\nhttp:\/\/www.apnorton.com\/blog\/2016\/12\/19\/Visualizing-Multidimensional-Data-in-Python\/\n\nhttps:\/\/towardsdatascience.com\/the-art-of-effective-visualization-of-multi-dimensional-data-6c7202990c57\n\nhttps:\/\/www.oreilly.com\/library\/view\/python-data-science\/9781491912126\/ch04.html\n\nhttps:\/\/matplotlib.org\/mpl_toolkits\/mplot3d\/tutorial.html","5ea4ec96":"## Rede","a50ce13c":"## Dados exemplo","c71c939a":"## Radar Chart","28fb9a00":"Dados sobre tumores (somente informa\u00e7\u00f5es num\u00e9ricas)\n\nhttp:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.datasets.load_breast_cancer.html","625ea087":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Vis\u00e3o 3D<\/font>\n\nPara tips e cancer_data realizar as seguintes an\u00e1lises:\n- Vis\u00e3o 3D de tips usando total_bill, size e tip (tamanho da bolha proporcional \u00e0 tip)\n","46ab3b7f":"## Superf\u00edcie","627ada96":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Plotar vari\u00e1vel X \u00edndice<\/font>\n\nPara tips e cancer_data plotar a vari\u00e1vel objetivo X \u00edndice\n\n","ea9c5351":"#### <br>\n<font size=\"8\" color=\"red\">EXERC\u00cdCIO: Mapas<\/font>\n\nPlotar todas as capitais de munic\u00edpios","dddc08a6":"# 4.2 - Visualiza\u00e7\u00e3o para an\u00e1lise de dados","1559c161":"## BoxPlot\n\nExcelente ferramenta para an\u00e1lise de distribui\u00e7\u00f5es e outliers"}}