{"cell_type":{"a16de019":"code","0091206c":"code","f4368f11":"code","002c6039":"code","2dd39a4f":"code","3e61b137":"code","4f1d34b6":"code","f9b8f6df":"code","fbff62ce":"code","5bc06701":"code","9f925fe1":"code","ceee97bf":"code","2e2eaca7":"code","41bccc52":"code","46a10c7e":"code","06e6be15":"code","0b4e53ec":"code","3ecd6808":"code","c728c708":"code","4180333e":"code","19d8470d":"code","d04234dc":"code","5fee1316":"code","9354f18d":"code","9c82469c":"code","8d1e192b":"code","09498e0f":"code","7fd6e244":"code","382739f6":"code","74e76d9f":"code","dc83e553":"code","8cb158dd":"code","b63c88cf":"code","4f9b06c5":"code","c3f67a02":"code","7f23d889":"code","bd63efda":"code","c966cf39":"code","7e69f514":"code","82fd8421":"code","5d18a064":"code","90bac0cd":"code","18f025ca":"code","b0f97e27":"code","8e246141":"code","5fd3c60b":"code","efeed50d":"code","701a43bd":"code","e6b442e0":"code","8acec48d":"code","eb8608be":"code","7f498c8c":"code","2543d930":"code","8fb96b35":"code","ab4be13e":"code","0ff42936":"code","653047a2":"code","a2e6a41a":"code","9d158092":"code","f2463399":"code","b82653c4":"code","a0faabe3":"code","fd196c09":"code","05464081":"code","7c2e45ce":"code","589c0ee5":"code","6c01b2fc":"code","d910e2e5":"code","d0e33e2e":"code","940aab77":"code","43d5d38f":"code","d67498a1":"code","a8bbc07c":"code","72141500":"code","aa7a0ae2":"code","3c7bc6d6":"code","a6bc37d0":"code","7a745b3d":"code","34d4cf14":"code","51565f7d":"code","2f3b4752":"code","f78120e5":"code","f0498d49":"code","b951b876":"code","a05eb084":"code","705354f9":"code","1968b819":"code","df076b0b":"code","7934c7ba":"code","e90c5962":"code","ef6f44f6":"code","52046d16":"markdown","ace78359":"markdown","3f08fc0b":"markdown","5117513d":"markdown","31110ef8":"markdown","6e3aaf86":"markdown","c09b8ded":"markdown","9daa2d90":"markdown","926c314a":"markdown","dfaf0fd6":"markdown","dc6540eb":"markdown","3955790f":"markdown","3b40aaff":"markdown","0be263c0":"markdown","ab80800c":"markdown","27383e4b":"markdown","a485d48c":"markdown","f9b5b706":"markdown","1b3c6d30":"markdown","7b1ecdb4":"markdown","a15799c0":"markdown","3e088323":"markdown","53934b20":"markdown","dab675fe":"markdown","b48365d5":"markdown","bb64a2c0":"markdown","2f007f5c":"markdown","d75beeb1":"markdown","5898e1fc":"markdown","fffe06d4":"markdown","617c7588":"markdown","ea0577b9":"markdown","9e05e106":"markdown","efa80f5c":"markdown"},"source":{"a16de019":"import geopandas as gpd\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport folium\nimport datetime as dt\nfont={\n    'size':20\n}\nsns.set(style=\"white\", color_codes=True)","0091206c":"fp = \"..\/input\/911.csv\"","f4368f11":"dateparse = lambda x: pd.datetime.strptime(x,'%Y-%m-%d %H:%M:%S')\ndf= pd.read_csv(fp,parse_dates=['timeStamp'],date_parser=dateparse)","002c6039":"df.head()","2dd39a4f":"df.dtypes","3e61b137":"df.set_index('timeStamp',inplace=True)\ndf.head(3)","4f1d34b6":"df.dtypes","f9b8f6df":"df['type'] = df[\"title\"].apply(lambda x: x.split(':')[0].strip())","fbff62ce":"df.head(3)","5bc06701":"print(\"The frequency of emergency type is:\\n\",df[\"type\"].value_counts())","9f925fe1":"plt.figure(figsize=(12,8))\nsns.countplot(x=df['type'],data=df,palette='Spectral')\nplt.xlabel('Emergency Types',fontdict=font)\nplt.ylabel('counts',fontdict=font)\nplt.title(\"Total number of calls\",fontdict=font) \nplt.savefig('Total-calls.png')\nplt.show()\n","ceee97bf":"tab=pd.crosstab(df['twp'],df['type']) ","2e2eaca7":"tab.head(10)","41bccc52":"ems = pd.DataFrame(tab[['EMS']])\nems.sort_values(by='EMS',axis=0, ascending=False, inplace=True)","46a10c7e":"ems.dtypes","06e6be15":"ems.head()","0b4e53ec":"plt.figure(figsize=(12,8))\ntemp=ems[['EMS']].iloc[:10,:]\nx_list = temp['EMS']\nlabel_list = temp.index\nplt.axis(\"equal\") \n#To show the percentage of each pie slice, pass an output format to the autopctparameter \nplt.pie(x_list,labels=label_list,autopct=\"%1.1f%%\") \nplt.title(\"EMS calls recieved from top 10 cities\",fontdict=font) \nplt.savefig('ems-pie-Top10.png')\nplt.show()\n","3ecd6808":"fire = pd.DataFrame(tab[['Fire']])\nfire.sort_values(by='Fire',axis=0, ascending=False, inplace=True)","c728c708":"fire.head()","4180333e":"plt.figure(figsize=(12,8))\ntemp=fire[['Fire']].iloc[:10,:]\nx_list = temp['Fire']\nlabel_list = temp.index\nplt.axis(\"equal\") \n#To show the percentage of each pie slice, pass an output format to the autopctparameter \nplt.pie(x_list,labels=label_list,autopct=\"%1.1f%%\") \nplt.title(\"Fire calls recieved from top 10 cities\",fontdict=font) \nplt.savefig('fire-pie-Top10.png')\nplt.show()","19d8470d":"traffic = pd.DataFrame(tab[['Traffic']])\ntraffic.sort_values(by='Traffic',axis=0, ascending=False, inplace=True)","d04234dc":"traffic.head()","5fee1316":"plt.figure(figsize=(12,8))\ntemp=traffic[['Traffic']].iloc[:10,:]\nx_list = temp['Traffic']\nlabel_list = temp.index\nplt.axis(\"equal\") \n#To show the percentage of each pie slice, pass an output format to the autopctparameter \nplt.pie(x_list,labels=label_list,autopct=\"%1.1f%%\") \nplt.title(\"Traffic calls recieved from top 10 cities\",fontdict=font) \nplt.savefig('Traffic-pie-Top10.png')\nplt.show()\n","9354f18d":"ems = df[df['type']=='EMS']\nems['type'] = ems[\"title\"].apply(lambda x: x.split(':')[1].strip())\nems.head()","9c82469c":"ems_type = pd.DataFrame(ems['type'].value_counts(sort=True, ascending=False)).iloc[:10,:]\nems_type.head()","8d1e192b":"plt.figure(figsize=(12,8))\nsns.barplot(x=ems_type['type'],y=ems_type.index,data=ems_type,palette=\"viridis\") \nplt.xlabel(\"Count\",fontdict=font)\nplt.ylabel(\"Type of EMS Emergency\",fontdict=font)\nplt.title(\"Frequently appeared ( top 10 ) type of EMS Emergency\",fontdict=font)\nplt.savefig('Top10-EMS-Emergency.png')\nplt.show()\n","09498e0f":"fire = df[df['type']=='Fire']\nfire['type'] = fire[\"title\"].apply(lambda x: x.split(':')[1].strip())\nfire.head()","7fd6e244":"fire_type = pd.DataFrame(fire['type'].value_counts(sort=True, ascending=False)).iloc[:10,:]\nfire_type.head()","382739f6":"plt.figure(figsize=(12,8))\nsns.barplot(x=fire_type['type'],y=fire_type.index,data=fire_type,palette=\"viridis\") \nplt.xlabel(\"Count\",fontdict=font)\nplt.ylabel(\"Type of Fire Emergency\",fontdict=font)\nplt.title(\"Frequently appeared ( top 10 ) type of Fire Emergency\",fontdict=font)\nplt.savefig('Top10-Fire-Emergency.png')\nplt.show()\n","74e76d9f":"traffic = df[df['type']=='Traffic']\ntraffic['type'] = traffic[\"title\"].apply(lambda x: x.split(':')[1].strip())\ntraffic.head()","dc83e553":"traffic_type = pd.DataFrame(traffic['type'].value_counts(sort=True, ascending=False)).iloc[:10,:]\ntraffic_type.head()","8cb158dd":"plt.figure(figsize=(12,8))\nsns.barplot(x=traffic_type['type'],y=traffic_type.index,data=traffic_type,palette=\"viridis\") \nplt.xlabel(\"Count\",fontdict=font)\nplt.ylabel(\"Type of Traffic Emergency\",fontdict=font)\nplt.title(\"Frequently appeared ( top 10 ) type of Traffic Emergency\",fontsize=18)\nplt.savefig('Top10-Traffic-Emergency.png')\nplt.show()\n","b63c88cf":"df.head()","4f9b06c5":"tempdate = df.index\ndf['tempdate']=tempdate\ndf.head(3)","c3f67a02":"df['year'] = df['tempdate'].dt.year\ndf.head(3)","7f23d889":"df['month'] = df['tempdate'].dt.month_name()\ndf.head(3)","bd63efda":"df['day']=df['tempdate'].dt.day_name()\ndf.head(3)","c966cf39":"df['hours'] =df['tempdate'].dt.hour\ndf.head(3)","7e69f514":"df.drop(['tempdate'],axis=1,inplace=True)","82fd8421":"df.head(3)","5d18a064":"calls_month = df.groupby(['month', 'type'])['type'].count()","90bac0cd":"calls_month\n","18f025ca":"calls_month_percent = calls_month.groupby(level=0).apply(lambda x:round(100*x\/float(x.sum())))","b0f97e27":"calls_month_percent","8e246141":"month_seq = [dt.date(2019, m, 1).strftime('%B') for m in range(1, 13)]","5fd3c60b":"month_seq","efeed50d":"#reindexing level 0\ncalls_month_percent=calls_month_percent.reindex(month_seq, level=0)","701a43bd":"calls_month_percent","e6b442e0":"# reindexing level 1\ncalls_month_percent = calls_month_percent.reindex(['EMS','Traffic','Fire'], level=1)","8acec48d":"calls_month_percent","eb8608be":"sns.set(rc={'figure.figsize':(12, 8)})\ncalls_month_percent.unstack().plot(kind='bar')\nplt.xlabel('Name of the Month', fontdict=font)\nplt.ylabel('Percentage of Calls', fontdict=font)\nplt.xticks(rotation=30)\nplt.title('Calls\/Month', fontdict=font)\nplt.savefig('call_vs_month.png')","7f498c8c":"calls_day = df.groupby(['day','type'])['type'].count()","2543d930":"calls_day","8fb96b35":"calls_day_percent = calls_day.groupby(level=0).apply(lambda x:round(100*x\/float(x.sum())))","ab4be13e":"calls_day_percent","0ff42936":"import calendar\nday_seq = list(calendar.day_name)\nday_seq","653047a2":"calls_day_percent=calls_day_percent.reindex(day_seq, level=0)\ncalls_day_percent = calls_day_percent.reindex(['EMS','Traffic','Fire'], level=1)","a2e6a41a":"calls_day_percent","9d158092":"sns.set(rc={'figure.figsize':(12, 8)})\ncalls_day_percent.unstack().plot(kind='bar')\nplt.xlabel('Name of the Day', fontdict=font)\nplt.ylabel('Percentage of Calls', fontdict=font)\nplt.xticks(rotation=30)\nplt.title('Calls\/Day', fontdict=font)\nplt.savefig('call_vs_day.png')","f2463399":"calls_hour = df.groupby(['hours','type'])['type'].count()","b82653c4":"calls_hour","a0faabe3":"calls_hour_percent = calls_hour.groupby(level=0).apply(lambda x:round(100*x\/float(x.sum())))","fd196c09":"calls_hour_percent","05464081":"calls_hour_percent = calls_hour_percent.reindex(['EMS','Traffic','Fire'], level=1)","7c2e45ce":"calls_hour_percent","589c0ee5":"sns.set(rc={'figure.figsize':(12, 8)})\ncalls_hour_percent.unstack().plot(kind='bar')\nplt.xlabel('Hour', fontdict=font)\nplt.ylabel('Percentage of Calls', fontdict=font)\nplt.xticks(rotation=30)\nplt.title('Calls\/Hour', fontdict=font)\nplt.savefig('call_vs_hour.png')","6c01b2fc":"# Extracting data for EMS\nems_city = df[df['type']=='EMS']","d910e2e5":"ems_city.shape","d0e33e2e":"ems_city.head()","940aab77":"# Extracting data for Traffic\ntraffic_city =df[df['type']=='Traffic']","43d5d38f":"traffic_city.shape","d67498a1":"traffic_city.head()","a8bbc07c":"# Extracting Data for Fire\nfire_city = df[df['type']=='Fire']","72141500":"fire_city.shape","aa7a0ae2":"fire_city.head()","3c7bc6d6":"gdf_traffic = gpd.GeoDataFrame(traffic_city)\ngdf_traffic.head()","a6bc37d0":"gdf_traffic.dtypes","7a745b3d":"new_geo = gpd.GeoDataFrame()\nnew_geo['lat']=gdf_traffic['lat'].astype('float64')\nnew_geo['lng']=gdf_traffic['lng'].astype('float64')\nnew_geo['title']=gdf_traffic['title'].astype('object')\nlocation = new_geo['lat'].mean(), new_geo['lng'].mean()\n\nnew_geo.shape","34d4cf14":"new_geo.head()\n","51565f7d":"locationlist = new_geo[['lat','lng']].values.tolist()\nlabels = \"CITY => \"+ gdf_traffic['twp']+\"\\n\"+gdf_traffic['title']\n\nm = folium.Map(location=location, zoom_start=10)\n\n\nfor point in range(1,100): \n    popup = folium.Popup(labels[point], parse_html=True)\n    icon = folium.Icon(color='orange')\n    folium.Marker(locationlist[point], popup=popup, icon=icon).add_to(m)\n    \nm.save(outfile= \"Traffic.html\")\nm","2f3b4752":"gdf_fire = gpd.GeoDataFrame(fire_city)\ngdf_fire.head()","f78120e5":"new_geo = gpd.GeoDataFrame()\nnew_geo['lat']=gdf_fire['lat'].astype('float64')\nnew_geo['lng']=gdf_fire['lng'].astype('float64')\nlocation = new_geo['lat'].mean(), new_geo['lng'].mean()\n\nnew_geo.shape","f0498d49":"new_geo.head()","b951b876":"locationlist = new_geo[['lat','lng']].values.tolist()\n\nlabels = \"CITY => \"+ gdf_fire['twp']+\"\\n\"+gdf_fire['title']\n\nm = folium.Map(location=location, zoom_start=10)\n\nfor point in range(1,100): \n    popup = folium.Popup(labels[point], parse_html=True)\n    icon = folium.Icon(color='purple')\n    folium.Marker(locationlist[point], popup=popup,icon=icon).add_to(m)\n\nm.save(outfile=\"Fire.html\")\nm","a05eb084":"gdf_ems = gpd.GeoDataFrame(ems_city)\ngdf_ems.head()","705354f9":"new_geo = gpd.GeoDataFrame()\nnew_geo['lat']=gdf_ems['lat'].astype('float64')\nnew_geo['lng']=gdf_ems['lng'].astype('float64')\nlocation = new_geo['lat'].mean(), new_geo['lng'].mean()\n\nnew_geo.shape","1968b819":"new_geo.head()","df076b0b":"locationlist = new_geo[['lat','lng']].values.tolist()\n\nlabels = \"CITY => \"+ gdf_ems['twp']+\"\\n\"+gdf_ems['title']\n\nm = folium.Map(location=location, zoom_start=10)\n\nfor point in range(1,100): \n    popup = folium.Popup(labels[point], parse_html=True)\n    icon = folium.Icon(color='blue')\n    folium.Marker(locationlist[point], popup=popup,icon=icon).add_to(m)\n    \nm.save(outfile= \"EMS.html\")\nm","7934c7ba":"gdf = gpd.GeoDataFrame(df)\ngdf.head()","e90c5962":"new_geo = gpd.GeoDataFrame()\nnew_geo['lat']=gdf['lat'].astype('float64')\nnew_geo['lng']=gdf['lng'].astype('float64')\nnew_geo['type']=gdf['type'].astype('object')\nlocation = new_geo['lat'].mean(), new_geo['lng'].mean()\n\nnew_geo.shape","ef6f44f6":"locationlist = new_geo[['lat','lng']].values.tolist()\nlabels = \"CITY => \"+ gdf['twp']+\"\\n\"+gdf['title']\netype = gdf['type'].values.tolist()\n\nm = folium.Map(location=location, zoom_start=10)\n\nfor point in range(1,300):\n    if(etype[point] == 'EMS'):\n        icon = folium.Icon(color='blue')\n        label=labels[point]\n    elif(etype[point]=='Traffic'):\n        icon = folium.Icon(color='purple')\n        label=labels[point]\n    elif(etype[point]=='Fire'):\n        icon = folium.Icon(color='red')\n        label=labels[point]\n    \n    popup = folium.Popup(label, parse_html=True)\n    folium.Marker(locationlist[point], popup=popup, icon=icon).add_to(m)\n    \nm.save(outfile= \"All-Map-In-One.html\")\nm","52046d16":"# Calls\/Day group by it's type","ace78359":"# Dividing Data Based on It's Type EMS, Traffic, Fire.","3f08fc0b":"##### Getting 'hours' attribute from 'tempdate' ","5117513d":"# Fire Type","31110ef8":"\n\n# Fire Call Locations on Map","6e3aaf86":"* EMS calls are more during weekends compare to weekdays - Saturday, Sunday(max)\n* Traffic calls are more during weekdays compare to otherdays","c09b8ded":"# FIRE PIE CHART","9daa2d90":"# More data exploration based on Date and Time","926c314a":"### Defining Crosstab for town and type of emergency","dfaf0fd6":"# Calls\/Month group by it's type","dc6540eb":"#### Calculating percentage share of each type","3955790f":"##### Creating temporary 'tempdate' attribute","3b40aaff":"#### From Lower Merion maximum Traffic calls are recieved (top 10 Fire calls cities)","0be263c0":"##### Dropping 'tempdate' from data frame","ab80800c":"# All Maps in One","27383e4b":"### Resetting Index","a485d48c":"#### From Norristown maximum ems calls are recieved (top 10 EMS calls cities)","f9b5b706":"# EMS PIE CHART","1b3c6d30":"### Defining 'type' attribute by spliting title","7b1ecdb4":"### Reading and parsing data","a15799c0":"# Traffic Call Locations on Map","3e088323":"# Total number of calls and it's type","53934b20":"##### Getting 'month' attribute from 'tempdate' ","dab675fe":"##### Getting 'day' attribute from 'tempdate' ","b48365d5":"##### Getting 'year' attribute from 'tempdate' ","bb64a2c0":"# EMS Call Locations on Map","2f007f5c":"#### In Fire emergency - Fire Alarm has maximum share","d75beeb1":"#### In EMS emergency - Fall Victims has maximum share","5898e1fc":"# EMS TYPE","fffe06d4":"#### In Traffic emergency - Vehicle Accident has maximum share","617c7588":"# Traffic Type","ea0577b9":"# Traffic PIE CHART","9e05e106":"#### From Lower Merion maximum fire calls are recieved (top 10 Fire calls cities)","efa80f5c":"# Calls\/Hour group by it's type"}}