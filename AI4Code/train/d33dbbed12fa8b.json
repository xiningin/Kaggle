{"cell_type":{"7bcf9443":"code","19c0a375":"code","1d32a729":"code","5c64b28d":"code","3eac69f1":"code","b83f0222":"code","05c0a207":"code","ab4eefab":"code","4d0613f0":"code","269c8ff2":"code","f2e81164":"code","965de157":"code","793ee4ca":"code","187a3fdd":"code","8b08c745":"code","b7749d2a":"code","ac3146ac":"code","0123cbf4":"code","f87a3d1e":"code","1c5f3f4f":"code","548c9c37":"code","c12d96c3":"markdown"},"source":{"7bcf9443":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","19c0a375":"data =pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","1d32a729":"data.tail()","5c64b28d":"data.diagnosis.value_counts()","3eac69f1":"data.diagnosis =[1 if each =='B'else 0 for each in data.diagnosis] #y kolonu yapacag\u0131m kolonu int degerlere cevirdim","b83f0222":"data.tail()","05c0a207":"data.drop(['id','Unnamed: 32'],axis=1,inplace=True)","ab4eefab":"x,y=data.loc[:,data.columns !='diagnosis'],data.loc[:,data.columns =='diagnosis'] ","4d0613f0":"data.columns","269c8ff2":"x","f2e81164":"from sklearn.model_selection import train_test_split #verimi egitim test diye b\u00f6ld\u00fcm\nx_train,x_test,y_train,y_test =train_test_split(x,y,test_size=0.3,random_state=42)","965de157":"#Logistic Regressor\nfrom sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train,y_train)\ny_head=lr.predict(x_test)\nlr.score(x_test,y_test) #ger\u00e7ek degerler ve tahminler aras\u0131 dogruluk oran\u0131","793ee4ca":"#KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nknn =KNeighborsClassifier(n_neighbors =10)\nknn.fit(x_train,y_train)\nknn.score(x_test,y_test)","187a3fdd":"score_list=[]\nfor i in range(1,20):\n    knn2=KNeighborsClassifier(n_neighbors =i)\n    knn2.fit(x_train,y_train)\n    ss=knn2.score(x_test,y_test)\n    score_list.append(ss)\n\nplt.figure(figsize=[10,6])\nplt.plot(range(1,20),score_list)\nplt.xlabel('score_value')\nplt.ylabel('score output')\nplt.show()\n    ","8b08c745":"#SVM\nfrom sklearn.svm import SVC\nsvm =SVC(random_state=12)\nsvm.fit(x_train,y_train)\ny_head=svm.predict(x_test)\nsvm.score(x_test,y_test)","b7749d2a":"#Naive_Bayes\nfrom sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(x_train,y_train)\ny_head=nb.predict(x_test)\nnb.score(x_test,y_test)","ac3146ac":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(x_train,y_train)\ny_head =dt.predict(x_test)\ndt.score(x_test,y_test)","0123cbf4":"#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nrf =RandomForestClassifier(n_estimators=100,random_state=12)\nrf.fit(x_train,y_train)\ny_head=rf.predict(x_test)\nrf.score(x_test,y_test)\n","f87a3d1e":"score_list2 =[]\nfor i in range (2,250):\n    rf2 =RandomForestClassifier(n_estimators=i,random_state=12)\n    rf2.fit(x_train,y_train)\n    ll=rf2.score(x_test,y_test)\n    score_list2.append(ll)\n\nplt.figure(figsize=[13,7])\nplt.plot(range(2,250),score_list2)\nplt.xlabel('score_value')\nplt.ylabel('output_score')\nplt.show()","1c5f3f4f":"#Random Forest_Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_head)\ncm","548c9c37":"import seaborn as sns\nf,ax =plt.subplots(figsize=(5,5))\nsns.heatmap(cm,annot =True,linewidths=0.5,linecolor='red',fmt='.0f',ax=ax)\nplt.xlabel('y_pred')\nplt.ylabel('y_true')\nplt.show()","c12d96c3":" # ASDA\n * veriyi tan\u0131yacaz\n * obje(string) kolon varsa = int kolona \u00e7evirecez\n * x ,y diye ay\u0131racaz verinizi\n * x kolonlar\u0131m\u0131za normalizasyon uygulayacaz\n * x,y leri egitim-test diye ay\u0131racaz\n * knn,svm ,logistic s\u0131n\u0131fland\u0131rmalara g\u00f6re s\u0131n\u0131fland\u0131rmam\u0131z\u0131 yapacaz\n \n"}}