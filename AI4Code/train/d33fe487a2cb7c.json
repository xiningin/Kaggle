{"cell_type":{"89e12bad":"code","5c566cac":"code","be3e68d3":"code","f6db885a":"code","aaf28a92":"code","99faaa79":"code","fb1716a8":"code","8d1b6de8":"code","26e20916":"code","b956f879":"code","15279458":"code","564e1426":"code","e3b1b40d":"code","e2fafc21":"code","dd09f845":"code","6a7dbf84":"code","4e3e7b22":"code","ec0ccc58":"code","b49a4bda":"code","8bc98b7b":"markdown","936ac4f8":"markdown","aed14999":"markdown","b57d52ca":"markdown","bf890c7d":"markdown"},"source":{"89e12bad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c566cac":"import os\nimport re\nimport numpy as np\nimport pandas as pd\nfrom textblob import TextBlob\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='darkgrid', context='talk', palette='Dark2')\nimport nltk\nfrom nltk import word_tokenize","be3e68d3":"data = \"\/kaggle\/input\/amazon-music-reviews\/Musical_instruments_reviews.csv\"\ndf = pd.read_csv(data)\ndf.head()","f6db885a":"from nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA\n\nsid = SIA()\nresults = []\n\ndef get_sentiment(row, **kwargs):\n    sentiment_score = sid.polarity_scores(row)\n    positive_meter = round((sentiment_score['pos'] * 10), 2)\n    negative_meter = round((sentiment_score['neg'] * 10), 2) \n    return positive_meter if kwargs['k'] == 'positive' else negative_meter\n\ndf['positive'] = df.summary.apply(get_sentiment, k='positive')\ndf['negative'] = df.summary.apply(get_sentiment, k='negative')\ndf['neutral'] = df.summary.apply(get_sentiment, k='neutral')\ndf['compound'] = df.summary.apply(get_sentiment, k='compound')\n\n#for index, row in df.iterrows(): \n #  print(\"Positive : {}, Negative : {}, Neutral : {}, Compound : {}\".format(row['positive'], row['negative'], row['neutral'], row['compound']))","aaf28a92":"df.head()","99faaa79":"df['label'] = 0\ndf.loc[df['positive'] > 5, 'label'] = 1\ndf.loc[df['negative'] > 3, 'label'] = -1\ndf.head()","fb1716a8":"#save new data for easy use\ndf.rename(columns={'overall':'overallRating'}, inplace=True)\ndf2 = df[['reviewerName', 'reviewText', 'overallRating', 'summary', 'reviewTime', 'positive', 'negative', 'neutral', 'label']]\ndf2.to_csv('Amazon_musical_instrument_review.csv', mode='a', encoding='utf-8', index=False)\ndf2.head()","8d1b6de8":"#Checking how many positives and negatives we have in the data\n#The first line gives us raw value counts of the labels, \n#whereas the second line provides percentages with the normalize keyword.\n\nprint(df2.label.value_counts())\n\nprint(df2.label.value_counts(normalize=True) * 100)","26e20916":"#Plotting a bar chart\n\nsns.set(rc={'figure.figsize':(8,6)})\n\ncounts = df2.label.value_counts(normalize=True) * 100\n\nax = sns.barplot(x=counts.index, y=counts)\nax.set(title=\"Plot of Percentage Sentiment\");\nax.set_xticklabels(['Negative', 'Neutral', 'Positive']);\nax.set_ylabel(\"Percentage\");","b956f879":"#boxplot to see average values of the labels and the postivity\n\n\nboxplot = df2.boxplot(column=['positive','label'], \n                     fontsize = 15,grid = True, vert=True,figsize=(8,5,))\nplt.ylabel('Range');","15279458":"#Classify Ratings based on high or low\n\ndef convert_rating(rating_values):\n    if(int(rating_values == 1) or int(rating_values) == 2 or int(rating_values) == 3):\n        return 0\n    else:\n        return 1\n   \ndf2[\"Ratings_classified\"] = df2[\"overallRating\"];\ndf2.Ratings_classified = df2.Ratings_classified.apply(convert_rating)","564e1426":"df2.head()\ndf2.overallRating.value_counts()\nsns.set(rc={'figure.figsize':(8,6)})\nax = sns.countplot(x = 'Ratings_classified' , hue = 'Ratings_classified' , data = df2).set(title=\"Classification of Ratings based on high or low\", xlabel=\"Ratings\", ylabel=\"Quantity\")\nplt.legend([\"Low (<=3)\", \"High(>3)\"])\nplt.show()","e3b1b40d":"#Ratings Distribution for dataset\n\nplt.hist(df2['overallRating'], color = 'darkblue', edgecolor = 'black', density=False,\n         bins = int(30))\nplt.title('Ratings Distribution');\nplt.xlabel(\"Ratings\");\nplt.ylabel(\"Number of TImes\");\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 8,8","e2fafc21":"#Placing a density curve on the distribution\n\nsns.distplot(df2['overallRating'], hist=True, kde=True, \n             bins=int(30), color = 'darkred',\n             hist_kws={'edgecolor':'black'},axlabel ='Ratings')\nplt.title('Ratings Density')\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 8,8","dd09f845":"#nltk.download()\n\nstopwords = nltk.corpus.stopwords.words('english')\nRE_stopwords = r'\\b(?:{})\\b'.format('|'.join(stopwords))\nwords = (df.summary\n           .str.lower()\n           .replace([r'\\|',r'\\&',r'\\-',r'\\.',r'\\,',r'\\'', RE_stopwords], [' ', '','','','','',''], regex=True)\n           .str.cat(sep=' ')\n           .split()\n)","6a7dbf84":"from collections import Counter\n\n# generate DF out of Counter\nrslt = pd.DataFrame(Counter(words).most_common(10),\n                    columns=['Word', 'Frequency']).set_index('Word')\nrslt","4e3e7b22":"rslt_wordcloud = pd.DataFrame(Counter(words).most_common(100),\n                    columns=['Word', 'Frequency'])\n#BAR CHART\nrslt.plot.bar(rot=40, figsize=(10,6), width=0.8,colormap='tab10')\nplt.title(\"Commonly used words by Buyers of the Amazon Musical Instrument\")\nplt.ylabel(\"Count\")\n\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 8,6","ec0ccc58":"#PIE CHART\n\nexplode = (0.1, 0.12, 0.122, 0,0,0,0,0,0,0)  # explode 1st slice\nlabels=['great',\n        'good',\n        'nice',\n        'guitar',\n        'works',\n        'price',\n        'strings',\n        'best',\n        'quality',\n        'stand',]\n\nplt.pie(rslt['Frequency'], explode=explode,labels =labels , autopct='%1.1f%%',\n        shadow=False, startangle=90)\nplt.legend( labels, loc='best',fontsize='x-small',markerfirst = True)\nplt.tight_layout()\nplt.title(\"Commonly used words by Buyers of the Amazon Musical Instrument\")\nplt.show()\n\nimport matplotlib as mpl\nmpl.rcParams['font.size'] = 10","b49a4bda":"from PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport random\n\nwordcloud = WordCloud(max_font_size=60, max_words=100, width=480, height=380,colormap=\"brg\",\n                      background_color=\"white\").generate(' '.join(rslt_wordcloud['Word']));\n                      \nplt.imshow(wordcloud, interpolation='bilinear');\nplt.axis(\"off\");\nplt.figure(figsize=[10,10]);\nplt.show();","8bc98b7b":"#### Note:\n\n##### Assumptions\n- Values greater than 5 in positive column are considered positive\n- Values greater than 3 in negative column are considered negative\n- Values less than 5 in positive column and values less than 3 in negative are considered neutral","936ac4f8":"### Frequent Words\n\n_In natural language processing, useless words (data), are referred to as Stop Words_","aed14999":"### Make a wordcloud of common words in the review","b57d52ca":"### Using NLTK Vader Sentiment Analysis to get polarity score\n\nVader Sentiment Analyzer will simply rank a piece of text as positive, negative or neutral using a lexicon of positive and negative words","bf890c7d":"#### NOTE\n\n_`positive`, `negative` and `neutral` columns represent the sentiment score percentage of each category in our review summary, and the compound is the single number that scores the sentiment. `compound` ranges from -1 (Extremely Negative) to 1 (Extremely Positive)._\n\n#### *Now, considering post with compound greater than 0.2 as positive label and less than -0.2 as negative label*\ndf['label'] = 0\ndf.loc[df['compound'] > 0.2, 'label'] = 1\ndf.loc[df['compound'] < -0.2, 'label'] = -1\ndf.head()\n\n#### *In this code, we use label = 1 for positive greater than 5 and label = -1 for negative greater than 3*"}}