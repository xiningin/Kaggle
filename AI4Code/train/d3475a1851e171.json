{"cell_type":{"fe930676":"code","45a3f125":"code","1e96bece":"code","64d52759":"code","a7d15901":"code","acbc56ff":"code","1b82476e":"code","d5c6e0a2":"code","1939b3fd":"code","583ecf5b":"code","f2083af5":"code","504bdf8c":"code","543ad593":"markdown"},"source":{"fe930676":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom mlxtend.frequent_patterns import apriori, association_rules\nfrom mlxtend.preprocessing import TransactionEncoder\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45a3f125":"## Read the dataset\ndf = pd.read_csv('\/kaggle\/input\/online-retail-data-set-from-ml-repository\/retail_dataset.csv', sep=',')\ndf.head()","1e96bece":"df.info()","64d52759":"## Make list of the dataset\nrecords = []\nfor i in range(1, 315):\n    records.append([str(df.values[i, j]) for j in range(0, 7)])","a7d15901":"records","acbc56ff":"## Encode the data for machine to read \n\nte = TransactionEncoder()\nte_ary = te.fit(records).transform(records)\ndf1 = pd.DataFrame(te_ary, columns = te.columns_)\ndf1.head()","1b82476e":"## Find Frequent items using apriori algorithm\n\nfrequent_itemsets = apriori(df1, min_support=0.2, use_colnames=True)\nfrequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))\nfrequent_itemsets","d5c6e0a2":"## association with confidence metric\n\nassociation_rules(frequent_itemsets, metric=\"confidence\", min_threshold=0.5)","1939b3fd":"rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1.0)\nrules","583ecf5b":"rules[\"antecedent_len\"] = rules[\"antecedents\"].apply(lambda x: len(x))\nrules","f2083af5":"## Find the items which match the required criteria\n\nrules[ (rules['antecedent_len'] >= 2) &\n       (rules['confidence'] > 0.5) &\n       (rules['lift'] > 1.0) ]","504bdf8c":"## Plot a graph between lift and confidence values using antecedent length\n\nimport matplotlib.pyplot as plt\nfrom mlxtend.plotting import category_scatter\n\nfix = category_scatter(x = \"lift\", y = \"confidence\", label_col = \"antecedent_len\", \n                       data=rules, legend_loc= \"lower right\")","543ad593":"**Market Based Analysis** is one of the key techniques used by large relations to show associations between items.It allows retailers to identify relationships between the items that people buy together frequently.\n\nGiven a set of transactions, we can find rules that will predict the occurrence of an item based on the occurrences of other items in the transaction.\n\n**Association Rule** \u2013 An implication expression of the form X -> Y, where X and Y are any 2 itemsets.\n**Rule Evaluation Metrics** \u2013\n\n**Support(s)** \u2013\nThe number of transactions that include items in the {X} and {Y} parts of the rule as a percentage of the total number of transaction.It is a measure of how frequently the collection of items occur together as a percentage of all transactions.\n**Support = \\sigma(X+Y) \\div total \u2013** \nIt is interpreted as fraction of transactions that contain both X and Y.\n**Confidence(c)** \u2013\nIt is the ratio of the no of transactions that includes all items in {B} as well as the no of transactions that includes all items in {A} to the no of transactions that includes all items in {A}.\n**Conf(X=>Y) = Supp(X\\cupY) \\div Supp(X) \u2013**\nIt measures how often each item in Y appears in transactions that contains items in X also.\n**Lift(l)** \u2013\nThe lift of the rule X=>Y is the confidence of the rule divided by the expected confidence, assuming that the itemsets X and Y are independent of each other.The expected confidence is the confidence divided by the frequency of {Y}.\n**Lift(X=>Y) = Conf(X=>Y) \\div Supp(Y) \u2013**\nLift value near 1 indicates X and Y almost often appear together as expected, greater than 1 means they appear together more than expected and less than 1 means they appear less than expected.Greater lift values indicate stronger association.\n\nSource: https:\/\/www.geeksforgeeks.org\/association-rule\/"}}