{"cell_type":{"435d3c91":"code","aeda28ec":"code","fb895679":"code","d9658c69":"code","f8690d95":"code","a2988d3d":"code","812645e1":"code","a68debbc":"code","791326f5":"code","dc493b87":"code","d778ff00":"code","0e0901d4":"code","1770ea66":"code","73cf50b1":"code","57fb1930":"code","c9b0d1b8":"code","12c95299":"code","02458c22":"code","baa73eeb":"code","5125cbe3":"code","17a53ead":"markdown","b9a90cb8":"markdown","037ad4a0":"markdown","03a5055d":"markdown"},"source":{"435d3c91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aeda28ec":"data = pd.read_csv('..\/input\/glass\/glass.csv')","fb895679":"data.head()","d9658c69":"data.shape","f8690d95":"data.dtypes","a2988d3d":"data.isnull().sum()","812645e1":"data.describe()","a68debbc":"data.corr()['Type'].sort_values()","791326f5":"import seaborn as sns \nimport matplotlib.pyplot as plt \nplt.figure(figsize=(12,10))\nax = sns.heatmap(data.corr())","dc493b87":"fig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndata.hist(ax=ax)\nplt.show()","d778ff00":"X = data.drop(['Type','Mg'],axis=1)\ny = data['Type']","0e0901d4":"y.head()","1770ea66":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.33, random_state=42)","73cf50b1":"y_train.head()","57fb1930":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {'n_estimators':[300,400,500,600,700,800],\n              'max_depth':[5,6,7,8,9,10] ,\n              'n_jobs':[-1],\n              'max_features':[3,4,5]}\ngrid_search = GridSearchCV(estimator=RandomForestClassifier(),\n             param_grid=parameters)","c9b0d1b8":"grid_search.fit(X_train,y_train)","12c95299":"best_param= grid_search.best_params_\nbest_param","02458c22":"best_model = grid_search.best_estimator_","baa73eeb":"y_pred= best_model.predict(X_test)","5125cbe3":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","17a53ead":"# Exploring & Visualization The Data ","b9a90cb8":"# Building  Model","037ad4a0":"# Loading Data","03a5055d":"### Split Data "}}