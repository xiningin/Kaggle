{"cell_type":{"b3dd2b5b":"code","8d0bdc32":"code","f7c9b473":"code","14f7fdee":"code","6c03478f":"code","c9cdd44f":"code","e39dbfc1":"code","19e14218":"code","e8bf1ba1":"code","9f25ec97":"code","8d0523ae":"code","b63a8df9":"code","3a9baa44":"code","bcffbb15":"code","07a9c76b":"code","4640db64":"code","a36b2ba1":"code","48de249f":"code","3b754f50":"code","879dc5c4":"code","fc518261":"code","8e5c0327":"code","6e371d8a":"code","45713579":"code","29f36022":"code","45ebbf45":"code","e560ed8e":"code","f9c3a8b5":"code","a68bc822":"code","84b08142":"code","20b26843":"code","49a0d8cb":"code","503a4442":"code","9900e2f9":"code","b1af4b6c":"code","ac1e711c":"code","6647daa4":"code","c8cac5e8":"code","596e4bfa":"code","d95a018e":"code","3ec8112a":"code","87ab81f5":"code","f1638513":"code","7ad37203":"code","5f4280a9":"code","c73ed755":"markdown","d6fb6dce":"markdown","f96d19c1":"markdown","ac585d8d":"markdown"},"source":{"b3dd2b5b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.preprocessing import StandardScaler\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","8d0bdc32":"pd.set_option('display.max_rows', 200)\npd.set_option('display.max_columns', 200)","f7c9b473":"sec=pd.read_csv('..\/input\/nysedata\/securities.csv')\nsec.head()","14f7fdee":"fnd=pd.read_csv('..\/input\/nysedata\/fundamentals.csv')\nfnd.head()","6c03478f":"pd.options.display.max_columns = None \npd.options.display.max_rows = None\n","c9cdd44f":"cols = []\nfor col in fnd.columns:\n    cols.append(col.strip().replace(' ', '_'))\ncols[:5]","e39dbfc1":"new_cols = []\nfor col in cols:\n    name = ''\n    new_cols.append(name.join(re.findall('[\\w\\s]', col)))\nnew_cols[:5]","19e14218":"fnd = fnd.rename(columns = dict(zip(fnd.columns, new_cols)))\nfnd.head(2)","e8bf1ba1":"\nfnd.isnull().sum().sum()\nfnd.shape","9f25ec97":"fnd = fnd.dropna(axis=1)\nfnd.isnull().sum().sum()\nfnd.shape","8d0523ae":"fnd.dtypes.value_counts()\n","b63a8df9":"g = pd.DataFrame(fnd.groupby('Ticker_Symbol').mean())\nscaler = StandardScaler()\ng = scaler.fit_transform(g)\ng = pd.DataFrame(g, columns = fnd.groupby('Ticker_Symbol').mean().columns,\n                 index = fnd.groupby('Ticker_Symbol').mean().index)\ng.head(3)","3a9baa44":"gcp = g.copy()\norig_cols = g.columns","bcffbb15":"def get_km_clusters(fnd, nc):\n# function to fit KMeans on the dataset and calculate the inertia    \n    \n    fndc = fnd.copy()\n    km = KMeans(n_clusters = nc, random_state=21)\n    clusters = km.fit_predict(fndc.select_dtypes('float64'))\n    fndc['cluster'] = clusters\n    return km.inertia_, silhouette_score(fndc.select_dtypes('float64'), clusters), fndc","07a9c76b":"inertia = []\nsilhouette = []\nn_clusters=[]\ninertia_change = [0]\nfor n in range(2,16):\n    i, s, _ = get_km_clusters(g, n)\n    inertia.append(i)\n    silhouette.append(s)\n    n_clusters.append(n)\n    inertia_change.append(abs(inertia_change[-1] - i))\n    plt.figure(figsize=(7,6));\nplt.plot(n_clusters, inertia, marker = 'o')\nplt.xlabel('Number of Clusters');\nplt.ylabel('Inertia');\nplt.title('INERTIA');\n\nplt.figure(figsize=(7,6));\nplt.plot(n_clusters, silhouette, marker = 'o')\nplt.xlabel('Number of Clusters');\nplt.ylabel('Silhouette score');\nplt.title('SILHOUETTE SCORE');","4640db64":"# plot to see the decrease in inertia upon adding 2 additional cluster\ninertia_change = inertia_change[1:]\ninertia_change[0] = 0\nplt.plot(n_clusters, inertia_change, marker = 'o')\nplt.plot(n_clusters, inertia_change, marker = 'o')\nplt.plot(n_clusters, inertia_change, marker = 'o')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Decrease in inertia');","a36b2ba1":"#we can take 5 or 7 clusters\nkm = KMeans(n_clusters=5, random_state=21)\nclusters = km.fit_predict(g.select_dtypes('float64'))\ng['cluster'] = clusters\ng.head(2)","48de249f":"# PROFIT MARGIN\n\ng.groupby('cluster')['Profit_Margin'].mean().plot(kind='barh')\nplt.xlabel('Profit Margin');","3b754f50":"# REVENUE\ng.groupby('cluster')['Total_Revenue'].mean().plot(kind='barh')\nplt.xlabel('Total Revenue');","879dc5c4":"sec = sec[['Ticker symbol', 'Security','GICS Sector','GICS Sub Industry']]\nsec.head(2)","fc518261":"fl = g.merge(sec, right_on = 'Ticker symbol', left_index=True)\nfl.index = g.index\nfl.head()","8e5c0327":"fl['GICS Sector'].nunique()\nfl['GICS Sub Industry'].nunique()","6e371d8a":"fl.groupby('cluster').agg(\n    {'Ticker symbol':'count', \n     'GICS Sub Industry': 'nunique',\n     'GICS Sector': 'nunique'})","45713579":"fl.loc[fl['cluster'] == 4]\nfl.loc[fl['cluster'] == 1]['Security']","29f36022":"#Guassian Mixture models with 5 clusters\ngm = GaussianMixture(n_components=5)","45ebbf45":"def get_gm_clusters(df, nc):\n# function to fit KMeans on the dataset and calculate the inertia    \n    \n    dff = fnd.copy()\n    gm = GaussianMixture(n_components = nc, random_state=21)\n    clusters = gm.fit_predict(dff.select_dtypes('float64'))\n    return clusters","e560ed8e":"g.groupby('cluster')['Profit_Margin'].mean().plot(kind='barh')\nplt.xlabel('Profit Margin');\nplt.title('Profit Margin')\nplt.show()\n\ng.groupby('cluster')['Total_Revenue'].mean().plot(kind='barh')\nplt.xlabel('Total Revenue');\nplt.title('Total Revenue');","f9c3a8b5":"fl1= g.merge(sec, right_on = 'Ticker symbol', left_index=True)\nfl1.index = g.index\nfl1.head(2)","a68bc822":"fl1.groupby('cluster')['GICS Sector'].unique()\n\nfl1.groupby('cluster').agg(\n    {'Ticker symbol':'count', \n     'GICS Sub Industry': 'nunique',\n     'GICS Sector': 'nunique'})","84b08142":"fl1.loc[fl1['cluster'].isin([3])]","20b26843":"bank_tickers = ['BAC','C', 'WFC', 'JPM']","49a0d8cb":"sns.displot(g['Goodwill'])","503a4442":"g['Goodwill'].mean(), g.loc[bank_tickers, 'Goodwill'].mean()","9900e2f9":"col_subset = ['Net_Borrowings', 'Net_Cash_Flow','Total_Assets', 'Total_Current_Assets',\n              'Total_Current_Liabilities', 'Total_Equity', 'Total_Liabilities',\n              'Total_Liabilities__Equity', 'Total_Revenue']","b1af4b6c":"g.loc[bank_tickers, col_subset].mean().plot(kind='barh')\nplt.xlabel('Mean value for global bank tickers (outliers)');\nplt.title('Financial performance');","ac1e711c":"g.drop(bank_tickers).loc[:, col_subset].mean().plot(kind='barh')\nplt.xlabel('Mean value for tickers other than the 4 global banks')\nplt.title('Financial performance');","6647daa4":"price = pd.read_csv('..\/input\/nysedata\/prices-split-adjusted.csv')\nprice.head()","c8cac5e8":"price['range'] = price['high'] - price['low']\nprice['return']= price['close']- price['open']\nprice = price.merge(sec, left_on = 'symbol', right_on = 'Ticker symbol', how='inner')\nfor symbol in price['symbol'].sample(5):\n    print(symbol)\n    sns.displot(price.loc[price['symbol'] == symbol]['return'])","596e4bfa":"df = price.merge(sec, right_on='Ticker symbol', left_on = 'symbol', how='inner')\ndf.set_index('symbol', inplace=True)\ndf.head(2)","d95a018e":"df['return'] = df['close'] - df['open']\ndf['range'] = df['high'] - df['low']\ndf.head(2)","3ec8112a":"df['date'] = pd.to_datetime(df['date'])\ndef add_date_part(df, date_col = 'date', drop_date_col=False):\n    \n    dff = df.copy()\n    dff['DAY_NAME'] = df[date_col].dt.day_name()\n    dff['DAY_OF_MONTH'] = df[date_col].dt.day\n    dff['DAY_OF_YEAR'] = df[date_col].dt.dayofyear\n    dff['IS_MONTH_START'] = df[date_col].dt.is_month_start\n    dff['IS_MONTH_END'] = df[date_col].dt.is_month_end\n    dff['IS_QUARTER_START'] = df[date_col].dt.is_quarter_start\n    dff['IS_QUARTER_END'] = df[date_col].dt.is_quarter_end\n    dff['MONTH_NAME'] = df[date_col].dt.month_name()\n    dff['WEEK'] = df[date_col].dt.isocalendar().week\n    dff['IS_YEAR_START'] = df[date_col].dt.is_year_start\n    dff['IS_YEAR_END'] = df[date_col].dt.is_year_end\n    if drop_date_col == True:\n        dff= df.drop(date_col, axis=1)\n    return dff","87ab81f5":"df = add_date_part(df, 'date')\ndf.head()","f1638513":"df.groupby('DAY_NAME')['return'].mean().plot(kind='barh', color='g')","7ad37203":"m = df.groupby('MONTH_NAME')['return'].mean()\nm.reindex(['January','February','March','April','May','June',\n           'July','August', 'September',\n           'October', 'November','December']).plot(kind='barh')","5f4280a9":"df.groupby('IS_QUARTER_START')['return'].mean().plot(kind='barh', color ='y')","c73ed755":"cluster 3 has max profit margin\n","d6fb6dce":"cluster 4 has max revenue and cluster 1 has negative revenue","f96d19c1":"there are 11 unique sectors and 121 unique sun industry","ac585d8d":"gives more returns at quarter start"}}