{"cell_type":{"d67afc40":"code","cb7389f0":"code","4a217d14":"code","97d58a29":"code","19711449":"code","21d7ef1c":"code","8b27c1bf":"code","590a44b0":"code","f94b0377":"code","c522d14b":"code","f6af22df":"code","34b0a423":"markdown"},"source":{"d67afc40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/image-preprocessing-for-model-training'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cb7389f0":"import numpy as np \nimport pandas as pd \nimport os\nfrom glob import glob\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom skimage import io\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Keras ImageDataGenerator is a gem! It lets you augment your images in real-time while your model is still training! \n# You can apply any random transformations on each training image as it is passed to the model. \n# This will not only make your model robust but will also save up on the overhead memory!\n\n# https:\/\/www.analyticsvidhya.com\/blog\/2020\/08\/image-augmentation-on-the-fly-using-keras-imagedatagenerator\/#:~:text=Keras%20ImageDataGenerator%20is%20a%20gem,up%20on%20the%20overhead%20memory!\n\n# Scikit-image, or skimage, is an open source Python package designed for image preprocessing. \n# If you have previously worked with sklearn, getting started with skimage will be a piece of cake\n# Scikit-image, or skimage, is an open source Python package designed for image preprocessing. If you have previously worked with sklearn, getting started with skimage will be a piece of cake","4a217d14":"df = pd.read_csv('..\/input\/image-preprocessing-for-model-training\/paths_and_labels.csv')\ndf.head()","97d58a29":"df.img_path","19711449":"df.img_path[0]","21d7ef1c":"# # First create some toy data:\n# x = np.linspace(0, 2*np.pi, 400)\n# y = np.sin(x**2)\n\n# # Create just a figure and only one subplot\n# fig, ax = plt.subplots()\n# ax.plot(x, y)\n# ax.set_title('Simple plot')\n\n# # Create two subplots and unpack the output array immediately\n# f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n# ax1.plot(x, y)\n# ax1.set_title('Sharing Y axis')\n# ax2.scatter(x, y)\n\n# # Create four polar axes and access them through the returned array\n# fig, axs = plt.subplots(2, 2, subplot_kw=dict(polar=True))\n# axs[0, 0].plot(x, y)\n# axs[1, 1].scatter(x, y)\n\n# # Share a X axis with each column of subplots\n# plt.subplots(2, 2, sharex='col')\n\n# # Share a Y axis with each row of subplots\n# plt.subplots(2, 2, sharey='row')\n\n# # Share both X and Y axes with all subplots\n# plt.subplots(2, 2, sharex='all', sharey='all')\n\n# # Note that this is the same as\n# plt.subplots(2, 2, sharex=True, sharey=True)\n\n# # Create figure number 10 with a single subplot\n# # and clears it if it already exists.\n# fig, ax = plt.subplots(num=10, clear=True)","8b27c1bf":"# fig, m_axs = plt.subplots(5,4, figsize = (16, 16))\n# m_axs\n\n# # subplots return an instance of Figure and an array of (or a single) Axes (array or not depends on the number of subplots). \n# # Generally, the matplotlib. pyplot. subplots() returns a figure instance and an object or an array of Axes objects","590a44b0":"# print(m_axs.flatten)","f94b0377":"imgs = df.img_path\nimgs","c522d14b":"zip(imgs, m_axs)\n\n# Python's zip() function creates an iterator that will aggregate elements from two or more iterables. \n# You can use the resulting iterator to quickly and consistently solve common programming problems, \n# like creating dictionaries.","f6af22df":"fig, m_axs = plt.subplots(5,4, figsize = (16, 16))\nm_axs = m_axs.flatten()\nimgs = df.img_path\nind=0\n\nfor img, ax in zip(imgs, m_axs):\n    img = io.imread(img)\n    ax.imshow(img,cmap='gray')\n    ax.set_title(df.iloc[ind]['class'])\n    ind=ind+1","34b0a423":"**First, let's look at what our plan images look like**"}}