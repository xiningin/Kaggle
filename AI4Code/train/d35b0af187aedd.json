{"cell_type":{"5669a0a0":"code","63cd5567":"code","e957e985":"code","74bcf827":"code","0604f42f":"code","56f396a1":"code","25fdd797":"code","54dd7ed9":"code","b8f4d40b":"code","5c16e6d0":"code","04107c39":"code","caabd6cf":"code","f946ea55":"code","164b396b":"code","5b0220d2":"code","ab536ac5":"code","dbd1380f":"code","6f32c7b7":"code","6e0046f2":"code","66dbea08":"markdown","417f7e56":"markdown","0980f4f6":"markdown","970cb5f0":"markdown","34d95ba9":"markdown","7a411a26":"markdown","bbb3558e":"markdown","9522009e":"markdown","d9b9e279":"markdown"},"source":{"5669a0a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63cd5567":"df=pd.read_csv('\/kaggle\/input\/customer-segmentation\/Train.csv')","e957e985":"df.head()","74bcf827":"df=df[['Gender','Age','Family_Size','Segmentation']]","0604f42f":"new_df=df.sample(3)","56f396a1":"new_df","25fdd797":"from sklearn.preprocessing import LabelEncoder","54dd7ed9":"encoder=LabelEncoder()","b8f4d40b":"new_df['Gender']=encoder.fit_transform(new_df['Gender'])\nnew_df['Segmentation']=encoder.fit_transform(new_df['Segmentation'])","5c16e6d0":"new_df","04107c39":"new_df['log(odds)']=np.log(1\/2)","caabd6cf":"new_df","f946ea55":"#probablity=e^(log(odds))\/1+e^log(odds)\n","164b396b":"new_df['r0']=new_df['Segmentation']- 1\/3","5b0220d2":"new_df","ab536ac5":"from sklearn.tree import DecisionTreeRegressor","dbd1380f":"# max_depth=1 because we only have 3 rows\ntree1=DecisionTreeRegressor(max_depth=1)","6f32c7b7":"tree1.fit(new_df.iloc[:,0:3],new_df.iloc[:,-1])","6e0046f2":"from sklearn.tree import plot_tree\nplot_tree(tree1)","66dbea08":"READING THE DATASET","417f7e56":"STEP 2A-CALCULATING THE RESIDUAL\nOUTPUT COLUMN-(LOG(ODDS) CONVERTED TO PROBABILITY)\n","0980f4f6":"SIMPLIFYING THE DATA FOR EASIER UNDERSTANDING\n\nHere we are only taking 3 rows so that we can cross check the answer by manual calculation","970cb5f0":"STEP1-CALCULATING THE LOG OF ODDS","34d95ba9":"DISPLAYING THE DATASET","7a411a26":"STEP 2B-FITTING THE DECISIONTREE REGRESSOR\n\nEven though this is  a classification problem we are using DecisionTreeRegressor because the output column(residual columns)is in numeric form and not in classes","bbb3558e":"PLOTTING THE DECISION TREE","9522009e":"PREPROCESSING THE DATA","d9b9e279":"STEP 2C-DECIDE THE OUTPUT VALUE FOR EVERY TERMINAL REGION\n\nwe cannot use the value generated by decision tree because the logic behind calculation is mean of the output of the rows fallen in that leaf node.\nsice our loss function is different , the formula to calculate the output value for every terminal is different"}}