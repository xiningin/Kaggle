{"cell_type":{"b14518d8":"code","9f96d1e5":"code","a8394a56":"code","2f88b772":"code","e1637c1c":"code","4072c58e":"code","00b21633":"code","f3bf9655":"code","e696fe74":"code","cd099d41":"code","d2ae6f45":"code","783ac3e2":"code","601dd9bd":"code","30a5e5ab":"code","973e88c4":"code","631aa4fe":"code","7cc2be39":"code","cfbc7bf7":"code","d91d36d8":"code","93351a9a":"code","1de33275":"code","7fa684e2":"code","edb5ed7c":"code","3500e3f1":"code","7b1d1a38":"code","e282a57b":"code","f2941aa1":"code","2cc6eb34":"code","679a91df":"code","1c219c6c":"code","610f6245":"code","195d7137":"code","f385dbf8":"code","4244ab53":"code","c34b1a1c":"code","96f077dc":"code","deb04d5a":"code","353e9a55":"code","e29fde7d":"code","65ed2f92":"code","2374c290":"code","527fe849":"code","bcb7a994":"code","6fda0ac3":"code","7442dad2":"code","da7a82b7":"code","a632c57f":"code","8f649358":"markdown","cfb7a668":"markdown","82b60916":"markdown","61a57d8a":"markdown","9f91885a":"markdown","79816ecc":"markdown","4bf10fe4":"markdown","3339b9b3":"markdown","dfac0e27":"markdown","53ffce3e":"markdown","bb4a4c36":"markdown","f941fee4":"markdown","43f8950a":"markdown","aa30de65":"markdown","8f2fba22":"markdown","0f1c881f":"markdown"},"source":{"b14518d8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9f96d1e5":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","a8394a56":"train_df.head()","2f88b772":"train_df.info()","e1637c1c":"train_df.describe()","4072c58e":"train_df['Survived'].value_counts()","00b21633":"train_df['Survived'].value_counts(normalize = True)","f3bf9655":"train_df['Pclass'].unique()","e696fe74":"train_df['Pclass'].value_counts()","cd099d41":"train_df['Pclass'].describe()","d2ae6f45":"import matplotlib.pyplot as plt\nimport numpy as np","783ac3e2":"import matplotlib.colors as mcolors","601dd9bd":"col = 'Pclass'\ntarget_col = 'Survived'","30a5e5ab":"all_colors = list(mcolors.CSS4_COLORS.keys())","973e88c4":"\nfig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 30, range = [0, 4], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","631aa4fe":"train_df['Sex'].value_counts()","7cc2be39":"train_df['Sex'].describe()","cfbc7bf7":"col = 'Sex'","d91d36d8":"fig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 30, range = [0, 2], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","93351a9a":"train_df['Age'].describe()","1de33275":"train_df[train_df['Age'].isna()].shape[0]","7fa684e2":"col = 'Age'","edb5ed7c":"fig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 100, range = [0, 100], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","3500e3f1":"train_df['SibSp'].describe()","7b1d1a38":"col = 'SibSp'","e282a57b":"fig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 20, range = [0, 8], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","f2941aa1":"train_df['Parch'].describe()","2cc6eb34":"col = 'Parch'","679a91df":"fig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 20, range = [0, 7], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","1c219c6c":"train_df['Ticket'].describe()","610f6245":"train_df['Ticket'].value_counts().head(30)","195d7137":"train_df['Ticket'].value_counts().tail(30)","f385dbf8":"train_df['Fare'].describe()","4244ab53":"col = 'Fare'","c34b1a1c":"fig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 50, range = [0, 400], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","96f077dc":"train_df['Cabin'].describe()","deb04d5a":"train_df['Cabin'].value_counts().head(10)","353e9a55":"train_df['Cabin'].value_counts().tail(10)","e29fde7d":"train_df[~(train_df['Cabin'].isnull())]['Fare'].mean()","65ed2f92":"train_df[~(train_df['Cabin'].isnull())]['Survived'].value_counts()","2374c290":"train_df[train_df['Cabin'].isnull()]['Survived'].value_counts()","527fe849":"train_df['Embarked'].describe()","bcb7a994":"train_df['Embarked'].unique()","6fda0ac3":"train_df['Embarked'].value_counts()","7442dad2":"train_df['Embarked'].fillna('S', inplace = True)","da7a82b7":"col = 'Embarked'","a632c57f":"fig, ax = plt.subplots(figsize = (14, 8))\ncolors = ['b', 'r', 'g']\nfor index, val in enumerate(train_df[target_col].unique().tolist()):\n    ax.hist(train_df[train_df[target_col] == val][col], bins = 50, range = [0, 3], color = colors[index], alpha = 0.5, label = \"%s_%s\"%(target_col, val))\nplt.title(\"%s distribution\" %(col), fontsize = 15)\nax.set_xlabel(\"%s\" %(col), fontsize = 15)\nax.set_ylabel(\"num of People\", fontsize = 15)\nplt.legend()\nplt.show()","8f649358":"Analysing Age Variable","cfb7a668":"Analysing the Fare Variable","82b60916":"Analysing Target Variable","61a57d8a":"Observations for Cabin Colum : Having a cabin could mean more chance of survival","9f91885a":"Analysing Parch variable : number of parents \/ childeren aboard","79816ecc":"Analysing the Ticket Variable","4bf10fe4":"If the number of spouses\/siblings > 2 : mostly died","3339b9b3":"Observation from EDA:\n    1. Categorical Variables\n        Sex : non null, strong feature\n        Pclass : non null, strong feature\n        Emabarked : have null values, can be filled with 'S', weak feature\n    2. Numerical Variables\n        Age : have null values, can be filled with mean, weak feature\n        Fare : non null, strong feature\n        Parch : non null, strong feature\n        SibSp : non null, strong feature\n    3. Textual Variables\n        Ticket : non null, weak feature\n        Cabin : have null, should used as has cabin or not, strong feature \n        ","dfac0e27":"Analysing the embarked Column","53ffce3e":"Analysing the Cabin Variable","bb4a4c36":"Analysing the distribution of Age","f941fee4":"Analysing Sex variable : it represents the sex of the passenger","43f8950a":"Most of the Women Survived the crash","aa30de65":"Analysing SibSp variable : #number of siblings or spouses","8f2fba22":"Analysing Pclass variable : it represents the ticket class","0f1c881f":"Most of the People in P class 3 died while most of the people in Pclass 1 survived"}}