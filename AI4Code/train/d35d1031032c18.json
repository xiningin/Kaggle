{"cell_type":{"42c80c02":"code","1ce9311f":"code","ea7484cb":"code","0f17fabf":"code","82933f58":"code","d133283c":"code","b086b0f8":"code","0097ceb6":"code","b129284c":"code","0044e28d":"code","1b7ba70d":"code","6815f688":"code","4ca65a39":"code","eee1591c":"code","f9aa4065":"code","c3a17091":"code","5062add5":"code","874a076a":"code","235ba75c":"code","7eae70da":"code","e9cf7d4e":"code","99495ae3":"code","4d061616":"code","8c53842d":"code","1d3d40d5":"code","f1cd06e1":"code","e8bcd13f":"code","49afdf05":"code","79afe169":"code","33c32dda":"code","40ea8981":"code","8b372c19":"code","d4434733":"code","10dad2c3":"code","741f6491":"code","df1b6d34":"code","8741bb66":"code","1aedc913":"code","c61df75b":"code","e459a6cf":"code","3eebd961":"code","004868ae":"code","0f412f39":"code","53290764":"code","89b81a58":"code","fe87e604":"code","a7b8d325":"code","fe8c2410":"code","086b85e4":"code","819de3f1":"code","1b8d3464":"code","4b7b874c":"code","60d4b3f3":"code","f9fda5ab":"code","5fae5190":"code","a2270d0a":"code","da014726":"code","be3a9325":"code","1210e70b":"code","89a1440e":"code","efb1d522":"code","37c5d18a":"code","99e91901":"code","98030227":"code","d313efb3":"code","0c4947e3":"code","0287e998":"code","02ab6706":"code","59b44234":"code","acf3fd58":"code","3ed36af7":"code","5bfd8eb7":"code","203f6fad":"code","8713117a":"code","b21714b9":"code","7a0d42e5":"code","0ca712c2":"code","f1baf42f":"code","2b0e411c":"code","8be02779":"code","9fc55711":"code","02f87d0c":"code","6dc47744":"code","01259977":"code","3a98286f":"code","6eb8a38e":"code","09b92c34":"code","f9f31ca8":"code","86b9a1ee":"code","c59f71ef":"code","79fcd54f":"code","79bf2437":"code","608b2bd7":"code","8babc2c8":"code","187ce4c1":"code","b8dd4f29":"code","c8c7f3d9":"code","267cc6d9":"code","65938926":"code","be7e9d74":"code","536168c2":"code","3a3befaf":"code","25d6be47":"code","2ba28e71":"code","451afa10":"code","4a58a128":"code","a07294f4":"code","f015a425":"code","fca17d97":"code","8d7c790c":"code","2031555a":"code","edb1b909":"code","d1cea28c":"code","fee65e0e":"markdown","faf57d2b":"markdown","716c4a8f":"markdown","b86b138f":"markdown"},"source":{"42c80c02":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1ce9311f":"train=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')\nstore=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')","ea7484cb":"print(train.shape)\nprint(test.shape)\nprint(store.shape)","0f17fabf":"train.head()","82933f58":"store.head()","d133283c":"train.info()","b086b0f8":"train.describe()","0097ceb6":"train['StateHoliday'].value_counts()","b129284c":"train.describe()[['Sales','Customers']]","0044e28d":"train.describe()[['Sales','Customers']].loc['mean']","1b7ba70d":"train.describe()[['Sales','Customers']].loc['min']","6815f688":"train.describe()[['Sales','Customers']].loc['max']","4ca65a39":"train['Store'].value_counts().head(20)","eee1591c":"train['Store'].value_counts().tail(20)","f9aa4065":"train['DayOfWeek'].value_counts()","c3a17091":"train['Open'].value_counts()","5062add5":"train['Promo'].value_counts()","874a076a":"train['Date']=pd.to_datetime(train['Date'],format='%Y-%m-%d')","235ba75c":"train.isna().sum()","7eae70da":"test.isna().sum()","e9cf7d4e":"store.isna().sum()","99495ae3":"store1=train[train['Store']==1]","4d061616":"store1.head()","8c53842d":"store1.shape","1d3d40d5":"store1.resample('1d',on='Date')['Sales'].sum().plot.line(figsize=(15,5))","f1cd06e1":"store1[store1['Sales']==0]","e8bcd13f":"test_store1=test[test['Store']==1]\ntest_store1['Date']=pd.to_datetime(test_store1['Date'],format='%Y-%m-%d')","49afdf05":"test_store1['Date'].min(),test_store1['Date'].max()","79afe169":"test_store1['Open'].value_counts()","33c32dda":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.hist(store1['Sales'])","40ea8981":"store[store['Store']==1].T","8b372c19":"store[~store['Promo2SinceYear'].isna()].iloc[0]","d4434733":"store=pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')","10dad2c3":"store['Promo2SinceWeek']=store['Promo2SinceWeek'].fillna(0)","741f6491":"store['Promo2SinceYear']=store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])","df1b6d34":"store['PromoInterval']=store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0])","8741bb66":"store['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']=store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']=store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])","1aedc913":"store.isna().sum()","c61df75b":"df=train.merge(store,on='Store',how='left')","e459a6cf":"print(train.shape)\nprint(df.shape)","3eebd961":"df.isna().sum()","004868ae":"df.info()","0f412f39":"df['day']=df['Date'].dt.day\ndf['year']=df['Date'].dt.year\ndf['month']=df['Date'].dt.month","53290764":"#df['Date'].dt.strftime('%a')","89b81a58":"#Dummies: StateHoliday,StoreType,Assortment,PromoInterval\n\ndf['StateHoliday']=df['StateHoliday'].apply(lambda x:'0' if x==0 or x=='0' else x)","fe87e604":"df['StateHoliday']=df['StateHoliday'].map({'0':0,'a':1,'b':2,'c':3})\ndf['StateHoliday']=df['StateHoliday'].astype(int)","a7b8d325":"df['StoreType'].value_counts()","fe8c2410":"df['StoreType']=df['StoreType'].map({'a':0,'b':1,'c':2,'d':3})","086b85e4":"df['Assortment']=df['Assortment'].map({'a':0,'b':1,'c':2})","819de3f1":"df['Assortment']=df['Assortment'].astype(int)","1b8d3464":"df['PromoInterval'].value_counts()","4b7b874c":"df['PromoInterval']=df['PromoInterval'].map({'Jan,Apr,Jul,Oct':0,'Feb,May,Aug,Nov':1,'Mar,Jun,Sept,Dec':2})","60d4b3f3":"df['PromoInterval']=df['PromoInterval'].astype(int)","f9fda5ab":"df=df.drop('Date',1)","5fae5190":"df.dtypes","a2270d0a":"y=np.log1p(df['Sales'])","da014726":"X=df.drop(['Sales','Customers'],1)","be3a9325":"from sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val=train_test_split(X,y,random_state=1,test_size=0.2)","1210e70b":"y.plot.hist()","89a1440e":"from sklearn.tree import DecisionTreeRegressor\n\ndt=DecisionTreeRegressor(max_depth=11,random_state=1).fit(X_train,y_train)","efb1d522":"y_pred_val=dt.predict(X_val)","37c5d18a":"from sklearn.metrics import r2_score,mean_squared_error\n\nprint(r2_score(y_val,y_pred_val))\nprint(np.sqrt(mean_squared_error(y_val,y_pred_val)))","99e91901":"y_val_exp=np.exp(y_val)-1\ny_pred_val_exp=np.exp(y_pred_val)-1\nnp.sqrt(mean_squared_error(y_val_exp,y_pred_val_exp))","98030227":"r2_score(y_val_exp,y_pred_val_exp)","d313efb3":"!pip install pydotplus","0c4947e3":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","0287e998":"draw_tree(dt,X_train.columns)","02ab6706":"print(dt.feature_importances_)\nplt.barh(y=X_train.columns,width=dt.feature_importances_)\nplt.show()","59b44234":"test.head()","acf3fd58":"avg_cust=df.groupby(['Store'])[['Customers']].mean().astype(int)\ntest1=test.merge(avg_cust,on='Store',how='left')","3ed36af7":"test.shape,test1.shape","5bfd8eb7":"test_merged=test1.merge(store,on='Store',how='left')","203f6fad":"test1.shape,test_merged.shape","8713117a":"test_merged.head()","b21714b9":"test_merged['Open'].fillna(1,inplace=True)","7a0d42e5":"test_merged.isna().sum()","0ca712c2":"test_merged['Date']=pd.to_datetime(test_merged['Date'],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\n","f1baf42f":"test_merged=test_merged.drop('Date',1)","2b0e411c":"test_merged['StateHoliday']=test_merged['StateHoliday'].apply(lambda x:'0' if x==0 or x=='0' else x)","8be02779":"test_merged['StateHoliday'].value_counts()","9fc55711":"test_merged['StoreType'].value_counts()","02f87d0c":"test_merged['Assortment'].value_counts()","6dc47744":"test_merged['PromoInterval'].value_counts()","01259977":"test_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\n\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':0,'b':1,'c':2,'d':3})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\n\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':0,'b':1,'c':2})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\n\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map({'Jan,Apr,Jul,Oct':0,'Feb,May,Aug,Nov':1,'Mar,Jun,Sept,Dec':2})\ntest_merged['PromoInterval']=test_merged['PromoInterval'].astype(int)","3a98286f":"test_merged1=test_merged.drop('Id',1)","6eb8a38e":"test_merged1.head()","09b92c34":"X_train.head()","f9f31ca8":"test_merged1.shape","86b9a1ee":"y_pred=dt.predict(test_merged1[X_train.columns])","c59f71ef":"y_pred","79fcd54f":"y_pred_exp=np.exp(y_pred)-1","79bf2437":"submission_pred=pd.DataFrame(test_merged['Id'],columns=['Id'])","608b2bd7":"submission_pred['Sales']=y_pred_exp","8babc2c8":"submission_pred['Id']=np.arange(1,len(submission_pred)+1)","187ce4c1":"submission_pred","b8dd4f29":"submission_pred.to_csv('Submission.csv',index=False)","c8c7f3d9":"# Credit: kaggle.com\ndef ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe\n\nrmse_val=np.sqrt(mean_squared_error(y_val_exp,y_pred_val_exp))\nrmspe_val=rmspe(y_val_exp,y_pred_val_exp)\nprint(rmse_val,rmspe_val)","267cc6d9":"from sklearn.model_selection import GridSearchCV\nparams={'max_depth':list(range(5,20))}\nbase_model=DecisionTreeRegressor()\ncv_model=GridSearchCV(base_model,param_grid=params,return_train_score=True).fit(X_train,y_train)","65938926":"df_cv_results=pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)","be7e9d74":"df_cv_results.set_index('param_max_depth')['mean_test_score'].plot.line()\ndf_cv_results.set_index('param_max_depth')['mean_train_score'].plot.line()\nplt.show()","536168c2":"df_cv_results=pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)[['param_max_depth','mean_test_score','mean_train_score']]\ndf_cv_results","3a3befaf":"def get_rmspe_score(model,input_values,y_actual):\n    y_predicted=model.predict(input_values)\n    y_actual=np.exp(y_actual)-1\n    y_predicted=np.exp(y_predicted)-1\n    score=rmspe(y_actual,y_predicted)\n    return score\n\nparams={'max_depth':list(range(5,8))}\nbase_model=DecisionTreeRegressor()\ncv_model=GridSearchCV(base_model,param_grid=params,return_train_score=True,scoring=get_rmspe_score).fit(X_train,y_train)\npd.DataFrame(cv_model.cv_results_)[['params','mean_test_score','mean_train_score']]","25d6be47":"from sklearn.ensemble import AdaBoostRegressor\n\nmodel_ada=AdaBoostRegressor(n_estimators=5).fit(X_train,y_train)","2ba28e71":"model_ada.estimators_[0]","451afa10":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","4a58a128":"features=X_train.columns\ndraw_tree(model_ada.estimators_[0],features)","a07294f4":"import xgboost as xgb","f015a425":"dtrain=xgb.DMatrix(X_train,y_train)\ndvalidate=xgb.DMatrix(X_val,y_val)\n\nparam={'max_depth':5,'eta':1,'ojective':'reg:linear'}\nmodel_xg=xgb.train(param,dtrain,200)\npred_y=model_xg.predict(dvalidate)\n\n\nval_y_inv=np.exp(y_val)-1\npred_y_inv=np.exp(pred_y)-1\nrmspe_val=rmspe(val_y_inv,pred_y_inv)\nprint(rmspe_val)","fca17d97":"test_merged=test_merged.drop(['Id','Customers'],1)","8d7c790c":"y_pred_xg=model_xg.predict(xgb.DMatrix(test_merged[X_train.columns]))","2031555a":"y_pred_xg_exp=np.exp(y_pred_xg)-1","edb1b909":"y_pred_xg_exp","d1cea28c":"submission_predicted1 = pd.DataFrame({'Id': test['Id'], 'Sales': y_pred_xg_exp})\ntestop0=(test[test['Open']==0]['Open']).index\nSales1=[]\nfor i in range(41088):\n    if i in testop0:\n        Sales1.append(0)\n    else:\n        Sales1.append(submission_predicted1['Sales'][i])\nsubmission_predicted1['Sales']=Sales1\nprint(submission_predicted1.head())\nsubmission_predicted1.to_csv('submission.csv', index=False)","fee65e0e":"### Encoding\n##### 3 categorical cols, 1 date coln, rest are numerical\n","faf57d2b":"### MERGING DATA","716c4a8f":"### Preprocessing\n- Missing value treatment\n- Merging train with store file\n- Log transformation of target feature\n- Exponential transformation after prediction\n- Make sure columns are in both train and test","b86b138f":"#### MISSING VALUE TREATMENT"}}