{"cell_type":{"b21a0637":"code","20d410bf":"code","9f5728b3":"code","a84b5205":"code","b7e1c13e":"code","d2350cd5":"code","da55e178":"code","9718ad0f":"code","7db0aca8":"code","c8c5c2af":"code","21f8e7a8":"code","d7a43f90":"code","b74f5443":"code","9acb3532":"code","5b1dde3c":"code","8ec575b0":"code","ad6dfb4e":"code","8337c004":"code","1b27e97c":"code","9290aed3":"markdown","7c1f497a":"markdown","9a2087bb":"markdown","e34bc3d7":"markdown","422ec13a":"markdown","a760662d":"markdown","027730f5":"markdown","8b41240c":"markdown","dce6f122":"markdown","828c8571":"markdown","267cb9be":"markdown","25c6109a":"markdown"},"source":{"b21a0637":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np\nfrom datetime import datetime\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","20d410bf":"df = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')","9f5728b3":"df.head()","a84b5205":"df.isnull().sum()","b7e1c13e":"print(\"Number of rows in dataset:\",df.shape[0])\nprint(\"Number of Columns in dataset:\",df.shape[1])","d2350cd5":"df.info()","da55e178":"df['Month']=pd.to_datetime(df['Month'],infer_datetime_format=True,format='%y%m')","9718ad0f":"!pip install prophet","7db0aca8":"from prophet import Prophet","c8c5c2af":"df.rename(columns={'Month':'ds','#Passengers':'y'},inplace=True)","21f8e7a8":"df.head()","d7a43f90":"model = Prophet()\nmodel.fit(df)","b74f5443":"future = model.make_future_dataframe(periods=0, freq='M')\nfuture.tail()","9acb3532":"forecast = model.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","5b1dde3c":"fig1 = model.plot(forecast)\n","8ec575b0":"fig2 = model.plot_components(forecast)","ad6dfb4e":"!pip install plotly","8337c004":"from prophet.plot import plot_plotly, plot_components_plotly\n\nplot_plotly(model, forecast)","1b27e97c":"plot_components_plotly(model, forecast)\n","9290aed3":"Checking for null values","7c1f497a":"The predict method will assign each row in future a predicted value which it names `yhat`. If you pass in historical dates, it will provide an in-sample fit. The forecast object here is a new dataframe that includes a column `yhat` with the forecast, as well as columns for components and uncertainty intervals.","9a2087bb":"You can plot the forecast by calling the Prophet.plot method and passing in your forecast dataframe.","e34bc3d7":"For using **Prophet**, Dataframe must have columns \"ds\" and \"y\" with the dates and values respectively.","422ec13a":"![fbprophet.png](attachment:8d7bfd4d-d9ea-4ebc-a508-149242cf67cb.png)\n\nProphet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.\n\nProphet is a forecasting procedure implemented in R and Python. It is fastand provides completly automated forecasts that can be tuned by hand by data scientists and analysts.\n\nProphet is open source software released by Facebook\u2019s Core Data Science team. It is available for download on CRAN and PyPI.\n\nProphet is used in many applications across Facebook for producing reliable forecasts for planning and goal setting. They\u2019ve found it to perform better than any other approach in the majority of cases.\n\nProphet is robust to outliers, missing data, and dramatic changes in your time series.\n\nThe Prophet procedure includes many possibilities for users to tweak and adjust forecasts. You can use human-interpretable parameters to improve your forecast by adding your domain knowledge.\n\nThey\u2019ve implemented the Prophet procedure in R and Python, but they share the same underlying Stan code for fitting. Use whatever language you\u2019re comfortable with to get forecasts.\n\nSource: https:\/\/facebook.github.io\/prophet\/\n\nWe'll be using Air Passengers per month, [Air Passengers](https:\/\/www.kaggle.com\/rakannimer\/air-passengers). The task is to forecast the \"Number of Passengers\" column in the dataset","a760662d":"We fit the model by instantiating a new Prophet object. Any settings to the forecasting procedure are passed into the constructor. Then you call its fit method and pass in the dataframe.","027730f5":"Installing Prophet using pip and import prophet","8b41240c":"An interactive figure of the forecast and components can be created with plotly. You will need to install plotly 4.0 or above separately, as it will not by default be installed with prophet.","dce6f122":"Here, we can see that there is no null values in dataset and **Month** column is in string type instead of datetime.","828c8571":"# Import Libraries and datasets","267cb9be":"Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. You can get a suitable dataframe that extends into the future a specified number of months using the helper method Prophet.make_future_dataframe. By default it will also include the dates from the history, so we will see the model fit as well.","25c6109a":"## Exploratory Data Analytics\n"}}