{"cell_type":{"5558ecbc":"code","b6898804":"code","1dc9c1b8":"code","aa3465bb":"code","65b7c043":"code","3b1a0fe3":"code","67537b29":"code","efe79574":"code","7fedbd9a":"code","9da5fa5a":"code","956e9493":"code","58a74a91":"code","7cb20759":"code","195cfd53":"code","e0a41b3e":"code","1e8bf3fc":"code","5cb87e89":"code","5938d1cf":"code","2f45f69e":"code","d84c9630":"code","0c98bc54":"code","b6b4c3f6":"markdown","05373000":"markdown","a4fd6116":"markdown","3aa40566":"markdown","13e003d1":"markdown","48359724":"markdown","725805fc":"markdown","b1d3cd01":"markdown","5909e403":"markdown","991bba72":"markdown","5abbbf27":"markdown","fda23c1d":"markdown","2c688fdb":"markdown"},"source":{"5558ecbc":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor, VotingRegressor, StackingRegressor, GradientBoostingRegressor\nfrom sklearn.linear_model import LinearRegression\n\nfrom xgboost import XGBRegressor\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n        \ninput_path = Path('\/kaggle\/input\/tabular-playground-series-jan-2021\/')","b6898804":"# training data\ntrain = pd.read_csv(input_path \/ 'train.csv', index_col='id')\n\n# test data\ntest = pd.read_csv(input_path \/ 'test.csv', index_col='id')\n\nsubmission = pd.read_csv(input_path \/ 'sample_submission.csv', index_col='id')","1dc9c1b8":"target = train.pop('target')\nX_train, X_test, y_train, y_test = train_test_split(train, target, train_size=0.8)","aa3465bb":"plt.figure(figsize=(10,10))\nsns.heatmap(train.corr(), annot=True, cmap=\"YlGnBu\");","65b7c043":"X_train.columns","3b1a0fe3":"sns.jointplot(X_train.cont7[:1000], y_train[:1000], alpha=0.3);","67537b29":"sns.distplot(X_train.cont1);","efe79574":"sns.distplot(X_train.cont14);","7fedbd9a":"sns.distplot(y_train);","9da5fa5a":"parameters = {\n    'n_estimators': 350,\n    'tree_method': 'hist',\n    'learning_rate': 0.03,\n    'colsample_bytree': 0.9,\n    'subsample': 0.9,\n    'min_child_weight': 9,\n    'max_depth': 11,\n    'n_jobs': -1\n}","956e9493":"parameters2 = {\n    'n_estimators': 350,\n    'tree_method': 'exact',\n    'learning_rate': 0.03,\n    'colsample_bytree': 0.9,\n    'subsample': 0.9,\n    'min_child_weight': 9,\n    'max_depth': 11,\n    'n_jobs': -1\n}","58a74a91":"'''model = XGBRegressor(**parameters)\nmodel.fit(X_train, y_train, early_stopping_rounds=10, eval_set=[(X_test, y_test)], verbose=False)\nprediction = model.predict(X_test)\nmse = mean_squared_error(y_test, prediction,squared=False)\nprint(mse)'''\n\n# mse = 0.700","7cb20759":"# from sklearn.model_selection import GridSearchCV","195cfd53":"'''param_grid = [\n    {\n        'n_estimators': [350, 1000],\n        'learning_rate': [0.01, 0.03],\n        'colsample_bytree': [0.5, 0.9]\n    },\n    {\n        'n_estimators': [350, 1000],\n        'subsample': [0.7, 0.9]\n    }\n]\n\nnew_model = XGBRegressor(tree_method='hist', min_child_weight=9, max_depth=11, n_jobs=-1)\n\ngrid_search = GridSearchCV(new_model, param_grid, cv=3, scoring='neg_mean_squared_error')\n\ngrid_search.fit(X_train, y_train, early_stopping_rounds=10, eval_set=[(X_test, y_test)], verbose=1)'''","e0a41b3e":"#grid_search.best_params_","1e8bf3fc":"#grid_search.best_estimator_","5cb87e89":"'''cvres = grid_search.cv_results_\n\nfor mean_score, params in zip(cvres['mean_test_score'], cvres['params']):\n    print(np.sqrt(-mean_score), params)'''","5938d1cf":"'''XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.01, max_delta_step=0, max_depth=11,\n             min_child_weight=9, missing=nan, monotone_constraints='()',\n             n_estimators=1000, n_jobs=-1, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='hist', validate_parameters=1, verbosity=None)'''","2f45f69e":"final_model = XGBRegressor(tree_method='hist', min_child_weight=9, max_depth=11, n_jobs=-1, colsample_bytree=0.5, learning_rate=0.01, n_estimators=1500)\nfinal_model.fit(X_train, y_train, early_stopping_rounds=10, eval_set=[(X_test, y_test)], verbose=False)\nprediction = final_model.predict(X_test)\nmse = mean_squared_error(y_test, prediction,squared=False)\nprint(mse)\n\n# mse=0.697679","d84c9630":"sns.distplot(y_test)\nsns.distplot(prediction);","0c98bc54":"submission['target'] = final_model.predict(test)\nsubmission.to_csv('xgb_reg.csv')","b6b4c3f6":"## Using Gridsearch","05373000":"# Models","a4fd6116":"Building the final model","3aa40566":"This is the notebook I built based on the Get Started version with additional modifications **[Tabular Playground Series - Jan 2021](https:\/\/admin.kaggle.com\/c\/tabular-playground-series-jan-2021\/overview)** competition. \n\n# Make the most of this notebook!\n","13e003d1":"## Ploting the dataset","48359724":"## Pull out the target, and make a validation split","725805fc":"## Preparing file for submission","b1d3cd01":"Checking the correlations","5909e403":"## Ensemble methods","991bba72":"### Gradient regressor","5abbbf27":"# Read in the data files","fda23c1d":"Plot of selected features of the train dataset","2c688fdb":"Comparison of the target of the test dataset with the model prediction"}}