{"cell_type":{"646fb8bf":"code","5534edc2":"code","56930696":"code","b9e6cbc5":"code","965936fa":"code","4b14ef99":"code","c51a13b5":"code","04659267":"code","b414f182":"code","86e4db69":"code","b6f15963":"code","99f7e629":"code","06e780e3":"code","33728ec8":"code","1744b638":"code","87de605d":"code","9d1aa09e":"code","cf563bc2":"code","22dbdc57":"code","9e517fdc":"code","c5e066d9":"code","ed842a33":"code","1064f067":"code","cf147b42":"code","cad21018":"code","1d4c5d30":"code","6049c457":"code","846d6241":"code","7b5def7e":"code","033021f7":"code","6aa63bfd":"code","e86dc341":"code","0069f09c":"code","2407fca3":"code","1a030ec6":"code","79958cea":"code","fbbd12cc":"code","e478cd61":"code","164f14e5":"code","270329aa":"code","288a2bda":"code","8ae15bd9":"code","73941b7f":"code","941b42ba":"code","c8dcc37d":"code","af234ad4":"code","061a9c5e":"code","38f14229":"code","909387aa":"code","14039c2f":"code","815d958c":"code","9343e284":"code","2c5081e0":"code","6d215718":"code","5bc70573":"code","3a8476c0":"code","4a29d2dc":"code","4bb105ad":"code","30dda0cb":"code","a756f2c2":"code","9d0caf40":"code","009dac5b":"code","85d2125a":"code","1c62810b":"code","e3da030a":"code","86617f7d":"code","a77196a9":"code","6df30538":"code","b3610fff":"code","7c904034":"code","1180c4b3":"code","3e07e7c1":"code","900c0b89":"code","dfd50ee4":"code","ff4591be":"code","e1f6d752":"markdown","c3f53fa4":"markdown","0f06e26e":"markdown","61f70f9e":"markdown","5f870ad3":"markdown","14178144":"markdown","425566fb":"markdown","a36b3fec":"markdown","72f1e2c2":"markdown","3aeadfb0":"markdown","9aa5bcc3":"markdown","3db5867e":"markdown","d31f1e81":"markdown","0d70fbce":"markdown","d23c67ab":"markdown","d0ad22ba":"markdown","518448d3":"markdown","48af67d4":"markdown","7d1ea3b0":"markdown","898cebed":"markdown","1b9418a3":"markdown","b6e757e7":"markdown","ca79d689":"markdown","e189dfaa":"markdown","5e5dfd6d":"markdown","65c64c3d":"markdown","6d0c9775":"markdown","03789676":"markdown","87df6c9a":"markdown","93a114b5":"markdown","9397e8d7":"markdown","31dc2fb1":"markdown"},"source":{"646fb8bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5534edc2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.gofplots import qqplot\nimport scipy.stats as st\nfrom scipy.stats import levene\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","56930696":"!pip install smogn","b9e6cbc5":"import smogn","965936fa":"main_df = pd.read_csv(\"\/kaggle\/input\/rental-bike-sharing\/day.csv\")\ndf = main_df.copy()\ndf.head()","4b14ef99":"df.shape","c51a13b5":"df.info()","04659267":"df.nunique()","b414f182":"df.isna().any()","86e4db69":"sns.heatmap(df.isnull())","b6f15963":"plt.figure(figsize=(14,10))\nsns.heatmap(df.corr(), annot=True)\nplt.show()","99f7e629":"corr = df.corr()\nc1 = corr.abs().unstack()\nc1.sort_values(ascending = False)[15:27:2]","06e780e3":"df['yr'].nunique()","33728ec8":"df['season'].nunique()","1744b638":"df['mnth'].unique()","87de605d":"cate_cols = [\"dteday\", \"season\", \"yr\", \"mnth\", \"holiday\", \"weekday\", \"workingday\", \"weathersit\"]\nfor col in cate_cols:\n    df[col] = df[col].astype('category')","9d1aa09e":"print(df.info())","cf563bc2":"df = df.rename(columns= {'dteday':'date', 'yr':'year', 'mnth':'month', 'weathersit': 'weather', 'hum':'humidity', 'cnt':'count'})\ndf.head()","22dbdc57":"df.describe()","9e517fdc":"sns.displot(x=\"temp\", data=df, kde=True)\ndescription = df['temp'].describe()\nplt.axvline(description[\"25%\"], ls=\"--\", color='r')\nplt.axvline(description[\"mean\"], ls=\"--\", color='r')\nplt.axvline(description[\"75%\"], ls=\"--\", color='r')","c5e066d9":"sns.boxplot(df['temp'], showmeans=True,color='red' )","ed842a33":"fig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(15,4))\nsns.distplot(df['temp'], ax=ax1 , color ='red')\nax1.set(title='temp distribution')\nqqplot(df['temp'], ax=ax2, line='s')\nax2.set(title='Quantile quantile plot')","1064f067":"print(\"Upper limit \",df['temp'].mean() + 3*df['temp'].std())","cf147b42":"print(\"Lower limit \",df['temp'].mean() - 3*df['temp'].std())","cad21018":"df[(df['temp'] > 1.04) | (df['temp'] < -0.053)]","1d4c5d30":"df['temp'].skew()","6049c457":"sns.displot(x=\"casual\", data=df, kde=True)\ndescription = df['casual'].describe()\nplt.axvline(description[\"25%\"], ls=\"--\", color='r')\nplt.axvline(description[\"mean\"], ls=\"--\", color='r')\nplt.axvline(description[\"75%\"], ls=\"--\", color='r')","846d6241":"print(\"Upper limit \",df['casual'].mean() + 3*df['casual'].std())","7b5def7e":"print(\"Lower limit \",df['casual'].mean() - 3*df['casual'].std())","033021f7":"df[(df['casual'] > 2908.04) | (df['casual'] < -1211.69)]","6aa63bfd":"len(df[(df['casual'] > 2908.04) | (df['casual'] < -1211.69)])","e86dc341":"sns.boxplot(df['casual'], showmeans=True,color='red' )","0069f09c":"fig, (ax1,ax2) = plt.subplots(ncols=2, figsize=(15,4))\nsns.distplot(df['casual'], ax=ax1 , color ='red')\nax1.set(title='casual user distribution')\nqqplot(df['casual'], ax=ax2, line='s')\nax2.set(title='Quantile quantile plot')","2407fca3":"skew_val = df.skew().sort_values(ascending=False)\nskew_val","1a030ec6":"fig = px.box(df, x=\"season\", y=\"count\", color=\"season\", width=1000, height=600)\n\ndef custom_legend_name(new_names):\n    for i, new_name in enumerate(new_names):\n        fig.data[i].name = new_name\n\ncustom_legend_name(['season 1','season 2','season 3','season 4' ])\nfig.show()","79958cea":"fig = px.bar(df, x='season', y='count', color=\"season\")\nfig.show()","fbbd12cc":"fig, ax = plt.subplots(2,2, figsize = (14,8))\nsns.barplot(x = 'weather', y = 'count', data = df, saturation=0.90, ax = ax[0][0])\nsns.barplot(x = 'season', y = 'count', data = df,  saturation=0.90, ax = ax[0][1])\nsns.barplot(x = 'holiday', y = 'count', data = df, saturation=0.90, ax = ax[1][0])\nsns.barplot(x = 'workingday', y = 'count', data = df,  saturation=0.90, ax = ax[1][1])","e478cd61":"fig = px.histogram (df, x = \"temp\",  facet_row = \"season\",  template = 'plotly_dark')\nfig.show ()","164f14e5":"fig = px.histogram (df, x = \"temp\",  facet_row = \"workingday\",  template = 'plotly_dark')\nfig.show ()","270329aa":"fig =  px.pie (df, names = \"workingday\", hole = 0.4, template = \"gridon\")\nfig.show ()","288a2bda":"fig =  px.pie (df, names = \"weather\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","8ae15bd9":"fig =  px.pie (df, names = \"season\", hole = 0.4, template = \"plotly_dark\")\nfig.show ()","73941b7f":"fig = px.scatter (df, x = \"count\", y = \"temp\", color = \"season\", template = \"plotly_dark\",  trendline=\"ols\")\nfig.show ()","941b42ba":"fig = px.scatter (df, x = \"count\", y = \"temp\", color = \"season\", template = \"plotly_dark\",  trendline=\"lowess\")\nfig.show ()","c8dcc37d":"sns.pairplot(data=df, vars=['temp', 'humidity', 'windspeed'], \\\n             hue='year', kind='reg', diag_kind='kde', markers=['*','.'], size=5, palette='husl')","af234ad4":"sns.pairplot(data=df, vars=['temp', 'humidity', 'windspeed'], \\\n             hue='workingday', kind='reg', diag_kind='kde', markers=['*','.'], size=4, palette='husl')","061a9c5e":"df.head()","38f14229":"# Dropping columns\ndf=df.drop(columns=['instant', 'atemp', 'date', 'year'],axis=1)","909387aa":"df.head()","14039c2f":"df.shape","815d958c":"categorycols=['season', 'month', 'weekday', 'weather','workingday','holiday']\ndf = pd.get_dummies(df, columns = categorycols,drop_first=True)\ndf.head()","9343e284":"# Use SMOGN for oversampling in regression problem\ndt = smogn.smoter(\n                data=df,\n                y='count',\n                k=5,\n                samp_method='extreme',\n                rel_thres=0.9,\n                rel_method='auto',\n                rel_xtrm_type='high',\n                rel_coef=0.9\n            )","2c5081e0":"dt.shape","6d215718":"X = dt.drop(['casual', 'registered', 'count'], axis=1)\ny = dt[['casual', 'registered']]\n\nX.shape, y.shape","5bc70573":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error\nfrom sklearn.ensemble import  RandomForestRegressor","3a8476c0":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","4a29d2dc":"model_rf = RandomForestRegressor(random_state=42)","4bb105ad":"model_rf.fit(X_train, y_train)\npred_rf = model_rf.predict(X_test)","30dda0cb":"print('Testing R2 Score: ', r2_score(y_test, pred_rf)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_rf)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_rf))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_rf))","a756f2c2":"pred_rf_trn = model_rf.predict(X_train)","9d0caf40":"print('Training R2 Score: ', r2_score(y_train, pred_rf_trn)*100)\nprint('Training RMSE: ', np.sqrt(mean_squared_error(y_train, pred_rf_trn)))\nprint('Training MAE: ', mean_absolute_error(y_train, pred_rf_trn))\nprint('Training MSE: ', mean_squared_error(y_train, pred_rf_trn))","009dac5b":"from sklearn.model_selection import RandomizedSearchCV","85d2125a":"parameters={'n_estimators':[int(x) for x in np.linspace(50,2000,200)],\n            'max_depth':[int(x) for x in np.linspace(1,50,30)],\n            'criterion':[\"mse\", \"mae\"],\n            'min_samples_split': [int(x) for x in np.linspace(1,50,30)],\n            'min_samples_leaf': [int(x) for x in np.linspace(1,50,30)]}","1c62810b":"# Parameter tuning\nrfm=RandomizedSearchCV(model_rf,parameters,cv=5,n_iter=30,n_jobs=-1,verbose=5,random_state=2)\nrfm.fit(X_train,y_train)\nrfm.best_score_","e3da030a":"rfmod=rfm.best_estimator_\nrfmod","86617f7d":"# r2_score on test data\nrfmod.fit(X_train,y_train)\nypred1=rfmod.predict(X_test)","a77196a9":"print('Testing R2 Score: ', r2_score(y_test, ypred1)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, ypred1)))\nprint('Testing MAE: ', mean_absolute_error(y_test, ypred1))\nprint('Testing MSE: ', mean_squared_error(y_test, ypred1))","6df30538":"ypred2=rfmod.predict(X_train)","b3610fff":"print('Training R2 Score: ', r2_score(y_train, ypred2)*100)\nprint('Training RMSE: ', np.sqrt(mean_squared_error(y_train, ypred2)))\nprint('Training MAE: ', mean_absolute_error(y_train, ypred2))\nprint('Training MSE: ', mean_squared_error(y_train, ypred2))","7c904034":"from sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor","1180c4b3":"model_gb = MultiOutputRegressor(GradientBoostingRegressor(random_state=2))\n\nmodel_gb.fit(X_train, y_train)\npred_gb = model_gb.predict(X_test)","3e07e7c1":"print('Testing R2 Score: ', r2_score(y_test, pred_gb)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_gb)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_gb))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_gb))","900c0b89":"pred_gb[:4]","dfd50ee4":"pred_gb_trn = model_gb.predict(X_train)","ff4591be":"print('Training R2 Score: ', r2_score(y_train, pred_gb_trn)*100)\nprint('Training RMSE: ', np.sqrt(mean_squared_error(y_train, pred_gb_trn)))\nprint('Training MAE: ', mean_absolute_error(y_train, pred_gb_trn))\nprint('Training MSE: ', mean_squared_error(y_train, pred_gb_trn))","e1f6d752":"* Box Plot is using following IQR range\n*  above Q3 + 1.5*IQR\n*  below Q1 - 1.5*IQR \n\n* Green dot represents mean value. \n* where as outliers are present in right side means data is right skewed.\n* So we will have to apply log transformation to change it into normal distribution.","c3f53fa4":"* It is used to calculate how one variable is correlated\/ dependent on other variable.\n* Extreme values signify high correlation.\n* Multicollinear variables with correlation more than a threshold are usually dropped from the dataset. ","0f06e26e":"<center> <img src=\"https:\/\/storage.googleapis.com\/gweb-uniblog-publish-prod\/images\/image1_hH9B4gs.max-1000x1000.jpg\"> <center>","61f70f9e":"* No null value is present","5f870ad3":"###### Information :- \n            \n| Feature          | Information                         |\n| -----------------| ------------------------------------|\n| Casual           | Right skewed.                       |\n| Windspeed        | Moderately right skew               |\n| Instant          | Perfectly Normal distribution       |\n| Registered       | Normally distributed                |\n| Count            | Normally distributed                |\n| Temp             | slightly left skewed                |\n| humidity         | Moderately left Skew                |\n| atemp            | Left Skewed                         |","14178144":"#### Univariate Analysis","425566fb":"*  Here we can see that (\"temp\", \"atemp\"),(\"instant\", \"yr\") and (\"season\", \"mnth\")  is highly correlated.\n* So we can drop any one of the highly correlated feature columns.","a36b3fec":"* From weather 1 we have highest number of count.\n* From weather 3 we have least number of count.","72f1e2c2":"* Distplot, Kdeplot, histogram and QQ-Plot is used to check normality.\n* Within IQR we can see that it is slightly above and below the which which means we have Bimodal data.","3aeadfb0":"* Renaming Columns","9aa5bcc3":"##### Casual User's feature for univariate analysis","3db5867e":"#### Bivariate Analysis","d31f1e81":"* Data is right skewed and it is not normally distributed.","0d70fbce":"#### **Using Shortcut for checking Normality and Skewness using pandas skew function.**","d23c67ab":"* In season 1 (springer)  when temp ranges from 0.25 to 0.29 then we have highest number of count.\n* In season 2 (summer)  when temp ranges from 0.6 to 0.64 then we have highest number of count.\n* In season 3 (fall)  when temp ranges from 0.7 to 0.74 then we have highest number of count.\n* In season 4 (winter)  when temp ranges from 0.3 to 0.34 then we have highest number of count.","d0ad22ba":"* In workingday 1  when temp ranges from 0.7 to 0.74 then we have highest number of count.\n* In workingday 0  when temp ranges from 0.65 to 0.69 and 0.34 to 0.39 then we have highest number of count.","518448d3":"* By this distplot we can also see that median is ~ 0.49\n* All value are within 0 to 1 so it seems like normally distributed but it is Bimodal.\n* Two peaks of data, usually indicates you\u2019ve got two different groups.","48af67d4":"###### Information :- \n            \n| Barplot                         | Information                                                                   |\n| ------------------------------| ------------------------------------------------------------------------------|\n| weather vs Count       | When weather is 1 (Clear, Partly cloudy) then count is highest.               |\n| season vs Count        | In season 3 ( fall ) we have highest number of count & least in 1 (springer). |\n| holiday vs Count       | In holiday (1) time we have least number of count.                            |\n| workingday vs Count    | In working day ( Neighter holiday\/ weekend) we have highest number of count.  |","7d1ea3b0":"* Reading dataset and making a copy of it.","898cebed":"# <center> Rental Bike Sharing Dataset <center>","1b9418a3":"* Above 8 rows are present beyond 3 standard deviation ( 99.7% rule).\n* So these are the outliers.","b6e757e7":"* importing the required libraries","ca79d689":"## RandomForest","e189dfaa":"#### Thank you for reading this notebook.","5e5dfd6d":"#### Model Building","65c64c3d":"* In temp :- mean value is 0.49, Median value is 0.49, max is 0.86, min is 0.05 .\n* Similarly we can check for all other.","6d0c9775":"* The data points which fall below mean-3*(sigma) or above mean+3*(sigma) are outliers.\n* And here we have no such data means no outliers.","03789676":"* Changing Datatypes into categorical","87df6c9a":"#### Multivariate Analysis","93a114b5":"* In season 3 (fall) we have highest number of count and least in season 1.","9397e8d7":"## GradientBoostingRegressor","31dc2fb1":"* Number of unique values in year are 2"}}