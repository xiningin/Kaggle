{"cell_type":{"27d81d8a":"code","08241b33":"code","83beaf68":"code","9aee1edb":"code","2bb14358":"code","268d4f91":"code","e667c510":"code","fdbadf34":"code","849b2913":"code","5a1ce8ff":"code","a3f0f31c":"code","8e8a50f4":"code","84ed861c":"code","344d1e39":"code","8786f4d0":"code","663064f1":"code","61f46235":"markdown","240373f5":"markdown","3c8666b6":"markdown","e07c53b4":"markdown","af3a7384":"markdown","b2783f36":"markdown","9efb1b2a":"markdown","5eae1592":"markdown","480fdd75":"markdown","57e67fa8":"markdown","82d90b11":"markdown","0421127b":"markdown","93fbdcc5":"markdown","e43f7a90":"markdown","84839150":"markdown"},"source":{"27d81d8a":"import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n# Environment Set-Up for feedback system.\nimport sys\nsys.path.append('..\/input\/ml-insights-tools')\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom ex3 import *\nprint(\"Setup Complete\")\n\n# Data manipulation code below here\ndata = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv', nrows=50000)\n\n# Remove data with extreme outlier coordinates or negative fares\ndata = data.query('pickup_latitude > 40.7 and pickup_latitude < 40.8 and ' +\n                  'dropoff_latitude > 40.7 and dropoff_latitude < 40.8 and ' +\n                  'pickup_longitude > -74 and pickup_longitude < -73.9 and ' +\n                  'dropoff_longitude > -74 and dropoff_longitude < -73.9 and ' +\n                  'fare_amount > 0'\n                  )\n\ny = data.fare_amount\n\nbase_features = ['pickup_longitude',\n                 'pickup_latitude',\n                 'dropoff_longitude',\n                 'dropoff_latitude']\n\nX = data[base_features]\n\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\nfirst_model = RandomForestRegressor(n_estimators=30, random_state=1).fit(train_X, train_y)\nprint(\"Data sample:\")\ndata.head()","08241b33":"data.describe()","83beaf68":"from matplotlib import pyplot as plt\nfrom pdpbox import pdp, get_dataset, info_plots\n\nfeat_name = 'pickup_longitude'\npdp_dist = pdp.pdp_isolate(model=first_model, dataset=val_X, model_features=base_features, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()","9aee1edb":"for feat_name in base_features:\n    pdp_dist = pdp.pdp_isolate(model=first_model, dataset=val_X,\n                               model_features=base_features, feature=feat_name)\n    pdp.pdp_plot(pdp_dist, feat_name)\n    plt.show()","2bb14358":"q_1.solution()","268d4f91":"fnames = ['pickup_longitude', 'dropoff_longitude']\nlongitudes_partial_plot  =  pdp.pdp_interact(model=first_model, dataset=val_X,\n                                            model_features=base_features, features=fnames)\npdp.pdp_interact_plot(pdp_interact_out=longitudes_partial_plot,\n                      feature_names=fnames, plot_type='contour')\nplt.show()\n","e667c510":"q_2.solution()","fdbadf34":"savings_from_shorter_trip = About 15\n\nq_3.check()","849b2913":"q_3.hint()\nq_3.solution()","5a1ce8ff":"# This is the PDP for pickup_longitude without the absolute difference features. Included here to help compare it to the new PDP you create\nfeat_name = 'pickup_longitude'\npdp_dist_original = pdp.pdp_isolate(model=first_model, dataset=val_X, model_features=base_features, feature=feat_name)\n\npdp.pdp_plot(pdp_dist_original, feat_name)\nplt.show()\n\n\n\n# create new features\ndata['abs_lon_change'] = abs(data.dropoff_longitude - data.pickup_longitude)\ndata['abs_lat_change'] = abs(data.dropoff_latitude - data.pickup_latitude)\n\nfeatures_2  = ['pickup_longitude',\n               'pickup_latitude',\n               'dropoff_longitude',\n               'dropoff_latitude',\n               'abs_lat_change',\n               'abs_lon_change']\n\nX = data[features_2]\nnew_train_X, new_val_X, new_train_y, new_val_y = train_test_split(X, y, random_state=1)\nsecond_model = RandomForestRegressor(n_estimators=30, random_state=1).fit(new_train_X, new_train_y)\n\nfeat_name = 'pickup_longitude'\npdp_dist = pdp.pdp_isolate(model=second_model, dataset=new_val_X, model_features=features_2, feature=feat_name)\n\npdp.pdp_plot(pdp_dist, feat_name)\nplt.show()\n\nq_4.check()","a3f0f31c":"q_4.hint()\nq_4.solution()","8e8a50f4":"# q_5.solution()","84ed861c":"from numpy.random import rand\n\nn_samples = 20000\n\n# Create array holding predictive feature\nX1 = 4 * rand(n_samples) - 2\nX2 = 4 * rand(n_samples) - 2\n# Create y. you should have X1 and X2 in the expression for y\ny = -2 * X1 * (X1<-1) + X1 - 2 * X1 * (X1>1) - X2\n\n# create dataframe because pdp_isolate expects a dataFrame as an argument\nmy_df = pd.DataFrame({'X1': X1, 'X2': X2, 'y': y})\npredictors_df = my_df.drop(['y'], axis=1)\n\nmy_model = RandomForestRegressor(n_estimators=30, random_state=1).fit(predictors_df, my_df.y)\n\npdp_dist = pdp.pdp_isolate(model=my_model, dataset=my_df, model_features=['X1', 'X2'], feature='X1')\n\n# visualize your results\npdp.pdp_plot(pdp_dist, 'X1')\nplt.show()\n\nq_6.check()","344d1e39":"q_6.hint()\nq_6.solution()","8786f4d0":"import eli5\nfrom eli5.sklearn import PermutationImportance\n\nn_samples = 20000\n\n# Create array holding predictive feature\nX1 = 4 * rand(n_samples) - 2\nX2 = 4 * rand(n_samples) - 2\n# Create y. you should have X1 and X2 in the expression for y\ny = X1 * X2\n\n\n# create dataframe because pdp_isolate expects a dataFrame as an argument\nmy_df = pd.DataFrame({'X1': X1, 'X2': X2, 'y': y})\npredictors_df = my_df.drop(['y'], axis=1)\n\nmy_model = RandomForestRegressor(n_estimators=30, random_state=1).fit(predictors_df, my_df.y)\n\n\npdp_dist = pdp.pdp_isolate(model=my_model, dataset=my_df, model_features=['X1', 'X2'], feature='X1')\npdp.pdp_plot(pdp_dist, 'X1')\nplt.show()\n\nperm = PermutationImportance(my_model).fit(predictors_df, my_df.y)\n\nq_7.check()\n\n# show the weights for the permutation importance you just calculated\neli5.show_weights(perm, feature_names = ['X1', 'X2'])","663064f1":"# Uncomment the following lines for the hint or solution\nq_7.hint()\nq_7.solution()","61f46235":"Uncomment the lines below to see a hint or the solution (including an explanation of the important differences between the plots).","240373f5":"## Question 3\nConsider a ride starting at longitude -73.92 and ending at longitude -74. Using the graph from the last question, estimate how much money the rider would have saved if they'd started the ride at longitude -73.98 instead?","3c8666b6":"## Question 1\n\nHere is the code to plot the partial dependence plot for pickup_longitude.  Run the following cell.","e07c53b4":"Uncomment the lines below for a hint or solution","af3a7384":"## Question 7\nCreate a dataset with 2 features and a target, such that the pdp of the first feature is flat, but its permutation importance is high.  We will use a RandomForest for the model.\n\n*Note: You only need to supply the lines that create the variables X1, X2 and y. The code to build the model and calculate insights is provided*.","b2783f36":"Do the shapes match your expectations for what shapes they would have? Can you explain the shape now that you've seen them? \n\nUncomment the following line to check your intuition.","9efb1b2a":"## Question 4\nIn the PDP's you've seen so far, location features have primarily served as a proxy to capture distance traveled. In the permutation importance lessons, you added the features `abs_lon_change` and `abs_lat_change` as a more direct measure of distance.\n\nCreate these features again here. You only need to fill in the top two lines.  Then run the following cell.  \n\n**After you run it, identify the most important difference between this partial dependence plot and the one you got without absolute value features. The code to generate the PDP without absolute value features is at the top of this code cell.**\n\n---","5eae1592":"Uncomment the line below to see the solution and explanation for how one might reason about the plot shape.","480fdd75":"or a solution or hint, uncomment the appropriate line below.","57e67fa8":"## Q6\nThe code cell below does the following:\n\n1. Creates two features, `X1` and `X2`, having random values in the range [-2, 2].\n2. Creates a target variable `y`, which is always 1.\n3. Trains a `RandomForestRegressor` model to predict `y` given `X1` and `X2`.\n4. Creates a PDP plot for `X1` and a scatter plot of `X1` vs. `y`.\n\nDo you have a prediction about what the PDP plot will look like? Run the cell to find out.\n\nModify the initialization of `y` so that our PDP plot has a positive slope in the range [-1,1], and a negative slope everywhere else. (Note: *you should only modify the creation of `y`, leaving `X1`, `X2`, and `my_model` unchanged.*)","82d90b11":"Why does the partial dependence plot have this U-shape?\n\nDoes your explanation suggest what shape to expect in the partial dependence plots for the other features?\n\nCreate all other partial plots in a for-loop below (copying the appropriate lines from the code above).","0421127b":"# Exercises\n\n## Set Up\n\nToday you will create partial dependence plots and practice building insights with data from the [Taxi Fare Prediction](https:\/\/www.kaggle.com\/c\/new-york-city-taxi-fare-prediction) competition.\n\nWe have again provided code to do the basic loading, review and model-building. Run the cell below to set everything up:","93fbdcc5":"## Congrats\n\nPartial dependence plots can be really interesting. We have a [discussion thread](https:\/\/www.kaggle.com\/learn-forum\/65782) to talk about what real-world topics or questions you'd be curious to see addressed with partial dependence plots. \n\nNext up is **SHAP values** which help you understand the logic for each individual prediction.","e43f7a90":"## Q2\n\nNow you will run a 2D partial dependence plot.  As a reminder, here is the code from the tutorial.  \n\n```\ninter1  =  pdp.pdp_interact(model=my_model, dataset=val_X, model_features=feature_names, features=['Goal Scored', 'Distance Covered (Kms)'])\n\npdp.pdp_interact_plot(pdp_interact_out=inter1, feature_names=['Goal Scored', 'Distance Covered (Kms)'], plot_type='contour')\nplt.show()\n```\n\nCreate a 2D plot for the features `pickup_longitude` and `dropoff_longitude`.  Plot it appropriately?\n\nWhat do you expect it to look like?","84839150":"## Question 5\nConsider a scenario where you have only 2 predictive features, which we will call `feat_A` and `feat_B`. Both features have minimum values of -1 and maximum values of 1.  The partial dependence plot for `feat_A` increases steeply over its whole range, whereas the partial dependence plot for feature B increases at a slower rate (less steeply) over its whole range.\n\nDoes this guarantee that `feat_A` will have a higher permutation importance than `feat_B`.  Why or why not?\n\nAfter you've thought about it, uncomment the line below for the solution."}}