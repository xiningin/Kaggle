{"cell_type":{"1606197f":"code","60f9086f":"code","898c1d04":"code","27eac74a":"code","4dce79f0":"code","7772afe7":"code","9aa838e0":"code","c4815a54":"code","237045dc":"code","a67dba44":"code","8a852b97":"code","48bf2b93":"code","5beaa78d":"code","9f28961d":"code","577028af":"code","1c79aae9":"code","e8063f50":"code","5399b4e1":"code","f9d51736":"code","cd9e2f4e":"code","2cb052ff":"code","35481065":"code","d3fb3e9b":"code","53f6aa84":"code","c3756c46":"code","4cab7afc":"code","b19d8854":"code","1d7f271d":"code","c6e2d68e":"code","ce32e396":"code","e7865f64":"code","3a0478e1":"code","61b8c173":"code","b02ade60":"code","d351ec07":"code","ee21382d":"code","3f5cee02":"code","217ddefd":"code","410e2eb6":"markdown","2bd7c94b":"markdown","e5827211":"markdown","7c02f4fe":"markdown","1f21f3af":"markdown","4613fd5c":"markdown"},"source":{"1606197f":"import numpy as np  # Algebra L\u00edneal\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","60f9086f":"import matplotlib.pyplot as plt\nimport warnings\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom plotly.offline import plot, iplot, init_notebook_mode\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\nimport datetime as dt","898c1d04":"%%time\n# import data\nvacunacion = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\nvacunacion.head()","27eac74a":"# Explorar tama\u00f1o e informaci\u00f3n de los datos\nprint(\"El tama\u00f1o de la base de datos es: \", vacunacion.shape)\nprint(\"Info del dataset: \", vacunacion.info())","4dce79f0":"vacunacion.columns","7772afe7":"# Importamos los datos de nuevo para usar paser_date y cambiar a datetime\nvacunacion = pd.read_csv('country_vaccinations.csv', parse_dates=['date'])","9aa838e0":"vacunacion.head(3)","c4815a54":"# Explorar tama\u00f1o e informaci\u00f3n de los datos\nprint(\"El tama\u00f1o de la base de datos es: \", vacunacion.shape)\nprint(\"Info del dataset: \", vacunacion.info())","237045dc":"# se requiere pasar de float a int, pero no lo permite, primero se tienen que rellenar los valores nulos\nvacunacion['total_vaccinations'] = vacunacion['total_vaccinations'].astype(int)","a67dba44":"#hacemos una tabla de los valores nulos\ntotal_of_all = vacunacion.isnull().sum().sort_values(ascending=False)\npercent_of_all = (vacunacion.isnull().sum()\/vacunacion.isnull().count()).sort_values(ascending=False)\nmissing_data_test = pd.concat([total_of_all, percent_of_all], axis=1, keys=['Total Nulos', 'Percent'])\nmissing_data_test.head(9)","8a852b97":"# Exploramos lo que contiene la variable total_of_all\ntotal_of_all","48bf2b93":"#otro m\u00e9todo r\u00e1pido para ver valores nulos\nvacunacion.isnull().sum()","5beaa78d":"# Traemos los datos \"null\" de \"people_fully_vaccinated\"\nvacunacion[vacunacion[\"people_fully_vaccinated\"].isnull()]","9f28961d":"# Podemos eliminar la columna iso_code, source_name, source_website,  ya que no la necesitamos\nvacunacion = vacunacion.drop(columns=['iso_code', 'source_name', 'source_website'])","577028af":"# Comprobamos que se hayan eliminado las columnas seleccionadas previamente\nvacunacion.head(2)","1c79aae9":"# Sustituimos todos los valores nulos con un \"0\"(cero) en la columna 'total_vaccinations'\nvacunacion['total_vaccinations'] = vacunacion['total_vaccinations'].fillna(0)","e8063f50":"# Comprobamos que se hayan rellenado la columna total_vaccinations \nvacunacion.head()","5399b4e1":"# Sustituimos todos los valores nulos con un \"0\"(cero)\nvacunacion['people_vaccinated'] = vacunacion['people_vaccinated'].fillna(0)","f9d51736":"# Sustituimos todos los valores nulos con un \"0\"(cero)\nvacunacion['people_fully_vaccinated'] = vacunacion['people_fully_vaccinated'].fillna(0)\nvacunacion['daily_vaccinations_raw'] = vacunacion['daily_vaccinations_raw'].fillna(0)\nvacunacion['daily_vaccinations'] = vacunacion['daily_vaccinations'].fillna(0)\nvacunacion['total_vaccinations_per_hundred'] = vacunacion['total_vaccinations_per_hundred'].fillna(0)\nvacunacion['people_vaccinated_per_hundred'] = vacunacion['people_vaccinated_per_hundred'].fillna(0)\nvacunacion['people_fully_vaccinated_per_hundred'] = vacunacion['people_fully_vaccinated_per_hundred'].fillna(0)\nvacunacion['daily_vaccinations_per_million'] = vacunacion['daily_vaccinations_per_million'].fillna(0)","cd9e2f4e":"vacunacion.head()","2cb052ff":"# Explorar tama\u00f1o e informaci\u00f3n de los datos\nprint(\"El tama\u00f1o de la base de datos es: \", vacunacion.shape)\nprint(\"Info del dataset: \", vacunacion.info())","35481065":"#explorar los valores \u00fanicos de country\/Region\nvacunacion['country'].unique()","d3fb3e9b":"#Acomodamos los datos por pa\u00eds\npivotepais = pd.pivot_table(vacunacion,index=[\"country\", \"date\", \"country\"] ,aggfunc=np.max)\n#pivotepais\npivotepais.loc[\"Mexico\"].head(159)","53f6aa84":"vacunacion.shape","c3756c46":"Mexico = vacunacion[vacunacion['country'] == 'Mexico']\nMexico.tail(30)","4cab7afc":"Mexico.shape","b19d8854":"vacunacion.sort_values(['country','date','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated'])","1d7f271d":"# Ordenar los valores\nvacunacion = vacunacion.sort_values(['country','date','total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated'])","c6e2d68e":"# Para explorar los datos usamos loc y iloc\nvacunacion.iloc[10000:11000:2] #usa valores num\u00e9ricos filas, :2 de dos en dos","ce32e396":"vacunacion.head(6)","e7865f64":"vacunacion.iloc[4,5]  # trea el valor de la intersecci\u00f3n fila, columna","3a0478e1":"vacunacion.iloc[12:39,1:5] # trae un intercalo especifico filas, columnas","61b8c173":"## Pasamos \"total_vaccinations\" de 'float' a 'int'\nvacunacion['total_vaccinations'] = vacunacion['total_vaccinations'].astype(int)\nvacunacion['people_fully_vaccinated'] = vacunacion['people_fully_vaccinated'].astype(int)\nvacunacion['people_vaccinated'] = vacunacion['people_vaccinated'].astype(int)\nvacunacion['daily_vaccinations'] = vacunacion['daily_vaccinations'].astype(int)\nvacunacion['daily_vaccinations_raw'] = vacunacion['daily_vaccinations_raw'].astype(int)\nvacunacion['total_vaccinations_per_hundred'] = vacunacion['total_vaccinations_per_hundred'].astype(int)t)","b02ade60":"vacunacion_mundial = vacunacion.groupby('date').sum()","d351ec07":"total_vacunas = vacunacion_mundial['total_vaccinations'].reset_index()\nvacunados = vacunacion_mundial['people_fully_vaccinated'].reset_index()\npersonas_vacunadas = vacunacion_mundial['people_vaccinated'].reset_index()\nvacunacion_diairia = vacunacion_mundial['daily_vaccinations'].reset_index()\nvacunacion_crudas =  vacunacion_mundial['daily_vaccinations_raw'].reset_index()\ntotal_vacunas_por_cien = vacunacion_mundial['total_vaccinations_per_hundred'].reset_index()","ee21382d":"vacunacion_diairia","3f5cee02":"trace1 = go.Bar(x = vacunacion_diairia['date'],\n              y = vacunacion_diairia['daily_vaccinations'],\n              name = 'daily_vaccinations',\n              marker_color = 'blue')\n\ntrace2 = go.Bar(x = vacunacion_crudas['date'],\n              y = vacunacion_crudas['daily_vaccinations_raw'],\n              name = 'daily_vaccinations_raw',\n              marker_color = 'red')\n\nlayout = go.Layout(barmode = 'group',\n                  bargap = 0,\n                  bargroupgap = 0,\n                  title = \"Vacunacion contra el coronavirus - Vacunas, Vacunados, (Bar Chart)\",\n                  xaxis = dict(title='Month',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis = dict(title='No. de vacunadoss',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font = dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)'),\n                  legend=dict(x=0, y=1.0, bgcolor='rgba(255, 255, 255, 0)', bordercolor='rgba(255, 255, 255, 0)'),\n)\n\ndata = [trace1, trace2]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","217ddefd":"trace1 = go.Scatter(x = vacunacion_diairia['date'],\n              y = vacunacion_diairia['daily_vaccinations'],\n              name = 'daily_vaccinations',\n              mode='lines+markers',\n              line=dict(color='blue', width=1))\n\ntrace2 = go.Scatter(x = vacunacion_crudas['date'],\n              y = vacunacion_crudas['daily_vaccinations_raw'],\n              name = 'daily_vaccinations_raw',\n              mode='lines+markers',\n              line=dict(color='red', width=1))\n\n\nlayout = go.Layout(title = \"Vacunacion contra el coronavirus - Vacunas, Vacunados, (Bar Chart)(Line Chart)\",\n                  xaxis = dict(title='Month',zeroline= False,\n                         gridcolor='rgb(183,183,183)',showline=True),\n                  yaxis = dict(title='No. de vacunados',zeroline= False,\n                            gridcolor='rgb(183,183,183)',showline=True),\n                  font = dict(family='Courier New, monospace', size=12, color='rgb(0,0,0)'),\n                  legend=dict(x=0, y=1.0, bgcolor='rgba(255, 255, 255, 0)', bordercolor='rgba(255, 255, 255, 0)'),\n)\n\ndata = [trace1, trace2]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","410e2eb6":"## Seguimos explorando el Dataset, tama\u00f1o e informaci\u00f3n","2bd7c94b":"# An\u00e1lisis del Mundo","e5827211":"## Vamos a detectar los valores nulos eliminarlos o sustituir por otro valor, seg\u00fan sea el caso","7c02f4fe":"## Creaci\u00f3n de Dataframes","1f21f3af":"## Detectamos que 'date', est\u00e1 en formato \"object\", necesitamos cambiarlo a \"DateTime\"","4613fd5c":"# Data Analytics\n\n## Primer proyecto\n\n### Vaccination\n\n## Yael Contla"}}