{"cell_type":{"01375e71":"code","f2cfef04":"code","be20815b":"code","fbc6f898":"code","52b45406":"code","ad273742":"code","4dd13a97":"code","39f0e837":"code","966d85b9":"code","3e86cf3f":"code","baf74fbd":"code","a1d58bda":"code","00078688":"code","596c43d1":"code","7d54a3e0":"code","694626dc":"code","2464230a":"code","cdce79b6":"code","e3e09978":"code","2b65ae44":"code","e8c96f0f":"code","9e510973":"code","fe61f690":"code","42fbcfd0":"code","e4416054":"code","0b6653ee":"code","8670274a":"code","05c8b542":"code","cc78d92d":"code","a1c06c0a":"code","9ef4c8f6":"code","68959fe7":"code","172104e7":"markdown","a9ae78ab":"markdown","855175ef":"markdown","f82a71b1":"markdown","dfa05e97":"markdown","227fe7cf":"markdown","09bf7bc0":"markdown","93e55af9":"markdown","7add0131":"markdown","51e3c6a1":"markdown","a0c724aa":"markdown"},"source":{"01375e71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2cfef04":"import pandas as pd\nimport numpy as np\nimport datetime\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","be20815b":"data = pd.read_csv(\"\/kaggle\/input\/gtd\/globalterrorismdb_0718dist.csv\", engine='python')\ndata.head()","fbc6f898":"data.info()","52b45406":"col_names=data.columns.values.tolist()\ncol_names","ad273742":"data[col_names[0:60]].isnull().sum()","4dd13a97":"data[col_names[61:120]].isnull().sum()","39f0e837":"data[col_names[121:135]].isnull().sum()","966d85b9":"col_notnull_names= data.columns[data.isnull().sum()<=100000]\n\n\ndf = pd.DataFrame(data[col_notnull_names], columns=col_notnull_names)\ndf.head()","3e86cf3f":"df.isnull().sum()","baf74fbd":"#Dropping columns that not seem interesting or relevant for the plot\ndf = df.drop(columns=[\"eventid\",\"city\",\"vicinity\",\"specificity\",\"doubtterr\",\"summary\",\"target1\",\"targsubtype1\",\"targsubtype1_txt\",\"targtype1\",\"targtype1_txt\", \"corp1\",\"natlty1\",\"natlty1_txt\",\"guncertain1\",\"nperps\",\"nperpcap\",\"claimed\",\"weapsubtype1\",\"weapsubtype1_txt\",\"weapdetail\",\"property\",\"scite1\",\"dbsource\",\"INT_LOG\",\"INT_IDEO\",\"INT_MISC\",\"INT_ANY\"])\ndf.head()","a1d58bda":"#Filling missing values of kills, wounds, ishostkid and multiple with 0. In this cases is supposed to mean the same\ndf[[\"nkill\",\"nkillus\",\"nkillter\",\"nwound\",\"nwoundus\",\"nwoundte\",\"ishostkid\",\"multiple\"]]=df[[\"nkill\",\"nkillus\",\"nkillter\",\"nwound\",\"nwoundus\",\"nwoundte\",\"ishostkid\",\"multiple\"]].fillna(0)","00078688":"#Drop the rest null values for latitude and longitude (around 4500)\ndf = df.dropna()","596c43d1":"#Making some adjustments for the future plots\ndf[\"country_prov\"]= df.country_txt+': '+df.provstate #To get labels with country and region\n#To get the sum of incidences caused by the attacks\ndf[\"affected\"]=df.nkill+df.nwound\ndf[\"affectedus\"]=df.nkillus+df.nwoundus\ndf[\"affectedter\"]=df.nkillter+df.nwoundte\ndf.head()","7d54a3e0":"center_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(df, lat='latitude', lon='longitude', z=\"nkill\",\n                        center = center_point, hover_name='country_prov',zoom=0, radius=20,\n                        mapbox_style= 'open-street-map', title='Number of domestic kills',\n                        animation_frame='iyear',width=700, height=500)\nfigx.update(layout_coloraxis_showscale=True)\nfigx.show()","694626dc":"center_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(df, lat='latitude', lon='longitude', z=\"nkillus\",\n                        center = center_point, hover_name='country_prov',zoom=0, radius=20,\n                        mapbox_style= 'open-street-map', title='Number of kills to US',\n                        animation_frame='iyear',width=700, height=500)\nfigx.update(layout_coloraxis_showscale=True)\nfigx.show()","2464230a":"center_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(df, lat='latitude', lon='longitude', z=\"nkillter\",\n                        center = center_point, hover_name='country_prov',zoom=0, radius=20,\n                        mapbox_style= 'open-street-map', title='Number of kills by international terrorism',\n                        animation_frame='iyear',width=700, height=500)\nfigx.update(layout_coloraxis_showscale=True)\nfigx.show()","cdce79b6":"center_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(df, lat='latitude', lon='longitude', z=\"nwound\",\n                        center = center_point, hover_name='country_prov',zoom=0, radius=20,\n                        mapbox_style= 'open-street-map', title='Number of domestic wounds',\n                        animation_frame='iyear',width=700, height=500)\nfigx.update(layout_coloraxis_showscale=True)\nfigx.show()","e3e09978":"center_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(df, lat='latitude', lon='longitude', z=\"nwoundus\",\n                        center = center_point, hover_name='country_prov',zoom=0, radius=20,\n                        mapbox_style= 'open-street-map', title='Number of wounds to US',\n                        animation_frame='iyear',width=700, height=500)\nfigx.update(layout_coloraxis_showscale=True)\nfigx.show()","2b65ae44":"center_point = dict(lon=0, lat=0)\nfigx = px.density_mapbox(df, lat='latitude', lon='longitude', z=\"nwoundte\",\n                        center = center_point, hover_name='country_prov',zoom=0, radius=20,\n                        mapbox_style= 'open-street-map', title='Number of wounds by international terrorism',\n                        animation_frame='iyear',width=700, height=500)\nfigx.update(layout_coloraxis_showscale=True)\nfigx.show()","e8c96f0f":"aff_gn = []\nfor name in df.gname.unique():\n    aff_gn1 = df.affected[df.gname.isin([name])].sum()\n    aff_gn.append(aff_gn1)\n\ndf_aff_gn=pd.DataFrame(list(zip(aff_gn,df.gname.unique())),columns=['affected','faction'])\ndf_aff_gn.loc[df_aff_gn[:]['affected']<5000,'faction']='Other factions'\ndf_aff_gn = df_aff_gn[df_aff_gn.faction != 'Unknown']\n\n\nfigx = px.pie(df_aff_gn, values='affected',names='faction', title='Affected people by domestic terrorist group',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","9e510973":"aff_gnus = []\nfor name in df.gname.unique():\n    aff_gnus1 = df.affectedus[df.gname.isin([name])].sum()\n    aff_gnus.append(aff_gnus1)\n\ndf_aff_gn_us=pd.DataFrame(list(zip(aff_gnus,df.gname.unique())),columns=['affected','faction'])\ndf_aff_gn_us.loc[df_aff_gn_us[:]['affected']<200,'faction']='Other factions'\ndf_aff_gn_us = df_aff_gn_us[df_aff_gn_us.faction != 'Unknown']\n\n\nfigx = px.pie(df_aff_gn_us, values='affected',names='faction', title='Affected people by terrorist group to USA',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","fe61f690":"aff_gn_ter = []\nfor name in df.gname.unique():\n    aff_gn1 = df.affectedter[df.gname.isin([name])].sum()\n    aff_gn_ter.append(aff_gn1)\n\ndf_aff_gn_ter=pd.DataFrame(list(zip(aff_gn_ter,df.gname.unique())),columns=['affected','faction'])\ndf_aff_gn_ter.loc[df_aff_gn_ter[:]['affected']<500,'faction']='Other factions'\ndf_aff_gn_ter = df_aff_gn_ter[df_aff_gn_ter.faction != 'Unknown']\n\n\nfigx = px.pie(df_aff_gn_ter, values='affected',names='faction', title='Affected people by terrorist group in international terrorist attack',\n             width=700,height=500)\n\nfigx.update_layout(showlegend=False)\n\nfigx.show()","42fbcfd0":"aff_weap = []\nfor name in df.weaptype1_txt.unique():\n    aff_weap1 = df.affected[df.weaptype1_txt.isin([name])].sum()\n    aff_weap.append(aff_weap1)\n\n\ndf_aff_weap=pd.DataFrame(list(zip(aff_weap,df.weaptype1_txt.unique())),columns=['affected','weapontype'])\ndf_aff_weap.loc[df_aff_weap[:]['affected']<10,'weapontype']='Other'\ndf_aff_weap = df_aff_weap[df_aff_weap.weapontype != 'Unknown']\n\n\nfigx = px.pie(df_aff_weap, values='affected',names='weapontype', title='Affected people by Weapon type domestic',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","e4416054":"aff_weapus = []\nfor name in df.weaptype1_txt.unique():\n    aff_weap1 = df.affectedus[df.weaptype1_txt.isin([name])].sum()\n    aff_weapus.append(aff_weap1)\n\n\ndf_aff_weapus=pd.DataFrame(list(zip(aff_weapus,df.weaptype1_txt.unique())),columns=['affected','weapontype'])\ndf_aff_weapus.loc[df_aff_weapus[:]['affected']<10,'weapontype']='Other'\ndf_aff_weapus = df_aff_weapus[df_aff_weapus.weapontype != 'Unknown']\n\n\nfigx = px.pie(df_aff_weapus, values='affected',names='weapontype', title='Affected people by Weapon type to US',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","0b6653ee":"aff_weapter = []\nfor name in df.weaptype1_txt.unique():\n    aff_weap1 = df.affectedter[df.weaptype1_txt.isin([name])].sum()\n    aff_weapter.append(aff_weap1)\n\n\ndf_aff_weapter=pd.DataFrame(list(zip(aff_weapter,df.weaptype1_txt.unique())),columns=['affected','weapontype'])\ndf_aff_weapter.loc[df_aff_weapter[:]['affected']<10,'weapontype']='Other'\ndf_aff_weapter = df_aff_weapter[df_aff_weapter.weapontype != 'Unknown']\n\n\nfigx = px.pie(df_aff_weapter, values='affected',names='weapontype', title='Affected people by Weapon type in international terrorist attack',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","8670274a":"aff_att = []\nfor name in df.attacktype1_txt.unique():\n    aff_att1 = df.affected[df.attacktype1_txt.isin([name])].sum()\n    aff_att.append(aff_att1)\n\n\ndf_aff_att=pd.DataFrame(list(zip(aff_att,df.attacktype1_txt.unique())),columns=['affected','attacktype'])\ndf_aff_att.loc[df_aff_att[:]['affected']<10,'attacktype']='Other'\ndf_aff_att = df_aff_att[df_aff_att.attacktype != 'Unknown']\n\n\nfigx = px.pie(df_aff_att, values='affected',names='attacktype', title='Affected people by Attack type domestic',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","05c8b542":"aff_attus = []\nfor name in df.attacktype1_txt.unique():\n    aff_att1 = df.affectedus[df.attacktype1_txt.isin([name])].sum()\n    aff_attus.append(aff_att1)\n\n\ndf_aff_attus=pd.DataFrame(list(zip(aff_attus,df.attacktype1_txt.unique())),columns=['affected','attacktype'])\ndf_aff_attus.loc[df_aff_attus[:]['affected']<10,'attacktype']='Other'\ndf_aff_attus = df_aff_attus[df_aff_attus.attacktype != 'Unknown']\n\n\nfigx = px.pie(df_aff_attus, values='affected',names='attacktype', title='Affected people by Attack type to US',\n             width=700,height=500)\n\nfigx.update_layout(showlegend=False)\nfigx.show()","cc78d92d":"aff_attter = []\nfor name in df.attacktype1_txt.unique():\n    aff_att1 = df.affectedter[df.attacktype1_txt.isin([name])].sum()\n    aff_attter.append(aff_att1)\n\n\ndf_aff_attter=pd.DataFrame(list(zip(aff_attter,df.attacktype1_txt.unique())),columns=['affected','attacktype'])\ndf_aff_attter.loc[df_aff_attter[:]['affected']<10,'attacktype']='Other'\ndf_aff_attter = df_aff_attter[df_aff_attter.attacktype != 'Unknown']\n\n\nfigx = px.pie(df_aff_attter, values='affected',names='attacktype', title='Affected people by Attack type in international terrorist attack',\n             width=700,height=500)\nfigx.update_layout(showlegend=False)\n\nfigx.show()","a1c06c0a":"aff_c = []\nreg_c = []\nfor name in df.country_txt.unique():\n    aff_c1 = df.affected[df.country_txt.isin([name])].sum()\n    reg_c1 = df.region_txt[df.country_txt.isin([name])].values[0]\n    aff_c.append(aff_c1)\n    reg_c.append(reg_c1)\n\n\ndf_aff_rc=pd.DataFrame(list(zip(aff_c,df.country_txt.unique(),reg_c)),columns=['affected','Country','Region'])\n#df_aff_rc.loc[df_aff_rc[:]['affected']=0,'attacktype']='Other'\ndf_aff_rc = df_aff_rc[df_aff_rc.affected != 0]\n\n\nfigx = px.treemap(df_aff_rc, path=[px.Constant('World'),'Region','Country'], values='affected',\n                  title='Affected people by Region, Country Domestic',color='affected',\n                 width=1000,height=700)\n\nfigx.show()","9ef4c8f6":"aff_cus = []\nreg_cus = []\nfor name in df.country_txt.unique():\n    aff_c1 = df.affectedus[df.country_txt.isin([name])].sum()\n    reg_c1 = df.region_txt[df.country_txt.isin([name])].values[0]\n    aff_cus.append(aff_c1)\n    reg_cus.append(reg_c1)\n\n\ndf_aff_rcus=pd.DataFrame(list(zip(aff_cus,df.country_txt.unique(),reg_cus)),columns=['affected','Country','Region'])\n\ndf_aff_rcus = df_aff_rcus[df_aff_rcus.affected != 0]\n\n\nfigx = px.treemap(df_aff_rcus, path=[px.Constant('World'),'Region','Country'], values='affected',\n                  title='Affected people by Region, Country to US',color='affected',\n                 width=1000,height=700)\n\nfigx.show()","68959fe7":"aff_cter = []\nreg_cter = []\nfor name in df.country_txt.unique():\n    aff_c1 = df.affectedter[df.country_txt.isin([name])].sum()\n    reg_c1 = df.region_txt[df.country_txt.isin([name])].values[0]\n    aff_cter.append(aff_c1)\n    reg_cter.append(reg_c1)\n\n\ndf_aff_rcter=pd.DataFrame(list(zip(aff_cter,df.country_txt.unique(),reg_cter)),columns=['affected','Country','Region'])\n\ndf_aff_rcter = df_aff_rcter[df_aff_rcter.affected != 0]\n\n\nfigx = px.treemap(df_aff_rcter, path=[px.Constant('World'),'Region','Country'], values='affected',\n                  title='Affected people by Region, Country in international terrorist attack',color='affected',\n                 width=1000,height=700)\n\nfigx.show()","172104e7":"### Number of wounds","a9ae78ab":"### Create a new dataset with the interesting and non null columns","855175ef":"## Data import","f82a71b1":"### Affected people by region, country","dfa05e97":"### Number of kills","227fe7cf":"Many columns are almost entirely null.","09bf7bc0":"# Global internal terrorism  \n\nThe goal is to study the hot regions of internal terrorism around the globe.","93e55af9":"### Affected people by terrorist faction","7add0131":"## Data visualization\n\nLet's explore the next for domestic, to US and international terrorism:\n\n* Animated graphs of kills and wounds in the world year by year.\n* Pie plots for:\n    * Affected people by terrorist faction\n    * Affected people by weapon type\n    * Affected people by attack type\n* Treemap for affected people by the path: World-> Region-> Country","51e3c6a1":"### Affected people by weapon type","a0c724aa":"### Affected people by attack type"}}