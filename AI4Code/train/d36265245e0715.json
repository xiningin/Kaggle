{"cell_type":{"9f414e92":"code","7acb086d":"code","33b6e3ff":"code","258338bd":"code","07b5b0c0":"code","289f6836":"code","016fba8e":"code","12997fae":"code","d71c3711":"code","c15740ea":"code","bcbd7c8f":"code","cdb87017":"code","1e75686f":"code","e311b2d8":"code","ae5f887f":"code","b8a8d3d9":"code","91096e96":"code","796f0e19":"code","e46a1056":"markdown","a44f44d1":"markdown","d6f0cce9":"markdown","637f1f7b":"markdown","dbfe3527":"markdown","2fb49e2c":"markdown","a744fc35":"markdown","61c8b847":"markdown","a3e8c29c":"markdown"},"source":{"9f414e92":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","7acb086d":"df = pd.read_csv('..\/input\/diabetes-health-indicators-dataset\/diabetes_binary_5050split_health_indicators_BRFSS2015.csv')","33b6e3ff":"df.columns","258338bd":"df.head()","07b5b0c0":"df.describe()","289f6836":"# balanced data set\ndf.hist('Diabetes_binary')\nprint(\"Balanced data set has eqully split diabetes samples.\")","016fba8e":"# plot the correlation of features\ncorr = df.corr()\nfig, ax = plt.subplots(figsize=(10,7)) \nsns.heatmap(corr)\nplt.title(\"Correlation matrix of features\")\nplt.show()","12997fae":"df.corr()['Diabetes_binary']","d71c3711":"diab_corr = df.corr()['Diabetes_binary']\nhigh_corr = diab_corr[diab_corr > 0.25].keys()\n\nprint(\"High correlation columns:\", high_corr)","c15740ea":"selected_columns = high_corr[1:]\n\nsns.pairplot(df, x_vars = selected_columns, y_vars = selected_columns, hue=\"Diabetes_binary\", height=2.5)\nplt.show()","bcbd7c8f":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","cdb87017":"# selecting columns\ndata = df[selected_columns]\ntargets = df[['Diabetes_binary']]\n\n# splitting the data in training and validation set\nX_train, X_val, y_train, y_val = train_test_split(data, targets, test_size=0.20, random_state=123)\ny_train = y_train.values.ravel()\ny_val = y_val.values.ravel()\n\n\nX_train.shape, X_val.shape, y_train.shape, y_val.shape","1e75686f":"clf = SVC()\nclf.fit(X_train, y_train)\nprint(\"Accuracy achieved with the validation set: \", clf.score(X_val, y_val))","e311b2d8":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\nprint(\"Accuracy achieved with the validation set: \", clf.score(X_val, y_val))","ae5f887f":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\nprint(\"Accuracy achieved with the validation set: \", clf.score(X_val, y_val))","b8a8d3d9":"len(selected_columns)","91096e96":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential \nfrom keras.layers import * \n\n\n# Creating a simple sequential model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.Input(shape=(len(selected_columns),))) \nmodel.add(tf.keras.layers.Dense(100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(100, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.summary()\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n\nhistory = model.fit(X_train, y_train, epochs=20, batch_size=128, verbose=1)\n\n# Evaluate test accuracy\ntest_loss, test_acc = model.evaluate(X_val, y_val)\n\nprint(\"\\nTesting with the validation set \\nloss: {:.3f} \\t accuracy {:.3f}\".format(test_loss, test_acc))","796f0e19":"# plotting training progress\n\nfig = plt.figure(figsize=(12,5))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['loss'])\nplt.ylabel('train loss')\nplt.xlabel('epochs')\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['accuracy'])\nplt.ylabel('train accuracy')\nplt.xlabel('epochs')\nplt.suptitle(\"Neural Network Training Progress\")\nplt.tight_layout()\nplt.show()","e46a1056":"# Datathon '21: Diabetes Dataset\n\nEstimating if a person has diabetes (or pre-diabetes), given data about their health.\n\nBy: Ismail, Amna, Mark\n\nSource of data set: https:\/\/www.kaggle.com\/alexteboul\/diabetes-health-indicators-dataset  \nGithub repo: https:\/\/github.com\/isgeles\/UW_Datathon21","a44f44d1":"## Conclusion\n\nWith our best performing models (SVM or fully connected neural network) we are able to predict with over **74% accuracy**  \nif a patient has pre-diabetes or diabetes given their health information of only 6 values:\n'HighBP', 'HighChol', 'BMI', 'GenHlth', 'DiffWalk','Age'.","d6f0cce9":"### SVM","637f1f7b":"## Data Visualization","dbfe3527":"## Model selection","2fb49e2c":"### Decision Tree ","a744fc35":"## Exploring the data","61c8b847":"### Random Forest","a3e8c29c":"### Neural Network"}}