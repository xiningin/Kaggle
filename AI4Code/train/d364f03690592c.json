{"cell_type":{"e34cddcb":"code","9c15849c":"code","a18a2d75":"code","56a2cd14":"code","0edb19e3":"code","05614af3":"code","40da88ad":"code","28cad4f7":"code","48a5181d":"code","fc393138":"code","ef8c5ae1":"code","7d1146d6":"code","56a8c3af":"code","e71a8375":"code","5d87472c":"code","9e0471d1":"code","c5b6e278":"code","4f42ee8c":"code","a51128ea":"code","27bf0cb3":"code","7291a0e4":"code","0bd0c363":"code","31808283":"code","7f666485":"code","2cf7237f":"code","1dfc7102":"code","486b387f":"code","da2dec76":"code","58958d7c":"code","7708fe72":"code","cc0175cf":"code","6b1fc68e":"code","3c14986f":"code","a7d6c4bd":"code","3353d559":"code","4ae49ccf":"code","d90c6797":"code","ee55426e":"code","3decc484":"code","0329f667":"code","a8b1a028":"code","dfc66013":"code","212bd2aa":"code","b6812781":"code","9151265a":"code","823fd7e3":"code","3cd67888":"code","4ed9724a":"code","26a8d78f":"code","ebbbbbd8":"code","05376b64":"code","65d51f42":"code","15cf8448":"code","2542b688":"code","79ed98da":"code","1fb2624d":"code","08054cab":"code","72ae3b54":"code","2aff1bd4":"code","d28be84e":"code","894c43a4":"code","2a4c60f1":"code","e5caf68d":"code","b5b3def5":"code","8e0f8333":"code","c72a5751":"code","e4fe7ac3":"code","25f36ba3":"code","f6a36244":"code","3ab9f996":"code","687da928":"code","f348fbb0":"code","9791b21b":"code","271ac284":"code","fadb567f":"code","e7ba84b8":"code","ff078738":"code","7035659d":"code","36a9acf8":"code","7824e164":"code","26e0b15f":"code","fbe51968":"code","c0105711":"code","b2323262":"code","22763d88":"code","3ee0091a":"code","a22d21a0":"code","204a3982":"code","8111da13":"code","948ca992":"code","14219e23":"code","80b4b786":"markdown","e691fd87":"markdown","1691e12b":"markdown","8e97a241":"markdown","47937c22":"markdown","864b5028":"markdown","101d6250":"markdown","c82de2fa":"markdown","fbdbf081":"markdown","3b51b2f7":"markdown","bc9a4da6":"markdown","f6c057b9":"markdown","7243a624":"markdown","8e5906d4":"markdown","9adf7894":"markdown","09f952f4":"markdown","b5615eb7":"markdown","14c25755":"markdown","aef0b95a":"markdown","e040b075":"markdown","30a84751":"markdown","2e09268c":"markdown","46ff4170":"markdown","67370e14":"markdown","d1dd5704":"markdown","187c4ab0":"markdown","89354f7c":"markdown","01a138df":"markdown","842ce1a6":"markdown","0a47fc89":"markdown","8b47f083":"markdown","29f564ba":"markdown","a21eb559":"markdown","9ca76293":"markdown","df178713":"markdown","25800186":"markdown","a2760335":"markdown","b497ddce":"markdown","dfd76de5":"markdown","e4b0eb46":"markdown","4b2d0536":"markdown","1b639283":"markdown","a7291d18":"markdown","e986be82":"markdown","271181fe":"markdown","f75de7b2":"markdown","c581ff5e":"markdown","aef5ae8c":"markdown","1ee8344e":"markdown","ab06f0bf":"markdown","7a494eca":"markdown","f87961c1":"markdown"},"source":{"e34cddcb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c15849c":"import pandas as pd\nimport datetime\nimport pandas_profiling\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nfrom scipy.stats import randint\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\n\n\nfrom mlxtend.feature_selection import ExhaustiveFeatureSelector as EFS\nfrom math import log as log\nimport os","a18a2d75":"path = '\/kaggle\/input\/sf-dst-scoring\/'","56a2cd14":"train = pd.read_csv(path +'\/train.csv')\ntest = pd.read_csv(path +'test.csv')\nsample_sub = pd.read_csv(path +'\/sample_submission.csv')","0edb19e3":"train.info()\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438', train.shape)\n","05614af3":"train.head()","40da88ad":"test.info()\nprint('\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438', train.shape)","28cad4f7":"test.head(5)","48a5181d":"sample_sub.info()\nprint(sample_sub.shape)","fc393138":"sample_sub.head(5)","ef8c5ae1":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 default \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u043a\u0435\nsns.countplot(train['default'])","7d1146d6":"# \u0427\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c \u043e\u0431\u0443\u0449\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0432\u044b\u0431\u043e\u0440\u043a\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 1 \u0438 0\ntrain['sample'] = 1   # \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntest['sample'] = 0    # \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430\ntest['default'] = -1  # \u0442.\u043a. \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 default, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 -1\ndata = train.append(test, sort=False).reset_index(drop=True)","56a8c3af":"data.info()","e71a8375":"data.shape","5d87472c":"display(data)","9e0471d1":"num_cols = ['age','decline_app_cnt','score_bki','income','bki_request_cnt','region_rating'] # \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols = ['education','work_address','home_address','sna','first_time'] # \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbin_cols = ['sex','car','car_type','good_work','foreign_passport'] # \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","c5b6e278":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nfig, axes = plt.subplots(2, 3, figsize=(25,15))\n\nfor i,col in enumerate(num_cols):\n    sns.distplot(data[col], kde=False, ax=axes.flat[i])","4f42ee8c":"fig, axes = plt.subplots(1, 3, figsize=(10,7))\nfor i,col in enumerate(['decline_app_cnt', 'bki_request_cnt', 'income']):\n    data[col] = np.log(data[col] + 1)\n    sns.distplot(data[col][data[col] > 0].dropna(), ax=axes.flat[i],kde = False, rug=False,color=\"g\")\n    #sns.distplot(data[col], kde=False, ax=axes.flat[i],color='g')\n    ","a51128ea":"def boxplot(col):\n    fig, axes = plt.subplots(figsize = (14, 4))\n    sns.boxplot(x='default', y=col, data=data[data['sample']==1],ax=axes)\n    axes.set_title('Boxplot for ' + col)\n    plt.show()\nfor col in num_cols:\n    boxplot(col)","27bf0cb3":"data.education.value_counts().plot(kind=\"bar\",figsize=(8,6),color=\"r\")","7291a0e4":"data.education.isna().value_counts()","0bd0c363":"data.education = data.education.fillna(\"SCH\")","31808283":"data.education.isna().value_counts()","7f666485":"plt.figure(figsize=(15, 8))\nsns.boxplot(x=\"education\", y=\"income\", data=data, showfliers=False)","2cf7237f":"plt.figure(figsize=(15, 8))\nsns.boxplot(x=\"region_rating\", y=\"score_bki\", data=data, showfliers=False)","1dfc7102":"plt.figure(figsize=(15, 8))\nsns.boxplot(x=\"education\", y=\"age\", data=data, showfliers=False)","486b387f":"plt.figure(figsize=(15, 8))\nsns.boxplot(x=\"good_work\", y=\"income\", data=data, showfliers=False)","da2dec76":"plt.figure(figsize=(15, 8))\nsns.boxplot(x=\"foreign_passport\", y=\"score_bki\", data=data, showfliers=False)","58958d7c":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.corr(), vmin=0, vmax=1, annot = True)","7708fe72":"data['app_date'] = pd.to_datetime(data.app_date)","cc0175cf":"data['app_date'].sample(3)","6b1fc68e":"data['app_date'] = data['app_date'].apply(lambda x: (x - data['app_date'].min()).days) ","3c14986f":"# \u0417\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0432\u0441\u044f\u043a\u0438\u0439 \u0441\u043b\u0443\u0447\u0430\u0439\ndf = data.copy()","a7d6c4bd":"# \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmean_income = df.groupby('age')['income'].mean().to_dict()\ndf['mean_income_age'] = df['age'].map(mean_income)","3353d559":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u043e\u0445\u043e\u0434 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443\nmax_income = df.groupby('age')['income'].max().to_dict()\ndf['max_income_age'] = df['age'].map(max_income)","4ae49ccf":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c\ndf[\"normalized_income\"] = abs((df.income - df.mean_income_age)\/df.max_income_age)","d90c6797":"# \u041d\u0430\u0439\u0434\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0434\u043e\u0445\u043e\u0434\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\nmean_bki = df.groupby('age')['bki_request_cnt'].mean().to_dict()\ndf['mean_requests_age'] = df['age'].map(mean_bki)","ee55426e":"mean_bki_inc = df.groupby('income')['bki_request_cnt'].mean().to_dict()\ndf['mean_requests_income'] = df['income'].map(mean_bki_inc)","3decc484":"# \u041d\u0430\u0439\u0434\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\nmean_income_rat = df.groupby('region_rating')['income'].mean().to_dict()\ndf['mean_income_region'] = df['region_rating'].map(mean_income_rat)","0329f667":"mapped_data = {}\nlabel_encoder = LabelEncoder()\nfor col in bin_cols:\n    df[col] = label_encoder.fit_transform(df[col])\n    mapped_data[col] = dict(enumerate(label_encoder.classes_))","a8b1a028":"mapped_data","dfc66013":"mapped_data_cat = {}\nenc = OneHotEncoder()\nfor col in cat_cols:\n    df[col] = label_encoder.fit_transform(df[col])\n    mapped_data_cat[col] = dict(enumerate(label_encoder.classes_))\n","212bd2aa":"mapped_data_cat","b6812781":"df.columns","9151265a":"num_cols = ['age','decline_app_cnt','score_bki','income','bki_request_cnt','app_date', 'mean_income_age','region_rating','max_income_age', 'normalized_income',\n       'mean_requests_age', 'mean_requests_income', 'mean_income_region'] # \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ncat_cols = ['education','work_address','home_address','sna','first_time'] # \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\nbin_cols = ['sex','car','car_type','good_work','foreign_passport'] # \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","823fd7e3":"len(num_cols)","3cd67888":"for col in num_cols:\n    median = df[col].median()\n    IQR = df[col].quantile(0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    print(\"\u041a\u043e\u043b\u043e\u043d\u043a\u0430 \", col)\n    print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75), \n          \"IQR: {}, \".format(IQR),\"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))","4ed9724a":"df.age.hist(color='r', figsize=(10,6))","26a8d78f":"df.decline_app_cnt.hist(color=\"g\",figsize=(10,6))","ebbbbbd8":"df.bki_request_cnt.hist(color=\"b\",figsize=(10,6))","05376b64":"df.mean_income_age.hist(color=\"purple\",figsize=(10,6))","65d51f42":"df.region_rating.hist(color=\"pink\",figsize=(10,6))","15cf8448":"dataset = df.copy() # \u0415\u0449\u0435 \u0440\u0430\u0437 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043d\u0430\u0448 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","2542b688":"dataset.head(3)","79ed98da":"dataset[num_cols] = pd.DataFrame(StandardScaler().fit_transform(df[num_cols]), columns = df[num_cols].columns)\n","1fb2624d":"data_temp = dataset.loc[data['sample'] == 1] # \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","08054cab":"imp_num = pd.Series(f_classif(data_temp[num_cols], data_temp['default'])[0], index = num_cols)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh')","72ae3b54":"imp_cat = pd.Series(mutual_info_classif(data_temp[bin_cols + cat_cols], data_temp['default'],\n                                     discrete_features =True), index = bin_cols + cat_cols)\nimp_cat.sort_values(inplace = True)\nimp_cat.plot(kind = 'barh')","2aff1bd4":"df = pd.get_dummies(dataset, prefix=cat_cols, columns=cat_cols) # dummy \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","d28be84e":"data = df.copy()","894c43a4":"data.head(3)","2a4c60f1":"train_df = df.query('sample == 1').drop(['sample','client_id'], axis=1)\ntest_df = df.query('sample == 0').drop(['sample','client_id'], axis=1)","e5caf68d":"X = train_df.drop(['default'], axis=1).values\ny = train_df['default'].values # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","b5b3def5":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.20, random_state=42)","8e0f8333":"# \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \nmodel = LogisticRegression(max_iter = 1000)","c72a5751":"model.fit(X_train, y_train)\ny_pred = model.predict(X_valid)","e4fe7ac3":"probs = model.predict_proba(X_valid)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_valid, probs)\nroc_auc = roc_auc_score(y_valid, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","25f36ba3":"print('accuracy_score:',accuracy_score(y_valid,y_pred))\nprint('precision_score:',precision_score(y_valid,y_pred))\nprint('recall_score:',recall_score(y_valid,y_pred))\nprint('f1_score:',f1_score(y_valid,y_pred))","f6a36244":"cm = confusion_matrix(y_valid, y_pred)\ncmd = ConfusionMatrixDisplay(cm, display_labels=['non_default','default'])\ncmd.plot()\ncmd.ax_.set(xlabel='Predicted', ylabel='True')","3ab9f996":"train_df = df.query('sample == 1').drop(['sample','client_id'], axis=1)\ntest_df = df.query('sample == 0').drop(['sample','client_id'], axis=1)","687da928":"X = train_df.drop(['default'], axis=1).values\ny = train_df['default'].values # \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","f348fbb0":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.20, random_state=42)","9791b21b":"param_dist = {\"max_depth\": [3, None],\n\n              \"max_features\": randint(1, 9),\n\n              \"min_samples_leaf\": randint(1, 9),\n\n              \"criterion\": [\"gini\", \"entropy\"]}","271ac284":" tree = DecisionTreeClassifier() # \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439","fadb567f":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 RandomizedSearchCV\ntree_cv = RandomizedSearchCV(tree, param_dist, cv = 5)","e7ba84b8":"model_2 = tree_cv.fit(X_train, y_train)","ff078738":"print(\"Tuned Decision Tree Parameters: {}\".format(tree_cv.best_params_))\nprint(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {}\".format(tree_cv.best_score_))","7035659d":" tree = DecisionTreeClassifier(criterion='gini',max_depth=3, max_features=7, min_samples_leaf=5)","36a9acf8":"model_2 = tree.fit(X_train, y_train)","7824e164":"probs = model_2.predict_proba(X_valid)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_valid, probs)\nroc_auc = roc_auc_score(y_valid, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","26e0b15f":"iter_ = 15\nepsilon_stop = 1e-3\n\nparam_grid = [\n    {'penalty': ['l1'], \n     'solver': ['liblinear', 'lbfgs'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['l2'], \n     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n    {'penalty': ['none'], \n     'solver': ['newton-cg', 'lbfgs', 'sag', 'saga'], \n     'class_weight':['none', 'balanced'], \n     'multi_class': ['auto','ovr'], \n     'max_iter':[iter_],\n     'tol':[epsilon_stop]},\n]\n\ngridsearch = GridSearchCV(model, param_grid, scoring='f1', n_jobs=-1, cv=5)\ngridsearch.fit(X_train, y_train)\nmodel = gridsearch.best_estimator_\n\nbest_parameters = model.get_params()\nfor param_name in sorted(best_parameters.keys()):\n        print('\\t%s: %r' % (param_name, best_parameters[param_name]))\n\npreds = model.predict(X_valid)\nprint('Accuracy: %.4f' % accuracy_score(y_valid, preds))\nprint('Precision: %.4f' % precision_score(y_valid, preds))\nprint('Recall: %.4f' % recall_score(y_valid, preds))\nprint('F1: %.4f' % f1_score(y_valid, preds))","fbe51968":"best_model = LogisticRegression(random_state=42, C=1,  class_weight='balanced', dual=False, \n                            fit_intercept=True, intercept_scaling=1, l1_ratio=None, multi_class='auto',\n                             n_jobs=None, penalty='l1', solver='saga',tol=0.001, verbose=0, warm_start=False,max_iter=1000)\n\nbest_model.fit(X_train, y_train)\ny_pred_prob = best_model.predict_proba(X_valid)[:,1]\ny_pred = best_model.predict(X_valid)","c0105711":"y_pred_prob","b2323262":"print('accuracy_score:',accuracy_score(y_valid,y_pred))\nprint('precision_score:',precision_score(y_valid,y_pred))\nprint('recall_score:',recall_score(y_valid,y_pred))\nprint('f1_score:',f1_score(y_valid,y_pred))","22763d88":"probs = best_model.predict_proba(X_valid)\nprobs = probs[:,1]\n\n\nfpr, tpr, threshold = roc_curve(y_valid, probs)\nroc_auc = roc_auc_score(y_valid, probs)\n\nplt.figure()\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'Regression')\nplt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right')\nplt.show()","3ee0091a":"train_data = data.query('sample == 1').drop(['sample','client_id'], axis=1)\ntest_data = data.query('sample == 0').drop(['sample','client_id'], axis=1)","a22d21a0":"X_train = train_data.drop(['default'], axis=1)\ny_train = train_data.default.values\nX_test = test_data.drop(['default'], axis=1)","204a3982":"test_data.shape, train_data.shape, X_train.shape, y_train.shape, X_test.shape","8111da13":"last_model = LogisticRegression(random_state=42, C=1,  class_weight='balanced', dual=False, \n                            fit_intercept=True, intercept_scaling=1, l1_ratio=None, multi_class='auto',\n                             n_jobs=None, penalty='l1', solver='saga',tol=0.001, verbose=0, warm_start=False,max_iter=1000)\n\nlast_model.fit(X_train, y_train)\ny_pred_prob = last_model.predict_proba(X_test)[:,1]\ny_pred = last_model.predict(X_test)","948ca992":"submit = pd.DataFrame(test.client_id)\nsubmit['default']=y_pred_prob\nsubmit.to_csv('submission.csv', index=False)","14219e23":"display(submit)","80b4b786":"## **\u041a\u0440\u0438\u0432\u0430\u044f ROC AUC**","e691fd87":"\u041d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u043e: 12880 \u0438\u0437 14665, \u0442.\u0435. 87.8 %, \u043e\u0434\u043d\u0430\u043a\u043e, \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0435 \u0442\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e: 53 \u0438\u0437 95, \u0442.\u0435. 56.7%, \u0447\u0442\u043e \u043c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043f\u043b\u043e\u0445\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0434\u0430\u0432\u0442\u044c \u043a\u0440\u0435\u0434\u0438\u0442 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c....\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u043d\u0430\u0448\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438.\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438.","1691e12b":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445","8e97a241":"# *Categorical*","47937c22":"\u0414\u0430\u0436\u0435 \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ROC AUC \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c. \u0417\u0430\u0442\u043e \u0432\u0438\u0434\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a.","864b5028":"\u0427\u0435\u043c \u0432\u044b\u0448\u0435 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u043e\u0445\u043e\u0434.","101d6250":"## \u0421\u0442\u043e\u043b\u0431\u0446\u044b \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043b\u0443\u0447\u0448\u0435, \u043d\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0435\u0441\u0442\u044c.","c82de2fa":"## \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","fbdbf081":"\u0421\u0443\u0434\u044f \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c, \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u043b\u043e\u0445\u043e \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f...","3b51b2f7":"\u0418\u0442\u0430\u043a, \u0437\u0434\u0435\u0441\u044c \u0441\u0430\u043c\u044b\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a sna(\u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438), \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 first_time, home_address \u0438 education.","bc9a4da6":"### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c RandomizedSearchCV. \u041f\u043e\u043c\u043e\u0433 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0430\u0439\u0442: http:\/\/espressocode.top\/ml-hyperparameter-tuning\/","f6c057b9":"\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","7243a624":"## *\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445:*\nclient_id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n\neducation - \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f\n\nsex - \u043f\u043e\u043b \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n\nage - \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n\ncar - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n\ncar_type - \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438\n\ndecline_app_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a\n\ngood_work - \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u201c\u0445\u043e\u0440\u043e\u0448\u0435\u0439\u201d \u0440\u0430\u0431\u043e\u0442\u044b\n\nbki_request_cnt - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418\n\nhome_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n\nwork_address - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430\n\nincome - \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430\n\nforeign_passport - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\n\nsna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430\n\nfirst_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435\n\nscore_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418\n\nregion_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\n\napp_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438\n\ndefault - \u0444\u043b\u0430\u0433 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443","8e5906d4":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ROC AUC \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u043e, \u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043c\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.","9adf7894":"\u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441 \u0441\u0430\u043c\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u0434\u0430\u0442\u044b \u0432 \u043d\u0430\u0448\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.","09f952f4":"### \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0431\u043e\u043a\u0441\u043f\u043b\u043e\u0442\u044b \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445:","b5615eb7":"### \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c GridSearchCV","14c25755":"# **\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435**","aef0b95a":"\u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442.","e040b075":"1) \u041d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0441\u0442\u0430\u0440\u0448\u0435.\n\n2) \u0421\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u0432\u044b\u0448\u0435 \u0443 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n\n3) \u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c, \u0434\u043e\u0445\u043e\u0434 \u043d\u0435\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u0443 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0445.\n\n4) \u0420\u0435\u0439\u0442\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \u043a \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u0440\u0435\u0434\u0438\u0442\u0430.\n\n5) \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0443 \u043d\u0435\u0434\u0435\u0444\u043e\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.","30a84751":"## \u041a\u0440\u0438\u0432\u0430\u044f ROC AUC","2e09268c":"### \u041f\u043e\u0434\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","46ff4170":"### Confusion matrix","67370e14":"# *Binary*","d1dd5704":"### \u0421\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435\u0442","187c4ab0":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0434\u043e\u0445\u043e\u0434\u0430 \u043e\u0442 \u0443\u0440\u043e\u0432\u043d\u044f \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f","89354f7c":"### \u0421 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c\u0441\u044f \u043f\u043e\u0437\u0436\u0435.","01a138df":"# *Numerical*","842ce1a6":"# SUBMISSION","0a47fc89":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","8b47f083":"\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \"\u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0441\u0442\u044c\" \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a score_bki. \u0418\u0437 \u0432\u0441\u0435\u0445 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0445\u043e\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0432\u043d\u043e\u0441\u0438\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a mean_income_region.","29f564ba":"### \u041d\u0430\u0439\u0434\u0435\u043c \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","a21eb559":"### \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","9ca76293":"#### \u041a\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043d \u0443 [\u0434\u0430\u043d\u043d\u043e\u0433\u043e](http:\/\/www.kaggle.com\/sokolovaleks\/sf-dst-10-creditscoring-golobokov-sokolov) \u0430\u0432\u0442\u043e\u0440\u0430","df178713":"### \u041f\u0435\u0440\u0435\u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043c \u043d\u0430\u0448\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438","25800186":"# \u0421\u0442\u0440\u043e\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c","a2760335":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435. \u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0432\u044b\u0434\u0430\u044e\u0442 \u043a\u0440\u0435\u0434\u0438\u0442,\u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435.","b497ddce":"\u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u043f\u0443\u0441\u0442\u044c \u0438 \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0431\u0430\u043b\u043b \u043f\u043e \u0411\u041a\u0418.\n","dfd76de5":"## *Get_dummies*","e4b0eb46":"### \u041d\u0435\u0443\u0434\u043e\u0431\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e \u0441 \u043a\u0430\u0436\u0434\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d","4b2d0536":"### \u0422\u0435\u043f\u0435\u0440\u044c \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0448\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LabelEncoder \u0438 OneHotEncoder.","1b639283":"\u041b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435:","a7291d18":"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0430\u043c\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0435 \"SCH\".","e986be82":"### \u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435...\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430\u043c\u0438 \u043d\u0430\u0448\u0438\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.","271181fe":"# *EDA and feature engineering*","f75de7b2":"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 ROC AUC \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u043b\u043e\u0441\u044c :(","c581ff5e":"\u0423 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0435 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 [0,0], \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043d\u0438\u0447\u0435\u0433\u043e \u0441 \u044d\u0442\u0438\u043c \u0434\u0435\u043b\u0430\u0442\u044c.","aef5ae8c":"# \u041c\u043e\u0434\u0435\u043b\u044c \u0441 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438","1ee8344e":" \u0423 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438\u043d\u043e\u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 score_bki \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435.","ab06f0bf":"\u041d\u0430\u0447\u043d\u0435\u043c, \u043f\u043e\u0436\u0430\u043b\u0443\u0439, \u0441\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438.","7a494eca":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","f87961c1":"#### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c StandardScaler"}}