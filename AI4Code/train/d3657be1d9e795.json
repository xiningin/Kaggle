{"cell_type":{"5f59a881":"code","d2aac139":"code","790eaa62":"code","98c8d347":"code","cc1e6f66":"code","e96ad885":"code","3ce88d53":"code","0ef9cad8":"code","4f5aacf0":"code","0b4a2495":"code","72923a4a":"code","86cd0794":"code","10d327ee":"code","43ba7275":"code","b64be3a1":"code","8c128efb":"code","43c42f6a":"code","90ab0277":"code","a7b695c1":"code","8b63e56f":"code","3129b10f":"code","c8502a30":"code","59220aed":"code","1f684e01":"code","aa9be1b3":"code","d9b0d9a0":"code","3e024737":"code","45307627":"code","89cb7f2c":"code","a5ba91fd":"code","9f4fe7af":"code","9e4ed325":"code","f62da220":"code","917a5586":"code","f109b5c2":"code","5fd365a5":"code","420970b4":"code","62342cad":"code","0f644460":"code","ac8026da":"code","867695ba":"code","a904f9fe":"code","ed5d47d6":"code","f9d3cdcc":"code","7103a1da":"code","587370bd":"code","668d818a":"code","c0e9fce5":"code","cacb99a7":"code","81b839c9":"code","f0476f07":"code","0bfb0d16":"code","18fa5b98":"code","a18379fd":"code","3f4f980c":"code","feaf06a0":"code","078ee93d":"code","7a1d67c3":"code","0bc7d8fa":"code","ac46de56":"code","2f4091ba":"code","ff9c8ba9":"code","761a8d63":"code","f822cc66":"code","e0b37869":"code","8a111511":"code","9640c43a":"code","0361d352":"code","f1a37e6d":"code","08a6d309":"code","b8537e3d":"code","6fa0d013":"code","b0f1f657":"code","073af368":"code","dadaa0bf":"code","4aec70f8":"code","86ed9079":"code","03a199a6":"code","39049993":"code","a9288f4a":"code","fc151087":"code","53b56eca":"code","7f99a80f":"code","457fef90":"code","8ebe4b8e":"code","ced02737":"code","10c79f70":"code","a4782b51":"code","6d8a6611":"code","ed8ce82c":"code","5d95f00f":"code","7618cf23":"code","a862c7e6":"code","b7703a72":"code","3d38ae36":"code","93f34a3b":"code","f2ea6b29":"code","ae65cdf1":"code","5985079b":"code","aa8c1fa0":"code","f6009dd0":"code","4d0aa9ef":"code","014a10a3":"code","597cc0fe":"code","0d1c666f":"code","8d876984":"code","f881f3a7":"code","dd735f60":"code","752f4949":"code","636ac4b6":"code","0201ba49":"code","b04fe2f8":"code","3ea43450":"code","d1b5ddb9":"code","e70dff87":"code","79bfbfa6":"code","8ebee69d":"code","115a0113":"code","9ac264a4":"markdown","1337a889":"markdown","af40c7bb":"markdown","81ba5117":"markdown","49d2bbbf":"markdown","5eb44b4f":"markdown","3a801d76":"markdown","0f364325":"markdown","0c5d9d12":"markdown","5d8371a6":"markdown","2d85c9e2":"markdown","42bed070":"markdown","5930c377":"markdown","19ab2f41":"markdown","1a0ea816":"markdown","9cdbaf7b":"markdown","a40a78b9":"markdown","1b29b6fd":"markdown","6cae1e8b":"markdown","2cd63cf5":"markdown","369d5bc6":"markdown","4168107e":"markdown","7d121b68":"markdown","7c74d804":"markdown","009f8277":"markdown","1e3dabda":"markdown","10b203f6":"markdown","3d1a1472":"markdown","a581691a":"markdown","164a4a0f":"markdown","892780ad":"markdown","eb6df2c4":"markdown","8aff23f8":"markdown","65e835d7":"markdown","d077cca1":"markdown","a043df7c":"markdown","2c4750cf":"markdown","8a86da60":"markdown","d7fc3c8a":"markdown","ec1f37dd":"markdown","37a4f735":"markdown","00deedd8":"markdown","af35d915":"markdown","218f17cb":"markdown","3ad5e0f3":"markdown","6d787453":"markdown","b059641a":"markdown","9cd24fa8":"markdown","d0ca7942":"markdown","0bf06a9c":"markdown","f799ced6":"markdown","ac070040":"markdown","ac3ef41d":"markdown","150ab547":"markdown","657cf36d":"markdown","59c0328e":"markdown"},"source":{"5f59a881":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom textblob import TextBlob\n\nimport json,gc,os,re,time,folium\nfrom folium.plugins import MarkerCluster,FastMarkerCluster\n\nfrom pandas.io.json import json_normalize\nfrom glob import glob\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom flatten_json import flatten\nfrom dask import dataframe as dd\nfrom folium.plugins import HeatMap\nfrom wordcloud import WordCloud, STOPWORDS\nimport dask\nimport swifter\ngc.collect() \n\nprint(os.listdir(\"..\/input\/\"))","d2aac139":"\"\"\"\n    Prepara los datos para que puedan ser convertidos correctamente en un dataframe\n\"\"\"\ndef prepareBusinessData():\n    lista = []\n    \n    for line in open(\"..\/input\/yelp-dataset\/yelp_academic_dataset_business.json\"):\n\n        replace_line = line.replace(\"\\\"{\",\"{\").replace(\"}\\\"\",\"}\").replace(\" : \",\":\").replace(\": \",\":\").replace(\" :\",\":\").replace(\"u\\'\",\"\").replace(\"\\'\\\"\",\"\\\"\").replace(\"\\\"\\'\",\"\\\"\")\n    \n        #Replace name\n        n = replace_line.find('name')\n        m = replace_line.find('address') \n        if n<=m:\n            replacement = replace_line[n:m].replace(\"\\'\",\"\")\n            replace_line = replace_line[:n] + replacement + replace_line[m:]\n        \n        #Replace address\n        a = replace_line.find('address')\n        b = replace_line.find('city') \n        if a<=b:\n            replacement = replace_line[a:b].replace(\"\\'\",\"\")\n            replace_line = replace_line[:a] + replacement + replace_line[b:]\n        \n        #Replace city\n        a = replace_line.find('city')\n        b = replace_line.find('state') \n        if a<=b:\n            replacement = replace_line[a:b].replace(\"\\'\",\"\")\n            replace_line = replace_line[:a] + replacement + replace_line[b:]\n    \n        i = replace_line.find('categories')\n        j = replace_line.find('hours\\\":') \n    \n        if i<=j:\n            replacement = replace_line[i:j].replace(\"\\'\",\"\")\n            replace_line = replace_line[:i] + replacement + replace_line[j:]\n    \n\n        #Convert True and False in numeric values (0 and 1)\n        replace_line = replace_line.replace(\"\\\"False\\\"\",\"0\").replace(\"\\\"True\\\"\",\"1\").replace(\"False\",\"0\").replace(\"True\",\"1\")\\\n        .replace(\"\\'\",\"\\\"\") #Replaces single quotes in double quotes\n    \n        try:\n            lista.append(json.loads(replace_line))\n        except Exception as e :\n            print(line,replace_line,e,\"\\n\")\n    \n    return lista","790eaa62":"%%time\n#Read and prepare data\nbusinessList = prepareBusinessData()","98c8d347":"%%time\nbusiness_df = json_normalize(businessList)\nbusiness_df.set_index('business_id',inplace=True)","cc1e6f66":"business_df.head(3)","e96ad885":"business_df.shape","3ce88d53":"business_df.info()","0ef9cad8":"business_df.drop(inplace=True,columns=[\"attributes\",\"hours\",\"postal_code\"])","4f5aacf0":"business_df.describe()","0b4a2495":"categories = {}\n\nfor types in business_df.categories:\n    \n    if types != None:\n        \n        for category in types.split(\",\"):\n            category = category.strip() #Eliminamos los caracteres en blanco delante y detras del string\n\n            if category not in categories:\n                categories[category] = 1\n            else:\n                categories[category]+=1","72923a4a":"len(categories)","86cd0794":"top_categories = pd.DataFrame.from_dict(data=categories,orient=\"index\")\ntop_categories.reset_index(inplace=True)\ntop_categories.columns = ['category', 'count']","10d327ee":"def plotk_categories(categories,kvalues):\n    sort_categories = categories.sort_values(by='count', ascending=False)\n    k_best = sort_categories[0:kvalues]\n    sns.barplot(y=\"category\", x=\"count\", data=k_best)","43ba7275":"plotk_categories(top_categories,10)","b64be3a1":"restaurants = business_df[business_df.categories.apply(lambda x : False if x == None else \"Restaurants\" in x)]","8c128efb":"len(restaurants)","43c42f6a":"heatmap = folium.Map(location = [51.507351, -0.127758],zoom_start = 2,tiles=\"Mapbox Bright\") \n\ndata_heat = restaurants[['latitude','longitude']]\ndata_heat = data_heat.dropna(axis=0)\nheatmap.add_child(HeatMap([[row[\"latitude\"],row[\"longitude\"]] for name, row in data_heat.sample(frac=0.9).iterrows()],radius=10))\nheatmap","90ab0277":"subset_restaurants = restaurants.sample(frac=0.9)\n\nsome_map = folium.Map(location=[21, -40], \n                                zoom_start=2.8)\n\ncallback = ('function (row) {' \n                'var circle = L.circle(new L.LatLng(row[0], row[1]), {color: \"red\",  radius: 10000});'\n                'return circle};')\n\nsome_map.add_child(FastMarkerCluster(subset_restaurants[[\"latitude\", \"longitude\"]].values.tolist(), callback=callback))\nsome_map                 ","a7b695c1":"sizes = [len(restaurants.loc[restaurants.is_open == 0]), len(restaurants.loc[restaurants.is_open == 1])]\n\nplt.pie(sizes, labels=[\"closed\",\"opened\"], autopct='%1.1f%%', shadow=True,colors = ['lightgreen', 'lightblue'])\nplt.axis('equal')\nplt.show()","8b63e56f":"states_us = [\n    \"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"\n]","3129b10f":"business_us = restaurants.loc[restaurants.state.isin(states_us)]","c8502a30":"mean_stars_us = business_us.groupby(['state'],as_index=False)[[\"stars\"]].mean()","59220aed":"missing_states_us = pd.DataFrame(states_us,columns = [\"state\"])\nmissing_states_us[\"stars\"] = 0\nmissing_states_us = missing_states_us.loc[~missing_states_us.state.isin(list(mean_stars_us[\"state\"]))]","1f684e01":"mean_stars_us = mean_stars_us.append(missing_states_us,ignore_index=True)","aa9be1b3":"us_stars_map = folium.Map(location=[36, -95], zoom_start=4)\nus_stars_map.choropleth(geo_data=\"..\/input\/usstates\/us-states.json\", data=mean_stars_us,\n             columns=['state','stars'],\n             key_on='feature.id',\n             fill_color='YlGnBu', fill_opacity=0.7, line_opacity=0.2,\n             legend_name='Average stars')\nus_stars_map","d9b0d9a0":"states_us = [\n    \"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"\n]","3e024737":"business_us = restaurants.loc[restaurants.state.isin(states_us)]","45307627":"mean_review_us = business_us.groupby(['state'],as_index=False)[[\"review_count\"]].sum()","89cb7f2c":"missing_states_us = pd.DataFrame(states_us,columns = [\"state\"])\nmissing_states_us[\"review_count\"] = 0\nmissing_states_us = missing_states_us.loc[~missing_states_us.state.isin(list(mean_review_us[\"state\"]))]","a5ba91fd":"mean_review_us = mean_review_us.append(missing_states_us,ignore_index=True)","9f4fe7af":"us_review_map = folium.Map(location=[36, -95], zoom_start=4)\nus_review_map.choropleth(geo_data=\"..\/input\/usstates\/us-states.json\", data=mean_review_us,\n             columns=['state','review_count'],\n             key_on='feature.id',\n             fill_color='YlGnBu', fill_opacity=0.7, line_opacity=0.2,\n             legend_name='Number of reviews')\nus_review_map","9e4ed325":"provinces_canada = [\"ON\",\"QC\",\"NS\",\"NB\",\"MB\",\"BC\",\"PE\",\"SK\",\"AB\",\"NL\",\"NT\",\"YT\",\"NU\"]","f62da220":"sns.countplot(x='stars',data=restaurants)","917a5586":"sns.kdeplot(restaurants['review_count'])","f109b5c2":"restaurants.fillna(\"Unknown\",inplace=True)","5fd365a5":"sns.countplot(x='attributes.WiFi',data=restaurants)","420970b4":"sns.countplot(x='attributes.AgesAllowed',data=restaurants)","62342cad":"restaurants[\"attributes.AgesAllowed\"].value_counts()","0f644460":"sns.countplot(x='attributes.RestaurantsAttire',data=restaurants)","ac8026da":"restaurants.replace(\"none\",\"None\",inplace=True)","867695ba":"sns.countplot(x='attributes.Alcohol',data=restaurants)","a904f9fe":"sns.countplot(x='attributes.NoiseLevel',data=restaurants)","ed5d47d6":"sns.countplot(x='attributes.Smoking',data=restaurants)","f9d3cdcc":"from PIL import Image\nmask = np.array(Image.open(\"..\/input\/cloudmask\/cloud.png\"))","7103a1da":"wordcloud_restaurant = WordCloud(\n                background_color =None,\n                mode=\"RGBA\",\n                mask = mask,\n                stopwords = set(STOPWORDS), \n                min_font_size = 10,collocations=False).generate(\" \".join(restaurants.name).lower()) \n\nwordcloud_restaurant.to_file(\"businesscloud.png\")\n                       \nplt.figure() \nplt.imshow(wordcloud_restaurant) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show()","587370bd":"restaurants[\"review_count\"].describe()","668d818a":"sns.kdeplot(restaurants[\"review_count\"])","c0e9fce5":"tip = pd.read_json(\"..\/input\/yelp-dataset\/yelp_academic_dataset_tip.json\",lines=True)","cacb99a7":"tip.head(3)","81b839c9":"tip.shape","f0476f07":"tip.describe()","0bfb0d16":"len(list(restaurants.index))","18fa5b98":"restaurant_tips = tip.loc[tip.business_id.isin(list(restaurants.index))]","a18379fd":"restaurant_tips.shape","3f4f980c":"sns.kdeplot(restaurant_tips[\"compliment_count\"])","feaf06a0":"wordcloud_tip = WordCloud(\n                background_color =None,\n                stopwords = set(STOPWORDS), \n                mode='RGBA',\n                mask = mask,\n                min_font_size = 10,collocations=False).generate(str(restaurant_tips['text']))\n\nwordcloud_tip.to_file(\"wordtip.png\")\n\nplt.figure() \nplt.imshow(wordcloud_tip) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","078ee93d":"restaurant_tips.head()","7a1d67c3":"tip_series = restaurant_tips[\"date\"].value_counts()","0bc7d8fa":"tip_series.resample('D').sum().plot()","ac46de56":"from datetime import datetime","2f4091ba":"a = [json.loads(line) for line in open(\"..\/input\/yelp-dataset\/yelp_academic_dataset_checkin.json\")]\ndic_flattened = (flatten(d) for d in a)","ff9c8ba9":"checkin = pd.DataFrame(dic_flattened)","761a8d63":"checkin = checkin.loc[checkin.business_id.isin(list(restaurants.index))]","f822cc66":"checkin[\"date\"] = checkin.date.apply(lambda x: [term.strip() for term in x.split(\",\")])","e0b37869":"checkin[\"values\"] = checkin[\"date\"].apply(lambda x: len(x))","8a111511":"gc.collect()","9640c43a":"sum_check = pd.Series([])\nfor i in range(7):\n    sum_check[i] = 0","0361d352":"checkin.head()","f1a37e6d":"\"\"\"\nfor index,row in checkin.iterrows():\n    date = row[\"date\"]\n    \n    for dt in date:\n        month = datetime.strptime(dt,\"%Y-%m-%d %H:%M:%S\").weekday()\n        sum_check[month] = sum_check[month] +1\n\"\"\"","08a6d309":"sum_check.index = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]","b8537e3d":"sum_check.plot(\"bar\")","6fa0d013":"checkin.describe()","b0f1f657":" datetime.strptime(checkin.date[0][2],\"%Y-%m-%d %H:%M:%S\")","073af368":"checkin.shape","dadaa0bf":"gc.collect()","4aec70f8":"review_iterator = pd.read_json(\"..\/input\/yelp-dataset\/yelp_academic_dataset_review.json\",chunksize=500000,lines=True)\nreview =  pd.DataFrame([])\n\nfor i in review_iterator:\n    a = i.loc[i.business_id.isin(list(restaurants.index))]\n    review = review.append(a)","86ed9079":"review.set_index('review_id',inplace=True)","03a199a6":"review.sort_values([\"business_id\",\"user_id\",\"date\"],inplace=True)\nreview.drop_duplicates([\"business_id\",\"user_id\"],inplace=True,keep=\"last\")","39049993":"review.head()","a9288f4a":"review.shape","fc151087":"review.describe()","53b56eca":"sns.kdeplot(review[\"cool\"])","7f99a80f":"sns.kdeplot(review[\"funny\"])","457fef90":"sns.kdeplot(review[\"useful\"])","8ebe4b8e":"sns.countplot(x='stars',data=review)","ced02737":"wordcloud_review = WordCloud(width = 700, height = 700, \n                background_color =None,\n                mode=\"RGBA\",\n                stopwords = set(STOPWORDS), \n                mask = mask,\n                min_font_size = 10,collocations=False).generate(str(review['text'])) \n\nwordcloud_review.to_file(\"review_text.png\")\nplt.figure() \nplt.imshow(wordcloud_review) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show()","10c79f70":"review_series = review[\"date\"].value_counts()","a4782b51":"review_series.resample('D').sum().plot()","6d8a6611":"gc.collect()\nuser_iterator = pd.read_json(\"..\/input\/yelp-dataset\/yelp_academic_dataset_user.json\",chunksize=100000,lines=True)","ed8ce82c":"user = pd.DataFrame()\n\nfor user_chunk in user_iterator:\n    user_chunk  = user_chunk.loc[user_chunk.user_id.isin(list(review.user_id)) | user_chunk.user_id.isin(list(restaurant_tips.user_id))]\n    user = user.append(user_chunk)\n\nuser.set_index('user_id',inplace=True)","5d95f00f":"user.shape","7618cf23":"sns.kdeplot(user[\"compliment_cool\"])","a862c7e6":"sns.kdeplot(user[\"compliment_hot\"])","b7703a72":"sns.kdeplot(user[\"compliment_more\"])","3d38ae36":"sns.kdeplot(user[\"compliment_funny\"])","93f34a3b":"sns.kdeplot(user[\"review_count\"])","f2ea6b29":"sns.kdeplot(user[\"average_stars\"])","ae65cdf1":"user['yelping_since'] = pd.to_datetime(user['yelping_since'])","5985079b":"user_series = user[\"yelping_since\"].value_counts()","aa8c1fa0":"user_series.resample('D').sum().plot()","f6009dd0":"user.head()","4d0aa9ef":"ac = user[[\"average_stars\",\"elite\"]]\nac = ac.loc[ac[\"elite\"] != \"\"]","014a10a3":"from collections import defaultdict","597cc0fe":"year = defaultdict(int)\nfor i,j in ac.iterrows():\n    for txt in j[\"elite\"].split(\",\"):\n        year[int(txt)]+=1","0d1c666f":"year = pd.DataFrame([year.keys(),year.values()]).T\nyear.columns = [\"year\",\"elite\"]","8d876984":"sns.barplot(x=\"year\", y=\"elite\",data=year)","f881f3a7":"user[\"is_elite\"] = user[\"elite\"]!=\"\"","dd735f60":"elites = user[\"is_elite\"].value_counts()","752f4949":"# Pie chart\nlabels = ['elite', 'no elite']\nsizes = [elites[1],elites[0]]\n\n# only \"explode\" the 2nd slice (i.e. 'Hogs')\nexplode = (0, 0.1)  \ncol = ['#ff9999','#66b3ff']\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90, colors = col)\n\n# Equal aspect ratio ensures that pie is drawn as a circle\nax1.axis('equal')  \n\nplt.tight_layout()\nplt.show()","636ac4b6":"ac[\"times\"] = 0","0201ba49":"for i,j in ac.iterrows():\n    ac.loc[i,\"times\"] = len(j[\"elite\"].split(\",\"))","b04fe2f8":"ac.head()","3ea43450":"sns.countplot(x=\"times\",data=ac)","d1b5ddb9":"cmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\nax = sns.scatterplot(y=\"times\", x=\"average_stars\",\n                     palette=cmap, sizes=(10, 200),\n                     data=ac)","e70dff87":"review[\"text\"] = review[\"text\"].str.lower()","79bfbfa6":"review.drop([\"cool\",\"date\",\"funny\",\"useful\"],axis=1,inplace=True)","8ebee69d":"gc.collect()","115a0113":"%%time\nreview.to_csv('review.csv',index=False)","9ac264a4":"<a name=\"business_categories\"><\/a>\n### Distribuci\u00f3n de las categor\u00edas de los establecimientos","1337a889":"En general, la ampl\u00eda mayor\u00eda de los establecimientos a analizar est\u00e1n todav\u00eda en funcionamiento **(71.1%)**.\n\n\n<a name=\"business_us_stars\"><\/a>\n### Visualizaci\u00f3n de las puntuaciones medias de los usuarios por territorio de Estados Unidos\n\n\nPrimero obtendremos todas las abreviaturas pertenencientes a los 50 estados de  EE.UU.","af40c7bb":"Finalmente, guardaremos el dataframe como archivo csv.","81ba5117":"<a name=\"users\"><\/a>\n## 5. Users","49d2bbbf":"En primer lugar, seleccionaremos las instancias relacionadas \u00fanicamente con restaurantes.","5eb44b4f":"En total vamos a analizar **59371** restaurantes.","3a801d76":"En  primer lugar vamos a seleccionar aquellas instancias que solo refieren a restaurantes","0f364325":"<a name=\"business_location\"><\/a>\n### Localizaci\u00f3n de los restaurantes\n\nPara representar la distribuci\u00f3n de los restaurantes usaremos un mapa de calor, de tal forma que obtengamos una aproximaci\u00f3n visual. Otro aspecto del mapa de calor es que no es capaz de mostrar todos los datos, por lo que solo procesar\u00e1 aproximadamente un **95%** de los datos. \n\nPara procesar los datos utilizaremos la **longitud** y **latitud** de cada resturante.","0c5d9d12":"En primer lugar, vamos ha obtener cu\u00e1les son las dimensiones del dataframe.","5d8371a6":"En este caso, asignaremos una puntuaci\u00f3n de 0 a los territorios cuya informaci\u00f3n es inexistente.","2d85c9e2":"<a name=\"user_review\"><\/a>\n### Distribuci\u00f3n del n\u00famero de las revisiones elaboradas por los usuarios","42bed070":"En este caso, no existe una amplia diferencia entre las diferentes alternativas que tienen los restaurantes para los fumadores: **prohibido fumar**, **permitir fumar** o **fumar fuera**.\n\n<a name=\"business_name\"><\/a>\n### Frecuencia de palabras en el nombre de los establecimientos","5930c377":"Las palabras m\u00e1s frecuentes en las revisiones son **food**, **place**, **best**, **delicious**, **service**, lo cual indica opiniones generalmente positivas.\n\n<a name=\"review_date\"><\/a>\n### An\u00e1lisis de la fecha de realizaci\u00f3n de las revisiones","19ab2f41":"Como en los casos anteriores, \u00fanicamente analizaremos las revisiones relacionadas con restaurantes. Adem\u00e1s, hemos observado que algunos usuarios han realizado varias revisiones a un mismo restaurante, por lo que vamos a mantener \u00fanicamente la revisi\u00f3n m\u00e1s reciente.","1a0ea816":"<a name=\"user_more\"><\/a>\n### Distribuci\u00f3n de las valoraciones more","9cdbaf7b":"En general el n\u00famero de likes para los tips es muy bajo, concentr\u00e1ndose principalmente en un like.\n\n<a name=\"tip_text\"><\/a>\n### An\u00e1lisis de frecuencia de las palabras de los comentarios","a40a78b9":"Como podemos ver, el n\u00famero de opiniones de cada restaurante se encuentra en el intervalo 0-1000.\n\n\n<a name=\"business_wifi\"><\/a>\n### Distribuci\u00f3n de restaurantes con wifi\n\nEl primer paso a ejecutar ser\u00eda el tratamiento de los valores perdidos, para ello sustituiremos los valores NaN por el valor Desconcido.","1b29b6fd":"Como podemos ver, los tips comienzan realizarse el a\u00f1o 2009, alcanzando su pico m\u00e1ximo en 2012 y 2014. Despues de este \u00faltimo a\u00f1o, el n\u00famero de tips  se mantiene estable en el rango de 400 y 100.\n\n<a name=\"checkin\"><\/a>\n## 3. Checkin","6cae1e8b":"Como podemos ver, casi el **100%** de los restaurantes no ofrecen informaci\u00f3n sobre las edades permitidas. Por otro lado, hay ciertos establecimientos que imponen restricciones a los personas menores de **18**, **19**,  y **21** a\u00f1os.\n\n<a name=\"business_attire\"><\/a>\n### Tipos de vestuario permitido","2cd63cf5":"En este caso, los territorios en color amarillo se corresponden con aquellos en los que no tenemos datos. Por lo tanto, entre aquellos con mayor puntuaci\u00f3n podr\u00edamos destacar los estados de **Florida**, **California**, **Oreg\u00f3n**. Tambi\u00e9n podemos destacar que las puntuaciones no son especialmente elevadas, no llegando a alcanzar la calificaci\u00f3n de 4 puntos.\n\n\n<a name=\"business_us_reviews\"><\/a>\n### Visualizaci\u00f3n del n\u00famero de revisiones por territorio de Estados Unidos","369d5bc6":"Por consiguiente, podr\u00edamos afirmar que los restaurantes est\u00e1n practicamente distribuidos en **Estados Unidos** y **Canad\u00e1**.\n\n<a name=\"business_open\"><\/a>\n### Proporci\u00f3n de restaurantes abiertos\/cerrados","4168107e":"<a name=\"business\"><\/a>\n## 1. Bussiness\n\nEste conjunto de datos contiene informaci\u00f3n sobre los establecimientos que vamos a analizar. Sin embargo, antes de cargar el dataframe deberemos hacer algunos cambios para que los datos json se lean correctamente.","7d121b68":"Seg\u00fan estos datos, existe una proporci\u00f3n parecida entre los restaurantes con wifi gratuito y los que no tienen. Sin embargo, el n\u00famero de redes wifi de pago es muy peque\u00f1o respecto al resto de alternativas.\n\n<a name=\"business_ages\"><\/a>\n### Distribuci\u00f3n de las edades permitidas en los restaurantes","7c74d804":"Existen **1300 categor\u00edas diferentes** en nuestro dataset, sin embargo debemos tener en cuenta que cada establecimiento est\u00e1 etiquetado con diferentes categor\u00edas. De esta forma, observamos que su n\u00famero es elevado por lo que solo mostraremos las K categor\u00edas m\u00e1s relevantes.","009f8277":"<a name=\"preliminares\"><\/a>\n## 0. Preliminares\n\nInsertamos todas las librer\u00edas necesarias para la ejecuci\u00f3n del an\u00e1lisis exploratorio.","1e3dabda":"<a name=\"business_canada_reviews\"><\/a>\n### Visualizaci\u00f3n del n\u00famero de revisiones por territorio de Canad\u00e1 (Por implementar)","10b203f6":"Dada esta gr\u00e1fica, podriamos concluir que las categor\u00edas mas frecuentes son los **Restaurantes**, **Tiendas** y **Alimentaci\u00f3n**.  Con estos datos estamos en disposici\u00f3n de centrarnos en nuestro objetivo, que son los restaurantes con una amplia mayor\u00eda en este dataset. De esta forma, a partir de este momento solo analizaremos los Restaurantes, por lo que crearemos un dataframe contenido unicamente esta categoria.","3d1a1472":"<a name=\"user_year\"><\/a>\n### N\u00famero de usuarios registrados por a\u00f1o","a581691a":"<a name=\"review_stars\"><\/a>\n### Distribuci\u00f3n de las estrellas otorgadas a las revisiones","164a4a0f":"<a name=\"user_stars\"><\/a>\n### Distribuci\u00f3n del n\u00famero de estrellas otorgadas a cada usuario","892780ad":"En este caso, como cab\u00eda esperar, el n\u00famero de checkins se mantiene estable **Lunes**, **Martes** y **Mi\u00e9rcoles**, mientras que a partir del **Jueves** existe un aumento que alcanza su m\u00e1ximo los **S\u00e1bados**.\n\n<a name=\"review\"><\/a>\n## 4. Review","eb6df2c4":"En este caso podr\u00edamos destacar que los comentarios son principalmente positivos, destacando palabras como **good**, **great**, **service**.\n\n\n<a name=\"tip_date\"><\/a>\n### N\u00famero de tips a lo largo del tiempo","8aff23f8":"De forma general, los votos parecen repesentar una distribuci\u00f3n en forma de campana. Como consecuencia, la mayor cantidad de votos corresponden a calificaciones entre **3.5** y **4** estrellas.\n\n\n<a name=\"business_reviews\"><\/a>\n### Distribuci\u00f3n del n\u00famero de revisiones","65e835d7":"# Subjective machine learning models for restaurants quality evaluation based on user opinions\n\n## Bernardo Mart\u00ednez Parras - Year 2018\/2019\n\n### Undergraduate Dissertation\n\nPlease upvote if you like it or leave your comments\n\n## Tabla de contenido\n\n0. [Preliminares](#preliminares)\n1. [An\u00e1lisis exploratorio](#business)\n    1. [Business](#business)\n        * [Distribuci\u00f3n de las categor\u00edas de los establecimientos](#business_categories)\n        * [Localizaci\u00f3n de los restaurantes](#business_location)\n        * [N\u00famero de restaurantes por localizaci\u00f3n mediante clustering](#business_cluster)\n        * [Proporci\u00f3n de restaurantes abiertos\/cerrados](#business_open)\n        * [Visualizaci\u00f3n de las puntuaciones medias de los usuarios por territorio de Estados Unidos](#business_us_stars)\n        * [Visualizaci\u00f3n del n\u00famero de revisiones por territorio de Estados Unidos](#business_us_reviews)\n        * [Visualizaci\u00f3n de las puntuaciones medias de los usuarios por territorio de Canad\u00e1 (Por implementar)](#business_canada_stars)\n        * [Visualizaci\u00f3n del n\u00famero de revisiones por territorio de Canad\u00e1 (Por implementar)](#business_canada_reviews)\n        * [Distribuci\u00f3n de la estrellas](#business_stars)\n        * [Distribucion del numero de revisiones](#business_reviews)\n        * [Distribuci\u00f3n de restaurantes con wifi](#business_wifi)\n        * [Distribuci\u00f3n de las edades permitidas en los restaurantes](#business_ages)\n        * [Tipos de vestuario permitido](#business_attire)\n        * [Diferentes tipos de bebidas disponibles](#business_alcohol)\n        * [Nivel de ruido](#business_noise)\n        * [Restaurante con servicio para fumadores](#business_smoking)\n        * [Frecuencia de palabras en el nombre de los establecimientos](#business_name)\n    2. [Tip](#tip)\n       * [Distribuci\u00f3n del n\u00famero de likes](#tip_likes)\n       * [An\u00e1lisis de frecuencia de las palabras de los comentarios](#tip_text)\n       * [N\u00famero de tips a lo largo del tiempo](#tip_date)\n    3. [Checkin](#checkin)\n        * [Distribuci\u00f3n del n\u00famero de checkin por d\u00eda](#checkin_hour)\n    4. [Review](#review)\n        * [Distribuci\u00f3n del n\u00famero de votos cool](#review_cool)\n        * [Distribuci\u00f3n del n\u00famero de votos funny](#review_funny)\n        * [Distribuci\u00f3n del n\u00famero de votos useful](#review_useful)\n        * [Distribuci\u00f3n de las estrellas otorgadas a las revisiones](#review_stars)\n        * [An\u00e1lisis de la frecuencia de las palabras en las revisiones](#review_text)\n        * [An\u00e1lisis de la fecha de realizaci\u00f3n de las revisiones](#review_date)\n    5. [Users](#users)\n        * [Distribuci\u00f3n de las valoraciones cool](#user_cool)\n        * [Distribuci\u00f3n de las valoraciones hot](#user_hot)\n        * [Distribuci\u00f3n de las valoraciones more](#user_more)\n        * [Distribuci\u00f3n de las valoraciones funny](#user_funny)\n        * [Distribuci\u00f3n del n\u00famero de las revisiones elaboradas por los usuarios](#user_review)\n        * [Distribuci\u00f3n del n\u00famero de estrellas otorgadas a cada usuario](#user_stars)\n        * [N\u00famero de usuarios registrados por a\u00f1o](#user_year)\n        * [N\u00famero de revisiones por cada usuario](#user_reviews)\n2. [Preprocesamiento de textos con SpaCy](https:\/\/www.kaggle.com\/bernardomartinez\/procesamiento-de-textos-con-spacy)\n3. [Inferencia con Na\u00efve Bayes y Esperanza-Maximizaci\u00f3n](https:\/\/www.kaggle.com\/bernardomartinez\/tfgyelpbayes)","d077cca1":"Nuestro siguiente paso ser\u00e1 obtener una an\u00e1lisis estad\u00edstico b\u00e1sico de nuestro conjunto de datos.  De estos resultados podemos destacar que las columnas **attributes** y **hours** no contienen datos, por lo que podr\u00edamos eliminar estas columnas. Tambi\u00e9n podemos eliminar informaci\u00f3n redundante como **postal_code**  debido a que no es de mucha utilidad.","a043df7c":"Como indica la gr\u00e1fica, las opiniones de los usuarios tienden a tener valoraciones muy altas por parte de otros usuarios, situ\u00e1ndose entre las **4** y **5** estrellas.\n\n<a name=\"review_text\"><\/a>\n### An\u00e1lisis de la frecuencia de las palabras en las revisiones","2c4750cf":"## Reviews dataset","8a86da60":"<a name=\"business_canada_stars\"><\/a>\n### Visualizaci\u00f3n de las puntuaciones medias de los usuarios por territorio de Canad\u00e1 (Por implementar)","d7fc3c8a":"<a name=\"user_hot\"><\/a>\n### Distribuci\u00f3n de las valoraciones hot","ec1f37dd":"<a name=\"tip\"><\/a>\n## 2. Tip","37a4f735":"<a name=\"user_cool\"><\/a>\n### Distribuci\u00f3n de las valoraciones cool","00deedd8":"Respecto al tipo de ropa exigido, la mayor\u00eda de los restaurantes determina un **estilo casual**, mientras que existe una minor\u00eda exige una vestimenta **elegante** o **formal**.\n\n<a name=\"business_alcohol\"><\/a>\n### Diferentes tipos de bebidas disponibles","af35d915":"<a name=\"checkin_hour\"><\/a>\n### Distribuci\u00f3n del n\u00famero de checkin por d\u00eda\n","218f17cb":"<a name=\"business_stars\"><\/a>\n### Distribuci\u00f3n de la estrellas","3ad5e0f3":"<a name=\"review_useful\"><\/a>\n### Distribuci\u00f3n del n\u00famero de votos useful","6d787453":"<a name=\"user_funny\"><\/a>\n### Distribuci\u00f3n de las valoraciones funny","b059641a":"Observando estos datos podr\u00edamos deducir que hace referencia al tipo de bebidas que se incluye en el men\u00fa del restaurantes. En este caso, casi un tercio de los establecimientos  **no incluir\u00eda ning\u00fan tipo de bebida**. En un porcentaje menor, los restaurantes tendr\u00edan la opci\u00f3n de **barra libre**, mientras que menos de 7500 restaurantes solo incluir\u00eda **vino y cerveza**. \n\n<a name=\"business_noise\"><\/a>\n### Nivel de ruido","9cd24fa8":"<a name=\"review_funny\"><\/a>\n### Distribuci\u00f3n del n\u00famero de votos funny","d0ca7942":"De todos los restaurantes de nuestro dataframe solo seleccionaremos los ubicados en EE.UU.","0bf06a9c":"La mayor parte de los restaurantes destacan por tener niveles de ruido **bajos** o **normales**, mientras que existe un peque\u00f1o porcentaje con niveles **altos** o **muy altos**.\n\n<a name=\"business_smoking\"><\/a>\n### Restaurantes para fumadores","f799ced6":"<a name=\"review_cool\"><\/a>\n### Distribuci\u00f3n del n\u00famero de votos cool","ac070040":"<a name=\"tip_likes\"><\/a>\n### Distribuci\u00f3n del n\u00famero de likes","ac3ef41d":"De entre las palabras mas frecuentes en los nombres de los restaurantes destacar\u00edamos **Restaurant**, **Pizza**, **Subway**, **BBQ**, **Mexican** ...\n\n<a name=\"business_reviews\"><\/a>\n### N\u00famero de revisiones por restaurante","150ab547":"A continuaci\u00f3n podemos observar los tipos de datos asociados a nuestros atributos: **float64**, **int64** y **object**.","657cf36d":"En consecuencia, podemos destacar que la mayor parte de los restaurantes se encuentran principalmente en **Estados Unidos**, aunque tambi\u00e9n existe una alta presencia en **Canad\u00e1** y **Europa**.\n\n<a name=\"business_cluster\"><\/a>\n### N\u00famero de restaurantes por localizaci\u00f3n mediante clustering\n\nEn el apartado anterior vimos en un mapa de calor cu\u00e1l era la distribuci\u00f3n geogr\u00e1fica de los restaurantes. Sin embargo, esta t\u00e9cnica no ofrece informaci\u00f3n precisa por lo que usaremos t\u00e9cnicas de clustering para cuantificar los restaurantes por regiones.","59c0328e":"En este caso podemos concluir que hay una gran diferencia en el n\u00famero de opiniones, concentr\u00e1ndose principalemente en los estados de **Nevada** y **Arizona**."}}