{"cell_type":{"ea82e246":"code","c67f69b4":"code","e32149c7":"code","ce66e43b":"code","8904efa9":"code","a6d83cef":"code","73007c79":"code","d55f1f8a":"code","1fc56b2e":"code","9ba20f7d":"code","e4e5eac1":"code","92bf04e9":"code","c96bd3a9":"code","a2ecba80":"code","e80104dd":"code","1756a57f":"code","a591b730":"code","c32aefc3":"code","d1ceb86a":"code","6f503801":"markdown","b81acb67":"markdown","68bf8beb":"markdown"},"source":{"ea82e246":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c67f69b4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium","e32149c7":"df = pd.read_csv('\/kaggle\/input\/us-airbnb-open-data\/AB_US_2020.csv',low_memory=False)","ce66e43b":"df.shape","8904efa9":"df.columns","a6d83cef":"df['host_name'].fillna('others',inplace=True)","73007c79":"df['name'].fillna('HOMES',inplace=True)\ndf.drop('neighbourhood_group',axis=1,inplace=True)\ndf['last_review'] = pd.to_datetime(df['last_review'],infer_datetime_format=True)\ndf[\"last_review\"] = df[\"last_review\"].replace(np.nan, df[\"last_review\"].mode().iloc[0])\ndf['reviews_per_month'] = df['reviews_per_month'].fillna(df['reviews_per_month'].median())\ndf=df.drop_duplicates()","d55f1f8a":"df.shape","1fc56b2e":"df_NY = df[df['city']=='New York City']","9ba20f7d":"points = (df.latitude.fillna(0),df.longitude.fillna(0))\ncoordinates =[]\n\n# Setting lat and long \nlat = points[0]\nlong = points[1]\n\n# Latitude and longitude that will open map. Here I put New york\nmapa = folium.Map(location=[43.000000, -75.000000])\n\n# Append latitude and longitude coordinates array\nfor la,lo in zip(lat,long):\n    coordinates.append([la,lo])\n    \n","e4e5eac1":"from folium import plugins\nmapa.add_child(plugins.HeatMap(coordinates))","92bf04e9":"##Create function for basemap\ndef generateBaseMap(default_location=[40.693943, -73.985880], default_zoom_start=12):\n    base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start)\n    return base_map","c96bd3a9":"##heatmap based on no of reviews\nfrom folium.plugins import HeatMap\nbase_map = generateBaseMap()\nHeatMap(data=df_NY[['latitude', 'longitude', 'number_of_reviews']].groupby(['latitude', 'longitude']).sum().reset_index().values.tolist(), radius=8, max_zoom=13).add_to(base_map)","a2ecba80":"base_map","e80104dd":"### heatMap for no of hosts listed per location\nbase_map1 = generateBaseMap()\nHeatMap(data=df_NY[['latitude', 'longitude', 'calculated_host_listings_count']].groupby(['latitude', 'longitude']).sum().reset_index().values.tolist(), radius=8, max_zoom=13).add_to(base_map1)\nbase_map1","1756a57f":"## neighbourhood cluster value counts\nbase_map2 = generateBaseMap()\nlocations = list(zip(df_NY.latitude, df_NY.longitude))\ncluster = plugins.MarkerCluster(locations=locations,popups=df_NY[\"neighbourhood\"].tolist()).add_to(base_map2)\nbase_map2","a591b730":"airbnb=df_NY[[\"latitude\",\"longitude\",\"price\"]]\nmin_price=df_NY[\"price\"].min()\nmax_price=df_NY[\"price\"].max()\nmin_price,max_price","c32aefc3":"df_NY.price.describe().to_frame()","d1ceb86a":"base_map3 = generateBaseMap()\nimport branca.colormap as cm\ncolormap = cm.StepColormap(colors=['green','yellow','orange','red'] ,index=[min_price,65,100,160,max_price],vmin= min_price,vmax=max_price)\n\nfor loc, p in zip(zip(airbnb[\"latitude\"],airbnb[\"longitude\"]),airbnb[\"price\"]):\n    folium.Circle(\n        location=loc,\n        radius=2,\n        fill=True,\n        color=colormap(p)\n    ).add_to(base_map3)\n\nbase_map3","6f503801":"### Analysis of NYC data","b81acb67":"#### Showing the Country of Analysis USA","68bf8beb":"We pick up **NYC** for our analysis "}}