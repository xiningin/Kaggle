{"cell_type":{"a3b97e7d":"code","ba03d0f9":"code","553b4ddb":"code","fe20339a":"code","c0a222a5":"code","b2afa613":"code","1a43e0bd":"code","271a3192":"code","6b9b6f1c":"code","34c3f46c":"code","ebc38815":"code","b88fc12c":"code","80a02b08":"code","9d296beb":"code","6cfbca02":"code","bd7832b4":"code","a4f5cf41":"code","d7b1b6f3":"code","39e9a0e8":"markdown","d899863e":"markdown","735eb118":"markdown","b4b94442":"markdown","5463333a":"markdown","2543544c":"markdown","0f2b9c18":"markdown","8b855c9b":"markdown","ef89d1d8":"markdown","1196dc30":"markdown","32bb70fd":"markdown","083c11ce":"markdown","3ce75332":"markdown","6e2ec4dd":"markdown","e6a26c8e":"markdown","281a3c09":"markdown"},"source":{"a3b97e7d":"\"\"\"UserSecret client classes.\nThis library adds support for communicating with the UserSecrets service,\ncurrently used for retrieving an access token for supported integrations\n(ie. BigQuery).\n\"\"\"\n \nimport json\nimport os\nimport socket\nimport urllib.request\nfrom datetime import datetime, timedelta\nfrom enum import Enum, unique\nfrom typing import Optional, Tuple\nfrom urllib.error import HTTPError, URLError\n \n_KAGGLE_DEFAULT_URL_BASE = \"https:\/\/www.kaggle.com\"\n_KAGGLE_URL_BASE_ENV_VAR_NAME = \"KAGGLE_URL_BASE\"\n_KAGGLE_USER_SECRETS_TOKEN_ENV_VAR_NAME = \"KAGGLE_USER_SECRETS_TOKEN\"\nTIMEOUT_SECS = 40\n \n \nclass CredentialError(Exception):\n    pass\n \n \nclass BackendError(Exception):\n    pass\n \n \nclass ValidationError(Exception):\n    pass\n \n@unique\nclass GcpTarget(Enum):\n    \"\"\"Enum class to store GCP targets.\"\"\"\n    BIGQUERY = (1, \"BigQuery\")\n    GCS = (2, \"Google Cloud Storage\")\n    AUTOML = (3, \"Cloud AutoML\")\n \n    def __init__(self, target, service):\n        self._target = target\n        self._service = service\n \n    @property\n    def target(self):\n        return self._target\n \n    @property\n    def service(self):\n        return self._service\n \n \nclass UserSecretsClient():\n    GET_USER_SECRET_ENDPOINT = '\/requests\/GetUserSecretRequest'\n    GET_USER_SECRET_BY_LABEL_ENDPOINT = '\/requests\/GetUserSecretByLabelRequest'\n    BIGQUERY_TARGET_VALUE = 1\n \n    def __init__(self):\n        url_base_override = os.getenv(_KAGGLE_URL_BASE_ENV_VAR_NAME)\n        self.url_base = url_base_override or _KAGGLE_DEFAULT_URL_BASE\n        # Follow the OAuth 2.0 Authorization standard (https:\/\/tools.ietf.org\/html\/rfc6750)\n        self.jwt_token = os.getenv(_KAGGLE_USER_SECRETS_TOKEN_ENV_VAR_NAME)\n        if self.jwt_token is None:\n            raise CredentialError(\n                'A JWT Token is required to use the UserSecretsClient, '\n                f'but none found in environment variable {_KAGGLE_USER_SECRETS_TOKEN_ENV_VAR_NAME}')\n        self.headers = {'Content-type': 'application\/json'}\n \n    def _make_post_request(self, data: dict, endpoint: str = GET_USER_SECRET_ENDPOINT) -> dict:\n        # TODO(b\/148309982) This code and the code in the constructor should be\n        # removed and this class should use the new KaggleWebClient class instead.\n        url = f'{self.url_base}{endpoint}'\n        request_body = dict(data)\n        request_body['JWE'] = self.jwt_token\n        req = urllib.request.Request(url, headers=self.headers, data=bytes(\n            json.dumps(request_body), encoding=\"utf-8\"))\n        try:\n            with urllib.request.urlopen(req, timeout=TIMEOUT_SECS) as response:\n                response_json = json.loads(response.read())\n                if not response_json.get('wasSuccessful') or 'result' not in response_json:\n                    raise BackendError(\n                        f'Unexpected response from the service. Response: {response_json}.')\n                return response_json['result']\n        except (URLError, socket.timeout) as e:\n            if isinstance(\n                    e, socket.timeout) or isinstance(\n                    e.reason, socket.timeout):\n                raise ConnectionError(\n                    'Timeout error trying to communicate with service. Please ensure internet is on.') from e\n            raise ConnectionError(\n                'Connection error trying to communicate with service.') from e\n        except HTTPError as e:\n            if e.code == 401 or e.code == 403:\n                raise CredentialError(\n                    f'Service responded with error code {e.code}.'\n                    ' Please ensure you have access to the resource.') from e\n            raise BackendError('Unexpected response from the service.') from e\n \n    def get_secret(self, label) -> str:\n        \"\"\"Retrieves a user secret value by its label.\n \n        This returns the value of the secret with the given label,\n        if it attached to the current kernel.\n        Example usage:\n            client = UserSecretsClient()\n            secret = client.get_secret('my_db_password')\n        \"\"\"\n        if label is None or len(label) == 0:\n            raise ValidationError(\"Label must be non-empty.\")\n        request_body = {\n            'Label': label,\n        }\n        response_json = self._make_post_request(request_body, self.GET_USER_SECRET_BY_LABEL_ENDPOINT)\n        if 'secret' not in response_json:\n            raise BackendError(\n                f'Unexpected response from the service. Response: {response_json}')\n        return response_json['secret']\n \n    def get_bigquery_access_token(self) -> Tuple[str, Optional[datetime]]:\n        \"\"\"Retrieves BigQuery access token information from the UserSecrets service.\n \n        This returns the token for the current kernel as well as its expiry (abs time) if it\n        is present.\n        Example usage:\n            client = UserSecretsClient()\n            token, expiry = client.get_bigquery_access_token()\n        \"\"\"\n        return self._get_access_token(GcpTarget.BIGQUERY)\n \n    def _get_gcs_access_token(self) -> Tuple[str, Optional[datetime]]:\n        return self._get_access_token(GcpTarget.GCS)\n \n    def _get_automl_access_token(self) -> Tuple[str, Optional[datetime]]:\n        return self._get_access_token(GcpTarget.AUTOML)\n \n    def _get_access_token(self, target: GcpTarget) -> Tuple[str, Optional[datetime]]:\n        request_body = {\n            'Target': target.target\n        }\n        response_json = self._make_post_request(request_body)\n        if 'secret' not in response_json:\n            raise BackendError(\n                f'Unexpected response from the service. Response: {response_json}')\n        # Optionally return expiry if it is set.\n        expiresInSeconds = response_json.get('expiresInSeconds')\n        expiry = datetime.utcnow() + timedelta(seconds=expiresInSeconds) if expiresInSeconds else None\n        return response_json['secret'], expiry\n ","ba03d0f9":"\n{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application\/vnd.docker.distribution.manifest.v2+json\",\n   \"config\": {\n      \"mediaType\": \"application\/vnd.docker.container.image.v1+json\",\n      \"size\": 31231,\n      \"digest\": \"sha256:79f52292b1d0c079b84bc79d002947be409a09b15a1320355a4de834f57b2ee8\"\n   },\n   \"layers\": [\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 45339314,\n         \"digest\": \"sha256:c5e155d5a1d130a7f8a3e24cee0d9e1349bff13f90ec6a941478e558fde53c14\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 95104141,\n         \"digest\": \"sha256:86534c0d13b7196a49d52a65548f524b744d48ccaf89454659637bee4811d312\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1571501372,\n         \"digest\": \"sha256:5764e90b1fae3f6050c1b56958da5e94c0d0c2a5211955f579958fcbe6a679fd\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1083072,\n         \"digest\": \"sha256:ba67f7304613606a1d577e2fc5b1e6bb14b764bcc8d07021779173bcc6a8d4b6\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 526,\n         \"digest\": \"sha256:19abed793cf0a9952e1a08188dbe2627ed25836757d0e0e3150d5c8328562b4e\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 458,\n         \"digest\": \"sha256:df204f1f292ae58e4c4141a950fad3aa190d87ed9cc3d364ca6aa1e7e0b73e45\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 13119161,\n         \"digest\": \"sha256:1f7809135d9076fb9ed8ee186e93e3352c861489e0e80804f79b2b5634b456dd\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 555884253,\n         \"digest\": \"sha256:03a365d6218dbe33f5b17d305f5e25e412f7b83b38394c5818bde053a542f11b\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 102870915,\n         \"digest\": \"sha256:00e3d0b7af78551716541d2076836df5594948d5d98f04f382158ef26eb7c907\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 95925388,\n         \"digest\": \"sha256:59782fefadba835c1e83cecdd73dc8e81121eae05ba58d3628a44a1c607feb6e\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 142481172,\n         \"digest\": \"sha256:f81b01cf2c3f02e153a71704cc5ffe6102757fb7c2fcafc107a64581b0f6dc10\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1128076783,\n         \"digest\": \"sha256:f08bbb5c2bce948f0d12eea15c88aad45cdd5b804b71bee5a2cfdbf53c7ec254\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 444800302,\n         \"digest\": \"sha256:b831800c60a36c21033cb6e85f0bd3a5f5c9d96b2fa2797d0e8d4c50598180b8\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 157365696,\n         \"digest\": \"sha256:6d354ec67fa4ccf30460efadef27d48edf9599348cbab789c388f1d3a7fee232\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 63237273,\n         \"digest\": \"sha256:464f9b4eca5cdf36756cf0bef8c76b23344d0e975667becb743e8d6b9019c3cd\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 427820542,\n         \"digest\": \"sha256:6c1f6bcbc63b982a86dc94301c2996505cec571938c60a434b3de196498c7b89\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 44581800,\n         \"digest\": \"sha256:c0a8110c6fede3cf54fa00a1b4e2fcb136d00b3cf490f658ec6d596e313c986e\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 127637178,\n         \"digest\": \"sha256:c25df885c8dea40780f5b479bb6c7be924763399a21fa46c204d5bfac45056bd\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 956429221,\n         \"digest\": \"sha256:7c1d98590e22f78a1b820f89b6ce245321437639957264e628b4abf4862e1223\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 586276809,\n         \"digest\": \"sha256:aab720d802b7d006b679ac10df4a259b3556812dea4dfc52d6111db47fc41e62\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 21717560,\n         \"digest\": \"sha256:5ee4a4cda8613a3fb172a827143aadacb98128479a22a280495604f989bf4483\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 93512644,\n         \"digest\": \"sha256:c4699852e987bc3fe9adde2544ffa690ad52ebec229c20f7e4153b015ac238ff\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 19141,\n         \"digest\": \"sha256:8d93692c8dcecacb8aca746a868f53d0b0cf1207e08ced8ffb2134bb01c1f871\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 84125618,\n         \"digest\": \"sha256:57c74d175611802a57531be97d19f586dc9cd810a5490eab04fd40b648312ead\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 3261,\n         \"digest\": \"sha256:1ac7a265bf03308e06e9cad7e77d12b22ca8bc6b7791d46398d95977e0042574\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2162,\n         \"digest\": \"sha256:1b4a5be69a4439f3de72877b7d408400e3aa0b4c37e9c70c4490b480bce682c0\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 1270,\n         \"digest\": \"sha256:648046d6f6c28a42a39c9e68a9da90ccdabbd1ecfd0be77941114df4eb2406a4\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 644,\n         \"digest\": \"sha256:19a794f6956d460edfe74d5562d44366a7cf8bd46d83f408f1bf3c46e7282464\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 2052,\n         \"digest\": \"sha256:880f92e310c2e03c28c5db85b342069b1a56cd13de7998ae52f699829774f075\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 875,\n         \"digest\": \"sha256:cad389727d6cd1696ed7e91b70eedd4c86fd30babb648e7be6cc1639582b0928\"\n      },\n      {\n         \"mediaType\": \"application\/vnd.docker.image.rootfs.diff.tar.gzip\",\n         \"size\": 214,\n         \"digest\": \"sha256:c873da9a657a590abeae80bd3c0d0d87a6bfdfaf1d3873a0f210760a4050d6db\"\n      }\n   ]\n}\n","553b4ddb":"from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom scipy.signal import butter, lfilter\nfrom scipy.stats import norm\nfrom sklearn import base\nfrom statsmodels.distributions.empirical_distribution import ECDF\nimport logging\nimport numpy as np\n\n\nlogger = logging.getLogger('Kaggler')\n\n\nclass QuantileEncoder(base.BaseEstimator):\n    \"\"\"QuantileEncoder encodes numerical features to quantile values.\n\n    Attributes:\n        ecdfs (list of empirical CDF): empirical CDFs for columns\n        n_label (int): the number of labels to be created.\n    \"\"\"\n\n    def __init__(self, n_label=10, sample=100000, random_state=42):\n        \"\"\"Initialize a QuantileEncoder class object.\n\n        Args:\n            n_label (int): the number of labels to be created.\n            sample (int or float): the number or fraction of samples for ECDF\n        \"\"\"\n        self.n_label = n_label\n        self.sample = sample\n        self.random_state = random_state\n\n    def fit(self, X, y=None):\n        \"\"\"Get empirical CDFs of numerical features.\n\n        Args:\n            X (pandas.DataFrame): numerical features to encode\n\n        Returns:\n            A trained QuantileEncoder object.\n        \"\"\"\n        def _calculate_ecdf(x):\n            return ECDF(x[~np.isnan(x)])\n\n        if self.sample >= X.shape[0]:\n            self.ecdfs = X.apply(_calculate_ecdf, axis=0)\n        elif self.sample > 1:\n            self.ecdfs = X.sample(n=self.sample,\n                                  random_state=self.random_state).apply(\n                                      _calculate_ecdf, axis=0\n                                  )\n        else:\n            self.ecdfs = X.sample(frac=self.sample,\n                                  random_state=self.random_state).apply(\n                                      _calculate_ecdf, axis=0\n                                  )\n\n        return self\n\n    def fit_transform(self, X, y=None):\n        \"\"\"Get empirical CDFs of numerical features and encode to quantiles.\n\n        Args:\n            X (pandas.DataFrame): numerical features to encode\n\n        Returns:\n            Encoded features (pandas.DataFrame).\n        \"\"\"\n        self.fit(X, y)\n\n        return self.transform(X)\n\n    def transform(self, X):\n        \"\"\"Encode numerical features to quantiles.\n\n        Args:\n            X (pandas.DataFrame): numerical features to encode\n\n        Returns:\n            Encoded features (pandas.DataFrame).\n        \"\"\"\n        for i, col in enumerate(X.columns):\n            X.loc[:, col] = self._transform_col(X[col], i)\n\n        return X\n\n    def _transform_col(self, x, i):\n        \"\"\"Encode one numerical feature column to quantiles.\n\n        Args:\n            x (pandas.Series): numerical feature column to encode\n            i (int): column index of the numerical feature\n\n        Returns:\n            Encoded feature (pandas.Series).\n        \"\"\"\n        # Map values to the emperical CDF between .1% and 99.9%\n        rv = np.ones_like(x) * -1\n\n        filt = ~np.isnan(x)\n        rv[filt] = np.floor((self.ecdfs[i](x[filt]) * 0.998 + .001) *\n                            self.n_label)\n\n        return rv\n\n\nclass Normalizer(base.BaseEstimator):\n    \"\"\"Normalizer that transforms numerical columns into normal distribution.\n\n    Attributes:\n        ecdfs (list of empirical CDF): empirical CDFs for columns\n    \"\"\"\n\n    def fit(self, X, y=None):\n        self.ecdfs = [None] * X.shape[1]\n\n        for col in range(X.shape[1]):\n            self.ecdfs[col] = ECDF(X[col].values)\n\n        return self\n\n    def transform(self, X):\n        \"\"\"Normalize numerical columns.\n\n        Args:\n            X (pandas.DataFrame) : numerical columns to normalize\n\n        Returns:\n            (pandas.DataFrame): normalized numerical columns\n        \"\"\"\n\n        for col in range(X.shape[1]):\n            X[col] = self._transform_col(X[col], col)\n\n        return X\n\n    def fit_transform(self, X, y=None):\n        \"\"\"Normalize numerical columns.\n\n        Args:\n            X (pandas.DataFrame) : numerical columns to normalize\n\n        Returns:\n            (pandas.DataFrame): normalized numerical columns\n        \"\"\"\n\n        self.ecdfs = [None] * X.shape[1]\n\n        for col in range(X.shape[1]):\n            self.ecdfs[col] = ECDF(X[col].values)\n            X[col] = self._transform_col(X[col], col)\n\n        return X\n\n    def _transform_col(self, x, col):\n        \"\"\"Normalize one numerical column.\n\n        Args:\n            x (pandas.Series): a numerical column to normalize\n            col (int): column index\n\n        Returns:\n            A normalized feature vector.\n        \"\"\"\n\n        return norm.ppf(self.ecdfs[col](x.values) * .998 + .001)\n\n\nclass BandpassFilter(base.BaseEstimator):\n\n    def __init__(self, fs=10., lowcut=.5, highcut=3., order=3):\n        self.fs = 10.\n        self.lowcut = .5\n        self.highcut = 3.\n        self.order = 3\n        self.b, self.a = self._butter_bandpass()\n\n    def _butter_bandpass(self):\n        nyq = .5 * self.fs\n        low = self.lowcut \/ nyq\n        high = self.highcut \/ nyq\n        b, a = butter(self.order, [low, high], btype='band')\n\n        return b, a\n\n    def _butter_bandpass_filter(self, x):\n        return lfilter(self.b, self.a, x)\n\n    def fit(self, X):\n        return self\n\n    def transform(self, X, y=None):\n        for col in range(X.shape[1]):\n            X[:, col] = self._butter_bandpass_filter(X[:, col])\n\n        return X","fe20339a":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","c0a222a5":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b2afa613":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","1a43e0bd":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","271a3192":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","6b9b6f1c":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# us-counties.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/us-counties.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'us-counties.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","34c3f46c":"df1.head(5)","ebc38815":"plotPerColumnDistribution(df1, 10, 5)","b88fc12c":"plotCorrelationMatrix(df1, 8)","80a02b08":"plotScatterMatrix(df1, 9, 10)","9d296beb":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# us-states.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/us-states.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'us-states.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","6cfbca02":"df2.head(5)","bd7832b4":"plotPerColumnDistribution(df2, 10, 5)","a4f5cf41":"plotCorrelationMatrix(df2, 8)","d7b1b6f3":"plotScatterMatrix(df2, 9, 10)","39e9a0e8":"Scatter and density plots:","d899863e":"Let's take a quick look at what the data looks like:","735eb118":"Distribution graphs (histogram\/bar graph) of sampled columns:","b4b94442":"Let's take a quick look at what the data looks like:","5463333a":"### Let's check 2nd file: \/kaggle\/input\/us-states.csv","2543544c":"Now you're ready to read in the data and use the plotting functions to visualize the data.","0f2b9c18":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","8b855c9b":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","ef89d1d8":"Correlation matrix:","1196dc30":"Scatter and density plots:","32bb70fd":"Distribution graphs (histogram\/bar graph) of sampled columns:","083c11ce":"There are 2 csv files in the current version of the dataset:\n","3ce75332":"### Let's check 1st file: \/kaggle\/input\/us-counties.csv","6e2ec4dd":"Correlation matrix:","e6a26c8e":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","281a3c09":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code."}}