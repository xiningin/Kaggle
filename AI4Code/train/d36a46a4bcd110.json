{"cell_type":{"3ea1ef7f":"code","f44f9b09":"code","4396f7fa":"code","f00f4bc7":"code","65a3fb70":"code","1c05a68d":"code","669b34ba":"code","eb3ee1e4":"code","cfad725f":"code","849d0830":"code","05238278":"code","ce14ee61":"code","e9ca18e2":"code","a50e2d18":"code","89626ef4":"code","4026d018":"code","de9a94ae":"code","c2e29561":"code","98ac0921":"code","c281475a":"code","9819ff0b":"code","3a704413":"code","c910b4f6":"code","d42b7071":"code","b7f06b7f":"code","9afd4aff":"code","b7891b0b":"code","80a44ee9":"markdown","2b7c908a":"markdown","011e1d84":"markdown","de28f38c":"markdown","18a01bf7":"markdown","572580de":"markdown","5025040f":"markdown","071e7776":"markdown"},"source":{"3ea1ef7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f44f9b09":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom math import radians, cos, sin, sqrt, asin","4396f7fa":"df = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv')\ndf.sample(5)","f00f4bc7":"df.info()","65a3fb70":"df.duplicated().sum()","1c05a68d":"df.isna().sum()","669b34ba":"df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'])","eb3ee1e4":"df= df.assign(hour = df.pickup_datetime.dt.hour, \n                         day = df.pickup_datetime.dt.day,\n                        month = df.pickup_datetime.dt.month, \n                        year = df.pickup_datetime.dt.year, \n                        dayofweek = df.pickup_datetime.dt.dayofweek)","cfad725f":"# function to calculate the travel distance from the longitudes and latitudes\ndef distance_transform(longitude1, latitude1, longitude2, latitude2):\n    travel_dist = []\n    \n    for pos in range(len(longitude1)):\n        long1,lati1,long2,lati2 = map(radians,[longitude1[pos],latitude1[pos],longitude2[pos],latitude2[pos]])\n        dist_long = long2 - long1\n        dist_lati = lati2 - lati1\n        a = sin(dist_lati\/2)**2 + cos(lati1) * cos(lati2) * sin(dist_long\/2)**2\n        c = 2 * asin(sqrt(a))*6371\n        travel_dist.append(c)\n       \n    return travel_dist","849d0830":"#Add a new variable travel distance\n\ndf['travel_dist_km'] = distance_transform(df['pickup_longitude'].to_numpy(),\n                                                df['pickup_latitude'].to_numpy(),\n                                                df['dropoff_longitude'].to_numpy(),\n                                                df['dropoff_latitude'].to_numpy())\ndf","05238278":"for i in df.iloc[:,3:].columns:\n    sns.boxplot(x=df[i],data=df,palette='rainbow')\n    \n    plt.show()","ce14ee61":"l=[7]\ndef Outlier(data):\n    for column in data.iloc[:,l].columns:\n        if data[column].dtype!='str':\n            Q1=np.percentile(data[column],25)\n            Q3=np.percentile(data[column],75)\n            IQR= Q3-Q1\n            lower=Q1-(1.5* IQR)\n            upper=Q3+(1.5* IQR)\n            data.loc[:,column] =np.where(data[column].values>upper,upper,data[column].values)\n            data.loc[:,column] =np.where(data[column].values<lower,lower,data[column].values)\n    return data\n \ndf2=Outlier(df)\ndf2.columns\ndf2.head()","e9ca18e2":"for i in df2.iloc[:,3:].columns:\n    sns.boxplot(x=df2[i],data=df2,palette='rainbow')\n    \n    plt.show()","a50e2d18":"df2.corr()['fare_amount']","89626ef4":"# Plot a histogram\n\ndf2.fare_amount.hist(bins=30, alpha=0.5)\nplt.show()","4026d018":"# heatmap\n\ncorr = df2.corr()\nplt.figure(figsize=(14,14))\nsns.heatmap(corr, annot=True, fmt= '.2f',annot_kws={'size': 15}, cmap= 'coolwarm')\nplt.show()\nprint(corr)","de9a94ae":"from sklearn.model_selection import train_test_split","c2e29561":"X=df2.drop(['fare_amount','key','pickup_datetime'],axis=1)\ny=df2['fare_amount']\n\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=3)","98ac0921":"from sklearn.ensemble import RandomForestRegressor\n\nclf= RandomForestRegressor(n_estimators=150, max_depth=10, min_samples_leaf = 12,min_samples_split=15)","c281475a":"#Scaling the data\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nmin_max=MinMaxScaler()\n\nX_train_transformed=min_max.fit_transform(X_train)\n\nX_test_transformed=min_max.transform(X_test)","9819ff0b":"clf.fit(X_train_transformed,y_train)","3a704413":"pred=clf.predict(X_test_transformed)\npred","c910b4f6":"train_pred=clf.predict(X_train_transformed)\ntrain_pred","d42b7071":"#R2\n\nfrom sklearn.metrics import r2_score\nprint('R^2:',r2_score(y_test,pred))\nprint('R^2:',r2_score(y_train,train_pred))","b7f06b7f":"#MSE\n\nfrom sklearn.metrics import mean_squared_error\nprint('MSE:',mean_squared_error(y_test,pred))\nprint('MSE:',mean_squared_error(y_train,train_pred))","9afd4aff":"#RMSE\n\nprint('RMSE:',np.sqrt(mean_squared_error(y_test,pred)))\nprint('RMSE:',np.sqrt(mean_squared_error(y_train,train_pred)))","b7891b0b":"#MAE\n\nfrom sklearn.metrics import mean_absolute_error\nprint('MAE:',mean_absolute_error(y_test,pred))\nprint('MAE:',mean_absolute_error(y_train,train_pred))","80a44ee9":"**Importing Libraries**","2b7c908a":"**Splitting Data**","011e1d84":"**Creating New Features**","de28f38c":"**Treating Outliers**","18a01bf7":"**Building A Model**","572580de":"**Evaluating The Model**","5025040f":"**Changing Data Types**","071e7776":"**Reading Data**"}}