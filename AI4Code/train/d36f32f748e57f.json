{"cell_type":{"e4598902":"code","37134154":"code","f8014670":"code","a7b81e36":"code","4e77a854":"code","425f7842":"code","e7cc56e0":"code","c7a95a79":"code","b07d3f43":"code","814d3efc":"code","061fd754":"code","5bfd7918":"code","794eb58c":"code","f28831d4":"code","06e06140":"code","c4466f5b":"code","79ce179c":"code","a8a6a4f6":"code","2ccefc4a":"code","f01f94b6":"code","0a18ef24":"code","4242b7a9":"code","0fc41f6b":"code","c854702b":"code","486b76ad":"code","e24d38d4":"code","715ff1a5":"code","115a77bc":"code","e0b27720":"code","a321c225":"code","51a7f144":"code","5f7d3a1e":"code","469bbf40":"code","372061d8":"code","ccd03944":"code","eb052df7":"code","90c7296d":"code","11f8590b":"code","e3cfaa1a":"code","e0b0075e":"code","499cc3b5":"code","cfccdc6b":"markdown"},"source":{"e4598902":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\n\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","37134154":"df.info()","f8014670":"df.isnull().sum().sum()","a7b81e36":"print(\"New League= A\" ,df[df[\"NewLeague\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"New League= N\" ,df[df[\"NewLeague\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= A\" ,df[df[\"League\"]==\"A\"].agg({\"Salary\":\"mean\"}))\nprint(\"League= N\" ,df[df[\"League\"]==\"N\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= E\" ,df[df[\"Division\"]==\"E\"].agg({\"Salary\":\"mean\"}))\nprint(\"Division= W\" ,df[df[\"Division\"]==\"W\"].agg({\"Salary\":\"mean\"}))","4e77a854":"df.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'E'),\"Salary\"]=624.27\ndf.loc[(df[\"Salary\"].isnull())& (df['Division'] == 'W'),\"Salary\"]=450.87\ndf.isnull().sum().sum()","425f7842":"# One hot Encoding\ndf1 = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf1.head()","e7cc56e0":"clf= LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df1)[0:10]","c7a95a79":"df1_scores=clf.negative_outlier_factor_\nnp.sort(df1_scores)[0:20]","b07d3f43":"sns.boxplot(df1_scores);","814d3efc":"threshold=np.sort(df1_scores)[15]\ndf2=df1.loc[df1_scores > threshold]\nprint(df2.shape)\ndf2.head(2)","061fd754":"## Applying Standart Scaler on only X variables","5bfd7918":"dff=df2.drop([\"Salary\",\"League_N\",\"Division_W\",\"NewLeague_N\"], axis=1)\ncategorical_columns=[col for col in dff.columns if dff[col].dtype==\"object\"]\nnumeric_columns=[num for num in dff.columns if num not in categorical_columns]\nscaler=MinMaxScaler()\nscaled_cols=scaler.fit_transform(dff[numeric_columns])\nscaled_cols=pd.DataFrame(scaled_cols, columns=numeric_columns)\n\n\nscaled_cols\n","794eb58c":"ayrikdf=df2.loc[:, \"League_N\":\"NewLeague_N\"]\nayrikdf=pd.DataFrame(ayrikdf)\nayrikdf=ayrikdf.reset_index(drop=True)\nprint(ayrikdf.shape)\nayrikdf.head()","f28831d4":"scaled_cols=pd.DataFrame(scaled_cols)\nscaled_cols=scaled_cols.reset_index(drop=True)\nprint(scaled_cols.shape)\nscaled_cols.head()","06e06140":"DF=pd.concat([scaled_cols,ayrikdf],axis=1)\nDF.shape","c4466f5b":"# Generating Variables","79ce179c":"plt.figure(figsize=(12,10))\ncor = DF.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","a8a6a4f6":"DF2=DF.drop([\"CAtBat\",\"CHits\",\"CHmRun\",\"CRuns\",\"AtBat\",\"Runs\"], axis=1)\nDF2.head(2)\n","2ccefc4a":"plt.figure(figsize=(12,10))\ncor = DF2.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","f01f94b6":"DF2[\"walks\/cwalks\"]= DF2[\"Walks\"]\/DF2[\"CWalks\"]","0a18ef24":"DF2.head(2)","4242b7a9":"DF2[\"walks\/cwalks\"]= pd.Series(MinMaxScaler().fit_transform(DF2[[\"walks\/cwalks\"]]).reshape(306,))\nDF2.head(3)","0fc41f6b":"DF2[DF2.isnull().any(axis=1)]","c854702b":"DF2.loc[(DF2[\"Walks\"]==0)&(DF2[\"CWalks\"]==0),\"walks\/cwalks\"]=0","486b76ad":"plt.figure(figsize=(12,10))\ncor = DF2.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()\n","e24d38d4":"#Regression\nX_train, X_test, y_train, y_test = train_test_split(DF2, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","715ff1a5":"#Ridge Regression\nX_train, X_test, y_train, y_test = train_test_split(DF2, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\n\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","115a77bc":"# Ridge_tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e0b27720":"# Ridge_tuned(alpha2)\n\nridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a321c225":"# Ridge_tuned(alpha3)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","51a7f144":"# Ridge_tuned(best alpha)\nalphas4 = [30,200]\nridge_cv = RidgeCV(alphas = alphas4, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","5f7d3a1e":"#Lasso Regression\nlasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","469bbf40":"#Lasso Tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","372061d8":"#Lasso Tuned(alpha2)\nlasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","ccd03944":"#Lasso Tuned(alpha3)\nlasso_cv_model = LassoCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","eb052df7":"# Lasso_tuned(best alpha)\nalphas4 = [25,50,100]\nlasso_cv_model = LassoCV(alphas = alphas4, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","90c7296d":"# Elastic Net Regression\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","11f8590b":"#Elastic Net(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e3cfaa1a":"#Elastic Net(alpha2)\nenet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","e0b0075e":"#Elastic Net(alpha3)\nenet_cv_model = ElasticNetCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","499cc3b5":"enet_params = {\"l1_ratio\": [0,0.001,0.002,0.003,0.005,0.01,0.03,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n               \"alpha\":[30,40]}\nenet_model = ElasticNet().fit(DF, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(DF, y)\nprint(gs_cv_enet.best_params_)\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","cfccdc6b":"# 1) Eksik verilere k\u0131r\u0131l\u0131m ortalamalar\u0131 atand\u0131.\n# 2) Ayk\u0131r\u0131 g\u00f6zlemler LOF ile belirlendi,15.de\u011fer sonras\u0131 at\u0131ld\u0131.\n# 3) X de\u011fi\u015fkenlerine MinMax Scaler d\u00f6n\u00fc\u015f\u00fcm\u00fc yap\u0131ld\u0131.\n# 4) Yeni de\u011fi\u015fken t\u00fcretildi(walks\/cwalks)\n# 5) 306 veri ile; tune edilmi\u015f ve edilmemi\u015f, en iyi durumda:\n- Regression rmse: 297\n- Ridge rmse: 265\n- Lasso rmse: 277\n- Elastic Net rmse: 279"}}