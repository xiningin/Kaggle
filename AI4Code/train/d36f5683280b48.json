{"cell_type":{"5436ff09":"code","2bd5215f":"code","b86bd741":"code","24580565":"code","4d751196":"code","d0de3730":"code","1515e482":"code","5e6bf642":"code","c18bbf5d":"code","76e9f673":"code","9a4a532d":"code","5cafd788":"code","0c25c7b9":"code","7ca1a3f2":"code","37a4a36a":"code","4d5f4c5a":"code","7bfa4d64":"code","bc59e6fc":"code","1a97c6c6":"code","0f6afe1e":"code","641c2a89":"code","5e9fc493":"code","6b7d5b39":"code","602f41af":"code","e1f8d4a9":"code","810750df":"code","42f47156":"code","2ea691ef":"code","4357330b":"markdown","4a81549e":"markdown","da6b5c66":"markdown","76824fee":"markdown","7dc7c460":"markdown"},"source":{"5436ff09":"%%capture\n!pip install line_profiler\n!pip install memory_profiler","2bd5215f":"%load_ext line_profiler\n%load_ext memory_profiler","b86bd741":"%memit","24580565":"\n\nfrom __future__ import print_function\nimport lime\nimport sklearn\nimport numpy as np\nimport sklearn\nimport sklearn.ensemble\nimport sklearn.metrics\n\nfrom sklearn.datasets import fetch_20newsgroups\nfrom lime import lime_text\nfrom sklearn.pipeline import make_pipeline\nfrom lime.lime_text import LimeTextExplainer\n\ncategories = ['alt.atheism', 'soc.religion.christian']\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=categories)\nnewsgroups_test = fetch_20newsgroups(subset='test', categories=categories)\nclass_names = ['atheism', 'christian']\n\nvectorizer = sklearn.feature_extraction.text.TfidfVectorizer(lowercase=False)\ntrain_vectors = vectorizer.fit_transform(newsgroups_train.data)\ntest_vectors = vectorizer.transform(newsgroups_test.data)\n\nrf = sklearn.ensemble.RandomForestClassifier(n_estimators=500)\nrf.fit(train_vectors, newsgroups_train.target)\n \npred = rf.predict(test_vectors)\nsklearn.metrics.f1_score(newsgroups_test.target, pred, average='binary')\n\n\nc = make_pipeline(vectorizer, rf)\nprint(c.predict_proba([newsgroups_test.data[0]]))\n\nexplainer = LimeTextExplainer(class_names=class_names)","4d751196":"%memit","d0de3730":"import pandas as pd\n\nbenchmark_df = pd.DataFrame(columns=['length', 'wall_time', 'cpu_total_time', 'user_time', 'sys_time'])","1515e482":"benchmark_df.head()","5e6bf642":"benchmark_df.drop(benchmark_df.index, inplace=True)","c18bbf5d":"%%capture\npip install tqdm","76e9f673":"import cProfile, pstats, io\nfrom tqdm.notebook import tqdm","9a4a532d":"len(newsgroups_test.data)","5cafd788":"%memit","0c25c7b9":"for idx in tqdm(range(10)):\n    \n    pr = cProfile.Profile()\n    pr.enable()\n    # ... do something ...\n    exp = explainer.explain_instance(newsgroups_test.data[idx], c.predict_proba, num_features=6)\n    pr.disable()\n    s = io.StringIO()\n    sortby = 'cumulative'\n    ps = pstats.Stats(pr, stream=s).sort_stats(sortby)\n    #ps.print_stats()\n    #print(s.getvalue())\n\n    ps.total_tt\n    benchmark_df.loc[len(benchmark_df)] = [len(newsgroups_test.data[idx]), ps.total_tt, np.nan, np.nan, np.nan]\n\nbenchmark_df.head(50)","7ca1a3f2":"benchmark_df.sort_values(by=['length', 'wall_time'], ascending=True, inplace= True)","37a4a36a":"benchmark_df = benchmark_df.set_index('length')","4d5f4c5a":"axes = benchmark_df.plot.line(lw=2, colormap='jet', marker='.', markersize=10, title=\"Input Length Wise BenchMarking\")\naxes.set_xlabel(\"Length (Char)\")\naxes.set_ylabel(\"Time (Sec)\")","7bfa4d64":"benchmark_df.drop(benchmark_df.index, inplace=True)\nbenchmark_df.reset_index(inplace=True)","bc59e6fc":"%memit","1a97c6c6":"\nfor idx in tqdm(range(len(newsgroups_test.data))):\n    \n    pr = cProfile.Profile()\n    pr.enable()\n    # ... do something ...\n    exp = explainer.explain_instance(newsgroups_test.data[idx], c.predict_proba, num_features=6)\n    pr.disable()\n    s = io.StringIO()\n    sortby = 'cumulative'\n    ps = pstats.Stats(pr, stream=s).sort_stats(sortby)\n    #ps.print_stats()\n    #print(s.getvalue())\n\n    \n    benchmark_df.loc[len(benchmark_df)] = [len(newsgroups_test.data[idx]), ps.total_tt, np.nan, np.nan, np.nan]\n    \n    if idx % 10 == 0:\n        print(\"Pickline at {} ..\".format(idx))\n        benchmark_df.to_pickle(\"benchmark_observation.pkl\")\n\n","0f6afe1e":"%memit","641c2a89":"benchmark_df.head(50)\nbenchmark_df.sort_values(by=['length', 'wall_time'], ascending=True, inplace= True)\nbenchmark_df = benchmark_df.set_index('length')\naxes = benchmark_df.plot.line(lw=2, colormap='jet', marker='.', markersize=10, title=\"Input Length Wise BenchMarking\")\naxes.set_xlabel(\"Length (Char)\")\naxes.set_ylabel(\"Time (Sec)\")","5e9fc493":"n=50\nbenchmark_df1 = benchmark_df.reset_index()\naxes = benchmark_df1.plot.bar( x='wall_time', y='length', rot=90)\nticks = axes.xaxis.get_ticklocs()\nticklabels = [int(float(l.get_text())) for l in axes.xaxis.get_ticklabels()]\naxes.xaxis.set_ticks(ticks[::n])\naxes.xaxis.set_ticklabels(ticklabels[::n])","6b7d5b39":"ax = benchmark_df1.plot.scatter(y='length', x='wall_time', figsize=(5, 5),c='wall_time', colormap='viridis')","602f41af":"from sklearn.linear_model import LinearRegression","e1f8d4a9":"X = benchmark_df1.loc[:, 'length'].values.reshape(-1, 1)  # values converts it into a numpy array\nY = benchmark_df1.loc[:, 'wall_time'].values.reshape(-1, 1)  # -1 means that calculate the dimension of rows, but have 1 column\nlinear_regressor = LinearRegression()  # create object for the class\nlinear_regressor.fit(X, Y)  # perform linear regression\nY_pred = linear_regressor.predict(X)  # make predictions","810750df":"import matplotlib.pyplot as plt \nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()","42f47156":"linear_regressor.predict(np.array(2000).reshape((-1, 1)))","2ea691ef":"linear_regressor.predict(np.array(50000).reshape((-1, 1)))","4357330b":"## Developing Linear Regression","4a81549e":"## [Benchmark] LIME Using Two Classes","da6b5c66":"## Explanation","76824fee":"## Exhaustive Run","7dc7c460":"Initial Memory"}}