{"cell_type":{"55821b89":"code","bba71487":"code","836c7182":"code","b8b1a29c":"code","e3a46428":"code","b61c292a":"code","8a9dd5aa":"code","8724d1e1":"code","c00ece9e":"code","4a718d82":"code","21fe7cc4":"code","b018a6b1":"code","729e38ff":"code","f40b2585":"code","5d41a135":"code","65fb345a":"code","ad3d740a":"code","4d29d4eb":"code","2e84fd99":"code","19eaee6b":"code","3d8a050c":"code","bee7204d":"code","885678ee":"code","5cdbe44b":"code","ad3a4b5d":"code","91b257fe":"code","ce96f72e":"code","5c89d655":"code","29c98f1d":"code","a6e9b42d":"code","73fbbc59":"code","7bfc0738":"code","7a3a38f1":"code","b9cc1d78":"code","070028f2":"code","0bd6caa6":"code","b4cdc8e5":"code","93a7beab":"code","14327345":"code","33d1f498":"code","7dd54e29":"code","728a2113":"code","32ad8a25":"code","76e23ec6":"code","e016e386":"code","a3a5b63f":"code","31c0cefa":"code","0aede235":"code","b5342b9b":"code","0a30e594":"code","7894c4e2":"code","c3bb9b93":"code","58c2eeb2":"code","87983c64":"code","871e7fd4":"code","a0be1c8c":"code","2d7d62f9":"code","e3d259d6":"code","e203943b":"code","98aad75c":"code","bad63305":"code","251ced10":"code","d1977087":"code","5182f51a":"code","759ed019":"code","ac590290":"code","a7e6881d":"code","7e114d58":"code","eaef2892":"code","d6ec28e7":"code","d6fc3d70":"code","27001189":"code","1cef4a16":"code","b6d82d4b":"code","61a8fba3":"code","cf2f5b0a":"code","7d893fcb":"code","28e0cf42":"code","be8e0c36":"code","a48f1c66":"code","c896731c":"code","26b2e5e0":"code","6935db29":"code","c9881346":"code","ac0b3c78":"markdown","20a79a80":"markdown","ac206854":"markdown","b7b5f9d1":"markdown","209a35ad":"markdown"},"source":{"55821b89":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bba71487":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import precision_score\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.preprocessing import scale, StandardScaler\nimport numpy as np\nimport re","836c7182":"train = '\/kaggle\/input\/titanic\/train.csv'\ntest =  '\/kaggle\/input\/titanic\/test.csv'","b8b1a29c":"df_train = pd.read_csv(train, index_col='PassengerId')\ndf_test = pd.read_csv(test,index_col='PassengerId')","e3a46428":"df_train","b61c292a":"df_train.Survived.value_counts()[1] \/ (df_train.Survived.value_counts()[1] + df_train.Survived.value_counts()[0] )","8a9dd5aa":"df_train.Survived.value_counts()[0] \/ (df_train.Survived.value_counts()[1] + df_train.Survived.value_counts()[0] )","8724d1e1":"df_test","c00ece9e":"df_train.isnull().sum()","4a718d82":"df_train.nunique()","21fe7cc4":"df_test.isnull().sum()","b018a6b1":"df_test.nunique()","729e38ff":"df_train.columns","f40b2585":"def find_stat(row):\n    pattern = re.compile(r'\\w*\\.')\n    res = re.search(pattern, row)\n    return res.group().replace('.', '').strip()\ndf_train['stat'] = df_train['Name'].map(find_stat)","5d41a135":"df_train","65fb345a":"df_test['stat'] = df_test['Name'].map(find_stat)","ad3d740a":"df_train['stat'].value_counts()","4d29d4eb":"df_train['stat'].value_counts().index.tolist()","2e84fd99":"df_test['stat'].value_counts().index.tolist()","19eaee6b":"team = ['Master','Rev','Capt']\npas = ['Mr','Miss','Mrs']\nmr = ['Dr','Major','Col','Sir','Don','Jonkheer']\nmrs = ['Countess', 'Lady', 'Mme']\nmiss = ['Mlle', 'Ms']","3d8a050c":"df_train.loc[df_train['stat'].isin(mr), 'stat'] = 'Mr'\ndf_train.loc[df_train['stat'].isin(mrs), 'stat'] = 'Mrs'\ndf_train.loc[df_train['stat'].isin(miss), 'stat'] = 'Miss'\ndf_train.loc[df_train['stat'].isin(team), 'stat'] = 'Mr'","bee7204d":"df_test.loc[df_test['stat'].isin(mr), 'stat'] = 'Mr'\ndf_test.loc[df_test['stat'].isin(mrs +['Dona']), 'stat'] = 'Mrs'\ndf_test.loc[df_test['stat'].isin(miss), 'stat'] = 'Miss'\ndf_test.loc[df_test['stat'].isin(team), 'stat'] = 'Mr'","885678ee":"df_train['stat'].value_counts()","5cdbe44b":"df_test['stat'].value_counts()","ad3a4b5d":"df_train","91b257fe":"df_train.isnull().sum()","ce96f72e":"df_test.isnull().sum()","5c89d655":"mean_mrs = int(df_train[df_train['stat'] == 'Mrs'].Age.mean())\ndf_train.loc[df_train['stat'] == 'Mrs', 'Age'] = df_train.loc[df_train['stat'] == 'Mrs'].Age.fillna(mean_mrs)","29c98f1d":"mean_miss = int(df_train[df_train['stat'] == 'Miss'].Age.mean())\ndf_train.loc[df_train['stat'] == 'Miss', 'Age'] = df_train.loc[df_train['stat'] == 'Miss'].Age.fillna(mean_miss)","a6e9b42d":"mean_mr = int(df_train[df_train['stat'] == 'Mr'].Age.mean())\ndf_train.loc[df_train['stat'] == 'Mr', 'Age'] = df_train.loc[df_train['stat'] == 'Mr'].Age.fillna(mean_miss)\n","73fbbc59":"mean_mrs = int(df_test[df_test['stat'] == 'Mrs'].Age.mean())\ndf_test.loc[df_test['stat'] == 'Mrs', 'Age'] = df_test.loc[df_test['stat'] == 'Mrs'].Age.fillna(mean_mrs)\nmean_miss = int(df_test[df_test['stat'] == 'Miss'].Age.mean())\ndf_test.loc[df_test['stat'] == 'Miss', 'Age'] = df_test.loc[df_test['stat'] == 'Miss'].Age.fillna(mean_miss)\nmean_mr = int(df_test[df_test['stat'] == 'Mr'].Age.mean())\ndf_test.loc[df_test['stat'] == 'Mr', 'Age'] = df_test.loc[df_test['stat'] == 'Mr'].Age.fillna(mean_miss)","7bfc0738":"df_train.isnull().sum()","7a3a38f1":"df_test.isnull().sum()","b9cc1d78":"df_train.Age.hist()","070028f2":"df_test.Age.hist()","0bd6caa6":"df_train['sib'] = df_train['SibSp'] + df_train['Parch']","b4cdc8e5":"df_test['sib'] = df_test['SibSp'] + df_test['Parch']\ndf_test.drop(['Name', 'SibSp', 'Parch', 'Ticket'], axis=1, inplace=True)\n","93a7beab":"df_test.Sex.replace({'male': 1, 'female': 0}, inplace=True)","14327345":"df_train.drop(['Name', 'SibSp', 'Parch', 'Ticket'], axis=1, inplace=True)","33d1f498":"df_train.Sex.replace({'male': 1, 'female': 0}, inplace=True)","7dd54e29":"df_train.Embarked.unique()","728a2113":"df_train.Embarked.hist()","32ad8a25":"df_train.Embarked.fillna('S', inplace=True)\ndf_train.Embarked.replace({'S':1,'C':2, 'Q':3}, inplace=True)","76e23ec6":"df_test.Embarked.fillna('S', inplace=True)\ndf_test.Embarked.replace({'S':1,'C':2, 'Q':3}, inplace=True)","e016e386":"df_train","a3a5b63f":"df_test","31c0cefa":"df_train.stat.replace({'Mr':1, 'Mrs':2, 'Miss':3}, inplace=True)\n","0aede235":"df_test.stat.replace({'Mr':1, 'Mrs':2, 'Miss':3}, inplace=True)","b5342b9b":"df_train.Fare.hist()","0a30e594":"df_train.Fare.describe()","7894c4e2":"pd.cut(df_train.Fare,bins=4,right=False, labels=[1,2,3,4]).hist()","c3bb9b93":"df_train.nunique()","58c2eeb2":"df_train.loc[df_train.sib > 0, 'alone'] = 1\ndf_train.alone.fillna(0, inplace=True)","87983c64":"df_test.loc[df_test.sib > 0, 'alone'] = 1\ndf_test.alone.fillna(0, inplace=True)","871e7fd4":"df_train.loc[df_train['Survived'] == 1].sib.hist()","a0be1c8c":"df_train.sib.value_counts()","2d7d62f9":"df_train.sib = pd.cut(df_train.sib,[0,1,3,11],right=False, labels=[1,2,3])","e3d259d6":"df_test.sib = pd.cut(df_test.sib,[0,1,3,11],right=False, labels=[1,2,3])","e203943b":"def find_cab(row):\n    pattern = re.compile(r'\\w')\n    res = re.search(pattern, row)\n    return res.group()","98aad75c":"df_train.Cabin.fillna('0', inplace=True)\ndf_train.Cabin = df_train.Cabin.map(find_cab)\n","bad63305":"df_test.Cabin.fillna('0', inplace=True)\ndf_test.Cabin = df_test.Cabin.map(find_cab)","251ced10":"list_val = df_train.Cabin.map(find_cab).value_counts().index.tolist()\ndict_val = {}\nfor i in range(len(list_val)):\n    dict_val[list_val[i]] = i \ndict_val","d1977087":"df_train.Cabin.replace(dict_val, inplace=True)","5182f51a":"df_train.corr().style.background_gradient(cmap='coolwarm')","759ed019":"list_val = df_test.Cabin.map(find_cab).value_counts().index.tolist()\ndict_val = {}\nfor i in range(len(list_val)):\n    dict_val[list_val[i]] = i \ndict_val","ac590290":"df_test.Cabin.replace(dict_val, inplace=True)","a7e6881d":"df_train","7e114d58":"df_test","eaef2892":"df_train.info()","d6ec28e7":"y = df_train[df_train.columns[0]]\nX = df_train[df_train.columns[1:]]\nX.drop('Sex', axis=1, inplace=True)","d6fc3d70":"X","27001189":"df_test.Fare.fillna(1, inplace=True)","1cef4a16":"df_test.drop('Sex', axis=1, inplace=True)","b6d82d4b":"X.corrwith(y)","61a8fba3":"scale = StandardScaler()\nX_scale_1 = scale.fit_transform(X)\ndf_test_scale = scale.transform(df_test)","cf2f5b0a":"a = pd.DataFrame(scale.fit_transform(X.loc[:,['Age', 'Fare']]), index=X.index)\nX_scale = pd.concat([a, X.loc[:,['Pclass', 'Cabin', 'Embarked', 'stat', 'alone']]], axis=1)","7d893fcb":"a = pd.DataFrame(scale.transform(df_test.loc[:,['Age', 'Fare']]), index=df_test.index)\ndf_test_s = pd.concat([a, df_test.loc[:,['Pclass', 'Cabin', 'Embarked', 'stat', 'alone']]], axis=1)","28e0cf42":"X_scale","be8e0c36":"X_train_full, X_valid_full, y_train, y_valid = train_test_split(X_scale, y, train_size=0.8, test_size=0.2, random_state=42)","a48f1c66":"kfold= KFold(shuffle=True, random_state=6)","c896731c":"for i in [0.0001,0.001,0.01,0.1,1,10]:\n    titanic_model = LogisticRegression(C=i, random_state=10)\n    score = cross_val_score(titanic_model, X_train_full, y_train, cv=kfold, scoring='accuracy')\n    print('C={}, score={}'.format(i, score.mean()))","26b2e5e0":"titanic_model = LogisticRegression(C=10, random_state=10)\nscore = cross_val_score(titanic_model, X_train_full, y_train, cv=kfold, scoring='accuracy')\ntitanic_model.fit(X_train_full, y_train)\nprint('C={}, score={}'.format(i, score.mean()))","6935db29":"predictions = titanic_model.predict(df_test_s)","c9881346":"output = pd.DataFrame({'PassengerId': df_test.index, 'Survived': predictions})\noutput.to_csv('my_submission1.csv', index=False)\nprint(\"Your submission was successfully saved!\")","ac0b3c78":"df_test.Fare = pd.cut(df_test.Fare,bins=4,right=False, labels=[1,2,3,4])","20a79a80":"df_test.Age = pd.cut(df_test.Age,bins=5,right=False, labels=(1,2,3,4,5))","ac206854":"df_train.Fare = pd.cut(df_train.Fare,bins=4,right=False, labels=[1,2,3,4])","b7b5f9d1":"titanic_model = LogisticRegression()\ntitanic_model.fit(X_train_full, y_train)\npredictions_train = titanic_model.predict(X_train_full)\nscore_1 = precision_score(y_train, predictions_train)\npredictions_test = titanic_model.predict(X_valid_full)\nscore_2 = precision_score(y_valid, predictions_test)\nprint(\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c train ={}\".format(score_1))\nprint(\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c test ={}\".format(score_2))","209a35ad":"df_train.Age = pd.cut(df_train.Age,bins=5,right=False, labels=(1,2,3,4,5))"}}