{"cell_type":{"9bc8253c":"code","c5644cf3":"code","4707caca":"code","aefc648e":"code","c6ce8078":"code","c903d09b":"code","1d1a9ab9":"code","48c533a2":"code","d8e8711b":"code","045f47a6":"code","ef849bee":"code","cb5aafc0":"code","1b68d4cf":"code","d24e18d7":"code","7032de23":"code","45df8529":"code","0bf9e9c9":"code","3bf290da":"code","4d30c1da":"code","32c236a9":"code","47aee953":"code","9923a051":"code","683532d9":"code","5462e4cc":"code","433aaf3e":"code","efb50cbb":"code","740ffdcf":"code","f18779d9":"code","75561c44":"code","9077649a":"code","6a4b7092":"code","78713255":"code","1e4b5c3d":"code","462776b7":"code","6ae62abb":"code","689903b0":"code","405e9472":"code","3215f319":"code","162403df":"code","0a44c712":"code","f67dcb3d":"code","c7db8aaa":"code","9d2aa857":"markdown","45da3be8":"markdown","762ea2b6":"markdown","cf3e6e6a":"markdown","78c05094":"markdown","3d11c600":"markdown","44135297":"markdown","5bb473be":"markdown","7f24f4fd":"markdown","62dc1f67":"markdown","52c37256":"markdown","e1bbecb6":"markdown","894407ca":"markdown","a73756e2":"markdown","a39a2dd8":"markdown","79f1fadf":"markdown","f9880511":"markdown","0468217e":"markdown","bcf1e101":"markdown","2908b06d":"markdown","1faa5d22":"markdown","66246dbf":"markdown","e56953a9":"markdown","44c7688d":"markdown","1f94004e":"markdown","d175c64a":"markdown","f2008c7a":"markdown","70ef5a6f":"markdown","3179c85a":"markdown","48ec6970":"markdown","657c845e":"markdown","2878d14c":"markdown","9f66239a":"markdown","388d2b19":"markdown","b26e30ca":"markdown","093bfda0":"markdown","7d6e5cf5":"markdown","989fe2e5":"markdown","a9221bb1":"markdown","4cb2d4fb":"markdown","a0f86090":"markdown","27b4c8ae":"markdown","a3014d73":"markdown","1deb3d97":"markdown","dbc7aa71":"markdown","e013ec06":"markdown"},"source":{"9bc8253c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","c5644cf3":"df = pd.read_csv(\"\/kaggle\/input\/top-4000-movies\/top_4000_movies_data.csv\")\nprint('Shape:', df.shape)\ndf.head()","4707caca":"df.info()","aefc648e":"plt.figure(figsize=(12,7))\nplt.hist(df['Production Budget'])\nplt.ticklabel_format(axis='x', style='plain')\nplt.xlabel('Production Budget', fontsize=12);\nplt.ylabel('Frequency', fontsize=12)\nplt.grid();","c6ce8078":"fig = plt.figure(figsize=(16,5))\n\nax = fig.add_subplot(1, 2, 1)\nplt.hist(df['Domestic Gross'])\nplt.ticklabel_format(axis='x', style='plain')\nplt.xlabel('Domestic Gross', fontsize=12);\nplt.ylabel('Frequency', fontsize=12)\nplt.grid();\n\nax = fig.add_subplot(1, 2, 2)\nplt.hist(df['Worldwide Gross'])\nplt.ticklabel_format(axis='x', style='plain')\nplt.xlabel('Worldwide Gross', fontsize=12);\nplt.ylabel('Frequency', fontsize=12)\nplt.grid();","c903d09b":"df.isna().sum()","1d1a9ab9":"df[df['Release Date'].isna()]","48c533a2":"print('Shape Before:', df.shape)\ndf.dropna(inplace=True)\nprint('Shape After:', df.shape)","d8e8711b":"df['Release Month'] = df['Release Date'].apply(lambda x : str(x).split('\/')[0] + '-' + str(x).split('\/')[2])\ndf['Release Month'] = pd.to_datetime(df['Release Month'])\ndf.head()","045f47a6":"plt.figure(figsize=(12,7))\nplt.hist(df['Release Month'])\nplt.xlabel('Release Month', fontsize=12);\nplt.ylabel('Frequency', fontsize=12)\nplt.grid();","ef849bee":"# Releases after today (December 2021):\ndf[df['Release Month'] > '2021-12']","cb5aafc0":"print('Shape Before:', df.shape)\ndf = df[df['Release Month'] <= '2021-12'].reset_index(drop=True)\nprint('Shape After:', df.shape)","1b68d4cf":"# We aggregate to the mean monthly Production Budget and also add a Moving Average:\nmean_budget_df = pd.DataFrame(df.groupby(['Release Month']).mean()['Production Budget']).reset_index()\n\n# Moving Average:\nmean_budget_df['Moving Average'] = mean_budget_df['Production Budget'].rolling(window=6).mean()\nmean_budget_df.tail()","d24e18d7":"plt.figure(figsize=(12,7))\nplt.plot(mean_budget_df['Release Month'], mean_budget_df['Production Budget'], linewidth=2.5, label = 'Monthly Average')\nplt.plot(mean_budget_df['Release Month'], mean_budget_df['Moving Average'], linewidth=2.5, label = '6 Month MA')\nplt.ticklabel_format(axis='y', style='plain')\nplt.title('Mean Monthly Production Budget', fontsize=16)\nplt.xlabel('Release Month', fontsize=12);\nplt.ylabel('Production Budget', fontsize=12)\nplt.legend()\nplt.grid();","7032de23":"import seaborn as sns\ncolours = sns.color_palette('deep')\ncolours","45df8529":"# Control the number of top movies we plot:\ntop = 20\n\n# Taking the top movies by Production Budget:\ndf_production_budget = df.sort_values(by='Production Budget', ascending=False).head(top)\ndf_production_budget = df_production_budget.sort_values(by='Production Budget')\n\nplt.figure(figsize=(12,7))\nplt.barh(df_production_budget['Movie Title'], df_production_budget['Production Budget'], color=colours[2])\nplt.ticklabel_format(axis='x', style='plain')\nplt.title('Top {} Movies by Production Budget'.format(top), fontsize=16)\nplt.ylabel('Movie Name', fontsize=12);\nplt.xlabel('Production Budget', fontsize=12);","0bf9e9c9":"from sklearn.linear_model import LinearRegression\n\ndef model_relationship(var1, var2):\n    \n    # Shaping the two variables correctly for the regression model:\n    var1, var2 = var1.values.reshape(-1, 1), var2.values.reshape(-1, 1)\n    \n    # The Linear Regression Model:\n    regr = LinearRegression()\n    \n    # Fit it to the variables:\n    regr.fit(var1, var2)\n    \n    # Returning the values of the fit model:\n    model = regr.predict(var1)\n    \n    return model","3bf290da":"fig = plt.figure(figsize=(16,11))\n\n# Production Budget & Domestic Gross:\nax = fig.add_subplot(2, 2, 1)\nplt.scatter(df['Domestic Gross'], df['Production Budget'], alpha=0.7)\nplt.plot(df['Domestic Gross'], model_relationship(df['Domestic Gross'], df['Production Budget']), linewidth=2.5, color=colours[1], label='Relationship')\nplt.ticklabel_format(axis='both', style='plain')\nplt.title('Domestic Gross vs Production Budget', fontsize=16)\nplt.xlabel('Domestic Gross', fontsize=12);\nplt.ylabel('Production Budget', fontsize=12)\nplt.legend();\n\n# Production Budget & Worldwide Gross:\nax = fig.add_subplot(2, 2, 2)\nplt.scatter(df['Worldwide Gross'], df['Production Budget'], alpha=0.7)\nplt.plot(df['Worldwide Gross'], model_relationship(df['Worldwide Gross'], df['Production Budget']), linewidth=2.5, color=colours[1], label='Relationship')\nplt.ticklabel_format(axis='both', style='plain')\nplt.title('Worldwide Gross vs Production Budget', fontsize=16)\nplt.xlabel('Worldwide Gross', fontsize=12);\nplt.ylabel('Production Budget', fontsize=12)\nplt.legend();\n\n# Domestic Gross & Worldwide Gross:\nax = fig.add_subplot(2, 2, 3)\nplt.scatter(df['Domestic Gross'], df['Worldwide Gross'], alpha=0.7)\nplt.plot(df['Domestic Gross'], model_relationship(df['Domestic Gross'], df['Worldwide Gross']), linewidth=2.5, color=colours[1], label='Relationship')\nplt.ticklabel_format(axis='both', style='plain')\nplt.title('Domestic Gross vs Worldwide Gross', fontsize=16)\nplt.ylabel('Worldwide Gross', fontsize=12);\nplt.xlabel('Domestic Gross', fontsize=12)\nplt.legend();\n\n","4d30c1da":"df['Domestic Profit %'] = round(((df['Domestic Gross']\/df['Production Budget']) - 1)*100, 2)\ndf['Worldwide Profit %'] = round(((df['Worldwide Gross']\/df['Production Budget']) - 1)*100, 2)\ndf.head()","32c236a9":"# Control the number of top Words we plot:\ntop = 10\n\n# Controlling the figure:\nfig = plt.figure(figsize=(10,12))\n\n# Taking the Top Movies by Domestic Profit %:\ntop_movies_df = df.sort_values(by=\"Domestic Profit %\", ascending=False).head(top)\ntop_movies_df = top_movies_df.sort_values(by=\"Domestic Profit %\")\n\n# Making the plot:\nax = fig.add_subplot(2, 1, 1)\nplt.barh(top_movies_df['Movie Title'], top_movies_df['Domestic Profit %'], color=colours[3])\nplt.ticklabel_format(axis='x', style='plain')\nplt.title('Top {} Movies by Domestic Profit'.format(top), fontsize=16)\nplt.ylabel('Movie Title', fontsize=12);\nplt.xlabel('Domestic Profit %', fontsize=12);\n\n# Taking the Top Movies by Worldwide Profit %:\ntop_movies_df = df.sort_values(by=\"Worldwide Profit %\", ascending=False).head(top)\ntop_movies_df = top_movies_df.sort_values(by=\"Worldwide Profit %\")\n\n# Making the plot:\nax = fig.add_subplot(2, 1, 2)\nplt.barh(top_movies_df['Movie Title'], top_movies_df['Worldwide Profit %'], color=colours[4])\nplt.ticklabel_format(axis='x', style='plain')\nplt.title('Top {} Movies by Worldwide Profit'.format(top), fontsize=16)\nplt.ylabel('Movie Title', fontsize=12);\nplt.xlabel('Worldwide Profit %', fontsize=12);","47aee953":"plt.figure(figsize=(12,7))\nplt.scatter(df['Worldwide Profit %'], df['Domestic Profit %'], alpha=0.7)\nplt.plot(df['Worldwide Profit %'], model_relationship(df['Worldwide Profit %'], df['Domestic Profit %']), linewidth=2.5, color=colours[1], label='Relationship')\nplt.title('Domestic Profit vs Worldwide Profit', fontsize=16)\nplt.xlabel('Worldwide Profit %', fontsize=12);\nplt.ylabel('Domestic Profit %', fontsize=12)\nplt.grid()\nplt.legend();","9923a051":"df.describe()","683532d9":"df['Model'] = model_relationship(df['Worldwide Profit %'], df['Domestic Profit %'])\ndf.head()","5462e4cc":"# Adding a new Column that will either categorize the movie as a greater Domestic or Worldwide success compared to the other Movies:\ndf['Greater Success'] = ''\n\n# The Greater Success will be Domestically where the value falls above the Model:\ndf['Greater Success'][df['Domestic Profit %'] > df['Model']] = 'Domestic'\n\n# The Greater Success will be Worldwide where the value falls below the Model:\ndf['Greater Success'][df['Domestic Profit %'] < df['Model']] = 'Worldwide'\n\n# Count of the Success Types:\ndf['Greater Success'].value_counts()","433aaf3e":"plt.figure(figsize=(12,7))\nplt.scatter(df['Worldwide Profit %'][df['Greater Success'] == 'Domestic'], df['Domestic Profit %'][df['Greater Success'] == 'Domestic'], color=colours[0], alpha=0.7, label='More Domestic Success')\nplt.scatter(df['Worldwide Profit %'][df['Greater Success'] == 'Worldwide'], df['Domestic Profit %'][df['Greater Success'] == 'Worldwide'], color=colours[2], alpha=0.7, label='More Worldwide Success')\nplt.plot(df['Worldwide Profit %'], model_relationship(df['Worldwide Profit %'], df['Domestic Profit %']), linewidth=2.5, color=colours[1], label='Relationship')\nplt.title('Domestic Profit vs Worldwide Profit', fontsize=16)\nplt.xlabel('Worldwide Profit %', fontsize=12);\nplt.ylabel('Domestic Profit %', fontsize=12)\nplt.grid()\nplt.legend();","efb50cbb":"df = df.drop('Model', axis=1)\ndf.head()","740ffdcf":"# Absolute value of the Worldwide Gross divided by the Domestic Gross:\ndf['Profit Diff Coefficient'] = round(abs(df['Worldwide Gross']\/df['Domestic Gross']), 2)\ndf.head()","f18779d9":"df[df['Profit Diff Coefficient'].isin([np.inf, -np.inf])]","75561c44":"df[df['Profit Diff Coefficient'].isin([np.inf, -np.inf]) == False].sort_values(by='Profit Diff Coefficient', ascending=False).head(20)","9077649a":"df.sort_values(by='Profit Diff Coefficient', ascending=True).head(20)","6a4b7092":"# The information is all contained in the Movie Title Column:\ndf['Movie Title']","78713255":"import re\nimport string\n\ndef clean_title(title):\n\n    # Removing punctuation:\n    cleaned_title = title.translate(str.maketrans('', '', string.punctuation))\n\n    # Making lower case:\n    cleaned_title = cleaned_title.lower()\n    \n    # Stripping out any extra whitespace around the words:\n    cleaned_title = cleaned_title.strip()\n    \n    return cleaned_title","1e4b5c3d":"# Using our function we just created to clean the Movie Title column:\ndf['Movie Title Clean'] = df['Movie Title'].apply(clean_title)\ndf.head()","462776b7":"# We simply split the Cleaned Movie Title every time there is a space:\ndf['Movie Title Tokenized'] = df['Movie Title Clean'].apply(lambda x : x.split(\" \"))\ndf.head()","6ae62abb":"import itertools\n\n# Making the corpus using the itertools library:\nmovie_title_words = list(itertools.chain(*df['Movie Title Tokenized']))\n\n# Printing the total number of words:\nprint('Total number of words in corpus:', len(movie_title_words))\n\n# Displaying just the first 20 words in the corpus:\nmovie_title_words[:20]","689903b0":"import collections\n\n# Using the Counter method from collections to count the total occurances of words in the corpus: \nword_frequency = collections.Counter(movie_title_words)\nword_frequency.most_common(10)","405e9472":"from nltk.corpus import stopwords\n\n# A list of english stop words\nenglish_stopwords = list(set(stopwords.words(\"english\")))\n\n# Preprocessing them the same way we did our corpus (so they're alligned):\nenglish_stopwords = [clean_title(word) for word in english_stopwords]\nenglish_stopwords[:5]","3215f319":"# Just retaining the words that are not a stopword from our titles:\nmovie_title_words = [word for word in movie_title_words if word not in english_stopwords]\n\n# Also removing any blanks, as I noticed that was in our words earlier:\nmovie_title_words = [word for word in movie_title_words if word != \"\"]\n\n# Counting the most frequent words again:\nword_frequency = collections.Counter(movie_title_words)\nword_frequency.most_common(20)","162403df":"# Control the number of top Words we plot:\ntop = 20\n\ntop_words_df = pd.DataFrame(word_frequency.most_common(top),columns=[\"Word\", \"Frequency\"])\ntop_words_df = top_words_df.sort_values(by='Frequency')\n\nplt.figure(figsize=(12,7))\nplt.barh(top_words_df['Word'], top_words_df['Frequency'], color=colours[3])\nplt.ticklabel_format(axis='x', style='plain')\nplt.title('Top {} Words used in Movie Titles'.format(top), fontsize=16)\nplt.ylabel('Word', fontsize=12);\nplt.xlabel('Number of Movie Titles', fontsize=12);","0a44c712":"# We take the forst 3 values in the year and add a \"0\" to get the decade:\ndf['Decade'] = df['Release Month'].apply(lambda x : str(x).split('-')[0][:3] + '0')\n\n# Count of the number of Movies in each Decade:\ndf['Decade'].value_counts()","f67dcb3d":"# Control the number of top Words we plot:\ntop = 10\n\n# Controlling the figure:\nfig = plt.figure(figsize=(20,20))\n\n# For each unique Decade (in order):\nfor ix, decade in enumerate(np.sort(df['Decade'].unique())):\n    \n    # The Decade we're on:\n    decade_df = df['Movie Title Tokenized'][df['Decade'] == decade]\n    \n    # Making the corpus using the itertools library:\n    decade_movie_title_words = list(itertools.chain(*decade_df))\n\n    # Using the Counter method from collections to count the total occurances of words in the corpus: \n    decade_word_frequency = collections.Counter(decade_movie_title_words)\n\n    # Just retaining the words that are not a stopword from our titles:\n    decade_movie_title_words = [word for word in decade_movie_title_words if word not in english_stopwords]\n    decade_movie_title_words = [word for word in decade_movie_title_words if word != \"\"]\n\n    # Counting the most frequent words again:\n    decade_word_frequency = collections.Counter(decade_movie_title_words)\n    \n    # Production Budget & Domestic Gross:\n    ax = fig.add_subplot(3, 2, ix+1)\n    \n    # Dataframe of the top words:\n    decade_top_words_df = pd.DataFrame(decade_word_frequency.most_common(top),columns=[\"Word\", \"Frequency\"])\n    decade_top_words_df = decade_top_words_df.sort_values(by='Frequency')\n\n    # Making the plot:\n    plt.barh(decade_top_words_df['Word'], decade_top_words_df['Frequency'], color=colours[ix])\n    plt.ticklabel_format(axis='x', style='plain')\n    plt.title('Top {} Words in the {}s'.format(top, decade), fontsize=16)\n    plt.ylabel('Word', fontsize=12);\n    plt.xlabel('Number of Movie Titles', fontsize=12);","c7db8aaa":"# Control the number of top Words we plot:\ntop = 20\n\n# Controlling the figure:\nfig = plt.figure(figsize=(20,20))\n\n# For each unique Decade (in order):\nfor ix, decade in enumerate(np.sort(df['Decade'].unique())):\n    \n    # The Decade we're on:\n    decade_df = df['Movie Title Tokenized'][df['Decade'] == decade]\n    \n    # Making the corpus using the itertools library:\n    decade_movie_title_words = list(itertools.chain(*decade_df))\n\n    # Using the Counter method from collections to count the total occurances of words in the corpus: \n    decade_word_frequency = collections.Counter(decade_movie_title_words)\n\n    # Just retaining the words that are not a stopword from our titles:\n    decade_movie_title_words = [word for word in decade_movie_title_words if word not in english_stopwords]\n    decade_movie_title_words = [word for word in decade_movie_title_words if word != \"\"]\n\n    # Counting the most frequent words again:\n    decade_word_frequency = collections.Counter(decade_movie_title_words)\n    \n    # Production Budget & Domestic Gross:\n    ax = fig.add_subplot(3, 2, ix+1)\n    \n    # Dataframe of the top words:\n    decade_top_words_df = pd.DataFrame(decade_word_frequency.most_common(top),columns=[\"Word\", \"Frequency\"])\n    decade_top_words_df = decade_top_words_df.sort_values(by='Frequency')\n\n    # Making the plot:\n    plt.barh(decade_top_words_df['Word'], decade_top_words_df['Frequency'], color=colours[ix])\n    plt.ticklabel_format(axis='x', style='plain')\n    plt.title('Top {} Words in the {}s'.format(top, decade), fontsize=16)\n    plt.ylabel('Word', fontsize=12);\n    plt.xlabel('Number of Movie Titles', fontsize=12);","9d2aa857":"### Movies with the Largest Domestic Profit relative to their Worldwide Profit:","45da3be8":"Technically these have the biggest differences between Domestic and Worldwide Gross since there was no Domestic Profit for these 98 Movies","762ea2b6":"## Looking for Anomalies\n- Are there any movies with release date after today?","cf3e6e6a":"### Adding a decade column:","78c05094":"### Creating a Corpus of Words","3d11c600":"### Visualizing the most common words","44135297":"### Plotting the relationships between the numeric variables","5bb473be":"### Movies with the Largest Worldwide Profit relative to their Domestic Profit:","7f24f4fd":"The above Movies made all of their profit in the USA (Nothing Worldwide outside the USA)","62dc1f67":"## Domestic Gross and Worldwide Gross Distributions","52c37256":"We see a clear upward trend over time, but it's noted that this data is not adjusted for inflation, so that's to be expected","e1bbecb6":"### Preprocessing\n- Removing Punctuation\n- Making everything Lower Case","894407ca":"## Data Types","a73756e2":"- The Worldwide Profit % tends to be much larger than the Domestic Profit % (Median of -5.58% versus 86%)\n- So for a relative comparison, we'll use the relationship (Linear Model) line from above to discrimiate between higher and lower than normal Domestic and Worldwide Success\n- Any movie falling below the line would be considered more successful on a Worldwide platform than it was Domestically compared to the other movies\n- Any movie falling above the line would be considered more successful on a Domesically than it was in a Worldwide sense compared to the other movies\n","a39a2dd8":"## Quantifying the reliance on Worldwide vs Domestic Profit\n\n- We'll generate a coefficient\/number to measure the magnitude of profit from the Worldwide audience relative to the Domestic audience\n- We'll simply divide the Worldwide Gross by the Domestic Gross (since the worldwide number should always be at least as big)\n- A coefficient of 1 would mean that both the Domestic and Worldwide profit are the same (all the money came from the USA)\n- A coefficient of 10 would mean that there was 10 times as much profit Globally as there was Domestically","79f1fadf":"## Loading the Dataset","f9880511":"## Text Mining - Let's see what the most used words are in Movie Titles\n\n- We'll parse the Movie Title column to get a count of the total occurrences for each term used","0468217e":"### Most Profitable Movies","bcf1e101":"### Most Common Words used","2908b06d":"### We'll remove these anomalies too","1faa5d22":"## Does Time have an effect on the Naming of Movies?\n- We'll compare the top words used in Movie Titles across the Decades\n- To do this, we'll repeat the steps above for each decade and analyze the results side by side","66246dbf":"### We'll remove these","e56953a9":"The above Movies made the vast majority of their profit outside of the USA (Worldwide)","44c7688d":"## Mean Production Budget Over Time:\n\n- We'll plot the average budget per month over time\n- We'll also add a 6 month moving average to the plot to see the general trend over time","1f94004e":"## Distribution for Release","d175c64a":"### Movies with the Largest Worldwide Profit relative to their Domestic Profit (Without infinite values):","f2008c7a":"### A quick look at the summary statistics for further understanding","70ef5a6f":"21 NA values for Release Date - Let's take a look at these and decide on the best course of action","3179c85a":"#### Adding More Colour:","48ec6970":"#### Making a Linear Regression function to enable us to make a simple model of the relationship between two variables\n- We'll use this to simply model the relationship between two variables\n- We can then use it in our plots","657c845e":"### Tokenization\n- Instead of the title consisting of just 1 string, we break it up into it's individual components (words)","2878d14c":"## Analysing the relationship between Production Budget, Domestic Gross, and Worldwide Gross","9f66239a":"## Importing Libraries","388d2b19":"The top Movies Domestically tend to also be the top Movies Worldwide. Let's see are there many exceptions to this rule","b26e30ca":"## Production Budget","093bfda0":"### Removing Stopwords\n- We remove any words that add no value, such as \"the\", \"of\", \"and\" like we see above","7d6e5cf5":"## Do we have any NA values","989fe2e5":"**There is certainly a relationship between the Production Budget and the Amount of Revenue the movies make....although it is a little noisey**","a9221bb1":"#### Visualizing the two Groups:","4cb2d4fb":"### A Loop to Generate the Top Words in Each Decade and plot them in a Bar Chart:","a0f86090":"## Looking at the top 20 Instead:","27b4c8ae":"## Creating a \"Release Month\" Feature \n- Specific days in the month aren't very useful analytically for us. The monthly information will allow us to aggregate more easily.","a3014d73":"#### Dropping the Model Column from the Dataframe\n- It won't be necessary anymore","1deb3d97":"## Highest Production Budget Movies of all time","dbc7aa71":"### Adding the Model to the Dataframe so we can categorize the Movies into Domestic and Worldwide Success","e013ec06":"## Analyzing Profitability\n\n- To consider profitability in relative terms, we'll consider the Domestic\/Worldwide Gross numbers as a % of the Production Budget as a proxy for profitability\n- A profitability of 0 means that the Gross Amount made and Production Budget are exactly equal\n- A profitability of 100% means that the Gross Amount made was double the Production Budget (Example: \\\\$100M Budget and $200M Gross equals a 100% profit on the investment) "}}