{"cell_type":{"b47aced6":"code","4f667e99":"code","9c1b2dea":"code","74641816":"code","e3818952":"code","392b42cb":"code","efb59501":"code","3eeb9447":"code","e678dcdd":"code","30b5dccd":"code","f8e9d2d5":"code","83807e24":"code","88c7641f":"code","3b659f24":"code","fc00acf7":"code","dcf7b52d":"code","dc6e4242":"code","5ed8069e":"code","97fa1e49":"code","302e8506":"code","d112b04b":"code","50cf331d":"code","d503f8a2":"code","ef667140":"code","c3533acb":"code","155475c8":"code","d17b242e":"code","9149a144":"code","2d1c80d6":"code","a9248eb3":"code","204c5075":"code","bbcfbb40":"code","e139657b":"code","2ca837c8":"code","d5d19b56":"code","e05b490d":"code","a4c94099":"code","04628e21":"code","92e55dbd":"code","b3c13fec":"code","8e338dee":"code","14d514b2":"code","26ce3c49":"code","838a078d":"code","79d57e40":"markdown","2da6474b":"markdown","18291cbd":"markdown","f69e3485":"markdown","78bc57d4":"markdown","6c874ec0":"markdown","af7483ea":"markdown","702a12b0":"markdown","3b1c37a4":"markdown","85df5677":"markdown","cb8e7fa5":"markdown"},"source":{"b47aced6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4f667e99":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom scipy.stats import normaltest\nimport holoviews as hv\nfrom holoviews import opts\nhv.extension('bokeh')","9c1b2dea":"from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, cross_val_predict\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.neighbors import KNeighborsRegressor \nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures, MinMaxScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","74641816":"class football:\n    \"\"\"  **football** is the class for exploratory data \n        analysis and machine learning in data player . \n        This class have 8 attributes that are given important:\n\n    - multi_categorical_plot\n\n    - distplot_multi\n\n    - boxplot_multi\n\n    - learner_selection\n\n    - training_evaluate\n    \"\"\"\n    \n    def __init__(self, data=None, cols=None, name='potential'):\n        \n        self.name = name # target\n        self.data = data # feature\n        self.cols = cols # feature columns name\n        self.listof_model = {'LinearRegression': LinearRegression(), \n                'KNeighborsRegression':KNeighborsRegressor(),\n                'RandomForestRegression': RandomForestRegressor(),\n               'GradientBoostingRegression': GradientBoostingRegressor(),\n                'XGBoostRegression': XGBRegressor(),\n                'adaboost':AdaBoostRegressor()} # list of different learner\n        \n    #Read csv file\n    def read(self, file):\n        return pd.read_csv(file,sep=';', index_col='player_id')\n    \n    def multi_categorical_plot(self, data):\n    \n        \"\"\" plot a categorical feature\n        \n            data: float64 array  n_observationxn_feature\n        \n        \"\"\"\n        # Find a feature that type is object\n        string = []\n        for i in data.columns:\n            if data[i].dtypes == \"object\":\n                string.append(i)\n    \n        fig = plt.figure(figsize=(20,20))\n        fig.subplots_adjust(wspace=0.4, hspace = 0.3)\n        for i in range(1,len(string)+1):\n            ax = fig.add_subplot(3,1,i)\n            sns.countplot(y=string[i-1], data=data, ax=ax)\n            ax.set_title(f\" {string[i-1]} countplot\")\n            \n    def distplot_multi(self, data):\n        \"\"\" plot multi distplot\"\"\"\n    \n        \n        from scipy.stats import norm\n        cols = []\n        \n        #Feature that is int64 or float64 type \n        for i in data.columns:\n            if data[i].dtypes == \"float64\" or data[i].dtypes == 'int64':\n                cols.append(i)\n        \n        gp = plt.figure(figsize=(20,20))\n        gp.subplots_adjust(wspace=0.4, hspace=0.4)\n        for i in range(1, len(cols)+1):\n            ax = gp.add_subplot(2,3,i)\n            sns.distplot(data[cols[i-1]], fit=norm, kde=False)\n            ax.set_title('{} max. likelihood gaussian'.format(cols[i-1]))\n            \n    def boxplot_multi(self, data):\n        \n        \"\"\" plot multi box plot\n            hue for plotting categorical data\n        \"\"\"\n    \n        cols = []\n        for i in data.columns:\n            if data[i].dtypes == \"float64\" or data[i].dtypes == 'int64':\n                cols.append(i)\n    \n        gp = plt.figure(figsize=(20,20))\n        gp.subplots_adjust(wspace=0.4, hspace=0.4)\n        for i in range(1, len(cols)+1):\n            ax = gp.add_subplot(2,2,i)\n            sns.boxplot(x = cols[i-1], data=data)\n            ax.set_title('Boxplot for {}'.format(cols[i-1]))\n            \n    def correlation_plot(self, data, vrs= 'price'):\n    \n        \"\"\"\n        This function plot only a variable that are correlated with a target  \n        \n            data: array m_observation x n_feature\n            vrs:  target feature (n_observation, )\n            cols: interested features\n        \"\"\"\n        \n        cols = []\n        for i in data.columns:\n            if data[i].dtypes == \"float64\" or data[i].dtypes == 'int64':\n                cols.append(i)\n                \n        feat = list(set(cols) - set([vrs]))\n    \n        fig = plt.figure(figsize=(15,10))\n        fig.subplots_adjust(wspace = 0.3, hspace = 0.25)\n        for i in range(1,len(feat)+1):\n        \n            gp = data.groupby(feat[i-1]).agg('mean').reset_index()\n        \n            if len(feat) < 3:\n                ax = fig.add_subplot(1,3,i)\n            else:\n                n = len(feat)\/\/2 + 1\n                ax = fig.add_subplot(2,n,i)\n            \n            ax.scatter(data[feat[i-1]], data[vrs], alpha=.25)\n            ax.plot(gp[feat[i-1]], gp[vrs], 'r-', label='mean',  linewidth=1.5)\n            ax.set_xlabel(feat[i-1])\n            ax.set_ylabel(vrs)\n            ax.set_title('Plotting data {0} vs {1}'.format(vrs, feat[i-1]))\n            ax.legend(loc='best')\n            \n    def split_data(self):\n        \"\"\"\n        This function splits data to train set and target set\n        \n        data: matrix feature n_observation x n_feature dimension\n        name: target  (n_observation, )\n        cols: interested feature\n        \n        return xtrain, xtest, ytrain, ytest\n        \"\"\"\n    \n        train = self.data[self.cols]\n        target = self.data[self.name]\n    \n        return train_test_split(train, target, random_state=42, test_size=0.2, shuffle=True)\n    \n    def learner_selection(self):\n\n        \"\"\"\n            This function compute differents score measure like cross validation,\n            r2, root mean squared error and mean absolute error.\n            listof_model: dictionary type containing different model algorithm.     \n        \"\"\" \n    \n        result = {}\n        \n        x, _, y, _ = self.split_data() # take only xtrain and ytrain\n    \n        for cm in list(self.listof_model.items()):\n        \n            name = cm[0]\n            model = cm[1]\n        \n            cvs = cross_val_score(model, x, y, cv=10).mean()\n            ypred = cross_val_predict(model, x, y, cv=10)\n            r2 = r2_score(y, ypred)\n            mse = mean_squared_error(y, ypred)\n            mae = mean_absolute_error(y, ypred)\n            rmse = np.sqrt(mse)\n        \n            result[name] = {'cross_val_score': cvs, 'rmse': rmse, 'mae': mae, 'r2': r2}\n        \n            print('{} model done !!!'.format(name))\n        \n        \n        return pd.DataFrame(result)\n    \n    def training_evaluate(self, algorithm):\n        \n        \"\"\"This function train and evaluate our model to find r2, rmse and mae\"\"\"\n        \n        result = {}\n        xtrain, xtest, ytrain, ytest = self.split_data()\n        \n        learner = algorithm # learner selected in model_selection function\n        \n        model = learner.fit(xtrain, ytrain)\n        ypred = model.predict(xtest)\n        \n        r2 = learner.score(xtest, ytest)\n        rmse =  np.sqrt(mean_squared_error(ytest, ypred))\n        mae = mean_absolute_error(ytest, ypred)\n        \n        result['potential'] = {'r2':round(r2, 3),  'rmse':round(rmse, 3), 'mae':round(mae, 3)}\n        \n        return  pd.DataFrame(result)","e3818952":"file ='\/kaggle\/input\/fifa-2021-complete-player-data\/FIFA-21 Complete.csv'","392b42cb":"fifa = football()","efb59501":"data = fifa.read(file)","3eeb9447":"data.head()","e678dcdd":"data.info()","30b5dccd":"# find categorical feature\ndata['nationality'].value_counts()","f8e9d2d5":"plt.figure(dpi = 200, figsize=(10,20))\nsns.countplot(y='nationality', data=data)\nplt.show()","83807e24":"data.describe()","88c7641f":"data.corr()","3b659f24":"plt.figure(dpi=100, figsize=(15,5))\nsns.regplot(x='overall', y='potential', data=data)\nplt.xlabel('overall')\nplt.ylabel('potential')\nplt.title('relation between overall and potential')","fc00acf7":"fifa.distplot_multi(data)","dcf7b52d":"fifa.boxplot_multi(data)","dc6e4242":"def top_team(team=None, data=None, n=6):\n    \"\"\"\n        This function give a top team that are similar\n    \n    \"\"\"\n    #compute cosine similarity\n    def cosine_similarity(a, b): \n        return a.dot(b.T)\/(np.linalg.norm(a, 2)*np.linalg.norm (b, 2))\n    \n    df = {}\n    \n    data = data.groupby('team')[cols].agg('mean').reset_index()\n    \n    pyers = data[data.team == team][cols].values[0] #interested team\n    \n    all_team = list(set(data.team.values) - set(team)) \n    \n    for u in all_team:\n        \n        xv = cosine_similarity(pyers, data[data.team == u][cols].values[0])\n        tn = data[data.team == u].team.values[0]\n    \n        df[u] = {team: round(xv, 3), 'team':tn}\n        \n    xd =  pd.DataFrame(df).sort_values(by=team, axis=1, ascending=False)\n\n    return xd.T[:n]","5ed8069e":"def mostSimilar(player = None, data = None, club = None,  n = 10):\n    \"\"\"\n        This function give a player that are most similar with another player with similar team.\n    \n    \"\"\"\n    \n    def cosine_similarity(a, b):\n        \n        return a.dot(b.T)\/(np.linalg.norm(a, 2)*np.linalg.norm (b, 2))\n    \n    df = {}\n    \n    tm = club.team.values\n    \n    data = data[data.team.isin(tm)]\n    \n    pyers = data[data.name == player][cols].values[0] # interested team\n    all_name = list(set(data.name.values) - set(player))\n    \n    for u in all_name:\n        \n        xv = cosine_similarity(pyers, data[data.name == u][cols].values[0])\n        tn = data[data.name == u].team.values[0]\n        pn = data[data.name == u].position.values[0]\n        nt = data[data.name == u].nationality.values[0]\n        \n        df[u] = {player:round(xv, 3), 'team':tn, 'position': pn, 'nationality':nt}     \n    \n    xd =  pd.DataFrame(df).drop(columns=player).sort_values(by=player, axis=1, ascending=False)   \n        \n    return xd.iloc[:, :n]","97fa1e49":"cols = [cols  for cols in data.columns if data[cols].dtype != 'object']","302e8506":"cols","d112b04b":"team = list(data.team.unique())","50cf331d":"team[:10] # 10 teams","d503f8a2":"%%time\nbarcelone = top_team(team=team[0], data=data)","ef667140":"barcelone # team that are similar with FC Barcelone","c3533acb":"juve = top_team(team[1], data=data)","155475c8":"juve","d17b242e":"psg =  top_team(team[2], data=data)","9149a144":"psg","2d1c80d6":"dteam = data[data.team == team[2]]","a9248eb3":"dteam = dteam.sort_values(by='potential', ascending=False)","204c5075":"dteam.head()","bbcfbb40":"mostSimilar(player=dteam.name.iloc[0], data=data, club=psg).T # the players that are similar with Mbapp\u00e9","e139657b":"league = data.pivot_table(index='team', columns='nationality', values='potential').reset_index()","2ca837c8":"league.tail()","d5d19b56":"corr = league.corr()","e05b490d":"plt.figure(dpi=200, figsize=(10,10))\nsns.heatmap(corr)\nplt.show()","a4c94099":"def topMatch(name=None, data=None, n=10):\n    df = data[name].drop(index=name).sort_values(ascending=False)[:n]\n    return df","04628e21":"def getRecommendation(team=None, data = league):\n    \"\"\"\n        This function give a recommendation for different nationalities to team\n    \"\"\"\n    \n    bara = data[data.team == team] # take interested team\n    \n    #take items(nationality) that team have not seen\n    ncol = list(bara.isnull().sum()[bara.isnull().sum()>0].index)\n    \n    # take items that team have seen\n    col_taken = list(bara.isnull().sum()[bara.isnull().sum()==0].index) \n    \n    # remove team not neccesary\n    col_taken = list(set(col_taken) - set(['team'])) \n    \n    #take correlation matrix for col_taken\n    C = corr[corr.index.isin(col_taken)]\n    \n    mc = C[ncol] # take also correlation matrix for ncol\n    mc = mc[mc>0] # positive coef. correlation\n    \n    # sum all coef. corr for each unknown nationality by interested team\n    total = pd.DataFrame(mc.sum(axis=0), columns=['sum'])\n    \n    #take columns in total that have not null coef. corr.\n    ntotal = total[total['sum'] > 0].T \n    \n    # take data that match for product matrix\n    cm = mc[ntotal.columns] # cm have not null value\n    \n    #take potential data\n    potential = bara[col_taken]\n    \n    #sort index for potential index\n    potential = potential.sort_index(axis=1)  \n    \n    #sort index for cm index\n    cm = cm.sort_index() \n    \n    # compute the weighted matrix for nationality that have not seen by interested team\n    result = {}\n    for u in cm.columns:\n    \n        cls = cm[u].dropna().index # remove a nan value after taking a index.\n    \n        result[u] = np.dot(potential[cls].values, cm[u].dropna().values)[0] # \n        \n    \n    # compute recommendation nationality for team\n    recommendation = {}\n    for u in result.keys():\n        recommendation[u] = round(result[u] \/ ntotal[u].values[0], 3)\n        \n    print('Recommended players for {}:'.format(team))\n        \n    return pd.DataFrame({team: recommendation}).sort_values(by=team, ascending=False)[:10]","92e55dbd":"rc = getRecommendation(team='Manchester City ') ","b3c13fec":"recommended_players = data[data.nationality.isin(rc.index)]","8e338dee":"recommended_players.sort_values(by='potential', ascending=False)[:10]","14d514b2":"fifa21 = football(data=data, cols=['age', 'overall', 'hits'])","26ce3c49":"fifa21.learner_selection()","838a078d":"fifa21.training_evaluate(XGBRegressor())","79d57e40":"# UpNext","2da6474b":"## Similar team\n\nWe look for a similar team.","18291cbd":"**overall and potential have an outlier due to some player have huge an overall and also some players like Neymar, Christiano Ronaldo, Kylian MBapp\u00e9, Messi, etc.. have huge potential; they are big stars**\n\n**Also age have an outlier due to 3 players that are not tired after 40 years old** ","f69e3485":"# Team recommender\n\nIn this section, we are going to make team recommender for each team. After that, team can scout which player in that different countries recommended.\n\nitems is nationality because team have different countries.","78bc57d4":"**Our XGBoostRegression model give us a result $R^2$ = 92.9\\%.** No Bad.","6c874ec0":"# FIFA 2021 Machine Learning\n\nIn this notebook, we are taking about:\n\n> EDA\n\n> team and player similarities\n\n> team recommender\n\n> regression\n\n> miscellaneous\n\nLet's go","af7483ea":"# Team & Player similarities","702a12b0":"**England are more represented in fifa 21. Because fifa have all leagues such that Football league 2, Football league 1, FL championship and Barclays PL.**","3b1c37a4":"## Similar player\n\nWe look for similar player","85df5677":"# Regression\n\nCan we predict a potential of some players knowing these features **age, hits, overall**?\n\nWe are going to answers this question.","cb8e7fa5":"**likelihood of overall, age  and potential are almost sure exact with a data.**"}}