{"cell_type":{"a795f8d1":"code","64dd4e58":"code","17a5b1ad":"code","07ca5c3e":"code","3031244c":"code","d4e714b8":"code","fde93821":"code","7c31b547":"code","638527f5":"code","c1d9083b":"code","8fcb4f65":"code","a8b36ef0":"code","759bf521":"code","cf9ef52e":"code","49cae593":"code","cd339062":"code","d4f0ec90":"code","56321b72":"code","1e9f02d1":"code","a8033d3b":"code","2c59f686":"code","dcaf70ba":"code","57b43ec0":"code","1205bbcb":"code","518b00c6":"code","83d067dc":"markdown","e6db75e6":"markdown","b055f7b1":"markdown","e9fb7f6c":"markdown"},"source":{"a795f8d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","64dd4e58":"df = pd.read_csv('\/kaggle\/input\/stop-words-in-28-languages\/hindi.txt')\ndf","17a5b1ad":"#Codes by Ragnar https:\/\/www.kaggle.com\/rowhitswami\/starter-load-stopwords\n\ndef get_stopwords_list(stop_file_path):\n    \"\"\"load stop words \"\"\"\n    \n    with open(stop_file_path, 'r', encoding=\"utf-8\") as f:\n        stopwords = f.readlines()\n        stop_set = set(m.strip() for m in stopwords)\n        return list(frozenset(stop_set))","07ca5c3e":"stopwords_path = \"\/kaggle\/input\/stop-words-in-28-languages\/hindi.txt\"\nstopwords = get_stopwords_list(stopwords_path)","3031244c":"stopwords[0:10]","d4e714b8":"print(f\"Total number of stopwords: {len(stopwords)}\")","fde93821":"from gensim.models import Word2Vec\nimport gensim","7c31b547":"corpus = [' \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u094d\u092f\u0915\u094d\u0924\u093f \u0915\u094b \u0936\u093f\u0915\u094d\u0937\u093e \u0915\u093e \u0905\u0927\u093f\u0915\u093e\u0930 \u0939\u0948', '\u0936\u093f\u0915\u094d\u0937\u093e \u0915\u092e \u0938\u0947 \u0915\u092e \u092a\u094d\u0930\u093e\u0930\u092e\u094d\u092d\u093f\u0915 \u0914\u0930 \u092c\u0941\u0928\u093f\u092f\u093e\u0926\u0940 \u0905\u0935\u0938\u094d\u0925\u093e\u0913\u0902 \u092e\u0947\u0902 \u0928\u093f\u0903\u0936\u0941\u0932\u094d\u0915 \u0939\u094b\u0917\u0940', ' \u092a\u094d\u0930\u093e\u0930\u092e\u094d\u092d\u093f\u0915 \u0936\u093f\u0915\u094d\u0937\u093e \u0905\u0928\u093f\u0935\u093e\u0930\u094d\u092f \u0939\u094b\u0917\u0940 \u0964 \u091f\u0947\u0915\u094d\u0928\u093f\u0915\u0932']","638527f5":"stop_words = ['\u090f\u0915', '\u0926\u0942\u0938\u0930\u0947', '\u0928\u0939\u0940\u0902', '\u092a\u0942\u0930\u093e', '\u0935', '\u0935\u0947', '\u0932\u093f\u092f\u0947', '\u0915\u094b\u0908', '\u0935\u0939\u093e\u0901', '\u0909\u0938\u0940']","c1d9083b":"def remove_stop_words(corpus):\n    results = []\n    for text in corpus:\n        tmp = text.split(' ')\n        for stop_word in stop_words:\n            if stop_word in tmp:\n                tmp.remove(stop_word)\n        results.append(\" \".join(tmp))\n        \n    return results","8fcb4f65":"corpus = remove_stop_words(corpus)","a8b36ef0":"words = []\nfor text in corpus:\n    for word in text.split(' '):\n        words.append(word)\n        \nwords = set(words)","759bf521":"words","cf9ef52e":"\"\"\"Data Generation\"\"\"\n\nword2int = {}\n\nfor i,word in enumerate(words):\n    word2int[word] = i\n    \nsentences = []\nfor sentence in corpus:\n    sentences.append(sentence.split())\n    \nWINDOW_SIZE = 2\n\ndata = []\nfor sentence in sentences:\n    for idx, word in enumerate(sentence):\n        for neighbor in sentence[max(idx - WINDOW_SIZE, 0): min(idx + WINDOW_SIZE, len(sentence) + 1)]:\n            if neighbor !=word:\n                data.append([word, neighbor])","49cae593":"for text in corpus:\n    print(text)\n\ndf = pd.DataFrame(data, columns = ['input', 'label'])","cd339062":"df.head(10)","d4f0ec90":"df.shape","56321b72":"word2int","1e9f02d1":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()\nx = tf.placeholder(shape=[None, 2], dtype=tf.float32)","a8033d3b":"\"\"\"Define Tensorflow Graph\"\"\"\n\nONE_HOT_DIM = len(words)\n\n# function to convert numbers to one hot vectors\ndef to_one_hot_encoding(data_point_index):\n    one_hot_encoding = np.zeros(ONE_HOT_DIM)\n    one_hot_encoding[data_point_index] = 1\n    return one_hot_encoding\n\nX = [] # input word\nY = [] # target word\n\nfor x, y in zip(df['input'], df['label']):\n    X.append(to_one_hot_encoding(word2int[ x ]))\n    Y.append(to_one_hot_encoding(word2int[ y ]))\n\n# convert them to numpy arrays\nX_train = np.asarray(X)\nY_train = np.asarray(Y)\n\n# making placeholders for X_train and Y_train\nx = tf.placeholder(tf.float32, shape=(None, ONE_HOT_DIM))\ny_label = tf.placeholder(tf.float32, shape=(None, ONE_HOT_DIM))\n\n# word embedding will be 2 dimension for 2d visualization\nEMBEDDING_DIM = 2 \n\n# hidden layer: which represents word vector eventually\nW1 = tf.Variable(tf.random_normal([ONE_HOT_DIM, EMBEDDING_DIM]))\nb1 = tf.Variable(tf.random_normal([1])) #bias\nhidden_layer = tf.add(tf.matmul(x,W1), b1)\n\n# output layer\nW2 = tf.Variable(tf.random_normal([EMBEDDING_DIM, ONE_HOT_DIM]))\nb2 = tf.Variable(tf.random_normal([1]))\nprediction = tf.nn.softmax(tf.add( tf.matmul(hidden_layer, W2), b2))\n\n# loss function: cross entropy\nloss = tf.reduce_mean(-tf.reduce_sum(y_label * tf.log(prediction), axis=[1]))\n\n# training operation\ntrain_op = tf.train.GradientDescentOptimizer(0.05).minimize(loss)","2c59f686":"\"\"\"Training\"\"\"\n\nsess = tf.Session()\ninit = tf.global_variables_initializer()\nsess.run(init) \n\niteration = 20000\nfor i in range(iteration):\n    # input is X_train which is one hot encoded word\n    # label is Y_train which is one hot encoded neighbor word\n    sess.run(train_op, feed_dict={x: X_train, y_label: Y_train})\n    if i % 3000 == 0:\n        print('iteration '+str(i)+' loss is : ', sess.run(loss, feed_dict={x: X_train, y_label: Y_train}))","dcaf70ba":"# Now the hidden layer (W1 + b1) is actually the word look up table\nvectors = sess.run(W1 + b1)\nprint(vectors)","57b43ec0":"\"\"\"Word Vector in Table\"\"\"\n\nw2v_df = pd.DataFrame(vectors, columns = ['x1', 'x2'])\nw2v_df['word'] = words\nw2v_df = w2v_df[['word', 'x1', 'x2']]\nw2v_df","1205bbcb":"\"\"\"Word Vector in 2D Chart\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nfor word, x1, x2 in zip(w2v_df['word'], w2v_df['x1'], w2v_df['x2']):\n    ax.annotate(word, (x1,x2 ))\n    \nPADDING = 1.0\nx_axis_min = np.amin(vectors, axis=0)[0] - PADDING\ny_axis_min = np.amin(vectors, axis=0)[1] - PADDING\nx_axis_max = np.amax(vectors, axis=0)[0] + PADDING\ny_axis_max = np.amax(vectors, axis=0)[1] + PADDING\n \nplt.xlim(x_axis_min,x_axis_max)\nplt.ylim(y_axis_min,y_axis_max)\nplt.rcParams[\"figure.figsize\"] = (20,20)\n\nplt.show()","518b00c6":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml(' \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u0935\u094d\u092f\u0915\u094d\u0924\u093f \u0915\u094b \u0915\u093f\u0938\u0940 \u092d\u0940 \u0910\u0938\u0940 \u0935\u0948\u091c\u094d\u091e\u093e\u0928\u093f\u0915, \u0938\u093e\u0939\u093f\u0924\u094d\u092f\u093f\u0915 \u092f\u093e \u0915\u0932\u093e\u0938\u094d\u092e\u0915 \u0915\u0943\u0924\u093f \u092e\u0947 \u0909\u0924\u094d\u092a\u0928\u094d\u0928 \u0928\u0948\u0924\u093f\u0915 \u0914\u0930 \u0906\u0930\u094d\u0925\u093f\u0915 \u0939\u093f\u0924\u094b\u0902 \u0915\u0940 \u0930\u0915\u094d\u0937\u093e \u0915\u093e \u0905\u0927\u093f\u0915\u093e\u0930 \u0939\u0948 \u091c\u093f\u0938\u0915\u093e \u0930\u091a\u092f\u093f\u0924\u093e \u0935\u0939 \u0938\u094d\u0935\u092f\u0902 \u0939\u094b , @mpwolke was here' )","83d067dc":"#Text by http:\/\/mylanguages.org\/hindi_reading.php","e6db75e6":"#I hope to learn how to plot Hindi Font. ","b055f7b1":"![](https:\/\/content.iospress.com\/media\/ifs\/2019\/36-3\/ifs-36-3-ifs169933\/ifs-36-ifs169933-g013.jpg?width=755)content.iospress.com","e9fb7f6c":"#Codes by Anil Govind https:\/\/www.kaggle.com\/anilreddy8989\/stopwords-word2vector"}}