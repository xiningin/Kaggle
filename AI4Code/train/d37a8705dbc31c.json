{"cell_type":{"9528f8c3":"code","2b2bc800":"code","5e7574e7":"code","dd7d5415":"code","ef3cc9fb":"code","3bca0799":"code","4a6b6a22":"code","0c4f6318":"code","98b547b7":"code","82838a65":"code","f87b20a5":"code","532032b1":"code","a88e599d":"code","a7fd3c14":"code","0a33a60c":"code","b225dfc2":"code","cf85fc2d":"code","0cbf9bea":"code","10b12705":"code","07f2fe3a":"markdown","ea77bc8d":"markdown","8ed8f153":"markdown","b9e5b2ed":"markdown","4a5db045":"markdown","775916c7":"markdown","10856fa1":"markdown","f95732a0":"markdown","aaefe425":"markdown"},"source":{"9528f8c3":"import warnings\nwarnings.filterwarnings(\"ignore\")","2b2bc800":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #graphs and visualizations \nimport tensorflow as tf\nfrom keras.models import Sequential #keras model initialization\nfrom keras.layers import LSTM #Long Short Term Memory \nfrom keras.layers import Dense # fully connected layer\nfrom keras.layers import Flatten \nfrom sklearn.metrics import mean_squared_error, r2_score # scoring","5e7574e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd7d5415":"# preparing independent and dependent features\ndef prepare_data(data, n_features):\n    X, y =[],[]\n    for i in range(len(data)):\n        # find the end of this pattern\n        end_ix = i + n_features\n        # check if we are beyond the sequence\n        if end_ix > len(data)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = data[i:end_ix], data[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)\n","ef3cc9fb":"# define input sequence\ndata = pd.read_csv(\"\/kaggle\/input\/euro-and-usd-stocks-data-2007-2021\/NewDataEntire.csv\", index_col=[0])\ntrain = data[ : int(len(data) * .8)]\nvalid = data[int(len(data) * .8) : ]\n# choose a number of time steps\nn_steps = 60\n# split into samples\nX_train, y_train = prepare_data(train.values, n_steps)\nX_test, y_test = prepare_data(valid.values, n_steps)","3bca0799":"X_train.shape , X_test.shape","4a6b6a22":"# reshape from [samples, timesteps] into [samples, timesteps, features]\nn_features = 1\nX_train = X_train.reshape((X_train.shape[0], X_train.shape[1], n_features))\nX_test = X_test.reshape((X_test.shape[0], X_test.shape[1], n_features))","0c4f6318":"X_train.shape , X_test.shape","98b547b7":"#The coefficient R^2 is defined as (1 - u\/v).\n#where u is the regression sum of squares ((y_true - y_pred) ** 2).sum() and v is the residual sum of squares ((y_true - y_true.mean()) ** 2).sum().\n\ndef coeff_determination(y_true, y_pred):\n    from keras import backend as K\n    SS_res =  K.sum(K.square( y_true-y_pred ))\n    SS_tot = K.sum(K.square( y_true - K.mean(y_true) ) )\n    return ( 1 - SS_res\/(SS_tot + K.epsilon()) )","82838a65":"# define model\nmodel = Sequential()\nmodel.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(n_steps, n_features)))\nmodel.add(LSTM(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse',metrics=[coeff_determination])\n# fit model\nhistory = model.fit(X_train, y_train, epochs=3, verbose=1,validation_data=(X_test,y_test))","f87b20a5":"# summarize history for accuracy\nplt.plot(history.history['coeff_determination'])\nplt.plot(history.history['val_coeff_determination'])\nplt.title('model sum of squares accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","532032b1":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","a88e599d":"# Save The Data & the model\n\n# X_train.to_csv('X_train.csv', index=False)\n# y_train.to_csv('y_train.csv', index=False)\n# X_test.to_csv('X_test.csv', index=False)\n# y_test.to_csv('y_test.csv', index=False)\n#model.save(\"my_model_3\")","a7fd3c14":"score_train = model.evaluate(X_train, y_train, verbose=1)\nscore_test = model.evaluate(X_test, y_test, verbose=1)\nscore_train[0], score_test[0]","0a33a60c":"y_train_pred = model.predict(X_train, verbose=0)\ny_test_pred = model.predict(X_test, verbose=0)","b225dfc2":"mean_squared_error(y_train,y_train_pred), mean_squared_error(y_test,y_test_pred)","cf85fc2d":"r2_score(y_train,y_train_pred), r2_score(y_test,y_test_pred)","0cbf9bea":"plt.figure(figsize=(15,10))\nplt.plot(range(len(y_train_pred)),y_train_pred, '-r', label=\"Prediction\")\nplt.plot(range(len(y_train)),y_train, '-b', label=\"Real\")\nplt.legend(loc=\"upper right\")\nplt.title('Pedictions vs Real in Test Data')\nplt.show()","10b12705":"plt.figure(figsize=(15,10))\nplt.plot(range(len(y_test_pred)),y_test_pred, '-r', label=\"Prediction\")\nplt.plot(range(len(y_test)),y_test, '-b', label=\"Real\")\nplt.legend(loc=\"upper right\")\nplt.title('Pedictions vs Real in Test Data')\nplt.show()","07f2fe3a":"## Evaluating the Model","ea77bc8d":"## Ignore Warnings","8ed8f153":"## Prepare Our Data","b9e5b2ed":"## Prepare & Split our Data","4a5db045":"## Test the shape again","775916c7":"## Plotting Predictions vs Real Data","10856fa1":"## Import Needed Libraries","f95732a0":"## Building LSTM Model","aaefe425":"## Test the shape"}}