{"cell_type":{"a22fa8bf":"code","b2047d3c":"code","be1d9755":"code","8cb0056c":"code","e4225744":"code","f9517ab9":"code","2037936a":"code","076b3ad9":"code","7d16fd85":"code","6ff864ed":"code","f75e715f":"code","a9f1968f":"code","e7027f4b":"code","93621495":"code","980678b1":"code","32269692":"code","ac96766c":"markdown","3993b0c2":"markdown","22f73916":"markdown","1e81beb0":"markdown","57bde84d":"markdown","724b1bb6":"markdown","8ec92b8c":"markdown","96b4e23d":"markdown","3cf6e07e":"markdown"},"source":{"a22fa8bf":"# Import libraries\nimport numpy as np, matplotlib as mpl, matplotlib.pyplot as plt, pandas as pd\nimport seaborn as sns, math, os, warnings \nwarnings.filterwarnings('ignore')\n# Get file's directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b2047d3c":"# Import data\ndf_data = pd.read_csv('\/kaggle\/input\/customer-retention\/data.csv')\ndf_model = df_data.copy()","be1d9755":"# Let's take a look at our data\ndf_model.head(5)","8cb0056c":"# Checking for null data\ndf_model.info()","e4225744":"# Checking for object data\ndf_model.describe(include=np.object)","f9517ab9":"# Checking unique object data\nobject_cols = [col for col in df_model.columns if df_model[col].dtype == \"object\"]\nfor obj in object_cols:\n    print('\\n', obj)\n    for unique in df_model[obj].unique():\n        print(\"{} {}\".format(unique,sum(df_model[obj] == unique)))","2037936a":"# Rename target column\ndf_model = df_model.rename(columns={'conversion': 'target'})\n# Rename & Label encode treatment column\ndf_model = df_model.rename(columns={'offer': 'treatment'})\ndf_model.treatment = df_model.treatment.map({'No Offer': 0, 'Buy One Get One': -1, 'Discount': 1})","076b3ad9":"# One-Hot Encoding:\ndf_model = pd.get_dummies(df_model)","7d16fd85":"# Split data with bogo and discount\ndf_model_bogo = df_model.copy().loc[df_model.treatment <=0].reset_index(drop=True)\ndf_model_discount = df_model.copy().loc[df_model.treatment >=0].reset_index(drop=True)","6ff864ed":"# Function to declare Target Class\ndef declare_tc(df:pd.DataFrame):\n    \"\"\"Declare target class\n    \"\"\"\n    #CN:\n    df['target_class'] = 0 \n    #CR:\n    df.loc[(df.treatment == 0) & (df.target != 0),'target_class'] = 1 \n    #TN:\n    df.loc[(df.treatment != 0) & (df.target == 0),'target_class'] = 2 \n    #TR:\n    df.loc[(df.treatment != 0) & (df.target != 0),'target_class'] = 3 \n    return df","f75e715f":"# run the functions for each treatment\ndf_model_bogo = declare_tc(df_model_bogo)\ndf_model_discount = declare_tc(df_model_discount)","a9f1968f":"# Functions for Uplift\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\ndef uplift_split(df_model:pd.DataFrame):\n    \"\"\"Train-Test Split\n    \"\"\"\n    X = df_model.drop(['target','target_class'],axis=1)\n    y = df_model.target_class\n    X_train, X_test, \\\n    y_train, y_test  = train_test_split(X,\n                                       y,\n                                       test_size=0.3,\n                                       random_state=42,\n                                       stratify=df_model['treatment'])\n    return X_train,X_test, y_train, y_test\n\n\ndef uplift_model(X_train:pd.DataFrame,\n                 X_test:pd.DataFrame,\n                 y_train:pd.DataFrame,\n                 y_test:pd.DataFrame):\n    \"\"\"Using XGB to get the uplift score\n    \"\"\"\n    # Create new dataframe\n    result = pd.DataFrame(X_test).copy()    \n    # Fit the model\n    uplift_model \\\n    = xgb.XGBClassifier().fit(X_train.drop('treatment', axis=1), y_train)\n    \n    \n    # Predict using test-data\n    uplift_proba \\\n    = uplift_model.predict_proba(X_test.drop('treatment', axis=1))\n    result['proba_CN'] = uplift_proba[:,0] \n    result['proba_CR'] = uplift_proba[:,1] \n    result['proba_TN'] = uplift_proba[:,2] \n    result['proba_TR'] = uplift_proba[:,3]\n    result['uplift_score'] = result.eval('\\\n    proba_CN\/(proba_CN+proba_CR) \\\n    + proba_TR\/(proba_TN+proba_TR) \\\n    - proba_TN\/(proba_TN+proba_TR) \\\n    - proba_CR\/(proba_CN+proba_CR)')  \n    # Put the result \n    result['target_class'] = y_test\n    return result\n\n\ndef uplift(df_model:pd.DataFrame):\n    \"\"\"Combine the split and Modeling function\n    \"\"\"\n    X_train, X_test, y_train, y_test = uplift_split(df_model)\n    result = uplift_model(X_train, X_test, y_train, y_test)\n    return result","e7027f4b":"# Run the uplift function\nbogo_uplift = uplift(df_model_bogo)\ndiscount_uplift = uplift(df_model_discount)","93621495":"# Functions to build the Uplift model and visualize the QINI Curve\ndef qini_rank(uplift:pd.DataFrame):\n    \"\"\"Rank the data by the uplift score\n    \"\"\"\n    # Creat new dataframe\n    ranked = pd.DataFrame({'n':[], 'target_class':[]})\n    ranked['target_class'] = uplift['target_class']\n    ranked['uplift_score'] = uplift['uplift_score']\n    \n    \n    # Add proportion\n    ranked['n'] = ranked.uplift_score.rank(pct=True, ascending=False)\n    # Data Ranking   \n    ranked = ranked.sort_values(by='n').reset_index(drop=True)\n    return ranked\n\n\ndef qini_eval(ranked:pd.DataFrame):\n    \"\"\"Evaluate the uplift value with the QINI criterion\n    \"\"\"\n    uplift_model, random_model = ranked.copy(), ranked.copy()\n    # Using Treatment and Control Group to calculate the uplift (Incremental gain)\n    C, T = sum(ranked['target_class'] <= 1), sum(ranked['target_class'] >= 2)\n    ranked['cr'] = 0\n    ranked['tr'] = 0\n    ranked.loc[ranked.target_class == 1,'cr'] = 1\n    ranked.loc[ranked.target_class == 3,'tr'] = 1\n    ranked['cr\/c'] = ranked.cr.cumsum() \/ C\n    ranked['tr\/t'] = ranked.tr.cumsum() \/ T\n    # Calculate and put the uplift and random value into dataframe\n    uplift_model['uplift'] = round(ranked['tr\/t'] - ranked['cr\/c'],5)\n    random_model['uplift'] = round(ranked['n'] * uplift_model['uplift'].iloc[-1],5)\n    \n    \n    # Add q0\n    q0 = pd.DataFrame({'n':0, 'uplift':0, 'target_class': None}, index =[0])\n    uplift_model = pd.concat([q0, uplift_model]).reset_index(drop = True)\n    random_model = pd.concat([q0, random_model]).reset_index(drop = True)  \n    # Add model name & concat\n    uplift_model['model'] = 'Uplift model'\n    random_model['model'] = 'Random model'\n    merged = pd.concat([uplift_model, random_model]).sort_values(by='n').reset_index(drop = True)\n    return merged\n\n\ndef qini_plot(merged:pd.DataFrame):\n    \"\"\"Plot the QINI\n    \"\"\"\n    # plot the data\n    ax = sns.lineplot(x='n', y='uplift', hue='model', data=merged,\n                      style='model', palette=['red','grey'])\n    \n    \n    # Plot settings\n    sns.set_style('whitegrid')\n    handles, labels = ax.get_legend_handles_labels()\n    plt.xlabel('Proportion targeted',fontsize=15)\n    plt.ylabel('Uplift',fontsize=15)\n    plt.subplots_adjust(right=1)\n    plt.subplots_adjust(top=1)\n    plt.legend(fontsize=12)\n    ax.tick_params(labelsize=15)\n    ax.legend(handles=handles[1:], labels=labels[1:], loc='upper right')\n    return ax\n\n\ndef qini(uplift:pd.DataFrame):\n    \"\"\"Combine all functions\n    \"\"\"\n    ranked = qini_rank(uplift)\n    merged = qini_eval(ranked)\n    ax = qini_plot(merged)\n    return ax","980678b1":"# plot the Qini curve for BOGO treatment\nqini(bogo_uplift)\nplt.title('Qini Curve - Buy One Get One',fontsize=20)","32269692":"# plot the Qini curve for Discount treatment\nqini(discount_uplift)\nplt.title('Qini Curve - Discount',fontsize=20)","ac96766c":"## Data Preprocessing","3993b0c2":"Good, there is no null data in this dataset","22f73916":"# Data Exploration","1e81beb0":"## Target Class Declaration\n* <h3> Control Non-Responders(CN) <\/h3>\nCustomers that don't make a purchase without an offer (value = 0) \n* <h3> Control Responders(CR) <\/h3>\nCustomers that make a purchase without an offer  (value = 1) \n* <h3> Treatment Non-Responders(TN) <\/h3>\nCustomer that don't make a purchase and receive an offer  (value = 2) \n* <h3> Treatment Responders(TR) <\/h3>\nCustomers that make a purchase and receive an offer (value = 3) ","57bde84d":"## Uplift Modeling\nThe Uplift model in this notebook use Lai\u2019s Generalized Weighed Uplift (LGWUM) to calculate the uplift score.\n<br>LGWUM is one of [several strategies or methods](https:\/\/www.worldscientific.com\/doi\/abs\/10.1142\/S0219622019500172) available for Uplift Modeling, that was introduced in [2002 by Lo](https:\/\/dl.acm.org\/doi\/abs\/10.1145\/772862.772872). Where P Denotes a Probabilty Score, T denotes the total treated population (TR + TN), and C denotes the total untreated population (CR + CN).\nThus, Uplift Score can be calculated as:\n> **Uplift Score = P(TR)\/P(T) + P(CN)\/P(C) - P(TN)\/P(T) - P(CR)\/P(C)**\n\nMoreover, XGBoost classifier will be used to build the model in this notebook.","724b1bb6":"# Uplift Modeling to predict and target the right customers\n![](https:\/\/st2.ning.com\/topology\/rest\/1.0\/file\/get\/2220280883?profile=original)\n[Uplift modelling](https:\/\/en.wikipedia.org\/wiki\/Uplift_modelling), also known as incremental modelling, true lift modelling, or net modelling is a predictive modelling technique that directly models the incremental impact of a treatment (such as a direct marketing action) on an individual's behaviour.","8ec92b8c":"# Evaluation - QINI Curve\nQini is a generalization of gini curve for Uplift model, introduced by [Radcliffe](https:\/\/www.google.com\/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwj_lZbfkNHoAhU_8XMBHYMBBUAQFjAAegQICBAC&url=https%3A%2F%2Fwww.semanticscholar.org%2Fpaper%2FUsing-control-groups-to-target-on-predicted-lift%253A-Radcliffe%2F147b32f3d56566c8654a9999c5477dded233328e&usg=AOvVaw3FuLoBYIejr_plj6oAE27o). The QINI (Uplift value) can be calculated as: \n> **QINI = TR - [(CR*T)\/C]**\n\nThus can be normalized in percentage as: \n> **QINI = (TR\/T) - (CR\/C)**","96b4e23d":"# Setup","3cf6e07e":"# Result\nThe QINI curve as shown below visualize the performance of Uplift model in targeting the right customers from the test-data.\nThe results show that the Uplift model can give more uplift than random model (without model)."}}