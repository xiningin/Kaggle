{"cell_type":{"1719c7c7":"code","059e06e9":"code","0824f239":"code","fafb0d95":"code","91540a20":"code","12b41a46":"code","b7ef0eac":"code","b2062bba":"code","1fdbc042":"code","57e37711":"code","3d311cda":"code","88db412f":"code","fd648c77":"code","85e162e4":"code","bb0164c9":"code","350302c4":"markdown","1399007d":"markdown","f09cdd3d":"markdown","bb163407":"markdown","22a5a8a2":"markdown","2aa1341c":"markdown","12778f36":"markdown","020d09b5":"markdown","7ec4343e":"markdown","f539a1ca":"markdown","eb4f6371":"markdown"},"source":{"1719c7c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","059e06e9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom wordcloud import WordCloud\n%matplotlib inline","0824f239":"df = pd.read_csv('\/kaggle\/input\/a-visual-history-of-nobel-prize-winners-dataset\/nobel.csv')\ndf.head()","fafb0d95":"df.tail()","91540a20":"df.info()","12b41a46":"def percentage_teller(DF):\n    for column in DF.columns:\n        null_values = DF[column].isnull().sum()\n        total_values = df.shape[0]\n        percent = (null_values\/ total_values)*100\n        print(\"In {0} column {1:.2f} % values are null\".format(column, percent))\npercentage_teller(df) ","b7ef0eac":"df.drop(['death_date', 'death_city', 'death_country', 'laureate_id', 'organization_name', 'organization_city']\n        , axis = 1, inplace = True)","b2062bba":"def auto_label(graph):\n    for bar in graph.patches:\n        height = bar.get_height()\n        plt.annotate(height,\n        xy = (bar.get_x() + bar.get_width()\/2, height),\n        xytext = (0, 3),\n        textcoords=\"offset points\", va = 'bottom', ha = 'center')","1fdbc042":"plt.figure(figsize = (7, 6))\nGraph1 = sns.countplot(df['category'])\nauto_label(Graph1)","57e37711":"df['birth_country'].unique()","3d311cda":"countries = df['birth_country'].copy()\ncountries.replace({'United States of America':'USA', 'United Kingdom': 'UK'}, inplace = True)\ncountries.dropna(inplace = True)\ncountries = countries.str.strip()\n\nCOUNTRIES = list()\n\ndef remove_bracket(Countries):\n    for i in countries:\n        if i.endswith(')'):\n            i = i.split(' ')[-1]\n            n = len(i)\n            COUNTRIES.append(i[1:n-1])\n        else:\n            COUNTRIES.append(i)\n            \n            \nremove_bracket(countries)\n","88db412f":"text = \" \".join(country for country in COUNTRIES)\n\nwc = WordCloud()\nwc.generate(text)\n\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.margins(x = 0, y = 0)\nplt.show()","fd648c77":"country = pd.Series(COUNTRIES)\ntop_10_country = country.value_counts().nlargest(10).index\nnobel = country.value_counts().nlargest(10).values\nwith plt.style.context('fivethirtyeight'):\n    graph2 = plt.barh(top_10_country[::-1], nobel[::-1])\n    for i in graph2:\n        width = i.get_width()\n        plt.annotate(width, xy = (width, i.get_y() + i.get_height()\/2),\n                     xytext = (0, 6),\n                     textcoords = 'offset points', va = 'top')","85e162e4":"Female = (df['sex'].value_counts()['Female'] \/ df['sex'].value_counts().sum()) * 100\nMale = 100 - Female\n\nplt.pie([Male, Female], labels = ['Male', 'Female'], shadow = True, wedgeprops={'edgecolor': 'black'},\n       autopct='%1.1f%%')","bb0164c9":"year = df['year'] - pd.DatetimeIndex(df['birth_date']).year\nage_young = year.nsmallest(5).astype('int64')\nname_young = df.iloc[[885, 85, 166, 171, 189], 6]\nyoungest = pd.concat([name_young, age_young], axis = 1).reset_index().drop(columns = 'index')\nyoungest.rename(columns = {0:'age', 'full_name':'Name'})","350302c4":"![image.png](attachment:image.png)","1399007d":"In the above dataframe column *age* represents their age when they got Nobel prize.\n\nThis dataset is quite old so it doesn't contain record after 2016.\nIn 2018 **Nadia Murad** got Nobel prize and becomes 3rd Youngest Nobel Prize Winner at the age of 25. ","f09cdd3d":"By seeing above two figure we can see the dominance of **USA**  with 259 Nobel Prizes upto 2016.","bb163407":"If u like this notebook then don't forget to give **UPVOTE** and your suggestion are valuable for me.","22a5a8a2":"The columns **'death_date',  'death_city',  'death_country'** have considerable amount of null values ,so, i am droping these columns along with other columns **('laureate_id', 'organization_name', 'organization_city')** which are not relatable to further analysis.","2aa1341c":"**Reading The DataSet**","12778f36":"The Category **Medicine** got more Nobel prize compare to other categories.","020d09b5":"The above Pie graph shows Share of Male and Female in winning Nobel prize.","7ec4343e":"**Top 5 Youngest People to Win Nobel Prize.**","f539a1ca":"We can see that most of the countries have two names, old names and new names . so i am intrested in new names , so below code will fetch new names which are in brackets **()**. And i am going to replace *'United States of America to USA and United Kingdom to UK'* because of their large length.","eb4f6371":"**This DataSet contains record upto 2016 only**"}}