{"cell_type":{"f8458c5f":"code","975f19a5":"code","1296d13b":"code","7a4671b7":"code","6b7b109b":"code","8464c276":"code","d035c736":"code","e1882f6b":"code","9ace5f6f":"code","a1a3a821":"code","fa5987fb":"code","014685b6":"code","3cde5ec1":"code","939b481e":"code","091c4cd4":"code","d5b58c64":"code","dac4f067":"code","86e0f069":"code","d4b6bb29":"code","48063606":"code","0ec031c1":"code","b1704cc1":"code","374e6961":"code","b30f4984":"code","362bb30a":"code","be7be605":"code","934d9a5e":"code","fef2939f":"markdown","e01b1c9f":"markdown","d85fb8b5":"markdown","e1fd9996":"markdown","99104604":"markdown","09f4c599":"markdown","ea28fbfc":"markdown"},"source":{"f8458c5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","975f19a5":"df=pd.read_csv(\"..\/input\/corona.csv\")\ndf.head()","1296d13b":"df.isnull().sum()","7a4671b7":"df.info()","6b7b109b":"print(df.columns)","8464c276":"dff=df.iloc[0:-1,1:]\ndff","d035c736":"#Percentage of missing values\nround((dff.isnull().sum()\/len(dff))*100,1)","e1882f6b":"catcols=list(dff.select_dtypes(include=['object']).columns)\nprint(\"Categorical columns: \",catcols)","9ace5f6f":"numcols=list(dff.select_dtypes(exclude=['object']).columns)\nprint(\"Continuous columns: \\n\",numcols)","a1a3a821":"dff.fillna(0,inplace=True)\ndff.head()","fa5987fb":"dff.info()","014685b6":"print(\"Percentage of missing values: \")\nround((dff.isnull().sum()\/len(dff))*100,1)","3cde5ec1":"dff.rename(columns={\"Country,Other\":\"Country\"},inplace=True)\ndff.head()","939b481e":"dff.describe().T","091c4cd4":"# import chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\nimport cufflinks\nfrom plotly.offline import iplot","d5b58c64":"dff.sort_values(by=['TotalCases'],ascending=False,axis=0,inplace=True)\nd=dff.head()\nd","dac4f067":"import plotly.graph_objects as go\n\ncolors = ['lightslategray',] * 5\ncolors[0] = 'crimson'\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x=d[\"Country\"],\n    y=d.TotalDeaths,\n    \n    marker_color=colors,\n    text=df.TotalDeaths,\n    textposition='auto'\n))\nfig.update_layout(title_text='Top 5 Countries having Total no. of Deaths')\nfig.show()","86e0f069":"import matplotlib.patches as patches\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","d4b6bb29":"fig, ax = plt.subplots(figsize=(10,5), facecolor='white')\nax.vlines(x=d['Country'], ymin=0, ymax=d['TotalCases'], color='#7B68EE', alpha=0.9, linewidth=20)\n\n# Annotate Text\nfor i, cty in enumerate(d['TotalCases']):\n    ax.text(i, int(cty)+0.1, round(cty, 1), horizontalalignment='center')\n\n\n# Title, Label, Ticks and Ylim\nax.set_title('Bar Chart for Top 5 Countries having TotalCases', fontdict={'size':15})\nax.set(ylabel='Count')\nplt.xticks(d['Country'], d['Country'].str.upper(), rotation=0, horizontalalignment='center', fontsize=10)\n\n# Add patches to color the X axis labels\np1 = patches.Rectangle((.57, -0.005), width=.33, height=.13, alpha=.1, facecolor='green', transform=fig.transFigure)\np2 = patches.Rectangle((.124, -0.005), width=.446, height=.13, alpha=.1, facecolor='red', transform=fig.transFigure)\nfig.add_artist(p1)\nfig.add_artist(p2)\nplt.show()","48063606":"stdeaths=dff.sort_values(by=[\"TotalDeaths\"],axis=0,ascending=False)\nd=stdeaths[['Country','TotalDeaths']].values[0:9]\nd=pd.DataFrame(d)\nd=d.rename({'1':'count'},axis=1)\nd.set_index(0,inplace=True)\ndel d.index.name\nd.plot.bar(rot=60)\nplt.title('Top 10 Countries suffering with CORONA severely')\nprint(d)\nplt.legend('Deaths')\nplt.show()","0ec031c1":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x=dff[\"Country\"][dff.TotalCases>1000],\n    y=dff.TotalCases[dff.TotalCases>1000],\n    name='TotalCases',\n    marker_color='#FAA460',\n    text=df.TotalCases[df.TotalCases>1000],\n    textposition='auto'\n))\nfig.add_trace(go.Bar(\n    x=dff[\"Country\"][dff.TotalCases>1000],\n    y=dff[\"TotalRecovered\"][dff.TotalCases>1000],\n    name='TotalRecovered',\n    marker_color='#2ca02c',\n    text=dff.TotalRecovered[dff.TotalCases>1000],\n    textposition='auto'\n))\n\nfig.add_trace(go.Bar(\n    x=dff[\"Country\"][dff.TotalCases>1000],\n    y=dff.TotalDeaths[dff.TotalCases>1000],\n    name='TotalDeaths',\n    marker_color='#EF553B',\n    text=dff.TotalDeaths[dff.TotalCases>1000],\n    textposition='auto'\n))\nfig.update_layout(title_text='Corona virus TotalCase greater than 1000',xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='COUNT',\n        titlefont_size=16,\n        tickfont_size=14))\nfig.show()","b1704cc1":"d=dff[dff['TotalCases']<=100].Country.count()\nprint(\"The countries whose Total Cases are less than 100: \\n\")\nprint(list(dff[dff['TotalCases']<=100].Country))","374e6961":"dff[dff['Country']=='India']","b30f4984":"dff['Rank_Deaths']=dff[\"TotalDeaths\"].rank(ascending=False,method='dense',axis=0)\ndff.head()","362bb30a":"f=dff[dff['Country']=='India'].Rank_Deaths\nprint(\"The rank of INDIA in their Death Cases %d out of %d\" %(f,dff['Rank_Deaths'].max()))\n","be7be605":"print('The countries whose death rate is low: ')\nprint()\ng=dff[\"Country\"][dff[\"Rank_Deaths\"]==17]\nprint(list(g.unique()))","934d9a5e":"fig = go.Figure()\nfig.add_trace(go.Choropleth(\n        locationmode = 'country names',\n        locations = dff[\"Country\"],\n        z = dff.TotalCases,\n        text = dff[\"Country\"],\n        colorscale='sunset',\n        autocolorscale = False,\n        showscale = True,\n        geo = 'geo'\n    ))\nfig.update_layout(title_text='Corona virus affected countries')","fef2939f":"#### Those are null values not missing values, lets impute with 0","e01b1c9f":"### The countries whose Total Cases are less than 100","d85fb8b5":"### Gegraphical Representation of all Countries suffering with CORONA VIRUS","e1fd9996":"### The countries whose death rate is low","99104604":"### Countries Ranks in their Deaths","09f4c599":"### Top 10 Cities suffering with Corona Virus severely","ea28fbfc":"#### Data Imputation"}}