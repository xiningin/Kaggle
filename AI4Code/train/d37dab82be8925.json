{"cell_type":{"6b9bac54":"code","da327bbb":"code","674ebae3":"code","7dd48e27":"code","a7d2b122":"code","2976410b":"code","3a0bb007":"code","c8f4d24d":"code","4120131b":"code","6431657c":"code","1228e7f7":"code","076aa28d":"code","2347fa53":"code","f4202049":"code","66648260":"code","4b92492f":"code","eb143f95":"code","1b3ac533":"code","32c232b2":"code","6c5f2b5e":"code","e7ba6109":"code","937c8494":"code","adccc956":"code","a2381b42":"code","4fa7836e":"code","a1a426a9":"code","012c0231":"code","b4562786":"code","88610ab6":"code","cecd54df":"code","a4f1dbba":"code","57af4cdb":"code","82c8b950":"code","3fce81c8":"code","6f815f3b":"code","78273060":"code","bd5790a2":"code","0eaf53a3":"code","99f36ab9":"code","164952e5":"code","b219c7a0":"code","a443eb01":"code","488668e4":"code","44d23d67":"code","1f2a993f":"code","9f7abe13":"code","e276ddfb":"code","3361373f":"code","4cd5158a":"code","4361b1bc":"code","7319b3b7":"code","336c1ae4":"code","339e7105":"code","47401f27":"code","0ca3f9a4":"code","6d2e30c9":"code","a03da662":"code","69aef3e8":"code","340b91a6":"code","73ad5155":"code","cd77c44f":"code","4cb69867":"code","be2985ed":"code","2696f113":"code","865e1683":"code","0521d0cd":"code","03fbd0e5":"code","dd0922d1":"code","d004fa3f":"code","6b43f12a":"code","4571ab03":"code","7c6252dc":"code","58e5d109":"code","6bf546e8":"code","0eba4905":"code","5948850f":"code","8a3ba888":"code","1bd03bdf":"code","46692651":"code","709465d7":"code","7c335df5":"code","c866dec9":"code","bfbfae96":"code","275ec142":"code","dc5182c0":"code","55ed85e4":"code","a790b7a8":"code","b201ae61":"code","a0391a88":"code","6af367d8":"code","71560d34":"code","d201f2a1":"markdown","02184f3b":"markdown","409cef51":"markdown","3c4f265d":"markdown","3ee27bfd":"markdown","432dacdc":"markdown","5e93c499":"markdown","66954685":"markdown","f8d210f6":"markdown","804b4e59":"markdown","a9fa1d6f":"markdown","5c46292c":"markdown","894ad38f":"markdown","05c71588":"markdown","077287fc":"markdown","ebbde3e0":"markdown","3e4c8f81":"markdown","8890ddd6":"markdown","0ee69bf3":"markdown","28a710f7":"markdown","9c4f9a6b":"markdown","27f0eeec":"markdown","28cf05af":"markdown","12288641":"markdown","57582b6e":"markdown","46adb030":"markdown","e5eebd41":"markdown","4f0316a4":"markdown","bc792f35":"markdown","2cd22389":"markdown","c70436f8":"markdown","adcc67fd":"markdown","67ec463b":"markdown","d0168e0a":"markdown","4408b541":"markdown","d20ecdc7":"markdown","39dc2a08":"markdown","a878a5ab":"markdown","d8b47083":"markdown","fe6d9368":"markdown","a31a1685":"markdown","1b1486e7":"markdown","a0d80e7d":"markdown","3f2cd8c9":"markdown","76e6c0d7":"markdown","a0727e16":"markdown"},"source":{"6b9bac54":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats import ttest_ind, zscore\n\n%matplotlib inline\n\n#Supresses scientific notation\npd.set_option('display.float_format', lambda x: '%.2f' % x)\n\nimport warnings\nwarnings.filterwarnings('ignore')","da327bbb":"df = pd.read_csv('..\/input\/stats.csv')\n\ndf.head()","674ebae3":"df.dtypes","7dd48e27":"#Converting date objects to datetime:\ndf['D.O.B'] = pd.to_datetime(df['D.O.B'], format='%Y'+'-'+'%m'+'-'+'%d')\ndf['Date'] = pd.to_datetime(df['Date'], format='%Y'+'-'+'%m'+'-'+'%d')\n\n#Creating Age column:\ndf.insert(2,'Age',(df['Date']-df['D.O.B'])\/np.timedelta64(1,'Y'))\n\ndf.drop('D.O.B',axis=1,inplace=True)\n\n#Changing WinLoss to numerical values\ndf.WinLoss.replace(['W', 'L', 'D'],[1,0,.5],inplace=True)","a7d2b122":"#Removing post season \"Rounds\" (they also have null values)\nround_list = ['QF', 'SF', 'PF', 'GF', 'EF']\ndf = df[~df.Round.isin(round_list)]","2976410b":"df['Teams'] = df[['Team','Opposition']].values.tolist()","3a0bb007":"df.Teams = df.Teams.apply(sorted).apply(', '.join)","c8f4d24d":"#Creating \"points per percent of game played\" columns\ndf.insert(10, 'PointsPerPercentPlayed',(df['Goals']+df['Behinds'])\/df['PercentPlayed'])","4120131b":"df.describe()","6431657c":"number_list = df.select_dtypes(include=['number']).columns","1228e7f7":"fig,ax = plt.subplots(6, 5)\n\nm=0\nfor i in range(6):\n    for j in range(5):\n\n        df[number_list[m]].plot(kind='hist',bins=20,ax=ax[i,j],figsize=(30, 30),\n                                edgecolor='k').set_title(number_list[m])\n        m+=1","076aa28d":"df = df.set_index(['Season','Round']).sort_index()","2347fa53":"df_ML = df.copy()","f4202049":"scaling_list = ['PointsPerPercentPlayed','Disposals', 'Kicks', 'Marks','Handballs',\n                'Goals', 'Behinds','Hitouts', 'Tackles', 'Rebound50s','Inside50s',\n                'Clearances','Clangers', 'FreesFor', 'FreesAgainst','BrownlowVotes',\n                'ContendedPossessions', 'UncontendedPossessions','ContestedMarks',\n                'MarksInside50', 'OnePercenters', 'Bounces', 'GoalAssists']\n\nnormalize_list = ['Age', 'Height', 'Weight', 'Score', 'Margin']\n\n#Copying lists for AFL Fantasy analysis below:\nnew_scaling_list = scaling_list.copy()\nnew_normalize_list = normalize_list.copy()\n\n\nlose = ['Age', 'Height', 'Weight'] #For rows that I don't want to shift","66648260":"templist=[]\nfor col in scaling_list:\n    df_ML[col+'_n1'] = df_ML.groupby(['Season','Round'])[col].transform(lambda x:(x.astype(float) - min(x))\/(max(x)-min(x)))    \n    templist.append(col+'_n1')\n\nscaling_list += templist","4b92492f":"templist=[]\nfor col in normalize_list:\n    df_ML[col+'_n1'] = df_ML.groupby(['Season','Round'])[col].transform(lambda x: zscore(x,ddof=1))\n    templist.append(col+'_n1')\n    \n    if col.startswith('Age')|col.startswith('Height')|col.startswith('Weight'):\n        lose.append(col+'_n1')\n\nnormalize_list += templist","eb143f95":"df_ML = df_ML.set_index(['Teams'],append=1).sort_index()","1b3ac533":"templist=[]\nfor col in scaling_list:\n    df_ML[col+'_n2'] = df_ML.groupby(['Season','Round','Teams'])[col].transform(lambda x:(x.astype(float) - min(x))\/(max(x)-min(x)))\n    templist.append(col+'_n2')\n\nscaling_list += templist","32c232b2":"templist=[]\nfor col in normalize_list:\n    df_ML[col+'_n2'] = df_ML.groupby(['Season','Round','Teams'])[col].transform(lambda x: zscore(x,ddof=1))\n    templist.append(col+'_n2')\n    \n    if col.startswith('Age')|col.startswith('Height')|col.startswith('Weight'):\n        lose.append(col+'_n2')\n\nnormalize_list += templist","6c5f2b5e":"df_ML.fillna(0,inplace=True)","e7ba6109":"df_ML.reset_index(inplace=True)\ndf_ML.drop(['Season','Round'],axis=1,inplace=True)\n\ndf_ML.set_index(['Date','Teams','Team'],inplace=True)\ndf_ML.sort_index(inplace=True)","937c8494":"templist=[]\nfor col in scaling_list:\n    df_ML[col+'Scale'] = df_ML[col].multiply(df_ML.PercentPlayed\/100,axis=0)\n    templist.append(col+'Scale')\n    \nscaling_list += templist","adccc956":"number_list = scaling_list+normalize_list","a2381b42":"df_ML[number_list] = df_ML[number_list].groupby(['Date','Teams','Team']).mean()","4fa7836e":"df_ML.reset_index(inplace=True)\ndf_ML.drop(['Player','Position','PercentPlayed','Teams'],axis=1,inplace=True)\ndf_ML.drop_duplicates(inplace=True)","a1a426a9":"lose #Columns whose rows that I don't want to shift","012c0231":"Offset_List = number_list + ['WinLoss']\n\nfor x in lose:\n    Offset_List.remove(x)","b4562786":"PointsList=[]\n\nfor column_name in Offset_List:\n    df_ML[column_name+'Shift1'] = df_ML.set_index('Date',append=1).sort_index(level=1)\\\n        .groupby('Team')[column_name].shift().reset_index(['Date'], drop=1)\n    \n    PointsList.append(column_name+'Shift1')\n    \n    for i in range(2,6):\n        df_ML[column_name+'Shift'+str(i)] = df_ML.set_index('Date',append=1).sort_index(level=1)\\\n            .groupby('Team')[column_name].shift(i).reset_index(['Date'], drop=1)\n        \n        df_ML[column_name+'Exp'+str(i)] = df_ML.set_index('Date',append=1).sort_index(level=1)\\\n            .groupby('Team')[column_name].rolling(window=i,min_periods=i,win_types='exponential')\\\n            .mean().groupby('Team').shift().reset_index(['Team','Date'], drop=1)\n        \n        PointsList.append(column_name+'Shift'+str(i))\n        PointsList.append(column_name+'Exp'+str(i))","88610ab6":"Offset_List.remove('WinLoss')\n\ndf_ML.drop(Offset_List,axis=1,inplace=True)","cecd54df":"#Fixing nulls again because of shifting:\ndf_ML.dropna(inplace=True)","a4f1dbba":"df_ML_win = df_ML.select_dtypes(include=['number'])[df_ML.WinLoss==1]","57af4cdb":"df_ML_loss = df_ML.select_dtypes(include=['number'])[df_ML.WinLoss==0]","82c8b950":"number_list = df_ML_win.columns\nlen(number_list)","3fce81c8":"series_list=[]\n\nfor m in range(1750):\n    test_stat1, p_value1 = ttest_ind(df_ML_win[number_list[m]], df_ML_loss[number_list[m]])\n    \n    series_list.append([number_list[m], test_stat1])\n\ndf_stat = pd.DataFrame(series_list, columns=['column_name','test_stat_mean'])\ndf_stat.set_index('column_name',inplace=True)\ndf_stat.replace([np.inf, -np.inf], np.nan,inplace=True)","6f815f3b":"df_stat.dropna().abs().sort_values('test_stat_mean',ascending=False)['test_stat_mean'].head(20)","78273060":"df_ML.select_dtypes(include=['object']).head()","bd5790a2":"categorical_list = df_ML.select_dtypes(include=['object']).columns","0eaf53a3":"df_ML = pd.get_dummies(df_ML,columns=categorical_list,drop_first=True)","99f36ab9":"df_ML = df_ML[df_ML.WinLoss!=.5]","164952e5":"row_list=[]\nfor row in range(len(df_ML)):\n    if (row % 2!=0) & (df_ML.WinLoss.iloc[row]==0):\n        row_list.append(df_ML.index[row])\n    elif (row % 2==0) & (df_ML.WinLoss.iloc[row]!=0):\n        row_list.append(df_ML.index[row])","b219c7a0":"df_ML.drop(row_list,inplace=True)","a443eb01":"df_ML.WinLoss.value_counts()","488668e4":"X = df_ML.drop(['WinLoss','Date'],axis=1)\ny = df_ML['WinLoss']","44d23d67":"from sklearn.linear_model import LogisticRegression\n\n#for function below\nfrom sklearn.model_selection import TimeSeriesSplit\n\nfrom time import time\nfrom sklearn.metrics import make_scorer,confusion_matrix,accuracy_score,\\\n    precision_score,recall_score,f1_score,roc_auc_score,matthews_corrcoef","1f2a993f":"def metrics_function1(target,pred):\n    return accuracy_score(target, pred),precision_score(target, pred),\\\n        recall_score(target, pred),f1_score(target, pred),\\\n        roc_auc_score(target, pred),matthews_corrcoef(target, pred)\n\ndef TSer1_TEST(clf,X_all,y_all,folds_num,row_factor):\n    start=time()\n    \n    TSer1=TimeSeriesSplit(n_splits=folds_num)\n    print ('{}:'.format(clf.__class__.__name__),'\\n')\n    \n    acc_list_train=[]\n    acc_list_test=[]\n    prc_list_train=[]\n    prc_list_test=[]\n    rcal_list_train=[]\n    rcal_list_test=[]\n    f1_list_train=[]\n    f1_list_test=[]\n    matt_list_train=[]\n    matt_list_test=[]\n    AUC_list_train=[]\n    AUC_list_test=[]\n    \n    samp_size=X_all.shape[0]\/\/row_factor\n    \n    for fold,(train_index,target_index) in enumerate(TSer1.split(X_all[:samp_size],\n                                                                y_all[:samp_size])):\n        X_train=X_all.iloc[train_index].values\n        y_train=y_all.iloc[train_index].values\n\n        X_test=X_all.iloc[target_index].values\n        y_test=y_all.iloc[target_index].values\n        \n        clf.fit(X_train,y_train)\n        y_pred1=clf.predict(X_train)\n        y_pred2=clf.predict(X_test)\n\n        train_acc,train_prc,train_rcal,train_f1,train_auc,train_matt=metrics_function1(y_train,y_pred1)\n        \n        test_acc,test_prc,test_rcal,test_f1,test_auc,test_matt=metrics_function1(y_test,y_pred2)\n        \n        acc_list_train.append(train_acc)\n        acc_list_test.append(test_acc)\n        prc_list_train.append(train_prc)\n        prc_list_test.append(test_prc)\n        rcal_list_train.append(train_rcal)\n        rcal_list_test.append(test_rcal)\n        \n        f1_list_train.append(train_f1)\n        f1_list_test.append(test_f1)\n        matt_list_train.append(train_matt)\n        matt_list_test.append(test_matt)\n        AUC_list_train.append(train_auc)\n        AUC_list_test.append(test_auc)\n    \n    print(\"Averages:\"'\\n')\n    \n    print(\"Train acc: {}, Test acc: {}\".format(np.mean(acc_list_train),\n                                               np.mean(acc_list_test)))\n    print(\"Train prc: {}, Test prc: {}\".format(np.mean(prc_list_train),\n                                               np.mean(prc_list_test)))\n    print(\"Train recall: {}, Test recall: {}\".format(np.mean(rcal_list_train),\n                                                     np.mean(rcal_list_test)),'\\n')\n    \n    print(\"Train f1: {}, Test f1: {}\".format(np.mean(f1_list_train),\n                                             np.mean(f1_list_test)))\n    print(\"Train MattCC: {}, Test MattCC: {}\".format(np.mean(matt_list_train),\n                                                     np.mean(matt_list_test)))\n    print(\"Train AUC: {}, Test AUC: {}\".format(np.mean(AUC_list_train),\n                                               np.mean(AUC_list_test)),'\\n'*2)\n        \n    print(\"Sample Size: {}, Folds Num: {}, Time: {}\".format(samp_size,folds_num,\n                                                            time()-start),'\\n'*2)","9f7abe13":"clf_A1 = LogisticRegression(penalty='l1',tol=1e-1,C=.15,solver='liblinear',random_state=0)","e276ddfb":"TSer1_TEST(clf_A1, X, y, 5, 1)","3361373f":"df_F = df.copy()\nfantasy_points = {'Kicks':3,'Handballs':2,'Marks':3,'Tackles':4,'FreesFor':1,\n                  'FreesAgainst':-3,'Hitouts':1,'Goals':6,'Behinds':1}","4cd5158a":"new_list=[]\n\n#Creating fantasy columns\nfor keys in fantasy_points.keys():\n    df_F[keys+'_fantasy'] = df_F[keys]*fantasy_points[keys]\n    new_list.append(keys+'_fantasy')\n    \ndf_F['fantasy_points'] = pd.Series()   \n    \nfor cols in fantasy_points.keys():\n    df_F.fantasy_points = df_F.fantasy_points.add(df_F[cols+'_fantasy'],fill_value=0)\n\ndf_F['target'] = df_F.fantasy_points","4361b1bc":"df_F[new_list+['fantasy_points']].head()","7319b3b7":"df_F.insert(11, 'FantasyPerPercentPlayed',df_F['fantasy_points']\/df_F['PercentPlayed'])","336c1ae4":"df_F.drop(new_list,axis=1,inplace=True)\nnew_scaling_list = new_scaling_list + ['fantasy_points'] + ['FantasyPerPercentPlayed']","339e7105":"print(df_F.Position.value_counts())\n\nhist_names = df_F.Position.value_counts().index.drop('Midfield, Ruck')","47401f27":"for names in hist_names:\n    print(names+':','\\n')\n    print(df_F[df_F.Position==names].fantasy_points.describe(),'\\n'*2)","0ca3f9a4":"templist=[]\nfor col in new_scaling_list:\n    df_F[col+'_n1'] = df_F.groupby(['Season','Round'])[col].transform(lambda x:(x.astype(float) - min(x))\/(max(x)-min(x)))    \n    templist.append(col+'_n1')\n\nnew_scaling_list += templist","6d2e30c9":"templist=[]\nfor col in new_normalize_list:\n    df_F[col+'_n1'] = df_F.groupby(['Season','Round'])[col].transform(lambda x: zscore(x,ddof=1))\n    templist.append(col+'_n1')\n\nnew_normalize_list += templist","a03da662":"df_F = df_F.set_index(['Teams'],append=1).sort_index()","69aef3e8":"templist=[]\nfor col in new_scaling_list:\n    df_F[col+'_n2'] = df_F.groupby(['Season','Round','Teams'])[col].transform(lambda x:(x.astype(float) - min(x))\/(max(x)-min(x)))\n    templist.append(col+'_n2')\n\nnew_scaling_list += templist","340b91a6":"templist=[]\nfor col in new_normalize_list:\n    df_F[col+'_n2'] = df_F.groupby(['Season','Round','Teams'])[col].transform(lambda x: zscore(x,ddof=1))\n    templist.append(col+'_n2')\n\nnew_normalize_list += templist","73ad5155":"df_F.fillna(0,inplace=True)","cd77c44f":"df_F.reset_index(inplace=True)\ndf_F.drop(['Season','Round'],axis=1,inplace=True)\n\ndf_F = df_F.set_index(['Date','Teams','Team']).sort_index()","4cb69867":"templist=[]\nfor col in new_scaling_list:\n    df_F[col+'Scale'] = df_F[col].multiply(df_F.PercentPlayed\/100,axis=0)\n    templist.append(col+'Scale')\n    \nnew_scaling_list += templist","be2985ed":"new_number_list = new_scaling_list+new_normalize_list","2696f113":"df_F.reset_index(inplace=True)\ndf_F.drop(['Teams','PercentPlayed'],axis=1,inplace=True)","865e1683":"Offset_Fantasy_List = new_number_list + ['WinLoss']\n\nfor x in lose:\n    Offset_Fantasy_List.remove(x)","0521d0cd":"FantasyList=[]\n\nfor column_name in Offset_Fantasy_List:\n    df_F[column_name+'Shift1'] = df_F.set_index('Date',append=1).sort_index(level=1)\\\n        .groupby('Player')[column_name].shift().reset_index(['Date'], drop=1)\n \n    FantasyList.append(column_name+'Shift1')\n\n    for i in range(2,6):\n        df_F[column_name+'Shift'+str(i)] = df_F.set_index('Date',append=1).sort_index(level=1)\\\n            .groupby('Player')[column_name].shift(i).reset_index(['Date'], drop=1)\n\n        df_F[column_name+'Exp'+str(i)] = df_F.set_index('Date',append=1).sort_index(level=1)\\\n            .groupby('Player')[column_name].rolling(window=i,min_periods=i,win_types='exponential')\\\n            .mean().groupby('Player').shift().reset_index(['Player','Date'], drop=1)\n\n        FantasyList.append(column_name+'Shift'+str(i))\n        FantasyList.append(column_name+'Exp'+str(i))","03fbd0e5":"df_F.drop(Offset_Fantasy_List,axis=1,inplace=True)","dd0922d1":"target_list = []\n\nfor i in range(1,5):\n    df_F['targetShift'+str(-i)] = df_F.set_index('Date',append=1).sort_index(level=1).groupby('Player')['target'].shift(-i).reset_index('Date', drop=1)\n    \n    target_list.append('targetShift'+str(-i))","d004fa3f":"target_list = ['target'] + target_list\ntarget_list","6b43f12a":"#Fixing nulls again because of shifting:\ndf_F.dropna(inplace=True)","4571ab03":"column_list = df_F.select_dtypes(include=['number']).drop(['target']+target_list,axis=1).columns","7c6252dc":"df_F[df_F.Position=='Defender'][column_list].corrwith(df_F[df_F.Position=='Defender'].target).sort_values(ascending=False)","58e5d109":"df_F[df_F.Position=='Forward'][column_list].corrwith(df_F[df_F.Position=='Forward'].target).sort_values(ascending=False)","6bf546e8":"df_F[df_F.Position=='Midfield'][column_list].corrwith(df_F[df_F.Position=='Midfield'].target).sort_values(ascending=False)","0eba4905":"df_F[df_F.Position=='Midfield, Forward'][column_list].corrwith(df_F[df_F.Position=='Midfield, Forward'].target).sort_values(ascending=False)","5948850f":"df_F[df_F.Position=='Ruck'][column_list].corrwith(df_F[df_F.Position=='Ruck'].target).sort_values(ascending=False)","8a3ba888":"df_F[df_F.Position=='Forward, Ruck'][column_list].corrwith(df_F[df_F.Position=='Forward, Ruck'].target).sort_values(ascending=False)","1bd03bdf":"df_F[df_F.Position=='Defender, Midfield'][column_list].corrwith(df_F[df_F.Position=='Defender, Midfield'].target).sort_values(ascending=False)","46692651":"df_F[df_F.Position=='Defender, Forward'][column_list].corrwith(df_F[df_F.Position=='Defender, Forward'].target).sort_values(ascending=False)","709465d7":"df_F.select_dtypes(include=['object']).head()","7c335df5":"categorical_list2 = df_F.select_dtypes(include=['object']).drop('Player',axis=1).columns","c866dec9":"df_F = pd.get_dummies(df_F,columns=categorical_list2,drop_first=True)","bfbfae96":"X2 = df_F.drop(target_list+['Date','Player'],axis=1)\n\n#Assigns variables to offset target values: \nfor i in range(len(target_list)):\n    globals()['y2_'+str(i)] = df_F[target_list[i]]","275ec142":"from sklearn.linear_model import Ridge\n\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score","dc5182c0":"def metrics_function2(target,pred):\n    return mean_squared_error(target,pred),mean_absolute_error(target,pred),r2_score(target,pred)\n\ndef TSer2_TEST(clf,X_all,y_all,folds_num,row_factor):\n    start=time()\n    \n    TSer2=TimeSeriesSplit(n_splits=folds_num)\n    print ('{}:'.format(clf.__class__.__name__),'\\n')\n    \n    samp_size=X_all.shape[0]\/\/row_factor\n    \n    MSE_list_train=[]\n    MSE_list_test=[]\n    MAE_list_train=[]\n    MAE_list_test=[]\n    R2_list_train=[]\n    R2_list_test=[]\n    \n    for fold,(train_index,target_index) in enumerate(TSer2.split(X_all[:samp_size],\n                                                                y_all[:samp_size])):\n        X_train=X_all.iloc[train_index].values\n        y_train=y_all.iloc[train_index].values\n\n        X_test=X_all.iloc[target_index].values\n        y_test=y_all.iloc[target_index].values\n        \n        clf.fit(X_train,y_train)\n        y_pred1=clf.predict(X_train)\n        y_pred2=clf.predict(X_test)\n\n        train_MSE,train_MAE,train_R2=metrics_function2(y_train,y_pred1)\n        test_MSE,test_MAE,test_R2=metrics_function2(y_test,y_pred2)\n        \n        MSE_list_train.append(train_MSE)\n        MSE_list_test.append(test_MSE)\n        MAE_list_train.append(train_MAE)\n        MAE_list_test.append(test_MAE)\n        R2_list_train.append(train_R2)\n        R2_list_test.append(test_R2)\n        \n    print(\"Train MSE: {}, Test MSE: {}\".format(np.mean(MSE_list_train),\n                                               np.mean(MSE_list_test)),'\\n'*2) \n    print(\"Train MAE: {}, Test MAE: {}\".format(np.mean(MAE_list_train),\n                                               np.mean(MAE_list_test)),'\\n'*2)\n    print(\"Train R2: {}, Test R2: {}\".format(np.mean(R2_list_train),\n                                             np.mean(R2_list_test)),'\\n'*2)   \n        \n    print(\"Sample Size: {}, Folds Num: {}, Time: {}\".format(samp_size,folds_num,\n                                                            time()-start),'\\n'*2)","55ed85e4":"clf_A2 = Ridge(alpha=1e3,random_state=0)","a790b7a8":"TSer2_TEST(clf_A2, X2, y2_0, 5, 1)","b201ae61":"TSer2_TEST(clf_A2, X2, y2_1, 5, 1)","a0391a88":"TSer2_TEST(clf_A2, X2, y2_2, 5, 1)","6af367d8":"TSer2_TEST(clf_A2, X2, y2_3, 5, 1)","71560d34":"TSer2_TEST(clf_A2, X2, y2_4, 5, 1)","d201f2a1":"### Checking distribution differences between winners and losers via hypothesis testing:","02184f3b":"## Defender:","409cef51":"## Normalizing further by game (n2):","3c4f265d":"## Predicting AFL Fantasy points for the next 5 games:","3ee27bfd":"## Forward:","432dacdc":"# Comparing points made per percent of game to various characteristics relative to players in each game:","5e93c499":"### Offsetting the target to see the error for predictions within 5 games:","66954685":"### Three games out:","f8d210f6":"## Defender, Midfield:","804b4e59":"## Defender, Forward:","a9fa1d6f":"## Spliting Data and Creating Model:","5c46292c":"## Normalizing all players by round (n1):","894ad38f":"### Creating \"Age\" column:","05c71588":"## Offsetting columns for time series analysis:","077287fc":"# Predicting AFL Fantasy points:","ebbde3e0":"## Normalizing all players by round (n1):","3e4c8f81":"### Previous win percentage of odds favorites from 2009-2013\n(according to https:\/\/www.bigfooty.com\/forum\/threads\/how-often-do-favourites-win.1004437\/)\n\n##### In 2009 it was 50\/72 or 69.4% - (only data available)\n##### In 2010 it was 109\/176 or 61.9%\n##### In 2011 it was 142\/187 or 75.9%\n##### In 2012 it was 155\/198 or 78.2%\n##### So far in 2013 it was 41\/54 or 75.9%\n\n### This model predicts the winner over 80% of the time.","8890ddd6":"## Normalizing further by game (n2):","0ee69bf3":"### Creating Points Per Percent Played column:","28a710f7":"## Feature info:","9c4f9a6b":"## Spliting Data and Creating Model:","27f0eeec":"## Offsetting columns for time series analysis:","28cf05af":"### Fixing Null Values:","12288641":"## Forward, Ruck:","57582b6e":"## Fantasy points by position:","46adb030":"### There is a commonly held belief that, in AFL Fantasy, midfielders are the best position for points, and this information confirms that.","e5eebd41":"# Predicting the outcome of a game:","4f0316a4":"### Five games out:","bc792f35":"## Midfield:","2cd22389":"## Scaling the data by the percent played:","c70436f8":"# Comparing points made per percent of game to various characteristics relative to players in each game:","adcc67fd":"# Machine Learning:\n## Making dummy variables:","67ec463b":"### Alternating between dropping wins and losses to remove one team from each game:","d0168e0a":"### Four games out:","4408b541":"### Creating a alphabetically sorted \"Team, Opposition\" column to be able to group by game:","d20ecdc7":"### Creating a 5-game auto-regression and exponentially weighted moving average for all relevant features:","39dc2a08":"### Two games prediction:","a878a5ab":"## Scaling the data by the percent played:","d8b47083":"## Win and Loss Distributions of Features:","fe6d9368":"## Ruck:","a31a1685":"### Current game's point prediction:","1b1486e7":"## Correlation Between AFL Fantasy Points and Other Features by Position:","a0d80e7d":"## Midfield, Forward:","3f2cd8c9":"### The features with the biggest mean discrepancy between the winning and losing teams are Age, previous Margin, Inside 50s, and previous Win-Loss record. ","76e6c0d7":"# Machine Learning:\n## Making dummy variables:","a0727e16":"# AFL Time Series Data Analysis with Result and AFL Fantasy Predictions"}}