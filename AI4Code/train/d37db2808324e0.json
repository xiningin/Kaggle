{"cell_type":{"934d8be2":"code","c12afd76":"code","b0baee52":"code","49811d9a":"code","b3df48a0":"code","ec782a1b":"code","6aa552f6":"code","e458a3e6":"code","f15fa2ad":"code","bc78f334":"code","9cdfbec7":"code","810d1f5c":"code","3631f6cd":"code","70a197b0":"markdown","2d283eab":"markdown","58786439":"markdown","5cc51e97":"markdown","a96d4c31":"markdown","e66e0ed2":"markdown","e61e69d2":"markdown","7ecc9a85":"markdown","c2dfb6e7":"markdown","777f34e7":"markdown"},"source":{"934d8be2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.fft import fft, fftfreq\nimport matplotlib.pyplot as plt","c12afd76":"fs = 44100 # Sampling Freq\nf = 1000 # Signal Freq\nTs = 1\/fs # Sampling Time\nt = Ts*np.array(range(fs)) # Time axis\nst = np.cos(2*np.pi*f*t) # Signal\nN = st.shape[0] # number of samples\nstfft = fft(st) # Freq Domain of Signal\nf = np.array(range(0,N))*fs\/N # Freq axis\nprint('delta t= ',Ts,'[sec]')\nprint('delta f= ',fs\/N,'[Hz]')","b0baee52":"plt.title(\"Signal in Time\") \nplt.xlabel(\"time [s.]\") \nplt.ylabel(\"amplitude\") \nplt.plot(t[0:100],st[0:100]) \nplt.grid()\nplt.show()\n\n\nplt.title(\"Signal in Frequency [positive freq 0 to fs\/2] [negative freq fs\/2 to fs]\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f,abs(stfft)) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[990:1010],abs(stfft[990:1010])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency @\"+ str(fs-1000)+\"Hz = -1000Hz\") \nplt.xlabel(\"Freq [kHz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[fs-1100:fs-900]\/1000,abs(stfft[fs-1100:fs-900])) \nplt.grid()\nplt.show()\n","49811d9a":"a = np.array([1,2,3])\nb = np.array([4,5,6])\nc = a*b\nprint(a,b,c)","b3df48a0":"fo = 1100\nstfo = np.cos(2*np.pi*fo*t)\nstmod = st*stfo\nstmodfft = fft(stmod)\n","ec782a1b":"plt.title(\"Signal in Time\") \nplt.xlabel(\"time [s.]\") \nplt.ylabel(\"amplitude\") \nplt.plot(t[0:500],stmod[0:500]) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f,abs(stmodfft)) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency, positive freq\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[90:110],abs(stmodfft[90:110])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency, positive freq\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[2090:2110],abs(stmodfft[2090:2110])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency @\"+str(fs-100)+\"Hz = negative freq @-100Hz\") \nplt.xlabel(\"Freq [kHz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[fs-150:fs-50]\/1000,abs(stmodfft[fs-150:fs-50])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency @\"+str(fs-2100)+\"Hz = negative freq @-2100Hz\") \nplt.xlabel(\"Freq [kHz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[fs-2150:fs-2050]\/1000,abs(stmodfft[fs-2150:fs-2050])) \nplt.grid()\nplt.show()","6aa552f6":"fo = 1100\nstqfo = np.sin(2*np.pi*fo*t)\nstqmod = st*stqfo\nstqmodfft = fft(stqmod)","e458a3e6":"plt.title(\"Signal in Time\") \nplt.xlabel(\"time [s.]\") \nplt.ylabel(\"amplitude\") \nplt.plot(t[0:500],stqmod[0:500]) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f,abs(stqmodfft)) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency, positive freq\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[90:110],abs(stqmodfft[90:110])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency, positive freq\") \nplt.xlabel(\"Freq [Hz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[2090:2110],abs(stqmodfft[2090:2110])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency @\"+str(fs-100)+\"Hz = negative freq @-100Hz\") \nplt.xlabel(\"Freq [kHz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[fs-150:fs-50]\/1000,abs(stqmodfft[fs-150:fs-50])) \nplt.grid()\nplt.show()\n\nplt.title(\"Signal in Frequency @\"+str(fs-2100)+\"Hz = negative freq @-2100Hz\") \nplt.xlabel(\"Freq [kHz]\") \nplt.ylabel(\"amplitude\") \nplt.plot(f[fs-2150:fs-2050]\/1000,abs(stqmodfft[fs-2150:fs-2050])) \nplt.grid()\nplt.show()","f15fa2ad":"import numpy as np\nfrom scipy.signal import butter, lfilter, freqz\ndef butter_lowpass(cutoff, fs, order=5):\n    nyq = 0.5 * fs\n    normal_cutoff = cutoff \/ nyq\n    b, a = butter(order, normal_cutoff, btype='low', analog=False)\n    return b, a\n\ndef butter_lowpass_filter(data, cutoff, fs, order=5):\n    b, a = butter_lowpass(cutoff, fs, order=order)\n    y = lfilter(b, a, data)\n    return y\n# Filter requirements.\norder = 6\nfs = 44000.0       # sample rate, Hz\ncutoff = 500  # desired cutoff frequency of the filter, Hz\n\n# Get the filter coefficients so we can check its frequency response.\nb, a = butter_lowpass(cutoff, fs, order)\n\n# Plot the frequency response.\ndata = stqmod\nw, h = freqz(b, a, worN=8000)\nplt.subplot(2, 1, 1)\nplt.plot(0.5*fs*w\/np.pi, np.abs(h), 'b')\nplt.plot(cutoff, 0.5*np.sqrt(2), 'ko')\nplt.axvline(cutoff, color='k')\nplt.xlim(0, 0.5*fs)\nplt.title(\"Lowpass Filter Frequency Response\")\nplt.xlabel('Frequency [Hz]')\nplt.grid()\n\ny = butter_lowpass_filter(data, cutoff, fs, order)\nplt.subplot(2, 1, 2)\nplt.plot(t[0:500], data[0:500], 'b-', label='data')\nplt.plot(t[0:500], y[0:500], 'g-', linewidth=2, label='filtered data')\nplt.xlabel('Time [sec]')\nplt.grid()\nplt.legend()\n\nplt.subplots_adjust(hspace=0.35)\nplt.show()","bc78f334":"data = stmod\nyi = butter_lowpass_filter(data, cutoff, fs, order)\ndata = stqmod\nyq = butter_lowpass_filter(data, cutoff, fs, order)\nplt.subplot(2, 1, 2)\nplt.plot(t[0:500], yi[0:500], 'b-', label='I')\nplt.plot(t[0:500], yq[0:500], 'g-', linewidth=2, label='Q')\nplt.xlabel('Time [sec]')\nplt.grid()\nplt.legend()\n\nplt.subplots_adjust(hspace=0.35)\nplt.show()","9cdfbec7":"tmp = yi[0:5]\nprint(yi[0:5])\nprint(tmp[::2])\n","810d1f5c":"# fs = 44000\/100 = 440Hz\ndown = 100\nyidown1 = yi[::down] \nyqdown1 = yq[::down] \nfyidown1 = fft(yidown1)\nfyqdown1 = fft(yqdown1)\nN = len(yidown1)\nf = np.array(range(0,N))*(fs\/down)\/N\nt = (down*Ts)*np.array(range(int(fs\/\/down)))\nplt.subplot(2, 1, 2)\nplt.plot(t[0:50], yidown1[0:50], 'b-', label='I')\nplt.plot(t[0:50], yqdown1[0:50], 'g-', linewidth=2, label='Q')\nplt.xlabel('Time [sec]')\nplt.grid()\nplt.legend()\nplt.subplots_adjust(hspace=0.35)\nplt.show()\n\nplt.subplot(2, 1, 2)\nplt.plot(f, abs(fyidown1), 'b-', label='I')\nplt.plot(f, abs(fyqdown1), 'g-', linewidth=2, label='Q')\nplt.xlabel('Freq [Hz]')\nplt.grid()\nplt.legend()\nplt.subplots_adjust(hspace=0.35)\nplt.show()\n\nplt.subplot(2, 1, 2)\nplt.plot(f, abs(fyidown1+1j*fyqdown1), 'b-', label='I+j Q')\nplt.xlabel('Freq [Hz]')\nplt.grid()\nplt.legend()\nplt.subplots_adjust(hspace=0.35)\nplt.show()\n","3631f6cd":"# fs = 44000\/400 = 110Hz\ndown = 400\nyidown1 = yi[::down] \nyqdown1 = yq[::down] \nfyidown1 = fft(yidown1)\nfyqdown1 = fft(yqdown1)\nN = len(yidown1)\nf = np.array(range(0,N))*(fs\/down)\/N\nt = (down*Ts)*np.array(range(int(fs\/\/down)))\nplt.subplot(2, 1, 2)\nplt.plot(t[0:50], yidown1[0:50], 'b-', label='I')\nplt.plot(t[0:50], yqdown1[0:50], 'g-', linewidth=2, label='Q')\nplt.xlabel('Time [sec]')\nplt.grid()\nplt.legend()\nplt.subplots_adjust(hspace=0.35)\nplt.show()\n\nplt.subplot(2, 1, 2)\nplt.plot(f, abs(fyidown1), 'b-', label='I')\nplt.plot(f, abs(fyqdown1), 'g-', linewidth=2, label='Q')\nplt.xlabel('Freq [Hz]')\nplt.grid()\nplt.legend()\nplt.subplots_adjust(hspace=0.35)\nplt.show()\n\nplt.subplot(2, 1, 2)\nplt.plot(f, abs(fyidown1+1j*fyqdown1), 'b-', label='I+j Q')\nplt.xlabel('Freq [Hz]')\nplt.grid()\nplt.legend()\nplt.subplots_adjust(hspace=0.35)\nplt.show()\n","70a197b0":"## **Q** (Quadrature-phase) component\nMultiply the signal with $ \\sin( \\omega t)$","2d283eab":"# Sampling with 440Hz\nSampling frequency is 2 times higher than 100Hz.  \nThe negative frequency is located above 100Hz and does not interfere with the signal.  ","58786439":"# Element-wise multiply","5cc51e97":"# Filter out the high frequency 2100Hz","a96d4c31":"## **I** (in-phase) component\nMultiply the signal with $ \\cos( \\omega t)$","e66e0ed2":"# Multiply the signal of 1000Hz with 1100Hz  \nThe result contains 100Hz and 2100Hz  ","e61e69d2":"# Down sampling by sliding the array with \"step\" ","7ecc9a85":"# Show I and Q signals\nThe frequency of the I and Q is 100Hz  \nThe sampling rate is 44000Hz which is a lot higher than the signal frequency.  \nAssume that the yi and yq is the analog outputs from the \"mixer\".  \nThey will be sampled with 440Hz and 110Hz.  \nThe spectrum of the sampled signals will be discussed.  ","c2dfb6e7":"# Find FFT of the signal  \nThe length of FFT is N samples.  \nThe maximum frequency of the FFT output is $f_s$ but the  FFT is valid only from 0 to $\\frac {f_s}{2}$.    \nFrequencies from $\\frac {f_s}{2}$ to $f_s$ are negative frequencies if it were computed using continuous Fourier Transform. ","777f34e7":"# Sampling with 110Hz\nSampling frequency is less than 2 times the signal frequency (100Hz).  \nThe negative frequency is located below 100Hz and does interfere with the signal.   \nIf I and Q signals are used at the same time as $I+j Q$. The interference part are cancelled.  \nThe sampling frequency less than 2 times the signal frequency can be used without interference.   "}}