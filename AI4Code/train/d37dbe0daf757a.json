{"cell_type":{"ac92f5b4":"code","42b0cd3b":"code","b8aa339d":"code","2e23adb5":"code","cdd53dd9":"code","6b68b3df":"code","729943ad":"code","4ba77520":"code","0e7dcb35":"code","897a62a2":"code","e13f4027":"code","f1f5a042":"code","ba0f216f":"code","ba18d6e0":"code","0509dad2":"code","330922d4":"code","2fba3051":"code","28b6cfd1":"code","fa7aee3e":"code","fd4413ae":"markdown","addb2595":"markdown","b1d7416c":"markdown","6ad8e35c":"markdown","6404dfc6":"markdown","3e52d4f9":"markdown"},"source":{"ac92f5b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","42b0cd3b":"import pandas as pd  \ndata = pd.read_csv('..\/input\/cristiano7\/data.csv')\ndata.head()","b8aa339d":"data['shot_id_number'] = range(1,30698)","2e23adb5":"data = data[['location_x','location_y','power_of_shot','knockout_match','distance_of_shot','is_goal','area_of_shot','shot_basics','range_of_shot'\n            ,'home\/away','lat\/lng','type_of_shot','type_of_combined_shot','shot_id_number','distance_of_shot.1']]","cdd53dd9":"def home_away(string):\n    if '@' in str(string):\n        return 'away'\n    else:\n        return 'home'","6b68b3df":"data['home_away'] = data['home\/away'].apply(home_away)","729943ad":"data.drop(['home\/away','lat\/lng'],axis=1,inplace=True)\ndata.head()","4ba77520":"import math\ndata['distance'] = data['location_x']**2 + data['location_y']**2\ndata['distance'] = data.distance.apply(math.sqrt)","0e7dcb35":"data.drop(['location_x','location_y'],axis=1,inplace=True)\ndata.head()","897a62a2":"data = pd.get_dummies(data)\ntrain = data[data['is_goal'].notnull()]\n#sub = data[data['is_goal'].isna() & data['shot_id_number'].notnull()]","e13f4027":"sub = pd.read_csv('..\/input\/zsdata\/sample_submission.csv')\nsub = sub.drop(['is_goal'],axis = 1)","f1f5a042":"result = pd.merge(sub, data, how='inner', on=['shot_id_number'])\nresult.head()\n","ba0f216f":"\n\nfrom sklearn.model_selection import StratifiedKFold\nkfold = 5\nskf = StratifiedKFold(n_splits=kfold, random_state=42)","ba18d6e0":"'''params = {\n    'min_child_weight': 6.0,\n    'objective': 'binary:logistic',\n    'max_depth': 11,\n    'colsample_bytree': 0.75,\n    'subsample': 0.8,\n    'eta': 0.05,\n    'gamma': 5,\n    'eval_metric' : 'mae',\n    'silent': 1,\n    'num_boost_round' : 700\n    }'''\nparams = {\n    'booster':'gbtree',\n           'subsample': 1.0,\n          'objective': 'binary:logistic',\n          'min_child_weight': 5, \n          'eta': 0.01,\n          'max_depth': 5,\n          'gamma': 5,\n          'colsample_bytree': 0.6,\n          'eval_metric' : 'mae'\n         }","0509dad2":"X =  pd.get_dummies(train.drop([\"is_goal\",\"shot_id_number\"],axis = 1)).values\ny = train.is_goal.values","330922d4":"#def error()\nfrom sklearn.metrics import mean_absolute_error\ndef evalerror(preds, dtrain):\n    labels = dtrain.get_label()\n    return 'my-error', (1\/(1+mean_absolute_error(labels,preds)))","2fba3051":"result1 = pd.DataFrame()\n#sub_data = pd.read_csv('..\/input\/data.csv')\n#sub_data = sub_data[sub_data['is_goal'].isna()]\nresult1[\"shot_id_number\"] = result.shot_id_number\nresult1[\"is_goal\"] = 0\n#test.drop([\"unique_id\",\"cns_score_description\"],axis=1,inplace=True)","28b6cfd1":"import xgboost as xgb\nfrom sklearn.metrics import roc_auc_score\nfor i, (train_index, test_index) in enumerate(skf.split(X, y)):\n    print('[Fold %d\/%d]' % (i + 1, kfold))\n    X_train, X_valid = X[train_index], X[test_index]\n    y_train, y_valid = y[train_index], y[test_index]\n    # Convert our data into XGBoost format\n    d_train = xgb.DMatrix(X_train, y_train)\n    d_valid = xgb.DMatrix(X_valid, y_valid)\n    d_test = xgb.DMatrix(result.drop(['is_goal','shot_id_number'],axis=1).values)\n    watchlist = [(d_train, 'train'), (d_valid, 'valid')]\n    mdl = xgb.train(params, d_train, 10000, watchlist, early_stopping_rounds=1000, maximize=True,verbose_eval = 100,feval=evalerror)\n    print('[Fold %d\/%d Prediciton:]' % (i + 1, kfold))\n    p_test = mdl.predict(d_test, ntree_limit=mdl.best_ntree_limit)\n    result1['is_goal'] += p_test\/kfold","fa7aee3e":"result1.head()\n\nresult1.to_csv('result_zs1.csv',index=False)","fd4413ae":"## Column Selection","addb2595":"## ZS Associate Hackthon hosted by InterviewBit\n### Cristiano Ronaldo Goal Prediction","b1d7416c":"## Crossvalidated Modeling","6ad8e35c":"## Data Preprocessing","6404dfc6":"## Final Submission","3e52d4f9":"## Data Read"}}