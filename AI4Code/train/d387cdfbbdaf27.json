{"cell_type":{"553fb2d2":"code","16d4a2e7":"code","8886d991":"code","9a783269":"code","6ec48764":"code","dcc24342":"code","bb0229bb":"code","6f5a5f84":"code","341aad19":"code","d5687cfa":"code","366635a9":"code","582c91f7":"code","a3c722cf":"code","48a450d2":"code","496dddd5":"code","cd26b5ee":"code","cea67493":"code","4bb09b0b":"code","3c13d8f6":"code","4b6f7aba":"code","4a48d14e":"code","85bdcf48":"code","acbddd89":"code","fc46c274":"code","34146a7a":"code","dfa21d41":"code","2040bbe4":"code","bdaf1ef1":"code","77ad79d9":"code","8981c6ad":"markdown","6eb8c9c0":"markdown","ab01626a":"markdown"},"source":{"553fb2d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16d4a2e7":"# import packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8886d991":"# loading data\ntrain_data = pd.read_csv('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test.csv')","9a783269":"train_data.head()","6ec48764":"test_data","dcc24342":"train_data.info()","bb0229bb":"train_data.isna().sum()","6f5a5f84":"train_data.columns","341aad19":"train_data = train_data.drop(columns= ['Patient'], axis = 1)\ntrain_data.head()","d5687cfa":"# for getting unique values from data\nfor i in list(train_data.select_dtypes(include= np.object).columns):\n    print(train_data[i].unique(), '\\n')","366635a9":"plt.style.use('seaborn')\ntrain_data.select_dtypes(include= [np.int64, np.float64]).hist(figsize= (10,10))\nplt.tight_layout()\nplt.show()","582c91f7":"sns.pairplot(train_data[list(train_data.columns)[:-1]], hue= 'Sex')\nplt.show()","a3c722cf":"train_cols = list(train_data.columns)\ntrain_cols.remove('Sex')\n","48a450d2":"train_cols","496dddd5":"sns.pairplot(train_data[train_cols], hue= 'SmokingStatus')\nplt.show()","cd26b5ee":"# get dummies for training data \ntrain_data_final = pd.get_dummies(train_data, columns=['Sex', 'SmokingStatus'], drop_first= True)\ntrain_data_final.head()","cea67493":"X_data = train_data_final.drop(columns= 'FVC', axis = 1)\ny_data = train_data_final['FVC']","4bb09b0b":"X = X_data.iloc[:, ].values\ny = y_data.iloc[:, ].values","3c13d8f6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 10)","4b6f7aba":"X_train[:, :3]","4a48d14e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train[:, :3] = sc.fit_transform(X_train[:, :3])\nX_test[:, :3] = sc.transform(X_test[:, :3])","85bdcf48":"X_train","acbddd89":"import xgboost as xgb\nxgb_model = xgb.XGBRFRegressor()\nxgb_model.fit(X_train, y_train)\nprint('training score: {}'.format(xgb_model.score(X_train, y_train)))\nprint('testing score: {}'.format(xgb_model.score(X_test, y_test)))","fc46c274":"import pydicom","34146a7a":"# check how many images in out train and test folders\nimport os\nprint('training image folders : {}'.format(len(list(os.listdir('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train')))))\nprint('training image folders : {}'.format(len(list(os.listdir('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/test')))))","dfa21d41":"# to check individual patient DICOMs\nimg_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00012637202177665765362'\nprint('Patient ID : ID00012637202177665765362 , images found: {}'.format(len(list(os.listdir(img_dir)))))\n\n# visualizations of DICOM\n\nfig = plt.figure(figsize=(12, 12))\ncolumns = 4\nrows = 5\nfor i in range(1, columns*rows +1):\n    filename = img_dir + \"\/\" + str(i) + \".dcm\"\n    ds = pydicom.dcmread(filename)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap='gray')\nplt.tight_layout()    \nplt.show()","2040bbe4":"# to check individual patient DICOMs\nimg_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00012637202177665765362'\nprint('Patient ID : ID00012637202177665765362 , images found: {}'.format(len(list(os.listdir(img_dir)))))\n\n# visualizations of DICOM\n# official documentation for cmap colors : https:\/\/matplotlib.org\/3.1.0\/tutorials\/colors\/colormaps.html\n\n\nfig = plt.figure(figsize=(12, 12))\ncolumns = 4\nrows = 5\nfor i in range(1, columns*rows +1):\n    filename = img_dir + \"\/\" + str(i) + \".dcm\"\n    ds = pydicom.dcmread(filename)\n    fig.add_subplot(rows, columns, i)\n    plt.imshow(ds.pixel_array, cmap='terrain')\nplt.tight_layout()    \nplt.show()","bdaf1ef1":"# credits : https:\/\/www.kaggle.com\/piantic\/osic-pulmonary-fibrosis-progression-basic-eda\n\ndef plot_pixel_array(dataset, figsize=(5,5)):\n    plt.figure(figsize=figsize)\n    plt.grid(False)\n    plt.imshow(dataset.pixel_array, cmap='gray') # cmap=plt.cm.bone)\n    plt.show()\n    \ndef show_dcm_info(dataset):\n    print(\"Filename.........:\", file_path)\n\n    pat_name = dataset.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient's name......:\", display_name)\n    \n    print(dataset.data_element(\"ImageOrientationPatient\"))\n    print(dataset.data_element(\"ImagePositionPatient\"))\n    print(dataset.data_element(\"PatientID\"))\n    print(dataset.data_element(\"PatientName\"))\n    print(dataset.data_element(\"PatientSex\"))\n   \n    \n    if 'PixelData' in dataset:\n        rows = int(dataset.Rows)\n        cols = int(dataset.Columns)\n        print(\"Image size.......: {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(dataset.PixelData)))\n        if 'PixelSpacing' in dataset:\n            print(\"Pixel spacing....:\", dataset.PixelSpacing)    \n            \n#------------------\n\ni = 1\nnum_to_plot = 2\nfor folder_name in os.listdir('..\/input\/osic-pulmonary-fibrosis-progression\/train\/'):\n        patient_path = os.path.join('..\/input\/osic-pulmonary-fibrosis-progression\/train\/',folder_name)\n        \n        for i in range(1, num_to_plot+1):     \n            file_path = os.path.join(patient_path, str(i) + '.dcm')\n\n            dataset = pydicom.dcmread(file_path)\n            show_dcm_info(dataset)\n            plot_pixel_array(dataset)\n\n        break\n    ","77ad79d9":"# checking each indiviual training images length\nimg_dir = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/'\nprint('training image folders : {}'.format(len(list(os.listdir('\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train')))))\n\nfor i in list(os.listdir(img_dir)):\n    print('patient ID: {}, length is :{}'.format(i, len(list(os.listdir(img_dir + i)))))\n\n","8981c6ad":"### Note: Still need to work....please suggest and leave a comment once you read my workbook","6eb8c9c0":"### Data distributions","ab01626a":"### Working with images"}}