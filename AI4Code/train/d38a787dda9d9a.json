{"cell_type":{"e22ab17a":"code","060249ce":"code","8434fe8f":"code","a318c7d7":"code","8d2c190c":"code","f8f2ed7f":"code","8cdbb49f":"code","17f63f08":"code","793e55d8":"code","2b835266":"code","99707fb1":"code","b0a94564":"code","cf799462":"code","91a8a75d":"code","39b2f9cb":"code","11b92cbb":"code","0ae7338f":"code","b1509581":"code","5d5ddcd9":"code","ef727a7a":"code","b5780a4d":"code","2060f9b0":"code","eef73bc2":"code","fc7bf080":"code","234c10cd":"code","5b95164e":"code","45181a60":"code","7b8d2d06":"code","3b903197":"code","72485165":"code","a76c60d3":"code","b682e4af":"code","657a9c65":"code","3a25ef21":"code","74ac231d":"code","7eaf4d89":"code","d8da5687":"code","8aadde22":"code","a164514f":"code","5d517037":"code","c00b5666":"code","174384fd":"code","f6d6cfdb":"code","4bb70d34":"markdown","6f11879e":"markdown","02bdb3cb":"markdown","bee13373":"markdown","fa1eff91":"markdown","20849071":"markdown"},"source":{"e22ab17a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","060249ce":"import matplotlib.pyplot as plt\nimport seaborn as sns","8434fe8f":"df_train=pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ndf_test=pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsubmit=pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","a318c7d7":"submit.head()","8d2c190c":"df_train.head()","f8f2ed7f":"df_test.head()","8cdbb49f":"print(df_train.shape)\nprint(df_test.shape)","17f63f08":"#check missing value\nprint(df_train.isnull().sum())\nprint(df_test.isnull().sum())","793e55d8":"#check data type\ndf_train.info()\ndf_test.info()","2b835266":"#summary statistic\ndf_train.describe()","99707fb1":"df_test.describe()","b0a94564":"#Target-histgram\nsns.set()\nplt.hist(df_train[\"pressure\"])\nplt.xlabel(\"pressure\")\nplt.ylabel(\"Frequency\")\nplt.show()","cf799462":"#Feature histgram\nfor i in df_test.columns:\n    plt.hist(df_train[i], alpha=0.5, label=\"train\")\n    plt.hist(df_test[i], alpha=0.5, label=\"test\")\n    plt.xlabel(i)\n    plt.ylabel(\"Frequency\")\n    plt.legend(loc=1)\n    plt.show()","91a8a75d":"x=\"R\"\nsns.boxplot(df_train[x], df_train[\"pressure\"])\nplt.xlabel(x)\nplt.ylabel(\"pressure\")\nplt.show()","39b2f9cb":"x=\"C\"\nsns.boxplot(df_train[x], df_train[\"pressure\"])\nplt.xlabel(x)\nplt.ylabel(\"pressure\")\nplt.show()","11b92cbb":"x=\"time_step\"\nplt.scatter(df_train[x], df_train[\"pressure\"])\nplt.xlabel(x)\nplt.ylabel(\"pressure\")\nplt.show()","0ae7338f":"x=\"u_in\"\nplt.scatter(df_train[x], df_train[\"pressure\"])\nplt.xlabel(x)\nplt.ylabel(\"pressure\")\nplt.show()","b1509581":"x=\"u_out\"\nsns.boxplot(df_train[x], df_train[\"pressure\"])\nplt.xlabel(x)\nplt.ylabel(\"pressure\")\nplt.show()","5d5ddcd9":"#number of unique value\nprint(df_train[\"breath_id\"].nunique())\nprint(df_test[\"breath_id\"].nunique())","ef727a7a":"df_train[\"breath_id\"]","b5780a4d":"def lineplot(df):\n    plt.plot(df[\"time_step\"], df[\"pressure\"])\n    plt.xlabel(\"time_step\")\n    plt.ylabel(\"pressure\")\n    plt.show()","2060f9b0":"breath1=df_train.loc[df_train[\"breath_id\"]==1]\nbreath2=df_train.loc[df_train[\"breath_id\"]==2]\nbreath3=df_train.loc[df_train[\"breath_id\"]==3]\nbreath4=df_train.loc[df_train[\"breath_id\"]==4]","eef73bc2":"lineplot(breath1)","fc7bf080":"lineplot(breath2)","234c10cd":"lineplot(breath3)","5b95164e":"lineplot(breath4)","45181a60":"\nplt.plot(breath1[\"time_step\"], breath1[\"pressure\"])\nplt.xlabel(\"time_step\")\nplt.ylabel(\"pressure\")\nplt.show()","7b8d2d06":"import xgboost as xgb\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold, GroupKFold, KFold, train_test_split\n\nfrom tqdm import tqdm_notebook as tqdm","3b903197":"df_train.head(2)","72485165":"y_train=df_train[\"pressure\"]\nx_train=df_train.drop([\"id\", \"breath_id\", \"pressure\"], axis=1)\n","a76c60d3":"x_test=df_test.drop([\"id\",\"breath_id\"], axis=1)","b682e4af":"x_train","657a9c65":"x_test","3a25ef21":"#GroupID for Group-KFold\ngroups = df_train[\"breath_id\"]\ngroups","74ac231d":"# CV Averaging\nscores = []\ny_pred_test = np.zeros(len(x_test)) #array for predict value\ngkf = GroupKFold(n_splits=5)\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(gkf.split(x_train, y_train, groups))):\n    \n    X_train_, y_train_, groups_train_ = x_train.iloc[train_ix], y_train.iloc[train_ix], groups[train_ix]\n    X_val, y_val, groups_val = x_train.iloc[test_ix], y_train.iloc[test_ix], groups[test_ix]\n    \n    print('Train Groups', np.unique(groups_train_))\n    print('Val Groups', np.unique(groups_val))\n    print(X_train_.shape, X_val.shape)\n    \n    model = lgb.LGBMRegressor(random_state=71, importance_type='gain')\n    \n    model.fit(X_train_, y_train_)\n    y_pred = model.predict(X_val)\n    \n    y_pred_test += model.predict(x_test) # add predict value\n    \n    score =  mean_absolute_error(y_val, y_pred)\n    scores.append(score) \n    \n    \n    print('CV Score of Fold_%d is %f' % (i, score))\n    \n   \n   ","7eaf4d89":"print(scores)\nprint(np.mean(scores))","d8da5687":"y_pred_test_submit=y_pred_test\/5 #n_splits=5\n","8aadde22":"y_pred_test_submit","a164514f":"submit[\"pressure\"]=y_pred_test_submit\nsubmit.head()","5d517037":"submit.to_csv(\"submission.csv\",index=False)","c00b5666":"importance = pd.DataFrame(model.feature_importances_, index=x_train.columns, columns=['importance'])\nimportance","174384fd":"sns.barplot(x=importance.index, y=\"importance\", data=importance)","f6d6cfdb":"#End","4bb70d34":"# relationship for pressure (boxplot & scatter plot)","6f11879e":"# Feature Impact","02bdb3cb":"# histgram","bee13373":"# breath ID","fa1eff91":"# Simple Model","20849071":"# import file"}}