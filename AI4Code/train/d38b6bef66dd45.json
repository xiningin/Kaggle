{"cell_type":{"ea574947":"code","09068622":"code","679fb3d9":"code","89fe0c50":"code","86c96305":"code","75080ed3":"code","372e7bba":"code","e4910df6":"code","4818e577":"code","ddcbee4a":"code","1652c87e":"code","4b2bd39e":"code","27f4050e":"code","cc85c484":"code","a23b5e59":"code","f76e836b":"markdown","f1defb2c":"markdown","e5d64350":"markdown","b68a9f7e":"markdown","df599ddc":"markdown","f3090384":"markdown","751bb0d8":"markdown","7d177ef5":"markdown","3b2f5087":"markdown","3e426e67":"markdown"},"source":{"ea574947":"!pip install -U vega_datasets notebook vega","09068622":"# importing libraries\nimport numpy as np \nimport pandas as pd \nimport os\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly.subplots import make_subplots\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\nfrom ipywidgets import interact, interactive, interact_manual\nimport ipywidgets as widgets\nimport colorlover as cl","679fb3d9":"# loading data from different years\nDIR = '\/kaggle\/input\/kaggle-survey-2018\/'\ndf_free_18 = pd.read_csv(DIR + 'freeFormResponses.csv', low_memory=False, header=[0,1])\ndf_choice_18 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, header=[0,1])\n# Format Dataframes\ndf_free_18.columns = ['_'.join(col) for col in df_free_18.columns]\ndf_choice_18.columns = ['_'.join(col) for col in df_choice_18.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2019\/'\ndf_free_19 = pd.read_csv(DIR + 'other_text_responses.csv', low_memory=False)\ndf_choice_19 = pd.read_csv(DIR + 'multiple_choice_responses.csv', low_memory=False, encoding='latin-1', header=[0,1])\ndf_choice_19.columns = ['_'.join(col) for col in df_choice_19.columns]\n\nDIR = '\/kaggle\/input\/kaggle-survey-2017\/'\ndf_free_17 = pd.read_csv(DIR + 'freeformResponses.csv', low_memory=False)\ndf_choice_17 = pd.read_csv(DIR + 'multipleChoiceResponses.csv', low_memory=False, encoding='latin-1')","89fe0c50":"# processing data for visualizations\n\ntop_count = df_choice_19['Q3_In which country do you currently reside?'].value_counts().head(8).reset_index().rename(columns={'Q3_In which country do you currently reside?': 'count', 'index': 'Country'})\n# taking only russian responders\ndf_choice_17 = df_choice_17.loc[df_choice_17['Country'].isin(['Russia', 'Ukraine', 'Belarus'])]\ndf_choice_18 = df_choice_18.loc[df_choice_18['Q3_In which country do you currently reside?'].isin(['Russia', 'Ukraine', 'Belarus'])]\ndf_choice_19 = df_choice_19.loc[df_choice_19['Q3_In which country do you currently reside?'].isin(['Russia', 'Ukraine', 'Belarus'])]\n\ndef get_age(x):\n    \"\"\"\n    Convert numerical age to categories.\n    \"\"\"\n    if 18 <= x <= 21:\n        return '18-21'\n    elif 22 <= x <= 24:\n        return '22-24'\n    elif 25 <= x <= 29:\n        return '25-29'\n    elif 30 <= x <= 34:\n        return '30-34'\n    elif 35 <= x <= 39:\n        return '35-39'\n    elif 40 <= x <= 44:\n        return '40-44'\n    elif 45 <= x <= 49:\n        return '45-49'\n    elif 50 <= x <= 54:\n        return '50-54'\n    elif 55 <= x <= 59:\n        return '55-59'\n    elif 60 <= x <= 69:\n        return '60-69'\n    elif x >= 70:\n        return '70+'\n    \n# create a new age column with the same name and unique values in all datasets\ndf_choice_17['Age_'] = df_choice_17['Age'].apply(lambda x: get_age(x))\ndf_choice_18['Age_'] = df_choice_18['Q2_What is your age (# years)?']\ndf_choice_18.loc[df_choice_18['Age_'].isin(['70-79', '80+']), 'Age_'] = '70+'\ndf_choice_19['Age_'] = df_choice_19['Q1_What is your age (# years)?']\n\n# renaming columns so that it would be easier to work with them\ndf_choice_17 = df_choice_17.rename(columns={'GenderSelect': 'Gender', 'FormalEducation': 'Degree'})\ndf_choice_18 = df_choice_18.rename(columns={'Q1_What is your gender? - Selected Choice': 'Gender', 'Q9_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree',\n                                            'Q3_In which country do you currently reside?': 'Country'})\ndf_choice_19 = df_choice_19.rename(columns={'Q2_What is your gender? - Selected Choice': 'Gender', 'Q10_What is your current yearly compensation (approximate $USD)?': 'Salary',\n                                            'Q4_What is the highest level of formal education that you have attained or plan to attain within the next 2 years?': 'Degree',\n                                            'Q3_In which country do you currently reside?': 'Country'})\ndf_choice_19['Degree'] = df_choice_19['Degree'].replace({'Master\u00e2\u0080\u0099s degree': 'Master\u2019s degree', 'Bachelor\u00e2\u0080\u0099s degree': 'Bachelor\u2019s degree',\n                                                         'Some college\/university study without earning a bachelor\u00e2\u0080\u0099s degree': 'Some college\/university study without earning a bachelor\u2019s degree'})\ndf_choice_17['Degree'] = df_choice_17['Degree'].replace({\"Master's degree\": 'Master\u2019s degree', \"Bachelor's degree\": 'Bachelor\u2019s degree',\n                                                         \"Some college\/university study without earning a bachelor's degree\": 'Some college\/university study without earning a bachelor\u2019s degree'})\n\n# changing salary values to the same categories\ndf_choice_19.loc[df_choice_19['Salary'].isin(['$0-999', '1,000-1,999', '2,000-2,999', '3,000-3,999', '4,000-4,999', '5,000-7,499', '7,500-9,999']), 'Salary'] = '0-10,000'\ndf_choice_19.loc[df_choice_19['Salary'].isin(['10,000-14,999', '15,000-19,999']), 'Salary'] = '10-20,000'\ndf_choice_19.loc[df_choice_19['Salary'].isin(['20,000-24,999', '25,000-29,999']), 'Salary'] = '20-30,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '30,000-39,999', 'Salary'] = '30-40,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '40,000-49,999', 'Salary'] = '40-50,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '50,000-59,999', 'Salary'] = '50-60,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '60,000-69,999', 'Salary'] = '60-70,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '70,000-79,999', 'Salary'] = '70-80,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '80,000-89,999', 'Salary'] = '80-90,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '90,000-99,999', 'Salary'] = '90-100,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '100,000-124,999', 'Salary'] = '100-125,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '125,000-149,999', 'Salary'] = '125-150,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '200,000-249,999', 'Salary'] = '200-250,000'\ndf_choice_19.loc[df_choice_19['Salary'] == '250,000-299,999', 'Salary'] = '250-300,000'\ndf_choice_18.loc[df_choice_18['Salary'].isin(['400-500,000', '300-400,000']), 'Salary'] = '300,000-500,000'","86c96305":"# Functions\n\n# some of the code is taken from my old kernel: https:\/\/www.kaggle.com\/artgor\/russia-usa-india-and-other-countries\n\ndef plot_gender_vars(var1='', title_name='', country='Russia'):\n    \"\"\"\n    Make separate count plots for genders over years.\n    \"\"\"\n    colors = cl.scales['3']['qual']['Paired']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    fig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Male', 'Female'), print_grid=False)\n    map_dict = {'30-34': 4, '40-44': 6, '25-29': 3, '35-39': 5, '22-24': 2, '18-21': 1, '45-49': 7, '50-54': 8, '55-59': 9, '70+': 11, '60-69': 10}\n    # there are too little responders, who don't identify as Male\/Female, I have decided that I can use the most common genders.\n    for j, c in enumerate(['Male', 'Female']):\n        data = []\n        for i, df in enumerate([df_choice_17.loc[df_choice_17['Country'] == country],\n                                df_choice_18.loc[df_choice_18['Country'] == country],\n                                df_choice_19.loc[df_choice_19['Country'] == country]]):\n            grouped = df.loc[(df['Gender'] == c), var1].value_counts().sort_index().reset_index()\n            grouped['Age_'] = grouped['Age_'] \/ np.sum(grouped['Age_'])\n            grouped['sorting'] = grouped['index'].apply(lambda x: map_dict[x])\n            grouped = grouped.sort_values('sorting', ascending=True)\n            \n            trace = go.Bar(\n                x=grouped['index'],\n                y=grouped.Age_,\n                name=names[i],\n                marker=dict(color=colors[i]),\n                showlegend=True if j == 0 else False,\n                legendgroup=i\n            )\n            fig.append_trace(trace, 1, j + 1)    \n\n    fig['layout'].update(height=400, width=1000, title=f'Kagglers from {country} by {title_name} and gender');\n    return fig\n\n\ndef plot_var(var1='', title_name='', country=''):\n    \"\"\"\n    Plot one variable over years\n    \"\"\"\n    colors = cl.scales['3']['qual']['Paired']\n    names = {0: '2017', 1: '2018', 2: '2019'}\n    \n    data = []\n    for i, df in enumerate([df_choice_17.loc[df_choice_17['Country'] == country],\n                                df_choice_18.loc[df_choice_18['Country'] == country],\n                                df_choice_19.loc[df_choice_19['Country'] == country]]):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        grouped[var1] = grouped[var1] \/ np.sum(grouped[var1])\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=1000, title=f'Kagglers from {country} by {title_name}');  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndef plot_var_salary(var1='', title_name='', normalize: bool = False, country='Russia'):\n    \"\"\"\n    Plot salary over years\n    \"\"\"\n    colors = cl.scales['3']['qual']['Paired']\n    names = {0: '2018', 1: '2019'}\n    \n    data = []\n    for i, df in enumerate([df_choice_18.loc[df_choice_18['Country'] == country],\n                                df_choice_19.loc[df_choice_19['Country'] == country]]):\n        grouped = df[var1].value_counts().sort_index().reset_index()\n        if normalize:\n            grouped[var1] = grouped[var1] \/ np.sum(grouped[var1])\n        map_dict = {'0-10,000': 0,\n                    '10-20,000': 1,\n                    '100-125,000': 10,\n                    '125-150,000' : 11,\n                    '150-200,000': 12,\n                    '20-30,000': 2,\n                    '200-250,000': 13,\n                    '250-300,000': 14,\n                    '30-40,000': 3,\n                    '300,000-500,000': 15,\n                    '40-50,000': 4,\n                    '50-60,000': 5,\n                    '60-70,000': 6,\n                    '70-80,000': 7,\n                    '80-90,000': 8,\n                    '90-100,000': 9,\n                    '> $500,000': 16,\n                    'I do not wish to disclose my approximate yearly compensation': 17}\n        grouped['sorting'] = grouped['index'].apply(lambda x: map_dict[x])\n        grouped = grouped.loc[grouped['index'] != 'I do not wish to disclose my approximate yearly compensation']\n        grouped = grouped.sort_values('sorting', ascending=True)\n        trace = go.Bar(\n            x=grouped['index'],\n            y=grouped[var1],\n            name=names[i],\n            marker=dict(color=colors[i]),\n            legendgroup=i\n        )\n        data.append(trace)\n    layout = dict(height=400, width=1000, title=f'Kagglers from {country} by {title_name}');  \n    fig = dict(data=data, layout=layout)\n    return fig\n\n\ndef plot_choice_var(var='', title_name='', country='Russia'):\n    \"\"\"\n    Plot a variable, in which responders could select several answers.\n    \"\"\"\n    col_names = [col for col in df_choice_19.columns if f'{var}_Part' in col]\n    data = []\n    small_df = df_choice_19.loc[df_choice_19['Country'] == country, col_names]\n    text_values = [col.split('- ')[2] for col in col_names]\n    counts = []\n    for m, n in zip(col_names, text_values):\n        if small_df[m].nunique() == 0:\n            counts.append(0)\n        else:\n            counts.append(sum(small_df[m] == n))\n    trace = go.Bar(\n        x=text_values,\n        y=counts,\n        name='c',\n        marker=dict(color='silver'),\n        showlegend=False\n    )\n    data.append(trace)    \n    fig = go.Figure(data=data)\n    fig['layout'].update(height=400, width=1000, title=f'Popular {title_name} in {country}');\n    return fig","75080ed3":"df_count_russia = pd.DataFrame({'Year': [2017, 2018, 2019], 'Count': [df_choice_17.loc[df_choice_17['Country'] == 'Russia'].shape[0],\n                                                                      df_choice_18.loc[df_choice_18['Country'] == 'Russia'].shape[0],\n                                                                      df_choice_19.loc[df_choice_19['Country'] == 'Russia'].shape[0]]})\ndf_count_belarus = pd.DataFrame({'Year': [2017, 2018, 2019], 'Count': [df_choice_17.loc[df_choice_17['Country'] == 'Belarus'].shape[0],\n                                                                       df_choice_18.loc[df_choice_18['Country'] == 'Belarus'].shape[0],\n                                                                       df_choice_19.loc[df_choice_19['Country'] == 'Belarus'].shape[0]]})\ndf_count_ukraine = pd.DataFrame({'Year': [2017, 2018, 2019], 'Count': [df_choice_17.loc[df_choice_17['Country'] == 'Ukraine'].shape[0],\n                                                                       df_choice_18.loc[df_choice_18['Country'] == 'Ukraine'].shape[0],\n                                                                       df_choice_19.loc[df_choice_19['Country'] == 'Ukraine'].shape[0]]})\ntop_count = top_count.sort_values('count')\n\nfig = make_subplots(rows=2, cols=2)\nfig.add_trace(go.Bar(y=top_count['Country'], x=top_count['count'], orientation='h', name='Number of respondents by country in 2019'), row=1, col=1)\nfig.add_trace(go.Bar(x=df_count_russia['Year'], y=df_count_russia['Count'], name='Number of responders from Russia by year'), row=1, col=2)\nfig.add_trace(go.Bar(x=df_count_belarus['Year'], y=df_count_belarus['Count'], name='Number of responders from Belarus by year'), row=2, col=1)\nfig.add_trace(go.Bar(x=df_count_ukraine['Year'], y=df_count_ukraine['Count'], name='Number of responders from Ukraine by year'), row=2, col=2)\n\nfig['layout'].update(height=600, width=1000);\niplot(fig);","372e7bba":"fig = plot_gender_vars(var1='Age_', title_name='age', country='Russia')\niplot(fig);\nfig = plot_gender_vars(var1='Age_', title_name='age', country='Belarus')\niplot(fig);\nfig = plot_gender_vars(var1='Age_', title_name='age', country='Ukraine')\niplot(fig);","e4910df6":"fig = plot_var(var1='Degree', title_name='degree', country='Russia')\niplot(fig);\nfig = plot_var(var1='Degree', title_name='degree', country='Belarus')\niplot(fig);\nfig = plot_var(var1='Degree', title_name='degree', country='Ukraine')\niplot(fig);","4818e577":"fig = plot_var_salary(var1='Salary', title_name='salary', country='Russia')\niplot(fig);\nfig = plot_var_salary(var1='Salary', title_name='salary', country='Belarus')\niplot(fig);\nfig = plot_var_salary(var1='Salary', title_name='salary', country='Ukraine')\niplot(fig);","ddcbee4a":"fig = plot_choice_var(var='Q12', title_name='resources', country='Russia')\niplot(fig);\nfig = plot_choice_var(var='Q12', title_name='resources', country='Belarus')\niplot(fig);\nfig = plot_choice_var(var='Q12', title_name='resources', country='Ukraine')\niplot(fig);","1652c87e":"fig = plot_choice_var(var='Q18', title_name='languages', country='Russia')\niplot(fig);\nfig = plot_choice_var(var='Q18', title_name='languages', country='Belarus')\niplot(fig);\nfig = plot_choice_var(var='Q18', title_name='languages', country='Ukraine')\niplot(fig);","4b2bd39e":"fig = plot_choice_var(var='Q28', title_name='libraries', country='Russia')\niplot(fig);\nfig = plot_choice_var(var='Q28', title_name='libraries', country='Belarus')\niplot(fig);\nfig = plot_choice_var(var='Q28', title_name='libraries', country='Ukraine')\niplot(fig);","27f4050e":"q28_free = df_free_19['Q28_OTHER_TEXT'].str.lower().value_counts().reset_index()\nprint(f\"Catboost users: {q28_free.loc[q28_free['index'] == 'catboost', 'Q28_OTHER_TEXT'].values[0]}\")\nprint(f\"Catalyst users: {q28_free.loc[q28_free['index'] == 'catalyst', 'Q28_OTHER_TEXT'].values[0]}\")","cc85c484":"fig = plot_choice_var(var='Q25', title_name='ml tools', country='Russia')\niplot(fig);\nfig = plot_choice_var(var='Q25', title_name='ml tools', country='Belarus')\niplot(fig);\nfig = plot_choice_var(var='Q25', title_name='ml tools', country='Ukraine')\niplot(fig);","a23b5e59":"q25_free = df_free_19['Q25_OTHER_TEXT'].str.lower().value_counts().reset_index()\nprint(f\"Catalyst users: {q25_free.loc[q25_free['index'] == 'catalyst', 'Q25_OTHER_TEXT'].values[0]}\")","f76e836b":"While scikit-learn is a top popular library for obvious reasons, there are other interesting libraries.\n- LGB and XGB are very popular as they provide great results and are easy to use.\n- Pytorch was able to reach Keras by the number of users and is ahead of Tensorflow. I think in future Pytorch will be even more popular as it is often more convenient than Tensoflow;","f1defb2c":"Not surprisingly, the average age is increasing over time. One of the reasons is that people grow older over time (obviously :)). Another reason - more elder experts are switching career from other spheres to DS.\n\nIt is interesting to notice that most of women are younger than men. I suppose it means that more women go into DS after university which is great!","e5d64350":"Not only age progresses, but also the degree of education, We can see that more and more people get masters and doctor degrees and provide a valueable expertise.\n\nIt is interesting to notice that most people from Ukraine have master's degree and most people in Belarus are bachelors.","b68a9f7e":"There are several interesting things about popular programming languages in Russia:\n- Python and SQL are, of course, top used languages;\n- R isn't popular. In USA software for statistics was developed gradually, R appeared a long ago and is currently widely used. In USSR R wasn't used, so it wasn't able to become popular. Also there are not as many clinical trials in Russia, so there is no such demand for R;\n- a lot of kagglers have background in software programming, as a result a lot of porple know C++, Bash and other languages;\n- Java is quite popular in Belarus;","df599ddc":"But such questions also provide a lot of interesting information if we have a look at free form questions!\nThere are a lot of people using [Catboost](https:\/\/github.com\/catboost\/catboost). It wasn't able to get in the list of the main libraries, but maybe next year it will change :)\n\nAnd there are 4 people using [Catalyst](https:\/\/github.com\/catalyst-team\/catalyst) - a higher level framework build on the top of Pytorch.\nBoth of these libraries are developed in Russia.","f3090384":"In our job using correct ML tools could be crucial to the success. I'd like to point out that automated data augmentation is commonly used. [Albumentations](https:\/\/github.com\/albu\/albumentations) is a library developed by the members of ods.ai community and is currently used in all image competitions.\n\nAnd even more people wrote that they use Catalyst here :)","751bb0d8":"If we talk about salaries, it is important to understand several things:\n- some Russians work in USA and other countries and as a result have quite high salaries;\n- those working in Moscow and some other big cities have good salaries;\n- and people working in other cities usually have much lower salary.\n\n100k is possible, but difficult to achieve - this is usually a level of head of DS.\n50k is a level of a senior DS.\n~30k is a level of a middle DS.\n\nBy the way, did you notice a rich person with 500k$+? I wonder who that person is :) And there is one rich person from Ukraine!","7d177ef5":"## Kaggle ML & DS Survey\n\nThis is a fork of my kernel https:\/\/www.kaggle.com\/artgor\/a-look-at-russian-kagglers-over-time\nI was asked to do a similar analysis for CIS (Commonwealth of Independent States) countries, so in this kernel I do a similar analysis and compare Russia, Ukraine and Belarus (Ukraine is currently not is CIS, so let's condider it to be an ex-member).","3b2f5087":"## General information\n\nRussian community on Kaggle is quite strong. We started taking part in Kaggle competitions long ago and most competitions have at least several teams in medal zone, currently there are a lot of russian Grandmasters. It is worth noticing, that most of them are a part ods.ai - an open DS community, which has more than 38k users.\n\nIf we look at other countries, we can see that the number of respondents in Russia is in the 5th place in the overall ranking (excluding \"other\").\n\nMore than 600 Russians took part in the survey this year. Why this number is lower than the last year? I think this year the information of the survey was less spread, not sure why.\nThere were also 68 responders from Belarus and 191 from Ukraine.","3e426e67":"## Professional skills\n\nIt isn't surprising that Kaggle is one of the main sources of getting information :)\nBut is is worth noticing that slack communities aren't far behind. And of course, the most popular of them is ods.ai.\n\nFor some reason slack communities are less popular in Ukraine!"}}