{"cell_type":{"2b885650":"code","30362714":"code","9e09db63":"code","3a580031":"code","1d322725":"code","93ed3db5":"code","57d0a149":"code","509497c4":"code","8db2487a":"code","1a133772":"code","4b71da37":"code","79d71645":"code","5488114d":"code","537c67be":"code","74ea0953":"code","fc3e4119":"code","17fb1dd5":"code","8c3c7649":"code","5a2578a8":"code","7264fba5":"code","0a1f5353":"code","3d307141":"markdown"},"source":{"2b885650":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom keras.preprocessing import image\nimport glob\nfrom keras.preprocessing.image import ImageDataGenerator as idg\nfrom keras.layers import Dropout\nimport math\nfrom keras.preprocessing import image\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv2D, Input, ZeroPadding2D,Dropout, BatchNormalization, Activation, MaxPooling2D, Flatten, Dense\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.utils import shuffle\nimport cv2\nimport sklearn\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nfrom os import listdir\n\n\n%matplotlib inline\n\nimport keras,os\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D , Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\nimport os\nimport sys\nimport keras\nkeras.__version__\nfrom keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.optimizers import SGD\n%matplotlib inline\nimport glob\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\nimport tensorflow as tf\nimport numpy as np\nimport sklearn\nimport cv2\n\nimport imageio as im\nfrom keras import models\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ModelCheckpoint\nfrom os import listdir\ntf.keras.preprocessing.image.load_img","30362714":"from mlxtend.plotting import plot_confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ncm = np.array([[890,52 ],\n                   [73,1402]])\n\nfig, ax = plot_confusion_matrix(conf_mat=binary1)\nplot_confusion_matrix(cm, target_names, title='Confusion Matrix')\nplt.show()","9e09db63":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3a580031":"base_dir= \"\/kaggle\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\"\nos.listdir(base_dir)","1d322725":"tuberculosis_data= \"\/kaggle\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Tuberculosis\"\nprint(\"tuberculosis images :\\n\" ,os.listdir(tuberculosis_data)[:5])\n\nnormal_data= \"\/kaggle\/input\/tuberculosis-tb-chest-xray-dataset\/TB_Chest_Radiography_Database\/Normal\"\nprint(\"\\nnormal images :\\n\" ,os.listdir(normal_data)[:5])","93ed3db5":"print(\"no. of tuberculosis images :\" ,len(os.listdir(tuberculosis_data)))\nprint(\"\\nno. of normal images :\" ,len(os.listdir(normal_data)))","57d0a149":"nrows= 5\nncols= 6\npic_index= 0\n\nfig= plt.gcf()\nfig.set_size_inches(ncols*4, nrows*4)\npic_index+=8\n\ntuberculosis_img = [os.path.join(tuberculosis_data, image) for image in os.listdir(tuberculosis_data)[pic_index-8:pic_index]]\nnormal_img = [os.path.join(normal_data, image) for image in os.listdir(normal_data)[pic_index-8:pic_index]]\n\nfor i, image_path in enumerate(tuberculosis_img+normal_img):\n    sp = plt.subplot(nrows, ncols, i + 1)\n    sp.axis('Off') \n\n    img = mpimg.imread(image_path)\n    plt.imshow(img)\n\nplt.show()","509497c4":"# generating training data\nprint(\"training data :\")\ntrain_datagen= ImageDataGenerator(rescale=1\/255, zoom_range=0.2,  width_shift_range= 0.2, height_shift_range=0.2, shear_range=0.2, \n                                   horizontal_flip=True,  validation_split = 0.2)\n\ntrain_data = train_datagen.flow_from_directory(base_dir, \n                                              target_size= (64,64),\n                                              class_mode= \"binary\",\n                                              batch_size=32,\n                                              subset= \"training\"\n                                              )\n\n# genarating validation data\nprint(\"\\nvalidation data :\")\nval_datagen= ImageDataGenerator(rescale= 1\/255, validation_split= 0.2)\n\nval_data= train_datagen.flow_from_directory(base_dir, \n                                              target_size= (64,64),\n                                              class_mode= \"binary\",\n                                              batch_size=32,\n                                              shuffle= False,\n                                              subset= \"validation\"\n                                              )","8db2487a":"#1 model\nfrom tensorflow.keras.layers import BatchNormalization\nfrom keras.layers import Dropout\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',input_shape=(64,64,3))) #firstlayer\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (9, 9), activation='relu',input_shape=(64,64,3))) #secondlayer\nmodel.add(layers.MaxPooling2D((4, 4)))\n\nmodel.add(layers.Flatten())\n\n\nmodel.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu', input_dim = 64)) \nmodel.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","1a133772":"model.fit(train_data, validation_data=val_data, epochs=15)","4b71da37":"prediction= model.predict(val_data, steps=np.ceil(val_data.samples\/val_data.batch_size), verbose=2)\nprediction= (prediction > 0.5)\nprediction","79d71645":"val_labels=val_data.classes\nval_labels","5488114d":"val_labels=val_data.classes\nval_labels","537c67be":"\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom mlxtend.plotting import plot_confusion_matrix\ncm= confusion_matrix(val_data.classes, prediction)\nplot_confusion_matrix(cm, figsize=(5,5))","74ea0953":"print(accuracy_score(val_data.classes, prediction))\nprint(classification_report(val_data.classes, prediction))","fc3e4119":"from tensorflow.keras.layers import BatchNormalization\nfrom keras.layers import Dropout\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(16, (3, 3), activation='relu',input_shape=(64,64,3))) #firstlayer\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',input_shape=(64,64,3))) #firstlayer\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(32, (6, 6), activation='relu',input_shape=(64,64,3))) #firstlayer\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (6, 6), activation='relu',padding=\"same\",input_shape=(64,64,3))) #secondlayer\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\n\n\nmodel.add(Dense(units = 64, kernel_initializer = 'uniform', activation = 'relu', input_dim = 64)) \nmodel.add(Dense(units = 32, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nmodel.summary()","17fb1dd5":"model.fit(train_data, validation_data=val_data, epochs=15)","8c3c7649":"prediction= model.predict(val_data, steps=np.ceil(val_data.samples\/val_data.batch_size), verbose=2)\nprediction= (prediction > 0.5)\nprediction","5a2578a8":"val_labels=val_data.classes\nval_labels","7264fba5":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom mlxtend.plotting import plot_confusion_matrix\ncm= confusion_matrix(val_data.classes, prediction)\nplot_confusion_matrix(cm, figsize=(5,5))","0a1f5353":"print(accuracy_score(val_data.classes, prediction))\nprint(classification_report(val_data.classes, prediction))","3d307141":"# model2"}}