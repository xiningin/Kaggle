{"cell_type":{"66939eff":"code","be2831af":"code","8b1cc74a":"code","57b8da0d":"code","1878aa52":"code","4b46b32d":"code","7726a808":"code","3c98f607":"markdown","6bab01af":"markdown","fbb909ee":"markdown","d30b8ef2":"markdown"},"source":{"66939eff":"import ast\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom dask import bag\nfrom tqdm import tqdm\nfrom PIL import Image, ImageDraw","be2831af":"def entropy_it(x):\n    counts = np.bincount(x)\n    p = counts[counts > 0] \/ float(len(x))\n    # compute Shannon entropy in bits\n    return -np.sum(p * np.log2(p))\n\ndef draw_it(strokes):\n    image = Image.new(\"P\", (256,256), color=255)\n    draw = ImageDraw.Draw(image)\n    for stroke in ast.literal_eval(strokes):\n        for i in range(len(stroke[0])-1):\n            draw.line([stroke[0][i], stroke[1][i], stroke[0][i+1], stroke[1][i+1]], fill=0, width=5)\n    image = np.array(image)\n    return entropy_it(image.flatten()), image\n\ndef plot_it(entropy, images, indices, n=5):\n    fig, axs = plt.subplots(nrows=n, ncols=n, figsize=(12, 10))\n    for i, j in enumerate(indices[0][:n*n]):\n        ax = axs[i \/\/ n, i % n]\n        ax.set_title(\"%.4f\" % entropy[j])\n        ax.imshow(images[j], cmap=\"gray\")\n        ax.set_yticks([])\n        ax.set_xticks([])\n        plt.setp(ax.spines.values(), color=\"red\")\n    plt.subplots_adjust(bottom=-0.2)\n    plt.show()","8b1cc74a":"reader = pd.read_csv('..\/input\/train_simplified\/star.csv', index_col=['key_id'], chunksize=1024)\n\ndata = []\nfor chunk in tqdm(reader):\n    entropybag = bag.from_sequence(chunk.drawing.values).map(draw_it)\n    data.extend(entropybag.compute()) # PARALLELIZE\n\nentropy, images = zip(*data)","57b8da0d":"threshold = 1\nlower = np.percentile(entropy, threshold)\nupper = np.percentile(entropy, 100 - threshold)\nprint(np.min(entropy), np.max(entropy))\nprint(lower, upper)","1878aa52":"plt.title(\"Histogram\")\nplt.xlabel('entropy')\nplt.ylabel('count')\nplt.hist(entropy, bins=100)\nplt.axvline(x=lower, color='r')\nplt.axvline(x=upper, color='r')","4b46b32d":"plot_it(entropy, images, np.where(entropy < lower))","7726a808":"plot_it(entropy, images, np.where(entropy > upper))","3c98f607":"## Keep 98% of samples","6bab01af":"## Low entropy samples","fbb909ee":"# Find outliers with unusual entropy\nInspired by the pre-processing step from the paper http:\/\/openaccess.thecvf.com\/content_cvpr_2018\/CameraReady\/2763.pdf\n\n> <b>Noise Removal with Image Entropy<\/b>\n> Key ingredient to a successful sketch center loss is the guarantee of non-noisy data (outliers), as it will significantly affect the class feature centers. However, sketch data collected with crowdsourcing are inevitable to noise, where we propose a noisy data removal technique to alleviate such issue by resorting to image entropy. Given a category of sketch, we can get entropy for each sketch and the overall entropy distribution on a category basis. We empirically find that keeping the middle 90% of each category as normal samples gives us best results. In Figure 4, we visualize the entropy histogram of star samples in our training set. If we choose the middle 90% samples as normal samples for star category, we can calculate and get the 0.05 and 0.95 percentiles of star images entropy as 0.1051 and 0.1721, respectively. We then treat the remaining samples as outliers or noise points (entropy \u2208 [0, 0.1051)   (0.1721, 1]). It can be observed that low entropy sketches tend to be overly-abstract, yet high entropy ones being messy, sometimes with meaningless scribbles. Nevertheless, sketch data falling into middle entropy range present more consistent and reasonable drawings.\n","d30b8ef2":"## High entropy samples"}}