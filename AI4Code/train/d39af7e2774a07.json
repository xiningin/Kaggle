{"cell_type":{"0941f27f":"code","2716941d":"code","defdd2ae":"code","7e37a65f":"code","c724cb26":"code","6f3e99bf":"code","8d46dbcc":"code","13dced6d":"code","2164f4d3":"code","0302b194":"code","d6af087a":"code","912a9bdd":"code","9f6268fb":"code","e915715e":"markdown","5bfc9453":"markdown","8f5a2083":"markdown","68987dc4":"markdown","8c46272b":"markdown","6fad4ff0":"markdown","c13fe4a8":"markdown"},"source":{"0941f27f":"import tensorflow as tf\nimport os\nimport numpy as np\nfrom tensorflow.keras.utils import to_categorical\n\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nif not os.path.isdir('models'):\n    os.mkdir('models')\n    \nprint('TensorFlow version:', tf.__version__)\nprint('Is using GPU?', tf.test.is_gpu_available())","2716941d":"import h5py\n\n# Open the file as readonly\nh5f = h5py.File('..\/input\/street-view-house-nos-h5-file\/SVHN_single_grey1.h5', 'r')\n\nh5f.keys()","defdd2ae":"# Load the training, test and validation set\nX_train = h5f['X_train'][:]\ny_train = h5f['y_train'][:]\nX_test = h5f['X_test'][:]\ny_test = h5f['y_test'][:]","7e37a65f":"print(X_train.shape, y_train.shape)\nprint(X_test.shape, y_test.shape)","c724cb26":"class_names = '0 1 2 3 4 5 6 7 8 9'.split(' ')\n\ndef show_random_examples(x,y,p):\n  indices = np.random.choice(range(x.shape[0]),10,replace = False)\n\n  x = x[indices]\n  y = y[indices]\n  p = p[indices]\n  x = x.reshape(x.shape[0],32,32)\n\n  plt.figure(figsize=(10,5))\n  for i in range(10):\n    plt.subplot(2,5,1+i)\n    plt.imshow(x[i],cmap = 'gray')\n    plt.xticks([])\n    plt.yticks([])\n    col = 'green' if y[i] == p[i] else 'red'\n    plt.xlabel(p[i] , color = col,fontsize = 20)\n  plt.show()","6f3e99bf":"show_random_examples(X_train, y_train, y_train)","8d46dbcc":"show_random_examples(X_test, y_test, y_test)","13dced6d":"from tensorflow.keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom tensorflow.keras.layers import Dropout, Flatten, Input, Dense\n\ndef create_model():\n  def add_conv_block(model, num_filters):\n    model.add(Conv2D(num_filters,3,activation='relu', padding = 'same'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(num_filters,3, activation= 'relu'))\n    model.add(MaxPooling2D(pool_size=2))\n    model.add(Dropout(0.5))\n    return model\n  \n  model = tf.keras.models.Sequential()\n  model.add(Input(shape=(32,32,1)))\n\n  model = add_conv_block(model, 32)\n  model = add_conv_block(model, 64)\n  model = add_conv_block(model, 128)\n\n  model.add(Flatten())\n  model.add(Dense(128, activation=\"relu\"))\n  model.add(Dense(10,activation = 'softmax'))\n\n  model.compile(\n      loss = 'categorical_crossentropy',\n      optimizer = 'adam', metrics = ['accuracy']\n  )\n  return model\n\nmodel = create_model()\nmodel.summary()\n\n","2164f4d3":"X_train   = X_train.reshape(-1,32,32,1)\nX_test    = X_test.reshape(-1,32,32,1)\ny_train   = to_categorical(y_train, num_classes = 10)\ny_test    = to_categorical(y_test, num_classes = 10)","0302b194":"h = model.fit(\n    X_train\/255.,y_train,\n    validation_data = (X_test\/255.,y_test),\n    epochs=20,batch_size=32,\n#     callbacks=[\n#                tf.keras.callbacks.EarlyStopping(monitor='val_accuracy',patience=3),\n#                tf.keras.callbacks.ModelCheckpoint(\n#                    'models\/model_{val_accuracy:.3f}.h5',\n#                    svae_best_only=True,save_weights_only=False,\n#                    monitor='val_accuracy'\n#                )\n#     ]\n)","d6af087a":"accs = h.history['accuracy']\nval_accs = h.history['val_accuracy']\n\nplt.plot(range(len(accs)),accs, label = 'Training')\nplt.plot(range(len(accs)), val_accs, label = 'Validation')\nplt.legend()\nplt.show()","912a9bdd":"preds = model.predict(X_test\/255.)","9f6268fb":"show_random_examples(X_test,y_test.argmax(axis = 1),preds.argmax(axis = 1))","e915715e":"<a id =\"Task3\"><\/a>\n### Task 3: Visualize Examples","5bfc9453":"## Image Classification with CNN using Keras\n### SVHN dataset\n\n* [Task 1: Import Libraries](#Task1)\n* [Task 2: Preprocess Data](#Task2)\n* [Task 3: Visualize Examples](#Task3)\n* [Task 4: Create Model](#Task4)\n* [Task 5: Train the Model](#Task5)\n* [Task 6: Final Predictions](#Task6)","8f5a2083":"<a id =\"Task2\"><\/a>\n### Task 2: Preprocess Data","68987dc4":"<a id=\"Task1\"><\/a>\n### Task 1: Import Libraries","8c46272b":"<a id=\"Task1\"><\/a>\n### Task 6: Final Predictions","6fad4ff0":"<a id=\"Task4\"><\/a>\n### Task 4: Create Model","c13fe4a8":"<a id=\"Task1\"><\/a>\n### Task 5: Train the Model"}}