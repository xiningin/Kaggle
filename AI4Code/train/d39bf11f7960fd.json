{"cell_type":{"965db065":"code","6fe466dd":"code","c92c725c":"code","7b9384f4":"code","ba315191":"code","bf92c941":"code","92e86ab7":"code","fb18401c":"code","6d4048bc":"code","820a9220":"code","9d12cc10":"code","05a123fd":"code","004fa414":"markdown","799a0b69":"markdown","f22db90f":"markdown"},"source":{"965db065":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fe466dd":"!pip install fastai --upgrade -q","c92c725c":"from fastai.vision.all import *\nfrom fastai.callback.fp16 import *\nfrom fastai.vision.widgets import *","7b9384f4":"tanks = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                get_items = get_image_files,\n                splitter = RandomSplitter(seed = 42),\n                get_y = parent_label,\n                item_tfms= Resize(460),\n                batch_tfms = aug_transforms(size = 224, min_scale = 0.75))","ba315191":"dls = tanks.dataloaders(\"..\/input\/war-tank-images-dataset\/train\/\",bs = 32)","bf92c941":"#dls.show_batch(nrows = 2, ncols = 3)","92e86ab7":"# load image\nfrom matplotlib import pyplot\n\nfrom PIL import Image\nimage = Image.open('..\/input\/war-tank-images-dataset\/train\/war_tank (120).jpg')\n# horizontal flip\nhoz_flip = image.transpose(Image.FLIP_LEFT_RIGHT)\n# vertical flip\nver_flip = image.transpose(Image.FLIP_TOP_BOTTOM)\n# plot all three images using matplotlib\npyplot.subplot(311)\npyplot.imshow(image)\npyplot.subplot(312)\npyplot.imshow(hoz_flip)\npyplot.subplot(313)\npyplot.imshow(ver_flip)\npyplot.show()","fb18401c":"# load image\nimage = Image.open('..\/input\/war-tank-images-dataset\/train\/war_tank (120).jpg')\n# plot original image\npyplot.subplot(311)\npyplot.imshow(image)\n# rotate 45 degrees\npyplot.subplot(312)\npyplot.imshow(image.rotate(45))\n# rotate 90 degrees\npyplot.subplot(313)\npyplot.imshow(image.rotate(90))\npyplot.show()\n#rotates 270 degrees\npyplot.imshow(image.rotate(270))\npyplot.show()","6d4048bc":"#Codes from Bulent Siyah https:\/\/www.kaggle.com\/bulentsiyah\/learn-opencv-by-examples-with-python\n\n#Sharpening\n\n\n\nimage = cv2.imread('\/kaggle\/input\/war-tank-images-dataset\/train\/war_tank (120).jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\nplt.figure(figsize=(20, 20))\nplt.subplot(1, 2, 1)\nplt.title(\"Original\")\nplt.imshow(image)\n\n# Create our shapening kernel, we don't normalize since the \n# the values in the matrix sum to 1\nkernel_sharpening = np.array([[-1,-1,-1], \n                              [-1,9,-1], \n                              [-1,-1,-1]])\n\n# applying different kernels to the input image\nsharpened = cv2.filter2D(image, -1, kernel_sharpening)\n\n\nplt.subplot(1, 2, 2)\nplt.title(\"Image Sharpening\")\nplt.imshow(sharpened)\n\nplt.show()","820a9220":"from PIL import Image\n# load image\nimage = Image.open('..\/input\/war-tank-images-dataset\/train\/war_tank (120).jpg')\n# create a cropped image\ncropped = image.crop((100, 100, 200, 200))\n# show cropped image\npyplot.imshow(cropped)","9d12cc10":"from PIL import Image\n\nimage = Image.open(\"..\/input\/war-tank-images-dataset\/train\/war_tank (120).jpg\")\nimage","05a123fd":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Mar\u00edlia Prata, @mpwolke Was here' )","004fa414":"#It was working, after saving the version all went wrong. Then I go to plan B ","799a0b69":"![](https:\/\/i.imgflip.com\/zqfxz.jpg)imgflip","f22db90f":"#Codes from Mohammad Maheer https:\/\/www.kaggle.com\/maheer\/fastai-resnet50-with-faster-training-using-fp16"}}