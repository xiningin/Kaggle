{"cell_type":{"0c97626a":"code","7821d0c5":"code","331db1cf":"code","db2b1267":"code","28927585":"code","14faebc1":"code","c4f33fc5":"code","387598af":"code","14991cd5":"code","b8088f79":"code","f90df8e4":"code","9986865b":"markdown","1566fd96":"markdown","2db4ea5e":"markdown","52faec12":"markdown","969ecd3d":"markdown","e2bc01db":"markdown","08eb5dcb":"markdown"},"source":{"0c97626a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sqlite3\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7821d0c5":"path = \"..\/input\/soccer\/database.sqlite\"  #Insert path here\ndatabase = path ","331db1cf":"conn = sqlite3.connect(database)\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\ntables","db2b1267":"countries = pd .read_sql(\"\"\"SELECT * FROM Country;\"\"\",conn)\ncountries","28927585":"leagues = pd.read_sql(\"\"\"SELECT * \nFROM League \nJOIN Country ON Country.id = League.country_id;\"\"\",conn)\nleagues","14faebc1":"teams = pd.read_sql(\"\"\"SELECT * FROM Team\nORDER BY team_long_name\nLIMIT 10\"\"\",conn)\nteams","c4f33fc5":"detailed_matches = pd.read_sql(\"\"\"SELECT Match.id, \n                                        Country.name AS country_name, \n                                        League.name AS league_name, \n                                        season, \n                                        stage, \n                                        date,\n                                        HT.team_long_name AS  home_team,\n                                        AT.team_long_name AS away_team,\n                                        home_team_goal, \n                                        away_team_goal                                        \n                                FROM Match\n                                JOIN Country on Country.id = Match.country_id\n                                JOIN League on League.id = Match.league_id\n                                LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                WHERE country_name = 'Spain'\n                                ORDER by date\n                                LIMIT 10;\"\"\", conn)\ndetailed_matches","387598af":"leages_by_season = pd.read_sql(\"\"\"SELECT Country.name AS country_name, \n                                        League.name AS league_name, \n                                        season,\n                                        count(distinct stage) AS number_of_stages,\n                                        count(distinct HT.team_long_name) AS number_of_teams,\n                                        avg(home_team_goal) AS avg_home_team_scors, \n                                        avg(away_team_goal) AS avg_away_team_goals, \n                                        avg(home_team_goal-away_team_goal) AS avg_goal_dif, \n                                        avg(home_team_goal+away_team_goal) AS avg_goals, \n                                        sum(home_team_goal+away_team_goal) AS total_goals                                       \n                                FROM Match\n                                JOIN Country on Country.id = Match.country_id\n                                JOIN League on League.id = Match.league_id\n                                LEFT JOIN Team AS HT on HT.team_api_id = Match.home_team_api_id\n                                LEFT JOIN Team AS AT on AT.team_api_id = Match.away_team_api_id\n                                WHERE country_name in ('Spain', 'Germany', 'France', 'Italy', 'England')\n                                GROUP BY Country.name, League.name, season\n                                HAVING count(distinct stage) > 10\n                                ORDER BY Country.name, League.name, season DESC\n                                ;\"\"\", conn)\nleages_by_season","14991cd5":"df = pd.DataFrame(index=np.sort(leages_by_season['season'].unique()), columns=leages_by_season['country_name'].unique())\n\ndf.loc[:,'Germany'] = list(leages_by_season.loc[leages_by_season['country_name']=='Germany','avg_goals'])\ndf.loc[:,'Spain']   = list(leages_by_season.loc[leages_by_season['country_name']=='Spain','avg_goals'])\ndf.loc[:,'France']   = list(leages_by_season.loc[leages_by_season['country_name']=='France','avg_goals'])\ndf.loc[:,'Italy']   = list(leages_by_season.loc[leages_by_season['country_name']=='Italy','avg_goals'])\ndf.loc[:,'England']   = list(leages_by_season.loc[leages_by_season['country_name']=='England','avg_goals'])\n\ndf.plot(figsize=(12,5),title='Average Goals per Game Over Time')","b8088f79":"df = pd.DataFrame(index=np.sort(leages_by_season['season'].unique()), columns=leages_by_season['country_name'].unique())\n\ndf.loc[:,'Germany'] = list(leages_by_season.loc[leages_by_season['country_name']=='Germany','avg_goal_dif'])\ndf.loc[:,'Spain']   = list(leages_by_season.loc[leages_by_season['country_name']=='Spain','avg_goal_dif'])\ndf.loc[:,'France']   = list(leages_by_season.loc[leages_by_season['country_name']=='France','avg_goal_dif'])\ndf.loc[:,'Italy']   = list(leages_by_season.loc[leages_by_season['country_name']=='Italy','avg_goal_dif'])\ndf.loc[:,'England']   = list(leages_by_season.loc[leages_by_season['country_name']=='England','avg_goal_dif'])\n\ndf.plot(figsize=(12,5),title='Average Goals Difference Home vs Out')","f90df8e4":"players_height = pd.read_sql(\"\"\"SELECT CASE\n                                        WHEN ROUND(height)<165 then 165\n                                        WHEN ROUND(height)>195 then 195\n                                        ELSE ROUND(height)\n                                        END AS calc_height, \n                                        COUNT(height) AS distribution, \n                                        (avg(PA_Grouped.avg_overall_rating)) AS avg_overall_rating,\n                                        (avg(PA_Grouped.avg_potential)) AS avg_potential,\n                                        AVG(weight) AS avg_weight \n                            FROM PLAYER\n                            LEFT JOIN (SELECT Player_Attributes.player_api_id, \n                                        avg(Player_Attributes.overall_rating) AS avg_overall_rating,\n                                        avg(Player_Attributes.potential) AS avg_potential  \n                                        FROM Player_Attributes\n                                        GROUP BY Player_Attributes.player_api_id) \n                                        AS PA_Grouped ON PLAYER.player_api_id = PA_Grouped.player_api_id\n                            GROUP BY calc_height\n                            ORDER BY calc_height\n                                ;\"\"\", conn)\nplayers_height","9986865b":"# **Create the connection to the DB**","1566fd96":"# **List of Countries**","2db4ea5e":"# **List of Teams**","52faec12":"# **Some more basic analytics**","969ecd3d":"# **List of Matches**","e2bc01db":"# **List of Leagues and their country**","08eb5dcb":"# **Sub Queries and Functions**"}}