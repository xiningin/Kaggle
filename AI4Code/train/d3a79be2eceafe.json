{"cell_type":{"f8cf387d":"code","d43b64e1":"code","8e2e9c09":"code","404d8772":"code","5e7f04e5":"code","b6d438af":"code","da7d3454":"code","2f01117d":"code","dc7052a3":"code","97b174b5":"code","10b487b3":"code","f19862db":"code","84d62709":"code","7a83c1fa":"code","9408e21b":"code","0d70c353":"code","d5533c78":"code","1c50fe36":"code","5afa2204":"code","e027bd4c":"code","e1567fb2":"code","ef1b83d2":"code","702bf0bf":"code","28afbd97":"code","9547d6b9":"code","5b2629d1":"code","3e4155ba":"code","4c451625":"code","08c4868b":"code","e6f61daf":"code","5395a3b6":"code","74271aa1":"code","4d8afd28":"code","1487904f":"code","62cae7db":"code","ad22562a":"code","1548782a":"code","cb724926":"code","296337f1":"code","edac6b93":"code","43d72550":"code","018df78a":"code","74c8ce00":"code","2ad3c6fa":"code","4566c5d6":"code","f6c45142":"code","ec9d67e5":"code","55050a4e":"code","ac5f6f3c":"code","5a216384":"code","6e767bb2":"code","cab0a4d0":"code","bf785079":"code","a8db8fc6":"code","1d293eeb":"code","fafc47f9":"code","ce4abfa1":"code","90a13b3d":"code","c778793e":"code","f40cef01":"code","380db3a7":"code","45c12f64":"code","9203ccf9":"code","fe9fc5d4":"code","5c899a02":"code","a18311a1":"code","50a8c575":"code","55d2f10b":"code","a823a42c":"code","a24651ae":"code","2fef68e9":"code","16bf6a55":"code","21dff9bb":"code","6908661a":"code","00bf0ad2":"code","9301a171":"code","ea0fa77c":"code","75004ea4":"code","43e02793":"code","aeda8620":"code","8c723114":"markdown","66cf3c33":"markdown","1059fd79":"markdown","f5a6060b":"markdown","77fdc660":"markdown","a8399a59":"markdown","d88a2e93":"markdown","c808223a":"markdown","36133ecd":"markdown","1abadf00":"markdown","687e5365":"markdown","babea829":"markdown","c37be014":"markdown","59e257f2":"markdown","72075fae":"markdown","4bb4a2de":"markdown","1866e6ab":"markdown","19ef02ec":"markdown","96109c4b":"markdown","625ba97b":"markdown","0630cf95":"markdown","fba9e4a1":"markdown","8887210b":"markdown","6b86666d":"markdown","b3e8d986":"markdown","cc3aa0a7":"markdown","c2c58083":"markdown","182f8906":"markdown","96218a18":"markdown","bd5de581":"markdown","1f7ce8b7":"markdown","48551fb1":"markdown","efe74309":"markdown","f2a2c9c3":"markdown","d754be18":"markdown","4d09342b":"markdown","70a04bf0":"markdown","b3170fc1":"markdown","86195ca7":"markdown","87ecba96":"markdown","d414dc22":"markdown","6565c71a":"markdown","4591e244":"markdown","fb6eadce":"markdown","b4a722eb":"markdown","4e543ba1":"markdown","2536bb16":"markdown","3b543b7e":"markdown","c3eb3a58":"markdown","78a7a06d":"markdown","a1bfc2b2":"markdown","de5a4a4f":"markdown","4f67f04f":"markdown","8cd4ca91":"markdown","37fb2926":"markdown","80799a8e":"markdown","cb113ebc":"markdown","7110956f":"markdown","d636a7a8":"markdown","55b8cd11":"markdown","f375e00f":"markdown","bbee55b9":"markdown","ba15e9fc":"markdown"},"source":{"f8cf387d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d43b64e1":"import warnings\nwarnings.filterwarnings('ignore')\n","8e2e9c09":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","404d8772":"fish= pd.read_csv('\/kaggle\/input\/fish-market\/Fish.csv')","5e7f04e5":"fish.head()","b6d438af":"fish.info()","da7d3454":"fish.describe()","2f01117d":"fish.shape","dc7052a3":"# percentage of missing values in each column\nround((100*(fish.isnull().sum())\/len(fish)),2)","97b174b5":"# percentage of missing values in each row\nround((100*(fish.isnull().sum(axis=1))\/len(fish)),2).sort_values(ascending= False)","10b487b3":"fish_dub=fish.copy()","f19862db":"fish_dub.shape","84d62709":"fish.shape","7a83c1fa":"for col in fish:\n    print(fish[col].value_counts(ascending=False), '\\n\\n\\n')","9408e21b":"# Check the datatypes before convertion\nfish.info()","0d70c353":"# Convert to 'category' data type\n\nfish['Species']=fish['Species'].astype('category')","d5533c78":"# This code does 3 things:\n# 1) Create Dummy variable\n# 2) Drop original variable for which the dummy was created\n# 3) Drop first dummy variable for each set of dummies created.\n\nfish_new = pd.get_dummies(fish, drop_first=True)\nfish_new.info()","1c50fe36":"fish_new.shape","5afa2204":"# Check the shape before spliting\n\nfish_new.shape","e027bd4c":"# Check the info before spliting\n\nfish_new.info()","e1567fb2":"from sklearn.model_selection import train_test_split\n\n# We should specify 'random_state' so that the train and test data set always have the same rows, respectively\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(fish_new, train_size = 0.70, test_size = 0.30, random_state = 100)","ef1b83d2":"df_train.info()","702bf0bf":"df_train.shape","28afbd97":"df_test.info()","9547d6b9":"df_test.shape\n","5b2629d1":"df_train.info()","3e4155ba":"df_train.columns","4c451625":"# Create a new dataframe of only numeric variables:\n\nfish_num=df_train[[ 'Weight', 'Length1', 'Length2', 'Length3', 'Height', 'Width']]\n\nsns.pairplot(fish_num, diag_kind='kde')\nplt.show()","08c4868b":"df_train.info()","e6f61daf":"# Build regplot of all categorical variables (before creating dummies) againt the target variable 'wight' \n# to see how each of the predictor variable stackup against the target variable.\nplt.figure(figsize=(25, 10))\nplt.subplot(3,2,1)\nsns.regplot(x = 'Length1', y = 'Weight', data = fish)\nplt.subplot(3,2,2)\nsns.regplot(x = 'Length2', y = 'Weight', data = fish)\nplt.subplot(3,2,3)\nsns.regplot(x = 'Length3', y = 'Weight', data = fish)\nplt.subplot(3,2,4)\nsns.regplot(x = 'Height', y = 'Weight', data = fish)\nplt.show()","5395a3b6":"plt.figure()\nsns.regplot(x = 'Width', y = 'Weight', data = fish);\nplt.show()","74271aa1":"# Let's check the correlation coefficients to see which variables are highly correlated. Note:\n# here we are considering only those variables (dataframe: insurance_new) that were chosen for analysis\n\nplt.figure(figsize = (10,10))\nsns.heatmap(fish_new.corr(), annot = True, cmap=\"RdBu\")\nplt.show()","4d8afd28":"from sklearn.preprocessing import MinMaxScaler","1487904f":"scaler= MinMaxScaler()","62cae7db":"df_train.head()","ad22562a":"df_train.columns","1548782a":"# Apply scaler() to all the numeric variables\n\nnum_vars = ['Length1', 'Length2', 'Length3', 'Height', 'Width']\n\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])\n","cb724926":"# Checking values after scaling\ndf_train.head()","296337f1":"df_train.describe()","edac6b93":"y_train = df_train.pop('Weight')\nX_train = df_train","43d72550":"#Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression","018df78a":"# Running RFE with the output number of the variable equal to 6\nlm= LinearRegression()\nlm.fit(X_train,y_train)\nrfe= RFE(lm,6)\nrfe=rfe.fit(X_train,y_train)","74c8ce00":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","2ad3c6fa":"col=X_train.columns[rfe.support_]\ncol\n","4566c5d6":"X_train.columns[~rfe.support_]","f6c45142":"# Creating X_test dataframe with RFE selected variables\nX_train_rfe = X_train[col]","ec9d67e5":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","55050a4e":"import statsmodels.api as sm\n\n# Add a constant\nX_train_lm1 = sm.add_constant(X_train_rfe)\n\n# Create a first fitted model\nlr1 = sm.OLS(y_train, X_train_lm1).fit()","ac5f6f3c":"# Check the parameters obtained\n\nlr1.params","5a216384":"# Print a summary of the linear regression model obtained\nprint(lr1.summary())","6e767bb2":"X_train_new = X_train_rfe.drop([\"Length3\"], axis = 1)","cab0a4d0":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_new.columns\nvif['VIF'] = [variance_inflation_factor(X_train_new.values, i) for i in range(X_train_new.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","bf785079":"# Add a constant\nX_train_lm2 = sm.add_constant(X_train_new)\n\n# Create a first fitted model\nlr2 = sm.OLS(y_train, X_train_lm2).fit()","a8db8fc6":"# Check the parameters obtained\n\nlr2.params","1d293eeb":"# Print a summary of the linear regression model obtained\nprint(lr2.summary())","fafc47f9":"X_train_new = X_train_new.drop([\"Height\"], axis = 1)","ce4abfa1":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_new.columns\nvif['VIF'] = [variance_inflation_factor(X_train_new.values, i) for i in range(X_train_new.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","90a13b3d":"# Add a constant\nX_train_lm3 = sm.add_constant(X_train_new)\n\n# Create a first fitted model\nlr3 = sm.OLS(y_train, X_train_lm3).fit()","c778793e":"# Check the parameters obtained\n\nlr3.params","f40cef01":"# Print a summary of the linear regression model obtained\nprint(lr3.summary())","380db3a7":"X_train_new = X_train_new.drop([\"Length1\"], axis = 1)","45c12f64":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_new.columns\nvif['VIF'] = [variance_inflation_factor(X_train_new.values, i) for i in range(X_train_new.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9203ccf9":"# Add a constant\nX_train_lm4 = sm.add_constant(X_train_new)\n\n# Create a first fitted model\nlr4 = sm.OLS(y_train, X_train_lm4).fit()","fe9fc5d4":"# Check the parameters obtained\n\nlr4.params","5c899a02":"# Print a summary of the linear regression model obtained\nprint(lr4.summary())","a18311a1":"y_train_pred = lr4.predict(X_train_lm4)","50a8c575":"res = y_train-y_train_pred\n# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((res), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18) ;","55d2f10b":"fish_new=fish_new[[ 'Weight', 'Length2']]\n\nsns.pairplot(fish_new, diag_kind='kde')\nplt.show()","a823a42c":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_new.columns\nvif['VIF'] = [variance_inflation_factor(X_train_new.values, i) for i in range(X_train_new.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a24651ae":"# Apply scaler() to all numeric variables in test dataset. Note: we will only use scaler.transform, \n# as we want to use the metrics that the model learned from the training data to be applied on the test data. \n# In other words, we want to prevent the information leak from train to test dataset.\n\nnum_vars = ['Length1', 'Length2', 'Length3', 'Height', 'Width']\n\ndf_test[num_vars] = scaler.transform(df_test[num_vars])","2fef68e9":"df_test.head()","16bf6a55":"df_test.describe()","21dff9bb":" y_test = df_test.pop('Weight')\nX_test = df_test\nX_test.info()","6908661a":"#Selecting the variables that were part of final model.\ncol1=X_train_new.columns\nX_test=X_test[col1]\n# Adding constant variable to test dataframe\nX_test_lm4 = sm.add_constant(X_test)\nX_test_lm4.info()","00bf0ad2":"# Making predictions using the final model (lr4)\n\ny_pred = lr4.predict(X_test_lm4)","9301a171":"# Plotting y_test and y_pred to understand the spread\n\nfig = plt.figure()\nplt.scatter(y_test, y_pred, alpha=.5)\nfig.suptitle('y_test vs y_pred', fontsize = 20)              # Plot heading \nplt.xlabel('y_test', fontsize = 18)                          # X-label\nplt.ylabel('y_pred', fontsize = 16) \nplt.show()","ea0fa77c":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","75004ea4":"# We already have the value of R^2 (calculated in above step)\n\nr2=0.9143237254054878 ","43e02793":"# Get the shape of X_test\nX_test.shape","aeda8620":"# n is number of rows in X\n\nn = X_test.shape[0]\n\n\n# Number of features (predictors, p) is the shape along axis 1\np = X_test.shape[1]\n\n# We find the Adjusted R-squared using the formula\n\nadjusted_r2 = 1-(1-r2)*(n-1)\/(n-p-1)\nadjusted_r2","8c723114":"### RFE\nRecursive feature elimination: We will be using the LinearRegression function from SciKit Learn for its compatibility with RFE (which is a utility from sklearn)","66cf3c33":"# Final Model Interpretation ","1059fd79":"- Checking value_counts() for entire dataframe.\n\n- This will help to identify any Unknow\/Junk values present in the dataset.","f5a6060b":"## Dividing into X_test and y_test","77fdc660":"## Model 4","a8399a59":"### Comments\n\n- The shape after running the drop duplicate command is same as the original dataframe.\n\n- Hence we can conclude that there were zero duplicate values in the dataset.","d88a2e93":"# FINAL REPORT","c808223a":"Hypothesis Testing:\nHypothesis testing states that:\nH0:B1=B2=...=Bn=0 H1: at least one Bi!=0\n\nlr4 model coefficient values\n- const            -390.551562\n- Length2          2221.235585\n- Species_Pike     -359.259616\n- Species_Smelt     260.864342","36133ecd":"## Visualising Numeric Variables\n- Let's make a pairplot of all the numeric variables.","1abadf00":"## R^2 Value for TEST","687e5365":"# EXPLORATORY DATA ANALYSIS","babea829":"### VIF","c37be014":"# Data Quality Check","59e257f2":"# Building Linear Model using 'STATS MODEL'","72075fae":"### Comments\n- This model looks good, as there seems to be VERY LOW Multicollinearity between the predictors and the p-values for all the predictors seems to be significant. For now, we will consider this as our final model (unless the Test data metrics are not significantly close to this number).","4bb4a2de":"## Error terms are normally distributed with mean zero (not X, Y)\n- Residual Analysis Of Training Data","1866e6ab":"# F Statistics\n","19ef02ec":"# MAKING PREDICTION USING FINAL MODEL","96109c4b":"# Visualising Catagorical Variables","625ba97b":"## Model 3","0630cf95":"# Duplicate Check","fba9e4a1":"- Removing the variable 'Length1' based on its High p-value","8887210b":"# Comment\n- From the above histogram, we could see that the Residuals are normally distributed. Hence our assumption for Linear Regression is valid.","6b86666d":"- Removing the variable 'Height' based on its High p-value","b3e8d986":"## Model 2","cc3aa0a7":"Check for NULL\/MISSING values","c2c58083":"## There is a linear relationship between X and Y","182f8906":"- Splitting the data to Train and Test: - We will now split the data into TRAIN and TEST (70:30 ratio)\n- We will use train_test_split method from sklearn package for this","96218a18":"# RESCALING THE FEATURES","bd5de581":"- Removing the variable 'Length3' based on its High p-value","1f7ce8b7":"F-Statistics is used for testing the overall significance of the Model: Higher the F-Statistics, more significant the Model is.\n- F-statistic:                     505.2\n- Prob (F-statistic):           5.39e-63\n\n> The F-Statistics value of 505.2 (which is greater than 1) and the p-value of '~0.0000' states that the overall model is significant","48551fb1":"# Data Cleaning\n","efe74309":"# MODEL EVALUATION","f2a2c9c3":"### Comment\n\n- From the lr4 model summary, it is evident that all our coefficients are not equal to zero which means We REJECT the NULL HYPOTHESIS","d754be18":"### Comments\n- From the VIF calculation we could find that there is no multicollinearity existing between the predictor variables, as all the values are within permissible range of below","4d09342b":"# Creating Dummy Variables","70a04bf0":"### Comments\n- There are no missing \/ Null values either in columns or rows","b3170fc1":"# Correlation Matrix","86195ca7":"- We need to perform the EDA on TRAINING (df_train) Dataset.","87ecba96":"### VIF","d414dc22":"### Comment\n\nThe solid line is evidently the linear regression model fit between following\n\n- 'Length1' vs 'Weight'\n- 'Length2' vs 'Weight'\n- 'Length3' vs 'Weight'\n- 'Height' vs 'Weight'\n- 'Width' vs 'Weight'","6565c71a":"### Applying the scaling on the test sets","4591e244":"## Adjusted R^2 Value for TEST","fb6eadce":"# The equation of best fitted surface based on model lr4:\n\nWeight = - 390.551562 + (Length2 * 2221.235585) - (Species_Pike  *  359.259616) + (Species_Smelt  *   260.864342)\n","b4a722eb":"## Interpretation of Coefficients:\n- Length2 : A coefficient value of \u20182221.235585\u2019 indicated that a unit increase in length variable, increases the weight numbers by 2221.235585 units.\n- Species_Pike: A coefficient value of \u2018359.259616\u2019 indicated that a unit increase in bmi variable, decreases the weight numbers by 359.259616 units.\n- Species_Smelt: A coefficient value of \u2018260.864342\u2019 indicated that a unit increase in Species_Smelt variable, increases the weight numbers by 260.864342 units.","4e543ba1":"As per our final Model, the top predictor variables that influences the Weight are:\n- Length2 : A coefficient value of \u20182221.235585\u2019 indicated that a unit increase in length variable, increases the weight numbers by 2221.235585 units.\n- Species_Pike: A coefficient value of \u2018359.259616\u2019 indicated that a unit increase in Species_Pike variable, decreases the weight numbers by 359.259616 units.\n- Species_Smelt: A coefficient value of \u2018260.864342\u2019 indicated that a unit increase in Species_Smelt variable, increases the weight numbers by 260.864342 units.\n","2536bb16":"## Comment \n- The above Pair-Plot tells us that there is a LINEAR RELATION between 'Length2' and 'Weight'\n","3b543b7e":"### VIF","c3eb3a58":"## Model 1","78a7a06d":"- We will create DUMMY variables for a categorical variable:  Species\n- Before creating dummy variables, we will have to convert them into 'category' data types.","a1bfc2b2":"## Dividing into X and Y sets for the model building","de5a4a4f":"### Comment :\nDataset has 159 rows & 7 columns","4f67f04f":"Now that we have fitted the model and checked the assumptions, it's time to go ahead and make predictions using the final model (lr4)","8cd4ca91":"## There is No Multicollinearity between the predictor variables","37fb2926":"- Verify the info and shape of the dataframes after split:","80799a8e":"### Comment\n\n- The above Pair-Plot tells us that there is a LINEAR RELATION between 'Length1', 'Length2', 'Length3', 'Height', 'Width' and 'Weight'","cb113ebc":"# Final Result Comparison","7110956f":"# ASSUMPTIONS","d636a7a8":"### VIF ","55b8cd11":"# SPLITTING THE DATA","f375e00f":"- Train R^2 :0.934\n- Train Adjusted R^2 :  0.932\n- Test R^2 :0.914\n- Test Adjusted R^2 :0.908\nThis seems to be a really good model that can very well 'Generalize' various datasets.","bbee55b9":"# BUILDING A LINEAR MODEL","ba15e9fc":"# Comment\n- The heatmap clearly shows which all variable are multicollinear in nature, and which variable have high collinearity with the target variable.\n- We will refer this map back-and-forth while building the linear model so as to validate different correlated values along with VIF & p-value, for identifying the correct variable to select\/eliminate from the model."}}