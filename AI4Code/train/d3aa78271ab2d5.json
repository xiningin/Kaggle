{"cell_type":{"6e7fee96":"code","dca84a6e":"code","764d2572":"code","112e6751":"code","d5fac71a":"code","3962f307":"code","78458d0b":"code","8c7bb74c":"code","dbe28c07":"code","004b7ae9":"code","1d6194e3":"code","7df8a5ad":"code","3123d9fd":"code","651f30a0":"code","fd15ff4b":"code","e420fbc3":"code","b6199f35":"code","50039495":"code","49409b2a":"code","563785ab":"code","66f03aa2":"code","613210b1":"code","83cdf22e":"code","4ac79993":"code","799ba842":"code","a2dc45b0":"code","518d7d66":"code","e0484867":"code","87165c13":"code","54af1e0c":"code","ade2eacf":"code","d067805a":"code","632adba8":"code","c0b58b60":"code","1d8f01db":"code","fea0cd51":"code","151433b9":"code","0ebbb704":"code","aa4fdbff":"code","3c9f6e4b":"code","a3d47168":"code","2b8e9f5e":"code","cfb8ea03":"code","e252392a":"code","1a3c84c3":"code","4b5c1143":"code","81a25903":"code","7f6cc53e":"code","93ca2d9f":"code","b69665b2":"code","ec7d027c":"code","90881652":"code","591e2c87":"code","ad3760e6":"code","c96b963e":"code","f9a62715":"code","1d86c9c0":"code","47c002c1":"code","33570fb4":"code","0804047f":"code","c979e93c":"code","e06d582e":"code","ca50b64f":"code","a28ad0b9":"code","63558ed1":"code","9fa1e43a":"code","c9e6517a":"code","73ddc028":"code","47f87ea0":"code","eafe04ad":"code","4cbb952a":"code","68d15ea7":"code","a701473d":"code","cd8e1a85":"code","ffa1a03b":"code","720113f7":"code","19027205":"code","a74648a2":"code","0822d0e1":"code","81e69af9":"code","4b535232":"code","17f13b95":"code","274be4eb":"code","937d5505":"code","486e3587":"code","4550f497":"code","9adeb707":"code","041849b0":"code","6976a34f":"code","241bd484":"code","8776229f":"code","1e08110f":"code","e467c8a3":"code","e6870531":"code","f2f4d92e":"code","8ace8810":"code","fd45e293":"code","e951ce4b":"code","9f502292":"code","59619584":"code","cdb39ae2":"code","d70a330a":"code","60854e78":"code","546cb584":"code","0a55c35e":"code","0132a74a":"code","0ac5bf86":"markdown","710effe8":"markdown","73601e23":"markdown","a3b52180":"markdown","e0c28e86":"markdown","bfbd587d":"markdown","a02b5602":"markdown","c484f77b":"markdown","89052a66":"markdown","a4e91a98":"markdown","81aa2c5c":"markdown","c92a8f73":"markdown","62ff53bf":"markdown","353c964e":"markdown","1d03bec7":"markdown","359c5c09":"markdown","b90fc964":"markdown","28183ae4":"markdown","c6fb4cb6":"markdown","d55f9b53":"markdown","e0445775":"markdown","2d814887":"markdown","d0354c96":"markdown","76c71dd2":"markdown","635c5fae":"markdown"},"source":{"6e7fee96":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling as pdp\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom scipy import stats\nfrom sklearn.metrics import log_loss\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\n\n\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn import metrics\n\nimport shap","dca84a6e":"train = pd.read_csv('..\/input\/fundacionsadoskydataset\/Entrenamieto_ECI_2020.csv')\n","764d2572":"train.head()","112e6751":"train.info()","d5fac71a":"train.describe().T","3962f307":"train.isnull().sum()","78458d0b":"report = pdp.ProfileReport(train, title=\"Report\",minimal=True)\nreport","8c7bb74c":"train.drop(['ID','Territory','Bureaucratic_Code_0_Approval','Submitted_for_Approval','Account_Created_Date','Billing_Country','Account_Name','Opportunity_Name','Opportunity_ID','Sales_Contract_No','Opportunity_Created_Date','Product_Type','Size','Product_Category_B','Price','Currency','Last_Activity','Quote_Expiry_Date','Last_Modified_Date','ASP_(converted)_Currency','ASP','Planned_Delivery_Start_Date','Planned_Delivery_End_Date','Month','Actual_Delivery_Date','TRF','Prod_Category_A','Brand','Pricing, Delivery_Terms_Quote_Appr','Total_Taxable_Amount_Currency','ASP_Currency'],axis=1,inplace=True)","dbe28c07":"train.columns","004b7ae9":"numCols = train.select_dtypes(\"number\").columns\ncatCols = train.select_dtypes(\"object\").columns\nnumCols= list(set(numCols))\ncatCols= list(set(catCols))\ntrain_cat=train[catCols]\ntrain_num=train[numCols]","1d6194e3":"train_num","7df8a5ad":"report = pdp.ProfileReport(train_num, title=\"TrainNum Report\",minimal=True)\nreport","3123d9fd":"train_cat","651f30a0":"report = pdp.ProfileReport(train_cat, title=\"TrainCat Report\",minimal=True)\nreport","fd15ff4b":"train_num.columns","e420fbc3":"train_cat.columns","b6199f35":"fig, axes = plt.subplots(nrows=9, ncols=2, figsize=(45, 90))\n\nfor ax in fig.axes:\n    ax.tick_params(labelrotation=45)\n    \nsns.countplot(data=train_num, x=\"Pricing, Delivery_Terms_Approved\",ax=axes[0][0])\nsns.countplot(data=train_num, x=\"Bureaucratic_Code_0_Approved\",ax=axes[0][1])\nsns.countplot(data=train_num, x=\"Delivery_Year\",ax=axes[1][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Opportunity_Owner\",ax=axes[1][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Account_Type\",ax=axes[2][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Region\",ax=axes[2][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Stage\",ax=axes[3][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Last_Modified_By\",ax=axes[3][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Product_Family\",ax=axes[4][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Account_Owner\",ax=axes[4][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Bureaucratic_Code\",ax=axes[5][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Source \",ax=axes[5][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Quote_Type\",ax=axes[6][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Opportunity_Type\",ax=axes[6][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Delivery_Quarter\",ax=axes[7][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Total_Amount_Currency\",ax=axes[7][1])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Delivery_Terms\",ax=axes[8][0])\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Product_Name\",ax=axes[8][1])\n\nfig.tight_layout()","50039495":"plt.figure(figsize=(30,10))\n\nplt.xticks(\n    rotation=90, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-small'  \n)\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Product_Family\")","49409b2a":"plt.figure(figsize=(30,10))\n\nplt.xticks(\n    rotation=90, \n    horizontalalignment='right',\n    fontweight='light',\n    fontsize='x-small'  \n)\nsns.countplot(data=train_cat,palette=\"Set3\", x=\"Product_Name\")","563785ab":"duplicado = train.duplicated()\nprint(duplicado.any())\nprint(train[duplicado])","66f03aa2":"print(train.shape)\ntrain.drop_duplicates(inplace=True)\nprint(train.shape)","613210b1":"train.isnull().sum()","83cdf22e":"train.Stage.unique()","4ac79993":"train = train[train.Stage != \"Proposal\"]\ntrain = train[train.Stage != \"Qualification\"]\ntrain = train[train.Stage != \"Negotiation\"]","799ba842":"train.Stage.unique()","a2dc45b0":"X= train[[\"ASP_(converted)\",\"Total_Amount\"]]\ny=train[\"Stage\"]\nX.shape","518d7d66":"rf = RandomForestClassifier()\nresultado = []\ntipos = ['mean', 'median', 'most_frequent', 'constant']\n\nfor t in tipos:\n    imputer=SimpleImputer(strategy=t)\n    imputer.fit(X)\n    X_trans= imputer.transform(X)\n    rf = RandomForestClassifier(max_depth=10,random_state=42)\n    rf.fit(X_trans,y)\n    y_pred = rf.predict(X_trans)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",t)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","e0484867":"vecinos = [1,3,6,9,12]\nfor v in vecinos:\n    KNN_imputer=KNNImputer(n_neighbors=v)\n    KNN_imputer.fit(X)\n    X_knn= KNN_imputer.transform(X)\n    rf = RandomForestClassifier(max_depth=10,random_state=42)\n    rf.fit(X_knn,y)\n    y_pred = rf.predict(X_knn)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",t)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","87165c13":"tipos2 = ['ascending', 'descending', 'roman', 'arabic', 'random']\nfor t in tipos2:\n    iter_imputer=IterativeImputer(imputation_order=t)\n    iter_imputer.fit(X)\n    X_iter= iter_imputer.transform(X)\n    rf = RandomForestClassifier(max_depth=10,random_state=42)\n    rf.fit(X_iter,y)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",t)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","54af1e0c":"imputer=KNNImputer(n_neighbors=6)\nimputer=imputer.fit(train[[\"ASP_(converted)\",\"Total_Amount\"]])\ntrain[[\"ASP_(converted)\",\"Total_Amount\"]]=imputer.transform(train[[\"ASP_(converted)\",\"Total_Amount\"]])\n","ade2eacf":"train.isnull().sum()","d067805a":"plt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"Delivery_Year\"],color='lightblue')\ntrain=train[(np.abs(stats.zscore(train[\"Delivery_Year\"])) < 2.5)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"Delivery_Year\"],color='lightblue')","632adba8":"plt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"Total_Taxable_Amount\"],color='lightblue')\ntrain=train[(np.abs(stats.zscore(train[\"Total_Taxable_Amount\"])) < 1)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"Total_Taxable_Amount\"],color='lightblue')","c0b58b60":"plt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"Total_Amount\"],color='lightblue')\ntrain=train[(np.abs(stats.zscore(train[\"Total_Amount\"])) < 1)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"Total_Amount\"],color='lightblue')","1d8f01db":"plt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"ASP_(converted)\"],color='lightblue')\ntrain=train[(np.abs(stats.zscore(train[\"ASP_(converted)\"])) < 2)]\nplt.figure(figsize=(8,4))\nsns.boxplot(data=train,x=train[\"ASP_(converted)\"],color='lightblue')","fea0cd51":"train['Account_Type'].loc[train['Account_Type']=='Account_Type_0']=0\ntrain['Account_Type'].loc[train['Account_Type']=='Account_Type_1']=1\ntrain['Account_Type'].loc[train['Account_Type']=='Account_Type_2']=2\ntrain['Account_Type'].loc[train['Account_Type']=='Account_Type_4']=3\ntrain['Account_Type'].loc[train['Account_Type']=='Account_Type_5']=4\ntrain['Account_Type'].loc[train['Account_Type']=='Account_Type_6']=5\ntrain['Account_Type'].loc[train['Account_Type']=='None']=6","151433b9":"train['Bureaucratic_Code'].loc[train['Bureaucratic_Code']=='Bureaucratic_Code_0']=0\ntrain['Bureaucratic_Code'].loc[train['Bureaucratic_Code']=='Bureaucratic_Code_1']=1\ntrain['Bureaucratic_Code'].loc[train['Bureaucratic_Code']=='Bureaucratic_Code_2']=2\ntrain['Bureaucratic_Code'].loc[train['Bureaucratic_Code']=='Bureaucratic_Code_3']=3\ntrain['Bureaucratic_Code'].loc[train['Bureaucratic_Code']=='Bureaucratic_Code_4']=4\ntrain['Bureaucratic_Code'].loc[train['Bureaucratic_Code']=='Bureaucratic_Code_5']=5","0ebbb704":"train['Total_Amount_Currency'].loc[train['Total_Amount_Currency']=='EUR']=0\ntrain['Total_Amount_Currency'].loc[train['Total_Amount_Currency']=='USD']=1\ntrain['Total_Amount_Currency'].loc[train['Total_Amount_Currency']=='JPY']=2\ntrain['Total_Amount_Currency'].loc[train['Total_Amount_Currency']=='AUD']=3\ntrain['Total_Amount_Currency'].loc[train['Total_Amount_Currency']=='GBP']=4","aa4fdbff":"train['Quote_Type'].loc[train['Quote_Type']=='Binding']=0\ntrain['Quote_Type'].loc[train['Quote_Type']=='Non Binding']=1","3c9f6e4b":"train['Delivery_Quarter'].loc[train['Delivery_Quarter']=='Q1']=0\ntrain['Delivery_Quarter'].loc[train['Delivery_Quarter']=='Q2']=1\ntrain['Delivery_Quarter'].loc[train['Delivery_Quarter']=='Q3']=2\ntrain['Delivery_Quarter'].loc[train['Delivery_Quarter']=='Q4']=3","a3d47168":"train['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_0']=0\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_1']=1\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_2']=2\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_3']=3\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_4']=4\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_5']=5\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_6']=6\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_7']=7\ntrain['Delivery_Terms'].loc[train['Delivery_Terms']=='Delivery_Terms_8']=8","2b8e9f5e":"train['Region'].loc[train['Region']=='EMEA']=0\ntrain['Region'].loc[train['Region']=='Americas']=1\ntrain['Region'].loc[train['Region']=='Japan']=2\ntrain['Region'].loc[train['Region']=='APAC']=3\ntrain['Region'].loc[train['Region']=='Middle East']=4","cfb8ea03":"train = pd.get_dummies(train, columns = ['Total_Amount_Currency','Quote_Type','Region'],drop_first=True)\ntrain.head()","e252392a":"train.shape","1a3c84c3":"numCols = train.select_dtypes(\"number\").columns\nnumCols= list(set(numCols))\ntrain_num=train[numCols]","4b5c1143":"label_encoder = preprocessing.LabelEncoder()","81a25903":"catscols2=['Source ', 'Account_Owner', 'Opportunity_Owner', 'Opportunity_Type', 'Last_Modified_By',\n           'Product_Family', 'Product_Name',\"Bureaucratic_Code\", \"Account_Type\", \"Delivery_Terms\", \"Delivery_Quarter\"]","7f6cc53e":"train[catscols2] = train[catscols2].astype(str)","93ca2d9f":"train['Source ']= label_encoder.fit_transform(train['Source '])\ntrain['Account_Owner']= label_encoder.fit_transform(train['Account_Owner'])\ntrain['Opportunity_Owner']= label_encoder.fit_transform(train['Opportunity_Owner'])\ntrain['Opportunity_Type']= label_encoder.fit_transform(train['Opportunity_Type'])\ntrain['Last_Modified_By']= label_encoder.fit_transform(train['Last_Modified_By'])\ntrain['Product_Family']= label_encoder.fit_transform(train['Product_Family'])\ntrain['Product_Name']= label_encoder.fit_transform(train['Product_Name'])\ntrain['Bureaucratic_Code']= label_encoder.fit_transform(train['Bureaucratic_Code'])\ntrain['Account_Type']= label_encoder.fit_transform(train['Account_Type'])\ntrain['Delivery_Terms']= label_encoder.fit_transform(train['Delivery_Terms'])\ntrain['Delivery_Quarter']= label_encoder.fit_transform(train['Delivery_Quarter'])","b69665b2":"robust_sc = preprocessing.RobustScaler()\nstandard_sc = preprocessing.StandardScaler() \nminmax_sc = preprocessing.MinMaxScaler()","ec7d027c":"X=train.drop(\"Stage\",axis=1)\nX2= train[numCols]\ny=train[\"Stage\"]\nX.shape","90881652":"for x in [robust_sc,standard_sc,minmax_sc]:\n    %time\n    resultado = []\n    scaler = x.fit(X)\n    X_new = x.transform(X)\n    rf = RandomForestClassifier(max_depth=20,random_state=42)\n    rf.fit(X_new,y)\n    y_pred = rf.predict(X_new)\n    f1sc=f1_score(y, y_pred, average='weighted')\n    rauc=(y, y_pred)\n    resultado.append(f1sc)\n    print(\"El escalado Utilizado--->\",x)\n    print(\"f1 segun el tipo de estrategia:\",f1sc)\n    print(\"----------------------------------------\")","591e2c87":"X= train.drop('Stage',axis=1)\ny=train[\"Stage\"]\nX.shape","ad3760e6":"y","c96b963e":"X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=42,stratify=y)","f9a62715":"over = SMOTE()\novers = RandomOverSampler()\nunder = RandomUnderSampler()\nsteps = [('o', over), ('os', overs),('u',under)]\npipeline = Pipeline(steps=steps)","1d86c9c0":"X_train, y_train = pipeline.fit_resample(X_train, y_train)","47c002c1":"X_train[numCols]=minmax_sc.fit_transform(X_train[numCols])\nX_test[numCols]=minmax_sc.transform(X_test[numCols])","33570fb4":"RF = RandomForestClassifier(random_state=42)\nRF.fit(X_train, y_train)\npred = RF.predict(X_test)\nscore = RF.score(X_test,y_test)","0804047f":"score","c979e93c":"def confusion(y_test,y_test_pred,X):\n    names=['Closed Lost','Closed Won']\n    cm=confusion_matrix(y_test,y_test_pred)\n    f,ax=plt.subplots(figsize=(10,10))\n    sns.heatmap(cm,annot=True,linewidth=.5,linecolor=\"r\",fmt=\".0f\",ax=ax)\n    plt.title(X, size = 25)\n    plt.xlabel(\"y_pred\")\n    plt.ylabel(\"y_true\")\n    ax.set_xticklabels(names)\n    ax.set_yticklabels(names)\n    plt.show()\n\n    return","e06d582e":"confusion(y_test,pred,\"RF\")","ca50b64f":"print(classification_report(y_test,pred))","a28ad0b9":"metrics.plot_roc_curve(RF, X_test, y_test) ","63558ed1":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\npred = xgb.predict(X_test)\nscore = xgb.score(X_test,y_test)","9fa1e43a":"score","c9e6517a":"confusion(y_test,pred,\"XGB\")","73ddc028":"print(classification_report(y_test,pred))","47f87ea0":"metrics.plot_roc_curve(xgb, X_test, y_test) ","eafe04ad":"mlp = MLPClassifier(random_state=42)\nmlp.fit(X_train, y_train)\npred = mlp.predict(X_test)\nscore = mlp.score(X_test,y_test)","4cbb952a":"score","68d15ea7":"confusion(y_test,pred,\"MLP\")","a701473d":"print(classification_report(y_test,pred))","cd8e1a85":"metrics.plot_roc_curve(mlp, X_test, y_test) ","ffa1a03b":"clf = RandomForestClassifier(random_state=42)\nparams_RF = {\n        \"max_depth\":[250,500,1000],\n        \"criterion\":[\"gini\", \"entropy\"],\n        'min_samples_split': [2,4,6],\n        \"min_samples_leaf\":[1,2,3],\n        \"max_features\":['auto', 'sqrt', 'log2'],\n        'warm_start':[True],\n        'class_weight':['balanced', 'balanced_subsample']\n}","720113f7":"model_RF = GridSearchCV(clf,param_grid=params_RF, cv=3,n_jobs=-1)\nmodel_RF.fit(X_train,y_train)","19027205":"print(\"Best params: \"+str(model_RF.best_params_))\nprint(\"Best Score: \"+str(model_RF.best_score_)+'\\n')","a74648a2":"scores = pd.DataFrame(model_RF.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","0822d0e1":"y_train_pred_RF = model_RF.predict(X_train)\ny_test_pred_RF = model_RF.predict(X_test)","81e69af9":"confusion(y_test,y_test_pred_RF,\"RF Opt\")","4b535232":"print(classification_report(y_test, y_test_pred_RF))","17f13b95":"metrics.plot_roc_curve(model_RF, X_test, y_test) ","274be4eb":"gbm = XGBClassifier(verbosity=0, n_jobs=-1)\nparams_xgb = {\n        \"n_estimators\":[500,1000,1500],\n        \"learning_rate\":[0.1,0.3,0.6],\n        'gpu_id': [0],\n        \"predictor\":[\"gpu_predictor\"],\n        'tree_method': ['gpu_hist'],\n        \"updater\":[\"grow_gpu_hist\"],\n        \"sampling_method\":[\"gradient_based\"],\n        \"updater\":[\"grow_gpu_hist\"]\n}","937d5505":"model_xgb = GridSearchCV(gbm,param_grid=params_xgb, cv=5)\nmodel_xgb.fit(X_train,y_train)","486e3587":"print(\"Best params: \"+str(model_xgb.best_params_))\nprint(\"Best Score: \"+str(model_xgb.best_score_)+'\\n')","4550f497":"scores = pd.DataFrame(model_xgb.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","9adeb707":"y_train_pred_xgb = model_xgb.predict(X_train)\ny_test_pred_xgb = model_xgb.predict(X_test)","041849b0":"confusion(y_test,y_test_pred_xgb,\"XGB\")","6976a34f":"print(classification_report(y_test, y_test_pred_xgb))","241bd484":"metrics.plot_roc_curve(model_xgb, X_test, y_test) ","8776229f":"clf = MLPClassifier(random_state=42)\nparams_MLP = {\n        \"hidden_layer_sizes\":[64,128,256],\n        \"activation\":[\"identity\", \"logistic\", \"tanh\", \"relu\"],\n        'solver': [\"lbfgs\", \"sgd\", \"adam\"],\n        \"learning_rate\":[\"constant\", \"invscaling\", \"adaptive\"],\n        'max_iter': [100,200],\n        \"warm_start\":[True]\n}","1e08110f":"model_MLP = GridSearchCV(clf,param_grid=params_MLP, cv=3,n_jobs=-1)\nmodel_MLP.fit(X_train,y_train)","e467c8a3":"print(\"Best params: \"+str(model_MLP.best_params_))\nprint(\"Best Score: \"+str(model_MLP.best_score_)+'\\n')","e6870531":"scores = pd.DataFrame(model_MLP.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","f2f4d92e":"y_train_pred_MLP = model_MLP.predict(X_train)\ny_test_pred_MLP = model_MLP.predict(X_test)","8ace8810":"confusion(y_test,y_test_pred_MLP,\"MLP\")","fd45e293":"print(classification_report(y_test, y_test_pred_MLP))","e951ce4b":"metrics.plot_roc_curve(model_MLP, X_test, y_test) ","9f502292":"clf = RandomForestClassifier(random_state=42,max_depth=250,criterion=\"gini\",min_samples_split=6,min_samples_leaf=1,\n                             max_features='auto',warm_start=True,class_weight= 'balanced_subsample')\n","59619584":"clf.fit(X_train,y_train)","cdb39ae2":"exp = shap.TreeExplainer(clf)\nshap_values = exp.shap_values(X_test)\nshap.summary_plot(shap_values[1], X_test,feature_names=X_test.columns)","d70a330a":"shap_values = shap.TreeExplainer(clf).shap_values(X_train)\nshap.summary_plot(shap_values, X_train, plot_type=\"bar\",feature_names=X_train.columns)","60854e78":"xgb = XGBClassifier(verbosity=0, n_jobs=-1,gpu_id= 0, learning_rate= 0.1, n_estimators= 1000, predictor= 'gpu_predictor', \n                                            sampling_method= 'gradient_based', tree_method= 'gpu_hist', updater= \"grow_gpu_hist\")","546cb584":"xgb.fit(X_train,y_train)","0a55c35e":"exp = shap.TreeExplainer(xgb)\nshap_values = exp.shap_values(X_test)\nshap.summary_plot(shap_values, X_test,feature_names=X_test.columns)","0132a74a":"shap_values = shap.TreeExplainer(clf).shap_values(X_train)\nshap.summary_plot(shap_values, X_train, plot_type=\"bar\",feature_names=X_train.columns)","0ac5bf86":"#### Propuesta de mejoras: Considero que se pueden lograr mayores resultados utilizado Redes Neuronales. Creo que los modelos tradicionales alcanzaron un gran rendimiento teniendo en cuenta mis conocimientos.","710effe8":"## OverSampling","73601e23":"## Outliers","a3b52180":"# Models","e0c28e86":"### MLP","bfbd587d":"# Feature Engineering","a02b5602":"## Encoding","c484f77b":"## Shap Values","89052a66":"### Label Encoder","a4e91a98":"### IterativeImputer","81aa2c5c":"### KNNImputer","c92a8f73":"# EDA","62ff53bf":"## XGB","353c964e":"### A continuacion obtendremos una mejor visualizacion de los 2 modelos con mejor rendimiento:  Random Forest y XGB\n","1d03bec7":"### XGBOOST","359c5c09":"## Scaling","b90fc964":"### SimpleImputer","28183ae4":"## Random Forest","c6fb4cb6":"### RandomForestClassifier","d55f9b53":"# Optimizacion de Hiperparametros","e0445775":"### MLP","2d814887":"## Identificacion de Duplicados","d0354c96":"### XGBoost","76c71dd2":"### Random Forest","635c5fae":"## Imputacion de datos faltantes"}}