{"cell_type":{"e1ac597d":"code","97bbd5c6":"code","58b4c1f5":"code","db9c8104":"code","0b0e089e":"code","19c217ec":"code","a93a5c06":"code","d20de4f2":"code","628c82d0":"code","2c85a7da":"code","bd13c7cf":"code","266e65fb":"code","464992b3":"code","5979ad03":"code","2c395056":"code","2b133fea":"code","09ad80e3":"code","7dd82359":"code","d4c28cf0":"code","1bc48b63":"code","57bead29":"code","2cc8b910":"code","f078efbc":"code","106bbad7":"code","e443730c":"code","04ee1035":"code","55bca4bc":"code","8595acc9":"code","a28cb7df":"code","efe5f780":"code","7b63eb46":"code","6512ac6b":"code","8b252212":"code","55a6462e":"code","456057fa":"code","26ef4201":"code","458c44f3":"code","6adaaab2":"code","c53df4c6":"code","81e7b2d1":"code","0da1bb3e":"code","53d64950":"code","26f466cb":"code","4ed1b1aa":"code","593658a0":"code","7aef6e24":"code","78d22971":"code","dfe8cd24":"code","e0338b9f":"code","14dc648d":"code","c326f25a":"code","6af88128":"code","cf26d649":"code","1e87b52b":"code","a8c2e47a":"code","e657316f":"code","feae6f80":"code","568bfcc0":"code","b0dfdbbe":"code","629ae9a2":"code","d05b55c0":"code","96f5ffad":"code","18d87481":"code","b20d8188":"code","62493011":"code","152d9eab":"code","630dde19":"code","05edd80d":"markdown","c5cc0002":"markdown","24712df9":"markdown","ac6655a4":"markdown","6c2b2ea7":"markdown","871860f8":"markdown","10266124":"markdown","bd3e3284":"markdown","88d46dad":"markdown","de2cbbc0":"markdown","234e957a":"markdown","365d7d90":"markdown","4e8597f2":"markdown","af71de5b":"markdown","f2b851bc":"markdown","4e40a9f0":"markdown","c9879a21":"markdown","146aed72":"markdown","fcd03ece":"markdown","78e2ccf9":"markdown","c91ae848":"markdown","20cb6d43":"markdown","152c1124":"markdown","12d193fa":"markdown","0b27739d":"markdown","5be62303":"markdown","72af40ba":"markdown","670b8443":"markdown","a7b8cedf":"markdown","1e6e6347":"markdown","b1e3055b":"markdown","bdcfae48":"markdown","4f01945c":"markdown","232cedf8":"markdown","3b0156d9":"markdown","8b057d69":"markdown","bdb36c33":"markdown","1796bc3b":"markdown","095c2927":"markdown","90a27cb3":"markdown","6d15ab24":"markdown","67ab4063":"markdown","5812635e":"markdown","4848a541":"markdown","35d306be":"markdown","3e0cc79c":"markdown","192349e3":"markdown","6aee7063":"markdown","f4afce9b":"markdown","970aae46":"markdown","2354ef3f":"markdown","eb3b5538":"markdown","5ee63ba8":"markdown","779291a5":"markdown","a0b83f52":"markdown","61e54967":"markdown","eb8fbaaa":"markdown","121d90fa":"markdown","fee79bdf":"markdown","ae1dd5bf":"markdown","3b4e75a3":"markdown","8badc4bf":"markdown","5ac2e50f":"markdown","00c442a3":"markdown","dc3dc9c3":"markdown","be3a462f":"markdown","5e3e156b":"markdown","b6b2c064":"markdown","937f64b2":"markdown","b045dcea":"markdown","2900121e":"markdown","ebbcee10":"markdown","8bed9310":"markdown","91e052a1":"markdown","bdf6797c":"markdown","cf305ccc":"markdown","2696e433":"markdown","6b19276e":"markdown"},"source":{"e1ac597d":"import numpy as np\nimport pandas as pd\nimport gc\nimport time\nfrom contextlib import contextmanager\nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 200})\n%matplotlib inline\n\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn\ncolor = sns.color_palette()\nfrom numpy import array\nfrom matplotlib import cm\nfrom sklearn import preprocessing","97bbd5c6":"application_train = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_train.csv\") ","58b4c1f5":"application_test = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')","db9c8104":"bureau_balance= pd.read_csv(\"..\/input\/home-credit-default-risk\/bureau_balance.csv\") ","0b0e089e":"bureau = pd.read_csv(\"..\/input\/home-credit-default-risk\/bureau.csv\") ","19c217ec":"credit_card_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/credit_card_balance.csv\") ","a93a5c06":"POS_CASH_balance = pd.read_csv(\"..\/input\/home-credit-default-risk\/POS_CASH_balance.csv\") ","d20de4f2":"installments_payments = pd.read_csv(\"..\/input\/home-credit-default-risk\/installments_payments.csv\") ","628c82d0":"train = pd.read_csv(\"..\/input\/home-credit-default-risk\/application_train.csv\")","2c85a7da":"print(\"The application_train.csv has {} entires.\".format(train.shape))","bd13c7cf":"train.describe()","266e65fb":"train.info()","464992b3":"train.columns","5979ad03":"train.head()","2c395056":"fig, ax = plt.subplots(figsize=(10,7))\nsns.countplot(x='CODE_GENDER',data=train)","2b133fea":"print(\"Surprisingly, females are the highest borrowers with counts:\\n{}\".format(train.CODE_GENDER.value_counts()))","09ad80e3":"fig, ax = plt.subplots(figsize=(10,7))\nsns.countplot(x ='TARGET',data=train, hue='TARGET',palette=\"Set1\")","7dd82359":"fig, ax = plt.subplots(figsize=(10,7))\nsns.countplot(x='TARGET',hue='CODE_GENDER',data=train)","d4c28cf0":"fig, ax = plt.subplots(figsize=(10,7))\nsns.countplot(x='CODE_GENDER', hue='FLAG_OWN_CAR', data=train,palette=\"Set1\")","1bc48b63":"fig, ax = plt.subplots(figsize=(10,7))\nsns.boxplot(x='CODE_GENDER',y='OWN_CAR_AGE',hue='TARGET',data=train,palette=\"Set1\")","57bead29":"fig, ax = plt.subplots(figsize=(10,7))\nsns.violinplot(x='CODE_GENDER',y='OWN_CAR_AGE',hue='TARGET',data=train,palette=\"Set2\")","2cc8b910":"fig, ax = plt.subplots(ncols=2,nrows=1,figsize=(15,7))\nplt.subplot(1,2,1)\nsns.distplot(train['OWN_CAR_AGE'].dropna(),norm_hist=False,kde=False)\nplt.subplot(1,2,2)\nsns.distplot(train['OWN_CAR_AGE'].dropna(),norm_hist=False,kde=True)","f078efbc":"fig, ax = plt.subplots(figsize=(10,7))\nsns.boxplot(x='CODE_GENDER',y='CNT_CHILDREN',hue='TARGET',data=train)","106bbad7":"fig, ax = plt.subplots(figsize=(15,7))\nsns.countplot(x='TARGET',hue='CNT_CHILDREN',data=train,palette=\"hls\")\nplt.legend(loc=1)","e443730c":"fig, ax = plt.subplots(figsize=(15,7))\nsns.countplot(x='OCCUPATION_TYPE',data=train)\nplt.xlabel(\"Occupation Type\")\nplt.xticks(rotation=70)","04ee1035":"fig, ax = plt.subplots(figsize=(15,7))\nsns.barplot(x='OCCUPATION_TYPE',y='AMT_INCOME_TOTAL',data=train)\nplt.xticks(rotation=70)\nplt.xlabel(\"Occupation Type\")\nplt.ylabel(\"Average Annual family income\")","55bca4bc":"fig, ax = plt.subplots(figsize=(15,7))\nsns.countplot(x='OCCUPATION_TYPE',hue='TARGET',data=train,palette=\"Set2\")\nplt.xticks(rotation=70)\nplt.xlabel(\"Occupation Type\")","8595acc9":"# get the number of people having occupation type and target grouped.\nOccupation_df = pd.DataFrame(data=train.groupby(['OCCUPATION_TYPE','TARGET']).count()['SK_ID_CURR'])","a28cb7df":"# reset the multiindex organization of dataframe.\nOccupation_df = Occupation_df.reset_index() ","efe5f780":"# get the number of people grouped on type of occupation and target in an array form.\nvalue_counts = Occupation_df['SK_ID_CURR'].values","7b63eb46":"def repayers_to_applicants_ratio(values):\n    \"\"\"\n    Finds the ratio of Repayers to Applicants. This kind of is a \n    measure for safety. Larger the value better the applicant - More \n    safe for the company to lend loan to this category of workers.\n    \n    values: array of entires whose counts are given\n    returns the repayers to applicants ratio. \n    \n    precondition: The counts are such that the targets alligned are\n    in order 0 and 1\n    \"\"\"\n    flag = 1\n    ratios = []\n    for count in range(len(values)):\n        if flag == 1:\n            current_number = values[count]\n            next_number = values[count+1]\n            ratios.append(current_number\/(current_number+next_number))\n            ratios.append(current_number\/(current_number+next_number))\n        flag=flag*-1\n    return ratios        ","6512ac6b":"# find the ratios from the array values\nOccupation_df['Ratio R\/A'] = repayers_to_applicants_ratio(value_counts)","8b252212":"# get the ratio and values based on the order of saftety.\n\nOccupation_ratio_df = Occupation_df.groupby(['OCCUPATION_TYPE','Ratio R\/A']).count().drop(['TARGET', 'SK_ID_CURR'],axis=1)\nOccupation_ratio_df = Occupation_ratio_df.reset_index() \nOccupation_ratio_df = Occupation_ratio_df.sort_values(['Ratio R\/A'],ascending=False)\nOccupation_ratio_df","55a6462e":"# explore occupation type and occupation and occupation based repayment to applicants ratio.\nfig,ax = plt.subplots(figsize = (15,7))\nsns.barplot(x='OCCUPATION_TYPE',y='Ratio R\/A',data=Occupation_ratio_df,palette=sns.color_palette(\"GnBu_d\"))\nplt.xticks(rotation=70)\nplt.xlabel(\"Occupation Type\")\nplt.ylabel(\"Mean R\/A Ratio\")","456057fa":"# merge the new column 'Ratio R\/A' to the train dataframe.\ntrain = pd.merge(left=train,right=Occupation_ratio_df,on='OCCUPATION_TYPE')","26ef4201":"# Find out what is the probability that an applicant will return given that he\/she is a male\/Female respectively.\nfig,ax = plt.subplots(figsize = (15,7))\nsns.countplot(x='CODE_GENDER',data=train,hue='TARGET',palette=sns.color_palette(\"GnBu_d\"))\nplt.xticks(rotation=70)\nplt.xlabel(\"Gender\")","458c44f3":"# Find out what is the probability that an applicant will return given that he\/she is a male\/Female respectively.\npd.DataFrame(train.groupby(['CODE_GENDER','TARGET']).count()['SK_ID_CURR']).reset_index() ","6adaaab2":"### To find out the probability here's what we have to do:\nprint(\"probability that an applicant will repay the given that he is a male P(R|M): 73260\/(73260+8576) = 0.8952\") \nprint(\"probability that an applicant will repay the given that she is a female P(R|F): 119311\/(119311+9971) = 0.9228\")","c53df4c6":"# Let us create a new dataframe where the probabilites of repaying based on gender is included. GR\/A stands\n# for Gender based repayment ratio.\ngender_repay_ratio = pd.DataFrame({\"CODE_GENDER\":['M','F'],\"GR\/A\":[0.8952,0.9228]})","81e7b2d1":"# Merge this dataframe with the old train dataframe\ntrain = pd.merge(left=train,right=gender_repay_ratio,on='CODE_GENDER')","0da1bb3e":"# lets create a new column that's indicative of repayment with gender and occupation type which is just the product of Ratio R\/A with G R\/A.\n# EGR\/A stands for employment gender repayment ratio.\ntrain['EGR\/A'] = train['Ratio R\/A']*train['GR\/A']","53d64950":"fig,ax = plt.subplots(figsize = (19,10))\nplt.xticks(rotation=70)\nsns.barplot(x='OCCUPATION_TYPE',y='EGR\/A',hue='CODE_GENDER',data=train)\nplt.legend(loc=1)","26f466cb":"fig, ax = plt.subplots(figsize=(15,9))\nsns.barplot(x='OCCUPATION_TYPE',y='CNT_CHILDREN',hue='TARGET',data=train)\nplt.xticks(rotation=70)","4ed1b1aa":"plt.figure(figsize=(12,10))\nsns.boxplot(x='OCCUPATION_TYPE',y='AMT_CREDIT',data=train,hue='CODE_GENDER')\nplt.xticks(rotation=70)","593658a0":"plt.figure(figsize=(12,10))\nsns.countplot(x='FLAG_OWN_REALTY', data=train)","7aef6e24":"fig, ax = plt.subplots(figsize=(15,9))\nsns.countplot(x='TARGET',hue='FLAG_OWN_REALTY',data=train)","78d22971":"reality_with_difficulty = len(train[(train['FLAG_OWN_REALTY']=='Y') & (train['TARGET']==1)])\nreality_without_difficulty = len(train[(train['FLAG_OWN_REALTY']=='Y') & (train['TARGET']==0)])\nno_reality_with_difficulty = len(train[(train['FLAG_OWN_REALTY']=='N') & (train['TARGET']==1)])\nno_reality_without_difficulty = len(train[(train['FLAG_OWN_REALTY']=='N') & (train['TARGET']==0)])","dfe8cd24":"print(\"Defaulters with realestate % = \",100*reality_with_difficulty\/(reality_with_difficulty+reality_without_difficulty))\nprint(\"Defaulters without realestate % = \",100*no_reality_with_difficulty\/(no_reality_with_difficulty+no_reality_without_difficulty))","e0338b9f":"fig, ax = plt.subplots(figsize=(15,9))\nsns.distplot(train['LIVINGAREA_MEDI'].dropna())","14dc648d":"fig, ax = plt.subplots(figsize=(15,9))\nsns.distplot(train['FLOORSMAX_MEDI'].dropna())","c326f25a":"fig, ax = plt.subplots(figsize=(15,9))\nsns.boxplot(x='TARGET',y='FLOORSMAX_MEDI',data=train)","6af88128":"sns.jointplot(x='COMMONAREA_AVG',y='LIVINGAREA_AVG',data=train,kind='hex')","cf26d649":"@contextmanager\ndef timer(title):\n    t0 = time.time()\n    yield\n    print(\"{} - done in {:.0f}s\".format(title, time.time() - t0))","1e87b52b":"# Display\/plot feature importance\ndef display_importances(feature_importance_df_):\n    cols = feature_importance_df_[[\"feature\", \"importance\"]].groupby(\"feature\").mean().sort_values(by=\"importance\", ascending=False)[:100].index\n    best_features = feature_importance_df_.loc[feature_importance_df_.feature.isin(cols)]\n    plt.figure(figsize=(15, 20))\n    sns.barplot(x=\"importance\", y=\"feature\", data=best_features.sort_values(by=\"importance\", ascending=False))\n    plt.title('LightGBM Features (avg over folds)')\n    plt.tight_layout()\n    plt.savefig('lgbm_importances01.png')","a8c2e47a":"print('\\n'.join([''.join([(' I_Love_Data_Science_'[(x-y) % len('I_Love_Data_Science_')] if ((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3 <= 0 else ' ') for x in range(-30, 30)]) for y in range(15, -15, -1)]))","e657316f":"def application_train():\n\n    df = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\n    test_df = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\n\n    df = df.append(test_df).reset_index()\n    df = df[df['CODE_GENDER'] != 'XNA']\n\n    lbe = LabelEncoder()\n\n    for col in ['CODE_GENDER', 'FLAG_OWN_CAR', 'FLAG_OWN_REALTY']:\n            df[col] = lbe.fit_transform(df[col])\n\n    df = pd.get_dummies(df, dummy_na = True)\n\n    df['DAYS_EMPLOYED'].replace(365243, np.nan, inplace = True)\n    df['NEW_DAYS_EMPLOYED_PERC'] = df['DAYS_EMPLOYED'] \/ df['DAYS_BIRTH']\n    df['NEW_INCOME_CREDIT_PERC'] = df['AMT_INCOME_TOTAL'] \/ df['AMT_CREDIT']\n    df['NEW_INCOME_PER_PERSON'] = df['AMT_INCOME_TOTAL'] \/ df['CNT_FAM_MEMBERS']\n    df['NEW_ANNUITY_INCOME_PERC'] = df['AMT_ANNUITY'] \/ df['AMT_INCOME_TOTAL']\n    df['NEW_PAYMENT_RATE'] = df['AMT_ANNUITY'] \/ df['AMT_CREDIT']\n\n    df.drop(\"index\", axis = 1, inplace =  True)\n\n    df.columns = pd.Index([\"APP_\" + col for col in df.columns.tolist()])\n\n    df.rename(columns={\"APP_SK_ID_CURR\":\"SK_ID_CURR\"}, inplace = True)\n\n    df.rename(columns={\"APP_TARGET\":\"TARGET\"}, inplace = True)\n    \n    return df","feae6f80":"def bureau_bb():\n\n    #bureau_balance tablosunun okutulmas\u0131\n\n    bb = pd.read_csv('..\/input\/home-credit-default-risk\/bureau_balance.csv')\n    bb = pd.get_dummies(bb, dummy_na = True)\n\n    agg_list = {\"MONTHS_BALANCE\":\"count\",\n                \"STATUS_0\":[\"sum\",\"mean\"],\n                \"STATUS_1\":[\"sum\"],\n                \"STATUS_2\":[\"sum\"],\n                \"STATUS_3\":[\"sum\"],\n                \"STATUS_4\":[\"sum\"],\n                \"STATUS_5\":[\"sum\"],\n                \"STATUS_C\":[\"sum\",\"mean\"],\n                \"STATUS_X\":[\"sum\",\"mean\"] }\n\n    bb_agg = bb.groupby(\"SK_ID_BUREAU\").agg(agg_list)\n\n    # Degisken isimlerinin yeniden adlandirilmasi \n    bb_agg.columns = pd.Index([col[0] + \"_\" + col[1].upper() for col in bb_agg.columns.tolist()])\n\n    # Status_sum ile ilgili yeni bir degisken olusturma\n    bb_agg['NEW_STATUS_SCORE'] = bb_agg['STATUS_1_SUM'] + bb_agg['STATUS_2_SUM']^2 + bb_agg['STATUS_3_SUM']^3 + bb_agg['STATUS_4_SUM']^4 + bb_agg['STATUS_5_SUM']^5\n\n    bb_agg.drop(['STATUS_1_SUM','STATUS_2_SUM','STATUS_3_SUM','STATUS_4_SUM','STATUS_5_SUM'], axis=1,inplace=True)\n\n    bureau = pd.read_csv('..\/input\/home-credit-default-risk\/bureau.csv')\n    bureau_and_bb = bureau.join(bb_agg, how='left', on='SK_ID_BUREAU')\n\n    #BUREAU BALANCE VE BUREAU ORTAK TABLO\n\n    #CREDIT_TYPE degiskeninin sinif sayisini 3'e d\u00fcs\u00fcrmek \n    bureau_and_bb['CREDIT_TYPE'] = bureau_and_bb['CREDIT_TYPE'].replace(['Car loan',\n              'Mortgage',\n              'Microloan',\n              'Loan for business development', \n              'Another type of loan',\n              'Unknown type of loan', \n              'Loan for working capital replenishment',\n              \"Loan for purchase of shares (margin lending)\",                                                \n              'Cash loan (non-earmarked)', \n              'Real estate loan',\n              \"Loan for the purchase of equipment\", \n              \"Interbank credit\", \n              \"Mobile operator loan\"], 'Rare')\n\n\n    #CREDIT_ACTIVE degiskeninin sinif sayisini 2'ye d\u00fcs\u00fcrmek (Sold' u Closed a dahil etmek daha mi uygun olur ???)\n    bureau_and_bb['CREDIT_ACTIVE'] = bureau_and_bb['CREDIT_ACTIVE'].replace(['Bad debt','Sold'], 'Active')\n\n    # bureau_bb tablosundaki kategorik degiskenlere One Hot Encoding uygulanmasi\n    bureau_and_bb = pd.get_dummies(bureau_and_bb, columns = [\"CREDIT_TYPE\",\"CREDIT_ACTIVE\"])\n\n    # CREDIT_CURRENCY degiskeninin %99u currency1, bu sebeple ayirt ediciligi olmayacagini dusundugumuz icin sildik  \n    bureau_and_bb.drop([\"SK_ID_BUREAU\",\"CREDIT_CURRENCY\"], inplace = True, axis = 1)\n\n\n    #NEW FEATURES\n\n    #ortalama kac ayl\u0131k kredi ald\u0131g\u0131n\u0131 g\u00f6steren yeni degisken\n    bureau_and_bb[\"NEW_MONTHS_CREDIT\"]= round((bureau_and_bb.DAYS_CREDIT_ENDDATE - bureau_and_bb.DAYS_CREDIT)\/30)\n\n    agg_list = {\n          \"SK_ID_CURR\":[\"count\"],\n          \"DAYS_CREDIT\":[\"min\",\"max\"],\n          \"CREDIT_DAY_OVERDUE\":[\"sum\",\"mean\",\"max\"],     \n          \"DAYS_CREDIT_ENDDATE\":[\"max\",\"min\"],\n          \"DAYS_ENDDATE_FACT\":[\"max\",\"min\"],\n          \"AMT_CREDIT_MAX_OVERDUE\":[\"mean\",\"max\",\"min\"],\n          \"CNT_CREDIT_PROLONG\":[\"sum\",\"mean\",\"max\",\"min\"],\n          \"AMT_CREDIT_SUM\":[\"mean\",\"max\",\"min\"],            \n          \"AMT_CREDIT_SUM_DEBT\":[\"sum\",\"mean\",\"max\"],\n          \"AMT_CREDIT_SUM_LIMIT\":[\"sum\",\"mean\",\"max\"],\n          'AMT_CREDIT_SUM_OVERDUE':[\"sum\",\"mean\",\"max\"], \n          'DAYS_CREDIT_UPDATE':[\"max\",\"min\"],\n          'AMT_ANNUITY':[\"sum\",\"mean\"],\n          'MONTHS_BALANCE_COUNT':[\"sum\"], \n          'STATUS_0_SUM':[\"sum\"],         \n          'STATUS_0_MEAN':[\"mean\"], \n          'STATUS_C_SUM':[\"sum\"], \n          'STATUS_C_MEAN':[\"mean\"],\n          'CREDIT_ACTIVE_Active':[\"sum\",\"mean\"], \n          'CREDIT_ACTIVE_Closed':[\"sum\",\"mean\"], \n          'CREDIT_TYPE_Rare':[\"sum\",\"mean\"],      \n          'CREDIT_TYPE_Consumer credit':[\"sum\",\"mean\"], \n          'CREDIT_TYPE_Credit card':[\"sum\",\"mean\"],\n          \"NEW_MONTHS_CREDIT\":[\"count\",\"sum\",\"mean\",\"max\",\"min\"]}\n\n\n    # bureau_bb_agg tablosuna aggreagation islemlerinin uygulanamasi  \n    bureau_and_bb_agg = bureau_and_bb.groupby(\"SK_ID_CURR\").agg(agg_list).reset_index()\n\n\n    # Degisken isimlerinin yeniden adlandirilmasi \n    bureau_and_bb_agg.columns = pd.Index([\"BB_\" + col[0] + \"_\" + col[1].upper() for col in bureau_and_bb_agg.columns.tolist()])\n\n    # kisinin ald\u0131g\u0131 en yuksek ve en dusuk kredinin fark\u0131n\u0131 g\u00f6steren yeni degisken\n    bureau_and_bb_agg[\"BB_NEW_AMT_CREDIT_SUM_RANGE\"] = bureau_and_bb_agg[\"BB_AMT_CREDIT_SUM_MAX\"] - bureau_and_bb_agg[\"BB_AMT_CREDIT_SUM_MIN\"]\n\n    # ortalama kac ayda bir kredi cektigini ifade eden  yeni degisken\n    bureau_and_bb_agg[\"BB_NEW_DAYS_CREDIT_RANGE\"]= round((bureau_and_bb_agg[\"BB_DAYS_CREDIT_MAX\"] - bureau_and_bb_agg[\"BB_DAYS_CREDIT_MIN\"])\/(30 * bureau_and_bb_agg[\"BB_SK_ID_CURR_COUNT\"]))\n\n\n    # Bureau: Active credits - using only numerical aggregations\n    agg_list = {\n            'DAYS_CREDIT': ['min', 'max', 'mean', 'var'],\n            'DAYS_CREDIT_ENDDATE': ['min', 'max', 'mean'],\n            'DAYS_CREDIT_UPDATE': ['mean'],\n            'CREDIT_DAY_OVERDUE': ['max', 'mean'],\n            'AMT_CREDIT_MAX_OVERDUE': ['mean'],\n            'AMT_CREDIT_SUM': ['max', 'mean', 'sum'],\n            'AMT_CREDIT_SUM_DEBT': ['max', 'mean', 'sum'],\n            'AMT_CREDIT_SUM_OVERDUE': ['mean'],\n            'AMT_CREDIT_SUM_LIMIT': ['mean', 'sum'],\n            'AMT_ANNUITY': ['max', 'mean'],\n            'CNT_CREDIT_PROLONG': ['sum']\n        }\n\n\n    active = bureau_and_bb[bureau_and_bb['CREDIT_ACTIVE_Active'] == 1]\n    active_agg = active.groupby('SK_ID_CURR').agg(agg_list)\n    active_agg.columns = pd.Index(['BB_NEW_ACTIVE_' + e[0] + \"_\" + e[1].upper() for e in active_agg.columns.tolist()])\n    bureau_and_bb_agg.rename(columns = {'BB_SK_ID_CURR_': 'SK_ID_CURR'}, inplace = True)\n    bureau_and_bb_agg = bureau_and_bb_agg.join(active_agg, how='left', on='SK_ID_CURR')\n\n    # Bureau: Closed credits - using only numerical aggregations\n    closed = bureau_and_bb[bureau_and_bb['CREDIT_ACTIVE_Closed'] == 1]\n    closed_agg = closed.groupby('SK_ID_CURR').agg(agg_list)\n    closed_agg.columns = pd.Index(['BB_NEW_CLOSED_' + e[0] + \"_\" + e[1].upper() for e in closed_agg.columns.tolist()])\n    bureau_and_bb_agg = bureau_and_bb_agg.join(closed_agg, how='left', on='SK_ID_CURR')\n    \n    return bureau_and_bb_agg","568bfcc0":"def installments_payments():\n\n    #Read the installments_payments.csv\n    ins = pd.read_csv('..\/input\/home-credit-default-risk\/installments_payments.csv')\n\n    ins['NEW_DAYS_PAID_EARLIER'] = ins['DAYS_INSTALMENT']-ins['DAYS_ENTRY_PAYMENT']\n\n    # Her bir taksit \u00f6demesinin gec olup olmama durumu 1: gec \u00f6dedi 0: erken \u00f6demeyi temsil eder\n    ins['NEW_NUM_PAID_LATER'] = ins['NEW_DAYS_PAID_EARLIER'].map(lambda x: 1 if x<0 else 0)\n\n    # Agrregation ve degisken tekillestirme\n    agg_list = {'NUM_INSTALMENT_VERSION':['nunique'],\n               'NUM_INSTALMENT_NUMBER':'max',\n               'DAYS_INSTALMENT':['min','max'],\n               'DAYS_ENTRY_PAYMENT':['min','max'],\n               'AMT_INSTALMENT':['min','max','sum','mean'],\n               'AMT_PAYMENT':['min','max','sum','mean'],\n               'NEW_DAYS_PAID_EARLIER':'mean',\n               'NEW_NUM_PAID_LATER':'sum'}\n\n\n    ins_agg = ins.groupby('SK_ID_PREV').agg(agg_list)\n\n\n    # Multi index problemi c\u00f6z\u00fcm\u00fc\n    ins_agg.columns = pd.Index([\"INS_\" + e[0] + '_' + e[1].upper() for e in ins_agg.columns.tolist()])\n\n    # drop variables \n    ins_agg.drop(['INS_DAYS_INSTALMENT_MIN',\n                   'INS_DAYS_INSTALMENT_MAX',\n                   'INS_DAYS_ENTRY_PAYMENT_MIN',\n                   'INS_DAYS_ENTRY_PAYMENT_MAX'],axis=1,inplace=True)\n\n    # Kredi \u00f6deme y\u00fczdesi ve toplam kalan borc\n    ins_agg['INS_NEW_PAYMENT_PERC'] = ins_agg['INS_AMT_PAYMENT_SUM'] \/ ins_agg['INS_AMT_INSTALMENT_SUM']\n    ins_agg['INS_NEW_PAYMENT_DIFF'] = ins_agg['INS_AMT_INSTALMENT_SUM'] - ins_agg['INS_AMT_PAYMENT_SUM']\n    \n    agg_list_previous_application = {}\n    \n    for col in ins_agg.columns:\n        agg_list_previous_application[col] = ['mean',\"min\",\"max\",\"sum\"]\n    \n    ins_agg.reset_index(inplace = True) \n    \n    return agg_list_previous_application, ins_agg","b0dfdbbe":"def pos_cash_balance(agg_list_previous_application):\n\n    pos = pd.read_csv('..\/input\/home-credit-default-risk\/POS_CASH_balance.csv')\n    # Kategorik Degiskenimizi Dummy Degiskenine D\u00f6n\u00fcst\u00fcrme\n    pos = pd.get_dummies(pos, columns=['NAME_CONTRACT_STATUS'], dummy_na = True)\n    # Aggregation Islemi - Tekillestirme\n    agg_list = {'MONTHS_BALANCE':['min','max'],\n                                            'CNT_INSTALMENT':['min','max'],\n                                            'CNT_INSTALMENT_FUTURE':['min','max'],\n                                            'SK_DPD':['max','mean'],\n                                            'SK_DPD_DEF':['max','mean'],\n                                            'NAME_CONTRACT_STATUS_Active':'sum',\n                                            'NAME_CONTRACT_STATUS_Amortized debt':'sum',\n                                            'NAME_CONTRACT_STATUS_Approved':'sum',\n                                            'NAME_CONTRACT_STATUS_Canceled':'sum',\n                                            'NAME_CONTRACT_STATUS_Completed':'sum',\n                                            'NAME_CONTRACT_STATUS_Demand':'sum',\n                                            'NAME_CONTRACT_STATUS_Returned to the store':'sum',\n                                            'NAME_CONTRACT_STATUS_Signed':'sum',\n                                            'NAME_CONTRACT_STATUS_XNA':'sum',\n                                            'NAME_CONTRACT_STATUS_nan':'sum'\n                                          }\n\n    pos_agg = pos.groupby('SK_ID_PREV').agg(agg_list)\n\n    # Multilayer index'i tek boyutlu index'e d\u00f6n\u00fcst\u00fcrme\n    pos_agg.columns= pd.Index([\"POS_\" + e[0] + '_' + e[1].upper() for e in pos_agg.columns.tolist()])\n\n    # SK_DPD kac kredide 0 olma durumu (SK_DPD MAX alacagiz 0 durumunu veriyor) \n    # SK_DPD_DEF (SK_DPD_DEF_MAX sifir olma durumunu veriyor)\n    # CNT_INSTALMENT_FUTURE_MIN==0 oldugunda NAME_CONTRACT_STATUS_Completed_SUM==0 olma durumu \n\n    pos_agg['POS_NEW_IS_CREDIT_NOT_COMPLETED_ON_TIME']= (pos_agg['POS_CNT_INSTALMENT_FUTURE_MIN']==0) & (pos_agg['POS_NAME_CONTRACT_STATUS_Completed_SUM']==0)\n\n\n    # 1:kredi zamaninda kapanmamis 0:kredi zamaninda kapanmis\n\n    pos_agg['POS_NEW_IS_CREDIT_NOT_COMPLETED_ON_TIME']=pos_agg['POS_NEW_IS_CREDIT_NOT_COMPLETED_ON_TIME'].astype(int)\n\n    pos_agg.drop(['POS_NAME_CONTRACT_STATUS_Approved_SUM',\n                   'POS_NAME_CONTRACT_STATUS_Amortized debt_SUM',\n                   'POS_NAME_CONTRACT_STATUS_Canceled_SUM',\n                   'POS_NAME_CONTRACT_STATUS_Returned to the store_SUM',\n                   'POS_NAME_CONTRACT_STATUS_Signed_SUM',\n                   'POS_NAME_CONTRACT_STATUS_XNA_SUM',\n                   'POS_NAME_CONTRACT_STATUS_nan_SUM'],axis=1,inplace=True)\n\n    for col in pos_agg.columns:\n        agg_list_previous_application[col] = ['mean',\"min\",\"max\",\"sum\"]\n\n    pos_agg.reset_index(inplace = True)     \n    \n    return agg_list_previous_application, pos_agg","629ae9a2":"def credit_card_balance():\n\n    CCB = pd.read_csv('..\/input\/home-credit-default-risk\/credit_card_balance.csv')\n\n    CCB = pd.get_dummies(CCB, columns= ['NAME_CONTRACT_STATUS'] )  # artik tumu sayisal \n\n    dropthis = ['NAME_CONTRACT_STATUS_Approved', 'NAME_CONTRACT_STATUS_Demand',\n           'NAME_CONTRACT_STATUS_Refused', 'NAME_CONTRACT_STATUS_Sent proposal',\n           'NAME_CONTRACT_STATUS_Signed' ]\n\n    CCB = CCB.drop(dropthis, axis=1)\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['SK_ID_PREV'].nunique().reset_index().rename(index = str, columns = {'SK_ID_PREV': 'NUMBER_OF_LOANS_PER_CUSTOMER'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n    grp = CCB.groupby(by = ['SK_ID_CURR', 'SK_ID_PREV'])['CNT_INSTALMENT_MATURE_CUM'].max().reset_index().rename(index = str, columns = {'CNT_INSTALMENT_MATURE_CUM': 'NUMBER_OF_INSTALMENTS'})\n    grp1 = grp.groupby(by = ['SK_ID_CURR'])['NUMBER_OF_INSTALMENTS'].sum().reset_index().rename(index = str, columns = {'NUMBER_OF_INSTALMENTS': 'TOTAL_INSTALMENTS_OF_ALL_LOANS'})\n    CCB = CCB.merge(grp1, on = ['SK_ID_CURR'], how = 'left')\n\n    CCB['INSTALLMENTS_PER_LOAN'] = (CCB['TOTAL_INSTALMENTS_OF_ALL_LOANS']\/CCB['NUMBER_OF_LOANS_PER_CUSTOMER']).astype('uint32')\n\n\n    # Bu fonksiyon, kac defa odemelerin geciktigini hesaplar   # Function to calculate number of times Days Past Due occurred \n    def geciken_gun_hesapla(DPD):\n\n        # DPD ile beklenen bir seri: SK_DPD degiskeninin her bir prev_app daki gecmis kredi icin olan degerleri  # DPD is a series of values of SK_DPD for each of the groupby combination \n        # We convert it to a list to get the number of SK_DPD values NOT EQUALS ZERO\n        x = DPD.tolist()\n        c = 0\n        for i,j in enumerate(x):\n            if j != 0:\n                c += 1  \n        return c \n\n    grp = CCB.groupby(by = ['SK_ID_CURR', 'SK_ID_PREV']).apply(lambda x: geciken_gun_hesapla(x.SK_DPD)).reset_index().rename(index = str, columns = {0: 'NUMBER_OF_DPD'})\n    grp1 = grp.groupby(by = ['SK_ID_CURR'])['NUMBER_OF_DPD'].mean().reset_index().rename(index = str, columns = {'NUMBER_OF_DPD' : 'DPD_COUNT'})\n\n    CCB = CCB.merge(grp1, on = ['SK_ID_CURR'], how = 'left')\n\n\n    def f(min_pay, total_pay):\n\n        M = min_pay.tolist()\n        T = total_pay.tolist()\n        P = len(M)        # P: taksit sayisi\n        c = 0 \n        # Find the count of transactions when Payment made is less than Minimum Payment \n        for i in range(len(M)):\n            if T[i] < M[i]:\n                c += 1  \n        return (100*c)\/P\n\n    grp = CCB.groupby(by = ['SK_ID_CURR']).apply(lambda x: f(x.AMT_INST_MIN_REGULARITY, x.AMT_PAYMENT_CURRENT)).reset_index().rename(index = str, columns = { 0 : 'PERCENTAGE_MIN_MISSED_PAYMENTS'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['AMT_DRAWINGS_ATM_CURRENT'].sum().reset_index().rename(index = str, columns = {'AMT_DRAWINGS_ATM_CURRENT' : 'DRAWINGS_ATM'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['AMT_DRAWINGS_CURRENT'].sum().reset_index().rename(index = str, columns = {'AMT_DRAWINGS_CURRENT' : 'DRAWINGS_TOTAL'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n\n    CCB['CASH_CARD_RATIO1'] = (CCB['DRAWINGS_ATM']\/CCB['DRAWINGS_TOTAL'])*100  # ATM den cektigi nakit \/ toplam cektigi\n    del CCB['DRAWINGS_ATM']\n    del CCB['DRAWINGS_TOTAL']\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['CASH_CARD_RATIO1'].mean().reset_index().rename(index = str, columns ={ 'CASH_CARD_RATIO1' : 'CASH_CARD_RATIO'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['AMT_DRAWINGS_CURRENT'].sum().reset_index().rename(index = str, columns = {'AMT_DRAWINGS_CURRENT' : 'TOTAL_DRAWINGS'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['CNT_DRAWINGS_CURRENT'].sum().reset_index().rename(index = str, columns = {'CNT_DRAWINGS_CURRENT' : 'NUMBER_OF_DRAWINGS'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n\n    CCB['DRAWINGS_RATIO1'] = (CCB['TOTAL_DRAWINGS']\/CCB['NUMBER_OF_DRAWINGS'])*100     # yuzdelik degil, genisleme yapmis\n    del CCB['TOTAL_DRAWINGS']\n    del CCB['NUMBER_OF_DRAWINGS']\n\n\n    grp = CCB.groupby(by = ['SK_ID_CURR'])['DRAWINGS_RATIO1'].mean().reset_index().rename(index = str, columns ={ 'DRAWINGS_RATIO1' : 'DRAWINGS_RATIO'})\n    CCB = CCB.merge(grp, on = ['SK_ID_CURR'], how = 'left')\n\n    del CCB['DRAWINGS_RATIO1']\n\n    CCB['CC_COUNT'] = CCB.groupby('SK_ID_CURR').size()\n\n    CCB_agg = CCB.groupby('SK_ID_CURR').agg({\n        'MONTHS_BALANCE':[\"sum\",\"mean\"], \n        'AMT_BALANCE':[\"sum\",\"mean\",\"min\",\"max\"],\n        'AMT_CREDIT_LIMIT_ACTUAL':[\"sum\",\"mean\"], \n\n        'AMT_DRAWINGS_ATM_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"],\n        'AMT_DRAWINGS_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"], \n        'AMT_DRAWINGS_OTHER_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"],\n        'AMT_DRAWINGS_POS_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"], \n        'AMT_INST_MIN_REGULARITY':[\"sum\",\"mean\",\"min\",\"max\"],\n        'AMT_PAYMENT_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"], \n        'AMT_PAYMENT_TOTAL_CURRENT':[\"sum\",\"mean\",\"min\",\"max\"],\n        'AMT_RECEIVABLE_PRINCIPAL':[\"sum\",\"mean\",\"min\",\"max\"], \n        'AMT_RECIVABLE':[\"sum\",\"mean\",\"min\",\"max\"], \n        'AMT_TOTAL_RECEIVABLE':[\"sum\",\"mean\",\"min\",\"max\"],\n\n        'CNT_DRAWINGS_ATM_CURRENT':[\"sum\",\"mean\"], \n        'CNT_DRAWINGS_CURRENT':[\"sum\",\"mean\",\"max\"],\n        'CNT_DRAWINGS_OTHER_CURRENT':[\"mean\",\"max\"], \n        'CNT_DRAWINGS_POS_CURRENT':[\"sum\",\"mean\",\"max\"],\n        'CNT_INSTALMENT_MATURE_CUM':[\"sum\",\"mean\",\"max\",\"min\"],    \n        'SK_DPD':[\"sum\",\"mean\",\"max\"], \n        'SK_DPD_DEF':[\"sum\",\"mean\",\"max\"],\n\n        'NAME_CONTRACT_STATUS_Active':[\"sum\",\"mean\",\"min\",\"max\"], \n        'INSTALLMENTS_PER_LOAN':[\"sum\",\"mean\",\"min\",\"max\"],\n\n        'NUMBER_OF_LOANS_PER_CUSTOMER':[\"mean\"], \n        'DPD_COUNT':[\"mean\"],\n        'PERCENTAGE_MIN_MISSED_PAYMENTS':[\"mean\"], \n        'CASH_CARD_RATIO':[\"mean\"], \n        'DRAWINGS_RATIO':[\"mean\"]})\n\n\n    CCB_agg.columns = pd.Index(['CCB_' + e[0] + \"_\" + e[1].upper() for e in CCB_agg.columns.tolist()])\n\n    CCB_agg.reset_index(inplace = True)\n    \n    return CCB_agg","d05b55c0":"def previous_application(agg_list_previous_application):\n\n\n    df_prev = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')\n\n    # \"WEEKDAY_APPR_PROCESS_START\"  de\u011fi\u015fkeninin  WEEK_DAY ve WEEKEND olarak iki kategoriye ayr\u0131lmas\u0131\n\n    df_prev[\"WEEKDAY_APPR_PROCESS_START\"] = df_prev[\"WEEKDAY_APPR_PROCESS_START\"].replace(['MONDAY','TUESDAY', 'WEDNESDAY','THURSDAY','FRIDAY'], 'WEEK_DAY')\n    df_prev[\"WEEKDAY_APPR_PROCESS_START\"] = df_prev[\"WEEKDAY_APPR_PROCESS_START\"].replace(['SATURDAY', 'SUNDAY'], 'WEEKEND')\n\n    # \"HOUR_APPR_PROCESS_START\"  de\u011fi\u015fkeninin working_hours ve off_hours olarak iki kategoriye ayr\u0131lmas\u0131\n    a = [8,9,10,11,12,13,14,15,16,17]\n    df_prev[\"HOUR_APPR_PROCESS_START\"] = df_prev[\"HOUR_APPR_PROCESS_START\"].replace(a, 'working_hours')\n\n    b = [18,19,20,21,22,23,0,1,2,3,4,5,6,7]\n    df_prev[\"HOUR_APPR_PROCESS_START\"] = df_prev[\"HOUR_APPR_PROCESS_START\"].replace(b, 'off_hours')\n\n\n    # DAYS_DECISION de\u011feri 1 y\u0131ldan k\u00fc\u00e7\u00fck olanlara 1, b\u00fcy\u00fck olanlara 0 de\u011feri verildi.\n    df_prev[\"DAYS_DECISION\"] = [1 if abs(i\/(12*30)) <=1 else 0 for i in df_prev.DAYS_DECISION]\n\n    # \"NAME_TYPE_SUITE\"  de\u011fi\u015fkeninin alone ve not_alone olarak iki kategoriye ayr\u0131lmas\u0131\n\n    df_prev[\"NAME_TYPE_SUITE\"] = df_prev[\"NAME_TYPE_SUITE\"].replace('Unaccompanied', 'alone')\n\n    b = ['Family', 'Spouse, partner', 'Children', 'Other_B', 'Other_A', 'Group of people']\n    df_prev[\"NAME_TYPE_SUITE\"] = df_prev[\"NAME_TYPE_SUITE\"].replace(b, 'not_alone')\n\n\n\n    # \"NAME_GOODS_CATEGORY\"  de\u011fi\u015fkenindeki bu de\u011ferler others olarak kategorize edilecek\n    a = ['Auto Accessories', 'Jewelry', 'Homewares', 'Medical Supplies', 'Vehicles', 'Sport and Leisure', \n         'Gardening', 'Other', 'Office Appliances', 'Tourism', 'Medicine', 'Direct Sales', 'Fitness', 'Additional Service', \n         'Education', 'Weapon', 'Insurance', 'House Construction', 'Animals'] \n    df_prev[\"NAME_GOODS_CATEGORY\"] = df_prev[\"NAME_GOODS_CATEGORY\"].replace(a, 'others')\n\n    # \"NAME_SELLER_INDUSTRY\"  de\u011fi\u015fkenindeki bu de\u011ferler others olarak kategorize edilecek\n    a = ['Auto technology', 'Jewelry', 'MLM partners', 'Tourism'] \n    df_prev[\"NAME_SELLER_INDUSTRY\"] = df_prev[\"NAME_SELLER_INDUSTRY\"].replace(a, 'others')\n    # \u0130stenilen krecinin verilen krediye oran\u0131 i\u00e7eren de\u011fi\u015fkeni t\u00fcretir\n    df_prev[\"LOAN_RATE\"] = df_prev.AMT_APPLICATION\/df_prev.AMT_CREDIT\n\n    #YENI DEGISKENLER\n\n    # \u0130stenilen krecinin verilen krediye oran\u0131 i\u00e7eren de\u011fi\u015fkeni t\u00fcretir\n    df_prev[\"NEW_LOAN_RATE\"] = df_prev.AMT_APPLICATION\/df_prev.AMT_CREDIT\n\n    # \u00d6deme g\u00fcn\u00fcn\u00fc geciktirmi\u015f mi bunu g\u00f6steren churn_prev de\u011fi\u015fkeni t\u00fcretilir.\n    # 1= geciktirmi\u015f, 0 = geciktirmemi\u015f, NaN = bo\u015f de\u011fer\n    k = df_prev.DAYS_LAST_DUE_1ST_VERSION - df_prev.DAYS_LAST_DUE\n    df_prev[\"NEW_CHURN_PREV\"] = [1 if i >= 0 else (0 if i < 0  else \"NaN\") for i in k]\n\n\n    # NFLAG_INSURED_ON_APPROVAL de\u011fi\u015fkeni yerine kullan\u0131lmak izere NEW_INSURANCE de\u011fi\u015fkeni tan\u0131mland\u0131.\n    df_prev[(df_prev['AMT_CREDIT'] == 0) | (df_prev['AMT_GOODS_PRICE'] == 0)]['NEW_INSURANCE'] = np.nan\n    df_prev['sigorta_miktari'] = df_prev['AMT_CREDIT'] - df_prev['AMT_GOODS_PRICE']\n    df_prev[\"NEW_INSURANCE\"] = df_prev['sigorta_miktari'].apply(lambda x: 1 if x > 0 else (0 if x <= 0 else np.nan))\n    df_prev.drop('sigorta_miktari', axis=1, inplace=True)\n\n    # INTEREST_RATE de\u011fi\u015fkenini olu\u015fturur.\n    #df_prev['INTEREST_RATE'] = (df_prev.AMT_ANNUITY*df_prev.CNT_PAYMENT\/df_prev.AMT_CREDIT)**(12\/df_prev.CNT_PAYMENT)-1\n    #df_prev[df_prev['INTEREST_RATE']==-1]=np.nan\n\n\n    drop_list = ['AMT_DOWN_PAYMENT', 'SELLERPLACE_AREA', 'CNT_PAYMENT', 'PRODUCT_COMBINATION', 'DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE',\n                'DAYS_LAST_DUE_1ST_VERSION', 'DAYS_LAST_DUE','DAYS_TERMINATION','NFLAG_INSURED_ON_APPROVAL']\n    df_prev.drop(drop_list, axis = 1, inplace = True)\n\n    # Previous tablosundaki kategorik de\u011fi\u015fkenlerin isimlerini tutar.\n    category_columns=[]\n    for i in df_prev.columns:\n        if df_prev[i].dtypes == \"O\":\n            category_columns.append(i)\n\n    df_prev = pd.get_dummies(df_prev, columns = category_columns )\n\n    prev_agg_list = {\"SK_ID_CURR\":[\"count\"], \n                \"AMT_ANNUITY\":[\"max\"],\n                \"AMT_APPLICATION\":[\"min\",\"mean\",\"max\"],\n                \"AMT_CREDIT\":[\"max\"], \n                \"AMT_GOODS_PRICE\":[\"sum\", \"mean\"],\n                \"NFLAG_LAST_APPL_IN_DAY\":[\"sum\",\"mean\"], \n                \"RATE_DOWN_PAYMENT\":[\"sum\", \"mean\"],\n                \"RATE_INTEREST_PRIMARY\":[\"sum\", \"mean\"],\n                \"RATE_INTEREST_PRIVILEGED\":[\"sum\", \"mean\"],\n                \"DAYS_DECISION\":[\"sum\"],\n                \"NEW_LOAN_RATE\":[\"sum\", \"mean\", \"min\", \"max\"],\n                \"NEW_INSURANCE\":[\"sum\", \"mean\"],\n                #\"INTEREST_RATE\":[\"sum\", \"mean\", \"min\", \"max\"],\n                \"NAME_CONTRACT_TYPE_Cash loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_Consumer loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_Revolving loans\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"WEEKDAY_APPR_PROCESS_START_WEEKEND\":[\"sum\", \"mean\"],\n                \"WEEKDAY_APPR_PROCESS_START_WEEK_DAY\":[\"sum\", \"mean\"],\n                \"HOUR_APPR_PROCESS_START_off_hours\":[\"sum\", \"mean\"],\n                \"HOUR_APPR_PROCESS_START_working_hours\":[\"sum\", \"mean\"],\n                \"FLAG_LAST_APPL_PER_CONTRACT_N\":[\"sum\", \"mean\"],\n                \"FLAG_LAST_APPL_PER_CONTRACT_Y\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Building a house or an annex\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Business development\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a garage\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a holiday home \/ land\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a home\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a new car\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Buying a used car\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Car repairs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Education\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Everyday expenses\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Gasification \/ water supply\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Hobby\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Journey\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Medicine\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Money for a third person\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Other\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Payments on other loans\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Purchase of electronic equipment\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Refusal to name the goal\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Repairs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Urgent needs\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_Wedding \/ gift \/ holiday\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_XAP\":[\"sum\", \"mean\"],\n                \"NAME_CASH_LOAN_PURPOSE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Approved\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Canceled\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Refused\":[\"sum\", \"mean\"],\n                \"NAME_CONTRACT_STATUS_Unused offer\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Cash through the bank\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Cashless from the account of the employer\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_Non-cash from your account\":[\"sum\", \"mean\"],\n                \"NAME_PAYMENT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_CLIENT\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_HC\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_LIMIT\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SCO\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SCOFR\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_SYSTEM\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_VERIF\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_XAP\":[\"sum\", \"mean\"],\n                \"CODE_REJECT_REASON_XNA\":[\"sum\", \"mean\"],\n                \"NAME_TYPE_SUITE_alone\":[\"sum\", \"mean\"],\n                \"NAME_TYPE_SUITE_not_alone\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_New\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_Refreshed\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_Repeater\":[\"sum\", \"mean\"],\n                \"NAME_CLIENT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Audio\/Video\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Clothing and Accessories\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Computers\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Construction Materials\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Consumer Electronics\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Mobile\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_Photo \/ Cinema Equipment\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_XNA\":[\"sum\", \"mean\"],\n                \"NAME_GOODS_CATEGORY_others\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cards\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cars\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_Cash\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_POS\":[\"sum\", \"mean\"],\n                \"NAME_PORTFOLIO_XNA\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_XNA\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_walk-in\":[\"sum\", \"mean\"],\n                \"NAME_PRODUCT_TYPE_x-sell\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_AP+ (Cash loan)\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Car dealer\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Channel of corporate sales\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Contact center\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Country-wide\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Credit and cash offices\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Regional \/ Local\":[\"sum\", \"mean\"],\n                \"CHANNEL_TYPE_Stone\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Clothing\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Connectivity\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Construction\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Consumer electronics\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Furniture\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_Industry\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_XNA\":[\"sum\", \"mean\"],\n                \"NAME_SELLER_INDUSTRY_others\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_XNA\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_high\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_low_action\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_low_normal\":[\"sum\", \"mean\"],\n                \"NAME_YIELD_GROUP_middle\":[\"sum\", \"mean\"],\n                \"NEW_CHURN_PREV_0\":[\"sum\", \"mean\"],\n                \"NEW_CHURN_PREV_1\":[\"sum\", \"mean\"],\n                \"NEW_CHURN_PREV_NaN\":[\"sum\", \"mean\"]}\n\n    prev_agg_list.update(agg_list_previous_application)\n    \n    \n    return prev_agg_list, df_prev","96f5ffad":"def pre_processing_and_combine():\n\n    \n    with timer(\"Process application train\"):\n        df = application_train()\n        print(\"application train & test shape:\", df.shape)\n        \n    \n    with timer(\"Bureau and Bureau Balance\"):\n        bureau_and_bb_agg = bureau_bb()\n        print(\"Bureau and Bureau Balance:\", bureau_and_bb_agg.shape)\n        \n    with timer(\"Installment Payments\"):\n        agg_list_previous_application, ins_agg = installments_payments()\n        print(\"Installment Payments:\", ins_agg.shape)    \n    \n    with timer(\"Pos Cash Balance\"):\n        agg_list_previous_application, pos_agg = pos_cash_balance(agg_list_previous_application)\n        print(\"Pos Cash Balance:\", pos_agg.shape)  \n        \n    \n    with timer(\"Credit Card Balance\"):\n        CCB_agg = credit_card_balance()\n        print(\"Credit Card Balance:\", CCB_agg.shape) \n    \n    with timer(\"previous_application\"):\n        prev_agg_list, df_prev = previous_application(agg_list_previous_application)\n        print(\"previous_application:\", df_prev.shape) \n        \n        \n    with timer(\"All tables are combining\"):\n        df_prev_ins = df_prev.merge(ins_agg, how = 'left', on = 'SK_ID_PREV')\n        df_prev_ins_pos = df_prev_ins.merge(pos_agg, how = 'left', on = 'SK_ID_PREV')\n        df_prev_ins_pos_agg = df_prev_ins_pos.groupby(\"SK_ID_CURR\").agg(prev_agg_list).reset_index()\n        df_prev_ins_pos_agg.columns = pd.Index([\"PREV_\" + col[0] + \"_\" + col[1].upper() for col in df_prev_ins_pos_agg.columns.tolist()])\n        df_prev_ins_pos_agg.rename(columns={\"PREV_SK_ID_CURR_\":\"SK_ID_CURR\"}, inplace = True)\n        #prev_son ile ana tablo\n        df_prev_others = df.merge(df_prev_ins_pos_agg, how = 'left',on = 'SK_ID_CURR')\n    \n        #credit_card_balance\n        df_prev_ins_pos_ccb = df_prev_others.merge(CCB_agg, how = 'left',on = 'SK_ID_CURR')\n    \n        #bureau_balance\n        all_data = df_prev_ins_pos_ccb.merge(bureau_and_bb_agg, how = 'left',on = 'SK_ID_CURR')\n        \n        print(\"all_data process:\", all_data.shape) \n\n    \n    \n    return all_data\n    ","18d87481":"lgbm = LGBMClassifier()\n\nlgbm_params = {\"learning_rate\": [0.001, 0.01, 0.1],\n              \"n_estimators\": [200, 500, 100],\n              \"max_depth\":[1,2,35,8]}","b20d8188":"train = all_data[all_data['TARGET'].notnull()]\ny_train = train[\"TARGET\"]\nX_train = train.drop(\"TARGET\", axis = 1)\n\nlgbm_cv_model = GridSearchCV(lgbm,lgbm_params, cv = 10, n_jobs = -1, verbose = 4).fit(X_train, y_train)\nlgbm_cv_model.best_params_","62493011":"def modeling(all_data):\n    all_data.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in all_data.columns]\n    train_df = all_data[all_data['TARGET'].notnull()]\n    test_df = all_data[all_data['TARGET'].isnull()]\n\n    folds = KFold(n_splits = 10, shuffle = True, random_state = 1001)\n\n    oof_preds = np.zeros(train_df.shape[0])\n    sub_preds = np.zeros(test_df.shape[0])\n    feature_importance_df = pd.DataFrame()\n\n    feats = [f for f in train_df.columns if f not in ['TARGET','SK_ID_CURR']]\n\n    for n_fold, (train_idx, valid_idx) in enumerate(folds.split(train_df[feats], train_df['TARGET'])):\n\n        train_x, train_y = train_df[feats].iloc[train_idx], train_df['TARGET'].iloc[train_idx]\n\n        valid_x, valid_y = train_df[feats].iloc[valid_idx], train_df['TARGET'].iloc[valid_idx]\n\n        clf = LGBMClassifier(\n                n_jobs = -1,\n                n_estimators=10000,\n                learning_rate=0.02,\n                num_leaves=34,\n                colsample_bytree=0.9497036,\n                subsample=0.8715623,\n                max_depth=8,\n                reg_alpha=0.041545473,\n                reg_lambda=0.0735294,\n                min_split_gain=0.0222415,\n                min_child_weight=39.3259775,\n                silent=-1,\n                verbose=-1, )\n\n        clf.fit(train_x, train_y, eval_set = [(train_x, train_y), (valid_x, valid_y)], \n                eval_metric = 'auc', verbose = 200, early_stopping_rounds = 200)\n\n        #y_pred_valid\n        oof_preds[valid_idx] = clf.predict_proba(valid_x, num_iteration=clf.best_iteration_)[:, 1]\n        sub_preds += clf.predict_proba(test_df[feats], num_iteration=clf.best_iteration_)[:, 1] \/ folds.n_splits\n\n        fold_importance_df = pd.DataFrame()\n        fold_importance_df[\"feature\"] = feats\n        fold_importance_df[\"importance\"] = clf.feature_importances_\n        fold_importance_df[\"fold\"] = n_fold + 1\n        feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n\n\n        print('Fold %2d AUC : %.6f' % (n_fold + 1, roc_auc_score(valid_y, oof_preds[valid_idx]))) \n\n\n    print('Full AUC score %.6f' % roc_auc_score(train_df['TARGET'], oof_preds)) #y_pred_valid   \n\n    test_df['TARGET'] = sub_preds\n    test_df[['SK_ID_CURR', 'TARGET']].to_csv(\"submission_lightgbm.csv\", index= False)\n\n    display_importances(feature_importance_df)\n    \n    return feature_importance_df\n\n","152d9eab":"def main():\n    \n    with timer(\"Preprocessing Time\"):\n        all_data = pre_processing_and_combine()\n    \n    with timer(\"Modeling\"):\n        feat_importance = modeling(all_data)\n","630dde19":"if __name__ == \"__main__\":\n    with timer(\"Full model run\"):\n        main()","05edd80d":"In statistics, exploratory data analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. A statistical model can be used or not, but primarily EDA is for seeing what the data can tell us beyond the formal modeling or hypothesis testing task.","c5cc0002":"#### Let us look at the number of repayer's to number of applicants ratio in every occupation category.  ","24712df9":"# import numpy for math calculations\nimport numpy as np\n\n# import pandas for data (csv) manipulation\nimport pandas as pd\n\n# import matplotlib for plotting\nimport matplotlib.pyplot as plt\n\n# import seaborn for more plotting options(built on top of matplotlib)\nimport seaborn as sns\n\n# Supress unnecessary warnings so that the presentation looks clean\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# display plots on the notebook itself\n%matplotlib inline","ac6655a4":"## 4.4 How is the distribution of median number of floors?","6c2b2ea7":"### Lets look at the overview of the data","871860f8":"# main","10266124":"### As one can tell, the median living area is almost normal, right skewed based on the KDE.","bd3e3284":"## 3.1 Who are the major borrowers? - What are their occupations?","88d46dad":"#### Looks kind of right skewed normal distribution with a bump near 60+ years! Most clients car is around 10 years.","de2cbbc0":"# Libraries","234e957a":"## Not: Bu proje VBO \u015firketi taraf\u0131ndan farkl\u0131 grublarla \u00e7al\u0131\u015f\u0131lm\u0131\u015ft\u0131r.             Ben bu projenin credit_card_balance b\u00f6l\u00fcm\u00fcnde g\u00f6rev ald\u0131m.\n             ","365d7d90":"* Denetimli: Etiketler e\u011fitim verilerine dahil edilir ve ama\u00e7, etiketleri \u00f6zelliklerden tahmin etmeyi \u00f6\u011frenmek i\u00e7in bir model yeti\u015ftirmektir.\n* S\u0131n\u0131fland\u0131rma: Etiket ikili bir de\u011fi\u015fkendir, 0 (krediyi zaman\u0131nda geri \u00f6deyecektir), 1 (krediyi geri \u00f6demekte zorluk \u00e7ekecektir)\nVeri","4e8597f2":"## 3.4 How is the distribution of males and females in terms of loan safety given that they belong to a specific occupation?","af71de5b":"### Most of the clients are laborers and the least of the clients are IT Staff. ","f2b851bc":"### This is not a better way to conclude, because this contains baised number of applicants. A better way is to find a metric that incorporates relative relationship between applicants count and repayers count.","4e40a9f0":"## Is it because they (Male and Female) own car(s) - How many male and female own cars?","c9879a21":"# 3. Occupation","146aed72":"### This question requires us to find the probabilities of repaying given a specific gender and a specific occupation type.","fcd03ece":"## 2.5 How old is the client's car(s)? - Are they investing that money in fixing those car(s) or are they using that money to buy a new car?","78e2ccf9":"## How is the correlation between Average Living Area and Average Common area?","c91ae848":"### 2.8 Does having a kid influence repayment?","20cb6d43":"## Sec 3.31- Repayment ratio based on Occupation Type. ","152c1124":"## 2.4 Who owns most number of the cars? M or F?","12d193fa":"## 3.6 Which occupation category are the highest loan recipients? ","0b27739d":"# bureau & bureau_balance","5be62303":"### Females have relatively more difficulties in repaying the loan back, as seen with Target = 1. This could be because of the general larger population of female applicants as opposed to male applicants.","72af40ba":"# credit_card_balance","670b8443":"# previous_application","a7b8cedf":"# Machine Learning","1e6e6347":"## 4.2 How does having real estate influence repaying?","b1e3055b":"## 3.5 Which occupation category has the highest number of kids?","bdcfae48":"## 2. Data Analysis","4f01945c":"### According to the ratio of Number of repayers to Number of applicants in every occupation type, we see that it is most safe to lend money to Accountants with an R\/A ratio of 0.9516 and it is least safe to lend money to low skilled labourers with an R\/A ratio of 0.8284. \n","232cedf8":"# application_train","3b0156d9":"### Based on the description, most people returned the money {1- people with difficulties, 0 - other cases }. Very clearly the target label is imbalanced.","8b057d69":"According to description of the data -\"1 indicates client with payment difficulties: he\/she had late payment more than X days on at least one of the first Y installments of the loan in our sample, 0 indicates all other cases\".","bdb36c33":"## 3.3 Which category of occupants repay on time and are better clients for company to lend money?","1796bc3b":"Ev Kredisi, pozitif ve g\u00fcvenli bir bor\u00e7lanma deneyimi sa\u011flayarak bankac\u0131l\u0131k d\u0131\u015f\u0131 n\u00fcfusa finansal kat\u0131l\u0131m\u0131 geni\u015fletmeye \u00e7al\u0131\u015fmaktad\u0131r. Bu yetersiz hizmet alan n\u00fcfusun olumlu bir kredi deneyimine sahip oldu\u011fundan emin olmak i\u00e7in Ev Kredisi, m\u00fc\u015fterilerinin geri \u00f6deme yeteneklerini tahmin etmek i\u00e7in telco ve i\u015flem bilgileri dahil olmak \u00fczere \u00e7e\u015fitli alternatif verilerden yararlanmaktad\u0131r.\n\nEv Kredisi \u015fu anda bu tahminleri yapmak i\u00e7in \u00e7e\u015fitli istatistiksel ve makine \u00f6\u011frenme y\u00f6ntemleri kullan\u0131yor olsa da, Kagglers'e verilerinin tam potansiyelini ortaya \u00e7\u0131karmalar\u0131na yard\u0131mc\u0131 olmak i\u00e7in meydan okuyorlar. Bunu yapmak, geri \u00f6deme yapabilen m\u00fc\u015fterilerin reddedilmemesini ve kredilerin, m\u00fc\u015fterilerini ba\u015far\u0131l\u0131 olmalar\u0131n\u0131 sa\u011flayacak bir anapara, vade ve geri \u00f6deme takvimiyle verilmesini sa\u011flayacakt\u0131r.","095c2927":"### How big is the training dataset?","90a27cb3":"# installments_payments","6d15ab24":"#### Accountants and Managers are the highest amount (facevalue) recipents, while low skilled laborers are the least recipents (let me make it clear- labourers are highest volume based applicants, but not large (facevalue) recipents ). It makes sense because accountants are more likely to get a large credit approved as opposed to low skilled laborers - which was kinda explained in the Ratio R\/A in Sec 3.31.","67ab4063":"### People with repaying difficulty mostly have older cars - Are they spending loan money on cars?","5812635e":"### So, in every occupation type, females are more likely to repay the loan on time.","4848a541":"### 4.5 What is the median number of max floors for people with difficulty and people without difficulty?","35d306be":"### Over 200k applicants have real estate and over 95k applicants don't have.","3e0cc79c":"## 4.1 How many clients have real estate?","192349e3":"#### People with difficulty had more number of median floors spread out.","6aee7063":"#### Right off the bat, private service staff have the highest number of kids and thus have the highest difficulty in repaying because of kids - presumably.","f4afce9b":"### It seems like min children count is 0.","970aae46":"# Exploratory Data Analysis","2354ef3f":"### Importing Required Libraries","eb3b5538":"# Combine","5ee63ba8":"## 2.2 How is the distribution of target labels? - Did most people return on time ?","779291a5":"## 2.3 Whether is it Female who has more difficulties or is it Male?","a0b83f52":"## 4.3 How is the living area distributed? (the dataset itself is normalized by default)","61e54967":"## 3.2 How economically stable are clients? Who are the most and least stable?","eb8fbaaa":"### Get the dataset loaded  ","121d90fa":"##   Ev Kredisi Temerr\u00fct Riski Yar\u0131\u015fmas\u0131","fee79bdf":"# Model Tuning","ae1dd5bf":"### Most borrowers who have no children had no difficulties repaying - having children impacts the repayment process - it slows down by making it difficult for the client. ","3b4e75a3":"### Right off the bat, it seems as if the labourers have the highest difficulty in repaying. Also it seems lending to Reality agents, IT staff, HR staff is the safest.","8badc4bf":"### How do the first 5 rows look like?- Just a sanity check","5ac2e50f":"### Surprisingly, more defaulters are those who don't have realestate!","00c442a3":"# 4. Real estate","dc3dc9c3":"### Females own less number of cars.","be3a462f":"P - Correlation is about 0.55!","5e3e156b":"### 2.1 Who is the highest borrower? Male or Female?","b6b2c064":"## 2.6 How is the frequency of car ages? Normal? Poission? Student's T-distribution?","937f64b2":"# pos_cash_balance","b045dcea":"### Check out the stats","2900121e":"## Giri\u015f\n\n","ebbcee10":"### Managers are the most earning borrowers while cleaning staff are the least earning borrowers - Based on the annual family income.","8bed9310":"#   Home Credit Default Risk\n## Can you predict how capable each applicant is of repaying a loan?","91e052a1":"# Helper Functions","bdf6797c":"### How is the distribution of client's car ages? Without KDE or with KDE?- without Norm or with Norm.","cf305ccc":"# 7 farkl\u0131 veri kayna\u011f\u0131 vard\u0131r:\n\n* application_train \/ application_test: Ev Kredisi'nde her kredi ba\u015fvurusu hakk\u0131nda bilgi i\u00e7eren ana e\u011fitim ve test verileri. Her kredinin kendi sat\u0131r\u0131 vard\u0131r ve SK_ID_CURR \u00f6zelli\u011fi ile tan\u0131mlan\u0131r. E\u011fitim ba\u015fvuru verileri HEDEF ile birlikte gelir: 0: kredi geri \u00f6dendi veya 1: kredi geri \u00f6denmedi.\n* bureau(Buro): m\u00fc\u015fterinin di\u011fer finansal kurumlardan \u00f6nceki kredilerine ili\u015fkin veriler. \u00d6nceki her bir kredinin b\u00fcroda kendi sat\u0131r\u0131 vard\u0131r, ancak ba\u015fvuru verilerindeki bir kredinin birden fazla \u00f6nceki kredisi olabilir.\n* bureau_balance: B\u00fcrodaki \u00f6nceki kredilerle ilgili ayl\u0131k veriler. Her sat\u0131r \u00f6nceki kredinin bir ay\u0131d\u0131r ve \u00f6nceki tek bir kredinin, kredi uzunlu\u011funun her ay\u0131 i\u00e7in bir tane olmak \u00fczere birden \u00e7ok sat\u0131r\u0131 olabilir.\n* previous_application: ba\u015fvuru verilerinde kredisi olan m\u00fc\u015fterilerin Ev Kredisinde \u00f6nceki kredi ba\u015fvurular\u0131. Ba\u015fvuru verilerinde mevcut her bir kredinin birden fazla \u00f6nceki kredisi olabilir. \u00d6nceki her uygulaman\u0131n bir sat\u0131r\u0131 vard\u0131r ve SK_ID_PREV \u00f6zelli\u011fi ile tan\u0131mlan\u0131r.\n* POS_CASH_BALANCE: m\u00fc\u015fterilerin Ev Kredisi ile sahip olduklar\u0131 \u00f6nceki sat\u0131\u015f noktas\u0131 veya nakdi kredilerle ilgili ayl\u0131k veriler. Her sat\u0131r, \u00f6nceki bir sat\u0131\u015f noktas\u0131n\u0131n veya nakit kredinin bir ay\u0131d\u0131r ve \u00f6nceki tek bir kredinin bir\u00e7ok sat\u0131r\u0131 olabilir.\n* credit_card_balance: m\u00fc\u015fterilerin Ev Kredisi ile ald\u0131klar\u0131 \u00f6nceki kredi kartlar\u0131yla ilgili ayl\u0131k veriler Her sat\u0131r bir ayl\u0131k kredi kart\u0131 bakiyesidir ve tek bir kredi kart\u0131nda \u00e7ok say\u0131da sat\u0131r olabilir.\n* installments_payment: Ev Kredisinde \u00f6nceki krediler i\u00e7in \u00f6deme ge\u00e7mi\u015fi. Yap\u0131lan her \u00f6deme i\u00e7in bir sat\u0131r ve ka\u00e7\u0131r\u0131lan her \u00f6deme i\u00e7in bir sat\u0131r vard\u0131r.","2696e433":"### Lets look at available columns and total number of columns","6b19276e":"## 2.7 What is the minimum number of children do clients have?"}}