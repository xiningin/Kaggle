{"cell_type":{"73c19048":"code","b4acf2f0":"code","7f62b30c":"code","15934ee3":"code","2175e66b":"code","0067a057":"code","2b604641":"code","c58fcac5":"code","23ddc83e":"code","e4478d56":"code","1484c13a":"code","474d32e3":"code","8bc997fa":"code","b994a79e":"code","b624d2ed":"code","c1749ec0":"code","c73e7d1b":"code","f3949f9e":"code","7b5a8bbb":"markdown"},"source":{"73c19048":"# \uc2dc\ud5d8 \ud658\uacbd \uc138\ud305\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(data, target, id_name = '', null_name = ''):\n    if id_name == '':\n        data = data.reset_index().rename(columns = {'index' : 'id'})\n        id_name = 'id'\n    else:\n        id_name = id_name\n        \n    if null_name != '':\n        data[data == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(data, test_size = 0.2, shuffle = True, random_state = 2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns = [id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns = [id_name, target])\n    return X_train, X_test, y_train, y_test\n\ndata = pd.read_csv('..\/input\/adult-census-income\/adult.csv')\nX_train, X_test, y_train, y_test = exam_data_load(data, target = 'income', null_name = '?')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","b4acf2f0":"X_train.head()","7f62b30c":"y_train['income'].value_counts()","15934ee3":"X_train.info()","2175e66b":"X_train.isna().sum()","0067a057":"X_test.isna().sum()","2b604641":"X_train['workclass'].value_counts()","c58fcac5":"X_train['occupation'].value_counts()","23ddc83e":"X_train['native.country'].value_counts()","e4478d56":"def data_fillna(data):\n    data['workclass'] = data['workclass'].fillna(data['workclass'].mode()[0])\n    data['occupation'] = data['occupation'].fillna('null')\n    data['native.country'] = data['native.country'].fillna(data['native.country'].mode()[0])\n    return data\n\nX_train = data_fillna(X_train)\nX_test = data_fillna(X_test)\n\nX_train.isna().sum()","1484c13a":"# \ud53c\ucc98 \uad6c\ubd84\n\nnumeric_features = [\n    'age',\n    'fnlwgt',\n    'education.num',\n    'capital.gain',\n    'capital.loss',\n    'hours.per.week'\n]\n\ncat_features = [\n    'workclass',\n    'education',\n    'marital.status',\n    'occupation',\n    'relationship',\n    'race',\n    'sex',\n    'native.country'\n]","474d32e3":"# \ub77c\ubca8\uc778\ucf54\ub529\n\nfrom sklearn.preprocessing import LabelEncoder\n\nall_df = pd.concat([X_train.assign(ind = 'train'), X_test.assign(ind = 'test')])\nle = LabelEncoder()\nall_df[cat_features] = all_df[cat_features].apply(le.fit_transform)\n\nX_train = all_df[all_df['ind'] == 'train']\nX_train = X_train.drop('ind', axis = 1)\nX_train","8bc997fa":"X_test = all_df[all_df['ind'] == 'test']\nX_test = X_test.drop('ind', axis = 1)\nX_test","b994a79e":"# \uc2a4\ucf00\uc77c\ub9c1\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])\nX_train","b624d2ed":"# \ud0c0\uac9f\uac12 \ubcc0\uacbd\n\ny = (y_train['income'] != '<=50K').astype(int)\ny[:5]","c1749ec0":"# \uac80\uc99d\uc6a9 \ub370\uc774\ud130 \ubd84\ub9ac\n\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y, test_size = 0.2, random_state = 2021)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","c73e7d1b":"# \ubaa8\ub378 \ud3c9\uac00\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = RandomForestClassifier(random_state = 2021)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\nprint('accuracy score : ', accuracy_score(y_val, pred))","f3949f9e":"y_test = (y_test['income'] != '<=50K').astype(int)\npred = model.predict(X_test)\n\nprint('accuracy score : ', accuracy_score(y_test, pred))","7b5a8bbb":"- age : \ub098\uc774\n- workclass : \uace0\uc6a9 \ud615\ud0dc\n- fnlwgt : \uc0ac\ub78c\uc758 \ub300\ud45c\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac00\uc911\uce58(final weight)\n- education : \uad50\uc721 \uc218\uc900\n- education.num : \uad50\uc721 \uc218\uc900 \uc218\uce58\n- marital.status : \uacb0\ud63c \uc0c1\ud0dc\n- occupation : \uc5c5\uc885\n- relationship : \uac00\uc871 \uad00\uacc4\n- race : \uc778\uc885\n- sex : \uc131\ubcc4\n- capital.gain : \uc591\ub3c4 \uc18c\ub4dd\n- capital.loss : \uc591\ub3c4 \uc190\uc2e4\n- hours.per.week : \uc8fc\ub2f9 \uadfc\ubb34 \uc2dc\uac04\n- native.country : \uad6d\uc801\n- income : \uc218\uc775 (\uc608\uce21\ud574\uc57c \ud558\ub294 \uac12)"}}