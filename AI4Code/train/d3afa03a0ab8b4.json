{"cell_type":{"6e24fe39":"code","d3e95b68":"code","4b16d723":"code","a786dbba":"code","a5a1c089":"code","be562da4":"code","9ba2fdce":"code","0a25edba":"code","5954a2f6":"code","e65db69e":"code","b233b3a7":"code","60636483":"code","35c880c6":"markdown","0d38eac0":"markdown","b0764537":"markdown","bc7a3aea":"markdown","1822503f":"markdown","25f2bce7":"markdown","dcef2007":"markdown","9a4fb322":"markdown","5371ca98":"markdown","36ad7acd":"markdown"},"source":{"6e24fe39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d3e95b68":"train_labels = pd.read_csv(\"..\/input\/train.csv\")\n","4b16d723":"label_names = {\n    0:  \"Nucleoplasm\",  \n    1:  \"Nuclear membrane\",   \n    2:  \"Nucleoli\",   \n    3:  \"Nucleoli fibrillar center\",   \n    4:  \"Nuclear speckles\",\n    5:  \"Nuclear bodies\",   \n    6:  \"Endoplasmic reticulum\",   \n    7:  \"Golgi apparatus\",   \n    8:  \"Peroxisomes\",   \n    9:  \"Endosomes\",   \n    10:  \"Lysosomes\",   \n    11:  \"Intermediate filaments\",   \n    12:  \"Actin filaments\",   \n    13:  \"Focal adhesion sites\",   \n    14:  \"Microtubules\",   \n    15:  \"Microtubule ends\",   \n    16:  \"Cytokinetic bridge\",   \n    17:  \"Mitotic spindle\",   \n    18:  \"Microtubule organizing center\",   \n    19:  \"Centrosome\",   \n    20:  \"Lipid droplets\",   \n    21:  \"Plasma membrane\",   \n    22:  \"Cell junctions\",   \n    23:  \"Mitochondria\",   \n    24:  \"Aggresome\",   \n    25:  \"Cytosol\",   \n    26:  \"Cytoplasmic bodies\",   \n    27:  \"Rods & rings\"\n}","a786dbba":"\ntrain_labels_modified = train_labels.copy()\nfor i in range(train_labels_modified.shape[0]):\n    train_labels_modified.Target[i] = train_labels_modified.Target[i].split()\n    for k,j in enumerate(train_labels_modified.Target[i]):\n        train_labels_modified.Target[i][k] = label_names[int(j)]\n    \ntrain_labels_modified.head()","a5a1c089":"from sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\ns = pd.DataFrame(mlb.fit_transform(train_labels_modified.Target),columns=mlb.classes_, index=train_labels_modified.index)\ntrain_labels_one_hot = train_labels_modified.join(s)\ntrain_labels_one_hot","be562da4":"import seaborn as sns\nimport matplotlib.pyplot as plt\ntarget_counts = train_labels_one_hot.drop([\"Id\", \"Target\"],axis =1).sum(axis=0).sort_values(ascending=False)\nplt.figure(figsize=(10,10))\nsns.barplot(x = target_counts.values, y=target_counts.index, order=target_counts.index)\nplt.xlabel(\"Number of Occurences in training set\")\n#plt.ylabel(\"Protein Type\")","9ba2fdce":"plt.figure(figsize=(10,10))\n# Using the same code as above, but divided by number of training images to get percentage\nsns.barplot(x = (target_counts.values)\/train_labels_modified.shape[0], y=target_counts.index, order=target_counts.index)\n\nplt.xlabel(\"Fraction of Occurences in training set\")","0a25edba":"print(\"Number of training images with no protein identified:\", train_labels_modified.Target.isnull().sum())\n# every image has atleast one protein identified, so we don't have to worry about  missing data.","5954a2f6":"# Distribution of number of proteins per image\n\noccurances  = [len(train_labels_modified.Target[i]) for i in range(train_labels_modified.shape[0])]\nplt.hist(occurances, align = \"left\",range = [0,5])\n\n","e65db69e":"plt.figure(figsize=(10,10))\nsns.heatmap(train_labels_one_hot.drop([\"Id\", \"Target\"],axis=1).corr(),cmap=\"RdYlBu\", vmin=-1, vmax=1)","b233b3a7":"#print(os.listdir(\"..\/input\/train\"))","60636483":"from skimage.io import imread\ndef load_image(image_id, path=\"..\/input\/train\/\"):\n    images = np.zeros((4,512,512))\n    images[0,:,:] = imread(path + image_id + \"_green\" + \".png\")\n    images[1,:,:] = imread(path + image_id + \"_red\" + \".png\")\n    images[2,:,:] = imread(path + image_id + \"_blue\" + \".png\")\n    images[3,:,:] = imread(path + image_id + \"_yellow\" + \".png\")\n    return images\n#load_image(image_id = \"000a6c98-bb9b-11e8-b2b9-ac1f6b6435d0\")\ndef display_image_row(image, axis, title):\n    axis[0].imshow(image[0,:,:], cmap = \"Greens\")\n    axis[1].imshow(image[1,:,:], cmap = \"Reds\")\n    axis[2].imshow(image[2,:,:], cmap = \"Blues\")    \n    axis[3].imshow(image[3,:,:], cmap = \"Oranges\")\n    axis[1].set_title(\"microtubules\")\n    axis[2].set_title(\"nucleus\")\n    axis[3].set_title(\"endoplasmatic reticulum\")","35c880c6":"Now it is clear that \"Nucleoplasm\" is present is about 40% of training images,\"cytosol\" in about 30% and so on.\n\nSo, even without any modeling, we know that predicting \"Nucleoplasm\" in a cell is an educated guess that will get us right ~40% of time!!","0d38eac0":"**Working on data loading and display**(Incomplete)","b0764537":"This Kernel contains basic analysis of data that includes the following:\n\n1) Converting *train.csv*'s \"Target\" column from string to list [required for one-hot-encoding]\n\n2) One Hot Encoding of \"Target\" column.\n\n3) Frequency of protein occurance\n\n4) Correlations among protein types.\n\nNote: This kernal is a work in progress. I will update above description periodically.\n\nAcknowledgements:\n1) \"Protein Atlas - Exploration and Baseline\" Kernel by Allunia\n","bc7a3aea":"**Protein Histogram: Frequency of occurence of proteins** ","1822503f":"**Converting Target: string to list **","25f2bce7":"**One Hot Encoding Target Column**\n\n(I am using MultiLabelBinarizer here. For one hot encoding using first principles, please refer Allunia's kernel mentioned in Acknowledgement.)","dcef2007":"**Observations**: Almost half of the training images have one protein and most of other half have 2 proteins.  ","9a4fb322":"Above Plot tells us that \"Nucleoplasm\" is the most frequent protein followed by cytosol and so on.\n\nIt is worthwhile to see: In what percentage of training images\/cells, a particular protein is identified","5371ca98":"1) *endosomes* and *lysosomes* occur in pairs(most of the time).\n\n2)* mitotic spindle* and *cytokinetic bridge* occur in pairs(sometimes)","36ad7acd":"**Are there any proteins that (almost always) occur in pairs ?**"}}