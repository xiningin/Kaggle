{"cell_type":{"76ddddcf":"code","05170775":"code","b32a8611":"code","b0def510":"code","8c4c35b2":"code","e83ca920":"code","e7889f18":"code","3c15801d":"code","4c048a9b":"code","fd83bb99":"code","aac8fb5e":"code","c3a19b65":"code","0de020a9":"code","0894485c":"code","eca0e19c":"code","0a639008":"markdown","2da2067a":"markdown","be5cf878":"markdown"},"source":{"76ddddcf":"import pandas as pd\nimport numpy as np\nimport seaborn as sns","05170775":"TRAIN_PATH = '\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv'\nTEST_PATH = '\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv'\n\nTRAIN_DTYPE = {\n        'row_id': 'uint32',\n        'country': 'category',\n        'store': 'category',\n        'product': 'category',\n        'num_sold': 'uint32'\n    }\nTEST_DTYPE = {\n        'row_id': 'uint32',\n        'country': 'category',\n        'store': 'category',\n        'product': 'category',\n    }\n\nCAT_COLS = ['country', 'store', 'product']\nTS_COLS = ['country', 'store', 'product']\nTARGET_COL = 'num_sold'\nDATE_COL = 'date'\nDATE_FREQ = 'D'\nID_COL = 'row_id'\n\n","b32a8611":"train = pd.read_csv(TRAIN_PATH, dtype=TRAIN_DTYPE, parse_dates=[DATE_COL], infer_datetime_format=True,)\ntest = pd.read_csv(TEST_PATH, dtype=TEST_DTYPE, parse_dates=[DATE_COL],infer_datetime_format=True,)","b0def510":"train[DATE_COL] = train[DATE_COL].dt.to_period(DATE_FREQ)\ntest[DATE_COL] = test[DATE_COL].dt.to_period(DATE_FREQ)","8c4c35b2":"train.tail(3)\n# test.tail(3)","e83ca920":"train_missing_ratio = ((train.isnull().sum() \/ len(train)) * 100).sort_values(ascending=False).to_frame(name=\"missing_ratio\").query(\"missing_ratio>0\")\ntest_missing_ratio = ((test.isnull().sum() \/ len(test)) * 100).sort_values(ascending=False).to_frame(name=\"missing_ratio\").query(\"missing_ratio>0\")","e7889f18":"cat_col_unique = pd.DataFrame({\n    'train_nunique': train[CAT_COLS].nunique(),\n    'train_unique':[train[col].unique().to_list() for col in CAT_COLS],\n    'test_nunique': test[CAT_COLS].nunique(),\n    'test_unique':[test[col].unique().to_list() for col in CAT_COLS],\n})\n","3c15801d":"train_num_series = np.product(train[TS_COLS].nunique())\ntest_num_series = np.product(test[TS_COLS].nunique())","4c048a9b":"train_possible_dates = pd.date_range(\n    start=train[DATE_COL].min().strftime('%Y-%m-%d'), \n    end=train[DATE_COL].max().strftime('%Y-%m-%d'))\ntest_possible_dates = pd.date_range(\n    start=test[DATE_COL].min().strftime('%Y-%m-%d'), \n    end=test[DATE_COL].max().strftime('%Y-%m-%d'))","fd83bb99":"print(f\"train columns:\\n{train.columns}\")\nprint(f\"test columns:\\n{test.columns}\\n\")\n\nprint(f\"train shape:\\n{train.shape}\")\nprint(f\"test shape:\\n{test.shape}\\n\")\n\nprint(f\"train dtypes:\\n{train.dtypes}\")\nprint(f\"test dtypes:\\n{test.dtypes}\\n\")\n\nprint(f\"train dtypes value_counts:\\n{train.dtypes.value_counts()}\")\nprint(f\"test dtypes value_counts:\\n{test.dtypes.value_counts()}\\n\")\n\nprint(f\"train_missing_ratio:\\n{train_missing_ratio}\")\nprint(f\"test_missing_ratio:\\n{test_missing_ratio}\\n\")\n\nprint(f\"cat_col_unique:\\n{cat_col_unique}\\n\")\n\nprint(f\"train_num_series:\\n{train_num_series}\")\nprint(f\"test_num_series:\\n{test_num_series}\\n\")\n\nprint(f\"No missing dates in train: {(len(train_possible_dates)*train_num_series)==len(train)}\")\nprint(f\"No missing dates in test: {(len(test_possible_dates)*test_num_series)==len(test)}\\n\")\n\nprint(f\"forecast horzions: {test[DATE_COL].nunique()} {DATE_FREQ}\")","aac8fb5e":"train['store_product'] = train[['store','product']].apply(lambda x: '-'.join(x), axis=1)\ntrain","c3a19b65":"train['date_str'] = [d.strftime('%Y-%m-%d') for d in train.date]\ntrain['year'] = train.date.dt.year\ntrain['month'] = train.date.dt.month\ntrain['weekday'] = train.date.dt.weekday\ntrain['week'] =train.date.dt.week\ntrain[\"day\"] = train.date.dt.dayofweek","0de020a9":"# double click the image to enlarge\ng = sns.FacetGrid(train, row=\"country\", col=\"store_product\" ,sharex=True,sharey=False, margin_titles=True, height=4, aspect=4)\ng.map(sns.lineplot, \"date_str\", \"num_sold\", )\nfor axes in g.axes.flat:\n    labels = [d.strftime('%Y-%m-%d') for d in train.iloc[train[['year','month']].drop_duplicates(keep='first').index,1].to_list()]\n    axes.set_xticks(labels)\n    axes.set_xticklabels(labels, rotation=90)","0894485c":"train = train.set_index(TS_COLS+[DATE_COL]).sort_index()\ntrain = train.unstack(TS_COLS)","eca0e19c":"X = pd.DataFrame({'num_sold':train.iloc[:,0],\n                 'week':[idx.to_timestamp().week for idx in train.iloc[:,0].index],\n                 'day':[idx.to_timestamp().dayofweek for idx in train.iloc[:,0].index],\n                'year':[idx.to_timestamp().year for idx in train.iloc[:,0].index],\n\n\n                 })\n","0a639008":"validation: to determine what cleaning is needed","2da2067a":"## EDA notebook","be5cf878":"plots"}}