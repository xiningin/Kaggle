{"cell_type":{"9c91856c":"code","0f7e406d":"code","a20fbb9d":"code","884a3ff0":"code","4d02cf72":"code","679732e4":"code","cbf37675":"code","ac9e6e8e":"code","6ec51a65":"code","59d9c3f9":"code","9903e128":"code","3dd63a69":"code","4fa12f26":"code","5ebbd279":"code","d37c56a3":"code","88b84798":"code","5b3c82a8":"code","4c0e2d66":"code","2d8c84e6":"code","951f4ce3":"code","14a8f9a0":"markdown","e042c94d":"markdown","81471b39":"markdown","c088ce67":"markdown","cb79a992":"markdown","d8df0745":"markdown","1880c143":"markdown","c98cb549":"markdown","3e7f8b52":"markdown","5c20861b":"markdown","da203a69":"markdown","525bf7f6":"markdown","1847e9d5":"markdown","8e09dfab":"markdown","31e8bbdb":"markdown","6bf287b8":"markdown","8b572e6a":"markdown","7c82a4b3":"markdown","031448fb":"markdown","20e03d0f":"markdown","d58ecf23":"markdown"},"source":{"9c91856c":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","0f7e406d":"print(os.listdir('..\/input'))","a20fbb9d":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","884a3ff0":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","4d02cf72":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","679732e4":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 2016.csv has 25119 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/2016.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = '2016.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","cbf37675":"df1.head(5)","ac9e6e8e":"plotPerColumnDistribution(df1, 10, 5)","6ec51a65":"plotCorrelationMatrix(df1, 8)","59d9c3f9":"plotScatterMatrix(df1, 15, 10)","9903e128":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 2017.csv has 49670 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('..\/input\/2017.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = '2017.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","3dd63a69":"df2.head(5)","4fa12f26":"plotPerColumnDistribution(df2, 10, 5)","5ebbd279":"plotCorrelationMatrix(df2, 8)","d37c56a3":"plotScatterMatrix(df2, 15, 10)","88b84798":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# 2018.csv has 128588 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('..\/input\/2018.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = '2018.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","5b3c82a8":"df3.head(5)","4c0e2d66":"plotPerColumnDistribution(df3, 10, 5)","2d8c84e6":"plotCorrelationMatrix(df3, 8)","951f4ce3":"plotScatterMatrix(df3, 15, 10)","14a8f9a0":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","e042c94d":"Correlation matrix:","81471b39":"Scatter and density plots:","c088ce67":"Correlation matrix:","cb79a992":"There are 3 csv files in the current version of the dataset:\n","d8df0745":"### Let's check 1st file: ..\/input\/2016.csv","1880c143":"Scatter and density plots:","c98cb549":"### Let's check 3rd file: ..\/input\/2018.csv","3e7f8b52":"Let's take a quick look at what the data looks like:","5c20861b":"### Let's check 2nd file: ..\/input\/2017.csv","da203a69":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","525bf7f6":"Distribution graphs (histogram\/bar graph) of sampled columns:","1847e9d5":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","8e09dfab":"Correlation matrix:","31e8bbdb":"Now you're ready to read in the data and use the plotting functions to visualize the data.","6bf287b8":"Let's take a quick look at what the data looks like:","8b572e6a":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","7c82a4b3":"Let's take a quick look at what the data looks like:","031448fb":"Scatter and density plots:","20e03d0f":"Distribution graphs (histogram\/bar graph) of sampled columns:","d58ecf23":"Distribution graphs (histogram\/bar graph) of sampled columns:"}}