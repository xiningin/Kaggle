{"cell_type":{"8b44f304":"code","65d1ff9b":"code","534fae73":"code","4095aed6":"code","44f04750":"code","c4ffc023":"code","9c42cf5b":"code","ca27318b":"code","ecd8632f":"code","68486209":"code","dd5f8bb8":"code","99ef16b7":"code","89524773":"code","30595e92":"code","8b639417":"code","d460bb69":"code","1afff683":"markdown","01c1b2ca":"markdown","6fa06c5d":"markdown","70d9dd8f":"markdown","98e53345":"markdown","9b64092c":"markdown","f16dfe10":"markdown","1f652fe4":"markdown","29f168f0":"markdown","0731764c":"markdown","5e0da564":"markdown","0ae69d6a":"markdown","ad1107ce":"markdown","e1bb3514":"markdown"},"source":{"8b44f304":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objs as go \nfrom plotly.offline import init_notebook_mode, iplot, plot\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n\ninit_notebook_mode(connected=True)\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","65d1ff9b":"fdata = pd.read_csv(\"..\/input\/fifa19\/data.csv\")\n\nfdata = fdata.iloc[:,[\n 0,  # Index\n 2,  # Name\n 3,  # Age\n 5,  # Nationality\n 7,  # Overall\n 8,  # Potential\n 11, # Value\n 12, # Wage\n 14, # Preferred Foot\n 19, # Body Type \n 21, # Position\n 22, # Jersey Number\n 26, # Height\n 27, # Weight\n 69, # Shot Power\n 71, # Stamina\n 74, # Aggression\n 75, # Interceptions\n 76, # Positioning\n 77, # Vision\n 79, ]] # Composure","534fae73":"fdata.corr()","4095aed6":"fdata.rename(columns = {\"Preferred Foot\" : \"preferred_foot\",\n                        \"International Reputation\" : \"International_Reputation\",\n                        \"Skill Moves\" : \"Skill_Moves\",\n                        \"Work Rate\" : \"Work_Rate\",\n                        \"Body Type\" : \"Body_Type\",     \n                        \"Jersey Number\" : \"Jersey_Number\"\n                         },inplace = True)\n","44f04750":"# 48 player has Nan values in so much feature so I deleted these 48 players. \nfdata.drop(fdata[fdata.Body_Type.isnull()].index, inplace = True)\nfdata.isnull().sum()","c4ffc023":"\nfdata[\"Position\"].fillna(\"UN\",inplace = True )\nfdata[\"Jersey_Number\"].fillna(\"99\",inplace = True)\nfdata[\"Jersey_Number\"] = fdata[\"Jersey_Number\"].astype(\"float\")","9c42cf5b":"nationalities = list(fdata.Nationality.unique())\nmean_list = []\nnationalities_mean_weight = {}\ndef weight_lbs(value) :\n    output = value.replace(\"lbs\",\"\")\n    return output\n\nfor j in nationalities :\n    weight = fdata[fdata[\"Nationality\"] == j ].Weight.apply(lambda x  : weight_lbs(x)).astype(\"float\").mean()\n    mean_list.append(weight)\n    \ndata_dict = {\"nationalities\" : nationalities,\"weight_mean\" : mean_list}\n\nlast_data = pd.DataFrame.from_dict(data_dict).sort_values(by = \"weight_mean\",ascending = False)\n\ntrace = go.Scatter(x = last_data.nationalities , \n                  y = last_data.weight_mean, \n                  mode = \"lines\")\n\n\nlayout = {\"title\" : \"Average weight for Nationalities \",\"xaxis\": {\"title\"  : \"Nationalities\"},\"yaxis\" : {\"title\": \"Weight(Lbs)\"}}\niplot({\"data\" : [trace],\"layout\" : layout})\n\nplt.show()","ca27318b":"Forward =  [\"RF\" , \"ST\" , \"LW\" , \"LF\" , \"RS\" , \"LS\" , \"RW\" , \"CF\"] \nMiddle = [\"RCM\" , \"LCM\" , \"LDM\" , \"CAM\" , \"CDM\" , \"RM\" , \"LAM\" , \"LM\" ,\"RDM\" , \"CM\" , \"RAM\" ]\nStopper = [\"RCB\" , \"CB\" , \"LCB\" , \"LB\" , \"RB\" , \"RWB\" , \"LWB\" ]   \nGoal_Keeper =  [\"GK\"] \n    \nforward_data = pd.DataFrame()\nmiddle_data = pd.DataFrame()\nstopper_data = pd.DataFrame()\ngk_data = fdata[fdata.Position == \"GK\"]\n\nfor i in Forward : \n    forward_data = forward_data.append(fdata[fdata.Position == i])\nfor i in Middle : \n    middle_data = middle_data.append(fdata[fdata.Position == i])\nfor i in Stopper :\n    stopper_data = stopper_data.append(fdata[fdata.Position == i])\n\n# \nfig = make_subplots(rows=2, cols=2)\nfig.add_trace(go.Histogram(x = forward_data.Jersey_Number ,name= \"Forward\" , histnorm='probability'),row = 1 , col = 1)\nfig.add_trace(go.Histogram(x = middle_data.Jersey_Number , name = \"Middle\" , histnorm='probability'), row = 1 , col =2 )\nfig.add_trace(go.Histogram(x = stopper_data.Jersey_Number , name = \"Stopper\" , histnorm='probability') , row = 2 ,col=1)\nfig.add_trace(go.Histogram(x = gk_data.Jersey_Number , name = \"Goal Keeper\" , histnorm='probability'),row=2,col=2)\nfig.update_layout(height=750, width=1300,title = \"Distribution of Jersey Number by Positions\")\nfig.show()","ecd8632f":"preferred_data = pd.DataFrame({\"Nationality\" : [],\"Right\": [],\"Left\" : []} )\n\nindex = 0   \nfor i in nationalities : \n    preferred_data.loc[index] = fdata[fdata.Nationality == i].preferred_foot.value_counts() \n    preferred_data.loc[index,\"Nationality\"] = i\n    index+=1\n    \n\npreferred_data.sort_values(by = [\"Right\",\"Left\"],ascending= False,inplace = True)\nfig = go.Figure([go.Bar(x = preferred_data.Right,y = preferred_data.Nationality.head(50),orientation = \"h\",name =\"Right Foot\"),go.Bar(x = preferred_data.Left,y = preferred_data.Nationality.head(50),orientation = \"h\",name = \"Left Foot\")])      \nfig.update_layout(barmode='overlay')\nfig.show()","68486209":"bmi_data = fdata.loc[:,[\"Name\",\"Height\",\"Weight\"]]\n\ndef to_bmi(data) :\n    return  data[1]\/ (data[0] **2 ) * 10000\n\ndef to_kg(lbs) :\n    kg = float(lbs[0].replace(\"lbs\",\"\")) \/ 2.2046\n    return kg\n\ndef to_m(height) : \n    meters = float(height[0].replace(\"'\",\".\")[0]) * 30.48 + float(height[0].replace(\"'\",\".\")[2]) * 2.54\n    return meters\n\nbmi_data[\"height_meters\"] = bmi_data.loc[:,[\"Height\"]].apply(lambda x :to_m(x) , axis =  1)\nbmi_data[\"weight_kg\"] = bmi_data.loc[:,[\"Weight\"]].apply(lambda x :to_kg(x) , axis =  1)\nbmi_data[\"bmi\"] = bmi_data.loc[:,[\"height_meters\",\"weight_kg\"]].apply(lambda x :to_bmi(x) , axis =  1)\n\nunder_data = bmi_data[bmi_data.bmi < 18.5 ]\nnormal_data = bmi_data[bmi_data.bmi > 18.5  ]\nover_data = bmi_data[bmi_data.bmi >  24.9]\nvery_data = bmi_data[bmi_data.bmi > 29.9 ]\n\nbmi_data.bmi = bmi_data.bmi.astype(\"str\")\ntrace1 = go.Scatter(x =under_data.weight_kg, y = under_data.height_meters, mode = \"markers\" , marker = dict(color = \"rgba(0,0,240,0.8)\" ), text = bmi_data.bmi + bmi_data.Name ,name = \"Underweight\")\ntrace2 = go.Scatter(x =normal_data.weight_kg, y = normal_data.height_meters, mode = \"markers\" , marker = dict( color = \"rgba(0,255,0,0.8)\"), text = bmi_data.bmi + bmi_data.Name, name = \"Normal Weight\")\ntrace3 = go.Scatter(x =over_data.weight_kg, y = over_data.height_meters, mode = \"markers\" , marker = dict( color = \"rgba(255,128,0,0.8)\"), text = bmi_data.bmi + bmi_data.Name, name = \"Overweight\")\ntrace4 = go.Scatter(x =very_data.weight_kg, y = very_data.height_meters, mode = \"markers\" , marker = dict( color = \"rgba(255,0,0,0.8)\"), text = bmi_data.bmi + bmi_data.Name , name = \"Very Overweight\")\n\nlayout = dict(title = 'Body Massive Index ',xaxis= dict(title= 'Weight(kg)',ticklen= 5,zeroline= False),yaxis= dict(title= 'Height(cm)',ticklen= 5,zeroline= False))\ndata = [trace1,trace2,trace3,trace4]\n\nfig = dict(data = data,layout = layout)\niplot(fig)","dd5f8bb8":"potential_list = list()\nfor j in nationalities : \n    potential_list.append(fdata.Potential[fdata.Nationality == j ].mean())\n    \npotential_dict = dict(Nationality = nationalities , Potential_mean = potential_list)\n\npotential_data = pd.DataFrame.from_dict(potential_dict)\n\ntrace = [go.Choropleth(\n            colorscale = 'YlOrRd',\n            locationmode = 'country names',\n            locations = potential_data['Nationality'],\n            text = potential_data['Nationality'],\n            z = potential_data['Potential_mean'],\n)]\n\nlayout = go.Layout(title = 'Country Potential Mean ')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","99ef16b7":"fdata.Wage = fdata.Wage.str.replace(\"\u20ac\", \"\")\nfdata.Wage = fdata.Wage.str.replace(\"K\", \"000\")\nfdata.Wage = fdata.Wage.astype(\"float\")\n\nfdata[\"Age_Group\"] = [\"Under 25\" if each < 25 else \"25-30\" if each < 30 else \"30-35\" if each < 35 else \"Upper 35 \" for each in fdata.Age]\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 15)\n\nwage_plot = sns.violinplot(data = fdata , x = \"Age_Group\" , y = \"Wage\" ) \nfig.show()","89524773":"fdata.Value = fdata.Value.str.replace(\"\u20ac\",\"\")\nfdata.Value = fdata.Value.str.replace(\"M\",\"000000\")\nfdata.Value = fdata.Value.str.replace(\"K\",\"000\")\nfdata.Value = fdata.Value.str.replace(\".50\",\"5\")\nfdata.Value = fdata.Value.str.replace(\".20\",\"2\")\nfdata.Value = fdata.Value.astype(\"float\")\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 15)\nvalue_plot = sns.violinplot(data = fdata , x = \"Age_Group\" , y = \"Value\" ) ","30595e92":"import seaborn as sns\nsns.set()\n\nfig, ax = plt.subplots()\nfig.set_size_inches(12, 12)\n\ncmap = sns.cubehelix_palette(rot=-.2, as_cmap=True)\nax = sns.scatterplot(x=\"Stamina\", y=\"ShotPower\",\n                     size=\"Age\",\n                     palette=\"gnuplot2\", sizes=(10,200),\n                     data=fdata)","8b639417":"fig, ax = plt.subplots()\nfig.set_size_inches(10, 10)\nsns.regplot(x = \"Composure\", y =\"Overall\" , data = fdata)\n\nfig.show()","d460bb69":"forward_new = forward_data.copy()\nmiddle_new = middle_data.copy()\nstopper_new = stopper_data.copy()\ngk_new = gk_data.copy()\nforward_new[\"Position_Group\"] = \"Forward\"\nmiddle_new[\"Position_Group\"] = \"Middle\"\nstopper_new[\"Position_Group\"] = \"Stopper\"\ngk_new[\"Position_Group\"] = \"Goal Keeper\"\ndata_ps = pd.concat([forward_new,middle_new,stopper_new,gk_new])\n\n\nfig, ax = plt.subplots()\nfig.set_size_inches(40, 10)\nsns.set(style=\"whitegrid\", palette=\"muted\")\nsns.swarmplot(x = \"Position_Group\", y = \"Aggression\" ,hue = \"preferred_foot\" , data = data_ps ) \nfig.show()","1afff683":"**CLEAN\u0130NG DATA **\n\n","01c1b2ca":"5. In this graph, you can see the nationalities' average potential. ","6fa06c5d":"This kernel is finished for now. It was my first kernel so your comments are important for me. I am waiting your suggestions.\n\nThank you.\nto be continued ... ","70d9dd8f":"3. In this graph , you can see right foot , left foot rate for head 50 nationalites. ","98e53345":"To begin I selected columns which I will use. \nYou can see their names in the code line. ","9b64092c":"**VISUALIZATION**","f16dfe10":"4. In this graph, \u0131 showed Body mass index value of every player. The graph is colored by body class depend on BMI. \n\n\nBody mass index (BMI) is a value derived from the mass (weight) and height of a person. The BMI is defined as the body mass divided by the square of the body height, and is universally expressed in units of kg\/m2, resulting from mass in kilograms and height in metres.(wikipedia)\n\n\n\nBody Mass Index\n\nBMI Formula = weight(kg) \/ height (m) ^ 2 \n\nBelow 18.5 --> Underweight \n\n18.5 - 24.9 --> Normal \n\n25.0 - 29.9 --> Overweight \n\n30.0 and up --> Very overweight ","1f652fe4":"1. In the first graph, \u0131 compared average weight for every nationality.\n\nAs you see, there is a big difference between the highest and the lightest nationality. But probably this difference because of the scarcity of football player in some nationalities. If you ignore these nationalities, most of the nationalities would be close average value. ","29f168f0":" 2. In the second graph, \u0131 showed the distribution of jersey Number by positions\n\nI made four main group depend on where they are in Football Field \n\nForward : RF , ST , LW , LF , RS , LS , RW , CF \n\nMiddle : RCM , LCM , LDM , CAM , CDM , RM , LAM , LM ,RDM , CM , RAM\n\nStopper : RCB , CB , LCB , LB , RB , RWB , LWB  \n\nGoal Keeper :  GK ","0731764c":"****FIFA 19 - DATA VISUALIZATION****\n\n\nIn this kernel; I  will examine the \"FIFA 19 complete player dataset\". \nFirstly what is the \"FIFA game series\". \n\nAs cited by Wikipedia web site : \n\nFIFA, also known as FIFA Football or FIFA Soccer, is a series of association football video games or football simulator, released annually by Electronic Arts under the EA Sports label. Football video games such as Sensible Soccer, Kick Off and Match Day had been developed since the late 1980s and already competitive in the games market when EA Sports announced a football game as the next addition to their EA Sports label. The Guardian called the series \"the slickest, most polished and by far the most popular football game around.\" As of 2011, the FIFA franchise has been localised into 18 languages and available in 51 countries. Listed in Guinness World Records as the best-selling sports video game franchise in the world, by 2018, the FIFA series had sold over 260 million copies.It is also one of the best-selling video game franchises. (https:\/\/en.wikipedia.org\/wiki\/FIFA_(video_game_series)  \n\n<iframe src=\"https:\/\/giphy.com\/embed\/VbVVXyxgxcNmLQcUZa\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen><\/iframe><p><a href=\"https:\/\/giphy.com\/gifs\/VbVVXyxgxcNmLQcUZa\">via GIPHY<\/a><\/p>\n","5e0da564":"10. In this graph, \u0131 examine Aggression depend on Position group. You can see also preferred foot distribution. ","0ae69d6a":"6. 7. In these graphs, you can see distribution wages and values depend on players' age. \n","ad1107ce":"9. In this graph, you can see the correlation between Overall and Composure features.  ","e1bb3514":"8. In this graph, you can see the correlation between Shot power and  Stamina features.  \n"}}