{"cell_type":{"b3abbd9f":"code","b0337db1":"code","51417ee6":"code","1f2ec7f0":"code","d08f01c9":"code","330d611f":"code","5aa2ca44":"code","869378cc":"code","429641d3":"code","21dc946a":"code","8d4947ae":"code","b06c8517":"code","617bf785":"code","d69069f8":"code","7414af52":"code","abe2ce9d":"code","c4f2a447":"code","83a9b533":"code","2aee638e":"code","14f1048f":"code","58753e55":"code","eeb73f7a":"code","f6bbad02":"code","bada808a":"code","e6fa34fa":"code","936bf33c":"code","ec56ac11":"code","c6ec096b":"code","46ef3c6a":"code","d6e88987":"code","8360ccea":"code","e507b40b":"code","e3827f9c":"code","35b90e2c":"code","cdaf3ad9":"code","2c7cd16f":"code","587ca953":"code","c2489e5d":"code","907adacb":"code","f93bba57":"code","2d0e3a0d":"code","e23aef3c":"code","1d56cba0":"code","ad614ba9":"code","d1748509":"code","c28dc93f":"code","262e7c45":"code","39bed1c3":"code","3ee751d1":"code","7a5c0dc4":"code","8181c9ce":"code","05689385":"code","2c26ee7f":"code","d8c85795":"code","d198f3d0":"code","3bc6a247":"code","796905a9":"code","c907c66e":"code","9f2b9d28":"code","f329c1c0":"code","4fad09b7":"code","df149291":"code","5beee4e1":"code","31981837":"code","fb807752":"code","60e34a64":"code","b17862a4":"code","68a08701":"code","e7b2f87d":"code","21c2cb73":"code","1d6f008d":"code","bf1d8c39":"code","3b2f64ca":"code","a1aa7ff1":"code","1c3b70b1":"code","3b308503":"code","cc2f07e0":"code","67bc53ae":"code","2c9170e6":"code","d8cba1ff":"code","b5fd681f":"code","e6063bca":"code","1a21e8ac":"code","19d868e1":"code","5f772fc7":"code","637b3138":"code","4a285034":"code","68d7e0bd":"code","c6bcef93":"code","fb0870cd":"code","3d87242e":"code","95b4eaea":"code","0eacb474":"code","8474ef6c":"code","6863dcde":"code","7aa8f4df":"code","42052109":"code","906cc859":"code","7bc6a41b":"code","4ff0261b":"code","3d64cf35":"code","8171b586":"code","84a27d0b":"code","c087441f":"code","946fea8c":"code","28349a3d":"code","4d982428":"code","9e25b1f6":"code","f54149d5":"code","194674ed":"code","3e5f20f2":"code","a893b231":"code","23707c32":"code","dac21a2c":"code","5d4f6d31":"code","f961a9d9":"code","358ca42e":"markdown","eb2ab488":"markdown","c7533d9d":"markdown","141ffc45":"markdown","85cb73fd":"markdown","e8c879a2":"markdown","3c2781d0":"markdown","4c8bab17":"markdown","a8618255":"markdown","46d46dcb":"markdown","c8ba8de5":"markdown","e848eb95":"markdown","2c6eb8fd":"markdown","ba36331d":"markdown","388cb6b9":"markdown","412b2c57":"markdown","a8f89237":"markdown","9c744f70":"markdown","c15540a8":"markdown","3f09089e":"markdown","b740632d":"markdown","e6fba24a":"markdown","8c5d9cf8":"markdown","b3cc85df":"markdown","4668cc29":"markdown","b1bf442a":"markdown","a3517c99":"markdown","edb59005":"markdown","d8ab39a4":"markdown","431e6758":"markdown","a7e2adb3":"markdown","4cd56322":"markdown","6e4839b7":"markdown","c55688c0":"markdown","c257de7d":"markdown","e0cef6e2":"markdown","4410085e":"markdown","9fff1271":"markdown","d7a2b60c":"markdown","b516703e":"markdown","7e1582a3":"markdown","a3a7cb2e":"markdown","6e7b09c6":"markdown","e82bcbc3":"markdown","63d9506c":"markdown","9f377afb":"markdown","64f1a193":"markdown","a81e499f":"markdown","92fcd056":"markdown","341f7028":"markdown","42b4ae05":"markdown","3400fd24":"markdown","060c43f5":"markdown","1683d1af":"markdown","5146e7c5":"markdown","d082919c":"markdown","9e64594d":"markdown","80ecf736":"markdown","2221e9a8":"markdown","f5f0435f":"markdown","8b85bae8":"markdown","85494f19":"markdown","0f0a35bb":"markdown","afaa350d":"markdown","9139b1ad":"markdown","5439739a":"markdown","1436eadb":"markdown","d1ae0a76":"markdown","d058fb6a":"markdown","5a42c089":"markdown","2c8a2873":"markdown","29eca79d":"markdown","31161158":"markdown","db379589":"markdown"},"source":{"b3abbd9f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px \nimport warnings\nwarnings.filterwarnings('ignore')","b0337db1":"!pip install openpyxl","51417ee6":"train=pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\ntest=pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')\nsample=pd.read_excel('..\/input\/flight-fare-prediction-mh\/Sample_submission.xlsx')","1f2ec7f0":"train","d08f01c9":"test","330d611f":"sample","5aa2ca44":"#We will combine train and test data for better Analysis\ntrain['source']='train'\ntest['source']='test'\ntest['Price']=0\n\n#Concatenating the data in df variable\ndf=pd.concat([train,test],sort=False,ignore_index=True)","869378cc":"df.head()","429641d3":"df.shape","21dc946a":"df.nunique()","8d4947ae":"df.isnull().sum()","b06c8517":"df.dtypes","617bf785":"#Converting Departure time to fatetime format\ndf['Dep_Time']=pd.to_datetime(df['Dep_Time'])","d69069f8":"#extracting hour and minutes \ndf['Dep_Hour']=df['Dep_Time'].dt.hour\ndf['Dep_Min']=df['Dep_Time'].dt.minute","7414af52":"df.drop('Dep_Time',axis=1,inplace=True)","abe2ce9d":"#Completing the values of duration column\ndef complete(x):\n    if 'h' not in x:\n        x='00h '+x\n    elif 'm' not in x:\n        x=x+' 00m'\n    return x\n\ndf['Duration']=df['Duration'].apply(complete)","c4f2a447":"#Retireving hour and mins\ndef hour(x):\n    h=x.split('h')[0]\n    return int(h)\n\ndef mins(x):\n    m=x.split()[1]\n    m=m[:-1]\n    return int(m)\n\n\ndf['Duration_hours']=df['Duration'].apply(hour)\ndf['Duration_minutes']=df['Duration'].apply(mins)","83a9b533":"#converting hour and minutes to minutes\ndf['Duration_mins']=(df['Duration_hours']*60)+df['Duration_minutes']","2aee638e":"df.drop(['Duration_hours','Duration_minutes','Duration'],axis=1,inplace=True)","14f1048f":"plt.figure(figsize=(15,8))\nsns.countplot(x='Airline',data=df)\nplt.xticks(rotation=45)\ndf['Airline'].value_counts()","58753e55":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ndf['Source'].value_counts().plot.pie(autopct='%1.1f%%')\ncentre=plt.Circle((0,0),0.7,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre)\nplt.subplot(1,2,2)\nsns.countplot(x='Source',data=df)\ndf['Source'].value_counts()","eeb73f7a":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ndf['Destination'].value_counts().plot.pie(autopct='%1.1f%%')\ncentre=plt.Circle((0,0),0.7,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre)\nplt.subplot(1,2,2)\nsns.countplot(x='Destination',data=df)\ndf['Destination'].value_counts()","f6bbad02":"plt.figure(figsize=(15,8))\nplt.subplot(1,2,1)\ndf['Total_Stops'].value_counts().plot.pie(autopct='%1.1f%%')\ncentre=plt.Circle((0,0),0.7,fc='white')\nfig=plt.gcf()\nfig.gca().add_artist(centre)\nplt.subplot(1,2,2)\nsns.countplot(x='Total_Stops',data=df)\ndf['Total_Stops'].value_counts()","bada808a":"plt.figure(figsize=(15,8))\nsns.countplot(x='Additional_Info',data=df)\nplt.xticks(rotation=45)\ndf['Additional_Info'].value_counts()","e6fa34fa":"plt.figure(figsize=(15,8))\nsns.countplot(df['Route'],color='k')\ndf['Route'].value_counts().head()","936bf33c":"plt.figure(figsize=(8,6))\nsns.histplot(df['Price'],kde=True,color='k')\nprint('Minimum',df['Price'].min())\nprint('Maximum',df['Price'].max())","ec56ac11":"df[df['Price']==0]","c6ec096b":"plt.figure(figsize=(8,6))\nsns.histplot(df['Duration_mins'],kde=True,color='k')\nprint('Minimum',df['Duration_mins'].min())\nprint('Maximum',df['Duration_mins'].max())","46ef3c6a":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Airline',y='Price',data=df)\nplt.xticks(rotation=45)","d6e88987":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Source',y='Price',data=df)\nplt.xticks(rotation=45)","8360ccea":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Destination',y='Price',data=df)\nplt.xticks(rotation=45)","e507b40b":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Total_Stops',y='Price',data=df)\nplt.xticks(rotation=45)","e3827f9c":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Additional_Info',y='Price',data=df)\nplt.xticks(rotation=45)","35b90e2c":"sns.lmplot(x='Duration_mins',y='Price',data=df,height=6, aspect=1.2)","cdaf3ad9":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Airline',y='Duration_mins',data=df)\nplt.xticks(rotation=45)","2c7cd16f":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Source',y='Duration_mins',data=df)\nplt.xticks(rotation=45)","587ca953":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Destination',y='Duration_mins',data=df)\nplt.xticks(rotation=45)","c2489e5d":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Total_Stops',y='Duration_mins',data=df)\nplt.xticks(rotation=45)","907adacb":"plt.figure(figsize=(15,6))\nsns.boxenplot(x='Additional_Info',y='Duration_mins',data=df)\nplt.xticks(rotation=45)","f93bba57":"plt.figure(figsize=(15,6))\nsns.countplot(df['Source'],hue='Total_Stops',data=df)\nplt.legend(loc='upper right')","2d0e3a0d":"plt.figure(figsize=(15,6))\nsns.countplot(df['Source'],hue='Destination',data=df)\nplt.legend(loc='upper right')","e23aef3c":"plt.figure(figsize=(15,6))\nsns.countplot(df['Total_Stops'],hue='Airline',data=df,palette='Dark2')\nplt.legend(loc='upper right')","1d56cba0":"plt.figure(figsize=(15,6))\nsns.countplot(df['Destination'],hue='Airline',data=df,palette='Dark2')\nplt.legend(loc='upper right')","ad614ba9":"plt.figure(figsize=(15,6))\nsns.countplot(df['Source'],hue='Airline',data=df,palette='Dark2')\nplt.legend(loc='upper right')","d1748509":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Airline',y='Price',hue='Destination',data=df)\nplt.xticks(rotation=45)","c28dc93f":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Airline',y='Price',hue='Source',data=df)\nplt.xticks(rotation=45)","262e7c45":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Airline',y='Price',hue='Total_Stops',data=df)\nplt.xticks(rotation=45)","39bed1c3":"plt.figure(figsize=(15,6))\nsns.stripplot(x='Source',y='Price',hue='Destination',data=df)","3ee751d1":"plt.figure(figsize=(12,12))\nsns.scatterplot(x='Duration_mins',y='Price',hue='Total_Stops',data=df,marker='D',palette='Set1')","7a5c0dc4":"plt.figure(figsize=(12,12))\nsns.scatterplot(x='Duration_mins',y='Price',hue='Airline',data=df,marker='D',palette='Set1')","8181c9ce":"plt.figure(figsize=(8,6))\nsns.heatmap(df.corr(),annot=True,cmap='rainbow')","05689385":"#Extracting year month and day from Date column\ndf['Journey_year']=pd.to_datetime(df['Date_of_Journey']).dt.year\ndf['Journey_month']=pd.to_datetime(df['Date_of_Journey']).dt.month\ndf['Journey_day']=pd.to_datetime(df['Date_of_Journey']).dt.day","2c26ee7f":"df['Journey_year'].nunique()","d8c85795":"df.drop(['Date_of_Journey','Journey_year'],axis=1,inplace=True)","d198f3d0":"#We already have departure time and duration of flight so we dont need arrival time.\ndf.drop('Arrival_Time',axis=1,inplace=True)","3bc6a247":"#Delhi in destination column\ndf['Destination'].replace('New Delhi','Delhi',inplace=True)","796905a9":"#No info in Additional_Info column\ndf['Additional_Info'].replace('No Info','No info',inplace=True)","c907c66e":"from scipy.stats import mode","9f2b9d28":"df[df['Route'].isnull()]","f329c1c0":"#Creating pivot table to help fill nan values of Route from here\ntable = df[df['Airline']=='Air India'].pivot_table(values='Route', index='Source', columns='Destination', aggfunc=mode)\ntable","4fad09b7":"df['Route'].fillna('DEL \u2192 BOM \u2192 COK',inplace=True)","df149291":"table = df[df['Airline']=='Air India'].pivot_table(values='Total_Stops', index='Source', columns='Destination', aggfunc=mode)\ntable","5beee4e1":"df['Total_Stops'].fillna('1 stop',inplace=True)","31981837":"sns.heatmap(df.isnull())","fb807752":"#Encoding values explicitly as its order has meaning.\ndf['Total_Stops'].replace({'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':3,'4 stops':4},inplace=True)","60e34a64":"from sklearn.preprocessing import OrdinalEncoder\no=OrdinalEncoder()","b17862a4":"for i in df.columns:\n    if df[i].dtypes=='O' and i!=\"source\":\n        df[i]=o.fit_transform(df[i].values.reshape(-1,1))\n        ","68a08701":"sns.distplot(df['Duration_mins'],color='r', kde_kws={\"color\": \"k\"})\nprint(df['Duration_mins'].skew())","e7b2f87d":"df['Duration_mins']=np.log(df['Duration_mins'])","21c2cb73":"sns.distplot(df['Duration_mins'],color='g', kde_kws={\"color\": \"k\"})\nprint(df['Duration_mins'].skew())","1d6f008d":"from sklearn.preprocessing import MinMaxScaler\nm=MinMaxScaler()","bf1d8c39":"#Not scaling the source and price column\nfor i in df.columns:\n    if i=='source' or i=='Price':\n        pass\n    else:\n        df[i]=m.fit_transform(df[i].values.reshape(-1,1))","3b2f64ca":"train = df.loc[df['source']=='train']\ntest = df.loc[df['source']=='test']","a1aa7ff1":"train.drop('source',axis=1,inplace=True)\ntest.drop(['source','Price'],axis=1,inplace=True)","1c3b70b1":"train=train.reset_index(drop=True)\ntest=test.reset_index(drop=True)","3b308503":"train","cc2f07e0":"test","67bc53ae":"#Separating dependent and independent variables from Dataframe\nx=train.copy()\nx.drop('Price',axis=1,inplace=True)\ny=train['Price']","2c9170e6":"from sklearn.model_selection import train_test_split,cross_val_score","d8cba1ff":"#importing models\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression,Lasso,Ridge,ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor,AdaBoostRegressor,GradientBoostingRegressor\nfrom xgboost import XGBRegressor","b5fd681f":"from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error","e6063bca":"#Choosing the best random state using Logistic regression\ndef randomstate(a,b):\n    maxx=10000000000000\n    for state in range(1,201):\n        xtrain,xtest,ytrain,ytest=train_test_split(a,b,test_size=0.25,random_state=state)\n        model=LinearRegression()\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        mse=mean_squared_error(p,ytest)\n        if maxx>mse:\n            maxx=mse\n            j=state\n    return j","1a21e8ac":"#Creating list of models and another list mapped to their names\nmodels=[KNeighborsRegressor(),LinearRegression(),Lasso(),Ridge(),DecisionTreeRegressor(),\n       RandomForestRegressor(),AdaBoostRegressor(),GradientBoostingRegressor(),XGBRegressor()]\n\nnames=['KNeighborsRegressor','LinearRegression','Lasso','Ridge','DecisionTreeRegressor',\n       'RandomForestRegressor','AdaBoostRegressor','GradientBoostingRegressor','XGBRegressor']","19d868e1":"def createmodels(model_list,xtrain,xtest,ytrain,ytest,n):\n    name=[]\n    meanabs=[]\n    meansqd=[]\n    rootmeansqd=[]\n    r2=[]\n    mcv=[]\n    \n    #Creating models\n    for i,model in enumerate(model_list):\n        model.fit(xtrain,ytrain)\n        p=model.predict(xtest)\n        score=cross_val_score(model,x,y,scoring='r2',cv=5)\n        \n        #Calculating scores of the model and appending them to a list\n        name.append(n[i])\n        meanabs.append(np.round(mean_absolute_error(p,ytest),4))\n        meansqd.append(np.round(mean_squared_error(p,ytest),4))\n        rootmeansqd.append(np.round(np.sqrt(mean_squared_error(p,ytest)),4))\n        r2.append(np.round(r2_score(p,ytest),2))\n    \n    #Creating Dataframe\n    data=pd.DataFrame()\n    data['Model']=name\n    data['Mean Absolute Error']=meanabs\n    data['Mean Squared Error']=meansqd\n    data['Root Mean Squared Error']=rootmeansqd\n    data['R2 Score']=r2\n    data.set_index('Model',inplace = True)\n    return data        ","5f772fc7":"xtrain,xvalid,ytrain,yvalid=train_test_split(x,y,test_size=0.25,random_state=randomstate(x,y))","637b3138":"print('---------------------------------------Performance of Training Data--------------------------------------------')\ncreatemodels(models,xtrain,xtrain,ytrain,ytrain,names)","4a285034":"print('---------------------------------------Performance of Validation Data--------------------------------------------')\ncreatemodels(models,xtrain,xvalid,ytrain,yvalid,names)","68d7e0bd":"from sklearn.model_selection import GridSearchCV","c6bcef93":"param_grid={'alpha':[1e-15,1e-10,1e-8,1e-5,1e-3,0.1,1,5,10,15,20,30,35,45,50,55,65,100,110,150,1000]}\nm1=GridSearchCV(Lasso(),param_grid,scoring='neg_mean_squared_error',cv=10)\nm1.fit(x,y)\nprint(m1.best_params_)","fb0870cd":"m1=Lasso(alpha=0.1)\nm1.fit(x,y)","3d87242e":"importance = np.abs(m1.coef_)","95b4eaea":"dfcolumns = pd.DataFrame(x.columns)\ndfimp=pd.DataFrame(importance)\nfeatureScores = pd.concat([dfcolumns,dfimp],axis=1)\nfeatureScores.columns = ['Features','Coefficients']  #naming the dataframe columns\nfeatureScores","0eacb474":"featureScores.sort_values(by=['Coefficients'],ascending=False)","8474ef6c":"from sklearn.model_selection import RandomizedSearchCV ","6863dcde":"params={'n_estimators':[100,200, 300, 500],\n        'min_samples_split':[1,2,3,4],\n        'min_samples_leaf':[1,2,3,4],\n        'max_depth':[None,1,2,3,4,5,6,7,8,9,10,15]}","7aa8f4df":"g=RandomizedSearchCV(RandomForestRegressor(),params,cv=10)","42052109":"g.fit(xtrain,ytrain)","906cc859":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","7bc6a41b":"m=RandomForestRegressor(max_depth=9, min_samples_split=4, n_estimators=200)\nm.fit(xtrain,ytrain)\np=m.predict(xvalid)","4ff0261b":"score=cross_val_score(m,x,y,cv=10)","3d64cf35":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","8171b586":"params={\n     \"learning_rate\"    : [0.001,0.05, 0.10 ] ,\n     \"max_depth\"        : [ 5, 6, 8, 10, 12, 15,20,25,30],\n     \"min_child_weight\" : [ 1, 3, 5,10],\n     \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4,10],\n     \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    }","84a27d0b":"g=RandomizedSearchCV(XGBRegressor(verbosity=0),params,cv=10)","c087441f":"g.fit(xtrain,ytrain)","946fea8c":"print(g.best_estimator_)\nprint(g.best_params_)\nprint(g.best_score_)","28349a3d":"m=XGBRegressor(colsample_bytree=0.7,gamma=0.0,learning_rate=0.1,max_depth=25, min_child_weight=1)\nm.fit(xtrain,ytrain)\np=m.predict(xvalid)","4d982428":"score=cross_val_score(m,x,y,cv=10)","9e25b1f6":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","f54149d5":"model=XGBRegressor(colsample_bytree=0.7,gamma=0.0,learning_rate=0.1,max_depth=25, min_child_weight=1)\nmodel.fit(xtrain,ytrain)\np=model.predict(xvalid)\nscore=cross_val_score(m,x,y,cv=10)","194674ed":"print('Mean Absolute Error is',np.round(mean_absolute_error(p,yvalid),4))\nprint('Mean Squared Error is',np.round(mean_squared_error(p,yvalid),4))\nprint('Root Mean Squared Error is',np.round(np.sqrt(mean_squared_error(p,yvalid)),4))\nprint('R2 Score is',np.round(r2_score(p,yvalid),4)*100)\nprint('Mean of cross validaton Score is',np.round(np.mean(score)*100,4))","3e5f20f2":"plt.scatter(x=yvalid,y=p,color='r')\nplt.plot(yvalid,yvalid,color='b')\nplt.xlabel('Actual Fees')\nplt.ylabel('Predicted Fees')\nplt.title('Extreme Gradient Boosting Model')","a893b231":"import joblib\njoblib.dump(model,'Flight_price.obj')","23707c32":"predictions=model.predict(test)","dac21a2c":"predictions=pd.DataFrame(predictions,columns=['Price'])","5d4f6d31":"predictions","f961a9d9":"predictions.to_csv('test_predictions.csv')","358ca42e":"Delhi source has the highest mean price for flight while there are some outliers in baglore source where the price is greater than 50000","eb2ab488":"train dataset has 10683 rows and 11 columns","c7533d9d":"##### Encoding Categorical Variables","141ffc45":"# Hyperparameter Tuning","85cb73fd":"### Bivariate Analysis","e8c879a2":"##### Dropping unnecessary columns","3c2781d0":"Flights informing 1 or 2 long layover take plenty duration, also where airports need to be changed.","4c8bab17":"Banglore is the only source of flights where the most of the flights have no stops. Almost all the flights from chennai have no stops.","a8618255":"##### Separating the data frame into train and test","46d46dcb":"Skewness has reduced.","c8ba8de5":"Flights having destination as cochin and banglore have the longest flight duration, while hyderabad has the lowest mean flight duration.","e848eb95":"# Predicting the Test Dataset","2c6eb8fd":"Majority of flights have 1 stop while there are few flights with even 3 and 4 stops,","ba36331d":"Minimum time taken by a flight is 5 mins while highest is 2860 mins. majority of the flights take time below 250 minutes.","388cb6b9":"Test dataset has 2671 rows and 10 columns","412b2c57":"Final destination of majority of flights is Cochin. There are two values for Delhi destination which needs to be corrected,","a8f89237":"Very few airlines fly from Chennai while most airlines fly from delhi as source.","9c744f70":"# Saving the Model","c15540a8":"Majority of the flights do not provide additional info, whereas dome proved information such as In-flight meal not included, Bussiness class which colud be helpful in determining the price of the flight.","3f09089e":"Flights where the number of stops are 2 have the highest flight ticket price.","b740632d":"Multiple carrier airlines takes atleast 1 stop, while SPice jet do not take more than one stops. 3 and 4 stops are taken by very few airlines.","e6fba24a":"Importing necessary libraries","8c5d9cf8":"As the Duration time seem to increase flights take more no. of stops excluding 4 stops which seems to be an outlier.","b3cc85df":"We fill the NAN value where Airline, Source and Destination are same as for missing value.","4668cc29":"### Feature Selection using Lasso","b1bf442a":"DEL \u2192 BOM \u2192 COK and BLR \u2192 DEL seems to be the busiest route, while there are only 6 routes which is taken by more than 500 flights.","a3517c99":"Jet airways taking onne or 2 stops has the highest price while flights taking no stops seem to be taking lowest price.","edb59005":"##### Extreme Gradient Boost","d8ab39a4":"There are no identifier or constant columns","431e6758":"##### Handling Date column","a7e2adb3":"As the duration of minutes increases Flight price also increases.","4cd56322":"##### Duration","6e4839b7":"Non stops flights take less duration while their fare is also low, then as the stop increases,  duration also increases and price also increases,","c55688c0":"# Pre-processing Pipeline","c257de7d":"Flights having source as banglore and destination as delhi has the highest mean price followed by source as delhi and destination as Cochin.","e0cef6e2":"# Data Cleaning","4410085e":"##### Correcting ambiguous values in columns","9fff1271":"# Finalizing the model","d7a2b60c":"Cochin destination has the highest price followed by delhi, where some flight tickets are even greater than 70000","b516703e":"Trujet only has one destination that is Mumbai.Highest price is charged by jet airways be it bussiness or not while having its destination as Banglore. flights for mumbai are relatively cheaper be it any airlines.","7e1582a3":"### Univariate Analysis","a3a7cb2e":"##### Departure Time","6e7b09c6":"Air india flights take longest duration time while mean of Indigo flight has the lowes duration.","e82bcbc3":"Price has positive correlation with duration_mins column, while there is no multicollinearity.","63d9506c":"Flights having source from delhi and kolkata have the longest flight duration, while mumbai has the lowest mean.","9f377afb":"##### Random Forest","64f1a193":"# Evaluation Metrics","a81e499f":"Dropping year column as it is a constant","92fcd056":"Decision tree is giving very good on training set but does not perform very well on the validation set, while random forest and extreme gradient boost are performing well on both training and validation dataset. Lets further try feature selection before performing hyperparameter tuning.","341f7028":"Highest flghts have their source destination as Delhi and least is Chennai","42b4ae05":"All the flights boarding from delhi have there destination at cochin, while kolkata has banglore, cheenai has kolkata,mumbai has hyderabad and banglore has delhi.","3400fd24":"There are 2 null values","060c43f5":"Jet Airways Business have the highest price followed by jet airways, Air india and Multiple carriers.","1683d1af":"Flight price is higheer where the additional info contains Bussiness class followed by 1 long layover or 1 short\/long layover.","5146e7c5":"### Multivariate Analysis","d082919c":"Jet Airways have the highest no. of flights followed by Indigo and Air India","9e64594d":"# Modelling Phase","80ecf736":"##### Imputing Null values","2221e9a8":"##### Removing Skewness from Duration Mins column","f5f0435f":"#### Conclusion","8b85bae8":"Mean absolute error of Random forest is less but Mean squared error and R2 score of Extreme gradient Boost is better. Even XGBClassifier perform better in cross validation score, hence we choose it as our final model.","85494f19":"Lasso isn't reducing coefficients of any feature to zero so we will keep all the features","0f0a35bb":"##### Scaling the DataFrame","afaa350d":"All the features of the dataframe is of object type except for the price column","9139b1ad":"Dataframe has 13354 rows and 12 columns","5439739a":"# EDA","1436eadb":"We fill the NAN value where Airline, Source and Destination are same as for missing value.","d1ae0a76":"Multiple only fly to Cochin as destination, Indigo and air india are the only airlines which have all the places as Destination.","d058fb6a":"There is nothing unsusal where price is zero.","5a42c089":"The minimum price if a flight is 0 which is out of the box. Most of the price for flights lie in the range 3000 to 18000, while the highest price if 79512.","2c8a2873":"# **Please Upvote if you like my work. Your feedback will mean alot. Thank You!!!**","29eca79d":"![](https:\/\/cdn.zoomg.ir\/2014\/12\/msfsx.jpg?w=1600)","31161158":"Jet airways bussiness have the highest price even though its duration is less. while Multiple Carriers premium economy and jet airways charges less even when duration is much more ","db379589":"Trujet only has one destination that is hyderabad.Highest price is charged by jet airways be it bussiness or not while having its destination as Delhi. Flights boarded from kolkata usually have less price be it any airlines."}}