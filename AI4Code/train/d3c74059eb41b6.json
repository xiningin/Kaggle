{"cell_type":{"7f2c4064":"code","f43058b7":"code","557925f0":"code","2766f21c":"code","fb85d61a":"code","c7caa2e0":"code","6056c171":"code","c345054c":"code","c370d573":"code","6fc10907":"code","868e2b71":"code","0582bfc3":"code","ecf93cca":"code","05b1eac2":"code","3e74b950":"code","6da82603":"code","10776a05":"code","028ffa6a":"code","b1ed0997":"code","10cefc05":"code","57259dcc":"code","c60e9ef4":"code","86ef51d6":"code","3ada4b4d":"code","25b9bb0b":"markdown","c2fb7680":"markdown","10c10be5":"markdown","0a7385b4":"markdown","60fc9336":"markdown","43d07694":"markdown","bd03e9b7":"markdown","f2124d44":"markdown","b253e0b0":"markdown","202203f6":"markdown","48a8a804":"markdown","3f8cc7bc":"markdown","3f700394":"markdown","b41f9480":"markdown","8dbc1bad":"markdown","e65bc6de":"markdown"},"source":{"7f2c4064":"import os\nimport numpy as np\nimport pandas as pd\nimport requests\nfrom io import StringIO\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler","f43058b7":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","557925f0":"tickers = {\n    \"ABAD1\":\"59612098290740355\",\n    \"ABDI1\":\"49054891736433700\",\n    \"ALBZ1\":\"57944184894703821\",\n    \"ALIR1\":\"65004959184388996\",\n    \"ALVN1\":\"32678431934327184\",\n    \"AMIN1\":\"50100062518826135\",\n    \"AMLH1\":\"16959429956899455\",\n    \"APPE1\":\"55254206302462116\",\n    \"APOZ1\":\"55127657985997520\", \n    \"ARDK1\":\"4614779520007780\",\n    \"ASAL1\":\"63363116407864462\",\n    \"ASIA1\":\"51106317433079213\",\n    \"ATIR1\":\"7483280423474368\",\n    \"AYEG1\":\"15039949673085566\",\n    \"AZAB1\":\"38547060135156069\",\n    \"AZIN1\":\"42075223783409640\",\n    \"AZIX1\":\"22129017544200\",\n    \"BAHN1\":\"66772024744156373\",\n    \"BALB1\":\"70270965300262393\",\n    \"BALI1\":\"28328710198554144\",\n    \"BAMA1\":\"4942127026063388\",\n    \"BANK1\":\"48010225447410247\",\n    \"BARZ1\":\"23214828924506640\",\n    \"BDAN1\":\"48511238766369097\",\n    \"BENN1\":\"17059960254855208\",\n    \"BFJR1\":\"46178280540110577\",\n    \"BHMN1\":\"26824673819862694\",\n    \"BIME1\":\"11773403764702778\",\n    \"BIMX1\":\"59735609117437896\",\n    \"BKHZ1\":\"47333458678352378\",\n    \"BMEL1\":\"13611044044646901\",\n    \"BMLT1\":\"778253364357513#\",\n    \"BMPS1\":\"61102694810476197\",\n    \"BOTA1\":\"30650426998863332\",\n    \"BPAR1\":\"33293588228706998\",\n    \"BPAS1\":\"9536587154100457#\",\n    \"BPST1\":\"22087269603540841\",\n    \"BRKT1\":\"34557241988629814\",\n    \"BROJ1\":\"60061422939859083\",\n    \"BSDR1\":\"28320293733348826\",\n    \"BSTE1\":\"17800036702302776\",\n    \"BTEJ1\":\"63917421733088077\",\n    \"BVMA1\":\"29860265627578401\",\n    \"CHAR1\":\"33783140337377394\",\n    \"CHCH1\":\"44850033148208596\",\n    \"CHDN1\":\"12329519546621752\",\n    \"CHML1\":\"18027801615184692\",\n    \"CIDC1\":\"37281199178613855\",\n    \"COMB1\":\"30719054967088301\",\n    \"DABO1\":\"61332057061846617\",\n    \"DADE1\":\"65999092673039059\",\n    \"DALZ1\":\"60451823714332895\",\n    \"DAML1\":\"66450490505950110\",\n    \"DARO1\":\"7183333492448248#\",\n    \"DDPK1\":\"33603212156438463\",\n    \"DFRB1\":\"56550776668133562\",\n    \"DJBR1\":\"33406621820337161\",\n    \"DKSR1\":\"23353689102956991\",\n    \"DLGM1\":\"29247915161590165\",\n    \"DMOR1\":\"2434703913394836#\",\n    \"DMVN1\":\"3623921205367364#\",\n    \"DODE1\":\"40611478183231802\",\n    \"DOSE1\":\"12387472624849835\",\n    \"DPAK1\":\"67988012428906654\",\n    \"DRKH1\":\"24079409192818584\",\n    \"DRZK1\":\"22255783119783047\",\n    \"DSBH1\":\"5866848234665627#\",\n    \"DSIN1\":\"11432067920374603\",\n    \"DSOB1\":\"43622578471330344\",\n    \"DTIP1\":\"29758477602878557\",\n    \"DZAH1\":\"8915450910866216#\",\n    \"EPRS1\":\"41048299027409941\",\n    \"EXIR1\":\"4384288570322406#\",\n    \"FAIR1\":\"40808043719554948\",\n    \"FAIX1\":\"53249498382937694\",\n    \"FAJR1\":\"41302553376174581\",\n    \"FKAS1\":\"4733285133017464#\",\n    \"FKHZ1\":\"28864540805361867\",\n    \"FNAR1\":\"32821908911812078\",\n    \"FOLD1\":\"46348559193224090\",\n    \"FRIS1\":\"54419429862704331\",\n    \"FRVR1\":\"408934423224097#\",\n    \"FTIR1\":\"18303237082155264\",\n    \"GBEH1\":\"46982154647719707\",\n    \"GBJN1\":\"71523986304961239\",\n    \"GCOZ1\":\"22299894048845903\",\n    \"GDIR1\":\"26014913469567886\",\n    \"GESF1\":\"40411537531154482\",\n    \"GGAZ1\":\"15259343650667588\",\n    \"GHAT1\":\"70289374539527245\",\n    \"GHEG1\":\"14398278072324784\",\n    \"GHND1\":\"37631109616997982\",\n    \"GLOR1\":\"56820995669577571\",\n    \"GMEL1\":\"41796741644273824\",\n    \"GMRO1\":\"43342306308122676\",\n    \"GNBO1\":\"63380098535169030\",\n    \"GOLG1\":\"35700344742885862\",\n    \"GORJ1\":\"31024260997481994\",\n    \"GORX1\":\"53482856220074779\",\n    \"GOST1\":\"48990026850202503\",\n    \"GPSH1\":\"67030488744129337\",\n    \"HFRS1\":\"35424116338766901\",\n    \"HJPT1\":\"16369313804633525\",\n    \"HMRZ1\":\"68635710163497089\",\n    \"HSHM1\":\"28809886765682162\",\n    \"HTOK1\":\"22260326095996531\",\n    \"HWEB1\":\"43362635835198978\",\n    \"IAGM1\":\"23838634016123354\",\n    \"IDOC1\":\"47841327496247362\",\n    \"IKCO1\":\"65883838195688438\",\n    \"IKHR1\":\"7395271748414592#\",\n    \"INFO1\":\"40505767672724777\",\n    \"IPAR1\":\"9481703061634967#\",\n    \"IPTR1\":\"69143674941561637\",\n    \"IRDR1\":\"69090868458637360\",\n    \"JAMD1\":\"30765727085936322\",\n    \"JHRM1\":\"33629260529503413\",\n    \"JOSH1\":\"70219663893822560\",\n    \"JPPC1\":\"27096851668435724\",\n    \"KALA1\":\"44549439964296944\",\n    \"KALZ1\":\"62952165421099192\",\n    \"KCHI1\":\"16405556680571453\",\n    \"KDPS1\":\"2254054929817435#\",\n    \"KFAN1\":\"28033133021443774\",\n    \"KGND1\":\"22382156782768756\",\n    \"KHOC1\":\"41974758296041288\",\n    \"KHSH1\":\"63915926161403347\",\n    \"KIMI1\":\"20024911381434086\",\n    \"KLBR1\":\"24303422207378456\",\n    \"KNRZ1\":\"20411759370751096\",\n    \"KRAF1\":\"47996917271187218\",\n    \"KRIR1\":\"59217041815333317\",\n    \"KRSN1\":\"43552974795606067\",\n    \"KRTI1\":\"53113471126689455\",\n    \"KSIM1\":\"66701874099226162\",\n    \"KSKA1\":\"24254843881948059\",\n    \"KVEH1\":\"60350996279289099\",\n    \"KVEX1\":\"59525964192678026\",\n    \"KVRZ1\":\"7235435095059069#\",\n    \"LAMI1\":\"25286509736208688\",\n    \"LAPS1\":\"69454539056549106\",\n    \"LEAB1\":\"39116664428676213\",\n    \"LENT1\":\"14957056743925737\",\n    \"LIRZ1\":\"3149396562827132#\",\n    \"LKGH1\":\"23086515493897579\",\n    \"LMIR1\":\"48623320733330408\",\n    \"LPAK1\":\"34032872653290886\",\n    \"LSMD1\":\"71744682148776880\",\n    \"LTOS1\":\"59142194115401696\",\n    \"LTOX1\":\"43455612336353491\",\n    \"LZIN1\":\"20946530370469828\",\n    \"MADN1\":\"58931793851445922\",\n    \"MAGS1\":\"5054819322815158#\",\n    \"MAPN1\":\"67126881188552864\",\n    \"MARK1\":\"20865316761157979\",\n    \"MESI1\":\"31879190587976736\",\n    \"MHKM1\":\"17330546482145553\",\n    \"MNGZ1\":\"50341528161302545\",\n    \"MNMH1\":\"15826229869421585\",\n    \"MNSR1\":\"17834623106317041\",\n    \"MOBN1\":\"27922860956133067\",\n    \"MOTJ1\":\"22086876724551482\",\n    \"MRAM1\":\"6131290133202745#\",\n    \"MRGN1\":\"52975109254504632\",\n    \"MRIN1\":\"30231789123900526\",\n    \"MSKN1\":\"3863538898378476#\",\n    \"MSMI1\":\"35425587644337450\",\n    \"MSTI1\":\"57273529732791251\",\n    \"NAFT1\":\"33931218652865616\",\n    \"NALM1\":\"57875847776839336\",\n    \"NASI1\":\"23837844039713715\",\n    \"NBEH1\":\"22667016906590506\",\n    \"NGFO1\":\"56324206651661881\",\n    \"NIKI1\":\"25336820825905643\",\n    \"NIRO1\":\"20453828618330936\",\n    \"NKOL1\":\"62177651435283872\",\n    \"NMOH1\":\"39436183727126211\",\n    \"NOVN1\":\"47302318535715632\",\n    \"NPRS1\":\"14073782708315535\",\n    \"NSAZ1\":\"49353447565507376\",\n    \"NSTH1\":\"32845891587040106\",\n    \"OFOG1\":\"49502666250908008\",\n    \"OFRS1\":\"30852391633490755\",\n    \"OFST1\":\"23936607891892333\",\n    \"OIMC1\":\"52232388263291380\",\n    \"OMID1\":\"18599703143458101\",\n    \"PABX1\":\"65472108074101196\",\n    \"PAKS1\":\"11622051128546106\",\n    \"PARK1\":\"7711282667602555#\",\n    \"PARS1\":\"6110133418282108#\",\n    \"PASH1\":\"62786156501584862\",\n    \"PASN1\":\"23441366113375722\",\n    \"PDRO1\":\"70474983732269112\",\n    \"PELC1\":\"5187018329202415#\",\n    \"PETR1\":\"59486059679335017\",\n    \"PFAN1\":\"65122215875355555\",\n    \"PIAZ1\":\"35158826900216508\",\n    \"PIRN1\":\"43062880954780884\",\n    \"PJMZ1\":\"32357363984168442\",\n    \"PKER1\":\"38437201078089290\",\n    \"PKHA1\":\"70934270174405743\",\n    \"PKLJ1\":\"25244329144808274\",\n    \"PKOD1\":\"42354736493447489\",\n    \"PLKK1\":\"57722642338781674\",\n    \"PMSZ1\":\"6043384171800349#\",\n    \"PNBA1\":\"35366681030756042\",\n    \"PNES1\":\"7745894403636165#\",\n    \"PNTB1\":\"48753732042176709\",\n    \"PRDZ1\":\"20562694899904339\",\n    \"PRKT1\":\"59607545337891226\",\n    \"PSER1\":\"20560887114747719\",\n    \"PSHZ1\":\"38568786927478796\",\n    \"PSIR1\":\"57639364758870873\",\n    \"PTAP1\":\"22560050433388046\",\n    \"PTEH1\":\"51617145873056483\",\n    \"RENA1\":\"7385624172574740#\",\n    \"RIIR1\":\"12752224677923341\",\n    \"RIIX1\":\"12041217376571987\",\n    \"RINM1\":\"45895339414786358\",\n    \"RKSH1\":\"27952969918967492\",\n    \"ROOI1\":\"22787503301679573\",\n    \"ROZD1\":\"40262275031537922\",\n    \"RSAP1\":\"45174198424472334\",\n    \"RTIR1\":\"22903901709044823\",\n    \"SADB1\":\"34890845654517313\",\n    \"SADR1\":\"23293437377896568\",\n    \"SAHD1\":\"63481599728522324\",\n    \"SAKH1\":\"25514780181345713\",\n    \"SAMA1\":\"34673681828119297\",\n    \"SAND1\":\"37204371816016200\",\n    \"SBAH1\":\"18063426072758458\",\n    \"SBEH1\":\"42387718866026650\",\n    \"SBHN1\":\"32525655729432562\",\n    \"SBOJ1\":\"66295665969375744\",\n    \"SDAB1\":\"4563413583000719#\",\n    \"SDOR1\":\"27218386411183410\",\n    \"SDST1\":\"27000326841257664\",\n    \"SEPA1\":\"8977441217024425#\",\n    \"SEPK1\":\"71856634742001725\",\n    \"SEPP1\":\"49188729526980541\",\n    \"SFKZ1\":\"15521712617204216\",\n    \"SFNO1\":\"4528607775462304#\",\n    \"SFRS1\":\"41227201752535311\",\n    \"SGAZ1\":\"62346804681275278\",\n    \"SGEN1\":\"60654872678917533\",\n    \"SGOS1\":\"66456062140680461\",\n    \"SGRB1\":\"52220424531578944\",\n    \"SHAD1\":\"20487994977117557\",\n    \"SHFA1\":\"36899214178084525\",\n    \"SHFS1\":\"43781018754867729\",\n    \"SHGN1\":\"41284516796232939\",\n    \"SHKR1\":\"35964395659427029\",\n    \"SHMD1\":\"67206358287598044\",\n    \"SHND1\":\"10120557300120078\",\n    \"SHOY1\":\"3493306453706327#\",\n    \"SHPZ1\":\"59921975187856916\",\n    \"SHSI1\":\"30974710508383145\",\n    \"SHZG1\":\"29747059672582491\",\n    \"SIMS1\":\"6757220448540984#\",\n    \"SIMX1\":\"23458117616920867\",\n    \"SINA1\":\"25001509088465005\",\n    \"SKAZ1\":\"67327029014085707\",\n    \"SKBV1\":\"11258722998911897\",\n    \"SKER1\":\"15472396110662150\",\n    \"SKHS1\":\"4470657233334072#\",\n    \"SKOR1\":\"65321970913593427\",\n    \"SLMN1\":\"28672095850798501\",\n    \"SMAZ1\":\"33808206014018431\",\n    \"SMRG1\":\"28450080638096732\",\n    \"SNMA1\":\"57309221039930244\",\n    \"SNRO1\":\"62603302940123327\",\n    \"SORB1\":\"54277068923045214\",\n    \"SPAH1\":\"2328862017676109#\",\n    \"SPKH1\":\"31791737198597563\",\n    \"SPPE1\":\"61506294208022391\",\n    \"SPTA1\":\"68488673556087148\",\n    \"SROD1\":\"11964419322927535\",\n    \"SSAP1\":\"37614886280396031\",\n    \"SSHR1\":\"26997316501080743\",\n    \"SSIN1\":\"35796086458096255\",\n    \"SSNR1\":\"14231831499205396\",\n    \"SSOF1\":\"13227300125161435\",\n    \"STEH1\":\"30829203706095076\",\n    \"SURO1\":\"15949743338644220\",\n    \"SWIC1\":\"47377315952751604\",\n    \"SYSM1\":\"47749661205825616\",\n    \"SZPO1\":\"4758266259250794#\",\n    \"TAIR1\":\"41935584690956944\",\n    \"TAMI1\":\"67690708346979840\",\n    \"TAYD1\":\"3722699128879020#\",\n    \"TAZB1\":\"1358190916156744#\",\n    \"TBAS1\":\"8977369674477111#\",\n    \"TGOS1\":\"68117765376081366\",\n    \"TKIN1\":\"3823243780502959#\",\n    \"TKNO1\":\"3654864906585643#\",\n    \"TKSM1\":\"24085906177899789\",\n    \"TMEL1\":\"17528249960294496\",\n    \"TMKH1\":\"7457232989848872#\",\n    \"TMVD1\":\"34641719089573667\",\n    \"TNOV1\":\"25357135030606405\",\n    \"TOKA1\":\"47232550823972469\",\n    \"TOSA1\":\"2944500421562364#\",\n    \"TRIR1\":\"19298748452450329\",\n    \"TRIX1\":\"69858202392669780\",\n    \"TRNS1\":\"46752599569017089\",\n    \"TSBE1\":\"13937270451301973\",\n    \"TSHE1\":\"54676885047867737\",\n    \"TSRZ1\":\"57086055330734195\",\n    \"VLMT1\":\"11403770140000603\",\n    \"VSIN1\":\"45050389997905274\",\n    \"YASA1\":\"63580313877463104\",\n    \"YASX1\":\"32338211917133256\",\n    \"ZMYD1\":\"2589887561569709#\",\n    \"ZPRS1\":\"33420285433308219\"\n    }","2766f21c":"def stock(ticker=\"\"):\n    urlid = tickers[ticker]\n    url = 'http:\/\/www.tsetmc.com\/tsev2\/data\/Export-txt.aspx?t=i&a=1&b=0&i=' + urlid\n    headers = {\"User-Agent\": \"Mozilla\/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko\/20100101 Firefox\/66.0\"}\n    \n    req = requests.get(url, headers=headers)\n    data = StringIO(req.text)\n    df = pd.read_csv(data, index_col=1, parse_dates=True)\n    \n    df=df.loc[::-1].reset_index(drop=True)\n    df.index.name = 'Date'\n    \n    return (df)","fb85d61a":"for ticker in tickers:\n    globals()['Stock_%s' % ticker] = stock(ticker)\n    globals()['Stock_%s' % ticker].to_csv('Stock_%s' % ticker+'.csv')","c7caa2e0":"Stock_ZPRS1 = pd.read_csv('\/kaggle\/input\/Stock_ZPRS1.csv')\nplt.plot(Stock_ZPRS1['<CLOSE>'] ,label='ZPRS1')\nplt.title(\"Ticker Close Prices\")\nplt.legend()\nplt.show()","6056c171":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","c345054c":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","c370d573":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","6fc10907":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Stock_ABAD1.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/Stock_ABAD1.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'Stock_ABAD1.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","868e2b71":"df1.head(5)","0582bfc3":"plotPerColumnDistribution(df1, 10, 5)","ecf93cca":"plotCorrelationMatrix(df1, 8)","05b1eac2":"plotScatterMatrix(df1, 20, 10)","3e74b950":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Stock_ABDI1.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/Stock_ABDI1.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'Stock_ABDI1.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","6da82603":"df2.head(5)","10776a05":"plotPerColumnDistribution(df2, 10, 5)","028ffa6a":"plotCorrelationMatrix(df2, 8)","b1ed0997":"plotScatterMatrix(df2, 20, 10)","10cefc05":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# Stock_ALBZ1.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/Stock_ALBZ1.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'Stock_ALBZ1.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","57259dcc":"df3.head(5)","c60e9ef4":"plotPerColumnDistribution(df3, 10, 5)","86ef51d6":"plotCorrelationMatrix(df3, 8)","3ada4b4d":"plotScatterMatrix(df3, 20, 10)","25b9bb0b":"There are 314 csv files in the current version of the dataset:\n","c2fb7680":"### Let's check 3rd file.","10c10be5":"Scatter and density plots:","0a7385b4":"Scatter and density plots:","60fc9336":"Let's take a quick look at what the data looks like:","43d07694":"Let's take a quick look at what the data looks like:","bd03e9b7":"Distribution graphs (histogram\/bar graph) of sampled columns:","f2124d44":"Let's take a quick look at what the data looks like:","b253e0b0":"Correlation matrix:","202203f6":"Distribution graphs (histogram\/bar graph) of sampled columns:","48a8a804":"Correlation matrix:","3f8cc7bc":"### Let's check 2nd file.","3f700394":"Scatter and density plots:","b41f9480":"### Let's check 1st file.","8dbc1bad":"Correlation matrix:","e65bc6de":"Distribution graphs (histogram\/bar graph) of sampled columns:"}}