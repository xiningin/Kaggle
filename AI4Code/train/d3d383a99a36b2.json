{"cell_type":{"e1099beb":"code","78a69066":"code","86d8bf0f":"code","fa634eb2":"code","10941ce1":"code","49bcd02e":"code","a934455c":"code","b60b00b0":"code","04716575":"code","3b5b19e1":"code","7fc46482":"code","7c2d8cb0":"code","faecdc56":"code","8be8dbc0":"code","0d68eab1":"markdown","074ca666":"markdown","8b0e20f6":"markdown"},"source":{"e1099beb":"!pip install -Uqq fastai","78a69066":"from fastai.tabular.all import *\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score","86d8bf0f":"path = '..\/input\/iris\/Iris.csv'\ndata0 = pd.read_csv(path)","fa634eb2":"Name0=data0['Species'].unique()\nName=sorted(Name0)\nprint(Name)\n\nM=list(range(len(Name)))    \nnormal_mapping=dict(zip(Name,M)) \nreverse_mapping=dict(zip(M,Name)) ","10941ce1":"n=len(data0)\nN=list(range(n))\nrandom.seed(2021)\nrandom.shuffle(N)","49bcd02e":"df_train=data0.iloc[N[0:(n\/\/10)*8]]\ndf_test=data0.iloc[N[(n\/\/10)*8:]]","a934455c":"df_train.head()","b60b00b0":"config = tabular_config(embed_p=0.2)\nconfig","04716575":"idx = list(range(len(df_train)))","3b5b19e1":"cont_names = list(df_train.drop(['Id','Species'], axis=1).columns)","7fc46482":"kf = KFold(n_splits=12, shuffle=True)\npreds_fold = []\n\nfor fold, (train_index, valid_index) in enumerate(kf.split(idx)):\n    print(f'Fold {fold}')\n    \n    to = TabularPandas(df_train, procs=[Categorify,FillMissing,Normalize],\n                       y_block = CategoryBlock(),\n                       cont_names = cont_names,\n                       y_names='Species',\n                       splits=(list(train_index), list(valid_index)))\n    \n    dls = to.dataloaders(bs=16)\n    \n    learn = tabular_learner(dls, metrics=accuracy, config=config, layers = [100,50])\n    learn.fit_one_cycle(15, lr_max=2e-3, cbs=[EarlyStoppingCallback(monitor='accuracy', patience=5), \n                                              ReduceLROnPlateau(monitor='valid_loss', patience=5), \n                                              SaveModelCallback(monitor='accuracy')])\n    \n    dl = learn.dls.test_dl(df_test)\n    preds = learn.get_preds(dl=dl)\n    results = preds[0].argmax(axis=1)\n    results = results.tolist()\n    preds_fold.append(results)","7c2d8cb0":"preds_fold = np.array(preds_fold)\nfinal_preds = preds_fold[-1]\nprint(final_preds)","faecdc56":"ans=np.array(df_test['Species'].map(normal_mapping))\nprint(ans)","8be8dbc0":"print(classification_report(ans,final_preds))","0d68eab1":"### use tabularpandas, predict by fastai (this notebook)\nhttps:\/\/www.kaggle.com\/stpeteishii\/iris-fastai-with-tabularpandas\n\n### use tabularpandas, predict not by fastai\nhttps:\/\/www.kaggle.com\/stpeteishii\/iris-classify-with-fastai-tabularpandas\n\n### not use tabularpandas, predict by fastai\nhttps:\/\/www.kaggle.com\/stpeteishii\/iris-fastai","074ca666":"# Iris fastai with TabularPandas\nThis notebook referred to the following notebook.<br\/>\nhttps:\/\/www.kaggle.com\/dienhoa\/tabular-playgroud-fastai","8b0e20f6":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)"}}