{"cell_type":{"a5684d62":"code","ba76f42e":"code","82e2fbc4":"code","fed24d3e":"code","1e1d6233":"code","e6ec5507":"code","e69db8c0":"code","a3c12e53":"code","1ecbead3":"code","ed803cef":"code","75074a21":"code","1e02e37d":"code","84a38108":"code","8faddc72":"code","34133499":"code","b2c9d419":"code","eac07484":"code","a51de6f5":"code","3bba7e4f":"code","26d52d1b":"code","4378cc89":"code","240c604a":"code","f03d09c5":"markdown","8a9779bc":"markdown","e0f446e4":"markdown","1414044d":"markdown","abbd85b3":"markdown"},"source":{"a5684d62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ba76f42e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Dense, MaxPool2D, Flatten, Dropout\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","82e2fbc4":"#Splitting data into train and test.","fed24d3e":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","1e1d6233":"train.head()","e6ec5507":"y_train = train[\"label\"]\nx_train = train.drop([\"label\"], axis = 1)\ny_train.value_counts()","e69db8c0":"sns.countplot(train[\"label\"], palette = \"Greens\")","a3c12e53":"x_train.isnull().sum()","1ecbead3":"y_train.isnull().sum()","ed803cef":"test.isnull().sum()","75074a21":"x_train = x_train\/255.0\ntest = test\/255.0\nrandom_seed = 2","1e02e37d":"x_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","84a38108":"y_train = to_categorical(y_train, num_classes = 10)","8faddc72":"g = plt.imshow(x_train[0][:,:,0])","34133499":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"Same\", activation = \"relu\", input_shape = (28,28,1) ))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"Same\", activation = \"relu\"))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"Same\", activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = ((2,2))))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"Same\", activation = \"relu\"))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), padding = \"Same\", activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","b2c9d419":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","eac07484":"x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.1,\n                                                  random_state=random_seed)","a51de6f5":"epochs = 30\nbatch_size = 86\nmodel.compile(optimizer = optimizer , \n              loss = \"categorical_crossentropy\", \n              metrics=[\"accuracy\"])\nlearning_rate_reduction = ReduceLROnPlateau(\n    monitor = \"val_acc\", patience = 3, verbose = 1, \n    factor = 0.5, min_lr = 0.00001)","3bba7e4f":"history = model.fit(x_train, y_train, batch_size = batch_size, epochs = epochs,  validation_data = (x_val, y_val), verbose = 2)","26d52d1b":"y_pred = model.predict(x_val)\ny_pred_classes = np.argmax(y_pred,axis = 1) \ny_true = np.argmax(y_val,axis = 1) ","4378cc89":"confusion_mtx = confusion_matrix(y_true, y_pred_classes) \nresults = model.predict(test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")","240c604a":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"Digit_recognition_submission.csv\",index=False)","f03d09c5":"Import packages ","8a9779bc":"Splitting data for model building.","e0f446e4":"Predicting results for the model.","1414044d":"Coverting categorical data into numeric data.","abbd85b3":"Defining model and its layers"}}