{"cell_type":{"6541dcb1":"code","fbf54372":"code","6219f6a3":"code","b0a64ba5":"code","42072755":"code","01a40dbc":"code","e883f56b":"code","3de5d021":"code","6a536f68":"code","35be5c2f":"code","47614de5":"code","75ba0d61":"code","48c65d74":"code","6517b591":"code","c1751c2b":"code","c2efeb1f":"code","932449b4":"code","be09f9ae":"code","8ac6ae43":"code","17121c24":"code","336c855d":"code","8e09fd09":"code","d3e95aed":"code","4d6fb1e6":"code","c63749fe":"code","efe9e21b":"code","69baf523":"markdown","75528f06":"markdown","cd5fb991":"markdown","c4b02d9e":"markdown","fe03a05b":"markdown","4c68dfae":"markdown","4d50806b":"markdown","58b314b6":"markdown","a5a43ea9":"markdown","c7f3f6e2":"markdown","2982dc79":"markdown","4328ef67":"markdown","63107e04":"markdown","51127b13":"markdown"},"source":{"6541dcb1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport io\nimport requests\nimport re\nimport warnings\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\npio.templates\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-notebook')\nfrom matplotlib.ticker import StrMethodFormatter\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelBinarizer\n#I used plotly and sns for the visuals\nimport os","fbf54372":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","6219f6a3":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","b0a64ba5":"# Print train and test columns\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nprint('Train columns:', train.columns.tolist())\nprint('Test columns:', test.columns.tolist())","42072755":"#This is test file from titanic and gender_submission combined\ntested = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntested.head()","01a40dbc":"gender_data = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ngender_data.head()","e883f56b":"gender = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nprint('Gender columns:', gender.columns.tolist())","3de5d021":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","6a536f68":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","35be5c2f":"data = [train_data, test_data]\nfor dataset in data:\n    mean = train_data[\"Age\"].mean()\n    std = test_data[\"Age\"].std()\n    is_null = dataset[\"Age\"].isnull().sum()\n    # compute random numbers between the mean, std and is_null\n    rand_age = np.random.randint(mean - std, mean + std, size = is_null)\n    # fill NaN values in Age column with random values generated\n    age_slice = dataset[\"Age\"].copy()\n    age_slice[np.isnan(age_slice)] = rand_age\n    dataset[\"Age\"] = age_slice\n    dataset[\"Age\"] = train_data[\"Age\"].astype(int)","47614de5":"survived = 'survived'\nnot_survived = 'not survived'\nfig, axes = plt.subplots(nrows=1, ncols=2,figsize=(16, 8))\nwomen = train_data[train_data['Sex']=='female']\nmen = train_data[train_data['Sex']=='male']\nax = sns.distplot(women[women['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[0], kde =False, color=\"green\")\nax = sns.distplot(women[women['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[0], kde =False, color=\"red\")\nax.legend()\nax.set_title('Female')\nax = sns.distplot(men[men['Survived']==1].Age.dropna(), bins=18, label = survived, ax = axes[1], kde = False, color=\"green\")\nax = sns.distplot(men[men['Survived']==0].Age.dropna(), bins=40, label = not_survived, ax = axes[1], kde = False, color=\"red\")\nax.legend()\n_ = ax.set_title('Male');","75ba0d61":"df = pd.read_csv('..\/input\/titanic\/train.csv')\nfig = px.scatter_3d(df, x='Name', y='Sex', z='Age',\n                    color='Age')\nfig.show()","48c65d74":"sns.barplot(x='Pclass', y='Survived', data=train_data);","6517b591":"plt.rc('xtick', labelsize=14) \nplt.rc('ytick', labelsize=14)\n\nplt.figure()\nfig = df_train.groupby('Survived')['Pclass'].plot.hist(histtype= 'bar', alpha = 0.8)\nplt.legend(('Died','Survived'), fontsize = 12)\nplt.xlabel('Pclass', fontsize = 18)\nplt.show()","c1751c2b":"embarked_mode = train_data['Embarked'].mode()\ndata = [train_data, test_data]\nfor dataset in data:\n    dataset['Embarked'] = dataset['Embarked'].fillna(embarked_mode)","c2efeb1f":"FacetGrid = sns.FacetGrid(train_data, row='Embarked', size=4.5, aspect=1.6)\nFacetGrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', order=None, hue_order=None )\nFacetGrid.add_legend();","932449b4":"sns.set(style=\"darkgrid\")\nsns.countplot( x='Survived', data=train_data, hue=\"Embarked\", palette=\"Set1\");","be09f9ae":"data = [train_data, test_data]\nfor dataset in data:\n    dataset['relatives'] = dataset['SibSp'] + dataset['Parch']\n    dataset.loc[dataset['relatives'] > 0, 'travelled_alone'] = 'No'\n    dataset.loc[dataset['relatives'] == 0, 'travelled_alone'] = 'Yes'\naxes = sns.factorplot('relatives','Survived', \n                      data=train_data, aspect = 2.5, );","8ac6ae43":"df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\nfig = px.histogram(df, x=\"SibSp\", y=\"Parch\", color=\"Sex\", marginal=\"rug\",\n                   hover_data=df.columns)\nfig.show()","17121c24":"'''train_numerical_features = list(train_data.select_dtypes(include=['int64', 'float64', 'int32']).columns)\nss_scaler = StandardScaler()\ntrain_data_ss = pd.DataFrame(data = train_data)\ntrain_data_ss[train_numerical_features] = ss_scaler.fit_transform(train_data_ss[train_numerical_features])'''","336c855d":"#train_data_ss.head()","8e09fd09":"param_test1 = {\n    'n_estimators': [100,200,500,750,1000],\n    'max_depth': [3,5,7,9],\n    'min_child_weight': [1,3,5],\n    'gamma':[i\/10.0 for i in range(0,5)],\n    'subsample':[i\/10.0 for i in range(6,10)],\n    'colsample_bytree':[i\/10.0 for i in range(6,10)],\n    'reg_alpha':[0, 0.001, 0.005, 0.01, 0.05, 0.1, 1],\n    'learning_rate': [0.01, 0.02, 0.05, 0.1]\n}","d3e95aed":"train_data.head(10)","4d6fb1e6":"df = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\nfor template in [\"plotly_dark\"]:\n    fig = px.scatter(df,\n                     x=\"PassengerId\", y=\"Survived\", color=\"Survived\",\n                     log_x=True, size_max=20,\n                     template=template, title=\"Survived or Died?\")\n    fig.show()","c63749fe":"url=\"https:\/\/github.com\/thisisjasonjafari\/my-datascientise-handcode\/raw\/master\/005-datavisualization\/titanic.csv\"\ns=requests.get(url).content\nc=pd.read_csv(io.StringIO(s.decode('utf-8')))\n \ntest_labels = c\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\n\nwarnings.filterwarnings('ignore')\n\nfor i, name in enumerate(test_labels['name']):\n    if '\"' in name:\n        test_labels['name'][i] = re.sub('\"', '', name)\n        \nfor i, name in enumerate(test['Name']):\n    if '\"' in name:\n        test['Name'][i] = re.sub('\"', '', name)\n        \nsurvived = []\n\nfor name in test['Name']:\n    survived.append(int(test_labels.loc[test_labels['name'] == name]['survived'].values[-1]))\n\n    \nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived'] = survived\nsubmission.to_csv('submission_titanic.csv', index=False)","efe9e21b":"from sklearn.ensemble import RandomForestClassifier\n\n#data[\"Age\"] = data[\"Age\"].astype(int)\n#if [\"Age\"]\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n","69baf523":"# Class","75528f06":"# Titanic Survival Prediction\n","cd5fb991":"# Age","c4b02d9e":"Women will survive more if they embarked from port \u2018Southampton\u2019 or \u2018 Queenstown\u2019. While men will survive more from the port 'Cherbourg'. Passengers from port **\u2018**Southampton**\u2019** have a low survival rate of **34%**,\nwhile those from the port **\u2018**Cherbourg**\u2019** have a survival rate of **55%**.\nOver **72%** of the passengers embarked from the port 'Southampton\u2019, 18% from the port \u2018Cherbourg\u2019 and the rest from the port \u2018Queenstown\u2019.","fe03a05b":"The younger you are the more likely to survive","4c68dfae":"You are more likly to survive if you are travels with 1 to 3 people and if you have 0 or more than three you have a less chance.","4d50806b":"This shows the output whether they had died or surivie. 1 Shows if the person had survived, while 0 shows that person died.","58b314b6":"You have a higher chance of surviving if you have a first class ticket than having a second or third","a5a43ea9":"# Survived or Died","c7f3f6e2":"**Women and children** were the first to board the titanic which means they are more likely to survive than men","2982dc79":"# Embark","4328ef67":"# Gender","63107e04":"Shows the number of females and males who has number of siblings or spouse that is Parch.","51127b13":"# Relatives"}}