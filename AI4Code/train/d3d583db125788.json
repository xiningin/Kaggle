{"cell_type":{"bce56aca":"code","6548599a":"code","d654bf91":"code","94f7ff94":"code","e636a0ca":"code","10797f34":"code","9275a8c2":"code","a5c4b105":"code","230dcb1f":"code","e1f6452c":"code","c3aafb6b":"code","56bcc74f":"code","c3bc4e5e":"code","644516bd":"code","223cbe37":"code","b3108462":"code","72443b03":"code","d84a20a2":"code","a7fda7bd":"code","35ba03a2":"code","81c8b1fc":"code","4639d0f0":"code","9905fcfa":"code","a3dd5f40":"markdown","f10155ab":"markdown","71925a92":"markdown","b2ab9fd5":"markdown","bfa57f96":"markdown","a1168dd1":"markdown","0e06088b":"markdown"},"source":{"bce56aca":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","6548599a":"import time\nfrom itertools import groupby\nfrom fastai.vision import *\nfrom fastai.callbacks.hooks import *\nfrom fastai.utils.mem import *","d654bf91":"!pwd","94f7ff94":"# !ls -R ..\/input\/steel-create-labels\/\n! apt install  -y unzip \n! mkdir -p ..\/labels\/\n! unzip ..\/input\/steel-create-labels\/labels-img.zip -d ..\/labels\/","e636a0ca":"start = time.time()\npath = Path('..\/input')\npath_lbl = Path('..\/labels')\n\npath_img = path\/'severstal-steel-defect-detection\/train_images'\npath_test = path\/'severstal-steel-defect-detection\/test_images'\n# path_lbl.ls(), path_img.ls()","10797f34":"fnames = get_image_files(path_img)\nfnames[:3]","9275a8c2":"lbl_names = get_image_files(path_lbl)\nlbl_names[:3]","a5c4b105":"img_f = fnames[0]\nimg = open_image(img_f)\nimg.show(figsize=(5,5))","230dcb1f":"def get_y_fn(x):\n    x = Path(x)\n    return path_lbl\/f'{x.stem}.png'","e1f6452c":"mask = open_mask(get_y_fn(img_f))\nmask.show(figsize=(5,5), alpha=1)","c3aafb6b":"codes = ['0','1','2','3', '4'] # ClassId = codes + 1\nfree = gpu_mem_get_free_no_cache()\nbs = 4\ncategory_num = len(codes)\nprint(f\"using bs={bs}, have {free}MB of GPU RAM free\")","56bcc74f":"train_df = pd.read_csv(path\/\"severstal-steel-defect-detection\/train.csv\")\ntrain_df[['ImageId', 'ClassId']] = train_df['ImageId_ClassId'].str.split('_', expand=True)\n# train_df.head()","c3bc4e5e":"image_df = pd.DataFrame(train_df['ImageId'].unique())\nimage_df.head()","644516bd":"name2id = {v:k for k,v in enumerate(codes)}\nvoid_code = 4\nwd=1e-2\n\ndef acc_steel(input, target):\n    target = target.squeeze(1)\n    mask = target != void_code\n    return (input.argmax(dim=1)[mask]==target[mask]).float().mean()\n\ndef dice(pred, targs):\n    pred = (pred>0).float()\n    return 2. * (pred*targs).sum() \/ (pred+targs).sum()\n\ndef iou(input:Tensor, targs:Tensor) -> Rank0Tensor:\n    \"IoU coefficient metric for binary target.\"\n    n = targs.shape[0]\n    input = input.argmax(dim=1).view(n,-1)\n    targs = targs.view(n,-1)\n    intersect = (input*targs).sum().float()\n    union = (input+targs).sum().float()\n    return intersect \/ (union-intersect+1.0)","223cbe37":"size = 256, 1600\n\nsrc = (SegmentationItemList.from_df(image_df, path_img,)\n       .split_by_rand_pct(valid_pct=0.2, seed=33)\n       .label_from_func(get_y_fn, classes=codes))\n\ndata = (src.transform(get_transforms(), size=size, tfm_y=True)\n       .databunch(bs=bs)\n       .normalize()\n       )","b3108462":"data.show_batch(2, figsize=(20,5))","72443b03":"data.show_batch(2, figsize=(20,5),ds_type=DatasetType.Valid)","d84a20a2":"# learner, include where to save pre-trained weights (default is in non-write directory)\n# learn = unet_learner(data, models.resnet18, metrics=[acc_steel, iou], wd=wd, \n#                      model_dir=\"\/kaggle\/working\/models\")\n\nlearn = load_learner(\"..\/input\/fastai-steel-unet\/\", file=\"steel-2.pkl\")\nlearn.data.single_ds.tfmargs['size'] = None\n","a7fda7bd":"# def get_predictions(path_test, learn, size):\n#     learn.model.cuda()\n#     import pdb; pdb.set_trace()\n#     files = list(path_test.glob(\"**\/*.jpg\"))    #<---------- HERE\n#     test_count = len(files)\n#     results = {}\n#     for i, img in enumerate(files):\n#         results[img.stem] = learn.predict(open_image(img))[1].data.numpy().flatten()\n    \n#         if i%20==0:\n#             print(\"\\r{}\/{}\".format(i, test_count), end=\"\")\n#     return results\n\n# predicts = get_predictions(path_test, learn, size)\n# len(predicts)","35ba03a2":"# https:\/\/www.kaggle.com\/go1dfish\/u-net-baseline-by-pytorch-in-fgvc6-resize\ndef encode(input_string):\n    return [(len(list(g)), k) for k,g in groupby(input_string)]\n\ndef run_length(label_vec):\n    encode_list = encode(label_vec)\n    index = 1\n    class_dict = {}\n    for i in encode_list:\n        if i[1] != len(codes)-1:\n            if i[1] not in class_dict.keys():\n                class_dict[i[1]] = []\n            class_dict[i[1]] = class_dict[i[1]] + [index, i[0]]\n        index += i[0]\n    return class_dict\n\n    \n# https:\/\/www.kaggle.com\/nikhilikhar\/pytorch-u-net-steel-1-submission\/output#Export-File\ndef get_predictions(path_test, learn):\n    # predicts = get_predictions(path_test, learn)\n    learn.model.cuda()\n    files = list(path_test.glob(\"**\/*.jpg\"))    #<---------- HERE\n    test_count = len(files)\n    results = []\n    for i, img in enumerate(files):\n        img_name = img.stem + '.jpg'\n        pred = learn.predict(open_image(img))[1].data.numpy().flatten()\n        class_dict = run_length(pred)\n        if len(class_dict) == 0:\n            for i in range(4):\n                results.append([img_name+ \"_\" + str(i+1), ''])\n        else:\n            for key, val in class_dict.items():\n                results.append([img_name + \"_\" + str(key+1), \" \".join(map(str, val))])\n            for i in range(4):\n                if i not in class_dict.keys():\n                    results.append([img_name + \"_\" + str(i+1), ''])\n        \n        \n        if i%20==0:\n            print(\"\\r{}\/{}\".format(i, test_count), end=\"\")\n    return results    \n\nsub_list = get_predictions(path_test, learn)","81c8b1fc":"submission_df = pd.DataFrame(sub_list, columns=['ImageId_ClassId', 'EncodedPixels'])\nsubmission_df.head()","4639d0f0":"submission_df.to_csv(\"submission.csv\", index=False)","9905fcfa":"end = time.time()\nhours, rem = divmod(end-start, 3600)\nminutes, seconds = divmod(rem, 60)\nprint(\"Execution Time  {:0>2}:{:0>2}:{:05.2f}\".format(int(hours),int(minutes),seconds))","a3dd5f40":"# Test","f10155ab":"https:\/\/forums.fast.ai\/t\/unet-segmentation-mask-converter-to-help-against-common-errors-problems\/42949","71925a92":"We are pre created labels in https:\/\/www.kaggle.com\/nikhilikhar\/steel-create-labels?scriptVersionId=18627876\n\nWe want to access the output directly in this Kernel. We will unzip label mask in `..\/labels`","b2ab9fd5":"# Create\/Load Learner\nWe will load our trained learner.\n\nWe are loading trained model from https:\/\/www.kaggle.com\/nikhilikhar\/fastai-steel-unet?scriptVersionId=18713214","bfa57f96":"# Using Fastai\n\nBased on https:\/\/www.kaggle.com\/nikhilikhar\/fastai-steel-unet","a1168dd1":"# Data","0e06088b":"# Model"}}