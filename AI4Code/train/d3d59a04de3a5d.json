{"cell_type":{"06cd4a3f":"code","0e9f98ce":"code","2042a1ab":"code","6c5bd6c4":"code","bf1e2b5d":"code","7b60efdc":"code","dee1b917":"code","744c9751":"code","58f87edc":"code","f5801688":"code","07b8d28b":"code","8989ac12":"code","9f8bc7f3":"code","0586186c":"code","5e9577c9":"code","e9edd1b3":"code","ed075bce":"code","d0cf2ca9":"code","da9e2e8f":"code","26832c4c":"code","e13a57ba":"code","946d33a6":"code","0771d2de":"code","478e7017":"code","fccbd847":"code","864ba856":"code","56f131e8":"code","c40afdcc":"code","270d19e7":"code","6bfd036e":"code","196c9645":"code","c8d5de06":"code","212324f0":"code","ad39cb24":"code","7eeb04e0":"code","cb6fd1f2":"code","dfd3cf1a":"code","30714151":"code","68dc7c16":"code","33c02329":"code","56faafa6":"code","276418f8":"code","ff7a2e8b":"code","e77bc711":"code","5f1385c1":"code","da5644c0":"code","c604c59e":"code","19dfac39":"code","c7f91cb6":"code","b76a318b":"code","f7524f5c":"code","56bbd30a":"code","4f604379":"code","11be8824":"code","ca32a0e0":"code","238fee68":"code","2bd646d0":"code","e0debe4d":"code","85bbef13":"code","7fbf2052":"code","f071e458":"code","8fd0c72f":"code","d0908a19":"code","c637b07f":"code","49fa2fa8":"code","d2f434db":"code","d5684412":"code","a19ac9c4":"code","a0ffe71f":"code","1f3249d9":"code","2fa57cf5":"code","6e84ac72":"code","1edb1dd2":"code","3a41ed47":"code","cb77f99a":"code","0af37169":"code","88335d50":"code","9fd6718b":"code","3d9f978d":"code","145b9cce":"code","6352b6a8":"code","b08cf7e1":"code","20f21c43":"code","93090d3f":"code","86565664":"code","a1c6c165":"code","bd732c0a":"code","9af95904":"code","8086c707":"code","ab6ea756":"code","02f9006f":"code","6f18abb9":"code","1c9feb82":"code","38e5ccee":"code","17736c4b":"code","41b22992":"code","cedb2e40":"code","87ed6ba4":"code","d673bc3d":"code","ccbae387":"code","b08cd20e":"code","5ea21097":"code","a32e87bb":"code","3be3f42f":"code","81ccfbed":"code","573fd4d7":"code","65adfd7c":"code","70e5bb4b":"code","24524676":"markdown","cc1cf2c3":"markdown","5df14449":"markdown","9c20454c":"markdown","f412eecf":"markdown","3844354e":"markdown","32e5452d":"markdown","ddd1537b":"markdown","961e963b":"markdown","9676be22":"markdown","96d3263e":"markdown","df248c06":"markdown","7b75a53b":"markdown","4bf9fadb":"markdown","a2081335":"markdown","100c1385":"markdown","7d797bd9":"markdown","c028f693":"markdown","63e85662":"markdown","38c56bfe":"markdown","cf69ca06":"markdown","91858787":"markdown","83c27225":"markdown","8c1df175":"markdown","437485ae":"markdown","d51268d3":"markdown","e41e46ea":"markdown","34036883":"markdown","ed94532a":"markdown","452a5153":"markdown","3ad28e5b":"markdown","e920e9bc":"markdown","b61b1317":"markdown","db408533":"markdown","ebd0c8b2":"markdown","fef00c70":"markdown","5c83bfdf":"markdown","432b6611":"markdown","8215403a":"markdown","c57989e8":"markdown","064864f3":"markdown","1bae7d55":"markdown","9de833c8":"markdown","8a455d14":"markdown","d7d0fbc3":"markdown","470919fb":"markdown","d36a3116":"markdown","16465f90":"markdown","3d1634fe":"markdown","10823f86":"markdown","35dc71e4":"markdown","592ae59b":"markdown","ffe6fb6c":"markdown","c8985a21":"markdown","8999f9f2":"markdown","e1f7bb90":"markdown","06d0c6ef":"markdown","a3dc9aae":"markdown","94f9f43b":"markdown","f00392d9":"markdown","06b11e65":"markdown","c8a5198d":"markdown","dcb80b72":"markdown","07bb25fe":"markdown","535d88d0":"markdown","eca24be6":"markdown","f3a0c2e2":"markdown","1a6de67a":"markdown","6bb9ec83":"markdown","40267f03":"markdown","7bdada7f":"markdown","ce3ee2d1":"markdown","12b210f0":"markdown","a0993af5":"markdown","387ca4a3":"markdown","cfe24553":"markdown","d7660ad6":"markdown","d7050ffc":"markdown","924a9294":"markdown","97808079":"markdown","4100bf71":"markdown","9b429515":"markdown","bb4c9a60":"markdown","e8194a6a":"markdown","5077cfef":"markdown","3a551b0a":"markdown","451d6b1d":"markdown","675de960":"markdown","a7cc2672":"markdown","abea839a":"markdown","fd516965":"markdown","00b7c059":"markdown","04c72b3c":"markdown","5b39a7c8":"markdown","6d102881":"markdown","f00f76c2":"markdown","228d02ed":"markdown","ef695f67":"markdown","e62df0e3":"markdown","32dd4331":"markdown","1f197e66":"markdown","8c0fd10f":"markdown","cf036be5":"markdown","9a89868d":"markdown","69f07665":"markdown","d54f00c6":"markdown","a3b4211d":"markdown","76b90175":"markdown","db4c1968":"markdown"},"source":{"06cd4a3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0e9f98ce":"import pandas\nimport pandas as pd\nimport numpy\nimport numpy as np\nimport random as rn\nimport functools\nimport re","2042a1ab":"print('Task 1:')  \nprint(pd.__version__)","6c5bd6c4":"print('Task 2:')\ndtype = [('Col1','int32'), ('Col2','float32'), ('Col3','float32')]\nvalues = numpy.zeros(20, dtype=dtype)\nindex = ['Row'+str(i) for i in range(1, len(values)+1)]\n\ndf = pandas.DataFrame(values, index=index)\n\nprint(df)\n\ndf = pandas.DataFrame(values)\nprint(df)","bf1e2b5d":"print('Task 3:')\ndf = pandas.read_csv('..\/input\/data1.csv', sep=';', header=None)\nprint(df.iloc[:4]) # 0 - 4 = 5 values","7b60efdc":"\nprint('Task 4:')\nvalues = np.random.randint(2, 10, size=4)\nprint(values)","dee1b917":"print('Task 5:')\ndf = pd.DataFrame(np.random.randint(0, 100, size=(3, 2)), columns=list('xy'))\nprint(df)","744c9751":"print('Task 6:')\ndf = pd.DataFrame(np.random.randint(0, 100, size=(2, 4)), columns=['A', 'B', 'C', 'D'])\nprint(df)","58f87edc":"print('Task 7:')\nvalues = np.random.randint(5, size=(2, 4))\nprint(values)\nprint(type(values))","f5801688":"print('Task 8:')\ndf = pd.DataFrame(np.random.randint(0, 100, size=(3, 5)), columns=['Toronto', 'Ottawa', 'Calgary', 'Montreal', 'Quebec'])\nprint(df)","07b8d28b":"print('Task 9:')  \ndtype = [('One','int32'), ('Two','int32')]\nvalues = np.zeros(3, dtype=dtype)\nindex = ['Row'+str(i) for i in range(1, 4)]\n\ndf = pandas.DataFrame(values, index=index)\nprint(df)","8989ac12":"print('Task 10:')  \ndtype = [('Science','int32'), ('Maths','int32')]\nvalues = np.zeros(3, dtype=dtype)\n\n#print(type(dtype))\n#values = np.random.randint(5, size=(3, 2))\n#print(values)\n#index = ['Row'+str(i) for i in range(1, 4)]\n\ndf = pandas.DataFrame(values, index=index)\nprint(df)","9f8bc7f3":"print('Task 11:')  \n\ncsv = pd.DataFrame.from_csv('..\/input\/uk-500.csv')\nprint(csv.head())","0586186c":"print('Task 12:')  \n#df = df.from_csv(path, header, sep, index_col, parse_dates, encoding, tupleize_cols, infer_datetime_format)\ndf = pd.DataFrame.from_csv('..\/input\/uk-500.csv')\nprint(df.head())","5e9577c9":"print('Task 13:') \ndf = pandas.read_csv('..\/input\/data1.csv', sep=',')\nprint(df.shape) \n#print(df[2:14])\nprint(df.iloc[0:4,0:2])\n#print(df[df.columns[0]])","e9edd1b3":"print('Task 14:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\n\nprint(df.iloc[::2, 0:3])    ","ed075bce":"print('Task 15:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\nprint(df) \ndf['total'] = df.sum(axis=1)\n\nprint(df)","d0cf2ca9":"print('Task 16:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\nprint(df) \n\ndf = df[df.science > 50]\nprint(df)","da9e2e8f":"print('Task 17:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\nprint(df) \n\ndf = df.query('science > 45')\nprint(df)","26832c4c":"print('Task 18:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\", skiprows=[5])\nprint(df.shape)\nprint(df)","e13a57ba":"print('Task 19:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\", skiprows=[1, 5, 7])\nprint(df.shape)\n#print(df) \n\n#df = df[df[[1]] > 45]\nprint(df)","946d33a6":"print('Task 20:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\nprint(df) \n\n#df = df[int(df.columns[2]) > 45]\nprint(df)\nprint(type(df.columns[2]))","0771d2de":"print('Task 21:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\", skiprows=[0])\nprint(df.shape)\nprint(df) \n\n#df = df[int(df.columns[2]) > 45]\n#print(df)\nprint(df.columns[2])","478e7017":"print('Task 22:')\nfrom io import StringIO\n\ns = \"\"\"\n        1, 2\n        3, 4\n        5, 6\n    \"\"\"\n\ndf = pd.read_csv(StringIO(s), header=None)\n\nprint(df.shape)\nprint(df)","fccbd847":"print('Task 23:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\ndf['sum'] = df.sum(axis=1)\ndf['max'] = df.max(axis=1)\ndf['min'] = df.min(axis=1)\ndf['average'] = df.mean(axis=1).astype(int)\nprint(df)","864ba856":"def apply_math_special(row):\n    return (row.maths * 2 + row.language \/ 2 + row.history \/ 3 + row.science) \/ 4                \n\nprint('Task 24:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)\ndf['sum'] = df.sum(axis=1)\ndf['max'] = df.max(axis=1)\ndf['min'] = df.min(axis=1)\ndf['average'] = df.mean(axis=1).astype(int)\ndf['math_special'] = df.apply(apply_math_special, axis=1).astype(int)\nprint(df)","56f131e8":"def pass_one_subject(row):\n    if(row.maths > 34):\n        return 'Pass'\n    if(row.language > 34 and row.science > 34):\n        return 'Pass'\n    \n    return 'Fail'                \n\nprint('Task 25:') \ndf = pandas.read_csv('..\/input\/abc.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)   \n\ndf['pass_one'] = df.apply(pass_one_subject, axis=1)\nprint(df)","c40afdcc":"print('Task 26:') \ndf = pandas.read_csv('..\/input\/abc2.csv', sep=',', encoding = \"utf-8\")\nprint(df.shape)   \nprint(df)\ndf.fillna(df.mean(), inplace=True)\n\n#df['pass_one'] = df.apply(pass_one_subject, axis=1)\nprint(df)","270d19e7":"print('Task 27:')\ndf = pd.DataFrame(np.random.rand(10, 5))\ndf.iloc[0:3, 0:4] = np.nan # throw in some na values\nprint(df)\ndf.loc[:, 'test'] = df.iloc[:, 2:].sum(axis=1)\nprint(df)","6bfd036e":"print('Task 28:') \ndf = pandas.read_csv('..\/input\/score.csv', sep=',', encoding = \"ISO-8859-1\")\nprint(df.shape) ","196c9645":"print('Task 29:') \ndf = pd.DataFrame(np.random.rand(3,4), columns=list(\"ABCD\"))\nprint(df.shape)   \nprint(df)\ndf.fillna(df.mean(), inplace=True)\n\nprint(df)","c8d5de06":"print('Task 30:')  \ndf = pandas.read_csv('..\/input\/data1.csv', sep=';') \nprint(df[-4:])","212324f0":"print('Task 31:')\nseries1 = pd.Series([i \/ 100.0 for i in range(1,6)])\nprint(series1)\ndef CumRet(x,y):\n    return x * (1 + y)\ndef Red(x):\n    return functools.reduce(CumRet,x,1.0)\ns2 = series1.expanding().apply(Red)\n# s2 = series1.expanding().apply(Red, raw=True) # is not working\nprint(s2)","ad39cb24":"print('Task 32:')  \ndf = pandas.read_csv('..\/input\/data1.csv', sep=';') \nprint(df[2:4])","7eeb04e0":"print('Task 33:')  \ndf = pandas.read_csv('..\/input\/data1.csv', sep=';') \nprint(df[-4:-1])","cb6fd1f2":"print('Task 34:')  \ndf = pandas.read_csv('..\/input\/data1.csv', sep=';') \nprint(df.iloc[1:9])","dfd3cf1a":"print('Task 35:')  \ndf = pandas.read_csv('..\/input\/data1.csv', sep=';')","30714151":"print('Task 36:')  \ndef xrange(x):\n    return iter(range(x))\n\nrnd_1  =  [ rn.randrange ( 1 , 20 )  for  x  in  xrange ( 1000 )] \nrnd_2  =  [ rn.randrange ( 1 , 20 )  for  x  in  xrange ( 1000 )] \nrnd_3  =  [ rn.randrange ( 1 , 20 )  for  x in  xrange ( 1000 )] \ndate  =  pd . date_range ( '2012-4-10' ,  '2015-1-4' )\nprint(len(date))\ndata  =  pd . DataFrame ({ 'date' : date ,  'rnd_1' :  rnd_1 ,  'rnd_2' :  rnd_2 ,  'rnd_3' :  rnd_3 })\n\ndata.head()","68dc7c16":"print('Task 37:')\nbelow_20 = data[data['rnd_1'] < 20]    \nprint(below_20)","33c02329":"print('Task 38:') \ndef xrange(x):\n    return iter(range(x))\nrnd_1  =  [ rn.randrange ( 1 , 20 )  for  x  in  xrange ( 1000 )] \nrnd_2  =  [ rn.randrange ( 1 , 20 )  for  x  in  xrange ( 1000 )] \nrnd_3  =  [ rn.randrange ( 1 , 20 )  for  x in  xrange ( 1000 )] \ndate  =  pd . date_range ( '2012-4-10' ,  '2015-1-4' )\nprint(len(date))\ndata  =  pd . DataFrame ({ 'date' : date ,  'rnd_1' :  rnd_1 ,  'rnd_2' :  rnd_2 ,  'rnd_3' :  rnd_3 })\nbelow_20 = data[data['rnd_1'] < 20]\nten_to_20 = data[(data['rnd_1'] >= 5) & (data['rnd_1'] < 10)]\n#print(ten_to_20)","56faafa6":"print('Task 39:')      \ndate  =  pd . date_range ( '2018-08-01' ,  '2018-08-15' )\ndate_count = len(date)\n\ndef fill_rand(start, end, count):\n    return [rn.randrange(1, 20 ) for x in xrange( count )]\n\nrnd_1 = fill_rand(1, 20, date_count) \nrnd_2 = fill_rand(1, 20, date_count) \nrnd_3 = fill_rand(1, 20, date_count)\n#print(len(date))\ndata  =  pd . DataFrame ({ 'date' : date ,  'rnd_1' :  rnd_1 ,  'rnd_2' :  rnd_2 ,  'rnd_3' :  rnd_3 })\n#print(len(date))\nten_to_20 = data[(data['rnd_1'] >= 15) & (data['rnd_1'] < 20)]\nprint(ten_to_20)","276418f8":"print('Task 40:')      \ndate  =  pd . date_range ( '2018-08-01' ,  '2018-08-15' )\ndate_count = len(date)\n\ndef fill_rand(start, end, count):\n    return [rn.randrange(1, 20 ) for x in xrange( count )]\n\nrnd_1 = fill_rand(1, 20, date_count) \nrnd_2 = fill_rand(1, 20, date_count) \nrnd_3 = fill_rand(1, 20, date_count)\n\ndata  =  pd . DataFrame ({ 'date' : date ,  'rnd_1' :  rnd_1 ,  'rnd_2' :  rnd_2 ,  'rnd_3' :  rnd_3 })\n\nten_to_20 = data[(data['rnd_1'] >= 15) & (data['rnd_1'] < 33)]\nprint(ten_to_20)","ff7a2e8b":"print('Task 41:')  \ndate  =  pd . date_range ( '2018-08-01' ,  '2018-08-15' )\ndate_count = len(date)\n\ndef xrange(x):\n    return iter(range(x))\n\ndef fill_rand(start, end, count):\n    return [rn.randrange(1, 20 ) for x in xrange( count )]\n\nrnd_1 = fill_rand(1, 20, date_count) \nrnd_2 = fill_rand(1, 20, date_count) \nrnd_3 = fill_rand(1, 20, date_count)\n\ndata  =  pd . DataFrame ({ 'date' : date ,  'rnd_1' :  rnd_1 ,  'rnd_2' :  rnd_2 ,  'rnd_3' :  rnd_3 })\nfilter_loc = data.loc[ 2 : 4 ,  [ 'rnd_2' ,  'date' ]]\nprint(filter_loc)","e77bc711":"print('Task 42:')\ndate_date = data.set_index( 'date' ) \nprint(date_date.head())","5f1385c1":"print('Task 43:') \ndf = pd.DataFrame({\n    'a' : [1,2,3,4], \n    'b' : [9,8,7,6],\n    'c' : [11,12,13,14]\n});\nprint(df) \n\nprint('changing on one column')\n# Change columns\ndf.loc[df.a >= 2,'b'] = 9\nprint(df)","da5644c0":"print('Task 44:')  \nprint('changing on multipe columns')\ndf.loc[df.a > 2,['b', 'c']] = 45\nprint(df)","c604c59e":"print('Task 45:')  \nprint(df)\ndf_mask = pd.DataFrame({\n    'a' : [True] * 4, \n    'b' : [False] * 4,\n    'c' : [True, False] * 2\n})\nprint(df.where(df_mask,-1000))","19dfac39":"print('Task 46:')\nprint(df)  \ndf['logic'] = np.where(df['a'] > 5, 'high', 'low')\nprint(df)","c7f91cb6":"print('Task 47:')\nmarks_df = pd.DataFrame({\n    'Language' : [60, 45, 78, 4], \n    'Math' : [90, 80, 23, 60],\n    'Science' : [45, 90, 95, 20]\n});\nprint(marks_df)\nmarks_df['language_grade'] = np.where(marks_df['Language'] >= 50, 'Pass', 'Fail')\nmarks_df['math_grade'] = np.where(marks_df['Math'] >= 50, 'Pass', 'Fail')\nmarks_df['science_grade'] = np.where(marks_df['Science'] >= 50, 'Pass', 'Fail')\nprint(marks_df)","b76a318b":"print('Task 48:')  \nmarks_df = pd.DataFrame({\n    'Language' : [60, 45, 78, 4], \n    'Math' : [90, 80, 23, 60],\n    'Science' : [45, 90, 95, 20]\n});\nprint(marks_df)\nmarks_df_passed_in_language = marks_df[marks_df.Language >=50 ]\nprint(marks_df_passed_in_language)","f7524f5c":"print('Task 49:')  \nmarks_df_passed_in_lang_math = marks_df[(marks_df.Language >=50) & (marks_df.Math >= 50)]\nprint(marks_df_passed_in_lang_math)","56bbd30a":"print('Task 50:')  \nmarks_df_passed_in_lang_and_sc = marks_df.loc[(marks_df.Language >=50) & (marks_df.Science >= 50)]\nprint(marks_df_passed_in_lang_and_sc)","4f604379":"print('Task 51:')\nstars = {\n    'age' : [31, 23, 65, 50],\n    'movies' : [51, 23, 87, 200],\n    'awards' : [42, 12, 4, 78]\n    }\nstar_names = ['dhanush', 'simbu', 'kamal', 'vikram']\nstars_df = pd.DataFrame(data=stars, index=[star_names])\nprint(stars_df)","11be8824":"print('Task 52:')  \nprint(stars_df.iloc[1:3])","ca32a0e0":"print('Task 40:')  \nnumbers = pd.DataFrame({\n        'one' : [10, 50, 80, 40],\n        'two' : [2, 6, 56, 45]\n    },\n    index = [12, 14, 16, 18])\nprint(numbers)\n\nprint('label between 12 and 16')\nprint(numbers.loc[12:16])\n\nprint('index between 1 and 3')\nprint(numbers.iloc[1:3])","238fee68":"'''\n    \n'''\nprint('Task 54:') \nstars = {\n    'age' : [31, 23, 65, 50],\n    'movies' : [51, 23, 87, 200],\n    'awards' : [42, 12, 4, 78]\n    }\nstar_names = ['dhanush', 'simbu', 'kamal', 'vikram']\nstars_df = pd.DataFrame(data=stars, index=[star_names])\nnumbers = pd.DataFrame({\n        'one' : [10, 50, 80, 40],\n        'two' : [2, 6, 56, 45]\n    },\n    index = [12, 14, 16, 18])\nprint(numbers)","2bd646d0":"print('Task 55:')\n\nage_movies_25 = stars_df[(stars_df.movies > 25 ) & (stars_df.age > 25)]  \nprint(age_movies_25)","e0debe4d":"print('Task 56:')  \ncustom_stars = stars_df[stars_df.age.isin([31, 65])]\nprint(custom_stars)","85bbef13":"print('Task 57:')  \nprint(numbers)\nprint(numbers[~( (numbers.one > 45) & (numbers.two < 50) )])","7fbf2052":"print('Task 58:')\ndef GrowUp(x):\n    avg_weight =  sum(x[x['size'] == 'series1'].weight * 1.5)\n    avg_weight += sum(x[x['size'] == 'M'].weight * 1.25)\n    avg_weight += sum(x[x['size'] == 'L'].weight)\n    avg_weight \/= len(x)\n    return pd.Series(['L',avg_weight,True], index=['size', 'weight', 'adult'])\n\nanimals_df = pd.DataFrame({'animal': 'cat dog cat fish dog cat cat'.split(),\n                   'size': list('SSMMMLL'),\n                   'weight': [8, 10, 11, 1, 20, 12, 12],\n                   'adult' : [False] * 5 + [True] * 2})\n\ngb = animals_df.groupby(['animal'])\n\nexpected_df = gb.apply(GrowUp)\nprint(expected_df)","f071e458":"print('Task 59:')\nweights = animals_df.groupby(['weight']).get_group(20)  \nprint(weights)","8fd0c72f":"print('Task 60:')\nsides_df = pd.DataFrame({\n    'a' : [1, 1, 2, 4],\n    'b' : [2, 1, 3, 4]\n    })  \nprint(sides_df)\nsource_cols = sides_df.columns\nprint(source_cols)\nnew_cols = [str(x)+\"_side\" for x in source_cols]\nside_category = {\n    1 : 'North',\n    2 : 'East',\n    3 : 'South', \n    4 : 'West'\n    }\nsides_df[new_cols] = sides_df[source_cols].applymap(side_category.get)\nprint(sides_df)","d0908a19":"print('Task 61:')  \ndf = pd.DataFrame({'A' : [1, 1, 2, 2], 'B' : [1, -1, 1, 2]})\nprint(df)\n\ngb = df.groupby('A')\n\ndef replace(g):\n    mask = g < 0\n    g.loc[mask] = g[~mask].mean()\n    return g\n\ngbt = gb.transform(replace)\n\nprint(gbt)","c637b07f":"print('Task 62:') \nmarks_df = pd.DataFrame({\n    'Language' : [60, 45, 78, 4], \n    'Math' : [90, 80, 23, 60],\n    'Science' : [45, 90, 95, 20]\n});\nprint(marks_df)\nmarks_df_passed_in_lang_or_sc = marks_df.loc[(marks_df.Language >=50) | (marks_df.Science >= 50)]\nprint(marks_df_passed_in_lang_or_sc)","49fa2fa8":"print('Task 63:')  \nmarks_df['passed_one_subject'] = 'Fail' \nmarks_df.loc[(marks_df.Language >=50) , 'passed_one_subject'] = 'Pass'\nprint(marks_df)","d2f434db":"print('Task 64:')  \ndf = pd.DataFrame({\n    \"a\": np.random.randint(0, 100, size=(5,)), \n    \"b\": np.random.randint(0, 70, size=(5,))\n})\nprint(df)\npar = 65\nprint('with argsort')\ndf1 = df.loc[(df.a-par).abs().argsort()]\nprint(df1)\n\nprint(df.loc[(df.b-2).abs().argsort()])","d5684412":"print('Task 65:')  \nstars = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"movies\": [2, 3, 90, 45, 34, 2] \n})\nprint(stars.loc[(stars.age - 50).abs().argsort()])","a19ac9c4":"print('Task 66:')  \nprint(stars.loc[(stars.age - 17).abs().argsort()])","a0ffe71f":"print('Task 67:')\nstars = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"movies\": [22, 33, 90, 75, 34, 2] \n})  \nprint(stars)\nprint('Young and more movies acted')\nyoung = stars.age < 30    \nmore_movies = stars.movies > 30\nyoung_more = [young, more_movies]\nyoung_more_Criteria = functools.reduce(lambda x, y : x & y, young_more)\nprint(stars[young_more_Criteria])","1f3249d9":"print('Task 68:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8] \n})  \nprint(employees)\nprint('Young, Higher Salary, and Higher Position')\nyoung = employees.age < 30\nhigh_salary = employees.salary > 60\nhigh_position = employees.grade > 6\nyoung_salary_position = [young, high_salary, high_position]\nyoung_salary_position_Criteria = functools.reduce(lambda x, y : x & y, young_salary_position)\nprint(employees[young_salary_position_Criteria])\n","2fa57cf5":"print('Task 69:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8] \n})  \nprint(employees)\nemployees.rename(columns={'age': 'User Age', 'salary': 'Salary 2018'}, inplace=True)\nprint(employees)","6e84ac72":"print('Task 70:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8] \n})  \nprint(employees)\nemployees['group'] = pd.Series(np.random.randn(len(employees)))\nprint(employees)","1edb1dd2":"print('Task 71:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8] \n})  \nprint(employees)\nemployees['group'] = pd.Series(np.random.randn(len(employees)))\nprint(employees)\nemployees.drop(employees.columns[[0]], axis=1, inplace = True)\nprint(employees)","3a41ed47":"print('Task 72:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8] \n})  \nprint(employees)\nemployees['group'] = pd.Series(np.random.randn(len(employees)))\nprint(employees)\nemployees.drop(employees.columns[[1, 2]], axis=1, inplace = True)\nprint(employees)","cb77f99a":"print('Task 73:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)\nemployees.drop(employees.columns[[0, len(employees.columns)-1]], axis=1, inplace = True)\nprint(employees)","0af37169":"print('Task 74:')  \nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)\ngroup = employees.pop('group')\nprint(employees)\nprint(group)","88335d50":"print('Task 75:')  \ndf = pd.DataFrame.from_items([('A', [1, 2, 3]), ('B', [4, 5, 6]), ('C', [7,8, 9])], orient='index', columns=['one', 'two', 'three'])\nprint(df)","9fd6718b":"print('Task 76:')\nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)  \nemployees_list1 = list(employees.columns.values) \nemployees_list2 = employees.values.tolist()\n#employees_list = list(employees)\nprint(employees_list1)\nprint(employees_list2)","3d9f978d":"print('Task 77:')\nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)  \nemployees_list2 = employees.values.tolist()\nprint(employees_list2)\nprint(type(employees_list2))\nprint(len(employees_list2))","145b9cce":"print('Task 78:')\nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)  \nemployees_list2 = employees.values\nprint(employees_list2)\nprint(type(employees_list2))\nprint(employees_list2.shape)","6352b6a8":"print('Task 79:')\nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)  \nemployees_list2 = map(list, employees.values)\nprint(employees_list2)\nprint(type(employees_list2))","b08cf7e1":"print('Task 80:')\nemployees = pd.DataFrame({\n    \"age\": [17, 50, 24, 45, 65, 18], \n    \"salary\": [75, 33, 90, 175, 134, 78],\n    \"grade\" : [7, 8, 9, 2, 7, 8],\n    \"group\" : [1, 1, 2, 2, 2, 1] \n    \n})  \nprint(employees)  \nemployees_list2 = list(map(list, employees.values))\nprint(employees_list2)\nprint(type(employees_list2))","20f21c43":"print('Task 81:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)\nusers.drop_duplicates('id', inplace=True, keep='last')\nprint(users)","93090d3f":"print('Task 82:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)\nusers1 = users[['id', 'city']]\nprint(users1)","86565664":"print('Task 83:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)\ncolumns = ['id', 'count']\nusers1 = pd.DataFrame(users, columns=columns)\nprint(users1)","a1c6c165":"print('Task 84:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)    \nusers1 = users.iloc[0:2, 1:3]\nprint(users1)","bd732c0a":"print('Task 85:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)    \nfor index, row in users.iterrows():\n    print(row['city'], \"==>\", row['count'])","9af95904":"print('Task 86:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)    \nfor row in users.itertuples(index=True, name='Pandas'):\n    print(getattr(row, 'city'))\n    \nfor row in users.itertuples(index=True, name='Pandas'):\n    print(row.count)","8086c707":"print('Task 87:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)    \nfor i, row in users.iterrows():\n    for j, col in row.iteritems():    \n        print(col)","ab6ea756":"print('Task 88:')  \npointlist = [\n                {'points': 50, 'time': '5:00', 'year': 2010}, \n                {'points': 25, 'time': '6:00', 'month': \"february\"}, \n                {'points':90, 'time': '9:00', 'month': 'january'}, \n                {'points_h1':20, 'month': 'june'}\n            ]\nprint(pointlist)\npointDf = pd.DataFrame(pointlist)\nprint(pointDf)\n\npointDf1 = pd.DataFrame.from_dict(pointlist)\nprint(pointDf1)","02f9006f":"print('Task 89:')\ndf = pd.DataFrame(np.random.randn(10,6))\n# Make a few areas have NaN values\ndf.iloc[1:3,1] = np.nan\ndf.iloc[5,3] = np.nan\ndf.iloc[7:9,5] = np.nan\nprint(df)\ndf1 = df.isnull()\nprint(df1)","6f18abb9":"print('Task 90:')  \ndf = pd.DataFrame(np.random.randn(10,6))\n# Make a few areas have NaN values\ndf.iloc[1:3,1] = np.nan\ndf.iloc[5,3] = np.nan\ndf.iloc[7:9,5] = np.nan\nprint(df)\nprint(df.isnull().sum())\nprint(df.isnull().sum(axis=1))\nprint(df.isnull().sum().tolist())","1c9feb82":"print('Task 91:')  \ndf = pd.DataFrame(np.random.randn(10,6))\n# Make a few areas have NaN values\ndf.iloc[1:3,1] = np.nan\ndf.iloc[5,3] = np.nan\ndf.iloc[7:9,5] = np.nan\nprint(df)\nprint(df.isnull().sum(axis=1))","38e5ccee":"print('Task 92:')  \ndf = pd.DataFrame(np.random.randn(10,6))\n# Make a few areas have NaN values\ndf.iloc[1:3,1] = np.nan\ndf.iloc[5,3] = np.nan\ndf.iloc[7:9,5] = np.nan\nprint(df)\nprint(df.isnull().sum().tolist())","17736c4b":"print('Task 93:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)\nusers1 = users.reindex_axis(['city', 'count', 'id'], axis=1)\nprint(users1)\n\nusers2 = users.reindex(columns=['city', 'id', 'count'])\nprint(users2)","41b22992":"print('Task 94:')\nnumbers = pd.DataFrame({\n    \"id\": [1, 2, 3, 4, 5, 6], \n    \"number\": [10, 20, 30, 30, 23, 12]\n    \n})  \nprint(numbers)\nnumbers.drop(numbers.index[[0, 3, 5]], inplace=True)\nprint(numbers)","cedb2e40":"print('Task 95:')  \nnumbers = pd.DataFrame({\n    \"id\": [1, 2, 3, 4, 5, 6], \n    \"number\": [10, 20, 30, 30, 23, 12]\n    \n}, index=['one', 'two', 'three', 'four', 'five', 'six'])  \nprint(numbers)\nnumbers1 = numbers.drop(['two','six'])\nprint(numbers1)\nnumbers2 = numbers.drop('two')\nprint(numbers2)","87ed6ba4":"print('Task 96:')\ncats = animals_df.groupby(['animal']).get_group('cat')\nprint(cats)","d673bc3d":"print('Task 97:')  \nx = numpy.array([\n                    [ 1,  2,  3,  4,  5],\n                    [ 6,  7,  8,  9, 10],\n                    [11, 12, 13, 14, 15],\n                    [16, 17, 18, 19, 20]\n                ]\n    )\nprint(x)\nprint(x[::2])","ccbae387":"print('Task 98:')  \nx = numpy.array([\n                    [ 1,  2,  3,  4,  5],\n                    [ 6,  7,  8,  9, 10],\n                    [11, 12, 13, 14, 15],\n                    [16, 17, 18, 19, 20]\n                ]\n    )\nprint(x)\nprint(x[:, 1::2])","b08cd20e":"print('Task 99:')  \n\nx = numpy.array([\n                    [ 1,  2,  3,  4,  5],\n                    [ 6,  7,  8,  9, 10],\n                    [11, 12, 13, 14, 15],\n                    [16, 17, 18, 19, 20]\n                ]\n    )\nprint(x)\nprint(x[::2, 1::2])","5ea21097":"print('Task 100:')  \nusers = pd.DataFrame({\n    \"id\": [1, 1, 2, 2, 3, 3], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)\nusers.drop_duplicates('id', inplace=True)\nprint(users)","a32e87bb":"print('Task 101:')  \nusers = pd.DataFrame({\n    \"name\": ['kevin', 'james', 'kumar', 'kevin', 'kevin', 'james'], \n    \"city\": ['Toronto', 'Montreal', 'Calgary', 'Montreal', 'Montreal', 'Ottawa'],\n    \"count\" : [7, 8, 9, 2, 7, 8] \n    \n}) \nprint(users)\nusers.drop_duplicates('name', inplace=True, keep='last')\nprint(users)\nusers1 = users.drop_duplicates('name', keep=False)\nprint(users1)","3be3f42f":"print('Task 102:')\nanimals_df1 = animals_df.groupby('animal').apply(lambda x: x['size'][x['weight'].idxmax()])\nprint(animals_df1)","81ccfbed":"print('Task 103:')  \ndf = pd.DataFrame(np.random.randn(6,1), index=pd.date_range('2013-08-01', periods=6, freq='B'), columns=list('A'))\nprint(df)\ndf.loc[df.index[3], 'A'] = np.nan\nprint(df)","573fd4d7":"print('Task 104:')\ndf1 = df.reindex(df.index[::-1]).ffill()\nprint(df1)","65adfd7c":"print('Task 105:')\nanimals_df = pd.DataFrame({'animal': 'cat dog cat fish dog cat cat'.split(),\n                   'size': list('SSMMMLL'),\n                   'weight': [8, 10, 11, 1, 20, 12, 12],\n                   'adult' : [False] * 5 + [True] * 2})\nprint(animals_df)","70e5bb4b":"print('Task 106:')\ndf = pd.DataFrame([['http:\/\/wap.blah.com\/xxx\/id\/11\/someproduct_step2;jsessionid=....']],columns=['A'])\ndf1 = df['A'].str.findall(\"\\\\d\\\\d\\\\\/(.*?)(;|\\\\?)\",flags=re.IGNORECASE).apply(lambda x: pd.Series(x[0][0],index=['first']))\nprint(df1)","24524676":"**Task 4:**\n\nCreate Random integer between 2 to 10 with 4 items","cc1cf2c3":"**Task 90:**\n    \nSum of all nan","5df14449":"**Task 59:**\n\nGroup by single column","9c20454c":"**Task 8:        **\n\nCreate Random integer between 0 to 100 with 10 itmes (2 rows, 5 columns)","f412eecf":"**Task 28:**\n\nUnicode issue and fix","3844354e":"**Task 77:**\n\nPandas rows to list","32e5452d":"**Task 11:**\n\nCSV to DatRaframe (from_csv)\n<br>Note: from_csv is Deprecated since version 0.21.0: Use pandas.read_csv() instead.","ddd1537b":"**Task 35:**\n\nLoc - iloc - ix - at - iat","961e963b":"**Task 47:**\n\nStudent Marks (Pass or Fail)","9676be22":"**Task 39:**\n\nfilter between 15 to 20","96d3263e":"**Task 94:**\n\nDrop multiple rows","df248c06":"**Task 29:**\n        \nfill with average","7b75a53b":"**Task 41:**\n\ncustom method and xrnage on dataframe","4bf9fadb":"**Task 36:**\n\nRandom data","a2081335":"**Task 45:**\n\nPandas Mask","100c1385":"**Task 97:**\n\nGet the the odd row","7d797bd9":"**Task 22:**\n \nString to Dataframe\n<br>Note:\n<br>df[[1]] doesn't work in later Pandas","c028f693":"**Task 79:**\n\nPandas rows to map","63e85662":"**Task 55:**\n\nRow label selection\nAge is above 25 and movies above 25","38c56bfe":"**Task 67:**\n\nBinary operators\n\nStars with\n    younger than 19 - very young\n    more movies acted","cf69ca06":"**Task 81:**\n    \nDrop duplicates","91858787":"**Task 64:**\n\nargsort\nSelect rows with data closest to certain value using argsort","83c27225":"**Task 106:**","8c1df175":"**Task 33:**\n\nLast 4th to 1st","437485ae":"**Task 30:**\n \n Last 4 rows","d51268d3":"**Task 2:**\n    \nNumpy Array \n<br>\nCreate three columns with Zero values","e41e46ea":"**Task 9:**\n\n3 rows, 2 columns in pandas\n<br>\n1st column = random between 10 to 20\n<br>\n2nd column = random between 80 and 90\n<br>\n3rd column = random between 40 and 50 ","34036883":"**ps:**\n\n* If you find it useful, please upvote this kernel.\n* Feel free to fork and do CRUD!","ed94532a":"**Task 24:**\n\nNew columns as max of other columns\n<br>float to int used\n<br>Math is considered more, so double the marks for maths","452a5153":"**Task 62:**\n\nStudents passed in Language or Science (any one subject)","3ad28e5b":"**Task 76:**\n\nPandas to list","e920e9bc":"**Task 27:**\n        \nNew columns as sum of all","b61b1317":"**Task 88:**\n\nList of Dictionary to Dataframe","db408533":"**Task 42:**\nset index with date column","ebd0c8b2":"**Task 101:**\n    \nDrop all duplicates","fef00c70":"**Task 82:**\n    \nSelecting multiple columns","5c83bfdf":"**Task 21:**\n        \nSkip rows\n<br>Note:\n<br>df[[1]] doesn't work in later Pandas","432b6611":"**Task 68:**\n\nYoung, Higher Salary, and Higher Position","8215403a":"**Task 87:**\n    \nIterating rows and columns","c57989e8":"**Task 3:**\n\niLoc in Pandas\n<br>\nPrint first five rows","064864f3":"**Task 18:**\n\nSkip single row","1bae7d55":"**Task 51:**\n\nLoc with Label oriented slicing\n<br>possible error:\n<br>pandas.errors.UnsortedIndexError","9de833c8":"**Task 78:**\n\nPandas rows to array \n\nNote: as_matrix is deprecated","8a455d14":"**Task 100:**\n    \nDrop duplicates","d7d0fbc3":"**Task 34:**\n\niloc position slice","470919fb":"**Task 23:**\n\nNew columns as max of other columns\n<br>float to int used","d36a3116":"**Task 52:**\n\niloc with positional slicing","16465f90":"**Task 31:**\n\nExpanding Apply","3d1634fe":"**Task 54:**\n\nstars with names","10823f86":"**Task 57:**\n\ninverse opeartor\n   !( above one.45 and below two.50 )","35dc71e4":"**Task 95:**\n    \nDrop multiple rows by row name","592ae59b":"**Task 72:**\n\nDrop multiple columns","ffe6fb6c":"**Task 12:**\n\nCSV to Dataframe (from_csv)","c8985a21":"**Task 40:**\n\n15 to 33","8999f9f2":"**Task 7:**\n\n2D array with random between 0 and 5","e1f7bb90":"**Task 46:**\n\nCheck high or low comparing the column against 5","06d0c6ef":"**Task 48:**\n\nGet passed grades","a3dc9aae":"**Task 25:**\n        \nNew columns as max of other columns\n<br>35 marks considered as pass \n<br>If the student fails in math, consider fail\n<br>If the student passes in language and science, consider as pass","94f9f43b":"**Task 89:**","f00392d9":"**Task 44:**\n\nChange multiple columns based on one column values","06b11e65":"**Story line:**\n\nWhy Dundas?\n<br>Just a challenge between friends at Dundas Square about how quickly we can add basic exercises on pandas, hence \"Pandas @ Dundas\". ","c8a5198d":"**Task 50:**\n\nStudents passed in Language and Science","dcb80b72":"**Task 26:**\n        \n fill with average   \n       ","07bb25fe":"**Task 16: ** \n\nDelete Rows of one column where the value is less than 50","535d88d0":"**Task 85:**\n    \nIterating rows","eca24be6":"**Task 56:**\n\nstars in in certain ages","f3a0c2e2":"**Note:**\n\n* Some tasks are created to showcase the bugs (like from_csv)\n* If you find any mistakes\/improvements, please let me know. I am happy to fix them ","1a6de67a":"**Task 17:**\n\nDelete with Query\n<br>Note: Query doesn't work if your column has space in it","6bb9ec83":"**Task 14:**\n\nshow even rows and first three columns","40267f03":"**Task 38:**\n\nFilter between 5 and 10 on col 1","7bdada7f":"**Task 84:**\n    \nRow and Column Slicing","ce3ee2d1":"Task 66:\nArgsort with actors\nyoung stars (near by 17)","12b210f0":"**Task 20:**\n        \n<br>Select Column by Index\n<br>Note:\n <br>df[[1]] doesn't work in later Pandas","a0993af5":"**Task 98:**\n\nGet the even columns","387ca4a3":"**Task 53:**\n\nLabel between numbers","cfe24553":"**Task 93:**\n\nChange the order of columns\n\nNote:\n    FutureWarning: '.reindex_axis' is deprecated and will be removed in a future version ","d7660ad6":"**Task 13:**\n\nfirst 4 rows and 2 columns of CSV","d7050ffc":"**Task 105:**\n\nColumn reset Nan","924a9294":"**Task 70:**\n\nAdd a new column","97808079":"**Task 43:**\n<br>Change columns based on other columns","4100bf71":"**Task 58:**\n\napply custom function","9b429515":"**Task 86:**\n    \nIterating tuples","bb4c9a60":"**Task 49:**\n\nStudents passed in Language and Math","e8194a6a":"**Task 104:**\n\nreindex","5077cfef":"**Task 99:**\n\nOdd rows and even columns","3a551b0a":"**Task 10:**\n\nFill Random Science and Math Marks\n(has some bugs in it)","451d6b1d":"**Task 103:**\n\nMissing Data:\nMake A'th 3rd coulmn Nan","675de960":"**Task 92:**\n    \nSum of all nan as list","a7cc2672":"**Task 73:**\n\nDrop first and last column","abea839a":"**Task 74:**\n\nDelete by pop function","fd516965":"**Task 5:**\n\nCreate Random integer between 0 to 100 ","00b7c059":"**Task 65:**\n\nargsort with stars        \nold stars (near by 50 age) argsort","04c72b3c":"**Task 37:**\n\nfilter with the value comparison","5b39a7c8":"**Task 19:**\n\nSkip multiple rows","6d102881":"****Task 1: **\n\nCheck Pandas Version ","f00f76c2":"**Task 75:**\n    \nDataFrame.from_items","228d02ed":"**Task 6:**\n\nCreate Random integer between 2 to 10 with 4 columns","ef695f67":"**Task 71:**\n\nDrop a column","e62df0e3":"**Task 61:**\n\nReplacing some values with mean of the rest of a group","32dd4331":"**Task 69:**\n\nRename columns","1f197e66":"**Task 83:**\n    \nSelecting multiple columns","8c0fd10f":"**Task 60:**\n\nCreating new Columns using Applymap\nSides & applymap","cf036be5":"**Task 102:**\n\nBasic group by","9a89868d":"**Task 96:**\n    \nGet group","69f07665":"**Task 91:**\n    \nSum of all nan rowwise","d54f00c6":"**Task 32:**\n\nget 3 and 4th row","a3b4211d":"**Task 15:**\n\nNew columns as sum of all","76b90175":"**Task 80:**\n\nPandas rows to map","db4c1968":"**Task 63:**\n   \npossible errors:\n            TypeError: 'Series' objects are mutable, thus they cannot be hashed"}}