{"cell_type":{"321b6706":"code","e61ccc76":"code","7a5f43e5":"code","9ff726f7":"code","2fdd9007":"code","a77a180e":"code","b9576685":"code","c4450fac":"code","16cf6c03":"code","5646e13c":"code","90ba74db":"code","b67a4b13":"code","fcceed81":"code","549204de":"code","66ecdbee":"code","e0b52f19":"code","dd669861":"code","3a491ab7":"code","af101d17":"code","67ff3c8d":"code","e0802876":"code","f891b495":"code","7537c437":"code","c66be658":"markdown","3a2e26f6":"markdown","2d9c8562":"markdown","6e9f76ed":"markdown","f1aceabf":"markdown","aa0d63a3":"markdown","9ffd1e1a":"markdown"},"source":{"321b6706":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e61ccc76":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7a5f43e5":"data = pd.read_csv(\"\/kaggle\/input\/mnistlike-dataset-squarecircletriangle\/train_data.csv\")\n\nprint(f\"data's shape: {data.shape}\")\ndata.head()","9ff726f7":"from PIL import Image\n\nfig = plt.figure(figsize=(5, 5))\n\nrows = 3\ncolumns = 3\n\nfor i in range(9):\n    j=np.random.randint(0,200)\n    fig.add_subplot(rows, columns, i+1)\n    img_arr=data.iloc[j,1:].values.reshape(28,28)\n    label=str(data.iloc[j,0])\n    plt.imshow(img_arr)\n    plt.axis('off')\n    plt.title(\"Label\"+' '+label)","2fdd9007":"X=data.iloc[:,1:].values.astype('float32')\ny=data.iloc[:,0].values.astype('int32')","a77a180e":"# Normalizing the data\nX \/=255.0\n\n# Reshaping from 784 to 28,28,1 for inputing into Conv2D\nX=X.reshape(-1,28,28,1)\nprint(f\"new shape of X: {X.shape}\")\n\n# One-Hot-Encoding of the label\nfrom keras.utils.np_utils import to_categorical\ny = to_categorical(y)","b9576685":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.1, random_state=42)","c4450fac":"from tensorflow import keras\n'''\nConv2D will read the shape of 4D dimension (num, height, weight, channels)\nMaxPooling2D will project it to lower dimension, to accerelate the process\nFlatten will reduce the size to 1D array\nDense is a normal neuron point\nDropout will throw away all the unneccesary neuron\n\n'''\nmodel = keras.models.Sequential([\n    keras.layers.Conv2D(filters=64, kernel_size=7, input_shape=[28, 28, 1]),\n    keras.layers.MaxPooling2D(pool_size=2),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.MaxPooling2D(pool_size=2),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding=\"SAME\"),\n    keras.layers.MaxPooling2D(pool_size=2),\n    keras.layers.Flatten(),\n    keras.layers.Dense(units=128, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(units=64, activation='relu'),\n    keras.layers.Dropout(0.5),\n    keras.layers.Dense(units=3, activation='softmax'),\n])\n\nmodel.summary()","16cf6c03":"model.compile(\n    optimizer=\"rmsprop\",\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","5646e13c":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss',patience=2)","90ba74db":"history = model.fit(\n    X_train,y_train,\n    validation_data=(X_valid,y_valid),\n    epochs=50,\n    callbacks=[early_stop]\n)","b67a4b13":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[0:, ['loss', 'val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","fcceed81":"history_df.loc[0:, ['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","549204de":"predictions = np.argmax(model.predict(X_valid), axis=-1)\nto_categorical(predictions)","66ecdbee":"labels=[\"circle\",\"triangle\",\"square\"]\ncoded_labels=['[1. 0. 0.]','[0. 1. 0.]','[0. 0. 1.]']\npred_labels=[0,1,2]\n\narr_lab=dict(zip(coded_labels, labels))\nint_lab=dict(zip(pred_labels, labels))","e0b52f19":"f, axs = plt.subplots(2,2,figsize=(11,11))\nfor i in range (0,9):\n    plt.subplot(3,3,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    img_nbr = np.random.randint(0,len(predictions))\n    plt.imshow(X_valid[img_nbr])\n    plt.title(\"True={}; Predicted={} \".format(\n         arr_lab[str(y_valid[img_nbr])],\n         int_lab[predictions[img_nbr]]\n        )\n    )","dd669861":"from sklearn.metrics import classification_report\nprint(classification_report(y_valid,to_categorical(predictions)))","3a491ab7":"test=pd.read_csv(\"\/kaggle\/input\/mnistlike-dataset-squarecircletriangle\/quiz_for_competition_r.csv\")\ntest.head()\ntest.shape","af101d17":"X_test=test.iloc[:,1:].values.astype('float32')","67ff3c8d":"# Normalizing the data\nX_test \/=255.0\n\n# Reshaping from 784 to 28,28,1 for inputing into Conv2D\nX_test=X_test.reshape(-1,28,28,1)","e0802876":"predictions = np.argmax(model.predict(X_test), axis=-1)\npredictions","f891b495":"sub=pd.DataFrame({\n    'Category': predictions\n})\nsub.index.name='ID'\nsub","7537c437":"sub.to_csv('submission1.csv')","c66be658":"### Importing libraries","3a2e26f6":"### Visualisation","2d9c8562":"### Dataset loading","6e9f76ed":"### Model Evaluation","f1aceabf":"### Generating the model","aa0d63a3":"### Data processing","9ffd1e1a":"### Submission"}}