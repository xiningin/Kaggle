{"cell_type":{"1a6522cd":"code","02391870":"code","3bf07def":"code","5de4bcee":"code","dade99c8":"code","109cb8fd":"code","1deb096e":"code","4d7ac350":"code","5b5a76ca":"code","6e41729b":"code","c5cde51d":"code","beac796a":"code","de0312ad":"code","12b1f8a5":"code","a11f9b39":"code","b5ce7220":"code","5551798c":"code","0e1a2c02":"code","b12883fc":"code","9b8fa8c7":"markdown","3a66f9f2":"markdown","97257c42":"markdown","3625993f":"markdown","d41a9884":"markdown","3f64984e":"markdown","bebcf827":"markdown","061e6a66":"markdown","ec754fd5":"markdown","10958221":"markdown","236e1aea":"markdown","7204d5ef":"markdown","17023711":"markdown","e99348e7":"markdown","7f289e87":"markdown"},"source":{"1a6522cd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom plotly.offline import init_notebook_mode , iplot , plot\nimport plotly as py\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go \n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","02391870":"timesData = pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")","3bf07def":"timesData.head()","5de4bcee":"timesData.info()","dade99c8":"# prepare data frame\ndf = timesData.iloc[:100,:]\n\n# import graph objecets as  \"go\"\n# \"go\" ile k\u00fct\u00fcphaneyi \u00e7a\u011f\u0131rd\u0131k\nimport plotly.graph_objs as go \n\n\ntrace1 = go.Scatter(\n                    x = df.world_rank,      # (x eksenine word_rank eklendi )\n                    y = df.citations,       # (y eksenine citations eklendi ) \n                    mode = \"lines\",         # lines => d\u00fcz \u00e7izgiler \n                    name = \"citations\",     # name => \u00e7izginin ad\u0131\n                    marker = dict(color = \"rgba(16,112,2,0.8)\"),   # \u00e7izginin rengi ve saydaml\u0131\u011f\u0131\n                    text = df.university_name)  # \u00e7izginin \u00fczerine geldi\u011fimiz zaman \u00fcniversitenin ad\u0131 yazacak\n\n\ntrace2 = go.Scatter(                 # Scatter kulland\u0131k \n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",   # noktal\u0131 \u00e7izgiler olu\u015fturduk\n                    name = \"teaching\",\n                    marker = dict(color = \"rgba(80,26,80,0.8)\"),\n                    text = df.university_name)\n\n\ndata = [trace1,trace2]   # iki scatteri birle\u015ftirdik , liste yapm\u0131\u015f olduk \n\nlayout = dict(title = \"Citation and Teaching vs World Rank of Top 100 Universities\", # tablonun ba\u015fl\u0131\u011f\u0131n\u0131 belirledik\n             xaxis = dict(title= \"World Rank\",ticklen=5,zeroline= False)   # x ekseni bilgisini ekledik ,ticklen = kal\u0131nl\u0131k \n             )\n\nfig = dict(data = data ,layout = layout)\niplot(fig)","109cb8fd":"# prepare data frame\n\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]  # 2014 y\u0131l\u0131 i\u00e7in ilk 100 \u00fcniversite al\u0131nd\u0131\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]  # 2015 y\u0131l\u0131 i\u00e7in ilk 100 \u00fcniversite al\u0131nd\u0131\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]  # 2016 y\u0131l\u0131 i\u00e7in ilk 100 \u00fcniversite al\u0131nd\u0131\n\n#import graph objects as \"go\"\n#tekrardan import edildi \nimport plotly.graph_objs as go\n\ntrace1 = go.Scatter(x = df2014.world_rank,y = df2014.citations,mode=\"markers\",name=\"2014\",  # Scatter  kullan\u0131ld\u0131 ,\n                    marker = dict(color =\"rgba(255,128,255,0.8)\"),text = df2014.university_name)  #  sadece noktal\u0131 g\u00f6sterim oldu\u011fu i\u00e7in markers kullan\u0131ld\u0131\n\ntrace2 = go.Scatter(x = df2015.world_rank,y = df2015.citations,mode=\"markers\",name=\"2015\",\n                    marker = dict(color =\"rgba(255,128,2,0.8)\"),text = df2015.university_name)\n\ntrace3 = go.Scatter(x = df2016.world_rank,y = df2016.citations,mode=\"markers\",name=\"2016\",\n                    marker = dict(color =\"rgba(0,255,200,0.8)\"),text = df2016.university_name)\n\n                    \ndata = [trace1,trace2,trace3]   # Scatterler liste haline getirildi\n                    \n                    \nlayout = dict(title = \"'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\",\n                     xaxis = dict(title = \"World Rank\", ticklen=5 ,zeroline= False),  # y ekseni i\u00e7in yaz\u0131\n                     yaxis = dict(title = \"Citation\",ticklen=5 ,zeroline= False)      # x ekseni i\u00e7in yaz\u0131\n             )\n    \n                    \nfig = dict(data = data , layout = layout)\niplot(fig)","1deb096e":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","4d7ac350":"data2014 = timesData[timesData.year == 2014].iloc[:3,:]  # ilk 3 \u00fcniversiteyi ald\u0131k\n\nimport plotly.graph_objs as go\n\ntrace1 = go.Bar(x = df2014.university_name,\n               y = df2014.citations,\n               name = \"citations\", # kutunun ad\u0131\n               marker = dict(color=\"rgba(255,174,255,0.5)\",  # kutunun rengi\n               line = dict(color = \"rgb(0,0,0)\",width=1.5)),\n               text = df2014.country)\n\n\ntrace2 = go.Bar(x = df2014.university_name,  # grafik tipi bar oldu\u011fu i\u00e7in mode \u00f6zelli\u011fi kullan\u0131lmad\u0131\n               y = df2014.teaching,\n               name = \"teaching\",    \n               marker = dict(color=\"rgba(255,255,128,0.5)\",\n               line = dict(color = \"rgb(0,0,0)\",width=1.5)), #barlar\u0131n \u00e7er\u00e7evesinin rengini ve kal\u0131nl\u0131\u011f\u0131n\u0131 belirliyor\n               text = df2014.country)  # grafi\u011fin \u00fcst\u00fcne geldi\u011fimiz zaman \u00f6zellikle \u00fcniversitenin hangi \u00fclkede oldu\u011funu belirten par\u00e7a \n\ndata = [trace1,trace2]\n\nlayout = go.Layout(barmode = \"group\")   # barmode ile kutular\u0131n grup\u00e7a durmas\u0131n\u0131 sa\u011flad\u0131k\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","5b5a76ca":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]\n\nx = df2014.university_name\n\ntrace1 = {\n    \"x\":x, \n    \"y\":df2014.citations,\n    \"name\":\"citation\",\n    \"type\": \"bar\"\n         };\n    \ntrace2 = {\n    \"x\" : x,\n    \"y\" : df2014.teaching,\n    \"name\" :\"teaching\",\n    \"type\":\"bar\"\n};\n\ndata = [trace1,trace2]\nlayout = {\"xaxis\":{\"title\":\"Top 3 university\"},\n         \"barmode\":\"relative\",  # veriler bar plot i\u00e7inde altl\u0131 \u00fcstl\u00fc g\u00f6z\u00fckecek\n         \"title\":\"citations and teaching of top 3 universities in 2014\"};\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","6e41729b":"from plotly import tools\n\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\n\ny_saving = [each for each in df2016.research]\ny_net_worth = [float(each) for each in df2016.income]\nx_saving = [each for each in df2016.university_name]\nx_net_worth = [each for each in df2016.university_name]\n\ntrace0 = go.Bar(\n                x = y_saving,\n                y = x_saving,\n                marker = dict(color=\"rgba(171,50,96,0.6)\",\n                             line = dict(color=\"rgba(171,50,96,1.0)\",\n                                        width = 1)),\n    name = \"research\",\n    orientation = \"h\", ) \n\ntrace1 = go.Scatter(\n                    x = y_net_worth,\n                    y = x_net_worth,\n                    mode = \"lines+markers\",\n                    line=dict(color=\"rgb(63,72,205)\"),\n                    name = \"income\")\nlayout = dict(\n                title=\"kflgmlfdgdfb\",\n                yaxis = dict(showticklabels=True,domain=[0,0.85]),\n                yaxis2 = dict(showline=True,showticklabels=False,linecolor=\"rgba(102,102,102,0.8)\",linewidth=2,domain=[0,0.85]),\n    \n                xaxis = dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0,0.42]),\n                xaxis2 = dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47,1],side=\"top\",dtick=25),\n    \n                legend = dict(x=0.029,y=1.038,font= dict(size = 10)),\n        \n                margin = dict(l=200,r=20,t=70,b=70),\n                paper_bgcolor = \"rgb(248,248,255)\",\n                plot_bgcolor = \"rgb(248,248,255)\",)\n\n\nannotations = []\n\ny_s = np.round(y_saving,decimals=2)\ny_nw = np.rint(y_net_worth)\n\nfor ydn, yd, xd in zip(y_nw,y_s,x_saving):\n    \n    annotations.append(dict(xref=\"x2\",yref=\"y2\",y=xd,x=ydn - 4,text = \"(:,)\".format(ydn),font=dict(family=\"Arial\",size=12,color=\"rgb(63,72,204)\"),\n                           showarrow = False))\n    \n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),\n                            showarrow=False))\n    \n\n    \nlayout[\"annotations\"] = annotations\n\nfig = tools.make_subplots(rows=1,cols=2,specs=[[{},{}]],shared_xaxes=True,\n                          shared_yaxes = False, vertical_spacing=0.001)\n\n\nfig.append_trace(trace0,1,1)\nfig.append_trace(trace1,1,2)\n\nfig[\"layout\"].update(layout)\niplot(fig)","c5cde51d":"# data preparation\n\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]  #ilk 7 veriyi ald\u0131k\n\npie1 = df2016.num_students\n\npie1_list = [float(each.replace(\",\",\".\")) for each in df2016.num_students]\n# num_students de\u011ferleri virg\u00fcl ile ondal\u0131klar\u0131 g\u00f6sterildi\u011fi i\u00e7in bunlar\u0131 noktaya \u00e7eviriyoruz \n# de\u011feri normalde object t\u00fcr\u00fcnde , floata \u00e7evirdik\n# str(2,4) => str(2.4) => float(2.4)\n\nlabels = df2016.university_name # ilk 7 \u00fcniversitenin sadece isimleri al\u0131nd\u0131\n\nfig = {\n    \n    \"data\":[\n        {\n            \"values\" : pie1_list,  # d\u00fczenledi\u011fimiz \u00f6\u011frenci numaralar\u0131\n            \"labels\" : labels,     # \u00fcniversite isimleri\n            \"domain\" : {\"x\" : [0,0.5]}, # ? \n            \"name\" : \"Number Of Students Rate\",\n            \"hoverinfo\" : \"label+percent\",  # fare ile \u00fcst\u00fcne gelinen b\u00f6l\u00fcm i\u00e7in \u00fcnversite ad\u0131 ve y\u00fczdelik ifadesi hakk\u0131nda bilgi veriyor\n            \"hole\" : 0.3,    # \u00e7ember i\u00e7indeki beyaz b\u00f6l\u00fcm , geri kalan b\u00f6l\u00fcm 0.7 ye denk geliyor\n            \"type\" : \"pie\",  # grafik t\u00fcr\u00fc belirlendi\n                             # grafik t\u00fcr\u00fc num_students de\u011ferlerini toplad\u0131 ve % lik olarak oranlad\u0131\n            \n        },\n    ],\n    \n    \"layout\" : {\n        \"title\" : \"Universities Number of Students rates\",  # genel ba\u015fl\u0131k \n        \"annotations\" : [\n            {\n                \"font\" : {\"size\" : 20},\n                \"showarrow\" : False,\n                \"text\": \"Number of Students\",  # alt ba\u015fl\u0131k ; b\u00fcy\u00fckl\u00fc\u011f\u00fc , x ve y konumu belirlendi\n                \"x\" : 0.3,\n                \"y\" : 1.1,\n            }\n        ]\n    }\n}\n\niplot(fig)","beac796a":"# data preparation \n\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]  # ilk 20 \u00fcniversiteyi ald\u0131k\n\nnum_student_size = [float(each.replace(\",\",\".\")) for each in df2016.num_students]  \n\ninternational_color = [float(each) for each in df2016.international] # renkleri , international s\u00fctununa oranlad\u0131k\n\ndata = [\n    {\n        \"y\" : df2016.teaching,\n        \"x\" : df2016.world_rank,\n        \"mode\" : \"markers\",\n        \"marker\" : {\n            \"color\" : international_color,\n            \"size\" : num_student_size,\n            \"showscale\" : True\n        },\n        \"text\" : df2016.university_name\n    }\n]\niplot(data)","de0312ad":"# prepara data \n\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]  # 2011 ve 2012 y\u0131llar\u0131n\u0131 ald\u0131k\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(  # grafik t\u00fcr\u00fcn\u00fc belirledik\n    x = x2011,\n    opacity = 0.75, # saydaml\u0131k \n    name = \"2011\",\n    marker = dict(color = \"rgba(171,50,96,0.6)\"))\n\ntrace2 = go.Histogram(\n    x = x2012,\n    opacity = 0.75,\n    name = \"2012\",\n    marker = dict(color = \"rgba(12,50,196,0.6)\"))\n\ndata = [trace1 , trace2]\n\nlayout = go.Layout(barmode = \"overlay\",  # overlay ile histogramlar\u0131 \u00fcst \u00fcste bindirildi\n                  title = \"students-staff ratio in 2011 and  2012\",\n                  xaxis = dict(title = \"students-staff ratio\"),\n                  yaxis = dict(title = \"Count\"),\n                  )\n\nfig = go.Figure(data = data , layout = layout)\niplot(fig)","12b1f8a5":"# wordcloud k\u00fct\u00fcphanesini en \u00fcstte ekledim\n\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                        background_color=\"White\",\n                        width = 512,\n                        height = 384,\n).generate(\" \".join(x2011))  # ???\n\nplt.imshow(wordcloud)\nplt.axis(\"off\")   #x ve y eksenlerini kaybettiriyor\nplt.savefig(\"graph.png\") # ???\n\nplt.show()","a11f9b39":"# data preparation \n\nx2015 = timesData[timesData.year == 2015]\n\ntrace00 = go.Box(\n    y = x2015.total_score,  # 2015 senesinin total_score verilerini ald\u0131k\n    name = \"total score of universities in 2015\",\n    marker = dict(\n        color = \"rgb(12,12,140)\",\n    )\n)\n\ntrace11 = go.Box(\n    y = x2015.research, # 2015 senesinin research verilerini ald\u0131k\n    name = \"research of universities in 2015\",\n    marker = dict(\n        color = \"rgb(12,128,128)\",\n    )\n)\ndata = [trace00,trace11]\n\niplot(data)\n\n","b5ce7220":"# import figure factory\n\nimport plotly.figure_factory as ff \n\n#prepare data\n\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\",\"total_score\"]]  # sadece bu s\u00fctunlar al\u0131nd\u0131\ndata2015[\"index\"] = np.arange(1,len(data2015) + 1)  # eleman say\u0131s\u0131 kadar index de\u011ferimiz oluyor\n\n#scatter matrix\n\nfig = ff.create_scatterplotmatrix(data2015, diag = \"box\", # box plot \n                                  index = \"index\",\n                                  colormap = \"Portland\",  # maviden k\u0131rm\u0131z\u0131ya giden renk paleti\n                                 colormap_type = \"cat\",   # da\u011f\u0131l\u0131m grafi\u011finin renk t\u00fcr\u00fc\n                                 height = 700 , width = 700)\n\niplot(fig)\n","5551798c":"# firs line plot\n\ntrace1 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = \"rgba(16,112,2,0.8)\"),\n)\n\n#second line plot\n\ntrace2 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.income,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    name = \"income\",\n    marker = dict(color = \"rgba(160,112,20,0.8)\"),\n)\n\ndata = [trace1,trace2]\n\nlayout = go.Layout(  \n    xaxis2 = dict(\n        domain = [0.4,1],  # k\u00fc\u00e7\u00fck grafi\u011fin kordinatlar\u0131 ile alakal\u0131\n        anchor = \"y2\",\n    ),\n    yaxis2=dict(\n        domain=[0.8, 1],   # k\u00fc\u00e7\u00fck grafi\u011fin kordinatlar\u0131 ile alakal\u0131\n        anchor='x2',\n    ),\n    \n    title = \"Income and Teaching vs World Rank of Universities\"\n)\nfig = go.Figure(data = data,layout = layout)\niplot(fig)\n\n\n","0e1a2c02":"# create trace 1 that is 3D scatter\n\ntrace1 = go.Scatter3d(\n    x = dataframe.world_rank,\n    y = dataframe.research,\n    z = dataframe.citations,\n    mode = \"markers\",  # nokta g\u00f6sterimli grafik\n    marker = dict(color = \"rgb(255,0,0)\")\n)\ndata = [trace1]\nlayout = go.Layout(\n    margin = dict(  # kenardan b\u0131rak\u0131lan bo\u015fluklar\n    l = 0,\n    r = 0,\n    b = 0,\n    t = 0,\n    )\n)\n\nfig = go.Figure(data = data , layout = layout)\niplot(fig)","b12883fc":"\ntrace1  = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.research,\n    name = \"research\")\n\ntrace2 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.citations,\n    xaxis = \"x2\",\n    yaxis = \"y2\",\n    name = \"citations\")\n\ntrace3 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.income,\n    xaxis = \"x3\",\n    yaxis = \"y3\",\n    name = \"income\")\n\ntrace4 = go.Scatter(\n    x = dataframe.world_rank,\n    y = dataframe.total_score,\n    xaxis = \"x4\",\n    yaxis = \"y4\",\n    name = \"total_score\")\n\ndata = [trace1,trace2,trace3,trace4]\n\nlayout = go.Layout(\n    xaxis = dict(\n        domain = [0,0.45]\n    ),\n    yaxis = dict(\n        domain = [0,0.45]\n    ),\n    xaxis2 = dict(\n        domain = [0.55,1]\n    ),\n    xaxis3 = dict(\n        domain = [0,0.45],\n        anchor = \"y3\"\n    ),\n    xaxis4 = dict(\n        domain = [0.55,1],\n        anchor = \"y4\"\n    ),\n    yaxis2 = dict(\n        domain = [0,0.45],\n        anchor = \"x2\"\n    ),\n    yaxis3 = dict(\n        domain = [0.55,1] \n    ),\n    yaxis4 = dict(\n        domain = [0.55,1],\n        anchor = \"x4\"\n    ),\n    title = \"Research, citation, income and total score VS World Rank of Universities\"\n)\nfig = go.Figure(data = data, layout = layout)\niplot(fig)\n","9b8fa8c7":"## Bar Charts  (\u00c7ubuk Grafikler)\n\n* Import graph_objs as go\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary.\n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","3a66f9f2":"# Loading Data And Explanation Of Features \n# Veri Y\u00fckleme ve \u00d6zelliklerin A\u00e7\u0131klamas\u0131\n\n* timesData includes 14 features that are:  (timesData a\u015fa\u011f\u0131daki 14 \u00f6zelli\u011fi i\u00e7erir:)\n\n * world_rank (D\u00fcnya s\u0131ralamas\u0131)\n * university_name (\u00dcniversite ad\u0131)\n * country (\u00dclke)\n * teaching (\u00d6\u011fretim)\n * international (Uluslararas\u0131)\n * research (Ara\u015ft\u0131rma)\n * citations (Al\u0131nt\u0131lar)\n * income (Gelir)\n * total_score (Toplam Puan)\n * num_students (\u00d6\u011frenci Say\u0131s\u0131)\n * student_staff_ratio (\u00d6\u011frenci Personel Oran\u0131)\n * international _student (Uluslararas\u0131 \u00d6\u011frenciler)\n * female_male_ratio (Kad\u0131n Erkek Oran\u0131)\n * year (Y\u0131l)\n","97257c42":"## Scatter Plot (Da\u011f\u0131l\u0131m Grafi\u011fi)\n\nScatter Example : Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\n\n* Import graph_objs as go\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary.\n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","3625993f":"## 3D Scatter Plot With Colorscaling (Renk \u00d6l\u00e7ekleme ile 3D Da\u011f\u0131l\u0131m Grafi\u011fi)\n\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n\n(3D Da\u011f\u0131l\u0131m: Bazen 2D, verileri anlamak i\u00e7in yeterli de\u011fildir. Bu nedenle, bir boyut daha eklemek verilerin anla\u015f\u0131l\u0131rl\u0131\u011f\u0131n\u0131 art\u0131r\u0131r. Hatta asl\u0131nda 4. boyut olan rengi de ekleyece\u011fiz.)\n\n* go.Scatter3d: create 3d scatter plot  (3d da\u011f\u0131l\u0131m grafi\u011fi olu\u015ftur)\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale (renkli \u00f6l\u00e7ek ekseni)\n* colorscale: actually it is 4th dimension (asl\u0131nda 4. boyut)","d41a9884":"## Word Cloud (Kelime Bulutu)\n\nNot a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in 2011.\n\n* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the country name list(x2011) a word cloud","3f64984e":"Third Bar Charts Example: Horizontal bar charts. (style3) Citation vs income for universities\n\n\n* Import graph_objs as go and importing tools\n    * Tools: used for subplots\n* Creating trace1\n    * bar: bar plot\n        * x = x axis\n        * y = y axis\n        * marker\n            * color: color of bars\n            * line: bar line color and width\n        * name: name of bar\n        * orientation: orientation like horizontal\n            * creating trace2\n            * scatter: scatter plot\n                * x = x axis\n                * y = y axis\n                * mode: scatter type line line + markers or only markers\n                * line: properties of line\n                    * color: color of line\n                * name: name of scatter plot\n* layout: axis, legend, margin, paper and plot properties ","bebcf827":"## Histogram \n\nLets look at histogram of students-staff ratio in 2011 and 2012 years.\n\n* trace1 = first histogram\n    * x = x axis\n    * y = y axis\n    * opacity = opacity of histogram\n    * name = name of legend\n    * marker = color of histogram\n* trace2 = second histogram\n* layout = layout\n    * barmode = mode of histogram like overlay. Also you can change it with stack","061e6a66":"## Line Charts (\u00c7izgi Grafikler) \n\nLine Charts Example : Citation and Teaching vs World Rank of Top 100 University\n(\u00c7izgi Grafik \u00d6rne\u011fi: At\u0131f ve \u00d6\u011fretim - \u0130lk 100 \u00dcniversitenin D\u00fcnya S\u0131ralamas\u0131)\n\n* import graph _objs as go \n* Creating traces (\n    * x = x axis  (x ekseni)\n    * y = y axis  (y ekseni)\n    * mode = types of plot like marker , line or line + markers \n    * name = name of the plots\n    * marker = marker is used with dictionary \n        * color = color of line. It takes RGB and opacity(alpha)  (renk ve saydaml\u0131k)\n    * text = the hover text (hover is curser)  (grafi\u011fin \u00fczerine geldi\u011fimizde ne t\u00fcr yaz\u0131 g\u00f6rmek istiyoruz)\n    \n* data = is a list that we add traces into it \n* layout = it is dictionary \n    * title = title of layout \n    * x axis = it is dictionary \n        * title = label of x axis \n        * ticklen = length of x axis ticks \n        * zeroline = showing zero line or not \n* fig = it includes data and layout \n* implot() = plots the figure(fig) that is created by data and layout ","ec754fd5":"## Scatter Matrix Plots (Da\u011f\u0131l\u0131m Matrisi Grafikleri)\n\n\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n(Da\u011f\u0131l\u0131m Matrisi = 2'den fazla \u00f6zellik aras\u0131ndaki kovaryans\u0131 ve ili\u015fkiyi g\u00f6rmemize yard\u0131mc\u0131 olur)\n\n* import figure factory as ff\n* create_scatterplotmatrix = creates scatter plot (da\u011f\u0131l\u0131m grafi\u011fi olu\u015fturur)\n    * data2015 = prepared data. It includes research, international and total scores with index from 1 to 401\n    * (data2015 = haz\u0131rlanm\u0131\u015f veriler. 1'den 401'e kadar indeksli ara\u015ft\u0131rma, uluslararas\u0131 ve toplam puanlar\u0131 i\u00e7erir.)\n    * colormap = color map of scatter plot  (da\u011f\u0131l\u0131m grafi\u011finin renk haritas\u0131)\n    * colormap_type = color type of scatter plot  (da\u011f\u0131l\u0131m grafi\u011finin renk t\u00fcr\u00fc)\n    * height and weight (y\u00fckseklik ve a\u011f\u0131rl\u0131k)","10958221":"Second Bar Charts Example: citations and teaching of top 3 universities in 2014 (style2)\nActually, if you change only the barmode from group to relative in previous example, you achieve what we did here. However, for diversity I use different syntaxes.","236e1aea":"## Bubble Charts  (Kabarc\u0131k Grafikleri)\n\nBubble Charts Example: University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016\n\n* x = x axis\n* y = y axis\n* mode = markers(scatter)\n* marker = marker properties\n    * color = third dimension of plot. Internaltional score\n    * size = fourth dimension of plot. Number of students\n* text: university names","7204d5ef":"## Inset Plot (Ekli K\u00fc\u00e7\u00fck Resim Grafi\u011fi)\n\nInset Matrix = 2 plots are in one frame  (Inset Matrix = 2 grafik tek \u00e7er\u00e7evede)\n\n","17023711":"## Pie Charts (Pasta grafikler)\n\nPie Charts Example : Students rate of top 7 university in 2016\n(Pasta Grafikleri \u00d6rne\u011fi: 2016'da en iyi 7 \u00fcniversitenin \u00f6\u011frenci oran\u0131)\n\n* fig: create figures (rakamlar olu\u015ftur)\n    * data: plot type\n        * values: values of plot\n        * labels: labels of plot\n        * name: name of plots\n        * hoverinfo: information in hover\n        * hole: hole width\n        * type: plot type like pie\n    * layout: layout of plot\n        * title: title of layout\n        * annotations: font, showarrow, text, x, y\n","e99348e7":"## Multiple Subplots  (\u00c7oklu Alt Noktalar)\n\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n\n\u00c7oklu Alt Grafikler: Birden fazla \u00f6zelli\u011fi kar\u015f\u0131la\u015ft\u0131r\u0131rken, birden \u00e7ok alt grafik yararl\u0131 olabilir.\n","7f289e87":"## Box Plots  (Kutu Grafikleri)\n\nBox Plots\n\n* Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are   less that median(50th quartile)(quartile)\n\n    * 25th percentile = quartile 1 (Q1) that is lower quartile\n    * 75th percentile = quartile 3 (Q3) that is higher quartile\n    * height of box = IQR = interquartile range = Q3-Q1\n    * Whiskers = 1.5 * IQR from the Q1 and Q3\n    * Outliers = being more than 1.5*IQR away from median commonly.\n\n* trace = box\n    * y = data we want to visualize with box plot\n    * marker = color"}}