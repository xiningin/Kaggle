{"cell_type":{"8b472457":"code","9d496577":"code","238f7236":"code","41cb3d00":"code","df2d3fcc":"code","f65e7555":"code","517f7e4c":"code","b17a36e0":"code","eb5a743e":"code","2f4bfc64":"code","fac8ab00":"code","492f6668":"code","63d9e230":"code","dd24df6c":"code","3b10c894":"code","d0aecfab":"code","437753b6":"code","1d85b0aa":"code","629e66d8":"code","d07637df":"code","28cf2d99":"code","95bd1c9d":"code","2449881d":"code","ab3c540a":"code","ea443bd8":"code","4cfc5b48":"code","39c3e733":"code","53c42126":"code","4760b8a7":"code","e6d06405":"code","5487fc17":"code","8439855f":"code","a1cec0df":"code","7e4b9ef9":"code","dd56421d":"code","55797f83":"code","4511217a":"code","6dc85773":"code","e8f6c858":"code","77d4cfe6":"code","976f50a0":"code","8e1fdb1a":"code","74756fd8":"code","21514f08":"code","20cc457c":"code","fc3e0022":"code","d8d72c30":"code","5384e18c":"code","6d3d5c42":"code","5de28dd9":"code","2fbbfbc3":"code","c38bf32c":"code","9c842771":"code","b5a4435d":"markdown","b91a0300":"markdown","028e4742":"markdown","b107f11c":"markdown","b5f2e113":"markdown","be35c77e":"markdown","3d900c6c":"markdown","bc22d9e3":"markdown","e52329bc":"markdown","ec916379":"markdown","743716f6":"markdown","1fc3d6dc":"markdown","f3547cce":"markdown","780b68b2":"markdown","b07f1b48":"markdown","807eae26":"markdown","73426ffe":"markdown","12ff7c61":"markdown","617e0030":"markdown","cad6684e":"markdown","6792dc58":"markdown","5f6b1cb5":"markdown","b7f91ede":"markdown","fb1f0946":"markdown","bd56e159":"markdown","068a3dd0":"markdown","48143cbd":"markdown","4e039921":"markdown","6fd2e316":"markdown","b36a959e":"markdown","6c550f84":"markdown","38d6b93c":"markdown","5bc2019e":"markdown","72a25baa":"markdown","2f92c378":"markdown","0a800c57":"markdown","bde10f69":"markdown","13e01f67":"markdown","3858434c":"markdown"},"source":{"8b472457":"# Importing relevant libraries \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport datetime","9d496577":"# Importing the data for setting up the analysis\n\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/train.csv\")","238f7236":"train.head()\ntrain.info()\ntrain.shape","41cb3d00":"# Exploring the distribution of SalePrice\nplt.style.use('ggplot')\nplt.figure(figsize=(12,7))\nsns.distplot(train.SalePrice, bins=20)\nplt.ticklabel_format(axis='x', style='sci', scilimits=(0,1))\nplt.ylabel(\"Number of Houses\")\nplt.xlabel(\"Price of Houses\")\nplt.show()","df2d3fcc":"train.SalePrice.skew()","f65e7555":"#Log transforming the SalePrice for making the distribution more Normal\ntrain.SalePrice = np.log(train.SalePrice)\ntrain.SalePrice.skew()","517f7e4c":"# Exploring the distribution of SalePrice after log transformation\nplt.style.use('ggplot')\nplt.figure(figsize=(12,7))\nsns.distplot(train.SalePrice, bins=20)\nplt.ticklabel_format(axis='x', style='sci', scilimits=(0,1))\nplt.ylabel(\"Number of Houses\")\nplt.xlabel(\"Price of Houses\")\nplt.show()","b17a36e0":"# Understanding the Split of Different Data Types of the Feature Variables\ntrain.dtypes.value_counts()","eb5a743e":"num_features = train.select_dtypes(include=[np.number])\nnum_features.dtypes\nnum_list = num_features.columns\nprint(num_list)","2f4bfc64":"corr = num_features.corr()\nfig, ax = plt.subplots(figsize=(12,8))\nsns.heatmap(corr, square=True)","fac8ab00":"corr1 = num_features[['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea']].corr()\nsns.heatmap(corr1, annot=True, annot_kws={'size':8})","492f6668":"sns.pairplot(num_features[['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea']])\nplt.show()","63d9e230":"# Distribution of Year and effect of YearBuilt on SalePrice\nplt.figure(figsize=(20,15))\nsns.jointplot('YearBuilt','SalePrice', data=num_features, alpha=0.5, color='purple')\nplt.show()","dd24df6c":"# Plot of Garage built year with House Built Year\nplt.figure(figsize=(12,7))\nplt.plot(num_features.YearBuilt, num_features.GarageYrBlt, '.', alpha=0.4)\nplt.xlabel('House Year Built')\nplt.ylabel('Garage Year Built')\nplt.show()","3b10c894":"sns.lmplot('MasVnrArea', 'SalePrice', data=num_features, palette='muted', scatter_kws={\"s\":30})\nplt.xlabel(\"Masonry Veneer Area\")\nplt.show()","d0aecfab":"cat_features = train.select_dtypes(include=[object])\ncat_features.dtypes","437753b6":"# Values of different categorical feqatures and their counts\nmelted = cat_features.melt(var_name='Cat_Features', value_name='Feature Values')\nmelted.groupby(['Cat_Features', 'Feature Values']).size()","1d85b0aa":"plt.figure(figsize=(15,7))\nsns.swarmplot('Neighborhood', 'SalePrice', data=train, order = np.sort(train.Neighborhood.unique()))\nplt.xticks(rotation=45)\nplt.show()","629e66d8":"cat_features.Neighborhood.value_counts()","d07637df":"plt.figure(figsize=(15,7))\nsns.stripplot('Heating', 'SalePrice', data=train, order = np.sort(train.Heating.unique()))\nplt.xticks(rotation=45)\nplt.show()","28cf2d99":"plt.figure(figsize=(15,7))\nsns.boxplot('GarageType', 'SalePrice', data=train)\nplt.xticks(rotation=45)\nplt.show()","95bd1c9d":"plt.figure(figsize=(15,7))\nsns.boxplot('FireplaceQu', 'SalePrice', data=train)\nplt.xticks(rotation=45)\nplt.show()","2449881d":"plt.figure(figsize=(15,7))\nsns.violinplot('BsmtQual', 'SalePrice', data=train)\nplt.xticks(rotation=45)\nplt.show()","ab3c540a":"plt.figure(figsize=(15,7))\nsns.violinplot('Exterior1st', 'SalePrice', data=train)\nplt.xticks(rotation=45)\nplt.show()","ea443bd8":"train['Source'] = 'train'\ntest['Source'] = 'test'\ncombined = pd.concat([train, test], ignore_index=True, sort=False)\nprint(train.shape, test.shape, combined.shape)","4cfc5b48":"# Normalizing outliers in GarageArea\nGarageArea_mean = combined.GarageArea.mean()\nfunc = lambda x: x.GarageArea > 1250 and GarageArea_mean or x.GarageArea\ncombined.GarageArea = combined.apply(func, axis=1).astype(float)","39c3e733":"# Normalizing outlier in GrLivArea\nGrLivArea_mean = combined.GrLivArea.mean()\nfunc = lambda x: x.GrLivArea > 4000 and GrLivArea_mean or x.GrLivArea\ncombined.GrLivArea = combined.apply(func, axis=1).astype(float)","53c42126":"print('Original missing value:', format(combined.isnull().sum().sum()))","4760b8a7":"# % of Null values in each feature variable\nnull_values = combined.isnull().sum() \/ combined.shape[0] * 100\n# features having more than \nnull_values[null_values > 50]","e6d06405":"combined.drop(['Alley', 'PoolQC', 'Fence', 'MiscFeature'], axis=1, inplace=True)","5487fc17":"null_values = combined.isnull().sum() \/ combined.shape[0] * 100\n#features with 0 to 50% missing values\nnull50 = null_values[(null_values > 0) & (null_values < 50)]","8439855f":"#filtering only categorical features in null50\n[x for x in null50.index if x not in num_list]","a1cec0df":"cat_feat = ['MSZoning', 'Utilities', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'SaleType']\ncombined.update(combined[cat_feat].fillna(combined[cat_feat].mode().iloc[0]))","7e4b9ef9":"# filtering only numerical features in null50\n[x for x in null50.index if x in num_list]","dd56421d":"combined.update(combined[['LotFrontage',\n 'MasVnrArea',\n 'BsmtFinSF1',\n 'BsmtFinSF2',\n 'BsmtUnfSF',\n 'TotalBsmtSF',\n 'BsmtFullBath',\n 'BsmtHalfBath',\n 'GarageCars',\n 'GarageArea',]].fillna(0))","55797f83":"combined.update(combined['GarageYrBlt'].fillna(combined.YearBuilt))","4511217a":"print('Final missing value:', format(combined.isnull().sum().sum()))","6dc85773":"cat_features.columns","e8f6c858":"combined.LotShape.replace({'IR3':0, 'IR2':1, 'IR1':2, 'Reg':3}, inplace=True)\ncombined.MSZoning.replace({'IR3':0, 'IR2':1, 'IR1':2, 'Reg':3}, inplace=True)\ncombined.ExterQual.replace({'Gd':2, 'TA':1, 'Ex':2, 'Fa':0}, inplace=True)\ncombined.ExterCond.replace({'TA':2, 'Gd':3, 'Fa':1, 'Po':0, 'Ex':4}, inplace=True)\ncombined.BsmtQual.replace({'Gd':2, 'TA':1, 'Ex':3, 'Fa':0}, inplace=True)\ncombined.BsmtCond.replace({'Gd':3, 'TA':2, 'Po':0, 'Fa':1}, inplace=True)\ncombined.BsmtExposure.replace({'No':0, 'Gd':3, 'Mn':1, 'Av':2}, inplace=True)\ncombined.BsmtFinType1.replace({'GLQ':5, 'ALQ':4, 'Unf':0, 'Rec':2, 'BLQ':3, 'LwQ':1}, inplace=True)\ncombined.BsmtFinType2.replace({'GLQ':5, 'ALQ':4, 'Unf':0, 'Rec':2, 'BLQ':3, 'LwQ':1}, inplace=True)\ncombined.HeatingQC.replace({'Ex':4, 'Gd':3, 'TA':2, 'Fa':1, 'Po':0}, inplace=True)\ncombined.CentralAir.replace({'Y':1, 'N':0}, inplace=True)\ncombined.KitchenQual.replace({'Gd':2, 'TA':1, 'Ex':3, 'Fa':0}, inplace=True)\ncombined.Functional.replace({'Typ':6, 'Min1':5, 'Maj1':2, 'Min2':4, 'Mod':3, 'Maj2':1, 'Sev':0}, inplace=True)\ncombined.FireplaceQu.replace({'Gd':3, 'TA':2, 'Fa':1, 'Ex':4, 'Po':0}, inplace=True)\ncombined.GarageFinish.replace({'RFn':1, 'Unf':0, 'Fin':2}, inplace=True)\ncombined.GarageQual.replace({'TA':2, 'Fa':1, 'Gd':3, 'Ex':4, 'Po':0}, inplace=True)\ncombined.GarageCond.replace({'TA':2, 'Fa':1, 'Gd':3, 'Ex':4, 'Po':0}, inplace=True)\ncombined.PavedDrive.replace({'Y':2, 'N':0, 'P':1}, inplace=True)\n","77d4cfe6":"#One Hot Encoding of Categorical Features which are nominal\ncat1 = ['MSZoning', 'RoofMatl', 'Street', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood','Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'Heating', 'Electrical', 'GarageType', 'SaleType', 'SaleCondition']\ndfcat_onehot = combined[cat1]\ncat_onehot = pd.get_dummies(dfcat_onehot, drop_first=True)","976f50a0":"combined.drop(cat1, axis=1, inplace=True)","8e1fdb1a":"combined = pd.concat([combined, cat_onehot], axis=1)","74756fd8":"combined.drop(['GarageArea', 'TotRmsAbvGrd', '1stFlrSF', 'GarageYrBlt'], axis=1, inplace=True)","21514f08":"#drop the ID column\ncombined.drop('Id', axis=1, inplace=True)","20cc457c":"combined.dtypes.value_counts()","fc3e0022":"train1 = combined.loc[combined.Source == 'train']\ntest1 = combined.loc[combined.Source == 'test']","d8d72c30":"target = train1['SalePrice']","5384e18c":"train1.drop(['Source', 'SalePrice'], axis=1, inplace=True)\ntest1.drop(['Source', 'SalePrice'], axis=1, inplace=True)","6d3d5c42":"train_df = train1\ntest_df = test1","5de28dd9":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\nX = train_df\ny = target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nreg = LinearRegression()\nreg.fit(X_train, y_train)\ny_pred = reg.predict(X_test)\nprint(reg.score(X_test, y_test))\nprint(mean_squared_error(y_test, y_pred))","2fbbfbc3":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\nreg1 = LinearRegression()\nreg1.fit(train_df, target)\ny_pred1 = reg1.predict(test_df)\nlreg_ex = np.exp(y_pred1)\n","c38bf32c":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'alpha': np.linspace(0, 1, 2000)}\nfeats = train_df.columns\nlasso = Lasso(max_iter=100000)\ngm_cv = GridSearchCV(lasso, param_grid, cv=5)\ngm_cv.fit(train_df, target)\ny_pred2 = gm_cv.predict(test_df)\nprint(gm_cv.best_params_)\nprint(gm_cv.best_score_)\nlasso_exp = np.exp(y_pred2)\n","9c842771":"from sklearn.linear_model import ElasticNet\n\nl1_space = np.linspace(0, 1, 1000)\nparam_grid2 = {'l1_ratio': l1_space}\nelastic_net = ElasticNet()\ngm_cv2 = GridSearchCV(elastic_net, param_grid2, cv=5)\ngm_cv2.fit(train_df, target)\ny_pred3 = gm_cv2.predict(test_df)\nprint(gm_cv2.best_params_)\nprint(gm_cv2.best_score_)\nelastic_exp = np.exp(y_pred3)\n","b5a4435d":"Let's explore the numerical features and Categorical Features separately and their effects on SalePrice","b91a0300":"# Model Building","028e4742":"The above categorical features are common to any house hold. Hence, the missing values may randomly missing. Therefore let us fill them with the mode.","b107f11c":"From the above plots on categorical features, it is clear that the different categories in categorical features impact the Sale price of the houses.","b5f2e113":"This model explains 86% of the variance in the SalePrice of the houses and has a MSE of 0.0234","be35c77e":"Cleaning the Null and Missing Values","3d900c6c":"We shall combine the train set and test set together so that we don't have to separately clean them. \nIn order to split them later for modelling, we shall assign the sourch of each observation.","bc22d9e3":"Let's first encode the ordinal features to numerics in the dataset.","e52329bc":"Now that the missing values are cleared, let's encode the object data with numeric data since Sklearn regression techniques doesn't accept objects and strings as input.","ec916379":"Features with least correlation with SalePrice and hence to be discarded: (EnclosedPorch, KitchenAbvGr, MiscVal, OverallCond, BsmtFinSF2, BedroomAbvGr, BsmtHalfBath, 3SsnPorch, ScreenPorch, PoolArea)","743716f6":"Now, let us deal with the missing values in numerical features.","1fc3d6dc":"# ElasticNet Regression with Hyperparameter Tuning","f3547cce":"The preprocessed dataset is ready for building the model. Let us split the train and test model and make it ready for model building.","780b68b2":"Lets look at the correlation of different variables with SalePrice.","b07f1b48":"Since as per Kaggle, all the houses are necessary for modelling we will normalize the ourliers with respective mean values","807eae26":"Cleaning the Outlier Values in Numerical Features","73426ffe":"Data Exporting","12ff7c61":"We missed dropping the highly correlated features 'GarageArea', 'TotRmsAbvGrd', '1stFlrSF' and 'GarageYrBlt'. Let's drop them.","617e0030":"Visual EDA of Other Numerical Features","cad6684e":"From the above plots, is is understandable that GarageArea and GrLivArea have outlier values which are to be cleaned during data-preprocessing.","6792dc58":"# EDA of Numerical Features","5f6b1cb5":"The Straight line shows that for those houses the garage was built along when the house was built","b7f91ede":"# Data Preprocessing","fb1f0946":"Now, in Data preprocessing we will clean the data for null values, remove the outliers and encode the categorical features for the data to be ready for Predictive modeling","bd56e159":"# LASSO Regression and Hyperparameter Tuning","068a3dd0":"# Linear Regression","48143cbd":"Except for GarageYrBlt and SalePrice the missing values in the numerical features are most likely because those features are not available. Hence we can impute those features with 0. ","4e039921":"GarageYrBlt is having missing values probably because the houses doesn't have garages. However since there is no other way to impute the year we will assume that the Year the house was built is same as year the garage was built for missing values.","6fd2e316":"Let us first impute the null values in categorical features","b36a959e":"Features Alley, PoolQC, Fence and MiscFeatures have more than 80% of the data with missing values. Therefore, let's discard these features from the dataset.","6c550f84":"Based on intuition let's pickup the 5 most important categorical features and analyse their effect on SalePrice","38d6b93c":"There are a few light colored boxes which are outstanding and indicate high correlation between each other. One of these two variables can be removed for since they represent double count and doesn't have much impact in the prediction model.\nBelow are the variables with high correlation.\n(GarageCars, GarageArea)\n(GrLivArea, TotRmsAbvGrd)\n(TotalBsmtSF, 1stFlrSF)\n(GarageYrBlt, YearBuilt)\nOne of these can be removed.","5bc2019e":"There are 37 numeric features (excluding SalePrice) and 43 Objects.","72a25baa":"To start with let's study the correlation between different numerical variables","2f92c378":"# EDA - Categorical Feature Variables","0a800c57":"SalePrice: OverallQual, GrLivArea, GarageCars, GarageArea\nLets see the correlation coefficient values for these.","bde10f69":"Corrlation Mapping is the easiest first step towards studying the relationship between different variables in the dataset","13e01f67":"# Exploratory Data Analysis (EDA)","3858434c":"It can be interpretted from the correlation matrix that the below numeric feature variables have high correlation with SalePrice."}}