{"cell_type":{"fa390f01":"code","039436a1":"code","e7452427":"code","caf5e6a1":"code","7b5b3615":"code","16eaf727":"code","2f80195d":"code","d806d053":"code","ac8de58d":"code","f48e1c83":"code","5a3d804a":"code","12a73acf":"code","111e1a0f":"code","3c3886e2":"code","14934a2f":"code","6e9ea6d9":"code","690f7f0c":"code","48d3d2d5":"code","a8e5d770":"code","b3f04d9b":"code","586791d7":"code","bf1bec2f":"code","801090d5":"code","dfd31d93":"code","a181ca8f":"code","9e559524":"code","df2f2ee6":"code","de3c956f":"code","0646d2ec":"code","7d4268ba":"code","ed01c9a1":"markdown","abe30c04":"markdown","a9238926":"markdown","21525e8a":"markdown","bf43bda3":"markdown","425162fc":"markdown","e72dfe3d":"markdown","3caf899d":"markdown","a88e5be3":"markdown","3baa68d1":"markdown","2550dc90":"markdown","fc85884e":"markdown","e5ac8735":"markdown","eab188f2":"markdown","3ae0621e":"markdown","a775e440":"markdown","9de854b3":"markdown","3b5ac6d2":"markdown","7487b1fa":"markdown","64537d6a":"markdown","5b27976b":"markdown","d140e4ab":"markdown","c73b8eba":"markdown","ad12ad63":"markdown","96abee9b":"markdown","cf3e1a37":"markdown","3b8302be":"markdown","624446f7":"markdown","9014d8fa":"markdown","cfd7ab4c":"markdown","4b4a5a02":"markdown"},"source":{"fa390f01":"import pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom datetime import datetime\nimport plotly.offline as pyoff\nimport plotly.graph_objs as go\nimport plotly.express as px\n#initiate visualization library for jupyter notebook \npyoff.init_notebook_mode()","039436a1":"dados = pd.read_csv('sales_20_21_train.csv', delimiter = ',')\ndados","e7452427":"dados['DT_VENDA'] = pd.to_datetime(dados['DT_VENDA'])\ndados['DT_MESES'] = dados['DT_VENDA'].map(lambda date: 100*date.year + date.month)\ndados","caf5e6a1":"# data frame com receita por m\u00eas\nreceita_mensal = dados.groupby(['DT_MESES'])['VALOR'].sum().reset_index()\n\n# plotando\nplot_data = [\n    go.Scatter(\n        x = receita_mensal['DT_MESES'],\n        y = receita_mensal['VALOR'],\n    )\n]\n\nplot_layout = go.Layout(\n    xaxis = {\"type\": \"category\"},\n    title = 'Receita Mensal'\n)\nplot = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(plot)","7b5b3615":"# Data frame com a varia\u00e7\u00e3o percentual de receita em rela\u00e7\u00e3o ao m\u00eas anterior\nreceita_mensal['CRESCIMENTO_MENSAL'] = receita_mensal['VALOR'].pct_change()\n\n# plotando\nplot_data = [\n    go.Scatter(\n        x = receita_mensal['DT_MESES'],\n        y = receita_mensal['CRESCIMENTO_MENSAL'],\n    )\n]\n\nplot_layout = go.Layout(\n    xaxis={\"type\": \"category\"},\n    title = 'Taxa de Crescimento Mensal'\n)\n\nplot = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(plot)","16eaf727":"# data frame com a receita proveniente de cada canal de venda\nreceitaCanal = dados.groupby(['CANAL'])['VALOR'].sum().reset_index()\n\n# plotando\nplot = px.pie(receitaCanal, values='VALOR', names='CANAL', title='Receita por Canal de Venda')\nplot.show()","2f80195d":"# data frame com o n\u00famero de clientes (\u00fanicos) que realizaram uma compra em determinado m\u00eas\nativoMensal = dados.groupby('DT_MESES')['ID_CLIENTE'].nunique().reset_index()\nativoMensal.rename(columns = {'ID_CLIENTE':'N_CLIENTES'}, inplace=True)\n\n# plotando\nplot_data = [\n    go.Bar(\n        x = ativoMensal['DT_MESES'],\n        y = ativoMensal['N_CLIENTES'],\n    )\n]\n\nplot_layout = go.Layout(\n    xaxis={\"type\": \"category\"},\n    title = 'N\u00famero de Clientes Ativos por M\u00eas'\n)\n\nplot = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(plot)","d806d053":"# data frame com o n\u00famero de vendas por m\u00eas\ncarrinhoMensal = dados.groupby('DT_MESES')['ID_VENDA'].count().reset_index()\ncarrinhoMensal.rename(columns = {'ID_VENDA':'N_CARRINHOS'}, inplace=True)\n\n# plotando\nplot_data = [\n    go.Bar(\n        x = carrinhoMensal['DT_MESES'],\n        y = carrinhoMensal['N_CARRINHOS'],\n    )\n]\n\nplot_layout = go.Layout(\n    xaxis={\"type\": \"category\"},\n    title = 'N\u00famero de Carrinhos Comprados por M\u00eas'\n)\n\nplot = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(plot)","ac8de58d":"# data frame com o valor m\u00e9dio das vendas por m\u00eas\nmediaMensal = dados.groupby('DT_MESES')['VALOR'].mean().reset_index()\nmediaMensal.rename(columns = {'VALOR':'VALOR_VENDA_MEDIA'}, inplace=True)\n\n# plotando\nplot_data = [\n    go.Bar(\n        x = mediaMensal['DT_MESES'],\n        y = mediaMensal['VALOR_VENDA_MEDIA'],\n    )\n]\n\nplot_layout = go.Layout(\n    xaxis={\"type\": \"category\"},\n    title = 'Valor m\u00e9dio das vendas por mes'\n)\n\nplot = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(plot)","f48e1c83":"# data frame com a data da primeira compra de cada cliente\nprimCompra = dados.groupby('ID_CLIENTE')['DT_MESES'].min().reset_index()\nprimCompra.columns = ['ID_CLIENTE', 'DT_PRIM_COMPRA']\n\n# vamos associar, para cada venda, se foi realizada por cliente novo ou pr\u00e9 existente\ndados_pc = pd.merge(dados, primCompra, on='ID_CLIENTE')\ndados_pc['TIPO_CLIENTE'] = 'novo'\ndados_pc.loc[dados_pc['DT_MESES'] > dados_pc['DT_PRIM_COMPRA'], 'TIPO_CLIENTE'] = 'pre-existente'\n\n# data frame que associa a cada par ordenado (data, tipo de cliente) um valor\nreceitaTipo = dados_pc.groupby(['DT_MESES', 'TIPO_CLIENTE'])['VALOR'].sum().reset_index()\nreceitaTipo = receitaTipo.query('DT_MESES != 202001')\n\n# plotando\nplot_data = [\n    go.Scatter(\n        x = receitaTipo.query('TIPO_CLIENTE == \"pre-existente\"')['DT_MESES'],\n        y = receitaTipo.query('TIPO_CLIENTE == \"pre-existente\"')['VALOR'],\n        name = 'Pr\u00e9 existentes'\n    ),\n    go.Scatter(\n        x = receitaTipo.query('TIPO_CLIENTE == \"novo\"')['DT_MESES'],\n        y = receitaTipo.query('TIPO_CLIENTE == \"novo\"')['VALOR'],\n        name = 'Novos'\n    )\n]\n\nplot_layout = go.Layout(\n    xaxis={\"type\": \"category\"},\n    title = 'Receita Proveniente de Clientes Novos vs Clientes Pr\u00e9 Existentes'\n)\n\nplot = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(plot)","5a3d804a":"# retirnando os clientes desnecess\u00e1rios da base\nmodelo_sub = pd.read_csv('sample_submission.csv', delimiter = ',')\nmodelo_sub = modelo_sub.drop(columns=['VALOR'])\ndados = pd.merge(dados, modelo_sub, on='ID_CLIENTE')\ndados","12a73acf":"# data frame de treino\ntreino = dados[dados['DT_VENDA'] <= datetime(2020, 12, 31)]\n\n# calculando a recencia para cada cliente\n# a recencia \u00e9 dada pelo n\u00famero de dias entre a \u00faltima compra do cliente e a data final de an\u00e1lise\ncomp_max = treino.groupby('ID_CLIENTE').DT_VENDA.max().reset_index()\ncomp_max.columns = ['ID_CLIENTE', 'COMPRA_RECENTE']\ndia_max = comp_max['COMPRA_RECENTE'].max()\ncomp_max['RECENCIA'] = (dia_max - comp_max['COMPRA_RECENTE']).dt.days\nrecencia = comp_max.filter(items=['ID_CLIENTE', 'RECENCIA'])\n\n# data frame com a recencia de cada cliente\nrecencia\n\n# calculando a frequencia para cada cliente\n# a frequencia \u00e9 dada pelo n\u00famero de compras (carrinhos) realizada\nfreq = treino.groupby('ID_CLIENTE').DT_VENDA.count().reset_index()\nfreq.columns = ['ID_CLIENTE', 'FREQUENCIA']\nrec_freq = pd.merge(recencia, freq, on='ID_CLIENTE')\n\n# data frame com recencia e frequencia por cliente\nrec_freq\n\n# calculando a receita para cada cliente\n# a receita \u00e9 dada pelo valor que o cliente deixou na loja ao longo do per\u00edodo\nreceita = treino.groupby('ID_CLIENTE').VALOR.sum().reset_index()\n\nrfm = pd.merge(rec_freq, receita, on='ID_CLIENTE')\n\n# vamos usar o n\u00famero de meses nos quais o cliente esteve ativo como m\u00e9trica tamb\u00e9m\nnMesesAtivo = treino.groupby('ID_CLIENTE')['DT_MESES'].nunique().reset_index()\n\ntreino = pd.merge(rfm, nMesesAtivo, on='ID_CLIENTE')\ntreino.columns = ['ID_CLIENTE', 'RECENCIA', 'FREQUENCIA', 'VALOR', 'N_MESES_ATIVO']\n\n# data frame com todas a metricas calculadas para cada cliente\ntreino","111e1a0f":"# adicionando a recorrencia\ntreino['RECORRENCIA'] = (treino['N_MESES_ATIVO']\/12)*(treino['FREQUENCIA']\/12)\ntreino","3c3886e2":"# calculando a recencia para cada cliente\n# a recencia \u00e9 dada pelo n\u00famero de dias entre a \u00faltima compra do cliente e a data final de an\u00e1lise\ncomp_max = dados.groupby('ID_CLIENTE').DT_VENDA.max().reset_index()\ncomp_max.columns = ['ID_CLIENTE', 'COMPRA_RECENTE']\ndia_max = comp_max['COMPRA_RECENTE'].max()\ncomp_max['RECENCIA'] = (dia_max - comp_max['COMPRA_RECENTE']).dt.days\nrecencia = comp_max.filter(items=['ID_CLIENTE', 'RECENCIA'])\n\n# data frame com a recencia de cada cliente\nrecencia\n\n# calculando a frequencia para cada cliente\n# a frequencia \u00e9 dada pelo n\u00famero de compras (carrinhos) realizada\nfreq = dados.groupby('ID_CLIENTE').DT_VENDA.count().reset_index()\nfreq.columns = ['ID_CLIENTE', 'FREQUENCIA']\nrec_freq = pd.merge(recencia, freq, on='ID_CLIENTE')\n\n# data frame com recencia e frequencia por cliente\nrec_freq\n\n# calculando a receita para cada cliente\n# a receita \u00e9 dada pelo valor que o cliente deixou na loja ao longo do per\u00edodo\nreceita = dados.groupby('ID_CLIENTE').VALOR.sum().reset_index()\n\nrfm = pd.merge(rec_freq, receita, on='ID_CLIENTE')\n\n# vamos usar o n\u00famero de meses nos quais o cliente esteve ativo como m\u00e9trica tamb\u00e9m\nnMesesAtivo = dados.groupby('ID_CLIENTE')['DT_MESES'].nunique().reset_index()\n\nteste = pd.merge(rfm, nMesesAtivo, on='ID_CLIENTE')\nteste.columns = ['ID_CLIENTE', 'RECENCIA', 'FREQUENCIA', 'VALOR', 'N_MESES_ATIVO']\n\n# data frame com todas a metricas calculadas para cada cliente\nteste\n\n# adicionando a recorrencia - dessa vez sobre 14 meses\nteste['RECORRENCIA'] = (teste['N_MESES_ATIVO']\/14)*(teste['FREQUENCIA']\/14)\nteste","14934a2f":"cresc_mensal = receita_mensal['CRESCIMENTO_MENSAL'].sum()\/13\ncresc_mensal","6e9ea6d9":"# date frame com valores a partir de janeiro\nresultado = dados[dados['DT_VENDA'] >= datetime(2021, 1, 1)]\nresultado = resultado.groupby('ID_CLIENTE').VALOR.sum().reset_index()\n\n# adicionando o valor dos pr\u00f3ximos 3 meses de cada cliente\nresultado.columns = ['ID_CLIENTE', 'VALOR_RESULT']\ntreino_completo = pd.merge(resultado, treino, on='ID_CLIENTE', how='right')\ntreino_completo['VALOR_RESULT'] = treino_completo['VALOR_RESULT'].fillna(0)\n\n# Aqui ajustamos o valor do resultado considerando que temos apenas 7 semanas das 12 que comporiam um trimestre\n# o 30\/54 normaliza os 2 meses de 2021 para considerarmos como um \u00fanico m\u00eas (fevereiro esta incompleto)\n# Com isso, se x = valor de 1 m\u00eas e i=0.06, queremos obter x + x*(1+i) + x*(1+i)^2 = x*(1 + (1+i) + (1+i)^2) para considerar o crescimento mensal no trimestre\ntreino_completo['VALOR_RESULT'] = treino_completo['VALOR_RESULT']*(30\/54)*(1 + 1.06 + (1.06)**2)\n\n# df_modelo\ntreino_completo","690f7f0c":"treino = treino_completo\ntreino['VALOR_RESULT'].corr(treino['RECENCIA'])","48d3d2d5":"treino['VALOR_RESULT'].corr(treino['FREQUENCIA'])","a8e5d770":"treino['VALOR_RESULT'].corr(treino['RECORRENCIA'])","b3f04d9b":"treino['VALOR_RESULT'].corr(treino['VALOR'])","586791d7":"treino['VALOR_RESULT'].corr(treino['N_MESES_ATIVO'])","bf1bec2f":"treino = treino.sort_values(by=['RECORRENCIA'])\ntreino","801090d5":"n_linhas = len(treino)\npct_grupos = int(n_linhas*0.20) # 20% dos clientes\n\ng1 = treino[:pct_grupos]\ng2 = treino[pct_grupos:2*pct_grupos]\ng3 = treino[2*pct_grupos:3*pct_grupos]\ng4 = treino[3*pct_grupos:4*pct_grupos]\ng5 = treino[4*pct_grupos:]\ng1","dfd31d93":"grupos = [g1, g2, g3, g4, g5]\nlista_modelos = []\nfor i in grupos:\n    X = i[['RECENCIA','RECORRENCIA', 'VALOR']]\n    y = i['VALOR_RESULT']\n    reg = linear_model.LinearRegression()\n    reg.fit(X ,y)\n    lista_modelos.append(reg)","a181ca8f":"teste = teste.sort_values(by=['RECORRENCIA'])\nteste","9e559524":"c1 = teste[:pct_grupos]\nc2 = teste[pct_grupos:2*pct_grupos]\nc3 = teste[2*pct_grupos:3*pct_grupos]\nc4 = teste[3*pct_grupos:4*pct_grupos]\nc5 = teste[4*pct_grupos:]\nc1","df2f2ee6":"grupos2 = [c1, c2, c3, c4, c5]\nfor i in range(5):\n    grupos2[i]['LTV'] = lista_modelos[i].predict(grupos2[i][['RECENCIA','RECORRENCIA', 'VALOR']])\ngrupos2[2]  ","de3c956f":"teste = pd.concat([i for i in grupos2])\nentrega = teste.filter(items=['ID_CLIENTE', 'LTV'])\nentrega.columns = ['ID_CLIENTE', 'VALOR']\nentrega","0646d2ec":"neg = entrega[entrega['VALOR'] < 0]\nneg['VALOR'] = 0\npos = entrega[entrega['VALOR'] >= 0]\nentrega2 = pd.concat([neg, pos])\nentrega2 = entrega2.sort_values(by=['ID_CLIENTE'])\nentrega2","7d4268ba":"entrega2.to_csv('out.csv', index=False)","ed01c9a1":"Com isso, fica claro um aspecto relevante para levarmos em considera\u00e7\u00e3o em nosso modelo: a sazonalidade decorrente das festas de fim de ano. \u00c9 poss\u00edvel observar, tamb\u00e9m, apesar dos ruidos de curto prazo, uma certa tend\u00eancia de crescimento ao longo do tempo (como veremos mais abaixo, os dados de fevereiro de 2021 n\u00e3o est\u00e3o completos).","abe30c04":"O plot abaixo vai corrobarar para a conclus\u00e3o acima, j\u00e1 que dezembro n\u00e3o foi o m\u00eas com o maior n\u00famero de vendas.","a9238926":"Finalmente, geramos o CSV do resultado.","21525e8a":"Vamos criar um regerss\u00e3o para cada grupo, obter a previs\u00e3o de LTV separadamente e concatenar cada resultado para a entrega final.","bf43bda3":"Vamos agora fazer o mesmo processo para a base completa, sobre a qual o modelo vai ser aplicado para prever os 3 meses seguintes","425162fc":"Vamos, agora, comparar a receita de clientes novos e pr\u00e9 existentes. Consideraremos como nova a receita, em cada m\u00eas, proveniente dos clientes que constaram na base pela primeira vez.","e72dfe3d":"A correla\u00e7\u00e3o negativa adv\u00e9m da f\u00f3rmula que usamos para a rec\u00eancia: quanto menor o valor, mais recente. A correla\u00e7\u00e3o \u00e9 razo\u00e1velmente baixa, mas decidimos manter esse par\u00e2metro no modelo ap\u00f3s alguns testes e, tamb\u00e9m, para considerarmos o per\u00edodo de inatividade de cada cliente na regress\u00e3o.","3caf899d":"Tendo em m\u00e3os o valor observado e as m\u00e9tricas do meses anteriores, podemos testar a correla\u00e7\u00e3o dos valores","a88e5be3":"Mais uma informa\u00e7\u00e3o imediata para considerar em nosso modelo: n\u00e3o temos clientes novos a partir de dezembro. Al\u00e9m disso, o gr\u00e1fico ajuda a evidenciar a import\u00e2ncia de manter a rela\u00e7\u00e3o com o cliente ap\u00f3s a venda, haja vista que a maior parte da receita \u00e9 proveniente de clientes pr\u00e9 existentes.","3baa68d1":"Al\u00e9m da correla\u00e7\u00e3o baixa, o n\u00famero de meses ativo j\u00e1 \u00e9 considerado no valor da recorr\u00eancia, de forma que adicion\u00e1-lo seria, de certa forma, redundante.","2550dc90":"Segmentando da mesma forma a base completa","fc85884e":"O varejista \u00e9, de fato, altamente dependente de suas lojas f\u00edsicas, o que pode ajudar explicar as taxas de crescimento negativas dos meses de junho, julho e agosto com o acirramento da pandemia do Corona V\u00edrus (acompanhado de uma s\u00e9rie de lockdowns).","e5ac8735":"Decidimos, tamb\u00e9m, alimentar nosso modelo apenas com dados dos clientes que buscamos prever. Ap\u00f3s alguns testes, acreditamos que a aus\u00eancia de dados dos clientes retirados estava afastando nosso modelo dos par\u00e2metros ajustados para os clientes mais previs\u00edveis.","eab188f2":"Podemos tirar algumas informa\u00e7\u00f5es interessantes a partir desse gr\u00e1fico. Observe que, ao contr\u00e1rio do anterior, a figura desse plot aparenta ser mais horizontal, indicando uma tend\u00eancia de crescimento constante de receita (usaremos essa informa\u00e7\u00e3o mais adiante para estimar a recieta mensal do primeiro trimestre de 2021). Al\u00e9m disso, vale ressaltar que, apesar da grande receita absoluta observada em dezembro, alguns meses como janeiro e fevereiro apresentaram crescimentos relativos compar\u00e1veis ao de fim de ano.","3ae0621e":"A partir de agora vamos come\u00e7ar a trabalhar em criar e selecionar as m\u00e9tricas mais importantes na previs\u00e3o do valor gasto. Ap\u00f3s fazer alguns testes, decidimos aplicar uma adapta\u00e7\u00e3o do m\u00e9todo RFM para segmentar os clientes (Recency, Frequency, Monetary Value) e alimentar nosso modelo.","a775e440":"Nesta primeira se\u00e7\u00e3o vamos dissecar um pouco os dados para ter uma vis\u00e3o geral do neg\u00f3cio e seus clientes.","9de854b3":"Decidimos criar uma m\u00e9trica chamada de \"recorr\u00eancia\", que \u00e9 dada pelo percentual de meses em que o cliente esteve ativo multiplicado pelo n\u00famero de compras m\u00e9dio por m\u00eas. acreditamos que essa m\u00e9trica \u00e9 mais interessante que a frequ\u00eancia (conforme calculada acima) por que penaliza pessoas que compraram muitas vezes em um peri\u00f3do curto em detrimento dos clientes que fazem compras com uma certa regularidade (muito mais previs\u00edveis). Usaremos esse valor para segmentar os clientes em modelos diferentes. Decidimos, tamb\u00e9m, usar o valor m\u00e9dio de cada informa\u00e7\u00e3o uma vez que o parametro pode ser reajustado para modelos aplicados a diferentes per\u00edodos de tempo.","3b5ac6d2":"Conforme esperado, o valor gasto anteriormente \u00e9 o indicativo mais relacionado com o gasto futuro, certamente entrando no modelo.","7487b1fa":"Criando um modelo para cada grupo","64537d6a":"Vamos entender o que est\u00e1 acontecendo vendo o valor m\u00e9dio das vendas para cada m\u00eas","5b27976b":"Em diversas situa\u00e7\u00f5es, \u00e9 \u00fatil trabalhar com uma granularidade mensal, a come\u00e7ar pela receita e varia\u00e7\u00e3o m\u00eas a m\u00eas.","d140e4ab":"Vamos, agora, implementar de fato nossa regress\u00e3o. Decidimos segmentar os clientes com base em um \u00fanico crit\u00e9rio (a recorr\u00eancia) o que torna o comportamento do grupo mais homog\u00eaneo e, consequentemente, previs\u00edvel. Foram formados 5 grupos, cada um com 20% dos clientes (o percentual foi definido arbitrariamente e testado experimentalmente). ","c73b8eba":"Concatenando o previs\u00e3o de cada grupo e filtrando as informa\u00e7\u00f5es relevantes","ad12ad63":"Al\u00e9m do aumento do valor m\u00e9dio das vendas em dezembro, podemos observar fen\u00f4meno semelhante no meio do ano, o que faz sentido se considerarmos a situa\u00e7\u00e3o de lockdown do per\u00edodo. Com menos pessoas nas ruas, as compras corriqueiras de ticket baixo, caracter\u00edsticas de lojas f\u00edsicas, foram reduzidas, provocando um aumento no valor m\u00e9dio.","96abee9b":"Segmentando os grupos","cf3e1a37":"Exclu\u00edmos abaixo os valores que o modelo previu como negativos (transformados em zero), j\u00e1 que n\u00e3o temos informa\u00e7\u00f5es de gastos com clientes","3b8302be":"Uma conclus\u00e3o interessante dessa an\u00e1lise pode ser obtida comparando os gr\u00e1ficos, por exemplo, em rela\u00e7\u00e3o aos meses de novembro e dezembro. Apesar de apresentar um n\u00famero de clientes ativos menor em rela\u00e7\u00e3o ao m\u00eas anterior, dezembro apresentou uma receita expressivamente maior. Isso indica que, para os nossos dados, o salto em receita ao final do ano \u00e9 proveniente de um aumento no ticket m\u00e9dio.","624446f7":"Vamos calcular qual foi o LTV de cada cliente para os 3 primeiros meses de 2021, considerando o crescimento mensal m\u00e9dio observado (plot no in\u00edcio do notebook). Arredondamos o crescimento para 6%, mas o valor exato foi obtido abaixo.","9014d8fa":"A recorr\u00eancia apresenta correla\u00e7\u00e3o ligeiramente menor que a frequ\u00eancia, mas decidimos mant\u00ea-la no modelo pela raz\u00f5es que discutimos acima.","cfd7ab4c":"DESAFIO VLABS DATA CHALLANGE\n\nOrganizador: Visagio;\nEquipe: Peixe Babel;\nIntegrantes: Paulo Fontes, Miguel Batista e Thomaz Miranda;\nModelo: Regress\u00e3o Linear em grupos segmentados pela recorr\u00eancia;\nScore no Leaderboard: 279.78902;\nVers\u00e3o do python utilizada: 3.9.1","4b4a5a02":"Vamos separar nossos dados em duas bases: treino = at\u00e9 31 de dezembro | resultado = a partir de 1 de janeiro. Nosso modelo consistir\u00e1 em um regress\u00e3o onde usaremos par\u00e2metros dos meses anteriores para prever os gastos nos 3 meses seguintes. Dessa forma, decidimos manter os dados de dezembro na base de treino para amenizar a sazonalidade."}}