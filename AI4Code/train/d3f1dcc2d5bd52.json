{"cell_type":{"c9097c11":"code","855c0bc3":"code","3e0b08ea":"code","c144a3a3":"code","188de241":"code","07d257a4":"code","80e48636":"code","ce468b19":"code","cb4c37d8":"code","01a32a8c":"code","b88cf6a7":"markdown","e1efd285":"markdown","2167a877":"markdown","186395b5":"markdown","63b89408":"markdown"},"source":{"c9097c11":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","855c0bc3":"import gc\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nimport tensorflow_addons as tfa\nimport tensorflow_probability as tfp\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom typing import Union, Optional\nfrom tqdm.notebook import tqdm\nfrom time import time","3e0b08ea":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\n\ncols = [c for c in ss.columns.values if c != 'sig_id']","c144a3a3":"def preprocess(df):\n    df = df.copy()\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, 'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    del df['sig_id']\n    return df\n\ndef metric(y_true, y_pred):\n    metrics = []\n    for _target in train_targets.columns:\n        metrics.append(log_loss(y_true.loc[:, _target], y_pred.loc[:, _target].astype(float), labels=[0,1]))\n    return np.mean(metrics)\n\ntrain = preprocess(train_features)\ntest = preprocess(test_features)\n\ndel train_targets['sig_id']\n\ntrain_targets = train_targets.loc[train['cp_type']==0].reset_index(drop=True)\ntrain = train.loc[train['cp_type']==0].reset_index(drop=True)","188de241":"top_feats = [  1,   2,   3,   4,   5,   6,   7,   9,  11,  14,  15,  16,  17,\n        18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  29,  30,  31,\n        32,  33,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  46,\n        47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  58,  59,  60,\n        61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,\n        74,  75,  76,  78,  79,  80,  81,  82,  83,  84,  86,  87,  88,\n        89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101,\n       102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\n       115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128,\n       129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143,\n       144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157,\n       158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n       171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\n       184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197,\n       198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212,\n       213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226,\n       227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,\n       240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253,\n       254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266,\n       267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n       281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294,\n       295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309,\n       310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,\n       324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,\n       337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,\n       350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,\n       363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377,\n       378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391,\n       392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404,\n       405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418,\n       419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431,\n       432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446,\n       447, 448, 449, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462,\n       463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,\n       476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489,\n       490, 491, 492, 493, 494, 495, 496, 498, 500, 501, 502, 503, 505,\n       506, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521,\n       522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536,\n       538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551,\n       552, 554, 557, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570,\n       571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585,\n       586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599,\n       600, 601, 602, 606, 607, 608, 609, 611, 612, 613, 615, 616, 617,\n       618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630,\n       631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644,\n       645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 658, 659,\n       660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672,\n       673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685,\n       686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700,\n       701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 714, 716, 717,\n       718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732,\n       733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747,\n       748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761,\n       762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774,\n       775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788,\n       789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803,\n       804, 805, 806, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819,\n       821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835,\n       837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852,\n       854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869,\n       870, 871, 872, 873, 874]\n\nprint(len(top_feats))","07d257a4":"@tf.function\ndef sparsemoid(inputs: tf.Tensor):\n    return tf.clip_by_value(0.5 * inputs + 0.5, 0., 1.)\n\n@tf.function\ndef identity(x: tf.Tensor):\n    return x\n\nclass ODST(tf.keras.layers.Layer):\n    def __init__(self, n_trees: int = 3, depth: int = 4, units: int = 1, threshold_init_beta: float = 1.):\n        super(ODST, self).__init__()\n        self.initialized = False\n        self.n_trees = n_trees\n        self.depth = depth\n        self.units = units\n        self.threshold_init_beta = threshold_init_beta\n    \n    def build(self, input_shape: tf.TensorShape):\n        feature_selection_logits_init = tf.zeros_initializer()\n        self.feature_selection_logits = tf.Variable(initial_value=feature_selection_logits_init(shape=(input_shape[-1], self.n_trees, self.depth), dtype='float32'),\n                                 trainable=True)        \n        \n        feature_thresholds_init = tf.zeros_initializer()\n        self.feature_thresholds = tf.Variable(initial_value=feature_thresholds_init(shape=(self.n_trees, self.depth), dtype='float32'),\n                                 trainable=True)\n        \n        log_temperatures_init = tf.ones_initializer()\n        self.log_temperatures = tf.Variable(initial_value=log_temperatures_init(shape=(self.n_trees, self.depth), dtype='float32'),\n                                 trainable=True)\n        \n        indices = tf.keras.backend.arange(0, 2 ** self.depth, 1)\n        offsets = 2 ** tf.keras.backend.arange(0, self.depth, 1)\n        bin_codes = (tf.reshape(indices, (1, -1)) \/\/ tf.reshape(offsets, (-1, 1)) % 2)\n        bin_codes_1hot = tf.stack([bin_codes, 1 - bin_codes], axis=-1)\n        self.bin_codes_1hot = tf.Variable(initial_value=tf.cast(bin_codes_1hot, 'float32'), \n                                          trainable=False)\n        \n        response_init = tf.ones_initializer()\n        self.response = tf.Variable(initial_value=response_init(shape=(self.n_trees, self.units, 2**self.depth), dtype='float32'), \n                                    trainable=True)\n                \n    def initialize(self, inputs):        \n        feature_values = self.feature_values(inputs)\n        \n        # intialize feature_thresholds\n        percentiles_q = (100 * tfp.distributions.Beta(self.threshold_init_beta, \n                                                      self.threshold_init_beta)\n                         .sample([self.n_trees * self.depth]))\n        flattened_feature_values = tf.map_fn(tf.keras.backend.flatten, feature_values)\n        init_feature_thresholds = tf.linalg.diag_part(tfp.stats.percentile(flattened_feature_values, percentiles_q, axis=0))\n        \n        self.feature_thresholds.assign(tf.reshape(init_feature_thresholds, self.feature_thresholds.shape))\n        \n        \n        # intialize log_temperatures\n        self.log_temperatures.assign(tfp.stats.percentile(tf.math.abs(feature_values - self.feature_thresholds), 50, axis=0))\n        \n        \n        \n    def feature_values(self, inputs: tf.Tensor, training: bool = None):\n        feature_selectors = tfa.activations.sparsemax(self.feature_selection_logits)\n        # ^--[in_features, n_trees, depth]\n\n        feature_values = tf.einsum('bi,ind->bnd', inputs, feature_selectors)\n        # ^--[batch_size, n_trees, depth]\n        \n        return feature_values\n        \n    def call(self, inputs: tf.Tensor, training: bool = None):\n        if not self.initialized:\n            self.initialize(inputs)\n            self.initialized = True\n            \n        feature_values = self.feature_values(inputs)\n        \n        threshold_logits = (feature_values - self.feature_thresholds) * tf.math.exp(-self.log_temperatures)\n\n        threshold_logits = tf.stack([-threshold_logits, threshold_logits], axis=-1)\n        # ^--[batch_size, n_trees, depth, 2]\n\n        bins = sparsemoid(threshold_logits)\n        # ^--[batch_size, n_trees, depth, 2], approximately binary\n\n        bin_matches = tf.einsum('btds,dcs->btdc', bins, self.bin_codes_1hot)\n        # ^--[batch_size, n_trees, depth, 2 ** depth]\n\n        response_weights = tf.math.reduce_prod(bin_matches, axis=-2)\n        # ^-- [batch_size, n_trees, 2 ** depth]\n\n        response = tf.einsum('bnd,ncd->bnc', response_weights, self.response)\n        # ^-- [batch_size, n_trees, units]\n        \n        return tf.reduce_sum(response, axis=1)\n    \nclass NODE(tf.keras.Model):\n    def __init__(self, units: int = 1, n_layers: int = 1, output_dim = 1, dropout_rate = 0.1, link: tf.function = tf.identity, n_trees: int = 3, depth: int = 4, threshold_init_beta: float = 1., feature_column: Optional[tf.keras.layers.DenseFeatures] = None):\n        super(NODE, self).__init__()\n        self.units = units\n        self.n_layers = n_layers\n        self.n_trees = n_trees\n        self.depth = depth\n        self.units = units\n        self.threshold_init_beta = threshold_init_beta\n        self.feature_column = feature_column\n        self.dropout_rate = dropout_rate\n        self.output_dim = output_dim\n        \n        if feature_column is None:\n            self.feature = tf.keras.layers.Lambda(identity)\n        else:\n            self.feature = feature_column\n        \n        self.bn = [tf.keras.layers.BatchNormalization() for _ in range(n_layers + 1)]\n        self.dropout = [tf.keras.layers.Dropout(self.dropout_rate) for _ in range(n_layers + 1)]\n        self.ensemble = [ODST(n_trees = n_trees,\n                              depth = depth,\n                              units = units,\n                              threshold_init_beta = threshold_init_beta) \n                         for _ in range(n_layers)]\n        \n        self.last_layer = tf.keras.layers.Dense(self.output_dim)\n        \n        self.link = link\n        \n    def call(self, inputs, training=None):\n        X = self.feature(inputs)\n        X = self.bn[0](X, training=training)\n        X = self.dropout[0](X, training=training)\n        \n        for i, tree in enumerate(self.ensemble):\n            H = tree(X)\n            X = tf.concat([X, H], axis=1)\n            X = self.bn[i + 1](X, training=training)\n            X = self.dropout[i + 1](X, training=training)\n            \n        return self.link(self.last_layer(X))","80e48636":"def create_NODE(n_layers, units, output_dim, dropout_rate, depth, n_trees, link, learning_rate):\n    \n    node = NODE(n_layers = n_layers, units = units, output_dim = output_dim, dropout_rate = dropout_rate, \n                depth = depth, n_trees = n_trees, link = tf.keras.activations.sigmoid)\n    \n    node.compile(optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate), \n                 loss = 'binary_crossentropy')\n    \n    return node","ce468b19":"N_STARTS = 7\nN_SPLITS = 7\n\nres = train_targets.copy()\nss.loc[:, train_targets.columns] = 0\nres.loc[:, train_targets.columns] = 0\n\nfor seed in range(N_STARTS):\n    start_time_seed = time()\n    K.clear_session()\n    tf.random.set_seed(seed)\n    mean_score = 0\n    skf = MultilabelStratifiedKFold(n_splits = N_SPLITS, random_state = 42, shuffle = True)\n    for n, (tr, te) in enumerate(skf.split(train_targets, train_targets)):\n        \n        start_time_fold = time()\n        x_tr, x_val = train.values[tr][:, top_feats], train.values[te][:, top_feats]\n        y_tr, y_val = train_targets.values[tr], train_targets.values[te]\n        x_tt = test.values[:, top_feats]\n            \n        model = create_NODE(n_layers = 3, units = 128, output_dim = 206, dropout_rate = 0.1, depth = 6, \n                            n_trees = 3, link = tf.keras.activations.sigmoid, learning_rate = 1e-3)\n        rlr = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.1, patience = 3, \n                                verbose = 0, min_delta = 1e-4, mode = 'min')\n        es = EarlyStopping(monitor = 'val_loss', min_delta = 1e-4, patience = 10, mode = 'min', \n                           baseline = None, restore_best_weights = True, verbose = 0)\n        history = model.fit(x_tr, y_tr, validation_data = (x_val, y_val), epochs = 100, \n                            batch_size = 128, callbacks = [rlr, es], verbose = 0)\n        hist = pd.DataFrame(history.history)\n        fold_score = hist['val_loss'].min()\n        mean_score += fold_score \/ N_SPLITS\n        test_predict = model.predict(test.values[:, top_feats])\n        val_predict = model.predict(train.values[te][:, top_feats])\n        \n        ss.loc[:, train_targets.columns] += test_predict \/ (N_SPLITS * N_STARTS)\n        res.loc[te, train_targets.columns] += val_predict \/ N_STARTS\n        print(f'[{str(datetime.timedelta(seconds = time() - start_time_fold))[2:7]}] NODE Seed {seed}, Fold {n}:', fold_score)\n        \n    print(f'[{str(datetime.timedelta(seconds = time() - start_time_seed))[2:7]}] NODE Seed {seed} Mean Score:', mean_score)","cb4c37d8":"print(f'NODE OOF Metric: {metric(train_targets, res)}')","01a32a8c":"ss.loc[test['cp_type']==1, train_targets.columns] = 0\nss.to_csv('submission.csv', index = False)","b88cf6a7":"# Model Functions\n\nModified from https:\/\/www.kaggle.com\/marcusgawronsky\/differentiable-catboost-node-in-tensorflow-2-0. \n\nAdd BatchNormlization, Dropout and modify the last layer to Dense layer with 206 units.","e1efd285":"# Submit","2167a877":"# Neural Oblivious Decision Ensembles\n\nOriginal Paper https:\/\/arxiv.org\/abs\/1909.06312\n\nI test the Neural Oblivious Decision Ensembles (NODE) in Tensorflow Keras. There may be some bugs. Please refer to the official implementation in Pytorch https:\/\/github.com\/Qwicen\/node for stable performance.\n\n![image.png](attachment:image.png)","186395b5":"# Train Model","63b89408":"# Preprocess"}}