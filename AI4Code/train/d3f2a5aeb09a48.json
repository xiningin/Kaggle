{"cell_type":{"06798b73":"code","02f942fe":"code","b0161e66":"code","321daf98":"code","1b86871f":"code","496b6343":"code","3a9cd613":"code","75326122":"code","5fbff760":"code","120c88f9":"code","b95266e5":"code","78ce6a4b":"code","6e069d76":"code","c32dd5bf":"code","23384633":"code","f98d0ec4":"code","ab52d05a":"code","434d15da":"code","5ee528f2":"code","f090f3f8":"code","b30e9f76":"code","1bc1e977":"code","7e98f43f":"markdown","825cf03d":"markdown","fc7c17f6":"markdown","0ab0373b":"markdown","e667a941":"markdown","711c0b9a":"markdown","a26990f2":"markdown","541ee524":"markdown","800f57ce":"markdown","74b2770b":"markdown","ce824cee":"markdown","e8e55e9a":"markdown","c517d81c":"markdown","a7317853":"markdown","421bfb41":"markdown","02460da1":"markdown"},"source":{"06798b73":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","02f942fe":"train_data=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")                       ","b0161e66":"print(\"train data shape is :\",train_data.shape)\nprint(\"test data shape is :\",test_data.shape)","321daf98":"y_train=train_data['label']\nx_train=train_data.drop(labels=['label'],axis=1)\nx_test=test_data","1b86871f":"new_x_train=np.array(x_train)","496b6343":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n   # plt.grid(False)\n    plt.imshow(new_x_train[i].reshape(28,28))\n    plt.xlabel(y_train[i])\nplt.show()","3a9cd613":"new_x_train,x_test,x_train=new_x_train\/255,x_test\/255,x_train\/255","75326122":"y_train.unique()","5fbff760":"model=tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28,28)),\n    tf.keras.layers.Dense(256,activation='relu'),\n    tf.keras.layers.Dense(128,activation='relu'),\n    tf.keras.layers.Dense(10)\n])","120c88f9":"loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)","b95266e5":"model.compile(optimizer='adam',\n             loss=loss_fn,\n              metrics=['accuracy']\n             )","78ce6a4b":"model.fit(x_train,y_train,epochs=13)","6e069d76":"\ny_test=pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\") ","c32dd5bf":"probability_model = tf.keras.Sequential([\n  model,\n  tf.keras.layers.Softmax()\n])","23384633":"x_test=np.array(x_test)\n\npre=probability_model.predict(x_test)\npre.shape","f98d0ec4":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n   # plt.grid(False)\n    plt.imshow(x_test[i].reshape(28,28))\n    plt.xlabel(np.argmax(pre[i]))\nplt.show()","ab52d05a":"listofprediction=[]\nfor i in range(len(pre)):\n    listofprediction.append(np.argmax(pre[i]))","434d15da":"listofprediction=pd.DataFrame(listofprediction,columns=['Label'])","5ee528f2":"y_test=y_test.drop(labels=['Label'],axis=1)","f090f3f8":"submission=pd.concat([y_test['ImageId'], listofprediction['Label']], axis=1)","b30e9f76":"submission","1bc1e977":"submission.to_csv(\"mnist_datagen.csv\",index=False)","7e98f43f":"**Here we split the data to train data and test data**","825cf03d":"**acc=.9955**\n","fc7c17f6":"**Here we built the nueral network**","0ab0373b":"**Here we get the data and read it**","e667a941":"**Here we show the first 25 photo of number and print the number in photo undeer the photo**","711c0b9a":"**Here we scale the data to make the process is faster**\nevery pixel in the photo contain a number from 0 to 255\nSo we divided each pixel by 255","a26990f2":"**Here train the model**","541ee524":"**Here we knowe the shape of data**","800f57ce":"**Here we import the tools which we need**","74b2770b":"**Here we save the prediction**","ce824cee":"**Here we knowe the label**","e8e55e9a":"**Here show the image of test data and show the prediction of every image under the image**","c517d81c":"**Here we make predictions**","a7317853":"**Here we compile the model**","421bfb41":"**Here we determine the loss function**","02460da1":"**Here we convert the x_train data to array to show the image**"}}