{"cell_type":{"ee40f963":"code","27863a9e":"code","94809dc2":"code","1b477396":"code","4c7cb610":"code","5c6b0226":"code","7cadeaf5":"code","310b8a64":"code","6cc766e3":"code","1f46e5d0":"code","34380c86":"code","29baaed6":"code","8b734e91":"code","334e4c32":"code","6227311c":"code","a2147055":"markdown","80da5a51":"markdown"},"source":{"ee40f963":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy as scp\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27863a9e":"train_data = pd.read_csv(\"\/kaggle\/input\/poker-rule-induction\/train.csv.zip\")\ntrain_data.head()\n\n\n","94809dc2":"test_data = pd.read_csv(\"\/kaggle\/input\/poker-rule-induction\/test.csv.zip\")\ntest_data.head()","1b477396":"df = train_data\ndf.head()","4c7cb610":"df.info()","5c6b0226":"df.describe()","7cadeaf5":"df.hist(figsize = (16,12));","310b8a64":"df['hand'].value_counts()","6cc766e3":"def preproc(df):\n    df['min-flush'] = (df['S1']==df['S2'])&(df['S2']==df['S3'])&(df['S3']==df['S4'])&(df['S4']==df['S5'])\n    a1 = df[['C1', 'C2', 'C3', 'C4', 'C5']].min(axis = 1)\n    b1 = 5*a1 + 10\n    a2 = df[['C1', 'C2', 'C3', 'C4', 'C5']].max(axis = 1).apply(scp.math.factorial)\n    b2 = (df[['C1', 'C2', 'C3', 'C4', 'C5']].min(axis = 1) -1 ).apply(scp.math.factorial)\n    c = a2\/b2\n    df['min-straight'] = ((df['C1']*df['C2']*df['C3']*df['C4']*df['C5'] == c) & (df['C1']+df['C2']+df['C3']+df['C4']+df['C5'] == b1)) | ( (df[['C1', 'C2', 'C3', 'C4', 'C5']].min(axis = 1) == 1) & (df['C1']*df['C2']*df['C3']*df['C4']*df['C5'] == 17160))\n    df['min - straight flush'] = df['min-flush'] & df['min-straight']\n    df['RF'] = df[df['min - straight flush']==True][['C1', 'C2', 'C3','C4', 'C5']].sum(axis =1) == 47\n    df['RF'] = df['RF'].fillna(False)\n    df['straight flush'] = (df['min - straight flush'] ==True) & (df['RF'] ==False)\n    df['straight flush'] = df['straight flush'].fillna(False)\n    df = df.drop('min - straight flush', axis = 1)\n    df['flush'] = (df['straight flush'] == False) & (df['min-flush'] ==True) & (df['RF'] ==False)\n    df['straight'] = (df['straight flush'] == False) & (df['min-straight'] ==True) & (df['RF'] ==False)\n    df = df.drop('min-straight', axis = 1)\n    df = df.drop('min-flush', axis = 1)\n    df['flush'] = df['flush'].fillna(False)\n    df['straight'] = df['straight'].fillna(False)\n    df['Nothing in hand'] = (df[['C1', 'C2', 'C3', 'C4', 'C5']].nunique(axis =1) == 5) & (df['straight'] ==False) & (df['flush'] == False) & (df['RF'] == False)& (df['straight flush'] == False) \n    df['Nothing in hand'] = df['Nothing in hand'].fillna(False)\n    df['One pair'] = (df[['C1', 'C2', 'C3', 'C4', 'C5']].nunique(axis =1) == 4)\n    df['One pair'] = df['One pair'].fillna(False)\n    df['Four of a kind or Full house'] = df[['C1', 'C2', 'C3', 'C4', 'C5']].nunique(axis =1) == 2\n    df['Two pairs or Three of a kind'] = df[['C1', 'C2', 'C3', 'C4', 'C5']].nunique(axis =1) == 3\n    df['Four of a kind or Full house'] = df['Four of a kind or Full house'].fillna(False)\n    df['Two pairs or Three of a kind'] = df['Two pairs or Three of a kind'].fillna(False)\n    dff = np.array(df[['C1', 'C2', 'C3', 'C4', 'C5']])\n    a = []\n    for i in range(dff.shape[0]):\n        u, v  = np.unique(dff[i], return_counts=True)\n        a.append(4 in v)\n    df['Four of a kind'] = np.array(a)\n    df['Full house'] = (df['Four of a kind']==False) & (df['Four of a kind or Full house'] ==True)\n    df = df.drop('Four of a kind or Full house', axis =1)\n    a = []\n    for i in range(dff.shape[0]):\n        u, v  = np.unique(dff[i], return_counts=True)\n        a.append(set(v) == set([1,1,3]))\n    df['Three of a kind'] = np.array(a)\n    df['Two pairs'] = (df['Three of a kind']==False) & (df['Two pairs or Three of a kind'] ==True)\n    df = df.drop('Two pairs or Three of a kind', axis =1)\n    df = df.drop(['S1', 'S2','S3','S4','S5','C1','C2','C3','C4','C5'], axis = 1)\n    return df","1f46e5d0":"df.head(15)\n\n","34380c86":"df = preproc(df)","29baaed6":"df.head(15)","8b734e91":"x = df.drop('hand', axis =1)\ny = df['hand']\nx = np.array(x).astype(int)\n","334e4c32":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(x, y)\nx_test = test_data\nx_test = x_test.drop('id', axis = 1)\nx_test = preproc(x_test)\n","6227311c":"x_test = np.array(x_test).astype(int)\npredictions = model.predict(x_test).astype(int)\noutput = pd.DataFrame({'id': test_data.id, 'hand': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\noutput","a2147055":"#S1 \u201cSuit of card #1\u201d\n#C1 \u201cRank of card #1\u201d\n#Ordinal (1-4) representing {Hearts, Spades, Diamonds, Clubs}\n#Numerical (1-13) representing (Ace, 2, 3, .. , Queen, King)\"\"\" ","80da5a51":"# Func"}}