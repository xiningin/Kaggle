{"cell_type":{"e2963d71":"code","1d6fa04e":"code","fbc32a70":"code","45d458d7":"code","b3e670e6":"code","e0168b6d":"code","883aa9fd":"code","633c2a50":"code","56d11acd":"code","1518a7f5":"code","7edf4f6b":"code","e9fbb939":"code","98bff821":"code","4cd7fc91":"code","84f294bc":"code","4b3edcd2":"code","da393828":"code","704d9e53":"markdown","73da52a7":"markdown","32643b59":"markdown","b2e1de37":"markdown","50436a89":"markdown","4e755600":"markdown","de7101e6":"markdown","7b96e30c":"markdown","15cb46fa":"markdown","6280a200":"markdown","6aff0717":"markdown","4955c2d2":"markdown"},"source":{"e2963d71":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d6fa04e":"import matplotlib.pyplot as plt\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, r2_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn import preprocessing\nimport seaborn as sns\nimport numpy as np","fbc32a70":"df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_t = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","45d458d7":"## Scikit-Learn library\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\n## X and y\nfeature = ['GrLivArea']\ntarget = ['SalePrice']\n\n\nX_train = df[:1200][feature]\ny_train = df[:1200][target]","b3e670e6":"model.fit(X_train, y_train)","e0168b6d":"sns.regplot(x=df['GrLivArea'], y=df['SalePrice']);","883aa9fd":"x = df['GrLivArea']\ny = df['SalePrice']\n\npredict = df['SalePrice'].mean()\nerrors = predict - df['SalePrice']\nmean_absolute_error = errors.abs().mean()\n\nsns.lineplot(x=x, y=predict, color='red')\nsns.scatterplot(x=x, y=y, color='blue');","633c2a50":"## All test data\nX_test = [[x] for x in df[1001:]['GrLivArea']]\ny_pred = model.predict(X_test)\n","56d11acd":"## train data\nplt.scatter(X_train, y_train, color='blue', linewidth=1)\n\n## test data\nplt.plot(X_test, y_pred, color='red', linewidth=1);","1518a7f5":"sns.regplot(x=df['GrLivArea'], y=df['SalePrice']);\n## train data\nplt.scatter(X_train, y_train, color='blue', linewidth=1)\n\n## test data\nplt.plot(X_test, y_pred, color='red', linewidth=1);","7edf4f6b":"output = [[x] for x in df[1001:]['SalePrice']]\nprediction = np.round(y_pred,0).astype(int)\n\nresidual = output - prediction\nRSS = sum(residual **2)[0]\nRSS","e9fbb939":"# Load the dataset\ntable = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')\ntable.head()","98bff821":"df = table[['Rating','Reviews', 'Size','Installs', 'Price']]\ndf.Installs = df.Installs.str.replace(r\"[a-zA-Z\\+\\,]\",'').replace('', np.nan).fillna(\"0\").astype(float)\ndf.Size = df.Size.str.replace(r\"[a-zA-Z\\+\\,]\",'').str.strip().replace('', np.nan).fillna(\"0\").astype(float)\ndf.Reviews = df.Reviews.str.replace(r\"[a-zA-Z\\+\\,]\",'').str.strip().replace('', np.nan).fillna(\"0\").astype(float)\ndf.Price = df.Price.str.replace(r\"[a-zA-Z\\+\\,\\$]\",'').str.strip().replace('', np.nan).fillna(\"0\").astype(float)\ndf","4cd7fc91":"vals, names, xs = [],[],[]\nfor i, col in enumerate(df.columns):\n    vals.append(df[col].values)\n    names.append(col)\n    xs.append(np.random.normal(i + 1, 0.04, df[col].values.shape[0]))  # adds jitter to the data points - can be adjusted","84f294bc":"plt.boxplot(vals, labels=names)\npalette = ['r', 'g', 'b', 'y']\nfor x, val, c in zip(xs, vals, palette):\n    plt.scatter(x, val, alpha=0.4, color=c)\nplt.show()","4b3edcd2":"df2 = df[['Rating','Reviews','Installs', 'Price']]","da393828":"sns.pairplot(df2)","704d9e53":"Observation: seems like there are only free app in this data","73da52a7":"Result: slightly different.","32643b59":"# Part A","b2e1de37":"## 2. Draw a scatterplot with the linear model as a line","50436a89":"Based on the above two graphs (one created by linear regression, other used with only mean() value,) we can see that linear regression model has more accurate line.","4e755600":"## 5. Compare the outcomes with the actual values of the data set.","de7101e6":"## 3. Analyze the linear model fitted and examine whether predictor variables seem to have a significant influence on the outcome (No wrong answer here)","7b96e30c":"# Part B","15cb46fa":"Observation: relationship between review and installs are well separated while others are not.","6280a200":"## 6. Use your NumPy and Pandas skills to calculate the sum of squares of residuals for your model","6aff0717":"## 1. With the data points, fit a linear model.","4955c2d2":"## 4. Using the model, predict the outcomes for the same data points "}}