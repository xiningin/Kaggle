{"cell_type":{"865d2da9":"code","b1886f32":"code","5f2bdfd0":"code","8b03185f":"code","29993f69":"code","6edf2aae":"code","055738cf":"code","7662f4d1":"code","f8048055":"code","c4e40468":"code","924b2f7a":"code","6be6790f":"code","ceca7516":"code","c7165d12":"code","5786380a":"code","992dd10c":"markdown","4e96983b":"markdown"},"source":{"865d2da9":"import numpy as np\nimport skfuzzy as fuzz\nfrom skfuzzy import control as ctrl\n\n# New Antecedent\/Consequent objects hold universe variables and membership\n# functions\nquality = ctrl.Antecedent(np.arange(0, 11, 1), 'quality')\nservice = ctrl.Antecedent(np.arange(0, 11, 1), 'service')\ntip = ctrl.Consequent(np.arange(0, 26, 1), 'tip')\n\n# Auto-membership function population is possible with .automf(3, 5, or 7)\nquality.automf(3)\nservice.automf(3)\n\n# Custom membership functions can be built interactively with a familiar,\n# Pythonic API\ntip['low'] = fuzz.trimf(tip.universe, [0, 0, 13])\ntip['medium'] = fuzz.trimf(tip.universe, [0, 13, 25])\ntip['high'] = fuzz.trimf(tip.universe, [13, 25, 25])","b1886f32":"# You can see how these look with .view()\nquality['average'].view()","5f2bdfd0":"service.view()","8b03185f":"tip.view()","29993f69":"rule1 = ctrl.Rule(quality['poor'] | service['poor'], tip['low'])\nrule2 = ctrl.Rule(service['average'], tip['medium'])\nrule3 = ctrl.Rule(service['good'] | quality['good'], tip['high'])\n\nrule1.view()","6edf2aae":"tipping_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])","055738cf":"tipping = ctrl.ControlSystemSimulation(tipping_ctrl)","7662f4d1":"# Pass inputs to the ControlSystem using Antecedent labels with Pythonic API\n# Note: if you like passing many inputs all at once, use .inputs(dict_of_data)\ntipping.input['quality'] = 6.5\ntipping.input['service'] = 9.8\n\n# Crunch the numbers\ntipping.compute()","f8048055":"print(tipping.output['tip'])\ntip.view(sim=tipping)","c4e40468":"import numpy as np\nimport skfuzzy as fuzz\nimport matplotlib.pyplot as plt","924b2f7a":"# Generate universe variables\n#   * Quality and service on subjective ranges [0, 10]\n#   * Tip has a range of [0, 25] in units of percentage points\nx_qual = np.arange(0, 11, 1)\nx_serv = np.arange(0, 11, 1)\nx_tip  = np.arange(0, 26, 1)","6be6790f":"# Generate fuzzy membership functions\nqual_lo = fuzz.trimf(x_qual, [0, 0, 5])\nqual_md = fuzz.trimf(x_qual, [0, 5, 10])\nqual_hi = fuzz.trimf(x_qual, [5, 10, 10])\nserv_lo = fuzz.trimf(x_serv, [0, 0, 5])\nserv_md = fuzz.trimf(x_serv, [0, 5, 10])\nserv_hi = fuzz.trimf(x_serv, [5, 10, 10])\ntip_lo = fuzz.trimf(x_tip, [0, 0, 13])\ntip_md = fuzz.trimf(x_tip, [0, 13, 25])\ntip_hi = fuzz.trimf(x_tip, [13, 25, 25])","ceca7516":"# Visualize these universes and membership functions\nfig, (ax0, ax1, ax2) = plt.subplots(nrows=3, figsize=(8, 9))\n\nax0.plot(x_qual, qual_lo, 'b', linewidth=1.5, label='Bad')\nax0.plot(x_qual, qual_md, 'g', linewidth=1.5, label='Decent')\nax0.plot(x_qual, qual_hi, 'r', linewidth=1.5, label='Great')\nax0.set_title('Food quality')\nax0.legend()\n\nax1.plot(x_serv, serv_lo, 'b', linewidth=1.5, label='Poor')\nax1.plot(x_serv, serv_md, 'g', linewidth=1.5, label='Acceptable')\nax1.plot(x_serv, serv_hi, 'r', linewidth=1.5, label='Amazing')\nax1.set_title('Service quality')\nax1.legend()\n\nax2.plot(x_tip, tip_lo, 'b', linewidth=1.5, label='Low')\nax2.plot(x_tip, tip_md, 'g', linewidth=1.5, label='Medium')\nax2.plot(x_tip, tip_hi, 'r', linewidth=1.5, label='High')\nax2.set_title('Tip amount')\nax2.legend()\n\n# Turn off top\/right axes\nfor ax in (ax0, ax1, ax2):\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.get_xaxis().tick_bottom()\n    ax.get_yaxis().tick_left()\n\nplt.tight_layout()\n","c7165d12":"# We need the activation of our fuzzy membership functions at these values.\n# The exact values 6.5 and 9.8 do not exist on our universes...\n# This is what fuzz.interp_membership exists for!\nqual_level_lo = fuzz.interp_membership(x_qual, qual_lo, 6.5)\nqual_level_md = fuzz.interp_membership(x_qual, qual_md, 6.5)\nqual_level_hi = fuzz.interp_membership(x_qual, qual_hi, 6.5)\n\nserv_level_lo = fuzz.interp_membership(x_serv, serv_lo, 9.8)\nserv_level_md = fuzz.interp_membership(x_serv, serv_md, 9.8)\nserv_level_hi = fuzz.interp_membership(x_serv, serv_hi, 9.8)\n\n# Now we take our rules and apply them. Rule 1 concerns bad food OR service.\n# The OR operator means we take the maximum of these two.\nactive_rule1 = np.fmax(qual_level_lo, serv_level_lo)\n\n# Now we apply this by clipping the top off the corresponding output\n# membership function with `np.fmin`\ntip_activation_lo = np.fmin(active_rule1, tip_lo)  # removed entirely to 0\n\n# For rule 2 we connect acceptable service to medium tipping\ntip_activation_md = np.fmin(serv_level_md, tip_md)\n\n# For rule 3 we connect high service OR high food with high tipping\nactive_rule3 = np.fmax(qual_level_hi, serv_level_hi)\ntip_activation_hi = np.fmin(active_rule3, tip_hi)\ntip0 = np.zeros_like(x_tip)\n\n# Visualize this\nfig, ax0 = plt.subplots(figsize=(8, 3))\n\nax0.fill_between(x_tip, tip0, tip_activation_lo, facecolor='b', alpha=0.7)\nax0.plot(x_tip, tip_lo, 'b', linewidth=0.5, linestyle='--', )\nax0.fill_between(x_tip, tip0, tip_activation_md, facecolor='g', alpha=0.7)\nax0.plot(x_tip, tip_md, 'g', linewidth=0.5, linestyle='--')\nax0.fill_between(x_tip, tip0, tip_activation_hi, facecolor='r', alpha=0.7)\nax0.plot(x_tip, tip_hi, 'r', linewidth=0.5, linestyle='--')\nax0.set_title('Output membership activity')\n\n# Turn off top\/right axes\nfor ax in (ax0,):\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.get_xaxis().tick_bottom()\n    ax.get_yaxis().tick_left()\n\nplt.tight_layout()\n","5786380a":"# Aggregate all three output membership functions together\naggregated = np.fmax(tip_activation_lo,\n                     np.fmax(tip_activation_md, tip_activation_hi))\n\n# Calculate defuzzified result\ntip = fuzz.defuzz(x_tip, aggregated, 'centroid')\ntip_activation = fuzz.interp_membership(x_tip, aggregated, tip)  # for plot\n\n# Visualize this\nfig, ax0 = plt.subplots(figsize=(8, 3))\n\nax0.plot(x_tip, tip_lo, 'b', linewidth=0.5, linestyle='--', )\nax0.plot(x_tip, tip_md, 'g', linewidth=0.5, linestyle='--')\nax0.plot(x_tip, tip_hi, 'r', linewidth=0.5, linestyle='--')\nax0.fill_between(x_tip, tip0, aggregated, facecolor='Orange', alpha=0.7)\nax0.plot([tip, tip], [0, tip_activation], 'k', linewidth=1.5, alpha=0.9)\nax0.set_title('Aggregated membership and result (line)')\n\n# Turn off top\/right axes\nfor ax in (ax0,):\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.get_xaxis().tick_bottom()\n    ax.get_yaxis().tick_left()\n\nplt.tight_layout()","992dd10c":"# Tipping Problem (Easy way)\nlink - https:\/\/pythonhosted.org\/scikit-fuzzy\/auto_examples\/plot_tipping_problem_newapi.html","4e96983b":"# Tipping Problem (Hard way)\nlink - https:\/\/pythonhosted.org\/scikit-fuzzy\/auto_examples\/plot_tipping_problem.html"}}