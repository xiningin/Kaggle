{"cell_type":{"76b7a946":"code","7edd0ec1":"code","38235130":"code","712e5c39":"code","71ff81cf":"code","5c4dc7f7":"code","10bd7cc7":"code","5426857c":"code","6952877c":"code","9752db9a":"code","49ddb65a":"code","2233e3e3":"code","517c4d58":"code","7d51d589":"code","7267b5f8":"code","000ffddd":"code","0b9e79d7":"code","26a653f0":"code","0b39d5f9":"code","eca97d0e":"code","d8d7f190":"code","d72c3a8a":"code","b9dfd8fb":"code","d7ac0f9b":"code","0a7a55e5":"code","22e6382f":"code","29eacef4":"code","719d9820":"code","dc5685a4":"code","e5ab2dfb":"code","98089061":"code","3c17c21c":"code","fe2a1825":"code","8ecc20bd":"code","8c4c2d05":"markdown","9e00dc56":"markdown","9d98aa07":"markdown","1884aca6":"markdown","95455d4e":"markdown"},"source":{"76b7a946":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7edd0ec1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom itertools import cycle\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","38235130":"!ls -GFlash --color ..\/input\/m5-forecasting-accuracy\/","712e5c39":"# Read in the data\nINPUT_DIR = '..\/input\/m5-forecasting-accuracy'\ncal = pd.read_csv(f'{INPUT_DIR}\/calendar.csv')\nstv = pd.read_csv(f'{INPUT_DIR}\/sales_train_validation.csv')\nss = pd.read_csv(f'{INPUT_DIR}\/sample_submission.csv')\nsellp = pd.read_csv(f'{INPUT_DIR}\/sell_prices.csv')\nste = pd.read_csv(f'{INPUT_DIR}\/sales_train_evaluation.csv')","71ff81cf":"ss.head()","5c4dc7f7":"ste.head()","10bd7cc7":"stv.head()","5426857c":"d_cols = [c for c in ste.columns if 'd_' in c]","6952877c":"ste_tmp=ste.set_index('id')[d_cols]\\\n    .T\nste_tmp['d']=ste_tmp.index\nste_tmp.head()","9752db9a":"date=ste_tmp.index.values\nprint(date)","49ddb65a":"ste_cal=ste_tmp.merge(cal, left_on='d', right_on='d',how='outer')\ndf=ste_cal","2233e3e3":"df_x=df[['wm_yr_wk','wday']]\nprint(df_x.query('index == \"1940\"'))","517c4d58":"\n#from sklearn.model_selection import train_test_split\n#x_train, x_test = train_test_split(df_x, train_size=0.6, shuffle=False)\nx_train=df_x[:1941]\nx_test=df_x[1941:]\nprint(x_train)\nprint(x_test)","7d51d589":"#yosousurudake\nfrom sklearn.linear_model import LinearRegression as LR \npredict_y=[]\nfor i in range(0,30489):\n    df_y=df.iloc[:,[i]]\n    y_train=df_y[:1941]\n    model1 = LR()\n    model1.fit(x_train, y_train)\n    predict_y.append(model1.predict(x_test).tolist())","7267b5f8":"print(predict_y[0])","000ffddd":"print(len(predict_y))","0b9e79d7":"print(ss.loc[0:0, 'F1': 'F28'])\nprint(predict_y[0])","26a653f0":"for i in range(0,len(predict_y)):\n    predict_y[i] = [float(x) for y in predict_y[i] for x in y]\n    \n\n#predict_y[0] = [float(x) for y in predict_y[0] for x in y]  ","0b39d5f9":"print(predict_y[2])","eca97d0e":"ss.head()","d8d7f190":"f_cols = [c for c in ss.columns if 'F' in c]","d72c3a8a":"ss_tmp=ss.set_index('id')[f_cols]\\\n    .T\nss_tmp['f']=ss_tmp.index","b9dfd8fb":"ss_tmp.columns","d7ac0f9b":"ss_tmp.head()","0a7a55e5":"ste_columns=stv['id']\n#ste_columns=ste_tmp.columns\nforecast_ste=pd.DataFrame(columns=ste_columns)\nprint(ste_columns)","22e6382f":"for i in range(0, len(predict_y)):\n    forecast_ste.loc[:, forecast_ste.columns[i]]=predict_y[i]\n    ","29eacef4":"forecast_ste.head()","719d9820":"forecast=forecast_ste.T\nforecast.reset_index()\nforecast['id'] = forecast.index","dc5685a4":"forecast.columns","e5ab2dfb":"forecast=forecast.rename(columns={'id': 'ID'})\nforecast['ID']","98089061":"#ste_cal=ste_tmp.merge(cal, left_on='d', right_on='d',how='outer')\nnew_ss=ss.merge(forecast, left_on='id', right_on='ID', how='left')\nnew_ss.head()","3c17c21c":"for i in range(0,28):\n    new_ss['F'+str(i+1)]=new_ss[i]\n    del new_ss[i]\ndel new_ss['ID']\nnew_ss.head()","fe2a1825":"new_ss=new_ss.fillna(0)","8ecc20bd":"new_ss.to_csv('submission.csv', index=False)","8c4c2d05":"\u5b66\u7fd2\u7528\u3092\u4f5c\u308b","9e00dc56":"id\u3060\u3068\u540d\u79f0\u88ab\u308a\u306e\u305f\u3081ID\u306b\u5909\u66f4","9d98aa07":"ste\u3068\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u7d50\u5408\u3057\u66dc\u65e5\u3068\u9031\u756a\u53f7\u3092\u53d6\u5f97","1884aca6":"ss\u306e\u65e5\u4ed8\u3082\u7e26\u6301\u3061\u306b\u5909\u63db\u3059\u308b","95455d4e":"\u65e5\u4ed8\u3092\u7e26\u6301\u3061\u306b\u3059\u308b"}}