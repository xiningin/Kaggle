{"cell_type":{"cf6a683d":"code","2d4a9605":"code","f38bfcba":"code","e304ab96":"code","142f63cb":"code","fbf3d997":"code","84e48efa":"code","512b8b12":"code","26dc5348":"code","7a0bad00":"code","55962b04":"code","4371df10":"code","d7e386e2":"markdown"},"source":{"cf6a683d":"import numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport missingno as msno\nfrom pathlib import Path\nfrom tqdm import tqdm\nimport wandb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ntrain=pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv')\ntest=pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","2d4a9605":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import KFold\nimport tensorflow as tf","f38bfcba":"train[\"file_path\"] = train[\"Id\"].apply(lambda x: \"..\/input\/petfinder-pawpularity-score\/train\/\" + x + \".jpg\")\ntest[\"file_path\"] = test[\"Id\"].apply(lambda x: \"..\/input\/petfinder-pawpularity-score\/test\/\" + x + \".jpg\")","e304ab96":"image_size = 128\ndef preprocess(image_url):\n    image_string = tf.io.read_file(image_url)\n    image = tf.image.decode_jpeg(image_string, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n#     image = tf.image.central_crop(image, 1.0)\n    image = tf.image.resize(image, (image_size, image_size))\n    return image\nx_train=[]\nfor i in train['file_path']:\n    x1=preprocess(i)\n    x_train.append(x1)","142f63cb":"test2=[]\nfor i in test['file_path']:\n    x1=preprocess(i)\n    test2.append(x1)\ntest2=np.array(test2)","fbf3d997":"x_train=np.array(x_train)\ny_train=train['Pawpularity']\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x_train,y_train,test_size=0.2)","84e48efa":"inputs=keras.Input(shape=(128,128,3))\nx=inputs\nx=keras.layers.Conv2D(filters=4,kernel_size=3,strides=2,padding='same',activation='relu')(x)\nx=keras.layers.Conv2D(filters=8,kernel_size=3,strides=2,padding='same',activation='relu')(x)\nx=keras.layers.Conv2D(filters=16,kernel_size=3,strides=2,padding='same',activation='relu')(x)\nx=keras.layers.Conv2D(filters=32,kernel_size=3,strides=2,padding='same',activation='relu')(x)\nx=keras.layers.Flatten()(x)\nx=keras.layers.Dense(128, activation = \"relu\")(x)\nx=keras.layers.Dropout(0.5)(x)\noutput = tf.keras.layers.Dense(1)(x)\nmodel = tf.keras.Model(inputs=inputs, outputs=output)","512b8b12":"early_stop = tf.keras.callbacks.EarlyStopping(\n    patience=5\n    )\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(\n    factor=0.1,\n    patience=2, \n    min_lr=1e-9\n    )\ncallbacks = [early_stop,reduce_lr]","26dc5348":"model.compile(loss='mse', optimizer='Adam', metrics=[tf.keras.metrics.RootMeanSquaredError(name=\"rmse\"), \"mae\", \"mape\"])","7a0bad00":"history = model.fit(x_train,y_train, epochs=25,batch_size=32,validation_data = (x_test,y_test),callbacks=callbacks)","55962b04":"cnn_pred=model.predict(test2)","4371df10":"cnn=pd.DataFrame()\ncnn['Id']=test['Id']\ncnn['Pawpularity']=cnn_pred\ncnn.to_csv('submission.csv',index=False)","d7e386e2":"# **Background**\nI did EDA and used lightGBM to predict target and score 20.5.\nhttps:\/\/www.kaggle.com\/k589k589\/lightgbm-eda\n\nThis time,I try to use CNN to predict it.\n\nIs it better?\n\nLet's take a look at it!!"}}