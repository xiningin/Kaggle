{"cell_type":{"3e89370b":"code","fbbc38dc":"code","39fe4adc":"code","9547cc6b":"code","e40a0988":"code","3c1ebad3":"code","204a1bb6":"code","6e8a8f1e":"code","d7bea873":"code","31784edc":"code","7c29de3e":"code","00706a4c":"code","704c6de1":"code","950f5b6e":"code","daf5c389":"code","f72c1fe7":"code","6174ca57":"code","1a5a3e3c":"code","d6896308":"code","2d4dcaa7":"code","c86763b8":"code","7b8959bf":"code","3cd28459":"code","af876e62":"code","613ab1e3":"code","76ec836b":"code","7521068c":"code","25a25060":"code","924aee2c":"code","3f995c0e":"code","045201f5":"code","1a096e99":"code","13f7f4cd":"code","9c1d08e6":"code","7295c8f6":"code","2354e866":"code","e58b8e9b":"code","51067467":"code","a33b347c":"code","b8e85e4b":"markdown","3e1419e1":"markdown","17cb7c28":"markdown","c173aba3":"markdown","db034027":"markdown","c8926d0b":"markdown","58d1e2ab":"markdown","28937337":"markdown","0c39fb4c":"markdown","7a4098b1":"markdown","2ec1fa8b":"markdown","61b82fad":"markdown","f769dddb":"markdown","bc5cceb3":"markdown","1bac04d2":"markdown","bddd2181":"markdown","284a6db9":"markdown","fffc9e81":"markdown","c64178c6":"markdown","bc2c1363":"markdown","21e92e54":"markdown","e1b6daec":"markdown","027b2b95":"markdown","866887b0":"markdown","08fa7b13":"markdown"},"source":{"3e89370b":"import datetime\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import r2_score","fbbc38dc":"dataset = pd.read_csv('..\/input\/used-cars-price-prediction\/train-data.csv')\ndataset.head()","39fe4adc":"dataset.shape","9547cc6b":"dataset.info()","e40a0988":"X_train, X_test, y_train, y_test = train_test_split(dataset.iloc[:, :-1], \n                                                    dataset.iloc[:, -1], \n                                                    test_size = 0.3, \n                                                    random_state = 42)","3c1ebad3":"X_train = X_train.iloc[:, 1:]\nX_test = X_test.iloc[:, 1:]","204a1bb6":"X_train['Name'].value_counts()","6e8a8f1e":"make_train = X_train['Name'].str.split(' ',expand = True)\nmake_test = X_test['Name'].str.split(' ',expand = True)\n\nX_train['Manufacturer'] = make_train[0]\nX_test[\"Manufacturer\"] = make_test[0]","d7bea873":"plt.figure(figsize = (12, 8))\nplot = sns.countplot(x = 'Manufacturer', data = X_train)\nplt.xticks(rotation = 90)\nfor p in plot.patches:\n    plot.annotate(p.get_height(), \n                        (p.get_x() + p.get_width() \/ 2.0, \n                         p.get_height()), \n                        ha = 'center', \n                        va = 'center', \n                        xytext = (0, 5),\n                        textcoords = 'offset points')\n\nplt.title(\"Count of cars based on manufacturers\")\nplt.xlabel(\"Manufacturer\")\nplt.ylabel(\"Count of cars\")","31784edc":"# Let's see the Transmission vs. Price\nplt.figure(figsize=(12,6))\nsns.boxplot(x='Price',y='Transmission',data=dataset)\nplt.title(\"Price distribution according to the transmission type of the car\", fontsize=20,ha='center')","7c29de3e":"plt.figure(figsize=(14,6))\nsns.boxplot(x='Price',y='Location',data=dataset)\nplt.title(\"Price distribution according to the sales location of the car\", fontsize=20,ha='center')","00706a4c":"axis = dataset.groupby('Year')[['Price']].mean().plot(figsize=(10,5),marker='o',color='r')\nplt.title(\"Prices of the cars as per the year of sales\", fontsize=20,ha='center')","704c6de1":"import plotly.express as px","950f5b6e":"axis = dataset.groupby('Year')[['Kilometers_Driven']].mean().plot(figsize=(10,5),marker='o',color='r')\nplt.title(\"Kilometers driven over the course of years\", fontsize=20,ha='center')","daf5c389":"fig = px.scatter(dataset,x='Price', y='Kilometers_Driven')\nfig.update_layout(title='Price v\/s Kilometers_driven',xaxis_title=\"Kilometers Driven\",yaxis_title=\"Price\")\nfig.show()","f72c1fe7":"fig = px.scatter(dataset,x='Seats', y='Price')\nfig.update_layout(title='Price v\/s No. of seats',xaxis_title=\"Number of seats\",yaxis_title=\"Price\")\nfig.show()","6174ca57":"X_train.drop('Name',axis = 1,inplace = True)\nX_test.drop('Name', axis = 1, inplace = True)","1a5a3e3c":"X_train.drop('Location',axis = 1,inplace = True)\nX_test.drop('Location', axis = 1, inplace = True)","d6896308":"curr_time = datetime.datetime.now()\nX_train['Year'] = X_train['Year'].apply(lambda x: curr_time.year - x)\nX_test['Year'] = X_test['Year'].apply(lambda x: curr_time.year - x)","2d4dcaa7":"X_train[\"Kilometers_Driven\"]","c86763b8":"mileage_train = X_train[\"Mileage\"].str.split(\" \", expand = True)\nmileage_test = X_test[\"Mileage\"].str.split(\" \", expand = True)\n\nX_train[\"Mileage\"] = pd.to_numeric(mileage_train[0], errors = 'coerce')\nX_test[\"Mileage\"] = pd.to_numeric(mileage_test[0], errors = 'coerce')","7b8959bf":"print(sum(X_train[\"Mileage\"].isnull()))\nprint(sum(X_test[\"Mileage\"].isnull()))","3cd28459":"X_train['Mileage'].fillna(X_train['Mileage'].astype('float64').mean(),inplace = True)\nX_test['Mileage'].fillna(X_test['Mileage'].astype('float64').mean(),inplace = True)","af876e62":"cc_train = X_train[\"Engine\"].str.split(\" \", expand = True)\ncc_test = X_test[\"Engine\"].str.split(\" \", expand = True)\nX_train[\"Engine\"] = pd.to_numeric(cc_train[0], errors = 'coerce')\nX_test[\"Engine\"] = pd.to_numeric(cc_test[0], errors = 'coerce')\n\nbhp_train = X_train[\"Power\"].str.split(\" \", expand = True)\nbhp_test = X_test[\"Power\"].str.split(\" \", expand = True)\nX_train[\"Power\"] = pd.to_numeric(bhp_train[0], errors = 'coerce')\nX_test[\"Power\"] = pd.to_numeric(bhp_test[0], errors = 'coerce')","613ab1e3":"X_train[\"Engine\"].fillna(X_train[\"Engine\"].astype(\"float64\").mean(), inplace = True)\nX_test[\"Engine\"].fillna(X_train[\"Engine\"].astype(\"float64\").mean(), inplace = True)\n\nX_train[\"Power\"].fillna(X_train[\"Power\"].astype(\"float64\").mean(), inplace = True)\nX_test[\"Power\"].fillna(X_train[\"Power\"].astype(\"float64\").mean(), inplace = True)\n\nX_train[\"Seats\"].fillna(X_train[\"Seats\"].astype(\"float64\").mean(), inplace = True)\nX_test[\"Seats\"].fillna(X_train[\"Seats\"].astype(\"float64\").mean(), inplace = True)","76ec836b":"X_train.drop([\"New_Price\"], axis = 1, inplace = True)\nX_test.drop([\"New_Price\"], axis = 1, inplace = True)","7521068c":"X_train = pd.get_dummies(X_train, columns = [\"Manufacturer\", \"Fuel_Type\", \"Transmission\", \"Owner_Type\"],drop_first = True)","25a25060":"X_test = pd.get_dummies(X_test, columns = [\"Manufacturer\", \"Fuel_Type\", \"Transmission\", \"Owner_Type\"],drop_first = True)","924aee2c":"missing_cols = set(X_train.columns) - set(X_test.columns)\nfor col in missing_cols:\n    X_test[col] = 0\nX_test = X_test[X_train.columns]\nprint(missing_cols)","3f995c0e":"X_train.shape,X_test.shape","045201f5":"standardScaler = StandardScaler()\nstandardScaler.fit(X_train)\nX_train = standardScaler.transform(X_train)\nX_test = standardScaler.transform(X_test)","1a096e99":"linearRegression = LinearRegression()\nlinearRegression.fit(X_train, y_train)\ny_pred = linearRegression.predict(X_test)\nr2_score(y_test, y_pred)","13f7f4cd":"rf = RandomForestRegressor(n_estimators = 100)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nr2_score(y_test, y_pred)","9c1d08e6":"from sklearn.model_selection import RandomizedSearchCV","7295c8f6":"RF_params={'bootstrap': [True, False],\n 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n 'max_features': ['auto', 'sqrt'],\n 'min_samples_leaf': [1, 2, 4],\n 'min_samples_split': [2, 5, 10],\n 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}","2354e866":"random_search_rf=RandomizedSearchCV(rf,param_distributions=RF_params,n_iter=10,n_jobs=-1,cv=5,verbose=3)","e58b8e9b":"random_search_rf.fit(X_train,y_train)","51067467":"random_search_rf.best_params_","a33b347c":"rf = RandomForestRegressor(n_estimators= 1600,\n min_samples_split= 5,\n min_samples_leaf= 1,\n max_features= 'sqrt',\n max_depth= 50,\n bootstrap= False)\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nr2_score(y_test, y_pred)","b8e85e4b":"### Kilometers_Driven\n\n`Kilometers_Driven` is a numerical column with a certain range of values.","3e1419e1":"As seen I got a better accuracy with RandomForest. But I did not hypertune the parameters. \nNow I will use **RandomizedSearchCV** for finding the best params of RandomForest for my given training data.","17cb7c28":"### Location\n\nLocation should not be a determinant for the price of a car and I will safely remove it.","c173aba3":"## Exploratory Data Analysis\n\nLet's explore the various columns and draw information about how useful each column is. I'll also modify the test data based on training data.","db034027":"It might be possible that the dummy column creation would be different in test and train data, thus, I'd fill in all missing columns with zeros.","c8926d0b":"Finally, as the last step of data processing, I'll scale the data.","58d1e2ab":"### Name\n\nLet's explore the various cars in the dataset.","28937337":"### Fuel_Type, Transmission,  and Owner_Type\n\nAll these columns are categorical columns which should be converted to dummy variables before being used.","0c39fb4c":"### Index\n\nThe first column is the index for each data point and hence we can simply remove it.","7a4098b1":"### I will split the dataset into 70% training and 30% testing data.","2ec1fa8b":"## Mileage\n\nThis column defines the mileage of the car. I need to extract the numerical value out of each string and save it.","61b82fad":"There is one missing value in each. I'll replace the missing value with the mean value of the column based on the training data.","f769dddb":"### Engine, Power and Seats\n\nThe `Engine` values are defined in CC so I need to remove `CC` from the data. Similarly, `Power` has bhp, so I'll remove `bhp` from it. Also, as there are missing values in `Engine`, `Power` and `Seats`, I'll again replace them with the mean.","bc5cceb3":"****The **Random Forest model with hyper tuned parameters** performed the best with a R2 score of **0.90**","1bac04d2":"### Read dataset\nI'll read the dataset and get information about it.","bddd2181":"### Year \n\nYear has no big important. But how old the car is, will be really important if I want to buy a second hand car.","284a6db9":"The data range is really varied and the high values might affect prediction, thus, it is really important that scaling be applied to this column for sure.","fffc9e81":"### New Price\n\nAs most of the values are missing, I'll drop this column altogether.","c64178c6":"# Used cars price predictions.","bc2c1363":"### The goal of this notebook is to predict the prices of used cars in India. \n\n### Three important steps involved in this notebook are:\n\n* Data cleaning\/ Feature engineering.\n* Exploratory Data Analysis.\n* Predicting the price of car using price using Machine Learning.\n","21e92e54":"## Training and predicting\n\nI'll create a **Linear Regression** model, an **XGboost** model and a **Random Forest** model to train on the data and use it for future predictions.","e1b6daec":"The name of car is not so important, but the name of manufacturer is. Hence considering only the manufacturer name.","027b2b95":"Maximum cars in the dataset are by the manufacturer **Maruti** and there are no null values.\n\nI'll also drop the `Name` column.","866887b0":"## Data Processing\n\nNow that I have worked with the training data, I will create dummy columns for categorical columns before I begin training.","08fa7b13":"Let's check for missing values."}}