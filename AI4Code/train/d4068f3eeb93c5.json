{"cell_type":{"7536680a":"code","4c117c1e":"code","0e48d617":"code","4c9b6b70":"code","71ec8483":"code","c765f57e":"code","5891c7e7":"code","5925e09b":"code","273ad32e":"code","bdf469ef":"code","5116af52":"code","cd20ea47":"code","acc3c6cf":"code","8f76b874":"code","4683fc48":"code","4d6888e5":"code","ae8a53ae":"code","32e5b453":"markdown","2b98367a":"markdown","172d1aaf":"markdown"},"source":{"7536680a":"import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline","4c117c1e":"keras.__version__","0e48d617":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","4c9b6b70":"# Load the training data and the testing data from the fashionmnist dataset\n# which is mounted under ..\/input\/fashionmnist\n#\ndata_train_file = \"..\/input\/fashionmnist\/fashion-mnist_train.csv\"\ndata_test_file = \"..\/input\/fashionmnist\/fashion-mnist_test.csv\"\n\ndf_train = pd.read_csv(data_train_file)\ndf_test = pd.read_csv(data_test_file)\n\ndf_train.head()","71ec8483":"def get_features_labels(df):\n    # select all columns by the first column as that is the label column\n    # normalize the data to be between 0-1 by dividing by 255\n    # since the greyscale ranges from 0 to 255\n    features = df.values[:,1:]\/255\n    \n    #load the labels for this dataframe\n    labels = df['label'].values\n    return features, labels","c765f57e":"train_features, train_labels = get_features_labels(df_train)\ntest_features, test_labels = get_features_labels(df_test)","5891c7e7":"print( train_features.shape )\nprint( train_labels.shape )","5925e09b":"def examine_data( index ):\n    plt.figure()\n    _ = plt.imshow(np.reshape(train_features[index,:], (28,28)), 'gray')","273ad32e":"examine_data(42)","bdf469ef":"# Keras has a utility to one-hot encode categorical data\ntrain_labels = tf.keras.utils.to_categorical(train_labels)\ntest_labels = tf.keras.utils.to_categorical(test_labels)","5116af52":"train_labels.shape","cd20ea47":"test_labels[42]","acc3c6cf":"#define the model\nmodel = tf.keras.Sequential()\n\n# add a dense (fully-connected) layer that takes in the 784 inputs of the 28x28 image\nmodel.add(tf.keras.layers.Dense(30, activation=tf.nn.relu, input_shape=(784,)))\n\n#add a dense layer that takes the output of the previous layer and has 20 output nodes\nmodel.add(tf.keras.layers.Dense(20, activation=tf.nn.relu))\n\n#add a dense layer that takes the output of the previous layer, and has 10 output nodes and utilizes the softmax function to \n# generate the probability of 1 of 10 classes\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\nmodel.compile(loss='categorical_crossentropy',\n             optimizer='rmsprop',\n             metrics=['accuracy'])\n\nmodel.summary()","8f76b874":"EPOCHS=6\nBATCH_SIZE=128","4683fc48":"model.fit(train_features, train_labels, epochs=EPOCHS, batch_size=BATCH_SIZE)","4d6888e5":"test_loss, test_acc = model.evaluate(test_features, test_labels)","ae8a53ae":"print('test_accuracy:', test_acc)","32e5b453":"**Preprocess the data**","2b98367a":"Create a model for training and testing","172d1aaf":"**One hot Encode the labels**"}}