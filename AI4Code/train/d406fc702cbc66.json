{"cell_type":{"4ee37ec8":"code","901b0833":"code","cf8807a7":"code","dcf3c965":"code","d0f70868":"code","eba8230d":"code","a231c51b":"code","16630ba5":"code","b596a213":"code","b9e4ea45":"code","24f9a3f6":"code","8305052a":"code","91907270":"code","c3efd72a":"code","2e97d22c":"code","b59cdecf":"code","c4ca2c04":"code","47255324":"code","a54b9975":"code","e5e8c164":"code","54a211c9":"code","630f71ce":"code","abded45f":"code","e70222f5":"code","84f2b367":"code","3a3d2480":"code","a1b40c89":"code","5bb20762":"code","11b69c45":"code","6e242937":"code","f169a009":"code","dbacbf70":"code","38e3fab0":"code","3b246c5f":"markdown","56c3b8eb":"markdown"},"source":{"4ee37ec8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","901b0833":"# Pandas\nimport pandas as pd\n\n# Scikit learn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, accuracy_score, confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils import shuffle\nfrom sklearn.utils import class_weight\n\n# Keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Convolution2D, Conv2D, MaxPooling2D, GlobalAveragePooling2D\nfrom keras.utils import to_categorical\n\n\n# Audio\nimport librosa\nimport librosa.display\n\n# Plot\nimport matplotlib.pyplot as plt\n\n# Utility\nimport glob\nimport numpy as np\nfrom tqdm import tqdm\nimport IPython.display as ipd\nfrom timeit import default_timer as timer\n","cf8807a7":"# upload the data\nclasses = pd.read_csv('..\/input\/urbansound8k\/UrbanSound8K.csv')","dcf3c965":"classes_code = {v:k for k,v in zip(classes[\"class\"], classes[\"classID\"])}\n# A dictionnary doesn't accept double values\nprint(classes_code)","d0f70868":"# Building our dataset\ndataset = list()\nfor folder in glob.glob('..\/input\/urbansound8k\/**'):\n    list_sounds_path = glob.glob(folder+\"\/\/**\")\n    for elm in list_sounds_path:\n        label = elm.split(\".wav\")[0][-5]\n        if label == '-':\n            label = elm.split(\".wav\")[0][-6]\n        dataset.append({\"file_name\" : elm,\n                       \"label\" : label})\n        pass\n    pass\npass\ndataset = pd.DataFrame(dataset)\ndataset = shuffle(dataset, random_state = 42)","eba8230d":"dataset.head()","a231c51b":"train, test = train_test_split(dataset, test_size = 0.2, random_state = 42)","16630ba5":"print(train.shape)\nprint(test.shape)","b596a213":"def extract_feature(file_name):\n    X, sample_rate = librosa.load(file_name)\n    mfccs = librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40)\n    return mfccs","b9e4ea45":"x_train = list()\ny_train = list()\nfor i in tqdm(range(len(train))):\n    x_train.append(extract_feature(train.file_name.iloc[i]))\n    y_train.append(train.label.iloc[i])\n    pass\npass","24f9a3f6":"x_test = list()\ny_test = list()\nfor i in tqdm(range(len(test))):\n    x_test.append(extract_feature(test.file_name.iloc[i]))\n    y_test.append(test.label.iloc[i])\n    pass\npass","8305052a":"print(\"x_train\",len(x_train),\"y_train\", len(y_train))","91907270":"print(\"x_train\",len(x_train),\"y_train\", len(y_train))","c3efd72a":"X_train, Y_train = list(), list()\nfor x,y in zip(x_train,y_train):\n    if x.shape == (40, 173):\n        X_train.append(x)\n        Y_train.append(y)\n        pass\n    pass\npass","2e97d22c":"X_test, Y_test = list(), list()\nfor x,y in zip(x_test,y_test):\n    if x.shape == (40, 173):\n        X_test.append(x)\n        Y_test.append(y)\n        pass\n    pass\npass","b59cdecf":"X_train = np.array(X_train)\nY_train = np.array(Y_train)\n\nX_test = np.array(X_test)\nY_test = np.array(Y_test)","c4ca2c04":"print(X_train.shape)\nprint(X_test.shape)","47255324":"%%time\nencoder = LabelEncoder()\nencoder.fit(Y_train)\n\nY_train = encoder.transform(Y_train)\nY_test = encoder.transform(Y_test)","a54b9975":"X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2], 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], 1)\nY_train1 = to_categorical(Y_train)\nY_test1 = to_categorical(Y_test)","e5e8c164":"model = Sequential()\nmodel.add(Conv2D(filters=16, kernel_size=2, input_shape=(40, 173, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=32, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=64, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters=128, kernel_size=2, activation='relu'))\nmodel.add(MaxPooling2D(pool_size=2))\nmodel.add(Dropout(0.5))\nmodel.add(GlobalAveragePooling2D())\n\nmodel.add(Dense(10, activation='softmax'))","54a211c9":"model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\n","630f71ce":"history = model.fit(X_train, Y_train1,\n              batch_size=128,\n              epochs=300,\n              validation_data=(X_test, Y_test1),\n              shuffle=True)","abded45f":"plt.figure(figsize=[14,10])\nplt.subplot(211)\nplt.plot(history.history['loss'],'r',linewidth=3.0)\nplt.plot(history.history['val_loss'],'b',linewidth=3.0)\nplt.legend(['Training loss', 'Validation Loss'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Loss',fontsize=16)\nplt.title('Loss Curves',fontsize=16)\n \n# Accuracy Curves\nplt.figure(figsize=[14,10])\nplt.subplot(212)\nplt.plot(history.history['accuracy'],'r',linewidth=3.0)\nplt.plot(history.history['val_accuracy'],'b',linewidth=3.0)\nplt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Curves',fontsize=16)","e70222f5":"model_name = \"urban_classification.h5\"\nmodel.save(model_name)\nprint('Saved trained model at %s ' % model_name)","84f2b367":"predictions = model.predict(X_test, verbose=1)","3a3d2480":"print(np.argmax(predictions[0]))\nprint(Y_test[0])","a1b40c89":"scores = model.evaluate(X_test, Y_test1, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","5bb20762":"print(X_train.shape)","11b69c45":"X_train2 = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2])\nX_test2 = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2])\nY_train3 = to_categorical(Y_train)\nY_test3 = to_categorical(Y_test)","6e242937":"import keras\nfrom keras.layers import GRU\n\ninput_shape = (40, 173)\n\nmodel = keras.models.Sequential()\nmodel.add(GRU(1025, input_shape=input_shape))\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')\nmodel.summary()","f169a009":"history = model.fit(X_train2, Y_train3,\n              batch_size=173,\n              epochs=100,\n              validation_data=(X_test2, Y_test3),\n              shuffle=True)","dbacbf70":"plt.figure(figsize=[14,10])\nplt.subplot(211)\nplt.plot(history.history['loss'],'r',linewidth=3.0)\nplt.plot(history.history['val_loss'],'b',linewidth=3.0)\nplt.legend(['Training loss', 'Validation Loss'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Loss',fontsize=16)\nplt.title('Loss Curves',fontsize=16)\n \n# Accuracy Curves\nplt.figure(figsize=[14,10])\nplt.subplot(212)\nplt.plot(history.history['accuracy'],'r',linewidth=3.0)\nplt.plot(history.history['val_accuracy'],'b',linewidth=3.0)\nplt.legend(['Training Accuracy', 'Validation Accuracy'],fontsize=18)\nplt.xlabel('Epochs ',fontsize=16)\nplt.ylabel('Accuracy',fontsize=16)\nplt.title('Accuracy Curves',fontsize=16)","38e3fab0":"scores = model.evaluate(X_test2, Y_test3, verbose=1)\nprint('Test loss:', scores[0])\nprint('Test accuracy:', scores[1])","3b246c5f":"## Dataset: [UrbanSound8K](https:\/\/www.kaggle.com\/chrisfilo\/urbansound8k) \n    8732 labeled sound excerpts","56c3b8eb":"# Urban Sound Classification"}}