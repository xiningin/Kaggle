{"cell_type":{"e504bc50":"code","b9afac7c":"code","cdbabbaf":"code","a6aaa976":"code","93ee9430":"code","2baff04f":"code","f17a99cb":"code","6a3bfe8d":"code","29cbaf8f":"code","87c2253c":"code","85837237":"code","179e8c6c":"code","aeb06876":"code","afda4b98":"code","7e069137":"code","75d6e5bf":"code","75e4222d":"code","4e7319fd":"code","fc92706b":"code","02d59cc6":"code","d3e71965":"code","c2d602a2":"code","a86a11d6":"code","a46d86a2":"code","350164f4":"code","5ffb597c":"code","9e7fe974":"code","f5fde1d5":"code","803cbf3d":"code","546fffdc":"code","3353b94e":"code","3fb90c72":"markdown"},"source":{"e504bc50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9afac7c":"\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom sklearn.model_selection import StratifiedKFold\n%matplotlib inline\nimport warnings","cdbabbaf":"df_train=pd.read_csv('..\/input\/mnesframingham\/train.csv')\ndf_test=pd.read_csv('..\/input\/mnesframingham\/test.csv')","a6aaa976":"df_train","93ee9430":"df_train.info()","2baff04f":"df_test.info()","f17a99cb":"#\u6b20\u640d\u5024\u306b\u5e73\u5747\u5024\u3092\u4ee3\u5165\ndf_train= df_train.fillna(df_train[:df_train.shape[0]].mean())\ndf_test = df_test.fillna(df_test[:df_test.shape[0]].mean())","6a3bfe8d":"df_train.describe()","29cbaf8f":"df_train[df_train['BPMeds']==0].describe()","87c2253c":"#\u7279\u5fb4\u91cf\u4f5c\u6210\ndef plus_feature(df):\n    df['cig_total']=(df['age']-20)*df['cigsPerDay']\n    df['r-chol']=0\n    df['r-chol']=df['r-chol'].where(df['totChol']<=250,1)\n    df['r-chol']=df['r-chol'].where(df['totChol']<=300,3)\n    df['rangeBP']=df['sysBP']-df['diaBP']\n    df['aveBP']=(df['sysBP']-df['diaBP'])\/3+df['diaBP']\n    df['r-BP']=0\n    #df['r-BP']=df['r-BP'].where(df['aveBP']<=110,1)\n    df['r-BP']=df['r-BP'].where(df['aveBP']<=130,1)\n    #df['r-BP']=df['r-BP'].where(df['aveBP']<=140,10)\n    df['r-age']=0.1\n   # df['r-age']=df['r-age'].where(df['age']<=40,1)\n    df['r-age']=df['r-age'].where(df['age']<=55,1)\n    df['r-age']=df['r-age'].where(df['age']<=62,2)\n    df['r-age']=df['r-age'].where(df['age']<=65,10)\n    df['r-cig']=0\n    df['r-cig']=df['r-cig'].where(df['cig_total']<=1,0.1)\n    df['r-cig']=df['r-cig'].where(df['cig_total']<=1300,1)\n    df['r-cig']=df['r-cig'].where(df['cig_total']<=1400,5)\n    df['r-cig']=df['r-cig'].where(df['cig_total']<=1700,10)\n    df['r-bmi']=0\n    df['r-bmi']=df['r-bmi'].where(df['BMI']<=37,1)\n    df['r-glu']=0\n    df['r-glu']=df['r-glu'].where(df['glucose']<=100,1)\n    df['risk']=df['age']*(df['diabetes']*2+df['r-chol']+df['r-BP']+df['male']*1.5+df['r-cig']+df['r-bmi']*2+df['prevalentStroke']*3+df['prevalentHyp']*2+df['BPMeds']*2)\n    df['risk1']=(df['diabetes']*2+df['r-chol']+df['r-BP']+df['male']*1.5+df['r-cig']+df['r-bmi']*2+df['prevalentStroke']*10+df['prevalentHyp']*2+df['BPMeds']*2)\n    df['risk2']=(df['age']*(df['diabetes']+df['male']+df['currentSmoker']+df['r-bmi']+df['prevalentStroke']+df['prevalentHyp']+df['BPMeds']+df['r-BP']+df['r-glu']))\n    #df['risk2']=df['risk2'].where(df['risk2']<=0,math.log10(df['risk2']))\n    #df['bmi-22']=df['BMI']-22\n    #df['hy']=df['prevalentHyp']-df['BPMeds']","85837237":"plus_feature(df_train)\nplus_feature(df_test)","179e8c6c":"df_train.describe()","aeb06876":"df_train.corr()","afda4b98":"#\u7528\u3044\u308b\u7279\u5fb4\u91cf\u3092\u9078\u629e\nfeat=['male',\n      'age', \n      #'education', \n      #'cigsPerDay',\n      'BPMeds',\n      'prevalentStroke', \n      'prevalentHyp', \n      'diabetes', \n      'totChol', \n      'sysBP',\n      'diaBP', \n      'BMI', \n    #'r-cig',\n    #'r-BP',\n   # 'r-chol',\n      #'heartRate', \n      'glucose', \n      'cig_total',\n      #'r-bmi',\n       'aveBP',\n      #'risk',\n   'rangeBP',\n    #'r-age'\n   # 'risk1',\n    'risk2'\n]\ntarget=['TenYearCHD']","7e069137":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMClassifier as lgbm\nimport optuna\nfrom optuna.samplers import TPESampler","75d6e5bf":"#df_train1=df_train[df_train['currentSmoker']==1]\n#df_train0=df_train[df_train['currentSmoker']==0]","75e4222d":"#\u5b66\u7fd2\ntrain,test=train_test_split(df_train,test_size=0.3,random_state=29)\nX_train = train[feat]\ny_train = train[target]\nX_test= test[feat]\ny_test = test[target]\nimport lightgbm as lgb\n#import optuna.integration.lightgbm as lgb\nparams = {'objective': 'binary',\n 'metric': 'auc',\n 'feature_pre_filter': False,\n 'lambda_l1': 0.0021844726757356287,\n 'lambda_l2': 0.10249820151505622,\n 'num_leaves': 4,\n 'feature_fraction': 0.9520000000000001,\n 'bagging_fraction': 0.5124058628486801,\n 'bagging_freq': 6,\n 'learning_rate': 0.0001,\n 'min_data_in_leaf': 20,\n 'min_child_samples': 20,\n 'num_iterations': 500000000,\n 'early_stopping_round': 50000}\nlgb_train = lgb.Dataset(X_train,y_train)\nlgb_val= lgb.Dataset(X_test,y_test)\n#model2\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3092\u8a66\u3057\u305f\u304b\u3089\u3067\u7279\u306b\u610f\u5473\u306f\u306a\u3044\u3067\u3059\nmodel2= lgb.train(\n        params,\n        lgb_train,\n        valid_sets=[lgb_train,lgb_val],\n        verbose_eval=10000,\n        num_boost_round=500,\n        early_stopping_rounds=10\n    )","4e7319fd":"#model2.params","fc92706b":"from matplotlib import pyplot as plt","02d59cc6":"#\u91cd\u8981\u5ea6\u306e\u53ef\u8996\u5316\nlgb.plot_importance(model2)\n\nplt.show()","d3e71965":"df_test.describe()","c2d602a2":"df_test.reset_index(drop=True, inplace=True)\ndf_test = df_test.rename(columns={'index': 'Id'})","a86a11d6":"df_test","a46d86a2":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\n#\u521d\u3081\u306f\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3092\u8a66\u3057\u305f\u304c\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\n\n#df_test0=df_test[df_test['currentSmoker']==0]\n#df_test1=df_test[df_test['currentSmoker']==1]\n#df_test['label1']=model1.predict(df_test[feat])\ndf_test['label2']=model2.predict(df_test[feat])\ndf_test['label']=df_test['label2']#*0.5+df_test['label1']*0.5\n#df_test0['label']= S\n#df_test1['label']=model1.predict(df_test1[feat])","350164f4":"df_test","5ffb597c":"df_test.describe()","9e7fe974":"#S=pd.merge(df_test0,df_test1,how='outer')","f5fde1d5":"solution=df_test['label']","803cbf3d":"solution = solution.reset_index()\nsolution = solution.rename(columns={'index': 'Id'})\nprint(solution.head())","546fffdc":"solution.to_csv(\"sample_submission.csv\", index=False ,encoding='utf-8')","3353b94e":"solution.describe()","3fb90c72":"Private Score:0.69932\u3067\u4e00\u756a\u9ad8\u304b\u3063\u305f\u3082\u306e\u3067\u3059\u3002\u3000Public Score\u306f\u30000.74840\u3067\u3057\u305f\u3002\n\u6c5a\u3044\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3059\u304c\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002"}}