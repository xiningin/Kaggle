{"cell_type":{"9f25f388":"code","27060230":"code","346ad8bb":"code","dc00fc21":"code","888b2a00":"code","d87fc72b":"code","e64a6e05":"code","050045cd":"code","423ff61d":"code","ba25e20a":"code","99af9303":"code","ddedc954":"code","fa068f59":"code","d1c44f67":"code","3161fb90":"code","68b43c79":"code","46ea24e4":"code","186cf276":"code","19d5f5bd":"code","97ee08d4":"code","359d56ee":"code","faccb649":"code","c4a759f9":"code","4b6e7d8a":"code","7b992032":"code","1de0edb9":"code","feec2618":"code","3aef238d":"code","9c0b5431":"code","8ab6392f":"code","6c7b069b":"code","f5c4c780":"code","0d5f779e":"code","e9f69639":"code","1dc6dbea":"code","9814dec6":"code","c7a26ffa":"code","7f1de744":"markdown","3a5837e3":"markdown"},"source":{"9f25f388":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27060230":"## 1. Leitura e an\u00e1lise dos metadados em CSV \nsample_submission = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\ntest = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')","346ad8bb":"train.head()","dc00fc21":"train.tail()","888b2a00":"train.describe(include='all')","d87fc72b":"test.describe(include='all')","e64a6e05":"cat_cols = ['patient_id', 'sex', 'anatom_site_general_challenge', 'diagnosis', 'benign_malignant']\nprint('Contagens dos atributos categ\u00f3ricos do conjunto de treino')\nfor col in cat_cols:\n    print('Contagem de valores da coluna {}'.format(col))\n    print(train[col].value_counts().head(20))\n    print('='*80)\n","050045cd":"cat_cols = ['patient_id', 'sex', 'anatom_site_general_challenge']\nprint('Contagens dos atributos categ\u00f3ricos do conjunto de teste')\nfor col in cat_cols:\n    print('Contagem de valores da coluna {}'.format(col))\n    print(test[col].value_counts().head(20))\n    print('='*80)\n","423ff61d":"submission = sample_submission","ba25e20a":"submission.to_csv('submission.csv', index=False)","99af9303":"pd.read_csv('submission.csv')","ddedc954":"## 2. Visualiza\u00e7\u00e3o de Imagens\nDATA_PATH = '..\/input\/siim-isic-melanoma-classification\/jpeg\/'\nTRAIN_PATH = f'{DATA_PATH}train\/'\nTEST_PATH = f'{DATA_PATH}test\/'","fa068f59":"import glob\n\nfilepaths = glob.glob(TRAIN_PATH+'\/*.jpg')","d1c44f67":"import numpy as np\nimport matplotlib.pyplot as plt\nimport random\nfrom keras.preprocessing.image import load_img\n\nimg2diag = train[['image_name', 'benign_malignant']].set_index('image_name')['benign_malignant'].to_dict()\n","3161fb90":"img_path = random.choice(filepaths)\nimg_name = img_path.split('\/')[-1].replace('.jpg', \"\")\nimg = load_img(img_path)\nimg_diagnostic = img2diag[img_name]\nimg_np = np.asarray(img)\nplt.imshow(img_np)\nplt.title(img_diagnostic)\nplt.show()","68b43c79":"## 3 - Cria\u00e7\u00e3o do modelo Baseline (Ponto de Partida)\n## 3.1 - Image data generator\n\n# TODO: Import the model and the preprocess_input function\nfrom keras.applications.resnet50 import preprocess_input\n\n# TODO: Import the ImageDataGenerator class\nfrom keras.preprocessing.image import ImageDataGenerator","46ea24e4":"# Shape in which all images are going to be reshaped\nTARGET_SHAPE = (224, 224, 3)\n\n# TODO: Initialize the data generator class \ndatagen = ImageDataGenerator(preprocessing_function=preprocess_input)","186cf276":"train_df_datagen = train[['image_name', 'benign_malignant']].copy()\ntrain_df_datagen['image_name'] = train_df_datagen['image_name']+'.jpg'\ntrain_df_datagen.head()","19d5f5bd":"N_BENIGN = 584\n\nfilter_benign = train_df_datagen['benign_malignant']=='benign'\nfilter_malignant = train_df_datagen['benign_malignant']=='malignant'\nsample_benign = train_df_datagen[filter_benign].sample(N_BENIGN, random_state=10)\n# Let's try to ignore the class balance test make before\n#sample_benign = train_df_datagen[filter_benign]","97ee08d4":"train_val_sampled = pd.concat([sample_benign, train_df_datagen[filter_malignant]])","359d56ee":"from sklearn.model_selection import train_test_split\n\ntrain_df, valid_df = train_test_split(train_val_sampled, \n                                      test_size=0.2, \n                                      random_state=1,\n                                      stratify=train_val_sampled['benign_malignant']\n                                     )","faccb649":"train_gen = datagen.flow_from_dataframe(train_df,\n                           TRAIN_PATH,\n                           'image_name',\n                           'benign_malignant',\n                           target_size=TARGET_SHAPE[:2],\n                            class_mode='sparse'\n                           )","c4a759f9":"valid_gen = datagen.flow_from_dataframe(valid_df,\n                           TRAIN_PATH,\n                           'image_name',\n                           'benign_malignant',\n                            target_size=TARGET_SHAPE[:2],\n                            class_mode='sparse',\n                            shuffle=False\n                           )","4b6e7d8a":"test_df_datagen = test[['image_name']]+'.jpg'\ntest_df_datagen.head()","7b992032":"test_gen = datagen.flow_from_dataframe(test_df_datagen,\n                            TEST_PATH,\n                            'image_name',\n                            target_size=TARGET_SHAPE[:2],\n                            class_mode=None,\n                            shuffle=False\n                           )","1de0edb9":"## 3.2 Criando modelo base\n# Leitura recomendada sobre ResNet e outros modelos: https:\/\/medium.com\/analytics-vidhya\/timeline-of-transfer-learning-models-db2a0be39b37 \nfrom keras.models import Sequential\nfrom keras.layers import Flatten, Dense, GlobalAveragePooling2D\nfrom keras.applications.resnet50 import ResNet50\n\n\nresnet_model = ResNet50(include_top=False, input_shape=TARGET_SHAPE, pooling='avg')","feec2618":"for layer in resnet_model.layers:\n    layer.trainable = False","3aef238d":"base_model = Sequential([resnet_model,\n                         Dense(1024, activation='relu'),\n                         Dense(2, activation='softmax')\n                        ])","9c0b5431":"## 3.3 Treinar modelo","8ab6392f":"import tensorflow as tf","6c7b069b":"from keras.optimizers import Adam\nbase_model.compile(optimizer=Adam(lr=1e-4), \n                   loss='sparse_categorical_crossentropy',\n                   metrics=['accuracy']\n                  )","f5c4c780":"base_model.fit_generator(train_gen,\n                         validation_data=valid_gen,\n                         epochs=3\n                        )","0d5f779e":"test_gen","e9f69639":"# Predict in the test set\npred = base_model.predict(test_gen)\n# Get the malignant columns\npred = pred[:, 1]","1dc6dbea":"submission_dict = {'image_name': test.image_name.values,\n              'target': pred}\n\nsubmission = pd.DataFrame(submission_dict)","9814dec6":"submission.to_csv('submission.csv', index=False)","c7a26ffa":"pd.read_csv('submission.csv')","7f1de744":"### Ideas and Next Steps\n- Include best practices on Keras from [here](https:\/\/github.com\/WittmannF\/course\/blob\/master\/day-4\/Best_Practices_Playground.ipynb) and [here](https:\/\/www.kaggle.com\/ipythonx\/tf-keras-melanoma-classification-starter-tabnet)\n    - Augmix, LRFinder, [attention](https:\/\/www.kaggle.com\/ibtesama\/melanoma-classification-with-attention), [effnet](https:\/\/www.kaggle.com\/andradaolteanu\/melanoma-competiton-aug-resnet-effnet-lb-0-91), [another effnet](https:\/\/www.kaggle.com\/nroman\/melanoma-pytorch-starter-efficientnet), [include more data](), \n- [Include metafeatures](https:\/\/www.kaggle.com\/titericz\/simple-baseline)\n- Unfreeze layers\n- Create multiple feature extractor and try different TL models\n","3a5837e3":"## Note\n> **This is a notebook that is being created for a Portuguese version of a Data Science class for Awari School. Hence, there will be many comments in portuguese. If there's any question, please leave a comment**\n\n### Playlist em V\u00eddeo Passo a Passo\n- [Link da Playlist](https:\/\/loom.com\/share\/folder\/8f3d5415a9fb4d37b8d6626d30b000b3)\n- [Notebook auxiliar utilizado na Playlist](https:\/\/github.com\/WittmannF\/course\/blob\/master\/day-4\/assignment-3-cats-dogs-solved.ipynb)"}}