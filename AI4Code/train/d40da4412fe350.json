{"cell_type":{"20dcbb88":"code","f6d5d3fa":"code","5923f38f":"code","7cfb6e48":"code","321b1295":"code","ef34172d":"code","907b8f4b":"code","6855f525":"code","2eb2f46d":"code","77164e32":"code","17e23eee":"code","e2986adc":"code","79695514":"markdown","f6865f0b":"markdown","f49a9f30":"markdown","d37c6122":"markdown","1f91c8cd":"markdown","882d8cf3":"markdown","0e2e4430":"markdown","e812233c":"markdown"},"source":{"20dcbb88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6d5d3fa":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndf.head()","5923f38f":"# Replace the data column into datetime type\n\ndf['date'] = pd.to_datetime(df['date'], format = \"%Y-%m-%d\")\ndf = df.fillna(0)\ndf.info()","7cfb6e48":"# imoprt necessary packages\nimport matplotlib.pyplot as plt\nimport seaborn as sns","321b1295":"df['vaccines'].unique()","ef34172d":"# Compare the number of country that use each type of vaccines\ncountry_vaccines = df[['country', 'vaccines']].drop_duplicates().set_index('country')\ncountry_vaccines = country_vaccines['vaccines'].str.get_dummies(sep=', ')\ncountries_each_vac  = pd.DataFrame(dict( country = country_vaccines.columns , num_vacs = [sum(country_vaccines[x]) for x in country_vaccines.columns] )).sort_values(by='num_vacs', ascending = False).reset_index()","907b8f4b":"# plotting the data\n\nplt.style.use('ggplot')\nplt.bar(countries_each_vac.country, height = countries_each_vac['num_vacs'])\nplt.xticks(rotation = 90)\nplt.show()","6855f525":"# Grouping data by country to see the vaccination\n\ntotal_vac = df.groupby('country')['total_vaccinations'].max().dropna().reset_index().sort_values(by = 'total_vaccinations',ascending = False).reset_index(drop = True)\n\n# Plotting the Data\n\nplt.bar(total_vac.head(15)['country'], height = total_vac.head(15)['total_vaccinations'])\nplt.yticks([x*(10**7) for x in np.arange(7)], ['0', '10', '20', '30', '40','50','60'])\nplt.xticks(rotation = 90)\nplt.title('Countries With most Vaccination')\nplt.ylabel('Number of Vaccinations (in million)')\nplt.xlabel('Country Name')\nplt.show()","2eb2f46d":"# Grouping data by country of the vaccinated people\n\ntotal_ppl_vac = df.groupby('country')['people_vaccinated'].max().dropna().reset_index().sort_values(by = 'people_vaccinated',ascending = False).reset_index(drop = True)\n\n# Plot the data\n\nplt.bar(total_ppl_vac.head(15)['country'], height = total_ppl_vac.head(15)['people_vaccinated'])\nplt.yticks([x*(10**7) for x in np.arange(5)], ['0', '1M', '2M', '3M', '4M'])\nplt.xticks(rotation = 90)\nplt.title('Countries With most Vaccinated people ')\nplt.ylabel('Number of People (in million)')\nplt.xlabel('Country Name')\nplt.show()","77164e32":"from sklearn.linear_model import LinearRegression","17e23eee":"# DAILY VACCINATION\n\ndaily_vac = df.groupby('date')['daily_vaccinations_raw'].sum()\n\n#compute the linear regression\nreg = LinearRegression()\nX = daily_vac.index.factorize()[0].reshape(-1,1)\nreg.fit(X, daily_vac.values)\ny = reg.predict(X)\n\n#plot the data\nfig, ax = plt.subplots()\nax.plot(daily_vac)\nax.plot(daily_vac.index,y)\nplt.title(\"Daily Vaccination in the world\\n({} - {})\".format(daily_vac.index[0].date(),daily_vac.index[-1].date()))\nax.set_yticklabels (['','','0', '1', '2', '3', '4', '5', '6'])\nax.set_ylabel('Vaccination (million)')","e2986adc":"# WEEKLY VACCINATION\n\nweekly_vac = df[df['date']< \"2021-02-22\"].groupby(pd.Grouper(key= 'date', freq= '1W'))['daily_vaccinations_raw'].sum()\n\n# Compute the linear regression\nreg2 = LinearRegression()\nX2 = weekly_vac.index.factorize()[0].reshape(-1,1)\nreg2.fit(X2, weekly_vac.values)\ny2 = reg2.predict(X2)\nfig, ax = plt.subplots()\nax.plot(weekly_vac)\nax.plot(weekly_vac.index,y2)\nplt.title(\"Weekly Vaccination in the world\\n({} - {})\".format(weekly_vac.index[0].date(),weekly_vac.index[-1].date()))\ny_label = [''] + [int((i\/2-0.5)*10) for i in range(9)]\nprint(y_label)\nax.set_yticklabels (y_label)\nax.set_ylabel('Vaccination (million)')","79695514":"**1. What's the most popular type of vaccines used\/ distributed?**","f6865f0b":"**3. What countries have done the most vaccination\/ have the most vaccinated people?**","f49a9f30":"**4.The progress of vaccination by time**","d37c6122":"    As we can see some countries used mutiple vaccines, thus this bar plot only represent the distribution of types of vaccine. Note that there could be multiple caountries that use multiple vaccines.\n\n    And by this plot we can also see that 'Pfizer\/BioNTech' is the vaccines that most of the countries used or distributed.","1f91c8cd":"Theres few thing that I want to analyze in this data:\n1. What's the most popular type of vaccines used\/ distributed?\n2. What countries have done the most vaccination? \n3. What countries have the most vaccinated people?\n4. The progress of vaccination by time","882d8cf3":"**2.What countries have done the most vaccination?**","0e2e4430":"This is my first upload, i hope it would useful for me and anyone who see it. Im new in this field and I probably did some mistake, im very open to suggestion or correction. i would be very happy.\n\nThank you","e812233c":"    as we see it seems many countries do the vaccination every couple of days or per week, not every single day as we see the graph peak on interval of time. Thus Im gonna try to plot the data on weekly terms."}}