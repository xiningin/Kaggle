{"cell_type":{"a9e014e4":"code","2b1480f7":"code","33bf6c1b":"code","716099a0":"code","14433a9c":"code","a50272a7":"code","58b36019":"code","36019ced":"code","640988b9":"code","fb44b651":"code","b31819a6":"code","f2d13e42":"code","c7a46e91":"code","0244473f":"code","e597d4a1":"code","0580cd05":"code","7f07e353":"code","6c25f511":"code","fbcd9405":"code","6002d4a3":"code","ad1c2da9":"code","45af680c":"code","71666431":"code","47f3f3c8":"code","15b3d3ba":"code","1c398215":"code","3fcf182b":"code","ebc07bfe":"code","a1b54842":"code","a50f6a4c":"code","908535f9":"code","c4606096":"code","805393bb":"code","c5348a57":"code","0275860e":"code","44e3c25e":"code","a7e8ba1f":"code","46451193":"code","d9776166":"code","c1ca6c15":"code","d4aa3f2c":"code","88f19f60":"code","8b1a74df":"code","da48213a":"code","8bf50ccc":"code","b89892e5":"code","3e2a43b9":"code","1ad2b289":"code","e22b8724":"code","432c4996":"code","7745e28a":"code","6acd30b6":"code","8cc26fe7":"code","5ec82bcc":"code","e38bbe8a":"code","bfbcba9c":"code","e5ed8f70":"code","f37f8825":"code","59be4df2":"code","869438e7":"code","0f7841c4":"code","8f51bfe7":"code","9e27ae45":"code","7cef2d8d":"code","3b54ec3c":"code","2c411d6f":"code","6b71747f":"code","1dd17339":"code","ab6da8f4":"code","5f7f092b":"code","ce3bc6ef":"code","7e09bec7":"code","b54de957":"code","22ac4b90":"code","9afd03ba":"code","0ca56dfb":"code","dd1a7abc":"code","b40e467c":"code","42fce62d":"markdown","46edac1e":"markdown","8927adb5":"markdown","a19ae174":"markdown","ae92f3aa":"markdown","bd426e70":"markdown","792de918":"markdown","a64abbf7":"markdown","d1196280":"markdown","a639dec5":"markdown","1ea10836":"markdown","6b75fd1d":"markdown","6b2a7d56":"markdown","6db5af83":"markdown","e5ab994e":"markdown","89da09a6":"markdown","b03b99fc":"markdown","c66dc826":"markdown","bdfc6c20":"markdown","c4c449f7":"markdown","fbb8d81e":"markdown","4e89a162":"markdown","9cb6aebc":"markdown","7dd45604":"markdown","dc7c1a13":"markdown","73958c36":"markdown","ef5b89bb":"markdown","19e9f32c":"markdown","eefc16f6":"markdown","0ddb7e57":"markdown","7c8a0fc6":"markdown","f9ba46fd":"markdown","168c069a":"markdown"},"source":{"a9e014e4":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\nfrom sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, LassoCV, RidgeCV, ElasticNetCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline ","2b1480f7":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","33bf6c1b":"train_df.head()","716099a0":"train_df.shape","14433a9c":"test_df.head()","a50272a7":"test_df.shape","58b36019":"# train dataframe\n\nnum_featrues=[]\ncat_features=[]\n\nfor feature, d_type in train_df.dtypes.items():\n    if d_type in [int, float]:\n        num_featrues.append(feature)\n    else:\n        cat_features.append(feature)\nprint(f'We have {len(num_featrues)} numerical features')\nprint(f'We have {len(cat_features)} categorical features')","36019ced":"# test dataframe\n\nnum_featrues=[]\ncat_features=[]\n\nfor feature, d_type in test_df.dtypes.items():\n    if d_type in [int, float]:\n        num_featrues.append(feature)\n    else:\n        cat_features.append(feature)\nprint(f'We have {len(num_featrues)} numerical features')\nprint(f'We have {len(cat_features)} categorical features')","640988b9":"# divid train features to eight sets each set has ten featrues for visualizing \n\n# remove id and SalePrice from train dataframe\ncols = [col for col in train_df.columns if col not in ['Id', 'SalePrice'] ]\n\n# group features to eight set each set has ten features\ncols_group = {\n    'first': cols[:10],\n    'scond': cols[10:20],\n    'third': cols[20:30],\n    'fourth': cols[30:40],\n    'fifth': cols[40:50],\n    'sixth': cols[50:60],\n    'seventh': cols[60:70],\n    'eighth': cols[70:79]\n}\n\n# for each set print the set name and their features\nfor k, v in cols_group.items():\n    print(f'The {k} ten features:\\n {v}' )","fb44b651":"def subplots_ten_columns(df, cols):\n    \"\"\"\n    returns to ten graphs each graph shows the relationship between SalePrice and specific feature\n    if feature is numeric the graph will be line chart otherwise bar chart\n    \"\"\"\n    \n    nrows= int(np.ceil(10\/2))\n    fig, ax = plt.subplots(nrows=nrows, ncols=2, figsize=(12,8), constrained_layout=True)\n    ax = ax.ravel()\n    \n    for i in range(len(cols)):\n        \n        if df[cols[i]].nunique()> 10:\n            sns.lineplot(x=df[cols[i]], y=df['SalePrice'], data=df, ax=ax[i]).set_title(f'SalePrice vs {cols[i]}')\n            \n        else:\n            sns.barplot(y=df[cols[i]], x=df['SalePrice'], data=df, orient='h', ax=ax[i]).set_title(f'{cols[i]} vs SalePrice');\n","b31819a6":"subplots_ten_columns(train_df, cols[:10])","f2d13e42":"def subplots_ten_columns(df, cols):\n    \"\"\"\n    returns to ten graphs each graph shows the relationship between SalePrice and specific feature\n    if feature is numeric the graph will be line chart otherwise bar chart\n    \"\"\"\n    \n    nrows= int(np.ceil(10\/2))\n    fig, ax = plt.subplots(nrows=nrows, ncols=2, figsize=(12,10), constrained_layout=True)\n    ax = ax.ravel()\n    \n    for i in range(len(cols)):\n        \n        if df[cols[i]].nunique()> 10:\n            \n            if cols[i] == 'Neighborhood':\n                labels = train_df.iloc[:,12].unique().tolist()\n                sns.lineplot(x=df[cols[i]], y=df['SalePrice'], data=df, ax=ax[i])\n                ax[i].set_xticklabels(labels=labels,rotation=50)\n                \n            else:\n                sns.lineplot(x=df[cols[i]], y=df['SalePrice'], data=df, ax=ax[i])\n\n        else:\n            sns.barplot(y=df[cols[i]], x=df['SalePrice'], data=df, orient='h', ax=ax[i]);\n","c7a46e91":"subplots_ten_columns(train_df, cols[10:20])","0244473f":"cols[10:20]","e597d4a1":"def subplots_ten_columns(df, cols):\n    \n    nrows= int(np.ceil(10\/2))\n    fig, ax = plt.subplots(nrows=nrows, ncols=2, figsize=(12,10), constrained_layout=True)\n    ax = ax.ravel()\n    \n    for i in range(len(cols)):\n        \n        if df[cols[i]].nunique()> 10:\n                \n            if cols[i] in ['Exterior1st', 'Exterior2nd']:\n                labels = train_df.iloc[:,12].unique().tolist()\n                sns.lineplot(x=df[cols[i]], y=df['SalePrice'], data=df, ax=ax[i])\n                ax[i].set_xticklabels(labels=labels,rotation=45)\n                \n            else:\n                sns.lineplot(x=df[cols[i]], y=df['SalePrice'], data=df, ax=ax[i])\n\n        else:\n            sns.barplot(y=df[cols[i]], x=df['SalePrice'], data=df, orient='h', ax=ax[i]);\n","0580cd05":"subplots_ten_columns(train_df, cols[20:30])","7f07e353":"cols[20:30]","6c25f511":"subplots_ten_columns(train_df, cols[30:40])","fbcd9405":"cols[30:40]","6002d4a3":"subplots_ten_columns(train_df, cols[40:50])","ad1c2da9":"cols[40:50]","45af680c":"subplots_ten_columns(train_df, cols[50:60])","71666431":"cols[50:60]","47f3f3c8":"subplots_ten_columns(train_df, cols[60:70])","15b3d3ba":"cols[60:70]","1c398215":"subplots_ten_columns(train_df, cols[70:79])","3fcf182b":"cols[70:79]","ebc07bfe":"fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (18, 6))\n\nsns.heatmap(train_df.isna(), cbar=False, yticklabels=False, ax=ax[0], cmap='viridis').set_title('Train Data')\n\nsns.heatmap(test_df.isna(), cbar=False, yticklabels=False, ax=ax[1], cmap='viridis').set_title('Test Data');","a1b54842":"def drop_cols_with_missing_vals(data):\n    \"\"\"\n    check all columns with missing vals \n    if column has missing values more than half values\n    drop column else if column has less than half values\n    check if column category or numeric and then if category\n    fill missing values with mode values and if numeric fill\n    them with median\n    \"\"\"\n    cols_with_missing_vals_more_half= []\n    cols_with_missing_vals_less_half= []\n    \n    for col in data.columns:\n        \n        if data[col].isna().sum() > (data.shape[0]\/\/2):\n            cols_with_missing_vals_more_half.append(col)\n            \n        elif (data[col].isna().sum() > 0) & (data[col].isna().sum() < data.shape[0]\/\/2):\n            cols_with_missing_vals_less_half.append(col)\n            \n    data = data.drop(cols_with_missing_vals_more_half, axis=1)\n    \n    for col in data[cols_with_missing_vals_less_half]:\n        if (data[col].dtypes == int) or (data[col].dtypes == float):\n            data[col] = data[col].fillna(data[col].mean())\n            \n        elif data[col].dtypes == object:\n            max_val = data[col].value_counts().keys()[0]\n            data[col] = data[col].fillna(max_val)\n\n    return data","a50f6a4c":"# drop columns from train dataframe\ntrain_df = drop_cols_with_missing_vals(train_df)\n\n# drop columns from test dataframe\ntest_df = drop_cols_with_missing_vals(test_df)","908535f9":"train_df.shape","c4606096":"test_df.shape","805393bb":"train_df = train_df.drop(['FireplaceQu', 'Id'], axis=1)","c5348a57":"test_df = test_df.drop('Id', axis=1)","0275860e":"train_df.shape","44e3c25e":"test_df.shape","a7e8ba1f":"for col in train_df.columns:\n    if col in test_df.columns:\n        pass\n    else:\n        print(col)","46451193":"fig, ax = plt.subplots(nrows = 1, ncols = 2, figsize = (18, 6))\n\nsns.heatmap(train_df.isna(), cbar=False, yticklabels=False, ax=ax[0], cmap='viridis').set_title('Train Data')\n\nsns.heatmap(test_df.isna(), cbar=False, yticklabels=False, ax=ax[1], cmap='viridis').set_title('Test Data');","d9776166":"X_train = train_df.drop('SalePrice', axis=1)\nX_test = test_df\ny_train = train_df['SalePrice']","c1ca6c15":"# check all featrues are same in train and test dataframe\nX_train.columns == X_test.columns","d4aa3f2c":"# check the number of rows and columns \nfor i in [X_train, X_test, y_train]:\n    print(i.shape)","88f19f60":"# append x_test into x_train \nX = X_train.append(X_test)\nX.shape","8b1a74df":"cols_with_high_var = []\nfor k, v in X.var().items():\n    if v > 1e3:\n        cols_with_high_var.append(k)","da48213a":"len(cols_with_high_var)","8bf50ccc":"fig, ax = plt.subplots(nrows=3, ncols=6, figsize=(20,8), constrained_layout=True)\nax = ax.ravel()\nfor i in range(len(cols_with_high_var)):\n    sns.histplot(X[cols_with_high_var[i]], ax=ax[i])\nplt.show()","b89892e5":"new_cols = [col for col in X.columns if (col not in cols_with_high_var)]","3e2a43b9":"X = X[new_cols]","1ad2b289":"X.shape","e22b8724":"X = pd.get_dummies(X, drop_first=True)\nX.shape","432c4996":"X_train = X[:1460]\nX_test = X[1460:]","7745e28a":"y_train = y_train.values\ny_test = y_train[:1459]","6acd30b6":"# creat dataframe with two columns the frist columns with model name \n# the second column rmse \n\nmodel_lst = pd.DataFrame(\n    {\n        'Model':[\n            'Linear Regression', \n            'Lasso',\n            'Ridge',\n            'ElasticNet',\n            'Random Forest Classifier',\n            'Bagging Classifier',\n            'Extra tree Classifier'], \n        'RMSE': None,\n    }, \n\n)\nmodel_lst","8cc26fe7":"# Function that runs the requested algorithm and returns the accuracy metrics\ndef fit_model_algo(algo, X_train, X_test, y_train, y_test, cv):\n    \n    # Cross Validation \n    acc_cv = np.mean(cross_val_score(\n                                    algo, \n                                    X_train, \n                                    y_train, \n                                    cv=cv, \n                                    n_jobs = -1))\n    # Cross-validation accuracy metric\n    \n    # Test accuracy metric\n    algo.fit(X_train, y_train)\n    test_pred = algo.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, test_pred))\n    rmae = np.sqrt(mean_absolute_error(y_test, test_pred))\n    return test_pred, acc_cv, rmse, rmae","5ec82bcc":"lr = LinearRegression()\npred_test, acc_cv, rmse, rase  = fit_model_algo(lr, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","e38bbe8a":"model_lst['RMSE'][0] = rmse \nmodel_lst","bfbcba9c":"lasso = LassoCV(\n                max_iter=1e6, \n                alphas=[0.0002, 0.0003, 0.0004, 0.0005, 0.1, 0.3, 0.4, 0.6, 0.8, 1.0],\n                cv=5\n)","e5ed8f70":"pred_test, acc_cv, rmse, rase  = fit_model_algo(lasso, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","f37f8825":"model_lst['RMSE'][1] = rmse \nmodel_lst","59be4df2":"ridge = RidgeCV(\n                alphas=[0.0002, 0.0003, 0.0004, 0.0005, 0.1, 0.3, 0.4, 0.6, 0.8, 1.0],\n                cv=5\n)","869438e7":"pred_test, acc_cv, rmse, rase  = fit_model_algo(ridge, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","0f7841c4":"model_lst['RMSE'][2] = rmse \nmodel_lst","8f51bfe7":"elastic = ElasticNetCV(\n                    max_iter=1e4,\n                    alphas=[0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.001, 0.1, 1.0],\n                    l1_ratio=[0.8, 0.85, 0.9, 0.95, 0.99, 1]\n)","9e27ae45":"pred_test, acc_cv, rmse, rase  = fit_model_algo(elastic, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","7cef2d8d":"model_lst['RMSE'][3] = rmse \nmodel_lst","3b54ec3c":"rf = RandomForestRegressor()\npred_test_rf, acc_cv, rmse, rase  = fit_model_algo(rf, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","2c411d6f":"model_lst['RMSE'][4] = rmse \nmodel_lst","6b71747f":"br = BaggingRegressor()\npred_test_br, acc_cv, rmse, rase  = fit_model_algo(br, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","1dd17339":"model_lst['RMSE'][5] = rmse \nmodel_lst","ab6da8f4":"etr = ExtraTreesRegressor()\npred_test, acc_cv, rmse, rase  = fit_model_algo(etr, X_train, X_test, y_train, y_test, 10)\nprint(f'Cross Validation Average Score: {acc_cv}')\nprint(f'Root Mean Square Error: {rmse}')\nprint(f'Root Absolute Square Error: {rase}')","5f7f092b":"model_lst['RMSE'][6] = rmse \nmodel_lst","ce3bc6ef":"submission_file = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","7e09bec7":"submission_file.head()","b54de957":"submission_file = submission_file.drop('SalePrice', axis=1)","22ac4b90":"submission_file['SalePrice'] = pred_test_br","9afd03ba":"submission_file.index = submission_file['Id']","0ca56dfb":"submission_file.drop('Id', axis=1, inplace=True)","dd1a7abc":"submission_file.head()","b40e467c":"submission_file.to_csv('test_pred_rf.csv')","42fce62d":"- SalePrice vs MSSubClass: with different classes, the sale prices were in the range between 100,000 to 200,000 but the highest price was with claas 60.\n- MSZoning vs SalePrice: We can see the FV and RL zone was the highest average of sale preice with 220,000 and 180,000 respectivley while others were less than 150,000.\n- Sale Price vs LotFrontage: with different line feets of street most sale prices were in the range between 250,000 to 500,000 while the highest price was at line feet of street about 170,000.\n- Sale Price vs LotArea:  sale prices were frugtuated unitl at 65,000 then stay constant with different lot sizes\n- Steet vs SalePrice: the highest sale price average was over 175,000 at Pave street while Grvl street was the lowest with sale price about 126,000\n- Alley vs SalePrice: we can see inversly relationship between street and alley with the sale price\n- LandContour vs SalePrice: average sale prices of Land Counter HLS and Low were over 200,000 while others less than 200,000\n- Utilities vs SalePrice: AllPub utility had the highest sale price about 176,000 while NoSeWa was the lowest\n- LoConfig vs salePrice: CulDSac and FR3 were higher sale price average over 200,000 while others were near 160,000","46edac1e":"## Select the best Model and submit the file","8927adb5":"**The sixth ten features**","a19ae174":"- RoofStyle vs SalePrice: Hip and Shed were higher sale prices average than other about 225,000 while others were less than 200,000\n- RoofMatl vs SalePrice: WdShngl was the highest sale price average about 395,000 while others 140,000 to 240,000\n- Exterior1st and Exterior2nd vs SalePrice: Exterior1st and Exterior2nd were fructuated in the range of sale prices average 100,000 to 200,000 unitl Sawyew and IDOTRR in Exterior1st and Sawyew in Exterior2nd were the top of sale prices average about 300,000\n- MasVnrType vs SalePrice: Stone was higher sale price average than other about 265,000 while others less than 210,000\n- SalePrice vs MasVnrArea: Sale prices average were fructated in the range of 100,000 to 500,000 with different area values however the top was at area 1200 with sale price average about 695,000\n- ExterQual and ExterCond vs SalePrice: Ex and Gd in ExterQual and Ex and TA were the highest sale prices average and Fa in ExterQual and Po ExterCond were the lowest.\n- Foundation vs SalePrice: Pconc was higher sale price average than other about 225,000 while others were less than 200,000\n- BsmtQual vs SalePrice: Ex was the top of sale price average about 330,000 while Fa was the bottom about 120,000","ae92f3aa":"**Random Forest**","bd426e70":"## Create Model","792de918":"## Features Describtion","a64abbf7":"## Import Libraries","d1196280":"## Problem Statement","a639dec5":"- PoolArea vs SalePrice:  at PoolArea 555 was the top of sale prices average about over than 700,000 while others less than 300,000\n- PoolQC vs SalePrice: Ex was the top of sale prices average about 500,000 while others less than 210,000\n- Fence vs SalePrice: GdPrv was the top of sale prices average about over 1750,000 while others less than 150,000\n- MiscFeature vs SalePrice: TenC was the top of sale prices average about 250,000 while others less than 1750,000\n- SalePrice vs MiscVal: the top of sale prices average were 250,000 at 55 and 210 \n- SalePrice vs MoSold: sale prices average were fructuated in the range between 170,000 and 190,000\n- YrSold vs SalePrice: most of year sold were over 175,000 allo of them were nearly\n- SaleType vs SalePrice: New and Can were the top sale prices average over than 250,000 while otheres less than 210,000\n- SaleCondition vs SalePrice: Partial was the top sale prices average over than 250,000 while others less than 200,000","1ea10836":"- BsmtCond vs SalePrice: Gd and Ta were the top of sale price average over than 175,000 while others les than 130,000\n- BsmtExposure vs SalePrice: Gd was the top of sale price average over than 250,000 while others were less than 220,000\n- BsmtFinType1 vs SalePrice: GLQ was the top of sale price average about 240,000 while others were in the range 150,000 to 170,000\n- SalePrice vs BsmtFinSF1: Sale prices average were fructuated in the range 120,000 to 600,000 unitl BsmtFinType2 became 1500 and 2100 so were the top of sale prices average after that stay same sale price average.\n- BsmtFinType2 vs SalePrice: AlQ, Unf and GLQ were the top of sale price average over 175,000 while others less 160,000\n- SalePrice vs BsmtUnfSF2; The top of sale price average was at BsmtUnfSF 580 and 810 about 390,000 \n- SalePrice vs BsmtUnfSF and TotalBsmtSF: the top of sale price average at BsmtUnfSF 980 and TotalBsmtSF 245 about 700,000\n- Heating vs SalePrice: The top were GasA and GasW with sale price average about 165,000 and 180,000 respectively while others less than 125,000\n- HeatingQC vs SalePrice: inversly relationship was between HeatingQC and Sale prices average","6b75fd1d":"**Data Cleaning**","6b2a7d56":"- HeatingQC vs SalePrice: sale prices average at Y were higher than N \n- Electrical vs SalePrice: Sbrk was the top of sale prices average about 185,000 while others were less than 125,000\n- SalePrice vs 1stFlrSF and 2ndFlrSF : at 1stFlrSF, sale prices average were fructuaed until about 700,000 with 2400 then dropped and at 2ndFlrSF, sale prices average were fructuated towared the high level until the top at 4250 with sale price average about 700,000\n- SalePrice vs LowQualFinSF: sale prices averages were less than 200,000 at LowQualFinSF reached 530 then jumpped to became 500,000 at 580\n- SalePrice vs GrLivArea: sale prices average started from the lowest level then fructuated in the level less than 500,000 unitl 380 then rose to became the highest level of sale prices average about 700,000 at 430 then sharply dropped to the lowest level after that stay constant\n- BsmtFullBath vs SalePrice: the top of BsmtFullBath were 2 and 1 over 200,000 of sale prices average while others were less than that average\n- BsmtHalfBath vs SalePrice: inversly relationship between BsmtHalfBath and sale prices average\n- FullBath vs SalePrice: the top was 3 near 350,000 while others less than 220,000\n- HalfBath vs SalePrice: the top was 1 over than 200,000 while others less 160,000","6db5af83":"**The fifth ten features**","e5ab994e":"The competition is about ask a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. \n\nThe obtained data set from a Kaggle competition named House Prices: Advanced Regression Techniques  proves that much more influences price negotiations than the number of bedrooms or a white-picket fence. Given 79 explanatory variables almost describe every aspect of residential homes in Ames, Iowa. \n\nWe have build predictive models using Advanced Regression Techniques, train the model, and find the best model that it can accurately estimate the final price of each house.","89da09a6":"**Lasso**","b03b99fc":"**Linear Regression**","c66dc826":"**Bagging Regressor**","bdfc6c20":"**Extra Tree Regressor**","c4c449f7":"- BedroomAbvGr vs SalePrice: 0, 4 and 8 were sale prices average over than 200,000 while others less than 175000\n- KitchenAbvGr vs SalePrice: 1 was the top of sale prices average over than 175,000 while others less than 130,000\n- KitchenQual vs SalePrice: Ex was the top of sale prices average over than 300,000 while others less than 210,000\n- SalePrice vs TotRmsAbvGrd: Sale prices average were gradualy increased until reached the top at 11 then dropped \n- Functional vs SalePrice: Typ and Mod were the top of sale prices average over than 200,000 while others less than that\n- Fireplaces vs SalePrice: positive relationship between Fireplaces and sale prices average\n- FireplaceQu vs SalePrice: Ex was the top of sale price average over than 300,000 while others less than 250,000\n- GarageType vs SalePrice: Builtin was the top of sale price average near 250,000 while others less than 200,000\n- SalePrice vs GarageYrBlt: GarageYrBlt were fructuated in the range of sale prices average between 100,000 and 210,000 until exceeded 2000 then rose to became 320,000\n- GarageFinish vs SalePrice: Fin was the top of sale prices average about 245,000 while otheres less than 200,000","fbb8d81e":"**The eighth ten features**","4e89a162":"**The forth ten features**","9cb6aebc":"**The first ten features**","7dd45604":"**The third ten features**","dc7c1a13":"**The seventh ten features**","73958c36":"## Explore Data","ef5b89bb":"**Ridge**","19e9f32c":"- GarageCars vs SalePrice: 3 was the top of sale price average over than 300,000 while others were less than 200,000 \n- SalePrice vs GarageArea: sale prices average were fructuated in the range 100,000 to 400,000 until GarageArea became 800 to became 700,000 dropped.\n- GarageQual and GarageCond vs SalePrice: in GarageQual Ex and Gd were the top of sale Prices average over than 200,000 while  GarageCond Ta and Gd were the top of sale prices average over than 175,000\n- PavedDrive vs SalePrice: Y was the top of sale prices average over 175,000 while others were less than 130,000\n- SalePrice vs WoodDeckSF: at WoodDeckSF 50, 380 and 390 sale prices average were the top about 600,000 \n- SalePrice vs OpenPorchSF: Sale prices average were fructuared in the range between 100,000 to 400,000 except OpenPorchSF 80 so was at the top of sale prices average about 600,000\n- SalePrice vs EnclosedPorch: the top of sale prices average were about 420,000 at EnclosedPorch 45 and 290,000\n- SalePrice vs 3SsnPorch: the top of sale prices average were about 400,000 at 3SsnPorch 150 and 350\n- SalePrice vs ScreenPorch: the top of sale prices average were over than 500,000 while others in the range between 100,000 and 400,000","eefc16f6":"****The second ten features****","0ddb7e57":"## Data Visualization (EDA)","7c8a0fc6":"- SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n- MSSubClass: The building class\n- MSZoning: The general zoning classification\n- LotFrontage: Linear feet of street connected to property\n- LotArea: Lot size in square feet\n- Street: Type of road access\n- Alley: Type of alley access\n- LotShape: General shape of property\n- LandContour: Flatness of the property\n- Utilities: Type of utilities available\n- LotConfig: Lot configuration\n- LandSlope: Slope of property\n- Neighborhood: Physical locations within Ames city limits\n- Condition1: Proximity to main road or railroad\n- Condition2: Proximity to main road or railroad (if a second is present)\n- BldgType: Type of dwelling\n- HouseStyle: Style of dwelling\n- OverallQual: Overall material and finish quality\n- OverallCond: Overall condition rating\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date\n- RoofStyle: Type of roof\n- RoofMatl: Roof material\n- Exterior1st: Exterior covering on house\n- Exterior2nd: Exterior covering on house (if more than one material)\n- MasVnrType: Masonry veneer type\n- MasVnrArea: Masonry veneer area in square feet\n- ExterQual: Exterior material quality\n- ExterCond: Present condition of the material on the exterior\n- Foundation: Type of foundation\n- BsmtQual: Height of the basement\n- BsmtCond: General condition of the basement\n- BsmtExposure: Walkout or garden level basement walls\n- BsmtFinType1: Quality of basement finished area\n- BsmtFinSF1: Type 1 finished square feet\n- BsmtFinType2: Quality of second finished area (if present)\n- BsmtFinSF2: Type 2 finished square feet\n- BsmtUnfSF: Unfinished square feet of basement area\n- TotalBsmtSF: Total square feet of basement area\n- Heating: Type of heating\n- HeatingQC: Heating quality and condition\n- CentralAir: Central air conditioning\n- Electrical: Electrical system\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- LowQualFinSF: Low quality finished square feet (all floors)\n- GrLivArea: Above grade (ground) living area square feet\n- BsmtFullBath: Basement full bathrooms\n- BsmtHalfBath: Basement half bathrooms\n- FullBath: Full bathrooms above grade\n- HalfBath: Half baths above grade\n- Bedroom: Number of bedrooms above basement level\n- Kitchen: Number of kitchens\n- KitchenQual: Kitchen quality\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n- Functional: Home functionality rating\n- Fireplaces: Number of fireplaces\n- FireplaceQu: Fireplace quality\n- GarageType: Garage location\n- GarageYrBlt: Year garage was built\n- GarageFinish: Interior finish of the garage\n- GarageCars: Size of garage in car capacity\n- GarageArea: Size of garage in square feet\n- GarageQual: Garage quality\n- GarageCond: Garage condition\n- PavedDrive: Paved driveway\n- WoodDeckSF: Wood deck area in square feet\n- OpenPorchSF: Open porch area in square feet\n- EnclosedPorch: Enclosed porch area in square feet\n- 3SsnPorch: Three season porch area in square feet\n- ScreenPorch: Screen porch area in square feet\n- PoolArea: Pool area in square feet\n- PoolQC: Pool quality\n- Fence: Fence quality\n- MiscFeature: Miscellaneous feature not covered in other categories\n- MiscVal: $Value of miscellaneous feature \n- MoSold: Month Sold\n- YrSold: Year Sold\n- SaleType: Type of sale\n- SaleCondition: Condition of sale","f9ba46fd":"- LandSlope vs SalePrice: LandSlopes were near in the range 175,000 to 200,000\n- SalePrice vs Neighborhood: Crawfor, Sawyer and Gilbert were the top of slae prices average about 300,000 while the bottom of sale price average were Sawview, idtorr and Brdale \n- Condition1 and Condition2 vs SalePrice: Condition2 was higher range of sale prices average than Condition1 about 100,000 to 345,000 \n- BldgType vs SalePrices: IFam and TwnhsE were higher sale prices average than other about 176,000 while others were less than 130,000.\n- HouseStyle vs SalePrice: 2Story and 2.5Fin were higher sale prices average than other about over 200,000 while others were less than 1750,000\n- OverallQual and OverallCond vs SalePrice: quality had gradualy increased with sale prices average from 1 to 10 while ratings were different so 9 and 5 were the highest sale average prices\n- YearBuilt and YearRemodAdd vs SalePrice: yearBuilt and Remodal date were fregtuaed so the top of sale price average was about 300,000 and the bottom was about 110,000","168c069a":"**ElasticNet**"}}