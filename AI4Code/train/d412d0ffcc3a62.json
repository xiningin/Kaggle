{"cell_type":{"bb11fdc0":"code","06fb9c36":"code","1cd758d0":"code","ec698f62":"code","2078c39b":"code","ba0a33a0":"code","b9444c28":"code","efe3ebc8":"code","d5aa4910":"code","ac0e2f7e":"code","e4937ef1":"code","f9babc44":"code","01b44d92":"markdown"},"source":{"bb11fdc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","06fb9c36":"apps_with_duplicates = pd.read_csv('\/kaggle\/input\/play-store-dataset\/apps.csv')\napps=apps_with_duplicates.drop_duplicates();\n\napps.head(10)\n\n\n","1cd758d0":"print(\"Number of apps =\",len(set(apps[\"App\"])))","ec698f62":"char_remove=[\"$\",\"M\",\"+\",\",\"]\ncol_clean=[\"Installs\",\"Price\",\"Size\"]\n\nfor col in col_clean:\n    for char in char_remove:\n        apps[col] = apps[col].str.replace(char, '')\n    apps[col] = pd.to_numeric(apps[col])\n    \n    ","2078c39b":"apps.head(10)","ba0a33a0":"num_categories = len(set(apps['Category']))\n","b9444c28":"import plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as graph\n\nnum_apps_in_category = apps['Category'].value_counts().sort_values(ascending=False)\n\ndata = [graph.Bar(\n        x = num_apps_in_category.index, # index = category name\n        y = num_apps_in_category.values, # value = count\n)]\n\nprint(\"Number of category = \",num_categories)\n\nplotly.offline.iplot(data)\n\n\n","efe3ebc8":"import plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\navg_rate_apps=apps[\"Rating\"].mean()\nprint(\"average rating for apps =\",avg_rate_apps)\n\ndata = [go.Histogram(\n        x = apps['Rating'],\n        xbins = {'start': 1, 'size': 0.1, 'end' : 5}\n)]\n\nlayout = {'shapes': [{\n              'type' :'line',\n              'x0': avg_rate_apps,\n              'y0': 0,\n              'x1': avg_rate_apps,\n              'y1': 1000,\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\nplotly.offline.iplot({'data': data, 'layout': layout})","d5aa4910":"%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\npaid_apps = apps[apps['Type'] == 'Paid']\n\n# Plot price vs. rating\nplt2 = sns.jointplot(x = 'Price', y = 'Rating', data = paid_apps)\n\n","ac0e2f7e":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\n\nmost_pop_app=apps[apps.Category.isin(['GAME', 'FAMILY', 'PHOTOGRAPHY',\n                                            'MEDICAL', 'TOOLS', 'FINANCE',\n                                            'LIFESTYLE','BUSINESS'])]\n\n\nax = sns.stripplot(x='Price', y='Category', data=most_pop_app,\n                   jitter=True, linewidth=1)\nax.set_title('App pricing trend across categories')\n\n","e4937ef1":"apps_above_200 = most_pop_app[['Category', 'App', 'Price']][most_pop_app['Price'] > 100]\napps_above_200","f9babc44":"import plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as graph\n\ntrace0 = go.Box(\n    # Data for paid apps\n    y=apps['Installs'][apps['Type'] == 'Paid'],\n    name = 'Paid'\n)\n\ntrace1 = go.Box(\n    # Data for free apps\n    y=apps['Installs'][apps['Type'] == 'Free'],\n    name = 'Free'\n)\n\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps vs. free apps\",\n    yaxis = dict(\n        type = 'log',\n        autorange = True\n    )\n)\n\n# Add trace0 and trace1 to a list for plotting\ndata = [trace0, trace1]\nplotly.offline.iplot({'data': data, 'layout': layout})","01b44d92":"# **Relation between app category and app price**"}}