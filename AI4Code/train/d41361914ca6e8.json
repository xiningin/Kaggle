{"cell_type":{"069598d5":"code","fbc73af0":"code","2ec28449":"code","2ae045cc":"code","f79a0e9d":"code","73fe6132":"code","1aa71d0e":"code","0a578bae":"code","7506e732":"code","2b9136ee":"code","7b46b1e9":"code","e26b3cf4":"code","1b4147a7":"code","a26bd60d":"code","73d6c4ee":"code","a3f09220":"code","f5a67c0d":"code","b3cfca23":"code","7f2a4718":"code","f9150276":"code","a623c2ea":"code","76198fef":"code","5fd4561b":"code","0fcf1658":"code","e4786fd8":"code","1982b8e8":"code","e10268f6":"code","b14c57d7":"code","9af15a08":"code","7e771df7":"code","8a966a5a":"code","9418af51":"code","28519dfa":"code","024d4c1b":"code","497a0399":"code","71538eca":"code","3b4fdaff":"code","83a73329":"code","013a1693":"code","4c53189d":"code","fec8b1ea":"code","ec08a506":"code","1a16311c":"code","312cf3d0":"code","f5827597":"code","4714a8c7":"code","43917615":"code","0c581201":"code","630ff14b":"code","cc4a3f91":"markdown"},"source":{"069598d5":"pip install pandas","fbc73af0":"pip install geopandas","2ec28449":"pip install plotly","2ae045cc":"!pip install plotly-geo","f79a0e9d":"pip install pyshp","73fe6132":"pip install shapely","1aa71d0e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n","0a578bae":"print('This project deals with Covid 19 Analysis of United States, which has most confirmed\/death cases reported.')\nprint('Data used for the project are gathered from the following data providers:')\nprint('  Johns Hopkins University & Medicine')\nprint('  New York Times')\nprint('  CDC (Centers for Disease Control and Prevention)')\nprint('  Harvard Global Health Institute')\nprint('  Data SF')\nprint('  data.gov')","7506e732":"global_recovery = pd.read_csv('..\/input\/datas-used\/recovered_global.csv')\nus_recovery = global_recovery[global_recovery['Country\/Region'] == 'US']\nus_recovery.drop(['Lat','Long','Province\/State','Country\/Region'], inplace = True, axis =1)\nrecovery = us_recovery.T\nrecovery.rename({225:'Recovered'}, inplace = True, axis =1)\n\nrecovery.set_index(keys = np.arange(len(recovery)),drop = True,inplace = True)","2b9136ee":"global_confirmed = pd.read_csv('..\/input\/datas-used\/confirmed_global.csv')\nus_confirmed = global_confirmed[global_confirmed['Country\/Region'] == 'US']\nus_confirmed.drop(['Lat','Long','Province\/State','Country\/Region'], inplace = True, axis =1)\nconfirmed = us_confirmed.T\nconfirmed.rename({225:'Confirmed'}, inplace = True, axis =1)\n\nconfirmed.set_index(np.arange(len(confirmed)),drop = True,inplace = True)","7b46b1e9":"global_death = pd.read_csv('..\/input\/datas-used\/global_deaths.csv')\nus_deaths = global_death[global_death['Country\/Region'] == 'US']\nus_deaths.drop(['Lat','Long','Province\/State','Country\/Region'], inplace = True, axis =1)\ndeaths = us_deaths.T\ndeaths.rename({225:'Deaths'}, inplace = True, axis =1)\ndeaths.set_index(np.arange(len(deaths)),drop = True,inplace = True)\n","e26b3cf4":"result = pd.concat([confirmed,recovery,deaths], axis=1, join='inner')\nx_variable = np.arange(len(result))\n\n#For graph plotting\n\nresult['Active'] = result['Confirmed'] - (result['Recovered'] + result['Deaths'])\nresult['Daily Confirmed'] = result['Confirmed'].diff().fillna(result['Confirmed'])\nresult['Daily Recovered'] = result['Recovered'].diff().fillna(result['Recovered'])\nresult['Daily Deaths'] = result['Deaths'].diff().fillna(result['Deaths'])\n\n\nrecovery_rate = (result['Recovered'].iloc[-1]\/result['Confirmed'].iloc[-1])*100\nmortality_rate = (result['Deaths'].iloc[-1]\/result['Confirmed'].iloc[-1])*100\n","1b4147a7":"print(\"Basic informations\")\nprint(\"==================\")\nprint()\nprint('Following numbers and datas are exclusivesly based on United States.')\nprint('Datas of no other country have been used in this project.')\nprint('Total number of confirmed cases:',result['Confirmed'].iloc[-1])\nprint('Total number of recovered cases:',result['Recovered'].iloc[-1])\nprint('Total number of deaths:',result['Deaths'].iloc[-1])\nprint(\"The current recovery rate is:\",str(round(recovery_rate,2))+'%')\nprint(\"The current mortality rate is:\",str(round(mortality_rate,2))+'%')\nprint('Average cases per day:',round(result['Confirmed'].iloc[-1]\/len(result),2))\nprint('Average recovery per day:',round(result['Recovered'].iloc[-1]\/len(result),2))\nprint('Average deaths per day:',round(result['Deaths'].iloc[-1]\/len(result),2))\nprint('Average cases per hour:',round(result['Confirmed'].iloc[-1]\/(len(result)*24),2))\nprint('Average recovery per hour:',round(result['Recovered'].iloc[-1]\/(len(result)*24),2))\nprint('Average deaths per hour:',round(result['Deaths'].iloc[-1]\/(len(result)*24),2))\nprint('Above results are calculated using data collected from Johns Hopkins Unversity Coronavirus Resource Center.')\nprint('Graphs below are plotted using data from the same resource.')","a26bd60d":"with plt.style.context('dark_background'):\n  plt.figure(figsize=(10,10))\n  plt.plot(x_variable, result['Confirmed'], color = 'blue', linewidth = 1.8, label = 'Confimed')\n  plt.plot(x_variable, result['Active'], color = 'orange', linewidth = 1.8, label = 'Active')\n  plt.plot(x_variable, result['Recovered'], color = 'green', linewidth = 1.8, label = 'Recovered')\n  plt.plot(x_variable, result['Deaths'], color = 'red', linewidth = 1.8, label = 'Deaths')\n  plt.ticklabel_format(style='plain', axis='both', scilimits=(0,0))\n\n  plt.xlabel('Days')\n  plt.ylabel('Number')\n  plt.title('Covid-19 US Curve')\n  plt.legend(loc = 'best')\n  \n  plt.fill_between(x_variable, result['Confirmed'], result['Active'], color = 'blue', alpha = 0.5)\n  plt.fill_between(x_variable, result['Active'],result['Recovered'], color = 'orange', alpha = 0.5)\n  plt.fill_between(x_variable, result['Recovered'], result['Deaths'],color = 'green', alpha = 0.5)\n  plt.fill_between(x_variable, result['Deaths'], color = 'red', alpha = 0.5)\nplt.show()\n","73d6c4ee":"with plt.style.context('seaborn'):\n  fig2 = plt.figure(figsize=(14,14))\n  subplot1 = fig2.add_subplot(221)\n  subplot2 = fig2.add_subplot(222)\n  subplot3 = fig2.add_subplot(223)\n  subplot4 = fig2.add_subplot(224)\n\nsubplot1.plot(x_variable,result['Confirmed'],color = 'blue',marker = '.',ms = 7,markevery = 7)\nsubplot1.set_xlabel('Days')\nsubplot1.set_ylabel('Number')\nsubplot1.set_title('Confirmed Cumulative',fontsize = 'large')\nsubplot1.fill_between(x_variable,result['Confirmed'], color = 'blue', alpha = 0.2)\nsubplot1.ticklabel_format(style='plain', axis='both', scilimits=(0,0))\n\nsubplot2.plot(x_variable,result['Recovered'],color = 'green',marker = '.',ms = 7,markevery = 7)\nsubplot2.set_xlabel('Days')\nsubplot2.set_ylabel('Number')\nsubplot2.set_title('Recovered Cumulative',fontsize = 'large')\nsubplot2.fill_between(x_variable,result['Recovered'], color = 'green', alpha = 0.2)\nsubplot2.ticklabel_format(style='plain', axis='both', scilimits=(0,0))\n\nsubplot3.plot(x_variable,result['Deaths'],color = 'red',marker = '.',ms = 7,markevery = 7)\nsubplot3.set_xlabel('Days')\nsubplot3.set_ylabel('Number')\nsubplot3.fill_between(x_variable,result['Deaths'], color = 'red', alpha = 0.2)\nsubplot3.set_title('Deaths Cumulative',fontsize = 'large')\n\nsubplot4.plot(x_variable,result['Active'],color = 'orange',marker = '.',ms = 7,markevery = 7)\nsubplot4.set_xlabel('Days')\nsubplot4.set_ylabel('Number')\nsubplot4.fill_between(x_variable,result['Active'], color = 'orange', alpha = 0.3)\nsubplot4.set_title('Active',fontsize = 'large')\nsubplot4.ticklabel_format(style='plain', axis='both', scilimits=(0,0))\n\nfig2.tight_layout(pad=3.0)\nfig2.suptitle('Covid-19 US Curve',fontsize = 'xx-large')\nprint('Weekly changes are marked.')\nprint()","a3f09220":"with plt.style.context('seaborn'):\n   fig3 = plt.figure(figsize=(14,14))\n   sub_plot1 = fig3.add_subplot(221)\n   sub_plot2 = fig3.add_subplot(222)\n   sub_plot3 = fig3.add_subplot(223)\n   sub_plot4 = fig3.add_subplot(224)\n\n   sub_plot1.plot(x_variable,result['Daily Confirmed'],color = 'blue', marker = '.' , markevery = 7, ms = 7)\n   sub_plot1.set_xlabel('Days',fontsize = 'medium')\n   sub_plot1.set_ylabel('Number',fontsize = 'medium')\n   sub_plot1.set_title('Confirmed Daily',fontsize = 'large')\n   sub_plot1.fill_between(x_variable,result['Daily Confirmed'], color = 'blue', alpha = 0.2)\n\n   sub_plot2.plot(x_variable,result['Daily Recovered'],color = 'green', marker = '.' , markevery = 7, ms = 7)\n   sub_plot2.set_xlabel('Days',fontsize = 'medium')\n   sub_plot2.set_ylabel('Number',fontsize = 'medium')\n   sub_plot2.set_title('Recovered Daily',fontsize = 'large')\n   sub_plot2.fill_between(x_variable,result['Daily Recovered'], color = 'green', alpha = 0.2)\n\n   sub_plot3.plot(x_variable,result['Daily Deaths'],color = 'red', marker = '.' , markevery = 7, ms = 7)\n   sub_plot3.set_xlabel('Days',fontsize = 'medium')\n   sub_plot3.set_ylabel('Number',fontsize = 'medium')\n   sub_plot3.set_title('Deaths Daily',fontsize = 'large')\n   sub_plot3.fill_between(x_variable,result['Daily Deaths'], color = 'red', alpha = 0.2)\n\n   sub_plot4.plot(x_variable,result['Active'],color = 'orange', marker = '.' , markevery = 7, ms = 7)\n   sub_plot4.ticklabel_format(style='plain', axis='both', scilimits=(0,0))\n   sub_plot4.set_xlabel('Days',fontsize = 'medium')\n   sub_plot4.set_ylabel('Number',fontsize = 'medium')\n   sub_plot4.set_title('Active',fontsize = 'large')\n   sub_plot4.fill_between(x_variable,result['Active'], color = 'orange', alpha = 0.3)\n   \n   fig3.tight_layout(pad=3.0)\n   print('Weekly changes are marked.')\n   print()\nfig3.suptitle('Daily changes with Active curve',fontsize = 'x-large')\nplt.show()\n\n\n  ","f5a67c0d":"province_df = pd.read_csv('..\/input\/datas-used\/province.csv')\nprovince_df.drop(province_df[province_df['Lat'].isna()].index, inplace = True)\nprovince_df.drop(province_df[province_df['Confirmed'] == 0].index, inplace = True)","b3cfca23":"state_df = province_df\nstate_df.rename(columns = {'Province_State':'State'},inplace = True)\ncapacity = pd.read_csv('..\/input\/datas-used\/Hospital Capacity.csv')\nca_capacity = capacity[capacity['State'] == 'CA']\ncapacity['State'] = capacity['State'].replace({'West Virginia ': 'West Virginia'})\ncapacity['State'] = capacity['State'].replace({'Washington ': 'Washington'})\n\n\nfull_table = state_df.merge(right=capacity, how='left',on=['State'])\n\nfull_table = full_table[full_table['Total Hospital Beds'].notna()]","7f2a4718":"map1 = px.choropleth(full_table,  \n                    locations=\"Code\",  \n                    color=\"Confirmed\",  \n                    hover_name=\"State\", \n                    locationmode = 'USA-states',\n                    color_continuous_scale=px.colors.sequential.GnBu) \n\nmap1.update_layout(title_text = 'Confirmed(State wise)', geo_scope='usa',)\nmap1.show()  \n","f9150276":"map2 = px.choropleth(full_table,  \n                    locations=\"Code\",  \n                    color=\"Deaths\",  \n                    hover_name=\"State\", \n                    locationmode = 'USA-states',\n                    color_continuous_scale=px.colors.sequential.Reds) \nmap2.update_layout(title_text = 'Deaths(State wise)',geo_scope='usa',)\nmap2.show()  ","a623c2ea":"print('Given below are three heatmaps based on correlation between various datas.')\nprint('Datas used are combined from Harvard Global Health Institute COVID-19 Hospital Capacity Estimates 2020 and Johns Hopkins Unversity Coronavirus Resource Center.')","76198fef":"try:\n  full_table['Adult Population'] = full_table['Adult Population'].str.replace(',', '').astype(int)\n  full_table['Population 65+'] = full_table['Population 65+'].str.replace(',', '').astype(int)\n  full_table['Total Hospital Beds'] = full_table['Total Hospital Beds'].str.replace(',', '').astype(int)\n  full_table['Total ICU Beds'] = full_table['Total ICU Beds'].str.replace(',', '').astype(int)\nexcept AttributeError:\n    pass\n\n#try-except used because first time running the program,the above parameters could be of any data types,but after it is executed once,it becomes type int and throws error next time when it is executed.\n#Attribute Error since int has no attribute 'replace'\n\ny1 = ['Confirmed','Incident Rate','People Tested','Testing Rate','Adult Population','Population 65+']\ncorr1 = full_table[['Confirmed','Incident_Rate','People_Tested','Testing_Rate','Adult Population','Population 65+']].corr()\ny2 = ['Recovered','People Hospitalized','Hospitalization Rate','Adult Population','Population 65+','Total Hospital Beds','Total ICU Beds']\ncorr2 = full_table[['Recovered','People_Hospitalized','Hospitalization_Rate','Total Hospital Beds','Total ICU Beds','Adult Population','Population 65+']].corr()\ny3 = ['Deaths','People Hospitalized','Mortality Rate','Hospitalization Rate','Adult Population','Population 65+']\ncorr3 = full_table[['Deaths','People_Hospitalized','Mortality_Rate','Hospitalization_Rate','Adult Population','Population 65+']].corr()\n\n#y1,y2,y3 for tick labels\n\nwith plt.style.context('seaborn'):\n  heat = plt.figure(figsize=(15,5))\n  \n  axes1 = heat.add_subplot(131)\n  sns.heatmap(corr1,center = 0,linewidth = 0.5,cmap=\"YlGnBu\",square = True,xticklabels = y1,yticklabels = y1)\n  axes1.set_title('Heatmap-1')\n\n  axes2 = heat.add_subplot(132)\n  sns.heatmap(corr2,center = 0,linewidth = 0.5,cmap=\"Greens\",square = True,xticklabels = y2,yticklabels = y2)\n  axes2.set_title('Heatmap-2')\n\n  axes3 = heat.add_subplot(133)\n  sns.heatmap(corr3,center = 0,linewidth = 0.5,cmap=\"OrRd\",square = True,xticklabels = y3,yticklabels = y3)\n  axes3.set_title('Heatmap-3')\n  \n  plt.tight_layout()\n  heat.suptitle('Heatmaps',fontsize = 'xx-large')\nplt.show()\n","5fd4561b":"\nwith plt.style.context('seaborn'):\n  plt.figure(figsize = (15,15))\n  sns.scatterplot(x =full_table['Incident_Rate'],y=full_table[\"Testing_Rate\"],size = full_table['Mortality_Rate'],sizes=(20, 200),hue = full_table['State'],legend = 'brief',alpha = 0.91)\n\n  plt.xlabel('Incident Rate')\n  plt.ylabel('Testing Rate')\n  plt.title('Scatter Plot',fontsize = 'x-large')\n\n  plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n  plt.gca().spines['top'].set_visible(False)\n  plt.gca().spines['right'].set_visible(False)\n\n  plt.axhline(y = full_table[\"Testing_Rate\"].max()\/2,color = 'orange',linestyle =\"--\") \n  plt.axvline(x = full_table['Incident_Rate'].max()\/2,color = 'orange',linestyle =\"--\") \n\n  x_variable1 = np.arange(full_table['Incident_Rate'].max())\n  #x_variable1 for creating sections within scatter plot\n\n  plt.fill_between(x_variable1,0,full_table[\"Testing_Rate\"].max()\/2,color = 'red',alpha = 0.2,where = x_variable1 >= full_table[\"Incident_Rate\"].max()\/2)\n  plt.fill_between(x_variable1,full_table[\"Testing_Rate\"].max()\/2,full_table[\"Testing_Rate\"].max(),color = 'green',alpha = 0.2,where = x_variable1 <= full_table[\"Incident_Rate\"].max()\/2)\n  full_table.reset_index(drop=True, inplace=True)\n\n  for i,text in enumerate(full_table['State']):\n      plt.text(full_table['Incident_Rate'][i],full_table[\"Testing_Rate\"][i] , text, fontsize=8.5)\n  \n  plt.text(50,full_table[\"Testing_Rate\"].max() - 1000,'Effective region(Low incidence rate & High Testing rate)',fontsize = 'large')\n  plt.text(full_table[\"Incident_Rate\"].max()\/2 + 25,1000,'Non Effective region(High incidence rate & Low Testing rate)',fontsize = 'large')\n\nprint('Given below is a scatter plot with Testing rate on y-axis and Incident rate on x-axis.')\nprint(\"Size of each State plotted is associated with it's Mortality rate.\")\nprint()\nplt.show()\n","0fcf1658":"print('Given below is a deeper analysis of state California.')\nprint('Data used to plot graph below is collected from New York Times series of data files.')","e4786fd8":"nyt_df = pd.read_csv('..\/input\/datas-used\/statedb.csv')\ncalifornia = nyt_df[nyt_df['state'] == 'California']\ncalifornia['Daily Count'] = california['cases'].diff().fillna(california['cases'])\ncalifornia['Daily Deaths'] = california['deaths'].diff().fillna(california['deaths'])\n\nx_variable2 = np.arange(len(california))\n#For plotting graph\ncalifornia.reset_index(drop=True, inplace=True)\n\nymax1 = max(california['Daily Count'])\nxpos1 = int(california[california['Daily Count'] == ymax1].index[0])\nxmax1 = x_variable2[xpos1]\n#Used for calculating highest peak\n\nwith plt.style.context('seaborn'):\n  fig4 = plt.figure(figsize=(20,10))\n  plot1 = fig4.add_subplot(121)\n  plot2 = fig4.add_subplot(122)\n\n  plot1.plot(x_variable2,california['cases'],marker = '.',markevery= 7,color = 'blue')\n  plot1.set_xlabel('Days',fontsize = 'large')\n  plot1.set_ylabel('Number',fontsize = 'large')\n  plot1.set_title('Cumulative Confirmed',fontsize = 'x-large')\n  plot1.fill_between(x_variable2,california['cases'],alpha = 0.4,color = 'blue')\n\n  plot2.annotate('Highest peak(%s)'%california.loc[xpos1,'date'], xy=(xmax1, ymax1), xytext=(xmax1, ymax1-5),arrowprops=dict(facecolor='black', shrink=0.05), )\n  plot2.set_xlabel('Days',fontsize = 'large')\n  plot2.set_ylabel('Number',fontsize = 'large')\n  plot2.set_title('Confirmed Daily',fontsize = 'x-large')\n  plot2.plot(x_variable2,california['Daily Count'],marker = '.',markevery = 7,color = 'blue')\n  plot2.fill_between(x_variable2,california['Daily Count'],alpha = 0.4,color = 'blue')\n\n  fig4.suptitle('Confirmed',fontsize = 'xx-large')\nplt.show()","1982b8e8":"with plt.style.context('seaborn'):\n  plt.figure(figsize = (20,8))\n  plt.bar(x_variable2,california['Daily Deaths'],color = 'r')\n  plt.xlabel('Days',fontsize = 'x-large')\n  plt.ylabel('Number',fontsize = 'x-large')\n  plt.title('Deaths per day',fontsize = 'xx-large')\n\n  ymax2 = max(california['Daily Deaths'])\n  xpos2 = int(california[california['Daily Deaths'] == ymax2].index[0])\n  xmax2 = x_variable2[xpos2]\n  #Used for calculating highest deaths\n  \n  plt.annotate('Highest deaths(%s)'%california.loc[xpos1,'date'], xy=(xmax2, ymax2), xytext=(xmax2, ymax2+5),arrowprops=dict(facecolor='black', shrink=0.05), )\nprint()\nplt.show()","e10268f6":"print('Confirmed cases:',california['cases'].iloc[-1])\nprint('Total deaths:',california['deaths'].iloc[-1])\nprint('Incident rate:',round(full_table['Incident_Rate'].iloc[4],2))\nprint('People tested:',int(full_table['People_Tested'].iloc[4]))\nprint('Testing rate:',round(full_table['Testing_Rate'].iloc[4],2))\n","b14c57d7":"print('Further breaking data analysis into city level by taking San Francisco city.')\nprint('San Francisco is one of the busiest and popular city in California.')\nprint('Data is collected from SF OpenData')\nprint(\"SF OpenData is the City and County of San Francisco\u2019s official open data portal and is a product of the official open data program, DataSF.\")","9af15a08":"hospitals = pd.read_csv('..\/input\/datas-used\/Health_Care_Facilities.csv')\nprint('Total number of Healthcare facilities available:',len(hospitals))\n","7e771df7":"\nfacility = list(hospitals['Facility Type'].unique())\nnumber = []\nfor i in range(4):\n    number.append(hospitals['Facility Type'].value_counts()[i])\nfig5 = go.Figure(data=[go.Pie(labels=facility, values=number, pull=[0, 0, 0.2, 0])])\nfig5.update_traces(hoverinfo='label+percent', textinfo='value')\nfig5.update_layout(title_text='Hospitals')\nfig5.show()","8a966a5a":"print('Given below is a graph of COVID-19 Cases Summarized by Race and Ethnicity')\nprint('Data is collected from data.gov')\nprint(\"data.gov is U.S. Government's open data website which provides data(federal, state, local, and tribal government) openly available to public.\")\n ","9418af51":"race_df = pd.read_csv('..\/input\/datas-used\/Race and ethnicity.csv')\nrace_df['Race\/Ethnicity'].replace({'Native Hawaiian or Other Pacific Islander': 'Native Hawaiian\/Other Pacific Islander','Hispanic or Latino\/a, all races':'Hispanic\/Latino','Black or African American': 'Black\/African American'},inplace = True)\nraces = list(race_df['Race\/Ethnicity'].unique())\ncount = []\n\nfor ele in races:\n    count.append(race_df.loc[race_df['Race\/Ethnicity'] == ele, 'Cumulative Confirmed Cases'].max())\ncolors1=['firebrick', 'seagreen','darkorange','darkgrey','gold', 'darkorchid','slategrey','lawngreen','dodgerblue']\n\nfig6 = go.Figure(data=[go.Bar(\n    x=count,\n    y=races,\n    orientation = 'h',\n    marker_color=colors1\n)])\n\nfig6.update_layout(title_text='Cases Summarized by Race and Ethnicity(San Francisco)')","28519dfa":"print('Given below is an analysis on the basis of age group and gender.')\nprint('Data used below is the number of deaths exclusively due to Covid-19.')\nprint('Data collected from data.gov and provided by CDC(Centers for Disease Control and Prevention)')\nprint(\"The Centers for Disease Control and Prevention is a national public health institute in the United States\")","024d4c1b":"deep_df = pd.read_csv('..\/input\/datas-used\/sex and age.csv')\ndeep_df.drop(deep_df[deep_df['State'] != 'United States'].index, inplace = True)","497a0399":"males = deep_df[deep_df['Sex'] == 'Male']\nfemales = deep_df[deep_df['Sex'] == 'Female']\nfemales[females['Age group'] == 'All ages']\nprint('Male deaths due to COVID-19:',int(males.loc[males['Age group'] == 'All ages','COVID-19 Deaths'].iloc[0]))\nprint('Female deaths due to COVID-19:',int(females.loc[females['Age group'] == 'All ages','COVID-19 Deaths'].iloc[0]))\n","71538eca":"males = deep_df[deep_df['Sex'] == 'Male']\nmales.drop(males[males['Age group'] == 'All ages'].index, inplace = True)\nfemales = deep_df[deep_df['Sex'] == 'Female']\nfemales.drop(females[females['Age group'] == 'All ages'].index, inplace = True)","3b4fdaff":"\nmpercent = 100.*males['COVID-19 Deaths']\/males['COVID-19 Deaths'].sum()\nfpercent = 100.*females['COVID-19 Deaths']\/females['COVID-19 Deaths'].sum()\nmlabels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(males['Age group'] , mpercent)]\nflabels = ['{0} - {1:1.2f} %'.format(i,j) for i,j in zip(females['Age group'] , fpercent)]\n\nwith plt.style.context('seaborn'):\n  plt.figure(figsize=(18,10), dpi=1600)\n  cmap = plt.get_cmap('jet')\n  colors2 = cmap(np.linspace(0., 1., len(males['Age group'])))\n  pie1 = plt.subplot2grid((2,2),(0,0))\n  plt.pie(males['COVID-19 Deaths'],startangle = 90,colors = colors2)\n  plt.legend(mlabels,loc = 'best',bbox_to_anchor=(1, 0, 0.5, 1))\n  plt.title('Males',fontsize = 'x-large')\n\n  pie2 = plt.subplot2grid((2,2), (0, 1))\n  plt.pie(females['COVID-19 Deaths'],startangle = 90,colors = colors2)\n  plt.legend(flabels,loc = 'best',bbox_to_anchor=(1, 0, 0.5, 1))\n  plt.title('Females',fontsize = 'x-large')\n  plt.suptitle('Gender\/Age Variation')\nplt.show()","83a73329":"print('Data used for choropleth map plotting below is from Johns Hopkins University & Medicine')","013a1693":"df = pd.read_csv('..\/input\/datas-used\/choro.csv',delimiter=',')\nnofips = [80001, 88888, 99999, 66, 69, 78,80013, 80015, 80017, 80022, 80026, 80040, 72888, 80047, 90001, 90002, 90004, 90005, 90006, 90009, 90010, 90012, 90013, 90015, 90016, 90017, 90018, 90019, 90020, 90021, 90022, 90023, 90024, 90025, 90026, 90027, 90028, 90029, 90030, 90031, 90032, 90033, 90034, 90035, 90036, 90037, 90038, 90039, 90040, 90041, 90042, 72999, 90044, 90045, 90046, 90047, 90048, 90049, 90050, 90051, 90053, 90054, 90055, 90056]\ndf = df[~df['FIPS'].isin(nofips)]\n\ndf = df[df['FIPS'].notna()]\ntemp = df['FIPS'].tolist()\ntemp = [round(x) for x in temp]\n\nhover = df['Province_State'].tolist()\n\nfips = []\nfor x in temp:\n  variable = str(x).zfill(5)\n  fips.append(variable)\nvalues1 = df['Confirmed'].tolist()\n\n","4c53189d":"print('Given below is choropleth map of United States taking Confirmed and Death counts as values.')","fec8b1ea":"\ncolorscale1 = px.colors.sequential.Darkmint\nendpts1 = list(np.linspace(100, 10000, len(colorscale1) - 3))\n\nmap3 = ff.create_choropleth(\n    fips=fips, values=values1,\n    mapbox_style=\"carto-positron\",\n    binning_endpoints=endpts1,\n    colorscale=colorscale1,\n    show_state_data=True,\n    scope = ['usa'],\n    \n    show_hover=True, centroid_marker={'opacity': 0},\n    asp=2.9, title='Confirmed Location wise',\n    legend_title='Confirmed'\n)\n\nmap3.layout.template = 'plotly_dark'\nmap3.update_traces(marker_color=None)\nmap3.update_xaxes(showticklabels=False)\nmap3.update_yaxes(showticklabels=False)\nmap3.show()\n","ec08a506":"colorscale2 = px.colors.sequential.Reds\nendpts2 = list(np.linspace(100, 1000, 4))\n\nvalues2 = df['Deaths'].tolist()\nmap4 = ff.create_choropleth(\n    fips=fips, values=values2,\n    mapbox_style=\"carto-positron\",\n    binning_endpoints=endpts2,\n    colorscale=colorscale2[3:8],\n    show_state_data=False,\n    show_hover=True, centroid_marker={'opacity': 0},\n    asp=2.9, title='Deaths location wise',\n    legend_title='Deaths'\n)\n\nmap4.layout.template = 'plotly_dark'\nmap4.update_xaxes(showticklabels=False)\nmap4.update_yaxes(showticklabels=False)\nmap4.show()","1a16311c":"print('Now user can input a state.')\nprint('Data corresponding to the state will be shown and visualized based on data gathered from Johns Hopkins University.')","312cf3d0":"state = input('Enter state:')\nif state.title() not in list(full_table['State'].unique()):\n  print('No such state')\nuser_df1 = full_table[full_table['State'] == state.title()]\nuser_df2 = nyt_df[nyt_df['state'] == state.title()]\nuser_df2['Daily cases'] = user_df2['cases'].diff().fillna(user_df2['cases'])\nuser_df2['Daily deaths'] = user_df2['deaths'].diff().fillna(user_df2['deaths'])\n\nuser_df2.drop(user_df2[user_df2['Daily cases'] < 0].index,inplace = True)\nuser_df2.drop(user_df2[user_df2['Daily deaths'] < 0].index,inplace = True)\n#Removing wrong data","f5827597":"print('Number of cases reported:',user_df2['cases'].iloc[-1])\nprint('Number of deaths reported:',user_df2['deaths'].iloc[-1])\nif user_df1['Recovered'].isnull().any():\n  print('Recovery cases not available')\nelse:\n  print('Number of recovered cases:',int(user_df1['Recovered'].iloc[0]))\n\n","4714a8c7":"print('Incident rate:',round(user_df1['Incident_Rate'].iloc[0],2))\nprint('People tested:',int(user_df1['People_Tested'].iloc[0]))\nprint('Testing rate:',round(user_df1['Testing_Rate'].iloc[0],2))\n\nif user_df1['People_Hospitalized'].isnull().any():\n  print('Hospitalization details not available')\nelse:\n  print('People hospitalized:',int(user_df1['People_Hospitalized'].iloc[0]))\n\nif user_df1['People_Hospitalized'].isnull().any():\n  print('Hospitalization rate not available')\nelse:\n  print('Hospitalization rate:',round(user_df1['Hospitalization_Rate'].iloc[0],2))\n\n","43917615":"fig7 = px.bar(user_df2, x=\"date\", y=\"Daily cases\")\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily cases in %s\"%state.title(),\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date\",\n    yaxis_title = \"Number of cases\"\n)\n\nfig7.update_layout(layout)\nfig7.layout.template = 'plotly_dark'\nfig7.show()","0c581201":"fig8 = px.bar(user_df2, x=\"date\", y=\"Daily deaths\")\n\nlayouts = go.Layout(\n    title=go.layout.Title(\n        text=\"Daily deaths in %s\"%state.title(),\n        x=0.5\n    ),\n    font=dict(size=14),\n    width=800,\n    height=500,\n    xaxis_title = \"Date\",\n    yaxis_title = \"Number of deaths\"\n)\n\nfig8.update_layout(layouts)\nfig8.update_traces(marker_color='red')\nfig8.layout.template = 'plotly_dark'\nfig8.show()","630ff14b":"print('Data Resources')\nprint('--------------')\nprint()\nprint('Ongoing repository of data on GitHub by New York Times and Johns Hopkins University & Medicine')\nprint('DataSF, City and County of San Francisco\u2019s official open data program')\nprint('data.gov, Open database maintained by Government of United States')\nprint('Harvard global health institute')\nprint('Centers for Disease Control and Prevention')","cc4a3f91":"\nHello, this is my first project as well as first upload on Kaggle.\nI am a noob in this field, and this project is the result of me trying to explore the field of Data Science through Python.\nI tried hard to make the code beautiful by making it self explanatory to a level and adding comments at places.\n\n\nThis project deals with Covid 19 Analysis of United States, which has most confirmed\/death cases reported.\nData used for the project are gathered from the following data providers:\n**  Johns Hopkins University & Medicine\n  New York Times\n  CDC (Centers for Disease Control and Prevention)\n  Harvard Global Health Institute\n  Data SF\n  data.gov**\n\n*Datas used are only upto date till uploaded date.\nPlease note this is not a live tracker. Only used datas till uploaded date(24th July 2020)*\n\nFeedbacks and comments are well appreciated so that i can improve myself. Thanks in advance!!"}}