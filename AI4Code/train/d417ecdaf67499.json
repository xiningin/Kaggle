{"cell_type":{"58bf0cec":"code","55af8463":"code","e4809869":"code","5be7cf55":"code","5a4a265e":"code","a559ffe6":"code","60caa16f":"code","2605de99":"code","f32bf2a0":"code","c8e330a3":"code","34c8b4eb":"code","30c39961":"code","ddb012b6":"code","4c7adfe8":"code","50b07c5f":"code","ee6cb4d2":"code","49c7489c":"code","fa1c0755":"code","b850fec1":"code","7b99d290":"markdown","ae97b9fa":"markdown","cd2a0843":"markdown","74ff1e63":"markdown","7ce64367":"markdown","a42653bb":"markdown"},"source":{"58bf0cec":"import numpy as np \nimport pandas as pd \nimport math\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU\nfrom keras.layers import *\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import EarlyStopping\nfrom keras.optimizers import Adam, SGD","55af8463":"def to_datetime(df):\n    date = datetime.strptime(df, '%d.%m.%Y')\n    return date.strftime(\"%Y-%m-%d\")","e4809869":"df = pd.read_csv('..\/input\/tesla-stock-price-new\/Price Tesla.csv', sep=';')\ndf['Date'] = df['Date'].apply(lambda x: to_datetime(x))\ndf = df.sort_values('Date').reset_index(drop=True)\ndf.head()","5be7cf55":"df.shape","5a4a265e":"df = df.iloc[:,1].values\nplt.plot(df)\nplt.xlabel(\"Time\")\nplt.ylabel(\"Price\")\nplt.show()","a559ffe6":"df = df.reshape(-1,1)\n\nscaler = MinMaxScaler(feature_range = (0,1))\ndf = scaler.fit_transform(df)\nnp.max(df)","60caa16f":"# Test - Train Split\ntrain_size = int(len(df) * 0.75) # % 75 Train\ntest_size = len(df) - train_size # % 25 Test\nprint(\"Train Size :\",train_size,\"Test Size :\",test_size)\n\ntrain = df[0:train_size,:]\ntest = df[train_size:len(df),:]","2605de99":"time_stemp = 20\n\ndatax = []\ndatay = []\nfor i in range(len(train)-time_stemp-1):\n    a = train[i:(i+time_stemp), 0]\n    datax.append(a)\n    datay.append(train[i + time_stemp, 0])\ntrainx = np.array(datax)\ntrainy = np.array(datay)\n\n\ndatax = []\ndatay = []\nfor i in range(len(test)-time_stemp-1):\n    a = test[i:(i+time_stemp), 0]\n    datax.append(a)\n    datay.append(test[i + time_stemp, 0])\ntestx = np.array(datax)\ntesty = np.array(datay)\n\ntrainx = np.reshape(trainx, (trainx.shape[0], 1, trainx.shape[1]))\ntestx = np.reshape(testx, (testx.shape[0], 1,testx.shape[1]))\nprint(trainx.shape)\ntestx.shape","f32bf2a0":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU\n\nmodelGRU = Sequential()\n\nmodelGRU.add(GRU(units = 50, return_sequences = True, input_shape = (1, time_stemp)))\nmodelGRU.add(Dropout(0.2))\n\nmodelGRU.add(GRU(units = 50, return_sequences = True))\nmodelGRU.add(Dropout(0.2))\n\nmodelGRU.add(GRU(units = 50, return_sequences = True))\nmodelGRU.add(Dropout(0.2))\n\nmodelGRU.add(GRU(units = 50))\nmodelGRU.add(Dropout(0.2))\n\nmodelGRU.add(Dense(units = 1))\nmodelGRU.summary()","c8e330a3":"epochs = 200\n\nmodelGRU.compile(optimizer=\"adam\", loss=\"mean_squared_error\")\n\ncallback = keras.callbacks.EarlyStopping(\n    monitor=\"loss\",\n    min_delta=0,\n    patience=0,\n    verbose=0,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=False,\n)\nhistory = modelGRU.fit(trainx,trainy, epochs = epochs, batch_size = 128)","34c8b4eb":"epoch = np.arange(0, epochs, 10)\nlosses = []\nfor i in epoch:\n    if i % 10 == 0:\n        losses.append(history.history[\"loss\"][i])\n        \ndata = {\"epoch\":epoch,\"loss\":losses}\ndata = pd.DataFrame(data) \n\nimport plotly.express as px\n\nfig = px.line(data,x=\"epoch\",y=\"loss\",width = 800, height = 400)\nfig.show()\n","30c39961":"train_predict = modelGRU.predict(trainx)\ntest_predict = modelGRU.predict(testx)\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\ntrainy = scaler.inverse_transform([trainy])\ntesty = scaler.inverse_transform([testy])\n\ntrain_score = math.sqrt(mean_squared_error(trainy[0], train_predict[:,0]))\nprint(\"Train Score : %2.f RMSE\" % (train_score))\ntest_score = math.sqrt(mean_squared_error(testy[0], test_predict[:,0]))\nprint(\"Test Score : %2.f RMSE\" % (test_score))","ddb012b6":"train_predict_plot = np.empty_like(df)\ntrain_predict_plot[:,:] = np.nan\ntrain_predict_plot[time_stemp:len(train_predict)+time_stemp, :] = train_predict\n\ntest_predict_plot = np.empty_like(df)\ntest_predict_plot[:, :] = np.nan\ntest_predict_plot[len(train_predict)+(time_stemp*2)+1:len(df)-1, :] = test_predict\n\nplt.figure(figsize=(20,10))\nplt.plot(scaler.inverse_transform(df),color = \"red\",label = \"Real\")\nplt.plot(train_predict_plot,label = \"Train Predict\",color = \"yellow\",alpha = 0.7)\nplt.plot(test_predict_plot,label = \"Test Predict\",color = \"green\", alpha = 0.7)\nplt.legend()\nplt.xlabel(\"Time\")\nplt.ylabel(\"Price\")\nplt.show()","4c7adfe8":"time_stemp = 20\n\ndatax = []\ndatay = []\nfor i in range(len(train)-time_stemp-1):\n    a = train[i:(i+time_stemp), 0]\n    datax.append(a)\n    datay.append(train[i + time_stemp, 0])\ntrainx = np.array(datax)\ntrainy = np.array(datay)\n\n\ndatax = []\ndatay = []\nfor i in range(len(test)-time_stemp-1):\n    a = test[i:(i+time_stemp), 0]\n    datax.append(a)\n    datay.append(test[i + time_stemp, 0])\ntestx = np.array(datax)\ntesty = np.array(datay)\n\ntrainx = np.reshape(trainx, (trainx.shape[0], 1, trainx.shape[1])) # For Keras\ntestx = np.reshape(testx, (testx.shape[0], 1,testx.shape[1])) # For Keras\nprint(trainx.shape)\ntestx.shape","50b07c5f":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout, GRU\n\nmodelLSTM = Sequential()\n\nmodelLSTM.add(LSTM(units = 50, return_sequences = True, input_shape = (1, time_stemp)))\nmodelLSTM.add(Dropout(0.2))\n\nmodelLSTM.add(LSTM(units = 50, return_sequences = True))\nmodelLSTM.add(Dropout(0.2))\n\nmodelLSTM.add(LSTM(units = 50, return_sequences = True))\nmodelLSTM.add(Dropout(0.2))\n\nmodelLSTM.add(LSTM(units = 50))\nmodelLSTM.add(Dropout(0.2))\n\nmodelLSTM.add(Dense(units = 1))\nmodelLSTM.summary()","ee6cb4d2":"epochs = 200\n\nmodelLSTM.compile(optimizer=\"adam\", loss=\"mean_squared_error\")\n\ncallback = keras.callbacks.EarlyStopping(\n    monitor=\"loss\",\n    min_delta=0,\n    patience=0,\n    verbose=0,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=False,\n)\nhistory = modelLSTM.fit(trainx,trainy, epochs = epochs, batch_size = 128)","49c7489c":"epoch = np.arange(0, epochs, 10)\nlosses = []\nfor i in epoch:\n    if i % 10 == 0:\n        losses.append(history.history[\"loss\"][i])\n        \ndata = {\"epoch\":epoch,\"loss\":losses}\ndata = pd.DataFrame(data)\n\n# Visualize\nimport plotly.express as px\n\nfig = px.line(data,x=\"epoch\",y=\"loss\",width = 800, height = 400)\nfig.show()\n","fa1c0755":"train_predict = modelLSTM.predict(trainx)\ntest_predict = modelLSTM.predict(testx)\n\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)\ntrainy = scaler.inverse_transform([trainy])\ntesty = scaler.inverse_transform([testy])\n\ntrain_score = math.sqrt(mean_squared_error(trainy[0], train_predict[:,0]))\nprint(\"Train Score : %2.f RMSE\" % (train_score))\ntest_score = math.sqrt(mean_squared_error(testy[0], test_predict[:,0]))\nprint(\"Test Score : %2.f RMSE\" % (test_score))","b850fec1":"train_predict_plot = np.empty_like(df)\ntrain_predict_plot[:,:] = np.nan\ntrain_predict_plot[time_stemp:len(train_predict)+time_stemp, :] = train_predict\n\ntest_predict_plot = np.empty_like(df)\ntest_predict_plot[:, :] = np.nan\ntest_predict_plot[len(train_predict)+(time_stemp*2)+1:len(df)-1, :] = test_predict\n\nplt.figure(figsize=(20,10))\nplt.plot(scaler.inverse_transform(df),color = \"red\",label = \"Real\")\nplt.plot(train_predict_plot,label = \"Train Predict\",color = \"yellow\",alpha = 0.7)\nplt.plot(test_predict_plot,label = \"Test Predict\",color = \"green\", alpha = 0.7)\nplt.legend()\nplt.xlabel(\"Time\")\nplt.ylabel(\"Price\")\nplt.show()","7b99d290":"# LSTM","ae97b9fa":"![](https:\/\/www.tagesspiegel.de\/images\/tesla\/25816148\/1-format6001.jpg)","cd2a0843":"# Please upvote it if you find it useful, thank you","74ff1e63":"# The dataset","7ce64367":"# LSTM","a42653bb":"Tesla, Inc. (formerly Tesla Motors, Inc.) is an American electric vehicle and clean energy company based in Palo Alto, California. Tesla's current products include electric cars (the Model S, Model 3, Model X, and Model Y), battery energy storage from home to grid scale (the Powerwall, Powerpack, and Megapack), solar products (solar panels and solar roof tiles) and related products and services."}}