{"cell_type":{"bc0b1a26":"code","0fe05977":"code","5e1e3fce":"code","416e653e":"code","90f053fc":"code","67baa3b2":"code","8a72b7cc":"code","b96da720":"code","8240d1ce":"code","7ddaff40":"code","d4ee283e":"code","abd5e08e":"code","7a6ef4ce":"code","9e45c107":"code","11cc7a6b":"code","74ca4da1":"code","f592d9bb":"code","9d365d96":"code","2f5dac15":"code","b37b04c3":"code","870f82f5":"code","159bab37":"code","910728c0":"code","ff9af6e7":"code","ad2a22a8":"code","7670f491":"code","a5db029a":"code","60ffc190":"code","eb810091":"code","07ed514f":"code","f1eae58e":"code","fc8779f7":"code","96058777":"code","5da9e6a7":"code","f6daff21":"code","a4ebecba":"code","e9f6137d":"code","a253895a":"code","93d02c25":"code","eb5d3c90":"code","823e5624":"code","99af272c":"code","b75d75aa":"code","1f162abc":"code","4b87f7a0":"code","1d4586ca":"code","5075d111":"code","3e22c51f":"code","81a648ef":"code","6faad32e":"code","918e06eb":"code","6e9d9018":"code","d1b1f3b8":"code","b4172b7e":"code","62a06010":"code","a571ea88":"code","ccfdb203":"code","fe683d52":"code","b227df8a":"code","39abed67":"code","967b1c6e":"code","ad34f90e":"code","906bf32b":"code","938c88e3":"code","70674b63":"code","118b1c3e":"code","2e32e68b":"code","fe6f9308":"markdown","0dc5946f":"markdown","5c355ee6":"markdown","8db9df36":"markdown","146cd0e7":"markdown","1e777f74":"markdown","6f52c376":"markdown","0feba4b0":"markdown","b98d3d2f":"markdown","9c5587ea":"markdown","c8ba35bb":"markdown","59d9c3b9":"markdown","e1d50015":"markdown","765013c6":"markdown"},"source":{"bc0b1a26":"!pip -qq install tsai","0fe05977":"from tsai.all import *\ncomputer_setup()","5e1e3fce":"import numpy as np\nimport pandas as pd\nimport os\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","416e653e":"beep()","90f053fc":"get_Monash_regression_list()","67baa3b2":"dsid = \"NewsHeadlineSentiment\"\n# X_train, y_train, X_valid, y_valid = get_Monash_regression_data(dsid, on_disk=True, split_data=True)\nX, y, splits = get_Monash_regression_data(dsid, on_disk=True, split_data=False, force_download=True, verbose=True)","8a72b7cc":"beep()","b96da720":"tfms  = [None, None]\ndsets = TSDatasets(X, y, tfms=tfms, splits=splits)","8240d1ce":"dls   = TSDataLoaders.from_dsets(dsets.train, dsets.valid, bs=64, batch_tfms=TSStandardize(by_var=True))","7ddaff40":"dls.vars","d4ee283e":"dls.c","abd5e08e":"dls.len","7a6ef4ce":"model = TST(dls.vars, dls.c, dls.len, res_dropout=0.3, fc_dropout=0.9)","9e45c107":"learn = Learner(dls, model, loss_func=nn.MSELoss(),metrics=mae,  cbs=ShowGraphCallback2())\nlearn.fit_one_cycle(2, 1e-4) ","11cc7a6b":"df=pd.DataFrame()\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        tmp=pd.read_csv(os.path.join(dirname, filename))\n        df=pd.concat([df,tmp])\n    \ndf.Date=pd.to_datetime(df.Date)","74ca4da1":"print(df.Symbol.unique())","f592d9bb":"df.head(2)","9d365d96":"Marketcap=pd.pivot_table(df,values='Marketcap',columns='Symbol',index='Date').pct_change()\nVolume   =pd.pivot_table(df,values='Volume'   ,columns='Symbol',index='Date').pct_change()\n\nClose    =pd.pivot_table(df,values='Close'    ,columns='Symbol',index='Date').pct_change()\nOpen     =pd.pivot_table(df,values='Open'     ,columns='Symbol',index='Date').pct_change()\n\nHigh     =pd.pivot_table(df,values='High'     ,columns='Symbol',index='Date').pct_change()\nLow      =pd.pivot_table(df,values='Low'      ,columns='Symbol',index='Date').pct_change()","2f5dac15":"# col=['AAVE', 'ADA', 'ATOM', 'BNB', 'BTC', 'CRO', 'DOGE', 'DOT', 'EOS', 'ETH',\n#        'LINK', 'LTC', 'MIOTA', 'SOL', 'TRX', 'UNI', 'USDC', 'USDT', 'WBTC',\n#        'XEM', 'XLM', 'XMR', 'XRP']\ncol=['BTC']\ndf=Close[col].copy()\n# df=Close[col].merge(Volume[col],left_index=True,right_index=True,suffixes=('','_Vol'))\n# df=Marketcap[col].merge(Volume[col],\n#                    left_index=True,\n#                    right_index=True,\n#                    suffixes=('_MarCap','_Vol')).merge(Open[col],\n#                                                       left_index=True,\n#                                                       right_index=True).merge(High[col],\n#                                                                               left_index=True,\n#                                                                               right_index=True,\n#                                                                               suffixes=('_Open','_High')).merge(Low[col],\n#                                                                                                              left_index=True,\n#                                                                                                              right_index=True).merge(Close[col],\n#                                                                                                                                      left_index=True,\n#                                                                                                                                      right_index=True,\n#                                                                                                                                      suffixes=('_Low',''))\n# df=Marketcap[['BTC']].merge(Volume[['BTC']],left_index=True,right_index=True,suffixes=('_MarCap','_Vol')).merge(Close,left_index=True,right_index=True)\n# df=Marketcap.merge(Volume,left_index=True,right_index=True,suffixes=('_MarCap','_Vol')).merge(Ret,left_index=True,right_index=True)\n","b37b04c3":"df.head()","870f82f5":"df=df.loc[\"2018-01-01\":]","159bab37":"df.shape","910728c0":"(df.BTC>0).value_counts()","ff9af6e7":"df.BTC.mean()","ad2a22a8":"# df['target']=(df['BTC']>0.03).shift(-1).map(str) #for classification TEST\n# df['target']=(df['BTC']>0.0027).map(str) #for classification TEST\ndf['target']=df['BTC'].shift(-1) #for regression\ndf.head(4)","7670f491":"# df.target.value_counts()\/len(df)","a5db029a":"df=df.iloc[1:-1,:]\n# df.target.value_counts()\/len(df)","60ffc190":"# df.fillna(0,inplace=True)","eb810091":"df.plot()","07ed514f":"des=df.describe()\ndes=des.T\ndes","f1eae58e":"#use average returns to predict next day's returns\nabs(df.target-0.002737).mean()","fc8779f7":"#use today's return to predict next day's return\nabs(df.target-df.BTC).mean()","96058777":"get_x = df.columns[:-1]      # Indicates which are the columns that contain the x data.\nget_y = ['target']             # In multivariate time series, you must indicate which is\/are the y columns\n\nwindow_length = 3         # window_length is usually selected based on prior domain knowledge or by trial and error\nstride = 1                # None for non-overlapping (stride = window_length) (default = 1). This depends on how often you want to predict once the model is trained\nstart = 0                 # use all data since the first time stamp (default = 0)\nhorizon = 0               # horizon = number of future datapoints to predict. 0 for last step in the selected window. > 0 for future steps. List for several steps.\n                            \nX, y = SlidingWindow(window_length, stride=stride, start=start, get_x=get_x,  get_y=get_y, horizon=horizon)(df)\nsplits = get_splits(y, valid_size=.2, random_state=23, shuffle=False) # shuffle false since we are using one long time series\n# tfms  = [None, Categorize()] # #Categoriztion\ntfms  = [None, None] # Regression\ndsets = TSDatasets(X, y, tfms=tfms, splits=splits)\ndsets","5da9e6a7":"check_data(X,y)","f6daff21":"X[0],y[0]","a4ebecba":"# X[1]","e9f6137d":"bs=256\nbatch_tfms=[TSStandardize(by_var=True)] #TSStandardize(mean=0,std=1)\ndls   = TSDataLoaders.from_dsets(dsets.train, dsets.valid, bs=bs, batch_tfms=batch_tfms)\ndls.show_batch()","a253895a":"x= next(iter(dls.train))\n# x[0].data,x[1].data,\nx[0].data[:3],x[1].data[:3],x[0].data.mean(),x[0].data.std()","93d02c25":"dls.vars, dls.c, dls.len","eb5d3c90":"model","823e5624":"model = TSTPlus(dls.vars, dls.c, dls.len,\n                res_dropout=0.3, fc_dropout=0.9,\n                n_layers=1,\n#                 d_model=1024,\n#                 d_k=512,\n#                 d_v=512,\n#                 d_ff=4096,\n               )#res_dropout=0.3, fc_dropout=0.9,\nlearn = Learner(dls, model, loss_func=nn.MSELoss(),metrics=mae)\n# learn = Learner(dls, model, metrics=accuracy)#loss_func=LabelSmoothingCrossEntropyFlat(, cbs=[ShowGraphCallback2(),EarlyStoppingCallback(monitor='accuracy', min_delta=0.001, patience=30)])\nlearn.lr_find()","99af272c":"learn = Learner(dls, model,  loss_func=nn.MSELoss(),metrics=mae,cbs=ShowGraphCallback2())\n\n# F=F1Score()\n# R=Recall()\n# learn = Learner(dls, model, metrics=[R,F,accuracy],cbs=ShowGraphCallback2())\n\nlr=1e-3\nn_epochs=100\nlearn.fit_one_cycle(n_epochs, lr_max=lr);beep()","b75d75aa":"# learn.recorder.values\nlearn.plot_metrics()","1f162abc":"learn.show_results()","4b87f7a0":"# Labeled test data\ntest_ds = dls.dataset.add_test(X[-1:], y[-1:])# In this case I'll use X and y, but this would be your test data\ntest_dl = dls.new(test_ds)\n# next(iter(test_dl))\n\n_, test_targets, test_preds = learn.get_preds(dl=test_dl, with_decoded=True, save_preds=None, save_targs=None)\nabs(test_preds-test_targets)","1d4586ca":"# learn.show_probas()","5075d111":"# interp = ClassificationInterpretation.from_learner(learn)\n# interp.plot_confusion_matrix()","3e22c51f":"dls   = TSDataLoaders.from_dsets(dsets.train, dsets.valid, bs=bs, batch_tfms=TSStandardize())\nmodel = InceptionTimePlus(dls.vars, dls.c, dls.len)\n# learn = Learner(dls, model, metrics=accuracy)#, loss_func=LabelSmoothingCrossEntropyFlat()\nlearn = Learner(dls, model,  loss_func=nn.MSELoss(),metrics=mae)\nlearn.fit_one_cycle(n_epochs, lr_max=lr);beep()","81a648ef":"learn.plot_metrics()","6faad32e":"_, test_targets, test_preds = learn.get_preds(dl=test_dl, with_decoded=True, save_preds=None, save_targs=None)\nabs(test_preds-test_targets)","918e06eb":"#code","6e9d9018":"#code here","d1b1f3b8":"dls100  = get_ts_dls(X, y, splits=splits, tfms=tfms, batch_tfms=batch_tfms)\nudls100 = get_ts_dls(X, splits=splits, tfms=tfms, batch_tfms=batch_tfms) # used in pretraining","b4172b7e":"learn = ts_learner(udls100, InceptionTimePlus, cbs=[ShowGraph(), MVP(target_dir='.\/data\/MVP', fname=f'Inception')])\nlearn.fit_one_cycle(50, 1e-2)","62a06010":"learn.MVP.show_preds(sharey=True)","a571ea88":"learn = ts_learner(dls100, InceptionTimePlus, pretrained=True, weights_path=f'data\/MVP\/Inception.pth', metrics=nn.L1Loss())\nfor p in learn.model.parameters():\n    p.requires_grad=False\nprint(f'{\"trainable params once manually frozen\":40}: {count_parameters(learn.model):8}')\nlearn.freeze()\nprint(f'{\"trainable params after learn.freeze()\":40}: {count_parameters(learn.model):8}')\nlearn.unfreeze()\nprint(f'{\"trainable params learn.unfreeze()\":40}: {count_parameters(learn.model):8}')","ccfdb203":"n_epochs = 50\nfreeze_epochs = 10\nn_tests = 2#10\n_result = []\nfor i in range(n_tests):\n    clear_output()\n    if i > 0: print(f'{i}\/{n_tests} MAE: {np.mean(_result):.3f} +\/- {np.std(_result):.3f}')\n    else: print(f'{i}\/{n_tests}')\n    learn = ts_learner(dls100, InceptionTimePlus, pretrained=True, weights_path=f'data\/MVP\/Inception.pth', metrics=nn.L1Loss())\n    learn.fine_tune(n_epochs, base_lr=2e-2, freeze_epochs=freeze_epochs)\n    _result.append(learn.recorder.values[-1][-1])\nlearn.plot_metrics()\nprint(f'\\nMAE: {np.mean(_result):.3f} +\/- {np.std(_result):.3f} in {n_tests} tests')","fe683d52":"learn = ts_learner(udls100, TSTPlus, cbs=[ShowGraph(), MVP(target_dir='.\/data\/MVP', fname=f'TSTPlus')])\nlearn.fit_one_cycle(50, 1e-2)","b227df8a":"learn.MVP.show_preds(sharey=True)","39abed67":"learn = ts_learner(dls100, InceptionTimePlus, pretrained=True, weights_path=f'data\/MVP\/Inception.pth', metrics=mae)\nfor p in learn.model.parameters():\n    p.requires_grad=False\nprint(f'{\"trainable params once manually frozen\":40}: {count_parameters(learn.model):8}')\nlearn.freeze()\nprint(f'{\"trainable params after learn.freeze()\":40}: {count_parameters(learn.model):8}')\nlearn.unfreeze()\nprint(f'{\"trainable params learn.unfreeze()\":40}: {count_parameters(learn.model):8}')","967b1c6e":"# self-supervised: fine-tuning with 100% labels\nn_epochs = 50\nfreeze_epochs = 10\nn_tests = 2#10\n_result = []\nfor i in range(n_tests):\n    clear_output()\n    if i > 0: print(f'{i}\/{n_tests} MAE: {np.mean(_result):.3f} +\/- {np.std(_result):.3f}')\n    else: print(f'{i}\/{n_tests}')\n    learn = ts_learner(dls100, TSTPlus, pretrained=True, weights_path=f'data\/MVP\/TSTPlus.pth', metrics=mae,res_dropout=0.3, fc_dropout=0.9)\n    learn.fine_tune(n_epochs, base_lr=2e-2, freeze_epochs=freeze_epochs)\n    _result.append(learn.recorder.values[-1][-1])\nlearn.plot_metrics()\nprint(f'\\nMAE: {np.mean(_result):.3f} +\/- {np.std(_result):.3f} in {n_tests} tests')","ad34f90e":"_, test_targets, test_preds = learn.get_preds(dl=test_dl, with_decoded=True, save_preds=None, save_targs=None)\nabs(test_preds-test_targets)","906bf32b":"dsid = 'Cricket' \nX, y, splits = get_UCR_data(dsid, split_data=False)","938c88e3":"X.shape","70674b63":"y.shape","118b1c3e":"get_UCR_multivariate_list()","2e32e68b":"get_UCR_univariate_list()","fe6f9308":"## Applying to Crypto Asset Prices","0dc5946f":"## Testing on a benchmarked dataset\nhttps:\/\/zenodo.org\/record\/3902718#.YUSyeWYzZfU","5c355ee6":"# Coding Exercise 2 - Can we improve performance?\nTweak either of TSTPlus and InceptionTimePlus `model` to improve results. Possible ways include\n1. Changing the context length, i.e. how long a sequence the model has \n1. Training for more epochs\n1. Use better learning rate(`lr`)\n1. Have a deeper model\n1. Add\/Engineer Features","8db9df36":"# Pre-Training InceptionTime and TST\nAutoregressive denoising objective that does not require labels","146cd0e7":"Testing whether a library works or not","1e777f74":"# Coding Exercise 3 - Can we improve performance by shuffling dataset?\nNot a good idea.","6f52c376":"# Coding Exercise 4\nRepeat for another dataset from monah list or UCR list for RNNs or another model\nhttps:\/\/timeseriesai.github.io\/tsai\/data.external.html","0feba4b0":"visual examintation looks right","b98d3d2f":"Merge","9c5587ea":"# Applying SOTA Transformers and CNNs to time series","c8ba35bb":"# Coding Exercise 1\n\nCome up with a simple and good baseline to measure our model against","59d9c3b9":"# self-supervised: fine-tuning with 100% labels","e1d50015":"try for `TSTPlus`","765013c6":"now let's try inception time"}}