{"cell_type":{"0ac35fb1":"code","5dea242a":"code","d68d1748":"code","68433afe":"code","cd192bb0":"code","35092e53":"code","b72a813b":"code","6bf42ca1":"code","aa20bd52":"code","71498b86":"code","15b7d8bf":"code","024d0735":"code","af4d4641":"code","990b008a":"code","b5dc9115":"code","9174c84e":"code","e4651d34":"code","13ce5559":"code","9b66241c":"code","faab6ba5":"code","1ec64508":"code","ed9ba486":"code","af527fda":"code","775058d3":"code","b0b2bae5":"code","0b525996":"code","686818d9":"code","65e4cbe7":"code","dde37ef6":"code","f0777a47":"code","72f28072":"code","bf2e7814":"code","c9dc0e65":"code","d3ae796a":"markdown","90bb192a":"markdown","ec4cde6f":"markdown","1e745ca2":"markdown"},"source":{"0ac35fb1":"import os, sys\nimport pandas as pd,numpy as np\nimport re\nimport spacy\nfrom spacy import displacy\nfrom collections import Counter\nimport en_core_web_sm\nnlp = en_core_web_sm.load()\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tag import pos_tag\nimport xml.etree.cElementTree as ET\nfrom collections import OrderedDict\nimport json","5dea242a":"bulletin_dir = '..\/input\/cityofla\/CityofLA\/Job Bulletins\/'\nadditional_data_dir = '..\/input\/cityofla\/CityofLA\/Additional data\/'","d68d1748":"headings = {}\nfor filename in os.listdir(bulletin_dir):\n    with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n        for line in f.readlines():\n            line = line.replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\":\",\"\").strip()\n            \n            if line.isupper():\n                if line not in headings.keys():\n                    headings[line] = 1\n                else:\n                    count = int(headings[line])\n                    headings[line] = count+1","68433afe":"del headings['$103,606 TO $151,484'] #This is not a heading, it's an Annual Salary component\nheadingsFrame = []\nfor i,j in (sorted(headings.items(), key = lambda kv:(kv[1], kv[0]), reverse = True)):\n    headingsFrame.append([i,j])\nheadingsFrame = pd.DataFrame(headingsFrame)\nheadingsFrame.columns = [\"Heading\",\"Count\"]\n#headingsFrame.head()","cd192bb0":"#Add 'FILE_NAME', 'JOB_CLASS_TITLE', 'JOB_CLASS_NO' ,'OPEN_DATE'\ndata_list = []\nfor filename in os.listdir(bulletin_dir):\n    with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n        job_class_title = ''\n        for line in f.readlines():\n            #Insert code to parse job bulletins\n            if \"Open Date:\" in line:\n                job_bulletin_date = line.split(\"Open Date:\")[1].split(\"(\")[0].strip()\n            if \"Class Code:\" in line:\n                job_class_no = line.split(\"Class Code:\")[1].strip()\n            if len(job_class_title)<2 and len(line.strip())>1:\n                job_class_title = line.strip()\n        data_list.append([filename, job_bulletin_date, job_class_title, job_class_no])","35092e53":"df = pd.DataFrame(data_list)\ndf.columns = [\"FILE_NAME\", \"OPEN_DATE\", \"JOB_CLASS_TITLE\", \"JOB_CLASS_NO\"]\ndf.head()","b72a813b":"#Add 'REQUIREMENT_SET_ID','REQUIREMENT_SUBSET_ID'\nrequirements = []\nrequirementHeadings = [k for k in headingsFrame['Heading'].values if 'requirement' in k.lower()]\nfor filename in os.listdir(bulletin_dir):\n    with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n        readNext = 0\n        isNumber=0\n        prevNumber=0\n        prevLine=''\n        \n        for line in f.readlines():\n            clean_line = line.replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\":\",\"\").strip()   \n            if readNext == 0:                         \n                if clean_line in requirementHeadings:\n                    readNext = 1\n            elif readNext == 1:\n                if clean_line in headingsFrame['Heading'].values:\n                    if isNumber>0:\n                        requirements.append([filename,prevNumber,'',prevLine])\n                    break\n                elif len(clean_line)<2:\n                    continue\n                else:\n                    rqrmntText = clean_line.split('.')\n                    if len(rqrmntText)<2:\n                        requirements.append([filename,'','',clean_line])\n                    else:                        \n                        if rqrmntText[0].isdigit():\n                            if isNumber>0:\n                                requirements.append([filename,prevNumber,'',prevLine])\n                            isNumber=1\n                            prevNumber=rqrmntText[0]\n                            prevLine=clean_line\n                        elif re.match('^[a-z]$',rqrmntText[0]):\n                            requirements.append([filename,prevNumber,rqrmntText[0],prevLine+'-'+clean_line])\n                            isNumber=0\n                        else:\n                            requirements.append([filename,'','',clean_line])","6bf42ca1":"df_requirements = pd.DataFrame(requirements)\ndf_requirements.columns = ['FILE_NAME','REQUIREMENT_SET_ID','REQUIREMENT_SUBSET_ID','REQUIREMENT_TEXT']\ndf_requirements.head()","aa20bd52":"#Check for one sample file \ndf_requirements.loc[df_requirements['FILE_NAME']=='SYSTEMS ANALYST 1596 102717.txt']","71498b86":"#Check for salary components\nsalHeadings = [k for k in headingsFrame['Heading'].values if 'salary' in k.lower()]\nsal_list = []\nfor filename in os.listdir(bulletin_dir):\n    with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n        readNext = 0\n        for line in f.readlines():\n            clean_line = line.replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\":\",\"\").strip()  \n            if clean_line in salHeadings:\n                readNext = 1\n            elif readNext == 1:\n                if clean_line in headingsFrame['Heading'].values:\n                    break\n                elif len(clean_line)<2:\n                    continue\n                else:\n                    sal_list.append([filename, clean_line])","15b7d8bf":"df_salary = pd.DataFrame(sal_list)\ndf_salary.columns = ['FILE_NAME','SALARY_TEXT']\ndf_salary.head()","024d0735":"files = []\nfor filename in os.listdir(bulletin_dir):\n    files.append(filename)","af4d4641":"#Add 'ENTRY_SALARY_GEN','ENTRY_SALARY_DWP'\npattern = r'\\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?'\ndwp_salary_list = {}\ngen_salary_list = {}\nfor filename in files:\n    for sal_text in df_salary.loc[df_salary['FILE_NAME']==filename]['SALARY_TEXT']:\n        if 'department of water' in sal_text.lower():\n            if filename in dwp_salary_list.keys():\n                continue\n            matches = re.findall(pattern+' to '+pattern, sal_text) \n            if len(matches)>0:\n                salary_dwp = ' - '.join([x for x in matches[0] if x and not x.endswith(',')])\n            else:\n                matches = re.findall(pattern, sal_text)\n                if len(matches)>0:\n                    salary_dwp = matches[0][0]\n                else:\n                    salary_dwp = ''\n            dwp_salary_list[filename]= salary_dwp\n        else:\n            if filename in gen_salary_list.keys():\n                continue\n            matches = re.findall(pattern+' to '+pattern, sal_text)\n            if len(matches)>0:\n                salary_gen = ' - '.join([x for x in matches[0] if x and not x.endswith(',')])\n            else:\n                matches = re.findall(pattern, sal_text)\n                if len(matches)>0:\n                    salary_gen = matches[0][0]\n                else:\n                    salary_gen = ''\n            if len(salary_gen)>1:\n                gen_salary_list[filename]= salary_gen","990b008a":"df_salary_dwp = pd.DataFrame(list(dwp_salary_list.items()), columns=['FILE_NAME','ENTRY_SALARY_DWP'])\ndf_salary_gen = pd.DataFrame(list(gen_salary_list.items()), columns=['FILE_NAME','ENTRY_SALARY_GEN'])","b5dc9115":"def preprocess(txt):\n    txt = nltk.word_tokenize(txt)\n    txt = nltk.pos_tag(txt)\n    return txt","9174c84e":"def getEducationMajor(row):\n    txt = row['REQUIREMENT_TEXT']\n    txtMajor = ''\n    if 'major in' not in txt.lower() and ' majoring ' not in txt.lower():\n        return txtMajor\n    result = []\n    \n    istart = txt.lower().find(' major in ')\n    if istart!=-1:\n        txt = txt[istart+10:]\n    else:\n        istart = txt.lower().find(' majoring ')\n        if istart==-1:\n            return txtMajor\n        txt = txt[istart+12:]\n    \n    txt = txt.replace(',',' or ').replace(' and\/or ',' or ').replace(' a closely related field',' related field')\n    sent = preprocess(txt)\n    pattern = \"\"\"\n            NP: {<DT>? <JJ>* <NN.*>*}\n           BR: {<W.*>|<V.*>} \n        \"\"\"\n    cp = nltk.RegexpParser(pattern)\n    cs = cp.parse(sent)\n    #print(cs)\n    checkNext = 0\n    for subtree in cs.subtrees():\n        if subtree.label()=='NP':\n            result.append(' '.join([w for w, t in subtree.leaves()]))\n            checkNext=1\n        elif checkNext==1 and subtree.label()=='BR':\n            break\n    return '|'.join(result)","e4651d34":"#Add EDUCATION_MAJOR\ndf_requirements['EDUCATION_MAJOR']=df_requirements.apply(getEducationMajor, axis=1)","13ce5559":"df_requirements.loc[df_requirements['EDUCATION_MAJOR']!=''].head()","9b66241c":"#function to fill majors for apprenticeship programs\ndef getApprenticeshipMajor(row):\n    txt = row['REQUIREMENT_TEXT']\n    txtMajor = row['EDUCATION_MAJOR']\n    if 'apprenticeship' not in txt:\n        return txtMajor\n    if txtMajor != '':\n        return txtMajor\n    result = []\n    \n    istart = txt.lower().find(' apprenticeship program')\n    if istart!=-1:\n        txt = txt[istart+23:]\n    else:\n        istart = txt.lower().find(' apprenticeship ')\n        if istart==-1:\n            return txtMajor\n        txt = txt[istart+15:]\n    \n    txt = txt.replace(',',' or ').replace(' full-time ',' ')\n    sent = preprocess(txt)\n    pattern = \"\"\"\n            NP: {<DT>? <JJ>* <NN>*}\n           BR: {<W.*>|<V.*>} \n        \"\"\"\n    cp = nltk.RegexpParser(pattern)\n    cs = cp.parse(sent)\n    #print(cs)\n    checkNext = 0\n    for subtree in cs.subtrees():\n        if subtree.label()=='NP':\n            result.append(' '.join([w for w, t in subtree.leaves()]))\n            checkNext=1\n        elif checkNext==1 and subtree.label()=='BR':\n            break\n    return '|'.join(result)","faab6ba5":"df_requirements['EDUCATION_MAJOR']=df_requirements.apply(getApprenticeshipMajor, axis=1)","1ec64508":"df_requirements[(df_requirements['EDUCATION_MAJOR']!='') & (df_requirements['REQUIREMENT_TEXT'].str.contains('apprentice'))].head()","ed9ba486":"def getValues(searchText, COL_NAME):\n    data_list = []\n    dataHeadings = [k for k in headingsFrame['Heading'].values if searchText in k.lower()]\n\n    for filename in os.listdir(bulletin_dir):\n        with open(bulletin_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n            readNext = 0 \n            datatxt = ''\n            for line in f.readlines():\n                clean_line = line.replace(\"\\n\",\"\").replace(\"\\t\",\"\").replace(\":\",\"\").strip()   \n                if readNext == 0:                         \n                    if clean_line in dataHeadings:\n                        readNext = 1\n                elif readNext == 1:\n                    if clean_line in headingsFrame['Heading'].values:\n                        break\n                    else:\n                        datatxt = datatxt + ' ' + clean_line\n            data_list.append([filename,datatxt.strip()])\n    result = pd.DataFrame(data_list)\n    result.columns = ['FILE_NAME',COL_NAME]\n    return result","af527fda":"#Add JOB_DUTIES\ndf_duties = getValues('duties','JOB_DUTIES')","775058d3":"print(df_duties['JOB_DUTIES'].loc[df_duties['FILE_NAME'] == 'AIRPORT POLICE SPECIALIST 3236 063017 (2).txt'].values)","b0b2bae5":"#Function to retrieve values that match with pre-defined values \ndef section_value_extractor( document, section, subterms_dict, parsed_items_dict ):\n    retval = OrderedDict()\n    single_section_lines = document.lower()\n    \n    for node_tag, pattern_string in subterms_dict.items():\n        pattern_list = re.split(r\",|:\", pattern_string[0])#.sort(key=len)\n        pattern_list=sorted(pattern_list, key=len, reverse=True)\n        #print (pattern_list)\n        matches=[]\n        for pattern in pattern_list:\n            if pattern.lower() in single_section_lines:\n                matches.append(pattern)\n                single_section_lines = single_section_lines.replace(pattern.lower(),'')\n        #print (matches)\n        if len(matches):\n            info_string = \", \".join(list(matches)) + \" \"\n            retval[node_tag] = info_string\n    return retval","0b525996":"#Function to read xml configuration to return json formatted string\ndef read_config( configfile ):\n    root = ET.fromstring(configfile)\n    config = []\n    for child in root:\n        term = OrderedDict()\n        term[\"Term\"] = child.get('name', \"\")\n        for level1 in child:\n            term[\"Method\"] = level1.get('name', \"\")\n            term[\"Section\"] = level1.get('section', \"\")\n            for level2 in level1:\n                term[level2.tag] = term.get(level2.tag, []) + [level2.text]\n\n        config.append(term)\n    json_result = json.dumps(config, indent=4)\n    return config","686818d9":"def parse_document(document, config):\n    parsed_items_dict = OrderedDict()\n\n    for term in config:\n        term_name = term.get('Term')\n        extraction_method = term.get('Method')\n        extraction_method_ref = globals()[extraction_method]\n        section = term.get(\"Section\")\n        subterms_dict = OrderedDict()\n        \n        for node_tag, pattern_list in list(term.items())[3:]:\n            subterms_dict[node_tag] = pattern_list\n        parsed_items_dict[term_name] = extraction_method_ref(document, section, subterms_dict, parsed_items_dict)\n\n    return parsed_items_dict","65e4cbe7":"#Read job_titles to use them to find patterns in the requirement text to extract job_class_titles\njob_titles = pd.read_csv(additional_data_dir+'\/job_titles.csv', header=None)\n\njob_titles = ','.join(job_titles[0])\njob_titles = job_titles.replace('\\'','').replace('&','and')","dde37ef6":"configfile = r'''\n<Config-Specifications>\n<Term name=\"Requirements\">\n        <Method name=\"section_value_extractor\" section=\"RequirementSection\">\n            <SchoolType>College or University,High School,Apprenticeship,Certificates<\/SchoolType>\n            <JobTitle>'''+job_titles+'''<\/JobTitle>\n        <\/Method>\n    <\/Term>\n<\/Config-Specifications>\n'''","f0777a47":"config = read_config(configfile)\nresult = df_requirements['REQUIREMENT_TEXT'].apply(lambda k: parse_document(k,config))\ni=0\ndf_requirements['EXP_JOB_CLASS_TITLE']=''\ndf_requirements['SCHOOL_TYPE']=''\nfor item in (result.values):\n    for requirement,dic in list(item.items()):        \n        if 'JobTitle' in dic.keys():\n            df_requirements.loc[i,'EXP_JOB_CLASS_TITLE'] = dic['JobTitle']\n        if 'SchoolType' in dic.keys():\n            df_requirements.loc[i,'SCHOOL_TYPE'] = dic['SchoolType']\n    i=i+1","72f28072":"#Let's check the result for one sample file\ndf_requirements[df_requirements['FILE_NAME']=='SYSTEMS ANALYST 1596 102717.txt'][['FILE_NAME','EXP_JOB_CLASS_TITLE','SCHOOL_TYPE']]","bf2e7814":"result = pd.merge(df, df_requirements, how='inner', left_on='FILE_NAME', right_on='FILE_NAME', sort=True)\n\nresult = pd.merge(result, df_salary_dwp, how='left', left_on='FILE_NAME', right_on='FILE_NAME', sort=True)\n\nresult = pd.merge(result, df_salary_gen, how='left', left_on='FILE_NAME', right_on='FILE_NAME', sort=True)\n\nresult = pd.merge(result, df_duties, how='left', left_on='FILE_NAME', right_on='FILE_NAME', sort=True)","c9dc0e65":"result.drop(columns=['REQUIREMENT_TEXT'], inplace=True)\nresult[result['FILE_NAME']=='SYSTEMS ANALYST 1596 102717.txt']","d3ae796a":"Assumption after looking at the data in text files: Headings are written in upper case letters.\n<br>I've used this assumption to parse the text","90bb192a":"  <br>Stay Tuned for more columns !!!\n \n <br>Please let me know if you find any bug in the loops\n \n <br>Thank you for visiting the kernel.","ec4cde6f":"Idea here is to first create part of speech tags, and then find Noun\/Pronoun tags following the words majoring\/major\/apprenticeship","1e745ca2":"**Objective**\n<br>Parse job bulletin text files and create output dataframe with the structure mentioned in \"Sample job class export template.csv\"\n\n<br>**Columns Added** \n>        'FILE_NAME', 'JOB_CLASS_TITLE', 'JOB_CLASS_NO', 'REQUIREMENT_SET_ID', \n       'REQUIREMENT_SUBSET_ID', 'ENTRY_SALARY_GEN', 'ENTRY_SALARY_DWP', 'OPEN_DATE','JOB_DUTIES',\n       'EDUCATION_MAJOR','SCHOOL_TYPE','EXP_JOB_CLASS_TITLE'"}}