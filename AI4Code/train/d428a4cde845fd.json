{"cell_type":{"a3daf1f5":"code","3e29b12e":"code","8b20f5ad":"code","1ea737e8":"code","8be34098":"code","ea9ea1b7":"code","6b6bced3":"code","61999826":"code","81cf2051":"code","4c7cd3bf":"code","e77572c7":"code","275efc3a":"code","0fa0db87":"code","c38632f7":"code","72e733fb":"code","98cdd85f":"code","2d101a87":"code","d099c97b":"code","9417d3d9":"code","4b8a8fa9":"code","1543aef2":"code","8eca6190":"code","77d945b0":"code","9614d4e6":"code","7b8668ea":"code","c51e083a":"code","def36e59":"code","f21d933a":"code","dd418ba1":"code","d7e05cfd":"code","29424c9a":"code","72d1e696":"code","e446361c":"code","9f153968":"code","a1bb1ae2":"code","7225baab":"code","eb2de86f":"code","93bed7a3":"code","20c853c5":"markdown","df5f71a6":"markdown","b7a4b3e8":"markdown","9e2362ea":"markdown","4a2c2c9c":"markdown","70b88559":"markdown","be853c23":"markdown","581be571":"markdown","c23c7b51":"markdown","846a93aa":"markdown","676084ee":"markdown","978e62b7":"markdown","0d44b336":"markdown","2fe70d39":"markdown","05064e5a":"markdown","9c31f5dc":"markdown","b2be46e8":"markdown","df7512e1":"markdown"},"source":{"a3daf1f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3e29b12e":"input_path = '..\/input\/titanic\/'\ndf_virgin = pd.read_csv(input_path + 'train.csv')\ndf_train = pd.read_csv(input_path + 'train.csv')\ndf_test = pd.read_csv(input_path + 'test.csv')\nsub = pd.read_csv(input_path + 'gender_submission.csv')","8b20f5ad":"df_train.sample(10)","1ea737e8":"df_train[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean()","8be34098":"df_train.isna().sum()","ea9ea1b7":"df_train.info()","6b6bced3":"df_train.describe()","61999826":"mean_age = df_train['Age'].mean()\n\ndf_train['AgeIsNull'] = np.where(df_train['Age'].isnull() , 1, 0)\ndf_test['AgeIsNull'] = np.where(df_test['Age'].isnull() , 1, 0)\n\ndf_train['Age'].fillna(mean_age, inplace = True)\ndf_test['Age'].fillna(mean_age, inplace = True)\n\ndf_train['Age'] = df_train['Age'].astype(int)\ndf_test['Age'] = df_test['Age'].astype(int)","81cf2051":"# sns.countplot(x='Embarked', data=df_train)\ndf_train['Embarked'].value_counts()","4c7cd3bf":"df_train['Embarked'].fillna('S', inplace = True)\ndf_test['Embarked'].fillna('S', inplace = True)","e77572c7":"df_train['InCabin'] = np.where(df_train['Cabin'].isnull() , 1, 0)\ndf_test['InCabin'] = np.where(df_test['Cabin'].isnull() , 1, 0)","275efc3a":"df_train['Embarked'] = df_train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndf_test['Embarked'] = df_test['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ndf_train['Sex'] = df_train['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\ndf_test['Sex'] = df_test['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n\ndf_train['Sex'] = df_train['Sex'].astype('category').cat.codes\ndf_train['Embarked'] = df_train['Embarked'].astype('category').cat.codes","0fa0db87":"COLUMNS = ['Sex', 'Pclass', 'Parch', 'SibSp', 'Embarked', 'InCabin']","c38632f7":"f, axs = plt.subplots(nrows=2, ncols=6, figsize=(20, 5), sharey=\"row\", sharex=\"col\")\n\nfor i, c in enumerate(COLUMNS):\n    sns.catplot(x=c, y=\"Survived\", data=df_train, kind='bar', ax=axs[0, i])\n    sns.countplot(x=c, data=df_train, ax=axs[1, i])\n    plt.close()\n\nplt.tight_layout()\nplt.show()","72e733fb":"sns.swarmplot(x=\"Survived\", y=\"Fare\", data=df_train.loc[df_train['Fare'] < 200], size=2)\nsns.boxplot(x=\"Survived\", y=\"Fare\", data=df_train.loc[df_train['Fare'] < 200])","98cdd85f":"sns.distplot(df_train['Age'])","2d101a87":"f, axs = plt.subplots(nrows=1, ncols=6, figsize=(25, 7))\n\nfor i, c in enumerate(COLUMNS):\n    sns.catplot(x=c, y='Age', kind='box', hue='Survived', data=df_train, ax=axs[i])\n    plt.close()","d099c97b":"sns.boxplot(x='Embarked', y='Fare', data=df_virgin.loc[df_virgin['Fare'] < 300])","9417d3d9":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1","4b8a8fa9":"df_train['AgeBand'] = pd.cut(df_train['Age'], 5)\ndf_test['AgeBand'] = pd.cut(df_test['Age'], 5)\n\ndf_train['AgeBand'] = df_train['AgeBand'].astype('category').cat.codes\ndf_test['AgeBand'] = df_test['AgeBand'].astype('category').cat.codes","1543aef2":"NEW_COLUMNS = ['FamilySize', 'AgeBand']\nf, axs = plt.subplots(nrows=3, ncols=2, figsize=(15, 15))\n\n\nfor i, c in enumerate(NEW_COLUMNS):\n    sns.catplot(x=c, y=\"Survived\", data=df_train, kind='bar', ax=axs[0, i])\n    sns.countplot(x=c, data=df_train, ax=axs[1, i])\n    sns.boxplot(x=\"Survived\", y=c, data=df_train, ax=axs[2, i])\n    plt.close()","8eca6190":"df_train['Fare'] = pd.cut(df_train['Fare'], 4)\ndf_test['Fare'] = pd.cut(df_test['Fare'], 4)","77d945b0":"df_train.groupby(['Fare']).count()","9614d4e6":"df_train['Fare'] = df_train['Fare'].astype('category').cat.codes\ndf_test['Fare'] = df_test['Fare'].astype('category').cat.codes","7b8668ea":"f, axs = plt.subplots(ncols=2, figsize=(15, 5))\n\nsns.catplot(x='Fare', y=\"Survived\", data=df_train, kind='bar', ax=axs[0])\nsns.countplot(x='Fare', data=df_train, ax=axs[1])\nplt.close()","c51e083a":"import re\n\ndef get_title(name):\n    # Regex to get title\n    # explication du regex : resort la premi\u00e8re expression dont le forme est \n    # [espace + une ou plusieur letre (majuscule ou minuscule) + un point] \n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\ndef categoriseTitle(df):\n    df['Title'] = df['Name'].apply(get_title)\n    \n    # On regarde les diff\u00e9rents type de titre\n    # On constate que plusieurs valeurs peuvent \u00eatre regrouper\n    \n    # df['Title'].value_counts()\n    \n    # on regroupe les titres qui sont semblable\n    df['Title'] = df['Title'].replace('Mlle', 'Miss')\n    df['Title'] = df['Title'].replace('Ms', 'Miss')\n    df['Title'] = df['Title'].replace('Mme', 'Mrs')\n    \n    # on groupe tous les autres titres pour en faire un groupe cons\u00e9quent\n    df.loc[(df['Title'] !='Mr') & (df['Title'] != 'Miss') & (df['Title'] != 'Master') & (df['Title'] !='Mrs'), 'Title'] = 'Other'\n    # les donn\u00e9es inconnues sont remplac\u00e9s par Mr \u00e9tant la valeur la plus pr\u00e9sente\n    df['Title'] = df['Title'].fillna('Mr')\n    df['Title'] = df['Title'].astype('category').cat.codes\n    \ncategoriseTitle(df_train)\ncategoriseTitle(df_test)\n","def36e59":"f, axs = plt.subplots(ncols=2, figsize=(15, 5))\n\nsns.catplot(x='Title', y=\"Survived\", data=df_train, kind='bar', ax=axs[0])\nsns.countplot(x='Title', data=df_train, ax=axs[1])\nplt.close()","f21d933a":"# df_train = df_train.drop(columns=\"Name\")\n# df_train = df_train.drop(columns=\"Ticket\")\n# df_train = df_train.drop(columns=\"Fare\")\n# df_train = df_train.drop(columns=\"Cabin\")","dd418ba1":"df_train.sample(5)","d7e05cfd":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nrf = RandomForestClassifier(n_estimators=100)","29424c9a":"NUM_FEATURES = ['SibSp', 'Parch', 'FamilySize', 'AgeIsNull']\nCAT_FEATURES = ['Pclass', 'Embarked', 'Sex', 'Fare', 'Title','AgeBand']\n\nX = df_train.loc[:, NUM_FEATURES]\nX_cat = df_train.loc[:, CAT_FEATURES]\nX_train = pd.concat([X, X_cat], axis=1)\ny_train = df_train['Survived']\n\nX_train.sample(10)","72d1e696":"from sklearn.model_selection import train_test_split\ndef train_model(model, X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n    model.fit(X_train, y_train)\n    train_acc = accuracy_score(y_train, model.predict(X_train))\n    test_acc = accuracy_score(y_test, model.predict(X_test))\n    return {\n        'train accuracy': train_acc,\n        'test accuracy': test_acc\n    }\n\nprint(train_model(rf, X_train, y_train))","e446361c":"X_test = df_test.loc[:, NUM_FEATURES + CAT_FEATURES]","9f153968":"rf.fit(X_train, y_train)","a1bb1ae2":"train_acc = accuracy_score(y_train, rf.predict(X_train))\ntrain_acc","7225baab":"rf.predict(X_test)","eb2de86f":"submission = pd.DataFrame({\n    'PassengerId': df_test['PassengerId'],\n    'Survived': rf.predict(X_test)\n})","93bed7a3":"submission.to_csv('submission.csv', index=False)","20c853c5":"On groupe les personnes par \u00e2ge afin de les cat\u00e9goriser par la suite","df5f71a6":"# Enrichissement \/ Nettoyage des donn\u00e9es post visualisation","b7a4b3e8":"On cherche ici si l'embarquement est corr\u00e9l\u00e9 avec le Fare","9e2362ea":"### Recherche de donn\u00e9es manquantes","4a2c2c9c":"# Transfomation des donn\u00e9es\n* On cherchera les donn\u00e9es manquantes sur cette partie\n* On les compl\u00e8tera avec les donn\u00e9es les plus pertinantes (ceux qui peuvent se rapprocher le plus)\n* On pourra enrichir les donn\u00e9es par la suite ","70b88559":"On groupe les Fare en 4 bins afin de les cat\u00e9goris\u00e9","be853c23":"Le groupement par cut ne semble pas pertinent, l'ensemble des personnes est regroup\u00e9 dans le groupe 0","581be571":"Netoyage des colonnes qui nous semble non pertinantes pour notre machine","c23c7b51":"### Ensemble des 'Fare'\nLe groupe 1 est largement repr\u00e9sent\u00e9, par contre leur chance de survie sont largement inf\u00e9rieux aux autres groupes, il y a forcement une corr\u00e9lation entre la survie et le prix du billet","846a93aa":"## On map les variables cat\u00e9gorielles afin les associations de ces variables ","676084ee":"# Analyze by visualizing data\n## Graphiques et analyse sur les colonnes suivantes","978e62b7":"# Entrainement du mod\u00e8le de donn\u00e9es","0d44b336":"Grace \u00e0 ces graphiques, nous pouvons faire ressortir quelques \u00e9l\u00e9ments importants:\n* les femmes \u00e9taient en minorit\u00e9 mais plus surv\u00e9cu que les hommes\n* les personnes seules, nettement majoritaire, sont celles qui ont le moins surv\u00e9cu\n* les personnes appartement \u00e0 la classe 3, majoritaire en nombre mais, minoritaire en tant que survivant \n* les personnes qui ont embarqu\u00e9 sur le port C sont ceux qui ont le moins \u00e9chap\u00e9 \u00e0 la catastrophe, alors qu'ils sont nettement majoritaire \n* Il y a surement une corr\u00e9lation avec la class et le lieux de l'embarquement\n* les personnes ayant une cabine ont \u00e9t\u00e9 plus largement \u00e9t\u00e9 sauv\u00e9","2fe70d39":"Apr\u00e8s avoir extrait les titres, nous pouvons conclure que les hommes ont tr\u00e8s largement p\u00e9rie contrairement au femmes et deplus les personnes de vivant dans une classe sup\u00e9rieur ont en grande majorit\u00e9 \u00e9t\u00e9 sauv\u00e9 ","05064e5a":"On constate beaucoup de outliners","9c31f5dc":"On complete les donn\u00e9es manquantes, ici en remplace l'\u00e2ge manquante par la moyenne. (On garde tout de m\u00eame l'information dans AgeIsNull)","b2be46e8":"### R\u00e9partition des ensembles associ\u00e9 \u00e0 leur \u00e2ge\n\nCette suite de graphe nous permet de visualiser les diff\u00e9rentes tranche d'\u00e2ge sur chaque cat\u00e9gorie","df7512e1":"Une grande majorit\u00e9 des personnes ont embarqu\u00e9 dans le port S, on admettera pour l'instant, que les personnes dont nous ne connaissont pas le lieux de l'embarquement ont \u00e9t\u00e9 embarqu\u00e9 au port S"}}