{"cell_type":{"d92e3acb":"code","5c9aabd2":"code","c75f5d71":"code","5962c951":"code","0841afb1":"code","d654e93b":"code","400079e1":"code","f6959e4d":"code","20265981":"code","95d3c966":"code","64dad31b":"code","70af3474":"code","c36e5859":"markdown","90b2dcbf":"markdown","cee766bf":"markdown","fc90083e":"markdown","52915ea9":"markdown","84d6a285":"markdown","dc1c57bf":"markdown","3865999d":"markdown","920b5414":"markdown","8d0d9ef8":"markdown","5cb81c3c":"markdown","6b5ac91f":"markdown","e3546bb6":"markdown","966fca88":"markdown","4afd62e3":"markdown","ea033f0e":"markdown","0f73c653":"markdown","3d76964d":"markdown","0751ba57":"markdown"},"source":{"d92e3acb":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression    #Linear Regression for the first step of the Hybrid Model\nfrom xgboost import XGBRegressor  #XGB Regressor will be used for the final(second) step of the Hybrid Model","5c9aabd2":"data_1 = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv') #train data\ndata_2 = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv') #test data\nsub = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv') #sample submission\n\nfor data in [data_1, data_2]:\n    data['date'] = pd.to_datetime(data.date)  #dtype converted for date\n\nfor data in [data_1, data_2]:\n    data['Year'] = data['date'].dt.year   #Year Feature\n    \nfor data in [data_1, data_2]:\n    display(data.head())  #displays the first five rows of each of the train and test data","c75f5d71":"GDP = pd.read_csv('..\/input\/gdp-data-3-countries\/8a04c824-8256-4330-aa88-1fd167a692ee_Data.csv', index_col = 'Country Name')\n\nGDP = GDP.iloc[1:4,-6:-1].T\n\nGDP = GDP.astype(int)\n\nGDP","5962c951":"sns.set_theme(style=\"darkgrid\")\nsns.catplot(x=\"Year\", y=\"num_sold\", kind=\"point\", data=data_1, col = 'country', color = 'green')","0841afb1":"for Country in ['Finland','Norway','Sweden']:\n    GDP[Country] = GDP[Country] \/ GDP[Country][0]\n    \nGDP['Year'] = np.arange(2015,2020)\nGDP = GDP.set_index('Year')\n\nGDP","d654e93b":"def GDP_value(row):\n    mean_num_sold_2015 = data_1.loc[data_1['Year'] == 2015].groupby('country')['num_sold'].mean()[row['country']]\n    GDP_relative = GDP.loc[row['Year'],row['country']]\n    row['GDP_value'] = mean_num_sold_2015 * GDP_relative\n    return row\n\ndata_1 = data_1.apply(GDP_value, axis='columns')\ndata_2 = data_2.apply(GDP_value, axis='columns')\n\ndisplay(data_1.head())\ndisplay(data_2.head())","400079e1":"#sns.set_theme(style=\"darkgrid\")\n\n#sns.relplot(x = 'date', y = 'num_sold', ci=None, kind = 'line', data = data_1, col = 'country', hue = 'Year')","f6959e4d":"X_1 = data_1[['GDP_value']]\nY_1 = data_1['num_sold']\n\nm_1 = LinearRegression()\n\nm_1.fit(X_1,Y_1)","20265981":"for data in [data_1, data_2]:\n    for country in data.country.unique():\n        data[country] = 1 * (data['country'] == country) #Country One-Hot Encoding\n\n# For One-Hot Encodings,\n# This may not be a usual\/efficient way of One-Hot Encoding, but this is how I usually have been doing it.\n# The idea is that each country column gives the 'boolean value', which is True or False values, but since that is not a number, when we multiply it by 1, True becomes 1 and False becomes 0.\n# So for the 'Finland' column, value of 1 would mean that it is a sale data of Finland, and value of 0 would mean that is a sale data from Norway or Sweden.        \n# If you have a suggestion for me, feel free to leave it in the comments!\n\n    for product in data['product'].unique():\n        data[product] = 1 * (data['product'] == product) #Proudct One-Hot Encoding\n    \n    for store in data.store.unique():\n        data[store] = 1 * (data['store'] == store) #Store One-Hot Encoding\n        \n        \n    data['Day'] = data['date'].dt.day #Day: 1,2,3,...26,27,28\/29\/31 (depending on each month)\n    \n    data['Month'] = data['date'].dt.month #Month: 1,2,3,...,11,12\n    \n    for i in range(1,13):\n        data['Month_'+str(i)] = 1 * (data['Month'] == i) #One-Hot Encoding of Month\n        \n    data['Day_of_Week'] = data['date'].dt.day_of_week #This is the 0-Monday, 1-Tuesday, ..., 6-Sunday\n    \n    data['Weekend'] =  1 * (data['Day_of_Week'] >= 5) #5 and 6 are weekend days. This gives the weekend feature.\n    \n    for i in range(0,7):\n        data['Day_'+str(i)] = 1 * (data['Day_of_Week'] == i) #One-Hot Encoding of Day_of_Week\n    \n    data['Day_of_Year'] = data['date'].dt.day_of_year #Day of Year: 1-365, 1-366(Leap Year)\n    \ndata_1 = data_1.drop(['Month','Day_of_Week'], axis = 1) #Month and Day of Week are One-Hot Encoded, so these ones are dropped.\ndata_2 = data_2.drop(['Month','Day_of_Week'], axis = 1)\n\ndisplay(data_1.head())\ndisplay(data_2.tail())","95d3c966":"data_1['Residual'] = data_1['num_sold'] - m_1.predict(X_1)\n\nX_2 = data_1.drop(['row_id','date','country','store','product','num_sold','Year','Residual','GDP_value'], axis = 1)\nY_2 = data_1['Residual']\n\nm_2 = XGBRegressor()\n\nm_2.fit(X_2, Y_2)","64dad31b":"X_3 = data_2[['GDP_value']]\n\nX_4 = data_2.drop(['row_id','date','country','store','product','Year','GDP_value'], axis = 1)\n\nsubmission = m_1.predict(X_3) + m_2.predict(X_4)","70af3474":"sub['num_sold'] = submission\n\ndisplay(sub.head())\n\nsub.to_csv('sub.csv',index = False)","c36e5859":"## 4. Basic Feature Engineering","90b2dcbf":"## 1. Setup","cee766bf":"Take a look at the **average of num_sold** over the years (2015-2018) for **each country**.","fc90083e":"## 3. Linear Regression","52915ea9":"Let me know if you have corrections\/suggestions to give!","84d6a285":"For the Date Features, you can type '.dt' in the [pandas](https:\/\/pandas.pydata.org\/docs\/search.html?q=.dt) documentation search to learn about them.\n\nThe ideas for making these features here would be that these **features**, like store, country, weekend\/weekday, month, etc.\n\nare information in **numbers** for the XGB Regressor to work with.","dc1c57bf":"#### Importing Libraries","3865999d":"Notice how the GDP is increasing year by year for Finland and Sweden during for 2015-2018,\nbut **Norway has a drop** at **2016**.","920b5414":"## 5. XGB Regressor","8d0d9ef8":"For each country, the **'base num_sold' (num_sold averager for 2015)** will be multiplied, \n\nand the feature is engineered below.","5cb81c3c":"#### Reading the GDP data\n","6b5ac91f":"Hi, This notebook describes a simple **Hybrid Model**, containing two steps:\n\n1) **Linear Regression** that uses the **GDP** feature as the input and **'num_sold'** as the target.\n\n2) **XGB Regressor** that uses country, store, product and date features as the inputs and the **'Residual'** from the first model as the target.\n\n(There is not much feature engineering beyond the basics, and no parameter tuning)\n\n[Here](https:\/\/www.kaggle.com\/ryanholbrook\/hybrid-models) is a good resource on 'Hybrid Models'.","e3546bb6":"We can see that here the increasing \/ decreasing pattern of the Sales data is revealed in the GDP\n(**drop of Norway at 2016**).\n\nWe might go ahead and make the following regression line:\n\n$$ Sales = a*GDP + b $$\n\nHowever, if you look at the GDP values, in descending order, it's Sweden, Norway, and Finland.\n\nIn the Sales data, it's Norway, Sweden, and Finland. So we could think, perhaps the **growth rate** is applied, and we could factor in the relative Sales of the countries.","966fca88":"## 6. Submission File","4afd62e3":"#### Comparison of GDP and Yearly Average for each country","ea033f0e":"Now this is the GDP on relative scale, for each country, based on it's **2015 GDP (as 1)**.","0f73c653":"#### **Table of Contents**\n\n#### 1. Setup\n* Importing Libraries\n* Reading the Data\n\n#### 2. GDP\n* Reading the GDP data\n* Comparison of GDP and Yearly Average for each country\n* Creating GDP Feature.\n\n#### 3. Linear Regression\n\n#### 4. Basic Feature Engineering\n\n#### 5. XGB Regressor\n\n#### 6. Submission File\n\n\nGDP data from: https:\/\/databank.worldbank.org\/reports.aspx?source=2&series=NY.GDP.MKTP.CD&country=WLD#","3d76964d":"## 2. GDP","0751ba57":"#### Reading the Data"}}