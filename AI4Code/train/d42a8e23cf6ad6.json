{"cell_type":{"e73e69f2":"code","154c952b":"code","3656e9f2":"code","b6e74b69":"code","c90036d3":"code","0bc35630":"code","e7f18e5a":"code","759ca169":"code","b6323ef0":"code","299ddff0":"code","3c3e4363":"code","f9cfd084":"code","c7c3892b":"code","dd6020a9":"code","7837a4eb":"code","bf0d7d47":"code","e182be95":"code","baa79a10":"code","0a6959be":"code","3fe0f26d":"code","916eb16d":"code","1de33d92":"code","ca3cd448":"code","4e37aaac":"code","4a3f4f29":"code","123364c9":"code","24eccb22":"code","6c480a58":"code","ab1349b4":"code","06c32090":"code","023b4d19":"code","22562b86":"code","299cbe39":"code","9540a7c9":"code","48ef1c65":"code","abf1faf9":"code","ac719cf4":"code","ce0cdb89":"code","af81feae":"code","0ad24bd3":"markdown"},"source":{"e73e69f2":"## This is the FastAi Baseline for the Flower Recognition Competition on HackerEarth.You can tweak this Notebook or can used the Ideas for your own work.","154c952b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\/he_challenge_data\/data\"))","3656e9f2":"!pip install pretrainedmodels","b6e74b69":"from torchvision.models import *\n# import pretrainedmodels\n\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.vision.models import *\nfrom fastai.vision.learner import model_meta\nimport fastai\n\nfrom utils import *\nimport sys\nimport torch\nfastai.__version__","c90036d3":"torch.__version__","0bc35630":"lis = os.listdir('..\/input\/he_challenge_data\/data\/train')","e7f18e5a":"sub = pd.read_csv('..\/input\/he_challenge_data\/data\/sample_submission.csv')","759ca169":"sub.shape","b6323ef0":"bs=8","299ddff0":"path = \"..\/input\/he_challenge_data\/data\/train\"","3c3e4363":"## test filenames to be used to create final submission.\nfilenames = os.listdir('..\/input\/he_challenge_data\/data\/test')","f9cfd084":"df = pd.read_csv('..\/input\/he_challenge_data\/data\/train.csv')","c7c3892b":"df.head()","dd6020a9":"# CenterCrop(32)\n## These Transformation applied based upon my previous competition Experience.\n## if you want to try other transformation check this link\n## https:\/\/docs.fast.ai\/vision.transform.html\ntfms = get_transforms(flip_vert=False,max_zoom=1.0,max_warp=0,do_flip=False,xtra_tfms=[cutout()])\ntfms1 = get_transforms(flip_vert=False,max_zoom=1.0,max_warp=0,do_flip=False,xtra_tfms=[cutout()])\ndata = (ImageList.from_csv(path, csv_name = '..\/train.csv', suffix='.jpg')\n        .split_by_rand_pct()              \n        .label_from_df()            \n        .add_test_folder(test_folder = '..\/test')              \n        .transform(tfms, size=400)\n        .databunch(num_workers=0,bs=8))\n\ndata1 = (ImageList.from_csv(path, csv_name = '..\/train.csv', suffix='.jpg')\n        .split_by_rand_pct()              \n        .label_from_df()            \n        .add_test_folder(test_folder = '..\/test')              \n        .transform(tfms1, size=400)\n        .databunch(num_workers=0,bs=8))","7837a4eb":"## to see the images in train with there labels\ndata.show_batch(rows=3, figsize=(8,10))","bf0d7d47":"## print the target classes\nprint(data.classes)","e182be95":"## load the pretrained imagenet model\n## you can try other models from this link\n## https:\/\/docs.fast.ai\/vision.models.html\nlearn = cnn_learner(data, models.resnet152, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")","baa79a10":"## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn.fit_one_cycle(1)","0a6959be":"learn.unfreeze()\nlearn.lr_find()","3fe0f26d":"# learn.recorder.plot(suggestion=True)\n# best_clf_lr = learn.recorder.min_grad_lr\n# best_clf_lr","916eb16d":"# learn.fit_one_cycle(2, max_lr=best_clf_lr)\nlearn.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","1de33d92":"## 2nd model","ca3cd448":"learn1 = cnn_learner(data1, models.densenet201, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")","4e37aaac":"## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn1.fit_one_cycle(1)","4a3f4f29":"learn1.unfreeze()\nlearn1.lr_find()\nlearn1.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","123364c9":"learn2 = cnn_learner(data1, models.alexnet, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")\n## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn2.fit_one_cycle(1)\nlearn2.unfreeze()\nlearn2.lr_find()\nlearn2.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","24eccb22":"learn3 = cnn_learner(data, models.densenet121, metrics=[error_rate, accuracy], model_dir=\"\/tmp\/model\/\")\n## training with one cycle which used cyclic learning rate and learning rate annhelling\nlearn3.fit_one_cycle(1)\nlearn3.unfreeze()\nlearn3.lr_find()\nlearn3.fit_one_cycle(2, max_lr=slice(1e-6,1e-3))","6c480a58":"## Applied Test Time Augmentation","ab1349b4":"preds,_ = learn.TTA(ds_type=DatasetType.Test)","06c32090":"preds1,_ = learn1.TTA(ds_type=DatasetType.Test)","023b4d19":"preds2,_ = learn2.TTA(ds_type=DatasetType.Test)\npreds3,_ = learn3.TTA(ds_type=DatasetType.Test)","22562b86":"## create the submission file ","299cbe39":"labelled_preds = []\npred11 = preds + preds1 + preds2 + preds3\nfor pred in pred11:\n    labelled_preds.append(int(np.argmax(pred))+1)\n\nsubmission = pd.DataFrame(\n    {'image_id': filenames,\n     'category': labelled_preds,\n    })\nsubmission.to_csv('submission.csv',index=False)","9540a7c9":"submission.head()","48ef1c65":"submission['image_id'] = submission['image_id'].apply(lambda x:x.split('.')[0])","abf1faf9":"submission = submission.sort_values(by = ['image_id'], ascending = [True])","ac719cf4":"## To download the submission file without Commiting the kernel.","ce0cdb89":"from IPython.display import HTML\nimport pandas as pd\nimport numpy as np\nimport base64\n\n# download it (will only work for files < 2MB or so)\ndef create_download_link(df, title = \"Download CSV file\", filename = \"subm.csv\"):  \n    csv = df.to_csv(index=False)\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)\n\ncreate_download_link(submission)","af81feae":"## This is the Fastai Baseline for the Flower Recognition Competition.If you like the work then plz Upvote the Kernel.\n## https:\/\/www.hackerearth.com\/challenges\/competitive\/garden-nerd","0ad24bd3":"### Need pretrainedmodels to load the pretrained Cedene models into fastai.\n### https:\/\/github.com\/Cadene\/pretrained-models.pytorch"}}