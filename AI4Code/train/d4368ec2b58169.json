{"cell_type":{"0d646c59":"code","26fd64e6":"code","93c52bd4":"code","535c5091":"code","40358c70":"code","c2174fd4":"code","05d206b6":"code","2b3fe28b":"code","b79e75cf":"code","f64c4de5":"code","28298ba4":"code","612dafbe":"code","2c17b720":"code","17aee997":"code","eff881c7":"code","41d80379":"code","b750ce4b":"code","ef456149":"code","19c964dc":"code","6ddd8e25":"code","67d6c612":"code","c192699b":"code","abbe2f51":"code","7b03e3c7":"code","2c8d3bfe":"code","95250bff":"code","2c059a7f":"code","a049288d":"code","39733fad":"code","ce8ef742":"code","cc17d443":"code","4290b18c":"markdown","902bd906":"markdown","d5c2d743":"markdown","3cfb4a3a":"markdown","3e2742c8":"markdown","075821b0":"markdown","415bd6b8":"markdown","9c52358d":"markdown","85936377":"markdown","208fe187":"markdown","06f3f86d":"markdown","500a4ed6":"markdown","06cb97cc":"markdown"},"source":{"0d646c59":"import pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nimport plotly.express as px","26fd64e6":"df = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")\n\ndf.head()","93c52bd4":"headers = [\"ID\", \"Gender\", \"Age\", \"Hypertension\", \"Heart Disease\", \"Ever Married\", \"Work Type\", \"Residence Type\", \"Avg. Glucose Level\", \"BMI\", \"Smoking Status\", \"Stroke\"]\n\ndf.columns = headers\n\ndf.head()","535c5091":"df.dtypes","40358c70":"df.isnull().sum()","c2174fd4":"df.count()","05d206b6":"df.dropna(axis=0, inplace=True)\n\ndf.reset_index(drop=True, inplace=True)\n\ndf.isnull().sum()","2b3fe28b":"df[\"Hypertension\"].replace([0,1], [\"No\",\"Yes\"], inplace=True)\ndf[\"Heart Disease\"].replace([0,1], [\"No\",\"Yes\"], inplace=True)\n\ndf.head()","b79e75cf":"df.describe(include='all')","f64c4de5":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=4, cols=3)\n\nfig.add_trace(\n    go.Box(y=df[\"Avg. Glucose Level\"], name=\"Avg. Glucose Level\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Box(y=df[\"Age\"], name=\"Age\"),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Box(y=df[\"BMI\"], name=\"BMI\"),\n    row=1, col=3\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Gender\"], name=\"Gender\"),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Ever Married\"], name=\"Ever Married\"),\n    row=2, col=2\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Work Type\"], name=\"Work Type\"),\n    row=2, col=3\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Residence Type\"], name=\"Residence Type\"),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Smoking Status\"], name=\"Smoking Status\"),\n    row=3, col=2\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Hypertension\"], name=\"Hypertension\"),\n    row=3, col=3\n)\n\nfig.add_trace(\n    go.Histogram(x=df[\"Heart Disease\"], name=\"Heart Disease\"),\n    row=4, col=2\n)\n\n\nfig.update_layout(height=1500, width=1000, title_text=\"Variables in the Dataset\", title_font_size=22,\n                  title_y=0.97, title_x=0.45, legend_title=\"Variable\")\n\nfig.show()\n","28298ba4":"df.head()","612dafbe":"Results=[]\n\nfor i in df[\"BMI\"]:\n    \n    if (i<18.5):\n        Results.append(\"Underweight\")\n            \n    elif (i>=18.5) & (i<24.9):\n         Results.append(\"Normal Weight\")\n   \n            \n    elif (i>=25) & (i<29.9):\n        Results.append(\"Overweight\")\n            \n    elif (i>30):\n        Results.append(\"Obese\")\n    \nResults2 = pd.DataFrame(Results, columns=[\"BMI Category\"])\n\ndf[\"BMI Category\"] = Results2\n\ndf.head(10)","2c17b720":"male = df[df[\"Gender\"]==\"Male\"].head(2000)\n\nfemale = df[df[\"Gender\"]==\"Female\"].head(2000)\n\ndf = pd.concat([male,female], axis=0, join='outer', ignore_index=True)\n\ndf","17aee997":"df_age = df.groupby(\"Age\", as_index=False)[\"Stroke\"].sum()\ndf_gender = df.groupby(\"Gender\", as_index=False)[\"Stroke\"].sum()\ndf_age_gender = df.groupby([\"Gender\",\"Age\"], as_index=False)[\"Stroke\"].sum()\n\nfig = px.histogram(df_age, x=\"Age\", y=\"Stroke\", barmode=\"group\", nbins=9, opacity=0.75, range_x=[0,85], \n                   color_discrete_sequence=px.colors.qualitative.G10)\n\nfig2 = px.bar(df_gender, x=\"Gender\", y=\"Stroke\", color=\"Gender\", barmode='group', opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Dark2)\n\nfig3 = px.histogram(df_age_gender, x=\"Age\", y=\"Stroke\", color=\"Gender\", barmode=\"group\", nbins=9, opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Vivid)\n\nfig.update_layout(height=550, width=750, title_text=\"Occurence of Strokes per Age Bracket\", title_font_size=22,\n                  title_y=0.97, title_x=0.50, yaxis_title =\"Stroke Occurence\")\n\nfig2.update_layout(height=550, width=750, title_text=\"Occurence of Strokes per Gender\", title_font_size=22,\n                  title_y=0.97, title_x=0.50, yaxis_title =\"Stroke Occurence\")\n\nfig3.update_layout(height=550, width=750, title_text=\"Occurence of Strokes per Age Bracket & Gender\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig2.show()\nfig.show()\nfig3.show()","eff881c7":"df_BMI = df.groupby([\"BMI Category\"], as_index=False)[\"Stroke\"].sum()\ndf_BMI_gender = df.groupby([\"BMI Category\",\"Gender\"], as_index=False)[\"Stroke\"].sum()\n\nfig = px.bar(df_BMI, x=\"BMI Category\", y=\"Stroke\", color=\"BMI Category\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Bold)\n\nfig2 = px.bar(df_BMI_gender, x=\"BMI Category\", y=\"Stroke\", color=\"Gender\", barmode='group', opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Dark2)\n\nfig.update_layout(height=700, width=750, title_text=\"Occurence of Strokes per BMI Category\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig2.update_layout(height=700, width=750, title_text=\"Occurence of Strokes per Gender & BMI Category\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig.show()\nfig2.show()","41d80379":"df_smoking_status = df.groupby([\"Smoking Status\"], as_index=False)[\"Stroke\"].sum()\ndf_work_type = df.groupby([\"Work Type\"], as_index=False)[\"Stroke\"].sum()\ndf_residence_type = df.groupby([\"Residence Type\"], as_index=False)[\"Stroke\"].sum()\n\nfig = px.bar(df_smoking_status, x=\"Smoking Status\", y=\"Stroke\", color=\"Smoking Status\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Prism)\n\nfig2 = px.bar(df_work_type, x=\"Work Type\", y=\"Stroke\", color=\"Work Type\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Prism)\n\nfig3 = px.bar(df_residence_type, x=\"Residence Type\", y=\"Stroke\", color=\"Residence Type\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Prism)\n\nfig.update_layout(height=500, width=650, title_text=\"Occurence of Strokes per Smoking Status\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig2.update_layout(height=500, width=650, title_text=\"Occurence of Strokes per Work Type\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig3.update_layout(height=500, width=650, title_text=\"Occurence of Strokes per Residence Type\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig.show()\nfig2.show()\nfig3.show()","b750ce4b":"df_heartdisease = df.groupby([\"Heart Disease\"], as_index=False)[\"Stroke\"].sum()\ndf_hypertension = df.groupby([\"Hypertension\"], as_index=False)[\"Stroke\"].sum()\ndf_married = df.groupby([\"Ever Married\"], as_index=False)[\"Stroke\"].sum()\n\n\nfig = px.bar(df_heartdisease, x=\"Heart Disease\", y=\"Stroke\", color=\"Heart Disease\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Set1)\n\nfig2 = px.bar(df_hypertension, x=\"Hypertension\", y=\"Stroke\", color=\"Hypertension\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Set1)\n\nfig3 = px.bar(df_married, x=\"Ever Married\", y=\"Stroke\", color=\"Ever Married\", opacity=1,\n                   color_discrete_sequence=px.colors.qualitative.Set1)\n\nfig.update_layout(height=500, width=550, title_text=\"Occurence of Strokes w\/wo Heart Disease\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig2.update_layout(height=500, width=550, title_text=\"Occurence of Strokes w\/wo Hypertension\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig3.update_layout(height=500, width=550, title_text=\"Occurence of Strokes (Married or Not)\", title_font_size=22,\n                  title_y=0.97, title_x=0.48, yaxis_title =\"Stroke Occurence\")\n\nfig.show()\nfig2.show()\nfig3.show()","ef456149":"len(df[df[\"Stroke\"]==1])","19c964dc":"len(df[df[\"Stroke\"]==0])","6ddd8e25":"df2 = df[[\"Gender\",\"Age\",\"Hypertension\",\"Heart Disease\",\"Ever Married\",\"Work Type\",\"Avg. Glucose Level\",\"BMI\", \"Stroke\"]]\n\ndf2.head()","67d6c612":"gender = pd.get_dummies(df2[\"Gender\"], drop_first=True)\nhypertension = pd.get_dummies(df2[\"Hypertension\"], drop_first=True, prefix=\"HT\")\nheartdisease = pd.get_dummies(df2[\"Heart Disease\"], drop_first=True, prefix=\"HD\")\nevermarried = pd.get_dummies(df2[\"Ever Married\"], drop_first=True, prefix=\"EM\")\nworktype = pd.get_dummies(df2[\"Work Type\"], drop_first=True)\n\ndf3 = pd.concat([df2,gender,hypertension,heartdisease,evermarried,worktype], axis=1, join='outer', ignore_index=False)\n\ndf3.drop([\"Gender\",\"Hypertension\",\"Heart Disease\",\"Ever Married\",\"Work Type\"], axis=1, inplace=True)\n\ndf4 = df3.reindex(labels=[\"Age\",\"Male\",\"HT_Yes\",\"HD_Yes\",\"EM_Yes\",\"Never_worked\",\"Private\",\"Self-employed\",\"children\",\"BMI\",\"Avg. Glucose Level\",\"Stroke\"], axis=1)\n\ndf4.head(10)","c192699b":"print(\"Rows containing 0 = \", len(df4[df4[\"Stroke\"]==0]))\n\nprint(\"Rows containing 1 = \", len(df4[df4[\"Stroke\"]==1]))","abbe2f51":"balance1 = df4[df4[\"Stroke\"]==1].sample(n=209, replace=False)\nbalance1.reset_index(drop=True, inplace=True)\n\nbalance0 = df4[df4[\"Stroke\"]==0].sample(n=209, replace=False)\nbalance0.reset_index(drop=True, inplace=True)\n\ndf5 = pd.concat([balance1, balance0], axis=0, join='outer')\n\nprint(\"Rows containing 0 = \", len(df5[df5[\"Stroke\"]==0]))\n\nprint(\"Rows containing 1 = \", len(df5[df5[\"Stroke\"]==1]))","7b03e3c7":"X = df5[[\"Age\",\"Male\",\"HT_Yes\",\"HD_Yes\",\"EM_Yes\",\"Never_worked\",\"Private\",\"Self-employed\",\"children\",\"BMI\",\"Avg. Glucose Level\"]]\n\ny = df5[\"Stroke\"]","2c8d3bfe":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","95250bff":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score, recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\n\nclf = LogisticRegression()\nclf = clf.fit(X_train,y_train)\n\ny_pred = clf.predict(X_test)\n\ndef generate_model_report(y_test, y_pred):\n    print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n    print(\"Precision = \", precision_score(y_test, y_pred))\n    print(\"Recall = \", recall_score(y_test, y_pred))\n    print(\"F1 = \", f1_score(y_test, y_pred))\n    pass\n\ngenerate_model_report(y_test, y_pred)","2c059a7f":"confusion_matrix(y_test, y_pred, labels=[0,1])","a049288d":"from sklearn.ensemble import RandomForestClassifier\n\nclf2 = RandomForestClassifier()\nclf2 = clf2.fit(X_train,y_train)\n\ny_pred = clf2.predict(X_test)\n\ndef generate_model_report(y_test, y_pred):\n    print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n    print(\"Precision = \", precision_score(y_test, y_pred))\n    print(\"Recall = \", recall_score(y_test, y_pred))\n    print(\"F1 = \", f1_score(y_test, y_pred))\n    pass\n\ngenerate_model_report(y_test, y_pred)","39733fad":"confusion_matrix(y_test, y_pred)","ce8ef742":"from sklearn.tree import DecisionTreeClassifier\n\nclf3 = DecisionTreeClassifier()\nclf3 = clf3.fit(X_train,y_train)\n\ny_pred = clf3.predict(X_test)\n\ndef generate_model_report(y_test, y_pred):\n    print(\"Accuracy = \", accuracy_score(y_test, y_pred))\n    print(\"Precision = \", precision_score(y_test, y_pred))\n    print(\"Recall = \", recall_score(y_test, y_pred))\n    print(\"F1 = \", f1_score(y_test, y_pred))\n    pass\n\ngenerate_model_report(y_test, y_pred)","cc17d443":"confusion_matrix(y_test, y_pred)","4290b18c":"Since there is a huge mismatch between the number of people who had a stroke and number of people who did not have a stroke, our supervised learning models will be extremely skewed to the \"No Stroke\" prediction values. Therefore, to stop this and to get an accurate prediction model, we would need to downsample our data so that we have equal number of values for \"Stroke\" and \"No Stroke\" ","902bd906":"According to the results above, the best model to predict strokes is the Random Forest model since it gave the highest F1 score amongst the 3 models of 0.72.","d5c2d743":"*Studying the variables and data that is in the dataset*","3cfb4a3a":"Since the whole dataset has 5,110 values and the variable \"BMI\" has only 201 missing values, it would be safe to remove the rows with these Null values without having any negative effect on the analysis to be conducted. ","3e2742c8":"Getting dummy variables for the categorical variables so that categorical supervised learning models can be created","075821b0":"*Importing the dataset onto the platform*","415bd6b8":"*Changing the column names*","9c52358d":"*Replacing 0 and 1 with \"No\" and \"Yes\" in Hypertension and Heart Disease columns*","85936377":"*Removing Null values from the dataset and resetting the index*","208fe187":"*Checking data types of the variables in the dataset to see if they are correct*","06f3f86d":"*Checking for Null Values*","500a4ed6":"Since there is a mismatch between the number of males and females in the dataset, it would make sense to use a dataset with equal number of males and females, which will result in accurate results when analysis is conducted using gender as a variable.","06cb97cc":"Categorising BMI into \"Underweight\", \"Normal Weight\", \"Overweight\" and \"Obese\""}}