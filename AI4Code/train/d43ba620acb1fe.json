{"cell_type":{"f2decc5c":"code","92f25e19":"code","dbf0a8bd":"code","2faafdd7":"code","ecc7606a":"code","bd8c4181":"code","05d5ad6e":"code","dc3f87cc":"code","e411f925":"code","08d45d12":"code","45f7800e":"code","fac61ba4":"code","c37e40e4":"code","d5eb3785":"code","3bb770f8":"code","e9750cc2":"code","e18b2175":"code","b0d8c935":"code","5a16bf82":"code","6563062c":"code","8daa5c3b":"code","5ef24e95":"code","a1718df3":"code","0af5d525":"code","84d8a9bd":"code","6cf811a3":"code","989417f8":"code","d67c31ff":"code","a3d6e777":"code","dcbac6c8":"code","8fd25909":"code","f89b5854":"code","ca68e1bc":"code","99ba8c21":"code","e18fb35d":"code","4c2f415e":"code","3b6b4a3a":"code","3cc06387":"code","62a0a8be":"code","52d7132d":"code","fc0552aa":"code","b7c118dc":"code","8dbfdaeb":"code","de9773dd":"markdown","a9d56b76":"markdown","6e1f2635":"markdown","abd9b8a9":"markdown","51818d67":"markdown","24993910":"markdown","93dee455":"markdown","de95151c":"markdown","3abddb8a":"markdown","2aa1dad3":"markdown","50c9579a":"markdown","48751200":"markdown","d80bcc6b":"markdown"},"source":{"f2decc5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","92f25e19":"import matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')","dbf0a8bd":"df=pd.read_csv('..\/input\/covid-vaccination-india-district-wise-data\/vaccine_doses_statewise.csv')","2faafdd7":"df.head()","ecc7606a":"df.isnull().sum().sum()","bd8c4181":"def rename():\n    df.rename(columns={df.columns[-1]: 'Total Vaccinated'}, inplace=True)\n\nrename()","05d5ad6e":"df.loc[df['State']=='Miscellaneous']","dc3f87cc":"df=df.drop(36,axis=0)","e411f925":"#We have removed the row so we have to reset the index...\n\ndf=df.reset_index(drop=True)","08d45d12":"df","45f7800e":"#So this is our population data which we have taken from internet i.e. population of each state and the last value is the total population of India..\n\npopulation=[420000,54400000,1592000,36000000,127000000,1169000,29800000,620000,19000000,1600000,64300000,28500000,7500000,13800000,39200000,68300000,36000000,290000,74151,87000000,124300000,3200000,3400000,1255000,2300000,46900000,1432000,30000000,82500000,700000,78500000,39800000,4200000,240000000,11400000,100000000,1386452151]","fac61ba4":"#Now we will add it in the dataframe as a column...\n\ndf['Total Population']=population","c37e40e4":"df","d5eb3785":"#Now I will add another column after finding %age vaccinated using last two columns i.e Total Vaccinated and Total Population...\n\ndf['%age Vaccinated']=(df['Total Vaccinated'] \/ df['Total Population']) * 100","3bb770f8":"df.head()","e9750cc2":"#Now I will select only two columns i.e State and %age Vaccinated so that I can use it in plotting the graph...\n\nVacci_Per=df[['State','%age Vaccinated']].drop(36)","e18b2175":"Vacci_Per","b0d8c935":"#Now I will make another variable so that I can use the value of %age vaccinated in India...\nTotal=df[['State','%age Vaccinated']]\nTotal=Total.loc[Total.State=='Total']\nTotal","5a16bf82":"#Plotting the Graph\n\nplt.figure(figsize=(15,8))\nplt.bar(Vacci_Per['State'],Vacci_Per['%age Vaccinated'],color=(Vacci_Per.State=='Punjab').map({True:'#8C000F',False:'#929591'}))\nplt.axhline(Total['%age Vaccinated'].values, color = '#008000', ls = '--', lw = 5,label ='Total %age vaccinated in India')\nplt.xlabel('States')\nplt.ylabel('Percentage')\nplt.title('%age of people vaccinated in each state')\nplt.xticks(rotation=90)\nplt.legend(edgecolor = 'black')\nplt.show()","6563062c":"df=pd.read_csv(\"..\/input\/covid-vaccination-india-district-wise-data\/vaccine_doses_statewise.csv\")","8daa5c3b":"df=df.set_index('State').T","5ef24e95":"df=df.reset_index()","a1718df3":"df.head()","0af5d525":"df=df.drop(['Miscellaneous','Total'],axis=1)","84d8a9bd":"df=df.rename(columns={'index':'Date'})","6cf811a3":"df.head()","989417f8":"date=df['Date']","d67c31ff":"df=df.iloc[:, 1:]-df.shift().fillna(0).iloc[:, 1:]","a3d6e777":"df.insert(0,'Date',date)","dcbac6c8":"df.head()","8fd25909":"#I will remove the State as shown above the index...\n\ndf = df.rename_axis(None, axis=1)","f89b5854":"#Plotting Punjab's Graph\n\ndf[['Date','Punjab']].set_index(['Date']).plot(figsize=(15,8))\nplt.show()","ca68e1bc":"roll=df['Punjab'].rolling(10, min_periods=10).mean()\ndate=df['Date']","99ba8c21":"date,roll[9:].plot(figsize=(15,8))\nplt.show()","e18fb35d":"df.head()","4c2f415e":"days=pd.to_datetime(df['Date'],dayfirst=True)\ndays","3b6b4a3a":"#Plotting rolling mean with some other features which can be shown in the graph...\n\ndf2 = pd.concat([days, roll], 1)[9:].set_index(['Date'])\ndf2.plot(figsize = (15, 8), linestyle = '--')\nplt.vlines(['2021-05-01 00:00:00', '2021-06-21 00:00:00'], ymin = 0.03, ymax = 120000)\nplt.axvspan('2021-05-01 00:00:00', '2021-06-21 00:00:00', color = 'maroon', alpha = 0.2, ymin = 0.04, ymax = 110000)\nplt.legend([\"Punjab's vaccination drive\", \"stringent policy of center\", \"May 1 until June 21, 2021\"])\nplt.show()","3cc06387":"df.head()","62a0a8be":"ewm=df[['Punjab','Haryana']].ewm(200).mean()","52d7132d":"date,ewm.set_index(df['Date']).plot(figsize=(15,8))\nplt.show()","fc0552aa":"def SerialCorrelation(series, lag = 1):\n    xs = series[lag:]\n    ys = series.shift(lag)[lag:]\n    corr = correlation(xs, ys)\n    return corr\n\ndef correlation(x, y):\n    return covariance(x, y) \/ (np.std(x) * np.std(y))\n\ndef covariance(x, y):\n    xbar = np.mean(x)\n    ybar = np.mean(y)\n    n = len(x)\n    \n    xs = [x_i - xbar for x_i in x]\n    ys = [y_i - ybar for y_i in y]\n    \n    return np.dot(xs, ys) \/ n","b7c118dc":"lags = [1, 7, 30]\nitems = ['day', 'week', 'month']\n\nfor i, j in zip(lags, items):\n    corr = SerialCorrelation(df['Punjab'], lag = i)\n    print('{}: {}'.format(j, corr))","8dbfdaeb":"lags = range(1,30)\ncorr = []\n\nfor i in lags:\n    cor = SerialCorrelation(df['Punjab'], lag = i)\n    corr.append(cor)\n    \nplt.plot(lags, corr, label = 'Serial Correlation(Punjab)')\nplt.gcf().set_size_inches(12, 6)\nplt.legend()\nplt.show()","de9773dd":"So I have obtained the dataframe in the manner as shown above. Now I will drop Miscellaneous and Total column as I don't need them...","a9d56b76":"Now, I will take and use the population data of each state and will put it in the dataframe and use it to find the percentage of people vaccinated in each state and total people vaccinated in India...","6e1f2635":"Now I will find the vaccine doses which were given each day as our data was not sorted and each day the doses of the previous day was added to each next day...","abd9b8a9":"**Firstly I will rename the last column as it is the data of total vaccinated till that date from 16 Jan...**","51818d67":"And I will insert the date column back as I don't wanted to apply the above...","24993910":"# Exponentially Weighted Moving Average (EWMA)","93dee455":"**Now, I will read the csv file agail as i wanted to use it in some other manner...**","de95151c":"So we got the dataframe...","3abddb8a":"No value is empty...So we can start...","2aa1dad3":"I am removing the 36th row as we don't know which part of India is present in this and we don't know that which part's population we have to use and it will not affect our work as it is used in the sum with other states which gave the 37th row(i.e Total)...","50c9579a":"# Serial Correlation","48751200":"**Punjab VS Haryana**","d80bcc6b":"# Rolling Mean"}}