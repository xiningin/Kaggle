{"cell_type":{"b23d3315":"code","45c27973":"code","ce1ba351":"code","9fd50649":"code","df7f29c1":"code","48063b04":"code","6ea95ebb":"code","f225be6c":"code","a8669157":"code","bb805589":"code","bdcfb220":"code","1b9938ac":"code","a6d845fd":"code","d045031b":"code","20557fe6":"code","7e7e88f7":"code","f9c47484":"code","d9b002c4":"code","c87d3d04":"code","b2e7f668":"code","5469f6bf":"code","2335caec":"code","69b3630b":"code","8a1bd0fe":"code","acdfac09":"markdown","d41f9ecb":"markdown","093c0aff":"markdown"},"source":{"b23d3315":"import numpy as np\nimport pandas as pd\nimport urllib.request\nfrom PIL import Image\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nimport matplotlib.pyplot as plt\nimport seaborn as sns","45c27973":"df = pd.read_csv(\"diamonds_train.csv\", index_col=0)","ce1ba351":"df.info()","9fd50649":"sns.heatmap(df.corr(), annot=True)","df7f29c1":"df.cut.value_counts()","48063b04":"cuts = ['Fair','Good','Very Good','Ideal','Premium']\nplt.figure(figsize=(9,6))\n# Create plot\nfig = sns.boxplot(y='price',x='cut',hue='cut',data=df,palette='husl',order=cuts,width=0.5,\n                  dodge=False)\n\nplt.xlabel('Diamond Cut')                      \nplt.ylabel('Price')                            \nfig.get_legend().remove()\nplt.show(fig)","6ea95ebb":"df.color.value_counts()","f225be6c":"colors = ['G','E','F', 'H', 'D', 'I', 'J']\nplt.figure(figsize=(9,6))\n# Create plot\nfig = sns.boxplot(y='price',x='color',hue='color',data=df,palette='husl',order=colors,width=0.5,\n                  dodge=False)\n\nplt.xlabel('Diamond Colors')                      \nplt.ylabel('Price')                            \nfig.get_legend().remove()\nplt.show(fig)","a8669157":"df.clarity.value_counts()","bb805589":"clear = ['SI1','VS2','SI2','VS1','VVS2','VVS1','IF','I1']\nplt.figure(figsize=(9,6))\n# Create plot\nfig = sns.boxplot(y='price',x='clarity',hue='clarity',data=df,palette='husl',order=clear,width=0.5,\n                  dodge=False)\n\nplt.xlabel('Diamond Clarity')                      \nplt.ylabel('Price')                            \nfig.get_legend().remove()\nplt.show(fig)","bdcfb220":"df.info()","1b9938ac":"def codi(df):\n    '''\n    Esta funci\u00f3n da valores num\u00e9ricos a las columnas cut, color y clarity\n    '''\n    cols = ['cut', 'color', 'clarity']\n    for col in cols:\n        le = LabelEncoder()\n        df[col] = le.fit_transform(df[col])\n    return df\n","a6d845fd":"def ordering(df):\n    df.replace(['Fair','Good','Very Good','Ideal','Premium'], [1, 2, 3, 5, 4],inplace=True)\n    df.replace(['G','E','F', 'H', 'D', 'I', 'J'], [4, 6, 5, 3, 7, 2, 1],inplace=True)\n    df.replace(['SI1','VS2','SI2','VS1','VVS2','VVS1','IF','I1'], [3, 4, 2,5,6,7,8,1], inplace= True)\n    return df","d045031b":"ordering(df)","20557fe6":"fig, ax = plt.subplots(figsize=(10,10))\n\nsns.heatmap(df.corr(), annot=True)","7e7e88f7":"X  = np.array(df[['carat', 'cut', 'color', 'clarity']])\ny = np.array(df[\"price\"])","f9c47484":"rfc = RandomForestRegressor(n_jobs=-1,max_features= 'sqrt', max_depth=100, min_samples_split=5, n_estimators=50, criterion = \"mse\")\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20,random_state=400)\nrfc.fit(Xz, y)\ny_pred = rfc.predict(X_test)\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(\"RMSE (test) =\",rmse)","d9b002c4":"X_pred = pd.read_csv(\"diamonds_test.csv\", index_col=0)\nX_pred.head()","c87d3d04":"ordering(X_pred)","b2e7f668":"pred_x = np.array(X_pred[['carat','cut', 'color', 'clarity']])","5469f6bf":"'''\nX_raw = df[['carat','cut', 'color', 'clarity']]\nscaler = preprocessing.StandardScaler().fit(X_raw.values)\npred_x =scaler.transform(X_raw)\npred_x\n'''","2335caec":"predictions_submit = rfc.predict(pred_x)\npredictions_submit","69b3630b":"sample = pd.read_csv(\"sample_submission.csv\")\nsubmission = pd.DataFrame({\"id\": range(len(predictions_submit)), \"price\": predictions_submit})","8a1bd0fe":"def chequeator(df_to_submit):\n    \"\"\"\n    Esta funci\u00f3n se asegura de que tu submission tenga la forma requerida por Kaggle.\n    \n    Si es as\u00ed, se guardar\u00e1 el dataframe en un `csv` y estar\u00e1 listo para subir a Kaggle.\n    \n    Si no, LEE EL MENSAJE Y HAZLE CASO.\n    \n    Si a\u00fan no:\n    - apaga tu ordenador, \n    - date una vuelta, \n    - enciendelo otra vez, \n    - abre este notebook y \n    - leelo todo de nuevo. \n    Todos nos merecemos una segunda oportunidad. Tambi\u00e9n t\u00fa.\n    \"\"\"\n    if df_to_submit.shape == sample.shape:\n        if df_to_submit.columns.all() == sample.columns.all():\n            if df_to_submit.id.all() == sample.id.all():\n                print(\"You're ready to submit!\")\n                submission.to_csv(\"submission8.csv\", index = False) #muy importante el index = False\n                urllib.request.urlretrieve(\"https:\/\/i.kym-cdn.com\/photos\/images\/facebook\/000\/747\/556\/27a.jpg\", \"gfg.png\")     \n                img = Image.open(\"gfg.png\")\n                img.show()   \n            else:\n                print(\"Check the ids and try again\")\n        else:\n            print(\"Check the names of the columns and try again\")\n    else:\n        print(\"Check the number of rows and\/or columns and try again\")\n        print(\"\\nMensaje secreto de Clara: No me puedo creer que despu\u00e9s de todo este notebook hayas hecho alg\u00fan cambio en las filas de `diamonds_test.csv`. Lloro.\")\nchequeator(submission)","acdfac09":"G  -->  5\nE  -->  7\nF  -->  3\nH   --> 4\nD  -->  6\nI  -->  2\nJ  -->  1","d41f9ecb":"SI1  -->   3\nVS2   -->  4\nSI2   -->  2\nVS1  -->   5\nVVS2  -->  6\nVVS1  -->  7\nIF   -->   8\nI1    -->  1","093c0aff":"Ideal    -->    2\nPremium    -->  5\nVery Good   -->  4\nGood     -->     3\nFair     -->     1"}}