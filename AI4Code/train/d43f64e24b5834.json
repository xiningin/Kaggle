{"cell_type":{"4812320a":"code","435afbad":"code","941812db":"code","3d625294":"code","660f0510":"code","4563cba3":"code","639fa3e4":"code","10275b40":"code","3a05020d":"code","a6c850e4":"code","568684eb":"code","4bd7f96c":"code","65d01bee":"code","34666a98":"code","14c3bc97":"code","5ea952f8":"code","c1162204":"code","c44fa1e5":"code","d113fc0a":"code","1260c81b":"code","204be464":"code","4dd1df68":"code","bd9028fa":"code","5b4e6da8":"code","7d5bfe0e":"code","31bbd1a1":"code","85b7f94c":"code","dc3dbb62":"code","480a171c":"code","38611716":"code","5af784f2":"code","8dce63e7":"code","9813dd44":"code","7f82a6b9":"code","ecc8f914":"code","907f7685":"code","b260b256":"code","e6262202":"code","a2593e77":"code","532d4d65":"code","c9a223f5":"code","71faebcc":"code","fda13ba4":"code","b6db84b1":"code","575a7cc0":"markdown","8f651379":"markdown","6a0db2c7":"markdown","ef35e4d6":"markdown","5f233d12":"markdown","7c13f5cd":"markdown","4fa9950b":"markdown","9836a62b":"markdown","30761b0f":"markdown","7becb1de":"markdown","66da8ab8":"markdown","d9ccd232":"markdown","734afd2a":"markdown","5e11d9ac":"markdown","a111dfef":"markdown","2ef6a9d5":"markdown","81b3f542":"markdown","79bcc20e":"markdown","a150db6d":"markdown","5e1b04d2":"markdown","b8e9029a":"markdown","8c8aad9e":"markdown","c10edd0d":"markdown","c07a2445":"markdown","a0c6813e":"markdown","9c650804":"markdown","172279ee":"markdown","83bc07ed":"markdown","d518a9d1":"markdown","7fe000dc":"markdown","46c22e26":"markdown","998a014f":"markdown","7558db47":"markdown","0e6e2d48":"markdown","bbdf240f":"markdown","d5e04508":"markdown","5c5b2953":"markdown","ff8690a8":"markdown","a2b51708":"markdown","9c08646f":"markdown","2d8b1327":"markdown"},"source":{"4812320a":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.dates as mdates\nfrom matplotlib.ticker import ScalarFormatter\n\nplt.style.use('fivethirtyeight')\n\nimport datetime\nfrom datetime import timedelta\n\nimport geopandas as gpd\nfrom geopandas.tools import geocode\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#Color\nstate = {'Active':'#8D90A1','Recovered':'#63B76C','Dead':'#ED0A3F'}","435afbad":"covid_clean = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv', \n                       parse_dates=['Date'])\n\nsars_clean = pd.read_csv(\"..\/input\/sars-outbreak-2003-complete-dataset\/sars_2003_complete_dataset_clean.csv\", \n                       parse_dates=['Date'])\nsars_summary = pd.read_csv('..\/input\/sars-outbreak-2003-complete-dataset\/summary_data_clean.csv')\n\nmers_country = pd.read_csv(\"..\/input\/mers-outbreak-dataset-20122019\/country_count_latest.csv\")\nmers_clean_weekly = pd.read_csv(\"..\/input\/mers-outbreak-dataset-20122019\/weekly_clean.csv\")\n\nmers_clean_weekly['Year'] = pd.to_datetime(mers_clean_weekly['Year'],format = '%Y')","941812db":"#COVID 19\n\nyearwise_grouping = covid_clean.groupby('Date')\ncovid_temp_df = yearwise_grouping['Confirmed','Deaths','Recovered','Active'].sum()\n\n#covid_temp_df\nfig, axes = plt.subplots(figsize=(8,6))\n\nplt.plot(covid_temp_df['Confirmed'], color = '#E88E5A')\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed'] ,alpha = 0.5, color = '#E88E5A')\n\n\n#axes.xaxis.set_minor_locator(mdates.DayLocator(interval=1)) #Works when not using plt.style\naxes.xaxis.set_major_locator(mdates.MonthLocator())\naxes.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('Total COVID Cases over Time')\nplt.xlabel('Months (2020)')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\nplt.show()","3d625294":"#SARS\n\nyearwise_grouping = sars_clean.groupby('Date')\nsars_temp_df = yearwise_grouping['Cumulative number of case(s)','Number of deaths','Number recovered'].sum()\n\n#temp_df\n\nfig, axes = plt.subplots(figsize = (8,6))\nplt.plot(sars_temp_df['Cumulative number of case(s)'], color = '#02A4D3')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Cumulative number of case(s)'] ,alpha = 0.2, color = '#02A4D3')\n\n#axes.xaxis.set_minor_locator(mdates.DayLocator(interval=1)) #Works when not using plt.style\naxes.xaxis.set_major_locator(mdates.MonthLocator(interval = 1))\naxes.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('Total SARS Cases over Time')\nplt.xlabel('Months (2020)')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\nplt.show()","660f0510":"#MERS\n\nyearwise_grouping = mers_clean_weekly.groupby('Year')\nmers_temp_df = yearwise_grouping['New Cases'].sum().to_frame()\nmers_temp_df = mers_temp_df.expanding(min_periods = 1).sum()\n\n#mers_temp_df\n\nfig, axes = plt.subplots(figsize=(8,6))\nplt.plot(mers_temp_df, color = '#A50B5E')\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['New Cases'] ,alpha = 0.2, color = '#A50B5E')\n\n#axes.xaxis.set_minor_locator(mdates.DayLocator(interval=1)) #Works when not using plt.style\naxes.xaxis.set_major_locator(mdates.YearLocator())\naxes.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('Total MERS Cases over Time')\nplt.xlabel('Year')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\nplt.show()","4563cba3":"sec = ['#E88E5A', '#02A4D3', '#A50B5E']\nsns.set_palette(sns.color_palette(sec))\nmers_clean_weekly['Year'] = pd.to_datetime(mers_clean_weekly['Year'],format = '%Y')\n\nformatter = ScalarFormatter()\nformatter.set_scientific(False)\n\nfig, axes = plt.subplots(nrows = 2, ncols = 1, figsize=(16,14))\n\n#FOR SUBPLOT[0]\naxes[0]=plt.subplot(2,1,1)\nsns.lineplot(y='Confirmed',x=covid_temp_df.index,data = covid_temp_df, ax = axes[0], label = 'COVID-19', palette = [sec])\nsns.lineplot(y = 'Cumulative number of case(s)',x = sars_temp_df.index,data = sars_temp_df, ax = axes[0], palette = [sec], label = 'SARS')\nsns.lineplot(y = 'New Cases', x = mers_temp_df.index,data = mers_temp_df, ax = axes[0], palette = [sec],label = 'MERS')\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed'] ,alpha = 0.5, color = '#E88E5A')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Cumulative number of case(s)'] ,alpha = 0.2, color = '#02A4D3')\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['New Cases'] ,alpha = 0.2, color = '#A50B5E')\n\nplt.yscale('linear')\n\naxes[0].xaxis.set_major_locator(mdates.YearLocator())\naxes[0].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes[0].ticklabel_format(useOffset=False, style='plain',axis = 'y')\naxes[0].yaxis.set_major_formatter(formatter)\n\nplt.title('Linear Scale for Total Cases')\nplt.grid(True)\n\n#FOR SUBPLOT[1]\naxes[1]=plt.subplot(2,1,2)\nsns.lineplot(y='Confirmed',x=covid_temp_df.index,data = covid_temp_df, ax = axes[1], \n             palette = [sec],label = 'COVID-19')\nsns.lineplot(y = 'Cumulative number of case(s)',x = sars_temp_df.index,data = sars_temp_df, ax = axes[1], \n             palette = [sec], label = 'SARS')\nsns.lineplot(y = 'New Cases', x = mers_temp_df.index,data = mers_temp_df, ax = axes[1], \n             palette = [sec],label = 'MERS')\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed'] ,alpha = 0.5, color = '#E88E5A')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Cumulative number of case(s)'] ,alpha = 0.2, color = '#02A4D3')\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['New Cases'] ,alpha = 0.2, color = '#A50B5E')\n\nplt.yscale('log')\n\naxes[1].xaxis.set_major_locator(mdates.YearLocator())\naxes[1].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n#axes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\naxes[1].yaxis.set_major_formatter(formatter)\n\nplt.title('Log Scale for Total Cases')\nplt.grid(True)\n\nplt.show()","639fa3e4":"covid_temp_df['Confirmed_per_day']=covid_temp_df['Confirmed'].diff()\ncovid_temp_df['Confirmed_per_day'][0]=covid_temp_df['Confirmed'][0]\n\n#covid_temp_df\n\nfig, axes = plt.subplots(figsize=(8,6))\n\nplt.plot(covid_temp_df['Confirmed_per_day'])\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed_per_day'] ,alpha = 0.2,color = '#E88E5A')\n\n#axes.xaxis.set_minor_locator(mdates.DayLocator(interval=1)) #Works when not using plt.style\naxes.xaxis.set_major_locator(mdates.MonthLocator())\naxes.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('New COVID Cases per day')\nplt.xlabel('Months (2020)')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\nplt.show()","10275b40":"#SARS\n\nsars_temp_df['Confirmed_per_day']=sars_temp_df['Cumulative number of case(s)'].diff()\nsars_temp_df['Confirmed_per_day'][0]=sars_temp_df['Cumulative number of case(s)'][0]\n\n#covid_temp_df\n\nfig, axes = plt.subplots(figsize=(8,6))\n\nplt.plot(sars_temp_df['Confirmed_per_day'], color = '#02A4D3')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Confirmed_per_day'] ,alpha = 0.2, color = '#02A4D3')\n\n#axes.xaxis.set_minor_locator(mdates.DayLocator(interval=1)) #Works when not using plt.style\naxes.xaxis.set_major_locator(mdates.MonthLocator())\naxes.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('New SARS Cases per day')\nplt.xlabel('Months (2020)')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\nplt.show()","3a05020d":"mers_temp_df['Confirmed_per_year'] = mers_temp_df['New Cases'].diff()\nmers_temp_df['Confirmed_per_year'][0] = mers_temp_df['New Cases'][0]\n\n#mers_temp_df\n\nfig, axes = plt.subplots(figsize=(8,6))\nplt.plot(mers_temp_df['Confirmed_per_year'], color = '#A50B5E')\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['Confirmed_per_year'] ,alpha = 0.2, color = '#A50B5E')\n\n#axes.xaxis.set_minor_locator(mdates.DayLocator(interval=1)) #Works when not using plt.style\naxes.xaxis.set_major_locator(mdates.YearLocator())\naxes.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('New MERS Cases per Year')\nplt.xlabel('Year')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\nplt.show()","a6c850e4":"#Summary graph\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2, figsize=(14,12))\n\n#FOR SUBPLOT[0]\naxes[0]=plt.subplot(2,1,1)\nsns.lineplot(y='Confirmed_per_day',x=covid_temp_df.index,data = covid_temp_df, ax = axes[0], label = 'COVID-19')\nsns.lineplot(y = 'Confirmed_per_day',x = sars_temp_df.index,data = sars_temp_df, ax = axes[0], palette = ['red'], label = 'SARS')\nsns.lineplot(y = 'Confirmed_per_year', x = mers_temp_df.index,data = mers_temp_df, ax = axes[0], palette = ['orange'],label = 'MERS')\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed_per_day'] ,alpha = 0.5, color = '#E88E5A')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Confirmed_per_day'] ,alpha = 0.2, color = '#02A4D3')\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['Confirmed_per_year'] ,alpha = 0.2, color = '#A50B5E')\n\naxes[0].xaxis.set_major_locator(mdates.YearLocator())\naxes[0].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes[0].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.yscale('linear')\nplt.title('Linear Scale for New Cases')\nplt.grid(True)\n\n#FOR SUBPLOT[1]\naxes[1]=plt.subplot(2,1,2)\nsns.lineplot(y='Confirmed_per_day',x=covid_temp_df.index,data = covid_temp_df, ax = axes[1], label = 'COVID-19')\nsns.lineplot(y = 'Confirmed_per_day',x = sars_temp_df.index,data = sars_temp_df, ax = axes[1], palette = ['red'], label = 'SARS')\nsns.lineplot(y = 'Confirmed_per_year', x = mers_temp_df.index,data = mers_temp_df, ax = axes[1], palette = ['orange'],label = 'MERS')\n\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed_per_day'] ,alpha = 0.5, color = '#E88E5A')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Confirmed_per_day'] ,alpha = 0.2, color = '#02A4D3')\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['Confirmed_per_year'] ,alpha = 0.2, color = '#A50B5E')\n\naxes[1].xaxis.set_major_locator(mdates.YearLocator())\naxes[1].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.yscale('log')\nplt.title('Log Scale for New Cases')\nplt.grid(True)\n\nplt.show()","568684eb":"import math\n#mers_clean_weekly['Week'].unique()\n\nmers_clean_weekly['nth_week'] = mers_clean_weekly['Week']\nto_check = mers_clean_weekly['nth_week'][0]\nweek = 0\n\nfor i in range(mers_clean_weekly.shape[0]):\n    \n    df_week = mers_clean_weekly['nth_week']\n    \n    if(i==0):\n        to_check = df_week[0]\n        df_week[i] = 0\n    else:\n        if(df_week[i]==to_check):\n            df_week[i] = week\n        else:\n            to_check = df_week[i]\n            week+=1\n            df_week[i] = week\n\ncovid_temp_df['nth_week'] = covid_temp_df.index\nsars_temp_df['nth_week'] = sars_temp_df.index\n\nweek = 0\nfor i in range(0,math.ceil(covid_temp_df.shape[0]),7):\n    covid_temp_df['nth_week'][i:i+7] = week\n    week+=1\n\nweek = 0\nfor i in range(0,math.ceil(sars_temp_df.shape[0]),7):\n    sars_temp_df['nth_week'][i:i+7] = week\n    week+=1","4bd7f96c":"weekwise_grouping = mers_clean_weekly.groupby('nth_week')\nmers_week_temp_df = weekwise_grouping.sum()['New Cases'].to_frame()\n\nmers_week_temp_df['Cummulative Cases'] = mers_week_temp_df['New Cases']\nmers_week_temp_df['Cummulative Cases'] = mers_week_temp_df['Cummulative Cases'].expanding(min_periods = 1).sum()\n\ncovid_week_temp_df = covid_temp_df.groupby('nth_week')\ncovid_week_temp_df = covid_week_temp_df['Confirmed_per_day'].sum().to_frame()\ncovid_week_temp_df.rename(columns = {'Confirmed_per_day':'Confirmed_per_week'},inplace = True)\n\nsars_week_temp_df = sars_temp_df.groupby('nth_week')\nsars_week_temp_df = sars_week_temp_df['Confirmed_per_day'].sum().to_frame()\nsars_week_temp_df.rename(columns = {'Confirmed_per_day':'Confirmed_per_week'},inplace = True)","65d01bee":"'''\nfig, axes = plt.subplots(figsize=(10,6))\n\nsns.lineplot(y = 'Confirmed_per_week', x = covid_week_temp_df.index,data = covid_week_temp_df, ax = axes, label = 'COVID-19')\nsns.lineplot(y = 'Confirmed_per_week', x = sars_week_temp_df.index,data = sars_week_temp_df, ax = axes, palette = ['red'], label = 'SARS')\nsns.lineplot(y = 'New Cases', x = mers_week_temp_df.index,data = mers_week_temp_df, ax = axes, palette = ['orange'],label = 'MERS')\n\n#axes.xaxis.set_major_locator(mdates.YearLocator())\n#axes.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\n#plt.xticks(list(mers_week_temp_df.index + 1))\nplt.yscale('linear')\nplt.title('Linear Scale for New Cases')\nplt.show()\n'''","34666a98":"fig, axes = plt.subplots(nrows = 2, ncols = 1,figsize=(18,14))\n\naxes[0] = plt.subplot(2,1,1)\nsns.lineplot(y = covid_week_temp_df['Confirmed_per_week'][:19], x = covid_week_temp_df.index[:19],data = covid_week_temp_df, ax = axes[0], label = 'COVID-19')\nsns.lineplot(y = sars_week_temp_df['Confirmed_per_week'][:19], x = sars_week_temp_df.index[:19],data = sars_week_temp_df, ax = axes[0], palette = ['red'], label = 'SARS')\nsns.lineplot(y = mers_week_temp_df['New Cases'][:19], x = mers_week_temp_df.index[:19],data = mers_week_temp_df, ax = axes[0], palette = ['orange'],label = 'MERS')\n\nplt.fill_between(list(covid_week_temp_df.index[:19]),covid_week_temp_df['Confirmed_per_week'][:19] ,alpha = 0.5, color = '#E88E5A')\nplt.fill_between(list(sars_week_temp_df.index[:19]),sars_week_temp_df['Confirmed_per_week'][:19] ,alpha = 0.2, color = '#02A4D3')\nplt.fill_between(list(mers_week_temp_df.index[:19]),mers_week_temp_df['New Cases'][:19] ,alpha = 0.2, color = '#A50B5E')\n\n#axes.xaxis.set_major_locator(mdates.YearLocator())\n#axes.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes[0].ticklabel_format(useOffset=False, style='plain',axis = 'y')\naxes[0].set_ylim([-10000,830000])\naxes[0].yaxis.set_major_formatter(formatter)\n\nplt.xticks([i for i in range(1,26)])\nplt.yscale('linear')\nplt.title('Linear Scale for New Cases')\n\naxes[1] = plt.subplot(2,1,2)\n\nsns.lineplot(y = covid_week_temp_df['Confirmed_per_week'][:19], x = covid_week_temp_df.index[:19],data = covid_week_temp_df, ax = axes[1], label = 'COVID-19')\nsns.lineplot(y = sars_week_temp_df['Confirmed_per_week'][:19], x = sars_week_temp_df.index[:19],data = sars_week_temp_df, ax = axes[1], palette = ['red'], label = 'SARS')\nsns.lineplot(y = mers_week_temp_df['New Cases'][:19], x = mers_week_temp_df.index[:19],data = mers_week_temp_df, ax = axes[1], palette = ['orange'],label = 'MERS')\n\nplt.fill_between(list(covid_week_temp_df.index[:19]),covid_week_temp_df['Confirmed_per_week'][:19] ,alpha = 0.5, color = '#E88E5A')\nplt.fill_between(list(sars_week_temp_df.index[:19]),sars_week_temp_df['Confirmed_per_week'][:19] ,alpha = 0.2, color = '#02A4D3')\nplt.fill_between(list(mers_week_temp_df.index[:19]),mers_week_temp_df['New Cases'][:19] ,alpha = 0.2, color = '#A50B5E')\n\nplt.yscale('symlog')\n#axes.xaxis.set_major_locator(mdates.YearLocator())\n#axes.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\naxes[1].yaxis.set_major_formatter(formatter)\n\naxes[1].set_ylim([-1000,100000000])\nplt.xticks([i for i in range(1,20)])\nplt.title('Log Scale for New Cases')\n\nplt.show()","14c3bc97":"#Adding nth day and year\n\ncovid_temp_df['nth_day'] = covid_temp_df.index\ncovid_temp_df['nth_day'] = (covid_temp_df['nth_day'] - min(covid_temp_df['nth_day'])).dt.days\ncovid_temp_df['nth_year'] = covid_temp_df.index\ncovid_temp_df['nth_year'] = (covid_temp_df['nth_year'].dt.year - min(covid_temp_df['nth_year']).year)\n\nsars_temp_df['nth_day'] = sars_temp_df.index\nsars_temp_df['nth_day'] = (sars_temp_df['nth_day'] - min(sars_temp_df['nth_day'])).dt.days\nsars_temp_df['nth_year'] = sars_temp_df.index\nsars_temp_df['nth_year'] = (sars_temp_df['nth_year'].dt.year - min(sars_temp_df['nth_year']).year)\n\nmers_temp_df['nth_year'] = mers_temp_df.index\nmers_temp_df['nth_year'] = (mers_temp_df['nth_year'].dt.year - min(mers_temp_df['nth_year']).year)","5ea952f8":"world_map = gpd.read_file('..\/input\/human-development-index-hdi\/countries.geojson')\n\nworld_map = world_map[['name','continent','geometry']]\nworld_map.head()","c1162204":"#COVID\n\ncovid_countries = covid_clean[covid_clean['Date'] == max(covid_clean['Date'])]\ncovid_countries.rename(columns = {'Country\/Region':'Country'},inplace = True)\n\ncovid_countries['Country'] = covid_countries['Country'].replace('South Korea', 'Korea')\ncovid_countries['Country'] = covid_countries['Country'].replace('US', 'United States')\ncovid_countries['Country'] = covid_countries['Country'].replace('Taiwan*', 'Taiwan')\ncovid_countries['Country'] = covid_countries['Country'].replace('Antigua and Barbuda', 'Antigua and Barb.')\ncovid_countries['Country'] = covid_countries['Country'].replace('Bosnia and Herzegovina', 'Bosnia and Herz.')\ncovid_countries['Country'] = covid_countries['Country'].replace('Burma', 'Myanmar')\ncovid_countries['Country'] = covid_countries['Country'].replace('Central African Republic', 'Central African Rep.')\ncovid_countries['Country'] = covid_countries['Country'].replace('Dominican Republic', 'Dominican Rep.')\ncovid_countries['Country'] = covid_countries['Country'].replace('Equatorial Guinea', 'Eq. Guinea')\ncovid_countries['Country'] = covid_countries['Country'].replace('Laos', 'Lao PDR')\ncovid_countries['Country'] = covid_countries['Country'].replace('Saint Kitts and Nevis', 'St. Kitts and Nevis')\ncovid_countries['Country'] = covid_countries['Country'].replace('Saint Vincent and the Grenadines', 'St. Vin. and Gren.')\ncovid_countries['Country'] = covid_countries['Country'].replace('Western Sahara', 'W. Sahara')\ncovid_countries['Country'] = covid_countries['Country'].replace('Cabo Verde', 'Cape Verde')\ncovid_countries['Country'] = covid_countries['Country'].replace('Congo (Kinshasa)', 'Dem. Rep. Congo')\ncovid_countries['Country'] = covid_countries['Country'].replace('Sao Tome and Principe', 'S\u00e3o Tom\u00e9 and Principe')\ncovid_countries['Country'] = covid_countries['Country'].replace('Eswatini', 'Swaziland')\ncovid_countries['Country'] = covid_countries['Country'].replace(\"Cote d'Ivoire\", \"C\u00f4te d'Ivoire\")\ncovid_countries['Country'] = covid_countries['Country'].replace('South Sudan', 'S. Sudan')\ncovid_countries['Country'] = covid_countries['Country'].replace('Czechia', 'Czech Rep.')\ncovid_countries['Country'] = covid_countries['Country'].replace('North Macedonia', 'Macedonia')\ncovid_countries['Country'] = covid_countries['Country'].replace('Congo (Brazzaville)', 'Congo')\n\ncovid_map = world_map.merge(covid_countries, left_on='name', right_on='Country')[['name','continent','Confirmed','geometry','Deaths']]","c44fa1e5":"fig, ax = plt.subplots(figsize=(18, 8))\n\nworld_map.plot(ax=ax, color='lightgrey')\ncovid_map.plot(ax=ax, cmap='Oranges')\nax.set_facecolor('white')\n\ncovid_map[covid_map['Confirmed'] > 0].plot(ax=ax, cmap='Oranges', markersize=1)\n\nplt.title(\"COVID confirmed in the world (DARKER means greater)\")\nplt\nplt.xticks([])\nplt.yticks([])\nplt.show()","d113fc0a":"sars_summary = pd.read_csv('..\/input\/sars-outbreak-2003-complete-dataset\/summary_data_clean.csv')","1260c81b":"#SARS\n\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Hong Kong SAR, China', 'Hong Kong')\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Macao SAR, China', 'Macao')\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Republic of Ireland', 'Ireland')\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Republic of Korea', 'Korea')\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Russian Federation', 'Russia')\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Taiwan, China', 'Taiwan')\nsars_summary['Country\/Region'] = sars_summary['Country\/Region'].replace('Viet Nam', 'Vietnam')\n\nsars_map = world_map.merge(sars_summary, left_on='name', right_on='Country\/Region')[['name','continent','geometry','Cumulative total cases','No. of deaths']]","204be464":"fig, ax = plt.subplots(figsize=(18, 8))\n\nworld_map.plot(ax=ax, color='lightgrey')\nsars_map.plot(ax=ax, cmap='Blues')\n\nsars_map[sars_map['Cumulative total cases'] > 0].plot(ax=ax, cmap='Blues', markersize=1)\n\n#mers_map[mers_map['Confirmed'] > 100].plot(ax=ax, cmap='autumn', markersize=10)\n#mers_map[mers_map['Confirmed'] > 1000].plot(ax=ax, cmap='autumn', markersize=10)\n\nplt.title(\"SARS confirmed in the world\")\nplt.xticks([])\nplt.yticks([])\nplt.show()","4dd1df68":"mers_country = pd.read_csv('..\/input\/mers-outbreak-dataset-20122019\/country_count_latest.csv')","bd9028fa":"#MERS\n\nmers_country['Country'] = mers_country['Country'].replace('Republic of Korea', 'Korea')\nmers_country['Country'] = mers_country['Country'].replace('United States of America', 'United States')\n\nmers_map = world_map.merge(mers_country, left_on='name', right_on='Country')\n# mers_map","5b4e6da8":"fig, ax = plt.subplots(figsize=(18, 8))\n\nworld_map.plot(ax=ax, color='lightgrey')\nmers_map.plot(ax=ax, cmap='Purples')\nax.set_facecolor('white')\n\nmers_map[mers_map['Confirmed'] > 0].plot(ax=ax, cmap='Purples', markersize=1)\n\n#mers_map[mers_map['Confirmed'] > 100].plot(ax=ax, cmap='autumn', markersize=10)\n#mers_map[mers_map['Confirmed'] > 1000].plot(ax=ax, cmap='autumn', markersize=10)\n\nplt.title(\"MERS confirmed in the world\")\nplt.xticks([])\nplt.yticks([])\nplt.show()","7d5bfe0e":"#COVID\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(14, 12))\n\naxes[0]=plt.subplot(2,1,1)\n\nworld_map.plot(ax=axes[0], color='lightgrey')\ncovid_map.plot(ax=axes[0], cmap='Oranges')\naxes[0].set_facecolor('white')\nplt.xticks([])\nplt.yticks([])\n\ncovid_map[covid_map['Confirmed'] > 0].plot(ax=axes[0], cmap='Oranges', markersize=1)\n\n#mers_map[mers_map['Confirmed'] > 100].plot(ax=ax, cmap='autumn', markersize=10)\n#mers_map[mers_map['Confirmed'] > 1000].plot(ax=ax, cmap='autumn', markersize=10)\n\nplt.title(\"COVID-19 confirmed in the world\")\n\naxes[1]=plt.subplot(2,1,2)\nsorted_covid_by_country = covid_map.sort_values('Confirmed', ascending = False)\nsns.barplot(x = sorted_covid_by_country['Confirmed'][:10], y = sorted_covid_by_country['name'][:10],ax = axes[1])\n\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'x')\nplt.title(\"Most affected Countries\")\nplt.show()","31bbd1a1":"#SARS\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(14, 12))\n\naxes[0]=plt.subplot(2,1,1)\n\nworld_map.plot(ax=axes[0], color='lightgrey')\nsars_map.plot(ax=axes[0], cmap='Blues_r')\naxes[0].set_facecolor('white')\nplt.xticks([])\nplt.yticks([])\n\nsars_map[sars_map['Cumulative total cases'] > 0].plot(ax=axes[0], cmap='Blues_r', markersize=1)\n\n#mers_map[mers_map['Confirmed'] > 100].plot(ax=ax, cmap='autumn', markersize=10)\n#mers_map[mers_map['Confirmed'] > 1000].plot(ax=ax, cmap='autumn', markersize=10)\n\nplt.title(\"SARS confirmed in the world\")\n\naxes[1]=plt.subplot(2,1,2)\nsorted_sars_by_country = sars_map.sort_values('Cumulative total cases', ascending = False)\nsns.barplot(x = sorted_sars_by_country['Cumulative total cases'][:10], y = sorted_sars_by_country['name'][:10],ax = axes[1])\nplt.title(\"Most affected Countries\")\nplt.show()","85b7f94c":"#MERS\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(14, 12))\n\naxes[0]=plt.subplot(2,1,1)\n\nworld_map.plot(ax=axes[0], color='lightgrey')\nmers_map.plot(ax=axes[0], cmap='Purples')\naxes[0].set_facecolor('white')\n\nmers_map[mers_map['Confirmed'] > 0].plot(ax=axes[0], cmap='Purples', markersize=1)\n\nplt.xticks([])\nplt.yticks([])\n\nplt.title(\"MERS confirmed in the world\")\n\naxes[1]=plt.subplot(2,1,2)\nsorted_mers_by_country = mers_map.sort_values('Confirmed', ascending = False)\nsns.barplot(x = sorted_mers_by_country['Confirmed'][:10], y = sorted_mers_by_country['name'][:10],ax = axes[1])\nplt.title(\"Most affected Countries\")\nplt.show()","dc3dbb62":"#mers_map['name'].nunique()\n#covid_map['name'].nunique()\n#sars_map['name'].nunique()\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(22, 8))\n\naxes[0]=plt.subplot(1,2,1)\nsns.barplot(y = [covid_map['name'].nunique(),mers_map['name'].nunique(),sars_map['name'].nunique()],\n            x = ['COVID-19','MERS','SARS'], palette=sec)\n\nplt.title('Number of Infected countries')\n\naxes[1]=plt.subplot(1,2,2)\nplt.pie([covid_map['name'].nunique(),mers_map['name'].nunique(),sars_map['name'].nunique()],\n        labels = ['COVID-19','MERS','SARS'],\n        autopct = '%1.1f%%',\n        startangle = -120,\n        explode = [0.2,0,0],\n        colors = sec\n       )\nplt.title(\"Percentage of countries infected\")\n\nplt.show()","480a171c":"#COVID\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(14, 12))\n\naxes[0]=plt.subplot(2,1,1)\n\nworld_map.plot(ax=axes[0], color='lightgrey')\ncovid_map.plot(ax=axes[0], cmap='Oranges')\naxes[0].set_facecolor('white')\nplt.xticks([])\nplt.yticks([])\n\ncovid_map[covid_map['Deaths'] > 0].plot(ax=axes[0], cmap='Oranges', markersize=1)\n\n#mers_map[mers_map['Confirmed'] > 100].plot(ax=ax, cmap='autumn', markersize=10)\n#mers_map[mers_map['Confirmed'] > 1000].plot(ax=ax, cmap='autumn', markersize=10)\n\nplt.title(\"COVID-19 Deaths in the world\")\n\naxes[1]=plt.subplot(2,1,2)\n\nlinegraph = sns.lineplot(y = covid_temp_df['Confirmed'], x = covid_temp_df.index,ax = axes[1],label = 'Confirmed', color = sec[0])\nsns.lineplot(y = covid_temp_df['Deaths'], x = covid_temp_df.index,ax = axes[1],label = 'Dead',color = '#ED0A3F')\n\nlinegraph.lines[1].set_linestyle(\"--\")\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed'] ,alpha = 0.2, color = sec[0])\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Deaths'] ,alpha = 0.2, color = '#ED0A3F')\n\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.legend()\nplt.title(\"Confirmed Vs Dead\")\nplt.show()","38611716":"#SARS\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(14, 12))\n\naxes[0]=plt.subplot(2,1,1)\n\nworld_map.plot(ax=axes[0], color='lightgrey')\nsars_map.plot(ax=axes[0], cmap='Blues')\n\nsars_map[sars_map['No. of deaths'] > 0].plot(ax=axes[0], cmap='Blues', markersize=1)\n\nplt.title(\"SARS Deaths in the world\")\n\naxes[1]=plt.subplot(2,1,2)\n\nlinegraph = sns.lineplot(y = sars_temp_df['Cumulative number of case(s)'], x = sars_temp_df.index,ax = axes[1], label = 'Confirmed', color = sec[1])\nsns.lineplot(y = sars_temp_df['Number of deaths'], x = sars_temp_df.index,ax = axes[1], label = 'Dead',color = '#ED0A3F')\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nlinegraph.lines[1].set_linestyle(\"--\")\n\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Cumulative number of case(s)'] ,alpha = 0.2, color = sec[1])\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Number of deaths'] ,alpha = 0.2,color = '#ED0A3F')\n\nplt.legend()\nplt.title(\"Most affected Countries\")\nplt.show()","5af784f2":"#COVID\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(22, 8))\n\naxes[0]=plt.subplot(1,2,1)\n\n#mers_map[mers_map['Confirmed'] > 100].plot(ax=ax, cmap='autumn', markersize=10)\n#mers_map[mers_map['Confirmed'] > 1000].plot(ax=ax, cmap='autumn', markersize=10)\n\nplt.pie([covid_temp_df['Recovered'][-1],(covid_temp_df['Confirmed'][-1])-(covid_temp_df['Recovered'][-1])],\n        startangle = 90,\n        labels = ['Recovered','Dead\/Active'],\n        autopct = '%1.1f%%',\n        explode = [0.2,0],\n        colors = [state['Recovered'],state['Dead']]\n       )\n\nplt.title(\"COVID-19 Deaths in the world\")\n\naxes[1]=plt.subplot(1,2,2)\n\nlinegraph = sns.lineplot(y = covid_temp_df['Confirmed'], x = covid_temp_df.index,ax = axes[1], label = 'Confirmed',color = sec[0])\nsns.lineplot(y = covid_temp_df['Recovered'], x = covid_temp_df.index,ax = axes[1], label = 'Recovered', color = state['Recovered'])\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nlinegraph.lines[1].set_linestyle(\"--\")\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed'] ,alpha = 0.2,color = sec[0])\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Recovered'] ,alpha = 0.5, color = state['Recovered'])\n\nplt.legend()\nplt.title(\"Confirmed vs Recovery\")\nplt.show()","8dce63e7":"#SARS\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(22, 8))\n\naxes[0]=plt.subplot(1,2,1)\n\nplt.pie([sars_temp_df['Number recovered'][-1],(sars_temp_df['Cumulative number of case(s)'][-1])-(sars_temp_df['Number recovered'][-1])],\n        labels = ['Recovered','Dead\/Active'],\n        autopct = '%1.1f%%',\n        startangle = 20,\n        explode = [0.2,0],\n        colors = [state['Recovered'],state['Dead']]\n       )\n\nplt.title(\"SARS Deaths in the world\")\n\naxes[1]=plt.subplot(1,2,2)\n\nlinegraph = sns.lineplot(y = sars_temp_df['Cumulative number of case(s)'], x = sars_temp_df.index,ax = axes[1], label = 'Confirmed', color = sec[1])\nsns.lineplot(y = sars_temp_df['Number recovered'], x = sars_temp_df.index,ax = axes[1], label = 'Recovered', color = state['Recovered'])\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nlinegraph.lines[1].set_linestyle(\"--\")\n\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Cumulative number of case(s)'] ,alpha = 0.2, color = sec[1])\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Number recovered'] ,alpha = 0.5, color = state['Recovered'])\n\nplt.title(\"Confirmed vs Recovery\")\nplt.show()","9813dd44":"#COVID\n\nfig, axes = plt.subplots(figsize=(16, 8))\nlinegraph = sns.lineplot(y = covid_temp_df['Confirmed'], x = covid_temp_df.index,ax = axes, color = sec[0])\nsns.lineplot(y = covid_temp_df['Active'], x = covid_temp_df.index,ax = axes, color = state['Active'])\nsns.lineplot(y = covid_temp_df['Recovered'], x = covid_temp_df.index,ax = axes, color = state['Recovered'])\nsns.lineplot(y = covid_temp_df['Deaths'], x = covid_temp_df.index,ax = axes, color = state['Dead'])\n\n\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Confirmed'] ,alpha = 0.2, label = 'Confirmed', color = sec[0])\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Active'] ,alpha = 0.3, label = 'Active', color = state['Active'])\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Recovered'] ,alpha = 0.5, label = 'Recovered', color = '#9DE093')\nplt.fill_between(list(covid_temp_df.index),covid_temp_df['Deaths'] ,alpha = 0.5, label = 'Dead',color = '#ED0A3F')\n\n\nlinegraph.lines[1].set_linestyle(\"--\")\nlinegraph.lines[2].set_linestyle(\"--\")\nlinegraph.lines[3].set_linestyle(\"--\")\n\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\nplt.legend()\nplt.title(\"COVID-19 Summary\")\nplt.show()","7f82a6b9":"col = ['Confirmed', 'Deaths', 'Recovered', 'Active']\nvalues = [covid_temp_df['Confirmed'][-1],covid_temp_df['Deaths'][-1],\n          covid_temp_df['Recovered'][-1],covid_temp_df['Active'][-1]]\n\nfig, axes = plt.subplots(1, 4, figsize=(24, 4))\naxes = axes.flatten()\nfig.set_facecolor('white')\n\nfor ind, col in enumerate(col):\n    axes[ind].text(0.5, 0.6, col, \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=32, \n            color='white', backgroundcolor='black')\n\n    axes[ind].text(0.5, 0.3, int(values[ind]), \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=sec[0], backgroundcolor='white')\n\n    axes[ind].set_axis_off()","ecc8f914":"#SARS\n\nfig, axes = plt.subplots(figsize=(16, 8))\nlinegraph = sns.lineplot(y = sars_temp_df['Cumulative number of case(s)'], x = sars_temp_df.index,ax = axes, label = 'Confirmed',color = sec[1])\nsns.lineplot(y = sars_temp_df['Number recovered'], x = sars_temp_df.index,ax = axes, label = 'Recovered', color = state['Recovered'])\nsns.lineplot(y = sars_temp_df['Number of deaths'], x = sars_temp_df.index,ax = axes, label = 'Dead', color = state['Dead'])\naxes.ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nlinegraph.lines[1].set_linestyle(\"--\")\nlinegraph.lines[2].set_linestyle(\"--\")\n\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Cumulative number of case(s)'] ,alpha = 0.2, color = sec[1])\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Number recovered'] ,alpha = 0.2, color = '#88B04B')\nplt.fill_between(list(sars_temp_df.index),sars_temp_df['Number of deaths'] ,alpha = 0.2,color = '#DD4124')\n\nplt.legend()\nplt.title(\"Most affected Countries\")\nplt.show()","907f7685":"col = ['Confirmed', 'Deaths', 'Recovered', 'Active']\nvalues = [sars_temp_df['Cumulative number of case(s)'][-1],sars_temp_df['Number of deaths'][-1],\n          sars_temp_df['Number recovered'][-1],0]\n\nfig, axes = plt.subplots(1, 4, figsize=(24, 4))\naxes = axes.flatten()\nfig.set_facecolor('white')\n\nfor ind, col in enumerate(col):\n    axes[ind].text(0.5, 0.6, col, \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=32, \n            color='white', backgroundcolor='black')\n\n    axes[ind].text(0.5, 0.3, int(values[ind]), \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=sec[1], backgroundcolor='white')\n\n    axes[ind].set_axis_off()","b260b256":"#MERS\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2,figsize=(16, 8))\n\naxes[0] = plt.subplot(1,2,1)\nsns.lineplot(y = mers_week_temp_df['Cummulative Cases'], x = mers_week_temp_df.index,ax = axes[0], color = sec[2])\nplt.fill_between(list(mers_week_temp_df.index),mers_week_temp_df['Cummulative Cases'] ,alpha = 0.2, color = sec[2])\n\naxes[0].ticklabel_format(useOffset=False, style='plain',axis = 'y')\nplt.title(\"MERS Confirmed over Weeks\")\nplt.xlabel(\"Weeks\")\n\naxes[1] = plt.subplot(1,2,2)\n\nplt.plot(mers_temp_df['New Cases'], color = sec[2])\nplt.fill_between(list(mers_temp_df.index),mers_temp_df['New Cases'] ,alpha = 0.2, color = sec[2])\naxes[1].xaxis.set_major_locator(mdates.YearLocator())\naxes[1].xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n\naxes[1].ticklabel_format(useOffset=False, style='plain',axis = 'y')\n\nplt.title('MERS Confirmed over Years')\nplt.xlabel('Years')\nplt.ylabel('Total Cases')\nplt.xticks(rotation = None)\n\nplt.show()","e6262202":"col = ['Confirmed', 'Deaths', 'Recovered', 'Active']\nvalues = [mers_temp_df['New Cases'][-1],858,\n          2447 -858,0]\n\nfig, axes = plt.subplots(1, 4, figsize=(24, 4))\naxes = axes.flatten()\nfig.set_facecolor('white')\n\nfor ind, col in enumerate(col):\n    axes[ind].text(0.5, 0.6, col, \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=32, \n            color='white', backgroundcolor='black')\n\n    axes[ind].text(0.5, 0.3, int(values[ind]), \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=sec[2], backgroundcolor='white')\n\n    axes[ind].set_axis_off()","a2593e77":"#COVID\n\nfig, axes = plt.subplots(nrows = 1, ncols = 3,figsize=(22, 8))\n\naxes[0]=plt.subplot(1,3,1)\n\nplt.pie([covid_temp_df['Recovered'][-1],\n         covid_temp_df['Deaths'][-1],covid_temp_df['Active'][-1]],\n        labels = ['Recovered','Deaths','Active'],\n        autopct = '%1.1f%%',\n        startangle = 90,\n        explode = [0.2,0,0],\n        colors = [state['Recovered'],state['Dead'],state['Active']]\n       )\n\nplt.title(\"COVID-19 Confirmed Breakdown\")\n\naxes[1]=plt.subplot(1,3,2)\n\nplt.pie([sars_temp_df['Number recovered'][-1],\n        sars_temp_df['Number of deaths'][-1]],\n        labels = ['Recovered','Death'],\n        autopct = '%1.1f%%',\n        startangle = 20,\n        explode = [0.2,0],\n        colors = [state['Recovered'],state['Dead']]\n       )\n\nplt.title(\"SARS Confirmed Breakdown\")\n\naxes[1]=plt.subplot(1,3,3)\nplt.pie([2494 -858,858 ],\n        labels = ['Recovered','Death'],\n        autopct = '%1.1f%%',\n        startangle = 50,\n        explode = [0.2,0],\n        colors = [state['Recovered'],state['Dead']]\n       )\n\nplt.title(\"MERS Confirmed Breakdown\")\nplt.show()","532d4d65":"#BarChart for Raw Numbers\nx_indexes = np.array(['Confirmed','Death','Recovered','Countries Infected'])\nx_pos = np.array([1,2,3,4])\nshift_width = 0.25\n\ncovid_val = [covid_temp_df['Confirmed'][-1],\n             covid_temp_df['Deaths'][-1],\n             covid_temp_df['Recovered'][-1],\n             len(covid_map)]\n\nsars_val = [sars_temp_df['Cumulative number of case(s)'][-1],\n            sars_temp_df['Number of deaths'][-1],\n            sars_temp_df['Number recovered'][-1],\n            len(sars_map)]\n\nmers_val = [mers_temp_df['New Cases'][-1],\n            858,\n            2494 -858,\n            len(mers_map)]\n\ndef makebarplot(index, scale,title_sent):\n    axes[index]=plt.subplot(1,2,index+1)\n\n    plt.bar((x_pos-shift_width),covid_val,label = 'COVID-19',width = 0.25,color = sec[0])\n    plt.bar((x_pos),sars_val,label = 'SARS',width = 0.25,color = sec[1])\n    plt.bar((x_pos+shift_width),mers_val,label = 'MERS',width = 0.25,color = sec[2])\n\n    plt.xticks(x_pos,x_indexes)\n    plt.title(title_sent)\n    plt.ylabel(\"Total Number\")\n\n    plt.yscale(scale)\n    plt.legend()\n\n    for axis in [axes[index].yaxis]:\n        formatter = ScalarFormatter()\n        formatter.set_scientific(False)\n        axis.set_major_formatter(formatter)\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2, figsize=(20,6))\n        \nmakebarplot(0,'linear','Linear Scale : Comparision of Raw Numbers')\nmakebarplot(1,'log','Log Scale : Comparision of Raw Numbers')\nplt.show()","c9a223f5":"#BarChart for Percentages\nx_indexes = np.array(['Death %','Recovery %','Infection % \\n(R0 Score)','Countries% Infected'])\nx_pos = np.array([1,2,3,4])\nshift_width = 0.25\n\ncovid_val_per = [(covid_temp_df['Deaths'][-1]\/covid_temp_df['Confirmed'][-1])*100,\n            (covid_temp_df['Deaths'][-1]\/covid_temp_df['Confirmed'][-1])*100,\n            (2.5\/18)*100, covid_map['name'].nunique()\/195 * 100]\n\nsars_val_per = [(sars_temp_df['Number of deaths'][-1]\/sars_temp_df['Cumulative number of case(s)'][-1])*100,\n            (sars_temp_df['Number recovered'][-1]\/sars_temp_df['Cumulative number of case(s)'][-1])*100,\n            (4\/18)*100,sars_map['name'].nunique()\/195*100]\n\nmers_val_per = [(858\/mers_temp_df['New Cases'][-1])*100,\n            ((2494-858)\/mers_temp_df['New Cases'][-1])*100,\n            (0.8\/18)*100,mers_map['name'].nunique()\/195*100]\n\ndef makebarplot(index, scale, title_sent):\n    axes[index]=plt.subplot(1,2,index+1)\n\n    plt.bar((x_pos-shift_width),covid_val_per,label = 'COVID-19',width = 0.25,color = sec[0])\n    plt.bar((x_pos),sars_val_per,label = 'SARS',width = 0.25,color = sec[1])\n    plt.bar((x_pos+shift_width),mers_val_per,label = 'MERS',width = 0.25,color = sec[2])\n\n    plt.xticks(x_pos,x_indexes)\n    plt.title(title_sent)\n    plt.ylabel(\"% out of 100\")\n\n    plt.yscale(scale)\n    plt.legend()\n    \n\n    for axis in [axes[index].yaxis]:\n        formatter = ScalarFormatter()\n        formatter.set_scientific(False)\n        axis.set_major_formatter(formatter)\n        \n    axes[index].set_ylim([0,100])\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2, figsize=(20,6))\n        \nmakebarplot(0,'linear','Linear Scale : Comparision of Percentages')\nmakebarplot(1,'log','Log Scale : Comparision of Percentages')\nplt.show()","71faebcc":"#Raw Numbers\n#HIGHEST CONFIRMED\n#HIGHEST DEATH COUNT\n#HIGHEST RECOVERIES\n#HIGHEST COUNTRIES INFECTED","fda13ba4":"col = ['Confirmed', 'Deaths', 'Recovered', 'Countries Infected',]\n\nfig, axes = plt.subplots(1, 4, figsize=(24, 4))\naxes = axes.flatten()\nfig.set_facecolor('white')\n\nfor ind, col in enumerate(col):\n    axes[ind].text(0.5, 0.6, col, \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=32,\n            color='white', backgroundcolor='black')\n\n    axes[ind].text(0.5, 0.3, 'COVID-19', \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=sec[0], backgroundcolor='white')\n    \n    axes[ind].text(0.5, 0, int(covid_val[ind]), \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=sec[0], backgroundcolor='white')\n\n    axes[ind].set_axis_off()","b6db84b1":"#Percentage\n\n#HIGHEST DEATH CHNACE\n#HIGHEST RECOVERY PERCENTAGE\n#INFECTION INFECTIVITY\n\ncol = ['Death%', 'Recovery%', '(R0 Score)', 'Countries% Infected',]\n\nvalues = [['MERS',mers_val_per[0]],['SARS',sars_val_per[1]],['SARS',sars_val_per[2]],['COVID-19',covid_val_per[3]]]\ncolor_val = [sec[2],sec[1],sec[1],sec[0]]\n\nfig, axes = plt.subplots(1, 4, figsize=(24, 4))\naxes = axes.flatten()\nfig.set_facecolor('white')\n\nfor ind, col in enumerate(col):\n    axes[ind].text(0.5, 0.6, col, \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=32,\n            color='white', backgroundcolor='black')\n\n    axes[ind].text(0.5, 0.3, values[ind][0], \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=color_val[ind], backgroundcolor='white')\n    \n    axes[ind].text(0.5, 0, str(round(values[ind][1],2))+str('%'), \n            ha='center', va='center',\n            fontfamily='monospace', fontsize=48, fontweight='bold',\n            color=color_val[ind], backgroundcolor='white')\n\n    axes[ind].set_axis_off()","575a7cc0":"### 3.3 MERS, per year","8f651379":"### 5.3 MERS : Confirmed around the World","6a0db2c7":"### 3.4 New cases per Year Overview","ef35e4d6":"### 6.1 COVID-19 Most affected Top 10","5f233d12":"### 9.2 SARS Summary","7c13f5cd":"### By Percentage","4fa9950b":"### 7.1 COVID-19 Death around the World","9836a62b":"# 1. Importing Libraries\n\nWe'll be using\n\n- **pandas** - because pandas are cute\n- **numpy** - you don't ignore numpy... ever\n- **matplotlib** - for plots\n- **seaborn** - for pretty charts\n- **plotly** - TO BE DONE \n- **datetime** - for parsing dates and plotting them\n- **ScalerFormatter** - to format the axis labels\n- **geopandas** - for non-interactive GeoSpatial Analysis","30761b0f":"# 2. Cummulative Cases over Time\n\nThis is what we get for each day\/week\/year by collectively summing up the new numbers with previous numbers.","7becb1de":"### 8.1 COVID-19 Recovery Charts","66da8ab8":"### 9.3 MERS Summary","d9ccd232":"### 3.1 COVID-19, per day","734afd2a":"# 8. Recovery Overview\n\nSince the dataset for MERS had only confirmed cases, there were no features of Death Count or Recovery count. These values will be hardcoded from the internet.","5e11d9ac":"### 10.3 Comparing by Percentages","a111dfef":"### By Raw Magnitude\n\nCOVID-19 is the deadliest pandemic we've faced in recent decade. The numbers speak volumes about the situation.","2ef6a9d5":"# Summary","81b3f542":"### 5.1 COVID-19 : Confirmed around the World","79bcc20e":"### 5.2 SARS : Confirmed around the World","a150db6d":"## Acknowledgements\n\nDataset and Placard Code \n- [Dev Kumar](https:\/\/www.kaggle.com\/imdevskp), \n- [Placard Notebook](https:\/\/www.kaggle.com\/imdevskp\/a-brief-comparative-study-of-epidemics)\n\n<br>\n\nVisualisation crosschecks\n- https:\/\/www.kaggle.com\/abhinand05\/covid-19-digging-a-bit-deeper#1.-Confirmed-Cases-Over-Time\n- https:\/\/www.kaggle.com\/therealcyberlord\/coronavirus-covid-19-visualization-prediction\n- https:\/\/www.kaggle.com\/holfyuen\/coronavirus-2019-20-visualization","5e1b04d2":"### 8.2 SARS Recovery Charts","b8e9029a":"# 10. Comparisions","8c8aad9e":"### 3.2 SARS, per day","c10edd0d":"### 2.1 COVID-19 Cummulative (Month view)","c07a2445":"### 6.2 SARS Most affected Top 10","a0c6813e":"### 6.4 Affected Countries Count Overview","9c650804":"# 6. Most Infected Countries","172279ee":"# Introduction\n\n### What is a novel coronavirus, specifically?\nCoronaviruses are a family of viruses named for the crown-like spikes on their surface. The word \u201ccorona\u201d itself means \u201ccrown.\u201d Although most coronaviruses are found in animals, the first human coronaviruses were identified in the mid-1960s\n\n![](https:\/\/i.imgur.com\/8B8dRAt.png)\n\n### What does \u201cnovel\u201d mean in medicine and virology?\nThe word \u201cnovel\u201d originated from the Latin word \u201cnovus,\u201d which means \u201cnew.\u201d In medicine, \u201cnovel\u201d usually refers to a virus or bacterial strain that was not previously identified. COVID-19 is a new disease, caused by the novel, or new, coronavirus SARS-CoV-2 that was not previously seen in humans.\n\n-----------------------------\n\n### What about novel influenza (flu) viruses?\nWhen you\u2019ve heard of novel viruses in the past, it may have been in the context of novel influenza (flu) viruses, and not coronaviruses.\n\n--------------------------------\n\n### When have there been examples of other novel coronaviruses?\nSARS-CoV-2 is the first novel coronavirus to cause a pandemic in the last century, with others previously caused by novel influenza A viruses. Two other recent examples of novel coronaviruses have been SARS-CoV and MERS-CoV.  \n\nSource : https:\/\/www.goodrx.com\/blog\/what-does-novel-coronavirus-mean-science-medical-definition\/","83bc07ed":"### 2.4 Brief Overview","d518a9d1":"# 9. Confirmed vs Recovered vs Death","7fe000dc":"### 7.2 SARS Death around the World","46c22e26":"### 10.2 Comparing Raw Numbers and Magnitude","998a014f":"## 4. Brief Comparision : Cases for first 18 weeks\n\nSince `mers_clean_weekly` has weekly attribute to it, we'll use that to make a more refined weekly basis dataframe of mers cases. Sine SARS and Covid-19 data being used ranges for less than a year, using weeks as the time interval will help us compare the raw numbers of growth.","7558db47":"### 2.2 SARS Cummulative (Month view)","0e6e2d48":"### 9.1 Covid 19 Summary","bbdf240f":"# 5. Geospatial Analysis","d5e04508":"# 3. Confirmed NEW Cases per day\/week\n\nThese are the new cases being reported each day, or weeks (for MERS due to it's long timeline). These numbers are not affected by the previous records at all.","5c5b2953":"### 10.1 Recovery, Death and Active percentages","ff8690a8":"### 6.3 MERS Most affected Top 10","a2b51708":"# 7. Death Overview\n\nSince the dataset for MERS had only confirmed cases, there were no features of Death Count or Recovery count. These values will be hardcoded from the internet.","9c08646f":"### 2.3 MERS Cummulative (Year view)","2d8b1327":"# Wash Hands, clean screen and devices - Stay Safe!"}}