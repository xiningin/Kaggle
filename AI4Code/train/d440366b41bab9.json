{"cell_type":{"57eb410b":"code","4139bc8e":"code","33412561":"code","71aeb8eb":"code","6874dd0a":"code","0fa80102":"code","ad271b5f":"code","852712cc":"code","ce95af9e":"code","717af3f1":"code","e9520aa1":"code","e4c4b367":"code","b50f591e":"code","2d219bc4":"code","2753eac3":"code","57844840":"code","2232fd24":"code","5af508ae":"code","59639f82":"code","32d1b73c":"code","d57ce344":"code","35f47e4d":"code","931b67e4":"code","3094b03f":"code","b9be12b5":"code","652f1616":"code","ff84ba37":"code","13cce4e0":"code","362dee4e":"code","e1671241":"code","f3e91b86":"code","f48cf599":"code","2321f298":"code","259d50af":"markdown","ca958253":"markdown","63fbd411":"markdown","5e45de76":"markdown","cd0c3d25":"markdown","de22cc03":"markdown","c01d9e71":"markdown","8dfcead6":"markdown","4b0b4d55":"markdown","1c84bd2d":"markdown","009e42ea":"markdown","c60a5a7a":"markdown","f55256d2":"markdown","92ec9b1d":"markdown"},"source":{"57eb410b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4139bc8e":"\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","33412561":"train_data.head()","71aeb8eb":"test_data.head()","6874dd0a":"train_data['Embarked'].replace({'S':1,'C':2,'Q':3},inplace=True)","0fa80102":"y = train_data['Survived']\nfeatures = ['PassengerId', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']\nX = pd.get_dummies(train_data[features])\ntest_X = pd.get_dummies(test_data[features])","ad271b5f":"X.head()","852712cc":"missing = train_data.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace = True)\nprint(missing)","ce95af9e":"#train_data = train_data.dropna(subset=['Embarked'])","717af3f1":"sns.countplot(x ='Fare', data = test_data,\n              color=\"salmon\",\n              saturation = 0.1)","e9520aa1":"\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=.8, random_state=1)","e4c4b367":"sns.distplot(X_test['Fare'].dropna(), kde=False)","b50f591e":"sns.countplot(x ='Fare', data = X_train,\n              color=\"salmon\",\n              saturation = 0.1)","2d219bc4":"X_test = X_test.fillna(X_train.mean())\n#X = X.fillna(X.mean())\n\nX_train = X_train.fillna(X_train.mean())","2753eac3":"X_train.head()","57844840":"X_train.describe()","2232fd24":"y_train.head()","5af508ae":"X_train.shape","59639f82":"X_test.shape","32d1b73c":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","d57ce344":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","35f47e4d":"X_train = X_train.fillna(X_train.mean())\nX_test = X_test.fillna(X_test.mean())","931b67e4":"modelA = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nmodelA.fit(X_train, y_train)\npredictionsA = modelA.predict(X_test)\nprint(predictionsA)","3094b03f":"predictionsA.shape","b9be12b5":"modelB = KNeighborsClassifier(n_neighbors=3)\nmodelB.fit(X_train, y_train)\n\npredictionsB = modelB.predict(X_test)\nprint(predictionsB)","652f1616":"predictionsB.shape","ff84ba37":"modelC = LogisticRegression(solver='liblinear')\nmodelC.fit(X_train, y_train)\n\npredictionsC = modelC.predict(X_test)\nprint(predictionsC)","13cce4e0":"predictionsC.shape","362dee4e":"\naccuracyA = accuracy_score(y_test, predictionsA)\nprint(accuracyA)","e1671241":"accuracyB = accuracy_score(y_test, predictionsB)\nprint(accuracyB)","f3e91b86":"accuracyC = accuracy_score(y_test, predictionsC)\nprint(accuracyC)","f48cf599":"yp = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\"]\nXp = pd.get_dummies(train_data[features])\nX_testp = pd.get_dummies(test_data[features])\n\nXp = Xp.fillna(Xp.mean())\nX_testp = X_testp.fillna(X_testp.mean())\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nmodel.fit(Xp, yp)\npredictionsPrime = model.predict(X_testp)\n\n#modelp = LogisticRegression(solver='liblinear')\n#modelp.fit(Xp, yp)\n\n#predictionsPrime = modelC.predict(X_testp)\nprint(predictionsPrime)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictionsPrime})\noutput.to_csv('submission.csv', index=False)","2321f298":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictionsPrime})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","259d50af":"# Re-examine data","ca958253":"# Exploratory Data Analysis","63fbd411":"# Clean the data","5e45de76":"# Compare accuracy of models","cd0c3d25":"Examine survival % by sex","de22cc03":"# Examine missing data","c01d9e71":"# Examine plain data","8dfcead6":"# Load train_data and test_data from titanic input","4b0b4d55":"# Build models","1c84bd2d":"KNeighbors above","009e42ea":"RandomForest above","c60a5a7a":"Assigns features to be used for training data","f55256d2":"# Submit most accurate model","92ec9b1d":"# Import"}}