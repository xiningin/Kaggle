{"cell_type":{"de6a8475":"code","becd5f5d":"code","a836144f":"code","d4af82b6":"code","23fdb428":"code","2aff7b93":"code","b718fb2c":"code","7de57114":"code","850c984c":"code","f8977527":"code","82e8f857":"code","0af338d4":"code","6d5cb932":"markdown","3721684b":"markdown"},"source":{"de6a8475":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","becd5f5d":"book_df = pd.read_csv('..\/input\/book-recommendation-dataset\/Books.csv')\nratings_df = pd.read_csv('..\/input\/book-recommendation-dataset\/Ratings.csv').sample(40000)\nuser_df = pd.read_csv('..\/input\/book-recommendation-dataset\/Users.csv')\nuser_rating_df = ratings_df.merge(user_df, left_on = 'User-ID', right_on = 'User-ID')","a836144f":"book_user_rating = book_df.merge(user_rating_df, left_on = 'ISBN',right_on = 'ISBN')\nbook_user_rating = book_user_rating[['ISBN', 'Book-Title', 'Book-Author', 'User-ID', 'Book-Rating']]\nbook_user_rating.reset_index(drop=True, inplace = True)","d4af82b6":"d ={}\nfor i,j in enumerate(book_user_rating.ISBN.unique()):\n    d[j] =i\nbook_user_rating['unique_id_book'] = book_user_rating['ISBN'].map(d)\n","23fdb428":"users_books_pivot_matrix_df = book_user_rating.pivot(index='User-ID', \n                                                          columns='unique_id_book', \n                                                          values='Book-Rating').fillna(0)\n\n","2aff7b93":"users_books_pivot_matrix_df.head()","b718fb2c":"users_books_pivot_matrix_df = users_books_pivot_matrix_df.values\nusers_books_pivot_matrix_df","7de57114":"from scipy.sparse.linalg import svds\n\nNUMBER_OF_FACTORS_MF = 15\n\n#Performs matrix factorization of the original user item matrix\nU, sigma, Vt = svds(users_books_pivot_matrix_df, k = NUMBER_OF_FACTORS_MF)","850c984c":"sigma = np.diag(sigma)\nsigma.shape","f8977527":"all_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt) \nall_user_predicted_ratings","82e8f857":"def top_cosine_similarity(data, book_id, top_n=10):\n    index = book_id \n    book_row = data[index, :]\n    magnitude = np.sqrt(np.einsum('ij, ij -> i', data, data))\n    similarity = np.dot(book_row, data.T) \/ (magnitude[index] * magnitude)\n    sort_indexes = np.argsort(-similarity)\n    return sort_indexes[:top_n]\n\ndef similar_books(book_user_rating, book_id, top_indexes):\n    print('Recommendations for {0}: \\n'.format(\n    book_user_rating[book_user_rating.unique_id_book == book_id]['Book-Title'].values[0]))\n    for id in top_indexes + 1:\n        print(book_user_rating[book_user_rating.unique_id_book == id]['Book-Title'].values[0])\n\n","0af338d4":"k = 50\nmovie_id =25954  \ntop_n = 3\nsliced = Vt.T[:, :k] # representative data\n\nsimilar_books(book_user_rating, 25954, top_cosine_similarity(sliced, movie_id, top_n))\n","6d5cb932":"# App link:\n\nhttps:\/\/book-recommendation-system-svd.herokuapp.com\/\n\n","3721684b":"# Collaborative Filtering"}}