{"cell_type":{"b29aa0c2":"code","beaded45":"code","9562998b":"code","0b6f120d":"code","ca3c93bf":"code","a2e8ada4":"markdown","90bd4b10":"markdown","ea4953ab":"markdown"},"source":{"b29aa0c2":"import numpy as np\n\n# numba \u5316\u4f5c\u6226\u3067\u4f7f\u3046\nfrom numba import jit  # import \u306e\u6642\u9593\u306f\u542b\u3081\u306a\u3044\u3067\u8a08\u6e2c\u3057\u305f\u3044\n\n# joblib \u4e26\u5217\u5316\u4f5c\u6226\u3067\u4f7f\u3046\nimport os\nfrom typing import Tuple\nfrom joblib import Parallel, delayed\n\n# \u5916\u5074\u306earray\u3092\u4e0e\u3048\u308b\u3002\nouter_height = 1000\nouter_width = 2000\nouter_array = np.bool_(np.random.randint(0, 2, (outer_height, outer_width)))\n# \u5185\u5074\u306earray\u3092\u4e0e\u3048\u308b\u3002\ninner_height = 700\ninner_width = 1700\ninner_array = np.bool_(np.random.randint(0, 2, (inner_height, inner_width)))","beaded45":"%%time\nmin = np.inf\nfor i in range(outer_height - inner_height):\n    for j in range(outer_width - inner_width):\n        xor = (inner_array^outer_array[i:i + inner_height, j:j + inner_width]).sum()\n        if xor < min:\n            index = (i, j)\n            min = xor\n# \u6c42\u3081\u305f index \u3092\u78ba\u8a8d\u3059\u308b\nindex","9562998b":"%%time\n# numba \u5316\u3059\u308b \u74b0\u5883\u306b\u3088\u3063\u3066\u306f nopytho=True \u304c\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306b\u306a\u308a\u5f97\u308b\n@jit('i2[:,:](b1[:,:],b1[:,:])')\ndef numba_func(outer_array, inner_array):\n    min = np.inf\n    for i in range(outer_height - inner_height):\n        for j in range(outer_width - inner_width):\n            xor = (inner_array^outer_array[i:i + inner_height, j:j + inner_width]).sum()\n            if xor < min:\n                index = (i, j)\n                min = xor\n    return np.array(index, dtype=np.int16)\n\nindex_numba = tuple(numba_func(outer_array, inner_array))\n\n# \u6c42\u3081\u305f index \u3092\u78ba\u8a8d\u3059\u308b\nindex_numba","0b6f120d":"%%time\ndef parallel_func(outer_array: np.ndarray,\n                  inner_array: np.ndarray,\n                  index: Tuple[int, int]) -> Tuple[int, int, int]:\n    \"\"\"\u63a2\u7d22\u3092\u4e26\u5217\u5316\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n    index: \u6574\u6570\u306e\u30bf\u30d7\u30eb, (\u884c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9, \u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9) \n    return: \u6574\u6570\u306e\u30bf\u30d7\u30eb, (\u884c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9, \u5217\u30a4\u30f3\u30c7\u30c3\u30af\u30b9, xor \u306e True \u306e\u6570)\n    \"\"\"\n    i, j = index\n    inner_height, inner_width = inner_array.shape\n    return i, j, (inner_array^outer_array[i:i + inner_height, j:j + inner_width]).sum()\n\n# \u63a2\u7d22\u7b87\u6240\u3092\u5168\u3066\u5f97\u308b\nindice = [(i, j) for i in range(outer_height - inner_height) for j in range(outer_width - inner_width)]\n\n# \u4e26\u5217\u51e6\u7406\u3067 xor \u306e\u5408\u8a08\u5024\u3092\u5168\u3066\u7b97\u51fa\u3059\u308b\nresults = Parallel(n_jobs=os.cpu_count())(delayed(parallel_func)(outer_array, inner_array, idx) for idx in indice)\nresults = np.array(results)\n\n# \u6700\u3082\u5c11\u306a\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7279\u5b9a\u3059\u308b\uff08\u6700\u5c0f\u5024\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u7d50\u679c\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u306a\u308b)\nindex_parallel = tuple(results[np.argmin(results[:, -1])][:-1])\n\n# \u6c42\u3081\u305f index \u3092\u78ba\u8a8d\u3059\u308b\n# \u306a\u304a\u8907\u6570\u306e index \u3067 xor \u306e True \u306e\u6570\u304c\u6700\u5c0f\u5024\u3092\u3068\u308b\u5834\u5408\u4ed6\u3068\u7570\u306a\u308b index \u306b\u306a\u308b\u5f97\u308b\u306e\u3067\u6ce8\u610f\nindex_parallel","ca3c93bf":"\"\"\"Parallel \u3067\u306f\u6700\u5c0f\u5024\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u7d50\u679c\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u306a\u308a\u5f97\u308b\n\u306a\u306e\u3067\u6700\u5c0f\u5024\u3068\u306a\u308b xor_sum \u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\"\"\"\n\nimport pandas as pd\npd.options.display.max_rows = 20\n\n# \u30ab\u30e9\u30e0\u306f `i`, `j` \u304c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067 `xor_sum` \u304c xor \u306e True \u306e\u6570\nxor_sum_df = pd.DataFrame(data=results, columns=['i', 'j', 'xor_sum'])\n\n# `xor_sum` \u304c\u6700\u5c0f\u5024\u3067\u3042\u308b\u884c\u3092\u6700\u592720\u4ef6\u307e\u3067\u8868\u793a\u3059\u308b\n\nxor_sum_df[xor_sum_df['xor_sum'] == xor_sum_df['xor_sum'].min()].sort_values(['i', 'j']).head(20)","a2e8ada4":"# Parallel","90bd4b10":"# Numba","ea4953ab":"# Original"}}