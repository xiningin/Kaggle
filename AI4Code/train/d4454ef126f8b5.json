{"cell_type":{"d17e6802":"code","117f3d04":"code","09739cdc":"code","cf1d49a8":"code","c8fe358b":"code","558dfaf6":"code","a699c5e6":"code","6860f5dc":"code","f5fad2dd":"code","c0f69ab6":"code","abe6cda7":"code","69957056":"code","2f9867b6":"code","d716354b":"code","bcd92d71":"code","7114f47e":"code","1114c479":"code","2f23cd08":"code","4c49f3c4":"code","e4b34c19":"code","51ab14f0":"code","b878023c":"code","7c12e09b":"code","225fc6ee":"code","cb553d3e":"code","c99058c6":"markdown","a78a8127":"markdown","0e55379d":"markdown","0e597110":"markdown","9b9d7a96":"markdown","d9a954a9":"markdown","e9c159e3":"markdown","f82f53db":"markdown"},"source":{"d17e6802":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","117f3d04":"import pandas as pd\npd.set_option('display.max_columns', 20)\n","09739cdc":"# Two datasets are merged so that both ratings, user ids and movie names take place in the same dataset.\n\nmovie = pd.read_csv('..\/input\/movielense20m\/movie.csv')\nrating = pd.read_csv('..\/input\/movielense20m\/rating.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","cf1d49a8":"# The number of comments for each movie. \n\ncomment_counts = pd.DataFrame(df[\"title\"].value_counts())\ncomment_counts.head()","c8fe358b":"df.shape","558dfaf6":"# Movies which have comments less than 1000 are rare, considering the size of the dataset.\n\nrare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n","a699c5e6":"# The rare movies are left out. \n\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\n","6860f5dc":"# A pivot table where user id is the index, movie id is the column and ratings are the values is constructed.\n\nuser_movie_df = common_movies.pivot_table(index = [\"userId\"], columns = [\"movieId\"], values = \"rating\")\nuser_movie_df.head()","f5fad2dd":"# An arbitrary user is picked. The user's id is chosen from the pivot table and assigned to a new dataframe.\n\nuser = 108170\nuser_df = user_movie_df[user_movie_df.index == 108170]\nuser_df.head()","c0f69ab6":"# NaN values are left out. So the remaining indexes are the movies that the user watched.\n\nmovies_watched = user_df.columns[user_df.notna().any()].tolist()\n","abe6cda7":"# A new dataframe is constructed with the same columns as the pivot table filtering watched movies of the user.\n\nmovies_watched_df = user_movie_df[movies_watched]\n\nmovies_watched_df.head()","69957056":"# The number of movies each user watched in the movies_watched dataframe, hence the number of movies each user watched commonly with the user.\n\nuser_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count = user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\nuser_movie_count.head()\n","2f9867b6":"# Watching 60% or over movies with the user is a step to be considered as similar. These similar tasted users are gathered. \n    \nperc = len(movies_watched) * 60 \/ 100\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\nusers_same_movies.head()\n    ","d716354b":"# Watching the same movies is not enough to be similar. They should both give same ratings for the movies. \n\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],\n                      user_df[movies_watched]])\nfinal_df.head()","bcd92d71":"# The correlation between each user ratings are specified and sorted in descending order. \n\ncorr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()\ncorr_df.head()","7114f47e":"# One of the users in the correlation table should be the first user. To be considered as similar, the correlation threshold value is taken 0.65.\n\ntop_users = corr_df[(corr_df[\"user_id_1\"] == user) & (corr_df[\"corr\"] >= 0.65)][[\"user_id_2\", \"corr\"]].reset_index(drop=True)\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users.head()\n","1114c479":"# The movie id and the rating data are merged with the correlation data. The highest correlation belongs to the user himself, so it is removed.\n\nrating = pd.read_csv('..\/input\/movielense20m\/rating.csv')\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\ntop_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != user]\ntop_users_ratings.head()","2f23cd08":"# It is wanted to have the suggestion from the most similar ones, however rating may differ among the most similar ones. So a scale is \n# arranged with correlation and rating.\n\ntop_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.head()\n","4c49f3c4":"# The weighted average scores are sorted according to movie id.\n\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\nrecommendation_df.head()","e4b34c19":"# The movies having score greater than 3.5 are selected.\n\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3.5].sort_values(\"weighted_rating\", ascending=False)","51ab14f0":"# The movie names are needed so the datasets are merged. So here is the list of the 5 movies to recommend for the specified user. \n\nmovie = pd.read_csv('..\/input\/movielense20m\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"]","b878023c":"# The movie id which the user last watched and rated high\n\nmovie_id = rating[(rating[\"userId\"] == user) & (rating[\"rating\"] == 5.0)].sort_values(by = \"timestamp\", ascending = False)[\"movieId\"][0:1].values[0]","7c12e09b":"# A pivot table where user id is the index, movie name is the column and ratings are the values is constructed.\n\nuser_moviename_df = common_movies.pivot_table(index = [\"userId\"], columns = [\"title\"], values = \"rating\")","225fc6ee":"# The function gets the movie name from the pivot table, and brigns the most correlated movies with it in descending order.\n\ndef item_based_recommender(movie_name, user_moviename_df):\n    movie = user_moviename_df[movie_name]\n    return user_moviename_df.corrwith(movie).sort_values(ascending=False).head(10)\n\n\nmovies_from_item_based = item_based_recommender(movie[movie[\"movieId\"] == movie_id][\"title\"].values[0], user_moviename_df)","cb553d3e":"# These are the 5 movies to suggest to the user based on his taste.\n\nmovies_from_item_based[1:6].index","c99058c6":"# Item Based Recommendation","a78a8127":"# The calculation of Weighted Average Recommendation Score","0e55379d":"# Detecting the movies that the user watched","0e597110":"# Reaching the other users who watched the same movies as the user","9b9d7a96":"This project aims to recommend movies to the user by item based and user based collaborative filtering. \n\nIn the item based filtering, the item is recommended based on the voting the user had done for other items. \n\nIn the user based filtering, the user have the same preferences and same likes with the other users. The item which other users liked is recommended to the user. \n\n","d9a954a9":"# User Based Recommendation","e9c159e3":"# Finding the most similar users with the user","f82f53db":"# Preparing User - Movie Matrix"}}