{"cell_type":{"fe31157f":"code","8bb2cb90":"code","a54012f2":"code","c93c9789":"code","04fc3229":"code","e6f62fa8":"code","c284bc42":"code","18a89a46":"code","09195daf":"code","f4fe6e29":"code","c192e968":"code","6cdb5dd4":"code","88b0509c":"markdown"},"source":{"fe31157f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8bb2cb90":"data = pd.read_csv('..\/input\/mri-and-alzheimers\/oasis_cross-sectional.csv') #we read data\ndata.info()\ndata.head()\ndata.describe()","a54012f2":"#%%  WE need to filling NAn data so we work with mean. Because We need to all data\n\n\ndata[\"Delay\"].fillna(value = 20.55000 ,inplace = True)\ndata[\"Educ\"].fillna(value = 3.178723 ,inplace = True)\ndata[\"SES\"].fillna(value = 2.490741,inplace = True)\ndata[\"MMSE\"].fillna(value = 27.06383,inplace = True)\ndata[\"CDR\"].fillna(value = 0.285106,inplace = True)\n\n\ndata['Gender'] = data['M\/F']\ndata.drop([\"ID\",\"Hand\", \"M\/F\"],axis=1,inplace = True)\n\n","c93c9789":"# %% Some \u0130mportant Settings\n\n\ndata.Gender = [1 if each == \"M\" else 0 for each in data.Gender]\ny = data.Gender.values\nx_data = data.drop([\"Gender\"],axis=1)\n","04fc3229":"# %% normalization\n# (x - min(x))\/(max(x)-min(x))\n\n\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n\n","e6f62fa8":"# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","c284bc42":"# %% parameter initialize and sigmoid function\n# dimension = 30\ndef initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n\n# w,b = initialize_weights_and_bias(30)\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head\n","18a89a46":"# %%\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","09195daf":"#%% Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","f4fe6e29":"#%%  # prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n","c192e968":"# %% logistic_regression\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 300)    \n","6cdb5dd4":"#%% sklearn with LR\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nprint(\"Test Accuracy {}\".format(lr.score(x_test.T,y_test.T)))\n","88b0509c":"# CONCLUSION\n\n   Result is Test Accuracy 0.7727272727272727. \n\n   This show little accuracy but discrimination difficult for Alzheimer's because this not Gender illness just bad ilness but My Machine is discrimination with %72 accuarry. This is important success"}}