{"cell_type":{"ee96d239":"code","ed631378":"code","01611eb4":"code","cff30902":"code","818090a5":"code","687c1b23":"code","77f5c43c":"code","159c9d0f":"code","cd12f00e":"code","42b0d7f0":"code","4ba248c4":"code","a5d5f8ca":"code","95de433f":"code","4e91ecd3":"code","68de7ed0":"code","6cc28e81":"code","6407575b":"code","29dd31e1":"code","f889e25a":"code","75ceda57":"code","9bb001a8":"code","ef21a97a":"code","80a53ab2":"code","87659b4c":"code","e8657c13":"code","ae04523c":"code","5fcf27a3":"code","3d77ee6b":"code","eed47e8e":"code","6c25a5cb":"code","b6b09bc3":"code","d1911c43":"code","daf76dcd":"code","19decb8e":"code","4b650d6c":"code","6bb1110c":"code","e1f544eb":"code","a6b3505b":"code","3d8909cf":"code","f4877d3e":"code","d764187a":"code","0af33583":"code","55bc58a5":"code","2cbaf7fe":"code","d89f6fcc":"code","2acfd07c":"code","1ca689aa":"code","99e0ab3b":"code","9803517c":"code","f3c80974":"code","55ddde3c":"code","abc1e41c":"code","66b4fcbe":"code","327bee34":"code","fb4618a0":"code","94550878":"code","616ddb1e":"code","e84624fc":"code","ec0e1897":"code","df4177b9":"code","468e0608":"code","9293b616":"code","8f750096":"markdown","a94ea935":"markdown","d80be657":"markdown","ed535e27":"markdown","47243f95":"markdown","17174f28":"markdown","960e8c0b":"markdown","fcaafaaf":"markdown","6c098d9f":"markdown","75ac2c2b":"markdown","c369053a":"markdown","8aca153c":"markdown","890cdc47":"markdown","08fde479":"markdown","313b7bd9":"markdown","f1eaa4e0":"markdown","a48e16de":"markdown","4813256a":"markdown","9facaa54":"markdown","9045eb11":"markdown","b76caac6":"markdown","f8fbb13b":"markdown","e244e6e9":"markdown","19fb2f68":"markdown","30bd668e":"markdown","b1d84853":"markdown","c7ef3811":"markdown","892d1065":"markdown","7e59021d":"markdown","1340fcd9":"markdown","d1ead241":"markdown","3fd469c2":"markdown","5699cf29":"markdown","8a88742e":"markdown","0ba76d47":"markdown","f97446af":"markdown","f90e7e3d":"markdown","13f0cbea":"markdown","ee4729dd":"markdown","843717d9":"markdown","e6f2890d":"markdown"},"source":{"ee96d239":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nfrom scipy import stats\n\n!pip install ipy_table\nimport ipy_table as tbl\n\nimport warnings\nwarnings.filterwarnings('ignore')","ed631378":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","01611eb4":"df_train.shape","cff30902":"df_train.columns","818090a5":"df_train.info()","687c1b23":"df_train.isnull().sum()","77f5c43c":" df_train.Survived.value_counts()","159c9d0f":"f,ax = plt.subplots(1,2,figsize=(18,8))\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct = '%1.1f%%', ax=ax[0],shadow=True)\nax[0].set_title(\"Survived\")\nax[0].set_ylabel('')\nsns.countplot('Survived', data=df_train,ax=ax[1])\nax[1].set_title('Survived')\nax[1].set_xlabel('Survived')\nplt.show()","cd12f00e":"sns.heatmap(df_train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)\nfig=plt.gcf()\nfig.set_size_inches(10,8)\nplt.show()","42b0d7f0":" df_train.groupby(['Sex','Survived'])['Survived'].count()","4ba248c4":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train[['Sex', 'Survived']].groupby(['Sex']).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","a5d5f8ca":"pd.crosstab(df_train.Pclass,df_train.Survived,margins=True).style.background_gradient(cmap='YlGn')","95de433f":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['Blue','Red','Green'],ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead')\nplt.show()","4e91ecd3":"pd.crosstab([df_train.Sex,df_train.Survived],df_train.Pclass,margins=True).style.background_gradient(cmap='summer_r')","68de7ed0":"sns.factorplot('Pclass','Survived',hue='Sex',data=df_train)\nplt.show()","6cc28e81":"print('Mean Age',df_train.Age.mean())\nprint('Max Age',df_train.Age.max())\nprint('Min Age',df_train.Age.min())","6407575b":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot('Pclass','Age',hue='Survived',split=True,data=df_train,ax=ax[0])\nax[0].set_title('Survived vs Pclass and Age')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot('Sex','Age',hue='Survived',split=True,data=df_train,ax=ax[1])\nax[1].set_title('Survived vs Age and Sex')\nax[1].set_yticks(range(0,110,10))\nplt.show()","29dd31e1":"df_train.Age.isna().sum()","f889e25a":"df_train['Intial'] = df_train.Name.str.extract('([A-Za-z]+)\\.')","75ceda57":"pd.crosstab(df_train.Sex,df_train.Intial).style.background_gradient(cmap='summer_r')","9bb001a8":"df_train['Intial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],\n                            ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)","ef21a97a":"df_train.groupby('Intial')['Age'].mean()","80a53ab2":"df_train.loc[(df_train.Age.isnull())&(df_train.Intial=='Mr'),'Age']=33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Intial=='Mrs'),'Age']=36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Intial=='Master'),'Age']=5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Intial=='Miss'),'Age']=21\ndf_train.loc[(df_train.Age.isnull())&(df_train.Intial=='Other'),'Age']=46","87659b4c":"df_train.Age.isnull().sum()","e8657c13":"f,ax=plt.subplots(1,2,figsize=(20,10))\ndf_train[df_train['Survived']==0].Age.plot.hist(ax=ax[0],bins=20,edgecolor='black',color='red')\nax[0].set_title('Survived=0')\nax[0].set_xticks(range(0,90,5))\ndf_train[df_train['Survived']==1].Age.plot.hist(ax=ax[1],bins=20,edgecolor='black',color='green')\nax[1].set_title('Survived=1')\nax[1].set_xticks(range(0,90,5));","ae04523c":"sns.factorplot('Pclass','Survived', col='Intial',data=df_train)\nplt.show()","5fcf27a3":"pd.crosstab([df_train.Embarked,df_train.Pclass],[df_train.Sex,df_train.Survived],\n            margins=True).style.background_gradient(cmap='summer_r')","3d77ee6b":"sns.factorplot('Embarked','Survived',data=df_train)\nfig=plt.gcf()\nfig.set_size_inches(5,3)\nplt.show()","eed47e8e":"f,ax=plt.subplots(2,2,figsize=(20,10))\nsns.countplot('Embarked',data=df_train,ax=ax[0,0])\nax[0,0].set_title('No. of passangers board')\nsns.countplot('Embarked',hue='Sex',data=df_train,ax=ax[0,1])\nax[0,1].set_title('male female split for Embarked')\nsns.countplot('Embarked',hue='Pclass',data=df_train,ax=ax[1,0])\nax[1,0].set_title('Classwise split for Embarked')\nsns.countplot('Embarked',hue='Survived',data=df_train,ax=ax[1,1])\nax[1,1].set_title('Survived vs Embareked')\nplt.subplots_adjust(wspace=0.2,hspace=0.5)\nplt.show()","6c25a5cb":"sns.factorplot('Pclass','Survived',hue='Sex',col='Embarked',data=df_train)\nplt.show();","b6b09bc3":"df_train.Embarked.isna().sum()","d1911c43":"df_train.Embarked.fillna('S',inplace=True)","daf76dcd":"df_train.Embarked.isna().sum()","19decb8e":"pd.crosstab(df_train.SibSp,df_train.Survived,margins=True).style.background_gradient(cmap='summer_r')","4b650d6c":"sns.barplot('SibSp','Survived',data=df_train)\nplt.show()","6bb1110c":"pd.crosstab(df_train.SibSp,df_train.Pclass).style.background_gradient(cmap='summer_r')","e1f544eb":"pd.crosstab(df_train.Parch,df_train.Survived,margins=True).style.background_gradient(cmap='summer_r')","a6b3505b":"sns.barplot('Parch','Survived',data=df_train)\nplt.show()","3d8909cf":"print('max fare:',df_train.Fare.max())\nprint('min fare:',df_train.Fare.min())\nprint('mean fare:',df_train.Fare.mean())","f4877d3e":"f,ax=plt.subplots(1,3,figsize=(20,8))\nsns.distplot(df_train[df_train['Pclass']==1].Fare,ax=ax[0])\nax[0].set_title('Fare for Pclass 1')\nsns.distplot(df_train[df_train['Pclass']==2].Fare,ax=ax[1])\nax[1].set_title('Fare for Pclass 2')\nsns.distplot(df_train[df_train['Pclass']==3].Fare,ax=ax[2])\nax[2].set_title('Fare for Pclass 2')\nplt.show();","d764187a":"df_train1 = df_train.copy()","0af33583":"table = pd.crosstab(df_train['Survived'],df_train['Sex'])\nprint(table)","55bc58a5":"table = pd.crosstab([df_train['Survived']], df_train['Sex'])\nchi2, p, dof, expected = stats.chi2_contingency(table.values)\nresults = [\n    ['Item','Value'],\n    ['Chi-Square Test',chi2],\n    ['P-Value', p]\n]\ntbl.make_table(results)","2cbaf7fe":"fare_labels = ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79', '80-89', '90-99', '100+']\ndf_train['fare_group'] = pd.cut(df_train.Fare, [0,10,20,30,40,50,60,70,80,90,100,600], right=False, labels=fare_labels)\nprint(df_train.groupby(['fare_group']).Survived.mean())","d89f6fcc":"df_train.groupby(['fare_group']).size().plot(kind='bar',stacked=True)\nplt.title(\"Distribution of fares\",fontsize=14)\nplt.ylabel('Count')\nplt.xlabel('Fare range')","2acfd07c":"table = pd.crosstab([df_train['Survived']], df_train['fare_group'])\nchi2, p, dof, expected = stats.chi2_contingency(table.values)\nresults = [\n    ['Item','Value'],\n    ['Chi-Square Test',chi2],\n    ['P-Value', p]\n]\ntbl.make_table(results)","1ca689aa":"table = pd.crosstab(df_train['Survived'],df_train['Pclass'])\nprint(table)","99e0ab3b":"table = pd.crosstab([df_train['Survived']], df_train['Pclass'])\nchi2, p, dof, expected = stats.chi2_contingency(table.values)\nresults = [\n    ['Item','Value'],\n    ['Chi-Square Test',chi2],\n    ['P-Value', p]\n]\ntbl.make_table(results)","9803517c":"age_labels = ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79']\ndf_train['age_group'] = pd.cut(df_train.Age, range(0, 81, 10), right=False, labels=age_labels)\nprint(df_train.groupby(['age_group']).Survived.mean())","f3c80974":"df_train.groupby(['age_group']).size().plot(kind='bar',stacked=True)\nplt.title(\"Distribution of Age Groups\",fontsize=14)\nplt.ylabel('Count')\nplt.xlabel('Age Group')","55ddde3c":"table = pd.crosstab([df_train['Survived']], df_train['age_group'])\nchi2, p, dof, expected = stats.chi2_contingency(table.values)\nresults = [\n    ['Item','Value'],\n    ['Chi-Square Test',chi2],\n    ['P-Value', p]\n]\ntbl.make_table(results)","abc1e41c":"train = df_train1.copy()\n\ntrain.drop(['Name', 'Ticket', 'Cabin', 'Intial'], axis=1, inplace=True)\n\ntrain['Sex'] = train['Sex'].map({\"male\": 0, \"female\": 1})\ntrain['Male'] = np.where(train['Sex']==0, 1, 0)\ntrain['Female'] = np.where(train['Sex']==1, 1, 0)\ntrain.drop('Sex', axis=1, inplace=True)\n\ntrain['Embarked'] = train['Embarked'].map({\"S\": 1, \"C\": 2, \"Q\": 3})\ntrain['S'] = np.where(train['Embarked']==1, 1, 0)\ntrain['C'] = np.where(train['Embarked']==2, 1, 0)\ntrain['Q'] = np.where(train['Embarked']==3, 1, 0)\ntrain.drop('Embarked', axis=1, inplace=True)\n\ntrain['Fare'] = round(train['Fare'])\ntrain['Fare'] = train['Fare'].astype('int')\n\ntrain['Age'] = round(train['Age'])\ntrain['Age'] = train['Age'].astype('int')","66b4fcbe":"train.head()","327bee34":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\npredictors = train.drop(['Survived', 'PassengerId'], axis=1)\ntarget = train[\"Survived\"]\nx_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.2, random_state = 0)","fb4618a0":"# Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_val)\nacc_logreg = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_logreg)","94550878":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_val)\nacc_svc = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_svc)","616ddb1e":"# Perceptron\nfrom sklearn.linear_model import Perceptron\n\nperceptron = Perceptron()\nperceptron.fit(x_train, y_train)\ny_pred = perceptron.predict(x_val)\nacc_perceptron = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_perceptron)","e84624fc":"#Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\ndecisiontree = DecisionTreeClassifier()\ndecisiontree.fit(x_train, y_train)\ny_pred = decisiontree.predict(x_val)\nacc_decisiontree = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_decisiontree)","ec0e1897":"# Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(x_train, y_train)\ny_pred = randomforest.predict(x_val)\nacc_randomforest = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_randomforest)","df4177b9":"# K-Nearest Neighbors\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\ny_pred = knn.predict(x_val)\nacc_knn = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_knn)","468e0608":"models = pd.DataFrame({\n    'Model': ['Support Vector Machine', 'K-Nearest Neighbors', 'Logistic Regression', \n              'Random Forest', 'Perceptron', 'Decision Tree'],\n    'Score': [acc_svc, acc_knn, acc_logreg, \n              acc_randomforest, acc_perceptron, acc_decisiontree]})\nmodels.sort_values(by='Score', ascending=False)","9293b616":"# Ensemble\nfrom sklearn.ensemble import StackingClassifier\n\nestimators = [('lr', LogisticRegression()), ('svc', SVC()), ('perc', Perceptron()), ('dt', DecisionTreeClassifier()), ('rf', RandomForestClassifier()), ('knn', KNeighborsClassifier())]\n\nensemble = StackingClassifier(estimators=estimators)\nensemble.fit(x_train, y_train)\ny_pred = ensemble.predict(x_val)\nacc_ensemble = round(accuracy_score(y_pred, y_val) * 100, 2)\nprint(acc_ensemble)","8f750096":"## Hypothesis 2\n\nH0 = Fare has no impact on survivability\n\nHA = Fare does impact the chances of survivability","a94ea935":"**5. Parch** <br\/>\nIt is an Ordinal Feature","d80be657":"Inferences:\n* Survival rate for children below 10 are pretty good.\n* Pclass1 passengers had a higher survival rate between 20-50 age group.\n* Survival rate for men decrease with increase in age.","ed535e27":"Models used for training:\n\n* Logistic Regression\n* Support Vector Machine\n* Perceptron\n* Decision Tree Classifier\n* Random Forest Classifier\n* K-Nearest Neighbors","47243f95":"Inference: Features are less correlated to each other.","17174f28":"## Hypothesis 4\n\nH0 = Age Group has no impact on survivability\n\nHA = Age Group does impact the chances of survivabily","960e8c0b":"# Train Models","fcaafaaf":"# Survival Count","6c098d9f":"**Conclusion:** As the P-Value is less than 0.05, the probability of social class impacting the chances of survival is high.\n\nTherefore, the null hypothesis can be safely rejected.","75ac2c2b":"## Hypothesis 1\n\nH0 = Gender has no impact on survivability\n\nHA = Gender does impact the chances of survivability","c369053a":"**4. Embarked** <br\/>\nIt is a Categorical Feature","8aca153c":"Inference: From this, we can see that only around 18% of men survived while around 75% of women survived.","890cdc47":"Inference: There are 891 rows and 12 columns.","08fde479":"Final Inferences:\n* **Sex:** The chance of survival for women is high when compared to men.\n \n* **Pclass**:There is a visible trend that being a 1st class passenger gives you better chances of survival. The survival rate for Pclass3 is very low. For women, the chance of survival from Pclass1 is almost 1 and is also high for those from Pclass2.\n\n* **Age**: Children less than 5-10 years do have a high chance of survival. Passengers between age group 15 to 35 died a lot.\n \n* **Embarked**: This is a very interesting feature. The chances of survival at C looks better even though the majority of Pclass1 passengers got up at S. Passengers at Q were all from Pclass3.\n\n* **Parch+SibSp**: Having 1-2 siblings, spouse on board or 1-3 Parents showed a greater rate of survival rather than being alone or having a large family travelling with you.","313b7bd9":"# Load the Dataset ","f1eaa4e0":"Inferences:\n* There was a 55% chance of survival for those who had boarded from port C.\n* People who have boarded the ship from port S had lowest survival rates.","a48e16de":"**3. Age** <br\/>\nIt is a continous feature","4813256a":"# Analysing the Features","9facaa54":"Inferences:\n* P1class survival rate is around 63%.\n* P2class survival rate is around 48%.\n* P3class survival rate is around 25%.","9045eb11":"Inference: Only about 342 people survived out of 891.","b76caac6":"# Correlation Between The Features","f8fbb13b":"Missing data to be imputed with a 'S' as that is the port from where the majority of passengers embarked.","e244e6e9":"**5. SibSb** <br\/>\nIt is an Ordinal Feature","19fb2f68":"**6. Fare** <br\/>\nIt is a Continous Feature","30bd668e":"## Hypothesis 3\n\nH0 = Social Class has no impact on survivability\n\nHA = Social Class does impact the chances of survivabily","b1d84853":"# Prepare Data","c7ef3811":"Inferences:\n* Survival rate for women of class 1 and 2 is almost 100%.\n* Port Q has the least survival rate for men.\n* Port S has the least survival rate for women of class 3.","892d1065":"**1. Sex** <br\/>\nIt is a categorical feature","7e59021d":"**Conclusion:** As the P-Value is less than 0.05, the probability of fare impacting the chances of survival is high.\n\nTherefore, the null hypothesis can be safely rejected.","1340fcd9":"Inference: By the above plot, we can deduce that the chance of survival is 38.4%.","d1ead241":"Inference: Women and children had the highest survival rate.","3fd469c2":"# Hypothesis Testing","5699cf29":"Inferences:\n* Oldest person to survive is of age 85.\n* Infants were saved in large number.\n* Maximum deaths are at age 30-40.","8a88742e":"**Conclusion:** As the P-Value is less than 0.05, the probability of age impacting the chances of survival is high.\n\nTherefore, the null hypothesis can be safely rejected.","0ba76d47":"**Conclusion:** As the P-Value is less than 0.05, the probability of gender impacting the chances of survival is high.\n\nTherefore, the null hypothesis can be safely rejected.","f97446af":"Inferences:\n*  Women of Pclass1 had a survival rate upto 98%.\n*  Even the men of Pclass1 had a lesser survival rate than that of the Pclass3 women.\n*  Men of Pclass3 had a survival rate as low as 15%.","f90e7e3d":"Inferences:\n* Maximun passengers from S are of Pclass3.\n* Passengers embarked at port C had the highest survival rate.\n* 95% of people embarked at port Q are of Pclass3.","13f0cbea":"**2. Pclass** <br\/>\nIts is an ordinal feature","ee4729dd":"Inferences: \n* The null value count for the age feature is significant when compared to the number of training examples, around 20%.\n* Therefore, it is essential that we impute the missing values cleverly so as to prevent mis-interpretation of the resultant data.\n* We can know which age group a person belongs by extracting the intials from their name.","843717d9":"Inference: Age, Cabin and Embarked are the features with null value.","e6f2890d":"# Import the Libraries"}}