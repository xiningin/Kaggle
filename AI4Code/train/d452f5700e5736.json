{"cell_type":{"9c654efd":"code","85e8a112":"code","3c655b9c":"code","9a9891f1":"code","23e7f20d":"code","a2d48ebb":"code","f285a50c":"code","8082435a":"code","6ead6177":"code","0a5342fb":"code","e5a7df4b":"code","c5e02662":"code","6f735604":"code","2d4e1dc9":"code","ecbec9f9":"code","9c1c4df5":"code","171614b2":"code","986cfc43":"code","332ede3a":"code","518f0b7f":"code","1977f838":"code","9045e4b8":"code","36ad24b0":"code","ca9ee90e":"code","ae98171c":"code","67aff8d7":"code","e99435bf":"code","6a91325a":"code","339944d7":"code","2954af47":"code","7fe91002":"code","f3d696d7":"code","d236da83":"code","36474032":"markdown","c98ea192":"markdown","668554b2":"markdown","69fe6d0d":"markdown","81d0b7f4":"markdown","e0a25626":"markdown","a0475cd5":"markdown","bbbf4abe":"markdown","9a250e16":"markdown","a3f7468d":"markdown","a6305697":"markdown"},"source":{"9c654efd":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\nimport warnings \nwarnings.filterwarnings('ignore')\n","85e8a112":"data = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')\npd.set_option('max_columns', None)","3c655b9c":"data","9a9891f1":"data.isna().sum()","23e7f20d":"#remove unneccessary columns\ndata.drop(['id','Unnamed: 32'], axis=1, inplace=True)","a2d48ebb":"data.dtypes","f285a50c":"data['diagnosis'].unique()","8082435a":"data['diagnosis'] = data['diagnosis'].apply(lambda x: 1 if x == 'M' else 0)","6ead6177":"data['diagnosis'].unique()","0a5342fb":"def preprocessing_inputs(df):\n    df = df.copy()\n    \n    #Split DataFrame\n    y = df['diagnosis']\n    X = df.drop('diagnosis', axis=1)\n    \n    #Train Test Split\n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=1)\n    \n    #Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), index=X_train.index, columns=X_train.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, columns=X_test.columns)\n    \n    \n    return X_train, X_test, y_train, y_test","e5a7df4b":"X_train, X_test, y_train, y_test = preprocessing_inputs(data)","c5e02662":"print('Train set:', X_train.shape,  y_train.shape)\nprint('Test set:', X_test.shape,  y_test.shape)","6f735604":"parameters = {'kernel':('linear', 'rbf','poly','rbf', 'sigmoid'),\n              'C': np.logspace(-3, 3, 5),\n              'gamma':np.logspace(-3, 3, 5)}\nsvm = SVC()","2d4e1dc9":"svm_cv = GridSearchCV(estimator=svm, param_grid=parameters, cv=10)\nsvm_cv.fit(X_train, y_train)","ecbec9f9":"print('tuned hpyerparameters:' ,svm_cv.best_params_)\nprint('accuracy:','{:.2%}'.format(svm_cv.best_score_))","9c1c4df5":"parameters = {'C': [0.01, 0.1, 1],\n              'penalty': ['l2', 'l1'],\n              'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']}\nlogreg = LogisticRegression()","171614b2":"logreg_cv = GridSearchCV(estimator=logreg, param_grid=parameters, cv=10)\nlogreg_cv.fit(X_train, y_train)","986cfc43":"print('Tuned paramters:', logreg_cv.best_params_)\nprint('Accuracy:', '{:.2%}'.format(logreg_cv.best_score_))","332ede3a":"from sklearn.metrics import confusion_matrix\ndef plot_confusion_matrix(y,y_predict):\n    #Function to easily plot confusion matrix\n    cm = confusion_matrix(y, y_predict)\n    ax= plt.subplot()\n    sns.heatmap(cm, annot=True, ax = ax, fmt='g');\n    ax.set_xlabel('Predicted labels')\n    ax.set_ylabel('True labels')\n    ax.set_title('Confusion Matrix'); \n    ax.xaxis.set_ticklabels(['Bengin', 'Malignant']); ax.yaxis.set_ticklabels(['Bengin', 'Malignant'])","518f0b7f":"yhat_svm = svm_cv.predict(X_test)\nsvm_acc = accuracy_score(y_test, yhat_svm)\nprint('Support Vector Machine Accuracy:', '{:.2%}'.format(svm_acc))","1977f838":"plot_confusion_matrix(y_test, yhat_svm)","9045e4b8":"yhat_log = logreg_cv.predict(X_test)\nlogreg_acc = accuracy_score(y_test, yhat_log)\nprint('Logistic Regression Accuracy:', '{:.2%}'.format(logreg_acc))","36ad24b0":"plot_confusion_matrix(y_test, yhat_log)","ca9ee90e":"n_components = 3\npca = PCA(n_components=n_components)\npca.fit(X_train)\n\npca_train = pd.DataFrame(pca.transform(X_train), columns=['PC' + str(i + 1) for i in range(n_components)])\npca_test = pd.DataFrame(pca.transform(X_test), columns=['PC' + str(i + 1) for i in range(n_components)])","ae98171c":"pca_train","67aff8d7":"plt.figure(figsize=(16,10))\nsns.barplot(x=pca.explained_variance_ratio_, y=['PC' + str(i + 1) for i in range(n_components)], orient='h', palette='tab10')\nplt.xlim(0,1)\nplt.xlabel('Proportion of Variance in Original Data', size=12)\nplt.title('Principle Component Variance', size=16)","e99435bf":"svm_cv = SVC(C=1.0, gamma=0.001, kernel='linear')\nlogreg_cv = LogisticRegression(C=0.1, penalty='l2', solver='liblinear')","6a91325a":"pca_svm = svm_cv.fit(pca_train, y_train)\npca_log = logreg_cv.fit(pca_train, y_train)","339944d7":"pca_svm_acc = pca_svm.score(pca_test, y_test)\npca_log_acc = pca_log.score(pca_test, y_test)","2954af47":"print('PCA Support Vector Machine Accuracy:', '{:.2%}'.format(pca_svm_acc))\nprint('PCA Logistic Regression Accuracy:', '{:.2%}'.format(pca_log_acc))","7fe91002":"model_dict = {\n            'models':['SVM', 'PCA SVM', 'Logistic Reg', 'PCA Logistic Reg'],\n            'scores':[svm_acc, pca_svm_acc, logreg_acc, pca_log_acc]\n}","f3d696d7":"model_df = pd.DataFrame.from_dict(model_dict)","d236da83":"model_df.plot(kind='bar', x='models', y='scores', figsize=(8,6))\nplt.xlabel('Models', size=12)\nplt.xticks(rotation=30)\nplt.ylabel('Accuracy Scores', size=12)\nplt.title('Model Performance', size=16)","36474032":"# Data Preprocessing","c98ea192":"# Breast Cancer Classification\n## Objectives:\n* Clean data and determine training labels\n* Split, scale, and standardize data\n* Find best Hyperparameter for SVM and Logistic Regression\n* Compare models before and after apply","668554b2":"# Data Cleaning","69fe6d0d":"\nas we can see only the diagnosis column has non-numeric data, therefore, we can convert these labels to numeric values instead\n","81d0b7f4":"# Import Libraries & Load Data","e0a25626":"## SVM","a0475cd5":"## Logistic Regression","bbbf4abe":"# Compare Models","9a250e16":"# Training Results","a3f7468d":"# Principle Component Analysis (PCA)","a6305697":"# Model Training"}}